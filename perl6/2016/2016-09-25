[00:19] *** japhb_ is now known as japhb

[00:36] <bioduds_> hi ugexe

[00:36] <bioduds_> how are you doing?

[00:39] *** simcop2387 left
[00:41] *** simcop2387 joined
[00:46] *** ka joined
[00:53] *** DrParis joined
[00:54] *** isacloud joined
[00:55] *** jnthn left
[00:55] *** edenc joined
[00:56] *** Jonis left
[00:56] *** integral joined
[00:56] *** chris2 left
[00:57] *** kipd joined
[00:58] *** albongo joined
[00:59] *** smash left
[01:00] *** jnthn joined
[01:02] *** chris2 joined
[01:02] *** jnap_ joined
[01:02] *** chee joined
[01:03] *** Jonis joined
[01:17] *** AlexDaniel joined
[01:19] *** smash joined
[01:21] *** xinming left
[01:22] *** xinming joined
[01:28] *** pierre_ joined
[01:32] *** pierre_ left
[01:36] *** rindolf left
[01:54] *** grondilu left
[01:56] *** sufrostico joined
[02:08] *** fudje joined
[02:09] *** fudje left
[02:10] *** noganex joined
[02:14] *** noganex_ left
[02:19] *** BenGoldberg joined
[02:23] <tushar> I am trying to implement multi methods. "multi method get-row (Int :$index! --> Array) { code.. }" and "multi method get-row (Array :@index! --> Array) { code.. }". When I try to call one of them "$obj.get-row(index => [0..2]);", I am experiencing an error stating "Cannot resolve caller AUTOGEN(DataTable: Array); none of these signatures match:". Any idea why any of them are not found? Is there anything wrong that I am doing?

[02:23] <yoleaux> 23 Sep 2016 02:05Z <BenGoldberg> tushar: For a conventient way to install libmagic, consider using the perl5 module Alien::LibMagic.

[02:24] <tushar> BenGoldberg: Thanks

[02:25] *** tadzik joined
[02:25] *** M-Illandan joined
[02:25] *** Matthew[m] joined
[02:29] * geekosaur wonders if multis can dispatch solely on named parameters currently

[02:30] <tushar> geekosaur: can elaborate your statement? Thanks.

[02:30] <tushar> you*

[02:31] <geekosaur> all the examples I've seen of multis have at least one positional parameter they can dispatch on type. your multis have each one named parameter and no positiona;s

[02:31] <ugexe> m: class Foo { multi method get-row (Int :$index! --> Array) { ["int",] }; multi method get-row (:@index! --> Array) { ["array",] } }; say Foo.new.get-row(index => 1); say Foo.new.get-row(index => [1..2])

[02:31] <camelia> rakudo-moar 690d4a: OUTPUT«[int]␤[array]␤»

[02:32] <geekosaur> ok, guess that works

[02:32] <geekosaur> can you provide a bit more context for the program and the error, tushar?

[02:32] <raydiak> m: multi get-row (Int :$index! --> Array) { say 0 }; multi get-row (Array :@index! --> Array) { say 1 }; get-row(index => [0..2]);

[02:32] <camelia> rakudo-moar 690d4a: OUTPUT«Cannot resolve caller get-row(Array); none of these signatures match:␤    (Int :$index! --> Array)␤    (Array :@index! --> Array)␤  in block <unit> at <tmp> line 1␤␤»

[02:32] <ugexe> im assuming they are having problems doing `Array :@already-an-array`

[02:33] <ugexe> otherwise

[02:33] <ugexe> m: class Foo { multi method get-row (Int :$index! --> Array) { ["int",] }; multi method get-row (Array :$index! --> Array) { ["array",] } }; say Foo.new.get-row(index => 1); say Foo.new.get-row(index => [1..2])

[02:33] <camelia> rakudo-moar 690d4a: OUTPUT«[int]␤[array]␤»

[02:34] <raydiak> m: multi get-row (Int :$index! --> Array) { [] }; multi get-row (Array :@index! --> Array) { [] }; get-row(index => [0..2]);

[02:34] <camelia> rakudo-moar 690d4a: OUTPUT«Cannot resolve caller get-row(Array); none of these signatures match:␤    (Int :$index! --> Array)␤    (Array :@index! --> Array)␤  in block <unit> at <tmp> line 1␤␤»

[02:36] <ugexe> m: my Array @index; say @index.perl; # [0..2] does not pass this constraint

[02:36] <camelia> rakudo-moar 690d4a: OUTPUT«Array[Array].new()␤»

[02:36] <raydiak> ah ha

[02:36] <tushar> geekosaur: Sure, I am implementing a method in which user can supply a single value or an array with values. I hope this clarify things.

[02:37] <raydiak> m: multi get-row (Int :$index! --> Array) { [] }; multi get-row (Array :$index! --> Array) { [] }; get-row(index => [0..2]);

[02:37] <camelia> rakudo-moar 690d4a: ( no output )

[02:37] <geekosaur> mm, I meant actual code and the code context for the error message

[02:37] <geekosaur> since the error you got is ... somewhat odd

[02:38] <geekosaur> I could see it being internal but I don't recognize AUTOGEN(DataTable: Array)

[02:38] <tushar> ugexe: you are damm right about it. I always forget that when you use sigil "@", it says I am an array and you don't need to set "Array" type. When you specify "Array" type with "@" it expects to have array of array of array.

[02:39] <geekosaur> AUTOGEN's a thing but DataTable isn't

[02:39] <tushar> geekosaur: I will provide paste bin for that in a minute.

[02:39] <tushar> DataTable is my module name.

[02:40] <raydiak> also, the way the error seems to suggest that an array was passed positionally is LTA

[02:40] <geekosaur> ah. this sounds like an internals leak reported LTA

[02:40] <geekosaur> yeh

[02:41] <geekosaur> (I suspect AUTOGEN should never show up in an error message from a user error)

[02:44] <BenGoldberg> m: multi m(Int $:i) { say 1 }; multi m(Array $:i) { say 2 }; m( i:(1) }

[02:44] <camelia> rakudo-moar 690d4a: OUTPUT«5===SORRY!5===␤In signature parameter, placeholder variables like $:i are illegal␤you probably meant a named parameter: ':$i'␤at <tmp>:1␤------> 3multi m(Int $:i7⏏5) { say 1 }; multi m(Array $:i) { say 2 ␤In signature parameter, placeho…»

[02:44] <BenGoldberg> m: multi m(Int :$i) { say 1 }; multi m(Array :$i) { say 2 }; m( i:(1) }

[02:44] <camelia> rakudo-moar 690d4a: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤You can't adverb i␤at <tmp>:1␤------> 3; multi m(Array :$i) { say 2 }; m( i:(1)7⏏5 }␤»

[02:45] <BenGoldberg> m: multi m(Int :$ix) { say 1 }; multi m(Array :$ix) { say 2 }; m( ix:(1) }

[02:45] <camelia> rakudo-moar 690d4a: OUTPUT«===SORRY!===␤This type (QAST::WVal) does not support positional operations␤»

[02:45] <tushar> geekosaur: here is the pastebin : http://pastebin.com/KBhfcz45

[02:45] <BenGoldberg> Well, that's definitely a LTA error message :)

[02:46] <tushar> what is LTA?

[02:46] <BenGoldberg> Less than Awesome

[02:47] <BenGoldberg> Perl6 is supposed to have super awesome error messages, and never something nonsensical.

[02:47] <geekosaur> basically means a crap error message, or one that leaks internals

[02:47] <tushar> seriously?.. haha..

[02:47] <tushar> that's why I love perl 6..

[02:47] <geekosaur> ideally the error messages are clear and helpful

[02:47] <geekosaur> sometimes this isn't possible just because it's impossible to tell what was intended, though >.>

[02:48] <BenGoldberg> Anything mentioning QAST is LTA, since that's internal to rakudo.

[02:48] <geekosaur> strong AI is not (yet?) a feature of perl6

[02:48] <geekosaur> yep. as is AUTOGEN, which is what makes the error you got kinda terrible

[02:48] <tushar> I am looking forward to strong AI..

[02:49] <BenGoldberg> "And you can't adverb i" only makes sence if you happen to know that perl6 has support for complex, and 'i' is reserved for making imaginary numbers.

[02:49] <BenGoldberg> s/sence/sense/

[02:51] * BenGoldberg 's fingers are stilly tpying nsense tday.  

[02:51] *** mr-foobar joined
[02:54] <geekosaur> aaand pastebin is giving me "Please refresh the page to continue" again. ad-ridden POS.

[02:57] <tushar> geekosaur: that's wierd. Because when I clicked on it, it works fine..

[02:59] <geekosaur> I think it just gets grouchy when people load the raw URL to avoid the ads

[03:00] <geekosaur> sometimes it works, sometimes you get that and it refuses to ever load (refreshing doesn't get the paste, neither does shift-refresh)

[03:00] <tushar> try this Github Gist -- https://gist.github.com/tushardave26/5e9d78a33e6fc5bacf516b08de5b497d . Hope this works.

[03:08] *** skids joined
[03:12] <AlexDaniel> acmmittolbe6: HEAD say 42  # :D

[03:12] <committable6> AlexDaniel, ¦«HEAD»: 42

[03:14] <AlexDaniel> levenstein kinda makes sense. Sift4 is fast but wtf? How?? :D

[03:22] <TEttinger> AlexDaniel: woah

[03:23] <TEttinger> table6commit: HEAD say "wow"

[03:23] <TEttinger> tablecommit6: HEAD say "wow"

[03:24] <AlexDaniel> TEttinger: you can use this to test it: https://siderite.blogspot.com/2014/11/super-fast-and-accurate-string-distance.html

[03:24] <AlexDaniel> TEttinger: it currently triggers on anything that is ≤3

[03:25] <AlexDaniel> bisectable and benchable are set to trigger on distance ≤2 because guess what, the distance between bisectable6 and benchable6 is 3. :D

[03:27] <AlexDaniel> bectable6: exit 0 # /o\

[03:27] <benchable6> AlexDaniel, starting to benchmark the 1 given commits

[03:27] <benchable6> AlexDaniel, ¦«exit»:Cannot find this revision

[03:27] <bisectable6> AlexDaniel, On both starting points (old=2015.12 new=376b5f4) the exit code is 0 and the output is identical as well

[03:27] <bisectable6> AlexDaniel, Output on both points: 

[03:28] <TEttinger> heh

[03:28] <geekosaur> heh

[03:37] *** TEttinger left
[03:40] *** tushar left
[04:02] *** Guest68793 is now known as nemo

[04:06] *** Cabanossi left
[04:10] *** Cabanossi joined
[04:12] *** labster left
[04:15] *** TEttinger joined
[04:17] *** cpage joined
[04:25] *** labster joined
[04:38] <raydiak> m: Nil.?Str

[04:38] <camelia> rakudo-moar 9dcde7: OUTPUT«Use of Nil in string context␤  in block <unit> at <tmp> line 1␤»

[04:38] <raydiak> should that warning be silenced?

[04:42] *** labster left
[04:42] <geekosaur> didn't it do what you asked it to?

[04:42] <geekosaur> m: dd Nil.?Str

[04:42] <camelia> rakudo-moar 9dcde7: OUTPUT«Use of Nil in string context␤  in block <unit> at <tmp> line 1␤""␤»

[04:42] <geekosaur> hm, guess not

[04:42] <geekosaur> thought it was producing Nil from the .?

[04:43] <geekosaur> so yes that seems LTA

[04:43] <geekosaur> m: dd Nil

[04:43] <camelia> rakudo-moar 9dcde7: OUTPUT«Nil␤»

[04:43] <geekosaur> ...right, that'd be wrong then.

[04:44] <geekosaur> m: dd Nil.Str

[04:44] <camelia> rakudo-moar 9dcde7: OUTPUT«Use of Nil in string context␤  in block <unit> at <tmp> line 1␤""␤»

[04:45] <geekosaur> ah. so Nil actually has a Str method which throws that

[04:45] <geekosaur> making .? kinda useless in that context

[04:46] <raydiak> yeah dunno how we'll fix that :) but I'll at least file a bug report some time tonight

[04:47] <TimToady> yeah, .? is about finding the method, not about checking the result

[04:47] <geekosaur> right, the assumption was that there was no such method so $var-that-might-be-Nil.?Str could do something saneish

[04:47] <geekosaur> (I think)

[04:48] <TimToady> well, a $var generally can't be Nil unless you bind it

[04:48] <raydiak> named capture inside an optional branch of the regex

[04:49] <TimToady> well, that's bound :)

[04:49] <raydiak> I have "$<title> ?? $<title>.Str !! Nil" scattered around in my actions. it doesn't feel very nice. how would you write it?

[04:50] <geekosaur> m: say Nil // ''

[04:50] <camelia> rakudo-moar 9dcde7: OUTPUT«␤»

[04:50] <geekosaur> m: say (Nil // '').Str

[04:50] <camelia> rakudo-moar 9dcde7: OUTPUT«␤»

[04:51] <TimToady> with $<title> { .Str }

[04:51] <TimToady> m: my $x := Nil; say ($x andthen '')

[04:51] <camelia> rakudo-moar 9dcde7: OUTPUT«()␤»

[04:52] <TimToady> m: my $x := Nil; say ($x andthen $x)

[04:52] <camelia> rakudo-moar 9dcde7: OUTPUT«()␤»

[04:52] <TimToady> m: my $x := 42; say ($x andthen $x)

[04:52] <camelia> rakudo-moar 9dcde7: OUTPUT«42␤»

[04:52] <TimToady> m: my $x := 42; say ($x with $x)

[04:52] <camelia> rakudo-moar 9dcde7: OUTPUT«42␤»

[04:52] <TimToady> m: my $x := Nil; say ($x with $x)

[04:52] <camelia> rakudo-moar 9dcde7: OUTPUT«()␤»

[04:53] <raydiak> I suppose it doesn't matter if the undefined thing it returns is Nil or (). Thank you for the help that is quite a bit nicer

[05:03] *** khw left
[05:07] *** pierre_ joined
[05:33] *** djbkd joined
[05:34] *** Sgeo joined
[05:38] *** AlexDaniel left
[05:39] *** Guest94548 joined
[05:41] *** BenGoldberg left
[06:02] *** pierre_ left
[06:03] *** rgrinberg left
[06:19] *** wamba joined
[06:26] *** cyphase joined
[06:28] *** andrzejku joined
[06:36] *** k-man__ is now known as k-man

[06:39] *** firstdayonthejob joined
[06:42] *** labster joined
[06:43] *** skids left
[06:44] *** domidumont joined
[06:49] *** domidumont1 joined
[06:49] *** domidumont left
[06:53] *** CIAvash joined
[06:55] *** domidumont1 left
[07:04] *** djbkd left
[07:04] *** darutoko joined
[07:06] *** sufrostico left
[07:10] *** Guest77506 left
[07:10] *** Guest77506 joined
[07:10] *** Guest77506 left
[07:10] *** Guest77506 joined
[07:10] *** Guest77506 is now known as scott

[07:17] *** cyphase left
[07:22] *** cyphase joined
[07:27] *** setty1 joined
[07:29] *** domidumont joined
[07:44] *** andrzejku left
[07:45] *** rindolf joined
[07:45] *** djbkd joined
[07:51] *** andrzejku joined
[07:58] *** djbkd left
[07:58] *** cpage_ joined
[08:01] *** cyphase left
[08:06] *** cyphase joined
[08:11] *** andrzejku left
[08:13] *** pierre_ joined
[08:22] *** cyphase left
[08:24] *** FROGGS joined
[08:24] <FROGGS> o/

[08:27] *** cyphase joined
[08:28] <timotimo> o/

[08:28] <psch> o/

[08:45] *** nadim joined
[08:49] *** cyphase left
[08:53] *** cyphase joined
[08:54] *** ab6tract joined
[08:56] <ab6tract> s: Duration, "new"

[08:56] <SourceBaby> ab6tract, Sauce is at https://github.com/rakudo/rakudo/blob/9dcde75/src/core/Duration.pm#L5

[08:57] *** rindolf left
[08:59] * ab6tract was expecting Duration to support the named arguments like :8hours . obviously we might not want to support months or even weeks, but surely minutes and hours would be useful here?

[09:00] <psch> sounds reasonable to me

[09:03] *** rindolf joined
[09:16] *** cyphase left
[09:21] *** cyphase joined
[09:25] *** Guest94548 left
[09:25] *** nebuchadnezzar joined
[09:28] *** domidumont left
[09:28] *** Guest94548 joined
[09:30] *** rudi_s left
[09:30] *** canopus left
[09:35] * FROGGS enjoys perl6.fail

[09:36] *** canopus joined
[09:44] *** espadrine joined
[09:45] *** RabidGravy joined
[09:50] *** labster left
[09:55] *** cyphase left
[09:59] *** pierre_ left
[09:59] *** pierre_ joined
[10:00] *** cyphase joined
[10:04] *** st_iron joined
[10:04] <st_iron> good morning my friends

[10:15] *** cyphase left
[10:19] *** cyphase joined
[10:28] <tailgate> morns

[10:28] *** cyphase left
[10:28] *** nadim left
[10:32] *** cyphase joined
[10:42] *** cyphase left
[10:46] *** cyphase joined
[10:48] *** pmurias joined
[10:58] *** cyphase left
[10:59] *** st_iron left
[11:03] *** cyphase joined
[11:03] *** TEttinger left
[11:05] *** st_iron joined
[11:07] *** Actualeyes joined
[11:10] *** cyphase left
[11:11] *** Actualeyes left
[11:12] *** iH2O joined
[11:15] *** cyphase joined
[11:23] *** cyphase left
[11:28] *** cyphase joined
[11:36] *** cyphase left
[11:36] *** Actualeyes joined
[11:40] *** cyphase joined
[11:40] <RabidGravy> I don't suppose anyone has a clone of HTTP::Server::Tiny handy?  I'm struggling to work out the reason for the deadlock in t/12-supply.t

[11:45] <RabidGravy> the actual thing it's testing (i.e. returning a Supply as the body of the response,) works if the client and server are in separate processes

[11:45] <RabidGravy> just not in the test

[11:46] <RabidGravy> and it definitely did work fine at some point

[11:48] *** iH2O left
[11:52] *** cyphase left
[11:53] <samcv> what am i doing wrong with this regex? $line ~~ s/^%//

[11:54] <psch> samcv: what's it supposed to mean?  what's the failure mode?

[11:54] <samcv> it's supposed to remove a % at the start of a line

[11:54] <psch> m: /^%/

[11:54] <camelia> rakudo-moar 448f82: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing quantifier on the left argument of %␤at <tmp>:1␤------> 3/^%7⏏5/␤»

[11:55] <samcv> yep

[11:55] <samcv> i'm not sure what i did wrong

[11:55] <psch> samcv: https://docs.perl6.org/language/regexes#Modified_quantifier:_%

[11:55] <psch> m: say "1, 2" ~~ / \d+ % ', '/

[11:55] <camelia> rakudo-moar 448f82: OUTPUT«｢1, 2｣␤»

[11:55] <samcv> ok so i need to escape it?

[11:56] <psch> samcv: yes, you need to escape everything that's not alnum

[11:56] <psch> samcv: or quote it

[11:56] <samcv> so $line ~~ s/^'%'// would work?

[11:57] <psch> m: say "%foo" ~~ s/^'%'//;

[11:57] <camelia> rakudo-moar 448f82: OUTPUT«Cannot modify an immutable Str␤  in block <unit> at <tmp> line 1␤␤»

[11:57] <psch> m: say ($= "%foo") ~~ s/^'%'//;

[11:57] <camelia> rakudo-moar 448f82: OUTPUT«｢%｣␤»

[11:57] <psch> m: say (my $a = "%foo") ~~ s/^'%'//; say $a

[11:57] <camelia> rakudo-moar 448f82: OUTPUT«｢%｣␤foo␤»

[11:57] *** cyphase joined
[11:58] <psch> samcv: yes, or as you said /^\%/ should work to

[11:58] <psch> +o

[11:58] <samcv> kk

[11:58] <samcv>  m: say (my $a = "%foo") ~~ s/^\%//; say $a

[11:58] <camelia> rakudo-moar 448f82: OUTPUT«｢%｣␤foo␤»

[11:58] <samcv>  m: say "%foo" ~~ s/^\%//;

[11:58] <camelia> rakudo-moar 448f82: OUTPUT«Cannot modify an immutable Str␤  in block <unit> at <tmp> line 1␤␤»

[11:59] <samcv>  m: my $a = "%foo"; $a ~~ s/^\%//; say $a

[11:59] <camelia> rakudo-moar 448f82: OUTPUT«foo␤»

[11:59] <samcv> ok

[12:03] *** cyphase left
[12:07] *** pierre_ left
[12:08] *** cyphase joined
[12:16] *** pierre_ joined
[12:18] *** pierre__ joined
[12:19] *** dayangkun joined
[12:20] *** pierre_ left
[12:29] *** dayangkun left
[12:29] *** cyphase left
[12:34] *** cyphase joined
[12:39] *** bjz left
[12:41] *** adu joined
[12:42] *** Alikzus left
[12:42] *** bjz joined
[12:44] *** adu left
[12:45] *** cyphase left
[12:47] *** Alikzus joined
[12:48] *** st_iron left
[12:50] *** cyphase joined
[12:51] *** jnap_ left
[12:51] *** isacloud left
[12:51] *** kipd left
[12:51] *** NeuralAnomaly left
[12:51] *** BuildTheRobots left
[12:51] *** peteretep left
[12:52] *** buggable left
[12:52] *** huggable left
[12:53] *** kipd joined
[12:53] *** peteretep joined
[12:53] *** jnap_ joined
[12:53] *** isacloud joined
[12:54] *** BuildTheRobots joined
[12:55] *** tadzik left
[13:03] *** cyphase left
[13:07] *** pierre__ left
[13:08] *** cyphase joined
[13:10] *** ka left
[13:14] *** rindolf left
[13:17] *** Guest94548 left
[13:19] *** ka joined
[13:23] *** cyphase left
[13:24] *** rindolf joined
[13:25] *** dayangkun joined
[13:28] *** cyphase joined
[13:44] *** dayangkun left
[13:49] *** cyphase left
[13:54] *** cyphase joined
[13:56] *** ribasushi left
[13:59] *** espadrine left
[13:59] *** andrzejku joined
[13:59] *** tadzik joined
[13:59] *** grondilu joined
[14:02] *** AlexDaniel joined
[14:07] <samcv> what is the perl6 equivilent of this? 		open my $SAID_OUT, '-|', "perl", @said_args;

[14:08] *** ribasushi joined
[14:08] <samcv> basicaly opening a pipe to perl supplied with the arguments in the array @said_args

[14:08] <timotimo> something with run and :in, i'd say. potentially have to flatten the @said_args array by spelling it |@said_args

[14:09] <samcv> will that make it run concurrently with the current script or will it wait for it to finish?

[14:09] <geekosaur> concurrently, with :in

[14:09] <geekosaur> since otherwise that would be useless

[14:10] <masak> not entirely, if I understand correctly

[14:10] <masak> I mean, if you know up-front exactly what inputs you're going to give, irrespective of any outputs that come back...

[14:10] *** cyphase left
[14:11] <samcv> i'm trying to look up info on :in but not having any luck

[14:11] <timotimo> https://docs.perl6.org/type/Proc - this has more info

[14:11] <timotimo> probably really needs a link from the page on routine/run to type/Proc

[14:12] <timotimo> because that has some more examples with :in and :out

[14:12] <timotimo> actually

[14:12] <timotimo> not really an example with :in per se. just one with :in using a pipe from another run's :out

[14:13] <samcv> does :in supply command line args though?

[14:13] <timotimo> :in is only for specifying that you want an input pipe, it has nothing to do with the commandline args

[14:14] <RabidGravy> no, run takes a list of command line arguments

[14:14] <samcv> oh i don't want that

[14:14] <RabidGravy> what do you want then?

[14:14] <timotimo> i thought you wanted to open a pipe?

[14:14] <samcv> run 'perl', @said_args, :out;

[14:14] <samcv> would that work?

[14:14] <timotimo> oh, you only want the *out* pipe

[14:14] <samcv> yeah

[14:14] <RabidGravy> m: say run("perl", "-v", :out).out.slurp-rest;

[14:14] <camelia> rakudo-moar bb52f8: OUTPUT«run is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub run at src/RESTRICTED.setting line 14␤  in block <unit> at <tmp> line 1␤␤»

[14:14] <RabidGravy> boo

[14:14] <timotimo> you need to flatten the @said_args, i believe

[14:14] <samcv> hmm

[14:15] <samcv> i can do that

[14:15] *** cyphase joined
[14:15] <samcv> as long as i can supply command line args with spaces in them

[14:15] <samcv> some of the ARGV's have spaces in them and i need to make sure it's not seperated by space

[14:16] <geekosaur> run does that. (shell would be the one that flattens into a string)

[14:16] <RabidGravy> yes, it's a single slurpy, so you'd have "run('perl', | @args, :in)"

[14:16] <timotimo> oh, do we allow a space there?

[14:16] <RabidGravy> dunno, just my typing :)

[14:18] <samcv> 		my $SAID_OUT = run ('perl', | @said_args, :out); Unexpected named argument 'out' passed in sub-signature of parameter @args 

[14:18] <samcv> :(

[14:19] <timotimo> you put a space after run before the (

[14:19] <timotimo> so you're passing a list as a single argument

[14:19] <samcv> ah ok

[14:19] <gfldex> lolibloggedagain: https://gfldex.wordpress.com/2016/09/25/these-keys-are-lta/

[14:19] <timotimo> and you get a Proc object out of the run command, not just the out pipe

[14:19] <timotimo> the out pipe itself can be accessed by $result.out

[14:19] <timotimo> gfldex: your keys are on fi-yah!

[14:20] <samcv> and before i was doing: while ( defined (my $line = <$SAID_OUT> ) ) {

[14:20] <samcv> to process each line as the script spits it out, how would i process by line without waiting for script completion in perl6?

[14:21] <timotimo> "for $proc.out.lines { ... }"

[14:21] <samcv> where $proc would be $SAID_OUT ?

[14:21] <timotimo> yeah

[14:21] <samcv> cool :)

[14:22] *** ka left
[14:22] <samcv> for my $line = $SAIDOUT.out.lines { will work?

[14:22] *** cyphase left
[14:22] <timotimo> that doesn't mean what you think it means

[14:22] <timotimo> but i think it'll "work"

[14:23] <RabidGravy> m: my $p = run("perl",:in, :out); $p.in.say("print 1 + 1"); $p.in.close; say $p.out.slurp-rest

[14:23] <camelia> rakudo-moar bb52f8: OUTPUT«run is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub run at src/RESTRICTED.setting line 14␤  in block <unit> at <tmp> line 1␤␤»

[14:23] <timotimo> except it'll only run a single iteration

[14:23] *** gnull joined
[14:23] <RabidGravy> gah, forgot about that

[14:23] <timotimo> you ran into that 10 minutes ago! :D

[14:24] <RabidGravy> I know, having a funny memory afternoon

[14:26] <timotimo> samcv: "for my $line = $SAIDOUT.out.lines {...}" will create a scalar variable named $line, put the result of $SAIDOUT.out.lines into it and then iterate over that scalar variable. but a scalar will only run a single iteration, so you'll have one run of the body with $_ set to $line, which is the Seq that'll give you the lines when you iterate over its .list

[14:27] <psch> plus it leaves $line in the same scope as the for itself, which i think we have in p5-to-6 pitfalls or something..?

[14:27] <psch> 'cause that might not be what you mean

[14:27] *** cyphase joined
[14:27] <timotimo> it's 100% not what samcv means :)

[14:28] <samcv> so is there a way other than my $line = $_ on the first line of the loop?

[14:28] <gfldex> m: for my @a = lines() { $++ }; @a.elems.say

[14:28] <camelia> rakudo-moar bb52f8: OUTPUT«20␤»

[14:28] <gfldex> m: for my @a = lines() { .say }; @a.elems.say

[14:28] <camelia> rakudo-moar bb52f8: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤I mo dhiaidh bhí gleanntáin ghlas’ G…»

[14:29] <samcv> so for $SAID_OUT.out.lines = my $line { ?

[14:30] <RabidGravy> not really

[14:30] <psch> samcv: well, for takes a Block, and anon Blocks get their signature after the pointy

[14:31] <psch> m: say -> $a { }

[14:31] <camelia> rakudo-moar bb52f8: OUTPUT«-> $a { #`(Block|59191480) ... }␤»

[14:31] <RabidGravy> for $SAID_OUT.out lines -> $line { }

[14:31] <gfldex> samcv: assignment to a @-sigiled container gets you one .flat-call for free.As a result it iterates properly

[14:31] <RabidGravy> except I missed a dot

[14:32] <RabidGravy> no I didn't

[14:32] <RabidGravy> for $SAID_OUT.out.lines -> $line { }

[14:32] *** khw joined
[14:33] <samcv> nice, okay that makes sense

[14:34] *** Guest94548 joined
[14:38] <RabidGravy> anyhow, to repeat my earlier question, does anyone have a local clone of HTTP::Server::Tiny and want to offer any suggestions as to why the deadlock in t/12-supply.t?

[14:38] <timotimo> RabidGravy: ??? "not really"?

[14:38] <RabidGravy> eh?

[14:38] <timotimo> i'm confused

[14:38] <psch> probably lag-based line ordering mixup?

[14:39] <psch> 'cause it's perfectly sensible here

[14:39] <psch> timotimo: http://irclog.perlgeek.de/perl6/2016-09-25#i_13278499

[14:39] <RabidGravy> psch, are you on linux or something else?

[14:39] <timotimo> i'm interpreting it as "is there a way ... ?" "not really" "here's how you do it"

[14:39] <psch> RabidGravy: i'm on windows with putty to irc.p6c.org

[14:40] <psch> RabidGravy: so, technically, "yes"

[14:40] <RabidGravy> oh no, it was to "so <not worky thing>" :)

[14:40] <RabidGravy> Hmm

[14:40] <RabidGravy> that's very, very odd

[14:40] <timotimo> oh

[14:41] <psch> RabidGravy: my 3 lines about lag-based line ordering mixup were about timotimos confusion though :)

[14:41] <psch> RabidGravy: i have no idea about HTTP::Server::Tiny

[14:41] <RabidGravy> oh

[14:43] *** cyphase left
[14:48] *** cyphase joined
[14:51] *** breinbaas joined
[14:59] *** cyphase left
[15:03] *** cyphase joined
[15:12] *** domidumont joined
[15:15] *** cyphase left
[15:16] *** espadrine joined
[15:20] *** cyphase joined
[15:35] *** cyphase left
[15:40] *** cyphase joined
[15:44] *** andrzejku left
[15:45] *** Guest94548 is now known as kaare_

[15:53] *** rgrinberg joined
[15:54] *** cyphase left
[15:56] *** rgrinberg left
[15:57] *** rgrinberg joined
[15:59] *** cyphase joined
[16:08] *** cyphase left
[16:13] *** cyphase joined
[16:15] *** cbk_ joined
[16:18] *** skids joined
[16:22] *** andrzejku joined
[16:22] <dalek> doc: 03a21f8 | (Jan-Olof Hendig)++ | doc/Type/Parameter.pod6:

[16:22] <dalek> doc: Added a few missing method definitions

[16:22] <dalek> doc: review: https://github.com/perl6/doc/commit/03a21f8fb5

[16:25] <gfldex> is there a way for a trait_mod:<is>(Parameter:D \param, :$element-of) to add a where-clause to the parameter?

[16:31] <psch> m: multi trait_mod:<is>(Parameter:D \param where *.sigil eq '$', :$element-of) { } # ?

[16:31] <camelia> rakudo-moar bb52f8: ( no output )

[16:36] *** cibs joined
[16:39] *** andrzejku left
[16:45] *** xinming left
[16:46] *** cbk_ left
[16:48] <gfldex> psch: i want to add a where-constraint by the trait_mod not on it

[16:49] <psch> m: multi trait_mod:<is>(Parameter:D \param, :$element-of) { die if param.sigil ne '$'; ... } # ?

[16:49] <camelia> rakudo-moar bb52f8: ( no output )

[16:49] <psch> gfldex: i think you cannot do things about the *value* of the Parameter though

[16:49] <gfldex> psch: that would be run at compile time, where clauses are runtime things

[16:50] <psch> gfldex: so, if i now finally understand your question correctly, you can't

[16:50] <psch> m: say &trait_mod:<where>

[16:50] <camelia> rakudo-moar bb52f8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    trait_mod:<where> used at line 1. Did you mean 'trait_mod:<hides>', 'trait_mod:<is>', 'trait_mod:<handles>', 'trait_mod:<trusts>', 'trait_mod:<returns>'?␤␤»

[16:53] <psch> gfldex: i mean, maybe you can somehow hack something together with Parameter.constraints and cargo-culting what we do internally for post constraints, but i'm pretty sure there's no clean and easy interface for that kinda thing

[16:57] *** ufobat joined
[17:01] *** lichtkind_ joined
[17:02] *** dj_goku joined
[17:02] *** noganex_ joined
[17:04] *** sjohnsen- joined
[17:04] *** [particle]1 joined
[17:04] *** [particle] left
[17:05] *** lichtkind left
[17:06] *** noganex left
[17:06] *** dj_goku_ left
[17:07] *** setty1 left
[17:12] *** andrzejku joined
[17:18] *** andrzejku left
[17:52] *** Actualeyes left
[17:57] *** tushar joined
[17:57] *** nadim joined
[18:11] *** sufrostico joined
[18:12] *** El_Che_ is now known as El_Che

[18:15] *** gnull left
[18:19] *** andrzejku joined
[18:20] *** cbk_ joined
[18:20] *** maybekoo2 joined
[18:22] <dalek> doc: 9e92433 | (Jan-Olof Hendig)++ | doc/Type/Parameter.pod6:

[18:22] <dalek> doc: Added a few more method definitions and an example

[18:22] <dalek> doc: review: https://github.com/perl6/doc/commit/9e9243391c

[18:24] *** labster joined
[18:25] *** sufrostico left
[18:27] <tushar> Is there any way to extract an element of each array from array of array? Ex: "my @a = [[1,2,3],[4,5,6]]". How can I extract second element from both the arrays i.e. [2,5]? Thanks.

[18:28] <FROGGS> m: my @a = [[1,2,3],[4,5,6]]; say @a.map({ $_[1] })

[18:28] <camelia> rakudo-moar bb52f8: OUTPUT«(2 5)␤»

[18:28] <FROGGS> tushar: ^^

[18:29] *** girafe joined
[18:29] <FROGGS> m: my @a = [[1,2,3],[4,5,6]]; my @b = @a.map({ $_[1] }); dd @b

[18:29] <camelia> rakudo-moar bb52f8: OUTPUT«Array @b = [2, 5]␤»

[18:29] <FROGGS> m: my @a = [[1,2,3],[4,5,6]]; my @b = @a.map(*.[1]); dd @b

[18:29] <camelia> rakudo-moar bb52f8: OUTPUT«Array @b = [2, 5]␤»

[18:30] <tushar> FROGGS: Thanks. 

[18:31] <tushar> FROGGS: When you said ^^, you meant ^^ operator. Correct?

[18:31] <FROGGS> no, I meant "look"

[18:31] <FROGGS> :o)

[18:32] <FROGGS> or even "look to what I wrote"

[18:32] <tushar> haha.. got it..

[18:32] *** rindolf left
[18:32] <gfldex> m: my @a = [[1,2,3],[4,5,6]]; say @a[0,1][1]

[18:32] <camelia> rakudo-moar bb52f8: OUTPUT«[4 5 6]␤»

[18:33] <gfldex> m: my @a = [[1,2,3],[4,5,6]]; say @a[0;1,1;1][1]

[18:33] <camelia> rakudo-moar bb52f8: OUTPUT«Index out of range. Is: 1, should be in 0..0␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:33] <gfldex> m: my @a = [[1,2,3],[4,5,6]]; say @a[0,1;1,1]

[18:33] <camelia> rakudo-moar bb52f8: OUTPUT«(2 2 5 5)␤»

[18:33] <gfldex> m: my @a = [[1,2,3],[4,5,6]]; ssy @a[0,1;1,1]

[18:33] <camelia> rakudo-moar bb52f8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    ssy used at line 1. Did you mean 'say'?␤␤»

[18:33] <gfldex> m: my @a = [[1,2,3],[4,5,6]]; dd @a[0,1;1,1]

[18:33] <camelia> rakudo-moar bb52f8: OUTPUT«(2, 2, 5, 5)␤»

[18:33] <FROGGS> m: my @a = [[1,2,3],[4,5,6]]; say @a[0,1;1]

[18:33] <camelia> rakudo-moar bb52f8: OUTPUT«(2 5)␤»

[18:34] <FROGGS> m: my @a = [[1,2,3],[4,5,6]]; say @a[*;1]

[18:34] <camelia> rakudo-moar bb52f8: OUTPUT«(2 5)␤»

[18:34] <FROGGS> though, .map is easier to explain and understand I'd say

[18:35] *** rindolf joined
[18:37] <gfldex> tushar: see https://docs.perl6.org/language/subscripts#Multiple_dimensions

[18:37] <tushar> FROGGS and gfldex: Thanks.

[18:39] *** dataangel joined
[18:40] <dalek> ecosystem: 22488ae | (Fernando Correa de Oliveira)++ | META.list:

[18:40] <dalek> ecosystem: Add ProblemSolver

[18:40] <dalek> ecosystem: 

[18:40] <dalek> ecosystem: https://github.com/FCO/ProblemSolver

[18:40] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/22488aec1f

[18:40] <dalek> ecosystem: 90d5d51 | RabidGravy++ | META.list:

[18:40] <dalek> ecosystem: Merge pull request #253 from FCO/master

[18:40] <dalek> ecosystem: 

[18:40] <dalek> ecosystem: Add ProblemSolver

[18:40] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/90d5d518a0

[18:42] <SmokeMachine____> :)

[18:53] *** rodarmor joined
[18:54] <tushar> FROGGS: What would you recommend if I would like to extract multiple elements as an array and make array of array out of them. Ex: " my @a = [[1,2,3],[4,5,6]]; say @a[*;0..1];". When I tried it, I got back flatten list. I can use map and push results into new array. I am just wondering is there any other way I can accomplish that? I hope that I am clear enough.

[18:54] <tushar> m: my @a = [[1,2,3],[4,5,6]]; say @a[*;0..1];

[18:54] <camelia> rakudo-moar bb52f8: OUTPUT«(1 2 4 5)␤»

[18:55] <tushar> what I would like to get "[[1,4],[2,5]]".

[18:57] <FROGGS> m: my @a = [[1,2,3],[4,5,6]]; dd @a[*;0..1];

[18:57] <camelia> rakudo-moar bb52f8: OUTPUT«(1, 2, 4, 5)␤»

[18:57] <FROGGS> hmmm

[18:59] <psch> slices always flatten, don't they?

[18:59] *** FROGGS left
[19:00] *** FROGGS joined
[19:00] <psch> so you'd have to map that

[19:00] <mst> m: my @a = [[1,2,3],[4,5,6]]; @a.map: *[0..1]

[19:00] <camelia> rakudo-moar bb52f8: ( no output )

[19:00] <FROGGS> seems like...

[19:00] <mst> m: my @a = [[1,2,3],[4,5,6]]; dd @a.map: *[0..1]

[19:00] <camelia> rakudo-moar bb52f8: OUTPUT«((1, 2), (4, 5)).Seq␤»

[19:01] <mst> that's not completely horrible

[19:02] <gfldex> m: sub g($x where -> \x { fail X::AdHoc.new(payload=>'bad ' ~ x.VAR.name) }) {}; g(1)

[19:02] <camelia> rakudo-moar bb52f8: OUTPUT«bad $topic␤  in any  at /home/camelia/rakudo-m-inst-2/share/perl6/runtime/CORE.setting.moarvm line 1␤  in sub g at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[19:02] <psch> m: my @a = [[1,2,3],[4,5,6]]; dd [do [@a[$++;0,1]] for @a]

[19:02] <camelia> rakudo-moar bb52f8: OUTPUT«[[1, 2], [4, 5]]␤»

[19:02] <psch> that's at least a bit more horrible :P

[19:02] <FROGGS> hehe

[19:03] <tushar> haha..

[19:03] <psch> looks a bit like python, actually

[19:03] *** nowan left
[19:03] <tushar> hahahaha

[19:04] <ugexe> m: my @a = [[1,2,3],[4,5,6]]; dd [Z] @a;

[19:04] <camelia> rakudo-moar bb52f8: OUTPUT«((1, 4), (2, 5), (3, 6)).Seq␤»

[19:05] *** nowan joined
[19:07] <ugexe> m: my @a = [[1,2,3],[4,5,6]]; dd ([Z] @a)[0..1];

[19:07] <camelia> rakudo-moar bb52f8: OUTPUT«((1, 4), (2, 5))␤»

[19:14] <tushar> ugexe++ . How can I convert the resulted list of list to array of array i.e. [[1,4],[2,5]] . I have tried "my @a = [[1,2,3],[4,5,6]]; my @b = ([Z] @a)[0..1];" which gave me an array consisting of list.

[19:14] <tushar> m: my @a = [[1,2,3],[4,5,6]]; my @b = ([Z] @a)[0..1];

[19:14] <camelia> rakudo-moar bb52f8: ( no output )

[19:14] <tushar> m: my @a = [[1,2,3],[4,5,6]]; my @b = ([Z] @a)[0..1]; @b.say;

[19:14] <camelia> rakudo-moar bb52f8: OUTPUT«[(1 4) (2 5)]␤»

[19:15] <timotimo> m: my @a = [[1, 2, 3], [4, 5, 6]]; say @a[0].WHAT

[19:15] <camelia> rakudo-moar bb52f8: OUTPUT«(Array)␤»

[19:15] <timotimo> it's already an array of arrays

[19:15] *** darutoko left
[19:15] <psch> ooh misread the question the whole time, ugexe++

[19:16] <psch> i mean, i did :)

[19:19] <tushar> timotimo: I know that @a is array of array. I am how can i convert result of "([Z] @a)[0..1];" to array of array. It returns list of list.

[19:20] <ugexe> m: my @a = [[1,2,3],[4,5,6]]; my @arr = ([Z] @a)[0..1]>>.Array; say @arr.perl # if thats what you *really* want

[19:20] <camelia> rakudo-moar bb52f8: OUTPUT«[[1, 4], [2, 5]]␤»

[19:20] <SmokeMachine____> m: sub f([$a, *@a], [$b, *@b]) {gather {take [$a, $b]; if @a & @b { .take for f(@a, @b)}}}; .say for f([1,2,3], [4,5,6])[^2] # :P

[19:20] <camelia> rakudo-moar bb52f8: OUTPUT«[1 4]␤[2 5]␤»

[19:20] <mst> tushar: them being lists instead of arrays shouldn't I don't think be a problem?

[19:20] <mst> psch: yeah, same here

[19:20] <mst> ugexe++

[19:22] *** perlawhirl joined
[19:22] <tushar> hmm

[19:22] <timotimo> well, with lists you don't get scalar containers guaranteed, right?

[19:22] *** cuonglm joined
[19:24] <tushar> ugexe++

[19:27] *** domidumont left
[19:35] *** cbk_ left
[19:36] *** cuonglm left
[19:44] *** poisonby_ is now known as poisonby

[19:46] *** ufobat left
[19:53] *** mst left
[19:53] *** mst joined
[20:07] *** kaare_ left
[20:12] *** andrzejku left
[20:13] *** andrzejku joined
[20:16] *** labster left
[20:18] *** TEttinger joined
[20:20] *** labster joined
[20:26] *** andrzejku left
[20:30] *** FROGGS left
[20:38] *** kurahaupo joined
[20:42] *** rgrinberg left
[20:57] *** espadrine left
[21:06] *** CIAvash left
[21:11] *** rgrinberg joined
[21:14] *** rindolf left
[21:19] *** mspo_ is now known as mspo

[21:22] <dalek> doc: 6b99fb8 | (Zoffix Znet)++ | doc/Type/Baggy.pod6:

[21:22] <dalek> doc: Improve Baggy.classify-list

[21:22] <dalek> doc: 

[21:22] <dalek> doc: - List all possible mappers

[21:22] <dalek> doc: - Document multi-level classify will throw

[21:22] <dalek> doc: review: https://github.com/perl6/doc/commit/6b99fb88f0

[21:24] *** gfldex joined
[21:29] *** tushar left
[21:29] *** girafe left
[21:31] *** canopus left
[21:32] <dalek> doc: eee5cfa | (Zoffix Znet)++ | doc/Type/Baggy.pod6:

[21:32] <dalek> doc: Improve Baggy.categorize-list

[21:32] <dalek> doc: 

[21:32] <dalek> doc: - Document all mappers

[21:32] <dalek> doc: - Doocument throwage conditions

[21:32] <dalek> doc: review: https://github.com/perl6/doc/commit/eee5cfab34

[21:36] *** rba_ joined
[21:38] *** canopus joined
[21:38] *** RabidGravy left
[21:55] <dalek> doc: b4575c9 | (Zoffix Znet)++ | doc/Type/Hash.pod6:

[21:55] <dalek> doc: Document Hash.classify-list

[21:55] <dalek> doc: 

[21:55] <dalek> doc: Closes #916

[21:55] <dalek> doc: review: https://github.com/perl6/doc/commit/b4575c9731

[21:56] *** tushar joined
[21:56] *** rba_ left
[22:09] <dalek> doc: 782e000 | (Zoffix Znet)++ | doc/Type/Hash.pod6:

[22:09] <dalek> doc: Document Hash.categorize-list

[22:09] <dalek> doc: 

[22:09] <dalek> doc: Closes #916

[22:09] <dalek> doc: review: https://github.com/perl6/doc/commit/782e000422

[22:10] <dalek> doc: b234967 | (Zoffix Znet)++ | doc/Type/Hash.pod6:

[22:10] <dalek> doc: Explain Hash.classify-list :&as argument

[22:10] <dalek> doc: review: https://github.com/perl6/doc/commit/b234967097

[22:11] *** aod joined
[22:12] <aod> can someone help me with perl6 loops?

[22:12] <aod> I saw in several places loops like this: for 1, 3..10 { .say }

[22:13] <timotimo> that'll need flattening for the second half

[22:13] <timotimo> m: .say for 1, 3..10

[22:13] <camelia> rakudo-moar 922afd: OUTPUT«1␤3..10␤»

[22:13] <timotimo> m: .say for 1, |3..10

[22:13] <camelia> rakudo-moar 922afd: OUTPUT«1␤1..10␤»

[22:13] <timotimo> whoops, hehe. precedence of operators

[22:13] <timotimo> m: .say for 1, |(3..10)

[22:13] <camelia> rakudo-moar 922afd: OUTPUT«1␤3␤4␤5␤6␤7␤8␤9␤10␤»

[22:13] <aod> what about (1,3..10)?

[22:14] *** nadim left
[22:14] <timotimo> same as just 1, 3..10

[22:14] *** nadim joined
[22:14] <timotimo> if you want all of it as a single iteration, you can do:

[22:14] <timotimo> m: .say for (1,3..10),

[22:14] <camelia> rakudo-moar 922afd: OUTPUT«(1 3..10)␤»

[22:15] <Juerd> m: sub infix:<except> (@a, $b) { @a.grep: * !~~ $b }; for [1..10] except 2 { .say }

[22:15] <camelia> rakudo-moar 922afd: OUTPUT«1␤3␤4␤5␤6␤7␤8␤9␤10␤»

[22:15] <aod> ok. but I saw an example like 0,2..10 where only even numbers were generated> I think I saw it on  a larry wall video

[22:15] <Juerd> aod: That's with 3 dots

[22:15] <timotimo> you need ... for that instead of ..

[22:16] <aod> ahhh bingo!

[22:16] <Juerd> m: say 1, 3 ... 10

[22:16] <camelia> rakudo-moar 922afd: OUTPUT«(1 3 5 7 9)␤»

[22:16] <aod> thanks a lot

[22:16] <aod> I have another question

[22:17] <aod> I saw something like for (1..10) -> $i { say $i }

[22:17] <timotimo> yeah

[22:17] <grondilu> (what a tease)

[22:18] *** tushar left
[22:19] <aod> actually this  for <123> ->$i { .print }

[22:19] <aod> but I got "control flow error"

[22:19] *** tushar joined
[22:19] <aod> nvm I just saw my mistake

[22:20] <timotimo> m: for <123> -> $i { .say }

[22:20] <camelia> rakudo-moar 922afd: OUTPUT«(Any)␤»

[22:20] <timotimo> m: for <123> -> $i { $i.say }

[22:20] <camelia> rakudo-moar 922afd: OUTPUT«123␤»

[22:20] *** maybekoo2 left
[22:20] <MasterDuke> m: for <1 2 3> -> $i { $i.say }

[22:20] <camelia> rakudo-moar 922afd: OUTPUT«1␤2␤3␤»

[22:21] *** firstdayonthejob left
[22:21] *** maybekoo2 joined
[22:21] <aod> for <1 2 3> -> $i { $i.say } works, but for <1 2 3> -> $i { .say } dowsnt

[22:21] <timotimo> yeah

[22:21] <timotimo> because .say is syntax for $_.say

[22:22] <timotimo> if you have -> $i, it won't store the data into $_

[22:22] <MasterDuke> m: for <1 2 3> { .say }

[22:22] <camelia> rakudo-moar 922afd: OUTPUT«1␤2␤3␤»

[22:23] <timotimo> right, when you don't give it a ->, it'll be as if you had used "-> $i"

[22:24] <MasterDuke> "-> $_"

[22:24] <timotimo> sorry. yes

[22:24] <timotimo> if you give it only -> { ... }, it'll be a block that takes no arguments. for will then call it with an argument and it'll promptly explode

[22:24] <timotimo> m: for <1 2 3> -> { say "oh" }

[22:24] <camelia> rakudo-moar 922afd: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[22:24] *** perlawhirl left
[22:26] *** bjz left
[22:29] *** maybekoo2 left
[22:32] *** poisonby left
[22:46] *** rgrinberg left
[22:48] <gfldex> omgibloggedagain!!1! https://gfldex.wordpress.com/2016/09/26/i-left-my-keys-in-a-side-channel/

[22:49] <gfldex> also, the docs are LTA on where-clauses

[22:50] <aod> guys how do I list available methods of an object? Like pythons dir?

[22:50] <timotimo> you can call .^methods on it

[22:50] <aod> cool thx

[22:51] <timotimo> sometimes you'll get an error if you're going too deep into the metaobjects. then you can .map(*.name) to make things readable

[22:52] <aod> ok, like  ().^methods.map(*.name)

[22:52] <aod> more readable

[22:52] <timotimo> well, i mean it like this:

[22:52] <timotimo> m: say Attribute.^methods

[22:52] <camelia> rakudo-moar 922afd: OUTPUT«(<anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> compose apply_handles get_value set_value container readonly package inlined WHY set_why Str gist)␤»

[22:52] <timotimo> hm, not quite

[22:52] <gfldex> m: say "foo".^methods».&{ .name, .signature.perl }.join: "\n"

[22:52] <camelia> rakudo-moar 922afd: OUTPUT«BUILD :(Str $: :$value = "", *%_ --> Nil)␤Int :(Str:D $: *%_)␤Num :(Str:D $: *%_)␤chomp :(Str:D $: *%_)␤pred :(Str:D $: *%_)␤succ :(Str:D $: *%_)␤simplematch :(Str $: $pat, *%_)␤match :(Str $: $pat, :continue(:$c), :pos(:$p), :global(:$g), :o…»

[22:52] <timotimo> m: say BOOTAttribute.^methods

[22:52] <camelia> rakudo-moar 922afd: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    BOOTAttribute used at line 1␤␤»

[22:53] <timotimo> *shrug*

[22:54] <gfldex> aod: see the following how to detect the odd cases (some are very internal and don't provide introspection) https://github.com/perl6/doc/blob/master/util/missing-methods.p6

[22:54] <aod> Do you know the rationale behind the choice of ~ as concatenation intead of + in perl6? Im just curious

[22:55] <gfldex> aod: sorry wrong link, https://github.com/perl6/doc/blob/master/util/missing-types.p6

[22:55] <timotimo> because operators are coercive in perl6

[22:55] <timotimo> + will always turn its arguments into numbers, ~ will always turn its arguments into strings

[22:55] <timotimo> so you'll never get confused with number + string or string + number

[22:56] <gfldex> it's very easy to get that wrong and very hard to have complete tests for it (in languages that overload + for string concat)

[22:56] <timotimo> especially when you look at how - behaves in languages like javascript

[23:00] <aod> ok like the weird NaN stuff in JS. But I think the + operator could work id both types were strings. Its just hard to look at ~ and not see it as "negate"

[23:01] <aod> if both types

[23:02] *** labster left
[23:02] <timotimo> we think it's a good idea to have ~ separate from +

[23:03] <gfldex> hardly ever use ~, most of the time interpolation works better

[23:03] <timotimo> yeah

[23:03] <zengargoyle> ~ is like a thread sewing strings together. :)

[23:03] <zengargoyle> + adds

[23:04] *** dayangkun joined
[23:04] <timotimo> if you prefer ++ for string concat, you can put "my &infix:<++> = &infix:<~>" at the top of your scripts

[23:04] <timotimo> also, in perl5 you used . for string concat, not +.

[23:04] <geekosaur> aod, in a language where string and number get conflated a lot, it makes a lot of sense to not require + to guess which one you intended

[23:05] *** dayangkun left
[23:05] <timotimo> also, if the operator decides what the result will be, you don't have to look at what types come in to see what type comes out

[23:11] *** labster joined
[23:11] <aod> ok. talking about interpolation, whats the difference between "$a" and "{$a}", if any? {$a} is new to me...

[23:12] <timotimo> no difference

[23:12] <timotimo> but you can put any code between the { }

[23:12] <aod> oh executable code?

[23:13] <aod> is it like eval?

[23:13] <timotimo> no

[23:13] <gfldex> no, it's simply a concat

[23:13] <timotimo> it's like writing code into your program

[23:13] <gfldex> m: say "a { 41 + 2} b";

[23:13] <camelia> rakudo-moar 922afd: OUTPUT«a 43 b␤»

[23:14] <gfldex> m: say "a { do $++ for 1..3 } b";

[23:14] <camelia> rakudo-moar 922afd: OUTPUT«a 0 1 2 b␤»

[23:14] *** cooper_ joined
[23:14] <aod> this code is executed at compile time or run time?

[23:15] <gfldex> aod: see https://docs.perl6.org/language/quoting#Interpolation:_qq

[23:15] <gfldex> runtime

[23:16] <gfldex> m: say "a { qx/wget www.google.com/ } b";

[23:16] <camelia> rakudo-moar 922afd: OUTPUT«qx, qqx is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub QX at src/RESTRICTED.setting line 11␤  in block <unit> at <tmp> line 1␤␤»

[23:16] <gfldex> m: say "a { qx/wget -O- www.google.com/ } b"; # maybe better that way

[23:16] <camelia> rakudo-moar 922afd: OUTPUT«qx, qqx is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub QX at src/RESTRICTED.setting line 11␤  in block <unit> at <tmp> line 1␤␤»

[23:19] <gfldex> m: sleep 10; say now.Int; say "a { BEGIN now.Int } b";

[23:19] <camelia> rakudo-moar 922afd: OUTPUT«1474845591␤a 1474845581 b␤»

[23:19] <gfldex> you can have it at compile time ofc, for many values of compile time

[23:21] *** dayangkun joined
[23:32] <aod> learning a lot. perl6 is mind blowing. Another question, why doesnt WHAT shows in ()^.methods

[23:33] <TimToady> it's not really a method

[23:33] *** dayangkun left
[23:33] *** eliasr left
[23:40] *** dayangkun joined
[23:43] <gfldex> aod: it's (kind of) defined in Mu. Or better it would be defined in Mu, if Rakudo would have a magic boot to strap. 

[23:43] <gfldex> aod: see the following to understand what Mu is for https://docs.perl6.org/language/typesystem#Definition_of_a_Perl_6_Type

[23:46] *** pmurias left
[23:49] *** dayangkun left
[23:52] *** nadim left
[23:52] <dalek> doc: a38e81a | gfldex++ | doc/Language/typesystem.pod6:

[23:52] <dalek> doc: end the sentence

[23:52] <dalek> doc: review: https://github.com/perl6/doc/commit/a38e81ad2d

[23:59] <dalek> doc: 57234e6 | (Zoffix Znet)++ | doc/Type/Code.pod6:

[23:59] <dalek> doc: Document Code.of()

[23:59] <dalek> doc: review: https://github.com/perl6/doc/commit/57234e63f4

