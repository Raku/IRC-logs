[00:00] <AlexDaniel> m: :(42) .say

[00:00] <camelia> rakudo-moar 103781: OUTPUT«(Int $ where { ... })␤»

[00:01] <sortiz> bbrk, till 13 without problems, need more?

[00:02] <bbkr> sortiz: no, thanks for testing. looks like it is something OS X specific.

[00:02] *** Skarsnik joined
[00:02] *** tphilipp joined
[00:05] <bbkr> sortiz: got this bug when I was trying to fix Net::ZMQ NativeCall warnings. so I just have to fix everything at once to avoid having multiple invalid signatures that leads to this compile time lock. that's motivation :)

[00:06] <sortiz> :P

[00:06] *** leobut joined
[00:07] *** espadrine left
[00:07] <sortiz> bbkr, yep working with NC requires, sometime, lots of motivation ;-)

[00:08] <Skarsnik> true x)

[00:08] <sortiz> \o Skarsnik!

[00:09] *** ilbelkyr is now known as ishanyx

[00:11] *** tphilipp left
[00:12] *** jack_rabbit joined
[00:15] <AlexDaniel> m: {[~] |S/' '/_/.comb(/\D/)».&{(.lc,.uc).pick},|.comb(/\d/)}(‘pa55 w0rd’).say

[00:15] <camelia> rakudo-moar 103781: OUTPUT«pA_WRD550␤»

[00:15] <AlexDaniel> Hotkeys: ↑

[00:16] <Xliff> psch, thanks!

[00:17] *** tardisx left
[00:18] *** leobut left
[00:18] *** leobut joined
[00:19] *** [Tux] left
[00:21] *** [Tux] joined
[00:22] *** leobut left
[00:23] *** leobut joined
[00:26] <AlexDaniel> m: say [~|] ‘_’, ‘w’ # what's that?

[00:26] <camelia> rakudo-moar 103781: OUTPUT«^H␤»

[00:27] <diakopter> hunh

[00:27] *** _nadim left
[00:28] *** skids joined
[00:28] <AlexDaniel> m: say [~|] ‘x’, ‘a’;

[00:28] <camelia> rakudo-moar 103781: OUTPUT«y␤»

[00:29] <sortiz> m:  say (0x5f +| 0x7f).base(16)

[00:29] <camelia> rakudo-moar 103781: OUTPUT«7F␤»

[00:29] *** _nadim joined
[00:29] <AlexDaniel> so it is just a stringy or?

[00:30] <sortiz> Yep

[00:30] *** sufrosti1o left
[00:31] *** Actualeyes joined
[00:31] *** leobut left
[00:32] *** leobut joined
[00:33] *** tphilipp joined
[00:35] *** _nadim left
[00:35] <AlexDaniel> Hotkeys: that's kinda it, I'm out of ideas now :)

[00:36] <AlexDaniel> m: $_ = ‘hello world’; say S:s/o w/ow/

[00:36] <camelia> rakudo-moar 103781: OUTPUT«helloworld␤»

[00:36] <AlexDaniel> m: $_ = ‘hello world’; say S:s/ /_/

[00:36] <camelia> rakudo-moar 103781: OUTPUT«5===SORRY!5=== Error while compiling /tmp/DcUqHw5_zv␤Null regex not allowed␤at /tmp/DcUqHw5_zv:1␤------> 3$_ = ‘hello world’; say S:s/ 7⏏5/_/␤»

[00:36] <AlexDaniel> is it a bug?

[00:37] <AlexDaniel> it is definitely not what I meant, but is there any reason for this behavior?

[00:37] <AlexDaniel> m: $_ = ‘hello world’; say S:s/o /o/

[00:37] <camelia> rakudo-moar 103781: OUTPUT«helloworld␤»

[00:38] *** tardisx joined
[00:41] <sortiz> m: $_ = ‘hello world’; say S:s/' '/_/ # For the record only

[00:41] <camelia> rakudo-moar 103781: OUTPUT«Cannot unbox a type object␤  in block <unit> at /tmp/jXKGp7N7bp line 1␤␤»

[00:42] <AlexDaniel> sortiz: well, you don't need :s for that

[00:43] *** khw left
[00:43] <sortiz> AlexDaniel, I know

[00:43] <AlexDaniel> m: $_ = ‘hello world’; say Ss/o /o/

[00:43] <camelia> rakudo-moar 103781: OUTPUT«helloworld␤»

[00:43] <Hotkeys> AlexDaniel: what the heck is this |S/' '/_/

[00:43] <Hotkeys> what is capital S///

[00:44] <AlexDaniel> Hotkeys: just like s but not in-place

[00:44] <AlexDaniel> Hotkeys: | is just to slip it, so that [~] works

[00:44] <Hotkeys> so you can .method on S///

[00:44] *** tphilipp left
[00:44] <Hotkeys> for the record I did try to do that, but it was with s///

[00:44] <Hotkeys> didn't know S/// existed

[00:45] <AlexDaniel> m: $_ = ‘hello world’; S/hello/noo/; say $_

[00:45] <camelia> rakudo-moar 103781: OUTPUT«hello world␤»

[00:45] <AlexDaniel> m: $_ = ‘hello world’; s/hello/noo/; say $_

[00:45] <camelia> rakudo-moar 103781: OUTPUT«noo world␤»

[00:45] *** tphilipp joined
[00:45] <sortiz> Hotkeys, S is the 'general' form, like Q for quotes.

[00:45] *** _nadim joined
[00:45] <Hotkeys> wtb documentation

[00:45] <AlexDaniel> sortiz: how do you make S act like s?

[00:47] *** cdg left
[00:47] <sortiz> AlexDaniel, I don't remember the details now. :(

[00:47] *** cdg joined
[00:48] *** cdg left
[00:48] <Hotkeys> m: {[~] |S/' '/_/.comb(/\D/)».&{(.lc,.uc).pick},|.comb(/\d/)}("hello there jim").say

[00:48] <camelia> rakudo-moar 103781: OUTPUT«hELlo_theRe JIm␤»

[00:49] <Hotkeys> m: {[~] |TR/' '/_/.comb(/\D/)».&{(.lc,.uc).pick},|.comb(/\d/)}("hello there jim").say

[00:49] <camelia> rakudo-moar 103781: OUTPUT«5===SORRY!5=== Error while compiling /tmp/yjpza1Rhp_␤Undeclared names:␤    TR used at line 1␤    _ used at line 1␤␤»

[00:49] <Hotkeys> m: {[~] |T/' '/_/.comb(/\D/)».&{(.lc,.uc).pick},|.comb(/\d/)}("hello there jim").say

[00:49] <camelia> rakudo-moar 103781: OUTPUT«5===SORRY!5=== Error while compiling /tmp/fCeTxXI8NZ␤Undeclared names:␤    T used at line 1␤    _ used at line 1␤␤»

[00:49] <Hotkeys> m: {[~] |S:g/' '/_/.comb(/\D/)».&{(.lc,.uc).pick},|.comb(/\d/)}("hello there jim").say

[00:49] <camelia> rakudo-moar 103781: OUTPUT«HEllO_therE_jIm␤»

[00:49] <Hotkeys> need an extra 2 bytes for global

[00:50] *** _nadim left
[00:54] *** tphilipp left
[00:55] *** dvinciguerra__ left
[00:55] *** tphilipp joined
[00:56] *** aindilis joined
[00:56] * gtodd still wants to make a stab at a perl6  version of some of these scripts for reading large files http://stackoverflow.com/q/36201884/2019415

[00:57] *** leobut left
[00:57] <gtodd> particularly like the Stream::Reader CPAN module

[00:58] *** Ben_Goldberg joined
[00:58] *** Ben_Goldberg is now known as BenGoldberg

[00:58] <gtodd> it was very easy to write a perl6 script that worked with a small file by converting the string to a list (.comb) ... but this doesn't work when the string a a billion characters long

[00:59] *** silug joined
[00:59] * BenGoldberg forgets, is .comb lazy?

[01:01] *** tphilipp left
[01:01] *** labster left
[01:01] *** tphilipp joined
[01:02] *** tphilipp left
[01:02] *** labster joined
[01:04] *** tphilipp joined
[01:05] *** tphilipp left
[01:06] *** tphilipp joined
[01:08] <gtodd> I'm not sure the string was very small ... I think on a bigger string it was waiting or whatever it does when the list is huge

[01:08] *** _nadim joined
[01:09] <gtodd> so .... maybe that means it is :)

[01:14] *** tphilipp left
[01:17] <perlawhirl> hrmph

[01:17] <perlawhirl> .seen sortiz

[01:17] <yoleaux> I saw sortiz 00:47Z in #perl6: <sortiz> AlexDaniel, I don't remember the details now. :(

[01:19] <perlawhirl> anyone online who has admin access to the ecosystem

[01:19] <sortiz> perlawhirl, hi

[01:20] <sortiz> Can I help you?

[01:21] <AlexDaniel> Hotkeys: right! I forgot about global

[01:21] <perlawhirl> umm, i'm building rakudo on a new box and i can't install my module, wig

[01:21] <perlawhirl> the update.log looks ok

[01:22] <perlawhirl> and the modules before and after mine are in projects.json, but not mine :~(

[01:22] <perlawhirl> i ran panda update to no avail

[01:22] <sortiz> Let me see...

[01:23] <AlexDaniel> m: $_ = ‘hello world’; s/o/X/; say $_

[01:23] <camelia> rakudo-moar 103781: OUTPUT«hellX world␤»

[01:23] <AlexDaniel> m: $_ = ‘hello world’; sg/o/X/; say $_

[01:23] <camelia> rakudo-moar 103781: OUTPUT«5===SORRY!5=== Error while compiling /tmp/innHOYa2gH␤Missing required term after infix␤at /tmp/innHOYa2gH:1␤------> 3$_ = ‘hello world’; sg/o/X/7⏏5; say $_␤    expecting any of:␤        prefix␤        term␤»

[01:23] <AlexDaniel> m: $_ = ‘hello world’; ss/o/X/; say $_

[01:23] <camelia> rakudo-moar 103781: OUTPUT«hellX world␤»

[01:23] <AlexDaniel> m: $_ = ‘hello world’; ss/o /X/; say $_

[01:23] <camelia> rakudo-moar 103781: OUTPUT«hellXworld␤»

[01:24] <AlexDaniel> ss is fine but sg is not, hmm…

[01:24] <AlexDaniel> why?

[01:24] <perlawhirl> sortiz: i manually deleted my projects.json file and ran update

[01:24] <perlawhirl> now it's there

[01:25] <perlawhirl> i dunno *shrug*

[01:25] <perlawhirl> it was a fresh install so dunno what went wrong

[01:25] <sortiz> umm, well, back to work.

[01:26] <perlawhirl> yep :D

[01:27] <perlawhirl> weird that panda update didn't resolve it? how does it check for updates? does it do a checksum or just check the last module added?

[01:27] <perlawhirl> i might remove a project in the middle of the projects.json and test it

[01:27] <AlexDaniel> Hotkeys: how can I run your .flat.sort.rotor example?

[01:28] <AlexDaniel> Hotkeys: you say that it takes a list of lists, but

[01:28] <AlexDaniel> m: {$^a.flat.sort.rotor($a[0])}( ((-36, -18, 0), (8, 99, 112), (14, 6, -12)) ).say

[01:28] <camelia> rakudo-moar 103781: OUTPUT«Cannot have elems < 1, did you mean to specify a Pair with => -36?␤  in block <unit> at /tmp/vhaLbwIQHi line 1␤␤»

[01:29] <sortiz> perlawhirl, panda guts are a mystery to me, sorry.

[01:30] <perlawhirl> hah, ok well i did that test and it updated just fine, so i'm perplexed, but will leave alone... just another mystery of the universe

[01:31] <Hotkeys> AlexDaniel: oops

[01:31] <Hotkeys> seems I forgot a +

[01:31] <Hotkeys> m: {$^a.flat.sort.rotor($a[0])}(((-36, -18, 0), (8, 99, 112), (14, 6, -12))).say

[01:31] <camelia> rakudo-moar 103781: OUTPUT«Cannot have elems < 1, did you mean to specify a Pair with => -36?␤  in block <unit> at /tmp/Wx1kWp7glB line 1␤␤»

[01:31] <Hotkeys> m: {$^a.flat.sort.rotor(+$a[0])}(((-36, -18, 0), (8, 99, 112), (14, 6, -12))).say

[01:32] <camelia> rakudo-moar 103781: OUTPUT«((-36 -18 -12) (0 6 8) (14 99 112))␤»

[01:34] <Hotkeys> m: {.flat.sort.rotor(+.[0])}(((-36, -18, 0), (8, 99, 112), (14, 6, -12))).say

[01:34] <camelia> rakudo-moar 103781: OUTPUT«((-36 -18 -12) (0 6 8) (14 99 112))␤»

[01:34] <Hotkeys> nice

[01:34] <AlexDaniel> right

[01:35] <Hotkeys> that's as short as I can see to get it

[01:35] <Hotkeys> Any ideas for shortening?

[01:36] <AlexDaniel> Hotkeys: are you kidding me? :)

[01:37] <Hotkeys> is that a "yes obviously I can shorten it" or "no, that's obviously the shortest it can get"

[01:37] *** grondilu joined
[01:37] <AlexDaniel> Hotkeys: no, it's the shortest it can get

[01:37] <Hotkeys> alright

[01:38] <AlexDaniel> Hotkeys: one of the ideas is to replace flat with something like |«| or something…

[01:38] <Hotkeys> Yeah

[01:38] <Hotkeys> I actually tried that lol

[01:38] <AlexDaniel> Hotkeys: but I can't get that to work

[01:38] <Hotkeys> http://i.imgur.com/WZ96Ovu.png

[01:41] <Hotkeys> I also tried hoping for deepsort (see: deepmap) but that isn't a thing

[01:41] <AlexDaniel> heh, deepsort

[01:41] <Hotkeys> :)

[01:44] *** kid51 left
[01:50] *** Herby_ joined
[01:50] <Herby_> Evening, everyone!

[01:50] <Herby_> \o

[01:53] <Herby_> o/

[01:56] *** Actualeyes left
[01:56] <skids> o~

[01:57] <AlexDaniel> @🐛@

[01:57] <Herby_> \o/

[01:57] <AlexDaniel> ↑ found that somewhere in the log. Hilarious

[01:57] <skids> doesn't render here.

[01:58] *** Actualeyes joined
[01:59] <AlexDaniel> .u 🐛

[01:59] <yoleaux> U+1F41B BUG [So] (🐛)

[01:59] <AlexDaniel> skids: well, it was supposed to look like camelia, but: https://files.progarm.org/2016-04-01-045919_223x49_scrot.png

[02:03] <Hotkeys> here

[02:03] <Hotkeys> m: sub deepsort (@a) {my @t; @a.deepmap({@t.push: $_}); @t.=sort; @a.deepmap({@t.shift})}; say deepsort [[3, [9, [2, 6], 7], [0, 1, [[[-13, 4], 5], 10], 17, -3], -42], 8] 

[02:03] <camelia> rakudo-moar 103781: OUTPUT«[[-42 [-13 [-3 0] 1] [2 3 [[[4 5] 6] 7] 8 9] 10] 17]␤»

[02:03] <Hotkeys> :D

[02:04] <AlexDaniel> Hotkeys: I'm more interested in shortening the password thingy

[02:04] <Hotkeys> I wasn't doing any shortening in deepsort :p

[02:04] <AlexDaniel> Hotkeys: if I had a bit more brains maybe I could have shortened it by a character or two

[02:04] <Hotkeys> just having fun

[02:04] <AlexDaniel> Hotkeys: just saying :)

[02:19] *** Skarsnik left
[02:28] *** cognominal left
[02:38] *** raoulvdberge left
[02:40] *** tardisx left
[02:44] *** noganex_ joined
[02:48] *** noganex left
[02:53] *** tardisx joined
[02:59] <MadcapJake> what does this error mean: «Cannot look up attributes in a type object»?

[03:00] *** japhb joined
[03:00] <sortiz> MadcapJake, your method is not receiving an instance, i.e. self is undefined

[03:02] *** lizmat_ joined
[03:03] <MadcapJake> I don't understand how it's getting a type though, I use the builtin new method.

[03:04] *** lizmat left
[03:05] <sortiz> The construction (new or BUILD) can be failing.

[03:06] <MadcapJake> yeah it must be inside BUILD

[03:06] *** TreyHarris joined
[03:06] <sortiz> Inside BUILD, self is undefined yet.

[03:07] <sortiz> Umm, wait. nop

[03:09] <sortiz> In new is undefined. At BUILD should be defined, unless something failed.

[03:11] <ugexe> MadcapJake: are you trying to access any members of the class that would not have been initialized until after BUILDALL?

[03:12] <ugexe> m: class Foo { has $.a; method new { say $.a; }; }; Foo.new

[03:12] <camelia> rakudo-moar 103781: OUTPUT«Cannot look up attributes in a type object␤  in method new at /tmp/nf2rM8TaVF line 1␤  in block <unit> at /tmp/nf2rM8TaVF line 1␤␤»

[03:16] <ugexe> also

[03:16] <ugexe> m: class Foo { has $.a; method bar { 1 }; method new { say self.bar; }; }; Foo.new # self can still be used to do stuff

[03:16] <camelia> rakudo-moar 103781: OUTPUT«1␤»

[03:23] <skids> Man I wasn't even thinking about smoking until that stupid Truth campaign commercial came on.

[03:24] *** japhb left
[03:25] <ugexe> the one with the catchy rap hook where they throw money makes smoking look cool as hell

[03:26] *** japhb joined
[03:27] <skids> m: class A { method new { self.perl.say } }; A.new; # in .new, self is just the type object (unless you do something like A.new.new of course)

[03:27] <camelia> rakudo-moar 103781: OUTPUT«A␤»

[03:28] *** matiaslina joined
[03:28] <skids> There are two options, use BUILD directly, or put your own call to bless in .new and work with the object it returned.

[03:28] <skids> (and be sure to return that object)

[03:31] *** BenGoldberg left
[03:31] *** Herby_ left
[03:32] <skids> That campaign is mendaciously deceptive and makes kids stupider.  I have to say as a smoker, the campaign with the wife-beater-wearing "bully" cigarette is both funny and discourages me from smoking, a very tiny bit, and to top it off doesn't tell lies.

[03:33] *** geekosaur joined
[03:34] <MadcapJake> the call that has a probem is @!tickets.push($ticket) in a separate method. I have a Ticket:D constraint on the ticket coming in, then I just push it to a constrained «has Ticket @!tickets» array, and that's where the error happens, any ideas?

[03:35] <MadcapJake> I've got all the guards up, so-to-speak, but for some reason this strange type object error

[03:35] *** tardisx left
[03:38] <MadcapJake> actually, before entering this add-to-array method, I tried $ticket.WHAT.say and I get the same error but from within the gist method?? o_O

[03:39] <MadcapJake> huh, didn't realize WHAT calls gist

[03:39] <tony-o> do you have a gist or something somewhere MadcapJake ?

[03:39] <MadcapJake> yeah

[03:41] *** vike left
[03:41] *** matiaslina left
[03:42] *** matiaslina joined
[03:42] <MadcapJake> gah, I really am stumped

[03:43] <MadcapJake> removing that gist method gives me (Ticket) but that doesn't really help me solve this, now back to the same error but inside the add-to-array method :S

[03:46] <MadcapJake> anyone want to take a gander? https://github.com/MadcapJake/sixbug/blob/master/app.p6sgi#L179-L182

[03:49] *** cdg joined
[03:53] *** vike joined
[03:54] *** cdg left
[03:54] *** geekosaur left
[03:57] *** geekosaur joined
[04:01] <skids> m: class B { }; class A { has B @!b; method foo(B:D $b) { @!b.append($b); @!b.say; self; } }; A.new.foo(B.new).perl.say;

[04:01] <camelia> rakudo-moar 103781: OUTPUT«[B.new]␤A.new␤»

[04:03] <skids> "RT.add($ticket);" is calling .add on the type object of RT which does not have a @!tickets.

[04:04] <MadcapJake> skids: doh! thanks so much! totally missed that

[04:04] <skids> Would've been nice if the error message said which type object you tried to look up an attribute in, for sure.

[04:05] *** labster left
[04:05] <MadcapJake> yeah agreed that is definitely a LTA error message

[04:06] *** buharin joined
[04:07] *** wamba joined
[04:23] *** labster joined
[04:24] <perlawhirl> MadcapJake: Not sure if you saw it, but it lives: https://github.com/0racle/p6-wig

[04:34] *** skids left
[04:35] *** matiaslina left
[04:43] *** Cabanossi left
[04:44] *** Cabanossi joined
[05:13] <MadcapJake> perlawhirl: sweet! any word from TimToady on it?

[05:15] <MadcapJake> so i'm converting a big list of hashes into json, would it make sense to use .race and call to-json on each hash? I'm curious if that would actually get me a speed increase (currently to-json on the whole array is quite expensive)

[05:15] *** molaf joined
[05:19] *** Vlavv_ left
[05:25] *** remmie joined
[05:32] *** Vlavv_ joined
[05:34] <MadcapJake> hmm not sure that's where the bottleneck is actually

[05:35] *** wamba left
[05:41] <MadcapJake> lol, sooo my request to rt for tickets takes 43 seconds, building json for it takes 58 seconds! altogether a 2 minute wait to load the page!

[05:41] <MadcapJake> needless to say, I am now caching the tickets and the json :P

[05:43] *** lustlife joined
[05:46] *** buharin left
[05:48] <perlawhirl> MadcapJake: I haven't asked him... don't think anyone has

[05:49] <perlawhirl> i dunno what the ettiquette is :S

[05:53] <MadcapJake> hrmm

[05:53] <MadcapJake> using race shaved 20 seconds off that big to-json op :D

[05:53] <MadcapJake> but now I think I'm just gonna build the json myself (it's very regular)

[05:55] <perlawhirl> i find race inconsistent, but then again, i'm on a 32-bit machine, so things are slower in general

[05:56] *** _nadim left
[05:57] <MadcapJake> I'm on a six core machine! OH YEAH! ;)

[05:57] *** _nadim joined
[05:57] <MadcapJake> well either way, converting all this to-json stuff to simple string concat should help speed things up

[05:58] <MadcapJake> I wonder if race actually degrades performance on single-core machines

[05:59] <MadcapJake> but wrt "where" I think your proposal (was you, right?) was really well written and compelling, I'd just message him on IRC and ask if he'd read it and whether he'd be open for it.

[06:00] <MadcapJake> oh yeah! raw to-json: 58 seconds, .race to-json: 38 seconds, string ops + race: 1.5 seconds (priceless)

[06:00] *** _nadim left
[06:01] <perlawhirl> something also about rakudo doesn't do some JIT stuff on 32-bit... someone said in passing (probably jnthn) that flew over my head

[06:01] <perlawhirl> 1.5 seconds! nice

[06:01] *** _nadim joined
[06:02] <MadcapJake> perlawhirl: oi that's a bummer! it's surprising to me that JIT could optimize differently based on sizes of addresses, but pretty much everything suprises me about JIT :)

[06:02] <perlawhirl> it will be nice when rakudo does things the obvious way quickly, rather than having to refactor around the slow parts

[06:03] <MadcapJake> agreed! TBH, I find that often I reach for to-json when really the data is regular enough that I don't need it.

[06:03] <perlawhirl> have you seen the Scientist module. How does it differ from your Test-Lab ?

[06:04] <MadcapJake> (the real question is, is this valid json?)

[06:04] <perlawhirl> i just noticed today there were 2 similar modules and wondered if one was better

[06:04] <perlawhirl> it's ok, you can say yours is better :D

[06:04] <MadcapJake> hehe, mine is a bit more DSL-like whereas lancew's is more perl6-ish

[06:05] *** lizmat_ is now known as lizmat

[06:06] <MadcapJake> I tried to mix the rubyishness of Scientist's origin with some of the cool features that Perl 6 supplies but I didn't want to do named arguments because two things, (1) you lose some of the flexibility of manipulating the experiment as you're now constrained to the named arguments provided and (2) the code to implement an experiment as named arguments (in

[06:06] <MadcapJake> terms of the original Scientist API) would be much larger (and perhaps flakier) than just letting the user do it.

[06:07] <moritz> \o

[06:07] <moritz> ZoffixWin++'s "Wow, Perl 6" presentation is currently No. 5 on hackernews

[06:07] <MadcapJake> woah!

[06:07] <MadcapJake> it's quite a good presentation, he hits a lot of cool points

[06:08] * MadcapJake goes to contribute his ▲

[06:08] <lizmat> commute to NLPW&

[06:08] *** lizmat left
[06:09] <moritz> https://news.ycombinator.com/item?id=11401330

[06:10] <MadcapJake> perlawhirl: also, I implement the entirety of github's Scientist API, including every single test, it's almost an exact translation into Perl 6

[06:10] *** pecastro_ joined
[06:11] *** buharin joined
[06:11] * MadcapJake is nearing completion of the Issue Submitter

[06:12] <MadcapJake> everyone hold all issues until I get this up and running! ;)

[06:17] <perlawhirl> wow, not too much hate on HN comments. still sad that people dismiss perl off-hand for reasons that are isolated to their own prejudices

[06:18] *** buharin left
[06:18] *** _nadim left
[06:18] <MadcapJake> perlawhirl: I've noticed that Perl 6 goes over quite well on HN, really poorly on Slashdot and mixed on Reddit :)

[06:19] <perlawhirl> fair enough... i don't really visit them... reddit a tiny bit

[06:20] <perlawhirl> how can you dislike a language that makes things this easy!!: say "These are my things: @things.join(', ')."

[06:20] <perlawhirl> who needs printf anymore :D

[06:22] <MadcapJake> yeah a few people were saying the ole lisper-line "why have operators when you can have a huge wall of parenthesis and function names" ugh x_x

[06:28] *** leont joined
[06:30] *** sheldon joined
[06:31] *** sheldon left
[06:31] *** pecastro_ left
[06:42] *** perlawhirl left
[06:44] *** geekosaur left
[06:45] *** geekosaur joined
[06:47] *** leont left
[06:50] <remmie> is there perl6 syntax highlighting for sublime anywhere?

[07:07] *** labster left
[07:12] *** sjoshi joined
[07:18] *** perlawhirl joined
[07:23] *** AlexDaniel left
[07:23] *** perlawhirl left
[07:25] *** perlawhirl joined
[07:26] <sortiz> "Bytecode validation error at offset 522, instruction 78: operand type 160 does not match register type 152" when using a 'uint32' constrained named argument in a method call. Without the constraint the problem vanishes.

[07:26] *** labster joined
[07:28] <moritz> sortiz: please submit as a bug

[07:28] *** ufobat joined
[07:29] <ufobat> good morning guys

[07:30] *** RabidGravy joined
[07:30] *** ely-se joined
[07:34] *** abraxxa joined
[07:34] *** leont joined
[07:34] <leont> How do I do conditional matching in rules?

[07:35] <leont> I'm trying to use multi-rules, it parses fine but doesn't seem to work

[07:36] *** ely-se left
[07:37] <ufobat> i think the problem is that rules and tokens dont backtrack

[07:37] <leont> ?

[07:37] <sortiz> moritz, Done: RT#127813

[07:37] <ufobat> so if one is matching (but not complete) the other will not work anymore, since you have "consumed" parts of your string

[07:39] *** fireartist joined
[07:47] <leont> I'm not sure I understand

[07:47] <leont> I'm using multi-rules on arguments (my grammar is context-sensitive like that)

[07:48] *** zakharyas joined
[07:49] <timotimo> oh no, is the tpm2016.zoffix.com page down? :(

[07:50] <timotimo> ZoffixWin: It's not just you! http://tpm2016.zoffix.com looks down from here.

[07:51] <RabidGravy> it appears to be the DNS

[07:51] <ufobat> leont, i am to much of a greenhorn to help you. sorry

[07:54] *** perlawhirl left
[07:54] *** polyfloyd joined
[07:55] *** lustlife` joined
[07:57] *** g4 joined
[07:59] *** lustlife left
[08:01] *** perlawhirl joined
[08:05] *** dakkar joined
[08:08] *** lustlife` left
[08:11] *** TEttinger left
[08:12] <timotimo> leont: have you tried Grammar::Tracer yet?

[08:13] *** rindolf joined
[08:15] *** darutoko joined
[08:18] *** donaldh joined
[08:20] <RabidGravy> I find it really useful as I am totally crap with regex

[08:27] <timotimo> also, the debugger lets you run code - including regexes! - in its own REPL

[08:27] *** lizmat joined
[08:27] * lizmat greets from the NLPW

[08:27] <RabidGravy> is it possible to use "zef" and "panda" interchangeably?  That is if I use one am I asking for trouble using the other on the same installation?

[08:28] <timotimo> both use the API rakudo offers to do the actual installation

[08:28] <RabidGravy> so "in theory" it should be cool

[08:28] <timotimo> i think it ought to be fine. though perhaps they'll get confused about what is installed already and what isn't

[08:28] <dalek> ecosystem: 319caa9 | (James Albert)++ | META.list:

[08:28] <dalek> ecosystem: added JSON-WebToken

[08:28] <dalek> ecosystem: 

[08:28] <dalek> ecosystem: Repo: https://github.com/jamesalbert/JSON-WebToken

[08:28] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/319caa9198

[08:28] <dalek> ecosystem: 28cd2ce | sylvarant++ | META.list:

[08:28] <dalek> ecosystem: Merge pull request #186 from jamesalbert/master

[08:28] <dalek> ecosystem: 

[08:28] <dalek> ecosystem: added JSON-WebToken

[08:28] * RabidGravy tries

[08:28] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/28cd2cedb5

[08:29] *** perlawhirl left
[08:29] <timotimo> i think panda has a state file to remember what's installed and what isn't

[08:30] <leont> I'd need to simplify my use-case first before trying a tracer or debugger

[08:31] <timotimo> i've been dreaming about building a nice little web frontend for introspecting matching process and such

[08:34] <Xliff> http://regexr.com/

[08:34] <Xliff> It's more a general thing though. It's not up to P6 and grammars, yet.

[08:34] <timotimo> neat

[08:34] <Xliff> Still. It's useful in general.

[08:35] <RabidGravy> another week still no digest authentication module

[08:35] * Xliff installs Grammar::Tracer

[08:40] <Xliff> https://github.com/jnthn/lolsql

[08:40] * Xliff spits all over his keyboard.

[08:40] *** teatime joined
[08:42] <RabidGravy> Oooh, I had inadvertently made a module with a ver of ".0.0.1" which works but can't be uninstalled

[08:42] <teatime> heh

[08:42] <stmuk_> https://gcc.gnu.org/ml/gcc-patches/2016-04/msg00001.html

[08:43] <timotimo> oh, the presentation is back

[08:44] <Xliff> Wow!

[08:44] <Xliff> https://github.com/jnthn/zavolaj

[08:44] <teatime> flag_never_gonna_give_you_up

[08:45] <Xliff> ^ - This has been more helpful to me in understanding NativeCall than the examples pointed to me, earlier.

[08:45] <teatime> --frickroll-all-loops

[08:46] <teatime> Xliff: the implementation code of some NativeCall::______ modules provides examples of doing stuff where the docs for same are TBD.

[08:47] <Xliff> teatime, thanks. I'll cross that bridge when I get to it.

[08:47] <donaldh> ZoffixWin: Your "Wow, Perl6!" talk is trending on HN https://news.ycombinator.com/item?id=11401330

[08:48] <RabidGravy> also more than half the Audio::* modules are native bindings which do amusing and exciting things

[08:48] <timotimo> it seems like some people don't realize it's a presentation and that they're supposed to use spacebar or arrow keys (sideways!) to get through the slides

[08:48] <Xliff> ¯_(ツ)_/¯

[08:48] <timotimo> reveal.js has the nice feature that it has clickable indicator arrows at the bottom right by default

[08:49] <Xliff> RabidGravy, OK cool. I will have to make a note to use those as references.

[08:50] <RabidGravy> and while you're at it can you wrap some Ogg/Vorbis codec library?  I get burnout quite quickly when I'm doing those sort of things ;-)

[08:54] *** ufobat left
[08:54] <Xliff> :P

[08:54] *** ufobat joined
[08:55] <Xliff> RabidGravy, the amount of boredom I'd have to achieve to do such a thing (at this point) would be legendary.

[08:55] <Xliff> You could throw $$$ at me and then I'd do it.

[08:55] <RabidGravy> hahahaha

[08:56] <RabidGravy> Can we all play that game?  I'd like £75,000 for the 47 modules I already wrote

[08:56] <timotimo> i don't have that kind of money :|

[08:56] <Xliff> Just out of curiosity, WHICH Ogg/Vorbis codec library are you thinking of.... and how perlish do you want it?

[08:56] <Xliff> I mean.... I can play the strait 1:1 game if you want.

[08:57] <teatime> Gentlemen, do I have one number right?

[08:57] * Xliff thinks of writing a .h to NativeCall processor.

[08:57] <RabidGravy> there is one

[08:57] <Xliff> Why does that not surprise me?

[08:57] <RabidGravy> skarsnik's most excellent gptrixie

[08:57] <timotimo> yeah, gptrixie

[08:57] <Xliff> RabidGravy, why don't you use that when the BQ is high?

[08:58] <Xliff> (for the slower ones here, BQ == Boredom Quotient)

[08:58] <Xliff> Is gptrixie in the ecosystem, or do I have to install it via package manager?

[08:59] <timotimo> um ... that's not an "or" that goes there :D

[08:59] <RabidGravy> well, it just takes the donkey work out of making the stubs, for most things it doesn't make what I'd call a good interface

[08:59] <timotimo> only if it's in the ecosystem, you can install it via package manager. otherwise you'll have to git clone it manually

[08:59] <Xliff> ==> Successfully installed App::GPTrixie

[08:59] <timotimo> to be fair, you can then use the package manager on that local clone

[09:00] <Xliff> Hey. It's a starting point I don't have to monkey with myself!

[09:00] <Xliff> RabidGravy, See! That's what I meant by "perlish".

[09:00] <Xliff> What kind of interface would you think is "good"?

[09:01] <Xliff> Would depend partly on each lib's API.

[09:01] <RabidGravy> I'd have to charge you consultancy fees to tell you that

[09:02] <Xliff> See, for XQuilla (whenever I can get off my ass to start it), I would probably only have "prepare" and "evaluate" subs to start with.

[09:03] <Xliff> Sigh.... why do people have to be difficult with their namings?!?

[09:03] <Xliff> It's Xqilla.

[09:04] <Xliff> WTF did "U" do to them?

[09:04] <Xliff> Q's are naked without it!!!

[09:04] <timotimo> qeh.

[09:04] <RabidGravy> anyway, using panda and zef  interchangeably *has* shagged my repository, but I think this is because of the foremention dodgy version

[09:04] *** leont left
[09:04] <Xliff> RabidGravy, WHAT? You mercenary! You'd charge me money to ask you for suggestions of something you asked me to do?!?

[09:04] <RabidGravy> Xliff, tell that to the Basques

[09:04] *** Vlavv_ left
[09:04] * Xliff boggles!

[09:05] <Xliff> o_0

[09:05] * Xliff flogs RabidGravy with a foam "U"

[09:05] <Xliff> Aaannnd.... with that, it's probably time for zleep!

[09:06] * RabidGravy nukes the rakudo and rebuilds

[09:06] <timotimo> good night xliff

[09:07] <Xliff> RabidGravy, Once I get my XQuery parser project started I may switch gears for the halibut.

[09:07] <Xliff> RabidGravy, you'd need to at least suggest a ogg/vorbis library to start with, though.

[09:08] *** Xliff is now known as Xliff_ZZZzzzzz

[09:09] <RabidGravy> It appears that I really am doomed to write all the things

[09:10] <teatime> RabidGravy: I'm bored; pick a library and I'll consider it.

[09:12] <Xliff_ZZZzzzzz> teatime, that's what I'm telling him!

[09:14] <RabidGravy> I'm calling this "the first hurdle" ;-p

[09:15] * Xliff_ZZZzzzzz hurdles RabidGravy

[09:18] *** Vlavv_ joined
[09:21] <gregf_> ]foo[

[09:21] <gregf_> ]bar]

[09:21] <teatime> [baz[

[09:22] <timotimo> floof

[09:30] *** sjoshi left
[09:40] *** sue_ joined
[09:41] *** espadrine joined
[09:41] *** wamba joined
[09:44] *** sjoshi joined
[09:53] *** sue_ left
[09:57] <RabidGravy> tadzik, any chance you could merge https://github.com/tadzik/JSON-Unmarshal/pull/18 I'd forgotten that something I am doing depends on it

[10:01] <RabidGravy> Also as JSON::Unmarshal has flipped to JSON::Fast I may as well go with it for JSON::Marshall and JSON::Infer now

[10:01] <tadzik> merged :)

[10:01] <RabidGravy> you beauty :-*

[10:01] * lizmat will be doing a 20 minute ad-hoc Q&A session at the NLPW this afternoon at 16:00

[10:02] <timotimo> i'm glad JSON::Fast gets some love :)

[10:02] <RabidGravy> lizmat, I'd love to say I'll come along but I don't think I'll have time after doing the shopping ;-)

[10:02] <timotimo> hm, is its test suite up to snuff? i wonder ...

[10:03] <lizmat> RabidGravy: I'm just saying this in the hope that people will come up with some Questions I can Answer there, in case nobody has any Questions at the session itself  :-)

[10:06] <RabidGravy> timotimo, don't worry I'm sure some of the things I'm doing with JSON will find any bugs if indeed there are any ;-)

[10:12] <timotimo> i wonder how much faster we could get by not doing stuff recursively

[10:12] <timotimo> on the other hand we'll get faster invocation soon anyway

[10:15] *** tphilipp joined
[10:21] <RabidGravy> It's just use the power of Greyskull

[10:22] <timotimo> the force doesn't work like that!

[10:23] *** salva joined
[10:24] *** tphilipp left
[10:25] *** tphilipp joined
[10:27] *** tphilipp left
[10:27] *** tphilipp joined
[10:28] <RabidGravy> well, it should and needs fixing ;-)

[10:30] *** Guest38483 joined
[10:31] <Guest38483> Trying to clickbait lizmat++ with http://irclog.perlgeek.de/perl6/2016-03-31#i_12267194

[10:31] *** perlawhirl joined
[10:33] *** wamba left
[10:35] *** tphilipp left
[10:38] <perlawhirl> Guest38483: certainly looks bug-ish

[10:38] <perlawhirl> :k works, :kv doesn't

[10:39] <perlawhirl> lizmat is at NLPW and probably busy. i'm gonna go check out the 'first' method implementation source and see if :kv in there

[10:40] <RabidGravy> arguably a doc bug

[10:40] *** tphilipp joined
[10:40] *** Guest38483 left
[10:41] <RabidGravy> anyway, the plans for world domination have to go on hold while we go shopping

[10:41] *** robertle joined
[10:43] *** dogbert1 joined
[10:43] <dogbert1> masak and moritz thought that :kv should be added according to the discussion from yesterday

[10:44] <perlawhirl> yeah i don't see a reason why it shouldn't be implemented

[10:44] <dogbert1> was Guest38483 before my computer decided to reboot on me :-(

[10:44] <perlawhirl> fwiw, first calls first-result, which is implemented here: https://github.com/rakudo/rakudo/blob/6d120cab6d0bf55a3c96fd3bd9c2e841e7eb99b0/src/core/Any-iterable-methods.pm#L498

[10:45] <perlawhirl> no conditional for %a<kv>

[10:45] <teatime> anything come of the .where() bikeshed yet?

[10:45] *** labster left
[10:45] <perlawhirl> lolol... no... TimToady answered an unrelated question of mine this morning...

[10:46] <perlawhirl> i was about to ask him to take a gander, but then $day-job got in the way

[10:46] <perlawhirl> dunno whether i should just notify him via yoleaux??

[10:47] *** wamba joined
[10:49] <jnthn> perlawhirl: I'd agree :kv should work on .first as well as .grep, suspect just forgotten

[10:51] <jnthn> -1 from me to .where as well as .grep; we don't need two ways to do exactly the same thing. :)

[10:51] <jnthn> Learning a language's vocabularly is part of learning a language.

[10:51] <robertle> gentlemen, I am trying to figure out to what degree I can use == and != on numbers in perl6. is it fair to say that you of course still need to be careful with comparisons of reals, you need to find the difference and compare to some threshold, but that many of those will actually be rationals in practice, so you get away with == and != more often?

[10:51] <perlawhirl> Guest38483: for the meantime, this will give the same result as what i :kv should (probably) do

[10:52] <perlawhirl> m: say (1, 22/7, 42, 300).first( * > 5, :end, :p).map({$_.key, $_.value}).flat

[10:52] <camelia> rakudo-moar 103781: OUTPUT«(3 300)␤»

[10:52] *** tphilipp left
[10:52] *** lizmat left
[10:53] *** tphilipp joined
[10:53] <jnthn> robertle: You still need to be careful about comparison of Num (which is floating point), but yes, you encounter those less often because things like 2.5 are rationals

[10:54] <jnthn> robertle: There's a =~= operator (approximately numerically equal), iirc you can also control its tolerance

[10:55] <jnthn> m: say 0.1 + 0.2 == 0.3 # Rat, no problem

[10:55] <camelia> rakudo-moar 103781: OUTPUT«True␤»

[10:55] <jnthn> m: say 0.1e0 + 0.2e0 == 0.3e0 # Num, loss of precision by floating point makes for a surprise

[10:55] <camelia> rakudo-moar 103781: OUTPUT«False␤»

[10:55] <jnthn> m: say 0.1e0 + 0.2e0 =~= 0.3e0 # But can compare with a tolerance

[10:55] <camelia> rakudo-moar 103781: OUTPUT«True␤»

[10:57] <perlawhirl> Guest38483: shorter...

[10:57] <perlawhirl> m: say (1, 22/7, 42, 300).first( * > 5, :end, :p).flatmap({.key, .value})

[10:57] <camelia> rakudo-moar 103781: OUTPUT«(3 300)␤»

[11:00] <robertle> jnthn: wow, thanks! I didn't know about the approximate operator, and this is exactly what I need 

[11:00] <robertle> jnthn: we are doing a perl6 study group at work...

[11:01] <jnthn> Sounds fun :)

[11:02] *** wamba left
[11:04] *** kaare_ joined
[11:05] *** domidumont joined
[11:08] <chris2> what does the >+ operator do? i only find +> in the docs

[11:08] <perlawhirl> http://docs.perl6.org/language/setbagmix#infix_%28%3E%2B%29

[11:08] <perlawhirl> Baggy superset

[11:09] <chris2> thanks

[11:09] <chris2> i guess a "poogle" is needed in the future :)

[11:11] <perlawhirl> the search box on the docs page is fine for searching for exact operators... but doesn't search more vague terms

[11:11] *** tphilipp left
[11:14] *** tphilipp joined
[11:16] <chris2> ah good idea :)

[11:19] *** tphilipp left
[11:20] *** wamba joined
[11:21] *** tphilipp joined
[11:26] <hoelzro> morning #perl6!

[11:27] <hoelzro> I was reading this blog post about OOP and what sounds like MMD, and I thought I'd share it with the channel: http://devblog.avdi.org/2016/03/31/a-late-night-rant-about-oop-and-parametric-dispatch/

[11:29] *** tphilipp left
[11:30] *** tphilipp joined
[11:30] <tphilipp> 5

[11:31] *** donaldh left
[11:31] <moritz> hoelzro: I already disagree with item 1, because it ignores the issue of namespaces

[11:32] <perlawhirl> yeah... also... i've come to reason about things such that Classes != OOP

[11:32] <perlawhirl> just cause i make a class, doesn't mean i'm writing purely OOP code 

[11:33] <perlawhirl> i'm not "smart" enough to write proper OOP code... but a Class is a nice way to package up related methods on a data structure

[11:34] *** tphilipp left
[11:34] *** tphilipp joined
[11:35] *** tphilipp left
[11:35] *** tphilipp joined
[11:37] *** tphilipp left
[11:37] *** tphilipp joined
[11:38] *** tphilipp left
[11:39] *** tphilipp joined
[11:40] *** tphilipp left
[11:41] *** tphilipp joined
[11:41] <dogbert1> perlawhirl++, thx for the workaround 

[11:42] *** kid51 joined
[11:42] <perlawhirl> erm... were you the Guest?

[11:42] *** fireartist left
[11:43] <timotimo> yes

[11:43] <perlawhirl> cool.. well, np

[11:44] <dogbert1> guess a should get a nick that sticks :-)

[11:44] *** tphilipp left
[11:45] *** tphilipp joined
[11:45] <perlawhirl> isn't that a song by Huey Lewis and the News - I Need a Nick that Sticks

[11:50] *** lizmat joined
[11:51] *** kid51 left
[11:51] <lizmat> perlawhirl: looks to me first( :kv) is totally implementable

[11:51] <perlawhirl> yeap

[11:52] <lizmat> probably should live in !first-result

[11:52] *** leont joined
[11:53] <perlawhirl> I feel like you're motioning me to submit a PR :D

[11:53] <perlawhirl> will have a look at it later tonight (aussie time)

[11:53] <lizmat> ok, cool...

[11:53] <lizmat> thanks in advance!

[11:53] <lizmat> :-)

[11:54] *** felher left
[12:03] *** webmind joined
[12:03] <webmind> ohai

[12:03] <webmind> when executing the perl6 binary, it suggests to run panda install Readline

[12:03] <webmind> but that gives the following:

[12:03] <webmind> https://share.riseup.net/#HuQ1JHSPffAb6OzEO3Ha1Q

[12:03] <webmind> anyone know why?

[12:04] <timotimo> can you paste the contents of that file?

[12:04] <timotimo> /opt/rakudo-star-2016.01/share/perl6/site/panda/projects.json

[12:04] <timotimo> actually, is this a rakudo star? i thought that comes with Linenoise and/or Readline by now

[12:05] <hoelzro> star comes with Linenoise...but I don't know about 2016.01

[12:05] <timotimo> OK

[12:05] <timotimo> anything in particular keeping us from a rakudo star for .03, btw? i expect it's just no volunteer to do it

[12:07] <webmind> timotimo: it's empty

[12:08] <timotimo> is that the file that gets filled by "panda update"?

[12:08] <webmind> I just followed a manual on installing perl6 :)

[12:08] <timotimo> maybe that helps

[12:08] <hoelzro> moritz: I didn't think of that; I was interested because of Perl6's 'multi sub' and 'multi method' distinction

[12:08] <timotimo> i wonder why it's an empty file, though. it should be either with the correct contents or completely missing

[12:08] <webmind> running panda update solves the problem :)

[12:12] <moritz> timotimo: I'm not aware of a blocker

[12:13] <timotimo> i feel like just giving it a shot for the hell of it.

[12:19] <timotimo> m: my @a; Buf.new(@a)

[12:19] <camelia> rakudo-moar ae43ba: ( no output )

[12:19] <timotimo> m: my @a; Buf.new(@a).say

[12:19] <camelia> rakudo-moar ae43ba: OUTPUT«Buf:0x<>␤»

[12:19] <timotimo> star: my @a; Buf.new(@a).say

[12:19] <camelia> star-m 2016.01: OUTPUT«Buf:0x<>␤»

[12:19] <timotimo> i wonder what was b0rked there in between now and the beginning of march

[12:20] <moritz> hoelzro: well, the main difference between multi sub and multi method dispatch (in Perl 6) is where the code objects are being searched

[12:20] <moritz> hoelzro: in the lexical scope(s) vs. in method tables

[12:21] <hoelzro> ah, good point

[12:22] <timotimo> hum. do i need to use an older-ish version of panda to be compatible with our 2016.03 release?

[12:22] <timotimo> don't think so.

[12:22] <timotimo> no major changes since 2016.02

[12:23] <timotimo> star will need to get File::Which

[12:24] <timotimo> oh, #perl6-release is prime for this

[12:27] *** Sgeo__ left
[12:35] <ZoffixWin> Hacker news, eh

[12:36] <ZoffixWin> I wish my blog post and not just my slides were the link :/

[12:38] *** cdg joined
[12:41] <timotimo> aye

[12:44] *** ufobat left
[12:45] *** ufobat joined
[12:46] <ZoffixWin> I'll just add another slide in the front

[12:46] *** sue joined
[12:46] <[Coke]> hoelzro: how hard is RT #70927 with your new repl?

[12:49] <lizmat> timotimo: what is exactly the problem with Buf.new???

[12:49] <timotimo> i have no idea, but there's a module that has a workaround in its source for that

[12:49] <timotimo> probably not important

[12:50] <lizmat> timotimo: ah, that, because it's all 6.c

[12:51] <lizmat> and some 6.c support some Buf.new features, and some don't  :-(

[12:52] <[Coke]> (empty projects.json) I used to see that all the time when trying to panda from behind a firewall.

[12:52] <timotimo> oh, ugh

[12:52] *** tphilipp left
[12:52] *** tphilipp joined
[12:53] <ZoffixWin> Well... seems like a good chunk of those comments on HN are positive-ish. I really only spotted people crying about custom emoticon operators or that the UI on slides is unintuitive... 

[12:53] *** zakharyas left
[12:53] <ZoffixWin> We're making progress! :D

[12:53] <jnthn> 6.c unambiguously does not, because there weren't roast tests for those Buf.new features :P

[12:54] *** ufobat left
[12:55] <perlawhirl> Zoffix: yeah, people already have some unfounded fear of sigil'd variables... i think throwing more unicode frightens them

[12:57] <perlawhirl> when i'm "selling" sigils to non-perlers... i always show them string interp first: say "hi $name"

[12:57] <perlawhirl> it's one of those little things that make sigils worthwhile

[12:58] *** sue left
[12:58] <perlawhirl> once they are impressed with that, then you can hit them on the head with more unicode :D

[12:59] <perlawhirl> oh! ÷ and × 

[12:59] <perlawhirl> those too

[12:59] *** leont left
[12:59] <avalenn> m: my @inf = (Inf,Inf...Inf) ; my @o = (0,0...Inf) ; my @max, @min, @sum ; for lines>>.split(" ")>>.chars -> @cur { @min = (|@min, |@inf) Zmin @cur  ; @max = (|@max, |@o) Zmax @cur  ;  } ; say @min  ; say @max

[12:59] <camelia> rakudo-moar ae43ba: OUTPUT«5===SORRY!5=== Error while compiling /tmp/1AZ0ZQxo8d␤Variable '@min' is not declared. Did you mean '&min'?␤at /tmp/1AZ0ZQxo8d:1␤------> 3..Inf) ; my @o = (0,0...Inf) ; my @max, 7⏏5@min, @sum ; for lines>>.split(" ")>>.ch␤»

[13:00] <avalenn> m: my @inf = (Inf,Inf...Inf) ; my @o = (0,0...Inf) ; my @max ; my @min ; for lines>>.split(" ")>>.chars -> @cur { @min = (|@min, |@inf) Zmin @cur  ; @max = (|@max, |@o) Zmax @cur  ;  } ; say @min  ; say @max

[13:00] <camelia> rakudo-moar ae43ba: OUTPUT«[0 2 1 2 1 2 2 3 1 4 5 2 4 0]␤[6 4 8 7 5 7 4 7 3 11 6 6 8 6]␤»

[13:00] <gtodd>  custom emoticon operators ++

[13:00] *** tphilipp left
[13:00] <teatime> so, are they called texas variants, because everything is bigger in texas?

[13:01] <perlawhirl> yes

[13:01] <timotimo> yes

[13:01] *** mr-foobar left
[13:01] *** mr-foobar joined
[13:02] <dalek> ecosystem: 95d6ea8 | kuerbis++ | META.list:

[13:02] <dalek> ecosystem: Add Term::Form to ecosystem

[13:02] <dalek> ecosystem: 

[13:02] <dalek> ecosystem: See https://github.com/kuerbis/Term-Form-p6

[13:02] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/95d6ea808f

[13:02] <dalek> ecosystem: cea93ce | jnthn++ | META.list:

[13:02] <dalek> ecosystem: Merge pull request #187 from kuerbis/master

[13:02] <dalek> ecosystem: 

[13:02] <dalek> ecosystem: Add Term::Form to ecosystem

[13:02] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/cea93ce5bd

[13:02] <ZoffixWin> perlawhirl, but that isn't impressive. I believe it's Ruby that has sigiless variables, but it lets you interpolate them by adding a sigil. Interpolation isn't an excuse to have sigils all the time.

[13:03] *** dvinciguerra__ joined
[13:03] <ZoffixWin> To me, they're an indication of a variable, as opposed to a sub or a keyword. Good enough for me to like 'em.

[13:03] *** felher joined
[13:04] <gtodd> sigils make it possible for humans to read code more quickly :)

[13:04] <perlawhirl> yeah that's reason No1

[13:04] <gtodd> tiwigils of course are part of the secret plan 

[13:05] <perlpilot> I think people's fear of sigils is rooted in community memories of BASIC  :)

[13:05] *** skids joined
[13:05] <gtodd> or people who never used unix shells

[13:07] <gtodd> powershell has sigils so ...

[13:07] <gtodd> :-P

[13:07] <gtodd> param( [string] $infile = $(throw "Please specify a filename.") ) 

[13:07] <moritz> I'm not quite sure how much I like sigils

[13:07] <gtodd> so clean .... so ... "power"ful

[13:08] <moritz> but I do know that it infuriates me that in python "id" is a built-in symbol (the identity function)

[13:08] <gtodd> hah

[13:08] <moritz> and I work with lots of objects that have unique ids

[13:08] *** zakharyas joined
[13:08] *** sue joined
[13:08] <perlawhirl> gtodd: psh is fine if you don't have perl and you need to script some stuff... but i really can't stand the dynamic scoping

[13:09] *** ufobat joined
[13:09] <moritz> so either I get name it 'id' and get lots of linter warnings, and have a bad conscience for doing something Not Right, and override the builtin, or I have to find a different name

[13:09] <timotimo> "uid" or "oid" :\

[13:09] <timotimo> doesn't feel so good

[13:09] <timotimo> "idx" :P

[13:09] <perlawhirl> ident?

[13:09] <gtodd> maybe there could be a bunch of macros or a slang/grammar/dialect of perl6 that is sigil-less and uses tons of parens instead!

[13:09] <timotimo> or do it like other places in python do it: jd or di or id_

[13:10] <moritz> gtodd: Inline::Scheme? :-)

[13:10] <gtodd> :-D

[13:10] <jnthn> Sigils also make the data stand out, so aiding readability. :)

[13:10] <moritz> timotimo: I hate all of those

[13:10] <gtodd> $igil + syntax highlighting = super powers

[13:10] <timotimo> :)

[13:10] *** edjsu left
[13:11] <perlawhirl> speaking of syntax highlighting... in vim, at least, sometimes ». causes all trailing methods to be blue

[13:11] <timotimo> :o

[13:11] <perlawhirl> anyone other vim users get that?

[13:11] <moritz> it's like, I don't like sigils, but I tend to not like the absence of sigils as well :-)

[13:11] <moritz> perlawhirl: haven't noticed it

[13:11] <hoelzro> [Coke]: could you paste a link? I can't seem to load that ticket

[13:12] <gtodd> besides isn't there a rule about TimToady being right even if wrong?   therefore if sigils are a bad idea they are still good so ....

[13:12] <perlawhirl> i have no problem dropping sigils when writing python, but i can't stop typing 'my' :)

[13:12] <gtodd> heh

[13:13] <perlawhirl> i do it in powershell too

[13:14] <gtodd> anyway a good editor could make sigils disappear unless you hover a mouse for 10 seconds or whatever

[13:14] <gtodd> best of both worlds 

[13:15] <[Coke]> https://rt.perl.org/Ticket/Display.html?id=70297 , maybe I typod it

[13:15] <teatime> perlawhirl: I do not...

[13:15] <perlawhirl> gtodd: lol, keymap to toggle sigil visability. not for me, i'm in the "i like 'em" camp

[13:15] <teatime> (get that behavior from vim)

[13:16] <perlawhirl> teatime: i'll update vim perl and check again

[13:16] <gtodd> perlawhirl: in vim you could use texas variant maybe  ?  >> 

[13:16] <teatime> perlawhirl: presumably it's seeing it as a quote/begin string?

[13:16] <teatime> or comment...

[13:16] <perlawhirl> well, another workaround is add the trailing brackets, so lines()».trim instead of lines».trim

[13:16] <teatime> perlawhirl: I'm pretty sure I'm using the crappy bundled perl6 syntax files

[13:17] <perlawhirl> hmm, i thought vim-perl came with modified syntax files

[13:17] <gtodd> perlawhirl: sometimes when I try to open powershell scripts they open in a postscript viewer

[13:18] *** lizmat left
[13:18] <perlawhirl> righto... will remove vim-perl then and see what happens

[13:19] <arnsholt> A question for the native-speakers of English: When speaking of Biblical texts, is "the begats" a term that's actually used (or at least understandable)?

[13:19] *** ocbtec joined
[13:21] <teatime> um.. tthere might be people at HN who think smoe of the syntax is a Apr 1 joke

[13:21] <teatime> like the whatever operator

[13:21] <perlawhirl> teatime: well removing vim-perl fixed it

[13:21] <perlawhirl> some colors are slightly different too

[13:21] *** lizmat joined
[13:21] *** cdg left
[13:22] <teatime> arnsholt: understandable, yes I know exactly what is being referred to by that

[13:22] *** cdg joined
[13:22] <teatime> arnsholt: some people might not be familiar enough w/ the bible to recognize it though

[13:22] <perlawhirl> .d begats

[13:22] <yoleaux> Sorry, I couldn't find a definition for 'begats'.

[13:23] <perlpilot> teatime: really?  What is "the begats"?

[13:23] <perlawhirl> .ety begats

[13:23] <yoleaux> Sorry, I couldn't find the etymology of that.

[13:23] <teatime> perlawhirl: you could probably fix the syntax file for vim-perl 

[13:23] <perlawhirl> lousy yoleaux!!

[13:23] <teatime> perlawhirl: the default one sucks too, just in other ways

[13:23] <perlpilot> unless you mean "begets" and even then, it's not very nouny

[13:23] <perlawhirl> .d begat

[13:23] <yoleaux> perlawhirl: Sorry, that command (.d) crashed.

[13:23] <perlawhirl> hah!

[13:23] <perlawhirl> .ety begat

[13:23] <yoleaux> begat (v.): "archaic past tense of beget." — http://etymonline.com/index.php?term=begat

[13:23] <perlawhirl> .d begat

[13:23] <yoleaux> perlawhirl: Sorry, that command (.d) crashed.

[13:23] <teatime> perlawhirl: early in the old testament, there's a long, long string of X begat Y begat Z begat A begat B...

[13:24] <teatime> begat means parented

[13:24] <perlpilot> so "the begats" is referring specifically to that long string of A begat B begat C ?

[13:24] <teatime> I assume so.

[13:24] <perlawhirl> yes i'm aware of it's use in the bible

[13:24] <teatime> http://www.readbookonline.net/read/933/10945/

[13:25] <teatime> also https://www.biblegateway.com/passage/?search=1+Chronicles+1&version=WYC

[13:25] <perlawhirl> i think it's just to assert the lineage to... Abraham?

[13:25] <arnsholt> Basically

[13:25] <arnsholt> There's another one in one of the Gospels, tracing the lineage of Jesus

[13:25] <teatime> http://biblehub.com/commentaries/pnt/matthew/1.htm

[13:26] <perlawhirl> if someone joined now they might think they were in the wrong channel =D

[13:26] <teatime> lol

[13:26] <sjoshi> lol

[13:26] <moritz> man, they should've just drawn a freakin' graph

[13:27] *** cdg left
[13:27] <perlpilot> Have you accepted Perl 6 as your personal savior?

[13:27] <teatime> And lo, Abraham begat the following DAG:

[13:27] <tony-o> m: { sleep $_; .say }.(.2|.3|.1);

[13:27] <camelia> rakudo-moar ae43ba: OUTPUT«any(0.2, 0.3, 0.1)␤»

[13:27] <tony-o> does the output of that get serialized?

[13:28] <timotimo> it's not actually spreading out to multiple threads

[13:28] <lizmat> no, at the moment all elements of the junction are executed in turn

[13:28] <perlpilot> Since they only mention the "important" male-children, the DAG would be very linear.

[13:28] *** sortiz left
[13:29] <tony-o> ahh, this explains. thanks lizmat timotimo 

[13:30] <arnsholt> teatime: Right, so I'm not completely insane when using that term. Still, since both my advisors commented "what?" on it, I should probably add an explanatory footnote =)

[13:30] *** leont joined
[13:30] <teatime> arnsholt: is it not a common term among people who study the bible?

[13:30] <teatime> somehow, it seems like it would be.

[13:30] <timotimo> oh hey arnsholt!

[13:31] <perlpilot> arnsholt: What's the sentence where you used it?

[13:32] <arnsholt> perlpilot: "the latter text is also written in a highly repetitive style

[13:32] <arnsholt> with key phrases and constructions being very frequent, such as the begats and short sentences

[13:32] <arnsholt> introducing quotations."

[13:32] <teatime> hrm.

[13:32] <timotimo> it's basically written in a very antique variant of JSON

[13:32] <arnsholt> The latter text being the Latin Vulgata text (contrasting with Caesar's Bellum Gallicum)

[13:32] <perlpilot> I think had you mentioned the bible, it would have been clear

[13:33] <timotimo> they didn't have ASCII yet so it's all words instead of symbols

[13:33] <[Coke]> I wouldn't say that's an english question so much as a bible question.

[13:33] <teatime> arnsholt: doesn't exactly roll off the tongue, does it.

[13:33] <[Coke]> m: say 3 !=3; say 3 != 3;

[13:33] <camelia> rakudo-moar ae43ba: OUTPUT«Cannot modify an immutable Int␤  in block <unit> at /tmp/CqnfXDXKt6 line 1␤␤»

[13:34] <[Coke]> m: say 3 != 3; say 3 !=3;

[13:34] <camelia> rakudo-moar ae43ba: OUTPUT«False␤Cannot modify an immutable Int␤  in block <unit> at /tmp/V5KKtlflkY line 1␤␤»

[13:34] <teatime> arnsholt: 'such as' also indicates that the begats and short sentences are part of the later text, if they're not something like "like" would be better.

[13:34] <[Coke]> if that's OK (due to whitespace requirements), someone can close https://rt.perl.org/Ticket/Display.html?id=121108

[13:34] <timotimo> "Ha! Nice april fools, the best part was those operators.

[13:34] <timotimo> ^- best comment

[13:34] <arnsholt> Yeah, they're particular to the Bible text. Caesar isn't particularly interested in genealogy =)

[13:36] <[Coke]> Today is the day we reveal the original AF joke is now complete, and turn off the lights and go home?

[13:38] <[Coke]> .seen gabor

[13:38] <yoleaux> I haven't seen gabor around.

[13:38] <avalenn> m: my @max ; my @min ; for lines>>.split(" ")>>.chars -> @cur { @min = (|@min, |(Inf xx (@cur - @min))) Zmin (|@cur, |(Inf xx (@min - @cur)))  ; @max = (|@max, |(-Inf xx (@cur - @max)) Zmax (|@cur, |(-Inf xx (@max - @cur))))  ; say @cur } ; say @min.perl  ; say @max.perl

[13:38] <camelia> rakudo-moar ae43ba: OUTPUT«(4 4 2 8 6 7 4 2 5)␤(4 3 5 4 2 2 8 3 3 4 2 5 4 2 5)␤(5 1 7 4 5 2 4 4 6 2 5 2 7 3 3)␤(1 2 7 3 10 6 6 8 2 4 3 5 2 6)␤(0)␤(2 8 3 5 3 6 7 7 2 2 6 2 2 4)␤(2 5 3 1 2 2 4 2 2 3 3 7 1 4 4 5)␤(2 8 4 1 3 2 7 1 5 4 2 9 5)␤(6 2 4 2 5 4 2 3 2 5 2 2 10 6…»

[13:38] <moritz> .seen szabgab

[13:38] <yoleaux> I saw szabgab 19 Dec 2015 06:47Z in #perl6: <szabgab> thanks for the links

[13:38] <lizmat> .see gabzab

[13:39] <[Coke]> danke.

[13:39] <lizmat> .seen gabszab

[13:39] <yoleaux> I haven't seen gabszab around.

[13:39] <lizmat> .seen gabzsab

[13:39] <yoleaux> I haven't seen gabzsab around.

[13:39] <lizmat> hmmm....

[13:39] <[Coke]> .ask szabgab - Can you please double check https://rt.perl.org/Ticket/Display.html?id=123497 against a 2016 R*?

[13:39] <yoleaux> [Coke]: I'll pass your message to szabgab.

[13:39] <moritz> [Coke]: he's not much on IRC anymore; if you want an answer, best write him an email

[13:40] <avalenn> m: my @max ; my @min ; for lines>>.split(" ")>>.chars -> @cur { @min = (|@min, |(Inf xx (@cur - @min))) Zmin (|@cur, |(Inf xx (@min - @cur)))  ; @max = (|@max, |(-Inf xx (@cur - @max)) Zmax (|@cur, |(-Inf xx (@max - @cur))))  } ; say @min  ; say @max ;

[13:40] <camelia> rakudo-moar ae43ba: OUTPUT«[0 1 1 1 1 2 1 1 1 1 2 2 1 0 3 4 3]␤[6 11 8 8 10 10 8 8 10 11 8 9 10 6 6 8 3]␤»

[13:40] <moritz> avalenn: wow, what's that?

[13:41] <[Coke]> moritz: Not enough to compose an email, no. :)

[13:41] <avalenn> try to do max and min accross several lines

[13:41] <[Coke]> .ask nine is https://rt.perl.org/Ticket/Display.html?id=123276 done?

[13:41] <yoleaux> [Coke]: I'll pass your message to nine.

[13:42] <perlpilot> avalenn: don't we have a minmax routine/method/whatever?

[13:42] <avalenn> I don't know, I could be interested in one

[13:42] <perlpilot> I think we do

[13:42] <lizmat> m: say ^10 .minmax

[13:42] <camelia> rakudo-moar ae43ba: OUTPUT«(0 9)␤»

[13:43] <perlpilot> m: say (7,9,3,8).minmax;  # for some variation

[13:43] <camelia> rakudo-moar ae43ba: OUTPUT«3..9␤»

[13:43] <skids> Note Range.minmax and List.minmax are different.

[13:43] <avalenn> m: lines>>.split(" ")>>.chars.minmax

[13:43] <skids> jinx

[13:43] <camelia> rakudo-moar ae43ba: ( no output )

[13:44] <avalenn> m: lines>>.split(" ")>>.chars>>.minmax

[13:44] <camelia> rakudo-moar ae43ba: ( no output )

[13:44] <skids> need to say

[13:44] <avalenn> m: lines>>.split(" ")>>.chars.minmax.say

[13:44] <camelia> rakudo-moar ae43ba: OUTPUT«0..11␤»

[13:44] <avalenn> m: lines>>.split(" ")>>.chars>>.minmax.say

[13:44] <camelia> rakudo-moar ae43ba: OUTPUT«(2..8 2..8 1..7 1..10 0..0 2..8 1..7 1..9 2..10 0..0 1..7 1..8 1..10 1..10 2..11 0..0 1..7 2..8 1..6 0..11)␤»

[13:45] <perlawhirl> m: chars

[13:45] <camelia> rakudo-moar ae43ba: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Nzp_dcX_Lw␤Calling chars() will never work with proto signature ($)␤at /tmp/Nzp_dcX_Lw:1␤------> 3<BOL>7⏏5chars␤»

[13:45] <lizmat> m: chars("foo").say

[13:45] <camelia> rakudo-moar ae43ba: OUTPUT«3␤»

[13:45] <perlawhirl> m: lines».words».chars».minmax.say

[13:45] <camelia> rakudo-moar ae43ba: OUTPUT«(2..8 2..8 1..7 1..10 Inf..-Inf 2..8 1..7 1..9 2..10 Inf..-Inf 1..7 1..8 1..10 1..10 2..11 Inf..-Inf 1..7 2..8 1..6 2..11)␤»

[13:46] <perlpilot> heh

[13:46] <gregf_> m: lines

[13:46] <camelia> rakudo-moar ae43ba: ( no output )

[13:46] <perlpilot> I like that Inf..-Inf

[13:46] <perlawhirl> haha i dunno whats up with that

[13:46] <lizmat> m: .say for lines # gregf_ 

[13:46] <camelia> rakudo-moar ae43ba: OUTPUT«Céad slán ag sléibhte maorga Chontae Dhún na nGall␤Agus dhá chéad slán ag an Eireagal ard ina stua os cionn caor is coll;␤Nuair a ghluais mise thart le Loch Dhún Lúich’ go ciúin sa ghleann ina luí␤I mo dhiaidh bhí gleanntáin ghlas’ G…»

[13:46] <gregf_> m: lines.^name

[13:46] <camelia> rakudo-moar ae43ba: ( no output )

[13:46] <perlawhirl> i was just trying to replace avelenn's .split with .words

[13:46] <skids> m: (1,2,3,0)».minmax.say

[13:46] <camelia> rakudo-moar ae43ba: OUTPUT«(1..1 2..2 3..3 0..0)␤»

[13:47] <skids> weird, what's that .chars putting out.

[13:47] <avalenn> m: say ines>>.split(" ")>>.chars # skids

[13:47] <camelia> rakudo-moar ae43ba: OUTPUT«5===SORRY!5=== Error while compiling /tmp/GP_1gn85DJ␤Undeclared routine:␤    ines used at line 1. Did you mean 'lines'?␤␤»

[13:47] <perlawhirl> m: lines».words».chars

[13:47] <camelia> rakudo-moar ae43ba: ( no output )

[13:47] <perlawhirl> m: say lines».words».chars

[13:47] <camelia> rakudo-moar ae43ba: OUTPUT«((4 4 2 8 6 7 4 2 5) (4 3 5 4 2 2 8 3 3 4 2 5 4 2 5) (5 1 7 4 5 2 4 4 6 2 5 2 7 3 3) (1 2 7 3 10 6 6 8 2 4 3 5 2 6) () (2 8 3 5 3 6 7 7 2 2 6 2 2 4) (2 5 3 1 2 2 4 2 2 3 3 7 1 4 4 5) (2 8 4 1 3 2 7 1 5 4 2 9 5) (6 2 4 2 5 4 2 3 2 5 2 2 10 6 6 8) () (6 1 2 …»

[13:48] <perlawhirl> m: say lines».words».chars».minmax

[13:48] <camelia> rakudo-moar ae43ba: OUTPUT«(2..8 2..8 1..7 1..10 Inf..-Inf 2..8 1..7 1..9 2..10 Inf..-Inf 1..7 1..8 1..10 1..10 2..11 Inf..-Inf 1..7 2..8 1..6 2..11)␤»

[13:48] <perlawhirl> figure that out?

[13:49] <skids> Yay lols.

[13:49] *** domidumont left
[13:50] <skids> I'm off to go glue various small metal items to a door with a sign warning of strong magnetic fields inside.

[13:50] *** domidumont joined
[13:50] <lizmat> .oO( the power of Perl 6 ! )

[13:51] <perlawhirl> .words shoud do the same as .split(' ') asuuming single spaced words

[13:51] <avalenn> quite, the difference is on empty lines

[13:51] *** _4d47 joined
[13:51] <avalenn> m: say "".words

[13:51] <camelia> rakudo-moar ae43ba: OUTPUT«()␤»

[13:51] <avalenn> m: say "".split(" ")

[13:51] <camelia> rakudo-moar ae43ba: OUTPUT«()␤»

[13:52] <avalenn> say lines[4] 

[13:52] <avalenn> m: say lines[4] 

[13:52] <camelia> rakudo-moar ae43ba: OUTPUT«␤»

[13:52] <avalenn> m: say lines[4].words 

[13:52] <camelia> rakudo-moar ae43ba: OUTPUT«()␤»

[13:52] <avalenn> m: say lines[4].split(" ") 

[13:52] <camelia> rakudo-moar ae43ba: OUTPUT«()␤»

[13:53] *** domidumont left
[13:53] *** domidumont joined
[13:54] <[Coke]> https://rt.perl.org/Ticket/Display.html?id=127127 - Perl 6 advent site needs an archive widget in the theme.

[13:54] <perlawhirl> m: say lines[2].split(' ').elems

[13:54] <camelia> rakudo-moar ae43ba: OUTPUT«15␤»

[13:54] *** leont left
[13:54] <perlawhirl> m: say lines[2].words.elems

[13:54] <camelia> rakudo-moar ae43ba: OUTPUT«15␤»

[13:54] <timotimo> how many of you are interested in testing a rakudo-star tarball?

[13:54] * moritz is

[13:54] <avalenn> m: say lines[4].words.perl

[13:54] <camelia> rakudo-moar ae43ba: OUTPUT«().Seq␤»

[13:54] <avalenn> m: say lines[4].split(" ").perl

[13:54] <camelia> rakudo-moar ae43ba: OUTPUT«("",)␤»

[13:55] <moritz> m: say lines[4].perl

[13:55] <camelia> rakudo-moar ae43ba: OUTPUT«""␤»

[13:55] <lizmat> m: say lines[4]

[13:55] <camelia> rakudo-moar ae43ba: OUTPUT«␤»

[13:55] <moritz> m: say lines[3].perl

[13:55] <camelia> rakudo-moar ae43ba: OUTPUT«"I mo dhiaidh bhí gleanntáin ghlas’ Ghaoth Dobhair, is beag nár bhris mo chroí."␤»

[13:55] <timotimo> oh, look at that, that string is totally corrupted!

[13:55] <moritz> lol

[13:55] <[Coke]> timotimo: *thbbthp*

[13:57] <teatime> is that Klingon?

[13:57] *** sQuEE` is now known as sQuEE

[13:57] <timotimo> welsh?

[13:58] <avalenn> seems gaëlic or something similar from my untrained eye

[13:58] <timotimo> garlic?

[13:58] <timotimo> http://t.h8.lv/rakudo-star-2016.03.tar.gz

[13:58] <avalenn> https://en.wikipedia.org/wiki/Gaelic

[13:58] <[Coke]> m: DOC INIT { use barf }

[13:58] <camelia> rakudo-moar ae43ba: OUTPUT«===SORRY!===␤Could not find barf in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2/share/perl6␤    CompUnit::Repository::Absolu…»

[13:59] <teatime> taH pagh taHbe'

[13:59] *** lizmat left
[14:00] <timotimo> so it'd be nice if you'd all get that tarball, unpack, install, test :)

[14:00] *** sQuEE is now known as sQuEE`

[14:01] <timotimo> maybe then i'll go write an announcement and see what else there is to do for a release

[14:01] <timotimo> AFK for a bit

[14:02] *** sue left
[14:04] *** lizmat joined
[14:04] *** sue joined
[14:04] *** g4 left
[14:07] <moritz> timotimo++ # star RC

[14:08] <moritz> timotimo++ # server reachable by IPv6 :-)

[14:16] <avalenn> is there any "perldoc -f" equivalent for perl6 ?

[14:16] <moritz> .tell timotimo re star RC, I get this error during modules-install-m: http://perlpunks.de/paste/show/56fe8298.655e.1d5

[14:16] <yoleaux> moritz: I'll pass your message to timotimo.

[14:17] *** frederico joined
[14:17] <moritz> .tell timotimo this is on a boring Debian Jessie (stable) amd64

[14:17] <yoleaux> moritz: I'll pass your message to timotimo.

[14:17] *** cognominal joined
[14:18] <avalenn> teatime: http://www.gaelicmatters.com/irish-songs-lyrics.html#gleanntan

[14:18] *** g4 joined
[14:23] *** g4 left
[14:24] <tony-o> oh cool, i'm in the perl6 FAQ :-)

[14:24] <perlpilot> avalenn: there's a p6doc command you can install, but I think you'll have better luck with doc.perl6.org  

[14:30] *** abraxxa left
[14:30] *** abraxxa joined
[14:30] <timotimo> moritz: inconthievable!

[14:30] <yoleaux> 14:16Z <moritz> timotimo: re star RC, I get this error during modules-install-m: http://perlpunks.de/paste/show/56fe8298.655e.1d5

[14:30] <yoleaux> 14:17Z <moritz> timotimo: this is on a boring Debian Jessie (stable) amd64

[14:31] <tony-o> m: sub a (--> Rat:D) { Rat; }; a.say;

[14:31] <camelia> rakudo-moar ae43ba: OUTPUT«Type check failed for return value; expected Rat but got Rat␤  in block <unit> at /tmp/uWs7B6Wj2g line 1␤␤»

[14:31] <timotimo> moritz: on my end, that line reads "mkpath 't/dir2';"

[14:31] <tony-o> i like that error message

[14:34] *** jferrero joined
[14:35] <perlawhirl> besides (1,2).Seq, is there any other syntax do define a Seq

[14:35] *** g4 joined
[14:36] <rjbs> > $x = (1, 2 ... *) gets a seq FWIF.

[14:36] <rjbs> FWIW, even.

[14:37] <rjbs> $x = (1 ... 2) also

[14:38] <gregf_> m: say (1 ... 3).^name

[14:38] <camelia> rakudo-moar ae43ba: OUTPUT«Seq␤»

[14:39] *** dvinciguerra__ left
[14:40] *** pmurias joined
[14:40] *** sue left
[14:40] <jnthn> perlawhirl: gather/take blocks also return a Seq

[14:40] <jnthn> In fact, *most* things that produce values you can iterate return a Seq :)

[14:42] *** lizmat left
[14:42] <RabidGravy> If I create a new type on the fly using the MOP does it stick around for ever or just until the final place it is used go out of scope?

[14:44] <RabidGravy> or to put it another way if I create a bunch of dummy classes in a long running program am I goiing to run into trouble eventually

[14:45] <perlawhirl> jnthn: that's my point i guess. i'm working on a PR (and tests!) to add a :kv adverb to 'first'. it's not in S32 - is in the docs - but i think there's a reasonable user expectation that first would have the same adverbs as grep

[14:45] <jnthn> perlawhirl: yes, me too

[14:45] <perlawhirl> so... grep :kv returns a Seq, so with first, is it enough that i just return (index, value).Seq or is there more to returning a Seq of definite values

[14:46] <jnthn> RabidGravy: Types can be GC'd

[14:46] <jnthn> RabidGravy: So long as they're not referenced anywhere

[14:46] <jnthn> Meta-objects really are just objects

[14:48] <pmurias> does publishing nqp-js-on-js on npm seems like a good idea (to mostly see how what is needed for that it's not really ready for "serious" use)

[14:48] <yoleaux> 31 Mar 2016 21:02Z <[Coke]> pmurias: I can do it when not at work, but I can also do it at work if I use certain URLs.

[14:48] <RabidGravy> cool, I'm just doing an experiment with a web proxy thing for Lumberjack and to make it really simple I'm serialising the class name and its log-level and when it is receoved on the other end if the web part doesn't know about the class it creates an empty one and applies the LOgger role to it

[14:50] <RabidGravy> the lifetime of which is only going to be as long as the dispatchers get to handle it

[14:51] <moritz> timotimo: that's probably from modules/panda/ext/Shell__Command/t/02-shell-command.t

[14:51] <timotimo> oh!

[14:51] <moritz> timotimo: and not from modules/shell-command/t/02-shell-command.t

[14:52] <moritz> ok which('perl6').IO.x, 'which - perl6 is found';

[14:52] <MadcapJake> This is pretty great: https://github.com/crystal-lang/crystal/issues/2394

[14:52] <moritz> timotimo: of note: I have no perl6 in my path

[14:52] <timotimo> oh, haha

[14:52] <timotimo> well, that's clever!

[14:52] <timotimo> that must be "we'll just search for something we totally know must be in the path!"

[14:54] <timotimo> *sigh*

[14:54] <timotimo> i'm not sure how to deal with this in a sensible way

[14:55] * moritz neither

[14:55] <moritz> well, a sensible first step would be to open an issue

[14:56] <moritz> confront the maintainer. TADZIK!!!!

[14:56] <timotimo> if we bring the submodule up to latest, we'll also have to add another ext, File::Which

[14:56] <timotimo> that one may have better tests

[14:56] *** cuthere joined
[14:56] <RabidGravy> put the path of $*EXECUTABLE in %*ENV<PATH> ?

[14:56] <moritz> RabidGravy: might be an option as well

[14:56] *** sue joined
[14:56] * MadcapJake is surprised that Perl 7 wasn't announced today ;)

[14:57] *** robertle left
[15:00] *** andreoss joined
[15:01] <perlawhirl> so let me ask... if i'm submitting a PR for previously untested functionality... where do my tests go? do i submit a PR to roast as well and reference my rakudo PR?

[15:01] <jnthn> perlawhirl: Yes, or just ask for a commit bit to roast and push them afterwards

[15:02] <timotimo> onto the master branch, aye

[15:02] <andreoss> was p6 feed operator borrowed from somewhere? It doesn't seem to be sematically close to what haskell pipe does.

[15:03] <jnthn> andreoss: ASCII art, perhaps :P

[15:05] *** jolts joined
[15:05] *** jolts left
[15:06] *** jolts joined
[15:07] <geekosaur> feed operator is more or less inspired by unix shell, no?

[15:08] *** abraxxa left
[15:10] <perlpilot> Maybe it says somewhere around S06:1361

[15:10] <tadzik> what what :o

[15:11] <geekosaur> hm., are we talking about the syntax or the semantics?

[15:18] <timotimo> yo tadzik 

[15:18] <timotimo> Shell::Command - only the version bundled with panda - doesn't pass its tests when there's no "perl6" in the PATH

[15:19] <timotimo> which is usually the case when building rakudo-star

[15:19] <timotimo> could you bring it up to date with the newest Shell::Command, which'd also mean to pull in File::Which?

[15:22] <tadzik> I think so, yes

[15:22] <timotimo> cool

[15:22] <timotimo> i'm in the middle of making a rakudo star release

[15:22] <andreoss> perlpilot: it doesn't say where it was borrowed from, but i assume shell

[15:23] <tadzik> I really have no idea how to work with submodules ;D

[15:24] <andreoss> though pipe in shell can have any command on either of sides 

[15:24] <geekosaur> sure. shell is untyped :)

[15:24] <timotimo> tadzik: well, that's why you use subtree, right?

[15:24] <geekosaur> | won't know that some command produces no output or takes no input, for example, 

[15:25] <andreoss> it would feel much more like shells pipe, if ==> was just a another syntax for method call

[15:25] <andreoss> assuming method call won't perform a mutation on object 

[15:26] <tadzik> oh, I do indeed

[15:26] <tadzik> should be good now

[15:26] <tadzik> moritz++ for update_subtree.pl

[15:26] *** ptolemarch joined
[15:26] <andreoss> m: (1..10) ==> reduce * + * ==> elems ==> say;

[15:26] <camelia> rakudo-moar ae43ba: OUTPUT«5===SORRY!5=== Error while compiling /tmp/2j7sv5dmM4␤Preceding context expects a term, but found infix ==> instead␤at /tmp/2j7sv5dmM4:1␤------> 3(1..10) ==> reduce * + * ==> elems ==>7⏏5 say;␤»

[15:26] *** g4 left
[15:27] <andreoss> m: (1..10).reduce( * + * ).say;

[15:27] <camelia> rakudo-moar ae43ba: OUTPUT«55␤»

[15:28] <andreoss> sadly there's no alernative syntax for ., method chaining could be more readble 

[15:29] <psch> m: sub ssay(|c) { say c }; (1..10) ==> reduce * + * ==> ssay;

[15:29] <camelia> rakudo-moar ae43ba: OUTPUT«\(55)␤»

[15:29] <psch> m: say; # this error break feeds there, apparently

[15:29] <camelia> rakudo-moar ae43ba: OUTPUT«5===SORRY!5=== Error while compiling /tmp/AF7ajdzoTC␤Unsupported use of bare "say"; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument, or use &say to refer to the function as a noun␤at /tmp/AF7ajdzoTC:1␤------> 3…»

[15:29] <andreoss> psch: because ==> does not call it as a method

[15:30] <psch> andreoss: no, because the grammar parses every base "say" as wrong

[15:30] <psch> *bare

[15:30] <psch> as in, when not in a dottyop or without arguments

[15:30] <andreoss> m: (1..10) ==> reduce * + * ==> print;

[15:30] <camelia> rakudo-moar ae43ba: OUTPUT«5===SORRY!5=== Error while compiling /tmp/V9NeLs8IBc␤Unsupported use of bare "print"; in Perl 6 please use .print if you meant $_, or use an explicit invocant or argument, or use &print to refer to the function as a noun␤at /tmp/V9NeLs8IBc:1␤----…»

[15:31] <psch> same error for print, yes :)

[15:32] <jnthn> m: (1..10) ==> reduce * + * ==> say();

[15:32] <camelia> rakudo-moar ae43ba: OUTPUT«55␤»

[15:32] <psch> that i didn't try because i wasn't sure of the feed semantics... :)

[15:32] <psch> jnthn++

[15:34] <andreoss> m: role Foo { method say-it { self.say } } ; ( ( 1..10 ==> reduce( * + * ) ) does Foo) ==> say-it()

[15:34] <camelia> rakudo-moar ae43ba: OUTPUT«5===SORRY!5=== Error while compiling /tmp/yvJNRMs4dG␤Undeclared routine:␤    say-it used at line 1␤␤»

[15:34] *** domidumont left
[15:35] <perlawhirl> ok... my first rakudo PR submitted... which also happens to be for 'first'

[15:36] <perlawhirl> it's 2:30 in the am here... i think bedtime

[15:37] <jnthn> andreoss: It does sub calls, not method calls

[15:39] <andreoss> jnthn: why so? many subs indented for ==> have a coresponding method, e.g map, grep

[15:40] <andreoss> I mean ==> feels like chainging method calls with this subs, why doesn't it call methods in a first place?

[15:40] <jnthn> andreoss: I don't know, I didn't design it. :-)

[15:41] <jnthn> andreoss: But if you want to chain method calls, then that's already perfectly easy

[15:41] <jnthn> It'd be a bit odd to introduce a more verbose syntax just for that. :)

[15:41] *** dvinciguerra joined
[15:42] <perlawhirl> method calls already chain left the right... whereas chained subs kinda read right to left

[15:42] <jnthn> Right

[15:42] <jnthn> :)

[15:43] *** zakharyas left
[15:44] <psch> way i see it, ==> is an alternative to .&sub

[15:44] <psch> plus choice of direction, seeing as <== is around too and means the same afair

[15:45] *** sue left
[15:45] <psch> it's what this one HN commenter called "more than one way to make it look"

[15:45] *** domidumont joined
[15:45] <jnthn> m: multi sub cross () {}

[15:45] <camelia> rakudo-moar ae43ba: OUTPUT«(signal SEGV)»

[15:46] *** sjoshi left
[15:46] <[Coke]> BOOM

[15:46] <[Coke]> is there a ticket for that?

[15:46] <jnthn> [Coke]: yes, that's why I was trying it out

[15:46] <[Coke]> (please add [SEGV] to titles for segfaulting tickets)

[15:46] <jnthn> While my local Rakudo rebuilt after fixing something else :)

[15:46] *** sue joined
[15:47] <_4d47> psch: what is .&sub ? i've seen it recently, still confused by it

[15:48] <ugexe> foo(1, 2, 3) is the same as 1.&foo(2,3)

[15:48] *** perlawhirl left
[15:48] * jnthn alrady has 2 SEGV fixes locally, and is thinking he might hunt this one down for a third :)

[15:49] <RabidGravy> jnthn++

[15:51] *** khw joined
[15:52] <[Coke]> jnthn: nice. Thanks!

[15:53] <_4d47> ok ugexe like just a shorcut, cool thx

[15:53] <jnthn> m: say &cross.derive_dispatcher

[15:53] <camelia> rakudo-moar ae43ba: OUTPUT«(signal SEGV)»

[15:53] <[Coke]> Someone can go through and retry the other SEGVs after to make sure they weren't dupes. :)

[15:53] <jnthn> Golfs to that heisensegv

[15:53] <jnthn> If anyone wants to check something: please try https://rt.perl.org/Ticket/Display.html?id=126956

[15:53] <_4d47> makes me think of https://github.com/tj/luna#method-syntactic-sugar

[15:53] <jnthn> It doesn't leak at all for me

[15:56] *** telex left
[15:57] * [Coke] fires up a fresh build of rakudo to test

[15:58] *** telex joined
[15:58] *** dakkar left
[15:59] <ugexe> _4d47: its handy for using with hypers `(1..10)>>.&sin` or whatevers  `(1..10).map(*.&sin)`

[16:01] <[Coke]> jnthn: it's leaking here.

[16:01] <[Coke]> 100% CPU, already up to 22% of my 16G box.

[16:02] <[Coke]> OS X

[16:02] <Woodi> same here. how it do this ?? :)

[16:03] *** cur8or joined
[16:04] <[Coke]> jnthn: ... it does eventually level off at about 18% of 16G

[16:07] <[Coke]> ... 10.5 %

[16:08] <[Coke]> er, sorry, 13%. but it does seem to be freeing some up now, anyway.

[16:08] <jnthn> [Coke]: Odd, here on Windows its flat at 106MB

[16:09] <jnthn> Woodi: OSX or Linux?

[16:09] <timotimo> it grows comfortably to 5gb on my box

[16:09] <Woodi> Linux, 32bit

[16:09] <jnthn> OK, good

[16:10] <timotimo> what happens when we sink a Supply like that?

[16:10] <jnthn> (Good it's reproducable on Linux)

[16:10] <jnthn> timotimo: Well, it fires off the events, which go nowhere :)

[16:10] <andreoss> jnthn: you meant something else that .? 

[16:10] <timotimo> that could be thrown owt ;)

[16:11] <andreoss> *than

[16:12] <jnthn> andreoss: No, I meant . is already a perfectly fine way to chain method calls

[16:12] <jnthn> Especially since you can spread them over lines now

[16:13] <timotimo> yeah

[16:15] <Woodi> so, working like requested ? Supply accumulate forever ?

[16:16] <jnthn> Woodi: No, we don't store the messages anywehre

[16:17] <jnthn> The fact it doesn't leak on Windows makes it highly likely it's something platform specific going on and probably fairly low level

[16:20] <timotimo> want me to pull a heap snapshot and take a look?

[16:20] <jnthn> The third SEGV turns out to be a bit more interesting to hunt down than the previous two, and it's time to think about cooking dinner...I'll bbiab

[16:20] <jnthn> timotimo: You can but I suspect it'll be C-level leaking

[16:20] <jnthn> timotimo: Because once we're in managed memory space, why'd it behave any differently across platforms? :)

[16:21] <jnthn> So I'd valgrind it but with a sleep 5; or something

[16:21] <timotimo> well, ... fair enough

[16:21] <jnthn> As a starting point

[16:21] <jnthn> timotimo++

[16:22] <jnthn> I'll probably be back to write tests for the two things I did fix, once the cooking gets to the ignore-it-a-while step :)

[16:22] <jnthn> &

[16:22] *** sue_ joined
[16:22] *** sue left
[16:23] *** sue_ is now known as sue

[16:23] <Woodi> btw. new OpenBSD release as one of highlights have "rewrite of less". so, it can be considered exploitable :)

[16:23] <RabidGravy> so all the while Supply was a role I never cared about its roley-ness, now it isn't anymore I want it to be a role again :-\

[16:24] <RabidGravy> oh well

[16:24] <Woodi> ...but i realy didn't consult code. just probability :)

[16:28] <timotimo> jnthn: seems like we're just not reaching a safe point, so our list for what to free at a safe point grows into the million-digits

[16:28] <timotimo> ==10310== 38,592,512 bytes in 18,844 blocks are still reachable in loss record 1,937 of 1,938

[16:28] <timotimo> ==10310==    by 0x4FB6488: MVM_fixed_size_free_at_safepoint (fixedsizealloc.c:249)

[16:28] <timotimo> ==10310== 57,885,696 bytes in 18,843 blocks are still reachable in loss record 1,938 of 1,938

[16:28] <timotimo> ==10310==    by 0x4FA26E8: allocate_frame (frame.c:270)

[16:28] <timotimo> lots of stuff omitted, obviously, but i think that's why we do them leaks

[16:29] *** Relsak joined
[16:30] <timotimo> https://gist.github.com/timo/fffc13ab92d420074372b7fe47dc9a14

[16:32] *** Wlattin joined
[16:32] *** cdg joined
[16:33] <Wlattin> Suggestions for detailed help on MAIN???

[16:33] <timotimo> you can add Pod to your candidates as well as the parameters

[16:33] <moritz> man, git submodule has "init", "update" and "sync". I can never rememer which one I need

[16:33] <timotimo> and you can generate your own usage

[16:33] <timotimo> update --init :)

[16:34] <moritz> timotimo: was it intential that you haven't done that yet for star?

[16:34] <timotimo> i have all the changes on my machine

[16:34] <moritz> timotimo: erm, I meant the git submodule foearch pull thing

[16:34] <timotimo> just not pushed

[16:35] <moritz> oh, just not pushed

[16:35] <moritz> timotimo: push, push, push

[16:35] <timotimo> can do

[16:35] <timotimo> i just wanted to look first if things will be fine

[16:35] <moritz> well, if you push now, others can chime in :-)

[16:36] <moritz> in particular, I wanted to see if tadzik++'s panda commit fixed star for me

[16:36] *** sue left
[16:36] <dalek> star: 93f7022 | timotimo++ | / (10 files):

[16:36] <dalek> star: bring modules up to date, add File::Which

[16:36] <dalek> star: review: https://github.com/rakudo/star/commit/93f7022650

[16:36] <dalek> star: b8ba246 | timotimo++ | tools/star/Makefile:

[16:36] <dalek> star: bump versions to 2016.03

[16:36] <dalek> star: review: https://github.com/rakudo/star/commit/b8ba2468c1

[16:36] <dalek> star: 26acc3f | timotimo++ | / (2 files):

[16:36] <dalek> star: remove ufo, as rakudo now manages precompilation itself.

[16:36] <dalek> star: review: https://github.com/rakudo/star/commit/26acc3f377

[16:36] <dalek> star: f6dc6cf | timotimo++ | / (3 files):

[16:36] <dalek> star: Change in the readme and more modules.

[16:36] <dalek> star: review: https://github.com/rakudo/star/commit/f6dc6cfe8f

[16:37] *** geekosaur left
[16:37] *** sue joined
[16:37] *** geekosaur joined
[16:42] *** Wlattin left
[16:43] <Woodi> adx

[16:47] <stmuk_> I did wonder if balidor should be removed from star since there are competing frameworks now

[16:47] <gtodd> m: my %hash; for ( "abcdefabcgbacbdebdbbcaebfebfebfeb".comb.rotor(5 => -4) ) -> $a  { %hash{$a}++ } ; .say for %hash.sort(-*.value ).[^5] 

[16:47] <camelia> rakudo-moar ae43ba: OUTPUT«e b f e b => 3␤b f e b f => 2␤f e b f e => 2␤e b d b b => 1␤f a b c g => 1␤»

[16:48] <stmuk_> Bailador even

[16:49] <tadzik> as a Bailador author and maintainer, +1

[16:50] <tadzik> it doesn't feel "core enough"

[16:50] *** pmurias left
[16:50] <tadzik> I agree that it may have used to be some of the "here's something useful you can do with perl 6 even today!", but it doesn't seem particularly fitting these days

[16:50] <ufobat> what other frameworks are actually there?

[16:51] <[Coke]> Prancer is under development, IIRC.

[16:51] <kmwallio> tadzik: I was actually really confused when I went to install Bailador and got an error, it took me a while to read the error and see it was already installed

[16:51] <tadzik> hahah

[16:51] <tadzik> that's panda being LTA though

[16:51] *** pmurias joined
[16:51] <kmwallio> LTA?

[16:52] <ufobat> and Web::App::Ballet

[16:53] <tadzik> S99:LTA

[16:53] <tadzik> ...does this work?

[16:53] <tadzik> kmwallio: https://design.perl6.org/S99.html#LTA

[16:54] <kmwallio> ...

[16:55] <tadzik> :)

[17:01] <RabidGravy> yeah, it probably wants to catch the exception and emit something a bit more user friendly

[17:01] <gregf_> m: print (1...5).reduce: -> $sum,$v { $v % 2 == 0 ?? $sum + $v !! $sum }

[17:01] <camelia> rakudo-moar ae43ba: OUTPUT«7»

[17:02] <gregf_> ^^ i was expecting the result to be 6 :|

[17:02] <timotimo> buh, is synopsebot offline again?

[17:03] <RabidGravy> Boo! I go to actually make something using WebSocket and it's failing its tests again :(

[17:03] <RabidGravy> assuming nothing changed in the module since this morning I can only assume it's a change in rakudo

[17:04] *** pmurias left
[17:04] <skids> m: print (0...5).reduce: -> $sum,$v { $v % 2 == 0 ?? $sum + $v !! $sum }

[17:04] <camelia> rakudo-moar ae43ba: OUTPUT«6»

[17:04] <skids> reduce has to start somewhere.

[17:05] <gregf_> aha

[17:06] <gregf_> skids: cheers

[17:07] *** Relsak left
[17:13] <dalek> star: 63da543 | (Steve Mynott)++ | modules/MODULES.txt:

[17:13] <dalek> star: remove Bailador

[17:13] <dalek> star: review: https://github.com/rakudo/star/commit/63da543569

[17:14] *** cur8or left
[17:14] *** prammer joined
[17:15] *** Xliff_ZZZzzzzz is now known as Xliff

[17:16] <Xliff> Hello #perl6.

[17:16] <timotimo> i'm not the only one who works on this release \o/

[17:16] <Xliff> http://tpm2016.zoffix.com/#/61

[17:16] <Xliff> ^ In that second example, am I the only one that can't see the operator?

[17:16] <timotimo> i can see it

[17:17] <tadzik> hm. I found https://github.com/tadzik/perl6-Acme-Meow/blob/master/lib/Acme/Meow.pm#L65 in my code, and now I'm wondering what's the backstory...

[17:18] <timotimo> that's fantastic :D

[17:18] <timotimo> they told me i could never teach a carrot to fly!

[17:18] <jnthn> tadzik: I...really can't remember :D

[17:18] <stmuk_> timotimo: oh we probably have to sync with https://github.com/tadzik/Task-Star

[17:19] <timotimo> oh

[17:19] <timotimo> thta's a point, yeah

[17:19] <Xliff> timotimo, say <foo bar> ⊖ <bar meow>;

[17:19] <Xliff> Oh! I can't see it in my bloody browser!

[17:20] <Xliff> That's so weird.

[17:20] <timotimo> maybe he used Sans sans for that

[17:21] <jnthn> Urgh

[17:21] *** Relsak joined
[17:21] <tadzik> stmuk: oh, indeed

[17:21] <tadzik> jack_rabbit (IRC): 

[17:21] <tadzik> argh, sorry

[17:21] <jnthn> We still have that hang on Windows in parallel spectest around S10/S11

[17:21] <tadzik> jnthn: I assume something with dashes in pod because of some parsing... stuff? :)

[17:22] <jnthn> Maybe...

[17:23] *** buharin joined
[17:25] <dalek> star: b2cbb4e | (Steve Mynott)++ | / (2 files):

[17:25] <dalek> star: remove Bailador directory

[17:25] <dalek> star: review: https://github.com/rakudo/star/commit/b2cbb4e7d7

[17:25] <stmuk_> I'm also tempted to add Grammar::Debugger to star

[17:26] <stmuk_> oh its in

[17:26] <timotimo> yeah. star also has the debugger commandline, but task::star doesn't

[17:27] <tadzik> //o\

[17:27] <tadzik> one should be generated from the other

[17:27] <Xliff> http://tpm2016.zoffix.com/ <- REALLY GOOD presentation? 

[17:27] <Xliff> And now I am off for glasses.

[17:27] *** Xliff is now known as Xliff_OFF

[17:31] *** sue left
[17:32] * RabidGravy fixes the tests of WebSocket for a third time

[17:33] *** espadrine left
[17:33] <jnthn> RabidGravy: Is it breaking because of some Rakudo regression, or?

[17:33] *** _nadim joined
[17:34] <RabidGravy> no, I think it may be failing now because it has sped up :)

[17:35] *** wamba left
[17:36] <RabidGravy> there was a potential race in the way the tests were done in that they were in callbacks in the websocket server and client, it was fine before, now the tests are passing, it's just the numbers are duplicated, out of order or just weird

[17:37] <RabidGravy> sticking the results in an array and doing  for @tests -> $test { ok $test<result>, $test<text> } is much more reliable

[17:41] <jnthn> ah, ok :)

[17:42] <jnthn> Damn us making things faster :P

[17:45] <jnthn> dinner, rest, etc. &

[17:47] <ZoffixWin> Xliff_OFF, those are just my slides. You can get the recording of the actual presentation and the answers to some of the questions I didn't answer during it in this blog post: http://blogs.perl.org/users/zoffix_znet/2016/03/wow-perl-6-talk-slides-recording-and-answers-to-questions.html

[17:48] <ZoffixWin> Xliff_OFF, as for seeing operators. You likely just have a poor font in your browser that does not have that character available in it.

[17:52] <TimToady> m: sub summer ($sum,$v) { $v %% 2 ?? $sum + $v !! $sum }; say [[&summer]] 0..5

[17:52] <camelia> rakudo-moar a87fb4: OUTPUT«6␤»

[17:55] <dalek> ecosystem: d7045f4 | tadzik++ | META.list:

[17:55] <dalek> ecosystem: Add Geo::Coder::OpenCage

[17:55] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/d7045f471f

[17:55] <tadzik> so, in this module I wrote a fairly idiomatic (imho) Pod

[17:55] * masak .oO( iiiin &summer... )

[17:56] <RabidGravy> POD-TASTIC!

[17:56] <tadzik> unfortunately, it renders like like shit, both To::Text and To::HTML

[17:56] <masak> how utterly thankless of it

[17:56] <tadzik> and I wonder if that's renderers fault, or am I just using #| docs beyond what they were designed to be

[17:57] <tadzik> and if the latter, could it maybe be better

[17:57] <RabidGravy> I stopped using #| because of how bad everything looked

[17:57] <tadzik> right. Who can we blame?

[17:57] <tadzik> I'll look at the speculation

[17:58] <tadzik> long story short: I think whatever is in #|'s should be respected exactly as if it was inside a =begin pod/=end pod block

[17:58] <tadzik> but should also give you the method/sub/whatever signature for free

[17:59] <tadzik> yeah, they're speculated to be simple text

[17:59] <tadzik> but both mine and RabidGravy's experience shows that people expect more of it

[18:00] <RabidGravy> tadzik, while I remember and you're here - would you be up for a patch to JSON::Unmarshal whereby if the top level object is a [ ] then it actually tries to return an array of the objects?

[18:01] <RabidGravy> right now it just doesn't do anything and keeps quiet about it

[18:03] <tadzik> RabidGravy: hmm, the later is clearly suboptimal

[18:03] <tadzik> but I think I'd rather have it react to Object[] properly

[18:03] <tadzik> if possible

[18:03] *** _nadim left
[18:03] <tadzik> as in: unmarshal to an array if the user expects a typed array

[18:04] <tadzik> if you want an object, you should not get an array in return

[18:06] <timotimo> "Texas Since Remarks" ?!?

[18:07] <tadzik> wat

[18:07] *** spanner joined
[18:09] <timotimo> http://docs.perl6.org/language/unicode_texas  -  see the table

[18:11] * geekosaur thinsk that was 3 column headers at one point?

[18:11] *** Relsak left
[18:11] <RabidGravy> tadzik, ah yes of course, it doesn't actually need "fixing" as if you have data of "[ { .. }, { ... } ]" and tell it Array[Object] then it will DTRT

[18:12] <ptolemarch> What is "Texas" about those? "Bigger [and better]"?

[18:12] <geekosaur> texas form, date added, remarks. but nothing has a date and the long form and remarks are run together

[18:13] <timotimo> ptolemarch: only bigger, otherwise equivalent

[18:13] <tadzik> ah, right

[18:14] * ptolemarch nods

[18:15] <TimToady> hmm, it doesn't say you can use Lo for alphabetics

[18:16] <tadzik> then I'd just take care of the "silently does nothing" issue :)

[18:16] <timotimo> should we point out Slang::Roman in that page?

[18:17] <TimToady> m: say '山'.uniprop

[18:17] <camelia> rakudo-moar a87fb4: OUTPUT«Lo␤»

[18:18] <TimToady> m: my \山 = 'mountain'; say 山

[18:18] <camelia> rakudo-moar a87fb4: OUTPUT«mountain␤»

[18:19] *** spanner left
[18:19] <RabidGravy> tadzik, yaw.  Also I have to "fix" JSON::Infer to generate something "constant Foo = (Array[Bar] but JSON::Class); to deals with that

[18:20] *** spanner joined
[18:21] *** roguelazer left
[18:22] *** roguelazer joined
[18:32] <RabidGravy> tadzik, yeah just tested with the JSON that gave rise to the query in the first place and it *just* works, which is fabulous

[18:34] <tadzik> :)

[18:38] <moritz> why was Bailador removed from star?

[18:39] <tadzik> I think both people who participated in that particular discussion agreed

[18:39] <tadzik> one of the points being "it has competition now, why should it be the one shipped with Star?"

[18:39] <tadzik> perhaps some more detailed discussion is required

[18:39] <moritz> panda has competition too :-)

[18:40] <tadzik> correct :0

[18:40] <tadzik> :)

[18:40] <tadzik> I also wonder why LWP::Simple is there rather than HTTP::UserAgent

[18:40] <moritz> first to market

[18:40] <timotimo> aye

[18:43] *** Possum joined
[18:44] <tadzik> so now the question is: is it also best to market :)

[18:45] <timotimo> probably not :)

[18:45] <ufobat> what is the "nom" branch, currently?

[18:46] <ufobat> or why is this the default branch, if you dont specify a perl6 version for travis-ci

[18:47] <masak> ufobat: only historical reasons and inertia.

[18:47] <skids> It's the default one that people PR/push to.  Eventually supposed to get something more like "master" IIRC.

[18:47] <masak> ufobat: the "n" in "nom" used to stand for "new", long ago. it replaced something that everyone's forgotten now.

[18:47] *** labster joined
[18:48] <RabidGravy> well, if someone comes along and says "why can't I get/post binary/gzipped data" then you can point them at HTTP::UserAgent

[18:48] <timotimo> thank god the thing it replaced isn't remembered any more :)

[18:48] <diakopter> or the several things prior to that

[18:48] *** photog13 joined
[18:48] <ufobat> masak, yeah that's what i read from articles from 2011. so makes this sense for travis-ci?

[18:49] <ufobat> i am asking because on travis my perl6 with - latest is not working :/

[18:49] <skids> ufobat: if your objective is to test against the bleeding edge, yes.

[18:49] <ufobat> ah! so nom is still bleeding edge :) 

[18:50] <timotimo> yeah

[18:50] *** photog13 left
[18:50] <skids> Well, not so much as experimental side-branches.

[18:50] <skids> But it's where those get pushed when they are good enough.

[18:51] <ufobat> good to know, thanks :)

[18:52] <ufobat> and maybe someone has got an idea what i was doing wrong with travis-ci http://pastebin.com/5Qvzm0Pj

[18:54] <timotimo> why don't you just link to the travis log site? :)

[18:54] <timotimo> oh, someone didn't update panda properly

[18:55] <skids> (for those that don't like scrolling, panda build step failed due to Shell::Command step failing due to not finding File::Which)

[18:56] <timotimo> yeah

[18:56] <timotimo> tadzik: didn't i tell you you'll have to include File::Which?

[18:56] <timotimo> now how do we do that ...

[18:56] <tadzik> oh gawd

[18:56] <tadzik> that's correct

[18:58] <ufobat> sorry, didnt know what the travis log seite is public to all.

[18:59] * timotimo tries

[18:59] <timotimo> tadzik: want me to PR?

[18:59] <tadzik> yes please :)

[19:00] *** azawawi joined
[19:00] <azawawi> hi

[19:00] <yoleaux> 31 Mar 2016 09:03Z <RabidGravy> azawawi: RARRRR!

[19:00] * azawawi ducks

[19:01] <timotimo> yo azawawi 

[19:01] <azawawi> timotimo: i noticed File::Which is getting a lot of attention lately... saw the travis logs

[19:01] <timotimo> hm?

[19:02] <timotimo> the travis logs of File::Which¿

[19:02] <timotimo> tadzik: i'm not sure if i was supposed to squash the subtree commit history into a single commit. i can do that, though

[19:02] <tadzik> hmm, I usually don't

[19:02] <tadzik> since that's what update-subtree does :)

[19:02] <timotimo> you usually don't what?

[19:03] <azawawi> timotimo: https://github.com/tadzik/Shell-Command/blob/master/t/02-shell-command.t#L45  # the start of the problem on win32

[19:03] <tadzik> squash

[19:03] <timotimo> so i shouldn't squash either?

[19:03] *** labster left
[19:03] <timotimo> azawawi: the problem is when we're just installing rakudo-star and perl6 isn't in $PATH yet

[19:03] <azawawi> timotimo: i know

[19:04] <timotimo> oh, you linked to S:C

[19:04] <azawawi> my recommendation deprecate which in Shell::Command, recommend File::Which, drop File::Which from Shell::Command

[19:04] <RabidGravy> if an object already has the role applied does "but" not do anything or do the copying part but skip the role applying part, or indeed neither

[19:05] <azawawi> and on win32, fail that api on purpose since it is not meant to work on win32

[19:05] <azawawi> nor Mac OS X

[19:05] <timotimo> S:C already depends on F:W

[19:06] <timotimo> i can kind of see why people would think a release is strenuous

[19:06] <azawawi> only for the which command which was added in https://github.com/tadzik/Shell-Command/commit/e757695b428d73d4c0fd3e048a1f78924fc23802

[19:07] <azawawi> tadzik: what do you think?

[19:07] <timotimo> well, yeah

[19:07] <azawawi> re "deprecate which in Shell::Command, recommend File::Which, drop File::Which from Shell::Command"

[19:07] <timotimo> oh, drop F:W from S:C?

[19:07] <tadzik> hm

[19:07] <azawawi> yup

[19:08] <azawawi> which is not portable

[19:08] <azawawi> in S:C

[19:08] <azawawi> want me to prepare a PR?

[19:08] *** sue joined
[19:09] <tadzik> I don't actually have a clear philosophy of what should be included in S::C, but I know I don't want it to end up being an aggregator of modules that implement stuff

[19:09] <tadzik> since which() proved to be tricky enough, I think I agree

[19:09] <tadzik> (to deprecate it)

[19:11] <azawawi> the funny thing is https://metacpan.org/source/FLORA/Shell-Command-0.06/lib/Shell/Command.pm is exactly that :)

[19:12] * azawawi starts a fork

[19:13] <tadzik> haha

[19:13] <tadzik> maybe we should follow that :P

[19:17] *** sQuEE` is now known as sQuEE

[19:17] *** znpy joined
[19:19] *** labster joined
[19:19] *** sQuEE is now known as sQuEE`

[19:23] *** leobut joined
[19:25] *** leobut left
[19:25] <[Coke]> jnthn: https://rt.perl.org/Ticket/Display.html?id=115618 - looks like this just needs a compose call, yah? Maybe this one's an easy close.

[19:25] *** leobut joined
[19:25] *** ChoHag joined
[19:26] <jnthn> [Coke]: nah, we should actually fix it proper at some point :)

[19:27] <jnthn> I'm pondering re-working how we do method caching a bit anyway, for other reasons

[19:27] <stmuk_> is anyone working on "panda uninstall"?

[19:28] <El_Che> pretty nice perl6 thread at hackernews

[19:28] <El_Che> ZoffixWin for the win

[19:28] <MadcapJake> andreoss: you can totally use ==> in place of method chaining you just have two syntax things to watch out for: a closing curly will end a statement (so wrap in parentheses) and no argument subs need to be given empty postcircumfix parentheses (though this is ok to leave out at the end of a chain of them)

[19:28] <MadcapJake> check out the docs on them (I recently added some details) http://doc.perl6.org/language/operators#Sequencer_Precedence

[19:29] *** leobut left
[19:29] <tadzik> stmuk: no one that I know of

[19:29] <tadzik> it's been requested recently though

[19:29] *** leobut joined
[19:29] <nine> I'd say it's been requested again and again since it's inception...

[19:29] <yoleaux> 13:41Z <[Coke]> nine: is https://rt.perl.org/Ticket/Display.html?id=123276 done?

[19:30] *** yqt joined
[19:30] <MadcapJake> awwaiid++ # for the feed op docs too!

[19:33] <nine> [Coke]: WRT #123276 I'd guess that it's been fixed. The reporter thinks so and it looks very much like the HTTP::UserAgent issue fixed by commit b384d8f777f6169052c25e5cc37353f01b8f5f1a

[19:33] <tadzik> it now becomes a bit trickier with CUR and all

[19:34] <nine> tadzik: you sure? https://github.com/rakudo/rakudo/blob/nom/src/core/CompUnit/Repository/Installation.pm#L255

[19:35] <sjn> \o

[19:35] <azawawi> hmm, you cant use 'is DEPRECATED' with 'is export'?

[19:35] <tadzik> oo:o

[19:35] <tadzik> I had no idea

[19:35] <tadzik> something for me to do on the qah then :)

[19:36] *** brosenberg joined
[19:37] *** leobut left
[19:38] *** leobut joined
[19:39] *** leobut left
[19:39] <moritz> timotimo: do we actually need modules in top-level star if they are also provided by panda's bootstrap?

[19:39] <timotimo> moritz: potentially not

[19:39] <timotimo> not 100% sure how it works

[19:40] <moritz> ==> Testing Shell::Command

[19:40] <moritz> Could not find File::Which in:

[19:40] <moritz> and then a list of directories

[19:40] <timotimo> is that while trying to install panda?

[19:40] <moritz> this is with newest panda imported into star

[19:40] <moritz> timotimo: yes

[19:41] <timotimo> does that newest panda already have File::Which at all?

[19:41] <nine> there's an open PR

[19:41] <timotimo> and, if so, does it know to install that before trying Shell::Command

[19:41] <timotimo> nine: what, the one i made? :)

[19:41] <nine> yes

[19:43] <timotimo> huh, some other commits sneaked by when i wasn't looking

[19:43] <azawawi> tadzik: please review https://github.com/tadzik/Shell-Command/pull/13

[19:43] * azawawi waits for AppVeyor and Travis CI results

[19:46] *** cdg left
[19:46] <azawawi> moritz: 'is DEPRECATED' with 'is export' is a bad mix somehow

[19:46] *** cdg joined
[19:51] *** cdg left
[19:53] *** cdg joined
[19:53] *** cdg left
[19:53] *** oceanwhit joined
[19:54] <moritz> tadzik, timotimo: I've opened https://github.com/tadzik/panda/pull/304 which is basically the same as timotimo++'s 303, but it actually works :-)

[19:54] <moritz> and uses a squash merge

[19:56] <azawawi> moritz: https://github.com/tadzik/Shell-Command/pull/13 ?

[19:56] *** andreoss left
[19:56] <azawawi> moritz: fix the problem from the source? :)

[19:56] <timotimo> that sounds good

[19:57] <moritz> *shrug* works for me too

[19:58] <moritz> just why was the dependency on File::Which added in the first place?

[19:58] <timotimo> i mean moritz' suggestion sounds good

[19:58] <timotimo> i guess so that Shell::Command can still provide File::Which

[19:58] <timotimo> with just the one use statement

[19:59] <azawawi> moritz: because of failed which() non-portable implementation on win32

[19:59] <azawawi> moritz: panda was broken since 2016.01 as far as i recall

[19:59] *** domidumont left
[19:59] <azawawi> moritz: these days i use zef on windows

[19:59] *** domidumont joined
[20:00] <moritz> azawawi: so how does your pull request solve that?

[20:00] <moritz> I mean, a warning doesn't make it more portable, does it?

[20:01] <azawawi> moritz: drops file-which, deprecates it...

[20:01] <moritz> azawawi: but does that fix panda on windows?

[20:01] <azawawi> moritz: tried 'is DEPRECATED' and it did not work with 'is export'

[20:01] <azawawi> moritz: yup

[20:01] <azawawi> moritz: it skips it on win32 and macosx

[20:02] <dalek> ecosystem: ebc08af | RabidGravy++ | META.list:

[20:02] <dalek> ecosystem: Rename META for JSON::Marshal

[20:02] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/ebc08af5e8

[20:02] <moritz> azawawi: so panda doesn't actually use which, it was only the tests that failed?

[20:02] <timotimo> potentially, yeah

[20:02] <azawawi> moritz: yup but tadzik was worried that people already depended on non-portable which implementation

[20:03] <azawawi> moritz: so we need to deprecate it, then remove it later

[20:03] <timotimo> https://twitter.com/typed/status/715988070177370114  -  in this thread: people are really angry about that we call our ascii operator variants "texas"

[20:04] <stmuk_> hahaha

[20:04] <timotimo> really angry is an overstatement

[20:04] <[Coke]> nine - do we need tests on that one?

[20:04] <timotimo> maybe "irritated"?

[20:05] <timotimo> "unconvinced of the merit"?

[20:05] <[Coke]> "who gives a f***" ?

[20:06] <geekosaur> well, it is us-centric >.>

[20:06] <stmuk_> timotimo: qntm ironically claims "I have no strong feelings one way or the other" on his twitter profile

[20:06] <stmuk_> [Coke]++

[20:07] <timotimo> it doesn't seem like he has strong feelings in that particular thread

[20:08] <timotimo> today: perl6 calls operators either "unicode" or "texas". that's a thing that happens. also, people found that out and derided it on twitter. that's also a thing that hppens. move along, it's just the internet.

[20:09] <geekosaur> "if that's the biggest complaint they can come up with about perl 6..."

[20:09] <timotimo> that applies all the time

[20:11] *** domidumont left
[20:12] <azawawi> good night everyone

[20:13] *** azawawi left
[20:14] *** ufobat left
[20:19] <skids> Shame on us for implying texans are intolerant of the french :-)

[20:21] *** spider-mario joined
[20:21] <ugexe> how dare they call it the goatse operator and not the man spreading his anus open operator

[20:21] *** prammer left
[20:22] *** prammer joined
[20:22] <kmwallio> ugexe: to call it a "man" operator would alienate a lot of people I think...

[20:23] <Xliff_OFF> So....

[20:23] <Xliff_OFF> (•_•)

[20:23] <Xliff_OFF> ( •_•)>⌐■-■

[20:23] <Xliff_OFF> (⌐■_■)

[20:23] <Xliff_OFF> ....better glasses! Boo yah!

[20:23] <timotimo> well, the operator itself doesn't have a representation of the primary sexual characteristics

[20:23] <timotimo> you know, like the original picture

[20:23] <ugexe> it also doesnt have the wedding ring

[20:23] <timotimo> so it's gender neutral, really

[20:23] <timotimo> which is nice and inclusive

[20:24] *** Xliff_OFF is now known as Xliff

[20:24] <ugexe> the perl6 goatse operator needs a ring on the left hand

[20:25] <timotimo> we don't actually have the goatse operator, do we?

[20:25] <ugexe> its still april 1...

[20:25] *** cjdbikeit joined
[20:26] *** _nadim joined
[20:26] *** cjdbikeit left
[20:26] <jnthn> m: say (^0x10FFFF).map(*.uniname).grep(*.contains('COMBINING RING'))

[20:27] <camelia> rakudo-moar a87fb4: OUTPUT«(COMBINING RING ABOVE COMBINING RING BELOW COMBINING RING OVERLAY)␤»

[20:27] <jnthn> No problem to put a ring on it :)

[20:27] *** TEttinger joined
[20:29] <dalek> ecosystem: 2b33fac | RabidGravy++ | META.list:

[20:29] <dalek> ecosystem: Rename META file for the JSON::Class

[20:29] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/2b33fac855

[20:29] *** pmurias joined
[20:30] <gtodd> what is slurp-rest

[20:31] <perlpilot> unfortunate?

[20:31] *** dvinciguerra left
[20:32] <gtodd> as in:   $handle.slurp-rest  vs. $handle.IO.slurp

[20:32] <timotimo> gtodd: the semantics of .slurp on an opened file weren't definable without problems, so we decided to call it "slurp-rest" and have very clear semantics

[20:32] <gtodd> errm sigh ....

[20:32] * perlpilot really wishes we didn't have slurp-rest.

[20:33] <gtodd> is there a slurp-some  ? 

[20:33] <timotimo> oh, really?

[20:33] *** darutoko left
[20:33] <timotimo> that'd be .read($n)

[20:33] <gtodd> :-D

[20:33] <perlpilot> I wish it were just slurp with some modifiers

[20:33] <cfedde> .slurp-enough

[20:33] <timotimo> also supports :bin, i expect?

[20:34] <timotimo> read, i mean

[20:34] <timotimo> BBIAB

[20:34] <gtodd> perlpilot: I thought it was ... 

[20:34] <gtodd> .slurp-dwim

[20:35] <skids> Damn, my plan to make a "french fries" operator and then call "//" "the freedom fries operator" fizzles due to no fonts having ⫽.  There's ᜶, but that would be Philippine fries.

[20:35] <cfedde> just sorten that one to .dwim

[20:35] <gtodd> cfedde: excellent

[20:35] <cfedde> 'sorten'.dwim ==> shorten

[20:36] <gtodd> perl6 -e '.dwim ;'    end of golf forever

[20:36] <RabidGravy> there

[20:36] <mst> alias d="perl6 -e '.dwim'" # I beat gtodd

[20:37] <gtodd> crap

[20:37] * gtodd d

[20:37] <Xliff> Oh, god. It is 4/1... isn't it?

[20:37] <Xliff> You know you are old when you forget April Fool's day. 

[20:38] <Xliff> Because you are just too effin tired to care.

[20:38] <gtodd> Xliff: so you heard that perl6 has been discontinued

[20:38] <RabidGravy> TreyHarris, in case you don't look at GH very often I have updated JSON::Class and JSON::Marshal so they deal properly with data like you have, and left an example on the GH issue which will work better than the earlier workardound

[20:38] <gtodd> perl5 was renamed

[20:39] <gtodd> BIG changes today

[20:39] <Xliff> gtodd: Pull the other one, d00d.

[20:39] <Xliff> Or then again.... maybe don't =P

[20:40] <RabidGravy> haven't got anywhere with what I actually set out to do this morning but hey

[20:40] <Xliff> RabidGravy: Have you decided what Vorbis lib you want, yet?

[20:43] <RabidGravy> and there I was thinking it was a documented, open encoding scheme

[20:43] *** pmurias left
[20:43] <RabidGravy> why does it matter what lib?

[20:43] *** buharin left
[20:47] <RabidGravy> infact afaik there is only one full codec library, but you knew that already right?

[20:52] *** leont joined
[20:52] *** arc__ joined
[20:53] *** arc__ is now known as arcetera

[20:53] *** arcetera left
[20:53] *** arcetera joined
[20:54] *** buharin joined
[20:56] *** sufrostico left
[20:57] *** skids left
[21:02] <Xliff> RabidGravy, no. I was hoping you'd do all the research for me and leave me with just the coding. =p

[21:02] <Xliff> http://www.linuxsecurity.com/content/view/167517?rdf   <- The mind boggles.

[21:03] *** brosenberg left
[21:03] *** ptolemarch left
[21:05] <Xliff> I think I'll just go with libvorbisenc, then =)

[21:06] <garu> tadzik: bump! https://github.com/tadzik/rakudobrew/pull/84 :)

[21:07] <tadzik> garu: right!

[21:09] *** go|dfish joined
[21:10] <garu> \o/

[21:10] <tadzik> on it now :)

[21:12] *** rindolf left
[21:13] *** buharin left
[21:13] *** tphilipp joined
[21:14] <Xliff> Hrm. libvorbisenc is just a helper for libvorbis. *sigh*

[21:14] <garu> tadzik: thanks! as usual, just let me know if you need anything

[21:15] <Xliff> Actually could still be useful, though.

[21:16] <tadzik> Done, built panda 2015.11 for moar-2015.11

[21:16] <tadzik> seems to work :)

[21:17] <tadzik> it could perhaps qualify for bonus points if installing panda for nom didn't result in a line saying "error: pathspec 'nom' did not match any file(s) known to git."

[21:17] <tadzik> but it's a minor git output thing and I'm gonna let that slide :)

[21:18] *** sjakke joined
[21:18] <sjakke> check, check, check, is this thing on?

[21:19] <ZoffixWin> yup

[21:19] *** sufrostico joined
[21:20] <sjakke> i'm checking in with some noob problems... can't install panda with rakudobrew. What info do you need to help me?

[21:21] <jdv79> ZoffixWin: nice presentation.  i saw it on HN earlier today.  it was confusing how to get it going though.

[21:23] <mst> jdv79: he added instructions after realising it was posted

[21:23] <mst> originally it was just his slides, which of course -he- already knew how to use ;)

[21:24] <ZoffixWin> :)

[21:24] <sjakke> am I on the right channel? is there a dedicatet noob channel?

[21:25] <ZoffixWin> sjakke, this is a channel for everything.

[21:25] * Xliff is dissecting Audio::Libshout

[21:25] <garu> tadzik: we can achieve that by tagging nom on panda :)

[21:25] <garu> tadzik: I'd also love it if we tagged v6.c as well

[21:25] <ZoffixWin> sjakke, what's the full output from rakudobrew when you try to install panda?

[21:26] <ZoffixWin> pastebin it

[21:29] <Xliff> Rut Roh

[21:32] *** cognominal_ joined
[21:35] <Xliff> http://pastebin.com/mkQHe5fk

[21:35] *** cognominal left
[21:35] * Xliff kills Pastebin devs for putting Comic Sans in for 4/1

[21:35] <tphilipp> lol

[21:35] <Xliff> It's in an april1st.css file, so hopefully it will go back to normal, shortly.

[21:36] <Xliff> So gptrixie is borking for vorbis/codec.h.

[21:36] <Xliff> Any ideas?

[21:37] *** oceanwhit left
[21:38] *** kaare_ left
[21:38] <RabidGravy> that does look a bit special, I recall that skarsnik said that at one there was a problem if it wasn't the "real" gccxml but castxml instead

[21:38] <RabidGravy> can't remember what the issue was

[21:39] <cognominal_> is parrot still supported on nqp ? 

[21:40] <RabidGravy> ah, "error: '--castxml-gccxml' does not work with c11"

[21:42] *** eam joined
[21:42] *** AlexDaniel joined
[21:43] <sjakke> ZoffixWin, here it is http://pastebin.com/vtx2rghV

[21:44] <RabidGravy> I think some distributions use castxml as an "alternative" to the real gccxml, which don't work

[21:44] <AlexDaniel> I hate April 1st but this is pretty funny: https://mail.python.org/pipermail/python-dev/2016-March/143603.html

[21:44] <eam> I'm encountering the exact bug described here https://rt.perl.org/Public/Bug/Display.html?id=123497 -- #!/usr/local/bin/perl6 executes as a shell script - using env to dispatch works as expected

[21:45] *** sue left
[21:45] <eam> oh, and I think I see the issue which isn't mentioned in the ticket -- bin/perl6 from osx brew isn't a binary. It's a shell script

[21:45] <eam> I guess I just solved my own problem

[21:45] <RabidGravy> sjakke, ah, I think that is something someone changed today, not sure if they are still around

[21:46] <sjakke> Tried zef, and it worked fine. But it borked on me when trying to install Task::Star

[21:47] <sjakke> I prefer the name zef.... and it reminds me of the antwoord

[21:47] <RabidGravy> sjakke, if you have zef then you can fix the panda problem by installing File::Which first

[21:48] <RabidGravy> it is entirely possibly that Task::Star has the same problem

[21:48] <sjakke> could I maybe just stick with zef.... or is panda recommended for newcomers?

[21:48] <RabidGravy> it shouldn't matter tbh

[21:49] <RabidGravy> panda has just been around longer, more modules have been tested with it etc, etc

[21:49] <ugexe> zef actualy doesnt mess up on star. its that some distributions in star do not declare all their build dependencies

[21:50] <ugexe> one of which is panda, so if you are installing with panda you wouldnt notice

[21:51] *** perlpilot left
[21:51] <ugexe> sjakke: its name is indeed a homage to antwoord

[21:51] <RabidGravy> maybe at some point there should be a common role for the Build.pm 

[21:52] *** perlpilot joined
[21:52] *** sue joined
[21:52] *** Vitrifurr left
[21:53] <sjakke> ugexe: then i'm def sticking to zef ;)

[21:53] <RabidGravy> it does seem a bit strange having a dependency on a particular package manager

[21:54] *** Vitrifur joined
[21:55] <Xliff> RabidGravy, so if the Great and Powerful Trixie is borking on vorbis/codec.h --- I'm kinda at an impasse.

[21:55] <Xliff> Here's hoping I can do better with Xqilla.

[21:55] <sjakke> thanks for the help guys. I'll most likely be back for more help :)

[21:56] <RabidGravy> Xliff, at a guess I'd say your "gccxml" is actually castxml masquerading as gccxml, which I can confirm doesn't like that file

[21:56] <Xliff> Yup. Same error.

[21:57] <Xliff> Where can I get proper GCCXML?

[21:57] <Xliff> And where is that file located?

[21:58] <RabidGravy> what OS distribution are you using?

[21:59] <Xliff> Ubuntu

[21:59] <Xliff> And it would help if gccxml was installed. =P

[21:59] <RabidGravy> it's entirely possible that you can install the "real" gccxml using whatever package manager and then flip the alternatives

[21:59] <Xliff> Which it wasn't.

[21:59] <Xliff> And it was disheartening seeing castxml as a dependency.

[21:59] <RabidGravy> :(

[21:59] *** Wiertek joined
[22:00] <RabidGravy> for some reason everyone seems to want to flip to castxml

[22:00] <Xliff> #! /usr/bin/python

[22:00] <Xliff> #

[22:00] <Xliff> # Emulate the gccxml command using castxml.

[22:00] <Xliff> Fuuuuu.....

[22:01] *** Wiertek left
[22:01] <RabidGravy> fwiw fedora has gone completely over to castxml

[22:03] <Xliff> "Note: GCC-XML has been succeeded by CastXML.

[22:03] <Xliff> "

[22:03] <Xliff> Right there on the front page...http://gccxml.github.io/HTML/Index.html

[22:03] *** lizmat joined
[22:05] <Xliff> Hrm. "apt install x" hangs at 6% consistently.

[22:06] *** perlawhirl joined
[22:07] *** Wiertek joined
[22:07] <sjakke> Just did my first 'hello world' with perl6. Happy times

[22:08] <perlpilot> sjakke: congrats :)

[22:09] <ZoffixWin> \o/

[22:09] <Xliff> Calling GCCXML : gccxml /usr/include/vorbis/codec.h -fxml=plop.xml[]

[22:09] <Xliff> Error: Could not run /usr/local/bin/gccxml:

[22:09] <Xliff> Argument list too long

[22:09] <Xliff> *sigh*

[22:09] *** _4d47 left
[22:15] *** molaf left
[22:21] <Xliff> gccxml has some fucked up build instructions.

[22:22] <Xliff> Aaaand... the build fails.

[22:23] *** sufrostico left
[22:24] *** Wiertek left
[22:31] *** cognominal_ left
[22:35] <Xliff> Can anyone here build gccxml?

[22:37] <perlawhirl> .botsnack

[22:37] <yoleaux> :D

[22:37] <perlawhirl> just checking i was online :)

[22:40] *** _nadim left
[22:40] *** Sgeo__ joined
[22:42] <sjakke> RabidGravy: So to install Task::Star, from zef, I'm required to install another package manager. Am I correct?

[22:42] <Xliff> Downgrading to gcc 0.6.0...just to see if it builds.

[22:42] <Xliff> s/gcc/gccxml/

[22:44] <RabidGravy> sjakke, that is a workaround for the situation you find yourself in at the moment, yes. It shouldn't really be the case but one of the bundled dependencies has a dependency itself which didn't get bundled by mistake

[22:44] <RabidGravy> or something like that

[22:45] <RabidGravy> to be honest I've never installed Task::Star as it doesn't have anything in it that I would commonly use

[22:47] <sjakke> that just seems wrong. Anywho.... I'll stick to zef. I'll manage without it. Just wanted it because the intro material mentions it.

[22:47] <RabidGravy> it's a mistake

[22:49] <RabidGravy> also Task::Star came about when there were less than a third of the module than there are now and hasn't really been adjusted since

[22:51] <Xliff> Would compiling with gcc-4.6 and g++-4.9 cause problems?

[22:51] *** kid51 joined
[22:52] <RabidGravy> dunno

[22:53] <Xliff> Wheee!

[22:53] * Xliff had to drop back to gcc and g++ v4.9 before gccxml would compile

[22:55] <Xliff> Aaaaand.... still get the same error. 

[22:55] <Xliff> *SNARL*

[22:55] <sjakke> I just want to see if I can connect and send files to my chromecast. I'm using an application called castnow and I'm unhappy with it.

[22:56] <RabidGravy> send files how?

[22:57] <sjakke> It's a great excuse to reboot my programming interest. Started Comp.Sci a couple of years ago, but dropped out 'cause java hurts my brain.

[22:58] <Xliff> sjakke, It took me a long while to become cognizant in Java.

[22:58] <Xliff> Over a decade, in fact.

[22:59] <Xliff> It wasn't until modern IDEs started grokking Java that I finally got into it. (Android helped)

[22:59] <Xliff> So... new development.... gccxml seems to work in an -non-root- shell.

[22:59] <sjakke> I'm not sure what protocol castnow uses.... I need to read some of its code

[22:59] <Xliff> WTF?

[23:00] *** perlawhirl left
[23:02] <Xliff> Aaaaannnd.... all of perl6 is build into root's homedir.

[23:02] <Xliff> *sigh*

[23:03] *** sue left
[23:04] *** kid511 joined
[23:04] <Xliff> This most likely means a complete reboot of perl6 in a non-root location.

[23:04] <stmuk_> Task::Star has documentation and debuggers!

[23:05] *** kid51 left
[23:05] <RabidGravy> sjakke, castnow appears to use a special chromecast protocol, you'll be needing to make an implementation yourself if you want to do it in Perl 6

[23:07] <Xliff> Aaand I just blew away some uncommitted code for Match.pm -- fortunately I keep my gist updated.

[23:07] * Xliff is having a bad evening. Time for beer and loud music.

[23:07] <sjakke> Well if someone can point me in the right direction I'll get cracking

[23:07] *** perlawhirl joined
[23:09] <RabidGravy> https://github.com/thibauts/node-castv2#protocol-description

[23:09] <RabidGravy> there you go :)

[23:11] *** edehont joined
[23:11] <RabidGravy> if it can be implemented in javascript it definitely can be implemented in Perl 6 ;-)

[23:11] *** edehont left
[23:11] <sjakke> RabidGravy: Thanks man! A thank you all the way from the Faroe Islands. Probably the only Perl 6 user here ;)

[23:12] <RabidGravy> lawks, I didn't know they had the internet there ;-)

[23:12] <sjakke> We have great internet

[23:13] <Xliff> rakudobrew build panda -- Fails when installing Shell::Command

[23:13] <ilmari> it was a bit congested around the eclipse

[23:13] <Xliff> Should I pastebin the error screen or is this known?

[23:13] <RabidGravy> I guess half the trans-atlantic cables go that way

[23:14] <ilmari> (mobile internets, at least)

[23:14] <sjakke> I missed it :( it was cloudy, where I am

[23:14] <Xliff> ==> Testing Shell::Command

[23:14] <Xliff> Could not find File::Which in:

[23:14] <RabidGravy> Xliff, no it's known, missing dependency on File::Which

[23:14] <Xliff> JINX!

[23:14] <ilmari> I only caught the last few seconds of the totality through a fortuitous gap in the clouds

[23:14] <Xliff> Will that be fixed?

[23:14] <ilmari> from in torshavn

[23:14] <ilmari> -from

[23:15] <RabidGravy> the Shell::Command that is bundled got updated with one that depends on File::Which and File::Which didn't get bundled

[23:15] <sjakke> You were here. Cool.

[23:16] <RabidGravy> anyhow I really was going to crash, going to plant some trees tomorrow

[23:16] <Xliff> Yeah. So that means that panda is kinda non-installable.

[23:16] <RabidGravy> toodles

[23:16] <Xliff> nn, RabidGravy 

[23:16] <Xliff> I guess that sets the tone for me, as well.

[23:16] <Xliff> Will start fresh tomorrow. Putting the perl6 stuff to bed, for now.

[23:17] <sjakke> A local band made a music video with the eclipse in the background. One shot take

[23:18] <sjakke> First ever to do so I think

[23:18] <ilmari> yeah, i saw that one, impressive

[23:20] *** RabidGravy left
[23:20] <jdv79> is there some sort of html parsing module yet that's fast enough?

[23:21] *** sjakke left
[23:22] <leedo> there is a partially completed libxml module, i started using Inline::Perl5 to use perl5's XML::LibXML

[23:23] <leedo> it's fast once things get loaded, but takes about 2 seconds to get it all loaded

[23:27] *** DarthGandalf left
[23:35] <jdv79> yeah. ok.

[23:35] <jdv79> thanks

[23:36] *** wamba joined
[23:45] <AlexDaniel> jdv79: yes, Gumbo

[23:46] <AlexDaniel> jdv79: https://github.com/Skarsnik/perl6-gumbo

[23:48] <AlexDaniel> Skarsnik++ :)

[23:53] *** perlawhirl left
[23:54] *** DarthGandalf joined
[23:54] <jdv79> oh, cool.

[23:55] <AlexDaniel> jdv79: it is really fast and it does things correctly. I've used it in the past and was surprised by how well it worked

[23:59] *** arcetera left
