[00:00] *** edehont left
[00:00] *** edehont joined
[00:01] <dalek> rakudo-star-daily: 34b84bc | coke++ | log/ (6 files):

[00:01] <dalek> rakudo-star-daily: today (automated commit)

[00:01] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/34b84bc594

[00:05] *** edehont left
[00:09] *** edehont joined
[00:11] *** edehont left
[00:12] *** edehont joined
[00:12] *** edehont_ joined
[00:12] *** edehont_ left
[00:12] *** edehont left
[00:12] *** edehont joined
[00:12] *** cdg left
[00:13] *** firstdayonthejob left
[00:13] *** edehont left
[00:17] *** itaipu joined
[00:27] *** Guest32512 left
[00:29] *** bowtie joined
[00:29] *** bowtie is now known as Guest56914

[00:31] *** regreg left
[00:33] *** vendethiel left
[00:34] *** Guest56914 left
[00:35] *** bowtie_ joined
[00:44] *** alber joined
[00:55] *** SCHAAP137 left
[00:55] *** Herby_ joined
[00:56] <Herby_> Evening, everyone!

[00:56] <Herby_> \o

[00:56] *** khw left
[00:56] <timotimo> hey herb

[00:57] <Herby_> Hello, timotimo!

[00:57] *** Sgeo_ left
[00:57] *** Sgeo joined
[01:00] <timotimo> since github's down for now and the last thing i wanted to do before bed relied on that, i suppose i'll go to bed now

[01:00] *** Actualeyes joined
[01:02] <Herby_> m: if "bill-bob" ~~ / \W / { say "this has a character that isn't a word character" }

[01:02] <camelia> rakudo-moar 86a90b: OUTPUT«this has a character that isn't a word character␤»

[01:02] <Herby_> m: if "bill bob" ~~ / \W / { say "this has a character that isn't a word character" }

[01:02] <camelia> rakudo-moar 86a90b: OUTPUT«this has a character that isn't a word character␤»

[01:02] <Herby_> m: if "billbob" ~~ / \W / { say "this has a character that isn't a word character" }

[01:02] <camelia> rakudo-moar 86a90b: ( no output )

[01:03] <Herby_> found a small task at work today that I'm going to use Perl 6 for.  Have a list of 1000+ names and I need to find the ones that have any "non-word" character.  

[01:03] <Herby_> Figured I'd start small :)

[01:03] <Herby_> sorry, non-word character

[01:04] *** Herby_ left
[01:08] *** yeahnoob joined
[01:08] *** khw joined
[01:11] *** spider-mario left
[01:14] *** vendethiel joined
[01:18] <ZoffixWin> m: 'ǀǁǀǁǀǁǀǁǀǁǀǁǀǁ' ~~ /\W/ or say "No non-word characters here :P"

[01:18] <camelia> rakudo-moar 86a90b: OUTPUT«No non-word characters here :P␤»

[01:18] *** Zero_Dogg left
[01:19] *** Zero_Dogg joined
[01:24] <AlexDaniel> .u ǁ

[01:24] <yoleaux> U+01C1 LATIN LETTER LATERAL CLICK [Lo] (ǁ)

[01:24] <sortiz> m: use nqp; my $a=nqp::chr(0x20000); print $a; # Succeeds 

[01:24] <camelia> rakudo-moar 86a90b: OUTPUT«𠀀»

[01:24] <sortiz> m: use nqp; my $a=nqp::chr(0x20000); print $a.perl; # Succeeds 

[01:24] <camelia> rakudo-moar 86a90b: OUTPUT«"𠀀"»

[01:25] <sortiz> m: use nqp; my $a=nqp::chr(0x20000); print $a.gist; # Segfault!

[01:25] <camelia> rakudo-moar 86a90b: OUTPUT«𠀀»

[01:26] <sortiz> m: use nqp; my $a=nqp::chr(0x20000)~'a'; print $a

[01:26] <camelia> rakudo-moar 86a90b: OUTPUT«𠀀a»

[01:26] <sortiz> m: use nqp; my $a=nqp::chr(0x20000)~'a'; print $a.perl

[01:26] <camelia> rakudo-moar 86a90b: OUTPUT«"𠀀a"»

[01:26] <sortiz> m: use nqp; my $a=nqp::chr(0x20000)~'a'; print $a.gist

[01:26] <camelia> rakudo-moar 86a90b: OUTPUT«𠀀a»

[01:26] <sortiz> m: use nqp; my $a=nqp::chr(0x20000)~'a'; say $a

[01:26] <camelia> rakudo-moar 86a90b: OUTPUT«𠀀a␤»

[01:28] <sortiz> use nqp; my $a = nqp::chr(0x20000); put $a;

[01:29] <sortiz> m: use nqp; my $a = nqp::chr(0x20000); put $a;

[01:29] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:29] <sortiz> m: use nqp; my $a = nqp::chr(0x20001); print $a;

[01:29] <camelia> rakudo-moar 86a90b: OUTPUT«𠀁»

[01:29] <sortiz> m: use nqp; my $a = nqp::chr(0x20001); put $a;

[01:29] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:31] <diakopter> boom

[01:33] <sortiz> m: use nqp; my $a = nqp::chr(0x20001); print $a;

[01:33] <camelia> rakudo-moar 86a90b: OUTPUT«𠀁»

[01:33] <sortiz> m: use nqp; my $a = nqp::chr(0x20001); print $a~"\n";

[01:33] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:34] *** vendethiel left
[01:35] <sortiz> m: use nqp; my $a = nqp::chr(0x20001)~"foo"; print $a;

[01:35] <camelia> rakudo-moar 86a90b: OUTPUT«𠀁foo»

[01:36] <sortiz> m: use nqp; my $a = nqp::chr(0x20001)~"foo"; $a ~ "\n"; say "I'm alive"; # The concant of "\n"?

[01:36] <camelia> rakudo-moar 86a90b: OUTPUT«WARNINGS for /tmp/2h9kJ3Q4FR:␤Useless use of "~" in expression "$a ~ \"\\n\"" in sink context (line 1)␤I'm alive␤»

[01:37] <sortiz> m: use nqp; my $a = nqp::chr(0x20001)~"foo"; my $b = $a ~ "\n"; say "I'm alive"; # The concant of "\n"?

[01:37] <camelia> rakudo-moar 86a90b: OUTPUT«I'm alive␤»

[01:37] <sortiz> m: use nqp; my $a = nqp::chr(0x20001)~"foo"; my $b = $a ~ "\n"; print $b;

[01:37] <camelia> rakudo-moar 86a90b: OUTPUT«𠀁foo␤»

[01:37] <sortiz> m: use nqp; my $a = nqp::chr(0x20001)~"foo"; my $b = $a ~ "\n"; say $b;

[01:37] <camelia> rakudo-moar 86a90b: OUTPUT«𠀁foo␤␤»

[01:38] <sortiz> m: use nqp; my $a = nqp::chr(0x20000); print $a~"\n";

[01:38] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:38] <sortiz> Curios bug!

[01:39] <sortiz> m: use nqp; my $a = nqp::chr(0x20000); print $a x 10;

[01:39] <camelia> rakudo-moar 86a90b: OUTPUT«𠀀𠀀𠀀𠀀𠀀𠀀𠀀𠀀𠀀𠀀»

[01:39] <sortiz> m: use nqp; my $a = nqp::chr(0x20000); print $a x 10 ~ "\n";

[01:39] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:39] <diakopter> m: use nqp; my $a = nqp::chr(0xF000000000000001); say $a

[01:39] <camelia> rakudo-moar 86a90b: OUTPUT«␤»

[01:40] <diakopter> wrong!

[01:40] <ZoffixWin> m: use nqp; my $a = nqp::chr(2**63); say $a

[01:40] <camelia> rakudo-moar 86a90b: OUTPUT«␀␤»

[01:40] <ZoffixWin> heh

[01:41] <sortiz> use nqp; my $a = nqp::chr(0x10fffff); say $a.uniname

[01:41] <sortiz> m: use nqp; my $a = nqp::chr(0x10fffff); say $a.uniname

[01:41] <camelia> rakudo-moar 86a90b: OUTPUT«<unassigned>␤»

[01:41] <ZoffixWin> m: use nqp; my $a = nqp::chr( -1 + 2**63 ); say $a

[01:41] <camelia> rakudo-moar 86a90b: OUTPUT«chr codepoint cannot be negative␤  in block <unit> at /tmp/rGRGSWqDeR line 1␤␤»

[01:41] <ZoffixWin> :S

[01:41] <diakopter> lol

[01:41] <sortiz> m: use nqp; my $a = nqp::chr(0x10fffff-1); say $a.uniname

[01:41] <camelia> rakudo-moar 86a90b: OUTPUT«<unassigned>␤»

[01:41] <sortiz> m: use nqp; my $a = nqp::chr(0x20000); say $a.uniname

[01:41] <camelia> rakudo-moar 86a90b: OUTPUT«<CJK Ideograph Extension B>␤»

[01:42] <sortiz> m: use nqp; my $a = nqp::chr(0x20000-1); say $a.uniname

[01:42] <camelia> rakudo-moar 86a90b: OUTPUT«<illegal>␤»

[01:42] <AlexDaniel> yeah, sounds like an overflow somewhere

[01:42] * ZoffixWin calls the police

[01:42] <AlexDaniel> possibly everywhere

[01:42] <diakopter> popo

[01:42] <diakopter> all over the place

[01:42] <diakopter> time for a drink or 0xF

[01:43] <sortiz> m: use nqp; my $a = nqp::chr(0x20000-1); print $a;

[01:43] <camelia> rakudo-moar 86a90b: OUTPUT«\x{1FFFF}»

[01:43] <sortiz> m: use nqp; my $a = nqp::chr(0x20000); print $a;

[01:43] <camelia> rakudo-moar 86a90b: OUTPUT«𠀀»

[01:43] <AlexDaniel> m: use nqp; my $a = nqp::chr(99999999999999999999999999999999); print $a;

[01:43] <camelia> rakudo-moar 86a90b: OUTPUT«Cannot unbox 107 bit wide bigint into native integer␤  in block <unit> at /tmp/MQOFWD23sd line 1␤␤»

[01:43] <sortiz> m: use nqp; my $a = nqp::chr(0x20000); print $a ~ "\n";

[01:43] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:43] <sortiz> m: use nqp; my $a = nqp::chr(0x20000); print $a ~ "ababasdaskaskasd";

[01:43] <camelia> rakudo-moar 86a90b: OUTPUT«𠀀ababasdaskaskasd»

[01:44] <sortiz> m: use nqp; my $a = nqp::chr(0x20000); print $a ~ "ababasdaskaskasd" ~ "\n";

[01:44] <camelia> rakudo-moar 86a90b: OUTPUT«𠀀ababasdaskaskasd␤»

[01:44] <sortiz> m: use nqp; my $a = nqp::chr(0x20000); print $a ~ "" ~ "\n";

[01:44] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:44] <AlexDaniel> uh so, it does not always segfault?

[01:45] <sortiz> Only when I appends a single NL

[01:45] <AlexDaniel> m: use nqp; my $a = nqp::chr(0x20000); print $a ~ "" ~ "\r";

[01:45] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:45] *** yqt left
[01:45] <AlexDaniel> m: use nqp; my $a = nqp::chr(0x20000); print $a ~ "" ~ "\t";

[01:45] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:46] <sortiz> May be the escape?

[01:46] <AlexDaniel> m: use nqp; my $a = nqp::chr(0x20000); print $a ~ "" ~ "\a";

[01:46] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:46] <diakopter> m: use nqp; my $a = nqp::chr(0x20000); print "$a\n\n";

[01:46] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:46] <sortiz> m: use nqp; my $a = nqp::chr(0x20000); print $a ~ "\xa0";

[01:46] <camelia> rakudo-moar 86a90b: OUTPUT«𠀀 »

[01:47] <sortiz> m: use nqp; my $a = nqp::chr(0x20000); print $a ~ "\x10";

[01:47] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:48] <sortiz> m: use nqp; my $a = nqp::chr(0x20000); print $a ~ "\x20";

[01:48] <camelia> rakudo-moar 86a90b: OUTPUT«𠀀 »

[01:48] <sortiz> m: use nqp; my $a = nqp::chr(0x20000); print $a ~ "\x1f";

[01:48] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:48] <AlexDaniel> m: use nqp; my $a = nqp::chr(0x20000); print $a ~ "" ~ "\c[10]"

[01:48] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:49] <sortiz> m: use nqp; my $a = nqp::chr(0x20000); print $a ~ "\x00";

[01:49] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:49] <sortiz> A control char.

[01:49] <sortiz> m: use nqp; my $a = nqp::chr(0x20000); print $a ~ "\x21";

[01:49] <camelia> rakudo-moar 86a90b: OUTPUT«𠀀!»

[01:50] <sortiz> m: use nqp; my $a = nqp::chr(0x20000-1); print $a ~ "\x10";

[01:50] <camelia> rakudo-moar 86a90b: OUTPUT«\x{1FFFF}»

[01:50] <sortiz> m: use nqp; my $a = nqp::chr(0x20000+1000); print $a ~ "\x20";

[01:50] <camelia> rakudo-moar 86a90b: OUTPUT«𠏨 »

[01:50] <AlexDaniel> jeez. What code is responsible for that?

[01:51] <sortiz> m: use nqp; my $a = nqp::chr(0x20000);  my $b = $a ~ "\x10";

[01:51] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:51] <AlexDaniel> rakudo: use nqp; my $a = nqp::chr(0x20000); print "\c[10]$a\c[10]"

[01:51] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:51] <AlexDaniel> jvm: use nqp; my $a = nqp::chr(0x20000); print "\c[10]$a\c[10]"

[01:51] <AlexDaniel> j: use nqp; my $a = nqp::chr(0x20000); print "\c[10]$a\c[10]"

[01:51] <camelia> rakudo-jvm 6c0f93: OUTPUT«␤𠀀␤»

[01:51] <sortiz> m: use nqp; my $a = nqp::chr(0x20000);  my $b = $a ~ "\x10"; say "alive";

[01:51] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[01:52] <sortiz> And is at concat time, not print time.

[01:54] <AlexDaniel> oh wow, GitHub shows a pink unicorn icon

[01:54] <AlexDaniel> “No server is currently available to service your request.”

[01:56] <AlexDaniel> yup, github down…

[01:56] <sortiz> I'm golfing while waiting for it.

[01:58] <AlexDaniel> ok I think that I have a copy of moarvm sources somewhere…

[01:59] <sortiz> I'm suspecting of MVM_string_join, but is the first time that read that code.

[02:00] <AlexDaniel> sortiz: but it could be anything? What about normalization?

[02:01] <AlexDaniel> that github issue reminds me once again that it is a good idea to have a mirror on bitbucket 

[02:01] <AlexDaniel> or gitlab, or everywhere at the same time

[02:01] <AlexDaniel> because why not

[02:02] <AlexDaniel> git is distributed after all

[02:02] <sortiz> Seems that the normalization is done in string_chr, the implementation of chr op.

[02:02] <ZoffixWin> dam github is *still* down... 

[02:03] <sortiz> And faults when joining.

[02:03] <ZoffixWin> Good thing there's Git Torrent: https://github.com/cjb/GitTorrent

[02:03] <ZoffixWin> http://i0.kym-cdn.com/photos/images/newsfeed/000/096/044/trollface.jpg?1296494117

[02:07] *** secwang joined
[02:08] *** secwang left
[02:08] <AlexDaniel> sortiz: nah, that requires some debugging

[02:12] <AlexDaniel> m: use nqp; my $a = nqp::chr(0x20000); say $a ~ "{say ‘hello’; ‘’}\c[10]{say ‘world’; ‘’}"

[02:12] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)hello␤world␤»

[02:13] <AlexDaniel> m: use nqp; my $a = nqp::chr(0x20000); say $a ~ "{say ‘hello’; ‘’}\c[10]{say ‘world’; ‘’}" ~ "{say ‘another’}"

[02:13] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)hello␤world␤»

[02:14] <sortiz> Indeed 

[02:14] *** llfourn joined
[02:14] *** secwang joined
[02:18] <AlexDaniel> m: say Buf.new(0x20000, 10).decode

[02:18] <camelia> rakudo-moar 86a90b: OUTPUT«␀␤␤»

[02:19] <AlexDaniel> m: say Buf.new(0x20000, 10).decode.ords

[02:19] <camelia> rakudo-moar 86a90b: OUTPUT«(0 10)␤»

[02:19] <AlexDaniel> m: say Buf.new(0x20000, 65).decode.ords

[02:19] <camelia> rakudo-moar 86a90b: OUTPUT«(0 65)␤»

[02:20] <AlexDaniel> “Sorry, we're down for maintenance”

[02:20] <AlexDaniel> ZoffixWin: ↑ does that sound fair?

[02:20] *** secwang left
[02:20] <sortiz> "We're working to address a widespread issue affecting all github.com services."

[02:20] <AlexDaniel> sortiz: ten minutes ago the error was different

[02:21] <AlexDaniel> and now it is “maintenance”

[02:21] <AlexDaniel> like if it was planned, aha

[02:21] *** secwang joined
[02:22] *** xpen joined
[02:22] <sortiz> https://status.github.com/messages

[02:22] <ZoffixWin> AlexDaniel, fair with respect to what? :)

[02:22] <llfourn> "We're continuing to address a widespread issue affecting all http://github.com  services." # ah good now they're continuing

[02:23] <ZoffixWin> NSA backdoors take time to install :) Just relax ^_^

[02:23] <llfourn> NSA backdoors shouldn't involve downtime this is 2016

[02:24] <sortiz> Lol, see the message for Jan 28, 00:00 CST

[02:28] <ZoffixWin> What about it? :)

[02:30] <sortiz> In CST right now is Jan 27 yet

[02:31] <sortiz> The have a pessimistic crystal ball!?

[02:32] <ZoffixWin> Ah :)

[02:32] <llfourn> it's back up

[02:32] <llfourn> (for me)

[02:32] <ZoffixWin> Great. RIGHT when I decide to go to bed :D

[02:32] <ZoffixWin> Yeah, up for me too. FAST too!

[02:32] *** alber left
[02:38] *** sufrostico left
[02:38] <sortiz> m: use nqp; my $a := nqp::chr(0x20000); nqp::concat($a,"\n"); # For the record only

[02:38] <camelia> rakudo-moar 86a90b: OUTPUT«(signal SEGV)»

[02:39] *** kaare_ joined
[02:49] <sortiz> o/ dinner time

[02:52] <dalek> ecosystem: 497883e | thundergnat++ | META.list:

[02:52] <dalek> ecosystem: Add ACME::Vanish to the ecosystem

[02:52] <dalek> ecosystem: 

[02:52] <dalek> ecosystem: In the spirit of ACME::Bleach. See https://github.com/thundergnat/ACME-Vanish

[02:52] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/497883e5ae

[02:57] *** kaare_ left
[03:00] *** Actualeyes left
[03:00] *** Upasaka left
[03:03] *** addison_ left
[03:06] *** skids joined
[03:09] *** kid51_ joined
[03:10] *** kid51 left
[03:14] <dalek> ecosystem: a9233a3 | thundergnat++ | META.list:

[03:14] <dalek> ecosystem: Update meta list

[03:14] <dalek> ecosystem: 

[03:14] <dalek> ecosystem: Fix case of Acme::Vanish. sigh. thundergnat--

[03:14] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/a9233a36ec

[03:14] *** kid51_ left
[03:24] *** secwang left
[03:25] *** AW3i left
[03:25] <MadcapJake> If I'm building a module that just has a binary, do I still need to include it in «provides» hash?

[03:26] * llfourn would like to know the answer to this too

[03:29] *** fa left
[03:29] *** yurivish joined
[03:30] <MadcapJake> looks like some of the `App::*` do and some don't :/

[03:31] *** secwang joined
[03:34] *** coetry joined
[03:34] <coetry> how do I get the value of the last value in my repl?

[03:34] <coetry> is it a special variable like $*?

[03:38] *** itaipu left
[03:39] *** noganex_ joined
[03:39] <MadcapJake> coetry: I don't think it's possible, can use linenoise or rlwrap to just go through history and prefix a variable assignment

[03:42] *** noganex left
[03:43] *** coetry left
[03:45] *** nanis joined
[03:48] *** nanis left
[03:55] <MadcapJake> Anyone on able to handle ecosystem additions?

[03:57] <dalek> ecosystem: af3a3ee | (Jake Russo)++ | META.list:

[03:57] <dalek> ecosystem: Add App::P6Dx

[03:57] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/af3a3eea68

[03:57] <dalek> ecosystem: 7bcfe6d | LLFourn++ | META.list:

[03:57] <dalek> ecosystem: Merge pull request #137 from MadcapJake/master

[03:57] <dalek> ecosystem: 

[03:57] <dalek> ecosystem: Add App::P6Dx https://github.com/MadcapJake/p6dx

[03:57] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/7bcfe6dac8

[03:58] <MadcapJake> llfourn++

[03:58] <llfourn> MadcapJake: no worries :)

[03:58] <MadcapJake> Can't wait to see it on the site!

[03:58] *** bjz joined
[03:58] * MadcapJake is giddy with anticipation

[03:59] <MadcapJake> How do you add a logo? just a `logotype` folder with a 32x32 img in it?

[03:59] <llfourn> .tell moritz can you consider adding MadcapJake++ to Perl 6 org on github https://github.com/MadcapJake

[03:59] <yoleaux> llfourn: I'll pass your message to moritz.

[03:59] <MadcapJake> O_O

[04:00] <llfourn> you don't want? :)

[04:01] <MadcapJake> that'd be cool! just surprised!

[04:01] <llfourn> well you have contributed a lot more than I had when I was firt added!

[04:07] *** Actualeyes joined
[04:07] <diakopter> added

[04:07] <llfourn> diakopter++ thanks!

[04:10] <MadcapJake> wow thanks diakopter llfourn ! so cool! B)

[04:11] <diakopter> basically anyone can be added to the perl6 org if they ask

[04:12] <MadcapJake> diakopter: oh! well still feels great! first real organization I'm a part of on github!

[04:15] <MadcapJake> Man the ecosystem has really grown since last I've browsed it. So many cool modules!

[04:15] <llfourn> .tell moritz nvm diakopter++ has done it

[04:15] <yoleaux> llfourn: I'll pass your message to moritz.

[04:15] <llfourn> is there a way to delete a .tell?

[04:16] <MadcapJake> .help

[04:16] <yoleaux> MadcapJake: I'm yoleaux. Type .commands to see what I can do, or see http://dpk.io/yoleaux for a quick guide.

[04:16] <MadcapJake> doesn't look like it

[04:17] <llfourn> hhmm cool thanks anyway

[04:17] <MadcapJake> .tw MadcapJake

[04:17] <yoleaux> Y Combinator would like to sponsor research on Basic Income: https://blog.ycombinator.com/basic-income (@steveklabnik, retweeted by @MadcapJake)

[04:17] <MadcapJake> haha

[04:18] <diakopter> what is .tw

[04:18] <diakopter> oh

[04:18] <MadcapJake> gets the last tweet of a handle

[04:19] <MadcapJake> .tw perl6

[04:19] <yoleaux> https://perl6.org/ perl6 - come and get it (@perl6)

[04:22] <MadcapJake> .mangle Perl 6 is the greatest language in the history of all languages ever developed naturally or artificially.

[04:22] <yoleaux> 6 treasures in all the languages ​​spoken in the natural or artificially created.

[04:23] * TimToady considers whether he's ever spoken Perl 6 in the natural...

[04:23] *** coetry joined
[04:23] <MadcapJake> Well we'd need to develop a system of phrases for all symbols, perhaps some shortcuts to ease speaking

[04:24] <MadcapJake> .mangle Well we'd need to develop a system of phrases for all symbols, perhaps some shortcuts to ease speaking.

[04:24] <yoleaux> Now we have all the characters, maybe some links to speaking easily is to create a system of registration.

[04:24] <MadcapJake> lol

[04:24] <MadcapJake> mangle is by far my favorite yoleaux feature

[04:25] <AlexDaniel> this is actually required for https://github.com/perl6/doc/issues/155

[04:25] * MadcapJake . o 0 ( I should write a perl6 version of mangle! )

[04:26] <AlexDaniel> perhaps we should borrow some names from INTERCAL

[04:26] <MadcapJake> Why not just translate into html escape codes?

[04:27] <llfourn> .oO( Grammar::English )

[04:27] <AlexDaniel> http://www.muppetlabs.com/~breadbox/intercal-man/tonsila.html

[04:27] * MadcapJake glazes over as he reads INTERCAL wikipedia article

[04:28] <MadcapJake> lol "two-spot"

[04:28] <MadcapJake> these names are amazing

[04:29] <AlexDaniel> / – slat :)

[04:30] <MadcapJake> mesh and half-mesh (#, =) xD

[04:30] <AlexDaniel> every single one is funny :)

[04:30] <AlexDaniel> wow! what? :))

[04:30] <MadcapJake> yes they are!

[04:31] <AlexDaniel> any reason why we can't steal those?

[04:32] <skids> "shark (or simply sharkfin)" erm...

[04:32] <AlexDaniel> ¯ – overline??? It feels like a flying worm!

[04:33] <AlexDaniel> or “flyworm”

[04:33] <AlexDaniel>  * Got any better ideas? 

[04:33] <MadcapJake> I think that would be a great idea! At least post it in for discussion.

[04:34] <AlexDaniel> MadcapJake: already did

[04:34] <AlexDaniel> at least for issue 155

[04:35] * MadcapJake is struggling not to enter `:+1:` as a comment on #155

[04:36] <MadcapJake> The added bonus is the confused face people will have when they read the url :P

[04:38] <AlexDaniel> $/ – big-money-slat

[04:38] <MadcapJake> I need to get my hands on one of these INTERCAL manuals

[04:38] <MadcapJake> "Caution! Under no circumstances confuse the mesh with the interleave operator, except under confusing circumstances!"

[04:39] <AlexDaniel> MadcapJake: yeah! It also feels a bit perl-ish sometimes :)

[04:39] <AlexDaniel> the style, I mean

[04:40] <AlexDaniel> +^ – intersection shark :*

[04:40] <AlexDaniel> oops

[04:40] <AlexDaniel> :D

[04:41] *** secwang left
[04:42] *** secwang joined
[04:43] <TimToady> .tell cat_ note that variable return has been specced for some time, but not yet implemented; see S06:688

[04:43] <yoleaux> TimToady: I'll pass your message to cat_.

[04:45] <MadcapJake> TimToady: cool! I'd also like to see that.  Not a C++ programmer but I've played around with Mozart/Oz which uses a similar pattern

[04:47] *** bjz left
[04:47] <TimToady> we already support it for definite constants, basically

[04:47] <TimToady> m: sub foo (--> 42) { 43 }; say foo

[04:47] <camelia> rakudo-moar 86a90b: OUTPUT«WARNINGS for /tmp/sb6DjZT2sY:␤Useless use of constant integer 43 in sink context (line 1)␤42␤»

[04:49] <AlexDaniel> m: sub A(--> 42) {}; say &A.returns

[04:49] <camelia> rakudo-moar 86a90b: OUTPUT«(Int)␤»

[04:51] <AlexDaniel> m: sub A(--> (42 => 69)) {}; say &A.returns

[04:51] <camelia> rakudo-moar 86a90b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/kyxF_M6Ibw␤Malformed return value␤at /tmp/kyxF_M6Ibw:1␤------> 3sub A(-->7⏏5 (42 => 69)) {}; say &A.returns␤»

[04:51] <AlexDaniel> hm, how can I return a pair? :)

[04:54] <sjn> m: sub P(--> Pair) { :k("v") }; say P()

[04:54] <camelia> rakudo-moar 86a90b: OUTPUT«k => v␤»

[04:54] <sjn> m: sub P(--> Pair) { :k("v") }; say P(); say &P.returns;

[04:54] <camelia> rakudo-moar 86a90b: OUTPUT«k => v␤(Pair)␤»

[04:54] <MadcapJake> How often does the module site update?

[04:55] *** psy left
[04:55] <AlexDaniel> sjn: sure, but a fixed one?

[04:56] <AlexDaniel> m: sub A(--> 42) {}; say &A.returns

[04:56] <camelia> rakudo-moar 86a90b: OUTPUT«(Int)␤»

[04:56] <AlexDaniel> m: sub A(--> 42.0) {}; say &A.returns

[04:56] <camelia> rakudo-moar 86a90b: OUTPUT«(Rat)␤»

[04:56] <AlexDaniel> m: sub A(--> 42e0) {}; say &A.returns

[04:56] <camelia> rakudo-moar 86a90b: OUTPUT«(Num)␤»

[04:56] <AlexDaniel> great, I want a pair :)

[05:00] <MadcapJake> m: constant pair = k => 'v'; sub p(--> pair) {}; say $p.returns

[05:00] <camelia> rakudo-moar 86a90b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/E30yIe2EXk␤Variable '$p' is not declared. Did you mean '&p'?␤at /tmp/E30yIe2EXk:1␤------> 3air = k => 'v'; sub p(--> pair) {}; say 7⏏5$p.returns␤»

[05:00] <MadcapJake> m: constant pair = k => 'v'; sub p(--> pair) {}; say &p.returns

[05:00] <camelia> rakudo-moar 86a90b: OUTPUT«(Pair)␤»

[05:01] <sjn> yeah, that makes sense

[05:01] <sjn> if you only want to return one thing, make a constant

[05:01] <AlexDaniel> okay

[05:02] <skids> m: sub a (--> Thing.new) { }; &a.returns.say

[05:02] <camelia> rakudo-moar 86a90b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/jvG60KUaiY␤Type 'Thing' is not declared␤at /tmp/jvG60KUaiY:1␤------> 3sub a (--> Thing7⏏5.new) { }; &a.returns.say␤»

[05:02] <skids> m: sub a (--> Pair.new) { }; &a.returns.say

[05:02] <camelia> rakudo-moar 86a90b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/qQi3i2Vu1o␤Type 'Pair' is not declared␤at /tmp/qQi3i2Vu1o:1␤------> 3sub a (--> Pair7⏏5.new) { }; &a.returns.say␤»

[05:03] <AlexDaniel> skids: it's kinda interesting that you cannot put any piece of code there, hm

[05:03] <skids> Wel, more that "type Pair is not declared" :-)

[05:03] <AlexDaniel> skids: nah, that's a typical response

[05:04] *** TEttinger left
[05:04] <AlexDaniel> skids: it was reported many times in different places, I think that the fix would be global

[05:04] <AlexDaniel> (but honestly I have no idea)

[05:04] *** TEttinger joined
[05:04] <AlexDaniel> https://rt.perl.org/Public/Bug/Display.html?id=125902

[05:04] <AlexDaniel> at least one that I can find

[05:05] <MadcapJake> it's a signature and it seems the --> only accepts types or constants, not objects/lists/maps apparently

[05:06] * sjn thinks that makes sense

[05:06] <AlexDaniel> m: Pair $x where 42 => 69;

[05:06] <camelia> rakudo-moar 86a90b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/0vlPKzZ7vD␤Two terms in a row␤at /tmp/0vlPKzZ7vD:1␤------> 3Pair7⏏5 $x where 42 => 69;␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement mod…»

[05:06] <MadcapJake> m: constant pair = Pair.new; sub p(--> pair) {}; say &p.returns

[05:06] <camelia> rakudo-moar 86a90b: OUTPUT«(Pair)␤»

[05:06] <AlexDaniel> m: constant pair = 42 => 69; Pair $x where pair;

[05:06] <camelia> rakudo-moar 86a90b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/4mKcMJjOL6␤Two terms in a row␤at /tmp/4mKcMJjOL6:1␤------> 3constant pair = 42 => 69; Pair7⏏5 $x where pair;␤    expecting any of:␤        infix␤        infix stopper␤        statement end…»

[05:06] <AlexDaniel> m: constant pair = 42 => 69; my Pair $x where pair;

[05:06] <camelia> rakudo-moar 86a90b: ( no output )

[05:07] <AlexDaniel> m: my Pair $x where 42 => 69;

[05:07] <camelia> rakudo-moar 86a90b: OUTPUT«5===SORRY!5=== Error while compiling /tmp/qvSuuoGR2A␤Preceding context expects a term, but found infix > instead␤at /tmp/qvSuuoGR2A:1␤------> 3my Pair $x where 42 =>7⏏5 69;␤»

[05:07] <AlexDaniel> m: constant pair = 42 => 69; my Pair $x where pair; $x = 42 => 69

[05:07] <camelia> rakudo-moar 86a90b: ( no output )

[05:07] <AlexDaniel> m: constant pair = 42 => 69; my Pair $x where pair; $x = 42 => 68

[05:07] <camelia> rakudo-moar 86a90b: OUTPUT«Type check failed in assignment to $x; expected <anon> but got Pair␤  in block <unit> at /tmp/RqNsvuRLae line 1␤␤»

[05:07] <AlexDaniel> hehe

[05:10] *** nige1 joined
[05:10] *** coetry left
[05:13] *** coetry joined
[05:18] *** AlexDaniel left
[05:20] *** wamba joined
[05:21] *** coetry left
[05:30] *** nige1 left
[05:36] *** vendethiel joined
[05:40] *** avenj left
[05:41] *** Kogurr left
[05:45] *** Cabanossi left
[05:46] *** Cabanossi joined
[05:56] *** khw left
[06:10] *** sortiz left
[06:11] *** nightfrog left
[06:20] *** vendethiel left
[06:21] *** vendethiel joined
[06:23] *** _Gustaf_ joined
[06:33] *** raiph left
[06:35] *** cuonglm joined
[06:38] <cuonglm> How can I get signal information base on OS

[06:38] <cuonglm> In Linux, SIGSTOP is 19

[06:38] <cuonglm> but perl6 -e 'for Signal.enums.kv -> $k, $v { say $v if $k ~~ "SIGSTOP"}'

[06:38] <cuonglm> give me 17

[06:43] *** vendethiel left
[06:47] *** darutoko joined
[06:50] *** vendethiel joined
[06:53] *** laz78 joined
[06:55] *** sjoshi joined
[06:55] *** skids left
[06:55] <diakopter> m: say Signal::SIGSTOP.kv

[06:55] <camelia> rakudo-moar 86a90b: OUTPUT«(SIGSTOP 17)␤»

[06:57] <cuonglm>  diakopter: Any ideal?

[06:58] <diakopter> well, camelia is certainly on Linux

[06:59] *** geraud left
[07:00] <diakopter> but yeah, STOP as 17 seems more POSIX-y

[07:02] *** laz78 left
[07:03] <cuonglm> diakopter: Yeah, but how can I archive the right thing? Is there any OS dependent API?

[07:03] <cuonglm> It's painful if you use that information for parsing, example `/proc/<pid>/status`

[07:05] <cuonglm> There, if a process setup to catch signal 17, it's SIGCHLD

[07:06] <cuonglm> but perl6 give you SIGSTOP, which can't be caught as specified by POSIX

[07:06] <cuonglm> :|

[07:08] *** bjz joined
[07:08] *** babaj joined
[07:13] *** CIAvash joined
[07:13] *** vendethiel left
[07:14] *** vendethiel joined
[07:15] *** Actualeyes left
[07:16] <JimmyZ>  cuonglm : as per  http://man7.org/linux/man-pages/man7/signal.7.html  

[07:16] <JimmyZ> Where three values are given, the first one is usually valid for alpha and sparc, the middle one for x86, arm, and most  other architectures, and the last one for mips.

[07:16] <JimmyZ> so we are using the first one

[07:18] <JimmyZ> not sure what Perl6  spec wants

[07:19] <dalek> ecosystem: 0e8a583 | (Jake Russo)++ | META.list:

[07:19] <dalek> ecosystem: Add Acme::Mangle

[07:19] <dalek> ecosystem: 

[07:19] <dalek> ecosystem: A libtranslate wrapper that mangles text similarly to yoleaux's `.mangle` command

[07:19] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/0e8a583012

[07:19] <dalek> ecosystem: 5544990 | (Jake Russo)++ | META.list:

[07:19] <dalek> ecosystem: Merge pull request #138 from MadcapJake/master

[07:19] <dalek> ecosystem: 

[07:19] <dalek> ecosystem: Add Acme::Mangle

[07:19] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/554499012e

[07:19] <JimmyZ> cuonglm: maybe a send a  RT or PR may help improving it

[07:20] <MadcapJake> guess I didn't need to do it on my own fork now :P

[07:22] *** domidumont joined
[07:22] *** domidumont left
[07:23] <cuonglm> JimmyZ: Most language I tried is OS dependent, Perl 5, too (via $Config{sig_name})

[07:23] *** domidumont joined
[07:25] <cuonglm> I will, but RT process seems to be slow, I had submitted a ticket without much notice https://rt.perl.org/Public/Bug/Display.html?id=127370

[07:26] <JimmyZ> cuonglm: maybe a  PR could be faster?

[07:27] *** domidumont left
[07:28] <JimmyZ> cuonglm: only if jnthn++ agrees, we can merge it quickly

[07:28] *** domidumont joined
[07:31] <cuonglm>  JimmyZ: Do you know Perl 6 documentation for Signal?

[07:32] *** Kogurr joined
[07:33] *** apathor left
[07:33] <JimmyZ> cuonglm: no, I think patch always comes firstly, then docs 

[07:34] *** apathor joined
[07:37] *** nakiro joined
[07:37] *** avenj joined
[07:37] *** avenj left
[07:37] *** avenj joined
[07:37] *** laz78 joined
[07:37] *** laz78 left
[07:40] <nine> cuonglm: it's not RT. It's that as with pretty much every free software project (or even commercial) there are more people reporting bugs than people fixing bugs.

[07:41] *** laz78 joined
[07:42] *** laz78 left
[07:44] *** firstdayonthejob joined
[07:45] <cuonglm> nine: Yeah, I know that. But I mean it seems that the maintainers did not look at it

[07:45] *** laz78 joined
[07:51] *** Actualeyes joined
[07:52] <moritz> cuonglm: you can't know that, so please don't assume the worst

[07:52] <yoleaux> 03:59Z <llfourn> moritz: can you consider adding MadcapJake++ to Perl 6 org on github https://github.com/MadcapJake

[07:52] <yoleaux> 04:15Z <llfourn> moritz: nvm diakopter++ has done it

[07:56] *** abaugher_ left
[07:56] *** vendethiel left
[07:56] *** abaugher_ joined
[07:57] <cuonglm> moritz: Yeah, I don't assume anything, just my feeling. Anyway, I'm very happy with Perl community

[07:58] <[Tux]> csv-ip5xs       18.596

[07:58] <[Tux]> test            22.378

[07:58] <[Tux]> test-t          12.139

[07:58] <[Tux]> csv-parser      49.195

[07:59] *** RabidGravy joined
[08:00] *** vendethiel joined
[08:01] *** wamba left
[08:03] *** FROGGS joined
[08:05] <RabidGravy> marning!

[08:09] *** zakharyas joined
[08:13] <masak> morning, #perl6

[08:14] *** laz78 left
[08:14] <RabidGravy> erp

[08:16] <moritz> \o

[08:19] *** llfourn_ joined
[08:19] *** llfourn left
[08:20] *** Actualeyes left
[08:21] *** secwang left
[08:27] *** bowtie_ left
[08:29] <sjn> good *, #perl6

[08:30] <moritz> \o sjn 

[08:34] *** bowtie joined
[08:34] *** bowtie is now known as Guest27803

[08:40] *** firstdayonthejob left
[08:41] <lizmat> good *, #perl6!

[08:41] <lizmat> m: my $s = SetHash.new; $s{$s} = 1; dd $s   # another case of recursive data structures we need to cover

[08:41] *** Actualeyes joined
[08:42] <camelia> rakudo-moar 86a90b: OUTPUT«Memory allocation failed; could not allocate 3984 bytes␤»

[08:42] *** vendethiel left
[08:44] <moritz> na, we just need more memory on the eval server :-)

[08:46] *** labster joined
[08:47] *** brrt joined
[08:47] <brrt> good * #perl6

[08:47] <labster> good * brrt

[08:48] <labster> m: my $errors = 3; my @stuff = flat ("abc" xx 255) Z ("12" xx 128+$errors); for @stuff -> $line { unless $line ~~ m/1/ { say "seen: $line" if $line.index("2"); }; if $line ~~ m/9/ { }; }

[08:48] <camelia> rakudo-moar 86a90b: OUTPUT«seen: 12␤seen: 12␤seen: 12␤»

[08:48] *** dakkar_ joined
[08:48] <brrt> [Tux]: that's not too good, is it?

[08:57] *** Actualeyes left
[08:58] <lizmat> m: my $s = set( $(<a b c>) ); dd $s.hash  # argh, uncaught bug  :-(

[08:58] <camelia> rakudo-moar 86a90b: OUTPUT«Hash %e = {"a b c" => Bool::True}␤»

[09:01] *** yeahnoob left
[09:03] *** yeahnoob joined
[09:04] <lizmat> I expected: Hash[Any,Any] % = (my Any %{Any} = (("a", "b", "c")) => 1)

[09:05] <lizmat> well, => Bool::True

[09:06] <lizmat> I rakudobugged both so that they don't fall through the cracks once we know how to continue developing

[09:08] * labster files rakudobug after an hour and a half of golfing

[09:08] *** DrPete joined
[09:09] *** labster left
[09:09] *** labster joined
[09:10] *** TEttinger left
[09:11] *** TEttinger joined
[09:14] <lizmat> labster: do any of them go away with MVM_SPESH_DISABLE=1 ?

[09:15] <labster> maybe?  How do I use that again?

[09:16] <lizmat> MVM_SPESH_DISABLE=1 perl6 golf.pl

[09:17] <lizmat> yup, no errors with MVM_SPESH_DISABLE=1

[09:18] <labster> I'm entirely unsurprised -.-

[09:19] *** abraxxa joined
[09:19] <lizmat> labster: I added a note

[09:19] <labster> Thank you lizmat++

[09:24] <brrt> :-(

[09:24] <brrt> lizmat: what is the bug here?

[09:24] *** leont joined
[09:25] <brrt> and, sensitive to JIT or not?

[09:25] <cuonglm> JimmyZ: Found it

[09:25] <lizmat> no, SPESH, MVM_JIT_DISABLE doesn't make a difference

[09:25] <cuonglm> :m $*KERNEL.signal("SIGSTOP")

[09:25] <brrt> :-(

[09:26] <lizmat> brrt: well, that would imply that it's not JIT that's to blame, no ?

[09:27] <cuonglm> :m say $*KERNEL.signal("SIGSTOP")

[09:29] <brrt> true, but JIT is often a smaller bug surface than spesh

[09:29] *** bjz left
[09:30] *** bjz joined
[09:32] <cuonglm> camelia: help

[09:32] <camelia> cuonglm: Usage: <(nqp-jvm|star-j|nqp-parrot|prof-m|niecza|rakudo-moar|std|debug-cat|nqp-moarvm|p5-to-p6|pugs|rakudo-jvm|nqp-js|star-m|rakudo-MOAR|rj|Prn|nqp-p|P|j|nr|m|rakudo|nqp-q|nqp-j|r-j|Pnr|M|nom|rPn|nqp|nPr|nqp-mvm|star|sm|nrP|sj|p56|nqp-m|rn|r-m|r-jvm|p6|n|rm|perl6|r|rnP)(?^::\s(?!OUTPUT))

[09:32] <camelia> ..$perl6_program>

[09:33] <cuonglm> perl6: say $*KERNEL.signal("SIGSTOP")

[09:33] <camelia> rakudo-jvm 6c0f93: OUTPUT«Method 'signal' not found for invocant of class 'Kernel'␤  in block <unit> at /tmp/tmpfile:1␤␤»

[09:33] <camelia> ..rakudo-moar 86a90b: OUTPUT«19␤»

[09:36] *** Perleone joined
[09:36] *** Zero_Dogg left
[09:36] <Perleone> Greetings to the Perl 6 crew!

[09:36] *** Zero_Dogg joined
[09:36] *** Zero_Dogg left
[09:36] *** Zero_Dogg joined
[09:37] *** bjz left
[09:37] *** bjz_ joined
[09:39] *** pmurias joined
[09:39] <pmurias> Perleone: hi

[09:40] <|Tux|> brrt, 12.1 is fine. See http://tux.nl/Talks/CSV6/speed4.html

[09:41] *** MARTIMM joined
[09:42] *** adu joined
[09:42] <brrt> ah, cool

[09:43] <brrt> fwiw, starting perl6-with-nativecall easily takes the better part of a second on $laptop

[09:43] <brrt> and $laptop is fast

[09:43] <autogen_> nice

[09:43] <autogen_> that's pretty exciting

[09:45] *** vendethiel joined
[09:48] *** leont left
[09:59] * timotimo idly considers building The Great Github Mirrorwall Of Cameliand

[09:59] *** lnrdo joined
[10:02] *** labster left
[10:02] <dalek> rakudo/nom: 4b29d7e | ugexe++ | .travis.yml:

[10:02] <dalek> rakudo/nom: Add osx to travis test matrix

[10:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4b29d7e728

[10:02] <dalek> rakudo/nom: 7801920 | FROGGS++ | .travis.yml:

[10:02] <dalek> rakudo/nom: Merge pull request #695 from ugexe/patch-1

[10:02] <dalek> rakudo/nom: 

[10:02] <dalek> rakudo/nom: Add osx to travis test matrix

[10:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7801920228

[10:05] *** dj_goku left
[10:10] *** Kogurr left
[10:11] <Perleone> I run Ubuntu 14.04 LTS with gcc version 4.8.4. Upon "rakudobrew build moar 2015.12" I get several warnings like these: https://travis-ci.org/cygx/p6-native-libc/builds/88334517#L217

[10:12] *** itaipu joined
[10:13] *** ely-se joined
[10:13] *** yeahnoob left
[10:16] <timotimo> what kind of machine is that? 32bit machine?

[10:19] <geekosaur> I think that's still right on 32 bit? my recollection is this kind of thing is mostly because windows 64 bit requires (long long int) for 64 bit values, and doing The Right Thing is annoying

[10:20] <Perleone> timotimo: No, 64 bit kernel and userland. 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 17 22:52:10 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux

[10:20] <Perleone> The build itself runs successfully. It's just that the warnings annoy me somewhat. :)

[10:21] <geekosaur> so the warnings are technically correct because (long long [unsigned] int) is allowed to be 128 bits, but in practice it never is, and otherwise it's hard to deal with win64 :/

[10:23] <geekosaur> sadly, it's often the case that portability means you take some warnings, because pedantically correct means nonportable

[10:25] <geekosaur> (especially with printf format warnings because formats always seem to be missing a few portability options)

[10:25] <brrt> (timotimo: whaddayamean?)

[10:26] <timotimo> brrt: about what?

[10:27] <brrt> The Great Github Mirrorwall of Cameliand

[10:27] <timotimo> well, it'd have mirrors of all interesting perl6-related repositories that it'd refresh regularly

[10:28] <brrt> printf warnings can be fixed by insertint "PRId64" etc everywhere 

[10:28] <brrt> this is hardly ever worth it

[10:28] <brrt> oh, timotimo, i think that's a great idea

[10:29] <geekosaur> ...a billion open source projects cried out in terror and were suddenly silenced...

[10:29] *** wamba joined
[10:29] <brrt> and then resurrected as developers pushed their repos to the next big thing

[10:30] <brrt> anyone recall repo.or.cz

[10:30] <timotimo> yeah, i do

[10:30] <brrt> :-)

[10:30] <timotimo> you can tell by me having "timo" that i'm an "early adopter" of github

[10:31] * brrt wonders if he could have gotten brrt

[10:34] * jnthn was early enough to get jnthn on github

[10:34] <jnthn> :)

[10:34] * geekosaur notes that he is actually a rather late adopter, but still got geekosaur :p

[10:35] <timotimo> well, clearly getting a nick with that many graphemes isn't that hard :P

[10:35] <geekosaur> dunno, it was taken already on gmail when I signed up and I *was* an early adopter there >.>

[10:36] <timotimo> tells you something about how many people need email vs how many people need git hostang

[10:36] <timotimo> hosting

[10:37] <geekosaur> (that said, I only checked out of curiosity; wanted something closer to my wallet name anyway. there's this thing about sending e.g. job application mail from "weird" accounts... matters less these days then it did then)

[10:37] <geekosaur> "unprofessional"

[10:37] <timotimo> [email@hidden.address] :P

[10:42] *** MARTIMM left
[10:43] *** brrt` joined
[10:44] *** brrt left
[10:46] *** nightfrog joined
[10:46] <geekosaur> (these days there's a tension between "geekosaur" being the "well known" online ID vs. a more "professional" ID. and then I find myself remembering Vinge's "True Names" and wondering a bit...)

[10:54] *** vendethiel left
[10:55] *** TEttinger left
[11:00] *** rindolf joined
[11:03] <brrt`> fortunately for me there is no such thing as a professional 'brrt' :-)

[11:03] <brrt`> yet, at least

[11:03] *** ely-se left
[11:04] *** adu left
[11:10] <timotimo> wouldn't a backtick at the end of your name be considered "unprofessional"? :)

[11:13] *** lnrdo left
[11:13] <El_Che> geekosaur: I like to miss names. I like privacy and confussion :)

[11:13] <El_Che> mix

[11:13] <profan> timotimo: im sure it's there to confuse the lisp programmers ;)

[11:13] <timotimo> ah

[11:14] *** espadrine_ joined
[11:14] *** cuonglm left
[11:17] *** vendethiel joined
[11:18] *** fireartist joined
[11:20] <fireartist> Hi. What's the correct way to test whether a module is loaded after using `try require Foo` ?

[11:20] <yoleaux> 26 Jan 2016 20:11Z <b2gills> fireartist: Please tell me that you aren't copying Games::Lacuna::Client wholesale to Perl 6. It is in desperate need of restructuring. I already did some of it. I would have done more, but I decided it would be easier to start from scratch (even in Perl 5). (never got a round tuit though)

[11:21] <moritz> fireartist: check $!

[11:21] <fireartist> ok, so maybe LWP::Simple needs a $var to track whether SSL is available...

[11:22] <fireartist> it's currently testing: if ::('IO::Socket::SSL;) ~~ Failure

[11:22] <fireartist> which isn't working as expected

[11:25] <dalek> ecosystem: a5c0e64 | (LE Manh Cuong)++ | META.list:

[11:25] <dalek> ecosystem: Add Linux::Process::SignalInfo to ecosystem

[11:25] <dalek> ecosystem: 

[11:25] <dalek> ecosystem: See https://github.com/Gnouc/p6-linux-process-signalinfo

[11:25] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/a5c0e6444d

[11:25] <dalek> ecosystem: 9e1e42d | azawawi++ | META.list:

[11:25] <dalek> ecosystem: Merge pull request #139 from Gnouc/master

[11:25] <dalek> ecosystem: 

[11:25] <dalek> ecosystem: Add Linux::Process::SignalInfo to ecosystem

[11:25] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/9e1e42dbc9

[11:28] <fireartist> hmm, panda appeared to install IO::Socket::SSL fine, but perl6 isn't finding it - looks like it isn't LWP::Simple's fault - I'll investigate further

[11:28] <Perleone> moritz: I noticed that perl6.org and www.perl6.org both serve the same stuff.  Shouldn't one be a redirect to the other, like on perl.org? I don't much care wich version becomes canonical, as long as there is one.

[11:29] <moritz> Perleone: could be. Should? Dunno

[11:29] <Perleone> Well, actually www.perl6.org would be preferrable, since it was just highlighted by my IRC client, whereas perl6.org was not.

[11:29] * moritz prefers without the www

[11:29] * ZoffixWin too

[11:29] <moritz> and here we are :-)

[11:30] <Perleone> So just pick/vote for one.

[11:30] <moritz> one more thing: It can't be a catch-all redirect; we can't get certificates for a subdomain that doesn't serve files

[11:30] <moritz> (via let's encrypt)

[11:30] *** espadrine_ is now known as espadrine

[11:31] <Perleone> Ooh, DNS wildcards. Why? :)

[11:32] <moritz> because the domain is not under our control

[11:32] <Perleone> http://perleone.perl6.org/ no no no

[11:32] <moritz> if we didn't have DNS wildcards, we'd have to mail the ower back and force each time we want a subdomain

[11:35] <moritz> Perleone: I can give you access to improve the apache configuration if you ant

[11:35] <moritz> *want

[11:35] <Perleone> So what valid subdomains are currently configured? www, doc, design

[11:35] <ZoffixWin> docs too, there's tablet(s?) IIRC

[11:35] <ZoffixWin> modules.

[11:36] <Perleone> moritz: I'd like that very much. Plus, it's my $DAYJOB :)

[11:36] <moritz> irc,design,doc,ecosystem-api,examples,faq,gtk-dlls,modules,smoke,tablets,testers

[11:36] <moritz> Perleone: please /msg me an ssh pubkey

[11:37] <moritz> Perleone: and please make sure letsencrypt certificate refresh still works afterwards (run more-certs.sh in /root/letsencrypt)

[11:38] <timotimo> i'm in the no-www camp :)

[11:39] <moritz> also an open TODO in the apache config: the ssl versions are mostly copied and pasted from the non-ssl versions; unifying them (possibly through includes) would be awesome

[11:40] *** lnrdo joined
[11:40] *** kaare_ joined
[11:42] *** edehont joined
[11:47] *** Amendil left
[11:48] <fireartist> ok, IO::Socket::SSL didn't install the first time I tried, not sure why - but I do have LWP::Simple working with https now

[11:49] <fireartist> "I've found a bug!!" ... "oh, wait, never mind" :-)

[11:55] *** lnrdo left
[11:55] *** RabidGravy left
[11:56] *** lnrdo joined
[12:04] *** vendethiel left
[12:04] *** Skarsnik joined
[12:06] *** vendethiel joined
[12:08] *** ely-se joined
[12:09] *** itaipu left
[12:14] *** CIAvash left
[12:28] *** vendethiel left
[12:32] *** vendethiel joined
[12:32] *** AlexDaniel joined
[12:39] *** kid51 joined
[12:40] *** lnrdo left
[12:42] *** MARTIMM joined
[12:43] *** jameslenz left
[12:44] *** brrt` is now known as brrt

[12:44] *** mohae joined
[12:47] *** mohae_ left
[12:48] *** xpen left
[12:53] *** vendethiel left
[12:58] *** kid51 left
[13:00] *** jameslenz joined
[13:00] *** vendethiel joined
[13:03] *** lnrdo joined
[13:03] *** lnrdo left
[13:05] *** itaipu joined
[13:07] *** g4 joined
[13:07] *** g4 left
[13:07] *** g4 joined
[13:24] *** vendethiel left
[13:26] *** gfldex left
[13:26] *** lnrdo joined
[13:27] *** lnrdo left
[13:29] *** gfldex joined
[13:41] *** abaugher_ left
[13:45] *** Actualeyes joined
[13:50] *** Actualeyes left
[13:52] *** sjoshi left
[13:52] *** abaugher joined
[13:52] *** abaugher left
[13:52] *** abaugher_ joined
[13:54] <gfldex> m: my %r; %r<a>.push(1); %r<a>.push(2); dd %r;

[13:54] <camelia> rakudo-moar 780192: OUTPUT«Hash %r = {:a($[1, 2])}␤»

[13:54] <gfldex> where does that .push actually come from?

[13:54] <jnthn> Any

[13:55] <jnthn> It's constrained to work only on :U things, and auto-vivs 

[13:55] <dalek> ecosystem: ab5e12c | (Zoffix Znet)++ | META.list:

[13:55] <dalek> ecosystem: Remove useless modules

[13:55] <dalek> ecosystem: 

[13:55] <dalek> ecosystem: Toss Acme::GiveUp and WWW::You'reDoingItWrong on account of being useless clutter.

[13:55] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/ab5e12cb11

[13:55] <gfldex> i shall doc!

[13:55] <jnthn> gfldex++ # docs

[14:01] *** lokien_ joined
[14:02] <|Tux|> jnthn, did you have a look at RT#127358 and/or formed an opinion?

[14:04] *** cdg joined
[14:04] <jnthn> |Tux|: I looked. My opinion is the default is correct, and will remain that way, and we'll implement an option to not get the default behavior.

[14:05] *** Upasaka joined
[14:05] <jnthn> (That is, to do no transformation.)

[14:05] <jnthn> Probably :!transform-nl or so

[14:06] <|Tux|> thumbs up. I'll just wait for a ping to use whatever is provided

[14:09] *** sjoshi joined
[14:09] <fireartist> If I have a hash in "$config<opts>" whose keys match the named params of a method - how do I pass the hash?

[14:09] <moritz> $obj.themethod(|$config<opts>)

[14:10] <fireartist> ah, thank you!

[14:11] <dalek> doc: 72e466e | (Wenzel P. P. Peppmeyer)++ | doc/Type/Any.pod:

[14:11] <dalek> doc: doc Any.push

[14:11] <dalek> doc: review: https://github.com/perl6/doc/commit/72e466ecbc

[14:14] <fireartist> despite reading every* perl6 blog post in the past 10 years, making the switch from writing perl5 to perl6 is /hard/ (but I am enjoying it)

[14:14] <fireartist> * almost

[14:15] <jast> it's basically learning a new language :)

[14:17] <moritz> you only learn a language by speaking/writing it

[14:17] <moritz> ... as I've painfully learned many times myself :-)

[14:21] *** Actualeyes joined
[14:21] *** molaf joined
[14:23] *** skids joined
[14:27] <Juerd> fireartist: Having read too much doesn't help either, because a lot from 10 years ago has already changed.

[14:27] *** g4 left
[14:30] <fireartist> true, I'm making good use of 5to6-nutshell :)

[14:31] *** gregf_ left
[14:34] *** cschwenz joined
[14:34] <Perleone> I've done "panda install Data::Dump" -- now I'd like to read its man page. But I cannot find the lib/Data/Dump.pm6 file. Or any perl6doc.

[14:34] <Perleone> However, the module itself loads fine, no errors. But where does it live?

[14:39] <lizmat> install/share/perl6/sources

[14:40] <lizmat> .tell nine are multiple copies of source files suppose to exist in install/share/perl6/sources?

[14:40] <yoleaux> lizmat: I'll pass your message to nine.

[14:42] *** eyck left
[14:42] *** gregf_ joined
[14:48] <Perleone> lizmat: The only filenames there are sha1sums

[14:48] <lizmat> and in there are source files :-)

[14:50] <lizmat> I'm actually less sure now whether that is where your installed modules live

[14:50] <Perleone> ./install/share/perl6/site/sources/93EDD1CA3BD55EC1ECC2ADDDA0D3A7B34F156165 -- good luck with locate ;-)

[14:51] <Perleone> So currently the only way to find a module is grep -r ?

[14:52] <lizmat> there seems to be a CompUnit::Util like module in the ecosystem, haven't tried it myself yet

[14:53] <[Coke]> jdv79: some spectest is probably deadlocked.

[14:53] <yoleaux> 27 Jan 2016 22:28Z <jdv79> [Coke]: would you mind keepin your node in check?

[14:54] <[Coke]> oh, new failure mode, nqp-js is chewing a CPU on build.

[14:57] * [Coke] reminds folks testing code in camelia that you can do it in private messages, too.

[14:58] *** lizmat left
[14:59] <Perleone> perl6 --doc ./install/share/perl6/site/sources/93EDD1CA3BD55EC1ECC2ADDDA0D3A7B34F156165 would be what I am looking for -- except that Data::Dump does not contain any inline documentation.

[15:00] <tony-o_> Perleone: https://github.com/tony-o/perl6-data-dump/

[15:00] <Perleone> But Terminal::ANSIColor does! perl6 --doc ./install/share/perl6/site/sources/A943B421EC631806B1F4A31331671E87D637235C

[15:00] <tony-o_> it's all in MD

[15:00] <Perleone> tony-o_: Yes, I know, but I'm so used to perldoc I'd like to keep it in the shell, preferrably with something like perl6doc

[15:01] <tony-o_> Perleone: are you on github?

[15:01] *** cschwenz left
[15:02] <Perleone> tony-o_: Yep

[15:02] <tony-o_> if you open an issue then i can add pod to the file (so that i can update you when it's done), otherwise i'll open the issue and add it

[15:05] <Perleone> tony-o_: Very gracious, thank you. Done.

[15:06] *** cschwenz joined
[15:06] *** cschwenz left
[15:07] *** lizmat joined
[15:09] *** RabidGravy joined
[15:10] *** lizmat left
[15:11] *** lizmat joined
[15:13] *** sftp left
[15:13] *** sftp joined
[15:14] * Perleone unceremoniously buries __END__ and replaces it with =finish. (Turns out it's enough to prepend instead of replace.)

[15:15] *** vike1 left
[15:15] <tony-o_> ZoffixWin: there is a :color(False) parameter you can pass to Dump(...) that I, apparently, forgot to document

[15:15] <tony-o_> i've added it to the readme, in response to issue #5 on Data::Dump

[15:17] <tony-o_> ZoffixWin: http://bit.ly/1ZVI19Y

[15:26] *** MARTIMM left
[15:28] *** raiph joined
[15:30] *** _Gustaf_ left
[15:30] *** sjoshi left
[15:32] *** nanis joined
[15:33] <nanis> Is there any chance MoarVM PR#5 might be looked at before the upcoming release?

[15:35] <pmurias> [Coke]: during make or make test?

[15:36] *** Upasaka left
[15:39] <pmurias> [Coke]: there is one large CPU consuming test (for a whole bunch of different regexes) maybe it's the culprit?

[15:41] *** vike joined
[15:41] <jnthn> nanis: PR#5?

[15:41] <jnthn> That's from 2013...

[15:42] <jnthn> nanis: Is there any benefit in including it in today's release?

[15:42] <nanis> jnthn: brain malfunction. I meant PR#337

[15:42] <jnthn> As in, does it actually fix something that's broken now?

[15:43] <nanis> Well, the warnings relating to the format specifier annoy me, but, no, there is no urgent need. I was just wondering, not trying to pressure.

[15:44] <jnthn> nanis: OK, out of an abundance of caution I'll merge it after today's release, then it's got a whole month to make sure it doesn't have any adverse side-effects (though I agree it seems unlikely)

[15:45] <nanis> Yeah, there is no reason to risk problems with an impending release. Good luck.

[15:45] <jnthn> OK, cool. Thanks for the PR.

[15:45] <nanis> Thanks for looking into it.

[15:47] *** brrt left
[15:48] <[Coke]> pmurias: it was running "node" something. it's dead now, I have no idea, sorry.

[15:49] *** eyck joined
[15:50] * RabidGravy concludes he has irreversibly shagged up his rakudo installation nukes and reinstalls

[15:54] *** cognominal left
[15:55] <arnsholt> Mmmm. Smells like git clean -xdf =)

[15:55] <DrForr> With a faint note of teen spirit.

[15:56] <ugexe> fireartist: i think that happens (your ssl problem) when an optional module is installed *after* the module that uses it gets installed

[15:57] <sjn> anyone here arrived in Brussels yet? :)

[15:57] *** cognominal joined
[15:57] *** ggoebel15 joined
[15:57] <DrForr> Arriving tomorrow morning around 10am.

[15:58] <fireartist> ugexe: hmm, can't remember for sure if I deleted .precomp - that may be it

[15:58] *** ggoebel14 left
[15:59] * sjn is thinking about dinner tomorrow, and considering http://hemgies.be/ (fusion burger restaurant, close to Delirium)

[15:59] <ely-se> What's happening in Brussels?

[15:59] <DrForr> FOSDEM.

[16:00] <sjn> biggest open source conference in Europe

[16:00] <ely-se> dammit

[16:01] <ely-se> I missed it last year and this year I miss it again

[16:01] <sjn> ely-se: phone calendar events ftw :)

[16:02] *** edehont left
[16:03] *** nakiro left
[16:03] *** Kogurr joined
[16:03] *** fireartist left
[16:04] <RabidGravy> there's something horribly, horribly shagged up here

[16:05] <RabidGravy> something is segfaulting on the tests for META6 :(

[16:06] *** mauke` joined
[16:07] <mauke`> https://www.youtube.com/watch?v=i9oU7rfb-do

[16:08] <RabidGravy> mmap(NULL, 1122, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f99caa14000

[16:08] <RabidGravy> mprotect(0x7f99caa14000, 1122, PROT_READ|PROT_EXEC) = 0

[16:08] <RabidGravy> --- SIGSEGV {si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0x10} ---

[16:08] <RabidGravy> +++ killed by SIGSEGV (core dumped) +++

[16:08] <RabidGravy> boom

[16:09] *** Actualeyes left
[16:09] *** Guest27803 left
[16:09] *** vendethiel joined
[16:11] *** Upasaka joined
[16:12] *** bowtie joined
[16:12] *** bowtie is now known as Guest58338

[16:19] <tony-o_> Perleone: what is supposed to happen with --doc?

[16:22] *** zengargoyle left
[16:22] <hoelzro> o/ #perl6

[16:23] <tony-o_> ZoffixWin: docs updated and PR merged

[16:25] *** lostinfog joined
[16:25] *** alber joined
[16:26] *** jojotus left
[16:28] *** jojotus joined
[16:28] *** ely-se left
[16:28] *** Actualeyes joined
[16:29] *** domidumont left
[16:30] *** psy joined
[16:30] *** psy left
[16:31] *** psy joined
[16:32] *** vendethiel left
[16:35] *** Guest58338 left
[16:36] *** bowtie_ joined
[16:36] *** musiKk joined
[16:47] <perlpilot> lizmat: I still have a few tuits (okay, a bunch :) that I got from you and woolfy at YAPC::NA 2013 that I'm handing out at $work this week.  Getting people fired up about YAPC and Perl.  lizmat++ woolfy++

[16:47] *** khw joined
[16:47] *** laz78 joined
[16:47] *** vendethiel joined
[16:47] *** regreg joined
[16:48] <perlpilot> (hopefully we send some people from $work to YAPC::NA this year)

[16:49] *** lokien_ left
[16:53] *** laz78 left
[16:54] *** laz78 joined
[16:57] <Hotkeys> Where is YAPC::NA this year?

[16:57] <Hotkeys>  (Does it change?)

[16:58] <RabidGravy> ZoffixWin, you can stop sending those PRs now, I'll be fixing them as and when I make a new release

[16:58] <RabidGravy> :)

[16:58] <perlpilot> Hotkeys: Orlando, FL

[16:59] <perlpilot> Hotkeys: yes, it changes.  Different venues bid on hosting it.

[16:59] *** pmurias left
[16:59] *** lokien_ joined
[17:00] <RabidGravy> so the "Missing serialize REPR function for REPR VMException" has come back and I have no way of determing from where

[17:00] <RabidGravy> :(

[17:00] <Hotkeys> I'd like to vote for Toronto for YAPC::NA 2017

[17:00] * Hotkeys is Canadian :p

[17:00] *** nanis left
[17:01] <perlpilot> Hotkeys: you'd have to get someone with access to a venue in Toronto to bid for the privilege to host YAPC::NA 2017 (and they'd have to win the bid)

[17:02] <perlpilot> Hotkeys: note that hosting a YAPC is not easy and may not be fun for the hoster

[17:02] <Hotkeys> Darn

[17:02] *** musiKk left
[17:07] *** TEttinger joined
[17:07] *** FROGGS left
[17:08] *** vendethiel left
[17:15] *** vendethiel joined
[17:17] *** donaldh joined
[17:22] <timotimo> RabidGravy: could that segfault happen because of some security module preventing read/write + execute? could fix it by turning off the jit

[17:23] <RabidGravy> possibly, I have a horrible feeling however that it is some horror hidden in the precomp stuff, I made it go away by changing the order of two "use" in the code

[17:25] <[Coke]> ** 2016.01 compiler release (much) later today; please test the prep branch with modules and other code.

[17:27] <timotimo> oof

[17:29] <dalek> nqp: 175e8a7 | donaldh++ | src/vm/jvm/stage0/ (10 files):

[17:29] <dalek> nqp: Update the JVM stage0 to unbust the JVM build.

[17:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/175e8a7251

[17:30] * donaldh notes there's missing ops on jvm

[17:31] *** regreg left
[17:31] <[Coke]> donaldh: there's a test in nqp that tells you which ones!

[17:31] *** domidumont joined
[17:32] <donaldh> [Coke]: Yep, I'll hopefully find cycles to implement them soon

[17:33] <[Coke]> donaldh++ I wanted a jvm perl 6 a while ago, but now I have docker, so I don't care so much. Thanks for keeping the lights on. :)

[17:33] <hoelzro> donaldh++

[17:33] <hoelzro> thanks for doing what I couldn't!

[17:34] <hoelzro> is that all it took? updating stage0?

[17:34] <donaldh> I don't know why it didn't complain about a missing op, instead giving a very obscure 'no method jast on NQPMu' error. I bisected it down to the nqp::readlinechompfh change.

[17:35] <donaldh> So yeah, update stage0, stash it, checkout master unstash and build.

[17:35] *** laz78 left
[17:35] <hoelzro> donaldh: does that fix the "tried to serialize ContextRef" error?

[17:36] <donaldh> Nope, we're back to "Missing serialize function for REPR ContextRef" in rakudo when trying to make install 

[17:36] <hoelzro> damn

[17:36] <hoelzro> well, at least my work over the last two nights hasn't been for nothing =)

[17:36] <moritz> \o

[17:37] * moritz finally has his laptop back and working

[17:37] <donaldh> I got to the bottom of that, but haven't figured a good solution.

[17:37] <hoelzro> does it fix the my e := e; parse error?

[17:37] <hoelzro> donaldh: oh, you did? what was it?

[17:39] <donaldh> From my notes: it serializes the CompUnit->CompUnit::Handle->CodeRef of the referenced precompiled module.

[17:39] <donaldh> https://gist.github.com/donaldh/0cf1160b5fc87d4ba457

[17:39] *** FROGGS joined
[17:40] <donaldh> That was over a month ago tho. So I need to reproduce again and try to fix it.

[17:41] <donaldh> What I couldn't explain was why it works on MoarVM.

[17:42] <[ptc]> m: sub moo{ 42.say }; moo / 7 ; # / ; die "this dies"

[17:42] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter ; (must be quoted to match literally)␤at /tmp/yHxYkFM50X:1␤------> 3sub moo{ 42.say }; moo / 77⏏5 ; # / ; die "this dies"␤Unable to parse regex; couldn't find final '/'␤at /tmp/yHxYkFM50X:…»

[17:42] <llfourn_> donaldh: fwiw it doesn't in a BEGIN context https://rt.perl.org/Public/Bug/Display.html?id=127302

[17:43] <llfourn_> that is caused by trying to serialize a CompUnit::Handle

[17:45] *** mithaldu_ joined
[17:47] <[ptc]> m: sub moo(Bool) { return 42 }; moo True / 4 ; # / ; die "fätich"

[17:47] <camelia> rakudo-moar 780192: OUTPUT«Type check failed in binding <anon>; expected Bool but got Rat␤  in sub moo at /tmp/W2OyDLxO2d line 1␤  in block <unit> at /tmp/W2OyDLxO2d line 1␤␤»

[17:48] <mithaldu_> m: sub moo(Int) { return 42 }; moo True / 4 ; # / ; die "fätich"

[17:48] <camelia> rakudo-moar 780192: OUTPUT«Type check failed in binding <anon>; expected Int but got Rat␤  in sub moo at /tmp/NNbqy_XWmM line 1␤  in block <unit> at /tmp/NNbqy_XWmM line 1␤␤»

[17:48] <donaldh> Looks a lot like CompUnit shouldn't keep CompUnit::Handles or something

[17:48] <mithaldu_> m: sub moo(Rat) { return 42 }; moo True / 4 ; # / ; die "fätich"

[17:48] <camelia> rakudo-moar 780192: ( no output )

[17:49] * donaldh will keep investigating later&

[17:49] *** donaldh left
[17:50] <mithaldu_> m: sub moo(Mu) { return 42 }; moo / 4 ; # / ; die "fätich"

[17:50] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter ; (must be quoted to match literally)␤at /tmp/S9gk36GIVq:1␤------> 3sub moo(Mu) { return 42 }; moo / 47⏏5 ; # / ; die "fätich"␤Unable to parse regex; couldn't find final '/'␤at /tmp/S9gk3…»

[17:50] <hoelzro> .tell donaldh godspeed, sir

[17:50] <yoleaux> hoelzro: I'll pass your message to donaldh.

[17:50] <hoelzro> I will continue to investigate myself

[17:51] *** abraxxa left
[17:52] *** SCHAAP137 joined
[17:52] *** ely-se joined
[17:52] <mithaldu_> m: sub moo { return 42 }; moo / 4 ; # / ; die "fätich"

[17:52] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter ; (must be quoted to match literally)␤at /tmp/w7Yee3ITar:1␤------> 3sub moo { return 42 }; moo / 47⏏5 ; # / ; die "fätich"␤Unable to parse regex; couldn't find final '/'␤at /tmp/w7Yee3ITa…»

[17:53] <mithaldu_> m: sub moo() { return 42 }; moo / 4 ; # / ; die "fätich"

[17:53] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter ; (must be quoted to match literally)␤at /tmp/axco32Xckr:1␤------> 3sub moo() { return 42 }; moo / 47⏏5 ; # / ; die "fätich"␤Unable to parse regex; couldn't find final '/'␤at /tmp/axco32X…»

[17:53] <mithaldu_> hmm, apparently i can't tell if to take 0 arguments 

[17:53] *** ely-se left
[17:55] <geekosaur> I think you want either constant or, if it's not, term:foo

[17:57] *** leont joined
[17:57] *** vendethiel left
[17:57] <tony-o_> m: sub moo { 42; }; moo() / 4 ; # / ; die "fätich"

[17:57] <camelia> rakudo-moar 780192: OUTPUT«WARNINGS for /tmp/dxkxbxcFZZ:␤Useless use of "/" in expression "moo() / 4" in sink context (line 1)␤»

[17:57] *** vendethiel joined
[17:58] *** xinming left
[17:58] *** dakkar_ left
[17:59] *** xinming joined
[18:01] *** dha joined
[18:03] *** firstdayonthejob joined
[18:03] *** sjoshi joined
[18:04] *** zengargoyle joined
[18:05] *** ajr_ joined
[18:06] *** rindolf left
[18:08] *** zengargoyle left
[18:11] <ugexe> m: sub moo { 42; }; say moo() / 4 ; # / ; die "fätich"

[18:11] <camelia> rakudo-moar 780192: OUTPUT«10.5␤»

[18:12] <RabidGravy> m: sub term:<moo> { 42 }; say moo / 4 ; # alternatively :)

[18:12] <camelia> rakudo-moar 780192: OUTPUT«10.5␤»

[18:16] <tony-o_> m: sub moo { 42; }; (moo / 4).say;

[18:16] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5=== Error while compiling /tmp/sBc5E42NR6␤Unable to parse regex; couldn't find final '/'␤at /tmp/sBc5E42NR6:1␤------> 3sub moo { 42; }; (moo / 47⏏5).say;␤    expecting any of:␤        argument list␤        infix stopper␤ …»

[18:17] <RabidGravy> somewhat LTA

[18:18] <AlexDaniel> huh… that's not cool

[18:18] <AlexDaniel>  m: sub moo { 42; }; (moo ÷ 4).say;

[18:18] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5=== Error while compiling /tmp/GPCzLzXson␤Preceding context expects a term, but found infix ÷ instead␤at /tmp/GPCzLzXson:1␤------> 3sub moo { 42; }; (moo ÷7⏏5 4).say;␤»

[18:18] <AlexDaniel> m: sub moo { 42; }; (moo * 4).say;

[18:18] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5=== Error while compiling /tmp/q8f8S2Aa9h␤Two terms in a row␤at /tmp/q8f8S2Aa9h:1␤------> 3sub moo { 42; }; (moo *7⏏5 4).say;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement e…»

[18:18] <tony-o_> weird

[18:18] <tony-o_> m: sub moo { 42; }; $(moo / 4).say;

[18:18] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Gv1hjIO6e4␤Unable to parse regex; couldn't find final '/'␤at /tmp/Gv1hjIO6e4:1␤------> 3sub moo { 42; }; $(moo / 47⏏5).say;␤    expecting any of:␤        argument list␤        infix stopper␤…»

[18:18] <jnthn> No, that's how listop syntax works

[18:19] <AlexDaniel> I've always thought that it is supposed to work

[18:19] <tony-o_> m: sub moo { 42; }; $(moo * 4).say;

[18:19] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5=== Error while compiling /tmp/gRcXbSf8wI␤Two terms in a row␤at /tmp/gRcXbSf8wI:1␤------> 3sub moo { 42; }; $(moo *7⏏5 4).say;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement …»

[18:19] <AlexDaniel> seems like I was wrong :/

[18:19] <jnthn> m: sub moo { 42; }; (moo() * 4).say;

[18:19] <camelia> rakudo-moar 780192: OUTPUT«168␤»

[18:19] <jnthn> It's the reason you can write things like: is $foo, 'bar'

[18:19] <jnthn> Instead of having to put the parens

[18:20] <tony-o_> maybe interesting is more appropriate than 'weird'

[18:20] <AlexDaniel> is there really no way to make it figure it out?

[18:20] <jnthn> Perl 6 always knows whether it's expecting a term of an infix (and by extension, you can too)

[18:21] <jnthn> term *or* an infix

[18:22] <jnthn> AlexDaniel: No, because "we know if we're expecting a term or an infix" is one of the most basic parsing rules in Perl 6; without it, it's ambiguous whether / is division or the start of a regex, for example

[18:23] <AlexDaniel> jnthn: ÷ is a division

[18:23] *** mauke` left
[18:23] <flussence> m: sub moo() { 42 }; $(moo * 4).say; # shouldn't it know to DTRT if the signature specifies 0 args?

[18:23] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5=== Error while compiling /tmp/rHgPgm3KBA␤Two terms in a row␤at /tmp/rHgPgm3KBA:1␤------> 3sub moo() { 42 }; $(moo *7⏏5 4).say; # shouldn't it know to DTRT if ␤    expecting any of:␤        infix␤        infix stopper␤   …»

[18:25] <tony-o_> m: sub moo() { 42; }; (moo/2).say;'

[18:25] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5=== Error while compiling /tmp/CQ7VBKLqKi␤Unable to parse expression in single quotes; couldn't find final "'" ␤at /tmp/CQ7VBKLqKi:1␤------> 3sub moo() { 42; }; (moo/2).say;'7⏏5<EOL>␤    expecting any of:␤        single quote…»

[18:25] <tony-o_> m: sub moo() { 42; }; (moo/2).say;

[18:25] <camelia> rakudo-moar 780192: OUTPUT«21␤»

[18:27] *** yurivish_ joined
[18:28] *** jast left
[18:28] *** jast joined
[18:29] <jnthn> flussence: No, that doesn't factor in to it

[18:29] <jnthn> Just define a term if that's what you want.

[18:29] <jnthn> m: sub term:<moo>() { 42 }; (moo/2).say

[18:29] <camelia> rakudo-moar 780192: OUTPUT«21␤»

[18:29] <jnthn> m: my \moo = 42; (moo/2).say

[18:29] <camelia> rakudo-moar 780192: OUTPUT«21␤»

[18:30] *** laz78 joined
[18:32] <RabidGravy> or turn the expression around ;-)

[18:32] <RabidGravy> m: sub moo { 42 };  ( 1/4 * moo ).say

[18:32] <camelia> rakudo-moar 780192: OUTPUT«10.5␤»

[18:34] *** laz78 left
[18:34] *** itaipu left
[18:39] *** laz78 joined
[18:44] <AlexDaniel> m: sub moo { 42; }; (moo R* 4).say;

[18:44] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5=== Error while compiling /tmp/UKA7zqeje_␤Undeclared name:␤    R used at line 1␤␤»

[18:46] *** alber left
[18:48] <sjoshi> x`/quit

[18:48] *** sjoshi left
[18:51] *** gtodd left
[19:00] *** ChoHag joined
[19:07] *** gtodd joined
[19:09] *** leont left
[19:11] *** addison_ joined
[19:11] *** abraxxa joined
[19:19] *** musiKk joined
[19:24] *** raiph left
[19:25] *** cdg left
[19:25] *** lnrdo joined
[19:32] *** musiKk left
[19:37] *** leont joined
[19:37] *** espadrine left
[19:37] *** abraxxa left
[19:38] *** frobisher joined
[19:38] *** dha left
[19:39] *** frobisher is now known as dha

[19:43] *** tmtowtdi joined
[19:50] *** lnrdo left
[19:51] *** abraxxa joined
[19:51] *** yqt joined
[19:51] *** ely-se joined
[19:52] *** musiKk joined
[19:54] *** tmtowtdi left
[19:54] *** rindolf joined
[19:54] *** tmtowtdi joined
[19:58] *** Actualeyes left
[19:59] *** lokien_ left
[20:02] *** bowtie_ left
[20:03] *** bowtie joined
[20:03] *** bowtie is now known as Guest11695

[20:04] <Hotkeys> I enjoy doing project euler stuff in one line in p6

[20:04] *** gtodd left
[20:04] <Hotkeys> m:  say elems 1, 1, * + * ... *.Str.chars == 1000 # index of first fib number with 1000 digits

[20:04] *** lokien_ joined
[20:04] <camelia> rakudo-moar 780192: OUTPUT«4782␤»

[20:07] *** addison_ left
[20:09] *** gtodd joined
[20:09] <tony-o_> m: say elems 1, 1, * + * ... *.log(10).ceiling == 1000

[20:09] <camelia> rakudo-moar 780192: OUTPUT«Memory allocation failed; could not allocate 1304 bytes␤»

[20:12] *** yurivish_ left
[20:13] <AlexDaniel> m: say elems 1, 1, * + * … *.log(10).ceiling > 1000

[20:13] <camelia> rakudo-moar 780192: OUTPUT«1477␤»

[20:13] <AlexDaniel> m: say elems 1, 1, * + * ... * == -1

[20:13] <camelia> rakudo-moar 780192: OUTPUT«Memory allocation failed; could not allocate 944 bytes␤»

[20:14] <AlexDaniel> tony-o_: ↑ ?

[20:14] <tony-o_> too many bytes

[20:14] *** domidumont left
[20:14] <AlexDaniel> well :D

[20:14] <tony-o_> probably because that sequence never hits -1

[20:16] <AlexDaniel> tony-o_: just like it never hits *.log(10).ceiling == 1000

[20:17] <tony-o_> yea

[20:21] *** abraxxa left
[20:25] *** laz78 left
[20:31] *** pmqs__ left
[20:34] *** darutoko left
[20:37] *** labster joined
[20:42] *** lizmat left
[20:42] <tony-o_> i have a rakudo build  with sample .travis.yml file that seems to work pretty well (along with zef + panda pre built) in case anyone is interested in faster travis testing, you won't need to build rakudo every go around.  https://github.com/tony-o/perl6-travis-bin

[20:44] *** lizmat joined
[20:46] <DrForr> Perl 6 runs internally in UTF-16, correct? At least as far as NativeCall is concerned?

[20:46] <nine> UTF-32

[20:46] <yoleaux> 14:40Z <lizmat> nine: are multiple copies of source files suppose to exist in install/share/perl6/sources?

[20:46] <DrForr> Thanks.

[20:47] <jnthn> NativeCall isn't concerned about our interanl string representation, because we encode the strings at the NativeCall boundaries.

[20:47] <Skarsnik> DrForr, depend x)

[20:47] <jnthn> The actual representation of str is opaque.

[20:48] <nine> .tell lizmat multiple copies of a source file are possible if you have multiple versions of the dist installed

[20:48] <yoleaux> nine: I'll pass your message to lizmat.

[20:48] <lizmat> computer: messages

[20:48] <yoleaux> 20:48Z <nine> lizmat: multiple copies of a source file are possible if you have multiple versions of the dist installed

[20:49] *** ELBeavers left
[20:49] <lizmat> nine: things like Test.pm ?

[20:49] *** sortiz joined
[20:49] <DrForr> Well, let me rephrase then. What encoding will a C function receive a char* string in? Looks like UTF-8 so far :)

[20:49] <sortiz> \o #perl6

[20:49] <lizmat> multiple copies of newline.pm ?

[20:50] <vendethiel> o/

[20:50] * DrForr really needs to find something to knock this cold onto its ass before Sunday :/

[20:51] <nine> lizmat: how many files are in your install/share/perl6/dist?

[20:52] <[Coke]> the perl6 tag on stackexchange is growing 

[20:52] <[Coke]> 8 new questions on my last email.

[20:52] <RabidGravy> cool

[20:53] <lizmat> nine: 2

[20:53] <AlexDaniel> [Coke]: so what does it mean?

[20:53] <RabidGravy> any actually interesting questions?

[20:53] <nine> lizmat: probably version 6.c and sooome other one

[20:54] <lizmat> 2 x "name" : "CORE",

[20:55] <[Coke]> AlexDaniel: so what does what mean?

[20:55] <AlexDaniel> [Coke]: perl6 tag on stackexchange is growing, so what?

[20:55] <lizmat> nine: ah, 2015.11-746-g47e04b6 and 2015.12-214-g775271d

[20:55] <[Coke]> ... er, stackoverflow, btw, not stackexchange. probably combining the former with experts exchange or something

[20:56] <[Coke]> it means more people are using perl6 in the wild.

[20:56] <DrForr> I actually had two PRs for Inline:{Scheme::}Guile in the last few days.

[20:56] <lizmat> nine: yeah, 6.b and 6.c

[20:57] * RabidGravy must get a grip before he turns this couchdb into some kind of crack induced ORM thingamujig

[20:57] <AlexDaniel> [Coke]: somehow I don't think that it is an accurate measure, especially when the number of questions is so low

[20:58] *** spider-mario joined
[20:58] *** zakharyas left
[20:58] <nine> lizmat: there you go :)

[20:58] <[Coke]> AlexDaniel: Then ignore and stop giving me a hard time. :)

[20:58] <dha> Wild Perl 6

[20:58] <[Coke]> ignore *it

[20:58] <AlexDaniel> [Coke]: sorry :)

[20:58] <tony-o_> perl6 - buck wild

[20:59] <lizmat> but "module NativeCall" occurs 4 times in install/share/perl6/sources

[20:59] <lizmat> hmmm... actually 5 times

[21:00] *** addison joined
[21:01] <AlexDaniel> it would be interesting to count the total amount of PRs, issues and commits in the whole ecosystem. If that was graphed over time, perhaps it could give a couple of interesting figures

[21:01] <jnthn> lizmat: Is this in a "clean" install, or maybe they are left over from the last weeks?

[21:01] <AlexDaniel> I'm not volunteering for that yet though :D

[21:03] *** kaare_ left
[21:04] <AlexDaniel> m: my @l is default(die)

[21:04] <camelia> rakudo-moar 780192: OUTPUT«===SORRY!===␤Died␤»

[21:04] <jnthn> You asked for it :P

[21:04] <AlexDaniel> jnthn: true but it didn't tell me where it died

[21:05] <lizmat> nine jnthn dates are Dec 23 (2x) / 27 / Jan 3 / 28

[21:06] <AlexDaniel> m: my @l is default(*)

[21:06] <camelia> rakudo-moar 780192: ( no output )

[21:06] <AlexDaniel> m: my @l is default(*); say @l[100]

[21:06] <camelia> rakudo-moar 780192: OUTPUT«*␤»

[21:06] <AlexDaniel> m: my @l is default(*); say @l[100].WHAT

[21:06] <camelia> rakudo-moar 780192: OUTPUT«(Whatever)␤»

[21:06] <AlexDaniel> m: my @l is default(*); say @l[100](5)

[21:06] <camelia> rakudo-moar 780192: OUTPUT«Cannot find method 'CALL-ME'␤  in block <unit> at /tmp/E_sXhXWRYu line 1␤␤»

[21:07] <lizmat> m: *(5)   # AlexDaniel: golfed

[21:07] <camelia> rakudo-moar 780192: OUTPUT«Cannot find method 'CALL-ME'␤  in block <unit> at /tmp/sYS_noYlDW line 1␤␤»

[21:08] <AlexDaniel> lizmat: yeah, I've seen that many times

[21:08] <AlexDaniel> lizmat: didn't feel that it was worth a bug report though

[21:09] <lizmat> perhaps Whatever and HyperWhatever need a CALL-ME with a better error message

[21:09] <AlexDaniel> ok I'll submit that

[21:09] <jnthn> I don't like adding methods just to report errors

[21:09] <jnthn> Breaks introspection

[21:09] <jnthn> Any smarts want to go into X::Method::NotFound.

[21:10] * moritz would be fine with * being used as a function being the identity function

[21:11] <AlexDaniel> m: my $x = 5; my @l is default($x); say @l[100]

[21:11] <camelia> rakudo-moar 780192: OUTPUT«(Any)␤»

[21:12] <anthk_> why shifting 8 bytes to the left on 0x6a doesnt't yield to 0x6a00?

[21:12] <moritz> anthk_: bits or bytes?

[21:13] <anthk_> bits sorry

[21:13] <DrForr> m: say 0x6a << 8

[21:13] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5=== Error while compiling /tmp/GbbQcWUhJ0␤Unsupported use of << to do left shift; in Perl 6 please use +< or ~<␤at /tmp/GbbQcWUhJ0:1␤------> 3say 0x6a <<7⏏5 8␤»

[21:13] <DrForr> m: say 0x6a +< 8

[21:13] <camelia> rakudo-moar 780192: OUTPUT«27136␤»

[21:13] <moritz> m: say (0x6a +< 8).fmt('%x')

[21:13] <camelia> rakudo-moar 780192: OUTPUT«6a00␤»

[21:13] <DrForr> m: say sprintf "%x, 0x6a +< 8

[21:13] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5=== Error while compiling /tmp/AFFiXxkU8l␤Unable to parse expression in double quotes; couldn't find final '"' ␤at /tmp/AFFiXxkU8l:1␤------> 3say sprintf "%x, 0x6a +< 87⏏5<EOL>␤    expecting any of:␤        postfix␤»

[21:14] <moritz> anthk_: looks like it does what you want

[21:14] * DrForr shuts up before typoing more :)

[21:14] *** lnrdo joined
[21:14] <moritz> m: say (0x6a +< 8).base(16)

[21:14] <camelia> rakudo-moar 780192: OUTPUT«6A00␤»

[21:15] <anthk_> then why " @memory[$PC] +< 8 " being @memory[$PC] = 0x6a doesn't add two zeros? 

[21:15] <anthk_> it gives me 0100 in all operations, no matter the hex value in that value of the array

[21:16] *** rindolf left
[21:16] <AlexDaniel> m: my @memory = 0x6a; say (@memory[0] +< 8).base: 16

[21:16] <camelia> rakudo-moar 780192: OUTPUT«6A00␤»

[21:17] <moritz> anthk_: at least one of your assumptions is wrong

[21:17] <DrForr> anthk_: Maybe your data isn't what youtink it is?

[21:17] <DrForr> *you think

[21:17] <moritz> or maybe you're not printing the result in hex?

[21:17] <AlexDaniel> m: my @memory = 0x6a; @memory[0] +<= 8; say @memory[0].base: 16

[21:17] <camelia> rakudo-moar 780192: OUTPUT«6A00␤»

[21:17] <anthk_> say "MEM0   :", (@memory[$PC] ).list.fmt("%02x");

[21:17] <anthk_> that's how I print the initial value

[21:18] <anthk_>  say "MEM0<<8:", (@memory[$PC] +< 8 ).list.fmt("%04x");

[21:18] <anthk_> and that's the shifted one

[21:19] <AlexDaniel> m: my @memory = 0x6a; say @memory[0].fmt(‘%02x’); @memory[0] +<=8; say @memory[0].fmt(‘%04x’)

[21:19] <camelia> rakudo-moar 780192: OUTPUT«6a␤6a00␤»

[21:19] <anthk_> obviously, the last opcode value gets wrong

[21:19] <anthk_> this

[21:19] <anthk_> http://sha-bang.de/18_nethack/nethack-1.3d-revived_20071014.tar.gz

[21:19] <anthk_> ops sorry

[21:19] <anthk_> $opcode = ((@memory[$PC] +< 8) +| (@memory[$PC+1]));

[21:19] <anthk_> this

[21:20] <timotimo> it could very well be @memory[$PC] ends up being a list accidentally

[21:20] <moritz> anthk_: please show a minimal, runnable example that produces the wrong value

[21:20] <timotimo> so with +< 8 you'd just shift the number of elements in the list to the left

[21:20] <timotimo> and that'd probably give you the same result every time

[21:20] <moritz> try to say @memory.perl

[21:21] <anthk_> too long to post, moritz 

[21:22] <[Coke]> so, one of your assumptions is wrong, if you can't reduce the code required to duplicate it, and you can't use the samples provided above to help, I'm not sure what else can be done.

[21:22] <[Coke]> I would dump your data right before the offending section  with .perl so you can see exactly what it is you're operating on.

[21:22] <moritz> anthk_: that's why I'm asking for a *minimal* example

[21:23] <[Coke]> then you can move that into a short example where you set a variable to that .perl output, and run the one line and dump the results.

[21:23] <moritz> anthk_: fill the array with constants; if that makes the problem go away, the array contents aren't what you think they are

[21:23] <[Coke]> We need to put together a "how to ask for help so we can help you" doc.

[21:23] <moritz> anthk_: when you try to golf the problem to something smaller, you usually stumble about the actual problem very quickly; if not, we have a minimal example to run and examine

[21:24] <[Coke]> (something friendly. not like Perl programmers on FB where every thread ends with "YOU'RE DOING IT WRONG GO READ THIS"

[21:24] <DrForr> *cough* :)

[21:25] <timotimo> someone on twitter posted "I have strong belief that Perl6 will come out..."

[21:25] <AlexDaniel> [Coke]: so far there were no problems with that. But it would be cool to have a quick guide on “how to find a problem in your code” or something. That could suggest --ll-exception, .perl and other stuff

[21:26] *** cdg joined
[21:26] <[Coke]> timotimo: like, of the closet? or that we'll do a release someday?

[21:26] <timotimo> i wonder if i'll reply with something like "i have strong belief that humans will walk on the moon" or so

[21:27] <[Coke]> AlexDaniel: also a section on just basic debugging.

[21:27] <stmuk> faq entries?

[21:27] <anthk_> the type of each value of the array is uint8 :|

[21:28] <timotimo> ah, so @memory is a native array, i see. and $PC is a single value, not a list of some kind?

[21:28] <timotimo> now the output of @memory[$PC] is interesting

[21:28] <timotimo> the .perl of that

[21:28] <anthk_> $PC is 512 by default, it gets incremented over a cycle

[21:29] <anthk_> twice

[21:29] <AlexDaniel> m: my uint8 @memory = 0x6a; say @memory[0].list.fmt(‘%02x’); @memory[0] +<=8; say @memory[0].list.fmt(‘%04x’)

[21:29] <camelia> rakudo-moar 780192: OUTPUT«6a␤0000␤»

[21:29] <AlexDaniel> ta-daa!

[21:29] *** rindolf joined
[21:29] <anthk_>  :Buf[uint8].new(106)

[21:29] <masak> timotimo: "I have a strong belief that we will some day be able to harness water power for electricity"

[21:29] <DrForr> timotimo: But not strong enough to actually take 2 minutes to see if it has been.

[21:31] <anthk_> say "MEM0   :", (@memory[$PC]).perl; 

[21:31] <anthk_> MEM0   :Buf[uint8].new(106)

[21:31] <anthk_>  

[21:32] <anthk_> and then say "MEM0<<8:", (@memory[$PC] +< 8).perl;

[21:32] <anthk_> MEM0<<8:256

[21:32] * DrForr notes that uint8 shifted by 8 bits is 0. Maybe it's not shifting into the previous byte as you wantd?

[21:32] <masak> m: say 1 +< 8

[21:32] <camelia> rakudo-moar 780192: OUTPUT«256␤»

[21:33] <masak> anthk_: it's numifying the 1-element Buf to 1

[21:34] <masak> anthk_: it's a bit unintuitive to me why indexing a Bug wouldn't yield a uint8 rather than a Buf[uint8] -- but maybe there's a good explanation for that

[21:36] <lizmat> m: 42 / 0   # shouldn't this at least complain about values used in sink context

[21:36] <camelia> rakudo-moar 780192: ( no output )

[21:36] <lizmat> m: 42

[21:36] <camelia> rakudo-moar 780192: OUTPUT«WARNINGS for /tmp/hpZHgNSaBt:␤Useless use of constant integer 42 in sink context (line 1)␤»

[21:37] <lizmat> m: use fatal; 42 / 0   # or throw ?

[21:37] <camelia> rakudo-moar 780192: ( no output )

[21:37] <lizmat> m: say 42 / 0   # like this?

[21:37] <camelia> rakudo-moar 780192: OUTPUT«Attempt to divide 42 by zero using div␤  in block <unit> at /tmp/UzHo1juUsd line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/UzHo1juUsd line 1␤␤»

[21:39] <geekosaur> I think that if you are looking for "something that works", "perl5 will come out" means star

[21:39] <[Coke]> m: say Bug

[21:39] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5=== Error while compiling /tmp/u2gj8CtpKL␤Undeclared name:␤    Bug used at line 1. Did you mean 'Bag', 'Buf'?␤␤»

[21:39] <geekosaur> works out of the box, that is

[21:39] <sortiz> anthk_, In your example, @memory[$PC] isn't an uint8 but a Buf[uint], not the same thing, so @memory[$PC] +< 8 is coercing the Buf to 1 before the shift.

[21:40] <anthk_> sortiz: could I cast uint to Int in Perl6?

[21:40] <ZoffixWin> m: my unit8 $x = 0; --$x for ^10; say $x

[21:40] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5===␤Type 'unit8' is not declared. Did you mean 'uint8'?␤at /tmp/55fJgPnKOm:1␤------> 3my unit87⏏5 $x = 0; --$x for ^10; say $x␤Malformed my␤at /tmp/55fJgPnKOm:1␤------> 3my7⏏5 unit8 $x = 0; --$x for ^10; say $x␤␤»

[21:40] <ZoffixWin> m: my uint8 $x = 0; --$x for ^10; say $x

[21:40] <camelia> rakudo-moar 780192: OUTPUT«246␤»

[21:41] <ZoffixWin> m: my uint64 $x = 0; --$x for ^10; say $x

[21:41] <camelia> rakudo-moar 780192: OUTPUT«-10␤»

[21:41] <[Coke]> jnthn: how feasible is 127395 ?

[21:42] <sortiz> anthk_, in generañ you don't need that. Why are you using a Buf in the first case?

[21:43] <anthk_> the memory is composed of the contents of a file

[21:44] <anthk_> I've just used '  while not $fh.eof {memory[$PC + $i] = $fh.read(1);$i++;} '

[21:44] <ZoffixWin> Interesting. The above bug only affects the 64 variant :/

[21:44] <anthk_> that's just the raw contents of the file, byte per byte

[21:46] *** lnrdo left
[21:46] <sortiz> anthk_, But your read don't returns ints, returns Bufs, so in your array are the objects not ints

[21:46] <anthk_> In theory, using  (@memory[$PC].Int +< 8) should work :|

[21:47] <anthk_> oh, I understand

[21:47] *** xlat joined
[21:47] <ZoffixWin> m: my num64 $x = Num.new: -2**60; --$x for ^3; say $x

[21:47] <camelia> rakudo-moar 780192: OUTPUT«-1.15292150460685e+18␤»

[21:48] <sortiz> You see the ints bc you are using .list that returns the ints in the Buf, but you are not modifying the Buf contents.

[21:48] <anthk_> I am reading about .unpack from Buf

[21:49] <anthk_> sortiz:  yes, I realized now 

[21:49] <sortiz> You can see a Buf as a list on ints of some size, uint8 in your case.

[21:50] *** lnrdo_ joined
[21:50] <anthk_> .list.Int will cast the contents to Int?

[21:51] <anthk_> at least while taking the value and shifting it a byte

[21:51] *** telex left
[21:51] <sortiz> anthk_, Now, if you want the content of your file, you can read it in one Buf, not an array of Bufs.

[21:52] *** telex joined
[21:54] <xlat> m: my $string="é"; $string ~~ / </ $<base>=<:Letter> $<marks>=[<:Mark>+] /> /; say $<> #S15.html#Grapheme_Explosion

[21:54] <camelia> rakudo-moar 780192: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter < (must be quoted to match literally)␤at /tmp/asNLrtLqQA:1␤------> 3my $string="é"; $string ~~ / <7⏏5/ $<base>=<:Letter> $<marks>=[<:Mark>+] ␤Two terms in a row␤at /tmp/asNLrtLqQA:1␤---…»

[21:55] <anthk_> So I have to use $fh.read with the entire content of bytes?

[21:56] <anthk_> I mean, read the whole file at once

[21:56] <sortiz> anthk_, Yes, and Buf does Positional, so you can index individual elements of it.

[21:56] *** bjz_ left
[21:57] <anthk_> the difficult stuff is to map the file from the 512th place of the @memory array because is the standard for the chip8

[21:57] <sortiz> anthk_, So don't need any array.

[21:57] <RabidGravy> subbuf

[21:57] *** sufrostico joined
[21:58] <anthk_> I mean, a position in the memory array from the 512th byte holds another one from the file, until it finishes

[21:59] <sortiz> anthk_, ^^^^ read what RabidGravy wrote about subbufs 

[22:00] <jnthn> [Coke]: My gut feeling says yes :)

[22:00] <AlexDaniel> fucking stackoverflow does not let me use my full name. Who said that the name has to be <= 30 characters?

[22:00] <jnthn> [Coke]: (as in, should be doable)

[22:01] <jnthn> AlexDaniel: StackOverfl did :)

[22:01] *** addison left
[22:02] <[Coke]> jnthn: has to switch to a runtime exception, I assume.

[22:05] <xlat> Hi, is there a way to use Grapheme Explosion in regex?

[22:05] *** skids left
[22:06] *** sufrostico left
[22:10] *** addison joined
[22:11] *** abraxxa joined
[22:11] <abraxxa> Skarsnik: I'm updating my rakudo now to find out why panda doesn't find Data::Dump

[22:12] <Skarsnik> Na it's travis

[22:12] <Skarsnik> the travis build fail

[22:12] <ZoffixWin> m: my uint8 $num = 0; say $num--;

[22:12] <camelia> rakudo-moar 780192: OUTPUT«256␤»

[22:12] <Skarsnik> because it does not have data::dump

[22:12] <Skarsnik> it's not from you

[22:12] <ZoffixWin> I kinda expected that to give me 0 :S

[22:12] <jnthn> ZoffixWin: *native* int :)

[22:12] <abraxxa> Skarsnik: https://travis-ci.org/perl6/DBIish/builds/105532237#L1056

[22:12] <anthk_> could .splice work with blobs?

[22:13] <ZoffixWin> jnthn, what's the implication? The post-decrement/increment operators are broken?

[22:13] <Skarsnik> and why does itneed data::dump? x)

[22:13] <abraxxa> Skarsnik: you suggested it to show the type/values failures

[22:14] <jnthn> ZoffixWin: The implication is that we compile a -- into the same kind of thing your C compiler does

[22:14] <Skarsnik> Yes to debug or test localy, but I am not sure we want the user to have it x)

[22:14] <Skarsnik> uint8 does not work

[22:14] <Skarsnik> some other unsigned type work

[22:15] <ZoffixWin> m: my int8 $num = 0; say $num--;

[22:15] <camelia> rakudo-moar 780192: OUTPUT«0␤»

[22:15] <ZoffixWin> m: my uint $num = 0; say $num--;

[22:15] <camelia> rakudo-moar 780192: OUTPUT«0␤»

[22:15] <ZoffixWin> jnthn, um :/ the rest of them seem to work fine

[22:15] <jnthn> ZoffixWin: oh, I misread...hmmmm

[22:16] <jnthn> ZoffixWin: Yeah, something is off there

[22:16] <jnthn> I thought you were looking at the result

[22:16] <ZoffixWin> Nah :)

[22:16] <jnthn> Also I'm doing too many things at once

[22:16] <ZoffixWin> :D

[22:16] * jnthn stops answering things wrong and tries to get the MoarVM release right :)

[22:16] <ZoffixWin> wooo \o/

[22:18] <abraxxa> Skarsnik: I don't think there is already a way to specify test-only deps

[22:18] <ugexe> test-depends

[22:19] *** laz78 joined
[22:19] <Skarsnik> m: my uint32 $a = 2**32 - 1; say $a; say ++$a;

[22:19] <camelia> rakudo-moar 780192: OUTPUT«4294967295␤0␤»

[22:19] *** FROGGS left
[22:20] <Skarsnik> it work for uint32

[22:20] <Skarsnik> but not uint8

[22:20] <Skarsnik> oh wait you --

[22:21] <abraxxa> ugexe: just instead of depends?

[22:22] <ugexe> yes

[22:22] <abraxxa> ugexe: thanks!

[22:24] <ZoffixWin> Skarsnik, there's an inconsistency with overflows too. I think I'll rakudobug a "inconsitencises with natives" ticket later today

[22:24] *** FROGGS joined
[22:25] <Skarsnik> and it should probably give 255

[22:25] <Skarsnik> Like you expect to get back at max value like C will do

[22:25] *** lnrdo_ left
[22:27] <anthk_> ok, I created a buffer from a file

[22:27] <anthk_>   my Buf $rom = slurp $file, :bin;

[22:27] <anthk_> but still the contents of each element in the buffer is uint

[22:28] *** ely-se left
[22:31] <anthk_> ok, it was a Int with $rom.list.[$value] , sorry

[22:31] <anthk_> my bad 

[22:31] *** spider-mario left
[22:32] *** spider-mario joined
[22:32] <abraxxa> Please remove leading 'v' from perl version in JSON::Fast's meta info.

[22:32] <abraxxa> just seens in my Travis log

[22:35] <sortiz> abraxxa, I see too when building Panda from R* RC2 yesterday.

[22:38] *** rindolf left
[22:39] *** laz78 left
[22:40] <abraxxa> Skarsnik: do i need a 'panda update'

[22:41] <Skarsnik> In travis?

[22:41] <abraxxa> yes

[22:41] <Skarsnik> Why lol?

[22:41] <Skarsnik> travis rebuild rakudo/panda

[22:42] <Skarsnik> everytime

[22:42] <abraxxa> and does panda fetch the module list on install/first use?

[22:43] *** alpha123 left
[22:43] <abraxxa> sortiz: same for Data::Dump

[22:43] *** laz78 joined
[22:46] <anthk_> ok, now it works, thanks. 

[22:47] *** FROGGS left
[22:48] *** xlat left
[22:52] <sortiz> Panda includes in ext/ its own JSON__Fast, but not the one fixed.

[22:52] *** dha left
[22:52] *** cpage_ left
[22:56] <sortiz> .seen tadzik

[22:56] <yoleaux> I saw tadzik 25 Jan 2016 11:38Z in #perl6: <tadzik> Virtual Man?

[22:56] <tadzik> I'm here

[22:56] *** wamba left
[22:56] <masak> 'night, #perl6

[22:57] <lizmat> night masak 

[22:57] <sortiz> tadzik, Is panda using the included JSON_Fast, no?

[22:57] <jdv79> l8r

[22:57] <tadzik> should

[22:57] <Skarsnik> abraxxa, probably need some added stuff in DBIIsh .travis file, since it has not depandacy

[22:57] <abraxxa> Skarsnik: hm?

[22:58] <Skarsnik> well DBIish depend on nothing

[22:58] <sortiz> That copy don't has the v thing fixed in Meta6.json

[22:58] <Skarsnik> so that why panda is probably not installed in the script

[23:00] *** kshannon joined
[23:00] *** bpmedley joined
[23:03] *** addison left
[23:06] *** bpmedley left
[23:06] *** vendethiel left
[23:07] *** musiKk left
[23:08] *** sena_kun joined
[23:09] *** alpha123 joined
[23:10] *** kshannon left
[23:10] *** Skarsnik left
[23:10] *** kshannon joined
[23:12] <timotimo> moritz: a random comment, looking at your latest mail to the perl6-language went via a non-encrypted server (which gives me a red frowny face in my client): faui2k3 => la.mx.develooper.com; is there anything you can do about that?

[23:13] *** vendethiel joined
[23:13] <lizmat> m: my %h; %h{Str}   # LTA error message

[23:13] <camelia> rakudo-moar 780192: OUTPUT«Cannot unbox a type object␤  in block <unit> at /tmp/eCncIPTFji line 1␤␤»

[23:20] <timotimo> probably not

[23:20] <sena_kun> Are there any included type of list/vector/deque I can use to push elems from the beginning? reverse.push.reverse do the trick, but seems quite sad.

[23:20] <timotimo> why not just ".shift"? :)

[23:20] <TimToady> or unshift

[23:20] <timotimo> there's also prepend as an equivalent to .append

[23:20] <timotimo> er, yes, unshift, sorry

[23:20] *** bpmedley joined
[23:20] <timotimo> sometimes i get confused

[23:20] <Juerd> That's as much equivalent as -42 == 42 ;)

[23:20] <TimToady> prepend/append are for lists, unshift/push are for single things

[23:20] <sena_kun> Thanks, unshift is right.

[23:20] <sena_kun> Need time to read more docs.

[23:20] *** lostinfog left
[23:23] <japhb> .

[23:23] <yoleaux> 27 Jan 2016 23:41Z <lizmat> japhb: I am curious how you actually got Date subclassing to work: class A is Date { has $.a }; dd A.new(:2016year,:42a).a gives Any instead of 42

[23:24] <lizmat> japhb  o/

[23:24] <japhb> .tell lizmat I only ever tried making subclassing Date and mixing in a role at the same time.  That used to work, and was broken.

[23:24] <yoleaux> japhb: I'll pass your message to lizmat.

[23:24] <japhb> Oh hai!

[23:25] <lizmat> .

[23:25] <yoleaux> 23:24Z <japhb> lizmat: I only ever tried making subclassing Date and mixing in a role at the same time.  That used to work, and was broken.

[23:25] <japhb> *making a subclass of Date

[23:26] <lizmat> ok, I wonder what the opinion is about subclassing Date / Set / Bag / other composite builtin types

[23:26] <japhb> lizmat: Which is to say, I never tried the precise case you have (direct subclass with added attribute, no role involved)

[23:27] <japhb> I think in general it's really useful to be able to do that.

[23:27] <lizmat> I wonder what TimToady thinks about that

[23:27] <japhb> Actually, come to think of it, here's my exact invocation:

[23:27] <japhb> class BusinessDate is Date does BusinessDateish { }

[23:28] <japhb> BusinessDateish being a role that adds four new attributes and a pile of methods.

[23:28] <japhb> And is reused for:

[23:28] <japhb> class BusinessDateTime is DateTime does BusinessDateish { }

[23:28] <lizmat> gotcha

[23:31] *** perlawhirl joined
[23:31] *** skids joined
[23:33] *** vendethiel left
[23:34] <perlawhirl> hi perlers

[23:34] <lizmat> perlawhirl  o/

[23:35] <perlawhirl> hi liz. i actually came to ask a question but just figured it out

[23:36] <perlawhirl> i'll ask anyway in case there's a "better" way (choose your own definition of better :D )

[23:36] <perlawhirl> i was just trying to remove a random element from an Array... landed on: @a.=pick(*).shift

[23:36] <perlawhirl> m: my @a = 1..10; say @a.=pick(*).shift; say @a.perl

[23:36] <camelia> rakudo-moar 780192: OUTPUT«5␤[7, 8, 2, 10, 1, 9, 4, 6, 3]␤»

[23:37] *** tmtowtdi left
[23:37] *** RabidGravy left
[23:37] <lizmat> perlawhirl: that works if you don't care about the order

[23:37] <lizmat> in which the values live in the array

[23:38] <perlawhirl> yeah, i don't... and if i did i could always sort after the shift

[23:38] <lizmat> but then you only need to do the pick(*) once

[23:38] <lizmat> and then just shift

[23:38] <perlawhirl> yeah, true

[23:38] <ZoffixWin> m: my $a = BagHash.new: <foo bar ber>; $a.grab; say $a

[23:38] <camelia> rakudo-moar 780192: OUTPUT«BagHash.new(ber, foo)␤»

[23:38] <perlawhirl> ahh, thanks Zoffix

[23:39] <ZoffixWin> That's not an array tho :P

[23:39] <perlawhirl> i am yet to play with Bags/Sets/etc 

[23:39] <Hotkeys> Ber isn't a standard placeholder silly 

[23:40] * perlawhirl wonders why Array doesn't have a grab method

[23:40] <timotimo> you should also be able to .pick(*-1), no?

[23:40] <lizmat> m: my $a = SetHash.new: <foo bar ber>; say $a.grab; say $a  # doesn't need to be a Bag

[23:40] <camelia> rakudo-moar 780192: OUTPUT«(bar)␤SetHash.new(ber, foo)␤»

[23:40] <ZoffixWin> Is there much difference between a set and a bag though? I only see the Integer vs. Real weights.

[23:40] <ZoffixWin> m: my $a = SetHash.new: <foo foo bar ber>; say $a.grab; say $a 

[23:40] <camelia> rakudo-moar 780192: OUTPUT«(ber)␤SetHash.new(foo, bar)␤»

[23:40] <Hotkeys> m: my @foo = 1..10; say @foo.pick(*-1)

[23:40] <camelia> rakudo-moar 780192: OUTPUT«Cannot call Numeric(WhateverCode: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at /tmp/PzqAu_QVFc line 1␤␤»

[23:41] <lizmat> Set doesn't have weights, only has truthiness

[23:41] <Hotkeys> timotimo: 

[23:41] <timotimo> mix has the Real weights

[23:41] <timotimo> you must be thinking of that

[23:41] <timotimo> heyo Hotkeys 

[23:41] <lizmat> ZoffixWin: you're mixing up Bags and Mixes :0)

[23:41] <ZoffixWin> Ah :D

[23:41] <Hotkeys> Doesn't work timotimo, just makes it angry

[23:42] <timotimo> oh

[23:42] <timotimo> too bad

[23:42] <lizmat> m: my @a = <foo bar baz>; say @a.grab   # too bad, would make sense to me

[23:42] <camelia> rakudo-moar 780192: OUTPUT«Method 'grab' not found for invocant of class 'Array'␤  in block <unit> at /tmp/BSf9IFHGVc line 1␤␤»

[23:42] <timotimo> should we perhaps allow that?

[23:42] <timotimo> pick and roll to accept WhateverCode?

[23:42] <Hotkeys> Seems reasonable

[23:43] <ZoffixWin> m: my @foo = 1..10; @foo.splice: @foo.elems.rand, 1; say @foo;

[23:43] <camelia> rakudo-moar 780192: OUTPUT«[1 2 4 5 6 7 8 9 10]␤»

[23:43] <timotimo> you sure you want .rand?

[23:43] <timotimo> only works because it casts to Int, eh?

[23:43] <lizmat> perhaps rakudobug it so it won't fall through the cracks

[23:43] <timotimo> too lazy :)

[23:43] <timotimo> distracted*

[23:43] <ZoffixWin> m: 5.rand.say

[23:43] <camelia> rakudo-moar 780192: OUTPUT«4.0167080428932␤»

[23:43] <ZoffixWin> eh :) it works :)

[23:46] <sortiz> pick uses rand.floor

[23:46] *** bpmedley left
[23:47] <timotimo> oh

[23:47] <timotimo> well, yeah

[23:47] *** bpmedley joined
[23:47] *** bpmedley left
[23:47] *** bpmedley joined
[23:47] *** vendethiel joined
[23:51] *** addison_ joined
[23:54] *** SCHAAP137 left
[23:57] <ZoffixWin> m: my str $foo = "bar"; $foo = "42"; say $foo

[23:57] <camelia> rakudo-moar 780192: OUTPUT«42␤»

[23:57] <ZoffixWin> What's the difference between str and Str?

[23:58] <perlawhirl> m: my str $foo = 'bar'; $foo.WHAT.say

[23:58] <camelia> rakudo-moar 780192: OUTPUT«(Str)␤»

[23:58] <perlawhirl> seems nothing

[23:59] <lizmat> str is native string, Str is a HLL string

[23:59] <perlawhirl> ahh of course... lc types are native

