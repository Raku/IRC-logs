[00:01] <lucasb> Most subs and methods in core P6 doesn't have a explicit return type constraint. But we all expect them to return sensible values. I'm not talking about return values in this .subst-mutate case. I'm talking about its side-effects: should it coerce the type of the subject to string or not.

[00:02] <RabidGravy> timotimo, it just hits nanosleep and doesn't return

[00:03] <Rotwang> RabidGravy: my last attempt: puts

[00:03] <Rotwang> : use NativeCall; sub puts(Str) is native returns int32 { * }; await start { puts("dupa") } xx 15

[00:03] <Rotwang> m: use NativeCall; sub puts(Str) is native returns int32 { * }; await start { puts("dupa") } xx 15

[00:03] <camelia> rakudo-moar e95c62: OUTPUT«(signal SEGV)»

[00:03] <Rotwang> if it doesn't convince you, nothing will [:

[00:04] <Rotwang> but, even if the function isn't thread safe, rakudo shouldn't crash

[00:04] <RabidGravy> Rotwang,  "const char *" argument

[00:04] <flussence> that one works locally

[00:04] <Rotwang> RabidGravy: so what?

[00:05] <Rotwang> RabidGravy: whats wrong with const cahr?

[00:05] <Rotwang> RabidGravy: you can't disagree with it, posix defines it as thread safe

[00:05] <Rotwang> it doesn't mess the internal rakudo loop

[00:05] <Rotwang> it just print to stodut

[00:05] <RabidGravy> and it works fine here strangely

[00:05] <Rotwang> and const char is a string in c

[00:05] <Rotwang> RabidGravy: try with more promises

[00:05] <Rotwang> many times

[00:06] <Rotwang> you'll hit it at some point

[00:06] <flussence> I tried xx 3000

[00:06] <Skarsnik> did you gdb where it crash?

[00:06] <Rotwang> Skarsnik: I have a coredump

[00:06] <Rotwang> it is 300MB [;

[00:07] <Skarsnik> Well good night, time to read/write ponies x)

[00:07] *** uruwi left
[00:08] <RabidGravy> woah, I do have a real genuine, non-threadsafe thing right in Rakudo though

[00:08] <flussence> tried xx 999_999 too, just to be sure. oddly it's only using half my cores

[00:09] <flussence> eating quite a lot of RAM though...

[00:09] <RabidGravy> m:  use NativeCall; await start { my $a = "dubba"; explicitly-manage($a); } xx 15

[00:09] <camelia> rakudo-moar e95c62: OUTPUT«Could not spawn thread: errorcode -1␤»

[00:09] <Rotwang> http://paste.lisp.org/display/304494

[00:09] <Rotwang> old coredump when I was playing with ssl

[00:10] <RabidGravy> ah, I think camelia might be shagged up

[00:10] <leont> AFAIK start uses a thread-pool, default max is something like 16?

[00:10] <RabidGravy> m:  use NativeCall; await start { my $a = "dubba"; explicitly-manage($a); } xx 7

[00:10] <camelia> rakudo-moar e95c62: OUTPUT«Incompatible MROs in P6opaque rebless␤  in block <unit> at /tmp/ual55YTupL line 1␤␤»

[00:10] <RabidGravy> that ^

[00:10] *** n0xff joined
[00:11] <RabidGravy> now that my friends is a genuine, incontrovertible bug in rakudo without any dodgy native call antics required

[00:11] <RabidGravy> leont++ # yes thank you

[00:11] *** llfourn joined
[00:12] <RabidGravy> It should really adjust itself somehow

[00:12] <RabidGravy> may even be 8 by default

[00:13] <Skarsnik> damn the explicitmanaged role is private in nc x)

[00:14] <RabidGravy> but I'm going to RT that one as that is quite scary

[00:15] <timotimo> RabidGravy: "doesn't return" is something with a very special meaning; is thatr eally what you meant?

[00:15] <RabidGravy> yes

[00:15] <RabidGravy> straced it

[00:15] <RabidGravy> it doesn't return from nanosleep

[00:15] <timotimo> in that case it can really mess with moarvm; but why wouldn't it return?

[00:16] *** llfourn left
[00:17] <RabidGravy> nanosleep may block the whole process not just the thread for instance

[00:17] <Skarsnik> wtf is explicitly-manage

[00:17] <Skarsnik> why does is create a new type

[00:18] <RabidGravy> I'm not in the mood to look in the Linux kernel to find out how nanosleep works

[00:18] <flussence> RabidGravy: doesn't return ever?

[00:19] *** nzkindest left
[00:19] <RabidGravy> well,   greater than 100 times longer than I asked it to sleep

[00:19] <flussence> ouch

[00:19] <RabidGravy> I got bored after that

[00:19] <leont> nanosleep shouldn't other threads, really

[00:19] <leont> *sleep

[00:20] <timotimo> shouldn't other threads? :)

[00:20] <RabidGravy> yeah, you wouldn't have thought so

[00:21] *** nzkindest joined
[00:21] *** user74747 left
[00:22] *** Skarsnik left
[00:23] <orbus> stumbling into the middle of a conversation, but the manpage in ubuntu says nanosleep should only make the current thread sleep

[00:23] <orbus> it uses the term "calling thread" several times

[00:24] <orbus> actually I guess it only *implies* it should only make the calling thread sleep

[00:24] <orbus> it doesn't really say anything about its effect on other threads :p

[00:25] <RabidGravy> yeah, it's surprising, but that's definitely what I'm seeing

[00:26] *** n0tjack left
[00:28] <orbus> m: say $*KERNEL

[00:28] <camelia> rakudo-moar e95c62: OUTPUT«linux (3.16.6.2.default)␤»

[00:28] <orbus> hrm, camelia has a newer kernel than me, so if it's a kernel bug it's not a new one

[00:30] <orbus> I was able to reproduce your failed test on freebsd, for whatever that's worth

[00:30] <orbus> same error

[00:31] <orbus> actually that's on a single core vm so if it's a concurrency problem I'm not sure I'd expect it to show up there

[00:31] <orbus> unless the vm layer is doing something funny behind the scenes

[00:33] <RabidGravy> no the kernel I have is even more recent

[00:33] <orbus> it does it on freebsd too, so it's not just linux

[00:37] * orbus afks

[00:37] <RabidGravy> yeah, it's in moarvm/libuv/pthread

[00:37] <flussence> there was a bug with early versions of promises where the perl6-land sleep() would block every thread too, wonder if it's the same bug

[00:38] <RabidGravy> entirely possible

[00:39] *** TimToady left
[00:39] <RabidGravy> I've RT'd the explicitly-manage thing as https://rt.perl.org/Ticket/Display.html?id=127145

[00:40] <RabidGravy> I'll have a better look at the nanosleep thing in the morning

[00:40] *** uruwi joined
[00:41] <RabidGravy> and if I can reproduce that I'll RT that too

[00:41] *** TimToady joined
[00:42] <timotimo> RabidGravy: camelia actually runs on a computer with 8 cores or so

[00:42] <Juerd> m: my uint $a = 255; say ++$a;

[00:42] <camelia> rakudo-moar e95c62: OUTPUT«256␤»

[00:42] <Juerd> eh

[00:42] <Juerd> m: my uint8 $a = 255; say ++$a;

[00:42] <camelia> rakudo-moar e95c62: OUTPUT«0␤»

[00:42] <Juerd> m: my uint8 $a = 255; say $a; ++$a; say $a;

[00:42] <camelia> rakudo-moar e95c62: OUTPUT«255␤256␤»

[00:43] <Juerd> Is ++$a in sink context implemented differently?

[00:43] <timotimo> Juerd: i'm a bit surprised because ++ is implemented in terms of $foo = $foo + 1

[00:43] <timotimo> oh

[00:43] <timotimo> oh, yeah, timtoady put something in the optimizer for that

[00:44] <RabidGravy> timotimo, but with a ulimit on memory/threads or whatever?  There does seem to be a hard constraint that I don't see here

[00:44] *** pkr joined
[00:44] <timotimo> don't know about that

[00:45] <RabidGravy> TBH I wouldn't take camelia as gospel on stuff like this anyway

[00:45] <pkr> Good morning!

[00:45] <RabidGravy> oops so it is

[00:46] <pkr> Is this the right channel for a question regarding panda installer?

[00:46] <gfldex> it is

[00:47] <timotimo> that's right

[00:48] <timotimo> i meant that as an answer to RabidGravy talking about camelia, but it also fits as an answer for the other thing

[00:48] <pkr> I am just experimenting with it and wanted to find a remove option. Did not find one. Is there a way to remove a module not only from disk but also from the database list?

[00:48] <RabidGravy> not currently

[00:49] <pkr> After removing I would like to see only the name without status "Installed".

[00:49] <Juerd> How do you run a test file manually, in a way that skips the "#?rakudo skip" things?

[00:49] <skids> perl6 testfile.t

[00:49] <Juerd> skids: That doesn't skip that thing

[00:49] <skids> Not if you run the unfudged file

[00:49] <RabidGravy> you need to run the test fudging thing

[00:50] <skids> Oh you want to skip, sorry

[00:50] <Juerd> Where do I find that, or documentation about it?

[00:50] <pkr> I have installed Net::Curl but want to use the option --path in order to install it in /opt/rakudobrew all together wit perl6.

[00:50] <skids> fudgeall rakudo file.t

[00:50] <skids> (or rakudo.moar or something)

[00:50] <RabidGravy> right, way past my bed-time, mouse and pumpkin already legged it

[00:51] <RabidGravy> have fun

[00:51] <skids> fudgeall is in roast which is c/o'ed in t/spec and it is in the base dir.

[00:51] <Juerd> Thanks

[00:51] *** raoulvdberge joined
[00:52] <skids> you may have to PERL6LIB=./packages (from roast cwd)

[00:54] *** n0xff left
[00:55] *** RabidGravy left
[01:13] *** llfourn joined
[01:14] *** yeahnoob joined
[01:16] *** lucasb left
[01:17] *** llfourn left
[01:22] *** pkr left
[01:32] *** wamba left
[01:35] *** Ben_Goldberg joined
[01:37] *** BenGoldberg left
[01:41] *** colomon left
[01:45] *** uruwi left
[01:47] <tadzik> hoelzro++'s rakudo hacking video is superawesome :) https://www.youtube.com/watch?v=adUdmol7cLU

[01:48] *** colomon joined
[01:50] *** uruwi joined
[01:56] *** colomon left
[01:57] *** colomon joined
[01:59] *** kaare_ joined
[02:01] *** araujo_ joined
[02:02] *** araujo left
[02:09] *** molaf__ joined
[02:12] *** llfourn joined
[02:12] *** nadim left
[02:12] <awwaiid> m: thing: "string" # what does this mean? it doesn't crash, and seems to return "string"

[02:12] <camelia> rakudo-moar e95c62: OUTPUT«WARNINGS for /tmp/ZpmE8PW1JK:␤Useless use of constant string "string" in sink context (line 1)␤»

[02:13] <skids> awwaiid: a label?

[02:13] *** molaf_ left
[02:14] <awwaiid> skids: looks like a label. do we have labels?

[02:14] <skids> Somewhat.

[02:15] <gfldex> https://doc.perl6.org/language/control#LABELs

[02:15] *** nadim joined
[02:16] <awwaiid> yep; --target=ast shows a LABEL in there somewhere. great, another ':'!

[02:16] <gfldex> the example aint that good. It's ment to be used to jump out of nested loops

[02:16] <awwaiid> yeah, like in P5

[02:17] *** avenj joined
[02:18] <skids> It is a pretty old page but... http://www.perlfoundation.org/perl6/index.cgi?witch_colon  # All the colons, some time ago.

[02:19] *** ghost_ left
[02:23] *** xpen joined
[02:25] *** colomon left
[02:26] *** xpen left
[02:26] <dalek> doc: a2356a0 | (Wenzel P. P. Peppmeyer)++ | doc/Language/control.pod:

[02:26] <dalek> doc: better example for LABELs

[02:26] <dalek> doc: review: https://github.com/perl6/doc/commit/a2356a05fc

[02:26] <dalek> doc: 3ba293c | (Wenzel P. P. Peppmeyer)++ | doc/Language/control.pod:

[02:26] <dalek> doc: Merge pull request #314 from gfldex/master

[02:26] <dalek> doc: 

[02:26] <dalek> doc: better example for LABELs

[02:26] <dalek> doc: review: https://github.com/perl6/doc/commit/3ba293c097

[02:26] *** xpen joined
[02:29] *** yqt left
[02:32] *** psy_ joined
[02:35] *** leont left
[02:39] *** nadim left
[02:40] *** nadim joined
[02:41] *** vendethiel joined
[02:45] *** ilbot3 left
[02:47] <troydm> is there a POE for p6?

[02:47] *** ilbot3 joined
[02:48] *** Guest26508 left
[02:50] <awwaiid> troydm: there is a built-in event system using whenever blocks. Pretty different approach than POE though, I think. Room for contributions.

[02:50] <skids> troydm: Perl 6 has it's own concurrency stuff built in.  You can graft other event systems in using it.

[02:51] *** kaare_ left
[02:51] <sammers> good morning from Japan... question about modules...

[02:51] <troydm> awwaiid: ic, okey

[02:52] <awwaiid> How can I slurp ALL the arguments of a sub? I feel like sub foo(**@args){...} is supposed to do it, maybe I'm not using it right. I call foo(:x) and it doesn't do what I expect

[02:52] <troydm> I haven't studied p6 concurrency yet,, i guess i'll take a closer look

[02:52] <skids> awwaiid: sub foo(|c) { } will get a capture including nameds

[02:52] <sammers> what are the advantages of using `unit module Foo::Bar` vs `class Foo::Bar {...}` when creating a module?

[02:53] <awwaiid> skids: ok, I'll look into that

[02:54] <skids> sammers: personally, I think just indenting.  But it might help the compiler improve error messages too.

[02:54] <sammers> to use Class?

[02:54] <skids> No to use unit

[02:54] <sammers> also, is there a way to include a local module using the full path?

[02:54] <sammers> ok

[02:54] <skids> Oh, you would use "unit class"

[02:54] <sammers> ah

[02:54] <skids> module versus class is a different matter

[02:54] <sammers> ok

[02:56] *** kid51 left
[02:57] <gfldex> sammers: you may want to have operators defined outside of the class, if you can't define a namespace that ain't class, where would you do that?

[02:58] <sammers> ok, this is probably a dumb question, in regards to p6 being multi-paradigm "Perl 6 offers procedural, object-oriented AND functional programming methodologies." are there any examples of a module being completely written fp? 

[02:58] <gfldex> sammers: there may also be constants and other stuff you may want to export, that don't belong into a class

[02:59] <gfldex> sammers: i have one that is nearly written FP, would that help?

[02:59] <sammers> gfldex: that was going to be my next question

[02:59] <sammers> gfldex, that would be great.

[02:59] <sammers> I just want to compare these paradigms in p6...

[02:59] <gfldex> https://github.com/gfldex/pod-to-bigpage/blob/master/lib/Pod/To/BigPage.pm6

[03:00] <gfldex> i pulled the counter out into a class because functional counting with concurrency is beyond my brains capabilities

[03:00] <awwaiid> skids: interesitng. so if I do foo(|c) and then mess with c, I can either c.list or c.hash. I'd love to be able to call foo(:a, 5, 2, :zoo) and get those params as-is

[03:01] <gfldex> sammers: also, that module got two entry points, depending on how you use it, see the README.md

[03:02] *** SwellJoe joined
[03:02] <skids> awwaiid: when inside .() named order is not preserved and duplicae names will cancel previous names.  That's just the calling convention.  If you need to work outside it you need to pass an array at the top level instead, or find some way to do something slangy.

[03:03] *** vendethiel left
[03:04] <awwaiid> skids: ok, thanks. I'm trying to do something slightly devious anyway, so that makes sense. I'm trying to pretend that a :foo pair is a ruby symbol, so I can do '[2, 4, 6, 8]':rb.push([:foo]).to_s and get "[2, 4, 6, 8, :foo]" back from ruby. Well -- I want to do .push(:foo) instead of .push([:foo]), that is.

[03:06] <skids> awwaiid: Pair.new might work.

[03:06] *** bpetering left
[03:07] <sammers> gfldex: thanks for sharing this, so as modules go we don't need to declare that it is a module anywhere, `unit class` works as well?

[03:07] *** noganex_ joined
[03:07] <skids> class is a module is a package.

[03:08] <gfldex> there is a class called BigPage around everything, what is a requirement for a POD renderer that is supposed to work together with rakudo

[03:08] <gfldex> rakudo will do the parsing and then call render with the POD::* tree

[03:09] *** noganex left
[03:12] <sammers> ah, ok, so if there is a module tree already available, in this case POD::, you can create a branch under it using the same namespace...

[03:12] <sammers> does that work for any module tree? or only core?

[03:12] <gfldex> any

[03:13] <sammers> ok

[03:14] <sammers> is it ok to do `unit module Foo::Bar` for everything? without class? then just put all of the subs in the same file, then have other files that represent other branches? (Foo::Bar::Something, Foo::Bar::SomethingElse) without using class anywhere?

[03:15] <gfldex> that will work

[03:15] <sammers> is there any downside to doing it that way?

[03:16] <sammers> I guess what I am asking, is using `class` really just for convention?

[03:16] *** colomon joined
[03:16] *** psy_ left
[03:17] <gfldex> a class is not just a namespace and it's getting a little late to name all properties of class on IRC

[03:17] <sammers> yeah, understood.

[03:17] <skids> sammers: class is where all the OO paradigm gets pulled in.  With just a module, all you have is subs.

[03:18] <skids> no instances, no methods, no inheritance, no roles.

[03:19] <gfldex> you can mixin rols into any object

[03:19] *** xxpor_lap left
[03:20] <ugexe> m: my %x = :a(1,2,3), :b(4); say %x<a b>; # how do i get (1, 2, 3, 4)?

[03:20] <camelia> rakudo-moar e95c62: OUTPUT«((1 2 3) 4)␤»

[03:21] <sammers> can you do something like `unit module Foo::Bar does Something`?

[03:22] <gfldex> m: `unit module Foo::Bar does Int;

[03:22] <camelia> rakudo-moar e95c62: OUTPUT«5===SORRY!5=== Error while compiling /tmp/isOO7kzsd_␤Bogus statement␤at /tmp/isOO7kzsd_:1␤------> 3<BOL>7⏏5`unit module Foo::Bar does Int;␤    expecting any of:␤        prefix␤        term␤»

[03:22] <gfldex> nope

[03:22] <ugexe> thats called monkey typing essentially

[03:22] <gfldex> m: unit module Foo::Bar does Int;

[03:22] <camelia> rakudo-moar e95c62: OUTPUT«5===SORRY!5=== Error while compiling /tmp/Uau8ASzYD4␤Int is not composable, so Foo::Bar cannot compose it␤at /tmp/Uau8ASzYD4:1␤»

[03:22] <sammers> ok, I guess it really wouldn't make sense like that...

[03:23] <skids> m: my %x = :a(1,2,3), :b(4); say (%x<a b>).map(*.flat).flat.perl;

[03:23] <camelia> rakudo-moar e95c62: OUTPUT«(1, 2, 3, 4).Seq␤»

[03:24] *** raiph left
[03:24] <ugexe> heh, uglier than i hoped, but ill take it

[03:25] <skids> ugexe: I suspect there will be a final GLR tidy-up where we get a $-busting version of .flat or some things cease to itemize.

[03:26] <skids> Because Array.flat is kinda a useless noop right now.

[03:27] <ugexe> so ive noticed

[03:27] <skids> In the meantime the pain may help stop people from returning mutable Arras from modules that do not need to.

[03:38] *** raoulvdberge left
[03:41] <skids> .oO(Maybe a "do not itemize" adverb on .[] and .{})

[03:43] <skids> Though I guess that would be more "deitemize"

[03:47] *** nemsys left
[03:54] *** Zoffix joined
[03:57] <sammers> ok, regarding packaging, to do a fp module and package subroutines in separate files, you just create each file as its own module in the same namespace? 

[04:00] <sammers> or for that matter, a strictly prcedural paradigm module.

[04:02] <skids> m: package foo { sub a is export { 42.say } }; package foo { sub b is export { 43.say } }; import foo; a(); b(); # Yeah looks like that might work

[04:02] <camelia> rakudo-moar e95c62: OUTPUT«42␤43␤»

[04:03] <sammers> ok, interesting.

[04:04] <sammers> I am really just asking out of curiosity... is there a way to include a local file using full file path?

[04:04] <Zoffix> Are we able to change keywords? Like to rename `sub` to `λ` ?

[04:05] <sammers> I want to see how to go about doing each of these paradigms in p6 before mixing or before just juming in OOP like most modules I have seen.

[04:14] *** araujo_ left
[04:16] <llfourn> Zoffix: you'd have to make a slang. If you wanted to to make λ {}  to what class {} does you probably could with EXPORTHOW

[04:17] <Zoffix> Thanks. That's out of my depth for now :P

[04:19] *** molaf__ left
[04:20] <llfourn> Zoffix: it's not so difficult. I can't wait till we get an official way to do it without use nqp; though.

[04:21] <skids> sammers: there's a runtime "require" that takes filenames but it is not good for use pulling in packages, because it is runtime.  Might be an area less implemented at the moment.  Most folks don't use absolute paths.

[04:22] <llfourn> skids: require will pull in packages you just have to access them like ::('foo')

[04:22] <llfourn> has worked for me in the past at least

[04:24] <Zoffix> m: require ::('Test'); say Test::is 42

[04:24] <camelia> rakudo-moar e95c62: OUTPUT«Could not find symbol '&is'␤  in block <unit> at /tmp/uaVbYNnjTR line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/uaVbYNnjTR line 1␤␤»

[04:24] <sammers> skids: thanks, I just wanted to be able to do this for quick tests.

[04:25] <llfourn> m: require ::('Test') <&ok>; say &ok;

[04:25] <camelia> rakudo-moar e95c62: OUTPUT«WARNINGS for /tmp/3fPaxGr996:␤Useless use of constant string "Test" in sink context (lines 1, 1)␤sub ok (;; Mu | is raw) { #`(Sub|82911400) ... }␤»

[04:25] <llfourn> heh that's a sink bug IMO

[04:25] <Zoffix> m: require ::('Test') <&ok>; say &ok 42;

[04:25] <camelia> rakudo-moar e95c62: OUTPUT«5===SORRY!5=== Error while compiling /tmp/ZBpbW7kIwO␤Two terms in a row␤at /tmp/ZBpbW7kIwO:1␤------> 3require ::('Test') <&ok>; say &ok7⏏5 42;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        state…»

[04:25] <Zoffix> m: require ::('Test') <&ok>; say ok 42;

[04:25] <camelia> rakudo-moar e95c62: OUTPUT«WARNINGS for /tmp/47xzMf6arj:␤Useless use of constant string "Test" in sink context (lines 1, 1)␤ok 1 - ␤True␤»

[04:25] * Zoffix rakudobugs it

[04:27] <llfourn> Zoffix++

[04:27] <Zoffix> .tell TimToady unless someone else looked into it, there's a wrong useless sink context warning: https://rt.perl.org/Ticket/Display.html?id=127147

[04:27] <yoleaux> Zoffix: I'll pass your message to TimToady.

[04:28] <llfourn> m: require ::('Test'); ::('Test').WHO<&ok>.(42) #this shouold work too

[04:28] <camelia> rakudo-moar e95c62: OUTPUT«Cannot find method 'Any'␤  in block <unit> at /tmp/rzitCFnFEJ line 1␤␤»

[04:29] <llfourn> ah no Test must not be unit module Test;

[04:29] <llfourn> m: require ::('Test'); ::('&ok').(42) #this shouold work too

[04:29] <camelia> rakudo-moar e95c62: OUTPUT«No such symbol '&ok'␤  in block <unit> at /tmp/kYHVYllCYq line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/kYHVYllCYq line 1␤␤»

[04:29] <Zoffix> It is https://github.com/rakudo/rakudo/blob/nom/lib/Test.pm6#L3

[04:30] <llfourn> hmmm

[04:31] <llfourn> actually yeah -- it's not our (of course). Anyway I thought the above should work :\

[04:31] <llfourn> actually no it shouldn't all good :D

[04:31] <llfourn> require doesn't do import without args

[04:34] <llfourn> m: require ::('Test'); ::('Test').WHO<&todo_output>.() #this will work though because it's our sub  

[04:34] <camelia> rakudo-moar e95c62: ( no output )

[04:40] <Zoffix> m: say [+] ^1000 .grep: * %% (3|5); say [+] grep * %% (3|5), ^1000;

[04:40] <camelia> rakudo-moar e95c62: OUTPUT«(499500)␤233168␤»

[04:40] <Zoffix> Shouldn't these two be the same answers?

[04:44] <Zoffix> Ah no. the metaop is tighter than method call

[04:46] <Zoffix> m: say [+] (^1000 .grep: * %% 3);

[04:46] <camelia> rakudo-moar e95c62: OUTPUT«5===SORRY!5=== Error while compiling /tmp/tYXxUGomCe␤Confused␤at /tmp/tYXxUGomCe:1␤------> 3say [+] (^1000 .7⏏5grep: * %% 3);␤»

[04:46] <Zoffix> m: say ^1000 .grep: * %% 3;

[04:46] <camelia> rakudo-moar e95c62: OUTPUT«(0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 207 210 213 216 2…»

[04:46] <Zoffix> # confused -_-

[04:47] <skids> m: (^1000 .grep: * %% (3|5)).perl eq (grep * %% (3|5), ^1000).perl # LTA

[04:47] <camelia> rakudo-moar e95c62: OUTPUT«WARNINGS for /tmp/KXqry2vNkO:␤Useless use of "eq" in expression ".perl eq (grep * %% (3|5), ^1000).perl" in sink context (line 1)␤»

[04:48] <skids> m: say (^1000 .grep: * %% (3|5)).perl eq (grep * %% (3|5), ^1000).perl

[04:48] <camelia> rakudo-moar e95c62: OUTPUT«True␤»

[04:50] *** Psyche^_ joined
[04:55] *** Psyche^ left
[04:57] <Zoffix> LTA?

[04:58] <Zoffix> Seems right on target.

[05:01] *** yurivish_ joined
[05:03] <skids> In that the expression is partial

[05:04] <skids> Though I guess you'd have to abbreviate at some point

[05:05] <Zoffix> Ah

[05:05] <Zoffix> I think by the time it gets to eq it already evaluated the first (...).perl and just got .perl to go on by *shrug*

[05:06] <skids> Maybe "NEA" (Not Entirely Awesome)

[05:13] *** user74747 joined
[05:15] <moritz> skids: or NFA: Not Fully Awesome :-)

[05:22] *** kjones_ joined
[05:30] <konobi> TimToady: so, there's actually a TAP community going on now... have any suggestions on who to invite there? (other than perl5 folks who are already there)

[05:32] <skids> Leont and tadzik both have made harness modules.

[05:37] <tadzik> I think leont's one actually works :)

[05:38] *** quester joined
[05:38] *** khw left
[05:38] *** skids left
[05:39] *** nige1 joined
[05:41] *** Cabanossi left
[05:43] *** Cabanossi joined
[06:00] *** kjones_ left
[06:02] *** kjones_ joined
[06:07] *** user74747 left
[06:12] *** user74747 joined
[06:15] <AlexDaniel> .tell RabidGravy i²c library? Great! I will probably need that in a week or two, good that it's not something I will have to do myself… ;)

[06:15] <yoleaux> AlexDaniel: I'll pass your message to RabidGravy.

[06:22] *** CIAvash joined
[06:36] *** nadim left
[06:36] *** _nadim joined
[06:38] *** Tonik joined
[06:42] *** pjscott joined
[06:42] *** _nadim left
[06:42] *** _nadim joined
[06:43] *** geraud left
[06:45] *** pierre-vigier joined
[06:57] *** Ben_Goldberg left
[07:04] <[Tux]> csv-ip5xs        50000    18.315    18.196

[07:04] <[Tux]> test             50000    23.872    23.753

[07:04] <[Tux]> test-t           50000    13.218    13.099

[07:04] <[Tux]> csv-parser       50000    50.070    49.951

[07:12] <cxreg> are feed operators still a thing?  I just remembered them, and haven't seen anyone talking about them at all lately

[07:13] *** FROGGS joined
[07:19] *** jeek joined
[07:23] *** darutoko joined
[07:23] <cxreg> helping jeek with some beginner perl6, I can't explain this:

[07:23] <cxreg> https://gist.github.com/cxreg/62f04e703c90f34b418a

[07:23] <CIAvash> cxreg: http://irclog.perlgeek.de/perl6/2015-12-28#i_11788974 http://irclog.perlgeek.de/perl6/2015-12-23#i_11762672

[07:24] <cxreg> each time the code runs, some random subset of the handle() calls print an (Any)

[07:25] <cxreg> maybe a misunderstanding about the scheduler guarantees?

[07:25] <cxreg> CIAvash: cool thanks

[07:26] *** user74747 left
[07:27] <masak> morning, #perl6

[07:27] <masak> I'd like to flag up http://blogs.perl.org/users/jt_smith/2015/12/christmas-came-bah-humbug.html

[07:27] *** pjscott left
[07:27] <masak> (as being interesting and relevant)

[07:27] <masak> especially john napiorkowski's comment: http://blogs.perl.org/users/jt_smith/2015/12/christmas-came-bah-humbug.html#comment-1645571

[07:30] *** quester left
[07:30] <cxreg> i was going to comment on JT's blog but I didn't see anywhere to comment

[07:30] <cxreg> thanks

[07:32] *** pierre-vigier left
[07:33] <cxreg> masak: napiorkowski's comment resonates and a lot of people will feel that way

[07:34] <cxreg> but as has long been the case, the only way to win the haters is to ship a must-have application

[07:34] <cxreg> everything else is hot air

[07:34] *** pierre-vigier joined
[07:35] *** nige1 left
[07:35] <cxreg> i think it's a waste of time to try to convince the emigrating "perl 5 old guys" to look back, they'll do what they will

[07:36] <kjones_> Should the following work?

[07:36] <kjones_> my $n = "0.0";

[07:36] <kjones_> say "\$n is a string " ~ $n.WHAT;

[07:36] <kjones_> I get:

[07:36] <kjones_> Use of uninitialized value of type Str in string context

[07:37] <kjones_> I can of course say $n.WHAT on its own and it works fine.

[07:37] *** sno left
[07:39] <cxreg> m: my $n = "foo"; Str($n.WHAT).say;

[07:39] <camelia> rakudo-moar e95c62: OUTPUT«Use of uninitialized value of type Str in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at /tmp/LCq6_Hq6Zw line 1␤␤»

[07:39] <cxreg> m: my $n; Str($n.WHAT);

[07:39] <camelia> rakudo-moar e95c62: OUTPUT«Use of uninitialized value of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at /tmp/uIWsXJIToe line 1␤»

[07:40] <cxreg> o_O maybe a .WHAT doesn't stringify

[07:40] *** firstdayonthejob joined
[07:41] *** lnrdo joined
[07:41] *** domidumont joined
[07:42] <cxreg> m: my $n = "0.0"; say "\$n is a string ", $n.WHAT;

[07:42] <camelia> rakudo-moar e95c62: OUTPUT«$n is a string (Str)␤»

[07:42] <AlexDaniel> m: my $n = "foo"; say ‘ok’ if defined $n.WHAT

[07:42] <camelia> rakudo-moar e95c62: ( no output )

[07:42] <AlexDaniel> m: my $n = "foo"; say $n.WHAT.WHAT

[07:42] <camelia> rakudo-moar e95c62: OUTPUT«(Str)␤»

[07:43] *** average joined
[07:43] <AlexDaniel> cxreg: so, it seems like WHAT just returns a type object

[07:43] <AlexDaniel> if I'm understanding it correctly

[07:43] <cxreg> $kyles-mom.WHAT.WHAT.WHAT

[07:44] <AlexDaniel> m: Str(Str);

[07:44] <camelia> rakudo-moar e95c62: OUTPUT«WARNINGS for /tmp/seRQHtWlpc:␤Useless use of constant value Str(Str) in sink context (line 1)␤»

[07:44] <AlexDaniel> m: say Str(Str);

[07:44] <camelia> rakudo-moar e95c62: OUTPUT«Method 'shortname' not found for invocant of class 'Perl6::Metamodel::CoercionHOW'␤  in block <unit> at /tmp/INU5zfp_l5 line 1␤␤»

[07:45] <AlexDaniel> m: my $n = Str; say Str($n)

[07:45] <camelia> rakudo-moar e95c62: OUTPUT«Use of uninitialized value $n of type Str in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at /tmp/S4AZ49bKM9 line 1␤␤»

[07:45] <AlexDaniel> there we go

[07:45] <AlexDaniel> hmm, no, it's different. It says “of type Str”

[07:45] <dalek> rakudo/nom: 503fbba | skids++ | src/core/ (2 files):

[07:45] <dalek> rakudo/nom: Add a :&where parameter to control how where clauses are gistperled

[07:45] <dalek> rakudo/nom: 

[07:45] <dalek> rakudo/nom:   If this returns Nil, the whole gistperl returns Nil, which can be

[07:45] <dalek> rakudo/nom:   used to detect where clauses when you want them to matter, such as

[07:45] <dalek> rakudo/nom:   in the metamodel Signature comparator to prevent false conflicts.

[07:45] <dalek> rakudo/nom:   Do so, fixing RT#127024 and RT#127025.

[07:45] <dalek> rakudo/nom: 

[07:45] <dalek> rakudo/nom:   Whether Signature eqv Signature should be changed to do this as

[07:45] <dalek> rakudo/nom:   well is TBD.

[07:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/503fbba45e

[07:45] <dalek> rakudo/nom: de40f3a | niner++ | src/core/ (2 files):

[07:45] <dalek> rakudo/nom: Merge pull request #672 from skids/roles

[07:45] *** domidumont left
[07:45] <dalek> rakudo/nom: 

[07:45] <dalek> rakudo/nom: Add a :&where parameter to control how where clauses are gistperled

[07:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/de40f3a3c9

[07:46] <cxreg> AlexDaniel: any idea on that gist i pasted earlier?

[07:46] *** domidumont joined
[07:46] <AlexDaniel> let's see

[07:47] <cxreg> as many as 100% of the lines will end up like "[Channel.new (Any)]"

[07:47] <cxreg> but usually 1 or 2

[07:47] <cxreg> i suspect some race condition around how start() works but the docs are very not clear on that

[07:48] <AlexDaniel> m: https://gitlab.com/snippets/12832

[07:48] <camelia> rakudo-moar e95c62: OUTPUT«[Channel.new (Any)]␤[Channel.new Channel.new]␤[Channel.new (Any)]␤[Channel.new Channel.new]␤[Channel.new Channel.new]␤[Channel.new (Any)]␤[Channel.new (Any)]␤[Channel.new Channel.new]␤[Channel.new Channel.new]␤»

[07:48] <AlexDaniel> m: https://gitlab.com/snippets/12832

[07:48] <camelia> rakudo-moar e95c62: OUTPUT«[Channel.new (Any)]␤[Channel.new (Any)]␤[Channel.new Channel.new]␤[Channel.new (Any)]␤[Channel.new (Any)]␤[Channel.new (Any)]␤[Channel.new (Any)]␤[Channel.new (Any)]␤[Channel.new (Any)]␤»

[07:48] <cxreg> yeah, there we go

[07:49] <kjones_> Thanks, it's a learning experience to see how you poke around with code.

[07:49] <cxreg> kjones_: I'm not sure we know the correct answer though, sorry

[07:54] <FROGGS> m: $n = "0.0"; say "\$n is a string " ~ $n.^name;

[07:54] <camelia> rakudo-moar de40f3: OUTPUT«5===SORRY!5=== Error while compiling /tmp/x7NHjpTb0i␤Variable '$n' is not declared␤at /tmp/x7NHjpTb0i:1␤------> 3<BOL>7⏏5$n = "0.0"; say "\$n is a string " ~ $n.␤»

[07:54] <FROGGS> m: my $n = "0.0"; say "\$n is a string " ~ $n.^name;

[07:54] <camelia> rakudo-moar de40f3: OUTPUT«$n is a string Str␤»

[07:54] <FROGGS> kjones_: ^^ this is how you'd do that

[07:55] <kjones_> That's fine. I'm just learning some Perl6 and I was never a Perl5 expert. I have the Perl Cookbook 2nd edition, so I thought I would start translating some of the code in section 1.0 into Perl6. But I didn't want it to be a literal translation. So, I started looking at the introspection features of Perl6 when I was looking at the code on page 2 of chapter 1. That section deals with the truthiness of strings and coersion.  Anyways,

[07:55] <kjones_>  thanks for your help.

[07:55] <FROGGS> kjones_: .WHAT gives you back a type, which is meant to warn if you interpolate or concat it or do math with it

[07:55] <kjones_> Ok, thanks. That makes sense.

[07:55] <nine> .tell timotimo camelia runs in a VM with 4 CPUs on a server with 8 cores

[07:55] <yoleaux> nine: I'll pass your message to timotimo.

[07:56] *** pjscott joined
[07:56] *** pjscott left
[07:58] <cxreg> FROGGS++

[07:58] <AlexDaniel> m: my $c = [ Channel.new for ^10 ]; for 2..10 { start { say ($c[$_-1], $c[$_]) }; }; sleep 1;

[07:58] <camelia> rakudo-moar de40f3: OUTPUT«(Channel.new (Any))␤(Channel.new Channel.new)␤(Channel.new Channel.new)␤(Channel.new Channel.new)␤(Channel.new Channel.new)␤(Channel.new Channel.new)␤(Channel.new Channel.new)␤(Channel.new Channel.new)␤(Channel.new Channel.new)␤»

[07:58] <AlexDaniel> golfed down a little bit

[08:00] *** pierre-vigier left
[08:01] <cxreg> AlexDaniel: i tried toying with the promises returned from start and that didn't help

[08:01] <cxreg> not sure why it would though

[08:02] <cxreg> AlexDaniel: ok in your golfed version, only slot 10 has Any (as it should)

[08:02] <cxreg> it comes back in random order due to threadpool

[08:03] <cxreg> so that seems to not have the problem

[08:03] <nine> .tell awwaiid Congrats on your progress on Inline::Ruby! Piece of advice: don't map language constructs in one language to constructs in the other language unless they really match semantically. Because one day someone will use code that looks very closely and discovers you cheating.

[08:03] <yoleaux> nine: I'll pass your message to awwaiid.

[08:03] *** adhoc joined
[08:03] <cxreg> nine: so he should use more primitive constructs, is what you're saying?

[08:06] *** pierre-vigier joined
[08:08] <cxreg> AlexDaniel: it seems to be the start block closing over $i that's the problem

[08:08] <cxreg> the value of $i in there is undefined

[08:08] <cxreg> er

[08:09] <cxreg> non-guaranteed

[08:09] <cxreg> when you switched to $_ it removed the bug

[08:09] *** abraxxa joined
[08:09] *** snarkyboojum joined
[08:09] <AlexDaniel> cxreg: yes. But why?

[08:10] *** lnrdo left
[08:10] <cxreg> because it's an outer-scoped variable that's being closed over

[08:10] <AlexDaniel> right

[08:10] <cxreg> so it's the  same container used in multiple threads

[08:10] <AlexDaniel> indeed

[08:11] <cxreg> thus race condition depending when the threadpool picked it up vs what $i was at the time?  makes sense now.  I just with the compiler warned you when you did it.

[08:11] *** average left
[08:12] *** abraxxa left
[08:12] <cxreg> seems like for 2..9 -> $i { ... } also doesn't have the problem, probably because $i is scoped to the loop block

[08:12] <AlexDaniel> so if you do ｢my $x = $i｣ then it is fixed

[08:12] <AlexDaniel> or that

[08:13] *** abraxxa joined
[08:13] *** SwellJoe left
[08:14] <AlexDaniel> m: my $c = ^10; loop (my $i = 2; $i <= 10; $i++) { start { say ($c[$i-1], $c[$i]) }; }; sleep 1;

[08:14] <camelia> rakudo-moar de40f3: OUTPUT«(Nil Nil)␤(3 Nil)␤(8 Nil)␤(2 Nil)␤(5 Nil)␤(9 Nil)␤(Nil Nil)␤(7 Nil)␤(Nil Nil)␤»

[08:14] <AlexDaniel> m: my $c = ^10; loop (my $i = 2; $i <= 10; $i++) { my $x = $i; start { say ($c[$x-1], $c[$x]) }; }; sleep 1;

[08:14] <camelia> rakudo-moar de40f3: OUTPUT«(9 Nil)␤(7 8)␤(1 2)␤(8 9)␤(2 3)␤(6 7)␤(4 5)␤(5 6)␤(3 4)␤»

[08:16] <AlexDaniel> m: my $c = ^10; for 2..10 -> $i { start { say ($c[$i-1], $c[$i]) }; }; sleep 1

[08:16] <camelia> rakudo-moar de40f3: OUTPUT«(3 4)␤(6 7)␤(1 2)␤(7 8)␤(2 3)␤(5 6)␤(8 9)␤(4 5)␤(9 Nil)␤»

[08:16] <AlexDaniel> jeek: ↑

[08:16] <jeek> ?

[08:17] <jeek> Ah, scoping issue?

[08:18] <cxreg> it's (9 Nil) because the loop goes up to [10] but ^10 is 0..9

[08:18] <cxreg> btw

[08:18] <nine> AlexDaniel: .WHAT does return a type object. Stringifying that will give you the "uninitialized" warning while calling .gist (as say does to its arguments) will not. In any case $n.^name is really what you want.

[08:18] <nine> cxreg: ^^^

[08:18] *** _mg_ joined
[08:18] <cxreg> .gist?  hm.  thanks

[08:20] <cxreg> AlexDaniel: back to the original example.  the first loop localizes $i to the loop block, correcT?

[08:20] *** pierre-vigier left
[08:20] <cxreg> hm.  maybe it doesn't.

[08:20] <AlexDaniel> cxreg: nope, because you don't have ｢my｣ in the second one

[08:20] <DrForr> Wow, more #perl denizens coming in... Rock.

[08:20] <yoleaux> 30 Dec 2015 11:51Z <_nadim> DrForr: Readline broken with the latest Rakudo

[08:20] <yoleaux> 2 Jan 2016 08:04Z <azawawi> DrForr: Any update on the OpenCV bindings for Perl 6? Can you please share your WIP github repo?

[08:20] <nine> cxreg: I was saying that if there for example is no "symbol" thingy in Perl 6, I'd write a class that mimicks its behavior and can be mapped back to Ruby symbols without ambiguity.

[08:21] <nine> .tell AlexDaniel I was saying that if there for example is no "symbol" thingy in Perl 6, I'd write a class that mimicks its behavior and can be mapped back to Ruby symbols without ambiguity.

[08:21] <yoleaux> nine: I'll pass your message to AlexDaniel.

[08:21] <AlexDaniel> I'm here :)

[08:21] <yoleaux> 08:21Z <nine> AlexDaniel: I was saying that if there for example is no "symbol" thingy in Perl 6, I'd write a class that mimicks its behavior and can be mapped back to Ruby symbols without ambiguity.

[08:21] <nine> .tell awwaiid I was saying that if there for example is no "symbol" thingy in Perl 6, I'd write a class that mimicks its behavior and can be mapped back to Ruby symbols without ambiguity.

[08:21] <yoleaux> nine: I'll pass your message to awwaiid.

[08:21] <nine> That's what I meant :)

[08:21] <cxreg> is there an echo in here :o

[08:22] <cxreg> nine++

[08:22] <masak> cxreg: agree with "ship a must-have application"

[08:23] <masak> cxreg: I think the unbiased way to say what I want to say is that I see this as the biggest uncertainty for Perl 6 going forward, whether an actual business case and a killer app will materialize

[08:23] <cxreg> m: loop (my $i = 0; $i < 3; $i++) { $i.say }; say "\$i is now $i"

[08:23] <camelia> rakudo-moar de40f3: OUTPUT«0␤1␤2␤$i is now 3␤»

[08:23] *** nige1 joined
[08:24] <cxreg> AlexDaniel: it's not... ? i thought it was for sure.  but it seems to be outer scoped.

[08:25] <Juerd> masak: Well, that requires that at least some people will pick Perl 6 for new projects. The chance of anyone doing that would increase with great performance, so I think we shouldn't count on such a thing happening just yet.

[08:25] <masak> cxreg: the rule is, is it outside of the block braces? then it's outer scoped.

[08:25] <AlexDaniel> m: loop (my $i = 0; $i < 10; $i++) { }; loop (my $i = 0; $i < 10; $i++) { };

[08:25] <camelia> rakudo-moar de40f3: OUTPUT«Potential difficulties:␤    Redeclaration of symbol $i␤    at /tmp/5hvMrH4HaY:1␤    ------> 3 $i = 0; $i < 10; $i++) { }; loop (my $i7⏏5 = 0; $i < 10; $i++) { };␤»

[08:25] <masak> Juerd: agreed -- it's partly a matter of "things need to happen in the right order"

[08:25] <Juerd> masak: Except for arguments: -> $foo { ... }

[08:26] <cxreg> masak: what about pointy block args?

[08:26] <cxreg> yeah that

[08:26] <AlexDaniel> cxreg: honestly, I was surprised by that. I haven't ever used ｢loop｣ actually

[08:26] <nine> masak: I think, Perl 6 will see a long and slow but steady growth. At least if we continue to focus on high quality libraries and a performant core. I think that's much better for the long term perspective than having hundreds of thousands of libraries that no one will ever find.

[08:26] <masak> cxreg: oh, they're an exception. as are routine parameters.

[08:26] <AlexDaniel> cxreg: usually there are better alternatives in Perl 6

[08:26] <masak> Juerd: also, robustness, both in the sense of "doesn't crash" and in the sense of "behaves predictably"

[08:26] <cxreg> well.  yeah.  but details like this matter, a lot

[08:27] <jeek> I just started in perl 6 a couple of hours ago. I'm working on projecteuler example solutions. I'm guessing my solutions will evolve as I learn more about the language.

[08:27] <AlexDaniel> m: my $x = 5 if True; say $x;

[08:27] <camelia> rakudo-moar de40f3: OUTPUT«5␤»

[08:27] <AlexDaniel> m: my $x = 5 if False; say $x;

[08:27] <camelia> rakudo-moar de40f3: OUTPUT«(Any)␤»

[08:27] <masak> nine: though I agree, that sounds a bit like "grr, those Node people!" sour grapes ;)

[08:27] <nine> jeek: welcome!

[08:27] *** firstdayonthejob left
[08:27] *** pdcawley joined
[08:27] <masak> jeek: pro tip: use camelia (either here on channel or in privmsg)

[08:27] <masak> m: say "hi, jeek!"

[08:27] <camelia> rakudo-moar de40f3: OUTPUT«hi, jeek!␤»

[08:27] <jeek> Is that the new purl? :)

[08:28] * masak shudders

[08:28] <AlexDaniel> and for bigger snippets use gists, bitbucket snippets or gitlab snippets, hehe

[08:28] <moritz> jeek: we try to keep camelia much less annoying than purl :-)

[08:28] <masak> jeek: it's a great way to communicate code with other people here, and so a great way to get help :>

[08:29] <jeek> I liked purl. :(

[08:29] <Juerd> Mind blown:

[08:29] <Juerd> m: my @foo[10]; my @bar[10]; my @baz := |@foo, |@bar; @baz = ^20; say @foo; say @bar

[08:29] <camelia> rakudo-moar de40f3: OUTPUT«[0 1 2 3 4 5 6 7 8 9]␤[10 11 12 13 14 15 16 17 18 19]␤»

[08:30] <Juerd> That's really nice.

[08:30] <nine> masak: that's just because I've read the comments just now ;) But the point still stands: Perl 6's raison d'être is to get rid of the mistakes of the past. In my eyes that should really include a huge ecosystem of ill fitting libs written by beginners. Instead I would like us to strife for shared maintenance and an eye for compatibility. More Mojo instead of CPAN.

[08:31] <masak> nine++ # putting the 'ê' in "être"

[08:31] *** pierre-vigier joined
[08:31] *** snarkyboojum left
[08:31] <masak> oh, that reminds me: http://perl.com/pub/2000/07/perl6.html (via someone on Twitter)

[08:31] *** octoploid joined
[08:31] <masak> an interesting read 15 years down the line :)

[08:32] *** sjohnsen left
[08:33] <nine> "One perennial problem has been that installing a new version of Perl has frequently broken binary compatibility with older versions and required that all of Perl's unbundled extension modules be recompiled; this may be fixed in Perl 6."

[08:33] <nine> I'm....glad I could play a part in solving that :)

[08:33] <AlexDaniel> Juerd: have you tried recursive lists yet?

[08:33] <Juerd> AlexDaniel: Not in this context.

[08:33] <masak> nine: that one stood out to me as well ;)

[08:34] <AlexDaniel> Juerd: not that it is a real feature, but it was another way to blow my mind :)

[08:34] *** sjohnsen joined
[08:35] *** zakharyas joined
[08:37] <nine> Bonus points for anyone who can say why Juerd's mind blowing actually works that way :)

[08:37] <moritz> nine: is "magic" a good enough explanation? :-)

[08:41] *** maddingu1 is now known as maddingue

[08:44] <El_Che> masak: I dislike panda's UI when it prints exceptions instead of a concise error, e.g. when not finding a module. Very pythonesque. Are PRs welcome related to this, or you like that design?

[08:46] <masak> El_Che: dunno; ask tadzik :)

[08:47] <masak> El_Che: (I personally find stack traces boring, yes. they help the developer, but not the user.)

[08:50] <_nadim> good morning

[08:55] *** araujo joined
[08:55] *** araujo left
[08:56] *** araujo joined
[08:56] *** araujo left
[08:56] *** araujo joined
[08:56] *** araujo left
[08:57] <richi235> masak: well, if the user is a programmer they are quite helpfull

[08:58] *** nige1 left
[08:59] <cxreg> masak: the odds of a great killer app in a language seem to be some Drake equation involving the learning curve of the language, the size of the community, the phase of the moon, etc

[08:59] <richi235> ah sorry, didn't read full backlog, it's about panda ignore my message

[08:59] <cxreg> masak: i think the odds are pretty good honestly.  once the dust settles a bit.

[09:00] <cxreg> there's still a lot of grumbling about "ya shouldn't have called it perl"

[09:00] <cxreg> either because it upsets people's delicate psyche WRT thier preconceived notions about back compat, or because of poisoned mindshare

[09:01] *** justine_o joined
[09:01] <cxreg> whatever.  cool apps win. QED.

[09:02] <cxreg> once i'm beyond Noob Mountain, I'll do my part to see what can be forged

[09:05] <cxreg> cherry picking from that 2000 post

[09:05] <cxreg> m: system()

[09:05] <camelia> rakudo-moar de40f3: OUTPUT«5===SORRY!5=== Error while compiling /tmp/74xTM0GlwM␤Undeclared routine:␤    system used at line 1␤␤»

[09:05] <cxreg> m: localtime()

[09:05] <camelia> rakudo-moar de40f3: OUTPUT«5===SORRY!5=== Error while compiling /tmp/gWwsXyu9NV␤Undeclared routine:␤    localtime used at line 1␤␤»

[09:06] <cxreg> *cough* :)

[09:06] <cxreg> kind of adorable that those were specific concerns in the announcement.  what a long road.

[09:07] <cxreg> TimToady is "not big on specs" :) :) :)

[09:11] <Ulti> cxreg: system is 'shell' and localtime is 'DateTime.now()' ?

[09:12] <cxreg> yeah.  this is from the july 2000 perl 6 commencement ;)

[09:12] <Ulti> ahh

[09:13] * Ulti didn't even begin to learn Perl until 2004 despite the constant chatter about the death of Perl starting in 2000

[09:13] *** nige1 joined
[09:14] <AlexDaniel> Ulti: what? system is ‘shell’?

[09:14] <Ulti> and that was after I already knew PHP, Java, C and JavaScript quite well... all those "modern" languages people are flocking to "nowadays"

[09:14] <Ulti> AlexDaniel *shrug* think so

[09:14] <AlexDaniel> if you call it with one long stringy arg then yeah

[09:14] <AlexDaniel> but otherwise not really

[09:15] <AlexDaniel> the thing is, system() is kinda supposed to run a program and pass some args to it, all that without using a shell

[09:15] <AlexDaniel> now, for whatever reason somebody made system() “smart” so that if you put everything into one long string (not multiple args) then it will do that through shell

[09:15] <Ulti> system prefixes 'sh' ?

[09:16] <AlexDaniel> so, perl5 ｢system｣ is more like ｢run｣ when you call it with multiple args

[09:16] <Ulti> or at least used to before all the bash uproar a year and a bit ago, right?

[09:17] <AlexDaniel> prefixes 'sh'? What does that mean?

[09:17] *** justine_o left
[09:18] <Ulti> as in runs via the shell

[09:18] <Ulti> sh -c or whatever it is

[09:19] <AlexDaniel> well it doesn't prefix it, it perhaps runs 'sh' and passes your string as an argument after '-c', yeah

[09:19] <AlexDaniel> but ‘prefixing’ is only possible in shell, which ｢run｣ and ｢system｣ typically don't do at all

[09:20] * AlexDaniel wonders how long will it take to consider himself a troll after all those shell discussions

[09:22] <masak> cxreg: thank you for the wonderful Drake equation analogy. I really like that.

[09:22] <masak> cxreg: but you're not allowed to put "phase of the moon" as a factor -- I think that's against the implicit rules ;)

[09:23] *** yeahnoob left
[09:23] <masak> cxreg: re "ya shouldn't have called it perl" -- to me the KO rebuttal to that is "oh hey, here's TimToady, he *made* Perl. he can call Perl 6 whatever he wants". nothing past that is very interesting to me.

[09:24] *** sno joined
[09:24] <masak> (probably phrased a little more delicately when stated outside of #perl6, though)

[09:24] <Ulti> >___>

[09:25] <Ulti> but "they" are watching us

[09:25] *** pierre-vigier left
[09:26] <masak> Ulti: are we still talking about the Drake equation? :P

[09:26] *** pierre-vigier joined
[09:26] <cxreg> masak: while true, it's the thousands of developers that will make it a success, not Larry standing alone and being a BDFL

[09:26] <cxreg> so their concerns matter, even if they're wrong

[09:27] *** wamba joined
[09:27] <masak> cxreg: you have a point. since many years back, I've refused to hang my personal happiness on the thousands, for reasons of continued sanity. I'm a Perl 6 user. others can be too if they want.

[09:27] <cxreg> anyway, i've been preaching it, and some percentage of that does sink in.  time will tell.

[09:27] *** dakkar joined
[09:29] <cxreg> can i ask an honest question?  why does reini keep releasing new versions of parrot?

[09:30] <masak> that question is perhaps better asked on #parrot

[09:30] <cxreg> i idled in there until i realized that only the bot ever said anything for months at a time :/

[09:31] *** sno left
[09:31] <Ulti> surely if someone is there to release it that's reason enough?

[09:31] <cxreg> maybe one day someone will uh, fix the parrot backend?  hm.  just wondering is all.  i guess the tree really does fall in the woods.

[09:32] *** kjones_ left
[09:32] <cxreg> 100% of the people i knew involved in that project rage quit several years ago

[09:34] * moritz didn't rage quit, but rather quietly left for greener pastures

[09:34] <moritz> not that I was ever much of a parrot developer, but I did have a commit bit

[09:34] <cxreg> it would be nice to see it brought at least back to relative functionality with the last year of development

[09:35] <masak> well volunteered!

[09:35] <masak> I had no idea someone would step up like that!

[09:35] <cxreg> my tuits are not that round, sadly

[09:35] *** gregf_ joined
[09:35] <masak> oh, you meant it would be nice if *other people*, not you... got it... :)

[09:36] <moritz> cxreg: we could ship you some round tuits if that's all that's blocking you :-)

[09:37] <masak> frankly I suspect that the "opportunity cost" arguments that were once raised against focusing on MoarVM could now equally well be raised against Parrot

[09:37] <cxreg> i guess we don't talk about that uncle in here.  point taken.

[09:37] <masak> though don't let my pessimism stop anyone who wants to try

[09:37] <arnsholt> Opportunity cost is a good argument

[09:37] <arnsholt> And from my experiences working with Parrot vs. JVM/Moar, it's not gonna be easy to find someone who actually *wants* to do it

[09:37] <masak> arnsholt: though the MoarVM case shows that sometimes it's a bet that pays off.

[09:38] <arnsholt> Yeah, opportunity cost is definitely a hard argument

[09:38] <cxreg> well, plus the never-aligned goals was a mood killer

[09:38] <arnsholt> Very hard to predict the future dividends from two different options

[09:38] <cxreg> but it was hard to align goals when perl 6 kept moving the goalposts?

[09:39] <cxreg> could very well be that it's an easier discussion with p6.c

[09:39] <El_Che> masak: ah. I took you for the panda author. Sowry :)

[09:39] <moritz> cxreg: well, parrots goal were "support all dynamic languages, somehow" for a long time

[09:40] <cxreg> that's what i meant by alignment.  it was a "well, we should at least have one working language" vs "let's not specialize"

[09:40] <moritz> cxreg: so even if Perl 6 hadn't been a moving target, there wasn't much room for goal alignment

[09:40] *** cognominal left
[09:40] <cxreg> maybe the question is, is that still a worthy goal

[09:41] <cxreg> possibly no since "all the dynamic languages" aren't the hotness they were 10 years ago

[09:42] <moritz> also "all the dynamic languages" didn't give a good guide for what to do

[09:42] <cxreg> allison is quite sure it directly influenced microsoft

[09:42] <cxreg> donno if she's right or not

[09:43] <cxreg> maybe Sun/Oracle too?

[09:44] <masak> ISTR an article Allison wrote about "we succeeded, because we influenced other players"

[09:44] <cxreg> yeah, and i talked to her irl about it too

[09:44] <masak> I definitely don't want to rob her (or the Parrot people) of that definition of success

[09:44] <masak> ...so I'll say no more about it.

[09:45] <cxreg> that's all that smalltalk people can claim (oh snap)

[09:45] <cxreg> and boy howdy do they claim all of it

[09:45] <masak> I can see it with Smalltalk

[09:46] <masak> Eclipse is a whole largely came out of Smalltalk people building stuff for Java

[09:46] *** rindolf joined
[09:46] <masak> as a whole*

[09:47] <arnsholt> Also, Objective C

[09:47] <cxreg> lots and lots of things did

[09:48] <cxreg> ruby owes a lot there too

[09:49] <cxreg> anyway, there are still people that maintain spin-offs of BeOS and AmigaOS

[09:49] <cxreg> and i know a guy who, i think, still ports perl 5 releases to legacy macos

[09:51] <masak> oh, and also Smalltalk -> Strongtalk -> v8/JavaScript

[09:52] <moritz> is anybody working on a Star release for 2015.12?

[09:52] <moritz> or has an idea what's required to do it, at least?

[09:52] *** pmurias joined
[09:53] <cxreg> do you think it would make sense to have a trait that you have to declare, lest the compiler give you grief if you share a variable across multiple threads?

[09:53] <pmurias> graal/truffle on the jvm seems to be the current iteration of the "support all dynamic languages" goal

[09:53] <cxreg> or something like that anyway?

[09:54] <cxreg> (going back to the start-related bug from earlier)

[09:55] <FROGGS> moritz: I am

[09:55] <moritz> FROGGS: do you have an ETA? (asking for a friend, no pressure :-)

[09:56] <FROGGS> moritz: I wanna work on it this evening, but I bet one evening is not enough

[09:57] <moritz> FROGGS: what approach are you planning to do? bootstrap panda?

[09:57] <FROGGS> moritz: yes

[09:57] <FROGGS> started doing that weeks already

[09:58] <moritz> FROGGS: do you have a branch for that that you can share?

[09:58] *** pmurias left
[09:59] <FROGGS> moritz: I can surely create one

[09:59] <timotimo> cxreg: we have a "cross thread write" logging thingie in moarvm that loudly complains if you write something to a variable or object from another thread than the one that owns it

[09:59] <yoleaux> 07:55Z <nine> timotimo: camelia runs in a VM with 4 CPUs on a server with 8 cores

[09:59] <moritz> FROGGS: would be nice; maybe I can also pour some tuits in

[10:00] <FROGGS> cool

[10:00] <cxreg> timotimo: this was a "used an outer lexical in multiple start calls" with much surprise

[10:00] <cxreg> read-only, but they had unexpected values because of scheduling

[10:00] *** pmurias joined
[10:00] <timotimo> yeah, it's probably a bit surprising that it closed over the value without explicit curlies involved

[10:01] <timotimo> but if there were no implicit curlies there, your code wouldn't have multi-threaded period

[10:01] <cxreg> loop { start function($outer-lexical) } # like that

[10:02] <cxreg> except more complex

[10:02] <cxreg> do you think there's room for a warning there?

[10:03] <timotimo> oof

[10:03] *** aenaxi left
[10:03] <timotimo> sometimes you do want to share that, for example if you have an object there

[10:03] <_mg_> Hello all. Will there be a rakudo-star release for 2015.12?

[10:03] <cxreg> well, in this case it was a loop variable

[10:03] <timotimo> _mg_: we've got a developer working on it

[10:04] <_mg_> timotimo: ok thanks

[10:04] <cxreg> maybe that could be noticed

[10:04] <timotimo> cxreg: loop doesn't necessarily mean you've got an int or something simple like that

[10:04] <timotimo> but still ... yeah

[10:04] <timotimo> in this case i'm really not sure

[10:05] <cxreg> my $outer-whatever is intended-to-be-shared; # :)

[10:05] <cxreg> but i guess you don't always know what you'll do

[10:06] <timotimo> that's right

[10:06] <cxreg> sure would be nice to have a noob mode that puts more guard rails on than an advanced user would want

[10:06] <timotimo> "no noob" would be the new "use stict", eh?

[10:06] <cxreg> heh.

[10:07] <cxreg> could even be opt-in.  is there a pluggable warnings / strictures system at all?

[10:07] <timotimo> i was wondering why your code was starting at $i = 2, btw

[10:07] <timotimo> was there a reason to be skipping the first Channel?

[10:07] <nine> FROGGS: what rakudo version will star use?

[10:07] <FROGGS> nine: 2015.12

[10:07] <cxreg> it was not my code, it was jeek's.  not exactly sure.

[10:07] <FROGGS> nine: or was there a point release?

[10:08] <timotimo> probably an accident? expecting lua-style array indices?

[10:08] <timotimo> FROGGS: i don't think there was one yet. but there really should be, IMO

[10:08] <timotimo> we have reasons to have one, at least

[10:08] <nine> FROGGS: I really think we should do a point release first to include it in star. 2015.12 was...not that usable :/

[10:08] <FROGGS> nine: sounds good to me

[10:09] <timotimo> moarvm doesn't have commits critical to users, IMO

[10:10] <timotimo> so we can at least skip that part of the release process without upsetting things too much

[10:10] <timotimo> all nqp got was using \0 in char classes

[10:10] <timotimo> and of course pmurias' tests and js implementations of ops

[10:12] <moritz> so, start a release branch that sets NQP_REVISION back to 2015.12?

[10:13] <cxreg> nine: did you ever see IPFS?

[10:13] <cxreg> it occurs to me that you might find it interesting / relevant

[10:14] <timotimo> the bump was only for the character class, it seems

[10:16] <cxreg> nine: conceptually anyway, maybe not literally :-)  but i was looking at your CURI file-id stuff just now.

[10:17] *** Sqirrel left
[10:17] * masak .oO( NO NOOB; NO PROJECT EULER )

[10:18] *** Sqirrel joined
[10:19] <arnsholt> I'm getting an error when building Rakudo HEAD: "An exception occurred while evaluating a constant"

[10:20] <arnsholt> When doing install-core-dist.p6. Anyone know what's going on?

[10:22] *** glucosade joined
[10:25] *** nzkindest left
[10:29] <FROGGS> arnsholt: maybe you need to wipe your install/share/perl6/site and the ~/.perl6?

[10:29] *** snarkyboojum joined
[10:31] <arnsholt> I can definitely try that

[10:32] <arnsholt> I thought to git clean my Rakudo dir, but that won't clear the install dir

[10:32] <nine> cxreg: no?

[10:33] <nine> cxreg: jnthn++'s inspiration for the CURI architecture was git

[10:33] <nine> cxreg: so it has the same ancestor as IPFS

[10:34] *** snarkyboojum left
[10:34] *** pmurias left
[10:34] <masak> the idea behind Git is definitely a powerful one. content addressing rocks.

[10:34] <cxreg> nine: cool i'll look deeper at how curi works

[10:34] <masak> doesn't Docker use something like that, too?

[10:35] <cxreg> the general concept is "merkle trees"

[10:35] <cxreg> the idea of using it as a global content distribution mechanism is nifty, the guy gave a good talk that i saw.

[10:35] <cxreg> well, "global".  lol.  he imagines using it across light-hours.

[10:35] <timotimo> the one at the congress?

[10:36] <timotimo> hm, actually, i think that was just the lightning talk introducing it

[10:36] <nine> The advantage of all those hashes compared to previous suggestions is that the repository's state is solely represented by the presense of files, not their contents. This means that a distribution package can just copy files and those file names should never conflict.

[10:36] <arnsholt> FROGGS: Had to blow away the whole install/ dir, but that did the trick. Cheers!

[10:36] <JimmyZ> It woulde be nice to have jnthn++'s curli gist in rakudo repo

[10:37] <masak> JimmyZ: +1

[10:37] <JimmyZ> I wanted to say it longlong ago

[10:37] *** pmurias joined
[10:37] <timotimo> nine: we don't have a plan for what happens when sha1 is finally deprecated enough, eh?

[10:38] <JimmyZ> s/curli/CURI/

[10:38] <AlexDaniel> timotimo: I think that the typical response was that sha1 is just fine for that purpose

[10:38] <cxreg> timotimo: mass cache invalidation? :)

[10:39] <cxreg> it's a simpler answer for cache than it is for things like git that consider history to be permanent

[10:39] <timotimo> true

[10:39] <dalek> rakudo/nom: f0a524a | (Stefan Seifert)++ | docs/module_management.md:

[10:39] <dalek> rakudo/nom: Add jnthn++'s module management proposal to docs

[10:39] <dalek> rakudo/nom: 

[10:39] <dalek> rakudo/nom: It has been implemented mostly as proposed, so this document is still

[10:39] <dalek> rakudo/nom: very valid and helps understanding the implementation.

[10:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f0a524a536

[10:40] <nine> Now I can finally stop being nervous about clearing my browser's history...

[10:40] <JimmyZ> nine++

[10:40] <nine> timotimo: sha1 is good enough for git, it's good enough for us

[10:41] <cxreg> pre-image attacks are for academics and the NSA :)

[10:41] <AlexDaniel> there are some doubts about it being good enough for git though

[10:41] <masak> I think as a rule, we should err on the side of adding gists to the docs/ folder ;)

[10:41] <nine> masak: +1

[10:41] <masak> at least until someone goes "arrgh, what's this annoying informative thing doing here!" :P

[10:42] <masak> more realistically, and less strawman-y, the real risk is probably information overload or bad culling or something

[10:43] *** araujo joined
[10:43] <nine> masak: I'm a fan of dealing with such problems when we really have them

[10:45] <masak> YAGNI, agreed

[10:45] <timotimo> fair enough

[10:45] <timotimo> we don't have anything for keccak in our module ecosystem yet, do we?

[10:46] <AlexDaniel> so in the end we have doc.perl6.org, synopsis, some kind of docs in rakudo repository, there are also apocalypse and exegesis thingies… did I miss anything? These have different purposes, I know, but…

[10:47] *** RabidGravy joined
[10:48] <masak> AlexDaniel: in particular, docs/ in the Rakudo repository and doc.perl6.org have very different audiences

[10:48] <masak> you don't have to be a Rakudo developer to be a Perl 6 user

[10:48] <AlexDaniel> .oO( you don't have to be a Perl 6 user to be a rakudo developer )

[10:49] <AlexDaniel> I was happy to see lizmat++ moving S99 to user docs

[10:49] <AlexDaniel> perhaps the same thing could be done with the rest of it

[10:49] <lizmat> good *, #perl6!

[10:50] <lizmat> am about to start on a second batch

[10:50] <lizmat> can only do this for ~ 2 hours before my mind starts to draw a blank

[10:50] <masak> I agree that S99 is more user-doc-like than synopsis-like

[10:51] <timotimo> a second batch of what now?

[10:51] <masak> lizmat: what in the world is it you're doing that blanks out your mind after 2 hours? :)

[10:51] <lizmat> second batch of moving stuff from S99 to doc/glossary

[10:51] <timotimo> oh, OK :)

[10:51] <masak> it's not eminently automatable?

[10:51] <lizmat> trying to read newbieish documentation

[10:51] <lizmat> ah, no, I want to do an editorial review on the S99 entries before entering them into the doc/glossary

[10:52] <AlexDaniel> masak: there's a bunch of cruft there

[10:52] <lizmat> too many inside info/jokes on S99

[10:52] <lizmat> it's the editorial review that makes it hard

[10:52] <timotimo> fair enough

[10:52] <lizmat> sometimes, (like IRC abbreviations), it's easy, yeas

[10:52] <nine> In our team meeting, an hour ago we moved from "will we use Perl 6 any time soon" to "how can we start to use Perl6" quickly

[10:52] <timotimo> oh, neat

[10:52] <lizmat> cool!

[10:52] <arnsholt> Very neat indeed. Where do you work?

[10:52] *** espadrine joined
[10:53] <masak> nine: wow, nice!

[10:53] <lizmat> are we the only people who cannot reach doc.perl6.org ??

[10:53] <nine> arnsholt: http://www.atikon.com you probably couldn't tell that it's such a cool place :)

[10:53] <lizmat> or perl6.org for that matter ?

[10:54] <cxreg> lizmat: same here

[10:54] <llfourn> down for me

[10:54] <lizmat> invoking moritz to check out what's going in

[10:54] <lizmat> *on

[10:54] <nine> http://www.isitdownrightnow.com/doc.perl6.org.html

[10:54] <masak> lizmat: "It's not just you! http://perl6.org looks down from here."

[10:54] <cxreg> masak: "lmdfeojmfy" :-)

[10:55] <masak> aye

[10:55] <cxreg> i think that's the anglicized form of the 2015.12 release name

[10:56] * masak .oO( invoking the moritz. please step back to a safe distance to enable vine-swining from roof. )

[10:56] * masak .oO( *REGEX* )

[10:57] <lizmat> perhaps moritz is already aware of it, because it may be part of bigger problem at his $work ?

[10:57] <masak> possibly. if he's back to $work already.

[11:00] <lizmat> anyways, it seems that not having a Perl 6.0 out there, is *mighty* confusing to a *lot* of people

[11:00] <lizmat> so I was thinking: why not name the next Rakudo * 6.0

[11:00] <timotimo> it seems we now have a little bug fixed in nqp::join with regards to GC, so we may want to actually release a 2015.12.1 of moarvm

[11:01] <nine> lizmat: which would be technically highly incorrect but could actually be helpful :)

[11:01] <lizmat> it's all about marketing in this respect

[11:01] <lizmat> and Rakudo * is really a bit like a Debian on top of the Linux Kernel

[11:02] <lizmat> so it may well have it's own version numbering

[11:02] <lizmat> and since we recommend Rakudo * to beginners anyway

[11:02] <lizmat> it only seems *very* appropriate to name it 6.0

[11:02] <cxreg> node.js went from 0.12 to 4.0 in one go

[11:02] <lizmat> because that is what many people want to see

[11:03] <lizmat> and we want many people to see Perl 6  :-)

[11:03] <timotimo> what do we name rakudo stars after 6.0?

[11:04] <lizmat> well, 6.1 ?

[11:04] * cxreg phones captain semver

[11:04] <timotimo> that seems like a terrible idea

[11:04] <lizmat> perhaps only switch major numbers on a language version bump

[11:04] <timotimo> then we'll have 6.1, 6.2, 6.3, suddenly we have perl 6.d

[11:04] *** crux left
[11:05] <timotimo> so we'll have perl 7, perl 8, perl 9 for 6.d, 6.e and 6.f?

[11:05] <timotimo> man is *that* going to make perl5 people mad

[11:05] <lizmat> so this one would be 6.0.0, the next one 6.0.1

[11:05] <lizmat> and when we get to 6.d, we go to 6.1

[11:05] <timotimo> and we won't have 6.c.1?

[11:05] <masak> timotimo: we should just release Perl 7, then Perl 8, then Perl 9. one each month. :P

[11:05] <AlexDaniel> like a web browser! Great

[11:06] <lizmat> well, you can take it into the absurd, but we *do* have a marketing problem

[11:06] <masak> yes

[11:06] <lizmat> to the point that one of the people doing marketing for Perl 6 is about to call it quits

[11:06] <lizmat> because it cannot be explained to Joe Average

[11:06] <timotimo> i must admit, i have no clue about marketing

[11:07] *** TEttinger left
[11:07] <cxreg> how do things like pypy and the like version themselves?

[11:07] <nine> Well by not daring to call the release 6.0.0, we've robbed ourselves from great markting potential. Because that's the exact version that people have expected to see. So much that they don't believe that Perl 6 final has really been released.

[11:07] *** crux joined
[11:08] <cxreg> "Python2.7 compatible release — PyPy 4.0.1"  "Python3.2.5 compatible release — PyPy3 2.4.0"  # o.O

[11:08] <dalek> rakudo/nom: 511854a | LLFourn++ | src/Perl6/World.nqp:

[11:08] <dalek> rakudo/nom: Fix RT #126566

[11:08] <dalek> rakudo/nom: 

[11:08] <dalek> rakudo/nom: Exporting multiple custom declarators made them clobber their changes to

[11:08] <dalek> rakudo/nom: $*ACTIONS. Now use %*LANG<MAIN-actions> to chain the changes.

[11:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/511854ada2

[11:08] <dalek> rakudo/nom: 0f26aef | lizmat++ | src/Perl6/World.nqp:

[11:08] <dalek> rakudo/nom: Merge pull request #673 from LLFourn/multi-exporthow

[11:08] <dalek> rakudo/nom: 

[11:08] <dalek> rakudo/nom: Fix RT #126566

[11:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0f26aef534

[11:09] <masak> nine: agreed.

[11:09] <masak> nine: as far as I can tell, though, that was very deliberate.

[11:10] <masak> nine: actually, to me it seems half of everone expected to see "Perl 6 1.0", which makes no sense to me

[11:10] <lizmat> deliberate as in wanting to create a marketing disaster ?

[11:10] <masak> lizmat: no, of course not :)

[11:10] <cxreg> imo, we're too overly concerned with the short-term reaction

[11:10] <masak> lizmat: deliberate as in "6.0.0 would send the wrong signals, let's use the 6.c naming scheme instead"

[11:10] <timotimo> cxreg: if we don't have any short-term reaction, we can't hope for a long-term development, though

[11:10] <cxreg> disgaree

[11:11] <masak> I disagree too

[11:11] <cxreg> there's been quite a lot of reaction, and much of it positive.  you can't placate everyone so don't try.

[11:11] <timotimo> mayhaps

[11:11] <masak> I don't care if thousands of developers don't show up at our doorstep today

[11:11] * timotimo is AFK for a bit

[11:11] <timotimo> i trust y'all much more than i trust myself to make decisions about this :)

[11:12] <lizmat> masak: I think we need a bigger bus factor soon, because I detect signs of burnout

[11:12] <AlexDaniel> actually, it would be nice to make the documentation less messy. e.g. if Sxx are not considered as a specification, then what are they and why do we keep touching them? So to me it makes sense to start moving stuff from synopsis into docs or into other places. For example, it can go like this: “is this part documented in user docs? Yes → delete it; no → move it into user docs. Are there any tests for it? No → wait, leave it here for

[11:12] <AlexDaniel> now.”. This way we will get more (potentially useful) stuff in user docs, less cruft in synopsis, and less people will think about synopsis as the specs for perl 6. Also, synopsis will become kinda-specs for not-yet-implemented stuff. Sounds great.

[11:12] <cxreg> comes back to the killer app thing.  make a great thing people want and they'll come asking how they howya the whatsits

[11:13] <masak> lizmat: we always need more core developers.

[11:13] *** poga joined
[11:13] <nine> masak: not just core developers

[11:13] <masak> lizmat: expecting 6.c to bring in new core developers is even more far-fetched than expecting it to bring in masses of users

[11:13] <nine> masak: I can hug our whole marketing team at once

[11:13] <nine> And am looking forward to do that in a couple of weeks :)

[11:14] <masak> :)

[11:14] <cxreg> maybe just a nice solid FAQ would help here?

[11:14] <masak> nine: will you be at GPW?

[11:14] <nine> yes

[11:14] <masak> \o/

[11:14] <masak> me too. haven't made travel arrangements yet, though

[11:14] <DrForr> Reminds me, I need to check on FOSDEM arrangements.

[11:15] *** cognominal joined
[11:15] *** glucosade left
[11:15] *** sno joined
[11:16] *** nzkindest joined
[11:16] <lizmat> cxreg: the solid FAQ is already in place, on doc.perl6.org which is still down :-(

[11:16] <AlexDaniel> .u 💱

[11:16] <yoleaux> U+1F4B1 CURRENCY EXCHANGE [So] (💱)

[11:16] <AlexDaniel> SIGIL EXCHANGE

[11:16] <nine> I wonder if I should even try do to something new for my 5th talk on Inline::Perl5 or if it's time to just recycle...

[11:16] <masak> nine: something new! :D

[11:16] <RabidGravy> something borrowed!

[11:16] <yoleaux> 06:15Z <AlexDaniel> RabidGravy: i²c library? Great! I will probably need that in a week or two, good that it's not something I will have to do myself… ;)

[11:17] <cxreg> lizmat: if the 1.0 question is covered, then the marketing people can use it, no?  is it a matter of having a short-answer to say out loud?

[11:17] <RabidGravy> :)

[11:18] <AlexDaniel> .u 💊💉

[11:18] <yoleaux> U+1F489 SYRINGE [So] (💉)

[11:18] <yoleaux> U+1F48A PILL [So] (💊)

[11:18] <lizmat> cxreg: having that covered is *not* marketing

[11:19] <RabidGravy> AlexDaniel, you can look now https://github.com/jonathanstowe/RPi-Device-SMBus - but it's completely untested right now (until I make the other thing I am making)

[11:19] *** au left
[11:19] <AlexDaniel> RabidGravy: is it limited to RPi or is it more general?

[11:19] *** au joined
[11:20] *** brrt joined
[11:22] <RabidGravy> well, In theory it should work on anything that has a /dev/i2c-1 and uses ioctls to send the commands

[11:23] <RabidGravy> however it is unlikely to be tested by me on anything but a RPi

[11:23] <AlexDaniel> RabidGravy: I can probably test that on A13-based board a bit later this month

[11:24] <AlexDaniel> lizmat: “Ahem, that's not the bug. This is:”

[11:25] <AlexDaniel> lizmat: https://rt.perl.org/Public/Bug/Display.html?id=127144 here

[11:26] <AlexDaniel> m: my uint8 $x = 255; print $x, " -> "; $x = $x + 1; say $x;

[11:26] <camelia> rakudo-moar f0a524: OUTPUT«255 -> 0␤»

[11:26] <AlexDaniel> hm

[11:26] <AlexDaniel> m: y uint8 $x = 255; print $x, " -> "; $x++; say $x;

[11:26] <RabidGravy> I do have a "PCDuino" and an "Intel Galileo" somewhere (both of which support i2c) but I'm skeptical that I have the patience to build Perl 6 on either of them

[11:26] <camelia> rakudo-moar f0a524: OUTPUT«5===SORRY!5=== Error while compiling /tmp/XEqXpIePCr␤Two terms in a row␤at /tmp/XEqXpIePCr:1␤------> 3y uint87⏏5 $x = 255; print $x, " -> "; $x++; say $␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤   …»

[11:26] <AlexDaniel> m: my uint8 $x = 255; print $x, " -> "; $x++; say $x;

[11:26] <camelia> rakudo-moar f0a524: OUTPUT«255 -> 256␤»

[11:26] <AlexDaniel> rigth

[11:26] <AlexDaniel> RabidGravy: hahaha

[11:27] <AlexDaniel> m: my uint8 $x = 255; print $x, " -> "; $x++; say $x; say $x.WHAT

[11:27] <camelia> rakudo-moar f0a524: OUTPUT«255 -> 256␤(Int)␤»

[11:27] <AlexDaniel> m: my uint8 $x = 255; print $x, " -> "; say $x; say $x.WHAT

[11:27] <camelia> rakudo-moar f0a524: OUTPUT«255 -> 255␤(Int)␤»

[11:31] <dalek> roast: c824a98 | lizmat++ | S02-types/native.t:

[11:31] <dalek> roast: Add tests for RT #127144, Juerd++

[11:31] <dalek> roast: review: https://github.com/perl6/roast/commit/c824a98985

[11:32] <nine> I just submitted 2 talk proposals for the GPW

[11:32] <arnsholt> The unconditional warning in NativeCall when you don't pass a version number is pretty annoying

[11:34] <sergot> http://isup.me/perl6.org :(

[11:38] <au> lizmat: "Rakudo Star 2016.01 [Stable]" perhaps? later on "Rakudo Star 2017.01 [LTS]"

[11:38] <au> [Stable] and [LTS] seems to carry more weight than .0.0 these days

[11:38] <lizmat> sergot: yeah, a known issue...  we've tried invoking the moritz already 

[11:38] *** Skarsnik joined
[11:39] <lizmat> au: "Rakudo Star 6.0 [Stable]" has an ever better ring to me  :-)

[11:39] <sergot> lizmat: oki :)

[11:39] <moritz> huh, seems the webserver hangs, or so

[11:39] <au> lizmat: <small>201</small><big>6.0</big><small>1</small>

[11:41] *** snarkyboojum joined
[11:41] <jast> YYYY.MM suggests rolling releases, so in that case a stable/LTS tag is very informative. with something like semver, a tag is much less relevant IMO.

[11:41] <moritz> perl6.org is back up again.

[11:41] <masak> lizmat: I think there's a small confusion involved in the 6.c naming scheme, but I think it would be way *more* confusing to then go 6.0 for the Rakudo Star releases

[11:42] <masak> moritz++ # I assume

[11:42] <moritz> "Rakudo Star 2016.01 with support for Perl 6.c"

[11:43] <moritz> fwiw I just force-rebooted www.p6c.org from the hypervisor; no idea what went wrong

[11:44] <moritz> if anybody wants to try to dig up relevant information to track what went wrong, please let me know

[11:44] <nine> How many people outside of #perl6 know that "Perl 6.c" has the meaning of "Perl 6 v1.0"?

[11:44] <au> lizmat: or, in plaintext unicode: "Rakudo Star 201６.０1 [Stable]"

[11:44] <moritz> nine: I don't know, but I know quite certainly that we don't gain anything with inconsistent versioning

[11:45] <dalek> roast: ceab66c | LLFourn++ | S12-meta/ (2 files):

[11:45] <dalek> roast: multiple declarators inside DECLARE

[11:45] <dalek> roast: review: https://github.com/perl6/roast/commit/ceab66c1ca

[11:45] <dalek> roast: f297fbc | LLFourn++ | S12-meta/ (2 files):

[11:45] <dalek> roast: Merge pull request #93 from LLFourn/multi-exporthow

[11:45] <dalek> roast: 

[11:45] <dalek> roast: multiple declarators inside DECLARE

[11:45] <dalek> roast: review: https://github.com/perl6/roast/commit/f297fbc9e5

[11:45] <lizmat> moritz: some people might argue that exact point with the move to 6.c versioning

[11:46] <lizmat> and I would like to invite anybody in favour of 6.c versioning to start explaining that to visitors of the Perl booths on events like FOSDEM

[11:47] <moritz> lizmat: but isn't it a bit late to have that discussion now?

[11:47] <lizmat> and ofher non-Perl events we intend to visit this year

[11:47] <lizmat> moritz: my idea is about Rakudo Star

[11:47] <moritz> lizmat: I mean, the exact same arguments existed in November too

[11:47] <lizmat> the discussion about the compiler release is indeed water under the bridge

[11:47] <masak> so far I like moritz's suggestion.

[11:48] <nine> Well, about language release, because the compiler targeting 6.c is 2015.12

[11:48] <masak> "Rakudo Star 2016.01 with support for Perl 6.c"

[11:48] *** pierre-vigier left
[11:48] *** pierre-vigier joined
[11:48] <lizmat> moritz: I'm not sure if you've seen the backlash about the lackluster release if Perl 6.c

[11:48] <nine> masak: that doesn't convey anything about this being a stable release

[11:48] *** cygx joined
[11:48] <cygx> o/

[11:48] <lizmat> http://blogs.perl.org/users/jt_smith/2015/12/christmas-came-bah-humbug.html

[11:48] <cygx> .oO( Rakudo Star 2016.01 [6.c-stable] )

[11:48] <nine> masak: nothing to distinguish it from previous star releases

[11:48] <lizmat> http://www.vromans.org/johan/articles/Perl/20151229.html

[11:49] <moritz> lizmat: that blog post has *nothing* to do with versioning

[11:49] <masak> nine: maybe a footnote about what the "6.c" means (so that people who don't know can read more about it and understand what guarantees it gives)

[11:49] <lizmat> moritz: ack, you're right

[11:49] <lizmat> the second one is

[11:49] <moritz> lizmat: it looks like a timing issue to me

[11:49] <lizmat> and there's a lot of traffic on the Perl 6 FB group

[11:49] <moritz> lizmat: though I can't be certain

[11:50] <lizmat> about the versioning

[11:50] <moritz> lizmat: the traffic I've seen on twitter was overwhelmingly positive

[11:50] <cxreg> it seems more like a lack of actually having the * release at all, maybe more than its name

[11:50] <lizmat> well, anyway, I've launched my idea about versioning

[11:50] <lizmat> Rakudo Star

[11:50] <lizmat> and now I'm going to leave it up to you people to convince our marketing people to continue marketing

[11:52] <cxreg> what was that mst marketing effort that he launched for perl 5?  iron man?  we could attempt a similar thing.

[11:52] <abraxxa> what's wrong with modules.perl6.org?

[11:53] <moritz> abraxxa: it seems we don't have a service file that restarts the backend on reboot

[11:53] <masak> "Service Unavailable"

[11:53] <abraxxa> moritz: systemd?

[11:53] <moritz> or rather, it didn't seem to work :(

[11:53] *** lnrdo joined
[11:55] <moritz> Zoffix: how do I debug modules.perl6.org "Service Unavailable"? Hypnotoad is running

[11:56] <nine> it's up!

[11:56] <moritz> yes, I just restarted apache, after manually starting hypnotoad

[11:56] * moritz hates software

[11:56] <abraxxa> I saw Perl 6 release articles on golem.de and phoronix.com

[11:56] * moritz hates operations

[11:56] <nine> moritz: a very healthy sentiment

[11:57] <abraxxa> i need a monitoring sponsor ;)

[11:57] <moritz> lizmat: do you treally think it's easier to explain three versioning schemes than two?

[11:57] <Zoffix> moritz, it works fine

[11:57] <lizmat> I';m not sure there will be 3

[11:57] <Zoffix> moritz, did you have to start it manually after the reboot?

[11:58] <abraxxa> moritz: works again, thanks!

[11:58] <moritz> lizmat: if we do a different versioning scheme for star than for the compiler, there will be three

[11:58] <moritz> Zoffix: yes

[11:58] <lizmat> moritz: I mean, traditionally we've had fewer Rakudo Star releases than we had compiler releases

[11:58] <lizmat> for a number of reasons

[11:58] <moritz> Zoffix: and I had to restart apache2 afterwards

[11:58] <Zoffix> :S

[11:58] <lizmat> so, why not decouple Rakudo Star further?

[11:58] <moritz> lizmat: sure; but still the version numbers corresponded

[11:58] <Zoffix> I'll take a look tonight

[11:58] *** lnrdo left
[11:58] <lizmat> moritz: but why?  other than for historical reasons ?

[11:58] <moritz> Zoffix: could you please write a proper service file for the hypnotoad

[11:58] <Zoffix> Yeah, I will

[11:59] <moritz> lizmat: 1) so that we don't have to explain three versioning schemes 2) so that it's obvious on which compiler it's based

[11:59] <Zoffix> "Service Unavailable" stuff is cached so it takes a few score seconds before it starts showing things even after you start hypnotoad 

[11:59] <lizmat> I mean, if we have a bad compiler release for some reason, we might still want to do a Rakudo Star release because of updates in the modules

[11:59] *** snarkyboojum left
[11:59] *** lnrdo joined
[11:59] <masak> I'd still much perfer Star to be clearly tied to compiler, version-wise

[12:00] <moritz> lizmat: 3) people already recommend "rakudobrew build moar $compiler-version" and then panda install Task::Star; that won't work with separate star versniong

[12:00] <cxreg> you could do a point release of the prior compiler's version?  wait for the compiler to be fixed?

[12:00] <lizmat> moritz: now *that* is a valid point  :-)

[12:00] <DrForr> Out of all the questions we'll get at FOSDEM, I don't think that versioning will be the first one on their minds :)

[12:00] <moritz> cxreg: typically we either did a point release of the current compiler version, or skip the star release altogether

[12:00] <cygx> moritz: does it work anyway without versioned Task::Star

[12:00] *** xpen left
[12:00] <DrForr> I rather suspect "Why?" will be :(

[12:01] <moritz> cygx: the closer it is to a release, the better it works :-)

[12:01] <cxreg> moritz: yeah.  just thinking it out.

[12:01] *** Actualeyes left
[12:01] <cygx> moritz: so the compiler versions  one may provide are just tribal knowledge of what versions work wit task::star

[12:01] <cxreg> you should call it Rakudo Star 15 and make jokes about the 15 years.  own it so they can't mock it.  :-)

[12:02] <cxreg> lol

[12:05] <cxreg> how about a twitter blitz of useful one-liners that you can write in 140 characters or less

[12:05] *** jameslenz left
[12:05] <masak> go for it

[12:06] *** pierre-vigier left
[12:06] <cxreg> i need to work on my golf before i'm up to it, but it sounds fun

[12:06] <masak> need to temper that golf with clarity if you want the one-liners to be useful... :)

[12:08] *** syb joined
[12:09] <dalek> doc: e89affa | lizmat++ | doc/Language/glossary.pod:

[12:09] <dalek> doc: Fix the L<> mess I made last night

[12:09] <dalek> doc: review: https://github.com/perl6/doc/commit/e89affa95e

[12:10] <cygx> if you really wanr to mislead people, the next Rakudo Star version should be called 6.0 ;)

[12:10] <cygx> *want

[12:10] *** user74747 joined
[12:10] * cxreg steps back slowly

[12:10] <llfourn> and call it Rakudo Star Wars

[12:10] <cxreg> llfourn++

[12:11] <llfourn> try to ride the hype!

[12:11] <cxreg> That's no moon, that's a WhateverStar!

[12:12] <nine> Feels a little like we have allowed ourselves to get dragged into a versioning discussion to avoid the more important marketing team bus factor discussion.

[12:13] <Skarsnik> Hello

[12:13] <lizmat> nine: agree... 

[12:13] * lizmat withdraws idea and will no longer discuss it

[12:13] <masak> nine: what do you want to discuss about the marketing team bus factor?

[12:14] *** syb left
[12:14] *** joydo joined
[12:15] *** panos joined
[12:15] <nine> When lizmat++ talks about burn out, I take it seriously. Mostly because it doesn't surprise me. Fact is: we have no infrastructure that I'm aware of for collaboration on marketing.

[12:15] <panos> hello everyone.

[12:15] *** panos is now known as Guest8050

[12:16] <nine> Hello Guest8050 

[12:16] <Guest8050> I am trying to compile rakudo on my windows machine and it is complaining about unknown OS....

[12:16] <Guest8050> Anyone has any idea about it ?

[12:16] <llfourn> Guest8050: with rakudobrew?

[12:17] <Guest8050> No, no....the manual installation.....

[12:17] <Guest8050> Clone the git repo and then try with make

[12:17] <masak> nine: I'm not aware of any such infrastructure either.

[12:17] <Guest8050> I have installed already mingw-w64 at my pc

[12:17] <Guest8050> What do you mean masak ?

[12:17] <llfourn> Guest8050: hopefully you ran perl Configure.pl --gen-moar --gen-nqp

[12:18] <lizmat> Guest8050: is it a spectest test that complains about unknown OS ?

[12:18] <Guest8050> Correct !!! This is what i am doing !!! :)

[12:18] <FROGGS> Guest7256: dunno if it works with mingw... the easiest thing might be to install strawberryperl that ships a gcc

[12:18] <Guest8050> Oh !!!!!!

[12:19] <cygx> Guest8050: are you using an msys shell?

[12:19] <Guest8050> This....i didn't knew !!!

[12:19] <Guest8050> I am using ActiveState perl (which is the one we usually use at the office)....

[12:20] *** Actualeyes joined
[12:20] <cygx> I think jnthn uses ActiveState and MSVC

[12:20] <FROGGS> I usually either use strawberry *or* activeperl with MSVC

[12:20] <Guest8050> Hi, cygx...i am using the mingw-w64

[12:21] *** loren joined
[12:21] <cygx> Guest8050: you might try --moar-option="--os mingw32"

[12:21] <loren> Hi, #Perl 6

[12:21] <FROGGS> hi loren

[12:21] <loren> Can i test MAIN feature use evalbot ?

[12:22] <Zoffix> don't think so

[12:22] <loren> Em, oh..

[12:22] <FROGGS> m: sub MAIN(Str $foo) { }

[12:22] <camelia> rakudo-moar 0f26ae: OUTPUT«Usage:␤  /tmp/V0cGYqXky_ <foo> ␤»

[12:22] <FROGGS> loren: like this?

[12:23] <Zoffix> :o

[12:23] <loren> like perl6 -e 'sub MAIN(Str $x) { }' ""

[12:23] *** nige1 left
[12:24] <FROGGS> loren: do you want to see the usage message for wrong args or do you want to call it successfully?

[12:24] <loren> call it

[12:24] <loren> i have a problem about it

[12:25] <FROGGS> loren: just call it, it is a subroutine nevertheless...

[12:25] <FROGGS> m: sub MAIN(Str $foo) { }; MAIN(<42>)

[12:25] <camelia> rakudo-moar 0f26ae: OUTPUT«Usage:␤  /tmp/4yhpj25ZMg <foo> ␤»

[12:25] <loren> When a pass a empty string to it, perl6 will report error

[12:25] <FROGGS> m: say <42>

[12:25] <camelia> rakudo-moar 0f26ae: OUTPUT«42␤»

[12:26] <FROGGS> m: sub MAIN(Str $foo) { }; MAIN("")

[12:26] <camelia> rakudo-moar 0f26ae: OUTPUT«Usage:␤  /tmp/zqz6zx1jUJ <foo> ␤»

[12:26] <FROGGS> why do I get a usage message here?

[12:26] <FROGGS> loren: what error message do you get?

[12:26] <loren> I wonder too..

[12:27] <loren> Cannot invoke this object ..

[12:27] <FROGGS> hmmm

[12:27] <loren> just this message

[12:27] <loren> Cannot invoke this object \n  in block <unit> at -e line 1

[12:27] <FROGGS> $ perl6 -e 'sub MAIN(Str $x) { }' ""

[12:27] <FROGGS> Cannot invoke this object

[12:28] <FROGGS> confirmed

[12:28] <FROGGS> m: val("")

[12:28] <camelia> rakudo-moar 0f26ae: OUTPUT«Cannot invoke this object␤  in block <unit> at /tmp/i8Jbk4RMoA line 1␤␤»

[12:28] <FROGGS> golfed

[12:28] *** kaare_ joined
[12:29] <loren> em ??

[12:29] * lizmat looks at it

[12:29] *** nzkindest left
[12:29] <cxreg> m: val(Mu)

[12:30] <camelia> rakudo-moar 0f26ae: OUTPUT«Memory allocation failed; could not allocate 2411960 bytes␤»

[12:30] *** nzkindest joined
[12:30] <cygx> oO

[12:30] <AlexDaniel> what is val?

[12:30] <Guest8050> Thank you so much, i will try with strawberry perl...

[12:30] *** pjscott joined
[12:31] <loren> $ perl6 -e 'say "I can use evalbot like this, get it!"'

[12:31] <loren> What happen ..

[12:31] *** Guest8050 left
[12:32] <DrForr> loren: You can paste that into your own terminal :)

[12:32] <cxreg> m: val(Str)

[12:32] <camelia> rakudo-moar 0f26ae: OUTPUT«Cannot unbox a type object␤  in block <unit> at /tmp/ntwjZMf2RL line 1␤␤»

[12:32] <RabidGravy> I keep meaning to write a vim macro such that I can select a bit of code and run it, putting the output in a new buffer

[12:32] <cxreg> i'm mildly concerned at the Mu one that OOMs

[12:33] <loren> Em, DrForr I know, i just try whether it work or not..

[12:34] <loren> m: say &val;

[12:34] <camelia> rakudo-moar 0f26ae: OUTPUT«sub val (;; Mu | is raw) { #`(Sub|63430800) ... }␤»

[12:35] *** nige1 joined
[12:36] *** _mg_ left
[12:37] <lizmat> FROGGS: so what do you think val("") should return ?

[12:37] <lizmat> and should it warn ?

[12:39] <FROGGS> dunno, really

[12:40] <lizmat> Nil perhaps ?

[12:40] <arnsholt> m: is-approx -1.4210854715202e-14, 0, "?"

[12:40] <camelia> rakudo-moar 0f26ae: OUTPUT«5===SORRY!5=== Error while compiling /tmp/szLW16hg4O␤Undeclared routine:␤    is-approx used at line 1␤␤»

[12:40] <arnsholt> m: use Test; is-approx -1.4210854715202e-14, 0, "?"

[12:40] <lizmat> or "" with a warning ?

[12:40] <camelia> rakudo-moar 0f26ae: OUTPUT«not ok 1 - ?␤␤# Failed test '?'␤# at /tmp/PjPwCQy8Ff line 1␤# expected: 0␤# got:      -1.4210854715202e-14␤»

[12:40] <lizmat> m: val(Int)   # something like this ?

[12:40] <camelia> rakudo-moar 0f26ae: OUTPUT«Value of type Int uselessly passed to val()  in block <unit> at /tmp/mxPbTV6ThN line 1␤»

[12:44] <FROGGS> val should return a hybrid type/value for a string that looks like another type, no?

[12:44] *** _mg_ joined
[12:44] <Skarsnik> oh a variable named like a named arg does not work?

[12:44] <FROGGS> so "" should return "" without a warning IMO

[12:44] <FROGGS> Skarsnik: context?

[12:45] <lizmat> FROGGS: indeed...

[12:45] <Skarsnik> m: sub foo($a, :$x) {say "foo"}; my $x = 1; foo(1, $x);

[12:45] <camelia> rakudo-moar 0f26ae: OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in sub foo at /tmp/d3oKWSKDR8 line 1␤  in block <unit> at /tmp/d3oKWSKDR8 line 1␤␤»

[12:45] *** cygx left
[12:46] <Skarsnik> Oh I need a put : in front of it

[12:47] <Skarsnik> m: sub foo($a, :$x) {say "foo"}; my $x = 1; foo(1, :$x);

[12:47] <camelia> rakudo-moar 0f26ae: OUTPUT«foo␤»

[12:47] <FROGGS> Skarsnik: yes, that

[12:47] <FROGGS> m: my %h; say (:%h<foo>)

[12:47] <camelia> rakudo-moar 0f26ae: OUTPUT«(Mu)␤»

[12:47] <abraxxa> Skarsnik: I'll test gptrixie against the OCI header files as soon as I find time

[12:47] <FROGGS> m: my %h = foo => 42; say (:%h<foo>)

[12:47] <camelia> rakudo-moar 0f26ae: OUTPUT«(Mu)␤»

[12:47] <FROGGS> :/

[12:48] <FROGGS> m: say (:$<foo>)

[12:48] <camelia> rakudo-moar 0f26ae: OUTPUT«foo => Nil␤»

[12:48] <FROGGS> I was hoping :%h<foo> would DTRT

[12:48] <Skarsnik> abraxxa, remind me I need to add array output x)

[12:49] *** lnrdo left
[12:51] *** krunen joined
[12:53] *** lnrdo joined
[12:53] <daxim> U+1F98B BUTTERFLY   # we did it, reddit

[12:53] *** lnrdo_ joined
[12:53] *** panos_GR joined
[12:53] <panos_GR> Hello to everyone.

[12:54] <panos_GR> You were correct ! By using Strawberry perl everything worked fine !!!

[12:54] <llfourn> panos_GR: !! awesome :D !!

[12:54] <panos_GR> But in perl6 there is no executable...right ?

[12:54] <panos_GR> I mean.....i just see a perl6.bat

[12:54] <panos_GR> This is the equivalent of the perl.exe ?

[12:55] <FROGGS> panos_GR: yes, that's correct

[12:55] <panos_GR> Because it is running on MoarVM ?

[12:55] <panos_GR> Right ?

[12:55] <FROGGS> perl6.bat will invoke the vm (MoarVM) plus some options

[12:55] <FROGGS> just run than

[12:55] <panos_GR> Oh !!!!

[12:55] <FROGGS> perl6 -e "say 'hello!'"

[12:55] <panos_GR> Wow !!! You guys made my day today !!!!! :D

[12:55] <FROGGS> \o/

[12:55] <dalek> rakudo/nom: cd7cd0e | lizmat++ | src/core/allomorphs.pm:

[12:55] <panos_GR> Yes it worked !!! [perl6 -e "say 'hello!'"]

[12:55] <dalek> rakudo/nom: Fix various val() related issues

[12:55] <dalek> rakudo/nom: 

[12:55] <dalek> rakudo/nom: As golfed by FROGGS++ at http://irclog.perlgeek.de/perl6/2016-01-04#i_11826565

[12:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cd7cd0ef70

[12:56] <panos_GR> It's alive !!!!! :D

[12:56] <FROGGS> *g*

[12:57] <panos_GR> But what i cannot understand is why with my previous configuration it didn't worked !

[12:57] <panos_GR> Strawberry perl + MinGW-W64

[12:57] <panos_GR> Sorry...i mean ActiveState Perl + MinGW-W64

[12:58] *** lnrdo left
[13:04] <FROGGS> panos_GR: the --moar-option shown earlier in irc might have helped too

[13:04] <FROGGS> panos_GR: seems our operating system guessing could be improved with that constellation

[13:04] <panos_GR> I have tried but couldn't work.

[13:04] <panos_GR> I got the same issue.....

[13:04] <FROGGS> aha

[13:05] <FROGGS> well, we'll fix that too at some point

[13:05] <panos_GR> It's all right. No worries...since i managed (with your help) to make it work....i am quite happy !

[13:05] <panos_GR> Actually i am using perl 5 for many years....but i am completelly new in perl6 !

[13:05] <dalek> nqp: b295edd | (Pawel Murias)++ | tools/build/MOAR_REVISION:

[13:05] <dalek> nqp: Bump MOAR_REVISION to hopefully fix a bug randomly screwing up code generation on the js backend.

[13:05] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b295edd3d1

[13:05] <FROGGS> panos_GR: then have fun learning something new :o)

[13:06] <panos_GR> Of course at home i didn't had ANY problem at all with my linux box...at the office i am stuck with windows.....

[13:06] <panos_GR> Thank you so much !

[13:08] *** panos_GR left
[13:09] *** virtualsue joined
[13:11] <nine> Cool! It just took me ~ 90 minutes to create updated openSUSE packages for MoarVM 2015.12, nqp 2015.12 and rakudo 2015.12.1 including finding out where to actually download the tarballs from :)

[13:13] <_nadim> Gone are the days when people liked to install from source ... says an ex Gentoo user.

[13:13] *** lucasb joined
[13:13] <nine> I rebuild rakudo from source multiple times a day, but if we are to use it on our servers, there'd better be packages for it.

[13:14] <_nadim> nine++

[13:14] <loren> i prefer use source build it 

[13:14] <lucasb> you said... rakudo 2015.12.1 ?

[13:15] <nine> Something close to it, actually. The package is called 2015.12.1 and contains current nom

[13:15] <loren> fedora packages version are still 2015.11

[13:16] <lucasb> ah, ok. it's not a git tag for 2015.12.1

[13:16] <arnsholt> I think all our is-approx tests break when the expected value is 0...

[13:16] <arnsholt> Which is kind of annoying

[13:17] <arnsholt> (And they're not the same is-approx as is specified in S24, but that's fixable)

[13:18] <lucasb> now that nqp got a moar bump, can rakudo be bumped as well? so I can build a new one with the libuv updated :)

[13:18] <moritz> m: use Test; plan 1; say is-approx 1e-12, 0, 'foo';

[13:18] <camelia> rakudo-moar cd7cd0: OUTPUT«1..1␤not ok 1 - foo␤␤# Failed test 'foo'␤# at /tmp/TRRNcYQ9vg line 1␤# expected: 0␤# got:      1e-12␤False␤# Looks like you failed 1 test of 1␤»

[13:18] *** pjscott left
[13:19] *** CIAvash left
[13:19] <arnsholt> moritz: The default one compares |got - expected|/max(|got|, |expected|) to the tolerance value (by default 1e-6)

[13:20] <RabidGravy> loren, fedora tracks rakudo star I think

[13:20] <arnsholt> Of course, that ratio's gonna be 1 for all inputs

[13:20] <arnsholt> There's a more advanced version, but I think that breaks similarly at 0

[13:21] <brrt> panos_GR: with Strawberry Perl (x64), MoarVM *should* justwork

[13:21] <brrt> i dunno about mingw64

[13:22] <dalek> rakudo/nom: 812a48b | lizmat++ | src/core/allomorphs.pm:

[13:22] <dalek> rakudo/nom: Streamline allomorphs a bit

[13:22] <dalek> rakudo/nom: 

[13:22] <dalek> rakudo/nom: - reduce number of scope by using ternaries/postfix given

[13:22] <dalek> rakudo/nom: - don't use return if it is already last value of a sub

[13:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/812a48b0b7

[13:22] <loren> I often update my fedora 

[13:22] *** domidumont left
[13:22] *** administ1ator joined
[13:24] <arnsholt> Ah, nm. The more elaborate version works

[13:25] <loren> rakudo on windows version are still 2015.09..

[13:25] *** domidumont joined
[13:25] <arnsholt> Knuth suggests a different method of comparing floats though

[13:25] *** wamba left
[13:26] *** pierre-vigier joined
[13:27] *** wamba joined
[13:31] *** domidumont left
[13:31] *** atta left
[13:32] <lizmat> hmmm... so how do I declare an internal link in the doc/glossary ?

[13:33] *** nzkindest left
[13:33] <lizmat> L<foo> seems to refer to /type/foo

[13:33] <dalek> rakudo-star-daily: cc115b5 | coke++ | log/ (7 files):

[13:33] <dalek> rakudo-star-daily: today (automated commit)

[13:33] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/cc115b50b0

[13:33] <dalek> perl6-roast-data: 5058335 | coke++ | / (7 files):

[13:33] <dalek> perl6-roast-data: today (automated commit)

[13:33] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/50583355e8

[13:33] *** nzkindest joined
[13:35] <dalek> doc: 8c4bd04 | lizmat++ | doc/Language/glossary.pod:

[13:35] <dalek> doc: Actions(stub)/Adverbial Pair/Argument/Parameter

[13:35] <dalek> doc: review: https://github.com/perl6/doc/commit/8c4bd0447b

[13:35] *** domidumont joined
[13:35] <arnsholt> lizmat: L<#Foo> or something along those lines, if memory serves

[13:36] <lizmat> arnsholt++

[13:41] <Skarsnik> why this is full of fail? https://github.com/coke/rakudo-star-daily/blob/master/log/MoarVM-test-modules.log

[13:43] *** lnrdo_ left
[13:44] <dalek> doc: 87ae1b7 | lizmat++ | doc/Language/glossary.pod:

[13:44] <dalek> doc: Another round of link fixes

[13:44] <dalek> doc: review: https://github.com/perl6/doc/commit/87ae1b7fbd

[13:44] <RabidGravy> lizmat++

[13:47] *** pmurias left
[13:48] *** pmurias joined
[13:51] *** zakharyas left
[13:53] *** pmurias left
[13:54] *** ribasushi left
[13:54] *** zakharyas joined
[13:54] *** zhi joined
[13:55] *** pmurias joined
[13:56] *** joydo left
[13:59] * RabidGravy locates the PiGlow and cracks on with making a thing

[13:59] <dalek> nqp: 4345f11 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[13:59] <dalek> nqp: [js] Remove useless code.

[13:59] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4345f11b5d

[13:59] <dalek> nqp: 87092ac | (Pawel Murias)++ | src/vm/js/ (2 files):

[13:59] <dalek> nqp: [js] Implement nqp::objectid.

[13:59] <dalek> nqp: review: https://github.com/perl6/nqp/commit/87092ac798

[13:59] <dalek> nqp: e997347 | (Pawel Murias)++ | t/nqp/92-where.t:

[13:59] <dalek> nqp: Test nqp::objectid.

[13:59] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e9973477a1

[13:59] <dalek> nqp: e4b80e9 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[13:59] <dalek> nqp: [js] Add a bunch of C_TYPE_* constants.

[13:59] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e4b80e9454

[13:59] *** nzkindest left
[14:00] *** nzkindest joined
[14:00] *** ribasushi joined
[14:02] *** pmurias_ joined
[14:04] *** xpen joined
[14:05] *** pmurias left
[14:08] <Skarsnik> it could be cool if the 'Use of uninitialized value of type Any in string context' names the variable x)

[14:09] <[Coke]> (point release of 2015.12) this is tricky and needs review. If someone is thinking of this to help with the star release, you can't use nom at this point.

[14:10] <[Coke]> (need a new branch off christmas with whatever has to be cherry picked)

[14:10] *** pierre-vigier left
[14:11] <lizmat> [Coke]: I only think the GC fix in MoarVM might warrant a point update

[14:12] <lizmat> so maybe it could be as simple as an NQP version bump

[14:13] <[Coke]> (stable release) we had an argument about that pre-xmas as well, and jnthn made a convincing point that we don't really want stable vs. dev releases, at least short term.

[14:15] <lucasb> I fear that backward compatibility will kill all the fun

[14:15] <[Coke]> lizmat: then we have to review nqp commits & moarvm commits also.

[14:16] <lizmat> hmmm....  yeah  :-(

[14:16] *** pierre-vigier joined
[14:16] <lizmat> hmmm... there are some CURI fixes...

[14:16] <[Coke]> but I know flussence, e.g. has some strong ideas for things that need to be in a point release. (and I think those were related to precomp or installation)

[14:16] <lizmat> OTOH, we're only two weeks off from 2016.01, right ?

[14:17] <moritz> but if that also supports perl 6.c, it can't break much backwards compatibility either, can it?

[14:18] <nine> Yeah, maybe we should just release an early 2016.01?

[14:18] *** zakharyas left
[14:18] <lizmat> well, the release date is set on 16 ?

[14:18] <lizmat> seems like 21 would be more historically correct, [Coke] ??

[14:19] <Skarsnik> why not delay star for 2016.01?

[14:19] *** zakharyas joined
[14:20] *** pmurias_ is now known as pmurias

[14:20] *** aenaxi joined
[14:21] <pmurias> do we have to review and cherry pick all the MoarVM/nqp commmits, isn't just passing the 6.c test suit enough?

[14:23] *** pierre-vigier left
[14:24] *** pjscott joined
[14:25] *** wamba left
[14:25] *** pierre-vigier joined
[14:26] *** _Vi left
[14:29] <lucasb> idk if it makes sense what I will say, but shouldn't 2016.01 monthly releases be targeting the upcoming 6.d version? moar, nqp and rakudo should all branch from xmas release to keep a 6.c compatibility branch. Only a few fix commits would have to be cherry picked, right? I think this is the only way possible for the language to continue evolve.

[14:29] *** ZoffixW joined
[14:29] <Woodi> hallo #perl6 :)

[14:30] <Woodi> lucasb: IMO 6.c for next 2 years...

[14:30] <Woodi> lucasb: and new features going to experimental ?

[14:32] * ZoffixW reads backlog

[14:32] <ZoffixW> m: my @foo[10]; my @bar[10]; my @baz := |@foo, |@bar; @baz = ^20; say @foo; say @bar

[14:32] <camelia> rakudo-moar 812a48: OUTPUT«[0 1 2 3 4 5 6 7 8 9]␤[10 11 12 13 14 15 16 17 18 19]␤»

[14:32] <ZoffixW> I'm here to score nine's extra points :) This works because it's the containers inside the arrays that get bound which is why assigning to @baz works.

[14:32] <ZoffixW> Also +1 (no, +2) on using the [Stable] tags on releases. +1 on using [LTS] too, but maybe only in a year, when the dust settles a bit and things become more stable to support an LTS. I've actually not seen any confusion over actual versions and more about there being a version of the language + a version of a compiler + lack of a R* release you could just point people at. I think something tagged with '[Stable]' gives people a clear indicator of what

[14:32] <ZoffixW>  to download among the many options.

[14:33] <nine> ZoffixW: right! :)

[14:33] <ZoffixW> \o/

[14:33] <lucasb> well, idk nothing really. I think there is this balance between language evolution and backward compatibility, and they contrast with each other. The last months of 2014 saw the most disruptive changes and I think it's silly to think that now everything is stable and frozen.

[14:34] <brrt> that's kind of what was promised, though

[14:34] <nine> lucasb: have you read this? https://gist.github.com/jnthn/f3a691016c20f0cc4cfa

[14:34] <Woodi> maybe our marketing departmen could start to push C11/C++11/6.c propaganda ? :)

[14:35] <ZoffixW> lucasb, fwiw the last few months of 2015, I rage quitted programming in p6 several times because every thing I touch was crumbling due to rapid changes. It's especially true with the stuff in the ecosystem where authors don't always have the time to fix their stuff or to merge PRs.

[14:35] <lucasb> nine: I haven't read in its entirety, but I'll do so. sorry if I said something nonsense :)

[14:35] *** CoconutCrab left
[14:36] <lucasb> ah, I mistake the year, it's 2015, not 2014 :D

[14:37] <FROGGS> ZoffixW: sadly, we had to do that (were "we" does not include me sadly, had hoped to be able to spend more time on perl6)

[14:37] <ZoffixW> FROGGS, sure, that's perfectly understandable.

[14:39] <Woodi> also: last years was like this: March -> new feature or speed++; May -> same or similiar; October new feature or speed++ again; December something++ again. I hope that 2016 will be similiar: few seriously good "events" especially in in speedup or bug removing. so by 2017 we could have something STABLE/LTS like au++ proposed

[14:39] <brrt> damn that is a sensible proposal for the 6.c

[14:41] *** pmurias left
[14:42] <Woodi> ZoffixW: rage stopping programming in Perl6 is common thing last years :) becouse of bugs and language changes. now for 2016 we have bugs alone ;)

[14:43] <ZoffixW> Woodi, I'd put lack of libraries in there too :)

[14:44] *** n0tjack joined
[14:44] *** pmurias_ joined
[14:44] *** skids joined
[14:44] <ZoffixW> I've tried DBIish last night and—and this is not to belittle anyone's effort in making it—but using it, compared to say Perl 5's DBIx::Class is lightyears away. Even Mojo::SQLite is way more usable than DBIish SQLite backend

[14:44] * ZoffixW is currently contemplating releasing DB::SQLite BTW

[14:45] *** lnrdo joined
[14:45] <abraxxa> ZoffixW: PLEASE document your experience in e.g. github issue(s)!

[14:45] <ZoffixW> abraxxa, the DBIish experience?

[14:45] <abraxxa> yes

[14:45] <Woodi> ZoffixW: and there no many finished modules becouse every time you start something you hit bug</maybe history>...

[14:45] <ZoffixW> abraxxa, I fear to sound too negative.

[14:46] *** molaf joined
[14:46] <ZoffixW> I think the brute-force approach of porting something from P5 to P6 will never produce good results.

[14:46] <dalek> doc: 2819f25 | lizmat++ | doc/Language/glossary.pod:

[14:46] <dalek> doc: Add stubs for stuff inside the glossary already

[14:46] <dalek> doc: review: https://github.com/perl6/doc/commit/2819f25081

[14:47] <ZoffixW> Unless it's something trivial, like Lingua::Conjunction and Number::Denominal (P5) / Number::Denominate (P6) that I ported.

[14:47] <Woodi> ZoffixW: I very miss bruteforce C API in Perl6 :) then things could be builded on top of this

[14:47] <ZoffixW> But even then, I changed the interfaces because P6 has Types and stuff

[14:47] <ZoffixW> Anyway. My 2 cents :)

[14:47] <pmurias_> nick pmurias

[14:47] * ZoffixW goes back to $doing-things

[14:47] *** pmurias_ is now known as pmurias

[14:48] *** ZoffixW left
[14:48] <nine> Building packages with the Open Build Service really is a joy!

[14:49] <abraxxa> as soon as DBDish::Oracle gets working on moarvm again I want to work on its API

[14:49] *** pierre-vigier left
[14:50] <abraxxa> Zoffix: we already started in making it more Perl6-ish by using - instead of - in the method names and returning typed values

[14:50] <abraxxa> I plan on refactoring the test suite into a (standalone) module (Test::DBDish?) to make running the same base tests against multiple DBD's easy

[14:51] <abraxxa> nine: is that a Suse thing?

[14:51] *** gtodd joined
[14:51] <gtodd> is there a way on perl6's rt to list all bugs posted by a particular user?

[14:52] * Woodi was realy shocked when saw that NCurses.pm6 looks complete :)  krunen++

[14:53] <El_Che> stupid error I keep shooting myself in the foot. Have a attr $.name and a method name

[14:53] <RabidGravy> and works and everything

[14:54] <nine> abraxxa: yes, though it can create packages for openSUSE, SLES, Arch, Debian, Fedora, ScientificLinux, RedHat, CentOS, Ubuntu and Univention

[14:54] <RabidGravy> I'm struggling with "handles" today

[14:55] *** pierre-vigier joined
[14:57] * lizmat adds a lemma stub for "handles" in the glossary

[14:58] <RabidGravy> edit, I'm struggling with shell quoting today ;-)

[14:58] <RabidGravy> m: class F { has @.bb handles ( "get-bb" => "AT-POS" ) = <a b c d>; };  say F.new.get-bb(1)

[14:58] <camelia> rakudo-moar 812a48: OUTPUT«b␤»

[14:58] <timotimo> yeah, shell quoting is the worst

[14:59] <timotimo> i recommend an editor shortcut that evaluates the file for you :P

[14:59] *** profan_ is now known as profan

[15:01] <[Coke]> lizmat: yes; we have to answer all these questions for 2016.01

[15:01] <[Coke]> lizmat: we changed the release cycle last year after discussion. 

[15:01] <[Coke]> lizmat: (the actual monthly date changed)

[15:01] <lizmat> ok

[15:02] <[Coke]> mainly because mid-week for a release makes it really hard for someone with a standard $DAYJOB to do the release.

[15:03] <lizmat> okidoki, yeah, that makes sens

[15:03] <lizmat> e

[15:03] * [Coke] is at $dayjob right now, so responses to convos may take an hour. :)

[15:04] *** anaeem1 joined
[15:04] *** psy_ joined
[15:04] *** lnrdo left
[15:04] *** anaeem1 left
[15:05] *** psy_ left
[15:05] *** lnrdo joined
[15:05] *** lnrdo left
[15:05] *** psy_ joined
[15:06] *** lnrdo joined
[15:10] *** _Vi joined
[15:11] * gtodd answers self:  there is and I figured it out and e.g. Zefram's bugs are interesting :) ... 

[15:13] *** wamba joined
[15:13] <nine> t/04-nativecall/15-rw-args.t ... Failed 16/22 subtests on openSUSE Factory i586: https://build.opensuse.org/package/live_build_log/home:niner9:branches:devel:languages:parrot/rakudo/openSUSE_Factory/i586

[15:13] *** muraiki joined
[15:14] <muraiki> this is belated, but congrats to all on the Christmas release and thank you all for your hard work :)

[15:14] *** nige1 left
[15:16] *** khw joined
[15:18] <arnsholt> nine: At a guess, 32bit vs. 64bit issue, since you're on a 32bit platform

[15:19] <FROGGS> hmmm, I should try that on my 32bit ubuntu vm...

[15:20] <RabidGravy> I found my PCDuino, when I have a couple of days to spare I may try building rakudo on it

[15:21] *** lucasb left
[15:21] <Woodi> days ? it takes so much time ? :)

[15:21] <arnsholt> BTW, is "sub foo is native('foo')" intended to be deprecated?

[15:21] <konobi> you could always try building rakudo for the kobo

[15:22] <RabidGravy> it's like a 100Mhz single core ARM6

[15:22] <|Tux|> m: say [+] (3..9).map(* **3)

[15:22] <camelia> rakudo-moar 812a48: OUTPUT«2016␤»

[15:22] <|Tux|> m: say [+] (3..9).map(***3)

[15:22] <camelia> rakudo-moar 812a48: OUTPUT«7␤»

[15:22] <konobi> (kobo aura is 1GHz, 256Mb armv7l)

[15:22] *** CIAvash joined
[15:24] <loren> Night, everyone ..

[15:25] <timotimo> night loren

[15:25] <loren> ^_^, o//

[15:25] *** pierre-vigier left
[15:25] <RabidGravy> arnsholt, not that I know of

[15:26] <lizmat> m: say [+] (3..9).map: *³   # alas  :-(  

[15:26] <camelia> rakudo-moar 812a48: OUTPUT«Cannot call Numeric(Whatever: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at /tmp/XDO3XXbpQP line 1␤␤»

[15:27] *** sammers left
[15:27] *** loren left
[15:28] *** pjscott left
[15:28] <nine> FROGGS: you here?

[15:28] <lizmat> m: say "Hello world"

[15:28] <camelia> rakudo-moar 812a48: OUTPUT«Hello world␤»

[15:28] <FROGGS> nine: I am

[15:28] <nine> FROGGS: looks like precompiled files contain the path of their source files. Does moar actually do anything with this?

[15:29] <FROGGS> nine: perhaps for error reporting?

[15:30] <FROGGS> nine: I guess these strings are in the string heap... these are at least used for $?FILE

[15:30] <dalek> nqp: 23b4314 | (Pawel Murias)++ | src/vm/js/QAST/Compiler.nqp:

[15:30] <dalek> nqp: [js] Stub nqp::settypefinalize.

[15:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/23b431447f

[15:30] <dalek> nqp: 1c3a513 | (Pawel Murias)++ | src/vm/js/ (3 files):

[15:30] <dalek> nqp: [js] Basic nqp::getlexrel working only on nqp::curlexpad().

[15:30] <dalek> nqp: 

[15:30] <dalek> nqp: Might need to make it work for outer variables, etc. latter on.

[15:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1c3a513eaa

[15:30] <dalek> nqp: 652b299 | (Pawel Murias)++ | t/nqp/77-curlexpad.t:

[15:30] <dalek> nqp: Basic tests for nqp::getlexrel, and nqp::existkeys with a outer variable

[15:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/652b2996c8

[15:31] <nine> FROGGS: oh, I just noticed that even the .deps files contain the paths containting the BUILDROOT. Guess I'll have to check with flussence++ on how to avoid that.

[15:32] <arnsholt> FROGGS: Is the intention to deprecate "is native('foo')"? If not, the warning really shouldn't be there

[15:33] <Ulti> ooo p6doc has got all fancy

[15:33] <nine> arnsholt: I'm actually wondering if it's too late to change the is native(('foo', v1)) to use some named argument for the version

[15:33] *** pierre-vigier joined
[15:35] <arnsholt> At a guess, probably not

[15:36] <arnsholt> But probably not, given how traits work

[15:36] <arnsholt> A separate version trait might be cleaner

[15:37] <FROGGS> arnsholt: I dunno

[15:37] <llfourn> this exists now in case anyone didn't see: https://www.youtube.com/watch?v=jG_t23B8hDI #lizmat++ p6 talk

[15:37] <arnsholt> TBH, I've been wanting to do some larger-scale cleaning in NativeCall for a while. Just no time ATM

[15:38] <Juerd> lizmat: Thanks for adding the tests :)

[15:38] <lizmat> Juerd: thanks for writing them!  :-)

[15:38] <skids> Really the "is native" version needs  to allow specifying a bunch of ranges so authors can blacklist buggy releases of the target lib.

[15:39] <lizmat> llfourn: it's just the quality of the video  :-(

[15:39] *** sammers joined
[15:39] <Juerd> lizmat: Note that I screwed up the first post and the actual bug is in a reply. You're right that the thing that I initially posted does exactly the right thing. I copy/pasted the wrong lines.

[15:40] <skids> (Though, going by the lib version these days when fixes are backported tends to be a mess anyway)

[15:40] <lizmat> Juerd: yeah, figure that out later  :-)

[15:40] <RabidGravy> right I've type something like "has @.foo handles ('get-foo' => 'AT-POS');" more than three times now, time for a trait I think ;-)

[15:40] <llfourn> lizmat: yes I am just discovering this. It seems you're face will be forever shrouded in darkness.

[15:40] *** administ1ator left
[15:40] *** nige1 joined
[15:41] <lizmat> llfourn; not sure that's a bad thing :-)

[15:42] <arnsholt> FROGGS: Well, there's an unavoidable warning if you don't do it, which is kinda annoying =)

[15:42] *** pierre-vigier left
[15:43] *** octoploid left
[15:43] *** xinming_ joined
[15:44] *** pierre-vigier joined
[15:45] *** xinming left
[15:46] <dalek> doc: cf8a75e | lizmat++ | doc/Language/glossary.pod:

[15:46] <dalek> doc: Another bunch of lemmas and stubs

[15:46] <dalek> doc: review: https://github.com/perl6/doc/commit/cf8a75e9b0

[15:47] <pdcawley> Is there a way of persuading the repl to accept/detect multi line statements?

[15:47] *** lnrdo left
[15:48] <llfourn> pdcawley: I don't think so.

[15:48] <llfourn> (of course in the future this will be desireable)

[15:48] * pdcawley grins, "Patches welcome?"

[15:49] <[Coke]> it's hard, or we'd have done it already.

[15:49] <mspo> make ;'s mandatory with an option ;)

[15:49] <llfourn> mmm it wouldn't be so bad if we could use Perl6::Grammar easily but right now you can't

[15:50] <[Coke]> m: sub a ($a;$b) { say "a" } 

[15:50] <camelia> rakudo-moar 812a48: ( no output )

[15:50] <llfourn> what does ; do in a sig?

[15:50] <FROGGS> pdcawley: the parser is designed to know where a safe point of statement parsing is... though, one would need to port that from STD to rakudo

[15:50] <[Coke]> pdcawley: https://rt.perl.org/Ticket/Display.html?id=112634

[15:50] <pdcawley> [Coke]: Really? Stash the code in a buffer, attempt to execute it, if the error implies an EOF before the end of a parse, carry the buffer over to the next line.

[15:50] <llfourn> i know what ;; does

[15:50] <FROGGS> pdcawley: timotimo and me already tried without much success

[15:51] <FROGGS> pdcawley: IIRC it was about a magic "moreinput" token

[15:51] <timotimo> nothing i try successes :)

[15:51] <FROGGS> *g*

[15:51] <moritz> pdcawley: it's not that easy; the regex engine uses length of the input string all over the place to check if stuff can match or not

[15:51] <pdcawley> run the equivalent of perl -c on the buffer, only actually execute the buffer if the -c passes.

[15:51] *** psy_ left
[15:51] <[Coke]> pdcawley: please give it a shot.

[15:51] <moritz> pdcawley: so there's no clear "have we reached EOF?"

[15:52] <mspo> blank line?

[15:52] <pdcawley> moritz: So... perl -c could continue failing forever, if you fucked up the statement?

[15:53] <[Coke]> pdcawley: right. you need help from the parser to make this work, or how do you tell between "bad" and "not done"

[15:53] *** FROGGS left
[15:53] <pdcawley> [Coke]: Hackish approach: User input a blank line, she must be done, just execute the buffer and let the chips fall where they may.

[15:53] *** zhi left
[15:54] <pdcawley> [Coke]: clearly not the Right Thing long term, but implementable now.

[15:54] <pdcawley> (I hope!)

[15:54] <pdcawley> Where's the REPL to be found in the source.

[15:54] <mspo> pdcawley: hacks that work work best

[15:55] <pdcawley> mspo: Cheat all you want, but don't get caught :)

[15:55] <mspo> now if you could up-arrow your previous multi-line statement, bump into vi mode to move around, and then :w prog.pl6 after it works

[15:55] <nine> Oh my....both my GPW talk submissions have been accepted

[15:55] <cxreg> [Coke]: bad and not-done are the same thing until instructed otherwise by the typist?

[15:55] <awwaiid> nine: come to dcbpw

[15:55] <yoleaux> 08:03Z <nine> awwaiid: Congrats on your progress on Inline::Ruby! Piece of advice: don't map language constructs in one language to constructs in the other language unless they really match semantically. Because one day someone will use code that looks very closely and discovers you cheating.

[15:55] <yoleaux> 08:21Z <nine> awwaiid: I was saying that if there for example is no "symbol" thingy in Perl 6, I'd write a class that mimicks its behavior and can be mapped back to Ruby symbols without ambiguity.

[15:56] <mspo> or can vim just be the repl somehow?

[15:57] <stmuk_> :!perl6 %

[15:57] <nine> awwaiid: I've never been to the US, and I'm not particularily attracted to crossing that border...

[15:57] <awwaiid> yoleaux: good point -- what I've done in other cases is to make a separate "sugar" lib, and anyone who uses it is then opting-in to weirdness.

[15:57] <cxreg> [Coke]: it's how node's repl works, you just get "... " forever.  once you expect that the statement is done, if you still have "... " you can ^C to interrupt the broken input

[15:57] <mspo> kind of like erlang and emacs

[15:58] <awwaiid> nine: ah, that's too bad. I guess I'll have to come over there sometime instead

[15:58] *** gabiruh joined
[15:58] <mspo> although as a non-emacs using the connection was off-putting

[15:58] <mspo> also the erlang repl/interactive env has weird limitations

[15:59] <cxreg> [Coke]: https://gist.github.com/cxreg/e1a88edcb70e734baece

[15:59] <cxreg> pdcawley: you also

[16:00] *** wamba left
[16:00] <pdcawley> cxreg: you've implemented it?

[16:00] <moritz> awwaiid: a good opportunity would be the German Perl Workshop in March :-)

[16:00] <cxreg> no, this is what node.js does

[16:00] <cxreg> it's quite elegant

[16:00] <[Coke]> cxreg: not perfect, but seems better than the current situation. I think part of the issue is that we were going for ideal, and since -that- is hard...

[16:00] <moritz> awwaiid: nine++ is coming and giving two talks on Perl 6, in fact :-)

[16:00] <moritz> awwaiid: http://act.yapc.eu/gpw2016/

[16:01] <cxreg> [Coke]: yeah it is.

[16:01] <[Coke]> there are a HUGE number of nativecall warnings running against 6.c

[16:01] <cxreg> i have minor quibbles with that repl, in that it doesn't distinguish between various errors and often leaves you with "..." when it knows better.  but we could do better.

[16:02] *** xpen left
[16:02] <lizmat> cycling&

[16:03] *** sprocket_ joined
[16:06] <RabidGravy> boom boom boom boom

[16:06] <RabidGravy> dark

[16:08] <awwaiid> moritz: I need to work some place that considers conferences with "perl" in the name as reimbursable :( . But I'll look into it

[16:09] <cxreg> awwaiid: tell them it's RakudoCon

[16:09] <cxreg> :)

[16:09] <llfourn> awwaiid: just tell them YAPC stands for something else

[16:09] <cxreg> Yet Another Profit Center

[16:10] <llfourn> lol

[16:10] <[Coke]> I started keep a list of things I know we need to address before 2016.01 - https://gist.github.com/coke/2d5f2c63eda7cc890eda

[16:10] <mspo> Yearly Annual Prostate Check

[16:10] <mspo> then submit it to your insurance

[16:10] <llfourn> The A should stand for Agile and C - cloud

[16:10] <mspo> ugh, missed a joke on the 'A'

[16:10] <[Coke]> the conference is cheap enough, it's the travel that gets me. :|

[16:11] <[Coke]> Yahoo Agile Pascal Cloud

[16:11] <llfourn> [Coke]++ except for Pascal lol

[16:11] <mspo> maybe a perl6 program could generate these

[16:11] <AlexDaniel> m: my @a = ^10; say(|@a);

[16:11] <camelia> rakudo-moar 812a48: OUTPUT«0123456789␤»

[16:12] <pdcawley> So... where in the source does one find the repl?

[16:12] <Woodi> awwaiid: simplest way to get to conference is if your company sponsor it :)

[16:12] <AlexDaniel> m: my @a = ^10; say join(|@a);

[16:12] <camelia> rakudo-moar 812a48: OUTPUT«10203040506070809␤»

[16:12] *** colomon_ joined
[16:12] <llfourn> Yougsters Agilely Programming the Cloud

[16:12] *** colomon left
[16:12] *** colomon_ is now known as colomon

[16:13] <lucs> m: sub foo (%h?) { say join(" - ", %h.defined) }; foo(); foo({}); # How to distinguish between the two cases?

[16:13] <camelia> rakudo-moar 812a48: OUTPUT«True␤True␤»

[16:13] <[Coke]> pdcawley: I would start with src/Perl6/Compiler.nqp // interactive

[16:13] <[Coke]> that points at HLL::Compiler's interactive

[16:14] <lucs> m: sub foo (%h?) { say %h.defined }; foo(); foo({}); # (Simpler, eh)

[16:14] <camelia> rakudo-moar 812a48: OUTPUT«True␤True␤»

[16:14] <[Coke]> and I think that is at nqp/src/HLL/Compiler.nqp

[16:16] *** araujo left
[16:16] <pdcawley> [Coke]: Cool. Perl6::Compiler is a bit high level then?

[16:17] *** boegel left
[16:18] <pdcawley> [Coke]: Hmm... seems so... 

[16:19] *** brrt left
[16:20] *** dwarring left
[16:20] *** boegel joined
[16:20] *** araujo joined
[16:20] *** ZoffixW joined
[16:21] *** araujo left
[16:21] *** araujo joined
[16:21] *** araujo left
[16:21] *** araujo joined
[16:22] <dalek> doc: 627b289 | (Jake Russo)++ | bin/p6doc:

[16:22] <dalek> doc: Refactor show-docs & change no-pager to a no-op

[16:22] <dalek> doc: 

[16:22] <dalek> doc: Update Windows support in show-docs sub

[16:22] <dalek> doc: Made original ternary more idiomatic as per @jnthn's comment in

[16:22] <dalek> doc: PR #311.  Added another ternary to support no-pager mode in Windows.

[16:22] <dalek> doc: 

[16:22] <dalek> doc: Refactor show-docs & turn no-pager into no-op

[16:22] <dalek> doc: review: https://github.com/perl6/doc/commit/627b289a6f

[16:22] <dalek> doc: ca3ea2b | (Aleks-Daniel Jakimenko-Aleksejev)++ | bin/p6doc:

[16:22] <dalek> doc: Merge pull request #312 from MadcapJake/master

[16:22] <dalek> doc: 

[16:22] <dalek> doc: Refactor show-docs & change no-pager handling

[16:22] <dalek> doc: review: https://github.com/perl6/doc/commit/ca3ea2b612

[16:24] *** siriu5b_ left
[16:24] <hoelzro> pdcawley: what kind of stuff do you want to do with the REPL?

[16:24] *** hahainternet left
[16:25] <pdcawley> hoelzro: initially just allow some kind of multiline input a la things like the node repl.

[16:25] * RabidGravy concludes that "lazy built attribute with a delegate" is better handled by handles on a method

[16:25] <hoelzro> ah ha

[16:26] *** boegel left
[16:26] <hoelzro> I think BEGIN blocks and other compile-time behaviors may make that interesting, but it would probably be an improvement over what we have atm

[16:26] <hoelzro> pdcawley: the code you want to look at is almost definitely in HLL::Compiler

[16:27] <pdcawley> hoelzro: Cool.

[16:27] <lucs> m: sub foo (%h?) { say %h.defined }; foo(); foo({}); # So, how to distinguish between no %h argument passed vs an empty one? (I mistakenly thought .defined would work)

[16:27] <camelia> rakudo-moar 812a48: OUTPUT«True␤True␤»

[16:27] <Skarsnik> nine, you probably could have a named parameter aside the list parameter for version on NC, not sure how that work in a trait thou

[16:27] *** MadcapJake left
[16:27] <mspo> this? https://github.com/perl6/nqp/blob/master/src/HLL/Compiler.nqp

[16:27] <hoelzro> as [Coke] pointed out, the interactive method

[16:27] <hoelzro> mspo: that's the one

[16:28] <mspo> hoelzro: it's difficult to reason about where the source for things will live :)

[16:28] <pdcawley> hoelzro: cool. Are there docs anywhere on how the source is laied out? 

[16:28] <RabidGravy> Skarsnik, named parameters in traits work fine

[16:28] <hoelzro> mspo, pdcawley: I happen to have given a talk on that very thing =)

[16:28] <hoelzro> https://docs.google.com/presentation/d/1JVJfNlCQL7crJytbKsdlf7Jw4c4dMScjogHLkZuOwcs/edit#slide=id.p

[16:29] <pdcawley> If i grab rakudo and do perl ./Configure.pl --gen-nqp, will I have a sane checkout?

[16:29] <hoelzro> you should, yes

[16:29] *** cygx joined
[16:29] <cygx> m: sub foo (Associative $h?) { say $h.defined }; foo(); foo({})

[16:29] <camelia> rakudo-moar 812a48: OUTPUT«False␤True␤»

[16:29] <hoelzro> let me know if there's anything unclear in those slides; I tried to annotate them as best I could

[16:29] <[Coke]> pdcawley: it won't be on master, necessarily.

[16:29] <lucs> cygx: Oho. Thanks.

[16:29] <[Coke]> --gen-nqp=master should get you the latest and greatest.

[16:30] <hoelzro> hmm, unfortunately, I don't cover Perl6::Compiler in that talk =/

[16:30] <pdcawley> [Coke]: but rakudo/nqp will be a git repo?

[16:30] <mspo> $code := $code ~ "\n"; ;; change that to \n\n ?

[16:31] <cygx> lucs: not sure if it should work with the % sigil

[16:31] <cygx> I'd probably vore for yes

[16:31] *** boegel joined
[16:31] <cygx> % variable are containerish, but parameters are bound, not assigned

[16:31] <cygx> *vote

[16:32] *** siriu5b joined
[16:33] *** pmurias left
[16:34] <[Coke]> pdcawley: yes.

[16:34] * pdcawley is confused. AFAICT, the master implementation of interactive does have logic for getting multiple lines....

[16:34] <Skarsnik> [Coke], for me a major issue for the next rakudo release is being easily 'packagable'

[16:34] <timotimo> pdcawley: i think that's for when you end your line in a backslash

[16:34] <[Coke]> Skarsnik: how is the compiler not?

[16:35] <[Coke]> Or are you saying you want a Rakudo * ?

[16:35] <pdcawley> timotimo: I thought I tried that...

[16:35] <cygx> on the other hand, you'd then have to write something like sub foo(%opt = {}) {...} to get current %opt? semantics

[16:36] <Skarsnik> there was some issue/bug with like bootstrap.pl or panda, that make the whole thing hard to package

[16:36] *** pmurias joined
[16:36] <pdcawley> timotimo: Yup... the version that gets installed by rakudobrew build moar treats a \ terminator as an error.

[16:36] <Skarsnik> bug in precomp and such (maybe they get fixed, I am blaming noone)

[16:36] <[Coke]> Ok. I need RTs or PRs or commit ids if you have 'em.

[16:37] *** geck left
[16:37] <[Coke]> then I have something actionable I can check a box on when cutting a release.

[16:37] <mspo> can you just replace share/nqp/lib/Perl6/Compiler.moarvm?

[16:37] <cygx> m: sub foo (%h = Hash) { say $h.defined }; foo(); foo({})

[16:37] <camelia> rakudo-moar 812a48: OUTPUT«5===SORRY!5=== Error while compiling /tmp/zUiq1j134G␤Variable '$h' is not declared. Did you mean '%h'?␤at /tmp/zUiq1j134G:1␤------> 3sub foo (%h = Hash) { say 7⏏5$h.defined }; foo(); foo({})␤»

[16:37] <cygx> m: sub foo (%h = Hash) { say %h.defined }; foo(); foo({})

[16:37] <camelia> rakudo-moar 812a48: OUTPUT«False␤True␤»

[16:37] <skids> [Coke] I've seen a lot of people fighting with getting a centrally installed rakudo to play nice with user local directories for precomps and other such issues.

[16:37] <cygx> lucs: ^^^ if you prefer the %-sigil

[16:38] <hoelzro> mspo: just replace? what are you trying to do?

[16:38] <mspo> hoelzro: screw around with the repl?

[16:38] <lucs> cygx++ Nice, thanks again.

[16:38] <timotimo> pdcawley: hm, maybe it comes with Linenoise or Readline for some reason?

[16:39] <pdcawley> Hmm... and a quick look at that source says that rakudobrew install moar is using \\ detection.

[16:39] <[Coke]> timotimo: verified, ending with a \ works with linenoise.

[16:39] <hoelzro> mspo: if you want to edit the REPL, you should probably edit src/Perl6/Compiler.nqp and do a make install

[16:39] <[Coke]> (and without, does not)

[16:39] *** raoulvdberge joined
[16:39] <skids> .oO(Maybe someone who has been trying to package could summarize the IRC logs on the matter.)

[16:40] <pdcawley> so... panda install Linenoise should do the trick?

[16:40] *** _mg_ left
[16:40] <pdcawley> bingo!

[16:40] <mspo> hoelzro: not HLL/Compiler.nqp?

[16:41] <hoelzro> mspo: that too, depending on what you need to do

[16:41] <mspo> find ./ -name "Compiler.nqp"|wc -l -> 8

[16:41] <pdcawley> It'd still be nice to be able to copy/paste a chunk of code into the repl without having to fix it up first, but that's splendid.

[16:42] <hoelzro> we could change the REPL so that if a chunk doesn't compile with an EOF encountered error, it automatically appends the backslash

[16:43] <mspo> linenoise is referenced a lot in the code

[16:43] <mspo> why isn't it just installed by default?

[16:43] <hoelzro> but that could cause problems with BEGIN

[16:43] <hoelzro> mspo: we don't bundle a lot of modules with Rakudo itself

[16:43] <hoelzro> just Pod::*, Test, and NativeCall, IIRC

[16:44] <hoelzro> Pod::* and Test for bootstrapping reasons, and NC because it's so tightly coupled to the implementation

[16:44] <timotimo> OK

[16:44] <hoelzro> when I wrote Linenoise, we thought "don't bundle unless we need to"

[16:45] <mspo> but it's referenced by name all over the place

[16:45] *** hahainternet joined
[16:45] <hoelzro> it's loaded if available

[16:45] <hoelzro> so is Readline

[16:46] <pdcawley> Hmm... I _think_ there's some weirdness going on between Perl6::Compiler and HLL::Compiler

[16:47] *** lnrdo joined
[16:47] <hoelzro> I wonder if $code ends with "\n" without Linenoise, and with "\\" with Linenoise

[16:47] <mspo> hoelzro: if it's referenced by name and adds good functionality and is unlikely to be replaced by something else...

[16:47] <pdcawley> when P6::C calls HLL::Compiler's interactive, it seems to be passing in a nqp:readlinefh rather than a bare fh. I can't spot the implementation of readlinefh, but I'd not be surprised to find that the simple variant is either doing something clever, or not clever enough.

[16:48] <hoelzro> I'm not opposed to bundling Linenoise with Rakudo, but there's definitely not a lot of love for Linenoise among people I've talked to

[16:48] <mspo> the current repl is rough without anything

[16:49] <hoelzro> you can use rlwrap as well

[16:49] <mspo> yes but why have these options with varying degrees of functionality? :)

[16:49] <hoelzro> well, the reason for Linenoise vs Readline is licensing

[16:50] <pdcawley> Hmm... tests imply that nqp::readlinefh($stdin) grabs the line _and_ the separator.

[16:50] <hoelzro> we can't distribute Readline with Rakudo, afaik

[16:50] <hoelzro> pdcawley: that's consistent with my theory

[16:50] <mspo> gnu readline?

[16:50] <hoelzro> mspo: yes

[16:50] <mspo> what about bsd libedit instead?

[16:50] <cygx> mspo: windows support

[16:50] <hoelzro> if someone writes a binding, we can use that =)

[16:50] <hoelzro> and what cygx said

[16:50] <pdcawley> So simpleminded readlinefh(...) given "foo\\\n" won't match the check in HLL::Compile::Interactive

[16:51] *** domidumont left
[16:51] <pdcawley> Is chomp available in nqp?

[16:51] <mspo> powershell might jfw?

[16:51] <hoelzro> there's readlinechompfh

[16:51] <hoelzro> pdcawley: ^

[16:51] *** yqt joined
[16:51] * hoelzro .oO( which I just learned about )

[16:52] *** IWONDER joined
[16:53] *** IWONDER is now known as Guest55396

[16:53] <llfourn> .tell lizmat The backstory part of your presentation was great. Pitty I couldn't see the slides for the more slide assisted parts :)

[16:53] <yoleaux> llfourn: I'll pass your message to lizmat.

[16:53] <dalek> doc: 7124341 | (Stéphane Payrard)++ | doc/Language/faq.pod:

[16:53] <dalek> doc: small clarification

[16:53] <dalek> doc: review: https://github.com/perl6/doc/commit/7124341115

[16:53] * pdcawley grins at hoelzro 

[16:57] *** Ch0c0late joined
[16:57] *** abraxxa left
[16:58] <timotimo> i wonder if the perl6 grammar objects are friendly to lazy loading ...

[16:58] <timotimo> and if not, how to improve that

[16:58] <timotimo> ... how to figure out that? ...

[16:59] *** lucasb joined
[16:59] <pdcawley> Arsebiscuits, changing HLL::Compiler::readline doesn't seem to do the trick.

[16:59] *** lnrdo left
[17:00] <hoelzro> timotimo: lazy loading? how do you mean?

[17:00] <timotimo> lazy deserialization

[17:00] <hoelzro> pdcawley: what was the change you made?

[17:00] <timotimo> you know about that?

[17:00] *** lnrdo joined
[17:00] <pdcawley> hoelzro: change the 'readlinefh' in that method to 'readlinechompfh'

[17:00] <hoelzro> did you recompile both NQP and rakudo?

[17:02] <pdcawley> hoelzro: Thought I had, but can't swear to it.

[17:03] <pdcawley> hoelzro: Is there a trick to it? (cd nqp; make); make doesn't seem to be doing anything at the rakudo level.

[17:03] <hoelzro> do a make install at NQP

[17:03] <hoelzro> then a Configure.pl --gen-nqp && make install at the rakudo one

[17:03] <hoelzro> changing NQP will probably make rakudo angry with its current state

[17:03] <pdcawley> ah... make install!

[17:06] <timotimo> that's right; rakudo depends on the exact version of some of the NQP moarvm files

[17:08] <pdcawley> hoelzro: Bing. O!

[17:08] <pdcawley> So... now to make a pull request for my first perl 6 contribution since I was writing weekly summaries :)

[17:09] <hoelzro> \o/

[17:09] <hoelzro> pdcawley++

[17:09] <timotimo> were you doing the weekly summaries before xfix took over?

[17:09] <timotimo> GlitchMr was his previous name, right?

[17:10] <lucasb> didn't the REPL had multiline support in the past? But I guess nobody liked it, that's why it's gone?

[17:10] *** glucosade joined
[17:10] <timotimo> it has the \ at the end support if you have linenoise

[17:11] *** nzkindest left
[17:12] <lucasb> well, I don't use the real REPL. I use a ad-hoc thing like 'rlwrap repl.sh echo6.sh'

[17:12] <timotimo> tbh, i try to avoid the repl at all costs

[17:12] <lucasb> it spawns one instance of rakudo for every evaluation

[17:13] <timotimo> ah

[17:15] <dalek> nqp: 942aaa8 | (Pawel Murias)++ | src/vm/js/ (5 files):

[17:15] <dalek> nqp: [js] Implement nqp::bindhllsym, nqp::gethllsym.

[17:15] <dalek> nqp: review: https://github.com/perl6/nqp/commit/942aaa8ffb

[17:15] <dalek> nqp: 346adce | (Pawel Murias)++ | t/nqp/97-hll.t:

[17:15] <dalek> nqp: Test nqp::bindhllsym, nqp::gethllsym.

[17:15] <dalek> nqp: review: https://github.com/perl6/nqp/commit/346adce350

[17:15] *** SwellJoe joined
[17:15] <lucasb> I tried to understand jnthn's gist but it was not clear to me *when* will rakudo stop targeting 6.c and start targeting 6.d

[17:16] <lucasb> [Coke]: what do you mean by 'Need to decide on 6.c track vs. 6.d track' ?

[17:17] <dalek> nqp: 0a6abdd | (Pawel Murias)++ | src/vm/js/bin/run_tests.pl:

[17:17] <dalek> nqp: Make js-all run test 97.

[17:17] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0a6abdd35c

[17:17] <[Coke]> lucasb: are we going to have separate releases of rakudo for 6.c and 6.d-pre, or a single release that does both? Or ...

[17:18] <[Coke]> The leaning before jnthn went on vacation was, I think, a single release. This has already been made difficult by the commits that have landed on nom.

[17:18] <pdcawley> timotimo: I was doing weekly summaries back when parrot was the only game in town and Dan Sugalski was desperately trying to corral Leo

[17:18] *** zakharyas left
[17:18] <pdcawley> timotimo: and it was all on mailing lists.

[17:19] <timotimo> wow, you go way back

[17:19] <Skarsnik> hm, could it be interesting have something like eval that just support data dump and not real code?

[17:19] <mspo> bsd libedit doesn't seem to let me type «utf8»

[17:20] <mspo> at least not in netbsd's ftp

[17:21] <tony-o> m: (0..5000).pick.say;

[17:21] <camelia> rakudo-moar 812a48: OUTPUT«3429␤»

[17:21] <lucasb> if 6.d is going to be a superset of 6.c, then I think there wouldn't be no problem. but seems it's not going to be a superset, right? they will have conflicting features... maybe?

[17:21] <tony-o> NAILED IT

[17:22] <[Coke]> there are already conflicts on nom.

[17:22] <[Coke]> (since changes were made that force 6.c tests to fail)

[17:23] *** pierre-vigier left
[17:23] <lucasb> [Coke]++ thanks for worrying and taking care of this

[17:24] *** pierre-vigier joined
[17:24] <pdcawley> PR submitted.

[17:25] <pdcawley> timotimo: I wasn't actually there when the coffeecups were thrown, but I took over the summaries from Simon Cozens who, I think, was.

[17:25] <timotimo> :)

[17:25] *** yurivish_ left
[17:26] <pdcawley> A remarkably satisfying job, but bloody hell, was it time consuming.

[17:28] *** wamba joined
[17:30] <lucasb> just sharing a idea for repl feature: to support repl commands like ':set foo' or ',set foo'. and then have 3 modes: line mode, paragraph mode and dot mode. line mode ends at EOL. paragraph ends at empty line (two \n\n). dot mode ends in a line consisting of only a single dot '.', like ed text editor. then one could change the modes with commands ":set mode line", etc.

[17:30] <lucasb> but anyways, this is not P6 specific, just a generic REPL idea.

[17:30] *** pierre-vigier left
[17:31] <lucasb> and maybe it's too much stuff for what one would expect from a simple repl

[17:34] <pdcawley> Hmm... am I reading this right, the backend/stages as far as HLL::Compiler is concerned accept strings not streams?

[17:36] *** lnrdo left
[17:36] <RabidGravy> lawks, precompilation is waaaaaaaaaaaaaaaaay slow on the RPi

[17:37] *** pmurias left
[17:37] <TimToady> is there anything that isn't slow on the RPi? :P

[17:37] <yoleaux> 04:27Z <Zoffix> TimToady: unless someone else looked into it, there's a wrong useless sink context warning: https://rt.perl.org/Ticket/Display.html?id=127147

[17:37] <ugexe> wait till you try precompiling modules on the jvm with rpi

[17:37] <pdcawley> Because if they _could_ accept streams, then the repl could have some kind of 'code stream' that does 'readlines' on demand and let the backend pull code...

[17:37] *** lnrdo joined
[17:38] <pdcawley> (And if the stream 'knows' the parser it's feeding, could even vary the prompt on parser state).

[17:38] * TimToady drove to SoCal and back yesterday, so should be more available toady ;)

[17:38] *** colomon left
[17:38] *** colomon_ joined
[17:38] *** pmurias joined
[17:39] <hoelzro> pdcawley: streaming grammars would be really nice

[17:40] <pdcawley> hoelzro: Does perl6 -e file convert file to a string before feeding the grammar? Or does it pass a filehandle?

[17:41] <hoelzro> I'm actually not sure

[17:42] <hoelzro> it reads the whole file into memory

[17:42] <hoelzro> (src/HLL/Compiler.nqp:method evalfiles)

[17:43] <pdcawley> Oh. Drat.

[17:43] *** Guest55396 left
[17:43] <pdcawley> That's... annoying.

[17:43] <hoelzro> yeah =/

[17:43] *** cygx left
[17:44] *** pierre-vigier joined
[17:44] <hoelzro> I would love it if we could have SAX-y grammar objects, that return a continuation or something when they can still parse more, yield action method objects to callbacks at certain levels, and discard the AST at certain points

[17:44] <hoelzro> mainly for writing things like an XMPP client

[17:44] <hoelzro> lunch &

[17:45] <pdcawley> hoelzro: I don't even care about that. Just a grammar that consumes something that does a stream role would let the repl be more capable without having to talk to the grammar much at all.

[17:46] <hoelzro> yeah, I'm just laying out my dream, which probably won't happen until (6.d|6.e)

[17:46] <pdcawley> All it has to do is, when the grammar calls for more characters from the buffer and there is none, call readline

[17:46] <hoelzro> the thing is, for stream-based grammars to work, you'd need the VM to understand streams

[17:46] <hoelzro> but what are streams but callbacks that yield strings?

[17:46] <hoelzro> really-lunch-now &

[17:47] *** lnrdo left
[17:47] <pdcawley> hoelzro: I suppose for what I'm thinking about, a something akin to a tied string would allow for a smarter repl...

[17:47] *** lnrdo joined
[17:48] <pdcawley> hoelzro: Assuming we don't do too much backtracking in the parse, the parser is essentially treating the code buffer as a stream.

[17:50] <TimToady> we've had Cat strings specced for streaming purposes a long time now, but nobody got around to implementing them yet

[17:50] *** hankache joined
[17:50] <TimToady> shouldn't actually be terribly difficult since we already use ropes underneath

[17:50] <hankache> hello #perl6

[17:51] *** glucosade left
[17:51] <pdcawley> TimToady: Implementable at the NQP level? Or deeper?

[17:51] <TimToady> but I'll bet there're still plenty of places where the code assumes it can take the length of a string

[17:51] <TimToady> ropes in MoarVM anyway

[17:51] <TimToady> dunno how that maps in jvm-land

[17:52] *** nzkindest joined
[17:53] <konobi> pmurias: have any more luck with the JS backend?

[17:54] <pdcawley> TimToady: Sounds like it's not something I'd be comfortable trying to implement if it needs to be done in Moar. Shame.

[17:54] <pmurias> konobi: with implementing Cat string, or you mean how are things on the JS backend going?

[17:54] *** nige1 left
[17:55] *** dakkar left
[17:55] *** kellyjones joined
[17:55] *** kellyjones left
[17:55] <konobi> pmurias: just how things on the JS backend are going... has beena while since i had a chance to look

[17:56] *** llfourn left
[17:58] <pmurias> mostly implementing various missing nqp ops, etc. will apply soon for a grant to work on getting the backend to support rakudo

[17:58] *** lnrdo left
[17:58] *** lnrdo joined
[17:58] <pmurias> fixed a MoarVM bug that was causing random build failures for the backend

[18:00] <pdcawley> TimToady: where would I find the Cat string spec?

[18:01] *** firstdayonthejob joined
[18:02] *** lnrdo left
[18:02] *** lnrdo joined
[18:03] *** pmurias left
[18:03] <TimToady> well, it's more like mentioned various places without going deeply into it

[18:04] <RabidGravy> gosh, testing the module on a RPi is tedious

[18:04] <TimToady> S03, S32/Str, S32/Containers, one mention in S05

[18:05] *** kjs_ joined
[18:05] *** pmurias joined
[18:05] <TimToady> RabidGravy: maybe you need to read a good book in parallel?  :)

[18:06] <TimToady> Alternately, write a JIT for that arch...

[18:06] <RabidGravy> :)

[18:06] <pmurias> konobi: nqp-js fails 3 t/nqp tests (which are problematic for various reasons), I'm currently working on stuff that's untested but needed for rakudo

[18:06] <pmurias> konobi: got to afk&

[18:07] *** pmurias left
[18:08] *** lucasb left
[18:09] <ZoffixW> RabidGravy, do @other-languages run well on RPi? Like Python, Ruby, etc

[18:10] <timotimo> python has the benefit of being a super simple implementation, using super little ram and such

[18:10] <RabidGravy> dunno about Ruby, but python is one of the recommended languages

[18:11] <RabidGravy> but, by jove, this thing actually works!  WE HAVE BLINKEN LIGHTS!

[18:11] <ZoffixW> :o

[18:11] <TimToady> how jovial!

[18:11] <timotimo> cool

[18:12] <Skarsnik> RabidGravy, do a small video!

[18:12] <ZoffixW> ^

[18:12] <timotimo> if someone manages to somehow implement the correct lifecycle of NFA objects, we could have smaller .moarvm files and less deserialization work for most cases

[18:12] <timotimo> hint hint

[18:12] <timotimo> they'd "just" have to complete my "nfatostatelist" branch

[18:12] <Skarsnik> Could be cool to have it in the weekly repport for fun x)

[18:13] <timotimo> it's a bit more involved than what i'd consider an entry-level task

[18:13] <timotimo> i was hoping i could get TimToady to do it :)

[18:14] <ZoffixW> This is pretty disheartening. 5 minutes prior to the death of www.p6c.org this morning, I see cron ran "Jan  4 10:20:01 www CRON[17803]: (modules.perl6.org) CMD (bash update-modules.perl6.org)"

[18:14] <ZoffixW> Not that it implicates it in the death, but still :P

[18:14] <timotimo> BBIAB

[18:15] <Skarsnik> Zoffix, I still have the weid issue with m.p6.org x)

[18:15] <Skarsnik> let me reccord 

[18:16] *** lnrdo_ joined
[18:16] *** lnrdo left
[18:17] *** kjs_ left
[18:17] <Skarsnik> Zoffix, http://www.twitch.tv/skarsnikus/v/33576143

[18:18] <ZoffixW> Mr. Nutz nuts?

[18:21] <Skarsnik> It's an arbitrary category for the game Mr. Nutz (too lazy to change my stream title)

[18:22] *** lnrdo joined
[18:24] *** lnrdo_ left
[18:24] *** nzkindest left
[18:24] <pdcawley> TimToady: Hmm... Cat does look very useful; It'd be lovely if grammar engine was written against some Cat interface rather than a full Str.

[18:25] <dalek> modules.perl6.org: 4f7d360 | (Zoffix Znet)++ | public/js/main.js:

[18:25] <dalek> modules.perl6.org: Don"t focus search box if scroll is not at top

[18:25] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/4f7d360c35

[18:25] <ZoffixW> Skarsnik, there. Fixed forever! :)

[18:26] *** nzkindest joined
[18:27] <pdcawley> TimToady: Ah... I see 'Stringy' in the list of types. I guess that's the interface one would hope it's written to.

[18:27] <Skarsnik> Zoffix, I don't know if you notice, the page preload stuff before displaying the right content

[18:28] <ZoffixW> Skarsnik, yeah, I notice that. It's not really a preload, it's the search box getting swapped from the JS-less version to the JS version

[18:28] <TimToady> nqp uses nqp::chars to determine end-of-string in 20 or so places, looks like

[18:28] *** lnrdo left
[18:29] *** lnrdo joined
[18:30] *** bbkr left
[18:30] <TimToady> so there'd be a bit of work to make EOS determination data-driven rather than position driven, but not comceptually difficult

[18:30] <TimToady> *con

[18:31] *** pierre-vigier left
[18:33] <TimToady> at least we did some work last year to make moarvm not quite so exception-happy on looking beyond EOS, which helps

[18:36] *** PerlJam joined
[18:36] *** pierre-vigier joined
[18:37] *** vendethiel joined
[18:37] <pdcawley> TimToady: I'm thinking about it in terms of a smarter REPL, but I'm thinking it'd be useful for all sorts of parsing situations, no? 

[18:38] *** domidumont joined
[18:38] *** cpage_ left
[18:40] *** darutoko left
[18:42] <TimToady> to really be useful in stream parsing, we'd also have to implement <cut> to discard the front of a string, fsdo "discard"

[18:43] <pdcawley> TimToady: do we actually have stream parsing?

[18:43] <TimToady> not without Cat

[18:43] <TimToady> just sayin' we also have to worry about sinks as well as sources

[18:43] <pdcawley> TimToady: Am I misunderstanding the current implementation that seems to be implemented in terms of cursors?

[18:43] <TimToady> well, a cursor has an offset into a string

[18:44] <pdcawley> TimToady: internally, yes, but the interface that the parser works to?

[18:44] <TimToady> yes, the API is mostly relative there, though we do expose .from and .to

[18:45] <TimToady> those would need to be recase as 'offset since we started', not necessarily an offset from a memory location

[18:45] <TimToady> *recast

[18:45] *** nzkindest left
[18:46] <TimToady> presumably a Cat that is emulating a string interface can have an initial offset to the head as well as a lazy tail

[18:46] <pdcawley> So, no promises that you could actually get back to something you already read. If you need that, you hold onto it yourself, or hold onto another cursor.

[18:46] <TimToady> <cut> is for explicitly throwing away the head

[18:46] <TimToady> but nYI

[18:46] <pdcawley> nYI?

[18:46] <TimToady> not yet implemented

[18:47] <pdcawley> Ah.

[18:47] <TimToady> with bogus caps :)

[18:47] <TimToady> Cat has been specced for most of a decade already...

[18:47] <pdcawley> TimToady: But the spec hasn't been written down :)

[18:47] <TimToady> just hasn't bubbled up to the top of anyone's todo list

[18:48] <nine> [Coke]: I think we really need to figure out how to implement jnthn's suggestion of a separate, overlay setting for 6.d and then move the changes we did to nom there. At least the changes that break 6.c

[18:48] *** raoulvdberge left
[18:49] *** alpha123 joined
[18:50] <TimToady> looks like argfiles and something about leap seconds are the two breakers at the moment

[18:51] <stmuk_> didn't jnthn recommend two branches nom and master and one of those was 6.c (although I can't remember which and don't have the gist on this machine)

[18:51] *** nzkindest joined
[18:52] *** spider-mario joined
[18:52] *** llfourn joined
[18:52] <pdcawley> TimToady: So, about the first thing I tried to do in Perl 6 involved trying to have sets of value objects and I couldn't work out how to do that without more tapdancing than I wanted to think about, second thing I try to do is have a repl that happily accepts incomplete statements and only triggers eval at the end of an expression a la perl repls. I'm not deliberately trying to pick holes :)

[18:54] <mst> pdcawley: have you found a problem that the repro steps for blew up larry's dev env yet?

[18:54] <mst> pdcawley: because if not, you're still doing better than me :D

[18:54] <pdcawley> mst: Crikey!

[18:54] <pdcawley> No. No I haven't.

[18:54] <pdcawley> mst: Were you poking at it again?

[18:55] *** Actualeyes left
[18:55] *** hankache left
[18:55] <nine> [Coke]: in my view a new release has to contain: git log 2015.12..nom -- src/core/CompUnit

[18:56] <pdcawley> right. Must go. Should've gone hours ago.

[18:56] <pdcawley> Later.

[18:56] <TimToady> I think we should include all the bug fixes that aren't the two breakers, or why do we have a test suite anyway?

[18:57] <TimToady> for sure my loop fix has to go in

[18:57] <moritz> why do we even have breakers?

[18:57] <TimToady> and several LTAs have been improved

[18:58] *** yqt left
[18:58] *** llfourn left
[18:58] <TimToady> because inertia; people are still in a bleeding-edge dev mindset, I imagine :)

[18:59] <moritz> so, can we just revert them?

[18:59] <TimToady> we all need to be a little more deliberate about that now

[18:59] <TimToady> well, that's one way to "branch", I guess, but not the only way

[19:00] <moritz> when do we want to incorporate breaking changes again?

[19:00] <TimToady> it's not like a revert is anything irreversible though

[19:00] *** mojca joined
[19:00] <moritz> because I hate long-lived branches

[19:00] <mojca> who maintains the contents of http://rakudo.org/how-to-get-rakudo ?

[19:00] <moritz> mojca: I have editing privileges, if that's what you're asking

[19:01] <TimToady> well, maintenance branches are by definition long-lived...

[19:01] <moritz> I don't quite consider myself a maintainer though

[19:01] <mojca> moritz, would it be possible to add further instructions about installing rakudo on OS X?

[19:01] <mojca> There are three package managers for OS X

[19:01] <TimToady> it's hard enough maintaining the dev branch :)

[19:01] <mojca> Current instructions are fine for Homebrew, but instructions for MacPorts would be nice

[19:02] <moritz> mojca: if you give me somthing copy&pastable that is helpful, I can paste it in

[19:02] *** pierre-vigier left
[19:02] <mojca> Rakudo Star is available from Homebrew -> Homebrew and MacPorts

[19:02] <[Coke]> mojca: you cut an R* for macports? Danke.

[19:02] *** pierre-vigier joined
[19:03] <awwaiid> pdcawley: for repl-land, feel free to poke at LREP

[19:03] <TimToady> awwaiid: is that the one that was based on moreinput in the grammar?

[19:03] * PerlJam wonders how long it will take before mojca gets editing privs for that page and becomes the de facto "maintainer"  ;)

[19:03] <nine> moritz: have you read this? https://gist.github.com/jnthn/f3a691016c20f0cc4cfa

[19:04] <stmuk_> https://gist.github.com/jnthn/f3a691016c20f0cc4cfa

[19:04] <moritz> for the record: colomon_, FROGGS, hoelzro, jnthn, lue/ShimmerFairy, myself, PerlJam, pmichaud, raiph, tadzik, timotimo and Util have editing privs on rakudo.org

[19:04] <stmuk_> snap! stmuk-- too slow

[19:04] <mojca> moritz: "To install rakudo perl and panda: 'sudo port install rakudo panda'. To install modules: 'panda install Task::Star'."

[19:05] <mojca> that is, if the instructions should tell the user how to install rakudo-star; rakudo-star doesn't exist on its own

[19:05] <stmuk_> ah nom=dev release=master

[19:05] *** xtreak joined
[19:05] <mojca> [Coke]: I didn't understand

[19:06] <awwaiid> TimToady: no, it is not fancy at all other than using a middleware-based plugin system; otherwise it is just linenoise, nested lexical scope magic, and an "LREP::here" command to conveniently start a repl... "here"

[19:06] <stmuk_> maybe branch master from dev and revert the changes which break roast 6.c?

[19:06] <Skarsnik> mojca, rakudo-star are a fixed release of rakudo + select module. Task::Star is not the same x)

[19:06] <stmuk_> s/dev/nom

[19:06] <mojca> moritz: sorry, actually, "Rakudo Star" is not directly available

[19:06] <moritz> mojca: I'm not a big fan of this approach; Rakudo Star is there to bundle versions of modules that work with a particular compiler version

[19:06] <mojca> I only noticed that I tried to edit the sentence in the wrong way

[19:06] *** cpage_ joined
[19:06] <moritz> mojca: doing a "panda install Task::Star" doesn't give us that

[19:07] <mojca> ok, sorry

[19:07] <Skarsnik> moritz, can you bump a version of dbiish for R* btw? I am not sure how to do that

[19:07] <mojca> then maybe just mention installing rakudo alone

[19:07] <mojca> I tried to package rakudo-star, but the December release hasn't been available yet

[19:07] <TimToady> perhaps Task::Star is a bit misnamed

[19:07] *** raoulvdberge joined
[19:08] <mojca> else, if someone can help me figure out how to package rakudo-star as an "add-on" to moarvm, npq, rakudo & panda, that would be great

[19:08] <moritz> nine, stmuk_, TimToady: I've skimmed this proposal before, and mostly liked it. Now on second read-through, I'm not sure what we do when somebody does commit backwards incompatible changes to nom; if nobody takes "defensive" actions, there'll never be a merge into master again

[19:08] <mojca> it would be a bit stupid to have two packages, rakudo and rakudo-star, conflicting with each other

[19:09] <moritz> mojca: yes, we need to cut a Star release; it's absence shouldn't encourage us to write misleading documetnation

[19:09] <mojca> it would be better to have rakudo-star depend on rakudo

[19:09] *** protium joined
[19:09] <moritz> mojca: right, that's the sane approach (rakudo-star being a kind of meta package that depends on rakudo + modules)

[19:09] <mojca> but which modules?

[19:10] <mojca> how do I know what else to package and how?

[19:10] <ZoffixW> Well, I give up with figuring out why www.p6c.org died. I see nothing in the logs other than testers.perl6.org barfing some sort of JSON into syslog, but that's been happening for ages. Nothing in web server logs. There's 1800MB of free RAM+swap, so all good. The last command I see was the start of the modules.perl6.org DB build and I reviewed all of its code and don't see anything that would make it use all of that RAM from its normal 180KB run

[19:10] <moritz> mojca: star has a list of modules that it includes

[19:10] <ZoffixW> ¯\_(ツ)_/¯

[19:10] <moritz> mojca: https://github.com/rakudo/star/tree/master/modules

[19:10] <moritz> mojca: how? dunno; never packaged anything for the mac

[19:11] <mojca> moritz, this is not a mac-specific question

[19:11] <mojca> I could ask the same question for linux

[19:12] <mojca> assuming that rakudo, nqp, moarvm, panda are already installed: what's the easiest way to install exactly the specified modules?

[19:12] <mojca> to match rakudo-star 201x.y

[19:12] *** kjs_ joined
[19:12] <moritz> mojca: well, with Debian packages, I'd create one package per module

[19:12] <moritz> mojca: and probably some tooling analogous to dh-make-perl to make that less arduous manually

[19:12] <mojca> and then rakudo-star would depend on all those modules?

[19:12] <moritz> yes

[19:13] <moritz> or, if that's too much work, one rakudo-star-modules package

[19:13] <moritz> or maybe rakudo-star contains them directly, and depends on rakudo to provide the compiler

[19:14] <moritz> you can get creative :-)

[19:14] <mojca> in perl5 we are currently fighting because there are more than 1000 packages and hardly enough maintainers, so most modules get outdated very soon

[19:14] <mojca> so having some simple single package for now with these modules might be handy

[19:15] <[Coke]> I still argue that making R* available via ports at all seems odd. if ports want to make a distro, they can.

[19:15] <moritz> ... and probably be a nightmare to do properly because you have to track the license for each module etc.

[19:15] *** MadcapJake joined
[19:15] <[Coke]> (one package per module) that way lies insanity unless we have a way to automate it. (yes, I know people already do this, it's still crazy)

[19:16] <mojca> all in all, would it be bad to list "sudo port install rakudo" on the website then even if rakudo-star won't be available as such

[19:16] <mojca> [Coke], for perl5 we have cpan2port to create a package, but it's a nightmare

[19:16] *** FROGGS joined
[19:17] <[Coke]> yah. I would like folks to think if there's ab etter way to handle modules when dealing with a packaging system than the status quo.

[19:17] <[Coke]> (I mean, there may not be.)

[19:17] <mojca> in addition to well over 1000 modules, they would multiply with a factor of up to 7 (when we still provided perl5.8, 5.10, 5.12, 5.14, 5.16, 5.18, 5.20)

[19:18] <ZoffixW> :o

[19:18] <mojca> for perl6 we need to find a better way :)

[19:19] <FROGGS> o/

[19:19] <TimToady> would be nice if there was a way to calculate maintrot

[19:19] <moritz> mojca: and it already has great tooling, so "more automation" doesn't seem to be the solution

[19:19] <mojca> the thing is, if some software needs a specific module, the package manager has to provide that module to satisfy the dependency

[19:21] <mojca> so again, would it be acceptable to list just "sudo port install rakudo" for now? It might take a while until we figure out the best way to package rakudo-star.

[19:21] <moritz> I'm painfully aware of that (I maintain lots of internal debian modules for $work)

[19:21] <moritz> mojca: I can add that, yes

[19:21] <[Coke]> so, TL;DR, I'm Ok with telling people that if they want something R* like, they can "sudo port install panda" and then "panda install Task::Star" until we think of something cleverer.

[19:21] *** araujo_ joined
[19:21] *** lichtkind joined
[19:21] <mojca> Initially I wanted to package rakudo including moarvm and nqp, but everyone told me that I should package them separately, so I did

[19:22] <lichtkind> colomon / pierre-vigier ping

[19:22] <mojca> HomeBrew has just a single package that ships everything together

[19:22] <mojca> moritz, thank you

[19:23] <moritz> mojca: http://rakudo.org/how-to-get-rakudo/ updated

[19:24] <moritz> FROGGS: please push your panda bootstrapping branch to rakudo/star

[19:24] <dalek> modules.perl6.org: c0174a8 | (Zoffix Znet)++ | t/02-db-builder/02-github-source-and-source-base-class.t:

[19:24] <dalek> modules.perl6.org: Formatting

[19:24] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/c0174a860a

[19:24] <dalek> modules.perl6.org: 6fbbb01 | (Zoffix Znet)++ | modules.perl6.org-init.d:

[19:24] <dalek> modules.perl6.org: Add init.d script in the repo

[19:24] <dalek> modules.perl6.org: 

[19:24] <dalek> modules.perl6.org: Note: it is NOT automatically updated from commits

[19:24] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/6fbbb01d7e

[19:24] <dalek> modules.perl6.org: edbd65f | (Zoffix Znet)++ | Build.PL:

[19:24] <dalek> modules.perl6.org: Add Toadfarm into prereqs

[19:24] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/edbd65f1a2

[19:24] <mojca> moritz, thanks again; just for completeness, there exists "port info rakudo", but I don't think it's necessary to write a complete tutorial

[19:24] <FROGGS> moritz: yes, I'm preparing it atm

[19:25] <moritz> mojca: aye; I guess port users will know about that

[19:25] <[Coke]> mojca: I'm willing to defer to you on macports (assuming I was the only person pushing for separate packages)

[19:25] <[Coke]> I only started down that road because it let me have a fairly standalone port with little effort on the build step.

[19:26] *** araujo left
[19:26] <mojca> [Coke], can you please elaborate that about separate packages and you being the only one for that?

[19:27] <[Coke]> mojca: I don't know how to elaborate on that.

[19:28] <[Coke]> I can restate it: Do what you want with macports.

[19:28] <mojca> I would like to be at least somewhat compatible with upstream and not reinvent the wheel

[19:29] <[Coke]> If you have a recommendation for macports, I'd trust your recommendation sooner than any plan I had.

[19:29] *** lnrdo left
[19:29] <dalek> modules.perl6.org: 2521003 | (Zoffix Znet)++ | DEPLOYMENT.md:

[19:29] <dalek> modules.perl6.org: Add "TroubleShooting" section

[19:29] <dalek> modules.perl6.org: 

[19:29] <dalek> modules.perl6.org: Explain what it is and how to debug the "Service Not Available" error from Apache

[19:29] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/2521003ade

[19:30] <mojca> [Coke], I only hope that someone will manage to fix paths of MoarVM's dependency and I will need further guidance about panda

[19:30] <mojca> but at least it kind-of-works for now

[19:31] <dalek> modules.perl6.org: c321849 | (Zoffix Znet)++ | DEPLOYMENT.md:

[19:31] <dalek> modules.perl6.org: Add TOC

[19:31] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/c3218495f5

[19:32] <ZoffixW> moritz, inet.d script for modules.perl6.org installed.

[19:32] <ZoffixW> Should start up on next reboot

[19:32] <moritz> ZoffixW: thanks

[19:33] <Rotwang> does it take long for rt.perl.org to "catch" a reply?

[19:34] <dalek> modules.perl6.org: 6f88e6c | (Zoffix Znet)++ | DEPLOYMENT.md:

[19:34] <dalek> modules.perl6.org: Fix Markdown formatting

[19:34] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/6f88e6c880

[19:34] *** lnrdo joined
[19:34] *** lnrdo left
[19:35] <moritz> Rotwang: depends on whether you land in the manual spam filtering queue or not

[19:35] *** lnrdo joined
[19:35] <moritz> Rotwang: if not, it's usually in the one-digit minutes (often <3)

[19:35] <Juerd> (often ♥)

[19:38] *** kjs_ left
[19:38] <Rotwang> How come "Instead of taking low quality medication try visiting our really trusted and popular pharmacy!" topic went through and mine is stuck in the spam filter

[19:38] <Rotwang> :<

[19:38] <ZoffixW> :P

[19:40] *** DrArch joined
[19:40] <moritz> Rotwang: because 90% of rt.perl.org tickets are about pharmacy. /s

[19:40] <Skarsnik> 496 modules, who will publish the 500 nm

[19:40] *** jrpyle joined
[19:41] *** lnrdo left
[19:41] *** jrpyle left
[19:41] <DrArch> folks need some info on which and why to opt from, eval, TryCatch, try:tiny or Error, I know, lot of documentation is there amd I have read a lot. just need another pespective, if any one can guide, appreciate. thanks.

[19:41] *** lnrdo joined
[19:42] <moritz> DrArch: since this is #perl6: the built-in mechanism in Perl 6 are good enough that you don't need any external modules

[19:43] <ZoffixW> DrArch, and if you're asking about those Perl 5 mechanisms, there's #perl channel on this network for that language.

[19:44] *** xtreak left
[19:44] <ZoffixW> Skarsnik, I could quickly fill the gap if I try porting my Perl 5 IRC trinkets :P

[19:45] <Skarsnik> I have a Movie::BK2 to write

[19:45] <ZoffixW> These: https://metacpan.org/release/POE-Component-IRC-PluginBundle-Toys

[19:45] <timotimo> i didn't know you were a movie writer

[19:46] <RabidGravy> Skarsnik, got two ready to go bar the pod and stuff

[19:46] *** lnrdo left
[19:46] <DrArch> @moritz @ZoffixW thanks, I shall run to them then. appreciate and thanks once again.

[19:46] <ZoffixW> I got one ready to go tonight, unless I waste it gaming

[19:46] <Skarsnik> BK2 is the movie format of bizhawk (a multipurpose console emulator)

[19:47] <ZoffixW> DrArch, yeah, we're a different language in the same family :) 

[19:47] <[Coke]> For future bug reporters: When opening RT's, please attach the file instead of linking to (the ephemeral) gist.github.com 

[19:49] <dalek> ecosystem: 620dccc | (Sylvain Colinet)++ | META.list:

[19:49] <dalek> ecosystem: Add IRC::Art a module to create irc colored/bold/italic formated string

[19:49] <dalek> ecosystem: 

[19:49] <dalek> ecosystem: see https://github.com/Skarsnik/perl6-irc-art

[19:49] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/620dcccbf2

[19:50] *** leont joined
[19:50] *** aenaxi left
[19:51] <ZoffixW> XD

[19:51] <ZoffixW> Skarsnik, I wish I had that for me HNY IRC bot  on New Years :)

[19:51] <Skarsnik> You should have asked (or use Inline::p5 and use Acme::IRC::Art)

[19:52] <Skarsnik> I copy the tests and the method than handle text (because it's a big wtf) x)

[19:52] <ZoffixW> A thought have not occurred. A lot of people spam ASCII art on #freenode-newyears so I only now recall that that happens :)

[19:52] <Skarsnik> It's not for ascii art

[19:53] <Skarsnik> well it's like a gd lib for irc x)

[19:53] <ZoffixW> Well, yeah :)

[19:53] <ZoffixW> lemme try it out

[19:54] *** llfourn joined
[19:56] *** pi4 left
[19:57] *** pi4 joined
[19:58] <lizmat> TimToady moritz I have taken the "nom" is dev branch pretty literally when adding IO::CatHandle and friends

[19:58] <yoleaux> 16:53Z <llfourn> lizmat: The backstory part of your presentation was great. Pitty I couldn't see the slides for the more slide assisted parts :)

[19:59] <moritz> lizmat: and that's a good think, because it makes us discuss these things :-)

[19:59] *** llfourn left
[19:59] <moritz> *thing

[20:00] <lizmat> anyways, IO::CatHandle changes should be revertable by reverting only 3 commits

[20:00] *** _nadim left
[20:01] *** _nadim joined
[20:01] *** sno left
[20:01] <lizmat> The Date/DateTime changes would be a little more involved, but still doable, just say the word

[20:02] <lizmat> fwiw, the DateTime.later changes also fixed a bug (well, at least in my opinion)

[20:03] *** Perl6IRC joined
[20:03] <ZoffixW> Perl6IRC, test

[20:03] <Perl6IRC> ZoffixW, 4,4 4,4 4,4 4,4       

[20:03] <Perl6IRC> ZoffixW, 4,4 13,4W13,4o13,4o13h13o13o13 13613.13,c

[20:03] <Perl6IRC> ZoffixW, 4,4 4,4 4,4 4,4       

[20:03] <tadzik> :o

[20:04] <ZoffixW> Skarsnik, works! :D

[20:04] <ZoffixW> This is the code https://gist.github.com/zoffixznet/7c2c6ac7f8a4902d97bb

[20:04] <ZoffixW> Skarsnik++

[20:05] <dalek> nqp: 4b1236e | pdcawley++ | src/HLL/Compiler.nqp:

[20:05] <dalek> nqp: Make HLL::Compiler::readline chomp

[20:05] <dalek> nqp: 

[20:05] <dalek> nqp: Continued statement detection in `interactive` expects that any code read in

[20:05] <dalek> nqp:  will have had the line separator removed, which is what Linenoise (and 

[20:05] * ZoffixW <3 the  method irc-to-me/.respond duo in IRC::Client implemented last night

[20:05] <dalek> nqp: presumably Readline) do. However, the fallback readline doesn't. 

[20:05] <dalek> nqp: 

[20:05] <dalek> nqp: This fixes that.

[20:05] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4b1236e535

[20:05] <dalek> nqp: 220390a | lizmat++ | src/HLL/Compiler.nqp:

[20:05] <dalek> nqp: Merge pull request #268 from pdcawley/patch-1

[20:05] <dalek> nqp: 

[20:05] <dalek> nqp: Make HLL::Compiler::readline chomp

[20:05] <dalek> nqp: review: https://github.com/perl6/nqp/commit/220390a5b9

[20:06] *** Michy joined
[20:06] <[Coke]> pdcawley++ #committing 

[20:06] <Michy> ciao a tuti 

[20:06] <Michy> ciao a tutti 

[20:06] *** Michy left
[20:07] *** TEttinger joined
[20:07] <lizmat> I was thinking about copying the list of contributors of the 6.c announcement into a separate file under doc/language

[20:08] <lizmat> and maintain it for the world to see ?

[20:08] <Skarsnik> Zoffix, good :) if you have any api/name changing to do, I am fine with it

[20:08] <Skarsnik> like result.. I did not have a better idea

[20:10] <[Coke]> lizmat: to what purpose?

[20:10] <[Coke]> if it's one more file I have to update each release. mleh.

[20:10] <lizmat> to give credit to the people working on Perl 6 ?

[20:10] *** pierre-vigier left
[20:10] <lizmat> [Coke]: I wouldn't worry about that so much...

[20:10] <[Coke]> It's already in the repo as part of the release announcement. You could link to it rather than duping it.

[20:10] <lizmat> if *that* is the deal breaker, I will take it upon me to fix up that list in doc

[20:11] *** hyan joined
[20:12] <lizmat> [Coke]: but not in a form that is easily readable / updatable

[20:12] *** pierre-vigier joined
[20:12] <PerlJam> lizmat: this is why we ask forgiveness  :)

[20:13] *** nemo joined
[20:13] <[Coke]> Given the amount of effort that went into creating that list, I'm not sure I want to commit to updating it for every perl 6 repo/effort we included. And if it's for rakudo only, we already have CREDITS. I vote 0, if you feel strongly about it, go ahead. :)

[20:14] *** _Vi left
[20:14] <nemo> You know, I was reading http://doc.perl6.org/language/unicode_entry  and I can't believe there's no mention of my very fav digraph system. XCompose!  works in all my apps and has a nice config.  I use it for emoji silliness like  setting :D to 😃

[20:15] <moritz> nemo: then please patch it!

[20:15] <nemo> https://github.com/kragen/xcompose/blob/master/dotXCompose  insanely large .XCompose

[20:15] <ZoffixW> Skarsnik, for the API, I'd be returning invocants from the drawing methods so you could chain them as well as add a separate fg/bg colour-setting methods, so If I have to draw a bunch of rectangles then I don't need to specify the color all over the place. At least that's what I've done in my P5 PDF module (https://metacpan.org/pod/Mojo::PDF#SYNOPSIS) . Not sure how applicable that is for IRC art 

[20:15] <nemo> moritz: that probably requires registering for something 😝

[20:15] <nemo> <capslock> + :p = 😝  in mine btw 😃

[20:16] <nemo> and, yeah, »+«  is just  >>+<<  plus hitting capslock twice

[20:16] <ZoffixW> nemo, "for something" you mean github and you wish not do so?

[20:16] <ZoffixW> nemo, there's an open Issue just for that that's dying for a contributor: https://github.com/perl6/doc/issues/286

[20:16] <nemo> ZoffixW: oh. yeah, I technically have a github account, but never really used it

[20:17] <nemo> ZoffixW: not a fan of git, and their site in general sucks at degrading gracefully

[20:17] <[Coke]> Note: I need to include our financial sponsors in an updated Christmas release notice. If you feel your employer made a significant contribution to the Perl 6 effort by contributing your time (or other resources), please privmsg so I can make sure they get considered for inclusion. Thanks. (This covers any of the related-to-p6 efforts going back to 2000)

[20:18] <[Coke]> nemo: It beats the alternative.

[20:18] <nemo> [Coke]: mercurial?

[20:18] <nemo> [Coke]: Bugzilla?

[20:18] <[Coke]> (which is: anything we would have to maintain ourselves)

[20:18] <nemo> ah

[20:18] <[Coke]> so, yes.

[20:18] <nemo> yeah, is kinda funny how centralised dvcs is these days

[20:18] <ZoffixW> nemo, fwiw, if you just write the docs and throw a diff in a pastebin, I'm sure someone will be happy to merge that for you

[20:19] <Skarsnik> Zoffix, interesting

[20:19] <ZoffixW> Or not even a diff.. just the docs

[20:19] <mst> nemo: get ingy's git-hub project

[20:19] <mst> gives you a CLI interface that lets you avoid the terrible GUI

[20:19] <nemo> [Coke]: we opted for http://hg.hedgewars.org personally, wasn't that much of a pain, although a few contributers use bitbucket

[20:19] <nemo> mst: sounds interesting. does it do issue tracking too?

[20:19] * nemo searches

[20:20] <mst> that's ... why I suggested it ...

[20:20] <nemo> lol

[20:20] <nemo> that wasn't obv

[20:20] <mst> it was the issues you were complaing about so

[20:20] <nemo> one of...

[20:20] <mst> go look at the tool already :D

[20:21] <nemo> mst: already doing that

[20:21] <mst> https://github.com/git-commands

[20:21] *** domidumont left
[20:21] <nemo> already half-way through doc 

[20:21] <nemo> but thanks for linking eventually 😉

[20:21] * nemo clones it

[20:21] *** muraiki left
[20:21] <nemo> hm. might be one of the few things I actually use "git" for

[20:21] <nemo> usually I rely on hg as a git bridge

[20:21] <mst> first I had to remember where to look that URL up ;)

[20:21] <stmuk_> there is also an official and similar hub wrapper from github themselves

[20:22] *** Odud joined
[20:22] <stmuk_> https://github.com/github/hub

[20:22] <mst> I have more faith in ingy understanding how to produce a decent grumpy minimalist's CLI

[20:23] <nemo> mst: TBH I would have been totally fine if their issue tracker worked in w3m like bugzilla does ☺

[20:23] <nemo> but I'll take a cli

[20:23] *** sno joined
[20:23] <mst> ah

[20:23] <mst> I'd still rather a CLI

[20:23] <nemo> yeah, prob

[20:23] <nemo> mst: I much prefer editing our wiki in the cli

[20:24] <nemo> hg pull -u, futz around in sed and vi, then hg ci... ♥

[20:24] *** kjs_ joined
[20:24] <nemo> http://hedgewars.org/kb/ (aforementioned wiki for context)

[20:25] <nemo> aaaanyway, will take ZoffixW's suggestion and whip up a plug for XCompose for that doc and link him to it ☺

[20:25] <ZoffixW> nemo, do you use w3m for regular web browsing all the time?

[20:25] <nemo> ZoffixW: quite a lot actually!

[20:25] <nemo> ZoffixW: I currently have 22 tabs open

[20:25] *** nzkindest left
[20:25] <nemo> also nice due to stupid moronic firewalls

[20:26] <ZoffixW> nemo, are a lot of sites completely unusable? :)

[20:26] <nemo> ZoffixW: not that many really

[20:26] <nemo> ZoffixW: just web "apps" and you kinda expect that

[20:26] *** nzkindest joined
[20:27] <nemo> ZoffixW: amusingly, some sites are more usable than if you, say, use privacy code... For example.  If you don't whitelist google for fonts or javascript you might not get sites that render 'cause some idjit decided to avoid "flash of unstyled content" by *defaulting* to a hide css instead of adding it in in JS

[20:27] <nemo> ZoffixW: result, failure to load a remote resource can result in a blank page until you disable CSS

[20:27] <nemo> but shows up fine in w3m 

[20:27] <nemo> firefox readability mode can help w/ that too

[20:28] <nemo> ZoffixW: fair number of badly-written expand/collapse stuff out there has same behaviour

[20:29] <ZoffixW> I'm kinda disappointed modules.perl6.org is not working properly

[20:30] *** patrickz joined
[20:30] <Skarsnik> scrolling is fixed, yay

[20:30] <ZoffixW> ;)

[20:31] <sjn> p6: say 1 + e ** (π * i); # Euler's idententity = 0

[20:31] <camelia> rakudo-moar 812a48: OUTPUT«0+1.22464679914735e-16i␤»

[20:31] <Skarsnik> how work koalitee? that still confuse me : http://modules.perl6.org/#sort-col=2&sort-dir=a

[20:32] <ZoffixW> Skarsnik, https://github.com/perl6/modules.perl6.org/blob/master/lib/ModulesPerl6/Metrics/Koalatee.pm#L22

[20:32] <TimToady> m: say 1 + e ** (π * i) ≅ 0

[20:32] <camelia> rakudo-moar 812a48: OUTPUT«True␤»

[20:32] <sjn> ok, so it's just because π is too irrational then? :)

[20:32] <Skarsnik> oh make sense

[20:32] <TimToady> m: say (1 + e ** (π * i)).Num.perl

[20:32] <camelia> rakudo-moar 812a48: OUTPUT«0e0␤»

[20:33] <TimToady> most common numeric methods are approximate

[20:34] <dalek> star/release: 3e3e9b0 | FROGGS++ | modules/ (20 files):

[20:34] <dalek> star/release: attempt at bootstrapping panda directly

[20:34] <dalek> star/release: review: https://github.com/rakudo/star/commit/3e3e9b019d

[20:34] <FROGGS> moritz: ^^

[20:34] <FROGGS> moritz: though, it Does Not Work Yet™

[20:36] <moritz> FROGGS: thanks, will take a look soon (I hope :-)

[20:36] <FROGGS> moritz: thing is that I can change the bin-dir of site for bootstrap.pl, but that shells out to panda and then the changed bin-dir is lost

[20:37] <FROGGS> panda usually uses environment vars to transfer information like that... dunno if I want to do it the same way

[20:37] *** Rotwang left
[20:37] *** Rotwang joined
[20:38] <moritz> FROGGS: I'd love to have panda install --into=site option or so

[20:38] <moritz> FROGGS: but environment variables would be OK too

[20:39] *** adu joined
[20:40] *** zakharyas joined
[20:40] <dalek> doc: c40b7cd | lizmat++ | doc/Language/contributors.pod:

[20:40] <dalek> doc: First version of documented contributors

[20:40] <dalek> doc: review: https://github.com/perl6/doc/commit/c40b7cd1ea

[20:42] <nemo> ZoffixW: http://m8y.org/tmp/perl6.txt here ya go

[20:42] *** hankache joined
[20:42] *** espadrine left
[20:42] *** Tonik left
[20:43] *** Odud left
[20:45] * PerlJam idly wonders if Test.pm6 could forego is_approx() in favor of ≅ instead

[20:46] <dalek> rakudo/nom: f7f9172 | moritz++ | docs/module_management.md:

[20:46] <dalek> rakudo/nom: Fix typo

[20:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f7f9172c9a

[20:46] <moritz> PerlJam: it could use ≅ inside is-approx, but you really we really want to retain the test function for better diagnostics

[20:46] <moritz> 7w 11

[20:46] <dalek> doc: c40ffa0 | lizmat++ | doc/Language/glossary.pod:

[20:46] <dalek> doc: Fix header thinkos

[20:46] <dalek> doc: review: https://github.com/perl6/doc/commit/c40ffa04c1

[20:46] *** pi4 left
[20:47] <dalek> doc: ca3147b | (Zoffix Znet)++ | doc/Language/unicode_entry.pod:

[20:47] <dalek> doc: List Compose Unicode entry

[20:47] <dalek> doc: 

[20:47] <dalek> doc: Closes #286. nemo++ Relevant IRC conversation: http://irclog.perlgeek.de/perl6/2016-01-04#i_11828959

[20:47] <dalek> doc: review: https://github.com/perl6/doc/commit/ca3147b0d7

[20:47] <ZoffixW> nemo++

[20:47] <masak> m: sub infix:<w>($l, $r) { "\\o/" }; 7 w 11

[20:47] <camelia> rakudo-moar 812a48: ( no output )

[20:47] <masak> m: sub infix:<w>($l, $r) { "\\o/" }; say 7 w 11

[20:47] <camelia> rakudo-moar 812a48: OUTPUT«\o/␤»

[20:47] <masak> m: sub infix:<w>($l, $r) { "\\o/" }; say 7w 11

[20:47] <camelia> rakudo-moar 812a48: OUTPUT«5===SORRY!5=== Error while compiling /tmp/1J3SjbKTxb␤Confused␤at /tmp/1J3SjbKTxb:1␤------> 3sub infix:<w>($l, $r) { "\\o/" }; say 77⏏5w 11␤»

[20:47] * masak thought so

[20:47] *** CIAvash left
[20:47] *** pi4 joined
[20:48] <nemo> ZoffixW: nifty

[20:48] <dalek> ecosystem: 454c0e2 | (Dan Kogai)++ | META.list:

[20:48] <dalek> ecosystem: Add Num::HexFloat to ecosystem

[20:48] <dalek> ecosystem: 

[20:48] <dalek> ecosystem: See https://github.com/dankogai/p6-num-hexfloat/

[20:48] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/454c0e294a

[20:48] <dalek> ecosystem: 4d50a97 | (Zoffix Znet)++ | META.list:

[20:48] <dalek> ecosystem: Merge pull request #114 from dankogai/patch-1

[20:48] <dalek> ecosystem: 

[20:48] <dalek> ecosystem: Add Num::HexFloat to ecosystem

[20:48] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/4d50a97c6f

[20:49] <ZoffixW> 2 more until 500 \o/

[20:49] <nemo> ZoffixW: yeah, I mostly use .XCompose for silly emoji, and stuff like ಠ_ಠ and ◕‿◕, but perl 6 might actually give me an excuse to use it in code 😃

[20:49] <ZoffixW> nemo, for some reason my compose often stops working -_-

[20:49] <nemo> ZoffixW: what's your window manager?

[20:50] <ZoffixW> m: sub term:<ಠ_ಠ> { say "e16.9999999" }; ಠ_ಠ

[20:50] <camelia> rakudo-moar 812a48: OUTPUT«e16.9999999␤»

[20:50] <nemo> heh

[20:51] <ZoffixW> I'm on Englightenment 0.16.999

[20:51] <nemo> oh. hm

[20:51] <ZoffixW> (yeah, it's long overdue for an upgrade)

[20:51] <ZoffixW> But I hear they made it horrible and I really really like how it works

[20:51] <ZoffixW> (right now)

[20:51] <avenj> e16 was my favorite wm for a long time

[20:51] <nemo> ZoffixW: http://ಠ_ಠ.m8y.org/ಠ_ಠ  btw  - no, this has no good reason for existence.  I just link people to it when appropriate ☺

[20:51] <ZoffixW> heh

[20:51] <nemo> ZoffixW: much like http://☠.m8y.org  which I mostly use for TLAP

[20:52] *** llfourn joined
[20:53] *** kjs_ left
[20:54] *** ZoffixW left
[20:56] *** n0tjack left
[20:57] *** llfourn left
[21:03] <Skarsnik> Zoffix, oh you fixed the generated README.md x)

[21:05] *** sprocket_ left
[21:05] <[Coke]> lizmat: the AUTHOR section of the glossary seems to be from a while ago. I'd probably just remove it.

[21:06] <lizmat> [Coke]: not sure what you mean?

[21:06] <[Coke]> "Patrick Michaud [email@hidden.address] is the primary author

[21:06] <[Coke]> and maintainer."

[21:07] <[Coke]> is that still true in 2016?

[21:07] <[Coke]> oh. perhaps the file I found isn't the one you just touched! ;)

[21:08] <lizmat> I created a new file

[21:08] <[Coke]> hey, we have a glossary in both rakudo & doc. :)

[21:08] *** raoulvdberge left
[21:08] <lizmat> these strings don't currently occur in doc

[21:08] <[Coke]> sorry. Excuse me while I go get more caffeine. :

[21:08] <[Coke]> lizmat: right, I saw the commit, then went to rakudo and found docs/glossary*

[21:08] <[Coke]> my bad entirely.

[21:08] <lizmat> ah, good point

[21:09] <lizmat> I will ravage that as well then and remove it afterwards

[21:16] *** sjoshi joined
[21:25] *** kaare_ left
[21:26] *** pierre-v_ joined
[21:27] *** zakharyas left
[21:28] *** pierre-vigier left
[21:29] <dalek> ecosystem: 542c3b1 | RabidGravy++ | META.list:

[21:29] <dalek> ecosystem: Add RPi::Device::SMBus

[21:29] <dalek> ecosystem: 

[21:29] <dalek> ecosystem: https://github.com/jonathanstowe/RPi-Device-SMBus

[21:29] <dalek> ecosystem: 

[21:29] <dalek> ecosystem: And 500!

[21:29] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/542c3b18fa

[21:30] <gfldex> .seen mberends

[21:30] <yoleaux> I saw mberends 26 Sep 2014 19:50Z in #perl6: <mberends> lizmat++

[21:31] <gfldex> i unbusted http-server-simple

[21:31] <lizmat> hmmm...  that karma was a very late repeat :-)

[21:31] <masak> is that a first? karma through seenbot?

[21:31] <masak> probably not.

[21:31] <gfldex> how long should i wait for the pull-request before i take over the module?

[21:32] <RabidGravy> I've waited eight months

[21:32] <tadzik> well, you do have a fork already

[21:32] *** n0tjack joined
[21:32] <tadzik> it'll not be the first case if you apply for subsituting the original module with your fork in the module ecosystem

[21:32] <diakopter> .karma lizmat

[21:32] <diakopter> karma lizmat

[21:33] <[Coke]> ENOKARMABOT lo these last 10 years.

[21:33] *** sjoshi left
[21:33] <[Coke]> ISTR there being on #parrot back in the day.

[21:33] <PerlJam> we store our karma in the universe

[21:33] <diakopter> there was one here around 4-5 years ago I think

[21:34] <masak> karma is part of this community, but we don't keep count, because that's not the point :)

[21:36] <diakopter> it's more like kudos

[21:36] *** sprocket_ joined
[21:37] *** n0tjack left
[21:37] <mspo> it's only fun if you also get negative

[21:38] *** pierre-v_ left
[21:38] <gfldex> :-| no LICENSE file

[21:38] <PerlJam> Usually people give themselves negative karma when they do something ... unwise.

[21:39] <gfldex> is there a rule about modules in the eco system and lack of license?

[21:39] *** pierre-vigier joined
[21:39] <[Coke]> Rules? maybe a guideline.

[21:39] <PerlJam> gfldex: no "rules", but there are some suggestions and community peer pressure.

[21:39] <masak> gfldex: if you don't have a license, then only copyright applies, I guess. and any copying or modification is a copyright infringement and punishable by law.

[21:40] * masak is not a lawyer

[21:40] *** mojca left
[21:40] <gfldex> i just broke the law \o/

[21:40] *** pierre-vigier left
[21:41] *** Zoffix left
[21:41] *** sprocket_ left
[21:41] <hankache> anything built on top of perl has to be artistic 2.0 licensed no?

[21:41] *** Zoffix joined
[21:41] <PerlJam> hankache: What does "built on top of" mean? 

[21:42] <hankache> built using?

[21:42] <PerlJam> hankache: on the face of it that does not look like a true statement

[21:42] <PerlJam> hankache: then, definitely no.

[21:42] <gfldex> that leave the question if panda (and it's author) are complicit of copyright infringement. I would say yes, for germany (see Störerhaftung)

[21:42] <hankache> a module for Perl 6 needs Perl 6

[21:42] <hankache> it cannot run on anything else

[21:42] <Skarsnik> it need something that implement perl 6

[21:42] *** pierre-vigier joined
[21:42] <awwaiid> m: DateTime.new(1451915781.000284).say # I'd like to get a DateTime from a timestamp

[21:42] <camelia> rakudo-moar f7f917: OUTPUT«2016-01-04T13:56:21.000284Z␤»

[21:43] <awwaiid> hm. maybe that doesn't work in rakudo 2015.12?

[21:43] <Zoffix> hankache, err, why would it need to be Artistic 2?

[21:43] <[Coke]> modules don't have to be artistic 2.0, no

[21:43] <Zoffix> hankache, you can license your code anyway you like. 

[21:43] <hankache> no idea, i was asking

[21:43] <Skarsnik> awwaiid, hm probably

[21:43] <awwaiid> rakudo 2015.12 say s"Default constructor for 'DateTime' only takes named arguments"

[21:43] <Zoffix> m: DateTime.new(1451915781.000284.Int).say # awwaiid 

[21:43] <camelia> rakudo-moar f7f917: OUTPUT«2016-01-04T13:56:21Z␤»

[21:44] <hankache> i thought there is a share-alike thing

[21:44] <Zoffix> m: DateTime.new(1451915781.000284.Instant).say # awwaiid 

[21:44] <camelia> rakudo-moar f7f917: OUTPUT«Method 'Instant' not found for invocant of class 'Rat'␤  in block <unit> at /tmp/i1anu7njPR line 1␤␤»

[21:44] <gfldex> hankache: it's up for the user to check if all licenses he uses are compatible. And artistic is fairly loose to start with.

[21:44] <Zoffix> ehe

[21:44] *** pierre-vigier left
[21:44] <awwaiid> msut be my version

[21:44] *** geraud joined
[21:44] <Skarsnik> awwaiid, that pretty weird, the new could take a str before

[21:46] <Zoffix> It should really treat 1451915781.000284 as an Instant. 

[21:46] <Zoffix> Since it handles 1451915781 as an epoch

[21:46] <awwaiid> that's what camelia appears to do here -- works as expected

[21:46] <Zoffix> m: say DateTime.new: 0

[21:46] <camelia> rakudo-moar f7f917: OUTPUT«1970-01-01T00:00:00Z␤»

[21:47] <rindolf> Zoffix: hi, sup?

[21:47] <rindolf> Zoffix: how were the holidays?

[21:47] <awwaiid> oh works on an int

[21:47] <rindolf> PerlJam: hi , long time.

[21:47] <awwaiid> well that's plenty good enough

[21:47] <PerlJam> happy new year rindolf 

[21:47] <Zoffix> rindolf, crappy

[21:47] * rindolf contemplates writing a smallish app in Perl 6.

[21:47] <rindolf> PerlJam: thanks.

[21:48] <rindolf> Zoffix: oh . :-(

[21:48] <Skarsnik> m: say DateTime.now

[21:48] <camelia> rakudo-moar f7f917: OUTPUT«2016-01-04T22:48:12.027481+01:00␤»

[21:48] *** pierre-vigier joined
[21:48] *** pierre-vigier left
[21:49] <Zoffix> rindolf, I missed the unlimited garbage collection day and now they changed the system to some sort of a trucking picking up the containers and dates changed. So not only do I have a full can of trash that's been sitting for two weeks and will sit for 1 more week, but I can no longer dispose unlimited amounts of recylcing.

[21:49] *** nige1 joined
[21:49] <Zoffix> And I've no idea how this stuff will play with my hostile neighbours, since we have to share those new containers. -_-

[21:49] <Skarsnik> Zoffix, you patched the wrong file in my module. but I will use the commit to fix in the pm file x)

[21:49] <Zoffix> Skarsnik, oh lol :)

[21:49] <Skarsnik> I generate the readme.md x)

[21:50] *** colomon_ left
[21:50] <rindolf> Zoffix: ah, I see.

[21:50] <rindolf> PerlJam: sup?

[21:51] <dalek> ecosystem: 0c70c38 | (Wenzel P. P. Peppmeyer)++ | META.list:

[21:51] <dalek> ecosystem: hostile takeover of http-server-simple

[21:51] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/0c70c38104

[21:53] *** nzkindest left
[21:53] <PerlJam> rindolf: nothing much.  Trying to stay awake at work after a really long day yesterday

[21:53] *** llfourn joined
[21:54] <rindolf> PerlJam: ah.

[21:56] <Zoffix> "Excess bags of recyclables or organics do not need to be tagged."  and I can buy tags for a $1 and have extra bags of regular garbage, and I guess the truck driver will be picking those up? Man, the City really messed up the system -_-

[21:58] *** llfourn left
[21:59] <masak> Zoffix: but did they mess it up using Perl 6?

[21:59] <masak> probably not

[21:59] <diakopter> *snort

[22:02] <dalek> doc: 040a5d5 | lizmat++ | doc/Language/unicode_texas.pod:

[22:02] <dalek> doc: Start with definitive table of Unicode<->Texas

[22:02] <dalek> doc: review: https://github.com/perl6/doc/commit/040a5d5520

[22:02] <diakopter> lizmat: cool! I've always wanted such a thing

[22:03] <lizmat> diakopter: please let me know of any errors / omissions

[22:04] <diakopter> (mostly because I can't be bothered to learn to type the "shorter" ones

[22:04] <diakopter> )

[22:04] <masak> lizmat++

[22:04] <diakopter> (they feel *much* longer to me)

[22:05] <dalek> doc: f01297e | lizmat++ | doc/Language/unicode_texas.pod:

[22:05] <dalek> doc: ∞ has nothing to do with sets

[22:05] <dalek> doc: review: https://github.com/perl6/doc/commit/f01297efbf

[22:07] <Zoffix> This looks weird. Unless my browser/IRC client are tricking me: https://github.com/perl6/doc/commit/040a5d5520#diff-884b6f23f36b40ba634837c82e19efe8R32

[22:07] <Zoffix> .u ⁻

[22:07] <yoleaux> U+207B SUPERSCRIPT MINUS [Sm] (⁻)

[22:07] <Zoffix> .u ⁻

[22:07] <yoleaux> U+207B SUPERSCRIPT MINUS [Sm] (⁻)

[22:07] <Zoffix> .u ¯

[22:07] <yoleaux> U+00AF MACRON [Sk] (¯)

[22:08] <[Coke]> docs sooo slooooow

[22:08] <lizmat> I have no idea why that is in there, but I lifted it from Grammar.nqp

[22:09] <geekosaur> works for me fwiw

[22:09] <lizmat> [Coke]: are you referring to the site, or generating the pages ?

[22:09] <geekosaur> (then again I hacked super/sub +/- into my prompt as part of git status...)

[22:09] <dalek> doc: 643ab8b | (Zoffix Znet)++ | doc/Language/unicode_texas.pod:

[22:09] <dalek> doc: Use macron instead of minus

[22:09] <dalek> doc: review: https://github.com/perl6/doc/commit/643ab8b619

[22:10] *** adu left
[22:10] <Zoffix> Looks very different on my terminal, even though I can't tell the difference on IRC: http://i.imgur.com/g4UTQSn.png

[22:10] <diakopter> m: use Acme::Meow;

[22:10] <camelia> rakudo-moar f7f917: OUTPUT«===SORRY!===␤Could not find Acme::Meow in:␤    /home/camelia/.perl6/2015.12-94-gf7f9172␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6␤    Co…»

[22:10] <lizmat> Zoffix: so I did a pasto ?    

[22:10] <lizmat> .u ¯

[22:10] <yoleaux> U+00AF MACRON [Sk] (¯)

[22:10] <lizmat> (guess I did, Zoffix++)

[22:11] <PerlJam> Macron as superscript minus for exponentiation is weird.

[22:11] <lizmat> m: say 3¯3

[22:11] <camelia> rakudo-moar f7f917: OUTPUT«5===SORRY!5=== Error while compiling /tmp/36v6gopVbG␤Bogus postfix␤at /tmp/36v6gopVbG:1␤------> 3say 37⏏5¯3␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modif…»

[22:11] <Zoffix> PerlJam, it is, but it's the default on the compose+^-

[22:11] *** colomon joined
[22:11] <lizmat> m: say 3¯³

[22:11] <camelia> rakudo-moar f7f917: OUTPUT«0.037037␤»

[22:11] <Zoffix> .u ¯

[22:11] <yoleaux> U+00AF MACRON [Sk] (¯)

[22:11] <[Coke]> lizmat: building the site, not browsing.

[22:11] <Zoffix> (that was my compose sequence)

[22:12] <lizmat> m: say 3⁻³

[22:12] <camelia> rakudo-moar f7f917: OUTPUT«0.037037␤»

[22:12] <[Coke]> I keep looking at it, but it's hard to break off a piece that is easy to speed up

[22:12] <[Coke]> I am tempted to make the build more ||, anyway. (whether in straight perl 6 or with a make file)

[22:13] <lizmat> [Coke]: what is it exactly that you're running ?

[22:13] <[Coke]> "make"

[22:13] *** mojca joined
[22:14] <Zoffix> It was using 750MB on my box today. The parrallel stuff will want moar :P

[22:14] <Zoffix> (of RAM)

[22:16] *** virtualsue left
[22:18] <dalek> doc: f24d91c | lizmat++ | doc/Language/contributors.pod:

[22:18] <dalek> doc: Get better index placement

[22:18] <dalek> doc: review: https://github.com/perl6/doc/commit/f24d91cfcb

[22:20] *** sprocket_ joined
[22:23] *** woodruffw left
[22:23] <dalek> doc: ffd2148 | lizmat++ | doc/Language/ (2 files):

[22:23] <dalek> doc: Add lemma for Pull Request

[22:23] <dalek> doc: 

[22:23] <dalek> doc: And fix the link from the list of contributors

[22:23] <dalek> doc: review: https://github.com/perl6/doc/commit/ffd2148885

[22:25] *** yqt joined
[22:26] *** atta joined
[22:26] *** bpmedley left
[22:27] *** DrArch left
[22:28] <Rotwang> is there moar/nqp hacking guide anywhere? I'm really struggling with making the thing to compile with my changeset

[22:29] <PerlJam> Rotwang: there's https://github.com/edumentab/rakudo-and-nqp-internals-course

[22:29] <PerlJam> I don't think there's a "deeper" guide

[22:30] <Rotwang> PerlJam: thanks

[22:30] <Rotwang> am I the only one who thinks that build scripts aren't wonderful?

[22:31] *** skids left
[22:32] * geekosaur reserves judgement, having seen some rather heinous build scripts (and indeed sometimes maintaining them...)

[22:32] <geekosaur> well, makefiles

[22:32] <geekosaur> which is just a build script with a funny name, really

[22:33] <PerlJam> and a funny syntax

[22:33] <PerlJam> and weird quirks

[22:34] *** hankache left
[22:34] <Rotwang> I've done tons of makefiles

[22:34] <Rotwang> make isn't that bad

[22:34] <PerlJam> Clearly make has withstood the test of time  (nothing has adequately supplanted it yet :)

[22:35] <masak> nowadays, when I have a compilation error in a module that I `use` from a script, I get the same compilation error N times instead of 1 time

[22:35] <masak> is anyone else seeing the same thing?

[22:35] <masak> I suspect precompilation is trying and failing over and over along various `use` paths

[22:36] <dalek> ecosystem: 7d0d866 | RabidGravy++ | META.list:

[22:36] <dalek> ecosystem: Add RPi::Device::PiGlow

[22:36] <dalek> ecosystem: 

[22:36] <dalek> ecosystem: Blinken lights!

[22:36] <dalek> ecosystem: 

[22:36] <dalek> ecosystem: https://github.com/jonathanstowe/RPi-Device-PiGlow

[22:36] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/7d0d866b8c

[22:41] <b2gills> ｢｣ don't really have Texas equivalents, unless you count Q//

[22:41] <Skarsnik> good night #perl6

[22:42] *** Skarsnik left
[22:43] *** virtualsue joined
[22:43] <Zoffix> RabidGravy, is that 500th module?

[22:44] <RabidGravy> that was the 501st, my previous one was 500th

[22:44] <dalek> rakudo/nom: 49fcd53 | lizmat++ | docs/glossary.pod:

[22:44] <dalek> rakudo/nom: Remove outdated glossary

[22:44] <dalek> rakudo/nom: 

[22:44] <dalek> rakudo/nom: After having moved the lemma's to the doc/Language/glossary.pod

[22:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/49fcd53c2a

[22:47] <lizmat> m: my $a = 42; say ｢foo $a bar｣   # indeed, b2gills, seems like they work like q// ?

[22:47] <camelia> rakudo-moar f7f917: OUTPUT«foo $a bar␤»

[22:47] <b2gills> No it is even more basic than that

[22:48] <lizmat> so what's the difference between q// and Q// again ?

[22:48] <b2gills> doesn't even support backslashes Q '\' eq '\\', basically all features are off

[22:49] <dalek> doc: c62fd69 | lizmat++ | doc/Language/glossary.pod:

[22:49] <dalek> doc: Lemmas from docs/glossary.pod

[22:49] <dalek> doc: review: https://github.com/perl6/doc/commit/c62fd6915b

[22:49] *** ELBeavers joined
[22:49] *** DrArch joined
[22:50] <dalek> doc: c8961ab | lizmat++ | doc/Language/unicode_texas.pod:

[22:50] <dalek> doc: ｢｣ is really like Q// b2gills++

[22:50] <dalek> doc: review: https://github.com/perl6/doc/commit/c8961aba9c

[22:52] *** nige1 left
[22:55] *** llfourn joined
[22:56] *** colomon left
[22:56] <RabidGravy> what larks

[22:57] *** kid51 joined
[22:58] *** atweiden joined
[22:58] <lizmat> good night, #perl6!

[22:58] <RabidGravy> toodles

[22:58] <masak> 'night, #perl6

[22:59] <RabidGravy> toodles

[22:59] <stmuk_> new 6guts

[22:59] <Rotwang> autarch: I've added a comment to https://perl6advent.wordpress.com/2014/12/22/the-cool-subset-of-main/

[23:00] *** llfourn left
[23:01] <autarch> Rotwang: fixed

[23:02] <Rotwang> autarch: that was quick [;

[23:02] <Rotwang> the markup example didn't work for me either, don't know why, have no mental power to look why

[23:03] *** peter__ joined
[23:04] *** Ch0c0late left
[23:04] <Zoffix> lizmat++ # all the speedups

[23:05] *** peter__ left
[23:05] <Zoffix> 8x faster :o

[23:06] <Zoffix> timotimo, how did you come up with 485 modules in ecosystem? It's at 499 now

[23:06] * Zoffix decides to claim the 500th spot

[23:06] <stmuk_> Acme::Bump!

[23:06] <RabidGravy> [jonathan@coriolanus ecosystem]$ wc META.list 

[23:06] <RabidGravy>   501   501 37572 META.list

[23:06] <Zoffix> RabidGravy, oh, damn, you already claimed it :(

[23:07] <Zoffix> stmuk_, Nah, it won't be crap, it's a Factoid plugin for IRC::Client

[23:07] <Zoffix> RabidGravy, your last was 500th. There's one extra META line for same module with two different versions, for testing AFAIC

[23:08] <RabidGravy> I also now have 31 modules, I may have to give up soon

[23:08] *** peter__ joined
[23:08] <Zoffix> I have 11 \o/

[23:09] <RabidGravy> MORE!

[23:11] *** peter__ left
[23:12] *** yurivish_ joined
[23:12] *** peter__ joined
[23:17] <stmuk_> r/perl6 seems to be coming to life

[23:19] <RabidGravy> Zoffix, you're in the top ten!

[23:20] <Zoffix> RabidGravy, that's pretty sad :/

[23:20] <Zoffix> I wish modules.perl6.org had a sort-by-author field so I could see what I wrote

[23:20] *** peter__ left
[23:21] *** colomon joined
[23:21] <Zoffix> Well, 3/11 are mostly useless :D

[23:21] *** yurivish_ left
[23:22] <Zoffix> Seen this guy on P5? https://metacpan.org/author/PERLANCAR 

[23:22] <Zoffix> 621 dists... 

[23:23] <RabidGravy> that's insane

[23:23] *** vendethiel left
[23:25] <leont> Zoffix: and about 3 of them are used by other people, at most

[23:25] <stmuk_> maybe perl6.org should have modules.perl6.org more obvious on the home pahe

[23:25] <RabidGravy> also a lot of wheel reinvention 

[23:25] <Zoffix> leont, that many you think? :D I dunno, App::rmhere sounds like a killer app

[23:26] <leont> I'm trying to be generous ;-)

[23:26] <Zoffix> stmuk_, it's on every page! :D

[23:26] <stmuk_> "below the fold"

[23:27] <stmuk_> maybe replace the advent calendar box by modules.perl6.org plug?

[23:28] <stmuk_> come 12th Night or whenever the tree is thrown out

[23:28] <Zoffix> stmuk_, I call this the "Executive Syndrome". My bosses/sales reps always want $foo in the visible place (often on the home page). Eventually, the end result is a ridiculously overcrowded home page that's pretty useless as clicks on it confirm :)

[23:28] <Zoffix> stmuk_, I think that's a good idea; to do on 15th or so. Today's is first working Monday since release. To many the advent would be new

[23:29] <stmuk_> yes that's true

[23:29] <Zoffix> Not to mention it has a lot of info not covered by docs

[23:29] <stmuk_> I did wonder why http://perl6.org/compilers/std-viv is linked when its not developed anymore

[23:32] <dalek> perl6.org: ca98af0 | (Zoffix Znet)++ | source/downloads/index.html:

[23:32] <dalek> perl6.org: Mention modules.perl6.org/panda on the /download page

[23:32] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/ca98af012f

[23:32] <stmuk_> ah good idea

[23:40] *** yurivish_ joined
[23:44] <timotimo> Zoffix: did you read last week's weekly and assumed it was this week's?

[23:45] <Zoffix> timotimo, yes, I in fact have!

[23:45] <Zoffix> I guess I never read it in the past

[23:45] <Zoffix> timotimo, that's awesome then. In 5 days we got 15 modules

[23:46] <timotimo> :)

[23:46] * timotimo didn't really backlog

[23:47] <timotimo> and during most of the day i forgot that today is weekly-day

[23:51] *** yurivish_ left
[23:54] <dalek> rakudo-star-daily: 6160a19 | coke++ | log/ (8 files):

[23:54] <dalek> rakudo-star-daily: today (automated commit)

[23:54] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/6160a1912a

[23:54] *** spider-mario left
[23:55] <AlexDaniel> “Smartmatch with S/// can never succeed because the subsequent string match will fail”

[23:55] <AlexDaniel> ok, now I stumbled upon it too

[23:55] <AlexDaniel> m: say ‘foo’ ~~ S/o/u/

[23:55] <camelia> rakudo-moar 49fcd5: OUTPUT«Potential difficulties:␤    Smartmatch with S/// can never succeed because the subsequent string match will fail␤    at /tmp/MaoITPf90o:1␤    ------> 3say ‘foo’ ~~ 7⏏5S/o/u/␤False␤»

[23:56] *** llfourn joined
[23:56] <timotimo> yeah, that's not how you do it :)

[23:56] <AlexDaniel> timotimo: what's the point of S/// then?

[23:56] <RabidGravy> right that's me done

[23:57] <RabidGravy> have fun

[23:57] <timotimo> you set $_ and then have something like my $new = S/.../.../

[23:57] *** skids joined
[23:58] <AlexDaniel> m: say S/o/u/ given ‘foo’

[23:58] <camelia> rakudo-moar 49fcd5: OUTPUT«fuo␤»

[23:58] *** zwu joined
[23:59] <zwu> just forgot what  '\' mean in the code my ($c) := \(gather for 1..2 {         take $_, $_ * 10;     });

