[00:00] *** itaipu left
[00:08] *** BenGoldberg joined
[00:16] <samcv> timotimo, some servers don't like that, like cloudflared sites

[00:17] <samcv> if you grab the header only it looks 'suspicious' :(

[00:17] <samcv> i used to do that before actually. did one request for a header then decided whether to get the document. but cloudflare often doesn't like that. wouldn't happen every time. but

[00:29] *** LegalResale left
[00:42] *** pierre_ joined
[00:47] <iBakeCake> regreg: $*PERL.version is the language version, $*PERL.compiler.version is the compiler version, and $*VM.version is the Virtual Machine's version

[00:54] *** dataf4l left
[00:56] *** Herby__ joined
[00:56] <Herby__> \o

[01:01] <Herby__> o/

[01:03] <iBakeCake>  |

[01:03] <iBakeCake> \o

[01:15] *** aborazmeh joined
[01:15] *** aborazmeh left
[01:15] *** aborazmeh joined
[01:16] *** nadim left
[01:17] <ugexe> samcv: I tried to do that with Net::HTTP but you cant read cross threads

[01:19] *** bjz joined
[01:22] <ugexe> so you cant create something like a `class HTTP::Response { has $.header; has Supply $.body }.new(header => $parsed_socket_text, body => $socket.Supply)`

[01:22] <ugexe> no SSL on IO::Socket::Async yet so thats not a solution either

[01:24] *** sufrostico left
[01:27] <ugexe> otherwise read the $socket.lines until you get a blank (the first \r\n\r\n), examine what you've stored, and close the socket if you want to

[01:34] *** Derperperd left
[01:34] *** bjz left
[01:34] *** pierre_ left
[01:36] *** sufrostico joined
[01:40] <ugexe> m: my $socket = IO::Socket::INET.new(:host<httpbin.org>); $socket.print("GET / HTTP/1.1\r\nHost:httpbin.org\r\nConnection:close\r\n\r\n"); my $header-lines = $socket.lines.map({$_ or last}); say $header-lines;

[01:40] <camelia> rakudo-moar b1f77c: OUTPUT«IO::Socket::INET is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 1␤␤»

[01:41] *** pierre_ joined
[01:44] *** pierre_ left
[01:44] *** pierre_ joined
[01:46] *** ilbot3 left
[01:47] *** ilbot3 joined
[02:02] *** dataf4l joined
[02:13] *** dataf4l left
[02:13] *** dataf4l joined
[02:14] *** pierre_ left
[02:16] *** aborazmeh left
[02:17] *** dataf4l left
[02:26] *** pierre_ joined
[02:28] *** skids joined
[02:33] *** dataf4l joined
[02:56] *** noganex joined
[02:57] <snowman_> Hello all. I just wanted to thank those who work on Perl6. I have been enjoying the language quite a bit.

[02:59] <seatek> I second that :)

[02:59] *** noganex_ left
[03:02] *** skids left
[03:05] *** dataf4l left
[03:15] <TimToady> on behalf of all of us, yer welcome!

[03:22] *** pierre_ left
[03:24] *** regreg left
[03:28] *** pierre_ joined
[03:32] *** Actualeyes left
[03:33] *** pierre_ left
[03:40] *** andrzejku_ joined
[03:41] *** pierre_ joined
[03:42] *** andrzejku left
[03:44] *** hoelzro_ left
[03:46] *** hoelzro joined
[03:46] *** AlexDaniel left
[03:51] *** b7j0c joined
[03:52] *** pierre_ left
[03:52] <b7j0c> hi. let's say I want to test a package I am updating, but I also have the same package installed with zef. How can I force perl6 to see my secondary copy of the package and not try to load the one from the standard place where zef puts them? PERL6LIB doesn't seem to help...

[03:56] <TimToady> perhaps: use lib '.'; or some such (though that would disable precompilation, I believe)

[03:56] <b7j0c> will try that out, thanks TimToady!

[03:58] <b7j0c> oh duh, PERL6LIB does work, it helps to set it to the right directory ;)

[04:00] *** pierre_ joined
[04:04] *** khw left
[04:05] *** pierre_ left
[04:14] *** BenGoldberg left
[04:18] *** Actualeyes joined
[04:29] *** brillenfux joined
[04:33] *** Cabanossi left
[04:37] *** Cabanossi joined
[04:38] *** andrzejku joined
[04:38] *** andrzejku_ left
[04:52] *** wamba joined
[04:55] *** ShimmerFairy left
[05:01] *** pierre_ joined
[05:01] *** Herby__ left
[05:07] *** brillenfux left
[05:09] *** b7j0c left
[05:12] *** brillenfux joined
[05:12] *** pierre_ left
[05:20] *** [particle] joined
[05:20] *** pierre_ joined
[05:24] *** pierre_ left
[05:43] *** pierre_ joined
[05:57] *** ufobat joined
[05:59] *** neuraload joined
[06:01] *** Jesmaybe_ joined
[06:01] *** Jesmaybe_ left
[06:02] *** Jesmaybe_ joined
[06:04] *** wamba left
[06:05] *** Jesmaybe_ left
[06:06] *** Jesmaybe_ joined
[06:07] *** Jesmaybe_ left
[06:07] *** Jesmaybe_ joined
[06:08] *** Jesmaybe_ left
[06:09] *** Jesmaybe_ joined
[06:10] *** mohae_ left
[06:10] <seatek> How would you create a new class with a variable class name? i.e. my $thing = DB::$class.new ?

[06:10] <seatek> I've been poking and prodding like mad

[06:11] *** mohae joined
[06:12] *** Jesmaybe_ left
[06:13] *** Jesmaybe_ joined
[06:14] <seatek> when you call a method identified by a variable name, I know you have to do this trick: self."$method"() to get it to work... but don't know what you need to do to instantiate a class with a variable name

[06:16] <seatek> (quotes don't seem to help with the class name bit)

[06:17] *** abraxxa joined
[06:22] *** bjz joined
[06:24] *** itaipu joined
[06:29] *** zacts left
[06:30] *** ale1ster joined
[06:30] <seatek> hmm. could probably climb aboard that "dispatching" fetish through multimethods I suppose.

[06:30] *** ale1ster left
[06:31] <arnsholt> ::($name), I *think*

[06:31] *** nadim joined
[06:31] *** firstdayonthejob joined
[06:31] <arnsholt> m: class Foo {}; say ::('Foo').new

[06:31] <camelia> rakudo-moar b1f77c: OUTPUT«Foo.new␤»

[06:32] <arnsholt> seatek: ^^^

[06:33] <seatek> hmm. ok maybe my problem is putting a ^can('whatever') after it... 

[06:34] *** cyphase joined
[06:37] <arnsholt> m: class Foo {}; say ::('Foo').^can('new')

[06:37] <camelia> rakudo-moar b1f77c: OUTPUT«(new)␤»

[06:38] *** bjz left
[06:38] <seatek> oh my god thoe whole time is was leaving out the '.' before the '^'. I can't believe it.

[06:39] <seatek> i need sleep :)

[06:39] <seatek> thank you arnsholt :)

[06:39] <seatek> arnsholt++

[06:39] *** firstdayonthejob left
[06:44] <seatek> m: class Tester::Foo {}; say Tester::('Foo').^can('new')

[06:44] <camelia> rakudo-moar b1f77c: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Combination of indirect name lookup and call not supported␤at <tmp>:1␤------> 3lass Tester::Foo {}; say Tester::('Foo')7⏏5.^can('new')␤    expecting any of:␤        argument list␤»

[06:44] <seatek> arnsholt: doesn't work with something in front of the '::'s though

[06:45] <arnsholt> What kind of something?

[06:46] <seatek> like the example above

[06:46] <seatek> m: class Tester::Foo {}; say Tester::('Foo').^can('new')

[06:46] <camelia> rakudo-moar b1f77c: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Combination of indirect name lookup and call not supported␤at <tmp>:1␤------> 3lass Tester::Foo {}; say Tester::('Foo')7⏏5.^can('new')␤    expecting any of:␤        argument list␤»

[06:47] <arnsholt> m: class Tester::Foo {}; say ::('Tester::Foo').^can('new') # Should work, I think

[06:47] <camelia> rakudo-moar b1f77c: OUTPUT«(new)␤»

[06:47] <seatek> ok that's what i was looking for -- the silly trick like you have to do with calling methods by variable names.. that's it ;) thank you again :)

[06:47] <seatek> i would never have come up with that on my own

[06:50] <seatek> perfect. works perfectly. thanks arnsholt++

[06:54] *** zacts joined
[06:54] <seatek> in order to call a method in your class, you have to do self."$method"()  to make it work, and in order to reference a class you have to do ::("My::$class")

[06:57] <seatek> the intuitive way is, of course, self.$method  and   My::$class   ... :) I think you had to use My::{$class} with Perl5 I'm remembering right. Those must be problemmatic. 

[06:58] <seatek> in both cases it seems to want extra assurances that it should be stringy 

[06:59] *** bjz joined
[07:07] *** wamba joined
[07:08] *** geekosaur left
[07:08] *** geekosaur joined
[07:10] <samcv> hmm would be nice if camelia differentiated between stdout and stderr

[07:10] *** pierre_ left
[07:10] <samcv> i have a perl5 bot that does that in another channel, would be cool if camelia did it tho i haven't look at the source for it yet

[07:12] <samcv> on my bot: !perl die "oh no" would make the bot say: STDERR: «oh no at (eval 11) line 1.␤»

[07:13] <samcv> and if there's stdout too it will print it and specify which is which. tho i guess maybe it could make it harder to tell the order of the errors since it seperates them?

[07:14] *** bjz left
[07:17] <samcv> idk maybe it's not that needed. just maybe it's nice sometimes

[07:18] <samcv> m: 0%%0 orelse say "oh no $!"

[07:18] <camelia> rakudo-moar b1f77c: OUTPUT«Use of Nil in string context␤  in block  at <tmp> line 1␤oh no ␤»

[07:18] <samcv> m: 0%%0 orelse say "oh no $_"

[07:18] <camelia> rakudo-moar b1f77c: OUTPUT«oh no (HANDLED) Attempt to divide by zero using infix:<%%>␤  in block <unit> at <tmp> line 1␤␤»

[07:18] <samcv> both show as OUTPUT tho one is stder and one is stdout.

[07:24] *** rindolf joined
[07:26] *** Jesmaybe_ left
[07:29] *** brrt joined
[07:30] *** zakharyas joined
[07:32] *** ocbtec joined
[07:33] *** domidumont joined
[07:37] *** domidumont left
[07:38] *** domidumont joined
[07:42] *** MasterDuke left
[07:43] *** wamba left
[07:47] *** wamba joined
[07:51] <andrzejku> hello Perl6

[07:53] *** hudo joined
[07:55] *** pierre_ joined
[07:56] <DrForr> o/

[07:59] <El_Che> ^(*(oo)*)^

[07:59] <El_Che> oink!

[08:05] *** perlpilot_ joined
[08:07] <andrzejku> :P

[08:07] <andrzejku> hey guys do you think it is hard to take job in Perl?

[08:08] <andrzejku> if it would be place where can I check my introduction skills

[08:10] <DrForr> Well, jobs.perl.org is a good start.

[08:11] *** wamba left
[08:12] <andrzejku> DrForr: yeah but I have no any Perl expierience in my cv :/

[08:12] *** FROGGS joined
[08:12] <andrzejku> I do Perl only if I need some automate scripts

[08:13] <DrForr> Then you have experience. What were you automating?

[08:13] <FROGGS> o/

[08:13] <andrzejku> in my previous job

[08:14] <DrForr> Then put it down on your CV.

[08:14] <andrzejku> ex. script to add VPN's after serve reboot

[08:14] <DrForr> That's valid, don't discount any experience.

[08:15] <andrzejku> or script to click button on power tap web interface :D

[08:15] *** seatek left
[08:16] <andrzejku> DrForr: ye but I am looking for something like introdcution questions

[08:16] *** domidumont left
[08:17] <andrzejku> DrForr: like most recruiters ask what is difference between C and C++

[08:17] <andrzejku> if you don't tell a log you fail

[08:17] <DrForr> I haven't done those in years... Still, I'd just put those down on your CV and see what they have to say.

[08:17] <andrzejku> :S

[08:18] <andrzejku> DrForr: okay I will test

[08:21] *** rindolf left
[08:23] <DrForr> You'll find out pretty fast; most of the jobs.perl.org jobs are fairly decent.

[08:24] <El_Che> andrzejku: decide what you want to do work wise and invest time in that field (e.g. start your private project, follow/collaborate with an open source project, do some reading...)

[08:24] <DrForr> And these days make sure you're on github and your projects go there.

[08:25] <andrzejku> I know that all ;)

[08:25] *** yqt joined
[08:25] <andrzejku> I cann't decide what I want to do in my life ;d

[08:26] <El_Che> get an xbox?

[08:26] <andrzejku> too poor for xbox

[08:27] <andrzejku> mostly I program in C++ near Linux

[08:27] *** rindolf joined
[08:28] *** ocbtec left
[08:28] <El_Che> andrzejku: is your job c++ programming?

[08:28] <andrzejku> yeah

[08:28] <andrzejku> my current yes

[08:28] <andrzejku> but they shift me all the time in some mess departments

[08:28] <andrzejku> ;d

[08:29] <andrzejku> interspersed with C

[08:29] <andrzejku> and more strange staff

[08:42] *** g4 joined
[08:43] *** pierre_ left
[08:49] *** rindolf left
[08:50] *** andrzejku left
[08:54] *** andrzejku joined
[08:54] *** dg joined
[08:55] *** rindolf joined
[09:04] *** domidumont joined
[09:06] *** rindolf left
[09:12] *** pierre_ joined
[09:14] *** rindolf joined
[09:16] *** canopus left
[09:22] *** cyphase left
[09:23] *** canopus joined
[09:27] *** cyphase joined
[09:29] *** FROGGS left
[09:30] *** domidumont left
[09:34] *** eliasr joined
[09:50] *** AlexDaniel joined
[09:56] *** pfortuny joined
[09:57] *** andrewalker joined
[09:59] <pfortuny> Hi, I've tried to find out in the docs and it seems that specifying a type for the elements of a list is not possible?

[10:00] <pfortuny> (I'm quite new to types). I am referring to something like: my List Int $a.

[10:01] *** itaipu left
[10:03] <DrForr> $a isn't a List variable. Maybe you just want 'my Int @a;'

[10:03] *** itaipu joined
[10:04] <pfortuny> well, yes, sorry. but does that force "compile-time" checking?

[10:07] <DrForr> Well, runtime checking certainly. Compile-time, I'm not certain but it'll certainly do run-time checks.

[10:08] *** bjz joined
[10:08] *** breinbaas left
[10:08] *** ocbtec joined
[10:09] *** cschwenz joined
[10:09] <pfortuny> Yep. I was wondering about catching those as compile-time errors. I **guess** other pure functional languages do?

[10:09] <timotimo> other pure functional languages will do that for you

[10:10] <timotimo> in perl6, types like "List of Int" are purely given by the programmer, not inferred by the compiler

[10:10] <timotimo> meaning, if you have a list that just happens to only have Int in it, the compiler won't make the variable a List of Int for you

[10:11] *** labster left
[10:13] <timotimo> when you don't know that, you'll end up with code like this and the corresponding error message:

[10:14] <timotimo> m: sub test-this-list(Int @foo) { ... }; my @bar = 1, 2, 3, 4; test-this-list(@bar)

[10:14] <camelia> rakudo-moar b1f77c: OUTPUT«Type check failed in binding to @foo; expected Positional[Int] but got Array ($[1, 2, 3, 4])␤  in sub test-this-list at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[10:14] *** TEttinger left
[10:14] <pfortuny> So: I can declare a my Int @a but after some time I might do @a[3] = "not Int"; and this will just be a runtime error?

[10:15] <timotimo> at the moment, and possibly for a longer time still, yes

[10:15] <arnsholt> Incidentally, this is what jnthn++ means when he says that Perl 6 types are "nominal, not structural"

[10:16] <pfortuny> OK, it was just a question (not a complaint :)

[10:16] <timotimo> the thing is that @a[3] = "not Int" results in a method call on @a, and the object that's the "target" of the call has full control over what is allowed and what isn't

[10:16] <timotimo> and you can - at run time - change the object in question so much that @a[3] = "not Int" would be correct again

[10:16] <arnsholt> In Haskell, "[1, 2, 3]" is an [Int] *because* it's elements are Int

[10:16] <DrForr> m: my Int @x=1,2,3;@x[1]='foo';

[10:16] <camelia> rakudo-moar b1f77c: OUTPUT«Type check failed in assignment to @x; expected Int but got Str ("foo")␤  in block <unit> at <tmp> line 1␤␤»

[10:17] *** ab6tract joined
[10:17] <pfortuny> good. thanks, timotimo, arnsholt & DrForr 

[10:17] <ab6tract> pfortuny: FWIW, this can be smoothed over in the mean-time via subsets

[10:17] <pfortuny> wut?

[10:17] *** go|dfish left
[10:18] <ab6tract> don't worry, example incoming :)

[10:23] <ab6tract> m: 'subset ListOfInt where { [&&] $_.map(* ~~ Int) }; sub sum(ListOfInt $ints) { [+] $ints }; my $l = [3,4,5,6]; say sum($l)'

[10:23] <camelia> rakudo-moar b1f77c: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant string "subset ListOfInt where { [&&] $_.map(* ~~ Int) }; sub sum(ListOfInt $ints) { [+] $ints }; my $l = [3,4,5,6]; say sum($l)" in sink context (line 1)␤»

[10:23] <ab6tract> grr

[10:23] <ab6tract> m: subset ListOfInt where { [&&] $_.map(* ~~ Int) }; sub sum(ListOfInt $ints) { [+] $ints }; my $l = [3,4,5,6]; say sum($l)

[10:23] <camelia> rakudo-moar b1f77c: OUTPUT«18␤»

[10:24] *** JimmyZ joined
[10:24] <ab6tract> it still gets kind of tricky WRT positional vs scalar containers

[10:24] <pfortuny> ab6tract: thanks.

[10:24] <cschwenz> what is the Perl 6 equivalent of the Perl 5 `my $num = unpack("Q", $data);` ?

[10:25] <jnthn> Also worth noting: the overall principle is that Perl 6 will enforce types "runtime at latest, compile time where possible". Where what's possible will shift over time. (This is one reason it's importnat for modules to declare which version of Perl 6 they're using.)

[10:25] <pfortuny> However, my issue was essentially about compile-time checking.

[10:25] <pfortuny> what if I do: "my Int @a; sub b returns Str {"hi"}; @a[1] = b();"

[10:25] <pfortuny> is that a compile-time or runtime error?

[10:26] <jnthn> Runtime today, but that one's in the realm of things we could catch at compile time in the future.

[10:26] <cschwenz> i've found https://docs.perl6.org/type/Blob , but that doesn't have Q as one of the template values.  :-(

[10:27] <pfortuny> OK, great. thanks, jnthn, ab6tract (thanks for the example also).

[10:27] *** pierre_ left
[10:30] *** DANtheBEASTman left
[10:33] *** itaipu left
[10:34] <cschwenz> and http://perldoc.perl.org/functions/pack.html tells me exactly how many bytes n, N, v, and V consume.  unfortunately, https://docs.perl6.org/type/Blob#method_unpack isn't so helpful.  so as an alternative to Q, are Perl 6's n, N, v, and V the same as Perl 5's?  that is, can i do `my Int @n = Blob.new([1, 2]).unpack("N*"); my Int $num = (@n[0] +< 32) +| @n[1];` in Perl 6 and have it be the same as if Perl 6 supported Q directly?

[10:46] *** wamba joined
[10:49] *** ChoHag joined
[10:49] <DrForr> cschwenz: pack() was a bit rushed; Liz did quite a bit of work on it and may have missed out on that term.

[10:50] <timotimo> yeah, and since the release, pack hasn't really been improved any more

[10:51] *** pfortuny left
[10:51] <cschwenz> +1 DrForr and timotimo

[10:52] <cschwenz> thanks, even if it isn't the answer i was hoping for :-)

[10:52] <timotimo> however:

[10:52] <timotimo> m: use NativeCall; my $a = CArray[int8].new(1, 2, 3, 4); say nativecast(CArray[int64], $a).perl

[10:52] <camelia> rakudo-moar b1f77c: OUTPUT«NativeCall::Types::CArray[int64].new␤»

[10:52] <timotimo> m: use NativeCall; my $a = CArray[int8].new(1, 2, 3, 4); say nativecast(CArray[int64], $a)[0]

[10:53] <camelia> rakudo-moar b1f77c: OUTPUT«67305985␤»

[10:53] <timotimo> m: use NativeCall; my $a = CArray[int8].new(1, 2, 3, 4); say nativecast(CArray[int64], $a)[0].base(16)

[10:53] <camelia> rakudo-moar b1f77c: OUTPUT«4030201␤»

[10:53] <cschwenz> ooh, shiny!  :-D

[10:53] <cschwenz> thanks!

[10:53] <timotimo> as close to the metal as possible

[10:53] <dalek> doc: 8279652 | (Francis Grizzly Smit)++ | doc/Type/Proc.pod6:

[10:53] <dalek> doc: fixed small gramatic error in doc for Proc::sink run used where it should have been ran

[10:53] <dalek> doc: review: https://github.com/perl6/doc/commit/8279652e6a

[10:53] *** domidumont joined
[11:09] *** rindolf left
[11:11] *** go|dfish joined
[11:13] *** wamba left
[11:16] *** bjz left
[11:18] *** MorayJ joined
[11:28] <AlexDaniel> what is :dba in Perl 6 grammar?

[11:29] <DrForr> "doing business as"

[11:30] <AlexDaniel> do I get it right that it is used for “expecting any of” messages?

[11:31] <AlexDaniel> if so, what makes it work? Can somebody point me to the line number?

[11:35] <arnsholt> Yeah, it's used to create the expecting any of messages

[11:35] <arnsholt> I have so far failed to track down exactly how it works

[11:35] <arnsholt> But it involves the high water mark and stuff

[11:36] <arnsholt> Grep for highexpect in the source to find at least some of the places

[11:36] *** kaare__ joined
[11:43] <jnthn> iirc it's also used for ~

[11:43] <jnthn> When we don't find the closer

[11:44] <jnthn> So may want to grep for FAILGOAL also

[11:50] *** MasterDuke joined
[11:53] *** AlexDaniel left
[12:03] *** fumlead joined
[12:07] *** ab6tract left
[12:10] *** domidumont left
[12:12] *** bioduds left
[12:12] *** esh joined
[12:14] *** esh left
[12:15] *** esh joined
[12:32] *** woolfy left
[12:39] *** pmurias joined
[12:41] <pmurias> andrzejku: which city do you live in?

[12:41] *** kurahaupo__ joined
[12:41] *** pierre_ joined
[12:45] <andrzejku> pmurias: Wroclaw

[12:48] * pmurias is too

[12:49] <pmurias> Perl doesn't seem to be very popular in Wrocław

[12:49] <andrzejku> pmurias: are you from Wroclaw?

[12:49] <andrzejku> :D

[12:49] <andrzejku> pmurias: ye, it is fact

[12:50] <pmurias> andrzejku: I'm not from Wrocław but I live there

[12:50] <jnthn> Wrocław.pm? :)

[12:50] <andrzejku> pmurias: nice ;d

[12:50] <andrzejku> yeah lets start Wroclaw.pm

[12:50] <andrzejku> ;p

[12:51] *** harrison_ joined
[12:51] <andrzejku> jnthn: wroclaw?

[12:51] *** harrison_ left
[12:52] <jnthn> andrzejku: No, I'm not from there. Was just suggesting making a Pm group there ;-)

[12:52] <andrzejku> ye, sure

[12:53] <jnthn> It's like 6 hours travel from me :)

[12:53] <andrzejku> organize -> code -> make workplaces

[12:53] *** esh left
[12:53] <andrzejku> jnthn: ohh so you may live in germany :D

[12:53] *** perlpilot_ is now known as perlpilot

[12:54] <jnthn> No, Prague :)

[12:54] <andrzejku> do you have prague.pm?

[12:54] *** AlexDaniel joined
[12:57] <AlexDaniel> m: say < = ≠ ⩵ ⩶ ≡ ≢ ≔ ⋍ >.map({“$_ .uniname”})

[12:57] <camelia> rakudo-moar b1f77c: OUTPUT«(= .uniname ≠ .uniname ⩵ .uniname ⩶ .uniname ≡ .uniname ≢ .uniname ≔ .uniname ⋍ .uniname)␤»

[12:57] <AlexDaniel> m: say < = ≠ ⩵ ⩶ ≡ ≢ ≔ ⋍ >.map({“$_ {.uniname}”})

[12:57] <camelia> rakudo-moar b1f77c: OUTPUT«(= EQUALS SIGN ≠ NOT EQUAL TO ⩵ TWO CONSECUTIVE EQUALS SIGNS ⩶ THREE CONSECUTIVE EQUALS SIGNS ≡ IDENTICAL TO ≢ NOT IDENTICAL TO ≔ COLON EQUALS ⋍ REVERSED TILDE EQUALS)␤»

[12:57] <jnthn> There is one, though I didn't make a meeting of it...first it collided with when I was away with work, then I got sick...

[12:57] * jnthn only fairly recently moved here :)

[12:58] <andrzejku> jnthn: I think there are more perl writers but they are scared

[12:59] <andrzejku> jnthn: in my old job there were prohibition for perl

[12:59] *** kurahaupo__ is now known as kurahaupo

[13:00] <andrzejku> they said: you can write it on your own, noone want it

[13:00] <andrzejku> evenmore when a group of ppl tell you it is a crap you cannt arguing

[13:01] <andrzejku> no chance

[13:02] <perlpilot> andrzejku: you've seen builtinperl.com, yes?

[13:03] <DrForr> I know I have :0

[13:03] <DrForr> s/.$/)/

[13:03] <andrzejku> perlpilot: no I will look

[13:04] <perlpilot> Particularly look at http://www.builtinperl.com/perl-startups

[13:04] *** cdg joined
[13:06] <DrForr> And that's just a sample; please keep in mind *lots* of companies use Perl; that site just lists some of those who choose to promote Perl.

[13:07] <moritz> isn't there a Polish Perl Workshop?

[13:08] <andrzejku> it was

[13:08] *** SourceBaby joined
[13:08] *** Undercover joined
[13:08] *** ChanServ sets mode: +v Undercover

[13:08] <[Coke]> Blue Coke needs coffee, badly!

[13:09] *** dustinm` joined
[13:10] <pmurias> moritz: I was at one once

[13:11] <jnthn> I think I spoke at two Polish Perl Workshops :)

[13:11] <jnthn> Fun times :)

[13:14] <andrzejku> jnthn: maybe polish perlers left poland

[13:16] <andrzejku> maybe it will be better if Perl can game dev

[13:16] <andrzejku> or iOS, Android

[13:16] <andrzejku> like pygame

[13:16] <andrzejku> or rubymine

[13:16] *** japhb joined
[13:17] <pmurias> andrzejku: game dev isn't an area Perl is very strong with (and there don't seem to be significant plans to change it)

[13:18] <DrForr> SDL bindings are pretty mature.

[13:18] <andrzejku> pmurias: why?

[13:18] <DrForr> At least on perl5...

[13:18] <andrzejku> I play once a good game written in pygame i forgot name but it was commercial

[13:18] <andrzejku> kind of panzer&generals

[13:19] <DrForr> Well, feel free to help make it more popular.

[13:20] <andrzejku> ye, but it is a matter of time

[13:21] <andrzejku> if pmurias will be intrested in ;d

[13:21] <DrForr> Yep, it's easy when it's not your time.

[13:21] <andrzejku> it is easy to dream about

[13:22] *** skids joined
[13:23] * pmurias hopes that if rakudo.js gets optimized enough it will be possible to use it for writing games too ;) (as javascript is being pushed in everywhere)

[13:34] *** aborazmeh joined
[13:34] *** aborazmeh left
[13:34] *** aborazmeh joined
[13:43] *** aborazmeh left
[13:48] *** rindolf joined
[13:55] *** titsuki left
[13:56] *** neuraload left
[13:56] *** neuraload joined
[13:57] *** optikalmouse joined
[14:00] *** maybekoo2 joined
[14:02] <[Coke]> https://github.com/kdeldycke/awesome-falsehood

[14:04] <iBakeCake> "People’s names have an order to them"  why is that a falsehood?

[14:05] <iBakeCake> That list would be interesting to read if it had explanations :)

[14:06] <gfldex> in some countries fam. names come first

[14:06] <iBakeCake> .... which is order.

[14:07] <iBakeCake> There's too much ambiguity in that statement

[14:07] <DrForr> Right, but assuming that everyone uses the same order even in the same country isn't always the case.

[14:07] <gfldex> that you need to know in beforehand and can't auto-detect in many asian languages

[14:08] <huf> yes, but i doubt there's any place where there's _no_ order :)

[14:08] <gfldex> my firstname is more commonly used as a surname here in germany. What leads to confusion on a regular basis.

[14:08] *** esh joined
[14:08] <huf> it's just different from place to place

[14:08] <huf> gfldex: oh i love the firstname firstname sorts...

[14:09] <huf> and *then* you read about them in an english article and you're completely lost

[14:09] <gfldex> it's Wenzel and is old middle german for boy. So my father was only confunsing, not wrong. :)

[14:10] <huf> i was thinking of the gabor denes types

[14:10] *** khw joined
[14:10] <huf> which in an english text would likely be denes gabor. which is also completely valid

[14:11] *** neuraload left
[14:12] *** bjz joined
[14:12] <huf> it's worse with far eastern names where none of the parts are familiar so you cant ever guess :)

[14:17] *** bjz left
[14:17] *** [particle] left
[14:17] *** pierre_ left
[14:21] <optikalmouse> if anyone wants to write a tutorial on perl6 and get paid for it, you can contact codementor.io, I feel like I'm the first person to write a perl 6 article and get $$ for it.

[14:21] <optikalmouse> also, sorry for  the advertisement, I just want more perl6 articles out there :D :D

[14:21] <iBakeCake> :/

[14:22] *** brillenfux left
[14:22] <iBakeCake> Is bisectable down?

[14:22] <iBakeCake> bisectable6: open 'foo' orelse say "Something happened $!"

[14:22] <iBakeCake> bisect: open 'foo' orelse say "Something happened $!"

[14:22] <moritz> optikalmouse: you aren't; I've written several Perl 6 articles for a German print magazine

[14:22] <moritz> and got paid for it :-)

[14:23] <DrForr> I've been speaking at large conventions... and getting paid for it :)

[14:23] <bisectable6> iBakeCake, On both starting points (old=2015.12 new=b1f77c8) the exit code is 1 and the output is identical as well

[14:23] <bisectable6> iBakeCake, Output on both points: open is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub open at src/RESTRICTED.setting line 9␤  in block <unit> at /tmp/pRL29KFmws line 1␤

[14:23] <bisectable6> iBakeCake, On both starting points (old=2015.12 new=b1f77c8) the exit code is 1 and the output is identical as well

[14:23] <bisectable6> iBakeCake, Output on both points: open is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub open at src/RESTRICTED.setting line 9␤  in block <unit> at /tmp/K520g4MBcm line 1␤

[14:23] <iBakeCake> bah

[14:23] <AlexDaniel> iBakeCake: want me to give it a go without RESTRICTED?

[14:24] *** robins is now known as robinsmidsrod

[14:24] <iBakeCake> AlexDaniel: sure

[14:25] <optikalmouse> moritz: woah, link plz?

[14:25] <AlexDaniel> iBakeCake: bisect log: https://gist.github.com/ee157de0dd11ae7ca7a9617801db5fec

[14:25] <AlexDaniel> iBakeCake: (2016-09-01) https://github.com/rakudo/rakudo/commit/631e2f770e83da5420b0b3ecfe611e6892a7df4f

[14:26] <optikalmouse> bisectable6: say "this is neato"

[14:26] <bisectable6> optikalmouse, On both starting points (old=2015.12 new=b1f77c8) the exit code is 0 and the output is identical as well

[14:26] <bisectable6> optikalmouse, Output on both points: this is neato

[14:26] <optikalmouse> :O

[14:26] <AlexDaniel> iBakeCake: I know it's not what you wanted :D

[14:26] <AlexDaniel> iBakeCake: but join #whateverable to play with it

[14:27] <iBakeCake> AlexDaniel: it's fine. Thanks.

[14:29] <AlexDaniel> iBakeCake: https://gist.github.com/Whateverable/f576faeb59a3b3c6d26e94291f0ca29b

[14:31] <iBakeCake> AlexDaniel++ perfect. Thanks.

[14:32] *** g4 left
[14:33] <AlexDaniel> iBakeCake: https://gist.github.com/Whateverable/f3fba76d504a4b69f91014b3e3d0bd61

[14:33] <AlexDaniel> iBakeCake: (2015-12-08) https://github.com/rakudo/rakudo/commit/fbba428d2b05f0f8132ba6480e8a50a44f26d320

[14:33] <AlexDaniel> I don't know what were you looking for but that's the result

[14:34] *** andrzejku left
[14:39] *** wamba joined
[14:40] <tbrowder> can anyone help with my RT acc't, or do i need to file a ticket?

[14:40] <AlexDaniel> tbrowder: what's up with it?

[14:42] <tbrowder> i cannot see anywhere to file a ticket! i used to have a page where that could be done, but i've looked at every edit button i can find and nada.

[14:43] <AlexDaniel> ah ok

[14:43] <AlexDaniel> that's correct

[14:43] <tbrowder> i can see my tickets, and i can search, but nothing else of much value...

[14:43] <tbrowder> so we have to use the e-mail only now?

[14:44] *** hudo left
[14:45] <AlexDaniel> tbrowder: yes

[14:45] <tbrowder> okay (bummer!)

[14:45] <AlexDaniel> tbrowder: I can't find it in the log now, but there was some issue with it

[14:45] <AlexDaniel> someone was ddosing RT using it or something like that

[14:46] <tbrowder> thanks, that sounds familiar--just part of the, ugh, RT interface...

[14:47] <AlexDaniel> https://irclog.perlgeek.de/perl6-dev/2016-10-06#i_13346585 https://irclog.perlgeek.de/perl6-dev/2016-10-01#i_13318615 xD

[14:47] <AlexDaniel> tbrowder: ah, there: https://irclog.perlgeek.de/perl6/2016-09-29#i_13306616

[14:47] <iBakeCake> tbrowder: if you don't like it, you can write a short program that would create the ticket for you. I'm sure the API still works, and if not, the program can mail

[14:48] *** kurahaupo left
[14:48] <iBakeCake> https://rt-wiki.bestpractical.com/wiki/REST#Ticket_Create

[14:50] *** kurahaupo__ joined
[14:50] *** kurahaupo__ left
[14:50] <tbrowder> thanks, folks, but i'll save the script for another day

[14:52] *** kurahaupo__ joined
[14:52] *** kurahaupo__ is now known as kurahaupo

[14:55] *** bjz joined
[14:57] *** abraxxa left
[15:00] *** bjz left
[15:04] *** sufrostico left
[15:11] *** optikalmouse left
[15:14] *** yqt left
[15:16] *** itaipu joined
[15:17] *** optikalmouse joined
[15:17] *** rindolf left
[15:18] *** optikalmouse left
[15:28] *** bjz joined
[15:29] <dalek> Inline-Perl5: 045a0d5 | niner++ | lib/Inline/Perl5.pm6:

[15:29] <dalek> Inline-Perl5: Fix "Attempt to free unreferenced scalar" in shutdown

[15:29] <dalek> Inline-Perl5: 

[15:29] <dalek> Inline-Perl5: When the Perl 5 interpreter has been shut down, we may no longer call

[15:29] <dalek> Inline-Perl5: SvREFCNT_dec on any objects. Fix Perl5Hash and Perl5Array destructors

[15:29] <dalek> Inline-Perl5: to do the same as Perl5Object's which is to use Inline::Perl5::sv_refcnt_dec

[15:29] <dalek> Inline-Perl5: method which checks whether the interpreter is still running.

[15:29] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/045a0d5719

[15:29] <dalek> Inline-Perl5: f0bb7c4 | niner++ | META.info:

[15:29] <dalek> Inline-Perl5: Version 0.21

[15:29] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/f0bb7c4738

[15:30] *** esh left
[15:30] *** optikalmouse joined
[15:31] *** rodarmor joined
[15:46] *** optikalmouse left
[15:50] *** AlexDaniel left
[15:56] *** brrt is now known as brrt[idle]

[16:01] *** rindolf joined
[16:02] *** optikalmouse joined
[16:02] *** nicq20 joined
[16:04] *** seatek joined
[16:04] *** cschwenz left
[16:07] <dalek> whateverable: c35cdc1 | MasterDuke17++ | Benchable.p6:

[16:07] <dalek> whateverable: Increase timeout and handle new commit options

[16:07] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/c35cdc120e

[16:07] <dalek> whateverable: 4a05be6 | MasterDuke17++ | t/benchable.t:

[16:07] <dalek> whateverable: Add tests for Benchable

[16:07] <dalek> whateverable: review: https://github.com/perl6/whateverable/commit/4a05be69af

[16:10] *** u-ou joined
[16:10] *** u-ou is now known as Guest57568

[16:14] <iBakeCake> .oO( why does rakudobrew use "blead" instead of "bleed" )

[16:14] <iBakeCake> oh god... 

[16:14] * iBakeCake looked up blead on UrbanDictionary...

[16:14] <mst> iBakeCake: because that's been the perl tradition forever

[16:15] <mst> I believe it's because that branch is the bleading edge

[16:15] <iBakeCake> mst: I see

[16:15] <iBakeCake> Ah

[16:15] <mst> basically, "because we have a habit of turning larry's terrible puns into multi-generational tradition, because perl hackers"

[16:16] <iBakeCake> :)

[16:16] *** zakharyas left
[16:17] <mst> oh, which reminds me, if you're planning to stay flounced out of perl5 stuff indefinitely, can you please try and find a new maintainer for Mew? I didn't spend hours talking you through doing it to have it bitrot just because some of the mojo team can't manage to be civilised :P

[16:18] <iBakeCake> Well, I use it for $work and it powers modules.perl6.org, so it won't bitrot :)

[16:18] <mst> ah, right, I assumed your 'I quit' included that

[16:18] <mst> if you're still going to keep it going, don't mind me

[16:20] *** nowan_ joined
[16:23] *** nowan left
[16:27] *** bjz left
[16:29] *** nicq20 left
[16:30] *** telex left
[16:31] *** telex joined
[16:32] *** Sgeo_ joined
[16:34] *** Sgeo left
[16:39] *** [particle] joined
[16:39] *** esh joined
[16:51] *** sufrostico joined
[16:52] <dalek> doc: c014ce8 | adaptiveoptics++ | doc/Language/exceptions.pod6:

[16:52] <dalek> doc: clarified / corrected wording

[16:52] <dalek> doc: review: https://github.com/perl6/doc/commit/c014ce85ff

[17:03] <dalek> doc: 942bd20 | adaptiveoptics++ | doc/Language/exceptions.pod6:

[17:03] <dalek> doc: eliminated insanity

[17:03] <dalek> doc: review: https://github.com/perl6/doc/commit/942bd2003f

[17:03] *** yqt joined
[17:04] *** firstdayonthejob joined
[17:04] <iBakeCake> hah

[17:06] <seatek> it was too much ;)

[17:06] <iBakeCake> Are you adaptiveoptics?

[17:07] <seatek> yeah -- there's no mention of fail in exceptions

[17:07] <iBakeCake> :)

[17:08] *** Actualeyes left
[17:10] <TimToady> seatek: yes, we very deliberately distinguish symbolic reference from hard reference, and make the symbolic reference harder than the hard reference, because Huffman coding

[17:11] <TimToady> on the flip side, we don't need 'use strict refs' like Perl 5 does

[17:11] <moritz> optikalmouse: sorry, totally missed your earlier question. The articles where in the iX magazine: http://www.heise.de/ix/

[17:11] <optikalmouse> neat! :D

[17:11] <moritz> optikalmouse: I don't believe they are available online individually

[17:12] <moritz> optikalmouse: iirc there were 3 or 4 articles in 2009, and one this year (2016-05, iirc)

[17:12] *** acrussell joined
[17:13] <moritz> and they pay pretty decent (~200€ per page, or so)

[17:13] <iBakeCake> :o

[17:13] <moritz> though I'm too slow writing to make that a full-time job :-)

[17:13] <optikalmouse> not bad, I got 150 USD for my article

[17:13] <optikalmouse> indeed, I figure i can do maybe 3 articles a month, technical articles are hard because you wanna make sure the code works and make sure there's as much explanation as needed for newbs :/

[17:14] *** AlexDaniel joined
[17:14] <moritz> optikalmouse: not bad either

[17:14] <moritz> optikalmouse: if you need someone to proof-read your p6 articles, I'm willing to do that

[17:14] <moritz> (mostly technical/understanding side, not language; I'm not a native speaker)

[17:14] <moritz> and I could imagine others here would do that too, just ask

[17:15] <iBakeCake> For a cut :}

[17:15] <seatek> TimToady, ah, gotcha - for the Exception workings themselves... I was editing the documentation on Exceptions in general for end users where they talk about die and control flow all together in one doc... so it seemed that fail maybe should be mentioned? I'm still not clear on fail myself just yet, actually.

[17:15] <iBakeCake> m: my \term:<𝑒²ˣ> = e**(2*5);  dd (𝑒²ˣ-1)/(𝑒²ˣ+1)

[17:15] <camelia> rakudo-moar b1f77c: OUTPUT«0.999909204262595e0␤»

[17:16] <seatek> oo it seems github has gone away again

[17:16] <iBakeCake> m: my \term:<𝑒²ˣ> = e**(2*5);  dd (𝑒²ˣ-1)/(𝑒²ˣ+1) ≅ tanh 5

[17:16] <camelia> rakudo-moar b1f77c: OUTPUT«Bool::True␤»

[17:16] <iBakeCake> \o/

[17:16] <TimToady> seatek: fail returns a lazy die, basically

[17:17] <iBakeCake> seatek: you can temporarily add 192.30.253.113 and it'll work

[17:17] <iBakeCake> (resolve github.com to it, I meant)

[17:17] <seatek> TimToday - ah so it lingers... until... ? :)

[17:17] <timotimo> it's a lazy day to die!

[17:17] <iBakeCake> seatek: until it's sunk, used as anything but bool

[17:17] <TimToady> bool or defined

[17:17] <iBakeCake> s/,/ or/;

[17:18] <iBakeCake> Ah yeah

[17:20] <TimToady> so (this metaphor will probably upset DHS...) it's like a bomb you give as your result, but there's a button on it that says "Defuse me!", and as long as you defuse it, you can treat it as an ordinary value that just happens to represent throwing an exception

[17:20] <iBakeCake> .oO( who's DHS...)

[17:21] <iBakeCake> Dumb High Schoolers...

[17:21] <seatek> TimToady, that makes sense now! :) thank you! :)

[17:21] <iBakeCake> Dudes Hoisting Submarines

[17:21] *** Actualeyes joined
[17:22] <TimToady> depending on what the submarines are carrying, yes

[17:22] <optikalmouse> moritz: that would be helpful, I'm aiming to do a web server + client tutorial for p6 next, will let you know when I start writing it

[17:22] <iBakeCake> Ah Department of Homeland Security

[17:23] <TimToady> I don't doubt that there are some rather sensitive gamma ray detectors in the mouth of the Potomac River...

[17:26] *** lichtkind_ joined
[17:26] <TimToady> though I don't think they'd want to hoist such a sub by its own petard...

[17:28] <AlexDaniel> .oO( TimToday, TimTomorrow… )

[17:29] * TimToady just wonders if the russians have developed bombs with the isotopic signatures of chinese or north korean bombs, or vice versa...

[17:29] *** lichtkind left
[17:30] <TimToady> it would be rather embarrassing to inflict MAD on the wrong bad guy...

[17:31] <seatek> ok - it looks to me like you still have to catch a fail or everything dies, just like die. Is it different only in that it waits until after all the phasers run to die?

[17:32] <TimToady> well, all the phasers that would run if you returned a normal value by that route

[17:32] <TimToady> you're not gonna get an END till after the exception is thrown, for instance, nor anything outside of the spot where the exception is actually thrown, unless unwinding the stack does it

[17:33] <nine> GitHub being down makes you really appreciate CPAN's mirror system

[17:34] <iBakeCake> seatek: you can pass it around just like normal value

[17:34] <iBakeCake> m: sub bad { fail "meow" }; my $v = bad; sub good ($x) { $x or say "wow looks like you gave me something fishy: $x" }; good $v

[17:34] <DrForr> Once ze rockets go up, who cares where zey come down...

[17:34] <camelia> rakudo-moar b1f77c: OUTPUT«wow looks like you gave me something fishy: (HANDLED) meow␤  in sub bad at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:34] <iBakeCake> nine: indeed. GitHub down = Entire Perl 6 Ecosystem down

[17:36] * DrForr remembers to install githubbackup on at least 2 machines.

[17:37] *** yqt left
[17:42] *** wamba left
[17:50] <tailgate> The dns ddos?

[17:50] <iBakeCake> Seems to be

[17:51] <tailgate> weird. I don't seem to be affected

[17:52] <seatek> iBakeCake, the $x OR say 'whatever' seems absolutely key to make fail work -- using $x first by itself. but it doesn't count passing it around... it has to actually be used as itself, then you can do whatever with it, without dying.

[17:52] <seatek> that's very weird

[17:53] <seatek> thank you iBakeCake++ and TimToady++ :)

[17:53] <iBakeCake> seatek: um... but before it became $x it was a $v that I passed to another subroutine.,

[17:53] <iBakeCake> seatek: and it's not it used as itself. The `or` evaluates it in Bool context, which defuses it

[17:54] <iBakeCake> m: sub bad { fail "meow" }; my $v = bad; sub good ($x) { say 2+$x }; good $v

[17:54] <camelia> rakudo-moar b1f77c: OUTPUT«meow␤  in sub bad at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in sub good at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:54] <iBakeCake> m: sub bad { fail "meow" }; my $v = bad; sub good ($x) { say $x }; good $v

[17:54] <camelia> rakudo-moar b1f77c: OUTPUT«meow␤  in sub bad at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in sub good at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:54] <iBakeCake> m: sub bad { fail "meow" }; my $v = bad; sub good ($x) { $x }; good $v

[17:54] <camelia> rakudo-moar b1f77c: ( no output )

[17:54] <iBakeCake> The last one has a ticket for it..

[17:56] <AlexDaniel> m: (my $x = 42) = my $y = 50; say $x; say $y

[17:56] <camelia> rakudo-moar b1f77c: OUTPUT«50␤50␤»

[17:56] <AlexDaniel> m: (my $x = 42) = 50; say $x

[17:56] <camelia> rakudo-moar b1f77c: OUTPUT«50␤»

[17:57] <seatek> that last one was what I imagined diffused it ;)

[17:57] <tailgate> m: https://gist.github.com/ahalbert/42668ccb13502912e47913969cffc88f

[17:57] <seatek> but you say it's supposed to be just when the object is placed in a bool context for evaluation...

[17:57] <iBakeCake> seatek: m: sub bad { fail "meow" }; my $v = bad; sub good ($x) { $x; Nil }; good $v

[17:57] <seatek> that seems harder ;)

[17:57] <camelia> rakudo-moar b1f77c: ( no output )

[17:57] <iBakeCake> oops

[17:57] <iBakeCake> m: sub bad { fail "meow" }; my $v = bad; sub good ($x) { $x; Nil }; good $v

[17:57] <camelia> rakudo-moar b1f77c: OUTPUT«WARNINGS for <tmp>:␤Useless use of $x in sink context (line 1)␤»

[17:57] <iBakeCake> huh

[17:58] <iBakeCake> m: sub bad { fail "meow" }; my $v = bad; sub good ($x) { $x.sink; Nil }; good $v

[17:58] <camelia> rakudo-moar b1f77c: OUTPUT«meow␤  in sub bad at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in sub good at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:58] <iBakeCake> Looks like a bug to me

[18:00] <seatek> i don't know if i like fail. it seems like you'd always have to test if what you're getting is a failure object instead of what you really want

[18:00] <iBakeCake> :/

[18:01] <dalek> doc: a377999 | (Francis Grizzly Smit)++ | doc/Type/Proc/Async.pod6:

[18:01] <dalek> doc: fixed Proc::Async doc for new forgot the :$r parameter

[18:01] <dalek> doc: review: https://github.com/perl6/doc/commit/a377999d24

[18:01] <seatek> i have to think about it :)

[18:01] *** rgrinberg joined
[18:02] <ugexe> an adapter doesnt have to test a type from an adaptee if the client handles failures

[18:02] *** rgrinberg left
[18:03] <dalek> doc: 763a3a5 | (Francis Grizzly Smit)++ | doc/Type/Proc/Async.pod6:

[18:03] <dalek> doc: fixed Proc::Async doc for new forgot the :$r parameter

[18:03] <dalek> doc: review: https://github.com/perl6/doc/commit/763a3a5a8f

[18:03] <seatek> yeah kinda like passing the buck

[18:07] *** FROGGS joined
[18:07] <FROGGS> o/

[18:08] <seatek> clear trails...

[18:08] <seatek> hmm...

[18:10] <iBakeCake> \o

[18:15] *** Actualeyes left
[18:22] *** willena joined
[18:23] *** willena left
[18:25] *** itaipu left
[18:25] *** itaipu joined
[18:26] <seatek> i've changed my mind about fail. i'm cautiously liking it a bit now.

[18:27] <seatek> still poking it

[18:27] <TimToady> we've come to like most of the places we've installed laziness into p6 :)

[18:28] <seatek> :)

[18:28] <TimToady> important thing is to not lose the original information

[18:29] <TimToady> iBakeCake: yes, looks kinda like a non-sinking sink bug to me

[18:30] <TimToady> though obviously it knows it's in sink context or it wouldn't warn about it

[18:31] <iBakeCake> m: sub bad { fail "meow" }; my $v = bad; sub good ($x) { $x }; good $v

[18:31] <camelia> rakudo-moar b1f77c: ( no output )

[18:31] <iBakeCake> What about that one? Is it meant to throw the fail?

[18:32] <TimToady> m: sub bad { fail "meow" }; my $v = bad; sub good ($x) { $x }; sink good $v

[18:32] <camelia> rakudo-moar b1f77c: ( no output )

[18:32] <iBakeCake> IIRC it will with explicit return

[18:32] <TimToady> m: sub bad { fail "meow" }; my $v = bad; sub good ($x) { $x }; (good $v).sink

[18:32] <camelia> rakudo-moar b1f77c: OUTPUT«meow␤  in sub bad at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:32] <TimToady> same problem

[18:32] *** cdg left
[18:32] <TimToady> m: sub bad { fail "meow" }; my $v = bad; sub good ($x) { return $x }; good $v

[18:32] <camelia> rakudo-moar b1f77c: ( no output )

[18:33] <TimToady> nope

[18:33] <seatek> i think i would need to rely on that failing, with what i have managed to come to like ;)

[18:34] <TimToady> well, the good $v should fail because that is in sink context

[18:35] <TimToady> s/fail/throw/

[18:36] *** AlexDaniel left
[18:36] *** sufrostico left
[18:43] *** itaipu left
[18:43] *** itaipu joined
[18:44] *** eliasr left
[18:44] <TimToady> m: sub bad { fail "meow" }; my $v = bad; sub good ($y) { my $x = bad; $x }; good 42

[18:44] <camelia> rakudo-moar b1f77c: OUTPUT«meow␤  in sub bad at <tmp> line 1␤  in sub good at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:44] <TimToady> and yet that throws, so not so simple

[18:46] <TimToady> m: sub bad { fail "meow" }; my $v = bad; sub good ($y) { my $x = $y; $x }; good $v

[18:46] <camelia> rakudo-moar b1f77c: OUTPUT«meow␤  in sub bad at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:46] <TimToady> m: sub bad { fail "meow" }; my $v = bad; sub good ($y) { $y }; good $v

[18:46] <camelia> rakudo-moar b1f77c: ( no output )

[18:46] <TimToady> weird

[18:46] <iBakeCake> heh DDoS is top trend of Twitter :)

[18:46] <iBakeCake> Looks like the intertubes are quite clogged today

[18:48] <iBakeCake> m: sub bad { fail "meow" }; my $v = bad; sub good ($y) { say 2+2; say "inlining mabby?"; say rand; $y }; good $v

[18:48] <camelia> rakudo-moar b1f77c: OUTPUT«4␤inlining mabby?␤0.337825656718071␤»

[18:48] <iBakeCake> :(

[18:48] <DrForr> Yep, everyone's trying to get their stuff off github :)

[18:48] <hahainternet> yeah i updated my machine and assumed bind had failed due to being unable to look up minor sites

[18:49] <iBakeCake> m: sub bad { fail "meow" }; my $v = bad; sub good ($y is copy) { $y }; good $v

[18:49] <camelia> rakudo-moar b1f77c: OUTPUT«meow␤  in sub bad at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:49] <TimToady> m: sub foo(&a:(Int)) { say a(42) }

[18:49] <camelia> rakudo-moar b1f77c: ( no output )

[18:49] <TimToady> I think signatures are only recognized on & currently

[18:50] <hahainternet> if i wanted to monkey patch equality tests on a built in type, say bool, how would i go about that?

[18:50] <hahainternet> just redefine operators locally?

[18:50] <TimToady> we should probably disallow the :() form there until we generalize it though

[18:50] <FROGGS> TimToady: generalized in what way?

[18:50] <TimToady> just add your own multi defs in your scope that override on those types

[18:51] <TimToady> FROGGS: to other sigils, say

[18:51] <FROGGS> TimToady: k, just implemented $foo:(...) attributes locally

[18:52] <FROGGS> TimToady: by using sublongname, which allows dollars too... now I'd also want to use that for params

[18:52] <TimToady> m: sub foo($a:(Int)) { say $a:(Int)(42) }

[18:52] <camelia> rakudo-moar b1f77c: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> 3sub foo($a:(Int)) { say 7⏏5$a:(Int)(42) }␤»

[18:53] <FROGGS> strange, isnt it?

[18:53] <FROGGS> I guess the $a:(Int) declaration is a noop in nom/HEAD

[18:53] <TimToady> looks like the name extension form is being allowed in the sig but not the body

[18:53] <FROGGS> should one be allowed to use the longname in the body at all?

[18:54] *** acrussell left
[18:54] <FROGGS> to me the signature is more a trait when declaring the variable

[18:54] <TimToady> m: sub foo($a:<foo>) { say $a:<foo>(42) }

[18:54] <camelia> rakudo-moar b1f77c: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> 3sub foo($a:7⏏5<foo>) { say $a:<foo>(42) }␤»

[18:55] <FROGGS> m: sub foo($a:b<foo>) { say $a:b<foo>(42) }

[18:55] <camelia> rakudo-moar b1f77c: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Invalid typename 'b' in parameter declaration.␤at <tmp>:1␤------> 3sub foo($a:b7⏏5<foo>) { say $a:b<foo>(42) }␤»

[18:55] <TimToady> it's admitting the :(Int) form for some other reason, but not actually declaring $a somehow

[18:56] <TimToady> might be confusing it with sublist unpacking, for instance

[18:56] <TimToady> though unpacking sigs are supposed to be separated by whitespace

[18:57] <FROGGS> when I made $foo:(...) work it parsed it as variable $foo and adverb :(...)

[18:57] <FROGGS> so, was getting 'you cannot adverb that' error message at the beginning

[18:57] <hahainternet> bit of a stupid question from me, how would i test a Bool $x in given/when?, i'm aware that's a silly thing to do

[18:58] <iBakeCake> hahainternet: when { .so { } }

[18:58] <TimToady> or :so

[18:58] <iBakeCake> hahainternet: I mean given { when .so { .. } 

[18:58] <iBakeCake> }

[18:58] <hahainternet> i don't quite understand that syntax

[18:58] <hahainternet> iBakeCake: ok, but i need to test for false too

[18:59] <TimToady> .not or :not

[18:59] <hahainternet> oh ok

[18:59] <iBakeCake> hahainternet: if {} else {} :)

[18:59] <TimToady> default {} :)

[18:59] <hahainternet> iBakeCake: yeah that's the right way, i'm doing something dumb for a friend

[18:59] <iBakeCake>    

[18:59] *** TEttinger joined
[18:59] <iBakeCake> m: given 1 { when :so { say "True!" }; say "Tis false" }

[18:59] <camelia> rakudo-moar b1f77c: OUTPUT«True!␤»

[18:59] <iBakeCake> m: given 0 { when :so { say "True!" }; say "Tis false" }

[18:59] <camelia> rakudo-moar b1f77c: OUTPUT«Tis false␤»

[19:00] <iBakeCake> :}

[19:00] <hahainternet> oh interesting, i didn't know that given blocks worked like that

[19:00] <TimToady> yeah, don't actually need default {} except for clarity

[19:00] <iBakeCake> hahainternet: it's not the given block, but the when {} block

[19:00] <hahainternet> iBakeCake: the fallthrough?

[19:01] <iBakeCake> m: sub foo { when $^x { say "tis true!" }; say "tis false" }(1)

[19:01] <camelia> rakudo-moar b1f77c: OUTPUT«tis false␤»

[19:01] <TimToady> the "succeed"

[19:01] <iBakeCake> m: sub foo { when $^x { say "tis true!" }; say "tis false" }(0)

[19:01] <camelia> rakudo-moar b1f77c: OUTPUT«tis false␤»

[19:01] * iBakeCake is confused with that

[19:01] <iBakeCake> m: sub foo { $^x; when $x { say "tis true!" }; say "tis false" }(1)

[19:01] <camelia> rakudo-moar b1f77c: OUTPUT«tis false␤»

[19:02] <iBakeCake> Oh, it's smartmatching against $_?

[19:02] <TimToady> you never set $_

[19:02] <iBakeCake> \o/

[19:02] <iBakeCake> m: { when :so { say "tis true!" }; say "tis false" }(1)

[19:02] <camelia> rakudo-moar b1f77c: OUTPUT«tis true!␤»

[19:03] <TimToady> that's 1 way

[19:03] <iBakeCake> m: sub foo ($_) { when :so { say "tis true!" }; say "tis false" }(1)

[19:03] <camelia> rakudo-moar b1f77c: OUTPUT«tis true!␤»

[19:05] <hahainternet> so i guess i don't quite understand perl6's :various things

[19:05] * hahainternet goes to read

[19:06] *** itaipu left
[19:07] * TimToady goes to lunch

[19:11] *** BenGoldberg joined
[19:36] <iBakeCake> m: say '−∞' ~~ /<[+−-]> ['Inf'|'∞'] >>/

[19:36] <camelia> rakudo-moar b1f77c: OUTPUT«Nil␤»

[19:37] <iBakeCake> Why Nil?

[19:37] <iBakeCake> m: say '−∞' ~~ /<[+−-]> ['Inf'|'∞']/

[19:37] <camelia> rakudo-moar b1f77c: OUTPUT«｢−∞｣␤»

[19:37] <iBakeCake> hmm... might be related to the @foo >> bug

[19:38] *** sufrostico joined
[19:39] *** FROGGS left
[19:42] <fumlead> What bug?

[19:43] <iBakeCake> fumlead: https://rt.perl.org/Ticket/Display.html?id=127906#ticket-history

[19:45] <iBakeCake> Oh, wait, mine ain't a bug 

[19:45] <iBakeCake> ∞ isn't a word, so there's no boundary

[19:50] *** rindolf left
[19:52] *** masak joined
[19:52] *** rindolf joined
[19:58] *** optikalmouse left
[19:59] <masak> ahoj, #perl6

[20:04] <iBakeCake> \o

[20:07] *** cpage_ left
[20:09] *** labster joined
[20:10] *** cdg joined
[20:11] *** woolfy joined
[20:17] *** BenGoldberg left
[20:18] *** orbiting joined
[20:19] <pmurias> masak: o/

[20:20] *** setty1 joined
[20:21] *** maybekoo2 left
[20:23] *** nicq20 joined
[20:23] <nicq20> Hello! o/

[20:26] <iBakeCake> \o

[20:33] <iBakeCake>  |

[20:33] <iBakeCake> /\

[20:34] * [ptc] has a Saturday Night Fever flashback

[20:34] <[ptc]> ... and it's only Friday

[20:34] <masak> well, the night is young

[20:35] <masak> something tells me this evening might turn into a Saturday Night :P

[20:36] <tadzik> oh you :D

[20:37] <masak> am I wrong? am I wrong? come here and tell me I'm wrong

[20:43] *** MorayJ left
[20:43] <masak> can I switch topics and ask something about signature binders?

[20:43] * masak .oO( <masak> don't ask to ask )

[20:44] <masak> in 007, I just realized that people might want to extend parameters to do fun things like optional parameters or slurpy parameters (which are not in the language by default)

[20:44] <masak> but the problem is that this would also need to extend the routine signature binder, which is a runtime thing

[20:44] <masak> and runtime spreads all over the place, and is not neatly confined to scopes like the parser is

[20:45] <masak> and so you'd need to globally extend the signature binder -- which feels icky

[20:46] <masak> ...or... you'd need to associate with every routine either the default signature binder or an extended one -- which feels extremely Smalltalk-ish or something, and a little bit crazy, and probably something that won't every be backported into Perl 6

[20:46] <masak> ever*

[20:47] *** nicq20 left
[20:53] <timotimo> yeah, we want to have the signature binding stuff available in the optimizer, too

[20:54] <dalek> Inline-Perl5: fbcb648 | niner++ | / (2 files):

[20:54] <dalek> Inline-Perl5: Simplify callback handling

[20:54] <dalek> Inline-Perl5: 

[20:54] <dalek> Inline-Perl5: Instead of storing pointers to callbacks (call_method, free_p6_object, ...)

[20:54] <dalek> Inline-Perl5: in the magic struct of every wrapped object, store them once per Perl 5

[20:54] <dalek> Inline-Perl5: interpreter in a struct stored in the interpreter's modglobal hash.

[20:54] <dalek> Inline-Perl5: 

[20:54] <dalek> Inline-Perl5: This can even give a ~ 2 % speedup in a targeted benchmark.

[20:54] <dalek> Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/fbcb6483b6

[20:55] *** rjbs- left
[20:55] *** jameslenz joined
[20:58] *** rjbs joined
[20:59] *** khw left
[21:02] <masak> timotimo: yes, but that's not half as crazy as thinking it should be per routine...

[21:02] *** skids left
[21:04] <masak> (the reason I think it's Smalltalk-ish, I think, is that Mr Kay keeps mentioning this thing about the Web, and how it was a big mistake to just deliver HTML pages, rather than pages equipped with a program that told the client how to render the page.)

[21:05] <timotimo> oh, oh

[21:05] <pmurias> masak: why can't you lexically overwrite the signature binder?

[21:06] <masak> pmurias: because routines are first-class and get passed outside of their original scope all the time

[21:06] <masak> meaning that the actuall call to the routine might happen in a completely different scope, or even a different compunit

[21:07] <masak> actual*

[21:07] *** ufobat left
[21:09] <pmurias> masak: as would the actual syntactical addition

[21:11] <masak> the syntax is no problem at all

[21:12] <masak> the problem is that what the syntax *means* is a negotiation between caller and callee, and the caller is potentially anywhere in the program

[21:12] *** khw joined
[21:13] *** rindolf left
[21:13] <masak> somehow "this parameter is optional" needs to translate into "and now the signature binder accepts that there's actually no argument passed in here"

[21:13] <masak> and that needs to happen at (or close enough to) the caller side of things, otherwise the call will simply fail

[21:16] <pmurias> it seems to be an artifact of 007 being an interpreter

[21:18] *** pmurias left
[21:19] *** canopus left
[21:23] *** orbiting left
[21:25] *** canopus joined
[21:25] *** orbiting joined
[21:31] *** bjz joined
[21:43] <masak> I'll need to ponder that comment. it would certainly be convenient if you were right :)

[21:44] *** fumlead left
[21:47] <masak> 'night, #perl6

[21:47] <timotimo> gnite masak 

[21:50] *** orbiting left
[22:09] *** firstdayonthejob left
[22:09] *** wamba joined
[22:17] *** bjz left
[22:26] *** mez_ joined
[22:28] *** Jesmaybe_ joined
[22:44] *** MorayJ joined
[23:01] *** nowan_ left
[23:01] *** dustinm` left
[23:01] *** go|dfish left
[23:01] *** noganex left
[23:01] *** Util left
[23:01] *** pochi left
[23:01] *** cognominal left
[23:01] *** dataangel left
[23:01] *** Khisanth left
[23:01] *** emdashcomma left
[23:01] *** ponbiki left
[23:01] *** Jonis left
[23:01] *** zrr left
[23:01] *** m0ltar left
[23:01] *** tomaw left
[23:01] *** jercos left
[23:01] *** jervo left
[23:01] *** m0ltar joined
[23:01] *** pochi joined
[23:01] *** pochi left
[23:01] *** rjbs left
[23:01] *** Sgeo_ left
[23:01] *** JimmyZ left
[23:01] *** zacts left
[23:01] *** ilbot3 left
[23:01] *** lizmat left
[23:01] *** rudi_s left
[23:01] *** ilmari[m] left
[23:01] *** mls left
[23:01] *** kipd left
[23:01] *** chansen_ left
[23:01] *** Hotkeys left
[23:01] *** protium left
[23:01] *** ugexe left
[23:01] *** damnlie left
[23:01] *** robinsmidsrod left
[23:01] *** Ulti left
[23:01] *** clkao left
[23:01] *** giftnuss_ left
[23:01] *** timeless left
[23:01] *** jnap_ left
[23:01] *** mephinet left
[23:01] *** edenc left
[23:01] *** setty1 left
[23:01] *** esh left
[23:01] *** pyrimidi_ left
[23:01] *** tailgate left
[23:01] *** b2gills left
[23:01] *** awwaiid left
[23:01] *** kurahaupo left
[23:01] *** dg left
[23:01] *** nadim left
[23:01] *** hoelzro left
[23:01] *** stmuk_ left
[23:01] *** tadzik left
[23:01] *** Guest46334 left
[23:01] *** cooper_ left
[23:01] *** inokenty left
[23:01] *** peteretep left
[23:01] *** zostay left
[23:01] *** luis left
[23:01] *** hahainternet left
[23:01] *** Peter_R left
[23:01] *** perigrin left
[23:01] *** w4and0er96 left
[23:01] *** notbenh_ left
[23:01] *** jcallen_ left
[23:01] *** olinkl left
[23:01] *** MorayJ left
[23:01] *** canopus left
[23:01] *** user9 left
[23:01] *** SmokeMachine____ left
[23:01] *** gypsydav15 left
[23:01] *** TimToady left
[23:01] *** MasterDuke left
[23:01] *** harmil_wk left
[23:01] *** gregf_ left
[23:01] *** TeamBlast left
[23:01] *** khw left
[23:01] *** woolfy left
[23:01] *** TEttinger left
[23:01] *** Guest57568 left
[23:01] *** ocbtec left
[23:01] *** jsimonet left
[23:01] *** snowman_ left
[23:01] *** amalia_ left
[23:01] *** BinGOs left
[23:01] *** Matias[m] left
[23:01] *** mindos left
[23:01] *** tbrowder left
[23:01] *** mithaldu_ left
[23:01] *** ggherdov left
[23:01] *** domm1 left
[23:01] *** BooK left
[23:01] *** Bucciarati left
[23:01] *** hobbs left
[23:01] *** Spot__ left
[23:01] *** sftp left
[23:01] *** Timbus left
[23:01] *** evalable6 left
[23:01] *** committable6 left
[23:01] *** bisectable6 left
[23:01] *** iBakeCake left
[23:01] *** Dunearhp left
[23:01] *** huggable left
[23:01] *** NeuralAnomaly left
[23:01] *** buggable left
[23:01] *** dylanwh_ left
[23:01] *** Jesmaybe_ left
[23:01] *** labster left
[23:01] *** [particle] left
[23:01] *** rodarmor left
[23:01] *** Undercover left
[23:01] *** SourceBaby left
[23:01] *** kaare__ left
[23:01] *** perlpilot left
[23:01] *** geekosaur left
[23:01] *** mohae left
[23:01] *** synopsebot6 left
[23:01] *** dalek left
[23:01] *** grondilu left
[23:01] *** cgfbee left
[23:01] *** imcsk8_PTO left
[23:01] *** apejens left
[23:01] *** M-Illandan left
[23:01] *** Matthew[m] left
[23:01] *** solarbunny left
[23:01] *** sammers_ left
[23:01] *** m0ltar left
[23:01] *** telex left
[23:01] *** seatek left
[23:01] *** japhb left
[23:01] *** cyphase left
[23:01] *** vytas left
[23:01] *** dj_goku left
[23:01] *** mst left
[23:01] *** stevieb left
[23:01] *** baest left
[23:01] *** mxco86 left
[23:01] *** Lucas_One left
[23:01] *** brrt[idle] left
[23:01] *** xinming left
[23:01] *** Kaffe left
[23:01] *** crucialrhyme left
[23:01] *** obfusk left
[23:01] *** ChoHag left
[23:01] *** pecastro left
[23:01] *** kent\n left
[23:01] *** ssm_ left
[23:01] *** flexibeast left
[23:01] *** MilkmanDan left
[23:01] *** cibs left
[23:01] *** camelia left
[23:01] *** melezhik left
[23:01] *** mez_ left
[23:01] *** wamba left
[23:01] *** jameslenz left
[23:01] *** cdg left
[23:01] *** sufrostico left
[23:01] *** lichtkind_ left
[23:01] *** andrewalker left
[23:01] *** [Coke] left
[23:01] *** spider-mario left
[23:01] *** salva00 left
[23:01] *** bpmedley left
[23:01] *** akiym left
[23:01] *** avuserow left
[23:01] *** Cabanossi left
[23:07] *** sammers_ joined
[23:07] *** solarbunny joined
[23:07] *** M-Illandan joined
[23:07] *** Matthew[m] joined
[23:07] *** apejens joined
[23:07] *** imcsk8_PTO joined
[23:07] *** cgfbee joined
[23:07] *** grondilu joined
[23:07] *** dalek joined
[23:07] *** synopsebot6 joined
[23:07] *** geekosaur joined
[23:07] *** perlpilot joined
[23:07] *** kaare__ joined
[23:07] *** SourceBaby joined
[23:07] *** Undercover joined
[23:07] *** rodarmor joined
[23:07] *** [particle] joined
[23:07] *** labster joined
[23:07] *** WAAFZ47 joined
[23:07] *** jervo joined
[23:07] *** tomaw joined
[23:07] *** Grrrr joined
[23:07] *** stux|RC-only joined
[23:07] *** ab5tract_ joined
[23:07] *** pnu_ joined
[23:07] *** cosimo joined
[23:07] *** nine joined
[23:07] *** rmmm joined
[23:07] *** Praise joined
[23:07] *** profan joined
[23:07] *** eythian joined
[23:07] *** bitmap joined
[23:07] *** a3r0 joined
[23:07] *** Unavowed joined
[23:07] *** ruoso_ joined
[23:07] *** mtj_ joined
[23:07] *** [ptc] joined
[23:07] *** avalenn joined
[23:07] *** k-man joined
[23:07] *** vcv joined
[23:07] *** rblackwe joined
[23:07] *** risou___ joined
[23:07] *** DrForr joined
[23:07] *** jonadab joined
[23:07] *** shadowpaste joined
[23:07] *** musca joined
[23:07] *** krakan joined
[23:07] *** wilhelm.freenode.net sets mode: +vv dalek Undercover

[23:07] *** petercommand joined
[23:07] *** xdbr joined
[23:07] *** llfourn joined
[23:07] *** saki_ joined
[23:07] *** xxpor joined
[23:07] *** simcop2387 joined
[23:07] *** richi235 joined
[23:07] *** yeltzooo joined
[23:07] *** broquaint joined
[23:07] *** ft joined
[23:07] *** konobi joined
[23:07] *** atta joined
[23:07] *** sQuEE joined
[23:07] *** diegok joined
[23:07] *** maddingue joined
[23:07] *** jferrero joined
[23:07] *** zoosha joined
[23:07] *** kshannon joined
[23:07] *** cxreg joined
[23:07] *** Alikzus joined
[23:07] *** charsbar______ joined
[23:07] *** Exodist joined
[23:07] *** abruanese joined
[23:07] *** tony-o joined
[23:07] *** salparadise joined
[23:07] *** El_Che joined
[23:07] *** skaji_ joined
[23:07] *** lucs joined
[23:07] *** atacama_ joined
[23:07] *** remmie joined
[23:07] *** timotimo joined
[23:07] *** rpeter joined
[23:07] *** samcv joined
[23:07] *** Guest7479 joined
[23:07] *** sivoais joined
[23:07] *** mr-foobar joined
[23:07] *** rmusial joined
[23:07] *** mattp_ joined
[23:07] *** notbenh joined
[23:07] *** ranguard joined
[23:07] *** bhm_ joined
[23:07] *** xfix_ joined
[23:07] *** b^_^d joined
[23:07] *** ilbelkyr joined
[23:07] *** roguelazer joined
[23:07] *** woodruff- joined
[23:07] *** literal joined
[23:07] *** avar joined
[23:07] *** geraud joined
[23:07] *** huf joined
[23:07] *** sunnavy joined
[23:07] *** jnthn joined
[23:07] *** bartolin_ joined
[23:07] *** chee joined
[23:07] *** shmibs joined
[23:07] *** nightfrog joined
[23:07] *** Gothmog_ joined
[23:07] *** hcit joined
[23:07] *** gfldex joined
[23:07] *** avuserow joined
[23:07] *** melezhik joined
[23:07] *** akiym joined
[23:07] *** camelia joined
[23:07] *** bpmedley joined
[23:07] *** MilkmanDan joined
[23:07] *** salva00 joined
[23:07] *** flexibeast joined
[23:07] *** spider-mario joined
[23:07] *** ssm_ joined
[23:07] *** kent\n joined
[23:07] *** cibs joined
[23:07] *** [Coke] joined
[23:07] *** pecastro joined
[23:07] *** andrewalker joined
[23:07] *** ChoHag joined
[23:07] *** lichtkind_ joined
[23:07] *** sufrostico joined
[23:07] *** cdg joined
[23:07] *** jameslenz joined
[23:07] *** wamba joined
[23:07] *** mez_ joined
[23:07] *** SHODAN joined
[23:07] *** nowan joined
[23:07] *** go|dfish joined
[23:07] *** xiaomiao joined
[23:07] *** wilhelm.freenode.net sets mode: +v camelia

[23:07] *** pochi joined
[23:07] *** rjbs joined
[23:07] *** Sgeo_ joined
[23:07] *** JimmyZ joined
[23:07] *** zacts joined
[23:07] *** ilbot3 joined
[23:07] *** lizmat joined
[23:07] *** rudi_s joined
[23:07] *** ilmari[m] joined
[23:07] *** mls joined
[23:07] *** chansen_ joined
[23:07] *** Hotkeys joined
[23:07] *** protium joined
[23:07] *** ugexe joined
[23:07] *** robinsmidsrod joined
[23:07] *** damnlie joined
[23:07] *** Ulti joined
[23:07] *** clkao joined
[23:07] *** giftnuss_ joined
[23:07] *** jnap_ joined
[23:07] *** mephinet joined
[23:07] *** edenc joined
[23:07] *** Khisanth joined
[23:07] *** adrusi joined
[23:07] *** cognominal joined
[23:07] *** emdashcomma joined
[23:07] *** setty1 joined
[23:07] *** esh joined
[23:07] *** pyrimidi_ joined
[23:07] *** tailgate joined
[23:07] *** b2gills joined
[23:07] *** awwaiid joined
[23:07] *** TeamBlast joined
[23:07] *** brrt[idle] joined
[23:07] *** Lucas_One joined
[23:07] *** xinming joined
[23:07] *** Kaffe joined
[23:07] *** crucialrhyme joined
[23:07] *** obfusk joined
[23:07] *** mohae joined
[23:07] *** geekosaur left
[23:07] *** noganex joined
[23:07] *** m0ltar joined
[23:07] *** telex joined
[23:07] *** seatek joined
[23:07] *** japhb joined
[23:07] *** cyphase joined
[23:07] *** vytas joined
[23:07] *** dj_goku joined
[23:07] *** mst joined
[23:07] *** stevieb joined
[23:07] *** baest joined
[23:07] *** mxco86 joined
[23:07] *** matt| joined
[23:07] *** MasterDuke joined
[23:07] *** harmil_wk joined
[23:07] *** dataangel joined
[23:07] *** tinita joined
[23:07] *** eyck joined
[23:07] *** kurahaupo joined
[23:07] *** dg joined
[23:07] *** nadim joined
[23:07] *** hoelzro joined
[23:07] *** stmuk_ joined
[23:07] *** tadzik joined
[23:07] *** Guest46334 joined
[23:07] *** cooper_ joined
[23:07] *** inokenty joined
[23:07] *** peteretep joined
[23:07] *** zostay joined
[23:07] *** luis joined
[23:07] *** Peter_R joined
[23:07] *** hahainternet joined
[23:07] *** perigrin joined
[23:07] *** w4and0er96 joined
[23:07] *** notbenh_ joined
[23:07] *** jcallen_ joined
[23:07] *** vike joined
[23:07] *** orevdiabl joined
[23:07] *** isacloud joined
[23:07] *** chris2 joined
[23:07] *** riatre joined
[23:07] *** ribasushi_ joined
[23:07] *** mrsolo_ joined
[23:07] *** Juerd joined
[23:07] *** parisba joined
[23:07] *** ccakes joined
[23:07] *** Celelibi joined
[23:07] *** stigo joined
[23:07] *** ilmari joined
[23:07] *** lco joined
[23:07] *** hanekomu joined
[23:07] *** silug__ joined
[23:07] *** kst joined
[23:07] *** gensym joined
[23:07] *** kmwallio joined
[23:07] *** TheDir_ joined
[23:07] *** arnsholt joined
[23:07] *** ambs joined
[23:07] *** gabiruh joined
[23:07] *** daxim_ joined
[23:07] *** felher joined
[23:07] *** Upasaka joined
[23:07] *** sjohnsen joined
[23:07] *** integral joined
[23:08] *** ponbiki joined
[23:08] *** Jonis joined
[23:08] *** dustinm` joined
[23:08] *** jercos joined
[23:08] *** Util joined
[23:08] *** khw joined
[23:08] *** woolfy joined
[23:08] *** TEttinger joined
[23:08] *** Guest57568 joined
[23:08] *** ocbtec joined
[23:08] *** jsimonet joined
[23:08] *** snowman_ joined
[23:08] *** amalia_ joined
[23:08] *** BinGOs joined
[23:08] *** Matias[m] joined
[23:08] *** mindos joined
[23:08] *** tbrowder joined
[23:08] *** mithaldu_ joined
[23:08] *** domm1 joined
[23:08] *** BooK joined
[23:08] *** Bucciarati joined
[23:08] *** hobbs joined
[23:08] *** sftp joined
[23:08] *** Timbus joined
[23:08] *** evalable6 joined
[23:08] *** committable6 joined
[23:08] *** bisectable6 joined
[23:08] *** iBakeCake joined
[23:08] *** Dunearhp joined
[23:08] *** huggable joined
[23:08] *** NeuralAnomaly joined
[23:08] *** buggable joined
[23:08] *** dylanwh_ joined
[23:08] *** DarthGandalf joined
[23:08] *** wilhelm.freenode.net sets mode: +vv committable6 bisectable6

[23:08] *** geekosaur joined
[23:08] *** cgfbee left
[23:10] *** skids joined
[23:11] *** mrsolo_ left
[23:11] *** peteretep left
[23:12] *** sivoais left
[23:12] *** cgfbee joined
[23:12] *** MorayJ joined
[23:12] *** canopus joined
[23:12] *** user9 joined
[23:12] *** gypsydav15 joined
[23:12] *** TimToady joined
[23:13] *** sivoais joined
[23:13] *** Khisanth is now known as Guest93869

[23:13] *** ponbiki is now known as Guest55052

[23:13] *** xiaomiao is now known as Guest53586

[23:13] *** sivoais left
[23:13] *** sivoais joined
[23:14] *** go|dfish left
[23:14] *** go|dfish joined
[23:14] *** BenGoldberg joined
[23:15] *** Cabanossi joined
[23:17] *** MorayJ left
[23:23] <seatek> Yay! I had my first accidental infinite loop that ate up all my memory!

[23:23] <seatek> lesson - never return $.message from an exception's message() method

[23:23] *** mez_ left
[23:27] *** SmokeMachine____ joined
[23:28] *** wamba left
[23:28] *** olinkl joined
[23:30] *** AlexDaniel joined
[23:30] *** Spot__ joined
[23:30] *** kipd joined
[23:32] *** ggherdov joined
[23:33] *** PotatoGim joined
[23:35] *** peteretep joined
[23:35] *** kurahaupo left
[23:35] *** kurahaupo__ joined
[23:36] <timotimo> yup, $.message is sugar for self.message().item basically

[23:36] *** BuildTheRobots joined
[23:37] *** timeless joined
[23:38] *** mrsolo_ joined
[23:40] *** kurahaupo__ left
[23:55] *** pierre_ joined
[23:57] *** pecastro left
[23:57] *** pecastro joined
