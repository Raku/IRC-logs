[00:00] <b2gills> Hotkeys: Zoffix came up with a shorter version using xx 9 rather than ^9.map

[00:02] <Zoffix> I don't think it works. There's '9' in the output

[00:02] *** m1ndgames joined
[00:05] <Hotkeys> m: say sum await start {sleep 7;now -ENTER now} xx 9;say now -INIT now

[00:05] <camelia> rakudo-moar f19241: OUTPUT«63.0100307252␤7.0132424␤»

[00:05] <Hotkeys> it works

[00:05] <Zoffix> oh

[00:05] <Zoffix> :}

[00:05] <Hotkeys> m: say sum await start {sleep 7;now -ENTER now}xx9;say now -INIT now

[00:05] <camelia> rakudo-moar f19241: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3sum await start {sleep 7;now -ENTER now}7⏏5xx9;say now -INIT now␤    expecting any of:␤        infix␤        infix s…»

[00:05] <Hotkeys> m: say sum await start {sleep 7;now -ENTER now} xx9;say now -INIT now

[00:05] <camelia> rakudo-moar f19241: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3sum await start {sleep 7;now -ENTER now}7⏏5 xx9;say now -INIT now␤    expecting any of:␤        infix␤        infix …»

[00:05] <Hotkeys> m: say sum await start {sleep 7;now -ENTER now} xx 9;say now -INIT now

[00:05] <Hotkeys> weird

[00:06] <camelia> rakudo-moar f19241: OUTPUT«63.014306␤7.01916107␤»

[00:11] *** huggable left
[00:12] *** huggable joined
[00:19] *** BenGoldberg left
[00:24] *** cur8or left
[00:27] *** AlexDaniel left
[00:28] *** AlexDaniel joined
[00:31] *** cpage_ joined
[00:32] *** BenGoldberg joined
[00:32] *** kurahaupo left
[00:33] *** mohae_ left
[00:35] *** mohae joined
[00:50] *** webstrand left
[00:53] *** aries_liuxueyang left
[00:53] *** pmurias left
[00:54] *** ocbtec left
[00:54] *** aries_liuxueyang joined
[00:59] *** rgrinberg joined
[00:59] *** BenGoldberg left
[01:01] *** AlexDaniel left
[01:01] *** yqt left
[01:08] *** m1ndgames left
[01:09] *** molaf left
[01:17] *** aries_liuxueyang left
[01:18] *** aries_liuxueyang joined
[01:21] *** molaf joined
[01:22] *** jonadab joined
[01:27] *** FROGGS_ joined
[01:28] *** kurahaupo joined
[01:31] *** FROGGS left
[01:43] *** kid51 left
[01:44] *** ilbot3 left
[01:44] *** webstrand joined
[01:45] <Xliff> \o

[01:46] <Xliff> If an object has an attribute and a method of the same name, can I still access the attribute?

[01:46] <Xliff> If so, how?

[01:47] <timotimo> via the $! syntax

[01:47] *** ilbot3 joined
[01:48] <Zoffix> masak, interesting results (re blog post).

[01:48] <timotimo> next step is a physics simulation to run actual trains?

[01:48] <Xliff> Thanks timotimo.

[01:49] <Xliff> Also, is there a way to determine if an attribute exists at runtime?

[01:49] <timotimo> sure, you can .^attributes on your object

[01:50] <Zoffix> m: class Foo { has $!bar = 'attr'; method !bar { 'private' }; method bar { 'public' }; method Str { $!bar ~ self!bar ~ $.bar } }.new.put

[01:50] <camelia> rakudo-moar f19241: OUTPUT«attrprivatepublic␤»

[02:03] *** _webstrand joined
[02:04] *** kurahaupo left
[02:05] *** cdg left
[02:06] *** webstrand left
[02:07] *** Zero_Dogg left
[02:07] *** Zero_Dogg joined
[02:08] *** dwarring left
[02:12] <Xliff> There's definitely an endless loop issue relating to type checking in rakudo.

[02:12] <Xliff> I have a reliable piece of code that generates it, too.

[02:14] <Zoffix> whatisit?

[02:15] <Zoffix> Now I remember where I left off with IRC::Client... I want a restartable Promise

[02:15] <Zoffix> (as a module)

[02:20] <Xliff> Well dammit... it won't do it now. *sigh*

[02:24] *** noganex_ joined
[02:25] <Zoffix> Perl 6 Mojolicious :) http://i.imgur.com/CzX5ZgW.png

[02:26] <Xliff> Zoffix++

[02:26] *** noganex left
[02:27] <Xliff> Good night!

[02:27] *** Xliff is now known as Xliff_zzzz

[02:27] *** ssotka left
[02:34] *** BenGoldberg joined
[02:35] *** mr-fooba_ left
[02:36] *** mr-foobar joined
[02:42] *** Ben_Goldberg joined
[02:46] *** BenGoldberg left
[02:52] <Xliff_zzzz> m: role B { has $.a; method set($_a) { $!a = $_a}; method A { say $.a } }; class A does B; my $A = A.new; $A.set("Aaa"); $A.A

[02:52] <camelia> rakudo-moar f19241: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Too late for unit-scoped class definition;␤Please use the block form.␤at <tmp>:1␤------> 3 method A { say $.a } }; class A does B;7⏏5 my $A = A.new; $A.set("Aaa"); $A.A␤»

[02:53] <Xliff_zzzz> m: role B { has $.a; method set($_a) { $!a = $_a}; method A { say $.a } }; class A does B { }; my $A = A.new; $A.set("Aaa"); $A.A

[02:53] <camelia> rakudo-moar f19241: OUTPUT«Aaa␤»

[02:54] *** Sgeo joined
[03:10] *** Ben_Goldberg left
[03:18] <Zoffix> m: class Bar { ... }; class Foo { trusts Bar; has $!meths = <foo bar ber>;  }; class Bar { method do ($z) { .say for $z!meths } }; Bar.new.do: Foo.new

[03:18] <camelia> rakudo-moar f19241: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤No such private method 'meths' for invocant of type 'Bar'␤at <tmp>:1␤------> 3lass Bar { method do ($z) { .say for $z!7⏏5meths } }; Bar.new.do: Foo.new␤»

[03:18] <Zoffix> Why is it looking for meths in Bar? :S

[03:18] <Zoffix> m: class Bar { ... }; class Foo { trusts Bar; has $!meths = <foo bar ber>;  }; class Bar { method do ($z) { .say for $z.meths } }; Bar.new.do: Foo.new

[03:18] <camelia> rakudo-moar f19241: OUTPUT«Method 'meths' not found for invocant of class 'Foo'␤  in method do at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:18] <Zoffix> Yet this looks in Foo 

[03:20] *** BenGoldberg joined
[03:24] <Zoffix> m: class Bar { ... }; class Foo { trusts Bar; has $!meths = <foo bar ber>;  method !m { $!meths } }; class Bar { method do ($z) { .say for $z!Foo::m } }; Bar.new.do: Foo.new

[03:24] <camelia> rakudo-moar f19241: OUTPUT«(foo bar ber)␤»

[03:31] <Zoffix> Is there a way to avoid hardcoding 'Foo' in there?

[03:31] <Zoffix> m: class Bar { ... }; class Foo { trusts Bar; has $!meths = self.^name.lc;  method !m { $!meths } }; class Bar { method do ($z) { .say for $z!Foo::m } }; class Meow is Foo { has $!meths = 'not-meow'; }; Bar.new.do: Foo.new; Bar.new.do: Meow.new; 

[03:31] <camelia> rakudo-moar f19241: OUTPUT«foo␤meow␤»

[03:31] <Zoffix> I want the result here to be 'foo not-meow'

[03:34] *** wibble joined
[03:36] <Zoffix> bisect: m: class Bar { ... }; class Foo { trusts Bar; has $!meths = <foo bar ber>;  }; class Bar { method do ($z) { .say for $z!meths } }; Bar.new.do: Foo.new

[03:36] <bisectable> Zoffix: on both starting points the exit code is 1 and the output is identical as well

[03:36] <Zoffix> bisect: m: class Bar { ... }; class Foo { trusts Bar; has $!meths = <foo bar ber>;  method !meths { $!meths } }; class Bar { method do ($z) { .say for $z!meths } }; Bar.new.do: Foo.new

[03:36] <bisectable> Zoffix: on both starting points the exit code is 1 and the output is identical as well

[03:37] *** wibble left
[03:39] <Zoffix> m: class Bar { ... }; class Foo { trusts Bar; has $!meths = self.^name.lc;  method !m { $!meths } }; class Bar { method do ($z) { .say for $z!::($z.^name)::m } }; class Meow is Foo { has $!meths = 'not-meow'; }; Bar.new.do: Foo.new; Bar.new.do: Meow.new; 

[03:39] <camelia> rakudo-moar f19241: OUTPUT«===SORRY!===␤cannot stringify this␤»

[03:40] *** rgrinberg left
[03:41] <Zoffix> m: use MONKEY-SEE-NO-EVAL; class Bar { ... }; class Foo { trusts Bar; has $!meths = self.^name.lc;  method !m { $!meths } }; class Bar { method do ($z) { .say for EVAL "\$z!$z.^name()::m" } }; class Meow is Foo { trusts Bar; has $!meths = 'not-meow'; method !m { $!meths } }; Bar.new.do: Foo.new; Bar.new.do: Meow.new; 

[03:41] <camelia> rakudo-moar f19241: OUTPUT«foo␤not-meow␤»

[03:41] <Zoffix> I can't use this. Is there a saner way to achieve the same result?

[03:45] <Zoffix> m: class Foo { has $.gibblets = <foo bar ber>; }; my $f = Foo.new; say $f.gibblets; $f but role { method gibblets { die 'Tis private!' } }; say $f.gibblets

[03:45] <camelia> rakudo-moar f19241: OUTPUT«(foo bar ber)␤(foo bar ber)␤»

[03:45] <Zoffix> *sigh* there gotta be a way to have private methods for use by other classes in my distro that aren't available to the users of my distro :(

[03:46] *** khw left
[03:47] <Zoffix> Or remove/disable an existing method on a specific object :\

[03:47] <Zoffix> m: class Foo { has $.gibblets = <foo bar ber>; }; my $f = Foo.new; say $f.gibblets; $f = $f but role { method gibblets { die 'Tis private!' } }; say $f.gibblets

[03:47] <camelia> rakudo-moar f19241: OUTPUT«(foo bar ber)␤Tis private!␤  in method gibblets at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:47] <Zoffix> Ahhh

[03:47] <Zoffix> Well, ain't perfect but at least something

[03:47] <Zoffix> Digital duck tape

[03:52] *** ChoHag left
[03:53] *** khw joined
[04:07] *** Cabanossi left
[04:10] *** Cabanossi joined
[04:11] *** huggable left
[04:12] *** huggable joined
[04:15] *** grondilu joined
[04:17] *** wamba joined
[04:28] *** kaare_ joined
[04:30] *** khw left
[05:52] *** BenGoldberg left
[05:54] <gfldex> Zoffix: pod5 got F<> for filenames

[05:59] *** ChoHag joined
[06:10] *** jjido joined
[06:16] *** jjido left
[06:20] *** domidumont joined
[06:22] *** CIAvash joined
[06:24] *** domidumont left
[06:25] *** domidumont joined
[06:37] *** mr-foobar left
[06:38] *** mr-foobar joined
[07:06] *** Actualeyes joined
[07:08] *** firstdayonthejob joined
[07:18] *** jjido joined
[07:22] *** rindolf joined
[07:30] *** BenGoldberg joined
[07:45] *** domidumont left
[07:50] *** lizmat left
[07:53] *** grassass joined
[07:53] *** lizmat joined
[08:04] *** mr-foobar left
[08:05] *** mr-foobar joined
[08:07] *** TEttinger left
[08:11] *** huggable left
[08:11] *** BenGoldberg left
[08:12] *** huggable joined
[08:16] *** rurban_ joined
[08:29] *** grondilu left
[08:33] *** grondilu joined
[08:36] *** darutoko joined
[08:44] *** setty1 joined
[08:49] *** jjido left
[08:52] *** kid51 joined
[09:04] *** spider-mario joined
[09:05] *** Ulti_ is now known as Ulti

[09:08] <dalek> doc: cc46aaa | (Steve Mynott)++ | doc/Language/operators.pod:

[09:08] <dalek> doc: fix minor typo

[09:08] <dalek> doc: review: https://github.com/perl6/doc/commit/cc46aaa8f5

[09:25] *** RabidGravy joined
[09:26] <RabidGravy> boom

[09:38] *** kid51 left
[09:44] *** cognominal joined
[09:46] <cognominal> m, for 1..20  { print $_, Int.new($_) =:= Int.new($_) ?? '' !! '!', ' ' }

[09:48] <cognominal> m: for 1..20  { print $_, Int.new($_) =:= Int.new($_) ?? '' !! '!', ' ' }

[09:48] <camelia> rakudo-moar f19241: OUTPUT«1 2 3 4 5 6 7 8 9 10 11 12 13 14 15! 16! 17! 18! 19! 20! »

[09:49] <cognominal> I suppose there is some form of caching going on here.

[09:50] <cognominal> instanciating Ints below 15 gives an existing Int

[09:53] <cognominal> j: for 1..20  { print $_, Int.new($_) =:= Int.new($_) ?? '' !! '!', ' ' }

[09:53] <camelia> rakudo-jvm 40a953: OUTPUT«cannot connect to eval server: Connection refused␤»

[09:55] *** araujo_ joined
[09:56] *** araujo_ left
[09:57] *** araujo_ joined
[09:58] *** CIAvash left
[09:58] *** araujo left
[09:59] *** araujo_ left
[09:59] *** sno left
[10:00] *** sno joined
[10:00] <cognominal> https://github.com/MoarVM/MoarVM/blob/master/src/core/intcache.c  indeed thru a nqp::box_i called in the new method of Int class

[10:02] *** araujo_ joined
[10:06] <timotimo> yeah, that's right

[10:06] <timotimo> those ints are incredibly common

[10:06] <timotimo> we also do it for -1 i believe

[10:08] *** rurban_ left
[10:08] *** jack_rabbit left
[10:11] <cognominal> the mystery is there is 4 type of ints according to the code.

[10:12] <cognominal> m: for -3..20  { print $_, Int.new($_) =:= Int.new($_) ?? '' !! '!', ' ' }

[10:12] <camelia> rakudo-moar f19241: OUTPUT«-3! -2! -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15! 16! 17! 18! 19! 20! »

[10:15] *** Actualeyes left
[10:19] <cognominal> at the moar level, there are P6int and P6Bigints. Probably under the hood, there are many sorts of bigints?

[10:32] <Util> Zoffix: I have not read the thread past the long first post, but this might help:

[10:32] <Util> http://www.nntp.perl.org/group/perl.perl6.language/2010/03/msg33409.html

[10:32] <Util> "You never have privacy from your children in Perl 6"

[10:35] *** FROGGS_ is now known as FROGGS

[10:35] <FROGGS> o/

[10:37] <Zoffix> Util, what is that about?

[10:37] <Zoffix> gfldex, yeah, ok, but why are those filenames in that page?

[10:38] <Util> Zoffix: in re: "there gotta be a way to have private methods for use by other classes in my distro that aren't available to the users of my distro"

[10:38] <Zoffix> Ahh

[10:38] <Util> Zoffix: Just woke up

[10:39] *** ChoHag_ joined
[10:39] * Zoffix too

[10:39] <Zoffix> Actually, I'm going back in... 6:40AM

[10:40] *** ChoHag left
[10:40] *** ChoHag_ is now known as ChoHag

[10:49] *** _4d47 joined
[10:49] *** pmurias joined
[10:50] <timotimo> cognominal: actually, p6int is the bigint

[10:52] <jnthn> ...um, no? :) P6int is the REPR of native ints. P6bigint is the REPR of bigints :)

[10:53] <jnthn> In reality you never see a naked object with REPR P6bigint in Perl 6, though; Int has it flattened into a P6opaque.

[10:53] <cognominal> so why 4 kind of *Ints cahed

[10:53] <dalek> snake: eebd456 | (Pawel Murias)++ | src/Snake/Actions.nqp:

[10:53] <dalek> snake: Unbitrot.

[10:53] <dalek> snake: review: https://github.com/arnsholt/snake/commit/eebd456e84

[10:54] <jnthn> cognominal: Cached where, exactly?

[10:54] <timotimo> er, derp.

[10:54] <timotimo> that's because there's BOOTInt and Int, for example

[10:55] <gfldex> Zoffix: those ENV vars are an implementation detail, if you go that deep you might as well show where they come from. In my eyes they should be removed. They are quite long and ack can find them nicely.

[10:58] *** iH2O joined
[10:58] <cognominal> jnthn, https://github.com/MoarVM/MoarVM/blob/9c885bce8f65b969f52d82ef7fda7feb16b464f5/src/core/intcache.c#L7

[10:59] <cognominal> there is 4 "types" of *ints in the int cache

[10:59] <jnthn> Oh, that... It doesn't mean there are 4 types, it just means it can hold up to 4 types

[11:00] <cognominal> ok

[11:00] <jnthn> I don't know why 4 was picked...I think maybe timotimo put the cache in and may remember... :)

[11:00] <jnthn> Certainly NQP's integer type and Perl 6's Int make 2

[11:01] <cognominal> so, I can create my fancy ints and have -1..14 cached

[11:01] <jnthn> I guess some of the allomprphs may end up in there...

[11:02] <cognominal> anyway, probably that discussion probably belongs to #perl6-dev :)

[11:02] <timotimo> anything that we box_i on; do we box_i into our allomorph classes?

[11:02] <jnthn> timotimo: Not sure...we may :)

[11:02] <jnthn> I mean, it'd be a valid way to implement it. :)

[11:03] <cognominal> jnthn++ timotimo++ for the kind answers

[11:03] <timotimo> P6bigint can't hold mixins, so that's not a concern for that cache

[11:04] <dalek> snake: 2f89820 | (Pawel Murias)++ | Makefile:

[11:04] <dalek> snake: Fix Makefile by adding missing dependencies.

[11:04] <dalek> snake: review: https://github.com/arnsholt/snake/commit/2f89820d87

[11:07] <masak> ahoy, #perl6

[11:07] <masak> ooh, a snake commit

[11:08] <masak> arnsholt: I remember I promised-ish to contribute to snake -- what's the status of the project right now?

[11:09] <jnthn> ahoj, masak

[11:09] <masak> ahoĵ

[11:09] <jnthn> .oO( Status: need to badger more people :P )

[11:09] * masak .oO( there's no shroom for more puns )

[11:09] <timotimo> also mushroom some more people

[11:09] <jnthn> I'm sure there's mush room for inprovement :P

[11:09] <jnthn> hah :P

[11:09] <timotimo> %)

[11:10] <masak> damaged minds think alike

[11:10] *** pochi left
[11:13] <iH2O> obviously, all mind damages are alike

[11:14] <hahainternet> what is this? #andyzaltzman? 

[11:15] <iH2O> is the trailing "?" really part of the channels name?

[11:15] <hahainternet> i'd like to claim it's the name of the person, but even andy doesn't have such bombastic punctuation

[11:16] <iH2O> no

[11:17] <masak> for those who missed my blog posting late last night: http://strangelyconsistent.org/blog/train-tracks

[11:18] <iH2O> ive never been good with knots

[11:19] <iH2O> esp those uninvertible

[11:19] <hahainternet> knots are really enjoyable

[11:19] <hahainternet> especially the few you tie with a big inversion

[11:19] <hahainternet> like the figure of eight loop

[11:19] <iH2O> too much shrooming haha

[11:19] <hahainternet> masak: i can't help but think this is scalextric track :)

[11:20] <masak> "scalextric track" -- is that something I should know about? :)

[11:20] <hahainternet> masak: https://2e7fd430838d304f1516-467f5d9f2ca7b7b12f8a116e60ea9c1d.ssl.cf3.rackcdn.com/catalog/product/cache/5/image/9df78eab33525d08d6e5fb8d27136e95/c/1/c1319-scalextric-continental-sports-cars-set-track.jpg

[11:21] <masak> oh, oh no. this is wooden trains, not cars.

[11:21] <hahainternet> yeah i saw your real photo

[11:21] <hahainternet> but you have done an impressively good job of reproducing a scalextric track in your diagrams too

[11:21] <masak> there's no electricity involved. only small magnets keeping the train cars together.

[11:21] <hahainternet> and they have almost exactly the same mechanism, with slightly less 'wiggle'

[11:21] <hahainternet> you get almost exactly the same track layout in the box

[11:21] <hahainternet> and you can produce approximately the same versions you showed

[11:22] *** _4d47 left
[11:22] <hahainternet> so, you didn't even realise it but you built a model for an entirely different system that mostly conforms :)

[11:22] <masak> ah. wiggle, my nemesis.

[11:23] <hahainternet> masak: scalextric tracks attach with two points at the joints, at the far edges, using a simple spring nub that fits into a hole

[11:23] <hahainternet> masak: one thing you haven't accounted for that is possible, is track banking

[11:24] <masak> doesn't come up with these wooden tracks

[11:24] <hahainternet> only at the scale you're working on

[11:24] <masak> but yeah. *shudder*

[11:24] <hahainternet> it requires only torsion, so you can't avoid it :p

[11:24] <hahainternet> i'm impressed by your vector space plot though, not quite sure how you did that, i'm no mathematician

[11:26] <masak> if there's something I can do to help by clarifying, I'd be happy to do so

[11:26] <masak> maybe it'd improve the blog post, too

[11:27] <hahainternet> masak: well you don't label anything about it lol

[11:28] <hahainternet> so, i'm not sure what the numbers represent, piece count?

[11:28] <hahainternet> i'm not sure why there's an irregular grid

[11:28] <hahainternet> i'm not sure why only a minority of marks are unlabelled

[11:28] <masak> those unlabeled are just a single solution at that point

[11:28] *** domidumont joined
[11:29] <masak> each point (x, y) represents a particular displacement -- for example (0, 0) has the 10 exact solutions

[11:29] <hahainternet> oh i see they're number of solutions at that position

[11:29] <masak> aye

[11:29] <masak> that's how you get a total of 380

[11:29] <hahainternet> i'd note that using a 'luggage tag' shape may be a bad choice

[11:29] <hahainternet> and adding a suffix 'x' is common

[11:29] <hahainternet> 10x is many many times clearer than |10|

[11:29] <masak> oh, that's a good suggestion

[11:30] <iH2O> 10x or x10?

[11:30] <hahainternet> are these top down X/Y offsets for the track end masak?

[11:30] <iH2O> arent both confusing with hex?

[11:30] <hahainternet> iH2O: either is fine, 'x' is read as 'times'

[11:30] <hahainternet> so it's '10 times' or 'times 10', either is perfectly fine

[11:30] <hahainternet> hex typically requires a leading 0 also

[11:30] <iH2O> so its 10 in hex notation

[11:30] <hahainternet> 0x10 is, x10 is not

[11:30] <iH2O> which is 15?

[11:31] <iH2O> good, im reassured

[11:31] <hahainternet> brb 2 moments

[11:32] <masak> re irregular grid: because of the 45-degree angles, the constant 1/sqrt(2) creeps into the coordinates

[11:32] <masak> and so any given displacement coordinate is M + N/sqrt(2), M and N integers

[11:32] *** abruanese left
[11:32] <masak> all the thin lines in that diagram represent such M + N/sqrt(2) coordinates

[11:33] <masak> the thicker lines are integral coordinates

[11:33] <iH2O> why does perl6 implement sqrt(complex number), or any complex arithmetic. 99.99% of the folks  will never use that in their lifetime

[11:33] <iH2O> ..

[11:35] <masak> iH2O: that seems an odd complaint to me. are you upset that something is implemented?

[11:35] <iH2O> folks, concentrate on the real stuff

[11:35] *** AlexDaniel joined
[11:35] <iH2O> implement the real stuff like parallel processing

[11:35] <iH2O> i have 4 cores

[11:35] * masak .oO( folks, concentrate on the real plus the imaginary stuff )

[11:35] <iH2O> i need parallel processing, all of it

[11:36] <iH2O> the "i" stuff is for apple

[11:36] <iH2O> not for perl6

[11:36] <masak> iH2O: oh, I get it. you're here to tell people what to spend their time and energy on.

[11:36] <iH2O> just saying...

[11:36] <iH2O> :)

[11:37] <timotimo> you do realize that complex arithmetic is a billion times easier and faster to implement than any kind of multithreaded stuff?

[11:37] <iH2O> im sure it is

[11:37] <gfldex> m: await do start { say "your point is?" }, do start { say "works nicely for me" }

[11:37] <camelia> rakudo-moar 53af02: OUTPUT«your point is?␤works nicely for me␤»

[11:38] * hahainternet returns

[11:38] <hahainternet> masak: it makes much more sense to me now

[11:39] <hahainternet> masak: i feel that the asymmetry of the graph is now a problem though

[11:40] <hahainternet> the centre being (0,0)

[11:40] <hahainternet> i fail to comprehend how the graph should not be a reflection across x=0 or y=0

[11:41] <masak> basically because of the symmetry breaking I'm doing on the tracks

[11:42] <masak> let's say a track is a string like BBLLLLLSSRRRRR

[11:42] <hahainternet> but if your initial track is oriented at a cardinal direction, and all tracks are equally 'wiggly', then the graph should exhibit symmetry regardless

[11:42] <hahainternet> as all Ls and all Rs can simply be swapped

[11:42] <masak> then that track's representative is the lexicographically first among these: the track itself, same track opposite direction, its mirror image, mirror image in the opposite direction

[11:43] <hahainternet> oh, so you're culling potentials before you get to the graph, so selecting for those with x>0?

[11:43] <masak> this symmetry breaking greatly favors tracks that run counter-clockwise. and so you have a lack of symmetry in the graph.

[11:43] <hahainternet> masak: i think that's a problem tbqh

[11:44] <hahainternet> without meaning to tell you how to do your blog

[11:44] <masak> it gives me each solution only once, which I like

[11:44] <masak> that's more important to me than symmetry in the graph :)

[11:44] <hahainternet> it means that your solution count labels are inaccurate though

[11:44] <hahainternet> it means the graph requires orientation you don't denote

[11:44] <masak> but your point is well taken -- because it means the signs of the displacement are quite meaningless

[11:44] <hahainternet> and it makes it generally harder to understand, as you could begin to talk about the symmetry

[11:44] *** Actualeyes joined
[11:44] <hahainternet> without the symmetry, the graph is considerably harder to understand

[11:44] <masak> I could plot it all as just one quadrant instead

[11:44] <hahainternet> (imho)

[11:45] <hahainternet> masak: that, and perhaps some sort of tesselation, voronoi etc, would make a lot of sense to me

[11:45] <hahainternet> a terrain map would be preferable

[11:45] <hahainternet> where Z is joining force

[11:45] <hahainternet> or 'difficulty' of joining

[11:45] <hahainternet> but the 'islands of connectivity' to butcher a phrase would be interesting to see

[11:45] <masak> I enjoy all your ideas

[11:46] <iH2O> haha is genial

[11:46] <masak> yeah, there's quite a fair bit to be done in order to fully understand all the non-exact solutions

[11:46] <hahainternet> iH2O: i'm mostly useless, so when i can give somewhat valid criticism i'm super happy

[11:51] *** Actualeyes left
[11:52] <iH2O> you'll write the 1st program with real *artificial intelligence*, in perl6

[11:53] <hahainternet> i think "artificial intelligence" is a term we should stop using now, because it's quite offensive, "machine intelligence" is the PC term :)

[11:53] <iH2O> none exists at this time

[11:54] *** domidumont left
[11:54] <iH2O> they havent even solved the Turing test, theyre clueless

[11:54] <hahainternet> iH2O: the logs of this channel aren't going away though

[11:54] <iH2O> why? they have historical significance i think

[11:54] <hahainternet> so when we create a viable machine intelligence, it will review history, and see us talking about it derisively, as only 'artificial'

[11:54] *** domidumont joined
[11:55] <hahainternet> but a machine intelligence is no more artificial than i am :)

[11:55] <iH2O> they wont be any real machine intelligence or artificial intelligence before the year 2100

[11:55] <iH2O> *there

[11:55] <hahainternet> that's one hell of a claim iH2O!

[11:56] <iH2O> why? theyre totally clueless about solving the Turing test

[11:56] <iH2O> the hard problem of intelligence

[11:56] <iH2O> theyve no clue

[11:57] <iH2O> z....

[11:57] <dalek> doc: 3f9f9aa | (Tom Browder)++ | htmlify.p6:

[11:57] <dalek> doc: sort programs files by file name for desired order

[11:57] <dalek> doc: review: https://github.com/perl6/doc/commit/3f9f9aac4e

[11:57] <dalek> doc: 3c5ffe4 | (Tom Browder)++ | htmlify.p6:

[11:57] <dalek> doc: Merge pull request #605 from tbrowder/progs-index

[11:57] <dalek> doc: 

[11:57] <dalek> doc: sort programs files by file name for desired order

[11:57] <dalek> doc: review: https://github.com/perl6/doc/commit/3c5ffe4c7c

[11:57] <hahainternet> iH2O: i believe the topic is significantly more complex, i am not sure that free will exists, and i believe that building the mechanisms of the brain will cause intelligence to arise as emergent behaviour

[11:57] <gfldex> you define artificial intelligence with "human like". That's quite narrow (in more then one sense).

[11:58] <masak> also, there's a lot more to machine intelligence than the Turing test

[11:58] <iH2O> haha, the human brain is a kludge loaded with cognitive biases/dissoances

[11:58] <iH2O> you dont want to replicate that

[11:58] *** brrt joined
[11:58] <iH2O> what you want is clean, high level knowledge processing

[11:59] <hahainternet> iH2O: it's not clear such a thing exists

[11:59] <iH2O> AI papers do their best to figure it, i read them once in a while

[11:59] <brrt> i'm fairly sure it doesn't exist

[11:59] <yoleaux> 8 Jun 2016 09:53Z <Ven> brrt: interesting LuaJIT talk by one of the current DartVM engineers: http://mrale.ph/talks/vmss16

[11:59] <brrt> .tell Ven thanks

[11:59] <yoleaux> brrt: I'll pass your message to Ven.

[11:59] <hahainternet> brrt: which ?:)

[12:00] <brrt> 'clean high-level knowledge processing'

[12:00] <iH2O> i glad you approve brrt

[12:00] <iH2O> im

[12:00] <brrt> well, let me phrase my complaint as accurately as i can

[12:01] <brrt> what we call 'intelligence' is nothing more than a vague collective idea of 'what autonomous living organisms do to control the circumstances of their lives'

[12:01] <hahainternet> one thing that amuses me, is that when scifi shows portray future computers, they're almost always sleek electronic / mechanical devices, but the most advanced computers we're aware of are all completely organic

[12:01] <iH2O> i think there is also a transcendent side to it

[12:02] <iH2O> besides what you mention

[12:02] <brrt> we, as well as most of the kingdom of animalia, have hardwired processing facilities for several tasks

[12:02] <brrt> iH20: I think there isn't, that's my point

[12:02] <iH2O> O_O

[12:02] <iH2O> we're not fancy automata

[12:02] <hahainternet> i'm looking forward to my PC in 60 years, i'll feed it and myself with a glass of soylent each morning :)

[12:02] <iH2O> we're transcendent

[12:02] <brrt> if you are willing to give up that idea, then all of 'intelligence' etc becomes part of the regular world, the physical world

[12:02] <hahainternet> iH2O: i disagree

[12:03] <hahainternet> we're nothing but complex simultaneous modelling computers that very quickly notice differences with our models and contain a primitive high level reasoning facility to determine the cause of these differences

[12:04] <brrt> if you're willing to give up transcendence, then conciousness becomes explicable

[12:04] <iH2O> brrt: we can recognize ourselves in the mirror, which is already more than what you suggest

[12:04] <iH2O> there is a "meta" part in us

[12:04] <hahainternet> iH2O: that's just a level of cognizance, we're social animals and so it's practically required

[12:04] <hahainternet> there's no evidence of a meta part in us

[12:04] <hahainternet> in fact, the opposite is true

[12:04] <iH2O> tsk tsk

[12:04] <hahainternet> by studying your brain in a PET machine

[12:04] <hahainternet> i can determine your response to yes/no questions

[12:04] <hahainternet> approximately 2 seconds before you are aware of making the decision

[12:05] <brrt> lots of animals can recognize themselves in a mirror

[12:05] <iH2O> only a few

[12:05] <hahainternet> very few

[12:05] <iH2O> very few

[12:05] <hahainternet> three or four total

[12:05] <iH2O> yes

[12:05] <brrt> lots of animals which can't are not biased on visual inuts

[12:05] <iH2O> elephants, crows

[12:05] <brrt> lots of birds can

[12:05] <hahainternet> some apes

[12:05] <iH2O> which indicates that this ability is "special", beyond ordinary knowledge processing

[12:06] <hahainternet> iH2O: it just shows specialisation

[12:06] <hahainternet> iH2O: babies can, for example, recognise facial differences between members of non human species

[12:06] <hahainternet> but by the time you are 2, you lose this ability

[12:06] <brrt> no, i disagree fully with the first premise

[12:06] <iH2O> hmm

[12:07] <brrt> recognising yourself in the mirror is a specific instance of recognising peers in the mirror

[12:07] <iH2O> absolutely not

[12:07] <brrt> this is only relevant for social animals which operate visually

[12:07] <iH2O> its more

[12:07] <brrt> yes, yes it is

[12:07] <hahainternet> indeed, but it requires a certain level of abstract thought, but this is likely built off a physical mechanism, not a transcendental 'meta' mechanism

[12:08] <iH2O> lol

[12:08] <hahainternet> there's an organisation of cells in our brain that allows us to reference images in a mirror vs tagged sensory data on 'ourselves'

[12:08] <iH2O> this is a high level ability. you suggest it is low level

[12:08] <brrt> no

[12:09] *** Actualeyes joined
[12:09] <iH2O> s/no/yes

[12:09] <hahainternet> iH2O: what i'm saying is, what we see as 'high level' is just emergent behaviour from a brain very very similar to all others

[12:09] <FROGGS> :D

[12:09] <hahainternet> the difference between humans and dogs for example, will be far far smaller than we'd be comfortable with

[12:09] <hahainternet> imagine it in code, a language without $self and a language with it

[12:10] <hahainternet> you can accomplish many of the same things regardless

[12:10] <brrt> i reject the notion that there is such a thing as high and low level

[12:10] <hahainternet> the mechanisms don't even change very much

[12:10] <hahainternet> brrt: in the brain, or conceptually?

[12:10] <hahainternet> because conceptually i don't think you've an argument to make

[12:10] <brrt> in the brain

[12:10] <hahainternet> brrt: well we have actual evidence of these high and low level processes

[12:10] <brrt> i'm not able to continue the discussion at this point

[12:10] <brrt> see you later :-)

[12:11] <hahainternet> ciao

[12:11] *** huggable left
[12:12] *** huggable joined
[12:12] *** brrt left
[12:12] <hahainternet> anyhow, my favourite assertion i like to make is that of organic computers

[12:12] <hahainternet> many people have a scifi, startrek view of the future

[12:12] <hahainternet> where advanced medicine is tiny mechanical robots injected into your bloodstream

[12:13] <hahainternet> but in reality we know how effective programmed biology is

[12:13] <hahainternet> so when people see the future as VR goggles they strap on

[12:13] <hahainternet> i see it as a squishy lump of meat you get injected

[12:14] * masak .oO( that's all -- enjoy your lunch! )

[12:14] <hahainternet> :D

[12:14] <hahainternet> there's no good reason to think that the future of computers will be anything but biological though

[12:14] <hahainternet> in fact, you can argue it might not even be possible to make a brain without biology

[12:14] <hahainternet> it may be that fundamentally, non biological machine intelligences are not possible

[12:15] <iH2O> intelligence has some *magic*

[12:15] <hahainternet> [citation-needed] :p

[12:15] <iH2O> we gotta to inject that into machines

[12:17] <masak> I think describing it as "magic" is selling intelligence short

[12:18] <hahainternet> i actually think it's doing the opposite, hyping it up as something notable

[12:20] <hahainternet> my view is this, there's no evidence for any mechanism by which 'free will' can occur, without the concept of free will, intelligence is just rapid environmental modelling and historical correlation to find a best course

[12:20] <hahainternet> and that is completely describable as a computable process right now, we just don't have the processing volume to test it

[12:20] <hahainternet> and if that is the case, 'intelligence' is an illusion, our deluded perception of a continuous modelling process we don't even have access to

[12:21] <hahainternet> our decisions bubble up from this mechanism and we, the deluded people living in our own brains, grasp on them as our own

[12:22] <cognominal> this thread is interesting but does it belong to #perl6? 

[12:22] *** _mg_ joined
[12:23] <hahainternet> cognominal: probably not, but it was quiet, feel free to get us on topic :)

[12:23] <AlexDaniel> cognominal: well, if we're planning to change the world with perl 6, then… maybe? :D

[12:23] <iH2O> cognominal: #AI is the quietest room on IRC, nothing ever happens there :(

[12:23] *** telex left
[12:23] <iH2O> i usually go there when i need a nap z...

[12:24] <masak> I don't like the tendency to say "we figured out all the constituent parts, so X is an illusion"

[12:24] *** telex joined
[12:24] <masak> you can stop before the comma and things are still just as nice

[12:24] <masak> and it leaves you with one more term that you can use and that people will understand

[12:25] <hahainternet> masak: i don't have a problem with the term, i'm just pointing out how 'free will' is the part we find the biggest concern

[12:25] <hahainternet> but there's literally no evidence for it

[12:25] <hahainternet> and if we look at a person without assuming free will, the process of their brain is thoroughly understandable, and nothing but computing technology prohibits us recreating it

[12:26] <hahainternet> when we do that, we will produce the first Machine Intelligence (is my contention)

[12:27] <masak> I'm fine with leaving "free will" completely aside. I'm not sure what a conclusion in the free will debate would even look like.

[12:27] <masak> "yes, we have free will!" -- "oh, great. I'll use mine to grab a cup of coffee."

[12:27] <masak> "no, we don't have free will!" -- "that's too bad. I'll go get a cup of coffee."

[12:28] <hahainternet> from my perspective, the conclusion would be linking of intelligence to some underlying physics mechanism, quantum indeterminacy being the obvious choice

[12:28] <pmurias> hahainternet: "nothing but computing technology", doesn't that apply to a lot of the far future scifi things?

[12:28] <hahainternet> my argument is that free will behaves as potentiation of various options

[12:28] <hahainternet> pmurias: not at all, transporters are fundamentally impossible

[12:28] <hahainternet> shields, phasers, all these sorts of things are likely impossible

[12:28] <hahainternet> machine intelligences though? we'll be swimming in them before long

[12:29] <hahainternet> oh, and another impossible thing i'm sick of people bringing up, holographic displays

[12:29] <hahainternet> get over it hollywood, nobody but a designer would ever want one, and augmented reality is a better solution to that

[12:29] <cognominal> Some strong deniers of free will have a strong will to prove their point 

[12:29] <hahainternet> i should really blog about light field displays in order that i can just link that

[12:30] <hahainternet> cognominal: i enjoyed the irony in that :)

[12:30] <masak> no irony. it's a strong non-free will, duh

[12:30] <hahainternet> in fact

[12:30] <hahainternet> i just realised

[12:30] <hahainternet> a VR headset is perfect to reproduce a video of a light field display

[12:30] <hahainternet> wonder if i can do the same with a phone's accel/gyro combo

[12:31] <FROGGS> why not a more direct video "projection"? like, transmitting data directly into your head?

[12:31] <hahainternet> FROGGS: nothing wrong with that, and that will come fairly soon, i just hate 'holographic displays' and they're everywhere at the moment

[12:32] <FROGGS> I mean, you may also provide a solution for blind ppl

[12:32] <hahainternet> endless people fawning over something few would ever want

[12:32] <cognominal> So strong deniers of free will are just predestined to be,,, to get to another hot subject, predestination

[12:32] <FROGGS> hahainternet: still, jarvis is awesome :o)

[12:32] <hahainternet> what they actually would want is a 'light field display', but i've seen virtually no talk about them

[12:32] <hahainternet> FROGGS: indeed the most impressive technology in those movies by a very long way

[12:32] <hahainternet> cognominal: indeed

[12:33] <FROGGS> I'd buy a voice-only jarvis system too, no doubt

[12:34] <pmurias> hahainternet: the stuff in movies is supposed to look cool not actually be usefull/possible

[12:34] <hahainternet> pmurias: i agree, but the meme has made its way into games and 'serious' discussion

[12:34] <FROGGS> remember that joystick that riker used in star trek 10? >.<

[12:35] <hahainternet> every futuristic setting now includes endless holographic displays

[12:35] <hahainternet> drives me nuts! :D

[12:35] <masak> cognominal: "predestined to be dree-will deniers" reminds me of the saying "how magnanimous of God to even create atheists"

[12:36] <pmurias> masak: re blog post the rail tracks renderings look cool

[12:37] <hahainternet> hmm i've realised i'm not very clear on this point, i assume everyone here gets what a 'light field display' is?

[12:37] <cognominal> masak, yea

[12:38] <iH2O> i think you can do away with predestination if you assume that each person has his own individual timeline

[12:38] <FROGGS> hahainternet: probably not

[12:38] <cognominal> and kind of mischevious creating believers of one true god, but not the same.

[12:38] <masak> pmurias: thanks. countless hours wasted on drawing them :P

[12:39] <hahainternet> FROGGS: a display with control over the angle of emission of photons as well as the wavelength, this allows it to display depth

[12:39] <masak> pmurias: made slightly worse by the fact that little Noa helpfully rebooted my computer in such a way that I lost my first attempt.

[12:39] <hahainternet> it would appear as a virtual world extending into your screen with 'real' depth

[12:39] <FROGGS> hahainternet: inst that what the star trek holodecks are about?

[12:40] <hahainternet> FROGGS: to an extent

[12:40] <hahainternet> they also can magically cause those photons to be emitted from a 'forcefield' created in free air

[12:40] <hahainternet> which is a bit over the top

[12:40] <hahainternet> but simply imagine an FPS game, where you can move your head left and right to see left and right

[12:40] <hahainternet> that is a plausible future of displays within the next decade

[12:41] <hahainternet> holographic displays on the other hand would be translucent non physical nonsense

[12:41] <FROGGS> ahh, I see

[12:41] <iH2O> do you at least have a 3D LED monitor for now, ahah

[12:41] <hahainternet> you can easily imagine a reverse lytro camera, if you understand how they work

[12:42] <hahainternet> in reality (and ironically) the mechanism to create these displays will likely be 'holographic'

[12:42] *** colomon joined
[12:42] <hahainternet> as in, it will use diffraction gratings rather than micro lenslet arrays

[12:42] <iH2O> progress never stops

[12:42] <moritz> masak++ # blog

[12:43] <hahainternet> yeah sorry for the big diversion, masak despite my criticisms, your blog is excellent :)

[12:43] <masak> I wish I could blog more

[12:43] <moritz> next up: ball paths :-)

[12:43] <masak> moritz: aren't those just parabolas?

[12:44] <hahainternet> masak: perhaps you answered it in the blog and i missed it, how did you model the joint flexibility?

[12:44] <pmurias> hahainternet: I can imagine things that "look like" holographic displays from scifi/games being used in augumented reality so that things aren't real can be distinguished

[12:44] <masak> hahainternet: I didn't -- I skipped that bit

[12:45] <masak> hahainternet: instead of modeling wiggle, I just count the eventual displacement

[12:45] <hahainternet> masak: right ok, i see now that the graph includes impossible ones

[12:45] <hahainternet> my mistake

[12:45] <moritz> masak: either my dictionay mistranslated, or the term is completely ambiguous

[12:45] <masak> which term?

[12:45] <hahainternet> pmurias: that'd be a funny one, but i am mostly just against the meme, i'd rather get people talking about light field displays, as they make so much more sense

[12:46] <moritz> masak: ball path; I meant something like this: http://www.meinbaukasten.de/media/catalog/product/cache/1/image/1000x1000/040ec09b1e35df139433887a97daa66f/k/a/kaden-kugelbahn-11-traversen.jpg

[12:46] <masak> moritz: ooh!

[12:46] <masak> er, I mean... "noooooooo!"

[12:46] <masak> :P

[12:46] <hahainternet> pmurias: imho we're likely to see glove type AR/VR interfaces within a decade or so, so that's a scenario where a 'hologram' would be useful, but it wouldn't be a hologram so, it's a bad term

[12:46] <masak> I just just free of my last obsession!

[12:46] <hahainternet> those actually seem very straightforward

[12:47] <hahainternet> you can probably get away with a tiny bit of 'wiggle' and a 3d vector sum?

[12:47] <hahainternet> i suppose you have the problem of calculating entry energy

[12:47] <hahainternet> but that would be true of masak's trains, so you can just assume constant speed

[12:49] <masak> moritz: those look lovely.

[12:50] <hahainternet> masak: are you aware of 'marble run' toys? :D

[12:50] <hahainternet> model this: https://www.youtube.com/watch?v=UxcJfaoK5xg

[12:50] <jast> here you have to keep track of momentum. the train doesn't need to move on its own, but the marbles do, given an initial impulse

[12:51] <masak> I'm not modeling the train at all. just focusing on the tracks and the possible ways to build them.

[12:51] <hahainternet> jast: the problem masak was tackling wasn't 'ball paths' as such, but the potential arrangements in space

[12:51] <hahainternet> ^^

[12:51] <masak> basically a combinatorics problem.

[12:51] <jast> sure, I read that.

[12:51] <jast> my point is a train track in which trains don't have enough momentum is still useful, a marble slide not nearly as much

[12:51] <jast> so the same simulation is quite a bit less interesting for the slide

[12:51] <hahainternet> you can easily simplify the modelling though

[12:52] <hahainternet> there's only one unrestricted curve

[12:52] <hahainternet> so you can calculate the maximum velocity permissable

[12:52] <hahainternet> and then model at that

[12:52] *** _mg_ left
[12:52] <hahainternet> as there's no restrictions on entry energy, and as long as it's not a significant mach fraction it's good enough :)

[12:53] *** finanalyst joined
[12:53] <hahainternet> i suppose if you allow balls to fall off instead of using the z axis blocks that adds a significant challenge, but i'm just saying there are a lot of simplifying assumptions possible

[12:53] <jast> sure

[12:53] <jast> that marble machine is crazy btw

[12:54] <hahainternet> it is, i've always wanted to build some big rube goldberg machine

[12:54] <jast> so, a computer basically? ;)

[12:55] <hahainternet> no no, just a ludicrously overcomplicated machine for a simple job

[12:55] <hahainternet> like this marble machine could be replaced by a single straight pipe

[12:55] <jast> isn't that what I just said? :P

[12:55] <hahainternet> i suppose so :)

[12:55] <hahainternet> being able to model that marble machine correctly would be such an unbelievably huge job people rarely comprehend it

[12:55] <jast> not really something I'd be interested in, but it's definitely fun to see the result

[12:56] <hahainternet> you'd require a datacentre of computers for a very very long time

[12:56] <jast> depends on what level of accuracy you're after

[12:56] <hahainternet> velocities are easily high enough that rigid body simulation would be woefully inadequate

[12:56] <hahainternet> jast: nah not in any meaningful way

[12:56] <hahainternet> it's into the range where damage is being done constantly and energy is being lost significantly in heating

[12:56] <hahainternet> so you're basically screwed from step #1

[12:56] *** lizmat left
[12:57] <jast> well, there's always toy-level simulation

[12:57] <jast> with cheating and such

[12:57] <iH2O> haha: do you have a PhD in cybernetics?

[12:57] <hahainternet> i am completely unqualified

[12:57] <hahainternet> by US standards, and new UK standards, i didn't finish high school

[12:58] <hahainternet> if i'm talking authoritatively, i apologise, everything i've said is my opinion

[12:58] <jast> qualifications on paper = boring

[12:58] <iH2O> = theoretical

[12:59] <masak> until you're applying for a job

[12:59] <jast> I have a BSc in $field and know just enough to know how much I don't know

[12:59] <jast> (and to know, a bit later, that I didn't actually want to finish the Master's programme)

[12:59] <iH2O> jast = just enough

[12:59] *** kaare_ left
[12:59] <hahainternet> i wish i had gone to university because there's a lot of things i don't understand and would like to

[13:00] <hahainternet> but i'm in my early 30s, so i still have time to learn things

[13:00] <jast> there's always self-study, and talking to people who know stuff

[13:00] <jast> most of the stuff I was "taught" at university I actually learned from the internet

[13:00] <iH2O> from wikipedia, right

[13:00] <hahainternet> one of my favourite quotes is "knowlege doesn't weigh anything" .. it's factually incorrect but i take its meaning to heart

[13:00] <jast> the most valuable thing you get from university is a learning path of sorts

[13:00] <jast> and peers

[13:01] <jast> well, how would you measure the weight of knowledge? ;)

[13:01] <hahainternet> carefully :)

[13:01] <jast> good answer

[13:01] <hahainternet> it's from Ray Mears, a survival guide, so what he's saying is "knowledge is free"

[13:02] <iH2O> knowledge is made of holes in punch cards

[13:02] <hahainternet> it has no downside

[13:02] <jast> human functioning is actually my other big field of interest, and knowledge is an interesting topic in that context

[13:02] *** pmurias left
[13:02] <iH2O> holes arent heavy

[13:02] <jast> knowledge does have downsides

[13:03] <hahainternet> does it though?

[13:03] <iH2O> holes have downsides

[13:03] <jast> yes

[13:03] <jast> aside from the whole 'ignorance is bliss' thing

[13:03] <iH2O> lol

[13:03] <jast> (and there's some truth to that, too)

[13:04] <hahainternet> it's a difficult argument to make, because the ignorant don't realise their bliss

[13:04] <jast> it's an easy argument to make for someone who thinks they know too much :}

[13:04] <jast> anyway. knowledge, if you think of it as more than just being able to recite facts, involves a more or less intuitive understanding of at least some elements of it

[13:04] <jast> for instance, if you don't know what differentation is all about, reasoning about it doesn't become easier

[13:04] <hahainternet> yeah the term is quite loosely defined, but the general principle is one i think is valuable to apply

[13:05] <hahainternet> 'you might as well learn, because it won't do any harm'

[13:05] <jast> and intution takes time to build and, presumably, occupies a rough equivalent to space

[13:05] <hahainternet> actually that's an interesting one

[13:06] <hahainternet> because my personal view is that the brain is a series of constant modelling processes

[13:06] <jast> I don't think equating human memory to disk space is a reasonable comparison, but still there are physical limits

[13:06] <hahainternet> and it's arguable that a lot of 'memory' could be refinements of those models

[13:06] <hahainternet> but it doesn't follow per se that a model refinement is an increase in complexity

[13:06] <hahainternet> so there's an argument to be made that the brain of someone who has a vast corpus of knowledge and understanding may in fact be significantly simpler than the brain of someone without this

[13:07] <jast> the more intuition you need (= more fields of knowledge), the more complexity there is in tuning your cognitive structure to fit them all together

[13:07] <jast> simply put, sometimes understanding one thing makes it harder to understand some other thing

[13:07] <hahainternet> it's not clear to me that that is inherently true

[13:08] <jast> I don't want to put this up as a law, just as a tendency

[13:08] <hahainternet> i'll give a brief example to try and illustrate my thoughts

[13:08] <masak> sounds a bit like "the curse of knowledge", which is a thing

[13:08] <hahainternet> take a physically impossible mechanism that is plausible on its face

[13:08] <jast> I mean, often there is an equivalent payoff for getting a unified concept of two different fields

[13:08] <hahainternet> i have this belief i find it hard to shake, and i know it's impossible, so if people don't mind the diversion i'll illustrate it

[13:09] <hahainternet> imagine a 1 mile long flat rectangular beam

[13:09] <hahainternet> atop that at one side, sit an electrical generator shaped as a cylinder, as it rolls down the beam, it spins and thus generates electricity

[13:09] <hahainternet> now lift one end of the beam up by a microscopic amount, sufficient for the generator to begin rolling, a perfect cylinder will begin rolling immediately

[13:09] *** lizmat joined
[13:09] *** pmurias joined
[13:10] <jast> (not taking into account friction)

[13:10] <hahainternet> when it gets to the other end, drop the end you started with by 2x the distance

[13:10] <hahainternet> allow it to roll back

[13:10] <hahainternet> now, arbitrarily extend the length of the plate, in theory increasing the amount of electricity extracted

[13:10] <hahainternet> now, this is clearly wrong, and i know it's wrong because i know enough to look at the sources of energy input, and i know that E=mgh

[13:10] *** finanalyst left
[13:11] <hahainternet> but it's plausible on its face, and someone without the understanding of that equation may have to go through an extensive and very complex process to find out it is false

[13:11] <yanmc> guys, I can't get p6doc to work

[13:11] <hahainternet> ok back on topic :D

[13:11] <yanmc> haha, don't mind me :)

[13:11] <jast> what does it do instead of working?

[13:11] <moritz> hahainternet: you missed a critical step: the claim (that is wrong)

[13:12] <yanmc> apparently its path is empty?

[13:12] <yanmc> Cannot locate Type::Str in any of the following paths:

[13:12] <hahainternet> moritz: that you can generate greater electricity output than the cost of raising and lowering the track to cause the generator to roll

[13:12] <pmurias> why is the hexint rule is HLL::Grammar so weird?

[13:12] <moritz> hahainternet: ah

[13:12] <moritz> yanmc: which version of rakudo are your using?

[13:12] *** Emeric joined
[13:13] <yanmc> rakudobrew version tells me moar-nom

[13:13] <jast> hahainternet: okay, but that doesn't say anything about the complexity of the cognitive structure involved, only about the complexity of the overall process to determine the correct answer

[13:13] <Emeric> is it possible to build a .exe from a perl6 script ?

[13:13] <yanmc> perl6 says This is Rakudo version 2016.05-179-gf192415 built on MoarVM version 2016.05-37-ga126e0f

[13:13] *** toddr joined
[13:13] <yanmc> implementing Perl 6.c.

[13:13] <hahainternet> jast: indeed, but it's simply an illustration of how more knowledge can lead to a simpler process

[13:14] <jast> I don't disagree with that

[13:14] <hahainternet> i don't pretend to have any facts about how the brain actually works :D

[13:14] <toddr> FUI in Damian's Class right now. The link to download for OSX on http://rakudo.org/how-to-get-rakudo/ is bad.

[13:14] <jast> nobody knows how the brain works, so that's good :)

[13:15] <moritz> yanmc: and did you install p6doc?

[13:15] <yanmc> moritz: I cloned the repo from github?

[13:16] <jast> it's clear in this case that the knowledge helps. thing is, there was some mental effort involved in getting to a point where you can recognize that the formula applies to this, and what it means for the claim. the interesting question is whether that effort depends only on the complexity of the subject... clearly not. some people find some topics easier to grasp than others.

[13:17] <yanmc> and added the executable to my path, but same thing happens regardless of how I call it

[13:17] <jast> so, there are several forces in effect: more knowledge can have a holistic effect to speed up future learning, but we have some kinds of physical limitations and some concepts are contradictory. so where are the trade-offs? no idea :)

[13:17] <moritz> yanmc: you might need to install it ("panda install .") for it find the doc files; but I'm kinda out of the loop wrt the docs

[13:18] <yanmc> ok, will try

[13:18] *** pmurias left
[13:18] <yanmc> in the mean while, a related issue with trying to build the html version of the docs

[13:19] <yanmc> it generates the graph images correctly, i.e. like type-graph-Int.png, but it looks for type-graph-int.png (lowercase) and errors out at that point

[13:20] <moritz> huh, both int and Int exist

[13:20] <moritz> yanmc: what platform are you on?

[13:21] <yanmc> ubuntu linux

[13:22] <yanmc> moritz: yeah, very strange, the file system should have no problem with that

[13:22] *** pmurias joined
[13:22] <moritz> also, the build for doc.perl6.org runs on a Debian

[13:22] <moritz> so very similar

[13:22] <moritz> though probably on an older rakudo version

[13:23] <moritz> yes, on 2016.04

[13:23] *** dha joined
[13:23] <yanmc> moritz: first the folder was contained in my Dropbox and I got case conflicts on these 5 files

[13:24] <jast> some unusual filesystems can mess up case in filenames

[13:24] <yanmc> scratch that, 3, type-graph-Int.png type-graph-Int.svg Operators.X.html

[13:24] <moritz> yanmc: oh, you might rerun htmlify.p6 with --type-graph to rerun them

[13:25] <moritz> *need to

[13:26] <iH2O> équit

[13:26] *** iH2O left
[13:26] * masak .oO( équit -- I'm outta hére )

[13:27] *** jameslenz left
[13:28] <yanmc> oh boy, somehow I still had it installed in both locations, running it now, but don't expect that problem again

[13:29] <AlexDaniel> .seen timeless

[13:29] <yoleaux> I saw timeless 16 Jun 2016 03:33Z in #perl6: <timeless> this is what i was using to test a change like what you pushed https://www.irccloud.com/pastebin/TYiCATmm/

[13:30] <dha> Hm. Damian is making Perl 6 look pretty cool. Also scary.

[13:30] <dha> :-)

[13:30] <gfldex> where is he doing that?

[13:31] <dha> YAPC::NA

[13:32] <lizmat>  http://www.yapcna.org/yn2016/event/1858

[13:33] *** BenGoldberg joined
[13:36] <dalek> snake: 36e554f | (Pawel Murias)++ | / (2 files):

[13:36] <dalek> snake: Use python rules for integer literals instead of NQP ones.

[13:36] <dalek> snake: review: https://github.com/arnsholt/snake/commit/36e554f533

[13:37] * TimToady --> tpc hotel

[13:37] <yanmc> moritz: panda install worked!

[13:38] <yanmc> I don't know if this is correct and the path is hardcoded, but p6doc apparently looks for the pods in ~/.perl6/doc

[13:38] <yanmc> maybe that information was missing from https://github.com/perl6/doc/blob/master/README.md

[13:41] <dalek> snake: ec2bb60 | (Pawel Murias)++ | src/Snake/Grammar.nqp:

[13:41] <dalek> snake: Remove TODO comment, it's python 3 not python 2 that we are implementing.

[13:41] <dalek> snake: review: https://github.com/arnsholt/snake/commit/ec2bb601fb

[13:45] <Woodi> hahainternet: about holo displays :)  such strong emotion... but it's just augmented flowerpot vs your augmented glasses, both can be tools :)  also you looks you prefer short things that can be available in short term vs sci-fi... it's like don't liking poetry, it's for communicating idea but usually no immediate technical application

[13:45] <dalek> doc: 114bd1a | (Zoffix Znet)++ | doc/Programs/00-running.pod:

[13:45] <dalek> doc: Fix unsupported POD directives

[13:45] <dalek> doc: review: https://github.com/perl6/doc/commit/114bd1abd4

[13:45] <yanmc> where do panda installed packages go on the filesystem?

[13:46] <dalek> doc: bf6b0ee | (Zoffix Znet)++ | htmlify.p6:

[13:46] <dalek> doc: Move Programs to end of menu

[13:46] <dalek> doc: review: https://github.com/perl6/doc/commit/bf6b0eee59

[13:46] <moritz> yanmc: into $install/share/perl6/site I think

[13:47] *** pmurias left
[13:52] <yanmc> moritz: oh, but panda is really the only way to interact with that? (no renaming {,.disabled} which is not necessarily a bad thing)

[13:54] *** pmurias joined
[13:56] <pmurias> masak: re state of snake, looking at the commit log arnsholt hasn't worked on it recently

[13:56] <dha> Damian: "There's really no difference between a variable and a subroutine" I bet the audience is loving that. :-)

[13:56] <Woodi> dha: where you hear/saw that ?

[13:57] <dha> Damian's giving his Perl 6 multi-paradigm course at YAPC::NA

[13:57] <dha> As usual, he's occasionally trying to scare us. :-)

[13:57] *** toddr left
[13:58] <Woodi> dha: Perl6 is scary by itself ;)

[13:58] *** lizmat left
[14:01] *** toddr joined
[14:01] <grondilu> off topic:  Blue Origin's launch livestream:  https://www.youtube.com/watch?v=EI-tGVFg7PU

[14:03] <yanmc> oh "earlier today", would be cool if it could be rolled out to launch pad and be launched in 30' time

[14:03] * Zoffix looks

[14:03] * Zoffix sees Russians dissing the rocket why others compare to a penis

[14:04] *** toddr left
[14:04] <AlexDaniel> Zoffix: have you figured out the thing with \-- ?

[14:05] <Zoffix> AlexDaniel, are you talking about Programs POD? I've not even attempted

[14:05] <AlexDaniel> yea

[14:05] *** toddr joined
[14:06] <AlexDaniel> tbrowder: hi! By the way, why 00-running? Why not have a beautiful link instead?

[14:06] <AlexDaniel> programs/running – looks fine!

[14:07] *** dha left
[14:08] *** kaare_ joined
[14:09] *** sufrostico joined
[14:09] <pmurias> (pythons tab/space mixing rule)-- # had to look at the interpreter source to understand how it works

[14:11] *** toddr left
[14:12] <mst> pmurias: hrm? all the python code I see uses 4 space indent

[14:14] *** jjido joined
[14:16] *** lizmat joined
[14:16] *** toddr joined
[14:18] *** dha joined
[14:18] *** jjido left
[14:30] *** kurahaupo joined
[14:32] <pmurias> mst: that's the all way all the vaguely sane people indent Python code ;)

[14:32] <stevieb> pep8 states 4-space tabs, and that's all I've ever seen: https://www.python.org/dev/peps/pep-0008/#indentation

[14:32] <mst> pmurias: which is why, obviously, I end up using 2 space

[14:32] <mst> being confused for vaguely sane would not help my life

[14:35] <pmurias> mst: the Python tokenizer both treats the tabs as indenting up to a multiple of 8 and then checks that things don't change when treating tabs as having the size of a single space

[14:36] <mst> oh yow

[14:37] <pmurias> had to look up the rule so that the Python on QAST (aka snake) has the same semantics

[14:37] <pmurias> afk&

[14:43] *** DarthGandalf joined
[14:44] *** adu joined
[14:44] *** zakharyas joined
[14:50] *** khw joined
[14:55] *** rgrinberg joined
[14:56] <rjbs> Huh, I thought Damian was @thoughtstream on Twitter.  Seems not.

[15:00] <dha> I'm not sure he's actually on twitter.

[15:00] <cognominal> currently, is there any explicit types that does not fit in a register ? Meaning you are obliged to declare the boxed equivalent, say Buf instead of buf

[15:04] <BenGoldberg> What are you calling a type?

[15:05] <BenGoldberg> m: my rat $x = 1.2;

[15:05] <cognominal> related to the previous question. Is there any $v for which $v.REPR is not P6Opaque

[15:05] <camelia> rakudo-moar 53af02: OUTPUT«5===SORRY!5===␤Type 'rat' is not declared. Did you mean 'Rat'?␤at <tmp>:1␤------> 3my rat7⏏5 $x = 1.2;␤Malformed my␤at <tmp>:1␤------> 3my7⏏5 rat $x = 1.2;␤␤»

[15:05] <cognominal> m: say rat.REPR

[15:05] <camelia> rakudo-moar 53af02: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    rat used at line 1␤␤»

[15:05] <cognominal> oops

[15:05] <BenGoldberg> m: say int.REPR

[15:05] <camelia> rakudo-moar 53af02: OUTPUT«P6int␤»

[15:05] <BenGoldberg> m: say num.REPR

[15:05] <camelia> rakudo-moar 53af02: OUTPUT«P6num␤»

[15:06] <BenGoldberg> m: say Num.REPR

[15:06] <camelia> rakudo-moar 53af02: OUTPUT«P6opaque␤»

[15:06] <BenGoldberg> m: say Mu.REPR

[15:06] <camelia> rakudo-moar 53af02: OUTPUT«P6opaque␤»

[15:06] <cognominal> ok

[15:06] <cognominal> why not rat.REPR ?

[15:07] <BenGoldberg> Because there is no native rat.

[15:07] <cognominal> S02 says rat is native

[15:07] <lizmat> it got implemented differently  :-)

[15:07] <BenGoldberg> std: my rat $x = 2.3;

[15:07] <camelia> std : OUTPUT«No such file or directory»

[15:08] <lizmat> Rational is implemented as a role

[15:08] <camelia> std : OUTPUT«(timeout)cat: /home/camelia/std/snap/revision: No such file or directory␤»

[15:08] <rjbs> Trying to figure out what determines legal names for variables.

[15:08] *** toddr left
[15:08] <rjbs> ...and whether that differs from $^vars

[15:08] <cognominal> I think that native that don't fit in a register are in limbo

[15:09] <cognominal> the specs talks about a lot of them but only their boxed counterpart exists

[15:09] <cognominal> so my confusion

[15:09] <yanmc> is there a way to make the REPL not quit on ^C?

[15:11] *** toddr joined
[15:11] <rjbs> how can I print a description of a subroutine signature?

[15:12] <geekosaur> yanmc, not yet, it's a known bug

[15:12] <lizmat> m: sub a($a,@b,%c) {}; dd &a.Signature

[15:12] <camelia> rakudo-moar 53af02: OUTPUT«Method 'Signature' not found for invocant of class 'Sub'␤  in block <unit> at <tmp> line 1␤␤»

[15:12] <lizmat> m: sub a($a,@b,%c) {}; dd &a.signature

[15:12] <camelia> rakudo-moar 53af02: OUTPUT«:($a, @b, %c)␤»

[15:12] <lizmat> rjbs: ^^

[15:13] <rjbs> Got it, thanks.

[15:13] <dalek> doc: cfd3ee3 | (Jan-Olof Hendig)++ | doc/Type/IO/Socket/Async.pod:

[15:13] <dalek> doc: Fix typo

[15:13] <dalek> doc: review: https://github.com/perl6/doc/commit/cfd3ee3318

[15:13] *** adu left
[15:13] <rjbs> So, it appears to be (to my great pleasure!!) that two $^x variables with canonical unicode equivalence are combined into one.

[15:13] <rjbs> sub { $^Å + $^Å } is 1-ary, with the a-ring and angstrom sign unified

[15:13] <rjbs> good job, perl6!

[15:14] <cognominal> BenGoldberg, can you get a .REPR of a type non fitting in a register print anything than P6opaque without extensions or creating a new kind of OO using the metaobject systeem ?

[15:14] <lizmat> rjbs: that's NFG for ya

[15:14] <moritz> .U Å

[15:14] <yoleaux> U+212B ANGSTROM SIGN [Lu] (Å)

[15:15] <moritz> .u Å

[15:15] <yoleaux> U+00C5 LATIN CAPITAL LETTER A WITH RING ABOVE [Lu] (Å)

[15:15] *** finanalyst joined
[15:15] <rjbs> how does NFG do that?  I knew it worked on grapheme clusters, but I didn't know it dealt with canonical equiv

[15:16] *** toddr left
[15:17] <lizmat> rjbs: ah, good point

[15:17] <lizmat> hmmm... not sure about that  

[15:17] <rjbs> Okay!  Who do I interrogate about that later?  Also, who do I high five? :)

[15:17] <moritz> I think NFG is based off NFKC

[15:18] *** CQ joined
[15:18] <rjbs> moritz: but would I then lose precision round-tripping through NFG?

[15:18] <moritz> and we have a synopsis on unicode... S19 maybe?

[15:18] <rjbs> moritz: Great, I'll look into that!

[15:18] <rjbs> S15

[15:18] <rjbs> Um: http://design.perl6.org/S15.html

[15:19] <moritz> synopsebot6: S15

[15:19] <AlexDaniel> rjbs: There's a list of people to high five on the bottom: https://perl6advent.wordpress.com/2015/12/25/christmas-is-here/

[15:19] *** finanalyst left
[15:19] <rjbs> AlexDaniel: Thanks, but I was looking specifically for the person(s) who addressed this one very specific issue.

[15:19] <AlexDaniel> huggable: dunno

[15:19] <huggable> AlexDaniel, ¯\_(ツ)_/¯

[15:20] <rjbs> But I'm on that list, so I'll high five myself whilst I wait! \o/

[15:20] <AlexDaniel> and I'm not :P

[15:21] <rjbs> I'll high five you anyway.

[15:21] <rjbs> moritz: synopsebot6 taking holiday? :)

[15:27] *** dha left
[15:27] *** rblackwe joined
[15:27] <moritz> rjbs: I think it triggers only on more specific stuff

[15:27] <moritz> S02:1234

[15:27] <synopsebot6> Link: http://design.perl6.org/S02.html#line_1234

[15:28] <AlexDaniel> S02:

[15:28] <AlexDaniel> S02:0

[15:28] <synopsebot6> Link: http://design.perl6.org/S02.html#line_0

[15:28] *** dha joined
[15:28] <AlexDaniel> S02:a

[15:28] <synopsebot6> Link: http://design.perl6.org/S02.html#a

[15:30] <Zoffix> S02:⁣

[15:30] *** _webstrand left
[15:31] *** webstrand joined
[15:34] *** ocbtec joined
[15:35] *** araujo_ left
[15:41] *** finanalyst joined
[15:49] <Zoffix> webstrand, the bug was fixed

[15:49] *** dha left
[15:51] *** webstrand left
[15:51] *** webstrand joined
[15:53] <BenGoldberg> m: use native 'int'; # S02:Numeric_Types 

[15:53] <synopsebot6> Link: http://design.perl6.org/S02.html#Numeric_Types

[15:53] <camelia> rakudo-moar 53af02: OUTPUT«===SORRY!===␤Could not find native at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2/share/perl6␤    CompUnit::Reposi…»

[15:54] <lizmat> S15:1

[15:54] <synopsebot6> Link: http://design.perl6.org/S15.html#line_1

[15:56] *** cosarara_ joined
[15:59] <lizmat> lunch&

[16:07] *** skids joined
[16:10] *** finanalyst left
[16:11] *** huggable left
[16:12] *** huggable joined
[16:21] *** skids left
[16:31] *** finanalyst joined
[16:31] *** zakharyas left
[16:34] *** zakharyas joined
[16:37] *** lambd0x joined
[16:38] *** Zero_Dogg left
[16:38] *** Zero_Dogg joined
[16:38] *** Zero_Dogg left
[16:38] *** Zero_Dogg joined
[16:39] <lambd0x> Hi everyone! Does Rakudo Perl compiler already has support receive from a program an int input?

[16:39] *** trnh joined
[16:41] *** jonadab left
[16:42] * Zoffix doesn't understand what that means

[16:44] <ilmari> perl6 porgrams can receive integers from other programs in many ways

[16:47] <lambd0x> sorry typo. I want to receive an Integer from the Standard Input but am not getting it right, I think. the Prompt function for example can just return a string for as far as I saw.

[16:47] <lambd0x> Is that right?

[16:49] <b2gills> Do you mean a native integer, or do you mean a human readable integer?

[16:49] <lambd0x> b2gills: I mean native integer type of Perl.

[16:49] *** jonadab joined
[16:50] <Zoffix> lambd0x, well, sure, there isn't a "I'm now typing in integers" mode :P Just coerce it with .Int

[16:50] <Zoffix> m: my Str ( $a, $b ) = 2, 4; say $a + $b # it DWIMs anyway

[16:50] <camelia> rakudo-moar 53af02: OUTPUT«Type check failed in assignment to $a; expected Str but got Int (2)␤  in block <unit> at <tmp> line 1␤␤»

[16:50] <Zoffix> m: my Str ( $a, $b ) = '2', '4'; say $a + $b # it DWIMs anyway

[16:50] <camelia> rakudo-moar 53af02: OUTPUT«6␤»

[16:53] <b2gills> m: #`( here is a native integer ) $*OUT.write: Blob.new: 0x63

[16:53] <camelia> rakudo-moar 53af02: OUTPUT«c»

[16:53] <b2gills> m: #`( here is a human readable integer ) $*OUT.print:  0x63

[16:53] <camelia> rakudo-moar 53af02: OUTPUT«99»

[16:54] <lambd0x> ok, I'm just starting to learn Perl 6. Was playing around with some subs and a simple while menu that got input from the user to redirect it to some of the subs. Using variables in a static way.

[16:56] <lambd0x> thanks :)

[16:57] *** Ben_Goldberg joined
[16:59] *** pmurias_ joined
[17:00] *** BenGoldberg left
[17:01] *** pmurias left
[17:02] <lambd0x> Here's what I actually got and what the compiler gives me so far: https://bpaste.net/show/2816d25cbf4e

[17:03] *** iH2O joined
[17:04] <Zoffix> lambd0x, just return prompt(); no need to assign it to a var

[17:05] <lambd0x> really? that's nice. 'll try it.

[17:05] *** iH2O left
[17:06] *** finanalyst left
[17:07] *** finanalyst joined
[17:08] <Zoffix> lambd0x, I'd write it like this: https://gist.github.com/zoffixznet/8b115b496cdddd6469b26b8159a16980

[17:09] <Zoffix> default { say ... } isn't even needed in this case. Just say ... is enough because `when` will exit the block if it matches.

[17:09] <Zoffix> Though, may be good for clarity ¯\_(ツ)_/¯

[17:10] <lambd0x> Zoffix: thanks I'm really enjoying learning Perl 6 so far.

[17:10] <Zoffix> \o/

[17:12] *** Deep_Thought joined
[17:12] <lizmat> Zoffix: so I should / could merge now ?

[17:12] <lizmat> Zoffix: just checking

[17:14] <TimToady> rjbs, moritz: NFG is just based on NFC, not NKFC, but NFC itself canonicalizes a few weird characters such as greek semicolon, so this is probably similar; and yes, NFG does lose the original representation, just as NFC does for composing chars

[17:15] <AlexDaniel> uhh! ｢prompt '';｣ without return but with semicolon /o\

[17:16] <ilmari> m: say "\c[ANGSTROM SIGN]".uninames

[17:16] <camelia> rakudo-moar 53af02: OUTPUT«(LATIN CAPITAL LETTER A WITH RING ABOVE)␤»

[17:18] <Zoffix> lizmat, yup

[17:21] *** dha joined
[17:26] *** finanalyst left
[17:26] *** ptolemarch joined
[17:28] <rjbs> TimToady: thanks!

[17:29] *** abruanese joined
[17:35] *** Some-body_ joined
[17:36] *** DarthGandalf left
[17:36] *** Some-body_ is now known as DarthGandalf

[17:39] *** dj_goku joined
[17:41] *** woolfy joined
[17:42] <woolfy> The Perl 6 course at YAPC::NA in Orlando by Damian Conway is well-visited, lots of "Perl 5 faces", and it's going well, and 40+ attendees.

[17:44] <Zoffix> Awesome

[17:45] *** Ben_Goldberg left
[17:48] *** Deep_Thought left
[17:53] <masak> nice!

[17:54] *** BenGoldberg joined
[17:56] <tadzik> sweet :)

[17:56] *** _webstrand joined
[17:57] *** webstrand left
[17:58] <lambd0x> :'-)

[18:04] <woolfy> (of course, also some well-know Perl 6 faces, like Larry, DrForr, lizmat, dha)(and Ricardo Signes and Chip Salzenberg!!!)

[18:04] *** CIAvash joined
[18:06] <jdv79> is the material up to date?

[18:06] * FROGGS .oO( well, Larry is perhaps a bit old :P )

[18:06] <lizmat> jdv79: yes it is

[18:08] <jdv79> i meant things like glr and async

[18:08] <mst> are the slides online now or do we have to wait til later for that?

[18:09] <woolfy> mst: most of the time the courses by Damian are not made public, so I'm not sure.  We did get handouts, a centimeter thick booklet with loads of info.

[18:09] <mst> ah

[18:09] <mst> of course it's PJF and Jacinta who publish everything

[18:10] <woolfy> I will ask Damian in the upcoming break and get back to you about it.

[18:10] <lizmat> mst: yeah

[18:10] *** ptolemarch left
[18:10] <mst> yeah, 's fair enough, I was mooostly curious which things he chose to highlight

[18:11] <woolfy> (well, some people, like Damian, have giving courses as their business, and when he gives away his materials, some people might be less inclined to attend his courses)

[18:11] <woolfy> It's a whole day, and he covers more than I can handle...  but that does not say a lot.  At the moment he is doing OO, and for me it's too deep.

[18:12] <nine> woolfy: Chip Salzenberg? How is he? :)

[18:13] <jdv79> will a video be avail?

[18:13] <mst> it's a paid training course

[18:14] <mst> I continue to be glad that perltraining.com.au has decided that it makes sense to them to release a lot of their course materials, but it's entirely understandable that not everybody does

[18:16] <woolfy> Damian's tutorial is among the most affordable ones, only $75 per person ( http://www.yapcna.org/yn2016/tutorials.html ).

[18:16] <woolfy> Chip is looking well, and and active attendee, asking questions too.

[18:17] <woolfy> jdv79: no, there will be no video

[18:19] <jdv79> oh well.  id pay for materials or video or audio.  just didnt make it to yapc.

[18:19] <dha> To be fair, it was implied that the course is only $75 because it's being subsidized.

[18:20] <dha> Also, I did *tell* you to come to YAPC. ;-)

[18:21] <jdv79> cool.  i know.

[18:26] *** _mg_ joined
[18:27] *** ssotka joined
[18:34] *** darutoko left
[18:35] <rjbs> once again weeping because (obj.^methods.sort) doesn't dwiw; I should write a thiny to use in the reply to give me sorted method names

[18:36] <FROGGS> m: say 42.^methods.sort: *.name

[18:36] <camelia> rakudo-moar 1d93ad: OUTPUT«(ACCEPTS Bool Bridge Complex DUMP FatRat Int Num Numeric Range Rat Real Str WHICH abs acos acosec acosech acosh acotan acotanh asec asech asin asinh atan atan2 atanh base ceiling chr cis conj cos cosec cosech cosh cotan cotanh exp expmod floor gist is-prim…»

[18:37] <rjbs> FROGGS: I end up using obj.^methods>>.name.sort

[18:37] <rjbs> FROGGS: I'm just trained by Ruby. :)

[18:37] *** finanalyst joined
[18:37] <FROGGS> TIMTOWTDI :o)

[18:37] <rjbs> I Wish My First Guess Always Was One Of The Ways To Do It

[18:37] <rjbs> IWMFGAWOOTWTDI

[18:38] <dha> WOOT

[18:38] <FROGGS> ohh, that'd be the python way

[18:38] *** kid51 joined
[18:38] <dha> Guido once showed NY.pm TWO ways to do something.

[18:38] <FROGGS> ohh wow

[18:39] *** finanalyst left
[18:39] <dha> I wish I could remember what it was.

[18:41] <FROGGS> rjbs: installing 5.22 on a production right now btw :o)

[18:41] *** zhmylove_ joined
[18:41] *** vendethiel- joined
[18:42] <Zoffix> There's 5.24! With no-experimental postfix deref! :P

[18:42] <Zoffix> *non

[18:42] <FROGGS> hmmmm, worth a try I guess :o)

[18:42] *** pRiVi_ joined
[18:43] <lizmat> m: quietly say 42.^methods.sort   # rjbs: another way  :-)

[18:43] <camelia> rakudo-moar 1d93ad: OUTPUT«(ACCEPTS Bool Bridge Complex DUMP FatRat Int Num Numeric Range Rat Real Str WHICH abs acos acosec acosech acosh acotan acotanh asec asech asin asinh atan atan2 atanh base ceiling chr cis conj cos cosec cosech cosh cotan cotanh exp expmod floor gist is-prim…»

[18:44] *** obfusk joined
[18:44] *** a3r0_ joined
[18:44] *** ilmari_ joined
[18:44] *** jdv79_ joined
[18:44] *** kshannon joined
[18:44] *** DrForr_ joined
[18:45] *** jeek_ joined
[18:45] *** rudi_s_ joined
[18:45] *** Util_ joined
[18:45] *** profan_ joined
[18:45] *** johnjohn101 joined
[18:45] *** mspo_ joined
[18:45] *** Hor|zon_ joined
[18:45] *** nowan joined
[18:48] *** sufrostico left
[18:48] *** _mg_ left
[18:50] *** _webstrand left
[18:50] *** zakharyas left
[18:50] *** woolfy left
[18:50] *** pRiVi left
[18:50] *** vendethiel left
[18:50] *** a3r0 left
[18:50] *** Hor|zon left
[18:50] *** Guest19630 left
[18:50] *** jdv79 left
[18:50] *** kshannon_ left
[18:50] *** mspo left
[18:50] *** rudi_s left
[18:50] *** obfusk_ left
[18:50] *** sftp joined
[18:50] *** simcop2387 joined
[18:53] *** CIAvash left
[18:56] *** samb1 joined
[18:57] *** _webstrand joined
[18:57] *** woolfy joined
[18:58] *** pmurias_ left
[18:58] *** autarch joined
[19:03] <rjbs> m: say 0o10; say 2⁸

[19:03] <camelia> rakudo-moar 1d93ad: OUTPUT«8␤256␤»

[19:03] <rjbs> m: say 2⁰º¹⁰

[19:03] <camelia> rakudo-moar 1d93ad: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say 2⁰7⏏5º¹⁰␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤  …»

[19:03] <rjbs> too bad :-)

[19:03] <Zoffix> heh

[19:04] <FROGGS> dammit, was fighting 15 minutes to install 5.24 via perlbrew through a proxy after I recognized I have to specify 5.24.0 -.-

[19:05] <jdv79_> wah wah:)

[19:05] *** jdv79_ is now known as jdv79

[19:06] <Zoffix> m: sub infix:<⁰º> ($b, $p) { say [$b, $p] }; say 2⁰º¹⁰

[19:06] <camelia> rakudo-moar 1d93ad: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3x:<⁰º> ($b, $p) { say [$b, $p] }; say 2⁰7⏏5º¹⁰␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement …»

[19:06] <Zoffix> too bad :)

[19:07] <Zoffix> m: sub postfix:<⁰º¹⁰> { $^b ** 8 }; say 2⁰º¹⁰

[19:07] <camelia> rakudo-moar 1d93ad: OUTPUT«256␤»

[19:08] <rjbs> m: say 2⁰ᵇ¹¹

[19:08] <camelia> rakudo-moar 1d93ad: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say 2⁰7⏏5ᵇ¹¹␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤  …»

[19:08] <rjbs> Zoffix: Well done.

[19:08] <rjbs> Really, I'm cheating.  There's no good legit superscript o or b.

[19:08] <Zoffix> m: say '

[19:08] <camelia> rakudo-moar 1d93ad: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" ␤at <tmp>:1␤------> 3say '7⏏5<EOL>␤    expecting any of:␤        argument list␤        single quotes␤        term␤»

[19:08] <Zoffix> m: say 'ᵇ'.uninames

[19:08] <camelia> rakudo-moar 1d93ad: OUTPUT«(MODIFIER LETTER SMALL B)␤»

[19:09] *** pmichaud joined
[19:09] <pmichaud> good afternoon, #perl6

[19:09] <Zoffix> \o

[19:09] <dha> hi pmichaud 

[19:09] <jdv79> hello

[19:10] <lizmat> pmichaud  o/

[19:10] <FROGGS> pmichaud \o/

[19:10] <masak> pmichaud! \o/

[19:12] *** yqt joined
[19:14] <jdv79> pmichaud: at yapc?

[19:14] <jdv79> or going

[19:17] <pmichaud> at yapc -- arrived about an hour ago

[19:17] *** pmurias joined
[19:18] <stevieb> m: enum test <a b>; b.value.say

[19:18] <camelia> rakudo-moar 1d93ad: OUTPUT«1␤»

[19:18] <stevieb> m: my @a=("a","b"); enum test @a; a.value.say

[19:18] <camelia> rakudo-moar 1d93ad: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    a used at line 1␤    enum used at line 1␤    test used at line 1␤␤»

[19:19] <stevieb> how do I use an array to create an enum? I've tried several variants, none of which work

[19:19] <FROGGS> m: my @a=("a","b"); enum test @a; say @a[0]

[19:19] <camelia> rakudo-moar 1d93ad: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    enum used at line 1␤    test used at line 1␤␤»

[19:20] <Zoffix> m: my @a=("a","b"); enum test (@a); a.value.say

[19:20] <camelia> rakudo-moar 1d93ad: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[19:20] <Zoffix> m: my @a=("a","b"); enum test (@a); @a.value.say

[19:20] <camelia> rakudo-moar 1d93ad: OUTPUT«Method 'value' not found for invocant of class 'Array'␤  in block <unit> at <tmp> line 1␤␤»

[19:21] <FROGGS> the enum is called test

[19:21] <FROGGS> m: my @a=("a","b"); enum test (@a); say test

[19:21] <camelia> rakudo-moar 1d93ad: OUTPUT«(test)␤»

[19:21] <FROGGS> m: my @a=("a","b"); enum test (@a); import test;

[19:21] <camelia> rakudo-moar 1d93ad: ( no output )

[19:21] <FROGGS> m: my @a=("a","b"); enum test (@a); import test; say a

[19:21] <camelia> rakudo-moar 1d93ad: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[19:21] <FROGGS> no, that probably wont work

[19:21] <stevieb> m: <a b>.WHAT

[19:21] <camelia> rakudo-moar 1d93ad: ( no output )

[19:21] <stevieb> m: <a b>.WHAT.say

[19:21] <camelia> rakudo-moar 1d93ad: OUTPUT«(List)␤»

[19:22] <stevieb> m: my @a=<a b>; @a.WHAT.say

[19:22] <camelia> rakudo-moar 1d93ad: OUTPUT«(Array)␤»

[19:22] <stevieb> m: my @a=<a b>; @a.List.WHAT.say

[19:22] <camelia> rakudo-moar 1d93ad: OUTPUT«(List)␤»

[19:22] <stevieb> enum takes a list, so I even called List on it and still fail

[19:23] <stevieb> m: my @a=<a b>; enum test @a.List; a.value.say

[19:23] <camelia> rakudo-moar 1d93ad: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    a used at line 1␤    enum used at line 1␤    test used at line 1␤␤»

[19:23] <stevieb> m: my @x=<a b>; enum test @x.List; a.value.say

[19:23] <camelia> rakudo-moar 1d93ad: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    a used at line 1␤    enum used at line 1␤    test used at line 1␤␤»

[19:23] <stevieb> ^^ just in case it was a name clash with @a, which (hopefully) could never happen

[19:23] <FROGGS> m: BEGIN my @a=("a","b"); enum test (@a); say a

[19:23] <camelia> rakudo-moar 1d93ad: OUTPUT«a␤»

[19:24] <Zoffix>  heh, damn. I tried with @a = BEGIN ... :)

[19:24] <stevieb> m: my @a=("a","b"); enum test (@a); a.value.say

[19:24] <camelia> rakudo-moar 1d93ad: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[19:24] <FROGGS> stevieb: the enum declaration runs a compile time, and at that time the assignment has not happened yet

[19:24] <stevieb> ahhhhh!

[19:25] <stevieb> m: BEGIN {my @a=("a","b"); enum test (@a);}; a.value.say

[19:25] <camelia> rakudo-moar 1d93ad: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[19:25] <FROGGS> so, all is well until you time travell

[19:25] *** cognominal left
[19:25] <FROGGS> now it is only visible within that block

[19:25] <stevieb> m: BEGIN my @a=("a","b"); enum test (@a); say a.value.say

[19:25] <camelia> rakudo-moar 1d93ad: OUTPUT«0␤True␤»

[19:26] <arnsholt> masak: Snake isn't dead, but it's not super-alive either

[19:26] <stevieb> FROGGS: I'll play around with BEGIN. thanks!

[19:27] <arnsholt> My copious free time is extra copious these days, with a three days old and a 12 month over due thesis

[19:27] <stevieb> in fact, enum won't work in the case I wanted it for, as I want to be able to change it. I'll use a hash instead :)

[19:27] <FROGGS> arnsholt: \o/

[19:27] *** dha left
[19:27] <arnsholt> But it's a projecy that's still fermenting in my brain, and I think it'd be interesting to make more progress on it

[19:27] <FROGGS> arnsholt: girl or boy?

[19:28] <arnsholt> So I'm pondering stuff like how to get the Python type system right, where object's type object is type and type itself extends object

[19:29] <Zoffix> m: my $xºbar = 'wat'; say $xºbar

[19:29] <arnsholt> Sort of a type croissant?

[19:29] <camelia> rakudo-moar 1d93ad: OUTPUT«wat␤»

[19:29] <arnsholt> FROGGS: Boy =)

[19:29] <FROGGS> arnsholt: awesome :D

[19:29] <dalek> snake: 2c4204e | (Pawel Murias)++ | src/Snake/ (2 files):

[19:29] <dalek> snake: Rename sports to spaces-or-tabs.

[19:29] <dalek> snake: review: https://github.com/arnsholt/snake/commit/2c4204e8de

[19:29] <pmurias> arnsholt: hi

[19:29] <arnsholt> pmurias: EHLO! =)

[19:30] <woolfy> mst (and others who were interested): I just asked Damian, and he says "no", to "will the slides of the Perl 6 course be available online".  For exactly the reasons I stated.  It's his income.

[19:31] <pmurias> arnsholt: renamed sports to spaces-or-tabs as I can't bend my mind not to parse it as a single word ;)

[19:31] <arnsholt> pmurias: np =)

[19:31] <mst> woolfy: well, yes, as I said, once I'd remembered it was only PJF+Jacinta who were outliers in that respect, I wasn't expecting any other response

[19:32] * Juerd would gladly pay to watch recordings of such talks

[19:32] <Juerd> That'd still be much cheaper than actually going to a YAPC :)

[19:33] <Zoffix> m: my \ʳᵘⁿ_ᶠᵒʳ-ᵗʰᵉ_ʰⁱˡˡˢ = 'run for the hills';   say ʳᵘⁿ_ᶠᵒʳ-ᵗʰᵉ_ʰⁱˡˡˢ

[19:33] <camelia> rakudo-moar 1d93ad: OUTPUT«run for the hills␤»

[19:33] <Zoffix> That's just obscene :P

[19:33] <arnsholt> No, it's Unicode ;p

[19:35] <japhb> arnsholt: Not mutually exclusive statements.  :-)

[19:36] <arnsholt> masak: Another thing that's annoyed me in Snake is the fact that the type() constructor is overloaded to also extract the type object of things

[19:36] <arnsholt> Now *that's* obscene!

[19:38] <dalek> doc: 6a252c5 | (Tom Browder)++ | htmlify.p6:

[19:38] <dalek> doc: simplify for loop

[19:38] <dalek> doc: review: https://github.com/perl6/doc/commit/6a252c5e5d

[19:38] <dalek> doc: 276c613 | RabidGravy++ | htmlify.p6:

[19:38] <dalek> doc: Merge pull request #606 from tbrowder/rm-flat

[19:38] <dalek> doc: 

[19:38] <dalek> doc: simplify for loop

[19:38] <dalek> doc: review: https://github.com/perl6/doc/commit/276c613cdb

[19:40] *** domidumont left
[19:40] *** dha joined
[19:42] *** Supervisor joined
[19:42] *** Supervisor left
[19:42] <arnsholt> masak: Anyways, I've given you a commitbit to Snake. No need to feel pressured to hack on it (I'm not doing much to it anyways, after all), but if you have ideas on how to proceed I trust your judgement. Bug tickets discussing implementation issues are most welcome too, of course =)

[19:43] *** jjido joined
[19:48] <woolfy> Juerd: in my experience, when a video of something is made avaliable in a website where you have to pay for it, very soon after many more people have a copy of the video and most have not paid for it...

[19:50] *** rindolf left
[19:51] <mst> woolfy: I liked 37signals' trick with their e-books where they embedded the purchaser's name

[19:55] <woolfy> mst: yeah, me too, have some of such e-books copied and uploaded shamelessly by other people...

[19:58] *** cognominal joined
[19:58] <Zoffix> m: say $_ %% Ⅴ*Ⅲ ?? 'Fizz Buzz' !! $_ %% Ⅲ ?? 'Fizz' !! $_ %% Ⅴ ?? 'Buzz' !! $_ for ^Ⅹ*Ⅹ

[19:58] <camelia> rakudo-moar 1d93ad: OUTPUT«Fizz Buzz␤1␤2␤Fizz␤4␤Fizz Buzz␤Fizz␤7␤8␤Fizz␤Fizz Buzz␤11␤Fizz␤13␤14␤Fizz Buzz␤16␤17␤Fizz␤19␤Fizz Buzz␤Fizz␤22␤23␤Fizz␤Fizz Buzz␤26␤Fizz␤28␤29␤Fizz Buzz␤31␤32␤Fizz␤34␤Fizz Buzz␤Fizz␤…»

[19:59] <Zoffix> :)

[20:00] <Juerd> woolfy: That happens, yes.

[20:01] *** girafe joined
[20:08] *** cognominal left
[20:11] *** jjido left
[20:11] *** jjido joined
[20:11] *** huggable left
[20:13] *** erdic joined
[20:13] *** telex left
[20:14] *** telex joined
[20:14] *** jack_rabbit joined
[20:15] *** rindolf joined
[20:22] *** pmurias_ joined
[20:26] *** pmurias left
[20:34] *** pmurias_ is now known as pmurias

[20:34] <pmurias> is passing an array of 2 integers cheaper in nqp than passing an object?

[20:35] <moritz> the passing itself is just a reference, so should be the same performance wise

[20:35] <arnsholt> Yeah, even a native array goes through the object paths

[20:36] <arnsholt> The *lookups* might be faster, but I wouldn't expect the passing to be

[20:36] <arnsholt> (lookups into the array vs. lookup of object attributes, that is)

[20:36] <moritz> as for storage, I guess the array needs to store itse size somewhere, and the object needs to store its class

[20:36] <moritz> so, donno

[20:36] <arnsholt> Array is probably more compact

[20:37] <arnsholt> As P6opaque also stores things like attribute name to offset tables and the like

[20:37] <pmurias> arnsholt: that would be shared for all the object of the same class

[20:38] <moritz> right, that's in the meta calss

[20:38] <moritz> *class

[20:38] <moritz> well, meta class instance

[20:38] <moritz> and the array also has a meta class instance

[20:39] *** BenGoldberg left
[20:41] <arnsholt> Oh, derp. That's true

[20:41] <moritz> nqp-m: say([].^name)

[20:41] <camelia> nqp-moarvm: OUTPUT«Confused at line 2, near "say([].^na"␤   at gen/moar/stage2/NQPHLL.nqp:706  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:panic)␤ from gen/moar/stage2/NQP.nqp:927  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/nqp.moarvm:comp_unit)␤ from gen/moar…»

[20:42] <moritz> nqp-m: say([].HOW.name([]))

[20:42] <camelia> nqp-moarvm: OUTPUT«NQPArray␤»

[20:42] *** TEttinger joined
[20:46] *** rindolf left
[20:47] <stevieb> is there a way to constrain the size of an attribute? for instance, I want a read/write array, but I want to force it to contain exactly eight elements

[20:48] <moritz> m: my int @array[8]; say @array.elems

[20:48] <camelia> rakudo-moar 1d93ad: OUTPUT«8␤»

[20:48] <moritz> stevieb: ^^ like that, but only for native arrays, afaict

[20:49] <moritz> m: my @foo[8]; say @foo.elems

[20:49] <camelia> rakudo-moar 1d93ad: OUTPUT«8␤»

[20:49] <moritz> oh, seems to work rather generally

[20:49] <gfldex> m: my int @array[8]; say @array.elems; .say for @array;

[20:49] <camelia> rakudo-moar 1d93ad: OUTPUT«8␤0␤0␤0␤0␤0␤0␤0␤0␤»

[20:49] <gfldex> m: my @array[8]; say @array.elems; .say for @array;

[20:49] <camelia> rakudo-moar 1d93ad: OUTPUT«8␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤»

[20:50] <stevieb> moritz: thanks for that. I completely forgot I had read that... I should have known :)

[20:54] *** mkende joined
[20:55] <gfldex> m: my @a[8] is List; .say for @a;

[20:55] <camelia> rakudo-moar 1d93ad: ( no output )

[20:55] <gfldex> m: my @a[8] is List; @a[100] = 'oi!';

[20:55] <camelia> rakudo-moar 1d93ad: OUTPUT«Cannot modify an immutable Nil␤  in block <unit> at <tmp> line 1␤␤»

[20:56] <gfldex> m: my @a[8] is List; @a[5] = 'oi!';

[20:56] <camelia> rakudo-moar 1d93ad: OUTPUT«Cannot modify an immutable Nil␤  in block <unit> at <tmp> line 1␤␤»

[20:56] <gfldex> m: my @a[8] is List[Str]; @a[5] = 'oi!';

[20:56] <camelia> rakudo-moar 1d93ad: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Can't use unknown trait 'is ' in a variable declaration.␤at <tmp>:1␤------> 3my @a[8] is List[Str]7⏏5; @a[5] = 'oi!';␤    expecting any of:␤        TypeObject␤        default␤        dynami…»

[20:56] *** pmurias left
[20:58] *** mkende_ joined
[20:58] *** mkende_ left
[20:58] <gfldex> stevieb: you didn't read it because we didn't wrote it

[20:58] <gfldex> i will plug that hole tomorrow

[21:00] <stevieb> perhaps something like it was in an intro or something I read somewhere...

[21:03] <mkende> Hi all, I have an issue with Rakudo/moarVM compilation times: if I use Rakudo as provided by the Debian testing package or if I build and install it myself with a --prefix=/usr/local/bin, then just running "perl6 -e ''" takes more than 2 seconds (entirely spent in the "parse" stage). If I install the compiler with --prefix=/home/user/foobar then this issue disappear (compilation is fast).

[21:03] <mkende> Is this a known issue?

[21:03] *** rindolf joined
[21:03] <stevieb> gfldex: the following doc describes "fixed size arrays", which is relatively similar to what I was asking, but not quite. That's where I remember it from http://perl6intro.com/

[21:04] <timotimo> mkende: can you give us the exact perl6 --version output?

[21:05] <woolfy> Perl 6 course by Damian just ended.  Several people will now go offline...  byebye <3

[21:05] *** woolfy left
[21:05] <timotimo> o/

[21:05] <mkende> This is Rakudo version 2016.05-145-gac0dcdd built on MoarVM version 2016.05-34-gfbe9e24

[21:05] <mkende> implementing Perl 6.c.

[21:06] <mkende> that's the one that I built.

[21:06] <timotimo> in that version we already have RAKUDO_MODULE_DEBUG, if you set that env var, you'll get a bunch of spam, but you could probably feel where more time is spent in the one version vs th eother

[21:06] <timotimo> stage parse is, after all, also the place where modules get loaded and such

[21:07] <mkende> The debian version is "version 2016.05 built on MoarVM version 2016.05

[21:07] <mkende> implementing Perl 6.c.

[21:07] <mkende> "

[21:07] *** _webstrand left
[21:07] <timotimo> ah, different versions. that makes it a bit trickier

[21:07] *** jjido left
[21:07] <timotimo> well, at least you're not running a parrot-based version from 2014 or something

[21:08] <mkende> well, I can just ignore the debian version for the moment, as I see the issue with the other one, depending on where I install it.

[21:08] <timotimo> ah, that's good!

[21:09] <timotimo> there's also a flag for strace that might help locate what moar's doing around the time it slows down so much

[21:09] <timotimo> i mean, you can make strace output the time since the start, so it'd be more visible

[21:09] <mkende> I've already looked at the strace output and couldn't find anything suspicious

[21:09] <timotimo> OK

[21:09] <timotimo> do you have perf available on your machine?

[21:10] <mkende> no, no "perf"

[21:10] <b2gills> Could it be that one of them isn't precompiling corectly?

[21:10] <timotimo> that's the c-level profiler i like using

[21:10] <timotimo> might be

[21:11] <mkende> That's my guess, that because the location where the compiler and libs are is not writtable, some precompilation is not happening. But the issue is the same if I call perl6 as root.

[21:11] *** dha left
[21:13] *** jjido joined
[21:13] <mkende> with the debug flag I get this:

[21:13] <mkende> Stage start      :   0.000

[21:13] <mkende> Stage parse      :      1352 RMD: Loading settings CORE

[21:13] <mkende>      1352 RMD: Setting up default paths: . blib

[21:13] <mkende>      1352 RMD: going to load Perl6::BOOTSTRAP

[21:13] <mkende>      1352 RMD: Settings CORE loaded

[21:13] <mkende>   0.930

[21:13] <mkende> Stage syntaxcheck:   0.000

[21:14] *** _webstrand joined
[21:14] *** _webstrand is now known as webstrand

[21:14] <timotimo> right. on my machine i get only 0.156s stage parse for -e ''

[21:15] *** lizmat left
[21:17] *** lizmat joined
[21:18] <mkende> Another data point is that when I built rakudo, running "make test" before "make install" resulted in any tests that had a "use test" to fail.

[21:18] <Zoffix> try with the latest and greatest rakudo?

[21:19] <mkende> they passed after make install. The failure was related to a directory (I did not copy the name unfortunately) that could not be created

[21:20] <timotimo> build systems are hard, let's go have ice cream

[21:21] <mkende> might have been /usr/local/share/perl6/precomp

[21:21] *** cognominal joined
[21:21] <BooK> mmm ice cream

[21:22] <BooK> so, who do I ask for a code review of my first perl6 module?

[21:23] <Zoffix> Anyone? :) Just give a github link

[21:23] <BooK> I know it needs fixing, and I wanted to write some test for some of the internal functions (not methods)

[21:23] <BooK> https://github.com/book/p6-Git-Version/blob/master/lib/Git/Version.pm

[21:23] <Zoffix> My eyes!!

[21:23] <Zoffix> 😜

[21:23] <BooK> it's a port of Perl5  http://metacpan.org/pod/Git::Version

[21:24] <BooK> Zoffix: sadly, my font does not have this unicode character

[21:24] <Zoffix> m: '😜'.uninames.say

[21:24] <camelia> rakudo-moar 1d93ad: OUTPUT«(FACE WITH STUCK-OUT TONGUE AND WINKING EYE)␤»

[21:24] <BooK> nice

[21:25] <BooK> emojis will be the undoing of unicode

[21:25] <Zoffix> I'd write these three lines with `given` https://github.com/book/p6-Git-Version/blob/master/lib/Git/Version.pm#L41  Like https://gist.github.com/zoffixznet/f4bd43e24bb33e660eb756ee00f8d06d

[21:26] *** lizmat left
[21:26] <cognominal> Book, why don't you calculate %cached from a here-in to protect our collective eyes.

[21:26] <BooK> here-in ?

[21:27] <BooK> the cache is initialized with all the weird cases

[21:27] <BooK> in practice caching that kind of stuff is useless, given the number of time one does git version comparisons (except in the test script)

[21:28] <cognominal> BooK heredoc, sorry

[21:28] <BooK> Zoffix: oh given, yes of course

[21:28] <BooK> I don't like the push/append/push at the end either

[21:29] <Zoffix> And I'd write this block as `@r = ( -1, @v.pop ) if @v[*-1] ~~ s/^rc//;`, but I'm guessing you wrote it that way for performance reasons https://github.com/book/p6-Git-Version/blob/master/lib/Git/Version.pm#L63

[21:29] <AlexDaniel> .seen as

[21:29] <yoleaux> I haven't seen as around.

[21:29] <BooK> I'm not at the stage of doing things for performance reasons :-)

[21:30] <Zoffix> m: for ^1000 { my $foo = 'foobar'; s/^foo//; }; say now - INIT now

[21:30] <camelia> rakudo-moar 1d93ad: OUTPUT«0.10660804␤»

[21:30] <Zoffix> m: for ^1000 { my $foo = 'foobar'; $foo.subst: 0, 2 }; say now - INIT now

[21:30] <camelia> rakudo-moar 1d93ad: OUTPUT«0.17093622␤»

[21:30] <Zoffix> oh heh. Regex is faster

[21:30] <Zoffix> Well, "faster" :) camelia isn't made for benchmarks

[21:31] <AlexDaniel> ok, the book is talking, now I only have to see as…

[21:31] <masak> 'night, #perl6

[21:31] <Zoffix> night

[21:31] <webstrand> So you can leave the { } off of phasers? that's really cool

[21:32] <AlexDaniel> Zoffix: interestingly, you can probably use bisectable to find performance regressions. The regression has to be pretty bad though

[21:32] <webstrand> Every new thing I find in perl 6 is a joy

[21:32] <Zoffix> And this may or may not be the same thing as the three append/push/append lines you got: @v.append: 0 xx 4-@v, |@r, $c

[21:32] <AlexDaniel> always wanted to try it

[21:33] * Zoffix goes back to killing people

[21:33] <Zoffix> (in FC4 :P)

[21:35] *** rudi_s_ is now known as rudi_s

[21:35] <timotimo> what's that again?

[21:35] <dalek> snake: fb46df5 | (Pawel Murias)++ | src/Snake/ (2 files):

[21:35] <dalek> snake: Accept more ways of indenting that Python 3 accepts.

[21:35] <dalek> snake: review: https://github.com/arnsholt/snake/commit/fb46df5891

[21:35] <dalek> snake: ff58c63 | (Pawel Murias)++ | src/Snake/Grammar.nqp:

[21:35] <dalek> snake: Reject indentation as inconsistent if a source file mixes tabs and spaces in a way that makes the meaning dependent on the worth of a tab in spaces.

[21:35] <dalek> snake: review: https://github.com/arnsholt/snake/commit/ff58c63791

[21:35] <Zoffix> Far Cry 4

[21:35] <timotimo> ah

[21:35] *** pmurias joined
[21:36] <TEttinger> soon to be followed by Far Cry 4: Bloodier Dragonner

[21:36] <Zoffix> Nah, it was followed by Far Cry: Primal

[21:37] <TEttinger> I do like the idea of FC: Blood Dragon

[21:37] <TEttinger> and the soundtrack is good

[21:37] <pmurias> arnsholt: fixed the indentation handling in snake, had to check the python source to figure out how it works ;)

[21:37] *** pomJ joined
[21:37] <Zoffix> Really? I absolutely hated the soundtrack. It made otherwise fun game depressing

[21:38] <TEttinger> I do admit I haven't seen how it's been paired in-game

[21:38] <TEttinger> it does seem like it doesn't quite fit the titles

[21:39] <BooK> Zoffix: thanks for the quick review

[21:39] *** jjido left
[21:39] *** ilmari_ is now known as ilmari

[21:39] <Zoffix> no problem

[21:39] <BooK> one last question: how can I call normalize() from outside ?

[21:40] <Zoffix> Add `is export` on it

[21:40] <Zoffix> It will be exported.

[21:40] <BooK> that was just for test, I don't want to export it

[21:40] <Zoffix> Oh

[21:41] *** wamba left
[21:41] <Zoffix> m: module Foo { our sub bar { say 'hello' } }; Foo::bar

[21:41] <camelia> rakudo-moar 1d93ad: OUTPUT«hello␤»

[21:42] <Zoffix> I guess that may work (note the `our`), but that would let users use it too

[21:42] <mkende> Zoffix: "latest and greated rakudo" does not compile :-p

[21:42] <mkende>         --vmlibs=dynext/libperl6_ops_moar.so=Rakudo_ops_init gen/moar/m-BOOTSTRAP.nqp

[21:42] <mkende> Unknown constant 'CONTROL_RETURN'

[21:43] <Zoffix> mkende, how did you try to compile it?

[21:43] <BooK> Zoffix: ok

[21:43] <mkende> the first line that was not copied above: /usr/local/bin/nqp-m --target=mbc --output=blib/Perl6/BOOTSTRAP.moarvm --encoding=utf8

[21:43] <TEttinger> Zoffix: off topic, but I think maybe Karma To Burn might have been a better fit for the style of game than Power Glove https://www.youtube.com/watch?v=8bcCZ-tor8g

[21:43] <mkende> git pull and then "make"

[21:44] <mkende> I'm not using rakudo star if that is the question.

[21:44] <timotimo> you'll have to check the exact contents of build/tools/*_REVISION

[21:44] <Zoffix> mkende, but did you update nqp and moar?

[21:44] <timotimo> that's how we ensure you get compatible versions

[21:46] <Zoffix> CONTROL_RETURN ... that sounds like something to do with `return` stuff and that got overhaul on moarvm level a few days ago

[21:46] <mkende> ah... well I will update them then :)

[21:50] <timotimo> maybe you actually need a branch in nqp or rakudo for that to work. i dunno.

[21:50] <timotimo> sometimes after a git pull and such you really should Configure.pl or at least make clean

[21:51] *** setty1 left
[21:52] *** _webstrand joined
[21:54] *** webstrand left
[21:58] <rgrinberg> Can grammars handle "resumable" parsing? By that I mean they can say something like "not enough input" and let you resume the parser with more input

[21:58] *** trnh left
[21:59] <timotimo> we don't have support for that yet, sadly

[21:59] <timotimo> not sure how much work it is to build such a solution yourself

[22:00] <rgrinberg> timotimo: eh? were you answering me?

[22:01] <timotimo> yes

[22:01] <rgrinberg> timotimo: OK I see, thanks.

[22:02] <rgrinberg> First time I'm looking at perl6 and grammars look very cool though. They seem like someone took ragel and embedded in the language.

[22:02] <rgrinberg> Ragel's quite a powerful tool

[22:04] <timotimo> haven't heard of it yet

[22:05] <jdv79> rgrinberg: you worked in nyc?

[22:05] <rgrinberg> it's pretty old but definitely under used IMO - http://www.colm.net/open-source/ragel/

[22:06] <rgrinberg> jdv79: briefly, why?

[22:06] <jdv79> boris?  i worked with a mr. grinberg once.

[22:07] <rgrinberg> jdv79: Not Boris here :) It's a common name anyway, especially in NYC.

[22:08] <jdv79> yeah but the perl world is small:).  ok.

[22:10] *** Emeric1 joined
[22:10] *** TEttinger left
[22:10] *** Emeric1 left
[22:11] *** Emeric left
[22:12] *** grondilu left
[22:18] *** pomJ left
[22:19] <lambd0x> Later guys o/

[22:19] *** lambd0x left
[22:25] *** bjz left
[22:28] <mkende> Well same things with the latest version of rakudo. 

[22:28] <mkende> Anyway thanks for the advice, I'll go back to using a version installed in my home dir for the moment.

[22:29] <Zoffix> weird

[22:29] *** mkende left
[22:32] *** kurahaupo left
[22:42] *** spider-mario left
[22:43] *** pmurias left
[22:57] *** _webstrand left
[23:03] *** bjz joined
[23:04] *** skids joined
[23:04] *** webstrand joined
[23:05] *** firstdayonthejob left
[23:06] *** yqt left
[23:08] *** sherwool joined
[23:11] *** RabidGravy left
[23:15] *** bjz left
[23:29] *** rindolf left
[23:31] *** mr-foobar left
[23:32] *** mr-foobar joined
[23:33] *** cognominal left
[23:43] <Xliff_zzzz> When adding invocant declarations to signatures for role methods. Would you do Role::Name:D: ?

[23:44] *** Xliff_zzzz is now known as Xliff

[23:44] *** AlexDaniel left
[23:48] <timotimo> there's code examples for that in the core setting

[23:48] <timotimo> i think you need ::?CLASS or something like that?

[23:55] *** ocbtec left
[23:59] *** BenGoldberg joined
