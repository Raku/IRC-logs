[00:00] <samcv> i think they just need to bump the version number for the changes to take effect?

[00:00] <samcv> idk they bumped it to 5.0.0 23 hours ago

[00:01] *** grondilu_ left
[00:13] *** lukaramu left
[00:18] *** Jesmaybe joined
[00:20] <AlexDaniel> notviki: did anybody answer your bash question?

[00:20] <notviki> Yeah, folks in #bash :)

[00:20] <AlexDaniel> ohhh, #bash‚Ä¶ one of the greatest channels ever

[00:22] <geekosaur> hm, did I miss a question?

[00:22] <notviki> it was like 8 hours ago

[00:23] <geekosaur> ok, yeh, wasn't awake yet :p

[00:23] *** dataf3l left
[00:27] *** ufobat left
[00:29] *** dataf3l joined
[00:29] *** bjz joined
[00:31] *** wamba joined
[00:40] *** AlexDaniel left
[00:41] <RabidGravy> I need to blog more about Perl 6, except for the advent stuff I made on in 2015

[00:41] <RabidGravy> one

[00:42] *** aborazmeh joined
[00:42] *** aborazmeh left
[00:42] *** aborazmeh joined
[00:44] *** mr_ron left
[00:49] *** Jesmaybe left
[00:49] *** Rawriful left
[00:49] *** Jesmaybe joined
[00:53] *** pmurias left
[00:55] *** Tonik left
[01:01] *** RabidGravy left
[01:01] *** dataf3l left
[01:28] *** Jesmaybe left
[01:30] *** Jesmaybe joined
[01:30] *** Jesmaybe left
[01:33] *** BenGoldberg left
[01:36] *** BenGoldberg joined
[01:40] *** newbie1 left
[01:42] *** BenGoldberg left
[01:45] *** BenGoldberg joined
[01:46] *** wamba left
[01:48] *** dantia left
[02:16] *** bjz left
[02:20] <dalek> doc: 72a5d92 | (Zoffix Znet)++ | doc/Type/Date.pod6:

[02:20] <dalek> doc: Document infix:<-> and infix:<+> for Date

[02:20] <dalek> doc: review: https://github.com/perl6/doc/commit/72a5d92bd7

[02:20] <synopsebot6> Link: http://doc.perl6.org/type/Date

[02:29] *** Actualeyes left
[02:48] *** kalkin- joined
[02:49] *** bjz joined
[02:52] *** kalkin-_ left
[02:53] *** killbill left
[03:00] *** bjz left
[03:04] *** bjz joined
[03:06] <dalek> doc: 5421c04 | (Zoffix Znet)++ | doc/Type/DateTime.pod6:

[03:06] <dalek> doc: Document infix +/- on DateTime/Duration

[03:06] <dalek> doc: 

[03:06] <dalek> doc: Discussion: https://irclog.perlgeek.de/perl6/2016-12-22#i_13786280

[03:06] <dalek> doc: Implemented in https://github.com/rakudo/rakudo/commit/6b850babd5

[03:06] <synopsebot6> Link: http://doc.perl6.org/type/DateTime

[03:06] <dalek> doc: Tests: https://github.com/perl6/roast/commit/2188e7ef52

[03:06] <dalek> doc: review: https://github.com/perl6/doc/commit/5421c04ce7

[03:20] *** xtreak joined
[03:20] *** floutenvy joined
[03:45] *** floutenvy left
[03:48] <titsuki_> m: my @a = 1,2; say @a =:= @a.item;

[03:48] <camelia> rakudo-moar a9272b: OUTPUT¬´False‚ê§¬ª

[03:48] <titsuki_> bisect: my @a = 1,2; say @a =:= @a.item;

[03:48] <bisectable6> titsuki_, On both starting points (old=2015.12 new=a9272bf) the exit code is 0 and the output is identical as well

[03:48] <bisectable6> titsuki_, Output on both points: False

[03:51] *** floutenvy joined
[03:53] <titsuki_> bisect: my @a = 1,2; say @a.WHERE === @a.item.WHERE;

[03:53] <bisectable6> titsuki_, On both starting points (old=2015.12 new=a9272bf) the exit code is 0 and the output is identical as well

[03:53] <bisectable6> titsuki_, Output on both points: True

[03:54] *** floutenvy left
[03:55] *** noganex joined
[03:57] *** bjz left
[03:58] *** noganex_ left
[03:58] <samcv> i should try and get my XCompose file highlighter into github hah. They might accept it probably. since there's SO many on github. and they usually look at how many repositories with different people before accepting new languages

[04:02] *** dantia joined
[04:04] <samcv> unless it's ‚ÄúNot a language‚Äù

[04:25] *** cibs left
[04:27] *** cibs joined
[04:28] *** bjz joined
[04:37] *** kurahaupo left
[04:39] *** xtreak left
[04:40] <moritz> uhm, do we have an advent post for today?

[04:41] *** xtreak joined
[04:41] <moritz> ab6tract?

[04:51] *** khw left
[04:57] *** madjestic left
[05:02] *** bjz left
[05:16] *** Cabanossi left
[05:17] *** pyrimidine left
[05:18] *** Cabanossi joined
[05:31] *** pyrimidine joined
[05:36] *** pyrimidine left
[05:36] *** BenGoldberg left
[05:41] *** Actualeyes joined
[05:51] *** xtreak left
[05:51] *** aborazmeh left
[05:52] *** xtreak joined
[05:58] *** Vynce joined
[06:07] *** itcharlie_linux joined
[06:18] *** pyrimidine joined
[06:22] *** pyrimidine left
[06:26] *** Vynce left
[07:01] *** skids left
[07:02] *** bjz joined
[07:07] *** darutoko joined
[07:12] *** susmus left
[07:13] *** kaare_ left
[07:14] *** susmus joined
[07:14] *** quietfanatic left
[07:16] *** bluebell_ joined
[07:16] *** kaare_ joined
[07:23] *** teksteiner joined
[07:43] *** CIAvash joined
[07:47] *** djbkd left
[07:50] *** susmus_ joined
[07:54] *** susmus left
[08:01] *** domidumont joined
[08:06] *** domidumont left
[08:06] *** domidumont joined
[08:11] *** bjz left
[08:13] *** domidumont left
[08:14] *** domidumont joined
[08:15] *** labster left
[08:16] *** xtreak left
[08:17] *** labster joined
[08:19] *** xtreak joined
[08:19] *** pyrimidine joined
[08:24] *** pyrimidine left
[08:27] *** xtreak left
[08:29] *** xtreak joined
[08:37] *** pyrimidine joined
[08:38] *** bjz joined
[08:39] *** pyrimidi_ joined
[08:39] *** pyrimidine left
[08:41] *** bjz left
[08:43] *** pyrimidi_ left
[08:45] *** toolforger joined
[08:45] *** xtreak left
[08:49] *** aries_liuxueyang left
[08:55] *** wamba joined
[08:58] *** rindolf joined
[09:00] <lizmat> I was under the impression Zoffix was on today ?

[09:00] <lizmat> ah, no, ab5tract

[09:00] <lizmat> or ab6tract 

[09:03] *** pierre_ joined
[09:08] <lizmat> paging ab6tract 

[09:08] *** bluebell_ left
[09:09] <TEttinger> advent intervention

[09:09] * lizmat starts whipping up a plan B

[09:13] <TEttinger> Emoji, Perl 6, and You!

[09:13] <lizmat> :-)

[09:13] <samcv> emoji?

[09:14] <M-Illandan> will TimToady be writing day24 of advent calendar? 

[09:15] <M-Illandan> lizmat: Please do write an emoji filled perl6 post! At least, we can claim an emoji language for ourselves :-)

[09:15] <samcv> lol.

[09:15] <lizmat> I don't think he planned for this year's 24th

[09:15] <samcv> i sometimes use the üêß emoji for my heredocs

[09:16] <M-Illandan> speaking of emojis, I don't know if this will be tolerable 

[09:16] <M-Illandan> https://www.youtube.com/watch?v=4yZERI42eRU&feature=youtu.be

[09:16] <samcv> oh god

[09:16] <lizmat> .u üêß

[09:16] <yoleaux> U+1F427 PENGUIN [So] (üêß)

[09:16] <samcv> that looks terrible M-Illandan 

[09:17] <samcv> like really horrible

[09:17] <M-Illandan> yeah, I know. Kids, these days....

[09:17] <samcv> hmm will see if linguist accepts my PR for the XCompose highlighter I made https://github.com/github/linguist/pull/3402

[09:17] <samcv> everything is better with colors!

[09:18] <samcv> though it's not really a language there's 39k xcompose files on github

[09:23] <TEttinger> I mean, man there's some unusual special combos http://emojipedia.org/men-with-bunny-ears-partying-type-5/

[09:25] <samcv> well TEttinger the gendered/skincolored are just sequences though

[09:25] <samcv> color + gender unicode codepoints + whatever

[09:25] <samcv> so basically you can have whatever you want

[09:25] <TEttinger> bunny ears partying isn't unusual enough?

[09:25] <samcv> well... that unicode has listed as ZWJ sequences

[09:25] <samcv> which is basically just a set of ones that it's possible to set gender or skin color etc

[09:26] <samcv> true

[09:26] *** kaare_ left
[09:26] <samcv> how do we know they're parting though

[09:26] <TEttinger> I'm just waiting on full CIELAB color being represented in Unicode

[09:26] <samcv> cielab?

[09:27] <TEttinger> complex color encoding scheme that can store white and brighter than white (i.e. the sun) as different colors

[09:27] <samcv> TEttinger, http://unicode.org/emoji/charts/emoji-zwj-sequences.html

[09:27] <samcv> here are all your zwj sequences !

[09:28] <samcv> so those PLUS the skin tones

[09:28] <samcv> not all of them show different ones in the list for skin tone

[09:28] <samcv> full list here: http://www.unicode.org/Public/emoji/4.0//emoji-zwj-sequences.txt

[09:29] <samcv> and then even more in the not yet fully complete 5.0 http://www.unicode.org/Public/emoji/5.0//emoji-zwj-sequences.txt

[09:29] <TEttinger> I wonder if you can change hair color independently of skin color

[09:29] <samcv> no

[09:29] <samcv> that does not exist

[09:29] <samcv> yet

[09:29] <samcv> ^

[09:30] *** pierre_ left
[09:30] <TEttinger> full paper doll system in your I18N code

[09:30] <samcv> i mean there's plenty in that list they don't denote as having skin color allowed, but easily will probably have that added sometime

[09:30] <samcv> paper?

[09:31] <TEttinger> paper doll is a way of laying out images over each other to make a composite image from several component parts, like pieces of paper IRL or images on a computer

[09:32] <samcv> i'm not sure if any other unicode properties are de jure applied to multiple codepoints that aren't derived

[09:32] <samcv> ah

[09:32] <TEttinger> many older Flash games used it to avoid storing an image per character per animation per frame

[09:32] <samcv> oh lizmat i hear you reply to RT with email

[09:33] <lizmat> samcv: yeah, it's easier as I've given up on trying to log into RT

[09:33] <samcv> it's slow though

[09:33] <samcv> right

[09:33] <samcv> well it finally added my email. at least it wasn't there for at least 30 mins

[09:36] <samcv> can we change the topic to say Unicode is our friend instead of UTF-8? since UTF-8 is just the encoding algorithm. unless it's refering to peoples IRC being set in UTF-8

[09:37] <toolforger> +1

[09:37] *** RabidGravy joined
[09:38] <timotimo> AFAIK it's the latter

[09:38] <timotimo> though by now it's probably a bit archaic

[09:38] <samcv> yeah

[09:38] <timotimo> i don't think people actually still run around with irc clients set to latin1 or something

[09:38] <samcv> plus if we say Unicode people will know what we mean though

[09:38] <samcv> or UTF-16 :P

[09:38] <samcv> if that EVER was a thing.

[09:38] *** wamba left
[09:38] <samcv> if it's Unicode it could mean for both

[09:41] <timotimo> i'm not sure about utf-16, but i believe ucs-16 is widespread in CJK territories?

[09:41] *** xtreak joined
[09:42] <timotimo> could be utf-16, though

[09:42] *** domidumont left
[09:43] *** Vynce joined
[09:43] <TEttinger> timotimo: UCS-16 wouldn't make too much sense though for CJK would it? since a lot of characters that are uncommon in Chinese are outside the BMP

[09:44] <samcv> timotimo, what do you think about using Ubuntu 14.04 and GCC 6 for travis? https://github.com/rakudo/rakudo/pull/970

[09:44] <timotimo> you are right, TEttinger 

[09:44] * timotimo needs still to wake up

[09:45] <timotimo> samcv: well, if we stick with an older version in our continuous integration, we can easily tell when we accidentally require something newer

[09:45] <samcv> i guess that's true. hm

[09:45] <samcv> though. i was more wanting too see if the flapping tests would stop

[09:45] <timotimo> if it's noticably faster, that'd be nice

[09:45] <samcv> if we upgraded

[09:45] <toolforger> UTF-16 is what Java does (sort of)

[09:45] <samcv> some nativelib thingy

[09:46] <samcv> is flapping

[09:46] <samcv> internally at least

[09:46] <timotimo> that could be a legit problem, though

[09:46] <samcv> yeah. or not?

[09:46] <TEttinger> I'm still surprised at some of the places UTF-16 is used. I think Java and .NET use UTF-16 now and not UCS-16, and LocalStorage in the browser can only store text (always as UTF-16, which seems wasteful considering that a lot of saved info is Base64 encoded, which is optimal for UTF-8 but awful for -16)

[09:46] <samcv> i just wanted to see if the test stopped flapping randomly

[09:46] <samcv> and we can put it back if no change

[09:47] <toolforger> Ah. See the first answer on http://stackoverflow.com/questions/675651/what-does-the-net-framework-uses-the-utf-16-encoding-standard-by-default-mean for the real answer

[09:47] <samcv> internally they use it i believe

[09:47] <toolforger> Exactly

[09:48] <toolforger> .net stores UTF-16 externally if you don't specify an encoding, which is a misfeature in my book

[09:48] <toolforger> Java forces you to select an encoding, and everybody and their cat use UTF-8

[09:49] <toolforger> I.e. Perl code will see UTF-16 only when reading files written by cowboy-coded .net applications

[09:49] <samcv> it's mostly irrelevant except for internals though

[09:49] <samcv> "I am looking at StreamWriter right now in reflector and I am certain I can see that the default is actaully UTF8NoBOM."

[09:49] <samcv> i see this though

[09:49] *** liz joined
[09:49] <toolforger> Well, even stackoverflow can be wrong :-)

[09:50] <samcv> true

[09:50] *** ufobat joined
[09:50] *** liz is now known as Guest14192

[09:50] <samcv> but it should mostly not matter the internal representation of the codepoints tbh

[09:50] <timotimo> TEttinger: that's an interesting insight

[09:51] <timotimo> there used to be a time when people would recoil in horror at the word "stackoverflow"

[09:51] <toolforger> https://news.ycombinator.com/item?id=3906590 says that Javascript is UTF-16 by default

[09:51] <toolforger> and a few more things

[09:51] <timotimo> btw, moarvm represents codepoints as 32bit signed integers internally :P

[09:51] <toolforger> *signed*? Now that's messed up

[09:51] <timotimo> it's not messed up

[09:52] <timotimo> negative codepoints are our synthetic graphemes

[09:52] <timotimo> it's how we make O(1) access to graphemes possible

[09:52] <timotimo> i.e. if unicode didn't define √º as a single codepoint, moar would assign a negative number for you

[09:53] <samcv> ugh i was going to try to get to the 1/2 point of our test coverage for unicode properties.

[09:53] * samcv finishes the last 8 to get to ~68

[09:53] <TEttinger> nice, timotimo

[09:54] <samcv> nice

[09:54] <timotimo> i didn't realize there's so many properties :o

[09:54] <samcv> yes

[09:54] <toolforger> How do you encode CJK like U+24f5c then? Wikipedia claims that its UTF-16 representation is 11011000_01010011¬†11011111_01011100, that's two negative numbers

[09:54] <samcv> like 136?

[09:54] <samcv> i'm up to 53/124

[09:54] <timotimo> toolforger: "encode"?

[09:54] <samcv> see this crazy list timotimo https://github.com/perl6/roast/issues/195

[09:54] <lizmat> bots:

[09:55] <toolforger> s/encode/represent/

[09:55] <samcv> toolforger, uhm are you uh

[09:55] <samcv> you use

[09:55] <samcv> forget the name. but there's special codepoints

[09:55] <timotimo> m: say chr(0x24f5c)

[09:55] <camelia> rakudo-moar a9272b: OUTPUT¬´§Ωú‚ê§¬ª

[09:55] <timotimo> radical stroke? o_O

[09:55] <samcv> for getting more than the number allowed in a 16-bit int

[09:56] <TEttinger> timotimo mentioned 32-bit instead of 16-bit

[09:56] <timotimo> samcv: surrogates

[09:56] <samcv> yes!

[09:56] <timotimo> the worst thing ever :)

[09:56] <samcv> pretty much

[09:56] <toolforger> true

[09:56] <timotimo> json prescribes the use of surrogates even though it's specified utf8-encoded

[09:56] <samcv> what

[09:56] <toolforger> oO

[09:56] <timotimo> needless to say JSON::Fast doesn't do that ... or at least it has no specific thing to make it happen

[09:56] <samcv> the hell?

[09:57] <timotimo> yes, it's true. yes, it's absolutely horrifying.

[09:57] <samcv> well unicode has grapheme tests that hase surrogate

[09:57] <samcv> but it's supposed to be encoding agnostic but

[09:57] <samcv> moarvm doesn't let you encode that codepoint because... reasons

[09:57] <timotimo> To escape a code point that is not in the Basic Multilingual Plane, the character is represented as a twelve-character sequence, encoding the UTF-16 surrogate pair. So for example, a string containing only the G clef character (U+1D11E) may be represented as "\uD834\uDD1E".

[09:57] <samcv> so i wasn't able to use those tests :(

[09:57] <samcv> eww

[09:58] <samcv> that's the grossest thing i've ever seen

[09:58] <samcv> but json doesn't allow \u higher than 0 chars long right

[09:58] <samcv> that was my impression

[09:58] <samcv> s/0/4

[09:58] <timotimo> One of the key architectural features of JSON is that JSON-encoded objects are valid Javascript literals that can be evaluated using the eval function, for example. Unfortunately, older Javascript implementations only support 16-bit Unicode escape sequences with four hex characters in string literals, so there's no other way than to use UTF-16 surrogates in escape sequences for code points above 0xFFFF in a

[09:58] <timotimo> portable way. (The \u{...} syntax that allows arbitrary code points was only introduced in ECMAScript 6.)

[09:58] <timotimo> yes

[09:59] <toolforger> still gross, but now at least understandable

[09:59] <timotimo> this same stackoverflow post seems to say that you only have to use those surrogates if you want \u stuff

[09:59] <moritz> which is why JSON supports surrogate pairs

[09:59] <timotimo> But as you mentioned, there's no need to use escape sequences if your application supports Unicode JSON text. Simply encode the characters directly in the respective Unicode format.

[09:59] <moritz> hey, UTF-16, here I'm coming!

[09:59] <timotimo> in any case, the to-json stuff in JSON::Fast has no mechanism to generate \u sequences (that i know of)

[10:00] <toolforger> Downside of UTF-16 is that it encodes differently than 7-bit ASCII

[10:00] <timotimo> yeah, but nobody noticed because Bush Hid The Facts

[10:00] <toolforger> every other byte is a null byte, which messes up pretty much software to boot

[10:01] <timotimo> so we get to have wchar_t, hooray!

[10:01] <toolforger> argh

[10:01] <timotimo> did you know that moar can hold null bytes in strings without issue?

[10:02] <toolforger> finally

[10:02] <toolforger> Java can, too :-)

[10:02] <toolforger> so this particular craziness is timing out eventually

[10:04] <toolforger> totally different topic: There was that guy who was trying to get debug info like line numbers into the JVM backend; I now have time to help with that, does anybody know his name or some keywords to google the IRC log for? (I used the wrong search keywords.)

[10:07] <timotimo> perhaps it was MasterDuke?

[10:08] <timotimo> https://irclog.perlgeek.de/perl6-dev/2016-11-21#i_13604824 - incriminating evidence

[10:08] <samcv> timotimo, if moar couldn't hold null bytes in strings I would be sad

[10:09] <timotimo> there's plenty of reasons for sadness still left

[10:10] <toolforger> Mmm... what's masterduke's github name?

[10:11] <toolforger> Ah. I think I got it - MasterDuke17 seems to be the one

[10:11] <timotimo> yup, can be found in CREDITS

[10:11] <toolforger> https://github.com/MasterDuke17/nqp/tree/source_file_line_numbers_on_jvm looks like the right one

[10:12] <timotimo> time for christmas day breakfast

[10:12] <timotimo> have a good one!

[10:13] <toolforger> gtg too, rl interrupt - have a nice christmas day everyone!

[10:13] <samcv> you too!

[10:13] <toolforger> :-)

[10:14] *** toolforger left
[10:14] <timotimo> i mean

[10:14] <timotimo> happy holidays!

[10:14] * timotimo fights in the war on christmas

[10:14] <timotimo> raah! raah! raah!

[10:14] * timotimo throws christmas balls

[10:14] <timotimo> o/

[10:14] <lizmat> PSA: I've written a blog post that can be used for today's Advent calendar slot

[10:15] <lizmat> those of you with access, please let me know of any comments / suggestions

[10:15] <lizmat> I will publish this in 45 minutes unless ab6tract appears and posts his planned advent post

[10:19] <moritz> preview URL is https://perl6advent.wordpress.com/?p=6446&preview=true #savedyouaclick

[10:22] *** pmurias joined
[10:22] <moritz> lizmat: reading it now; re stealing from perl, one might mention that yesterday python 3.6 was released, which has string interpolation and underscores in number literals :-)

[10:22] <lizmat> moritz: thanks, couldn't find it

[10:22] <lizmat> moritz: do you have a link for that ?

[10:24] <moritz> lizmat: https://docs.python.org/3.6/whatsnew/3.6.html

[10:24] <moritz> lizmat: I like the post. As a small improvement, please change the category from "Uncategorized" to 2016

[10:25] <lizmat> moritz: will do

[10:30] <M-Illandan> moritz: do I have to be logged in to preview that post?

[10:33] *** pyrimidine joined
[10:34] *** user100500 joined
[10:35] <samcv> wait python didn't have string interpolation moritz 

[10:36] <samcv> yes M-Illandan 

[10:36] <M-Illandan> samcv: Nope, didn't work

[10:37] *** pyrimidine left
[10:38] *** Vasyl left
[10:38] <moritz> samcv: no, it didn't

[10:38] <samcv> woah

[10:38] <samcv> insane

[10:39] *** Vasyl joined
[10:39] <samcv> what did you do then? perl 5 it and concat everything?

[10:39] <moritz> it has now about 4 or 5 different ways to format string

[10:39] <samcv> TIMTWTDI and all of them suck?

[10:39] <moritz> "%d %s" % (20, 'pounds')

[10:39] <samcv> so sprintf basically

[10:39] <moritz> that's "old style"

[10:39] <samcv> gross

[10:40] <samcv> i mean unless like. that's what you actually want

[10:40] <moritz> new style is   "{} {name}".format(40, name='pounds')

[10:40] <samcv> what. is that interpolation

[10:40] <moritz> no

[10:40] <samcv> or just sprintf with different syntax

[10:40] <moritz> that's a method call

[10:40] <samcv> yes i see that

[10:40] <samcv> how do you interpolate in strings now

[10:41] <moritz> *now* with 3.6 you can do  currency = 'pounds';; f"20 {pounds}"

[10:41] <samcv> oh i found it

[10:41] <samcv> print(f"Who lives in a Pineapple under the sea? {name}.")

[10:41] <samcv> 'f' strings

[10:41] <moritz> *now* with 3.6 you can do  currency = 'pounds';; f"20 {pounds:20s}"

[10:41] <samcv> still lame

[10:41] <moritz> and iirc there's a fourth way to do string formatting too, but I forgot what it was

[10:42] <moritz> and "there should be preferrably one (and only one) obvious way to do things", oh my, the hypocracy

[10:42] <M-Illandan> I know the f"blah" and (format strings) % (arguments) stuff

[10:43] <moritz> I kinda link python as a language, but the community can be aggreviating

[10:43] <M-Illandan> AFAIK, python has had the format strings stuff even as far back as python 2.4

[10:43] <moritz> s/link/like/

[10:43] <M-Illandan> Doesn't matter - what am I doing here talking about python?

[10:43] <moritz> good question :-)

[10:44] *** Guest14192 left
[10:45] <M-Illandan> moritz: continuing your thread of conversation, you can see all the 4 ways here - http://stackoverflow.com/a/4450610

[10:45] <lizmat> paging ab6tract

[10:45] <M-Illandan> Looks like I have seen them all, but somehow forgot. Nah, I don't do python all that regularly. 

[10:46] <moritz> a, string.Template

[10:46] <moritz> lizmat: just go ahead and publish

[10:46] <moritz> it's been more than 12 hours since the desired publishing time

[10:46] <samcv> also % for string operator is weird

[10:46] <samcv> ‚Ä¶

[10:46] *** revere left
[10:47] *** revere joined
[10:47] *** xtreak left
[10:49] <lizmat> moritz: doing final touches now

[10:49] *** xtreak joined
[10:52] <lizmat> https://perl6advent.wordpress.com/2016/12/24/day-24-one-year-on/  # last post

[10:52] <RabidGravy> yaay lizmat++

[10:52] <M-Illandan> lizmat++

[10:52] <moritz> lizmat++

[10:53] <M-Illandan> I kind of expected that title :-)

[10:54] *** revere left
[10:54] *** revere joined
[10:57] *** mr-foobar joined
[10:58] *** floutenvy joined
[10:59] <samcv> hahah Those who don‚Äôt know Perl are doomed to re-implement it, poorly.

[10:59] <samcv> great

[11:02] <M-Illandan> lizmat: The post is great, but this is a bit jarring to me: " Which, to me, is why so much got stolen from Perl." Perhaps reword that a bit? 

[11:02] *** xtreak left
[11:03] <M-Illandan> Something about idea transfer, cross pollination? :-)

[11:03] <moritz> right, not everybody might be of the mindset that idea "stealing" is good

[11:03] <M-Illandan> Especially, not in a festive post

[11:03] *** TEttinger left
[11:04] <dalek> json: 4b5bff1 | moritz++ | / (2 files):

[11:04] <dalek> json: Allow U+0085 NEXT LINE in string literals

[11:04] <dalek> json: 

[11:04] <dalek> json: JSON::Tiny was forbidding \n, should have only forbidden LINE FEED

[11:04] <dalek> json: review: https://github.com/moritz/json/commit/4b5bff11c3

[11:04] <samcv> it reads fine to me, but i could could be changed

[11:06] *** user100500 left
[11:06] <samcv> or maybe change it to ‚Äúborrowing‚Äù in quotation marks or something

[11:07] *** floutenvy left
[11:09] *** pierre_ joined
[11:09] <lizmat> s/stolen/borrowed/   samcv++

[11:09] *** Vynce left
[11:10] <lizmat> putting it in quotation marks could be interpreted negatively as well

[11:10] <lizmat> M-Illandan++  # jarring me  :-)

[11:10] <samcv> not as negative as stolen i guess

[11:10] <samcv> but yeah

[11:11] <samcv> taking could also work

[11:12] <lizmat> how about adding the line: "Even the borrowing they borrowed from Perl"  :-)

[11:12] <huf> "inspired" is even less engative

[11:12] <samcv> they borrowed borrowing?

[11:12] *** ufobat left
[11:12] <lizmat> yes, because Perl borrowed quite a lot herself  :-)

[11:13] <lizmat> from awk and sed to name but twp

[11:13] <lizmat> *two

[11:13] <huf> perl as the vehicle for idea distribution

[11:13] <M-Illandan> lizmat: If you're open to more changes, a bit of a grammar change - we usually don't say "so much got borrowed from Perl", but "so many ideas were borrowed from Perl". The implementation was not borrowed, but ideas were 

[11:13] <samcv> borrowing

[11:13] <samcv> replevin

[11:13] <samcv> pledging

[11:13] <samcv> borrowed plumes

[11:13] <samcv> plagiarism (thieving)

[11:13] <samcv> here are some synonyms thesarus says to borrowing. lol

[11:13] <huf> replevin?!

[11:13] <huf> well.

[11:14] <M-Illandan> replevin? That's a legal term

[11:14] *** Vasyl left
[11:14] <lizmat> thinking about "inspired by Perl": I think that would put Perl on a pedestal too much

[11:14] *** Vasyl joined
[11:15] <samcv> imitate, take up money, adopt, apply, take, fly a kite rent, take by the hour, borrow from Peter to pay Paul

[11:15] <samcv> imitate might work too

[11:15] <M-Illandan> lizmat: nothing wrong with that, actually. Even Matz (Ruby's creator) publicly credits Perl for his creation

[11:15] <samcv> borrow from Peter to pay Paul. hmm. curious

[11:16] <samcv> thesauri are weird

[11:16] <lizmat> M-Illandan: rephrased as "Which, to me, is why so many ideas were borrowed from Perl. And still are!"

[11:16] <M-Illandan> samcv: More than thesaurus and dictionaries, English is weird

[11:16] <M-Illandan> lizmat: perfect!

[11:16] <samcv> and that the plural of thesaurus is thesauri?

[11:16] <samcv> very good lizmat 

[11:17] <M-Illandan> shrug

[11:17] <M-Illandan> I don't have a dictionary or thesaurus

[11:17] * lizmat is afk for some shopping, back in about 15

[11:17] <samcv> that's some fast shopping

[11:17] <M-Illandan> errand shopping is quick. 

[11:18] <M-Illandan> Festival shopping, blech!

[11:18] * M-Illandan is too chatty today. Will go back to lurking

[11:22] *** AlexDaniel joined
[11:22] <samcv> how do i build the JVM backend

[11:22] <samcv> without getting java.lang.RuntimeException: Class file too large!

[11:23] *** bjz joined
[11:25] <pmurias> samcv: I get the same error :/

[11:25] <samcv> your class is too big

[11:25] <samcv> need to separate into smaller classes

[11:26] <samcv> but you probably knew that. ?

[11:26] *** Vasyl left
[11:26] <RabidGravy> did "Pair ~~ Associative" become a thing recently or has it always been like that

[11:27] <samcv> u: ‚∏Æ

[11:27] <unicodable6> samcv, U+2E2E REVERSED QUESTION MARK [Po] (‚∏Æ)

[11:27] *** Vasyl joined
[11:28] <samcv> cool i have that on my xcompose already :D apparently it's used for rhetorical questions

[11:28] <samcv> is perl 6 the best language ever‚∏Æ

[11:30] <AlexDaniel> ¬ø¬°? ‚Ä¶ what's the right combination

[11:30] <samcv> for what?

[11:30] <samcv> on mine it's ? + <

[11:30] <AlexDaniel> ‚∏Æ

[11:31] <AlexDaniel> right

[11:31] <samcv> oh < backspace

[11:31] <samcv> s/oh/or

[11:32] *** labster left
[11:32] <AlexDaniel> ¬ø‚∏Æ? is there a character for the missing one?

[11:32] <AlexDaniel> u: question mark

[11:32] <unicodable6> AlexDaniel, U+003F QUESTION MARK [Po] (?)

[11:32] <unicodable6> AlexDaniel, U+00BF INVERTED QUESTION MARK [Po] (¬ø)

[11:32] <unicodable6> AlexDaniel, U+037E GREEK QUESTION MARK [Po] (;)

[11:32] <unicodable6> AlexDaniel, https://gist.github.com/f868c8113ba2711fa5f7aa755a407162

[11:32] <AlexDaniel> no

[11:33] <samcv> what greek question mark looks like a ; semicolon

[11:33] <samcv> u: { .uniprop('Question_Mark') }

[11:33] <unicodable6> samcv, Found nothing!

[11:34] <samcv> err maybe that's not a praperty

[11:34] <samcv> should be

[11:34] <lizmat> it was just some shopping for some strawberries, blueberries, bananas at the greengrocers across the street  :-)

[11:34] <samcv> whatever this is close enough

[11:34] <samcv> u: { .uniprop('Sentence_Break') }

[11:34] <unicodable6> samcv, U+0000 NULL [Cc] (control character)

[11:34] <unicodable6> samcv, U+0001 START OF HEADING [Cc] (control character)

[11:34] <unicodable6> samcv, U+0002 START OF TEXT [Cc] (control character)

[11:34] <lizmat> m: say (a => 42)<a>

[11:34] <camelia> rakudo-moar 742d1b: OUTPUT¬´42‚ê§¬ª

[11:35] <samcv> come on unicodable6 :(

[11:35] <lizmat> RabidGravy: pretty sure you have always been able to consider a Pair a Hash with one key

[11:35] <lizmat> m: say (a => 42)<b>

[11:35] <camelia> rakudo-moar 742d1b: OUTPUT¬´(Mu)‚ê§¬ª

[11:35] <samcv> m: '.'.uniprop('Sentence_Break').say

[11:35] <camelia> rakudo-moar 742d1b: OUTPUT¬´ATerm‚ê§¬ª

[11:35] <samcv> u: { .uniprop-bool('Sentence_Break') }

[11:35] <RabidGravy> yeah, I think I've just something else in this code that it just falls back to that one, and gets in an awful tizz

[11:36] <AlexDaniel> samcv: there are probably too many for it to handle

[11:36] <samcv> :\

[11:36] <samcv> u: a

[11:36] <unicodable6> samcv, U+000A LINE FEED (LF) [Cc] (control character)

[11:36] <unicodable6> samcv, U+0009 CHARACTER TABULATION [Cc] (control character)

[11:36] <unicodable6> samcv, U+000B LINE TABULATION [Cc] (control character)

[11:36] <samcv> ok it's not dead

[11:36] <AlexDaniel> it's still trying to gist it, I'm pretty sure

[11:36] <samcv> we will find out eventually

[11:37] *** CIAvash left
[11:37] <samcv> there shouldn't be THAT many sentence_break for uniprop-bool but

[11:37] <samcv> sentence_break with just plain uniprop will return ALL things

[11:37] <samcv> since things that aren't sentence reak return some textual thingy

[11:37] <unicodable6> samcv, U+0002 START OF TEXT [Cc] (control character)

[11:37] <unicodable6> samcv, U+0001 START OF HEADING [Cc] (control character)

[11:37] <unicodable6> samcv, U+0004 END OF TRANSMISSION [Cc] (control character)

[11:37] <samcv> m: 'a'.uniprop('Sentence_Break').say

[11:37] <camelia> rakudo-moar 742d1b: OUTPUT¬´Lower‚ê§¬ª

[11:38] <samcv> m: 'a'.uniprop-bool('Sentence_Break').say

[11:38] <camelia> rakudo-moar 742d1b: OUTPUT¬´True‚ê§¬ª

[11:38] <samcv> oh. or maybe not

[11:38] <samcv> dammit

[11:38] <AlexDaniel> oh, you also did :u a‚Ä¶ which will, yes, return all unicode characters with a

[11:38] <AlexDaniel> samcv: by the way, did your changes to json module go through?

[11:38] <samcv> yes

[11:38] <samcv> :D

[11:39] <AlexDaniel> samcv: so, is .trans faster than several .subst ?

[11:39] <samcv> probably but it's still 2.8x faster than before

[11:39] *** pyrimidine joined
[11:39] <samcv> with trans and strings not regex

[11:39] <samcv> also if it just did trans i'm not sure what would happen in some cases hmm

[11:39] <AlexDaniel> which cases?

[11:40] <samcv> m: Q<\\‚ê§>.trans([Q<\>] => Q<\\>, "\n" => Q<\n>).say

[11:40] <camelia> rakudo-moar 742d1b: OUTPUT¬´\\\‚ê§¬ª

[11:40] <AlexDaniel> samcv: ok it finished. At some point it failed with ‚ÄúInput (902693 characters) is not a valid JSON string‚Äù

[11:40] <samcv> yeah

[11:40] <AlexDaniel> unicodable6: help

[11:40] <unicodable6> AlexDaniel, Just type any unicode character or part of a character name. Alternatively, you can also provide a code snippet or a regex

[11:40] <samcv> see that

[11:41] <samcv> it did not work

[11:41] <AlexDaniel> u: { .uniname ~~ /¬´[BLUE|GREEN|RED|YELLOW|BLACK|WHITE|PURPLE]¬ª/ }

[11:41] <unicodable6> AlexDaniel, U+204C BLACK LEFTWARDS BULLET [Po] (‚Åå)

[11:41] <unicodable6> AlexDaniel, U+210C BLACK-LETTER CAPITAL H [Lu] (‚Ñå)

[11:41] <unicodable6> AlexDaniel, U+204D BLACK RIGHTWARDS BULLET [Po] (‚Åç)

[11:41] <unicodable6> AlexDaniel, https://gist.github.com/ccdc6cfa4e6dd2c69fc6fc1646c8f377

[11:41] <samcv> m: Q<\‚ê§>.trans([Q<\>] => Q<\\>, "\n" => Q<\n>).say

[11:41] <camelia> rakudo-moar 742d1b: OUTPUT¬´\\‚ê§¬ª

[11:41] <samcv> m: Q<\‚ê§>.trans([Q<\>] => Q<\\>, ["\n"] => Q<\n>).say

[11:41] <camelia> rakudo-moar 742d1b: OUTPUT¬´\\‚ê§¬ª

[11:41] <samcv> oh wait

[11:41] *** Vasyl left
[11:41] <AlexDaniel> u: { .uniname ~~ /¬´[BLUE|GREEN|RED|YELLOW|PURPLE]¬ª/ }

[11:41] <samcv> m: Q<\‚ê§>.trans([Q<\>] => Q<\\>, ["\n"] => Q<\n>).print

[11:41] <camelia> rakudo-moar 742d1b: OUTPUT¬´\\¬ª

[11:41] <unicodable6> AlexDaniel, U+2ED8 CJK RADICAL BLUE [So] (‚ªò)

[11:41] <unicodable6> AlexDaniel, U+2EE9 CJK RADICAL SIMPLIFIED YELLOW [So] (‚ª©)

[11:41] <unicodable6> AlexDaniel, U+2F9A KANGXI RADICAL RED [So] (‚æö)

[11:41] <unicodable6> AlexDaniel, https://gist.github.com/32ec4505763a572be61cfb8210dcb915

[11:41] <samcv> m: Q<\‚ê§>.trans( ["\n"] => Q<\n>).print

[11:41] <camelia> rakudo-moar 742d1b: OUTPUT¬´\\¬ª

[11:41] <ab6tract> lizmat: i see you wrote a post for today

[11:41] <samcv> uhm

[11:42] <samcv> m: "\\\n".trans( ["\n"] => Q<\n>).print

[11:42] <camelia> rakudo-moar 742d1b: OUTPUT¬´\\¬ª

[11:42] <lizmat> ab6tract: yes, because there wasn't any

[11:42] <samcv> wtf

[11:42] <ab6tract> sorry for running late. i did speak to zoffix yesterday who indicated that it would be ok to post it today

[11:42] <samcv> why isn't this working

[11:42] <lizmat> well, noon would have been late already

[11:42] *** floutenvy joined
[11:42] <samcv> m: (Q<\> ~"\n").trans( ["\n"] => Q<\n>).print

[11:42] <camelia> rakudo-moar 742d1b: OUTPUT¬´\\¬ª

[11:42] <samcv> T_T

[11:42] <ab6tract> lizmat: from a european perspective, maybe

[11:43] <ab6tract> anyway, i joined the chat and asked, got a response that it would be fine

[11:43] <lizmat> ab6tract: ok, well I guess we can haz two today  :-)

[11:43] <samcv> :D

[11:43] <samcv> please post!

[11:43] <lizmat> ab6tract: sorry, but nobody online this morning knew about it

[11:44] <ab6tract> lizmat: no worries

[11:44] <lizmat> and there was no draft in the system either

[11:44] *** pyrimidine left
[11:44] <ab6tract> in fact it actually takes some weight off my shoulders

[11:44] <lizmat> but please, make it snow  :-)

[11:44] <ab6tract> just wanted to clear up that it wasn't my plan for the sun to set without a post

[11:44] <lizmat> ok: miscommunication is the root of all evil  :)

[11:44] <ab6tract> :)

[11:45] *** floutenvy left
[11:45] <lizmat> I just want to make clear that I didn't want to usurp your post

[11:45] <lizmat> or maybe we just need to break tradition ands have a post on the 25th ?

[11:46] <samcv> m: (Q<\> ~"\n").trans( Q<\> => [Q<\\>], ["\n"] => ['\n']).print

[11:46] <camelia> rakudo-moar 742d1b: OUTPUT¬´\\\n¬ª

[11:46] <samcv> oh this works

[11:46] <AlexDaniel> m: say (ÔΩ¢\ÔΩ£ ~ ‚Äú\n‚Äù).trans([‚Äú\n‚Äù, ÔΩ¢\ÔΩ£] => [‚Äò\n‚Äô, ÔΩ¢\\ÔΩ£])

[11:46] <camelia> rakudo-moar 742d1b: OUTPUT¬´\\\n‚ê§¬ª

[11:46] <samcv> m: for ^10000 { (Q<\> ~"\n").trans( Q<\> => [Q<\\>], ["\n"] => ['\n']) }

[11:46] <camelia> rakudo-moar 742d1b: ( no output )

[11:46] <samcv> m: for ^10000 { (Q<\> ~"\n").trans( Q<\> => [Q<\\>], ["\n"] => ['\n']) }; say now - INIT now

[11:46] <camelia> rakudo-moar 742d1b: OUTPUT¬´2.582949‚ê§¬ª

[11:47] <AlexDaniel> samcv: the text is too small to show any meaningful difference

[11:47] <samcv> m: for ^10000 { (Q<\> ~"\n").subst(Q<\>, Q<\\>).subst("\n", '\n') }; say now - INIT now

[11:47] <camelia> rakudo-moar 742d1b: OUTPUT¬´4.1198321‚ê§¬ª

[11:47] <AlexDaniel> ‚Ä¶ and still‚Ä¶

[11:47] <samcv> is it though

[11:48] <samcv> :P

[11:48] <AlexDaniel> eval: for ^10000 { slurp().trans( Q<\> => [Q<\\>], ["\n"] => ['\n']) }; say now - INIT now

[11:48] <evalable6> AlexDaniel, rakudo-moar 742d1b9: OUTPUT¬´0.80084660¬ª

[11:48] <AlexDaniel> eval: for ^10000 { slurp().trans( Q<\> => [Q<\\>], ["\n"] => ['\n']) }; say now - INIT now

[11:48] <evalable6> AlexDaniel, rakudo-moar 742d1b9: OUTPUT¬´0.7967286¬ª

[11:48] <AlexDaniel> eval: for ^10000 { slurp().subst(Q<\>, Q<\\>).subst("\n", '\n') }; say now - INIT now

[11:48] *** pierre_ left
[11:48] <evalable6> AlexDaniel, rakudo-moar 742d1b9: OUTPUT¬´3.10224563¬ª

[11:48] <AlexDaniel> eval: for ^10000 { slurp().subst(Q<\>, Q<\\>).subst("\n", '\n') }; say now - INIT now

[11:48] <evalable6> AlexDaniel, rakudo-moar 742d1b9: OUTPUT¬´3.12681158¬ª

[11:48] <AlexDaniel> WHY??????

[11:48] <samcv> why which

[11:48] <AlexDaniel> how can it possibly be so much slower??

[11:48] <samcv> subst?

[11:49] <AlexDaniel> yes

[11:49] <samcv> it runs twice

[11:49] <samcv> instead of once

[11:49] <AlexDaniel> but it is 4 times slower

[11:49] <samcv> it does 2x as many things 2x

[11:50] * samcv prepares another pull for JSON::Fast

[11:50] *** Vasyl joined
[11:51] <AlexDaniel> evalable6: stdin https://ocw.mit.edu/ans7870/6/6.006/s08/lecturenotes/files/t8.shakespeare.txt

[11:52] <AlexDaniel> this is probably a bit too big‚Ä¶

[11:52] <evalable6> AlexDaniel, Successfully fetched the code from the provided URL.

[11:53] <AlexDaniel> eval: say stdin().chars

[11:53] <evalable6> AlexDaniel, rakudo-moar 742d1b9: OUTPUT¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/aW22puBQba‚ê§Undeclared routine:‚ê§    stdin used at line 1‚ê§¬ª

[11:53] <AlexDaniel> eval: say stdout().chars

[11:53] <evalable6> AlexDaniel, rakudo-moar 742d1b9: OUTPUT¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/pqVwoGTKrX‚ê§Undeclared routine:‚ê§    stdout used at line 1‚ê§¬ª

[11:53] *** FROGGS joined
[11:53] <evalable6> AlexDaniel, https://gist.github.com/16fba71e9e51afe408b4a04808b34aac

[11:53] <AlexDaniel> eval: say slurp().chars

[11:53] <evalable6> AlexDaniel, rakudo-moar 742d1b9: OUTPUT¬´219264¬ª

[11:53] <AlexDaniel> eval: for ^10000 { slurp().trans( Q<\> => [Q<\\>], ["\n"] => ['\n']) }; say now - INIT now

[11:53] <evalable6> AlexDaniel, rakudo-moar 742d1b9: OUTPUT¬´0.9461154¬ª

[11:54] *** wamba joined
[11:54] <AlexDaniel> eval: for ^10000 { slurp().subst(Q<\>, Q<\\>).subst("\n", '\n') }; say now - INIT now

[11:54] <evalable6> AlexDaniel, rakudo-moar 742d1b9: OUTPUT¬´3.4399082¬ª

[11:55] <AlexDaniel> samcv: seems like the amount of text doesn't matter as much

[11:56] <AlexDaniel> bench: compare HEAD slurp().trans( Q<\> => [Q<\\>], ["\n"] => ['\n']) ||| slurp().subst(Q<\>, Q<\\>).subst("\n", '\n')

[11:56] <benchable6> AlexDaniel, starting to benchmark the 1 given commit

[11:56] <benchable6> AlexDaniel, https://gist.github.com/5cc7a488d26c1f21b2047120e70ef3c4

[11:58] <AlexDaniel> eval: say slurp().subst(Q<\>, Q<\\>).subst("\n", '\n').substr(0, 50)

[11:58] <evalable6> AlexDaniel, rakudo-moar 742d1b9: OUTPUT¬´This is the 100th Etext file presented by Project ¬ª

[11:58] <AlexDaniel> eval: say slurp().trans( Q<\> => [Q<\\>], ["\n"] => ['\n']).substr(0, 50)

[11:58] <evalable6> AlexDaniel, rakudo-moar 742d1b9: OUTPUT¬´This is the 100th Etext file presented by Project ¬ª

[11:59] <samcv> AlexDaniel, well the amount of text matters, just not that much how much you break it up

[11:59] <samcv> total characters matters more

[11:59] <samcv> compared to chars per iteration

[12:00] <AlexDaniel> riight

[12:03] <samcv> uhm tr is slower somehow

[12:03] <samcv> wtf

[12:04] <samcv> err trans

[12:04] <samcv> 1.8 vs 5.7 seconds

[12:05] <samcv> HOW

[12:06] <AlexDaniel> samcv: are you sure?

[12:06] <samcv> yes

[12:07] <samcv> let me double double check

[12:08] <AlexDaniel> perhaps it's other way round, right? :))

[12:10] *** pierre_ joined
[12:10] <samcv> ack had to kill X

[12:10] <samcv> moar ate all my ram

[12:10] <timotimo> sorry about that :S

[12:13] <samcv> 4000 √ó 100000 byte string

[12:13] <samcv> is too long apparently

[12:13] <timotimo> er, yeah

[12:13] <samcv> still shouldn't eat all my ram tho

[12:13] <timotimo> yeah, should have just given the typical error message instead

[12:13] <timotimo> "can't allocate a gigazillion bytes"

[12:13] <samcv> what error why tho

[12:14] <timotimo> because malloc be like "hell naw"

[12:14] <samcv> m: say 100000 * 4000

[12:14] <camelia> rakudo-moar 742d1b: OUTPUT¬´400000000‚ê§¬ª

[12:14] <samcv> m: say (100000 * 4000 )/1000

[12:14] <camelia> rakudo-moar 742d1b: OUTPUT¬´400000‚ê§¬ª

[12:14] <samcv> m: say (100000 * 4000 )/1000000

[12:14] <camelia> rakudo-moar 742d1b: OUTPUT¬´400‚ê§¬ª

[12:14] <timotimo> times 4 again because 32bit per character

[12:14] <samcv> that's 400MB string?

[12:14] <samcv> yeah

[12:15] <samcv> i have that much ram though

[12:15] <samcv> oh well. it's very big

[12:15] <timotimo> thing is, when we change things, we may have multiple copies in memory

[12:15] <timotimo> we also try to express strings as "this string, but only chars n to x"

[12:15] <samcv> just gonna have to do 10000 x 4000 byte string

[12:15] <samcv> which is 10x smaller

[12:15] <samcv> which it json converts in 5.5 seconds

[12:16] <samcv> err prolly less

[12:16] <samcv> err yeah. that

[12:17] <samcv> err yeahhh this is slowwwww

[12:17] <samcv> and i'ts probably working on all my ram now

[12:17] <samcv> it's at 20% of 16GB already

[12:19] <samcv> tr is like 10x slower

[12:20] <samcv> for a 4MB string

[12:21] <samcv> even for a 400kb string

[12:22] *** wamba left
[12:26] *** zakharyas joined
[12:26] *** grondilu left
[12:26] *** mr-foobar left
[12:29] <samcv> pmurias, when did the JVM backend for rakudo break?

[12:31] <samcv> u: { .uniprop('STerm') }

[12:31] <unicodable6> samcv, U+002E FULL STOP [Po] (.)

[12:31] <unicodable6> samcv, U+0021 EXCLAMATION MARK [Po] (!)

[12:31] <unicodable6> samcv, U+003F QUESTION MARK [Po] (?)

[12:31] <unicodable6> samcv, https://gist.github.com/e17359d4569657e5a3f46a81f03d5549

[12:31] <samcv> this is what i was trying to find before. This is sentence terminators

[12:38] *** toolforger joined
[12:38] <moritz> u: *.uniprop('STerm')

[12:38] <unicodable6> moritz, U+002A ASTERISK [Po] (*)

[12:38] <unicodable6> moritz, U+002E FULL STOP [Po] (.)

[12:38] <unicodable6> moritz, U+0075 LATIN SMALL LETTER U [Ll] (u)

[12:38] <unicodable6> moritz, https://gist.github.com/4aa57ad20e01cb016af385785ab231bd

[12:40] <toolforger> MasterDuke, are you there? I can try some debugging on your ArrayIndexOutOfBoundsException now.

[12:41] *** pyrimidine joined
[12:42] *** bjz left
[12:43] *** Rawriful joined
[12:47] <samcv> bisectable6, say so 0x0343.uniprop('Full_Composition_Exclusion') == 0x0343.chr.uniprop('Full_Composition_Exclusion')

[12:47] <bisectable6> samcv, On both starting points (old=2015.12 new=742d1b9) the exit code is 0 and the output is identical as well

[12:47] <bisectable6> samcv, Output on both points: False

[12:48] <samcv> what.

[12:48] <samcv> h-how is that possible

[12:49] <toolforger> computers...

[12:49] <toolforger> "everything is possible on high seas, in court, and with computers" ;-)

[12:50] *** bjz joined
[12:50] <samcv> well... that's a normalization property

[12:50] <samcv> so it seems there is some normalization going on?

[12:50] <samcv> m:  say 0x0343.chr.ord; say 0x0343

[12:50] <camelia> rakudo-moar 742d1b: OUTPUT¬´787‚ê§835‚ê§¬ª

[12:50] <samcv> well then.

[12:51] <toolforger> oO

[12:51] <samcv> that is some normalization all right

[12:51] <samcv> u:  0x0343

[12:51] <unicodable6> samcv, Found nothing!

[12:51] <samcv> u:  U+0343

[12:51] <unicodable6> samcv, U+0343 COMBINING GREEK KORONIS [Mn] (‚óåÃì)

[12:51] <toolforger> I'd have expected to be .chr.ord be identity

[12:52] <samcv> m:  0x0343.uniprop('Depreciated').say

[12:52] <camelia> rakudo-moar 742d1b: OUTPUT¬´0‚ê§¬ª

[12:52] <samcv> i spelled it wrong

[12:52] <samcv> m:  0x0343.uniprop('Depreciated').say

[12:52] <camelia> rakudo-moar 742d1b: OUTPUT¬´0‚ê§¬ª

[12:52] <samcv> or not

[12:52] <samcv> m:  0x0343.uniprop('Deprecated').say

[12:52] <camelia> rakudo-moar 742d1b: OUTPUT¬´False‚ê§¬ª

[12:52] <samcv> oh i did

[12:53] <lizmat> .oO( takes some appreciation :-)

[12:53] <lizmat> m: 0x0343.uniprop<Deprecated>.say

[12:53] <camelia> rakudo-moar 742d1b: OUTPUT¬´Type Str does not support associative indexing.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:54] <lizmat> wonder if a AT-KEY interface would make sense here

[12:54] <samcv> i think that would be cool

[12:54] <samcv> would save typing

[12:56] <samcv> m: 0x0F43.uniprop('Full_Composition_Exclusion').say

[12:56] <camelia> rakudo-moar 742d1b: OUTPUT¬´1‚ê§¬ª

[12:56] <samcv> hmm that shouldn't return a 1

[12:56] <toolforger> is uniprop on integers or on characters?

[12:56] * toolforger is confused

[12:56] <samcv> both

[12:57] <samcv> characters get converted to codepoints (integers)

[12:57] <toolforger> ah

[12:57] <samcv> but making the codepoint a string, normalizes it how it should be in unicode

[12:57] <toolforger> ah well

[12:57] <samcv> which is what should happen

[12:57] <toolforger> not really straightforward, but then Unicode is anything but straightforward

[12:58] <toolforger> OTOH maybe characters should not be converted to strings in that case

[12:59] <samcv> well you are passing it a string

[12:59] <samcv> if you pass an int, it does the int. if you pass a string. it gets the codepoint of the string, so if you put it through the normal string which does normalization

[12:59] <samcv> hmm

[13:00] <samcv> m: 0x0F43.uniprop('Full_Composition_Exclusion').say

[13:00] <camelia> rakudo-moar 742d1b: OUTPUT¬´1‚ê§¬ª

[13:00] <samcv> m: 0x0F43.str.uniprop('Full_Composition_Exclusion').say

[13:00] <camelia> rakudo-moar 742d1b: OUTPUT¬´No such method 'str' for invocant of type 'Int'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:00] *** MasterDukeLaptop joined
[13:00] <toolforger>  so characters aren't a separate data type in Perl6?

[13:00] <samcv> how do i set a str object to specific codes. or i could remember how to make codepoints that won't get normalized :\

[13:00] <samcv> no

[13:02] *** dayangkun joined
[13:02] <MasterDukeLaptop> toolforger: you are interested in looking into that AIOOBE?

[13:02] <toolforger> MasterDuke, yes

[13:02] <MasterDukeLaptop> great

[13:02] <toolforger> Just tell me how to reproduce it

[13:02] * toolforger hasn't tried yet

[13:03] *** dayangkun left
[13:04] <MasterDukeLaptop> well, i believe you'll have to use a slightly older nqp+rakudo since the JVM build is broken right now

[13:04] <toolforger> I just cloned your repo

[13:04] <MasterDukeLaptop> excellent

[13:04] <toolforger> If that builds, I'll be fine

[13:05] <toolforger> so I do perl Configure.pl --backends=jvm, right?

[13:05] <MasterDukeLaptop> yeah

[13:06] <toolforger> done, make is running

[13:06] <toolforger> oh. it's complaining about a wrong bootstrap class path, that may or may not be a problem.

[13:07] <MasterDukeLaptop> hm, don't think i've seen that before

[13:07] <MasterDukeLaptop> do you have nqp-j built also?

[13:08] * samcv hits head on computer

[13:08] <samcv> ok added one line and now it's generating the last 2 unicode property value bool's

[13:08] <toolforger> Not exactly sure about boostrap classpath issues, might be related to what JDK is installed

[13:08] <samcv> forgot to print-line(:flush) for that :P function i wrote just to keep under 80 width

[13:09] <MasterDukeLaptop> oh ha, the code i was working on is nqp

[13:09] <notviki> .tell ab6tract well, I guess you can post yours for 25th, because why not, eh?

[13:09] <yoleaux> notviki: I'll pass your message to ab6tract.

[13:09] <MasterDukeLaptop> toolforger: pretty sure i've built with both jdk 7 and 8

[13:10] <notviki> .tell ab6tract oh, never mind. read more of the backlog

[13:10] <yoleaux> notviki: I'll pass your message to ab6tract.

[13:11] <toolforger> MasterDukeLaptop I'll take a closer look at that, but it's essentially just a warning that the compile-time runtime the code is being checked against may not match the one it is going to be run against in the future

[13:11] <toolforger> E.e. this happens if you have just OpenJDK 8 installed and the code is compiled with source=1.7

[13:12] <toolforger> about nqp-j: that should be built with --backends=jvm afaik

[13:12] *** lukaramu joined
[13:13] <MasterDukeLaptop> ah, good to know. well the aioobe happens when you run perl6-j with --ll-exception

[13:13] <MasterDukeLaptop> yeah, backends=jvm for both rakudo and nqp

[13:13] <toolforger> oh. do I need to install perl6 for that, or is nqp enough?

[13:14] <notviki> toolforger: actually .ord.chr is a method to test you ain't got a synthetic :)

[13:14] <toolforger> so it's a bug, not a feature :-D

[13:14] <ab6tract> notviki: just hit publish as a pt 2

[13:14] <yoleaux> 13:09Z <notviki> ab6tract: well, I guess you can post yours for 25th, because why not, eh?

[13:14] <yoleaux> 13:10Z <notviki> ab6tract: oh, never mind. read more of the backlog

[13:14] <ab6tract> :)

[13:14] <notviki> \o/

[13:14] <MasterDukeLaptop> pretty sure perl6 is required. i would like to get nqp to support the line directives, but i don't believe it does right now

[13:15] *** rburkholder joined
[13:15] <toolforger> okay, I'll need a bit of handholding to install perl6 then

[13:15] <ab6tract> usually TimToady does the honors on the 25th. are plans different this year?

[13:15] * toolforger hasn't used perl6 yet

[13:15] *** pierre_ left
[13:16] *** pierre_ joined
[13:16] <MasterDukeLaptop> same perl Configure.pl --backends=jvm

[13:17] <toolforger> Do I need to clone another repo for that?

[13:17] <notviki> ab6tract: I don't see any posts on the 25th of previous years

[13:17] <MasterDukeLaptop> but you might need to point its --prefix to wherever nqp installed to

[13:17] *** pierre_ left
[13:18] <toolforger> Ah, I never bothered to install nqp anywhere

[13:18] <MasterDukeLaptop> did you do "make install"?

[13:18] <toolforger> nope

[13:19] <toolforger> been running nqp with explicit paths

[13:19] <toolforger> good enough for the test runs I've been doing

[13:19] <toolforger> maybe not good enough when having to interoperate with perl6, but not a real problem

[13:19] <MasterDukeLaptop> think you need to, it will just put it in an 'install' directory right there in the source

[13:19] * toolforger knows how to do make install with options

[13:19] <ab6tract> notviki: off by one error in my memory then ;)

[13:20] <MasterDukeLaptop> and then i guess point your rakudo --prefix to e.g., ../nqp/install

[13:20] <samcv> i have all mine in ~/perl6

[13:21] <toolforger> I'll probably nqp, perl6, and install side-by-side

[13:21] <samcv> --prefix"$HOME/perl6" for nqp moar and rakudo

[13:21] <timotimo> i have a ~/perl6/install which is my --prefix

[13:21] <MasterDukeLaptop> fwiw, i have moar, nqp, and rakudo all built with --prefix=<something>

[13:21] <toolforger> samcv everything is in ~/Projects/$CURRENT_PROJECT/

[13:21] <toolforger> so I can have multiple versions of perl6, nqp, or whatever

[13:21] <samcv> that works

[13:22] <samcv> yeah

[13:22] * samcv needs to start keeping multiple versions

[13:22] <samcv> though it hasn't been much of an issue so far at least

[13:22] <toolforger> Essentially I am doing a per-issue install :-)

[13:23] * lizmat goes afk for the rest of the day

[13:23] <toolforger> easy if you don't actually use perl6 itself

[13:24] <MasterDukeLaptop> i also have a system installed perl6 (using system package manager), frequently useful to compare against

[13:25] <toolforger> sounds like a good setup

[13:26] <toolforger> also, eating your own dog food is a good idea if you are involved in design decisions

[13:29] <MasterDukeLaptop> well, back to explaining what wasn't working. so i was able to compile rakudo with my nqp branch, which adds custom ASM Attributes with file name + line number, to support line directives

[13:29] <toolforger> ok

[13:30] <MasterDukeLaptop> and if the rakudo class files was extracted from the jar, and in your CWD, everything worked fine

[13:31] <MasterDukeLaptop> but that's obviously not a final solution, so i then tried to get it to read the class file from memory/the jar it was running from

[13:31] <MasterDukeLaptop> and that where/when i get the aioobe

[13:31] <toolforger> strange

[13:31] <toolforger> the jvm shouldn't care about where a class originated from

[13:32] <toolforger> unless the class somehow got misassociated with a package in the jar, or something

[13:32] <MasterDukeLaptop> strange, yeah!

[13:32] <MasterDukeLaptop> i definitely expected it to "just work"

[13:32] <toolforger> the other bug in this case is that it's an aioob exception instead of something more instructive

[13:33] <toolforger> so I suspect packaging errors in the jar, but that's just a wild guess, I have to dig deeper to say anything definitive

[13:33] <toolforger> do I download and build your rakudo repo to get perl6?

[13:34] <toolforger> (nqp build finished just now)

[13:34] *** newbie1 joined
[13:35] <MasterDukeLaptop> i don't *think* i had made any changes in rakudo

[13:36] <toolforger> kk

[13:36] <toolforger> afk for 10 minutes

[13:37] <pmurias> samcv: no sure when the too large error appeared would have to bisect it, a method rename I did in nqp-j a while ago broke rakudo-j but that has been fixed

[13:37] <samcv> hm

[13:38] <pmurias> the "too large error" has happened in the past

[13:42] *** RabidGravy left
[13:43] <toolforger> oh. Configure.pl wants a moar installed to to --prefix

[13:43] <toolforger> MasterDukeLaptop, would that be enough to reproduce the problem?

[13:43] <MasterDukeLaptop> should be

[13:44] <toolforger> ok, I'll be back once moar is installed

[13:44] <pmurias> MasterDukeLaptop: does the HEAD rakudo jvm backend build for you?

[13:44] <MasterDukeLaptop> that might be something to look into, i would think that using only --backends=jvm wouldn't moar

[13:44] <MasterDukeLaptop> no

[13:45] <toolforger> confirming: -backends=jvm does not install moar, I guess you need both

[13:46] <samcv> almost time for bed. well. super time for bed

[13:46] <samcv> it's almost 6am

[13:46] <MasterDukeLaptop> *wouldn't require moar

[13:47] * notviki just woke up

[13:47] <notviki> almost 9am :)

[13:47] <samcv> goodnight all

[13:47] <pmurias> goodnight

[13:47] <timotimo> night samcv 

[13:47] <notviki> night

[13:47] <toolforger> Configure.pl --install wants moar, so whatever

[13:48] <toolforger> g'night samcv!

[13:48] <samcv> ‚ô• all

[13:49] *** ufobat joined
[13:50] *** RabidGravy joined
[13:50] <MasterDukeLaptop> toolforger: you'll probably have to git reset back to sometime around the november or october release for rakudo, HEAD doesn't build right now

[13:55] *** bjz_ joined
[13:56] *** bjz left
[14:04] *** bjz_ left
[14:05] <toolforger> Oh. rakudo wants another --gen-moar.

[14:05] <toolforger> #silly

[14:06] * toolforger is probably doing it wrong, but if it works: whatever

[14:06] <MasterDukeLaptop> hm, that might be worth filing a bug about, i would have assumed --backends=jvm wouldn't need moar at all

[14:07] <toolforger> --install wants moar

[14:07] <toolforger> maybe that's a good idea if the jvm version isn't yet considered stable enough to be guaranteed to work

[14:08] <MasterDukeLaptop> true

[14:08] *** pierre_ joined
[14:08] *** pierre_ left
[14:08] *** pierre_ joined
[14:08] *** espadrine joined
[14:11] <MasterDukeLaptop> pmurias: btw, in case it wasn't clear i was replying to you, rakudo HEAD dies in stage classfile with 'Class file too large'

[14:11] <toolforger> Strange. the jvm build code retries compilations with some class-splitting mechanism if it hits a classfile-too-large problem on the first attempt

[14:12] <M-Illandan> ab6tract: there's something wrong with your post. The link to OO::Monitors appears to point nowhere

[14:13] <M-Illandan> .tell ab6tract there's something wrong with your post. The link to OO::Monitors appears to point nowhere

[14:13] <yoleaux> M-Illandan: I'll pass your message to ab6tract.

[14:15] *** espadrine left
[14:15] <toolforger> not sure whether it's the retrying that fails, or the classfile split that is not successful enough

[14:15] <toolforger> either would be plausible from what I saw in the jvm backend

[14:16] <M-Illandan> toolforger: what's the generated class file size? It's probably dying from asm throwing that exception because the generated class file was larger than 64k

[14:16] <M-Illandan> erm, the byte array was larger than 64k

[14:16] <toolforger> I haven't tried building anything

[14:17] <toolforger> just talking from what I gathered from code reading

[14:17] <toolforger> Is it even writing the class file when it hits the limit?

[14:18] <timotimo> it shouldn't

[14:18] <toolforger>  unfortunately asm is pretty bad at reporting the cause of size problems

[14:18] <M-Illandan> perl6-jvm/nqp

[14:19] <M-Illandan> no, it just outright throws that runtime exception

[14:19] <toolforger> it doesn't even throw a specialized exception, so the driver has to inspect the text  of the exception message

[14:19] <toolforger> according to Java lore, that's Worst Practices

[14:20] *** ufobat left
[14:20] <toolforger> worth filing as a bug against ASM

[14:21] <timotimo> huh, is it really asm that's throwing the exception?

[14:21] <M-Illandan> hmm, what would you throw otherwise?

[14:21] <pmurias> inspecting the text of an exception messages seems icky in Perl 6 too :/

[14:21] <toolforger> I'd do "class ClassFileSizeTooLarge extends RuntimeException" as a fast fix

[14:22] <toolforger> and/or give ASM an error-state reporting API

[14:22] <M-Illandan> Most of these methods generated by nqp-j are synthetic methods. How would you deal with them? 

[14:23] <toolforger> THe only thing you can do is to split them up so each individual method is less than the size limit

[14:24] <toolforger> maybe let the compiler emit a warning message if a method is more than some arbitrary (but still valid) size

[14:24] *** Ven joined
[14:24] <toolforger> say, 32K

[14:25] <toolforger> so people get an early warning if one of these synthetic methods warrants attention in case it grows

[14:26] <toolforger> the other option would be to really split the function, but you need to know the basic blocks and otherwise inner structure to do that

[14:27] * toolforger never liked those size limits in the JVM

[14:27] *** xinming left
[14:29] <toolforger> oh. There's another reasons to stay well below maximum sizes

[14:30] <toolforger> Somebody might want to instrument the generated class, and this tends to increase sizes

[14:31] <pmurias> having the compiler split classes up seems a much better solution the forcing users to do it manually in their Perl6 code

[14:31] * toolforger agrees

[14:32] <toolforger> question is how much work it would be to teach the compiler this particular trick

[14:32] <toolforger> and what the performance implications would be

[14:33] <timotimo> it's not the classes that are too big, it's the compunits ;(

[14:33] <toolforger> I think class size is pretty unlimited in the class file format

[14:34] <toolforger> but I recall having seen multiple 64k limits

[14:34] *** xinming joined
[14:35] <pmurias> timotimo: so the setting would need to be split up?

[14:35] <toolforger> not sure which ones, but number of methods, string pool size, number of local variables and such would all be candidates I'd want to check

[14:35] <timotimo> pmurias: that's my impression

[14:35] <timotimo> ideally we'd just be able to generate multiple .class files per compunit

[14:38] *** xinming left
[14:39] <toolforger> splitting up is going to have a performance impact

[14:39] <toolforger> I am not sure that automatic splitting is really a good idea

[14:40] *** xinming joined
[14:40] <toolforger> I'd also really like to see Perl classes map to Java classes

[14:40] <toolforger> s/Java classes/Java class files/

[14:40] <toolforger> helps with system analysis

[14:43] <toolforger> btw some people wrote visitors that walk the AST and just count sizes instead of actually generating code

[14:44] <toolforger> not sure how much that would help with ASM actually

[14:44] *** xinming left
[14:45] *** xinming joined
[14:46] *** zakharyas left
[14:46] <toolforger> One approach might be to pack all local variables into a synthetic data class, and do "void fn(params) { SDC locals = new SDC; fn1(locals, params); fn2(locals, params); ...; return fn99(locals, params)". Would need a lot of tweaking to deal with loops etc. (that's why I said "basic blocks" above).

[14:52] *** kurahaupo joined
[14:53] <pmurias> toolforger: what's the alternative to splitting?

[14:53] <pmurias> "sorry you compunit is too big, can't compile :/"

[14:56] <dalek> perl6-most-wanted: d5262b2 | (Tom Browder)++ | most-wanted/modules.md:

[14:56] <dalek> perl6-most-wanted: add WIP module Text::More

[14:56] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/d5262b2dfc

[14:58] <MasterDukeLaptop> toolforger: have you got a rakudo-j built?

[14:59] <dalek> perl6-most-wanted: e62a9e1 | (Tom Browder)++ | most-wanted/modules.md:

[14:59] <dalek> perl6-most-wanted: add WIP module CGI

[14:59] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/e62a9e1256

[15:00] <nine> Even if splitting has a performance impact it beats not being able to compile rakudo at all.

[15:02] <dalek> perl6-most-wanted: 8862761 | (Tom Browder)++ | most-wanted/modules.md:

[15:02] <dalek> perl6-most-wanted: ass WIP module Date::Time::Format::More

[15:02] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/8862761f9c

[15:02] <MasterDukeLaptop> toolforger: i'm afk for a bit, but i'll check back if you have any questions

[15:03] <dalek> perl6-most-wanted: 8d95d92 | (Tom Browder)++ | most-wanted/modules.md:

[15:03] <dalek> perl6-most-wanted: correct module name

[15:03] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/8d95d92cc2

[15:03] <pmurias> nine: splitting CORE is one way to avoid doing the splitting for rakudo-j

[15:05] <pmurias> nine: I mean splitting it up on the Perl 6 level

[15:05] <dalek> perl6-most-wanted: c0d154d | (Tom Browder)++ | most-wanted/modules.md:

[15:05] <dalek> perl6-most-wanted: add WIP module DateTime::Math::More

[15:05] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/c0d154df13

[15:06] *** bjz joined
[15:07] <dalek> perl6-most-wanted: b991ba8 | (Tom Browder)++ | most-wanted/modules.md:

[15:07] <dalek> perl6-most-wanted: add WIP module Number::More

[15:07] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/b991ba8d55

[15:07] *** MasterDukeLaptop left
[15:09] *** skids joined
[15:15] *** bjz left
[15:16] <toolforger> Splitting at the Perl level would definitely be the fastest approach to get results

[15:20] *** pyrimidi_ joined
[15:20] *** pyrimidine left
[15:21] *** setty1 left
[15:48] *** domidumont joined
[15:51] *** pyrimidine joined
[15:51] *** pyrimidi_ left
[15:53] *** mr-foobar joined
[15:54] *** pierre_ left
[15:56] *** pyrimidi_ joined
[15:56] *** pyrimidine left
[15:57] *** lukaramu left
[16:00] *** pierre_ joined
[16:03] *** kurahaupo left
[16:04] *** grumble is now known as grumbells

[16:11] *** Ven left
[16:15] *** espadrine joined
[16:24] *** pierre_ left
[16:25] *** pierre_ joined
[16:27] *** domidumont left
[16:29] *** pierre_ left
[16:30] *** khw joined
[16:36] *** leego left
[16:36] *** pierre_ joined
[16:37] *** leego joined
[16:38] *** pierre_ left
[16:38] *** pierre_ joined
[17:09] *** espadrine left
[17:13] <moritz> m: say (my &code).^name

[17:13] <camelia> rakudo-moar 328281: OUTPUT¬´Callable‚ê§¬ª

[17:14] <notviki> m: say (my @code).^name

[17:14] <camelia> rakudo-moar 328281: OUTPUT¬´Array‚ê§¬ª

[17:14] <notviki> m: say (my %code).^name

[17:14] <camelia> rakudo-moar 328281: OUTPUT¬´Hash‚ê§¬ª

[17:23] *** pierre__ joined
[17:25] <timotimo> m: say (my |code).^name

[17:25] <camelia> rakudo-moar 328281: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Malformed my‚ê§at <tmp>:1‚ê§------> 3say (my7‚èè5 |code).^name‚ê§¬ª

[17:25] *** pierre_ left
[17:26] <timotimo> m: say (my \code).^name

[17:26] <camelia> rakudo-moar 328281: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Term definition requires an initializer‚ê§at <tmp>:1‚ê§------> 3say (my \code7‚èè5).^name‚ê§¬ª

[17:26] <AlexDaniel> m: say (my $code).^name

[17:26] <camelia> rakudo-moar 328281: OUTPUT¬´Any‚ê§¬ª

[17:27] *** skids left
[17:28] <AlexDaniel> m: proto \x

[17:28] <camelia> rakudo-moar 328281: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§ scoped term definitions (only 'my' is supported at the moment) not yet implemented. Sorry. ‚ê§at <tmp>:1‚ê§------> 3proto \x7‚èè5<EOL>‚ê§    expecting any of:‚ê§        new term to be defined‚ê§¬ª

[17:29] <AlexDaniel> what scoped? :)

[17:29] <AlexDaniel> m: proto $x

[17:29] <camelia> rakudo-moar 328281: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot use '(unknown scope)' with variable declaration‚ê§at <tmp>:1‚ê§------> 3proto $x7‚èè5<EOL>‚ê§    expecting any of:‚ê§        constraint‚ê§¬ª

[17:29] <AlexDaniel> ah, unknown scope! Alright!

[17:30] *** Ven joined
[17:33] <timotimo> fun

[17:36] *** espadrine joined
[17:43] *** pierre__ left
[17:49] *** mr_ron joined
[17:59] *** raiph joined
[18:05] <raiph> m: say bar # Can one intercept an X::Undeclared error so this says 'bar'?

[18:05] <camelia> rakudo-moar 328281: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    bar used at line 1. Did you mean 'VAR', 'bag'?‚ê§‚ê§¬ª

[18:06] <timotimo> that's compile-time

[18:09] *** StefanS_ joined
[18:10] *** toolforger left
[18:13] <AlexDaniel> m: BEGIN {say ‚Äòbar :P‚Äô; exit}; say bar

[18:13] <camelia> rakudo-moar 328281: OUTPUT¬´bar :P‚ê§¬ª

[18:14] <AlexDaniel> m: say bar; BEGIN {say ‚Äòbar :P‚Äô; exit}

[18:14] <camelia> rakudo-moar 328281: OUTPUT¬´bar :P‚ê§¬ª

[18:16] <raiph> AlexDaniel: :P

[18:16] <AlexDaniel> idable6: :P

[18:16] <AlexDaniel> ubidable6: :P

[18:16] <unicodable6> AlexDaniel, U+003A COLON [Po] (:)

[18:16] <unicodable6> AlexDaniel, U+0050 LATIN CAPITAL LETTER P [Lu] (P)

[18:16] <AlexDaniel> ubistdable6: :P

[18:16] <unicodable6> AlexDaniel, U+0050 LATIN CAPITAL LETTER P [Lu] (P)

[18:16] <unicodable6> AlexDaniel, U+003A COLON [Po] (:)

[18:16] <bisectable6> AlexDaniel, On both starting points (old=2015.12 new=3282813) the exit code is 0 and the output is identical as well

[18:16] <bisectable6> AlexDaniel, Output on both points: WARNINGS for /tmp/JxAlwkB9mc:‚ê§Useless use of ":P" in sink context (line 1)

[18:17] <AlexDaniel> I wonder if there's a way to trigger all 6 bots at the same time

[18:17] <raiph> timotimo: thx, but that doesn't mean the answer is no, right?

[18:21] *** itcharlie_linux left
[18:29] *** espadrine left
[18:35] *** djbkd joined
[18:54] *** StefanS_ left
[18:56] <notviki> m: BEGIN %*ENV<RAKUDO_EXCEPTIONS_HANDLER>="Foo"; class Exceptions::Foo {method process ($e) { say $e.routine_suggestion.keys[0]; False } };  { say bar }

[18:56] <camelia> rakudo-moar 328281: OUTPUT¬´bar‚ê§¬ª

[18:59] <timotimo> raiph: you can build a slang that makes undefined specifiers evaluate to their name as a string

[18:59] <raiph> notviki: thx

[19:00] <raiph> timotimo: thx

[19:04] *** BenGoldberg joined
[19:17] *** wamba joined
[19:40] *** darutoko left
[19:43] *** teksteiner left
[19:50] *** wamba left
[19:56] *** floutenvy joined
[19:58] <samcv> morning everybody

[19:59] <BenGoldberg> o/

[19:59] <BenGoldberg> Good afternoon.

[20:02] *** floutenvy left
[20:05] <samcv> https://i.imgur.com/4UDK3Rz.jpg

[20:06] <samcv> come in noodles. paging noodles

[20:09] <notviki> that was a fast sleep...

[20:12] *** MasterDukeLaptop joined
[20:13] <MasterDukeLaptop> m: sub a() { b }; sub b() { say callframe }; a;

[20:13] <camelia> rakudo-moar 328281: OUTPUT¬´<tmp> at line 1‚ê§¬ª

[20:14] <MasterDukeLaptop> i'm blanking, how do i get 'a' printed?

[20:15] <notviki> m: sub a() { b }; sub b() { say callframe(1).code.name }; a;

[20:15] <camelia> rakudo-moar 328281: OUTPUT¬´a‚ê§¬ª

[20:16] <MasterDukeLaptop> thanks

[20:24] <samcv> AlexDaniel, ‚ÅÇ how about asterism for the hyper whatever star?

[20:24] <samcv> u: ‚ÅÇ

[20:24] <unicodable6> samcv, U+2042 ASTERISM [Po] (‚ÅÇ)

[20:25] <AlexDaniel> BLARGH!!!!!

[20:25] <AlexDaniel> is there any way to disable the built-in shit editor in GitHub?

[20:25] <samcv> disable? you mean the text editor?

[20:25] <AlexDaniel> I can't stand it. It the worst idea ever

[20:25] <AlexDaniel> yes

[20:25] <samcv> don't use it

[20:25] <AlexDaniel> I want to have a regular browser textarea

[20:26] <samcv> oh you mean the box? the box that holds the document?

[20:26] <notviki> So that you curse every time you press TAB to indent? :P

[20:26] <samcv> ‚Üπ

[20:26] <notviki> AlexDaniel: I need tickets to fix!

[20:27] *** floutenvy joined
[20:27] <AlexDaniel> so that I can paste stuff with the middle click, so that I can write unicode characters without breaking everything, so that I can press ctrl+f once without needing to double check if it is using their search field (otherwise it doesn't really search)‚Ä¶

[20:28] <AlexDaniel> so that I don't have to wait for 10 seconds before the goddamn editor actually loads up

[20:28] * notviki has none of those issues with that editor....

[20:28] <AlexDaniel> I never use it to write code, so I don't care about TAB (I've never actually noticed)

[20:28] <notviki> well, except for middle click. I don't use it to paste, so I've no idea what it does

[20:29] <AlexDaniel> samcv: not a bad idea of course, but why not ‚Åë?

[20:29] <samcv> quite

[20:29] *** lichtkind__ joined
[20:30] <AlexDaniel> though arguably if * is whatever and ‚ÅÇ is hyperwhatever, then we have some room for superwhatever ‚Åë

[20:30] <samcv> or ‚Åë for whatever and ‚ÅÇ for hyper whatever? idk. but we should have a different star possible for the whatever to distinguish it from the other * operators

[20:31] <samcv> u: asterisk

[20:31] <unicodable6> samcv, U+002A ASTERISK [Po] (*)

[20:31] <unicodable6> samcv, U+0359 COMBINING ASTERISK BELOW [Mn] (‚óåÕô)

[20:31] <unicodable6> samcv, U+204E LOW ASTERISK [Po] (‚Åé)

[20:31] <unicodable6> samcv, https://gist.github.com/a14f9b55bc577321616dcb20a93837ab

[20:31] <AlexDaniel> u: ‚ÅÇ

[20:31] <unicodable6> AlexDaniel, U+2042 ASTERISM [Po] (‚ÅÇ)

[20:31] <AlexDaniel> asterism :o

[20:32] <AlexDaniel> notviki: I love your enthusiasm! I'll try to start today (it needs some code to be written)

[20:33] <AlexDaniel> though if it results in nothing, I'm not going to reveal what I was trying :P

[20:33] *** lichtkind_ left
[20:34] *** floutenvy left
[20:39] <kalkin-> samcv: I like the idea

[20:39] <samcv> of the two for the whatever star and then ‚ÅÇ for hyper whatever?

[20:40] <samcv> what's the long way of writing hyper whatever?

[20:41] * samcv isn't sure why she uses the right alt key not the menu key since she never uses the menu key (for Compose key)

[20:41] <samcv> though i don't use the right alt for ALT either!

[20:41] <samcv> so it's right by my thumb on my laptop

[20:42] *** labster joined
[20:42] <geekosaur> sometimes have to do more work to get the menu key to work; gnome/unity/mate establish passive grabs on it, for example, and you have to disable that or you get unexpected behavior when defining it as the Compose key

[20:43] *** TEttinger joined
[20:45] <samcv> also I can't get konsole to work with my compose key :( it's not following what all the other applications are doing. I mean it only does the system wide ones not my user configured one

[20:47] <notviki> samcv: **

[20:47] <notviki> (what's the long way of writing hyper whatever?)

[20:47] <samcv> i don't like that tbh

[20:47] *** Tonik joined
[20:48] <notviki> m: say **.uc.("a".."z")

[20:48] <camelia> rakudo-moar 328281: OUTPUT¬´(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z)‚ê§¬ª

[20:48] <notviki> m: say ("a", **, "c") ~~ ("a", "b", "b", "c")

[20:48] <camelia> rakudo-moar 328281: OUTPUT¬´False‚ê§¬ª

[20:48] <notviki> :S

[20:48] <notviki> m: say ("a", "b", "b", "c") ~~ ("a", **, "c")

[20:48] <camelia> rakudo-moar 328281: OUTPUT¬´True‚ê§¬ª

[20:51] <notviki> m: \term:<‚ÅÇ> .= new HyperWhatever; say ("a", "b", "b", "c") ~~ ("a", ‚ÅÇ, "c")

[20:51] <camelia> rakudo-moar 328281: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Preceding context expects a term, but found infix .= instead‚ê§at <tmp>:1‚ê§------> 3\term:<‚ÅÇ> .=7‚èè5 new HyperWhatever; say ("a", "b", "b", ‚ê§¬ª

[20:51] <notviki> m: my \term:<‚ÅÇ> = new HyperWhatever:; say ("a", "b", "b", "c") ~~ ("a", ‚ÅÇ, "c")

[20:51] <camelia> rakudo-moar 328281: OUTPUT¬´Cannot make a HyperWhatever object using .new‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:51] <notviki> screw you!

[20:51] <notviki> m: my \term:<‚ÅÇ> = **; say ("a", "b", "b", "c") ~~ ("a", ‚ÅÇ, "c")

[20:51] <camelia> rakudo-moar 328281: OUTPUT¬´True‚ê§¬ª

[20:51] <notviki> \o/

[20:52] * notviki doesn't like it

[20:53] <notviki> m: my \term:<‚ÅÇ> = **; say ("a", "b", "b", "c") ~~ ("a",  adsftfsdugjhert sdgvfb, "c")

[20:53] <camelia> rakudo-moar 328281: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routines:‚ê§    adsftfsdugjhert used at line 1‚ê§    sdgvfb used at line 1‚ê§‚ê§¬ª

[20:53] <notviki> ugh copy-paste is broken again... I hate this system

[20:53] <notviki> m: my \term:<‚Åë> = **; say ("a", "b", "b", "c") ~~ ("a", ‚Åë, "c")

[20:53] <camelia> rakudo-moar 328281: OUTPUT¬´True‚ê§¬ª

[20:54] <samcv> hmm guess i can do 3 + * or 2 + * to get the two asterisk or three one

[20:54] <samcv> nice

[21:01] *** mscha joined
[21:02] <mscha> This may be a dumb question, but if you have a sub MAIN($foo, Bool :$verbose=True), how do you run it with $verbose = False?

[21:02] <mscha> Usage:   foo [--verbose (False True)] <foo>

[21:02] <mscha> Which makes no sense to me.

[21:03] <notviki> mscha: --verbose=False should work

[21:04] <notviki> depending on your compiler version

[21:06] <samcv> 1

[21:06] <samcv> down vote

[21:06] <samcv> I was having a very similar issue and for some reason what worked for me was putting all my custom compose key settings at the top of the original file all the way over in /usr/share/X11/locale/en_US.UTF-8/Compose and then making a hardlink to it called .XCompose in the home directory instead of writing my own .XCompose in the home directory from scratch. It worked for me, maybe it'll work for you.

[21:06] <samcv> hmm

[21:06] <samcv> ok i will have to try that so Konsole doesn't be dumb and ignore my settings!

[21:06] <samcv> i think it worked on an older version of qt or kde or something rather

[21:08] *** FROGGS left
[21:12] <mscha> notviki: doesn't work for me (Rakudo Star 2016.11)  :-(

[21:12] <mscha> ./foo --verbose=False bar

[21:12] <mscha> Usage:   foo [--verbose (False True)] <foo>

[21:14] <notviki> mscha: that feature was included only in 2016.12 release

[21:14] <notviki> (and we don't have Rakudo Star for that release)

[21:14] <mscha> Ah.  :)

[21:14] *** Ben_Goldberg joined
[21:14] *** BenGoldberg left
[21:15] <geekosaur> samcv, toolkits like gtk and qt don't use the stock compose stuff

[21:16] <geekosaur> that hack might work (but also might be overwritten by updates). there's other stupid you have to do for gtk and qt in the general case.

[21:17] *** BenGoldberg_ joined
[21:17] <notviki> mscha: actually, doesn't work even on my HEAD

[21:17] * notviki looks closer

[21:17] *** Ben_Goldberg left
[21:17] *** BenGoldberg_ is now known as Ben_Goldberg

[21:17] *** Ben_Goldberg is now known as BenGoldberg

[21:18] <notviki> mscha: oh, it works :) I just misspelt the name

[21:18] <mscha> :)

[21:19] <notviki> mscha: --/verbose

[21:19] <notviki> That should work everywhere

[21:20] <mscha> Ah, it does!  I thought I tried that (after reading Synopsis 6)...

[21:21] <mscha> Of course, even nice would be if --no-verbose would automagically work...

[21:22] <samcv> geekosaur, they are supposed to though

[21:22] <samcv> sec geekosaur let me show you my config that should make all gtk and qt programs use it

[21:22] <geekosaur> not really, as I understand it. they *emulate* it, to varying extents

[21:23] <geekosaur> but they use XIM instead of XCompose

[21:23] <samcv> here https://github.com/samcv/dot-files/blob/master/etc/profile.d/compose.sh

[21:23] <samcv> exactly

[21:23] <samcv> that config worked up until very recently

[21:25] *** Tonik left
[21:31] *** mscha left
[21:37] *** Ben_Goldberg joined
[21:37] *** BenGoldberg left
[21:37] *** Ben_Goldberg is now known as BenGoldberg

[21:41] *** bjz joined
[21:42] *** labster left
[21:42] *** aindilis` joined
[21:44] *** aindilis left
[21:45] *** dantia left
[21:47] <samcv> wow that hard link totally screwed up my X

[21:47] <samcv> mad it lag and randomly freeze

[21:48] <samcv> oh well

[21:52] *** lukaramu joined
[21:53] *** djbkd left
[21:54] *** djbkd joined
[21:59] *** djbkd left
[22:03] *** wamba joined
[22:06] *** rindolf left
[22:09] *** mr_ron left
[22:13] *** samcv joined
[22:14] *** samcv left
[22:14] *** samcv joined
[22:17] *** lostinfog joined
[22:17] *** domidumont joined
[22:18] *** lostinfog left
[22:20] *** floutenvy joined
[22:25] *** mr_ron joined
[22:27] *** grondilu joined
[22:31] *** domidumont left
[22:33] *** domidumont joined
[22:34] *** pierrot left
[22:34] *** bjz left
[22:35] <rightfold> I finally get the MONKEY-SEE-NO-EVAL pun

[22:35] *** floutenvy left
[22:36] <notviki> What's the pun?

[22:36] <rightfold> https://en.wikipedia.org/wiki/Three_wise_monkeys

[22:37] * notviki wonders where MONKEY-GUTS fit into that pun....

[22:40] *** floutenvy joined
[22:42] *** floutenvy left
[22:43] <rightfold> Where can I report docs.perl6.org bugs?

[22:43] <rightfold> As in UI bugs

[22:45] <AlexDaniel> huggable: doc issue

[22:45] <huggable> AlexDaniel, nothing found

[22:45] <AlexDaniel> rightfold: https://github.com/perl6/doc/issues

[22:46] <AlexDaniel> rightfold: label it as ÔΩ¢siteÔΩ£

[22:46] <rightfold> thanks

[22:46] <El_Che> rightfold: or send a PR

[22:46] <rightfold> I like to discuss issues before PRing right away, to make sure it's actually an issue :)

[22:47] <El_Che> rightfold: of course. It depends what it is (a typo, an example, something just wrong, etc)

[22:49] *** ab6tract left
[22:52] <rightfold> AlexDaniel: I can't add labels though

[22:52] <AlexDaniel> rightfold: don't worry

[22:52] <rightfold> :3

[22:55] *** floutenvy joined
[23:00] *** pierrot joined
[23:01] *** floutenvy left
[23:02] *** floutenvy joined
[23:08] *** domidumont left
[23:17] <MasterDukeLaptop> nqp: class A { proto method a() {*}; multi method a($b) { say("scalar") }; multi method a(@b) { say("array") } }; A.a(34); A.a(["cd"])

[23:17] <camelia> nqp-moarvm: OUTPUT¬´Too many positionals passed; expected 1 argument but got 2‚ê§   at <unknown>:1  (<ephemeral file>:a)‚ê§ from <tmp>:1  (<ephemeral file>:<mainline>)‚ê§ from gen/moar/stage2/NQPHLL.nqp:1577  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:eval)‚ê§ from ge‚Ä¶¬ª

[23:18] <MasterDukeLaptop> nqp: class A { proto method a(|) {*}; multi method a($b) { say("scalar") }; multi method a(@b) { say("array") } }; A.a(34); A.a(["cd"])

[23:18] <camelia> nqp-moarvm: OUTPUT¬´Unable to parse expression in method_def; couldn't find final ')'  at line 2, near "|) {*}; mu"‚ê§   at gen/moar/stage2/NQPHLL.nqp:765  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:panic)‚ê§ from gen/moar/stage2/NQPHLL.nqp:772  (/home/camelia/rakudo-‚Ä¶¬ª

[23:18] <MasterDukeLaptop> ^^^ can i do what i want in nqp?

[23:19] <MasterDukeLaptop> m: class A { proto method a(|) {*}; multi method a($b) { say("scalar") }; multi method a(@b) { say("array") } }; A.a(34); A.a(["cd"])

[23:19] <camelia> rakudo-moar 38ec79: OUTPUT¬´scalar‚ê§array‚ê§¬ª

[23:20] <MasterDukeLaptop> works in perl 6

[23:20] <MasterDukeLaptop> nqp: class A { proto method a($foo) {*}; multi method a($b) { say("scalar") }; multi method a(@b) { say("array") } }; A.a(34); A.a(["cd"])

[23:20] <camelia> nqp-moarvm: OUTPUT¬´Ambiguous dispatch to multi 'a'.‚ê§   at gen/moar/stage2/NQPCORE.setting:362  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPCORE.setting.moarvm:dispatch)‚ê§ from <tmp>:1  (<ephemeral file>:a)‚ê§ from <tmp>:1  (<ephemeral file>:<mainline>)‚ê§ from gen/moar/stage2‚Ä¶¬ª

[23:26] <dalek> doc: 81f6ddc | (Zoffix Znet)++ | html/js/main.js:

[23:26] <dalek> doc: Do not focus search with Escape key

[23:26] <dalek> doc: 

[23:26] <dalek> doc: Unless we're at the very top of the page

[23:26] <dalek> doc: 

[23:26] <dalek> doc: Fixes #1078

[23:26] <dalek> doc: review: https://github.com/perl6/doc/commit/81f6ddc233

[23:27] <rightfold> yay

[23:27] *** bjz joined
[23:29] *** sammers joined
[23:31] *** stanley left
[23:41] *** Rawriful left
[23:44] <samcv> nice found this on reddit. if you add this to your ~/.inputrc file echo 'set completion-ignore-case On' >> /etc/inputrc

[23:44] <samcv> whenever you type the letter e, it will print a super long string of SSSSSSSSSSSSSS

[23:44] <samcv> but only that letter

[23:44] <samcv> would be an alright prank

[23:45] <AlexDaniel> huh?

[23:45] <samcv> https://www.reddit.com/r/archlinux/comments/5k1w5l/when_i_press_e_in_terminal_i_get_an_infinite/

[23:45] <samcv> when you're typing, whenever the letter e is pressed it just starts dumping a ton of the letter S

[23:45] <samcv> and doesn't stop

[23:49] <BenGoldberg> Zoffix++

[23:50] *** labster joined
[23:51] <dalek> doc: 4d2f623 | titsuki++ | doc/Type/ (2 files):

[23:51] <dalek> doc: Document item

[23:51] <dalek> doc: review: https://github.com/perl6/doc/commit/4d2f62313e

[23:51] <dalek> doc: 8fe7351 | titsuki++ | / (20 files):

[23:51] <dalek> doc: Merge remote-tracking branch 'upstream/master' into add-item

[23:51] <dalek> doc: review: https://github.com/perl6/doc/commit/8fe7351dc4

[23:51] <dalek> doc: d34217f | titsuki++ | doc/Type/Any.pod6:

[23:51] <synopsebot6> Link: http://doc.perl6.org/type/Any

[23:51] <dalek> doc: Use dd instead of smart match

[23:51] <dalek> doc: review: https://github.com/perl6/doc/commit/d34217f01b

[23:51] <dalek> doc: c72d402 | titsuki++ | doc/Type/ (2 files):

[23:51] <dalek> doc: Merge pull request #1076 from titsuki/document-item

[23:51] <dalek> doc: 

[23:51] <dalek> doc: Document item

[23:51] <dalek> doc: review: https://github.com/perl6/doc/commit/c72d40204d

[23:52] *** floutenvy left
[23:55] <rightfold> Hmm, can't use native functions with *

