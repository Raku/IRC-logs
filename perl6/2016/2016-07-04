[00:06] *** torbjorn joined
[00:23] *** TimToady_ is now known as TimToady

[00:53] *** kurahaupo joined
[00:54] *** rgrinberg left
[00:54] *** rgrinberg joined
[01:06] *** rsl left
[01:11] *** canopus left
[01:12] *** kalkin- left
[01:12] *** kalkin-_ joined
[01:13] *** vytas left
[01:16] *** Azry left
[01:18] *** rgrinberg left
[01:18] *** rgrinberg joined
[01:19] *** canopus joined
[01:26] *** vytas joined
[01:27] *** yqt left
[01:28] *** cbk left
[01:33] *** canopus left
[01:38] *** canopus joined
[01:45] *** ilbot3 left
[01:46] *** kurahaupo left
[01:46] *** rgrinberg left
[01:47] *** rgrinberg joined
[01:47] *** kurahaupo joined
[01:47] *** ilbot3 joined
[01:49] *** kurahaupo_ joined
[01:52] *** kurahaupo left
[01:58] *** araujo_ joined
[02:02] *** araujo left
[02:06] *** noganex joined
[02:07] *** TEttinger left
[02:08] *** adu joined
[02:09] *** noganex_ left
[02:15] *** tbrowder left
[02:25] *** AlexDaniel joined
[02:28] *** kid511 joined
[02:29] *** kid51 left
[02:35] *** kid51 joined
[02:37] *** kid511 left
[02:43] *** AlexDaniel left
[02:46] <awwaiid> thanks parabolize :)

[02:54] *** Azry joined
[02:54] *** finanalyst joined
[03:10] *** TEttinger joined
[03:11] *** kent\n left
[03:13] *** stephen joined
[03:13] *** stephen is now known as TheDir

[03:15] *** aries_liuxueyang left
[03:17] *** aries_liuxueyang joined
[03:18] *** kent\n joined
[03:18] *** kent\n left
[03:18] *** kent\n joined
[03:22] *** perturbation left
[03:26] *** finanalyst left
[03:34] *** kid51 left
[03:36] *** molaf joined
[03:39] *** huggable left
[03:40] *** huggable joined
[03:45] *** molaf left
[03:47] *** dmaestro left
[03:51] *** buharin joined
[03:54] *** buharin left
[03:55] *** buharin joined
[03:55] *** jjido joined
[03:57] *** Ben_Goldberg joined
[04:01] *** jjido left
[04:02] *** jjido joined
[04:02] *** jjido left
[04:03] *** jjido joined
[04:11] *** jjido left
[04:16] *** buharin left
[04:17] *** DoverMo joined
[04:19] *** BenGoldberg left
[04:19] *** Ben_Goldberg is now known as BenGoldberg

[04:23] *** khw left
[04:38] *** adu left
[04:44] *** xinming_ joined
[04:47] *** xinming left
[04:52] *** Cabanossi left
[04:55] *** Cabanossi joined
[05:06] *** flaviusb joined
[05:10] *** rgrinberg left
[05:15] *** CIAvash joined
[05:41] *** Senj joined
[05:54] *** skids left
[05:57] *** Senj left
[06:21] *** mr-foobar left
[06:23] *** darutoko joined
[06:26] *** mohae_ joined
[06:29] *** mohae left
[06:31] *** domidumont joined
[06:31] *** jjido joined
[06:32] *** jack_rabbit joined
[06:35] *** domidumont left
[06:35] *** cyphase left
[06:36] *** domidumont joined
[06:39] *** jjido left
[06:40] *** cyphase joined
[06:42] *** jjido joined
[06:54] *** domidumont left
[07:03] *** araujo_ left
[07:08] *** jjido left
[07:09] *** mr-foobar joined
[07:12] *** RabidGravy joined
[07:14] *** domidumont joined
[07:16] *** mr-foobar left
[07:18] *** mr-foobar joined
[07:21] <RabidGravy> boom

[07:21] *** wamba joined
[07:25] *** zakharyas joined
[07:30] *** abraxxa joined
[07:34] *** |Sno| left
[07:39] *** abraxxa left
[07:39] *** abraxxa joined
[07:39] *** huggable left
[07:40] *** huggable joined
[07:40] <RabidGravy> I can tell things have been happening since I got distracted by current affairs, five of my modules got broken

[07:42] <lizmat> RabidGravy: any pointers as to what got broken?

[07:43] <RabidGravy> something returns an anonymous class rather than a Distribution object,  IO::Path now has a .mode method, and some other as yet undiagnosed things

[07:44] <lizmat> eh, how can an addition of a method break things ?

[07:44] *** g4 joined
[07:44] <RabidGravy> if you add a method to the class it does

[07:47] <RabidGravy> which is what IO::Path::Mode does, not sure how I'm going to fix that (my .mode returns an Int with a role that makes sense of the value)

[07:50] <lizmat> ah, ok, clear now

[07:50] <lizmat> :-(

[07:51] <RabidGravy> I'm sure I'll think of something, I'll consider it an opportunity to make something better :)

[07:52] *** canopus left
[07:53] *** canopus joined
[07:55] *** usiu9 joined
[07:56] *** sftf left
[07:58] *** dakkar joined
[08:07] *** DoverMo left
[08:11] <RabidGravy> Oooh, no that is actual a genuine bug IMO ("something returns an anonymous class rather than a Distribution object")

[08:11] <lizmat> maybe that was caused by the integration of ugexe's work by nine?

[08:12] <RabidGravy> m: say Distribution.new

[08:12] <camelia> rakudo-moar 74a079: OUTPUT«<anon|786110368>.new(name => Any, auth => Any, author => Any, authority => Any, api => Any, ver => Any, version => Any, description => Any, depends => [], provides => {}, files => {}, source-url => Any)␤»

[08:12] <RabidGravy> almost certainly

[08:12] <psch> m: say Distribution.HOW.^name

[08:12] <camelia> rakudo-moar 74a079: OUTPUT«Perl6::Metamodel::ParametricRoleGroupHOW␤»

[08:13] <psch> punning gone weird..? 

[08:13] <psch> i remember some bit of discussion about this a few days back, in #perl6-dev

[08:20] *** |Sno| joined
[08:23] <RabidGravy> oh, it actually creates an anonymous class deliberately in the constructor

[08:23] <psch> star-m: say Distribution.HOW.^name

[08:23] <camelia> star-m 2016.04: OUTPUT«Perl6::Metamodel::ClassHOW␤»

[08:23] <psch> yeah, turning it into a role but keeping backwards compat or so was the reasoning iirc

[08:24] <psch> i don't remember or even knew the details :)

[08:31] *** ssqq joined
[08:38] <RabidGravy> right, I think it's go with the "heritage" interface for the time being to get App::ModuleSnap working again and then fix it again, because it appears there is a better way to do what it is doing

[08:42] *** jkramer left
[08:51] <RabidGravy> wahay! Audio::Silan was broken by something unrelated to changes to rakudo

[08:52] *** donaldh joined
[08:53] *** Senj joined
[08:55] *** donaldh1 joined
[08:55] *** donaldh left
[09:02] *** donaldh1 left
[09:03] <DrForr> Changes to rakudo... great :)

[09:06] *** grondilu joined
[09:10] *** user9 joined
[09:16] *** cyphase left
[09:17] *** cyphase joined
[09:25] *** labster left
[09:25] *** labster joined
[09:26] *** labster left
[09:32] *** jonas2 joined
[09:38] *** ure34 joined
[09:38] *** usiu9 left
[09:38] *** ure34 left
[09:40] *** wamba left
[09:40] *** wamba joined
[09:45] *** dalek left
[09:46] *** labster joined
[09:50] *** BenGoldberg left
[10:00] *** TEttinger left
[10:01] *** aries_liuxueyang left
[10:03] *** salv0 joined
[10:04] <wamba> m: my @objects=<a b c d>; my @atributes=(1, 2); my $relations=set( "a" => 1, "a" => 2, "b" => 1, "c" =

[10:04] <camelia> rakudo-moar ffc79b: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3set( "a" => 1, "a" => 2, "b" => 1, "c" =7⏏5<EOL>␤    expecting any of:␤        prefix␤        term␤»

[10:04] <wamba> > 2 ); say set ( $_ if ($_ X=> 1,2).all (elem) $relations  for @objects)

[10:04] <wamba> m:my @objects=<a b c d>; my @atributes=(1, 2); my $relations=set( "a" => 1, "a" => 2, "b" => 1, "c" => 2 ); say set ( $_ if ($_ X=> 1,2).all (elem) $relations  for @objects)

[10:04] <wamba> m: my @objects=<a b c d>; my @atributes=(1, 2); my $relations=set( "a" => 1, "a" => 2, "b" => 1, "c" => 2 ); say set ( $_ if ($_ X=> 1,2).all (elem) $relations  for @objects)

[10:04] <camelia> rakudo-moar ffc79b: OUTPUT«set(a)␤»

[10:05] <wamba> m: my @objects=<a b c d>; my @atributes=(1, 2); my $relations=set( "a" => 1, "a" => 2, "b" => 1, "c" => 2 ); say set ( $_ if ($_ X=> @atributes).all (elem) $relations  for @objects)

[10:05] <camelia> rakudo-moar ffc79b: OUTPUT«set()␤»

[10:06] *** aries_liuxueyang joined
[10:07] *** AlexDaniel joined
[10:10] <wamba> m: say so all(1 X=> 1,2) (elem) set(1=>1,1=>2)

[10:10] <camelia> rakudo-moar ffc79b: OUTPUT«True␤»

[10:10] <wamba> m: my @a=1,2; say so all(1 X=> @a) (elem) set(1=>1,1=>2)

[10:10] <camelia> rakudo-moar ffc79b: OUTPUT«False␤»

[10:13] <wamba> m: my @a=1,2; dd all(1 X=> @a), all(1 X=> 1,2)

[10:13] <camelia> rakudo-moar ffc79b: OUTPUT«all(1 => 1, 1 => 2)␤all(1 => 1, 1 => 2)␤»

[10:14] <RabidGravy> lizmat, further to earlier 8ad19e2ec3a7be4e83c06de6b6475f5c6596eef1 broke Lumberjack::Application - as it actually did create Backtrace::Frame objects as they are marshalled to/from JSON :(

[10:15] <lizmat> RabidGravy: so you need the named param interface as well...

[10:15] <RabidGravy> yeah, it was never ideal but it kinda worked

[10:16] <RabidGravy> wouldn't just making the explicit constructor a multi fix that?

[10:16] <lizmat> yeah, working on that

[10:17] <wamba> m: my @a=1,2; say so all(1 X=> @a) (elem) set(1=>1,1=>2)

[10:17] <camelia> rakudo-moar ffc79b: OUTPUT«False␤»

[10:17] <wamba>  m: my @a=1,2; say so all(1 X=> 1,2) (elem) set(1=>1,1=>2)

[10:17] <camelia> rakudo-moar ffc79b: OUTPUT«True␤»

[10:18] *** rindolf joined
[10:19] <wamba> why does it give different result?

[10:19] <lizmat> RabidGravy: spectesting

[10:19] <RabidGravy> if it's a problem I can make the thing that gets serialised a sub-class of Backtrace::Frame with its own constructor

[10:20] <lizmat> RabidGravy: don't think it's going to be an issue

[10:27] <lizmat> hmmm.. it appears we lost dalek

[10:28] <lizmat> https://github.com/rakudo/rakudo/commit/c35c56c09f1d0360ac735786   # RabidGravy

[10:29] <RabidGravy> lizmat++ cheers, let me rebuild and check that out

[10:38] <hahainternet> wamba: that's an interesting one

[10:38] <hahainternet> i don't know why that works

[10:39] *** vytas left
[10:40] *** sftf joined
[10:40] *** yqt joined
[10:40] *** Zoffix joined
[10:45] <RabidGravy> lizmat++ yep that's great thanks!  It's probably an incentive to find a better way to capture the "execution context" of the log messages, which was on my TODO as Backtrace is a little slow

[10:46] <gfldex> m: my @a=1,2; say so all(1 X=> @a) (elem) set(1=>1,1=>2)

[10:46] <camelia> rakudo-moar c35c56: OUTPUT«False␤»

[10:46] <gfldex> m: my @a=1,2; say so all(1 X=> |(1,2)) (elem) set(1=>1,1=>2)

[10:46] <camelia> rakudo-moar c35c56: OUTPUT«False␤»

[10:47] <gfldex> wamba: ^^^

[10:47] <Zoffix> m: my @a = 1, 2; dd all(1 X=> @a)

[10:47] <camelia> rakudo-moar c35c56: OUTPUT«all(1 => 1, 1 => 2)␤»

[10:47] <Zoffix> m: my @a = 1, 2; dd all(1 X=> 1,2)

[10:47] <camelia> rakudo-moar c35c56: OUTPUT«all(1 => 1, 1 => 2)␤»

[10:47] <hahainternet> gfldex: what was with the true though?

[10:47] <Zoffix> m: my @a = 1, 2; dd all(1 X=> |(1,2))

[10:47] <camelia> rakudo-moar c35c56: OUTPUT«all(1 => 1 => 2)␤»

[10:47] <Zoffix> I don't get it

[10:48] * hahainternet shrugs, confused

[10:48] <Zoffix> The @a and 1,2 produce exactly the same junction. the |(1,2) is a different junction

[10:49] <gfldex> m: my @a=1,2; dd 1 X=> @a; dd 1 X=> (1,2);

[10:49] <camelia> rakudo-moar c35c56: OUTPUT«(1 => 1, 1 => 2).Seq␤(1 => 1, 1 => 2).Seq␤»

[10:49] <gfldex> odd

[10:50] <Zoffix> m: my @a=1,2; dd (1 X=> @a)».WHICH; dd (1 X=> (1,2))».WHICH; dd (1=>1,1=>2)».WHICH

[10:50] <camelia> rakudo-moar c35c56: OUTPUT«(ObjAt.new, ObjAt.new)␤("Pair|Int|1|Int|1", "Pair|Int|1|Int|2")␤("Pair|Int|1|Int|1", "Pair|Int|1|Int|2")␤»

[10:51] *** pdcawley left
[10:51] <Zoffix> wamba, ^ set membership uses WHICH and apparently 1 X=> @a creates different .WHICHes...

[10:51] *** pdcawley joined
[10:51] <gfldex> i'm not sure if Junctuin (elem) Set makes sense at all

[10:52] <gregf_> *looks like haskell.. all those brackets*

[10:52] <hahainternet> how would you slip that @a into that?

[10:52] *** vytas joined
[10:53] <gfldex> does the (elem) operator collapse the Junction to Bools?

[10:54] <lizmat> (elem) would collapse the junction to a Set, and a Set is a hash of Bool

[10:54] <lizmat> hmmm...

[10:55] <Zoffix> m: my @a=1,2; dd (1 X=> (|@a))».WHICH; dd (1 X=> (1,2))».WHICH; dd (1=>1,1=>2)».WHICH

[10:55] <camelia> rakudo-moar c35c56: OUTPUT«("Pair|Int|1|Pair|77003600",)␤("Pair|Int|1|Int|1", "Pair|Int|1|Int|2")␤("Pair|Int|1|Int|1", "Pair|Int|1|Int|2")␤»

[10:55] <Zoffix> ¯\_(ツ)_/¯

[10:55] <hahainternet> yeah Zoffix i'm confused too!

[10:56] <Zoffix> m: my @a=1,2; dd (1 X=> (|@a))

[10:56] <camelia> rakudo-moar c35c56: OUTPUT«(1 => 1 => 2,).Seq␤»

[10:56] <gfldex> m: my @a=1,2; dd all(1 X=> @a).Set;

[10:56] <camelia> rakudo-moar c35c56: OUTPUT«all(set(1), set(1))␤»

[10:57] <Zoffix> m: my @a=1,2; dd all(1 X=> (1,2)).Set;

[10:57] <camelia> rakudo-moar c35c56: OUTPUT«all(set(1), set(1))␤»

[10:57] <gfldex> m: my @a=1,2; dd all(1 X=> |(1,2)).Set;

[10:57] <camelia> rakudo-moar c35c56: OUTPUT«all(set(1))␤»

[10:57] <Zoffix> m: dd set(1=>1,1=>2)

[10:57] <camelia> rakudo-moar c35c56: OUTPUT«set(1 => 2,1 => 1)␤»

[10:58] <Zoffix> IMO, this stuff should be reported as a bug. It's certainly confusing and unexpected behaviour.

[10:58] <Zoffix> wamba, would you mind reporting it and include the link to this conversation? http://irclog.perlgeek.de/perl6/2016-07-04#i_12780360

[10:58] * Zoffix runs to work

[10:59] <lizmat> Zoffix: afaik, this is according to design

[10:59] *** brrt joined
[10:59] *** labster left
[11:00] <gfldex> m: dd (1=>1, 1=>2).Set; dd all(1=>1, 1=>2); dd all(1=>1, 1=>2).Set

[11:00] <camelia> rakudo-moar c35c56: OUTPUT«set(1)␤all(1 => 1, 1 => 2)␤all(set(1), set(1))␤»

[11:02] <gfldex> m: dd (1=>1, 1=>2).Set # doesn't looks right to me

[11:02] <camelia> rakudo-moar c35c56: OUTPUT«set(1)␤»

[11:03] <llfourn> what's the correct answer?

[11:03] <gfldex> m: dd (1=>1, 1=>2).keys.Set

[11:03] <camelia> rakudo-moar c35c56: OUTPUT«set(0,1)␤»

[11:03] <gfldex> m: dd (1=>1, 1=>2).values.Set

[11:03] <camelia> rakudo-moar c35c56: OUTPUT«set(1)␤»

[11:03] <gfldex> m: dd (1=>1, 1=>2).pairs.Set

[11:03] <camelia> rakudo-moar c35c56: OUTPUT«set(0,1)␤»

[11:03] <Zoffix> lizmat, to me it looks like the failure is due to how stuff is represented internally. Both versions produce all(1 => 1, 1 => 2). Isn't it just a matter of this particular implementation that @a and (1,2) produce different .WHICH in the X=> list?

[11:03] <llfourn> hmmm that 0 looks wrong

[11:04] *** Util left
[11:04] *** masak left
[11:04] *** dalek joined
[11:04] *** ChanServ sets mode: +v dalek

[11:04] *** synopsebot6 left
[11:04] *** synopsebot6 joined
[11:04] *** sergot left
[11:04] *** perlpilot left
[11:04] *** pmichaud left
[11:05] <moritz> PSA: If hack hangups kill your IRC sessions, there's now a separate host available for IRC only. If you want an account, please talk to me.

[11:05] <llfourn> (oh wait no that 0 is right)

[11:05] <llfourn> (you did keys on a List not a Set)

[11:06] <gfldex> m: dd (1=>2).Set

[11:06] <camelia> rakudo-moar c35c56: OUTPUT«set(1)␤»

[11:06] <Zoffix> And that looks weird too

[11:06] <llfourn> that's correct

[11:06] <Zoffix> Is it?

[11:06] <llfourn> yes

[11:06] <gfldex> that's a Set of Pairs

[11:06] <Zoffix> I'd expect a set with one pair in it

[11:07] <llfourn> no then you need to put more () I think

[11:07] <Zoffix> m: dd (Pair.new: 2, 3).Set

[11:07] <camelia> rakudo-moar c35c56: OUTPUT«set(2)␤»

[11:07] <llfourn> dd ((1=>2)).Set

[11:07] <Zoffix> m: dd ((Pair.new: 2, 3),).Set

[11:07] <camelia> rakudo-moar c35c56: OUTPUT«set(2)␤»

[11:07] <llfourn> m: dd ((1=>2)).Set

[11:07] <camelia> rakudo-moar c35c56: OUTPUT«set(1)␤»

[11:07] <llfourn> hmm

[11:07] <moritz> .tell masak I've created a shell account for you on irc.p6c.org, which should be more stable for IRC session than hack. Password is the same as on hack. Enjoy!

[11:07] <yoleaux> moritz: I'll pass your message to masak.

[11:07] *** kaare_ joined
[11:07] <llfourn> sorry, yeah if you can't have pairs in a set that does seem wrong

[11:08] <llfourn> m: (set (a => b)).keys[0].^name.say

[11:08] <camelia> rakudo-moar c35c56: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    b used at line 1␤␤»

[11:08] <llfourn> m: (set (a => "b")).keys[0].^name.say

[11:08] <camelia> rakudo-moar c35c56: OUTPUT«Pair␤»

[11:08] <llfourn> eh it seems to work there

[11:09] <llfourn> m: ( (a => "b")).Set.keys[0].^name.say

[11:09] <camelia> rakudo-moar c35c56: OUTPUT«Str␤»

[11:09] <llfourn> maybe it's a .Set issue

[11:09] <gfldex> method Set() is nodal { Set.new-from-pairs(self.list) } # defined in Any.pm

[11:10] <gfldex> (and not doced)

[11:10] <llfourn> m: ( Pair.new("a","b") ).Set.keys[0].^name.say

[11:10] <camelia> rakudo-moar c35c56: OUTPUT«Str␤»

[11:10] <llfourn> m: ( Pair.new("a","b"), ).Set.keys[0].^name.say

[11:10] <camelia> rakudo-moar c35c56: OUTPUT«Str␤»

[11:10] <llfourn> m: [ Pair.new("a","b"), ].Set.keys[0].^name.say

[11:10] <camelia> rakudo-moar f829f6: OUTPUT«Str␤»

[11:11] *** ZoffixMobile joined
[11:11] *** brrt left
[11:12] <ZoffixMobile> m: dd ((:2foo) => True).Set

[11:12] <camelia> rakudo-moar f829f6: OUTPUT«set(:foo(2))␤»

[11:12] *** kid51 joined
[11:12] *** Sgeo_ joined
[11:12] <lizmat> fwiw, I think the .Set behaviour was decided about 2 years ago after long deliberations

[11:13] <lizmat> by TimToady 

[11:13] <lizmat> anyways, that's my recollection :-)

[11:13] <llfourn> lizmat: do you remember if it was decided that it should be different to &set (because it is)

[11:13] *** Sgeo left
[11:14] <llfourn> m: [ Pair.new("a","b"), ].Set.keys[0].^name.say; set( Pair.new("a","b") ).keys[0].^name.say

[11:14] <camelia> rakudo-moar f829f6: OUTPUT«Str␤Pair␤»

[11:14] *** ZoffixMobile_ joined
[11:15] <gfldex> m: my $set = Set.new-from-pairs(1=>Any); dd $set;

[11:15] <camelia> rakudo-moar f829f6: OUTPUT«Set $set = set()␤»

[11:15] <llfourn> gfldex: that's expected though => creates named arguments

[11:16] *** Sgeo__ joined
[11:16] <gfldex> m: my $set = Set.new-from-pairs([1=>Any]); dd $set;

[11:16] <camelia> rakudo-moar f829f6: OUTPUT«Set $set = set()␤»

[11:16] *** ZoffixMobile left
[11:16] <llfourn> and Any is False :)

[11:16] *** Sgeo_ left
[11:16] <llfourn> wait nvm you're right there :)

[11:17] <gfldex> if i got pairs for foo and type objects, i can't have a Set of those.

[11:18] <llfourn> yeah to me it's kinda strange that it does a .new-from-pairs rather than just .new

[11:18] <lizmat> llfourn: yes, because .Set is a coercer

[11:18] <lizmat> and set() is a builder

[11:18] <lizmat> again, according to memory  :-)

[11:19] <gregf_> m: say :10a.^name

[11:19] <camelia> rakudo-moar f829f6: OUTPUT«Pair␤»

[11:19] <llfourn> hmm ok well as long as it is intended :)

[11:19] <gfldex> m: my $set = Set.new(List,Hash,Str); dd $set;

[11:19] <camelia> rakudo-moar f829f6: OUTPUT«Set $set = set(List,Hash,Str)␤»

[11:20] <gfldex> m: my $set = Set.new(['obj1'=>List,'obj2'=>Hash,'obj3'=>Str]); dd $set;

[11:20] <camelia> rakudo-moar f829f6: OUTPUT«Set $set = set(:obj3(Str),:obj2(Hash),:obj1(List))␤»

[11:20] <lizmat> llfourn: well, maybe the intent in hindsight is wrong

[11:20] <gfldex> m: my $set = Set.new('obj1'=>List,'obj2'=>Hash,'obj3'=>Str); dd $set;

[11:20] <camelia> rakudo-moar f829f6: OUTPUT«Set $set = set(:obj3(Str),:obj2(Hash),:obj1(List))␤»

[11:20] <gfldex> m: my $set = Set.new-from-pairs(['obj1'=>List,'obj2'=>Hash,'obj3'=>Str]); dd $set;

[11:20] <camelia> rakudo-moar f829f6: OUTPUT«Set $set = set()␤»

[11:20] <gfldex> i do not agree

[11:21] <lizmat> fwiw, new-from-pairs is supposed to be an internal method

[11:21] <lizmat> well, internal to the core, I think

[11:21] <gfldex> that is called by Any.Set

[11:21] <llfourn> lizmat: I can't think of many circumstances where if I called .Set on a list of Pairs, that I would want a Set of only the .key of the Pairs in the list

[11:22] <gfldex> so i don't really have a choise in calling it

[11:22] <ZoffixMobile_> m: my $set = Set.new-from-pairs('obj1'=>Li​st,'obj2'=>Hash,'obj3'=>Str); dd $set;

[11:22] <camelia> rakudo-moar f829f6: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' ␤at <tmp>:1␤------> 3my $set = Set.new-from-pairs('obj1'=>Li7⏏5​st,'obj2'=>Hash,'obj3'=>Str); dd $set;␤    expecting any of:…»

[11:22] <ZoffixMobile_> huh

[11:22] <llfourn> coercion I don't think would be an exception -- but I guess it depends on what you're up to

[11:23] <lizmat> hmmm... the code does have a # XXX GLR do these really need to force a list? above it

[11:25] <gfldex> %e{.key.WHICH} //= $_.key if .value; # (line 44 in Setty.pm)

[11:25] <gfldex> shouldn't that be with instead of if?

[11:26] <lizmat> gfldex: fwiw, that code predates the existence of with

[11:26] <gfldex> i guessed as much

[11:27] <lizmat> I guess the most confusing is, is that Set.new follows the single arg rule

[11:27] <lizmat> m: my @a = ^10l; dd Set.new(@a)

[11:27] <camelia> rakudo-moar f829f6: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3my @a = ^107⏏5l; dd Set.new(@a)␤»

[11:27] <lizmat> m: my @a = ^10; dd Set.new(@a)

[11:27] <camelia> rakudo-moar f829f6: OUTPUT«set(5,7,9,4,8,3,0,1,6,2)␤»

[11:27] <lizmat> m: my @a = ^10; dd Set.new(@a,@a)

[11:27] <camelia> rakudo-moar f829f6: OUTPUT«set($[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])␤»

[11:27] <lizmat> and .Set does not

[11:28] <lizmat> that just follows List constructor rules

[11:28] <lizmat> and .Set on a list tries to interprete the List as pairs

[11:29] <gfldex> on pairs where the values have to pass a test

[11:29] *** ZoffixMobile_ left
[11:29] <lizmat> compare these:

[11:29] <lizmat> m: dd (1=>2,3=>4).Hash

[11:29] <camelia> rakudo-moar f829f6: OUTPUT«Hash % = {"1" => 2, "3" => 4}␤»

[11:29] <gfldex> I have problems with the whole thing because I asked myself the question, how the hell do I phrase that in the docs?

[11:30] <lizmat> m: dd (1=>2,3=>4).Set

[11:30] <camelia> rakudo-moar f829f6: OUTPUT«set(3,1)␤»

[11:30] <gfldex> maybe writing the docs late wasn't to optimal :)

[11:30] <lizmat> m: dd (1=>2,3=>4).Bag

[11:30] <camelia> rakudo-moar f829f6: OUTPUT«(3=>4,1=>2).Bag␤»

[11:31] <lizmat> I think this behaviour is consistent between Hash/Set/Bag, once you reailize that Set is a Hash of Bool

[11:31] *** cognominal left
[11:31] <llfourn> m: dd (1=>2,3=>4).Hash.Set

[11:31] <camelia> rakudo-moar a557a1: OUTPUT«set("1","3")␤»

[11:31] *** cognominal joined
[11:31] *** Some-body_ joined
[11:31] <lizmat> which is the same as:

[11:31] *** DarthGandalf left
[11:31] <lizmat> m: dd (1=>2,3=>4).Hash.pairs.Set

[11:31] <camelia> rakudo-moar a557a1: OUTPUT«set("1","3")␤»

[11:32] <ilmari> m: dd (1=>-2,3=>4).Hash.Bag

[11:32] <camelia> rakudo-moar a557a1: OUTPUT«Use of Nil in string context  in block <unit> at <tmp> line 1␤Use of Nil in string context  in block <unit> at <tmp> line 1␤Found negative values for  in ␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1…»

[11:32] *** cog_ joined
[11:32] *** Some-body_ is now known as DarthGandalf

[11:32] <ilmari> m: dd (1=>0,3=>4).Hash.Bag

[11:32] <camelia> rakudo-moar a557a1: OUTPUT«("3"=>4).Bag␤»

[11:32] <ilmari> and Bag is a Hash of Int where * > 0

[11:33] <lizmat> m: dd (1=>0,3=>4).Hash.Set

[11:33] <camelia> rakudo-moar a557a1: OUTPUT«set("3")␤»

[11:33] <gfldex> that's line 44 for you :)

[11:34] <gregf_> m: say (1=>0,3=>4).^name

[11:34] <camelia> rakudo-moar a557a1: OUTPUT«List␤»

[11:35] <lizmat> fwiw, Set and Bag/Mix are still in my crosshairs  :-)

[11:35] <gregf_> m: say {1=>0,3=>4}.^name

[11:35] <camelia> rakudo-moar a557a1: OUTPUT«Hash␤»

[11:36] <wamba> m: my @a=1,2; say so all(1 X=> @a) (elem) set(1=>1,1=>2)

[11:36] <wamba> lizmat: so, Is it OK, or not? 

[11:36] <camelia> rakudo-moar a557a1: OUTPUT«False␤»

[11:36] <gfldex> (future Any.pod) method Set \n Will create a Set from a single value or Positional. If the elements are Pairs, values are checked for Bool::True. Please note thet C<0> boolifies to False.

[11:37] <gfldex> i'm somehow reluctant to write that

[11:37] <gfldex> wamba: i vote for bug

[11:39] <lizmat> please RT it so it does't fall through the cracks

[11:39] *** huggable left
[11:46] *** rindolf left
[11:50] *** lambd0x_ joined
[11:51] *** ssqq left
[11:53] *** rindolf joined
[12:01] *** kurahaupo joined
[12:01] <wamba> m: my @a=1,2; say so all(1 X=> @a.List) (elem) set(1=>1,1=>2)

[12:01] <camelia> rakudo-moar a557a1: OUTPUT«True␤»

[12:01] <wamba> hm, this works

[12:02] <wamba> m: say so all(1 X=> (1,2).Array) (elem) set(1=>1,1=>2)

[12:02] <camelia> rakudo-moar a557a1: OUTPUT«False␤»

[12:03] *** kurahaupo_ left
[12:13] *** domm joined
[12:14] *** brrt joined
[12:18] *** rindolf left
[12:31] *** vike1 left
[12:34] *** vike1 joined
[12:36] <gfldex> does htmlify.p6 understand X<> inside tables?

[12:36] <moritz> I don't think it understand any markup in tables, but I could be wrong

[12:38] <timotimo> correct, our pod parser doesn't do tablet well yet

[12:38] <timotimo> i mean, it just doesn't do formatting codes inside tables yet at all

[12:42] <gfldex> i just found myself wanting a ?// !!, equivalent to with

[12:42] <gfldex> if ?? !! actually an operator or is it syntaxy?

[12:43] <gfldex> s/if/is/

[12:44] <lizmat> afk&

[12:48] <psch> ?? !! is syntax, currenlty

[12:48] <psch> no idea if that'll change either

[12:49] <psch> '$a ?// $b !! $c' is '$a.defined ?? $b !! $c'?

[12:50] <gfldex> yes

[12:50] <gfldex> m: class DefinedAlternation is Bool; sub infix:<?//>(\a, \b -->DefinedAlternation){ with a { with b { return DefinedAlternation.new(True) } } DefinedAlternation.new(False) }

[12:50] <camelia> rakudo-moar a557a1: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Bool does not support inheritance, so DefinedAlternation cannot inherit from it␤at <tmp>:1␤»

[12:50] <gfldex> :(

[12:51] <gfldex> i do agree that inheritance from enums does not compute

[12:51] <psch> why do you even need that type there?

[12:51] <MasterDuke> it's in the operator docs, https://docs.perl6.org/language/operators#infix_%3F%3F_%21%21

[12:52] <gfldex> if i got a type returned from infix:<?//>) i can define infix:<!!> to handle that type and get what i want

[12:52] <psch> gfldex: but isn't Bool enough?

[12:52] <gfldex> i will try that next

[12:52] *** Ven joined
[12:53] *** Azry left
[12:53] <Ven> o/

[12:53] <yoleaux> 19 Jun 2016 11:59Z <brrt> Ven: thanks

[12:53] <psch> MasterDuke: well, from an implementation POV it's not really an operator, but a special parsing construct

[12:53] <psch> MasterDuke: note that it doesn't fit with any of the foofix operator categories we have

[12:54] <MasterDuke> yeah, wonder if that distinction should be made in the docs

[12:54] <timotimo> well, we'd really want to have multi-infixes custom-definable in the future

[12:54] <Ven> timotimo: I'm going to get back my `?:` syntax :P

[12:55] <Ven> I'm toying with nested sets, and I wrote something to "foreach" them. https://gist.github.com/anonymous/bbe5e2d798673478bcbbaec51389e76a I, however, would like a better way to write this `while`, instead of this ugly `if ... then last`

[12:56] <psch> make it "last if ..."? :)

[12:56] <Ven> that's syntactic bikeshedding ;)

[12:57] *** domidumont left
[12:58] *** domidumont joined
[13:01] *** finanalyst joined
[13:02] *** masak_grr joined
[13:03] *** Azry joined
[13:07] *** donaldh joined
[13:07] *** Azry left
[13:09] <gfldex> m: class DefinedAlternationContainer { has $.item; has $.condition-was-defined }; sub infix:<?//>(\a, \b -->DefinedAlternationContainer) { with a { return DefinedAlternationContainer.new(item => b, condition-was-defined => True) }; DefinedAlternationContainer.new(item => Any, condition-was-defined => False) }; sub infix:<!!>(DefinedAlternationContainer:D \cont, \b){ cont ?? cont.item !! b }; my $v = 2 but 

[13:09] <camelia> rakudo-moar a557a1: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3 cont ?? cont.item !! b }; my $v = 2 but7⏏5<EOL>␤    expecting any of:␤        prefix␤        term␤»

[13:09] <gfldex> False; dd $v ?// 2 !! 4

[13:10] <gfldex> ELINETOLONG

[13:10] *** jkramer joined
[13:10] <jkramer> Ahoy again!

[13:10] <RabidGravy> Hmm, I think I am either going to have to scrap IO::Path::Mode completely or make a completely incompatible change

[13:11] <jkramer> Is there a way to override a method in an object on-the-fly? Something like: my $foo = Foo.new { method some-method { do something different than Foo.some-method } }

[13:11] <gfldex> m: https://gist.github.com/gfldex/02998dc3927426010d56092784b72152

[13:11] <camelia> rakudo-moar a557a1: OUTPUT«2␤»

[13:11] <gfldex> (Perl 6)++

[13:12] <psch> m: class A { method foo { "foo" } }; my $a = A.new but role { method foo { "bar" } }; say $a.foo

[13:12] <camelia> rakudo-moar a557a1: OUTPUT«bar␤»

[13:14] *** finanalyst left
[13:14] <MasterDuke> RapidGravy: whoops, didn't realize that existed when i added IO::Path.mode

[13:15] *** finanalyst joined
[13:15] <RabidGravy> it's fine, I should have been paying more attention :)

[13:15] *** iH2O joined
[13:15] *** donaldh left
[13:16] <gfldex> m: class A { method m(){ say 'A::m' } }; my $a = A.new; $a = $a but role { method m(){ say '::m' } }; $a.m;

[13:16] <camelia> rakudo-moar a557a1: OUTPUT«::m␤»

[13:16] <gfldex> jkramer: you can mixin with but at any given time

[13:17] <Ven> m: class A { method m(){ say 'A::m' } }; my $a = A.new; $a but= role { method m(){ say '::m' } }; $a.m;

[13:17] <camelia> rakudo-moar a557a1: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Cannot make assignment out of but because structural infix operators are too diffy␤at <tmp>:1␤------> 3{ say 'A::m' } }; my $a = A.new; $a but=7⏏5 role { method m(){ say '::m' } }; $a.m;␤»

[13:17] <Ven> aw :D.

[13:17] <Ven> where can I get a diffyness-reducer, I wonder

[13:20] <MasterDuke> m: class A { method m(){ say "A::m" } }; my $a = A.new; $a but role { method m(){ say "::m" } }; $a.m;

[13:20] <camelia> rakudo-moar a557a1: OUTPUT«A::m␤»

[13:20] <MasterDuke> m: class A { method m(){ say "A::m" } }; my $a = A.new but role { method m(){ say "::m" } }; $a.m;

[13:20] <camelia> rakudo-moar a557a1: OUTPUT«::m␤»

[13:20] <MasterDuke> Ven: ^^^^

[13:24] <RabidGravy> Oooh, no that works. Rather than  augmenting the IO::Path to add the mode method, I can just over-write the method if it's there or add_method it if it isn't

[13:26] <Ven> MasterDuke: ?

[13:26] <Ven> not sure how that relates to `but=`?

[13:28] <MasterDuke> m: class A { method m(){ say "A::m" } }; my $a = A.new; $a = $a but role { method m(){ say "::m" } }; $a.m;

[13:28] <camelia> rakudo-moar a557a1: OUTPUT«::m␤»

[13:29] <MasterDuke> looks like it works explicitly, but you're right, no 'but='

[13:32] *** donaldh joined
[13:32] *** iH2O left
[13:33] <MasterDuke> non-modifiable by design it appears, https://docs.perl6.org/routine/but

[13:34] <timotimo> you mean modifying

[13:34] <Ven> yeah, we have "does" if we want to mutate :)

[13:35] *** tbrowder joined
[13:37] *** brrt left
[13:37] <tbrowder>  re RT: I sent a help msg to support earlier today and I look forward to a helpful response.

[13:41] <b2gills> I just heard back from an issue I raised on ideone almost a month ago, they fixed some of the problems I mentioned but are going to wait until the next language maintenance to upgrade ( they have 2014.07 currently )

[13:46] *** eroux joined
[13:48] *** donaldh left
[13:48] *** nightfrog joined
[13:49] *** ranguard_ is now known as ranguard

[13:50] *** eroux left
[13:52] *** yqt left
[13:54] *** ocbtec joined
[13:55] *** skids joined
[13:57] *** eroux joined
[13:58] *** yanmc left
[14:00] <gregf_> m: class A { method m(){ say "A::m" } };role B { method m(){ say "::m"; } }; (A.new does B).m;

[14:00] <camelia> rakudo-moar a557a1: OUTPUT«::m␤»

[14:01] <timotimo> m: my $foo = "hello"; say "$foo.replace("e", "a").foo.bar"

[14:01] <camelia> rakudo-moar a557a1: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3lo"; say "$foo.replace("e", "a").foo.bar7⏏5"␤»

[14:01] <timotimo> ^- IMO this shouldn't say confused, it should call the replace and just concatenate .foo.bar

[14:04] *** TakinOver left
[14:05] <moritz> agreed

[14:08] *** donaldh joined
[14:09] *** nightfrog left
[14:09] *** brrt joined
[14:15] <MasterDuke> m: sub LEVCAPTEST() {say "hi"}; levcaptest();

[14:15] <camelia> rakudo-moar a557a1: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    levcaptest used at line 1. Did you mean 'LEVCAPTEST'?␤␤»

[14:15] *** molaf joined
[14:16] *** g4 left
[14:16] <MasterDuke> m: sub LEVCAPTEST() {say "hi"}; LEVCAPTESt();

[14:16] <camelia> rakudo-moar a557a1: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    LEVCAPTESt used at line 1␤␤»

[14:16] <MasterDuke> m: sub LEVCAPTEST() {say "hi"}; lEVCAPTEST();

[14:16] <camelia> rakudo-moar a557a1: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    lEVCAPTEST used at line 1. Did you mean 'LEVCAPTEST'?␤␤»

[14:16] <MasterDuke> ^^^^ doesn't seem right

[14:18] <jkramer> gfldex: Thanks, that works fine!

[14:19] <BrokenRobot> MasterDuke: what is? The suggestion?

[14:19] <jkramer> Damn, I was trying to find out why a value in a Hash was a List and not a single object for half an hour. The assignment was %foo{'asd'} = $bar, (command, no semicolon at the end) :(

[14:19] <geekosaur> dissenting opinion re the embedded replace: it should not error, but it should only expand $foo --- not get itself into arbitrary length parsing, unless I used {}

[14:19] <jkramer> There should be a warning for that

[14:20] <MasterDuke> a single difference at the end (or middle) of the name says 'Undeclared name', but differences starting at the start of the name says 'Undeclared routine'

[14:20] <geekosaur> in particular, I don't think you can rationally process the inner quotes because they're the same as the outer quotes

[14:21] <geekosaur> (which indeed is where the "Confused" comes from; that should be a better message)

[14:21] <MasterDuke> m: my @neighbors = <Tom Dick Harry>; say [email@hidden.address] ') and I try our best to coexist peacefully."

[14:21] <camelia> rakudo-moar a557a1: OUTPUT«Tom, Dick, Harry and I try our best to coexist peacefully.␤»

[14:21] <MasterDuke> m: my @neighbors = <Tom Dick Harry>; say [email@hidden.address] ") and I try our best to coexist peacefully."

[14:21] <camelia> rakudo-moar a557a1: OUTPUT«Tom, Dick, Harry and I try our best to coexist peacefully.␤»

[14:21] *** nightfrog joined
[14:21] <MasterDuke> it works with either quotes

[14:25] <geekosaur> that's going to confuse the heck out of people, judging by how they react to $() in POSIX shells

[14:26] *** rindolf joined
[14:26] <stmuk> .tell tadzik https://github.com/tadzik/Getopt-Type/pull/1

[14:26] <yoleaux> stmuk: I'll pass your message to tadzik.

[14:26] *** Ven left
[14:27] <MasterDuke> BrokenRobot: i would say it definitely should suggest LEVCAPTEST for both lEVCAPTEST and LEVCAPTESt, and arguably for levcaptest (i.e., do a case insensitive comparison) as well

[14:30] <tadzik> stmuk: thanks, merged

[14:30] <yoleaux> 14:26Z <stmuk> tadzik: https://github.com/tadzik/Getopt-Type/pull/1

[14:37] <stmuk> Zoffix++ # actually doing the fix

[14:40] *** skids left
[14:45] *** khw joined
[14:52] *** araujo joined
[14:54] *** donaldh left
[14:56] <BrokenRobot> MasterDuke: personally I wouldn't care about it. I didn't even notice the name/subroutine. As for the comparisons, it's using Levenstein distance to find suggestions, isn't it? It's black magic to me so I don't know if it can be amended to include stuff for this case too

[14:58] <MasterDuke> i'm looking into exactly how it's doing things now

[14:59] <timotimo> i think it's in the beginning of either actions or world .nqp

[14:59] <MasterDuke> but i'd say the current behavior is at least LTA 

[14:59] <timotimo> we differentiate based on capitalization because classes are usually upper cased, subroutines are usually lower-cased

[14:59] <timotimo> so if we expect a type in a place, we only look for upper-cased things

[14:59] <timotimo> but if we're looking for a sub, we look for lower-cased things only

[14:59] <MasterDuke> yep, oddly enough, if i copy the levenshtein implementation out to its own file, rakudo segfaults when trying to run it, but nqp is fine

[15:00] *** huggable joined
[15:00] <timotimo> nqp code and perl6 code aren't 100% compatible

[15:00] <timotimo> segfaulting is a bit too much, though

[15:00] <BrokenRobot> huggable: cli rt :is: Use RT via CLI: https://rt.perl.org/rt-cli.html has the docs on getting it setup. See handy script: https://github.com/coke/rt-six-help

[15:00] <huggable> BrokenRobot, Added cli rt as Use RT via CLI: https://rt.perl.org/rt-cli.html has the docs on getting it setup. See handy script: https://github.com/coke/rt-six-help

[15:00] <MasterDuke> i see there's different costs for case differences

[15:01] <BrokenRobot> huggable: rt cli :is: Use RT via CLI: https://rt.perl.org/rt-cli.html has the docs on getting it setup. See handy script: https://github.com/coke/rt-six-help

[15:01] <huggable> BrokenRobot, Added rt cli as Use RT via CLI: https://rt.perl.org/rt-cli.html has the docs on getting it setup. See handy script: https://github.com/coke/rt-six-help

[15:03] <timotimo> http://hack.p6c.org/~timo/coverage/  -  check it out

[15:04] *** alnewkir1 joined
[15:04] <BrokenRobot> timotimo: what is that? Roast coverage?

[15:04] <timotimo> yup

[15:04] <timotimo> plus/minus some inaccuracies that make little sense

[15:04] *** freeze joined
[15:05] <BrokenRobot> Funny... I was just trying to locate all those Tests Needed tickets to work on them for a bit.

[15:05] <BrokenRobot> RT sucks tho. Don't see such an option in the search interface on web

[15:05] <moritz> BrokenRobot: are you logged in?

[15:05] <BrokenRobot> Yeah

[15:06] <BrokenRobot> Well, I see no field to add "tickets with this tag"

[15:06] <timotimo> now you have to praise me (pretty please)

[15:07] <BrokenRobot> timotimo++ Is that stuff available to do coverage for any Perl 6 module?

[15:07] *** brrt left
[15:07] <timotimo> there's some places where lines that are immediately consecutive aren't the same color

[15:07] <timotimo> maybe that gets better when disabling spesh? dunno.

[15:08] <timotimo> yeah, it's an addition to moar that i'd like to push to master

[15:08] <BrokenRobot> :o

[15:09] <BrokenRobot> timotimo✚✚ then :D

[15:09] *** domidumont left
[15:09] *** Exodist left
[15:09] *** alnewkirk left
[15:09] *** freeze_ left
[15:10] <MasterDuke> very cool. timotimo++. however, the pages for the individual results seem odd

[15:10] *** Exodist joined
[15:11] <BrokenRobot> [Coke]: a suggestion when making such requests is to include the list of tickets: http://irclog.perlgeek.de/perl6/2016-07-01#i_12770367

[15:11] <timotimo> odd in what way?

[15:11] <MasterDuke> e.g., http://hack.p6c.org/~timo/coverage/src_core_IO_Path.pm.coverage.html seems to actually be for IO::Pipe

[15:11] <BrokenRobot> [Coke]: I've no idea how to locate them and now RT pissed me off enough that I gone off the idea of doing those tickets ~_~

[15:11] <timotimo> oh, huh

[15:11] <psch> BrokenRobot: filtering for RT tickets with a given tag only works with a custom search

[15:12] *** salv0 left
[15:12] <MasterDuke> same with a couple other IO pages i looked at

[15:12] <psch> BrokenRobot: e.g. the jvm-tag is "CF.VM = 'JVM'"

[15:12] <BrokenRobot> psch: I've no idea how to use that custom search.

[15:12] <psch> ...although we do have VM listed in the left side in the drop downs now it seems

[15:12] <BrokenRobot> There are no instructions. Just a blank box

[15:12] <timotimo> you can check the line_based_coverage_3 branch in moarvm

[15:13] <timotimo> in tools/ there's the script that i use to generate the html from the data it generates

[15:13] <psch> BrokenRobot: well, the Query Builder looks intuitive enough to my eyes... you can select criteria on the left side, click "Add these terms" and then the side reloads and the criteria show up on the right side..?

[15:13] <psch> that's under "Tickets" => "New Search"

[15:14] <psch> ah, right, and clicking "Advanced" gets you a textarea to edit the query manually, which is how i added CF.VM

[15:15] <psch> although, yeah, that shows up in the Query Builder now vOv

[15:15] <timotimo> perl6 ../moarvm/tools/parse_coverage_report.p6 --annotations=core_setting_dump.txt spectest_core_only.txt gen/moar/m-CORE.setting  -  this is how i invoked my tool

[15:15] *** mr-foobar left
[15:15] <BrokenRobot> psch: what shows up in the query builder?

[15:15] <timotimo> you get the core_setting_dump.txt with moar --dump CORE.setting.moarvm

[15:15] <psch> BrokenRobot: the VM tag

[15:16] <psch> well, custom field, not tag

[15:16] <BrokenRobot> I think I got it.

[15:17] <BrokenRobot> And of course, I can't save this search URL because it'll cry about CSFR right?

[15:17] <timotimo> and setting MVM_COVERAGE_LOG=coverage.%d.txt in your environment when running the spec tests will give you a crapton of files that have HIT filename lineno in them 

[15:17] <dalek> ecosystem: cb9ce62 | (Wenzel P. P. Peppmeyer)++ | META.list:

[15:17] <dalek> ecosystem: add gfldex/perl6-operator-defined-alternation

[15:17] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/cb9ce62e06

[15:17] <timotimo> you'll want to grep out m-CORE.setting or what it's called; also, running sort and uniq over it helps make the tool run noticably faster

[15:18] <psch> BrokenRobot: you can save the query itself under your RT account

[15:18] <BrokenRobot> 18 minutes to find tickets. Retarded

[15:18] <MasterDuke> timotimo: cool, i'll take a look

[15:18] <timotimo> thank you

[15:18] <timotimo> i don't know why, but it took me a lot of energy over the last few days to get that splitting functionality in, even though i basically knew how it'd have to be made

[15:18] <timotimo> also, the code is super sloppy and hacky and could use some refactoring

[15:19] <timotimo> and in addition, it's not handling non-split files sensibly at the moment :)

[15:22] <BrokenRobot> m: say "௰".Int

[15:22] <camelia> rakudo-moar a557a1: OUTPUT«10␤»

[15:22] <BrokenRobot> m: say "௰".Num

[15:22] <camelia> rakudo-moar a557a1: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5௰' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[15:22] <psch> m: say "௰e0".Num

[15:22] <camelia> rakudo-moar a557a1: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5௰e0' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[15:22] <BrokenRobot> m: say "௰" + 10

[15:22] <camelia> rakudo-moar a557a1: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5௰' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[15:22] <psch> m: say "0.௰e0".Num

[15:22] <camelia> rakudo-moar a557a1: OUTPUT«Cannot convert string to number: radix point must be followed by one or more valid digits in '030.⏏5௰e0' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[15:22] <BrokenRobot> That's from https://rt.perl.org/Ticket/Display.html?id=127866  Seems more work is needed

[15:23] <BrokenRobot> This was the fix to make it work for Int: https://github.com/rakudo/rakudo/commit/1cb2e8d9e71797f576b3

[15:24] <psch> that looks almost copy-paste-able, at a glance

[15:25] <BrokenRobot> Or moved to self.Numeric instead of being under .Int?

[15:25] <psch> right, that too

[15:26] <BrokenRobot> I'll try to fix it :)

[15:30] *** matt_ joined
[15:30] *** matt_ is now known as Guest55024

[15:32] *** Guest55024 is now known as matt_

[15:41] <dalek> doc: 892fd8e | (Wenzel P. P. Peppmeyer)++ | doc/Language/variables.pod6:

[15:41] <dalek> doc: add dynamic variables to index

[15:41] <dalek> doc: review: https://github.com/perl6/doc/commit/892fd8ea70

[15:46] <stmuk> .tell ugexe I'm seeing Base64 test failures

[15:46] <yoleaux> stmuk: I'll pass your message to ugexe.

[15:47] <ugexe> stmuk: yeah, it seems random. but i think its a bug in the recent multi dispatch cache that was brought up the other day

[15:47] <yoleaux> 15:46Z <stmuk> ugexe: I'm seeing Base64 test failures

[15:47] <dalek> doc: 80aded1 | (Wenzel P. P. Peppmeyer)++ | doc/Language/functions.pod6:

[15:47] <dalek> doc: add reference to @*ARGS to MAIN section

[15:47] <dalek> doc: review: https://github.com/perl6/doc/commit/80aded1828

[15:47] <ugexe> i say random in that when it failed testing on appveyor i restarted the run and it passed

[15:48] <gfldex> https://docs.perl6.org/type/Nil is a 404

[15:48] <gfldex> and Nil is not a type

[15:49] <ugexe> stmuk: see http://irclog.perlgeek.de/perl6/2016-07-02#i_12774635 and the comment by jnthn a few lines under that

[15:50] <stmuk> ugexe: ah thanks I missed that

[15:53] *** masak_grr is now known as masak

[15:54] <dogbert17> o/ #perl6

[15:54] <dogbert17> m: my $v = Version.new('v1.0'); say $v.gist # should it really look like this?

[15:54] <camelia> rakudo-moar a557a1: OUTPUT«vv.1.0␤»

[15:54] <ugexe> yes

[15:54] <dogbert17> ugexe: why two v's

[15:55] *** travis-ci joined
[15:55] <travis-ci> Doc build failed. Wenzel P. P. Peppmeyer 'add reference to @*ARGS to MAIN section'

[15:55] <travis-ci> https://travis-ci.org/perl6/doc/builds/142243981 https://github.com/perl6/doc/compare/892fd8ea7095...80aded182844

[15:55] *** travis-ci left
[15:55] <ugexe> because you passed it a string that started with a v

[15:55] <ugexe> m: my $v = Version.new(v1.0); say $v

[15:55] <camelia> rakudo-moar a557a1: OUTPUT«v1.0␤»

[15:55] <dogbert17> but aren't you supposed to do that?

[15:55] <ugexe> why should a version be allowed to start with a a, b, or c but not a v?

[15:56] *** abraxxa left
[15:57] <ugexe> m: my $v = v1.0; say $v.perl

[15:57] <camelia> rakudo-moar a557a1: OUTPUT«v1.0␤»

[15:57] <dogbert17> not sure I understand the question :)

[15:57] <dogbert17> m: my $v = Version.new('v1.0'); say $v.perl 

[15:57] <camelia> rakudo-moar a557a1: OUTPUT«Version.new('v.1.0')␤»

[15:58] <dogbert17> the docs claim that: Version literals can only contain numeric and Whatever parts. They start with a lower-case v, 

[15:58] <ugexe> you aren't passing a literal

[15:58] <ugexe> you are passing a string

[15:58] <BrokenRobot> m: say v1.0

[15:58] <camelia> rakudo-moar a557a1: OUTPUT«v1.0␤»

[15:58] <TimToady> m: say v6.c

[15:58] <camelia> rakudo-moar a557a1: OUTPUT«v6.c␤»

[15:58] <BrokenRobot> m: say v1.0 === Version.new: "1.0"

[15:58] <camelia> rakudo-moar a557a1: OUTPUT«True␤»

[15:59] <BrokenRobot> dogbert17: ^

[15:59] <dogbert17> ugexe: aha, the fog is beginning to clear

[15:59] <dogbert17> help here is excellent :-)

[16:00] <BrokenRobot> m: say v௰

[16:00] <camelia> rakudo-moar a557a1: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3say v7⏏5௰␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤        statem…»

[16:01] <dogbert17> so if I want to create a version object from a string I should drop the 'v'?

[16:01] <BrokenRobot> m: say Version.new: "௰"

[16:01] <camelia> rakudo-moar a557a1: OUTPUT«v␤»

[16:01] <BrokenRobot> dogbert17: yeah

[16:01] <gfldex> https://docs.perl6.org/language.html is this to short on the live server?

[16:02] *** zakharyas left
[16:02] <BrokenRobot> What do you mean "to short"?

[16:02] <ugexe> usually. but naturally you'll get someone who denotes their versions in only "v"s and complaisn that his version "vvvvv" isnt working right

[16:03] <BrokenRobot> gfldex: oh, yeah, it is

[16:03] <dogbert17> ugexe: thanks for the wisdom

[16:03] <BrokenRobot> I wonder if it's that parallel build stuff and one of the threads crapped out

[16:03] <gfldex> travis is angry with Pod::To::HTML https://travis-ci.org/perl6/doc/builds/142243981

[16:03] <ugexe> or Version.new("v.iii") # roman numeral

[16:04] <gfldex> i have problems with threadings in Pod::To::BigPage as well

[16:04] <BrokenRobot> m: say Version.new: "ᵛ⁶"

[16:04] <camelia> rakudo-moar a557a1: OUTPUT«vᵛ␤»

[16:05] <BrokenRobot> That's somewhat LTA :)

[16:05] <BrokenRobot> m: say Version.new("ᵛ⁶") === Version.new("ᵛ⁷")

[16:05] <camelia> rakudo-moar a557a1: OUTPUT«True␤»

[16:05] *** adu joined
[16:06] <gfldex> tests for Pod::To::HTML do work locally for me

[16:07] <ugexe> m: say Version.new("x.1") > Version.new("x.0.9") # also remember versions still have some more work to be done

[16:07] <camelia> rakudo-moar a557a1: OUTPUT«True␤»

[16:07] <ugexe> oops thats not what i meant

[16:07] <ugexe> but what i did mean appears to be fixed. cool

[16:09] <timotimo> i can have versions snowman and comet of my module? :D

[16:09] <dogbert17> i was looking into documenting gist, Str etc hence the question. I get easily confused sometimes :)

[16:09] <ugexe> m: say Version.new("x")cmp 1; # heh expected a syntax error at first thought

[16:09] <camelia> rakudo-moar a557a1: OUTPUT«More␤»

[16:10] <BrokenRobot> Last build log for doc: https://docs.perl6.org/build-log/build-2016-07-04T15:50+0000.log

[16:12] <BrokenRobot> MasterDuke: I didn't look at your parralelzizidsaikasdkm commit for htmlify.p6, but is it possible it's processing, say Language, docs and stores the processed docs in a shared array or something, so that when the index page is generated, only the docs processed by one/some threads get into the list?

[16:13] <BrokenRobot> 'cause in the log I see it builkding all of them, but the index has just part of them,

[16:14] <geekosaur> or parallel stuff just throwing fits again per usual

[16:15] <dalek> doc: d41f52e | (Wenzel P. P. Peppmeyer)++ | util/update-and-sync:

[16:15] <dalek> doc: disable --parallel for now

[16:15] <dalek> doc: review: https://github.com/perl6/doc/commit/d41f52ec56

[16:19] *** setty1 joined
[16:20] <BrokenRobot> Yeah. It did say "writing" for unicode, but the file ain't here: https://docs.perl6.org/language/unicode_texas

[16:22] *** finanalyst left
[16:22] <dogbert17> too bad it's not working since the build time was quite fast: Processing complete.   real 1m8.183s     user 1m14.720s

[16:23] *** travis-ci joined
[16:23] <travis-ci> Doc build failed. Wenzel P. P. Peppmeyer 'disable --parallel for now'

[16:23] <travis-ci> https://travis-ci.org/perl6/doc/builds/142250644 https://github.com/perl6/doc/compare/80aded182844...d41f52ec5680

[16:23] *** travis-ci left
[16:23] <BrokenRobot> tehe

[16:24] <dogbert17> the trailing ws test strikes

[16:24] <tbrowder> (choke) I guess the public doc languages page is broken...any ETA?

[16:24] <BrokenRobot> We definitely need a hook. Unbreaking builds all the time will be annoying

[16:25] <BrokenRobot> tbrowder: that's what the conversation for the past 15 minues has been about :)

[16:25] * BrokenRobot goes in to fix the spacing tests

[16:25] <MasterDuke> BrokenRobot: i don't see anything in what i did to break the index page

[16:26] <gfldex> travis and the borked build seam to be unrelated

[16:27] <ugexe> it was broke in the commit before yours

[16:27] <MasterDuke> ugexe: it was broken before my commit?

[16:28] <ugexe> oops you aren't talking about that travis build failure

[16:29] <ugexe> HEAD~2 on p6doc was the build failure 

[16:29] *** dakkar left
[16:29] <BrokenRobot> God damn

[16:30] <BrokenRobot> Says it's on line 26 of doc/Language/functions.pod6

[16:30] <BrokenRobot> I don't see anything there and I'm trying to run perl -pi -e 's/\s+$//m' doc/Language/functions.pod6 but the diff shows me entire file changed by that

[16:31] <dalek> doc: 19462fa | (Zoffix Znet)++ | doc/Language/functions.pod6:

[16:31] <dalek> doc: Remove trailing whitespace

[16:31] <dalek> doc: review: https://github.com/perl6/doc/commit/19462fafd2

[16:32] *** yqt joined
[16:32] * BrokenRobot looks at edit history

[16:33] <BrokenRobot> Ah, it was gfldex's whitespace :)

[16:33] <gfldex> :(

[16:33] <gfldex> i blame vim's gq

[16:36] * gfldex goes to study ':set list'

[16:38] *** sergot joined
[16:38] <BrokenRobot> Hm.. Well, I found a white-space remove pre-commit hook, but I've no idea how to make that part of the repo https://gist.githubusercontent.com/mxgrn/663933/raw/9a7d91c21baf6873d66977e8df88c5a79398df48/gistfile1.sh

[16:40] <BrokenRobot> fkit

[16:40] *** Azry joined
[16:41] <gfldex> tbrowder: docs are fixed

[16:42] <gfldex> (for now)

[16:42] *** adu left
[16:46] *** Azry left
[16:46] *** Azry joined
[16:47] <BrokenRobot> So do we know 100% it was the parallelajfadsedsklwayt stuff?

[16:48] <BrokenRobot> I'm just gonna create an issue so we don't forget

[16:48] *** Azry left
[16:50] *** travis-ci joined
[16:50] <travis-ci> Doc build passed. Zoffix Znet 'Remove trailing whitespace'

[16:50] <travis-ci> https://travis-ci.org/perl6/doc/builds/142254117 https://github.com/perl6/doc/compare/d41f52ec5680...19462fafd253

[16:50] *** travis-ci left
[16:52] *** Azry joined
[16:53] <BrokenRobot> https://github.com/perl6/doc/issues/664

[16:54] *** rurban_ joined
[16:54] <dogbert17> ugexe brokenrobot: what do you think about https://gist.github.com/dogbert17/951106b1c4c66848d9bc491c4753d3e6

[16:54] <BrokenRobot> So along with 666 modules in the ecosystem powered by Mojolicious v6.66, and having 666 redit users on /r/perl6, we now [almost] reached 666th Issues on the docs :)

[16:55] <BrokenRobot> dogbert17: what is that plus about?

[16:56] <ugexe> dogbert17: normally you would just use v1.0.1, not Version.new(<literal>). Otherwise you are just passing in a literal version to get a version

[16:58] <dogbert17> BrokenRobot: "A trailing + indicates that higher versions are OK in comparisons"

[16:58] <BrokenRobot> It's weird that if you go to https://docs.perl6.org/type/Version and click 'Str' method in 'provided by Mu' You actually get to description of val() subroutine: https://docs.perl6.org/routine/Str#class_Mu

[16:58] <ugexe> m: .WHAT.say for v1.0.1

[16:58] <camelia> rakudo-moar a557a1: OUTPUT«(Version)␤»

[16:58] <dogbert17> ugexe: I'll fix that, thx for checking

[17:00] <dogbert17> BrokenRobot: I can drop the plus signs if you want

[17:01] *** sjoshi joined
[17:02] *** camelia left
[17:03] *** camelia joined
[17:04] <BrokenRobot> dogbert17: nah, it's fine. I just didn't know of that feature.

[17:05] *** camelia left
[17:06] <dalek> doc: c79e637 | (Jan-Olof Hendig)++ | doc/Type/Version.pod6:

[17:06] <dalek> doc: Added docs for methods Str and gist. ugexe++ BrokenRobot++

[17:06] <dalek> doc: review: https://github.com/perl6/doc/commit/c79e637fc5

[17:06] *** camelia joined
[17:07] *** ChanServ sets mode: +v camelia

[17:08] <dalek> evalbot: 583120d | peschwa++ | evalbot.pl:

[17:08] <dalek> evalbot: Dont do nqp-p and nqp-j on nqp

[17:08] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/583120dbb8

[17:15] *** camelia left
[17:15] *** camelia joined
[17:16] *** rurban_ left
[17:16] *** ChanServ sets mode: +v camelia

[17:17] *** firstdayonthejob joined
[17:20] *** gnull joined
[17:29] <BrokenRobot> How can I create a new Str via .new? I'm trying to make a subclass

[17:30] <BrokenRobot> m: say Str.new: "foo"

[17:30] <camelia> rakudo-moar a557a1: OUTPUT«Default constructor for 'Str' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»

[17:30] <ugexe> m: say Str.new(value => "xxx")

[17:30] <camelia> rakudo-moar a557a1: OUTPUT«xxx␤»

[17:31] <BrokenRobot> ugexe++ thanks

[17:31] *** Util joined
[17:32] <parabolize> ｢1 X=> |(1, 2)｣ is ｢1 => 1 => 2｣ which is ｢1 => (1 => 2)｣ not ｢1 => 1, 1 => 2｣ so ｢so all(1 X=> |(1, 2)) (elem) set(1 => 1, 1 => 2)｣ is False

[17:33] <parabolize> ｢1 X=> 1, 2｣ and ｢1 X=> \(1, 2)｣ seem to work though

[17:33] <psch> m: say 1 X=> |(1,2)

[17:33] <camelia> rakudo-moar a557a1: OUTPUT«(1 => 1 => 2)␤»

[17:33] <psch> m: say 1 => |(1,2)

[17:33] <camelia> rakudo-moar a557a1: OUTPUT«1 => (1 2)␤»

[17:33] <psch> parabolize++

[17:36] *** espadrine joined
[17:38] *** wamba left
[17:42] <nine> ugexe: any thoughts about these? https://github.com/rakudo/rakudo/commit/5b3a09969d https://github.com/rakudo/rakudo/commit/ac19874266

[17:45] *** sena_kun joined
[17:47] *** |Sno| left
[17:49] <sena_kun> Hi, #perl6. Am I the only one who can't use Test::Builder module? With rakudo of last month it gives me http://pastie.org/private/dugjixmlif97qcoh86hxw

[17:49] <BrokenRobot> sena_kun: I know what the issue is :)

[17:50] <sena_kun> BrokenRobot, a-a-a-and this is?

[17:50] <nine> sena_kun: https://github.com/perl6-community-modules/p6-test-builder/blob/master/lib/Test/Builder.pm#L159 the * is just wrong

[17:51] <ugexe> nine: is the gist of this like CUR.new("inst#non/p6lib/path") which can then be copied to "inst#whatever/site"?

[17:51] <nine> sena_kun: there's no reason to pass it to bless and now it's actively harmful.

[17:51] <BrokenRobot> sena_kun: sent a PR: https://github.com/perl6-community-modules/p6-test-builder/pull/3

[17:51] <BrokenRobot> I don't have commit perms on perl6-community-modules

[17:51] <sena_kun> nine, yes, I was able to detect that. Then should I just delete "(*)"? Aw, okay. Sorry I hadn't look in the PRs section before.

[17:52] <BrokenRobot> sena_kun: yeah, positionals were removed from bless to gain 180% speed gain (they weren't used anyway). And they were not specced

[17:52] <nine> ugexe: that's the Staging repo's raison d'être, yes. The other change is for supporting custom repository implementations like perl6 -I'CompUnit::Repository::Github#'

[17:54] <nine> ugexe: having the Staging repo in core when it has such a narrow (despite being important) use case felt so wrong that I finally dug into properly supporting custom repo implementations :)

[17:54] <BrokenRobot> :o

[17:54] <BrokenRobot> That would let people make the BitTorrent-based repos someone wanted :D

[17:54] <nine> yep...including full precompilation capabilities :)

[17:55] <BrokenRobot> \o/ nine++

[17:55] *** espadrine left
[17:56] <sena_kun> Thanks for the answers and quick fix.

[18:00] <BrokenRobot> m: say val("10").WHAT

[18:00] <camelia> rakudo-moar a557a1: OUTPUT«(IntStr)␤»

[18:00] <BrokenRobot> m: say "10".Numeric.WHAT

[18:00] <camelia> rakudo-moar a557a1: OUTPUT«(Int)␤»

[18:00] *** yqt left
[18:00] <BrokenRobot> How is that possible when Str.Numeric calls val()? :S https://github.com/rakudo/rakudo/blob/nom/src/core/Str.pm#L93

[18:01] <BrokenRobot> "that" being, why is it an Int and not an IntStr?

[18:01] *** ace_1 joined
[18:01] *** ace_1 left
[18:02] *** sjoshi left
[18:03] <BrokenRobot> m: say val("10", :val-or-fail).WHAT'

[18:03] *** vendethiel joined
[18:03] <camelia> rakudo-moar a557a1: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say val("10", :val-or-fail).WHAT7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        state…»

[18:03] <BrokenRobot> m: say val("10", :val-or-fail).WHAT

[18:03] <camelia> rakudo-moar a557a1: OUTPUT«(Int)␤»

[18:03] *** sjoshi joined
[18:04] *** buharin joined
[18:04] <BrokenRobot> That sub looks might scary

[18:04] * BrokenRobot pretends it didn't see anything

[18:07] *** domidumont joined
[18:08] <ugexe> nine: If I understand then it makes sense, but I don't think you'll want to return IO::Path for `source-file` as I'd expect CUR::Github to treat a remote file like a local file. I suspect `my $WHICH = self.^name ~ '|' ~ $abspath;` may change how CUR::AP/CUR::FS currently load though (probably for the better)

[18:08] *** MadcapJake left
[18:09] *** MadcapJake joined
[18:10] *** nightfrog left
[18:11] <BrokenRobot> m: val("௰", :val-or-fail).say

[18:11] <camelia> rakudo-moar a557a1: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5௰' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:11] <BrokenRobot> Hm

[18:11] <sena_kun> And now it breaks in runtime with "Cannot look up attributes in a type object" without even line number. Eh, what an unkind package.

[18:11] <ugexe> i've toyed with similar ideas but using Distribution's .content to access the source

[18:12] *** sjoshi left
[18:13] <buharin> hey

[18:13] <buharin> I am looking for PerlGame framework

[18:13] <TimToady> we only allow digits in val

[18:14] <TimToady> ௰ is only numeric, not a digit

[18:14] <nine> ugexe: the source-file method is already used that way by CompUnit::RepositoryRegistry::file-for-spec. The implementation in Staging just overrides the one in Locally to pass requests through to the underlying Installation repo if necessary

[18:15] <BrokenRobot> TimToady: how come? That's a bit LTA, if I speak whatever language "௰" is an enter that at the terminal prompting me for a number. This started with https://rt.perl.org/Ticket/Display.html?id=127866

[18:15] <BrokenRobot> m: say '௰'.Int

[18:15] <camelia> rakudo-moar a557a1: OUTPUT«10␤»

[18:15] <BrokenRobot> m: say '௰' + 10

[18:15] <camelia> rakudo-moar a557a1: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5௰' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:15] <BrokenRobot> TimToady: And I went to fix the Numeric, but I see it's using val() and I was wondering if val() should be fixed. If not, should Str.Numeric and Str.Int handle No chars?

[18:16] <BrokenRobot> .u ௰

[18:16] <yoleaux> U+0BF0 TAMIL NUMBER TEN [No] (௰)

[18:16] <TimToady> I think there's enough potential confusion here that we should make programmers use unival if they really need that capability

[18:17] <BrokenRobot> TimToady: fair enough. I'll undo the .Int version then.

[18:18] <TimToady> it becomes a teachable moment for the difference between digits and non-digits, and we like those delayed teachable moments

[18:19] <DrForr> buharin: Well volunteered! :)

[18:19] <buharin> not me ;D

[18:19] <buharin> pherphaps I should found Perl job first

[18:20] <BrokenRobot> buharin: we have a Game Dev group: https://github.com/PerlGameDev/

[18:21] <buharin> oh okay

[18:21] <buharin> :)

[18:22] *** kurahaupo left
[18:23] *** wisti joined
[18:27] *** Azry left
[18:27] <sena_kun> I'll prepare a bit of tests and some fixes for Test::Builder then(hunted "look up" error, at least) tomorrow, if nobody is against.

[18:28] *** abruanese left
[18:36] *** nightfrog joined
[18:44] *** |Sno| joined
[18:45] *** colomon joined
[18:47] *** sena_kun left
[18:48] *** domidumont left
[18:51] *** labster joined
[18:53] <timotimo> MasterDuke: did you look at the coverage tool yet?

[18:55] <MasterDuke> timotimo: good/bad timing, i got pulled away until just now, but have to leave again in 5 min. i probably won't get a chance for a couple hours

[18:56] <timotimo> that's fine :)

[18:59] *** eroux left
[19:00] *** huggable left
[19:00] *** huggable joined
[19:02] *** darutoko left
[19:08] *** wamba joined
[19:10] <buharin> that what I want to say

[19:10] <buharin> Perl got really strong things

[19:11] <buharin> I read about references and it is amazing how can I transform reference to array to scalar etc.

[19:12] <psch> we don't really have references, that's Perl 5

[19:12] <psch> well, or "everything could be called a reference, but we prefer not to because it's confusing with how Perl 5 uses that term" maybe

[19:12] <buharin> ohh I am learning Perl 5 ;D cause I want to get job in it

[19:15] *** yqt joined
[19:16] <BrokenRobot> buharin: FWIW, there's #perl channel that specializes in Perl 5

[19:16] *** domidumont joined
[19:17] <buharin> ya I know

[19:17] <buharin> but I like more to stay here

[19:18] <BrokenRobot> buharin: how come?

[19:18] <BrokenRobot> I mean you can stay here and there at the same time :)

[19:18] <buharin> okay :)

[19:20] <DrForr> You probably won't learn much perl5 here though.

[19:22] <dalek> doc: c8f953e | (Jan-Olof Hendig)++ | doc/Type/Version.pod6:

[19:22] <dalek> doc: Added code examples to methods parts and plus

[19:22] <dalek> doc: review: https://github.com/perl6/doc/commit/c8f953e180

[19:24] *** mrplastic joined
[19:29] <RabidGravy> I think I'm un-learning twenty years of Perl 5

[19:29] <mrplastic> how do i get started with perl 6

[19:30] <timotimo> what languages do you have experience with already, mrplastic?

[19:30] <mrplastic> im not a programmer but i'm exploring emacslisp

[19:30] <gfldex> mrplastic: see: http://perl6.org/documentation/

[19:31] <mrplastic> i just think itd be a good idea to know 1 or 2 programming languages for personal use

[19:31] <mrplastic> but i dont know what to do with it, been learning a whole just using emacs for everything

[19:32] <DrForr> Good. Check out http://perl6.org to learn a bit about it.

[19:32] *** wisti left
[19:34] *** wisti joined
[19:34] *** wisti left
[19:34] <timotimo> http://perl6.org/downloads/  -  especially this page has a few good links on the right side of the page

[19:35] *** brrt joined
[19:37] <BrokenRobot> huggable: new :is: See "For Newcomers" section on http://perl6.org/documentation/

[19:37] <huggable> BrokenRobot, Added new as See "For Newcomers" section on http://perl6.org/documentation/

[19:38] *** jack_rabbit left
[19:39] *** domidumont left
[19:44] *** wisti joined
[19:52] *** canopus left
[19:57] *** canopus joined
[19:58] <vendethiel> hehehe. I am, day after day, "sneaking" Perl 6 on my coworkers' computers by writing nice scripts \o/. Even my pro-Java coworker admitted it was nice to get something done in so little time for experimental/scripting purposes...

[19:59] <vendethiel> Also $person-who-did-the-dmg++. Since it's not on Homebrew, I was afraid my colleague would give up if he had to use rakudobrew (since it's a bit long.) but the dmg was perfect.

[20:00] *** kerframil joined
[20:02] *** cbk joined
[20:02] *** cbk left
[20:03] *** brrt left
[20:03] *** cbk joined
[20:04] *** CIAvash left
[20:05] *** rindolf left
[20:05] <mrplastic> i'm doubting perl6 is a good first programming language, but its really interesting

[20:05] <mrplastic>  

[20:06] *** ZoffixMobile joined
[20:08] *** jjido joined
[20:09] *** rindolf joined
[20:10] <ZoffixMobile> mrplastic, it's a great first language, as you don't get forced into a set paradigm and instead learn how to code first. Don't use types. Start using them when you want to learn about them. Don't use OO, until you want to learn OO. Best of all, you don't have to suffer the pain of Unicode, since in Perl 6 it just works and learning Grammars is definitely easier than trying to master giant regexes. It's just Perl 6 is *big* and it does have advanced feat

[20:11] *** yqt left
[20:12] <ZoffixMobile> mrplastic, also: try learning Javascript. Everybody and their brother is using it. There's this resource that I found insufferable due to it absolute beginner-oriented approach, but maybe it's perfect for you: http://eloquentjavascript.net/

[20:13] <ZoffixMobile> mrplastic, and that lets you then do node server-side, which is basically a Javascript library

[20:13] <ZoffixMobile> ???

[20:13] <ZoffixMobile> Profit! :)

[20:14] *** buharin left
[20:16] *** rurban joined
[20:17] *** adu joined
[20:18] *** itaipu joined
[20:20] <parabolize> mrplastic: perl6 has two problems for new programmers: 1. its documentation is a work in progress, 2. it doesn't have any introductory level texts. Both are temporary issues. On the other hand I wouldn't think perl6 would be any harder to learn than elisp. 

[20:21] <timotimo> introductory level texts? is that not what perl6intro is?

[20:21] <timotimo> i thought the problem was one level after that?

[20:22] <parabolize> for a first language? no, I don't think so.

[20:23] *** adu left
[20:25] <timotimo> oh

[20:32] <timotimo> well, there'll be books in time

[20:35] <ZoffixMobile> this time next year

[20:36] <ZoffixMobile> And to the point of lacking stuff: since Perl 6 and its ecosystem are so new, it's very easy to find things to write and contribute to, instead of always being told to "just use a module" :)

[20:37] *** jjido left
[20:38] *** rurban_ joined
[20:39] <parabolize> thats true. Its like scheme once was before it was guiled to death.

[20:40] <timotimo> oh? i didn't know guile did bad things to scheme

[20:41] <parabolize> well, good things if you were actually using it for other things than learning low level language mechanics

[20:46] *** kaare_ left
[20:46] *** jonas2 left
[20:48] *** jjido joined
[20:51] *** wisti left
[20:54] *** tushar joined
[20:54] *** rindolf left
[20:54] *** ZoffixMobile left
[20:55] *** tushar left
[20:55] *** tushar joined
[21:01] *** rindolf joined
[21:04] *** cgfbee left
[21:05] *** jjido left
[21:06] *** donaldh joined
[21:11] *** setty1 left
[21:13] *** kanishka left
[21:15] <dalek> ecosystem: 3096a3d | ugexe++ | META.list:

[21:15] <dalek> ecosystem: Add Distribution::Common

[21:15] <dalek> ecosystem: 

[21:15] <dalek> ecosystem: https://github.com/ugexe/Perl6-Distribution--Common

[21:15] <dalek> ecosystem: 

[21:15] <dalek> ecosystem: Installable distributions from common data sources using rakudos new `Distribution` interface

[21:15] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/3096a3dabe

[21:16] * lizmat is working on the Perl 6 Weekly

[21:16] <lizmat> anything happen the last week on #perl6 I should report about ?

[21:23] *** donaldh left
[21:23] <AlexDaniel> Zoffix: I'm not there to invalidate anything, but I'll point out if some points are not invalid ;)

[21:24] *** perturbation joined
[21:24] *** donaldh joined
[21:25] *** firstdayonthejob left
[21:26] *** vendethiel left
[21:27] *** donaldh left
[21:28] *** donaldh joined
[21:32] *** firstdayonthejob joined
[21:34] *** firstdayonthejob left
[21:35] *** heatsink joined
[21:35] *** rindolf left
[21:38] <Zoffix> Don't give a shit.

[21:38] *** Zoffix left
[21:39] *** freezerburnv joined
[21:40] <freezerburnv> With NativeCall, is there a way to say that a CStruct class must have a CArray of length 5 embedded?

[21:41] <freezerburnv> I found the HAS keyword which says something is embedded, but I'm not sure how to use with a CArray to say it has 5 elements

[21:45] *** vendethiel joined
[21:46] <timotimo> we don't have that yet, sorry

[21:48] <freezerburnv> So I just have to do like you've done in the past and just embed 5 of the element?

[21:50] <freezerburnv> So: class Thing is repr('CStruct') { HAS TheStruct $.thing1; HAS TheStruct $.thing2; ... }

[21:53] *** rudi_s joined
[21:53] *** TEttinger joined
[21:58] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2016/07/04/2016-27-summer-starts/

[21:59] *** perturbation left
[22:01] <tbrowder> please review S26 PR: https://github.com/perl6/specs/pull/111

[22:01] <dalek> specs: fc36bc2 | (Tom Browder)++ | S26-documentation.pod:

[22:01] <dalek> specs: clarify use of column separators

[22:01] <dalek> specs: review: https://github.com/perl6/specs/commit/fc36bc28f9

[22:01] <dalek> specs: 0080549 | lizmat++ | S26-documentation.pod:

[22:01] <dalek> specs: Merge pull request #111 from tbrowder/doc-table-mod

[22:01] <dalek> specs: 

[22:01] <dalek> specs: clarify use of column separators

[22:01] <dalek> specs: review: https://github.com/perl6/specs/commit/00805498c2

[22:06] *** cognominal left
[22:06] *** cog_ left
[22:06] *** vendethiel left
[22:07] *** donaldh left
[22:07] *** donaldh joined
[22:08] *** freezerburnv left
[22:10] *** donaldh left
[22:12] *** firstdayonthejob joined
[22:13] *** donaldh joined
[22:14] *** itaipu left
[22:19] *** RabidGravy left
[22:21] *** Azry_ joined
[22:24] <parabolize> do any of the editors or their plugins automatically remove trailing white space with perl6 files? Removing or blocking them on commit is good but it would be nice to see it happen in the editor. Something like jedi with python or emacs where the extra spaces and tabs disappear when you move to another line or save?

[22:27] <donaldh> parabolize: emacs - (add-hook 'before-save-hook 'delete-trailing-whitespace)

[22:28] <parabolize> yeah, emacs is removing them when I move to a new line

[22:29] <donaldh> oh, sorry I thought you were asking for a solution in emacs.

[22:29] <parabolize> problem there is.. everything else. Is there a good perl6 package for highlighting and such

[22:30] <donaldh> Yes there's a perl6-mode

[22:30] *** canopus left
[22:31] <donaldh> parabolize: I use https://github.com/hinrik/perl6-mode

[22:31] <donaldh> Available on MELPA

[22:31] <parabolize> \o/

[22:31] *** wisti joined
[22:34] *** Zoffix joined
[22:36] *** canopus joined
[22:36] <Zoffix> Does anyone know what perl6 -e "say '/'.IO.mkdir" tries to do on Windows? When I run it in C:\Users\zoffix> it tells me 'True' and if I run it in C:\ it tells me Failed to create directory 'C:\' with mode '0o777': Failed to mkdir: 5

[22:38] <Zoffix> hum... '/foo'.IO.mkdir run from \Users\zoffix creates C:\foo

[22:38] <AlexDaniel> parabolize: another way to handle it is not to delete trailing whitespace automatically, but to make it visible

[22:38] <AlexDaniel> parabolize: in fact, ｢git diff｣ should show it

[22:40] *** bjz left
[22:45] *** parabolize left
[22:46] *** kurahaupo joined
[22:47] *** firstdayonthejob left
[22:47] *** Zoffix left
[22:50] *** firstdayonthejob joined
[22:50] *** parabolize joined
[23:00] *** huggable left
[23:01] *** grondilu left
[23:02] <gfldex> lolibloggedalittle https://gfldex.wordpress.com/2016/07/05/2-2-3/

[23:03] *** bjz joined
[23:05] <gfldex> lizmat: am I to late for a late entry on the weekly?

[23:08] *** bjz_ joined
[23:10] *** donaldh left
[23:11] *** bjz left
[23:13] *** bjz_ left
[23:19] *** firstdayonthejob left
[23:21] *** vike1 is now known as vike

[23:23] *** Zoffix joined
[23:23] *** Zoffix left
[23:28] *** rurban left
[23:36] <BrokenRobot> gfldex: yup. "<lizmat> good night, #perl6-dev!" that was an hour ago. Just remind her to list it next week.

[23:39] *** rurban joined
[23:39] *** rurban left
[23:44] *** rurban_ left
[23:44] *** zacts joined
[23:46] *** Zoffix joined
[23:46] <Zoffix> m: try { Supply.interval(1).tap(-> { say 'hi' }); sleep 3; CATCH { default { .message.say } } }

[23:46] <camelia> rakudo-moar 234aa4: OUTPUT«Unhandled exception in code scheduled on thread 4␤Too many positionals passed; expected 0 arguments but got 1␤  in block  at <tmp> line 1␤␤»

[23:46] <Zoffix> Any way to catch that exception?

[23:46] *** zengargoyle left
[23:47] <gfldex> did you try a try around await?

[23:49] <Zoffix> gfldex, not sure what you mean. await where?

[23:49] <Zoffix> await doesn't work on Taps, does it?

[23:49] *** zengargoyle joined
[23:50] <gfldex> i believe to remember that await will collect all exceptions and reemits them. So if you can rewrite your code to have await, you should be able to CATCH.

[23:50] <Zoffix> m: try { await Supply.interval(1).tap(-> { say 'hi' }); sleep 3; CATCH { default { .message.say } } }

[23:50] <camelia> rakudo-moar 234aa4: OUTPUT«Must specify a Promise or Channel to await on (got a Tap)␤»

[23:53] <timotimo> you have to install an unhandled exception handler on the scheduler, i'd say

[23:54] <Zoffix> k, I'll go another way. spawn another perl6 (there's already a sub for that in roast)

[23:56] *** cooper left
[23:56] *** cooper joined
[23:57] *** MasterDuke left
[23:57] *** zacts left
[23:57] *** sftf left
[23:57] *** harmil left
