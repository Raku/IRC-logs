[00:01] *** firstdayonthejob left
[00:01] *** TreyHarr1 is now known as TreyHarris

[00:01] *** espadrine left
[00:02] *** Azry left
[00:04] *** shicheng left
[00:06] *** skids joined
[00:06] *** Azry joined
[00:24] *** johndau joined
[00:25] *** aleogen_ joined
[00:27] *** Ven left
[00:27] *** wbill left
[00:27] *** aleogen left
[00:30] *** Ven joined
[00:40] *** shicheng joined
[00:42] *** Skarsnik left
[00:44] *** kurahaupo left
[00:47] *** cdg left
[00:48] *** cdg joined
[00:49] *** RabidGravy left
[00:53] *** cdg left
[00:56] *** zacts left
[00:58] *** zacts joined
[00:58] *** zacts is now known as Guest13656

[01:05] *** lichtkind__ left
[01:05] <teatime> So how does zef compare to panda?

[01:06] <timotimo> it does stuff in parallel

[01:06] <timotimo> it has pretty outputs

[01:07] * timotimo heads towards bed

[01:08] <Xliff> Is it in Ubuntu? Because Panda is broken, there.

[01:09] <Xliff> My first sign that something was b0rked? 

[01:10] <teatime> was just curious.

[01:10] <Xliff> Having to invoke panda like this: perl6 -I /usr/share/perl6/lib /usr/bin/panda

[01:10] <Xliff> Otherwise panda couldn't find Command::Shell

[01:11] *** kid51 joined
[01:11] <Xliff> Hrm. zef isn't installable via apt.

[01:13] *** aborazmeh joined
[01:13] *** aborazmeh left
[01:13] *** aborazmeh joined
[01:18] *** stmuk_ joined
[01:21] *** stmuk left
[01:25] <[Coke]> .seen awwaiid

[01:25] <yoleaux> I saw awwaiid 21 Mar 2016 14:50Z in #perl6: <awwaiid> yep

[01:25] <Xliff> Looks like the File::Which package is broken. It doesn't install via panda OR zef

[01:26] <Xliff> *gack* -- time for the manual method.

[01:27] <teatime> rakudobrew was suprisingly quick and painless.

[01:41] <Xliff> The File::Which  build method for rakudobrew didn't work.

[01:41] <Xliff> File::Which itself seems broken on Ubuntu

[01:47] <Xliff> Yup. Ubuntu perl6 installation is completely b0rked.

[01:47] <Xliff> At least the one I get from apt.

[01:47] <teatime> mine from Fedora23 was too old

[01:49] <Xliff> Ah well. Maybe I'll try the *shudder* Windows version.

[01:51] <Xliff> Eh. Maybe not. Why does everything and their second removed cousin's left testical always want to install things on to C: drive? 

[01:52] <Xliff> And to make matters worse, don't give you the option to change that irresponsible behavior?

[01:52] <Xliff> Feh. I guess I will go back to watching terrorists blow up Washington, DC

[01:52] <diakopter> eh?

[01:53] <Xliff> I'm watching a movie where terrorists (try) to blow up Washington, DC

[01:53] <Xliff> Mainly because I can't get File::Which to work in Perl 6 under Ubuntu.

[01:54] <Xliff> Just doesn't want to find the File::Which::Unix module. Even though I've gone and bloody copied the files to the right place by hand.

[02:03] *** yqt left
[02:11] *** lizmat_ joined
[02:14] *** lizmat left
[02:18] *** aborazmeh left
[02:24] *** kid51 left
[02:29] *** labster left
[02:33] *** Actualeyes joined
[02:40] *** molaf_ joined
[02:43] *** molaf left
[02:46] <jack_rabbit> Is there a reason this page switches from English to German halfway through? www.perlfoundation.org/perl6/index.cgi%3Fperl_6_tutorial_part_1

[02:52] *** avenj left
[02:52] *** avenj joined
[02:54] <[Coke]> anything on the perlfoundation wiki is horribly out of date.

[02:56] <jack_rabbit> ahh, good. I'll ignore it then.

[02:57] *** kalkin- joined
[03:00] *** shicheng left
[03:01] *** kalkin-_ left
[03:03] *** araujo_ joined
[03:06] *** araujo left
[03:08] <Xliff> moritz: Is this you? http://perlgeek.de/en/article/mutable-grammar-for-perl-6

[03:08] <Xliff> jack_rabbit: I hit that SAME PAGE earlier and was asking myself the same thing.

[03:09] <Xliff> jack_rabbit: If you are looking for decent perl 5-6 writeups, then I've found this: 

[03:09] <Xliff> http://perlgeek.de/blog-en/perl-5-to-6/00-intro.html

[03:10] <jack_rabbit> Nice, thanks!

[03:11] <Xliff> http://perlgeek.de/en/article/discovering-meta-object-protocol <-- Aaaieee!!! Use of [goto] detected! 

[03:11] <Xliff> ^_^

[03:15] *** kentnl left
[03:15] *** kent\n joined
[03:18] <Xliff> Hrm.

[03:18] <Xliff> Windows implementation of Rakudo doesn't like the last code block on this page..

[03:19] <Xliff> http://perlgeek.de/en/article/discovering-meta-object-protocol

[03:25] *** kaare_ joined
[03:28] <dalek> DBIish: 2d14e97 | kmwallio++ | lib/DBDish/SQLite.pm6:

[03:28] <dalek> DBIish: Check for usage of in memory database

[03:28] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/2d14e97666

[03:28] <dalek> DBIish: 53c677a | (Salvador Ortiz)++ | lib/DBDish/SQLite.pm6:

[03:28] <dalek> DBIish: Merge pull request #57 from kmwallio/master

[03:28] <dalek> DBIish: 

[03:28] <dalek> DBIish: SQLite: Check for usage of in memory database

[03:28] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/53c677adc6

[03:33] *** noganex_ joined
[03:37] *** noganex left
[03:37] <Ben_Goldberg> Xliff, goto &subroutine is vastly different from goto label.  The latter is evil, the former not so much.

[03:44] *** Ben_Goldberg left
[03:48] *** khw left
[04:03] *** AlexDaniel left
[04:06] *** araujo_ left
[04:07] *** araujo joined
[04:16] *** rindolf joined
[04:53] *** vendethiel joined
[04:55] *** nadim joined
[04:58] *** _nadim left
[05:01] *** skids left
[05:20] <Hotkeys> ?p6> (;)

[05:20] <Hotkeys> m: (;)

[05:20] <Hotkeys> fun thing

[05:20] <camelia> rakudo-moar 54ce66: OUTPUT«(signal XFSZ)Non-QAST node visited BOOTInt␤Weird node visited: BOOTInt␤Resultchild 0 can't returns! BOOTInt␤- QAST::Stmts :BY<comp_unit ua u> :context<sink> (;)␤  - QAST::Stmt :BY<comp_unit ua u u> :context<sink> :final (;)␤    - 0␤␤Non-QAST …»

[05:21] <Xliff> How is "goto &sub" less evil than "goto label"

[05:22] <Hotkeys> I think goto is evil in general

[05:22] <Xliff> Especially when &sub might take parameters... but then again, probably requirement that &sub take none.

[05:23] <Xliff> Ohh.... goto &sub inherits callers argument stack.

[05:24] <Xliff> Hotkeys: Well, everyone has their own opinions. 

[05:25] <Xliff> For me, as long as it's readable, and used in a non logical-headache inducing way, I will use it.

[05:25] <Xliff> So "goto &sub" actually makes a lot of sense.

[05:42] *** labster joined
[05:46] *** milwen left
[05:48] *** Cabanossi left
[05:51] *** Cabanossi joined
[05:55] *** xinming left
[06:00] *** vendethiel left
[06:03] *** musiKk_ joined
[06:14] *** Xliff left
[06:18] *** jack_rabbit left
[06:18] *** snarkyboojum joined
[06:36] *** CIAvash joined
[06:36] *** domidumont joined
[06:38] *** domidumont left
[06:38] *** domidumont joined
[06:40] *** Sgeo__ joined
[06:44] *** domidumont left
[06:57] *** espadrine joined
[07:03] <moritz> \o

[07:06] *** domidumont joined
[07:09] *** bjz joined
[07:10] *** domidumont left
[07:11] *** snarkyboojum left
[07:11] *** FROGGS joined
[07:12] *** domidumont joined
[07:12] *** sjoshi joined
[07:17] *** firstdayonthejob joined
[07:24] *** telex left
[07:26] *** telex joined
[07:27] *** shicheng joined
[07:32] *** nakiro joined
[07:51] <rindolf> moritz: hi. o/

[07:52] *** espadrine left
[07:54] *** darutoko joined
[07:56] *** firstdayonthejob left
[07:57] *** Upasaka left
[07:58] *** sno left
[07:58] *** Upasaka joined
[08:05] *** zakharyas joined
[08:08] *** Amnez777 left
[08:09] *** Amnez777 joined
[08:12] *** abraxxa joined
[08:12] *** Amnez777 left
[08:12] *** Amnez777 joined
[08:15] *** Ven left
[08:17] *** Ven joined
[08:18] *** bjz_ joined
[08:19] *** bjz left
[08:23] *** sno joined
[08:27] *** Guest11071 left
[08:28] *** ely-se joined
[08:33] *** wamba joined
[08:44] *** shicheng left
[08:52] *** kaare_ left
[08:54] *** dakkar joined
[08:57] *** RabidGravy joined
[08:57] <teatime> a doc I'm reading describes ^^ as 'Short-circuit exclusive or (XOR)'... a short-circuit XOR would keep evaluating arguments until it either succeeded or encountered two true values, right?  So a binary XOR could never actually short-circuit, but must always evaluate both operands, correct?

[08:57] <moritz> teatime: correct

[08:58] <moritz> m: say 1 ?^ 1 ?^ (say 42)

[08:58] <camelia> rakudo-moar 54ce66: OUTPUT«42␤True␤»

[08:58] <moritz> doesn't look very short-circuity to me

[08:59] <moritz> uhm, that's just an or, not an XOR

[08:59] * moritz confused

[08:59] <moritz> m: say 1 ?^ 1

[08:59] <camelia> rakudo-moar 54ce66: OUTPUT«False␤»

[08:59] <moritz> it simply seems to look for an odd number of trues

[09:00] <teatime> it's a binary operator, right?

[09:00] <teatime> m: say 1 ?^ 1 ?^ 1

[09:00] <camelia> rakudo-moar 54ce66: OUTPUT«True␤»

[09:00] *** espadrine joined
[09:00] <teatime> m: say 1 ?^ 1 ?^ 1 ?^ 1

[09:00] <camelia> rakudo-moar 54ce66: OUTPUT«False␤»

[09:00] <teatime> heh that is weird

[09:00] <teatime> oh no it makes perfect sense

[09:00] *** zakharyas1 joined
[09:00] <jast> what did you expect?

[09:00] *** zakharyas left
[09:01] <teatime> (1 ?^ 1) ?^ 1 == False XOR True

[09:02] <teatime> ^^ isn't binary though according to docs

[09:02] <jast> ^^ isn't actually XOR, though

[09:03] <teatime> so this should be 1, then Nil:

[09:03] <teatime> m: 0 ^^ False ^^ 1 ^^ ""

[09:03] <camelia> rakudo-moar 54ce66: ( no output )

[09:03] <teatime> m: say 0 ^^ False ^^ 1 ^^ "", 0 ^^ 1 ^^ 1

[09:03] <camelia> rakudo-moar 54ce66: OUTPUT«1Nil␤»

[09:03] <jast> according to the reference docs, it returns the first true argument iff there is exactly one (in a chain of ^^s), and Nil in any other case

[09:03] <jast> so it short-circuits as soon as it finds the second true argument

[09:04] <teatime> that sounds mostly like how I'd expect short-circuit XOR to work.

[09:04] <RabidGravy> erp

[09:05] *** espadrine_ joined
[09:05] <jast> it's not actually XOR, formally speaking, so I guess that can cause some confusion

[09:05] <teatime> I mean normally a short-circuit operator would return the last argument evaluated, but in case of XOR that would cause it to return true values when the actual XOR operation should return false so that wouldn't make any sense.

[09:05] <teatime> jast: I mean, it returns true when XOR would be true and false when XOR would be false, so I don't follow?

[09:05] <teatime> jast: unless you would also say that && is not logical-and

[09:06] <jast> well, XOR is, by definition, a binary operator

[09:06] *** CIAvash left
[09:06] <jast> and if you have a chain of proper XORs, the result is true iff the number of true arguments is odd

[09:06] <teatime> eh, if you say so, I'm familiar w/ it as an n-ary operator

[09:07] <jast> yeah, but then still the 'odd number of true inputs' normally applies

[09:07] <teatime> yes, ^^ is not binary XOR and being infix makes it appear like it would be.

[09:07] <teatime> jast: it does?  to me, XOR means 'exactly 1 input is true'

[09:08] <teatime> I have more background in circuits than math though, so maybe I am mis-led by that

[09:09] <teatime> I understand why A XOR B XOR C ... should be true when an odd number of inputs are true, but I would expect xor(A, B, C, ...) to be true when exactly 1 input is true.

[09:09] <jast> Wikipedia claims the "exactly one true input" interpretation is rare compared to the "odd number of true inputs" in circuits

[09:09] <jast> I don't have a notable background in circuits myself, though

[09:09] *** espadrine left
[09:10] *** fireartist joined
[09:10] <jast> example gate: http://www.nxp.com/documents/data_sheet/74LVC1G386.pdf

[09:10] *** kent\n left
[09:11] *** fireartist left
[09:11] <teatime> I guess you're right.

[09:11] <teatime> TIL.

[09:13] <jast> well, the important part is that ^^ pretty much does what you expected :}

[09:14] *** fireartist joined
[09:15] *** kent\n joined
[09:17] *** virtualsue joined
[09:19] *** vendethiel joined
[09:19] <teatime> can I declare my own infix operator that does quote-bareword-on-the-left like => does ?

[09:22] <moritz> teatime: no, that'd need to be more than just an operator

[09:24] <teatime> k.

[09:31] *** Upasaka left
[09:31] *** Upasaka joined
[09:34] * lizmat_ clickbaits https://p6weekly.wordpress.com/2016/03/21/2016-12-less-happening/

[09:34] *** lizmat_ is now known as lizmat

[09:36] <RabidGravy> Ooooh. I upgraded my Fedora yesterday and it appears that the parse stage of building rakudo is 40% quicker

[09:36] <RabidGravy> that's got to be coincidence right?

[09:36] *** sena_kun joined
[09:38] <moritz> RabidGravy: jnthn++ did some impressive optimizations, though I don't know if they account for 40% :-)

[09:40] *** Upasaka left
[09:40] *** Upasaka joined
[09:43] *** vendethiel left
[09:43] <timotimo> well, if your rakudo parse stage was currently running against the ram limit and starting to swap about 1 or 2 megabytes worth of ram, then perhaps :P

[09:46] <RabidGravy> possibly

[09:49] *** kurahaupo joined
[09:49] *** TEttinger left
[09:52] *** luiz_lha joined
[09:52] *** luiz_lha is now known as Guest25453

[09:53] *** Guest25453 left
[09:58] *** kurahaupo left
[09:59] *** kurahaupo joined
[10:00] *** virtualsue left
[10:01] *** johndau left
[10:04] <moritz> timotimo: I think the savings are more than 1 or 2 mb ram

[10:04] <moritz> timotimo: that's just the base savings, that is, memory usage of an empty while loop

[10:04] <RabidGravy> which is all good

[10:04] <moritz> timotimo: but if you do more (and compiling rakudo does a lot more), the memory savings will be more pronounced

[10:06] *** adhoc joined
[10:08] *** foo_ left
[10:10] *** adhoc left
[10:14] <timotimo> i guess :)

[10:17] *** guui15215454 joined
[10:19] *** luiz_lha_ joined
[10:19] *** luiz_lha_ left
[10:20] *** guui15215454 is now known as luiz_lha

[10:21] <RabidGravy> well all my modules still work, so all's good

[10:32] <DrForr> And that's all that's important :)

[10:35] <dbohdan> DrForr: Hi! I wasn't able to test your server yesterday.

[10:36] <dbohdan> It was down as far as I could tell.

[10:36] <DrForr> No worries.

[10:37] <DrForr> It's not exactly meant to be a production-quality server.

[10:37] <DrForr> But feel free to check now...

[10:38] <dbohdan> Okay. Starting...

[10:40] <dbohdan> Looks like I was right. Something siege does instakills it.

[10:47] <DrForr> Okay, that's good to know. I can at least test it at home...

[10:51] <DrForr> I've got no real idea what Crust does internally, I've just been layering on top of that.

[11:00] <DrForr> I don't think what I did should break existing Crust, but obviously something has.

[11:02] *** virtualsue joined
[11:08] *** vytas left
[11:11] *** virtualsue left
[11:12] *** vytas joined
[11:17] *** bjz joined
[11:19] *** labster left
[11:19] *** bjz_ left
[11:21] *** vendethiel joined
[11:23] *** xinming joined
[11:29] *** kid51 joined
[11:36] *** brrt joined
[11:38] *** FROGGS left
[11:43] *** vendethiel left
[11:47] *** RabidGravy left
[11:49] *** kurahaupo left
[11:51] *** kid51 left
[12:20] *** vendethiel joined
[12:21] *** shr joined
[12:22] *** sjoshi left
[12:23] *** sjoshi joined
[12:27] *** nadim left
[12:28] *** nadim joined
[12:39] *** musiKk_ left
[12:42] *** vendethiel left
[12:47] *** shr left
[12:50] *** vendethiel joined
[12:53] *** xinming left
[12:53] *** Sgeo__ left
[12:53] *** xinming joined
[13:12] *** vendethiel left
[13:20] *** g4 joined
[13:20] *** g4 left
[13:20] *** g4 joined
[13:22] *** ecocode joined
[13:25] *** Khisanth left
[13:28] *** tokomer joined
[13:32] *** tokomer left
[13:34] *** bjz left
[13:35] <fireartist> can rakudo be built with mingw/gcc on Windows?

[13:37] <jnthn> fireartist: Never tried it myself, but I know the MoarVM configure script has a section for MinGW

[13:37] <jnthn> So "in theory" 

[13:37] <fireartist> ok, that's good enough for me - I'll give it a try :-)

[13:37] <jnthn> Cygwin is the no-go

[13:38] <fireartist> ok

[13:38] *** vendethiel joined
[13:38] *** Khisanth joined
[13:42] <lizmat> jnthn: if Cygwin is a no go, why do we still have IO::Spec::Cygwin.pm ?

[13:44] <jnthn> lizmat: Well, to be clear, it's a no go for MoarVM

[13:44] <lizmat> ah... ok

[13:44] <jnthn> lizmat: You might get r-j running there

[13:44] <jnthn> And it may not be a no go forever...

[13:44] <jnthn> It's libuv that is our main blocker, fwiw.

[13:45] <jnthn> I would worry about it, except it hasn't stopped Node.js taking over the world anyway, so... ;)

[13:46] * moritz sometimes wishes it would have

[13:46] *** bjz joined
[13:46] <jnthn> haha :)

[13:46] <brrt> fireartist: fairly sure you can

[13:47] <brrt> i've built moarvm+rakudo on mingw/gcc with strawberry perl in the past

[13:47] <fireartist> brrt: thanks - I'll report back how I get on

[13:48] <brrt> :-)

[13:48] *** ZoffixW joined
[13:49] <ZoffixW> .tell lizmat if you're looking for content for the next Weekly, you could post the MeetUp for March 30th Toronto Perl Mongers. I'll be giving a "Wow, Perl 6!" talk that will go over the cool bits of Perl 6: http://www.meetup.com/Toronto-Perl-Mongers/events/228600742/

[13:49] <yoleaux> ZoffixW: I'll pass your message to lizmat.

[13:49] *** ZoffixW left
[13:50] <lizmat> wow, that was quick

[13:50] <yoleaux> 13:49Z <ZoffixW> lizmat: if you're looking for content for the next Weekly, you could post the MeetUp for March 30th Toronto Perl Mongers. I'll be giving a "Wow, Perl 6!" talk that will go over the cool bits of Perl 6: http://www.meetup.com/Toronto-Perl-Mongers/events/228600742/

[13:52] <lizmat> more importantly: Zoffix lives!  :-)

[13:53] *** maybekoo2 joined
[13:54] <El_Che> cygwin + cygwingcc for buidling rakudo: no-no. Like jnthn says: libuv

[13:54] <El_Che> it's on the info page of cygwin

[13:55] <El_Che> I adapted the page with the info: http://rakudo.org/how-to-get-rakudo/#Installing-Rakudo-Star-Cygwin

[13:56] *** RabidGravy joined
[13:59] *** maybekoo2 left
[14:00] *** Ven left
[14:02] *** vendethiel left
[14:03] *** Ven joined
[14:05] *** Khisanth left
[14:12] *** maybekoo2 joined
[14:15] <sena_kun> What can cause "Malformed termination of UTF-8 string"? A full story: emacs(if needed), native C function with Str as argument in signature. If I call this function with latin or unicode characters - it's okay. If string contains cyrillic characters - error raises.

[14:16] <RabidGravy> you can supply the encoding to native functions if required

[14:16] <sena_kun> A, oh, I fixed it.

[14:17] <RabidGravy> "is encoded('utf8')" for instance

[14:18] *** Khisanth joined
[14:19] <teatime> What is an "infix stopper" ?

[14:22] <arnsholt> sena_kun: What was the problem, OOC?

[14:22] <jnthn> teatime: Something that blocks the grammar from parsing an infix in various places it shouldn't

[14:22] <RabidGravy> DrForr, the META.info for prancer is missing commas in the "provides"

[14:23] <jnthn> teatime: Why, out of curiosity? :)

[14:23] * psch wonders the same

[14:23] *** espadrine_ is now known as espadrine

[14:23] <jnthn> I'm guessing it showed up in an "Expected" message :)

[14:23] <RabidGravy> yeah it does sometimes

[14:24] <psch> trying to build something that complains about an infixstopper by looking at where we use it in Perl6::Grammar is a bit hard :P

[14:24] <psch> s/something/a snippet/

[14:24] <DrForr> Thanks, will take care of it in a few minutes.

[14:24] <teatime> yeah, but I was also kindof hoping I could define one to use instead of ;

[14:24] <teatime> can I define anything that would take the place of ;

[14:25] *** sjoshi left
[14:25] <sena_kun> arnsholt, I accidently dropped last character when pass size of string to function.

[14:25] <teatime> or define an operator that would take params but needn't be followed by ; ?

[14:25] <jnthn> teatime: I don't think infixstopper is about that...

[14:25] *** Upasaka left
[14:25] <psch> m: 1 + 1 1 + 1 

[14:25] <camelia> rakudo-moar 54ce66: OUTPUT«5===SORRY!5=== Error while compiling /tmp/IU3SYd6mGs␤Two terms in a row␤at /tmp/IU3SYd6mGs:1␤------> 031 + 17⏏5 1 + 1␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤   …»

[14:25] <psch> that expects infixstopper

[14:25] <teatime> jnthn: yeah, I figured upon hearing the def.  an error message had made me hope it was, earlier :)

[14:26] <jnthn> eat_terminator is where we swallow ;

[14:26] <psch> so a slang that adds '\n' might work

[14:26] <psch> which turns this rather python-ish vOv

[14:26] <jnthn> Well, the other thing you can do in a slang is hijack the same mechanism that } uses to be end-of-statement-without-;

[14:26] <teatime> psch: I've got this much working:  '©' ↤  ⟦↕<c o>⟧ ⋯ ↕<(c)>;

[14:27] <Hotkeys> Is there nice slang support yet?

[14:27] <psch> jnthn: right, that's probably the better idea.  afair teatime wants to allow linebreaks inside statements

[14:27] <jnthn> Hotkeys: No

[14:27] <jnthn> Yeah

[14:27] <perlpilot> teatime: what is that?

[14:27] <jnthn> Using <?ENDSTMT> to mark the place should do it

[14:27] <teatime> perlpilot: hehe, a very compact notation for XCompose

[14:27] <psch> ...or just run with ; as statement terminator :)

[14:28] <Hotkeys> Is there any sane way to modify the language grammar? I tried to do it ala Slang::SQL but that didn't work

[14:28] <Hotkeys> And neither does that module for me

[14:29] <psch> Hotkeys: Slang::Tuxic should currently work.  not sure in how far v5 works, but that'd be a more extensive example

[14:29] <teatime> perlpilot: that expands to:  co cO Co cO oc Oc oC OC (c) (C)

[14:29] <Hotkeys> Alright

[14:30] <DrForr> So the Slang mechanism broke again?

[14:31] <jnthn> Hotkeys: There's no officially supported way yet, no

[14:32] <jnthn> It'll be part of the macros work masak++ is leading the way on

[14:33] <Hotkeys> Cool

[14:36] *** Upasaka joined
[14:37] *** cdg joined
[14:37] <Hotkeys> Looking forward to it

[14:39] <perlpilot> teatime: looks like Ook!  :)

[14:39] <sena_kun> If I want to count bytes of Str, I need to manually create buffer from this string>>=call 'bytes'? Is it the most simple way?

[14:39] <sena_kun> :m say Buf.new("someó".encode).bytes;

[14:40] <sena_kun> Oh.

[14:40] <sena_kun> :m say Buf.new("someó".encode).bytes;

[14:40] <psch> m: # not :m

[14:40] <camelia> rakudo-moar 54ce66: ( no output )

[14:40] <moritz> m: say Buf.new("someó".encode).bytes

[14:40] <camelia> rakudo-moar 54ce66: OUTPUT«6␤»

[14:40] <sena_kun> m: say Buf.new("someó".encode).bytes;

[14:40] <camelia> rakudo-moar 54ce66: OUTPUT«6␤»

[14:40] <sena_kun> I did it finally.

[14:41] *** luiz_lha left
[14:41] <moritz> sena_kun++

[14:41] <teatime> perlpilot: lol.

[14:42] <sena_kun> We have "chars", "elems" and "codes" for string. Don't know is it reasonable(sure not), but having something like "bytes" is handy when you need to pass unicode array and lenght to nativecall.

[14:42] <teatime> perlpilot: my nick references the same book/universe as the name 'ook'

[14:42] <teatime> sena_kun: chars & codes def. make sense to have both.

[14:43] <sena_kun> teatime, I don't complain about "why so many lenghts!".

[14:44] <teatime> how though, do you iterate over characters or codepoints (rather than get a count of them) ?

[14:44] *** brrt left
[14:45] <psch> m: say Buf.new("someó".encode($_, :replacement('?'))).bytes for <utf8 utf16 ascii iso-8859-1 windows-1252> # Str.bytes might not make sense

[14:45] <camelia> rakudo-moar 54ce66: OUTPUT«6␤5␤5␤5␤5␤»

[14:46] <jnthn> Well, .bytes is sensitive to the encoding, and computing how many bytes it'll need is about the same effort as encoding it, in general.

[14:46] <jnthn> Work that'd then be repeated to actually encode it to pass it

[14:46] <sena_kun> Okay, seems reasonable.

[14:47] <jnthn> So it's probably better to just write a wrapper sub that takes a Str, encodes it, and then pass a Buf to the native sub along with its .bytes count

[14:47] <sena_kun> Wrapper is a cool idea, thanks.

[14:48] <hoelzro> o/ #perl6

[14:50] <Hotkeys> o7

[14:51] <teatime> .comb seems to split like .chars counts, so that's awesome; and there's .ords.  so I guess that works!

[14:52] <TimToady> .ords will not always agree with .comb/.chars though

[14:52] <TimToady> .ords can't do NFG

[14:52] <teatime> TimToady: I was expecting .ords to output a list the length of .codes()

[14:53] *** Khisanth left
[14:53] <teatime> TimToady: "how though, do you iterate over characters or codepoints (rather than get a count of them) ?"

[14:54] <TimToady> .comb will work for NFG

[14:54] <TimToady> .ords can't return negatives for synthetics though

[14:55] <TimToady> so it's forced back down to the Uni level

[14:55] <teatime> I don't understand.  is NFG a perl-specific term for how it calls a composing sequence a single char ?

[14:55] <TimToady> yes, that's our term for it

[14:56] <teatime> k.  now, what would a negative codepoint indicate?  what's a synthetic?

[14:56] <TimToady> it actually makes temporary syntetic characters for graphemes without a precomposed form in NFC

[14:56] <teatime> ah ok

[14:56] <TimToady> sort of NFC on steroids

[14:57] <TimToady> but .ords isn't invited to the party :)

[14:57] <jnthn> There's also .NFC and .NFD and the K forms on Str if you want the codepoints in a particular normalization form.

[14:58] <teatime> what I was wanting from .ords() was literal codepoints though, so 'A̲b̲c̲d̲.'.chars == 5, .codes == 9, 'A̲b̲c̲d̲.'.ords == (65 818 98 818 99 818 100 818 46)

[14:58] <teatime> is that behavior that can be relied on?

[14:59] <teatime> jnthn: and hopefully it wouldn't modify the input or renormalize unless asked, right?

[15:00] <jnthn> teatime: Str and Uni are immutable

[15:00] <jnthn> teatime: We never do anything on them in-place

[15:01] <jnthn> .NFC returns you a new object, not changes the Str itself. So yeah, it's safe

[15:02] <jnthn> You can rely on .ords to only give you Unicdoe codepoints, though

[15:02] * moritz wonders what will happen to NFG once Unicode decides that it needs a new joiner character that can glue together two "normal" base characters

[15:02] <jnthn> moritz: Up to the Unicode folks.

[15:03] <jnthn> moritz: We've defined NFG in terms of Annex #29

[15:03] <jnthn> moritz: And so outsourced the problem :)

[15:03] <Hotkeys> Is nfg 'new-fangled graphemes'

[15:03] <jnthn> Hotkeys: Normal Form Grapheme, a play on Normal Form Composed

[15:04] <Hotkeys> I was close

[15:04] <perlpilot> Hotkeys: I like your version though and may use it in the future  :)

[15:04] <TimToady> also a pun on the No F-ing Good

[15:04] <Hotkeys> :p

[15:04] *** skids joined
[15:05] <TimToady> most things in the design of Perl 6 serve multiple purposes :)

[15:05] <jnthn> TimToady: I guess you realized that one before I actually used it in a lightning talk? :P

[15:05] * jnthn didn't notice it until he was wondering how to do a funny lightning talk...about Unicode :P

[15:05] <moritz> this one serves to torment jnthn on behalf of the folks who write articles about Perl 6 :-)

[15:06] <TimToady> indeed, it was part of why I coined "NFG" in the first place

[15:06] *** Khisanth joined
[15:06] <jnthn> hah...took me ages to notice

[15:06] <TimToady> to the pure, all things are pure :P

[15:06] <TimToady> to be sure, NFG might be more of an Americanism

[15:08] <TimToady> USians being particularly fond of their various isms...

[15:09] <arnsholt> jnthn: I remember smiling in anticipation when you used NFG to describe the various Unicode horrors in that lightning talk =D

[15:18] *** tokomer joined
[15:18] *** ecocode left
[15:25] * [Coke] agrees to give a talk/tutorial at baltimore perl workshop, and realizes "oh crap, now I have to write something!"

[15:25] *** ely-se left
[15:26] <Hotkeys> Lol

[15:31] <fireartist> building rakudo - should I be using the default 'nom' branch?

[15:31] <moritz> fireartist: if you like living on the (b)leading edge, yes

[15:31] <moritz> fireartist: otherwise you might want to build a relese tag

[15:31] <fireartist> thanks :-)

[15:32] <fireartist> I'll try that before I report any test failures!

[15:36] <dalek> ecosystem: eadda08 | titsuki++ | META.list:

[15:36] <dalek> ecosystem: Add Algorithm::Kruskal to ecosystem

[15:36] <dalek> ecosystem: 

[15:36] <dalek> ecosystem: See https://github.com/titsuki/p6-Algorithm-Kruskal

[15:36] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/eadda089ec

[15:36] <dalek> ecosystem: 1831140 | azawawi++ | META.list:

[15:36] <dalek> ecosystem: Merge pull request #176 from titsuki/add-kruskal

[15:36] <dalek> ecosystem: 

[15:36] <dalek> ecosystem: Add Algorithm::Kruskal to ecosystem

[15:36] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/1831140c86

[15:37] *** tokomer left
[15:37] *** khw joined
[15:41] <fireartist> yay! all tests pass building moar/2016.02 on mingw/windows - I'll just stay away from 'nom' for now...

[15:44] *** fireartist left
[15:44] *** g4 left
[15:46] * [Coke] note sthat 2016.03 is going to be -really- close to what's on nom, so reporting bugs there is useful.

[15:49] <Hotkeys> Did something strange happen with windows nom 

[15:49] <Hotkeys> Oh fireartist left

[15:50] *** vendethiel joined
[15:50] <[Coke]> also note that jnthn is building nom on windows all the time.

[15:51] <Hotkeys> I use windows on my main computer so me too

[15:51] <[Coke]> sorry about the delay in the release, folks; I'll try to get to it tonight or, latest, tomorrow. Thank you for your patience - we had a potential blocker, but dev team has decided to press on, no worries.

[15:51] <Hotkeys> Well not all the time

[15:51] <Hotkeys> Maybe every few days

[16:03] *** nakiro left
[16:06] <RabidGravy> hahaha

[16:08] <RabidGravy> So, some time ago I set up a domain as a weird but common mis-spelling of another domain I own

[16:08] <RabidGravy> but left the e-mail to go to the server 

[16:08] <RabidGravy> so I log in the server and check the email and I have 58 messages - all from recruiters

[16:09] <Hotkeys> Nice

[16:09] <Hotkeys> All of them typoed your email?

[16:10] <RabidGravy> yeah

[16:11] <jnthn> hah...the incredible competence of recruiters :P

[16:11] *** domidumont left
[16:12] *** vendethiel left
[16:14] <stmuk_> masak: http://www.meltingasphalt.com/a-codebase-is-an-organism/

[16:21] <[Coke]> I tend to get a lot of sysadmin related notes for an italian company that isn't quite spelled coleda. :)

[16:23] <RabidGravy> I get stuff all the time for some guy who is apparently a movie productiion manager, whole scripts and budget breakdowns on occassion

[16:23] <RabidGravy> most odd

[16:24] *** musiKk_ joined
[16:25] <Hotkeys> Why are the Texas ops calls Texas ops

[16:25] <stmuk_> I have a namesake who breeds Spaniels ... google image for my name used to get a dog image much to the amusement of ex co-workers :/

[16:29] <jnthn> Hotkeys: 'cus they're bigger than the non-texan forms

[16:30] <jnthn> And apparently "everything's big in Texas"

[16:30] <jnthn> (e.g. the immigration queue you stand in upon arrival)

[16:30] <[Coke]> jnthn: I imagine it's also because texas don't give a rat's ass about yer fancy unicode.

[16:30] <jnthn> Very possibly :P

[16:31] <Hotkeys> Wonderful

[16:44] *** cdg left
[16:58] <ugexe> it always makes me think of them as 10 gallon hats

[17:08] *** sena_kun left
[17:22] *** bzipitidoo joined
[17:25] *** shicheng joined
[17:26] <bzipitidoo> Perl6 is too slow.  And memory intensive.  I made a small program just to count the number of byte values in a file, a histogram.  It worked fine on a little file, but choked on a 90M file.  The OS killed the 1st version after a few minutes, for taking too much memory.  I modified it, and tried again.  After 20 minutes, I gave up on it.  The C version of this simple little program took 1.2 seconds on the 90M file.

[17:28] <cfedde> got it in one!

[17:28] <stmuk_> bzipitidoo: http://doc.perl6.org/language/faq#Is_Perl_6_fast_enough_for_me%3F

[17:28] <dalek> doc: 8fa7964 | (Zoffix Znet)++ | doc/Language/regexes.pod:

[17:28] <dalek> doc: Fix code typo (Closes #430)

[17:28] <dalek> doc: review: https://github.com/perl6/doc/commit/8fa7964e9f

[17:29] <diakopter> bzipitidoo: could you nopaste the program somewhere?

[17:29] <bzipitidoo> Yes.  Someone tell me again where to put it?

[17:29] *** dakkar left
[17:29] <diakopter> gist.github.com

[17:32] <[Coke]> and yes, perl6 needs optimization; but we may be able to point out changes you can make in your code to help.

[17:32] <bzipitidoo> Thanks.  Here it is.  Did a little hack to coerce all UTF-8 values > 255 to 255.  https://gist.github.com/anonymous/90311d86df5d12b7c3fd

[17:33] *** Actualeyes left
[17:33] *** musiKk_ left
[17:34] *** Guest13656 left
[17:35] <[Coke]> also, what does perl6 --version report?

[17:36] <[Coke]> btw, that code doesn't compile.

[17:36] <bzipitidoo> "This is perl6 version 2014.07 built on parrot 6.6.0 revision 0"  Default for Ubuntu 15.10

[17:36] <[Coke]> m: https://gist.github.com/anonymous/90311d86df5d12b7c3fd

[17:36] <camelia> rakudo-moar 54ce66: OUTPUT«5===SORRY!5=== Error while compiling /tmp/IxBOMrgx62␤Unsupported use of bare "say"; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument, or use &say to refer to the function as a noun␤at /tmp/IxBOMrgx62:24␤------> …»

[17:36] <[Coke]> bzipitidoo: that version is ancient and should not be used.

[17:36] <tadzik> oh gosh :D

[17:37] <[Coke]> please try 2016.02; you'll get the same compiler error I'm seeing, and hopefully better performance.

[17:37] <diakopter> it's basically rewritten since then

[17:37] *** zakharyas1 left
[17:38] <[Coke]> gogole for "rakudobrew" - it's like perl5's perlbrew and will let you more easily get newer versions if your OS isn't keeping up

[17:38] <[Coke]> of note, it's a completely different VM on the backend that is optimized more for Perl 6.

[17:39] * diakopter tries gogole.com

[17:40] * [Coke] grins.

[17:40] <diakopter> oh look it works

[17:40] <[Coke]> ahaha!

[17:40] <[Coke]> that's awesome. GoGoLe++

[17:40] <bzipitidoo> The version I used didn't have a problem with a bare "say".  I just wanted a CR.

[17:40] <bzipitidoo> And yes, an ongoing problem with distros is that they don't keep up.  I was hoping to avoid having to install perl6 myself, leave it to the distro.

[17:41] <diakopter> distros will always be hopelessly behind

[17:41] <kmwallio> I think they also have some variants where if your handplacement is a key to the left or right or something like that (for google)

[17:42] <[Coke]> bzipitidoo: we just had our first "official" release on christmas of last year; anything before that is basically a different language. (though there's a lot of similarity)

[17:42] <diakopter> but yes, someone should try to get debian and ubuntu and mint and a thousand others to pull the latest

[17:43] <[Coke]> diakopter: back in the parrot days, I would have hoped Allison would do that.

[17:43] <[Coke]> not sure if we have someone championing that these days. (macports is probably up to date, mojca++)

[17:44] <mst> bzipitidoo: an ongoing problem is that you're running ubuntu and it's terrible at this

[17:44] <mst> bzipitidoo: the debian-perl team are excellent. then ubuntu takes a snapshot of a random version of their work and doesn't update it after the release ships

[17:44] <ilmari> debian unstable currently has moarvm/nqp/rakudo 2016.02

[17:44] <mst> bzipitidoo: this continues to frustrate me, since I help out the debian-perl team regularly but then ubuntu is still terrible

[17:45] <diakopter> that's the problem with forking something so large, you are forced to snapshot because testing is horrific

[17:46] <timotimo> so, how's the performance of that script with a 90 mb file now with a non-ancient version of rakudo?

[17:46] <ilmari> huh, the debian nqp package depends on angular and bootstrap. is that because of the profiler?

[17:46] <timotimo> um, yeah, but we pull those out of a CDN usually

[17:46] <timotimo> they must have manually patched that

[17:47] <jnthn> o.O

[17:47] <diakopter> (eyeroll)

[17:47] <jnthn> Not worrying about that was the point of pulling them from a CDN :P

[17:47] <ilmari> but then you can't use it offline

[17:47] <timotimo> that's right

[17:47] <kmwallio> how difficult is it to maintain a private ppa thing?

[17:47] <diakopter> because we care about offline people who wouldn't have that in their cache

[17:48] *** geekosaur left
[17:49] <jnthn> ilmari: Yeah...I figured that'd be a relatively rare thing to want to do, given interents are fairly widely distributed these days :)

[17:49] *** Xliff joined
[17:49] <Xliff> mls: 'abc-abc-abc' ~~ / $<string>=( [ $<part>=[abc] ]* % '-' ) /

[17:49] <ilmari> now that it's in testing I guess it could be added to jessie-backports

[17:50] <Xliff> mls: 'abc-abc-abc' ~~ / $<string>=( [ $<part>=[abc] ]* % '-' ) /

[17:50] <ilmari> so people running stable can get a reasonably-uptodate perl6 too

[17:50] <diakopter> jnthn: they might be convinced to split the profiler thingie to an optional other package

[17:50] <Xliff> mls: 'abc-abc-abc' ~~ / $<string>=( [ $<part>=[abc] ]* % '-' ) /

[17:50] *** geekosaur joined
[17:50] <Xliff> Why is "m:" turning into "mls:"

[17:50] <Xliff> Bloody client.

[17:51] <timotimo> it's a smart client you have

[17:51] <ilmari> that's neiter the alphabetically-first or last-speaking nick starting with m

[17:51] <timotimo> let me help yo uthere

[17:51] <timotimo> m: 'abc-abc-abc' ~~ / $<string>=( [ $<part>=[abc] ]* % '-' ) /

[17:51] <camelia> rakudo-moar 54ce66: ( no output )

[17:51] <timotimo> m: say 'abc-abc-abc' ~~ / $<string>=( [ $<part>=[abc] ]* % '-' ) /

[17:51] <camelia> rakudo-moar 54ce66: OUTPUT«｢abc-abc-abc｣␤ string => ｢abc-abc-abc｣␤  part => ｢abc｣␤  part => ｢abc｣␤  part => ｢abc｣␤»

[17:51] <Xliff> m:

[17:52] <jnthn> diakopter: I don't mind if somebody decided to do the work on that tbh...I don't care to maintain it in the nqp repo much though :)

[17:52] <Xliff> Yeah. had to change the nick completion suffix.

[17:52] <Xliff> Wheee!

[17:53] <Xliff> I'm going through regexp examples and that one confused me until I tried it here. Now I grok.

[17:53] <Xliff> This is what I get for going through P6 tutorials before coffee.

[17:54] <diakopter> Xliff: you can also /msg camelia privately (fyi)

[17:54] <perlpilot> Xliff: which tutorial?

[17:54] <Xliff> diakopter, Thanks.

[17:54] <Xliff> http://doc.perl6.org/language/regexes#Named_captures

[17:54] <teatime> m: say @?INC

[17:54] <camelia> rakudo-moar 54ce66: OUTPUT«5===SORRY!5=== Error while compiling /tmp/kfVEX1lbfR␤Variable '@?INC' is not declared␤at /tmp/kfVEX1lbfR:1␤------> 3say 7⏏5@?INC␤»

[17:55] *** shicheng left
[17:55] <teatime> I am having zero luck trying to use perl6 -I and -M

[17:55] <perlpilot> teatime: use lib '/path/to/lib';

[17:56] *** abraxxa left
[17:57] <teatime> ok, that works; is -I just broken curently?

[17:57] <timotimo> i think -I is broken with the repl

[17:57] <teatime> kk

[17:58] <Xliff> I'm trying to get explanation of the keyword TOP when it is used in grammars. I am assuming that's the starting point for a grammar, but using 3 separate pages and they all mention it, but don't describe it.

[17:58] <Xliff> So I am making assumptions which may prove to be silly, later on.

[17:58] <perlpilot> Xliff: yep, that's the default starting rule for a grammar

[17:59] <Xliff> perlpilot, is that used anywhere else?

[17:59] <Xliff> Like.... classes or such?

[17:59] <Xliff> My brain wants to assume it is the new BEGIN.

[17:59] <Xliff> See? Silly.

[17:59] <perlpilot> no, that is silly  :)

[17:59] <Xliff> =)

[17:59] <psch> m: grammar G { }; G.^can('parse')[0].signature.say # that's why we use TOP there

[17:59] <camelia> rakudo-moar 54ce66: OUTPUT«(Grammar $: $target, :$rule = "TOP", :$args = { ... }, Mu :$actions = Mu, *%opt)␤»

[17:59] <perlpilot> BEGIN is the new BEGIN  :)

[17:59] <Xliff> Bad brain!

[18:00] <psch> Xliff: the name is arbitrary, but the parse method takes it as default

[18:00] <psch> where $rule is the rule to start with :)

[18:00] <ilmari> teatime: also, @*INC no longer exists, it's $*REPO.repo-chain

[18:00] *** abaugher left
[18:01] <Xliff> Thanks, pschj

[18:01] <Xliff> psch, even

[18:01] <Xliff> Now if I can only get Ubuntu's rakudo package to properly give me a working panda implementation.

[18:01] <perlpilot> Xliff: you'd best use rakudobrew IMHO

[18:01] <timotimo> um, ubuntu's rakudo package?

[18:02] *** firstdayonthejob joined
[18:02] <timotimo> what version is ubuntu offering you there?

[18:02] <Xliff> Tried, perlpilot.

[18:02] <Xliff> Same issues.

[18:02] <Xliff> Lemme boot the VM, "timo" x 2

[18:02] <timotimo> :)

[18:02] *** abaugher joined
[18:03] * perlpilot bets it's pre-christmas

[18:03] <timotimo> hopefully not

[18:03] *** _nadim joined
[18:03] <Xliff> It's sad. I use VirtualBox, but to get fully working cut and paste, I have to SSH in using PuTTY

[18:04] <Xliff> root@infinity:~# perl6 -v

[18:04] <Xliff> This is Rakudo version 2016.02 built on MoarVM version 2016.02

[18:04] <Xliff> implementing Perl 6.c.

[18:04] <perlpilot> oh, nice

[18:04] * perlpilot puts his cynicism in check for a while

[18:04] <Xliff> Ther problem here is that I need to -I /usr/share/perl/lib

[18:04] <Xliff> Otherwise stuff doesn't work.

[18:05] <timotimo> you could output the $*REPO thingie

[18:05] *** nadim left
[18:05] <timotimo> to see what it thinks is in there

[18:06] <Xliff> m: say "$*REPO.repo-chain"

[18:06] <camelia> rakudo-moar 54ce66: OUTPUT«/home/camelia/.perl6.repo-chain␤»

[18:06] <Xliff> That same command gives error in the VM.

[18:07] <timotimo> you need a () there

[18:07] <timotimo> otherwise it won't call the method in the string for you

[18:08] *** khw left
[18:08] <ilmari> m: say $*REPO.repo-chain

[18:08] <camelia> rakudo-moar 54ce66: OUTPUT«(inst#/home/camelia/.perl6 inst#/home/camelia/rakudo-m-inst-2/share/perl6/site inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor inst#/home/camelia/rakudo-m-inst-2/share/perl6 CompUnit::Repository::AbsolutePath.new(next-repo => CompUnit::Repository::NQ…»

[18:08] <Xliff> root@infinity:~# perl -e 'say $*REPO.repo-chain()'

[18:08] <Xliff> $* is no longer supported at -e line 1.

[18:09] <ilmari> Xliff: perl6, not perl

[18:09] <timotimo> that's perl5 :)

[18:09] <Xliff> DOH!

[18:09] <Xliff> See?

[18:09] <Xliff> COFFEE

[18:09] <timotimo> that also explains why panda doesn't work

[18:09] <[Coke]> or tea, we're not judgy.

[18:09] <RabidGravy> or beer

[18:09] <[Coke]> ok, maybe a LITTLE judgy. :)

[18:10] <bzipitidoo> okay, "This is Rakudo version 2016.02-200-g54ce66e built on MoarVM version 2016.03 implementing Perl 6.c."  Worked on a small file, still chewing on the 90M file.  3 minutes so far.

[18:10] <Xliff> Hmmm... 

[18:11] <Xliff> Any way to get a prettier output when using "say" on an array?

[18:11] <timotimo> you can dd it, or get Data::Dump::Tree from the ecosystem

[18:11] <perlpilot> Xliff: define "prettier"

[18:11] <perlpilot> Xliff: but what timotimo said.  :)

[18:11] <timotimo> bzipitidoo: i wonder if it'd be better to read the file in chunks rather than all-at-once

[18:11] <Xliff> timo x 2: No working panda.

[18:12] <timotimo> well, it'd still be interesting to see what your repo chain looks like

[18:12] <ilmari> I notice a bunch fo the CompUnit::Repository:: classes don't have a .gist

[18:12] <RabidGravy> right, after a day of domestic sysadmining what shall I write or finish next

[18:12] <Xliff> (CompUnit::Repository::Installation.new("/root/.perl6/2016.02"), CompUnit::Repository::Installation.new("/usr/share/perl6/site"), CompUnit::Repository::Installation.new("/usr/share/perl6/vendor"), CompUnit::Repository::Installation.new("/usr/share/perl6"), CompUnit::Repository::AbsolutePath.new(next-repo => CompUnit::Repository::NQP.new(next-repo => CompUnit::Repository::Perl5.new(next-repo => CompUnit::Repository))), Com

[18:12] <Xliff> pUnit::Repository::NQP.new(next-repo => CompUnit::Repository::Perl5.new(next-repo => CompUnit::Repository)), CompUnit::Repository::Perl5.new(next-repo => CompUnit::Repository))

[18:13] <ilmari> only the ones that consume ::Locally do

[18:13] <Xliff> Please note, libs are in /usr/share/perl6/lib

[18:13] <timotimo> OK, so i wonder why panda ends up installed in /usr/share/perl/lib, like, without the 5

[18:13] <timotimo> er, without the 6

[18:14] <bzipitidoo> Maybe.  Is $*IN.getc the same as the old C library function getc, just gets 1 byte, or does it do UTF-8, and return multi byte values?

[18:14] <Xliff> So to run panda, I need to do "perl6 -I /usar/share/perl6/lib panda"

[18:14] <timotimo> it's not supposed to have a "lib" folder there, though

[18:14] <timotimo> isn't it supposed to have an installation file tree?

[18:14] <Xliff> Then it's a packaging fault.

[18:15] <Xliff> s/fault/issue/

[18:15] <timotimo> potentially; i didn't rm -rf my install/ in a long time. i do have a "lib" folder there

[18:15] <timotimo> but it's also not in my repo chain. and it's completely empty

[18:16] <Xliff> I may purge my entire perl6 install and start over to see if that fixes. it.

[18:16] <Xliff> root@infinity:/usr/share/perl6# ls

[18:16] <Xliff> bin  dist  lib  precomp  repo.lock  resources  runtime  short  site  sources  vendor

[18:17] <timotimo> yeah, mine looks like that, too

[18:17] <Xliff> root@infinity:/usr/share/perl6/lib# ls

[18:17] <Xliff> File  JSON  Panda  Panda.pm  Shell

[18:17] <[Coke]> if your perl6 is installed into /usr/share/perl6, it should already know about that lib dir.

[18:17] <timotimo> would a urandom dd be a good candidate to test against your script? also, can i have the newest version of your script, too?

[18:17] <Xliff> So when I go to use Panda, with the proper -I set, when panda goes to compile new modules, it will miss things like Shell::Command

[18:18] <Xliff> Because -I /usr/share/perl6/lib isn't set

[18:18] <[Coke]> Xliff: your install sounds broken - is perl6 in /usr/share/perl6/bin/perl6 ?

[18:18] <Xliff> [Coke], I would generally agree.... but it doesn't.

[18:18] <Xliff> [Coke], No

[18:19] <[Coke]> ... then why is your perl6 lib there?

[18:19] <Xliff> It's installed in /usr/bin/perl6

[18:19] <[Coke]> Custom installation choice?

[18:19] <Xliff> [Coke] because that'

[18:19] <Xliff> that's where the package manager put it.

[18:19] <Xliff> Nope. That was done via straight apt install

[18:20] <[Coke]> ... sounds like they broke it.

[18:20] <Xliff> That's what I'm sayin!!! =)

[18:20] <[Coke]> ok.

[18:20] <[Coke]> so, obv. I'm coming in late here, but I'd use rakudobrew and work out of your home dir for now.

[18:20] <[Coke]> sorry if this was already covered.

[18:21] <Xliff> OK. I have rakudobrew installed.

[18:21] <timotimo> it was suggested. it was also said that that fails in the same/similar way

[18:21] <timotimo> iirc

[18:21] <Xliff> I will nuke existing perl6 packages and start from there.

[18:21] <Xliff> But won't rakudobrew need perl6?

[18:21] <[Coke]> timotimo++

[18:21] <bzipitidoo> Doesn't get much simpler than this:   use v6; while defined $_ = $*IN.getc { print $_; }

[18:21] <perlpilot> rakudobrew installs perl6 itself (that's its job)

[18:22] <timotimo> rakudobrew is implemented in perl5

[18:22] <Xliff> Yeah.

[18:22] <Xliff> Nuke packages and start from there, then.

[18:22] <Xliff> I think I found a page on that, yesterday.

[18:23] <Xliff> Been a while since I've compiled something from scratch (6 months)

[18:23] <[Coke]> We should probably remove "pre-glr" as a target now.

[18:23] <bzipitidoo> So I ran that snippet with this:    time ~/.rakudobrew/bin/perl6 echo.pl < 90Mfile > /dev/null

[18:23] <bzipitidoo> And it is still horribly slow.

[18:23] <perlpilot> bzipitidoo: aye,  IO isn't all that optimized yet

[18:23] <timotimo> the lookup of $*IN must be super expensive there

[18:24] <awwaiid> A tool that I've started to use more is 'tmate' -- it is in apt-get and other package managers and basically lets you create a one-time terminal+ssh session that you can give to someone to debug. Maybe Xliff might be well served pairing with someone in such a fashion

[18:24] * timotimo is building rakudo right now

[18:24] <awwaiid> (it is a shared session, so both parties can contribute)

[18:26] *** abaugher left
[18:27] *** abaugher joined
[18:28] *** domidumont joined
[18:28] <Xliff> Aaaand.... we're off!

[18:28] <Xliff> "rakudobroew build moar"

[18:28] <Xliff> Er: "rakudobrew build moar"

[18:29] <Xliff> F!@#&  coffee... this calls for chai.

[18:30] <perlpilot> tmate is just tmux in disguise?

[18:32] <diakopter> timotimo: maybe you could get rakudobrew into debian/ubuntu as a tool to create a "dev checkout tree" for Perl 6. sneaky.

[18:32] <diakopter> er, *tadzik

[18:32] <timotimo> maybe :)

[18:35] <Xliff> panda now bootstrapping successfully!

[18:36] *** mprelude joined
[18:37] <Xliff> "pandal install Readline" -- a little slow on the uptake there, but it started.

[18:37] <Xliff> Any other module suggestions for a starting perl6 coder?

[18:37] <timotimo> first start is slow, successive starts ought to be faster

[18:37] <Xliff> kk

[18:38] <RabidGravy> though panda does seem relatively slow to start always

[18:38] *** tmch left
[18:38] <RabidGravy> for some reason i haven't been sufficiently motivated to look into

[18:38] <timotimo> could be

[18:39] <timotimo> it already has JSON::Fast, though .. *shrug*

[18:39] <Xliff> 7.6G avail. I hope that's enough for my perl6 experiments. :)

[18:39] <RabidGravy> I build it on a raspberry pi with an SD not bigger than that :)

[18:40] *** spider-mario joined
[18:41] <ilmari> the sum of my ~/.rakudobrew, ~/.perl6, ~/src/{rakudo,moarvm,nqp} is 830MB

[18:43] <Xliff> panda faiiled installing CheckSocket

[18:43] <bzipitidoo> 20 minutes for   "use v6; while defined $_ = $*IN.getc { print $_; }" to read a 90M file and send it to /dev/null.   real	21m12.686s     user	20m49.204s      sys	0m21.160s  Any performance improvements for I/O in the works?  Maybe I should read the file in 4K blocks?

[18:43] <RabidGravy> Xliff, in what way did it fail?

[18:43] <timotimo> i'm running    my int @a; @a[$_]++ for $*IN.slurp-rest(:bin); say @a.join("\n")

[18:44] <timotimo> it's spending a lot of its time increasing and decreasing reference counts in frames and such

[18:44] <Xliff> So far Perl6 is using less than 360 megs.

[18:45] <Xliff> RabidGravy, it failed test 1.

[18:45] <timotimo> i'm at 13 seconds for 4 megabytes

[18:45] <Xliff> Let me pastebin the results.

[18:45] <RabidGravy> yeah, as I'd be waaaay surprised it it failed that

[18:46] <Xliff> http://pastebin.com/t0XUhhPP

[18:48] <ugexe> m: my $foo = [1,2,3]; my $a := $foo.grep(* > 2); my $b := $foo.grep(* < 3); my $c := grep *, $a.Slip, $b.Slip; say $c.perl; # can the assignment to $c be done nicer than using .Slip .Slip?

[18:48] <camelia> rakudo-moar 72ba5a: OUTPUT«(3, 1, 2).Seq␤»

[18:48] *** cpage_ left
[18:49] <ugexe> ==>> seems like it would do what i want (but nyi)

[18:49] <RabidGravy> Xliff, that's odd, is by some weird happenstance 'localhost' not '127.0.0.1' ?

[18:50] <Xliff> For this VM, localhost is ::1

[18:51] <Xliff> However, I don't remember setting this system up for IPv6 so let me adjust hosts file.

[18:51] <Xliff> LOL!

[18:51] <Xliff> That fixed it.

[18:52] <RabidGravy> yeah, the test could be a bit flaky if the 127.0.0.1 isn't the same as localhost

[18:52] <[Coke]> I'd open a ticket on that with the module author.

[18:52] <ab5tract> ugexe: well volunteered? :)

[18:52] <Xliff> [Coke], will do

[18:52] <RabidGravy> [Coke], nah he's a real twat

[18:52] <teatime> umm, I think localhost should not be ::1

[18:53] <[Coke]> teatime: why not, on a ipv6 only system?

[18:53] <Xliff> teatime: That's IPv6 representation of 127.0.0.1 equivalent.

[18:53] <teatime> I know what it is.

[18:54] <RabidGravy> *and* the IO::Socket::INET will quite happily connect to a v6 if the name resolves that way

[18:55] *** _nadim left
[18:55] *** _nadim joined
[18:55] <RabidGravy> the tricky thing is that currently there is no way of knowing *which* it is going to use

[18:55] <teatime> I guess I'd have to lookup if there's any RFCs about it.  It ust struck me weird, I have never had a host configured with a localhost -> ::1 mapping, and definitely not a reverse mapping for it.  but all mine are dual-stack.

[18:56] <teatime> I'll look into it.

[18:56] <RabidGravy> here I have ::1 -> 'localhost6'

[18:57] <teatime> right.

[18:58] <RabidGravy> FreeBSD machine that I logged in has ::1 -> localhost *and* 127.0.0.1 -> 'localhost'

[18:58] <Xliff> That's how mine was configured.

[18:59] <Xliff> Well. Github issue created.

[19:00] <RabidGravy> cheers, but I think [Coke] was joking as I already know ;-)

[19:01] <Xliff> RabidGravy, yes. I figured. I was playing the Straight Guy

[19:01] <Xliff> <RabidGravy> [Coke], nah he's a real twat

[19:01] <teatime> The relevant RFCs are 6761 and 2606... don't seem to forbid it.

[19:01] <Xliff> Kinda clued me in.

[19:02] *** shicheng joined
[19:02] <Xliff> Now I really need that chai.

[19:02] <timotimo> why wouldn't localhost be both ::1 and 127.0.0.1

[19:02] <teatime> timotimo: I guess I can't think of a really good reason.  other than 'things that don't expect this might break'.

[19:03] <Xliff> teatime++

[19:03] <timotimo> i'm willing to call those things "broken" in that regard :)

[19:03] <Xliff> The larger question is "how might things expect this?"

[19:03] *** vendethiel joined
[19:03] *** sortiz joined
[19:05] <teatime> Xliff: when you getaddrinfo() or similar you can choose whether to query for v4, v6, or both addrs.

[19:05] <teatime> s/both/either/

[19:05] <teatime> so I guess any s/w that asks for v6 or either when it can't handle it is broken.

[19:07] <timotimo> m: 'use nqp; my $l = $*IN.slurp-rest(:bin); my int $s = $l.elems; my Mu $result := nqp::list_i(); loop (my int $idx = 0; $idx < $s; $idx++) { my int $val = $l.AT-POS($idx); nqp::bindpos_i($result, $val, nqp::atpos_i($result, $val) + 1) };

[19:07] <camelia> rakudo-moar 72ba5a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/6s4z6PzJ2B␤Unable to parse expression in single quotes; couldn't find final "'" ␤at /tmp/6s4z6PzJ2B:1␤------> 3val, nqp::atpos_i($result, $val) + 1) };7⏏5<EOL>␤    expecting any of:␤        sing…»

[19:07] *** zacts joined
[19:07] <timotimo> m: use nqp; my $l = $*IN.slurp-rest(:bin); my int $s = $l.elems; my Mu $result := nqp::list_i(); loop (my int $idx = 0; $idx < $s; $idx++) { my int $val = $l.AT-POS($idx); nqp::bindpos_i($result, $val, nqp::atpos_i($result, $val) + 1) };

[19:07] <camelia> rakudo-moar 72ba5a: ( no output )

[19:07] <timotimo> ^- this is not really that fast, but a profile reveals that it apparently spends 50% time all-in-all inside AT-POS

[19:07] <RabidGravy> teatime, the IO::Socket::INET quite happily handles either, the problem is that you never know which one you got

[19:07] <teatime> finally, good discussion here:  https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=427067

[19:07] <timotimo> and it also does a bunchton of allocations

[19:08] <[Coke]> I wasn't joking; if the test failed and it shouldn't, ticket++

[19:09] <teatime> [Coke]: I was just interested/curious, I wasn't commenting on whether or not to file a ticket.

[19:10] <RabidGravy> I'm actually tempted to just TODO the test

[19:12] <RabidGravy> 'ang on let me try something

[19:13] <Xliff> teatime: Then I would agree. I thought it might be like that, but I've never looked.

[19:13] <Xliff> I've never used getaddrinfo()

[19:14] <teatime> it's the best/newest lowest-level API for things that use the system resolver.

[19:14] <RabidGravy> I was going to make a module that exposed it at some point

[19:14] *** wamba left
[19:16] <Xliff> Well, off to learn about Junctions.

[19:16] <Xliff> o7

[19:16] * teatime notes that localdomain is not technically reserved.

[19:19] <Xliff> Well, that was fast.

[19:19] <Xliff> I must let my mind percolate over the practical implication of Junctions.

[19:20] *** musiKk_ joined
[19:22] <Xliff> OK... so now that "cmp" is now "leg" ... who is going to make the obvious joke about "chicken" leg "wing"?

[19:22] *** FROGGS joined
[19:26] *** espadrine left
[19:28] *** musiKk_ left
[19:30] <Xliff> Ouch....

[19:30] <Xliff> The changed ternary operator is going to take a bit to get used to.

[19:31] <Xliff> Going from "(a) ? b : c" to "(a) ?? b || c" makes it harder to swap languages between Perl6 and... everything else.

[19:31] <RabidGravy> you'll learn after you've typed it wrong twenty times

[19:31] <psch> m: 1 ?? 2 || 3 # err

[19:31] <camelia> rakudo-moar 72ba5a: OUTPUT«5===SORRY!5=== Error while compiling /tmp/hNxVnId6yA␤Confused: Found ?? but no !!␤at /tmp/hNxVnId6yA:1␤------> 031 ?? 2 || 3 # err7⏏5<EOL>␤»

[19:31] <Xliff> But I can see why that change would be necessary. Especially for the parser.

[19:31] *** labster joined
[19:32] <Xliff> RabidGravy, yeah, but when you are on a project that uses multiple languages at different stages, what used to be natural across all becomes a special case in one.

[19:32] <Xliff> So there's an extra gear shift in your mind that has to become automatic.

[19:33] <psch> switching from perl6 to something else is usually what trips me up... :)

[19:33] <Xliff> So I think... for me.... twenty is optimistic! :)

[19:33] <moritz> Xliff: fwiw Junctions come in handy on occasion, but they aren't something that you want to use as the foundation of your software

[19:33] <psch> "what do you mean java, even a single statement needs a semicolon?" or "what do you mean php, you don't do implicit returns?"

[19:33] <Xliff> moritz: Yes. I can see that. 

[19:33] <masak> what moritz said.

[19:33] <Xliff> BTW --- GOOD WRITEUPS! I'm loving these. 

[19:34] <Xliff> Some small errors but the information comes across. Thank you.

[19:34] <masak> Xliff: btw, it's ?? !!, not ?? ||

[19:34] <[Coke]> I find that nearly every time I've wanted Junctions for something, Perl 6 wanted me to want Sets instead.

[19:34] <Xliff> masak: GAK! You are correct. That makes it even harder!

[19:34] <masak> Xliff: the mistake I always tend to make is to write it as ? ! in other languages :P

[19:35] <Xliff> Because "!!" isn't what you'd consider to be an "alternate" operator.

[19:35] <Xliff> And as far as Junctions go.... I don't think I'll be using them much unless the fancy strikes me.

[19:36] <Xliff> And their use would be fairly conservative.

[19:36] <Xliff> I can't (yet) see my mind flexible enough to identify a problem as "Hey! Junctions would be good here!"

[19:36] <Xliff> At least at first.

[19:36] <psch> non-metal-math bitmasks vOv

[19:37] <Xliff> What?

[19:37] <psch> eh, non-math bitmasks rather

[19:37] <Xliff> Sevendust meets Calculus?

[19:37] <Xliff> Oh. Wait. You said "NON-metal"

[19:37] <psch> as in, ' if $name eq any<Smith Jones> { } '

[19:37] <psch> yeah uhm

[19:37] <Xliff> Sooo less interesting. Even if it was a typo.

[19:37] <psch> and "bitmask" as "how bitmasks are used" even

[19:38] <psch> sooo, a clearly too low information densitiy comment

[19:38] <Xliff> No. I get it. 

[19:38] * [Coke] bitmasaks.

[19:38] *** vendethiel left
[19:38] <Xliff> LOL

[19:38] <psch> 'if $post eq any(@banned)' is probably somewhat realistic :)

[19:39] <Xliff> more like 

[19:39] <psch> *poster

[19:39] <Xliff> 'if $ip eq any(@banned)'

[19:39] <Xliff> Which is an idiom I would have killed for, 10 years ago.

[19:39] <Xliff> Gotta wonder what the performance hit on any() is as compared to looping

[19:40] <timotimo> it can be pretty punishing

[19:40] *** nadim joined
[19:40] <Xliff> Is any() iterative, or is there some branching going on behind the scenes.... (dependent on type, of course)

[19:41] <timotimo> it's short-circuiting

[19:41] <timotimo> i don't know what branching means here

[19:41] *** _nadim left
[19:42] <timotimo> the way autothreading on junctions works is a bit round-about

[19:43] *** nadim left
[19:43] *** nadim joined
[19:44] <Xliff> timotimo: Branching - Taking the elements of x in any(x) and converting it to some form of tree so that the comparison is less than O(N)

[19:44] <Xliff> Particularly for a large x

[19:44] <timotimo> ah. well, any is about much more than just eq

[19:44] <timotimo> and you can't do better than O(n) here

[19:45] <timotimo> you're thinking of sorting :)

[19:45] <Xliff> Yeah

[19:45] <timotimo> you can use a hash instead, that'll get you better complexity

[19:45] <timotimo> a hash or a set

[19:45] <Xliff> Was thinking more hashing.

[19:45] <Xliff> Data::Dump::Tree fails *sigh*

[19:46] <timotimo> :o

[19:46] <timotimo> why?

[19:46] <Xliff> Lemme pastebin

[19:47] *** vendethiel joined
[19:47] <Xliff> http://pastebin.com/455QJid7

[19:47] <Xliff> pastebin implements a really annoying captcha check.

[19:48] <timotimo> huh

[19:48] * Xliff misses the day when Submit actually meant SEND THE THING, DAMMIT!

[19:48] <timotimo> time for --notests

[19:48] <timotimo> :P

[19:48] <timotimo> maybe the tests aren't right at the moment

[19:48] <Xliff> Possible. I do understand this is bleeding edge, here.

[19:48] <timotimo> it looks like the format of DDT may have changed since the tests were last touched, who knows

[19:49] <Xliff> I miss the .cpan days when I could find the build trees and do manual checks.

[19:50] *** hankache joined
[19:50] <timotimo> what, like "panda look"?

[19:50] <timotimo> or modules.perl6.org/repo/Data::Dump::Tree :)

[19:52] <Xliff> Oooh! And it even puts me in the right CWD

[19:52] <hankache> hello #perl6

[19:52] <timotimo> greetings hankache :)

[19:52] <Xliff> "panda look Data::Dump::Tree"

[19:52] <timotimo> i know :)

[19:52] <hankache> hiya timotimo

[19:52] <timotimo> it starts a subshell, too, so when you exit out, you're back to where you were

[19:53] <Xliff> People should TELL ME these things before I go and put my virtual foot in my virtual piehole.

[19:55] *** darutoko left
[19:56] <Xliff> Is there a way to get an interactive p6 shell?

[19:57] <timotimo> "perl6"

[19:57] <Xliff> Tried that. thought it was just looking for a program 

[19:58] *** shicheng left
[19:58] <timotimo> currently it greets you with:

[19:58] *** kent\n left
[19:58] *** rindolf left
[19:58] *** ribasushi left
[19:58] <timotimo> To exit type 'exit' or '^D'

[19:58] *** kentnl joined
[19:58] *** kentnl left
[19:58] *** kentnl joined
[19:58] <timotimo> > 

[19:58] <Xliff> Yeah. I don't get any response when I do that. Even ^D doesn't work

[19:58] <timotimo> that sounds like you're supposed to type ^D literally

[19:58] <timotimo> both of those work for me

[19:58] *** cgfbee left
[19:58] *** zostay left
[19:58] *** raydiak_ left
[19:58] *** hcit left
[19:59] <timotimo> though perhaps it was just taking some time to pre-compile Linenoise or Readline for you

[19:59] <Xliff> Trying again with a "sleep 60" sent to my brain.

[20:00] <Xliff> Nope. Still nothing.

[20:00] *** hcit joined
[20:00] *** zostay joined
[20:00] <timotimo> it doesn't even give you a "> "?

[20:01] <Xliff> Nope. That's what I would expect to see.

[20:01] <timotimo> you did say you were using "rakudobrew build moar"?

[20:01] <timotimo> oh

[20:01] <timotimo> i know what's wrong

[20:01] <Xliff> Yes

[20:01] <Xliff> O?

[20:01] <timotimo> when you're inside "panda look", panda is holding the compunitrepo's lock

[20:01] <timotimo> that prevents the lookup/load of Linenoise and/or Readline

[20:01] <Xliff> Ouch.

[20:01] <timotimo> so your child is waiting for its parents parent to exit

[20:02] <Xliff> And there it goes.

[20:02] <hoelzro> timotimo: is that a bug with panda? or just an LTA behavior with CUR that's there for now?

[20:02] *** cdg joined
[20:02] <timotimo> not exactly sure. i expect we can make panda not do that

[20:03] <Xliff> I guess we'll go with the browser method, then.

[20:04] *** Upasaka left
[20:04] <Xliff> And --notests

[20:07] *** ribasushi joined
[20:09] <timotimo> i'm opening an issue about the tests

[20:11] *** raydiak_ joined
[20:12] <Xliff> Yeah. Looks like the Match internals changed􏿽x85

[20:12] *** synopsebot6 left
[20:12] *** itaipu joined
[20:12] *** synopsebot6 joined
[20:12] <timotimo> the internals ouf our match objects are unlikely to change or have changed

[20:13] <Xliff> Well, at least what DDT is reporting.

[20:13] *** Upasaka joined
[20:14] *** musiKk_ joined
[20:14] <timotimo> it's possible that the way ddt dumps match objects changed, but the tests weren't updated yet

[20:15] *** shicheng joined
[20:16] <dalek> ecosystem: 87ce5ce | RabidGravy++ | META.list:

[20:16] <dalek> ecosystem: change CheckSocket to META6.json

[20:16] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/87ce5ce249

[20:17] * RabidGravy puts back his /etc/hosts how it was before

[20:17] <Xliff> timotimo: Yes. You said that before, and I think you're right.

[20:17] *** cgfbee joined
[20:17] <timotimo> it's just that when you said "the match internals", it sounded like you meant the match object itself. as in, the one perl6 supplies

[20:18] <Xliff> What I said wasn't what I meant. Sorry.

[20:18] <timotimo> no worries :)

[20:19] <Xliff> timotimo: http://pastebin.com/V38BddUH

[20:20] <Xliff> Note lines 20-23 and 34 thru 37

[20:20] <timotimo> sorry, i've gotta run now

[20:20] <Xliff> OK. 

[20:22] <psch> RabidGravy: i was thinking of turning Audio::PortMIDI::DrumTab into a module

[20:22] <psch> RabidGravy: and then i wrote a test and decided i don't want to write more tests

[20:23] <RabidGravy> :)

[20:24] <psch> also the format is pretty "typically musicians", with all those non-standardized everythings /o\

[20:25] <RabidGravy> yeah, it's emtirely possible that the oxX actually mean something different to drummers but they don't to me :-O

[20:25] <psch> https://en.wikipedia.org/wiki/Drum_tablature 

[20:25] <psch> well, it fits with that

[20:26] <psch> ...almost

[20:26] <RabidGravy> oh I see

[20:26] <psch> well, what your amen notation doesn't do is the ghost notes

[20:26] <psch> the citation reveals a bit more of the madness :l

[20:26] <Xliff> Ooh! Amen break?

[20:26] <Xliff> Where?

[20:27] <RabidGravy> Xliff, it's one of the examples in Audio::PortMIDI

[20:27] <psch> Xliff: https://github.com/jonathanstowe/Audio-PortMIDI/blob/master/examples/amen

[20:28] <hankache> what editors do you use to write Perl 6 code?

[20:28] <Xliff> Thanks.

[20:28] <perlpilot> vi

[20:28] <perlpilot> (vim really these days)

[20:28] <Xliff> Damn. I can almost read this... Is that a sign of impending dementia?

[20:29] <Xliff> hankache, If you are running Windows, you can't go wrong with Sublime Text 3

[20:29] *** shicheng left
[20:29] <hankache> well i use Atom but lately i broke it

[20:29] <hankache> maybe it's a sign ;)

[20:30] *** domidumont left
[20:30] <RabidGravy> last time I used a "real" vi I actually got quite annoyed with it

[20:30] <RabidGravy> weakened by years of vim

[20:30] <Hotkeys> Last time I used real vi it was in the tty when I was configuring arch

[20:30] <Hotkeys> It was not fun

[20:31] <RabidGravy> no it was probably vim

[20:31] <Hotkeys> Maybe

[20:31] <Hotkeys> Either way it didn't play nice with the tty

[20:32] <Hotkeys> I say tty

[20:32] <RabidGravy> the only place you see the real vi is things with some SysV heritage like Solaris

[20:32] <Hotkeys> I'm probably using that wrong too

[20:32] <Hotkeys> I mean the console bit when you aren't running x

[20:33] <RabidGravy> yeah, you see unless you've really used a teletype you haven't really lived

[20:33] <Hotkeys> Haha

[20:34] <Xliff> RabidGravy, I see what you mean by the "x" and the "X". I can't tell the difference in that example.

[20:34] <Xliff> Used this for comparison.

[20:34] <Xliff> https://www.youtube.com/watch?v=qwQLk7NcpO4&ab_channel=malminho

[20:34] <Hotkeys> It was so annoying to use that I ended up using nano for initial setup of arch

[20:34] <Hotkeys> Yes nano

[20:34] <Xliff> I'd need to grab a drum sequencer and program it to really see.

[20:35] <Xliff> "teletype" -- you mean those weird things that look like tube TVs that spewed green shit out at you?

[20:35] <Xliff> Been there. Done that.

[20:36] <RabidGravy> well actually I meant the things like big typewriters with rolls of papart

[20:36] <RabidGravy> er paper

[20:37] <Hotkeys> Xliff: that's a terminal I believe 

[20:37] <teatime> Hotkeys: think you have it backwards

[20:37] <teatime> a teletype == a typewriter connected to a serial, phone, etc. line

[20:38] <Xliff> Oh god! I was arong.

[20:38] <Xliff> s/arong/wrong/

[20:38] <Hotkeys> And a terminal is a clienty computer that spews green stuff at you no?

[20:38] <RabidGravy> mind I haven't used a dumb terminal for ages either

[20:38] <Xliff> http://c3.staticflickr.com/3/2142/1678948976_14529e3278_b.jpg

[20:38] <Hotkeys> Right a dumb terminal

[20:38] <Hotkeys> I was not backward teatime

[20:38] <Xliff> Seen one of these, but haven't been crazy enough to use them.

[20:39] <RabidGravy> used to quite like the keys on the Wyse terminals back in the day

[20:39] <Hotkeys> I'm the king of making typos

[20:39] <RabidGravy> and of course the lovely IBM 5251, best keyboard EVAH!

[20:39] <Hotkeys> I can't imagine that'd be fun

[20:39] <Hotkeys> On a tty

[20:39] <Xliff> Hotkeys: I will give you a run for your money,.

[20:39] <Xliff> See? Fat fingers. ",." instead of "."

[20:40] *** sno left
[20:40] <Xliff> I want a claky keyboard that is so heavy it could be considered a deadly weapon.

[20:40] <RabidGravy> yeah the old IBM ones

[20:41] <Xliff> SOLID keys. Not this chicklet stuff that we are currently dealing with.... (I'm looking at YOU, Apple!)

[20:41] <RabidGravy> even the ones you got with PC XTs were better than modern ones

[20:41] <Xliff> I loved the XT keyboards.

[20:43] <[Coke]> (clacky keyboard) see obra's kickstarter. (which is long kicked)

[20:43] <RabidGravy> yeah they looked nice

[20:43] *** MadcapMobile left
[20:46] <RabidGravy> psch, another thing that could be done with drum tab parser is turning them into Hydrogen patterns

[20:46] <RabidGravy> gwan!

[20:47] <Hotkeys> Mechanical keyboards or bust

[20:48] <[Coke]> I remember the worst keyboard of all time, the Atari 400. (it's at least in the top 10)

[20:48] *** shicheng joined
[20:48] *** rindolf joined
[20:48] *** Hotkeys is now known as SrKeys

[20:49] <SrKeys> I am señor keys now

[20:49] <SrKeys> Fyi

[20:49] <SrKeys> I forgot that I'm in like 1,000,000 channels on freenode and this nick change is relevant to only one

[20:51] <psch> RabidGravy: uh, probably?  i have literally no experience with hydrogen :)

[20:54] <Xliff> RabidGravy, since you suggested it, maybe you want to write the patch?! =)

[20:54] <RabidGravy> which patch?

[20:55] <Xliff> The one where you convert drum tab notation into hydrogen patterns.

[20:55] *** cpage_ joined
[20:55] <Xliff> psch, unfortunately you have quite the experience with hydrogen. We all do. It's literally -everywhere-

[20:55] <SrKeys>  Drum you say?

[20:56] <SrKeys> http://www.catb.org/jargon/html/story-of-mel.html

[20:56] <RabidGravy> Oh it would just rip the guts out of the amen example and use Audio::Hydrgogen to build the pattern

[20:56] <SrKeys> I'm h

[20:56] <SrKeys> Oh

[20:56] <SrKeys> Different kind of drum

[20:56] <SrKeys> I'm dumb

[20:56] * Xliff suddenly realizes that RabidGravy is talking about the drum software, not the element.

[20:56] <SrKeys> Good story anyway

[20:56] <Xliff> D'oh!

[20:57] <Xliff> http://www.hydrogen-music.org/hcms/

[20:57] <Xliff> I am downloading it now.,

[20:57] <RabidGravy> yeah, it's quite good

[20:58] *** hankache left
[20:58] <RabidGravy> that's why I wrote https://github.com/jonathanstowe/Audio-Hydrogen

[20:58] <RabidGravy> :)

[20:58] <Xliff> LOL

[20:59] <[Coke]> all this talk about music reminds me that I haven't seen colomon in a while.

[20:59] <[Coke]> .seen colomon     #in a while

[20:59] <yoleaux> I haven't seen colomon     #in a while around.

[20:59] <[Coke]> .seen colomon

[20:59] <yoleaux> I saw colomon 15 Mar 2016 20:02Z in #perl6: * colomon is afraid something is broken in Rat literals in rakudo.

[20:59] <colomon>  o/

[20:59] <Xliff> LOL

[20:59] <Xliff> Speak of the devil

[21:00] <[Coke]> \o

[21:00] * colomon is still afraid something is broken in Rat literals

[21:01] <[Coke]> do you have a test?

[21:01] <RabidGravy> who was it that was talking about making a fluidsynth module?

[21:01] <[Coke]> I saw a note or ticket about very large rat literals that ended up comparing identical when they weren't.

[21:02] *** sno joined
[21:02] <colomon> [Coke]: let me see if I can dig up what I was playing with (that wasn’t it, but might have been related)

[21:02] <[Coke]> but I haven't seen any spectest failures regarding it.

[21:04] <colomon> m: say “98989898889898989898090909093983830​2233848473393040383234234509484.3489​523478234723847238432423”.Rat.nude

[21:04] <camelia> rakudo-moar 72ba5a: OUTPUT«Cannot convert string to number: trailing characters after number in '0398989898889898989898090909093983830⏏5​2233848473393040383234234509484.3489​523478234723847238432423' (indicated by ⏏)␤  in block <unit> at /tmp/Y9UCYfzYm8 line 1␤␤Actu…»

[21:05] <colomon> m: say “98989898889898989898090909093983830​2233848473393040383234234509484.3489​23478234723847238432423”.Rat.nude

[21:05] <camelia> rakudo-moar 72ba5a: OUTPUT«Cannot convert string to number: trailing characters after number in '0398989898889898989898090909093983830⏏5​2233848473393040383234234509484.3489​23478234723847238432423' (indicated by ⏏)␤  in block <unit> at /tmp/rncNFIe9DN line 1␤␤Actua…»

[21:05] <colomon> m: say “98989898889898989898090909093983830​2233848473393040383234234509484.3489​523478234723847238432423”.Rat.nude

[21:05] <camelia> rakudo-moar 72ba5a: OUTPUT«Cannot convert string to number: trailing characters after number in '0398989898889898989898090909093983830⏏5​2233848473393040383234234509484.3489​523478234723847238432423' (indicated by ⏏)␤  in block <unit> at /tmp/QcSzybOpny line 1␤␤Actu…»

[21:05] <colomon> argh

[21:06] <colomon> m: say “989898988898989898980909090939838302233848473393040383234234509484.3489523478234723847238432423”.Rat.nude

[21:06] <camelia> rakudo-moar 72ba5a: OUTPUT«(9898989888989898989809090909398383022338484733930403832342345094843489523478234723847238432423 10000000000000000000000000000)␤»

[21:06] *** kurahaupo joined
[21:06] <colomon> m: say (989898988898989898980909090939838302233848473393040383234234509484.3489523478234723847238432423).Rat.nude;

[21:06] <camelia> rakudo-moar 72ba5a: OUTPUT«(9898989888989898989809090909398383022338484733930403832342345094843489523478234723847238432423 9999999999999999583119736832)␤»

[21:07] <colomon> notice those are exactly the same number converted to a Rat two different ways, with two different results.

[21:11] *** yqt joined
[21:11] <SrKeys> colomon: might have to do with the epsilon

[21:12] <[Coke]> ISTR there's a slightly differnent path for strings and not strings.

[21:12] <Xliff> Subtracting the second from the first gives 0

[21:13] <[Coke]> but even if the path was different, the final answer should be the same. wondering if something is hitting a Numeric in there at some point.

[21:13] <colomon> hitting a Num

[21:13] <colomon> that’s my guess too

[21:13] *** FROGGS left
[21:13] <[Coke]> which could be if one path is careful and the other ain't.

[21:14] <colomon> Xliff: note they clearly are not equal

[21:14] <[Coke]> m: say <12345.6789>.perl; say (12345.6789).perl;

[21:14] <camelia> rakudo-moar 72ba5a: OUTPUT«RatStr.new(12345.6789, "12345.6789")␤12345.6789␤»

[21:15] <[Coke]> pretty sure that's been there since Christmas, then.

[21:15] <colomon> Xliff: but I would expect subtracting one from the other to spill over into floating point

[21:17] *** TEttinger joined
[21:17] <colomon> [Coke]: may have been there quite some time, it would be hard to notice.

[21:23] *** trnh joined
[21:26] <Xliff> colomon: I was hoping it would hit FP, too. Since its reporting 0, doesn't that indicate the difference is smaller than epsilon?

[21:27] <colomon> Xliff: I’m not sure what you mean by epsilon?

[21:27] <Xliff> The smallest FP number representable.

[21:29] <colomon> oh, no, this shouldn’t be anywhere near that.

[21:29] <Xliff> *shrug*

[21:29] <Xliff> Just a thought.

[21:29] <colomon> but it’s drastically more digits of precision that our floating point has

[21:29] <Xliff> RabidGravy, got a hydrogen question for you if you have the spare bandwidth. /j #hydrogen

[21:29] <RabidGravy> sure

[21:30] <Xliff> RabidGravy, #hydrogen is open. I'm already there.

[21:31] <RabidGravy> eh?

[21:31] <RabidGravy> Oh I see

[21:31] <Xliff> :)

[21:34] <colomon> m: say “989898988898989898980909090939838302233848473393040383234234509484.3489523478234723847238432423”.Rat - (989898988898989898980909090939838302233848473393040383234234509484.3489523478234723847238432423).Rat;

[21:34] <camelia> rakudo-moar 72ba5a: OUTPUT«-4.12669351001948e+49␤»

[21:35] <colomon> Am I doing something stupid here?  that’s what I get when I subtract one from the other, not zero.

[21:36] * colomon poinders making “Am I doing something stupid here?” his motto

[21:37] <geekosaur> m: “989898988898989898980909090939838302233848473393040383234234509484.3489523478234723847238432423”.Rat.perl.say

[21:37] <camelia> rakudo-moar 72ba5a: OUTPUT«989898988898989898980909090939838302233848473393040383234234509484.348952347823472397436717074015177786350250244140625␤»

[21:37] <geekosaur> something looks slightly wrong there...

[21:38] <colomon> indeed

[21:38] <geekosaur> oh, hm

[21:39] * geekosaur wonders if the Str->Rat coercion is limited to actual Rat vs. FatRat

[21:39] <moritz> the literal probably degrades right into Num

[21:40] <colomon> moritz: then why doesn’t the Str->Rat version do so?

[21:41] <geekosaur> oh, I see.

[21:42] <geekosaur> because you're directly converting the Str instead of letting perl6 decide to store the numeric literal in a Num initially and then converting that?

[21:42] <colomon> hmm…

[21:42] <colomon> m: “989898988898989898980909090939838302233848473393040383234234509484.3489523478234723847238432423”.Rat.WHAT

[21:42] <camelia> rakudo-moar 72ba5a: ( no output )

[21:42] <colomon> m: say “989898988898989898980909090939838302233848473393040383234234509484.3489523478234723847238432423”.Rat.WHATa

[21:42] <camelia> rakudo-moar 72ba5a: OUTPUT«Method 'WHATa' not found for invocant of class 'Rat'␤  in block <unit> at /tmp/uuj4EIVcZC line 1␤␤»

[21:42] <colomon> m: say “989898988898989898980909090939838302233848473393040383234234509484.3489523478234723847238432423”.Rat.WHAT

[21:42] <camelia> rakudo-moar 72ba5a: OUTPUT«(Rat)␤»

[21:42] *** itaipu left
[21:45] *** itaipu joined
[21:46] *** pdcawley left
[21:47] <Xliff> m: (989898988898989898980909090939838302233848473393040383234234509484.3489523478234723847238432423).WHAT

[21:47] <camelia> rakudo-moar 72ba5a: ( no output )

[21:47] *** wamba joined
[21:47] <Xliff> m: say (989898988898989898980909090939838302233848473393040383234234509484.3489523478234723847238432423).WHAT

[21:47] <camelia> rakudo-moar 72ba5a: OUTPUT«(Rat)␤»

[21:47] *** pdcawley joined
[21:48] <Xliff> Interesting that you got an answer to the subtraction, but that might be coz my VM is 32 bit.

[21:49] <Xliff> Oh, no. I got zero because both terms used ".Rat.nude" instead of ".Rat"

[21:50] <lucs> Um, a FakeDir appeared in my $HOME (not sure quite when); can I just delete it?

[21:58] *** pdcawley left
[22:05] *** Ven left
[22:07] *** pdcawley joined
[22:10] *** ribasushi left
[22:15] *** kid51 joined
[22:16] *** ribasushi joined
[22:19] <RabidGravy> lucs, yeah, it's p6doc doing that I think

[22:20] <lucs> Okay, thanks.

[22:21] <lucs> (It might consider doing it in /tmp or something, just saying.)

[22:22] *** daxim left
[22:26] *** Sgeo__ joined
[22:37] *** maybekoo2 left
[22:44] *** jack_rabbit joined
[22:49] *** vendethiel left
[22:49] *** rindolf left
[22:49] *** AlexDaniel joined
[22:50] *** musiKk_ left
[22:51] *** kurahaupo_ joined
[22:51] *** kurahaupo left
[22:58] *** _nadim joined
[22:59] *** nadim left
[22:59] <RabidGravy> right that's me done for the day

[22:59] <RabidGravy> toodles

[23:00] <timotimo> toddlers, RabidGravy 

[23:02] <SrKeys> I

[23:02] <SrKeys> I want to leave you all with this disgusting lump of mess

[23:02] <SrKeys> m: my @nonsense = [-8, 3], [4,-2], [4,1], [-73, 6]; (map {$_+99}, flat [Z] deepmap {$_+6}, ({flat @^a Z @^b} for (-> *@_ { (@_[0], |deepmap({$_*4}, @_[1,2]), @_[3]).Array }(|@nonsense))))».chr.join.say

[23:02] <camelia> rakudo-moar 72ba5a: OUTPUT«ayy lmao␤»

[23:03] <timotimo> ".chrs" is neater than ">>.chr.join"

[23:04] *** RabidGravy left
[23:04] <SrKeys> timotimo: that's no fun

[23:04] <SrKeys> this isn't about clean

[23:05] <timotimo> OK :)

[23:05] <SrKeys> :p

[23:08] <tadzik> hahah

[23:09] <timotimo> heyo tadzik 

[23:09] <timotimo> how are you on this wonderful day?

[23:09] <tadzik> quite alright!

[23:09] <tadzik> m: my @a = "hip" xx 2; say ~(@a, @a.WHAT.perl), "!"

[23:09] <camelia> rakudo-moar 72ba5a: OUTPUT«hip hip Array!␤»

[23:10] <timotimo> heh.

[23:10] <timotimo> i think the cat wants to be played with

[23:10] <tadzik> I planned to go to bed early, and did, like 3 hours ago. I woke up recently and feel rested -_-

[23:10] <timotimo> oh, huh

[23:10] *** Woodi left
[23:10] <timotimo> i hope that feeling lasts you a good long while :)

[23:11] *** Woodi joined
[23:11] <tadzik> I wish :P

[23:12] *** kid511 joined
[23:13] *** kid51 left
[23:14] *** trnh left
[23:22] *** bzipitidoo left
[23:25] *** bjz_ joined
[23:26] *** itaipu left
[23:28] *** bjz left
[23:28] *** kentnl left
[23:32] *** vendethiel joined
[23:36] *** nowan left
[23:36] *** nowan joined
[23:37] *** kent\n joined
[23:41] *** z8 joined
[23:45] * timotimo played the cat a bit

[23:49] *** daxim joined
[23:53] *** kentnl joined
[23:53] *** kentnl left
[23:53] *** kentnl joined
[23:53] *** kent\n left
[23:53] *** vendethiel left
[23:55] *** Ben_Goldberg joined
[23:56] *** _nadim left
