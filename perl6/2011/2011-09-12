[00:01] <sorear> mberends: when you say "sometimes crashes" how badly do you mean?

[00:02] <mberends> sorear: application level errors are not caught, such as division by zero

[00:03] <sorear> I see

[00:03] <mberends> also keystroke events still need to be caught. I've not found docs about how to read the $args parameter in an event handler.

[00:03] <sorear> I got it to fail by trying to parse "Infinity2"

[00:05] *** patspam joined
[00:06] <mberends> I'm quite pleased that it's getting the right callbacks anyway. I'm kinda hoping @other will play with it and come up with much better little GUI apps. A text editor would be quite feasible.

[00:06] <sorear> mberends: what is $args.GetType?

[00:06] <mberends> sorear: I don't know

[00:06] <sorear> I guess $args is a reference to some event structure

[00:06] *** patspam left
[00:08] <sorear> perhaps play with some code like

[00:08] <sorear> niecza> my $r = CLR::System::Random.new; my $ma = $r.GetType.GetMethods; for ^$ma.Length { say $ma.Get($_) }

[00:10] <sorear> there's something slightly ironic here, since the introspection for native Perl 6 objects is so much weaker than that :)

[00:10] *** bbkr left
[00:10] *** bbkr joined
[00:10] <mberends> sorear: that looks like "shotgun programming", not far removed from the original Monkey Typing.

[00:10] * sorear has pondered making CLR arrays somehow look like Perl 6 iterables

[00:11] *** patspam joined
[00:11] *** risou is now known as risou_awy

[00:15] <mberends> sorear: I'll continue searching tomorrow.  All the docs found so far are too simple.  It's time for sleep.

[00:16] <sorear> mberends: can you point me to said docs?

[00:16] <sorear> 'night

[00:17] *** whiteknight left
[00:17] <mberends> sorear: only the same mono pages you also linked, and various DuckDuckGo hits...

[00:17] <mberends> 'night

[00:26] *** packetknife joined
[00:27] *** wamba left
[00:27] *** clairvy_ left
[00:42] *** packetknife left
[01:03] *** replore joined
[01:16] *** patspam left
[01:41] *** HarryS left
[02:18] *** patspam joined
[02:29] *** JimmyZ joined
[02:48] *** daniel-s joined
[02:49] *** HarryS joined
[02:50] *** molaf joined
[03:01] *** wolfman2000 joined
[03:03] *** packetknife joined
[03:09] *** aloha left
[03:22] *** JimmyZ left
[03:24] *** packetknife left
[03:28] <tadzik> 'morning

[03:28] *** soh_cah_toa_ left
[03:35] <sorear> hello tadzik

[03:51] *** birdwindupbird joined
[03:57] *** aloha joined
[03:59] *** kaare_ joined
[03:59] *** aloha left
[04:00] *** aloha joined
[04:02] *** uasi joined
[04:15] *** kaare_ left
[04:17] *** packetknife joined
[04:18] *** skangas joined
[04:19] *** molaf left
[04:36] *** satyavvd joined
[04:39] *** skangas left
[04:40] <moritz> good morning

[04:42] <tadzik> good morning moritz 

[04:45] *** bluescreen10 left
[04:52] *** mikemol left
[04:59] *** frhodes joined
[05:01] *** frhodes_ joined
[05:04] *** simcop2387 left
[05:05] *** REPLeffect left
[05:06] *** simcop2387 joined
[05:07] *** uasi left
[05:09] *** plobsing left
[05:10] *** plobsing joined
[05:10] *** envi joined
[05:13] *** wamba joined
[05:17] *** REPLeffect joined
[05:21] *** packetknife left
[05:30] *** itz_ left
[05:31] *** itz_ joined
[05:32] *** frhodes left
[05:39] *** orafu left
[05:39] *** skangas joined
[05:40] *** ranguard left
[05:40] *** orafu joined
[05:42] *** ranguard joined
[05:45] <sorear> moritz: good morning!

[05:48] *** _jaldhar joined
[05:48] *** jaldhar left
[05:52] *** uasi joined
[05:53] *** uasi left
[05:59] *** wtw joined
[06:05] *** orafu left
[06:05] *** orafu joined
[06:06] *** REPLeffect left
[06:06] *** wamba left
[06:08] *** masak joined
[06:08] <masak> 哥们们，你的问候。

[06:11] *** alvis left
[06:11] *** SHODAN joined
[06:18] *** frhodes joined
[06:18] *** frhodes_ left
[06:19] *** REPLeffect joined
[06:26] *** alvis joined
[06:27] <jlaire> masak: fyi, "no" is "ei" in Finnish, but it's inflected so that "I don't" is "en"

[06:27] <jlaire> why im2ee or anyone would want to learn this language, I don't know...

[06:34] *** koban` joined
[06:34] *** koban` left
[06:42] <masak> jlaire: ah. kiitos. :)

[06:44] *** uasi joined
[06:46] <jlaire> heh :)

[06:49] *** uasi left
[06:57] <pnu> whoah.. Huomenta Suomi! :-)

[07:04] <jlaire> haha, huomenta huomenta

[07:09] *** pernatiy left
[07:14] <masak> Eilen oli puolalainen teema. Nykyään ilmeisesti on suomalainen teema. :)

[07:15] <mberends> goedemasak #perl6

[07:15] <jlaire> masak: erinomaista!

[07:18] <jlaire> montakohan suomalaista tääl on lurkkimassa

[07:19] <pnu> Puolalaisia on melkein kahdeksan kertaa enemmän kuin Suomalaisia.ihmisiä kuin Suomessa.

[07:21] <masak> goedemoritz mberends

[07:23] <mberends> :-)

[07:25] <pnu> actually it would be nice to see a geographic mapping of users' ip locations found in this channel.

[07:25] *** uasi joined
[07:31] <moritz> I don't think the IRC servers tell us your IP

[07:34] <pnu> moritz: Germany Bayern Nuernberg Herr Florian Forster ?

[07:34] <moritz> pnu: the first two are correct :-)

[07:34] <moritz> pnu: the latter come from the assumption that IP == identity

[07:34] *** wamba joined
[07:35] *** uasi left
[07:35] <moritz> pnu: how did you get that information?

[07:35] * moritz is pretty much still an IRC noob

[07:35] <pnu> moritz: dig + iplocation.net - which was just the first one i googled

[07:36] <moritz> pnu: and how did you get the IP?

[07:36] <pnu> oh, and ofcourse with WHOIS.. "/whois moritz"

[07:36] * moritz dumb

[07:36] <moritz> I just did a /whois, but got a domain name instead of an IP back

[07:37] <moritz> and thought "how do I get the IP?" :-)

[07:37] <mberends> moritz: IRC join messages contain some kind of host name or IP address (you have yours turned off)

[07:37] <moritz> mberends: am I not displayed as moritz [moritz@faui2k3.org] or so?

[07:37] <mberends> yes

[07:38] <moritz> faui2k3.org is the host name :-)

[07:38] <mberends> it is probably derived from reverse DNS, going by the IP addresses shown with many DHCP configured clients

[07:39] <moritz> faui2k3.org is one of the names of the host which holds my screen+irssi session

[07:40] <mberends> last examples, * wamba (~wamba@158.194.149.143) has joined #perl6, * uasi (~uasi@131.183.244.43.ap.yournet.ne.jp) has joined #perl6

[07:40] <pnu> moriz: Herr Florian is the registrant of that domain, and it seems to be operated by noris.net AG at Thomas-Mann-Str.

[07:41] <mberends> yes, it's where your irssi appears to connect from (modulo client NAT)

[07:42] <snarkyboojum> I use an IRC bouncer, so it looks like I live in Ohio :)

[07:43] <moritz> masak: did you know about http://www.nature.com/nature/journal/v436/n7052/full/436776a.html and http://www.nature.com/nature/journal/v437/n7057/full/437318d.html ? :-)

[07:43] <pnu> snarkyboojum: but you use an norwegian irc server..? hmm.. :)

[07:44] <snarkyboojum> pnu: ke?

[07:45] <snarkyboojum> pnu: I like lag it seems :)

[07:46] <moritz> isn't the server just determined by DNS roundrobin?

[07:46] <pnu> snarkyboojum: ah.. nevermind. i was just wondering if you're located in oslo but that's a long shot.. -> what moritz just said.

[07:46] <snarkyboojum> pnu: yeah - nowhere near there

[07:47] <pnu> anyway, for most cases, the client address is close enought (for interesting mapping). :-)

[07:47] <pnu> could i be more off topic? :)

[07:47] <masak> moritz: no! cool!

[07:48] <moritz> pnu: in the widest sense it's about the Perl 6 community :-)

[07:48] <moritz> pnu: now write a Perl 6 based IRC bot which looks up all the IPs and draws a map

[07:48] <moritz> :-)

[07:48] <mberends> webchat users are the largest group whose real locations are unknown

[07:51] *** mux left
[07:51] *** mux joined
[07:51] <moritz> you can shell out for the geoip lookup:  host -t TXT 193.99.144.80.lookup.geo.opera.com

[07:53] <pnu> moritz: hmm.. true. :) it's the perl6 geodiversity we're exploring here.

[07:54] <masak> jnthn is probably the most geodiverse among us.

[07:57] <moritz> nom: say any(1, 2).WHAT

[07:57] <p6eval> nom 90a619: OUTPUT«Junction()␤»

[07:58] *** wamba left
[07:58] *** wamba joined
[08:19] *** bbkr left
[08:19] <jnthn> morning, #perl6

[08:19] <jnthn> ...huh, is masak saying I'm fat?

[08:19] <jnthn> :P

[08:20] *** uasi joined
[08:20] <moritz> jnthn: no, just spread out

[08:20] <jnthn> :P

[08:20] <moritz> .oO( unfocused )

[08:20] <mberends> good mortiz jnthn

[08:22] <jnthn> o/ mberends 

[08:25] <masak> jnthn: from now on, I'll take any compliment I get and shoot back "huh, are you saying I'm fat?" :P

[08:26] <jlaire> this kinda reminds me of http://xkcd.com/559/

[08:26] <jlaire> except the other way :P

[08:27] <jnthn> Urgh. I actually haz to do some work...

[08:27] * jnthn slurps the coffee and digs in to it

[08:29] *** wamba left
[08:30] *** M_o_C joined
[08:30] *** Woodi left
[08:30] *** Woodi joined
[08:31] * moritz imagines jnthn digging into the coffee

[08:31] *** wamba joined
[08:33] * masak imagines him digging in to it :)

[08:33] <masak> maybe the coffee is under a pile of $work

[08:34] *** dakkar joined
[08:34] *** daxim joined
[08:48] <moritz> ./perl6 t/spec/S14-roles/parameterized-basic.t

[08:48] <moritz> ===SORRY!===

[08:48] <moritz> Cannot use 'NarrownessTestB.new' as an argument to a parametric role as its value is not known at compile time at line 65, near " { }\nclass"

[08:50] *** M_o_C_ joined
[08:52] <jnthn> huh, I thought I fixed that test.

[08:53] <jnthn> oh, committed, forgot to push

[08:53] <dalek> roast: dceb8e3 | jonathan++ | S14-roles/parameterized-basic.t:

[08:53] <dalek> roast: A couple of parametric role test updates.

[08:53] <dalek> roast: review: https://github.com/perl6/roast/commit/dceb8e394a

[08:53] *** M_o_C__ joined
[08:53] *** M_o_C__ left
[08:53] <jnthn> Sorry 'bout that; moritz++ for noticing.

[08:53] *** M_o_C left
[08:54] *** M_o_C_ left
[08:56] *** wamba left
[09:03] *** pnu left
[09:04] *** pnu joined
[09:12] <masak> I think http://perl6.org/compilers/features should have a row for "separate environments" under "Module management".

[09:13] <jnthn> "seperate environments"?

[09:13] <jnthn> As in, seperate compilation?

[09:13] * moritz has no idea what that could mean

[09:13] <masak> one error that I keep making is that I 'use' modules once somewhere, and then don't use them again downstream from that in later files, even when it'd be necessary from a "real Perl 6" perspective.

[09:13] <masak> both Niecza and Rakudo get this wrong presently.

[09:13] <jnthn> nom should get it correcter.

[09:13] <moritz> transitive use?

[09:13] <masak> jnthn: it's related to separate compilation, but not identical.

[09:14] <moritz> accidental transitive use, that is

[09:14] <jnthn> masak: I don't see the distinction.

[09:14] <masak> moritz: sort of.

[09:14] <masak> jnthn: maybe there isn't one, then.

[09:14] <dalek> roast: fcbbbbe | moritz++ | S16-filehandles/io.t:

[09:14] <dalek> roast: clean up behind masak; be more explicit in testing the retrieved line

[09:14] <dalek> roast: review: https://github.com/perl6/roast/commit/fcbbbbe99f

[09:14] <jnthn> New NQP is a bunch more sensitive to that also

[09:14] <masak> moritz: thanks :)

[09:15] <moritz> masak: you're welcome :-)

[09:15] <jnthn> When I started doing Rakudo atop of new NQP, I had to add a bunch of use statements.

[09:15] <masak> not "clean up after", but "clean up *behind*" :P

[09:15] <masak> shows what you think of my output :P

[09:15] <jnthn> :D

[09:15] <tadzik> freedom!

[09:16] <masak> tadzik: William Wallace, is that you?

[09:16] <moritz> masak: no, just a word by word translation of a German idiom

[09:17] <tadzik> no, my head is fine

[09:18] <tadzik> but my physics exam is over :)

[09:18] <jnthn> tadzik++

[09:18] <tadzik> well, not sure if it's passed :)

[09:18] <tadzik> but it's over :P

[09:26] *** [Coke] left
[09:26] <moritz> .oO( the end is nigh (

[09:27] *** replore left
[09:27] <moritz> sometimes it really itches me to write a Perl 6 FAQ for perl6.org

[09:28] *** [Coke] joined
[09:31] <frettled> at least the answers ;)

[09:32] <moritz> well, the questions are determined by what people ask here on IRC

[09:32] <moritz> or on the mailing lists, blog comments, reddit, HN etc.

[09:34] *** russellw joined
[09:34] <daxim> "when is it ready?"  bet ya never heard *that* one

[09:35] <jnthn> .oO( Frequently Questioned Answers )

[09:36] <moritz> jnthn: I fondly remember the C++ FQA :-)

[09:44] <masak> they don't seem to appreciate it over at http://programmers.stackexchange.com/questions/4570/what-is-your-opinion-of-c-frequently-questioned-answers

[09:45] <moritz> well, it's a controversial piece of art

[09:48] * jlaire agrees with stackexchange answers

[09:56] *** xinming_ joined
[09:59] *** xinming left
[10:19] <masak> somehow the stackexchange points in defense of C++ ("you can use the nice parts and it can be pretty nice") remind me of point in defense of Perl Classic.

[10:20] <masak> or points in defense of JavaScript.

[10:26] <jlaire> well, it's true :)

[10:29] *** wamba joined
[10:31] <masak> sure, but there's a point at which you might as well use Java, or Perl 6, or Coffeescript.

[10:31] <masak> where a lot of the deficiencies have been fixed but you still get most of the good parts.

[10:38] <jlaire> I strongly prefer C++ over Java and JavaScript over CoffeeScript; the deficiencies don't bother me at all once I know them

[10:38] <jlaire> they just make learning a bit slower

[10:38] <masak> that's an interesting point.

[10:38] <jlaire> but it's good there are all kinds of languages

[10:38] <masak> I don't really have any problems with Perl 5, either.

[10:38] <jlaire> especially in case of JS, which is a fairly small language

[10:38] <jlaire> C++ probably has lots of traps I'm still unaware of :)

[10:40] <masak> there's probably very few people who couldn't claim that about C++ :)

[10:43] *** [Coke] left
[10:43] *** wamba left
[10:44] *** [Coke] joined
[10:46] *** replore joined
[10:50] *** hanekomu joined
[10:52] *** replore left
[10:58] *** pernatiy joined
[11:11] *** [Coke] left
[11:13] *** [Coke] joined
[11:15] *** skangas left
[11:17] <flussence> JS is a pretty unfortunate case; it's a small and fairly decent language tied to one of the most bloated APIs ever invented.

[11:18] *** mikemol joined
[11:18] <arnsholt> It's also blemished by a syntax with some horrid warts, IMO

[11:19] <flussence> yeah, lack of string interpolation is a pain...

[11:20] <jlaire> fortunately jQuery provides a nice wrapper for DOM, and server-side JS doesn't need to care about it

[11:21] <jlaire> if the syntax really bothers you there's CoffeeScript, but /me doesn't care

[11:22] <arnsholt> flussence: And the whole newline or semicolon thing. Ew.

[11:23] <arnsholt> But the language itself is cool. Functional programming with prototype OO

[11:23] * masak loses himself in the C++ FQAs

[11:23] <jlaire> if you always use semicolons, there's no problem... except reading others' code without semicolons maybe

[11:24] <jlaire> but fortunately most people agree it's bad style to rely on the automatic semicolon insertion

[11:24] <masak> arnsholt: JS is hardly functional programming in any strong sense.

[11:25] <arnsholt> Yeah, but I find it quite Lispy (modulo syntax)

[11:28] <daxim> http://news.cnet.com/8301-30685_3-20103843-264/google-to-debut-dart-a-new-language-for-the-web/

[11:30] *** [Coke] left
[11:32] *** [Coke] joined
[11:35] *** Psyche^ joined
[11:36] <masak> wake me up when they actually debuts it :)

[11:36] <masak> debut*

[11:38] *** Patterner left
[11:38] *** Psyche^ is now known as Patterner

[11:39] *** bbkr joined
[11:51] *** satyavvd left
[11:51] * masak finds he's not as good at golfing Niecza bugs as he is golfing Rakudo bugs

[11:52] <moritz> why not? what's different?

[11:53] *** alvis left
[11:54] <snarkyboojum> Niecza sounds like a kind of bug, but then so does Rakudo :)

[11:54] <masak> moritz: my familiarity with the system, most like.

[11:54] <snarkyboojum> "Those pesky Niecza's last night. I know.. I was bitten by a whopping great big Rakudo!"

[11:55] <jnthn> "Then I got chased by a load of Pugs!"

[11:55] <moritz> "and smashed frontally into the smop"

[11:56] <snarkyboojum> "only to slip in a core dump"

[11:57] *** donri joined
[11:58] <snarkyboojum> I always take it to the gutter :S

[12:03] *** clairvy joined
[12:05] <flussence> you're not in the gutter until you've got wasted on PHP

[12:06] *** ab5tract joined
[12:06] *** alvis joined
[12:07] *** lestrrat left
[12:08] *** lestrrat joined
[12:12] *** [Coke] left
[12:14] *** [Coke] joined
[12:18] *** [Coke] left
[12:19] *** [Coke] joined
[12:28] *** patspam left
[12:32] *** uasi left
[12:34] *** patspam joined
[12:36] *** uasi joined
[12:45] *** patspam left
[12:53] *** bluescreen10 joined
[12:56] *** Holy_Cow joined
[13:00] * [Coke] thinks it would be nice if he could log into the irc log web app and mark "I've read through here", so he can easily catch up.

[13:00] *** molaf joined
[13:01] *** Holy_Cow left
[13:01] <moritz> [Coke]: I know it's not the same, but if you click on the time column of a line in my logs, it's hilighted

[13:01] *** russellw left
[13:01] <moritz> so if you reload, you see how far you got

[13:01] *** russellw joined
[13:02] <[Coke]> moritz: doesn't help, since my normal client doesn't even tell me what day I'm looking at. ;)

[13:02] <moritz> (the hilight is preserved through reload by adding the ID as hashtag to the URL)

[13:02] <[Coke]> so if I'm backscrolling, I have to first find the line (with google search if I'm lucky, which I never am),

[13:02] *** jjore left
[13:02] <[Coke]> moritz: ah, so if I went /just/ web app, I could do that.

[13:02] <[Coke]> and if I kept browsing from the same place.

[13:02] <moritz> right.

[13:03] *** jjore joined
[13:03] *** sbp left
[13:03] *** [sbp] joined
[13:03] <[Coke]> Having played with mojo recently, I'm very psyched about perl based web dev for the first time since about 1998.

[13:03] *** [sbp] is now known as sbp

[13:07] <masak> and remember: nobody can take your mojo.

[13:10] <moritz> I have entertained the thought of reimplementing some of the supplemental Mojo:: classes (URL, Cookie, ...) to Perl 6

[13:10] <moritz> s/to/in/

[13:10] <moritz> again, way too many good ideas, too little time

[13:10] <arnsholt> Indeed. I'd like to make some Mongrel 2 libs for Perl 6

[13:11] <arnsholt> There're even zmq bindings for Parrot

[13:11] *** patspam joined
[13:20] <mberends> masak: did you manage to run the Niecza Gtk GUI examples locally?  You error message looked like how an assembly loader would spell 'file not found'. On Debian the required gtk-sharp.dll file is in the libgtk2.0-cil package.

[13:21] <mberends> *Your

[13:23] <masak> mberends: oh, ok! I installed a gtk-sharp package, and when that didn't work either, I gave up.

[13:23] <moritz> .u trademark

[13:23] <phenny> moritz: Sorry, no results for 'trademark'.

[13:24] <moritz> .u tm

[13:24] <phenny> moritz: Sorry, no results for 'tm'.

[13:24] <flussence> .u ™

[13:24] <phenny> U+2122 TRADE MARK SIGN (™)

[13:26] *** wolfman2000 left
[13:29] <moritz> http://www.mahdiyusuf.com/post/9947002105/most-pressed-keys-and-programming-syntaxes the last image is quite telling :-)

[13:31] *** patspam left
[13:34] *** tokuhirom joined
[13:36] *** PacoLinux_ joined
[13:36] <flussence> would be more interesting if it showed data for the shift keys too...

[13:36] <moritz> and backspace

[13:37] <flussence> depends where it gets the data from, it'd be kinda hard to do that for pre-existing source code :)

[13:37] <jlaire> and I wonder which characters were typed manually and which were inserted by the editor

[13:37] <PerlJam> It's odd (to me) that "e" is so hot in programmatic texts

[13:37] <moritz> jlaire: it seems somebody just read in finished source code and mapped it to a keyboard

[13:38] <moritz> PerlJam: it appears in a lot of identifiers and keywords

[13:38] <PerlJam> I guess that's just a reflection of english as the "base language" that we program in.

[13:38] <jlaire> moritz: ok, so if it recorded actual keypresses while coding the stats could look quite different

[13:39] <jlaire> I also wonder why 'x' is so little used... it's a great variable name :)

[13:39] * daxim makes a face like a horse

[13:39] <moritz> jlaire: aye, hence my remark about backspace

[13:39] <jlaire> oh, right

[13:40] *** JimmyZ joined
[13:40] *** packetknife joined
[13:41] <jlaire> vim/gedit/emacs would probably make a bigger difference than the programming language

[13:48] <arnsholt> PerlJam: I think e is the most common vowel in all Western European languages at least

[13:48] <arnsholt> Probably related to the fact that it's kind of the average vowel I think

[13:49] *** icwiener joined
[13:49] *** ingy joined
[13:49] <PerlJam> arnsholt: aye, "e" is the most common letter in the language even.  I just didn't think it so prevalent in source code.

[13:50] <arnsholt> I think most code is alphanumerics (excepting pathological cases like obfus)

[13:50] <arnsholt> Especially if you start including comments

[13:50] <jlaire> http://en.wikipedia.org/wiki/Letter_frequency#Relative_frequencies_of_letters_in_other_languages

[13:51] <moritz> interestingly, the letter frequency doesn't differ much by the subject you write about

[13:51] <jlaire> yep, 'e' is pretty high in many languages

[13:51] <masak> which makes "La Disparation" all the more impressive.

[13:52] <arnsholt> I have that on my shelf, but haven't actually read it yet

[13:52] <arnsholt> I tried several years ago, but gave up after I had to look up ten words on the first page alone

[13:52] <arnsholt> I suppose I could try "A Void" though

[13:54] *** ingy left
[13:54] <masak> yes :)

[13:54] *** ingy joined
[13:54] <moritz> http://en.wikipedia.org/wiki/A_Void#Plot_summary I like that the appraisal in The Times also doesn't include any e

[13:57] *** PacoLinux left
[13:57] <daxim> and that paragraph has only 6 es and 1 E

[13:58] <arnsholt> Oulipo is a slightly insane literary movement

[13:58] <arnsholt> I really like it =)

[13:58] <sorear> good * #perl6

[13:59] <sorear> masak: erm, what are you seeing exactly?  niecza has "separate environments"

[14:01] <sorear> masak: note that if A defines GLOBAL::A::X, and B uses A, and C uses B, then C will be able to see GLOBAL::A::X because globals are always copied into calling units (S02:2692)

[14:02] <moritz> if I write class A::X { }, does that create a GLOBAL::A::X?

[14:02] <jnthn> Yes

[14:02] <jnthn> (by spec)

[14:03] <jnthn> If you "use A; use B;" then the compilation of B won't see stuff dragged in by A

[14:03] <moritz> but it will see A itself, right?

[14:03] <jnthn> But if A did "use C" and that had some globals, then yes, you'd see them.

[14:03] <jnthn> moritz: No

[14:03] <moritz> hmkay

[14:03] <jnthn> moritz: We compile the module with a "clean slate"

[14:04] <jnthn> Then merge its idea of GLOBAL with the current one.

[14:04] <jnthn> And a clean slate means a clean idea of GLOBAL

[14:04] * moritz doesn't make a pun on clean/dirty ideas

[14:07] <masak> sorear: oh, ok.

[14:08] <masak> sorear: actually, I'm having a different problem right now, but I'm unable to golf it.

[14:08] <masak> sorear: the exception I'm getting is "System.InvalidCastException: Cannot cast from source type to destination type"

[14:09] <moritz> now please add source and destination type to that error message :-)

[14:12] *** patspam joined
[14:13] <tadzik> yay, ram arrived

[14:13] <jnthn> That'll help ewe with your Rakudo hacking \o/

[14:13] <tadzik> yep :0

[14:13] <tadzik> :)

[14:13] <moritz> \o/

[14:13] <tadzik> seems that the exam is failed though :\

[14:13] *** tokuhirom left
[14:14] <moritz> /o\

[14:14] <jnthn> :(

[14:14] <tadzik> tomorrow will be the begging day

[14:14] <tadzik> we'll see

[14:14] <bbkr> tadzik: what kind of exam?

[14:14] <tadzik> bbkr: physics

[14:15] *** mtk left
[14:16] <masak> jnthn++ # horribly sheepish punning

[14:18] <bbkr> tadzik: don't worry about physics unless you plan to build wormhole one day :) it's totally useless in IT.

[14:18] <tadzik> bbkr: naah, I don't really care. I didn't even take my matural exam in physics

[14:19] <tadzik> and I have still 3 semesters to pass it :)

[14:20] * moritz should preach against the unholy disregard of the most noble and ancient subject of physics :-)

[14:21] *** wtw left
[14:22] <bbkr> ok, i will rephrase: "it's totally useless in IT unless you are Angry Birds developer"

[14:24] <masak> allow me to disagree.

[14:24] <masak> physicists get one very useful tool for practically all other fields: that of thinking in models.

[14:25] *** mtk joined
[14:25] <masak> they go on to become great bioinformaticians. I bet they go on to become decent programmers as well.

[14:25] * moritz hopes he is on that way too

[14:25] <jnthn> .oO( A compiler is like a perfect, uniform sphere :-) )

[14:25] <moritz> jnthn: that's what the mathematicians say :-)

[14:27] <arnsholt> jnthn: Not a spherical cow?

[14:28] * masak .oO( cowmpiler )

[14:29] <daxim> frictionless cowtipping

[14:30] <sorear> masak, moritz: mono --debug=casts

[14:31] <sorear> there's also the backtrace, a lot of functions have only one cast that could possibly fail

[14:35] *** tokuhirom joined
[14:36] <masak> sorear: "Unhandled exception: System.InvalidCastException: Unable to cast object of type 'Niecza.SubInfo' to type 'Niecza.STable'"

[14:36] <masak> at Niecza.RuntimeUnit.FixupSubs

[14:41] *** abercrombie joined
[14:42] *** BooK left
[14:43] <masak> in chasing Niecza errors down the golf chute, I get the distinct impression that the same input doesn't always generate the same error.

[14:43] <masak> is there a compilation cache involved somewhere?

[14:44] *** pmurias joined
[14:44] <pmurias> sorear: hi

[14:46] <pmurias> sorear: as people have seem to have problems with different mono version would it make sense to write a monobrew/perlbrew script?

[14:48] <pmurias> masak: obj/

[14:48] <masak> pmurias: thank you.

[14:48] <masak> I'd very much like a monobrew/perlbrew script for Niecza.

[14:48] *** ab5tract left
[14:53] *** icwiener left
[14:53] <pmurias> masak: for installing a mono version or a niecza version?

[14:53] * pmurias meant to type nieczabrew

[14:54] <masak> I assumed Mono, but installing Niecza would perhaps be even nicer :)

[14:55] * flussence would like a perl6brew script in general

[14:58] *** tokuhirom left
[14:58] *** birdwindupbird left
[14:59] * masak decommutes

[15:00] *** masak left
[15:00] *** uasi left
[15:00] *** alvis left
[15:00] *** wamba joined
[15:01] *** simcop2387 left
[15:01] *** SHODAN left
[15:03] *** mberends left
[15:03] *** thou joined
[15:04] *** aloha left
[15:05] *** simcop2387 joined
[15:09] *** aloha joined
[15:16] *** mkramer joined
[15:23] <dalek> rakudo/nom: ee12e5a | moritz++ | t/02-embed/01-load.t:

[15:23] <dalek> rakudo/nom: [t] fix deprecated use of run()

[15:23] <dalek> rakudo/nom: 

[15:23] <dalek> rakudo/nom: t/02-embed/01-load.t still fails for other reason though

[15:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ee12e5a5e1

[15:25] *** alvis joined
[15:31] *** benabik left
[15:33] *** im2ee joined
[15:35] <im2ee> Hi! :)

[15:35] <moritz> \o

[15:37] * [Coke] thinks a good grasp of physics is helpful in general. But then, I have an engineering degree, and would recommend that to everyone as well, instead of comp sci. (helps with generic problem solving skills)

[15:38] * [Coke] likes math, but his interest petered out after partial differential equations.

[15:39] *** jevin left
[15:41] *** jevin joined
[15:42] * moritz would prefer it if physics worked fine without partial differential equations. It doesn't.

[15:42] *** sayu joined
[15:50] <sorear> phenny: tell masak Yes there is a compilation cache.  Looks like you have problems of that nature

[15:50] <phenny> sorear: I'll pass that on when masak is around.

[15:51] * [Coke] took 3 semesters of physics without needing diffeq.

[15:51] * sorear is something of a finitist and dislikes most continuum mathematics

[15:51] <arnsholt> moritz: And next you're gonna tell us infinite frictionless planes don't exist? =p

[15:53] <dalek> roast: 65541e3 | Coke++ | / (2 files):

[15:53] <dalek> roast: nom fudging

[15:53] <dalek> roast: review: https://github.com/perl6/roast/commit/65541e3b44

[15:54] *** daxim left
[15:54] <sorear> to me, Banach-Tarski is a sign that \mathbb{R} is fundamentally wrong for describing the real world

[15:55] <dalek> rakudo/nom: 08ef941 | Coke++ | t/spectest.data:

[15:55] <dalek> rakudo/nom: track failures/run fudges

[15:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/08ef94167a

[15:55] *** wamba left
[15:55] <sorear> pmurias: I don't really follow you

[15:55] *** wamba joined
[15:56] <sorear> I have multiple mono versions installed side-by-side, it works rather well

[15:57] *** alester joined
[15:59] *** simcop2387 left
[16:00] <[Coke]> is there a way to squash something into the first git commit in a repo?

[16:00] <[Coke]> (rebase -i won't let me include the first commit in the list.)

[16:00] <PerlJam> [Coke]: there is, but I don't recall how to do it right off.

[16:00] <PerlJam> [Coke]: pretty sure you can find the answer on stackoverflow though

[16:02] *** simcop2387 joined
[16:09] *** daniel-s left
[16:18] <pmurias> sorear: how do you switch between them?

[16:19] *** packetknife left
[16:25] <sorear> pmurias: I change the command I run

[16:27] <pmurias> sorear: you don't set all env variables in http://www.mono-project.com/Parallel_Mono_Environments?

[16:27] <pmurias> i had to do that to install gtk#

[16:32] *** static_perl left
[16:34] *** mkramer left
[16:35] *** risou_awy is now known as risou

[16:36] <pmurias> sorear: i'm not familiar with how mono works, but i assume that being able to easily install a tested version of mono would make installing niecza much easier

[16:37] *** packetknife joined
[16:38] <[Coke]> PerlJam++

[16:38] *** Trashlord joined
[16:38] *** MayDaniel joined
[16:47] *** daniel-s joined
[16:51] *** mj41 joined
[16:51] *** Chillance joined
[16:55] <pmurias> sorear: easily meaning with a single command ;)

[16:55] *** pmurias left
[16:56] *** mj41 left
[16:59] *** frhodes left
[17:01] *** bluescreen10 left
[17:03] *** wamba left
[17:05] *** xinming_ left
[17:05] *** frhodes joined
[17:09] *** localhost joined
[17:14] *** masak joined
[17:15] <masak> sorear: if you're a finitist, what do you think of the surreal number system?

[17:15] <phenny> masak: 15:50Z <sorear> tell masak Yes there is a compilation cache.  Looks like you have problems of that nature

[17:15] *** REPLeffect left
[17:15] <masak> yes, I think so.

[17:15] *** molaf left
[17:20] *** wamba joined
[17:22] <TimToady> the interesting news this morning is that NetLogic is being acquired by Broadcom

[17:22] *** thou left
[17:24] *** packetknife left
[17:26] * masak .oO( the merger, briefly known as "Broad Logic", quickly changes its name to "net.com" )

[17:27] *** REPLeffect joined
[17:28] *** thou joined
[17:28] <sorear> masak: since I don't like limit ordinals, my surreals are the dyadic rationals.

[17:30] *** pernatiy left
[17:30] <masak> sorear: :P

[17:31] <masak> I can understand the skepticism towards limit ordinals. the ancient Greeks would probably agree wholeheartedly.

[17:36] *** frhodes left
[17:36] *** ab5tract joined
[17:37] *** dakkar left
[17:41] *** mj41 joined
[17:48] <diakopter> TimToady: interesting

[17:50] <TimToady> I knew the instant I saw that our stock price went up 50%, and said to Gloria, "Looks like we've been bought."  :)

[17:51] <masak> oh, it's your employer? then I see the relevance :)

[17:51] <diakopter> hopefully they'll believe in Perl 6 too

[17:52] <PerlJam> TimToady: what exactly do you do for NetLogic?

[17:52] <PerlJam> er, did

[17:52] <sbp> do you did?

[17:52] <TimToady> at the moment, still sitting in the company meeting :)

[17:52] *** envi left
[17:53] *** thou left
[17:53] <PerlJam> hopefully you aren't decended upon by a hoard of bean-counters intent on "trimming the fat" or some such.

[17:53] <PerlJam> er, but with my spelling fixed

[17:53] *** JimmyZ left
[17:53] <PerlJam> :)

[17:54] <TimToady> well, I'm not allowed to speculate publicly, but I believe I can point out this is not a hostile takeover

[17:55] <PerlJam> blah, I've got a meeting in about 5 minutes

[17:55] <TimToady> though of course the lawyers are already very busy :)

[17:56] * TimToady has a tremendous grasp of the obvious :)

[17:56] <TimToady> meeting over, moving to my cubicloid now...

[17:57] <TimToady> biab &

[17:59] *** mspaulding joined
[18:01] *** thou joined
[18:02] <diakopter> PerlJam: TimToady provides pattern-matching expertise for NetLogic, which is a chimpmaker

[18:02] <diakopter> er, chipmaker

[18:04] <masak> oh right!

[18:04] *** _jaldhar left
[18:04] <masak> sounds like a perfect match, for some reason.

[18:05] <diakopter> also I'm sure they like to be able to say he's a employoid

[18:05] <diakopter> *an

[18:05] *** im2ee left
[18:05] <diakopter> so, name-dropping

[18:05] *** bluescreen10 joined
[18:05] <masak> if they don't, we're hiring! :P

[18:05] *** ab5tract left
[18:06] <diakopter> we're hiring too, and nearly infinitely closer :)

[18:06] <masak> dang :P

[18:06] <jnthn> Yeah but we have drunk elk.

[18:07] <jnthn> Which, apparently, is a big news story...to people reading BBC news. :)

[18:07] <jnthn> (Somehow, it managed to hit most read story at some point for several days running...)

[18:11] *** alvis left
[18:18] *** im2ee joined
[18:18] <TimToady> funny think, almost exactly the moment you said "name-dropping", I knocked someone's nameplate off, and said "That's name-dropping."

[18:18] <TimToady> *thing

[18:24] <diakopter> that's name-dropping-dropping

[18:25] <TimToady> same to you, but more of it

[18:25] <TimToady> do grade school kids still say that?

[18:26] <diakopter> I've never heard it

[18:26] *** alvis joined
[18:26] <TimToady> "Anything you can do, I can do meta."  --Annie Oakley

[18:27] <TimToady> "I can do anything meta than you!"

[18:27] <diakopter> btw, I think I wrongly thought I was a hypochondriac this weekend

[18:27] <TimToady> you're a sick person

[18:28] * TimToady wonders whether hypo or hyper chondria is more adaptive...

[18:30] <diakopter> :)

[18:30] *** sayu left
[18:31] <TimToady> the answer is likely to be contextual

[18:31] <diakopter> yeah depends on the (lack of) illness

[18:32] <masak> this is like Epimenides exclaiming "I'm afraid I'm far too truthful a person!"

[18:34] *** hanekomu left
[18:35] *** bluescreen10 left
[18:36] <diakopter> masak: I can't ever make absolute claims about anything

[18:36] <masak> diakopter: :P :P

[18:39] * mikemol bounces

[18:40] <masak> there's paradox in the air...

[18:48] *** birdwindupbird joined
[18:52] *** Trashlord left
[18:54] <masak> rakudo: my $epimenides = (True + False) / 2; say $epimenides == (True - $epimenides)

[18:54] <p6eval> rakudo 08ef94: OUTPUT«Bool::True␤»

[18:54] <masak> :)

[18:57] *** MayDaniel left
[19:00] *** _jaldhar joined
[19:01] *** PacoLinux_ left
[19:04] *** soh_cah_toa joined
[19:08] <[Coke]> perl6: say True + false

[19:08] <p6eval> pugs: OUTPUT«*** No such subroutine: "&false"␤    at /tmp/3G1lnW2tWj line 1, column 5 - line 2, column 1␤»

[19:08] <p6eval> ..niecza v9-23-g1a8efca: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤      'false' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 685 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1136 (STD P6.comp_unit @ 36) ␤ …

[19:08] <p6eval> ..rakudo 08ef94: OUTPUT«Could not find sub &false␤  in <anon> at /tmp/4SODIDi4ff:1␤  in <anon> at /tmp/4SODIDi4ff:1␤␤»

[19:08] <[Coke]> perl6: say True + alse // even

[19:08] <p6eval> niecza v9-23-g1a8efca: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Bogus term at /tmp/jlgCCXrN2S line 1:␤------> [32msay True + [33m⏏[31malse // even[0m␤␤Parse failed␤␤»

[19:08] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "\ACK"␤    at /tmp/R4Zs1AOls3 line 1, column 12␤»

[19:08] <p6eval> ..rakudo 08ef94: OUTPUT«===SORRY!===␤Confused at line 1, near "say True +"␤»

[19:08] <[Coke]> perl6: say True + False # fix many mistakes. ;)

[19:08] <p6eval> pugs, rakudo 08ef94, niecza v9-23-g1a8efca: OUTPUT«1␤»

[19:09] *** hanekomu joined
[19:10] <[Coke]> masak: ping

[19:11] <[Coke]> phenny: ask masak to ping me about the old non-hague grant when he gets in.

[19:11] <phenny> [Coke]: I'll pass that on when masak is around.

[19:12] *** soh_cah_toa_ joined
[19:13] *** soh_cah_toa left
[19:22] *** PacoLinux_ joined
[19:25] *** ilogger2 joined
[19:25] *** ChanServ sets mode: +v ilogger2

[19:27] *** stepnem joined
[19:28] *** wallberg joined
[19:44] *** gatinueta joined
[20:13] *** y3llow joined
[20:13] *** pothos_ joined
[20:14] *** pothos_ is now known as pothos

[20:16] *** y3llow left
[20:16] *** pothos left
[20:16] *** y3llow joined
[20:17] *** pothos_ joined
[20:17] *** pothos_ is now known as pothos

[20:24] *** HarryS joined
[20:28] *** supernovus joined
[20:30] *** benabik joined
[20:34] *** simcop2387 joined
[20:41] <supernovus> I'm not sure if I'm doing something wrong, or if there is a genuine bug in the IO::Socket::INET in the nom branch, but when I try to create an instance, I get a "Could not find sub &INET" error. In the library itself, there are a few references to INET as a raw term. I couldn't find any bugs related to this on RT, and am not sure this is even a "bug". So yeah, just bringing it up, if it is a bug, I'll see if I can remember how to 

[20:41] <supernovus> submit to RT...

[20:43] <jnthn> supernovus: Hm, oddness. May be somehow busted.

[20:43] <jnthn> supernovus: I did at least get it to make a HTTP request.

[20:43] <masak> rakudo: IO::Socket::INET.new; say "alive"

[20:43] <phenny> masak: 19:11Z <[Coke]> ask masak to ping me about the old non-hague grant when he gets in.

[20:44] <p6eval> rakudo 08ef94: OUTPUT«Could not find symbol 'IO::Socket::&INET'␤  in <anon> at /tmp/26CV9KuQC4:1␤  in <anon> at /tmp/26CV9KuQC4:1␤␤»

[20:44] <masak> huh.

[20:44] <jnthn> Hm

[20:44] <masak> maybe p6eval doesn't have that class.

[20:44] *** eternaleye joined
[20:44] <jnthn> Oh

[20:44] <jnthn> Yeah

[20:44] <jnthn> It won't

[20:44] <masak> for shcur'ty.

[20:44] <jnthn> Yeah

[20:44] <jnthn> The lexically nested IO package in SAFE.setting totally hides the outer one.

[20:45] <jnthn> Which is what we want but breaks things here...

[20:51] *** gatinueta left
[20:55] <supernovus> The calls that seem to be breaking it are all nqp::getattr and nqp::bindattr calls. An example being -- nqp::bindattr(self, INET, '$!PIO', $PIO); 

[20:55] <jnthn> Ah

[20:56] <jnthn> s/INIT/$?CLASS/ is probably more robust.

[20:57] <jnthn> er, INET

[20:57] <masak> rakudo: say (1..10).list.fmt('%d', ' | ')

[20:57] <p6eval> rakudo 08ef94: OUTPUT«1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10␤»

[20:57] <masak> rakudo: say (1..10).fmt('%d', ' | ')

[20:57] <p6eval> rakudo 08ef94: OUTPUT«Too many positional parameters passed; got 3 but expected between 1 and 2␤  in method fmt at src/gen/CORE.setting:1410␤  in <anon> at /tmp/QoMWwNMEAJ:1␤  in <anon> at /tmp/QoMWwNMEAJ:1␤␤»

[20:57] <masak> should the latter work? discuss.

[20:57] <masak> it seems to have worked in b.

[20:58] <masak> b: say (1..10).fmt('%d', ' | ')

[20:58] <p6eval> b 1b7dd1: OUTPUT«1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10␤»

[20:58] <masak> yup.

[20:58] <jnthn> Not sure

[20:58] <masak> I vote "yes".

[20:58] <jnthn> Wonder where fmt lives in that base

[20:58] <masak> fwiw

[20:58] <jnthn> *case

[20:58] <jnthn> b: say Range.^methods(:local)

[20:58] <supernovus> changed all occurences of INET wit $?CLASS and recompiling CORE.setting, fingers crossed :-)

[20:58] <p6eval> b 1b7dd1: OUTPUT«newboundsfromtoiteratorperlACCEPTSpostcircumfix:<[ ]>pickrollat_posofminexcludes_minmaxexcludes_max␤»

[20:59] <jnthn> b: say Range.^mro

[20:59] <p6eval> b 1b7dd1: OUTPUT«Method 'mro' not found for invocant of class ''␤  in main program body at line 22:/tmp/u5jupLXUX5␤»

[20:59] <jnthn> b: say Range.^parents

[20:59] <p6eval> b 1b7dd1: OUTPUT«Iterable()Cool()Any()Mu()␤»

[20:59] <jnthn> b: say Iterable.^methods(:local)

[20:59] <p6eval> b 1b7dd1: OUTPUT«itemNumericIntNumStrelemsfmtlist␤»

[20:59] <masak> fmt!

[20:59] <jnthn> aha, there's a fmt in iterable

[20:59] <masak> huh.

[20:59] <jnthn> nom: say Iterable.^methods(:local)

[20:59] <p6eval> nom 08ef94: OUTPUT«elems infinite item Int Num Numeric Str␤»

[20:59] * masak submits rakudobug

[20:59] <jnthn> nom: say Range.^mro

[20:59] <p6eval> nom 08ef94: OUTPUT«Range() Iterable() Cool() Any() Mu()␤»

[21:00] <masak> at the very least, this is something that needs looking into.

[21:00] <jnthn> Probably easy to patch.

[21:00] <masak> very probably LHF, yes.

[21:00] <jnthn> Provided we feel that b's anwer is OK.

[21:00] <jnthn> *answer

[21:00] * masak does :)

[21:00] <masak> otherwise I'll have to patch connect-4 in a way I don't like.

[21:00] <jnthn> I agree it should work, and Iterable seems a sane enough place to put it to me.

[21:00] <jnthn> So no objects on my part if we make that work.

[21:03] <diakopter> no objects indeed

[21:04] <jnthn> er, objections :P

[21:05] <jnthn> masak: Adding .fmt to Iterable now.

[21:07] <masak> ooh!

[21:08] <jnthn> supernovus: Trying a patch for your issue too

[21:08] <jnthn> supernovus: oh, you're also doing so

[21:08] <jnthn> OK :)

[21:10] <jnthn> Imagine you have a class with a method m() { ... }

[21:10] <jnthn> In a subclass you write a multi method m() { ... }, maybe some more cands

[21:10] <masak> hm, there's an interesting new bug in connect-4 in which the first player wins after her first move!

[21:10] <jnthn> Anyone disagree with the notion that that it should just generate a proto in the subclass?

[21:11] <masak> well, I guess I'll have to track it down...

[21:11] <jnthn> (At the moment it complains that there's an only method in the tree...)

[21:11] <masak> jnthn: I agree with the notion.

[21:11] <supernovus> Well, running SCGI-test.p6 doesn't crash now, but I can't connect to the port it should be listening on yet. So, the patch seems to have fixed the crashing issue, but I may need to play with it some more yet :-)

[21:11] <jnthn> supernovus: OK, I'll push that patch.

[21:14] <dalek> rakudo/nom: 831b481 | jonathan++ | src/Perl6/Actions.pm:

[21:14] <dalek> rakudo/nom: Fix thinko in fakesignature action; another little step for putting :(...) := ... style binding back.

[21:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/831b48163b

[21:14] <dalek> rakudo/nom: ad9639a | jonathan++ | src/core/IO/Socket/INET.pm:

[21:14] <dalek> rakudo/nom: Socket fixes; supernovus++ for discovering the issue and testing the fix.

[21:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ad9639ad56

[21:14] <dalek> rakudo/nom: e3a2fd7 | jonathan++ | src/core/Iterable.pm:

[21:14] <dalek> rakudo/nom: Make (1..10).fmt(...) work again; masak++ for noting it.

[21:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e3a2fd7c06

[21:15] <masak> jnthn++

[21:16] <supernovus> Okay, I can confirm I can connect to the port, but now I get a nice neat new error: get_integer() not implemented in class 'Socket'.  So, I will go digging again :-)

[21:20] <supernovus> Hmm, not that I can see where there are any calls to get_integer anywhere in the core... must be a nqp/pir issue :(

[21:20] <jnthn> supernovus: Run it with --ll-exception

[21:20] <jnthn> supernovus: It'll give more info on what's up

[21:21] <cotto_work> I need something that depends on Rakudo to start fleshing out how to make Parrot's allhlltest work with Perl 6 modules.

[21:21] <cotto_work> What's a useful and well-tested Perl 6 module that won't eventually end up as part of Rakudo?

[21:21] <soh_cah_toa_> irc::utils ;)

[21:21] <cotto_work> It doesn't matter too much what it does as long as its tests pass and it doesn't too many external dependcies.

[21:21] <cotto_work> *dependencies

[21:22] <soh_cah_toa_> heard that was a pretty awesome module by pretty awesome guy

[21:22] <tadzik> awesome

[21:22] <soh_cah_toa_> totally

[21:23] <soh_cah_toa_> plus, all tests pass on my machine at least

[21:24] <cotto_work> how about Web.pm?

[21:24] <cotto_work> masak: ping

[21:25] <masak> cotto_work: pong

[21:25] <cotto_work> masak: do you see Web.pm as something that you'll be maintaining for a while?

[21:25] <masak> ...as opposed to...?

[21:26] <supernovus> Hmm, it seems the accept() method has an issue. It seems to be trying to return a nqp::p6bool(), but the expected output is an object representing the connection.

[21:26] <masak> cotto_work: I'm not sure I understand the question.

[21:26] <cotto_work> masak: I'm looking for a starting point for testing Perl 6 module as part of Parrot's allhlltest.

[21:26] <masak> ah.

[21:27] <masak> Web.pm has lots of code, but it's not guaranteed to be up-to-date.

[21:27] <jnthn> supernovus: Maybe the fool who ported it from ng to nom knew nothing about sockets ;)

[21:27] <masak> cotto_work: something like Pies might be a better choice.

[21:27] <cotto_work> masak: does that mean "likely to break" or just "sub-optimal"

[21:27] <masak> cotto_work: a bit of both.

[21:28] <cotto_work> I see no "Pies" on http://modules.perl6.org/

[21:28] <cotto_work> where does it live?

[21:28] <supernovus> jnthn:  I'll play with it. I don't know much about nqp, but I'll dig through the code.

[21:29] <supernovus> cotto_work: see Panda

[21:29] <tadzik> cotto_work: panda

[21:29] <masak> panda :)

[21:29] <cotto_work> cotto_work: panda

[21:29] <masak> :P

[21:30] <tadzik> cotto_work: https://github.com/tadzik/panda/blob/master/lib/Pies.pm you want something implementing this protocol

[21:30] <masak> I should've said Panda, not Pies.

[21:30] <tadzik> possibly using the roles already provided by Panda, as in Panda::Builder and so

[21:30] <cotto_work> panda looks like a good first step

[21:30] <tadzik> panda is just an installer

[21:30] <tadzik> Pies is supposed to be a general implementation for module mangling

[21:31] <tadzik> I once wrote something for smoketesting using the Pies "protocol"

[21:32] <dalek> roast: ff5b76b | jonathan++ | S12-methods/lastcall.t:

[21:32] <dalek> roast: Update lastcall.t for current spec.

[21:32] <dalek> roast: review: https://github.com/perl6/roast/commit/ff5b76b76e

[21:34] <im2ee> Good night! :)

[21:35] <masak> im2ee: dobranoc

[21:36] <supernovus> Okay, maybe "playing with it" wasn't such a good idea... now instead of a useful error message, I get "Segmentation fault (core dumped)"... I should avoid playing with internals :-P

[21:40] <jnthn> Congrats!

[21:47] <supernovus> I wish I understood the bindattr/getattr stuff better. Comparing the ng class to the nom class it interested, yet ultimately futile, as I don't know what to "box" the getattr results into. Any NQP primers?

[21:48] *** benabik left
[21:48] <cotto_work> its test suite is the best I know of

[21:48] <tadzik> I think it's about wrapping a low-level object in a Perl 6 object

[21:48] <jnthn> supernovus: What do you expect to come back from it?

[21:48] <masak> b: my @a = [1], [2], [3]; say (map { @a[1 - $_][0] }, 0 .. 3).perl

[21:48] *** kaare_ joined
[21:48] <p6eval> b 1b7dd1: OUTPUT«(2, 1, Any, Any)␤»

[21:48] <masak> nom: my @a = [1], [2], [3]; say (map { @a[1 - $_][0] }, 0 .. 3).perl

[21:48] <p6eval> nom 08ef94: OUTPUT«(2, 1).list␤»

[21:48] * masak submits rakudobug

[21:48] <tadzik> here we go again

[21:49] <supernovus> A Socket object.

[21:49] <supernovus> It may be an IO::Socket::INET object actually, representing the current connection.

[21:49] *** benabik joined
[21:49] *** wallberg left
[21:50] <jnthn> supernovus: ah.

[21:50] <masak> tadzik: this change in semantics causes connect-4 to give the first player the win on the first move.

[21:50] <supernovus> I think my attempt to "fix" it ended up returning the raw parrot Socket object, which of course rakudo looked at and promptly died ;-)

[21:51] <tadzik> masak: serious business

[21:51] <masak> tadzik: seems connect-4's winning condition relied on being able to do negative indexing.

[21:51] <masak> tadzik: I have no trouble believing that this isn't spectested.

[21:52] <masak> and I have no horse in this race. I'll gladly rewrite that part of connect-4 if need be.

[21:52] <supernovus> I'm guessing the accept() method hasn't been tested up until now as most uses of the library are for client connections, whereas I'm trying to port my SCGI daemon library to nom :-)

[21:52] <masak> but until there's a verdict, it goes into RT.

[21:52] <masak> niecza: my @a = [1], [2], [3]; say (map { @a[1 - $_][0] }, 0 .. 3).perl

[21:52] <jnthn> nom: my @a = [1], [2], [3]; say (map { say @a[1 - $_][0].WHAT; @a[1 - $_][0] }, 0 .. 3).perl

[21:52] <p6eval> niecza v9-23-g1a8efca: OUTPUT«(2, 1, Any, Any).list␤»

[21:52] <p6eval> nom 08ef94: OUTPUT«Int()␤Int()␤Nil␤Nil␤(2, 1).list␤»

[21:52] <masak> there'a another data point, I guess.

[21:52] <jnthn> nom: say (map { Nil }, 0 .. 3).perl

[21:52] <p6eval> nom 08ef94: OUTPUT«().list␤»

[21:53] <jnthn> masak: There's the underlying thing.

[21:53] <tadzik> supernovus: make sure to make friends with IO::Select :)

[21:53] <masak> jnthn: I suspected that.

[21:53] <masak> jnthn: why Nil and not Any?

[21:53] <jnthn> masak: I can believe that's actually correct. But I'm not quite sure if the Nil you got before is wrong.

[21:53] <jnthn> masak: That is, it's not map's fault..but @a[1 - $_][0] returning Nil may be wrong.

[21:53] <masak> aye.

[21:53] <masak> I know.

[21:54] *** daniel-s joined
[21:54] <jnthn> Well, so that golfs if. :)

[21:55] <jnthn> nom: my $num = '4'; say (+$num).WHAT

[21:55] <p6eval> nom 08ef94: OUTPUT«Int()␤»

[21:55] <jnthn> b: my $num = '4'; say (+$num).WHAT

[21:55] <p6eval> b 1b7dd1: OUTPUT«Num()␤»

[21:56] <jnthn> Pretty sure nom's right here. Comments?

[21:56] <masak> nom++

[21:56] <jnthn> ok, then I'll fix the multi test that wrongly relies on it :)

[21:58] *** wolfman2000 joined
[21:58] <supernovus> tadzik: IO::Select looks nice, I'll have to dig into it a bit more. Hopefully I can get my SCGI library working under nom, then I can start extending its feature set. Since writing it, the only other time it got updated, was to port it from alpha to ng... it's a pretty simple library at the moment.

[22:00] <[Coke]> (smoketesting, pies) should that have been mentioned in re: my ping to the list last week?

[22:01] <dalek> roast: 48a5530 | jonathan++ | S12-methods/multi.t:

[22:01] <dalek> roast: Start updating S12-methods/multi.t for current semantics.

[22:01] <dalek> roast: review: https://github.com/perl6/roast/commit/48a5530369

[22:02] *** wolfman2_ joined
[22:03] <dalek> rakudo/nom: a5d0ca2 | jonathan++ | src/core/control.pm:

[22:03] <dalek> rakudo/nom: Fix handling of lack of candidate to defer to in nextsame/nextwith.

[22:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a5d0ca2eb4

[22:03] <dalek> rakudo/nom: ef8480f | jonathan++ | t/spectest.data:

[22:03] <dalek> rakudo/nom: Run S12-methods/lastcall.t.

[22:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ef8480f859

[22:03] <dalek> rakudo/nom: bb2a5ad | jonathan++ | src/Perl6/Metamodel/MultiMethodContainer.pm:

[22:03] <dalek> rakudo/nom: Remove a die in a place where we should just go ahead and generate a proto. Fixes compilation of S12-methods/multi.t, though it doesn't yet pass.

[22:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bb2a5ad7a1

[22:03] <tadzik> [Coke]: what ping?

[22:04] *** wolfman2000 left
[22:06] *** alvis joined
[22:11] * supernovus is crossing fingers and trying something crazy... 

[22:13] <sorear> good * #perl6

[22:15] <diakopter>  /

[22:16] <masak> goodsorear

[22:17] *** wolfman2000 joined
[22:18] <masak> niecza: my @a; say @a[-3][1]

[22:18] <p6eval> niecza v9-23-g1a8efca: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unsupported use of [-3] subscript to access from end of array; in Perl 6 please use [*-3] at /tmp/Yrr1qF_V0Q line 1:␤------> [32mmy @a; say @a[-3][33m⏏[31m[1][0m␤␤Parse failed␤␤»

[22:18] <masak> niecza: my @a; say @a[$_][1] given -3

[22:19] <p6eval> niecza v9-23-g1a8efca: OUTPUT«Any()␤»

[22:19] <masak> sorear: Any(), or Nil() ?

[22:20] *** wolfman2_ left
[22:25] <sorear> masak: tentatively, I will say Any is correct, but I am open to arguments; that code predates Nil

[22:26] <masak> I'm also leaning towards Any.

[22:26] <masak> reason I'm asking is nom does Nil, but b does Any.

[22:27] <masak> I just submitted a rakudobug about it.

[22:27] <sorear> I thought b did &die

[22:27] <sorear> b: my @a; say @a[$_] given -1;

[22:27] <p6eval> b 1b7dd1:  ( no output )

[22:27] <sorear> b: my @a; say @a[*-1].perl

[22:27] <p6eval> b 1b7dd1: OUTPUT«undef␤»

[22:27] <sorear> hrm

[22:27] <jnthn> b did some cute things...

[22:28] <jnthn> undef? really? :)

[22:28] <benabik> What undef?

[22:28] * sorear wonders wtf the (no output) was about

[22:28] <sorear> shouldn't &say always at least make a newline?

[22:28] <benabik> Perhaps evalbot interprets "\n" as nothing

[22:29] <benabik> nom: say ''

[22:29] <p6eval> nom e3a2fd: OUTPUT«␤»

[22:29] <benabik> Or not.

[22:29] <diakopter> nom: print ''

[22:29] <p6eval> nom e3a2fd:  ( no output )

[22:29] <diakopter> heh

[22:29] <sorear> once upon a time, p6eval had a bug which would interpret segfaults as a lack of output, but that's been fixed

[22:29] <sorear> b: my $a := $a; say $a;

[22:29] <p6eval> b 1b7dd1: OUTPUT«Segmentation fault␤»

[22:30] <jnthn> nom:  my $a := $a; say $a;

[22:30] <p6eval> nom e3a2fd: OUTPUT«Any()␤»

[22:30] <jnthn> phew ;)

[22:30] <diakopter> hm, I suppose that's a known segfault

[22:30] <diakopter> oh

[22:30] <jnthn> diakopter: b did some...interesting things...with binding.

[22:31] <jnthn> (where interesting means "omg WRONG")

[22:32] <cotto_work> what's b?

[22:32] <jnthn> cotto_work: beijing release

[22:32] <cotto_work> thnaks

[22:32] <jnthn> cotto_work: The last release we did from the old master.

[22:32] *** patspam joined
[22:33] *** wolfman2000 left
[22:37] *** patspam left
[22:37] *** wolfman2000 joined
[22:44] *** wolfman2000 left
[22:44] *** wolfman2000 joined
[22:48] <masak> 'night, channel

[22:48] <TimToady> o/

[22:56] <supernovus> Well, fixing accept() in IO::Socket::INET is beyond me. I'm not sure how to wrap the parrot Socket in a Perl 6 IO::Socket. I fail.

[22:57] <jnthn> supernovus: hm

[22:57] <jnthn> supernovus: Did you try something like

[22:57] <jnthn> my $new_sock := nqp::create($?CLASS);

[22:57] <jnthn> nqp::bindattr($new_sock, $?CLASS, '$!PIO', $the_parrot_socket);

[22:57] <jnthn> ?

[22:58] *** thou joined
[22:58] <supernovus> Nope, that looks much nicer than the horrid mess I did try... 

[22:58] <jnthn> oh, but there's a bunch of other attrs that need initializing too...

[22:59] <jnthn> but maybe you get away with it...

[23:01] <supernovus> I need to read the NQP docs more.

[23:01] <jnthn> I suspect we need to write the NQP docs more...

[23:02] *** kaare_ left
[23:02] * soh_cah_toa_ loves anything w/ the phrase "more documentation"

[23:03] <benabik> soh_cah_toa_: You should write more documentation.

[23:03] <soh_cah_toa_> benabik: i am. working on a chapter on testing for perl6/book

[23:09] *** tokuhirom joined
[23:12] <supernovus> jnthn: Well, I'm getting closer. I need to initialize $!buffer too.

[23:13] <jnthn> nqp::bindattr with '$!buffer' and setting it to '' should work, it seems.

[23:13] <jnthn> (e.g. the empty string)

[23:16] *** patspam joined
[23:16] <supernovus> that's what I'm trying actually, didn't know if it would work or not, but figured why not try :-)

[23:19] <supernovus> Hmm, apparently that doesn't quite work, "Cannot assign to a non-container". Ah well, I'll keep playing :-)

[23:21] <jnthn> oh

[23:21] <jnthn> yeah, that's trickyish :)

[23:21] <jnthn> You can try this:

[23:21] <jnthn> nqp::getattr($obj, $?CLASS, '$!buffer') = '';

[23:21] <jnthn> (where $obj is the object you're populating)

[23:22] <jnthn> It'll already have a container thanks to having done nqp::create

[23:22] <jnthn> So you just grab it and assign to it.

[23:22] <jnthn> So maybe not so trickyish after all :)

[23:28] *** wolfman2000_ joined
[23:30] *** wolfman2000 left
[23:50] *** whiteknight joined
[23:52] <supernovus> Well, it seems really really slow, but connections do seem to be accepted now. They are so slow that mod_scgi times out before the request is received, but that's better than crashing I guess.

[23:52] <diakopter> that's interestingish

[23:52] <jnthn> That's...odd.

[23:53] * jnthn wonders what could be causing connection acceptance to be so slow

[23:54] <jnthn> supernovus: I need to sleep now. Feel free to send a patch or pull request for the fixes so far.

[23:55] <jnthn> supernovus: Would be good to get to the bottom of the slowness.

[23:55] <jnthn> Can hopefully find tuits to help with that in the coming days.

[23:56] <diakopter> jnthn: are bvalues a slushy portion of the spec, or frozen

[23:56] <jnthn> diakopter: bvalues?

[23:57] <diakopter> lol I guess not

[23:57] <jnthn> diakopter: As in, b for bind?

[23:57] <diakopter> yeah at some point I read about bvalues

[23:57] <supernovus> jnthn: Okay, I'll keep testing more. For some reason, the recv() seems to only get the string when the remote connection is closed, so it's not getting the string from apache until apache has timed out... that is definitely weird.

[23:58] <jnthn> diakopter: If so, those were a SMOP idea that I'm not really sure I believe in. Binding in Perl 6 is meant to be performant, and is constrained somewhat to make that possible. So there's no "action at a distance" binding.

[23:58] <jnthn> supernovus: That sounds eerily familiar...

[23:58] <diakopter> jnthn: news to me; it would be good if your last sentences are "binding" canon

[23:58] <jnthn> supernovus: Sadly I can't remember any more, but maybe somebody will read this and do so... :)

[23:58] <supernovus> I tried telnet localhost 8118 and typing the manual QUIT command for the SCGI daemon, and the request was never recv()ed... oO

[23:58] <jnthn> diakopter: :)

[23:59] <supernovus> anyway, I'll send a patch for the IO::Socket::INET changes.

[23:59] <jnthn> Many thanks.

[23:59] <jnthn> And really, sleep...or I'll be doing way too much coffee tomorrow...again :)

[23:59] <diakopter> jnthn: I wish binding/assignment/captures/containers were better explained somewheres

[23:59] <jnthn> night o/

