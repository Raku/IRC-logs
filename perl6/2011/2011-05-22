[00:08] *** ymasory joined
[00:09] <dalek> niecza: 3859825 | sorear++ | lib/ (2 files):

[00:09] <dalek> niecza: Switch BigInteger implementation, reduce Rat literals

[00:09] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3859825130

[00:25] *** donri left
[00:41] *** tyatpi joined
[00:41] *** gbacon_ joined
[00:50] *** Eevee left
[01:35] *** kst left
[01:36] *** bacek left
[01:39] *** Eevee joined
[01:40] *** bacek joined
[01:43] *** eternaleye left
[01:43] *** PZt left
[01:43] *** eternaleye joined
[01:46] *** kst joined
[01:46] <dalek> niecza: 82e9ec8 | sorear++ | lib/ (2 files):

[01:46] <dalek> niecza: Add coercions from new numbers to double and bool

[01:46] <dalek> niecza: review: https://github.com/sorear/niecza/commit/82e9ec8daf

[01:50] *** bacek left
[01:58] *** bacek joined
[01:58] *** PZt joined
[02:02] *** Moukeddar joined
[02:16] *** dayangkun joined
[02:17] *** Moukeddar left
[02:48] *** dayangkun left
[02:49] *** silug joined
[02:56] <sorear> rakudo: say (6 / 3).WHAT

[02:56] <p6eval> rakudo 4398a2: OUTPUT«Rat()␤»

[02:56] <sorear> Is this correct?

[02:56] *** aks joined
[02:57] <sorear> welcome, aks.  New here?

[02:57] <Garda> hugme: hug sorear 

[02:57] <Garda> no hugme bot?

[03:01] *** lue joined
[03:01] *** aks left
[03:04] *** dalek left
[03:05] *** p6eval left
[03:06] *** silug left
[03:08] *** sorear left
[03:08] *** diakopter left
[03:08] *** TimToady left
[03:14] *** sorear joined
[03:15] *** diakopter joined
[03:15] *** TimToady joined
[03:15] *** alester joined
[03:16] *** daxim_ left
[03:19] *** p6eval joined
[03:19] *** ChanServ sets mode: +v p6eval

[03:22] *** gbacon_ left
[03:23] *** Su-Shee_ joined
[03:26] *** am0c left
[03:26] *** Su-Shee left
[03:31] <sorear> my biggest complaint with C# is a failure to borrow C++'s functional cast syntax

[03:33] *** tyatpi left
[03:38] *** am0c joined
[03:41] *** thou left
[03:45] *** zorgnax joined
[03:55] <sorear> rakudo: say 5i % 2i

[03:55] <p6eval> rakudo 4398a2: OUTPUT«modulus (Complex % Complex) not defined␤»

[03:55] <sorear> rakudo: say 5i % 2

[03:55] <p6eval> rakudo 4398a2: OUTPUT«modulus (Complex % Int) not defined␤»

[04:04] *** kst` joined
[04:05] *** kst left
[04:07] *** kst`` joined
[04:08] *** kst` left
[04:24] *** tyatpi joined
[04:29] *** tyatpi left
[04:32] <moritz> \o

[04:33] *** hugme joined
[04:33] *** ChanServ sets mode: +v hugme

[04:33] <moritz> hugme: hug me

[04:33] * hugme hugs moritz

[04:38] <sorear> odd

[04:38] <sorear> dalek quit for no reason

[04:38] *** dalek joined
[04:38] *** ChanServ sets mode: +v dalek

[04:54] <dalek> niecza: 9788237 | sorear++ | lib/ (3 files):

[04:54] <dalek> niecza: Secondary fixes revealed by (regression testing)++

[04:54] <dalek> niecza: review: https://github.com/sorear/niecza/commit/97882373c9

[05:05] <sorear> pugs: FatRat

[05:05] <p6eval> pugs: OUTPUT«*** No such subroutine: "&FatRat"␤    at /tmp/pEkApilTGL line 1, column 1 - line 2, column 1␤»

[05:05] <sorear> pugs: Rat

[05:05] <p6eval> pugs:  ( no output )

[05:07] <sorear> no /FatRat/ in my mu checkout either

[05:07] <moritz> FatRat is much newer than pugs' last patches

[05:07] <sorear> does any implementation except niecza have it yet?

[05:08] <moritz> no

[05:09] <sorear> \o/

[05:09] *** satyavvd joined
[05:09] <sorear> I guess?

[05:10] * sorear still needs to make niecza's FatRat and Complex types usable

[05:23] *** mtk left
[05:25] *** alester left
[05:29] <dalek> niecza: b48708f | sorear++ | lib/Builtins.cs:

[05:29] <dalek> niecza: Make -, *, /, % type-aware

[05:29] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b48708fb30

[05:29] <sorear> niecza: say 39549590295082340582305802338 + 29349934

[05:29] <p6eval> niecza v5-37-g9788237: OUTPUT«39549590295082340582335152272␤»

[05:33] *** envi joined
[05:33] *** mtk joined
[05:46] <dalek> niecza: 0346395 | sorear++ | lib/Builtins.cs:

[05:46] <dalek> niecza: Type-aware comparison operators

[05:46] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0346395b2d

[05:59] <dalek> niecza: 4c03af8 | sorear++ | lib/ (3 files):

[05:59] <dalek> niecza: Remove many superfluous uses of Num from the C# code

[05:59] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4c03af8ed6

[06:04] *** silug joined
[06:05] *** jaldhar left
[06:05] *** f00li5h left
[06:05] *** jaldhar joined
[06:08] *** nymacro joined
[06:20] *** jaldhar left
[06:23] *** jaldhar joined
[06:32] <tadzik> phenny: tell jnthn t/p6regex/01-regex.t fail: http://wklej.org/id/533239/

[06:32] <phenny> tadzik: I'll pass that on when jnthn is around.

[06:42] *** birdwindupbird joined
[06:47] *** birdwindupbird left
[06:51] *** _jaldhar joined
[06:52] *** kuku_ joined
[06:52] *** jaldhar left
[06:52] *** kuku_ is now known as birdwindupbird

[06:55] *** silug left
[06:57] <sorear> niecza: say ((1 / 0x1_0000_0000) * (1 / 0x1_0000_0000))

[06:57] <p6eval> niecza v5-40-g4c03af8: OUTPUT«5.42101086242752E-20␤»

[06:58] <sorear> niecza: given ((1 / 0x1_0000_0000) * (1 / 0x1_0000_0000)) { .say; .WHAT.say }

[06:58] <p6eval> niecza v5-40-g4c03af8: OUTPUT«5.42101086242752E-20␤Num()␤»

[06:58] <sorear> niecza: given ((FatRat.succ / 0x1_0000_0000) * (1 / 0x1_0000_0000)) { .say; .WHAT.say }

[06:58] <p6eval> niecza v5-40-g4c03af8: OUTPUT«1/18446744073709551616␤FatRat()␤»

[06:58] <sorear> \o/

[07:00] *** _jaldhar left
[07:00] *** _jaldhar joined
[07:05] <sorear> moritz, diakopter: Would you mind if I ran a continuous integration script on host04?  (it would basically be like what p6eval is already doing, except also running spectests and the bootstrappability test and reporting the results)

[07:08] *** Trashlord left
[07:12] *** molaf_ left
[07:14] *** Trashlord joined
[07:17] *** Garda left
[07:21] *** Yappoko__ left
[07:21] *** Yappoko__ joined
[07:22] *** satyavvd left
[07:22] *** satyavvd joined
[07:36] *** Trashlord left
[07:37] *** Trashlord joined
[07:48] *** satyavvd left
[07:48] *** _buno_ joined
[07:49] *** _buno_ left
[07:51] *** nymacro left
[07:51] *** nymacro joined
[07:51] *** Trashlord left
[07:54] *** Su-Shee_ is now known as Su-Shee

[07:54] *** Trashlord joined
[07:59] *** Garda joined
[08:12] *** wamba joined
[08:21] *** satyavvd joined
[08:24] *** satyavvd_ joined
[08:24] *** satyavvd left
[08:37] <moritz> sorear: just take care of load/memory usage

[08:38] <dalek> specs: e1801df | moritz++ | S05-regex.pod:

[08:38] <dalek> specs: [S05] fix a fossile (though the whole section looks pretty fossile-ish)

[08:38] <dalek> specs: review: https://github.com/perl6/specs/commit/e1801df93c

[08:38] <dalek> specs: b52825b | moritz++ | S32-setting-library/Exception.pod:

[08:38] <dalek> specs: [Exceptions] stub out Failure and Backtrace

[08:38] <dalek> specs: review: https://github.com/perl6/specs/commit/b52825bf5f

[08:42] *** satyavvd_ left
[08:43] *** kjeldahl joined
[09:01] *** Garda left
[09:09] *** envi left
[09:14] *** skangas left
[09:37] *** skangas joined
[09:38] *** silug joined
[09:42] *** skangas_ joined
[09:42] *** skangas_ left
[09:45] *** silug left
[09:46] *** silug joined
[09:50] *** silug left
[09:50] *** silug joined
[09:52] *** Mowah joined
[10:07] *** dudulz joined
[10:12] <tadzik> hrm. Actions.pm is Nqp, not Perl6, right?

[10:12] <sorear> right

[10:13] <tadzik> fun. So writing action methods for Rakudo will be a bit different than for a Perl 6 module

[10:14] *** silug left
[10:14] <sorear> btw

[10:14] *** silug joined
[10:14] <jnthn> tadzik: Yeah, but it's a subset.

[10:14] <phenny> jnthn: 06:32Z <tadzik> tell jnthn t/p6regex/01-regex.t fail: http://wklej.org/id/533239/

[10:14] <sorear> niecza: my Int $x = 495394393904582058028505238; $x++; say $x

[10:14] <p6eval> niecza v5-40-g4c03af8: OUTPUT«495394393904582058028505239␤»

[10:15] <sorear> perl6: my Int $x = 495394393904582058028505238; $x++; say $x

[10:15] <tadzik> jnthn: yeah, I know that. But in Actions.pm I'm no longer doing Pod6::Block.new, but some Past::Op instead, creating the Pod6::Block, si?

[10:15] <p6eval> pugs, niecza v5-40-g4c03af8: OUTPUT«495394393904582058028505239␤»

[10:15] <p6eval> ..rakudo 4398a2: OUTPUT«Type check failed for assignment␤    Container type: Int␤               Got: Num␤  in '&infix:<=>' at line 1␤  in main program body at line 7654:CORE.setting␤»

[10:15] <tadzik> sorear: nice!

[10:16] <jnthn> tadzik: I can't answer that without knowing more about what you want to do.

[10:17] <tadzik> jnthn: I need to move this https://github.com/tadzik/gsocmess/blob/master/lib/Pod6/Actions.pm#L40 to Rakudo Actions.pm, and likely push those Blocks to some $POD variable

[10:18] <sorear> tadzik: it has Rat and FatRat and Complex too, though the latter two are hard to use.

[10:18] <jnthn> tadzik: What's the intention? That these things are available at runtime?

[10:19] <tadzik> jnthn: yes, I need to test them

[10:19] <tadzik> test that the parsing did a good job

[10:19] <tadzik> jnthn: I have the tests for the outside code, but I'd like to know if that still works when I moved it inside Rakudo

[10:20] <jnthn> tadzik: Is the POD normally made available at runtime?

[10:20] <tadzik> jnthn: yes, through a $=POD variable

[10:21] <jnthn> tadzik: Where can I read more about it?

[10:21] <tadzik> jnthn: S26

[10:25] <jnthn> tadzik: OK. So $=POD is essentially per compilation unit, it seems.

[10:26] <tadzik> I think so

[10:26] <jnthn> std: say $=POD;

[10:26] <p6eval> std 4b1b100: OUTPUT«ok 00:01 113m␤»

[10:26] <jnthn> std: say $=WTF;

[10:26] <p6eval> std 4b1b100: OUTPUT«ok 00:01 113m␤»

[10:26] <jnthn> hm :)

[10:26] <sorear> $=WTF is totally legit

[10:26] <jnthn> sorear: What does it mean?

[10:26] <sorear> it refers to a =begin WTF block in the file

[10:26] <sorear> or something like that

[10:27] <sorear> S29 was rather handwavey on the subject iirc

[10:27] *** nymacro left
[10:27] <jnthn> sorear: And...if there's more than one of those?

[10:27] * jnthn doesn't see any $=... variables other than $=POD in S26.

[10:27] <sorear> ISTR they go into an array

[10:27] <tadzik> S26 mentions $= 8 times, and never explains fully what it is

[10:28] <jnthn> ah

[10:28] <jnthn> Magical file-scoped values live in variables with a C<=> secondary

[10:28] <jnthn> sigil. 

[10:28] <jnthn> (says S02)

[10:31] *** silug left
[10:32] *** silug joined
[10:33] *** wamba left
[10:39] <tadzik> yay, I didn't break the spectest

[10:39] <sorear> \o/

[10:46] <tadzik> I'm not sure '=begin item ACCEPTS()' is a valid Pod

[10:47] <tadzik> either '=item ACCEPTS() – bla bla' or '=begin item\nACCEPTS()\nbla bla'

[10:48] <dalek> niecza: b2c61f5 | sorear++ | / (6 files):

[10:48] <dalek> niecza: Implement .Rat

[10:48] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b2c61f510f

[10:49] <tadzik> "Typenames that are entirely lowercase or entirely uppercase are reserved" -- English-o?

[10:51] <sorear> no

[10:52] <tadzik> oh, I fail at reading

[10:52] <tadzik> missed the 'that'

[10:54] <sorear> perl6: my $case = 0.130442081080024.Rat; say "$case.perl() {0e0+$case}"

[10:54] <p6eval> pugs: OUTPUT«*** No such method in class Rat: "&Rat"␤    at /tmp/MX29LwsYOq line 1, column 7-33␤»

[10:54] <p6eval> ..niecza v5-41-gb2c61f5: OUTPUT«686/5259 0.130443050009508␤»

[10:54] <p6eval> ..rakudo 4398a2: OUTPUT«776/5949 0.130442091107749␤»

[10:54] * sorear found a superior algorithm on wikipedia.

[10:55] <sorear> tomorrow: the full set of coercions .FatRat .Num .Complex; Str.Numeric supporting all numeric types; transcedental* functions

[10:56] <sorear> *sqrt isn't transcedental but I don't have a good inclusive term

[10:56] * sorear out

[10:57] *** silug left
[11:01] <dalek> rakudo: 30ebf78 | tadzik++ | src/core/ (2 files):

[11:01] <dalek> rakudo: Remove invalid Pod

[11:01] <dalek> rakudo: 

[11:01] <dalek> rakudo: S26 states:

[11:01] <dalek> rakudo: After the typename, the rest of the C<=begin> marker line is treated as

[11:01] <dalek> rakudo: configuration information for the block. This information is used in

[11:01] <dalek> rakudo: different ways by different types of blocks, but is always specified

[11:01] <dalek> rakudo: using Perl6-ish option pairs.

[11:01] <dalek> rakudo: 

[11:01] <dalek> rakudo: We don't parse the block configuration information yet, plus they're not

[11:01] <dalek> rakudo: needed anyway there.

[11:01] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/30ebf78424

[11:02] <tadzik> s/anyway there/there anyway/, but eh

[11:05] <jnthn> tadzik: Hmm, will have to try and keep your changes regularly merged into nom :)

[11:06] *** Patterner left
[11:06] <tadzik> jnthn: the changes will be in a separate branch

[11:07] *** Psyche^ joined
[11:07] *** Psyche^ is now known as Patterner

[11:10] <tadzik> I think modifying src/core/Something.pm does not cause core.pm to regenerate

[11:10] *** REPLeffect left
[11:13] *** REPLeffect joined
[11:17] *** mj41 joined
[11:29] *** donri joined
[11:46] *** Garda joined
[11:47] <Garda> hey

[11:47] <Garda> how stable is perl6

[11:47] <Garda> I mean, is the language likely to change alot by the time it's released properly?

[11:47] <donri> a lot, not sure, change, surely

[11:48] <sbp> Garda: welcome! I don't think there will be any "released properly"

[11:48] <tadzik> :)

[11:48] <sbp> but as time goes on, less and less gets changed, and more and more gets coded

[11:48] <tadzik> Garda: you can look at how the specification changes and see for yourself how much does it change

[11:48] <sbp> and I think we're very far along that curve. most of the bits you would want to use are "set"

[11:48] *** kcwu left
[11:49] <tadzik> Garda: see https://github.com/perl6/specs/commits/master

[11:49] <sbp> only occasionally have I seen things I'd want to use that are in flux. recent discussions about numerical base conversion for example

[11:49] <Su-Shee> how is a monthly release not "released properly"?! 

[11:49] <sbp> Su-Shee: are there Windows, OS X, and Linux binaries yet? :-)

[11:49] <tadzik> Su-Shee: I'm sure Garda means "a complete PErl6 implementation"

[11:50] <Garda> yea, I meant sorta like when someone blesses it and says, "it's done"

[11:50] <Garda> I don't know

[11:50] <Su-Shee> sdp: strange definition of "released properly"

[11:51] <Su-Shee> Garda: it's blessed plenty. download it, use it, write code. see for yourself if it's useful to you or not.

[11:51] <tadzik> almost everyone is confused :)

[11:51] <Su-Shee> I'm not. ;)

[11:51] <tadzik> yeah, what Su-Shee says. Try for yourself and see if it fits, don't wait for the blessing

[11:51] <sbp> *sbp. and we all have our little mental milestones

[11:53] <Su-Shee> sometimes I think people _want_ design by commitee and a stamp of approval ;) (which only some languages have anyways.. :)

[11:53] <tadzik> yeah

[11:54] <sbp> some are more mental than others

[11:54] <tadzik> I think masak should be our comitee, he's experienced in declaring things Official and Complete, and no one ever opposes

[11:54] <sbp> seconded

[11:54] <tadzik> we should ask him to declare Perl 6 Properly Released

[11:55] <Su-Shee> well let me put it that way: if browsers and web developers would actually _wait_ until the w3c approves anything - I think we could start using html4 then this year or last year. ;) 

[11:55] <tadzik> yay, Rakudo compiles itself!

[11:55] <sbp> you think HTML 4.01 implementation is complete? how quaint

[11:55] <tadzik> I mean, the kind of Rakudo I mangled

[11:55] <sbp> —

[11:55] <sbp> <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">

[11:55] <sbp> <title/GS/<body onLoad="document.f.q.focus()"<form

[11:55] <sbp> action="http://google.com/search" name=f/<p/<input

[11:55] <sbp> name=q< type=submit>//

[11:55] <sbp> —

[11:56] <sbp> see how many browsers properly render that. valid HTML 4.01

[11:56] <Su-Shee> sbp: that was my way of saying that I give a shit if or if it is not. the real world is somewhere else anyways.

[11:56] <sbp> using various SGML shortcuts that they left in for no obvious reason

[11:56] <sbp> I'm arguing the same point of view more vehemently

[11:57] <sbp> :-)

[11:57] <Su-Shee> yes that was my point. who gives a shit if someone "officially" released perl 6 at some random level everyone defines differently for himself instead of just trying and using it?

[11:58] <sbp> it's a tax that perl6, as the first truly new popular 21st century language, has to inevitably pay...

[11:58] <tadzik> people who still look at Perl6 like how dog looks at a hedgehog. I think there're plenty of them actually, I can understand that

[11:58] <Su-Shee> from a ceremonial point of view it's released very properly and very officially with a new baptism every month :)

[11:59] <Su-Shee> right now, it's elitist and very much not popular. ;)

[11:59] <tadzik> Same as people won't stop laughing at GNU/Hurd until the Hurd people say "yay, we're done!"

[11:59] <sbp> . o O ( another mental milestone: a better package manager than gem and easy_install... )

[12:00] <tadzik> hey, what's wrong with panda? :)

[12:00] <Su-Shee> tadzik: I agree with most of those people, btw. If it wasn't for my overall never dying love for perl, I wouldn't have looked at perl 6 again at least 4 years ago, basically. 

[12:01] <Su-Shee> but I'm just a user, I look differently at languages.

[12:02] <sbp> tadzik: good question, actually

[12:02] <sbp> I will attempt to go through the "doing stuff with perl6" process from scratch

[12:03] <tadzik> sbp: I'd *very* appreciate a GH ticket for every single thing you miss

[12:03] <sbp> let's see what bits can be improved and whatnot

[12:03] * sbp tries to make sure all old perl6 bits are properly removed first

[12:03] *** skangas left
[12:04] <sbp> . o O ( hmm, why do I have two versions of ffmpeg... )

[12:04] <sbp> okay, going to start with the wiki page I made that everybody forgot about:

[12:04] <sbp> https://github.com/perl6/misc/wiki/Get-Into-Perl6

[12:05] <sbp> notice that February and March tarballs are missing from the Rakudo Star downloads list

[12:05] <sbp> did pmichaud go on holiday?

[12:05] <tadzik> no, Star stopped being monthly released

[12:05] * sbp becomes the 433rd downloader of the April R* release

[12:06] <sbp> oh? why? and it's going again now?

[12:06] <sbp> "256MB is known to be too small for building Rakudo"

[12:06] <sbp> lucky I'm not doing this on my server...

[12:07] <tadzik> there is an announcement somewhere. Basically, Star is released when something significant happens

[12:07] <Su-Shee> I thought it's monthly rakudo and quarterwise rakudo*?

[12:07] <tadzik> dalek, wakey wakey

[12:07] <sbp> ah, okay

[12:07] <sbp> I'm going to do this with my normal procedure, installing into ~/usr/opt

[12:07] <sbp> just to be tricky

[12:08] <sbp> README doesn't note whether ICU 4.6 or 4.8 is to be preferred, or which versions at all are compatible and which aren't. I'll assume that 4.6.1 will work

[12:09] <sbp> a direct link to http://site.icu-project.org/download/46#ICU4C-Download in the README would be nice

[12:09] <sbp> (binaries for everything except OS X, heh)

[12:09] * sbp gets http://download.icu-project.org/files/icu4c/4.6.1/icu4c-4_6_1-src.tgz

[12:11] <sbp> icu4c-4_6_1-src.tgz rudely untars to icu/ rather than icu4c-4_6_1-src/

[12:11] <sbp> readme.html? wonderful...

[12:12] <sbp> "How To Download the Source Code", heh

[12:12] <sbp> wtf is this rubbish:

[12:12] <sbp> —

[12:12] <sbp> Depending on the platform and the type of installation, we recommend a small number of modifications and build options.

[12:12] <sbp> Namespace: By default, unicode/uversion.h has "using namespace icu;" which defeats much of the purpose of the namespace. (This is for historical reasons: Originally, ICU4C did not use namespaces, and some compilers did not support them. The default "using" statement preserves source code compatibility.)

[12:12] <sbp> We recommend you turn this off via -DU_USING_ICU_NAMESPACE=0 or by modifying unicode/uversion.h:

[12:12] <sbp> —

[12:13] <sbp> it wants me to patch the default charset on OS X, so I suppose I'll do that

[12:14] <sbp> patch says:

[12:14] <sbp>  #ifndef U_CHARSET_IS_UTF8

[12:14] <sbp> -#   define U_CHARSET_IS_UTF8 0

[12:14] <sbp> +#   define U_CHARSET_IS_UTF8 1

[12:14] <sbp>  #endif

[12:14] <sbp> but my source says this:

[12:14] <sbp> #ifndef U_CHARSET_FAMILY

[12:14] <sbp> #   define U_CHARSET_FAMILY 0

[12:14] <sbp> #endif

[12:14] *** MayDaniel joined
[12:14] <sbp> oh, the patch offset is wrong

[12:15] <sbp> line 185 in my version. way to update the readme,

[12:15] <sbp> but done, anyway

[12:15] <sbp> "It may make sense to build the ICU code into static libraries (.a) rather than shared libraries (.so/.dll)." but it doesn't say where or when this might make sense

[12:16] <sbp> no instructions for install on OS X, going to use the "UNIX" instructions

[12:17] <sbp> phew. icu/readme.html#HowToConfigureICU says to try --help on this pre-configure script

[12:17] <sbp> idea seems to be ./runConfigureICU MacOSX for me

[12:17] <sbp> I note there's no --prefix option

[12:18] <sbp> wait, now it says to run make

[12:18] <sbp> but I didn't pass it a --prefix!

[12:18] <sbp> perhaps [ configurearg ... ] includes flags?

[12:19] <sbp> yep, this worked:

[12:19] <sbp> $ ./runConfigureICU MacOSX --prefix=$HOME/usr/opt/rakudo

[12:19] <sbp> export CPP= CC= CXX= CPPFLAGS= CFLAGS= -O2 CXXFLAGS= -O2 LDFLAGS= MAKE=

[12:19] <sbp> Running ./configure  --prefix=/Users/sbp/usr/opt/rakudo for MacOS X (Darwin) using the GNU C++ compiler

[12:19] <sbp> so when they say "arg", they really mean "flag or arg"

[12:20] <sbp> (making rakudo use icu will be fun)

[12:20] *** mj41 left
[12:22] *** snearch joined
[12:25] * sbp skips make check

[12:25] *** Moukeddar joined
[12:25] *** Moukeddar left
[12:25] *** wamba joined
[12:25] <sbp> okay, now it says:

[12:25] <sbp>     $ perl Configure.pl --gen-parrot

[12:25] <sbp>     $ make

[12:25] <sbp>     $ make install

[12:25] <sbp> which again has no prefix, so I'll try passing --help to Configure.pl

[12:26] <sbp> $ perl --version

[12:26] <sbp> This is perl 5, version 12, subversion 2 (v5.12.2) built for darwin-2level

[12:26] <sbp> no --prefix option

[12:26] <sbp> there's also no way to point to where ICU is, despite me installing it in a non-standard location

[12:27] * sbp runs what it says to run anyway

[12:29] <sbp> seems like it's only going to build locally, but it would be nice if it made that clear before the install lines

[12:30] <sbp> not clear what make install will do, whether it will use /usr/local etc.

[12:30] <sbp> oh, silly me. a little bit further down:

[12:30] <sbp> The "--prefix=" option can be provided to Configure.pl

[12:30] <sbp> to change the location of the install directory.

[12:30] <sbp> despite the fact that Configure.pl doesn't list --prefix!

[12:32] <sbp> so, $ perl Configure.pl --prefix=$HOME/usr/opt/rakudo --gen-parrot

[12:33] <Garda> how can I check if a hash exists

[12:33] *** dudulz left
[12:34] <Garda> if exists %people{"bob"}

[12:37] <Su-Shee> the hash or if the key exists or if the key exists and has a value? :)

[12:39] <sbp> Garda: https://github.com/perl6/roast/blob/master/S32-hash/exists.t

[12:39] <sbp> exists %h1: 'a'

[12:39] <sbp> %h1.exists('a')

[12:40] <sbp> there's also defined(...)

[12:40] <sbp> but I assume you want .exists

[12:41] *** [Coke] left
[12:41] <jnthn> rakudo: my %h = a => 1; say %h.exists('a'); say %h.exists{'b')

[12:41] <p6eval> rakudo 30ebf7: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<{ }>, couldn't find final '}' at line 22␤»

[12:41] *** MayDaniel left
[12:42] <jnthn> rakudo: my %h = a => 1; say %h.exists('a'); say %h.exists('b')

[12:42] <p6eval> rakudo 30ebf7: OUTPUT«Bool::True␤Bool::False␤»

[12:42] <Garda> sbp, thanks, I'm looking at it now

[12:43] *** [Coke] joined
[12:44] <sbp> heh: src/core/YOU_ARE_HERE.pm

[12:44] <Garda> Su-Shee, wanted to know if a key exists in a hash I know I have created

[12:44] <Garda> sbp, thanks, just what I wanted

[12:45] <sbp> :-)

[12:48] <sbp> perhaps it would be a good idea to get a quantitative estimate of how much of the synopses are implemented in rakudo, and then set an arbitrary large percentage figure before having TT make some kind of super announcement that perl6 is GO, GO, GO

[12:48] <sbp> hits 98% coverage, rakudo gets slashdotted, September of No End starts for perl6

[12:48] <sbp> make and make install done

[12:49] <sbp> lots of binaries

[12:49] <sbp> $ ls

[12:49] <sbp> ./			parrot-prove*		pbc_merge*

[12:49] <sbp> ../			parrot_config*		pbc_to_exe*

[12:49] <sbp> ops2c*			parrot_debugger*	perl6*

[12:49] <sbp> panda*			parrot_nci_thunk_gen*	ufo*

[12:49] <sbp> parrot*			pbc_disassemble*	ufobuilder*

[12:49] <sbp> parrot-nqp*		pbc_dump*

[12:49] <sbp> notice that panda is in there already

[12:49] * sbp wonders which ones to link in ~/usr/bin, always likes to play the minimalist game

[12:50] * sbp plumps for perl6 and panda

[12:50] <sbp> $ perl6 --version

[12:50] <sbp> This is Rakudo Perl 6, version 2011.04 built on parrot 3.3.0

[12:50] <sbp> Copyright 2008-2011, The Perl Foundation

[12:50] <sbp> now going to try installing JSON::Tiny

[12:51] * sbp tries panda --help

[12:51] <sbp> funny, using --help made it download into ~/.panda/projects.json

[12:51] <phenny> sbp: 12:51Z <Morbus> tell sbp http://news.nationalgeographic.com/news/2011/05/110520-area-51-secret-hid-craft-base-declassified-a-12-plane/

[12:51] <tadzik> oh, fun

[12:52] <sbp> $ time panda help

[12:52] <sbp> Usage: panda [command [args]]

[12:52] <sbp> ...

[12:52] <sbp> panda help  1.98s user 0.13s system 71% cpu 2.930 total

[12:52] <sbp> why does it take 1.98 seconds to print the help message?

[12:52] <sbp> I guess it's looking online to try to update projects.json each time I run it?

[12:52] <tadzik> how about "Rakudo is slow"? :)

[12:52] <sbp> even if I'm just running panda help?

[12:53] <tadzik> it shouldn't, I'll take a peek

[12:53] <tadzik> yeah, the panda object is initialized before MAIN

[12:53] <sbp> right. even though rakudo is slow, I'm not sure printing a few lines to stdout should take 1.98 seconds... :-)

[12:54] * sbp now tries $ panda list | grep -i JSON

[12:54] <tadzik> the bin/panda script is a bit stupid. I was trying to reuse as much code as possible for the REPL and for the command-line args, and it ended up being crap :)

[12:54] <tadzik> I'll fix it today after dinner

[12:54] <sbp> ah, I see. thanks!

[12:54] <sbp> that's good service :-)

[12:55] <tadzik> btw, I see that dalek does not report my new branch but rakudo/gsoc-podparser is ready for testing :)

[12:55] <sbp> it took 12.91 seconds to search for JSON in the list, might be some room for improvement there too

[12:55] <sbp> $ time panda list | grep -i JSON

[12:55] <sbp> JSON::Tiny          	

[12:55] <sbp> JSON::RPC           	

[12:55] <sbp> panda list  12.91s user 0.45s system 64% cpu 20.639 total

[12:55] <sbp> grep -i JSON  0.00s user 0.00s system 0% cpu 20.634 total

[12:55] * sbp thwaps dalek

[12:56] <sbp> is there no way to see what packages are currently installed?

[12:56] <tadzik> it is

[12:56] <tadzik> list would print [installed] or [installed as a dependency] or something like this

[12:56] <sbp> because the fact that it downloaded a projects.json file makes me wonder whether there isn't some sort of JSON package installed already

[12:56] <tadzik> but only if it's installed by panda

[12:56] <tadzik> JSON is a panda dependency, yes

[12:56] <sbp> ah, so grepping for "install" should work?

[12:56] <sbp> but JSON won't show up because panda didn't install it?

[12:57] <sbp> it's just included in rakudo?

[12:57] <tadzik> if you installed it by panda. Is that Star, or did you bootstrap panda yourself?

[12:57] <sbp> Star

[12:57] <tadzik> in Rakudo no, in star yes

[12:57] <tadzik> you can run 'panda install Pies' and it will reinstall all the deps as well

[12:57] <tadzik> now when I think about it, 'panda' is less confusing and more recognized

[12:57] <sbp> what would happen now if I used panda to install JSON::Tiny?

[12:58] <tadzik> it will install JSON::Tiny to your ~/.perl6/lib

[12:58] <sbp> but perl6 won't use it?

[12:59] <tadzik> it will, why not?

[12:59] <tadzik> it depends what's higher in PERL6LIB

[12:59] <tadzik> kernel 2.6.39 is acting silly

[13:00] <sbp> how do I print the source that a module was loaded from?

[13:00] <sbp> can't see anything in the S11 test suite

[13:00] <tadzik> I don't think you can

[13:01] <tadzik> or I don't understand

[13:01] <sbp> well, I can get the INC list:

[13:01] <sbp> $ perl6 -e 'say join(":", @*INC)'

[13:02] <sbp> /Users/sbp/.perl6/lib:/Users/sbp/usr/opt/rakudo/lib/parrot/3.3.0/languages/perl6/lib:.

[13:02] <sbp> but say I didn't know the INC list, or wanted to test

[13:02] <sbp> I do 'use JSON::Tiny'

[13:02] <sbp> then I want to say some attribute of JSON::Tiny to see where it's from

[13:02] <sbp> or something deep in the module import bowels

[13:04] <tadzik> ah

[13:05] *** perlmonkey joined
[13:07] <sbp> . o O ( plan 3? )

[13:07] <tadzik> still far to plan 9 (ha ha!)

[13:07] <sbp> hehe

[13:07] <sbp> no idea on printing a module source then?

[13:07] <sbp> been through all *.t files in S11-modules now

[13:07] *** wamba left
[13:07] <tadzik> nope

[13:08] <tadzik> but, it's achieveable

[13:08] <tadzik> 1) File::Find the module in @*INC, 2) slurp it :)

[13:09] <sbp> hmm. well isn't the provenance metadata saved internally?

[13:09] <perlmonkey> hi

[13:09] <sbp> hi perlmonkey

[13:09] <sbp> anyway, I'll try installing a module

[13:09] <perlmonkey> if I'm iterating over a hash of hashes, is this correct way: for my $day (sort (keys(%{$D1}))) {

[13:09] <sbp> https://github.com/colomon/Math-Prime/ seems a good one

[13:09] <jnthn> star: use JSON::Tiny; say %*INC.perl

[13:09] <p6eval> star 2011.04: OUTPUT«undef␤»

[13:09] <jnthn> aw.

[13:09] <jnthn> wait, undef?!

[13:10] <jnthn> star: use JSON::Tiny; say %*INC<JSON::Tiny>

[13:10] <p6eval> star 2011.04: OUTPUT«Any()␤»

[13:10] <perlmonkey> http://paste.debian.net/117617/ <-- here is a more complete example

[13:10] <tadzik> perlmonkey: I think you're writing Perl 5 code, this is a Perl 6 channel

[13:11] <perlmonkey> :(

[13:11] <tadzik> you may want to consider asking on #perl-help on irc.perl.org

[13:11] <perlmonkey> ok sorry

[13:11] <sbp> —

[13:11] <sbp> $ panda install Math::Prime

[13:11] <sbp> ==> Fetching Math::Prime

[13:11] <sbp> ==> Building Math::Prime

[13:11] <sbp> ==> Testing Math::Prime

[13:11] <sbp> Unknown option: e

[13:11] <sbp> Tests failed for Math::Prime

[13:11] <sbp> —

[13:11] <tadzik> eww, please paste somewhere else

[13:11] <sbp> no, heh

[13:11] *** perlmonkey left
[13:11] <tadzik> anyway, you're running Mac OSX, aren't you?

[13:11] <sbp> never understood that "etiquette", never going to follow it without a decent argument for it :-)

[13:11] <sbp> yep

[13:11] *** satyavvd joined
[13:12] <tadzik> I think it's because the bigger the paste, the harder it gets to follow a discussion

[13:12] *** mtk left
[13:12] <sbp> yep, that's certainly true when lots of people are talking or when the pastes are large

[13:12] <tadzik> sbp: your prove, or TAP::Harnes, I never know, is probably quite old

[13:13] <sbp> but I think it's okay to use discretion in all cases, and I don't think a paste of the size above is at all damaging to the integrity of the communication here :-)

[13:13] <sbp> hmm, okay. what version is likely to be required, and how can I find out what I have vs. what I need?

[13:14] <Su-Shee> it makes people having to read and parse utterly useless stuff in the backlog. the developers read each other due to timezones differences.

[13:14] <sbp> yep, but when a paste is clearly delimited it's not hard to skip it

[13:14] <sbp> and anyway, we've expended more lines now talking *about* the paste than the paste itself spanned

[13:14] <sbp> whereas the paste itself was on topic, and the conversation about it is not

[13:15] <Su-Shee> and who are you to decide what's hard to skip and what not for _all_ others?

[13:15] <sbp> as I say, it's down to discretion. and my belief based on ten years of hardcore irc usage is that a paste of that size poses no problem. if somebody has a very compelling argument to the contrary then of course I'll update my usage patterns based on that

[13:16] <Su-Shee> well you asked for an explanation, you got several, you're refusing because you don't like them. hence the conversation. ;)

[13:16] <sbp> the explanations conflict with my experience

[13:16] <sbp> they seem de jure, whereas my experience is de facto

[13:16] <Su-Shee> well I have 15 years of hardcore irc usage if it comes down to that and _please_ just accept the culture of a channel. which your decade of irc should tell you anyways.

[13:17] <sbp> I think it's worth going against the grain to dispell dogmata of these kinds

[13:17] <Su-Shee> then enjoy.

[13:17] *** Su-Shee left
[13:18] <sbp> peculiar

[13:18] <sbp> (sorry about that, didn't predict that effect)

[13:19] <sbp> tadzik: "Unable to find module 'TAP::Harness' in the @*INC directories." (same with Harnes)

[13:20] <sbp> I don't know what prove is, and it's hard to search for

[13:20] *** dual left
[13:20] <sbp> unless you mean standard /usr/bin/prove, which actually seems likely

[13:20] <arnsholt> which prove in a terminal prints the full path to the command

[13:20] <arnsholt> (prove is the program used to run and collate results from tests)

[13:21] <sbp> thanks. its --version is reporting: prove v2.64, using Test::Harness v2.64 and Perl v5.10.0

[13:21] <arnsholt> And the version of prove installed with system OS X is from roughly the lower neolithic IIRC

[13:21] <sbp> hehe. right, my local perl installation is 5.12

[13:21] <sbp> so I'll try updating that, thanks

[13:21] * sbp looks into it

[13:22] <arnsholt> Is it from MacPorts, or is it system Perl?

[13:22] <sbp> the 5.10 is system perl. the 5.12 is manually built and installed from source

[13:22] *** mtk joined
[13:22] <arnsholt> In any case, the port you're looking for is p5-test-harness

[13:23] <sbp> ah, I have it in ~/usr/opt/perl5.12/bin but it's not linked

[13:23] <tadzik> sbp: yeah, I mean the standard prove

[13:23] <sbp> one of the drawbacks of the minimalism

[13:23] <sbp> tadzik: when panda failed, would it have left stuff lying around that needs to be cleaned?

[13:24] <sbp> or when I do install again, will it be okay with the previous failed installation attempt?

[13:24] <arnsholt> Yeah, put that in your $PATH (or replace the system one with a symlink to that, or whatever) and it'll work

[13:24] <sbp> (reports "TAP::Harness v3.17 and Perl v5.12.2" now)

[13:24] <tadzik> sbp: I think so

[13:24] <tadzik> sbp: well, it can reuse this stuff anyway

[13:24] <arnsholt> Yeah, 3.17 is less ancient

[13:24] <sbp> okay, giving "$ time panda install Math::Prime" a go

[13:25] <sbp> hmm, less ancient... :-)

[13:25] <sbp> it's testing now, so apparently less ancient enough!

[13:25] <arnsholt> Yeah, IIRC that option was renamed in v.3

[13:25] <arnsholt> (I had trouble of a similar nature in a personal project last year)

[13:26] <sbp> does, though, seem to be stuck on "t/01-basic.t .. 1/?"

[13:26] <sbp> perhaps the tests are just intensive though. checking source...

[13:27] <sbp> https://github.com/colomon/Math-Prime/blob/master/t/01-basic.t

[13:27] <sbp> doesn't look like it should be taking this long, guess it's stalled

[13:27] <sbp> oh, wrong

[13:27] <sbp> Succesfully installed Math::Prime. great!

[13:27] <sbp> doing sanity testing now

[13:28] <sbp> works fine. I also note that the README does say "It's still disturbingly slow.", which explains the apparent test stall; I should have looked at the README first

[13:29] <sbp> tadzik: are there packages that can install scripts into bin/ too?

[13:32] *** orafu left
[13:32] *** kcwu joined
[13:35] *** skangas joined
[13:37] <tadzik> sbp: sure

[13:37] <tadzik> like panda

[13:37] *** huf left
[13:37] <tadzik> I think LWP::Simple does it too

[13:37] <sbp> got a good example of one that I could try out? modules.perl6.org doesn't seem to say which on... thanks

[13:38] <tadzik> also, Mandelbrot, ufo, Yapsi

[13:39] <sbp> got an error. http://pastebin.ubuntu.com/611410/

[13:42] * Garda can confirm: perl is awesome! :)

[13:42] <sbp> including perl6? :-)

[13:42] <Garda> so I spent the last 30mins or something writing an elo calculator

[13:42] <Garda> sbp, in perl6 :)

[13:43] <sbp> elo? this? http://en.wikipedia.org/wiki/Elo_rating_system

[13:43] <tadzik> Garda: nice :)

[13:44] <tadzik> sbp: funny

[13:44] <tadzik> reproducable?

[13:44] <Garda> sbp, yea, it takes a results.txt file

[13:45] <sbp> tadzik: running again now

[13:45] <Garda> with names listed as Foo:Bar:0.5

[13:45] <sbp> Garda: source online anywhere?

[13:45] <Garda> and calculates everyone elo score

[13:45] <Garda> sbp, give me a few mins to finish it

[13:45] <Garda> i'll pastebin it somewhere

[13:45] <tadzik> Garda: you may want to make a module for this

[13:45] <sbp> thanks

[13:45] <sbp> tadzik: new error this time

[13:45] <sbp> http://pastebin.ubuntu.com/611413/

[13:46] <tadzik> something like http://search.cpan.org/~tbone/Chess-Elo-1.0a/lib/Chess/Elo.pm

[13:46] * tadzik grumbles

[13:46] <tadzik> sbp: have you installed anything with dependencies before?

[13:46] <tadzik> did the tests pass for panda?

[13:47] <sbp> I didn't run make check before installing panda

[13:47] *** woosley joined
[13:47] *** am0c left
[13:47] <sbp> note that panda was just part of rakudo star, I didn't even know it was included

[13:48] <sbp> lemme know if there's any diagnostic I can run now

[13:49] *** gbacon left
[13:49] <tadzik> you can clone the panda repo and run 'ufo && make test', assuming you have ufo installed

[13:49] *** pernatiy_ joined
[13:51] <tadzik> Pies is now renamed to Panda

[13:51] <sbp> yep, will do

[13:51] *** pernatiy left
[13:52] <sbp> failed, error message coming up

[13:52] <tadzik> the same one?

[13:52] <sbp> http://pastebin.ubuntu.com/611415/

[13:52] <sbp> nope. is there some specific directory I have to run that in?

[13:52] <sbp> it can't find t/ basically

[13:52] <tadzik> que?

[13:53] <tadzik> in the directory you cloned the repo to

[13:54] <dalek> ecosystem: f128f99 | tadzik++ | META.list:

[13:54] <dalek> ecosystem: Pies in now panda

[13:54] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/f128f991bf

[13:54] <tadzik> bleh, typo

[13:54] <sbp> in rakudo/, or in modules/Pies/ or what?

[13:54] *** huf joined
[13:54] <tadzik> git clone git://github.com/tadzik/panda; cd panda; ufo; make test

[13:55] <sbp> doing that now. note that my panda is from rakudo star of course though, so probably older

[13:55] <sbp> http://pastebin.ubuntu.com/611416/

[13:55] <sbp> another fail. gotta run for a bit now, back in 30-60 mins

[13:57] <tadzik> aaarrr

[13:58] <dalek> star: 4268181 | tadzik++ | / (2 files):

[13:58] <dalek> star: Track the Pies -> panda rename

[13:58] <dalek> star: review: https://github.com/rakudo/star/commit/4268181064

[13:58] <dalek> modules.perl6.org: e3ddd2f | tadzik++ | web/index.tmpl:

[13:58] <dalek> modules.perl6.org: Track the Pies -> panda rename

[13:58] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/e3ddd2f302

[14:01] *** am0c joined
[14:02] *** silug joined
[14:04] <dalek> perl6.org: 290a262 | tadzik++ | source/ (2 files):

[14:04] <dalek> perl6.org: Pies is now panda

[14:04] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/290a262ca0

[14:07] *** silug left
[14:07] <Garda> sbp, it's really simple:

[14:07] <Garda> http://pastebin.ca/2066882

[14:07] <Garda> http://pastebin.ca/2066883

[14:07] <Garda> the second file is an input file

[14:08] <Garda> it wants to be called results.txt

[14:08] <dalek> star: ff57d8f | tadzik++ | skel/build/Makefile.in:

[14:08] <dalek> star: Remove the Pies leftovers

[14:08] <dalek> star: review: https://github.com/rakudo/star/commit/ff57d8f91a

[14:08] <tadzik> Garda: what is the purpose of line #30 in the first one?

[14:09] <Garda> none: sorry, leftover from something else

[14:09] <tadzik> also, you can now @results.push(). Looks nice :)

[14:10] <Garda> how would you have appended to an array before?

[14:11] *** woosley left
[14:11] <Garda> oh, wait, I did it the before way?

[14:11] <tadzik> push(@results, $foo)... or push $foo, @results? I never know, that's why I like the method call :)

[14:11] <tadzik> but whatever works for you, TIMTOWTDI

[14:12] <Garda> you're right, much better

[14:12] *** xabbu42 joined
[14:12] <Garda> also, if there are any glaring mistakes, or ugly things like that, please point them out

[14:12] *** xabbu42 left
[14:12] <Garda> it's pretty much the first thing I've written in perl

[14:13] <tadzik> there aren't any, as far as I can see

[14:13] <tadzik> never written Perl 5 before?

[14:13] <Garda> no

[14:13] <tadzik> oh, you don't need a ; after a sub declaration

[14:13] <tadzik> whoa. Where are you learning from?

[14:13] *** Trashlord left
[14:14] <tadzik> you can also do %player.keys, but keys %player is good too

[14:14] <Garda> here: https://secure.wikimedia.org/wikibooks/en/wiki/Perl_6_Programming

[14:14] <Garda> also the pdf that comes with rakudo

[14:14] <tadzik> ah, The Book

[14:15] <Garda> tadzik, you mean in the last for loop?

[14:15] <tadzik> Garda: aye

[14:15] <Garda> yep, works

[14:17] *** s1n left
[14:17] *** s1n joined
[14:18] <tadzik> I think using @a.sort instead of sort(@a) is something we could put in some perl6style guide

[14:23] <colomon> +1

[14:28] *** huf left
[14:28] *** huf joined
[14:30] <sbp> tadzik: back, sorry for the rush before

[14:30] <sbp> wasn't even looking at the error messages, knew I had to go out soon

[14:30] <sbp> Garda: great! interesting to see what you learned from too

[14:30] <sbp> thanks for posting those

[14:31] *** flatwhatson left
[14:31] * sbp adds the wikibook to Get-Into-Perl6

[14:31] <tadzik> colomon: maybe you could take a peek at the issue sbp has? I'm not able to reproduce this on Linux

[14:32] <sbp> (error messages are 611410, 611413, and 611416 on pastebin.ubuntu.com)

[14:34] <sbp> aha, I have panda/ext/Shell/Command.pm

[14:34] <sbp> but my @*INC only contains:

[14:34] <sbp>   /Users/sbp/stuff/tmp/panda/blib/lib

[14:34] <sbp>   /Users/sbp/stuff/tmp/panda/lib

[14:34] <sbp> so it's looking in lib/, but not ext/

[14:35] <sbp> it's setting PERL6LIB itself of course, so it seems like ext/ needs to be added to that?

[14:35] <sbp> I'm not sure if that's part of "ufo" or part of "make test", checking now

[14:36] <sbp> it's part of make test

[14:36] <tadzik> hold on

[14:36] <tadzik> sbp: what does PWD=`pwd`; echo $PWD give you?

[14:37] <sbp> in ~/stuff/tmp/panda it gives: /Users/sbp/stuff/tmp/panda

[14:37] <tadzik> hmm

[14:38] <tadzik> PERL6LIB=ext:lib perl6 bin/panda install .

[14:38] <tadzik> sbp: could you try the above?

[14:38] *** Moukeddar joined
[14:38] *** Moukeddar left
[14:39] *** wamba joined
[14:40] <sbp> it's bootstrapping the modules that it needs

[14:40] <tadzik> oh, funny

[14:40] <sbp> for the logs, for my benefit: panda depends on File::Tools, JSON::Tiny, Test::Mock

[14:40] <tadzik> I guess the bootstrap.sh is overcomplicated and broken on Mac

[14:42] <sbp> all the deps are installed, it got panda, the panda tests are running now

[14:42] <sbp> ==> Succesfully installed panda

[14:42] <sbp> there were some test failures. well, at least one. gonna paste

[14:42] <sbp> http://pastebin.ubuntu.com/611441/

[14:43] <sbp> only one failure

[14:43] <sbp> panda version and panda --version don't work, by the way

[14:44] <tadzik> that's not a test failure, it's a trap

[14:44] <sbp> which I think is required for POSIX compliance. not sure though

[14:44] <tadzik> it's a git error message, and it's expected by the tests

[14:44] <sbp> ah, okay! gotcha

[14:44] <tadzik> oh, is it? I may think about it then

[14:44] <tadzik> sbp: https://github.com/tadzik/panda/issues/4

[14:44] <sbp> yeah, I wanted to run it just to check to see whether this new installation was really installed :-)

[14:44] <tadzik> turned out to be not quite as LHF as I thought

[14:45] <sbp> hehe

[14:45] <sbp> okay, trying to install LWP::Simple again

[14:45] <sbp> by the way, every time I invoke panda now, I get this error message twice:

[14:46] <sbp> File::Mkdir is now deprecated, please use Shell::Command mkpath() instead

[14:46] <sbp> as you'll see for yourself, because LWP::Simple install failed again

[14:46] <sbp> http://pastebin.ubuntu.com/611447/

[14:46] <tadzik> are you sure your panda is fresh?

[14:46] <sbp> same error as 611413, it seems, with the addition of the Mkdir one

[14:46] <sbp> nope, definitely not sure of that

[14:46] <tadzik> you can update it with 'panda install panda'

[14:47] *** Trashlord joined
[14:47] <sbp> thanks

[14:47] <tadzik> sbp: could you try removing ~/.panda and retry?

[14:48] <sbp> yep

[14:48] <sbp> panda install panda gave "Project panda not found in the ecosystem" by the way

[14:48] <tadzik> hmm, gimme a sec

[14:48] <tadzik> yeah, the API page seems to not have updated

[14:49] <sbp> well, I ran rm -rf ~/.panda; panda install panda

[14:50] <sbp> and that's going okay now

[14:51] <sbp> now I'm getting a single "File::Mkdir is now deprecated, please use Shell::Command mkpath() instead" when I invoke panda... :-)

[14:51] <tadzik> great

[14:51] <tadzik> update your panda ;)

[14:51] <tadzik> the hackathoners in Russia have fixed this

[14:51] <sbp> that was after I updated it. the update was successful

[14:51] <tadzik> oh?

[14:51] <tadzik> hrm

[14:51] <sbp> trying LWP::Simple again, which is also working

[14:52] <tadzik> maybe you're still running the Star Panda?

[14:52] <tadzik> what does `which panda` give you?

[14:52] <sbp> http://pastebin.ubuntu.com/611449/

[14:52] <sbp> don't think so, because the LWP::Simple installation is working now

[14:52] <sbp> that's the top of it, you can see the error message there

[14:52] <sbp> Succesfully installed LWP::Simple

[14:53] <sbp> my which panda is: /Users/sbp/usr/bin/panda

[14:53] <tadzik> hrm

[14:53] <tadzik> ah, gotcha!

[14:53] <tadzik> try perl6 ~/.perl6/bin/panda install LWP::Simple

[14:54] <sbp> that worked, with no File::Mkdir error message

[14:54] <tadzik> sbp: also, I refactored bin/panda a bit, but there's no speedup, still 2.somethins seconds on help

[14:54] <sbp> :-)

[14:54] <tadzik> OTOH, update is almost as fast :)

[14:55] <tadzik> 0.07 seconds longer

[14:55] *** ymasory left
[14:55] <sbp> so that's basically all startup time? scary

[14:55] <sbp> now, I have lwp-download.pl and lwp-get.pl in ~/.perl6/bin

[14:55] <sbp> but not in ~/usr/opt/rakudo/bin, which is interesting

[14:56] <tadzik> is it?

[14:56] <sbp> shouldn't the successful rakduo star panda installation of LWP::Simple put them there?

[14:56] <sbp> or does it *always* put them in ~/.perl6/bin?

[14:56] <tadzik> yes

[14:56] <tadzik> or to DESTDIR

[14:56] <tadzik> I think :)

[14:56] <sbp> yes to ~/.perl6/bin?

[14:57] <tadzik> yes, panda installs to ~/.perl6/bin by default

[14:57] <sbp> hmm. what about the modules? always in ~/.panda?

[14:58] <tadzik> no, everything goes to ~/.perl6/somewhere

[14:58] <tadzik> .panda is a place for configs and downloads

[14:58] <sbp> oh right, sorry, found it at ~/.perl6/lib/LWP/Simple.pm now

[14:59] <sbp> though I also have ~/usr/opt/rakudo/lib/parrot/3.3.0/languages/perl6/lib/LWP/Simple.pm - put there as part of rakudo star I assume?

[14:59] <tadzik> I think so, yes

[15:00] <moritz> yes

[15:00] <tadzik> oh hi moritz 

[15:00] <sbp> there are no lwp-download.pl and lwp-get.pl in ~/usr/opt/rakudo/bin though, I note

[15:00] <sbp> hi there moritz

[15:06] *** ymasory joined
[15:06] <moritz> \o

[15:15] <jnthn> o/ moritz 

[15:16] <dalek> rakudo/nom: 4700c15 | jnthn++ | src/binder/s (2 files):

[15:16] <dalek> rakudo/nom: Bring in a couple of 6model header files.

[15:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4700c15860

[15:16] <dalek> rakudo/nom: 90aa201 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[15:16] <dalek> rakudo/nom: Signature also needs a slot for caching the named to positional mapping.

[15:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/90aa201682

[15:16] <dalek> rakudo/nom: 3368f83 | jnthn++ | / (2 files):

[15:16] <dalek> rakudo/nom: Remove P6lowlevelsig PMC, since we're just going to use one representation of signatures from now on. Also stop building perl6multisub.pmc - the logic in it will mostly move to ops.

[15:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3368f83068

[15:16] <dalek> rakudo/nom: 4521157 | jnthn++ | src/ops/perl6.ops:

[15:16] <dalek> rakudo/nom: Toss some dynops that we'll no longer need with 6model including the 'cannot be unseen!!1!!' rebless_subcalss.

[15:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4521157362

[15:16] *** f00li5h joined
[15:17] <moritz> bind.c:11:38: error: ../pmc/pmc_p6lowlevelsig.h: No such file or directory

[15:17] <moritz> bind.c: In function ‘Rakudo_binding_bind_llsig’:

[15:18] *** Garda left
[15:18] <jnthn> moritz: Same here.

[15:18] <jnthn> moritz: Fixing. :)

[15:19] <sbp> does panda come bundled with niecza? (guessing not)

[15:22] <moritz> does apt come bundled with windows XP? :-)

[15:22] <jnthn> uh-oh...thunder storm.

[15:23] <moritz> jnthn: we had that yesterday

[15:23] <sbp> hehe

[15:23] <moritz> sbp: the comparison wasn't fair, but you get the gist :-)

[15:23] <sbp> I was just about to say, odd to compare niecza to WinXP... :-)

[15:26] * moritz hopes that sorear doesn't kill him :-)

[15:26] <sbp> or Mr. Gates. trouble from both sides

[15:29] <moritz> I kinda doubt that Mr. Gates reads #perl6 logs :-)

[15:30] * moritz needs to fetch his luggage before the luggage storage closes for the night

[15:30] <moritz> see you later, if the hotel has free wifi :-)

[15:30] <moritz> ttfn

[15:30] <sbp> enjoy

[15:33] *** kaare_ joined
[15:37] <dalek> rakudo/nom: e53ff5c | jnthn++ | src/ops/perl6.ops:

[15:37] <dalek> rakudo/nom: Toss ops related to building llsig.

[15:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e53ff5c356

[15:37] <dalek> rakudo/nom: 4d064d0 | jnthn++ | build/Makefile.in:

[15:37] <dalek> rakudo/nom: Build binder into ops library rather than PMCs one - we're not going to need it from the PMCs one any more.

[15:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4d064d01b3

[15:37] <dalek> rakudo/nom: 367e9ff | jnthn++ | src/ (3 files):

[15:37] <dalek> rakudo/nom: Start refactoring the binder to use Signature and Parameter classes. Untested beyond the fact that it compiles.

[15:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/367e9ff9b2

[15:41] <tadzik> moritz: oh, you had storm too?

[15:41] <tadzik> sbp: there's still lots of blockers for Panda on Niecza

[15:42] *** Pathin_ left
[15:43] <tadzik> jnthn: first, I thought that rebless_subcalss is a typo-joke. Then instead of class-calss I thought of calls-calss. Then, I don't know what's to be unseen :)

[15:44] <jnthn> tadzik: There was an op called rebless_subclass. It did...great evil. :)

[15:44] *** Pathin joined
[15:45] <tadzik> oh, so it's the inside joke (ha ha!)

[15:45] <jnthn> It was actually just a typo :P

[15:45] <jnthn> One Parrot developer once looked at the op and was like "cannot be unseen" :)

[15:46] <jnthn> It *was* evil. ;)

[15:46] <tadzik> :)

[15:46] * jnthn is enjoying collapsing three different types of signature representation into just one.

[15:47] <tadzik> em, is one supposed to define quote_EXPR?

[15:47] <tadzik> like, at all?

[15:48] <jnthn> You inherit it from HLL::Grammar.

[15:48] <tadzik> that's what I thought. So there's absolutely no need to define it yourself?

[15:49] <jnthn> No

[15:50] <jnthn> IIRC you can cutomize it by adding extra quote_mod though.

[15:50] <tadzik> cardinal has it written in PIR, and there becomes some fun when we migrate that to nqprx

[15:51] <tadzik> it also has quote_term, quote_concat and other fun things

[15:51] <jnthn> oh

[15:51] <jnthn> I'm guessing that its PIR one won't migrate over well at all

[15:52] <jnthn> Since it probably works with PGE's world view or something.

[15:52] <tadzik> yeah

[15:53] <jnthn> But does the quote_EXPR in nqprx not do the job?

[15:54] <tadzik> no one knows. No one has ever succeeded to move a compiler from PGE to Nqprx, as far as I know

[15:54] <tadzik> so I made nqp-rx compile the grammar and actions, but there are things broken beyond my comprehension

[15:57] <tadzik> jnthn: nom build fails for me

[15:57] <tadzik> http://wklej.org/id/533545/txt/

[15:58] *** Pathin left
[15:59] *** orafu joined
[16:01] <jnthn> tadzik: That somehow looks like an incomplete nqp installation.

[16:01] <tadzik> hmm

[16:01] <jnthn> nqp_group is something that nqp's make install should put in place.

[16:01] <tadzik> maybe I broke it with yesteday's mangling

[16:05] <tadzik> yeah, I had a not-installed nqp

[16:06] *** cdarroch joined
[16:06] *** cdarroch left
[16:06] *** cdarroch joined
[16:07] <jnthn> phew :)

[16:08] <dalek> rakudo/nom: 5892b51 | jnthn++ | src/ops/perl6.ops:

[16:08] <dalek> rakudo/nom: Oops, was a little too eager with the delete key; we still need deref_unless_object, albeit updated for 6model. Few other cleanups of unused things in ops too.

[16:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5892b5164d

[16:12] *** satyavvd_ joined
[16:14] *** satyavvd left
[16:15] *** icwiener joined
[16:16] <colomon> tadzik: what's the issue?  no time to backlog, parents and in-laws visiting and I'm grilling.  ;)

[16:18] *** satyavvd_ left
[16:18] <tadzik> colomon: oh, nevermind, got solved in mid-time :) Have fun!

[16:18] <sbp> colomon: if you mean the panda issue, it's fixed now. stuff was out of date, that's all

[16:18] <sbp> yeah, enjoy grilling. don't grill your in-laws!

[16:19] <sbp> I'll probably try to do the same installation procedure from scratch when the next Rakudo Star comes out

[16:19] <sbp> hope there will be one this month? would be nice to incorporate the panda updates

[16:20] <sorear> good * #perl6

[16:21] <sbp> hey sorear

[16:21] <tadzik> I don't think panda updates are a motor to update Star

[16:21] <tadzik> I think pmichaud wanted to release Star this month for the performance bumps though

[16:21] <sbp> ah, good. maybe they should be though, always handy to have a working module manager!

[16:21] <sbp> just as important to have those top level bits as the bottom level bits, when you're doing stuff

[16:22] <sbp> I'm sure you agree. maybe pmichaud needs to hear a few more +1s in that direction? :-)

[16:24] <sbp> if not, perhaps a few more links to panda, and information about updating panda, could be added to rakudo/README?

[16:25] <sorear> sbp: Once upon a time, Parrot bundled a properly configured and integrated version of icu.  It was removed for political reasons; talk to jnthn.

[16:25] * jnthn has probably moaned quite enough about that issue already...

[16:25] <jnthn> I just don't build with ICU anymore.

[16:26] <jnthn> Can't be arsed to wrok out how to get it to work on win32 *again*.

[16:26] <sorear> sbp: 'panda' doesn't just print lines to stdout; it also compiles panda, and loads perl6.pbc, both of which would easily explain 2s.

[16:27] <sbp> aha, thanks. tadzik did look into optmising it a bit as you'll see probably further down the logs before getting back here, but it didn't speed it up much. no big deal at the moment, it just surprised me

[16:27] <sbp> (of course I was measuring panda performance relative to other languages' package managers)

[16:27] <sbp> on ICU, yeah. well I see unicode support and think "mandatory!"

[16:28] <sbp> but what a silly installation procedure that was. and then, when it was done, no clear process at all to include the installed ICU libraries because I was using a non-standard path

[16:28] <sorear> sbp: some irc clients don't have the ability to split the window and keep one half scrolled up while the other tracks current discussion, so pastebins help

[16:28] <sbp> again not really a big deal, but if somebody slavishly follows instructions like me, they'll be trying to apply broken patches to ICU before they even touch rakudo

[16:29] <sbp> you'll notice I used a pastebin after the little incident there...

[16:29] *** colomon left
[16:29] <sbp> maybe it'll take me another five years to learn the value of emoparting... :-)

[16:30] <sbp> I would like to know what funtionality ICU brings to parrot/rakudo

[16:30] * sbp looks at the docs again for that

[16:31] <sorear> the main thing ICU brings is a complete set of character property tables

[16:32] <jnthn> std: sub foo($y = $x, $x) { }

[16:32] <p6eval> std 4b1b100: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable $x is not predeclared at /tmp/ykjSbVs57o line 1:␤------> [32msub foo($y = [33m⏏[31m$x, $x) { }[0m␤Cannot put required parameter after optional parameters at /tmp/ykjSbVs57o line 1:␤------> [32msub foo($y = $x, $x[33m⏏[31m) {

[16:32] <p6eval> ..}[0m␤Pote…

[16:32] <sorear> for instance "\x3000" ~~ /\s/ is true with ICU available

[16:32] <sorear> (that's IDEOGRAPHIC SPACE)

[16:32] <jnthn> std: sub foo($y = $x) { my $x }

[16:32] <p6eval> std 4b1b100: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable $x is not predeclared at /tmp/okachTT5sG line 1:␤------> [32msub foo($y = [33m⏏[31m$x) { my $x }[0m␤Potential difficulties:␤  $x is declared but not used at /tmp/okachTT5sG line 1:␤------> [32msub foo($y = $x) { my $x[33m⏏[31m

[16:32] <p6eval> ..}[0m␤  …

[16:32] <jnthn> Good.

[16:32] <sorear> I think without ICU parrot treats all characters >255 as being \w

[16:33] <sorear> hi jnthn.

[16:33] <sbp> hmm. so couldn't those tables be included quite simply by other means?

[16:33] <sbp> this sounds like a parrot issue rather than a perl6 issue though?

[16:34] <sbp> I mean, python for example just compiles UnicodeData.txt down into some data structure that it can use throughout the standard library. it's not having to include a whole different library for that

[16:34] <sorear> yeah well... this is Parrot we're talking about.

[16:34] *** lumi_ left
[16:34] <TimToady> I've been harping on that for years, actually...

[16:35] <sorear> (I don't have a high opinion of #parrot.  Can you tell?)

[16:35] <sbp> not possible to work around it at the rakudo level, perhaps? (or not worth it? or not politically friendly?)

[16:35] *** lumi_ joined
[16:36] <jnthn> Possible.

[16:36] <jnthn> But too much to do.

[16:36] <jnthn> Could happen at some point.

[16:37] <sbp> if not, I might file a rakudo bug (or am at least suggesting on logs here if I don't get around to it) that the ICU instructions in README could be moved about, made more clear that it's a very optional thing, what kind of effects there are, etc.

[16:37] <TimToady> could base it on P5's tables too, which I think are pretty up-to-date

[16:37] <sbp> (even if it's marked pri=low, worth having on file)

[16:37] <TimToady> but that's even less palatable in the world of talking birds

[16:38] <sbp> . o O ( verbirdgenous )

[16:41] <sbp> how does panda compare to masak's proto?

[16:41] <sbp> not immediately obvious from his README that there's any difference at all

[16:43] <sbp> panda seems more up to date, at least

[16:44] <jnthn> sbp: panda is actively developed. proto is not, faik.

[16:45] <sbp> thanks. masak's META.info was last updated 28 Jan 2011

[16:46] <sbp> but the rest seems to be from about June 2010

[16:48] *** uniejo left
[16:55] *** colomon joined
[16:55] *** silug joined
[17:00] *** baest_ is now known as baest

[17:06] *** silug left
[17:06] *** silug joined
[17:09] <dalek> nqp: f6bda2d | jonathan++ | src/ops/nqp.ops:

[17:09] <dalek> nqp: Fix copy-pasto.

[17:09] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f6bda2d60d

[17:10] <tadzik> sbp: re panda performance, like sorear says, it's compiling bin/panda and loading perl6.pbc, but also loading all the Panda modules, which are recompiled, but are still a big piece of code

[17:12] <sorear> if you tried to use niecza as a drop-in replacement for Rakudo in panda, (lets pretend it magically gets all the features you need), you'd probably find it was slower

[17:13] <sorear> niecza's compiler, due mostly to .net weaknesses, loads significantly slower than Rakudo's

[17:13] <sorear> like 5-10 seconds for hello world

[17:13] <sbp> ah, note that I was only asking about panda in niecza so that I could document it in Get-Into-Perl6 not for performance reasons :-)

[17:13] <PerlJam> jnthn: I saw this quote on FB and thought of you:  "I am a firm believer in the people. If given the truth, they can be depended upon to meet any national crisis. The great point is to bring them the real facts, and beer."  --Abraham Lincoln

[17:15] <jnthn> beer :D

[17:15] <jnthn> A man who really understood the needs of the people. :)

[17:19] *** silug left
[17:19] <dalek> niecza: de0797d | sorear++ | / (4 files):

[17:19] <dalek> niecza: Implement .Int and .Num coercions

[17:19] <dalek> niecza: review: https://github.com/sorear/niecza/commit/de0797d9c4

[17:29] *** wamba left
[17:36] <dalek> rakudo/nom: 710de96 | jnthn++ | src/ (2 files):

[17:36] <dalek> rakudo/nom: Re-work call into the signature binder. Should be a good bit cheaper than how we locate signature and capture today.

[17:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/710de96c6d

[17:36] <dalek> rakudo/nom: 98c43fd | jnthn++ | src/Perl6/Actions.pm:

[17:36] <dalek> rakudo/nom: Create lexical slots for parameters.

[17:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/98c43fd2fd

[17:36] <dalek> rakudo/nom: c50c120 | jnthn++ | src/binder/bind. (2 files):

[17:36] <dalek> rakudo/nom: A few little fixes to the binder updates.

[17:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c50c120364

[17:36] <dalek> rakudo/nom: 56a776f | jnthn++ | src/Perl6/ (4 files):

[17:36] <dalek> rakudo/nom: Get signature building a little further along, plus assorted fixes to trait application time.

[17:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/56a776f8dd

[17:54] <sorear> hmm, there are quite a few numeric functions I'm misisng!

[17:54] *** jferrero joined
[18:15] *** s1n left
[18:18] *** Trashlord left
[18:19] *** birdwindupbird left
[18:22] <dalek> roast: efd5f21 | tadzik++ | S0 (4 files):

[18:22] <dalek> roast: Remove pieces of invalid Pod

[18:22] <dalek> roast: 

[18:22] <dalek> roast: See https://github.com/rakudo/rakudo/commit/30ebf78

[18:22] <dalek> roast: review: https://github.com/perl6/roast/commit/efd5f2155e

[18:29] *** s1n joined
[18:29] <dalek> niecza: 03012ee | sorear++ | lib/CORE.setting:

[18:29] <dalek> niecza: Fix a few parameter names

[18:29] <dalek> niecza: review: https://github.com/sorear/niecza/commit/03012ee8fa

[18:30] <dalek> roast: 8657a3a | sorear++ | S (17 files):

[18:30] <dalek> roast: Unfudge a few niecza tests

[18:30] <dalek> roast: review: https://github.com/perl6/roast/commit/8657a3a07b

[18:40] *** y3llow_ joined
[18:42] *** y3llow left
[18:42] *** y3llow_ is now known as y3llow

[18:44] * moritz back

[18:45] <sorear> hello moritz

[18:46] <tadzik> yay, my first backtracking problem encountered and solvedt

[18:46] <sbp> what happened to all the old rakudo.org blog links?

[18:46] <sbp> e.g. http://rakudo.org/2008/09/final-report-for-mozilla-found.html

[18:46] <sbp> but anything with a date in it seems to have disappeared

[18:47] <sorear> rakudo.org stopped working and alester tried valiantly but failed to fix it

[18:47] <sbp> ah, shame

[18:47] <moritz> sbp: I thikn the blog wasn't ported, most of that was just release announcements

[18:47] <sorear> the content was migrated to a new server with a different CMS

[18:47] <sorear> the blog is probably still there under a different URL scheme

[18:48] <sbp> hmm, if so http://rakudo.org/?s=Final+Report+for+Mozilla doesn't find it

[18:48] <sorear> 3.97-4.06 sec "Hello, world" before my next attempt

[18:53] <sbp> “> 1- ready binaries for different systems at the same date of releasing source, especially for windows

[18:53] <sbp> This will be rather easy if somebody steps up and builds the binaries. I fear that most Rakudo developers lack the expertise to do themselves.”

[18:53] <sbp> moritz in http://www.perlmonks.org/index.pl?node_id=845586

[18:53] <sbp> perhaps I should throw up my installation as an OS X binary

[18:54] <sbp> but I'm not sure I'd maintain it with much regularity

[18:56] <flussence> (in an ideal world, the OS-dependent part of rakudo would be tiny...)

[18:57] <sbp> incidentally, moritz seems to be in pretty much all the perl6 results I've just been randomly Googling through. see http://stackoverflow.com/questions/3383339 for example — ysth's comment made me laugh

[18:58] *** kaare_ left
[19:02] *** dukeleto left
[19:03] *** dukeleto joined
[19:03] *** s1n left
[19:05] <tadzik> yay, I can parse paragraph blocks!

[19:05] <tadzik> Well, Rakudo can

[19:06] <arnsholt> tadzik: That's even better! ;)

[19:07] * arnsholt is trying to wrap a slightly weird C library with SWIG

[19:07] <arnsholt> An interesting experience

[19:08] <tadzik> I think I should complete week #1 first, but this is just too exciting

[19:08] <tadzik> Besides, Week #1 haven't started yet anyway :)

[19:11] <tadzik> is <?before> there?

[19:12] *** ymasory left
[19:13] <tadzik> or, nevermind

[19:18] *** lumi_ left
[19:18] <moritz> it is, though <?after> is NYI

[19:18] *** s1n joined
[19:19] *** lumi_ joined
[19:23] <tadzik> yay, I managed to parse paragraph blocks with no backtracking

[19:28] *** ymasory joined
[19:36] *** silug joined
[19:46] *** wamba joined
[19:47] *** ymasory left
[19:48] *** jferrero left
[19:49] <tadzik> I can write <!foobar> and token foobar { [ 'foo' | 'bar' ] }; Can I write something like ![ 'foo' | 'bar' ]?

[19:49] <tadzik> oh, just <![ 'foo' | 'bar']>, right?

[19:50] <tadzik> right. Or at least "the tests pass" :)

[19:50] <sorear> no

[19:50] *** jferrero joined
[19:50] <sorear> <![ 'foo' | 'bar' ]> is a negative lookahead character class

[19:51] <sorear> you want <!beforefoo || bar>

[19:52] <tadzik> it gets autoquoted this way?

[19:53] <sorear> parse erro

[19:53] <sorear> semantic dispatch failed, rather

[19:54] <tadzik> hmm

[19:54] <tadzik> this way, I don't need to put 'foo' or 'bar' in quotes?

[19:55] <sorear> correct

[19:56] <tadzik> it looks a bit funny

[19:56] <sorear> any \w in a regex matches itself even if unquoted

[19:56] *** jferrero left
[19:56] *** mj41 joined
[19:56] <tadzik> Method 'beforebegin' not found for invocant of class 'Pod6;Grammar'

[19:56] <sorear> you need a space after before; I typoed

[19:57] <tadzik> nice. Thanks sorear 

[19:58] *** snearch left
[20:11] *** meteorjay left
[20:12] *** IllvilJa joined
[20:16] *** Mowah left
[20:18] *** meteorjay joined
[20:24] *** dukeleto left
[20:24] *** wamba left
[20:24] *** dukeleto joined
[20:32] <tadzik> . o O ( will the feed operator at the beginning of a line get parsed as Pod? )

[20:33] <dalek> nqp: 3339a14 | jonathan++ | src/NQP/ (2 files):

[20:33] <dalek> nqp: Add a way to specify extra vm libs (e.g. pmc or op libs for Parrot) to load and use.

[20:33] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3339a14262

[20:41] *** ymasory joined
[20:48] *** dual joined
[20:54] <Tene> tadzik: I've moved a few other compilers over from PGE to NQP without much trouble; iirc the PIR stuff in the compiler was just copied literally from rakudo at the time, fwiw.

[20:55] *** kjeldahl left
[20:56] <dalek> niecza: f1966c1 | sorear++ | / (3 files):

[20:56] <dalek> niecza: Reorganize nam to load much less (~75%) data; small startup time improvement.

[20:56] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f1966c13ac

[20:56] <tadzik> Tene: oh, I see

[20:57] <Tene> tadzik: so, you should be able to use the NQP-provided quote stuff without any trouble, I expect

[20:57] <tadzik> Tene: have you looked at the latest Cardinal Pull Request?

[20:57] <Tene> tadzik: I haven't looked at cardinal whatsoever in quite a while.

[20:58] <Tene> tadzik: do you have permissions to manage the cardinal repo yourself?  If you think it's good, just update it.  You've done far more work than I have on it lately; feel free to take as much ownership or maintainership as you like.

[20:59] * sorear grumbles at the CLR not letting me form the type object*

[21:01] *** mtk left
[21:05] <tadzik> Tene: the thing is I'm not sure whether it's really good, I feel like a blind man in the fog when it comes to pge-nqprx transition

[21:05] <Tene> ah, yeah, understandable.

[21:08] <tadzik> loliblogged! http://ttjjss.wordpress.com/2011/05/22/the-summary-of-the-community-bonding-period/

[21:09] *** mtk joined
[21:14] * sorear has had a vision of a possible future of niecza

[21:15] *** wamba joined
[21:15] <sorear> actually I think I want the simple past "had" here

[21:16] *** sftp left
[21:17] <jnthn> tadzik: Nice! :) Though shouldn't the tl;dr go at the start? ;-)

[21:17] <sorear> it involved discarding the "Perl 6 globals are CLR globals" optimization, consolidating all of the variables in each unit into a single RuntimeUnit object, and a fair amount of bounded serializaiton stuff

[21:17] *** Trashlord joined
[21:18] *** sftp joined
[21:19] *** mj41 left
[21:25] <dalek> rakudo/nom: e1e7c83 | jnthn++ | src/binder/bind.c:

[21:25] <dalek> rakudo/nom: Fix a silly.

[21:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e1e7c8356b

[21:25] <dalek> rakudo/nom: b72506d | jnthn++ | src/ (2 files):

[21:25] <dalek> rakudo/nom: First cut at ClassHOW.type_check.

[21:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b72506dd7f

[21:25] <dalek> rakudo/nom: a05d65d | jnthn++ | / (5 files):

[21:25] <dalek> rakudo/nom: Top type accepts everything. Also prep for putting junction auto-threading back in later.

[21:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a05d65d6ca

[21:25] <dalek> rakudo/nom: 8b71496 | jnthn++ | / (5 files):

[21:25] <dalek> rakudo/nom: .WHAT, .HOW. .WHO.

[21:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8b71496f65

[21:25] <dalek> rakudo/nom: 97577c6 | jnthn++ | NOMMAP.markdown:

[21:25] <dalek> rakudo/nom: Update NOMMAP.

[21:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/97577c609c

[21:26] * jnthn remembers that he's teaching tomorrow, and reluctantly puts down Rakudo nom so he can sleep

[21:27] <jnthn> well, maybe just one more patch...

[21:27] <sorear> sleep well... *wonders when to start studying rakudo nom*

[21:28] <jnthn> sorear: It's quite a building site at the moment.

[21:28] <tadzik> jnthn: I didn't want to ruin the suprise :)

[21:28] <benabik> Fun to watch though.

[21:28] <jnthn> sorear: Mostly I'm ripping a load of primitives up and re-doing them. :)

[21:28] <jnthn> And playing with circularity saws.

[21:29] <sorear> there will be some nice catching up to do after the merge. :)

[21:29] <sorear> in more than one sense of the word

[21:30] *** pamera1 left
[21:34] *** ymasory left
[21:35] <dalek> rakudo/nom: dd55769 | jnthn++ | / (2 files):

[21:35] <dalek> rakudo/nom: Native types should be able to inherit (of course, 'instances' cannot, but the type object can, so int ~~ Int, etc.)

[21:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dd55769503

[21:36] <sorear> wait, rakudo nom supports 'int'?

[21:37] <jnthn> sorear: Initially just for natively typed attributes, but it's the foundation for the rest of it.

[21:38] <jnthn> sorear: There's a bunch of other stuff needed before Rakudo can interestigly support 'int'.

[21:38] <jnthn> But, gotta start towards it somewhere... :)

[21:40] <jnthn> OK, really sleep &

[21:50] *** ymasory joined
[21:51] *** cdarroch left
[21:53] *** kst`` left
[22:06] *** ymasory left
[22:31] <dalek> niecza: b8d8df9 | sorear++ | lib/CLRBackend.cs:

[22:31] <dalek> niecza: Localized cleanups of CLRBackend, use varargs

[22:31] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b8d8df9933

[22:31] *** daniel-s joined
[22:45] *** rgrau joined
[22:48] *** flatwhatson joined
[22:50] *** icwiener left
[23:08] *** hercynium joined
[23:26] *** daxim_ joined
[23:26] *** noganex_ left
[23:28] *** noganex joined
[23:35] *** flatwhatson left
[23:39] *** flatwhatson joined
[23:44] *** rgrau left
[23:45] *** lumi_ left
[23:47] *** lumi_ joined
[23:53] *** flatwhatson left
[23:56] *** daniel-s left
[23:59] *** flatwhatson joined
