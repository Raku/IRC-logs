[00:00] <masak> felliott: oh! there's one thing I should tell you about that room.

[00:00] <felliott> I just tried x butterfly and got a crash.

[00:00] <masak> good to know; will fix by tomorrow.

[00:01] <masak> felliott: the sign in the chamber, once the descriptions are there, will read "LEAVE". one letter will appear to be erased after that word.

[00:01] <felliott> Intriguing! 

[00:01] <masak> ;)

[00:02] <masak> I'll say. I should really be asleep, but suddenly I have a user!

[00:04] *** donri left
[00:04] <masak> oh well. better sleep a bit. :)

[00:04] <masak> 'night, #perl6.

[00:04] <felliott> night masak!

[00:05] <felliott> btw, it's fun!

[00:05] <masak> felliott++ # testing

[00:05] <felliott> v. nicely done

[00:05] <felliott> masak++ # making

[00:05] <masak> thanks :)

[00:05] *** masak left
[00:06] *** ab5tract joined
[00:07] <awwaiid> perl6: "0b1010" + 1

[00:07] <p6eval> pugs, rakudo 1ddda5:  ( no output )

[00:07] <p6eval> ..niecza v7-35-g4fc3649: OUTPUT«Unhandled exception: System.FormatException: Unknown char: b␤  at System.Double.Parse (System.String s, NumberStyles style, IFormatProvider provider) [0x00000] in <filename unknown>:0 ␤  at System.Double.Parse (System.String s, IFormatProvider provider) [0x…

[00:08] <sorear> evalbot rebuild niecza

[00:08] <p6eval> OK (started asyncronously)

[00:08] <awwaiid> perl6: say "0b1010" + 1

[00:08] <p6eval> pugs, rakudo 1ddda5: OUTPUT«11␤»

[00:08] <p6eval> ..niecza v7-35-g4fc3649: OUTPUT«Rebuild in progress␤»

[00:08] <awwaiid> no rakudo?

[00:12] <TimToady> it's there, it's just agreeing with pugs

[00:14] <awwaiid> ah!

[00:15] <awwaiid> very good. So the fact that the nom branch results in '6' instead of '11' really is bad then

[00:15] *** envi joined
[00:15] <sorear> no, really is good

[00:16] <awwaiid> even better

[00:16] <awwaiid> what does it mean?

[00:16] <sorear> actually I think the correct answer is 10

[00:16] <sorear> 0b1010 is 8+2

[00:16] <sorear> oh, "+1"

[00:16] <awwaiid> this is from t/00-parrot/01-literals.t output, btw.

[00:16] <sorear> nom is broken

[00:17] <awwaiid> great! so me poking at it isn't a waste of time

[00:18] *** felliott left
[00:19] <TimToady> nom: say "0b1010" + 1

[00:19] <p6eval> nom: OUTPUT«6␤»

[00:19] <TimToady> nom: say 0b1010 + 1

[00:19] <p6eval> nom: OUTPUT«11␤»

[00:19] <awwaiid> hmm

[00:19] <TimToady> nom: say :2<1010> + 1

[00:19] <p6eval> nom: OUTPUT«11␤»

[00:19] <awwaiid> nom: say "0b1010" + 1

[00:19] <p6eval> nom: OUTPUT«6␤»

[00:19] <TimToady> nom: say ':2<1010>' + 1

[00:19] <p6eval> nom: OUTPUT«No applicable candidates found to dispatch to for 'Numeric'. Available candidates are:␤:(Mu, Mu %_)␤␤current instr.: 'Numeric' pc 451264 (src/gen/CORE.setting.pir:0) (src/gen/CORE.setting:332)␤»

[00:20] <TimToady> nom: say '10' + 1

[00:20] <p6eval> nom: OUTPUT«2␤»

[00:20] <TimToady> um

[00:20] <awwaiid> hah

[00:20] <TimToady> wha?

[00:21] <TimToady> nom: say '20' + 1

[00:21] <p6eval> nom: OUTPUT«3␤»

[00:21] <TimToady> nom: say '200' + 1

[00:21] <p6eval> nom: OUTPUT«3␤»

[00:22] <TimToady> nom: say '222222222222222222222222222222222222222222222222' + 1

[00:22] <p6eval> nom: OUTPUT«2.22222222222222e+47␤»

[00:22] <TimToady> o_O

[00:23] <awwaiid> zero terminated numbers?

[00:23] <TimToady> nom: say '201' + 1

[00:23] <p6eval> nom: OUTPUT«202␤»

[00:23] <TimToady> yeah

[00:23] <awwaiid> nom: say '230' + 1

[00:23] <p6eval> nom: OUTPUT«24␤»

[00:23] <awwaiid> fancy

[00:24] <TimToady> nom: say ?'0'

[00:24] <p6eval> nom: OUTPUT«Bool::False␤»

[00:24] *** felliott joined
[00:24] *** felliott left
[00:25] *** dayangkun joined
[00:25] <awwaiid> nom: say "10230" + 1

[00:25] <p6eval> nom: OUTPUT«1024␤»

[00:29] *** thou left
[00:36] <[particle]> the 0's look like cookies

[00:37] * flussence pokes at the code

[00:38] <flussence> there's a flag to ignore trailing zeros (for decimals), but it shouldn't be set ever if there's no '.' in the string

[00:40] <awwaiid> where lives this code of which you speak?

[00:41] <flussence> rakudo/src/core/Str.pm:117, nqp/src/ops/nqp.ops:1269

[00:42] <pmichaud> back again

[00:43] *** tokuhir__ left
[00:45] <pmichaud> yes, looks like nom is broken somewhere.  looking.

[00:49] <awwaiid> I was about to ask what language is nqp/src/ops/nqp.ops -- then it suddenly came into focus!

[00:50] <pmichaud> yes, it's a bug in the radix converter.  located the bug, testing fix.

[00:51] <pmichaud> looks like C operator precedence strikes again :-/

[00:52] *** wolfman2000 joined
[00:52] <awwaiid> the amount of polyglot knowledge necessary to navigate this codebase is... interesting.

[00:53] <dalek> nqp: 46693c7 | pmichaud++ | src/ops/nqp.ops:

[00:53] <dalek> nqp: Fix bug arising from C operator precedence thinko.

[00:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/46693c720d

[00:54] <[Coke]> awwaiid: ramen.

[00:54] * [Coke] wonders if anyone in #perl6 is near london.

[00:54] <awwaiid> ramen? the soup?

[00:55] <pmichaud> Google says I'm about 275 mi away.

[00:55] <pmichaud> Unless, of course, you meant the other London.  :)

[00:56] <awwaiid> pmichaud -- now that you've updated that, what is the least that I need to do to tell my rakudo build to use your change?

[00:56] <awwaiid> (I don't know what step updates the nqp/ dir)

[00:57] <[Coke]> awwaiid: http://en.wikipedia.org/wiki/Flying_Spaghetti_Monster

[00:58] <awwaiid> ah, Coke++

[00:59] *** woosley joined
[01:00] *** noganex_ joined
[01:02] <dalek> rakudo/nom: 196eb09 | pmichaud++ | tools/build/NQP_REVISION:

[01:02] <dalek> rakudo/nom: Bump NQP_REVISION to get radix fix.

[01:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/196eb095cf

[01:03] <pmichaud> awwaiid: git pull the latest rakudo, it'll automatically update your nqp :)

[01:03] <pmichaud> s/rakudo/nom/

[01:04] *** noganex left
[01:05] <awwaiid> cheater

[01:06] <awwaiid> (thanks)

[01:06] *** Chillance left
[01:25] *** simcop2387 left
[01:27] *** simcop2387 joined
[01:30] <pmichaud> is_approx "20." / "5.", 4;

[01:30] <pmichaud> What should I do with this test?  remove it?

[01:30] *** jevin left
[01:31] <pmichaud> std:  say 20. / 5.

[01:31] <p6eval> std 516268a: OUTPUT«===SORRY!===␤Decimal point must be followed by digit at /tmp/c8VFcnrm1r line 1:␤------> say 20.⏏ / 5.␤Unsupported use of . to concatenate strings; in Perl 6 please use ~ at /tmp/c8VFcnrm1r line 1:␤------> say 20. ⏏/…

[01:32] <pmichaud> std:  say 20e

[01:32] <p6eval> std 516268a: OUTPUT«===SORRY!===␤Whitespace is required between alphanumeric tokens at /tmp/Dq842Fgs5B line 1:␤------> say 20⏏e␤Two terms in a row at /tmp/Dq842Fgs5B line 1:␤------> say 20⏏e␤    expecting any of:␤   POST␤   bracketed i…

[01:32] <pmichaud> std:  say 20.0e

[01:32] <p6eval> std 516268a: OUTPUT«===SORRY!===␤Whitespace is required between alphanumeric tokens at /tmp/TBlM8heZ5q line 1:␤------> say 20.0⏏e␤Two terms in a row at /tmp/TBlM8heZ5q line 1:␤------> say 20.0⏏e␤    expecting any of:␤       POST␤   bracket…

[01:32] *** jevin joined
[01:32] <flussence> rakudo: say e

[01:32] <p6eval> rakudo 1ddda5: OUTPUT«2.71828182845905␤»

[01:33] <flussence> hm...

[01:33] <flussence> std: sub postfix:<e>($n) { $n * e }; say 20e

[01:33] <p6eval> std 516268a: OUTPUT«ok 00:01 127m␤»

[01:33] <pmichaud> that might interfere with    20e0

[01:34] <pmichaud> I was curious what error message would be generated if someone included the 'e' but forgot the exponent :)

[01:39] *** am0c joined
[01:41] *** felliott joined
[01:41] <TimToady> std: sub postfix:<e>($n) { $n * e }; say 20e10

[01:41] <p6eval> std 516268a: OUTPUT«ok 00:01 127m␤»

[01:41] <pmichaud> what should the result be of something like  "xyz" == 3   ?

[01:42] <TimToady> failure of some sort, I'd think

[01:42] *** felliott_ joined
[01:42] *** felliott left
[01:42] *** felliott_ is now known as felliott

[01:42] <TimToady> or maybe we should just say that's NaN == 3

[01:42] <pmichaud> so, looks like we're at the point where we have to get all of the operators to propagate failure operands.

[01:43] <pmichaud> oh, I could have "xyz".Numeric return NaN instead of Failure, I suppose.

[01:43] <TimToady> or by the other rules, as soon as you use it in ==, it throws

[01:43] <pmichaud> well, the problem I'm having is a lot ot throwing where strings are being tested against infinity using ==

[01:46] <pmichaud> so where Rakudo used to treat "xyz".Numeric as 0, it now comes back with a failure and things blow up

[01:46] <pmichaud> s/blow up/get thrown/

[01:46] <pmichaud> like coffee mugs at a perl conference

[01:46] <TimToady> a warning on loss of info when Failure converts to NaN maybe

[01:47] <pmichaud> so, Failure.Numeric converts to NaN and warns... I could handle that

[01:47] <pmichaud> well, I still need to remove the tests for infinity

[01:47] <pmichaud> or come up with better tests :-)

[01:48] <pmichaud> maybe Inf.ACCEPTS(...)

[01:52] <pmichaud> are there any cases where  $concrete.ACCEPTS(Abstract)  is likely to be true?

[02:00] <pmichaud> I think I'll temporarily go back to defaulting to zero until I can think through this a bit more.

[02:00] *** dayangkun_ joined
[02:00] <pmichaud> maybe go over it again at yapc::eu, if not before then.

[02:01] <pmichaud> oh, first I'll try the NaN+warn option

[02:02] <pmichaud> oh, that looks icky also.

[02:02] * pmichaud punts to yapc::eu or later #perl6 discussion.

[02:03] *** dayangkun left
[02:03] *** kfo_ joined
[02:06] *** kfo left
[02:11] <felliott> nom: for 0,1 { say "moo"; sub hello() {}; }

[02:11] <p6eval> nom: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤current instr.: '_block1010' pc 419 ((file unknown):281) (/tmp/s5NpUhb0Hz:1)␤»

[02:12] <felliott> nom: for 0,1 -> $a { say "moo"; sub hello() {}; }

[02:12] <p6eval> nom: OUTPUT«moo␤moo␤»

[02:12] <pmichaud> I'm guessing that the sub is somehow messing up the signature of the outer block.

[02:12] <pmichaud> might be a misplaced contextual somewhere (PerlJam++)

[02:13] <pmichaud> nom: for 0,1 -> $a { say 'moo'; sub hello($x) {}; }

[02:13] <felliott> not sure if it's relevant, but the second one generates about 30 more lines of pir than the first.

[02:13] <p6eval> nom: OUTPUT«moo␤moo␤»

[02:13] <pmichaud> nom: for 0,1 { say 'moo'; sub hello($x) {}; }

[02:13] <felliott> Otherwise, they're almost line-for-line identical

[02:13] <p6eval> nom: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤current instr.: '_block1010' pc 419 ((file unknown):601) (/tmp/Q3DRNSj9C1:1)␤»

[02:13] <pmichaud> well, yes, the second one has more to do/check.

[02:14] <pmichaud> I don't know if it's worth 30 lines of pir of difference, but it could easily be that way.

[02:25] *** envi left
[02:27] *** envi joined
[02:27] <dalek> nqp: dad45a0 | pmichaud++ | src/ops/nqp.ops:

[02:27] <dalek> nqp: Fix off-by-one error in radix conversion.

[02:27] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dad45a076e

[02:29] *** dayangkun_ left
[02:29] *** dayangkun_ joined
[02:31] *** Holy_Cow joined
[02:31] *** Holy_Cow left
[02:36] *** dayangkun_ left
[02:37] <pmichaud> nom:  say (2.Rat - 1.Rat).WHAT

[02:37] <p6eval> nom: OUTPUT«Rat()␤»

[02:58] *** lichtkind left
[03:18] *** xinming left
[03:19] *** jaldhar joined
[03:23] *** Su-Shee_ joined
[03:26] *** ab5tract left
[03:27] *** Su-Shee left
[03:35] *** bluescreen10 left
[03:46] *** cooper left
[03:46] *** cooper joined
[04:04] <dalek> roast: 7e7c061 | pmichaud++ | S32-num/int.t:

[04:04] <dalek> roast: Update spectest for Str.Numeric conversion.

[04:04] <dalek> roast: review: https://github.com/perl6/roast/commit/7e7c0619c9

[04:06] *** molaf joined
[04:07] <pmichaud> std: say 5.

[04:07] <p6eval> std 516268a: OUTPUT«===SORRY!===␤Decimal point must be followed by digit at /tmp/e9Abxck8td line 1:␤------> say 5.⏏<EOL>␤Unsupported use of . to concatenate strings; in Perl 6 please use ~ at /tmp/e9Abxck8td line 1 (EOF):␤------> say 5.⏏[3…

[04:20] *** satyavvd joined
[04:22] *** JimmyZ joined
[04:23] <dalek> rakudo/nom: 6b3b601 | pmichaud++ | src/core/operators.pm:

[04:23] <dalek> rakudo/nom: Fix regression introduced in ef31cef.  According to S03-sequence/basic.t,

[04:23] <dalek> rakudo/nom: a sequence of Rats should remain a sequence of Rats, even if the

[04:23] <dalek> rakudo/nom: denominators are 1.  Instead of narrowing values, narrow the geometric

[04:23] <dalek> rakudo/nom: factor whenever its denominator is 1.

[04:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6b3b6011c3

[04:23] <dalek> rakudo/nom: 90a61f8 | pmichaud++ | src/core/Cool.pm:

[04:23] <dalek> rakudo/nom: Fix some bugs in .rindex method.

[04:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/90a61f895f

[04:23] <dalek> rakudo/nom: 3923684 | pmichaud++ | / (2 files):

[04:23] <dalek> rakudo/nom: More Str.Numeric fixes and improvements.

[04:23] <dalek> rakudo/nom: 

[04:23] <dalek> rakudo/nom: Although converting a string with no number is supposed to fail,

[04:23] <dalek> rakudo/nom: doing so causes all sorts of issues throughout the spectests with

[04:23] <dalek> rakudo/nom: no clear-cut solutions.  Therefore I'm fixing the conversion to

[04:23] <dalek> rakudo/nom: treat non-numbers as integer zero for now, until we can regroup

[04:23] <dalek> rakudo/nom: and figure out how we want to handle the failure cases.

[04:23] <dalek> rakudo/nom: 

[04:23] <dalek> rakudo/nom: Note that any non-whitespace characters following a valid number

[04:23] <dalek> rakudo/nom: or partial number still results in a failure, though.

[04:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3923684cbe

[04:26] *** kaare__ joined
[04:30] *** JimmyZ left
[04:43] *** xinming joined
[04:43] *** cipherte1t left
[04:57] *** ciphertext joined
[05:00] *** birdwindupbird joined
[05:01] *** felher left
[05:06] *** felliott left
[05:13] *** felher joined
[05:18] <moritz> good morning

[05:23] *** [particle] left
[05:24] *** simcop2387 left
[05:25] *** JodaZ_ joined
[05:25] *** jaldhar left
[05:25] *** [particle] joined
[05:25] *** ciphertext left
[05:25] *** renormalist joined
[05:25] *** jaldhar joined
[05:26] *** JodaZ left
[05:26] *** ciphertext joined
[05:28] *** simcop2387 joined
[05:31] *** perlhack joined
[05:32] *** molaf left
[05:32] *** cooper left
[05:32] *** cooper joined
[05:33] <perlhack> how long popular perl6 ?

[05:33] <perlhack> :-)

[05:34] <moritz> this question no verb

[05:34] <sorear> adjectives are NOT considered verbs in English

[05:35] <sorear> you need a copula in there

[05:35] <sorear> it's not clear whether you're talking about the past or the future, too

[05:36] <PerlJam> perlhack: now. forever.

[05:36] <dalek> roast: 737dfa2 | moritz++ | S03-sequence/basic.t:

[05:36] <dalek> roast: unfudge a series test for rakudo that tadzik++ made pass

[05:36] <dalek> roast: review: https://github.com/perl6/roast/commit/737dfa28b2

[05:36] <perlhack> thanks for moritz and sorear.

[05:37] <moritz> nom: for <100 0d10 0xa0.f 2+3i> { say +$_, ' ', (+$_).WHAT }

[05:37] <p6eval> nom: OUTPUT«100 Int()␤10 Int()␤trailing characters after number in conversion␤current instr.: 'rethrow' pc 500134 (src/gen/CORE.setting.pir:140359) (src/gen/CORE.setting:3916)␤»

[05:37] <moritz> nom: for <100 0d10 0xa0.f 2+3i> { try {  say +$_, ' ', (+$_).WHAT } }

[05:37] <p6eval> nom: OUTPUT«100 Int()␤10 Int()␤»

[05:38] <pmichaud> Str.Numeric doesn't do complex values yet

[05:38] <pmichaud> is 0xa0.f legal?

[05:38] *** perlhack left
[05:38] <moritz> std: 0xa0.f

[05:38] <p6eval> std 516268a: OUTPUT«ok 00:01 118m␤»

[05:38] <moritz> hm, could be a method call

[05:39] <moritz> I don't think it's a legal literal

[05:39] <moritz> :16<a0.f> would be

[05:39] <moritz> nom: say ':16<a0.f>'.Numeric

[05:39] <p6eval> nom: OUTPUT«0␤»

[05:39] <pmichaud> thus far I've decided that :16<...> can be a fallback to the compiler

[05:39] <moritz> nom: say '4/5'.Numeric

[05:39] <p6eval> nom: OUTPUT«trailing characters after number in conversion␤current instr.: 'rethrow' pc 500134 (src/gen/CORE.setting.pir:140359) (src/gen/CORE.setting:3916)␤»

[05:39] <sorear> niecza: 0xa0.f

[05:39] <p6eval> niecza v7-37-g20310bc: OUTPUT«Unhandled exception: Unable to resolve method f in class Int␤  at /tmp/_uWs9SHEQZ line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1890 (CORE C885_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1891 (CORE module-CORE @ 5…

[05:40] <pmichaud> same for num/den

[05:40] <pmichaud> but if someone wants to patch those into Str.Numeric, I'll be glad to see it :)

[05:40] <moritz> pmichaud: I'm curious, why did you write it in Perl 6, and not nqp?

[05:41] <moritz> pmichaud: that way it'll be harder to reuse in the actions

[05:41] <pmichaud> the nqp::radix opcode comes from nqp :-)

[05:41] <pmichaud> I can make an equivalent nqp function, if you wish :)

[05:41] <pmichaud> and then have Str.Numeric use that.

[05:41] <pmichaud> The tricky part is knowing how/where to have the Perl 6 code be able to access the NQP function

[05:42] <pmichaud> also, this was more "get it working" than "final design"

[05:43] <moritz> ok

[05:43] <pmichaud> do we have any Perl 6 code that is accessing NQP functions or methods yet?

[05:43] <pmichaud> I mean, other than for object protocol stuff?

[05:44] <moritz> I have no idea

[05:44] <pmichaud> I wasn't quite sure how to do that, without resorting to roles like we've done for match objects.

[05:45] <pmichaud> let me check what's in the bootstrap for the namespace defaults

[05:45] <pmichaud> anyway, I do plan to put a close equivalent into HLL::Actions

[05:46] <pmichaud> and Perl6::Actions can likely use that, although rats are still a bit tricky

[05:54] <sorear> rakudo: .say if /B/ ff /D/ for <A B C D E>;

[05:54] <p6eval> rakudo 1ddda5: OUTPUT«===SORRY!===␤Flip flip operators are not yet implemented at line 22, near " /D/ for <"␤»

[05:54] <sorear> pmichaud: have you looked at felliott's patch?

[05:55] <pmichaud> I discussed one with him last week; didn't look in great detail at the one he supplied today.

[05:56] *** agentzh joined
[05:56] <sorear> o/ agentzh

[05:56] <agentzh> sorear: hiya

[05:56] * sorear tried to port it to niecza but failed

[05:58] <sorear> I wonder how reasonable it would be to special case BEGIN { @*INC.push("literal") } for niecza.

[05:59] <pmichaud> falling asleep here, so I'll be back in a few hours.  Tomorrow is house-cleaning day, though, to prepare for guests this weekend 

[06:00] <sorear> e.g. I am looking at packages/A.pm in roast

[06:00] <sorear> wondering how this can work on niecza

[06:00] <sorear> I don't like the idea of disabling half of the package tests just for implementations that lack BEGIN

[06:01] <sorear> orthogonality of testing...

[06:01] *** dayangkun joined
[06:04] * agentzh just clones niecza.

[06:05] <sorear> ambiguous use of adverb 'just'

[06:07] <agentzh> sorear: lol...well, i mean i cloned niecza just now and want to look deeper ;)

[06:08] <sorear> ...thanks?

[06:08] <sorear> what are you interested in?

[06:09] <agentzh> sorear: the performance goal ;)

[06:09] <agentzh> sorear: i'll be very happy if just a subset of perl6 can be run fast enough :)

[06:10] <agentzh> sorear: such that i can use it in production for our business :)

[06:10] * moritz too, if that subset is big enough :-)

[06:10] <agentzh> moritz: a useful sebset like NQP :)

[06:11] <moritz> agentzh: have you benchmarked NQP?

[06:11] <moritz> agentzh: it's not slow

[06:11] <agentzh> moritz: to be honest, i haven't done that recently :P i'll try the norm branch :)

[06:12] * sorear calls NQP slow, but ey has unreasonable standards.

[06:12] * agentzh thinks perl 5 is also slow at times.

[06:12] *** Su-Shee_ is now known as Su-Shee

[06:12] <moritz> sorear: have you benchmarked nqp recently?

[06:13] <moritz> sorear: where by "recently" I mean after it got native number?

[06:14] <sorear> I don't think I need to, I've benchmarked PIR and call it slow.

[06:16] <sorear> I'm very pessimistic about the chances for any current Perl 6 implementation to beat Perl 5 on graph-intensive code

[06:16] <moritz> what do you mean by "graph-intensive code"?

[06:18] <agentzh> cpu-intensive code that writes images? *grin*

[06:18] <sorear> moritz: allocate a bunch of objects and chasing pointers between them, calling methods, not doing much arithmetic

[06:19] <sorear> the kind of projects I tend to be involved in :)

[06:25] *** mberends joined
[06:34] <mberends> phenny, tell perlhack the following British reference estimates that a vocabulary of 1500 English words is a practical minimum. http://www.bbc.co.uk/news/14130942

[06:34] <phenny> mberends: I'll pass that on when perlhack is around.

[06:34] <sorear> perlhack's vocabulary is fine

[06:34] <sorear> but ey hasn't quite grokked English grammar

[06:35] <mberends> sure, I just noticed in backlogging that a number interested em

[06:35] <sorear> ey has this idea that adjectives can be used directly as verbs, which they can be - in Chinese and Japanese

[06:35] <TimToady> sorear: you're not really helping with the spivaking :)

[06:36] <mberends> it's infectious ;)

[06:36] <dalek> niecza: f5e9082 | sorear++ | src/ (6 files):

[06:36] <dalek> niecza: mergeback

[06:36] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f5e9082b37

[06:36] <sorear> TimToady: I do it for myself

[06:37] <TimToady> yes, but it doesn't help perlhack++ understand English :)

[06:37] <sorear> ah.

[06:37] <TimToady> .oO('course, *I* never mangle the language, oh no...)

[06:40] <mberends> oh no

[06:46] <sorear> rakudo: use lib '/tmp/;

[06:46] <p6eval> rakudo 1ddda5: OUTPUT«===SORRY!===␤Unable to find module 'lib' in the @*INC directories.␤(@*INC contains:␤  lib␤  /home/p6eval/.perl6/lib␤  /home/p6eval//p1/lib/parrot/3.5.0-devel/languages/perl6/lib␤  .)␤»

[06:59] *** mj41 joined
[07:03] * sorear out

[07:04] *** Jackneill joined
[07:04] *** Jackneill left
[07:04] *** Jackneill joined
[07:09] *** wtw joined
[07:14] *** wamba joined
[07:23] <dalek> rakudo/nom: 48ba2f3 | moritz++ | tools/build/Makefile.in:

[07:23] <dalek> rakudo/nom: [build] "make test" needs to depend on Test.pir, because the last test attempts to load Test.pm

[07:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/48ba2f325e

[07:27] *** cooper left
[07:34] *** Jackneill left
[07:36] *** jdhore joined
[07:49] *** dayangkun_ joined
[07:52] *** dayangkun left
[07:53] <szabgab> ohai

[07:53] <szabgab> I think I am confused again

[07:53] *** Jackneill joined
[07:53] *** Jackneill left
[07:53] *** Jackneill joined
[07:53] <szabgab> I just tried to build rakudo on Windows with Strawberry Perl

[07:54] <szabgab> and it complains that it cannot find mingw32-make

[07:54] <szabgab> when trying to do a realclean

[07:59] <szabgab> anyone around with some Windows fu ?

[08:01] *** mberends left
[08:05] *** im2ee joined
[08:12] *** beekor left
[08:17] *** mberends joined
[08:17] <moritz> is that fatal?

[08:18] <szabgab> moritz: you mean that it does not find the mingw32-make?

[08:18] <moritz> yes

[08:18] <szabgab> yes it is

[08:18] <szabgab> let me paste

[08:19] *** tomize left
[08:20] <szabgab> https://gist.github.com/1084313

[08:21] <szabgab> anyway, rakudo * is coming out in 2 weeks, right?

[08:22] <szabgab> will it be based on what is in trunk now?

[08:22] <moritz> which rakudo branch is that?

[08:22] <szabgab> mster

[08:22] <szabgab> master

[08:22] <moritz> we've had some discussions about star releases, but I don't remember the outcome :/

[08:23] <szabgab> I'd like to build the win32 immediately when rakudo* comes out

[08:23] <szabgab> if possible even before the announcement of rakudo*

[08:23] <szabgab> so which branch should I try?

[08:23] <moritz> szabgab: I think the problem might be that we try to use a 'make' utility for 'make realclean' before parrot has detected which one to use

[08:24] <moritz> szabgab: try to change build/gen_parrot.pl line 76 from 'system_or_die' to just 'system'

[08:25] <moritz> szabgab: if that fixes the overall build, I'll push that fix to master

[08:25] *** Mowah joined
[08:26] <szabgab> there is not "build" directory

[08:26] <szabgab> wait

[08:26] <szabgab> my bad

[08:28] <szabgab> I found the build directory , now trying to build it

[08:28] <szabgab> it will take some time as this is a small machine

[08:30] *** agentzh left
[08:39] *** im2ee left
[08:39] *** im2ee joined
[08:45] <moritz> szabgab: btw, is this a rakudo compiler build, or a "star" build you are trying?

[08:46] <szabgab> https://gist.github.com/1084337

[08:46] <szabgab> parrot failed but I think it complaine about a parrot version being around right from the beginning

[08:48] <szabgab> renaming libparrot.dll and trying again

[08:50] <szabgab> moritz: right now I am just trying to build rakudo but what I'd like to make sure is that when * is released (in 2 weeks?) then I can build it on windows and package it as I did 6 weeks ago

[08:50] <moritz> szabgab: since pmichaud does the R* releases for now, it's him you have to talk to about that

[08:50] <moritz> szabgab: I'd certainly appreciate it if we had windows binaries

[08:50] <szabgab> ok, I'll try to catch him later

[08:51] <szabgab> but for now let's see if I can build trunk 

[08:52] <szabgab> or if you think I should try some other branch then let know and I'll try that

[08:57] <moritz> in the long run it's more interesting to see if you can build the 'nom' branch

[08:57] <moritz> (though it's not installable yet)

[08:57] *** wamba left
[09:02] <szabgab> I tried to switch to it but I think      git co nom   did not do the right thing

[09:04] *** am0c left
[09:05] *** daxim joined
[09:12] *** wamba joined
[09:18] *** donri joined
[09:19] *** Chillance joined
[09:22] *** [particle]1 joined
[09:24] *** [particle] left
[09:25] <szabgab> moritz: parrot built successfully and told me to gmake but I had to rename (or remove) both the parrot_install directory and the libparrot.dll that would have been done by the realclean of parrot I think

[09:25] <szabgab> so I think the fix need to include the removal of those items as well

[09:27] <moritz> szabgab: have you used that build directory with a different toolchain before?

[09:27] <szabgab> I don't think so

[09:27] <szabgab> I built rakudo earlier with strawberry only

[09:29] <moritz> then I don't really understand the failure mode :(

[09:29] <moritz> btw 'make realclean' never removes the parrot_install directory

[09:30] <szabgab> probably the problem I had (after your suggested fix) was caused by the libparrot.dll

[09:31] <szabgab> that was built from an older parrot

[09:47] *** ciphertext left
[09:52] <szabgab> moritz: https://gist.github.com/1084408   another fail :(

[09:53] <dalek> roast: 2b7dab1 | moritz++ | S32-str/rindex.t:

[09:53] <dalek> roast: some rakudo unfudges in rindex.t

[09:53] <dalek> roast: review: https://github.com/perl6/roast/commit/2b7dab1573

[09:54] *** ciphertext joined
[10:01] <moritz> ugh

[10:01] <moritz> szabgab: what does 'git describe' print in the rakudo repo?

[10:04] *** woosley left
[10:06] <szabgab> 2011.06-6-g1ddda5e

[10:06] <szabgab> I hate it when my neighbor turns off his wifi...

[10:07] *** dayangkun_ left
[10:12] *** Kivutarrr joined
[10:15] *** pochi left
[10:52] <dalek> roast: dea1e41 | moritz++ | S32-str/rindex.t:

[10:52] <dalek> roast: unfudge the rest of the rindex tests that rakudo master passed

[10:52] <dalek> roast: review: https://github.com/perl6/roast/commit/dea1e41000

[10:53] <dalek> rakudo/nom: 3bf08d5 | moritz++ | src/core/Cool.pm:

[10:53] <dalek> rakudo/nom: handle case of empty needle in rindex

[10:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3bf08d5788

[11:07] *** mberends left
[11:20] *** Trashlord joined
[11:28] *** im2ee left
[11:32] *** woosley joined
[11:33] *** satyavvd left
[11:36] *** im2ee joined
[11:41] *** smash left
[11:45] *** sunnavy left
[11:45] *** sunnavy joined
[11:46] *** JimmyZ joined
[11:46] *** ruoso left
[11:46] *** Raynes left
[11:46] *** ruoso joined
[11:47] *** tylercurtis left
[11:48] <JimmyZ> good evening, #perl6

[11:48] *** Raynes joined
[11:49] *** mberends joined
[11:55] *** tylercurtis joined
[11:57] <takadonet> morning all

[12:02] *** JimmyZ_ joined
[12:03] *** JimmyZ_ left
[12:05] *** JimmyZ left
[12:20] *** bluescreen10 joined
[12:31] *** molaf joined
[12:55] *** Aridai joined
[12:58] *** felliott joined
[12:59] <[Coke]> NYI form of number litereal encountered

[12:59] <[Coke]> --rakudo/nom

[13:00] *** Aridai left
[13:08] *** Instil left
[13:10] *** soh_cah_toa left
[13:13] *** skangas joined
[13:14] *** Holy_Cow joined
[13:15] *** im2ee left
[13:16] *** Holy_Cow left
[13:16] *** im2ee joined
[13:17] <pmichaud> good morning, #perl6

[13:17] <mberends> o/

[13:18] <takadonet> pmichaud: morning

[13:18] <[Coke]> looks like we're losing spec tests:

[13:18] <[Coke]> Files=249, Tests=6913

[13:19] <[Coke]> pmichaud: how goes?

[13:20] <pmichaud> we may be losing tests due to premature script deaths

[13:23] *** wtw left
[13:28] <moritz> aye, the Str.Numeric changes did have some fallout

[13:28] <szabgab> pmichaud: good morning

[13:29] <szabgab> pmichaud: I was trying to build Rakudo on Windows but failed so far

[13:29] <szabgab> some info in he backlog, if anyone could help me further

[13:29] <pmichaud> szabgab: which version?  the master branch or the nom branch?

[13:32] <szabgab> master branch

[13:33] <pmichaud> okay, I'll look into it.  There have been reports lately of difficulties building Parrot on Windows.

[13:33] <szabgab> pmichaud: though before we try it, actually what I'd like to , is to make sure I'll be able to build Rakudo* when it comes out in 2 weeks

[13:33] <szabgab> so will it be based on master or nom?

[13:34] <szabgab> or am I missing something? :)

[13:34] <pmichaud> our plan is that the july compiler release (next thursday) and the july star release will be based on master

[13:35] <pmichaud> then we're going to have another compiler release and distribution release (may or may not be 'star') in early august, before yapc::eu

[13:35] <pmichaud> that's the tentative plan for now

[13:36] <szabgab> I see

[13:36] <szabgab> so I'll try to be around and build * on Windows and package it to be installable

[13:36] <szabgab> preferable even before you send out the announcement about the new release

[13:38] <pmichaud> okay, works for me.  I'll keep you posted.

[13:38] <szabgab> thanks

[13:39] <szabgab> but for now I had some issues on my netwbook

[13:39] *** [Coke] left
[13:39] <szabgab> I'll try it now on my virual "build machine" as well

[13:41] *** [Coke] joined
[13:43] *** [particle]1 is now known as [particle]

[13:43] <moritz> virual - virtual and viral at the same time!

[13:43] *** drbean left
[13:43] <szabgab> :)

[13:43] <moritz> pmichaud: I'm curious, what did you use as test cases when you did the Str.Numeric implementation?

[13:43] <pmichaud> just a few simple ones

[13:43] <moritz> ok

[13:44] <moritz> nom: say "12.3_4e-0_1".Numeric # just checking

[13:44] <p6eval> nom: OUTPUT«1.234␤»

[13:44] <pmichaud> \o/

[13:45] <pmichaud> I should test against S32-str/numeric.t

[13:46] <pmichaud> is_approx "20." / "5.", 4;

[13:46] <pmichaud> remove this test from S03-operators/arith.t ?

[13:46] <moritz> or remove the trailing .

[13:46] <pmichaud> I think the trailing . is what made the test unique

[13:46] <moritz> then delete it

[13:46] <pmichaud> # The example for sloppy divide, rigged to avoid the peephole optimiser.

[13:46] <pmichaud> is_approx "20." / "5.", 4;

[13:47] <moritz> oh, it's an imported-from-p5 test

[13:48] <dalek> roast: 8afd7a2 | pmichaud++ | S03-operators/arith.t:

[13:48] <dalek> roast: Remove p5-thinko test from S03-operators/arith.t .

[13:48] <dalek> roast: review: https://github.com/perl6/roast/commit/8afd7a229a

[13:49] <pmichaud>     my $a = '2 is my favorite number';

[13:49] <pmichaud>     isa_ok(+$a, Num, 'it is forced into a Num');

[13:49] <pmichaud> how about this test?  remove it?

[13:49] <moritz> yes

[13:49] <pmichaud> check for failure?

[13:50] <moritz> yes, but in numeric.t

[13:50] <moritz> we don't have cases of trailing ws + non-ws yet, iirc

[13:53] *** ng1962 joined
[13:54] <dalek> roast: c008d8f | pmichaud++ | S03-operators/context-forcers.t:

[13:54] <dalek> roast: Fudge and fix tests relying on Str.Numeric .

[13:54] <dalek> roast: review: https://github.com/perl6/roast/commit/c008d8f739

[13:56] <pmichaud> that gets us back to 7,055 tests.

[13:56] <[Coke]> pmichaud++

[13:56] <[Coke]> (now everyone stop distracting him from finishing up the regex wiring. ;)

[13:56] <pmichaud> this morning I'm going to be distracted by house cleanup :-/

[13:57] <moritz> yeah, sorry for the interruption

[13:57] <[Coke]> Would that I could send over some minions to assist. ;()

[13:57] <[Coke]> er, ;)

[13:57] <pmichaud> f     'a+123';

[13:57] <pmichaud> Is there a way to #?rakudo todo that test?

[13:58] <moritz> it should just work with #?rakudo todo

[13:58] <moritz> because I've marked sub f with #?DOES

[13:59] <pmichaud> that didn't seem to work.

[13:59] <moritz> hm

[14:00] <moritz> you can #?rakudo emit #

[14:00] <moritz> that skews the test plan, but that's not so tragic since it's planless testing

[14:01] <dalek> roast: 32042f0 | moritz++ | S32-str/numeric.t:

[14:01] <dalek> roast: test numification with trailing ws plus non-ws

[14:01] <dalek> roast: review: https://github.com/perl6/roast/commit/32042f0a6b

[14:02] <pmichaud> I'm probably wrong, but I thought that #?todo worked by syntactically looking for is|ok|nok|isa_ok|....

[14:02] <pmichaud> so it won't be able to find 'f'

[14:02] <moritz> and I thought that #?DOES extends that list

[14:02] <pmichaud> oh, maybe it does.

[14:02] <moritz> but it seems I'm wrong

[14:02] <pmichaud> or maybe it DOESNT :-P

[14:02] <moritz> I can confirm that it doesn't work here

[14:03] <moritz>     #?DOES count

[14:03] <moritz>         for all implementations, the following thing does count tests

[14:03] <moritz>         (disables any attempt to autocount tests within the construct)

[14:03] <moritz>         when construct is a sub, registers the sub name as tester

[14:03] <moritz>         (and multiplies calls to tester sub by count tests)

[14:03] <moritz> so, it is supposed to

[14:03] <pmichaud> okay

[14:03] <pmichaud> I'll just do an emit for now.

[14:05] <pmichaud> check '-0d123',     Int,    123;

[14:05] <pmichaud> should be -123, yes?

[14:05] <moritz> yes

[14:05] <pmichaud> nom +1  :-P

[14:05] <moritz> pmichaud++ # test review

[14:05] <pmichaud> it's nom that's really doing the review :)

[14:06] <moritz> then pmichaud++ # reviewing the review

[14:06] <pmichaud> not sure how to mark the tests after #55 as being todo/skip, though. 

[14:06] <moritz> you can enclose them in a block of curlies

[14:06] <pmichaud> oh, I can skip a block.

[14:07] <pmichaud> yes

[14:07] <moritz> and add a #?rakudo skip in front

[14:08] <pmichaud> check '123.',       Rat,    123;

[14:08] <pmichaud> remove, or change to 'f' ?

[14:08] <moritz> the latter

[14:10] * moritz doesn't really grok the fudge code

[14:12] <moritz> but the offending line might be 190

[14:12] <dalek> roast: 3e4d1c5 | pmichaud++ | S32-str/numeric.t:

[14:12] <dalek> roast: Initial fudge for nom, correct a few tests.

[14:12] <dalek> roast: review: https://github.com/perl6/roast/commit/3e4d1c5c46

[14:17] <dalek> roast: 805fea2 | moritz++ | fudge:

[14:17] <dalek> roast: [fudge] allow todo() and skip() of custom test subs (installed via #?DOES)

[14:17] <dalek> roast: review: https://github.com/perl6/roast/commit/805fea2915

[14:19] *** [Coke] left
[14:19] *** [Coke] joined
[14:22] *** ng1962 left
[14:23] <moritz> pmichaud: should I fudge the rest of the failures out for now?

[14:23] <pmichaud> I have some more fixes coming.

[14:24] <dalek> roast: 83b6499 | pmichaud++ | S32-str/numeric.t:

[14:24] <dalek> roast: More fudges and fixes for nom in S32-str/numeric.t .

[14:24] <dalek> roast: review: https://github.com/perl6/roast/commit/83b649996b

[14:25] *** im2ee left
[14:25] <moritz> nom: say +"Inf"

[14:25] <p6eval> nom: OUTPUT«0␤»

[14:25] <pmichaud> Now fixed locally.

[14:25] <pmichaud> Doing a spectest run now and then will push.

[14:25] <moritz> \o/

[14:25] *** im2ee joined
[14:26] *** im2ee left
[14:27] *** im2ee joined
[14:27] <pmichaud> that brings us to 7,214.  moritz++ for excellent Str.Numeric tests

[14:27] <dalek> rakudo/nom: 8c957ea | pmichaud++ | / (2 files):

[14:27] <dalek> rakudo/nom: Add Inf and NaN to Str.Numeric.  Add S32-str/numeric.t to spectests.

[14:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8c957ea17d

[14:33] *** lestrrat left
[14:34] *** lestrrat joined
[14:34] *** zloyrusskiy joined
[14:37] *** molaf left
[14:44] *** mkramer left
[14:46] *** PacoLinux left
[14:47] *** PacoLinux joined
[14:50] *** cognominal_ joined
[14:53] *** cognominal left
[14:59] *** cognominal_ left
[14:59] *** cognominal_ joined
[15:03] *** thou joined
[15:12] <[Coke]> http://www.stargit.net/#coke   #just saw this in #parrot.

[15:13] <pmichaud> http://www.stargit.net/#rakudo

[15:14] *** woosley left
[15:17] <sbp> "The graph for sbp contains 0 nodes and 0 edges"

[15:18] <sbp> easy to do graph isomorphism on, at least

[15:19] <PerlJam> my node on http://www.stargit.net/#rakudo doesn't even get a label

[15:19] <PerlJam> though I always seem to be on the opposite side of the visualization from ingy

[15:20] <dalek> roast: 160967f | pmichaud++ | S32-str/numeric.t:

[15:20] <dalek> roast: Add some more "num/den".Numeric tests.

[15:20] <dalek> roast: review: https://github.com/perl6/roast/commit/160967fae9

[15:21] <dalek> rakudo/nom: ff6f2f9 | pmichaud++ | src/core/Str.pm:

[15:21] <dalek> rakudo/nom: Refactor Str.Numeric a bit for clarity, add "num/den" conversion.

[15:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ff6f2f9482

[15:28] *** daxim left
[15:29] <pmichaud> I wonder if it's worth caching the numeric value in a Str object once we've computed it.

[15:29] <pmichaud> or even keeping a cache of already-done conversions.

[15:30] <[Coke]> sounds like an optimization (so I wouldn't bother yet.)

[15:37] *** masak joined
[15:37] <masak> yo, zebry.

[15:39] <pmichaud> yo

[15:43] <masak> rakudo: my @a = 1, 2, 3; say 3 == any @a, 4, 5

[15:43] <p6eval> rakudo 1ddda5: OUTPUT«any(Bool::False, Bool::True)␤»

[15:43] <masak> rakudo: my @a = 1, 2, 3; say so 3 == any @a, 4, 5

[15:43] <p6eval> rakudo 1ddda5: OUTPUT«Bool::True␤»

[15:44] <dalek> roast: 2f482ef | pmichaud++ | S03-metaops/zip.t:

[15:44] <dalek> roast: Fix broken fudge.

[15:44] <dalek> roast: review: https://github.com/perl6/roast/commit/2f482ef13c

[15:45] *** mj41 left
[15:48] <pmichaud> nom:  say +"3/4" # checking

[15:49] <p6eval> nom: OUTPUT«0.75␤»

[15:50] *** Holy_Cow joined
[15:50] *** ycxiu joined
[15:50] <masak> I'm warming to that feature already :)

[15:51] <moritz> nom: say "3/4".Numeric.WHAT

[15:51] <p6eval> nom: OUTPUT«Rat()␤»

[15:51] *** bluescreen10 left
[15:51] <pmichaud>     my $a = "0d01.01";

[15:51] <pmichaud>     isa_ok(+$a, Rat);

[15:51] <pmichaud>     is(+$a, 1, "0d01.01 numifies to 1");

[15:51] <pmichaud> remove this, yes?

[15:52] *** ycxiu left
[15:53] <masak> what type should it numify to if not Rat?

[15:53] <masak> but yes, the latter test looks wrong.

[15:53] <pmichaud> it's an error.  0d  doesn't allow fractional parts

[15:53] <masak> oh!

[15:53] *** jerome left
[15:53] <masak> well, then.

[15:53] <moritz> std: 0d01.01

[15:53] <p6eval> std 516268a: OUTPUT«===SORRY!===␤Confused at /tmp/rDQKW6dZt4 line 1:␤------> 0d01.⏏01␤    expecting postfix_prefix_meta_operator␤Parse failed␤FAILED 00:01 119m␤»

[15:54] <moritz> ah, needs :10<...> notation to allow fractional

[15:56] *** bluescreen10 joined
[15:56] <masak> felliott: I've now fixed all the bugs you reported. felliott++

[15:56] <masak> next up: dinner, then add descriptions to all the rooms and all the objects.

[15:56] <masak> &

[15:58] <dalek> roast: 0b50b2c | pmichaud++ | S02-builtin_data_types/num.t:

[15:58] <dalek> roast: Fix a broken test in S02-builtin_data_types/num.t, defudge some passing

[15:58] <dalek> roast: tests for nom.

[15:58] <dalek> roast: review: https://github.com/perl6/roast/commit/0b50b2c23b

[16:05] *** felliott left
[16:07] <sorear> good * #perl6

[16:12] *** Mowah left
[16:12] *** wolfman2000 left
[16:28] *** nebuchadnezzar left
[16:31] *** nebuchadnezzar joined
[16:32] *** Mowah joined
[16:40] *** Instil joined
[16:42] *** Chillance left
[16:43] *** spq1 joined
[16:51] *** jevin left
[16:51] *** birdwindupbird left
[16:53] *** jevin joined
[17:06] *** thundergnat joined
[17:08] *** jferrero joined
[17:09] <thundergnat> Should array (or hash) elements autovivify the first time they are modified during a hyper op?  Or am I making rash assumptions?

[17:09] <thundergnat> rakudo:  my @a; @a[0,0,0,0] <<+=>> (4,3,2,1); say @a;

[17:09] <p6eval> rakudo 1ddda5: OUTPUT«1␤»

[17:10] <thundergnat> But if you pre initialize the array....

[17:10] <thundergnat> rakudo: my @a=(0); @a[0,0,0,0] <<+=>> (4,3,2,1); say @a;

[17:10] <p6eval> rakudo 1ddda5: OUTPUT«10␤»

[17:11] <thundergnat> It seems like the it doesn't autovivify.

[17:12] <thundergnat> Maybe the answer is "Don't do that." But if that was the case, I would expect the preinitialized array to have the same problem.

[17:13] <sorear> thundergnat: it does autovivify.  four times

[17:14] <thundergnat> nom: my @a; @a[0,0,0,0] <<+=>> (4,3,2,1); say @a; # just wondering

[17:14] <p6eval> nom: OUTPUT«Contextual $*UNITPAST not found␤current instr.: 'nqp;Perl6;Actions;_block1409' pc 19857 (src/gen/perl6-actions.pir:6358) (src/Perl6/Actions.pm:2618)␤»

[17:14] <sorear> thundergnat: @a[0,0,0,0] creates four elements, which fight to get installed in the @a[0] slot

[17:14] <sorear> only one can win

[17:17] <jlaire> niecza: my @a; @a[0,0,0,0] <<+=>> (4,3,2,1); say @a

[17:17] <p6eval> niecza v7-38-gf5e9082: OUTPUT«1␤»

[17:21] *** thou left
[17:27] *** mjreed joined
[17:40] *** jevin left
[17:43] *** jevin joined
[17:46] <dalek> roast: bbf0a8a | moritz++ | S (3 files):

[17:46] <dalek> roast: some unfudges for rakudo

[17:46] <dalek> roast: review: https://github.com/perl6/roast/commit/bbf0a8af63

[17:52] *** masak left
[17:58] *** mjreed left
[18:00] <TimToady> niecza: my @a; @a[0,1,2,3] <<+=>> (4,3,2,1); say @a

[18:01] <p6eval> niecza v7-38-gf5e9082: OUTPUT«4321␤»

[18:01] <TimToady> niecza: my @a; @a[0] <<+=>> (4,3,2,1); say @a

[18:01] <p6eval> niecza v7-38-gf5e9082: OUTPUT«10␤»

[18:01] <TimToady> niecza: my @a; @a[0] X+= (4,3,2,1); say @a

[18:02] <p6eval> niecza v7-38-gf5e9082: OUTPUT«10␤»

[18:02] <TimToady> niecza: my @a; @a[0] X+= 4,3,2,1; say @a

[18:02] <p6eval> niecza v7-38-gf5e9082: OUTPUT«10␤»

[18:03] *** jaldhar left
[18:03] *** jaldhar joined
[18:05] * sorear wonders if lazy autoviv was a mistake.

[18:06] *** mjreed joined
[18:07] <mjreed> Is rakudo star on hold until rakudo moves to nom?

[18:07] <moritz> no

[18:07] <moritz> there will be a R* release based on master this month

[18:08] <moritz> and probably another, nom-based distribution release bevore YAPC::EU

[18:10] <moritz> nom: say 'a:b:c:d'.split(':', 2)

[18:10] <p6eval> nom: OUTPUT«Method 'split' not found for invocant of class 'Str'␤current instr.: '_block1002' pc 85 ((file unknown):76376827) (/tmp/ziLRl9OF62:1)␤»

[18:10] <tadzik> good evening-o

[18:10] <moritz> \o

[18:17] *** Holy_Cow left
[18:20] *** zloyrusskiy left
[18:21] *** benabik left
[18:21] *** soh_cah_toa joined
[18:27] <mjreed> moritz: thanks.  given the lack of releases in May and June I thought maybe nom was the new target..

[18:30] <sorear> mjreed: there were no releases May and June because Star is released quarterly

[18:33] *** jevin left
[18:35] *** envi left
[18:37] *** jevin joined
[18:38] <moritz> at least it is now; used to be monthly

[18:43] *** Jackneill left
[18:44] *** zloyrusskiy joined
[18:47] *** lichtkind joined
[18:59] *** impious joined
[18:59] *** impious left
[19:01] *** mjreed left
[19:07] *** cooper joined
[19:21] <moritz> I just investigated porting IO::Socket::INET from master to nom

[19:21] <moritz> it needs Buf

[19:22] <moritz> and it relies on the now-deprecated sharing of attributes between roles the classes they are mixed into

[19:22] <dalek> rakudo/nom: 6c8b8d1 | moritz++ | src/core/ (2 files):

[19:22] <dalek> rakudo/nom: port Str.split(Str) from master

[19:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6c8b8d1f35

[19:24] <tadzik> I now officially passed my gsoc midterms :)

[19:25] <moritz> congratulations tadzik 

[19:26] * moritz hopes he also passed his mideterms. He got no notification about it :/

[19:26] <moritz> *midterms

[19:26] <mberends> tadzik++

[19:30] *** zloyrusskiy left
[19:31] *** mjreed joined
[19:31] *** mjreed left
[19:32] <moritz> std: Rat.&floor

[19:32] <p6eval> std 516268a: OUTPUT«ok 00:01 122m␤»

[19:32] <tadzik> nom: say &Rat::floor.WHAT

[19:32] <p6eval> nom: OUTPUT«Any()␤»

[19:32] <tadzik> nom: say &Rat::denominator.WHAT

[19:32] <p6eval> nom: OUTPUT«Any()␤»

[19:33] *** thou joined
[19:36] <moritz> nom: say Rat.^methods.grep('denominator')[0].WHAT

[19:36] <p6eval> nom: OUTPUT«Mu()␤»

[19:36] <moritz> nom: say Rat.^methods

[19:36] <p6eval> nom: OUTPUT«new BUILD nude Num Int Bridge Rat succ pred Str perl <anon> <anon> abs sqrt sin cos tan sinh cosh tanh floor ceiling unpolar cis Complex log exp Numeric log log10 exp roots ACCEPTS Bool gist rand bytes chars fmt substr uc lc ucfirst lcfirst chomp chop ord flip index rindex o…

[19:36] <[Coke]> tadzik++

[19:36] <moritz> nom: say Rat.^methods.grep('chars')

[19:36] <p6eval> nom: OUTPUT«chars␤»

[19:36] <moritz> nom: say Rat.^methods.grep('chars')[0].WHAT

[19:36] <p6eval> nom: OUTPUT«Method()␤»

[19:37] <tadzik> yes, Rat.^methods.grep('chars')[0].WHY is definitely ugly :)

[19:37] <moritz> nom: say Rat.^methods.grep('numerator')[0].WHAT

[19:37] <p6eval> nom: OUTPUT«Mu()␤»

[19:37] <tadzik> nominator?

[19:37] <moritz> numerator and denominator, iirc

[19:37] <tadzik> mebbe

[19:38] <moritz> ah, problem is probably that the accessor methods don't know their own name

[19:38] <moritz> it's a bug I have fixed in master too at some point :-)

[19:52] *** tomaw_ joined
[19:53] *** mtk left
[19:55] *** felliott joined
[19:56] <moritz> rakudo: say Method.^mr0

[19:56] <moritz> rakudo: say Method.^mro

[19:56] <p6eval> rakudo 1ddda5: OUTPUT«Method 'mr0' not found for invocant of class 'ClassHOW'␤  in main program body at line 22:/tmp/RmDmhsb3MT␤»

[19:56] <p6eval> rakudo 1ddda5: OUTPUT«Method 'mro' not found for invocant of class 'ClassHOW'␤  in main program body at line 22:/tmp/QBgdRQ15RF␤»

[19:56] <moritz> nom: say Method.^mro

[19:56] <p6eval> nom: OUTPUT«Method() Routine() Block() Code() Any() Mu()␤»

[19:57] <moritz> nom: say Method.^methods

[19:57] <p6eval> nom: OUTPUT«Method 'gist' not found for invocant of class 'Sub'␤current instr.: 'gist' pc 478754 (src/gen/CORE.setting.pir:130216) (src/gen/CORE.setting:2216)␤»

[19:57] <moritz> nom: say Method.^methods.join(',')

[19:57] <p6eval> nom: OUTPUT«Method 'Stringy' not found for invocant of class 'Sub'␤current instr.: 'join' pc 458831 (src/gen/CORE.setting.pir:120399) (src/gen/CORE.setting:548)␤»

[19:57] *** tomaw_ is now known as tomaw

[19:57] * moritz discovers non-turtles

[19:58] <TimToady> it's a shell game

[19:58] <moritz> nom: anon method foo() { }

[19:58] <p6eval> nom:  ( no output )

[19:58] *** mberends left
[20:01] <moritz> nom: sub f() { }; &f.'!set_name'('I CHEATED'); say &f

[20:01] <p6eval> nom: OUTPUT«I CHEATED␤»

[20:02] *** mtk joined
[20:03] <[Coke]> https://github.com/perl6/nqp - this the nqp that rakudo/nom needs?

[20:03] <moritz> yes

[20:03] <[Coke]> danke

[20:04] <[Coke]> (trying to get a build going on win7)

[20:07] <[Coke]> blargh. bug in nqp build process. c:\bird got translated to Cird

[20:07] <moritz> nom: say Rat.^method[0].name.WHAT

[20:07] <p6eval> nom: OUTPUT«Method 'method' not found for invocant of class 'Perl6::Metamodel::ClassHOW'␤current instr.: 'dispatch:<.^>' pc 456617 (src/gen/CORE.setting.pir:119447) (src/gen/CORE.setting:437)␤»

[20:07] <moritz> nom: say Rat.^methods[0].name.WHAT

[20:07] <p6eval> nom: OUTPUT«Str()␤»

[20:07] <moritz> nom: say Rat.^methods[0].name.reverse_index('(', 0)

[20:07] <p6eval> nom: OUTPUT«Method 'reverse_index' not found for invocant of class 'Str'␤current instr.: '_block1002' pc 131 ((file unknown):19393963) (/tmp/JupOqVQuDg:1)␤»

[20:08] <moritz> [Coke]: outch

[20:10] *** mberends joined
[20:10] *** kaare__ left
[20:14] <[Coke]> fixing...

[20:14] <[Coke]> this sucks. I have my git command shell, my msvc command shell, and my regular command shell. ;)

[20:15] <moritz> [Coke]: you clearly need EMACS to unify them :-)

[20:15] * moritz runs fast and far

[20:15] *** felliott left
[20:16] *** takadonet left
[20:17] <[Coke]> I don't even use emacs on *nix. :P

[20:17] <[Coke]> hurm. i wonder if this is a bug in parrot.

[20:18] <[Coke]> looks like.

[20:35] <moritz> hum, my fix for the attributes-don't-know-their-names bug makes the setting compilation loop or something

[20:45] <[Coke]> ah. when trying to build things on windows, be sure to use dirs like "C:/bird", not "C:\bird", or something gets confused.

[20:46] *** masak joined
[20:46] <masak> good evening, #perl6.

[20:47] <[Coke]> guten abend, masak.

[20:47] <mberends> hello masca lark

[20:47] <dalek> nqp: 4e4a66e | moritz++ | src/HLL/Actions.pm:

[20:47] <dalek> nqp: replace guts of string_to_int with a short call to nqp::radix

[20:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4e4a66e111

[20:48] <masak> mberends: moin marbend treins

[20:50] *** alester left
[20:51] *** cognominal_ left
[20:51] *** jferrero left
[20:51] <[Coke]> anyone else building rakudo/nom and NOT using --gen-parrot ?

[20:52] *** jferrero joined
[20:52] <[Coke]> I installed parrot-latest, nom-latest, and am getting a "nqp too old" error building rakudo.

[20:56] <moritz> [Coke]: what does 'git branch' say inside the nqp repo?

[20:57] <[Coke]> I think I just missed an update. :P

[20:58] <[Coke]> ah, no. it configures fine, but that dies on nmake... checking...

[20:58] <[Coke]> moritz: master.

[20:58] <[Coke]> should it also be nom?

[20:59] <[Coke]> qregex?

[20:59] *** Yappoko___ joined
[21:00] *** jevin left
[21:01] <[Coke]> my --gen-parrot rakudo on osx has no set branch in the nqp/ build dir.

[21:03] *** jevin joined
[21:04] *** tokuhir__ joined
[21:06] *** cognominal joined
[21:06] <[Coke]> this is weird - when I configure rakudo/nom, it's fine. when I make it, the check there bombs and it tells me to reconfigure...

[21:07] *** Yappoko__ left
[21:07] *** zby_home_ joined
[21:07] <[Coke]> https://gist.github.com/e2c0454bb8017213aa7b

[21:11] *** buubot_backup left
[21:12] <lichtkind> mberends: cheers

[21:12] <lichtkind> jnthn: nazdravi :)

[21:13] <mberends> cheers 2 U 2, lichtkind

[21:15] <lichtkind> no spare char :)

[21:15] *** bluescreen10 left
[21:19] *** thundergnat left
[21:20] *** zby_home_ left
[21:25] *** drbean joined
[21:29] *** thundergnat joined
[21:30] *** buubot_backup joined
[21:42] *** Kivutarrr left
[21:46] *** Patterner left
[21:47] <masak> the game now has descriptions for things. it thereby feels much more "complete".

[21:47] <masak> (it's also just over 1kLoC at this point)

[21:47] <masak> I invite people to try it out, and try to shake out bugs and corner cases that I've missed.

[21:48] <masak> make sure you read the messages on the walls :)

[21:48] <masak> http://github.com/masak/crypt

[21:48] *** Psyche^ joined
[21:48] *** Psyche^ is now known as Patterner

[21:54] <jlaire> masak: I tried 'help car', got:   Sorry, I don't understand the verb 'help'. Type 'help' for suggestions.

[21:54] <jlaire> funny :), maybe it should just ignore the rest of input when it starts with 'help'

[21:54] <masak> jlaire: excellent. yes :)

[21:54] <masak> jlaire++

[21:56] <jlaire> masak: 'go car' -> Sorry, I don't understand the verb 'go'.

[21:56] <masak> hm.

[21:56] <masak> ok, easy enough to fix.

[21:56] <jlaire> I'll probably find lots of corner cases, no experience in games like this

[21:56] <masak> that's just what I need.

[21:57] <jlaire> I played one but it's been >10 years

[21:57] <masak> it's too easy for the programmer to try only a very small subset of the possible state space.

[21:58] <jlaire> yeah

[21:59] *** kanishka joined
[21:59] <masak> pushed a fix so that "go car" gives sensible output.

[22:00] <jlaire> pulled, masak++

[22:00] *** kanishka left
[22:01] *** Chillance joined
[22:01] <jlaire> "You can't go the hill." :)

[22:02] <masak> I'll leave that as it is :)

[22:02] <jlaire> yeah, it's understandable

[22:02] <masak> while you can arguably go a car, you actually can't go a hill :P

[22:02] <jlaire> or a brook :P

[22:02] <jlaire> the brook*

[22:03] *** jevin left
[22:05] *** jevin joined
[22:06] <jlaire> masak: "It'd made of stone" <-- It's

[22:06] <masak> thank you; fixing.

[22:10] <jlaire> masak: leading whitespace confuses it

[22:11] <masak> gotcha. will add some trimming.

[22:13] *** leprevost left
[22:19] *** wolfman2000 joined
[22:20] *** wamba left
[22:21] <jlaire> masak: look water => Any()

[22:21] <jlaire> o_o

[22:22] <masak> oops.

[22:22] <masak> good catch.

[22:23] <masak> fixed.

[22:26] <masak> jlaire++

[22:26] <masak> going to bed now. I will backlog to catch any more bugs and things people++ turn up.

[22:26] <masak> 'night.

[22:26] *** masak left
[22:32] <lichtkind> good night

[22:36] *** brainproxy left
[22:38] *** Raynes is now known as lazybot

[22:38] *** lazybot is now known as Raynes

[22:40] <jlaire> masak: I've several times used 'wall' instead of 'walls'

[22:43] *** lichtkind left
[22:54] <jlaire> masak: http://pastebin.com/QbJFppfa <-- a bug and a (perhaps intended?) shortcut

[22:54] <jlaire> (others++: spoiler warning!)

[22:59] *** Mowah left
[23:08] *** Trashlord left
[23:09] *** Trashlord joined
[23:23] <jlaire> masak: http://pastebin.com/WtzeE9Vn

[23:24] <jlaire> masak: I didn't find some of the items...

[23:24] *** envi joined
[23:25] <jlaire> masak: the game was fun but quite difficult, I don't think I'd had the patience to solve it without peeking at the source

[23:25] <jlaire> masak: (which is a joy to read)

[23:25] <jlaire> otoh, it's bedtime here &

[23:33] *** orafu left
[23:35] *** orafu joined
[23:44] *** zloyrusskiy joined
[23:58] <soh_cah_toa> hey, could somebody help me understand the difference between: sub &infix:<foo> vs. sub infix:<foo> ?

