[00:00] <diakopter> how's it different from lookahead?

[00:00] <TimToady> a quick way to write <?before ...> for those things that are assertions

[00:00] <diakopter> oh

[00:01] *** Guest34898 is now known as Trashlord

[00:01] *** Trashlord left
[00:01] *** Trashlord joined
[00:01] <diakopter> also, that section in S05 links to https://github.com/perl6/roast/blob/master/S05-mass/rx.t#L461-L481 which doesn't seem to have anything to do with "A leading ? indicates" ...

[00:03] *** jkeats_ joined
[00:04] *** wolfman2000 joined
[00:04] *** cognominal_ joined
[00:06] *** Trashlord left
[00:07] *** cognominal left
[00:10] *** floyy left
[00:10] *** replore_ joined
[00:10] *** replore_ left
[00:10] *** replore_ joined
[00:11] <diakopter> niecza: say "foo" ~~ / <[ z .. a ]> /

[00:11] <p6eval> niecza v10-44-g82a2206: OUTPUT«Match()␤»

[00:15] <diakopter> niecza: say 44 if "foo" ~~ / <[ z .. a ]> /

[00:15] <p6eval> niecza v10-44-g82a2206:  ( no output )

[00:15] <diakopter> niecza: say 44 if "zoo" ~~ / <[ z .. a ]> /

[00:15] <p6eval> niecza v10-44-g82a2206:  ( no output )

[00:17] <diakopter> niecza: / (\d**1..3) { $0 < 256 or fail } /

[00:17] <p6eval> niecza v10-44-g82a2206: OUTPUT«===SORRY!===␤␤Undeclared routine:␤     'fail' used at line 1␤␤␤Unhandled Exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 766 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1136 (STD P6.comp_unit @ 36) ␤…

[00:17] <diakopter> seems like fail should be easy to implement

[00:21] *** wolfman2000 left
[00:31] *** wolfman2000 joined
[00:32] *** wolfman2000 left
[00:35] *** lateau_ joined
[00:37] *** eternaleye left
[00:37] *** shampaa joined
[00:42] *** shampaa left
[00:44] *** sivoais joined
[00:49] *** envi_ joined
[01:11] *** Chillance left
[01:20] *** wolfman2000 joined
[01:23] *** tokuhiro_ left
[01:24] *** benabik joined
[01:24] *** colomon joined
[01:34] *** shinobicl_ left
[01:38] *** cognominal joined
[01:39] *** sivoais left
[01:39] *** sivoais joined
[01:40] *** cognominal_ left
[01:43] *** daniel-s joined
[01:45] *** whiteknight left
[01:47] <dalek> roast: 2212c58 | (Solomon Foster)++ | S (3 files):

[01:47] <dalek> roast: Merge branch 'master' of github.com:perl6/roast

[01:47] <dalek> roast: review: https://github.com/perl6/roast/commit/2212c58ba8

[01:48] <colomon> crap, what did I do now?

[01:49] <colomon> [Coke]: ping?

[01:49] <benabik> ?

[01:49] <benabik> colomon: Looks like you merged something.

[01:50] <colomon> I certainly didn't mean to.  And my own change seems to have disappeared.

[01:50] <benabik> Oh.  That's poor

[01:50] <colomon> yeah, I screwed the pooch somehow

[01:50] *** cognominal_ joined
[01:52] <colomon> I was hoping [Coke] could tell me if I just somehow undid his last commit(s).

[01:52] <benabik> colomon: I'll see if can figure out what changed, in case [Coke] isn't paying attention.

[01:52] <colomon> danke

[01:53] *** cognominal___ joined
[01:53] *** sivoais left
[01:53] *** cognominal left
[01:53] *** sivoais joined
[01:54] <benabik> colomon: It looks like a clean merge.  I see your changes to S32-list/pick.t and [Coke]'s and moritz's changes to a variety of others.

[01:55] <colomon> benabik++ 

[01:55] *** cognominal_ left
[01:58] *** cognominal___ left
[01:58] *** cognominal joined
[02:00] *** jaldhar left
[02:04] *** shinobicl_ joined
[02:05] <shinobicl_> hi... how should i debug perl6 programs? i want something like "pdb" ...

[02:05] <shinobicl_> i mean.. ptkdb

[02:07] *** jaldhar joined
[02:12] *** blackdog joined
[02:12] *** aloha left
[02:14] *** mantovani joined
[02:14] *** aloha joined
[02:18] <flussence> .oO( with a needle and a steady hand... )

[02:18] <benabik> liberally sprinkle calls to say.

[02:21] *** blackdog left
[02:32] *** jkeats_ left
[02:33] *** jaldhar left
[02:33] *** jaldhar joined
[02:39] *** lateau_ left
[02:40] *** bluescreen10 left
[02:41] *** bluescreen100 left
[02:46] <ingy> moritz: Pugs problem solved (I hope). Install GHC 7.2.1 then goto https://gist.github.com/1169332 and scroll down to "Installing cabal-install", apply the patch, and cabal will install. Then 'cabal update; cabal install Pugs'.

[02:47] <ingy> \o^

[02:52] *** lateau_ joined
[02:57] *** sivoais left
[02:57] *** sivoais joined
[02:57] <ingy> shachaf: I don't see your commits :\

[03:05] <dalek> Pugs.hs: 903e98a | (Ingy dot Net)++ | / (2 files):

[03:05] <dalek> Pugs.hs: remove script and revert INSTALL

[03:05] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/903e98a3fa

[03:07] *** jaldhar left
[03:07] *** jaldhar joined
[03:08] *** jaldhar left
[03:08] *** jaldhar joined
[03:09] *** jaldhar left
[03:09] *** jaldhar joined
[03:10] *** cognominal left
[03:10] *** cognominal joined
[03:11] *** tyatpi_ joined
[03:11] *** shinobicl_ left
[03:14] *** jaldhar left
[03:15] *** jaldhar joined
[03:19] <sorear> good * #perl6

[03:21] <sorear> masak: it would be lowish-hanging fruit to s/Infinity/Inf/.  Is the full behavior specced?

[03:21] *** cognominal_ joined
[03:22] <sorear> colomon: what libraries are you thinking of using for a Perl 6 CAD program?

[03:23] *** molaf joined
[03:23] <ingy> sorear: do you and shachaf know each other?

[03:24] <ingy> shachaf: 23:17 < ingy> just commit on a branch and put your concerns in the commit msg, and I'll poke audrey to comment

[03:24] *** cognominal left
[03:25] <ingy> that was for you in #haskell, not sure if you saw it

[03:29] <sorear> phenny: tell GlitchMr https://github.com/sorear/niecza/issues/67

[03:29] <phenny> sorear: I'll pass that on when GlitchMr is around.

[03:30] *** donri left
[03:30] <sorear> masak: https://github.com/sorear/niecza/issues/68 too now.

[03:31] <sorear> PerlJam: Unity is pretty popular over in #mono.

[03:32] * sorear never expected xmonad would become this popular ( awwaiid )

[03:32] <awwaiid> what hmm?

[03:33] <awwaiid> iffin y'all want to go xmonad but are afraid to take that trip -- bluetile

[03:34] <sorear> diakopter: https://github.com/sorear/niecza/issues/69

[03:35] <sorear> ingy: shachaf and I go way back, yes

[03:36] <sorear> ingy: I'm not in #haskell anymore

[03:36] <shachaf> sorear: That was for me, I think.

[03:37] <shachaf> Is there any reason you're not in #haskell anymore? :-)

[03:38] <sorear> shachaf: dons

[03:38] <shachaf> Oh? What happened?

[03:38] <sorear> also I don't Haskell nearly as much as I used to

[03:42] *** cognominal___ joined
[03:46] *** cognominal_ left
[03:51] *** sivoais left
[03:52] *** sivoais joined
[03:56] *** satyavvd joined
[04:06] *** tyatpi_ left
[04:09] *** molaf left
[04:11] *** mkramer joined
[04:13] *** sivoais left
[04:14] *** sivoais joined
[04:30] *** sivoais left
[04:30] *** sivoais joined
[04:31] *** envi_ left
[04:56] *** wk joined
[05:11] *** orafu left
[05:11] *** orafu joined
[05:18] *** Khisanth left
[05:23] *** lestrrat left
[05:24] *** lestrrat joined
[05:28] *** Khisanth joined
[05:28] *** sivoais left
[05:28] *** sivoais joined
[05:45] *** sivoais left
[05:45] *** sivoais joined
[05:47] *** kaleem joined
[05:51] *** araujo left
[06:27] *** koban joined
[06:31] <moritz> pugs: say 'alive'

[06:31] <phenny> moritz: 13 Oct 22:06Z <soh_cah_toa> tell moritz good eye. i took care of it. thanks :)

[06:31] <p6eval> pugs: OUTPUT«alive␤»

[06:31] <moritz> phenny: tell soh_cah_toa my log files have a good eye indeed :-)

[06:31] <phenny> moritz: I'll pass that on when soh_cah_toa is around.

[06:35] *** cotto left
[06:36] *** cotto joined
[06:41] *** mj41 joined
[06:43] <dalek> evalbot: 2a08401 | moritz++ | build-scripts/rebuild-pugs.sh:

[06:43] <dalek> evalbot: first shot at pugs rebuild script

[06:43] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/2a08401e98

[06:44] <dalek> evalbot: c1461f2 | moritz++ | build-scripts/rebuild-pugs.sh:

[06:44] <dalek> evalbot: [pugs] improved sanity

[06:44] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/c1461f2e89

[06:47] *** Chillance joined
[06:51] <dalek> evalbot: ba87ddd | moritz++ | evalbot.pl:

[06:51] <dalek> evalbot: pick up the pugs that is installed from git

[06:51] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/ba87ddd76f

[06:51] <dalek> evalbot: c090c2f | moritz++ | evalbot.pl:

[06:51] <dalek> evalbot: Revert "exclude pugs from "perl6:" target while its installation is busted; include b for the lulz"

[06:51] <dalek> evalbot: 

[06:51] <dalek> evalbot: This reverts commit e94ed5d07016def461554266281b30d60d6d445b.

[06:51] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/c090c2f7af

[06:54] *** wtw joined
[07:04] *** cognominal___ left
[07:05] *** cognominal joined
[07:10] *** Alias joined
[07:13] *** Alias_ left
[07:13] *** Alias_ joined
[07:16] *** Alias left
[07:16] *** Alias joined
[07:19] *** Alias_ left
[07:19] <diakopter> moritz++

[07:23] <diakopter> std: /;/

[07:23] <p6eval> std 580b69a: OUTPUT«===SORRY!===␤Semicolon must be quoted at /tmp/3qwncUe9RA line 1:␤------> /;⏏/␤Parse failed␤FAILED 00:01 119m␤»

[07:23] <diakopter> nom: /;/

[07:23] <p6eval> nom ce15be: OUTPUT«===SORRY!===␤Unrecognized regex metacharacter (must be quoted to match literally) at line 1, near "/"␤»

[07:27] *** risou_awy is now known as risou

[07:32] *** cognominal left
[07:32] *** cognominal joined
[07:34] *** mj41 left
[07:35] <moritz> evalbot control restart

[07:35] *** p6eval left
[07:35] *** p6eval joined
[07:35] *** ChanServ sets mode: +v p6eval

[07:36] <moritz> pugs: say 1

[07:36] <p6eval> pugs c943eeb: OUTPUT«1␤»

[07:37] *** lateau_ left
[07:39] <moritz> masak: you might like http://nathanmarz.com/blog/how-to-beat-the-cap-theorem.html

[07:39] <moritz> masak: it's about event sourcing; sad that he dilutes the information by bullshit about beating the CAP theorem (which he doesn't, of course)

[07:44] *** mj41 joined
[08:02] *** koban left
[08:07] *** Kivutarrr joined
[08:20] *** am0c left
[08:21] *** Alias_ joined
[08:24] *** Alias left
[08:27] *** envi joined
[08:32] *** uasi joined
[08:37] *** GlitchMr joined
[08:50] *** mtk left
[08:51] *** BLZbubba left
[08:51] *** BLZbubba joined
[08:51] *** risou is now known as risou_awy

[09:00] <masak> good moritz, #perl6

[09:00] <masak> moritz: thanks. looks interesting.

[09:05] *** wk left
[09:06] *** satyavvd left
[09:07] <mls_> morning perl6!

[09:09] <masak> good mls_!

[09:18] <mls_> what should the output of https://gist.github.com/1286654 be?

[09:18] *** mj41 left
[09:18] <mls_> my guess is R3U2R1

[09:19] <mls_> (sorry bout the "if (1)"... too much perl5...)

[09:22] <masak> std: if (1) { say "OH HAI" }

[09:22] <p6eval> std 580b69a: OUTPUT«ok 00:01 120m␤»

[09:27] *** Mowah_ joined
[09:27] <moritz> mls_: R3U2R1 sounds sane to me

[09:29] <mls_> my code currently returns R3R2R2, which is probably wrong

[09:30] <moritz> I'm pretty sure that the first one should be U3

[09:30] <moritz> and that R2 shouldn't appear twice

[09:30] <moritz> not sure about the 1, I could argue for either U or R

[09:30] <mls_> yes, I meant R3R2R1 ;)

[09:30] <mls_> Why U3?

[09:30] <moritz> sorry, confused

[09:31] <masak> what are you two talking about?

[09:31] <moritz> 11:18 < mls_> what should the output of https://gist.github.com/1286654 be?

[09:31] <masak> ah.

[09:31] * masak blind

[09:40] <moritz> let me get this straight... if the exception is *not* caught, then the UNDO phasers never fire

[09:40] <moritz> correct?

[09:42] *** uasi left
[09:51] <mls_> that depends on the return value, in this case yes

[09:52] *** mj41 joined
[09:56] *** GlitchMr left
[10:01] *** Kivutarrr left
[10:04] *** wk joined
[10:08] <masak> it's a wonderfully gnarly example, like a knot.

[10:09] <moritz> what's the return value if the exception is not caught?

[10:11] <masak> moritz: nice article. the biggest advantage I see nowadays with CQRS and ES is that it (when done right) basically forces the designer to make the model private. and that's very, very good. this realization has also made me really suspicious about Ruby on Rails.

[10:12] <masak> a designer in CQRS mode says "here are my aggregate roots. they accept these commands and emit these events." *everything* else is internal and private.

[10:13] *** Trashlord joined
[10:14] * masak joins cqrs-perl6 to avoid polluting #perl6 with his insistent CQRS propaganda

[10:15] *** colomon_ joined
[10:15] *** colomon left
[10:15] *** colomon_ is now known as colomon

[10:16] *** replore_ left
[10:17] *** agentzh joined
[10:24] *** trexy joined
[10:33] *** yagoubix joined
[10:36] <ingy> moritz: did you see my fix?

[10:37] <ingy> moritz: it

[10:37] <ingy> moritz: it's actually in the topic of #haskell :)

[10:38] <moritz> pugs: say 'yes, ingy'

[10:38] <p6eval> pugs c943eeb: OUTPUT«yes, ingy␤»

[10:38] <ingy> :D

[10:38] <ingy> \o/

[10:38] <ingy> thx

[10:39] <moritz> I also built a rebuild script for pugs, but haven't crontabbed it yet

[10:39] <ingy> ok

[10:44] *** Kivutarrr joined
[10:54] *** colomon left
[11:18] <masak> moritz++

[11:19] <masak> pugs: say "我很高興回來了！"

[11:19] <p6eval> pugs c943eeb: OUTPUT«decodeUTF8': bad data: '\25105'␤decodeUTF8': bad data: '\24456'␤decodeUTF8': bad data: '\39640'␤decodeUTF8': bad data: '\33288'␤decodeUTF8': bad data: '\22238'␤decodeUTF8': bad data: '\20358'␤decodeUTF8': bad data: '\20102'␤decodeUTF8': bad data: '\65281'␤æå¾é«è…

[11:19] <masak> *cough*

[11:19] <masak> guess that might be Pugs's fault, tho'

[11:20] <masak> as far as I know, I'm utf-8-conf'd here.

[11:20] <masak> the IR clogs corroborate this.

[11:25] <masak> perl6: say "!"

[11:25] <p6eval> pugs c943eeb, rakudo ce15be, niecza v10-44-g82a2206: OUTPUT«!␤»

[11:26] <masak> oh, so 'b' is no longer à la mode?

[11:26] <masak> niecza: say "我很高興回來了！"

[11:26] <p6eval> niecza v10-44-g82a2206: OUTPUT«我很高興回來了！␤»

[11:26] <masak> rakudo: say "我很高興回來了！"

[11:26] <p6eval> rakudo ce15be: OUTPUT«我很高興回來了！␤»

[11:32] *** sftp left
[11:37] *** envi left
[11:37] *** Psyche^ joined
[11:40] *** yagoubix left
[11:41] *** Patterner left
[11:41] *** Psyche^ is now known as Patterner

[11:43] *** trexy left
[11:52] *** cognominal left
[11:53] *** cognominal joined
[11:55] *** replore_ joined
[12:05] *** replore_ left
[12:08] *** lateau_ joined
[12:09] *** Kivutarrr left
[12:11] *** Kivutarrr joined
[12:20] *** replore_ joined
[12:21] *** bluescreen10 joined
[12:39] *** Mowah_ left
[12:40] *** Trashlord left
[12:41] *** [Coke] left
[12:46] <PerlJam> masak: ping

[12:46] <masak> pong

[12:46] <PerlJam> masak: I asked Karen about your grant and she said that it goes for vote on Oct 23.

[12:47] <masak> PerlJam: yes, she emailed me about that yesterday.

[12:47] <PerlJam> oh good.  :)

[12:47] <masak> PerlJam: I'm going to reply to her email today. she asked about D4 and stuff.

[12:48] * jnthn should really get his current grant wrapped up...

[12:48] <jnthn> Especially as I think I've actually done everything I said I'd do on it.

[12:48] <moritz> typed arrays weren't part of the grant?

[12:48] * moritz only has a vague recollection

[12:48] <PerlJam> She also updated the wording on the website about Hague grants to include a bit of a timeline for public review and when a vote is supposed to happen.

[12:48] <jnthn> moritz: Don't think so, no

[12:49] <jnthn> moritz: Natively typed attributes were

[12:49] <masak> PerlJam: ooh, nice!

[12:49] <jnthn> moritz: That was the only native thing I said I'd do int he grant.

[12:49] <jnthn> moritz: As it happens, we got native lexicals and native operators during the course of it too :)

[12:49] <jnthn> (Yes, compact arrays are on my radar.)

[12:50] <moritz> .oO( "int he grant" when talking about native types :-)

[12:50] <jnthn> :P

[12:51] <moritz> well, native ops only in a branch... :-)

[12:53] <jnthn> Looks like I should - exhaustion aside - get tuits to land said branch next week, though :)

[12:54] *** Trashlord joined
[12:55] * moritz wonders if passing a Perl 6 Str to the regex engine maybe results in oh so many vtable calls

[12:56] <jnthn> I *think* cursor points directly to a str

[12:56] <jnthn> So at most once, I think.

[12:58] <moritz> is nqp::isconcrete the test that should be DEFINITE in Perl 6?

[12:58] <masak> wow, sigil variance is so *weird*! :)

[12:58] <jnthn> yes

[12:59] <moritz> masak: it has its own logic

[12:59] <masak> it does indeed.

[13:00] <masak> my reaction is mostly knee-jerk because Perl 5 keeps nagging me about gettin it rong :)

[13:00] <moritz> jnthn: you're right, !cursor_init binds $target with nqp::bindattr_s to a str-typed attr

[13:00] <masak> for arrays, that is. if I get it rong for hashes, the only way I'll know is that everything hits the fan at once.

[13:00] <moritz> well, a transcoded version of $target that is

[13:04] *** sftp joined
[13:05] *** Trashlord left
[13:12] *** Trashlord joined
[13:14] *** GlitchMr joined
[13:15] *** trexy joined
[13:15] <trexy> hi

[13:15] <trexy> thought I would delurk for a bit ... 13:58:12

[13:15] <trexy> It's been great to see developments on nom + niecza and rakudo 13:58:59

[13:15] <trexy> I was wondering about the feasibility of using the JVM 13:59:18

[13:15] <trexy> ? 13:59:21

[13:22] *** wtw left
[13:23] *** wolfman2000 left
[13:24] *** bluescreen10 left
[13:25] *** mtk joined
[13:27] *** tokuhiro_ joined
[13:29] <masak> trexy: hi!

[13:29] *** Trashlord left
[13:29] <masak> trexy: definitely feasible.

[13:30] <masak> trexy: what's needed: someone to spearhead a JVM implementation of 6model.

[13:30] <masak> we don't have that, because our developer resources are scarce.

[13:30] *** awwaiid left
[13:30] *** Trashlord joined
[13:31] *** localhost left
[13:32] <masak> also, I've gotten the impression that even if we were to have more tuits for expanding to other VMs, the CLR and maybe V8 seem more attractive.

[13:32] <masak> but that doesn't completely rule out the JVM, of course.

[13:33] *** localhost joined
[13:34] <masak> would be way cool to have Perl 6 running on Android.

[13:35] *** trexy left
[13:39] *** daniel-s left
[13:42] *** bluescreen10 joined
[13:42] *** Trashlord left
[13:43] *** sayu joined
[13:46] *** Trashlord joined
[13:47] *** daniel-s joined
[13:52] *** uasi joined
[13:53] * masak decommutes

[13:54] *** tyatpi_ joined
[13:58] *** Kivutarrr left
[13:58] *** Holy_Cow joined
[13:58] *** Holy_Cow left
[13:58] *** Kivutarrr joined
[14:00] *** Trashlord left
[14:01] *** Trashlord joined
[14:02] *** agentzh left
[14:03] <mls_> (Hah! I now get R3U2R1!)

[14:04] *** lateau__ left
[14:05] <moritz> cool

[14:07] <mls_> so I now have working CATCH/CONTROL/ENTER/LEAVE/KEEP/UNDO phasers

[14:07] <mls_> missing: NEXT/LAST/REDO and those other two

[14:08] <mls_> I think I'll implement leave() and call it a wrap for today

[14:08] <moritz> sounds like somebody is having fun :-)

[14:08] <mls_> those loop phasers are tricky

[14:09] *** jferrero left
[14:11] *** Trashlord left
[14:16] *** Trashlord joined
[14:17] *** risou_awy is now known as risou

[14:17] *** trexy joined
[14:18] <trexy> sorry connection keeps dropping out ... 

[14:18] <trexy> I still only have a superficial understanding of nom

[14:18] <trexy> is the plan that nom will be a bit like DBI/DBD

[14:18] <trexy> nom provides the DBI part

[14:18] <trexy> and the VM underneath does the DBD

[14:19] <trexy> - metaphorically speaking ....

[14:19] <moritz> a bit like that, yes

[14:19] <trexy> ok that sounds exciting 

[14:19] <moritz> nom: nqp::print("foo")

[14:19] <p6eval> nom ce15be: OUTPUT«foo»

[14:20] <trexy> from the DBI experience ... people learnt from other DBD's 

[14:20] <moritz> for the parrot backend, that compiles to a PIR opcode

[14:20] <trexy> it seems as an onlooker

[14:20] <moritz> for other backends, that would compile to System.Out.print() or whatever

[14:20] <trexy> hmm ok

[14:20] <trexy> I look at the dartlang ideas for implementation

[14:20] <moritz> and we have the object runtime library called 6model

[14:21] <trexy> and they have JS plans

[14:21] *** jferrero joined
[14:21] <moritz> which needs translating to other VMs that we want to run on

[14:21] <trexy> ah OK - maybe 6model is more like the DBI then?

[14:22] <trexy> the API that perl6 implementation must use

[14:22] <moritz> that's another way to see it

[14:22] <trexy> for which there is a DBD that does the work in the vm?

[14:23] <trexy> and is 6 model expressed in nqp?

[14:23] <moritz> 6model is written in C

[14:24] <moritz> (for parrot)

[14:24] <moritz> 6model for JVM would be written in java or JVM bytecode or so

[14:24] <trexy> ah ok

[14:25] <trexy> and the Perl6 grammar how does that interact with 6model?

[14:25] <moritz> it doesn't

[14:26] <moritz> at least not directly

[14:26] <moritz> for example if you write  class A { }

[14:27] <moritz> then the grammar only creates a parse tree

[14:29] <moritz> and another translations stage which we call the "actions" turns it into method calls to the meta object model

[14:29] <moritz> something like

[14:29] <moritz> my $A = ClassHOW.new_type(name => 'A')

[14:29] *** Trashlord left
[14:29] <moritz> $A.HOW.finalize($A)

[14:30] <trexy> hmm ok

[14:30] <moritz> and ClassHOW allocates some storage for the class -- and that is where 6model kicks in

[14:30] *** Trashlord joined
[14:31] <trexy> ok - so I need to get my head around compile time vs runtime

[14:31] <trexy> if we take javac for example

[14:31] <trexy> - and we wanted to run Perl6 on the JVM

[14:31] <trexy> we need to apply the grammar first off

[14:32] <trexy> and the application of the grammar - requires Perl6 - as it is a Perl6 grammar

[14:32] <moritz> correct

[14:32] <trexy> so this phase can be handled by Patrick's grammar engine?

[14:32] <moritz> yes

[14:33] <moritz> the way to start an effort would be roughly:

[14:33] <moritz> 1) use the parrot-based nqp ("not quite perl", a mini Perl 6 compiler), and teach it to emit JVM code

[14:33] <moritz> and at the same time, write a 6model in Java

[14:34] <moritz> 2) use this modified nqp to compile itself to JVM

[14:35] <moritz> 3) use the now bootstrapped nqp-on-JVM to build rakudo, and teach rakudo do emit JVM code (which isn't so much effort anymore, because it re-uses the code generation facilities from nqp)

[14:35] * moritz realizes that this is probably a bit confusing :-)

[14:36] <trexy> 4) open XMAS cracker ;-)

[14:36] <moritz> 5) consume said cracker

[14:37] <trexy> hmm OK - need to mull over 3)

[14:38] <trexy> I'm surprised rakudo - features in 3)

[14:39] <trexy> I would have thought it would be like niecza and standalone

[14:39] <moritz> well, nom is a rakudo branch

[14:39] <moritz> and now "the" rakudo branch

[14:39] <moritz> well, niecza also contains a compiler and a runtime part

[14:40] <moritz> I don't see how it is more standalone than rakudo on JVM would be

[14:40] <moritz> or less, for that matter

[14:40] <trexy> ... probably my fuzzy understanding - please ignore

[14:40] * moritz ignores

[14:40] <mls_> perl6: sub foo returns Int { Mu } ; say foo()

[14:41] <p6eval> pugs c943eeb: OUTPUT«*** No such subroutine: "&Mu"␤    at /tmp/GJPI5maQAH line 1, column 23-26␤»

[14:41] <p6eval> ..rakudo ce15be, niecza v10-44-g82a2206: OUTPUT«Mu()␤»

[14:41] <mls_> perl6: sub foo returns Int { return Mu } ; say foo()

[14:41] <p6eval> pugs c943eeb: OUTPUT«*** No such subroutine: "&Mu"␤    at /tmp/9D4KJL890x line 1, column 30-33␤»

[14:41] <p6eval> ..niecza v10-44-g82a2206: OUTPUT«Mu()␤»

[14:41] <p6eval> ..rakudo ce15be: OUTPUT«Type check failed for return value␤  in sub foo at /tmp/Z7ulfnjlGl:1␤  in block <anon> at /tmp/Z7ulfnjlGl:1␤  in <anon> at /tmp/Z7ulfnjlGl:1␤»

[14:41] <mls_> Hmm. Rakudo bug.

[14:41] <moritz> aye

[14:42] *** Trashlord left
[14:42] *** mj41 left
[14:45] <jnthn> ...where's the bug?

[14:45] <trexy> and what about the potential for loading Java classes in the JVM ... 

[14:45] <jnthn> oh, I see it

[14:45] <trexy> where does this fit in?

[14:45] <moritz> nom: sub foo returns Int { Mu } ; say foo()

[14:45] *** Trashlord joined
[14:45] <p6eval> nom ce15be: OUTPUT«Mu()␤»

[14:45] <trexy> Perl6JVM

[14:46] <jnthn> moritz: yeah, bug...please file ticket

[14:46] <moritz> trexy: if you perl 6 running on the JVM, loading and using Java classes should be quite possible and fast

[14:46] <moritz> though maybe not trivial, because Perl 6 Int aren't Java Integer objects

[14:48] <moritz> jnthn: ticket filed

[14:50] *** kaleem left
[14:50] <mls_> simple leave() works.

[14:50] <mls_> (but not Code.leave())

[14:50] <moritz> well, good start :-)

[14:51] <moritz> isn't leave() basically just a PIR .return, plus a bit of managing overhead?

[14:51] <mls_> well, yes ;)

[14:51] <mls_> Except it works on Blocks, not Routines

[14:51] <moritz> somehow it surprises me it took us so long to get there :-)

[14:52] <moritz> but since we compile block to PIR level subs, that's exactly what PIR .return gives us, no?

[14:52] <jnthn> gotta get train...bbl

[14:52] <jnthn> (quite a bit later...3 hour journey...)

[14:53] <mls_> moritz: well, as we don't have macros yet you need to return from the caller

[14:53] <trexy> approaching the problem from another way

[14:54] *** jaldhar left
[14:54] <trexy> the expressiveness of the Perl6 grammar is pretty amazing 

[14:54] <trexy> could a Java grammar be written with it

[14:55] <trexy> and you have more of a Java -> Perl6 translator

[14:55] <trexy> as Perl6 seems offer a superset of Java stuff (threads excepted)

[14:56] <trexy> so a Java program is converted into Perl6 ... or is the where TImToady's idea of "slangs" applies?

[14:57] *** Trashlord left
[14:57] <moritz> should be possible, but it would probably run slower than if you execute the Java classes with javac+JVM

[14:58] <trexy> yes - is that due to JVM having the hell optimised out of it?

[14:58] <moritz> that's one major point

[14:59] <moritz> and a second is that we optimize Perl 6 runtime for Perl 6, not for Java

[14:59] <trexy> hmm - ok

[14:59] <trexy> and the translated Java -> Perl6 step would happen too late for the optimiser?

[14:59] *** Trashlord joined
[15:00] <moritz> hm, might not be too late

[15:08] *** Trashlord left
[15:11] <trexy> I wonder if it is feasible/possible for a Perl6 grammar to parse Java source into something that could be fed into subsequent steps?

[15:11] <moritz> it sure is possible

[15:11] <moritz> just a decent bit of work to do

[15:12] <trexy> could you outline what is required for that?

[15:13] *** Kivutarrr left
[15:13] <tadzik> probably some regex-fu :)

[15:14] <moritz> write a grammar. Test it. Improve it until you're happy.

[15:15] *** lateau_ left
[15:16] <moritz> probably after steps -1 and 0, learn about perl 6 regexes/grammars, and read the java specs

[15:16] *** wk left
[15:17] <moritz> even if you think you know a language, always read the spec (if one exists) before starting to write a parser :-)

[15:17] *** GlitchMr42 joined
[15:18] <moritz> otherwise you'll end up like those poor folks how wrote "xml parser" that choke on namespaces, simply because the author has never seen/used them :-)

[15:19] <trexy> hmm - indeed ... I don't underestimate the complexity of all this ... just trying to gauge the respective height of each mountain

[15:19] <trexy> ... and what kind of view there might be at the top ;-)

[15:20] <moritz> :-)

[15:20] <moritz> the key is to not just do it for the view at the top, but for the fun of climbing too

[15:20] <trexy> yes ... indeed

[15:20] *** GlitchMr left
[15:21] <trexy> could learn quite a bit on the way

[15:21] <trexy> I wonder how TimToady's idea of 'slangs' fits in with language translation ... 

[15:22] <trexy> can you define a grammar for a slang and incorporate it into the enclosing grammar?

[15:22] <moritz> yes, that's the whole point

[15:23] <moritz> for example in Perl 6, regexes are defined as a slang

[15:23] <moritz> if you write    if m/foo/ { ... }

[15:23] <moritz> then the mainline parser switches to the regex slang as soon as it sees the m/

[15:23] <moritz> and tells it that the expected terminator is another /

[15:24] <moritz> and when the regex slang parser is done, it tells the mainline parser how far it got (up to the second /, inclusive)

[15:24] <trexy> ok - sounds cool 

[15:24] <moritz> and the mainline parser then parses the rest

[15:24] <moritz> ... until it meets another slang, etc.

[15:24] <trexy> and internally there is a parse tree with potential actions

[15:25] <trexy> ?

[15:25] <moritz> yes

[15:25] <moritz> (I'm not sure how well rakudo implements slangs, but STD uses them that way)

[15:26] <trexy> ok - could you have some superficial wrapper around a .java source file that kicks off a Java slang

[15:26] <trexy> class JavaWrapper {

[15:26] <trexy> ... java source in here ....

[15:26] <trexy> }

[15:27] <moritz> right

[15:27] <moritz> javaclass Perl6.System.Out { ... }

[15:27] <moritz> :-)

[15:28] *** sayu left
[15:29] <trexy> I assume that the regex slang is "included" in the grammar somehow

[15:30] <trexy> ?

[15:30] <moritz> yes

[15:31] <trexy> and the Java slang would get included in the same way

[15:31] <trexy> - it sits in its own grammar file?

[15:31] <tadzik> probably

[15:34] <trexy> - so to load a whole lot of java source files you could wrap them in Perl6 wrappers with slang markers

[15:34] *** colomon joined
[15:35] <moritz> or you could write a small program that starts off with parsing the Java slang

[15:35] *** tyatpi_ left
[15:35] <moritz> easier than lots of wrappers

[15:36] *** gbacon joined
[15:37] <TimToady> just don't call it Jerl :)

[15:37] <trexy> haha - no risk there

[15:37] <TimToady> I'd prefer Perva...oh wait...

[15:37] <sorear> good * #perl6

[15:37] <TimToady> o/

[15:38] <sjohnson> how about Perlthon?

[15:38] <moritz> \o sorear, TimToady 

[15:38] *** am0c joined
[15:38] <moritz> .oO( just call it javap, what could possibly go wrong? )

[15:38] <trexy> jamelia

[15:38] <sjohnson> Duke -> Puke

[15:39] <TimToady> unfortunately, JPL is taken...

[15:39] <moritz> TimToady: did you see my smartmatch rant blog post?

[15:39] <TimToady> yes

[15:39] <moritz> TimToady: any comments?

[15:40] <TimToady> I prefer to think before I say something :)

[15:40] <moritz> ok :-)

[15:42] <TimToady> in particular, I've been thinking about whether it's feasible to combine an infix topicalizer with a precedence bender

[15:43] <TimToady> also about whether it's possible to combine it with andthen

[15:43] <moritz> kinda like 'given', but more operator-y?

[15:43] <TimToady> since andthen also topicalizes

[15:44] <moritz> well, if we have a topicalizer infix t, we can always construct &&t and ||t from it :-)

[15:44] <TimToady> thing is, you can't do precence bending and also expect $result = $string foo m/bar/ to work

[15:44] <TimToady> *precedence

[15:44] <moritz> right

[15:45] *** awwaiid joined
[15:46] <moritz> std: for m:g/a/ given $x { }

[15:46] <p6eval> std 580b69a: OUTPUT«===SORRY!===␤Missing block at /tmp/hS2Ra1525m line 1:␤------> for m:g/a/ ⏏given $x { }␤Parse failed␤FAILED 00:01 121m␤»

[15:46] <moritz> std: for (m:g/a/ given $x) { }

[15:46] <p6eval> std 580b69a: OUTPUT«===SORRY!===␤Variable $x is not predeclared at /tmp/OAQh7_HDVt line 1:␤------> for (m:g/a/ given ⏏$x) { }␤Check failed␤FAILED 00:01 123m␤»

[15:46] <moritz> std: for (m:g/a/ given '') { }

[15:47] <p6eval> std 580b69a: OUTPUT«ok 00:01 122m␤»

[15:51] * TimToady is tempted to borrow 'wa' from Japanese

[15:52] <TimToady> all the English infix topicalizers are very heavyweight

[15:53] <TimToady> being the case, having been said, being so....

[15:53] <TimToady> being taken as given...

[15:53] <moritz> that said

[15:53] <TimToady> English tends to prefer prefix topicalizers

[15:54] *** MayDaniel joined
[15:55] <TimToady> but a low-precedence andthen equiv probably wants to be punctuational

[15:55] <TimToady> er, high-prec

[15:55] <TimToady> tighter

[15:56] <TimToady> Metaphors We Live^WDie By

[15:56] <moritz> sad that -> is already taken

[15:56] <TimToady> most of the arrows are took

[15:56] <moritz> my @matches = $str -> m:g/../ # wouldn't read too badly

[15:57] <TimToady> considered » for a while, which might work in isolation

[15:57] <TimToady> but probably has too many hyper overtones

[15:57] *** gbacon left
[15:57] <TimToady> -» is available

[15:58] <TimToady> _ is available, and has a mnemonic

[15:58] <TimToady> but not very pretty

[15:58] <moritz> but it's <alpha> by our very own classification :-)

[15:59] <TimToady> no problem for an infix

[15:59] <TimToady> the main thing I keep coming back to on the prec bend issue is that, as soon as you go to two chars for you're infix, you don't gain much over normal parens

[15:59] <TimToady> *your

[16:01] <moritz> ... if counting characters is your main metric

[16:01] <TimToady> yes, but requiring understanding of precedence is not an unmixed blessing

[16:02] <sorear> $string は s/foo/bar/ ?

[16:02] <TimToady> we could almost get away with using -->

[16:02] <sorear> I have to admit this amuses me

[16:03] <moritz> TimToady: almost?

[16:03] *** daniel-s left
[16:03] <TimToady> --> doesn't topicalize in a signature :)

[16:04] <TimToady> but if pronounced "returns", it has some syn<mumble>ness

[16:04] <TimToady> and resonates quite nicely as the item analog of ==>

[16:07] <moritz> it also fits when piping a Cat into a regex

[16:07] <TimToady> if put at ==> precedence, does have the problem of $result = $string --> m/foo/ not working as expected

[16:07] <moritz> yes, needs tighter precedence

[16:07] <TimToady> well, but you also want a precedence bender topicalizer

[16:07] * moritz wonders how    for $str --> m:g// -> $match { }  looks

[16:08] * moritz -> commute

[16:08] <TimToady> std: for $str ==> m:g/foo/ -> $match {...}  # just seeing if it parses

[16:09] <p6eval> std 580b69a: OUTPUT«===SORRY!===␤Variable $str is not predeclared at /tmp/9nK5eYr2rt line 1:␤------> for ⏏$str ==> m:g/foo/ -> $match {...}  # jus␤Potential difficulties:␤  $match is declared but not used at /tmp/9nK5eYr2rt line 1:␤------> for $…

[16:09] <TimToady> std: for 42 ==> m:g/foo/ -> $match {...}  # just seeing if it parses

[16:09] <p6eval> std 580b69a: OUTPUT«Potential difficulties:␤  $match is declared but not used at /tmp/g7acqbLPvQ line 1:␤------> for 42 ==> m:g/foo/ -> ⏏$match {...}  # just seeing if it parses␤ok 00:01 125m␤»

[16:09] <TimToady> std: for 42 ==> m:g/foo/ -> $ {...}  # just seeing if it parses

[16:09] <p6eval> std 580b69a: OUTPUT«ok 00:01 125m␤»

[16:15] *** wooden left
[16:15] *** molaf joined
[16:17] *** tyatpi_ joined
[16:17] *** Holy_Cow joined
[16:19] * TimToady is now thinking about a metaoperator that causes the left side of any infix to become the topic for the right side

[16:20] *** am0c left
[16:22] <TimToady> I guess it would only work on thunky ops, so maybe a metaop is overkill

[16:23] <masak> +1. overkill.

[16:23] <masak> besides, doesn't infix:<andthen> already topicalize in such a way?

[16:23] <TimToady> a postfix topicalizer is probably wanted, and maybe a better noop infix

[16:23] <TimToady> yes, that is one of the many points above

[16:24] * masak backlogs

[16:24] <masak> <mls_> those loop phasers are tricky

[16:24] <masak> mls_: you, sir, are awesome.

[16:28] *** kboga joined
[16:32] *** kboga left
[16:36] <TimToady> hmm

[16:36] <TimToady> maybe 'at' as a tight 'andthen'

[16:36] *** Alias_ left
[16:36] *** domidumont left
[16:36] <masak> cute.

[16:36] <TimToady> $foo at m/bar/  # almost works

[16:36] <TimToady> maybe too cute

[16:37] <masak> it's like a reversed statement_mod 'given'.

[16:37] <TimToady> and 'andthen' is a bit misnamed, since it's based on definedness

[16:37] <masak> should be 'defthen' :)

[16:37] <TimToady> andthen is not pure topicalizer

[16:37] <masak> right.

[16:38] <TimToady> which is why I start wondering about other ways of composing so we get pure topicalization and pure def checks

[16:38] <TimToady> suppose, for the sake of argument a postfix metaop : that topicalizes the left side

[16:38] <sorear> is anyone else bothered by the funky pseudo-topicalizer-ness of orelse?

[16:39] <TimToady> $foo &&: m/bar/ works for true values

[16:39] <sorear> .oO( Everybody wants the colon )

[16:40] <TimToady> we don't currently have a tight defand

[16:40] <masak> \\

[16:40] <masak> SCNR

[16:41] <masak> or maybe && but in italics.

[16:41] <TimToady> was my though too, but pity we can't have italic &&  :)

[16:41] <TimToady> *ght

[16:41] <masak> we'd have to write <i>&&</i>

[16:41] <masak> ugliest operator in town.

[16:42] <TimToady> ⅋

[16:42] <sjohnson> that doesn't show up on my end :/

[16:42] <sjohnson> .u house

[16:42] <phenny> U+2302 HOUSE (⌂)

[16:42] <TimToady> pity there's not a turned HOUSE that we could use for home plate

[16:43] <TimToady> and where's MOTEL, so we can play Monopoly?

[16:43] <TimToady> er HOTEL

[16:45] <sjohnson> .u hotel

[16:45] <phenny> sjohnson: Sorry, no results for 'hotel'.

[16:45] <masak> verdire, statement_mod_loop:given is my infix topicalizer of choice.

[16:45] <masak> it has its operants in the correct order, too ;)

[16:45] <masak> operands*

[16:46] <TimToady> what is this "correct" of which you speak, grasshopper?

[16:46] <masak> The One That I Like™

[16:46] <PerlJam> masak++

[16:46] *** simcop2387 left
[16:47] <masak> srsly though. we don't need more infix topicalizers.

[16:47] <masak> we need a smaller spec.

[16:47] <diakopter> +Inf

[16:48] *** simcop2387 joined
[16:48] * TimToady shrinks the spec to 1/+Inf

[16:49] <masak> perl6: say 1/+Inf

[16:49] *** GlitchMr joined
[16:49] <p6eval> pugs c943eeb, rakudo ce15be, niecza v10-44-g82a2206: OUTPUT«0␤»

[16:49] * TimToady is sorely tempted to blow the spec away and see if git can really recover it... :)

[16:49] <tadzik> (:

[16:50] <masak> TimToady: now let's not get agitated. put down the spec and step away from the keyboard. :)

[16:50] * masak .oO( speak softly and carry a big spec )

[16:50] <TimToady> ow

[16:52] *** GlitchMr42 left
[16:53] <masak> fwiw, I think chromatic++'s question "what's in the way for new people to go from 0 to productive with Perl 6" is highly, highly relevant.

[16:54] <masak> at least if we don't want to condemn Perl 6 to obscurity a la "it would've been a nice language, had it ever gained traction".

[16:54] *** Patterner left
[16:55] *** Psyche^ joined
[16:55] *** Psyche^ is now known as Patterner

[16:55] <TimToady> you have tremendous powers of oversimplification :)

[16:56] <masak> I am a self-proclaimed Perl 6 application developer. but I am one not on the grounds of "wow, Perl 6 is so fit-for-purpose!", but rather "let's see which holes I fall into if I do this"

[16:57] <masak> how do we actively create more of the first kind? note that it's then more about implementations (and distributions) than about spec.

[16:58] *** donri joined
[16:58] <masak> for example, there has been ideas about a one-click-install PHP-ish Rakudo distro wherein source files can be pure HTML with Perl 6 inside <% %> tags.

[16:58] *** tokuhiro_ left
[16:58] <masak> (that's not all PHP gets right, of course, but it's still an intriguing idea)

[16:59] <geekosaur> the return of eperl?

[16:59] <donri> php: perl learning environment for kids

[16:59] *** sayu joined
[17:00] <TimToady> sure, and if you think I'm supposed to be in the business of designing specific implementations, you've not been paying attention :P

[17:00] <diakopter> I still wonder who made that request/insistence, and if it's still relevant

[17:01] <TimToady> originally it was because people thought Perl 5 was badly implemented (hah), but nowadays it's more to avoid the perception of favoritism

[17:02] <diakopter> ah, political correctness

[17:02] <diakopter> (to oversimplify)

[17:04] <TimToady> if I had not done that, we might well have neither pugs nor niecza

[17:04] <TimToady> ask yourself if that would be a beneficial outcome

[17:05] <diakopter> perhaps, maybe not too likely, seeing how the pre-rakudos turned out

[17:05] <masak> TimToady: in the case I gave above, and similar cases, I do not expect you to design such things, no.

[17:05] <TimToady> and our mandate has always been not just to invent another crappy language

[17:06] <TimToady> so the process has been biased toward slow convergence on the right spot over fast convergence on the wrong spot

[17:06] <TimToady> we knew we'd take a hit for that

[17:06] <masak> TimToady: are you concerned over the slow convergence?

[17:07] <masak> is there such a thing as too slow convergence?

[17:08] <TimToady> well, rakudo's grammar has not converged on std's as fast as I'd like, but that's primarily because it's a volunteer organizatoin

[17:08] <sorear> woah, woah

[17:08] <diakopter> heh

[17:08] <moritz> well, nom is still laying the foundations for STD convergence

[17:09] <sorear> what's going on here?  why has the channel tepmerature just shot up 25?

[17:09] <moritz> we now have roles in nqp

[17:09] <TimToady> masak++ is having his Official Panic now becuase of something chromatic++ wrote

[17:09] <masak> seems so.

[17:09] <masak> waa waa waa panic panic panic

[17:10] <TimToady> :)

[17:10] <masak> there, I'm done.

[17:10] <moritz> once we can use qregex for parsing rakudo, std convergence becomes possible

[17:10] <moritz> wow, that was a short panic :-)

[17:10] <masak> I'm efficient :)

[17:10] <moritz> <.panic('OH NOEZ')>

[17:10] <TimToady> I'm not faulting rakudo for the path it's taking; we got 6model out of it, after all

[17:10] <masak> like removing a band-aid.

[17:11] <TimToady> I'm just expressing one spot where I'm impatient

[17:11] <diakopter> a bandaid that's been stuck to the skin for years ;)

[17:11] <masak> TimToady: I'm always grateful/happy for each new functionality Rakudo or Niecza brings online. and I don't think we've stalled at all.

[17:12] * diakopter tries Really Hard not to panic again

[17:12] <masak> TimToady: but I am... interested, let's say, in whether there are things we as a community could do to lower the thresholds chromatic talks about.

[17:13] <masak> TimToady: if diakopter panics again, do we get to deport him to Python? :D

[17:13] <TimToady> I think we're getting on toward the point where it makes sense to consider that, but it didn't really makes sense back when rakudo was running like a dog

[17:14] <diakopter> actually I had to do some Python at $work the other day

[17:14] <TimToady> we want to add adopters at the point they're ready for Perl 6

[17:14] <TimToady> and I don't think we're quite ready to Cross the Chasm

[17:15] <TimToady> despite the fact that P6 is always quite a bit more functional than P1

[17:15] * diakopter remembers the Bridge Illustration from his Navigators days

[17:15] <TimToady> *already

[17:15] <mls_> afk -> weekend...

[17:15] <TimToady> o/

[17:16] <masak> one cross Perl 6 has to bear is that the bar is so much higher now than it was at the time of P1.

[17:16] <mls_> (TimToady: regarding https://gist.github.com/1286654 , is R3U2R1 correct?)

[17:16] <masak> P1 started out at zero. P6 started out as P5.

[17:17] <diakopter> I thought P1 started out at shell/awk/sed/etc

[17:18] *** mkramer left
[17:18] <masak> fair enough.

[17:18] *** mj41 joined
[17:18] <TimToady> yes, shell/awk/sed was P1's bar

[17:18] <masak> still a smaller bite than P5, which does everything.

[17:19] <TimToady> and I delayed P1 till I was sure we could clear the bar

[17:19] <masak> well, we haven't released P6 yet either :P

[17:19] <TimToady> if you're going to be better at everything like P6 is, we have to get a little better at distributing the future unevenly

[17:20] <colomon> wait, I thought we were releasing P6 every month!  ;)

[17:20] <TimToady> that's...orthogonal...to the issue of the Innovator's Dilemma

[17:20] <sorear> seems chromatic doesn't use Linux for patent reasons

[17:20] <TimToady> chromatic can give you lots of reasons for all his opinions :)

[17:21] <masak> as part of my Official Panic, can I write a blog post titled "Perl 6 Will Never Be Released"?

[17:21] <masak> it'll be a good one, I promise.

[17:21] <TimToady> no, that's ingy's job :)

[17:21] *** espadrine left
[17:21] <sorear> Perl 6 doesn't need to be released.  It escaped, years ago.

[17:22] <TimToady> Perl 6 is released in the same sense as floodwaters are released from a dam; it'll go where it makes sense, and not elsewhere

[17:22] * colomon is trying desperately to think of a The Fugitive related joke here.

[17:22] <TimToady> the future finds it's own future-level, as it were

[17:23] <TimToady> which is why it's unevenly distributed

[17:23] <diakopter> oops, someone turned off the gravity

[17:23] <TimToady> that's fine, we still have levity

[17:24] <diakopter> but not brevity

[17:24] <masak> :P

[17:24] <masak> plenty of suavity.

[17:25] * TimToady was looking for briefer 'andthen', or a way of factoring it out entirely, but Someone took that as adding complexity

[17:26] <colomon> For what it's worth, I've found trying to implement a short "real world" program in Niecza very rewarding.  But on the other hand, I had to stop and code up four or five "core" routines for Niecza that I desperately needed for my code.

[17:26] <TimToady> same here

[17:26] <TimToady> well, only two for me

[17:29] <colomon> now if we could just get another twenty people to do the same.... ;)

[17:30] <masak> I'm enjoying using Niecza for "real world" stuff too. just not making much noise about it at the moment.

[17:31] *** donri left
[17:31] <TimToady> we really don't know where the breakout will be first; in the Golden Age we thought it would be in FP, and others think we'll obsolete some OO language, or PHP, or...

[17:32] <TimToady> I think it would be fun to breakout everywhere at once, but I don't really expect it

[17:32] <sorear> I think niecza/clr is a bad setup for attacking the command line scripts field.  Too much overhead

[17:32] <TimToady> depends on the script :)

[17:33] * diakopter is hoping sorear's serialization work cuts startup time by 90%

[17:33] <diakopter> wishful thinking.

[17:33] *** espadrine joined
[17:34] <sorear> I'm hoping for more like 30%

[17:34] <TimToady> sorear: the obviously solution is to write a bash emulator for .NET that calls into niecza efficiently )

[17:34] <diakopter> heh.

[17:35] <sorear> the real wins will come from rearranging the build to make better use of AOT

[17:35] <masak> "AOT"?

[17:36] <masak> "Aspect-Oriented Turtles"? (all the way down?)

[17:36] <diakopter> ahead-of-time compilation to binaries in mono

[17:36] <masak> ooh

[17:37] <TimToady> and it's quite possible that the breakout will come via some engine that is still only a twinkle in someone's eye

[17:38] <PerlJam> As long as the someone that will initiate the breakout isn't still a twinkle in someone's eye

[17:38] <masak> in retrospect, I'm disappointed at my Official Panic. I'm thinking I should have researched it better, and flailed my arms around more. :/

[17:38] <TimToady> you'll get better at it as you go along :)

[17:38] <colomon> I still halfway expect it will be the first .NET p6 which can use p5 modules on CPAN.  Even if it was generally slower than p5, the ability to use two entire huge families of libraries seems like it would be a huge win.

[17:38] <ashleydev>  /mark

[17:38] <TimToady> I'll let you take a continuation

[17:38] <masak> ooh

[17:39] *** uasi left
[17:39] <masak> I was about to propose defacing S01, but continuation is cleaner, yes.

[17:39] <PerlJam> colomon: I think anything that makes using p6 for real world problems super easy would be win enough

[17:40] <TimToady> well, cleaner for the user, but someone has to implement CPS, and get it to integrate with the non-CPS world somehow

[17:40] <slavik1> CPS?

[17:40] <PerlJam> slavik1: continuation passing style

[17:40] <TimToady> continuation passing style

[17:40] * geekosaur hasn't been able to get mono on lion so far, so no niecza here...

[17:40] <awwaiid> Gimme a C --- "C!" ... etc

[17:40] <slavik1> layman's terms?

[17:41] <slavik1> hurray for wikipedia

[17:41] <PerlJam> slavik1: heh, I was just about to link you there :)

[17:41] <sorear> CPS is kind of a misnomer in this context

[17:41] <TimToady> layman's terms?  like, universes that allow time travel vs universes that don't :)

[17:41] * geekosaur also has utter crap for network, so that's been hung for >5 min

[17:42] <sorear> basically, the high degree of stack introspection and manipulation allowed in Perl 6 forces Perl 6 implementations to use their own stack

[17:42] <colomon> geekosaur: how are you trying to get mono?

[17:42] <geekosaur> macports, bmacports; once you use any of the package managers, you're more or less stuck with it, or you punt and install *everything* manually

[17:43] *** sayu left
[17:43] <geekosaur> gah

[17:43] * geekosaur typing blind (did I mention crap network?)

[17:43] <diakopter> geekosaur: did you try the package download from go-mono.com?

[17:43] <sorear> Parrot is designed to support Perl 6's stack requirements

[17:43] <geekosaur> could you read past the first word?

[17:43] <geekosaur> never mind

[17:43] <sorear> we're doomed to support two parallel stacks if we want to mix P6 with C code

[17:44] <colomon> I use macports in general, and mono didn't work properly until I tried to use the package download from go-mono.com.

[17:44] <geekosaur> problem is, I've helped 6 people this week alone (one of them *here*) solve a problem caused by mixing stuff.

[17:45] <geekosaur> I mean, sure, go-mono.com and then hope like hell that nothing else on this machine never notices or the result will be unfixable without nuke-from-orbit.  BTDT

[17:46] <diakopter> iirc the package doesn't install itself to your $PATH, you have to add it there yourself

[17:46] <diakopter> so how could it corrupt anything?

[17:47] <geekosaur> too many overly "smart" configure scripts that look everywhere under the sun

[17:48] <geekosaur> which is why macports is strict on the "don't mix with anything else" and homebrew is moving there after a brief attack of "they're just dumb, *we're* smarter than tha...oh $#!+"

[17:54] <colomon> ah.  well, by all means, continue trying what wouldn't work for me and apparently isn't working for you.  :)

[17:55] <geekosaur> I haven't tried with latest release yet; they only just imported lion compatibility

[17:55] *** kst left
[17:56] <geekosaur> (that is the one downside, but impossible hairsnarls requiring the Gordian solution are worth avoiding)

[18:00] * mikemol would be very happy to have an ePub documenting NQP syntax and keywords, for study prior to trying to implement it.

[18:01] <mikemol> Granted, at the rate I get around to things, that'd probably start happening in 2013...

[18:03] *** kst joined
[18:07] <sorear> NQP is an implementation-defined language

[18:07] <geekosaur> sorry, I am a little hyper about this ting, I have one machine to work with right now and stuff with a track record of hosing machines is Right Out

[18:08] *** overrosy joined
[18:08] <geekosaur> (in motel room, unemployed, resume etc. lives on this machine, yes it's backed up but that's not so useful if I can't do anything with it...)

[18:09] <sorear> geekosaur: want a feather account?

[18:09] <geekosaur> installing diretly *might* be safe but I'm not in a position to be the test subject

[18:09] <sorear> has anyone seen Juerd lately?

[18:09] <sorear> I sent him mail asking permission to make a new account months ago

[18:09] <geekosaur> still eed something to accessit with (if it comes to that I still have this account at CMU, but getting-at is still a problem.)

[18:09] <geekosaur> also see "crap network"

[18:10] *** tyatpi_ left
[18:10] <sorear> well the idea was that you could install mono/niecza on someone else's machine. :)

[18:10] <geekosaur> (actually, it would be nice if I could run another OS X in a VM, except that it'd probably be a bit heavy on this laptop)

[18:10] <sorear> but yes crap network...

[18:10] <sorear> you could probably run something a bit lighter than OSX in the VM

[18:11] <sorear> Linux 2.2.x would boot in 4MB

[18:11] <geekosaur> (I do have a Windows VM for that matter which would be ideal except VMs suck pretty badly on here)

[18:11] <sorear> I wonder how hard it would be to get Mono running on Linux 2.2 or 2.4

[18:13] *** Limbic_Region joined
[18:14] *** GlitchMr42 joined
[18:17] *** kaleem joined
[18:17] * sorear wonders how much of a class should be saved

[18:17] *** GlitchMr left
[18:17] * diakopter wonders if you mean a class at school

[18:18] <sorear> no, I'm looking at niecza's P6how class

[18:18] <sorear> there are approximately two levels of caching herr

[18:19] <sorear> some stuff is done only at .compose time, other stuff has to be redone after an augment

[18:21] *** uasi joined
[18:24] * geekosaur is stifling some additional rants, like parallels 6 doesn't use VTx on this machine and Digital River failed to let him download after he purchased P7 which has the fix...)

[18:30] *** jferrero left
[18:33] *** tyatpi_ joined
[18:34] <sorear> geekosaur: if VMs are problematic, I encourage you to consider acquiring a (probably used) second computer.  I have a 1994 laptop that I occasionally use for dangerous experiments

[18:36] *** uasi left
[18:36] *** Trashlord joined
[18:36] <geekosaur> see "unemployed" above

[18:36] <geekosaur> also, I have like 3 more computers - in storage (see "mote room")

[18:37] * geekosaur is in a sucktastic hell in terms of lots of things atm :(

[18:37] <geekosaur> but I keep trying to get some kind of perl6 going on here because I don't want to just drop out of existence like I've had to do with so many things

[18:38] *** [Coke] joined
[18:39] <TimToady> we will try to remain a relatively cheap addiction :)

[18:45] <masak> perl6: say <cheap fast correct>.pick(2)

[18:45] <p6eval> pugs c943eeb: OUTPUT«cheapcorrect␤»

[18:45] <p6eval> ..rakudo ce15be, niecza v10-44-g82a2206: OUTPUT«cheap fast␤»

[18:45] <awwaiid> sweet

[18:45] <diakopter> perl6: say <cheap fast correct>.pick(1)

[18:45] <p6eval> rakudo ce15be: OUTPUT«cheap␤»

[18:45] <p6eval> ..niecza v10-44-g82a2206: OUTPUT«fast␤»

[18:45] <p6eval> ..pugs c943eeb: OUTPUT«correct␤»

[18:45] <masak> :P

[18:45] <moritz> lol

[18:46] <diakopter> lol

[18:46] <masak> Pugs insists on claiming to be correct :)

[18:47] <masak> perl6: say <panic waa>.roll(6)

[18:47] <p6eval> niecza v10-44-g82a2206: OUTPUT«␤Unhandled Exception: Unable to resolve method roll in class Parcel␤  at /tmp/QDZfYs8bZt line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2160 (CORE C1034_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2161 (CORE module…

[18:47] <p6eval> ..pugs c943eeb: OUTPUT«*** No such method in class Array: "&roll"␤    at /tmp/tmYzXteV2r line 1, column 5 - line 2, column 1␤»

[18:47] <p6eval> ..rakudo ce15be: OUTPUT«waa panic waa panic panic waa␤»

[18:47] <masak> wut? Niecza has .pick but not .roll?

[18:47] <masak> someone went for the higher-hanging fruit...

[18:48] *** Trashlord left
[18:49] <colomon> I defined what I needed, thank you.

[18:50] <masak> ok... let's see if I can put together a patch for .roll, then.

[18:51] <colomon> masak++

[18:54] <masak> compiling...

[18:55] <PerlJam> .oO( .pitch .roll .yaw )

[18:56] <geekosaur>  .widdershins?

[18:56] <diakopter> niecza: say { say 5; }()()

[18:56] <p6eval> niecza v10-44-g82a2206: OUTPUT«5␤␤Unhandled Exception: No value for parameter $key in CORE CommonEnum.postcircumfix:<( )>␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (CORE CommonEnum.postcircumfix:<( )> @ 0) ␤  at /tmp/_FlB402bj5 line 1 (MAIN mainline @ 2) ␤  at /home/p6eval/niecza…

[18:57] <TimToady> it's okay by me if Airplane.roll doesn't call List.roll...

[18:58] <TimToady> or Ship.list

[19:01] * [Coke] returns from a network outage.

[19:01] <[Coke]> colomon: pong?

[19:02] <TimToady> so when you're coming in for a landing, why do they call it a rollout?

[19:02] <geekosaur> that's what happens to the rubber on the tires?

[19:02] <colomon> [Coke]: hopefully old news now -- I had some sort of git muck-up in roast, and was hoping you could verify your most recent patches to it were still correct.

[19:05] <masak> sorear, colomon: https://gist.github.com/1288000

[19:05] <[Coke]> colomon: I'll assume you didn't screw it up until proven otherwise.\

[19:05] * jnthn back 

[19:06] <colomon> benabik checked last night and claimed it was correct.  but I have no idea what I did to trigger a merge, so relying on my git competence may be dodgy

[19:07] <benabik> colomon: It looks like the result of a `git pull`.

[19:07] *** imarcusthis left
[19:07] <colomon> hmmm... forgot the --rebase, maybe?

[19:08] <benabik> yeah

[19:08] *** soh_cah_toa joined
[19:09] <[Coke]> I have an alias so I /always/ do a pull --rebase. hardcode git people seem to think this is bad, though.

[19:09] <benabik> I just set branch.master.rebase

[19:09] <benabik> On _most_ of my repos.

[19:09] <colomon> I still use svn for $work, so when I hadn't done a lot of p6 work lately I tend to start forgetting things like --rebase

[19:09] *** imarcusthis joined
[19:10] <[Coke]> colomon: Ah, I cheat by using git-svn for work!

[19:10] <[Coke]> makes my life much easier, and the muggles never notice.

[19:10] <colomon> [Coke]: I wasn't at all happy with it when I tried that.

[19:11] <dalek> niecza: f03032c | (Solomon Foster)++ | t/spectest.data:

[19:11] <dalek> niecza: Turn on pick.t.

[19:11] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f03032c29a

[19:11] <dalek> niecza: b99829c | masak++ | lib/CORE.setting:

[19:11] <dalek> niecza: add .roll

[19:11] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b99829cdf8

[19:11] <TimToady> git tends to punish cargo culters from time to time

[19:11] <[Coke]> colomon: I'm much happier with it now that I'm a git regular.

[19:11] <[Coke]> when I wasn an svn regular, it was horrible.

[19:11] <[Coke]> *was an

[19:12] <colomon> I like git, but I don't use it often enough to keep all the useful invocations in my head all the time.

[19:12] <[Coke]> whoa. awesome perl job about 15m north of here, 60K-150K+10K signon bonus.

[19:12] <colomon> where do you live?

[19:12] * [Coke] is so happy to see that, even if he can't leave his current job. ;)

[19:12] <tadzik> 15 meters?

[19:12] <[Coke]> I work in albany, ny.

[19:12] <TimToady> the problem with relying on distributed expertise is that isn't :)

[19:12] <[Coke]> tadzik: miles: I live in the us

[19:13] <tadzik> ah, those different units

[19:13] <colomon> and miles versus minutes is probably about the same.  :)

[19:13] <[Coke]> whoops! and I meant minutes! colomon++ FTW.

[19:13] <tadzik> :)

[19:13] <[Coke]> I just instinctively countered meters with miles. ;)

[19:14] <TimToady> we need more letters...

[19:14] *** araujo joined
[19:14] <colomon> [Coke]: I could (in theory) switch to git for $work, but my svn usage is heavily based on the "one repository, dozens of different sub-repos" model that's not allowed in git.

[19:14] <colomon> afk # needs to read book to a 3yo

[19:15] <benabik> [Coke]: Sometimes I remember that actually programming for a living would pay better.  But despite this thesis taking forever to come together, it's far more interesting.

[19:15] <TimToady> yotto-ounces?

[19:16] <[Coke]> nom:say 721-77

[19:16] <[Coke]> nom: say 721-77 #ETOOMUCH WHITESPACE

[19:16] <p6eval> nom ce15be: OUTPUT«644␤»

[19:17] <TimToady> you leave out the whitespace when you use : in English, do you?

[19:17] <[Coke]> rakudo: enum A <1 2 3>; enum B <a b c>; say A.enums.keys; say B.enums.keys;

[19:17] <p6eval> rakudo ce15be: OUTPUT«1 2 3␤a b c␤»

[19:18] <[Coke]> TimToady: that would be a more convincing argument if I was speaking english to the eval bot.

[19:18] <TimToady> 'say' sure looks like English to me

[19:19] *** risou is now known as risou_awy

[19:19] <[Coke]> rakudo: enum A <a b c>; enum B <a b c>; say &a.perl

[19:19] <p6eval> rakudo ce15be: OUTPUT«===SORRY!===␤Symbol '&a' not predeclared in <anonymous> (/tmp/JQVXYcGEKu:1)␤»

[19:20] <[Coke]> TimToady: I am not arguing with about your language design. I was being snarky about "nom:say" not working, and needing "nom: say" instead.

[19:20] <[Coke]> I know better than to argue with you about such things, which is why I am your RT monkey.

[19:21] <[Coke]> rakudo: enum A <a b c>; enum B <a b c d>; say &d.perl

[19:21] <p6eval> rakudo ce15be: OUTPUT«===SORRY!===␤Symbol '&d' not predeclared in <anonymous> (/tmp/K6YZxsJPTD:1)␤»

[19:21] <[Coke]> rakudo: enum A <a b c>; enum B <a b c d>; say d.perl

[19:21] <p6eval> rakudo ce15be: OUTPUT«B::d␤»

[19:21] <[Coke]> rakudo: enum A <a b c>; enum B <a b c d>; say c.perl

[19:21] <p6eval> rakudo ce15be: OUTPUT«B::c␤»

[19:22] <[Coke]> rakudo: enum A <a b c>; enum B <a b c>; say c.perl

[19:22] <p6eval> rakudo ce15be: OUTPUT«B::c␤»

[19:23] *** kaleem left
[19:23] <[Coke]> rakudo: enum foo <>; say foo[1]

[19:23] <p6eval> rakudo ce15be: OUTPUT«===SORRY!===␤Unsupported use of <>; in Perl 6 please use lines() to read input, ('') to represent a null string or () to represent an empty list at line 1, near "<>; say fo"␤»

[19:23] <[Coke]> rakudo: enum foo < >; say foo[1]

[19:23] <p6eval> rakudo ce15be: OUTPUT«===SORRY!===␤Cannot put type arguments on foo because it is not a parametric type at line 1, near ""␤»

[19:23] <[Coke]> rakudo: enum foo; say foo[1]

[19:23] <p6eval> rakudo ce15be: OUTPUT«Could not find sub &foo␤  in block <anon> at /tmp/OY9MFrJAR6:1␤  in <anon> at /tmp/OY9MFrJAR6:1␤»

[19:23] <TimToady> S12:1936 says that c.perl should be an error

[19:25] *** molaf left
[19:25] <jnthn> TimToady: What do we stick in c?

[19:25] <jnthn> Failure?

[19:26] * jnthn checks that really is the line of spec he's thinking of :)

[19:26] <TimToady> Failure might work

[19:26] <TimToady> needs to have something there in case there's a 3rd one

[19:26] <[Coke]> That was RT #72696 if anyone wants to update it.

[19:27] <[Coke]> rakudo: enum somenum <a b c d e>; my somenum $temp = 3; say $temp.key;

[19:27] <p6eval> rakudo ce15be: OUTPUT«Type check failed in assignment to '$temp'; expected 'somenum' but got 'Int'␤  in block <anon> at /tmp/5fZwMAEju3:1␤  in <anon> at /tmp/5fZwMAEju3:1␤»

[19:27] <[Coke]> rakudo: enum somenum <a b c d e>; my somenum $temp = d; 

[19:27] <p6eval> rakudo ce15be:  ( no output )

[19:27] <[Coke]> rakudo: enum somenum <a b c d e>; my somenum $temp = d; say $temp;

[19:27] <p6eval> rakudo ce15be: OUTPUT«somenum::d␤»

[19:28] <[Coke]> TimToady: should the line with $temp = 3 work?

[19:28] <[Coke]> or anyone who answers spec questions, really.

[19:29] <TimToady> there are at least two theories about that, and they're both wrong :)

[19:29] * [Coke] just updates the ticket with the code output, then.

[19:30] <TimToady> it kinda depends on whether you think enums are subject to type erasure, such that the run-time only knows about integers

[19:31] <TimToady> Perl 6 has tended to be anti-erasure

[19:31] <[Coke]> TimToady: RT #75370

[19:31] <TimToady> but it could be made to work either way, really

[19:31] *** espadrine left
[19:32] <TimToady> it would have to be an implicit conversion, in the non-erasure view

[19:32] <[Coke]> nom: enum X is export <A B C>;

[19:32] <p6eval> nom ce15be: OUTPUT«===SORRY!===␤No applicable candidates found to dispatch to for 'trait_mod:<is>'. Available candidates are:␤:(Mu $type, Any $size, Any $nativesize)␤:(Attribute $attr, Any $rw)␤:(Attribute $attr, Any $readonly)␤:(Routine $r, Any $rw)␤:(Routine $r, Any $default)␤:(Parame…

[19:32] <[Coke]> nom: enum X <A B C> is export;

[19:32] <p6eval> nom ce15be: OUTPUT«===SORRY!===␤Confused at line 1, near "enum X <A "␤»

[19:32] <TimToady> and we'd presume there was a unique mapping, which isn't guaranteed by enums

[19:32] <TimToady> reverse mapping, that is

[19:33] <TimToady> but the response of Perl 6 to native typing is mostly to hoist the type info into the container or into the metadata, not to throw it away

[19:34] <TimToady> so it would be up to the $temp container to enforce the coercion to somenum(), if anyone did

[19:34] <[Coke]> Do we have an evalbot with no ICU lib available?

[19:35] <jnthn> TimToady: Well, Rakudo mostly does "container erasure" there too, though we do have sufficient meta-data to hand at runtime if we need to know that $x is a native int, for example.

[19:36] <TimToady> well, yes, given that you'd like your typical container to optimize down to a C pointer

[19:36] <TimToady> or better :)

[19:37] <[Coke]> nom: 0 but last;

[19:37] <p6eval> nom ce15be: OUTPUT«Warning␤»

[19:37] <[Coke]> ... what warning?

[19:37] <[Coke]> ah. no warning. weird.

[19:37] <[Coke]> nom: last;

[19:37] <p6eval> nom ce15be: OUTPUT«Warning␤»

[19:38] <TimToady> Obviously, it's your Last Warning!

[19:38] <jnthn> :P

[19:39] <jnthn> I guess that's nothing catching an unhandled "last" control exception, and Parrot trying to figure out what on earth to do with it :)

[19:39] <[Coke]> rakudo: class Foo does Positional[::T] {}; say Foo ~~ Positional

[19:39] <p6eval> rakudo ce15be: OUTPUT«===SORRY!===␤Could not locate compile-time value for symbol T␤»

[19:39] <jnthn> That looks correct.

[19:39] <jnthn> It needs to know what T is there to use it as a type argument at compile time.

[19:39] <[Coke]> T isn't some magic thing that is a type?

[19:39] <[Coke]> ah, yes, but not magical. OK.

[19:39] <jnthn> [Coke]: That's a role usage, not a role definition.

[19:40] <jnthn> [Coke]: If it was being done in a role's signature, then yes, it'd be a type capture.

[19:40] <jnthn> Maybe the submitter was confused, or just fuzzin' :)

[19:40] <[Coke]> it was masak.

[19:40] <colomon> definitely confused.  ;)

[19:40] <jnthn> ;)

[19:40] <jnthn> Definitely trying to bust Rakudo :P

[19:41] <[Coke]> rakudo: my $a = Multi.new; $a.push(sub (1,2,3) { }); $a.push(sub (1,2) { }); say join ", ", $a.candidates

[19:41] <p6eval> rakudo ce15be: OUTPUT«Could not find sub &Multi␤  in block <anon> at /tmp/DDhSVoAEMI:1␤  in <anon> at /tmp/DDhSVoAEMI:1␤»

[19:41] <[Coke]> Is Multi gone?

[19:41] *** pmurias joined
[19:41] <pmurias> sorear: hi

[19:42] <jnthn> [Coke]: Yes

[19:42] <pmurias> sorear: re serialize branch of niecza, any ideas how it will deal with Perl 5 interop?

[19:43] <[Coke]> rakudo: class A { method b { 'b' } }; my $a = A.new; my $b = &A::b.assuming($a); $b()

[19:43] <p6eval> rakudo ce15be: OUTPUT«Method 'assuming' not found for invocant of class 'Any'␤  in block <anon> at /tmp/6__8CGzj6s:1␤  in <anon> at /tmp/6__8CGzj6s:1␤»

[19:43] <[Coke]> is .assuming also gone?

[19:43] <jnthn> No, assuming is there

[19:43] <jnthn> But A::b is (correctly) not

[19:44] <jnthn> The method has to be decalred "our" for that to work.

[19:44] <[Coke]> rakudo: class A { our method b { 'b' } }; my $a = A.new; my $b = &A::b.assuming($a); $b()

[19:44] <p6eval> rakudo ce15be:  ( no output )

[19:44] <[Coke]> k.

[19:44] <[Coke]> jnthn++

[19:46] <[Coke]> rakudo: my @t; for < a b > { @t.push( sub { $OUTER::_ } ) }; say $_() for @t

[19:46] <p6eval> rakudo ce15be: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in block <anon> at /tmp/3c0i82rwTB:1␤  in method reify at src/gen/CORE.setting:3752␤  in method reify at src/gen/CORE.setting:3657␤  in method reify at src/gen/CORE.setting:3657␤  in method gimme at src/…

[19:46] <[Coke]> rakudo: { say $OUTER::_ }

[19:46] <p6eval> rakudo ce15be: OUTPUT«Any()␤»

[19:46] <jnthn> OUTER NYI

[19:46] * jnthn should do that one...

[19:47] <[Coke]> it used to NPAE

[19:48] <TimToady> .oO(National Party of Automotive Engineers)

[19:48] <[Coke]> Is it a legitimate problem that we cannot run perl6 outside of the build dir if it's not installed? There is a comment on #68636 about this, paraphrased, "what if a user is trying to use rakudo and there's a system parrot they don't have access to?" ... I don't think this is our problem.

[19:49] <[Coke]> we've made it very easy for them to build their own parrot.

[19:49] <[Coke]> (and install it!)

[19:54] * [Coke] comments on the ticket, cc's the list, and will close-if-warnocked.

[19:54] <masak> [Coke]++

[19:55] <[Coke]> rakudo: my %h; say %h.WHAT

[19:55] <p6eval> rakudo ce15be: OUTPUT«Hash()␤»

[19:55] <[Coke]> rakudo: my %h; say %h.WHENCE

[19:55] <p6eval> rakudo ce15be: OUTPUT«Method 'WHENCE' not found for invocant of class 'Hash'␤  in block <anon> at /tmp/5OnJ5IBAie:1␤  in <anon> at /tmp/5OnJ5IBAie:1␤»

[19:58] <[Coke]> ok. Looking at https://rt.perl.org/rt3/Ticket/Display.html?id=64928, it closes with a reference to WHENCE. the WHAT bit seems to be covered already; can someone write me some code that tests what pmichaud is saying there?

[19:59] *** Limbic_Region left
[19:59] <[Coke]> rakudo: sub foo($v, $w?, $x?, $y?){ say $v~"|"~$w~"|"~$x~"|"~$y}; foo(1,,3,);

[19:59] <p6eval> rakudo ce15be: OUTPUT«Use of uninitialized value in string context␤Use of uninitialized value in string context␤1|3||␤»

[20:03] <[Coke]> nom: say 720-81

[20:03] <p6eval> nom ce15be: OUTPUT«639␤»

[20:06] *** gbacon joined
[20:06] *** trexy left
[20:06] *** gbacon left
[20:07] *** donri joined
[20:08] <[Coke]> be nice to get the total number down under 700, even though the "total" number is.

[20:10] *** GlitchMr42 left
[20:11] *** wk joined
[20:13] *** mj41 left
[20:15] *** icwiener joined
[20:19] *** mkramer1 joined
[20:21] *** silug left
[20:38] *** mkramer1 left
[20:46] *** f00li5h left
[20:47] *** f00li5h joined
[20:57] <masak> heh, Perl 5 hasn't even renamed their "system" to "run" yet, and we're already on "shell" :P

[20:58] <tadzik> :P

[20:58] <diakopter> php has exec and shell_exec

[20:58] <tadzik> and their print is still just say without a newline!

[20:58] <diakopter> as I learned earlier this week while doing some php.

[20:58] <tadzik> *snicker*

[20:59] <diakopter> SCNR always reminds me of *snicker*

[20:59] <tadzik> same here

[20:59] <tadzik> it's like a square-rectangle situation

[20:59] <masak> diakopter: me too!

[21:00] <masak> tadzik: how is it like a square-rectangle situation?

[21:00] <flussence> hey, php's print isn't just say without a newline, it's also echo with a return value!

[21:00] <diakopter> I think tadzik was still talking about p5 there

[21:01] <flussence> (and echo is also a "language construct", which means "we can't be bothered parsing this properly so you can't use it in places where a function call would work"...)

[21:01] <tadzik> no, I meant snicker-scnr

[21:01] <diakopter> heh, I meant your "and your print ..." line

[21:01] <diakopter> *"and their print"

[21:01] <tadzik> as in, where you say "SCNR", snicker would be appliable too. Where you say *snicker*, SCNR not neceserilly would be

[21:01] <diakopter> errors' commedy

[21:02] <diakopter> LOL

[21:02] <diakopter> errors' comedy

[21:02] * diakopter gets it

[21:03] <sorear> good * #perl6

[21:03] <diakopter> HOW

[21:04] <tadzik> HOWGH, sorear 

[21:04] <masak> tadzik: oh, so you meant it's a superset-subset relationship?

[21:04] <tadzik> masak: yes, exactly

[21:04] <tadzik> phenny: "to tak jak z prostokątem i kwadratem"?

[21:04] <phenny> tadzik: The id to en translation failed, sorry!

[21:05] <tadzik> phenny: pl "to tak jak z prostokątem i kwadratem"?

[21:05] <phenny> tadzik: "it's like a rectangle and square" (pl to en, translate.google.com)

[21:05] <masak> sorear: oh hai -- please apply my humble patch at https://gist.github.com/1288000

[21:05] <diakopter> masak: no ocmmit bit?

[21:05] <masak> haha, prostokątem

[21:05] <masak> diakopter: nope.

[21:06] <masak> tadzik: "kąt" is "angle"?

[21:06] <masak> tadzik: and "prosto" is, hm, "straight"?

[21:07] * tadzik lols when imagining masak as an elegant gentleman, in a hat, suit, a monocle, sitting there with a cup-o wine saying "prostokątem" and giggling

[21:07] <masak> well, I've taken off my hat...

[21:07] <tadzik> masak: exactly (translations)

[21:08] <masak> and they say Polish is hard!

[21:08] <tadzik> wcale nie jest :)

[21:08] <tadzik> now say "Brzęczyszczykiewicz"

[21:09] <masak> I managed it, but it took more than three seconds.

[21:09] <tadzik> ;)

[21:09] <tadzik> anyway, you are capable, I even taught you the "tą" and "tę" difference

[21:09] <masak> oh yes.

[21:09] <tadzik> I have a lot of fun correcting proffesors at lectures all the time

[21:09] <masak> which one was the biernik again?

[21:09] <tadzik> tę

[21:10] <masak> ah, right.

[21:10] <masak> so I thought.

[21:10] *** MayDaniel left
[21:11] <masak> tadzik: you just reminded me of blackouts in Białowieża :)

[21:11] <tadzik> blackouts?

[21:11] <masak> as in, no electricity.

[21:11] <tadzik> oh, right :)

[21:12] <masak> my mind is very situational. topics remind me of the setting the discussion took place in.

[21:12] <tadzik> since I'm living in the Big City I'm not so familiar with blackouts anymore

[21:12] *** bluescreen10 left
[21:12] <tadzik> I thought we discussed that one on the bus

[21:13] <masak> we did, too.

[21:13] <sorear> masak: are you trying to tell me you don't have a commit bit yet?  fixed.

[21:13] <masak> \o/

[21:13] <sorear> tadzik: apparently Big City is not located in California.

[21:14] * masak crosses out "Perl 6 implementor" on his business card and writes "haz commit bit to all major Perl 6 implementations"

[21:14] <sorear> "and some minor"

[21:14] <masak> no, no minor ones :)

[21:14] <tadzik> sorear: nope, but the small town I used to live in is like 8 kilometers outside of Warsaw, but it has a different power supply, and goes blacked out all the time

[21:15] <masak> sorear: to be fair, you Californians seem to have a thing for recurring blackouts.

[21:15] <sorear> masak: you lost your yapsi bit?

[21:15] <masak> no, just trying to pretend Yapsi isn't a minor implementation...

[21:15] <masak> not doing to well, I see.

[21:16] <masak> too*

[21:16] <sorear> tadzik: I live in a small town with 57k residents and 1-2 yearly blackouts

[21:16] <tadzik> oh, 1-2 yearly blackouts is nothign

[21:16] <tadzik> they're like weekly in Izabelin

[21:16] <sorear> yeah, I have to keep in mind that 99% uptime is still good

[21:17] <tadzik> I mean, they think that if they turn off the power for one second on 1 AM then nobody would notice

[21:17] * sorear supposes 57k is a huge city in eastern europe

[21:17] <tadzik> Warsaw is 1 720 398

[21:18] <tadzik> sorear: not really, now as I look at various statistics about Polish cities

[21:19] <tadzik> I'm trying to find something comparable that I've been in

[21:19] <tadzik> erm, been to

[21:22] <diakopter> niecza: my &foo = { say 66 }; BEGIN { foo }; &foo = { say 55 }

[21:22] <p6eval> niecza v10-46-gb99829c: OUTPUT«␤Unhandled Exception: Unable to resolve method postcircumfix:<( )> in class Any␤  at /tmp/1FOlX0sMRs line 1 (MAIN C2_ANON @ 1) ␤  at  line 0 (ExitRunloop @ 0) ␤  at  line 0 (boot-MAIN @ 0) ␤  at  line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/boot/lib/…

[21:23] <jnthn> That assignment isn't at compile time.

[21:23] <jnthn> (so it's correct that it doesn't say 66)

[21:27] <diakopter> niecza: { BEGIN { say 44 } }; BEGIN { say 55 }

[21:27] <p6eval> niecza v10-46-gb99829c: OUTPUT«44␤55␤»

[21:31] <masak> niecza: BEGIN { END { say 3 }; say 1 }; say 2

[21:31] <p6eval> niecza v10-46-gb99829c: OUTPUT«1␤2␤»

[21:31] <masak> sorear: ^^

[21:31] *** icwiener left
[21:31] *** icwiener joined
[21:32] *** saaki left
[21:33] <jnthn> nom: BEGIN { END { say 3 }; say 1 }; say 2 # *hope* this works...

[21:33] <p6eval> nom ce15be: OUTPUT«1␤2␤3␤»

[21:33] <jnthn> phew

[21:34] <diakopter> why should that END occur after the say 2 ?

[21:34] <diakopter> doesn't it mean END of that block?

[21:34] <jnthn> END is "end of program"

[21:34] <benabik> nom: BEGIN { LEAVE { say 2 }; say 1 }; say 2

[21:34] <p6eval> nom ce15be: OUTPUT«===SORRY!===␤LEAVE phaser not yet implemented at line 1, near "; say 1 };"␤»

[21:34] <jnthn> LEAVE is more "end of that block"

[21:34] <benabik> Awh.

[21:34] <diakopter> ah

[21:35] <jnthn> benabik: mls++ is working on that...I should review his patch, when I'm less exhausted than I am today

[21:35] <masak> oh, you too, eh?

[21:35] <jnthn> Teaching does that to me.

[21:36] <jnthn> Especially when it's first time through with a class.

[21:36] <jnthn> Hope to have a few optimizer branch merge shaped tuits tomorrow :)

[21:38] <sorear> masak: END isn't really implemented in niecza... neither is BEGIN for that matter. :)

[21:44] *** y3llow_ joined
[21:44] *** pothos_ joined
[21:45] <masak> heh.

[21:45] <wk> sorear: in Estonia we have 47 cities and 3 are bigger than yours :)

[21:46] *** y3llow left
[21:46] *** y3llow_ is now known as y3llow

[21:46] *** pothos left
[21:46] *** pothos_ is now known as pothos

[21:46] <tadzik> :P

[21:59] *** saaki joined
[22:01] <masak> wk: Oh, sa oled Eestist?

[22:03] <wk> masak: Jah, lisaks Perlile valdad Sa eesti keelt ka?

[22:05] <masak> ei :)

[22:06] <wk> masak: how sad :)

[22:06] <masak> Minu vanaisa oli Eestist, kuigi.

[22:07] <pmurias> sorear: what's the state of the serializer branch?

[22:07] <wk> masak: your name recalls Estonian

[22:08] <masak> correct.

[22:08] <wk> wk: but could be swedish too (as few as i know swedish names)

[22:08] <masak> no, it's Estonian.

[22:09] <masak> mee saak :)

[22:09] <wk> masak: like 'honey harvest'?

[22:11] <masak> so I'm told.

[22:11] <wk> i did not see it this way

[22:11] <wk> *saw

[22:12] <masak> well, it's not certain that that's where it comes from.

[22:12] <wk> still, it has a sweet story in

[22:12] <masak> :P

[22:13] *** trexy joined
[22:14] <sorear> o/ trexy

[22:15] <sorear> pmurias: it can compile the setting and has most of the code in place to serialize it, but not all

[22:17] <wk> like Hemingway said: Estonian in every harbor :)

[22:19] *** silug joined
[22:26] <sorear> I wonder if the instantiation cache for roles ought to be part of the serialized state

[22:27] <sorear> i.e. my ($x, $y); BEGIN $x = Foo[Int]; $y = Foo[Int]; say $x === $y

[22:27] <sorear> I'm leaning to "no"

[22:28] *** Holy_Cow left
[22:32] *** am0c joined
[22:40] <pmurias> sorear: why not?

[22:40] *** carlin left
[22:43] *** Exodist left
[23:01] *** pmurias left
[23:08] <masak> 'night, libikad.

[23:16] *** mkramer joined
[23:17] *** preflex_ joined
[23:18] *** preflex left
[23:18] *** preflex_ is now known as preflex

[23:25] *** tyatpi_ left
[23:30] *** djanatyn` is now known as djanatyn

[23:32] *** Exodist joined
[23:34] *** Chillance left
[23:48] *** uasi joined
