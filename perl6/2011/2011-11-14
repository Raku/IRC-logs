[00:00] *** simcop2387 joined
[00:04] *** dual left
[00:05] *** molaf_ joined
[00:09] *** molaf left
[00:10] *** snearch left
[00:12] *** daniel-s joined
[00:15] *** replore_ joined
[00:25] *** clairvy left
[00:25] *** clairvy joined
[00:30] *** clairvy left
[00:48] *** localhost left
[00:50] *** localhost joined
[00:56] *** lestrrat left
[00:58] *** lestrrat joined
[01:10] *** donri joined
[01:12] *** tokuhirom left
[01:13] *** woosley joined
[01:22] *** clairvy joined
[01:23] *** packetknife joined
[01:27] *** clairvy left
[01:27] *** clairvy joined
[01:28] *** clairvy_ joined
[01:28] *** clairvy left
[01:35] *** hypolin joined
[01:38] <sorear> TimToady: ping.  clarification needed on S05:263

[01:39] <colomon> sorear, o/

[01:41] <sorear> TimToady: the description seems to assume that [ :graphs . ] means [ :codes <!:Gc(/M/)> <:Gc(/M/)>* ]

[01:42] <sorear> TimToady: but there are many other kinds of grapheme clusters ... what about CRLF, Korean graphemes, Lao graphemes?

[01:43] <sorear> colomon: hi

[01:46] <colomon> still working on the grand unicode project, I take it?

[02:01] <sorear> yes

[02:03] *** Chillance left
[02:03] <colomon> I've peeked at the Gtk# specs looking for pixbuf info, but that's all I've had time for.  Tuits in short supply here.

[02:21] <TimToady> sorear: yes, that bit is partially fossilized, but I'm not sure what to replace it with yet; certainly NFD prefixing is a partial answer, but only a partial answer

[02:22] <TimToady> p5 doesn't really have an answer for this yet either

[02:39] <sorear> TimToady: every extended grapheme cluster which is not a single code point contains in NFD either a Hangul-syllable, a CRLF, or a non-mark character

[02:39] <sorear> TimToady: for :m I can see a solution based on equality of these "nuclei"

[02:40] <sorear> TimToady: I'm still wondering about character properties though.  If we count only the nuclei, what character properties should be given to a CRLF or a Hangul-syllable?

[02:41] <sorear> I would like \w+ and \s+ to DTRT in as many cases as possible

[02:42] <sorear> I'm particularly thinking about the #?niecza 2 skip 'VOWEL SIGNs in identifiers'

[02:43] <sorear> which requires "cjkAccountingNumeric; kAccountingNumeric

[02:43] <sorear> cjkOtherNumeric; kOtherNumeric

[02:43] <sorear> cjkPrimaryNumeric; kPrimaryNumeric

[02:44] <sorear> wtf?

[02:44] <sorear> that was apparently in CUT_BUFFER0

[02:45] <sorear> "पहला" ~~ / :lang(STD) <ident> / # needs to work

[02:56] <sorear> I wonder what that word means, if anything

[03:00] *** cooper left
[03:20] *** bacek left
[03:35] *** envi_ joined
[03:41] *** packetknife left
[04:01] *** wolfman2000 joined
[04:04] *** ethndbst left
[04:05] *** dukeleto joined
[04:05] <sorear> o/ dukeleto

[04:07] *** ethndbst joined
[04:08] *** envi_ left
[04:10] <dukeleto> sorear: howdy

[04:17] *** cognominal joined
[04:19] *** cognominal left
[04:20] *** cognominal joined
[04:23] *** clairvy joined
[04:23] *** clairvy_ left
[04:24] *** cognominal_ joined
[04:27] *** cognominal left
[04:27] *** clairvy left
[04:27] *** clairvy joined
[05:00] *** clairvy_ joined
[05:00] *** clairvy left
[05:23] *** clairvy joined
[05:23] *** clairvy_ left
[05:26] *** clairvy_ joined
[05:26] *** clairvy left
[05:30] *** clairvy joined
[05:30] *** clairvy_ left
[05:31] *** mberends joined
[05:33] *** clairvy_ joined
[05:33] *** clairvy left
[05:34] *** molaf_ left
[05:36] *** clairvy joined
[05:36] *** clairvy_ left
[05:37] *** ethndbst left
[05:38] *** ethndbst joined
[05:38] *** ethndbst left
[05:38] *** ethndbst joined
[05:39] *** clairvy_ joined
[05:39] *** clairvy left
[05:49] *** wk left
[05:57] *** clairvy joined
[05:57] *** clairvy_ left
[06:00] *** hypolin left
[06:00] *** clairvy left
[06:00] *** clairvy joined
[06:02] *** clairvy left
[06:03] *** REPLeffect joined
[06:03] *** clairvy joined
[06:04] *** clairvy left
[06:04] *** clairvy joined
[06:05] *** clairvy left
[06:06] *** risou is now known as risou_awy

[06:07] *** clairvy joined
[06:11] *** aindilis` left
[06:14] *** aindilis` joined
[06:14] *** hypolin joined
[06:22] *** clairvy_ joined
[06:22] *** clairvy left
[06:25] *** clairvy_ left
[06:25] *** clairvy joined
[06:26] *** mkramer joined
[06:26] *** mkramer1 joined
[06:26] *** mkramer left
[06:30] *** mkramer1 left
[06:30] *** mkramer joined
[06:49] *** koban joined
[06:53] *** kfo joined
[06:54] *** mishin joined
[06:56] *** kfo_ left
[06:56] *** wk joined
[06:57] *** araujo left
[06:59] *** wtw joined
[07:00] *** colomon_ joined
[07:00] *** colomon left
[07:00] *** colomon_ is now known as colomon

[07:03] *** clairvy left
[07:04] *** clairvy joined
[07:07] *** clairvy_ joined
[07:07] *** clairvy left
[07:13] *** PacoLinux left
[07:23] *** bacek joined
[07:34] <cognominal_> nqp: my $a:=<1 2 3  10>; say( @( $a ) )

[07:34] <p6eval> nqp: OUTPUT«Method 'list' not found for invocant of class 'ResizablePMCArray'␤current instr.: '_block1000' pc 63 ((file unknown):47) (/tmp/HgMG423s9t:1)␤»

[07:34] <cognominal_> nqp: my $a:=<1 2 3  10>; say( $a.list )

[07:34] <p6eval> nqp: OUTPUT«Method 'list' not found for invocant of class 'ResizablePMCArray'␤current instr.: '_block1000' pc 63 ((file unknown):47) (/tmp/f9AxVCoAB1:1)␤»

[07:36] <cognominal_> nqp: my $a:=<1 2 3  10>; say( |a )

[07:36] <p6eval> nqp: OUTPUT«flattened parameters must be a hash or array␤current instr.: '_block1000' pc 71 ((file unknown):51) (/tmp/EJuHBbE5yx:1)␤»

[07:36] <cognominal_> nqp: my $a:=<1 2 3  10>; say( |$a )

[07:36] <p6eval> nqp: OUTPUT«12310␤»

[07:36] <cognominal_> :)

[08:02] *** PacoLinux joined
[08:04] <sorear> ooh, cool.

[08:05] <sorear> the Unicode 6.1.0 public draft actually _simplifies_ the extended grapheme cluster rules

[08:05] <sorear> the "nuclei" I was talking about earlier?  they are now always at the _beginning_ of the cluster

[08:08] <moritz> sounds like an improvement indeed

[08:10] *** PacoLinux_ joined
[08:11] *** PacoLinux_ left
[08:12] *** PacoLinux left
[08:20] *** cognominal_ left
[08:21] *** cognominal_ joined
[08:24] *** mj41 joined
[08:36] <snarkyboojum> does Perl 6 plan to 'internationalize' it's error messages etc?

[08:39] *** domidumont1 left
[08:40] *** domidumont joined
[08:58] *** miso2217_ left
[09:00] *** cognominal_ left
[09:00] *** cognominal_ joined
[09:01] *** clairvy_ left
[09:02] *** clairvy joined
[09:06] *** clairvy left
[09:12] <sorear> snarkyboojum: yes, that's one of moritz' projects

[09:13] *** odoacre left
[09:13] *** odoacre joined
[09:17] *** clairvy joined
[09:18] *** clairvy_ joined
[09:21] *** araujo joined
[09:21] *** araujo left
[09:21] *** araujo joined
[09:21] *** clairvy left
[09:29] <moritz> well, not the i18n itself, but laying the foundation for making that possible

[09:38] *** mberends left
[09:40] *** dakkar joined
[09:47] *** birdwindupbird joined
[09:49] *** envi_ joined
[09:51] *** miso2217_ joined
[09:53] *** ethndbst left
[09:57] *** snearch joined
[10:00] *** birdwindupbird left
[10:00] *** birdwindupbird joined
[10:02] *** mishin left
[10:03] *** woosley left
[10:03] *** hypolin left
[10:05] *** replore_ left
[10:07] *** huf left
[10:12] <moritz> xkcd++

[10:13] <tadzik> just read that

[10:14] <tadzik> g'morning

[10:14] <moritz> o/ tadzik 

[10:27] <avar> hahaha

[10:27] <avar> "Your favorite musical genre is 'post-'"

[10:34] *** clairvy_ left
[10:34] *** clairvy joined
[10:39] *** clairvy left
[10:41] *** daxim joined
[10:45] *** ethndbst joined
[10:45] *** ethndbst left
[10:45] *** ethndbst joined
[10:56] *** odoacre left
[10:57] *** odoacre joined
[10:59] *** risou_awy is now known as risou

[11:08] *** odoacre left
[11:14] *** clairvy joined
[11:27] *** worr joined
[11:29] *** tomaw joined
[11:33] *** domidumont left
[11:45] *** mkramer1 joined
[11:48] *** mkramer left
[11:48] *** wk left
[11:54] <felher> masak++ for https://gist.github.com/1293853, very interesting, thnx :)

[11:56] <flussence> bah, why doesn't "map $subref @list" work in p5? :(

[11:56] *** envi_ left
[11:56] <tadzik> how about &$subref?

[11:57] <flussence> I've tried several variations of it and the only one that works properly is "map { $subref->($_) 

[11:57] <flussence> bleh

[11:57] <flussence> s/$/ } @list /

[11:59] *** sftp_ left
[11:59] *** sftp joined
[12:00] *** mkramer1 left
[12:01] <flussence> perl6: sub n { :16($^a) }; «a b c d e f».map(&n).say

[12:01] <p6eval> rakudo ef4702: OUTPUT«10 11 12 13 14 15␤»

[12:01] <p6eval> ..pugs b927740: OUTPUT«decodeUTF8': bad data: '\171'␤decodeUTF8': bad data: '\187'␤*** Undeclared variable: ("$^a",MkPad (padToList [("$_",PELexical {pe_type = (mkType "Scalar"), pe_proto = <Scalar:0x7f64e4319bf9>, pe_flags = MkEntryFlags {ef_isContext = True}, pe_store = <ref:0x7f64e4319…

[12:01] <p6eval> ..niecza v11-23-g18f7db0: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 773 (warn @ 2) ␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 168 (Mu.Str @ 9) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/src/Nie…

[12:03] <flussence> (I'm rewriting some ugly code at $dayjob, and finding combining List::MoreUtils with subrefs strangely addictive)

[12:03] *** risou is now known as risou_awy

[12:06] <tadzik> :)

[12:06] *** bacek left
[12:06] <cognominal_> flussence, may be you should check perlude?

[12:07] <cognominal_> http://github.com/eiro/p5-perlude

[12:10] <flussence> wow, that looks pretty useful actually...

[12:11] <cognominal_> eiro tried to do haskell-like functional programming in perl

[12:11] *** Psyche^ joined
[12:12] <cognominal_> perlude is a pun on haskell prelude, btw.

[12:12] <flussence> I know just enough haskell to be scared by that example code :)

[12:15] *** Patterner left
[12:15] *** Psyche^ is now known as Patterner

[12:19] *** bacek joined
[12:25] *** mkramer joined
[12:31] <moritz> haskell without the static type checks... sounds like lisp :-)

[12:38] *** ethndbst left
[12:46] *** bluescreen10 joined
[12:53] *** GlitchMr joined
[12:54] *** wk joined
[13:10] *** donri left
[13:10] *** ab5tract joined
[13:11] *** wk left
[13:16] *** bacek left
[13:33] *** benabik left
[13:35] *** envi_ joined
[13:48] <dalek> nqp/bigint: f7b182b | moritz++ | / (3 files):

[13:48] <dalek> nqp/bigint: float -> bigint op

[13:48] <dalek> nqp/bigint: 

[13:48] <dalek> nqp/bigint: round-trips big FLOATVALs

[13:48] <dalek> nqp/bigint: review: https://github.com/perl6/nqp/commit/f7b182b6af

[13:55] *** clairvy left
[13:56] *** clairvy joined
[13:57] <cognominal_> moritz, indeed but I think eiro discovered that programming style thru haskell.

[14:01] *** clairvy left
[14:01] *** risou_awy is now known as risou

[14:18] *** mkramer1 joined
[14:18] *** mkramer left
[14:24] <dalek> rakudo/bigint: 9a01b11 | moritz++ | / (2 files):

[14:24] <dalek> rakudo/bigint: use nqp::fromnum_I in Num.Int

[14:24] <dalek> rakudo/bigint: review: https://github.com/rakudo/rakudo/commit/9a01b1131e

[14:28] <moritz> $ ./perl6 -e 'say 1234e120.Int'

[14:28] <moritz> 1234000000000000032088370686438714170547122766761560296159775498714130972155570822049891345893609670390352866249059805954048

[14:29] <colomon> interesting

[14:29] <moritz> the digits after the '12340000000000000' are just the binary zeros that are added after the mantissa of the double is used up

[14:30] <moritz> perl6: say 1234e120.Int

[14:30] <p6eval> pugs b927740: OUTPUT«*** No such method in class Rat: "&Int"␤    at /tmp/jcUjLAFhGR line 1, column 5 - line 2, column 1␤»

[14:30] <p6eval> ..niecza v11-23-g18f7db0: OUTPUT«1234000000000000032088370686438714170547122766761560296159775498714130972155570822049891345893609670390352866249059805954048␤»

[14:30] <p6eval> ..rakudo ef4702: OUTPUT«-9223372036854775808␤»

[14:31] <moritz> it seems that niecza agrees :-)

[14:31] <moritz> since I've developed that independent of niecza, that's a good sign :-)

[14:34] *** skangas__ left
[14:34] *** skangas joined
[14:38] *** Trashlord left
[14:43] *** Trashlord joined
[14:50] *** vmspb joined
[14:50] *** sayu joined
[14:55] *** thou joined
[15:01] *** slavik1 joined
[15:02] *** birdwindupbird left
[15:03] *** koban left
[15:04] *** clairvy joined
[15:04] *** clairvy left
[15:04] *** Sarten-X left
[15:05] *** clairvy joined
[15:07] *** clairvy left
[15:08] *** clairvy joined
[15:10] *** PacoLinux joined
[15:10] *** clairvy left
[15:11] *** clairvy joined
[15:11] *** mkramer1 left
[15:12] *** Sarten-X joined
[15:12] *** clairvy left
[15:13] *** clairvy joined
[15:14] *** clairvy left
[15:15] *** clairvy joined
[15:18] *** clairvy left
[15:19] *** clairvy joined
[15:19] *** risou is now known as risou_awy

[15:20] *** carlin left
[15:20] *** clairvy left
[15:21] *** clairvy joined
[15:21] *** clairvy left
[15:22] *** alester joined
[15:22] *** clairvy joined
[15:35] *** GlitchMr left
[15:35] *** clairvy left
[15:36] *** clairvy joined
[15:39] *** envi_ left
[15:39] *** clairvy left
[15:39] *** clairvy joined
[15:39] *** clairvy left
[15:40] *** clairvy joined
[15:40] *** clairvy left
[15:41] *** Lothar left
[15:41] *** Lothar joined
[15:41] *** clairvy joined
[15:44] *** wk joined
[15:44] *** clairvy left
[15:45] *** clairvy joined
[15:46] *** kaare_ joined
[15:46] *** clairvy left
[15:47] *** clairvy joined
[15:50] *** clairvy left
[15:50] *** clairvy joined
[15:52] <moritz> phenny: tell jnthn about https://gist.github.com/1364229 (rakudo and nqp bigint status summary). I'll mostly be offline between 2011-11-16 and 2011-11-23

[15:52] <phenny> moritz: I'll pass that on when jnthn is around.

[15:52] *** clairvy left
[15:53] *** clairvy joined
[15:55] *** wtw left
[15:55] *** clairvy left
[15:55] * colomon thinks about volunteering to help with bigint while moritz is gone, only to remember his tuits are sharply limited and unknowable in advance.  :(

[15:55] *** clairvy joined
[15:55] *** wk left
[16:00] <moritz> most of the LHFs have likely been picked

[16:00] *** clairvy left
[16:01] <moritz> unless codegen in the SymbolTable counts as LHF, or architecture-dependent bit fiddling :-)

[16:01] *** clairvy joined
[16:01] * moritz -> afk

[16:06] *** wk joined
[16:06] *** icwiener joined
[16:07] *** clairvy left
[16:08] *** clairvy joined
[16:09] *** lateau joined
[16:09] *** clairvy left
[16:11] *** clairvy joined
[16:25] *** sayu left
[16:25] *** clairvy left
[16:25] *** molaf joined
[16:30] *** clairvy joined
[16:33] *** envi_ joined
[16:35] *** mj41 left
[16:37] *** mj41 joined
[16:37] *** clairvy left
[16:47] *** wolfman2000 left
[16:48] *** clairvy joined
[16:49] *** clairvy left
[16:53] *** PacoLinux_ joined
[16:53] *** kaleem joined
[17:00] *** clairvy joined
[17:00] *** jferrero left
[17:01] *** lateau left
[17:03] * jnthn back from trip

[17:03] <phenny> jnthn: 15:52Z <moritz> tell jnthn about https://gist.github.com/1364229 (rakudo and nqp bigint status summary). I'll mostly be offline between 2011-11-16 and 2011-11-23

[17:04] <jnthn> moritz++ 

[17:04] *** clairvy left
[17:04] *** mkramer joined
[17:04] *** mkramer left
[17:05] <jnthn> phenny: tell moritz thank you! Now the various workshops are done, I should have a good supply of tuits to continue working on bigint. :)

[17:05] <phenny> jnthn: I'll pass that on when moritz is around.

[17:06] <tadzik> o/

[17:07] <jnthn> hi, tadzik

[17:07] * jnthn has been immersed in London Perl Workshop and visiting friends and is rather behind with whatever's been going on around here :)

[17:08] * tadzik is on Python users group meeting :)

[17:08] <jnthn> :)

[17:09] * jnthn enjoyed visiting the Beer User's Group in London ;)

[17:10] *** kboga joined
[17:12] *** wk left
[17:12] *** clairvy joined
[17:12] <kboga> \o/ jnthn round-tripped :)

[17:13] <kboga> awful pun... hi btw

[17:16] <jnthn> :P

[17:16] *** clairvy left
[17:16] *** wk joined
[17:17] *** clairvy joined
[17:19] *** kaleem left
[17:20] *** clairvy left
[17:21] <kboga> question, should in "src/core/Instant.pm" line 113, the value of pir::time__n perhaps be boxed?

[17:21] *** clairvy joined
[17:22] *** MayDaniel joined
[17:24] <jnthn> kboga: yeah, it'd be far better to do that explicitly

[17:24] <jnthn> well

[17:24] <jnthn> kinda :0

[17:24] <jnthn> :)

[17:24] <jnthn> The binder actually handles natives just fine.

[17:24] <jnthn> And since it's being used directly as a call argument it'll likely work out

[17:24] *** clairvy left
[17:25] *** clairvy joined
[17:27] *** wk left
[17:27] *** clairvy left
[17:28] *** clairvy joined
[17:32] *** orafu left
[17:32] *** orafu joined
[17:35] *** clairvy left
[17:35] *** clairvy joined
[17:37] *** mj41 left
[17:41] <TimToady> sorear: I really hate the idea of corrupting smartmatching merely to accomodate a poor decision of the Unicode Consortium.

[17:43] <TimToady> though possibly it indicates the need for a case-folded type that smartmatches by also folding the acceptee

[17:43] *** clairvy left
[17:44] *** clairvy joined
[17:45] *** daxim left
[17:46] <TimToady> so instead of :Blk<ASCII> you could write :Blk(fc 'ascii')

[17:47] <TimToady> but casefolding should be more of a user convenience than a programmer convenience, in my estimation

[17:47] *** clairvy left
[17:48] *** clairvy joined
[17:50] <TimToady> but it seems like a really bad design for the UC to on the one hand define a really complex and linguistically problematic casefolding operation, and on the other hand require use of it for programming.

[17:51] <TimToady> I think this is one spot where I'd rather fight the Unicode Consortium than cave.

[17:51] *** localhost left
[17:54] <cognominal_> TimToady is certainly not a caveman.

[17:54] *** clairvy left
[17:55] *** clairvy joined
[17:56] *** Chillance joined
[17:56] *** mtk joined
[17:56] *** clairvy left
[17:58] *** clairvy joined
[17:58] <slavik1> we don't know that

[17:58] *** clairvy left
[17:59] *** clairvy joined
[18:03] *** dakkar left
[18:03] *** clairvy left
[18:03] *** clairvy joined
[18:05] <TimToady> slavik1: the French are experts on cavemen

[18:07] *** clairvy left
[18:08] <cognominal_> :)

[18:09] *** clairvy joined
[18:14] *** clairvy left
[18:15] *** clairvy joined
[18:18] <slavik1> "takes one to know one" in full effect?

[18:22] <[Coke]> TimToady: do you read p5p?

[18:22] *** clairvy left
[18:22] *** clairvy joined
[18:30] <TimToady> [Coke]: nope

[18:30] *** clairvy left
[18:31] *** clairvy joined
[18:33] <[Coke]> Not to give you any ideas, but someone just said they missed you. 

[18:33] *** clairvy left
[18:33] *** clairvy joined
[18:43] *** daniel-s left
[18:56] *** ethndbst joined
[19:01] *** tokuhirom joined
[19:08] <sorear> TimToady: should we also shun aliases, and require use of <:Gc<Lo>> or <:General_Category<Other_Letter>>?  If so which one?

[19:08] *** clairvy left
[19:08] <sorear> the database uses the former for natural space reasons

[19:09] *** clairvy joined
[19:09] <sorear> I suppose you're also opposed to casefolding, spacefolding, and hyphen-folding in \c

[19:12] <djanatyn> hey!

[19:12] *** clairvy left
[19:12] <djanatyn> has anyone here heard of GCI?

[19:13] *** clairvy joined
[19:14] <colomon> Gannett Co, Inc? Great Coasters International?  Grace Communion International? Getty Conservation Institute?

[19:14] *** clairvy left
[19:14] *** vmspb left
[19:16] *** clairvy joined
[19:16] <[Coke]> djanatyn: googles Code In. Aye.

[19:17] <[Coke]> TPF is a registered mentoring organization.

[19:17] *** clairvy left
[19:17] *** clairvy joined
[19:22] <sorear> djanatyn: not sure about TPF, but PaFo was active in last GCI

[19:23] *** clairvy left
[19:25] *** clairvy joined
[19:25] <sorear> [Coke]: is it possible to get a list of p5p emails sorted by _time_?

[19:26] <Trashlord> what the hell

[19:28] *** wk joined
[19:28] *** clairvy left
[19:29] *** clairvy joined
[19:30] *** alester left
[19:30] <[Coke]> sorear: I have no idea. the archives tend to be threaded, I think.

[19:31] <[Coke]> (GCI) both orgs are registered this year (out of a total of under 20 or so)

[19:32] <sorear> [Coke]: could you tell me what thread you're reading, then?

[19:32] *** clairvy left
[19:33] <sorear> nntp.perl.org won't tell me which threads are active, and all the other archives I've seen are 6mo-5yr out of date

[19:33] *** clairvy joined
[19:33] *** benabik joined
[19:34] *** alester joined
[19:34] <sorear> o/ benabik

[19:34] *** clairvy left
[19:34] <benabik> o/ sorear 

[19:34] <benabik> sorear: You're fast.  My computer had barely finished waking up.

[19:34] <[Coke]> sorerar: http://www.nntp.perl.org/group/perl.perl5.porters/2011/11/msg179175.html

[19:35] *** clairvy joined
[19:35] * colomon is wishing svn had stash...

[19:35] *** clairvy left
[19:36] <benabik> colomon: git-svn is your friend

[19:36] <[Coke]> colomon: git-svn!

[19:36] <benabik> (Or at least it wants to be your friend.)

[19:36] <colomon> Tried it, was not wild about it.

[19:36] *** tokuhirom left
[19:36] *** clairvy joined
[19:37] <colomon> I'd probably consider moving the core portion of my svn repo to git before git-svn at this point.

[19:37] <benabik> My experience with git-svn was "not great, but better than raw svn."  Found that cloning the SVN database locally with svnsync (or something like that) made it a lot faster to set up.

[19:37] <[Coke]> colomon: I hated it as an intro to git, but love it now that I am a git user forced to use svn.

[19:37] <[Coke]> (move to git) much better solution if you like git, yes.

[19:38] <colomon> As I recall, part of the problem with git-svn was that I tend to have 10+ different copies of the repo checked out on my machine at once, and git-svn only could work on one?

[19:39] <[Coke]> you could have 10 git-svn checkouts, sure.

[19:39] *** clairvy left
[19:40] <[Coke]> I would probably have 10 different local branches in a single git-svn working copy, though.

[19:41] *** clairvy joined
[19:41] * benabik would probably have one central repo for git->svn and clone -s from it.

[19:41] <sorear> [Coke]: thanks!

[19:41] <benabik> (I think git-svn can handle multiple repos doing the git->svn direction.)

[19:42] *** alester left
[19:42] *** alester joined
[19:44] *** clairvy left
[19:45] *** clairvy joined
[19:55] *** clairvy left
[19:55] *** clairvy joined
[19:55] *** clairvy left
[19:56] <djanatyn> Is there any perl6 stuff in the Google-Code-In perl project?

[19:56] <djanatyn> if there is, I'm really interested in participating.

[19:57] *** clairvy joined
[19:57] <colomon> Seems like something perl6 can be arranged, no?

[19:57] <sorear> I wouldn't be suprised, there's a very interesting demographic split between the p5 and p6 community

[19:58] <sorear> hi colomon

[19:58] *** clairvy left
[19:58] <[Coke]> Need to find the TPF GCI guy and talk to him, I suppose. 

[19:58] <colomon> sorear, o/

[19:58] <colomon> I mean, TPF is both p5 and p6.

[19:58] <colomon> Probably just a matter of organizing...

[19:58] *** clairvy joined
[19:59] <[Coke]> colomon: yah.

[20:01] <djanatyn> so, what exactly do I have to do to get involved in GCI with perl? :)

[20:02] <djanatyn> my friend just linked it to me because he thought it would be something I was interested in, though he's a perl5 dude

[20:02] <djanatyn> I've written a few things in perl5, but I'm a lot more interested in doing something with perl6

[20:02] *** clairvy left
[20:03] *** clairvy joined
[20:03] *** clairvy left
[20:03] <benabik> I think the GCI process has started, so if Perl 6/TPF hasn't gotten involved yet, it may be too late.

[20:04] *** clairvy joined
[20:04] <djanatyn> aww.

[20:04] <djanatyn> well, I'm pretty sure the perl foundation has already started.

[20:05] <djanatyn> wiki.enlightenedperl.org/gci2011

[20:06] <djanatyn> oh, looks like the perl foundation has been officially accepted.

[20:06] <djanatyn> Is...perl6 a seperate entity from the perl foudnation?

[20:09] *** wk left
[20:09] *** clairvy left
[20:10] *** clairvy joined
[20:14] <colomon> djanatyn: nope, TPF is over us, too

[20:14] *** clairvy left
[20:14] <colomon> well, for some sense of "over us", anyway.

[20:15] *** clairvy joined
[20:15] *** clairvy left
[20:16] <colomon> hmmm... guess the question is, is it still possible for Parrot and TPF to submit more tasks?

[20:17] * colomon is busy surfing the Code-In web pages, which seem to have about half the information he'd like to find...

[20:17] *** clairvy joined
[20:24] *** ethndbst left
[20:24] *** clairvy left
[20:25] *** clairvy joined
[20:27] *** clairvy left
[20:28] *** clairvy joined
[20:30] <colomon> http://wiki.enlightenedperl.org/gci2011/gci2011/ideas -- and the front page seems to imply task ideas can still come in.  perhaps we need to have a #perl6 brainstorming session and add a batch?

[20:32] *** ksi joined
[20:32] *** clairvy left
[20:33] *** clairvy joined
[20:37] <dalek> 6model: 48d0b24 | diakopter++ | lua/compiler/ (2 files):

[20:37] <dalek> 6model: rollback the STable and FormWith 'optimization' attempts...

[20:37] <dalek> 6model: review: https://github.com/diakopter/6model/commit/48d0b24f74

[20:37] *** clairvy left
[20:38] *** clairvy joined
[20:39] <[Coke]> note that students don't go live until... monday, I think.

[20:39] <[Coke]> (working with local HS teacher here to get us some more students this year.)

[20:42] *** GlitchMr joined
[20:42] *** clairvy left
[20:42] <GlitchMr> perl6: 1/∞

[20:42] <p6eval> pugs b927740: OUTPUT«decodeUTF8': bad data: '\8734'␤*** ␤    Unexpected end of input␤    at /tmp/cQlM9UVNBZ line 1, column 4␤»

[20:42] <p6eval> ..niecza v11-23-g18f7db0: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Bogus term at /tmp/QGzQavTryH line 1:␤------> [32m1/[33m⏏[31m∞[0m␤␤Parse failed␤␤»

[20:42] <p6eval> ..rakudo ef4702: OUTPUT«===SORRY!===␤Confused at line 1, near "1/\u221e"␤»

[20:42] <GlitchMr> How can I add support for "∞" in Perl 6?

[20:43] <GlitchMr> perl6: sub ∞ {Inf}; print 1/∞

[20:43] <p6eval> pugs b927740: OUTPUT«decodeUTF8': bad data: '\8734'␤decodeUTF8': bad data: '\8734'␤*** ␤    Unexpected "\8734"␤    expecting "=", subroutine parameters, trait or block␤    at /tmp/jMuoAC42sS line 1, column 5␤»

[20:43] <p6eval> ..niecza v11-23-g18f7db0: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Malformed block at /tmp/uymMQ7_ZUv line 1:␤------> [32msub [33m⏏[31m∞ {Inf}; print 1/∞[0m␤␤Parse failed␤␤»

[20:43] <p6eval> ..rakudo ef4702: OUTPUT«===SORRY!===␤Malformed block at line 1, near "\u221e {Inf}; p"␤»

[20:43] *** clairvy joined
[20:43] <GlitchMr> ... doesn't work...

[20:43] <GlitchMr> Too bad...

[20:43] *** clairvy left
[20:43] <TimToady> niecza: constant term:<∞> = Inf;  say ∞

[20:43] <p6eval> niecza v11-23-g18f7db0: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Colonpair traits NYI at /tmp/AWBrXErpAU line 1:␤------> [32mconstant term:<∞> [33m⏏[31m= Inf;  say ∞[0m␤␤Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument a…

[20:44] *** clairvy joined
[20:47] <TimToady> you can't use bare ∞ as an identifier, since it's not considered alphanumeric

[20:47] *** clairvy left
[20:47] <GlitchMr> :(

[20:47] <TimToady> that's where term:<∞> is supposed to help

[20:47] <GlitchMr> But ∞ is number...

[20:48] <GlitchMr> So it's alphanumeric ;). I guess it's not alphanumeric for Unicode...

[20:48] *** clairvy joined
[20:48] *** clairvy left
[20:48] <[Coke]> Unicode thinks it's a math symbol, aye.

[20:48] <GlitchMr> Makes sense...

[20:48] *** ethndbst joined
[20:48] *** ethndbst left
[20:48] *** ethndbst joined
[20:49] <TimToady> std: constant term:<∞> = Inf; say ∞

[20:49] <p6eval> std be1f10e: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument at /tmp/5yzj1CVqo_ line 1:␤------> [32mconstant term:<∞> = Inf; say[33m⏏[31m ∞[0m␤Confused at /tmp/5yzj1CVqo_ line 1:␤…

[20:49] <TimToady> hmm

[20:49] *** clairvy joined
[20:49] <TimToady> std: constant term:<∞> = Inf; ∞ ∞

[20:49] <p6eval> std be1f10e: OUTPUT«[31m===[0mSORRY![31m===[0m␤Bogus statement at /tmp/t8xA9nHCTG line 1:␤------> [32mconstant term:<∞> = Inf; [33m⏏[31m∞ ∞[0m␤Parse failed␤FAILED 00:01 121m␤»

[20:49] *** clairvy left
[20:49] <TimToady> I though term: was ipmlemented

[20:49] <TimToady> *ght

[20:50] *** clairvy joined
[20:50] <GlitchMr> s/ipm/imp/; # ?

[20:50] <TimToady> that too

[20:50] *** clairvy left
[20:51] *** clairvy joined
[20:53] *** literal is now known as chiteral

[20:53] <TimToady> std: sub term:<∞>() { Inf }; say ∞

[20:53] <p6eval> std be1f10e: OUTPUT«ok 00:01 125m␤»

[20:53] <TimToady> niecza: sub term:<∞>() { Inf }; say ∞

[20:53] <p6eval> niecza v11-23-g18f7db0: OUTPUT«Infinity␤»

[20:53] <TimToady> \o/

[20:53] <TimToady> niecza: sub term:<∞>() { Inf }; say ∞ ∞

[20:54] <p6eval> niecza v11-23-g18f7db0: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Confused at /tmp/7uQVjLZCFx line 1:␤------> [32msub term:<∞>() { Inf }; say ∞ [33m⏏[31m∞[0m␤␤Parse failed␤␤»

[20:54] <TimToady> and is parsed as a term

[20:54] <japhb> sub term:<∞>() { Inf }; say ~∞

[20:54] <japhb> niecza: sub term:<∞>() { Inf }; say ~∞

[20:54] <p6eval> niecza v11-23-g18f7db0: OUTPUT«Infinity␤»

[20:54] <jnthn> That should probably be Inf, iirc

[20:54] <japhb> Shouldn't that .Str to 'Inf'?

[20:54] <jnthn> o/ japhb :)

[20:54] <japhb> jinx

[20:54] <japhb> o/

[20:55] *** chiteral is now known as literal

[20:55] <jnthn> ok, now I have tuits again...albeit slightly tired ones this evening...

[20:55] <japhb> (In the Str.Numeric() rewrite, 'Inf' disallows trailing characters, and in the stress test, 'Infinity' is one of the cases that is supposed to fail.  :-) )

[20:56] <japhb> Yay for tuits!

[20:56] <jnthn> Yeah, my workshoppin' is done for the year. :)

[20:56] *** clairvy left
[20:57] *** clairvy joined
[20:58] <japhb> BTW, even though it still has problems, moritz++'s bigint work led to a Str.Numeric() stress test with several hundred results incorrectly typed as Num correctly returning Int or Rat instead.

[20:58] <jnthn> oh noes, current nqp build fails for me

[20:58] *** cooper joined
[20:58] *** clairvy left
[20:59] *** clairvy joined
[21:00] *** clairvy left
[21:00] <japhb> And holy cow, TimToady, let me just say that when you decide to generalize something, you don't mess around!

[21:01] <jnthn> inline op nqp_bigint_is_big

[21:01] <jnthn> OH RLY?

[21:01] <jnthn> :D

[21:01] *** GlitchMr left
[21:01] *** clairvy joined
[21:03] <dalek> nqp/bigint: f41528b | jnthn++ | src/ops/nqp_bigint.ops:

[21:03] <dalek> nqp/bigint: Work around MSVC++ being too clever and catching a compile time divide by zero.

[21:03] <dalek> nqp/bigint: review: https://github.com/perl6/nqp/commit/f41528b8d8

[21:08] *** clairvy left
[21:09] *** bluescreen10 left
[21:10] *** clairvy joined
[21:10] *** clairvy left
[21:11] *** clairvy joined
[21:11] *** Sarten-X left
[21:13] *** clairvy left
[21:14] *** clairvy joined
[21:14] *** fsergot left
[21:16] *** mj41 joined
[21:17] *** envi_ left
[21:17] *** clairvy left
[21:18] *** lue joined
[21:20] *** clairvy joined
[21:20] *** clairvy left
[21:20] <jnthn> phenny: tell moritz Hm. On my platform the "to_num and from_num round-trip" tests fail

[21:20] <phenny> jnthn: I'll pass that on when moritz is around.

[21:22] *** thou left
[21:25] *** clairvy joined
[21:31] *** clairvy left
[21:32] *** clairvy joined
[21:32] <jnthn> phenny: tell moritz ah, it's off by a tiny bit... 1.23456789e+248 vs 1.23456788999987e+248.

[21:32] <phenny> jnthn: I'll pass that on when moritz is around.

[21:33] *** clairvy left
[21:34] *** clairvy joined
[21:35] *** clairvy left
[21:36] *** fsergot joined
[21:36] *** clairvy joined
[21:42] *** Sarten-X joined
[21:44] *** PacoLinux_ left
[21:44] *** clairvy left
[21:45] *** clairvy joined
[21:45] <jnthn> OK, seems Num.Rat is totally hosed on my system

[21:45] *** alester left
[21:46] *** icwiener left
[21:47] <jnthn> oh, no wonder

[21:47] <jnthn> > say 1e1.Int

[21:47] <jnthn> 0

[21:47] <benabik> That doesn't seem right.

[21:47] <jnthn> Indeed

[21:48] *** clairvy left
[21:49] *** clairvy joined
[21:55] <moritz> ouch

[21:55] <phenny> moritz: 17:05Z <jnthn> tell moritz thank you! Now the various workshops are done, I should have a good supply of tuits to continue working on bigint. :)

[21:55] <phenny> moritz: 21:20Z <jnthn> tell moritz Hm. On my platform the "to_num and from_num round-trip" tests fail

[21:55] <phenny> moritz: 21:32Z <jnthn> tell moritz ah, it's off by a tiny bit... 1.23456789e+248 vs 1.23456788999987e+248.

[21:55] <jnthn> moritz: What does this output for you:

[21:55] <jnthn> https://gist.github.com/1365326

[21:56] *** risou_awy is now known as risou

[21:56] <jnthn> moritz: Added my output to the gist

[21:57] * moritz too

[21:57] <jnthn> ok...different

[21:57] <jnthn> if I change the test code to

[21:57] <jnthn> my $float := 12345;

[21:57] <jnthn> I get out

[21:58] <jnthn> 12345

[21:58] <jnthn> 0

[21:58] <jnthn> 0

[21:59] <jnthn> Goes without saying the test suite gets interesting with this issue ;-)

[21:59] *** clairvy left
[21:59] <jnthn> (many hangs!)

[21:59] <moritz> seems I hosed the conversion of the small floats

[22:00] *** ksi left
[22:00] *** clairvy joined
[22:00] <moritz> ah, I see why

[22:01] <jnthn> moritz: But...it works for you? Or?

[22:01] <moritz> no

[22:01] * moritz compiles a possible fix

[22:01] <jnthn> \o/

[22:02] <jnthn> moritz: How do I trigger the Rat compilation issue? I suspect I know how to fix it...but the thing I thought would show it here actually works now :)

[22:02] <jnthn> ("say -1.56079666010823" used to give a very wrong answer, but now does not)

[22:02] <moritz> the problem is nqp_bigint.ops lines 63..65

[22:02] <moritz> jnthn: I guess you need to compile a long Rat to PIR

[22:03] <moritz> something like 3.14444444444444444444444444444444444444

[22:03] <jnthn> oh!

[22:03] <moritz> better to add an odd number at the end :-)

[22:04] <dalek> nqp/bigint: beb69a6 | moritz++ | src/ops/nqp_bigint.ops:

[22:04] <dalek> nqp/bigint: unbust conversion from float to bigint (hopefully)

[22:04] <dalek> nqp/bigint: review: https://github.com/perl6/nqp/commit/beb69a6fec

[22:04] *** clairvy left
[22:05] *** clairvy joined
[22:05] * jnthn tries the patch

[22:05] *** clairvy left
[22:06] <jnthn> moritz: seems to help my nqp example

[22:06] *** Sarten-X left
[22:06] *** clairvy joined
[22:06] <jnthn> moritz: I still have the smaller error for the test 26 and 27 of 60-bigint.t

[22:08] <jnthn> OK, let's have another go around the spectest :)

[22:09] <moritz> jnthn: do you know how many bits your FLOATVAL mantissa has, and what DIGIT_BIT is on your platform?

[22:09] <jnthn> moritz: not off hand; I guess DIGIT_BIT is easy to find out...

[22:09] *** clairvy left
[22:10] *** clairvy joined
[22:13] <jnthn> moritz: here, DIGIT_BIT = 28

[22:13] *** clairvy left
[22:13] <moritz> OH

[22:14] <moritz> it's 60 here

[22:14] <jnthn> Curious. I'm on a 64-bit platform too

[22:14] <moritz> then I see why it loses precision

[22:14] <jnthn> Microsoft (R) C/C++ Optimizing Compiler Version 16.00.30319.01 for x64

[22:14] <jnthn> It even says it's compiling as 64-bit. Interesting.

[22:14] <moritz> jnthn: I can you can tweak some #define's to make 60 bit too then

[22:14] *** clairvy joined
[22:16] <jnthn> looking at them

[22:16] <moritz> anyway

[22:17] <moritz> what the conversion currently does is devide and modf by 2 ** DIGIT_BIT

[22:17] <moritz> *divide

[22:17] <moritz> that's enough if DIGIT_BIT >= mantissa of double (52 bit iirc)

[22:17] <moritz> if that's not the case, we'd need to rinse & repeat

[22:18] <moritz> until (no_of_repetitions + 1) * DIGIT_BIT >= 52

[22:18] <moritz> erm, -1

[22:19] <jnthn> moritz: Do you get a great deal of spectest fail, ooc?

[22:19] <jnthn> The main thing I see is hangs.

[22:20] <jnthn> t\spec\S02-types\infinity.rakudo, t\spec\S32-num\int.rakudo and t\spec\S32-num\rat.rakudo all do so

[22:21] <jnthn> ah

[22:21] <jnthn> my $x = Inf.Int

[22:21] <jnthn> yeah, don't need the assignment :)

[22:22] <jnthn> nom: say Inf.Int

[22:22] <p6eval> nom ef4702: OUTPUT«-9223372036854775808␤»

[22:22] <jnthn> perl6: say Inf.Int

[22:22] <p6eval> niecza v11-23-g18f7db0: OUTPUT«1797693134862315907729305190789024733617976978942306572734300811577326758055009631327084773224075360211201138798713933576587897688144166224928474306394741243777678934248654852763022196012460941194530829520850057688381506823424628814739131105408272371633505…

[22:22] <p6eval> ..pugs b927740: OUTPUT«*** No such method in class Num: "&Int"␤    at /tmp/Qzc_4WIvsu line 1, column 5 - line 2, column 1␤»

[22:22] <p6eval> ..rakudo ef4702: OUTPUT«-9223372036854775808␤»

[22:23] <jnthn> niecza: say Inf.Int.Str.chars

[22:23] <p6eval> niecza v11-23-g18f7db0: OUTPUT«309␤»

[22:23] <jnthn> Apparently, infinity is 309 digits long :D

[22:24] <jnthn> OTOH, it's closer to inifinity that what Rakudo currently does :P

[22:24] *** fsergot left
[22:26] <sorear> japhb: niecza just uses System.Double.ToString(CultureInfo.InvariantCulture)

[22:26] *** clairvy left
[22:27] <jnthn> sorear: I'm jnthn ;)

[22:27] <sorear> japhb: writing a proper Str.Numeric/Num.Str is on my long-term TODO

[22:27] <jnthn> oh

[22:27] <jnthn> similar topic, but right person after all :)

[22:27] <jnthn> sorry :)

[22:27] <jnthn> sorear: any opinions on what Inf.Int should do?

[22:28] <jnthn> moritz: All the hanging tests boil down to Inf.Int.

[22:28] *** clairvy joined
[22:28] <sorear> jnthn: last time I pressed TimToady on this, the opinion I got was that Inf ~~ Int already so it was a noop

[22:28] <jnthn> o>O

[22:28] <sorear> jnthn: also we still need to figure out how Failure ~~ Int is going to work

[22:28] *** benabik left
[22:28] <jnthn> I'm...not sure how to fit that into my mental model.

[22:29] <jnthn> Oh, I'd assumed that one could work becuase you mix in to individual objects.

[22:29] *** Sarten-X joined
[22:29] <moritz> jnthn: ah right, need to special-case that one. I guess it should fail() or die() for now

[22:29] <moritz> same for Rat.Int

[22:29] <sorear> I have the same mental model issue

[22:30] <jnthn> moritz: wfm

[22:30] <moritz> speaking of mental models...

[22:30] <sorear> niecza's Num/exact-Rat converter is a bit simplistic

[22:30] <moritz> 99 ** 99 # are these two numbers Int or int ?

[22:31] <moritz> if they are allowed to be int, then the operation might overflow

[22:31] <sorear> 2000000000 + 2000000000 # are these two numbers Int or int, on a 32-bit system?

[22:31] <sorear> I think it's very obvious the result should be 4e9.Int

[22:31] *** preflex left
[22:31] * jnthn waves his hands about :)

[22:32] <moritz> sorear: exactly my question... but I'm not sure about the result -)

[22:32] <jnthn> I've been seeing the literals as kinda polymorphic

[22:32] <jnthn> But it gets a bit odd

[22:32] *** preflex joined
[22:32] <jnthn> Especially when dispatchy issues arise

[22:32] <jnthn> (like the two mentioned)

[22:33] <jnthn> I guess we lean towards Int but lower to int "when context suggests we should"

[22:33] <sorear> moritz: I would argue that if user code does not explicitly contain the token "int" it should not be wordsize-sensitive

[22:34] <sorear> this is a case of constant allomorphism

[22:34] <jnthn> sorear: I agree in a sense. Knowing what to do in the my int $x = 42; case isn't so much the issue

[22:34] <sorear> 99 has to be either int or Int, depending on context

[22:34] <jnthn> It's knowing what to then do with $x + 1

[22:34] <jnthn> And we normally don't flow context in that kinda way

[22:35] <sorear> int + constant is like int + int, Int + constant = Int + Int, constant + constant = Int + Int

[22:36] <sorear> *waves*

[22:36] *** clairvy left
[22:36] *** clairvy joined
[22:37] <jnthn> sorear: heh, that's where I'd kinda got to :)

[22:37] *** MayDaniel left
[22:37] <jnthn> Though the optimizer gets a bit overexcited about the constant + constant case at the moment...

[22:37] <japhb> sorear, re: Num.Str: ah, OK, NYCI, got it.

[22:37] <sorear> rakudo: say 8_000_000_000_000_000_000

[22:37] <p6eval> rakudo ef4702: OUTPUT«8000000000000000000␤»

[22:38] <sorear> rakudo: say 8_000_000_000_000_000_000 + 8_000_000_000_000_000_000

[22:38] <p6eval> rakudo ef4702: OUTPUT«Use of uninitialized value in string context␤Use of uninitialized value in string context␤===SORRY!===␤error:imcc:eval_ins: op 'add_i_n_n' not found␤␤    in file '(file unknown)' line 37795777␤»

[22:38] <sorear> What?

[22:38] <sorear> rakudo: my $x = 8_000_000_000_000_000_000; say $x + $x

[22:38] <p6eval> rakudo ef4702: OUTPUT«-2446744073709551616␤»

[22:38] <jnthn> sorear: f**king imcc

[22:38] <japhb> sorear, re: constant + constant: shouldn't that be => constant-fold(constant + constant) => constant-fold(Int + Int) => constant-polymorphic?

[22:38] <jnthn> sorear: It converts an I literal into an N literal

[22:38] <jnthn> sorear: If it detects it'll overflow

[22:38] <sorear> japhb: yes, ish

[22:38] <jnthn> o.O

[22:39] <jnthn> sorear: On my box it further gets it wrong, having 64-bit integer registers, but only letting in 32-bit literals :(

[22:39] * sorear wonders how close rakudo is to ditching imcc

[22:40] <moritz> the bigint branch detects size of integers > what the platform can hold, and emits different code for that

[22:40] <moritz> (at least on platforms where nqp::isbig_I works properly)

[22:40] *** clairvy left
[22:40] <moritz> (and if those integers don't form rats :/ )

[22:41] *** clairvy joined
[22:41] <jnthn> moritz: What spectest fallout do you get from the rat issue?

[22:41] *** clairvy left
[22:41] <jnthn> moritz: Is it only a pre-comp issue?

[22:42] <jnthn> (I understand the pre-comp issue, I'm just struggling on how it affects the spectests much)

[22:42] *** clairvy joined
[22:42] <moritz> jnthn: I think it's not only precomp, but I don't really understand it :(

[22:42] <moritz> it seems that some rat literals come out completely wrong, even without precomp

[22:43] <moritz> but my debugging output from radcalc seems to imply that the rats get created with the right numerator and denominator, so I'm kinda lost

[22:44] <jnthn> moritz: I used to see a load of tests in the trig

[22:44] <jnthn> moritz: But that's all cleared up here now

[22:44] <jnthn> pi.t aside

[22:44] <moritz> \o/

[22:45] <moritz> I won't get around to the Num.Int fix for Inf/-Inf/NaN tonight

[22:45] *** clairvy left
[22:45] <moritz> ETOOCLOSETOSLEEP

[22:45] <jnthn> moritz: OK, working on that here

[22:45] <jnthn> moritz: Would be good to have examples of rats that fail for you

[22:45] *** clairvy joined
[22:46] <moritz> jnthn: they might be gone too, will see after the recompile

[22:46] <jnthn> k

[22:46] *** clairvy left
[22:46] <moritz> (now running through IMCC)

[22:47] <moritz> urks... forgot to install nqp

[22:47] <jnthn> oh noes

[22:47] *** clairvy joined
[22:47] <moritz> $ ./perl6 -e 'say 0.523598775603156'

[22:47] <moritz> 0.695983722377273

[22:48] <tadzik> :P

[22:48] <jnthn> > say 0.523598775603156

[22:48] <moritz> (that's without the last NQP fix, but I think it should be unrelated)

[22:48] <jnthn> 0.523598775603156

[22:48] <jnthn> :(

[22:48] <jnthn> Works here :/

[22:48] <moritz> will see tomorrow

[22:48] <moritz> sleep &

[22:48] <jnthn> o/

[22:49] <colomon> \o

[22:50] <sorear> seems Perl 5 can't do 

[22:50] <sorear> seems Perl 5 can't do "spin̈al" =~ /\w+/ correctly either.

[22:50] <jnthn> > my $PI = 3.141592653589e0;

[22:50] <jnthn> 0.552631241154582

[22:50] <jnthn> hm

[22:51] <sorear> In Texas π is 3 / In Slovakia it's just over 1/2 ...

[22:53] <jnthn> :P

[22:53] <dalek> rakudo/bigint: 296212e | jnthn++ | src/core/Num.pm:

[22:53] <dalek> rakudo/bigint: fail for Inf.Int and Inf.Rat. Maybe not the perfect solution, but it's far better than hanging.

[22:53] <dalek> rakudo/bigint: review: https://github.com/rakudo/rakudo/commit/296212ebe9

[22:53] <jnthn> Only 3? I'da thunk it'd be much bigger 

[22:53] <sorear> something something Ezekiel something

[22:54] <tadzik> they have pi in farenheits?

[22:54] *** thou joined
[22:54] *** clairvy left
[22:54] <japhb> jnthn, in Texas those are Texas-sized integers.  A 3 in Texas is bigger than a house in one of those other states ....

[22:55] *** clairvy joined
[22:55] *** envi_ joined
[22:55] <sorear> jnthn: so I've heard ch is a letter in Slovakia.

[22:56] <jnthn> Well, it represents a single sound, if that's what you mean by letter :)

[22:56] <tadzik> "cz"? :)

[22:56] <tadzik> . o O ( Brzęczyszczykiewicz )

[22:56] <tadzik> I think it's called a vowel

[22:57] <jnthn> oh

[22:57] <jnthn> http://en.wikipedia.org/wiki/Ch_%28digraph%29

[22:57] <tadzik> I once heard that only a Polish man can distinguish "sz" from "sh" and "ś"

[22:57] <jnthn> Wikipedia has it as "a letter"

[22:57] <tadzik> funny, they never told me it's a letter

[22:57] <jnthn> My Slovak teacher never really explained it to me that way though.

[22:58] <jnthn> But after a while my brane chunked the two.

[22:58] <japhb> jnthn, in commit 296212ebe9, you say "Cannot coerce NaN to an Int" where it looks like you meant Inf instead of NaN.

[22:58] <tadzik> also, there's nothing about it being a letter on Polish wikipedea

[22:58] <japhb> And actual, in the 'to Rat' message as well

[22:58] <tadzik> it's called a digraph, being a set of two letters

[22:58] <tadzik> so, not a letter

[22:59] <tadzik> (says mi limited knowledge)

[22:59] *** clairvy left
[23:00] <jnthn> japhb: also I missed the negatives :/

[23:00] *** clairvy joined
[23:00] <sorear> I wonder if, instead of pestering TimToady about 'what does \p{hst:lvt} even mean in grapheme cluster mode'

[23:00] <japhb> jnthn, yup.  :-)

[23:00] <sorear> I should take my questions to the people on the top of UTR18

[23:01] <sorear> Mark Davis and Andy Heninger

[23:01] *** clairvy left
[23:02] *** clairvy joined
[23:05] <sorear> seems both are ICU hackers

[23:06] *** kaare_ left
[23:06] *** clairvy left
[23:06] <dalek> rakudo/bigint: e4cd7a4 | jnthn++ | src/core/Num.pm:

[23:06] <dalek> rakudo/bigint: fail for Inf.Int and Inf.Rat. Maybe not the perfect solution, but it's far better than hanging.

[23:06] <dalek> rakudo/bigint: review: https://github.com/rakudo/rakudo/commit/e4cd7a42f9

[23:06] *** clairvy joined
[23:09] <masak> gu-reetings, #perl6

[23:09] *** clairvy left
[23:10] <tadzik> . o O ( wild idea: JAPH printed from substrings of exceptions )

[23:10] *** clairvy joined
[23:10] <tadzik> hello masak 

[23:10] <jnthn> o/ masak

[23:11] <masak> TimToady: jnthn hadn't seen your recent speculations about macros, so I gave him a summary. we Talked It Over. up until now I've been resisting the introduction of a new placeholder sigil, but jnthn pointed out a few real weaknesses in the idea of non-term placeholders.

[23:11] *** clairvy left
[23:12] <masak> two, to be exact. I'll list them as I remember them.

[23:12] *** clairvy joined
[23:13] <masak> (1) with terms, parsing is easy. with any kind of grammatical category, we... can't parse. (as I understood it.) specifically, some operators such as assignment are very magical and generate wildly different ASTs.

[23:13] <masak> it feels... wrong to throw out parsability at parse-time.

[23:14] <jnthn> (the simpler case is that if we don't know the precedence we can't parse...)

[23:14] *** clairvy left
[23:14] <masak> oh right!

[23:14] <masak> yeah, the optable parser simply cannot operate (no pun intended) under such circumstances.

[23:14] <masak> I was quite relieved when I realized that. :)

[23:14] <masak> because if it's impossible, I don't have to implement it, right?

[23:15] *** clairvy joined
[23:15] <masak> right? :S

[23:15] <masak> (2) none of the three syntaxes for macro invocation (subcall, listop, operator) allow for passing non-terms.

[23:15] <masak> that indicates (to me, at least), that macros are for terms.

[23:15] *** clairvy left
[23:15] <masak> s/\),/)/

[23:16] *** clairvy joined
[23:16] <jnthn> masak: no, as Perl 6 implementors we're expected to the impossible ;P

[23:16] <masak> augh

[23:17] <masak> probably three times before breakfast, too.

[23:17] <masak> or was that just thinking the impossible? I forget.

[23:17] <sorear> maaaaasaaaak

[23:17] <masak> soooooreaaaar

[23:17] *** clairvy left
[23:17] * masak runs over a field towards sorear in slow motion with outstreched arms

[23:18] <diakopter> lol "over"

[23:18] <masak> um. "across"?

[23:18] *** clairvy joined
[23:18] <masak> English. it's hard.

[23:18] <diakopter> yeah

[23:19] <sorear> aaagh.  that was my last field, I'll have to use rings now

[23:19] <masak> I've been in .uk over the weekend. that probably broke my preposition box.

[23:19] <jnthn> Huh? Why you not speak Queen's English now?

[23:19] *** clairvy left
[23:19] <diakopter> I suppose one can mow over a field

[23:20] <masak> jnthn: the Queen freaks me out. she lays so many eggs.

[23:20] *** clairvy joined
[23:20] <masak> sorear: I had to throw all the fields away because they had become skewed.

[23:20] <jnthn> masak: Plus she looks kinda old. Not surprising, given she has 10 times the lifespan or ordinary workers...

[23:20] <masak> jnthn: *lol*

[23:20] <jnthn> *of

[23:20] <masak> jnthn: this explains everything

[23:21] <masak> everyone else: jnthn is referring to regex jokes in my recent presentation.

[23:21] <masak> well, one of them.

[23:21] <tadzik> I thought it's somewhat about bees

[23:22] <masak> tadzik: it's about Reuters who s/\bthe queen\b/Queen Elisabeth/g in their news.

[23:22] *** clairvy left
[23:22] <masak> tadzik: it worked OK until they had an article about bees.

[23:22] <tadzik> :>

[23:23] *** clairvy joined
[23:23] <masak> clairvy: hey, cut it out!

[23:24] <tadzik> oh, you also don't ignore enter/leave events? :)

[23:25] <sorear> masak: I tried banning clairvy once.  Didn't work.

[23:25] *** clairvy left
[23:25] <jnthn> sorear: ...didn't work?

[23:25] <masak> tadzik: no, I consider them useful. except when people have some kind of autojoin mechanism on.

[23:25] <sorear> jnthn: despite never talking, ey knows about ban evasion

[23:25] *** clairvy joined
[23:26] <sorear> maybe if I set something really wide like $x:*clairvy*

[23:26] *** clairvy left
[23:26] <jnthn> sorear: fine by me

[23:26] *** thou left
[23:26] <masak> +1

[23:26] *** ChanServ sets mode: +o sorear

[23:26] <sorear> mode #perl6 +b

[23:26] <tadzik> masak: especially then I find them useless :)

[23:26] *** sorear sets mode: +b $x:*clairvy*

[23:26] *** sorear sets mode: +b *!*@x:*clairvy*

[23:27] *** sorear sets mode: -b *!*@x:*clairvy*

[23:27] *** ab5tract left
[23:28] *** sorear sets mode: -o sorear

[23:29] <sorear> tadzik: there is a large contingent of users, like masak and benabik, who join when they want to talk and part when they don't

[23:29] <masak> well, used to.

[23:29] <masak> now I'm running irssi+screen.

[23:29] <tadzik> sorear: I wouldn't call that large

[23:30] <sorear> as distinguished from people like me, who never join/quit, and people like pmurias and clairvy, who join/quit constantly for no reason

[23:30] <tadzik> sorear: and that's exactly the reason why I pay no attention to that; in the world I see, the knowledge about someone being on the channel or not is worthless

[23:30] <sorear> also someday I should persuade moritz to let me fix the lack of quit reporting in ilbot

[23:30] <sorear> but that would require effort

[23:30] <flussence> I've been trying to think up a cleverer algorithm for join/part messages than "barf everything to screen asap". Preferably one that does what everyone wants...

[23:31] <tadzik> I wanted to have a 2-3 line wide buffer on top of the weechat/irssi window

[23:31] <tadzik> there was even an irssi theme like that, which, as some people claim, didn't segfault at some point in history

[23:32] <tadzik> also, those few people who actually join and quit when they want to usually say "hello" and "bye", and that's fine for me

[23:32] <tadzik> </opinion>

[23:33] <masak> I'll be not-very-active in the next two days. will be teaching. however, I'm eager to blog about the macro work so far, as well as dig into the last bit of D1.

[23:33] <masak> for now, 'night #perl6

[23:33] *** tokuhirom joined
[23:35] <tadzik> o/

[23:36] <sorear> o/

[23:37] *** envi_ left
[23:38] <djanatyn> hey, back.

[23:39] <tadzik> hey djanatyn 

[23:40] *** ab5tract joined
[23:40] <djanatyn> is there anyone here I can talk to about Google Code-In?

[23:41] <djanatyn> Should I like, submit a resume or sample code or something?

[23:41] <tadzik> no, nope

[23:41] <tadzik> you just apply for the specific task

[23:41] <tadzik> then you have like 24 hours to deliver the result, then you pick another task

[23:43] <djanatyn> Oh, cool.

[23:43] <djanatyn> Where are the tasks?

[23:44] <tadzik> well, GCI has not yet officially started, methinks

[23:44] <djanatyn> Oh, interesting

[23:44] <djanatyn> do I need to sign up somewhere first?

[23:44] <tadzik> I suppose so

[23:44] <tadzik> http://www.google-melange.com/gci/homepage/google/gci2011

[23:44] <djanatyn> I'm pretty excited, I haven't really done anything like this before :)

[23:44] <djanatyn> thanks

[23:45] *** krakan left
[23:45] *** krakan joined
[23:48] *** PacoLinux_ joined
[23:50] *** mj41 left
[23:51] *** whiteknight joined
[23:52] *** whiteknight is now known as Guest8847

[23:58] <jnthn> 'night, #perl6

[23:59] *** benabik joined
