[00:00] *** donri left
[00:02] *** Radvendii joined
[00:02] <Radvendii> how do i take every element of a list *except* the first? (the tail)

[00:02] *** ispeak_ left
[00:02] *** ksi left
[00:03] <sorear> Radvendii: Perl 6 lists are not cons lists, and to take the tail you have to copy it.

[00:04] <sorear> Radvendii: The current best way is my ($head, @tail) = @list;

[00:04] <[Coke]> that's better than .pop?

[00:04] <[Coke]> (assuming you don't care about modifying the original list.)

[00:05] <[Coke]> er, .shift

[00:07] <Radvendii> i tried .shift. but perl6 doesnt deep copy lists, and rather than make a new one, i'd rather jsut take the tail

[00:07] <Radvendii> @a[1..*] doesnt work?

[00:07] <[Coke]> are you still wanting a deep copy?

[00:08] <[Coke]> nom: my @a = 1,2,3,4,5,6; say @[1..*];

[00:08] <p6eval> nom 18f12d: OUTPUT¬´Method 'gimme' not found for invocant of class 'Any'‚ê§  in method reify at src/gen/CORE.setting:4352‚ê§  in method reify at src/gen/CORE.setting:4257‚ê§  in method gimme at src/gen/CORE.setting:4621‚ê§  in method eager at src/gen/CORE.setting:4596‚ê§  in method postcircumfix:<‚Ä¶

[00:08] <[Coke]> nom: my @a = 1,2,3,4,5,6; say @a[1..*];

[00:08] <p6eval> nom 18f12d: OUTPUT¬´2 3 4 5 6‚ê§¬ª

[00:09] *** mikemol left
[00:10] <[Coke]> nom: my $a = 3; my @a = 1,2,$a,4,5,6; my @b = @[1..*]; $a = 5; say @b;

[00:10] <p6eval> nom 18f12d: OUTPUT¬´Method 'gimme' not found for invocant of class 'Any'‚ê§  in method reify at src/gen/CORE.setting:4352‚ê§  in method reify at src/gen/CORE.setting:4257‚ê§  in method gimme at src/gen/CORE.setting:4621‚ê§  in method eager at src/gen/CORE.setting:4596‚ê§  in method postcircumfix:<‚Ä¶

[00:10] <[Coke]> nom: my $a = 3; my @a = 1,2,$a,4,5,6; my @b = @a[1..*]; $a = 5; say @b;

[00:10] <p6eval> nom 18f12d: OUTPUT¬´2 3 4 5 6‚ê§¬ª

[00:12] <Radvendii> oh...

[00:12] <Radvendii> hang on...

[00:12] <Radvendii> it never terminates for me...

[00:13] <Radvendii> b: my $a = 3; my @a = 1,2,$a,4,5,6; my @b = @a[1..*]; $a = 5; say @b;

[00:13] <p6eval> b 1b7dd1: OUTPUT¬´(timeout)¬ª

[00:13] <Radvendii> yeah...

[00:13] <Radvendii> so it's fixed in nom.

[00:13] *** mikemol joined
[00:13] <Radvendii> niecza: my $a = 3; my @a = 1,2,$a,4,5,6; my @b = @a[1..*]; $a = 5; say @b;

[00:14] <p6eval> niecza v12-102-g22261b4: OUTPUT¬´(timeout)¬ª

[00:15] *** replore_ joined
[00:15] *** Trashlord joined
[00:17] *** ispeak_ joined
[00:19] *** Radvendii left
[00:23] *** risou is now known as risou_awy

[00:31] *** pmurias left
[00:37] *** fridim_ left
[00:41] *** ispeak_ left
[00:52] *** Chillance left
[00:56] *** colomon left
[00:57] *** cognominal_ left
[00:59] *** cognominal joined
[01:03] *** colomon joined
[01:07] *** huf left
[01:12] <sorear> std: /[aiueo]/

[01:12] <p6eval> std dc62e1d: OUTPUT¬´Potential difficulties:‚ê§  [aiueo] appears to be an old-school character class; please use <[aiueo]> if you‚ê§    mean a character class, or quote it like 'aiueo' to match‚ê§    string as a unit at /tmp/pwIc3b6Axu line 1:‚ê§------> [32m/[aiueo][33m‚èè[31m/[0m‚ê§ok 00:01 120‚Ä¶

[01:12] <sorear> perl6: /[aiueo]/

[01:12] <p6eval> rakudo 18f12d, niecza v12-102-g22261b4:  ( no output )

[01:12] <p6eval> ..pugs b927740: OUTPUT¬´Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {‚ê§    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20111008/blib6/pugs/perl5/lib';‚ê§    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;‚ê§}‚ê§'Pugs::Runtime::Match::HsBridge'‚ê§"‚ê§*** '<HAND‚Ä¶

[01:21] *** huf joined
[01:21] *** jaldhar joined
[01:23] *** Vlavv` joined
[01:24] *** hundskatt left
[01:26] *** Vlavv_ left
[01:38] *** whiteknight joined
[01:39] *** whiteknight is now known as Guest94286

[01:44] <colomon> perl6: say :16<dead.face>

[01:44] <p6eval> niecza v12-102-g22261b4: OUTPUT¬´Unhandled exception: Unable to resolve method postcircumfix:<( )> in class Str‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 488 (Cool.comb @ 7) ‚ê§  at /home/p6eval/niecza/src/NieczaActions.pm6 line 154 (NieczaActions.rad_number @ 11) ‚ê§  at /home/p6e‚Ä¶

[01:44] <p6eval> ..pugs b927740: OUTPUT¬´57005.979705810546875‚ê§¬ª

[01:44] <p6eval> ..rakudo 18f12d: OUTPUT¬´57005.9797058105‚ê§¬ª

[01:45] <sorear> oh hey I forgot to commit the fix for that.

[01:45] <dalek> roast: 6cc3650 | (Solomon Foster)++ | S06-signature/named-parameters.t:

[01:45] <dalek> roast: Fudge for niecza.

[01:45] <dalek> roast: review: https://github.com/perl6/roast/commit/6cc36503c4

[01:45] <dalek> roast: 132c888 | (Solomon Foster)++ | S02-literals/radix.t:

[01:45] <dalek> roast: Refudge for latest niecza changes. :(

[01:45] <dalek> roast: review: https://github.com/perl6/roast/commit/132c888dea

[01:45] <colomon> sorear++

[01:46] <dalek> niecza: 642c6ef | sorear++ | src/NieczaActions.pm6:

[01:46] <dalek> niecza: Fix error on :16<dead.face>

[01:46] <dalek> niecza: review: https://github.com/sorear/niecza/commit/642c6effa4

[01:46] <dalek> niecza: 710c8b8 | sorear++ | docs/TODO.S05:

[01:46] <dalek> niecza: TODO.S05 fiddles

[01:46] <dalek> niecza: review: https://github.com/sorear/niecza/commit/710c8b8f24

[01:47] *** alvis left
[01:48] <sorear> rakudo: say (1/3)."$_"() for <gist Str perl>;

[01:48] <p6eval> rakudo 18f12d: OUTPUT¬´0.333333333333333‚ê§0.333333333333333‚ê§1/3‚ê§¬ª

[01:53] *** thou left
[01:54] <dalek> roast: 9b20e72 | (Solomon Foster)++ | S02-literals/radix.t:

[01:54] <dalek> roast: Revert "Refudge for latest niecza changes. :(" -- sorear++ fixed the bug.

[01:54] <dalek> roast: 

[01:54] <dalek> roast: This reverts commit 132c888deaaecfece6fe7c9941c378245a225bd4.

[01:54] <dalek> roast: review: https://github.com/perl6/roast/commit/9b20e72254

[01:54] <dalek> roast: f2c5529 | (Solomon Foster)++ | S02-literals/radix.t:

[01:54] <dalek> roast: Refudge for latest niecza changes.

[01:54] <dalek> roast: review: https://github.com/perl6/roast/commit/f2c5529e4d

[01:54] *** alvis joined
[01:54] <sorear> colomon: the fix actually worked?

[01:55] <sorear> I just remembered I forgot to test it as well as committing

[01:55] <sorear> not my best day

[01:55] <colomon> sorear: well, it's not clear.

[01:55] <sorear> not clear?

[01:55] <colomon> we tend to fail those tests because Rat.Str gives us fractions.

[01:55] <sorear> ah.

[01:56] <sorear> I'm going to fix that right about now.

[01:56] <colomon> So I can say that it's definitely not crashing anymore.

[01:56] <colomon> but I'm not sure if it's exactly the correct answer or not.

[01:56] <colomon> (because I haven't checked in detail myself.)

[01:56] <colomon> sorear++

[02:08] <sorear> rakudo: say (2+3i)."$_"() for <gist Str perl>;

[02:08] <p6eval> rakudo 18f12d: OUTPUT¬´2 + 3i‚ê§2 + 3i‚ê§Complex.new(2, 3)‚ê§¬ª

[02:09] *** jaldhar left
[02:13] <sorear> it's funny how I can get karma here for just *saying* I'll do something. :D

[02:15] <japhb> I've seen that expressed with preincrement: ++sorear

[02:15] <japhb> :-)

[02:16] *** alvis left
[02:17] *** am0c joined
[02:17] <colomon> sorear: that's what happens when you have a reputation for delivering.  ;)

[02:18] *** alvis joined
[02:20] *** abercrombie joined
[02:30] <sorear> colomon: should FatRat stringify as a decimal?

[02:30] <sorear> +too

[02:32] <colomon> probably

[02:32] <colomon> I don't recall if it's spec'd or not.

[02:33] *** alvis left
[02:33] <dalek> niecza: c5c357b | sorear++ | lib/Utils.cs:

[02:33] <dalek> niecza: Set precision correctly to allow Num<->Str roundtripping

[02:33] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c5c357b40e

[02:33] <dalek> niecza: 6f76470 | sorear++ | lib/ (2 files):

[02:33] <dalek> niecza: Change Rat, FatRat default stringification to fractions; add spaces to Complex

[02:33] <dalek> niecza: review: https://github.com/sorear/niecza/commit/6f76470d32

[02:34] <colomon> sorear: any further thoughts on :Letter, etc?

[02:35] <sorear> colomon: can #94 be closed yet?

[02:35] <sorear> colomon: I haven't looked hard enough yet; so far I haven't found a proper spec for :Letter

[02:35] <colomon> yes

[02:36] <colomon> that's yes on #94

[02:36] *** alvis joined
[02:36] <sorear> aha, I've found a proper spec

[02:38] <colomon> crap

[02:38] <colomon> #    Failed test

[02:38] <colomon> #           got: 1.6045690981097406E+19

[02:38] <colomon> #      expected: 1.60456909810974E+19

[02:43] <sorear> should be is_approx, no?

[02:43] <colomon> Probably.  except I don't think that will work for this case.

[02:43] <colomon> is_approx isn't very sophisticated

[02:44] <sorear> what test is this?

[02:45] <colomon> is(:16<dead_beef> * 16**8, :16<dead_beef*16**8>,

[02:45] <sorear> I think is_approx actually will work for that...

[02:46] <colomon> nope

[02:46] <colomon> just checked 

[02:46] <sorear> my interpretation is that :16<dead_beef*16**8> is a Num because 2958942e8 is a Num

[02:46] <sorear> exponential notation forces Num

[02:46] <colomon> hmmm... dunno

[02:46] <sorear> oh, huh.  is_approx checks for an _absolute_ difference of 1e5

[02:46] <sorear> 1e-5

[02:47] <colomon> right, that's why it doesn't help here

[02:47] <sorear> I should change that to a reasonable number of ulps

[02:47] <colomon> unfortunately, it's hard to have a good general case solution for that issue (reasonable)

[02:48] <colomon> though I suppose it could be reasonable for non-zero targets, and 1e-5 for zero targets, and then the worst case would be the same as now, and the best case would be much better

[02:49] <sorear> sounds good to me

[02:49] <colomon> if we make that change, we have to change it in rakudo, too, most likely.

[02:49] *** aindilis left
[02:49] <colomon> but I'm willing to do that.  ;)

[02:49] *** Guest94286 left
[02:49] <sorear> if relative error is good enough for IEEE it's good enough for me.

[02:53] *** fieldsa left
[02:54] *** aindilis joined
[02:55] <colomon> you making the change to niecza, or me?

[02:56] <colomon> my $accuracy = $expected.abs < 1e-10 ?? 1e-5 !! $expected.abs * 1e-10 

[03:15] <[Coke]> colomon,sorear: t/spec/S02-literals/radix.t is now only failing test #49.

[03:16] <colomon> [Coke]: right, we're working on that.

[03:16] <colomon> (changing the test, that is, niecza's result is correct.)

[03:16] <[Coke]> Just responding to the closing of #94. Danke.

[03:19] <colomon> or rather, I'm going to bed and will figure out what still needs fixing in the morning.  :)

[03:20] <[Coke]> aye, good enough. ;)

[03:26] *** molaf joined
[03:36] *** Psyche^ joined
[03:40] *** Patterner left
[03:40] *** Psyche^ is now known as Patterner

[03:47] *** jaldhar joined
[03:59] *** jeffreykegler joined
[03:59] *** lestrrat left
[04:00] *** lestrrat joined
[04:04] *** estrabd left
[04:09] *** drbean left
[04:11] *** jeffreykegler left
[04:15] *** drbean joined
[04:30] *** lutok left
[04:40] <sorear> Does Perl 6 still do that thing where trailing characters after a number are ignored?

[04:48] <Timbus> .. wot

[04:48] <Timbus> like in literals or in strings

[04:49] <sorear> buubot_backup: say "123def" + 5

[04:49] <buubot_backup> sorear: Couldn't match input.

[04:49] <sorear> buubot_backup: eval: "123def" + 5

[04:49] <buubot_backup> sorear: 128

[04:49] <sorear> rakudo: say "123def" + 5

[04:49] <p6eval> rakudo 18f12d: OUTPUT¬´No applicable candidates found to dispatch to for 'Numeric'. Available candidates are:‚ê§:(Mu $v, Mu %_)‚ê§‚ê§  in method Numeric at src/gen/CORE.setting:648‚ê§  in sub infix:<+> at src/gen/CORE.setting:2166‚ê§  in sub infix:<+> at src/gen/CORE.setting:2166‚ê§  in block <anon>‚Ä¶

[04:49] <sorear> b: say "123def" + 5

[04:49] <p6eval> b 1b7dd1: OUTPUT¬´128‚ê§¬ª

[04:49] <sorear> rakudo: say "123" + 5

[04:49] <p6eval> rakudo 18f12d: OUTPUT¬´128‚ê§¬ª

[04:50] <sorear> Timbus: like zat

[04:50] <Timbus> yeah i thought that was what you meant

[04:51] <Timbus> i personally don't think that behaviour is.. very good

[04:51] <Timbus> BUT i do like it, for when people add a space to the end of their numeric input

[04:51] <Timbus> :v

[04:53] <Timbus> rakudo: say "123" + 5

[04:53] <p6eval> rakudo 18f12d: OUTPUT¬´128‚ê§¬ª

[04:54] <Timbus> rakudo: say "0x23" + 5

[04:54] <p6eval> rakudo 18f12d: OUTPUT¬´40‚ê§¬ª

[04:54] <Timbus> rakudo: say "23h" + 5

[04:54] <p6eval> rakudo 18f12d: OUTPUT¬´No applicable candidates found to dispatch to for 'Numeric'. Available candidates are:‚ê§:(Mu $v, Mu %_)‚ê§‚ê§  in method Numeric at src/gen/CORE.setting:648‚ê§  in sub infix:<+> at src/gen/CORE.setting:2166‚ê§  in sub infix:<+> at src/gen/CORE.setting:2166‚ê§  in block <anon>‚Ä¶

[04:55] <Timbus> barring cases where a alformed string somehow equates to a valid number, i think i prefer this behavior

[04:57] <sorear> Timbus: leading and trailing spaces are explicitly valid

[04:57] <sorear> japhb: ping, I'd like your comments

[05:07] *** molaf left
[05:21] <japhb> pong, but looks like I need to backlog

[05:23] *** sftp_ joined
[05:23] *** sftp left
[05:23] <sorear> japhb: +"123def" ?

[05:31] * japhb finally manages to disentangle rakudo working dir enough to actually test his own code ...

[05:32] <japhb> sorear,  Failure: "trailing characters after number at position 3 of '123def'"

[05:34] <japhb> FWIW, I interpreted the spec as saying the *only* e/E notation forced num interpretation, and exponentiation in :r<m*b**e> format did not.

[05:34] <japhb> *Num

[05:37] <japhb> colomon, thank you for switching to relative error in is_approx.  It always bothered me in passing that it *wasn't* that way, but I kept forgetting to actually change it.

[05:37] <japhb> colomon++ # Actually doing it

[05:37] * moritz interprets it the same way (e/E)

[05:38] <moritz> though the presence of e/E doesn't always force Num

[05:38] <moritz> in the cases of :radix<...>, "the type produce will be the narrowest of Int, Rat or Num that can accurately represent the number"

[05:38] <moritz> *produce

[05:39] <moritz> *produced

[05:39] * moritz not really awake yet

[05:39] <japhb> moritz, IIRC the spec and roast were in net slightly unclear on e/E forcing Num -- but it appeared to be the *intent* that it be so.  Otherwise 'e0' becomes much less useful.

[05:40] <moritz> japhb: what I wrote above applies only to radix literals of the form :12<...>

[05:40] <moritz> japhb: see S02:3335

[05:41] <moritz> erm wait, radixes don't allow e/E at all

[05:41] <moritz> so, I was confused

[05:41] <moritz> yes, e/E force Num. Never mind me, move along :-)

[05:42] <japhb> :-)

[05:43] * japhb looks forward to not being completely buried in $day_job work again

[05:50] *** replore_ left
[05:50] * moritz looks forward to being not completely brain-melted due to $flue

[05:52] *** bbkr1 left
[05:52] *** bbkr1 joined
[05:55] *** kaleem joined
[05:57] *** drbean left
[05:58] *** proller left
[05:59] <japhb> Interesting pun, that ...

[06:05] *** drbean joined
[06:32] *** thou joined
[06:48] <sorear> this is probably going to be painfully slow :|

[06:48] * sorear is turning STD.numeric into a number parser for niecza

[07:02] *** drbean left
[07:03] *** koban joined
[07:03] *** koban left
[07:03] *** wtw joined
[07:03] *** koban joined
[07:07] *** drbean joined
[07:09] *** fsergot left
[07:21] *** replore_ joined
[07:26] *** envi_ left
[07:28] *** proller joined
[07:29] *** envi_ joined
[07:31] *** thou left
[07:35] *** lutok joined
[07:36] *** proller left
[07:38] <masak> morningz, #perl6

[07:39] <sorear> o/ maska

[07:40] <masak> moritz: 'flue' refers to chimney passages, 'flu' is short for 'influenza'

[07:40] <masak> moritz: also, get well soon :/

[07:41] <sorear> I figured that was in the logic of "my brane are busted"

[07:42] * sorear is busy writing a new, probably horribly slow Str->Numeric converter for Niecza

[07:43] <masak> sorear: I'd assume so as well, if it weren't for the fact that at least another German-speaker had made the same typo before in my presence ;)

[07:43] <sorear> heh, yeah, German and English differ a lot with their final vowels

[07:43] <masak> I enjoy the typo, mind. I always picture the OP carrying around quite a tall factory chimney.

[07:44] <masak> yes, final vowels. in some sense, 'flue' is the "expected" spelling of that word. but it's an abbreviation, so it breaks the conventional rules.

[07:44] <masak> not only that, but it's an abbreviation of a loan word.

[07:45] * sorear debates going to bed now

[07:46] <sorear> alternatively: chat with masak since our schedules rarely overlap these last weeks

[07:46] *** aindilis left
[07:48] <masak> sorear: I've been on vacation :)

[07:49] <masak> haven't even been backlogging for the past two weeks.

[07:50] <sorear> we never did get around to the "niecza promotion" convo

[07:51] <masak> hm, seems not.

[07:51] <masak> I've been thinking of chromatic's "no-one thinks of Perl 6 the product" argument lately.

[07:51] <masak> maybe any Niecza promotion should be geared towards that.

[07:52] <sorear> will you still be here in ~8h?

[07:52] <masak> yes.

[07:52] <masak> sleep tight ;)

[07:52] <sorear> bye

[07:52] <masak> o/

[07:53] *** baest joined
[07:58] *** Patterner left
[08:02] *** Psyche^ joined
[08:02] *** Psyche^ is now known as Patterner

[08:04] *** aindilis joined
[08:26] *** bacek left
[08:41] *** mj41 joined
[08:47] *** bkolera joined
[08:51] <masak> interesting: http://lucumr.pocoo.org/2011/12/22/implicit-scoping-in-coffeescript/

[08:52] *** agentzh joined
[08:52] <masak> how implicit scoping combined with closures leads to either (a) the need for an explicit keyword, or (b) tricky maintenance issues.

[08:53] *** cooper left
[08:55] <masak> I'm not even sure I think implicit scoping is worth it for one-liners any more...

[08:56] *** proller joined
[09:15] <arnsholt> masak: Indeed. A good illustration of why I like strict in Perl 5 and 6's default strict

[09:15] *** sudokode joined
[09:16] <masak> arnsholt: it's still spec that -e turns strict off, AFAIR. no implementation supports it yet.

[09:21] <masak> maybe we could add syntax such as 'perl6 -e: say $greeting = "OH HAI"' to p6eval...

[09:26] <masak> wow, we're down to 699 new+open tickets on RT. nice.

[09:28] <masak> rakudo: my @array = 1, 2, 3; say @array.min:{ $^a <=> $^b }

[09:28] <p6eval> rakudo 18f12d: OUTPUT¬´Method 'min:{ $^a <=> $^b }' not found for invocant of class 'Array'‚ê§  in block <anon> at /tmp/LoEBfnkFuW:1‚ê§  in <anon> at /tmp/LoEBfnkFuW:1‚ê§¬ª

[09:29] <masak> this is our oldest open ticket. it's from 2008-05-07.

[09:29] <masak> std: my @array = 1, 2, 3; say @array.min:{ $^a <=> $^b }

[09:29] <p6eval> std dc62e1d: OUTPUT¬´ok 00:01 123m‚ê§¬ª

[09:30] <masak> of course, STD wouldn't show the runtime error even if it parses things the same.

[09:36] *** replore_ left
[09:38] <masak> 699 new/open/stalled tickets; 405 submitted by some guy with a towel on his head. ;)

[09:54] *** fridim_ joined
[09:54] <masak> perl6: say 405 / 699

[09:54] <p6eval> pugs b927740: OUTPUT¬´0.5793991416309012875536480686695278969957‚ê§¬ª

[09:54] <p6eval> ..rakudo 18f12d: OUTPUT¬´0.579399141630901‚ê§¬ª

[09:54] <p6eval> ..niecza v12-106-g6f76470: OUTPUT¬´0.57939914163090134‚ê§¬ª

[09:55] <masak> Pugs++ # showoff

[09:55] * masak takes to the streets, chanting "I am the 58%"

[09:57] *** proller_ joined
[09:57] <masak> perl6: say 1220 / 2605 # this is the proportion if one includes all the other types of tickets

[09:57] <p6eval> pugs b927740: OUTPUT¬´0.4683301343570057581573896353166986564299‚ê§¬ª

[09:57] <p6eval> ..rakudo 18f12d: OUTPUT¬´0.468330134357006‚ê§¬ª

[09:57] <p6eval> ..niecza v12-106-g6f76470: OUTPUT¬´0.46833013435700577‚ê§¬ª

[09:57] *** proller_ left
[09:58] <masak> aww, less than half :P

[10:00] *** dakkar joined
[10:03] *** bacek joined
[10:08] *** proller_ joined
[10:15] <tadzik> 'morning

[10:19] <masak> morning, tadzik!

[10:24] *** GlitchMr joined
[10:24] <masak> tadzik: what's the deal with nom and Panda these days?

[10:26] <tadzik> masak: pre-compilation issues?

[10:27] <tadzik> well, Panda on nom works as fine as Panda on b

[10:27] <masak> I'm reading in the backlog that some dependencies still fail tests.

[10:27] <tadzik> now they don't 

[10:27] <masak> \o/

[10:28] <tadzik> either the dependencies or their tests have been fixed :P

[10:28] <masak> well, that's what I get for not being fully backlogged yet ;)

[10:28] <tadzik> now the precompilation problem is a bit tricky

[10:29] <masak> what is the precompilation problem?

[10:29] <tadzik> two .pm files, even when they differ by one character or something will never be ABI-compatibile

[10:29] <masak> "ABI"?

[10:29] <tadzik> binary interface

[10:29] <masak> right.

[10:29] <tadzik> I mean pir :)

[10:29] <tadzik> if we have pre-compiled panda compiled against pre-compiled json, then when we update json, panda breaks

[10:29] <masak> heck, one .pm compiled twice might not be PIR-compatible for all I know :P

[10:30] <tadzik> hah, that'd be even funnier

[10:30] <masak> tadzik: well, that's why the .pm files always have to be present.

[10:30] <masak> tadzik: the .pir files are caches and *only* that.

[10:30] <tadzik> yeah, but rakudo does not automagically fallback to pms

[10:30] <masak> ah.

[10:30] <tadzik> well, pm files

[10:30] <masak> then that's a bug.

[10:30] <tadzik> it says "json broken, lol!" and dies

[10:31] <masak> whereas the truth is more like "Rakudo broken, lol!"

[10:31] <tadzik> mebbe

[10:32] <tadzik> well, I think the point is that we'll have to fall back recursively, if you know what I mean

[10:33] <masak> I sort of maybe know what you mean.

[10:33] <masak> there can be cascades of fallbacks?

[10:33] <tadzik> yeah

[10:33] <tadzik> well, there has to be

[10:33] <tadzik> panda uses panda ecosystem, which uses json

[10:33] <tadzik> json.pir becomes out of date, so ecosystem.pir becomes out of date, so panda.pir becomes out of date

[10:33] <tadzik> well, outdated. Whatever

[10:33] <masak> nod.

[10:34] <tadzik> then we have to try panda.pm, and so ecosystem.pm and json.pm

[10:34] <masak> and re-precompilation will fail if some of those aren't present.

[10:34] <tadzik> well, we always keep them

[10:58] *** daxim joined
[11:01] *** proller_ left
[11:01] *** proller_ joined
[11:01] *** proller left
[11:01] *** proller joined
[11:07] *** proller left
[11:07] *** proller_ left
[11:07] *** am0c left
[11:09] <bbkr1> speaking of module management - is there any way to ask user if live tests (or tests that require some environment setup to pass, like database server for example) should be run while installing module through panda?

[11:11] <tadzik> No idea. How does Perl 5 handle that?

[11:11] <masak> bbkr1: if we adopt the distinction between "developer tests" and "user tests", in which category does the above fall?

[11:11] <masak> IMO, only "user tests" should be run when installing a module through a module installer. at least per default.

[11:13] <bbkr1> live test falls under category "live test". it can be user or developer one.

[11:14] *** koban left
[11:16] <bbkr1> Perl 5 also does not provide any  "best practice" solution here, some modules ask on STDOUT with some timeout, some omit live tests.

[11:18] *** xjiujiu joined
[11:18] <bbkr1> some (mostly client-server modules) setup circular test environment - they test client using own server and server using own client

[11:24] *** xjiujiu left
[11:28] *** xjiujiu joined
[11:28] *** mkramer joined
[11:36] <masak> bbkr1: I've had modules asking on STDOUT and essentially hanging cpanm. I asked miyagawa, and he considered that the module author's problem, not his.

[11:36] <masak> I'm inclined to agree.

[11:43] <moritz> best practice is to only do "dangerous" stuff when special env variables are set

[11:48] *** am0c joined
[11:52] <masak> sounds Unix-y and Perlish.

[11:53] <masak> a DI goon would say that the database server has no place in a set of unit tests to begin with.

[11:59] <dalek> rakudo/nom: 89353cb | tadzik++ | lib/Pod/To/Text.pm:

[11:59] <dalek> rakudo/nom: [Pod::To::Text] Make tables a bit more pleasant to look at

[11:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/89353cb748

[12:01] *** pmurias joined
[12:09] <masak> validating attributes -- a job for .new, or for .BUILD?

[12:10] * masak guesses BUILD

[12:10] <moritz> erm, a job for the type constraints on the attributes

[12:10] <tadzik> true :)

[12:10] <tadzik> recently even I dislike BUILD :P

[12:11] <masak> moritz: only if the validation is easily expressable as a type constraint.

[12:11] <moritz> hm, yes

[12:11] <tadzik> obtw. Does anyone know whether we can ask NCI if something is a NULL pointer?

[12:11] <moritz> masak: if not, I'd overwrite new and do the validation there

[12:11] <masak> moritz: why .new and not .BUILD?

[12:12] <masak> I went with BUILD and don't see any problems with it so far.

[12:12] *** overrosy left
[12:12] <moritz> masak: because BUILD feels too late for my taste

[12:12] <masak> oh, I don't mind that it creates the invalid object, as long as it dies.

[12:12] <moritz> not a good reason, I know

[12:12] <masak> that's the same kind of lateness that C++ and Java have to content with, since object construction is hidden.

[12:16] <dalek> rakudo/nom: 3b7a158 | moritz++ | docs/ChangeLog:

[12:16] <dalek> rakudo/nom: update ChangeLog in preparation for the 2011.12 release

[12:16] <dalek> rakudo/nom: 

[12:16] <dalek> rakudo/nom: quite an impressive list IMHO

[12:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3b7a15888f

[12:16] <tadzik> moritz: cutting out the release just now?

[12:17] <moritz> tadzik: I can wait if there's reason to wait, but I'm doing some of the preparation right now

[12:17] <tadzik> moritz: I have a minor Pod fix coming out

[12:17] <tadzik> s/out/up/

[12:17] <moritz> tadzik: go for it

[12:17] <tadzik> nothing serious, just handling =for table :some<configuration>

[12:18] <moritz> phenny: ask jnthn if he wants to get some commits in before the release

[12:18] <phenny> moritz: I'll pass that on when jnthn is around.

[12:18] <masak> you're probably aware, but jnthn is on severely reduced internet access right now.

[12:18] <tadzik> I may have just noticed a Podbug too, but I can wait with it for after the release, it's nothing serious

[12:19] <moritz> masak: yes, and i won't hold the release waiting for the answer

[12:20] <moritz> but if he does have something to wait for, and manages to tell me in time, I'll wait

[12:20] <masak> moritz: .BUILD turned out to be the "right" choice, because I wanted to do simultaneous validation and buildup of a private caching attribute.

[12:20] <moritz> sounds sane-ish

[12:20] * masak .oO( jnthn's commits: worth waiting for )

[12:21] <pmurias> moritz: re extra testing using env vars: do a lot of people besides authors enable those?

[12:22] *** flussence left
[12:22] *** flussence_ joined
[12:23] *** pkkm_ joined
[12:23] *** hundskatt joined
[12:27] *** flussence_ left
[12:28] *** flussence joined
[12:29] <dalek> rakudo/nom: e954381 | tadzik++ | / (2 files):

[12:29] <dalek> rakudo/nom: [Pod] Fix configuration for tables

[12:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e954381007

[12:29] <dalek> rakudo/nom: f5ef031 | tadzik++ | lib/Pod/To/Text.pm:

[12:29] <dalek> rakudo/nom: [Pod::To::Text] Fix handling of table caption

[12:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f5ef031e78

[12:29] <tadzik> (warning: not spectested. podtested)

[12:29] <tadzik> moritz: okay, I'm done here

[12:33] *** donri joined
[12:41] <masak> have: string. want: first character into one variable, rest of the string into another variable. how do I do it?

[12:41] <masak> I expected this to work, but it didn't:

[12:41] <masak> perl6: my ($first, $rest) = "foo".split(/<?>/, 2); say ($first, $rest).perl

[12:41] <p6eval> rakudo 3b7a15, niecza v12-106-g6f76470: OUTPUT¬´("", "foo")‚ê§¬ª

[12:41] <p6eval> ..pugs b927740: OUTPUT¬´Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {‚ê§    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20111008/blib6/pugs/perl5/lib';‚ê§    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;‚ê§}‚ê§'Pugs::Runtime::Match::HsBridge'‚ê§"‚ê§*** '<HAND‚Ä¶

[12:41] <masak> I expected this to work, but it didn't:

[12:42] <masak> perl6: my ($first, $rest) = "foo".comb(/./, 2); say ($first, $rest).perl

[12:42] <p6eval> pugs b927740: OUTPUT¬´*** No such method in class Str: "&comb"‚ê§    at /tmp/dUdb70fKO1 line 1, column 22-40‚ê§¬ª

[12:42] <p6eval> ..rakudo 3b7a15, niecza v12-106-g6f76470: OUTPUT¬´("f", "o")‚ê§¬ª

[12:42] <masak> seems at least one of those ways should work.

[12:43] <masak> what use is the semantics of $limit on .comb, if it just emulates truncating the results? I can do that with .[^2] if I like.

[12:44] <masak> and should .split with /<?>/ really produce empty substrings?

[12:44] <masak> perl6: my @substrs  = "foo".split(/<?>/, 5); say @substrs.perl

[12:44] <p6eval> niecza v12-106-g6f76470: OUTPUT¬´["", "f", "o", "o", ""].list‚ê§¬ª

[12:44] <p6eval> ..rakudo 3b7a15: OUTPUT¬´Array.new("", "f", "o", "o", "")‚ê§¬ª

[12:44] <p6eval> ..pugs b927740: OUTPUT¬´Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {‚ê§    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20111008/blib6/pugs/perl5/lib';‚ê§    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;‚ê§}‚ê§'Pugs::Runtime::Match::HsBridge'‚ê§"‚ê§*** '<HAND‚Ä¶

[12:44] * masak scowls

[12:45] <Tene> perl6: my ($first, $rest) = "foooooooo".comb(/./, 1); say ($first, $rest).perl;

[12:46] <p6eval> niecza v12-106-g6f76470: OUTPUT¬´("f", Any)‚ê§¬ª

[12:46] <p6eval> ..pugs b927740: OUTPUT¬´*** No such method in class Str: "&comb"‚ê§    at /tmp/CzbqR0aH3v line 1, column 22-46‚ê§¬ª

[12:46] <p6eval> ..rakudo 3b7a15: OUTPUT¬´("f", Nil)‚ê§¬ª

[12:46] <masak> buubot_backup: say for split //, "foo", 2

[12:46] <buubot_backup> masak: Couldn't match input.

[12:46] <masak> buubot_backup: eval say for split //, "foo", 2

[12:46] <buubot_backup> masak: No output.

[12:46] <masak> hrm.

[12:46] <masak> locally, that gives "f\noo\n"

[12:46] <Tene> p5 split returns the rest of the unsplit argument as an additional value

[12:46] <masak> that's what I expected here.

[12:46] <Tene> +1

[12:47] <Tene> I say bug.

[12:47] <masak> also, note that p5 doesn't start with an empty substring result.

[12:47] <masak> I'm tempted to submit a rakudobug, but I feel I don't understand the terrain yet.

[12:47] <Tene> perl6: my ($first, $rest) = "foooooooo" ~~ m/(.)(.*)/; say ($first, $rest).perl;

[12:47] <p6eval> niecza v12-106-g6f76470: OUTPUT¬´(#<match from(0) to(9) text(foooooooo) pos([#<match from(0) to(1) text(f) pos([].list) named({}.hash)>, #<match from(1) to(9) text(oooooooo) pos([].list) named({}.hash)>].list) named({}.hash)>, Any)‚ê§¬ª

[12:47] <p6eval> ..pugs b927740: OUTPUT¬´Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {‚ê§    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20111008/blib6/pugs/perl5/lib';‚ê§    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;‚ê§}‚ê§'Pugs::Runtime::Match::HsBridge'‚ê§"‚ê§*** '<HAND‚Ä¶

[12:47] <p6eval> ..rakudo 3b7a15: OUTPUT¬´(Match.new(orig => "foooooooo", from => 0, to => 9, ast => Any, list => (Match.new(orig => "foooooooo", from => 0, to => 1, ast => Any, list => ().list, hash => EnumMap.new()), Match.new(orig => "foooooooo", from => 1, to => 9, ast => Any, list => ().list, hash => ‚Ä¶

[12:47] <masak> there's bound to be a bunch of design decisions here that I either don't remember or haven't heard about.

[12:48] <dalek> roast: 4ad0098 | (Solomon Foster)++ | S (2 files):

[12:48] <dalek> roast: Fix tests for improved is_approx.

[12:48] <dalek> roast: review: https://github.com/perl6/roast/commit/4ad00982fb

[12:48] <Tene> perl6: my ($first, $rest) = "foooooooo" ~~ m/(.)(.*)/; say (~$first, ~$rest).perl;

[12:48] <p6eval> niecza v12-106-g6f76470: OUTPUT¬´Use of uninitialized value in string context‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 784 (warn @ 2) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 169 (Mu.Str @ 9) ‚ê§  at <unknown> line 0 (ExitRunloop @ 0) ‚ê§  at /tmp/WRdOJafUKy line 1 (mainline @ 3‚Ä¶

[12:48] <p6eval> ..pugs b927740: OUTPUT¬´Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {‚ê§    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20111008/blib6/pugs/perl5/lib';‚ê§    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;‚ê§}‚ê§'Pugs::Runtime::Match::HsBridge'‚ê§"‚ê§*** '<HAND‚Ä¶

[12:48] <p6eval> ..rakudo 3b7a15: OUTPUT¬´("foooooooo", "")‚ê§¬ª

[12:49] <dalek> niecza: 578b7d0 | (Solomon Foster)++ | lib/ (3 files):

[12:49] <dalek> niecza: Merge branch 'master' of github.com:sorear/niecza

[12:49] <dalek> niecza: review: https://github.com/sorear/niecza/commit/578b7d0acd

[12:49] <dalek> niecza: 0efe17a | (Solomon Foster)++ | lib/Test.pm6:

[12:49] <dalek> niecza: Base tolerance in is_approx on the size of the expected result.

[12:49] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0efe17a2f8

[13:02] <colomon> What's the master Test.pm for Rakudo?

[13:02] <moritz> lib/Test.pm

[13:03] <colomon> moritz++

[13:04] <moritz> nom: sub postfix:<!>($x) { [*] 0..$x }; say 5!

[13:04] <p6eval> nom f5ef03: OUTPUT¬´0‚ê§¬ª

[13:04] <moritz> nom: sub postfix:<!>($x) { [*] 1..$x }; say 5!

[13:04] <p6eval> nom f5ef03: OUTPUT¬´120‚ê§¬ª

[13:08] <Tene> rakudo: sub taglib_tag_title returns Str is native('libtag_c.so') {}

[13:08] <p6eval> rakudo f5ef03: OUTPUT¬´===SORRY!===‚ê§No applicable candidates found to dispatch to for 'trait_mod:<is>'. Available candidates are:‚ê§:(Attribute $attr, Any $rw)‚ê§:(Attribute $attr, Any $readonly)‚ê§:(Attribute $attr, Any $box_target)‚ê§:(Routine $r, Any $rw)‚ê§:(Routine $r, Any $default)‚ê§:(Routine‚Ä¶

[13:09] <Tene> https://perl6advent.wordpress.com/2011/12/21/native-libraries-native-objects/ -- the code in there doesn't work on latest rakudo?

[13:09] <moritz> it needs  use NativeCall;

[13:09] <Tene> that would be useful to mention in the post. ;)

[13:10] <Tene> rakudo: use NativeCall; sub taglib_tag_title returns Str is native('libtag_c.so') {}

[13:10] <p6eval> rakudo f5ef03: OUTPUT¬´===SORRY!===‚ê§Could not find NativeCall in any of: lib, /home/p6eval/.perl6/lib, /home/p6eval/nom-inst1/lib/parrot/3.11.0-devel/languages/perl6/lib, .‚ê§¬ª

[13:12] <dalek> rakudo/nom: b0f466f | (Solomon Foster)++ | lib/Test.pm:

[13:12] <dalek> rakudo/nom: Base tolerance in is_approx on the size of the expected result.

[13:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b0f466fe83

[13:14] <Tene> would also be good to mention where to get NativeCall in the post. :)

[13:15] *** kaleem left
[13:15] *** bkolera left
[13:17] <moritz> tadzik: ^^ can you add that?

[13:17] <Tene> would also be nice to get a line number on the dispatch failure error

[13:17] <Tene> looks like zavolaj has problems building for me...

[13:18] <moritz> (line numbers) agreed

[13:18] <donri> yay it works!

[13:18] <donri> also had to change libtag_c.so to .so.0

[13:18] <tadzik> moritz: in a second, second being ~hour

[13:19] <moritz> tadzik: great

[13:19] <tadzik> have to fix a few christmas things now

[13:19] <Tene> oh, was trying to build with old perl6

[13:19] <donri> does that suggest hardcoding lib like that is bad for portability?

[13:19] <moritz> donri: what Debian does is referencing the .so file, and create symlinks if there's none yet

[13:19] <donri> apparently fedora does not

[13:20] <moritz> I think that's sane-ish

[13:20] <Tene> donri: libtag_c.so is apparently in taglib-devel

[13:20] <Tene> dunno why

[13:20] <donri> ah, heh

[13:21] *** koban joined
[13:22] <dalek> rakudo/nom: 98040f5 | moritz++ | docs/ (2 files):

[13:22] <dalek> rakudo/nom: preliminary release annoucement

[13:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/98040f5b6f

[13:23] *** bluescreen10 joined
[13:27] <dalek> nqp: 38d9792 | moritz++ | docs/release_guide.pod:

[13:27] <dalek> nqp: add a step to release guide: bump VERSION

[13:27] <dalek> nqp: review: https://github.com/perl6/nqp/commit/38d9792941

[13:29] *** bacek left
[13:29] *** hundskatt left
[13:30] *** risou_awy is now known as risou

[13:32] <moritz> eeks

[13:32] <moritz> I accidentally wrote 2012.12

[13:33] <moritz> instead of 2011.12

[13:33] <[Coke]> flussence: any luck on subtracting out skips?

[13:33] <moritz> how can I delete a tag on github?

[13:33] *** kaleem joined
[13:33] <[Coke]> I think you have to force it.

[13:33] <[Coke]> but IANAGE.

[13:34] <moritz> for the record:

[13:34] <moritz> git tag -d 2012.12

[13:34] <moritz> git push origin :refs/tags/2012.12

[13:35] <moritz> user friendly, if you know *exactly* how git implements tags, and understand remotes very well... :/

[13:35] <colomon> [Coke]: there's a slew of todo's that need to be removed for niecza.  any chance we can do it automatically?  ;)

[13:36] <moritz> autounfudge has an --untodo option, iirc

[13:37] <masak> that colon syntax for deletions always trips me up.

[13:38] <[Coke]> colomon: sure, I can run the autostuff.

[13:38] <[Coke]> colomon: can you suggest a test file that is showing passing todos at the moment?

[13:39] *** cosimo left
[13:41] *** fridim_ left
[13:41] <colomon> [Coke]: t/spec/S02-types/num.t

[13:42] <colomon> I show seven other files with todo passing

[13:42] <colomon> too

[13:43] <[Coke]> yup, that has hits when I run it with the right options. will do the whole suite and (test it and) apply.

[13:45] <[Coke]> this from str'ing rats as fractions?

[13:45] *** cognominal left
[13:45] <dalek> nqp: f7ef779 | moritz++ | VERSION:

[13:45] <dalek> nqp: bump VERSION

[13:45] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f7ef779321

[13:47] <[Coke]> moritz++ #autounfudge, again.

[13:49] <dalek> rakudo/nom: 2746edb | moritz++ | docs/announce/2011.12:

[13:49] <dalek> rakudo/nom: fix typo, wollmers++

[13:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2746edbd05

[13:50] <colomon> [Coke]: yes

[13:53] <[Coke]> also catching some skips that can be relaxed to TODOs.

[13:54] *** cognominal joined
[13:54] <[Coke]> (though some of those have sorear comments about how the test is wrong. need a standard bit of text for that so we know not to unskip those.

[13:58] *** molaf joined
[14:00] <[Coke]> ARGH, killed the autounfudge run before it was complete.

[14:01] *** mkramer left
[14:03] <[Coke]> rerunning.

[14:06] <dalek> rakudo/nom: 6564a05 | moritz++ | tools/build/NQP_REVISION:

[14:06] <dalek> rakudo/nom: bump to NQP 2011.12

[14:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6564a0508e

[14:10] <moritz> evalbot rebuild nom

[14:10] <p6eval> OK (started asynchronously)

[14:11] <flussence> g'morning/afternoon/*

[14:11] <[Coke]> evalbot rebuild mom

[14:11] <p6eval> OK (started asynchronously)

[14:11] <[Coke]> evalbot rebuild atlantis

[14:11] <p6eval> OK (started asynchronously)

[14:11] <[Coke]> hee.

[14:11] <flussence> [Coke]: I'll have a look at the skips later today

[14:11] <masak> flussence: ÊÇ®Â•Ω

[14:12] <masak> evalbot rebuild your understanding of the universe as we know it, based on recent findings

[14:12] <p6eval> OK (started asynchronously)

[14:12] <[Coke]> flussence++ # doing work so I don't have to! ;)

[14:12] <flussence> masak: I don't know mandarin, but I can probably guess that one :)

[14:13] <moritz> I'm pretty sure it failed to rebuild atlantis :-)

[14:13] <colomon> moritz: have you checked all the oceans to make sure?  ;)

[14:13] <Util> moritz: announce/2011.12 - s/hackahton/hackathon/; s/(?<=YAPC::NA)/::2010/;

[14:14] <masak> flussence: GT suggests "nin2 hao3" (polite form) rather than "ni3 hao3"

[14:15] <masak> Util: wow, you're actually using Perl 5 lookbehind syntax. I am impressed. :)

[14:16] <dalek> rakudo/nom: 7a19259 | moritz++ | docs/announce/2011.12:

[14:16] <dalek> rakudo/nom: [announce] small fixes by Util++

[14:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7a19259856

[14:16] *** koban left
[14:16] <Util> :)

[14:17] *** wtw left
[14:22] *** GlitchMr left
[14:22] *** xjiujiu left
[14:24] *** pkkm_ left
[14:26] *** pkkm_ joined
[14:26] <[Coke]> sorear: if you have a test skipped with something like "questionable test"... is it ok to switch that to a TODO if it still parses?

[14:28] <masak> ok, neither the spec for .split in S32, nor the one for .comb, even *mention* the intended semantics of their $limit parameters. it's as if the semantics were obvious (which they are not), or equivalent to Perl 5 (which they aren't in any current implementation)

[14:28] <masak> suggest (1) axing .comb's $limit, and (2) changing the behavior of .split's $limit to that of Perl 5.

[14:29] *** agentzh left
[14:29] <moritz> how does the behavior of (postivive) :limit for split differ fro p5?

[14:29] <colomon> and why have a limit on split but not comb?

[14:29] <masak> moritz: see http://irclog.perlgeek.de/perl6/2011-12-22#i_4864857

[14:30] <moritz> nom: say 'abcd'.split('', 2).perl

[14:30] <p6eval> nom 7a1925: OUTPUT¬´("a", "bcd").list‚ê§¬ª

[14:30] <masak> o.O

[14:30] <moritz> that looks right to me

[14:31] <moritz> note that splits behavior wrt zero-width chunks has changed

[14:31] *** cognominal left
[14:31] <moritz> not limit

[14:31] <moritz> afaict

[14:31] <masak> nom: say 'abcd'.split(/<?>/, 2).perl

[14:31] <p6eval> nom 7a1925: OUTPUT¬´("", "abcd").list‚ê§¬ª

[14:31] <masak> nom: say 'abcd'.split(/<?>/, 3).perl

[14:31] <p6eval> nom 7a1925: OUTPUT¬´("", "a", "bcd").list‚ê§¬ª

[14:31] <masak> uh, ok.

[14:31] <masak> I can live with that.

[14:31] <moritz> and that's *exactly* like perl 5, except that perl 5 strips the first ''

[14:31] <masak> nod

[14:31] <moritz> nom: say 'abcd'.comb(/./, 2).perl

[14:31] <p6eval> nom 7a1925: OUTPUT¬´("a", "b").list‚ê§¬ª

[14:32] <moritz> and that seems sensible to me too

[14:32] <masak> colomon: .split has this behavior where it goes "ok, leave the rest as it is, un-split". .comb doesn't.

[14:32] <masak> colomon: what $limit in .comb does, I could equally well do with .[^$limit]

[14:33] <masak> it's like this "bonus feature" that effectively adds nothing.

[14:33] <[Coke]> colomon: huh. looks like more than just the rat stuff is working now. sorear++ colomon++

[14:33] <[Coke]> masak: symmetry?

[14:33] <colomon> [Coke]: what in particular?

[14:33] <colomon> nom: my @a = 1, 2, 3; say @a[^6].perl

[14:33] <p6eval> nom 7a1925: OUTPUT¬´(1, 2, 3, Any, Any, Any)‚ê§¬ª

[14:34] <colomon> I'd say that's not equally well to $limit.  ;)

[14:34] <masak> [Coke]: but the symmetry here doesn't exist! the behaviors are different.

[14:35] <[Coke]> colomon: e.g. some skips in t/spec/S05-match/positions.t

[14:35] <colomon> [Coke]: hmmm... not sure what would have fixed that.

[14:42] *** cosimo joined
[14:47] <[Coke]> colomon: running a full unskip/untodo of niecza on feather took real    44m0.878s

[14:47] <colomon> [Coke]++

[14:49] *** baest left
[14:50] *** pmurias left
[14:51] <[Coke]> doing a spectest now to make sure no surprises.

[14:52] <dalek> roast: 0fcb566 | (Solomon Foster)++ | S06-advanced/return.t:

[14:52] <dalek> roast: Fudge for niecza.

[14:52] <dalek> roast: review: https://github.com/perl6/roast/commit/0fcb5667da

[14:52] <[Coke]> colomon: caught a lot of skips "string math NYI" that now pass.

[14:53] <colomon> [Coke]: yeah, I'm not sure when sorear++ snuck that one by me.

[14:55] *** hundskatt joined
[14:55] * [Coke] ponders getting a faster home machine for this work.

[14:58] <moritz> niecza: say qx/echo foo/

[14:58] <p6eval> niecza v12-110-g0efe17a: OUTPUT¬´Unhandled exception: Run NYI‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 891 (die @ 2) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 2068 (rungather @ 2) ‚ê§  at /tmp/e8CiJ8mGPc line 1 (mainline @ 1) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 2290‚Ä¶

[15:01] <dalek> niecza: da709b1 | (Solomon Foster)++ | t/spectest.data:

[15:01] <dalek> niecza: Turn on S06-advanced/return.t.

[15:01] <dalek> niecza: review: https://github.com/sorear/niecza/commit/da709b10ed

[15:02] *** IngisKahn left
[15:08] <moritz> wow, it seems that nom's Failure doesn't expose the underlying exception, except by re-throwing it :/

[15:09] <masak> that's... a regression.

[15:10] <masak> b: sub foo { fail "ooh!" }; say foo().exception.payload

[15:10] <[Coke]> huh. autounfudge caught a lot of stuff, but there are still a ton of passing TODOs.

[15:10] <p6eval> b 1b7dd1: OUTPUT¬´ooh!‚ê§¬ª

[15:10] <moritz> aye, I'm going to chain that

[15:10] <masak> nom: sub foo { fail "ooh!" }; say foo().exception.payload

[15:10] <p6eval> nom 7a1925: OUTPUT¬´ooh!‚ê§  in method <anon> at src/gen/CORE.setting:6930‚ê§  in <anon> at src/gen/Metamodel.pm:2177‚ê§  in find_method_fallback at src/gen/Metamodel.pm:2175‚ê§  in find_method at src/gen/Metamodel.pm:799‚ê§  in block <anon> at /tmp/N1Y51CNFjx:1‚ê§  in <anon> at /tmp/N1Y51CNFjx:1‚ê§¬ª‚Ä¶

[15:10] * masak submits rakudobug

[15:10] <[Coke]> I wonder if you cannot use --untodo and --unskip at the same time.

[15:11] <moritz> masak: would be .exception.Str on nom

[15:11] <moritz> and will be

[15:12] <[Coke]> ah, some of these, at least, were todos of blocks where one thing in the block is now passing.

[15:12] <dalek> rakudo/nom: 49ce722 | moritz++ | src/core/Failure.pm:

[15:12] <dalek> rakudo/nom: make the exception object available from Failure

[15:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/49ce722dcc

[15:12] <moritz> autounfudge isn't clever enough to handle such stuff

[15:12] <moritz> and it will never be, I think

[15:12] <masak> nom: sub foo { fail "ooh!" }; say foo().exception.Str

[15:12] <p6eval> nom 7a1925: OUTPUT¬´ooh!‚ê§  in method <anon> at src/gen/CORE.setting:6930‚ê§  in <anon> at src/gen/Metamodel.pm:2177‚ê§  in find_method_fallback at src/gen/Metamodel.pm:2175‚ê§  in find_method at src/gen/Metamodel.pm:799‚ê§  in block <anon> at /tmp/hcPdcdg3sr:1‚ê§  in <anon> at /tmp/hcPdcdg3sr:1‚ê§¬ª‚Ä¶

[15:12] <moritz> masak: will be, not is :-)

[15:13] <moritz> erm, after rebuild

[15:13] <[Coke]> niecza; say 1.01.WHAT

[15:13] <moritz> evalbot rebuild nom

[15:13] <p6eval> OK (started asynchronously)

[15:13] <[Coke]> niecza: say 1.01.WHAT

[15:13] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´Rat()‚ê§¬ª

[15:13] <[Coke]> moritz: yah, those are hard.

[15:13] <[Coke]> niecza: say 1.01.Int.WHAT

[15:13] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´Int()‚ê§¬ª

[15:14] <[Coke]> isa_ok($a.Int, "Int"); ... shouldn't that last Int havea no quotes?

[15:14] <moritz> correct

[15:14] <moritz> a fossil

[15:14] * [Coke] fixes S02-types/num.t

[15:17] * masak gets a Korean "out of office" email after submitting that rakudobug

[15:17] * moritz too

[15:18] <masak> is it worth ejecting that guy from the p6c list?

[15:18] * masak whistles "Ïù∏Î≤îÏßÑ is out of office, and he doesn't mind telling the world"

[15:19] <moritz> only if he continues to send those mails

[15:19] <masak> ah, so a once-per-RT-submitter offender is OK, but if he does it twice or more, that's where we draw the line?

[15:21] <moritz> erm, I'd say "once is ok"

[15:22] <masak> he already did it twice, once for you and once for me.

[15:22] <moritz> oh

[15:22] <moritz> then I'd say ejecting is the way to go

[15:22] <masak> or... oh, did he email to bugs-followup?

[15:22] <masak> then maybe he'll be silent now.

[15:22] <dalek> roast: 23817f0 | moritz++ | S04-exceptions/fail.t:

[15:22] <dalek> roast: test Failure.exception

[15:22] <dalek> roast: review: https://github.com/perl6/roast/commit/23817f00bb

[15:22] <masak> let's wait and see if he writes back :)

[15:23] <moritz> masak: yes, he sent to the mailing list

[15:23] <masak> today's autopun spotting on Twitter: "According to a study by the Office of Incomplete Information, 8 out of every 10."

[15:23] * [Coke] wonders if we should be checking error messages for words.

[15:24] <[Coke]> e.g. ok $error ~~ / '%h' /,   '... error message mentions parameter';

[15:24] <[Coke]> er, bad example. 'type' was another one.

[15:24] <moritz> masak: ok, I just got a second one for my reply to your bug mail

[15:25] <moritz> [Coke]: no, it should really check the type of the exception, which is NYI

[15:25] <moritz> [Coke]: see  t/spec/S32-exceptions/misc.t  for my vision of how that stuff should turn out to be

[15:25] <masak> moritz: ok, how does one eject a Ïù∏Î≤îÏßÑ from the RT list?

[15:26] <moritz> masak: emailing the list admins, I'd suppose

[15:26] * masak does that

[15:27] <[Coke]> moritz: see ... t/spec/S06-signature/errors.t for more dubious tests, then.

[15:27] <[Coke]> niecza: enum Color <red blue green>; say Color.pick(2);

[15:27] <moritz> [Coke]: I know, I know...

[15:27] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´Color()‚ê§¬ª

[15:28] <[Coke]> niecza: enum Color <red blue green>; say Color.pick(2).perl;

[15:28] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´(Color, ).list‚ê§¬ª

[15:28] <[Coke]> niecza: enum Color <red blue green>; say Color.pick(*).perl;

[15:28] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´(Color, ).list‚ê§¬ª

[15:29] <masak> anti-auto-out-of-office-emails email sent.

[15:29] <moritz> perl6: enum Color <red blue green>; say Color.enums.pick(2);

[15:29] <p6eval> rakudo 49ce72: OUTPUT¬´green     2 red   0‚ê§¬ª

[15:29] <p6eval> ..niecza v12-111-gda709b1: OUTPUT¬´red     0 blue  1‚ê§¬ª

[15:29] <p6eval> ..pugs b927740: OUTPUT¬´*** No such subroutine: "&enum"‚ê§    at /tmp/JLO_gDKqfq line 1, column 1-28‚ê§¬ª

[15:29] <[Coke]> niecza: say 1.015 ** 200

[15:29] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´NaN‚ê§¬ª

[15:29] <masak> but Color.pick(2) should work too, right?

[15:30] <masak> it has such a nice ring to it...

[15:30] <moritz> not sure it's specced to

[15:30] <moritz> but I'd support it :-)

[15:30] <moritz> nom: enum C <a b>; say C.HOW

[15:30] <p6eval> nom 49ce72: OUTPUT¬´Method 'gist' not found for invocant of class 'Perl6::Metamodel::EnumHOW'‚ê§  in sub say at src/gen/CORE.setting:5649‚ê§  in block <anon> at /tmp/I2ocauzswp:1‚ê§  in <anon> at /tmp/I2ocauzswp:1‚ê§¬ª

[15:32] <sorear> good * #perl6

[15:32] <sorear> o/ MÏ±Ñsak

[15:32] <masak> sorear! \o/

[15:32] <masak> sorear: I'm not Korean, I just boot Koreans. :P

[15:34] <masak> moritz: it's spec'd. S12 describes .pick and has examples like CoinFace.pick

[15:34] * [Coke] re-runs the spectest to make sure he caught everything.

[15:35] <[Coke]> everytime someone asks "is that spec'd" and they get an answer, they need to update the test file to reflect the spec location! .;)

[15:38] <masak> S12:2116, fwiw.

[15:40] <sorear> [Coke]: Only if it also runs in a finite length of time.

[15:41] *** gfldex left
[15:43] *** gfldex joined
[15:43] <dalek> roast: 4401e31 | coke++ | S02-types/num.t:

[15:43] <dalek> roast: Fix type test fossil

[15:43] <dalek> roast: review: https://github.com/perl6/roast/commit/4401e31966

[15:43] <dalek> roast: 5f0bdab | coke++ | / (47 files):

[15:43] <dalek> roast: niecza unfudge

[15:43] <dalek> roast: 

[15:43] <dalek> roast: moritz++ # many of these from autounfudge

[15:43] <dalek> roast: review: https://github.com/perl6/roast/commit/5f0bdabff3

[15:43] <sorear> niecza: say 1.015e0 ** 200 # just checking

[15:43] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´19.643028639475052‚ê§¬ª

[15:43] <sorear> EOBACKLOG

[15:44] <moritz> rakudo: say 1.015e0 ** 200

[15:44] <p6eval> rakudo 49ce72: OUTPUT¬´19.6430286394751‚ê§¬ª

[15:44] *** mj41 left
[15:45] <moritz> rakudo: say 1.015 ** 200

[15:45] <p6eval> rakudo 49ce72: OUTPUT¬´NaN‚ê§¬ª

[15:45] <[Coke]> colomon, sorear: there you go.

[15:45] <[Coke]> (lots of skips to todos instead, lots of now passing tests (skips & todos both). I tried not to unskip tests that were skipped for philosophical reasons (e.g. "bad test"), but some may have slipped through.

[15:46] <[Coke]> moritz: interesting, since I'm not sure you're skipping that test.

[15:47] <[Coke]> ah, you are todoing it.

[15:47] <[Coke]> S32-num/power.t

[15:47] *** MayDaniel joined
[15:48] <[Coke]> also interesting that the test before that is making sure that the result isn't a NaN, and that's passing.

[15:59] <colomon> [Coke]++

[16:00] *** flussence left
[16:00] <sorear> generally, I'm fine with unfudging a test that passes, even if I disagree with the test

[16:00] <moritz> ¬µ¬µ¬µ¬µ¬µ¬µ¬µ¬µ¬µmm              hkk4~

[16:00] *** flussence joined
[16:02] <sorear> probably clearer to say 10^-30 m or 10^-6 ym

[16:02] <masak> hi, Ronja.

[16:04] <moritz> Ronja says "bwah bwah bwah", if I understood her correctly :-)

[16:05] <colomon> Henry is insisting I play the webgl x-wing demo, because he likes watching me blow up.

[16:05] *** MayDaniel left
[16:06] <moritz> :-)

[16:07] <colomon> I got him too wound up a minute ago, he jumped off the sofa right onto my stomach.

[16:07] <[Coke]> sorear: good to know. Thanks.

[16:10] <sorear> Where are the good tests for Str->number conversion?  (colomon, etc)

[16:10] <moritz> S32-str/numeric.t IIRC

[16:10] <colomon> I dunno about good tests.

[16:10] <colomon> the trig tests make sure it works for them.

[16:11] <colomon> oh, yeah, looks like S32-str/numeric.t has lots of juicy Str->number tests.  moritz++

[16:12] *** hundskatt left
[16:13] <colomon> On further observation, probably should have quite a few additional tests, too.

[16:13] <colomon> like bigints

[16:13] <moritz> ah right, that's from the time before rakudo did bigints, so they interested me a bit less at that time

[16:18] <sorear> hrm, S32-str/numeric.t expects that +"foo" returns undefined

[16:19] *** daxim left
[16:20] * sorear thinks it would be much saner to throw

[16:21] * masak decommutes

[16:22] <sorear> .oO( * masak anticommutes )

[16:24] *** thou joined
[16:24] * moritz somtimes antidecommutes :-)

[16:24] * [Coke] urks as his daily rakudo build pulls in a new bird.

[16:25] <moritz> a free (as in, released) bird :-)

[16:26] *** daxim joined
[16:27] <[Coke]> niecza++

[16:27] <sorear> what?  for not pulling in birds?

[16:30] <[Coke]> it's generally faster. less painful when doing things that require hitting roast, or changing the setting.

[16:31] <sorear> don't forget it's running half as many tests and has half as much in the setting :)

[16:33] <colomon> probably 2/3rds the tests these days.  :)

[16:33] <[Coke]> I look forward to getting closer to 100% of spectest coverage to see how they both fare.

[16:33] <[Coke]> We're at least at 60%, will know for sure in about an hour. ;)

[16:33] *** kaleem left
[16:34] *** flussence_ joined
[16:34] *** flussence left
[16:35] <sorear> niecza: say 3**64

[16:35] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´3433683820292512484657849089281‚ê§¬ª

[16:36] <sorear> niecza: say sprintf "%x", 3**64

[16:36] <colomon> [Coke]: 60% passing tests -- I'm guessing it's 2/3rds tests executed.  maybe that's high, though

[16:36] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´0‚ê§¬ª

[16:36] <sorear> I do not think that is right

[16:36] <[Coke]> niecza: say 1.2**200, 1.11**200

[16:36] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´6858816903929052NaN‚ê§¬ª

[16:37] <sorear> [Coke]: it's a denominator issue

[16:37] <sorear> 1.11**200 # both the numerator and den. overflow Num, so the system calculates Inf / Inf

[16:37] <colomon> 0 is approximately 3433683820292512484657849089281, right?  ;)

[16:37] <sorear> I'll fix this later somehow

[16:38] <sorear> colomon: I guess, if we're talking error in calculating distance to the Moon in Planck lengths

[16:41] *** gfldex left
[16:42] *** gfldex joined
[16:44] <sorear> ... ... S02-literals/radix.t line 190k

[16:44] <sorear> 190

[16:45] <moritz> which reminds me, at our Max Planck institute we jokingly talked about getting an institute dog, and we'd call him "Planck". Then talking about "Planck lengths" would be much easier to visualize :-)

[16:47] * sorear wonders :16("ffi") == 255i ?

[16:47] <moritz> no

[16:48] <moritz> that would break horribly for :36(...)

[16:48] *** kaleem joined
[16:48] <sorear> my understanding was that :16($x) is just like +$x with a different default base

[16:49] <sorear> and for $x ~~ Str :10($x) was exactly the same as +$x

[16:49] *** envi_ left
[16:49] *** alester joined
[16:49] *** kaare_ joined
[16:50] *** arlinius left
[16:50] <sorear> are you saying that :BASE($str) should not parse complex syntax, even if the base is low enough for it to be unambiguous?

[16:50] <sorear> or are you saying that if BASE > 10, a backslash is required?

[16:50] * [Coke] is still trying to figure out why we /have/ complex syntax. ;)

[16:51] <moritz> sorear: I don't think radix notation and complex numbers mix at all

[16:51] <flussence_> I'd prefer it not to do that, just to avoid a repeat of p5's \$int syntax in regexes

[16:51] <[Coke]> I would tend to prefer "should not", rather than "where possible".

[16:51] <moritz> I mean, you can still write :16(..)\i if you reallz feel like

[16:52] *** hundskatt joined
[16:53] <sorear> moritz: mm.  What syntactic forms would you like to see :base() parse?

[16:53] <flussence_> .oO( /me wonders if the poor smolder.parrot.org server can cope with me uploading TAP files for every single rakudo commit )

[16:54] <sorear> moritz: the same ones :base<> parses?

[16:57] <moritz> sorear: erm, I think so (but I'm a bit distracted atm)

[16:58] <[Coke]> flussence_: I assure you it cannot.

[16:58] <[Coke]> you will choke the server and force admins to clean up after it.

[16:59] <[Coke]> If you save them, I'll try to make sure muddle can handle it, though.

[16:59] <flussence_> I don't mean all at once, but I've been doing it for a few months now :)

[16:59] <[Coke]> flussence_: and the old ones are probably timing out.

[16:59] <[Coke]> it's mean to only show the latest, not all.

[16:59] <[Coke]> *meant

[17:00] <[Coke]> s/timing/aging/

[17:01] <flussence_> oh, I was just worried I'd inadvertently cause it to run out of disk space at some point like feather3 does every now and then :)

[17:04] <[Coke]> https://gist.github.com/1476841 - niecza now at 62.34%

[17:04] <[Coke]> flussence_: you will.

[17:04] <[Coke]> (except it eats more inodes than disk space.)

[17:05] *** snearch joined
[17:08] *** cooper joined
[17:08] *** Radvendii joined
[17:09] <sorear> o/ Radvendii

[17:09] <Radvendii> hey

[17:09] <Radvendii> question: why is rakudo already on 2011.11 whereas rakudo star is only on 2011.07?

[17:09] <flussence_> one of star's prerequisites is a working ecosystem

[17:09] <sorear> because Rakudo is released monthly

[17:10] <sorear> and Star is released sporadically

[17:10] <flussence_> haven't had that for a while

[17:10] <Radvendii> oh...

[17:10] <Radvendii> does rakudo come with panda? or only rakudo star (not that it really matters, since panda with rakudo star isn't working...)

[17:10] * [Coke] wonders if we're close to a new star release.

[17:11] <[Coke]> the rakudo compiler is standalone.

[17:11] <sorear> [Coke]: afaik yes

[17:11] <[Coke]> so, no panda.

[17:11] * [Coke] more correctly wonders HOW close we are. ;)

[17:15] *** hundskatt left
[17:15] <colomon> panda works with the current rakudo (nom), so far as I know

[17:15] <Radvendii> so i download rakudo 2011.11 then i download panda?

[17:16] *** snearch left
[17:17] <slavik1> sorear: regarding your message yesterday, I was looking for a no match :)

[17:17] *** hundskatt joined
[17:22] <colomon> Radvendii: it's possible you need the latest version from git, I don't know. 2011.11 will be obsolete sometime in the next 24 hours....

[17:23] <Radvendii> ugh

[17:23] <moritz> next 2 hours, more likely

[17:23] <Radvendii> i guess i'll wait then...

[17:23] <dalek> rakudo/nom: 6bbced6 | moritz++ | VERSION:

[17:23] <dalek> rakudo/nom: [release] bump VERSION

[17:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6bbced654d

[17:24] *** wolfman2000 left
[17:25] <Radvendii> cd ..

[17:25] <Radvendii> haha

[17:25] <Radvendii> wrong tab

[17:25] <moritz> http://moritz.faui2k3.org/tmp/rakudo-2011.12.tar.gz # please test

[17:28] <Radvendii> installing now.

[17:29] <bbkr1> \o/

[17:32] <moritz> \o bbkr1 

[17:32] <flussence_> Wow. I just noticed the relative timestamps on github update in realtime

[17:38] <Radvendii> i forgot to sudo perl Configure.pl. ugh

[17:39] <moritz> why would you ever run Configure.pl as sudo?

[17:39] <Radvendii> because it didn't have permissions to put it in /local/bin/

[17:39] <Radvendii> which is where i want to put it...

[17:40] <moritz> well, there are three (partially) sane solutions for that

[17:40] <moritz> 1) change the permissions of /local/bin/ (or better /usr/local/bin)

[17:41] <moritz> 2) build it somewhere else, and then in the end just put symlinks into the /local/bin

[17:41] <moritz> 3) build and install parrot separately into /local/bin (that way only the "make install" steps from parrot, nqp and rakudo need sudo)

[17:41] <moritz> build the whole project with sudo is risky

[17:42] <Radvendii> oh

[17:42] <Radvendii> okay

[17:42] <Radvendii> ill just use /usr/local/bin/. i didnt know that was an option...

[17:43] <moritz> you still need to adjust the permissions if you want to install to it without sudo

[17:43] <Radvendii> should i set --prefix equal to  /usr/local/bin/ or --parrot-options'--prefix'?

[17:43] <Radvendii> or both?

[17:45] <slavik1> moritz: between rakudo and niecza, which would you recommend?

[17:45] <moritz> jsut --prefix

[17:45] <moritz> slavik1: both

[17:45] <slavik1> :(

[17:45] <Radvendii> what..?

[17:45] <slavik1> moritz: are there non-overlapping feature sets?

[17:45] <moritz> *just --prefix

[17:45] <Radvendii> okay

[17:46] <moritz> slavik1: yes. See http://perl6.org/compilers/features

[17:46] <slavik1> thanks

[17:46] <slavik1> was about to search for that

[17:47] <Radvendii> this is what i get: error: cannot open .git/FETCH_HEAD: Permission denied

[17:48] <moritz> Radvendii: exactly what it says. It can't open that file, permission denied

[17:48] <moritz> Radvendii: probably because your previous use of 'sudo' left some files to be owned as root

[17:48] <moritz> Radvendii: and now your ordinary user doesn't have permissions to change them anymore

[17:48] <Radvendii> oh

[17:48] <moritz> another reason not to use sudo for the build process

[17:48] <Radvendii> how do i fix that, besides going in and changing them all back?

[17:49] <Radvendii> i could do repair permissions...

[17:49] <masak> thinking about what to advent-blog about tonight.

[17:49] <flussence_> `find . -exec sudo chown user: \{} +` should fix that

[17:49] <masak> first I thought about giving operator overloading a re-visit -- Niecza is a bit ahead of Rakudo there, and supports precedence declarations. might be fun to write about.

[17:50] <slavik1> moritz: http://rosettacode.org/wiki/Read_a_configuration_file#Perl_6 OMG!!!!

[17:50] <slavik1> die "Parse failed at $0"

[17:50] <slavik1> I love that!!!!

[17:50] <masak> mathw++ wrote about operator overloading back in 2009.

[17:50] <masak> my alternative proposal is to write something about crypt, a moderately large game in Perl 6.

[17:51] <masak> suggestions? now's your chance to influence tonight's advent blog post!

[17:51] <moritz> masak: you could still write about operator precdence, and demonstrate is equiv, is tigther etc.

[17:51] <moritz> (which niecza now implements)

[17:51] <slavik1> in perl6, is take like 'yield' in python?

[17:52] <moritz> kinda, yes

[17:52] <slavik1> cool

[17:52] <masak> moritz: yes, that was my plan (as I wrote above) :)

[17:52] <mikemol> moritz: sec

[17:52] <moritz> masak: oh, I didn't backlog enough

[17:52] <mikemol> I wonder what http://rosettacode.org/wiki/RCRPG would look like with the game implemented as munging Perl's syntax and parsing.

[17:53] <mikemol> It'd require repl on top of that, obviously.

[17:54] <slavik1> sub multisplit($str, @seps) { $str.split(/ ||@seps /, :all) }

[17:54] <slavik1> my @chunks = multisplit( 'a!===b=!=c==d', < == != = > );

[17:54] <slavik1> is @seps slurpy?

[17:54] <sorear> no

[17:55] <mikemol> the task doesn't specify a syntax, just a basic set of items, actions and goals.

[17:55] <moritz> sub multisplit($str, *@seps) { ... } would make it slurpy

[17:55] <slavik1> sorear, is space being interpreted as a , ?

[17:56] <sorear> slavik1: within <>, yes

[17:56] <sorear> <a b c> means ('a','b','c')

[17:56] <sorear> it's always treated as one argument

[17:58] *** dakkar left
[17:59] <slavik1> sorear: I see, thanks

[18:03] *** cooper left
[18:04] <sorear> moritz: treating :16($x) like :16<> isn't enough because :16<> doesn't have logic to handle 0o777, etc

[18:07] <colomon> is it supposed to?

[18:08] <colomon> oh, geez, I see the spectest

[18:08] <sorear> S02:3362

[18:08] <sorear> "Think of these as setting the default radix"

[18:08] <Radvendii> yikes! i repaired disk permissions and it's still giving me an error that i dont have permissions for .git/FETCH_HEAD

[18:09] <sorear> Radvendii: sudo rm -rf and start again correctly

[18:09] <sorear> you'll save yourself time

[18:09] <Radvendii> okay

[18:09] *** gfldex left
[18:10] <colomon> sorear: gack

[18:11] *** gfldex joined
[18:11] <Radvendii> were is 2011.12 again?

[18:12] *** drbean left
[18:14] <Radvendii> never mind, i found it

[18:16] <Radvendii> yay :D it's working

[18:16] <Radvendii> not to self: no sudo for builds

[18:17] <Radvendii> note*

[18:18] *** risou is now known as risou_awy

[18:18] *** drbean joined
[18:19] <dalek> rakudo/nom: dfd1d7a | moritz++ | docs/release_guide.pod:

[18:19] <dalek> rakudo/nom: update release guide

[18:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dfd1d7ac62

[18:25] *** cooper joined
[18:25] <moritz> tags pushed, release done

[18:25] <colomon> \o/

[18:26] <Radvendii> mkdir /usr/local/share/doc/parrot: Permission denied at lib/Parrot/Install.pm line 183

[18:26] <moritz> announcement sent, tarball uploaded

[18:26] <Radvendii> i have permissions to /usr/local/...

[18:26] <Radvendii> do i need to add permissions to /usr/local/share and /usr/local/share/doc as well/

[18:26] <moritz> maybe

[18:26] <moritz> if the directories already exist

[18:27] <Radvendii> ugh

[18:27] <Radvendii> alright

[18:27] *** mkramer joined
[18:27] <Radvendii> why *wouldn't* i have permissions to that stuff, by default?

[18:28] <mux> because mkdir doesn't create a directory hierarchy

[18:28] <mux> maybe?

[18:28] <moritz> Radvendii: the default in /usr/local/ is to only give root permissions

[18:29] <moritz> Radvendii: if a subdirectory already existed, and you changed the permissions of /usr/local, the sub directory is not affected

[18:29] *** mkramer left
[18:29] <Radvendii> but it's safe to change it?

[18:29] <moritz> Radvendii: but if you create a subdirectory yourself, it is usually created with permissions that allow you to write to it

[18:30] <Radvendii> is it safe to change the permissions of /usr/local/?

[18:30] <moritz> well, that greatly depends on your setup, how many people use your computer etc.

[18:30] <Radvendii> just me

[18:30] *** cooper left
[18:31] <moritz> then it's mostly safe

[18:31] <sorear> Radvendii: /usr/local is by convention entirely under the control of the sysadmin

[18:31] <moritz> but you should really read up on basics of unix permission and safety issues

[18:31] <moritz> I can't explain everything on IRC here

[18:31] *** daxim left
[18:32] <Radvendii> okay

[18:32] *** [particle]1 left
[18:33] *** mj41 joined
[18:33] <Radvendii> thanks.

[18:34] *** cognominal joined
[18:35] <sorear> yow!

[18:35] <sorear> <numeric> from STD is generating a lexer with 1045 states

[18:36] <moritz> perl 6 -- insanity done right! (or not?)

[18:38] <sorear> insanity done right AND not.

[18:39] <[Coke]> niecza: say True & False;

[18:39] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´all(Bool::True, Bool::False)‚ê§¬ª

[18:39] <[Coke]> (ok, that's still pretty cool.)

[18:40] <mux> moritz: hah, that's an awesome slogan :-)

[18:40] <moritz> :-)

[18:41] * [Coke] looks forward to his 11 day holiday/vacation/burn unused time before he loses it.

[18:44] <dalek> roast: 9324595 | cedric-vincent++ | S02-lexical-conventions/unicode.t:

[18:44] <dalek> roast: Fix the gender of a French "variable" :)

[18:44] <dalek> roast: review: https://github.com/perl6/roast/commit/9324595626

[18:44] <dalek> roast: b353dfd | moritz++ | S02-lexical-conventions/unicode.t:

[18:44] <dalek> roast: Merge pull request #10 from cedric-vincent/patch-1

[18:44] <dalek> roast: 

[18:44] <dalek> roast: Fix the gender of a French "variable" :)

[18:44] <dalek> roast: review: https://github.com/perl6/roast/commit/b353dfd74b

[18:46] *** cooper joined
[18:46] *** cooper left
[18:46] *** cooper joined
[18:47] *** snearch joined
[18:47] <tadzik> good evening

[18:47] <sorear> o/ tadzik

[18:48] *** mj41 left
[18:50] <masak> tadzik! \o/

[18:50] <tadzik> \o/

[18:50] <tadzik> shopping is madness

[18:51] *** Chillance joined
[18:52] <Radvendii> lllag

[18:55] <[Coke]> tadzik: MADNESS? THIS! IS! CHRISTMAS!

[18:56] *** mj41 joined
[18:56] *** awoodland joined
[18:56] <colomon> heh.  wife just called to say "Do you really want me to get something for dinner?  the stores are insane, and we could always order pizza..."

[18:56] <tadzik> :)

[18:57] <moritz> as long as the pizza shops aren't insane either... :-)

[18:57] <colomon> :)

[18:58] *** Radvendii left
[19:00] <tadzik> masak: how is the advent post coming along?

[19:00] <colomon> I'm a little worried about what we'll be eating in three days, given this philosophy of shopping.... ;)

[19:03] *** am0c left
[19:04] *** stepnem left
[19:05] *** bkolera joined
[19:06] *** stepnem joined
[19:06] <[Coke]> niecza: say exp(Inf)

[19:06] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´Infinity‚ê§¬ª

[19:06] <[Coke]> niecza: say (exp(Inf)).WHAT

[19:06] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´Num()‚ê§¬ª

[19:07] <[Coke]> niecza: say Infinity

[19:07] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Undeclared name:‚ê§       'Infinity' used at line 1‚ê§‚ê§Unhandled exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 880 (die @ 2) ‚ê§  at /home/p6eval/niecza/src/STD.pm6 line 1143 (P6.comp_unit @ 32) ‚ê§  at /ho‚Ä¶

[19:07] <[Coke]> colomon: any idea why that is? Is it a mono Inf and not a niecza Inf?

[19:08] <colomon> Num.Str just prints out the wrong symbol for Infinity.  

[19:08] <colomon> Inf, I mean.  :)

[19:08] <colomon> might be C# sneaking through, I don't know.

[19:08] <colomon> niecza: say Inf

[19:08] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´Infinity‚ê§¬ª

[19:09] * colomon had just shrunk his niecza source window to work on $work....

[19:09] <[Coke]> niecza: say Inf.Int, Inf.Str

[19:09] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´InfinityInfinity‚ê§¬ª

[19:11] <sorear> niecza: say NaN

[19:11] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´NaN‚ê§¬ª

[19:11] *** mj41 left
[19:11] <colomon> sorear: where is the Num -> Str conversion in niecza, anyway?

[19:12] <sorear> CtxNumStr in Kernel.cs

[19:13] <[Coke]> that's at least 2 tests.

[19:14] <dalek> roast: 5a1cbc4 | coke++ | S32-num/exp.t:

[19:14] <dalek> roast: Fix typo in todo msg.

[19:14] <dalek> roast: review: https://github.com/perl6/roast/commit/5a1cbc40eb

[19:14] * sorear looks to see if there's an easy way to tweak the .net Inf formatting

[19:14] <colomon> sorear: are you sure?  my editor claims no such function exists.

[19:15] <sorear> CtxRawNativeNum2Str

[19:15] <sorear> wonder why I broke with the naming convention on that one

[19:17] <[Coke]> so, worst case, add an "isInf()" check there?

[19:17] <[Coke]> (if that were a real function. ;)

[19:17] *** Radvendii joined
[19:18] <Radvendii> just how long is "./perl6 --setting=NULL --optimize..." supposed to take?

[19:18] <sorear> Radvendii: it varies a lot from release to release.  I've seen 5 minutes and 10 hours locally.

[19:19] <Radvendii> oh goodness

[19:21] <Radvendii> will it take longer if i do other stuff in the meantime?

[19:21] <Radvendii> (on my computer, like surf the web)

[19:23] <[Coke]> not apprciably longer, no.

[19:23] <[Coke]> Radvendii: how much memory do you have?

[19:23] <[Coke]> (I think "alloc" will tell you that on OS X)

[19:24] <sorear> [Coke]: I've found a way to override the formatting of Infinity

[19:24] <sorear> but not a way to make the 'E' lowercase

[19:24] <Radvendii> available? 48 gigs

[19:24] <sorear> perl6: say 1e50

[19:24] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´1E+50‚ê§¬ª

[19:24] <p6eval> ..pugs b927740: OUTPUT¬´100000000000000000000000000000000000000000000000000‚ê§¬ª

[19:24] <p6eval> ..rakudo dfd1d7: OUTPUT¬´1e+50‚ê§¬ª

[19:25] <[Coke]> Radvendii: whoa. 48G physical!?

[19:26] <Radvendii> oh

[19:26] <Radvendii> no

[19:26] <Radvendii> hard drive

[19:26] <Radvendii> lol

[19:26] <[Coke]> sorear++

[19:27] <sorear> Radvendii: "memory" means the first row of /usr/bin/free

[19:27] <[Coke]> sorear: tests are in t/spec/S32-num/exp.t if you wish to untodo.

[19:27] <Radvendii> it says no such file or directory

[19:28] <Radvendii> i dont have alloc or free

[19:29] <[Coke]> you can always check in the menu. "about this computer", maybe? Anyway, the big limit has been memory. if you have to start swapping out, it'll take (possibly MUCH) longer.

[19:29] <sorear> maybe /bin/free on some systems

[19:29] <Radvendii> but under "about htis mac" it says Memory: 2 GB 1067 MHz DDR3

[19:29] <[Coke]> if you have 2G of physical memory, you'll have very little issue.

[19:29] <sorear> ah

[19:29] <[Coke]> perfecto.

[19:29] <sorear> interestingly high ratio

[19:29] <Radvendii> what do you mean?

[19:29] * sorear has .375 primary storage and 80 secondary storage

[19:30] <sorear> you apparently have 2/48

[19:30] <colomon> sorear: looks like N2S in Utils.cs is the real function?

[19:30] <Radvendii> well, the 48 is just free memory. i have a lot more than that in use

[19:30] <sorear> Radvendii: don't call hard disk space memory unless you're trying to confuse people

[19:31] <Radvendii> good to know.

[19:31] <Radvendii> i thought that was memory though...

[19:31] <sorear> the general term is "storage"

[19:32] <sorear> primary storage = RAM sticks

[19:32] <sorear> secondard storage = hard drives, flash

[19:32] <sorear> tertiary = tapes

[19:32] <Radvendii> oh. okay

[19:32] *** Mowah joined
[19:32] <Radvendii> that's in order of how hard/slow they are to access, right?

[19:33] <sorear> right

[19:33] <Radvendii> yay. installation worked :D 

[19:33] <Radvendii> now i have to see if panda works...

[19:36] * [Coke] wonders if he can just copy minmax from rakudo into niecza.

[19:37] <Radvendii> cheaters. :P jk

[19:37] <Radvendii> Method 'add-project' must be implemented by Pies::Ecosystem because it is required by a role

[19:37] <Radvendii> that is from bootstrap.sh

[19:37] <Radvendii> from panda

[19:41] <Radvendii> what to do?

[19:41] <masak> moritz++ # Rakudo release #47

[19:41] <dalek> niecza: 8bbbb50 | sorear++ | lib/Test.pm6:

[19:41] <dalek> niecza: ok() should return the success value for the test

[19:41] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8bbbb5034e

[19:41] <dalek> niecza: 484f571 | sorear++ | lib/CORE.setting:

[19:41] <dalek> niecza: Fudge Int.new, Str.new to not explode as messily (fixes #68)

[19:41] <dalek> niecza: review: https://github.com/sorear/niecza/commit/484f571873

[19:41] <dalek> niecza: ddb793f | sorear++ | lib/Utils.cs:

[19:41] <dalek> niecza: Stringify Inf as Inf

[19:41] <dalek> niecza: review: https://github.com/sorear/niecza/commit/ddb793fc12

[19:42] *** molaf left
[19:43] <Radvendii> what's going on with panda?

[19:43] <Radvendii> has anyone else gotten it to work with the most recent rakudo?

[19:43] <moritz> might be broken by latest rakudo changes

[19:43] <sorear> niecza: say Inf\i

[19:43] <p6eval> niecza v12-111-gda709b1: OUTPUT¬´NaN + Infinityi‚ê§¬ª

[19:44] <sorear> niecza reasons that Re(Inf\i) = Re(Inf) * Re(i) - Im(Inf) * Im(i) = Inf * 0 - 0 * 0 = NaN

[19:46] <sorear> I am starting to understand what Kahan meant by "the necessity of a pure imaginary data-type"

[19:46] <masak> well, ‚ÑÇ is usually taken to have only one infinity...

[19:47] <masak> who's Kahan?

[19:47] *** snearch left
[19:48] <masak> ah, Prof. W. Kahan.

[19:49] <masak> ...and he's a curmudgeon :) I like that.

[19:49] <colomon> sorear: I've got a working patch here for the Inf/Infinity thing

[19:50] *** drbean left
[19:52] <colomon> and it appears you had one as well?

[19:52] <colomon> dang it, too many distractions here.

[19:56] *** wooden left
[19:57] *** drbean joined
[20:04] * masak gets the latest Niecza

[20:08] <tadzik> broken panda? woot

[20:08] <tadzik> looking into it

[20:08] <[Coke]> actually, why is the text is(exp(Inf),"Inf") and not ok(exp(Inf),Inf) ?

[20:08] <[Coke]> seems like the first test is better written as the second, and if you want to test the stringification of Inf, you do that separately.

[20:09] *** ksi joined
[20:10] *** mkramer joined
[20:12] <colomon> [Coke]: do you mean is(exp(Inf), Inf) for the second test?

[20:13] <[Coke]> yes.

[20:13] <[Coke]> In fact, I'm going to do change htose.

[20:15] <[Coke]> but we do get S02-types/infinity.t back.

[20:17] <[Coke]> niecza: say Nan.Int

[20:17] <p6eval> niecza v12-114-gddb793f: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Undeclared name:‚ê§       'Nan' used at line 1‚ê§‚ê§Unhandled exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 880 (die @ 2) ‚ê§  at /home/p6eval/niecza/src/STD.pm6 line 1143 (P6.comp_unit @ 32) ‚ê§  at /home/p6‚Ä¶

[20:17] <[Coke]> niecza: say NaN.Int

[20:17] <p6eval> niecza v12-114-gddb793f: OUTPUT¬´NaN‚ê§¬ª

[20:18] <[Coke]> niecza: say (NaN.Int == NaN, NaN.Int === NaN);

[20:18] <p6eval> niecza v12-114-gddb793f: OUTPUT¬´Bool::False Bool::False‚ê§¬ª

[20:18] <[Coke]> niecza: say (Inf.Int == Inf)

[20:18] <p6eval> niecza v12-114-gddb793f: OUTPUT¬´Bool::True‚ê§¬ª

[20:19] <[Coke]> niecza: say (Inf.Int === Inf)

[20:19] <p6eval> niecza v12-114-gddb793f: OUTPUT¬´Bool::False‚ê§¬ª

[20:19] <[Coke]> O_o ?

[20:19] <sorear> === does not work on value types in niecza

[20:20] <dalek> roast: 8155c3b | coke++ | S32-num/exp.t:

[20:20] <dalek> roast: Comparing values, not stringifications

[20:20] <dalek> roast: review: https://github.com/perl6/roast/commit/8155c3bc99

[20:20] <dalek> roast: 305162d | coke++ | S02-types/infinity.t:

[20:20] <dalek> roast: niecza unfudge

[20:20] <dalek> roast: review: https://github.com/perl6/roast/commit/305162dcfb

[20:20] <[Coke]> ah.

[20:20] *** Radvendii left
[20:20] <[Coke]> sorear++ # six more spectests.

[20:20] <colomon> [Coke]: so what is the count for today, anyway?

[20:21] <[Coke]> 11481 earlier today, vs. 18418 for rakudo.

[20:21] <[Coke]> nom: say (11481+6)/18418

[20:21] <p6eval> nom dfd1d7: OUTPUT¬´0.623683353241394‚ê§¬ª

[20:22] *** pkkm_ left
[20:29] *** kaleem left
[20:33] *** mkramer left
[20:35] *** mkramer joined
[20:38] <dalek> niecza: 43afb0e | sorear++ | lib/CORE.setting:

[20:38] <dalek> niecza: Do not multiply in postfix:<i> so Inf\i works

[20:38] <dalek> niecza: review: https://github.com/sorear/niecza/commit/43afb0eebc

[20:40] <masak> niecza: sub postfix:<!>($n) is looser(&infix:<+>) { [*] 1..$n }; say 1 + 2 + 3! # bug? not a bug? discuss!

[20:40] <p6eval> niecza v12-114-gddb793f: OUTPUT¬´9‚ê§¬ª

[20:41] <[Coke]> sorear: is there a test for that (Inf\i) ?

[20:41] <sorear> [Coke]: as such?  I'm not sure.  But S32-str/numeric.t requires it to work.

[20:41] <[Coke]> sorear: ah, close enough.

[20:42] <colomon> sorear: is your new postfix:<i> actually right?  What if it's $x\i, and $x is complex?

[20:42] <sorear> colomon: I don't think that's legal

[20:42] <sorear> if it is, then we have other issues

[20:43] <colomon> perl6: my $x = i; say $x\i

[20:43] <p6eval> pugs b927740: OUTPUT¬´*** ‚ê§    Unexpected "i"‚ê§    expecting "(" or "."‚ê§    at /tmp/UJHCV5d6DG line 1, column 19‚ê§¬ª

[20:43] <p6eval> ..niecza v12-114-gddb793f: OUTPUT¬´-1 + 0i‚ê§¬ª

[20:43] <p6eval> ..rakudo dfd1d7: OUTPUT¬´===SORRY!===‚ê§CHECK FAILED:‚ê§Undefined routine '&i' called (line 1)‚ê§¬ª

[20:43] <colomon> okay, that's not exactly great evidence, is it?

[20:43] <sorear> perl6: my $x = 1i; say $x\i

[20:43] <colomon> :)

[20:43] <p6eval> rakudo dfd1d7, niecza v12-114-gddb793f: OUTPUT¬´-1 + 0i‚ê§¬ª

[20:43] <p6eval> ..pugs b927740: OUTPUT¬´*** ‚ê§    Unexpected "i"‚ê§    expecting "(" or "."‚ê§    at /tmp/SNs3v7Xonj line 1, column 20‚ê§¬ª

[20:44] <dalek> niecza: b75c3e2 | sorear++ | lib/CORE.setting:

[20:44] <dalek> niecza: Add a full number parsing grammar to the setting

[20:44] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b75c3e2151

[20:44] <colomon> our Complex multi postfix:<i> ( Numeric $x )

[20:44] <colomon> Returns a complex number representing the parameter multiplied by the imaginary unit i.

[20:44] *** Trashlord left
[20:45] * colomon tries to remember if he wrote that.

[20:45] <dalek> roast: eaa1664 | sorear++ | S32-str/numeric.t:

[20:45] <dalek> roast: [S32-str/numeric] Multiple fixes; fudge for niecza

[20:45] <dalek> roast: 

[20:45] <dalek> roast: Failure checking is robust to exceptions; signed radix number tests

[20:45] <dalek> roast: corrected; a bigint test added.

[20:45] <dalek> roast: review: https://github.com/perl6/roast/commit/eaa1664a6b

[20:46] <dalek> niecza: a245ca6 | sorear++ | t/spectest.data:

[20:46] <dalek> niecza: Right, we do S32-str/numeric.t now

[20:46] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a245ca60dc

[20:46] <sorear> colomon: git blame

[20:48] <[Coke]> sorear++

[20:49] *** Mowah left
[20:50] <[Coke]> so, for tools in t/spec that could stand to have a config file to read implementation information from, how do folks feel about a .spec_config file with a few fields in it. (implementation name, command to run perl6 from the build dir...)

[20:50] *** ksi left
[20:51] <[Coke]> e.g.: https://gist.github.com/1511810

[20:52] <colomon> I am not to blame for that language.  :)_

[20:52] <colomon> Also, I apparently forgot to add myself as an author to S32-numeric

[20:52] <sorear> colomon: we could make it a mutli / have separate candidates

[20:52] <colomon> sorear: sure

[20:52] <sorear> [Coke]: +1

[20:53] <[Coke]> is anyone using fudge at this point other niecza/rakudo? (I know pugs used to...)

[20:54] <sorear> b?

[20:54] *** bluescreen10 left
[20:54] <sorear> I guess b doesn't need to be tested anymore since it's not being developed

[20:55] <[Coke]> b was rakudo, aye? there isn't a separate fudge set for b.

[20:55] <colomon> right, no separate fudge for b

[20:55] <colomon> pugs fudging is still all over roast

[20:57] <[Coke]> but is anyone actually running those tests anymore?

[20:57] <colomon> probably not at the moment

[20:57] <[Coke]> just wondering if I have to make fudge support both having a .spec_config and not or if i can just cut over niecza & rakudo.

[20:58] * [Coke] will do it both ways, he supposes.

[20:58] <colomon> mildew and "kp6" both appear in fudging lines as well.

[20:58] <colomon> less than 10 times total combined, I think

[20:58] <masak> blog post! \o/ http://perl6advent.wordpress.com/2011/12/22/day-22-operator-overloading-revisited/

[20:59] <masak> ...aaand I've used up my time for the day. typical :)

[20:59] <sorear> masak: I'm unsure if that's a bug.

[20:59] <[Coke]> masak: you need to escape the <>'s

[20:59] <sorear> masak: it seems to me that is looser cutting across syntactic categories is not well defined

[21:00] <[Coke]> e.g.: niecza -e 'sub infix:($a, $b) { ($a + $b) / 2 }; say 10 mean 4 * 5'

[21:00] <[Coke]> ENOMEAN.

[21:02] <masak> sorear: if so, then it should be an error, IMO.

[21:02] <masak> [Coke]: thanks; will fix immediately.

[21:02] *** ksi joined
[21:03] <[Coke]> keine Sorgen.

[21:03] <tadzik> wait, what

[21:03] <tadzik> Method 'add-project' must be implemented by Pies::Ecosystem because it is required by a role

[21:03] <tadzik> Pies::Ecosystem _is_ this role

[21:04] <[Coke]> dumb question: where is add-project defined?

[21:04] <tadzik> in Panda::Ecosystem

[21:04] <tadzik> in Pies::Ecosystem it's just { !!! }

[21:05] <[Coke]> ... so, it's not defined?

[21:05] <[Coke]> ... so the compiler is telling you need to override it?

[21:05] <tadzik> it's defined in Panda::Ecosystem

[21:05] * [Coke] knows jnthn did just change how {!!!} and {...} interact with "role needs this method" recently.

[21:05] <tadzik> and the fail is on Panda::Ecosystem

[21:05] <masak> tadzik: can you golf the error to a one-liner?

[21:06] <tadzik> I'll try

[21:06] <masak> \o/

[21:06] <tadzik> one liner works :_)

[21:06] <tadzik> :)

[21:06] <[Coke]> so the error is really that you're saying you have the Panda::Ecosystem role, and the compiler is saying that panda::ecosystem doesn't define that method?

[21:07] <masak> sorear: I deliberately steered clear of talking about associativity in the post, because I don't really see how it can work as spec'd.

[21:07] <tadzik> oh, wait

[21:07] <tadzik> funny bug

[21:08] <masak> feels like associativity can't de defined on single operators, just on precedence levels.

[21:08] <tadzik> role Foo { method a { !!! } }; class Bar is Foo { method a { 'defined' } }

[21:08] <tadzik> Method 'a' must be implemented by Foo because it is required by a role

[21:08] <tadzik> eeps

[21:08] <tadzik> nom: role Foo { method a { !!! } }; class Bar is Foo { method a { 'defined' } }

[21:08] <p6eval> nom dfd1d7: OUTPUT¬´===SORRY!===‚ê§Method 'a' must be implemented by Foo because it is required by a role‚ê§¬ª

[21:08] <tadzik> nom: role Foo { method a { !!! } }; class Bar does Foo { method a { 'defined' } }

[21:08] <p6eval> nom dfd1d7:  ( no output )

[21:08] <tadzik> s/is/does/

[21:08] <masak> well, of course.

[21:09] <masak> when you use 'is', you force the role to pun to a class.

[21:09] <tadzik> yep

[21:09] <masak> a class in which the method needs to be defined, but isn't.

[21:09] <masak> foot in yourself shoot.

[21:09] <sorear> niecza: sub infix:<A>(*@_) is tighter<*> is assoc<left> { }; sub infix:<B>(*@_) is tighter<*> is assoc<right> { }; say 1 A 2 B 3

[21:09] <p6eval> niecza v12-117-ga245ca6: OUTPUT¬´Nil‚ê§¬ª

[21:09] <sorear> huh

[21:09] <sorear> I thought that was an error

[21:09] <sorear> use of two operators of different assoc at a signle preclevel

[21:10] <masak> did you really get a single preclevel there?

[21:10] <sorear> yes

[21:10] <masak> I guess you did...

[21:10] <sorear> niecza: say "1.0000000000000001" - 1

[21:10] <p6eval> niecza v12-117-ga245ca6: OUTPUT¬´1E-16‚ê§¬ª

[21:10] <sorear> niecza: say "1.000000000000000001" - 1

[21:10] <p6eval> niecza v12-117-ga245ca6: OUTPUT¬´1E-18‚ê§¬ª

[21:10] <sorear> niecza: say "1.00000000000000000001" - 1

[21:10] <p6eval> niecza v12-117-ga245ca6: OUTPUT¬´0‚ê§¬ª

[21:10] <sorear> niecza: say "1.00000000000000000001".FatRat - 1

[21:10] *** mj41 joined
[21:11] <p6eval> niecza v12-117-ga245ca6: OUTPUT¬´(timeout)¬ª

[21:11] <sorear> niecza: say "1.00000000000000000001".FatRat.perl

[21:11] <p6eval> niecza v12-117-ga245ca6: OUTPUT¬´(timeout)¬ª

[21:12] *** mkramer left
[21:12] *** mkramer joined
[21:14] <masak> 'night, #perl6

[21:14] <sorear> niecza: say pi.Rat(0).perl

[21:14] <p6eval> niecza v12-117-ga245ca6: OUTPUT¬´Unhandled exception: System.ArgumentOutOfRangeException: Argument is out of range.‚ê§Parameter name: index‚ê§  at System.Collections.Generic.List`1[Niecza.BigInteger].get_Item (Int32 index) [0x00000] in <filename unknown>:0 ‚ê§  at Niecza.RatApproxer.CandidateS‚Ä¶

[21:15] <sorear> niecza: my $x = 1e0; $x /= 2 while $x / 2 > 0; say $x

[21:15] *** mkramer left
[21:15] <p6eval> niecza v12-117-ga245ca6: OUTPUT¬´4.94065645841247E-324‚ê§¬ª

[21:15] <sorear> niecza: say 5e-324

[21:15] <p6eval> niecza v12-117-ga245ca6: OUTPUT¬´4.94065645841247E-324‚ê§¬ª

[21:15] <sorear> niecza: say pi.Rat(5e-324).perl

[21:15] <p6eval> niecza v12-117-ga245ca6: OUTPUT¬´7074237752028433/2251799813685248‚ê§¬ª

[21:16] <sorear> niecza: say pi.Rat(5e-324).WHAT

[21:16] <p6eval> niecza v12-117-ga245ca6: OUTPUT¬´Rat()‚ê§¬ª

[21:16] <sorear> niecza: say 5e-324.Rat(5e-324).WHAT

[21:16] <p6eval> niecza v12-117-ga245ca6: OUTPUT¬´Rat()‚ê§¬ª

[21:16] <sorear> niecza: say 5e-324.Rat(4e-324).WHAT

[21:16] <p6eval> niecza v12-117-ga245ca6: OUTPUT¬´Rat()‚ê§¬ª

[21:17] *** mkramer joined
[21:22] *** mkramer left
[21:24] *** mkramer joined
[21:28] <colomon> niecza: { say "hello" } for ^3;

[21:28] <p6eval> niecza v12-117-ga245ca6:  ( no output )

[21:29] <colomon> niecza: for ^3 { say "hello" }

[21:29] <p6eval> niecza v12-117-ga245ca6: OUTPUT¬´hello‚ê§hello‚ê§hello‚ê§¬ª

[21:29] <sorear> that block is not a direct child of a statementlist.  Why should it be executed?

[21:29] <sorear> -> $x { ... } for ... makes even less sense.

[21:30] <dalek> niecza: 95a1704 | sorear++ | lib/ (2 files):

[21:30] <dalek> niecza: Fix infinite recursion in Str.FatRat

[21:30] <dalek> niecza: review: https://github.com/sorear/niecza/commit/95a1704352

[21:30] <colomon> sorear: I got that structure from a spectest.

[21:30] <sorear> colomon: so did I.

[21:31] <colomon> nom:  { say "hello" } for ^3;

[21:31] <p6eval> nom dfd1d7: OUTPUT¬´hello‚ê§hello‚ê§hello‚ê§¬ª

[21:31] <sorear> I still think it's nonsense.

[21:31] <colomon> Not telling you you're wrong.

[21:31] <sorear> nom: -> $x { say "$x" } for ^3

[21:31] <colomon> I just changed the spectest locally, will push it in a few.

[21:31] <p6eval> nom dfd1d7: OUTPUT¬´0‚ê§1‚ê§2‚ê§¬ª

[21:31] <sorear> I'll look at what nom does.

[21:31] <sorear> It might still be insane but it's clearly not unimplementable.

[21:32] <[Coke]> perl6: it may be insane, but what the heck.

[21:32] *** mkramer1 joined
[21:32] <p6eval> rakudo dfd1d7: OUTPUT¬´===SORRY!===‚ê§Confused at line 1, near "it may be "‚ê§¬ª

[21:32] <p6eval> ..niecza v12-117-ga245ca6: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Confused at /tmp/kfwOHKqkNX line 1:‚ê§------> [32mit may be insane, but what the heck[33m‚èè[31m.[0m‚ê§‚ê§Undeclared routines:‚ê§     'be' used at line 1‚ê§    'but' used at line 1‚ê§   'heck' used at line 1‚ê§  'insane' used at line 1‚ê§       

[21:32] <p6eval> ..'it' use‚Ä¶

[21:32] <p6eval> ..pugs b927740: OUTPUT¬´*** ‚ê§    Unexpected end of input‚ê§    expecting ".", "\187", ">>", "=", "^", operator name, qualified identifier, variable name, "...", "--", "++", "i", array subscript, hash subscript or code subscript‚ê§    at /tmp/jjlKzIxh0Q line 1, column 37‚ê§¬ª

[21:33] <[Coke]> er, whoops.

[21:33] <[Coke]> ahem.

[21:33] *** mkramer left
[21:33] <dalek> roast: 7aaba1f | (Solomon Foster)++ | S02-literals/pairs.t:

[21:33] <dalek> roast: Fudge for niecza, rewrite last test to use a standard for loop.

[21:33] <dalek> roast: review: https://github.com/perl6/roast/commit/7aaba1fb31

[21:34] <dalek> niecza: f3cbaf3 | (Solomon Foster)++ | t/spectest.data:

[21:34] <dalek> niecza: Turn on S02-literals/pairs.t.

[21:34] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f3cbaf39ab

[21:35] <colomon> That's another 75 passing tests.

[21:35] <[Coke]> colomon: \o/

[21:35] <[Coke]> nom: say (11481+6+75)/18418

[21:35] <p6eval> nom dfd1d7: OUTPUT¬´0.627755456618525‚ê§¬ª

[21:35] <colomon> A lot of these are very easy... basically find the one or two things that need to be skipped, and then it's all straightforward.

[21:36] <[Coke]> nom: say 1/18418

[21:36] <p6eval> nom dfd1d7: OUTPUT¬´5.42947116950809e-05‚ê§¬ª

[21:36] <tadzik> where does 18418 come from?

[21:36] <[Coke]> colomon: yah, I did that a few months ago and haven't gone back for another pass.

[21:36] <[Coke]> tadzik: that's how many rakudo passed earlier today. ;)

[21:36] <tadzik> I think nom passes about 20400

[21:37] *** Trashlord joined
[21:37] <[Coke]> tadzik: that includes skips, which is cheating. ;)

[21:37] <tadzik> hah, okay :)

[21:37] <tadzik> good poing

[21:37] <tadzik> or even point

[21:37] * sorear imagines modifying ok() to always print ok

[21:38] <[Coke]> sorear: WIN!

[21:39] <slavik1> rakudo: say ok();

[21:39] <p6eval> rakudo dfd1d7: OUTPUT¬´===SORRY!===‚ê§CHECK FAILED:‚ê§Undefined routine '&ok' called (line 1)‚ê§¬ª

[21:39] <slavik1> :(

[21:39] <[Coke]> rakudo: use Test; say ok();

[21:39] <p6eval> rakudo dfd1d7: OUTPUT¬´===SORRY!===‚ê§CHECK FAILED:‚ê§Calling 'ok' will never work with no arguments (line 1)‚ê§    Expected any of:‚ê§    :(Mu $cond, Any $desc)‚ê§    :(Mu $cond)‚ê§¬ª

[21:39] <[Coke]> rakudo: use Test; say ok("FINE, YOU HAPPY?");

[21:39] <p6eval> rakudo dfd1d7: OUTPUT¬´ok 1 - ‚ê§1324587586.17036‚ê§¬ª

[21:40] <tadzik> ...what's that number?

[21:41] <[Coke]> rakudo: say now()

[21:41] <p6eval> rakudo dfd1d7: OUTPUT¬´===SORRY!===‚ê§CHECK FAILED:‚ê§Undefined routine '&now' called (line 1)‚ê§¬ª

[21:41] <[Coke]> rakudo: say time()

[21:41] <p6eval> rakudo dfd1d7: OUTPUT¬´===SORRY!===‚ê§CHECK FAILED:‚ê§Undefined routine '&time' called (line 1)‚ê§¬ª

[21:41] <tadzik> rakudo: say now

[21:41] <p6eval> rakudo dfd1d7: OUTPUT¬´Instant:1324587715.73274‚ê§¬ª

[21:41] <tadzik> it's a term

[21:41] <[Coke]> ETOOMANYLANGUAGES.

[21:41] <colomon> nom: my int $namcu = 2;

[21:42] <p6eval> nom dfd1d7:  ( no output )

[21:42] * [Coke] heads home.

[21:42] <colomon> nom: my int $namcu = 2; say $namcu.WHAT

[21:42] <p6eval> nom dfd1d7: OUTPUT¬´Int()‚ê§¬ª

[21:45] <dalek> niecza: c4bba4b | sorear++ | lib/CORE.setting:

[21:45] <dalek> niecza: Save and restore the caller $/ in subst() (fixes #55)

[21:45] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c4bba4b335

[21:57] <dalek> roast: 5bf056e | (Solomon Foster)++ | S02-types/declare.t:

[21:57] <dalek> roast: Epic fudge for niecza.

[21:57] <dalek> roast: review: https://github.com/perl6/roast/commit/5bf056eba0

[21:57] <dalek> niecza: 5be4ac4 | (Solomon Foster)++ | t/spectest.data:

[21:57] <dalek> niecza: Turn on S02-types/declare.t.

[21:57] <dalek> niecza: review: https://github.com/sorear/niecza/commit/5be4ac438a

[22:09] <sorear> colomon: since all the code paths requirew BigInteger *anyway*, I'm going to unify the NR_FIXINT and NR_BIGINT paths in pow().  Is this sane to you?

[22:10] *** drbean left
[22:13] *** mj41 left
[22:15] *** ksi left
[22:15] *** Moukeddar joined
[22:16] *** ksi joined
[22:17] *** drbean joined
[22:19] <colomon> sorear: I'd worry about the stability of the big_pow function?  

[22:21] <sorear> stability?

[22:24] *** mj41 joined
[22:24] <sorear> niecza> 1.0001 ** 10000

[22:24] <sorear> 2.7181459268243562

[22:25] <dalek> niecza: 7af9bc5 | sorear++ | lib/Builtins.cs:

[22:25] <dalek> niecza: Make raising Rats to large powers saner

[22:25] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7af9bc530a

[22:38] *** mj41 left
[22:40] *** MayDaniel joined
[22:48] *** Moukeddar left
[22:48] *** mj41 joined
[22:51] *** preflex left
[22:51] *** preflex_ joined
[22:51] *** preflex_ is now known as preflex

[23:00] <colomon> sorear:  from the source: // Untested and probably unusable in the near term

[23:04] *** MayDaniel left
[23:06] <colomon> I think the theory is solid, but I don't know that it's ever really been tested -- unless you just put it in action and ran the spectests on it.  :)

[23:07] *** thou left
[23:08] <colomon> patch looks sensible to me.

[23:10] *** hundskatt left
[23:11] *** mj41 left
[23:18] *** drbean left
[23:21] *** bkolera left
[23:21] <dalek> roast: 29f0d01 | (Solomon Foster)++ | S03-operators/short-circuit.t:

[23:21] <dalek> roast: Fudge for niecza.

[23:21] <dalek> roast: review: https://github.com/perl6/roast/commit/29f0d01dd6

[23:22] <colomon> sorear: ping?

[23:24] <colomon> niecza: say [&&] 1, 2, 3, 4

[23:24] <p6eval> niecza v12-122-g7af9bc5: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§This macro cannot be used as a function at /tmp/eOzoY_lbG9 line 1 (EOF):‚ê§------> [32msay [&&] 1, 2, 3, 4[33m‚èè[31m<EOL>[0m‚ê§‚ê§Unhandled exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 880 (die ‚Ä¶

[23:24] <colomon> niecza: say [+] 1, 2, 3, 4

[23:24] <p6eval> niecza v12-122-g7af9bc5: OUTPUT¬´10‚ê§¬ª

[23:26] *** drbean joined
[23:31] *** wooden joined
[23:31] *** wooden left
[23:31] *** wooden joined
[23:33] <colomon> nom: say [^^] 1, 0, 0, 0, 0

[23:33] <p6eval> nom dfd1d7: OUTPUT¬´1‚ê§¬ª

[23:33] <colomon> nom: say [^^] 1, 0, 0, 0, 1

[23:33] <p6eval> nom dfd1d7: OUTPUT¬´Nil‚ê§¬ª

[23:33] *** IngisKahn joined
[23:34] *** Ingis joined
[23:38] *** IngisKahn left
[23:48] *** awoodland left
[23:59] *** wallberg joined
