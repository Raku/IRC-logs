[00:00] *** dorlamm left
[00:01] <jnthn> Hope you'll excuse me for sleeping and not working on native attributes tonight. I have to write C to finish it up, and I already passed the Ballmer Peak. ;-)

[00:03] *** nadim_ left
[00:04] *** nadim_ joined
[00:11] <dalek> roast: de5c0ff | (Kodi Arfer)++ | S03-metaops/reduce.t:

[00:11] <dalek> roast: [reduce.t] Edited [^^] tests so RT #77442 isn't a prerequisite.

[00:11] <dalek> roast: review: https://github.com/perl6/roast/commit/de5c0ff573

[00:11] <dalek> roast: 689122d | (Kodi Arfer)++ | S03-metaops/reduce.t:

[00:11] <dalek> roast: [reduce.t] Added test for [^^] on an empty list (thundergnat++).

[00:11] <dalek> roast: review: https://github.com/perl6/roast/commit/689122d539

[00:11] <dalek> roast: 162829c | (Kodi Arfer)++ | S03-operators/short-circuit.t:

[00:11] <dalek> roast: [short-circuit.t] Use isa_ok to test for types.

[00:11] <dalek> roast: review: https://github.com/perl6/roast/commit/162829c456

[00:11] <dalek> roast: 748c769 | (Kodi Arfer)++ | S03- (4 files):

[00:12] <dalek> roast: Additions and unfudging for &infix:<^^> and &infix:<xor>.

[00:12] <dalek> roast: review: https://github.com/perl6/roast/commit/748c7691c2

[00:12] <dalek> roast: 58f71c5 | (Kodi Arfer)++ | S03-operators/short-circuit.t:

[00:12] <dalek> roast: [short-circuit.t] Added some more-sensitive tests.

[00:12] <dalek> roast: review: https://github.com/perl6/roast/commit/58f71c560c

[00:15] <dalek> rakudo: 549d2a9 | KodiB++ | src/ (5 files):

[00:15] <dalek> rakudo: Fixed and extended &infix:<^^> and &infix:<xor>.

[00:15] <dalek> rakudo: 

[00:15] <dalek> rakudo: This resolves issues with return-value types (RT #72826), short-circuiting, assignment (RT #76820), reduction (RT #65164), and triangular reduction.

[00:15] <dalek> rakudo: 

[00:15] <dalek> rakudo: Whatever-currying is still broken. Fixing this would require, among other things, getting Actions.pm's &whatever_curry to work with PAST::Op nodes with more than two children.

[00:15] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/549d2a94c5

[00:17] *** f00li5h joined
[00:20] *** Kodi left
[00:21] *** orafu left
[00:21] *** LoRe_ left
[00:21] <colomon> Kodi++

[00:22] *** noganex_ left
[00:22] *** noganex joined
[00:22] *** orafu joined
[00:28] *** cdarroch left
[00:29] *** QinGW joined
[00:37] *** cafesofie left
[00:37] *** gimix joined
[00:41] *** justatheory left
[00:54] *** LoRe joined
[01:01] *** wallberg left
[01:18] *** Chillance left
[01:19] *** vmspb left
[01:28] *** mtk left
[01:32] *** leprevost left
[01:36] *** mtk joined
[01:37] *** felipe left
[01:47] <sorear> so, pmurias likes to talk to me without asking if I'm here

[01:47] <sorear> maybe I should just /part for the next 4 months

[01:48] <colomon> just so he doesn't expect you to respond while you're not there...

[01:53] *** justatheory joined
[01:57] <diakopter> next time I see pmurias here I'll remind him to use phenny

[02:01] <[Coke]> ... or you could use phenny and remind him now.

[02:03] *** woosley joined
[02:04] *** wooden left
[02:08] <sorear> ... or I could just take advantage of the logs.

[02:08] <diakopter> [Coke]: lol, heh, yes.  (it's been a long day)

[02:09] <diakopter> much learnings occurred

[02:17] <diakopter> phenny: tell pmurias reminder: traffic here on #perl6 is comparatively high (to 6-10 months ago, I'd estimate), so people seem to tend to backlog less and rely on phenny's msg system to tell/ask particular claims/questions. sorear, in particular, might like to receive messages from you that way. :)

[02:17] <phenny> diakopter: I'll pass that on when pmurias is around.

[02:24] *** am0c joined
[02:29] *** kst left
[02:30] *** kst joined
[02:31] *** cafesofie joined
[02:45] *** arlinius joined
[02:48] *** felipe joined
[02:59] *** noganex_ joined
[03:02] *** noganex left
[03:04] *** aesop joined
[03:08] *** getpwnam left
[03:09] *** whiteknight left
[03:16] *** kst left
[03:20] *** kst joined
[03:39] * mberends wakes up at 4h30 for no reason and resumes hacking

[03:40] <sorear> hi!

[03:41] <mberends> hi sorear!

[03:43] *** arlinius left
[03:44] *** arlinius joined
[03:45] <dalek> 6model: 9a1bd42 | (Martin Berends)++ | java/compiler/ (2 files):

[03:45] <dalek> 6model: [java/compiler] refactor the generation of startup entry points

[03:45] <dalek> 6model: review: https://github.com/jnthn/6model/commit/9a1bd4256e

[03:49] *** aesop left
[03:49] *** QinGW1 joined
[03:51] *** QinGW left
[03:51] <mberends> sorear: does niecza implement `use A::B;` as reading from A/B.pm? And does niecza use @*INC?

[03:54] *** QinGW1 left
[03:56] *** cafesofie left
[03:56] * mberends czechs for himself. Ooh, a wget of niecza-1.51.zip!

[03:59] <mberends> there's time to hack on the 6model SignatureBinder while niecza builds :)

[04:00] *** QinGW joined
[04:01] *** cafesofie joined
[04:08] *** am0c left
[04:10] <colomon> rakudo: say chr(66)

[04:10] <p6eval> rakudo 549d2a: OUTPUT«B␤»

[04:12] <mberends> sorear: current niecza built ok, but `make test` died with: Unhandled exception: Unable to resolve method keys in class Array at boot/lib/SAFE.setting line 775 (SAFE keys @ 2)

[04:16] <sorear> mberends: "class A::B" syntax isn't in Niecza yet (there are some dark corners I need to figure out first relating to the fairly common case where A:: is an imported lexical package)

[04:16] <sorear> as such, A/B.pm is unlikely to be useful even if it works

[04:16] <sorear> (which it probably won't, since I've never tested it)

[04:17] <sorear> mberends: Are you building from a clean checkout?

[04:17] <sorear> p6eval had that, but it went away when I did a clean build

[04:17] <mberends> sorear: it was a refreshed checkout. I'll repeat with a fresh one.

[04:18] <sorear> phenny: tell pmurias Do you want to write anything about -Bnam for docs/announce.v2 ?

[04:18] <phenny> sorear: I'll pass that on when pmurias is around.

[04:23] *** Su-Shee_ joined
[04:26] *** QinGW left
[04:27] *** Su-Shee left
[04:28] *** justatheory left
[04:28] *** kst left
[04:29] *** kst joined
[04:29] *** stifynsemons joined
[04:30] *** stifyn joined
[04:35] <stifynsemons> I tried out the <?DEBUG(1)> Rakudo feature for grammar debugging. I really like it. Externally, the output goes to stderr

[04:35] <stifynsemons> is there a way to redirect it within the Perl program, for processing/filtering?

[04:35] *** stifyn left
[04:36] <stifynsemons> I guess I was double joining (new to IRC)

[04:37] <colomon> I doubt there's a way to redirect it inside the program, but then, I didn't even know it was up and working yet.  :)

[04:38] <sorear> you might be able to do something using ParrotInterpreter.stdhandle(2, $obj)

[04:38] <stifynsemons> Well, it works well enough for me -- but there is a lot of output - a single case can run 100 lines. But the grammar is complex.

[04:39] <stifynsemons> I'm not familiar with ParrotInterpreter - I assume that redirects all the output of the parrot interpreter. Does it put it in $obj?

[04:40] <sorear> ParrotInterpreter is a class

[04:40] *** snarkyboojum joined
[04:40] <sorear> the code you want to use is something like pir::getinterp().stdhandle(2, MyClass.new)

[04:40] <sorear> what you need to put in MyClass is beyond me

[04:40] *** envi joined
[04:41] <plobsing> MyClass depends on where you want to redirect that standard output

[04:41] <plobsing> parrot has a builtin stringhandle class for instance, so you could redirect the output to string (but I suspect your RAM would explode)

[04:44] <stifynsemons> Putting it in a string seems reasonable - it's about 1k now, so I wouldn't think size would be prohibitive - if I turn it on/off.

[04:45] <stifynsemons> However using it as a filter would be more useful, as I still want the output to go to std out (or std err) anyway.

[04:47] <plobsing> IIUC, any class should be useable as a replacement for stderr so long as it implements the puts() method

[04:48] <mberends> sorear++: fresh checkout works, passed all 731 tests :)

[04:48] <plobsing> that part of parrot is greatly underused and undertested at the moment, so my advice may or may not work

[04:52] <stifynsemons> I'll keep it in mind, but I think it is beyond what I'm able to do today - I've only been playing with Perl6 for a week, after an absence of a few years, and still have a lot of basics to go over

[04:53] <stifynsemons> brb

[04:53] *** stifynsemons left
[04:59] *** stifynsemons joined
[05:00] *** felliott left
[05:01] <sorear> mberends: pmurias has been playing with a clisp backend lately.  Can I interest you in starting the Java backend? :)

[05:02] <[Coke]> sorear: you looking at generate java or bytecode directly?

[05:02] <[Coke]> *ing

[05:02] <mberends> sorear: yes, but only after 6model/java catches up to 6model/dotnet :)

[05:03] *** felliott joined
[05:03] <sorear> [Coke]: I'm not currently looking at either, but bytecode is probably the path of least resistance since the CLR backend does that

[05:07] *** felliott left
[05:10] *** felliott joined
[05:13] *** felliott left
[05:14] *** felliott joined
[05:15] *** molaf joined
[05:17] *** baest left
[05:18] *** felliott left
[05:21] *** QinGW joined
[05:21] *** baest joined
[05:35] <dalek> 6model: 7681c75 | (Martin Berends)++ | java/ (2 files):

[05:35] <dalek> 6model: [java] add a Context parameter to SignatureBinder.Bind()

[05:35] <dalek> 6model: review: https://github.com/jnthn/6model/commit/7681c7530c

[05:35] *** QinGW left
[05:44] <mberends> time mono run/Niecza.exe -e 'say 2 + 2;' : 4 real 1m57.983s user 1m57.135s sys 0m0.448s on an Atom netbook

[05:45] <mberends> it looks like Camelia is not an Iron Butterfly, but one made of lead :(

[05:46] <TimToady> see if it's faster the second time

[05:48] * mberends tries

[05:49] <sorear> the path of least resistance involved lazily compling the setting the first time the compiler is used

[05:50] <mberends> top shows mono growing to about 95MB virtual memory

[05:51] <mberends> user	1m58.579s :(

[05:51] *** getpwnam joined
[05:51] <TimToady> goodness..runs in 2.5 seconds here...

[05:52] <mberends> it's mono 2.4.4, that may be too old

[05:52] <diakopter> wait wait

[05:53] <diakopter> what are we timing

[05:53] * diakopter dying to try the sandy bridge

[05:54] <mberends> mono run/Niecza.exe -e 'say 2 + 2;' # from niecza README.pod

[05:54] <diakopter> hm, I already installed cygwin, now downloading mono

[05:55] *** kaare_ joined
[05:56] <mberends> I think I'll try adding a -e option to 6model/java for comparison

[05:56] *** aesop joined
[05:59] <TimToady> yes, that's way old

[05:59] <TimToady> running 2.8.2 here

[06:00] <mberends> there were some remarks heree recently about mono speed improvements

[06:00] <mberends> *here

[06:03] * diakopter watches niecza build blindingly quickly

[06:04] <diakopter> sorear: build problems using .net... I'll try mono now

[06:10] * diakopter hears the cpu fan spin up

[06:12] <diakopter> bah.  0m7.280s  # first run

[06:12] <diakopter> 0m2.114s  # second run

[06:13] <mberends> :)

[06:13] <diakopter> 3rd run identical

[06:14] <diakopter> interestingly, the same run under .net took 0m26.722s

[06:14] <sorear> mberends: 1m58s on the second run?

[06:15] <TimToady> he's running mono 2.4.4

[06:15] <diakopter> mem got up to 663MB on that last one

[06:15] <TimToady> so I'd guess it's losing track of something cachey

[06:16] <diakopter> under mono, it got up to only 60MB

[06:17] *** QinGW joined
[06:18] * sorear wonders if it would use the same amount of memory if diakopter first removed half of the RAM

[06:18] * sorear wonders if there's a sane/easy way to test that

[06:19] * sorear suspects .net is opportunistically expanding the heap to fill all available space

[06:19] <sorear> Niecza generates quite a lot of garbage; switching from Boehm-D-M to the 2.9 native GC speeds up builds by a factor of 30-100%

[06:20] <sorear> (it's actually the 2.8 native GC, but at least in 2.8.1 it segfaults if you look at it wrong, so enabling it isn't a good idea)

[06:21] * TimToady wonders about 2.8.2

[06:21] <mberends> sorear: would you recommend installing mono 2.8.2 or 2.9.1 on Ubuntu?

[06:23] <sorear> I don't know what fixes went into 2.8.2, and I didn't know 2.9.1 existed?

[06:23] * sorear is currently running 2.11.6c34e3a

[06:25] <mberends> oh sorry, I thought that was the newest development mono you were praising

[06:26] <sorear> I praise the versions that work for me.  I happen to mostly run monos from git.

[06:26] <mberends> :) I'll git that 2.11.* after commuting

[06:27] * diakopter sighs and looks for a windows build of 2.11

[06:28] <sorear> diakopter: Nothing I have said should be taken to imply 2.11 is required

[06:28] <sorear> I tested it under 2.8.2 fairly recently

[06:28] <sorear> older versions cannot be installed anymore :/

[06:29] <diakopter> sorear: nothing I have said should be taken to imply that I inferred from you that 2.11 is required

[06:29] <sorear> ok.

[06:30] <mberends> commute &

[06:30] *** mberends left
[06:35] <diakopter> sorear: I'm timing a niecza build under mono 2.8.2

[06:35] <diakopter> forgot to time it the first time

[06:35] *** _jaldhar left
[06:35] *** _jaldhar joined
[06:36] <sorear> diakopter: also try running it with RUN_CLR=mono-sgen (and seeing if it crashes)

[06:37] <diakopter> 1m30s

[06:38] <diakopter> mono-sgen not found

[06:39] * diakopter tries mono --gc=sgen

[06:40] <sorear> mono --gc=sgen works by exec(mono-sgen)

[06:40] <sorear> I'm suprised only the former works

[06:40] *** orafu left
[06:41] <diakopter> well

[06:41] *** orafu joined
[06:41] <diakopter> here, only mono --gc=sgen worked

[06:41] <diakopter> yeah

[06:41] <TimToady> RUN_CLR works here

[06:42] <TimToady> though I was just using it on user code, not the build

[06:42] <diakopter> 1m29.7s for the mono --gc=sgen  build

[06:42] <TimToady> sgen seems to chew up memory faster on the knapsack problem though

[06:42] *** cafesofie left
[06:43] <TimToady> it very quickly used up 2.7gigs

[06:43] <TimToady> where I stopped it, since I only have 3

[06:43] <diakopter> where's the code for that? I'd be curious to write a perlesque edition

[06:45] <diakopter> the 01 one, or continuous?

[06:45] * diakopter (found the rosettacode)

[06:46] <diakopter> oh.. bruteforce

[06:47] *** am0c joined
[06:50] <TimToady> see http://wall.org/~larry/knap01 for the one that runs under niecza

[06:50] <TimToady> yeah, doesn't even do caching

[06:50] <TimToady> but it does complete in rakudo...eventually...

[06:51] *** cafesofie joined
[06:51] <TimToady> course I coulda made a bonehead mistake translating it to niecza

[06:55] *** wtw joined
[06:56] * diakopter starts porting

[06:57] *** JimmyZ joined
[06:57] * sorear points out that knap is, uh, NP-complete...

[06:58] <sorear> oh, you're doing a *reasonable* instance

[07:01] <sorear> TimToady: line 10 possibly better written with = instead of binding directly to the parcel

[07:04] <sorear> hrm.  there is no reasonable reason for this to not run in linear space

[07:07] <dalek> niecza: fb07190 | sorear++ | docs/nam.pod:

[07:07] <dalek> niecza: [docs/nam.pod] Bring overview up to date with reality

[07:07] <dalek> niecza: review: https://github.com/sorear/niecza/commit/fb071908b3

[07:07] <dalek> niecza: a520fb3 | sorear++ | README.pod:

[07:07] <dalek> niecza: Add a few recent discoveries to README

[07:07] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a520fb320f

[07:07] *** cafesofie left
[07:07] <TimToady> still thrashes my system with the =

[07:08] *** drbean left
[07:08] * sorear tries to profile it

[07:09] * diakopter has 8GB, but ... I guess I could try it under the 64-bit .net :D

[07:09] <TimToady> I dunno what my mono thinks of my 64-bit system

[07:10] <diakopter> I'm pretty sure it doesn't emit amd64 yet

[07:11] <diakopter> whoa

[07:11] <diakopter> 5.9GB

[07:11] <TimToady> --version knows it's on the arch though

[07:11] <diakopter> 6.1GB

[07:11] <diakopter> then a GC

[07:12] <diakopter> then right back up to 6.2

[07:12] <TimToady> some kind of space leak maybe

[07:12] <diakopter> 2000 Gen 0 collections, 684 Gen 1 collections, 20 Gen 2 collections

[07:12] <diakopter> so far

[07:13] *** Mowah joined
[07:13] <diakopter> %time in GC, 41.10

[07:15] <diakopter> oo... up to 6.9GB

[07:16] *** JimmyZ left
[07:16] * diakopter wonders about making a multithreaded edition of knap01, since perlesque can do that

[07:17] *** cafesofie joined
[07:18] <TimToady> certainly there are many ways of improving the program :)

[07:18] <diakopter> (since niecza is using only "12.5%")

[07:18] <sorear> according to the heap profiler, after 66 seconds there are 308,714 live stack frames

[07:18] <sorear> this is... ahem... wrong.

[07:19] <diakopter> sorear, I'll send you this Process Explorer performance graph when it's finished; it's pretty interesting

[07:19] *** GinoMan joined
[07:19] <diakopter> if it terminates properly

[07:19] <TimToady> in an hour or two

[07:20] <diakopter> hey, this is sandy bridge

[07:20] <sorear> sandy bridge?

[07:20] <diakopter> .g intel sandy bridge

[07:20] <phenny> diakopter: http://en.wikipedia.org/wiki/Sandy_Bridge_(microarchitecture)

[07:21] <diakopter> 7.4GB

[07:21] *** QinGW left
[07:21] <diakopter> (GCs are no longer effective)

[07:21] <sorear> aha.  There's no check to stop the recursion when @rest is empty

[07:22] *** QinGW joined
[07:22] * diakopter looks around for the bonehead remover

[07:23] <diakopter> sorear: where would that check go and what would be returned

[07:27] <TimToady> perhaps you should retranslate from the RC example

[07:34] *** cjk101010 joined
[07:34] <diakopter> ok

[07:35] <sorear> Value = 1030

[07:35] <sorear> Tourist put in the bag:

[07:35] <sorear> socks sunglasses note-case waterproof overclothes waterproof trousers suntan cream banana glucose sandwich water compass map

[07:35] <sorear> MAIN: NieczaBackendDotnet-run took 115.33654499054

[07:35] <diakopter> gist your code?

[07:36] <sorear> http://gist.github.com/798202

[07:37] <diakopter> 45s

[07:37] <diakopter> (coo!)

[07:37] <diakopter> (cool!)

[07:38] <diakopter> oh, that was .net64; trying mono sgen now

[07:39] <diakopter> 51s

[07:43] *** JimmyZ joined
[07:51] *** stifynsemons left
[07:56] <sorear> http://gist.github.com/798221 # Optimized version, slightly over 4x faster, same results

[07:57] * sorear out

[08:06] *** mberends joined
[08:15] *** getpwnam left
[08:16] *** getpwnam joined
[08:22] *** Alias left
[08:23] *** Alias joined
[08:25] *** Su-Shee_ is now known as Su-Shee

[08:25] *** QinGW left
[08:30] *** wallberg joined
[08:33] *** kst left
[08:33] *** getpwnam left
[08:34] *** kst joined
[08:37] *** getpwnam joined
[08:38] *** arthur-_ left
[08:46] *** drbean joined
[08:51] *** arthur-_ joined
[09:09] *** snearch joined
[09:11] *** daxim joined
[09:12] *** agentzh joined
[09:13] *** getpwnam left
[09:16] *** mtk left
[09:19] *** am0c left
[09:20] *** Alias left
[09:21] *** kensanata joined
[09:24] *** mtk joined
[09:25] *** pmurias joined
[09:26] *** woosley left
[09:28] *** pmurias left
[09:28] *** timbunce joined
[09:37] *** dakkar joined
[09:42] *** cafesofie left
[09:55] *** masak joined
[09:55] <masak> hola, zebras.

[09:56] *** zykes- joined
[09:56] <diakopter> oi

[09:56] <zykes-> perl6 say3

[09:56] <zykes-> perl6: say3

[09:56] <zykes-> hm

[09:56] <p6eval> pugs: OUTPUT«*** No such subroutine: "&say3"␤    at /tmp/ErghEk2kmk line 1, column 1 - line 2, column 1␤»

[09:56] <p6eval> ..niecza v1-190-ga520fb3: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤     'say3' used at line Any()1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/SAFE.setting line 377 (SAFE die @ 2)␤  at /home/p6eval/niecza/src/STD.pm6 line 1174 (STD P6.comp_unit @ 71)␤  at

[09:56] <p6eval> ../home/p6eval/niecza…

[09:56] <p6eval> ..rakudo 549d2a: OUTPUT«Could not find sub &say3␤  in main program body at line 22:/tmp/oStsZhPy6x␤»

[09:56] <masak> rakudo: say 3

[09:56] <p6eval> rakudo 549d2a: OUTPUT«3␤»

[09:57] <masak> zykes-: since 'say3' is a valid identifier, you need the space between 'say' and '3'.

[09:57] <zykes-> rakudo sub {}

[09:57] <zykes-> rakudo: sub {}

[09:57] <p6eval> rakudo 549d2a:  ( no output )

[09:57] <zykes-> ah

[09:59] *** timbunce left
[10:02] <masak> rakudo: say sub {}

[10:02] <p6eval> rakudo 549d2a: OUTPUT«_block124␤»

[10:02] <masak> rakudo: say {}

[10:02] <p6eval> rakudo 549d2a: OUTPUT«␤»

[10:02] <masak> rakudo: say (sub {}).WHAT; say {}.WHAT

[10:02] <p6eval> rakudo 549d2a: OUTPUT«Sub()␤Hash()␤»

[10:03] <mux> this isn't really related to perl6, so feel free to ignore me, but do you guys know anything about "use charnames ':full';" breaking when "use strict;" is enabled?

[10:03] <masak> rakudo: say (-> {}).WHAT

[10:03] <p6eval> rakudo 549d2a: OUTPUT«Block()␤»

[10:07] *** timbunce joined
[10:08] *** cafesofie joined
[10:08] *** tzhs joined
[10:08] *** cafesofie left
[10:11] <diakopter> whee. finally finished the knapsack port to perlesque

[10:11] <masak> diakopter: how's perlesque going?

[10:12] <diakopter> well, it's "done" fsdo "done"

[10:13] <diakopter> well, for *my* definition of done .... i.e. what I need[ed] it for

[10:13] <diakopter> (toy with primitive types & closures on the clr)

[10:15] <dalek> sprixel: a9bac02 | diakopter++ | sprixel/ (8 files):

[10:15] <dalek> sprixel: slight fixes to some generic method generators; we'll see if they work in mono

[10:15] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/a9bac02f35

[10:15] <masak> diakopter: great!

[10:19] <diakopter> :)

[10:20] <diakopter> I figure if it can run a knapsack solver and the man-or-boy test, it's pretty decent

[10:20] *** drbean left
[10:22] <masak> that does sound decent. more than decent, in fact.

[10:23] <diakopter> and the knapsack solver (for this particular problem) takes ~1 second

[10:24] <diakopter> I just ported TimToady's code

[10:24] <diakopter> took a bit

[10:24] <dalek> sprixel: 4a2998f | diakopter++ | sprixel/src/compiler/GenTypeGen.cs:

[10:24] <dalek> sprixel: mono needs the modified returntype also

[10:24] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/4a2998f509

[10:26] <mux> nevermind my previous question; it's a known bug in Perl 5.10.x (RT #72590) where if you have use strict enabled and have a compilation error, you only get a strange error from charnames.pm

[10:26] <mux> if you use "use charnames ':full'" and \N{...} in a regexp

[10:28] <masak> mux: good to know. no Perl 6 implementation has that issue :)

[10:28] *** timbunce left
[10:28] <masak> rakudo: use strict

[10:28] <p6eval> rakudo 549d2a: OUTPUT«===SORRY!===␤Unable to find module 'strict' in the @*INC directories.␤(@*INC contains:␤  lib␤  /home/p6eval/.perl6/lib␤  /home/p6eval//p2/lib/parrot/3.0.0-devel/languages/perl6/lib␤  .)␤»

[10:29] <mux> too bad I'm leaving this place where I work at next week; I'd have pushed for a perl6 move :-)

[10:36] *** xabbu42 joined
[10:38] <jnthn> morning, #perl6

[10:38] <masak> jnthn! \o/

[10:40] * jnthn has actually been up and at $dayjob for a while :-)

[10:40] <masak> right, right. :)

[10:41] <jnthn> :P

[10:41] * jnthn got immediately taken to a meeting :)

[10:42] <jnthn> ooh, it's pancake Thursday \o/

[10:42] <masak> \o/

[10:45] *** kst left
[10:45] *** kst joined
[10:47] <mathw> pancake Thursday??

[10:47] <masak> it's a Swedish thing.

[10:48] <masak> it's really the pea soup that's the deal with Thursdays, but pancakes go with the pea soup as dessert.

[10:48] <masak> (possibly as a consolation for those who don't like pea soup, I dunno)

[10:50] <mberends> jnthn: I belatedly wish you a happy birthday :)

[10:50] <mathw> the only pea soup I don't like is the stuff that's not made very well

[10:54] <jnthn> mberends: Thanks! :)

[10:55] <jnthn> Yes, pancakes (and pea soup) on a Thursday is one of the Swedish traditions I like most :)

[10:56] <jnthn> mberends: How's nqp-jvm going? :)

[10:56] <mberends> jnthn: not even begun yet, still catching up in 6model/java...

[10:58] <jnthn> Ah, OK :)

[10:58] * jnthn looks forward to when it passes the 299 tests that nqpclr does :)

[10:59] *** pmurias joined
[11:00] <masak> jnthn: 299 tests? did you omit writing one? :P

[11:01] <masak> mathw: almost any pea soup is nice with a good mustard and some thyme.

[11:03] <pmurias> tell sorear ok, i'll try to use phenny more from now on

[11:03] <phenny> pmurias: 02:17Z <diakopter> tell pmurias reminder: traffic here on #perl6 is comparatively high (to 6-10 months ago, I'd estimate), so people seem to tend to backlog less and rely on phenny's msg system to tell/ask particular claims/questions. sorear, in particular, might like to receive messages from you that way. :)

[11:03] <phenny> pmurias: 04:18Z <sorear> tell pmurias Do you want to write anything about -Bnam for docs/announce.v2 ?

[11:05] <pmurias> tell sorear re -Bnam you mean -Bclisp?

[11:10] <flussence> whoa, spectest stuff is down to < 2 hours now

[11:11] *** robinsmidsrod is now known as robins

[11:11] *** robins is now known as robinsmidsrod

[11:19] *** xabbu42 left
[11:21] *** pmurias left
[11:35] *** whiteknight joined
[11:39] *** Mowah left
[11:41] *** timbunce joined
[11:41] <moritz_> rakudo: say 1074 / 60

[11:41] <p6eval> rakudo 549d2a: OUTPUT«17.9␤»

[11:41] <moritz_> less than 20 minutes on my machine :-)

[11:41] <moritz_> (two cores, three jobs in parallel)

[11:47] <flussence> the one I usually do it on's a single-core Atom... though it's not all that fast on my quad-core box either, half an hour or so :(

[11:47] *** kst left
[11:48] *** kst joined
[11:50] * moritz_ wants to read masak's p4 review

[11:53] <masak> so here's the thing.

[11:54] <moritz_> I guess this review will be a bit trickier than the previous ones

[11:54] <masak> I've willfully started on a bit of a yak shaving expedition in order to bring better images to the one or two explanation posts that I want to write before the p4 review post.

[11:54] <moritz_> ... and the yaks all ran away :-)

[11:55] <flussence> .oO( if a yak bumps into a mirror, does it become a kayak? )

[11:56] *** drbean joined
[11:58] <jnthn> flussence++ :D

[11:59] <masak> to the yaks' credit, what little hacking I've done so far (two evenings ago) was very productive and promising.

[11:59] <masak> first Perl 6 hacking I've done in a while, and it produced 3 rakudobugs :)

[11:59] <jnthn> Are the yaks still hairy?

[11:59] <jnthn> Or getting less so?

[11:59] <jnthn> ;)

[12:00] <masak> the razors are sharp, and some of the yaks are less hairy.

[12:00] <jnthn> :D

[12:00] <masak> let's make a deal. I'll have the first pre-p4 post out by the end of the weekend, no matter what.

[12:00] <masak> also, I'll make a small post today about moritz_++' post. I meant to do that anyway.

[12:04] *** Alias joined
[12:05] *** cogno joined
[12:15] *** cafesofie joined
[12:24] *** Kodi joined
[12:32] *** cogno left
[12:32] <dalek> nqp-rx: bffc552 | bacek++ | t/setting/01-resizablepmcarray.t:

[12:32] <dalek> nqp-rx: Stylish change in test.

[12:32] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/bffc552e0e

[12:32] <dalek> nqp-rx: 7809892 | bacek++ | / (3 files):

[12:32] <dalek> nqp-rx: Revert "Comment out split() function for now; it causes the Parrot build to fail"

[12:32] <dalek> nqp-rx: 

[12:32] <dalek> nqp-rx: This reverts commit 5349f1795fb2dd7420a41be28c9d192c10cfb059.

[12:32] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/7809892897

[12:32] <dalek> nqp-rx: feb29e6 | bacek++ | / (2 files):

[12:32] <dalek> nqp-rx: Use multi-dispatch to split on plain strings in setting

[12:32] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/feb29e6a33

[12:36] <masak> chromatic weighs in on EDSLs: http://www.modernperlbooks.com/mt/2011/01/your-edsl-is-only-pretty-in-stockholm.html

[12:37] <masak> I presume that the "in Stockholm" bit is a reference to the Stockholm syndrome, coined after the Norrmalmstorg robbery in 1973 wherein hostages expressed positive feelings towards their captors.

[12:38] *** am0c joined
[12:40] <arnsholt> "You'd almost think someone had already created a language specific to the domain of describing relational data structures." Oh snap ^_^

[12:40] *** uniejo joined
[12:41] <arnsholt> masak: Yeah, definitely Stockholm syndrome. Especially given the oblique Patty Hearst reference as well

[12:43] <dalek> nqp-rx: 0bf82c9 | bacek++ | / (3 files):

[12:43] <dalek> nqp-rx: Implement RPA.grep and rebootstrap setting.

[12:43] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/0bf82c9325

[12:45] *** agentzh left
[12:49] <masak> arnsholt: huh. that's another hostage situation.

[12:49] <pmichaud> good morning, #perl6   (briefly)

[12:49] <masak> o/ pm

[12:49] <jnthn> ohhai pmichaud 

[12:50] <masak> pmichaud: you're up early.

[12:50] <pmichaud> I forgot to do the star release tuesday evening (got distracted with family stuff) -- will do it later this a.m.

[12:50] <pmichaud> I'm just online early :-)

[12:50] <pmichaud> I'm usually up every day at this time, but normally its for getting kids ready for school and the like :)

[12:50] <colomon> \o

[12:50] <pmichaud> (okay, I did get up 15 minutes earlier than normal today)

[12:52] <dalek> roast: 510d9d2 | (Kodi Arfer)++ | S03-operators/short-circuit.t:

[12:52] <dalek> roast: [short-circuit.t] Rearranged RT tags.

[12:52] <dalek> roast: review: https://github.com/perl6/roast/commit/510d9d2cbc

[12:56] *** coldhead left
[13:00] <takadonet> morning all

[13:00] <masak> takadonet: \o

[13:03] *** Tedd1 left
[13:03] *** Tedd1 joined
[13:04] <pmichaud> odd anecdote of the day:  Wife's $job paged her at 3am when a system failed due to encountering an unexpected unicode character in the input:

[13:04] <pmichaud> rakudo: print chr(0x2620);

[13:04] <p6eval> rakudo 549d2a: OUTPUT«☠»

[13:04] *** tzhs left
[13:05] <masak> :)

[13:05] <masak> "System went ☠"

[13:06] <flussence> rakudo: print 0x26.chr

[13:06] <p6eval> rakudo 549d2a: OUTPUT«&»

[13:06] <gfldex> rum is the cure in case you wonder

[13:07] <flussence> (I wonder if there's something to do with urls there)

[13:07] <gfldex> or was the system just missing parrot?

[13:07] <pmichaud> .u 2620

[13:07] <phenny> U+2620 SKULL AND CROSSBONES (☠)

[13:12] <colomon> Unicode has a skull and crossbones character!?!

[13:12] <flussence> unicode's a bit of a headache at my $dayjob, I took a while to find out the other day that DBD::Pg defaults to undef charset or something...

[13:12] <pmichaud> It does.  Otherwise we wouldn't be able to represent 17th century sea communications

[13:13] *** woosley joined
[13:13] *** xabbu42 joined
[13:14] <colomon> now I want a ☠ operator for p6...

[13:15] <pmichaud> rakudo:  sub prefix:<☠>($x) { die $x; }   # how's that?

[13:15] <p6eval> rakudo 549d2a:  ( no output )

[13:15] <flussence> sub ☠ { !!! 'AVAST!' }

[13:15] <pmichaud> rakudo:  sub prefix:<☠>($x) { die $x; };  ☠ "ha ha ha";   # how's that?

[13:15] <p6eval> rakudo 549d2a: OUTPUT«ha ha ha␤  in 'prefix:<☠>' at line 22:/tmp/rxrrfNGUMV␤  in main program body at line 22:/tmp/rxrrfNGUMV␤»

[13:17] <colomon> :)

[13:21] *** drbean left
[13:28] <masak> any ideas how Perl 6 should provide the 'die-without-a-stacktrace' functionality?

[13:29] <masak> people don't seem to be to keen on adding back the 'ends with "\n"' trick from Perl 5.

[13:29] <masak> and the problem with :no-backtrace is that it's a negatively stated named parameter, somewhat of a design smell.

[13:30] *** drbean joined
[13:30] <[Coke]> sub { marine }

[13:32] <pmichaud> die :!backtrace

[13:32] <pmichaud> it's still a positively stated parameter, with a negating metaop

[13:32] <masak> pmichaud: oh, right that was the design smell.

[13:32] <masak> ;)

[13:32] <masak> having named boolean params with True as default.

[13:32] <flussence> sub die(Str, :s(:silent)) maybe

[13:33] <masak> :silent, or :brief, or :message-only, or...

[13:33] <masak> neither of them a very strong contender, IMO.

[13:33] <pmichaud> shouldn't stacktrace be a lexical pragma or something?

[13:34] <masak> that sounds like a good idea.

[13:34] <pmichaud> rather than putting it on the individual 'die'?  'die' just throws an exception -- it's up to the handler to decide what to do with it

[13:34] <masak> no die :stacktrace;

[13:34] <pmichaud> then it becomes     no stacktrace

[13:34] <masak> shouldn't the pragma be named after the feature it affects?

[13:34] <pmichaud> perhaps

[13:35] <pmichaud> could want stacktraces for warn and friends, too

[13:35] <masak> ISTR reading that somewhere.

[13:35] <masak> nod.

[13:35] <pmichaud> anyway, it sounds to me like more of a candidate for lexically-scoped control

[13:35] *** felliott joined
[13:36] <flussence> or maybe a multi sub exit(Str $last-words, Int $return = 0) ?

[13:37] <pmichaud> afk for a while

[13:37] <huf> an exit() where the first param isnt the exit code? that'd be surprising

[13:38] <flussence> that's what the multi is for :)

[13:38] <huf> oh right

[13:41] <masak> flussence: except that both the old and the new multi would take one parameter, so things like 'exit $retval' where $retval happens to be a Str will suddenly bind to your new multi...

[13:42] <flussence> hm, I guess it'd have to be the opposite order then...

[13:43] <masak> it feels like undly extending the role of &exit, though.

[13:43] *** q0tw4 joined
[13:44] <flussence> it seems sensible, to me anyway, to have die/$something in the same way there's warn/note.

[13:47] *** FlyHeight joined
[13:52] <flussence> .oO( maybe &footnote )

[13:58] *** felliott left
[14:04] *** stifynsemons joined
[14:05] *** FlyHeight left
[14:05] *** kaare__ joined
[14:06] *** kaare_ left
[14:06] *** drbean left
[14:07] *** plobsing left
[14:09] *** mberends left
[14:09] *** Kodi left
[14:13] *** kst left
[14:14] *** kst joined
[14:16] *** felliott joined
[14:22] *** bacek left
[14:24] *** Mowah joined
[14:35] *** bacek joined
[14:37] *** fhelmberger joined
[14:40] *** cafesofie left
[14:42] *** Mowah left
[14:43] *** leprevost joined
[14:45] *** stifynsemons left
[14:47] *** vmspb joined
[14:49] *** VXZ left
[14:55] *** woosley left
[14:57] *** tzhs joined
[15:04] *** menfou joined
[15:06] *** menfou left
[15:06] *** felliott left
[15:07] *** Cyrus left
[15:10] <shortcircuit> diakopter: "/me (found rosettacode)" ... That sounds disturbingly like a religious statement. :P

[15:11] *** menfou joined
[15:12] *** menfou left
[15:13] <masak> "have you found rosettacode in your life?"

[15:17] *** cafesofie joined
[15:18] *** MayDaniel joined
[15:18] <moritz_> are you true rosettacode believer? :-)

[15:18] <masak> What Would RosettaCode Do?

[15:22] <shortcircuit> Actually, my face-to-face social groups are accustomed to me talking about RC to just about anyone I talk to. (It helps me set a perspective for analogy in discussion). It's gotten to be something of a joke, so I sometimes lead off with, "has anyone spoken to you about Rosetta Code?"

[15:25] *** cjk101010 left
[15:26] *** karupanerura joined
[15:26] <masak> shortcircuit++ # RC

[15:27] *** Patterner left
[15:29] *** stifynsemons joined
[15:29] *** plobsing joined
[15:30] *** Psyche^ joined
[15:30] *** Psyche^ is now known as Patterner

[15:36] *** jevin joined
[15:36] *** wtw left
[15:38] *** am0c^ joined
[15:40] *** am0c left
[15:51] <masak> so, I thought I'd update S24 with signatures for &skip and &todo. which one should we change? :)

[15:51] <moritz_> perl 5's Test::More has a todo_skip $why, $how_many

[15:51] <masak> good.

[15:52] <moritz_> so let's keep that order

[15:52] <masak> I was just going to suggest ($reason, $count), which is the same.

[15:52] <masak> a cursory read of Rakudo's Test.pm suggests it should be that way.

[15:52] <masak> (becuase there's a todo($reason) and a skip($reason))

[15:53] <moritz_> maybe we can default $count to 1

[15:53] <flussence> I found myself writing perl5 tests yesterday and wishing its Test.pm was as nice as Rakudo's.

[15:54] <masak> moritz_: right, that's isomorphic to having a multi without the $count.

[15:55] <masak> Rakudo already has it that way.

[15:56] <moritz_> flussence: you can most of the stuff with Test::More and Test::Exceptions or so

[15:56] <daxim> which is all rolled into Test::Most for convenience

[15:57] <daxim> and I really hope you meant something modern Test::Builder-toolchain derived and not the actual ancient Test.pm

[15:57] *** stifynsemons left
[15:58] *** plobsing left
[15:59] *** necrodearia left
[15:59] *** necrodearia joined
[16:00] <flussence> It was whichever one I found first. Seemed good enough to me so I went with it :)

[16:04] <flussence> (and besides, $dayjob is sorely lacking *any* TDD right now, anything's better than nothing)

[16:05] *** fhelmberger left
[16:05] <daxim> pffft, that's enough to flip the bozo bit srsly wtfbbq

[16:05] *** Mowah joined
[16:12] * masak hugs daxim

[16:12] *** tzhs left
[16:12] <daxim> programming is serious business

[16:12] *** leprevost left
[16:13] *** leprevost joined
[16:13] *** bacek left
[16:13] <masak> daxim: according to the logs, you're the fifth person *ever* to use that metaphor on the channel. we don't flip that bit often in here :P

[16:14] <daxim> that means the internet becomes better on the whole

[16:14] <masak> (previous users: rgs, chip, PerlJam, Schwern, TimToady)

[16:14] <masak> so, um, sixth. :)

[16:14] *** q0tw4 left
[16:15] <masak> daxim: either that, or we're all bozo-compatible in here :P

[16:16] *** MayDaniel left
[16:17] *** kst left
[16:17] *** Alias left
[16:17] *** kst joined
[16:23] <tadzik> bozo bit?

[16:23] *** envi left
[16:26] *** felliott joined
[16:27] <TimToady> morning bozebras

[16:29] *** shi joined
[16:30] <tadzik> so "flip the bozo bit" is "stop thinking"?

[16:31] * flussence just found out about `prove -e`

[16:32] *** [Coke] left
[16:32] <colomon> tadzik: no, it's more "conclude that the other guy is a bozo so I don't have to pay attention to him any more."

[16:33] *** karupanerura left
[16:34] <masak> right, one flips the bozo bit on the other person.

[16:34] <masak> it's a metaphor which could only arise on the Intertubes in the first place.

[16:37] <TimToady> masak: er, that is a bit inaccurate

[16:37] <TimToady> considering I invented kill files for Usenet

[16:37] <TimToady> which ran largely on uucp

[16:38] <gottreu> Networks before the Internet are fantasy like dragons and leprechauns.

[16:39] <TimToady> (though kill files started out to cancel uninteresting threads, they were quickly extended to search on most anything in the article, including author)

[16:39] <masak> TimToady: I stand corrected. Usenet, yes, I've heard of it... :P

[16:44] *** plobsing joined
[16:49] <diakopter> phenny: tell sorear  pmurias didn't quite use the right syntax for phenny: :)  05:05 < pmurias> tell sorear re -Bnam you mean -Bclisp?

[16:49] <phenny> diakopter: I'll pass that on when sorear is around.

[16:52] *** JimmyZ left
[16:54] *** Mowah left
[16:56] *** Axius joined
[16:59] <TimToady> rakudo: exit note "Phooey"

[16:59] <p6eval> rakudo 549d2a: OUTPUT«Phooey␤»

[17:00] <TimToady> rakudo: say +(note "Phooey")

[17:00] <p6eval> rakudo 549d2a: OUTPUT«Phooey␤1␤»

[17:01] <TimToady> masak: ^^ die without a stacktrace

[17:02] *** kensanata left
[17:02] <masak> a variation on 'exit say'. cute :)

[17:02] <masak> TimToady: what are the conditions under which a &say or a &note call might return False?

[17:03] *** mtk left
[17:03] <masak> (to $*OUT and $*ERR, respectively)

[17:03] *** timbunce left
[17:03] <TimToady> rakudo: sub prefix:<☠>($x) { exit note $x; }; ☠ "Avast!"

[17:03] <p6eval> rakudo 549d2a: OUTPUT«Avast!␤»

[17:03] <masak> TimToady: also, I might not want "exit", I might actually want to throw the exception.

[17:03] <TimToady> generally you only get a failure on an IO error, such as disk full

[17:04] <masak> TimToady: I recently encountered an anti-social (Java) library that did &exit rather than &die.

[17:04] <TimToady> and maybe exit Failure should fail :)

[17:04] <masak> :)

[17:04] <masak> TimToady: so we meant to exit, but the program fails to produce the error message and continues? doesn't sound too great... :P

[17:05] <masak> oh wait, it fails.

[17:05] <masak> never mind. :)

[17:05] *** leprevost left
[17:05] <TimToady> actually, I'd exit anyway, but print the failure's message before exit 1 ing

[17:05] <colomon> rakudo: sub infix:<☠>($x, $n) { exit note $x x $n; }; ☠ "Avast!"

[17:05] <p6eval> rakudo 549d2a: OUTPUT«===SORRY!===␤Confused at line 22, near "\u2620 \"Avast!\""␤»

[17:06] <colomon> rakudo: sub infix:<☠>($x, $n) { exit note $x x $n; };  "Avast!" ☠ 3

[17:06] <p6eval> rakudo 549d2a: OUTPUT«Avast!Avast!Avast!␤»

[17:06] <TimToady> but maybe we should reserve ☠ for our "nor" operator :)

[17:07] <diakopter> evalbot control restart

[17:07] *** p6eval left
[17:07] *** p6eval joined
[17:07] *** ChanServ sets mode: +v p6eval

[17:07] <masak> TimToady: nevertheless, the 'exit note' pattern is cute, but it doesn't replace 'die "...\n"' in my opinion, because sometimes I want to CATCH.

[17:08] <TimToady> and how come there's no composing enclosing flag character to put around ☠?

[17:08] <TimToady> well, of course

[17:08] <TimToady> 'exit note' is for when you want to be antisocial

[17:09] *** timbunce joined
[17:09] <diakopter> perlesque: https://gist.github.com/798791

[17:09] <p6eval> perlesque: OUTPUT«␤Unhandled Exception: System.MissingMethodException: Cannot find method GetRange in System.Collections.Generic.List`1[[knapsackItem, p6env_1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]␤  at sprixel.TypeInfo.FindMethod (System.Type t, System.String name,

[17:09] <p6eval> ..sprixel.Operand…

[17:09] <TimToady> it's like not giving your friends the chance to argue you out of killing yourself

[17:10] <diakopter> p6eval now accepts gist urls

[17:10] <TimToady> what could possibly go wrong...

[17:11] *** mtk joined
[17:11] <dalek> evalbot: dbdf383 | (Perl 6 Evalbot)++ | lib/EvalbotExecuter.pm:

[17:11] <dalek> evalbot: give p6eval the ability to accept gist.github.com URLs

[17:11] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/dbdf383865

[17:12] <TimToady> cool idea though

[17:13] *** kst left
[17:13] <diakopter> hey, it's my VPS :P

[17:13] <diakopter> but really, what could go wrong that couldn't already go wrong

[17:13] <masak> longer scripts, I guess.

[17:13] <diakopter> heh

[17:13] <masak> but that should be OK.

[17:13] <masak> diakopter++

[17:14] * TimToady is waiting for the first quine that sends its invocation back to #perl6 recursively

[17:15] <diakopter> I think au did that at one time, but made it terminate after a few

[17:15] <masak> a script that logs in, posts itself to a p6eval, and logs out? :)

[17:15] <diakopter> hah

[17:16] *** kst joined
[17:16] <diakopter> hm... stack frames *in* IRC

[17:16] *** jimmy1980 joined
[17:16] <masak> talk about computing in the cloud.

[17:16] <TimToady> your mission is now to invent lexical IRC scoping

[17:18] <diakopter> done. use new channels for activations, usernames hold values and reply when queried for value

[17:18] *** jevin left
[17:18] <plobsing> all you can do is send a message

[17:19] <TimToady> it is enough

[17:20] <TimToady> one could view the Game of Life as nothing but message sending, and it's turing complete

[17:20] <diakopter> even the 1d edition?  oh wait....

[17:20] <TimToady> well, you have to be able to add and decide as well

[17:21] * TimToady imagines freenode as the first real AI

[17:21] <diakopter> if adders/gates can be made in minesweeper, then surely in Life...

[17:22] * diakopter ponders maybe going to $work today

[17:22] * TimToady ponders the fact that he's not going to India today

[17:22] <TimToady> (consulate is being dilatory)

[17:23] *** wooden joined
[17:23] <diakopter> TimToady: take a look at my gist above.. it's your prog, typo'd to perlesque

[17:23] <TimToady> maybe they didn't like the fact that I've visited Norway

[17:23] <TimToady> I note that it didn't work :P

[17:24] <diakopter> it works on .net.  a small matter of fixing a bug in the generics compiler

[17:25] * diakopter thinks

[17:27] <TimToady> also, it's not Perl 6, so it's OT here... :P

[17:28] *** daxim left
[17:28] <diakopter> :( where'z that prog use non-kosher p6 subset?

[17:28] <diakopter> oh, the attributes

[17:29] <diakopter> wait, really?

[17:30] <diakopter> I mean, obviously it's not *idiomatic* Perl 6

[17:30] <TimToady> your last has is missing its semicolon, and Perl 6 doesn't come with a 'string' type

[17:31] <diakopter> oo; easy to fix those 2

[17:31] <slavik> TimToady: but it has string context ;)

[17:31] <slavik> unless I am wrong

[17:31] <diakopter> hm, odd it allowed that missing ;

[17:32] <TimToady> and it's not clear whether we'll have a List[] role or not

[17:33] <diakopter> no, but just imagine there's a "use AllOfCLRBuiltins;" at the top (for string and List[])

[17:33] <TimToady> std: gist

[17:33] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤ 'gist' used at line 1␤Check failed␤FAILED 00:01 117m␤»

[17:33] <TimToady> TimToady 12

[17:33] <TimToady>     * Dashboard

[17:33] <TimToady>     * Inbox 0

[17:33] <TimToady>     * Account Settings

[17:33] <TimToady>     * Log Out

[17:33] <TimToady>     * New Gist

[17:33] <TimToady>     * My Gists

[17:33] <TimToady>     * Starred Gists

[17:33] <TimToady>     * All Gists

[17:33] <TimToady>     * Back to GitHub

[17:33] <TimToady> Anonymous (owner)

[17:33] <TimToady> Revisions

[17:33] <TimToady>     * cbf435 16 minutes ago

[17:33] <TimToady>     * fd1ff3 26 minutes ago

[17:34] <TimToady> gist: 798791 Download_button fork star

[17:34] <TimToady> public

[17:34] <TimToady> Private Gist

[17:34] <TimToady> All pages are served over SSL and all pushing and pulling is done over SSH. No one may fork, clone, or view it unless they are given this private URL.

[17:34] <TimToady> Every gist with this icon (private) is private.

[17:34] <TimToady> public

[17:34] <TimToady> Public Gist

[17:34] <TimToady> Anyone may fork, clone, or view it.

[17:34] <TimToady> Every repository with this icon (public) is public.

[17:34] <TimToady> Description: 	

[17:34] <TimToady> dsaf

[17:34] <TimToady> Public Clone URL: 	git://gist.github.com/798791.git

[17:34] <TimToady> Give this clone URL to anyone.

[17:34] <TimToady> git clone git://gist.github.com/798791.git gist-798791

[17:34] <TimToady> Embed All Files: 	show embed

[17:34] <TimToady> ddsaasdfsdaf #

[17:34] <TimToady> embed

[17:34] <TimToady> raw

[17:34] <TimToady> 1

[17:34] <diakopter> hm

[17:34] <TimToady> 2

[17:34] <TimToady> 3

[17:34] <TimToady> 4

[17:34] <TimToady> 5

[17:34] <TimToady> 6

[17:35] <TimToady> 7

[17:35] <TimToady> 8

[17:35] <TimToady> 9

[17:35] <TimToady> 10

[17:35] <TimToady> 11

[17:35] <TimToady> 12

[17:35] <TimToady> 13

[17:35] <TimToady> 14

[17:35] <TimToady> 15

[17:35] <TimToady> 16

[17:35] <TimToady> 17

[17:35] <takadonet> ....

[17:35] <TimToady> 18

[17:35] <TimToady> 19

[17:35] <TimToady> 20

[17:35] <TimToady> 21

[17:35] <TimToady> 22

[17:35] <TimToady> 23

[17:35] <TimToady> 24

[17:35] <TimToady> 25

[17:35] <TimToady> 26

[17:35] <TimToady> 27

[17:35] <TimToady> 28

[17:35] <TimToady> 29

[17:35] *** Vlavv_ left
[17:35] <TimToady> 30

[17:36] <TimToady> 31

[17:36] <TimToady> 32

[17:36] <TimToady> 33

[17:36] * diakopter wonders what happened to my #perl6 ops

[17:36] <TimToady> 34

[17:36] <TimToady> 35

[17:36] <TimToady> 36

[17:36] <TimToady> 37

[17:36] <am0c^> tehee?

[17:36] <TimToady> 38

[17:36] <TimToady> 39

[17:36] <TimToady> 40

[17:36] <TimToady> 41

[17:36] <TimToady> 42

[17:36] <TimToady> 43

[17:36] <TimToady> 44

[17:36] <TimToady> 45

[17:36] <TimToady> 46

[17:36] <am0c^> what's happening here?

[17:36] <TimToady> 47

[17:36] <TimToady> 48

[17:36] <edenc> larry's cat can count, how cute

[17:36] <masak> halp, TimToady is malfunctioning! :(

[17:36] <TimToady> 49

[17:36] <TimToady> 50

[17:36] <TimToady> 51

[17:36] <TimToady> 52

[17:36] <TimToady> 53

[17:36] <TimToady> 54

[17:37] <TimToady> 55

[17:37] <TimToady> 56

[17:37] <TimToady> 57

[17:37] <TimToady> 58

[17:37] <TimToady> 59

[17:37] <am0c^> meow

[17:37] <takadonet> masak: no!!!

[17:37] <TimToady> 60

[17:37] *** mtk left
[17:37] <TimToady> 61

[17:37] <masak> diakopter: maybe you need to auth yourself with ChanServ or something?

[17:37] <TimToady> 62

[17:37] <TimToady> 63

[17:37] <TimToady> 64

[17:37] <TimToady> 65

[17:37] <TimToady> 66

[17:37] <TimToady> 67

[17:37] * masak doesn't remember exactly what the procedure is...

[17:37] <TimToady> 	

[17:37] <diakopter> oh; I'm not?

[17:37] <TimToady> class knapsackItem{

[17:37] <TimToady>   has string $!name; has int $!weight;has int $!unit

[17:37] <TimToady>   method ToString(-->string) {

[17:37] *** MayDaniel joined
[17:37] <TimToady>     return self.name ~ ' ' ~ self.weight ~ ' ' ~ self.unit

[17:37] <TimToady>   }

[17:37] <TimToady> }

[17:37] <TimToady> sub makeItem(string $n, int $w, int $u --> knapsackItem) {

[17:37] <TimToady> my $i = knapsackItem.new;

[17:37] <TimToady> $i.name = $n; $i.weight = $w; $i.unit = $u;

[17:37] <am0c^> ..er..

[17:37] <TimToady> return $i

[17:38] <TimToady> }

[17:38] <TimToady> sub func(List[knapsackItem] @a, int $w, int $v --> List[knapsackItem]){

[17:38] <TimToady>   #say($w ~ ' ' ~ $v);

[17:38] <TimToady>   if ($w == 0 || @a.Count == 0) {

[17:38] <TimToady>     my $z = List[knapsackItem].new();

[17:38] <TimToady> $z.Add(makeItem('',0,$v));

[17:38] <masak> on the right side, I probably never would have gotten to see this code otherwise... :P

[17:38] <TimToady>     return $z;

[17:38] <TimToady>   }

[17:38] <TimToady>   my @rest = @a.GetRange(1, @a.Count - 1);

[17:38] *** ChanServ sets mode: +o diakopter

[17:38] <TimToady>   my $i = @a[0];

[17:38] <TimToady>   my @skip = func(@rest,$w,$v);

[17:38] <TimToady>   if ($w >= $i.weight) { # next one fits

[17:38] *** TimToady was kicked by diakopter (TimToady))
[17:38] <masak> \o/

[17:38] <am0c^> wow

[17:38] <diakopter> heh

[17:38] <masak> diakopter++

[17:38] <diakopter> finally...

[17:38] *** TimToady joined
[17:38] <diakopter> I didn't realize I wasn't auth'd

[17:38] <TimToady> it worked

[17:39] <gabiruh> hail to ctrl+v followed by /kick

[17:39] <takadonet> TimToady: what did?

[17:39] <TimToady> the /kick :)

[17:39] <TimToady> which diakopter++ owed me one of :)

[17:39] <masak> :P

[17:40] <diakopter> masak++ # figuring out me proglem

[17:40] *** impious joined
[17:40] <masak> just a stab in the dark ;)

[17:40] <TimToady> std: https://gist.github.com/798791

[17:40] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Malformed has at /tmp/bGxmfunjtZ line 4:␤------> [32m  has [33m⏏[31mstring $!name; has int $!weight;has int [0m␤    expecting any of:␤   scoped declarator␤      typename␤Parse failed␤FAILED 00:01 119m␤»

[17:41] <diakopter> oooo meaningful line numbers

[17:41] *** jimmy1980 left
[17:42] <TimToady> std: https://gist.github.com/1234567  # does this parse the error?

[17:42] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused at /tmp/zynlHXPOYX line 1:␤------> [32mhttps:[33m⏏[31m//gist.github.com/1234567  # does this p[0m␤    expecting any of:␤        coloncircumfix␤ signature␤Undeclared routine:␤  'https' used at line 1␤Parse failed␤FAILED 00:01 119m␤»

[17:42] <TimToady> std: https://gist.github.com/1234567

[17:42] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Whitespace is required between alphanumeric tokens at /tmp/Gq54AjWpVk line 4:␤------> [32ml xmlns="http://www.w3.org/1999/xhtml" x[33m⏏[31mml:lang="en" lang="en">[0m␤Two terms in a row at /tmp/Gq54AjWpVk line 4:␤------>

[17:42] <p6eval> ..[32m://www.w3.org/1999/xht…

[17:42] <TimToady> heh

[17:43] <TimToady> diakopter: ^^

[17:44] <TimToady> interesting that it got to line 4

[17:44] <diakopter> teh heck

[17:44] <diakopter> oh

[17:46] <diakopter> evalbot control restart

[17:46] *** p6eval left
[17:47] *** p6eval joined
[17:47] *** ChanServ sets mode: +v p6eval

[17:47] <diakopter> std: https://gist.github.com/1234567

[17:47] <diakopter> o__

[17:47] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused at /tmp/v_DxMoWWPv line 1:␤------> [32mhttps:[33m⏏[31m//gist.github.com/1234567[0m␤    expecting any of:␤       coloncircumfix␤ signature␤Undeclared routine:␤  'https' used at line 1␤Parse failed␤FAILED 00:01 119m␤»

[17:47] <TimToady> LTA

[17:48] <moritz_> what, that it doesn't fetch the gist automatically?

[17:48] <moritz_> patches welcome :-)

[17:48] <diakopter> moritz_: but it does. :)

[17:49] <moritz_> it didn't in the last instance, no?

[17:49] *** jimmy1980 joined
[17:49] <diakopter> that gist doesn't exist

[17:49] <TimToady> the question is how it should report that

[17:49] <diakopter> evalbot control restart

[17:49] *** p6eval left
[17:49] <TimToady> parsing as perl6 is LTA

[17:49] <moritz_> 404 gist not found

[17:49] <masak> +1

[17:50] *** p6eval joined
[17:50] *** ChanServ sets mode: +v p6eval

[17:50] * diakopter had already added 'gist not found'

[17:50] <diakopter> std: https://gist.github.com/1234567

[17:50] <p6eval> std 625303c: gist not found

[17:50] *** molaf left
[17:50] <diakopter> "I couldn't catch your gist"

[17:50] <TimToady> how 'bout passing the rest of the command as args?

[17:50] <diakopter> ooo

[17:51] <diakopter> well

[17:51] <TimToady> seems no more abusable than the gist itself...

[17:51] <diakopter> currently we build a shell call string

[17:51] <diakopter> but yeah it could be saferified such that args could be passed much more cleanly

[17:51] <moritz_> rakudo: https://gist.github.com/1234567

[17:51] <p6eval> rakudo 549d2a: gist not found

[17:52] <jnthn> evening :)

[17:52] *** Vlavv_ joined
[17:52] <moritz_> \o jnthn 

[17:52] <diakopter> er, not a shell call string, but just no escaping/sanitizing goes on.

[17:53] <moritz_> yes, we'd have to be very careful with shell metachars

[17:53] <TimToady> Injections "Я" Us

[17:54] * diakopter gets to try out man-or-boy now

[17:55] <diakopter> that didn't sound right

[17:55] <jnthn> lol :)

[17:55] <moritz_> fwiw last time I check, niecza passed man-or-boy

[17:55] <diakopter> actually we could also allow .t URLs in the roast repo...

[17:56] *** ribasushi joined
[17:57] <colomon> ,

[17:57] <dalek> evalbot: fea0755 | (Perl 6 Evalbot)++ | lib/EvalbotExecuter.pm:

[17:57] <dalek> evalbot: fix unhandled case pointed out by TimToady++

[17:57] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/fea07559bc

[17:57] <TimToady> you might as well allow just about any uri

[17:58] <moritz_> -1

[17:58] *** kaare_ joined
[17:58] *** kaare__ left
[17:58] <TimToady> how is it different from allowing any gist?

[17:58] <moritz_> too easy to DoS

[17:58] *** jimmy1980 left
[17:58] <diakopter> cuz I could get my VPS banned/cancelled

[17:59] <diakopter> if the wrong urls are entered

[18:00] *** am0c^ left
[18:01] <diakopter> hm, actually, there's one more broken/exploitable case... I'll let TimToady or others find it before I fix it

[18:01] <diakopter> commute,ish&

[18:02] *** GinoMan left
[18:04] *** gaz_ joined
[18:05] *** gaz_ left
[18:05] <moritz_> std: https://gist.github.com/798909

[18:05] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routines:␤        'b0rked' used at line 1␤        'echo' used at line 1␤  'href' used at line 1␤Check failed␤FAILED 00:01 121m␤»

[18:06] <diakopter> moritz_ wins

[18:06] <diakopter> feel free to fix it

[18:07] <diakopter> (I know how I was going to fix it... but feel free to work on it too)

[18:07] <diakopter> wait, no

[18:08] <diakopter> that dtrt

[18:08] <diakopter> but that's what I thought was broken

[18:09] * diakopter commute IRL

[18:09] *** jimmy1980 joined
[18:10] *** cdarroch joined
[18:10] *** cdarroch left
[18:10] *** cdarroch joined
[18:12] *** dakkar left
[18:25] *** timbunce left
[18:30] *** jevin joined
[18:32] *** timbunce joined
[18:35] *** Axius left
[18:39] *** Layla_91 joined
[18:43] <moritz_> diakopter: I guess the right URL is just earlier in the page

[18:59] *** cafesofie left
[19:03] *** xabbu42 left
[19:05] <jnthn> pmichaud: ping

[19:07] <diakopter> moritz_: yeah

[19:07] *** diakopter sets mode: -o diakopter

[19:08] *** Layla_91 left
[19:18] *** cafesofie joined
[19:18] *** klunky joined
[19:18] *** cafesofie left
[19:20] *** icwiener joined
[19:21] <cxreg> does p6's given/when return a value like they're adding in 5.14?

[19:21] <cxreg> or would you better wrap it in a gather

[19:22] <colomon> they return a value

[19:22] <colomon> I don't know about 5.14

[19:22] <cxreg> http://www.effectiveperlprogramming.com/blog/683

[19:22] *** timbunce left
[19:22] <colomon> rakudo: say given (1,2,3).pick { when 1 { 42; }; when 2 { 100; }; when 3 { -1; }; }; 

[19:22] <p6eval> rakudo 549d2a: OUTPUT«===SORRY!===␤Confused at line 22, near "say given "␤»

[19:23] <masak> colomon: 'say do given'

[19:23] <colomon> rakudo: say do given (1,2,3).pick { when 1 { 42; }; when 2 { 100; }; when 3 { -1; }; }; 

[19:23] <p6eval> rakudo 549d2a: OUTPUT«100␤»

[19:23] <colomon> masak++

[19:23] <colomon> rakudo: my $a = given (1,2,3).pick { when 1 { 42; }; when 2 { 100; }; when 3 { -1; }; };  say $a

[19:23] <p6eval> rakudo 549d2a: OUTPUT«===SORRY!===␤Confused at line 22, near "my $a = gi"␤»

[19:23] <masak> 'do given'

[19:23] <colomon> rakudo: my $a = do given (1,2,3).pick { when 1 { 42; }; when 2 { 100; }; when 3 { -1; }; };  say $a

[19:23] <p6eval> rakudo 549d2a: OUTPUT«42␤»

[19:24] <masak> unlike 'gather', 'given' blocks do not form an expression on their own.

[19:24] <masak> 'do' is used to turn a statement into an expression.

[19:26] <tadzik> so that it returns a value?

[19:26] <masak> so that it parses. :)

[19:26] <tadzik> -_-

[19:26] <masak> the statement also returns a value.

[19:26] <colomon> given blocks always return a value.  but sometimes they don't parse without do.

[19:26] <tadzik> but is not assignable?

[19:28] <moritz_> some constructs expect an expression

[19:28] <moritz_> and 'do' turns a statement into an expression

[19:28] <moritz_> for example if EXPR BLOCK

[19:28] <tadzik> mhm

[19:29] *** timbunce joined
[19:29] <moritz_> so you can write   if do { for 1..3 { ... } } { ... }

[19:30] <masak> rakudo: say if 42 { "OH HAI" } else { "OH NOES" }

[19:30] <p6eval> rakudo 549d2a: OUTPUT«===SORRY!===␤Confused at line 22, near "say if 42 "␤»

[19:30] <masak> rakudo: say do if 42 { "OH HAI" } else { "OH NOES" }

[19:30] <p6eval> rakudo 549d2a: OUTPUT«OH HAI␤»

[19:30] <masak> \o/

[19:30] <masak> 'do' is an statement-to-expression adapter.

[19:30] <masak> s/an/a/

[19:31] <moritz_> 20:28 < moritz_> and 'do' turns a statement into an expression

[19:31] <moritz_> that's what I meant :-)

[19:37] <flussence> 'do' does stuff, 'given' *is* stuff

[19:39] <flussence> rakudo: say do if 1 { 2 } else { 3 };

[19:39] <p6eval> rakudo 549d2a: OUTPUT«2␤»

[19:39] <flussence> (where 'stuff' means 'control structure')

[19:41] <tadzik> rakudo: .say if 42 { "OH HAI" } else { "OH NOES" }

[19:41] <p6eval> rakudo 549d2a: OUTPUT«===SORRY!===␤Confused at line 22, near ".say if 42"␤»

[19:42] <tadzik> ah

[19:43] <flussence> rakudo: .say.assuming do if True { False }

[19:43] <p6eval> rakudo 549d2a: OUTPUT«===SORRY!===␤Confused at line 22, near ".say.assum"␤»

[19:43] <flussence> aww

[19:44] <masak> moritz_: <masak> 'do' is used to turn a statement into an expression.

[19:44] <masak> moritz_: me too :)

[19:45] <masak> flussence: what did you expect that to do?

[19:45] <flussence> 0

[19:45] <flussence> :)

[19:45] <flussence> (oh wait, this isn't perl5)

[19:45] <flussence> s/0/Bool::False/

[19:45] <masak> rakudo: .say given do if True { False }

[19:45] <p6eval> rakudo 549d2a: OUTPUT«Bool::False␤»

[19:53] *** plobsing left
[19:59] <moritz_> &say.assuming(do if True { False }).()

[19:59] <moritz_> rakudo: &say.assuming(do if True { False }).()

[19:59] <p6eval> rakudo 549d2a: OUTPUT«Bool::False␤»

[20:00] *** icwiener left
[20:00] *** justatheory joined
[20:01] <masak> rakudo: .() given &say.assuming: do if True { False }

[20:01] <p6eval> rakudo 549d2a: OUTPUT«Bool::False␤»

[20:01] <masak> :)

[20:09] *** [Coke] joined
[20:11] *** whiteknight left
[20:13] *** whiteknight joined
[20:16] *** cognominal left
[20:18] *** cognominal joined
[20:21] *** whiteknight left
[20:24] *** plobsing joined
[20:26] * moritz_ eventually comes to the conclusion that Perl 6 is mad

[20:27] <PerlJam> we live in a mad world

[20:28] <tadzik> heh, that reminds me of a quote I have from #moose

[20:29] *** whiteknight joined
[20:29] *** Vlavv_ left
[20:30] <tadzik> "f*** this shit, I am going to Python. NO CHOICES MEANS YOU CAN NEVER BE WRONG!"

[20:30] *** coldhead joined
[20:30] <slavik> that makes no sense ... python in itself is wrong ...

[20:30] <slavik> so you can never be right ...

[20:30] <huf> ssh, dont tell them that! we dont want the pythonist masses to have a collective breakdown

[20:30] <coldhead> lol ssh

[20:31] <huf> at least, i dont want to see crying hopeless people 

[20:37] *** bacek joined
[20:37] *** Vlavv_ joined
[20:51] *** nadim_ left
[20:52] *** nadim_ joined
[20:56] *** Vlavv_ left
[20:59] *** Mowah joined
[21:09] *** Vlavv_ joined
[21:15] *** Vlavv_ left
[21:25] *** gimix_ joined
[21:26] *** Chat9492 joined
[21:26] *** Layla_91 joined
[21:27] <dalek> 6model: efcb917 | (Martin Berends)++ | java/compiler/ (2 files):

[21:27] <dalek> 6model: [java] port changes from dotnet/ in PAST::Op compilation

[21:27] <dalek> 6model: review: https://github.com/jnthn/6model/commit/efcb917e2b

[21:27] *** Chat9492 left
[21:27] <masak> Python seems to be an OK first language.

[21:27] <gimix_> hi, what are different between OOP of perl5.x and perl6? The OOP in perl6 will faster in prosessing?

[21:27] <masak> gimix_: how do you mean, "faster in processing"?

[21:27] <masak> maybe if you give an example of the aspect you care about...

[21:27] *** whiteknight left
[21:28] *** Vlavv_ joined
[21:30] <jnthn> Layla_91: Привет! o/

[21:30] <jnthn> gimix_: There is a bunch more syntax related to OO stuff.

[21:30] <gimix_> masak:my team wrote two scripts: one for OOP style and another in procedure style in perl 5.1 (centos box). The result is procedure style give faster in load time

[21:31] <jnthn> gimix_: It's a bit more declarative, but behind the scenes there's a meta-model, so a lot of the customizability is still there.

[21:31] *** whiteknight joined
[21:31] <masak> gimix_: ok. well, all I can say is that the balance might be a bit more even in Perl 6.

[21:32] <masak> gimix_: then again, don't expect load times comparable to Perl 5 in any of the Perl 6 implementations currently.

[21:32] <Layla_91> jnthn: Здрасти! ^_^

[21:32] <jnthn> In reality, OO is a kinda "level of indirection". You don't know where you're dispatching to until you ask the object.

[21:33] <gimix_> masak: jnth: OOP is built in perl6's core ?

[21:33] <masak> gimix_: yes.

[21:33] *** plobsing left
[21:33] <masak> gimix_: Perl 6 is designed with OO in mind from the start.

[21:33] <jnthn> In *some* cases you can work it out statically, as an optimization. But rarely.

[21:34] <masak> jnthn: right, the idea with the level-of-indirection is to buy you dynamism. which means you sell a bit of efficiency.

[21:34] <jnthn> Aye.

[21:34] <jnthn> gimix_: Perl 6 is much more deeply OO than Perl 5.

[21:34] <masak> OO all the way down. :)

[21:34] <slavik> and we get object.blah().blah2().blah3().blah4().blah5() and that returns an excel spreadsheet made from an xmlrpc call :D

[21:35] <diakopter> we have those.

[21:35] *** plobsing joined
[21:35] <gimix_> thanks so much

[21:35] <jnthn> I hope you implemented a custom meta-object to translate the blah call into a web service call. :P

[21:35] <diakopter> generated by java in oracle's ebs

[21:35] <masak> gimix_: you're welcome. we're happy to answer your questions!

[21:35] <slavik> jnthn: obviously, that is exactly what blah() does, it's in the docs ;)

[21:36] <gimix_> jnthn: do you have sample about meta-object implement?

[21:36] <masak> rakudo: class A { has $.b; has $.c }; say A.^attrs.perl

[21:36] <p6eval> rakudo 549d2a: OUTPUT«Method 'attrs' not found for invocant of class ''␤  in main program body at line 22:/tmp/3sALODOe12␤»

[21:36] <masak> rakudo: class A { has $.b; has $.c }; say A.^attributes.perl

[21:36] <p6eval> rakudo 549d2a: OUTPUT«Method 'attributes' not found for invocant of class ''␤  in 'Mu::attribs' at line 1284:CORE.setting␤  in 'Mu::perl' at line 1293:CORE.setting␤  in main program body at line 1␤»

[21:36] <masak> :/

[21:37] <slavik> D:

[21:37] * masak consults the source code

[21:37] <slavik> is parrot still sort of slow?

[21:37] <diakopter> O_O_

[21:37] <tadzik> http://isparrotfastyet.com/

[21:37] <slavik> ooh

[21:37] <slavik> tadzik: what does that measure?

[21:37] <diakopter> that's not much of a history

[21:38] <jnthn> gimix_: Not quite there with custom meta-objects in Rakudo yet, but it's being worked on.

[21:38] <jnthn> gimix_: But to get an idea, see https://github.com/perl6/nqp-rx/blob/nom/src/metamodel/how/NQPClassHOW.pm

[21:38] *** justatheory left
[21:38] <jnthn> gimix_: Which is a basic class implementation.

[21:38] <masak> tadzik: I thought such sites would say either "YES" or "NO", not give numbers :P

[21:38] <Layla_91> tadzik: entire url devoted for bench marking.. nice :)

[21:38] <tadzik> slavik: benchmarks of some oofib, rakudo build time or spectests, iirc, and the bench scripts from "IsRakudoFastYet" :)

[21:39] <tadzik> http://gil.di.uminho.pt/users/smash/rakudo-bench.html

[21:39] <slavik> ty

[21:39] <slavik> woah!, dice.p6 got really fast ... quicker rand() functions?

[21:40] * tadzik , proudly:

[21:40] <tadzik> YES!

[21:40] <plobsing> unfortunately that info hasn't been updated for months :(

[21:40] <tadzik> yeah

[21:41] <colomon> smash was trying to teach the rest of us how to do it.  I should have paid more attention.  :(

[21:41] <slavik> is there a doc on how to do it?

[21:42] <plobsing> use the source: http://gil.di.uminho.pt/users/smash/run_bench.pl.html

[21:46] * jnthn goes to hack on native attrs a little more... :)

[21:47] <plobsing> jnthn++ # adding a t to naive attrs

[21:48] <jnthn> :P

[21:49] <jnthn> plobsing: I already did those. My naivety cost me allocating two GCables per attribute access. :)

[21:49] <masak> oh the naïvety

[21:49] <masak> :)

[21:49] <jnthn> I know, it drives me dotty.

[21:50] <masak> :P

[21:50] <masak> "I remember when I was young and naïf. the whole experience cost me two GCables! per attribute access!"

[21:51] <masak> just let inflation have its course, and soon you'll be paying 10 GCables for a carton of milk...

[21:51] <diakopter> What's a GameCubable

[21:52] <masak> I thought it was a kind of Cable.

[21:52] *** Alias joined
[21:52] <masak> maybe Clark Gable's evil twin, Glark Cable...

[21:55] *** MayDaniel left
[21:58] *** stkowski joined
[21:59] <rokoteko> Gargabe Collectables, ie. stuff that need to be carbage collected?

[21:59] <masak> correct.

[22:00] * diakopter is suddenly reminded of trading Garbage Pail Kids trading cards at age 10

[22:01] <masak> "Each sticker card featured a Garbage Pail Kid character, with some comical abnormality and/or suffering some terrible fate, and a humorous, word play-rich character name, such as Glandular Angela."

[22:02] * masak lols at the word play-rich character name "Glandular Angela"

[22:03] *** timbunce left
[22:03] <colomon> plobsing: thanks for digging up the source.

[22:03] * diakopter vaguely remembers actually watching the movie at some point

[22:04] *** justatheory joined
[22:09] *** frikinz left
[22:09] *** timbunce joined
[22:17] <sjohnson>  /j perl

[22:17] <sjohnson> oops

[22:18] <masak> sjohnson! \o/

[22:18] <sjohnson> hi masak

[22:19] <sjohnson> looks like i got busted trying to go to a perl 5 channel

[22:19] * sjohnson slaps his own wrist

[22:19] <sjohnson> i should be looking to the future

[22:19] <masak> sjohnson: dude, I have no problem with you using Perl 5. I use it myself, it's a nice Perl version.

[22:20] <jnthn> Perl 5 has a future too, y'know. :P

[22:20] *** Mowah left
[22:21] <colomon> I just used it to solve a practical problem last night / this morning.

[22:21] * colomon needed pack / unpack.

[22:22] * masak makes a note of that

[22:23] <colomon> what is the current state of pack / unpack in Rakudo?

[22:23] <Tene> At work, we had some MySQL replication needs that MySQL couldn't handle, so we wrote our own replication using Perl 5, that uses pack/unpack.

[22:23] <masak> colomon: barely existing. I have some plans for how to implement more of them.

[22:24] <masak> much of pack/unpack can be implemented in Perl 6. some of it, the parts having to do with Str/Buf, need a bit more thought.

[22:25] *** Layla_91 left
[22:26] *** pmurias joined
[22:26] <pmurias> sorear: hi

[22:27] *** shi left
[22:29] <colomon> masak: let us know if there's something we can do to help with pack / unpack.  They don't have to be very powerful to be very useful...

[22:30] <masak> colomon: yes, there is. a prioritized wishlist would go a long way in helping.

[22:34] *** kaare_ left
[22:34] *** shi joined
[22:38] <colomon> afk # noms

[22:40] *** dju left
[22:46] *** dju joined
[22:49] *** Trashlord left
[22:52] *** klunky left
[22:56] *** jevin left
[22:59] *** wallberg left
[22:59] *** timbunce left
[23:04] *** pmurias left
[23:04] *** jimmy1980 left
[23:08] *** plobsing left
[23:11] *** MayDaniel joined
[23:12] *** snearch left
[23:12] *** pmurias joined
[23:12] *** jimmy1980 joined
[23:20] <diakopter> pmurias: hi :)

[23:20] <pmurias> diakopter: hi

[23:22] <colomon> back

[23:24] <colomon> masak: I used "S>", "I>", "A4", and "f>" last night.

[23:25] <pmurias> diakopter: how's your plan to add native types to niecza?

[23:25] <masak> colomon: excellent. get a gist started and get people to weigh in :)

[23:26] <masak> colomon: ISTR we have A already.

[23:26] *** shi left
[23:26] *** cafesofie joined
[23:28] *** gimix_ left
[23:43] *** whiteknight left
[23:45] *** impious left
[23:49] *** Intensity joined
[23:53] *** plobsing joined
[23:53] <dalek> nqp-rx/nom: 2cf0a78 | jonathan++ | src/ (7 files):

[23:53] <dalek> nqp-rx/nom: Drop the _hint variants of get and set attr - just fold it into one variant that handles the case where no hint is passed. Add slots to hold the native type variants, though they're not implemented or used anywhere yet.

[23:53] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/2cf0a7860f

[23:53] <dalek> nqp-rx/nom: 111559c | jonathan++ | src/metamodel/reprs/ (5 files):

[23:53] <dalek> nqp-rx/nom: Implement the native attr get/bind in the various REPRs. Of course, a bunch of them don't actually support attributes, so the only interesting code is in P6opaque. Missing a attribute type check still.

[23:53] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/111559c4a7

[23:53] <dalek> nqp-rx/nom: 155b951 | jonathan++ | src/ops/nqp.ops:

[23:53] <dalek> nqp-rx/nom: Ops for getting and binding native attrs.

[23:53] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/155b951de1

[23:53] *** dju left
[23:58] *** dju joined
[23:58] *** dju left
[23:58] *** dju joined
