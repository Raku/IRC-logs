[00:00] <jnthn> ah, I see...

[00:13] <jnthn> I suspect the only way we'll really resolve things in that realm is to actually show implementations of other langauge's OO done with 6model.

[00:13] <jnthn> I'm happy that Tene++ has done some Ruby bits in that area.

[00:17] <sjohnson> perlapls

[00:17] <sjohnson> oops, pals*

[00:18] <flussence_> a single sentence can really ruin someone's day...

[00:18] <flussence_> "# Tab-indented line: outdent from the right, with elastic tab expansion"

[00:22] <Tene> jnthn: one thing that I'm still not understanding well is exactly what type_object_for is for.

[00:23] <Tene> Hmm.  No, that's not my problem.  I just need to read more of the code.

[00:24] <jnthn> Tene: It takes as parameters a meta-object and a representation, and returns a type object (that can then be instantiated) that uses the meta-object and has its memory layout, attribute access etc handled by the specified representation.

[00:24] <jnthn> Essentially, it's the point where you bring a meta-object and a REPR together to actually make an object.

[00:26] *** [bjoern] joined
[00:26] <jnthn> In Perl 6 that thing is what we then go and install into the package/lexpad/whatever, but for other languages that may not be the right thing.

[00:27] <[bjoern]> Is there a quote syntax that I can use where \ are treated as literals, not an escape or anything like that? For windows file paths, say?

[00:29] <jnthn> rakudo: say 'C:\lol\cat.txt'

[00:29] <p6eval> rakudo e3bd9a: OUTPUT«C:\lol\cat.txt␤»

[00:29] <jnthn> rakudo: say Q{C:\lol\cat.txt}

[00:29] <p6eval> rakudo e3bd9a: OUTPUT«C:\lol\cat.txt␤»

[00:29] <[bjoern]> that works no matter what goes after the \?

[00:29] <jnthn> rakudo: say Q{\\lolserver\cat.txt}

[00:29] <p6eval> rakudo e3bd9a: OUTPUT«\\lolserver\cat.txt␤»

[00:29] <jnthn> That one does

[00:30] <flussence_> rakudo: say Q{\'}

[00:30] <p6eval> rakudo e3bd9a: OUTPUT«\'␤»

[00:30] <[bjoern]> the ' then does not, I take it?

[00:30] <jnthn> rakudo: say '\\lolserver\cat.txt'

[00:30] <p6eval> rakudo e3bd9a: OUTPUT«\lolserver\cat.txt␤»

[00:30] <jnthn> Nope.

[00:30] <jnthn> It does that.

[00:30] <[bjoern]> Thank you.

[00:30] <jnthn> So if you're quoting server paths with \\ in Q{...} is better.

[00:31] <TimToady> Q is the mother of all quote languages

[00:31] <TimToady> the q and qq languages are just Q with mixins :)

[00:31] <jnthn> And someday soon I'll implement mixins in NQP and maybe Rakudo can akshually do it that way :)

[00:31] <sorear> 13:17 < jnthn> * Planned a bit on GLOBAL merging, after discussions with  TimToady++ and others

[00:32] <TimToady> niecza: say Q{\'}

[00:32] <p6eval> niecza v3-74-ga074df5: OUTPUT«\'␤»

[00:32] <jnthn> nice :)

[00:32] * [bjoern] was just making sure he can copy and paste the file paths somehow, instead of adding  everywhere while wanting to strangle language designers, as he is right now encountering it in some other language...

[00:32] <sorear> "others" did not include the person with the most practical work on GLOBAL merging

[00:32] <TimToady> niecza: say Q:q{\'}

[00:32] <p6eval> niecza v3-74-ga074df5: OUTPUT«\'␤»

[00:32] <TimToady> hmm

[00:32] <sorear> how much longer will it be until I start being taken seriously?

[00:32] <sorear> good * #perl6

[00:33] <jnthn> sorear: Where can I read the implementation you did of GLOBAL merging?

[00:33] <TimToady> sorear: I think jnthn++ simply didn't realize your level of experience in that area

[00:34] <jnthn> sorear: If you've already invented that wheel in a way you think will fly, I'm happy to not re-invent it :)

[00:34] <jnthn> And what TimToady said.

[00:34] *** GinoMan left
[00:35] <TimToady> jnthn: that's what niecza is already doing, I expect

[00:35] <TimToady> I had some rudimentary notions of global merging in the original STD, and he's developed it sence

[00:35] <TimToady> *since

[00:36] <jnthn> I was planning to look at STD for clues...

[00:36] <jnthn> Have had to do a bunch of stuff to try and actually get to the point where implementing packages with GLOBAL will actually be sane.

[00:37] <TimToady> sorear: anyway, the discussions in question were mostly just an accident of who was online at the moment, so you shouldn't take it personally

[00:37] <TimToady> except maybe at me, who is bad at giving people pointers to other people's work...

[00:42] <sorear> TimToady: ok.

[00:42] <TimToady> the discussion in question was at http://irclog.perlgeek.de/perl6/2011-03-12#i_3385772

[00:43] <TimToady> and following

[00:44] <sorear> jnthn: most of the implementation that is specifically about GLOBAL merging is in Metamodel.pm6 from 31 to 209

[00:44] * [bjoern] .oO{ posting summaries and pointers to the mailing lists is usually a good approach if one feels people have missed something in realtime discussions }

[00:45] <TimToady> one of the big problems is that both sorear++ and jnthn++ are night owls, and are living on opposite sides of the planet...

[00:45] <flussence_> ooh, niecza *almost* runs Text-Tabs-Wrap's tests...

[00:46] <flussence_> (it's missing .assuming, and it doesn't like me doing @*INC.push, but I can get it to load the modules without dying now)

[00:47] <sorear> @*INC is useless without BEGIN, no?

[00:47] <sorear> TimToady: a flat earth with a sun at infinity would be a much nicer place to live.

[00:47] <TimToady> well maybe not useless for require

[00:47] <flussence_> it's inside a BEGIN... but I found out earlier that rakudo wasn't doing BEGIN at the right time anyway.

[00:48] <TimToady> it'd be pretty cool if the sun were at infinity :P

[00:48] <jnthn> sorear: Thanks.

[00:48] <sorear> Rakudo does do BEGIN at the right time, unless you're trying to precompile stuff, which you should be pretty careful of

[00:49] <flussence_> I dunno, I had it after some use statements that needed it and found out it only worked when I moved it before them

[00:49] <sorear> jnthn's ctmo is, AFAIK, the first serious attempt to make precompilation work with BEGIN

[00:49] <TimToady> also @*INC isn't completely useless in the sense that you can modify the original env var before running

[00:49] <jnthn> TimToady: Where does @*INC actually live?

[00:49] <jnthn> er, the @INC we find, I mean...

[00:49] <sorear> jnthn: I went through a few rounds on the relationship of the compiler's view of eval, etc

[00:49] <TimToady> well, the outermost would be in PROCESS, I'd think

[00:50] <jnthn> TimToady: If we twiddle with it at BEGIN { ... } time, that only runs in the initial compile. 

[00:50] <sorear> jnthn: in niecza currently the compiler and the user code run in very separate domains; they can't even share objects

[00:50] <jnthn> sorear: Ah, OK...I wasn't aware of that separation.

[00:50] <flussence_> (I'd get rid of the @*INC stuff if the package managers have a standard way to say "-I these things when you make test or whatever")

[00:50] <sorear> jnthn: so eval() calls-up to the compiler (passing a string), which then calls-down to the user-level code (passing compiled code to the RTS, which runs it)

[00:51] <jnthn> sorear: Heh, we have opposite issues. I have too much shared at the moment. :)

[00:51] <jnthn> So the compiler starts scibbling over itself when bootstrapping... :/

[00:51] <TimToady> sure, I'm not attached to @*INC at all, except for user-local stuff maybe

[00:51] <jnthn> Ah, I see.

[00:51] <TimToady> mostly 'use' and such should be querying a database-ish view of which module is where

[00:51] <sorear> jnthn: note that I'm using System.AppDomain to do most of the isolation

[00:52] <TimToady> @*INC shouldn't be used to pull things out of the official library, long term

[00:52] <TimToady> this is specced, even

[00:52] <jnthn> TimToady: I guess my question is, if somebody plays with @*INC in a BEGIN, shoudl they expect @*INC to contain their twiddles when they run a pre-compiled version of the code?

[00:52] <jnthn> PROCCESS is probably one thing we really can't serialize. :)

[00:53] <jnthn> sorear: Are you planning to keep the isolation in place long-term, or is it something you expect to eliminate eventually?

[00:54] <flussence_> hm, I think I might move this include-path munging into the readme instead...

[00:54] <sorear> jnthn: TimToady has been very clear to me that putting code with global side effects in BEGIN is a bad idea

[00:54] <sorear> jnthn: Keep it long term.

[00:54] <sorear> TimToady: Concrentely: class Foo { }; eval('class Foo { }; BEGIN say 42') # Output?

[00:54] <sorear> s/^/jnthn> /

[00:55] <TimToady> jnthn: well, if you tweak a dynamic variable in the sense of 'my @*INC =', then you've created a new lexical

[00:55] <sorear> in niecza's model, modulo BEGIN being NYI, this will output 42\nError merging stashes: MAIN and EVAL_1 have conflicting stashes for GLOBAL::Foo

[00:55] <TimToady> but if you just push the var in PROCESS, I wouldn't expect that to serialize, no

[00:55] <sorear> jnthn> TimToady: Noting that class Foo { }; eval('class Bar is Foo { }; BEGIN say Bar ~~ Foo;') probably should say True

[00:55] <sorear> works fine in my understanding

[00:56] <TimToady> yes, 'is' and traits in general are supposed to make things known at compile time

[00:57] <TimToady> otherwise our optimizers won't have squat to work with

[00:57] <jnthn> sorear: I think the above will blow up for the reasons you describe.

[00:57] <jnthn> sorear: I agree that it's a bad idea to put stuff with side-effects in BEGIN.

[00:57] <sorear> jnthn: I see the firewall as an artefact of trying to implement Perl 6 using Perl 6.  Once I'm done prototyping :), I think a C or NQNQP implemention would be semantically saner.

[00:58] <jnthn> sorear: fwiw, I expect Rakudo will handle that BEGIN say Bar ~~ Foo example after the current set of refactors.

[00:58] <jnthn> Today it no way will.

[00:59] <TimToady> it seems to me that what can be merged and what can't is just something we'll have to work out over time

[01:00] *** cxreg joined
[01:00] <TimToady> "we" being the editorial we there  :)

[01:00] <sorear> that's been a major driving question in niecza

[01:00] <sorear> post-mm

[01:01] <sorear> another thing which quite suprised me when I first noticed it, is that in general 'my' stashes are subject to merging too

[01:01] <flussence_> ok, niecza can *run* 6 of these test files now. Figuring out how to pass the tests is something else... :)

[01:02] <sorear> that's why niecza implements my stashes as being aliases to our-stashes with guaranteed unique names; it cuts out a lot of code duplication

[01:02] <TimToady> sorear: under what conditions?

[01:03] <sorear> TimToady: A.pm='my module A;' B.pm='my module B; use A; class A::AB {}'; C.pm='my module C; use A; class A::AC {}'; 'use B; use C;'

[01:05] <TimToady> cool

[01:06] *** woosley joined
[01:06] <TimToady> though it looks a bit augmenty to me to do something like that...

[01:07] *** knewt2_ left
[01:07] *** knewt2 joined
[01:07] <TimToady> but I suppose if you augment something that was pulled in as lexical aliases, you're in that situation, arguably

[01:08] <Tene> jnthn: mind if I merge master into ctmo?

[01:08] <Tene> master doesn't seem to build against latest parrot.

[01:08] <jnthn> Tene: master into ctmo or ctmo into master?

[01:09] <Tene> master into ctmo.  I wanted to play with HashAttrStore, but master doesn't build against latest parrot.

[01:09] *** whiteknight left
[01:09] <jnthn> Oh, I see

[01:09] <Tene> I guess I could just cherry-pick it.

[01:09] <jnthn> Well, try merging

[01:09] <jnthn> If no conflicts and the same tests pass, +1

[01:09] <Tene> just 'make test', yes?

[01:09] <jnthn> I was careful not to update the bootstrap in master, so it should be fine

[01:09] <jnthn> Yeah

[01:09] <jnthn> It should fail 1 test file at the moment.

[01:10] <jnthn> Will get to that soonish, depending on how tired teaching a class then flying to Taiwan makes me :)

[01:10] <Tene> Yeah, t/hll/02-modules.t

[01:11] <Tene> merge conflict in Makefile.in; should be simple to fix

[01:11] <sorear> jnthn> std: my class Foo { our $x; }; $Foo::x

[01:11] <jnthn> std: my class Foo { our $x; }; $Foo::x

[01:11] <p6eval> std 4608239: OUTPUT«ok 00:01 119m␤»

[01:12] <sorear> jnthn> are you accepting commands?

[01:12] *** cotto joined
[01:12] <jnthn> sorear: No, I'm just curious what STD thought about it.

[01:12] <sorear> ['Foo', '$x'] is interpreted as the path

[01:12] <sorear> there is a 'Foo' in the lexical scope, so Foo is resolved to that

[01:12] <jnthn> sorear: Does that "work" (in the sense of, refers to the $x declared in Foo)?

[01:12] <sorear> imo yes

[01:12] <jnthn> OK, good. imho too :)

[01:13] <jnthn> I figure that anything in a $Foo::x that we can resolve to a lexical at compile time, we do, and anything else we look in GLOBAL for. Does that fit with what niecza is doing?

[01:14] <jnthn> er, I mean the Foo bit can be resolved to a lexical.

[01:14] <sorear> jnthn> Is it actually kosher to say $Foo::Bar::x = 42; if you never declared a Foo::Bar?

[01:15] <sorear> it has to me, or else flussence_ will get rather annoyed when ey tries to run Text::Tabs::Wrap on Perl 6.0.0

[01:15] <sorear> jnthn: yes, that's basically what niecza is doing

[01:16] <sorear> jnthn: niecza makes a handful of exceptions for specific values of Foo (in particular, Foo = "MY"), but that's done in a rather hackish way and I need to overhaul it to get OUTER et al working properly

[01:16] <jnthn> ($Foo::Bar::x) I think in that case it works, but it has to "auto-vivify" packages there to do so.

[01:17] <jnthn> Which is OK, I guess..

[01:18] <sorear> my big remaining question is what a stub package looks like

[01:18] *** Holy_Cow left
[01:18] *** [bjoern] left
[01:19] <sorear> right now niecza doesn't use stub packages; there is no .WHO because the Stash and the type object are accessed from separate names

[01:19] <sorear> this needs to be fixed

[01:19] <jnthn> I was wondering if Package is basically the "stub pcakage"

[01:19] <sorear> Package is wrong

[01:19] <jnthn> Then if you declare a class with the same name, it just steals the .WHO

[01:19] <jnthn> At which point any further re-declaration is wrong

[01:19] <sorear> Package is a fossil from the days before type objects, when class A { }; A.WHAT eq 'Class'

[01:19] <jnthn> Hm, true.

[01:20] <Tene> Bah, should have run that make in parallel.

[01:20] <jnthn> I suspect after doing $A::B::c = 42 then A.WHAT.say should actually say something though.

[01:20] <jnthn> I'm not sure what that something should be.

[01:23] <sorear> looks like I've gotten to the end of the ir clog

[01:27] <dalek> nqp/ctmo: 73f5c94 | tene++ | / (4 files):

[01:27] <dalek> nqp/ctmo: Merge branch 'master' into ctmo

[01:27] <dalek> nqp/ctmo: 

[01:27] <dalek> nqp/ctmo: Conflicts:

[01:27] <dalek> nqp/ctmo: 	build/Makefile.in

[01:27] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/73f5c949bb

[01:27] <dalek> nqp/ctmo: 26d43ed | tene++ | / (14 files):

[01:27] <dalek> nqp/ctmo: Merge branch 'ctmo' of github.com:perl6/nqp into ctmo

[01:27] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/26d43ed705

[01:31] *** jmedinar joined
[01:31] *** jmedinar left
[01:37] <dalek> nqp/ctmo: a6496e3 | jonathan++ | src/ (2 files):

[01:37] <dalek> nqp/ctmo: Make lexical package declarations kinda work (symbol installation is lexical, though a bunch of other bits to do to have real leixcal packages). First actual use of the static lexpad stuff.

[01:37] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/a6496e331b

[01:39] <jnthn> Oops, it's late.

[01:39] <jnthn> Ah well, can do the next pieces tomorrow.

[01:39] <jnthn> night o/

[01:42] <colomon> \o

[01:43] *** noganex_ left
[01:48] *** alester joined
[01:49] <sorear> oops, I was a little too late to give jnthn my last example

[01:50] <sorear> phenny: tell jnthn Consider: 「module Foo; sub glob($n) is rw { OUR::{$n} }; BEGIN glob('$x') = 12; INIT say glob('$x')」

[01:50] <phenny> sorear: I'll pass that on when jnthn is around.

[01:51] <sorear> phenny: OUR:: needs to refer to two different objects - the unmerged stash during BEGIN, and the final runtime stash by INIT

[01:51] <sorear> phenny: tell jnthn OUR:: needs to refer to two different objects - the unmerged stash during BEGIN, and the final runtime stash by INIT

[01:51] <phenny> sorear: I'll pass that on when jnthn is around.

[01:51] <sorear> phenny: tell jnthn I have a vague notion that GLOBAL:: and friends should actually be contextuals.

[01:51] <phenny> sorear: I'll pass that on when jnthn is around.

[01:53] *** Helios` left
[01:53] *** ascent_ left
[01:54] *** ascent_ joined
[01:55] *** Helios` joined
[02:11] *** Helios` left
[02:13] *** LoRe left
[02:13] *** ascent_ left
[02:15] *** GinoMan joined
[02:38] *** ascent_ joined
[02:46] *** LoRe joined
[02:47] *** risou_ joined
[02:47] *** Helios` joined
[02:48] *** risou left
[03:03] *** stkowski left
[03:12] *** wooden left
[03:18] *** alester left
[03:18] *** plobsing joined
[03:18] *** donri left
[03:20] *** Sarten-X left
[03:27] *** GinoMan left
[03:27] *** Sarten-X joined
[03:28] *** GinoMan joined
[03:46] *** risou joined
[03:47] *** risou_ left
[04:05] *** Helios` left
[04:05] *** LoRe left
[04:06] *** Holy_Cow joined
[04:06] <dukeleto> does anybody know if any hackathons are planned for YAPC::NA 2011?

[04:07] *** ascent_ left
[04:11] <perigrin_> There is space for them around YAPC::NA

[04:11] <perigrin_> but I'd need someone to step up and help organize it

[04:12] *** Helios` joined
[04:14] *** ascent_ joined
[04:14] *** benabik left
[04:23] *** Su-Shee_ joined
[04:24] *** nymacro left
[04:25] *** Su-Shee left
[04:25] *** plobsing left
[04:36] *** GinoMan left
[04:38] *** LoRe joined
[04:42] *** woosley left
[04:44] *** Helios` left
[04:46] *** LoRe left
[04:46] *** noganex joined
[04:46] *** risou_ joined
[04:47] *** Helios` joined
[04:49] *** satyavvd joined
[04:49] *** risou left
[04:50] *** plobsing joined
[04:56] *** Holy_Cow left
[05:05] *** sufrostico joined
[05:08] *** LoRe joined
[05:32] *** mtk left
[05:40] *** mtk joined
[05:41] *** orafu left
[05:42] *** orafu joined
[05:54] *** mkramer left
[05:55] *** mkramer joined
[05:57] *** mberends left
[06:05] *** sufrostico left
[06:11] *** Helios` left
[06:13] *** LoRe left
[06:14] *** bacek left
[06:15] *** ascent_ left
[06:17] *** kaare_ joined
[06:17] *** Helios` joined
[06:20] *** sftp left
[06:20] *** agentzh joined
[06:21] *** ascent_ joined
[06:46] *** LoRe joined
[06:50] *** wtw joined
[07:04] *** nymacro joined
[07:10] *** Mowah joined
[07:13] *** alim joined
[07:18] *** alim left
[07:19] *** alim joined
[07:23] *** alim left
[07:24] *** justatheory left
[07:32] *** cjk101010 joined
[07:47] <jdhore> moritz_, ping

[07:52] *** Su-Shee_ is now known as Su-Shee

[07:53] *** fhelmberger joined
[07:54] *** cosimo joined
[07:56] *** cosimo left
[07:56] *** _jaldhar left
[07:57] *** _jaldhar joined
[07:57] <TiMBuS> does perl6 have any kind of.. '//==' operator?

[07:57] *** apejens joined
[07:58] <moritz_> jdhore: pong

[07:58] <moritz_> TiMBuS: what would that do?

[07:59] <jdhore> moritz_, could I get a commit bit to the rakudo stuff for tomorrow's release?

[07:59] <TiMBuS> compare a value if it is defined

[07:59] <moritz_> jdhore: you already have

[07:59] <moritz_> jdhore: pmichaud++ took care of that yesterday

[07:59] <jdhore> ah, I didn't think i did

[07:59] <jdhore> ah, thanks pmichaud++

[07:59] <jdhore> Also, is there any release "time" or just before midnight localtime?

[08:00] <moritz_> do it however it suits you best

[08:00] <jdhore> OK, cool, i'll probably have it released by like 4PM EST :D

[08:01] <moritz_> deviations +- 1 day are ok

[08:02] <moritz_> dukeleto: there will be a Perl 6 hackathon at YAPC::Russia

[08:03] *** dual left
[08:13] *** Chillance joined
[08:20] <jdhore> Well i'll definetly release it on the day (I *HATE* being late for anything and being early can be annoying), I just have work today, tomorrow and Friday so Thursday's just as good and it fits the Rakudo schedule perfectly so :D

[08:33] *** cosimo joined
[08:37] *** cosimo left
[08:54] *** alim joined
[09:04] *** f00li5h left
[09:17] *** mj41_nb joined
[09:24] *** f00li5h joined
[09:25] *** dakkar joined
[09:28] *** jww left
[09:33] <colomon> dukeleto: I

[09:33] <colomon> dukeleto: I'll be at YAPC::NA and happy to hackathon.

[09:34] <colomon> dukeleto: haven't heard anything in the way of formal plans yet, however.

[09:39] *** _twitch joined
[09:46] *** icwiener joined
[09:47] *** risou joined
[09:49] *** risou_ left
[09:56] *** _twitch left
[09:58] <jnthn> o/, #perl6

[09:58] <phenny> jnthn: 01:50Z <sorear> tell jnthn Consider: 「module Foo; sub glob($n) is rw { OUR::{$n} }; BEGIN glob('$x') = 12; INIT say glob('$x')」

[09:58] <phenny> jnthn: 01:51Z <sorear> tell jnthn OUR:: needs to refer to two different objects - the unmerged stash during BEGIN, and the final runtime stash by INIT

[09:58] <phenny> jnthn: 01:51Z <sorear> tell jnthn I have a vague notion that GLOBAL:: and friends should actually be contextuals.

[10:08] *** am0c joined
[10:14] *** mj41_nb left
[10:22] *** daxim joined
[10:39] <colomon> \o

[10:40] *** bacek joined
[10:43] *** kfo_ joined
[10:46] *** kfo left
[10:48] *** risou_ joined
[10:50] *** risou left
[11:07] *** mj41_nb joined
[11:13] *** coldhead left
[11:23] *** _twitch joined
[11:48] *** leprevost joined
[11:49] *** risou joined
[11:51] *** risou_ left
[11:55] * jnthn -> stockholm

[11:56] <jnthn> phenny: tell sorear I'd pondered that GLOBAL lives in UNIT::GLOBAL really.

[11:56] <phenny> jnthn: I'll pass that on when sorear is around.

[12:15] *** satyavvd left
[12:25] <dukeleto> colomon: awesome! very interested to hear your talk

[12:25] <colomon> awwww....

[12:28] *** nsh- joined
[12:28] *** nsh| joined
[12:28] *** Koven joined
[12:28] *** mdxi_ joined
[12:29] *** Raynes_ joined
[12:29] *** meraxes_ joined
[12:29] *** Brandon_W_ATS joined
[12:29] *** sorear_ joined
[12:29] *** szbalint_ joined
[12:29] *** p6eval left
[12:29] *** nsh left
[12:29] *** Raynes left
[12:29] *** nsh_ left
[12:29] *** Woody4286 left
[12:29] *** mdxi left
[12:29] *** Kovensky left
[12:29] *** pmichaud_ joined
[12:29] *** Raynes_ is now known as Raynes

[12:29] *** Raynes left
[12:29] *** Raynes joined
[12:30] *** phenny joined
[12:30] *** jerome joined
[12:30] *** p6eval joined
[12:30] *** ChanServ sets mode: +v p6eval

[12:34] *** athomason joined
[12:45] *** mj41_nb left
[12:49] *** agentzh left
[13:06] *** kaare_ left
[13:16] *** tzhs joined
[13:18] *** mtk left
[13:24] *** mj41_nb joined
[13:25] *** mtk joined
[13:25] *** sftp joined
[13:30] *** Holy_Cow joined
[13:32] *** benabik joined
[13:40] *** mj41_nb left
[13:41] *** plainhao joined
[13:47] *** bluescreen10 joined
[14:00] *** kaare_ joined
[14:03] *** donri joined
[14:09] *** alester joined
[14:23] *** bluescreen10 left
[14:36] *** bluescreen10 joined
[14:40] *** jerome left
[14:40] *** tzhs left
[14:40] *** jerome joined
[14:42] *** dsouza joined
[14:49] *** risou_ joined
[14:53] *** risou left
[15:12] *** justatheory joined
[15:13] *** Koven is now known as Kovensky

[15:14] *** hercynium joined
[15:21] <tadzik> hello perl6

[15:21] <moritz_> \o tadzik 

[15:23] *** mj41_nb joined
[15:28] *** mtk left
[15:29] *** mtk joined
[15:33] *** mj41_nb left
[15:34] *** mj41_nb joined
[15:38] *** ymasory left
[15:38] *** [particle] left
[15:47] *** wtw left
[15:50] *** risou joined
[15:52] *** risou_ left
[16:00] *** am0c left
[16:01] *** [hercynium] joined
[16:01] *** [hercynium] left
[16:01] *** [hercynium] joined
[16:02] *** jedai left
[16:04] *** hercynium left
[16:04] *** am0c^ joined
[16:05] *** hercynium joined
[16:05] *** hercynium left
[16:05] *** hercynium joined
[16:07] *** cjk101010 left
[16:07] *** [hercynium] left
[16:18] *** _jaldhar left
[16:18] *** Patterner left
[16:18] *** JimmyZ_ joined
[16:19] *** jaldhar joined
[16:20] *** Psyche^ joined
[16:20] *** Psyche^ is now known as Patterner

[16:20] *** daxim left
[16:23] <JimmyZ_> msg NickServ

[16:26] <tadzik> password:

[16:29] *** vladik joined
[16:29] *** JimmyZ_ left
[16:29] *** JimmyZ_ joined
[16:29] *** JimmyZ_ left
[16:30] *** JimmyZ_ joined
[16:30] <JimmyZ_> odd, why my name is used :(

[16:31] <[Coke]> freenode is big.

[16:31] * [Coke] points to the [] on Coke.

[16:31] *** _twitch left
[16:31] * perigrin is happy to have snagged perigrin when he did.

[16:31] *** daxim joined
[16:31] <JimmyZ_> my name was registered.

[16:31] <JimmyZ_> and I can't use it :(

[16:32] <benabik> Unfortunately, dupli-nicks happen.  :-/  Benabik seems rare enough that I rarely have problems, but it has been known to happen.

[16:32] *** dsp_ left
[16:32] <tadzik> I've used tadzik_ for some time, then I asked freenode staff to kick out that guy, as he wasn't using that anyway

[16:33] <JimmyZ_> my name was registered by myself, but I can't use it now...

[16:34] <vladik> good day, I have this website that I wrote in php, it is a simple registration page where the user enters some information and we store it in mysql db, and use it later in other forms.. I was thinking of trying to do the same but using pure perl6.. Just for fun and education.. is it doable?

[16:34] <JimmyZ_> yes

[16:34] <tadzik> I think so, yes

[16:34] <vladik> is there a mysql module for perl6?

[16:34] <benabik> JimmyZ_: In that case, freenode staff might be able to help.

[16:35] <tadzik> vladik: I think so. Look through modules.perl6.org

[16:35] <vladik> JimmyZ_: it happened to me once.. just contact freenode guys..

[16:35] <JimmyZ_> vladik:  see https://github.com/jnthn/zavolaj

[16:36] *** JimmyZ_ left
[16:36] *** JimmyZ_ joined
[16:37] <vladik> zavolaj, nice name, ok will check it.

[16:37] <benabik> I see a sqlite interface, but no MySQL.  DBDI exists, but I don't know how useful it is yet.

[16:37] <plobsing> looks like DBDI has DBDI::p5dbi. does that mean it can connect to anything Perl 5 DBI does?

[16:38] <JimmyZ_> vladik:  and https://github.com/perl6/modules.perl6.org

[16:39] <vladik> looks interesting 

[16:39] *** simcop2387 joined
[16:40] <plobsing> that readme.png takes precedence over README on the github page is odd

[16:41] <benabik> plobsing: Looks like it, but I don't know how to get "using DBI:from<perl5>" to work...

[16:41] <benabik> *use

[16:42] * benabik is probably writing too much C++ to discuss Perl 6 properly.

[16:42] <plobsing> Parrot has a Perl 5 interop module called blizkost

[16:43] *** vladik left
[16:43] <plobsing> that could be used to make it work

[16:43] *** jaldhar left
[16:43] <benabik> Ah.  My google-fu was weak.  Will have to look into that.

[16:44] *** alim left
[16:49] *** plobsing left
[16:51] *** risou left
[16:51] *** risou joined
[16:55] *** JimmyZ_ left
[16:55] *** dsp_ joined
[16:57] *** am0c^ left
[17:03] *** cdarroch joined
[17:03] *** cdarroch left
[17:03] *** cdarroch joined
[17:14] *** plobsing joined
[17:15] *** sorear_ is now known as sorear

[17:18] *** benabik left
[17:30] <sorear> good * #perl6

[17:30] <phenny> sorear: 11:56Z <jnthn> tell sorear I'd pondered that GLOBAL lives in UNIT::GLOBAL really.

[17:31] <colomon> \o

[17:32] *** dsp_ left
[17:32] *** sufrostico joined
[17:32] *** sufrostico is now known as Guest31989

[17:33] *** Guest31989 left
[17:33] <sorear> phenny: tell jnthn Just putting GLOBAL in UNIT:: isn't enough since GLOBAL seems to want different values in different dynamic scopes.

[17:33] <phenny> sorear: I'll pass that on when jnthn is around.

[17:34] <sorear> phenny: tell jnthn under &MAIN or the mainline, GLOBAL should be the real global, but in the dynamic scope of a BEGIN, it ought to be the nascent GLOBAL.

[17:34] <phenny> sorear: I'll pass that on when jnthn is around.

[17:35] <sorear> phenny: tell jnthn Alternatively, GLOBAL merging can be destructive, making all nascent GLOBALs into synonyms of the true one.  But I don't like that one bit.

[17:35] <phenny> sorear: I'll pass that on when jnthn is around.

[17:35] *** sufrosti1o joined
[17:35] * sorear ducks back out.

[17:37] *** sufrosti1o left
[17:37] *** sufrosti1o joined
[17:40] *** dsp_ joined
[17:46] *** impious joined
[17:54] *** dsp_ left
[17:56] *** dsp_ joined
[18:00] *** mj41_nb left
[18:01] *** dsp_ left
[18:04] *** dakkar left
[18:05] *** masak joined
[18:05] <masak> \o/

[18:06] <tadzik> o/

[18:08] *** mberends joined
[18:10] <mberends> o/

[18:10] *** dsp_ joined
[18:16] *** justatheory left
[18:18] *** justatheory joined
[18:24] <Tene> The "Multiple versions" section of http://blog.izs.me/post/1675072029/10-cool-things-you-probably-didnt-realize-npm-could-do reminded me of Perl 6.

[18:26] <masak> except that no Perl 6 implementation does that yet :P

[18:26] *** fhelmberger left
[18:34] <mberends> either it's impressive, or the author's hubris levels are a tad beyond decent

[18:34] *** rhr left
[18:34] * masak just skimmed and didn't read the hubris

[18:35] *** justatheory left
[18:37] *** rhr joined
[18:40] <tadzik> is the whole node community like this guy?

[18:40] <tadzik> or, whatever

[18:41] * mberends thinks the latter

[18:42] <tadzik> yeah, probably

[18:42] *** justatheory joined
[18:44] <PerlJam> A little hubris is fine when it's deserved.

[18:45] <Tene> tadzik: According to hacker news comments, no they're not, and neither is this guy usually: http://news.ycombinator.com/item?id=1945297

[18:45] <PerlJam> But, Larry sets a good example of humbleness even when he should have more hubris.

[18:45] <PerlJam> (IMHO)

[18:46] <tadzik> Tene: makes sents

[18:46] <tadzik> * sense

[18:46] <Tene> It does rather irk me that he's so dismissive of package managers, though.  He's also factually incorrect.  Most distro package managers can handle multiple concurrent versions of packages just fine.  At least, both rpm and dpkg can.

[18:47] <Tene> Just make sure that your packages always put things in version-dependent paths, so the files don't conflict, and you're fine.

[18:49] <plobsing> what I got from that is that you can have 2 versions of the same module *loaded into your program*, without problems. which seems cool. I guess it kinda falls out of how JS doesn't use globals.

[18:49] <PerlJam> maybe perl6 should steal whatever good ideas Isaac has too  :)

[18:51] <Tene> plobsing: Yes, that's the part that reminded me of Perl 6.

[18:54] *** risou left
[18:55] *** risou joined
[18:58] *** nymacro left
[18:58] <masak> seems if you put things in version-dependent paths, you either need to keep an index, or you can't find things linearly on @*LIB.

[18:59] <TimToady> which is why we're largely moving away from @*LIB

[18:59] <PerlJam> masak: I've been thinking we'll need a good index for a long while now.

[18:59] <TimToady> S11 basically requires an index for any official modules

[19:02] <masak> nod

[19:02] <masak> it's a sufficiently large step away from Perl 5 that I just automatically find myself in "I'll believe it when I see it" mode.

[19:03] *** bluescreen10 left
[19:03] <TimToady> maybe you should see it when you believe it instead

[19:04] <PerlJam> masak: an advantage Perl 6 may have is laziness :)  (lazy indexes)++

[19:04] <PerlJam> It's like GC but we get better control on when we pay the build penalty I think

[19:18] *** daxim left
[19:21] <flussence_> tadzik: is there/will there be a way to tell Pies to install from a local directory even when its META.info has a git URL in it? It was confusing the hell out of me yesterday until I realised what was going on

[19:22] <tadzik> flussence_: oh, it should be working, doesn't it? When installing from a local dir, it should simply ignore the original git url and stuff

[19:23] <flussence_> I was playing around with "panda install ./Text-Tabs-Wrap" then noticed there's no way the tests in my current workdir could've passed at the time

[19:23] <tadzik> wtf why is chromium eating all urls

[19:24] <tadzik> oh wait, I see it

[19:25] <tadzik> let me examine the code for a while

[19:25] <tadzik> okay, that's quite a stupid one. I'll fix it in a second

[19:27] <tadzik> flussence_: http://wklej.org/id/494012/ could you check if that fixes the issue?

[19:27] <tadzik> so bootstraping on rakudo-star is probably broken too

[19:29] <flussence_> yep, that works

[19:30] <tadzik> cool, pushing

[19:31] <masak> tadzik++

[19:33] <masak> PerlJam: the other day I downloaded Math::Combinations from CPAN, and did permute(1..20). the computer just froze. only then did I realize "oh right, Perl 5 doesn't have lazy lists!"

[19:34] <tadzik> :)

[19:34] <tadzik> I like how git push pushes all the branches

[19:38] *** benabik joined
[19:39] <masak> tadzik: only if you didn't do -u when you pushed your branch the first time.

[19:39] <masak> then it pushes to the corresponding upstream branch.

[19:40] <tadzik> I see that gitub encourages using -u recently

[19:40] <masak> that's how I discovered it ;)

[19:45] <colomon> masak: if you load List::Utils, @a := permute(1..20) works fine in Rakudo.  ;)

[19:48] <masak> \o/

[19:48] <masak> colomon++

[19:48] <masak> right. the point was that I didn't realize I'd come to take list laziness so much for granted nowadays.

[19:49] <masak> though it's certainly good not to have to write &permute. :)

[19:50] <masak> I tend to find it just above the complexity threshold when I have to do some small bit of design, rather than just jump in and think with my fingers.

[19:54] *** risou_ joined
[19:55] *** plobsing left
[19:55] <tadzik> flussence_: any missing features in panda that should get it to the top of my todo?

[19:55] *** risou left
[19:55] <flussence_> works for me :)

[19:56] <flussence_> some way of keeping track of what owns which files, that'd be nice

[19:56] <masak> oh! today at $dayjob I found http://www.perlmonks.org/index.pl?node_id=181655 (from 2002) with the wonderful quote "I for one am glad that thread support in Perl is progressing, and that it will be fully realized in Perl 6." :P

[19:56] <tadzik> every time I want to move add some feature that neutro had, I stumble upon this "ew, that should be done properly, not quick-and-dirty"

[19:57] <tadzik> flussence_: with a way to remove modules, yes :)

[19:57] <masak> tadzik: Second System Syndrome :)

[19:57] <tadzik> that's what "installed-dep" state is for :)

[19:57] <tadzik> masak: done right :)

[19:57] *** ymasory joined
[19:58] <tadzik> pff, I miss working DESTROY

[19:58] <masak> you can only remove a module if no other installed module (transitively) depends on it.

[19:58] <masak> tadzik: I doubt we'll ever have DESTROY on Parrot. there's simply not enough collaboration going on across the abstraction layers.

[19:58] <tadzik> rather "after removing a module, remove all installed-dep modules that are not neeeded anymore"

[19:58] *** benabik left
[19:59] <tadzik> the triggering-gc thing?

[19:59] <masak> tadzik: also, the GC in Parrot is such that you shouldn't depend on DESTROY being called before the program exits normally. just like Java.

[20:00] <tadzik> masak: hmm. So say I have something like a database driver, and on DESTROY I really want to flush everything to disk. What would be the way to do it then?

[20:00] <tadzik> rakudo: say [1, 2, 3] eqv [1, 2, 3]; say [1, 2, 3] eqv [4, 5, 6];

[20:00] <flussence_> possibly an END block

[20:00] <p6eval> rakudo e3bd9a: OUTPUT«Bool::True␤Bool::False␤»

[20:01] <tadzik> oh, wfm

[20:01] <tadzik> at least in this case

[20:02] <masak> yes, things like END or LEAVE et al.

[20:03] <masak> KEEP and UNDO.

[20:03] <tadzik> flussence_: well, keeping track of files becomes tricky if they get installed to some temporary location, like with creating a package

[20:03] <tadzik> so DESTDIR=ext panda install foobar

[20:03] <tadzik> I need a TODO

[20:07] <flussence_> docs!

[20:08] <tadzik> docs what?

[20:08] *** plainhao left
[20:08] <tadzik> oh, pandadocs?

[20:09] <masak> panda docs! <3

[20:09] <tadzik> META.info docs/specs go first

[20:09] * masak pictures a bunch of pandas with Ph.D.s

[20:09] <tadzik> oh wow. I need an artwork

[20:10] *** dual joined
[20:10] *** stkowski joined
[20:10] <tadzik> what is the name of that, uhm, ph.d hat?

[20:10] <tadzik> the square one

[20:11] <tadzik> okay nvm

[20:14] <masak> no idea.

[20:19] <mberends> it's a mortarboard, because it looks like what bricklayers use to carry mortar (cement)

[20:20] <masak> ah.

[20:20] <masak> unless your Ph.D. is in CS; then it's a motherboard...

[20:21] *** impious left
[20:23] <tadzik> congratulations masak, you provoked a panda docs logo

[20:24] <tadzik> http://imgur.com/xFSQF

[20:24] <masak> and here I thought I was just provoking groans...

[20:25] <masak> tadzik: nice :)

[20:25] <tadzik> the next quest: an ascii art, for `panda --docs`

[20:25] <masak> \o/

[20:25] <tadzik> :)

[20:26] <tadzik> too bad I'm late to set this as a gci task :>

[20:28] *** ymasory left
[20:28] <tadzik> now, how do I embed a picture in pod...

[20:31] *** alester left
[20:31] <masak> you've now discovered why the Perl 6 spec prefers ASCII art to real images. you level up one level.

[20:32] *** Rotwang joined
[20:33] <tadzik> \o/

[20:33] <tadzik> so all my gimp work is for nothing? :(

[20:34] *** coldhead joined
[20:34] *** plobsing joined
[20:34] <sjohnson> the gimp!

[20:36] *** Helios` left
[20:36] <masak> sjohnson: hi!

[20:38] <sjohnson> yo masak

[20:38] <sjohnson> brb

[20:39] *** Helios` joined
[20:44] *** jedai joined
[20:44] <masak> rakudo: role R[::T] { multi method foo(::T $x) { say $x } }; class C does R[Str] does R[Int] {}; C.new.foo("OH HAI")

[20:44] <p6eval> rakudo e3bd9a: OUTPUT«OH HAI␤»

[20:44] <masak> rakudo: role R[::T] { multi method foo(::T $x) { say $x } }; class C does R[Str] does R[Int] {}; C.new.foo(42)

[20:44] <p6eval> rakudo e3bd9a: OUTPUT«42␤»

[20:44] <masak> \o/

[20:44] <tadzik> rakudo: class A { method !foo { say "foo!" }; method bar { self!foo } }; my $a = A.new but role { method !foo { } }; $a.bar

[20:44] <p6eval> rakudo e3bd9a:  ( no output )

[20:44] <masak> rakudo: role R[::T] { multi method foo(::T $x) { say $x } }; class C does R[Str] does R[Int] {}; C.new.foo(5.5)

[20:45] <p6eval> rakudo e3bd9a: OUTPUT«5.5␤»

[20:45] <tadzik> rakudo: class A { method !foo { say "foo!" }; method bar { self!foo } }; my $a = A.new but role { method !foo { say "yep" } }; $a.bar

[20:45] <masak> :/

[20:45] <p6eval> rakudo e3bd9a: OUTPUT«yep␤»

[20:45] <masak> late binding. we haz it.

[20:55] <masak> rakudo: class C { multi method foo(Str $x) { say "Str" }; multi method foo(Int $x) { say "Int" } }; C.new.foo(5.5)

[20:55] <p6eval> rakudo e3bd9a: OUTPUT«No candidates found to invoke for method 'foo' on object of type 'C'; available candidates have signatures:␤:(Mu : Str $x;; *%_)␤:(Mu : Int $x;; *%_)␤␤  in main program body at line 22:/tmp/h4cL0DkRVI␤»

[20:55] *** risou_ left
[20:55] *** risou joined
[20:55] * masak submits rakudobug

[21:00] *** nwellnhof joined
[21:01] *** benabik joined
[21:01] *** benabik left
[21:04] *** mtk left
[21:06] *** stkowski left
[21:07] <masak> rakudo: say 2 ** 3 ** 4

[21:07] <p6eval> rakudo e3bd9a: OUTPUT«2.41785163922926e+24␤»

[21:07] <masak> rakudo: say [**] 2, 3, 4

[21:07] <p6eval> rakudo e3bd9a: OUTPUT«2.41785163922926e+24␤»

[21:07] <masak> :)

[21:08] <masak> rakudo: my ($a, $b, $c); $c = 42; [=] $a, $b, $c; say ($a, $b, $c).join("|")

[21:08] <p6eval> rakudo e3bd9a: OUTPUT«Any()|Any()|42␤»

[21:08] <masak> huh.

[21:09] <masak> that isn't what I expected...

[21:09] <flussence_> rakudo: say [>=] 5, 4, 3

[21:09] <p6eval> rakudo e3bd9a: OUTPUT«Bool::True␤»

[21:09] <flussence_> rakudo: say [>=] 3, 4, 5

[21:09] <p6eval> rakudo e3bd9a: OUTPUT«Bool::False␤»

[21:09] <flussence_> seems sane there...

[21:09] <masak> right, but not for assignment.

[21:10] <flussence_> it seems to be evaluating them one at a time in LTR order there

[21:10] <masak> std: my ($a, $b, $c); [=] $a, $b, $c

[21:10] <p6eval> std 4608239: OUTPUT«[31m===[0mSORRY![31m===[0m␤Can't reduce with = because list assignment operators are too fiddly at /tmp/RWFak4j4Wz line 1:␤------> [32mmy ($a, $b, $c); [=][33m⏏[31m $a, $b, $c[0m␤Check failed␤FAILED 00:01 124m␤»

[21:10] <flussence_> (just a guess)

[21:10] <masak> ah. it should give a "too fiddly" error.

[21:10] * masak submits rakudobug

[21:13] *** mtk joined
[21:14] *** stkowski joined
[21:15] *** Holy_Cow left
[21:16] *** Holy_Cow joined
[21:18] <masak> rakudo: class Animal { method Str { self.WHAT.perl } }; class Cow is Animal {}; my Cow $cow .= new; role Holy { method Str { "Holy {callsame}" } }; $cow does Holy; say ~$cow

[21:18] <p6eval> rakudo e3bd9a: OUTPUT«Holy ␤»

[21:18] <masak> aww :/

[21:19] <masak> rakudo: class Animal { method Str { self.WHAT } }; class Cow is Animal {}; my Cow $cow .= new; role Holy { method Str { "Holy {callsame}" } }; $cow does Holy; say ~$cow

[21:19] <p6eval> rakudo e3bd9a: OUTPUT«Holy ()␤»

[21:20] *** spq joined
[21:23] <masak> rakudo: class Animal { method Str { self.WHAT.Str } }; class Cow is Animal {}; my Cow $cow .= new; role Holy { method Str { "Holy {callsame}" } }; $cow does Holy; say ~$cow

[21:23] <p6eval> rakudo e3bd9a: OUTPUT«maximum recursion depth exceeded␤  in 'Str' at line 22:/tmp/opLNpn6UQN␤  in 'Str' at line 22:/tmp/opLNpn6UQN␤  in 'Animal::Str' at line 22:/tmp/opLNpn6UQN␤  in 'Str' at line 22:/tmp/opLNpn6UQN␤  in 'Animal::Str' at line 22:/tmp/opLNpn6UQN␤  in 'Str' at line 22:/tmp/opLNpn6UQN␤

[21:23] <p6eval> .. in …

[21:23] <masak> oh, right.

[21:24] <masak> :)

[21:24] <jnthn> o/ from Stockholm

[21:24] <phenny> jnthn: 17:33Z <sorear> tell jnthn Just putting GLOBAL in UNIT:: isn't enough since GLOBAL seems to want different values in different dynamic scopes.

[21:24] <phenny> jnthn: 17:34Z <sorear> tell jnthn under &MAIN or the mainline, GLOBAL should be the real global, but in the dynamic scope of a BEGIN, it ought to be the nascent GLOBAL.

[21:24] <phenny> jnthn: 17:35Z <sorear> tell jnthn Alternatively, GLOBAL merging can be destructive, making all nascent GLOBALs into synonyms of the true one.  But I don't like that one bit.

[21:24] <masak> jnthn: \o!

[21:24] *** spq left
[21:24] <jnthn> Swedes are REALLY competent at running railways, so I got here two hours late :/

[21:25] <jnthn> On the other hand, I'm from England, so... :)

[21:25] <masak> jnthn: late for something? :/

[21:25] <jnthn> masak: Dinner!

[21:25] <masak> jnthn: they... serve food on the train... :P

[21:25] <jnthn> But nothing that mattered to anyone else :)

[21:25] <jnthn> :P

[21:25] * masak meekly waves the Swedish flag

[21:26] <jnthn> At least they had good internets onboard. :)

[21:26] <masak> ah, right. premiere classe...

[21:26] <jnthn> Aye :)

[21:27] <jnthn> Internets and coffee included. It's quite geek-compatible really.

[21:27] <diakopter> http://sanfrancisco.cbslocal.com/2011/03/15/bay-area-sushi-bars-face-daunting-supply-shortages/

[21:27] <masak> geeks are naturally 1-st class-compatible :P

[21:28] <jnthn> "I like my train tickets like my functions...first class!"

[21:28] <tadzik> :>

[21:28] <tadzik> I'd rather have cheap calling conventions though

[21:29] <masak> speak for yourself :P

[21:29] <tadzik> (:

[21:35] <masak> diakopter: it feels... odd... to let "sushi shortage" be the piece of news to highlight in the present situation. :/

[21:36] *** colomon left
[21:38] <diakopter> masak: ah, my posting of that URL should be viewed as a commentary on the news article itself (likewise your comment)

[21:38] <masak> diakopter: I feel better now.

[21:39] <tadzik> flussence_: pushed some docs for ya

[21:39] <masak> diakopter: I notice the effect even more on Twitter, where referring often is interpreted as agreeing.

[21:39] <flussence_> tadzik++

[21:40] <masak> diakopter: quite a few people have been flamed on Twitter for failing to distance themselves clearly from some insane quote.

[21:43] <flussence_> I've got my .indent code to the point where the only thing I need now is a tab-aware .substr()... which is pretty much where I was two days ago, but at least now I know what to call it :)

[21:45] <masak> flussence_: yay

[21:46] *** szbalint_ is now known as szbalint

[21:46] <flussence_> (which, as far as I can tell from trying to implement it, is going to be a complete nightmare...)

[21:48] <masak> sounds like you'd want to compute the "actual" indexes from the "distorted" ones somehow, and then just defer to the regular .substr(), no?

[21:49] <masak> of course, the coordinate transformation there is the tricky bit, I see that. tab characters have a slightly variable width depending on their position.

[21:49] <flussence_> yeah, that's the hard part...

[21:49] <masak> and depending on $?TABSTOP...

[21:52] <masak> 'night, #perl6

[21:52] <flussence_> o/

[21:52] *** masak left
[21:53] <flussence_> rakudo: say ("\t ." ~~ /^((\t)? \s*) (.*)$/).perl

[21:53] <p6eval> rakudo e3bd9a: OUTPUT«Match.new(␤ from => 0,␤ orig => "\t .",␤ to   => 3,␤ positional => [␤   Match.new(␤    from => 0,␤    orig => "\t .",␤    to   => 2,␤    positional => [␤[␤       Match.new(␤        from => 0,␤        orig => "\t .",␤        to   => 1,␤       ),␤     ],␤     ],␤   ),␤  

[21:53] <p6eval> ..Match.new(␤ …

[21:53] <flussence_> rakudo: say ("   ." ~~ /^((\t)? \s*) (.*)$/).perl

[21:53] <p6eval> rakudo e3bd9a: OUTPUT«Match.new(␤ from => 0,␤ orig => "   .",␤ to   => 4,␤ positional => [␤   Match.new(␤    from => 0,␤    orig => "   .",␤    to   => 3,␤    positional => [␤[␤     ],␤     ],␤   ),␤   Match.new(␤    from => 3,␤    orig => "   .",␤    to   => 4,␤   ),␤  ],␤)␤»

[21:54] <sjohnson> ikes

[21:54] <flussence_> hmm

[21:59] <tadzik> worr's new build system is called Puma and is on GH: https://github.com/worr/Puma

[22:18] *** pmichaud_ left
[22:18] *** pmichaud joined
[22:19] *** kaare_ left
[22:19] *** sufrosti1o left
[22:29] *** Holy_Cow left
[22:34] *** whiteknight joined
[22:39] *** colomon joined
[22:42] <colomon> mberends: see http://justrakudoit.wordpress.com/2011/03/09/more-on-masaks-p5/#comments

[22:43] *** leprevost left
[22:50] *** jevin joined
[22:52] *** nwellnhof left
[22:58] *** hercynium left
[23:04] *** cdarroch left
[23:09] <PerlJam> wow.

[23:10] <PerlJam> "I just wanted to thank you for your “Gentle Introduction to Perl 6 Regex,” which has helped me enormously. "

[23:10] <PerlJam> That's the kind of thanks that makes me happy and bashful at the same time :)

[23:11] <sjohnson> perljam == hero

[23:15] *** dsouza left
[23:34] *** Solarion_ joined
[23:34] *** fisted left
[23:35] *** Solarion left
[23:37] *** Chillance left
[23:39] *** Mowah left
[23:55] *** fisted joined
[23:56] *** stkowski left
