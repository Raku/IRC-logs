[00:00] <colomon> nom: my $a = 2 => 4; say $a.first;

[00:00] <p6eval> nom: OUTPUT«Method 'first' not found for invocant of class 'Pair'␤current instr.: '_block1002' pc 100 ((file unknown):22264063) (/tmp/U6aZWdGFlk:1)␤»

[00:01] <colomon> nom: my $a = 2 => 4; say $a.key;

[00:01] <p6eval> nom: OUTPUT«2␤»

[00:01] <colomon> stupid brain

[00:02] *** Chillance left
[00:03] <PerlJam> nom: my $a = 2 => 4; say $a.list.first

[00:03] <p6eval> nom: OUTPUT«Method 'first' not found for invocant of class 'List'␤current instr.: '_block1002' pc 112 ((file unknown):145) (/tmp/xNqmtuayj6:1)␤»

[00:03] <pmichaud> I just use "git commit ."

[00:03] <PerlJam> (just randomly curious)

[00:05] <dalek> perl6.org: 542f5c6 | (John Gabriele)++ | source/compilers/index.html:

[00:05] <dalek> perl6.org: Removed broken link.

[00:05] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/542f5c6011

[00:13] <[Coke]> need to get him in the CREDITS, ja?

[00:14] <PerlJam> he has a commit bit  ;)

[00:14] <dalek> features: f26cba7 | larry++ | features.json:

[00:14] <dalek> features: stub-in empty code and spec lines

[00:14] <dalek> features: review: https://github.com/perl6/features/commit/f26cba707f

[00:15] *** tokuhir__ joined
[00:16] *** smash left
[00:18] *** cryptographrix joined
[00:19] <cryptographrix> indeed

[00:24] <dalek> perl6.org: 4cfe2d5 | (John Gabriele)++ | source/compilers/index.html:

[00:24] <dalek> perl6.org: added text to go with link to features matrix

[00:24] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/4cfe2d5471

[00:30] <dalek> features: 8c2a768 | (John Gabriele)++ | template.html:

[00:30] <dalek> features: Added Camelia logo to the page.

[00:30] <dalek> features: review: https://github.com/perl6/features/commit/8c2a768db6

[00:30] *** sivoais joined
[00:34] *** uvtc left
[00:35] *** cryptographrix left
[00:42] *** uvtc joined
[00:45] <uvtc> Hopefully that (last commit) doesn't look too bad. Perhaps someone with more html/css chops can position it better. I though the page deserved to have the logo somewhere in it though.

[00:46] *** uvtc left
[00:48] <pmichaud> image is broken locally... fixing.

[00:50] <dalek> features: b7d3183 | pmichaud++ | template.html:

[00:50] <dalek> features: Use a full url for camelia image (so that locally generated

[00:50] <dalek> features: versions of the table work).  Move Camelia to be vertically

[00:50] <dalek> features: even with the page title, instead of slightly below it.

[00:50] <dalek> features: review: https://github.com/perl6/features/commit/b7d31834f3

[00:54] *** thundergnat joined
[00:55] <thundergnat> Hi #perl6

[00:55] *** cryptographrix joined
[00:56] <thundergnat> Added my first Niecza only Perl 6 task to rosettacode. \o/  http://rosettacode.org/wiki/Linear_congruential_generator#Perl_6

[01:00] <TimToady> looks like it works in nom too :)

[01:01] *** noganex joined
[01:03] <dalek> features: d1d76b6 | larry++ | features.json:

[01:03] <dalek> features: more code entries, add MAIN, mention gather/take

[01:03] <dalek> features: review: https://github.com/perl6/features/commit/d1d76b6330

[01:05] <dalek> features: 441a0d0 | larry++ | features.json:

[01:05] <dalek> features: move feed ops to concurrency

[01:05] <dalek> features: review: https://github.com/perl6/features/commit/441a0d0eb3

[01:05] *** noganex_ left
[01:06] *** daniel-s joined
[01:07] <felher> thundergnat++ 

[01:07] <felher> sleep &

[01:11] *** daniel-s left
[01:11] *** daniel-s_ joined
[01:15] *** daniel-s__ joined
[01:16] *** daniel-s_ left
[01:18] *** thou left
[01:19] *** daniel-s__ left
[01:19] *** daniel-s__ joined
[01:24] *** daniel-s__ left
[01:24] *** _daniel-s__ joined
[01:27] <dalek> features: 841ed85 | larry++ | features.json:

[01:27] <dalek> features: grammar, sig, phaser features

[01:27] <dalek> features: review: https://github.com/perl6/features/commit/841ed85230

[01:27] <sorear> good * #perl6

[01:28] <sorear> TimToady++ taking up features slack

[01:28] <TimToady> well, desperate for soto material :)

[01:28] *** _daniel-s__ left
[01:28] *** daniel-s joined
[01:28] <sorear> mmm soto

[01:29] <sorear> google -> 4 different uses

[01:33] *** daniel-s_ joined
[01:33] *** daniel-s left
[01:34] *** tyatpi_ left
[01:34] *** tyatpi_ joined
[01:37] *** daniel-s_ left
[01:37] *** daniel-s__ joined
[01:41] <colomon> rakudo: my @a = <a b c>; my @b = eval('@a'); say :@b.perl

[01:41] <p6eval> rakudo 922500: OUTPUT«"b" => ["a", "b", "c"]␤»

[01:41] *** woosley joined
[01:41] *** daniel-s__ left
[01:42] *** _daniel-s__ joined
[01:42] *** lichtkind left
[01:46] *** _daniel-s__ left
[01:46] *** _daniel-s__ joined
[01:48] <colomon> rakudo: my @a = <a b c>; my @b = '@a'.eval(); say :@b.perl

[01:48] <p6eval> rakudo 922500: OUTPUT«"b" => [undef]␤»

[01:48] <colomon> :\

[01:48] <pmichaud> istr we were thinking of eliminating Str.eval, or something like that.

[01:50] *** _daniel-s__ left
[01:50] *** daniel-s joined
[01:52] *** whiteknight left
[01:54] <sorear> +1

[01:55] *** pl31415 joined
[01:55] *** daniel-s_ joined
[01:55] *** daniel-s left
[01:59] *** daniel-s__ joined
[01:59] *** daniel-s_ left
[02:04] *** _daniel-s__ joined
[02:04] *** daniel-s__ left
[02:07] *** thundergnat left
[02:08] *** daniel-s joined
[02:08] *** _daniel-s__ left
[02:09] *** quietfanatic joined
[02:09] <quietfanatic> TimToady: ping

[02:12] *** tokuhir__ left
[02:12] *** daniel-s_ joined
[02:12] *** daniel-s left
[02:13] *** tokuhir__ joined
[02:13] <sorear> o/ quietfanatic

[02:13] <quietfanatic> hi

[02:17] *** daniel-s__ joined
[02:17] *** daniel-s_ left
[02:18] <TimToady> quietfanatic: pong

[02:19] <dalek> features: d4aa6d4 | larry++ | features.json:

[02:19] <dalek> features: more features, codes

[02:19] <dalek> features: review: https://github.com/perl6/features/commit/d4aa6d471b

[02:20] *** bluescreen10 left
[02:21] <TimToady> quietfanatic: nm, got your email

[02:21] *** daniel-s__ left
[02:21] *** daniel-s__ joined
[02:25] <colomon> urk.  so "make spectest" just lost all my changes today in the dark reaches of git.

[02:25] *** daniel-s__ left
[02:26] *** daniel-s__ joined
[02:26] <moritz> colomon: changes in t/spec/?

[02:26] <colomon> moritz: yes

[02:26] <moritz> colomon: did you commit?

[02:26] <colomon> yes

[02:26] <colomon> I presume they're still in there somewhere

[02:26] <colomon> just don't know how to get back to them

[02:26] <moritz> git reflog # will tell you their SHA1s

[02:27] <moritz> once you have the sha1s, you can cherry-pick them onto whatever branch you want

[02:27] <moritz> or merge or rebase

[02:27] * moritz tries to sleep again

[02:28] <colomon> I don't see them in reflog?

[02:28] *** quietfanatic left
[02:29] <colomon> oh, wrong git

[02:30] <colomon> moritz++ # reflog worked great in the proper directory, and git checkout master got my code back

[02:30] *** _daniel-s__ joined
[02:30] *** daniel-s__ left
[02:33] *** aloha joined
[02:34] *** daniel-s joined
[02:35] *** _daniel-s__ left
[02:39] *** daniel-s left
[02:39] *** daniel-s_ joined
[02:43] *** daniel-s_ left
[02:43] *** daniel-s_ joined
[02:43] *** donri left
[02:47] *** daniel-s_ left
[02:48] *** daniel-s_ joined
[02:52] *** daniel-s__ joined
[02:53] *** daniel-s_ left
[02:56] *** _daniel-s__ joined
[02:57] *** daniel-s__ left
[03:00] *** pl31415 left
[03:01] *** daniel-s joined
[03:01] *** _daniel-s__ left
[03:05] *** daniel-s left
[03:05] *** daniel-s joined
[03:09] *** daniel-s left
[03:10] *** daniel-s joined
[03:14] *** daniel-s left
[03:14] *** daniel-s joined
[03:18] *** tokuhir__ left
[03:18] *** daniel-s_ joined
[03:18] *** kaare_ joined
[03:19] *** daniel-s left
[03:23] *** daniel-s__ joined
[03:23] *** Su-Shee_ joined
[03:23] *** daniel-s_ left
[03:24] *** Su-Shee left
[03:27] *** _daniel-s__ joined
[03:27] *** daniel-s__ left
[03:32] *** _daniel-s__ left
[03:32] *** daniel-s joined
[03:32] <dalek> features: f6212c0 | larry++ | features.json:

[03:32] <dalek> features: typo

[03:32] <dalek> features: review: https://github.com/perl6/features/commit/f6212c0681

[03:36] *** daniel-s left
[03:38] *** tyatpi_ left
[03:58] <sorear> Who is planning to rely to Rajeev on p6l?  (*wants to avoid doubling work*)

[03:59] <dalek> features: ae64160 | larry++ | features.json:

[03:59] <dalek> features: tweaks, various classes of operators

[03:59] <dalek> features: review: https://github.com/perl6/features/commit/ae64160900

[04:01] *** tyatpi_ joined
[04:12] *** thou joined
[04:13] <dalek> roast: 9243ea1 | Coke++ | S02-builtin_data_types/nan.t:

[04:13] <dalek> roast: track nom regressions.

[04:13] <dalek> roast: review: https://github.com/perl6/roast/commit/9243ea137d

[04:21] <dalek> rakudo/nom: 0b097fd | Coke++ | t/spectest.data:

[04:21] <dalek> rakudo/nom: track error conditions (pass some tests)

[04:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0b097fdbef

[04:31] <dalek> features: 1954b50 | larry++ | features.json:

[04:31] <dalek> features: dynvars, trig, filetests; more codes

[04:31] <dalek> features: review: https://github.com/perl6/features/commit/1954b50cb0

[04:32] *** molaf joined
[04:49] *** thou left
[04:52] <sorear> TimToady: what do you think of adding deader implementations (Rakudo-Alpha, Pugs, Mildew/SMOP)?

[04:55] *** birdwindupbird joined
[04:56] <pmichaud> I'd be disinclined to include rakudo-alpha; the spec has changed a lot since it was last worked on.

[04:56] <pmichaud> I don't think it's helpful to include details about compilers targeting out-of-date specs.

[05:03] <TimToady> long term I think the matrix will be more interesting wrt alternate backends

[05:07] <dalek> features: c29629b | larry++ | features.json:

[05:07] <dalek> features: more codes, features

[05:07] <dalek> features: review: https://github.com/perl6/features/commit/c29629baee

[05:08] <sorear> niecza: say %*ENV<HOME>

[05:08] <p6eval> niecza v8-3-g838bc38: OUTPUT«/home/p6eval␤»

[05:08] <sorear> that's a +- or maybe a +

[05:09] <sorear> niecza can't set environment variables (%*ENV is like a copy of __environ), but without working qx[] this is unobservable :)

[05:10] <sorear> also, I hope you realize I'm going to use the blanks on the chart to prioritize what to work on :D

[05:20] <TimToady> ah, I typed $*ENV, I see

[05:21] <dalek> features: fc1a2dc | larry++ | features.json:

[05:21] <dalek> features: niecza does envvars; more codes

[05:21] <dalek> features: review: https://github.com/perl6/features/commit/fc1a2dce33

[05:22] <pmichaud> file:// urls would seem to be almost guaranteed not to work :-(

[05:24] *** Jackneill joined
[05:26] <dalek> features: fa5cf1c | larry++ | features.json:

[05:26] <dalek> features: fix some file: entries

[05:26] <dalek> features: review: https://github.com/perl6/features/commit/fa5cf1cb67

[05:27] <sorear> hah

[05:31] *** molaf left
[05:36] *** DABY0RC joined
[05:37] <dalek> rakudo/nom: ad8d7a6 | pmichaud++ | src/core/terms.pm:

[05:37] <dalek> rakudo/nom: Add %*ENV.

[05:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ad8d7a6a17

[05:55] <dalek> rakudo/nom: 251c5b3 | pmichaud++ | src/ (2 files):

[05:55] <dalek> rakudo/nom: Add run(), qx operator.

[05:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/251c5b3670

[05:55] <dalek> features: 6cec1c8 | pmichaud++ | features.json:

[05:55] <dalek> features: Mark nom as having 'run', 'qx, '%*ENV'.

[05:55] <dalek> features: review: https://github.com/perl6/features/commit/6cec1c8039

[05:57] *** tyatpi_ left
[05:58] <dalek> features: b14ce20 | larry++ | features.json:

[05:58] <dalek> features: more features, codes

[05:58] <dalek> features: review: https://github.com/perl6/features/commit/b14ce20df4

[06:03] *** cooper left
[06:05] <dalek> features: 3975bdf | pmichaud++ | features.json:

[06:05] <dalek> features: rosettacode.org pages don't have .html extensions

[06:05] <dalek> features: review: https://github.com/perl6/features/commit/3975bdfa68

[06:08] <moritz> good morning

[06:08] *** koban joined
[06:09] *** koban left
[06:09] *** koban joined
[06:09] *** koban left
[06:09] <pmichaud> moritz: I'm running a benchmark of --optimize versus non --optimize for posting on parrot-dev.

[06:09] <pmichaud> (good morning, btw)

[06:09] <moritz> good morningpmichaud++

[06:09] <moritz> good morning pmichaud++

[06:10] <pmichaud> it'll be a bit before the results are finished, so I'll post them in approx 5 hrs after I sleep :)

[06:10] <pmichaud> preliminary results are that running without --optimize causes the core.pm compile to take 2x longer 

[06:15] <dalek> features: 9d14625 | larry++ | features.json:

[06:15] <dalek> features: more codes, done with RC a..f tasks

[06:15] <dalek> features: review: https://github.com/perl6/features/commit/9d1462542f

[06:17] * moritz checks to see if he still recognizes perl6/features...

[06:17] <moritz> nope

[06:17] <moritz> everyone++

[06:17] <moritz> TimToady++

[06:18] <pmichaud> moritz++ for getting something started

[06:20] <dalek> features: b3769fd | moritz++ | features.json:

[06:20] <dalek> features: eval

[06:20] <dalek> features: review: https://github.com/perl6/features/commit/b3769fdfc1

[06:21] *** wtw joined
[06:24] <dalek> features: f2b5fc0 | moritz++ | process.pl:

[06:24] <dalek> features: remove redundant conditional

[06:24] <dalek> features: review: https://github.com/perl6/features/commit/f2b5fc04ad

[06:29] <dalek> features: e90eb68 | moritz++ | template.html:

[06:29] <dalek> features: hilight the footnote when soembody clicks on it

[06:29] <dalek> features: review: https://github.com/perl6/features/commit/e90eb684d1

[06:30] *** Trashlord joined
[06:32] <dalek> features: 17f9ed6 | larry++ | features.json:

[06:32] <dalek> features: more codes

[06:32] <dalek> features: review: https://github.com/perl6/features/commit/17f9ed6876

[06:35] *** Su-Shee_ is now known as Su-Shee

[06:36] <dalek> features: a4407ac | pmichaud++ | features.json:

[06:36] <dalek> features: Note that rakudo currently promotes bigints to nums.

[06:36] <dalek> features: review: https://github.com/perl6/features/commit/a4407ac5dc

[06:38] <moritz> niecza: try { die "foo"; CATCH { say $! } }

[06:38] <p6eval> niecza v8-3-g838bc38: OUTPUT«===SORRY!===␤␤Action method statement_control:CATCH not yet implemented at /tmp/82y0DLE9Gc line 1:␤------> try { die "foo"; CATCH { say $! } ⏏}␤␤Unhandled exception: Unable to resolve method statement_level in class Str␤ …

[06:39] *** tokuhir__ joined
[06:40] <dalek> features: e3be408 | pmichaud++ | features.json:

[06:40] <dalek> features: Add missing required comma in list of code urls.

[06:40] <dalek> features: review: https://github.com/perl6/features/commit/e3be408f30

[06:40] *** kjeldahlw left
[06:44] <pmichaud> time for sleep -- bbl

[06:48] <dalek> features: bbce12f | larry++ | features.json:

[06:48] <dalek> features: more codes

[06:48] <dalek> features: review: https://github.com/perl6/features/commit/bbce12faa8

[06:52] <dalek> features: d8d0398 | larry++ | features.json:

[06:52] <dalek> features: format codes better

[06:52] <dalek> features: review: https://github.com/perl6/features/commit/d8d0398ede

[06:53] *** kjeldahlw joined
[07:07] <sorear> Are we targetting only RC?

[07:07] <moritz> other links are fine too

[07:10] *** Mowah joined
[07:19] <dalek> features: c36e5de | larry++ | features.json:

[07:19] <dalek> features: add triangle, more codes

[07:19] <dalek> features: review: https://github.com/perl6/features/commit/c36e5dea5b

[07:20] * TimToady is giving up for the night, so feel free to play with it

[07:20] <TimToady> zzz &

[07:22] *** mj41_nb joined
[07:28] *** koban joined
[07:28] *** koban left
[07:29] <dalek> perl6.org: 5e68a99 | moritz++ | source/compilers/index.html:

[07:29] <dalek> perl6.org: [compilers] remove mildew and elf (not developed anymore), note last pugs release

[07:29] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/5e68a99c48

[07:40] *** ab5tract joined
[07:59] <dalek> rakudo/nom: b45401d | moritz++ | t/spectest.data:

[07:59] <dalek> rakudo/nom: two more passing test files

[07:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b45401dab6

[08:05] *** daniel-s joined
[08:07] *** cosimo left
[08:09] *** daniel-s_ joined
[08:09] *** daniel-s left
[08:14] *** daniel-s__ joined
[08:14] *** daniel-s_ left
[08:18] *** _daniel-s__ joined
[08:18] *** daniel-s__ left
[08:22] *** daniel-s joined
[08:22] *** _daniel-s__ left
[08:27] *** daniel-s_ joined
[08:27] *** daniel-s left
[08:31] *** wamba joined
[08:31] *** daniel-s__ joined
[08:31] *** daniel-s_ left
[08:36] *** _daniel-s__ joined
[08:36] *** daniel-s__ left
[08:40] *** daniel-s joined
[08:41] *** _daniel-s__ left
[08:43] *** dakkar joined
[08:45] *** daniel-s_ joined
[08:45] *** daniel-s left
[08:49] *** daniel-s__ joined
[08:50] *** daniel-s_ left
[08:50] <Trashlord> wtf

[08:53] *** daniel-s__ left
[08:53] *** daniel-s__ joined
[08:54] <sorear> Trashlord: ??

[08:55] * sorear out

[08:58] *** _daniel-s__ joined
[08:58] *** daniel-s__ left
[09:02] *** daniel-s joined
[09:02] *** _daniel-s__ left
[09:04] *** daxim joined
[09:06] *** daniel-s left
[09:07] *** daniel-s joined
[09:11] *** daniel-s left
[09:11] *** daniel-s joined
[09:14] *** envi joined
[09:15] *** daniel-s left
[09:15] *** daniel-s_ joined
[09:20] *** daniel-s__ joined
[09:20] *** daniel-s_ left
[09:24] *** daniel-s__ left
[09:24] *** daniel-s__ joined
[09:28] *** daniel-s__ left
[09:28] *** daniel-s__ joined
[09:30] *** hatseflats left
[09:32] <kboga> hello perl6

[09:33] *** _daniel-s__ joined
[09:33] *** daniel-s__ left
[09:42] <jnthn> o/ #perl6

[09:44] <moritz> \o *

[09:50] *** _twitch joined
[09:52] <kboga> could someone be bugged to take a look at this pull request please? https://github.com/rakudo/rakudo/pull/27/files

[09:53] *** hatseflats joined
[10:03] * moritz wonders why "turn on subset.t" appears twice in the commit list

[10:04] <moritz> and "Remove the now obsolete regex anchors used in the samecase method after ..." appears three times

[10:04] <moritz> kboga: if you cherry-pick the still relevant commits into a clean branch made from rakudo/nom I'll merge it

[10:07] <kboga> ok, will try to do so

[10:09] *** timbunce joined
[10:12] <mathw> jnthn: How do you find git works for you on Windows?

[10:13] *** woosley left
[10:16] *** kfo left
[10:16] <jnthn> mathw: I'm very happy with it - it's extremely rare it gets in my way.

[10:17] <jnthn> mathw: The most I've run into is the odd weird line-ending issue.

[10:17] <jnthn> And that's been rare.

[10:18] <jnthn> Bizzarely, it works better for me than TFS, which is designed for Windows. ;)

[10:19] <jnthn> kboga++ # hacking on Rakudo

[10:29] <mathw> Excellent

[10:29] <mathw> I ask just because my new job is all Windows and one of the first things I need to sort out is source code management, which is currently a subversion repo hosted on the only coder's laptop

[10:30] <mathw> And they're definitely willing to consider moving to something else, so obviously I was wondering how well git would work :)

[10:30] <mathw> I've had so much pain with SVN at my current job that I'm determined to not use it.

[10:31] <jnthn> Yeah, I've found git a big improvement. 

[10:34] *** _daniel-s__ left
[10:34] <mathw> I love how it tracks commits across branches

[10:34] <mathw> The other day I merged a big pile of stuff across branches in SVN, and now anybody viewing the history of the target branch will think I wrote all that code, but half of it was me merging someone else's commits

[10:35] <mathw> because SVN just thinks oh look, it's a patch

[10:36] <moritz> git also does magic like merging changes in renamed files

[10:36] <moritz> branch a renames foo to bar, branch b changes contents of file foo

[10:36] <moritz> you merge b in a, you get file bar with the content changes of branch b

[10:37] <moritz> no manual intervening necessary

[10:39] *** tokuhir__ left
[10:39] <mathw> awesome

[10:39] *** tokuhir__ joined
[10:40] <mathw> I think I'm going to push for that, the Windows behaviour was the thing I was least certain about

[10:40] <mathw> I'm sure we can find a way to host the server on a Windows machine

[10:40] <mathw> (who'd've thought, me taking a Windows job!)

[10:40] <mathw> But it's all .NET so maybe one day I can get them using Niecza :)

[10:44] *** tokuhir__ left
[10:45] * jnthn does a lot of .Net at $dayjob too :)

[10:45] *** ab5tract left
[10:46] <mathw> I thought you might, seeing as how 6model seems to have started out in C#

[10:47] <mathw> I'll be pretty much forming a proper dev team from scratch, and we're talking about using at least some F#, which should be fun :)

[10:47] <jnthn> Nice! :)

[10:47] <jnthn> VB.NET too? ;-) 

[10:48] <mathw> not if I have any say in the matter!

[10:48] *** Jackneill left
[10:49] <jnthn> :-)

[10:49] <jnthn> Yeah, it's...horrible. 

[10:54] <mathw> That's one way of putting it

[10:54] <mathw> This is very exciting though, I get the chance to lay down some good working methods and ideas and have a real say in choosing the right languages and tools

[11:11] *** Jackneill joined
[11:19] <tadzik> good morning #perl6

[11:20] <jnthn> hi, tadzik 

[11:31] *** sili joined
[11:31] <sili> haiii

[11:31] <moritz> hello sili 

[11:32] <moritz> where is argument coercion in signatures speciified? 'as' is not an easy word to grep for :-)

[11:32] <jnthn> moritz: Specified as in, in the spec?

[11:32] <jnthn> S06 I'd guess

[11:32] <jnthn> coercion is probably easier to search for :)

[11:33] <jnthn> Or just "coerce"

[11:33] <moritz> ack '\$\w+ as '  finds only three things, one example in S32

[11:33] <moritz> and two false hits

[11:33] <jnthn> hm

[11:33] <flussence> moritz: try "trait_mod:sym<as>", that might be it

[11:33] <moritz> flussence: no hit in the specs

[11:34] <flussence> oh, in the spec

[11:34] <flussence> hm

[11:34] <flussence> (well I found it in the code, at least :)

[11:35] <moritz> ah, S02:1557

[11:35] <moritz> jnthn++

[11:35] <moritz> at least for the return type

[11:37] <jnthn> nom: sub foo($x as Int) { say $x.WHAT; say $x; }; foo('42')

[11:37] <p6eval> nom: OUTPUT«Str()␤42␤»

[11:37] <jnthn> meh.

[11:37] <jnthn> NYI or some such, I guess.

[11:42] <flussence> ok, I give up. I can't seem to find anything about the parameter type coercion "as" in the spec... :/

[11:44] <flussence> there's not even an example line of code for it, besides one use at S32/Numeric:245

[11:44] * moritz is glad he isn't the only one who can't find it

[11:44] <moritz> I've opened a ticket in the github issue tracker for perl6/specs

[11:47] <dalek> features: 51c6bee | moritz++ | features.json:

[11:47] <dalek> features: add a few spec links

[11:47] <dalek> features: review: https://github.com/perl6/features/commit/51c6bee662

[11:53] <pmichaud> good morning, #perl6

[11:53] <kboga> moritz: done cherry picking the commits in a clean branch: https://github.com/rakudo/rakudo/pull/28

[11:54] <jnthn> morning, pmichaud 

[11:55] <kboga> good morning, pm

[11:57] <moritz> kboga: looks great, merging

[11:57] <kboga> moritz: thanks

[11:57] <moritz> kboga: thank you for the patches and the effort

[11:58] <dalek> rakudo/nom: bb9b16a | kboga++ | src/core/Str.pm:

[11:58] <dalek> rakudo/nom: Remove the now obsolete regex anchors.

[11:58] <dalek> rakudo/nom: 

[11:58] <dalek> rakudo/nom: Made possible by commit dc942fb in the nqp repo (pmichaud++).

[11:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bb9b16adc1

[11:58] <dalek> rakudo/nom: 163a1f7 | kboga++ | t/spectest.data:

[11:58] <dalek> rakudo/nom: Track error conditions.

[11:58] <dalek> rakudo/nom: Enable S29-conversions/hash.t (passes when run separately)

[11:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/163a1f7636

[11:58] <dalek> rakudo/nom: b890384 | moritz++ | / (2 files):

[11:58] <dalek> rakudo/nom: Merge pull request #28 from kboga/nom

[11:58] <dalek> rakudo/nom: 

[11:58] <dalek> rakudo/nom: Update error conditions, remove workarounds from regexes

[11:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b8903844f2

[12:01] <sili> any chance there's a DBI module? I'm using rakudo

[12:01] <[Coke]> jnthn: (git on windows) the only time line endings have really been an issue for me is with git-svn and a merge of a branch that was created with svn.

[12:02] * [Coke] imagines we're over 8000 spec tests now on nom with recent commits.

[12:02] <moritz> [Coke]: in nom two files appeared with CR line endings only

[12:02] <[Coke]> (we were at 7954 yesterday after my commit.)

[12:03] <moritz> [Coke]: written by jnthn++ - might have been a git + newlines issue

[12:03] * flussence goes to verify that number

[12:04] <jnthn> moritz: That was my editor picking a really weird default line ending for some reason, rather than git's fault.

[12:04] <moritz> jnthn: ah, good to know

[12:07] <tadzik> sili: check out modules.perl6.org

[12:07] <moritz> there's MiniDBI - not sure how well it runs on current rakudo

[12:08] <sili> tadzik: thanks. I was hoping there was cpan-ish thing.

[12:08] <pmichaud> general planning note:  I'm reserving tomorrow to finish the updates to the regex engine, including switching nqp and rakudo parsing to use the new engine.

[12:08] <moritz> it's cpan-ish, the "ish" part is just rather big-ish :-)

[12:08] * moritz looks forward to the updates from pmichaud++

[12:10] <pmichaud> okay, have to run some guests to the airport -- bbiah

[12:10] <pmichaud> well, an hour-ish.  :)

[12:10] * moritz hopes the airport isn't too far away, otherwise running might be quite daunting

[12:10] <moritz> :-)

[12:10] <jnthn> pmichaud: Got an interview and lunch meeting tomorrow, but suspect I'll be back from them by the time you're up tomorrow :)

[12:11] <pmichaud> jnthn: sure thing.  I suspect my work won't interfere much with others (or vice versa); just wanted to let people know the current plans :)

[12:12] <pmichaud> nom:  say [/+] 1,2,3,4;

[12:12] <p6eval> nom: OUTPUT«Quantifier quantifies nothing at line 1, near "] 1,2,3,4;"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23611 (src/stage2/gen/NQPHLL.pir:6347) (src/stage2/gen/NQPHLL.pm:329)␤»

[12:12] <pmichaud> nom:  say [\+] 1,2,3,4;

[12:12] <p6eval> nom: OUTPUT«Nominal type check failed for parameter '$infinite'; expected Any but got Mu instead␤current instr.: 'GATHER' pc 476383 (src/gen/CORE.setting.pir:120573) (src/gen/CORE.setting:2812)␤»

[12:12] <pmichaud> hmmmm

[12:12] <pmichaud> I'll look at that when I get back.

[12:13] <pmichaud> I thought I had triangle reductions implemented.

[12:13] <pmichaud> bbiaw

[12:16] <dalek> rakudo/nom: ab97547 | jonathan++ | src/ (4 files):

[12:16] <dalek> rakudo/nom: Implement coercion for parameters. Goes one step better than master - only coerces if the value isn't already of the correctr type.

[12:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ab97547688

[12:18] *** bluescreen10 joined
[12:18] *** cryptographrix left
[12:18] <moritz> nom: enum A <a b>; say A::b

[12:18] <p6eval> nom: OUTPUT«Object of type 'A' cannot be referenced without having been assigned a serialization context␤current instr.: 'nqp;HLL;Compiler;SerializationContextBuilder;get_object_sc_ref_past' pc 45617 (src/stage2/gen/NQPHLL.pir:15607) (src/stage2/gen/NQPHLL.pm:2099)␤»

[12:19] <jnthn> moritz: I only got half way through enums before I went on vacation. Plan to work on them some more later today.

[12:20] <moritz> o/

[12:20] *** cosimo joined
[12:21] <jnthn> nom: class A { has $.x = 42 }; BEGIN say A.new.x

[12:21] <p6eval> nom: OUTPUT«42␤»

[12:22] <jnthn> ah, good...yesterday's thunk fix dealt with that too.

[12:22] *** pernatiy joined
[12:22] <moritz> jnthn: btw I had a nice chat with Stevan Little (of Moose fame) about MOPs, and specifically about nom and the MOP he's designing for p5 core

[12:23] <jnthn> Ah, cool.

[12:23] <moritz> he takes an ocaml-ish approach, where a class is something like a lexpad, and an object is a closury clone of such a pad

[12:23] <jnthn> Isn't that similarish to the JavaScript approach also?

[12:23] <jnthn> Apart from it reifies the class/object difference some more...

[12:24] <jnthn> (more than JavaScript, I mean...)

[12:24] <moritz> rakudo: class A { has $.x = 42 }; BEGIN say A.new.x # probably can't even find say()?

[12:24] <p6eval> rakudo 922500: OUTPUT«===SORRY!===␤too few positional arguments: 1 passed, 2 (or more) expected␤»

[12:24] <jnthn> wow :)

[12:24] <moritz> jnthn: I never considered that comparison, but at some level it seems appropriate

[12:26] <moritz> though lexpads as representation would allow per-class private attributes (even with same attribute names in inherited classes without clashes)

[12:26] <moritz> which I don't think JS allows easily

[12:26] <jnthn> ah, I see

[12:26] <jnthn> Yeah, that is different :)

[12:27] <jnthn> It's a cute idea. I suspect with the appropriate REPR and a little glue, you could build similar on top of 6model.

[12:27] <moritz> I'm prety sure you could :-)

[12:29] <jnthn> nom: my $uid = 0; sub mk_obj($x) { my role Foo[$uid] { method m() { say $x } }; Foo[$uid++].new }; mk_obj(1).m; mk_obj(2).m

[12:29] <p6eval> nom: OUTPUT«Symbol '$x' not predeclared in m (/tmp/B4Qh_LAKmx:1)␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 154 (compilers/pct/src/PCT/HLLCompiler.pir:111)␤»

[12:29] <jnthn> ouch

[12:29] <jnthn> rakudo: my $uid = 0; sub mk_obj($x) { my role Foo[$uid] { method m() { say $x } }; Foo[$uid++].new }; mk_obj(1).m; mk_obj(2).m

[12:29] <p6eval> rakudo 922500: OUTPUT«1␤2␤»

[12:30] <jnthn> I wonder if that's an easy Perl 6 approximation-ish of the idea...though maybe not.

[12:30] <flussence> nom passes 8039, master has 21359. the gap's getting smaller :)

[12:30] <jnthn> nom: my $uid = 0; sub mk_obj($y) { my $x = $y; my role Foo[$uid] { method m() { say $x } }; Foo[$uid++].new }; mk_obj(1).m; mk_obj(2).m

[12:30] <p6eval> nom: OUTPUT«Parametric roles not yet implemented at line 1, near ".new }; mk"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23611 (src/stage2/gen/NQPHLL.pir:6347) (src/stage2/gen/NQPHLL.pm:329)␤»

[12:31] <jnthn> aha.

[12:33] *** cryptographrix joined
[12:33] <dalek> roast: 2627458 | moritz++ | S02-builtin_data_types/hash.t:

[12:33] <dalek> roast: a rakudo fudge in hash.t

[12:33] <dalek> roast: review: https://github.com/perl6/roast/commit/2627458277

[12:33] <dalek> roast: a4a33cd | moritz++ | S03-operators/assign.t:

[12:33] <dalek> roast: fudge a nom segfault

[12:33] <dalek> roast: review: https://github.com/perl6/roast/commit/a4a33cd6b5

[12:33] *** Mowah left
[12:34] <jnthn> moritz: Got a golf of that segfault?

[12:34] <moritz> jnthn: I can try

[12:35] <jnthn> Thanks. :)

[12:36] <moritz> down to 12 lines

[12:38] *** wamba left
[12:39] *** wamba joined
[12:41] <moritz> jnthn: https://gist.github.com/1109277

[12:41] <moritz> jnthn: removing some of the is() lines makes the segfault go away

[12:45] *** Holy_Cow joined
[12:45] *** Holy_Cow left
[12:48] <jnthn> moritz: Thanks, I'm sure I can reproduce that and track it down.

[13:14] *** MayDaniel joined
[13:30] <[Coke]> Tests=8085

[13:30] <[Coke]> whoops: Files=286, Tests=8085

[13:37] *** noodles__ joined
[13:38] <noodles__> first

[13:39] <takadonet>  second?

[13:40] <PerlJam> I couldn't decide whether to respond with "second" or "last"

[13:40] <flussence> nth

[13:40] <moritz> the first noodles are the best

[13:40] <noodles__> why?

[13:41] <moritz> because they are the freshest

[13:41] <moritz> and I love fresh food

[13:41] <PerlJam> When the noodles sit for a while and soak up some broth or sauce, those are the best noodles

[13:42] *** Trashlord left
[13:43] <noodles__> It's hard in English for me ! god

[13:43] <PerlJam> don't you mean, it's al dente?

[13:46] *** noodles__ left
[13:46] *** Trashlord joined
[13:50] *** AndroUser2 joined
[13:52] *** cryptographrix left
[13:57] *** drbean left
[14:00] *** AndroUser2 left
[14:07] *** noodles__ joined
[14:08] *** tokuhir__ joined
[14:10] *** wamba left
[14:18] * [Coke] feels a little weird running a .t to verify things are failing as expected. (100% OK (and failing!))

[14:28] <dalek> roast: d05d08a | (Solomon Foster)++ | / (15 files):

[14:28] <dalek> roast: Move classes NotComplex and DifferentReal from TrigTestSupport.pm to each trig test file.

[14:28] <dalek> roast: review: https://github.com/perl6/roast/commit/d05d08a337

[14:28] <dalek> roast: cd6aeac | (Solomon Foster)++ | / (16 files):

[14:28] <dalek> roast: Get rid of a lot of dead weight from the trig test harness.

[14:28] <dalek> roast: review: https://github.com/perl6/roast/commit/cd6aeac2bc

[14:28] <dalek> roast: aea78b8 | (Solomon Foster)++ | / (16 files):

[14:28] <[Coke]> whee. we're getting more test files running (though with nom regressions)

[14:28] <dalek> roast: Class AngleAndResult gone completely now.

[14:28] <dalek> roast: review: https://github.com/perl6/roast/commit/aea78b849c

[14:28] <dalek> roast: 59b5e94 | (Solomon Foster)++ | / (16 files):

[14:28] <dalek> roast: Remove TrigTestSupport.pm.

[14:28] <dalek> roast: review: https://github.com/perl6/roast/commit/59b5e94cbc

[14:28] <dalek> roast: 3900295 | (Solomon Foster)++ | S32-trig/ (14 files):

[14:28] <dalek> roast: Rearrange NotComplex and DifferentReal a bit.

[14:28] <dalek> roast: review: https://github.com/perl6/roast/commit/3900295b9e

[14:28] <dalek> roast: 3d414e0 | (Solomon Foster)++ | S32-trig/ (14 files):

[14:28] <dalek> roast: Get rid of some obsolete stuff involving bases.

[14:28] <dalek> roast: review: https://github.com/perl6/roast/commit/3d414e0066

[14:28] <dalek> roast: 0c917fb | (Solomon Foster)++ | S32-trig/ (14 files):

[14:28] <dalek> roast: Slightly better formatting.

[14:28] <dalek> roast: review: https://github.com/perl6/roast/commit/0c917fb9ac

[14:28] <[Coke]> need to fudge those tests and start running them.

[14:29] <dalek> rakudo/nom: 379f437 | Coke++ | t/spectest.data:

[14:29] <dalek> rakudo/nom: track more test failure updates.

[14:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/379f437d67

[14:30] *** wtw left
[14:31] *** birdwindupbird left
[14:31] *** noodles__ left
[14:32] *** jaldhar left
[14:34] *** wamba joined
[14:37] *** bluescreen10 left
[14:46] *** soh_cah_toa joined
[14:52] *** bluescreen10 joined
[14:52] *** thou joined
[14:56] <pmichaud> back again

[14:56] <kboga> wb

[14:56] <TimToady> * morning, pmichaud :)

[15:01] <colomon> o/

[15:03] *** wolfman2000 left
[15:05] *** spq1 joined
[15:07] *** sili left
[15:08] *** tokuhir__ left
[15:09] *** tokuhir__ joined
[15:13] *** tokuhir__ left
[15:22] *** Trashlord left
[15:24] <dalek> rakudo/nom: 318767a | pmichaud++ | src/core/GatherIter.pm:

[15:24] <dalek> rakudo/nom: Fix triangle reductions.

[15:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/318767a9e0

[15:29] <kboga> yay, think i got @*INC implemented

[15:29] <kboga> now the question is if it is done correctly or not

[15:31] *** tomaw left
[15:32] <[Coke]> if anyone wants some low hanging fruit, I can tell you some tests that need fudging for nom. ;)

[15:34] *** tomaw joined
[15:35] <kboga> the @*INC commit: https://github.com/kboga/rakudo/commit/8c37086967c336985a4cb5bb088a22fe7459784f

[15:35] <kboga> if anyone wants to review

[15:38] <kboga> its based on: https://github.com/kboga/rakudo/blob/8c37086967c336985a4cb5bb088a22fe7459784f/src/old/Compiler.pir # search @*INC

[15:44] <dalek> features: 23fba0b | larry++ | features.json:

[15:44] <dalek> features: nom now does triangles

[15:44] <dalek> features: review: https://github.com/perl6/features/commit/23fba0bbcd

[15:44] <[Coke]> spec tests that need nom fudging: https://gist.github.com/1109649

[15:45] *** soh_cah_toa left
[15:49] <dalek> features: bf84550 | larry++ | features.json:

[15:49] <dalek> features: master does sets partially

[15:49] <dalek> features: review: https://github.com/perl6/features/commit/bf8455035b

[15:54] <kboga> hmm the tests that needed @*INC now complain like this: "load_bytecode" couldn't find file 'Test/Util.pbc'

[15:54] *** MayDaniel left
[15:54] <kboga> the stuff in rakudo/t/spec/packages doesn't get compiled?

[15:55] <jnthn> kboga: Compiling stuff on demand isn't yet implemented.

[15:55] <kboga> and that is what @*INC is for right?

[15:55] <jnthn> Well, it's kinda orthogonal.

[15:56] <kboga> hmm?

[15:56] <jnthn> @*INC is where to search for modules

[15:56] <jnthn> They may or may not be pre-compiled

[15:56] <jnthn> But at the moment nom only handles the pre-compiled case

[15:56] <kboga> ic

[15:56] <jnthn> When it's made to handle the source case, it'd still look through @*INC

[15:56] <jnthn> Just for both things

[15:57] <kboga> heh, i was hoping to get a few tests passing by adding @*INC but i guess this has deeper roots then?

[15:58] *** wamba left
[15:58] <jnthn> Yeah. There's two issues to solve. By working on @*INC you're solving one of them. Which is good progress, of course. :)

[15:59] <jnthn> There's still some thinking to do on module loading and stuff - it ties into the make install stuff too.

[15:59] <kboga> moritz' branch

[16:00] *** thou left
[16:00] *** Kivutarrr joined
[16:00] <kboga> now idk what to do, is the @*INC code I provided good enough to make it to master?

[16:02] <pmichaud> kboga: looks okay to me

[16:02] *** cryptographrix joined
[16:03] <jnthn> kboga: Looks find, and if pmichaud++ is comfortable with where it's put then I am.

[16:03] <jnthn> ah, I see the patch doesn't actually update the code that searches for modules.

[16:04] <pmichaud> it just sets up @*INC, I think.

[16:04] <pmichaud> i.e., it just creates the @*INC dynvar

[16:04] <jnthn> yeah

[16:04] <pmichaud> it doesn't make anything use it yet

[16:04] <jnthn> *nod*

[16:04] <jnthn> Looks alright to me.

[16:05] <pmichaud> I'm not sure how to call core functions from the metamodel code

[16:05] <kboga> yea, thats all it does and it adds the places to look for stuff that master added in src/Compiler.pir

[16:05] <pmichaud> (e.g., to call &DYNAMIC to look up @*INC)

[16:06] <kboga> yea that gave me an error about the Hash class not having an exists method

[16:06] <jnthn> pmichaud: With difficulty - it's the setting that does a use Perl6::Metamodel.

[16:07] <jnthn> pmichaud: Though in this case we can find it via PROCESS I suspect.

[16:07] *** Trashlord joined
[16:07] <pmichaud> we can find &DYNAMIC via PROCESS?

[16:07] <jnthn> No

[16:07] <jnthn> @INC

[16:07] <pmichaud> that's not the same as @*INC, though.

[16:07] <jnthn> No, true.

[16:07] <jnthn> Hm

[16:08] <jnthn> oh

[16:08] <pmichaud> at some point we probably want some sort of "private" namespace where we can put things like &DYNAMIC, &GATHER, etc.

[16:08] <jnthn> the module loader isn't actually in Perl6::Metamodel, it seems

[16:08] <jnthn> But a separate thing

[16:08] <jnthn> src/Perl6/ModuleLoader.pm

[16:08] <jnthn> Well, we do now have Parrot namespaces available as our invizible stash. ;)

[16:09] <pmichaud> yes, that's what I did for @*ARGS :)

[16:09] <jnthn> And I for GLOBAL :)

[16:11] *** soh_cah_toa joined
[16:12] <TimToady> moritz: I'm starting to think http://perl6.org/compilers/features is frozen; I thought it updated every 15 min

[16:12] <TimToady> nevermind

[16:12] <TimToady> it was a cache issue

[16:13] <TimToady> (from working offline, I suspect)

[16:14] <jnthn> For features, nom now has argument coercion :)

[16:15] *** Kivutarrr left
[16:15] *** Kivutarrr joined
[16:16] <jnthn> What does "Inheritance manipulation" mean in the MOP section?

[16:18] <TimToady> I don't know who put it

[16:18] <TimToady> I would guess it means the ability to change your parentage somehow

[16:19] <TimToady> or maybe changing mro policies, or some such

[16:20] <jnthn> ah

[16:20] <TimToady> maybe it means killing your rich uncle that you thought was leaving you a fortune

[16:20] *** ab5tract joined
[16:20] * jnthn doesn't know whether adding parents post-composition should be supported by the default ClassHOW.

[16:21] <TimToady> certainly such actions would invalidate anything resembling a cache

[16:21] <jnthn> It's the same problem as adding attributes post-composition.

[16:21] <jnthn> Well, it is if they have attributes anyway...

[16:22] *** _twitch left
[16:22] <jnthn> Good performance wants to make assumptions that various things won't happen.

[16:22] <TimToady> in general we try to delay final assumptions till CHECK time though

[16:23] <TimToady> to give everyone a chance to say what not to assume

[16:23] *** daniel-s joined
[16:23] <jnthn> Kinda, though using something at BEGIN time can force commitments earlier than that.

[16:24] <jnthn> The P6opaque I have today commits to object layout for the type at the first instantiation, for example.

[16:24] <TimToady> might be forced into a two-level commitment strategy

[16:25] <TimToady> but maybe we can get our predeclarations pre enough to avoid that

[16:25] <jnthn> Would be worth a shot.

[16:26] <jnthn> We already make folks opt in to MONKEY_TYPING, after all.

[16:26] <jnthn> Maybe you have to MONKEY_AROUND to get stuff left as dynamic as possible. :)

[16:27] <jnthn> BTW, when do we view augment as actually having its actions take place?

[16:27] *** daniel-s left
[16:27] * jnthn is leaning to INIT on that one.

[16:27] *** daniel-s joined
[16:28] *** pyrimidine left
[16:28] <jnthn> Rationale: if you are augmenting a module's stuff, and you're pre-compiled, you expect your changes to stay around.

[16:29] <jnthn> Clearly, serialization won't catch these cases, since if the module is pre-compiled, then when you load it, you'll just get the original thingy.

[16:29] <jnthn> Separate compilation kinda demands that.

[16:29] <TimToady> depends on when you see "link" time

[16:31] <jnthn> Hmm

[16:31] <TimToady> the alternate view is that when you use something, it will be serialized along with the user's stuff, so no extra loading is done at INIT

[16:31] <TimToady> (modulo shared libs and such)

[16:32] *** daniel-s left
[16:32] *** daniel-s_ joined
[16:32] *** molaf joined
[16:32] <jnthn> That seems like a lot of redundant storage of stuff.

[16:33] <TimToady> maybe, but disk is cheap, and linking at INIT time has performance issues that could be moved to compile phase

[16:33] *** pernatiy left
[16:34] <TimToady> and we don't necessarily have to physically include the module

[16:34] <TimToady> as long as we have strict identity under versioning, we can refer to immutable compiled objects

[16:34] <jnthn> But if we don't do that then we don't really solve the issue we were aiming at.

[16:34] <jnthn> Which is that augment may cause changed versions of things.

[16:35] <dalek> nqp: b5c4138 | pmichaud++ | src/HLL/Compiler.pm:

[16:35] <dalek> nqp: Add stat.pasm to list of automatically-included macros.

[16:35] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b5c41388a0

[16:35] <TimToady> so in the normal case we can still use shared memory

[16:35] <TimToady> but in the augment case, we can just slurp it in and keep our own view of it

[16:35] * moritz back

[16:35] <jnthn> That seems to imply we need to somehow know when changes happen to things we loaded from elsewhere.

[16:36] <jnthn> augment is a trivial (syntactic) case, but a BEGIN that does a .^add_method is less so.

[16:36] <jnthn> And I really wanted to do this without having to implement an object version control system. :P

[16:36] *** daniel-s__ joined
[16:36] *** mj41_nb left
[16:36] *** daniel-s_ left
[16:37] <kboga> wb moritz

[16:37] <kboga> spec S02 has %*PID -> typo? (should be $*PID)

[16:38] <TimToady> I can see why so many languages go with a compilation model of "here's my current workspace, just dump it as the runnable image"

[16:38] <dalek> features: 53bea60 | moritz++ | features.json:

[16:38] <dalek> features: nom has "as" argument coercion

[16:38] <dalek> features: review: https://github.com/perl6/features/commit/53bea609a6

[16:39] * TimToady still hates 'as' for being inside-out

[16:40] * moritz finds it useful in practice

[16:40] *** mikehh joined
[16:40] <moritz> though it would even make sense if we had nominal types that express "can be coerced to ::Type"

[16:40] <moritz> *make even more sense

[16:41] *** _daniel-s__ joined
[16:41] *** daniel-s__ left
[16:42] *** shinobicl joined
[16:43] <TimToady> that's still thinking of it inside out

[16:44] <TimToady> when you say "can be coerced to", you're talking about the *actual type* of the container

[16:44] <moritz> container?

[16:44] <TimToady> my Whatever $x as Int;  # means the container actually is restricted to Int

[16:44] <moritz> ah

[16:45] <TimToady> should be my Int $x from Whatever; # Whatever is just how liberal you're being

[16:45] <jnthn> hm.

[16:45] *** _daniel-s__ left
[16:45] <TimToady> and I'd like the liberalness to have a default

[16:45] * jnthn wonders how to factor such a beast.

[16:45] <TimToady> so

[16:45] *** _daniel-s__ joined
[16:45] <TimToady> my Int() $x;  # contains an Int, but allows whatever the default is...Any?  Cool?

[16:45] <pmichaud> afk, lunch

[16:46] <TimToady> and it looks like a coercion to Int

[16:47] <TimToady> bleah, I should be writing my talk...

[16:47] <TimToady> maybe I should be asking you guys what you think the State of the Onion is...

[16:48] <moritz> the Onion is growing

[16:48] <TimToady> I think the P5 folks are re-realizing why we had 361 RFCs

[16:49] *** mberends joined
[16:49] *** _daniel-s__ left
[16:49] *** daniel-s joined
[16:50] <takadonet> TimToady: are you writing a new State of the Onion?

[16:50] <TimToady> trying, feebly

[16:52] <takadonet> are you presenting the talk anywhere or just posting it online?

[16:53] *** daniel-s_ joined
[16:53] *** daniel-s left
[16:54] <shinobicl> hi!!!!! :)

[16:54] <shinobicl> in this code, from the text-adventure game that masak posted a few days ago

[16:54] <shinobicl> class Flashlight does Takable { has Bool $.is_on = False; method use { if $.is_on { say "It's already switched on."; } my $was_dark = !there_is_light; $!is_on = True; say "You switch on the flashlight."; if $was_dark { say ""; $room.look; } } }

[16:55] <shinobicl> there is two references to the "is_on" variable. One uses $. and the other $! 

[16:55] <shinobicl> why is that?

[16:55] <TimToady> takadonet: presenting tomorrow night at OSCON

[16:55] <jnthn> I...don't see a good reason.

[16:55] *** wamba joined
[16:55] <jnthn> $!is_on woulda been fine both times here

[16:56] <jnthn> Dunno why you'd want it polymorphic in one case and not the other.

[16:56] <jnthn> So, I suspect thinko on masak++'s part.

[16:56] <shinobicl> mmm ok... thanks jnthn!

[16:56] *** daniel-s_ left
[16:57] <kboga> anyone working on IO::Stat?

[16:57] <jnthn> kboga: pmichaud++ did some commit that looked stat-ish earlier on today

[16:57] <kboga> yea, thats why i asked :)

[16:58] <jnthn> kboga: Don't think anyone is working on putting socket stuff back thugh.

[16:58] <jnthn> *though

[16:58] <jnthn> kboga: That'd be a nice to have.

[17:01] <kboga> Though its a bit harder I presume?

[17:01] *** thou joined
[17:01] <jnthn> kboga: Not necesarily.

[17:01] <jnthn> kboga: The existing code in master is in Perl 6, with some calls down to Parrot.

[17:01] <jnthn> kboga: It should probably part relatively directly.

[17:02] <jnthn> s/part/port/

[17:06] *** dakkar left
[17:10] *** donri joined
[17:14] *** thou left
[17:16] *** shinobicl left
[17:20] *** thou joined
[17:22] *** thou left
[17:22] *** thou joined
[17:28] *** daxim left
[17:29] <[Coke]> interesting quotes from Aristotle about p6 vs. 5.10 on p5p.

[17:30] <[Coke]>  //Lexical $_ is Broken

[17:30] *** risou left
[17:31] *** risou joined
[17:37] *** wamba left
[17:39] *** Instil left
[17:40] <tadzik> link?

[17:40] *** spq1 left
[17:43] *** tokuhir__ joined
[17:45] *** Mowah joined
[17:47] <[Coke]> ... my inbox?

[17:47] <[Coke]> I'm sure there's an archive somewhere, but I don't read it that way.

[17:47] <[Coke]> sorry. :(

[17:48] *** mj41_nb joined
[17:48] <tadzik> (: ok

[17:49] <tadzik> what's that thread subject?

[17:49] *** pernatiy joined
[17:49] *** soh_cah_toa left
[17:53] <[Coke]> 13:30 < [Coke]>  //Lexical $_ is Broken

[17:54] <tadzik> :) thanks

[17:58] <pmichaud> 16:57 <jnthn> kboga: pmichaud++ did some commit that looked stat-ish earlier on today

[17:58] <pmichaud> yes, I'm working on the filetest operators.  I'm not doing IO::Stat itself -- thus far it's (1) not spec and (2) the rakudo master implementation is IMO very suspect.

[18:02] <kboga> oh

[18:04] *** Jackneill left
[18:06] <tadzik> we'll have to do it anyway it Module Hackathon Weekend, panda uses that ISTR

[18:08] *** mj41_nb left
[18:08] <kboga> how does one flatten a hash in p6?

[18:08] <pmichaud> tadzik: "ack Stat" and "ack '\.stat'"  return no instances in panda

[18:08] <pmichaud> kboga: depends on what you mean by "flatten"

[18:08] <tadzik> hmm

[18:09] <pmichaud> kboga: you're probably looking for .kv

[18:10] <tadzik> pmichaud: right, must've been wrong about that

[18:11] <kboga> or let me rephrase, what exactly happens here in following pir statement? "%r = '&hash'(config :flat)"

[18:11] *** Jackneill joined
[18:11] *** Jackneill left
[18:11] *** Jackneill joined
[18:11] <pmichaud> that flattens out 'config' when calling &hash

[18:11] <kboga> the hash sub is called on config with :flat option?

[18:12] <pmichaud> in p6, it's like say   hash(|@config)

[18:12] <pmichaud> *saying

[18:12] <kboga> ah

[18:12] <pmichaud> :flat modifies config

[18:12] *** Jackneill left
[18:13] *** Jackneill joined
[18:13] *** Jackneill left
[18:13] *** Jackneill joined
[18:15] <kboga> thanks for your explanation pmichaud++

[18:25] *** bluescreen10 left
[18:25] *** risou is now known as risou_awy

[18:30] <kboga> the weird thing is that config is a parrot Hash

[18:31] <jnthn> You can get it shoved into an EnumMap and it'll probably work out OK.

[18:32] <jnthn> oh, actually there's an op

[18:33] <jnthn> pir::perl6ize_type__PP($parrot-hash)

[18:33] <jnthn> Will give you back an EnumMap based on it.

[18:33] <kboga> thanks jnthn

[18:34] *** cryptographrix left
[18:40] *** bluescreen10 joined
[18:45] *** birdwindupbird joined
[18:47] <sorear> good * #perl6

[19:02] <mberends> o/

[19:02] *** wamba joined
[19:02] <tadzik> hello sorear, mberends 

[19:05] <dalek> rakudo/nom: 7129b21 | pmichaud++ | src/ (5 files):

[19:05] <dalek> rakudo/nom: Add some filetest operators.

[19:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7129b213a9

[19:05] *** cryptographrix joined
[19:07] * jnthn back from nomz

[19:11] <[Coke]> OMNOMNOMNOM

[19:12] <jnthn> Exactly. :)

[19:12] *** cryptographrix left
[19:13] <dalek> roast: 389467d | (Kyle Hasselbacher)++ | S02-builtin_data_types/nil.t:

[19:13] <dalek> roast: [nil] Test for RT 93980

[19:13] <dalek> roast: review: https://github.com/perl6/roast/commit/389467d2ec

[19:15] *** shinobicl joined
[19:18] <kboga> is it possible to do something like pir::sysinfo(pir::const::SYSINFO_PARROT_OS)?

[19:19] <kboga> or am I insane? =/

[19:20] *** mj41_nb joined
[19:21] <pmichaud> it's possible, but you probably have to specify the types of the operands

[19:21] <pmichaud> I don't think that PAST knows the sysinfo arguments by default

[19:24] <kboga> like this? sysinfo_s_i

[19:24] <jnthn> sysinfo__Si

[19:24] <kboga> thx

[19:24] <kboga> failed to grep that

[19:26] *** cryptographrix joined
[19:26] <kboga> pir::sysinfo__Si(pir::const::SYSINFO_PARROT_OS) --> error:imcc:syntax error, unexpected SREG, expecting '(' ('$S100')

[19:26] <kboga> 	in file '(file unknown)' line 72

[19:26] <kboga> hmm

[19:26] *** shinobicl left
[19:26] *** Jackneill left
[19:30] *** cryptographrix left
[19:32] *** Trashlord left
[19:33] *** Trashlord joined
[19:33] <pmichaud> looks like sys.ops has to be dynloaded in order for sysinfo to work.

[19:34] <kboga> right, didn't consider that =/

[19:34] <pmichaud> might be simpler to get osname and osvers from PConfig for now.

[19:34] <pmichaud> I'm always a little wary of the dynops

[19:35] <kboga> ic

[19:35] *** ZaphrodZenovka left
[19:36] *** ZaphrodZenovka joined
[19:36] *** shinobicl joined
[19:36] *** ZaphrodZenovka left
[19:37] <sorear> pmichaud: why so wary of dynops?

[19:40] <[Coke]>  at one point they exploded if different pbc's dynloaded things different orders. I /think/ that is fixed.

[19:40] <[Coke]> *in diff...

[19:42] *** fsntation left
[19:43] <kboga> hmm, i could swear having read somewhere that the osname in parrot's config could be incorrect but can't remember where

[19:44] <PerlJam> kboga: maybe you're thinking about the osname parrot was compiled under vs. the osname it's running under?

[19:45] <kboga> possibly

[19:52] *** birdwindupbird left
[19:54] <pmichaud> I'm wary of dynops because I don't know how well supported each dynop is likely to be

[19:55] <pmichaud> some of the apis aren't well designed

[19:55] <pmichaud> as for the dynops we write ourselves, I'm fine with that -- I can trust them.  :)

[19:55] <[Coke]> pmichaud: there's really no difference in terms of support from parrot.

[19:56] <[Coke]> it's just that some were deemed "not worth loading every single time parrot is invoked"

[19:56] <[Coke]> (in fact, most of the dynops now are ones that were just moved over from static ops)

[19:57] <pmichaud> I still remain a bit skeptical, if only because there seems to be little rhyme or reason to them at the moment.

[19:57] <pmichaud> for example, sqrt is a built-in op, but pow is a dynop.

[20:01] * moritz is kinda disappointed that there's no pow__Iii opcode

[20:03] <pmichaud> also, just having gone through the filetest operators, which required the use of the <stat> opcode (dynop), OS pmc (builtin), and File PMC (dynpmc).... it's just.... weird.

[20:05] *** CAAXR92 joined
[20:06] <kboga> hmm IMCC error when building

[20:06] <moritz> got the same thing here

[20:06] <kboga> oh, the nqp version needs to be bumped to get that stat thing no?

[20:06] <pmichaud> didn't I bump NQP_VERSION?

[20:07] <moritz> Configure.pl did not complain

[20:07] <moritz> nope, last NQP_VERSION bump was by jnthn++

[20:07] *** Holy_Cow joined
[20:08] <pmichaud> huh, that's weird.

[20:08] <pmichaud> I wonder why it worked here.

[20:08] *** Holy_Cow left
[20:08] <moritz> because you typed 'make install' in nqp?

[20:08] <pmichaud> ...but I didn't.

[20:08] <pmichaud> and my nqp is a completely separate repository from nom

[20:08] <pmichaud> i.e., I always build nom with --gen-nqp

[20:09] <moritz> maybe you bumped it locally, and forgot to commit?

[20:09] <pmichaud> no, my local version also has the unbumped value.

[20:09] <pmichaud> Weird.

[20:10] <pmichaud> bumping now.

[20:10] <pmichaud> afk, grocery run

[20:11] <dalek> rakudo/nom: 08b94ed | pmichaud++ | tools/build/NQP_REVISION:

[20:11] <dalek> rakudo/nom: Bump NQP_REVISION to get stat.pasm.

[20:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/08b94edfaa

[20:14] <dalek> roast: 26737fc | (Kyle Hasselbacher)++ | S03-operators/assign.t:

[20:14] <dalek> roast: [assign] Tests for RT 77586 and RT 93972

[20:14] <dalek> roast: review: https://github.com/perl6/roast/commit/26737fcdf9

[20:14] <dalek> roast: 5dcf3af | (Kyle Hasselbacher)++ | S02-builtin_data_types/nan.t:

[20:14] <dalek> roast: Test for RT 83446

[20:14] <dalek> roast: review: https://github.com/perl6/roast/commit/5dcf3af776

[20:15] *** kaare_ left
[20:17] <sorear> I don't follow that logic

[20:17] <sorear> UNIX systems have supported demand paging of libraries for what, 30 years now?

[20:18] <sorear> having extra ops in libparrot.so is nearly free; kicking them out should do nothing except slow down the users

[20:29] *** cryptographrix joined
[20:33] <jnthn> nom: my %a = (a => 1, b => 'foo', c => Mu); say %a ~~ b => 'foo'

[20:33] <p6eval> nom: OUTPUT«"load_bytecode" couldn't find file 'CORE.setting.pbc'␤current instr.: 'nqp;Perl6;ModuleLoader;_block1140' pc 2998 (src/gen/perl6-moduleloader.pir:1203) (src/Perl6/ModuleLoader.pm:127)␤»

[20:33] <jnthn> nom: my %a = (a => 1, b => 'foo', c => Mu); say %a ~~ b => 'foo'

[20:33] <p6eval> nom: OUTPUT«"load_bytecode" couldn't find file 'CORE.setting.pbc'␤current instr.: 'nqp;Perl6;ModuleLoader;_block1140' pc 2998 (src/gen/perl6-moduleloader.pir:1203) (src/Perl6/ModuleLoader.pm:127)␤»

[20:33] <jnthn> evalbot rebuild nom

[20:33] <p6eval> OK (started asynchronously)

[20:34] <pmichaud> sorear: it's not at all a performance issue.  it's a support/api issue.

[20:35] <pmichaud> sorear: oh, I misread -- you're stating the reverse.

[20:35] <pmichaud> sorear: right, making them into dynops doesn't seem to be a big win.

[20:35] <pmichaud> I need a nap -- bbl

[20:35] <sorear> very little of what #parrot does makes sense to me :(

[20:37] <jnthn> nom: my %a = (a => 1, b => 'foo', c => Mu); say %a ~~ b => 'foo'

[20:37] <p6eval> nom: OUTPUT«Rebuild in progress␤»

[20:42] *** wooden left
[20:44] <jnthn> nom: my %a = (a => 1, b => 'foo', c => Mu); say %a ~~ b => 'foo'

[20:44] <p6eval> nom: OUTPUT«"load_bytecode" couldn't find file 'CORE.setting.pbc'␤current instr.: 'nqp;Perl6;ModuleLoader;_block1140' pc 2998 (src/gen/perl6-moduleloader.pir:1204) (src/Perl6/ModuleLoader.pm:127)␤»

[20:44] <jnthn> hm

[20:46] <[Coke]> I assumed the reason for pushing them to dynops was to make the core leaner.

[20:46] <dalek> rakudo/nom: 81f235a | jonathan++ | src/Perl6/ (3 files):

[20:46] <dalek> rakudo/nom: A little more work on enums so that enum Foo <Bar Baz> at least now gets you a Bar/Baz/Foo::Bar/Foo::Baz that you can say.

[20:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/81f235a1c6

[20:46] <dalek> rakudo/nom: 8b10f1c | jonathan++ | src/Perl6/Actions.pm:

[20:46] <dalek> rakudo/nom: Fix so colonpairs work inside enums also.

[20:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8b10f1ce80

[20:47] *** shinobicl left
[20:47] <[Coke]> If this is demonstrably not true, perhaps we should ask them nicely to move them back.

[20:51] *** lichtkind joined
[20:52] <jnthn> nom: say Any++

[20:52] <p6eval> nom: OUTPUT«Rebuild in progress␤»

[20:52] <lichtkind> thou: found nothing?

[20:54] *** [Coke] left
[20:56] *** [Coke] joined
[20:57] *** cracker007 joined
[20:58] <cracker007> It seems that rakudo doesn't support the "=:=" operator yet, right?

[20:59] <sorear> rakudo: my $a; say $a =:= $a

[20:59] <p6eval> rakudo 922500: OUTPUT«Bool::True␤»

[20:59] <sorear> rakudo: my $a; my $b; say $a =:= $b

[20:59] <p6eval> rakudo 922500: OUTPUT«Bool::False␤»

[20:59] <sorear> cracker007: it looks like it does

[20:59] <sorear> rakudo (master) does *not* have :=, however

[21:00] *** timbunce left
[21:00] <cracker007> I mean if I write this:  my $a; my $b; $a:=$b; if $a=:=$b    # I got false here

[21:00] <jnthn> rakudo: my $a; my $b; $a := $b; say $a =:= $b

[21:00] <p6eval> rakudo 922500: OUTPUT«Bool::False␤»

[21:01] <jnthn> nom: my $a; my $b; $a := $b; say $a =:= $b

[21:01] <p6eval> nom: OUTPUT«Bool::True␤»

[21:01] <jnthn> cracker007: Binding is really dodgy in the master branch.

[21:01] <sorear> perl6: my $a; my $b; $a := $b; say $a =:= $b

[21:01] <jnthn> cracker007: We've fixed it up a bunch in the current dev branch, thankfully.

[21:01] <p6eval> niecza v8-3-g838bc38: OUTPUT«Bool::True␤»

[21:01] <p6eval> ..pugs: OUTPUT«1␤»

[21:01] <p6eval> ..rakudo 922500: OUTPUT«Bool::False␤»

[21:02] <cracker007> @ sorear and @jnthn   my result is Bool:False

[21:02] <cracker007> I am using rakudo july release

[21:04] <jnthn> cracker007: Yes, July release gives wrong answer. It should be fixed in the next release.

[21:04] <sorear> cracker007: rakudo (released) is broken, rakudo (dev branch), pugs, and niecza are not.  what is confusing you?

[21:05] <cracker007> Ok. So I will wait for the next release

[21:05] *** timbunce joined
[21:05] <sorear> or you could use a different implementation for now

[21:05] <dalek> roast: 3d78167 | kboga++ | S03-operators/assign.t:

[21:05] <dalek> roast: Avoid segfault in assign.t and fix plan.

[21:05] <dalek> roast: review: https://github.com/perl6/roast/commit/3d781675fe

[21:06] *** mj41_nb left
[21:06] <sorear> alpha: my $a; my $b; $a := $b; say $a =:= $b

[21:06] <p6eval> alpha : OUTPUT«1␤»

[21:06] *** Mowah left
[21:07] <cracker007> I am just learning perl6 with rakudo. When I tried the =:= I got false which should be true, so I'm a little confused. Thanks.

[21:07] <PerlJam> cracker007: are you *sure* it should have been true?  :)

[21:07] <sorear> as a developer of another implementation, it kind of insults me when people go "ok I'll wait for it to work in Rakudo"

[21:08] <PerlJam> sorear: your implementation isn't as well known as rakudo;  that's all.

[21:08] <sorear> PerlJam: surely at least pugs is well known

[21:09] <sorear> and it works, right now, in pugs too

[21:09] <PerlJam> sorear: pugs is also well known to be outdated 

[21:09] <[Coke]> ping #parrot. allegedly lower memory use in the case where you don't use it. no change in support level.

[21:09] <[Coke]> sorear: as a user of perl6, all these implementations piss me off. ;)

[21:10] <[Coke]> can't we all just get along?

[21:14] <cracker007> @PerlJam,   $a:=$b    so it should be true that $a=:=$b, right?

[21:15] <cracker007> @sorear, Sorry I don't mean that pugs is not good. 

[21:16] *** Holy_Cow joined
[21:17] <lichtkind> thou: sounds like a clear nothing to me :)

[21:17] <[Coke]> cracker007: sorear's is niecza.

[21:19] <sorear> cracker007: $a =:= $b absolutely should be true.  It's true in two of the three major implementations, it was true in Rakudo until February 2010, and it will be true again in Rakudo after August 2011.  What more do you want?

[21:19] <[Coke]> ... I think he said he'd wait. chill out. ;)

[21:19] <sorear> We're having communication difficulties here I think

[21:19] <cracker007> So why it's not true between feb 10 and aug 11?

[21:19] *** sili joined
[21:20] <sorear> cracker007: bug

[21:20] <[Coke]> I assume there was a regression. That can happen.

[21:20] *** molaf left
[21:21] <[Coke]> You can help avoid that sort of thing by setting up a testbot.

[21:21] <[Coke]> (though that's a little wonky given that rakudo is undergoing a rewrite at the moment.)

[21:24] <dalek> roast: f6e35cb | kboga++ | S06-traits/as.t:

[21:24] <dalek> roast: Fix unitialized value in string context and remove todo markers for passing tests.

[21:24] <dalek> roast: review: https://github.com/perl6/roast/commit/f6e35cb8f8

[21:24] *** shinobicl joined
[21:28] <thou> lichtkind: i am stuck w/ no time at all this week, likely little next.....

[21:32] *** Holy_Cow left
[21:32] *** masak joined
[21:32] <masak> good evening, #perl6

[21:33] <kboga> hi masak

[21:35] <tadzik> masak: o/

[21:35] <jnthn> o/ masak 

[21:36] *** bluescreen10 left
[21:39] *** wannatalk joined
[21:40] <kboga> jnthn: recently (commit 7129b21) a test regressed, namely S03-smartmatch/any-hash-pair.t --> Ambiguous dispatch to multi 'ACCEPTS'. Ambiguous candidates had signatures: :(Enum, EnumMap $topic, Mu %_) :(Pair, Associative %h, Mu %_)

[21:40] <jnthn> grr

[21:40] <kboga> is that because EnumMap does Associative?

[21:41] <jnthn> I asked the evalbot about that earlier 'cus I feared I may have busted something with the refactor I did. Hm.

[21:41] <jnthn> OK, will try and fix. Thanks.

[21:42] <kboga> nope, I don't think it was you, but it doesn't matter who it was

[21:43] <jnthn> oh

[21:43] <jnthn> ah, right

[21:43] <jnthn> phew 

[21:43] <kboga> just asking if that could be the cause

[21:43] <jnthn> :)

[21:43] <jnthn> Off the hoook :)

[21:43] <kboga> :)

[21:44] *** Psyche^ joined
[21:45] *** cryptographrix left
[21:45] <jnthn> std: role A { method m(::?CLASS:D:) { } }

[21:45] <p6eval> std 516268a: OUTPUT«ok 00:01 121m␤»

[21:46] *** drbean joined
[21:47] *** Patterner left
[21:47] *** Psyche^ is now known as Patterner

[21:48] <jnthn> std: role A { method m(::?CLASS:D $x:) { } }

[21:48] <p6eval> std 516268a: OUTPUT«===SORRY!===␤Unable to parse signature at /tmp/vPIwk0YNNl line 1:␤------> role A { method m⏏(::?CLASS:D $x:) { } }␤Couldn't find final ')'; gave up at /tmp/vPIwk0YNNl line 1:␤------> role A { method m(::?CLASS:D ⏏$x…

[21:48] *** wannatalk left
[21:48] <jnthn> std: role A { method m(::?CLASS:D :) { } }

[21:48] <p6eval> std 516268a: OUTPUT«ok 00:01 121m␤»

[21:49] * jnthn suspects that STD ain't parsing that how he'd like it to... :)

[21:52] *** Kivutarrr left
[21:55] <kboga> eh, Pair is an Enum that does Associative and EnumMap does Associative

[21:57] <masak> Pair is an Enum!?

[21:57] <jnthn> Yes

[21:57] <jnthn> But not an Enumeration.

[21:57] <masak> I'll never get used to this way of inheriting when types are vaguely alike but not otherwise related...

[21:58] <jnthn> Pair is a mutable Enum really.

[21:58] <jnthn> Like Hash is a mutable EnumMap.

[21:58] <kboga> but Pair is narrower than Enum so the multi should choose that case for the multi ACCEPTS

[21:59] <kboga> nom: my %a = (b => 'foo'); (b => 'foo').ACCEPTS(%a)

[21:59] <p6eval> nom: OUTPUT«Ambiguous dispatch to multi 'ACCEPTS'. Ambiguous candidates had signatures:␤:(Enum, EnumMap $topic, Mu %_)␤:(Pair, Associative %h, Mu %_)␤␤current instr.: 'ACCEPTS' pc 496269 (src/gen/CORE.setting.pir:129028) (src/gen/CORE.setting:302)␤»

[21:59] <masak> jnthn: but Pairs and Enums are two totally unrelated things. just like, incidentally, Hash and EnumMap...

[22:00] <jnthn> kboga: No, in Perl 6 multi-dispatch those are tied.

[22:00] <masak> oh well, I'm clearly bikeshedding. someone who actually Gets Things Done made it that way.

[22:01] <jnthn> kboga: As Pair is narrower than Enum, but Associative is NOT narrower than EnumMap (it's the other way around)

[22:01] <jnthn> Which makes them overall tied.

[22:01] <kboga> oh right

[22:01] <kboga> didn't consider the argument

[22:01] <jnthn> Yeah, in Perl 6 multi dispatch all args count equally.

[22:01] <jnthn> There's no leftmost wins kinda thing.

[22:02] <jnthn> Like in, say, CLOS.

[22:02] <lichtkind> thou: so ihave time to deliver something:)

[22:03] <kboga> i see, but what happens or should happen in this case then?

[22:06] <masak> where on http://perl6.org/ is the features table linked?

[22:07] <jnthn> kboga: Not sure...I guess one of the candidates wants a different signature. Maybe best to wait for pmichaud++ to return from nap :)

[22:07] <flussence> masak: Compilers -> "»More«" -> left hand box, first link

[22:08] <masak> thanks.

[22:09] <flussence> btw that list says nom supports run/qx, but my local build definitely doesn't have qx()

[22:10] <flussence> oh, it's got run().

[22:10] <flussence> and qx//, oddly enough. no qx() though.

[22:10] * masak nonsentimentally suggests removing 'Incomplete "Perl 6 Rigorous Technical Specification"' from http://perl6.org/specification/

[22:10] <masak> flussence: qx() is always a function call.

[22:11] <masak> flussence: that's to spec.

[22:12] <flussence> now I guess I need to figure out why it dies at the end of "make spectest_smolder"...

[22:12] <dalek> rakudo/nom: e0ecb6c | jonathan++ | src/Perl6/ (2 files):

[22:12] <dalek> rakudo/nom: Simplify enum key handling a little.

[22:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e0ecb6c96f

[22:12] <dalek> rakudo/nom: a7019da | jonathan++ | src/Perl6/ (2 files):

[22:12] <dalek> rakudo/nom: Make ::?CLASS work, in signatures at least.

[22:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a7019dab39

[22:12] <dalek> rakudo/nom: 69069d7 | jonathan++ | src/Perl6/ (2 files):

[22:12] <dalek> rakudo/nom: Get us able to write multi method foo(::?CLASS:D: { ... } in a role and have it work.

[22:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/69069d7b8f

[22:12] <dalek> rakudo/nom: 31cb7bc | jonathan++ | src/core/Enumeration.pm:

[22:12] <dalek> rakudo/nom: A couple more methods in Enumeration/NumericEnumeration.

[22:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/31cb7bc2fe

[22:14] <masak> 'night, #perl6

[22:14] *** masak left
[22:14] <flussence> o/

[22:15] <flussence> huh. it works.

[22:15] <flussence> could've sworn it didn't before...

[22:15] <lichtkind> masak is right

[22:15] *** timbunce left
[22:15] <flussence> oh, no wonder... qx was added *today* :)

[22:17] *** wolfman2000 joined
[22:32] *** cracker007 left
[23:01] *** whiteknight joined
[23:03] <dalek> rakudo/nom: c9a42e9 | jonathan++ | src/ (2 files):

[23:03] <dalek> rakudo/nom: Continue to flesh out methods on enumerations.

[23:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c9a42e9701

[23:03] <dalek> rakudo/nom: 15a304e | jonathan++ | src/ (2 files):

[23:03] <dalek> rakudo/nom: Add .enums and .pick for enumerations.

[23:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/15a304e55b

[23:03] <dalek> rakudo/nom: 59587d1 | jonathan++ | NOMMAP.markdown:

[23:03] <dalek> rakudo/nom: Update nommap.

[23:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/59587d1b55

[23:05] <jnthn> OK, enough for today...sleep &

[23:06] *** Chillance joined
[23:08] *** shinobicl left
[23:25] *** jjore joined
[23:32] *** cryptographrix joined
[23:33] *** orafu left
[23:33] *** Holy_Cow joined
[23:35] *** orafu joined
[23:40] *** cryptographrix left
[23:42] *** lue joined
[23:43] <lue> nom: my $a = prompt "Enter name:"; say $a;

[23:43] <p6eval> nom: OUTPUT«Could not find sub &prompt␤current instr.: '_block1002' pc 78 ((file unknown):718) (/tmp/GZcSbgMPeC:1)␤»

[23:43] <lue> rakudo: my $a = prompt "Enter name:"; say $a;

[23:43] <p6eval> rakudo 922500: OUTPUT«Enter name:Land der Berge, Land am Strome,␤»

[23:45] <s1n> pmichaud: are you going to makerfair again this year?

[23:45] <lue> is this a known problem?

[23:45] *** cryptographrix joined
[23:47] <tadzik> lue: what problem?

[23:48] <tadzik> oh, no prompt() in nom?

[23:49] <lue> yes. I would guess it's already known, but you never know :)

[23:49] *** Holy_Cow left
[23:50] <tadzik> (:

[23:52] *** f00li5h[HireMe] is now known as f00li5h[HIREME]

[23:53] <lue> afk

[23:56] *** cryptographrix left
