[00:01] <dukeleto> colomon: GMP peeps find lots of bugs in compilers

[00:04] <colomon> there was also the problem that they use a struct locally for their basic type.  there's no way to handle that in zavolaj, so far as I know.  so I'd have to do an interface layer to do anything with it.

[00:09] *** drbean joined
[00:14] *** jarfhy left
[00:14] <Tene> jnthn: any hopes of addressing C structs for C interop with 6model? ;)

[00:15] <jnthn> A pointer to a struct, or a struct allocated on the stack?

[00:16] *** jarfhy joined
[00:16] * Tene prods colomon 

[00:16] <colomon> struct allocated on the stack

[00:16] <jnthn> Hmm. Maybe harder.

[00:16] <jnthn> Anyway, nothing magical in 6model "out of the box" but it probably makes it easier to implement such things.

[00:17] <jnthn> I do want to do structs support in Zavolaj

[00:17] <jnthn> That and callbacks are the two "big tricky things". :)

[00:18] <colomon> :)

[00:18] <colomon> oh, hey, as long as I've got y'all here -- how do I do the equivalent of a destructor in Rakudo?

[00:18] <jnthn> Tssk, I just figured out how to do roles in nqp-rx/nom but it took a whole bottle of beer.

[00:18] <colomon> beer++

[00:19] <colomon> DESTROY?

[00:19] * jnthn looks disappointedly at the empty bottle. How did all drain away so fast... :)

[00:19] <jnthn> colomon: Yes, but I don't think any implementation actually implements it so far.

[00:19] <colomon> oh.

[00:19] <jnthn> colomon: Also, it's not very deterministic when it's called.

[00:19] <colomon> yeah, I figured the non-deterministic bit.

[00:19] <colomon> well, then the memory leaks are someone else's fault.  :)

[00:21] <jnthn> colomon: If you prod me enough I may sneak it in while doing the 6model bits.

[00:21] <colomon> prod, prod

[00:21] <jnthn> No, when I'm working on them. :P

[00:21] *** jferrero joined
[00:21] <jnthn> Anyway, I'll try and remember. :)

[00:21] <jnthn> I'll just want to have a way that you can do some registration of such a thing in the meta-object in a cross-vm way.

[00:22] <jnthn> (which will map down to the vm's world view, of course)

[00:23] <sorear> colomon: The reason GMP is awesome is that you don't need Zavolaj.  pir::new(<BigInt>)

[00:23] <colomon> Is that still functional?

[00:23] <sorear> Probably not

[00:24] <jnthn> It's awesome until you want the code to work on backends other than Parrot. :)

[00:25] <colomon> Is Zavolaj going to work on backends other than Parrot?

[00:25] <colomon> ;)

[00:26] <jnthn> colomon: Yeah...that's why I encourage people to target it. So we can port one tricky thingummy that a load of modules are implemented in terms of, rather than port a load modules.

[00:26] <colomon> jnthn++

[00:26] <jnthn> (And yes, it *will* be darn tricky to port. :))

[00:27] *** cdarroch left
[00:27] <jnthn> OK, I think I can get nqp-rx/nom's roles done in the next few days, and then I'll be in position to branch Rakudo and start the work there. :)

[00:28] *** dorlamm left
[00:28] <sorear> Does zavolaj have a spec?

[00:28] <sorear> Wait

[00:28] <sorear> You got pmichaud to ok ROLES?

[00:28] <jnthn> I won ROLES IN NQP. The end guy was hard. :P

[00:29] <jnthn> sorear: No, it's more a proposal for what could be spec apart from I don't want it to be in its current state.

[00:29] <jnthn> It's not good enough yet.

[00:29] <lue> hello zebras! o/ Actual Math™ is fun!

[00:30] <jnthn> Zavolaj was mostly written with mberends++ in the space of about 2 days while I was in the process of moving to a new country. :)

[00:30] <sorear> I need to learn to be annoying and demanding like you. :P

[00:30] *** masonkramer joined
[00:30] <jnthn> sorear: :P

[00:30] <colomon> (annoying and demanding)++

[00:30] <colomon> seriously though, roles in nqp?!?

[00:31] <sorear> colomon: correctly parsing Perl 6 requires grammar mixins.  I tried to convince pmichaud of this months ago, but I'm not jnthn.

[00:31] <sorear> niecza: my $foo = 12; say Q:s"$foo { 2 + 2 }"

[00:31] <p6eval> niecza v1-201-ga87fbf8: OUTPUT«12 { 2 + 2 }␤»

[00:32] <jnthn> colomon: Two big reasons. 1) mix-ins to the grammar, so we can get language tweaks properly scoped. 2) I want to factor Rakudo's meta-model in terms of roles.

[00:32] <sorear> jnthn: What don't you like about Zavolaj?

[00:32] <jnthn> Guess that means I should read http://scg.unibe.ch/archive/papers/Duca05ySafeMetaclassTrait.pdf again :)

[00:32] <sorear> Why don't you want it copied in its current state?

[00:33] <jnthn> sorear: Using the uppercase types rather than native ones felt kinda wrong to me. Or at least, I would want uppercase ones to mean something else, maybe. Something more referency (e.g. Int is pass a pointer to an int, whereas int is pass an int).

[00:33] <sorear> btw. I'd appreciate someone looking over niecza:docs/announce.v2 this weekend

[00:34] <jnthn> sorear: But don't have the lowercase ones in Rakudo yet...

[00:34] <jnthn> So I used what was there :)

[00:35] <jnthn> sorear: Also at the moment passing a type object should probably be the way to pass NULL, not the "use pir::null()" hack

[00:35] <jnthn> sorear: The overall idea I like (e.g. is native('libname')

[00:35] *** rgrau left
[00:35] <jnthn> sorear: Just some details are a bit off, imho.

[00:37] <jnthn> sorear: I read the announce when you committed it. It looked fine.

[00:38] <jnthn> BTW, on quoting pmichaud++ came up with a non-role factoring that I actually prefer to the role-based on in STD, even if I do love roles. :)

[00:39] <jnthn> But we really need them for many other pieces.

[00:40] <jnthn> .oO( This is gonna be the 4th roles implementation I've done. It'll be the rightest yet... )

[00:41] *** starcoder2 joined
[00:43] <gfldex> jnthn: keep on rolling!

[00:44] <jnthn> :D

[00:44] *** shi left
[00:46] *** MayDaniel left
[00:46] * jnthn 's talks for OSDC.TW are confirmed. o/

[00:48] *** flatwhatson__ left
[00:50] *** kst left
[00:51] *** kst joined
[00:52] *** whiteknight joined
[00:55] * jnthn -> sleep

[01:01] *** leprevost joined
[01:20] *** felliott joined
[01:20] *** bps left
[01:24] *** kst left
[01:24] *** kst joined
[01:36] *** mtk left
[01:44] *** mtk joined
[01:53] *** masonkramer left
[01:53] *** masonkramer joined
[02:00] *** Chillance left
[02:08] *** plobsing joined
[02:18] *** whiteknight left
[02:18] *** am0c joined
[02:19] *** rhr left
[02:23] *** karupanerura joined
[02:26] *** rhr joined
[02:30] *** drakej joined
[02:32] *** dukeleto left
[02:33] *** dukeleto joined
[02:36] *** drakej left
[02:48] *** kst left
[02:48] *** kst joined
[02:56] *** VaccinalBowl joined
[02:56] <VaccinalBowl> Ok. What is this?

[02:56] <VaccinalBowl> Where am I?

[02:58] <VaccinalBowl> IS this the contribution page?

[02:59] <sorear> This is a chatroom.

[02:59] <sorear> It is the official Perl 6 chatroom.

[02:59] *** noganex_ joined
[02:59] <sorear> What are you looking for?

[03:00] *** VaccinalBowl left
[03:02] *** noganex left
[03:02] *** envi joined
[03:12] *** leprevost left
[03:22] <dalek> niecza: 02d7c0d | sorear++ | docs/nam.pod:

[03:22] <dalek> niecza: Update nam.pod with current list of names

[03:22] <dalek> niecza: review: https://github.com/sorear/niecza/commit/02d7c0d5ec

[03:31] <colomon> pugs: say [*] 1..50

[03:31] <p6eval> pugs: OUTPUT«30414093201713378043612608166064768844377641568960512000000000000␤»

[03:38] <colomon> pugs: my @fib = 1, 1; say ~@a

[03:38] <p6eval> pugs: OUTPUT«*** ␤    Unexpected end of input␤    expecting "::"␤    Variable "@a" requires predeclaration or explicit package name␤    at /tmp/CKkwOMkTRN line 1, column 24␤»

[03:38] <colomon> pugs: my @fib = 1, 1; say ~@a;

[03:38] <p6eval> pugs: OUTPUT«*** ␤    Unexpected ";"␤    expecting "::"␤    Variable "@a" requires predeclaration or explicit package name␤    at /tmp/PaD95Uersu line 1, column 24␤»

[03:38] <colomon> pugs: my @fib = (1, 1); say ~@a;

[03:38] <p6eval> pugs: OUTPUT«*** ␤    Unexpected ";"␤    expecting "::"␤    Variable "@a" requires predeclaration or explicit package name␤    at /tmp/_UjJ_EzyUy line 1, column 26␤»

[03:39] <colomon> pugs: my @fib = (1, 1); say ~@fib;

[03:39] <p6eval> pugs: OUTPUT«1 1␤»

[03:39] <colomon> pugs: my @fib = (1, 1); for 2..200 -> $i { @fib[$i] = @fib[$i-1] + @fib[$i-2]; };  say ~@fib;

[03:39] <p6eval> pugs: OUTPUT«1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 29…

[03:40] <colomon> pugs: my @fib = (1, 1); for 2..200 -> $i { @fib[$i] = @fib[$i-1] + @fib[$i-2]; };  say @fib[*-1];

[03:40] <p6eval> pugs: OUTPUT«1␤»

[03:40] <colomon> pugs: my @fib = (1, 1); for 2..200 -> $i { @fib[$i] = @fib[$i-1] + @fib[$i-2]; };  say @fib[-1];

[03:40] <p6eval> pugs: OUTPUT«453973694165307953197296969697410619233826␤»

[03:40] <colomon> pugs: my @fib = (1, 1); for 2..200 -> $i { @fib[$i] = @fib[$i-1] + @fib[$i-2]; };  say @fib[200];

[03:40] <p6eval> pugs: OUTPUT«453973694165307953197296969697410619233826␤»

[03:40] *** leprevost joined
[03:41] <sorear> colomon: haskell has bigints built in

[03:41] <colomon> sorear: yes, that's why I'm using pugs to calculate what my results should be.  :)

[03:42] <colomon> and yes, I'm getting the same results.

[03:44] <sorear> Are you adding transparent bigints?

[03:44] <colomon> "Transparent"?

[03:44] <sorear> rakudo: 2**80

[03:44] <p6eval> rakudo 549d2a:  ( no output )

[03:44] <sorear> rakudo: say 2**80

[03:44] <p6eval> rakudo 549d2a: OUTPUT«1.20892581961463e+24␤»

[03:45] <sorear> When you're done, will that print the right answer?

[03:45] <colomon> What I'm working on right now is a Math::BigInt class -- just an experiment with BigInts in Rakudo and Zavolaj.

[03:46] <colomon> In the long run, obviously, I'd like to make Rakudo's Int behave this way.

[03:48] <colomon> so for instance, the fib code is 

[03:48] <colomon>     my @fib := Math::BigInt.new(1), Math::BigInt.new(1), *+* ... *;

[03:50] <colomon> hmmm... for a very quick approximation, calculating exact 50! and 201st Fib number is about 6x slower than doing the calculations using Nums.  (In Rakudo.)

[03:52] <colomon> pugs: say 2**80;

[03:52] <p6eval> pugs: OUTPUT«1208925819614629174706176␤»

[03:55] <colomon> rakudo: say ~(12, 15, * % * ... 1)

[03:56] <p6eval> rakudo 549d2a: OUTPUT«(timeout)»

[03:56] <colomon> duh

[03:56] <colomon> rakudo: say ~(12, 15, * % * ... 0)

[03:56] <p6eval> rakudo 549d2a: OUTPUT«12 15 12 3 0␤»

[03:56] <colomon> rakudo: say ~(12, 16, * % * ... 0)

[03:57] <p6eval> rakudo 549d2a: OUTPUT«12 16 12 4 0␤»

[04:00] *** justatheory left
[04:01] <colomon> afk # bed

[04:06] *** felliott left
[04:09] *** wooden joined
[04:09] *** wooden left
[04:09] *** wooden joined
[04:14] *** lue left
[04:14] *** lue joined
[04:15] *** leprevost left
[04:20] *** _jaldhar joined
[04:20] *** kst left
[04:21] *** kst joined
[04:23] *** Su-Shee_ joined
[04:27] *** leprevost joined
[04:27] *** Su-Shee left
[04:28] *** jimmy1980 left
[04:34] *** jimmy1980 joined
[05:08] <diakopter> perlesque: say(123456789009876543210012345678997575839278972398796010192837409871309871039846784749863018970193847)

[05:08] <p6eval> perlesque: OUTPUT«123456789009876543210012345678997575839278972398796010192837409871309871039846784749863018970193847␤»

[05:08] <diakopter> perlesque: say(123456789009876543210012345678997575839278972398796010192837409871309871039846784749863018970193847/578943787938475987667540392879028370496098473029872039487509834702987509872039487)

[05:08] <p6eval> perlesque: OUTPUT«213244863459863607␤»

[05:08] <diakopter> perlesque: say(123456789009876543210012345678997575839278972398796010192837409871309871039846784749863018970193847 % 578943787938475987667540392879028370496098473029872039487509834702987509872039487)

[05:08] <p6eval> perlesque: OUTPUT«unhandled node type: <invalid>␤Statement_list 1␤ <invalid> <unexpected: [@23,232:232=')',<14>,2:187], resync=sub say(object $z) {Console.WriteLine($z)};

[05:08] <p6eval> ..5789437879384759876675…

[05:08] <diakopter> oh, %

[05:09] <diakopter> sorear: I guess the trick to transparent BigInts is to trap overflows and retry multiplications and additions after upconverting

[05:10] <sorear> diakopter: rakudo already does that

[05:10] <sorear> rakudo: say (10**8).WHAT

[05:10] <p6eval> rakudo 549d2a: OUTPUT«Int()␤»

[05:10] <sorear> rakudo: say (10**18).WHAT

[05:10] <p6eval> rakudo 549d2a: OUTPUT«Num()␤»

[05:11] <sorear> just need to change Num to BigInt

[05:11] <sorear> (except that BigInt isn't a distinct type)

[05:57] *** am0c left
[06:01] *** karupanerura left
[06:07] *** Lorn left
[06:18] *** Lorn joined
[06:18] *** Lorn left
[06:18] *** Lorn joined
[06:23] *** Mowah joined
[06:24] *** GinoMan left
[06:25] *** Zapelius left
[06:25] *** Zapelius joined
[06:29] *** molaf joined
[06:38] *** cafesofie joined
[06:40] *** Lorn left
[06:43] *** orafu left
[07:00] *** drbean left
[07:07] *** Lorn joined
[07:18] <dalek> niecza: bc5d7f7 | sorear++ | docs/nam.pod:

[07:18] <dalek> niecza: Start documenting file layout for nam

[07:18] <dalek> niecza: review: https://github.com/sorear/niecza/commit/bc5d7f7106

[07:20] *** s1n left
[07:21] * sorear out

[07:21] <sorear> I plan to spend most of the weekend working on nam.pod

[07:25] *** Lorn left
[07:26] *** Lorn joined
[07:26] <TimToady> I'm spending the entire weekend flying to Kharagpur...

[07:34] *** s1n joined
[07:35] *** kaare_ joined
[08:09] *** avuserow left
[08:09] *** avuserow joined
[08:14] *** satyavvd joined
[08:21] <moritz_> good morning

[08:31] *** dukeleto left
[08:31] *** dukeleto joined
[08:32] *** satyavvd_ joined
[08:34] *** satyavvd left
[08:34] *** satyavvd_ is now known as satyavvd

[09:12] <diakopter> o/

[09:17] <moritz_> \o

[09:23] *** mtk left
[09:24] *** icwiener joined
[09:27] *** nadim_ left
[09:30] *** Su-Shee_ is now known as Su-Shee

[09:32] *** mtk joined
[09:35] *** nadim_ joined
[09:41] *** satyavvd_ joined
[09:42] *** satyavvd left
[09:42] *** satyavvd_ is now known as satyavvd

[09:51] *** kst left
[09:52] *** kst joined
[10:13] *** masak joined
[10:13] <masak> ahoj, #perl6!

[10:16] * masak will spend most of today working on the sekkrit project

[10:16] *** am0c^ joined
[10:23] <moritz_> is p4 review a sekkrit now? :-)

[10:27] <coldhead> i think he means perl7

[10:28] *** satyavvd left
[10:30] <masak> the scaffolding for the pre-posts for p4 is a sekkrit :P

[10:30] *** cafesofie left
[10:31] <moritz_> phenny: tell mberends I hope you'll join us for lunch tomorrow (if you happen to arrive around lunch time)

[10:31] <phenny> moritz_: I'll pass that on when mberends is around.

[10:35] *** cafesofie joined
[10:41] *** kaare__ joined
[10:53] *** wallberg joined
[10:54] *** am0c^ left
[10:56] *** rbuels left
[11:01] *** rgrau joined
[11:07] *** am0c joined
[11:10] *** satyavvd joined
[11:13] *** satyavvd left
[11:30] *** coldhead left
[11:31] *** Mowah left
[11:35] <jnthn> o/ #perl6

[11:35] <masak> \o jnthn

[11:35] <jnthn> ohayo

[11:35] <jnthn> ...for liberal values of morning... :)

[11:36] <masak> :P

[11:36] * jnthn accidentally the whole morning with sleep

[11:37] <jnthn> Though I have to get up and teach every morning next week, so it was probably a good idea to get caught up. :)

[11:37] *** MayDaniel joined
[11:37] <moritz_> what are you going to teach?

[11:38] <jnthn> moritz_: ASP.NET this time...though the course pre-reqs are sufficiently low that the course also includes a chunk of what OOP is too...

[11:39] *** orafu joined
[11:39] <moritz_> fun

[11:39] <jnthn> I'll try not to leave them with a totally messed up view of OO.

[11:39] <tadzik> „because, you know, civilized people use roles, but...”

[11:39] <jnthn> "What is a class, you ask? A class is precisely what it's meta-class says it is."

[11:39] <jnthn> *its

[11:40] <jnthn> Anyway, should be a relatively easy course. :)

[11:40] *** drbean joined
[11:41] <jnthn> To teach, anyways. :)

[11:44] *** MayDaniel left
[11:44] <masak> "A class is what you're all attending. Duh."

[11:45] <jnthn> "Don't object to OO!"

[11:45] <masak> "Just role with it!"

[11:49] * moritz_ can't scope with it

[11:49] *** cxreg left
[11:49] <dalek> specs: 54a6ea1 | moritz++ | S19-commandline.pod:

[11:49] <dalek> specs: [S19] unfossile -a

[11:49] <dalek> specs: review: https://github.com/perl6/specs/commit/54a6ea1a89

[12:12] *** shi joined
[12:12] *** whiteknight joined
[12:20] <masak> rakudo: sub foo { return a => [ b => 0, c => 0, d => 0 ] }; say foo().perl

[12:20] <p6eval> rakudo 549d2a: OUTPUT«"a" => Any␤»

[12:20] <masak> ok, what am I missing here? why is it Any?

[12:21] <masak> it should at least be an empty Array or List, no?

[12:21] <tadzik> rakudo:  [ b => 0, c => 0, d => 0 ].WHAT.say

[12:21] <p6eval> rakudo 549d2a: OUTPUT«Array()␤»

[12:21] <tadzik> rakudo:  [ b => 0, c => 0, d => 0 ].perl.say

[12:21] <p6eval> rakudo 549d2a: OUTPUT«["b" => 0, "c" => 0, "d" => 0]␤»

[12:21] <masak> rakudo: sub foo { my @a = b => 0, c => 0, d => 0; return a => @a }; say foo().perl

[12:21] <p6eval> rakudo 549d2a: OUTPUT«"a" => Any␤»

[12:22] <masak> rakudo: sub foo { my $a = [ b => 0, c => 0, d => 0 ]; return a => $a }; say foo().perl

[12:22] <p6eval> rakudo 549d2a: OUTPUT«"a" => Any␤»

[12:22] <masak> rakudo: sub foo { my $a = [ b => 0, c => 0, d => 0 ]; return (a => $a) }; say foo().perl

[12:22] <p6eval> rakudo 549d2a: OUTPUT«"a" => ["b" => 0, "c" => 0, "d" => 0]␤»

[12:22] <masak> huh.

[12:23] <masak> rakudo: sub foo { return (a => [ b => 0, c => 0, d => 0 ]) }; say foo().perl

[12:23] <p6eval> rakudo 549d2a: OUTPUT«"a" => ["b" => 0, "c" => 0, "d" => 0]␤»

[12:23] <masak> "parens are only grouping", yeah right :P

[12:25] <tadzik> :D

[12:29] *** icwiener left
[12:34] *** icwiener joined
[12:42] *** leprevost left
[12:47] *** MayDaniel joined
[12:49] *** aindilis left
[12:55] *** MayDaniel left
[12:58] *** kaare__ left
[12:59] *** jferrero left
[13:07] <moritz_> ... except where they are not

[13:08] <masak> ...including the places where, for some reason, you have you use double parens... :)

[13:09] <moritz_> jnthn: how do I print the type of an object that inherits from NQPMu?

[13:10] <moritz_> .WHAT returns a RakudoObject which doesn't have a get_string vtable

[13:12] *** jferrero joined
[13:14] <moritz_> ah, $thing.HOW.name($thing)

[13:17] <jnthn> yes, that

[13:18] <jnthn> But to NQPMu you can add a multi method Str(NQPMu:U $self:) { $self.HOW.name($self) }

[13:18] <jnthn> With the appropraite proto

[13:18] <jnthn> Then .Str will work

[13:18] *** mikehh joined
[13:19] <jnthn> I think you can even copy-paste it from 6model repo: common/NQP/P6Objects.pm

[13:20] <moritz_> ok

[13:26] <moritz_> jnthn: should I also copy .isa()?

[13:27] * moritz_ just does it, impatient as he is

[13:28] *** kst left
[13:28] *** kst joined
[13:28] <jnthn> moritz_: Yes, feel free. :)

[13:29] <dalek> nqp-rx/nom: 481de03 | moritz++ | src/cheats/nqp-builtins.pir:

[13:29] <dalek> nqp-rx/nom: return 0 from failed ok()

[13:29] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/481de03afb

[13:29] <dalek> nqp-rx/nom: d26843d | moritz++ | src/stage0/ (4 files):

[13:29] <dalek> nqp-rx/nom: update bootstrap

[13:29] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/d26843d520

[13:29] <dalek> nqp-rx/nom: a82ee69 | moritz++ | src/metamodel/how/NQPMu.pm:

[13:29] <dalek> nqp-rx/nom: port .Str and .isa from 6model to NQPMu

[13:29] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/a82ee698ad

[13:38] *** lopnor joined
[13:41] *** drbean left
[13:44] <moritz_> jnthn: trouble with array attributes: http://nopaste.snit.ch/29392

[13:46] <jnthn> nqp: class A {

[13:46] <p6eval> nqp: OUTPUT«Unable to parse blockoid, couldn't find final '}' at line 1␤current instr.: 'parrot;Regex;Cursor;FAILGOAL' pc 2358 (src/Regex/Cursor.pir:232)␤»

[13:46] <jnthn> gah

[13:46] <jnthn> nqp: class A {  has @!x; method pushx($a) { pir::push(@!x, $a); say(pir::join('|', @!x)); } }; A.new.pushx('42');

[13:46] <p6eval> nqp: OUTPUT«␤»

[13:46] <moritz_> works with lexical arrays, fwiw

[13:47] <moritz_> do I need to initialize with an RPA?

[13:47] <jnthn> Hmm. So it's not a regression from nqp-rx, but hardly helpful.

[13:47] <jnthn> Yeah, that may do it. But...should really fix this too.

[13:47] <jnthn> nqpclr: exists?

[13:48] <jnthn> Aw. :)

[13:48] <jnthn> I suspect it is auto-viv fail though.

[13:49] <moritz_> yep, @!x := []; helps

[13:49] <moritz_> I can open an nqp issue for you if you want

[13:49] *** lopnor is now known as lopaway

[13:51] <jnthn> moritz_: plz

[13:53] <moritz_> done https://github.com/perl6/nqp-rx/issues/issue/12

[13:53] *** masonkramer left
[13:53] *** masonkramer joined
[13:59] *** masonkramer left
[14:08] <jnthn> moritz_: Thanks. And meh...nqpclr is bug-compatible.

[14:10] *** felliott joined
[14:10] <colomon> heh

[14:11] <colomon> rakudo: multi sub postfiz:<!>($a) { [*] 1..$a }

[14:11] <p6eval> rakudo 549d2a: OUTPUT«===SORRY!===␤Null PMC access in get_integer()␤»

[14:11] <colomon> reported?

[14:14] <tadzik> Dunno, but funny :)

[14:15] <jnthn> ...huh, what.

[14:15] <jnthn> I thought those had worked for ages.

[14:15] <jnthn> rakudo: multi sub postfiz:<!>($a) { [*] 1..$a }; say 10!

[14:15] <tadzik> postfizes? :)

[14:15] <p6eval> rakudo 549d2a: OUTPUT«===SORRY!===␤Null PMC access in get_integer()␤»

[14:16] <jnthn> ohh.

[14:16] <jnthn> :P

[14:16] <jnthn> Well, you should at least spell right. :P

[14:16] <tadzik> :D

[14:16] <jnthn> rakudo: multi sub postfix:<!>($a) { [*] 1..$a }; say 10!

[14:16] <p6eval> rakudo 549d2a: OUTPUT«3628800␤»

[14:16] <jnthn> phew :)

[14:16] <tadzik> Perl 6 – you should at least spell right :)

[14:16] <jnthn> Anyway, LTA error, if it even should be one. :)

[14:20] *** xinming_ joined
[14:21] <colomon> a thought a Null PMC was always considered report worthy.  :)

[14:21] <colomon> afk # noms

[14:22] *** xinming left
[14:28] *** araujo left
[14:28] *** JimmyZ joined
[14:42] <colomon> reported

[14:44] <moritz_> rakudo: my %h; say pir::exists(%h, 'a')

[14:44] <p6eval> rakudo 549d2a: OUTPUT«exists_keyed() not implemented in class ''␤  in main program body at line 2:/tmp/VtixLfcJIR␤»

[14:46] *** am0c left
[14:48] <moritz_> rakudo: .say for pir::split(',', 'a,b,c')

[14:49] <p6eval> rakudo 549d2a: OUTPUT«Method 'say' not found for invocant of class 'ResizableStringArray'␤  in <anon> at line 22:/tmp/dCwSOqEGkS␤  in main program body at line 1␤»

[14:49] <moritz_> rakudo: say(pir::split(',', 'a,b,c'))

[14:49] <p6eval> rakudo 549d2a: OUTPUT«[ "a", "b", "c" ]␤»

[14:51] *** kst left
[14:51] *** kst joined
[14:54] *** Axius joined
[14:54] <moritz_> nqp: sub f($x) { sub g() { say($x) }; g() }; f(3)

[14:54] <p6eval> nqp: OUTPUT«3␤»

[14:55] *** cjk101010 joined
[15:01] *** MayDaniel joined
[15:05] *** cafesofie left
[15:07] *** am0c joined
[15:12] *** whiteknight left
[15:15] *** cjk101010 left
[15:28] *** Patterner left
[15:28] <sorear> good * #perl6

[15:30] *** Psyche^ joined
[15:30] *** Psyche^ is now known as Patterner

[15:31] *** mberends joined
[15:32] <mberends> good * sorear

[15:32] <phenny> mberends: 10:31Z <moritz_> tell mberends I hope you'll join us for lunch tomorrow (if you happen to arrive around lunch time)

[15:34] <mberends> phenny, tell moritz_ yes please, that fits in the itinerary very nicely :-)

[15:34] <phenny> mberends: I'll pass that on when moritz_ is around.

[15:34] <moritz_> \o/

[15:34] <phenny> moritz_: 15:34Z <mberends> tell moritz_ yes please, that fits in the itinerary very nicely :-)

[15:35] *** pmurias joined
[15:36] <mberends> busy packing the car now (packing usually gets refactored several times to optimize for space)

[15:37] * moritz_ hacks on his nqp-rx/nom based command line parser

[15:37] <jnthn> Oh, *that's* what you're hacking on. :)

[15:38] <mikehh> rakudo (549d2a9) - builds on parrot (3_0_0-313-g4970e66)- make test, make spectest_smolder[(#6108), roast (510d9d2)] PASS - Kubuntu 10.10 amd64 (g++-4.5 with --optimize)

[15:38] <mikehh> 27,599 ok, 0 failed, 611 todo, 1,837 skipped and 0 unexpectedly succeeded 

[15:42] <moritz_> jnthn: so far it handles (optionally grouped) single character options, and single char optioins with arguments

[15:48] *** mtk left
[15:51] <masak> moritz_++

[15:52] <masak> moritz_: I see you're in S19 a bit too. if you want to brainstorm improvements to S19, I'll be happy to assist.

[15:52] * masak thinks S19 is piecewise too ambitious

[15:52] * moritz_ thinks so too

[15:52] <JimmyZ> Does anyone know parrot's new_callback op? 

[15:53] <jnthn> Not personally.

[15:53] <JimmyZ> sorry, wrong

[15:53] <masak> specifically, the parts that (1) try to move away from Unix tradition, and (2) impose a tree structure on the command-line arguments.

[15:55] <sorear> masak: I wrote a clone of getopt_long(3) a couple weeks ago in Perl 6

[15:55] <sorear> I agree with you about S19 btw

[15:55] <sorear> (which is part of why I did it)

[15:56] <sorear> s/masak/moritz/

[15:57] <sorear> moritz_: you might find something stealable in niecza:src/niecza lines 463-600

[15:57] <pmurias> sorear: hi

[15:58] <masak> sorear++

[16:02] * masak makes a 'o.O' after checking up in 'perldoc perlrun' what S19:180 really means

[16:03] <sorear> masak: http://smuggle.intercal.org.uk/manual/lectures.html # re. "A class is what you're in, duh"

[16:04] <masak> ooh, INTERCAL humor! :D

[16:11] *** cjk101010 joined
[16:11] <masak> "If you try that, you get a CLASS WAR error." -- hihi

[16:14] <masak> having read that, I must say that they've managed to make OO "blend in" very well with the rest of the features of INTERCAL. kudos.

[16:24] *** Axius left
[16:37] <moritz_> sorear: thanks for the pointer

[16:40] *** rbuels joined
[17:01] *** zby_home joined
[17:01] *** Zapelius left
[17:04] *** cotto left
[17:05] *** shi left
[17:18] *** MayDaniel left
[17:31] *** envi left
[17:38] *** GinoMan joined
[17:43] *** ponbiki left
[17:43] *** ponbiki joined
[17:59] *** mikehh left
[18:11] *** mikehh joined
[18:11] *** kst left
[18:12] *** kst joined
[18:29] *** MayDaniel joined
[18:34] *** lopaway is now known as lopnor

[18:47] *** MayDaniel left
[18:50] *** cafesofie joined
[18:54] *** JimmyZ left
[18:55] *** kst left
[18:56] *** kst joined
[19:04] <moritz_> sorear: I suspect I'm suffering from NIH syndrome though :-)

[19:10] <lue> hello zebras! o/

[19:10] <moritz_> \o lue

[19:12] *** nadim_ left
[19:13] *** exodist left
[19:22] *** icwiener left
[19:29] <lue> [reading through S19] was rakudo by chance once installed as  rakudo  by default? [Instead of  perl6  ]

[19:29] <moritz_> I don't think so

[19:29] *** cafesofie left
[19:30] <tadzik> someone was complaining recently, that „if there's supposed to be multiple implementations, why is Rakudo «perl6» rather than «rakudo»?”

[19:30] * moritz_ agrees it should be 'rakudo'

[19:31] *** Mowah joined
[19:33] <moritz_> phenny: tell jnthn that I get a nasty "P6opaque attributes NYFI" error when I uncomment the hilighted line (165) in https://github.com/moritz/nqp-cl-parser/blob/6832591a1597ecd34c250257f8ae51fd31a3b9de/do.pl#L165 in what seems like a simple scalar attribute access - any idea what's wrong?

[19:33] <phenny> moritz_: I'll pass that on when jnthn is around.

[19:33] *** nadim_ joined
[19:36] <lue> what are the -P and -u options in P5? They are listed under "Removed Syntactic Features", and the explanation of "Obsolete. Removed" for these two is very helpful :/

[19:38] * lue realizes he could just    perl -h    and does so.

[19:38] <tadzik> `perldoc perlrun`

[19:38] *** kaare_ left
[19:38] *** kaare_ joined
[19:39] <lue> I'm not a big fan of assuming all P6'ers know P5. I'll be sure to better those two explanations in a bit.

[19:47] *** mikehh left
[19:53] *** shi joined
[19:57] <dalek> mu: ee0b736 | moritz++ | misc/dalek-conf.json:

[19:57] <dalek> mu: make dalek watch my command line parser

[19:57] <dalek> mu: review: https://github.com/perl6/mu/commit/ee0b73605f

[19:58] <moritz_> lue: if somebody doesn't know perl 5, there's no loss of knowledge when he ignores the sentence you mentioned

[20:01] * diakopter tries to piece togther the negatives

[20:01] <dalek> specs: 15040dd | lue++ | S19-commandline.pod:

[20:01] <dalek> specs: [S19] (Hopefully) clarified purpose of obsolete -P and -u options

[20:01] <dalek> specs: review: https://github.com/perl6/specs/commit/15040dde35

[20:02] <diakopter> lue++ # thanks; that's helpful

[20:02] <lue> I, however, get annoyed that one wouldn't at least describe the function of it, much less why it was removed.

[20:03] *** cafesofie joined
[20:04] <lue> afk

[20:14] *** kst left
[20:14] *** kst joined
[20:15] <tadzik> oh, there's no Numbers::Ordinal in neutro

[20:24] *** shi left
[20:25] *** am0c left
[20:26] *** coldhead joined
[20:27] *** cxreg joined
[20:29] *** kjeldahl joined
[20:38] *** cotto joined
[20:39] *** molaf left
[20:42] *** MayDaniel joined
[20:53] *** ggoebel left
[20:58] *** ggoebel joined
[21:09] *** DpinkyandDbrain joined
[21:09] *** DpinkyandDbrain left
[21:19] <pmurias> masak: what do you mean by S19 being to ambitious?

[21:21] *** Layla_91 joined
[21:28] <pmurias> masak: i found the ++subpart ++/subpart very helpfull in mildew

[21:32] *** lopnor is now known as lopaway

[21:38] *** kst left
[21:41] *** MayDaniel left
[21:42] *** orafu left
[21:58] *** Layla_91 left
[21:59] *** cafesofie left
[22:04] *** MayDaniel joined
[22:05] <sorear> pmurias: What categories of ops would you most like to see documented before Monday?

[22:06] *** kst joined
[22:07] <dukeleto> there is a Parrot Developer Summit happening now in #parrotsketch on irc.perl.org, if anybody is interested

[22:08] <sorear> if I can join, anyone can!

[22:11] *** cafesofie joined
[22:19] *** MayDaniel left
[22:22] *** justatheory joined
[22:25] <[particle]> moritz_++ # S19 patches

[22:29] <perigrin> rakudo.org is having issues?

[22:30] <coldhead> it seems it is ever thus

[22:31] *** VXZ joined
[22:33] <pmurias> sorear: the ones with the strange names

[22:33] <pmurias> sorear: an have the structure of the output documented

[22:34] * pmurias looks in more detail at the ops

[22:34] <sorear> the structure of the output is now documented in broad details

[22:35] *** Vlavv left
[22:35] *** justatheory left
[22:35] <sorear> I don't have all the fiddly bits of signatures, roles, stashes down yet

[22:35] *** justatheory joined
[22:37] <pmurias> how do the Internal to the backend ops appear?

[22:37] <pmurias> what do some ops have a bif prefix?

[22:38] <sorear> see CLRBackend.cs line 3408, for instance

[22:38] <sorear> the internal ops are used because in a few cases, the backend needs to generate optrees to do stuff

[22:39] <sorear> they're smelly and I'd love to kill them

[22:39] <sorear> --

[22:39] <sorear> bif = built in function.  bif_xxx ops take 0 or more 'var' values, return a 'var', and generally correspond to CORE::something

[22:45] <pmurias> re op categories "Sequence control operations","Operations on variables","Operations on low-level lists"

[22:47] <pmurias> "Annotations" and "Object model operations" seem even more handier

[22:47] <pmurias> s/handier/more usefull/

[22:47] *** Vlavv joined
[22:59] *** kaare_ left
[23:15] *** kst left
[23:22] <pmurias> sorear: doc/nam.pod so far seems very usefull

[23:23] *** xinming joined
[23:25] *** kjeldahl left
[23:27] *** xinming_ left
[23:28] *** kst joined
[23:31] *** lopaway is now known as lopnor

[23:34] *** lopnor is now known as lopaway

[23:38] *** Mowah left
[23:41] <masak> pmurias: interesting to hear about you having had use of ++subpart ++/subpart in mildew. my followup question would be: do you consider the gain of being able to do ++subpart X Y Z ++/subpart to be bigger than the hassle of doing --subpart-X --subpart-Y --subpart-Z?

[23:41] *** bemjb joined
[23:42] <masak> to me, the latter seems like more to write, but that's a relatively small cost compared to implementing (and thinking about) nested comman-line options.

[23:42] <sorear> I beleive that to write a Unix program without using getopt_long or a 100% compatible function is highly antisocial

[23:42] *** bacek left
[23:43] <sorear> as a shell programmer, I think of command line engines as like character encodings

[23:43] <sorear> they're essential, but I'd prefer to not think about them, and that only works if they are homogenous

[23:44] <sorear> Xt is bad enough, I don't need another incompatible command toolkit

[23:46] <masak> sorear: I'm at least partway with you there.

[23:46] <bemjb> rakudo.org seems down. Is there another place that I can get rakudo from?

[23:46] <coldhead> github, bemjb 

[23:46] <coldhead> ask google

[23:47] <masak> sorear: I see Perl 6 as "breaking the traditions of Unix that need breaking", so some things will seem daring and iconoclastic before their time has come. when I look at S19, though, I don't see it as something whose time will come.

[23:47] <bemjb> thanks... I was only finding links to rakudo.org, but obviously I didn't look hard enough.

[23:47] <masak> I can definitely see it with S05 or even S09. not so with S19.

[23:47] <sorear> What's iconoclastic about S09?

[23:48] <masak> it gives arrays a hash interface and vice versa, for one thing.

[23:48] <masak> that's more breaking a Perl tradition than a Unix one.

[23:49] <tadzik> bemjb: http://github.com/rakudo/rakudo

[23:50] <bemjb> tadzik: thanks, I found it. :-)

[23:52] <sorear> drama in #parrotsketch.

[23:53] <tadzik> yeah

