[00:03] *** zloyrusskiy left
[00:06] <TimToady> um, none?

[00:07] <TimToady> I think the & is optional only to allow declaration of &*foo, which would be a dynamic name

[00:08] <soh_cah_toa> ah, ok. i wasn't sure if the meaning of & changed in p6

[00:14] <TimToady> well, it certainly changed from what it means in p5.  & can invoke in p5, but in p6 & only ever turns a verb name into a noun, like -ing in 'walking'

[00:15] <TimToady> or more like the infinitival 'to', since it's in front

[00:15] <TimToady> shades of Logo...

[00:15] <soh_cah_toa> ah, interesting

[00:32] *** thundergnat left
[01:01] *** noganex joined
[01:02] *** jaldhar left
[01:02] *** jaldhar joined
[01:04] *** noganex_ left
[01:05] *** jevin left
[01:08] *** jevin joined
[01:17] *** jaldhar left
[01:23] *** jevin left
[01:26] *** jevin joined
[01:31] *** colomon joined
[01:31] <colomon> new regex engine!  \o/

[01:40] *** im2ee left
[01:46] <colomon> errr.... why are all (or many of?) the nom parameters passed as \$a?

[01:47] *** mberends left
[01:53] <colomon> nom: say 0.WHAT

[01:53] <p6eval> nom: OUTPUT«Int()␤»

[01:53] <colomon> nom: say (0/1).WHAT

[01:53] <p6eval> nom: OUTPUT«Rat()␤»

[01:55] *** jevin left
[01:55] <colomon> nom: given "10" { say $_.WHAT }

[01:55] <p6eval> nom: OUTPUT«Str()␤»

[01:55] <[Coke]> nom: say +"4/2".WHAT

[01:55] <p6eval> nom: OUTPUT«Segmentation fault␤»

[01:55] <[Coke]> hee!

[01:55] <colomon> ugh

[01:55] <[Coke]> pmichaud: nom: say +"4/2".WHAT

[01:55] <[Coke]> msg pmichaud nom: say +"4/2".WHAT

[01:56] <[Coke]> ...

[01:56] <colomon> nom: say "4/2".WHAT

[01:56] *** jevin joined
[01:56] <p6eval> nom: OUTPUT«Str()␤»

[01:56] <[Coke]> phenny, tell pmichaud nom: say +"4/2".WHAT

[01:56] <phenny> [Coke]: I'll pass that on when pmichaud is around.

[01:56] <[Coke]> nom: say +"2/4"

[01:56] <p6eval> nom: OUTPUT«0.5␤»

[01:56] <colomon> hey, come on, that one's easy!

[01:56] <[Coke]> nom: say +"4/2"

[01:56] <p6eval> nom: OUTPUT«2␤»

[01:56] <colomon> it's +(.WHAT) that's killing it

[01:57] <colomon> nom: my $a = "4/2".WHAT; say $a; say +$a

[01:57] <p6eval> nom: OUTPUT«Str()␤Segmentation fault␤»

[01:57] *** simcop2387 left
[01:57] <[Coke]> nom: say +"Str()"

[01:57] <p6eval> nom: OUTPUT«0␤»

[01:57] *** simcop2387 joined
[01:57] *** simcop2387 left
[01:57] *** simcop2387 joined
[01:58] <colomon> oooo, so it's not a string, eh?

[01:58] <colomon> nom: my $a = "4/2".WHAT; say $a; say $a.WHAT

[01:58] <p6eval> nom: OUTPUT«Str()␤Str()␤»

[01:58] <colomon> or not.

[01:59] <[Coke]> must be a funkystr!

[01:59] <colomon> yeah

[02:00] <colomon> thought since I had a second of peace and quiet and my $work is stalled waiting from e-mail from France, I'd look at abs.t.

[02:01] <colomon> I patched nom so abs.t didn't crash any more, but I'm getting really weird results from the test

[02:01] <colomon> in particular, the line ok(abs($_) ~~ $_.WHAT, "got the right data type (" ~ $_.WHAT ~ ") of absolute value for $_");

[02:02] <colomon> seems to be triggering "Use of uninitialized value in string context" even when $_ is very clearly defined.

[02:02] <[Coke]> "no it isn't"

[02:03] <[Coke]> . o O (You came here for an argument!)

[02:03] <TimToady> nom: my $a = (+"4/2").PARROT

[02:03] <p6eval> nom: OUTPUT«Method 'PARROT' not found for invocant of class 'Rat'␤current instr.: '_block1002' pc 89 ((file unknown):63434093) (/tmp/Vv8X_BzGF1:1)␤»

[02:03] <TimToady> nom: my $a = +"4/2".WHAT.PARROT

[02:03] <p6eval> nom: OUTPUT«Method 'PARROT' not found for invocant of class 'Str'␤current instr.: '_block1002' pc 81 ((file unknown):39361052) (/tmp/Zkxj4gcwE7:1)␤»

[02:04] <TimToady> nom: say "4/2".WHAT.WHAT

[02:04] <p6eval> nom: OUTPUT«Str()␤»

[02:04] <[Coke]> nom: say +"4/2".PARROT

[02:04] <p6eval> nom: OUTPUT«Method 'PARROT' not found for invocant of class 'Str'␤current instr.: '_block1002' pc 75 ((file unknown):64971608) (/tmp/s4eWrXkmJm:1)␤»

[02:04] <[Coke]> yay mysteries.

[02:04] <TimToady> nom: say "4/2".WHAT.Numeric

[02:04] <p6eval> nom: OUTPUT«Segmentation fault␤»

[02:05] <TimToady> nom: say Str.Numeric

[02:05] <p6eval> nom: OUTPUT«Segmentation fault␤»

[02:05] <TimToady> there you go

[02:06] <TimToady> nom: say Mu.Numeric

[02:06] <p6eval> nom: OUTPUT«Use of uninitialized value in numeric context␤0␤»

[02:06] <TimToady> nom: say Any.Numeric

[02:06] <p6eval> nom: OUTPUT«Use of uninitialized value in numeric context␤0␤»

[02:06] <TimToady> nom: say Cool.Numeric

[02:06] <p6eval> nom: OUTPUT«Use of uninitialized value in numeric context␤0␤»

[02:07] <colomon> Str.Numeric appears to be a bunch of special case code

[02:07] <TimToady> obviously it's the actual attempt to convert something that it thinks it ought to

[02:07] <colomon> errr... special case code isn't really the right term.

[02:07] <TimToady> probably just missing a :D

[02:07] <colomon> but it's a specific routine.

[02:09] <colomon> nom: say 243245324245823904890328490328490283490820934]

[02:09] <p6eval> nom: OUTPUT«bigint_get_long: number too big␤current instr.: 'nqp;Perl6;SymbolTable;add_constant' pc 14716 (src/gen/perl6-symboltable.pir:5024) (src/Perl6/SymbolTable.pm:790)␤»

[02:09] <colomon> nom: say 243245324245823904890328490328490283490820934

[02:09] <p6eval> nom: OUTPUT«bigint_get_long: number too big␤current instr.: 'nqp;Perl6;SymbolTable;add_constant' pc 14716 (src/gen/perl6-symboltable.pir:5024) (src/Perl6/SymbolTable.pm:790)␤»

[02:09] <colomon> ah

[02:10] <colomon> yeah, Str.Numeric doesn't handle the "Not actually a number" case at all.

[02:10] <colomon> no, wait, it's trying to...

[02:10] <TimToady> nom: say Str.Cool

[02:10] <p6eval> nom: OUTPUT«Method 'Cool' not found for invocant of class 'Str'␤current instr.: '_block1002' pc 75 ((file unknown):63566680) (/tmp/dxGy1CYLpf:1)␤»

[02:11] *** jaldhar joined
[02:15] <colomon> nom: say nqp::radix(10, "Str", 0, 0)

[02:15] <p6eval> nom: OUTPUT«Method 'gist' not found for invocant of class 'FixedFloatArray'␤current instr.: 'say' pc 441726 (src/gen/CORE.setting.pir:112716) (src/gen/CORE.setting:3458)␤»

[02:15] <colomon> :\

[02:16] <colomon> nom: say nqp::radix(10, nqp::unbox_s("Str"), 0, 0)

[02:16] <p6eval> nom: OUTPUT«Method 'gist' not found for invocant of class 'FixedFloatArray'␤current instr.: 'say' pc 441726 (src/gen/CORE.setting.pir:112716) (src/gen/CORE.setting:3458)␤»

[02:17] <colomon> bah.  need to go to bed.

[02:17] <colomon> o/

[02:17] <TimToady> o/

[02:23] *** pmichaud left
[02:23] *** pmichaud joined
[02:23] <colomon> though one last question (for those present and backloggers in the morning): there are operator, sub, and method forms of abs.  Which one should be the basis for the implementation of the other two?  

[02:23] *** ciphertext left
[02:23] *** jaldhar left
[02:24] *** silug_ left
[02:25] *** xinming left
[02:26] *** ciphertext joined
[02:26] *** silug_ joined
[02:32] *** xinming joined
[02:45] *** felliott joined
[02:45] *** leprevost joined
[02:46] <TimToady> operators and subs can be inlined, and single dispatch is really kinda what you want for a unary anyway.

[02:46] <TimToady> that being said, however, abs() means something particular in Perl the Language

[02:47] <TimToady> and if you call $x.abs it could instead be what Some Other Language wants it to mean

[02:47] <TimToady> not likely a problem for abs, but other operators have strange overloadings in other languages

[02:49] <TimToady> if our infix:<+>($a,$b) delegates to $a.'+'($b) you're likely to get concatenation instead of addition

[02:53] <TimToady> so probably the abs(Numeric) can delegate to the method, but abs(Cool) should still enforce numericity

[03:01] *** Chillance left
[03:07] <TiMBuS> colomon, looks like everything in nom is a bit unsafe

[03:07] <TiMBuS> nom: say Str.chop

[03:07] <p6eval> nom: OUTPUT«Segmentation fault␤»

[03:08] <TiMBuS> nom: say Str.pred

[03:08] <p6eval> nom: OUTPUT«Use of uninitialized value in string context␤Decrement out of range␤current instr.: 'rethrow' pc 505413 (src/gen/CORE.setting.pir:141862) (src/gen/CORE.setting:3974)␤»

[03:08] <TiMBuS> oh

[03:08] <TiMBuS> nqp::unbox_s(self) seems to be the issue then. um

[03:08] *** molaf joined
[03:09] <TiMBuS> return 0 if nqp::isnull(self); ?

[03:09] <TiMBuS> unless self isnt null in this case? i wouldnt know

[03:17] <TiMBuS> so um. i guess i should find out what :D does huh

[03:17] <TiMBuS> > Str.Numeric

[03:17] <TiMBuS> Parameter '(null)' requires an instance, but a type object was passed

[03:18] <TiMBuS> that fixes it but i dont even know what i did

[03:18] <TimToady> it's just an extra constraint on the type that requires it to be defined

[03:20] <TiMBuS> well that makes perfect sense

[03:21] <TiMBuS> and i was so sure it meant 'make this function happy'

[03:21] <TimToady> that too

[03:22] <TiMBuS> so is erroring like that the Right thing to do, or should it actually be checking for self being defined and returning 0

[03:23] <TimToady> beats me, you should as a language designer

[03:23] <TimToady> *ask

[03:23] *** Su-Shee_ joined
[03:24] <TiMBuS> heh

[03:26] *** woosley joined
[03:27] *** Su-Shee left
[04:05] <TimToady> http://rosettacode.org/wiki/Singly-linked_list/Traversal#Perl_6  <-- cute use of => to do Lisp cons cells

[04:14] *** ciphertext left
[04:20] *** HarryS left
[04:20] *** HarryS joined
[04:24] *** felliott left
[04:30] *** kaare__ joined
[04:46] <TimToady> also, demo of [=>] to turn a Perl list into a Lispish list

[04:54] <thou> rakudo: my $s = 'foobar'; if $s ~~ s/ ^ xyz // {  say $s.perl }   # Anyone know a nice workaround for this?

[04:54] <p6eval> rakudo 1ddda5: OUTPUT«"foobar"␤»

[04:54] <thou> i *assume* that ~~ should return False there

[04:55] <thou> i can do a match, and if it succeeds then do the subst, but maybe there's something a little nicer

[04:57] *** donri left
[04:59] *** ciphertext joined
[05:00] *** soh_cah_toa left
[05:12] *** whumbl joined
[05:19] *** whumbl left
[05:26] *** jaldhar joined
[06:06] *** zby_home_ joined
[06:13] *** [Sec] left
[06:17] <moritz> there is - a batch for rakudo :-)

[06:20] <dalek> rakudo/nom: e707e6e | moritz++ | src/Perl6/SymbolTable.pm:

[06:20] <dalek> rakudo/nom: fix typo in comment

[06:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e707e6ed01

[06:31] *** [Sec] joined
[06:40] *** woosley left
[06:41] *** simcop2387 left
[06:43] <thou> \o/ just served complete November main page incl. css and images from Plackdo

[06:44] <moritz> \o/ indeed

[06:44] <thou> lopnor++ plackdo++

[06:44] *** ciphertext left
[06:44] *** simcop2387 joined
[06:46] *** ciphertext joined
[06:46] <moritz> nqp: pir::getstderr__PP().print("foo\n")

[06:46] <p6eval> nqp: OUTPUT«foo␤»

[06:46] <thou> it took a *long* time to serve header.png :-)

[06:47] <thou> (3m 26s)

[06:47] <moritz> then I hope you have a caching header for it :-)

[06:47] <moritz> Buf handling is *very* inefficient in master

[06:48] <thou> http://postimage.org/image/2qasabphg/0630df2f/

[06:49] <thou> that's not precompiled code, though

[06:50] *** woosley joined
[06:50] *** woosley left
[06:52] <thou> amazingly enough, Plackdo includes an expires header

[06:52] *** woosley joined
[06:56] *** woosley left
[07:00] *** donri joined
[07:02] *** wamba joined
[07:02] <moritz> nom: rx/./

[07:02] <p6eval> nom: OUTPUT«Null PMC access in clone()␤current instr.: 'nqp;QRegex;P6Regex;Grammar;nibbler' pc 34391 (src/stage2/QRegex.pir:11337) (src/stage2/QRegex.nqp:771)␤»

[07:02] *** Tene left
[07:02] *** Tene joined
[07:02] *** Tene left
[07:02] *** Tene joined
[07:02] <moritz> nom: $_ = "foo"; say /./

[07:02] <p6eval> nom: OUTPUT«_block1010␤»

[07:02] <moritz> nom: $_ = "foo"; say (/./).()

[07:02] <p6eval> nom: OUTPUT«Not enough positional parameters passed; got 0 but expected 1␤current instr.: '_block1010' pc 369 ((file unknown):59126769) (/tmp/OnPjjvB14S:1)␤»

[07:02] <moritz> nom: $_ = "foo"; say (/./).($_)

[07:03] <p6eval> nom: OUTPUT«Method '!cursor_start' not found for invocant of class 'Str'␤current instr.: '_block1010' pc 390 ((file unknown):2) (/tmp/1qxXLkI4oG:1)␤»

[07:03] <moritz> nom: $_ = "foo"; say (/./).(Cursor.new, $_)

[07:03] <p6eval> nom: OUTPUT«Too many positional parameters passed; got 2 but expected 1␤current instr.: '_block1010' pc 390 ((file unknown):149) (/tmp/WfY0aNxnMp:1)␤»

[07:03] * moritz can't figure out how regex are invoked at the low level

[07:03] <moritz> nom: say Regex.^methods

[07:04] <p6eval> nom: OUTPUT«Method 'gist' not found for invocant of class 'Sub'␤current instr.: 'gist' pc 478754 (src/gen/CORE.setting.pir:130216) (src/gen/CORE.setting:2216)␤»

[07:04] <moritz> nom: say Regex.^methods.map: { nqp::p6box_s($_) }

[07:04] <p6eval> nom: OUTPUT«Segmentation fault␤»

[07:04] <moritz> nom: say Regex.^methods.map: { nqp::p6box_s(pir::perl6_decontainerize__PP($_)) }

[07:04] <p6eval> nom: OUTPUT«Segmentation fault␤»

[07:05] <moritz> nom: say Regex.^mro

[07:05] <p6eval> nom: OUTPUT«Regex() Method() Routine() Block() Code() Any() Mu()␤»

[07:06] *** [particle] left
[07:08] *** [particle] joined
[07:10] <colomon> nom: say abs -10

[07:10] <p6eval> nom: OUTPUT«10␤»

[07:10] <colomon> nom: say abs(-10)

[07:10] <p6eval> nom: OUTPUT«10␤»

[07:28] *** im2ee joined
[07:30] <TimToady> http://rosettacode.org/wiki/Boxing_the_compass#Perl_6

[07:32] *** jjore left
[07:33] *** jjore joined
[07:34] <moritz> it's fun to actually write running Perl 6 code :-)

[07:35] <TimToady> ain't it though

[07:35] <colomon> nom: use Test; given -10 { ok(abs($_) ~~ $_.WHAT, "got the right data type (" ~ $_.WHAT ~ ") of absolute value for $_"); }

[07:35] <p6eval> nom: OUTPUT«Use of uninitialized value in string context␤ok 1 - got the right data type () of absolute value for -10␤»

[07:36] <colomon> nom: use Test; given -10 { say $_.WHAT; ok(abs($_) ~~ $_.WHAT, "got the right data type (" ~ $_.WHAT ~ ") of absolute value for $_"); }

[07:36] <p6eval> nom: OUTPUT«Int()␤Use of uninitialized value in string context␤ok 1 - got the right data type () of absolute value for -10␤»

[07:36] <moritz> use .WHAT.gist or .WHAT.perl

[07:36] <moritz> type objects now stringify to ''

[07:36] <colomon> ooooo

[07:37] <moritz> and say() uses .gist on its arguments

[07:37] <moritz> to get a more human-readable output

[07:37] <colomon> nom: use Test; given -10 { say $_.WHAT; ok(abs($_) ~~ $_.WHAT, "got the right data type (" ~ $_.WHAT.gist ~ ") of absolute value for $_"); }

[07:37] <p6eval> nom: OUTPUT«Int()␤ok 1 - got the right data type (Int()) of absolute value for -10␤»

[07:37] <colomon> :\

[07:38] <colomon> that's not at all what I got when I just tried that locally.

[07:38] <moritz> how old/new is your nom?

[07:39] <colomon> last commit is 6c8b8d1f35992bf6fbab99459ac1cf3b119c61f8, July 15 20:59:42 by you

[07:40] <colomon> nom: use Test; given -10 { say $_.WHAT; ok((2/3) ~~ $_.WHAT, "got the right data type (" ~ $_.WHAT.gist ~ ") of absolute value for $_"); }

[07:40] <p6eval> nom: OUTPUT«Int()␤ok 1 - got the right data type (Int()) of absolute value for -10␤»

[07:40] <moritz> that's new enough

[07:40] *** jjore left
[07:40] <colomon> the test isn't actually working either place....

[07:40] <moritz> rakudo: say  (2/3).WHAT

[07:41] <p6eval> rakudo 1ddda5: OUTPUT«Rat()␤»

[07:41] <moritz> nom: say  (2/3).WHAT

[07:41] <p6eval> nom: OUTPUT«Rat()␤»

[07:41] <moritz> nom: say  abs(2/3).WHAT

[07:41] <p6eval> nom: OUTPUT«maximum recursion depth exceeded␤current instr.: 'Numeric' pc 466376 (src/gen/CORE.setting.pir:124246) (src/gen/CORE.setting:1093)␤»

[07:41] <moritz> nom: say  (abs(2/3)) .WHAT

[07:41] <p6eval> nom: OUTPUT«Confused at line 1, near "say  (abs("␤current instr.: 'nqp;HLL;Grammar;panic' pc 23533 (src/stage2/gen/NQPHLL.pir:6314) (src/stage2/gen/NQPHLL.pm:328)␤»

[07:41] <moritz> nom: say  (abs -2/3) .WHAT

[07:41] <p6eval> nom: OUTPUT«Confused at line 1, near "say  (abs "␤current instr.: 'nqp;HLL;Grammar;panic' pc 23533 (src/stage2/gen/NQPHLL.pir:6314) (src/stage2/gen/NQPHLL.pm:328)␤»

[07:41] <moritz> nom: say  (abs -2/3).WHAT

[07:41] <p6eval> nom: OUTPUT«maximum recursion depth exceeded␤current instr.: 'Numeric' pc 466376 (src/gen/CORE.setting.pir:124246) (src/gen/CORE.setting:1093)␤»

[07:42] <moritz> nom: say  (abs (-2/3)).WHAT

[07:42] <p6eval> nom: OUTPUT«maximum recursion depth exceeded␤current instr.: 'Numeric' pc 466376 (src/gen/CORE.setting.pir:124246) (src/gen/CORE.setting:1093)␤»

[07:44] <moritz> nom: say (-2/3).abs.WHAT

[07:44] <p6eval> nom: OUTPUT«Num()␤»

[07:44] <moritz> colomon: do you want to fix it, or should I?

[07:45] <colomon> I' ve got that fixed locally already

[07:45] *** im2ee left
[07:45] <colomon> was just trying to clean up the weirdness in the test file before I pushed

[07:45] <moritz> even better :-)

[07:45] <colomon> (well, committed even, but that's just laziness.)

[07:45] *** im2ee joined
[07:46] <colomon> anyway, point is I don't think the abs($_) ~~ $_.WHAT test is working correctly in nom

[07:46] <colomon> I'd love a better way to phrase it.

[07:46] *** jjore joined
[07:46] <moritz> nom: say abs(2)

[07:46] <p6eval> nom: OUTPUT«2␤»

[07:47] <moritz> (abs $_).WHAT === $_.WHAT

[07:47] <moritz> is (abs $_).gist, $_.WHAT.gist

[07:47] <moritz> that way you also get diagnostics

[07:50] *** jjore left
[07:54] <colomon> well, now completely mystified by the results I'm getting here.

[07:54] *** ciphertext left
[07:55] <colomon> when I added the .gist I started getting a crash.  removing it has not made the crash go away

[07:55] <colomon> oh!

[07:55] <colomon> typo

[07:58] *** Raynes_ joined
[08:00] <colomon> moritz: https://gist.github.com/1086118 is my current version of the test

[08:01] <colomon> you should be able to run it for the 0 case without my patches to nom

[08:01] *** mtk left
[08:01] *** Raynes left
[08:01] *** JodaZ_ left
[08:01] *** im2ee left
[08:01] *** JodaZ joined
[08:01] *** molaf left
[08:01] *** Raynes_ is now known as Raynes

[08:01] *** Raynes left
[08:01] *** Raynes joined
[08:01] <colomon> and perhaps you can puzzle out why lines 5 and 6 each generate two Use of uninitialized value in string context

[08:01] <colomon>  messages.

[08:01] <colomon> I need to go back to bed.  ;)

[08:02] *** im2ee joined
[08:08] *** ciphertext joined
[08:09] *** Jackneill joined
[08:11] *** Mowah joined
[08:14] <moritz> colomon: well, .WHAT stringifies to ''

[08:15] <moritz> colomon: so for is(), you need .WHAT.gist

[08:15] <colomon> moritz++

[08:19] <dalek> roast: 9e1a6c4 | (Solomon Foster)++ | S32-num/abs.t:

[08:19] <dalek> roast: Clean up tests (moritz++) and todo one.

[08:19] <dalek> roast: review: https://github.com/perl6/roast/commit/9e1a6c4bad

[08:23] *** simcop2387 left
[08:25] *** cognominal_ joined
[08:27] *** jjore joined
[08:27] *** cognominal left
[08:28] *** simcop2387 joined
[08:31] *** jjore left
[08:31] *** jjore_ joined
[08:34] *** Instil left
[08:41] *** cognominal_ left
[08:41] *** cognominal_ joined
[08:42] *** araujo left
[08:44] *** jjore_ left
[08:46] *** Instil joined
[08:47] *** ciphertext left
[08:51] *** Jackneill left
[08:58] *** drbean left
[09:00] *** Su-Shee_ is now known as Su-Shee

[09:05] *** jjore joined
[09:07] *** xinming left
[09:08] *** xinming joined
[09:11] *** zby_home___ joined
[09:11] *** zby_home_ left
[09:12] *** Kivutarrr joined
[09:15] *** zloyrusskiy joined
[09:35] *** whiteknight joined
[09:48] *** cognominal_ left
[09:55] *** thou left
[09:57] *** zby_home___ left
[10:04] <jlaire> perl6: use MONKEY_TYPING; say 'alive'

[10:04] <p6eval> rakudo 1ddda5, niecza v7-38-gf5e9082: OUTPUT«alive␤»

[10:04] <p6eval> ..pugs: OUTPUT«pugs: *** Unsafe function 'use' called under safe mode␤    at /tmp/P7GUL8_JCH line 1, column 1␤»

[10:14] *** buubot_backup left
[10:21] *** whiteknight left
[10:21] *** Instil left
[10:24] *** Jackneill joined
[10:33] *** buubot_backup joined
[10:36] *** mj41 joined
[10:46] *** Chillance joined
[10:51] *** Instil joined
[10:53] *** im2ee left
[10:55] *** donri left
[10:56] *** mj41 left
[11:07] *** jaldhar left
[11:07] *** araujo joined
[11:07] *** jaldhar joined
[11:08] *** drbean joined
[11:13] *** tokuhir__ left
[11:16] *** Instil left
[11:20] *** mj41 joined
[11:27] *** whiteknight joined
[11:30] *** Holy_Cow joined
[11:30] *** Holy_Cow left
[11:35] *** mj41 left
[11:40] *** ciphertext joined
[11:46] *** Jackneill left
[11:51] *** cognominal joined
[11:55] *** MayDaniel_ joined
[11:56] <moritz> ok, big mystery

[11:57] <moritz> src/core/Attribute.pm is missing a  $meth.'!set_name'($meth_name)  between lines 24 and 25

[11:57] <moritz> when I add that, the compilation of the setting loops infinitely

[11:57] <moritz> so, I tried to add some debug output

[11:57] <moritz> pir::say("things")

[11:57] <moritz> or even

[11:57] <moritz> pir::getstderr__P().print("something else \n")

[11:57] <moritz> or even pir::die('foo')

[11:58] <moritz> but no matter what I add there, it always causes the setting compilation to loop infinitely

[11:58] <moritz> I'm stumped, and out of ideas

[12:03] *** hugme joined
[12:03] *** ChanServ sets mode: +v hugme

[12:03] <moritz> hugme: list projects

[12:03] <hugme> moritz: I know about Math-Model, Math-RungeKutta, MiniDBI, bench-scripts, book, gge, hugme, ilbot, java2perl6, json, modules.perl6.org, november, nqp-rx, nqpbook, perl6, perl6-examples, perl6-wtop, proto, pugs, rakudo, star, svg-matchdumper, svg-plot, tardis, try.rakudo.org, tufte, ufo, web, yapsi

[12:04] *** ccc_ joined
[12:08] *** Instil joined
[12:09] *** Mowah left
[12:09] *** MayDaniel_ left
[12:10] *** im2ee joined
[12:13] *** zloyrusskiy left
[12:15] *** Mowah joined
[12:17] *** wamba left
[12:17] *** Trashlord left
[12:17] *** wolfman2000 left
[12:18] *** LoRe left
[12:18] *** pothos left
[12:18] *** kytibe left
[12:18] *** Util left
[12:18] *** frettled left
[12:18] *** saaki left
[12:18] *** eternaleye left
[12:19] *** Trashlord joined
[12:19] *** wolfman2000 joined
[12:19] *** LoRe joined
[12:19] *** pothos joined
[12:19] *** kytibe joined
[12:19] *** Util joined
[12:19] *** frettled joined
[12:19] *** saaki joined
[12:19] *** eternaleye joined
[12:28] *** kid51 joined
[12:31] <dalek> rakudo/nom: fa9c35c | (Solomon Foster)++ | src/core/ (2 files):

[12:31] <dalek> rakudo/nom: Add prefix:<abs>(Real), redefine Real.abs to do calculation directly instead of using .Bridge.

[12:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fa9c35c6eb

[12:31] <dalek> rakudo/nom: d7d46e3 | (Solomon Foster)++ | t/spectest.data:

[12:31] <dalek> rakudo/nom: Turn on abs.t.

[12:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d7d46e352b

[12:32] *** nrr left
[12:35] *** colomon left
[12:43] *** Chillance left
[12:54] *** wamba joined
[12:54] *** Jackneill joined
[12:55] *** Holy_Cow joined
[13:10] *** JimmyZ joined
[13:25] *** chitragupt left
[13:26] *** chitragupt joined
[13:29] *** tokuhir__ joined
[13:30] *** molaf joined
[13:30] *** Holy_Cow left
[13:33] *** wamba left
[13:48] *** drbean left
[13:50] *** isBEKaml joined
[13:51] *** Chillance joined
[14:01] *** isBEKaml left
[14:07] *** Kivutarrr left
[14:25] *** kid51 left
[14:33] *** lichtkind joined
[14:34] *** colomon_droid joined
[14:34] <colomon_droid> o/

[14:36] <colomon_droid> is inheritance a little wonky in nom? 

[14:38] <colomon_droid> nom: say exp(i )

[14:38] <p6eval> nom: OUTPUT«Could not find sub &i␤current instr.: '_block1002' pc 70 ((file unknown):11808160) (/tmp/ObzoVGypRc:1)␤»

[14:39] <colomon_droid> nom: say i.exp

[14:39] <p6eval> nom: OUTPUT«Could not find sub &i␤current instr.: '_block1002' pc 70 ((file unknown):50627832) (/tmp/PupWKydj93:1)␤»

[14:39] <colomon_droid> arrgh

[14:40] <colomon_droid> nom: say exp(1i)

[14:40] <p6eval> nom: OUTPUT«0.54030230586814 + 0.841470984807897i␤»

[14:43] *** Instil left
[14:50] *** Jackneill left
[14:51] <lichtkind> cheers brave people

[14:56] <colomon_droid> complex exp turned out to be me misreading the test 

[14:59] *** lateau joined
[15:02] <colomon_droid> nom: say 2 ** -1

[15:02] <p6eval> nom: OUTPUT«0␤»

[15:02] <colomon_droid> tsk

[15:03] <jlaire> nom: say (2 ** -1).WHAT

[15:03] <p6eval> nom: OUTPUT«Int()␤»

[15:03] *** [Coke] left
[15:03] *** isBEKaml joined
[15:04] *** Kivutarrr joined
[15:05] *** [Coke] joined
[15:07] <colomon_droid> jlaire: yup, that's the problem 

[15:11] <isBEKaml> hey, did parrot change their build routines recently or so? pmc2c and c2str? I don't remember seeing them at all... 

[15:12] <isBEKaml> well, it might be my bad memory since I don't build stuff as often as I used to do... :|

[15:12] *** woosley joined
[15:15] <isBEKaml> nom: {sub say_hello() { say "hello"; }; say "foo";};

[15:15] <p6eval> nom: OUTPUT«foo␤»

[15:15] *** perlhack joined
[15:16] <isBEKaml> rakudo: {sub say_hello() { say "hello"; }; say "foo";};

[15:16] <p6eval> rakudo 1ddda5: OUTPUT«foo␤»

[15:19] <colomon_droid> exp.t now working on my laptop, will push when I have wifi 

[15:20] *** perlhack left
[15:25] *** Instil joined
[15:26] *** colomon_droid left
[15:27] *** colomon_droid joined
[15:27] *** colomon_droid left
[15:28] *** colomon_droid joined
[15:33] *** colomon_droid left
[15:33] *** colomon_droid joined
[15:33] *** colomon_droid left
[15:36] *** mj41 joined
[15:36] <[Coke]> isBEKaml: those 2 scripts have been around forever.

[15:36] <[Coke]> they may have morphed from perl5 to something else at some point.

[15:40] *** im2ee left
[15:41] <isBEKaml> [Coke]: yeah, bad memory, sorry. I later figured it out after poking the logs a bit. Oh btw, they are still in p5. 

[15:42] *** Instil left
[15:48] *** kid51 joined
[15:48] *** jevin left
[15:49] *** jevin joined
[15:54] <felher> TimToady++ for rosetta code

[15:54] *** zloyrusskiy joined
[15:54] *** Instil joined
[15:55] <TimToady> http://rosettacode.org/wiki/Function_composition#Perl_6 <-- upgraded to compose 3 functions

[15:56] <TimToady> turning RC entries into tests would be a fun LHF for someone

[15:58] <TimToady> sorear: is there any way to run an external program from niecza?  neither run() nor qx// seem to work yet, so I can't run stty raw and such

[16:03] *** Jackneill joined
[16:12] *** whiteknight left
[16:21] <TimToady> perl6: my bit @array = 1,0,0,1,0,1,0;

[16:21] <p6eval> niecza v7-38-gf5e9082: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Malformed my at /tmp/aclwScWCnF line 1:␤------> [32mmy [33m⏏[31mbit @array = 1,0,0,1,0,1,0;[0m␤␤Parse failed␤␤»

[16:21] <p6eval> ..rakudo 1ddda5: OUTPUT«===SORRY!===␤Malformed my at line 22, near "bit @array"␤»

[16:21] <p6eval> ..pugs:  ( no output )

[16:22] *** mberends joined
[16:22] <TimToady> .oO(Who's General Failure, and what's he doing to my disk drive?)

[16:22] <TimToady> pugs: my bit @array = 1,0,0,1,0,1,0; say @array[3];

[16:22] <p6eval> pugs: OUTPUT«1␤»

[16:22] <TimToady> well, okay, I'll bet it's just ignoring the type...

[16:23] <TimToady> pugs: my bit @array = 2;

[16:23] <p6eval> pugs:  ( no output )

[16:23] <TimToady> pugs: my bit @array = 2; say 'alive'

[16:23] <p6eval> pugs: OUTPUT«alive␤»

[16:23] <TimToady> yeah

[16:29] *** simcop2387 left
[16:29] <lichtkind> mberends: good mornings sir

[16:30] *** simcop2387 joined
[16:30] *** simcop2387 left
[16:30] *** simcop2387 joined
[16:30] *** Mowah left
[16:32] <mberends> good evening sir lichtkind 

[16:44] *** Mowah joined
[16:45] *** JimmyZ left
[16:48] *** Jackneill left
[16:49] *** woosley left
[16:56] *** mj41 left
[17:01] <TimToady> perl6: my Bit $x = 2;

[17:01] <p6eval> niecza v7-38-gf5e9082: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤In my declaration, typename 'Bit' must be predeclared (or marked as declarative with :: prefix) at /tmp/2TSwoGdKMU line 1:␤------> [32mmy Bit[33m⏏[31m $x = 2;[0m␤␤Malformed my at /tmp/2TSwoGdKMU line 1:␤------> [32mmy […

[17:01] <p6eval> ..rakudo 1ddda5: OUTPUT«===SORRY!===␤In "my" declaration, typename Bit must be predeclared (or marked as declarative with :: prefix) at line 22, near " $x = 2;"␤»

[17:01] <p6eval> ..pugs:  ( no output )

[17:01] <TimToady> std: my Bit $x = 2;

[17:01] <p6eval> std 516268a: OUTPUT«ok 00:01 121m␤»

[17:01] <TimToady> std: my bit $x = 2;

[17:01] <p6eval> std 516268a: OUTPUT«ok 00:01 121m␤»

[17:02] <TimToady> nom: my bit $x = 1;

[17:02] <p6eval> nom: OUTPUT«Malformed my at line 1, near "bit $x = 1"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23533 (src/stage2/gen/NQPHLL.pir:6314) (src/stage2/gen/NQPHLL.pm:328)␤»

[17:02] * TimToady is looking forward to native types, esp bits

[17:03] <tadzik> nom: my int $a = 5;

[17:03] <p6eval> nom:  ( no output )

[17:03] <tadzik> nom: my bit $a = 1

[17:03] <p6eval> nom: OUTPUT«Malformed my at line 1, near "bit $a = 1"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23533 (src/stage2/gen/NQPHLL.pir:6314) (src/stage2/gen/NQPHLL.pm:328)␤»

[17:04] <TimToady> so far it hasn't occurred to anyone to add even the bit type names :)

[17:04] <TimToady> well, except for that guy who cobbled together STD

[17:07] *** isBEKaml left
[17:12] <jlaire> pugs: my bit @bits = 0,1,2,3,4; say @bits

[17:12] <p6eval> pugs: OUTPUT«01234␤»

[17:13] <flussence> pugs: my foo @bits = 0,1,2,3,4; say @bits

[17:13] <p6eval> pugs: OUTPUT«01234␤»

[17:13] <jlaire> heh

[17:14] *** mj41 joined
[17:16] *** wooden joined
[17:16] *** leprevost left
[17:17] *** ccc_ left
[17:34] *** jevin left
[17:42] *** jevin joined
[17:44] *** wamba joined
[17:44] *** zloyrusskiy left
[17:48] *** Kivutarrr left
[17:49] *** Kivutarrr joined
[17:51] *** Jackneill joined
[17:57] *** godfrey999 joined
[17:59] *** mj41 left
[18:01] <sorear> TimToady: correct

[18:02] <sorear> (there's no portable way)

[18:02] <TimToady> I don't want to be correct :)

[18:04] <sorear> the .net process-starting APIs are very Windows-centric and I haven't understood the munging code in p5's win32_spawnvp yet

[18:14] <mberends> sorear: you would be better off ignoring the flawed attempts at fork emulation (munging) in Windows, because run() and qx// do not rely on that anyway. The child process never needs to be a clone of the parent process in the way that Unix goes fork then child execs.

[18:15] *** bluescreen10 joined
[18:16] *** ciphertext left
[18:18] *** lateau left
[18:19] <mberends> sorear: if you call CreateProcess() from C#, Unix will perform a fork() lower down and Windows will not. For I/O redirection, both platforms can provide popen(), just not sure about C# though.

[18:20] *** ciphertext joined
[18:33] *** ciphertext left
[18:35] *** tokuhir__ left
[18:47] *** Jackneill left
[19:08] <sorear> mberends: what I'm talking about has absolutely nothing to do with fork emulation

[19:08] <sorear> mberends: .net expects to start a process with two strings: the full path to the executable file, and the command tail

[19:09] <sorear> because on Windows, the called program is responsible for parsing the command line

[19:10] <mberends> right, so is your worry about splitting the single unix-oriented line?

[19:10] <sorear> not just splitting but also joining

[19:11] <sorear> system LIST, let's say system('echo', '\'"\'"*', '"'), has to do some interesting stuff to produce a correct command tail

[19:12] <mberends> yes, I can see the joins happening there

[19:12] <mberends> I assume that .net is just a thin wrapper around the Win32 functions

[19:13] <sorear> on Windows, yes

[19:13] <sorear> on Unix... I think the sensible thing to do is late-bound access to Mono.Posix

[19:14] <mberends> yes, keep the OS awareness as far down the call chain as possible

[19:19] <mberends> it looks like ProcessStartInfo is the Windows class/object to pass command line arguments and also set up I/O redirection. I'm planning to use that in 6model/c on Windows as well.

[19:22] *** jevin left
[19:22] *** molaf left
[19:23] *** aindilis joined
[19:26] *** jevin joined
[19:28] *** huf left
[19:28] *** jevin left
[19:29] *** huf joined
[19:29] *** jevin joined
[19:33] *** kst` joined
[19:34] *** shachaf left
[19:34] *** shachaf joined
[19:35] *** prammer left
[19:35] *** prammer joined
[19:36] *** ggoebel joined
[19:37] *** kst left
[19:39] *** Kivutarrr left
[19:51] *** cooper left
[19:54] *** jevin left
[19:55] *** cooper joined
[19:55] *** cooper left
[19:55] *** cooper joined
[19:56] *** revdiablo joined
[19:56] *** revdiablo left
[19:56] *** revdiablo joined
[19:57] *** jevin joined
[20:04] *** xinming left
[20:04] <dalek> roast: 22a02fc | (Solomon Foster)++ | S32-num/exp.t:

[20:04] <dalek> roast: Added another complex test.

[20:04] <dalek> roast: review: https://github.com/perl6/roast/commit/22a02fc617

[20:04] <dalek> roast: 453290b | (Solomon Foster)++ | S (2 files):

[20:04] <dalek> roast: Move gcd.t to S03-operators, switch it to operator form of gcd.

[20:04] <dalek> roast: review: https://github.com/perl6/roast/commit/453290b041

[20:04] <dalek> roast: 0bfac46 | (Solomon Foster)++ | S03-operators/lcm.t:

[20:04] <dalek> roast: Add simple new lcm.t.

[20:04] <dalek> roast: review: https://github.com/perl6/roast/commit/0bfac46c79

[20:05] <dalek> rakudo/nom: afc5299 | (Solomon Foster)++ | src/core/Num (2 files):

[20:05] <dalek> rakudo/nom: Fix Numeric.exp($base).  Add "multi" to Num.exp.

[20:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/afc52991fe

[20:05] <dalek> rakudo/nom: 7940ef2 | (Solomon Foster)++ | src/core/ (2 files):

[20:05] <dalek> rakudo/nom: Add exp(Numeric, Numeric).  Fix infix:<**>(Int, Int) to handle negative powers properly.

[20:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7940ef26ec

[20:05] <dalek> rakudo/nom: 1fbe8b1 | (Solomon Foster)++ | t/spectest.data:

[20:05] <dalek> rakudo/nom: Turned on exp.t.

[20:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1fbe8b1f6c

[20:05] <dalek> rakudo/nom: 9fd4115 | (Solomon Foster)++ | t/spectest.data:

[20:05] <dalek> rakudo/nom: Turn on gcd.t, add lcm.t.

[20:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9fd411556f

[20:10] *** xinming joined
[20:14] *** colomon joined
[20:18] *** kaare__ left
[20:33] *** soh_cah_toa joined
[20:35] *** ciphertext joined
[20:45] <sorear> mberends: ProcessStartInfo requires you to set the command tail as a single LPTSTR

[20:45] <sorear> colomon!

[20:49] <mberends> sorear: yes, that's what we must do

[20:55] <sorear> mberends: how do you turn system('echo', '\'"\'"', '*') into a command tail?

[20:55] <sorear> don't tell me "join(' ')"

[20:55] <sorear> there's quite a lot of compilcated logic in perl5:win32/win32.c that I haven't figured out

[20:56] *** isBEKaml joined
[20:57] <isBEKaml> hey guys, got a build failure on latest rakudo. Do you guys recognise this? https://gist.github.com/1086781

[20:58] <mberends> I haven't looked in win32.c yet, but I recall that the complicated logic was the fork emulation. I'll do that soon.

[20:58] * mberends is watching "Getting C++ Threads Right" http://www.youtube.com/watch?v=mrvAqvtWYb4

[21:01] <TimToady> sorear: obviously, you just invoke Perl 5 to do it.  :P

[21:02] <TimToady> fork emulation *should* be more straightforward for P6, but we'll see

[21:03] <TimToady> at least there should be fewer globals to fiddle

[21:03] <TimToady> duping data is always going to be work

[21:06] <sorear> mberends: "system" in Perl5 doesn't even hit the fork emulator

[21:06] <sorear> it is mapped into a CreateProcess call

[21:07] <mberends> good, that is the easier one for implementing p6 run() because we don't need to capture the output.

[21:09] <isBEKaml> nom: run('date'); 

[21:09] <p6eval> nom: OUTPUT«Could not find sub &run␤current instr.: '_block1002' pc 75 ((file unknown):84032856) (/tmp/sd2l7ZybXL:1)␤»

[21:10] <isBEKaml> rakudo: run('date');

[21:10] <p6eval> rakudo 1ddda5: OUTPUT«Operation not permitted in safe mode␤  in 'Safe::forbidden' at line 2:/tmp/nGmYCEYrc9␤  in main program body at line 22:/tmp/nGmYCEYrc9␤»

[21:10] <mberends> "do try this at home" ;)

[21:10] <isBEKaml> mberends: yeah, I know. I was wondering if you guys were talking about rakudo. :)

[21:10] <isBEKaml> but seems not. :)

[21:11] <mberends> no, TimToady++ was hoping that sorear++ could find a way to add run() to niecza

[21:12] *** tokuhir__ joined
[21:12] <isBEKaml> ah, I see. 

[21:15] <colomon> sorear: hello!

[21:15] *** masak joined
[21:16] <masak> saluton karaj.

[21:16] <isBEKaml> masak! \o/

[21:17] <masak> I found another victim^Wbeta tester today, and so I have another batch of feedback to enter into the game. :)

[21:18] <masak> but I'm hopeful I'll get at least the first blog post of two out the door tomorrow.

[21:19] * colomon just had two eggs in a row with double yolks

[21:19] <tadzik> hej zebro

[21:19] <isBEKaml> colomon: two eggs make double yolks? :P

[21:19] <isBEKaml> hello, tadzik! 

[21:19] <TimToady> colomon: it's them fertility drugs; pretty soon you'll be having litters of yolks

[21:20] <tadzik> isBEKaml: ohai!

[21:20] <isBEKaml> tadzik: how goes gsoc->work()?

[21:20] <tadzik> isBEKaml: I passed the first half!

[21:20] <colomon> TimToady: from my farm share, mind you

[21:20] <isBEKaml> tadzik: great to see! congrats... :)

[21:21] <tadzik> isBEKaml: how are you doing?

[21:21] <masak> tadzik++ # congrats!

[21:22] <isBEKaml> tadzik: as ever. Been busy at dayjob lately, so catching up on rakudo now. :)

[21:22] <tadzik> oh, I'm all ache today. We were burying the cellar in my home, 32 tones of sand

[21:23] <tadzik> I didn't even hack today!

[21:24] <isBEKaml> hugme: hug tadzik

[21:24] * hugme hugs tadzik

[21:24] <TimToady> std: /[A-Z]/

[21:24] <tadzik> ooh, thanks :]

[21:24] <p6eval> std 516268a: OUTPUT«[31m===[0mSORRY![31m===[0m␤Invalid regex metacharacter (must be quoted to match literally) at /tmp/NkjJotDw2h line 1:␤------> [32m/[A-[33m⏏[31mZ]/[0m␤Potential difficulties:␤  [A-Z] appears to be an old-school character class; please use <[A..Z]> if you mean …

[21:25] <jlaire> masak: did you backlog yet?

[21:27] <masak> jlaire: no, working on it.

[21:27] <masak> jlaire: I did catch your nopastes though. thank you.

[21:27] <masak> jlaire: I did indeed not consider the "trick" with the disks. easy enough to patch though :P

[21:28] <jlaire> masak: :)

[21:28] <masak> they're heavy, you see. shouldn't be possible to carry/lift more than one at a time.

[21:28] <jlaire> (I did solve it properly before coming up with that)

[21:28] <jlaire> ah, good point

[21:29] <masak> hm, could still put them on the floor, though...

[21:29] <jlaire> maybe you can only carry the tiny one

[21:29] <jlaire> the others are too havy

[21:29] <masak> I think I'll have to make all but the tiny one... right.

[21:29] <jlaire> heavy*

[21:30] *** Kivutarrr joined
[21:32] <masak> <moritz> it's fun to actually write running Perl 6 code :-)

[21:32] <masak> aye!

[21:37] *** jevin left
[21:40] * masak thinks he will need a more rigorous approach to the command handling

[21:40] *** jevin joined
[21:43] *** Psyche^ joined
[21:46] *** Patterner left
[21:46] *** Psyche^ is now known as Patterner

[21:48] <sorear> colomon: How do I fudge sin.t?

[21:53] *** kid51 left
[21:54] *** Kivutarrr left
[21:55] *** Kivutarrr joined
[21:59] <masak> jlaire: I am unable to reproduce the error at the top of http://pastebin.com/QbJFppfa

[22:01] *** Kivutarrr left
[22:07] *** lichtkind left
[22:14] *** ciphertext left
[22:15] <jlaire> masak: hmm, let me double check

[22:15] * jlaire updates rakudo

[22:18] <jlaire> masak: try this input http://laire.fi/t/crypt-bug.txt

[22:18] *** drbean joined
[22:18] * masak tries

[22:18] <jlaire> i.e., the bug happens for me when I haven't solved the puzzle yet

[22:18] <masak> ah!

[22:19] <jlaire> (still running a slightly old rakudo)

[22:19] <masak> that makes sense.

[22:20] <masak> jlaire: yup. now I reproduced it. \o/

[22:21] <jlaire> yay! \o/

[22:22] *** isBEKaml left
[22:25] *** donri joined
[22:27] <masak> bug fix pushed. jlaire++

[22:28] *** aindilis left
[22:29] <masak> 'night, #perl6.

[22:30] <jlaire> 'night

[22:30] *** masak left
[22:31] <jlaire> masak: Really quit (y/N)? Method 'lc' not found for invocant of class 'Failure'

[22:31] <jlaire> masak: that's Ctrl-D

[22:31] <tadzik> oh

[22:32] <jlaire> if "y"|"yes" eq lc prompt "Really quit (y/N)? " { ... }

[22:32] <jlaire> that's a cute line, though

[22:34] <jlaire> rakudo: say Failure.new.defined

[22:34] <p6eval> rakudo 1ddda5: OUTPUT«too few positional arguments: 1 passed, 2 (or more) expected␤  in main program body at line 1:src/metamodel/RoleToInstanceApplier.nqp␤»

[22:34] <jlaire> rakudo: say Failure.new

[22:34] <p6eval> rakudo 1ddda5: OUTPUT«too few positional arguments: 1 passed, 2 (or more) expected␤  in main program body at line 1:src/metamodel/RoleToInstanceApplier.nqp␤»

[22:34] <jlaire> rakudo: say Failure.new('...')

[22:34] <p6eval> rakudo 1ddda5:  ( no output )

[22:34] <jlaire> rakudo: say Failure.new('...').defined

[22:34] <p6eval> rakudo 1ddda5: OUTPUT«Method 'handled' not found for invocant of class 'Str'␤  in main program body at line 1:src/metamodel/RoleToInstanceApplier.nqp␤»

[22:34] <tadzik> my $a; my $b = lc $a; say $b.perl;

[22:34] *** wamba1 joined
[22:34] *** wamba left
[22:35] <tadzik> rakudo: my $a; my $b = lc $a; say $b.perl;

[22:35] <p6eval> rakudo 1ddda5: OUTPUT«Method 'lc' not found for invocant of class ''␤  in 'lc' at line 2818:src/gen/core.pm␤  in main program body at line 22:/tmp/a5pIidZ2eY␤»

[22:35] <tadzik> hrm

[22:35] <jlaire> changing lc's parameter to (prompt "..." // "q") fixes it

[22:36] <tadzik> rakudo: my $a = "" // "a"; say $a.perl

[22:36] <p6eval> rakudo 1ddda5: OUTPUT«""␤»

[22:36] <jlaire> ...no, it doesn't

[22:37] <jlaire> lc ((prompt "bla") // "y")

[22:38] <tadzik> how about changing !defined to !.so

[22:39] *** wamba1 left
[22:39] <colomon> sorear: what needs to be fudged?

[22:39] <jlaire> it'd add another line of code and a new variable

[22:39] <jlaire>  // is reasonably clear

[22:39] <jlaire> but this belongs to some readlineish library

[22:40] *** DarthGandalf left
[22:40] <jlaire> masak: fwiw, http://laire.fi/t/crypt-patch.txt

[22:41] *** Pathin left
[22:43] <tadzik> g'nite

[22:46] <sorear> colomon: BEGIN { @*INC.push: ... } needs to be changed somehow

[22:46] <colomon> ah

[22:46] <colomon> that's not fudging so much as fixing.

[22:46] <sorear> colomon: I vaguely consider adding a fudge to make BEGINs with that exact content happen at compile time

[22:47] <colomon> let me ponder this a bit.  some re-organization probably makes sense anyway

[22:49] *** DarthGandalf joined
[22:50] *** wamba joined
[22:58] *** wamba left
[23:26] *** ciphertext joined
[23:29] *** orafu left
[23:29] *** OuLouFu joined
[23:29] *** OuLouFu is now known as orafu

[23:33] *** bluescreen10 left
