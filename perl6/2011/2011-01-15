[00:01] <pmurias> how do i get the newest mono?

[00:05] <sorear> git clone git://github.com/mono/mono.git

[00:05] <sorear> I should clarify that the bugfixes are performance ones

[00:06] *** molaf joined
[00:06] <sorear> 1. the new garbage collector in 2.8 is much faster; in 2.9 it's stable enough to use, nearly doubling run speed

[00:06] <sorear> 2. 2.9 can use AOT-compiled code for .exe files as well as .dlls

[00:10] <pmurias> how fast is mono compared to the microsoft .net?

[00:16] *** Piesie joined
[00:17] <Piesie> Hello

[00:19] <TimToady> howdy

[00:20] <TimToady> what would you like to know about Perl 6?

[00:21] <Piesie> Want to develop a web app using perl. Just want to know if perl6 is ready for use in commercial app. I haven't used perl in months.

[00:21] <TimToady> at the moment performance is still slow on rakudo, so it would depend on you much stress you were putting on it

[00:22] <Piesie> Ok.

[00:22] <TimToady> also, we're not yet to the point of promising backward compatibility, so it depends on how sensitive you are to that

[00:24] <TimToady> one can, of course, take a snapshot of the current version to guarantee some kind of continuity

[00:24] <Piesie> U mean it's ready for use in developing apps but, just need some work on it's speed/performance?

[00:25] <TimToady> it's basically being used by early adopters who want to figure where things will be a couple years, and aren't afraid of a few bumps between now and then

[00:25] <Piesie> Ok.

[00:25] <TimToady> so yes, you can develop apps now, but for the moment they're still pretty slow, and may break occasionally

[00:26] <TimToady> it's fun though :)

[00:27] <TimToady> and it will be approaching "commercial grade" within the next year or three

[00:27] <Piesie> :-) . Sure it is. I love it when i spend hours trying to fix a bug, only to realize it's something small.

[00:28] <Piesie> Ok. Will give it a try.

[00:28] <TimToady> the things that work tend to work pretty well

[00:28] <TimToady> also documentation is still in a rudimentary stage

[00:28] <Piesie> Began last year, but stopped midway.

[00:28] <Piesie> Ok. 

[00:28] <TimToady> you'll find it better now, though still not perfect

[00:29] <Piesie> How about the modules. CPAN?

[00:29] <TimToady> there are several efforts at bootstrapping a module ecosystem, with oh 70 or so modules in the large ones

[00:30] <Piesie> Has it got its own set of modules/libs?

[00:30] <TimToady> some come standard with Rakudo Star, which is more of a distribution model

[00:30] <Piesie> Ok. All written in perl6?

[00:30] <TimToady> others are available through pls or neutro

[00:31] <TimToady> mostly; some may have dependencies on p5 modules via zavolaj

[00:31] <jnthn> ...Blizkost? :)

[00:31] <TimToady> that's what I meant

[00:31] <jnthn> Zavolaj is the library for calling C :)

[00:32] *** cafesofie joined
[00:32] <jnthn> I blame the guy who chose Slovak names for his projects.

[00:32] <TimToady> which some of the modules also do, but jnthn knows more about than me

[00:32] <Piesie> Hmm. Very perlish!

[00:32] <jnthn> The MiniDBI (database connectivity) library is built on top of Zavolaj

[00:32] <jnthn> It's kinda nice in that it's a pure Perl 6 library. No need to have a C compiler to use it.

[00:33] <jnthn> s/use/install/

[00:33] <Piesie> Great.

[00:33] <TimToady> well, pure perl down to the zavolaj layer, anyway

[00:33] <jnthn> Well, yes. :)

[00:33] <jnthn> Zavolaj is...magical. :)

[00:33] <TimToady> but lets you use ordinary .so or .dll files, I guess

[00:33] <jnthn> Aye.

[00:34] <TimToady> at least for simple APIs

[00:34] <jnthn> Yeah. It's limited, but good enough for at least mysql/pgsql and I know others have done other bits with it too.

[00:34] <Piesie> Apart from it's OO features, how different is perl6 from the current version? 

[00:34] <jnthn> It'll improve.

[00:35] <Piesie> K

[00:35] <TimToady> it's quite different in some ways

[00:35] <TimToady> much stronger FP support too

[00:35] *** pmurias left
[00:35] <TimToady> the grammar is much more regular and self-describing

[00:35] <TimToady> the standard parser is written in Perl 6

[00:36] <TimToady> and because of the regularity, we can also do some rather more powerful things than P5 can

[00:36] <TimToady> such as meta-operators like APL has, only readable :)

[00:37] <Piesie> Ok.

[00:37] <TimToady> rakudo: say 1,2,3 Z+ 5,5,5

[00:37] <p6eval> rakudo d5b9d9: OUTPUT«678␤»

[00:38] <TimToady> that a "zipped" plus

[00:38] <TimToady> it does the two lists pairwise like a zipper

[00:38] <TimToady> and you can put any infix there in place of +

[00:39] <Piesie> Nice

[00:39] <TimToady> so we can concat instead of add, for instance

[00:39] <TimToady> rakudo: say 1,2,3 Z~ <a b c>

[00:39] <p6eval> rakudo d5b9d9: OUTPUT«1a2b3c␤»

[00:39] <TimToady> rakudo: say (1,2,3 Z~ <a b c>).perl

[00:39] <p6eval> rakudo d5b9d9: OUTPUT«("1a", "2b", "3c")␤»

[00:39] <TimToady> that's clearer

[00:40] <TimToady> there's a related X metaop that does a "cross product"

[00:40] <TimToady> rakudo: say (1,2,3 X~ <a b c>).perl

[00:40] <Piesie> This is cool

[00:40] <p6eval> rakudo d5b9d9: OUTPUT«("1a", "1b", "1c", "2a", "2b", "2c", "3a", "3b", "3c")␤»

[00:40] <jnthn> One of the nicest ones is reduction.

[00:40] <jnthn> rakudo: say [+] 1,2,3

[00:40] <p6eval> rakudo d5b9d9: OUTPUT«6␤»

[00:40] <jnthn> Like putting the operator between the values.

[00:41] <TimToady> perhaps the most potent difference from Perl 5 is that lists are lazy

[00:41] <jnthn> rakudo: sub factorial($n) { [*] 1..$n }; say factorial(5); say factorial(10);

[00:41] <p6eval> rakudo d5b9d9: OUTPUT«120␤3628800␤»

[00:41] <TimToady> so instead of a factorial function, you can just define a lazy factorial array

[00:42] *** carlos left
[00:42] * jnthn is curious what TimToady's favorite way of writing that is...

[00:42] <TimToady> rakudo: my @factorial := [\*] 1..*;  say @factorial[5]; say @factorial[10]

[00:42] <p6eval> rakudo d5b9d9: OUTPUT«720␤39916800␤»

[00:42] <TimToady> well, off by one, but you get the idea

[00:43] <jnthn> Oh, wow. :)

[00:43] <jnthn> I don't think I've seen the triangle reduction used for that before. :)

[00:43] <TimToady> rakudo: my @factorial := 0, [\*] 1..*;  say @factorial[5]; say @factorial[10]

[00:43] <p6eval> rakudo d5b9d9: OUTPUT«120␤3628800␤»

[00:43] <TimToady> there we go

[00:44] <Piesie> Gr8

[00:44] <TimToady> the cute thing about it is that it automatically memoizes, so factorial(10) doesn't have to recalculate factorial(5)

[00:45] <Piesie> Will visit the page. 

[00:45] <Piesie> That's great

[00:45] <TimToady> for lots of examples, see rosettacode.org

[00:45] <TimToady> http://rosettacode.org/wiki/Category:Perl_6 specifically

[00:45] <sorear> jnthn: spend some time in #haskell, you'd be amazed at the abuses scanl can be put to :)

[00:46] <Piesie> Thanks. Bye

[00:46] <TimToady> ciao

[00:47] *** Piesie left
[00:50] <jnthn> sorear: I have to learn Haskell syntax to do that. :)

[00:50] <jnthn> It's something that bizzarely seems to evaporate from my brane as soon as I learn it.

[00:51] <TimToady> just think about the ramifications of defining new lazy array elements in terms of existing array elements

[00:51] <jnthn> Probably lack of practice.

[00:55] <shortcircuit> TimToady: Indeed; I was really, really, really pleased with that elegant, efficient primes generator. :)

[00:55] *** mtk left
[01:01] <jnthn> sleep o'clock &

[01:01] <TimToady> nitey

[01:01] <jnthn> night o/

[01:02] *** mtk joined
[01:08] <colomon> \o

[01:08] <TimToady> shortcircuit: well, it's neither as elegant nor as efficient as it ought to be someday; 'last if $p > sqrt($n)' is neither of those

[01:08] <TimToady> since it's recalculating sqrt($n) multiple times

[01:09] <TimToady> and last wouldn't be necessary if we could nest ... correctly in rakudo

[01:09] <colomon> hmmm, what's the issue there?

[01:09] <TimToady> don't remember offhand, but the usual iterator collision I supect

[01:10] <TimToady> we're talking about http://rosettacode.org/wiki/Prime_decomposition#Perl_6

[01:10] <colomon> I guessed.  :)

[01:10] <colomon> you can nest iterators now, you know.

[01:10] <TimToady> if you want to try to turn the inner for loop into a ... I suspect you'll run into the problem, if it's still a problem

[01:11] <colomon> I'll give it a go.

[01:11] <colomon> Hmmm... I did it using a similar loop in Math::Prime.

[01:12] <colomon> I think that was for speed, though.

[01:14] <TimToady> anyway, @primes ... * > sqrt($n) didn't seem to work before; I think it eagerified it somewhere

[01:15] <colomon>     repeat { $n += 2 } until $n %% none do @primes ... * > sqrt($n);   seems to work fine now.

[01:15] <TimToady> cool

[01:15] *** envi joined
[01:15] <TimToady> I'll bet it recalculates sqrt though

[01:15] <colomon> I'm guessing that actually ... yeah, that.

[01:15] *** shi left
[01:16] <TimToady> ... { $^p > START sqrt $n }

[01:17] <TimToady> should reclone the sqrt at the right time

[01:17] <colomon> seriously?  cool.

[01:17] <TimToady> ... { $^p > state $s = sqrt $n }  # similarly

[01:18] <TimToady> since state is defined in terms of START

[01:18] <TimToady> (clone sensitivity is how state differs from C static)

[01:19] <colomon> I'm not sure I prefer either of those to simply saying my $sqrt = sqrt($n);   -- though I guess that kind of destroys the one-liner elegance. 

[01:20] <colomon> I wonder what would be needed to allow the compiler to automatically hoist that out of the implicit loop?

[01:21] <TimToady> pity you can't say { my $s = sqrt($n += 2) } since the $s would be trapped

[01:21] *** MayDaniel left
[01:21] <TimToady> realizing that $n doesn't vary in the loop would allow a loop-invariant optimizer to see it

[01:23] <shortcircuit> Mm.

[01:23] *** arlinius joined
[01:23] <TimToady> doubtless Haskell would automatically memoize it

[01:24] <shortcircuit> Were it me, I'd try explicitly caching the output of my check function. Is there a way to write something like: my @sqrts := sqrt($index)?

[01:24] <TimToady> yes, that could also be cached lazily, though you'd still have a lookup each time, rather than an invariant scalar in the loop

[01:25] <sorear> TimToady: "doubtless" - you'd be suprised

[01:25] <sorear> that behavior can cause memory leaks, so it's disabled by default in GHC (6.8)

[01:25] <colomon> actually, isn't memoizing likely to be slower than calculating sqrt anyway?

[01:26] <TimToady> not if it's just an index into an array

[01:26] <TimToady> which you can do if you know the key is small integers

[01:26] <TimToady> but yeah, there's still an awful lot of integers

[01:27] <TimToady> so it wouldn't do to memoize that automatically for what might be a one-shot need

[01:27] <colomon> It seems like it would have to recognize that you can memoize Int.sqrt a lot more efficiently than Real.sqrt

[01:27] <shortcircuit> Is it that the key is small integers, or is it that the key is from a small set of integers? I'd need to look at the loop again, but being able to set an upper bound on memoized element count for a lazy list might be handy.

[01:28] *** risou left
[01:28] <TimToady> there are several more Reals than there are Ints, cantorifically speaking

[01:28] <TimToady> not that we can name many of them with a finite computer...

[01:29] <TimToady> it's a bit sobering to realize that virtually none of the arithmetic done on a computer can be irrational

[01:29] <TimToady> unless it's done symbolically

[01:29] <TimToady> rakudo: say pi # not really

[01:29] <p6eval> rakudo d5b9d9: OUTPUT«3.14159265358979␤»

[01:30] <TimToady> maybe it should be named pioid, or piish, or pilike

[01:31] <colomon> pi-close-enough-for-sane-people.  ;)

[01:31] <shortcircuit> "it's a bit sobering to realize that virtually none of the arithmetic done on a computer can be irrational" ... oi. That really throws a wrench in some of the free will/AI sentience debates I've been participating in, lately.

[01:31] <shortcircuit> Pun not intended.

[01:32] <colomon> actually, of course if you're doing symbolic math you don't have to settle for an approximation on your computer any more than you have to with pencil and paper.

[01:32] <TimToady> there are certainly ways of introducing quantum indeterminacy in a computation, so I don't think you should let the lack of IrRats bother you

[01:32] <shortcircuit> Heh.

[01:32] <TimToady> .oO(EarRats)

[01:32] <shortcircuit> I'll avoid participating in spilling that set of debates over here. :)

[01:33] <sorear> a computer which uses finite-precision decimals can handle the same IrRats that a mathematician using same can

[01:33] <sorear> none of them

[01:34] <sorear> most of the interesting math doesn't use concrete numbers anyway

[01:34] <TimToady> and since I believe the universe basically has free will; any sufficiently feedbacky construct within the universe can find ways of deferring a decision until a decision is wanted

[01:34] <sorear> it's all free variables and quantifiers

[01:36] * colomon is now pondering making a numeric type which is just any Real * pi.

[01:36] <sorear> on second thought, the computer wins

[01:36] <sorear> humans aren't that good with schoenhage-strassen :)

[01:37] <TimToady> Pauli has something to say about "free", and Heisenburg has something to say about "quantified"  :)

[01:38] * TimToady ponders a number system in which every number is its own square root, and tests it with two test cases... :)

[01:38] <sorear> Z_2 is a lovely field

[01:39] <TimToady> rakudo: say sqrt(True).Bool

[01:39] <p6eval> rakudo d5b9d9: OUTPUT«Bool::True␤»

[01:39] <TimToady> rakudo: say sqrt(False).Bool

[01:39] <p6eval> rakudo d5b9d9: OUTPUT«Bool::False␤»

[01:39] <TimToady> \o/

[01:41] *** dukeleto left
[01:42] *** dukeleto joined
[01:47] <colomon> https://gist.github.com/780610

[01:47] <colomon> That's just a start.  :)

[01:50] <colomon> rakudo: say 15 * pi - (10 * pi + 5 * pi)

[01:50] <p6eval> rakudo d5b9d9: OUTPUT«0␤»

[01:51] <sorear> rakudo: say (^10).WHAT

[01:51] <p6eval> rakudo d5b9d9: OUTPUT«Range()␤»

[01:53] <dukeleto> colomon: very nice to see the correct answer there :)

[01:53] <colomon> dukeleto: kind of surprising.  I was figuring there would be a tiny bit of floating point error in there.

[01:54] <dukeleto> colomon: if that isn't a spectest, it should be :)

[01:56] <plobsing> rakudo: say (15 * pi - (10 * pi + 5 * pi)).WHAT

[01:56] <Tene> I find the idea of a setting that had annotations indicating pure functions in approrpiate places for a compiler to make use of appealing.

[01:56] <p6eval> rakudo d5b9d9: OUTPUT«Num()␤»

[01:56] <colomon> +1

[01:57] <plobsing> rakudo: say (15 * pi - (10 * pi + 5 * pi)) * 1e10

[01:57] <p6eval> rakudo d5b9d9: OUTPUT«0␤»

[01:58] <colomon> plobsing: what I'm working on now is a simple class that allows you to do perfectly accurate basic math on pi.  :)

[01:58] <colomon> It's completely useless, but cute. 

[02:01] <sorear> colomon: isn't there some rule to the effect that sin(Q * pi) \in \bar{C} ?

[02:01] <plobsing> nifty

[02:01] <sorear> er, \bar{Q}

[02:01] <colomon> sorear: If so, I've not heard it.

[02:02] <colomon> hmmm... guess for sure it is true for the integers.

[02:03] *** noganex_ left
[02:04] <colomon> http://www.mathpages.com/home/kmath460/kmath460.htm

[02:04] <colomon> Just as a quick answer, isn't sin(pi/4) the sqrt(2)?

[02:05] <colomon> err, over 2?

[02:05] <colomon> rakudo: say sin(pi/4);

[02:05] <p6eval> rakudo d5b9d9: OUTPUT«0.707106781186547␤»

[02:05] *** noganex joined
[02:05] <colomon> rakudo: say sqrt(2)/2

[02:05] <p6eval> rakudo d5b9d9: OUTPUT«0.707106781186548␤»

[02:06] <sorear> colomon: sqrt(2)/2 is in \bar{Q} though

[02:06] <sorear> it's the root of 4*x*x - 2 = 0

[02:07] <colomon> do you mean \bar{Q} to be the irrational numbers?

[02:08] <shortcircuit> rakudo: say (sin(pi/4) - sqrt(2/2))

[02:08] <p6eval> rakudo d5b9d9: OUTPUT«-0.292893218813453␤»

[02:08] <TimToady> .oO(the PiRats of Penzance)

[02:09] <sorear> I mean the field of algebraic numbers

[02:09] <sorear> which is the minimal algebraic closure of Q

[02:11] * shortcircuit tries to figure out why he doesn't remember sqrt(2)/2 == 1/sqrt(2) as a trig identity. Probably because he couldn't remember any of his trig identities in calc class.

[02:11] <shortcircuit> Probably also because it's not strictly trig.

[02:11] <colomon> sorear: ah.

[02:12] <colomon> afk # company just arrived.

[02:12] <Tene> shortcircuit: I don't see how that identity has anything to do with trig at all?

[02:12] <shortcircuit> rakudo: say (sin(pi/4) - (sqrt(2)/2)

[02:12] <p6eval> rakudo d5b9d9: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 22␤»

[02:12] * shortcircuit blinks

[02:12] <Tene> shortcircuit: it's just factoring... a/a² = 1/a

[02:12] <colomon> https://gist.github.com/780610 # now updated with some operators.

[02:12] <shortcircuit> rakudo: say (sin(pi/4) - (sqrt(2)/2))

[02:12] <p6eval> rakudo d5b9d9: OUTPUT«-1.11022302462516e-16␤»

[02:14] <shortcircuit> Ah, I see why I didn't see it. I forgot sqrt(2) == 2^(1/2)

[02:14] <shortcircuit> Or something. I'm going to forget I ever took any math classes, now.

[02:15] <Tene> shortcircuit: but... that's what sqrt means...

[02:15] <Tene> ><

[02:15] <Tene> 'k

[02:15] *** molaf left
[02:17] <shortcircuit> Tene: The last time I took a calc class was in 2003, it was Calc 2, and I got a C-. That's better than the D- I got in 2002. I haven't had to do much more than basic integrals with any regularity, and I've probably lost the intuition for just about anything above basic algebra. :-(

[02:17] <Tene> shortcircuit: There's absolutely no need to justify yourself to me. :P

[02:17] <shortcircuit> There was a fundamental gap in expectations of understanding. :)

[02:18] <TimToady> the last calc I took was in, oh, 1973, ow...

[02:18] <TimToady> everything we knew back then is now obsolete :)

[02:19] <Tene> I wouldn't be born for another 12 years at that point. :)

[02:19] <shortcircuit> And I'd have been born just two years before Tene.

[02:20] * shortcircuit double-checks by counting on his fingers.

[02:22] * shortcircuit should learn bit-twiddling tricks for finger-digit math hacks

[02:23] * TimToady used to be a 4-sigma event, but has probably misplaced a sigma or two since then

[02:25] <TimToady> probably because I've forgotten some of my probability as well

[02:25] <shortcircuit> ...gah. He took the pun already.

[02:25] <TimToady> that sigma is the last to go, unfortunately

[02:27] <TimToady> it's sad--someday I'll be making puns that I don't get myself

[02:29] *** molaf joined
[02:30] <shortcircuit> Wait...

[02:30] <shortcircuit> 01:35 < TimToady> and since I believe the universe basically has free will; any sufficiently feedbacky  construct within the universe can find ways of deferring a decision until a decision is  wanted

[02:30] <shortcircuit> Are you saying reality is just a lazy list?

[02:30] *** cafesofie left
[02:37] *** arlinius left
[02:43] <colomon> sorear: were you suggesting one could also do a class for the field of algebraic numbers?

[02:43] <dukeleto> colomon: that sounds interesting

[02:48] *** Chillance left
[02:49] *** icwiener joined
[02:50] *** dukeleto left
[02:50] *** dukeleto joined
[02:51] *** VXZ left
[02:58] *** am0c joined
[03:04] *** arlinius joined
[03:04] *** cafesofie joined
[03:32] <colomon> rakudo: say sin pi

[03:32] <p6eval> rakudo d5b9d9: OUTPUT«1.22464679914735e-16␤»

[03:35] <diakopter> niecza: say sin pi

[03:35] <p6eval> niecza v1-149-g56c80b0: OUTPUT«Can't open perl script "niecza_eval": No such file or directory␤»

[03:36] *** Raghu joined
[03:41] *** Raghu left
[03:47] <sorear> colomon: yes

[03:47] <colomon> sorear: very interesting

[03:51] * TimToady crosses his fingers that certain people won't get distracted :)

[03:53] <colomon> ;)

[03:57] <sorear> TimToady: what? who? where?

[04:02] <lue> hello fellow zebras! o/

[04:03] <colomon> lue: you'll love what I've been toying with.

[04:04] * lue can't wait to will love it

[04:04] <colomon> lue: https://gist.github.com/780610

[04:05] <colomon> exact math with multiples of pi

[04:07] <lue> woo-hoo! That saves 2 characters of typing, and looks more mathy too boot \o/ !

[04:07] <colomon> lue: the important bit is the exact

[04:08] <colomon> so if you say 10π + 5π, it's just doing integer arithmetic to get the answer 15π, and it's exactly 15π.

[04:09] <dalek> niecza: 3320d05 | sorear++ | t (4 files):

[04:09] <dalek> niecza: Merge back test2

[04:09] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3320d057e9

[04:09] <dalek> niecza: eab7f8a | sorear++ | Makefile:

[04:09] <dalek> niecza: Add test and p6eval make targets

[04:09] <dalek> niecza: review: https://github.com/sorear/niecza/commit/eab7f8a9ff

[04:09] <lue> ah, so it comes out 15π instead of some approximate floating number. That's very cool :)

[04:10] <colomon> I don't know that it's terribly useful, but it was fun.

[04:10] *** icwiener left
[04:10] <colomon> and very easy

[04:10] *** icwiener joined
[04:12] * lue now ponders infinite cardinals in Perl 6... aaah!

[04:12] <colomon> and sorear++ is suggesting terrible ways to make it more ... umm... complete.  :)

[04:14] <dukeleto> colomon: can we make it act the same with irrational numbers?

[04:15] <lue> as long as it's complete, nothing could *possibly* go wrong :)

[04:15] <colomon> you mean some greater sort of symbolic math?

[04:15] * lue needs to heavily customize his compose key...

[04:16] <Tene> lue: https://github.com/kragen/xcompose is what I use

[04:16] <Tene> I think a few others here do too.

[04:17] *** kaare_ joined
[04:17] * colomon is ashamed to admit he just used the special character box in TextMate to get the first π, and has been cutting and pasting it ever since.

[04:17] *** quester_ joined
[04:17] <colomon> Especially sad because it turns out π is just option-p.

[04:18] <colomon> sorear suggested that if you pass a Rat times π to sine, the result should be an http://en.wikipedia.org/wiki/Algebraic_integer

[04:19] <lue> Tene: I've actually come across that repo though. I looked at every single combination and decided not to use it :) [I should though...]

[04:20] <lue> Ooh, I forgot. Happy Anniversary Wikipedia! \o/

[04:23] *** Su-Shee_ joined
[04:23] *** tzhs_ joined
[04:24] *** ashleydev left
[04:25] *** tzhs left
[04:25] *** tzhs_ is now known as tzhs

[04:26] *** Su-Shee left
[04:30] *** f00li5h left
[04:30] *** arlinius| joined
[04:31] *** arlinius left
[04:42] <lue> colomon: any other evil things that could make your code more complete?

[04:42] <colomon> lue: ah, there's always something out there...

[04:43] *** Vlavv` left
[04:44] *** ponbiki left
[04:45] *** ponbiki joined
[04:47] <TimToady> I think they should be PiRats, not PiInts

[04:47] *** kaare_ left
[04:48] *** icwiener left
[04:48] <lue> .oO(Do PiRats drink PiInts of beer?)

[04:50] * lue is activating the coolest .Xcompose file ever. Please wait.

[04:51] *** lue left
[04:51] <colomon> PyrE ....

[04:51] <colomon> off to bed

[04:52] *** risou joined
[04:54] *** BaggioKwok joined
[04:55] *** Vlavv` joined
[04:57] *** lue joined
[04:57] <lue> ahoy, zebra PiRats o/

[05:03] *** BaggioKwok left
[05:09] *** cafesofie left
[05:29] *** mberends left
[05:31] *** risou_ joined
[05:31] *** risou left
[05:35] *** dukeleto left
[05:35] *** risou_ left
[05:36] *** f00li5h joined
[05:36] *** dukeleto joined
[05:40] *** drbean left
[05:49] *** gbacon joined
[05:50] *** drbean joined
[05:55] *** typepeter joined
[06:01] *** icwiener joined
[06:21] <dalek> niecza: bb76bbe | diakopter++ | FETCH_URL:

[06:21] <dalek> niecza: remove trailing linebreak from FETCH_URL; was breaking cygwin build; I'm sure there are other ways to fix it...

[06:21] <dalek> niecza: review: https://github.com/sorear/niecza/commit/bb76bbe8c5

[06:32] *** Bzek joined
[06:34] *** Bzek_ left
[06:38] *** quester_ left
[06:43] <dalek> niecza: 4f2a35b | diakopter++ | README.pod:

[06:43] <dalek> niecza: README.pod: add a section for Cygwin/.NET; amend the CREDITS section a bit

[06:43] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4f2a35bc76

[06:46] *** cafesofie joined
[06:49] <dalek> niecza: 240d90d | diakopter++ | README.pod:

[06:49] <dalek> niecza: more README cleanup/clarification

[06:49] <dalek> niecza: review: https://github.com/sorear/niecza/commit/240d90d1f5

[06:51] <diakopter> std: $*HIGHWATER = $¢.pos = @*MEMOS[$¢.pos]<ws>//$¢.pos;

[06:51] <p6eval> std 625303c: OUTPUT«ok 00:01 121m␤»

[06:52] <diakopter> o_O

[06:57] <diakopter> (that line causes niecza to say "assigning to readonly value"

[06:59] <TimToady> yes, it's one of the places STD cheats on the immutability of the current cursor

[07:01] <diakopter> I thought I read the whole backlog..

[07:02] <diakopter> but that seems to be a problem with a clean checkout

[07:02] <diakopter> clean clone

[07:02] <diakopter> TimToady: do you get that error from a fresh clone/build?

[07:03] <TimToady> eh?  I'm still getting the problem of the old version

[07:03] <diakopter> oh.

[07:03] <diakopter> this is with .NET4

[07:03] <diakopter> I haven't looked at the p6eval machine's niecza environment

[07:04] <diakopter> I could try it on mono 2.8.2

[07:04] * diakopter looks

[07:08] *** mberends joined
[07:08] <diakopter> mberends: hi

[07:08] <diakopter> working okay with 2.8.2 so far, I *thought*

[07:09] <diakopter> but apparently it thought it needed to rebuild everything

[07:10] <mberends> diakopter: hi from an android phone at London Gatwick airport (departing soon to visit jnthn :)

[07:10] <diakopter> heh

[07:10] <diakopter> good travels

[07:12] <diakopter> TimToady: fresh niecza checkout, untampered mono 2.8.2 amd64/linux (debian) build, niecza gets all tests successful

[07:14] <mberends> diakopter: thanks. Is Sprixel doing any spectesting? any LHF there?

[07:15] <moritz_> good morning

[07:16] <diakopter> well, now that I suddenly have another choice of STD-compatible front-end (niecza) in addition to viv, I'm thinking of using that (once today's build kinks get curved out)...

[07:17] <diakopter> mberends: so to answer your question, no, there's still no sprixel but for the perlesque language

[07:17] <diakopter> which is complete but quickly becoming obviated

[07:18] <mberends> these are exciting times for implementations :)

[07:21] <diakopter> otoh, I still suspect niecza's Perl 6 parser could be lots more efficient/faster if its STD.pm6 were much more (primitive)type-annotated(or at least inferred)... so there still may be some value in pursuing that implementation angle (the primitive/native types, on up)

[07:21] <typepeter> good morning , moritz

[07:30] *** cafesofie left
[07:37] *** cafesofie joined
[07:37] *** justatheory left
[07:42] *** mberends left
[07:43] *** cafesofie left
[07:47] *** sunnavy joined
[07:49] *** TiMBuS left
[07:49] *** TiMBuS joined
[07:52] *** risou joined
[08:15] *** acrussell left
[08:28] *** barika joined
[08:35] *** typepeter left
[08:41] *** mtk left
[08:49] *** Patterner left
[08:51] *** Psyche^ joined
[08:51] *** Psyche^ is now known as Patterner

[08:52] *** mtk joined
[09:13] *** VXZ joined
[09:24] *** mj41 left
[09:28] *** cjk101010 joined
[09:44] *** cogno joined
[09:45] *** cjk101010 left
[09:57] *** WonTu joined
[09:57] *** WonTu left
[10:08] *** cogno left
[10:09] *** cogno joined
[10:12] *** Su-Shee_ is now known as Su-Shee

[10:13] *** cjk101010 joined
[10:27] *** cjk101011 joined
[10:30] *** gbacon left
[10:33] *** cogno left
[10:35] *** typepeter joined
[10:39] *** cogno joined
[10:41] *** cjk101011 left
[10:44] *** cogno left
[10:44] *** cogno joined
[10:52] *** molaf left
[10:55] *** cogno left
[11:06] *** mj41 joined
[11:13] *** dukeleto left
[11:14] *** dukeleto joined
[11:33] *** pmurias joined
[11:33] <pmurias> diakopter: re viv and niecza, choose niecza

[11:35] *** cjk101011 joined
[11:35] <pmurias> diakopter: by targeting NAM you won't be duplicating all the hairy ast transforms (like if's), you will help niecza (highlighting any possible backend assumptioms in NAM), and you'll get optimialisation for free when they appear in niecza

[11:36] *** typepeter left
[11:49] *** jimbob joined
[11:53] *** cjk101011 left
[12:07] *** icwiener left
[12:29] *** cjk101011 joined
[12:41] * colomon is startled to discover he doesn't need to wake up and work on masak++'s problems this morning

[12:42] <moritz_> colomon: heh :-)

[12:43] <moritz_> dud masak comment on how many submissions he received?

[12:43] <colomon> moritz_: things going a bit better this morning?

[12:43] <colomon> he has not yet said anything about it, as far as I know.

[12:43] <moritz_> colomon: yep, wife is already doing short walks again, toddler doesn't need artificial respiration anymore

[12:44] <colomon> \o/

[12:45] *** stephane joined
[12:45] <colomon> you did submit 5 solutions, right?

[12:46] <moritz_> yes

[12:46] <colomon> me too

[12:48] *** cogno joined
[12:48] *** jimbob left
[12:49] <moritz_> http://moritz.faui2k3.org/tmp/ronja.jpg that's her

[12:50] *** molaf joined
[12:51] <tadzik> hello zebras

[12:52] <tadzik> moritz_: cute, congratulations!

[12:52] <colomon> moritz_: awwww.  :)

[12:54] *** MayDaniel joined
[12:55] *** cogno left
[12:56] *** snearch joined
[12:59] *** cogno joined
[13:03] <frettled> moritz_: congrats!

[13:04] <moritz_> now I need to write a mail to the Norwegian family :-)

[13:04] <moritz_> "Ronja er født", is that right? :-)

[13:04] <mux> moritz_: she's a beauty, congratulations :-)

[13:05] <tadzik> moritz_: congratulations from my girlfriend too :)

[13:05] <mux> heh, funny, my gf just went "awwwwwwwwwww" too

[13:05] <moritz_> thank you tadzik & .girlfriend, colomon, frettled, mux :-)

[13:05] <moritz_> funny enough, a year ago I was rather insensitive to pictures from newborns

[13:06] <moritz_> and now I also go "awwwwwww" :-)

[13:06] <mux> a few years ago, I was quite insensitive to children in general; not so much anymore - I guess I'm getting older

[13:06] <colomon> good, you're responding properly, then.  :)

[13:08] *** hudnix left
[13:09] <frettled> moritz_: they really mess with our brains ;)

[13:09] <moritz_> aye :-)

[13:09] <moritz_> even before they are born

[13:09] <frettled> mm

[13:09] <moritz_> through the wife's hormones

[13:09] <frettled> Some might claim that they mess with our brains before and during the production process, too.

[13:13] *** hudnix joined
[13:23] *** kjeldahl joined
[13:28] *** cogno left
[13:29] *** Su-Shee left
[13:40] *** tzhs left
[13:41] <arnsholt> moritz_: Yeah, that's correct Norwegian

[13:42] <moritz_> arnsholt: thanks

[13:45] *** cjk101011 left
[13:48] *** cjk101011 joined
[13:53] *** stephane left
[13:55] *** risou left
[13:59] *** Su-Shee joined
[13:59] *** yarp joined
[14:25] *** phenny joined
[14:41] *** yarp left
[15:01] *** REPLeffect left
[15:04] *** scottdware joined
[15:06] *** scottdware left
[15:07] <ggoebel> moritz_: congratuations

[15:09] <ggoebel> moritz_: take care of mom. She has at least 2 months of sleep deprivation to look forward to.

[15:10] *** GinoMan left
[15:11] <colomon> it was more like 18 months for both of us.  ;)

[15:17] *** REPLeffect joined
[15:23] <arnsholt> rakudo: last

[15:23] <p6eval> rakudo d5b9d9: OUTPUT«  in '!control' at line 1␤»

[15:24] <moritz_> who was last in control? :-)

[15:25] <arnsholt> Yeah, something like that =)

[15:34] *** shi joined
[15:40] *** icwiener joined
[15:46] *** mberends joined
[15:46] <arnsholt> Oh, great a segfault

[15:47] *** stepnem left
[15:47] *** arlinius| is now known as arlinius

[15:47] *** kalkin- joined
[15:47] <kalkin-> hi

[15:47] <kalkin-> how do i declare constants in perl6?

[15:48] <kalkin-> in classes

[15:53] *** stepnem joined
[15:54] <colomon> hmmm.

[15:55] <colomon> constant but different for each object, or constant and the same for each object?

[15:57] <dalek> 6model: 2c94d8f | jonathan++ | java/compiler/compile.pir:

[15:57] <dalek> 6model: [java] Should use UTF8 encoding when reading source files.

[15:57] <dalek> 6model: review: https://github.com/jnthn/6model/commit/2c94d8f8d6

[16:02] <kalkin-> colomon: same

[16:02] <kalkin-> something like i would do in php with const key word

[16:02] *** HarryS joined
[16:02] <kalkin-> i.e. i have a object HTTPStatus and it has constants

[16:03] <kalkin-> const SUCCESSFULL = 200;

[16:03] <kalkin-> const NOT_FOUND = 404;

[16:03] <kalkin-> ect ...

[16:03] <colomon> kalkin-: in theory, you can just say "constant $successful = 200;" in Perl 6, but in practice, I don't think that works yet in Rakudo.

[16:04] <kalkin-> colomon: how that? i thought rakudo is written accordingly to perl6 specs

[16:04] <colomon> Rakudo does not yet implement the entire Perl 6 spec.

[16:04] <kalkin-> as rakudo was released as stable i thought it implements the entire perl6 spec

[16:04] <kalkin-> colomon: ohh

[16:05] <flussence> rakudo: class HTTP { has %.status = enum « :OK(200) :Not-Found(404) »; }

[16:05] <p6eval> rakudo d5b9d9:  ( no output )

[16:05] <flussence> rakudo: class HTTP { has %.status = enum « :OK(200) :Not-Found(404) »; }; say 'alive';

[16:05] <p6eval> rakudo d5b9d9: OUTPUT«alive␤»

[16:05] <kalkin-> colomon: is there some page where all not implemented stuff is mentioned?

[16:05] *** mberends left
[16:05] *** mberends joined
[16:06] <colomon> kalkin-: http://rakudo.org/status

[16:06] <colomon> though I don't see constant mentioned there.

[16:06] <flussence> rakudo: constant $a = 1;

[16:06] <p6eval> rakudo d5b9d9: OUTPUT«===SORRY!===␤Constant type declarator not yet implemented at line 22, near "= 1;"␤»

[16:06] <kalkin-> me neither

[16:06] <kalkin-> k, it doesn't work :)

[16:07] <colomon> I'm not sure why, it seems like it ought to be pretty easy to at least approximate it.  Hmm.

[16:07] <flussence> (is there any way to pull out a nice list of all the tests rakudo is skipping)

[16:07] <flussence> s/$/?

[16:07] <colomon> flussence: not that I know of, and the list would be pretty huge.

[16:08] *** envi left
[16:08] <flussence> hm...

[16:08] <kalkin-> i'm new to perl6 coded a littlebit perl with thw LWP library and www::mechanize

[16:09] <kalkin-> i'm thought about porting lwp to 6 to learn 6 better

[16:09] * flussence has enough spare time to go try them all manually

[16:09] <colomon> flussence: a quick grep suggests there are about 1000 Rakudo skip statements in the test suite

[16:09] <kalkin-> i really like that perl6 can be coded completly staticaly typed

[16:09] <colomon> and another 469 todos

[16:10] <kalkin-> static typing ftw! :)

[16:10] <tadzik> kalkin-: there's a partial port of LWP::Simple, you may find that useful

[16:10] <tadzik> kalkin-: look at http://modules.perl6.org/

[16:12] <kalkin-> nice i overlooked it

[16:15] <arnsholt> There

[16:15] * arnsholt has submitted his solutions for p6cc2010

[16:15] <arnsholt> Hoping for the consolation prize, since I've only got solutions for p1-4 =)

[16:17] <colomon> arnsholt: moritz_ and I submitted all five.  :)

[16:17] <colomon> no word yet if anyone else did.

[16:18] <colomon> what did you do for p4?

[16:19] <arnsholt> My AI does perfect play in the cases it's possible

[16:19] <arnsholt> (modulo bugs, obviously)

[16:19] <arnsholt> From what you've said you've got the same, no?

[16:20] <colomon> only up to a certain level

[16:20] <colomon> so perhaps not as good as your solution.

[16:21] <colomon> I think mine should have perfect play as long as all the runs of stones are length 25 or shorter.

[16:21] <colomon> (modulo bugs)

[16:21] <flussence> .oO( argh, "ulimit -m 1500000" doesn't do what it's supposed to... )

[16:21] <arnsholt> http://oeis.org/search?q=dawson%27s+kayles&language=english&go=Search

[16:22] <arnsholt> The Nimber sequence for various game states for the game in p4

[16:22] <arnsholt> I kinda ODed on the research on p4 and found enough theory to figure out how to leverage that sequence in my solution

[16:22] <colomon> I figured there had to be something like that, but I didn't want to look it up.  :)

[16:23] <arnsholt> Hehe

[16:23] <colomon> my p5 solution was all research and borrowed algorithms, so I did p4 the hard (and incomplete) way.

[16:23] <arnsholt> Hehe

[16:23] <arnsholt> I almost spreed on the matrix chain thing as well

[16:23] <arnsholt> Turns out there's an n log n algorithm

[16:24] <colomon> I suspect my p4 solution plays almost as well as yours, but not quite as well, and is massively longer.  :)

[16:24] <arnsholt> But in the end I just did n "normal" bottom-up DP deal

[16:24] <colomon> arnsholt: I just generated all the permutations and tested them.  Pretty trivial, if not the best solution.

[16:24] <arnsholt> Yeah, the code for the front-end in my ode is actually the most complicated part

[16:25] <arnsholt> Including blank lines and comments, my AI code is 71 lines

[16:25] <arnsholt> The front-end is 140 lines =)

[16:26] <colomon> my AI code is 300 lines.

[16:26] <colomon> front-end is only like 30.

[16:26] <arnsholt> Hehe

[16:26] <arnsholt> My AI is massively abstracted away

[16:27] <arnsholt> So the front-end has to do all the leg-work for converting back and forth between the AI's world-view and everyone elses's =)

[16:28] *** [Coke] joined
[16:28] <colomon> ah, that part is hard to separate out from my AI.

[16:28] <colomon> :)

[16:29] <colomon> arnsholt++

[16:30] *** mtk left
[16:38] *** mtk joined
[16:40] *** JimmyZ_ joined
[16:46] <dalek> niecza: c010820 | pmurias++ | src/NieczaBackendClisp.pm6:

[16:46] <dalek> niecza: fix the clisp backend

[16:46] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c0108202b3

[16:46] <pmurias> diakopter: ping

[16:54] *** [Coke] left
[16:54] <dalek> 6model: 245905a | jonathan++ | java/ (5 files):

[16:54] <dalek> 6model: [java] A few bits to try and get the project moving again. This puts an older partial setting in place dating to around when things were last updated. Both runtime and compiler build again.

[16:54] <dalek> 6model: review: https://github.com/jnthn/6model/commit/245905ab9b

[16:57] *** [Coke] joined
[17:02] *** proller_ joined
[17:02] *** proller joined
[17:02] *** proller left
[17:16] <diakopter> pmurias: plong

[17:17] <diakopter> oooo jnthn back on 6model

[17:20] <diakopter> pmurias: but.. perlesque already does all that, and has gotos/labels; it has a couple tradeoffs with nam as far as low-level-ness goes

[17:24] *** am0c left
[17:25] <diakopter> phenny: tell pmurias what I was instead considering was working on primitive/native type support for niecza, and possibly using parts of perlesque's codebase for that (if necessary)

[17:25] <phenny> diakopter: I'll pass that on when pmurias is around.

[17:26] *** stephane joined
[17:32] <flussence> well, I just ran all the test files rakudo has todo things in and there's a bunch that pass normally now:

[17:32] <flussence> t/spec/S04-statement-modifiers/while.t, t/spec/S05-mass/properties-block.t, t/spec/S06-signature/passing-arrays.t, t/spec/S16-filehandles/unlink.t

[17:33] <flussence> if anyone wants to do it themselves, I did it using   ack -ag '\.rakudo' | sed -e 's/\.rakudo/\.t/' > tests.list; perl t/harness --tests-from-file=tests.list

[17:34] *** proller_ left
[17:41] *** snearch left
[17:42] *** HarryS left
[17:42] <colomon> arnsholt: On further consideration, if your p4 works as advertised, I predict it will normally smoke mine.  :)

[17:43] *** Eevee left
[17:52] *** justatheory joined
[18:02] *** JimmyZ_ left
[18:07] *** cjk101011 left
[18:09] *** [Coke] left
[18:24] *** Chillance joined
[18:30] *** MayDaniel left
[18:40] *** jedai joined
[18:41] *** jedai_ left
[18:43] <pmurias> diakopter: re adding primitive/native stuff to niecza, that's even better

[18:43] <phenny> pmurias: 17:25Z <diakopter> tell pmurias what I was instead considering was working on primitive/native type support for niecza, and possibly using parts of perlesque's codebase for that (if necessary)

[18:44] <pmurias> diakopter: i thought you were considering making viv emit perlesque code

[18:50] *** ashleydev joined
[18:58] *** shi left
[18:59] *** Bzek_ joined
[19:01] *** Bzek left
[19:14] *** pyrimidine left
[19:19] *** avuserow left
[19:21] *** avuserow joined
[19:22] *** HarryS joined
[19:28] *** GinoMan joined
[19:29] *** pyrimidine joined
[19:46] <arnsholt> colomon: Thanks! I did go a bit bananas on the research for that, so it's good that the result was good too =)

[19:48] *** dukeleto left
[19:49] *** dukeleto joined
[19:53] <sorear> good * #perl6

[19:57] *** Layla_91 joined
[19:57] <Layla_91> hi o/

[19:58] <kthakore> Layla_91: hi \o FIVE!

[19:58] <kthakore> :)

[19:58] <Layla_91> ktha

[19:58] <Layla_91> kthakore: :D

[19:59] <kthakore> Layla_91: welcome to #perl6 

[19:59] <Layla_91> kthakore: Are you new here?

[19:59] <kthakore> Layla_91: I have lurked a lot

[19:59] <kthakore> and dabbled a bit

[20:00] <Layla_91> kthakore: I guess it is first time we meet here :) nice to meet you! :D

[20:00] <kthakore> nice to meet you too!

[20:01] <Layla_91> can we achieve ordered hashes in perl6?

[20:02] <sorear> EnumMap is specced to be an ordered hash

[20:02] <moritz_> really?

[20:02] <moritz_> I understood it differently

[20:03] <pmurias> if a hash is ordered it's no longer a hashtable

[20:03] <Layla_91> But it seems kinda hard to emulate one.. I know it loses some of its charm when it becomes ordered.. but it is needed sometimes..

[20:04] <Layla_91> I mean to emulate one with current imp of perl6..

[20:04] * moritz_ has basically never felt the need of full-blown ordered hashed

[20:04] <moritz_> I have sometimes kept a list of keys in order

[20:05] <flussence> emulating one isn't that hard - you just need a normal hash to map keys to array indices, and an array to store the values

[20:05] <moritz_> but I never had to perform insertion or deletion operations in both

[20:05] <plobsing> Layla_91: parrot has an OrderedHash. you can probably make use of it from rakudo.

[20:06] <Layla_91> plobsing: oh so we actually do have ordered hashes in one implementation of perl6.. great I will check it :D

[20:09] <Layla_91> Oh..

[20:10] *** awwaiid left
[20:10] <tadzik> hi Layla_91!

[20:10] <Layla_91> tadzik: hi!!! :D

[20:11] <tadzik> sorear: I have some problems with new niecza: http://nopaste.snit.ch/27857

[20:11] <pmurias> Layla_91: even if ordered hashes are not specced it should be easy to have the in an module (using an AVL tree or similiar)

[20:11] <Layla_91> tadzik: I googled Eric Clapton few days ago :D

[20:11] <flussence> isn't S09:461 a definition of an ordered hashtable anyway?

[20:12] <tadzik> Layla_91: ha, nice :) I really like this acoustic version

[20:12] <pmurias> flussence: it has a constant set of keys

[20:13] <flussence> oh

[20:13] *** Eevee joined
[20:14] <Layla_91> tadzik: appeared that my name is famous B-)

[20:15] <Layla_91> pmurias: I know it can be done.. It just need more typing than I thought :) I was trying to convert some python3.1 code to perl6 yesterday and wished it exists :)

[20:16] *** cafesofie joined
[20:17] <pmurias> Layla_91: they are builtin in python?

[20:17] *** awwaiid joined
[20:23] <Layla_91> pmurias: I ment it would ease my work.. It was not in the code I was converting.. but AFAIK it will be available in version 3.2 of python..

[20:24] <Layla_91> pmurias: Just found this: http://www.python.org/dev/peps/pep-0372/#abstract

[20:27] *** ashleydev left
[20:27] *** ashleydev joined
[20:28] <jnthn> evening, #perl6

[20:28] <moritz_> *, #perl6

[20:29] <Layla_91> jnthn: Hey! I read your slides about signatures.. do more of these slides please! :D

[20:29] <moritz_> that was quite an awesome talk

[20:29] <moritz_> I heard it at YAPC::EU

[20:30] <moritz_> and basically everybody was impressed

[20:30] <Layla_91> moritz_: I saw you too on youtube :D

[20:30] <moritz_> Layla_91: did you?

[20:30] <moritz_> I didn't know I was on a video anywhere

[20:30] <Layla_91> moritz_: Yes you are :D Google your name :D

[20:31] <moritz_> just found it

[20:31] <Layla_91> moritz_: Sound quality is not so good.. just for the future.. :)

[20:31] <jnthn> Layla_91: Thanks, glad you liked them! :)

[20:32] <jnthn> Layla_91: More of my talks are on http://www.jnthn.net/articles.shtml

[20:32] <Layla_91> jnthn: I liked the "I like beer part" :D

[20:32] <jnthn> There's a video around of "Perl 6: For Little Tools and Large Applications" and the sound quality on it was quite good.

[20:33] <jnthn> Layla_91: :D

[20:33] *** ashleydev left
[20:33] * jnthn has been planning what conferences to go to this year. :)

[20:34] <moritz_> jnthn: do tell

[20:34] <jnthn> moritz_: Currently likely are Dutch Perl Workshop, OSDC.TW, YAPC::Russia, French Perl Workshop and YAPC::Europe. 

[20:34] <pmurias> sorear: any idea what is the source of make setting the terminal color to grey? or should i hunt it down

[20:35] <jnthn> moritz_: Will keep an eye open for other things being organized too. :)

[20:35] <Layla_91> jnthn: When are you coming to Russia? and where in Russia..

[20:36] <lue> hello world o/

[20:38] *** _jaldhar joined
[20:38] *** knewt2_ joined
[20:38] <jnthn> Layla_91: As far as I know, YAPC::Russia will be 14-15th May in Moscow.

[20:38] <jnthn> Layla_91: You're in/from Russia?

[20:38] <Layla_91> jnthn: I am from Volgograd :D

[20:38] *** bacek_ joined
[20:39] <jnthn> Layla_91: Oh, cool!

[20:39] <jnthn> I never went there...yet. :)

[20:39] <Layla_91> jnthn: Currently not in russia but I visit russia once a year :)

[20:39] <jnthn> I seem to make it roughly every 2 years. Have managed to visit Ukraine once a year for the last four years though.

[20:40] <Layla_91> jnthn: Moscow is 2 hours flight from Volgograd so it is not a problem for me to visit moscow..

[20:40] *** gtsafas_ joined
[20:40] *** robins joined
[20:41] *** buubot left
[20:41] <jnthn> Layla_91: Cool. I'm sure there will be website up for YAPC::Russia soon. I think it'll be fun event with lots of Perl people.

[20:41] <jnthn> Perl community is awesome.

[20:41] <jnthn> :)

[20:41] <Layla_91> jnthn: expect a girl called Layla to be there :D

[20:41] *** hillu_ joined
[20:41] *** GinoMan_ joined
[20:41] <jnthn> Layla_91: Cool! :D

[20:42] <jnthn> See you there. :)

[20:42] <lue> [backlogging] Congratulations, moritz_!

[20:42] *** Some-body_ joined
[20:43] *** MayDaniel joined
[20:43] <moritz_> thanks lue

[20:46] *** GinoMan left
[20:46] *** mtk left
[20:46] *** Patterner left
[20:46] *** bacek left
[20:46] *** PacoLinux left
[20:46] *** chitragupt left
[20:46] *** jaldhar left
[20:47] *** chitragupt joined
[20:48] <Layla_91> jnthn: :)

[20:48] *** sjohnson joined
[20:48] *** toebu joined
[20:49] *** ashleydev joined
[20:49] <lue> glad to hear the little tyke is doing alright.

[20:50] <Layla_91> Goodbye all.. I will be out for around a week.. see u soon! \o/

[20:50] <jnthn> bye bye o/

[20:50] <lue> bye o/

[20:50] *** Layla_91 left
[20:51] *** Some-body_ is now known as DarthGandalf

[20:51] *** DarthGandalf left
[20:51] *** DarthGandalf joined
[20:51] *** y3llow left
[20:52] *** y3llow joined
[20:54] *** ashleydev left
[20:55] <moritz_> std: my $x if 0

[20:55] *** HarryS left
[20:55] <p6eval> std 625303c: OUTPUT«ok 00:01 120m␤»

[20:55] <moritz_> rakudo: my $x if 0

[20:55] <p6eval> rakudo d5b9d9:  ( no output )

[20:56] *** HarryS joined
[20:57] *** Patterner joined
[20:57] *** icwiener left
[20:59] <sorear> pmurias: I blame NieczaFrontendSTD.pm6 line 77

[21:01] <sorear> tadzik: what version of mono?

[21:03] *** skangas left
[21:03] *** sgarthp joined
[21:04] *** skangas joined
[21:05] *** Kodi joined
[21:05] *** c1sung_ joined
[21:05] <Kodi> rakudo: my $x = 2208988800; say $x; say $x.WHAT; ++$x; say $x; say $x.WHAT;

[21:05] <p6eval> rakudo d5b9d9: OUTPUT«2208988800␤Int()␤2208988801␤Num()␤»

[21:06] *** kolibrie joined
[21:06] *** diakopte1 joined
[21:06] *** clkao_ joined
[21:06] *** nadim_ joined
[21:07] *** LoRe_ joined
[21:07] *** diakopter left
[21:07] *** kolibrie_ left
[21:07] *** _ilbot left
[21:07] *** clkao left
[21:07] *** LoRe left
[21:07] *** nadim left
[21:07] *** tylerni7 joined
[21:07] *** tylerni7 left
[21:07] *** tylerni7 joined
[21:07] <Kodi> It looks like Rakudo prematurely promotes Ints to Nums on 64-bit machines. Known?

[21:07] <sorear> yes

[21:07] <sorear> the promotion test hardcodes 2**31

[21:07] <Kodi> I feared as much.

[21:07] <sorear> in theory Int should be bigint though

[21:08] *** _ilbot joined
[21:08] *** ponbiki left
[21:14] *** cjk101011 joined
[21:14] <dalek> rakudo: 1671b5e | KodiB++ | / (2 files):

[21:14] <dalek> rakudo: Moved what I intended to be comments outside of angle brackets.

[21:14] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/1671b5ef71

[21:14] <dalek> roast: 9b43296 | (Kodi Arfer)++ | S32-temporal/DateTime-Instant-Duration.t:

[21:14] <dalek> roast: Added a test for Instant.perl.

[21:14] <dalek> roast: review: https://github.com/perl6/roast/commit/9b43296da5

[21:16] *** cjk101010 left
[21:16] *** jevin left
[21:16] *** jevin_ joined
[21:16] <pmurias> sorear: i'll fix that line

[21:17] <pmurias> how is boot/ updated?

[21:18] <moritz_> Kodi: should tools/update-tai-utc.pl be run regularly?

[21:18] *** coldhead left
[21:19] *** coldhead joined
[21:20] *** cogno joined
[21:21] <Kodi> moritz_: Yes, each February and August.

[21:21] <moritz_> Kodi: maybe it would be helpful to add a step to the release guide, instructing it to run after a release or something

[21:22] <moritz_> otherwise we'll forget, I fear

[21:22] *** skangas left
[21:22] <Kodi> moritz_: Not a bad idea.

[21:25] *** skangas joined
[21:25] *** skangas left
[21:26] *** DarthGandalf left
[21:26] *** wolverian joined
[21:26] *** Kodi left
[21:27] *** eternaleye_ joined
[21:27] <pmurias> sorear: boot/ now needs to be updated to avoid the greyness after make

[21:27] *** skangas joined
[21:28] *** shortcir1uit joined
[21:28] *** Bucciarati_ joined
[21:29] <dalek> niecza: d8d1eb9 | pmurias++ | src/NieczaFrontendSTD.pm6:

[21:29] <dalek> niecza: fixed reseting the term

[21:29] <dalek> niecza: review: https://github.com/sorear/niecza/commit/d8d1eb9d21

[21:29] *** eternaleye left
[21:29] *** shortcircuit left
[21:29] *** Bucciarati left
[21:29] *** __sri left
[21:29] *** dalek left
[21:29] *** hugme left
[21:29] *** _sri joined
[21:29] *** dalek joined
[21:29] *** ChanServ sets mode: +v dalek

[21:31] *** cogno left
[21:32] *** shortcir1uit is now known as shortcircuit

[21:32] *** shortcircuit left
[21:33] *** shortcircuit joined
[21:33] <lue> Is it normal for a test to be unable to find a sub in a module I can use with the REPL?

[21:34] *** DarthGandalf joined
[21:34] <flussence> lue: sounds like the test and REPL are looking in different $PERL6LIB paths, maybe

[21:39] <lue> possibly. I'll check that in a minute.

[21:44] <pmurias> sorear: i don't undestand how the Makefile works, shouldn't compiling the niecza harness automatically check if any of niecza submodules changed and recompile them?

[21:44] <tadzik> sorear: 2.6.7

[21:47] <lue> actually, I don't think it the environment is the problem, as running both    make test    (which sets a temporary PERL6LIB) and    perl6 t/test.t    fail.

[21:53] *** cibs left
[21:55] *** cibs joined
[21:57] <dalek> nqp-rx/nom: 99b6773 | jonathan++ | / (4 files):

[21:57] <dalek> nqp-rx/nom: A bit more stubbing in of multi-dispatch; this just always hands back the first candidate in the list to invoke for testing purposes. More interesting is that the invocation logic, passing along the same argument set, is in place now.

[21:57] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/99b67739ce

[22:01] <lue> tadzik: is there an auth field for META.info? [or rather, what fields does neutro support?]

[22:02] *** kaare_ joined
[22:05] <lue> Hm. perl6.org seems to be down.

[22:08] <dalek> rakudo: 1014912 | jnthn++ | src/core/Parcel.pm:

[22:08] <dalek> rakudo: Add a workaround from bacek++ to avoid hitting things from the NQP Setting that get added to ResizablePMCArray, and also notes on the way that we'll end up ridding ourselves of this problem in the future.

[22:08] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/1014912a8a

[22:09] *** ashleydev joined
[22:09] *** bacek_ left
[22:10] *** orafu left
[22:10] *** orafu joined
[22:11] *** bacek_ joined
[22:13] *** ashleydev left
[22:14] <lue> where can I see what to put in a META.info file for neutro? [don't say S22 unless neutro implements all of those fields]

[22:15] <colomon> We just asked tadzik++

[22:17] <arnsholt> lue: Well, if you're feeling brave, there's always the neutro source code

[22:18] *** bacek_ left
[22:22] <lue> I grazed the source and didn't see anything.

[22:26] <lue> colomon: care to tell me what the answer was? :)

[22:27] <colomon> I just copied his first example META.info for mine.

[22:27] <colomon> I've no idea if other fields are possible or not.

[22:31] *** cafesofie left
[22:46] *** ponbiki joined
[22:49] *** PerlJam joined
[22:51] *** stephane left
[22:53] <snarkyboojum> lue: http://ttjjss.wordpress.com/2011/01/08/perl-6-module-ecosystem-%E2%80%93-news-and-ideas/

[22:59] <snarkyboojum> lue: in other words, just that subset of S22 at present :)

[23:00] <snarkyboojum> lue: but it's certainly not going to blow up if you include an author field etc

[23:01] *** kaare_ left
[23:03] *** hugme joined
[23:03] *** ChanServ sets mode: +v hugme

[23:08] *** kjeldahl left
[23:13] <lue> I still think S22's authority/author disambiguation is very illegal.

[23:16] *** Juerd joined
[23:19] <sorear> pmurias: it does

[23:20] <pmurias> sorear: so why run niecza on all the submodules from the Makefile?

[23:21] <sorear> pmurias: what's a submodule?

[23:22] <pmurias> just meant all the .pm6's

[23:23] <pmurias> ahh it turns all the .nam files into .dll's

[23:23] <pmurias> i was trying to understand why changing one file and recompiling takes so long

[23:23] <sorear> For some reason the automatic conversion with -Bdotnet is horribly slow

[23:24] <sorear> for me it takes around as long as explicitly running CLRBackend N times

[23:24] <sorear> for one file

[23:25] <sorear> there are some unpleasant interactions with make-logic

[23:25] <pmurias> can't you ran it only on those files that changed?

[23:26] <pmurias> it takes 20sec for me

[23:31] <pmurias> not sure how to do it portably

[23:34] <pmurias> sorear: how difficult would it be to add profiling to niecza?

[23:36] <dalek> nqp-rx/nom: ef0b76b | jonathan++ | src/ops/nqp.ops:

[23:36] <dalek> nqp-rx/nom: Fix a copy-paste fail.

[23:36] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/ef0b76b9df

[23:36] <dalek> nqp-rx/nom: d0c72d1 | jonathan++ | src/ (2 files):

[23:36] <dalek> nqp-rx/nom: Get multiple dispatch working up to the point that it can do arity-based multiple dispatch. A lot of the stuff for type-based is stubbed in too, as is some incomplete error reporting. Still needs hardening, caching, etc.

[23:36] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/d0c72d1d9a

[23:37] <sorear> diakopte1: does cygwin's shell have the [ command?

[23:38] <sorear> pmurias: that depends on your definition of profiling

[23:41] <flussence> [ is a posixy thing, I'd expect it to be in there. It's the "[[" that's a bash-ism

[23:43] <pmurias> why can't we use Perl 6 instead of shell/Makefile

[23:43] <pmurias> ?

[23:44] <pmurias> flussence: isn't cywin's shell a bash?

[23:46] <flussence> dunno

[23:46] <flussence> probably is, but I haven't used cygwin in ages.

[23:46] <pmurias> cygwin likely tries to be as much of a linux as possible

[23:50] <pmurias> sorear: how much different functions take

[23:50] <pmurias> sorear: checking datedness of files seems a bit suspicious

[23:50] <lue> blag toast!    https://rdstar.wordpress.com/2011/01/15/numbersordinals-is-here-ish/

[23:51] <dalek> 6model: efd7ee5 | (Martin Berends)++ | java/ (17 files):

[23:51] <dalek> 6model: [java] first of a series to commits to catch up to dotnet.

[23:51] <dalek> 6model: Compiles and starts running but then exits when RakudoCodeRef::Invoke is

[23:51] <dalek> 6model: called with a null parameter.

[23:51] <dalek> 6model: review: https://github.com/jnthn/6model/commit/efd7ee5f54

[23:51] <pmurias> sorear: but optimising stuff blindly seems silly

[23:54] <pmurias> sorear: the best case would be to emit stuff Devel::NYTProf takes

[23:56] *** bacek joined
[23:59] <sorear> pmurias: the main reason I'm not considering a Perl 6 build system is that all available implementations still use far too much memory

