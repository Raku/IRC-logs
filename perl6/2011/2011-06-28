[00:04] <jnthn> oh gah, dynpmcs and dynops build into separate libs :/

[00:05] *** wamba left
[00:08] <jnthn> orka...I fix it tomorrow.

[00:10] *** skangas left
[00:10] *** skangas_ joined
[00:10] *** skangas_ is now known as skangas

[00:10] *** lue left
[00:10] *** cdarroch left
[00:10] *** bloonix left
[00:10] *** Reaganomicon left
[00:10] *** pothos left
[00:10] *** dobie_gillis left
[00:10] *** mikemol left
[00:13] *** lue joined
[00:13] *** cdarroch joined
[00:13] *** bloonix joined
[00:13] *** Reaganomicon joined
[00:13] *** pothos joined
[00:13] *** dobie_gillis joined
[00:13] *** mikemol joined
[00:13] *** yath joined
[00:16] *** tokuhirom joined
[00:57] *** stepnem left
[00:58] *** stepnem joined
[01:00] *** cdarroch left
[01:03] *** mtk left
[01:04] *** woosley joined
[01:05] *** stepnem left
[01:08] *** stepnem joined
[01:20] *** tokuhirom left
[01:20] *** tokuhirom joined
[01:33] *** [Coke] left
[01:35] *** [Coke] joined
[01:35] <thou> i'm starting to loath socialtext wiki

[01:36] <thou> i don't think it's -Ofun

[01:37] *** bluescreen10 left
[01:40] *** icwiener_ joined
[01:42] *** icwiener_ left
[01:43] *** icwiener left
[01:54] *** whiteknight left
[01:54] *** woosley left
[01:55] *** woosley joined
[02:10] *** mberends left
[02:15] *** stepnem left
[02:20] *** stepnem joined
[02:21] <thou> anyone here know how to turn off rakudo's "readline" functionality, so I can use rlwrap on it? I could swear I saw a blog post or something about this a while back, but can't find it.

[02:24] <thou> ah, i can recompile and disable it then

[02:25] <sorear> jnthn: ping

[02:26] <thou> somehow

[02:30] <thou> for the IRC logs:  This should work:  cd /path/to/src/rakudo; perl Configure.pl --gen-parrot --parrot-option=--without-readline

[02:31] *** seeif joined
[02:32] *** envi joined
[02:33] <seeif> hey

[02:33] <seeif> it's funny

[02:33] <TimToady> haha

[02:33] <thou> hehe

[02:33] *** stepnem left
[02:37] *** seeif left
[02:39] *** stepnem joined
[02:45] *** lichtkind left
[02:56] *** benabik joined
[02:56] *** _jaldhar_ left
[02:57] *** _jaldhar_ joined
[03:02] <colomon> pdcawley just asked me if Perl 6 could recognize this sequence: http://www.ocf.berkeley.edu/~stoll/answer.html

[03:05] <sorear> colomon: Perl 6 is not an AI

[03:06] <sorear> it doesn't recognize things; I don't know what you mean

[03:06] <colomon> sorear: didn't you hear my proposal to have the sequence operator look up sequences on line?  ;)

[03:06] <sorear> I FORBID.

[03:06] <colomon> it does recognize arithmetic and geometric sequences

[03:08] <sorear> this is the last thing RJA Sloane needs

[03:09] <sorear> this is an absolutely terrible idea and I will have nothing to do with it

[03:09] <sorear> I hope it was a joke

[03:09] <colomon> sorear: it's a joke.

[03:11] *** spq2 joined
[03:15] <sorear> sorry.

[03:19] *** benabik left
[03:20] *** tokuhirom left
[03:22] *** benabik joined
[03:25] *** LaVolta joined
[03:26] *** Su-Shee left
[03:27] *** benabik left
[03:28] *** Su-Shee joined
[03:28] <colomon> rakudo

[03:28] <colomon> ;

[03:29] <colomon> rakudo: say "ttthh" ~~ /(.)\1*/

[03:29] <p6eval> rakudo 1fcb14: OUTPUT«===SORRY!===␤Unrecognized backslash sequence at line 22, near "*/"␤»

[03:29] <colomon> rakudo: say "ttthh" ~~ /(.)$0*/

[03:29] <p6eval> rakudo 1fcb14: OUTPUT«ttt␤»

[03:29] <colomon> rakudo: say ~"ttthh".comb(/(.)$0*/)

[03:29] <p6eval> rakudo 1fcb14: OUTPUT«ttt hh␤»

[03:34] *** spq2 left
[03:34] *** mule joined
[03:34] *** mule left
[03:37] *** benabik joined
[03:37] <colomon> btw

[03:38] <colomon> rakudo: say ~((1, { $_.comb(/(.)$0*/).map({ $_.chars ~ $_.substr(0, 1) }).join } ... *)[^10])

[03:38] <p6eval> rakudo 1fcb14: OUTPUT«1 11 21 1211 111221 312211 13112221 1113213211 31131211131221 13211311123113112211␤»

[03:39] <colomon> is the http://www.ocf.berkeley.edu/~stoll/answer.html sequence in p6.  (bet someone else can make that cleaner...)

[03:39] * colomon should be in bed.

[03:40] <TimToady> I'm pretty sure I've seen that seq on RC

[03:41] <sorear> niecza: say "31131211131221".subst(/(.)$0*/, { chars($/) ~ $0 }, :g)

[03:41] <p6eval> niecza v7: OUTPUT«13211311123113112211␤»

[03:41] <sorear> slightly cleaner

[03:41] <sorear> not much

[03:41] <sorear> oh, and it can be written using *.subst, no need for a block

[03:41] <TimToady> http://rosettacode.org/wiki/Look-and-say_sequence

[03:45] <LaVolta> rakudo: my @lns := ('1', *.comb(/(.)$0*/).map({ .chars ~ .substr(0,1) }).join ... *); .say for @lns[^10];

[03:45] <p6eval> rakudo 1fcb14: OUTPUT«1␤11␤21␤1211␤111221␤312211␤13112221␤1113213211␤31131211131221␤13211311123113112211␤»

[03:45] <LaVolta> but...my repl just hangin up there

[03:45] <LaVolta> :-P

[03:48] *** stephanepayrard_ left
[03:49] *** benabik left
[03:51] *** cognominal joined
[03:53] <colomon> LaVolta: are you trying to do the my @Ins := blah part by itself?

[03:54] <colomon> TimToady: did you just add that look-and-say?  Or did I accidentally make a slightly uglier duplicate of it?

[03:54] *** molaf joined
[03:55] <TimToady> it's been there a while

[03:55] <colomon> RC++

[04:01] *** JimmyZ joined
[04:01] * JimmyZ wonders why planetsix is not updated

[04:02] <TimToady> it's a stuck first article; scroll down to the next one

[04:03] <sorear> the first article is dated July 6 2011.  Nothing newer has been posted.

[04:04] *** benabik joined
[04:07] <JimmyZ> it doesn't fetch http://pmthium.com/feed/ ?

[04:18] *** satyavvd joined
[04:23] *** satyavvd left
[04:23] *** mberends joined
[04:24] *** kaare_ joined
[04:26] *** satyavvd joined
[04:27] *** sorear_ joined
[04:28] *** barika joined
[04:31] *** xinming joined
[04:35] *** khisanth_ joined
[04:37] *** khisanth_ is now known as Khisanth

[04:43] *** lue left
[04:49] *** sorear_ is now known as sorear

[04:53] <JimmyZ> what's difference between space and whitespace?

[04:53] <Eevee> maybe your terminal background is black

[04:53] <Eevee> (kidding)

[04:54] <JimmyZ> I ask it because S02 use them

[04:54] <benabik> Whitespace is a category, space is a member of it.

[04:54] <Eevee> I assume "space" means the single character and "whitespace" is any printable blank character

[04:55] *** noganex joined
[04:55] <LaVolta> maybe use the word 'space bar' should make this clearer

[04:55] <Eevee> that's a key, not a character

[04:55] <LaVolta> sorry...what i mean is the char you type use the bar

[04:56] <LaVolta> my bad

[04:56] * sorear sleep

[04:57] *** noganex_ left
[04:57] <mberends> .u space

[04:57] <phenny> U+0020 SPACE ( )

[05:00] <JimmyZ> .u whitespace

[05:00] <phenny> JimmyZ: Sorry, no results for 'whitespace'.

[05:11] <mberends> whitespace can also be a sequence of non printing characters. Of course Unicode goes to town of such a topic http://en.wikipedia.org/wiki/Space_%28punctuation%29#Spaces_in_Unicode

[05:16] <JimmyZ> I see

[05:17] <JimmyZ> phenny: tell LaVolta test

[05:17] <phenny> JimmyZ: I'll pass that on when LaVolta is around.

[05:17] *** koban joined
[05:22] *** birdwindupbird joined
[05:23] *** molaf left
[05:30] <dalek> mu: 83bc2a9 | jimmy++ | docs/zh-cn/syn/S02-bits.pod:

[05:30] <dalek> mu: reset author

[05:30] <dalek> mu: review: https://github.com/perl6/mu/commit/83bc2a999d

[05:30] <dalek> mu: aed13e3 | jimmy++ | misc/dalek-conf.json:

[05:30] <dalek> mu: Merge branch 'master' of github.com:perl6/mu

[05:30] <dalek> mu: review: https://github.com/perl6/mu/commit/aed13e3f75

[05:30] <JimmyZ> ops, wrong commit message

[05:31] <JimmyZ> should be 'revise wordings'

[05:46] *** mberends left
[05:48] <moritz> nom: class G { ... }; class G { }

[05:48] <p6eval> nom:  ( no output )

[05:48] <moritz> nom: use Test; eval_lives_ok 'class G { ... }; class G { }', 'can redeclare stub classes';

[05:48] <p6eval> nom: OUTPUT«not ok 1 - can redeclare stub classes␤»

[05:48] <moritz> nom: use Test; eval_lives_ok 'class G { ... }; class G { }', 'can redeclare stub classes'; say $!

[05:48] <p6eval> nom: OUTPUT«not ok 1 - can redeclare stub classes␤Null PMC access in find_method('gist')␤current instr.: 'say' pc 222615 (src/gen/CORE.setting.pir:58683) (:2341)␤»

[05:49] <moritz> nom: use Test; eval 'class G { ... }; class G { }',  say $!

[05:49] <p6eval> nom: OUTPUT«Null PMC access in find_method('gist')␤current instr.: 'say' pc 222615 (src/gen/CORE.setting.pir:58683) (:2341)␤»

[05:49] <dalek> mu: 772adf2 | jimmy++ | docs/zh-cn/syn/S02-bits.pod:

[05:49] <dalek> mu: remove plural from chinese

[05:49] <dalek> mu: review: https://github.com/perl6/mu/commit/772adf23f9

[05:50] <moritz> nom: $_ = "Hellow World"; my $x = .uc;

[05:50] <p6eval> nom: OUTPUT«Rebuild in progress␤»

[05:54] <dalek> evalbot: 2bc5c05 | moritz++ | build-scripts/rebuild-nom.sh:

[05:54] <dalek> evalbot: optimize nom rebuild a bit

[05:54] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/2bc5c05ef1

[05:54] <moritz> nom: $_ = "Hellow World"; my $x = .uc;

[05:54] <p6eval> nom: OUTPUT«Segmentation fault␤»

[05:54] <moritz> nom: $_ = "Hellow World"; my $x = .uc;

[05:54] <p6eval> nom: OUTPUT«Segmentation fault␤»

[05:55] <moritz> nom: $_ = "Hellow World"; .say

[05:55] <p6eval> nom: OUTPUT«Segmentation fault␤»

[05:55] <JimmyZ> didn't update parrot?

[05:55] <moritz> seems that automagic access to $_ isn't all that robust yet

[06:02] *** wamba joined
[06:07] *** kfo joined
[06:08] <moritz> nom: $_ := "Hellow World"; .say

[06:08] <p6eval> nom: OUTPUT«Cannot use bind operator with this LHS at line 1, near " \"Hellow W"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23508 (src/stage2/gen/NQPHLL.pir:6300)␤»

[06:10] <moritz> nom: say List ~~ Positional

[06:10] <p6eval> nom: OUTPUT«No method cache and no find_method method in meta-object␤current instr.: '_block1002' pc 28 ((file unknown):0) (:1)␤»

[06:10] *** kfo_ left
[06:12] *** kfo left
[06:13] <dalek> rakudo/nom: f4cf99c | moritz++ | / (2 files):

[06:13] <dalek> rakudo/nom: four more passing test files, note a fail in NOMMAP

[06:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f4cf99c456

[06:15] *** _jaldhar_ left
[06:16] *** _jaldhar_ joined
[06:22] *** koban left
[06:23] *** arnsholt left
[06:25] *** kanishka joined
[06:27] *** arnsholt joined
[06:29] *** Mowah joined
[06:31] *** wtw joined
[06:34] *** wamba left
[06:34] *** wamba joined
[06:34] *** daxim joined
[06:52] *** kanishka left
[07:08] *** kanishka joined
[07:18] <dalek> mu: a2cc05a | jimmy++ | docs/zh-cn/syn/S02-bits.pod:

[07:18] <dalek> mu: revise omissive wordings

[07:18] <dalek> mu: review: https://github.com/perl6/mu/commit/a2cc05a4c8

[07:25] *** kanishka left
[07:37] *** mj41 joined
[07:40] *** kanishka joined
[07:41] *** arnsholt left
[07:46] *** Chillance left
[07:46] *** arnsholt joined
[07:51] *** JimmyZ_ joined
[07:55] *** JimmyZ left
[07:55] *** JimmyZ_ is now known as JimmyZ

[07:57] *** daniel-s joined
[07:57] *** arnsholt left
[08:02] *** bkolera joined
[08:02] *** arnsholt joined
[08:04] *** mberends joined
[08:08] *** bkolera left
[08:26] *** kanishka left
[08:29] *** thou left
[08:29] *** koban joined
[08:30] *** birdwindupbird left
[08:30] *** bkolera joined
[08:31] *** birdwindupbird joined
[08:40] *** dakkar joined
[08:46] *** sjn is now known as SJN

[08:47] *** cooper left
[08:56] *** tzhs joined
[08:58] <moritz> http://developer.android.com/reference/android/util/Log.html#wtf(java.lang.String,%20java.lang.Throwable) 

[08:58] <moritz> the wtf, "What a Terrible Failure" log method :-)

[09:05] *** huf joined
[09:23] *** SJN is now known as sjn

[09:27] *** woosley left
[09:41] <JimmyZ> what's the wtf? :)

[09:41] <daniel-s> lol

[09:41] *** donri joined
[09:44] *** MayDaniel joined
[09:44] *** MayDaniel left
[09:44] *** MayDaniel joined
[09:49] *** MayDaniel left
[09:53] <jnthn> moritz: ($_) see a few tasks down in nommap :)

[09:54] <moritz> jnthn: ah, I was too eager

[09:54] <moritz> jnthn: I guess it's what makes many of those spectests fail

[09:56] <jnthn> moritz: Yeah, I started fixing it last night, but ETOOSLEEPY

[09:57] *** bkolera left
[10:02] * moritz is really happy with nom progress

[10:03] *** JimmyZ left
[10:05] *** JimmyZ joined
[10:15] *** LaVolta left
[10:20] *** jesk is now known as JESK

[10:21] *** _jaldhar_ left
[10:21] *** _jaldhar_ joined
[10:27] *** timbunce joined
[10:28] *** kaare_ left
[10:51] *** lichtkind joined
[10:55] <flussence> rakudo: say 10.fmt('%d %1$x');

[10:55] <p6eval> rakudo 1fcb14: OUTPUT«Not enough arguments supplied for the given format string␤  in 'Cool::sprintf' at line 2779:src/gen/core.pm␤  in 'sprintf' at line 2813:src/gen/core.pm␤  in 'Cool::fmt' at line 2601:src/gen/core.pm␤  in main program body at line 22:/tmp/m4nyPZtr3l␤»

[10:56] <flussence> rakudo: say sprintf('%d %1$x', 10);

[10:56] <p6eval> rakudo 1fcb14: OUTPUT«Not enough arguments supplied for the given format string␤  in 'Cool::sprintf' at line 2779:src/gen/core.pm␤  in 'sprintf' at line 2813:src/gen/core.pm␤  in main program body at line 22:/tmp/_84xx89ynV␤»

[10:56] <flussence> hm

[10:57] <flussence> .oO( one of these days I'm gonna fix sprintf.t... )

[10:58] <pmichaud> what should that do, ooc?

[10:58] <flussence> same as perl5/C, 1$ reuses the first arg

[10:58] <pmichaud> okay.

[10:59] <flussence> S32/Str:420 mentions it

[11:00] <flussence> (I wonder if I can take that grammar and use it for coverage testing...)

[11:11] <dalek> rakudo/nom: 2630e16 | pmichaud++ | src/core/ (4 files):

[11:11] <dalek> rakudo/nom: Improve handling of .reify(*) and infinite lists.

[11:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2630e16c40

[11:11] <dalek> rakudo/nom: b1d9956 | pmichaud++ | src/core/ (4 files):

[11:11] <dalek> rakudo/nom: Implement array slices, including autotrimming on infinite indexes.

[11:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b1d9956b64

[11:11] <dalek> rakudo/nom: c3d66c7 | pmichaud++ | src/core/ (2 files):

[11:11] <dalek> rakudo/nom: Add WhateverCode slicing to postcircumfix:<[ ]>.

[11:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c3d66c7e53

[11:12] *** molaf joined
[11:12] <jnthn> \o/ pmichaud++

[11:13] <pmichaud> nom:  say 'building'?

[11:13] <p6eval> nom: OUTPUT«Confused at line 1, near "say 'build"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23508 (src/stage2/gen/NQPHLL.pir:6300)␤»

[11:13] <pmichaud> nom:  my @a = 1..50;  say @a[10..*];  # no longer infinite heat death

[11:13] <p6eval> nom: OUTPUT«ListIter<36544736>␤»

[11:13] <pmichaud> well, once it updates :)

[11:14] *** tokuhirom joined
[11:15] <pmichaud> nom:  my @a = 1..50;  say @a[10..*];  # no longer infinite heat death yet?

[11:15] <p6eval> nom: OUTPUT«ListIter<49426656>␤»

[11:15] <pmichaud> evalbot rebuild nom

[11:15] <p6eval> OK (started asyncronously)

[11:16] *** kanishka joined
[11:18] *** icwiener joined
[11:18] *** mtk joined
[11:19] *** mtk left
[11:19] *** mtk joined
[11:22] *** DarthGandalf left
[11:22] <pmichaud> nom:  my @a = 1..50;  say @a[10..*];  # no longer infinite heat death yet?

[11:22] <p6eval> nom: OUTPUT«11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50␤»

[11:22] <pmichaud> \o/

[11:23] <pmichaud> my @a = 0..50;   say @a[1,4,7...*]

[11:23] <pmichaud> nom: my @a = 0..50;   say @a[1,4,7...*]

[11:23] <p6eval> nom: OUTPUT«1 4 7 10 13 16 19 22 25 28 31 34 37 40 43 46 49␤»

[11:24] <pmichaud> nom: my @a = 'a'...'z';   say @a[1,4,7...*]

[11:24] <p6eval> nom: OUTPUT«b e h k n q t w z␤»

[11:24] <pmichaud> wfm

[11:25] <pmichaud> oh, and also:

[11:25] <pmichaud> nom:  my @a = 'a'...'z';  say @a[*-2]

[11:25] <p6eval> nom: OUTPUT«y␤»

[11:25] *** Katibe left
[11:25] <moritz> nom: my @a = 1..*; say @a[2..*].[3]

[11:26] <p6eval> nom: OUTPUT«(timeout)»

[11:26] <pmichaud> well, if you *want* it to blow up :)

[11:26] <moritz> :-)

[11:26] <pmichaud> array slices aren't lazy (yet?)

[11:26] * moritz plays masak

[11:26] <pmichaud> I'm not sure they should be, given that a slice is supposed to return a Parcel

[11:26] *** REPLeffect left
[11:27] <moritz> and parcels are supposed to be eager?

[11:27] <pmichaud> well, immutable.  the slice should be a parcel of the individual elements sliced, I think.

[11:27] <pmichaud> so that implies some level of eagerness.

[11:28] *** Katibe joined
[11:28] <moritz> aren't argument lists passed as parcels (at least notionally)?

[11:28] <pmichaud> sure

[11:28] <pmichaud> a parcel can contain lazy elements

[11:28] <moritz> hm, ok

[11:28] <pmichaud> I'm just not sure that a slice should have lazy elements in it.

[11:29] * moritz waves his hands vaguely and says "just make it work" :-)

[11:30] *** REPLeffect joined
[11:32] *** molaf left
[11:33] *** DarthGandalf joined
[11:35] <pmichaud> anyway, I can do lazy slices of infinite lists, if we decide that's needed.

[11:35] <pmichaud> time for a nap -- bbl

[11:38] *** kanishka left
[11:38] *** kaare_ joined
[11:43] *** kfo joined
[11:47] *** am0c joined
[11:47] *** SHODAN joined
[11:51] *** satyavvd left
[11:54] *** cognominal_ joined
[11:58] *** cognominal left
[12:02] *** jedai_ joined
[12:05] *** jedai left
[12:11] *** orafu left
[12:13] *** orafu joined
[12:23] *** bluescreen10 joined
[12:24] *** Katibe left
[12:27] *** Katibe joined
[12:30] *** dalek left
[12:31] *** Katibe left
[12:33] <lichtkind> dalek is dead!!!

[12:34] *** Katibe joined
[12:34] <Trashlord> oh no!!!

[12:34] <moritz> ... long live dalek!

[12:35] <mberends> he wasn't dead, he was just resting

[12:36] *** p6eval left
[12:36] <lichtkind> he got exterminated :)

[12:36] *** Katibe left
[12:38] *** Katibe joined
[12:54] *** geekosaur left
[12:54] *** benabik left
[12:57] *** geekosaur joined
[13:01] *** xinming left
[13:02] *** xinming joined
[13:04] *** wolfram_ joined
[13:04] *** dalek joined
[13:04] *** ChanServ sets mode: +v dalek

[13:05] *** wolfram_ left
[13:05] *** Holy_Cow joined
[13:06] *** Holy_Cow left
[13:09] *** dalek left
[13:26] *** dalek joined
[13:26] *** ChanServ sets mode: +v dalek

[13:29] *** p6eval joined
[13:29] *** ChanServ sets mode: +v p6eval

[13:36] *** woosley joined
[13:37] <JimmyZ> \o jnthn

[13:38] <moritz> long live dalek! long live p6eval!

[13:44] <jnthn> o/ JimmyZ 

[13:45] <jnthn> JimmyZ: Flying in 5 hours or so. :)

[13:46] <JimmyZ> Did Mr Xu contact you?

[13:47] <jnthn> JimmyZ: Yes, and Qiang also. :)

[13:48] <JimmyZ> Oh, OK

[13:49] * JimmyZ doesn't know Qiang

[13:50] <moritz> nom: sub f { fail 'foo' }; say f.WHAT

[13:50] <p6eval> nom: OUTPUT«Failure()␤»

[13:50] <moritz> nom: sub f { fail 'foo' }; say f.^methods

[13:50] <p6eval> nom: OUTPUT«new BUILD defined Bool Int Num Str eager flat list elems infinite grep join map min postcircumfix:<[ ]> postcircumfix:<{ }> new ACCEPTS WHERE Bool defined CREATE bless Str Stringy item say gist perl DUMP DUMP-ID isa does dispatch:<var> dispatch:<::> dispatch:<.^> dispatch:<.…

[13:51] <moritz> nom: sub f { fail 'foo' }; say f.^methods(:local)

[13:51] <p6eval> nom: OUTPUT«new BUILD defined Bool Int Num Str␤»

[13:51] <jnthn> Introspekshun. We has it. :)

[13:51] <moritz> nom: say Failure.defined

[13:51] <p6eval> nom: OUTPUT«Cannot access attributes in a type object␤current instr.: 'defined' pc 260475 (src/gen/CORE.setting.pir:75972) (:2705)␤»

[13:52] <JimmyZ> that's great

[13:52] <moritz> I guess a whole lot of methods actually want :D

[13:52] <moritz> on the invocant

[13:53] <moritz> I kinda think that should be the default

[13:53] <jnthn> moritz: Note that :D will _not_ call .defined

[13:53] <moritz> jnthn: yes, that's kinda the point :-)

[13:53] <jnthn> moritz: Thus why we probably chould rename it to :C (concrete)

[13:53] <jnthn> moritz: oh, I see what you're getting at

[13:53] <moritz> jnthn: nonetheless literal Failure.defined shouldn't fail like it does now

[13:53] <jnthn> :)

[13:54] <jnthn> yeah

[13:54] <moritz> nom: say Any.^methods(:local)

[13:54] <p6eval> nom: OUTPUT«eager flat list elems infinite grep join map min postcircumfix:<[ ]> postcircumfix:<{ }>␤»

[13:54] <moritz> nom: say Mu.^methods(:local)

[13:54] <p6eval> nom: OUTPUT«new ACCEPTS WHERE Bool defined CREATE bless Str Stringy item say gist perl DUMP DUMP-ID isa does dispatch:<var> dispatch:<::> dispatch:<.^> dispatch:<.=> dispatch:<.?> dispatch:<.+> dispatch:<.*>␤»

[13:55] <JimmyZ> nom: (1..*).eager.say

[13:55] <p6eval> nom: OUTPUT«...␤»

[13:55] <moritz> jnthn: should method defined() in Mu be a multi (+ has a proto), and then Failure.defined just adds a Failure:D multi?

[13:55] <jnthn> moritz: That'd make sense.

[13:55] *** Moukeddar joined
[13:56] <JimmyZ> nom: (1...*).say

[13:56] <p6eval> nom: OUTPUT«... ␤»

[13:56] <JimmyZ> nom: (1..*).say

[13:56] <p6eval> nom: OUTPUT«1..Inf␤»

[13:56] <moritz> it's kinda disappointing that (1...*) does not include the 1

[13:57] <moritz> though I see why that happens

[13:57] *** Trashlord left
[13:58] <JimmyZ> I think that's a bug

[14:01] <jnthn> It's better than a hang, I guess...

[14:01] *** colomon left
[14:02] <jnthn> But could be more awesome.

[14:02] <moritz> ouch

[14:02] <moritz> my patch makes parrot out-of-mem during compilation

[14:03] <moritz> ... and I have 4GB on that machine, no ulimit

[14:03] <moritz> ah no

[14:03] * moritz should read error messages

[14:03] <moritz> Zero-byte allocation not allowed in mem_sys_allocate_zeroedParrot VM: PANIC: Out of mem!

[14:03] <moritz> C file src/gc/alloc_memory.c, line 100

[14:03] <jnthn> Whoa.

[14:03] * jnthn wonders how that was triggered.

[14:04] <jnthn> Patch?

[14:04] <moritz> jnthn: http://moritz.faui2k3.org/tmp/foobar.patch

[14:04] * mberends passes moritz a zero-length array of zero-filled bytes

[14:05] *** colomon joined
[14:08] * colomon is in Ingy's talk (yapc::na)

[14:08] <moritz> what's the talk about?

[14:08] <colomon> Acmeism

[14:09] <moritz> some crazy new module?

[14:09] <daxim> worse

[14:09] <colomon> "Postmodern Module Packaging"

[14:09] *** PacoLinux joined
[14:10] <jnthn> moritz: Oddness, it looks like you add proto method Num(|$) {*}

[14:10] <jnthn> twice

[14:10] <jnthn> where once should be proto method Str

[14:10] <jnthn> But I'm also confused why it's not complaining about that.

[14:10] <moritz> ah, I see my error

[14:10] <colomon> moritz: http://cdent.org/ -- supports Perl 6 but not Perl so far?!!!

[14:11] <moritz> colomon: Perl is no. 1 on that last

[14:11] <colomon> moritz:  for output

[14:11] <colomon> moritz: look at the third paragraph

[14:12] <moritz> ah

[14:12] <moritz> probably because p5's OO is so quirky

[14:12] <moritz> jnthn: even if I s/Num/Str/ in the second proto, I get the same error

[14:13] <jnthn> moritz: Any chance you can catch it under the debugger?

[14:13] <jnthn> moritz: And get a (c is fine) stack trace?

[14:14] * moritz tries

[14:14] <moritz> urks

[14:14] <jnthn> moritz: Is there anywhere that you have a proto with no multis to go with it?

[14:14] <moritz> it runs to an exit()

[14:15] <jnthn> though, I thought I fixed taht one.

[14:15] <moritz> so I don't get a bt easily :/

[14:15] <moritz> not that I can see

[14:18] *** benabik joined
[14:18] * moritz builds a debug parrot

[14:20] <jnthn> moritz: OK. Then I suspect either that helps, or we're down to trying to golf.

[14:20] * jnthn packing at the moment, though :)

[14:26] *** odrm left
[14:29] * moritz waits for the nqp build, and for new MoR chapters

[14:33] *** zby_home_ joined
[14:34] *** Mowah left
[14:35] <moritz> jnthn: http://moritz.faui2k3.org/tmp/backtrace.txt

[14:36] <moritz> that does look like a multi without candidates

[14:36] <jnthn> moritz: yeah, darn, thought I fixed that issue

[14:36] <moritz> nom: say Failure ~~ Mu

[14:36] <p6eval> nom: OUTPUT«Bool::True␤»

[14:37] <jnthn> moritz: From further down the stack trace, it's that somewhere there's a proto for defined with no candidates, it seems

[14:38] *** JimmyZ_ joined
[14:38] <moritz> jnthn: maybe the MOP uses defined somewhere while installing the candidate for defined() ?

[14:39] <jnthn> moritz: Hm, maybe, though doesn't seem too likely

[14:40] *** JimmyZ left
[14:40] *** JimmyZ_ is now known as JimmyZ

[14:41] *** mberends left
[14:42] <flussence> .oO( oh no, I've finally written perl5 code so horrible even vim can't highlight it right... )

[14:42] <jnthn> moritz: Patching the zero-byte, that'll give a better idea.

[14:43] <moritz> fwiw 1) the changes in Failure.pm are irrelevant for triggering the bug 2) it only complains if I apply the changes to .defined. .Bool is fine as proto+multi

[14:45] <moritz> 3) compiling the setting on a debug-build parrot is dog slow

[14:45] *** koban left
[14:46] *** tokuhir__ joined
[14:47] <jnthn> Maybe "a debug-build parrot is dog slow" is also generally true :)

[14:47] <benabik> jnthn: No maybes about it.

[14:50] *** tokuhirom left
[14:53] *** kanishka joined
[14:54] *** tokuhir__ left
[14:55] *** tokuhirom joined
[14:55] <pmichaud> good morning, #perl6

[14:55] *** woosley left
[14:56] <benabik> o/ pmichaud 

[14:56] <moritz> good am, pm

[14:57] <slavik> and inbetweens?

[14:58] *** daxim left
[14:58] <pmichaud> ...we could also get defined to work without having to make it a multi.

[14:58] <pmichaud> ...we could also leave it as non-multi in Mu, and just make it multi in Failure

[14:58] <jnthn> moritz: Patched the zero-alloc bug at lesat

[14:58] <moritz> that's what I'm doing as a workaround right now

[14:59] <dalek> rakudo/nom: be2aea9 | jonathan++ | src/binder/multidispatch.c:

[14:59] <dalek> rakudo/nom: Avoid zero memory allocations for protos with no multi candidates.

[14:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/be2aea9bb4

[14:59] <moritz> (not using a multi at all)

[14:59] <jnthn> Would be curious to know what's going on.

[14:59] <jnthn> Or, what it is that calls defined

[14:59] <dalek> rakudo/nom: 2c86d40 | moritz++ | src/core/ (2 files):

[14:59] <dalek> rakudo/nom: fix Failure methods on the type object

[14:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2c86d40362

[15:01] *** thou joined
[15:02] <pmichaud> nom:  say Mu.Int

[15:02] <p6eval> nom: OUTPUT«Method 'Int' not found for invocant of class 'Mu'␤current instr.: '_block1002' pc 75 ((file unknown):32012038) (:1)␤»

[15:02] <pmichaud> nom:  say Any.Int

[15:02] <p6eval> nom: OUTPUT«Method 'Int' not found for invocant of class 'Any'␤current instr.: '_block1002' pc 75 ((file unknown):70) (:1)␤»

[15:02] <pmichaud> nom:  say Cool.Int

[15:02] <p6eval> nom: OUTPUT«Method 'Int' not found for invocant of class 'Cool'␤current instr.: '_block1002' pc 75 ((file unknown):51672246) (:1)␤»

[15:03] <pmichaud> I don't think we need the multi/proto on Failure.Int/Num/Str

[15:03] <thou> morning, #perl6!

[15:03] <moritz> nom: Failure.Int

[15:03] <p6eval> nom: OUTPUT«Cannot access attributes in a type object␤current instr.: 'Int' pc 260595 (src/gen/CORE.setting.pir:76051) (:2711)␤»

[15:03] <moritz> that is an internal error

[15:03] <pmichaud> just write

[15:03] <moritz> and should never be visible for the user

[15:03] <moritz> jnthn: http://moritz.faui2k3.org/tmp/backtrace2.txt

[15:04] <pmichaud> just eliminate "multi" and leave the rest the same.

[15:04] <moritz> ok

[15:04] <pmichaud> method Int(Failure:D:) { $!handled ?? 0 !! $!exception.rethrow; }

[15:04] <moritz> what about .Bool? same?

[15:04] <moritz> rakudo: say Int.Bool

[15:04] <jnthn> moritz: ah

[15:04] <p6eval> rakudo 1fcb14: OUTPUT«Bool::False␤»

[15:04] <pmichaud> Bool has to be defined on all objects

[15:04] <jnthn> moritz: Yeah, that explains a lot :)

[15:05] <jnthn> It does indeed call .defined

[15:05] <moritz> \o/ I was right, even though I have no clue about the actual code :-)

[15:05] <jnthn> I was wrong, even though I wrote the actual code. :-P

[15:05] <moritz> pmichaud: will do, after commute

[15:05] <pmichaud> moritz++

[15:07] *** spq2 joined
[15:07] * jnthn tries a fix to MultiMethodContainer

[15:07] <jnthn> So we can make defined a multi if we wish

[15:08] *** Moukeddar left
[15:09] *** tzhs left
[15:09] *** dolmen joined
[15:10] <tadzik> exam passed!

[15:10] <benabik> \o/ tadzik 

[15:11] <jnthn> tadzik++ \o/

[15:11] <dalek> rakudo/nom: f6d775d | jonathan++ | src/Perl6/Metamodel/MultiMethodContainer.pm:

[15:11] <dalek> rakudo/nom: Don't rely on .defined in MultiMethodContainer, or we run into fun when adding a multi defined in Mu. :-)

[15:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f6d775da81

[15:11] <benabik> Oh yes. I forgot the ++. tadzik++

[15:14] <pmichaud> fwiw, unless we make :D the default, users are going to see "Cannot access attributes in a type object" on a lot of methods, both for core and non-core classes.

[15:15] * jnthn didn't really consider it an internal error, fwiw

[15:15] <pmichaud> in the core we can add :D to all of the methods... but if we have to do that it starts to feel like :D ought to be the default.

[15:15] <pmichaud> right, I don't think of it as an "internal error" either.

[15:15] <jnthn> Is there a way we can phrase it that makes it more helpful?

[15:19] <pmichaud> not coming up with one at the moment

[15:19] <jnthn> That error at least feels quite searchable for answers :)

[15:20] * jnthn does final bit of travel prep

[15:21] <JimmyZ> jnthn++

[15:21] <pmichaud> jnthn++   # yesterday's nom blog posting

[15:21] * JimmyZ will go to sleep

[15:21] <pmichaud> jnthn: hope I didn't steal your thunder with my blog post :)

[15:22] * JimmyZ didn't see any jnthn++ and pmichaud++ blog posting from planetsix.perl.org

[15:22] *** timbunce left
[15:23] <pmichaud> JimmyZ: they're there now... just need to scroll past masak's post

[15:23] <pmichaud> masak++ has discovered a way to keep top billing for a month or more :)

[15:24] <JimmyZ> oh

[15:27] *** leprevost joined
[15:32] *** am0c left
[15:32] *** ingyfoo is now known as ingy

[15:32] *** zby_home___ joined
[15:33] *** zby_home_ left
[15:33] <ingy> colomon: Perl 6 is a much more regular syntax than Perl 5

[15:33] <ingy> colomon: also native OO

[15:34] <colomon> ingy: still, it really nice to see Perl 6 used for something cool like that

[15:34] <colomon> nice talk, btw

[15:34] <ingy> :)

[15:35] <ingy> ta!

[15:35] * arnsholt wonders what colomon and ingy are talking about

[15:36] <colomon> arnsholt: http://cdent.org/

[15:39] <arnsholt> Oh right, I remember that coming up in the past

[15:40] *** Holy_Cow joined
[15:45] *** am0c joined
[15:50] <ingy> arnsholt: http://cdent.org/examples/hello-world/

[15:50] <ingy> that's pretty much the full functionality at this point... :/

[15:51] * jnthn remembers just in time to replace the fuse in the one and only travel adapter he owns that'll let him plug his laptop in in China. :)

[15:51] <ingy> but I have plans to add assignment, conditional and loops in the next month

[15:52] <dukeleto> ingy: i would really like to see that

[15:52] <ingy> dukeleto is everywhere

[15:53] <dukeleto> ingy: that is because I can travel ..... without moving.

[15:53] <ingy> well then I could implement CPAN/PyPI/* package

[15:53] * dukeleto ponders writing Spice.pm

[15:54] <ingy> dukeleto: do you have pm6 modules yet?

[15:54] <ingy> I forget where they live

[15:54] <dukeleto> ingy: i am ashamed to say no. I need to fix that at YAPC::NA

[15:54] <ingy> and I actually have some

[15:54] <dukeleto> ingy: modules.perl6.org ?

[15:54] *** spq2 left
[15:56] *** JimmyZ left
[16:00] *** colomon left
[16:01] *** tokuhir__ joined
[16:05] *** tokuhirom left
[16:08] *** colomon joined
[16:08] *** benabik left
[16:09] *** yves left
[16:11] *** colomon_ joined
[16:11] *** colomon left
[16:11] *** colomon_ is now known as colomon

[16:12] *** tokuhir__ left
[16:12] *** tokuhirom joined
[16:15] *** molaf joined
[16:15] *** molaf left
[16:16] *** yves joined
[16:18] *** mj41 left
[16:21] <jnthn> airport, bye bye o/

[16:21] <colomon> \o

[16:23] <pmichaud> jnthn: good travels!

[16:25] <jnthn> thanks! back in 15ish hours, provided hotel wifi is good ;)

[16:25] <pmichaud> ...from behind the great firewall?  ;-)

[16:25] <pmichaud> this could be interesting.  :)

[16:27] *** am0c left
[16:31] *** Trashlord joined
[16:40] *** tokuhir__ joined
[16:43] *** tokuhirom left
[16:46] *** cdarroch joined
[16:46] *** cdarroch left
[16:46] *** cdarroch joined
[16:50] *** dolmen left
[16:52] *** birdwindupbird left
[17:03] *** ashleydev joined
[17:04] *** wolfman2000 left
[17:05] <sorear> good * #perl6

[17:05] <colomon> o/

[17:05] <sorear> pmichaud: JimmyZ has no issues with IRC behind "GFW"

[17:05] *** dakkar left
[17:09] *** molaf joined
[17:14] *** masak joined
[17:14] <masak> ohi #p6

[17:14] <colomon> \o

[17:16] *** nsh_ joined
[17:17] *** nsh left
[17:17] *** DarthGandalf left
[17:19] *** colomon left
[17:20] *** DarthGandalf joined
[17:21] *** benabik joined
[17:22] *** colomon joined
[17:22] <sorear> masak: hi

[17:24] *** tokuhir__ left
[17:24] *** tokuhirom joined
[17:24] *** bluescreen10 left
[17:25] *** bluescreen10 joined
[17:26] <masak> sorear: have you seen Perlude? http://search.cpan.org/~marcc/Perlude-0.42/lib/Perlude.pm

[17:26] <masak> it was rewritten last weekend, so that's officially an Old Version, I guess. newest one is here: https://github.com/eiro/p5-perlude

[17:29] <sorear> never heard of it.  cute.

[17:29] *** cooper joined
[17:29] <moritz> sorear: 'make test' fails for me in niecza

[17:29] *** cooper left
[17:29] *** cooper joined
[17:29] *** cooper left
[17:30] <moritz> mono run/Niecza.exe -c test.pl

[17:30] <moritz> Unhandled exception: Unable to resolve method shift in class Str at  line 0 (ExitRunloop @ 0)  at /home/moritz/p6/niecza/src/NAMOutput.pm6 line 0 (NAMOutput C19_ANON @ 0)  at  line 0 (KERNEL map @ 2) 

[17:30] <moritz> ... plus lots for of backtres

[17:30] <moritz> *backtrace

[17:30] <moritz> I get the same error for the spectests too

[17:36] <masak> "backtrès" could be a portmonteau for "a lot of backtrace" :)

[17:37] <colomon> moritz: I was getting that too.  git clone from scratch and rebuilding cured it.  :)

[17:38] * moritz will do a 'git clean -xdf' instead

[17:44] *** colomon left
[17:48] *** colomon joined
[17:50] *** Rotwang joined
[17:50] <Rotwang> hello

[17:50] <diakopter> howdy

[17:50] <cognominal_> masak++ # but one says portmanteau in English (from the french porte-manteau) or mot-valise in French.

[17:50] *** Holy_Cow left
[17:52] *** cooper joined
[17:52] *** cooper left
[17:54] *** cooper joined
[17:57] <masak> cognominal_: ah; thanks

[17:59] <dalek> rakudo/nom: 0ab6112 | pmichaud++ | src/core/ (3 files):

[17:59] <dalek> rakudo/nom: Add hash slicing, .[*], and .{*}.

[17:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0ab6112372

[18:02] <colomon> TimToady: why have the hash produce an index into the packed int value array?  wouldn't it be more efficient to just have the hash produce the int value itself?

[18:02] <TimToady> troo

[18:02] <colomon> (discussing current YAPC talk, sorry everyone else)

[18:03] <TimToady> was thinking of the frozen keys to mutable int array

[18:03] <colomon> you could still have mutable ints as values, no?

[18:03] <colomon> just no related int array anywhere

[18:04] <TimToady> not if you've calculated a perfect hash function with an immutable key -> int mapping

[18:04] <colomon> (maybe not, I admit it's been a long time since I looked at perfect hash code)

[18:04] <colomon> fair enough

[18:04] <TimToady> you'd have to recalculate the hash function every time you muted :)

[18:05] <eiro> hello world 

[18:05] <benabik> Hash shouldn't depend on value, just key.

[18:05] <colomon> so, p6 enums could be implemented with a perfect hash and immutable key, no?

[18:05] <TimToady> that's how they're defined

[18:05] <eiro> is there a keyword associated to =<> in perl6 ? 

[18:06] <nine> I got the OK from my university to do some work on rakudo for my bachelor paper, so now I need to get to the details of what I'm gonna do. Someone suggested S17 as needing some attention, but I'm not sure what exactly I could do and how to go on about it.

[18:06] <benabik> nine++

[18:08] *** Chillance joined
[18:08] *** dukeleto left
[18:09] *** dukeleto joined
[18:10] <colomon> eiro: what are you trying to do?  

[18:10] <colomon> eiro: or perhaps, do you mean <=>   ?

[18:12] <TimToady> std: $_ = <>;

[18:12] <eiro> colomon, i know that perl6 have some operators that can be called by function names 

[18:12] <p6eval> std 37a0cdd: OUTPUT«===SORRY!===␤Unsupported use of <>; in Perl 6 please use lines() to read input,␤  or ('') to represent the null string,␤  or () to represent Nil at /tmp/4vdsDesXjX line 1:␤------> $_ = <⏏>;␤Parse failed␤FAILED 00:01 120m␤»…

[18:12] <TimToady> eiro, is that what you mean? ^^

[18:12] <TimToady> or are you asking about infix:<=> ?

[18:12] <eiro> no ... 

[18:13] <colomon> eiro: all perl6 operators have a function name: for instance, you can call $a + $b using infix:<+>($a, $b)

[18:13] <eiro> sorry guys: i have to introduce the pb:

[18:13] <colomon> rakudo: say infix:<+>(4, 5)

[18:13] <p6eval> rakudo 1fcb14: OUTPUT«9␤»

[18:14] <eiro> we wrote Perlude (some kind of functionnal prelude in perl) and we have implementations of some lazy perl6 operators 

[18:14] <eiro> but we can't overload anything: everything is functions 

[18:14] <nine> Can someone help me getting started with defining the topic for my paper and how to start developing?

[18:15] <eiro> we decided that when a function exists in perl6 or haskell, we steal the name 

[18:15] <eiro> i'm pretty sure that long time ago, i saw a perl6 function that takes a filename and returns a lazy list 

[18:15] <colomon> eiro: lines

[18:16] <TimToady> except lines doesn't take a filename anymore

[18:16] <eiro> cool! so we made a good choice :)

[18:16] <TimToady> just an IO

[18:16] <colomon> TimToady: lines($filename) doesn't work?

[18:16] <TimToady> not supposed to

[18:16] <eiro> TimToady, so do you have a f :: Path -> IO ? 

[18:16] <benabik> $filename.IO.lines?

[18:16] <TimToady> lines($text) splits the text into lines

[18:16] <colomon> we need to get stuff sorted so we can actually implement it 

[18:17] <colomon> rakudo

[18:17] <colomon> ;

[18:17] <TimToady> nine: someone can help with that

[18:17] <colomon>  rakudo: say lines("foo")

[18:17] <p6eval> rakudo 1fcb14: OUTPUT«Operation not permitted in safe mode␤  in 'Safe::forbidden' at line 2:/tmp/Vj_2VddG3U␤  in 'lines' at line 5932:src/gen/core.pm␤  in main program body at line 22:/tmp/Vj_2VddG3U␤»

[18:17] <TimToady> awwaiid just did a talk on similar topics in p5

[18:17] <colomon> rakudo: say "foo".lines()

[18:17] <p6eval> rakudo 1fcb14: OUTPUT«foo␤»

[18:17] <eiro> ooohhh .... so we have a pb there: this would be a big difference between perlude and perl6 lines

[18:17] <colomon> back soon

[18:17] *** colomon left
[18:18] <TimToady> rakudo: say "foo\nbar\n".lines[1]

[18:18] <p6eval> rakudo 1fcb14: OUTPUT«bar␤»

[18:18] <TimToady> rakudo: say lines("foo\nbar\n")[0]

[18:18] <p6eval> rakudo 1fcb14: OUTPUT«Operation not permitted in safe mode␤  in 'Safe::forbidden' at line 2:/tmp/T5pL75QG0r␤  in 'lines' at line 5932:src/gen/core.pm␤  in main program body at line 22:/tmp/T5pL75QG0r␤»

[18:18] <TimToady> rakudo has .lines right but lines() wrong

[18:18] <pmichaud> rakudo is still under the old interpretation, I think.

[18:18] <pmichaud> spectests welcome :)

[18:19] <eiro> well ... TimToady this is a method for strings when "our" lines is more than a keyword

[18:19] <nine> TimToady: any idea who that someone might be? :)

[18:19] * eiro tests lines in perl6 

[18:20] <TimToady> a lot of us are embedded in YAPC::NA at the moment, so a bit distracted

[18:20] *** TSa joined
[18:20] *** colomon joined
[18:21] <TimToady> but as I say, awwaiid has been thinking about these things already, and others of us have a few ideas too

[18:21] *** mberends joined
[18:22] <nine> TimToady: ah, didn't recognize this as an answer for me. So I'll just ask him.

[18:22] <eiro> yapc::eu is comming. i'm really excited to give my first talk there 

[18:25] <masak> \o/

[18:25] <eiro> \o/ masak

[18:26] <eiro> fpw'11 was awesome! the best conference i attended to. ever!

[18:29] <masak> it was very good.

[18:29] <masak> hard to say why, really :)

[18:30] <pmichaud> #phasers in 30

[18:30] <colomon> pmichaud++

[18:30] <pmichaud> Keep those cards and letters coming in, folks.  :-)

[18:32] <eiro> haha .. my guess is: funny people, funny talks, funny ideas, funny hackathlon :)

[18:33] <eiro> masak, are you in contact with kivutar about the panda binding ? 

[18:33] <eiro> it would be great to promote perl6 as a game dev. vm 

[18:35] <[Coke]> can rakudo/nom be built with parrot/master ?

[18:35] <pmichaud> should be able to do so, yes.

[18:35] <pmichaud> perl Configure.pl --gen-parrot=master

[18:37] *** Moukeddar joined
[18:38] <[Coke]> Note: checking out '2011.06-7-g342cd53'.

[18:38] <[Coke]> ?

[18:38] <pmichaud> that seems wrongish.

[18:38] * pmichaud tries.

[18:39] <[Coke]> big warning that I'm now in a detached HEAD state.

[18:39] <pmichaud> that happens frequently, yes.

[18:39] <pmichaud> although it probably shouldn't with --gen-parrot=master

[18:39] <pmichaud> trying it locally

[18:39] <benabik> Parrot master is d099f

[18:39] <[Coke]> looks like that warning was for NQP - is it checking that out too?

[18:40] <pmichaud> NQP is supposed to honor the --gen-parrot flag also.

[18:40] <[Coke]> (and does it need a version of nqp outside of what's in parrot?)

[18:40] <pmichaud> nom doesn't use nqp-rx

[18:40] <pmichaud> parrot comes with nqp-rx, not nqp.

[18:40] <[Coke]> so, yes? ;)

[18:40] <[Coke]> ok.

[18:40] <pmichaud> so, yes.

[18:40] <pmichaud> :)

[18:42] <pmichaud> --gen-parrot=master worked for me

[18:43] <pmichaud> maybe try removing any parrot/ subdirectory and let it do a fresh checkout

[18:43] <pmichaud> I'll see if I can reproduce the error your getting

[18:43] <PerlJam> [Coke]: did you already have a parrot clone in your rakudo dir?  Possibly on a different branch?

[18:44] <[Coke]> PerlJam: possibly? I almost never build rakudo that way, but haven't touched this checkout dir in ages.

[18:44] <PerlJam> or a nqp clone I guess if that's what gave the error

[18:44] *** bitpart joined
[18:44] <[Coke]> ah, no, becaues it took 30s or more to git clone the thing.

[18:45] <[Coke]> first time building the nom branch, so definitely not an old nqp hanging about.

[18:45] <pmichaud> nom builds parrot for nqp, it doesn't use nqp's Configure to do it

[18:45] <PerlJam> [Coke]: AFAIK, there is no logic to handle the case that there's already a parrot or nqp clone that's not in the right state

[18:45] *** bluescreen10 left
[18:45] <pmichaud> yes, there is.

[18:45] <pmichaud> nom's Configure.pl checks the versions of parrot/nqp to make sure they're correct, _especially_  if =master is given.

[18:45] *** bluescreen10 joined
[18:46] <moritz> just svn checkouts of parrot might cause confusion

[18:46] <pmichaud> nom doesn't use svn at all.

[18:47] <moritz> but parrot did, back in the days

[18:48] <pmichaud> yeah, --gen-parrot=master appears to be working just fine for me

[18:48] <pmichaud> even when there's another parrot checkout already in parrot/

[18:49] <[Coke]> well, I'm not going to muck with either the parrot or nqp clones in this dir, no worries.

[18:49] <[Coke]> was just a scary message.

[18:49] <[Coke]> "make test" expected to fail?

[18:50] <PerlJam> pmichaud: Hrm.  I just did one and it said ... https://gist.github.com/8645068f1c8d186ad2ed

[18:50] <tadzik> [Coke]: yeah, some of it

[18:50] <tadzik> [Coke]: try spectest

[18:50] <pmichaud> yes, we still have 'make test' fails

[18:50] <PerlJam> pmichaud: that last line tells me that something didn't work quite right.

[18:51] <pmichaud> (still waiting for the gist to appear)

[18:51] <[Coke]> (rant. I am still not over changes in the summary output of make test from like 5 years ago.)

[18:51] <pmichaud> PerlJam: ah yes, there does seem to be a bug with not doing a git pull or fetch there.

[18:52] <[Coke]> nopaste?

[18:53] <PerlJam> pmichaud: I've also had a weird behavior when the parrot clone is on another branch, but I don't remember the specifics nor can I reproduce it readily from memory.  (I know that doesn't help, but maybe something to watch out for)

[18:54] <pmichaud> I think it's a similar issue.

[18:54] <pmichaud> okay, I'll work on that.

[18:54] <[Coke]> did make spectest got a page long git message about asking to pull without saying what to pull. I assume that's a previous clone issue.

[18:54] <pmichaud> yes

[18:54] <pmichaud> likely

[18:54] <pmichaud> you may need to hop into parrot and manually do a git pull

[18:54] <pmichaud> (if you didn't clear parrot/ earlier)

[18:55] <[Coke]> (tihs is my home desktop, which I've been unable to ssh into for some months now. things are alittle dusty in here.)

[18:55] <PerlJam> Is there a "clean" target that nukes parrot and nqp from rakudo?

[18:55] <pmichaud> rm -rf parrot nqp

[18:55] <PerlJam> other than that :)

[18:55] <PerlJam> "make reallyreallyclean" or something

[18:55] <[Coke]> ... that spectest run was incredibly faster than I remember.

[18:55] <pmichaud> you're only running about 10% of the tests of master

[18:56] <tadzik> look how fast nom is! :)

[18:56] <pmichaud> otoh, nom is a lot faster, yes.

[18:56] <pmichaud> (i.e,. the tests run faster)

[18:56] <[Coke]> no point in mucking with TODO passes until nom is master, aye?

[18:56] <PerlJam> [Coke]: unless you can make  them untodo in nom  :)

[18:56] <pmichaud> I'm thinking we could start mucking, and that we go ahead and peg master to the current spectest suite (and not worry about keeping it up to date)

[18:57] <colomon> like we did with alpha and ng.  +1

[18:57] <Moukeddar> Hello guys

[18:57] <Moukeddar> miss you

[18:57] <tadzik> hello Moukeddar 

[18:57] <pmichaud> I doubt there's going to be any significant spectest-related changing to master from here on out

[18:58] <Moukeddar> how's the weather?

[18:58] <pmichaud> Hot.

[18:58] <mberends> PerlJam: just checked again, there's currently no Makefile target to do that

[18:58] <tadzik> as it should be. Not too sunny, not to rainy

[18:59] <Moukeddar> yes, very (46􏿽xB0C)

[18:59] <tadzik> oh, I stole all the laziness available in the universe it seems

[18:59] <Moukeddar> i think it's time to move

[18:59] <pmichaud> tadzik: I was going to do that, but I was too lazy.  :)

[18:59] <Moukeddar> tadzik, you forgot how we split it ?

[18:59] <tadzik> Moukeddar: oh, I had quite an exhaustive day

[18:59] <tadzik> plus I have an exam tomorrow

[18:59] *** bitpart left
[19:00] <Moukeddar> i finished all my exam

[19:00] <[Coke]> are the commented out test files in t/spec* from the list of passing ones in master?

[19:00] <Moukeddar> so i'm litteraly high !)

[19:00] <pmichaud> [Coke]: yes.

[19:00] <Moukeddar> good luck tadzik 

[19:01] <tadzik> thanks. I already passed this one once, but I need a few points more

[19:02] <Moukeddar> i passed 16 exam last week

[19:03] <Moukeddar> it was hell

[19:03] <tadzik> oh my

[19:03] <tadzik> whatever kind of exams that was, it sounds terrifying

[19:03] <Moukeddar> in 45􏿽xB0C

[19:03] <tadzik> hell on earth indeed

[19:03] <Moukeddar> 20 KM from home

[19:04] <Moukeddar> but i made load of friends(sweaty ones) :p

[19:04] <tadzik> :)

[19:04] *** wtw left
[19:04] <Moukeddar> what subject you'll be tested in ?

[19:05] <Su-Shee> tadzik: my coworker btw knew the movie with the complicated polish name joke within the first three words of a sentence I started to tell him.. ;)

[19:05] <tadzik> :D

[19:05] <tadzik> Moukeddar: Probabilistic and Statistic Maths

[19:05] <Su-Shee> tadzik: I just had to say "someone showed me the joke with the german and the polish name.." 

[19:05] <tadzik> :)

[19:05] <Moukeddar> interesting

[19:05] <Moukeddar> we've done some of that

[19:06] <Moukeddar> money :p

[19:06] <tadzik> the most interesting thing for me now is "let me go and learn on my own again"

[19:07] <Moukeddar> why would you do that ?

[19:07] <dalek> rakudo/nom: 4af0ae1 | pmichaud++ | src/core/Mu.pm:

[19:07] <dalek> rakudo/nom: Mu.ACCEPTS() needs to be able to handle non-Any arguments.

[19:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4af0ae15de

[19:07] <dalek> rakudo/nom: f5c25da | pmichaud++ | / (5 files):

[19:07] <dalek> rakudo/nom: More array-related methods and fixes.  This _almost_ gets us

[19:07] <dalek> rakudo/nom: to passing S02-builtins/array.t, as soon as $_ within if blocks

[19:07] <dalek> rakudo/nom: starts working.

[19:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f5c25daafd

[19:10] <tadzik> Moukeddar: I feel that I'm wasting time on stupid things instead of putting my effort into interesting things. I had a different views on my studies before I started them, really

[19:11] <Moukeddar> i'm dying to have a decent teacher

[19:11] <Moukeddar> that will not burry my butt in vb6 code or C calculators projects

[19:11] <tadzik> oh my

[19:11] <tadzik> vb6 sounds preety bad

[19:12] <Moukeddar> it's the lamest thing ever

[19:12] <Moukeddar> yet, they still teach it like if it's the 90's

[19:12] <masak> Moukeddar, hi.

[19:13] <Moukeddar> masak, Le Man :)

[19:13] <Moukeddar> hi you

[19:13] <masak> back from L'Hexagon :)

[19:13] <tadzik> to be honest, I never had a pleasure to work with it, but it sound as a synonym for a ridiculous thing which should be burned and buried. Maybe I'm wrong, maybe it's a pretty good language :)

[19:13] <Moukeddar> le Hexagon*

[19:13] <masak> really? I thought the H was silent.

[19:14] <Moukeddar> in french it is

[19:14] <masak> and I was speaking...? :)

[19:14] <Moukeddar> frenglish

[19:14] <masak> :P

[19:14] <pmichaud> "touche'"

[19:14] <masak> indeed.

[19:14] <pmichaud> (too lazy to type the accented-e :)

[19:14] <PerlJam> tooshay

[19:15] <masak> touchy.

[19:15] <Moukeddar> touch􏿽xE9

[19:15] <pmichaud> Moukeddar +1

[19:15] <PerlJam> masak: no touchy.

[19:15] <masak> Moukeddar: either you just made a really funny encoding joke, or you need to change your client to UTF-8 :)

[19:16] <Moukeddar> it's Touch􏿽xE9

[19:16] <masak> it's currently ISO-8859-1.

[19:16] <masak> no, it's "touché" :)

[19:16] <masak> flip that utf-8 switch.

[19:16] <Moukeddar> yes i should "decapitate" words :)

[19:17] <masak> make the world smile ☺

[19:17] <Moukeddar> does he even smile?

[19:17] <masak> Moukeddar: no, I wasn't talking about capital letters. I was talking about encodings.

[19:17] <masak> Moukeddar: do you know about UTF-8? it's OK if you don't.

[19:17] <Moukeddar> idk what encoding this client uses

[19:17] <Moukeddar> i know UTF-8

[19:18] <Moukeddar> just don't know where to change the encoding

[19:18] <masak> it uses latin-1 from what I can tell.

[19:18] <masak> what client?

[19:18] <masak> maybe I can help.

[19:18] <Moukeddar> X-chat

[19:19] *** colomon left
[19:19] <flussence> bottom of the network settings window

[19:19] <masak> flussence++

[19:19] *** birdwindupbird joined
[19:19] <masak> Moukeddar: see the topic: "UTF-8 is our friend!" ☺

[19:19] <Moukeddar> where?

[19:20] <masak> Moukeddar: /topic

[19:20] <flussence> all the way to the right

[19:20] <Moukeddar> wait  a sec please

[19:20] <Moukeddar> still looking for the encoding setting

[19:21] *** colomon joined
[19:21] <flussence> hm, I don't actually have xchat installed here..

[19:22] <Moukeddar> and i didn't find the setting neither

[19:22] <Moukeddar> oh well

[19:22] <Moukeddar> touch􏿽xE9 missed with my mind

[19:22] <flussence> it *should* be on the thing where you edit a single IRC network's details...

[19:23] <flussence> but IIRC it actually defaults to some sort of hand-wavey encoding detection option

[19:23] *** Mowah joined
[19:24] <Moukeddar> can't find it really

[19:25] <flussence> they don't exactly make that window easy to find :)

[19:25] <Moukeddar> i wish i've discovered IRC sooner

[19:25] <Moukeddar> earlier*

[19:26] <masak> "sooner" is fine.

[19:28] *** envi left
[19:29] <flussence> fwiw, your grammar is better than the average native-lang=en internet user, so don't worry about it :)

[19:30] <pmichaud> nom:  my $a = (foo => 'bar');  say "foo";

[19:30] <p6eval> nom: OUTPUT«␤»

[19:30] * pmichaud cries.

[19:31] <benabik> pmichaud: Wha?

[19:31] <pmichaud> I'm thinking something is wrong with the constants table or something like that.

[19:31] <pmichaud> any fatarrow key seems to destroy the use of that string in the remainder of the code.

[19:31] <flussence> std: no foo ???

[19:31] <p6eval> std 37a0cdd: OUTPUT«ok 00:01 118m␤»

[19:33] <pmichaud> nom:  my $a = :foo('bar');  say "foo";

[19:33] <p6eval> nom: OUTPUT«␤»

[19:33] <pmichaud> hmm, looks like any compile-time Pair will do it.

[19:33] *** Kivutarrr joined
[19:34] <pmichaud> ohhhhhhhh, I see the problem.

[19:34] <pmichaud>     sub make_pair($key_str, $value) {

[19:34] <pmichaud>         my $key := $*ST.add_constant('Str', 'str', $key_str);

[19:34] <pmichaud>         $key.named('key');

[19:34] <pmichaud> that's causing the constant "key" to always act like a named parameter.

[19:35] <pmichaud> (i.e., it's applying .named() to the constant)

[19:35] <benabik> Ew.

[19:36] <pmichaud> okay, I think I can fix that.

[19:37] <mberends> Moukeddar: just looked in my Linux XChat, the sequence is XChat, Network List, FreeNode, Edit, Character Set.

[19:37] <Moukeddar> thank you very much mberends 

[19:38] <Moukeddar> done:)

[19:43] *** TSa left
[19:44] *** SHODAN left
[19:47] <masak> Moukeddar: write "touché"!

[19:47] <Moukeddar> touch􏿽xE9

[19:48] <Moukeddar> when i wrote it at first

[19:48] <Moukeddar> what did you guys see in the screen?

[19:48] <masak> it still looks like "touch\351" here... :/

[19:48] <sorear> I see touchU+FFFD

[19:49] <benabik> I see touché

[19:49] <Moukeddar> hahah, funny

[19:49] <sorear> 一 ?

[19:50] <moritz> looks fine here too, but my client does latin1/utf8 autoguessing

[19:50] <Tene> I can't find any anything /touch./ that looks like it's rendering wrong to me, fwiw.

[19:51] <dalek> rakudo/nom: 5bce9dc | pmichaud++ | src/Perl6/Actions.pm:

[19:51] <dalek> rakudo/nom: Using a constant string as a Pair key mustn't mark it as :named('key') for all other uses of the constant string in the code.

[19:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5bce9dcd3a

[19:54] *** wolfman2000 joined
[19:59] *** MayDaniel joined
[20:00] <dalek> roast: fb3efa1 | pmichaud++ | S02-builtin_data_types/nil.t:

[20:00] <dalek> roast: Update test:  Stringifying Nil.WHAT no longer produces 'Nil()'

[20:00] <dalek> roast: review: https://github.com/perl6/roast/commit/fb3efa19f4

[20:00] <dalek> roast: 7fa87bc | pmichaud++ | S02-builtin_data_types/anon_block.t:

[20:00] <dalek> roast: Update use of multi to include proto declaration.

[20:00] <dalek> roast: review: https://github.com/perl6/roast/commit/7fa87bcce6

[20:00] <dalek> roast: 526840c | pmichaud++ | S02-builtin_data_types/array_extending.t:

[20:00] <dalek> roast: Remove #?rakudo skip fudge.

[20:00] <dalek> roast: review: https://github.com/perl6/roast/commit/526840c8e2

[20:00] <lichtkind> thou: cheers

[20:01] <thou> lichtkind: howdy!

[20:01] <thou> howdy, pardner

[20:01] <dalek> rakudo/nom: 6538713 | pmichaud++ | t/spectest.data:

[20:01] <dalek> rakudo/nom: spectest.data update:  uncomment more passing tests, add notes about why some are failing.

[20:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6538713380

[20:02] <[Coke]> moukeddar's touche looks fine to me.

[20:03] <[Coke]> (and so does camilla.

[20:03] *** birdwindupbird left
[20:06] <thou> while on the topic of IRC clients and input, can anyone share what client/config allows to write (and nicely format) multi-line text to p6eval? i've seen examples working with :to 'EOF' including newlines that work OK, and i can't make my client (LimeChat on OS X) send that.

[20:07] <flussence> copying and pasting the "␤" works :)

[20:08] <benabik> thou: I use flussence's method.

[20:08] <[Coke]> that, however, is an unrenderable box.

[20:08] <thou> hmm, ok. seems that it didn't in my tests, lemme try again

[20:08] <benabik> thou: But be careful to only send... 10? at a time

[20:09] * benabik keeps meaning to write an AppleScript to add delay in multilines for Colloquy

[20:09] <TimToady> on gnome ctrl/shift-u 2424 gets ␤ too

[20:10] <diakopter> thou: use a gist

[20:10] <diakopter> make a gist on github and send the url to p6eval

[20:11] <diakopter> rakudo: <gist url>

[20:11] <p6eval> rakudo 1fcb14:  ( no output )

[20:11] <thou> nice

[20:11] <thou> niecza: say (qq :to 'EOF').lines.perl␤foo␤bar␤EOF␤

[20:11] <sorear> like flussence and benabik, I tend to copy and paste the unrenderable boxes

[20:11] <p6eval> niecza v7: OUTPUT«["foo", "bar"].list␤»

[20:14] <thou> mine actually renders as a N/L glyph, where N is in the top left and L is in the bottom right (LucidaGrande on Mac)

[20:14] <benabik> Hm. My 10 at a time was me crossing conversation streams. A script that turned "\n" into that N

[20:14] <benabik> L char would be nice

[20:14] <benabik> Too

[20:14] <benabik> Bah, iPad keyboard.

[20:15] <diakopter> a gist works well if you want to try the same script over and over, also for scripts with lots of lines or just a very long script.

[20:15] <benabik> And you can update and retry the gist.

[20:15] <TimToady> if something renders as a box, it's probably merely a font problem

[20:15] <benabik> And comments, etc etc

[20:16] <diakopter> a detriment of gists is, while the change history of the gist is retained, the alignment to p6eval output isn't retained for posterity.

[20:17] <diakopter> assuming it's evaluated in #perl6

[20:17] <benabik> diakopter: Can compare change times to log times.

[20:17] <diakopter> that's true

[20:17] <diakopter> heh

[20:17] <diakopter> I used it heavily when working on rosettacode entries and debugging perlesque

[20:19] <moritz> masak: fwiw I've now release WebService::Libris (though p5 :/) to CPAN, now featuring tests :-)

[20:20] <moritz> I wonder if I should tell libris folks about it

[20:20] *** dukeleto left
[20:20] <masak> moritz: might be a good idea.

[20:20] <masak> moritz: anyway, good job.

[20:21] *** dukeleto joined
[20:26] <dalek> specs: 30347a2 | sorear++ | S32-setting-library/Numeric.pod:

[20:26] <dalek> specs: Simplify handling of trig bases

[20:26] <dalek> specs: 

[20:26] <dalek> specs: Following discussion on #phasers, we've decided it's not worthwhile to

[20:26] <dalek> specs: have a second argument on trig functions, nor for methods to look at

[20:26] <dalek> specs: CALLER.  C<use trigbase> has been redefined to still be useful, and

[20:26] <dalek> specs: is also extensible, if Gradians aren't exotic enough for you.

[20:26] <dalek> specs: review: https://github.com/perl6/specs/commit/30347a2cef

[20:28] *** molaf left
[20:29] <masak> sorear++

[20:30] <moritz> sorear++ indeed

[20:33] *** jevin_ joined
[20:33] <dukeleto> is there something like Module::Starter for perl 6 yet?

[20:33] *** jevin left
[20:33] <tadzik> I wrote one

[20:33] <tadzik> it can even create github repos, iirc :)

[20:33] <dukeleto> tadzik: woot! What is it called?

[20:33] <tadzik> dukeleto: I don't know, let me search through my github

[20:34] <tadzik> dukeleto: https://github.com/tadzik/Module-Starter it seems

[20:34] <tadzik> don't trust it too much :)

[20:35] <dukeleto> tadzik: ingy ridiculed me for not having written a Perl 6 module yet, so now I have to defend my honor

[20:35] <tadzik> I see :)

[20:35] <colomon> ingy++

[20:36] <masak> recruitment by ridicule!

[20:36] <TimToady> whatever works

[20:36] <masak> not really our way around here, but hey, it worked :)

[20:38] <diakopter> ridiculous

[20:38] <dukeleto> tadzik: your module-starter has a shebang line of "perl" but it seems to be perl6. Have you aliased perl to perl6 on your system already? ;)

[20:38] <masak> oh, that's radical.

[20:39] <masak> tadzik: sewing doubts in the enemy ranks, saying "Perl" but meaning "Perl 6" :)

[20:39] <masak> er, sowing*

[20:39] <diakopter> lol

[20:39] <tadzik> dukeleto: a LHF would be to make it use github v3 api

[20:39] <masak> my Onglish sycks.

[20:39] <tadzik> ouchie, the shebang

[20:39] <colomon> the enemy would do well to doubt my sewing

[20:40] <tadzik> that's an lhf too, yes :)

[20:40] <tadzik> if you don't fix it, I will :)

[20:40] <tadzik> tomorrow, after The Last of the Exaams

[20:41] <dukeleto> tadzik: give me a commit bit and I will fix it :)

[20:41] <tadzik> dukeleto: done

[20:41] <tadzik> I've spent a while looking for "dukeleto" on github

[20:42] <tadzik> . o O ( mumble mumble stupid search box mumble mumble )

[20:42] <dukeleto> tadzik: yeah, that is one of the few places that I am "leto"

[20:43] <masak> dukeleto: do you actually own a duchy?

[20:43] <dukeleto> masak: i am saving up

[20:43] <benabik> masak++

[20:44] <masak> :)

[20:45] <masak> as a backup plan, you could always move to the Netherlands.

[20:45] <colomon> and here I thought you were just a big John Wayne fan.

[20:46] <colomon> though one of my old Star Wars gaming buddies is a Duke in the SCA...

[20:47] <benabik> Need to fight to get those titles though

[20:47] *** frettled left
[20:47] <colomon> my impression is that he is indeed a skilled fighter

[20:47] *** frettled joined
[20:48] *** MayDaniel left
[20:49] <masak> colomon: Society for Creative Anachronism?

[20:49] <colomon> masak: yes

[20:49] *** Moukeddar left
[20:49] <colomon> my old college roommate / eventual best man at my wedding got involved with that after college, so I ended up knowing a number of members

[20:50] <masak> nice.

[20:50] <sorear> my parents were involved in that

[20:50] <colomon> unsurprisingly, there tends to be a lot of overlap between SCA and role playing games, too.

[20:51] <benabik> SCA = more dangerous LARP

[20:51] <colomon> benabik: I dunno, at least they're armored when they start hitting each other.  ;)

[20:51] *** benabik left
[20:52] *** benabik joined
[20:52] <diakopter> transition from south carolina to north carolina

[20:52] <benabik> colomon: Most LARPs have a "no touch" rule, so even armored is more dangerous.

[20:53] <colomon> benabik: I know the rule, but I know some of us aren't very good at upholding the rule in practice.  I've only LARPed a tiny bit, though.

[20:53] *** pmichaud joined
[20:53] <diakopter> pmichaud: wb

[20:54] <masak> rakudo: my %h = a => 1, b => 2, c => 3; for %h { .say }

[20:54] <p6eval> rakudo 1fcb14: OUTPUT«a 1␤b     2␤c     3␤»

[20:55] <masak> rakudo: my %h = a => 1, b => 2, c => 3; for %h.pairs { .say }

[20:55] <p6eval> rakudo 1fcb14: OUTPUT«a 1␤b     2␤c     3␤»

[20:55] <masak> so... in list context, %h means %h.pairs?

[20:55] <sorear> Yes.

[20:55] <masak> I approve.

[20:55] <masak> :)

[20:58] <dalek> rakudo/nom: 0516515 | pmichaud++ | / (3 files):

[20:58] <dalek> rakudo/nom: Add Parcel.Numeric and Any.Array, so we now pass parcel.t .

[20:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0516515875

[20:58] <dalek> rakudo/nom: 69398ca | pmichaud++ | src/core/ (2 files):

[20:58] <dalek> rakudo/nom: Add List.reverse and Any.reverse.

[20:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/69398ca1f7

[20:59] <sorear> 657 unrun test files in Niecza...

[21:01] *** zby_home___ is now known as zby_home_

[21:01] *** bluescreen10 left
[21:02] <colomon> rakudo: sub postfix:<degrees>($rad) { $rad / pi * 180 }; say sin(90degrees)

[21:02] <p6eval> rakudo 1fcb14: OUTPUT«-0.954091467472818␤»

[21:02] *** bluescreen10 joined
[21:02] <masak> oh, dang.

[21:02] <masak> rakudo: sub postfix:<degrees>($rad) { $rad * pi / 180 }; say sin(90degrees)

[21:02] <p6eval> rakudo 1fcb14: OUTPUT«1␤»

[21:02] <masak> \o/

[21:03] <tadzik> self.sleep

[21:03] <masak> rakudo: sub postfix:<degrees>($deg) { $deg * pi / 180 }; say sin(90degrees)

[21:03] <p6eval> rakudo 1fcb14: OUTPUT«1␤»

[21:03] *** bluescreen10 left
[21:04] <jlaire> rakudo: sub postfix:<°>($deg) { $deg * pi / 180 }; say sin(90°)

[21:04] <p6eval> rakudo 1fcb14: OUTPUT«1␤»

[21:04] <masak> jlaire++

[21:05] <masak> that's very readable.

[21:05] <jlaire> rakudo++ perl6++ # that's actually awesome

[21:05] <benabik> jlaire++

[21:05] <masak> it is! it's even more awesome when you picture the parser running over that code and picking up an operator as it goes along...

[21:06] <dalek> specs: 6faacb9 | (Felix Herrmann)++ | S06-routines.pod:

[21:06] <dalek> specs: [S06] typo fix: remove lonely ')'

[21:06] <dalek> specs: review: https://github.com/perl6/specs/commit/6faacb9a8c

[21:06] *** kanishka left
[21:06] * masak suddenly realizes why jnthn is missing

[21:07] <flussence> rakudo: sub postfix:<π>($rad) { $rad }; sub π { pi }; say sin(π/2); # ;)

[21:07] <p6eval> rakudo 1fcb14: OUTPUT«1␤»

[21:07] * moritz tweets the line with postfix:<°> :-)

[21:08] <masak> moritz++

[21:10] *** dukeleto left
[21:10] <cognominal_> just curious, what about the metamodel and prototype based language like self and javascript?

[21:11] *** Kivutarrr left
[21:11] *** dukeleto joined
[21:11] <masak> cognominal_: could you restate that question into something that can be answered? :)

[21:12] <cognominal_> I thouhgt the metamodel was general enough to model any object oriented language. Is that true for javascript or self?

[21:13] <colomon> flussence: I played around with doing one step better than that -- sort of -- and creating a new Real type that was internally a Rat but whose actual value was the Rat times pi.  :)

[21:13] <masak> cognominal_: Perl 6 is already fairly prototype-based.

[21:13] <masak> cognominal_: it just happens to have a 'class' keyword, too :)

[21:13] <cognominal_> there is a chain of inheritance but it goes thru objects not classes.

[21:13] <masak> right.

[21:13] <masak> cognominal_: the short answer is that you can code up your metaclass any way you like.

[21:14] <cognominal_> Also methods are in objects because there is no class to store them.

[21:14] *** impious joined
[21:14] *** impious left
[21:15] <cognominal_> including searching methods starting from the object?

[21:16] <cognominal_> the last line was an answer to masak.

[21:16] <masak> right.

[21:17] <masak> cognominal_: as far as I can tell, the metamodel all the way down to KnowHOWs lets you change a fair number of things. prototype-based MROs should definitely be among the possible things.

[21:17] <masak> how well it can be made to play nice with the rest of Perl 6 is another question.

[21:21] <dukeleto> it seems that nothing that starts with perl6-* in projects.list in ecosystem.git shows up on modules.perl6.org

[21:21] <dukeleto> am I missing something?

[21:21] <dukeleto> for instance, tadzik's Module::Starter doesn't show up on modules.perl6.org, but is in projects.list

[21:21] <sorear> KnowHOW *is* a prototype system

[21:22] <masak> sorear: oh, indeed. but with Perl 6's class/role system built on top.

[21:22] <colomon> dukeleto: huh.  perl6-Testing shows up, but as Testing

[21:24] <masak> rakudo: my @a = [0,0,0], [1,1,1], [2,2,2]; say @a.flat.elems

[21:24] <p6eval> rakudo 1fcb14: OUTPUT«3␤»

[21:24] <masak> ah.

[21:24] <masak> rakudo: my @a = [0,0,0], [1,1,1], [2,2,2]; say [+] @a>>.elems

[21:24] *** dobie_gillis left
[21:24] <p6eval> rakudo 1fcb14: OUTPUT«9␤»

[21:25] *** colomon left
[21:27] *** colomon joined
[21:30] <cognominal_> sorear, indeed KnowHOSs are objects.

[21:34] *** molaf joined
[21:35] <colomon> tadzik: https://raw.github.com/perl6/ecosystem/master/META.list seems to lack module-starter?

[21:35] <colomon> how is that list generated?

[21:36] <dalek> rakudo/nom: 2f4210b | pmichaud++ | src/core/Range.pm:

[21:36] <dalek> rakudo/nom: Fix Range.perl for non-numeric ranges.

[21:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2f4210bc93

[21:36] <dalek> rakudo/nom: 726436a | pmichaud++ | / (9 files):

[21:36] <dalek> rakudo/nom: Add infix:<===> and stub in some core types and their roles.  This

[21:36] <dalek> rakudo/nom: adds sigils-and-types.t as another passing spectest.

[21:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/726436aa36

[21:37] *** dukeleto left
[21:37] *** dukeleto joined
[21:38] *** george_z0rwell joined
[21:39] *** Reaganomicon left
[21:40] * dukeleto starts writing his first perl6 module whilst sitting next to colomon++ and watching lightning talks at YAPC::NA

[21:41] <PerlJam> dukeleto: did he infect you?

[21:42] <colomon> tadzik: why does ecosystem have projects.list and META.list?  They're not consistent atm...

[21:42] *** REPLeffect left
[21:42] *** Psyche^ joined
[21:46] *** Patterner left
[21:46] *** Psyche^ is now known as Patterner

[21:49] <sorear> wha?  roast contains a test that "moose".bytes == 5

[21:49] <masak> blog post! http://strangelyconsistent.org/blog/june-21-2011-nested-data-structures

[21:49] <PerlJam> masak: aren't you about a week behind?

[21:49] <masak> sorear: TimToady has tried to explain the thing with .bytes to me. AFAIU, literal strings can double as Bufs.

[21:50] <masak> PerlJam: yes. see previous post.

[21:50] <sorear> niecza thinks "moose".bytes == 10

[21:50] <PerlJam> aye

[21:50] <sorear> ooc, how much attention is my little project getting at yapc?

[21:51] <masak> how much Perl 6 is there at YAPC::NA?

[21:51] <colomon> sorear: TimToady mentioned it in the keynote

[21:51] <colomon> I think my talk is the only p6 talk

[21:51] <masak> and stop calling it YAPC like it's the only one... :P

[21:51] <PerlJam> masak: one of the semi-CS majors that I have as a student worker mentioned earlier today that, to learn a new programming language, he always trys to write a text adventure game in it.

[21:51] <sorear> masak: it's the current one

[21:52] <sorear> there is at least one other #perl6 but I never need to qualify

[21:52] * dukeleto will mention perl 6 in his parrot talk, but there aren't many perl6-specific talks

[21:52] <PerlJam> masak: so, your choice for days 29 & 30 is quite good I  think  :)

[21:52] <masak> PerlJam: :)

[21:52] <colomon> sorear: I certainly plan to mention niecza a good bit in my talk

[21:52] <dukeleto> seemingly the perl 6 gradient decreases as you go westward over the atlantic

[21:52] <masak> PerlJam: that was basically the original idea: to build up to an adventure game.

[21:52] <colomon> it's great to have two distinct implementations with different strengths and weakness to talk about

[21:53] <masak> PerlJam: having games every fifth day as well turned out to be a good idea, though.

[21:53] <colomon> dukeleto: sure it's not a north/south thing?  There was more last year in ohio... ;)

[21:53] <dukeleto> colomon: this is my first YAPC. Obvioiusly, interpolation with a single data point is LTA :)

[21:54] <colomon> And I'm only interpolating with two data points...

[21:55] *** molaf left
[21:55] <sorear> uhm

[21:55] <sorear> my $r = \$x

[21:55] <sorear> say $$r

[21:55] *** REPLeffect joined
[21:55] <sorear> is this correct at all currently?

[21:55] <sorear> substr.t is trying to use it

[21:55] <PerlJam> sorear: I thought it had to be say $($r)

[21:57] <masak> sorear: that looks like Pugs-era syntax.

[21:57] <masak> PerlJam: no, those two are equivalent.

[21:57] <felher> masak++ for makeing me a 'more harmonious human being' ;)

[21:57] <masak> but I don't see people doing that kind of scalar dereferencing much. or at all.

[21:57] <masak> felher: :)

[21:58] *** kaare_ left
[21:58] <masak> You're welcome. ;-)

[21:58] <PerlJam> masak: for some reason I thought all dereferencers need parens

[21:58] <dukeleto> what is the recommended way to run my tests for a perl6 module ?

[21:58] <masak> PerlJam: they do in Rakudo.

[21:58] <dukeleto> currently I am doing: PERL6LIB=lib prove -e perl6 -rv t/

[21:59] <masak> dukeleto: 'ufo && make test' :)

[21:59] * PerlJam needs to reread the spec with fresh eyes

[21:59] <PerlJam> (shouldn't be too hard since I haven't really read them in a good long while)

[21:59] <lichtkind> TimToady: is there any chance to get from $*IN via getc just a char without hiting enter?

[22:00] *** whiteknight joined
[22:00] <masak> lichtkind: heh, I asked that the other day :)

[22:00] <dukeleto> masak: not using ufo nor do I have a makefile :)

[22:00] <masak> dukeleto: well, you asked... :)

[22:01] <dukeleto> should I be pushing './lib' onto @*INC in my test?

[22:01] <lichtkind> masak: i like the idea

[22:01] <masak> dukeleto: I've seen some people do that.

[22:01] <masak> lichtkind: yes, me too.

[22:01] <lichtkind> it superb for [Y/N] and alike

[22:02] <masak> lichtkind: I want to write a Nethack-like game in Rakudo, so I need this.

[22:02] <lichtkind> maybe call it not getc because as i read syn theres a problem with getc

[22:02] <lichtkind> the way we split out roll

[22:02] <lichtkind> i mean $larry did :)

[22:04] *** leprevost left
[22:04] <dalek> niecza: 3cbb32e | sorear++ | / (2 files):

[22:04] <dalek> niecza: Pass 9 new S32-str test files

[22:04] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3cbb32e837

[22:04] <dalek> roast: e640168 | sorear++ | S32-str/ (6 files):

[22:04] <dalek> roast: Remove named-arg tests from substr, fudge rest of S32-str for niecza

[22:04] <dalek> roast: review: https://github.com/perl6/roast/commit/e6401688f2

[22:08] <lichtkind> masak: do you remeber who wanted to wirte a wiki in perl 6?

[22:09] <masak> lichtkind: besides me and viklund, you mean?

[22:10] <masak> if so, then no. maybe the backlog remembers.

[22:11] *** Moukeddar joined
[22:11] <Moukeddar> masak, how's your sourdough bread ?

[22:12] <lichtkind> masak: yes i mean the guy who talked here some day ago of the idea to make a git based wiki in perl 6 so we can wave decent wiki and nive diff reports for the chatbot

[22:15] <colomon> dukeleto: I'll talk to you about @*INC when we get a chance

[22:19] <masak> Moukeddar: it looks tasty :)

[22:19] <Moukeddar> the Q is : does it taste as it looks?

[22:19] <masak> lichtkind: if that's all you want, you could have that today through gist.github.com :)

[22:19] <masak> Moukeddar: I'll get back to you on that.

[22:19] <Moukeddar> sure,

[22:21] <lichtkind> masak: what is gist?

[22:22] <benabik> lichtkind: gist.github.com IIRC

[22:23] <dalek> rakudo/nom: e8d75f6 | pmichaud++ | / (3 files):

[22:23] <dalek> rakudo/nom: Move scalar assignment decontainerization a bit lower down in

[22:23] <dalek> rakudo/nom: the calling sequence.  We now pass nested-arrays.t .

[22:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e8d75f6d36

[22:23] <Tene> masak: I started a roguelike in rakudo quite a while ago; you can see what I got together here: http://shorl.com/sisebedrerito

[22:24] <Tene> August 2009, looks like

[22:24] <lichtkind> masak: i need 4 features, decent wiki syntax, make change labels/notes, spamproof, and migration path for the data

[22:24] <masak> Tene: I remember it.

[22:24] <Tene> Unfortunately, it relied on cross-language-loading, which has been broken since shortly after that time.

[22:24] <Tene> use Curses:from<parrot>;

[22:24] <masak> ooh.

[22:24] <masak> does that still work?

[22:25] <Tene> 16:24 < Tene> Unfortunately, it relied on cross-language-loading, which has  been broken since shortly after that time.

[22:25] <Tene> As far as I know, it's still broken.

[22:26] <masak> I suspected that.

[22:26] <Tene> If so, you can get it working anyway with some Q:PIR

[22:26] <Tene> load_bytecode 'Curses.pbc'; screw around with some namespaces;

[22:27] <Tene> ^ literal PIR code, totally not a lie

[22:27] <masak> sounds promising.

[22:28] <lichtkind> Moukeddar: how serous are you in creating a wiki?

[22:28] <Moukeddar> i think you mean masak :)

[22:28] <sorear> Tene: note that rakudo nom no longer uses parrot namespaces

[22:28] <masak> lichtkind: gist has Markdown, I don't know what you mean by labels/notes, only you can edit your gists, and it should be fairly easy to migrate.

[22:29] <pmichaud> nom's ability to do anything with parrot libraries is likely to be severely limited for a while.

[22:29] <Tene> Given the number of people who have expressed interest in picking up my language interop work in the years since my burn-out, I'm a little disappointed that nobody actually has.

[22:29] <pmichaud> the object systems are just too different/separate

[22:29] <Tene> pmichaud: you don't need much of an object system to call curses functions with strings and integers.

[22:29] <lichtkind> masak: i ment that i attach a text, a commit message to a change 

[22:30] <benabik> pmichaud: More reason to get 6model into Parrot core.

[22:30] <Tene> masak: So, I recomment you write write MyCurses.pm, which loads the parrot curses library and wraps its functions appropriately into a few Rakudo classes.

[22:31] <masak> lichtkind: gist doesn't have that.

[22:31] <masak> Tene: aye.

[22:33] <pmichaud> another approach might be to figure out how to get a zavolaj equivalent on nom, and use that to wrap the curses library :)

[22:33] <Tene> pmichaud: the Parrot curses library is just dlopen, repeated dlsym, approximately.

[22:34] <Tene> So, it does about the same thing.

[22:35] *** Moukeddar left
[22:39] *** colomon left
[22:39] *** dorlamm joined
[22:40] *** lue joined
[22:43] *** benabik_ joined
[22:44] *** colomon joined
[22:46] *** benabik left
[22:47] *** benabik_ is now known as benabik

[22:48] <masak> 'night, #perl6

[22:48] *** masak left
[22:50] *** benabik_ joined
[22:50] *** icwiener left
[22:50] *** icwiener joined
[22:50] *** benabik__ joined
[22:51] *** benabik left
[22:51] *** benabik__ is now known as benabik

[22:52] *** cotto joined
[22:54] *** benabik_ left
[22:57] *** dukeleto left
[22:58] *** dukeleto joined
[22:58] <dalek> rakudo/nom: 6031e3a | pmichaud++ | / (6 files):

[22:58] <dalek> rakudo/nom: Fix some comparison operators, pass S03-operators/comparison-simple.t .

[22:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6031e3af1e

[22:58] *** dukeleto left
[22:59] *** dukeleto joined
[22:59] *** dukeleto left
[22:59] *** dukeleto joined
[23:00] *** dukeleto left
[23:00] *** dukeleto joined
[23:07] *** kanishka joined
[23:15] *** dukeleto left
[23:15] *** dukeleto joined
[23:15] *** drbean left
[23:17] *** wamba left
[23:22] *** pernatiy left
[23:22] *** Mowah left
[23:24] *** bluescreen10 joined
[23:27] *** Zapelius left
[23:37] *** icwiener left
[23:41] <dalek> rakudo/nom: e02a620 | pmichaud++ | / (5 files):

[23:41] <dalek> rakudo/nom: More pir:: -> nqp:: conversion, spectest.data updates.

[23:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e02a620082

[23:43] *** mberends left
[23:47] <dalek> niecza: 5348797 | sorear++ | lib/CORE.setting:

[23:47] <dalek> niecza: Add 4-argument substr, $$capture

[23:47] <dalek> niecza: review: https://github.com/sorear/niecza/commit/5348797d04

[23:49] <pmichaud> sorear: where could I find sources for the regex engine you're currently using (in niecza or otherwise)?  I need to update nqp's engine for ltm and the like.

[23:51] <sorear> pmichaud: src/RxOp.pm6 with support routines in lib/Cursor.cs

[23:52] *** stepnem left
[23:52] <sorear> the general setup is a lot like nqp's regex compiler; the parser generates regex nodes, and then each regex node generates some code

[23:52] *** alester left
[23:53] <sorear> the LTM stuff is handled by the lad() methods on regex nodes

[23:53] <sorear> which produces a simple data structure representing the declarative prefix of the node

[23:54] <sorear> the actual LTM automaton is generated by C# code in Cursor.cs, mostly by LADNode and it subclasses, Lexer, and LexerNode

[23:56] *** dorlamm left
[23:57] <pmichaud> sorear: okay, thanks.  I may have some questions at some point,  Is what you have much different from whatever gimme5 and the like are using?  (Do we even still have a gimme5?  ;-)

[23:59] <sorear> gimme5 is gone, I rewrote it because I couldn't understand it ;-)

[23:59] <sorear> it is based to some extent on what viv and STD's Cursor use

