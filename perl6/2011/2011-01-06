[00:03] *** roen joined
[00:06] *** snearch left
[00:07] *** roen left
[00:09] *** __sri left
[00:09] *** _sri joined
[00:15] <sorear> sadly there's no perltidy6 yet, I think

[00:18] *** hercynium left
[00:29] *** masonkramer left
[00:30] *** masonkramer joined
[00:31] *** Trashlord left
[00:32] *** pmurias left
[00:34] *** pmurias joined
[00:36] <sorear> pmurias: sadly there's no perltidy6 yet, I think

[00:36] <sorear> buubot: eval: defined 1 && 0

[00:36] <buubot> sorear: 0       

[00:36] <sorear> perl6: say (defined 1 && 0)

[00:36] <p6eval> niecza v1-86-g4365d61: OUTPUT«Bool::True␤»

[00:36] <p6eval> ..pugs, rakudo 244d0f: OUTPUT«0␤»

[00:44] *** gbacon left
[00:44] *** l0rd_hex joined
[00:44] <l0rd_hex> weird, I can't talk in #perl

[00:50] <coldhead> that's a legacy channel now

[00:53] <sorear> l0rd_hex: your computer is on the #perl ban list

[00:53] *** felliott left
[00:54] <l0rd_hex> I only insulted them twice!

[00:54] *** risou joined
[00:55] <sorear> insults are an inappropriate use of facilities

[00:55] *** roen joined
[00:56] <l0rd_hex> I'm kidding, I don't think I've ever been in that channel before

[00:57] <sorear> talk to apeiron; if you're not the same person he banned, you should have no trouble convincing him

[00:57] *** risou left
[00:58] <l0rd_hex> alright, thanks sorear 

[00:59] *** felliott joined
[01:00] <l0rd_hex> sorear: privmsg him?

[01:00] *** QinGW joined
[01:06] *** rpr_ left
[01:07] *** felliott left
[01:07] *** pmurias left
[01:10] <sorear> yes

[01:14] <sorear> TimToady: Why does .ast default to .Str and not Any?

[01:20] <TimToady> the point of a default is to have something, not nothing

[01:21] *** rpr_ joined
[01:24] <sorear> I guess

[01:24] <sorear> sometimes I like to set a default in the user

[01:25] <sorear> like there are a whole bunch of mod_internal action methods in Niecza

[01:25] <lue> how can I get multiples of ten with the sequence operator?

[01:25] <sorear> most of them need to be treated as <?> at runtime

[01:25] <sorear> 0, 10 ...

[01:25] <sorear> maybe need , 20

[01:26] <colomon> rakudo: (0, 10 ... 100).perl.say

[01:26] <p6eval> rakudo 244d0f: OUTPUT«(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100)␤»

[01:26] <lue> ok. I was trying    10, { $_ * 10} ... 100    , overcomplicating things :)

[01:27] <colomon> rakudo: (10, { $_ * 10 } ... 100).perl.say

[01:27] <p6eval> rakudo 244d0f: OUTPUT«(10, 100)␤»

[01:27] <colomon> ah, right

[01:27] <colomon> rakudo: (10, { $_ + 10 } ... 100).perl.say

[01:27] <p6eval> rakudo 244d0f: OUTPUT«(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)␤»

[01:27] <colomon> rakudo: (10, * + 10 ... 100).perl.say

[01:27] <p6eval> rakudo 244d0f: OUTPUT«(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)␤»

[01:27] <dalek> niecza: 0f4ca90 | sorear++ | v6/ (2 files):

[01:27] <dalek> niecza: [v6] Translate more of Niecza::Actions

[01:27] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0f4ca904a6

[01:29] * sorear writes: make (($<mod_internal>.ast ~~ RxOp) ?? $<mod_internal>.ast !! ::RxOp::Sequence.new)

[01:31] <lue> I made a braino then. That'd explain it!

[01:32] <lue> afk # nom time!

[01:36] *** envi joined
[01:46] *** yarp joined
[01:49] *** jaldhar joined
[01:58] *** felliott joined
[01:59] *** mtk left
[02:01] *** noganex_ joined
[02:03] <cotto_work> seen jnthn

[02:03] <aloha> jnthn was last seen in #perl6 1 days 17 hours ago joining the channel.

[02:04] *** noganex left
[02:08] *** mtk joined
[02:09] *** shi left
[02:18] *** impious left
[02:19] <colomon> rakudo: given 10 { when 10 { say "Hello"; continue; }; say "Aha!"; };

[02:19] <p6eval> rakudo 244d0f: OUTPUT«Hello␤Could not find sub &continue␤  in main program body at line 22:/tmp/ypvCgHzx7P␤»

[02:19] <colomon> rakudo: given 10 { when 10 { say "Hello"; resume; }; say "Aha!"; };

[02:19] <p6eval> rakudo 244d0f: OUTPUT«Hello␤Could not find sub &resume␤  in main program body at line 22:/tmp/VELt5fRCrz␤»

[02:21] <colomon> rakudo: given 10 { when 10 { say "Hello"; next; }; say "Aha!"; };

[02:21] <p6eval> rakudo 244d0f: OUTPUT«Hello␤  in '!control' at line 1␤»

[02:23] <colomon> rakudo: given 10 { when 10 { say "Hello"; proceed; }; say "Aha!"; };

[02:23] <p6eval> rakudo 244d0f: OUTPUT«Hello␤Aha!␤»

[02:41] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_lookup_tablet

[02:46] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[02:50] *** molaf__ joined
[02:52] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_lookup_tablet

[02:54] *** molaf_ left
[02:59] *** f00li5h joined
[03:05] <lichtkind> rakudo: my %h = 2; say %h;

[03:06] <p6eval> rakudo 244d0f: OUTPUT«Odd number of elements found where hash expected␤  in '!STORE' at line 5206:CORE.setting␤  in main program body at line 22:/tmp/M8_oKb0s0a␤»

[03:06] <lichtkind> rakudo: my %h = 2,3; say %h;

[03:06] <p6eval> rakudo 244d0f: OUTPUT«2 3␤»

[03:08] <dalek> sprixel: 9b6c989 | diakopter++ | / (10 files):

[03:08] <dalek> sprixel: various fixes (including at least 1 off-by-one);

[03:08] <dalek> sprixel: addl value type defaults, addl value types;

[03:08] <dalek> sprixel: improve default return values

[03:08] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/9b6c9893ba

[03:08] <dalek> sprixel: b6c7e89 | diakopter++ | / (6 files):

[03:08] <dalek> sprixel: some grammar refactorings to better handle expression statements.

[03:08] <dalek> sprixel: efficiency improvements in variable declarations.

[03:08] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/b6c7e89df4

[03:14] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_variable_tablet

[03:17] *** GinoMan joined
[03:19] <dalek> sprixel: 1edf69e | diakopter++ | sprixel/Program.cs:

[03:19] <dalek> sprixel: make command-line read filename's program also use the Functions.pl6 mini-"setting".

[03:19] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/1edf69e910

[03:39] *** gottreu left
[03:47] *** agentzh joined
[03:51] *** rgrau left
[03:56] <diakopter> perlesque: my $t = Diagnostics::StopWatch.StartNew(); sub foo(){}; my int $i=1000000000; repeat {} while (--$i); say($t.Elapsed)

[03:56] <p6eval> perlesque: OUTPUT«00:00:03.5780963␤»

[03:57] <diakopter> that's around 280_000_000 iterations per second..

[03:57] * diakopter wonders what mono's resulting x86 is

[03:58] <diakopter> sorear: do you know how to make mono's JIT write its machine code to a file as well as to program memory?

[03:58] *** kulp left
[03:59] *** kulp joined
[03:59] <diakopter> I'll ask on #mono

[04:02] *** araujo left
[04:09] *** Chillance joined
[04:21] *** lichtkind left
[04:23] *** araujo joined
[04:27] *** Su-Shee left
[04:29] *** Su-Shee joined
[04:31] *** dukeleto left
[04:32] *** dukeleto joined
[04:40] *** temp01 left
[04:42] *** temp01 joined
[04:56] *** satyavvd joined
[04:57] *** temp01 left
[04:59] *** temp01 joined
[05:02] *** temp01 left
[05:03] *** araujo left
[05:04] *** temp01 joined
[05:08] *** temp01 left
[05:09] *** temp01 joined
[05:17] *** temp01 left
[05:19] *** temp01 joined
[05:24] <dalek> mu: 6979509 | sorear++ | misc/dalek-conf.json:

[05:24] <dalek> mu: Remove parrot/pir from poll notification

[05:24] <dalek> mu: review: https://github.com/perl6/mu/commit/6979509f46

[05:25] *** temp01 left
[05:26] *** temp01 joined
[05:33] *** temp01 left
[05:35] *** temp01 joined
[05:39] <sorear> pmurias broke my recompilation checker :/

[05:39] *** temp01 left
[05:41] *** temp01 joined
[05:42] <diakopter> :)

[05:42] <diakopter> add it as a regression test

[05:43] <sorear> diakopter: you can't use perl code to test the build system

[05:43] <sorear> I'm very tempted to revert all of pmurias' changes to the build system

[05:44] *** Trashlord joined
[05:44] <sorear> it was fragile to begin with, and it hasn't reached the mythical "better" point

[05:47] * sorear rebuilds the setting using the old, working driver

[05:50] <sorear> yay that fixed it

[05:51] *** temp01 left
[05:52] *** temp02 joined
[05:59] *** temp02 left
[06:00] *** temp01 joined
[06:08] *** GinoMan left
[06:10] *** temp01 left
[06:11] *** temp01 joined
[06:16] *** temp01 left
[06:16] *** GinoMan_ joined
[06:22] *** temp01 joined
[06:28] *** temp01 left
[06:28] *** temp01 joined
[06:28] *** kaare joined
[06:29] *** kaare is now known as Guest18093

[06:43] <dalek> niecza: 89cb178 | sorear++ | src/Metamodel.pm:

[06:43] <dalek> niecza: Break circular use Metamodel <-> CompilerDriver

[06:43] <dalek> niecza: review: https://github.com/sorear/niecza/commit/89cb1785a1

[06:43] <dalek> niecza: 612b14c | sorear++ | v6/ (2 files):

[06:43] <dalek> niecza: [v6] More Niecza::Actions translation (to 30%)

[06:43] <dalek> niecza: review: https://github.com/sorear/niecza/commit/612b14c16a

[06:50] <dalek> niecza: f3a91f9 | sorear++ | PerlStub.pl:

[06:50] <dalek> niecza: Revert Niecza.proj to old interface

[06:50] <dalek> niecza: 

[06:50] <dalek> niecza: The new interface is causing subtle breakage in the recompilation

[06:50] <dalek> niecza: checker; it's as if $!filename and $!modtime aren't getting set

[06:50] <dalek> niecza: properly, or something.  Also, the new interface breaks the test

[06:50] <dalek> niecza: suite.  I need to debug this later.

[06:50] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f3a91f9fdc

[06:53] *** _twitch joined
[07:08] *** justatheory left
[07:11] <diakopter> sorear: sweet; I got a CIL prog to cause .Net4 to abort:  FatalExecutionEngineError was detected: The runtime has encountered a fatal error. The address of the error was at 0x67503a3a, on thread 0x880. The error code is 0xc0000005. This error may be a bug in the CLR or in the unsafe or non-verifiable portions of user code. Common sources of this bug include user marshaling errors for COM-interop or PInvoke, which may corrupt the stack.

[07:12] <diakopter> but there's no unsafe, no non-verifiable, no user marshaling, no PInvoke :D

[07:13] <diakopter> exitcode 65280

[07:15] <diakopter> oh. it doesn't like me emitting IL that calls the "GetType" method on a built-in value type. apparently compilers are supposed to resolve that at compile time.

[07:23] *** KatrinaTheLamia joined
[07:24] *** rpr_ left
[07:31] *** Trashlord left
[07:34] *** Trashlord joined
[07:36] <sorear> diakopter: What IL are you using to do the call?

[07:41] *** burning_aces joined
[07:45] *** _twitch left
[07:53] *** Maksim_ joined
[07:55] *** banned joined
[07:56] <banned> why rakudo.org ban my IP address ?  and how to remove from its banned address list.

[07:57] <sorear> How do you know you're banned?  rakudo.org has been extremely unreliable for weeks, you're probably just unlucky.

[07:58] <banned> I could access it with another IP which is in the class-C with my banned IP.

[07:59] *** Tedd1 joined
[08:22] *** amkrankruleuen left
[08:26] *** amkrankruleuen joined
[08:34] *** exoTek joined
[08:40] *** wooden left
[08:40] <diakopter> banned: what your banned class-C

[08:40] *** kensanata joined
[08:43] <szabgab> rakudo: 'abc-def' ~~ m/(\w*)/; $z = $/[0]

[08:43] <p6eval> rakudo 244d0f: OUTPUT«===SORRY!===␤Symbol '$z' not predeclared in <anonymous> (/tmp/DmUjOU89Gi:22)␤»

[08:43] *** cogno joined
[08:43] <szabgab> rakudo: 'abc-def' ~~ m/(\w*)/; my $z = $/[0]

[08:44] <p6eval> rakudo 244d0f:  ( no output )

[08:44] *** exoTek left
[08:45] <szabgab> rakudo: "abc-def" ~~ m/(\w*)/; my $z = $/[0]

[08:45] <p6eval> rakudo 244d0f:  ( no output )

[08:45] <szabgab> rakudo: "abc-def" ~~ m/(\w*)/; my $z = $/[0]; say $z

[08:45] <p6eval> rakudo 244d0f: OUTPUT«abc␤»

[08:47] *** burning_aces left
[08:47] <diakopter> sorear: hard to say :) all of sprixel.exe ?

[08:52] <diakopter> sorear: it's more the attempting Saving of the assembly that does it, I think

[08:52] <diakopter> the assembly that sprixel.exe generates, I mean

[08:52] <diakopter> sorear: oh btw, I got compact arrays going

[08:52] <diakopter> literal ones too

[08:54] <sorear> neat

[08:57] *** cogno left
[08:58] <dalek> mu: 987ceca | diakopter++ | misc/dalek-conf.json:

[08:58] <dalek> mu: convert sprixel to push notifications

[08:58] <dalek> mu: review: https://github.com/perl6/mu/commit/987cecab6a

[09:03] *** yarp left
[09:04] *** cogno joined
[09:05] <dalek> sprixel: 0cf900d | diakopter++ | / (10 files):

[09:05] <dalek> sprixel: Array literals, compact typed arrays.

[09:05] <dalek> sprixel: no creation of zero-filled fixed-sized arrays yet.

[09:05] <dalek> sprixel: lots more primitive type short aliases.

[09:05] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/0cf900d0f1

[09:05] <diakopter> neat; about a 1-second delay

[09:05] <diakopter> for the github push notify

[09:06] <sorear> another nice thing - it handles branches automatically

[09:09] * sorear thinks there should be some named, common operation for (count == 1 ?? item !! parcel)

[09:09] * sorear is thinking <<$foo>> should use it, should act like words $foo

[09:13] *** cogno left
[09:13] *** masak joined
[09:13] <masak> morning, #perl6!

[09:15] <tadzik> o/

[09:16] <sorear> hi masak!

[09:17] <masak> ok, let's get $dayjob out of the way, so I can indulge in a bit of Perl 6 later :)

[09:23] *** temp01 left
[09:24] <szabgab> rakudo: class X { has $.y is rw; sub qq() { say "sub $.y" }; method rr() { say "method $.y"; qq() } }; my $z = X.new; $z.y = 23; $z.rr()

[09:24] <p6eval> rakudo 244d0f: OUTPUT«method 23␤Null PMC access in find_method('y')␤  in 'X::qq' at line 22:/tmp/MwAdb_y0Iu␤  in 'X::rr' at line 22:/tmp/MwAdb_y0Iu␤  in main program body at line 22:/tmp/MwAdb_y0Iu␤»

[09:24] <szabgab> so sub() in a class does not know about the attributes of the class?

[09:24] *** cogno joined
[09:25] *** temp01 joined
[09:25] <sorear> szabgab: subs don't have an invocant parameter

[09:25] <sorear> niecza: "foo".bar:sym<baz>

[09:25] <p6eval> niecza v1-90-gf3a91f9: OUTPUT«Unhandled exception: Unable to resolve method bar:sym<baz> in class Str␤  at (eval) line 1 (MAIN mainline @ 1)␤  at /home/p6eval/niecza/lib/SAFE.setting line 1064 (SAFE C381_ANON @ 1)␤  at /home/p6eval/niecza/lib/SAFE.setting line 1064 (SAFE module-SAFE @ 29)␤  at

[09:25] <p6eval> ../home/p6eval/niec…

[09:26] <szabgab> what is an "invocant parameter"?

[09:28] *** temp01 left
[09:29] *** dakkar joined
[09:29] <snarkyboojum> szabgab: http://perlcabal.org/syn/S06.html#Invocant_parameters

[09:30] <diakopter> perlesque: my int64 @i = [2,3,4,10000000000]; say(@i[3]); say(@i.GetType);

[09:30] <p6eval> perlesque: OUTPUT«10000000000␤System.Int64[]␤»

[09:31] *** temp01 joined
[09:31] *** cogno left
[09:31] *** banned left
[09:34] <sorear> perlesque: my int $i = 15; say($i.ToString)

[09:34] <p6eval> perlesque: OUTPUT«15␤»

[09:34] <diakopter> perlesque: my int $i = 15; say($i)

[09:34] <p6eval> perlesque: OUTPUT«15␤»

[09:35] <diakopter> perlesque: perlesque: my int $i = 15; say($i.ToString.ToString)

[09:35] <p6eval> perlesque: OUTPUT«15␤»

[09:35] <diakopter> heh

[09:35] <sorear> perlesque: my int $i = 15; say($i.GetType)

[09:35] <p6eval> perlesque: OUTPUT«␤Unhandled Exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.InvalidProgramException: Invalid IL code in t:Exec (): IL_003f: callvirt  0x0a000006␤␤␤  at sprixel.FrameBase.Run () [0x00000] in <filename

[09:35] <p6eval> ..unkno…

[09:35] <diakopter> yeah

[09:35] <sorear> methinks the MS CLR was right to complain about unverifiable code.

[09:35] <diakopter> ooo callvirt on a value type

[09:35] *** temp01 left
[09:35] <sorear> you need to inject a box instruction

[09:36] <diakopter> troonuff

[09:36] <sorear> when calling an inherited virtual method on a value type

[09:36] * diakopter goes to fix runsharp

[09:36] <sorear> actually any inherited method

[09:37] <sorear> or just use constrained.

[09:38] *** temp01 joined
[09:40] <dalek> sprixel: d1878b9 | diakopter++ | sprixel/ (2 files):

[09:40] <dalek> sprixel: what I think fixes this.

[09:40] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/d1878b9c97

[09:41] <diakopter>  perlesque: my int $i = 15; say($i.GetType)

[09:41] <p6eval> perlesque: OUTPUT«System.Int32␤»

[09:41] <diakopter> better

[09:42] <diakopter>  perlesque: my double $i = 15; say($i.GetType)

[09:42] <p6eval> perlesque: OUTPUT«System.Double␤»

[09:42] <diakopter> perlesque: my double $i = 15.2; say($i.GetType)

[09:42] <p6eval> perlesque: OUTPUT«unhandled node type: Float_literal␤40 Statement_list␤   40 Statement_list␤      37 Sub_declaration␤         90 say␤         40 Statement_list␤            40 Statement_list␤               61 Infix_expr␤                  61 Infix_expr␤                     61 Infix_expr␤             

[09:42] <p6eval> ..…

[09:43] <diakopter> oops; forgot to implement Float_literal

[09:45] <dalek> sprixel: e868e2b | diakopter++ | sprixel/src/ (2 files):

[09:46] <dalek> sprixel: Float_literal

[09:46] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/e868e2bf38

[09:46] <diakopter> perlesque: my double $i = 15.2; say($i.GetType)

[09:46] <p6eval> perlesque: OUTPUT«System.Double␤»

[09:48] <dalek> sprixel: c2b973d | diakopter++ | sprixel/src/compiler/EmitterPass.cs:

[09:48] <dalek> sprixel: now make it work

[09:48] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/c2b973dd53

[09:49] *** temp01 left
[09:49] *** temp01 joined
[09:49] <diakopter> perlesque: my double $i = 15.2; my single $j = 0.88; say($i/$j)

[09:49] <p6eval> perlesque: OUTPUT«17.2727271495772␤»

[09:50] <diakopter> perlesque: my double $i = 15.2; my single $j = 0.88; say($i = $j)

[09:50] <p6eval> perlesque: OUTPUT«0.879999995231628␤»

[09:50] <diakopter> o_O

[09:50] <diakopter> oh yeah

[09:51] <diakopter> I shouldn't've forgotten about that

[09:52] * diakopter goes to look in S09 for the syntax for allocating zeroed fixed-size compact typed arrays

[09:52] <diakopter> and hopes there isone

[09:52] <diakopter> oh, yes.

[09:52] <diakopter> my Book @library[1_000_000]

[09:57] <masak> szabgab: subs "belong to the class". attributes are declared in the class but "belong to the object". therefore, the sub can't see the attributes.

[10:04] *** QinGW left
[10:04] *** glow left
[10:06] <dalek> sprixel: 90961e1 | diakopter++ | / (6 files):

[10:06] <dalek> sprixel: allocating zeroed fixed-size compact typed arrays

[10:06] <dalek> sprixel: my byte @bar[9_000_000]; say(@bar.length)

[10:06] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/90961e120f

[10:07] <diakopter> my byte @bar[9_000_000]; say(@bar.length)

[10:07] <diakopter> perlesque: my byte @bar[9_000_000]; say(@bar.length)

[10:07] <p6eval> perlesque: OUTPUT«9000000␤»

[10:07] <diakopter> perlesque: my byte @bar[90_000_000]; say(@bar.length)

[10:07] <p6eval> perlesque: OUTPUT«90000000␤»

[10:07] <diakopter> perlesque: my byte @bar[900_000_000]; say(@bar.length)

[10:07] <p6eval> perlesque: OUTPUT«900000000␤»

[10:07] <diakopter> heh

[10:07] <diakopter> perlesque: my byte @bar[9_000_000_000]; say(@bar.length)

[10:07] <p6eval> perlesque: OUTPUT«␤Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object␤  at sprixel.perlesqueParser.emitCode (sprixel.Env e, Antlr.Runtime.Tree.CommonTree node, Antlr.Runtime.Tree.CommonTree nextNode, sprixel.Operand[] downwardArgs) [0x00000] in

[10:07] <p6eval> ..<…

[10:08] <diakopter> oh, arrays limited by int32

[10:08] <diakopter> unless mono built with bigarrays

[10:09] <diakopter> perlesque: my byte @bar[1_000_000_000]; say(@bar.length)

[10:09] <p6eval> perlesque: OUTPUT«1000000000␤»

[10:09] <diakopter> took a while to steal a billion bytes

[10:10] <diakopter> perlesque: my int @bar[1_000_000_000]; say(@bar.length)  # fail

[10:10] <p6eval> perlesque: OUTPUT«␤Unhandled Exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.OutOfMemoryException: Out of memory␤  at (wrapper managed-to-native) object:__icall_wrapper_mono_array_new_specific (intptr,int)␤  at t.Exec ()

[10:10] <p6eval> ..[…

[10:10] <diakopter> immediate Out of memory

[10:10] <diakopter> hrm

[10:11] <sorear> mono arrays are Int32 indexed in default builds, regardless of CPU

[10:11] <diakopter> (as I said above)

[10:11] <sorear> and the heap cannot exceed 3GB

[10:12] <diakopter> perlesque: my byte &bar[900_000_000]; say(&bar.length)

[10:12] <p6eval> perlesque: OUTPUT«900000000␤»

[10:12] <diakopter> heh

[10:12] <diakopter> it actually doesn't care about the sigil anywhere except sub invocations (by name)

[10:13] <diakopter> since there's no list context or such

[10:13] <szabgab> masak: thanks

[10:17] *** temp01 left
[10:18] <dalek> nqp-rx: 412953d | bacek++ | src/setting/IO.pm:

[10:18] <dalek> nqp-rx: Improve c<slurp> to be more consistent with Perl6 and work in utf8/binary mode

[10:18] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/412953d1e3

[10:18] <dalek> nqp-rx: b812ff7 | bacek++ | src/stage0/nqp-setting.nqp:

[10:18] <dalek> nqp-rx: Reboostrap setting only.

[10:18] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/b812ff74dd

[10:22] *** temp01 joined
[10:26] <masak> rakudo: class A { has $!x; sub foo { say "before"; say $!x; say "after" }; method bar { foo } }; A.new.bar

[10:26] <p6eval> rakudo 244d0f: OUTPUT«before␤Null PMC access in get_attr_str()␤  in 'A::foo' at line 22:/tmp/EKWvGZ6hdz␤  in 'A::bar' at line 22:/tmp/EKWvGZ6hdz␤  in main program body at line 22:/tmp/EKWvGZ6hdz␤»

[10:26] * masak submits rakudobug

[10:27] <masak> szabgab++ # finding one more Null PMC access

[10:30] *** M_o_C joined
[10:30] * sorear out.

[10:30] <dalek> niecza: a8291b0 | sorear++ | v6/NieczaActions.pm6:

[10:30] <dalek> niecza: [v6] More actions converted

[10:30] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a8291b0717

[10:40] *** hanekomu joined
[10:44] *** temp01 left
[10:49] *** gimix left
[10:49] *** temp01 joined
[10:56] *** temp01 left
[10:57] *** temp01 joined
[11:03] *** glow joined
[11:10] *** roen_ joined
[11:13] *** temp01 left
[11:15] *** araujo joined
[11:45] *** satyavvd left
[11:45] *** cogno joined
[11:59] *** jhuni joined
[11:59] *** jhuni left
[12:06] *** hanekomu left
[12:08] *** rgrau joined
[12:10] *** cogno left
[12:11] *** coldhead left
[12:13] *** sky4 joined
[12:14] <sky4> hi

[12:14] *** sky4 left
[12:29] *** masak left
[12:29] *** masonkramer left
[12:30] *** masonkramer joined
[12:31] *** JimmyZ joined
[12:32] *** JimmyZ left
[12:41] * [Coke] wonders if perl6 will be able to carve out a niche in the coldfusion space.

[12:41] <[Coke]> (because then I can use it for something resembling $dayjob)

[12:44] *** zby_home joined
[12:55] *** cogno joined
[13:00] *** takadonet joined
[13:00] <takadonet> morning all

[13:03] <Maksim_> takadonet: Actually it is evening here :)

[13:03] <takadonet> Maksim_: well good evening to you then 

[13:04] *** pmurias joined
[13:04] <pmurias> [Coke]: what's the coldfusion space?

[13:09] <moritz_> flussence: are there easy instructions for restarting the try.rakudo.org backend?

[13:10] *** cogno left
[13:16] <flussence> moritz_: it's pretty straightforward but a bit fiddly, the backend is running in a screen session as the tryrakudo user (manually), the frontend's running under apache

[13:18] <moritz_> tryrakudo@feather3:~$ screen -Urd

[13:18] <moritz_> Cannot open your terminal '/dev/pts/0' - please check.

[13:18] * moritz_ hates it

[13:18] <flussence> I'd try to explain it better, but I'm at $dayjob and all my ssh keys are at $home

[13:19] <flussence> try su - tryrakudo or something like that

[13:19] <moritz_> that's what I did

[13:19] <flussence> hmm

[13:19] <moritz_> I'll let you do it once you get home :-)

[13:19] <flussence> will do

[13:20] <flussence> (the backend thing should be in an @boot cronjob anyway, I'll try and fix that)

[13:20] <moritz_> would be nice if it were a bit easier to restart

[13:20] *** wamba joined
[13:22] *** yarp joined
[13:24] <flussence> .oO(where did ash_ disappear off to, anyway?)

[13:25] *** Cjo joined
[13:26] <Cjo> what do i do here??

[13:29] <Cjo> hello??

[13:30] <Cjo> yeah cna u tell mme what to do here??

[13:32] *** Cjo left
[13:32] <jasonmay> someone had a bit too much coffee..

[13:33] *** MayDaniel joined
[13:33] <flussence> I would've helped, but I don't know the answer to those ternaries... :(

[13:34] <[Coke]> pmurias: web dev. it's basically a server side scripting/tag language.

[13:35] *** wamba left
[13:46] *** jaldhar left
[13:46] *** yarp left
[13:46] *** MayDaniel left
[13:49] *** kulp left
[13:49] *** kulp joined
[13:49] *** kulp left
[13:51] *** M_o_C left
[13:54] *** agentzh left
[14:02] *** amkrankruleuen left
[14:02] *** amkrankruleuen joined
[14:29] *** [Coke] left
[14:30] *** shi joined
[14:39] *** lichtkind joined
[14:41] *** mtk left
[14:46] *** mtk joined
[14:50] *** felliott left
[14:51] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_basics_tablet

[14:51] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[14:51] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_io_tablet

[14:56] *** lue left
[15:01] *** Maksim_ left
[15:04] *** amkrankruleuen left
[15:05] *** Patterner left
[15:06] *** _twitch joined
[15:07] *** Psyche^ joined
[15:07] *** Psyche^ is now known as Patterner

[15:08] *** cjk101010 joined
[15:21] *** MayDaniel joined
[15:27] *** dsp_ left
[15:28] *** spq1 joined
[15:28] *** dsp_ joined
[15:30] *** WonTu joined
[15:30] *** WonTu left
[15:34] *** Tedd1 left
[15:41] *** am0c joined
[15:50] *** donaldh joined
[15:52] *** wooden joined
[15:52] *** envi left
[15:53] *** tty234 left
[15:56] *** orafu left
[15:56] *** tty234 joined
[15:56] *** orafu joined
[15:58] *** satyavvd joined
[16:00] *** felliott joined
[16:03] *** mtk left
[16:05] *** mtk joined
[16:08] *** donaldh left
[16:16] *** PZt left
[16:21] *** hercynium joined
[16:22] *** Tedd1 joined
[16:23] *** cjk101010 left
[16:23] *** [hercynium] joined
[16:26] <tadzik> good localtime :)

[16:26] *** hercynium left
[16:26] *** [hercynium] is now known as hercynium

[16:27] *** plobsing left
[16:29] * TimToady will be driving most of today

[16:30] * moritz_ wishes TimToady a safe journey

[16:34] *** satyavvd left
[16:35] <lichtkind> me too :)

[16:35] <lichtkind> i mean I too ?

[16:35] <tadzik> me too :)

[16:35] <lichtkind> thanks :)

[16:36] <tadzik> hey, that was for TimToady :)

[16:36] <[particle]> enjoy the sunshine when you get far enough south to see it!

[16:36] *** roen_ left
[16:37] <lichtkind> tadzik: :) :) i mean thank you for helping to wrestle with the english lang, we all wish tim a safe journey of course :)

[16:37] <tadzik> :)

[16:43] *** JimmyZ joined
[16:44] <TimToady> Danke schön!

[16:46] *** glow left
[16:46] *** JimmyZ left
[16:48] <lichtkind> :)

[16:50] *** plobsing joined
[16:50] *** MayDaniel left
[16:52] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[16:53] *** pmurias left
[16:59] <diakopter> perlesque:  my single @bar[1_000_000]; my $i=0; my $n=@bar.length - 1; loop (;$i<$n;) {@bar[$i] = $n/(++$i)}; say(@bar[3235])

[16:59] <p6eval> perlesque: OUTPUT«309␤»

[16:59] *** kanishka joined
[16:59] <lichtkind> diakopter: which compiler is perlesque?

[16:59] <diakopter> it's the perlesque compiler

[17:00] <lichtkind> never heard of it

[17:00] <diakopter> you and I have discussed it several times over the past few years :)

[17:00] *** gbacon joined
[17:01] <lichtkind> maybe it changed its name :)

[17:01] <lichtkind> i found http://diakopter.blogspot.com/2010/05/whats-implemented-in-perlesque-whats.html

[17:01] <diakopter> yeah, I guess sorta

[17:01] <lichtkind> diakopter: so what was it name dbefore?

[17:02] <diakopter> perlesque is a strongly-typed (and fully type-annotated) OO/functional subset of p6

[17:02] *** JimmyZ joined
[17:02] <diakopter> by that definition, it never had another name

[17:03] <diakopter> but I will be reusing the sprixel name as the compiler/runtime that targets the perlesque language as an intermediate language

[17:04] <diakopter> perlesque isn't a p6 implementation, per se, in that it's not intended to ever implement "6.0"

[17:04] <diakopter> but hopefully sprixel might :P

[17:07] <diakopter> lichtkind: but soon here (when jnthn recuperates and regains stamina/tuits to continue hacking on nqpclr/6model), I'll put perlesque/sprixel on the back burner again, and go back to porting nqp-rx's regex to the CLR (written in nqp though)

[17:08] <lichtkind> so its a stepping stone for sprixel?

[17:08] <diakopter> perlesque is, sure

[17:09] <lichtkind> thanks always nice when starting to see clearer :)

[17:09] <diakopter> but perlesque itself is essentially complete now

[17:09] <lichtkind> great

[17:09] <diakopter> thought I keep finding LHF that's trivially implementable

[17:10] <diakopter> (so maybe it'll keep growing) ;)

[17:10] <lichtkind> so there is a chance to have full fledged perl 6 on .net and mono?

[17:10] <lichtkind> and what you mean by LHF?

[17:11] <diakopter> well, yes :P but a much better chance from niecza and/or rakudo

[17:11] <diakopter> 6model/nqpclr is intended to be a new backend/base for rakudo

[17:11] <diakopter> (on .net and mono)

[17:12] <diakopter> but sorear's niecza has huge momentum and is being bootstrapped quickly

[17:14] <lichtkind> diakopter im recently not that insights so good you tell me

[17:14] <diakopter> sorear's a (fulltime, I bet) student, and jnthn, pmichaud, moritz_, masak, colomon, TimToady, and I all have fulltime jobs, last I heard... so that restricts tuits :D  otoh p6 is part of TimToady's job description

[17:15] <diakopter> and pmurias is a double-fulltime student ;)

[17:15] <diakopter> or something

[17:15] <diakopter> mberends works 3-4 fulltime jobs I think

[17:15] <colomon> Yes, needing to earn a living does limit my ability to hack on Perl 6 at will...

[17:16] <lichtkind> tim is working for a chip factory if i recall correctly?

[17:16] <diakopter> a $1B chip design company, yeah

[17:17] <diakopter> I don't know if they mfr their own chips

[17:17] <lichtkind> i think there were fabless :)

[17:17] <lichtkind> and what was their name?

[17:19] <lichtkind> my involvement is also limited but more because other interests and projects, mostly in the wxperl field

[17:19] *** glow joined
[17:20] *** glow left
[17:21] *** plobsing left
[17:31] *** cdarroch joined
[17:31] *** cdarroch left
[17:31] *** cdarroch joined
[17:36] *** gottreu joined
[17:37] <JimmyZ> Last time I heard that two rakudo core hackers will be fulltime rakudo hackers.

[17:40] <diakopter> when did you hear that

[17:41] <tadzik> and where

[17:41] <diakopter> pmichaud & jnthn had significant grants over the past few years, but I can't imagine they were fulltime

[17:42] * diakopter attacks multidimensional arrays

[17:42] <colomon> They weren't.

[17:42] <JimmyZ> here or phasers

[17:42] <moritz_> JimmyZ: you probably misunderstood something

[17:42] <diakopter> JimmyZ: when?

[17:42] <colomon> And I don't believe they are expected to be this year, either.

[17:42] <JimmyZ> moritz_: maybe

[17:42] <diakopter> JimmyZ: when did you hear that

[17:43] * moritz_ would love to, but is probably not really qualified for that

[17:44] <JimmyZ> diakopter: I forgot it

[17:44] <diakopter> btw I'm sure I left plenty of folks out above when mentioning fulltime jobs

[17:45] * diakopter dives into multidimensional arrays

[17:45] <diakopter> compact, non-auto-extending

[17:46] <diakopter> actually though

[17:46] *** MayDaniel joined
[17:46] <diakopter> I could do auto-extending ones too

[17:47] *** gottreu left
[17:47] <JimmyZ> ah, here http://irclog.perlgeek.de/phasers/2010-12-07#i_3065232

[17:47] *** gottreu joined
[17:47] <JimmyZ> Did I misunderstand?

[17:48] <diakopter> note the wink

[17:48] <moritz_> JimmyZ: it was a guess from PerlJam about what masak's sekrit was

[17:48] <diakopter> PerlJam was jokingly suggesting that masak was hinting that quote

[17:49] <JimmyZ> sigh, I can't understand english joke.

[17:49] *** pmurias joined
[17:50] <moritz_> well, humor is very hard to understand in foreign languages and cultures

[17:50] <pmurias> diakopter: what would being a double full-time student mean?

[17:50] <diakopter> grad school?

[17:51] <flussence> try.rakudo's alive again, I've put a .txt in ~tryrakudo in case I'm not around next time

[17:51] <diakopter> (which is where I thought you were; sorry if I'm wrong)

[17:51] <moritz_> "full time" usually means nominally 8 hours work per day - "double full time" would be 16 hours then

[17:51] <moritz_> not unheard of

[17:51] <diakopter> right :)

[17:51] <diakopter> esp grad school

[17:52] * pmurias spends much less the 8 hours on studing daily

[17:52] <pmurias> s/the/then/

[17:52] <diakopter> s/then/than/

[17:52] <pmurias> yes

[17:52] <pmurias> and i'm an undergraduate student

[17:52] *** justatheory joined
[17:52] <diakopter> oh

[17:53] <diakopter> in theory..

[17:53] <pmurias> ?

[17:53] <justatheory> hrm?

[17:53] <diakopter> nothing..

[17:54] <diakopter> moritz_: how does one denote an array type in a routine signature?

[17:54] <diakopter> a signature w/o variable names

[17:55] <moritz_> Array  ?

[17:55] <moritz_> rakudo: sub f(Array $) { }

[17:55] <p6eval> rakudo 244d0f:  ( no output )

[17:55] <diakopter> oops, I meant a compact aray

[17:55] <diakopter> so, a primitive type

[17:55] <moritz_> Array[10] for a packed array, iirc

[17:55] <diakopter> what would the 10 denote there

[17:56] <diakopter> I need a type name

[17:56] <moritz_> 10 is the number of array items

[17:56] <moritz_> the [] is just a parametrization, which is part of the type name

[17:56] <diakopter> I wouldn't want to limit the routine's signature to the number of items in the array

[17:56] <diakopter> dimensionality, yes

[17:57] <diakopter> but I need to be able to say  sub f(int[] --> int)  essentially

[17:57] <diakopter> so what's the right way to write  int[]

[17:57] <moritz_> Array[int] --> int then

[17:58] <diakopter> ergh.. but there's really not an "Array" here :/

[17:58] <diakopter> how about dimensionality

[17:58] <diakopter> the second parameter to Array?

[17:58] <moritz_> sorry, if it's not an Array then I don't know what it is

[17:59] <moritz_> and neither how to write it

[18:00] *** risou joined
[18:00] *** Kodi joined
[18:01] *** justatheory left
[18:01] <Kodi> In RT, how do you mark one bug as a duplicate of another?

[18:01] <diakopter> not an uppercase Array

[18:01] <moritz_> Kodi: Links -> Merge into $other_ticket_id

[18:02] <diakopter> moritz_: looking through S09, it mentions the uppercase Array only twice, at the very bottom

[18:02] <diakopter> Array, as such, I mean

[18:03] <moritz_> how many mentions would you want?

[18:03] <diakopter> I guess what I'm getting at is where in the Snn do I find something telling me that @ means full blown Array type

[18:03] <moritz_> @ means Positional

[18:03] <arnsholt> @ means Positional, IIRC

[18:03] <moritz_> not full-blown Array

[18:03] <diakopter> ok

[18:04] <Su-Shee> good evening everyone. 

[18:04] <JimmyZ> good evening Su-Shee 

[18:05] *** risou left
[18:05] *** cdarroch left
[18:06] <tadzik> o/

[18:06] <diakopter> moritz_: assume I can do Array[some_primitive_type].  now, how to limit it by dimensionality?  make up my own syntax/api by making the second parameter the number of dimensions?

[18:07] <diakopter> or just  Array of Array of Array of int  and such

[18:07] *** cdarroch joined
[18:07] *** cdarroch left
[18:07] *** cdarroch joined
[18:07] <moritz_> would be Array[int;int;int] iirc

[18:08] *** pmurias left
[18:08] <moritz_> though I'm not really sure

[18:08] <diakopter> oh

[18:08] <diakopter> that seems logical

[18:08] <diakopter> well

[18:09] <diakopter> one would need to support both to get other possibilities

[18:10] *** justatheory joined
[18:13] <diakopter> so, perlesque will deviate from S09 in that "Unless explicitly declared to be of fixed size, such arrays are autoextending just like ordinary Perl arrays" won't be true, since every array at that level is fixed-size (like all CLR arrays).  Obviously sprixel's Array would merely be a wrapper on List<GeneralContainerObject>, which is exactly what nqpclr/6model does now.

[18:14] <diakopter> when assigning to CLR array variables, however, obviously the array variable can then refer to an array of a different size from its original

[18:14] <diakopter> sorry, thinking half-aloud here

[18:14] <diakopter> List<RakudoObject> is nqpclr/6model's edition

[18:15] <diakopter> where List<> is the CLR's built-in generic auto-extending array

[18:15] <diakopter> with List semantics

[18:19] *** Maksim_ joined
[18:22] <dalek> sprixel: c94a706 | diakopter++ | / (6 files):

[18:22] <dalek> sprixel: add primitive boolean literals (not exactly kosher either)

[18:22] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/c94a7064da

[18:23] <diakopter> perlesque: say(Type.GetType('System.Collections.Generic.List`1', false, true))

[18:23] <p6eval> perlesque: OUTPUT«System.Collections.Generic.List`1[T]␤»

[18:23] *** pmurias joined
[18:23] *** dakkar left
[18:25] *** JimmyZ left
[18:28] *** plobsing joined
[18:38] *** Maksim_ left
[18:40] *** Maksim_ joined
[18:47] <pmichaud> good afternoon, #perl6

[18:47] <tadzik> 'afternoon pmichaud 

[18:48] <tadzik> pmichaud: mind taking a look at the worry patch I sent to nqp-rx GH issues?

[18:49] <pmichaud> I saw it.... how does it differ from the existing .panic, ooc?

[18:49] <moritz_> it doesn't die

[18:50] <moritz_> (at least it shouldn't)

[18:50] <tadzik> well, it prints to stderr instead of dying. I tried to refactor the common parts to some 'panicmsg' method but it gave some weird effects when maketested

[18:50] *** _twitch left
[18:50] <pmichaud> hmmm

[18:51] <pmichaud> at some point I'd probably want it to work a lot like STD.pm's .worry

[18:51] <pmichaud> i.e., it caches the worries up for later

[18:53] <tadzik> at some point, maybe. But first make it run, then make it right, no?

[18:53] <pmichaud> well, "first make it run" implies "don't create an API (that others will use) that you then throw away"

[18:54] <pmichaud> if people think of .worry as being the same as warn/note, that's a bit of an issue

[18:54] <tadzik> hmm

[18:54] <pmichaud> .worry in STD.pm doesn't issue anything to STDERR until/unless something happens later, iirc

[18:54] <tadzik> std: 0123 #OK octal

[18:54] <p6eval> std 625303c: OUTPUT«ok 00:01 118m␤»

[18:54] <tadzik> like this?

[18:55] <pmichaud> yes, that's one example

[18:55] <pmichaud> I think there are others

[18:56] <pmichaud> std:  0123 + 456

[18:56] <p6eval> std 625303c: OUTPUT«Potential difficulties:␤  Leading 0 does not indicate octal in Perl 6; please use 0o123 if you mean that at /tmp/auGcMaBoLV line 1:␤------> [32m0123[33m⏏[31m + 456[0m␤ok 00:01 120m␤»

[18:56] <moritz_> std: $x $x

[18:56] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable $x is not predeclared at /tmp/WbJltL_xHg line 1:␤------> [32m$x[33m⏏[31m $x[0m␤Two terms in a row at /tmp/WbJltL_xHg line 1:␤------> [32m$x [33m⏏[31m$x[0m␤    expecting any of:␤   bracketed infix␤        infix or meta-infix␤   

[18:56] <p6eval> ..statement modifier…

[18:56] <pmichaud> std:  0123 $x

[18:56] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row at /tmp/QbAj8PX41V line 1:␤------> [32m0123 [33m⏏[31m$x[0m␤    expecting any of:␤     bracketed infix␤        infix or meta-infix␤    statement modifier loop␤Other potential difficulties:␤  Leading 0 does not indicate octal

[18:56] <p6eval> ..in Perl 6; please …

[18:56] <pmichaud> Note that the 0123 error is listed under "other potential difficulties", as opposed to being warned about immediately.

[18:58] <tadzik> right

[18:58] <pmichaud> iiuc, .worry means that the compiler thinks there might be a problem in the code that can lead to a later error, and gives the programmer the opportunity to use '#OK' to mean "don't worry about it"

[18:59] <moritz_> is .worry related to .suppose ?

[18:59] <tadzik> so that should rather be 'put the message in some array for later' than 'print to stderr'?

[18:59] <pmichaud> well, it depends on how/where you're wanting to use .worry at the moment

[18:59] <tadzik> hmm

[19:00] <pmichaud> if you're wanting a mechanism to ultimately do the same as STD's .worry, then yes we should make it clear that we're storing up possible difficulties

[19:00] <pmichaud> if you're wanting to issue warnings to stderr in the middle of the compile (but not throw an exception), perhaps we want <.note> or something like that.

[19:00] <tadzik> I see

[19:01] <moritz_> +1 to calliing it .note for now

[19:01] <pmichaud> I'd also be very pleased to see us refactor the position code to be .locmess

[19:01] <pmichaud> (to match STD)

[19:02] <tadzik> moritz_: for calling it .note and using .note instead of .worry for now?

[19:02] <moritz_> tadzik: right

[19:02] <moritz_> pmichaud: I don't dare touching nqp-rx while it fails tests

[19:02] <flussence> (oh, so *that's* the difference between note and warn...)

[19:02] <tadzik> does it?

[19:02] <pmichaud> I think nqp-rx is passing again, but perhaps I'm wrong about that?

[19:03] <moritz_> probably depends on which parrot

[19:03] <tadzik> it does for me

[19:03] <tadzik> for the same Parrot Rakudo uses, at least

[19:03] <pmichaud> current head passed for me yesterday, I think

[19:03] <tadzik> Rakudo master

[19:03] <pmichaud> I'll try again

[19:03] *** MayDaniel left
[19:03] <moritz_> t/nqp/33-init.t triggers an assertion failure in src/call/context.c

[19:04] *** plobsing left
[19:05] <pmichaud> testing

[19:05] * moritz_ updates to latest parrot

[19:05] <pmichaud> I'm testing the version I had yesterday that seemed to work

[19:06] *** kanishka left
[19:06] <pmichaud> RELEASE_2_11_0-687-gcbccec7   appears to work with nqp-rx for me

[19:06] <pmichaud> trying current head

[19:07] <pmichaud> (building parrot)

[19:09] <moritz_> still fails here in init.t

[19:09] <moritz_> on RELEASE_2_11_0-771-g40e018d

[19:13] <pmichaud> fails here also

[19:13] <pmichaud> Guess I better file a ticket.

[19:14] *** Lorn left
[19:14] <pmichaud> although I don't get any error message about the assertion failure :(

[19:15] <pmichaud> http://gist.github.com/768388

[19:15] <moritz_> pmichaud: http://nopaste.snit.ch/27577 is what I get

[19:16] <pmichaud> I'll add that to the ticket as well.

[19:18] <pmichaud> oh wait, there were some updates to nqp-rx

[19:18] <pmichaud> let me try again

[19:21] *** shi left
[19:24] *** impious joined
[19:25] <dalek> rakudo: da243fa | moritz++ | tools/bisect-parrot.pl:

[19:25] <dalek> rakudo: [tools] add an experimental script for bisecting parrot

[19:25] <dalek> rakudo: 

[19:25] <dalek> rakudo: You can use it to automatically rebuild rakudo and run it against a test file

[19:25] <dalek> rakudo: when bisecting parrot. Call it as

[19:25] <dalek> rakudo: 

[19:25] <dalek> rakudo:     $ git bisect run ../tools/bisect-parrot.pl test-file.t

[19:25] <dalek> rakudo: 

[19:25] <dalek> rakudo: Assuming that test-file.t returns with a non-zero exit status if it fails

[19:25] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/da243fa4dc

[19:26] <moritz_> feedback on that script would be very welcome

[19:29] *** brijesh__ joined
[19:29] <pmichaud> http://trac.parrot.org/parrot/ticket/1935

[19:29] <pmichaud> trying rakudo on parrot head

[19:30] <moritz_> also fails

[19:30] *** brijesh__ left
[19:30] <moritz_> even worse

[19:30] <moritz_> which I reported on #parrot

[19:31] <pmichaud> I'll file a ticket for that too, as soon as I get a build.

[19:31] *** Maksim_ left
[19:32] <pmichaud> Hard to believe we're less than 2 weeks before a major Parrot release (3.0) and we keep seeing these sorts of problems.

[19:32] <pmichaud> s/Hard to believe/Incredible that/

[19:32] <moritz_> as I said on #parrot the other day, parrot development is "entertaining" these days

[19:32] <pmichaud> I like the quotation marks :-)

[19:32] <pmichaud> maybe I should tweet that :-)

[19:33] <pmichaud> under the rakudoperl twitter account :)

[19:33] *** plobsing joined
[19:34] *** Khisanth left
[19:35] <PerlJam> pmichaud: you should save the sniping for when 3.0 comes out and the problems are still there

[19:36] <pmichaud> PerlJam: somehow I think that's a "low road" approach

[19:36] <pmichaud> if I see a problem before it can become a bigger problem, I should report it.

[19:36] <pmichaud> besides, we've already been through the case of major parrot releases breaking rakudo (2.6.0, 2.9.0)

[19:36] <pmichaud> I don't think I need to make the point stronger than that :)

[19:36] <moritz_> .oO( "you'll take the high road \n and I take the low road \n and I'll be in Scotland befoooore you ..." )

[19:37] <pmichaud> sorry, I meant 2.9.0 and 2.10.0 above

[19:38] <PerlJam> pmichaud: Are you sure about not needing to make your point stronger?  

[19:38] * PerlJam is in a weird pessimistic mood today

[19:40] <pmichaud> I'm thinking that making a strong point won't make a significant (positive) difference

[19:40] <PerlJam> ah, but it might.  "management" has changed.  :)

[19:41] <pmichaud> afaict, all of the new managers are sufficiently whipping the horses to make improvements

[19:41] <flussence> and the horses are sufficiently stripey

[19:42] <pmichaud> from #parrot:

[19:42] <pmichaud> 19:41 <cotto_work> whiteknight: are you looking into the breakage?  I want to get this fixed.

[19:42] <pmichaud> 19:41 <whiteknight> yeah, I'm on it

[19:42] *** [particle] left
[19:42] <moritz_> last time I successfully built rakudo, it had about 5 spectest failures

[19:42] <PerlJam> perhaps it's just my mood, but I get the feeling that Parrot keeps building one to throw away over and over again, rather than building the one to keep.

[19:43] <pmichaud> PerlJam: it doesn't feel like that to me

[19:43] <pmichaud> well

[19:43] <pmichaud> I feel that we're not moving closer to building the one to keep

[19:43] <pmichaud> but I'm not sure about the "keeps building one" part :-P

[19:44] *** Kodi left
[19:44] <moritz_> PerlJam: the problem is just that there are so many subsystems that needs to be thrown out and rewritten

[19:44] <cotto_work> That's not a good excuse to keep breaking though.

[19:45] <pmichaud> yes, rakudo fails 'make test' for me

[19:45] <PerlJam> moritz_: I thought the "problem" was the deprecation policy  ;->

[19:45] <moritz_> pmichaud: a simple -e 1 will probably fail too

[19:47] <pmurias> sorear: ping

[19:47] *** [particle] joined
[19:50] *** plobsing left
[19:55] *** Khisanth joined
[20:00] <tadzik> https://github.com/9cloud/Nemo -- maybe sth like this for P6 would be nice and advertful

[20:03] <pmurias> tadzik: mixing html and an indentation based syntax doesn't seem very nice

[20:04] <tadzik> as I read, only the python version is indentation based, but maybe I'm wrong

[20:06] <pmichaud> afk, lunch

[20:08] <pmichaud> (and, sadly, lost another hour of time to tracking down a parrot bug)

[20:09] <pmichaud> (that could've been detected by simply running nqp-rx's tests)

[20:11] *** shi joined
[20:15] *** Eevee left
[20:16] *** Maksim_ joined
[20:16] *** Eevee joined
[20:18] <cotto_work> Rakudo's make test and hello world work again with the latest Parrot.

[20:19] <cotto_work> I apologize for the breakage and would like to note that my job now includes making sure that we get regular automated testing of the latest Parrot against HLLs.

[20:20] <colomon> \o/

[20:22] <PerlJam> cotto++

[20:24] <pmichaud> I'm disappointed that the people making commits won't do that testing on their own -- especially for bugs that originally noted that they broke rakudo.

[20:25] <pmichaud> we've now had two cases in one week where someone says "I've made a commit that fixes a bug reported by rakudo" but didn't actually test to verify that rakudo was fixed.

[20:25] *** Maksim_ left
[20:26] <pmichaud> the message I get is, sadly, "Parrot's managers care but the developers don't."

[20:27] <cotto_work> pmichaud: that's why I want to automate it.  Telling people to do it manually hasn't been working (regardless of whether it should).

[20:27] <cotto_work> There's also a cultural problem we need to fix, but that's harder.

[20:27] <pmichaud> I agree that automating helps

[20:27] <pmichaud> but it also introduces delays

[20:28] <pmichaud> i.e., someone makes a commit; the automated system detects the problem at some later point, the person who made the commit isn't necessarily available to fix it timely

[20:29] <pmichaud> anyway, I'm just registering my disappointment with the process.

[20:30] <cotto_work> pmichaud: I agree.  It's very disappointing that we've been unable to provide a suitable platform for Rakudo development.

[20:31] <pmichaud> (and, I guess, my disappointment with the cultural problem that dismisses HLL concerns)

[20:39] *** plobsing joined
[20:40] <PerlJam> making rakudo/parrot faster might help.  the fix-test-repeat cycle can be discouraging when the test part takes the bulk of the time.

[20:41] <sorear> good * #perl6

[20:41] <colomon> o/

[20:42] <diakopter> sorear: hi

[20:42] <Tene> that was one of the things that contributed to me stopping parrot development, unfortunately.

[20:42] <diakopter> pmurias: sorear is here :)

[20:46] <pmurias> sorear: hi

[20:47] <pmurias> sorear: the subs in a unit are indexed according to xids?

[20:48] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[20:48] <sorear> pmurias: yes

[20:49] <sorear> pmurias: all the magic happens in Metamodel::RefTarget

[20:49] <sorear> and Metamodel::Unit::deref

[20:51] *** coldhead joined
[20:52] *** skangas joined
[20:53] <pmurias> sorear: re changes to the build system, where am i supposed to set the filename mtime stuff?

[20:54] <sorear> probably in begin

[21:01] * dukeleto is going to make the automated testing of Parrot + Rakudo happen soon

[21:02] <dukeleto> Tene: i plan to fix some of the parrot communities issues with HLLs

[21:02] <dukeleto> Tene: hopefully we can coax you back someday soon :)

[21:15] *** plobsing left
[21:23] *** jaldhar joined
[21:24] *** dsp_ left
[21:24] *** dsp_ joined
[21:26] *** MayDaniel joined
[21:26] *** pmurias left
[21:26] *** stkowski joined
[21:27] *** plobsing joined
[21:29] *** MayDaniel left
[21:39] <jdv79> the spec tests used to take hours on my box iirc

[21:41] *** MayDaniel joined
[21:41] *** jaldhar left
[21:43] *** gottreu left
[21:44] *** [Coke] joined
[21:47] *** mtk left
[21:48] <flussence> 2h15 on mine, ±5m

[21:51] *** gottreu joined
[21:56] *** masak joined
[21:56] <masak> ahoy, zebras!

[21:57] <colomon> \o

[21:58] <masak> today I wrote a 30-line Perl 5 script that re-indented a text file so that at least one line started on the first column. I kept longing for Perl 6 the whole time.

[21:59] <masak> if anyone would like to give that exercise a try (in Perl 5 or Perl 6), we could compare notes. :)

[21:59] * colomon can no longer program in C++ without extreme longing for Perl 6.

[21:59] <masak> would've been nice if Str.indent were already implemented in Rakudo. then I probably would've ditched Perl 5.

[21:59] <colomon> I thought someone got that a month or two ago?

[21:59] <masak> oh?

[22:00] <sorear> hi masak

[22:00] *** ab5tract joined
[22:00] <masak> hi sorear

[22:00] <colomon> rakudo: "   This sd".indent.say

[22:00] <p6eval> rakudo da243f: OUTPUT«Method 'indent' not found for invocant of class 'Str'␤  in main program body at line 22:/tmp/6h4Jl3m1HM␤»

[22:00] <colomon> yeah, apparently not.

[22:00] <masak> colomon: must have been wishful thinking :)

[22:00] <masak> would be a great GCI task, though.

[22:01] <masak> or a pleasant evening task for someone here.

[22:01] *** cognominal left
[22:01] <colomon> If only someone hadn't drained the tuits of most of us with some sort of contest.... ;)

[22:02] * masak is not going to apologise :)

[22:02] <colomon> p4 is going to obsess me for at least another week, I think.

[22:02] <tadzik> hello masak

[22:02] <masak> colomon: good. don't forget to send in your solutions.

[22:02] <masak> tadzik: hi!

[22:03] <tadzik> what should .indent do?

[22:03] <masak> I'm going to do some Perl 6 coding tonight, provided sleepiness doesn't hit before I get going.

[22:03] <masak> tadzik: indent text, as it happens.

[22:03] <masak> tadzik: see S32/Str/.indent

[22:03] <flussence> tadzik: S32/Str:582

[22:03] <masak> flussence++

[22:04] <tadzik> oh, a LHF?

[22:04] <masak> more or less.

[22:04] <masak> tab handling is the only tricky part, I predict.

[22:04] * PerlJam wants Str.autoformat ala Damian  ;)

[22:04] <masak> PerlJam: vol wellunteered!

[22:04] <colomon> masak: my current notion is to have my code play itself with slightly different settings so I can see which setting comes out on top.... ;)

[22:05] * masak pokes PerlJam with a "do it!" twig

[22:05] <masak> colomon: no comment :)

[22:06] <tadzik> hmm, indent seems doable

[22:06] <PerlJam> that would require some tuits.  But as things typically go, when I do get a few tuits, some other random thing has captured my interest

[22:06] <PerlJam> tadzik: you could probably bang out the add/remove spaces thing in a few minutes if you ignore the tabs issue

[22:07] <PerlJam> the spec doesn't mention a defaults for $steps, but * seems like a nice default.

[22:08] <PerlJam> s/lts/lt/

[22:09] *** gottreu left
[22:09] <tadzik> maybe there's just no default

[22:09] <masak> I'm not sure having * as a default is good for readability.

[22:09] <masak> that's my meaning.

[22:10] <tadzik> especially when indent(*) is basically unindent(*)

[22:13] <masak> there's an unindent? :)

[22:13] <PerlJam> maybe it should be $str.indent(-*)   :-)

[22:14] <masak> euugh.

[22:14] <tadzik> minus-whatever, it's so like minus-zero

[22:16] <flussence> # Looks like you failed 7 tests of 7

[22:16] <flussence> whee

[22:16] <masak> I notice there is a little ambiguity in the .indent spec. it doesn't say *where* in the \h prefix new indentation is added.

[22:17] <masak> I'd go with "at the end", due to tab characters.

[22:17] <masak> but it doesn't say.

[22:17] *** colomon left
[22:17] <flussence> "after each logical newline"

[22:17] <tadzik> flussence: whatcha wrigint?

[22:18] <flussence> tests for .indent, which apparently don't exist yet...

[22:18] <PerlJam> flussence++

[22:18] <flussence> I was gonna try doing the code, but I had all the fun last time :)

[22:19] *** zby_home left
[22:20] <masak> flussence++

[22:20] <masak> flussence: here's a tip: implement Str.indent *outside* of the setting.

[22:21] <sorear> TimToady: ping

[22:22] <flussence> yeah, I vaguely remember that from doing samespace last time. I think I lost the gist URL for that one...

[22:22] *** hercynium left
[22:22] <tadzik> oh, just write a sub for that

[22:22] <tadzik> or use MONKEY_TYPING and augment class Str

[22:22] <sorear> TimToady: you were saying something the other day about list assignment being a purely syntactic concept... in your model, my $x; sub foo() is rw { $x }; foo() = (1, 2); # Does this assign $x = 1 ?

[22:23] <PerlJam> probably augment class Cool rather than Str.

[22:23] <tadzik> . o O ( oh my. That's so readable and straightforward even though it *is* the code )

[22:23] <tadzik> probably

[22:24] *** Guest18093 left
[22:25] *** cognominal joined
[22:29] *** MayDaniel left
[22:33] *** colomon joined
[22:39] <PerlJam> rakudo: my $str = "aaaaaaaabbbb";  say $str.subst( /^^ 'a' ** { 0..4 } /, 'x', :g );  

[22:39] <p6eval> rakudo da243f: OUTPUT«xbbbb␤»

[22:39] <PerlJam> is that a known bug or am I missing something?

[22:40] <tadzik> what is a bug in here?

[22:40] <tadzik> ah, one x

[22:41] <PerlJam>  / 'a' ** { 0..4 } / should match a maximum of 4 'a' characters

[22:42] <PerlJam> btw, it works if I leave out the closure.

[22:42] <PerlJam> rakudo: my $str = "aaaaaaaabbbb";  say $str.subst( /^^ 'a' ** 0..4 /, 'x', :g );  

[22:42] <p6eval> rakudo da243f: OUTPUT«xaaaabbbb␤»

[22:42] *** tty234 left
[22:43] <snarkyboojum> g'day #perl6

[22:43] <snarkyboojum> who has access to update links on perl6.org?

[22:44] <tadzik> o/

[22:46] <sorear> PerlJam: 'a' ** { 0..4 } = 'a' ** { True } = 'a'*

[22:47] <sorear> I think you wanted 'a' ** 0..4

[22:47] <snarkyboojum> tadzik: you seem have to commit access to perl6.org on github - can you update the broken link to viv on the homepage for me? :D

[22:48] <sorear> oh, I'm wrong

[22:48] <sorear> returning a Range should work.

[22:49] <tadzik> snarkyboojum: can you show me the exact place?

[22:51] <snarkyboojum> tadzik: well the link on the compilers page points to https://github.com/perl6/std, but the actual viv script is at http://github.com/perl6/std/raw/master/viv

[22:51] <diakopter> sorear: TimToady's driving a long time today he mentioned here yesterday

[22:53] <dalek> perl6.org: b900db1 | tadzik++ | source/compilers/index.html:

[22:53] <dalek> perl6.org: Fix a link to viv, snarkyboojum++

[22:53] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/b900db15e0

[22:53] *** plobsing left
[22:53] <tadzik> sorear++ # fixing dalek

[22:54] <snarkyboojum> tadzik: actually, it was the viv link on the home page, i.e. source/index.html

[22:54] <snarkyboojum> tadzik: apologies for any confusion :)

[22:54] <tadzik> bah

[22:56] <dalek> perl6.org: 7b59d3b | tadzik++ | source/index.html:

[22:56] <dalek> perl6.org: Fix a link to viv one more time

[22:56] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/7b59d3b017

[22:56] <tadzik> snarkyboojum: thanks for easy karma :)

[22:56] *** kensanata left
[22:57] <dalek> nqp-rx/smoke: e1f6b8b | dukeleto++ | build/Makefile.in:

[22:57] <dalek> nqp-rx/smoke: Begin to add a smoke target to send smolder reports

[22:57] <dalek> nqp-rx/smoke: review: https://github.com/perl6/nqp-rx/commit/e1f6b8b570

[22:57] <tadzik> snarkyboojum: (tweet) oh you!

[22:57] *** spq1 left
[22:58] <snarkyboojum> tadzik: heh - legend. Thanks, it's been bugging me for the last few days :P

[22:58] <flussence> rakudo: say ((' ' x 1) Z ('  quack')).perl

[22:58] <p6eval> rakudo da243f: OUTPUT«(" ", "  quack")␤»

[22:59] <snarkyboojum> tadzik: what's your twitter handle?

[22:59] <tadzik> snarkyboojum: none :)

[22:59] <diakopter> that page ought to link to sorear's distribution of STD on the CPAN

[22:59] <flussence> yay, # Looks like you failed 8 tests of 9

[22:59] <snarkyboojum> tadzik: oooh.. twitter lurker!

[22:59] <tadzik> abit

[23:00] <tadzik> masak tends to find interesting things here sometimes

[23:00] <masak> haven't set up any live filters on this new laptop, though...

[23:01] <snarkyboojum> tadzik: masak finds interesting things all over the place :)

[23:01] <snarkyboojum> masak: hello there

[23:01] <masak> hi, boojum. :)

[23:03] *** plobsing joined
[23:03] <diakopter> tadzik:  http://search.cpan.org/~sorear/STD/

[23:03] <diakopter> would you mind adding to that page?

[23:05] <diakopter> "to install a recent distribution of STD/viv to your Perl 5 installation, go here"

[23:05] *** kst` joined
[23:06] <flussence> How can I write a test to check whether ' a'.indent(-2) emits a warning like the spec says it should?

[23:06] <snarkyboojum> masak: loving the new(ish) blogging platform

[23:07] <masak> snarkyboojum: strangelyconsistent? yeah, me too.

[23:07] <snarkyboojum> masak: yup

[23:07] <masak> snarkyboojum: it's not quite there yet, but each little change is fun to make and makes things more usable.

[23:08] <masak> already a clear step up from use.perl in terms of the work I have to put in to make a blog post :)

[23:08] *** plobsing left
[23:09] *** tty234 joined
[23:09] *** kst left
[23:12] *** mkramer1 joined
[23:13] <masak> oh man, it's already late. :/

[23:14] <masak> need to punt all my ambitious Perl 6 hacking to tomorrow...

[23:14] <ggoebel> good to see pmichaud++ back

[23:16] <sorear> browsing mono-dev it looks like NaCl support has been merged

[23:18] <dalek> rakudo: 337f199 | KodiB++ | src/Perl6/Actions.pm:

[23:18] <dalek> rakudo: [Perl6/Actions] Panic on "use v6.2", "use v7", etc.

[23:18] <dalek> rakudo: 

[23:18] <dalek> rakudo: I added two variables (@MAX_PERL_VERSION and $MAX_PERL_VERSION) that need to be maintained as the version of Perl that Rakudo recongizes changes. Currently they're set to just 6, so 5.99.99.99 and 6.0 are accepted, but 6.0.0.0.1 is rejected.

[23:18] <dalek> rakudo: 

[23:18] <dalek> rakudo: This fixes RT #80126.

[23:18] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/337f199ef8

[23:19] <tadzik> snarkyboojum: yeah, no problem

[23:20] <tadzik> snarkyboojum: want a commit bit?

[23:21] <tadzik> # The latter variable is used only for error messages.

[23:21] <tadzik> couldn't it be a join of the former?

[23:22] <snarkyboojum> tadzik: if it's going - thanks

[23:22] <tadzik> dunno if I can :)

[23:22] <tadzik> I can't :)

[23:23] <snarkyboojum> tadzik: nm.. might be a moritz_ specialty :P

[23:24] <dalek> perl6.org: 524b230 | tadzik++ | source/compilers/index.html:

[23:24] <dalek> perl6.org: Add a link to STD on cpan

[23:24] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/524b230a32

[23:25] <tadzik> sleepytime now, see you!

[23:26] <snarkyboojum> čao

[23:30] *** Chillance left
[23:39] <masak> 'night, zebras.

[23:39] *** masak left
[23:49] *** dukeleto left
[23:50] *** dukeleto joined
