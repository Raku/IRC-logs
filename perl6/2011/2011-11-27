[00:15] *** vinian_ left
[00:22] *** tokuhirom joined
[00:32] *** vinian_ joined
[00:40] *** mdxi left
[00:41] <snarkyboojum> how do you use RT to find items that are marked "testneeded"?

[00:44] <snarkyboojum> ah - there's a tag 

[00:44] <snarkyboojum> 'testneeded'

[00:44] <snarkyboojum> :)

[00:44] <snarkyboojum> RT isn't so hard to use after all :)

[00:48] *** molaf_ joined
[00:52] *** molaf left
[01:19] *** molaf_ left
[01:19] *** benabik joined
[01:32] *** mdxi joined
[01:35] *** hundskatt left
[01:37] *** araujo left
[01:38] *** alester left
[01:39] *** araujo joined
[01:46] *** Ingis left
[02:22] *** donri left
[02:42] *** thou joined
[03:00] *** Ingis joined
[03:03] *** lutok joined
[03:28] *** raiph joined
[03:56] *** thou left
[04:01] *** lutok left
[04:09] *** tokuhirom left
[04:24] *** araujo left
[04:33] *** thou joined
[04:51] *** vinian_ left
[05:00] *** wolfman2000 left
[05:21] *** raiph left
[06:00] *** localhost left
[06:02] *** localhost joined
[06:21] *** araujo joined
[06:27] *** plutoid joined
[06:32] <dalek> rakudo/nom: 2154ebb | moritz++ | src/core/ (4 files):

[06:32] <dalek> rakudo/nom: fix comparison ops for Complex numbers

[06:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2154ebb58e

[06:38] <moritz> nom: CONTROL { default { say "warning" } }; ~Any

[06:38] <p6eval> nom 4a4601: OUTPUT«Use of uninitialized value in string context␤»

[07:00] *** molaf joined
[07:03] <dalek> roast: 04c0281 | moritz++ | S32-num/complex.t:

[07:03] <dalek> roast: comparison with < of complex numbers dies (RT #104660)

[07:03] <dalek> roast: review: https://github.com/perl6/roast/commit/04c02810fa

[07:03] <dalek> roast: f75b379 | moritz++ | S03-operators/inplace.t:

[07:03] <dalek> roast: rakudo unfudges

[07:03] <dalek> roast: review: https://github.com/perl6/roast/commit/f75b379740

[07:06] <dalek> roast: 5af9d23 | moritz++ | S12-class/augment-supersede.t:

[07:06] <dalek> roast: test for augment on lexical class, RT #74910

[07:06] <dalek> roast: review: https://github.com/perl6/roast/commit/5af9d23b89

[07:20] <sorear> good * #perl6

[07:24] <moritz> \o sorear 

[07:25] *** sayu joined
[08:02] <dalek> roast: a6ae871 | moritz++ | / (5 files):

[08:02] <dalek> roast: various rakudo unfudges, most related to the list fixes by jnthn++

[08:02] <dalek> roast: review: https://github.com/perl6/roast/commit/a6ae871ea4

[08:02] *** lutok joined
[08:04] *** Guest2721 joined
[08:21] *** stepnem left
[08:25] *** Trashlord joined
[08:25] *** stepnem joined
[08:54] *** Trashlord left
[08:55] *** sayu left
[09:15] *** thou left
[09:20] <Woodi> what is the best way to get v5 working cooperative with v6 ?

[09:26] <moritz> hack blizkost, I think

[09:27] *** thou joined
[09:29] <snarkyboojum> and there was the stuff pmurias was doing in Niecza to embed a Perl 5 interpreter (I think)

[09:30] *** Trashlord joined
[09:32] *** JimmyZ joined
[09:37] <Woodi> is 'testneeded' a something someone can look into ?

[09:38] <Woodi> ah, thank you snarkyboojum :)

[09:39] * JimmyZ commented to news.perlfoundation.org/2011/11/hague-grant-application-plperl.html

[09:39] <snarkyboojum> Woodi: search in RT for open bugs with the tag 'testneeded', and write tests for the fixes I'm guessing

[09:41] <Woodi> do TPF just hire jnthn (if hi wants) for year or two ? :)

[09:41] <moritz> Woodi: http://rakudo.de/testneeded

[09:41] * JimmyZ doesn't think TPF has enough money

[09:42] <Woodi> thanx

[09:43] *** thou left
[09:44] *** miso2217 joined
[09:44] *** miso2217__ left
[09:45] <Woodi> oO(some community collecting grant?)

[09:47] <sorear> o/ snarkyboojum

[09:47] <snarkyboojum> sorear \o

[09:53] *** fsergot joined
[10:01] *** tokuhirom joined
[10:02] <Woodi> hmm, this 'needtest' work is just: a) read tickets b) copy&paste trouble making code into test file ?

[10:04] *** miso2217 left
[10:04] *** miso2217_ joined
[10:07] *** mj41 joined
[10:08] *** GlitchMr joined
[10:09] <Timbus> http://trac.parrot.org/parrot/ticket/757 its been a while since I've checked this ticket. and now I'm even more sadfaced

[10:10] <Timbus> what the heck does everyone else program?? 99% of everything i do is event and thread based.

[10:11] *** zby_home joined
[10:11] *** rsimoes1 joined
[10:12] <Woodi> Timbus: WWW, text procesing, numbers counting, such things :)

[10:13] <Timbus> WWW with coroutines leads to some pretty cool stateful webpages

[10:14] <Woodi> Timbus: can you give example ?

[10:14] <Timbus> coroutines in the 'cooperative threads' sense, not this bizarre 'continuable sub' example the synopsis talks about

[10:15] <rsimoes1> I missed the first half of this conversation

[10:15] <rsimoes1> What module are you guys looking at?

[10:15] <moritz> rsimoes1: http://irc.perl6.org/ has the entire conversation

[10:16] <Woodi> rsimoes1: last two days are silent here...

[10:16] <Timbus> man, where is the good Coro webserver example

[10:16] <Timbus> :<

[10:17] <rsimoes1> Corona

[10:17] <Timbus> the idea is you just serve a page and then 'cede', to pause the coroutine. when the client clicks 'next' or whatever, the coroutine stars again

[10:18] <rsimoes1> Continuity for a super clever WAF

[10:18] <Timbus> starts*

[10:18] <Timbus> ah, Continuity might be it

[10:18] <moritz> Timbus: you can do that with a lazy 'map' in Perl 6 

[10:18] <Woodi> so one coroutine per user ?

[10:19] <Timbus> that.. feels wrong, moritz :/

[10:21] *** alvis left
[10:21] <Woodi> ufo hangs for me :)

[10:23] <Woodi> no, work OK

[10:33] *** alvis joined
[10:34] <Woodi> just get a lot of 'Use of uninitialized value in string context' warnings without script interruption... it's need to be that way ?

[10:35] <masak> *yawn*. good morning, #perl6

[10:37] <moritz> good masak, morniing

[10:38] *** am0c joined
[10:38] *** plutoid left
[10:44] *** molaf left
[10:44] *** ksi joined
[10:47] *** hundskatt joined
[11:00] *** xinming_ left
[11:01] *** MayDaniel joined
[11:13] *** GlitchMr left
[11:18] <jnthn> afternoon, #perl6

[11:18] <masak> jnthn! \o/

[11:19] <jnthn> Woodi: (testneeded) it's kinda copy paste; the work is mostly in finding an appropriate test file to add it to and then twiddling it a bit to be a test (so it calls "is"/"ok" etc)

[11:19] <jnthn> o/ masak 

[11:22] <jnthn> moritz++ # unfudges

[11:25] <masak> Timbus: events and threads likely need to be tackled simultaneously in the Perl 6 spec. nothing's happening there yet because we're waiting for someone to say "oh, screw this" and replace what's already there with something simple that works, and that we can evolve the final design from.

[11:25] *** xinming joined
[11:29] <Woodi> masak: maybe we should talk more about "how should Perl6 parallel stuff look like ?" ? For example I can (continue?) read wiki and ask stupid questions :)

[11:29] <masak> hm. "routines allow you to abstract over values. generics/parametric roles allow you to abstract over types. macros allow you to abstract over code."

[11:30] <masak> Woodi: we know how it "should look" on a high level. see S17. that's likely to change a bit, but we at least have some ideas already.

[11:30] <masak> Woodi: we also know how it will probably look on a low level. jnthn maintains that CAS is the only reasonable primitive on which to build bigger chunks.

[11:31] <masak> but someone needs to take charge of providing a "big picture" out of all that.

[11:31] <masak> an open question is how threading fits together with event systems.

[11:32] <masak> and how much or how little will Perl 6 provide out of the box?

[11:32] <jnthn> masak: Well, I more claimed that you can build everything on CAS. :) But that's more about concurrency control, not just events.

[11:32] <jnthn> You can be single-threaded and do async/event style stuff.

[11:33] <Woodi> my point is that talking and thinking possibly can clarify things. eg. what is Parrot/vm responsibility, what other parallel constructs are possible, eg. futures, what to do ATMwith Actor model...

[11:35] <Woodi> becouse every developer have some thoughts, probably was few discusions too, but time moved and there can be new thougs, new idea available...

[11:38] <masak> Woodi: in a sense, yes. we need to discuss these things and arrive at a sensible model for Perl 6.

[11:38] <masak> Woodi: also, in a sense, no. this is something that one individual needs to sit down and *design*, and it can't be done by committee. it never can.

[11:39] <Woodi> eg. spec says coroutines are uncompatible with multi-dispatch. but it says: multiple entrances with changed parameter list. what without changing params ? it is probably moust used case...

[11:39] <masak> that's the "oh, screw this" part. someone needs to champion a coherent design, and a coherent design comes from one mind, by necessity.

[11:40] <Woodi> masak: no, talking is needed first. becouse some things are Parrot dependend. so mommunity consensus will help a lot

[11:40] <masak> Woodi: read everything in the spec about coroutines and around S17 with a big grano salis.

[11:41] <Woodi> k, will check

[11:41] <masak> Woodi: the Parrot dependencies might matter less than you think. most of these things get designed in Rakudo/nqp first, and then land in Parrot.

[11:41] <Woodi> not sure about this

[11:41] <Woodi> threads for example

[11:42] <Woodi> CAS instruction from hardware passing...

[11:44] <masak> Woodi: you could argue the same thing about NCI, that it "needs Parrot". but it's currently being developed outside of Parrot.

[11:44] <Woodi> how ??

[11:45] <jnthn> By writing code!!

[11:45] <jnthn> Woodi: See nci branch in nqp :)

[11:46] <masak> jnthn++ # by writing code

[11:48] *** alvis left
[11:52] <Woodi> I see Parrot as Perl5 low level stuff implementation, eg. IO buffering. In Perl5 is not good to use sysread becouse in moust cases will be slower then <FH>/<$fh>. so in Rakudo I use .get and hope that Parrot buffering will work that way. now: what parts of parallel stuff should go into Parrot ?

[11:53] <masak> no idea.

[11:53] <masak> it usually doesn't make much sense for Rakudo devs to ask this, because Parrot doesn't cater to just Rakudo.

[11:55] <Woodi> Parrot is common stuff for all things working on Parrot

[11:55] <dalek> nqp/nci: 003586e | jnthn++ | src/6model/reprs/CStruct.c:

[11:55] <dalek> nqp/nci: Fix a copy-paste fail.

[11:55] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/003586e509

[11:55] <dalek> nqp/nci: c9d6b20 | jnthn++ | / (465 files):

[11:55] <dalek> nqp/nci: Don't include version number in directory holding dyncall; it'll just make every upgrade annoying.

[11:55] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/c9d6b203da

[11:57] <masak> Woodi: right, but look at the Parrot object system. doesn't work for Rakudo's needs. Parrot MMD. doesn't work for Rakudo's needs.

[11:57] <masak> Woodi: and evolving them fast enough for Rakudo to be able to use them wasn't an option. so Rakudo had to provide its own, currently through 6model.

[11:58] <moritz>   ,jk       u  m  -v    m bb   n#ßb  n    ,    <   m m 

[11:58] *** ab5tract joined
[11:58] <Woodi> "through 6model" written as part of Parrot ?

[11:59] <masak> no.

[11:59] <moritz> 6model is currently part of nqp, not parrot

[11:59] <Woodi> k

[12:00] * masak waves to Ronja :)

[12:00] *** alvis joined
[12:00] <moritz> Ronja shouts "whawhawhawhawhawhawha"

[12:01] <moritz> :-)

[12:01] * masak bobs happily

[12:02] <Woodi> about 'screw' part :) : just want to note that making that parallel design is not necesary same as implementing it... maybe it will help some bright folks to propose drafts...

[12:02] <Woodi> maybe chromatic ?

[12:04] <jnthn> moritz: So it turns out the dyncall version I'd grabbed had an alignment bug on Win64. Upgrading it now...hopefully it doesn't cause any breakage on $other-platform.

[12:04] <jnthn> Will push in a moment...testing welcome.

[12:05] <masak> Woodi: suggesting a champion won't help much. :/

[12:05] <moritz> jnthn: can we delete the bigint branch in rakudo and nqp?

[12:05] <tadzik> hello #perl6

[12:06] <Woodi> hi tadzik :)

[12:06] *** tomaw is now known as 5EXAAAUZ2

[12:06] <jnthn> moritz: yes

[12:06] <dalek> nqp/nci: 61a0eac | jnthn++ | 3rdparty/dyncall/ (263 files):

[12:06] <dalek> nqp/nci: Upgrade to latest version of dyncall lib, which has Win64 fixes amongst other things.

[12:06] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/61a0eac74c

[12:07] <jnthn> woo, Win32 API usage in 3 lines:

[12:07] <jnthn> use NativeCall;

[12:07] <jnthn> sub MessageBoxA(Int, Str, Str, Int) returns Int is native('user32.dll') { * }

[12:07] <jnthn> say MessageBoxA(0, "Hi from Rakudo", "NCI", 0x40);

[12:07] *** 5EXAAAUZ2 is now known as tomaw

[12:07] <masak> tadzik! \o/

[12:07] *** wk joined
[12:07] <Woodi> wow :)

[12:08] <masak> jnthn: wow! \o/

[12:08] <tadzik> nice!

[12:08] <masak> jnthn: you've ushered in an era of Windows development for Perl 6!

[12:08] <Woodi> anybody know someone pasionate in parallel stuff to bring him to Perl community ? :)

[12:08] <jnthn> masak: Well, need callbacks before that... ;)

[12:08] <masak> jnthn: oh, right.

[12:08] <masak> jnthn: what does the 0x40 mean?

[12:08] <masak> is that buttons?

[12:09] <jnthn> masak: 0x40 is "show a cute little 'i' icon in the message box and play an approriate 'oh hai i haz info' sound effect" :)

[12:09] <jnthn> masak: Other flags get you buttons :)

[12:09] <jnthn> And the return value tells you which one was clicked.

[12:10] <masak> oh, it's a general flags thingie for both icons and buttons.

[12:10] <jnthn> right

[12:10] <masak> this reminds me of my VB days :)

[12:10] <jnthn> 0x40 is just a value I remembered

[12:10] <tadzik> :)

[12:10] <jnthn> yeah, I had VB days too :P

[12:10] <jnthn> Since I started programming in BASIC, I'm an irreedambly messed up programmer, apparently.

[12:11] <masak> yup. me too.

[12:11] * jnthn can't remember who had the quote about programmers who learn BASIC first... :)

[12:11] <huf> dont worry, *i* started in php.. the hole has no bottom

[12:11] <huf> ie: there's always a lower fish

[12:11] <snarkyboojum>  bah, what does Dijkstra know :D

[12:11] <masak> jnthn: Dijkstra.

[12:11] <jnthn> oh, of course!

[12:11] <jnthn> :)

[12:12] <masak> jnthn: and now we're both teaching programming, further spreading the irredemable brain damage :P

[12:12] * moritz would love to teach programming too, but should learn it himself first

[12:12] <snarkyboojum> masak: "mentally mutilated beyond hope of regeneration"

[12:12] <jnthn> moritz: Apparently, you should start with BASIC...

[12:13] <jnthn> :)

[12:13] <snarkyboojum> charming

[12:13] *** Psyche^ joined
[12:13] <moritz> jnthn: I did (but a version which already had subroutines and blocks)

[12:13] <moritz> :-)

[12:14] <masak> moritz: don't tell anyone, but I didn't finish learning how to program either!

[12:14] <snarkyboojum> I started quickly with qbasic :P

[12:14] <masak> I actually touched GWBasic first. but I didn't stay with it for long.

[12:14] <masak> too painful.

[12:15] <snarkyboojum> actually it was logo ;)

[12:15] <masak> Turbo Basic was my eternal companion. only grudgingly did I migrate to QBASIC.

[12:15] * Woodi starts with BASIC too... and thinks that saying is not absolute truth...

[12:16] <masak> Woodi: O RLY? :)

[12:16] *** Patterner left
[12:16] *** Psyche^ is now known as Patterner

[12:16] <masak> Woodi: are you implying that not all of us here are mentally mutilated beyond hope of regeneration? :P

[12:16] *** alvis left
[12:17] <Woodi> yea, same as with optimisation :)

[12:17] * moritz tried Perl 6 hacking as redemption. Not really working 100% yet

[12:17] <masak> moritz: no, only 75% according to recent graphs :)

[12:18] *** fsergot left
[12:19] * moritz doesn't believe in that number at all

[12:19] <masak> well, it means *something*. but maybe not what people think.

[12:20] <Woodi> numbers can be improved by scope tuning :)

[12:21] <moritz> the not meaning what people think it does... that's the reason I stopped with the spectest graphs

[12:21] *** alvis joined
[12:21] <masak> it's a general problem with quantifying things.

[12:21] <masak> reality is complex and summarizing it is hard.

[12:22] * Woodi not sugest breaking "what not implement full spec isn't Perl6" in any sense

[12:22] * moritz can't parse Woodi's last line

[12:22] <masak> there's a bit of "there's at least one sheep in Scotland that's *white on at least one side*!" to it

[12:22] <moritz> masak: that's quite some wisdom :-)

[12:23] * Woodi thinks about English corepetution seriously :)

[12:23] <moritz> jnthn: fwiw parallel build in nqp is broken, but serial build seems to work just fine

[12:24] *** ab5tract left
[12:24] <Woodi> moritz: I was saying, again, about marking few Perl6 featureas as research or just 'not basic' :)

[12:24] <moritz> Woodi: you're welcome to do so, if you commit to maintain that markings for a while

[12:25] <Woodi> they are all marked 'perlish' and me don't change it :)

[12:26] <Woodi> moritz: it is not hard: eg. hypers... litle futuristic thing (for now)

[12:26] <moritz> Woodi: hypers are implemented already

[12:27] <moritz> they are not really "research" or "experimental" or so

[12:27] <Woodi> not for eventual, new Perl6 implementations. and maybe hypers are bad example

[12:28] <moritz> (well, the duck typing isn't implemented, but that's a really new addition)

[12:28] <Woodi> just propose differentation in features threating

[12:28] <moritz> Woodi: you can't prioritize features for new compilers without knowing how the new compiler will look like

[12:29] <Woodi> moritz: you always can do something even if not everything can be done, in general sense...

[12:29] <masak> I still don't really understand the new proposed duck hypering, but to the extent I understand it I feel it's brittle and dangerous as a feature.

[12:29] <masak> also, I never like more coupling against Cool and Any in various places.

[12:30] <masak> it reduces the ways one can play around with the type system.

[12:30] <moritz> masak: fully agreed

[12:30] <moritz> s/d$//

[12:30] <masak> it's bad enough that we essentially have two "Object" types, Mu and Any.

[12:31] <moritz> Woodi: something can always be done, but the big question is if it does more good than harm

[12:31] <Woodi> isn't duck typing like class categories in Objective-C ? http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/objectivec/Chapters/ocCategories.html

[12:34] *** alvis left
[12:34] <masak> Woodi: no, that looks more like monkey patching.

[12:35] <masak> Woodi: duck typing is assuming an object is eligible based on the presence of a method or so.

[12:35] <Woodi> moritz: agree with that. my idea behint that is to shift Perl6 development to more "stable" point comparing to actual languages without breaking development continuity. just proposing shift in community thinking about Perl6

[12:36] <jnthn> moritz: Is parallel build broken inside the dyncall build, something in NQP's makefile, or hard to tell?

[12:37] <Woodi> masak: yes, I thinked about monkey thing. duck typing ?? :)

[12:37] * jnthn wants to invent a new kind of typing, just so he gets to pick an animal to name it after

[12:37] <masak> we've regressed with nom more than anyone expected, and for longer than anyone expected. *apart from that*, I think Perl 6 development is doing fairly well. we're heading in the right direction.

[12:37] <masak> jnthn: Dugong typing!

[12:38] <moritz> jnthn: hard to tell

[12:41] <jnthn> masak: Yes, but Rakudo makes a distribution/compiler release distinction in part to handle exactly these kinds of surprises. If people want more stability the latest star release has always been there.

[12:45] <masak> right.

[12:46] *** alvis joined
[12:46] *** fsergot joined
[12:47] <masak> I'm mostly talking about in-group expectations. the nom transition was supposed to be less involved and quicker than this.

[12:47] <masak> yes, I know there are circumstances involved. and I don't mean to panic or anything.

[12:47] <jnthn> masak: If it had purely been about the new object model, it probably woulda been.

[12:47] <masak> nod

[12:48] <masak> and it might even be that it was just as well to do all those refactors in one go.

[12:48] <masak> while we're under the hood and tinkering anyway, in a sense.

[12:48] <jnthn> masak: It got caught up in a "re-do the setting", "re-do lists" and "do a new regex engine" set of refactors.

[12:48] <masak> nod

[12:49] <jnthn> Yes, we're in a *much* better position for all of those in a technical sense. 

[12:49] <masak> jnthn: I don't know if I or anyone has said this before, but I'm *really* glad you're on the project. otherwise I'd have felt a huge Pugs/2007 deja vu at this point.

[12:50] <masak> jnthn++

[12:51] *** mj41 left
[12:53] <jnthn> Anyway, I agree it's all taken rather longer than any of us expected. But "a few months longer" on a project of Perl 6 style timescale is small in the big picture, especially for the wins that the nom work has given us.

[12:53] <jnthn> And yes, all of the thing that have been done would probably have had to be at some point anyway.

[12:54] <jnthn> So hopefully in another six months, with a bunch of steadily improving R* releases behind us, it'll look like it was worth it.

[12:59] * sjn reads masaks comments, and have to agree: jnthn++

[13:00] *** alvis left
[13:00] *** MayDaniel left
[13:00] *** alvis joined
[13:03] <masak> jnthn: oh, sure. it was with Rakudo Star and the ng refactor that preceded it.

[13:05] *** ab5tract joined
[13:06] * felher joins masak and sjn, jnthn++ :)

[13:06] *** alvis left
[13:15] <jnthn> hmm...naming help

[13:15] <jnthn> The new NativeCall lets you choose your encoding when passing a string off to C

[13:15] <jnthn> (utf8, ascii, etc)

[13:15] <jnthn> I'm pondering doing this as a parameter train

[13:15] <jnthn> er, trait

[13:16] <jnthn> Any thoughts on trait name? Best I've got is "is native_marshall('ascii') or so.

[13:18] <JimmyZ> is encode('ascii')  ?

[13:20] *** alvis joined
[13:23] <masak> is encoded('ascii') ?

[13:23] <masak> is sent_as('ascii') ?

[13:24] <masak> is encoded_as('ascii') ?

[13:24] <jnthn> hm

[13:25] <jnthn> is marshalled_as('ascii') ? :)

[13:25] <jnthn> Folks seem to prefer "encoded" :)

[13:27] <Woodi> becouse sounds more unix-like... and more huffmanized :)

[13:27] <masak> yeah.

[13:29] <Woodi> k, pizza or diner time...

[13:38] <dalek> nqp/nci: 65cfe28 | jnthn++ | src/ (3 files):

[13:38] <dalek> nqp/nci: Add a way to get the name of the representation an object is based on.

[13:38] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/65cfe2841b

[13:40] <dalek> rakudo/nci: 81bbe8e | jnthn++ | src/binder/sixmodelobject.h:

[13:40] <dalek> rakudo/nci: Grab latest sixmodelobject.h.

[13:40] <dalek> rakudo/nci: review: https://github.com/rakudo/rakudo/commit/81bbe8e7aa

[13:40] <dalek> rakudo/nci: fb11f7d | jnthn++ | src/ (2 files):

[13:40] <dalek> rakudo/nci: Implement .REPR.

[13:40] <dalek> rakudo/nci: review: https://github.com/rakudo/rakudo/commit/fb11f7d903

[13:40] <dalek> zavolaj/v2: e293ff0 | jnthn++ | lib/NativeCall.pm6:

[13:40] <dalek> zavolaj/v2: Add CStruct passing support. Improve error message when trying to pass a class or other object not based on CStruct.

[13:40] <dalek> zavolaj/v2: review: https://github.com/jnthn/zavolaj/commit/e293ff0a05

[14:07] <masak> so, http://en.wikipedia.org/wiki/Hype_cycle

[14:08] <masak> I posit that knowing about the hype cycle is not enough to prevent it from happening to a project.

[14:09] <masak> which is all kinds of interesting when you think about it. you can point to a certain phase of the graph, and say "we are here -- and *there's nothing we can do about it*, except to continue forwards"

[14:10] <masak> of course, with all these things, be it "trough of disillusionment", or "first they ignore you, then they laugh at you", or "every project starts with an individual with a dream"...

[14:11] *** donri joined
[14:11] <masak> ...I always try to remind myself that the same holds true for projects that *don't* bootstrap themselves off the ground. :)

[14:11] <masak> so being an individual with a dream, or going through a trough of disillusionment might be necessary, but it's not sufficient.

[14:12] <masak> </ramble>

[14:12] *** sayu joined
[14:13] <tadzik> lesson learned: reviewing translations requires a lot of mentoring time

[14:14] <tadzik> while I'm at it, I think today's the time we should start adding our tasks to melange. I'll start doing this later on

[14:17] <masak> tadzik++

[14:27] *** plutoid joined
[14:33] *** mj41 joined
[14:39] <moritz> tadzik: I've already added three tasks to melange

[14:40] <moritz> tadzik: two "tests for RT tickets", one design for faq.perl6.org

[14:40] <tadzik> moritz: great!

[14:43] <cognominal> soon, perl will not be caught on a hype cycle but in a whirlpool of hype. :)

[14:44] <masak> cognominal: :D

[14:45] <masak> cognominal: "we don't believe the old waterfall hype model is a viable way to conduct hype"

[14:45] *** hundskatt left
[14:47] *** tokuhirom left
[15:14] <Woodi> "It's the reliability of single-threaded message-based designs that I like. An avionics software designer told me they never use multi-threading just for that reason. A single thread is absolutely guaranteed to have zero race conditions and deadlocks. No multi-threaded software can provide that sort of guarantee." from http://c2.com/cgi/wiki?MessagingAsAlternativeToMultiThreading

[15:15] *** molaf joined
[15:17] *** plutoid left
[15:19] <masak> Woodi: in other news, software that doesn't connect to the net is more reliable. so is software that doesn't interact with the user in any way. :)

[15:19] <masak> "A program that doesn't accept input is absolutely guaranteed to have zero injection attacks. No user-input-accepting software can provide that sort of guarantee." :P

[15:19] <Woodi> I like qmail design, it is a "multi-server", multiproces server... kind of messaging architecture...

[15:20] *** cognominal left
[15:20] *** cognominal joined
[15:20] <masak> people seem to generally say good things about qmail.

[15:20] <Woodi> no, async api is used, select/poll etc

[15:21] <Woodi> qmail is multiproces but I wonder about something in process

[15:21] <Woodi> 0mq maybe

[15:23] <Woodi> anyway, probably no one will want to implement Oracle clone in Perl :)

[15:24] <JimmyZ> i'd more like postfix ...

[15:24] <Woodi> point is where to stop elmiminating use cases... games for example probably needs multithreading

[15:26] <tadzik> do they?

[15:26] <tadzik> I didn't look deep into the doom3 source, but I saw some event loop in there ;)

[15:26] <tadzik> but again, I didn't look really deep

[15:27] <masak> RFC 1: "Perl 6 should be built around threads from the beginning."

[15:27] <Woodi> games probably want to use few cores...

[15:27] <tadzik> ok, there are threads too

[15:27] <gfldex> doom3 engine can run the render process in it's own thread

[15:27] <tadzik> my bad

[15:27] <gfldex> it wont give you much tho

[15:28] <Woodi> masak: depends what "from the beginning" means :)

[15:28] *** Debugullus joined
[15:28] *** Debugullus left
[15:29] <masak> just point out that threading was part of the deal since RFC 1.

[15:29] <masak> I'm not sure if any of the Apocalypses mentions RFC 1, though.

[15:29] <Woodi> "start development without threads and add later"

[15:30] <Woodi> probably Actor model - messaging - is a option now. in that case real threads can be hidden

[15:32] <masak> we *have* started development without threads and plan to add them later.

[15:32] <masak> even Parrot, in a de facto sort of way.

[15:33] <masak> I get the feeling that RFC 1 is largely motivated by the observation that threads are *hard* to add in afterwards.

[15:34] <Woodi> all the STM movement is based on that

[15:34] <masak> well, STM was something that was looked at, in the Pugs era.

[15:34] <masak> I believe Pugs implements some form of STM.

[15:35] <Woodi> "implement" is wrong word :) cheating maybe :)

[15:37] <Woodi> maybe we can start with efficient Perl6(process) <-> Perl6(proces) protocol ?

[15:37] <Woodi> I mean especially in localhost environment

[15:38] <Woodi> + green threads and CPU can be used 100% :)

[15:38] <__sri> threads with stm would be very cool, something we can't have in perl5

[15:38] <masak> Woodi: why are you so quick to evaluate software with whch you have no actual experience? I believe Pugs *actually* implements STM. no cheating involved.

[15:38] *** mj41 left
[15:39] <Woodi> masak: becouse Pugs overrided Haskell STM :)

[15:39] <__sri> i think akka uses threads + stm

[15:39] <masak> I don't remember the circumstances that made @Larry abandon STM as *the* approach and start considering it one of many solutions.

[15:39] <masak> Woodi: what, and Haskell's STM isn't real?

[15:40] <Woodi> but using ready thing is not the same as implementing from scrath in Rakudo case

[15:42] <Woodi> waiting for Hardware TM is an option too :)

[15:42] <__sri> cheap threads could easily become *the* feature to make perl5 folks switch once 10+ core cpus go mainstream

[15:43] * __sri starts drooling at the thought of a perl6 akka

[15:43] <masak> and yet... no-one is actively working on it.

[15:43] <masak> it's just a lot of talk.

[15:44] <masak> maybe that's positive to some extent. maybe it'll motivate someone to start digging into it in earnest.

[15:44] <masak> one can only hope :)

[15:45] * __sri thought stm was a hot topic for folks with academics background

[15:45] <__sri> many papers to be written :)

[15:46] <moritz> masak: I think the reason for not only considering STM was the paper that showed that STM can be combined elegantly with other concurrency concepts

[15:46] <masak> oh, ok.

[15:46] <Woodi> if we want multi-core threads in Perl6 then it need be first implemented by lower backend probably. in other case just spawn Perl6 interpreters and do messaging communication...

[15:46] <masak> moritz: I remember watching a talk about how STM has scaling problems, just like most threading techniques.

[15:49] * __sri loves akka

[15:50] *** JimmyZ left
[15:53] <jnthn> People always want silver bullets. I guess STM momentarily looked like being one. :)

[15:53] <jnthn> (I'm not saying STM is a bad thing. Just that it's not magical either. :))

[15:54] <Woodi> there is STM 2, or TM II, scales better

[15:55] <masak> then *that* must be the solution! :P

[15:56] *** sayu left
[15:57] <Woodi> situation is that many parallel things is implemented in other languages and we cannot agree even on draft content :)

[15:58] <masak> yes, but *we know that*.

[15:58] <masak> a draft won't magically appear just by some people discussing threading and saying what they like and don't like.

[15:59] <masak> a draft is written by someone, a concrete individual who, you know, steps up and JFDIs a draft.

[15:59] * Woodi eats chocollate

[16:00] <Woodi> and TimToady lives in heavy-patent country :)

[16:12] *** Guest92238 left
[16:20] <dalek> roast: 696bc8d | moritz++ | S03-operators/repeat.t:

[16:20] <dalek> roast: two rakudo unfudges

[16:20] <dalek> roast: review: https://github.com/perl6/roast/commit/696bc8d71c

[16:21] * __sri patents TimToady

[16:28] *** demetro joined
[16:29] *** Moukeddar joined
[16:29] *** Moukeddar left
[16:33] *** nayobix joined
[16:36] *** lichtkind joined
[16:44] <awwaiid> Woodi, 'nine' was working on some multi-processing in #parrot iirc. or at least "green" threads

[16:51] *** thou joined
[16:51] <dalek> nqp/nci: 4aade5a | jnthn++ | src/ops/nqp_dyncall.ops:

[16:51] <dalek> nqp/nci: Handle string returns.

[16:51] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/4aade5aa11

[16:59] <dalek> zavolaj/v2: d22dd75 | jnthn++ | lib/NativeCall.pm6:

[16:59] <dalek> zavolaj/v2: Better string support, including multiple encodings.

[16:59] <dalek> zavolaj/v2: review: https://github.com/jnthn/zavolaj/commit/d22dd75a7f

[17:09] *** hundskatt joined
[17:11] *** skangas left
[17:41] *** arlinius left
[17:41] *** skangas joined
[17:42] *** icwiener joined
[17:44] *** arlinius joined
[17:44] *** kmwallio joined
[17:44] <flussence> I missed that whole conversation 4½ hours ago. I'd prefer a Str.encoding property (one that also works as a default for .Buf)...

[17:56] <jnthn> flussence: It's not really a property of the thing being passed, though. It's about how the native calling stuff should marshall it.

[17:58] <flussence> hm, I get it now

[17:58] *** demetro left
[17:58] <flussence> a .encoding is setting it in the wrong place...

[17:59] *** cognominal_ joined
[17:59] *** ab5tract left
[18:02] *** cognominal left
[18:12] *** ab5tract joined
[18:13] *** skangas left
[18:15] *** zby_home___ joined
[18:16] *** zby_home left
[18:19] *** ab5tract left
[18:32] <moritz> is Buf supported?

[18:33] <jnthn> moritz: Not yet

[18:33] <moritz> you can extract its $!buffer and call .get_string('binary') on it to get a parrot str out of it

[18:35] *** hundskatt left
[18:47] *** MayDaniel joined
[18:48] <dalek> nqp/nci: ba2dda5 | jnthn++ | src/ (3 files):

[18:48] <dalek> nqp/nci: Handle struct returns. Needs some more work on memory management stuff, but basically works now. Needed a little refactor to the CStruct REPR, thanks to braino when doing it before.

[18:48] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/ba2dda5ab3

[18:49] *** mj41 joined
[18:51] <jnthn> https://gist.github.com/1392493 # updated with latest examples

[18:58] *** MayDaniel left
[18:58] *** kmwallio left
[19:09] <moritz> jnthn++

[19:09] <moritz> jnthn: when will you branch nci into nqp/master?

[19:09] <moritz> s/branch/merge/

[19:13] <jnthn> moritz: I'm fine with developing it in master; the only reason it's in a branch is to not cause disruption while build issues are sorted out.

[19:13] <jnthn> moritz: Like, the broken parallel build.

[19:20] <moritz> jnthn: http://moritz.faui2k3.org/tmp/build.log is a complete build log of 'make -j3'

[19:21] *** Chillance left
[19:21] <moritz> the interesting part is that it can't find dyncall/dyn{call,load}.h

[19:21] <moritz> in NativeCall.h

[19:21] <sorear> good * #perl6

[19:22] <moritz> line 155

[19:22] <moritz> hello sorear 

[19:23] <moritz> erm, currently even the serial build is broken?

[19:25] <moritz> hm, works again now

[19:25] <jnthn> moritz: the line starting cd src/ops && cc -c -o nqp_dyncall_ops.o 

[19:25] <jnthn> looks to be missing a -I

[19:25] <jnthn> or did i miss it

[19:25] <jnthn> moritz: oh!

[19:25] <jnthn> -I../../3rdparty/dyncall-0.6

[19:26] <jnthn> ...should not have the -0.6...thought I fixed all of those

[19:26] <jnthn> moritz: Did you re-configure?

[19:26] <jnthn> o/ sorear 

[19:26] <sorear> TimToady: ping.  I want to hear the real story about STM in Perl 6.

[19:26] <moritz> jnthn: I might not have, let me re-check

[19:27] <moritz> jnthn: (unrelated) ConfigVars gets changed during Configure.pl run. Should I 'git rm' it?

[19:27] <sorear> o/ jnthn

[19:30] * moritz does so. Forgiveness > Permission after all

[19:30] <dalek> nqp/nci: 1a92ea7 | moritz++ | 3rdparty/dyncall/ConfigVars:

[19:30] <dalek> nqp/nci: [dyncall] ConfigVars is a generated file, and should not be part of the repositry

[19:30] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/1a92ea7226

[19:32] *** c9s left
[19:32] *** nayobix left
[19:33] *** hundskatt joined
[19:34] <moritz> jnthn: now even the parallel build worked here

[19:34] *** molaf left
[19:34] *** packetknife joined
[19:35] <jnthn> moritz: \o/

[19:35] <jnthn> moritz: +1 to remove that file...just an accident 

[19:49] <masak> nom: class Permission { method Numeric { self.^name.chars } }; class Forgiveness is Permission {}; say Forgiveness > Permission

[19:49] <p6eval> nom 2154eb: OUTPUT«Use of uninitialized value in numeric context␤Use of uninitialized value in numeric context␤Bool::False␤»

[19:50] <masak> dang :)

[19:50] <moritz> try with method Real instead

[19:50] <masak> oki

[19:50] <masak> nom: class Permission { method Real { self.^name.chars } }; class Forgiveness is Permission {}; say Forgiveness > Permission

[19:50] <p6eval> nom 2154eb: OUTPUT«Bool::True␤»

[19:50] <masak> \o/

[19:51] <moritz> there's no reason for > to coerce to Numeric if it can't deal with any Numeric result

[19:51] <masak> makes sense, I guess.

[19:51] <moritz> (that's a rather recent change)

[19:51] <moritz> thought I did think that the default .Real would re-dispatch to .Numeric.Real

[19:54] <sorear> o/ masak

[19:57] <masak> sorear! hi!

[20:05] *** snearch joined
[20:09] *** lichtkind left
[20:16] <sorear> hello!

[20:17] *** packetknife left
[20:17] *** orafu joined
[20:17] *** packetknife joined
[20:20] <masak> niecza: class Permission { method Real { self.^name.chars } }; class Forgiveness is Permission {}; say Forgiveness > Permission

[20:20] <p6eval> niecza v11-27-gdaa9117: OUTPUT«Bool::False␤»

[20:20] *** packetknife left
[20:20] <masak> hah!

[20:20] <masak> in Niecza, Forgiveness !> Permission :)

[20:20] *** packetknife joined
[20:22] <sorear> .^name NYI

[20:22] <sorear> I'm a little supprised it didn't throw

[20:22] <sorear> niecza: say 1.^name

[20:22] <p6eval> niecza v11-27-gdaa9117: OUTPUT«Unhandled exception: Unable to resolve method name in class ClassHOW␤  at /tmp/CXKOkTbm7A line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2224 (ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2225 (module-CORE @ 58) ␤  at /h…

[20:23] <sorear> oh! > is calling .Numeric, not .Real

[20:23] <sorear> which isn't overridden, so you're getting to Any.Numeric

[20:23] <sorear> which returns 0 if !defined(self)

[20:27] <moritz> niecza: say (2+2i) > (2+3i)

[20:27] <p6eval> niecza v11-27-gdaa9117: OUTPUT«Bool::False␤»

[20:28] <moritz> niecza: say (2+2i) > (3+3i)

[20:28] <p6eval> niecza v11-27-gdaa9117: OUTPUT«Bool::False␤»

[20:28] <moritz> niecza: say (2+2i) >= (2+2i)

[20:28] <p6eval> niecza v11-27-gdaa9117: OUTPUT«Bool::True␤»

[20:29] <moritz> niecza: say (3+2i) > (2+2i)

[20:29] <p6eval> niecza v11-27-gdaa9117: OUTPUT«Bool::True␤»

[20:29] <moritz> niecza: say (2-2i) > (2+2i)

[20:29] <p6eval> niecza v11-27-gdaa9117: OUTPUT«Bool::False␤»

[20:29] <moritz> niecza: say (2-2i) < (2+2i)

[20:29] <p6eval> niecza v11-27-gdaa9117: OUTPUT«Bool::True␤»

[20:30] *** mj41 left
[20:32] <masak> eew

[20:33] <diakopter> :)

[20:35] *** whiteknight joined
[20:36] *** whiteknight is now known as Guest25357

[20:36] *** y3llow_ joined
[20:38] *** y3llow left
[20:38] *** y3llow_ is now known as y3llow

[20:43] <masak> niecza: sub foo {}; my $h = &foo.wrap({}); say $h.WHAT

[20:43] <p6eval> niecza v11-27-gdaa9117: OUTPUT«Unhandled exception: Unable to resolve method wrap in class Sub␤  at /tmp/DN_riAJS37 line 1 (mainline @ 6) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2224 (ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2225 (module-CORE @ 58) ␤  at /home/p…

[20:43] <masak> nom: sub foo {}; my $h = &foo.wrap({}); say $h.WHAT

[20:43] <p6eval> nom 2154eb: OUTPUT«Nominal type check failed for parameter '&wrapper'; expected Callable but got Hash instead␤  in method wrap at src/gen/CORE.setting:1334␤  in block <anon> at /tmp/FNlHorYcWL:1␤  in <anon> at /tmp/FNlHorYcWL:1␤»

[20:44] <masak> oh! :)

[20:44] <masak> nom: sub foo {}; my $h = &foo.wrap({;}); say $h.WHAT

[20:44] <p6eval> nom 2154eb: OUTPUT«WrapHandle()␤»

[20:44] <masak> nom: sub foo {}; my $h = &foo.wrap({;}); say $h.^methods

[20:44] <p6eval> nom 2154eb: OUTPUT«restore eager elems end classify uniq infinite flat hash list pick roll reverse sort values keys kv pairs Array grep first join map min max minmax postcircumfix:<[ ]> at_pos all any one none postcircumfix:<{ }> reduce ACCEPTS ACCEPTS WHERE WHICH WHY Bool so not define…

[20:44] <masak> ETOOMANY

[20:44] <masak> nom: sub foo {}; my $h = &foo.wrap({;}); say $h.^methods(:local)

[20:44] <p6eval> nom 2154eb: OUTPUT«restore␤»

[20:46] <jnthn> masak: broken it yet? :)

[20:47] <diakopter> nom: sub foo {}; my $h = &foo.wrap({;}); my $i = $h.wrap({;}); say $i.WHAT

[20:47] <p6eval> nom 2154eb: OUTPUT«Method 'wrap' not found for invocant of class 'WrapHandle'␤  in block <anon> at /tmp/XfeAENZSbe:1␤  in <anon> at /tmp/XfeAENZSbe:1␤»

[20:48] <jnthn> diakopter: Pretty sure the spec doesn't say you can do anything with the wrap handle other than call .restore :)

[20:48] <moritz> you can only wrap the routine itself again

[20:48] <masak> nom: sub foo {}; my $h = &foo.wrap({;}); $h.restore; $h.restore

[20:48] <p6eval> nom 2154eb:  ( no output )

[20:49] <masak> nom: sub foo { say "unwrapped" }; my $h = &foo.wrap({ say "OH HAI" }); foo; $h.restore; foo; $h.restore; foo

[20:49] <p6eval> nom 2154eb: OUTPUT«OH HAI␤unwrapped␤unwrapped␤»

[20:49] <masak> I guess that could be seen as the right behavior...

[20:50] <jnthn> masak: Oh...hm

[20:50] <masak> :)

[20:50] <jnthn> nom: sub foo {}; my $h = &foo.wrap({;}); say ?$h.restore; say ?$h.restore

[20:50] <p6eval> nom 2154eb: OUTPUT«Bool::True␤Bool::False␤»

[20:51] *** packetkn_ joined
[20:53] *** packetknife left
[20:54] <masak> oh, ok :)

[20:55] <masak> take the challenge! http://twitter.com/OvidPerl/status/140864258358521856

[20:55] <sorear> b: say (2+2i > 2-2i)

[20:55] <p6eval> b 1b7dd1: OUTPUT«Bool::True␤»

[20:57] <sorear> masak: $\mathbf{C}$ does not have an ordering which is compatible with the field structure, but it's still a useful order for binary searches and stuff

[20:57] <sorear> masak: perhaps it would be better to put this under 'cmp'.  However, 'cmp' is still inadequately specced.

[20:57] <masak> sorear: the first thing you said is interesting -- I've never heard anyone advocate that before.

[20:58] <masak> sorear: my gut reaction is that it's not a good idea, though.

[20:58] <geekosaur> the haskell community has tossed the idea around before

[20:58] <masak> sorear: if something isn't compatible with field structure, it shouldn't play with the Numeric comparison ops.

[20:58] <masak> sorear: that's why moritz made < cast to Real, I guess.

[20:59] <geekosaur> (comparison is overloaded; you don't want to have it for field operations, but you sometimes want to use it as a key in a Map..)

[21:04] *** ksi left
[21:04] *** ksi joined
[21:05] <masak> geekosaur: well, that's infix:<cmp> in Perl 6, not infix:<< <=> >>.

[21:05] <masak> geekosaur: and generally Perl tends towards purity of operators. infix:<+> is only for numeric addition, for example. not for adding strings or arrays or other things.

[21:06] <geekosaur> right, that's what sorear was saying (so your "the first thing you saidis interesting" is perhaps a little confusing)

[21:06] <sorear> Perl 6 has 4 sets of comparison operator - < = > <=> for .Real functionality using the induced order from the ordered field structure on R

[21:07] <masak> ==

[21:07] <sorear> le eq gt leq for string comparison, using what the Unicode Consortium calls "binary order" (we haven't specced locale collation yet)

[21:07] *** am0c left
[21:07] <masak> could be done with adverbs, I guess. or pragmata.

[21:08] <sorear> before eqv after cmp for object-value polymorphic comparison, which is still too slushy to implement

[21:08] <sorear> === (for some reason there are no order operators) for object-identity comparison

[21:09] <masak> if ObjAt numifies you could use the numeric comparison ops.

[21:09] <masak> but I'm not sure it does.

[21:10] <arnsholt> Regarding ===, would it even make sense to have order operators for that?

[21:10] <geekosaur> it's not clear to me what non-equality object identity comparison would mean in the general case

[21:10] <geekosaur> ...that

[21:13] <geekosaur> (for things like the Map case, you probably want something like a hash of the representation value, but I'm not clear that that deserves an operator or any significant huffmanization)

[21:18] *** ethndbst joined
[21:18] *** ethndbst left
[21:18] *** ethndbst joined
[21:19] *** fsergot left
[21:20] *** ksi left
[21:20] *** ksi joined
[21:22] *** mj41 joined
[21:24] *** Guest25357 left
[21:27] *** whiteknight joined
[21:27] *** whiteknight left
[21:27] *** plobsing joined
[21:28] *** whiteknight joined
[21:28] *** whiteknight is now known as Guest86525

[21:34] *** ksi left
[21:34] <djanatyn> are the new perl 6 tasks on GCI going live at midnight?

[21:35] *** ksi joined
[21:35] <masak> djanatyn! \o/

[21:36] <djanatyn> Yes, sorry. I haven't been here lately >_>

[21:36] <djanatyn> I've been being lazy, playing a new Zelda game that just came out, and learning some more Haskell in anticipation of a competition coming up soon.

[21:37] *** Guest2721 left
[21:38] <masak> sounds awesome.

[21:39] <masak> I wish I had time to play Zelda games and learn some Haskell :)

[21:40] *** fsergot joined
[21:42] <djanatyn> Yeah, being in highschool has it's perks. :D

[21:42] <flussence> I went out today to buy a game, somehow came home with toothpaste instead. Oh well, less distractions for me...

[21:43] <djanatyn> I've been writing lots of Java too. Bleh.

[21:43] <djanatyn> Not as fun as writing perl6, but still fun in it's own way.

[21:44] <djanatyn> and right now, I'm installing plan9 from bell labs!

[21:52] <masak> djanatyn: I'm currently writing slides for a talk about Java!

[21:52] <djanatyn> Oh, cool.

[21:52] <masak> djanatyn: I haven't known this much about the language since I used it, way back in 2010 :P

[21:52] <djanatyn> ...Java 8?

[21:53] <masak> no, mostly 5 and forwards.

[21:53] <djanatyn> I've been reading a lot about Java 8 on reddit, and the new additions seem pretty cool

[21:53] <masak> I know almost nothing about Java 8. does it have closures?

[21:54] *** thou left
[21:55] <djanatyn> It has lambdas, I know that

[21:55] <djanatyn> And I know they've talked a lot about closures, and I think they were added

[21:57] <masak> those are basically the same.

[21:57] <masak> anyway, woo \o/

[21:57] <masak> finally! in 2012!

[21:57] *** thou joined
[21:58] <sorear> Java has had closures since 1.1

[21:58] <sorear> lambdas are extremely welcome though.  took long enough

[21:59] <sorear> it would also be nice if they could make this stuff lighter-weight at runtime, instead of requiring a runtime Class for every reified function

[22:00] <arnsholt> sorear: IIRC there are some limitations to Java's closures though. Like only being able to close over final variables

[22:00] <masak> right.

[22:00] <masak> which pulls most of the fun out of them, to be honest.

[22:01] <masak> but yeah, I guess those are closures.

[22:01] <masak> you can put stuff in 1-element arrays and access it anyway :P

[22:02] <arnsholt> I can't remember when I last tried to do something closurey in Java, but I do remember my fun being spoiled by that

[22:02] <sorear> arnsholt: Haskell can only close over final variables too :P

[22:03] <arnsholt> Haskell mostly has only final variables =p

[22:04] <djanatyn> Our school is using Java 6, which is pretty lame

[22:05] <djanatyn> So I would probably get points deducted if I used java 8 features, as we submit just the source code to our teachers, and she uses her Java 6 JDK to compile

[22:05] <masak> djanatyn: at least it isn't Java 1.2

[22:05] <sorear> mine too.  "We're using the most recently released version, Java 1.6.2" # their words exactly.

[22:05] <djanatyn> o_o

[22:06] <sorear> WHAT PART OF BUG FIX RELEASES DO YOU NOT GET

[22:06] <djanatyn> ouch

[22:06] <masak> wow.

[22:07] <djanatyn> sorear: Do you write Java at your job?

[22:07] <sorear> djanatyn: no, mine [school]

[22:07] <masak> djanatyn: you just assume everyone is employed :)

[22:08] <djanatyn> Oh. :)

[22:08] <djanatyn> Sorry ^_^;

[22:12] <djanatyn> flussence: by the way, what game did you go out to get?

[22:15] <masak> more importantly, what toothpaste did you end up with? :P

[22:17] <flussence> I heard people actually like the new Sonic game, but turns out it's not out on any platform I own :( toothpaste was generic store-brand stuff, but it's green!

[22:21] <masak> green means healthy!

[22:22] <masak> and natural.

[22:23] <jnthn> What does aquafresh mean? :)

[22:24] <djanatyn> flussence: uhh, it's out for PC

[22:26] <flussence> I don't feel like installing wine that badly :)

[22:29] <masak> jnthn: Russia!

[22:30] <jnthn> :D

[22:30] <masak> or France, or any number of countries, I guess.

[22:31] <jnthn> Yeah, but Russia is big and awesome and has the Moscow Metro. :)

[22:32] <masak> \o/

[22:35] *** Trashlord left
[22:35] *** araujo left
[22:36] *** flussence left
[22:36] *** ethndbst left
[22:37] *** Trashlord joined
[22:37] *** ethndbst joined
[22:37] *** ethndbst left
[22:37] *** ethndbst joined
[22:39] *** orafu left
[22:39] *** orafu joined
[22:41] *** miso2217_ left
[22:41] *** Ingis left
[22:41] *** aindilis` left
[22:41] *** mattp_ left
[22:41] *** jaldhar left
[22:41] *** p6eval left
[22:41] *** spacebat left
[22:41] *** renormalist left
[22:41] *** wooden left
[22:41] *** zb left
[22:41] *** kcwu left
[22:41] *** charsbar__ left
[22:41] *** Bucciarati left
[22:41] *** Gothmog_ left
[22:41] *** rsimoes1 left
[22:41] *** jfried left
[22:41] *** moritz left
[22:41] *** ruoso left
[22:41] *** jerome_ left
[22:41] *** betterworld left
[22:41] *** Helios left
[22:41] *** benabik left
[22:41] *** masak left
[22:41] *** fhelmberger left
[22:41] *** yves left
[22:41] *** moritz joined
[22:41] *** z-b joined
[22:41] *** wooden joined
[22:41] *** Yappoko___ joined
[22:41] *** nsh_ joined
[22:41] *** jnthn joined
[22:41] *** pmichaud joined
[22:41] *** Gothmog_ joined
[22:41] *** kcwu joined
[22:41] *** broquaint joined
[22:41] *** huf joined
[22:41] *** miso2217_ joined
[22:41] *** yves joined
[22:41] *** jfried joined
[22:41] *** rsimoes1 joined
[22:41] *** ksi left
[22:41] *** masak_ joined
[22:41] *** ruoso_ joined
[22:41] *** charsbar__ joined
[22:41] *** Ingis joined
[22:42] *** aindilis` joined
[22:42] *** yahooooo joined
[22:42] *** p6eval joined
[22:42] *** mattp_ joined
[22:42] *** chitragupt joined
[22:42] *** fhelmberger joined
[22:42] *** ChanServ sets mode: +v p6eval

[22:42] *** jerome_ joined
[22:42] *** Helios joined
[22:42] *** wooden left
[22:42] *** wooden joined
[22:42] *** jaldhar joined
[22:42] *** kthakore joined
[22:42] *** renormalist joined
[22:42] *** zby_home___ left
[22:43] *** PacoLinux left
[22:43] *** masak_ is now known as masak

[22:43] *** daemon joined
[22:46] *** spacebat joined
[22:46] *** betterworld joined
[22:47] *** Bucciarati joined
[22:48] *** Trashlord left
[22:48] *** benabik joined
[22:49] *** packetkn_ is now known as packetknife

[22:49] <dalek> nqp/unirx: 1216a2a | diakopter++ | src/ops/nqp.ops:

[22:49] <dalek> nqp/unirx: import is_uprop parrot op from rakudo ng

[22:49] <dalek> nqp/unirx: review: https://github.com/perl6/nqp/commit/1216a2a144

[22:49] <diakopter> um

[22:50] *** araujo joined
[22:50] *** araujo left
[22:50] *** araujo joined
[22:50] *** silug left
[22:51] <dalek> nqp/unirx: 109e4aa | diakopter++ | src/ops/nqp.ops:

[22:51] <dalek> nqp/unirx: add uchar.h include

[22:51] <dalek> nqp/unirx: review: https://github.com/perl6/nqp/commit/109e4aa767

[22:52] *** Trashlord joined
[22:53] <masak> good night, #perl6

[22:55] *** packetknife left
[22:55] *** packetknife joined
[22:58] *** Trashlord left
[22:59] * diakopter gawks at S05  "Terms may also be combined using & for set intersection, | for set union, and ^ for symmetric set difference. Parens may be used for grouping."

[23:01] *** orafu left
[23:03] *** orafu joined
[23:07] *** Trashlord joined
[23:12] *** Trashlord left
[23:16] <jnthn> night, #perl6

[23:20] *** orafu left
[23:20] *** orafu joined
[23:22] *** lutok left
[23:29] *** stepnem left
[23:31] *** stepnem joined
[23:33] *** alvis left
[23:35] *** orafu left
[23:36] *** orafu joined
[23:39] *** hundskatt left
[23:46] *** alvis joined
[23:47] *** mj41 left
[23:48] <dalek> nqp/unirx: d4a0667 | diakopter++ | src/Q (3 files):

[23:48] <dalek> nqp/unirx: Unicode properties in regexes (new S05 syntax)

[23:48] <dalek> nqp/unirx: review: https://github.com/perl6/nqp/commit/d4a0667060

[23:49] <[Coke]> Tomorrow is the deadline for getting perl6 tasks into GCI. Hurry Hurry. ;)

[23:50] *** f00li5h left
[23:51] <diakopter> [Coke]: want a task to do?

[23:51] <diakopter> not GCI, I mean

[23:52] <[Coke]> diakopter: I am not a student, if that's where you're heading.

[23:52] <diakopter> no

[23:52] <[Coke]> No, I'm not looking for perl6 work at the moment. Thanks, though.

[23:52] <diakopter> maybe you can help me answer this question though

[23:53] <diakopter> roast/S05-mass/properties-block.t

[23:54] <diakopter> nm, answered it myself I think

[23:57] <sorear> diakopter: how many unicode props are you adding?

