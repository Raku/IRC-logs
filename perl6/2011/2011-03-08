[00:03] *** TheMartianGeek joined
[00:03] <sorear> o/ TheMartianGeek 

[00:04] <TheMartianGeek> ?

[00:04] <sjohnson> he's saying hi

[00:04] <sorear> Just hi

[00:04] <TheMartianGeek> Hi.

[00:04] <dalek> niecza: 680b5fb | sorear++ | / (4 files):

[00:04] <dalek> niecza: Support unit names with :: and filenames like A/B.pm

[00:04] <dalek> niecza: review: https://github.com/sorear/niecza/commit/680b5fb550

[00:05] *** risou left
[00:06] *** plobsing joined
[00:09] *** rdesfo joined
[00:13] *** whiteknight joined
[00:14] *** porter235 joined
[00:16] *** plobsing left
[00:18] *** porter235 left
[00:25] *** f00li5h left
[00:35] <dalek> niecza: 4f25aea | sorear++ | src/Op.pm6:

[00:35] <dalek> niecza: Stub in type fields for my and has declarations

[00:35] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4f25aea37f

[00:35] <dalek> niecza: cab2294 | sorear++ | / (2 files):

[00:35] <dalek> niecza: Start collecting example code

[00:35] <dalek> niecza: review: https://github.com/sorear/niecza/commit/cab2294aa4

[00:35] *** f00li5h joined
[00:38] *** jevin joined
[00:40] *** f00li5h left
[00:40] *** rgrau left
[00:45] *** plobsing joined
[00:47] *** cdarroch left
[00:47] *** f00li5h joined
[00:53] *** f00li5h left
[00:54] *** rdesfo left
[00:55] *** lichtkind left
[00:56] *** donri left
[00:56] *** f00li5h joined
[01:03] *** f00li5h left
[01:09] *** saaki joined
[01:11] *** TheMartianGeek left
[01:14] *** woosley joined
[01:15] *** marcio_ferreira joined
[01:20] *** f00li5h joined
[01:23] *** c1sung left
[01:27] *** mtk left
[01:27] *** ymasory joined
[01:32] *** whiteknight left
[01:36] *** mtk joined
[01:36] *** fisted_ left
[01:39] <dalek> niecza: e835ea6 | sorear++ | src/niecza:

[01:39] <dalek> niecza: Parse types on declarators

[01:39] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e835ea6fe9

[01:39] <dalek> niecza: 34092d2 | sorear++ | src/Op.pm6:

[01:39] <dalek> niecza: Stub in sigil and rw fields for attributes

[01:39] <dalek> niecza: review: https://github.com/sorear/niecza/commit/34092d247b

[01:39] <dalek> niecza: bb8c799 | sorear++ | src/ (3 files):

[01:39] <dalek> niecza: Pass declaration type constraints down to nam-level

[01:39] <dalek> niecza: review: https://github.com/sorear/niecza/commit/bb8c799be8

[01:40] *** c1sung joined
[01:41] *** fisted joined
[01:48] *** literal_ left
[01:50] *** leprevost joined
[01:55] *** impious left
[02:01] *** noganex_ joined
[02:04] *** noganex left
[02:07] *** stkowski left
[02:10] *** __rnddim__ is now known as lue

[02:14] *** porter235 joined
[02:18] *** f00li5h left
[02:19] *** porter235 left
[02:44] <dalek> niecza: 2e201e7 | sorear++ | / (3 files):

[02:44] <dalek> niecza: Actually implement variable and attribute type constraining

[02:44] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2e201e74e7

[02:44] *** gdey_ left
[02:44] *** f00li5h joined
[02:47] <sorear> std: 2 R.= pred;

[02:47] <p6eval> std 4608239: OUTPUT¬´ok 00:01 119m‚ê§¬ª

[02:54] <diakopter> std: 2 RZ.= 1;

[02:54] <p6eval> std 4608239: OUTPUT¬´ok 00:01 119m‚ê§¬ª

[02:57] <sorear> std: 1 + 2 R:foo

[02:57] <p6eval> std 4608239: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Bogus term at /tmp/svr4UE2FMS line 1 (EOF):‚ê§------> [32m1 + 2 R:foo[33m‚èè[31m<EOL>[0m‚ê§Parse failed‚ê§FAILED 00:01 120m‚ê§¬ª

[02:57] <sorear> std: 1 + 2 >>:foo

[02:57] <p6eval> std 4608239: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Missing << or >> at /tmp/zOEVWzNXAN line 1:‚ê§------> [32m1 + 2 >>:foo[33m‚èè[31m<EOL>[0m‚ê§    expecting any of:‚ê§     coloncircumfix‚ê§ infix_circumfix_meta_operator‚ê§Parse failed‚ê§FAILED 00:01 119m‚ê§¬ª

[02:57] <sorear> std: 1 + 2 :foo=

[02:57] <p6eval> std 4608239: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Bogus term at /tmp/iOL9YN5x4R line 1 (EOF):‚ê§------> [32m1 + 2 :foo=[33m‚èè[31m<EOL>[0m‚ê§Parse failed‚ê§FAILED 00:01 120m‚ê§¬ª

[02:57] <sorear> std: [:foo] 1, 2, 3

[02:57] <p6eval> std 4608239: OUTPUT¬´ok 00:01 120m‚ê§¬ª

[03:00] <entel> woah

[03:00] <entel> that is ugly

[03:01] <TimToady> I don't mind if the semantic analysis blows most of those out of the water, with prejudice...

[03:02] *** f00li5h left
[03:02] <takadonet1> pyrimidine: ping

[03:17] *** f00li5h joined
[03:22] *** f00li5h left
[03:43] *** gdey_ joined
[03:45] *** leprevost left
[03:46] *** gdey_ left
[03:46] *** gdey_ joined
[03:55] *** rdesfo joined
[03:56] *** rdesfo left
[04:07] *** Patterner left
[04:07] *** Psyche^ joined
[04:07] *** Psyche^ is now known as Patterner

[04:11] *** ymasory left
[04:15] *** porter235 joined
[04:19] *** porter235 left
[04:23] *** Su-Shee_ joined
[04:25] *** Su-Shee left
[04:29] *** cognominal joined
[04:38] *** satyavvd joined
[04:39] *** satyavvd left
[04:46] *** nymacro joined
[04:50] *** c1sung left
[04:57] *** satyavvd joined
[04:59] *** orafu left
[04:59] *** orafu joined
[04:59] *** am0c^ joined
[05:01] *** takadonet1 left
[05:03] *** c1sung joined
[05:35] *** am0c^ left
[05:42] *** cjk101010 joined
[05:52] *** c1sung left
[05:55] *** stepnem left
[05:58] *** stepnem joined
[06:00] *** orafu left
[06:01] *** orafu joined
[06:08] *** kaare_ joined
[06:15] *** porter235 joined
[06:19] *** porter235 left
[06:29] *** am0c joined
[06:38] <mberends> yawn. waking up in the middle of the night should be put to good use.

[06:40] *** noganex_ is now known as noganex

[06:40] <dalek> rakudo: 3680ac3 | martin++ | tools/test_summary.pl:

[06:40] <dalek> rakudo: [tools/test_summary.pl] switch to grep, improve workarounds for planless tests

[06:40] <dalek> rakudo: 

[06:40] <dalek> rakudo: The script partly failed on ack-challenged systems, also on those that name it

[06:40] <dalek> rakudo: ack-grep, such as Debian/Ubuntu.  Now grep does that work more portably.

[06:40] <dalek> rakudo: 

[06:40] <dalek> rakudo: The script also jumped through some convoluted hoops attempting to calculate

[06:40] <dalek> rakudo: the total number of tests planned per script and per Synopsis - one of the

[06:40] <dalek> rakudo: drawbacks of planless testing.  It now jumps through the hoops in a less

[06:40] <dalek> rakudo: convoluted way.

[06:40] <dalek> rakudo: 

[06:40] <dalek> rakudo: Please give 'time perl tools/test_summary.pl' a try when you would otherwise

[06:40] <dalek> rakudo: have run 'make spectest' - it takes the same amount of time and gives a more

[06:40] <dalek> rakudo: detailed output.  As an added bonus, each test is benchmarked in microseconds

[06:40] <dalek> rakudo: with the results accumulating in 'docs/test_summary.times'.

[06:40] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/3680ac3f29

[06:43] <mberends> hmm, must fix my git user name locally again (lost during fresh OS installation)

[06:44] *** c0tt0 left
[06:44] *** orafu left
[06:45] *** tyatpi_ left
[06:46] *** tyatpi_ joined
[06:58] <woldrich> If I want to buy a book on Perl6, what would I buy?

[06:58] <woldrich> The Perl6 Essentials book is quite old

[07:01] * sorear is amazed that Perl 6 books exist at *all*

[07:01] <sorear> hello mberends

[07:02] <Tene> woldrich: go to a copy shop and print off your own copy of https://github.com/perl6/book

[07:02] <woldrich> I think that'll be quite expensive though

[07:02] <Tene> woldrich: or wait until that is finished and published at some future time.

[07:02] <mberends> hi sorear, I wish you were hear (at the hackthon)

[07:03] <Tene> woldrich: No, it shouldn't be.  In the past when I've done that, it's been around $10-$15 to get it printed and spiral bound

[07:03] <woldrich> I once printed out a Perl5 book on my printer at home. I didnt realize it was > 800 pages. It took a while...

[07:03] * sorear generally agrees with merlyn that mass printing would be premature

[07:03] *** baest left
[07:04] *** justatheory left
[07:04] <sorear> mberends: me too!

[07:04] *** justatheory joined
[07:04] <woldrich> Is merlyn active in the perl6 community?

[07:04] <Tene> http://www.fedex.com/us/office/ seems to now have a "book printing" option, claiming to start around $13, and that's where I've gone in the past (used to be kinkos, I guess)

[07:04] <sorear> he appears from time to time

[07:05] <woldrich> I just found this; http://www.amazon.com/Perl-Another-Virtual-Machine-Documentation/dp/1157336175/ref=sr_1_1?s=books&ie=UTF8&qid=1299567906&sr=1-1

[07:05] <Tene> sorear: there was a book published about parrot, iirc...

[07:06] <sorear> Tene: when I found out about it I laughed

[07:06] <Tene> :D

[07:06] <sorear> parrot has been completely redesigned about three times since then

[07:08] *** justatheory left
[07:08] *** lopaway is now known as lopnor

[07:08] * sorear is having difficulty figuring out how to implement $foo .= bar;

[07:09] <TiMBuS> whats the perl6 version of getline

[07:09] <sorear> $fh.get

[07:09] <sorear> rakudo: say $*IN.get

[07:09] <TiMBuS> thanks. i mindblanked and irc is faster than google

[07:09] <p6eval> rakudo 7fb634: OUTPUT¬´Land der Berge, Land am Strome,‚ê§¬ª

[07:09] <TiMBuS> sometimes

[07:10] <TiMBuS> and, .lines is lazy correct?

[07:12] *** lopnor is now known as lopaway

[07:13] <TiMBuS> wait no that wouldnt be the case..

[07:14] <moritz_> .lines is lazy, yes

[07:15] <sorear> usually, the arguments to an infix operator are things that evaluate to a value

[07:15] <sorear> the right argument of .= is a method name

[07:16] <moritz_> iirc it's special-cased in the grammar and in the actions

[07:16] <sorear> what actions? :)

[07:17] *** Mowah joined
[07:17] *** baest joined
[07:21] <moritz_> semantic translation pass

[07:22] <sorear> this is for niecza

[07:22] <sorear> there is no semantic translation for .= yet

[07:24] <moritz_> well, you need one

[07:27] <dalek> niecza: 8b27c3b | sorear++ | / (2 files):

[07:27] <dalek> niecza: Add support for $x.=foo and $x .= foo

[07:27] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8b27c3be3d

[07:28] <sorear> it does not please me that these two code paths are almost entirely independant in STD

[07:28] * sorear -> sleep

[07:29] <TiMBuS> rakudo: my @l := $*IN.lines; say @l[0]; say $*IN.get; say @l[0];

[07:29] <p6eval> rakudo 7fb634: OUTPUT¬´Land der Berge, Land am Strome,‚ê§Land der √Ñcker, Land der Dome,‚ê§Land der Berge, Land am Strome,‚ê§¬ª

[07:29] <TiMBuS> i see..

[07:30] <TiMBuS> rakudo: my @l := $*IN.lines; say @l[0]; say $*IN.get; say @l[1];

[07:30] <p6eval> rakudo 7fb634: OUTPUT¬´Land der Berge, Land am Strome,‚ê§Land der √Ñcker, Land der Dome,‚ê§Land der H√§mmer, zukunftsreich!‚ê§¬ª

[07:30] <TiMBuS> oh boy..

[07:35] *** fhelmberger joined
[07:35] *** masak joined
[07:35] <masak> morning, zebras.

[07:35] *** fhelmberger left
[07:36] *** fhelmberger joined
[07:36] <sorear> masak: *drive by hello*

[07:37] <sorear> just finished my prereport... leaving IRC soon

[07:37] <masak> sorear++

[07:37] <masak> (for prereporting, not for leaving) :)

[07:37] <mberends> *chghh*oedemor*chghh*en masak 

[07:37] <masak> :P

[07:38] <masak> mberends: that's not you in the shower, then...

[07:38] <mberends> was in the bath tbh

[07:38] <masak> ooh

[07:40] <masak> I'll just wait here in this comfortable bed then, for the hot water reserve to rebuild itself... :)

[07:40] * masak digs back into the p5 post

[07:41] <mberends> 40¬∞C and building

[07:41] <masak> I don't need any hotter than that, actually... :)

[07:41] * mberends likes it HOT

[07:42] * masak hears jnthn stirring, and dashes for the shower

[07:43] <mberends> impossible, it's before 9am locally and he has no $dayjob today!

[07:51] <tadzik> o/

[07:57] <masak> mberends: I realized that after the dashing...

[07:57] <masak> but it was a good way to motivate myself out of the warm, cozy bed. :)

[07:57] <masak> tadzik: \o

[07:59] <mberends> o/ tadzik, you is haz a good sleep?

[08:00] <masak> 'is haz' being the perfect participle in lol...

[08:02] <mberends> one of its many uses

[08:03] <masak> "Im shure I is haz the toy mouse sumwhere..."

[08:04] <mberends> s/sumwhere/sumware[z]/

[08:05] <masak> oh right

[08:05] <masak> mberends++ # lolgrammarian

[08:05] <mberends> nah, just a n00b

[08:08] <tadzik> mberends: notmuch, but notbad :)

[08:08] <masak> I feel like a n00b, too. the first thing that happened when I got down here is that I fell into the liquorice trap...

[08:09] <masak> I got out, but just barely.

[08:09] <mberends> oops

[08:10] <masak> it was ironic because what I really was after was the juice... :)

[08:11] <mberends> .oO( iron liquorice juice )

[08:12] <mberends> sound like the name of a '70s psychedelic rock album

[08:13] <masak> :D

[08:15] *** porter235 joined
[08:16] <mberends> omg jnthn++ is in the shower!

[08:17] <masak> all morning: live reporting from the Berends manor.

[08:17] <masak> stay tuned for more.

[08:17] <mberends> should we create an @vught account on twitter?

[08:18] *** shi joined
[08:18] <masak> if this becomes a recurrent thing, sure.

[08:20] <mberends> hopefully the hackathon becomes a recurrent thing, not sure if it can though

[08:20] <masak> no... :/

[08:20] <masak> mberends: we should invite you up to Lund soonish.

[08:21] <masak> and make you wonderful dals and home-made pizzas \o/

[08:22] <mberends> masak: no need, I autovivify invitations as the opportunities arise :)

[08:22] *** porter235 left
[08:22] <masak> oh, by 'we should invite' I really meant 'you should come' :P

[08:22] <mberends> :)

[08:24] *** orafu joined
[08:32] <mathw> I think that was your invitation :)

[08:33] <masak> $invitation.is-open = True;

[08:35] *** Trashlord left
[08:35] *** Su-Shee_ is now known as Su-Shee

[08:44] <mberends> $self.accepts($invitation);

[08:45] <masak> $inviter.perform-gesture('\o/')

[08:45] <masak> ;

[08:46] *** am0c left
[08:46] <mathw> $observer.snort($milk, :diversion($nose.interior));

[08:47] <masak> whoa, I didn't know we were using the Observer pattern...

[08:47] <masak> also, I think we're breaking Demeter's law with that $nose variable... :P

[08:48] <jnthn> oh morning...

[08:48] <masak> jnthn! \o/

[08:48] <jnthn> I wish you didn't make me being in the shower seem like a surprising thing :P

[08:49] <masak> sounds like you didn't backlog far enough... :)

[08:49] <mathw> oh hai jnthn

[08:49] <TiMBuS> it would surprise me if you were in my shower D:

[08:49] <mathw> it'd surprise you if you were in mine

[08:50] <mathw> it likes to surprise people with sudden temperature fluctuations

[08:50] <jnthn> oh fluc...

[08:50] <mathw> and sometimes a cat peering around the curtain

[08:50] <masak> 'fluc' sounds like a French fizzy drink.

[08:51] <mberends> jnthn: it wasn't sufficiently explained that the $time-of-morning was the surprising part.

[08:52] <jnthn> oh, I see that now... :)

[08:52] <masak> rakudo: say (my %).push("foo" => 2, "foo" => 5).perl

[08:52] <p6eval> rakudo 3680ac: OUTPUT¬´{"foo" => [2, 5]}‚ê§¬ª

[08:53] <jnthn> Mmm. There is a tempting pack of stroopwafels sat right next to me.

[08:53] <moritz_> wow, (my %).push is pretty cool :-)

[08:53] <masak> I'm reviewing p5 solutions :)

[08:53] <moritz_> of course you could have used {}.push too :-)

[08:54] <masak> hm, true.

[08:54] <moritz_> but the elitism doesn't shine through {} quite as clearly as through (my %)

[08:54] <masak> :D

[08:54] <masak> the contestant doesn't do either, so it's fine.

[08:57] <moritz_> masak++ # -n

[08:57] <moritz_> masak++ # -p

[08:57] <masak> Rakudo is now NP-complete \o/

[08:58] <masak> tadzik immediately saw the potential for this technique being abused for other options...

[08:58] <masak> I say let's abuse it till it bites us ;)

[08:59] <mathw> jnthn: what are stroopwafels?

[08:59] <mathw> are they things I should know about?

[08:59] <masak> mathw: syrup waffles.

[08:59] <moritz_> no! Then more will remain for me

[08:59] <masak> mathw: and yes.

[08:59] <moritz_> tadzik: you have table tennis classes? (backlogging...) now I' jealous

[08:59] <masak> mathw: they're a Dutch specialty.

[08:59] <jnthn> They're amazing.

[09:00] <masak> they're probably very unhealthy.

[09:00] <jdhore> I think this week i'm going to do all the local stuff that's supposed to be done for a release...Just so i can make sure i know how to do everything so (if there's nothing broken in Rakudo), the release on the 17th will be super-smooth sailing

[09:00] <masak> jdhore: that's a good idea.

[09:00] <mathw> hmm

[09:00] <jdhore> :D

[09:00] * jnthn puts one into his mouth...MMMMMMM 

[09:00] <mathw> waffles are something we've never really adopted over here

[09:00] <moritz_> jdhore: you can also fork rakudo on github, and do all of the release, except sending the email

[09:00] <mathw> other than the occasionally-found belgian waffles served as dessert

[09:01] <jdhore> Also, Waffles FTW

[09:01] * moritz_ had waffles on Sunday and yesterday for breakfast

[09:01] <jdhore> moritz_, Well, I'll prolly rm my tree and do a clean clone on release day. I'm anal like that.

[09:02] <mathw> I think the first time I had waffles was in Germany actually

[09:02] <mathw> it was supposed to be Kaffee und Kuchen, but it was Waffeln und Orangensaft instead :)

[09:03] <moritz_> :-)

[09:03] <moritz_> "Kafee und Kuchen" is more like a label like "tea time", and doesn't necessarily refer to what is actually offered (though it often does)

[09:04] <mathw> I didn't complain

[09:04] <mathw> I'm not much of a fan of Kafee

[09:05] <moritz_> (sorry, Kaffee. Can't spell in my native language either :-)

[09:06] <tadzik> moritz_: that's actually my PE classes

[09:06] <tadzik> used to be gym and the swimming pool, you can choose what you want

[09:07] <tadzik> I should invite you to Poland one day

[09:07] <mathw> I did think that was a bit odd :)

[09:07] <tadzik> although there are not many nice Perl events here

[09:07] <moritz_> tadzik: I wish I had that option back then; I've always been doing in it my copious free time, and was rather bad in other PE subjects

[09:08] <tadzik> schade

[09:13] *** nymacro left
[09:13] *** nymacro joined
[09:14] <mathw> swimming was the only thing in PE I ever enjoyed

[09:14] <mathw> my teacher even noticed

[09:15] *** mtk left
[09:15] <moritz_> for me swimming was always "trying not to drown" :-)

[09:22] *** _twitch joined
[09:23] *** mtk joined
[09:27] <moritz_> jnthn: https://gist.github.com/860081 nqp build fail in ctmo branch

[09:30] <moritz_> huh, getting the same error in master

[09:31] <moritz_> jnthn: what parrot do you use for building nqp?

[09:37] <jnthn> moritz_: Just using the one in the current parrot revision file, afaik

[09:37] *** dakkar joined
[09:38] <jnthn> moritz_: oh ouch

[09:39] <jnthn> oh wait, I think I found it.

[09:40] <moritz_> jnthn: once my build works again, I'd like to bump PARROT_REVISION and patch nqp's Configure.pl to explicitly use the generational GC. Would that be OK for you?

[09:41] <jnthn> +1

[09:41] <moritz_> I don't want to interrupt your productivity by cleaning up new parrot mess... :-)

[09:41] <jnthn> Do it in master

[09:41] <moritz_> sure

[09:41] <jnthn> I'll merge into ctmo

[09:41] <masak> I've always like swimming, too. I took extra long to learn during the mandatory swimming classes in grade school, just because I liked it. :)

[09:42] <masak> jnthn: "ctmo"? Chief Technology Marketing Officer?

[09:43] <moritz_> CerializaTion of Meta Objects, obviously :-)

[09:43] <jnthn> Compile time Meta Objects :P

[09:43] <masak> it rolls off the tongue nicely... "ctmo"...

[09:44] <masak> "Don't worry, this is my Cuban Terrorist Modus Operandi."

[09:45] <dalek> nqp/ctmo: 5cd263b | jonathan++ | src/pmc/nqplexinfo.pmc:

[09:45] <dalek> nqp/ctmo: Remove an assertion check that is no longer valid. Guess they must not get checked on my platform, somehow. moritz++ for noticing.

[09:45] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/5cd263bc76

[09:45] <jnthn> moritz_: ^^ and feel free to cherry pick into master

[09:47] <moritz_> jnthn: will do (and test)

[09:47] *** jmm_ joined
[09:47] <jmm_> hello guys !

[09:48] <masak> hello jmm_!

[09:48] *** Rotwang joined
[09:48] * moritz_ hopes we have girls too

[09:48] <masak> moritz_: I find it slightly over-PC to claim that the generic 'guys' leaves out women... ;)

[09:49] <masak> it's like objecting to the phrase "A small step for Man..."

[09:49] <mberends> rakudo: my $i=3; sub be() { (("night","the","in","strangers")[$i--]~" ").print; }; do be; do be; do be; do be # do

[09:49] <p6eval> rakudo 3680ac: OUTPUT¬´strangers in the night ¬ª

[09:49] <huf> is on average a middling step for woman

[09:49] <huf> yeah

[09:51] <masak> Douglas Hofstadter thinks it's a silent contributor to non-equality, though. he has a fascinating essay wherein he converts the usual gender pronouns into ones pertaining to race.

[09:51] <masak> it's in "Metamagical Themas"

[09:55] *** woosley1 joined
[09:56] *** woosley left
[09:59] *** kfo_ joined
[09:59] <mathw> I do feel most languages miss out on third-person gender-neutral pronouns

[09:59] <masak> Finnish, Estonian and Ido being nice exceptions.

[10:00] <mathw> and Lojban :)

[10:00] <masak> of course :P

[10:00] <huf> and hungarian :)

[10:00] <masak> oh yes.

[10:00] <masak> Finnish, Estonian and Hungarian go together :)

[10:00] <mathw> excellent

[10:00] <huf> yep

[10:00] <mathw> actual natural languages too

[10:00] <masak> Mandarin is a funny middle-ground example. their 3p pronouns *sound* the same but are written differently.

[10:00] <mathw> in English we seem to end up using 'they' which is rather unsatisfactory

[10:00] <huf> there's a downside tho, you lose the disambiguating power of he/she

[10:01] <masak> those stupid missionaries introduced the female 3p character.

[10:01] <mathw> huf: does Hungarian not have gender-specific ones as well?

[10:01] <huf> nope

[10:01] <mathw> interesting

[10:01] <dalek> nqp/ctmo: 4b97ed3 | jonathan++ | / (7 files):

[10:01] <dalek> nqp/ctmo: Update bootstrap with setting loading in the compiled code.

[10:01] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/4b97ed3313

[10:01] <mathw> Lojban doesn't either, but I'd not have expected to find that in a natural language

[10:02] <moritz_> $ ./nqp t/nqp/05-comments.t

[10:02] <moritz_> "load_bytecode" couldn't find file 'NQPCORE.setting.pbc'

[10:02] <huf> i'm just glad english doesnt take the gender thing seriously

[10:02] <moritz_> jnthn: that seems to be happening for all test files (in master)

[10:02] <jnthn> moritz_: huh

[10:02] <jnthn> Does it happen in the ctmo branch?

[10:03] <moritz_> that was master, but I'll try ctmo too

[10:03] <masak> "Citrus Tangerine Melon Orange"

[10:03] <jnthn> moritz_: Also, do you have an NQPCORE.setting.pbc file?

[10:03] <huf> for a second there i thought you had a branch called "cmot"

[10:03] <moritz_> yep, in src/stage{0,1,2}/

[10:04] <jnthn> Oh,  but it shoulda been copied too

[10:04] <jnthn> to the root dir

[10:04] <moritz_> I'll double-check that after I tried ctmo

[10:04] <Tene> jnthn: No 6model for me tonight; got stuck with work again :(

[10:06] <dalek> nqp/ctmo: f313172 | jonathan++ | build/Makefile.in:

[10:06] <dalek> nqp/ctmo: Makefile.in fix; moritz++ for reporting.

[10:06] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/f313172e5f

[10:07] <jnthn> Tene: Aww. I didn't get tuits for writng the repr for you yesterday either...so many things to hack on!

[10:07] <jnthn> moritz_: See f313172. Bet it's that.

[10:09] * moritz_ tries with cherry-picking

[10:11] <masak> <TimToady> Nil is the absence of an expected value

[10:11] <masak> with this reasoning, shouldn't hash misses yield a Nil value?

[10:11] <masak> rakudo: my %h; say %h<nonexistent>.WHAT

[10:11] <p6eval> rakudo 3680ac: OUTPUT¬´Any()‚ê§¬ª

[10:12] <masak> then again, the hashes are typed as having Any values by default...

[10:14] <dalek> nqp: f15a5ef | jonathan++ | src/pmc/nqplexinfo.pmc:

[10:14] <dalek> nqp: Remove an assertion check that is no longer valid. Guess they must not get checked on my platform, somehow. moritz++ for noticing.

[10:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f15a5efe02

[10:14] <dalek> nqp: 95092bf | moritz++ | build/Makefile.in:

[10:14] <dalek> nqp: fix Makefile.in by jnthn++ (automatic cherry-pick of f313172 failed, sorry)

[10:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/95092bf1ce

[10:16] <jnthn> moritz_: Did it help?

[10:17] <moritz_> jnthn: ja

[10:17] <moritz_> build fine, 'make test' same as usual

[10:18] *** porter235 joined
[10:20] <jnthn> moritz_: As in, couple of fails?

[10:21] <tadzik> mberends++ # do be do be do be do

[10:27] *** porter235 left
[10:27] *** agentzh joined
[10:28] <moritz_> jnthn: as in, 02-modules.t fails

[10:28] <moritz_> jnthn: and the rest is clean

[10:28] <moritz_> (master)

[10:31] <tadzik> having trouble building the Book: http://wklej.org/id/488962/

[10:31] <tadzik> can anyone help?

[10:33] <moritz_> build succeeeds here

[10:33] <moritz_> I also get the "UsingPerl6.a4.d: No such file or directory

[10:34] <moritz_> message

[10:35] <moritz_> tadzik: is that failure repeatable after a 'make clean'?

[10:38] <tadzik> moritz_: aye. And git clean

[10:39] <tadzik> otoh, I'm not sure if I have all the dependencies, I was hoping make will give me a hint about what's missing

[10:40] *** jerome joined
[10:41] * Tene finally sleeps.

[10:43] <moritz_> tadzik: it will not

[10:45] *** Rotwang left
[10:45] <tadzik> darn

[10:46] <moritz_> go through the README, check 'em all

[10:46] <tadzik> they have different names on my distro, that's the issue

[10:46] <tadzik> I'll look carefully through it

[10:59] <TiMBuS> ok i finally got off my lazy ass (then sat back down on it) and then wrote this: https://gist.github.com/860141

[10:59] <TiMBuS> it is a more easier IO::Socket::INET

[11:00] <TiMBuS> is this ok or did i mess it up

[11:00] <moritz_> TiMBuS: does it work? both with IPv4 and IPv6?

[11:00] * moritz_ is really not up to judging socket related work

[11:00] <tadzik> submethod BUILD { callsame; }

[11:00] <tadzik> does it work as I expect it to?

[11:00] <moritz_> tadzik: huh?

[11:00] <TiMBuS> dunno about ipv6 because parrot

[11:01] <TiMBuS> tadzik, it should

[11:01] <moritz_> tadzik: what do you expect it to do?

[11:01] <moritz_> it's not a multi

[11:01] <moritz_> and the parent's submethod is not visible to you

[11:01] <moritz_> where should it redispatch to?

[11:01] <tadzik> oh, it does!

[11:01] <tadzik> it's the AFTERPARTY I was looking for

[11:02] <TiMBuS> if you dont callsame you dont get default values

[11:02] <tadzik> TiMBuS++

[11:02] <moritz_> BUT WHERE DOES IT DISPATCH TO?

[11:02] <TiMBuS> Mu

[11:02] <TiMBuS> which has BUILD

[11:02] <tadzik> yeah. Actually, I was looking for something identical to Moose's BUILD

[11:02] <dalek> 6model: 8c5e6a6 | jonathan++ | dotnet/runtime/Rakudo.Net.sln:

[11:02] <dalek> 6model: Update to VS 2010.

[11:02] <dalek> 6model: review: https://github.com/jnthn/6model/commit/8c5e6a6585

[11:02] <dalek> 6model: 9bc822e | jonathan++ | dt-docs.txt:

[11:02] <dalek> 6model: Add ducktables docs.

[11:02] <dalek> 6model: review: https://github.com/jnthn/6model/commit/9bc822e8a6

[11:02] <dalek> 6model: 1e5ee77 | jonathan++ | dotnet/runtime/Metamodel/SharedTable.cs:

[11:02] <dalek> 6model: 32 bits should be enough for anyone.

[11:02] <dalek> 6model: review: https://github.com/jnthn/6model/commit/1e5ee77eb8

[11:02] <dalek> 6model: 26839e7 | jonathan++ | dotnet/runtime/Metamodel/SharedTable.cs:

[11:02] <dalek> 6model: Implement ducktables.

[11:02] <dalek> 6model: review: https://github.com/jnthn/6model/commit/26839e73ca

[11:02] <dalek> 6model: 5912064 | jonathan++ | java/compiler/Makefile:

[11:02] <dalek> 6model: Fix make test for Windows.

[11:02] <dalek> 6model: review: https://github.com/jnthn/6model/commit/591206487c

[11:02] <moritz_> that seems so wrong

[11:02] <tadzik> 32 bits should be enough for anyone. :)

[11:03] <jmm_> lol.

[11:03] <moritz_> (the BUILD redispatch, I mean)

[11:03] <tadzik> moritz_: build?

[11:03] <moritz_> tadzik: yes

[11:03] <TiMBuS> maybe rakudo does BUILD wrong? im not sure

[11:03] *** tzhs joined
[11:03] <TiMBuS> the spec is not solid enough

[11:03] <moritz_> agreed

[11:05] <TiMBuS> i thiiink BUILDALL is meant to call all the composed classes BUILDs? but in rakudo it doesnt, it needs to chain like javas super()

[11:06] <tadzik> yay, I can build the book

[11:06] <masak> if I change $*OUT.output-line-separator, what would C<say ""> print?

[11:06] * moritz_ has no idea, and is scared of the answer

[11:07] <masak> oh, S32/IO actually specs it.

[11:07] *** ashleydev joined
[11:07] <masak> &say is affected.

[11:07] <masak> S32/IO:1398

[11:08] <masak> in Rakudo, the "\n" is currently hard-coded in &say

[11:08] <masak> but there's no way to set $*OUT.output-line-separator, so it doesn't matter much.

[11:10] <tadzik> http://wklej.org/id/488979/ # Perlfect!

[11:11] <TiMBuS> masak, according to this thing here *points at parrots test dir* my class should work for ipv6

[11:11] <masak> tadzik: woot!

[11:11] <masak> TiMBuS: sorry, I feel a lack of context in what you just said...

[11:12] <tadzik> MAINmazing!

[11:12] <masak> SUBsetOPTIMAL! oh wait.

[11:12] <TiMBuS> masak, the IO::Socket::INET class i gisted before. it shoudl work with ipv6

[11:12] <TiMBuS> waaait a second

[11:12] <TiMBuS> that was moritz_ 

[11:12] <masak> ah.

[11:13] <moritz_> \o/

[11:13] <moritz_> TiMBuS: care to write it up as a patch and RT it? (or pull request)

[11:13] <TiMBuS> i have confused you by getting you both confused

[11:13] <moritz_> I'll go to lunch rather soonish, and I'd hate it if it got lost somewhere

[11:13] <TiMBuS> i guess i can do that

[11:16] <tadzik> if I have an $a = "foo", can I run sub foo like $a->() or somehow, w/o eval?

[11:17] <moritz_> tadzik: subroutine calling by name is NYI

[11:17] <moritz_> it should work as ::('&foo').() or so

[11:18] <masak> niecza: sub foo { say "OH HAI" }; foo; ::('&foo').()

[11:18] <tadzik> oh, it's too ugly to use anyway :)

[11:18] <p6eval> niecza v3-59-g8b27c3b: OUTPUT¬´Unhandled exception: JSON writer encountered value of type StringLiteral‚ê§  at /home/p6eval/niecza/boot/lib/JSYNC.pm6 line 0 (JSYNC to-json @ 0)‚ê§  at /home/p6eval/niecza/src/NAMOutput.pm6 line 15 (NAMOutput NAMOutput.run @ 5)‚ê§  at

[11:18] <p6eval> ../home/p6eval/niecza/src/NieczaBackendDotnet.pm6 line‚Ä¶

[11:18] <masak> tadzik: ugly both on the surface and inside :)

[11:18] <moritz_> tadzik: maybe a pir::findlex or so :-)

[11:18] <masak> eeeew!

[11:19] <tadzik> :P

[11:19] <moritz_> rakudo: sub foo { say "OH PIR" }; (Q:PIR { %r = find_lex '&foo' }).()

[11:19] <p6eval> rakudo 3680ac: OUTPUT¬´OH PIR‚ê§¬ª

[11:19] <masak> o.O

[11:19] <moritz_> yes, I have an ugly mind

[11:20] <masak> moritz_: I feel tempted to withdraw some karma from you right now... :P

[11:20] <moritz_> to my credit I have avoided an eval

[11:20] <masak> *lol*

[11:21] <moritz_> rakudo: sub foo { say "OH PIR" }; callframe.my<&foo>.()

[11:21] <p6eval> rakudo 3680ac: OUTPUT¬´OH PIR‚ê§¬ª

[11:21] <moritz_> better?

[11:21] <masak> lots.

[11:21] <moritz_> (though it has the disadvantage not to look in outer frames)

[11:22] <masak> maybe lexical lookup should be an exposed action in the language.

[11:22] <moritz_> it is

[11:23] <moritz_> through ::()

[11:23] <masak> right.

[11:23] <moritz_> and the MY psoeudopackage

[11:26] <masak> I just remembered, many years ago, someone (I think it was moritz_) karma-punished me for doing this on the channel:

[11:27] <masak> pugs: my $lang = "perl"; $lang++ for ^45565; say $lang

[11:27] <p6eval> pugs: OUTPUT¬´ruby‚ê§¬ª

[11:27] <masak> ;)

[11:27] <flussence> XD

[11:28] <masak> with a slightly lower value of 45565, you can get 'pyth' as well.

[11:28] <masak> quite a bit lower, actually.

[11:28] <tadzik> oh wtf is that? :D

[11:29] <masak> still a contentious topic, I see. :P

[11:30] <tadzik> oh, I see

[11:31] <masak> oh, you were wondering how it worked?

[11:31] <moritz_> http://irclog.perlgeek.de/perl6/2007-07-17#i_64556 earliest mention

[11:31] <tadzik> aye

[11:31] <tadzik> I underestimated then smartness of Str++ :)

[11:31] <masak> yep, there's the -- :)

[11:32] <masak> wow, that's 3.5 years ago.

[11:32] <tadzik> http://irclog.perlgeek.de/perl6/2007-07-17#i_64543 I think you mean here

[11:32] <masak> you see that it lead to some interesting feature discussion, too ;)

[11:32] <moritz_> masak: funny thing is, in 2009-11 you mentioned that as the first time you got negative karma on #perl6

[11:33] <moritz_> it seems to have had a lasting impression

[11:33] <tadzik> rakudo: my $lang = "perl"; $lang++ for ^6762; say $lang # I like this one too

[11:33] <p6eval> rakudo 3680ac: OUTPUT¬´porn‚ê§¬ª

[11:34] <masak> moritz_: hah. I wasn't aware I had mentioned it before. :)

[11:34] <masak> yes, it's definitely one of my early memories of the channel. I guess I take negative karma seriously. :)

[11:35] <flussence> hm, .comb is O(n¬≤) for input size... I thought that was fixed a while ago

[11:35] <tadzik> huh, I think there's something wrong about the book's build system

[11:35] <masak> flussence: that's... awful. :(

[11:35] <tadzik> http://wklej.org/id/488990/txt/

[11:36] <dalek> 6model: 215ffc3 | jonathan++ | java/compiler/ (2 files):

[11:36] <dalek> 6model: Add Jasmin JAR and license.

[11:36] <dalek> 6model: review: https://github.com/jnthn/6model/commit/215ffc35f7

[11:38] *** satyavvd left
[11:39] *** donri joined
[11:43] <tadzik> is INIT nyi?

[11:43] <masak> ...in...?

[11:43] <tadzik> in Rakudo, sorry

[11:43] <masak> nyi

[11:43] <tadzik> shame

[11:44] <donri> So I read 15 chapters of MoR yesterday

[11:44] <masak> :D

[11:49] <tadzik> :)

[11:50] <tadzik> rakudo: class A::B {}; class A {} # somebody please fix this :(

[11:50] <p6eval> rakudo 3680ac:  ( no output )

[11:50] <tadzik> ...oh?

[11:50] <masak> rakudo: class A::B {}; class A {}; say "alive"

[11:50] <p6eval> rakudo 3680ac: OUTPUT¬´alive‚ê§¬ª

[11:50] <masak> probably only bites you if you have .pm files

[11:51] <tadzik> yeah

[11:51] <tadzik> well, I guess I'll just temporarily rename Panda to Zebra :>

[11:51] <masak> and you can workaround it by doing class A { ... } before loading the .pm file with A::B in it.

[11:51] <tadzik> hmm

[11:53] <tadzik> I can put the uses in the class :)

[11:53] <masak> or that.

[11:53] <masak> "This class is use-ful."

[11:56] *** jferrero joined
[11:57] <tadzik> yay, I quite like the code Pies/Panda has become

[11:57] <tadzik> unusual for the module managers I write :)

[11:58] <tadzik> and panda takes only 4 seconds to start

[12:01] <dalek> 6model: 7a3e9da | jonathan++ | java/compiler/ (4 files):

[12:01] <dalek> 6model: A few little bits of infrastructure to get us started with making JASM, plus a stubbed out JST2JASM that'll need lots of filling out.

[12:01] <dalek> 6model: review: https://github.com/jnthn/6model/commit/7a3e9da289

[12:18] *** [Coke] left
[12:23] *** porter235 joined
[12:26] <mberends> tadzik++ # ≈öliwka Na≈Çƒôczowska from Czekoladowa Solidarno≈õƒá # I always thought Solidarity was a political party, now I know they make superb chocolates

[12:27] *** porter235 left
[12:27] <masak> ooh, imagine forming a political party based on the solidarity of chocolate!

[12:28] <masak> I think that might be a big success, if planned right.

[12:28] <mberends> no, it would come to a  sticky end

[12:28] <masak> :P

[12:33] *** ashleydev left
[12:33] *** tyatpi_ left
[12:33] *** fisted left
[12:33] *** xinming left
[12:33] *** PerlJam left
[12:34] *** rhr left
[12:34] *** Sarten-X left
[12:34] *** kst left
[12:34] *** Eevee left
[12:34] *** _ilbot left
[12:34] *** sjn left
[12:34] *** rokoteko left
[12:36] *** _ilbot joined
[12:36] *** PerlJam joined
[12:38] *** fisted joined
[12:39] *** ashleydev joined
[12:39] *** tyatpi_ joined
[12:39] *** xinming joined
[12:39] *** rhr joined
[12:39] *** Sarten-X joined
[12:39] *** kst joined
[12:39] *** Eevee joined
[12:39] *** sjn joined
[12:39] *** rokoteko joined
[12:40] *** cjk101010 left
[12:41] *** coldhead left
[12:54] *** f00li5h joined
[12:55] <dalek> nqp/ctmo: f5e0d27 | jonathan++ | / (4 files):

[12:55] <dalek> nqp/ctmo: Break NQP meta-objects out into a separate file. This means that it won't be needed to load full NQP grammar/actions/compiler just to run pre-compiled output. This should also mean that an NQP pre-compiled program with classes won't have to pre-load anything.

[12:55] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/f5e0d27ead

[12:55] <dalek> nqp/ctmo: c8f8081 | jonathan++ | / (7 files):

[12:55] <dalek> nqp/ctmo: Push break-out of the meta-objects into the bootstrap.

[12:55] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/c8f808157d

[13:14] *** drbean left
[13:16] *** drbean joined
[13:16] *** mtk left
[13:17] *** mtk joined
[13:25] *** jferrero left
[13:27] *** _twitch left
[13:31] *** agentzh left
[13:32] <tadzik> mberends, masak: that's actually a fun fact about these chocolates :) They advertise themselves (the company, not the chocolates) as the "existing for half a century" company, probably not to be mistaken with the political party :)

[13:33] <tadzik> I'm glad you like them, and I'm a bit jelly too :>

[13:33] <masak> we're all a bit jelly :P

[13:34] <tadzik> ;)

[13:34] <tadzik> I have a feeling that English is a pun-oriented language

[13:34] <masak> well, you know. optimize for pun.

[13:34] <tadzik> . o O ( puns in Perl: my char $mander; )

[13:36] *** orafu left
[13:37] *** orafu joined
[13:40] <donri> say .WHAT

[13:40] <flussence> Moo

[13:41] <tadzik> rakudo: given "what" { .say; .WHAT }

[13:41] <p6eval> rakudo 3680ac: OUTPUT¬´what‚ê§¬ª

[13:43] <flussence> rakudo: WHAT <you>.say ?????!!!!!

[13:43] <p6eval> rakudo 3680ac: OUTPUT¬´you‚ê§Stub code executed  in <anon> at line 22:/tmp/WgFRrZbZMV‚ê§Null PMC access in type()‚ê§  in 'WHAT' at line 786:CORE.setting‚ê§  in main program body at line 22:/tmp/WgFRrZbZMV‚ê§¬ª

[13:43] <donri> rakudo: given class FourtyTwo {}.new { say .WHAT }

[13:43] <p6eval> rakudo 3680ac: OUTPUT¬´===SORRY!===‚ê§Missing block at line 22, near ".new { say"‚ê§¬ª

[13:44] <donri> rakudo: given class FourtyTwo {}.new: { say .WHAT }

[13:44] <p6eval> rakudo 3680ac: OUTPUT¬´===SORRY!===‚ê§Missing block at line 22, near ".new: { sa"‚ê§¬ª

[13:44] <donri> rakudo: given class FourtyTwo {}.new() { say .WHAT }

[13:44] <p6eval> rakudo 3680ac: OUTPUT¬´===SORRY!===‚ê§Missing block at line 22, near ".new() { s"‚ê§¬ª

[13:44] <donri> rakudo: given (class FourtyTwo {}).new() { say .WHAT }

[13:44] <p6eval> rakudo 3680ac: OUTPUT¬´too few positional arguments: 1 passed, 2 (or more) expected‚ê§  in main program body at line 1‚ê§¬ª

[13:44] <tadzik> *.WHAT

[13:44] <tadzik> or not

[13:45] *** frettled joined
[13:47] *** edenc joined
[13:47] <donri> rakudo: say .WHAT given "answer" but { method WHAT { 42 } }

[13:47] <p6eval> rakudo 3680ac: OUTPUT¬´Useless declaration of has-scoped Method in a module; add our or my to install it in the lexpad or namespace‚ê§()‚ê§¬ª

[13:48] <donri> rakudo: say .WHAT given "answer" but method WHAT { 42 }

[13:48] <p6eval> rakudo 3680ac: OUTPUT¬´Useless declaration of has-scoped Method in a module; add our or my to install it in the lexpad or namespace‚ê§()‚ê§¬ª

[13:48] <donri> i forgot, hows that work

[13:48] <moritz_> say .WHAT given "answer" but role { method WHAT { 42 } }

[13:48] <moritz_> rakudo: say .WHAT given "answer" but role { method WHAT { 42 } }

[13:48] <p6eval> rakudo 3680ac: OUTPUT¬´42‚ê§¬ª

[13:48] <donri> :D

[13:50] <dalek> nqp/ctmo: 01e36d5 | jonathan++ | / (4 files):

[13:50] <dalek> nqp/ctmo: Start moving NQPMu and the native types into the setting. Need to do a temporary rename to avoid conflicts with the version in the pre-move compiler.

[13:50] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/01e36d5733

[13:50] <dalek> nqp/ctmo: 0af1138 | jonathan++ | src/stage0/ (7 files):

[13:50] <dalek> nqp/ctmo: Update the bootstrap to excise the old NQPMu that was in with the meta-objects file.

[13:50] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/0af113877f

[13:50] <dalek> nqp/ctmo: 99d0cef | jonathan++ | src/ (2 files):

[13:50] <dalek> nqp/ctmo: Revert the temporary renaming done while moving NQPMu.

[13:50] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/99d0cef789

[13:50] <dalek> nqp/ctmo: decd296 | jonathan++ | src/stage0/ (6 files):

[13:50] <dalek> nqp/ctmo: Update bootstrap again to eliminate rename hack while moving NQPMu. This means it's now in the setting where it belongs, rather than part of the meta-objects library. It also means that no meta-object is used in the same compilation unit as it is defined, which unblocks various other things.

[13:50] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/decd296408

[13:52] *** kaare_ left
[13:54] <jmm_> what do you guys use in vim for perl6 ? for like syntax highligh or code completion .

[13:54] <Su-Shee> the perl6 syntax file.

[13:54] <donri> .g perl6.vim

[13:54] <phenny> donri: http://m19s28.dyndns.org/iblech/stuff/pugs-util/perl6.vim

[13:54] <donri> .g perl6.vim github

[13:54] <phenny> donri: https://github.com/petdance/vim-perl/pull/41

[13:55] <Su-Shee> that one it is. 

[13:55] <jmm_> woot :)

[13:55] <jmm_> do you have code completion too ?

[13:55] <Su-Shee> err.. no. ;)

[13:55] <Su-Shee> unless it works with ctrl-p anyways. try it.

[13:56] *** frodwith joined
[13:56] *** i221077 joined
[13:56] <flussence> doesn't work with hyphenated identifiers though

[13:56] *** nymacro left
[13:56] <jmm_> allright !

[13:57] <donri> set isi+=-

[13:57] <moritz_> I think literal++ commented that it's not that easy

[13:58] <donri> isk+=- too? :)

[13:58] *** slavik1 joined
[13:59] <moritz_> dunno

[13:59] <moritz_> just try it

[13:59] <flussence> wfm

[14:05] <jmm_> umm color highlight works fine, but completion just for keywords.

[14:06] <tadzik> dois this isi/isk fix the fancy-identifiers?

[14:06] <tadzik> oh, I'm suprised there's a completion for keywords :P

[14:07] <jmm_> I don't understand what you said :\

[14:07] <jmm_> it would be nice to have completion on object's method.

[14:07] <donri> that's impossible to get perfect with dynamic languages without executing the code

[14:08] <jmm_> too  bad :\

[14:09] <jmm_> I've seen completion in netbeans editor( for java ) , it was really nice.

[14:09] *** amkrankruleuen joined
[14:09] <donri> yes, java is not as dynamic :)

[14:09] <donri> you can do some omnicompletion for dynamic languages, but as i said you can't expect it to work perfectly in all situations

[14:11] <i221077> Perl6 is more static then other dynamic languages so it should allow decent completion

[14:11] <donri> oh?

[14:11] <moritz_> i221077: that's a bold overgeneralization

[14:11] *** i221077 is now known as pmurias

[14:11] <moritz_> i221077: Perl 6 allows type annotations, but doesn't force you to write any

[14:12] <donri> even if there's truth to that it'd still be rather complicated to do without execution

[14:12] <moritz_> (gradual typing)

[14:12] <donri> moritz_: it's not really just about static types though

[14:12] <pmurias> moritz_: but a lot of stuff is lexical, so it's easier to infer things

[14:12] <donri> e.g. you can do monkey patching

[14:12] <moritz_> so it only helps you if actually use these types

[14:12] <donri> you can do lexically scoped imports etc etc ad nausium :D

[14:13] <moritz_> pmurias: at compile time, yes; with pure syntactic analysis, not so easily

[14:13] <flussence> std is pretty good at that though

[14:13] <moritz_> at providing lists of available methods? that's new to me

[14:13] *** tyatpi_ left
[14:13] <donri> perl6.vim is already said to be mad slow for larger files

[14:14] <tadzik> it'll aye

[14:14] <flussence> it's clever enough to figure out when a thing has been declared and when it hasn't...

[14:14] <flussence> std: sub xyz { }; xyz

[14:14] <p6eval> std 4608239: OUTPUT¬´ok 00:01 118m‚ê§¬ª

[14:14] <flussence> std: sub xyqqqqqqz { }; xyz

[14:14] <p6eval> std 4608239: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared routine:‚ê§ 'xyz' used at line 1‚ê§Check failed‚ê§FAILED 00:01 118m‚ê§¬ª

[14:14] <donri> hm though i wonder if you could hook a proper non-vimscript parser to a vim ftype

[14:14] <flussence> it must store a list of seen methods *somewhere*...

[14:15] <pmurias> moritz_: why are we limited to pure syntactic analysis?

[14:15] <donri> std: eval("sub xyz {}"); xyz

[14:15] <p6eval> std 4608239: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared routine:‚ê§ 'xyz' used at line 1‚ê§Check failed‚ê§FAILED 00:01 119m‚ê§¬ª

[14:15] *** tyatpi_ joined
[14:16] <moritz_> pmurias: because you don't want to write a full compiler in vimscript :-)

[14:16] <donri> in the end eval can always mess anything up :P

[14:16] <moritz_> no

[14:16] <moritz_> for example eval can't install new lexicals

[14:16] <donri> when I said dynamic languages are difficult to analyze from just syntax, i probably meant meta programming

[14:16] <pmurias> moritz_: i don't want to write anything in vimscript

[14:17] <donri> moritz_: ok so bad example but i bet you can do eval-like meta programming

[14:17] *** plobsing left
[14:17] <flussence> .oO( vimscript needs a decent framework like html has, so people don't have to write it manually )

[14:17] <moritz_> pmurias: vim autocompletion was our current topic. If you don't talk about the current topic, please let me know so that I can context-switch

[14:17] <donri> .^add_method(<foo bar>.join("-"), ...)

[14:17] <donri> try get a completer to understand that

[14:18] <tadzik> imperlsibble :)

[14:18] <donri> :D

[14:18] <donri> worse, whether that code even runs might depend on conditionals etc etc

[14:18] <pmurias> moritz_: can't vim call external processes?

[14:19] <moritz_> pmurias: it can; but then you'd have to reparse the code for every autocompletion

[14:19] <flussence> the traditional way of doing it is to make ctags do all the parsing work and vim just reads the keyword list that outputs

[14:20] <donri> yea, that works fine for statically defined terms

[14:20] <donri> which is usually good enough

[14:21] <donri> i wish perl6 had introspectable comments, like python docstrings

[14:22] <donri> i suppose you can do it with roles, not as sugary syntactically though

[14:22] <flussence> Perl 6 does, it's just that `perl6` doesn't

[14:22] <donri> oh? :P

[14:22] <flussence> #= syntax

[14:22] <donri> oh, i thought that was just a pge thing

[14:23] <donri> is that supposed to, eventually, work for say, class definitions?

[14:23] <moritz_> donri: S26 elaborates on that

[14:24] *** porter235 joined
[14:24] <donri> thanks

[14:24] * moritz_ bemoans the lack of new MoR chapters

[14:25] <donri> I read 15 chapters yesterday :)

[14:26] <donri> haha, POD and Pod not the same thing

[14:27] <donri> i suppose it's like how 'regex' in perl6 ‚â† 'regular expressions'

[14:27] <moritz_> POD = the Perl 5 thing

[14:27] <moritz_> Pod = the Perl 6 thing

[14:27] <donri> yea, reading s26

[14:31] <tadzik> perl's odd documentation

[14:31] <flussence> is there a Pod grammar yet?

[14:32] *** porter235 left
[14:34] *** woosley1 left
[14:35] *** tyatpi_ left
[14:36] <pmurias> moritz_: i don't want to write anything in vimscripttadzik> perl's odd documentation

[14:36] <pmurias> 15:31 < flussence> is there a Pod grammar yet?

[14:36] <pmurias> sorry

[14:36] <pmurias> 15:32 -!- porter235 [~porter235@CPE001a704e2936-CM001ac315290c.cpe.net.cable.rogers.com] has quit [Ping timeout: 246 seconds]

[14:36] <pmurias> moritz_: what's MoR?

[14:37] <masak> pmurias: "Methods of Rationality"

[14:37] <masak> phenny: google "Methods of Rationality"

[14:37] <masak> !google "Methods of Rationality"

[14:37] <masak> .google "Methods of Rationality"

[14:37] <masak> oh well. worth a shot :)

[14:37] <moritz_> .g "Methods of Rationality"

[14:37] <phenny> moritz_: http://www.fanfiction.net/s/5782108/1/Harry_Potter_and_the_Methods_of_Rationality

[14:38] <masak> \o/

[14:50] *** risou joined
[14:55] <masak> people!

[14:55] <masak> http://strangelyconsistent.org/blog/p5-find-the-longest-common-substring

[14:56] <moritz_> finally!

[14:56] <masak> sorry about the delay :)

[15:01] <moritz_> I can't understand why matthias' solution is so fast

[15:02] *** drbean left
[15:02] <moritz_> it uses lots of idioms that are slow in rakudo

[15:02] <moritz_> like gather/take

[15:02] *** drbean joined
[15:02] <moritz_> and [~], which is much slower than join ''

[15:03] <moritz_> I can't imagine that iteration over the Z result being fast either

[15:03] <moritz_> oh.

[15:03] <moritz_> masak: I think the 'next unless %offsetB.exists: $chr;

[15:03] <moritz_> very much optimizes for the case of no common substring

[15:03] <masak> we have some theories here.

[15:04] <masak> or, well, jnthn++ does.

[15:04] <moritz_> (which to me seems rather artifically constructed for long strings)

[15:04] <moritz_> do tell

[15:04] <masak> for loops don't have a sink mode right now.

[15:04] <moritz_> one thing it does well: few scopes

[15:04] <moritz_> ie statement modifiers instead of statement + block

[15:05] <masak> so while fox's solution with X is cool, it's definitely a killer when it comes to generating garbage for the GC.

[15:05] <masak> I think everyone would have been much better off using while loops.

[15:06] *** shi left
[15:06] <jnthn> For speed, not for code clensliness though.

[15:06] <moritz_> sure

[15:06] <jnthn> But yes, the lack of proper sink is a killer for long for loops.

[15:07] <jnthn> I only discovered that issue this weekend.

[15:07] <moritz_> but how does that make that one fast?

[15:07] <moritz_> it uses two for-loops

[15:09] <masak> but the inner one is seldom run, as you say.

[15:09] <masak> and when it is, it's often lots shorter.

[15:10] <masak> if anyone feels like taking an alternative shot at doing statistics and then blogging about it, please feel free.

[15:11] <masak> just be aware that it takes a long time, both the gathering of data, and the presentation.

[15:11] <jnthn> Any further analysis that identifies what particular constructs are slow is, of course, intresting.

[15:12] <pyrimidine> takadonet: pong

[15:12] <masak> moritz_: your point about the 'next' line optimizing for the case of no common substring probably helps explain why the variance of matthias's solution is slightly larger than the rest. there's a difference between the Y and N runs.

[15:12] <masak> reading the data is numbers bears that out.

[15:13] * moritz_ can see that masak is going to have a difficult time announcing the winner

[15:13] <masak> I'm glad we agree on that.

[15:13] <moritz_> everybody botched at least one submission, iirc

[15:13] <moritz_> colomon++ had exponential time in his first solution

[15:13] <masak> yes, but I had designed for that.

[15:13] <masak> I have a strategy which I hope will work.

[15:13] <moritz_> fox++ relied on all() in p3

[15:14] <moritz_> my p4 was quite bad, and I had a nasty error in p5 

[15:14] <moritz_> matthias didn't have a p4 submission at all

[15:14] <moritz_> and Util++'s doesn't quite count either

[15:14] <masak> right. matthias is completely out, and Util mostly so.

[15:15] <moritz_> ah, Util++ also made the same mistake in p3

[15:15] * moritz_ doesn't know if correctness is an ultimate killer in evaluation

[15:15] <moritz_> (oh, and fox' p1 submission was also not quite correct)

[15:16] <masak> correctness weighs fairly heavily, but is not all-or-nothing, I think.

[15:16] <colomon> o/

[15:16] <masak> colomon: \o

[15:16] *** cjk101010 joined
[15:17] * moritz_ should make some correctness/readability/clarity heat maps

[15:17] <moritz_> oh wait, that's masak's task :-)

[15:17] <masak> :)

[15:17] <masak> I just might.

[15:18] <sorear> good * #perl6

[15:18] <masak> sorear: \o

[15:20] <jnthn> o/ sorear 

[15:22] *** risou_ joined
[15:23] *** risou left
[15:27] *** tyatpi_ joined
[15:36] *** jaldhar left
[15:36] *** jaldhar joined
[15:37] *** justatheory joined
[15:41] <colomon> So, I'm looking for suggestions on how to improve the benchmark graphs.  sorear++ suggested having the same vertical scale and/or a logarithmatic vertical scale.

[15:42] <colomon> Having the same for all of them is actually impractical, because some take minutes and some take seconds.

[15:42] <colomon> Should all the graphs go down to 0, though?  That would help make the scaling clearer, I think.

[15:42] <sorear> I was thinking having all of them as % improvement relative to $FIXED_TIME

[15:42] <sorear> so if there were no Rakudo changes, all the graphs would be horizontal lines at 1

[15:43] <colomon> oooo, that's an interesting idea I hadn't considered.

[15:43] *** plobsing joined
[15:43] <PerlJam> sorear++  But what should be the start time?

[15:44] <sorear> PerlJam: perhaps "the first release of R*"

[15:44] <PerlJam> Hmm.  I was thinking the "birth" of rakudo-ng

[15:44] <PerlJam> but first release of R* has a better psychological appeal I guess

[15:46] <colomon> The first release of R* was July, right?  So that's just the time for the first run in the benchmarks.

[15:46] <PerlJam> aye

[15:47] <colomon> The only potential long-term problem with that idea is that in the future, some benchmarks may not work on earlier versions of Rakudo.

[15:47] <colomon> but we could solve that by making the baseline for that benchmark the first one it does work on.

[15:52] *** orafu left
[15:52] *** orafu joined
[15:52] *** donri left
[15:55] *** jaldhar left
[15:56] *** jaldhar joined
[15:57] *** nadim joined
[16:11] <moritz_> rakudo: say rx/a/.WHAT

[16:11] <p6eval> rakudo 3680ac: OUTPUT¬´Regex()‚ê§¬ª

[16:11] <moritz_> where is class Regex defined?

[16:11] <moritz_> ah, in src/builtins/Regex.pir

[16:12] <moritz_> nqp: say((/foo/).WHAT)

[16:12] <p6eval> nqp: OUTPUT¬´"load_bytecode" couldn't find file 'NQPCORE.setting.pbc'‚ê§current instr.: 'nqp;NQP;Compiler;_block35' pc 128323 (gen/nqp-grammar.pir:6209)‚ê§¬ª

[16:13] <jnthn> hm :S

[16:13] <moritz_> recompiling now

[16:14] <moritz_> locally I get 

[16:14] <jnthn> ah, ok, it's not latest. :)

[16:14] <moritz_> Can only use get_what on a RakudoObject

[16:14] <jnthn> That makes some sense.

[16:14] <moritz_> $ ./nqp -e 'say(pir::typeof(/foo/))'

[16:14] <moritz_> Regex;Regex

[16:14] <jnthn> Regex::Regex isn't 6model-ized yet.

[16:14] <moritz_> os that the Regex HLL, class Regex?

[16:14] <moritz_> s/os/is/

[16:14] <jnthn> No, just Regex namespace, class Regex

[16:15] <jnthn> It probably can be shuffld over to 6model

[16:15] * moritz_ has bad experiences with 6model-izing stuff :/

[16:15] <jnthn> Match got quite some way.

[16:15] <moritz_> rakudo: say Regex::Regex

[16:15] <jnthn> I'll pick that up again in a bit.

[16:15] <p6eval> rakudo 3680ac: OUTPUT¬´Can not find sub Regex::Regex‚ê§  in main program body at line 1‚ê§¬ª

[16:15] <moritz_> rakudo's Regex inherits from Method, not from Regex::Regex

[16:15] * moritz_ confused

[16:16] <moritz_> nqp: say("alive")

[16:16] <p6eval> nqp: OUTPUT¬´alive‚ê§¬ª

[16:17] *** Patterner left
[16:18] <jnthn> moritz_: that makes sense

[16:18] <jnthn> Regex::Regex is just a wrapper around a Parrot sub

[16:18] <moritz_> ok

[16:19] *** Psyche^ joined
[16:19] *** Psyche^ is now known as Patterner

[16:21] *** risou joined
[16:24] *** risou_ left
[16:24] <dalek> nqp/ctmo: 5b5b706 | jonathan++ | src/ops/nqp.ops:

[16:24] <dalek> nqp/ctmo: Add ops for setting/getting serialization context for an object.

[16:24] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/5b5b7064d5

[16:24] <dalek> nqp/ctmo: c35442c | jonathan++ | src/NQP/Grammar.pm:

[16:24] <dalek> nqp/ctmo: Pass repr along to pkg_create_mo correctly.

[16:24] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/c35442c255

[16:24] <dalek> nqp/ctmo: 00ec5f3 | jonathan++ | src/ (2 files):

[16:24] <dalek> nqp/ctmo: Do initial meta-object instantiation via the serialization context builder.

[16:24] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/00ec5f3b62

[16:25] *** JimmyZ joined
[16:28] *** porter235 joined
[16:32] *** hercynium joined
[16:33] *** porter235 left
[16:35] *** KyleHa joined
[16:36] <KyleHa> Is there a masak in the house?

[16:36] * takadonet pokes masak

[16:37] <dalek> nqp/ctmo: a3d104e | jonathan++ | src/ (2 files):

[16:37] <dalek> nqp/ctmo: Twiddle to make roles work again. Kinda defers a tricky problem for later, mind...

[16:37] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/a3d104e84d

[16:37] <jnthn> I'm in a house with a masak

[16:37] * masak comes alive

[16:37] <masak> KyleHa: oh hai

[16:38] <KyleHa> masak! Thank you for answering my call!

[16:38] <masak> no problemo.

[16:38] <masak> how may I serve you?

[16:38] <KyleHa> I just read your write-up of the p5 longest common string problem.

[16:38] *** Trashlord joined
[16:38] <KyleHa> I wanted to know how you made that awesome box plot of the result data.

[16:39] <masak> ah :)

[16:39] <masak> I used a program called Gnumeric.

[16:39] <KyleHa> I think I've heard of Gnumeric.

[16:39] <masak> I saved the graph I made to SVG, then I exported the SVG to PNG using Inkscape.

[16:39] <masak> not sure the last step was needed.

[16:40] <masak> it was moritz_++' suggestion to make a box plot.

[16:40] <KyleHa> I've been a big fan of box plots for years, but I don't often see software that makes them.

[16:41] <KyleHa> I wanted one last week, but I didn't want to write the code for it like last time.

[16:41] <KyleHa> Thank you thank you masak.

[16:42] <PerlJam> for some reason I missed the write of on p5

[16:42] <masak> it's relatively recent.

[16:42] <PerlJam> matthias++  :-)

[16:42] <masak> KyleHa: glad to help :)

[16:43] *** KyleHa left
[16:48] *** JimmyZ left
[16:49] *** spq joined
[16:52] <masak> TimToady: S03:957 -- "sufficiently large to contain all non-zero integer results (which for XOR is at most the size of the longer of the two buffers)" -- is this implying that all zeroes in the result are stripped away?

[16:54] <dalek> nqp/ctmo: 7896584 | jonathan++ | src/stage0/ (6 files):

[16:54] <dalek> nqp/ctmo: Update the bootstrap; all this works (phew!)

[16:54] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/78965848aa

[16:55] <PerlJam> masak: I would think that passage really wants to mean that only prefix zeroes are stripped.

[16:56] <TimToady> masak: it's trying to say that trailing 0's may be stripped

[16:57] <dakkar> "trailing"? do you read numbers lsb-first? :)

[16:57] <TimToady> the position of the bits is important, so leading 0's cannot be stripped

[16:57] <dakkar> which means that I have no idea what I'm commenting on‚Ä¶

[16:57] <PerlJam> languages suck  :)

[16:57] * dakkar goes back to the cave

[16:58] <PerlJam> just make sure you get your RTL or LTR correct and strip the appropriate zeroes  :)

[16:58] <dakkar> ooh, buffer bitwise and, not number bitwise and

[16:58] <dakkar> now it makes sense

[16:59] *** shi joined
[17:06] *** tzhs left
[17:16] *** risou left
[17:23] *** wood|EyE joined
[17:26] <flussence> (bah. vim's insistence on double-spacing sentences with `gq` is annoying.)

[17:26] <TimToady> rakudo: class A {}; sub MAIN { say "ok" }

[17:26] <p6eval> rakudo 3680ac: OUTPUT¬´ok‚ê§¬ª

[17:26] <TimToady> rakudo: class A; sub MAIN { say "ok" }

[17:26] <p6eval> rakudo 3680ac:  ( no output )

[17:27] <TimToady> that's a bug

[17:27] <TimToady> flussence: not annoying to those of us who prefer double-spacing :)

[17:29] * flussence blames html for making me prefer this way

[17:31] <masak> it's in RT.

[17:31] <TimToady> 'k

[17:32] <TimToady> wanted to write an entry for http://rosettacode.org/wiki/Scripted_Main using the buggy form...

[17:32] *** donri joined
[17:33] *** pmurias left
[17:35] <shortcircuit> Scripted_Main is going through a lot of churn right now, just trying to define what it's supposed to do.

[17:36] <shortcircuit> Really, really, really busy at work right now, can't talk about it this second.

[17:36] <TimToady> whatever it is, Perl 6 does it

[17:37] *** cdarroch joined
[17:37] *** cdarroch left
[17:37] *** cdarroch joined
[17:37] *** ymasory joined
[17:37] <daxim> http://en.wikipedia.org/wiki/Rule_110

[17:39] <masak> rakudo: say [min] 3, 6;

[17:39] <mberends> rakudo: say min(3,6)

[17:39] *** Woody_ joined
[17:39] <p6eval> rakudo 3680ac: OUTPUT¬´3‚ê§¬ª

[17:39] <p6eval> rakudo 3680ac: OUTPUT¬´Unable to handle non-closure Ordering yet‚ê§  in 'Any::min' at line 1561:CORE.setting‚ê§  in 'min' at line 1871:CORE.setting‚ê§  in main program body at line 22:/tmp/Ptp4HPx3zJ‚ê§¬ª

[17:39] *** wood|EyE left
[17:39] <masak> can I pls kill the &min function?

[17:39] <masak> rakudo: say (3,6).min

[17:39] <p6eval> rakudo 3680ac: OUTPUT¬´3‚ê§¬ª

[17:40] <masak> alternatively, mberends is suggesting killing the first parameter of the &min function.

[17:40] <masak> actually, I'm not even going to ask permission. it's wrong.

[17:40] * moritz_ thinks we've had that discussion before.

[17:41] <masak> our multi min( *@values, Ordering :$by )

[17:41] <masak> how come we're running up against this problem in the first place?

[17:41] <masak> 3, 6 should end up in @values, no?

[17:41] * masak dives into Rakudo source

[17:41] <TimToady> http://rosettacode.org/wiki/Scripted_Main#Perl_6

[17:42] <daxim> LUE means what?

[17:42] <TimToady> lue: what does LUE mean?  :)

[17:42] * daxim is enlightened

[17:42] <masak> oh!

[17:43] <masak> proto sub min($by, *@values) { @values.min($by); }

[17:43] * masak submits rakudobug

[17:43] <masak> Rakudo is not to spec, that's all.

[17:44] * TimToady wonders why it's "by"...

[17:44] <TimToady> oh, "by ordering" I guess

[17:45] <dakkar> ¬´@strings.min :by(*.length)¬ª or however it's written?

[17:45] <TimToady> std: *.length

[17:45] <p6eval> std 4608239: OUTPUT¬´ok 00:01 118m‚ê§¬ª

[17:46] <TimToady> hmm

[17:46] <TimToady> should be *.chars or some such

[17:48] *** gdey_ left
[17:49] <masak> someone, I forget who, once sent to p6l a long list of suggestions for improved parameter names in the setting.

[17:49] <masak> no action was ever taken on it.

[17:49] <masak> it would be heroic and very much appreciated for someone to make that a personal project.

[17:50] <PerlJam> was a ticket created on it?

[17:50] *** _buno_ joined
[17:50] <masak> no.

[17:50] <masak> :(

[17:50] <masak> if I find the email, I'll do that.

[17:51] <TimToady> as long as "improved" doesn't just mean COBOLized...

[17:51] *** GinoMan joined
[17:51] <masak> ISTR they were mostly, or at least partly, very sane suggestions.

[17:52] <masak> the main point is that even the names of positional parameters matter a lot now that you can refer to them by name.

[17:52] <masak> it wouldn't surprise me if the sender of that email had a Smalltalk background.

[17:52] <masak> :)

[17:52] <TimToady> sure, but there's something to be said for expecting infix operands to be named $x and $y

[17:53] <masak> aye.

[17:53] <PerlJam> you don't like $addend1 and $addend2 ?  ;)

[17:53] <TimToady> .oO(subtrahend...)

[17:53] <masak> I'd have guessed $lhs and $rhs.

[17:54] <tadzik> jnthn: http://wklej.org/id/489187/ could you apply this to nqp? Fixes build under GNU make

[17:54] <TimToady> what if you're programming in Hebrew or Arabic?

[17:54] <TimToady> then left and right are reversed

[17:54] <moritz_> hugme: add tadzik to nqp

[17:54] <hugme> moritz_: sorry, I don't know anything about project 'nqp'

[17:54] <TimToady> never mind that lhs and rhs are rather Anglo-centric

[17:54] <jnthn> tadzik: I thought moritz_++ already did that.

[17:55] <TimToady> and what about people who don't have hands?

[17:55] <moritz_> jnthn: probably not in all branches

[17:55] <tadzik> jnthn: http://wklej.org/id/489188/ also, this for ctmo branch

[17:55] *** Hackbinary joined
[17:55] <jnthn> tadzik: Gotta pack for airport now, and can't seem to be able to give out commit bits on nqp

[17:56] <tadzik> jnthn: no worries

[17:56] <PerlJam> tadzik: moving two lines that are commented out fixes bugs?

[17:56] <jnthn> Will apply when I get back, if nobody beats me to it.

[17:56] <tadzik> PerlJam: yes

[17:56] <moritz_> jnthn: how liberal should nqp commit policy be? as mu? or as nqp-rx?

[17:56] <jnthn> (gnu make)--

[17:56] <PerlJam> wow.

[17:56] <tadzik> gmake doesn't like it if one of the multi-line lines is a comment

[17:56] <jnthn> moritz_: Think pmichaud_ said it should be quite liberal.

[17:56] <tadzik> for then it doesn't really end with \

[17:56] <jnthn> moritz_: nqp-rx is more liberal than Rakudo, fwiw.

[17:57] <moritz_> I know

[17:57] <jnthn> We could go for nqp-rx level

[17:57] * jnthn packs for airport

[17:57] <moritz_> tadzik: you should have commit access.

[17:57] <tadzik> moritz_: thanks; does ctmo build for you?

[17:58] <moritz_> tadzik: dunno, master seems to work

[17:58] <tadzik> oh, so I'm obliged to ocassionally fix stuff now :)

[17:58] <moritz_> I didn't change anything, you already had it

[17:58] <moritz_> nqp-rx and nqp share the same team on github

[17:58] <tadzik> yeah, I now noticed I have the ssh url in .git/config

[17:59] <moritz_> tadzik: oh, I have an uncommitted fix for ctmo in my repo

[17:59] <moritz_> which I forgot to push, moritz_--

[17:59] <dalek> nqp/ctmo: 1f3568a | moritz++ | build/Makefile.in:

[17:59] <dalek> nqp/ctmo: make GNU make happy again

[17:59] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/1f3568a10d

[17:59] *** dakkar left
[18:00] <tadzik> oh, seems that master is fixed

[18:00] <tadzik> ah, there we go :) I had 37 unpulled commits, seems I was not on master at the beginning

[18:00] <tadzik> I _really_ need that git branch name in zsh prompt

[18:01] <tadzik> oh, I get errors anyway

[18:01] <tadzik> maybe that's something I can fix :>

[18:02] *** PacoLinux_ joined
[18:02] <PerlJam> tadzik: putting the git info as part of the prompt has been a tremendous help to me.

[18:02] <tadzik> moritz_: http://wklej.org/id/489197/ don't you get something similar?

[18:03] *** _buno_ left
[18:04] <masak> just for everyone's information, colomon has presented statistics which show that my statistics in the p5 blog post are quite one-sided.

[18:04] <masak> it now again looks as if colomon's is the faster algorithm, just not for the kind of data I chose.

[18:04] <PerlJam> masak: sure they are ... they're all from the masak side of the universe :)

[18:05] <PerlJam> what changed?

[18:05] <masak> new data, that's all.

[18:05] <masak> I'll let colomon blog his findings.

[18:05] * masak --> plane

[18:05] <TimToady> o/

[18:06] *** masak left
[18:06] <PerlJam> blah!  He was too quick for me to tell him to have a safe flight 

[18:06] * jnthn --> flight too :)

[18:06] <TimToady> o/

[18:06] <PerlJam> masak: have a safe and enjoyable flight!

[18:06] <PerlJam> jnthn: have a safe and enjoyable flight!

[18:06] <PerlJam> :)

[18:06] <jnthn> Thanks!

[18:06] <jnthn> o/

[18:07] * TimToady --> shower

[18:07] <tadzik> fly safe!

[18:08] <TimToady> .oO(flying in the shower doesn't sound safe...)

[18:09] <tadzik> oh, everyone can be safe in a shower w/o flying, hence my wishes

[18:09] <colomon> I would like to clarify that I have no general proof my p5 solution is faster.  I just found a different set of test data where mine is faster than matthias's.  I haven't timed any of the others yet, and I have a potential optimization for matthias's that may get it back in the running again, too.

[18:10] <PerlJam> colomon: yeah, even reading masak's description of his test data it seemed very ... simple

[18:10] <colomon> PerlJam: The thing is that in masak's sample data, the only characters that overlap between the two strings are the ones in the section that matches.

[18:10] <PerlJam> aye

[18:10] <colomon> So for most of the test, the inner loop is quickly skipped.

[18:11] <PerlJam> he didn't adequately test the "many failures" or "many successes"

[18:11] <colomon> I just fed it some normal English text instead, and suddenly it performs like you'd expect code that has a gather in an inner loop -- slow.

[18:13] <colomon> The gather doesn't actually have to be in the inner loop, so I'm going to try removing it and see how that helps things.

[18:14] *** jedai left
[18:14] <colomon> ooo, #phasers in 46?

[18:16] <colomon> or is everyone else either in the air or in the shower?

[18:17] <Util> Yes, #phasers in ... 44 now

[18:17] <PerlJam> I'm hovering about .3 meters off of the floor right now

[18:17] *** jedai joined
[18:18] <PerlJam> (of course, I'm in a chair, so I don't know if you'd call that "in the air" :)

[18:19] *** MayDaniel joined
[18:21] *** Mowah left
[18:21] <dalek> star: 00d0d01 | Util++ | build/binary/darwin_dmg/ (6 files):

[18:21] <dalek> star: Add code to build a binary .dmg package for OS X.

[18:21] <dalek> star: review: https://github.com/rakudo/star/commit/00d0d015c9

[18:29] *** porter235 joined
[18:32] *** TiMBuS joined
[18:34] *** porter235 left
[18:49] *** daxim left
[18:53] <dalek> star: fd840ed | Util++ | build/binary/darwin_dmg/package_darwin_dmg.pl:

[18:53] <dalek> star: Remove stray line of invalid code

[18:53] <dalek> star: review: https://github.com/rakudo/star/commit/fd840ede08

[19:05] *** kaare_ joined
[19:09] *** Vlavv_ left
[19:11] *** shi left
[19:13] *** gdey_ joined
[19:15] *** Vlavv joined
[19:23] *** prammer joined
[19:26] *** Vlavv left
[19:27] *** Vlavv joined
[19:47] *** shi joined
[19:58] *** lichtkind joined
[19:58] <lichtkind> moritz_: friday 6pm is allright?

[20:00] <sjohnson> perlpals

[20:05] <lichtkind> hai sjohnson 

[20:05] <sjohnson> hi

[20:06] <lichtkind> sjohnson: may i ask whats your selchoosen task?

[20:06] <dalek> star: 936462e | Util++ | build/binary/darwin_dmg/package_darwin_dmg.pl:

[20:06] <dalek> star: Add Camelia icon to the packaged contents

[20:06] <dalek> star: review: https://github.com/rakudo/star/commit/936462ea49

[20:09] <sjohnson> what's a selchoosen task?

[20:09] <wallberg> hi all! I wanted to have a chat with masak but just now saw that he was leaving for a plane. Does anyone know if he has moved from Uppsala?

[20:09] <sjohnson> the only task i have is to stay out of the way of developers while they work on p6 :)

[20:10] <tadzik> wallberg: he's on the plane from AMS to Copenhagen I think

[20:10] <tadzik> at least he was still in AMS few hs ago

[20:12] <wallberg> just as things started to look up for Uppsala.pm, the interwebs tells me he might have moved to some other town in Sweden

[20:13] <wallberg> anyways, I sent him an email and will hopefully know shortly

[20:14] *** benabik joined
[20:18] <tadzik> yeah, he

[20:18] <tadzik> 's now someplace else iirc

[20:18] <Util> A preview R* Darwin binary is ready for inspection - http://s3.datasaw.com/Rakudo_Star_2011-01_experiment_3.dmg

[20:21] *** Chillance left
[20:25] *** Vlavv left
[20:26] *** MayDaniel left
[20:30] *** porter235 joined
[20:30] *** shi left
[20:33] *** plobsing left
[20:33] *** plobsing joined
[20:34] *** shi joined
[20:34] *** jferrero joined
[20:34] *** porter235 left
[20:38] *** Vlavv joined
[20:40] * mberends <- back home from seeing off the Swedish delegation at AMS. Their scheduled takeoff time was 10 minutes ago.

[20:41] <mberends> wallberg: masak++ has moved to Lund, near where jnthn++ lives, and he has also started $work at the same $company

[20:43] <takadonet> mberends: sweet

[20:43] <mberends> their hacking synergy seems very fruitful :)

[20:43] <wallberg> yup: http://www.edument.se/konsulter/

[20:44] <wallberg> good for them, bad for Uppsala.pm ;-)

[21:00] *** impious joined
[21:01] *** impious left
[21:03] <wallberg> have there been any attempts yet to create p6 modules for Tk, Wx, GTK, Qt or some other GUI frameworks? 

[21:04] <takadonet> wallberg: do not believe so

[21:04] <Su-Shee> yes, Tene bound the enlightement lib thingie for example. 

[21:05] <Su-Shee> for Gtk, GIR is the way to go anyways which simplifies things greatly.

[21:07] <flussence> is GIR what they call their XML stuff these days?

[21:08] <tadzik> wallberg: tk can be used via blizkost I believe

[21:08] <flussence> last time I used it it was still called glade...

[21:08] <tadzik> wallberg: gui toolkits are tricky, for NCI does not yet support callbacks

[21:09] *** Rotwang joined
[21:11] <wallberg> ahh I did not know about blizkost. do I understand it correctly that it basically enables p5 modules in p6 programs?

[21:11] <tadzik> aye

[21:13] <wallberg> as for GIR, I think there is more info here: http://live.gnome.org/GObjectIntrospection

[21:14] <wallberg> alas I am too stupid to turn that into something useful

[21:16] <wallberg> yeah, seems to be a way of passing info between a runtime and the GTK library via XML/GIR... or something

[21:20] *** y3llow_ joined
[21:21] *** pothos_ joined
[21:22] *** bacek left
[21:22] *** pothos left
[21:22] *** y3llow left
[21:22] *** pothos_ is now known as pothos

[21:22] *** y3llow_ is now known as y3llow

[21:23] *** noganex_ joined
[21:24] *** noganex left
[21:24] *** hercynium left
[21:26] <Tene> tadzik: I was able to do callbacks just fine; I just had to write a little shim in C.

[21:26] <Tene> Soon that should be movable into parrot itself, as I should be able to write the shim with llvm.

[21:27] <tadzik> Tene: care to show the code?

[21:27] <tadzik> http://i.imgur.com/ZyeCO.jpg # I actually lol'd

[21:28] <Su-Shee> flussence: no, GIR isnt even remotely Glade related.

[21:29] <sjohnson> i don't get the flowerpot reference

[21:29] <sjohnson> or metaphor for html

[21:29] <sjohnson> whatever it is

[21:29] <Su-Shee> GIR is how you expose (looking from the C library's viewpoint) the symbols. The "other side" just reads the (indeed) resulting XML instead of pulling in C stuff. 

[21:30] <Su-Shee> if you want to see it in action, look at Seed, I think it makes heavy use of it. 

[21:30] <tadzik> sjohnson: I think it's relating to people calling html a programming language. But the the LaTeX one is a bit wrong too

[21:32] <Tene> tadzik: https://github.com/tene/parrot-elementary/blob/master/evas_cb_helper.c

[21:34] *** stkowski joined
[21:36] <mberends> (lol) what do you think a Perl cartoon would have said (and it's a pity there not a Perl one anyway)? I would think "It seems to cover the topics but I have no idea how it manages to do that with so few apparently unrelated words"

[21:36] <sjohnson> "this looks like a religious text to me"

[21:37] <mberends> heh

[21:37] <mberends> bless you too

[21:37] <tadzik> "I have no idea what it does, but even the gurus can't summarize that in half the page, thus you must be wrong or something"

[21:38] <tadzik> or "But you're basically glueing the well-known theories" :)

[21:38] <tadzik> I tend to say that usually when you program, you split the big problem into a number of smaller ones until the smaller ones are trivial. In Perl, you split the problem into the smaller ones until there's a CPAN module for each of them )

[21:38] <sjohnson> "what the heck is this underscore variable?"

[21:41] *** fhelmberger left
[21:41] <mberends> "Please re-submit your text, this copy seems to be full of corrupt characters"

[22:01] *** kaare_ left
[22:09] *** hercynium joined
[22:13] *** PacoLinux_ left
[22:18] *** mikehh joined
[22:24] *** [Coke] joined
[22:30] *** porter235 joined
[22:33] *** tyatpi_ left
[22:33] *** tyatpi_ joined
[22:34] *** porter235 left
[22:43] *** woosley joined
[22:45] *** kunwon1 joined
[22:46] *** coldhead joined
[22:54] *** ymasory left
[22:55] *** Rotwang left
[23:02] * jnthn made it home safely o/

[23:03] <jnthn> And I can vouch that masak at least made it safely to within 2km of his home. :)

[23:05] <mberends> \o/

[23:05] *** plobsing left
[23:13] *** spq left
[23:19] *** woosley left
[23:22] *** plobsing joined
[23:24] *** pjcj joined
[23:26] *** whiteknight joined
[23:34] *** hercynium left
[23:44] <lichtkind> \o/

[23:44] <colomon> \o/

[23:48] * jnthn gets some rest...back to $dayjob tomorrow.

[23:52] *** mberends left
[23:56] *** fisted_ joined
[23:56] *** fisted left
[23:58] *** benabik left
