[00:14] <crked> yytgyyhuhjyuuy6utgjuhfrgtfgtvcfggetdfrtdffvfffgffvdffhtyi8j56pogn6m7lyho

[00:18] *** donri left
[00:19] *** soh_cah_toa left
[00:27] <crked> Sorry, my little brother knocked my keyboard when I didn't notice..

[00:29] *** dorlamm joined
[00:54] *** daniel-s joined
[01:03] *** whiteknight joined
[01:12] *** agentzh joined
[01:13] *** tokuhirom left
[01:17] *** woosley joined
[01:17] *** dorlamm left
[01:17] *** soh_cah_toa joined
[01:18] *** ponbiki left
[01:45] *** whiteknight left
[02:11] *** fckStick joined
[02:11] <dalek> rakudo/nom: 0b90bc4 | Coke++ | t/spectest.data:

[02:11] <dalek> rakudo/nom: track failure modes

[02:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0b90bc4ee1

[02:30] *** fckStick left
[02:35] *** fckStick joined
[02:50] <dalek> roast: f1a4d8a | Coke++ | S (3 files):

[02:50] <dalek> roast: nom (un)fudge

[02:50] <dalek> roast: review: https://github.com/perl6/roast/commit/f1a4d8af00

[02:51] <dalek> rakudo/nom: a8f8222 | Coke++ | t/spectest.data:

[02:51] <dalek> rakudo/nom: run fudged tests.

[02:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a8f8222418

[03:14] *** stanrifkin joined
[03:23] *** Su-Shee_ joined
[03:26] *** Su-Shee left
[03:39] *** stanrifkin left
[03:49] *** crked left
[03:51] *** fckStick left
[04:01] *** soh_cah_toa left
[04:22] *** birdwindupbird joined
[04:22] *** worr left
[04:23] *** worr joined
[04:47] *** satyavvd joined
[05:06] *** Reaganomicon left
[05:12] *** lue left
[05:25] *** SHODAN joined
[05:38] *** Reaganomicon joined
[05:47] *** wtw joined
[06:04] *** SHODAN left
[06:04] *** SHODAN joined
[06:38] * uniejo will be travelling soon. I need to find something to work on for tomorrorws Perl6 hackathon.

[06:38] *** Su-Shee_ is now known as Su-Shee

[06:45] <moritz> uniejo: write some Perl 6 modules?

[06:46] <moritz> uniejo: or look at http://rosettacode.org/wiki/Reports:Tasks_not_implemented_in_Perl_6

[06:48] *** kaare_ joined
[06:49] *** koban joined
[06:55] *** saaki joined
[06:56] <moritz> nom: sub f() { try { return } } ; f; say 'alive';

[06:56] <p6eval> nom: OUTPUT«alive␤»

[07:04] *** woosley left
[07:04] *** woosley joined
[07:16] *** koban left
[07:24] *** sili joined
[07:26] *** im2ee joined
[07:39] *** timbunce joined
[07:47] *** huf left
[07:50] *** huf joined
[07:52] *** ranguard_ joined
[07:53] *** Alias joined
[07:53] <ranguard_> hi, is there a Perl 5 to Perl 6 translator yet? - or a date for one?

[07:56] <sili> nope

[07:57] <ranguard_> but there will be?

[07:58] <sili> maybe

[07:58] <sili> Will I be able to convert my Perl 5 programs to Perl 6?

[07:58] <sili> Yes. Larry Wall and others are already working on a Perl 5 to Perl 6 translator, which will be able to translate (most) Perl 5 source code to the equivalent Perl 6 syntax.

[07:59] <ranguard_> yea - that's what I was reading - just wanted to make sure that was still the case

[08:00] <sili> it'll be out by Christmas.

[08:00] <sili> just like perl6 :D

[08:00] <ranguard_> *sigh*

[08:00] <sili> I know.

[08:01] <moritz> there's one way to speed that process, really

[08:01] <ranguard_> that quote from 2004

[08:02] <ranguard_> I just want to know if it's still true

[08:02] <moritz> it's still a true plan

[08:02] <ranguard_> ok - cheers

[08:02] <moritz> but I don't know if anybody is really committed to see it happen

[08:03] *** worr left
[08:03] <ranguard_> moritz: as in ever?

[08:06] <ranguard_> man, I wish Perl 6 just didn't exist

[08:06] <moritz> why?

[08:06] <moritz> because that would have made perl 5 better than it is now?

[08:07] *** woosley left
[08:07] <ranguard_> because of how it's screwing over Perl 5, and how that's only going to get worse over time

[08:07] <sili> perl5 has been kicking ass for the past couple of years

[08:07] <moritz> ranguard_: I don't know of any evidence that it's screwing over Perl 5

[08:08] <ranguard_> it's going to start to - just because of the name (I know this is an old argument)

[08:09] *** woosley joined
[08:10] <ranguard_> Randal's nice post about Perl 6, how ever well intended implys an end of life for Perl 5, and we also have to work out if the two languages should be discussed on the same websites, which will confuse people, but having to create seperate blogs.perl5.org and blogs.perl6.org is also confusing

[08:10] <TiMBuS> who does it confuse

[08:10] <moritz> ranguard_: I'm very active on perlmonks, and see more confusion about java vs. javascript than perl 5 vs. perl 6

[08:11] <ranguard_> and until Perl 6 is seriously ready for business/production to switch over to then it's noise that's distracting people

[08:12] <TiMBuS> distracting?

[08:12] <lestrrat> I'm not completely sold on the whole "perl5 suffers because of perl6" thing, but to be honest, it confuses the hell out of non-engineers (managers -- people who makes decisions), that's for sure.

[08:12] <ranguard_> TiMBuS: People new to Perl and businesses considering Perl

[08:12] <moritz> you mean, just like the questions about telnet automation distract people from the discussion of web develpment?

[08:14] <ranguard_> I spend a lot of time trying to encourage new people into Perl - they find even the distinction between AS Perl and Strawberry Perl confusing enough - let alone when one starts talking about Perl 5 being one language and Perl 6 being another

[08:14] *** woosley left
[08:15] <moritz> that's indeed a deplorable situation

[08:15] <szabgab> ranguard_: so that's why you are there being the authority for them to clear the confusion

[08:15] <moritz> and I wonder how the C guys deal with it

[08:15] <moritz> I mean, not only are there different compilers, a lot of them

[08:15] <moritz> but also there's C++, whos name suggests that it's a natural upgrade path from C

[08:16] <TiMBuS> oh god and C99 vs C89.

[08:16] *** woosley joined
[08:16] <moritz> maybe we could look at how they handle it, and do that similarly for Perl 5 vs. 6 and strawberry vs. activestate

[08:17] <szabgab> ranguard_: you can clear up the confusion with one sentence

[08:17] <szabgab> if they trust you they will go with what you receommend

[08:17] <szabgab> if they don't trust you then it does not matter anyway

[08:17] <TiMBuS> 'perl 6 is cool. dont use it yet though. perl 5 has way more stuff and is faster'

[08:17] <ranguard_> the people I think about most are those who've got little / no programming experience and are trying to choose a language - maybe the difference is that C decision makers tend to be more techincal?

[08:17] <TiMBuS> this is what i say to people and the conversation is over

[08:18] <ranguard_> TiMBuS: but that needs to be _everywhere_ - and the 'yet' still implies it will replace Perl 5, not run alongside it

[08:18] <TiMBuS> they should use it when its better :v

[08:18] <szabgab> let's say you want to recoomend Strawberry Perl: I'd say "There are multiple Perl distribution to provide some choice, but for your purpose Strawberry Perl is the recommended one"

[08:19] <moritz> well, at least *my* plan is to replace Perl 5, along with Ruby, TCL and a whole lot of other dynamic languages

[08:19] <szabgab> TiMBuS: yeah, that's what I say to people too

[08:20] <TiMBuS> perl 6 rules. i keep writing stuff in perl 5 and wishing i had <cool feature>

[08:20] <ranguard_> it's easy one a one-to-one basis, or on a single web page - but you don't want to have to put that message on everything that mentions Perl 5 or Perl 6

[08:20] <szabgab> I also say "if you like cool and interesting things, go learn perl 6 and maybe even contribute but if you need your job done now then use perl 5"

[08:21] <szabgab> ranguard_: right IMHO

[08:21] <ranguard_> if Perl 6 was called Camelia (or anything else) there wouldn't need to be this distinction

[08:21] <moritz> well, a good step in the right direction would be to write "Perl 5" everwhere where "Perl 5" is meant

[08:21] <ranguard_> moritz: I've already started doing that on the Perl.org sites 

[08:21] <szabgab> ranguard_: you know what, this might be used to our advantage

[08:22] <TiMBuS> if perl 6 wasnt called perl 6 no one would use it when its ready.

[08:22] <TiMBuS> :<

[08:22] <szabgab> people want to "get more information"

[08:22] <moritz> ranguard_: I kinda agree that a different name might be a benefit

[08:22] *** woosley left
[08:22] <moritz> ranguard_: but it would need to be a good name, and 'camelia' isn't

[08:22] <szabgab> so put some generic stuff on the web site and provide a palce to ask for more details

[08:22] <ranguard_> TiMBuS: why? - if it's as good a language as it seems it will be then it can market itself on that?

[08:23] <TiMBuS> nah that doesnt work

[08:23] <TiMBuS> but also id like it called perl 6 because its a perl.

[08:24] <ranguard_> It's part of the Perl family, but then so was PHP in an indirect kind of a way

[08:24] <TiMBuS> thats what the p in the php in the php stands for

[08:24] <moritz> except that PHP moved on sideways, Perl 6 moved on forward

[08:24] <TiMBuS> :v

[08:25] * ranguard_ nods

[08:27] <szabgab> ranguard_: you can also put huge icons on the web site with one sentence explanations

[08:27] <szabgab> if you are talking about perl.org

[08:27] <moritz> ranguard_: is there anything from the Perl 6 side we could do to make perl.org better?

[08:28] <ranguard_> moritz: rename Perl 6 :) ? - otherwise I'm not sure

[08:28] <ranguard_> szabgab: "Perl 6 is a sister language, part of the Perl family. Perl 6 is not production ready yet, you can get involved with its development though." - already on the homepage

[08:28] <szabgab> let me check

[08:29] <TiMBuS> also explain why a beginner should care about perl6 vs 5? whatever they can install and run and write things in is good enough for a beginner.

[08:29] <ranguard_> I guess I'm excited that Perl 6 does seem to have more momentum now, but I'm also conscious that this is possibly a tipping point and if we don't get it right then the WHOLE Perl community will get too messy and loose people/not get new people

[08:30] <szabgab> ranguard_: maybe move it just under the Perl 5 entry as it is currently under the fold (for me)

[08:30] <TiMBuS> and then going back, what kind of 'developer' would be confused about 'choosing a perl?'. or do managers research languages without asking anybody anything, these days. and then get confused about version numbers?

[08:30] <ranguard_> should we have blogs.perl.org/perl5 and blogs.perl.org/perl6 for example

[08:30] <TiMBuS> this seems like a contrived argument actually!

[08:31] <ranguard_> TiMBuS: a beginner should be taught Perl 5 - because that's something they can use in production

[08:31] <TiMBuS> thats why MIT taught scheme for like 15 years

[08:31] <TiMBuS> ?

[08:31] <szabgab> There could be also an entry "Perl 5 vs Perl 6" with very short explanation

[08:31] <moritz> ranguard_: one could also make a case that a beginner should learn Perl 6, because it's much more consistent and easier to learn

[08:32] <ranguard_> TiMBuS: ok, I guess I mean a beginner in terms of someone going to use it for production - instead of someone just learning to program in general

[08:32] <TiMBuS> i dont think i want a beginner touching code that makes money

[08:32] *** hanekomu joined
[08:32] <Su-Shee> a beginner in perl is not necessarily a beginner in programming. 

[08:33] <ranguard_> TiMBuS: but everyone has to start somewhere :)

[08:33] <szabgab> and just one thing about the Perl 6 entry, I would replace "Perl 6 is not production ready yet, you can get involved with its development though. " by

[08:33] <szabgab> "Perl 6 is in development. You can get involved in the process"

[08:33] *** hanekomu left
[08:34] <szabgab> or some such more positive sentence :)

[08:34] *** hanekomu joined
[08:34] <ranguard_> Su-Shee: true

[08:34] <szabgab> rakudo: say "money"

[08:35] <p6eval> rakudo 922500: OUTPUT«money␤»

[08:35] <szabgab> it did not segfault :)

[08:37] <ranguard_> moritz: are you at YAPC::EU?

[08:38] <moritz> ranguard_: no :(

[08:39] <szabgab> I had dinner with tadzik yesterday , I ate he drank beer :)

[08:40] <moritz> szabgab: (totally off-topic) do you have a passport from an EU country?

[08:40] <szabgab> Hungary

[08:40] <ranguard_> moritz: ok, well what Perl 6 could do for perl.org/other Perl sites is think about the implications for existing sites - e.g. blogs.perl.org so we can start to work out how the community should be able to interact with Perl 5 and/or Perl 6 without getting on top of each other

[08:41] <szabgab> I don't see we are getting on top each oteher

[08:41] <moritz> ranguard_: I'll certainly think about it, though currently I don't see immediate signs of a problem

[08:41] <ranguard_> szabgab: not _yet_ - but as more happens in Perl 6 I think it will become more of an issue

[08:42] <szabgab> I just see some people refusing to embrace Perl 6 and thinking that only if it did not exist we would be better off

[08:42] <szabgab> one does not have to be invloced in Perl 6 to accept it as something that is here and nice to have

[08:43] <ranguard_> szabgab: I'm not embracing Perl 6 because at the moment it's the same as PHP or Ruby to me - it's not something I want to use for work.. yet

[08:43] <szabgab> sure

[08:44] <szabgab> Id id not mean (and the word might not fit well) embrace as in use it

[08:44] <szabgab> I don't use it either even though I keep starting projects in it

[08:44] <ranguard_> when there are migration tools / a lot of CPAN etc then sure I'll have a look, but until then it's more academic

[08:44] <szabgab> oh migration tools

[08:44] <szabgab> that reminds me people are not moving from 5.6 to 5.8 because they don't have migration tools

[08:45] <szabgab> I have several such clients

[08:45] <szabgab> ok, 2

[08:45] <moritz> wow

[08:45] <moritz> at least they are not stuck with perl 4 :-)

[08:45] <szabgab> oh I have one of thoes as well :)

[08:45] *** cognominal_ left
[08:46] *** cogno_ joined
[08:46] *** cognominal_ joined
[08:46] <szabgab> but they don't touch that code and luckily I don't touch that either :)

[08:48] *** quietfanatic left
[08:48] *** cogno left
[08:48] * moritz wouldn't know how to program in Perl 4

[08:48] <ranguard_> moritz: I'd like to think about/discuss it now - so if there is any major change/work to be done we can start on that before there is an issue

[08:49] <moritz> ranguard_: understood

[08:49] <ranguard_> cheers - right better get on with $work :)

[08:55] *** ranguard_ left
[08:56] *** ranguard joined
[08:57] *** wamba joined
[09:14] *** cogno_ left
[09:14] *** cognominal___ joined
[09:14] *** woosley joined
[09:14] *** cogno joined
[09:17] *** cognominal_ left
[09:31] <szabgab> is there any unofficial Perl 6 hackathon going on somewhere now? or later today?

[09:32] <moritz> I'm sure pmichaud++ will know

[09:32] <moritz> and tadzik++

[09:33] <mberends> most of their flights arrived less than an hour ago, so the hackers are probably still en route

[09:33] <moritz> right

[09:45] <tadzik> good morning #perl6

[09:45] <moritz> good morning tadzik 

[09:46] <moritz> tadzik: where did you find wifi today? :-)

[09:46] <tadzik> moritz: on the airport :) I'm waiting for rafl++ to appear

[09:47] *** woosley left
[10:00] <szabgab> tadzik: I am stuck at my hotel spending too much time on IRC

[10:00] <szabgab> once you settle down somewhere and start hacking I'd like to join

[10:03] <tadzik> szabgab: I'll drop you a note when we get to the hotel

[10:03] * tadzik bbl

[10:04] <szabgab> tadzik: thanks

[10:11] *** im2ee left
[10:14] *** M_o_C joined
[10:16] <moritz> woah, there are so many cases you can get wrong when fiddling with exceptions and backtrace printing

[10:16] <moritz> and if you throw an error from the backtrace printer, you get the most useless error messages ever

[10:50] *** cogno_ joined
[10:50] *** cogno left
[10:51] *** agentzh left
[11:00] *** mj41 joined
[11:05] *** agentzh joined
[11:19] * tadzik hotell'd

[11:23] <dalek> rakudo/nom: cd81901 | moritz++ | / (5 files):

[11:23] <dalek> rakudo/nom: Bring back Perl 6 level stack traces

[11:23] <dalek> rakudo/nom: 

[11:23] <dalek> rakudo/nom: There are still a lot of quirks to be worked out, for example some routines

[11:23] <dalek> rakudo/nom: magically not appearing in the stack trace, and other showing up

[11:23] <dalek> rakudo/nom: that I would prefer to keep out (like &die), but I believe it is a net

[11:23] <dalek> rakudo/nom: improvement. The old PIR backtraces can be obtain with the --ll-exception

[11:23] <dalek> rakudo/nom: command line argument.

[11:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cd81901c70

[11:23] <dalek> rakudo/nom: d06de50 | moritz++ | NOMMAP.markdown:

[11:23] <dalek> rakudo/nom: update NOMMAP

[11:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d06de5068a

[11:26] * felher is surprised by how much faster even a simple token ( '.*' ) is compared to the same regex.

[11:27] *** odoacre left
[11:27] <felher> (Rakudo master)

[11:27] <tadzik> faster than what?

[11:28] <moritz> regex { '.*' } I assume

[11:28] <felher> tadzik, moritz: yeah. token {.*} vs regex {.*}

[11:29] <tadzik> oh, I see

[11:29] * flussence was trying to get Text::Escape in pod2html to go faster yesterday by using split(:all) instead of iterating over every char... it didn't really work

[11:29] <moritz> felher: with or without the quotes?

[11:30] <felher> moritz: without, sorry.

[11:30] <moritz> flussence: why not subst?

[11:31] <flussence> moritz: because I'm lazy and copied a split/join thing from Text::Tabs :)

[11:31] <flussence> (I might give that a try after $dayjob...)

[11:32] <moritz> nom: s/a/b/

[11:32] <p6eval> nom: OUTPUT«Method 'clone' not found for invocant of class 'Sub'␤current instr.: '_block1002' pc 84 ((file unknown):26150080) (/tmp/X3w4YUTYwN:1)␤»

[11:33] <moritz> nom: Sub.clone

[11:33] <p6eval> nom: OUTPUT«Cannot access attributes in a type object␤current instr.: '_block3828' pc 61200 (src/gen/perl6-metamodel.pir:20284) (src/gen/Metamodel.pm:2481)␤»

[11:33] <flussence> nom: say $_.perl

[11:33] <p6eval> nom: OUTPUT«Any␤»

[11:33] *** SHODAN left
[11:38] *** flussence joined
[11:38] <flussence> argh, my utf8's all screwed up today :(

[11:42] *** nbrown_ joined
[11:43] <moritz> jnthn, pmichaud: there are various subs in Actions.pm that deal with blocks and subs, like make_simple_code_object, block_closure, regex_coderef etc. -- they would really benefit from some documentation

[11:45] *** nbrown left
[11:45] <moritz> in particular I have no clue which ones to use for a specific task

[11:47] *** flussence left
[11:47] *** flussence joined
[11:47] *** satyavvd left
[11:48] <tadzik> szabgab: ping

[11:49] <tadzik> szabgab: text me if you feel like some nom

[11:50] <szabgab> tadzik: here

[11:50] <szabgab> and now that you say I think I am hungry :)

[11:51] <szabgab> tadzik: which McDonalds are we meeting this time ?

[11:51] *** birdwindupbird left
[11:52] *** birdwindupbird joined
[11:57] <moritz> .oO( you go to Riga to eat at McDonalds? )

[12:00] <szabgab> moritz: we were supposed to meet at McDonalds 

[12:00] <szabgab> but even that we missed :)

[12:00] <szabgab> we had very nice italian food

[12:01] <flussence> (grr... installing a display manager had stopped the locale getting set.)

[12:03] *** amkrankruleuen left
[12:03] *** amkrankruleuen joined
[12:04] *** pernatiy joined
[12:06] *** ZaphrodZenovka left
[12:14] <takadonet> morning all

[12:16] <moritz> \o

[12:26] * TimToady and the Mrs are soggy but Rigafied; the plane that broke in Chicago only set us back about 2 hours...

[12:26] <phenny> TimToady: 11 Aug 22:49Z <diakopter> ask TimToady may I tackle the Literals section of S02

[12:27] <TimToady> phenny: tell diakopter sure, I'm not going to be hacking on S02 the next couple days when I have to write a talk...

[12:27] <phenny> TimToady: I'll pass that on when diakopter is around.

[12:32] <TimToady> nap &

[12:47] <moritz> http://hackaday.com/2011/08/11/how-to-put-your-logo-in-a-qr-code/ # anybody wants to make a Camelia QR code which is a link to http://perl6.org/ ?

[12:49] *** JimmyZ joined
[12:53] *** bluescreen10 joined
[12:53] *** JimmyZ left
[12:53] *** JimmyZ joined
[12:55] *** JimmyZ left
[12:55] *** JimmyZ joined
[12:56] *** JimmyZ left
[12:56] *** JimmyZ joined
[12:58] <JimmyZ> std: my sub hi () { say 'hi'; };  hi (),(),();

[12:58] <p6eval> std 516268a: OUTPUT«ok 00:01 124m␤»

[12:58] <JimmyZ> nom: my sub hi () { say 'hi'; };  hi (),(),();

[12:58] <p6eval> nom: OUTPUT«Too many positional parameters passed; got 3 but expected 0␤  in sub hi at /tmp/idawf_Eh4s:1␤  in mu <anon> at /tmp/idawf_Eh4s:1␤  in mu <anon> at /tmp/idawf_Eh4s:1␤␤»

[12:58] <moritz> nom: say ((), (), ()).elems

[12:58] <p6eval> nom: OUTPUT«3␤»

[12:59] <JimmyZ> syn said it's ok

[12:59] <moritz> where?

[13:00] <JimmyZ> S03:3137

[13:00] *** JimmyZ left
[13:01] *** JimmyZ joined
[13:01] <moritz> hm

[13:01] <moritz> nom: sub f() { }; f(|((), (), ()))

[13:01] <p6eval> nom: OUTPUT«Too many positional parameters passed; got 3 but expected 0␤  in sub f at /tmp/bTL2qKDplW:1␤  in mu <anon> at /tmp/bTL2qKDplW:1␤  in mu <anon> at /tmp/bTL2qKDplW:1␤␤»

[13:02] <moritz> something's wrong, yes

[13:02] <moritz> I'm just not sure if it's the spec or nom :-)

[13:02] <moritz> perl6: my sub hi () { say 'hi'; };  hi (),(),();

[13:02] <p6eval> rakudo 922500: OUTPUT«Too many positional parameters passed; got 3 but expected 0␤  in 'hi' at line 22:/tmp/lsy5suXAqN␤  in main program body at line 22:/tmp/lsy5suXAqN␤»

[13:02] <p6eval> ..niecza v8-51-g785e335: OUTPUT«Unhandled exception: Excess arguments to MAIN hi, used 0 of 3 positionals␤  at /tmp/mXCQmXTFD8 line 0 (MAIN hi @ 0) ␤  at /tmp/mXCQmXTFD8 line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1996 (CORE C939_ANON @ 2) ␤  at /home/p6eval…

[13:02] <p6eval> ..pugs: OUTPUT«*** No compatible multi variant found: "&hi"␤    at /tmp/9JJE7Gk0qi line 1, column 30-41␤»

[13:05] *** MayDaniel joined
[13:06] *** JimmyZ left
[13:07] <moritz> Files=427, Tests=13028

[13:07] <dalek> rakudo/nom: ab5fbf9 | moritz++ | src/Perl6/ (2 files):

[13:07] <dalek> rakudo/nom: fix s///

[13:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ab5fbf9a60

[13:07] *** JimmyZ joined
[13:07] <flussence> \o/

[13:07] <JimmyZ> it said 'which it may reject at run time'

[13:07] <JimmyZ> I'm not sure what it means

[13:07] <dalek> roast: 141f0b5 | moritz++ | S05-substitution/subst.t:

[13:07] <dalek> roast: s/// unfudges for rakudo

[13:07] <dalek> roast: review: https://github.com/perl6/roast/commit/141f0b5436

[13:07] <flussence> that's well over half of master now

[13:07] <JimmyZ> nom: my $x = 3.5;  my $i = Int.($x); say $i;

[13:07] <p6eval> nom: OUTPUT«Method 'postcircumfix:<( )>' not found for invocant of class 'Int'␤  in mu <anon> at src/gen/Metamodel.pm:2713␤  in mu <anon> at /tmp/dBs8vCk4O3:1␤  in mu <anon> at /tmp/dBs8vCk4O3:1␤  in mu <anon> at /tmp/dBs8vCk4O3:1␤␤»

[13:07] <JimmyZ> rakudo: my $x = 3.5;  my $i = Int.($x); say $i;

[13:08] <p6eval> rakudo 922500: OUTPUT«invoke() not implemented in class 'Integer'␤  in main program body at line 22:/tmp/OPokXu0MjN␤»

[13:08] <moritz> JimmyZ: I think the point of that section is that nullary functions don't parse differently from functions that need arguments

[13:09] <JimmyZ> perl6: my $x = 3.5;  my $i = Int.($x); say $i;

[13:09] <p6eval> rakudo 922500: OUTPUT«invoke() not implemented in class 'Integer'␤  in main program body at line 22:/tmp/Waj7qvtXse␤»

[13:09] <p6eval> ..niecza v8-51-g785e335: OUTPUT«Unhandled exception: Unable to resolve method postcircumfix:<( )> in class Int␤  at /tmp/vr3kBheppv line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1996 (CORE C939_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1997 (CO…

[13:09] <p6eval> ..pugs: OUTPUT«*** Must only use named arguments to new() constructor␤    Be sure to use bareword keys.␤    at /tmp/ElrKjeEu2F line 1, column 18-31␤»

[13:10] <JimmyZ> moritz: nullary? do you mean null args?

[13:10] <moritz> JimmyZ: yes

[13:12] <JimmyZ> could I add test 'my $x = 3.5; my $i = Int.($x); say $i;' ?

[13:12] <moritz> shouldn't that be Int($x) ?

[13:13] <JimmyZ> moritz: S03:3171

[13:13] <JimmyZ> nom: my $x = 3.5;  my $i = Int.($x); say $i;

[13:13] <p6eval> nom: OUTPUT«Method 'postcircumfix:<( )>' not found for invocant of class 'Int'␤  in mu <anon> at src/gen/Metamodel.pm:2713␤  in mu <anon> at /tmp/wHE3XhsTkX:1␤  in mu <anon> at /tmp/wHE3XhsTkX:1␤  in mu <anon> at /tmp/wHE3XhsTkX:1␤␤»

[13:14] * moritz is a bit confused by that section

[13:14] <moritz> since when does Int ~~ Callable hold true?

[13:14] <moritz> I kinda thought the coercion thingy was syntactic

[13:15] *** MayDaniel_ joined
[13:16] *** jimmy1980 joined
[13:16] *** MayDaniel left
[13:16] <tadzik> moritz++ # new backtraces

[13:19] <moritz> tadzik: have you tried them?

[13:19] <moritz> if not, that ++ might be a bit premature :-)

[13:21] *** donri joined
[13:22] *** phenny left
[13:22] *** phenny joined
[13:23] *** orafu left
[13:24] <JimmyZ> nom: sub postcircumfix:<( )>($a, $x) { $x.Int; } ; my $x = 3.5; my $i = Int.&postcircumfix:<( )>($x); say $i;

[13:24] <p6eval> nom: OUTPUT«3␤»

[13:24] *** orafu joined
[13:29] <JimmyZ> alpha: my $a = [1..10]; say $a.[2], $a[2];

[13:29] <p6eval> alpha : OUTPUT«33␤»

[13:36] * moritz has a new idea for a web app

[13:36] <takadonet> ?

[13:36] <moritz> imagine a website that displayed the various synopsis

[13:37] <moritz> and could you mark each section as "OK", "not sure", "I don't believe that works" or so

[13:37] <flussence> ooh

[13:37] <moritz> and then it could show the overal trust status of each section, calculated from all the different reviews

[13:39] <moritz> (I think the real challenge would be to carry over trust status from previous iterations when the spec changes)

[13:40] <moritz> it would also be very interesting to compare how different people see the specs

[13:40] <moritz> for example, contrast sorear's and jnthn's opinions about multi dispatch :-)

[13:40] *** jaldhar left
[13:45] *** drbean left
[13:57] <felher> I know that i can use '** 1..*' to specify "at least once" in a regex. I also know that i can write '** \|' for "as many as you want separated by '|'. Can i combine both? "from x to z of that atom separated by '|'"?

[13:58] <moritz> not easily

[13:59] <moritz> you can write <atom> [ '|' <atom> ] ** 1..3 though

[14:00] <moritz> it requires you to repeat the atom, which might not be awesome

[14:00] <moritz> I personally believe that ** shouldn't have these two functions

[14:00] <moritz> I'd rather have a different syntax for having a separator

[14:01] <moritz> like <atom> *** '|'

[14:01] <moritz> that way when the RHS of ** can not be parsed as a valid range spec, one can get a nice error message

[14:02] <moritz> now if you <atom> ** 1..  the 1.. is parsed as separator, not range

[14:02] <moritz> *if you write

[14:03] *** wtw left
[14:03] <felher> moritz: sounds reasonable. One still wouldn't be able to combine separator and repetition, would he? 

[14:03] <flussence> maybe we should allow ÷ for separator and × for repetition :)

[14:03] <moritz> felher: no

[14:04] <moritz> felher: but I think there doesn't need to be a feature for that, because it's not too common and can be rather easily synthesized

[14:08] <felher> moritz: k, i see. So the easiest way to write "atom a at least once but up to * times separated by |" is the way you mentioned earlier, namely   <A> [ '|' <A> ] ** 0..*   ?

[14:09] <moritz> yes

[14:09] <felher> moritz++ : k, thnx a lot :)

[14:12] *** im2ee joined
[14:13] *** uvtc joined
[14:13] <im2ee> Hello, help me to get started. Could You?

[14:13] *** ZaphrodZenovka joined
[14:14] <moritz> im2ee: sure. Start with http://rakudo.org/how-to-get-rakudo/

[14:14] <im2ee> What first? What I should begin from?

[14:14] <uvtc> im2ee: What OS are you using?

[14:14] <im2ee> I have rakudo. :)

[14:14] <im2ee> Linux.

[14:14] <moritz> oh, even better

[14:14] <im2ee> Gentoo Linux.

[14:15] <moritz> im2ee: do you have experience with other programming languages?

[14:15] <moritz> I recommend https://github.com/downloads/perl6/book/2011.07.a4.pdf for a start, but I'm biased, because I'm one of the authors :-)

[14:16] *** JimmyZ left
[14:16] <im2ee> Hmm, I have experience with Perl and C. Hmm, and with Java, and, You know, something like BASH, PHP etc.

[14:17] <im2ee> But most of the Perl language.

[14:17] <moritz> then http://perlgeek.de/en/article/5-to-6 might also interest you

[14:17] <im2ee> So, maybe first document and after 2nd? :)

[14:18] <uvtc> im2ee: You can pick up quite a bit and get a better feel for Perl 6 by skimming those 5-to-6 articles.

[14:18] * moritz has no idea what order is better

[14:18] <im2ee> Ok, thank You.

[14:19] <im2ee> So.. I begin. I'll be back if Im done. Right? :)

[14:20] <moritz> im2ee: not right :-)

[14:20] <im2ee> Why?:)

[14:20] <moritz> im2ee: you begin to read, and at the same time experiment with these features

[14:20] <moritz> im2ee: and ask here if you have questions

[14:20] <im2ee> Ok, great! :)

[14:20] <im2ee> Thank You.

[14:20] <moritz> better than reading from cover to cover first

[14:21] <uvtc> moritz: I think there was some confusion earlier. You wrote to ranguard_ that you "don't know if anybody is really committed to see it happen" ... I think you were talking about a 5to6 translator, but he was talking about "Perl 6 by Christmas".

[14:21] *** Alias left
[14:21] <moritz> uvtc: oh, I was indeed

[14:21] *** JimmyZ joined
[14:21] <im2ee> I love this type of channels, where people are friendly. :)

[14:21] <im2ee> Thanks. :)

[14:23] <mathw> friendliest place on IRC, this

[14:27] <im2ee> Right :)

[14:27] <uvtc> How do I make an array of arrrays? Given `@a` and `@b`, I tried `my @aoa = (@a, @b);`, but it appears to flatten.

[14:27] <[Coke]> parrot dev release this coming tuesday, please make sure nom still works on recent versions.

[14:28] <uvtc> *arrays

[14:28] <moritz> uvtc: [@a], [@b] or @a.item, @b.item

[14:28] <moritz> in nom you can also say (@a; @b), I think

[14:29] <moritz> nom: my @a = 1, 2, 3; my @b = <d e f>; my @lol = (@a; @b); say @lol.perl

[14:29] <p6eval> nom: OUTPUT«Array.new("d", "e", "f")␤»

[14:29] <moritz> fail?

[14:29] <moritz> nom: my @a = 1, 2, 3; my @b = <d e f>; my @lol := (@a; @b); say @lol.perl

[14:29] <p6eval> nom: OUTPUT«Array.new("d", "e", "f")␤»

[14:29] <moritz> hm

[14:29] <moritz> nom: my @a = 1, 2, 3; my @b = <d e f>; my @lol := (@a, @b); say @lol.perl

[14:29] <p6eval> nom: OUTPUT«(Array.new(1, 2, 3), Array.new("d", "e", "f"))␤»

[14:29] <moritz> nom: my @a = 1, 2, 3; my @b = <d e f>; my @lol = (@a, @b); say @lol.perl

[14:29] <p6eval> nom: OUTPUT«Array.new(1, 2, 3, "d", "e", "f")␤»

[14:30] <moritz> hm

[14:30] <moritz> nom: my @a = 1, 2, 3; my @b = <d e f>; my @lol = (@a, @b).LoL; say @lol.perl

[14:30] <p6eval> nom: OUTPUT«Method 'LoL' not found for invocant of class 'Parcel'␤  in mu <anon> at /tmp/QvAKpe18Ce:1␤  in mu <anon> at /tmp/QvAKpe18Ce:1␤␤»

[14:31] *** tokuhirom joined
[14:33] <tadzik> moritz: I did, that's why I ++'d :)

[14:33] <moritz> :-)

[14:34] <moritz> it has a lot of problems still

[14:34] <moritz> I think we need a general mechanism to put annotations into blocks or routines

[14:34] <mathw> does nom install properly yet? :)

[14:34] <moritz> mathw: yes

[14:37] <JimmyZ> moritz: I think S03:3171 is wrongish, 

[14:38] <JimmyZ> nom: Class Intt{ ... };  sub Intt{ ... }; # what's why

[14:38] <p6eval> nom: OUTPUT«Cannot assign a non-Perl 6 value to a Perl 6 container␤  in block <anon> at src/gen/CORE.setting:3784␤  in method REIFY at src/gen/CORE.setting:3783␤  in block <anon> at src/gen/CORE.setting:3119␤  in method reify at src/gen/CORE.setting:3082␤  in block <anon> at src/gen/COR…

[14:38] <im2ee> Hmm, I have a question. What about date of official start of Perl6? :)

[14:38] <moritz> im2ee: Perl 6 has officially started many years ago

[14:38] *** jimmy1980 left
[14:38] <im2ee> In 2000?

[14:39] <moritz> dunno, I wasn't involved back then :-)

[14:39] <JimmyZ> nom: class Intt { }; sub Intt { } ;

[14:39] <p6eval> nom:  ( no output )

[14:39] <JimmyZ> nom: class Intt { }; sub Intt { } ; my $i = Intt(3.5);

[14:39] <p6eval> nom: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in sub Intt at /tmp/64DVSnX_BI:1␤  in mu <anon> at /tmp/64DVSnX_BI:1␤  in mu <anon> at /tmp/64DVSnX_BI:1␤␤»

[14:39] <JimmyZ> nom: class Intt { }; sub Intt($x) { } ; my $i = Intt(3.5);

[14:39] <p6eval> nom:  ( no output )

[14:39] <im2ee> mortiz: I know, but many people don't know about Perl6. There's no syntax highlighting for perl6 in text editors etc. :)

[14:40] <flussence> vim does

[14:40] <moritz> im2ee: vim and padre both hilight Perl 6, emacs too (though I don't know how well)

[14:40] <JimmyZ> TimToady: I think S03:3171 is wrongish , see ^^

[14:40] <im2ee> mortiz: and something like gedit? kate? :)

[14:41] <moritz> im2ee: those are still waiting for volunteers to write syntax files

[14:41] <uvtc> im2ee: fwict, most of the major aspects of the spec are "done" and the Rakudo implementation is doing well and just got a pretty nice performance boost.

[14:41] <moritz> im2ee: by the way my nickname has the 'i' before the 't', not the other way round :-)

[14:41] *** jedai joined
[14:41] <moritz> im2ee: and in most IRC clients, pressing the tab key after the first few letters autocompletes the nick for you

[14:42] <im2ee> moritz: oh, my fault, really sorry.

[14:42] <moritz> no problem (and I'm use to it :-)

[14:42] <im2ee> moritz, right, thanks! :)

[14:43] <im2ee> uvtc, thanks for answer.

[14:43] *** jimmy1980 joined
[14:43] <im2ee> moritz, so - another question. What about cpan for perl6 or generally about modules for perl6?

[14:44] <moritz> im2ee: see http://modules.perl6.org/

[14:44] <uvtc> im2ee: Regarding syntax highlighting, aside from Vim and Emacs, someone just a few days ago mentioned here that they're working on Perl 6 syntax h/l for Scintilla.

[14:44] <JimmyZ> TimToady:  per S03:3171, if there is Class Int and sub Int,  which one is called ?

[14:44] *** jedai_ left
[14:45] <colomon> JimmyZ: called when?

[14:45] <im2ee> uvtc, great. Maybe when I knew the language, I can write sytax files. :)

[14:45] <moritz> that was azawawi, fwiw

[14:45] <im2ee> moritz, thanks. :)

[14:45] <JimmyZ> colomon:  my $x = Int(3.5); 

[14:46] <moritz> http://irclog.perlgeek.de/perl6/2011-08-04#i_4221460

[14:46] <uvtc> azawawi++ , right, thanks moritz

[14:46] <moritz> (public logs)++

[14:46] <TimToady> std: class Foo {}; sub Foo {}; Foo()

[14:46] <p6eval> std 516268a: OUTPUT«[31m===[0mSORRY![31m===[0m␤Illegal redeclaration of routine 'Foo' (see line 1) at /tmp/PVsofIxaiM line 1:␤------> [32mclass Foo {}; sub Foo[33m⏏[31m {}; Foo()[0m␤Check failed␤FAILED 00:01 118m␤»

[14:47] * moritz should really finish that KinoSearch based search interface for the IRC logs

[14:47] <colomon> JimmyZ: maybe I'm missing something, but I don't see why Int would be interpreted as a class there?

[14:47] <TimToady> std: sub Int {}

[14:47] <p6eval> std 516268a: OUTPUT«ok 00:01 117m␤»

[14:48] <uvtc> im2ee: if you have a favorite editor in mind, and want to get started, you could get started by just getting it to highlight regular code comments.

[14:48] *** dual left
[14:48] <colomon> std: say Int(10)

[14:48] <p6eval> std 516268a: OUTPUT«ok 00:01 119m␤»

[14:48] <JimmyZ> colomon:  see S03:3171

[14:49] <im2ee> uvtc, ok, I'll try :)

[14:49] <JimmyZ> colomon:  Int.(3.5) is same as Int(3.5)

[14:50] <uvtc> im2ee, great. :)

[14:50] <colomon> errr... Int doesn't do Callable, so far as I know.  Weird example.  

[14:50] <colomon> or is it types in general that do Callable?

[14:50] * colomon is very confused....

[14:51] <moritz> colomon: there was a recent change that made Int($someVariable) a coercion, iirc

[14:51] <moritz> colomon: but I don't know if that's syntactic, or really invoking the Int type object

[14:51] <moritz> (and I do think you can have invocable things that !~~ Callable)

[14:51] <TimToady> types are supposed to be Callable

[14:51] <mathw> moritz: excellent.

[14:51] *** M_o_C left
[14:52] <TimToady> perl6: my $type = Int; say $type(3.5)

[14:52] *** JimmyZ left
[14:52] <p6eval> niecza v8-51-g785e335: OUTPUT«Unhandled exception: Unable to resolve method postcircumfix:<( )> in class Int␤  at /tmp/PK3aXEOHSh line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1996 (CORE C939_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1997 (CO…

[14:52] <p6eval> ..rakudo 922500: OUTPUT«invoke() not implemented in class 'Integer'␤  in main program body at line 22:/tmp/dYOsBHODsk␤»

[14:52] <p6eval> ..pugs: OUTPUT«*** Must only use named arguments to new() constructor␤    Be sure to use bareword keys.␤    at /tmp/J2Vm4iZ5Q6 line 1, column 21 - line 2, column 1␤»

[14:52] *** JimmyZ joined
[14:52] * JimmyZ couldn't understand S03:3148, the foo (),(),() part

[14:54] <TimToady> it does seem a little odd

[14:54] *** M_o_C joined
[14:54] *** M_o_C left
[14:54] *** M_o_C joined
[14:55] <TimToady> that might be a fossil

[14:55] <uvtc> nom: my @a = [1, 2, 3]; say @a.perl; say @a.WHAT

[14:55] <p6eval> nom: OUTPUT«Array.new([1, 2, 3])␤Array()␤»

[14:55] <JimmyZ> rakudo: class Foo { method postcircumfix:<( )>($x) { say $x; } }; Foo.(3.5);

[14:55] <uvtc> How is @a = [1,2,3] different from @a = (1,2,3)?

[14:55] <p6eval> rakudo 922500: OUTPUT«Capture()<0x5c32b18>␤»

[14:56] <moritz> nom: my @a = [1, 2, 3]; say 1 for @a

[14:56] <p6eval> nom: OUTPUT«1␤»

[14:56] <moritz> nom: my @a = (1, 2, 3); say 1 for @a

[14:56] <p6eval> nom: OUTPUT«1␤1␤1␤»

[14:56] <moritz> uvtc: in general, [] does not flatten

[14:56] <moritz> () often does

[14:56] <JimmyZ> nom: my @a = [1,2,3]; say @a.WHAT;

[14:56] <p6eval> nom: OUTPUT«Array()␤»

[14:56] <JimmyZ> nom: my @a = (1,2,3); say @a.WHAT;

[14:56] <uvtc> nom: my @a = (1,2,3); my @b = [1,2,3]; say @a.WHAT; say @b.WHAT

[14:56] <p6eval> nom: OUTPUT«Array()␤»

[14:56] <p6eval> nom: OUTPUT«Array()␤Array()␤»

[14:56] <JimmyZ> nom: my $a = (1,2,3); say $a.WHAT;

[14:57] <p6eval> nom: OUTPUT«Parcel()␤»

[14:57] <moritz> nom: my @a = [1,2,3]; say @a.elems

[14:57] <JimmyZ> nom: my $a = [1,2,3]; say $a.WHAT;

[14:57] <p6eval> nom: OUTPUT«1␤»

[14:57] <p6eval> nom: OUTPUT«Array()␤»

[14:57] <moritz> nom: my @b = (1,2,3); say @b.elems

[14:57] <p6eval> nom: OUTPUT«3␤»

[14:57] <moritz> nom: my @a = [1,2,3]; say @a[0].elems

[14:57] <p6eval> nom: OUTPUT«3␤»

[14:58] <JimmyZ> nom: my @a = [1,2,3]; say @a.WHAT; my $a = [1,2,3]; say $a.WHAT;

[14:58] <p6eval> nom: OUTPUT«Array()␤Array()␤»

[14:58] <JimmyZ> what's the different ?

[14:58] *** birdwindupbird left
[14:58] <moritz> JimmyZ: take a look at what I wrote :-)

[14:59] <im2ee> Ok, so... Next question. What about IO::Socket::INET? :)

[14:59] <moritz> im2ee: what about it?

[14:59] <moritz> :-)

[14:59] <moritz> im2ee: https://github.com/cosimo/perl6-lwp-simple/ is a nice example of its usage

[15:00] <JimmyZ> nom: my @a = [1,2,3]; my $a = [1,2,3];  say $a[2]; say @a>>.[0];

[15:00] <p6eval> nom: OUTPUT«3␤1 2 3␤»

[15:00] <moritz> nom: my $a = [1, 2, 3]; say 1 for $a

[15:00] <p6eval> nom: OUTPUT«1␤»

[15:01] <moritz> $a as a scalar does not flatten, so you get only one iteration

[15:01] <JimmyZ> nom: my @a = [1,2,3]; my $a = [1,2,3];  say $a.perl; say @a.perl;

[15:01] <p6eval> nom: OUTPUT«[1, 2, 3]␤Array.new([1, 2, 3])␤»

[15:01] <im2ee> moritz, thanks again! :)

[15:02] <uvtc> nom: my @a = [1,2,3]; say @a[0]

[15:02] <p6eval> nom: OUTPUT«1 2 3␤»

[15:02] * moritz decommutes

[15:02] <uvtc> moritz, why does that output all three elements?

[15:03] <flussence> @a[0] is [1,2,3]

[15:03] <arnsholt> Becuase @a has a single element

[15:03] <flussence> it doesn't flatten because it's [] not ()

[15:03] <uvtc> (whoops, sorry -- he's decommuting) Thanks, flussence 

[15:04] *** Trashlord joined
[15:04] <uvtc> Would it be good practice to always use $ instead of @ for square bracket arrays?

[15:05] <TimToady> no

[15:06] <JimmyZ> nom: my @a = 1,2,3; say @a[2];

[15:06] <p6eval> nom: OUTPUT«3␤»

[15:06] <TimToady> but it's okay to write in the python subset of perl 6 :)

[15:06] <uvtc> Could someone please point me to a discussion of [] vs. () arrays in the synopses?

[15:07] <JimmyZ> uvtc: [] is a list, () is array

[15:07] <JimmyZ> irrc

[15:07] * JimmyZ hopes he is right :)

[15:07] <uvtc> Ah. From Perl 5, I recall that a "list" is what you have at runtime, whereas an array is what you have at compile time.

[15:10] <tadzik> JimmyZ: isn't that another way around

[15:10] <tadzik> ?

[15:11] * JimmyZ can't follow tadzik :(

[15:11] <flussence> nom: say [1,2,3].WHAT; say (1,2,3).WHAT;

[15:11] <p6eval> nom: OUTPUT«Array()␤Parcel()␤»

[15:12] <tadzik> yes, that

[15:16] <JimmyZ> nom: say ceiling(2.3 | 3.5 | 4.6)

[15:16] <p6eval> nom: OUTPUT«any(3, 4, 5)␤»

[15:16] *** uniejo_in_riga joined
[15:16] *** crked joined
[15:19] *** uniejo_in_riga left
[15:19] * uvtc would love to see a blog post that discusses the diffs between lists and arrays in Perl 6.

[15:20] <crked> 章亦春也在 

[15:20] <mberends> JimmyZ: () is for lists and [] is for  arrays, that is what is the other way round

[15:21] <tadzik> hopefully pmichaud++'s talk will explain something

[15:21] <JimmyZ> 章亦春 在这里？

[15:21] <crked> agentzh就是

[15:21] <JimmyZ> agentzh: 章亦春 你好

[15:21] <uvtc> tadzik: Alas, I'm not at YAPC EU.

[15:21] <JimmyZ> 章亦春 在这里 很久了，但几乎没有说过话

[15:21] <tadzik> uvtc: check out yapc.tv

[15:21] <uvtc> Does anyone know if any of the P6-related talks at YAPC will be...

[15:21] <agentzh> JimmyZ: hiya

[15:22] <mberends> uvtc: they will be... for sure

[15:22] <uvtc> tadzik: Thanks for the link.

[15:22] *** uniejo_in_riga joined
[15:23] <uvtc> mberends: will be looking for them, thanks

[15:23] <JimmyZ> agentzh: 你们做的量子统计不错，我一直在用，就是 晚上过了 0 点的时候， 昨天的数据一直为  0 

[15:23] *** M_o_C left
[15:23] <crked> yapc就要开了，新的rakudo还没出来，着急~

[15:23] <JimmyZ> agentzh: 你那个 LZSQL 开源了吗？

[15:24] <agentzh> JimmyZ: not yet

[15:24] <JimmyZ> agentzh: 有计划开源？

[15:24] <agentzh> JimmyZ: yes.

[15:24] <huf> seriously? even the '?' is different?

[15:24] <JimmyZ> agentzh: when?

[15:24] <huf> ;)

[15:24] <agentzh> JimmyZ: this is not perl 6-related btw :)

[15:25] <agentzh> JimmyZ: there's no ETA yet.

[15:25] <JimmyZ> agentzh: yes, but I don't know the other way to ask it 

[15:25] <agentzh> huf: yeah, it's different.

[15:26] <huf> oh well, TIL

[15:26] <JimmyZ> agentzh: please tell when it's open source, thanks

[15:26] <JimmyZ> crked: hello, also in taobao?

[15:26] <flussence> huf: it keeps all the glyphs within the same unicode plane, see

[15:26] <huf> flussence: and the advantage of that is?

[15:27] <flussence> I dunno, ask the Unicode people :)

[15:27] <huf> ah :D

[15:27] <huf> well, if we have poo, i dont think another dozen question marks will do any damage

[15:27] <crked> JimmyZ: No. I am a hardware developer focusing on cpu design and cryptography.

[15:30] * agentzh waves &

[15:33] *** daniel-s left
[15:35] *** agentzh left
[15:38] *** alester joined
[15:38] *** cognominal_ joined
[15:41] *** cognominal___ left
[15:43] *** uniejo_in_riga left
[15:43] *** envi_|2 left
[15:46] *** resetter joined
[15:47] <resetter> anyone know why perl might throw this error on running a script: "The getppid function is unimplemented at isrcore/shellz.pm line 55."

[15:48] <BinGOs> See perlport, http://p3rl.org/perlport, getppid is unimplemented on MSWin32 and RISC OS

[15:48] *** dorlamm joined
[15:49] <resetter> could i change it to make it run?

[15:49] <lucs> resetter: Um, this is the Perl6 channel you know.

[15:49] <BinGOs> depends how important being able to get the parent process ID is.

[15:49] <flussence> lucs: we're not picky who we help :)

[15:50] <resetter> its supposed to be crossplatform...

[15:50] <lucs> flussence: Ok :)

[15:50] <lucs> resetter: Yeah, but not crosslanguage :)

[15:50] <BinGOs> resetter: they didn't try hard enough.

[15:50] <resetter> mmm

[15:51] <mberends> resetter: there are more people in #perl who could possibly help

[15:51] *** noganex_ joined
[15:51] <lucs> resetter: Oops, I misusderstood your crossplatform comment, sorry.

[15:51] <resetter> mm. ill probably just run it in backtrack

[15:52] <resetter> bingos: pm?

[15:52] <BinGOs> No.

[15:53] <resetter> k

[15:54] *** noganex left
[15:54] *** resetter left
[15:59] *** tokuhirom left
[16:10] *** kaare_ left
[16:11] *** pernatiy left
[16:11] <TimToady> we're gonna try the hotel restaurant

[16:12] <TimToady> doubtless this network will kick me off again in the meanwhile...

[16:12] <TimToady> bbl &

[16:13] *** resetter joined
[16:15] <pmichaud> tadzik: ping

[16:15] <phenny> pmichaud: 11 Aug 20:26Z <quietfanatic> tell pmichaud timtoady says he's stuck in chicago because his plane broke down.

[16:15] <pmichaud> szabgab: ping

[16:15] <pmichaud> TimToady: ping

[16:16] *** MayDaniel_ left
[16:16] <pmichaud> TimToady: unping (you're off at a restaurant somewhere already)

[16:17] <resetter> can anyone tell me where this patch code should go>

[16:17] <resetter> ???

[16:17] <resetter> http://www.gossamer-threads.com/lists/engine?do=post_attachment;postatt_id=431;list=modperl

[16:19] <pmichaud> tadzik / szabgab :  jnthn/masak/pmichaud are out looking for dinner; was hoping to invite you but will catch you all later

[16:19] <[Coke]> resetter: I missed your context. what's the patch for?

[16:19] <pmichaud> gone to nom -- bbl

[16:19] <bbkr_> rakudo: say so "\x00" ~~ / <[\x00]>/ # why it doesn't match?

[16:19] <p6eval> rakudo 922500: OUTPUT«Bool::False␤»

[16:19] <[Coke]> again, this is the perl 6 channel; if you're running perl5 code, you probably want to start with #perl, not #perl6. 

[16:20] <TimToady> pmichaud: 

[16:20] <TimToady> the restaurant here is closed for private party

[16:20] *** resetter left
[16:20] <TimToady> so we're going out somewhere too...

[16:32] *** dorlamm left
[16:36] <im2ee> Someone is working on WWW::Mechanize for v6? :)

[16:42] <bbkr_> I don't think so. But IMO proper HTTP::Request/Response are required first, currently there is too much copy-pasting in web modules.

[16:45] *** envi joined
[16:46] <diakopter> .

[16:46] <phenny> diakopter: 12:27Z <TimToady> tell diakopter sure, I'm not going to be hacking on S02 the next couple days when I have to write a talk...

[16:47] <diakopter> TimToady: I fixed the smartlinks you and I broke

[16:47] <diakopter> and a bunch of others that had bitrotten

[16:56] <bbkr_> rakudo: pack("V", -1).contents.perl.say # does this work properly on signed values by mistake? "V" was meant for unsigned values in P5. I'm asking because I use it in https://github.com/bbkr/BSON (one step closer to mongoDB driver!) and I do not want to rely on hacks that may change.

[16:56] <p6eval> rakudo 922500: OUTPUT«[255, 255, 255, 255]␤»

[17:05] *** Chillance joined
[17:10] <mberends> bbkr_: yes it works by mistake, more correct would be to throw an exception because the parameter is out of bounds.

[17:13] <bbkr_> mberends: thanks. so I have to watch spec/implementation changes for now, since "i" directive is NYI.

[17:13] <mberends> aye

[17:28] *** fbass joined
[17:28] *** fbass left
[17:39] *** impious joined
[17:45] <alester> Gotta have LWP for Perl 6 first. :-)

[17:46] *** JimmyZ left
[17:47] *** JimmyZ joined
[17:50] <tadzik> o/

[17:50] <colomon> \o

[17:51] <mberends> o/

[17:51] <tadzik> pmichaud: we're in some kabuki place, japanese/italian, we have szabgab, rafl, litchkind, wendy, liz and lots of other people in here

[17:52] * mberends greets @all

[17:52] <tadzik> mberends: hiya :)

[17:53] <tadzik> with you were here!

[17:55] * mberends wishes too, but has a visit to moritz++ scheduled for Sun-Tue as a fairly nice consolation

[17:56] <tadzik> not bad! :)

[17:58] *** worr joined
[18:00] <moritz> nom: say Routine ~~ Block

[18:00] <p6eval> nom: OUTPUT«Bool::True␤»

[18:06] <moritz> nom: gather for 1..10 { take 1; die 1 };

[18:06] <p6eval> nom:  ( no output )

[18:06] <moritz> nom: sink gather for 1..10 { take 1; die 1 };

[18:06] <p6eval> nom: OUTPUT«1␤  in sub die at src/gen/CORE.setting:371␤  in block <anon> at /tmp/J_0l1pFxnM:1␤  in block <anon> at src/gen/CORE.setting:3193␤  in method reify at src/gen/CORE.setting:3177␤  in block <anon> at src/gen/CORE.setting:3106␤  in block <anon> at src/gen/CORE.setting:3102␤  in …

[18:14] <moritz> I'm about to filter out all blocks from the setting

[18:16] *** uvtc left
[18:23] <TimToady> hmm, technically speaking, the user's code is one of the blocks in the setting... :)

[18:28] *** JimmyZ left
[18:30] <moritz> well, eventually i want to mark the mainline with an annotation

[18:30] <moritz> so that I can identify it, and show it as 'mainline' in the backtrace

[18:31] *** MayDaniel joined
[18:32] <dalek> rakudo/nom: 6e22b91 | moritz++ | src/core/BackTrace.pm:

[18:32] <dalek> rakudo/nom: refactor BackTrace a bit, hide non-Routines in the setting by default

[18:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6e22b9191e

[18:38] <TimToady> well, the user's outermost block is supposed to be marked with UNIT

[18:38] <TimToady> niecza: my $x = 42; say UNIT::<$x>

[18:38] <p6eval> niecza v8-51-g785e335: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/g71FhpsOV3 line 1:␤------> [32mmy [33m⏏[31m$x = 42; say UNIT::<$x>[0m␤␤42␤»

[18:38] <TimToady> hmm, thought that would work

[18:39] <TimToady> oh, it did work

[18:39] <TimToady> it's the warning that is bogus

[18:39] <TimToady> or not, depending on how you look at it

[18:39] *** uniejo_in_riga joined
[18:42] <moritz> well, rakudo doesn't do that yet :/

[18:44] <moritz> TimToady: I noticed that in roast some multi candidates are marked as # OK not used

[18:44] <TimToady> niecza: my $x = 42; say UNIT::<$x>; # OK not used

[18:44] <p6eval> niecza v8-51-g785e335: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/emo3xbDiyq line 1:␤------> [32mmy [33m⏏[31m$x = 42; say UNIT::<$x>; # OK not used[0m␤␤42␤»

[18:44] <TimToady> I guess that's just in s

[18:44] <TimToady> STD

[18:44] <moritz> oh wait, maybe it's the parameters that are not used

[18:44] <TimToady> std: my $x = 42; say UNIT::<$x>; # OK not used

[18:44] <p6eval> std 516268a: OUTPUT«ok 00:01 121m␤»

[18:44] <moritz> then it's not bogus

[18:45] <TimToady> std: my $x = 42; say UNIT::<$x>;

[18:45] <dalek> rakudo/nom: 537bd91 | Coke++ | tools/update_passing_test_data.pl:

[18:45] <dalek> rakudo/nom: remove unused import, var.

[18:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/537bd9199a

[18:45] <p6eval> std 516268a: OUTPUT«ok 00:01 121m␤»

[18:45] <TimToady> std only warns in subs, I think

[18:46] <TimToady> std: sub foo { my $x = 42; say MY::<$x>; }

[18:46] <p6eval> std 516268a: OUTPUT«ok 00:01 122m␤»

[18:46] <TimToady> std: sub foo { my $x = 42; }

[18:46] <p6eval> std 516268a: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/dQiglrWb7Y line 1:␤------> [32msub foo { my $x[33m⏏[31m = 42; }[0m␤ok 00:01 121m␤»

[18:46] <TimToady> std: sub foo { my $x = 42; }; # OK not used

[18:46] <p6eval> std 516268a: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/noOlCbwBEE line 1:␤------> [32msub foo { my $x[33m⏏[31m = 42; }; # OK not used[0m␤ok 00:01 121m␤»

[18:47] <TimToady> std: sub foo { my $x = 42; # OK not used␤}

[18:47] <p6eval> std 516268a: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/EjevnfPduu line 1:␤------> [32msub foo { my $x[33m⏏[31m = 42; # OK not used[0m␤ok 00:01 121m␤»

[18:47] <TimToady> huh

[18:47] <TimToady> maybe that's broken

[18:48] *** birdwindupbird joined
[18:49] *** chadadavis joined
[18:51] <bbkr> is Int always 4 bytes long in P6, even if built on 64bit architecture?

[18:51] <moritz> bbkr: Int is arbitrary size

[18:51] <moritz> bbkr: it's just Rakudo that doesn't implement that yet

[18:51] <TimToady> std: sub foo { my $x = 42; }; #OK not used

[18:51] <p6eval> std 516268a: OUTPUT«ok 00:01 121m␤»

[18:51] <TimToady> doesn't want a space before OK

[18:53] <bbkr> moritz: thanks for info

[18:53] <TimToady> perl6: say 2 ** 3 ** 4

[18:53] <p6eval> rakudo 922500: OUTPUT«2.41785163922926e+24␤»

[18:53] <p6eval> ..pugs, niecza v8-51-g785e335: OUTPUT«2417851639229258349412352␤»

[18:55] *** MayDaniel left
[18:56] <Tene> bbkr: Int, with a capital I, is the arbitrary-size integer type.  int, with a lowercase i, is whatever the native machine int is.

[18:56] <TimToady> and you're supposed to be able to ask for int64, even on 32-bit arch

[18:57] <TimToady> in fact, Rat is defined as Int / uint64 basically

[18:58] <Tene> afaict, there's no actual spec for int64 as a type in S02; it's only used implicitly by derived types

[18:58] <colomon> is uint mentioned anywhere other than the Rat definition?  ;)

[18:59] <colomon> ah, yes, under Native Types

[18:59] <Tene> colomon: it's mentioned in the Buf definition, and "uint" is specced as a type in native types

[18:59] <moritz> S09 mentions uint{1,2,4,8,16,32,64,128}

[19:00] <Tene> also blob, bag, keybag, 

[19:00] <moritz> and S02:1194 defines uint itself

[19:00] <Tene> Oh, http://perlcabal.org/syn/S09.html#Sized_types

[19:00] <Tene> I'm surprised to find that in S09 instead of S02

[19:01] <bbkr> thanks everyone for info. helpful as always.

[19:01] <moritz> well, I'm kinda surprised that so much that should be in S09 is actually in S02

[19:01] * bbkr is back to fighting with pack() to not let Mongo driver slack :)

[19:04] <TimToady> well, I'm surprised that S09 says we don't have to support int64 on a 32-bit machine...

[19:05] <TimToady> that is somewhat in conflict with requiring 64-bit support for Rat

[19:06] <Tene> TimToady: I hear we're pretty liberal with commit bits these days.

[19:06] <TimToady> I never spec while jetlagged...

[19:06] <colomon> to be fair, uint64 support for Rat.  dunno if that's better or not...

[19:08] <TimToady> well, Rat could always emulate the 64-bit limit using Int and comparsions

[19:08] <TimToady> and if you have Int anyway, you can always emulated any int size once you have conversion to and from the storage type

[19:09] <TimToady> it just might not be too fast

[19:10] <colomon> which would defeat the purpose of the Rat definition, no?

[19:11] *** uniejo_in_riga left
[19:15] <TimToady> depends on whether you think the purpose of Rat is semantics or performance

[19:15] <TimToady> a truncating FatRat can completely emulate the semantics of Rat

[19:16] <colomon> I thought the semantic were chosen with performance in mind.  ;)

[19:17] *** uniejo_in_riga joined
[19:18] <TimToady> it might not differ much if there's an easy way to check whether the denominator has overflowed, as long as you don't actually overflow

[19:19] <TimToady> and I'd even imagine some implementations it could be faster to emulate with FatRat, if the impedence match between Int and uint64 is big enough

[19:19] <TimToady> but that's kinda outside the scope of what we can spec

[19:22] *** cotto left
[19:22] * TimToady had better try to sleep now

[19:22] <TimToady> 'z' xx *

[19:27] *** soh_cah_toa joined
[19:43] *** uniejo_in_riga left
[19:45] *** uniejo_in_riga joined
[19:45] * [Coke] sees nom has started saying "SORRY!" a lot.

[19:46] * [Coke] thought the entire spec was written while "morally" jetlagged!

[19:52] *** masak joined
[19:52] <masak> internets!

[19:52] <masak> \o/

[19:53] <masak> status update: all(masak, jnthn, pmichaud) are in Riga, and we've just had a nice meal at the sekkrit hidden Indian restaurant whose location we unfortunately cannot divulge at this point in time.

[19:54] <masak> rakudo: my $yytgyyhuhjyuuy6utgjuhfrgtfgtvcfggetd​frtdffvfffgffvdffhtyi8j56pogn6m7lyho; say 'alive'

[19:54] <p6eval> rakudo 922500: OUTPUT«===SORRY!===␤Confused at line 22, near "my $yytgyy"␤»

[19:54] <diakopter> odd

[19:54] <masak> yeah.

[19:54] <masak> should work.

[19:55] <masak> nom: my $yytgyyhuhjyuuy6utgjuhfrgtfgtvcfggetd​frtdffvfffgffvdffhtyi8j56pogn6m7lyho; say 'alive'

[19:55] <p6eval> nom: OUTPUT«===SORRY!===␤Confused at line 1, near "my $yytgyy"␤»

[19:55] * masak submits rakudobug

[19:55] <masak> crked: thank your little brother from me!

[19:55] <masak> std: my $yytgyyhuhjyuuy6utgjuhfrgtfgtvcfggetd​frtdffvfffgffvdffhtyi8j56pogn6m7lyho; say 'alive'

[19:55] <p6eval> std 516268a: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused at /tmp/TIyeaFuRUe line 1:␤------> [32mmy $yytgyyhuhjyuuy6utgjuhfrgtfgtvcfggetd[33m⏏[31m​frtdffvfffgffvdffhtyi8j56pogn6m7lyho; s[0m␤    expecting any of:␤      POST␤   bracketed infix␤        constraint␤     infix or meta-infix␤   

[19:55] <p6eval> ..postfix␤        pos…

[19:56] <masak> oh!

[19:56] <masak> there's a small space there between the d and the f.

[19:56] <masak> it's really hard to spot.

[19:57] <masak> rakudo: my $yytgyyhuhjyuuy6utgjuhfrgtfgtvcfggetdfrtdffvfffgffvdffhtyi8j56pogn6m7lyho; say 'alive'

[19:57] <p6eval> rakudo 922500: OUTPUT«alive␤»

[19:57] <masak> that's better.

[19:57] <masak> nom: my $yytgyyhuhjyuuy6utgjuhfrgtfgtvcfggetdfrtdffvfffgffvdffhtyi8j56pogn6m7lyho; say 'alive'

[19:57] <p6eval> nom: OUTPUT«alive␤»

[19:57] <masak> .u ​

[19:57] <phenny> U+200B ZERO WIDTH SPACE (​)

[19:58] <masak> crked: your little brother had me there for a while :)

[19:58] <flussence> the one time my terminal's unicode-ness comes back to bite me :)

[19:58] * moritz hopes that masak unsubmits rakudobug

[20:01] *** PacoLinux left
[20:01] <masak> moritz: yes, it never got into the pipe, really. the rollback was sort of implicit. ;)

[20:03] *** uniejo_in_riga left
[20:03] * moritz is glad that masak++ has a transactional bug submission process

[20:04] * moritz would *really* love to be at tomorrow's p6 hackathon

[20:06] <masak> moritz: we would really love to have you here.

[20:08] <masak> std: my @a; say "@a["

[20:08] <p6eval> std 516268a: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse double quotes at /tmp/X4PsHW5O20 line 1:␤------> [32mmy @a; say "@a[[33m⏏[31m"[0m␤Couldn't find final '"'; gave up at /tmp/X4PsHW5O20 line 1 (EOF):␤------> [32mmy @a; say "@a["[33m⏏[31m<EOL>[0m␤Parse failed␤FAILE…

[20:11] <masak> std: my &f; say "&f("

[20:11] <p6eval> std 516268a: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse double quotes at /tmp/S62kNGoe4A line 1:␤------> [32mmy &f; say "&f([33m⏏[31m"[0m␤Couldn't find final '"'; gave up at /tmp/S62kNGoe4A line 1 (EOF):␤------> [32mmy &f; say "&f("[33m⏏[31m<EOL>[0m␤Parse failed␤FAILE…

[20:12] *** ncow joined
[20:12] *** fqi joined
[20:17] <ncow> can someone please explain how this is possible. I previous had tried to build rakudo-star 2011.01 on a PII 400mhz with 256mb ram, it took days and day and I eventually gave up after 10 days. I recently moved the drives from that system to a P4 2.4ghz with 4 gigs of ram, and just built 2011.07 and it only took 10 minutes (for the 'make' part, the configure part took about 6 min)

[20:17] *** szr joined
[20:18] <ncow> can someone please explain how this is possible. I previous had tried to build rakudo-star 2011.01 on a PII 400mhz with 256mb ram, it took days and day and I eventually gave up after 10 days. I recently moved the drives from that system to a P4 2.4ghz with 4 gigs of ram, and just built 2011.07 and it only took 10 minutes (for the 'make' part, the configure part took about 6 min)

[20:18] <ncow> (sorry for dupelicate)

[20:18] <masak> phenny: tell pmichaud that it would seem that the bug we discussed at the restaurant (backtracking over code that registered types, etc) isn't producible because postcircumfixes in strings have to be matched. unless I'm missing something.

[20:18] <phenny> masak: I'll pass that on when pmichaud is around.

[20:18] <ncow> how is this possible

[20:18] <ncow> is it ram related?

[20:18] <masak> ncow: yes, very much so.

[20:18] <masak> ncow: basically anything with .5 Gb or less will make the computer swap horribly.

[20:19] <ncow> seriously, on the old box, it was still going at 10 days in, after transplanting the same drives to the new box (so same system, new hardware) 

[20:19] <ncow> from 10+ days, to 10 minutes, holy crap is all I can think

[20:20] <ncow> I know the other box didn't exactly have a lot of ram (256 physical + 512 swap) but how can that be such a differernce?

[20:20] <ncow> I mean I was able to build anything else just fine on it

[20:21] <ncow> glibc, gcc, binutils (complete tool chains), building Perl5, PHP, Ruby, etc etc, never a proble. Not fast, but it nothing that took longer than a day...)

[20:21] <moritz> ncow: the garbage collector also got a lot better between .01 and .07, iirc

[20:21] <moritz> (parrot's garbage collector, that is)

[20:21] <ncow> moritz: ah

[20:21] <ncow> so it's also differences between versions

[20:21] <moritz> versions and RAM probably make the biggest difference

[20:21] <ncow> (yeah, obvious this wasn't a true 1:1 comparison, as the versions were different, I understand, but still)

[20:21] <moritz> processor speed less

[20:22] <fqi> does not cpu speed also help in building most things from source?

[20:22] <fqi> I'd think going from a 400 mHz cpu to a 2.4 gHz would make _some_ difference in and of itself

[20:22] <moritz> fqi: it helps, but it doesn't account for several orders of magnitues, just one

[20:22] <flussence> a 10GHz processor won't help if half your working set is in swap

[20:22] <ncow> yeah, but I agree RAM is the bigger impact, at least in this case

[20:23] <moritz> *magnitudes

[20:23] * moritz -> sleep

[20:23] <fqi> flussence: true

[20:23] <moritz> good localtime everybody

[20:23] <fqi> moritz: right

[20:24] <fqi> moritz: I don't doubt it's more to do with RAM brining a build time from over 10 days to 10 minutes. I'd be going holy sh*t too :)

[20:24] <masak> good * moritz

[20:25] *** xinming left
[20:26] *** xinming joined
[20:27] <[Coke]> we just started out slow so we could get faster.

[20:27] *** pmurias joined
[20:27] *** bluescreen10 left
[20:28] <ncow> well I'm just happy I can actually try rakudo now. I fear on the old box with only 256 megs of ram, it would have taken a friggin month to finish building

[20:28] <dalek> rakudo/nom: d3fbdcb | Coke++ | t/spectest.data:

[20:28] <dalek> rakudo/nom: run this fudged test.

[20:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d3fbdcb8b4

[20:28] <fqi> ouch

[20:28] <fqi> 10 days is pretty damn long for a 'make' I'd say

[20:30] <flussence> you can do most of the build there and build the .pbc files (the worst part) on any box, since they're not machine code

[20:30] <Tene> yeah, given the memory profile and behaviour of rakudo's build, especially back then, I'm not surprised.

[20:31] <flussence> try.rakudo.org runs off a 256MB VM for instance

[20:31] <Tene> It would have spent all of its time swapping

[20:32] <fqi> flussence: wow. yeah it runs, but I doubt it was built there

[20:34] <flussence> that's what I was saying :)

[20:34] <fqi> oh, right

[20:36] <Tene> the big issue with the rakudo build is that there's one step where a huge amount of code has to be compiled all at once.

[20:36] <Tene> try.rakudo.org is just compiling a few lines at a time

[20:37] <pmichaud> good evening, #perl6

[20:37] <phenny> pmichaud: 20:18Z <masak> tell pmichaud that it would seem that the bug we discussed at the restaurant (backtracking over code that registered types, etc) isn't producible because postcircumfixes in strings have to be matched. unless I'm missing something.

[20:38] <masak> which I might well be :)

[20:38] <pmichaud> I think that's what I meant by "once you're doing postcircumfixes, you're committed to matching them"

[20:38] <masak> oh!

[20:38] <pmichaud> that's what STD does now.  It didn't used to do that.

[20:39] <ncow> I'm just glad to be able to try out perl6/rakudo on my own system. One thing I noticed is, while  perl6 -e ' print 123; '  works,  perl6 -le ' print 123; ', tells me SORRY, "Unable to open filehandle from path '-le'"

[20:39] <jnthn> o/ #perl6

[20:39] <phenny> jnthn: 11 Aug 20:27Z <quietfanatic> tell jnthn timtoady says he's stuck in chicago because his plane broke down.

[20:39] <masak> pmichaud: I didn't realize that the restriction was in the parsing, as opposed to in a rule at the point of the backtracking that checked whether you had done anything naughty and failed if you had.

[20:40] <ncow> I know this isn't Perl5, but I'm really surprised they changed something like that

[20:40] *** envi left
[20:40] * jnthn had more fun that expected getting his laptop to like the hotel wifi...

[20:40] <Tene> Anyone here going to PPW this year?

[20:40] <flussence> ncow: -l is redundant. use say().

[20:40] *** bluescreen10 joined
[20:41] <pmichaud> Tene: I might make it to PPW

[20:41] <masak> flussence: that still doesn't autochomp, though.

[20:41] <flussence> oh

[20:41] <ncow> flussence: I know of say (from Perl5 too) but I'm still surprised.

[20:41] * masak likes -l

[20:42] <fqi> anyone who is used to running pre-Perl6 perl from the command-line will be acustomed to -l (as well as know of say most likely)

[20:42] * jlaire uses -le more often than -e

[20:42] <Tene> I'm thinking of trying to finally make it to a perl conference sometime this year.

[20:42] <fqi> jlaire: same here

[20:42] <flussence> (what's autochomp do in -l anyway?)

[20:42] * Tene uses -E more often than -e

[20:42] <Tene> Doesn't dismiss your point, but still

[20:42] <fqi> flussence: -l is for output, not input

[20:43] <fqi> Tene: right, -E is the same as -e, it just turns on all the extra features

[20:43] <fqi> in Perl5

[20:43] <Tene> Yes, and then I use 'say' instead of 'print'

[20:44] <masak> fqi: huh? -l is for both the input and the output.

[20:45] <jnthn> pmichaud: Wow, the Parrot release this month is actually this coming Tuesday.

[20:46] <pmichaud> jnthn: yeah

[20:46] * jnthn didn't realize it was that soon

[20:46] *** bluescreen10 left
[20:46] <pmichaud> depending on how things go tomorrow, we may just release nom on 3.7.0

[20:48] <diakopter> std: :2{0010_1110_1000_10}

[20:48] <p6eval> std 516268a: OUTPUT«[31m===[0mSORRY![31m===[0m␤Malformed radix number at /tmp/W5nu_5BdmY line 1:␤------> [32m:2[33m⏏[31m{0010_1110_1000_10}[0m␤Parse failed␤FAILED 00:01 117m␤»

[20:48] <diakopter> std doesn't yet support Blob literals I guess

[20:48] <masak> fqi: from perldoc perlrun: "It [-l] has two separate effects."

[20:48] *** chadadavis left
[20:50] <jnthn> pmichaud: *nod*

[20:50] <diakopter> masak: re Blob literals?

[20:50] <jnthn> pmichaud: We'll see :)

[20:50] * [Coke] is the release manager for parrot on Tuesday.

[20:50] <diakopter> perl6: :2{0010_1110_1000_10}

[20:51] <p6eval> pugs:  ( no output )

[20:51] <p6eval> ..niecza v8-51-g785e335: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Malformed radix number at /tmp/NdTzaVIPML line 1:␤------> [32m:2[33m⏏[31m{0010_1110_1000_10}[0m␤␤Parse failed␤␤»

[20:51] <p6eval> ..rakudo 922500: OUTPUT«===SORRY!===␤Malformed radix number at line 22, near "{0010_1110"␤»

[20:51] *** birdwindupbird left
[20:52] <pmichaud> time for another nap -- bbl

[20:53] <[Coke]> t/spec/S05-modifier/ii.t - we should break that loop up so we can properly todo the ones that need todoing and run the rest, elsewise we'll regress.

[20:53] <fqi> masak: I've never known -l in Perl to do anything other than force a line break with every print()

[20:53] <fqi> Perl5 at least

[20:53] <Tene> fqi: read perldoc perlrun

[20:54] <diakopter> pugs: say :2{0010_1110_1000_10}

[20:54] <p6eval> pugs: OUTPUT«101683␤»

[20:54] <Tene> fqi: do you ever use -p or -n?

[20:54] <fqi> right

[20:54] <fqi> Tene: yes, when I'm using Perl5 like sed

[20:54] <diakopter> phenny: ask TimToady STD doesn't seem to parse Blob literals (S02), but pugs does

[20:54] <phenny> diakopter: I'll pass that on when TimToady is around.

[20:55] <Tene> -l adds a chomp to -p and -n

[20:55] <fqi> I honestly never realized that

[20:56] <fqi> sort of like the inverse of what it does to output

[20:56] <Tene> Yeah.

[20:59] *** bluescreen10 joined
[21:03] <jnthn> sleep...hackathon tomorrow &

[21:04] <masak> fqi: maybe I'm very aware of it because the chomping was why I found and started to use -l.

[21:05] <diakopter> std: say :2(532)

[21:05] <p6eval> std 516268a: OUTPUT«ok 00:01 119m␤»

[21:06] <flussence> std: say :2('532') # does it treat strings different? curious

[21:06] <p6eval> std 516268a: OUTPUT«ok 00:01 120m␤»

[21:06] <flussence> guess not

[21:11] <fqi> flussence: I can't really tell what the output it supposed to be, looks like the eval bot uses a lot of utf-8 and not every client displays that correctly (or consistantly)

[21:12] <fqi> (imho that's not really a good way to go for an eval bot)

[21:12] <spetrea> looks like Santa should stay a little longer http://tinysong.com/g4eT

[21:13] <fqi> and if I try   perl6 -e ' say :2(532) '   just as you did above, I get "Invalid character (5)! Please try again :) "

[21:13] <mj41> Another one dashboard screenshot - Rakudo Commits history - http://bit.ly/qRPrLf 

[21:14] <fqi> flussence: so I'm not sure how that code even runs above

[21:14] <masak> fqi: this channel is explicitly utf-8-friendly. see /topic

[21:14] <mj41> More (Parrot, Niecza, ... ) on http://bit.ly/odLsOS 

[21:15] <fqi> masak: that's fine and all, I still wouldn't recommend using utf-8 decor in an eval bot. Looks at any other eval bot around freenode (#perl, #bash, ##javascript, for some examples), their putput is always clear and contains no decor or obstructions

[21:16] <fqi> masak: can you tell me please what  say :2(532)   above is supposed to be doing and why it doesn't work from the command-line

[21:16] *** bbkr left
[21:16] <masak> fqi: it's not decor, it's information.

[21:17] <masak> fqi: it doesn't work because 5, 3, and 2 aren't binary digits.

[21:17] *** bbkr joined
[21:18] <fqi> arrow chars and soem wierd characters around the end doesn't seem very informational

[21:18] <flussence> those are french quote symbols, they're in latin1.

[21:18] <fqi> masak: then why does the p6eval response about say "ok" (it's mixed in there with some utf8 and arrows

[21:19] <flussence> that's the output from std

[21:19] <fqi> it's not the arrows so much, but the utf8 chars that do not display correctly that's the problem

[21:20] <flussence> if it bothers you, fix your client :)

[21:20] <fqi> why does it say 'ok'  if it's not valid, as the command-line indicates

[21:20] <ncow> masak: fwiw, I'm using irssi with a utf8 capable font (and I can see most utf-8 just fine in most channels), but I see some weird chars near the closing double-arrow

[21:21] <ncow> overall that output looks very cryptic to me

[21:21] <ncow> I tried  say :2(532) on the commandline too and also got an error, so why doesn't that eval show an error too?

[21:21] <flussence> std != rakudo

[21:21] <fqi> seems to me the eval bot it rather broken if it doesn't error on that

[21:21] <ncow> what is std?

[21:22] <masak> fqi: because STD checks for syntactic correctness, not semantic correctness.

[21:22] <masak> ncow: that character is a symbol of a newline.

[21:22] <ncow> masak: well, it'd be nice if the output gave _some_ indication of that, especially so new people can get an idea for what the &#%@ is going on :)

[21:23] <masak> ncow: STD is Perl 6's standard parser. it is not a compiler.

[21:23] <fqi> but why would there be ANY symbol on a new line, if it's not valid code

[21:23] <fqi> oh

[21:23] <ncow> hmm

[21:23] <masak> granted, in this case, it could actually check.

[21:23] <diakopter> nom: say :2('0100101001011')

[21:23] <p6eval> nom: OUTPUT«===SORRY!===␤:base($number) conversion NYI␤»

[21:25] <ncow> masak: why  does it say base conversion error here, but from commandline I get:  perl6 -e ' say :2('0100101001011') ' => Invalid character (3)! Please try again :)

[21:25] <ncow> (and what's with the smiley face, heh)

[21:25] <diakopter> ncow: use double quotes in the inside

[21:25] <ncow> oops

[21:26] <sorear> ncow: the base conversion calculator was written by our youngest team member

[21:26] <ncow> well, with perl6 -e ' say :2("0100101001011") '  I get no error, it just prints 2379

[21:26] <diakopter> rakudo: say :2('0100101001011')

[21:26] <p6eval> rakudo 922500: OUTPUT«2379␤»

[21:26] <ncow> nom: say :2("0100101001011")

[21:26] <p6eval> nom: OUTPUT«===SORRY!===␤:base($number) conversion NYI␤»

[21:26] <ncow> what is nom?

[21:27] <ncow> and how do you do the same as 'nom:' and 'std:' from the commandline ?

[21:27] <masak> all good questions :)

[21:27] <sorear>  /sb end

[21:28] <masak> ncow: nom is a branch in the rakudo repository.

[21:28] *** fqi left
[21:28] <sorear> std: { my $x }; # OK not used

[21:28] <masak> ncow: you can switch to it by doing 'git checkout nom' on a rakudo git clone.

[21:28] <p6eval> std 516268a: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/6PaHvUfRWU line 1:␤------> [32m{ my $x[33m⏏[31m }; # OK not used[0m␤ok 00:01 119m␤»

[21:28] <sorear> std: { my $x }; #OK not used

[21:28] <p6eval> std 516268a: OUTPUT«ok 00:01 119m␤»

[21:28] <sorear> TimToady: you had an extra space

[21:29] <masak> ncow: http://github.com/perl6/std contains the source code for the STD parser.

[21:29] <ncow> you can't have a space after a comment character??

[21:29] <masak> ncow: there are instructions in the repository for how to build it.

[21:29] <masak> ncow: yes, you can.

[21:29] <masak> ncow: just not for warning suppressions.

[21:29] <sorear> ncow: #OK is a pragma thingy

[21:29] <ncow> oh

[21:29] <ncow> right

[21:29] <masak> ncow: I for one would also prefer a space there. but it's no big deal :)

[21:30] <ncow> ah

[21:30] <ncow> but if it's not a comment, perhaps it's better without a space

[21:30] *** fqi joined
[21:30] *** fqi left
[21:30] *** fqi joined
[21:31] <fqi> there finally

[21:31] <fqi> did freenode lagout for anyone else?

[21:31] <fqi> couldn't /part or /join or say anything for about 2 minutes

[21:31] <masak> no, all fine here.

[21:32] *** fqi left
[21:33] *** mj41 left
[21:33] *** impious left
[21:36] *** lumi_ left
[21:37] *** timbunce left
[21:39] <diakopter> std: say Q :regex /a/

[21:39] <p6eval> std 516268a: OUTPUT«Can't use string ("STD::Regex") as a HASH ref while "strict refs" in use at /usr/local/share/perl/5.10.1/CursorBase.pm line 549.␤FAILED 00:01 118m␤»

[21:39] <diakopter> o_O

[21:39] <masak> diakopter++

[21:39] <ncow> perl 5 ??

[21:39] <diakopter> yes, STD is in Perl 5

[21:40] <diakopter> runs on it, I mean

[21:40] <ncow> so you're using Perl5 to parse Perl6 ?

[21:40] <diakopter> the grammar is written in Perl 6

[21:40] <ncow> err what

[21:40] <masak> but gets translated back to Perl 5 so that it can be run.

[21:41] <ncow> so the bot is running Perl5 code, instead of using rakudo straight?

[21:41] <masak> STD shouldn't use Rakudo.

[21:41] <masak> it's a standard parser implementation.

[21:41] <masak> independent of Rakudo or any other compiler.

[21:41] <tadzik> o/

[21:41] <masak> tadzik! \o/

[21:41] <ncow> seems it's dependent on Perl5...

[21:41] <diakopter> phenny: tell TimToady try  std: say Q :regex /a/

[21:41] <phenny> diakopter: I'll pass that on when TimToady is around.

[21:41] <masak> tadzik: rumour has it we're in the same city...

[21:42] <tadzik> masak: yes, methinks so

[21:42] <masak> tadzik: how many Little Animal Farm games did you bring? :)

[21:42] <tadzik> masak: none :(

[21:42] <masak> oh man

[21:42] <ncow> masak: is that realted to Orwell at all?

[21:42] <tadzik> ncow: not at all

[21:42] <ncow> ok

[21:42] <masak> ncow: it even precedes it.

[21:43] <ncow> same idea though?

[21:43] <masak> nope.

[21:43] *** timbunce joined
[21:43] <masak> ncow: see https://github.com/masak/farm/blob/master/README.md

[21:44] <ncow> ok

[21:44] *** REPLeffect left
[21:44] <masak> tadzik: I'll bring it to the hackathon, and try to entice people to make a Perl 6 player. :)

[21:45] *** Psyche^ joined
[21:45] <tadzik> :)

[21:47] <tadzik> is the hackathon at the venue?

[21:47] *** ncow left
[21:48] *** Patterner left
[21:48] *** Psyche^ is now known as Patterner

[21:50] <masak> no, it's at Konventa Seta.

[21:52] <tadzik> I think it's more-less our hotel

[21:54] <masak> yes.

[21:54] <masak> just go into the yard, and then take a right.

[21:54] <tadzik> or not

[21:54] <tadzik> yeah, 240 meters or so

[21:58] *** alester left
[21:58] *** REPLeffect joined
[22:02] *** donri left
[22:02] <masak> 'night, #perl6.

[22:03] <masak> see you tomorrow for the hackathon :)

[22:03] *** noganex_ left
[22:03] *** masak left
[22:04] *** Moukeddar joined
[22:05] <Moukeddar> Hi o/

[22:06] *** noganex joined
[22:06] <crked> nom: say Q :regex /a/

[22:06] <p6eval> nom: OUTPUT«===SORRY!===␤Colons may not be used to delimit quoting constructs at line 1, near ":regex /a/"␤»

[22:07] *** hanekomu left
[22:12] *** drbean joined
[22:24] *** ZaphrodZenovka left
[22:29] *** cotto joined
[22:35] *** im2ee left
[22:38] <dalek> specs: 053cc49 | diakopter++ | S02-bits.pod:

[22:38] <dalek> specs: 47 new headings under S02 Literals

[22:38] <dalek> specs: review: https://github.com/perl6/specs/commit/053cc49977

[22:45] *** Limbic_Region joined
[22:45] <felher> Grammars rock. After just a few seconds Rakudo parsed my complete EPG File. :) (9576 seconds to be precise - But its still nice to see that Grammars work. :) )

[22:46] <diakopter> I read that as milliseconds at first

[22:48] <[Coke]> how many lines?

[22:48] <felher> diakopter: That would be nice. Alas, no, not yet. :)

[22:48] <felher> [Coke]: 217199

[22:49] *** cotto left
[22:49] *** wamba left
[22:54] *** lue joined
[22:54] <lue> hello planet o/

[22:55] <diakopter> ( )

[22:56] *** whiteknight joined
[22:57] <felher> o/

[22:59] *** cotto joined
[23:02] *** Moukeddar left
[23:04] *** cotto left
[23:05] <[Coke]> felher: I bet we could trim some of that down with an update to the grammar.

[23:05] <[Coke]> (avoiding backtracking, etc.)

[23:06] *** bbkr left
[23:06] <felher> [Coke]: I'm only using tokens, no single regex :)

[23:08] <felher> [Coke]: But if you want to take a look at the grammar, i'd be glad for any advice. :)

[23:13] *** pmurias left
[23:13] <felher> [Coke]: ( http://pastebin.com/mhZpmqVC )

[23:19] *** molaf__ joined
[23:19] *** timbunce left
[23:22] *** molaf_ left
[23:26] *** saaki left
[23:33] *** [Coke] left
[23:35] *** [Coke] joined
[23:44] *** soh_cah_toa left
[23:46] *** worr left
[23:47] *** worr joined
