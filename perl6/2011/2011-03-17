[00:14] *** PZt joined
[00:21] *** cosimo joined
[00:22] *** Solarion_ left
[00:22] *** Solarion_ joined
[00:22] *** Solarion_ is now known as Solarion

[00:28] *** Rotwang left
[01:01] *** woosley joined
[01:04] *** whiteknight left
[01:04] *** woosley left
[01:23] *** simcop2387 left
[01:24] *** simcop2387 joined
[01:53] *** jaldhar joined
[01:56] *** icwiener left
[02:14] *** acegrimm joined
[02:14] <acegrimm> aye 

[02:16] *** acegrimm left
[02:28] *** sufrostico joined
[02:36] *** lue left
[02:38] *** dsp_ left
[02:42] *** arlinius joined
[02:54] *** risou left
[02:55] *** risou joined
[03:24] *** agentzh joined
[03:42] *** ajs joined
[03:42] <ajs> evening all

[03:43] <sorear> good * #perl6

[03:48] *** satyavvd joined
[03:48] *** sufrostico left
[03:54] *** Holy_Cow joined
[04:12] <sorear> hello ajs

[04:13] <cognominal> does perl 6 supports what coffeescript calls destructuring assignment. It can be seen as a form of assignement on pattern matching.  http://jashkenas.github.com/coffee-script/

[04:14] <cognominal> it is a feature of javascript harmony btw.

[04:15] <sorear> rakudo: my [$x, $y] := [1,2]; say $y

[04:15] <p6eval> rakudo e3bd9a: OUTPUT«===SORRY!===␤Malformed my at line 22, near "[$x, $y] :"␤»

[04:16] <sorear> rakudo: my :([$x, $y]) := [1,2]; say $y

[04:16] <p6eval> rakudo e3bd9a: OUTPUT«===SORRY!===␤Malformed my at line 22, near ":([$x, $y]"␤»

[04:16] <sorear> rakudo: (-> [$x, $y] { say $y })([1,2]);

[04:16] <p6eval> rakudo e3bd9a: OUTPUT«2␤»

[04:16] <sorear> yes, but the parsing isn't fully implemented

[04:17] <cognominal> oh, I remember now. I already bug jnthn  on that

[04:17] <sorear> (I haven't actually looked at the link, I'm working from the Haskell definition of destructuring binders)

[04:17] <cognominal> and indeed, I was thinking haskell the first time I asked

[04:18] <cognominal> for lack of a Perl 6 with a javascript backend, coffeescript is pretty nice.

[04:19] <cognominal> and destructuring is pretty nice when extracting data from the DOM

[04:20] <sorear> perl 6 with a javascript backend would have far, far too much overhead

[04:20] <sorear> perl 6 is not designed to run on a specific VM

[04:20] <sorear> it doesn't elegantly map to Javascript primitives the way Javascript-based languages do

[04:22] <cognominal> When I reread myself I realize I speak english like Ali G. :(

[04:23] <sorear> Who?

[04:23] *** JimmyZ joined
[04:24] <sorear> Don't be so hard on yourself.  Your English is better than quite a few "native" speakers I know

[04:24] *** Su-Shee_ joined
[04:25] <cognominal> http://www.youtube.com/watch?v=fOIM1_xOSro  #  ali g interviews noam chomsky

[04:25] <JimmyZ> good afternoom, #perl6

[04:26] *** Su-Shee left
[04:30] *** cosimo left
[04:37] <sorear> hello JimmyZ

[04:42] *** sftp left
[04:45] *** noganex_ joined
[04:49] *** noganex left
[04:49] *** JimmyZ left
[05:01] <jdhore> OK, I am currently working on the release of Rakudo 2011.03

[05:04] <PerlJam> jdhore++

[05:19] *** am0c joined
[05:19] *** JimmyZ joined
[05:20] <JimmyZ> hi JimmyZ 

[05:20] <JimmyZ> er, hi sorear 

[05:35] *** donri left
[05:35] *** nymacro joined
[05:40] *** Holy_Cow left
[05:42] *** orafu left
[05:46] *** orafu joined
[05:48] <mberends> colomon: thanks, replied to Aaron Sherman's comment :)

[05:48] *** Holy_Cow joined
[05:52] <ajs> oh?

[05:55] <mberends> (the reply must be moderated before it appears publicly)

[05:55] <ajs> ah

[05:55] *** risou left
[05:55] *** risou joined
[05:55] *** Holy_Cow left
[05:55] <ajs> should I just keep reloading or does someone want to fill me in? ;)

[05:55] <mberends> commute &

[05:56] *** mberends left
[05:59] *** JimmyZ left
[05:59] <ajs> So, I've been  working on that... I found one bug that I think was causing some undue speedup (still getting right answers for the given inputs, but still a bug).

[05:59] <ajs> But it's still performing well

[06:04] <ajs> yeah, since I fixed the bug, I'm no longer beating colomon, but I'm still scaling decently.

[06:10] <jdhore> Are any rakudo people around?

[06:14] <jdhore> moritz_, please help

[06:23] *** lestrrat left
[06:23] *** alim joined
[06:24] *** lestrrat joined
[06:41] *** justatheory left
[06:42] *** shortcircuit left
[06:42] *** shortcircuit joined
[06:48] *** wtw joined
[06:49] *** Raynes left
[06:50] *** Raynes joined
[06:52] *** kaare_ joined
[06:54] *** dsp_ joined
[06:56] *** risou_ joined
[06:58] <colomon> jdhore: what's up?

[06:58] *** risou left
[06:58] <jdhore> I've got a failing test and i'm not sure what to do with it

[06:59] <jdhore> Test Summary Report

[06:59] <jdhore> -------------------

[06:59] <jdhore> t/spec/S02-builtin_data_types/instants-and-durations.t       (Wstat: 0 Tests: 13 Failed: 1)

[06:59] <jdhore>   Failed test:  13

[06:59] <colomon> that's okay, it's been an intermittent failure for a while

[07:00] <jdhore> so just ignore it?

[07:00] <colomon> yes

[07:00] <jdhore> OK

[07:02] *** fisted left
[07:06] <dalek> rakudo: e70f27d | jdhore++ | / (3 files):

[07:06] <dalek> rakudo: [release] Add announcement, update release gude and add myself to

[07:06] <dalek> rakudo: CREDITS.

[07:06] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/e70f27d6cd

[07:06] <dalek> rakudo: 5e60355 | jdhore++ | VERSION:

[07:06] <dalek> rakudo: [release] bump VERSION

[07:06] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/5e603555a2

[07:19] <jdhore> whoo

[07:19] <jdhore> Rakudo 2011.03 release complete!!!!

[07:19] <ajs> Wow, grats!

[07:20] <jdhore> thanks

[07:22] <colomon> \o/

[07:24] *** fisted joined
[07:25] *** Su-Shee_ is now known as Su-Shee

[07:28] *** dsp_ left
[07:32] <colomon> moritz_: Test 13 in S02-builtin_data_types/instants-and-durations.t isn't valid, at least as things are currently implemented in Rakudo.  $t1 - $t0 uses Real.Rat internally, which is only accurate to 1e-6.  So there's no reason to expect that $t0 + ($t1 - $t0) will equal $t1 exactly.

[07:38] *** dsp_ joined
[07:44] *** alim left
[07:45] *** Mowah joined
[07:48] *** fhelmberger joined
[07:48] *** fhelmberger left
[07:48] *** fhelmberger_ joined
[07:49] *** HarryS joined
[07:53] <moritz_> colomon: I think the test should be modified to allow a diff of 1e-6 or so

[07:54] <colomon> moritz_: IMO, it should probably use is_approx and call .x on both sides.

[07:58] <moritz_> or use rats consistently

[08:08] *** mtk left
[08:17] <tadzik> hello

[08:19] *** mtk joined
[08:19] <moritz_> jdhore++ # rakudo release

[08:19] <jdhore> moritz_, thanks, dude

[08:20] <moritz_> jdhore: how did you find the release process?

[08:21] <moritz_> any difficulties or time drains?

[08:22] <jdhore> Pretty easy, actually, the most annoying part was waiting for all the tests in "make stresstest" to run...I have 8-cores, but they didn't parallelize (i didn't try make -j8 stresstest though, so that would fix my only annoyance if that is possible)

[08:23] <moritz_> jdhore: ah, TEST_JOBS=8 and a sufficiently new Perl 5 Test::Harness would have helped (see README)

[08:23] <jdhore> ah

[08:24] <jdhore> I'd love to do it again though

[08:26] <moritz_> feel free to add your name to docs/release_guide.pod

[08:27] <tadzik> btw, didn't mberends appear twice in the announcement?

[08:28] <jdhore> tadzik, I don't think so, though he may have once by nick and once by real name

[08:28] <moritz_> such things happen

[08:28] <tadzik> yeah, that's what I mean. There's Martin Berends and there's martin :)

[08:28] <jdhore> nope, there's a martin and Martin Berends

[08:29] <jdhore> ah, I figured that may have been a different martin which is why i left it :)

[08:29] <tadzik> yeah. For me the hardest part was probably figuring out who is who in the contributors.pl output :)

[08:30] <jdhore> I think i'll go for my birth month (May) for the next release, but I could do April if no one volunteers by the time we near the release date.

[08:31] <moritz_> jdhore++

[08:31] <moritz_> good plan

[08:32] *** mj41_nb joined
[08:34] <dalek> rakudo: d8e5dec | jdhore++ | docs/release_guide.pod:

[08:34] <dalek> rakudo: Add myself as the release manager for the May release.

[08:34] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/d8e5dec1bf

[08:39] *** am0c left
[08:40] *** alim joined
[08:44] *** daxim joined
[08:49] <ajs> BBC headline: "Google buys Parrot to aid YouTube"

[08:50] <ajs> ;-)

[08:50] <ajs> http://www.bbc.co.uk/news/technology-12757153

[08:55] <jdhore> :D

[08:55] <tadzik> :)

[08:58] *** risou joined
[08:59] *** risou_ left
[09:09] *** eso4g3_ joined
[09:09] <eso4g3_> soy gayyy

[09:11] <jdhore> moritz_, do only R* releases get announced on rakudo.org? I just noticed that nothing was ever posted about 2011.02

[09:11] <moritz_> jdhore: yes, only R* releases

[09:11] *** eso4g3_ is now known as eso4g3

[09:11] <jdhore> ah

[09:11] <moritz_> people confuse compiler and distribution releases

[09:12] <moritz_> so we make the compiler releases less public

[09:12] <jdhore> Yeah, makes sense.

[09:12] <eso4g3> my mother fuck your father

[09:13] *** cjk101010 joined
[09:13] <tadzik> moritz_, can you?

[09:13] <jdhore> moritz_, wow, looking at the download stats of R and R*, that's...yeah...Pretty apparent :P

[09:13] *** eso4g3 left
[09:13] <tadzik> oh, nevermind

[09:19] *** pecastro is now known as pecastro|be-righ

[09:20] *** pecastro|be-righ is now known as pecastro-be-righ

[09:25] *** _twitch joined
[09:27] *** tzhs joined
[09:38] *** snearch joined
[09:57] *** am0c^ joined
[09:57] *** risou_ joined
[10:00] *** risou left
[10:09] *** am0c^ left
[10:30] *** am0c joined
[10:36] *** ab5tract joined
[10:57] *** dakkar joined
[10:59] *** risou joined
[11:00] *** risou_ left
[11:09] *** JimmyZ joined
[11:18] <tadzik> flussence_: could https://github.com/flussence/p6-misc/blob/master/indent.p6#L53 be just our Str multi method indent(0) ?

[11:18] <moritz_> tadzik: nope

[11:18] <tadzik> that's not the same, yeah

[11:18] <moritz_> indent(0)  boils down to (Int $ where 0)

[11:19] <moritz_> not to  ($ as Int where 0)

[11:19] <tadzik> so it protects us from indent("foo")

[11:19] <flussence_> yeah, I tried most of the easy-looking things already

[11:19] <moritz_> rakudo: multi f($ as Int where 0) { say "yes" }; f "a"

[11:19] <p6eval> rakudo d8e5de: OUTPUT«yes␤»

[11:20] <moritz_> flussence_: that's what you could use, if you don't like verbosity :-)

[11:20] <moritz_> rakudo: multi f($ where 0) { say "yes" }; f "a"

[11:20] <p6eval> rakudo d8e5de: OUTPUT«yes␤»

[11:20] *** wallberg joined
[11:20] <moritz_> works too, since smart-matching against a number automatically coerces

[11:21] *** Rotwang joined
[11:21] *** am0c left
[11:22] <moritz_> TiMBuS: could you please open a new pull request for your second IO::Socket::INET iteration patch?

[11:25] *** wallberg left
[11:26] *** Rotwang left
[11:27] <TiMBuS> moritz_, i guess so

[11:29] *** wallberg joined
[11:32] <TiMBuS> do you want me to merge it into a single patch or something?

[11:33] *** wallberg left
[11:33] <moritz_> that would make the review easier, yes

[11:34] *** snearch left
[11:36] <moritz_> rakudo: class dice { has $.eyes = (1..20).pick }; say dice.new.eyes

[11:36] <TiMBuS> well its probably just easier to compare the entire file before and after, in this case heh. but alright

[11:36] <p6eval> rakudo d8e5de: OUTPUT«15␤»

[11:36] <moritz_> rakudo: class dice { has $eyes = (1..20).pick }; say dice.new.eyes

[11:36] <p6eval> rakudo d8e5de: OUTPUT«Method 'eyes' not found for invocant of class 'dice'␤  in main program body at line 22:/tmp/sWvoOd4yqZ␤»

[11:42] *** wallberg joined
[11:48] <TiMBuS> ok moritz_ done. had a bit of trouble with git

[11:48] <TiMBuS> its all good now

[11:49] *** coldhead left
[11:50] <TiMBuS> but if you dodnt already know, you dont generally need a second pull request for the same branch. any new commits i make go into the topic

[11:54] <tadzik> how far is this from being spec-conformant?

[11:56] <moritz_> tadzik: a spec change away :-)

[11:57] <tadzik> hah :)

[11:57] <tadzik> I kinda expected that answer

[11:57] <moritz_> I don't even know if there's a spec

[11:57] *** bluescreen10 joined
[11:57] <moritz_> I tend to ignore much of the IO specs

[12:01] *** simon__ joined
[12:02] <simon__> Hey. I have some questions regarding the whatever star.

[12:03] <tadzik> go on

[12:03] <simon__> I understand it's a shortcut to make a closure

[12:03] <simon__> but sometimes it doesn't work like expected

[12:03] <simon__> for instance with the range operator

[12:03] <moritz_> simon__: it does't always construct a closure, some operators are special-cased

[12:04] <moritz_> for examply  my $x = *; assign a Whatever to $x, not construct a closure that assigns the argument to $x

[12:04] <moritz_> rakudo: say (1..*).max

[12:04] <p6eval> rakudo d8e5de: OUTPUT«Inf␤»

[12:04] <simon__> i see

[12:05] <simon__> what about inside the indexing brackets?

[12:05] <moritz_> in particular =, :=, .., ... and comma are special-cased

[12:05] <moritz_> (and maybe more)

[12:05] <simon__> seems like it refers to the itemcount there?

[12:05] <moritz_> simon__: indexing brackets are just a shortcut for a method call, they don't imply any special syntax

[12:06] <moritz_> @a[*] just passes a Whatever object to the postcircumfix:<[ ]> method

[12:06] <simon__> but you can do something like this: my @a = 1..5; say @a[1 .. *-1]

[12:06] <moritz_> simon__: you can, because - binds tigher than ..

[12:06] <moritz_> so * - 1 is a closure

[12:06] <moritz_> and thus 1 .. *-1 becomes a closure too

[12:07] <moritz_> even if 1 .. * does not

[12:07] <moritz_> (confusing, I know)

[12:07] <simon__> so [] can take a function as argument?

[12:07] <moritz_> yes

[12:07] <moritz_> rakudo: say (1, 2, 3).[-> $x { say $x; $x - 1} ]

[12:07] <p6eval> rakudo d8e5de: OUTPUT«3␤3␤»

[12:07] <simon__> i've also tried something like @a[1..*] which doesn't work. is this a bug?

[12:07] <moritz_> rakudo: say <a b >.[-> $x { say $x; $x - 1} ]

[12:07] <p6eval> rakudo d8e5de: OUTPUT«2␤b␤»

[12:07] <TiMBuS> thats why [1..*] currently goes forever in rakudo..

[12:08] <moritz_> simon__: yes, that should work too, but doesn't

[12:08] <moritz_> (known bug, and probably not easy to solve)

[12:08] <TiMBuS> i remember trying to patch that

[12:08] <TiMBuS> you gotta rewrite Range or add a parse rule

[12:09] *** satyavvd left
[12:09] <moritz_> simon__++ # asking good questions

[12:09] <simon__> if you give [] a function that takes multiple arguments, does it just plug in the itemcount for every one of them?

[12:09] <simon__> thanks ;)

[12:09] <moritz_> simon__: I think so, yes

[12:09] <moritz_> rakudo: say <a b c>.[* - *]

[12:09] <p6eval> rakudo d8e5de: OUTPUT«a␤»

[12:09] <moritz_> yes, it does :-)

[12:11] *** jeeger joined
[12:12] <tadzik> rakudo: say *-*

[12:12] <p6eval> rakudo d8e5de: OUTPUT«_block131␤»

[12:13] <moritz_> rakudo: say (*-*).signature.perl

[12:13] <p6eval> rakudo d8e5de: OUTPUT«_block131␤»

[12:13] <moritz_> oh ouch

[12:13] <moritz_> rakudo: say (my $ = (*-*)).signature.perl

[12:13] <p6eval> rakudo d8e5de: OUTPUT«:(;; Mu $x1, Mu $x2)␤»

[12:15] *** JimmyZ left
[12:19] *** Holy_Cow joined
[12:19] *** daxim left
[12:20] *** agentzh left
[12:23] <simon__> when @a[1..*] is fixed, is it gonna do @a[1 .. +*] or @a[1 .. *-1]?

[12:23] <moritz_> the latter (ie no trailing Any)

[12:25] *** leprevost joined
[12:29] *** am0c^ joined
[12:31] *** mj41_nb left
[12:32] <moritz_> TiMBuS: I'll apply your patch when I get home, and fix LWP::Simple afterwards

[12:46] *** mj41_nb joined
[12:52] *** mtk left
[12:52] *** mtk joined
[12:53] *** am0c^ left
[12:53] <simon__> how come this works? @a[*-5 .. *]

[12:53] <simon__> shouldn't *-5 .. * make a closure that takes one argument and makes a sequence from that argument - 5 to infinity?

[12:54] * moritz_ has no idea

[12:54] <tadzik> rakudo: say (*-5..*).perl

[12:54] <p6eval> rakudo d8e5de: OUTPUT«_block131␤»

[12:54] <tadzik> superb

[12:55] <tadzik> rakudo: say Range.new( from => *-5, to => *).perl

[12:55] <p6eval> rakudo d8e5de: OUTPUT«too many named arguments: 2 passed, 0 used␤  in main program body at line 22:/tmp/rkIibbM11f␤»

[12:55] <tadzik> rakudo: say Range.new(*-5, *).perl

[12:55] <p6eval> rakudo d8e5de: OUTPUT«{ ... }..Inf␤»

[12:55] <tadzik> rakudo: say Range.new(*-5, *).Num

[12:56] <p6eval> rakudo d8e5de: OUTPUT«Inf␤»

[12:57] <[Coke]> ~~

[13:05] *** mtk left
[13:05] *** [particle] joined
[13:05] *** jeeger left
[13:12] *** mtk joined
[13:12] *** simon__ left
[13:13] *** donri joined
[13:14] *** jeeger joined
[13:16] *** plainhao joined
[13:19] *** [particle] left
[13:22] *** _twitch left
[13:23] *** MayDaniel joined
[13:23] *** wallberg left
[13:24] *** sftp joined
[13:24] *** [particle] joined
[13:25] *** [particle] left
[13:33] *** MayDaniel left
[13:41] *** jaldhar left
[13:42] *** jaldhar joined
[13:43] <moritz_> brainstorming session! What project ideas could we offer for GSOC students?

[13:43] *** Lorn_ joined
[13:44] *** Lorn_ left
[13:44] *** Lorn left
[13:44] <flussence_> Improving printf-ish stuff?

[13:44] <moritz_> POD parser in rakudo is one

[13:45] *** Lorn joined
[13:45] <flussence_> rakudo: say printf('%2$s', 4, 3);

[13:45] <p6eval> rakudo d8e5de: OUTPUT«Not enough arguments supplied for the given format string␤  in 'Cool::sprintf' at line 2754:CORE.setting␤  in 'sprintf' at line 2788:CORE.setting␤  in 'IO::printf' at line 5575:CORE.setting␤  in 'printf' at line 5789:CORE.setting␤  in main program body at line

[13:45] <p6eval> ..22:/tmp/L65RXhNixk␤»

[13:45] <moritz_> is that supposed to work? :-)

[13:45] <flussence_> apart from the first two words being obviously wrong... :)

[13:46] <flussence_> it should do the same as what perl5 does

[13:47] *** kaare_ left
[13:53] <moritz_> other project ideas?

[13:55] *** [particle] joined
[13:55] <moritz_> modules that badly need porting? infrastructure tasks?

[13:56] <moritz_> tadzik: do you have some TODOs in Panda that would make a good GSOC project?

[14:00] <flussence_> would be nice if it was easier to relocate a rakudo --gen-parrot install

[14:01] <moritz_> that's mostly a parrot task, not a rakudo one

[14:01] <flussence_> or at least so the result of "make install" will keep working while I'm recompiling it...

[14:01] <moritz_> it does

[14:01] <moritz_> ... if you recompile into a different location :-)

[14:02] *** tty234 joined
[14:03] <tadzik> moritz_: oh, I guess whatever's on my mind I'll make it myself before GSoC starts :)

[14:04] <tadzik> maybe there's a task about creating an entire infrastructure, to CPAN and beyond :)

[14:06] <tadzik> besides, I'm probably going to apply too

[14:07] <moritz_> \o/

[14:08] *** [particle] left
[14:10] *** alester joined
[14:14] <tadzik> so I'm quite yooking forward to task ideas, as jnthn's one, being awesome, seems out of my skills range

[14:15] <moritz_> does Pod6 parsing in rakudo sound saner to you?

[14:16] <tadzik> I don't find that one insane :) But Pod parsind seems doable

[14:16] <tadzik> or the .WHY things

[14:16] <moritz_> well, the two are related

[14:17] <tadzik> aye

[14:17] <moritz_> you need to parse the Pod to attach it as .WHY

[14:18] *** icwiener joined
[14:19] *** mj41_nb left
[14:22] *** [particle] joined
[14:25] <flussence_> (if someone writes a Pod parser, I'll write a pod2html5 thing for it)

[14:26] <moritz_> web tools: cookie jar, HTTP request and response, ...

[14:27] *** colomon left
[14:28] <donri> isn't .WHY supposed to be unparsed?

[14:28] <moritz_> rakudo: sub f(::Int $x) { say Int.WHAT }; f("Foo")

[14:28] <p6eval> rakudo d8e5de: OUTPUT«Str()␤»

[14:28] <moritz_> rakudo: sub f(::Int $x) { say Int.WHAT }; f("Foo"); say Int.WHAT

[14:28] <p6eval> rakudo d8e5de: OUTPUT«Str()␤Int()␤»

[14:29] * moritz_ found a way to lexically rebind types :-)

[14:29] <moritz_> std: sub f(::Int $x) { say Int.WHAT };

[14:29] <p6eval> std 4608239: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/bGNp2OxR8q line 1:␤------> [32msub f(::Int [33m⏏[31m$x) { say Int.WHAT };[0m␤ok 00:01 122m␤»

[14:32] *** hercynium joined
[14:42] *** jeeger left
[14:51] *** pmurias joined
[14:52] *** JimmyZ_ joined
[15:00] <tadzik> moritz_: lokking at http://www.nntp.perl.org/group/perl.perl5.porters/2011/03/msg170045.html isn't the project ideas period over?

[15:01] *** justatheory joined
[15:01] *** risou_ joined
[15:01] *** risou left
[15:01] <moritz_> tadzik: notreally; it just seems too late to change the URL that's submitted to google

[15:02] <moritz_> tadzik: adding project ideas only becomes worseless once tasks are accepted/rejected

[15:03] *** sufrostico joined
[15:04] *** sufrostico is now known as Guest3473

[15:09] *** envi joined
[15:09] <ajs> Just had an interesting bug. Line of code used to contain "$a<foo>+$a<bar>". I made the two lookups local variables, but left one ">" so the code became: "$foo>+$bar" ... damn that was hard to find.

[15:10] *** domidumont1 joined
[15:10] <moritz_> rakudo: my $foo; my $bar; $foo>+$bar

[15:10] <p6eval> rakudo d8e5de: OUTPUT«Use of uninitialized value in numeric context  in <anon> at line 22:/tmp/jHkN43mavW␤Use of uninitialized value in numeric context  in <anon> at line 22:/tmp/jHkN43mavW␤»

[15:11] <moritz_> rakudo: my $foo = 1; my $bar = 2; $foo>+$bar

[15:11] <p6eval> rakudo d8e5de:  ( no output )

[15:11] <moritz_> rakudo: my $foo = 1; my $bar = 2; say $foo>+$bar

[15:11] <p6eval> rakudo d8e5de: OUTPUT«Bool::False␤»

[15:11] <moritz_> ajs: there are reasons why I recommend whitespace around infix operators

[15:12] <ajs> Yeah, I have an old habit of doing things like "if $a+$b == $c+$d" so that the two sides of the comparison are clear. I think I'm going to have to break that habit in Perl6....

[15:15] *** kaare_ joined
[15:18] <ajs> I think I'm going to take on writing a clone of Python's argparse for P6... I've always thought it had a lot going for it, but there are a couple things I wish had been designed very differently.

[15:19] *** wtw left
[15:19] <flussence_> rakudo: say [==] ([+] 2, 3), ([+] 1, 4)

[15:19] <p6eval> rakudo d8e5de: OUTPUT«Bool::True␤»

[15:19] <ajs> What is that, RP6N?

[15:28] *** mj41_nb joined
[15:30] <arnsholt> ajs: Perl 6 has quite powerful argument parsing built-in as well

[15:30] <ajs> I'm just interested in playing with an alternate approach is all

[15:31] <arnsholt> That's cool as well. Just in case you were looking for a Getopt for Perl 6 =)

[15:33] <ajs> One thing I like about argparse is that it's equally at home with something like the svn/git model (cmd options subcmd options) as it is with traditional unixish command-lines (cmd options rest)

[15:34] <ajs> It does this by treating the command-line like a function call, breaking it down into positional and named parameters.

[15:34] <moritz_> that's something that MAIN can't really do

[15:35] <moritz_> it can dispatch based on a string literal

[15:35] *** colomon joined
[15:35] <moritz_> but it can't distinguish general options from options to a subcommand

[15:37] <ajs> Anyway, I'll be toying with that later. Work now.

[15:38] *** am0c joined
[15:45] *** ymasory joined
[15:55] *** mj41_nb left
[15:57] *** colomon left
[15:58] *** tzhs left
[16:08] <TimToady> it would be fairly easy to preprocess the args into a form acceptable to MAIN, and the MAIN mechanism is designed to make such preprocessing easy, since the whole script runs first

[16:09] <moritz_> so it would just modify @*ARGS ?

[16:09] <TimToady> sure

[16:09] <TimToady> that's why MAIN is called from the end of the script

[16:10] <TimToady> might have to provide a way to modify USAGE though...

[16:10] <moritz_> there is one already :-)

[16:11] <TimToady> making sure that one can call the standard USAGE and massage that message

[16:12] <TimToady> maybe viewing a user-defined USAGE as some kind of a wrapper around the standard one

[16:12] <moritz_> well, according to current spec you can just use $?USAGE and massage it before printing it

[16:12] <TimToady> okay

[16:13] <moritz_> rakudo doesn't provide that yet, but it should be quite possible to do

[16:13] <TimToady> though there's something wrongish about that, since $? means a compile-time constant, and you couldn't know its value till the end of the file

[16:14] <TimToady> $?USAGE would have to imply a level of indirection to mean "the value it will have at CHECK time"

[16:14] <moritz_> sub USAGE { print massage $?USAGE }

[16:15] <moritz_> of course we could have a   my $*?USAGE = $?UAGE; in the setting implied, saving you the hassle to actually the print yourself

[16:15] <moritz_> but IMHO that's overkill

[16:15] <TimToady> alternately, maybe there's some way we can finesse MAIN parsing to allow application of destructuring to a field of options

[16:15] *** Guest3473 is now known as sufrostico

[16:16] <TimToady> sub MAIN ('command', { :$foo, :$bar }, 'subcommand', :$baz) {...}

[16:16] *** sufrostico left
[16:16] *** sufrostico joined
[16:16] <TimToady> but then you have to copy/paste all those, which is a violation of DRY

[16:17] <moritz_> TimToady: and jnthn would strangle you :-)

[16:18] <TimToady> or, we just baldly state that if the sigs contain a %hash, that's a subfield of switches managed positionally

[16:19] <TimToady> or we provide some way of saying 'don't treat subsequent switch fiels as named parameters yet'

[16:19] <TimToady> so it can be deferred to a submain function

[16:19] <moritz_> maybe abuse ;; for that?

[16:20] <TimToady> or \$capture

[16:20] <TimToady> or |$capture

[16:21] <moritz_> std: sub f($x, \$c) { }

[16:21] <p6eval> std 4608239: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/VwNYtNw8rd line 1:␤------> [32msub f([33m⏏[31m$x, \$c) { }[0m␤  $c is declared but not used at /tmp/VwNYtNw8rd line 1:␤------> [32msub f($x, \[33m⏏[31m$c) { }[0m␤ok 00:01 120m␤»

[16:21] <moritz_> rakudo: sub f($x, \$c) { say $x }; f 1, 2, 3, 4, :foo

[16:21] <p6eval> rakudo d8e5de: OUTPUT«Too many positional parameters passed; got 4 but expected 2␤  in 'f' at line 1:/tmp/DliJYJLMMU␤  in main program body at line 22:/tmp/DliJYJLMMU␤»

[16:22] <TimToady> something like that, but allow named params to be harvested before binding the remainder to $c

[16:22] <TimToady> rakudo: sub f($x, |$c) { say $x }; f 1, 2, 3, 4, :foo

[16:22] <p6eval> rakudo d8e5de: OUTPUT«1␤»

[16:22] <TimToady> yeah, |, not \

[16:22] <moritz_> rakudo: sub f($x, |$c) { say $x; say $c.perl }; f 1, 2, 3, 4, :foo

[16:23] <p6eval> rakudo d8e5de: OUTPUT«1␤\(2, 3, 4, "foo" => Bool::True)␤»

[16:23] <moritz_> \o/

[16:23] *** cjk101010 left
[16:23] <TimToady> but can you get at --foo if it's before?

[16:23] <moritz_> why not?

[16:23] <moritz_> oh

[16:23] <TimToady> more importantly, distingish pre-foo from post-foo

[16:23] <moritz_> I know why not

[16:24] <moritz_> positional before named, and all that

[16:24] <moritz_> seems that argument preprocessing is easier :-)

[16:25] <TimToady> or a rule that turns embedded switch fields into a {...}

[16:26] <TimToady> but only if the sigs have a {...} subfield

[16:26] <TimToady> or a %hash subfield

[16:27] <TimToady> could even be %*GLOBALOPTS as a parameter

[16:31] * TimToady is now thinking about protos that preprocess for their multis...

[16:32] <TimToady> not sure {*} gives us enough rope to rewrite the arguments though...

[16:33] <TimToady> won't fly unless proto MAIN can modify the args it feeds to {*}

[16:34] <TimToady> also, won't help if the switches have already been denatured before the proto sees it

[16:37] <TimToady> what it really comes down to is the 2-pass parsing problem, *again*...

[16:37] <TimToady> so me wonders if there's some way to make it a 1-pass parse

[16:40] <TimToady> something to think about in the shower &

[16:41] *** aindilis left
[16:48] *** ab5tract left
[17:01] *** ab5tract joined
[17:01] *** risou_ left
[17:01] *** risou joined
[17:01] *** alim_ joined
[17:02] *** alim_ left
[17:02] *** hudnix left
[17:03] *** am0c left
[17:04] *** hudnix joined
[17:04] *** alim left
[17:05] *** bluescreen10 left
[17:08] *** cdarroch joined
[17:08] *** cdarroch left
[17:08] *** cdarroch joined
[17:14] *** JimmyZ_ left
[17:23] *** shi joined
[17:23] *** shi left
[17:24] *** shi joined
[17:25] *** shi left
[17:26] *** shi joined
[17:26] *** shi left
[17:27] *** shi joined
[17:27] *** shi left
[17:28] *** shi joined
[17:28] *** bluescreen10 joined
[17:29] *** shi left
[17:30] *** shi joined
[17:31] *** shi left
[17:32] *** shi joined
[17:34] *** shi left
[17:35] *** shi joined
[17:35] *** impious joined
[17:35] *** shi left
[17:36] *** shi joined
[17:37] *** shi left
[17:37] *** shi joined
[17:42] *** shi left
[17:43] *** shi joined
[17:43] *** shi left
[17:44] *** shi joined
[17:44] *** shi left
[17:45] *** shi joined
[17:46] *** shi left
[17:46] *** shi joined
[17:47] *** shi left
[17:48] *** shi joined
[17:48] *** tyatpi_ joined
[17:49] *** shi left
[17:50] *** shi joined
[17:50] *** shi left
[17:51] *** shi joined
[17:52] *** shi left
[17:52] *** shi joined
[17:53] *** shi left
[17:54] *** shi joined
[17:55] *** MayDaniel joined
[17:55] *** shi left
[17:56] *** shi joined
[17:57] *** shi left
[17:58] *** shi joined
[17:58] *** dakkar left
[17:58] *** shi left
[17:59] *** shi joined
[17:59] *** shi left
[18:00] *** shi joined
[18:01] *** shi left
[18:02] *** shi joined
[18:02] *** shi left
[18:03] *** shi joined
[18:03] *** risou_ joined
[18:03] *** shi left
[18:04] *** shi joined
[18:05] *** shi left
[18:05] *** MayDaniel left
[18:05] *** risou left
[18:05] *** shi joined
[18:06] *** shi left
[18:07] *** shi joined
[18:07] *** shi left
[18:08] *** shi joined
[18:09] *** shi left
[18:09] *** shi joined
[18:10] *** shi left
[18:11] *** shi joined
[18:11] *** shi left
[18:12] *** Hugmeir joined
[18:12] *** shi joined
[18:12] *** shi left
[18:12] <Hugmeir> rakudo: my $test = [\+] 1..10; $test.perl.say;

[18:13] <p6eval> rakudo d8e5de: OUTPUT«(1, 3, 6, 10, 15, 21, 28, 36, 45, 55)␤»

[18:13] *** envi left
[18:13] <Hugmeir> rakudo: my @test = [\+] 1..10; @test.perl.say;

[18:13] <p6eval> rakudo d8e5de: OUTPUT«[1, 3, 6, 10, 15, 21, 28, 36, 45, 55]␤»

[18:13] *** masak joined
[18:13] *** shi joined
[18:13] <masak> halloj, zebras!

[18:14] *** shi left
[18:15] *** shi joined
[18:15] *** impious left
[18:16] *** shi left
[18:17] *** shi joined
[18:19] *** Holy_Cow left
[18:19] <Hugmeir> So alright, I'm kind of slow here. What does a triangle reduction return in scalar context?

[18:19] *** Holy_Cow joined
[18:19] *** shi left
[18:19] <masak> depends what you mean by scalar context -- we don't really have scalar contexts in the same way as Perl 5 does.

[18:20] *** plobsing left
[18:20] <masak> rakudo: my @a = 1..10; my @b = [\+] @a; say +@b

[18:20] <jnthn> The easy way to figure it out is to put .WHAT after the operation :)

[18:20] <p6eval> rakudo d8e5de: OUTPUT«10␤»

[18:20] *** shi joined
[18:20] <jnthn> rakudo: my $test = [\+] 1..10; $test.WHAT.say

[18:20] <masak> Hugmeir: but if you mean the above, it returns the length of the list, just like all other numifications of lists.

[18:20] <p6eval> rakudo d8e5de: OUTPUT«List()␤»

[18:20] <masak> jnthn! \o/

[18:20] <jnthn> masak! \o/

[18:21] *** shi left
[18:21] *** jevin left
[18:21] <Hugmeir> Stupid sexy context being contextual on the language it's used on. Who would've thought : )

[18:21] <masak> today's autopun spotting ^

[18:21] *** shi joined
[18:22] *** shi left
[18:23] *** shi joined
[18:24] <diakopter> hugme: hug Hugmeir 

[18:24] * hugme hugs Hugmeir

[18:24] <Hugmeir> Thnaks for the explanations! I meant it like in jnthn's message; assigning it to a scalar and asking .WHAT kindly did the trick.

[18:24] *** shi left
[18:24] <masak> ah. jnthn++

[18:25] *** shi joined
[18:25] <Hugmeir> jnthnn++ I guess. #perl6++ in general.

[18:27] *** shi left
[18:28] *** shi joined
[18:29] *** colomon joined
[18:29] *** shi left
[18:30] *** shi joined
[18:31] *** shi left
[18:32] *** shi joined
[18:32] *** shi left
[18:33] *** shi joined
[18:34] *** shi left
[18:34] *** Hugmeir left
[18:35] *** shi joined
[18:35] *** shi left
[18:36] *** [hercynium] joined
[18:36] *** [hercynium] left
[18:36] *** [hercynium] joined
[18:36] *** [hercynium] left
[18:36] *** shi joined
[18:37] *** shi left
[18:37] *** shi joined
[18:38] *** shi left
[18:39] *** shi joined
[18:39] *** hercynium left
[18:39] *** shi left
[18:40] *** shi joined
[18:41] *** shi left
[18:41] *** shi joined
[18:43] <pmurias> who started the hugging meme?

[18:44] *** Chillance joined
[18:44] <masak> pmurias: au.

[18:44] *** shi left
[18:44] *** Patterner left
[18:44] *** baest_ joined
[18:44] <pmurias> au?

[18:45] *** shi joined
[18:45] <PerlJam> pmurias: audrey

[18:45] <masak> http://pugs.blogs.com/audrey/2009/08/my-hobby-troll-hugging.html

[18:46] *** Psyche^ joined
[18:46] *** Psyche^ is now known as Patterner

[18:46] *** shi left
[18:47] *** shi joined
[18:47] *** shi left
[18:48] *** shi joined
[18:49] *** shi left
[18:50] *** shi joined
[18:50] *** shi left
[18:51] *** shi joined
[18:51] *** shi left
[18:52] *** bluescreen10 left
[18:52] *** shi joined
[18:53] *** bluescreen10 joined
[18:54] *** shi left
[18:54] *** colomon left
[18:55] *** shi joined
[18:55] *** shi left
[18:56] *** shi joined
[18:58] *** shi left
[18:58] *** pmurias left
[18:58] *** shi joined
[18:59] *** shi left
[19:00] *** shi joined
[19:00] *** shi left
[19:01] *** shi joined
[19:03] <tadzik> I think the "submethod BUILD { callsame; ... }" will become quite catchy

[19:03] <tadzik> why is that submethod anyway?

[19:04] *** risou joined
[19:05] <masak> because we don't want it to inherit?

[19:05] *** shi left
[19:06] *** shi joined
[19:06] *** risou_ left
[19:06] *** shi left
[19:07] <tadzik> I don't think I see the point... oh, so the BUILD in child will not override the parent one?

[19:07] *** shi joined
[19:07] <masak> right, all the BUILDs are meant to be called by BUILDALL.

[19:08] *** shi left
[19:08] <masak> (that way, you generally don't *have* to do 'callsame' in a BUILD)

[19:08] <tadzik> well, otherwise you don't get your attibutes

[19:08] *** shi joined
[19:09] *** shi left
[19:10] *** shi joined
[19:10] <masak> I don't think I understand. do you have an example handy?

[19:10] *** shi left
[19:11] *** shi joined
[19:12] *** shi left
[19:12] <tadzik> sure, gimme a sec

[19:12] *** shi joined
[19:13] *** shi left
[19:13] *** fhelmberger_ left
[19:14] *** shi joined
[19:14] *** shi left
[19:14] <tadzik> masak: see http://wklej.org/id/494717/

[19:14] <tadzik> see the effect, then see what happens when you remove the callsame()

[19:15] *** shi joined
[19:15] * masak reads

[19:15] *** shi left
[19:16] <tadzik> oh, the parent class is basically useless

[19:16] <tadzik> it's from the time I was implementing AFTERPARTY for Rakudo :)

[19:16] *** shi joined
[19:17] *** shi left
[19:17] <masak> ok, I see what the 'callsame' is doing, but I don't like it.

[19:17] <tadzik> I don't like it either

[19:17] *** shi joined
[19:17] <masak> ISTR someone suggested a change to object initialization recently that would make that go away.

[19:17] <tadzik> I prefer the Moose's way

[19:18] <masak> who was it, and what was the solution?

[19:18] <masak> was it mberends, in the living room, with the cudgel? :)

[19:18] *** benabik joined
[19:18] *** shi left
[19:18] <tadzik> (:

[19:19] <masak> the solution was something like "for each class, first initialize the attributes with their default values, then call BUILD"

[19:19] *** shi joined
[19:19] <masak> to me, that makes a lot more sense than having BUILD and attribute defaults compete.

[19:19] <masak> hm, but maybe that was just a bug in Rakudo...?

[19:19] *** shi left
[19:19] <tadzik> no, that's a spec thingy

[19:19] <masak> ok, then it officially sucks.

[19:19] <tadzik> and Larry agrees on the current behaviour

[19:20] <tadzik> I don't disagree

[19:20] <masak> Larry agrees that it should change, or agrees with Rakudo's current crappy handling?

[19:20] *** shi joined
[19:21] <tadzik> agrees with what the spec says, so "you write BUILD when you want to organize the attribute setting yourself"

[19:21] *** shi left
[19:21] <masak> :(

[19:21] <masak> what's Moose do?

[19:21] <tadzik> and if you want to have Moose-like behaviour, write stuff after bless in new

[19:21] <tadzik> hm?

[19:21] <masak> how does Moose do all this?

[19:21] *** shi joined
[19:21] <tadzik> well, BUILD is called after everything is set up and ready

[19:22] <masak> \o/

[19:22] <tadzik> that's the way I like it, and that's the way I expect it to work

[19:22] *** shi left
[19:22] <tadzik> I'm quite suprised Perl 6 is different

[19:22] <masak> it's not just you. it's not just me. it's a bunch of people in RT.

[19:23] *** shi joined
[19:23] *** shi left
[19:24] *** shi joined
[19:24] *** shi left
[19:25] *** shi joined
[19:26] *** shi left
[19:26] <masak> here's one argument against the behavior: (1) user reads list of attributes, sees the default initializations. makes conclusions. "aha, that attribute gets set to that value at object initialization. (2) user gets tired from reading lots of methods in the rest of the class. besides, the init bits were probably at the top anyway.

[19:26] *** alim joined
[19:26] <masak> (3) user misses BUILD halfway down the class. (4) BOOM

[19:27] *** shi joined
[19:27] <masak> and don't tell me programmer should've put BUILD further up. it's the language that shouldn't cause action at a distance without good cause.

[19:27] *** shi left
[19:28] *** shi joined
[19:28] <masak> even worse action-at-a-distance: make class do nifty new role. role does a bunch of other roles. somewhere, a role contains a BUILD submethod. BOOM, attributes no longer get initialized.

[19:28] *** shi left
[19:29] *** shi joined
[19:30] <masak> ss/ \(2/" (2/

[19:30] *** shi left
[19:31] *** shi joined
[19:32] *** shi left
[19:32] *** shi joined
[19:33] *** shi left
[19:34] *** shi joined
[19:34] *** shi left
[19:35] *** shi joined
[19:37] *** shi left
[19:37] *** pyrimidine left
[19:37] *** shi joined
[19:38] *** shi left
[19:39] *** shi joined
[19:39] *** shi left
[19:40] *** shi joined
[19:40] *** shi left
[19:41] *** shi joined
[19:42] *** shi left
[19:43] *** hercynium joined
[19:43] *** shi joined
[19:44] *** shi left
[19:45] *** shi joined
[19:45] *** shi left
[19:45] *** jaldhar left
[19:46] *** shi joined
[19:46] *** shi left
[19:47] *** shi joined
[19:48] *** shi left
[19:48] *** shi joined
[19:49] *** shi left
[19:50] *** shi joined
[19:50] *** shi left
[19:51] *** shi joined
[19:52] *** shi left
[19:52] *** shi joined
[19:53] *** stkowski joined
[19:53] *** shi left
[19:54] *** shi joined
[19:54] *** leprevost left
[19:56] *** shi left
[19:57] *** shi joined
[19:58] *** shi left
[19:59] *** shi joined
[20:00] *** colomon joined
[20:00] *** shi left
[20:01] *** shi joined
[20:01] *** shi left
[20:02] *** shi joined
[20:02] <masak> we need some conversation here to drown out shi's constant joining and leaving :)

[20:02] *** shi left
[20:03] <flussence_> that BUILD thing sounds like a good reason to have something like "does RoleName except qw(BUILD)"...

[20:03] *** shi joined
[20:04] *** shi left
[20:04] <flussence_> (or perhaps to beat whoever wrote the role over the head with a cluestick)

[20:04] *** shi joined
[20:05] <masak> both of those solutions are only workarounds to the real problem of BUILD canceling out the effect of attribute initialization.

[20:06] *** shi left
[20:06] *** plobsing joined
[20:07] *** shi joined
[20:07] *** shi left
[20:08] *** shi joined
[20:09] *** shi left
[20:09] <flussence_> I'm pretty sure the only time I've ever used BUILD was... using it wrong. Hmm.

[20:09] *** shi joined
[20:10] *** shi left
[20:11] *** shi joined
[20:11] *** shi left
[20:12] *** shi joined
[20:12] *** shi left
[20:13] *** shi joined
[20:14] *** shi left
[20:15] *** shi joined
[20:15] <masak> tadzik: three people had the same expectations: in June 2009, August 2009, and July 2010. http://rt.perl.org/rt3/Ticket/Display.html?id=68498

[20:15] *** shi left
[20:16] <tadzik> hah, I was almost expecting "and The Month of The Seeds, Anno Domini 1132"

[20:16] *** shi joined
[20:16] <masak> tadzik: it's your country that has those strange month names, not mine :P

[20:16] *** shi left
[20:16] <tadzik> lies! :)

[20:17] <masak> tadzik: by the way, your month names are totally charming. ;)

[20:17] *** shi joined
[20:17] <masak> "stitch-month"? priceless.

[20:17] <tadzik> Styczeń, Luty, Marzec, Kwiecień, Maj, Czerwiec, Lipiec, Sierpień, Wrzesień, Październik, Listopad and Grudzień? Seems pretty normal to me :)

[20:17] <masak> it stiches together the old year and the new one.

[20:18] *** shi left
[20:18] <tadzik> (:

[20:18] <masak> I bet there's a bunch of flowers and old leaves in there as well.

[20:18] *** shi joined
[20:18] <masak> is "Kwiecień" to do with flowers?

[20:19] *** shi left
[20:20] *** shi joined
[20:20] *** shi left
[20:20] <masak> ah yes, so it seems. and "Październik" is "flax month". you can just make this stuff up.

[20:20] <masak> can't*

[20:21] *** shi joined
[20:22] *** shi left
[20:22] *** shi joined
[20:23] *** shi left
[20:24] *** shi joined
[20:24] *** plobsing left
[20:24] *** shi left
[20:24] <masak> uh... and June is named after... an obscure insect?

[20:25] <tadzik> nope, I think that has something to do with flora again

[20:25] *** shi joined
[20:25] <tadzik> oh no, you're right

[20:25] <tadzik> a not-yet-bee

[20:25] *** shi left
[20:26] <masak> used to make a red dye of some kind.

[20:26] <tadzik> they used to make a red paint out of it, our Red is Czerwony

[20:26] <tadzik> yeah :)

[20:26] *** shi joined
[20:26] <masak> (Polish months)++ # making the Latin one's seem so boring!

[20:26] <masak> s/one's/ones/

[20:28] *** shi left
[20:28] *** y3llow_ joined
[20:28] *** pothos_ joined
[20:29] *** shi joined
[20:30] *** y3llow left
[20:30] *** pothos left
[20:30] *** shi left
[20:30] *** y3llow_ is now known as y3llow

[20:30] *** pothos_ is now known as pothos

[20:31] *** shi joined
[20:31] *** shi left
[20:32] *** shi joined
[20:33] *** shi left
[20:33] *** shi joined
[20:34] *** shi left
[20:35] *** shi joined
[20:35] *** shi left
[20:36] *** shi joined
[20:38] *** shi left
[20:38] *** plobsing joined
[20:39] *** shi joined
[20:39] *** shi left
[20:40] *** shi joined
[20:42] *** shi left
[20:42] *** shi joined
[20:43] *** shi left
[20:43] *** plobsing left
[20:44] *** shi joined
[20:44] *** shi left
[20:45] *** shi joined
[20:45] *** shi left
[20:46] *** shi joined
[20:47] *** shi left
[20:48] *** shi joined
[20:48] *** shi left
[20:49] *** shi joined
[20:50] *** shi left
[20:51] *** plobsing joined
[20:51] *** shi joined
[20:52] *** shi left
[20:52] *** sufrostico left
[20:52] *** shi joined
[20:53] *** sufrostico joined
[20:53] *** shi left
[20:53] *** sufrostico is now known as Guest32211

[20:54] *** shi joined
[20:54] *** shi left
[20:54] *** colomon left
[20:55] *** shi joined
[20:56] *** shi left
[20:56] *** ab5tract left
[20:57] *** shi joined
[20:58] *** shi left
[20:58] *** shi joined
[20:59] *** shi left
[20:59] *** Guest32211 left
[20:59] *** Guest32211 joined
[21:00] *** shi joined
[21:00] *** shi left
[21:01] <masak> dduncan's email to p6l is classic p6l material... but also kind of a nice idea. :) to me that'd be a kind of a lint-like tool, and thus not even an extension so much as a "third-party" binary/module.

[21:01] *** shi joined
[21:01] <masak> the prerequisite of such an idea is something PPI/STD-like, of course.

[21:02] <moritz_> which we have

[21:02] <moritz_> \o/

[21:02] <masak> :)

[21:02] <moritz_> will you write it (3rd party app), or should I?

[21:02] *** Guest32211 is now known as sufrostico_

[21:03] *** shi left
[21:03] <masak> please go ahead... and then reply to dduncan's email ;)

[21:03] <moritz_> uhm, I meant if I should write the reply :-)

[21:03] <masak> oh :P

[21:04] *** shi joined
[21:04] <masak> please go ahead and reply. I'm currently preparing for $teaching tomorrow.

[21:04] *** shi left
[21:05] <moritz_> what are you going to teach?

[21:05] *** shi joined
[21:05] *** shi left
[21:06] <jdhore> How to be Awesome 101

[21:06] <masak> first day of two was today. Android development.

[21:06] *** shi joined
[21:06] <masak> jdhore: I'll take that as a compliment. thank you ;)

[21:06] <jdhore> masak, ah, How to be Awesome 101 is next week?

[21:07] <masak> depends how you count the GoOpen talk in Oslo :)

[21:07] *** shi left
[21:07] <masak> it's named "Herding Cats and Robots" :)

[21:07] <jdhore> haha

[21:07] *** colomon joined
[21:07] <masak> and it's about you, #perl6!

[21:07] *** shi joined
[21:08] *** plobsing left
[21:08] <moritz_> I thought bacek was the robot, and he's mostly in #parrot :-)

[21:08] *** shi left
[21:08] <masak> dang, bacek is stealing my reputation of being a bot... :P

[21:08] * masak .oO( reverse Turing test... )

[21:09] *** shi joined
[21:09] *** Rotwang joined
[21:09] *** shi left
[21:10] *** shi joined
[21:10] *** ab5tract joined
[21:13] *** shi left
[21:14] *** [particle] left
[21:14] *** shi joined
[21:14] *** ashleydev left
[21:14] *** [particle] joined
[21:14] *** shi left
[21:15] *** shi joined
[21:15] *** fhelmberger joined
[21:16] *** shi left
[21:16] *** ashleydev joined
[21:16] *** Holy_Cow left
[21:16] *** shi joined
[21:17] <tadzik> can Rakudo compile STD.pm6?

[21:17] <moritz_> no

[21:17] <masak> it will be a fine day when it can.

[21:18] <masak> the turtles will laugh all the way down ;)

[21:18] <moritz_> :-)

[21:18] *** shi left
[21:19] *** shi joined
[21:19] *** shi left
[21:20] *** shi joined
[21:22] *** ashleydev left
[21:22] *** shi left
[21:22] <moritz_> rakudo: my $t = time; sleep 0.1 for ^10; say time - $t

[21:22] <p6eval> rakudo d8e5de: OUTPUT«1␤»

[21:23] *** shi joined
[21:23] *** shi left
[21:23] *** icwiener left
[21:24] *** shi joined
[21:24] *** coldhead joined
[21:24] *** shi left
[21:25] <dalek> roast: 15c1b74 | moritz++ | S32-io/IO-Socket-INET. (2 files):

[21:25] <dalek> roast: [socket] adapt to more p5 like IO::Socket::INET implementation

[21:25] <dalek> roast: review: https://github.com/perl6/roast/commit/15c1b74c8f

[21:25] *** shi joined
[21:26] *** shi left
[21:26] *** sufrostico_ is now known as Sufrostico

[21:27] *** shi joined
[21:27] *** Sufrostico left
[21:27] *** shi left
[21:28] *** shi joined
[21:28] *** shi left
[21:29] *** shi joined
[21:29] <tadzik> "one spec change away" :)

[21:30] *** shi left
[21:30] *** shi joined
[21:31] *** hercynium left
[21:31] *** shi left
[21:31] *** Mowah left
[21:32] *** shi joined
[21:32] *** shi left
[21:33] *** shi joined
[21:34] *** shi left
[21:34] *** benabik left
[21:34] *** shi joined
[21:35] *** bluescreen10 left
[21:35] *** shi left
[21:35] *** ashleydev joined
[21:36] *** shi joined
[21:36] *** shi left
[21:37] *** shi joined
[21:38] *** shi left
[21:38] <tadzik> moritz++ # nice

[21:38] <[Coke]> (duncan) looks like a great padre thing.

[21:38] * tadzik installs LWP::Simple with Panda

[21:39] *** shi joined
[21:39] <tadzik> oh, it fails the tests for me

[21:40] *** shi left
[21:40] <tadzik> moritz_: http://nopaste.snit.ch/38011

[21:41] *** shi joined
[21:41] *** shi left
[21:42] *** shi joined
[21:43] *** shi left
[21:43] *** Chillance left
[21:43] *** shi joined
[21:44] *** shi left
[21:45] *** shi joined
[21:45] *** shi left
[21:46] *** plobsing joined
[21:46] *** shi joined
[21:47] <moritz_> with newest rakudo?

[21:47] <tadzik> aye

[21:47] <tadzik> or, wait

[21:47] *** shi left
[21:47] <tadzik> ...how newest? Gimme a sec :)

[21:48] <moritz_> well, it needs 15c1b74

[21:48] <moritz_> the patch I just pushed

[21:48] *** shi joined
[21:48] <tadzik> This is Rakudo Perl 6, version 2011.02-55-ge3bd9aa

[21:48] <moritz_> ETOOOLD

[21:48] <moritz_> you're so last release

[21:49] *** shi left
[21:49] <tadzik> git pull => Already up-to-date.; make: Nothing to be done for `all'.

[21:49] * tadzik scrathes head

[21:49] <moritz_> don't forget "make install"

[21:49] <tadzik> did

[21:49] <tadzik> I don't see the patch in git log

[21:49] <jdhore> moritz_, so i didn't break things?

[21:49] *** shi joined
[21:49] <tadzik> did you really push it?

[21:50] <moritz_> oh

[21:50] <jdhore> oh, you were referring to the INET change?

[21:50] <tadzik> caught in the act! :)

[21:50] *** shi left
[21:50] <tadzik> jdhore: yes

[21:50] <jdhore> ah, I thought you were saying I broke something in 2011.03 :D

[21:50] <moritz_> tadzik: I tried, but got a [rejected]

[21:51] *** shi joined
[21:51] <tadzik> you're so pre-release :)

[21:51] *** shi left
[21:51] <tadzik> oh there it is

[21:52] *** shi joined
[21:52] <dalek> rakudo: 25e5bd0 | TiMBuS++ | src/core/IO/Socket/INET.pm:

[21:52] <dalek> rakudo: Changed IO::Socket::INET to act more like perl5's. One connection per object, acts a little more like a filehandle, and most importantly, actually works (the old code no longer connects).

[21:52] <dalek> rakudo: 

[21:52] <dalek> rakudo: Signed-off-by: Moritz Lenz [email@hidden.address]
[21:52] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/25e5bd04b4

[21:53] *** shi left
[21:54] *** shi joined
[21:54] <moritz_> TiMBuS++

[21:57] *** ashleydev left
[21:57] *** shi left
[21:57] *** ashleydev joined
[21:58] *** shi joined
[21:59] *** ymasory left
[22:00] <tadzik> ==> Succesfully installed LWP::Simple

[22:00] <tadzik> \o/

[22:02] *** shi left
[22:03] *** shi joined
[22:03] *** shi left
[22:04] *** shi joined
[22:05] *** shi left
[22:06] *** shi joined
[22:07] <tadzik> masak: Web.pm has some broken dependencies, doesn't it?

[22:08] <masak> likely.

[22:08] <masak> proabably simply bitrot.

[22:09] <tadzik> it could probably make use of HTTP::Server::Simple

[22:09] <masak> oh, indeed.

[22:10] <moritz_> ... which probably needs updating after last rakudo changes :-)

[22:10] <tadzik> oh crap :)

[22:10] <masak> the Perl 6 world has largely moved on without Web.pm.

[22:10] * moritz_ -> sleep

[22:10] * masak -> sleep

[22:10] <colomon> well, we need to fix that, then, no?

[22:10] *** masak left
[22:13] *** shi left
[22:15] *** tyatpi_ left
[22:32] *** plainhao left
[22:35] *** cdarroch left
[22:35] *** ab5tract left
[22:36] *** ab5tract joined
[22:37] *** jevin joined
[22:43] *** kaare_ left
[22:55] *** ab5tract left
[22:56] *** ab5tract joined
[23:10] <TimToady> tadzik: a role's submethods do not override a class's, so that problem doesn't arise with submethod BUILD

[23:10] *** ab5tract left
[23:10] <TimToady> phenny: tell masak a role's submethods do not override a class's, so that problem doesn't arise with submethod BUILD

[23:10] <phenny> TimToady: I'll pass that on when masak is around.

[23:14] *** alim left
[23:19] <tadzik> TimToady: I see

[23:23] *** stkowski left
[23:25] <tadzik> rakudo: use LWP::UserAgent:from<parrot>

[23:25] <p6eval> rakudo 25e5bd: OUTPUT«===SORRY!===␤Parent of 'PCT;Grammar' is null␤»

[23:25] <tadzik> that's funny

[23:26] <tadzik> rakudo: use LWP::UserAgent:from<parrot>; 1

[23:26] <p6eval> rakudo 25e5bd: OUTPUT«===SORRY!===␤Parent of 'PCT;Grammar' is null␤»

[23:26] <tadzik> rakudo: use LWP::UserAgent:from<parrot>; say 'alive'

[23:26] <p6eval> rakudo 25e5bd: OUTPUT«===SORRY!===␤Parent of 'PCT;Grammar' is null␤»

[23:34] *** mtk left
[23:36] *** fisted left
[23:37] *** cognominal left
[23:41] *** Rotwang left
[23:43] *** mtk joined
[23:43] *** fisted joined
[23:58] *** jevin left
