[00:04] <diakopter> sorear: cool :)  (unspace)

[00:05] *** bacek left
[00:06] <sorear> just checking if it works before I use it...

[00:07] *** shi left
[00:10] <dalek> sprixel: 9e487ae | diakopter++ | sprixel/ (7 files):

[00:10] <dalek> sprixel: new class/attributes/methods pass prepended/working.

[00:10] <dalek> sprixel: recursive/cross-referential (so-called "post-declared") working.

[00:10] <dalek> sprixel: admittedly not kosher Perl 6, but for this extremely tiny strict

[00:10] <dalek> sprixel: subset, it'll make writing/emitting efficient code much simpler.

[00:10] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/9e487aec89

[00:16] *** Chillance joined
[00:17] *** jhuni joined
[00:17] *** Kovensky left
[00:19] *** masonkramer left
[00:20] *** bacek joined
[00:23] *** rindolf joined
[00:24] <diakopter> cool, strongly typed Hash-es "just work"

[00:24] <diakopter> (translated to Dictionary<string, T>)

[00:24] <diakopter> that'll be good enough for now

[00:26] *** gbacon left
[00:26] *** jaldhar joined
[00:29] *** pumphaus1 is now known as pumphaus

[00:33] <sorear> push to github has stopped working.

[00:36] *** bacek_ joined
[00:36] <dalek> niecza: c9bdf1a | sorear++ | v6/ (2 files):

[00:36] <dalek> niecza: [v6] Translate final third of Metamodel

[00:36] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c9bdf1a5de

[00:39] *** bacek left
[00:41] <colomon> t/spec/integration/advent2009-day18....get_attr_str() not implemented in class 'Sub'

[00:41] <colomon> sorear: github has been dodgy all days.  give it a couple more tries.

[00:41] <colomon> (unless you already have, of course.)

[00:42] <colomon> Are other people getting the integration/advent2009-day18 error?  That's with jnthn's broken patch reversed.

[00:42] *** gbacon joined
[00:43] <colomon> gads, "all day".

[00:43] <colomon> I had about five failed pushes or pulls today.

[00:43] <colomon> Repeated efforts eventually worked, but it's still annoying.

[00:46] *** felliott left
[00:50] *** envi joined
[00:50] <sorear> niecza: sub foo() { say $*quux }; sub bar($*quux) { foo }; bar(15)

[00:50] <p6eval> niecza v1-35-gc9d17a7: OUTPUT«15␤»

[00:50] <flussence> colomon: I've got a clone of roast that fixes the day18 error

[00:51] <flussence> it's just a small typo

[00:51] <colomon> where is it?

[00:51] <flussence> https://github.com/flussence/roast

[00:51] <colomon> can you send me a patch?  ;)

[00:52] <colomon> contrawise, do you mind if I just duplicate the patch and give you credit in the commit?

[00:52] <flussence> yeah, sure

[00:53] *** xinming_ joined
[00:54] <dalek> roast: 12508e2 | (Solomon Foster)++ | integration/advent2009-day18.t:

[00:54] <dalek> roast: Switch dies_ok to eval_dies_ok, flussence++.

[00:54] <dalek> roast: review: https://github.com/perl6/roast/commit/12508e261a

[00:54] *** felliott joined
[00:54] <colomon> Hope that's okay.  :)

[00:54] <flussence> no problem :)

[00:56] *** xinming left
[00:56] *** felliott left
[00:57] *** rgrau left
[01:00] *** roen joined
[01:05] *** fIorz joined
[01:05] *** florz left
[01:07] *** fIorz left
[01:07] *** florz joined
[01:08] *** mikehh left
[01:22] <snarkyboojum> where does one get viv from these days?

[01:22] <snarkyboojum> all links pointing to https://github.com/perl6/mu/raw/master/src/perl6/viv 404

[01:27] <snarkyboojum> and hello :)

[01:28] *** QinGW joined
[01:29] *** s1n left
[01:30] <snarkyboojum> ah - found it at https://github.com/perl6/std :) perl6.org needs updating

[01:38] *** lamstyle left
[01:41] *** lamstyle joined
[01:42] *** bacek__ joined
[01:46] *** bacek_ left
[02:01] *** noganex_ joined
[02:02] <diakopter> my latest push's alert here is .. slow from github

[02:02] <diakopter> maybe I should convert it to sorear's push model

[02:04] *** noganex left
[02:07] <dalek> sprixel: e4063bc | diakopter++ | sprixel/src/ (3 files):

[02:07] <dalek> sprixel: made eval EXPR work inside methods & subs, enabling recursive

[02:07] <dalek> sprixel: nested string eval as a happy result.

[02:07] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/e4063bc6d4

[02:09] <colomon> rakudo: my $a = "This gf     gfg  a g    \t \t    gfgf".subst(/\s+/, " "); say $a

[02:09] <p6eval> rakudo de98d1: OUTPUT«This gf     gfg  a g                  gfgf␤»

[02:10] <colomon> global!

[02:10] <colomon> rakudo: my $a = "This gf     gfg  a g    \t \t    gfgf".subst(/\s+/, " ", :g); say $a

[02:10] <p6eval> rakudo de98d1: OUTPUT«This gf gfg a g gfgf␤»

[02:14] *** rindolf left
[02:15] <diakopter> rakudo: my $a = "This gf  \n\n   gfg  a g    \t \t    gfgf".subst(/\s+/, " "); say $a

[02:15] <p6eval> rakudo de98d1: OUTPUT«This gf  ␤␤   gfg  a g                        gfgf␤»

[02:15] *** bacek_ joined
[02:15] <diakopter> rakudo: my $a = "This gf  \n\n   gfg  a g    \t \t    gfgf".subst(/\s+/, " ", :g); say $a

[02:15] <p6eval> rakudo de98d1: OUTPUT«This gf gfg a g gfgf␤»

[02:15] <diakopter> rakudo: my $a = "This gf  \n\n   gfg  a g    \t \t    gfgf".subst(/\s+/, "", :g); say $a

[02:15] <p6eval> rakudo de98d1: OUTPUT«Thisgfgfgaggfgf␤»

[02:15] <diakopter> colomon: what about this gf? ;)

[02:16] <colomon> gfgag!

[02:18] <colomon> It's funny how often I forget the :g in subst.  I almost never want to do just a single substitution....

[02:18] <dalek> sprixel: 48ae9c0 | diakopter++ | / (7 files):

[02:18] <dalek> sprixel: implement the "_cc" special form for current continuation,

[02:18] <dalek> sprixel: though it's closer to current coroutine, until cloning can

[02:18] <dalek> sprixel: be ported back over from the old perlesque (maybe it won't).

[02:18] <dalek> sprixel: Also clean up the static/instance method resolution to use

[02:18] <dalek> sprixel: the runsharp library better.

[02:18] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/48ae9c038f

[02:19] *** bacek__ left
[02:21] <sorear> the old perlesque didn't have proper continuations, only coroutines

[02:25] <flussence> interesting rosettacode thing on /r/perl/ here, I might have a go at it... http://redd.it/evopg

[02:25] <diakopter> sorear: oh

[02:26] <diakopter> sorear: but.. I thought it had nearly all the full cloning necessary?

[02:26] <diakopter> (maybe you didn't know about it)

[02:29] <sorear> diakopter: no, it only cloned one deep

[02:30] <diakopter> hm, oh

[02:36] *** karb joined
[02:37] <snarkyboojum> ah - just realised that installing STD off CPAN obviates the need to know where viv is installed for the purposes of building Niecza :P

[02:37] * snarkyboojum bangs head against the README he didn't read properly

[02:38] *** masonkramer joined
[02:41] <flussence> small question for anyone: what's the simplest way to go from (1,2,3,4,5,6) to (1=>2, 3=>4, 5=>6)?

[02:42] *** yarp joined
[02:42] <masonkramer> same thing

[02:42] <masonkramer> => is a way of spelling ,

[02:42] <masonkramer> that happens to quote the LHS if it's a single token

[02:43] <masonkramer> if you mean you want a hash with 1 as the first key and 2 as the first value

[02:43] <masonkramer> my %h = (1,2,3,4,5,6)

[02:43] <masonkramer> hashes are created by assigning lists to a variable with a % sigil

[02:43] <flussence> I'm trying to get an array of Pairs

[02:43] *** jevin joined
[02:43] <masonkramer> oh...

[02:43] <masonkramer> damn..wrong channel

[02:43] <flussence> heh

[02:43] <masonkramer> sorry man

[02:43] <masonkramer> :)

[02:44] <snarkyboojum> rakudo: my @list = (1,2,3,4,5,6); say @list.hash.perl

[02:44] <p6eval> rakudo de98d1: OUTPUT«{"1" => 2, "3" => 4, "5" => 6}␤»

[02:44] <flussence> .hash outputs them in order on rakudo, but I don't think I can count on that behaviour

[02:46] <flussence> Oh.

[02:46] <flussence> .map(*=>*)

[02:46] <masonkramer> [=>] <1 2 3 4 5 6>

[02:46] <colomon> oh, bother.  just got a Null PMC working on p5.  :(

[02:47] <masonkramer> perl6: say [=>] <1 2 3 4 5 6>

[02:47] <p6eval> niecza v1-35-gc9d17a7: OUTPUT«===SORRY!===␤Action method prefix_circumfix_meta_operator__S_reduce not yet implemented at /home/p6eval/niecza/src/Niecza/Actions.pm line 55.␤Action method prefix_circumfix_meta_operator not yet implemented at /home/p6eval/niecza/src/Niecza/Actions.pm

[02:47] <p6eval> ..line 55.␤Che…

[02:47] <p6eval> ..pugs, rakudo de98d1: OUTPUT«1   2       3       4       5       6␤»

[02:47] <flussence> masonkramer: close, but that's (1=>(2=>...))))))

[02:47] <masonkramer> well, anyway, it works

[02:47] <masonkramer> is it?

[02:47] <masonkramer> I'll keep quiet now

[02:47] *** florz left
[02:47] <jasonmay> rakudo: (1,2,3,4,5,6).map(* => *).perl

[02:47] <p6eval> rakudo de98d1:  ( no output )

[02:47] <flussence> interesting answer though :)

[02:48] <snarkyboojum> that's cool :)

[02:48] <snarkyboojum> rakudo: say (1,2,3,4,5,6).map(*=>*).perl

[02:48] <jasonmay> rakudo: (1,2,3,4,5,6).map(* => *).perl.say

[02:48] <jasonmay> oops

[02:48] <p6eval> rakudo de98d1: OUTPUT«(1 => 2, 3 => 4, 5 => 6)␤»

[02:48] <snarkyboojum> jinx

[02:48] *** florz joined
[02:51] *** bacek_ left
[02:55] *** felliott joined
[02:55] *** karb left
[03:00] <snarkyboojum> flussence: by my reading of the synopses, it looks like .hash should work in order for a simple list like that

[03:01] <snarkyboojum> i.e the "hash contextualizer" section in S29

[03:05] *** bacek_ joined
[03:08] <lue> hello world o/

[03:08] <snarkyboojum> hi lue o/

[03:09] <colomon> \o

[03:10] * colomon had a beautiful long example work well for masak's p5, but a simple test case blows up my code.

[03:14] <colomon> huh.  Actually it seems to be the test which is blowing up.  Weird.

[03:15] <colomon> omg

[03:16] <colomon> rakudo:  my $a; say ">$a<"; say ">$a<";

[03:16] <p6eval> rakudo de98d1: OUTPUT«>Any() Any() Any()Any()<␤»

[03:16] <colomon> rakudo:  my $a = 10; say ">$a<"; say ">$a<";

[03:16] <p6eval> rakudo de98d1: OUTPUT«postcircumfix:<{ }> not defined for type Int()␤  in 'Any::join' at line 1␤  in 'Any::join' at line 1462:CORE.setting␤  in 'List::Str' at line 2748:CORE.setting␤  in 'Parcel::Str' at line 1399:CORE.setting␤  in main program body at line 1␤»

[03:16] <colomon> and there it is.

[03:16] <flussence> wtf

[03:17] <colomon> I think it's parsing that as $a<"; say ">

[03:17] <flussence> oh...

[03:17] <colomon> std:  my $a = 10; say ">$a<"; say ">$a<";

[03:17] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Unable to parse quote-words subscript; couldn't find right angle quote at /tmp/BalF0CqATO line 1:␤------> my $a = 10; say ">$a<"; say ">$a<⏏";␤    expecting escape␤Parse failed␤FAILED 00:01 122m␤»

[03:18] <flussence> yeah, now I remember masak's post about $var</a> doing that :)

[03:18] <lue> wow. That's... a surprise.

[03:18] <colomon> but Rakudo's error is LTA, and when the two say statements are twenty lines apart...

[03:20] <sorear> I suggest using qs""

[03:20] <colomon> will that help? 

[03:20] <colomon> In practice, I just switch say ">$a<" to say :$a.perl

[03:20] <colomon> the important bit was being able to see trailing whitespace.

[03:21] <colomon> std:  my $a = 10; say qs">$a<"; say qs">$a<";

[03:21] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Unable to parse quote-words subscript; couldn't find right angle quote at /tmp/5EWzcLrocN line 1:␤------> my $a = 10; say qs">$a<"; say qs">$a<⏏";␤    expecting escape␤Parse failed␤FAILED 00:01 122m␤»

[03:21] <lue> std: my $a = 10; say ">{$a}<"; say ">{$a}<";

[03:21] <p6eval> std 625303c: OUTPUT«ok 00:01 121m␤»

[03:22] <lue> That's a possible workaround.

[03:22] <flussence> I'm starting to have doubts about the usefulness of allowing interpolating <> directly inside "". The error's logical but it's very non-obvious...

[03:23] <lue> I would vote for printing what's in the string literally if interpolation fails (e.g. say ">$a<" would come out ">10<\n")

[03:23] <lue> rakudo: say "$a"

[03:23] <p6eval> rakudo de98d1: OUTPUT«===SORRY!===␤Symbol '$a' not predeclared in <anonymous> (/tmp/bzL3932pwT:22)␤»

[03:25] *** kraai_ joined
[03:26] <flussence> that's the problem; the line colomon showed *is* a valid interpolation (even if the result is useless to most people)

[03:28] <lue> what, the    $a<"; say ">    bit? I'd like to cry foul on that one, but I see why it happened.

[03:30] *** Guest40868 joined
[03:31] <flussence> someone could be using a weird hash key there, but there's no way for perl6 to know until it gets to that part of the code, and by then it's already decided how to parse it...

[03:33] *** jhuni left
[03:33] *** gbacon left
[03:34] <lue> my $a = 10; say "⟩$a⟨"; say "⟩$a⟨";

[03:34] <colomon> it's easy enough to work around, but it's a heck of a surprise when it happens.

[03:34] <lue> rakudo: my $a = 10; say "⟩$a⟨"; say "⟩$a⟨";

[03:34] <p6eval> rakudo de98d1: OUTPUT«⟩10⟨␤⟩10⟨␤»

[03:35] <lue> I'd say just use {} around the $a.

[03:35] *** bacek__ joined
[03:35] <colomon> right.

[03:36] *** Guest40868 left
[03:37] <colomon> okay, I have a working algorithm for masak's p5!  Needs massive cleaning, though.

[03:38] <colomon> time for bed.

[03:38] <sorear> bye

[03:38] *** bacek_ left
[03:39] *** yarp left
[03:42] *** karb joined
[03:44] *** helv joined
[03:55] *** arlinius|3 joined
[04:03] *** satyavvd joined
[04:03] *** bacek__ left
[04:12] *** kraai_ left
[04:13] *** kraai_ joined
[04:19] <lopnor> hello,

[04:19] <lopnor> is there any performance profiler for rakudo?

[04:20] *** bacek__ joined
[04:23] *** Su-Shee_ joined
[04:25] *** cottoo left
[04:25] *** cottoo joined
[04:27] *** Su-Shee left
[04:33] <sorear> lopnor: I think there's a profiling runcore

[04:41] <lopnor> sorear: thank you, how do i use it? is there any documents in rakudo-star tarball?

[04:42] <arlinius|3> dsa

[04:43] <lopnor> hm,  parrot-2.11.0/docs/dev/profiling.pod this seems to be

[04:44] <lopnor> thank you, i will try this

[04:56] *** Trashlord joined
[05:05] *** karb left
[05:12] *** roen left
[05:19] *** coldhead left
[05:21] *** xinming_ left
[05:22] *** xinming joined
[05:23] <sorear> niecza: sub foo($s) { constant %x = a => 1, b => 2, c => 3; return %x{$s} }; say foo('b')

[05:23] <p6eval> niecza v1-35-gc9d17a7: OUTPUT«Unhandled exception: Cannot use hash access on an object of type Parcel␤  at (eval) line 1 (MAIN foo @ 2)␤  at (eval) line 1 (MAIN mainline @ 1)␤  at /home/p6eval/niecza/lib/SAFE.setting line 1064 (SAFE C381_ANON @ 1)␤  at /home/p6eval/niecza/lib/SAFE.setting line 1064

[05:23] <p6eval> ..(SAFE module…

[05:23] <sorear> thought so.

[05:25] *** helv left
[05:25] *** roen joined
[05:37] *** mberends joined
[05:39] <sorear> hello mberends

[05:40] <mberends> hi sorear, I've just discovered the MacSurf in Copenhagen Central Station ;)

[05:41] <mberends> masak and I plan to meet here today, he has just relocated to the part of Sweden nearest to here :)

[05:49] <mberends> sorear: how is niecza's eval() coming along? It seems once that has landed, we can begin spectesting niecza in earnest.

[05:58] *** cjk101010 joined
[06:02] *** arlinius|3 left
[06:07] *** j-invariant joined
[06:07] <j-invariant> are there any songs about perl6?

[06:07] <j-invariant> or perl

[06:09] <dalek> nqp-rx: 89a7459 | cotto++ | src/NQP/ (2 files):

[06:09] <dalek> nqp-rx: add ...

[06:09] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/89a7459bf1

[06:09] <dalek> nqp-rx/nom: 98b0b4f | bacek++ | src/ (3 files):

[06:09] <dalek> nqp-rx/nom: Remove usage of deprecated concat_s_s op

[06:09] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/98b0b4fb95

[06:09] <dalek> nqp-rx/nom: 2a73b89 | cotto++ | src/stage0/ (2 files):

[06:09] <dalek> nqp-rx/nom: fix deprecated concat_s_s usages

[06:09] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/2a73b898a9

[06:09] *** arlinius|2 joined
[06:10] <cottoo> ... wasn't intentional

[06:10] *** cottoo is now known as cotto

[06:10] *** cotto left
[06:10] *** cotto joined
[06:11] <dalek> nqp-rx: 2f2bc9a | cotto++ | src/NQP/ (2 files):

[06:11] <dalek> nqp-rx: Revert "add ..."

[06:11] <dalek> nqp-rx: 

[06:11] <dalek> nqp-rx: This reverts commit 89a7459bf15f084f034b4572e3121833f22aa6e3.

[06:11] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/2f2bc9a9fe

[06:15] <cotto> in nom, is "type object" another way of saying "class"?

[06:16] <diakopter> bacek__: you'd also need to fix nqp-rx's pir emitter; I suspect it emits usages of that concat form

[06:17] <diakopter> maybe not.

[06:17] <bacek__> diakopter, let me check it

[06:18] <cotto> that was me trying to cherry-pick nom back into building

[06:18] <bacek__> but I did update nqp-rx when strip concat_s_s from parrot.

[06:18] *** bacek__ is now known as bacek

[06:19] <cotto> nom doesn't bootstrap atm but it does seem to build

[06:19] <diakopter> bacek: why the removal of that concat form?

[06:19] <cotto> immutable strings

[06:19] <bacek> diakopter, leftover of "mutable string world"

[06:20] <diakopter> oh..

[06:20] <cotto> concat_s_s assumes that you're mutating the first argument

[06:20] <diakopter> I guess if you treat a string like a value type it would matter

[06:20] <cotto> did nom previously work fine after bootstrap-files?

[06:21] <cotto> (for its own special value of "works")

[06:29] <sorear> mberends: I don't know

[06:30] <sorear> mberends: v2 (Jan 31) will almost certainly be self-hosted; I expect eval will require significant rearranging, but I have no idea how significant

[06:32] <mberends> sorear: ok, in that case I'll attempt to achieve some spectest coverage, without creating any high expectations.

[06:33] <sorear> pmurias has been doing some interesting stuff.

[06:35] *** bacek_ joined
[06:38] *** bacek left
[06:52] <dalek> niecza: 7e32c33 | sorear++ | v6/NAMOutput.pm6:

[06:52] <dalek> niecza: [v6] Translate NAMBackend

[06:52] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7e32c339b8

[06:55] *** wtw joined
[06:59] *** bacek__ joined
[07:03] *** bacek_ left
[07:04] *** masak joined
[07:04] <masak> good morning!

[07:04] * masak stretches, cat-like

[07:08] <sorear> niecza: say +[ map { $_, $_ }, 1, 2 ]

[07:08] <p6eval> niecza v1-35-gc9d17a7: OUTPUT«2␤»

[07:08] <sorear> gah

[07:08] *** kaare joined
[07:09] *** kaare is now known as Guest88087

[07:12] <dalek> niecza: 25fdee0 | sorear++ | lib/SAFE.setting:

[07:12] <dalek> niecza: Fix &take losing list character of items

[07:12] <dalek> niecza: review: https://github.com/sorear/niecza/commit/25fdee0e0b

[07:13] <sorear> hello masak.

[07:16] <masak> rakudo: say +[ map { $_, $_ }, 1, 2 ]

[07:16] <p6eval> rakudo de98d1: OUTPUT«4␤»

[07:16] <masak> o.O

[07:16] <masak> oh, right.

[07:17] <diakopter> rakudo: say ~[ map { $_, $_ }, 1, 2 ]

[07:17] <p6eval> rakudo de98d1: OUTPUT«1 1 2 2␤»

[07:18] <diakopter> rakudo: say ~[ map { $_ ** $_ }, 1, 2 ]

[07:18] <p6eval> rakudo de98d1: OUTPUT«1 4␤»

[07:18] <diakopter> er

[07:18] <diakopter> rakudo: say ~[ map { $_ zZ $_ }, 1, 2 ]

[07:18] <p6eval> rakudo de98d1: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 22␤»

[07:18] <diakopter> hee

[07:19] <diakopter> rakudo: say +[ map { $_ xx $_ }, ^99 ]

[07:19] <p6eval> rakudo de98d1: OUTPUT«4851␤»

[07:22] *** agentzh joined
[07:25] <sorear> phenny: tell moritz_ p6eval is 46 commits behind niecza head, did I break the build again? D:

[07:25] <phenny> sorear: I'll pass that on when moritz_ is around.

[07:28] <moritz_> sorear: there were local changes, which prevented automatic pulling. Sorry for that, fixed now

[07:28] <phenny> moritz_: 07:25Z <sorear> tell moritz_ p6eval is 46 commits behind niecza head, did I break the build again? D:

[07:28] <moritz_> niecza: say '\o/'

[07:28] <p6eval> niecza v1-80-g25fdee0: OUTPUT«\o/␤»

[07:28] *** Guest88087 is now known as kaare_

[07:39] *** kjeldahl left
[07:39] <diakopter> moritz_: who made the local changes..

[07:41] *** justatheory left
[07:41] *** kjeldahl joined
[07:42] *** mberends left
[07:42] *** jaldhar left
[07:42] *** jaldhar joined
[07:45] <moritz_> diakopter: me, after pmurias asked me to try something when we had a build failure

[07:45] <moritz_> at least I think that's what happened

[07:48] <dalek> niecza: e941d29 | sorear++ | v6/ (2 files):

[07:48] <dalek> niecza: [v6] Start a stopgap test harness

[07:48] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e941d29e60

[07:48] <dalek> niecza: f7b008c | sorear++ | v6/ (3 files):

[07:48] <dalek> niecza: [v6] More fixes; harness can do "Hello, world" now

[07:48] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f7b008c563

[07:50] <sorear> very exciting

[07:50] <masak> is it for the spectests?

[07:51] <sorear> masak: No, I have the Perl 6 version of Niecza able to run a Hello World program.  Sort of.

[07:51] <masak> ah :)

[07:52] <masak> nice to see things progress.

[07:52] <sorear> next will be Niecza::Actions, so I will be able to give input in Perl 6

[07:52] <sorear> then the optimization passes

[07:52] <sorear> then the driver... hopefully pmurias will have finished the driver refactor by then

[07:53] <sorear> then a new build systme

[07:53] <sorear> then ... done

[07:54] *** kanishka joined
[07:56] <masak> \o/

[08:01] *** mberends joined
[08:03] *** daxim joined
[08:04] *** Su-Shee_ is now known as Su-Shee

[08:08] *** kfo joined
[08:11] *** kfo_ left
[08:24] *** noganex_ is now known as noganex

[08:32] *** Vlavv` left
[08:33] *** Vlavv joined
[08:35] *** DAAYG1R joined
[08:38] <mberends> afk & # meeting masak++

[08:38] *** mberends left
[08:40] *** kensanata joined
[08:43] *** explorer__ left
[08:43] *** dual left
[08:43] *** knewt2 left
[08:43] *** JodaZ left
[08:43] *** robinsmidsrod left
[08:43] *** aloha left
[08:43] *** sjohnson left
[08:43] *** flatwhatson left
[08:43] *** elb0w left
[08:43] *** PacoLinux left
[08:43] *** sunnavy left
[08:43] *** hillu left
[08:43] *** toebu left
[08:43] *** jerome left
[08:43] *** phenny left
[08:43] *** nsh_ left
[08:43] *** sbp left
[08:43] *** barika_ left
[08:43] *** oha left
[08:43] *** __sri left
[08:43] *** DarthGandalf left
[08:43] *** wtw left
[08:43] *** felipe left
[08:43] *** Gothmog_ left
[08:43] *** tomaw left
[08:43] *** kanishka left
[08:43] *** noganex left
[08:43] *** stepnem left
[08:43] *** aindilis left
[08:43] *** Bucciarati left
[08:43] *** ggoebel left
[08:43] *** agentzh left
[08:43] *** jenk left
[08:43] *** arlinius left
[08:43] *** spq1 left
[08:43] *** IllvilJa left
[08:43] *** literal left
[08:43] *** j-invariant left
[08:43] *** satyavvd left
[08:43] *** wagnerf left
[08:43] *** larsen_ left
[08:43] *** VXZ left
[08:43] *** Sarten-X left
[08:43] *** Tene left
[08:43] *** zorgnax left
[08:43] *** daxim left
[08:43] *** lamstyle left
[08:43] *** Helios left
[08:43] *** jmmills left
[08:43] *** estrabd left
[08:43] *** shabble left
[08:43] *** patch left
[08:43] *** jaldhar left
[08:43] *** bacek__ left
[08:43] *** felliott left
[08:43] *** jevin left
[08:43] *** envi left
[08:43] *** c9s_ left
[08:43] *** Patterner left
[08:43] *** mtk left
[08:43] *** plobsing left
[08:43] *** roen left
[08:43] *** yves_ left
[08:43] *** starcoder left
[08:43] *** f00li5h left
[08:43] *** p6eval left
[08:43] *** nadim left
[08:43] *** diakopter left
[08:43] *** charsbr_ left
[08:43] *** meteorjay left
[08:43] *** cibs left
[08:43] *** kfo left
[08:43] *** kjeldahl left
[08:43] *** kst left
[08:43] *** meraxes left
[08:43] *** jarfhy left
[08:43] *** Alias left
[08:43] *** pothos left
[08:43] *** chitragupt left
[08:43] *** Intensity left
[08:43] *** cotto left
[08:43] *** masonkramer left
[08:43] *** jdv79 left
[08:43] *** lue left
[08:43] *** bartolin left
[08:43] *** rhr left
[08:43] *** thepler left
[08:43] *** kaare_ left
[08:43] *** Su-Shee left
[08:43] *** tadzik left
[08:43] *** cxreg left
[08:43] *** dju_ left
[08:43] *** PerlJam left
[08:43] *** Tedd1 left
[08:43] *** Gahrian left
[08:43] *** mtve left
[08:43] *** avuserow left
[08:43] *** pochi left
[08:43] *** TimToady left
[08:43] *** fith left
[08:43] *** simon left
[08:43] *** arlinius|2 left
[08:43] *** moritz_ left
[08:43] *** takesako left
[08:43] *** sol1tude left
[08:43] *** rjbs left
[08:43] *** colomon left
[08:43] *** jedai left
[08:43] *** arthur-_ left
[08:43] *** ponbiki left
[08:43] *** drbean left
[08:43] *** szbalint left
[08:43] *** puge left
[08:43] *** kensanata left
[08:43] *** cjk101010 left
[08:43] *** pumphaus left
[08:43] *** hcchien left
[08:43] *** shachaf left
[08:43] *** c1sung left
[08:43] *** shortcircuit left
[08:43] *** doddo left
[08:43] *** hatseflats left
[08:43] *** arnsholt left
[08:43] *** zb left
[08:43] *** sECuRE left
[08:43] *** cotto_work left
[08:43] *** masak left
[08:43] *** florz left
[08:43] *** QinGW left
[08:43] *** Chillance left
[08:43] *** jjore_ left
[08:43] *** dsp_ left
[08:43] *** araujo left
[08:43] *** Eevee left
[08:43] *** awwaiid left
[08:43] *** y3llow left
[08:43] *** mathw left
[08:43] *** IRSeekBot left
[08:43] *** tty234 left
[08:43] *** ascent_ left
[08:43] *** xinming left
[08:43] *** kraai_ left
[08:43] *** ruoso left
[08:43] *** orafu left
[08:43] *** cognominal left
[08:43] *** dukeleto left
[08:43] *** Lorn left
[08:43] *** mdxi left
[08:43] *** itz left
[08:43] *** vert2_ left
[08:43] *** flussence left
[08:43] *** kcwu left
[08:43] *** edenc left
[08:43] *** BinGOs left
[08:43] *** krakan_ left
[08:43] *** perigrin left
[08:43] *** nothingmuch left
[08:43] *** snarkyboojum left
[08:43] *** _ilbot left
[08:43] *** huf left
[08:43] *** nrr left
[08:43] *** jnthn left
[08:43] *** spacebat left
[08:43] *** kthakore left
[08:43] *** peters_mops left
[08:43] *** revdiablo left
[08:43] *** Vlavv left
[08:43] *** frooh left
[08:43] *** [particle] left
[08:43] *** Juerd left
[08:43] *** sorear left
[08:43] *** flatwhatson_ left
[08:43] *** cataska left
[08:43] *** gfldex left
[08:48] *** gfldex joined
[08:48] *** lestrrat joined
[08:48] *** cataska joined
[08:48] *** flatwhatson_ joined
[08:48] *** sorear joined
[08:48] *** Juerd joined
[08:48] *** [particle] joined
[08:48] *** frooh joined
[08:48] *** Vlavv joined
[08:48] *** DAAYG1R joined
[08:48] *** literal joined
[08:48] *** IllvilJa joined
[08:48] *** spq1 joined
[08:48] *** arlinius joined
[08:48] *** jenk joined
[08:48] *** explorer__ joined
[08:48] *** dual joined
[08:48] *** knewt2 joined
[08:48] *** JodaZ joined
[08:48] *** robinsmidsrod joined
[08:48] *** aloha joined
[08:48] *** sbp joined
[08:48] *** sjohnson joined
[08:48] *** flatwhatson joined
[08:48] *** elb0w joined
[08:48] *** PacoLinux joined
[08:48] *** hillu joined
[08:48] *** sunnavy joined
[08:48] *** toebu joined
[08:48] *** jerome joined
[08:48] *** phenny joined
[08:48] *** nsh_ joined
[08:48] *** barika_ joined
[08:48] *** oha joined
[08:48] *** __sri joined
[08:48] *** DarthGandalf joined
[08:48] *** tomaw joined
[08:48] *** Gothmog_ joined
[08:48] *** ggoebel joined
[08:48] *** felipe joined
[08:48] *** Bucciarati joined
[08:48] *** aindilis joined
[08:48] *** stepnem joined
[08:48] *** noganex joined
[08:48] *** wtw joined
[08:48] *** agentzh joined
[08:48] *** kanishka joined
[08:48] *** kensanata joined
[08:48] *** kfo joined
[08:48] *** daxim joined
[08:48] *** jaldhar joined
[08:48] *** kjeldahl joined
[08:48] *** kaare_ joined
[08:48] *** bacek__ joined
[08:48] *** cotto joined
[08:48] *** arlinius|2 joined
[08:48] *** j-invariant joined
[08:48] *** cjk101010 joined
[08:48] *** roen joined
[08:48] *** Su-Shee joined
[08:48] *** satyavvd joined
[08:48] *** felliott joined
[08:48] *** florz joined
[08:48] *** jevin joined
[08:48] *** masonkramer joined
[08:48] *** lamstyle joined
[08:48] *** QinGW joined
[08:48] *** envi joined
[08:48] *** Chillance joined
[08:48] *** moritz_ joined
[08:48] *** patch joined
[08:48] *** shabble joined
[08:48] *** estrabd joined
[08:48] *** jmmills joined
[08:48] *** Helios joined
[08:48] *** takesako joined
[08:48] *** sol1tude joined
[08:48] *** c9s_ joined
[08:48] *** kst joined
[08:48] *** pumphaus joined
[08:48] *** rjbs joined
[08:48] *** jjore_ joined
[08:48] *** tadzik joined
[08:48] *** cxreg joined
[08:48] *** dju_ joined
[08:48] *** Patterner joined
[08:48] *** PerlJam joined
[08:48] *** mtk joined
[08:48] *** meraxes joined
[08:48] *** plobsing joined
[08:48] *** dsp_ joined
[08:48] *** cibs joined
[08:48] *** doddo joined
[08:48] *** hcchien joined
[08:48] *** araujo joined
[08:48] *** Tedd1 joined
[08:48] *** wagnerf joined
[08:48] *** cotto_work joined
[08:48] *** sECuRE joined
[08:48] *** zb joined
[08:48] *** arnsholt joined
[08:48] *** hatseflats joined
[08:48] *** shortcircuit joined
[08:48] *** c1sung joined
[08:48] *** shachaf joined
[08:48] *** yves_ joined
[08:48] *** Gahrian joined
[08:48] *** starcoder joined
[08:48] *** mtve joined
[08:48] *** zorgnax joined
[08:48] *** Tene joined
[08:48] *** Sarten-X joined
[08:48] *** VXZ joined
[08:48] *** larsen_ joined
[08:48] *** jdv79 joined
[08:48] *** Eevee joined
[08:48] *** jarfhy joined
[08:48] *** colomon joined
[08:48] *** awwaiid joined
[08:48] *** jedai joined
[08:48] *** arthur-_ joined
[08:48] *** Alias joined
[08:48] *** f00li5h joined
[08:48] *** ponbiki joined
[08:48] *** simon joined
[08:48] *** y3llow joined
[08:48] *** pothos joined
[08:48] *** avuserow joined
[08:48] *** pochi joined
[08:48] *** p6eval joined
[08:48] *** nadim joined
[08:48] *** TimToady joined
[08:48] *** diakopter joined
[08:48] *** drbean joined
[08:48] *** chitragupt joined
[08:48] *** mathw joined
[08:48] *** lue joined
[08:48] *** IRSeekBot joined
[08:48] *** charsbr_ joined
[08:48] *** tty234 joined
[08:48] *** puge joined
[08:48] *** leguin.freenode.net sets mode: +v p6eval

[08:48] *** bartolin joined
[08:48] *** meteorjay joined
[08:48] *** fith joined
[08:48] *** rhr joined
[08:48] *** Intensity joined
[08:48] *** thepler joined
[08:48] *** ascent_ joined
[08:48] *** szbalint joined
[08:48] *** clkao joined
[08:48] *** pnu joined
[08:48] *** LoRe joined
[08:48] *** kolibrie_ joined
[08:48] *** allbery_b joined
[08:48] *** nperez_ joined
[08:48] *** ingy joined
[08:48] *** cschimm1 joined
[08:48] *** sjn joined
[08:48] *** hudnix joined
[08:48] *** tylerni7 joined
[08:48] *** cookys joined
[08:48] *** szabgab joined
[08:48] *** jrockway joined
[08:48] *** jql joined
[08:48] *** wolverian joined
[08:48] *** Maddingue joined
[08:48] *** TiMBuS joined
[08:48] *** jasonmay joined
[08:48] *** cls_bsd joined
[08:48] *** yahooooo joined
[08:48] *** PZt joined
[08:48] *** broquaint joined
[08:48] *** pjcj joined
[08:48] *** rokoteko joined
[08:48] *** mux joined
[08:48] *** zostay joined
[08:48] *** Grrrr joined
[08:48] *** cosimo joined
[08:48] *** spinclad joined
[08:48] *** wooden joined
[08:48] *** betterworld joined
[08:48] *** Exodist joined
[08:48] *** HarryS left
[08:48] *** kensanata` joined
[08:48] *** xinming joined
[08:48] *** kraai_ joined
[08:48] *** ruoso joined
[08:48] *** orafu joined
[08:48] *** cognominal joined
[08:48] *** dukeleto joined
[08:48] *** itz joined
[08:48] *** Lorn joined
[08:48] *** mdxi joined
[08:48] *** vert2_ joined
[08:48] *** flussence joined
[08:48] *** kcwu joined
[08:48] *** frettled joined
[08:48] *** saaki joined
[08:48] *** jpr5 joined
[08:48] *** buubot joined
[08:48] *** edenc joined
[08:48] *** BinGOs joined
[08:48] *** krakan_ joined
[08:48] *** perigrin joined
[08:48] *** nothingmuch joined
[08:48] *** snarkyboojum joined
[08:48] *** _ilbot joined
[08:48] *** huf joined
[08:48] *** nrr joined
[08:48] *** jnthn joined
[08:48] *** spacebat joined
[08:48] *** kthakore joined
[08:48] *** peters_mops joined
[08:48] *** revdiablo joined
[08:48] *** masak joined
[08:50] *** kensanata left
[08:50] *** HarryS joined
[08:50] *** HarryS is now known as 13WAAYULM

[08:59] <j-invariant> perl6: 3 == *

[08:59] <p6eval> pugs, rakudo de98d1, niecza v1-82-gf7b008c:  ( no output )

[08:59] <j-invariant> perl6: say(3 == *);

[08:59] *** Miguelanxo joined
[08:59] <p6eval> rakudo de98d1: OUTPUT«_block124␤»

[08:59] <p6eval> ..niecza v1-82-gf7b008c: OUTPUT«Sub()<instance>␤»

[08:59] <p6eval> ..pugs: OUTPUT«␤»

[09:02] <moritz_> rakudo: if ?(Q:PIR { %r = box 3␤}) { say "alive" }

[09:02] <p6eval> rakudo de98d1: OUTPUT«alive␤»

[09:02] <moritz_> rakudo: if (Q:PIR { %r = box 3␤}).Bool { say "alive" }

[09:02] <p6eval> rakudo de98d1: OUTPUT«alive␤»

[09:03] <j-invariant> rakudo: say(3 == *);

[09:03] <p6eval> rakudo de98d1: OUTPUT«_block124␤»

[09:04] <moritz_> rakudo: say (3 == *).(5)

[09:04] <p6eval> rakudo de98d1: OUTPUT«Bool::False␤»

[09:04] <moritz_> rakudo: say (3 == *).(3)

[09:04] <p6eval> rakudo de98d1: OUTPUT«Bool::True␤»

[09:05] <j-invariant> is there something equal to everything?

[09:06] <moritz_> no

[09:06] <moritz_> but there's something that smart-matches True against everything

[09:06] <moritz_> rakudo: say 0 ~~ True

[09:06] <p6eval> rakudo de98d1: OUTPUT«===SORRY!===␤Smartmatch against True always matches; if you mean to test the topic for truthiness, use :so or *.so or ?* instead at line 22, near " True"␤»

[09:07] <moritz_> ... and warns :-)

[09:07] <moritz_> rakudo: say 0 ~~ Mu

[09:07] <j-invariant> cool!

[09:07] <p6eval> rakudo de98d1: OUTPUT«1␤»

[09:10] *** dakkar joined
[09:24] *** roen left
[09:31] *** molaf joined
[09:32] *** Kovensky joined
[09:46] *** bacek_ joined
[09:47] *** yarp joined
[09:49] *** bacek__ left
[10:16] *** kensanata` is now known as kensanata

[10:16] *** kensanata left
[10:16] *** kensanata joined
[10:16] *** sol1tude left
[10:20] *** wamba joined
[10:27] <colomon> masak: Do you have an interface in mind for p5?  Something like take two lines and long for their longest substring?

[10:28] <moritz_> colomon: see base-test

[10:28] <moritz_> iirc it's exactly that

[10:28] <colomon> oh.  Is there a base-test in every directory that I've been ignoring?

[10:29] <moritz_> seems like :-)

[10:29] *** tzhs joined
[10:29] <colomon> "Look at that," as my little guy would say.  :)

[10:29] <colomon> moritz_++

[10:30] <moritz_> cleverl little guy, I'd say :-)

[10:30] *** QinGW left
[10:30] *** yarp left
[10:31] <colomon> you can tell when he is excited by something new, because he'll say it three or four times a minute.  :)

[10:33] <moritz_> probably because those stupid adults fail to show the proper excitement after the first time

[10:57] *** bacek_ left
[11:02] *** bacek_ joined
[11:06] *** yarp joined
[11:09] *** muixirt joined
[11:09] <muixirt> hi colomon 

[11:10] <colomon> o/

[11:10] <muixirt> why did you revert jnthn patch?

[11:10] *** IllvilJa left
[11:12] <moritz_> it caused spectest failures

[11:12] <muixirt> rakudo is quite buggy as a hole, and tests like t/spec/S14-roles/parameter-subtyping.rakudo where broken before

[11:12] <moritz_> which jnthn++ couldn't test, because parrot was b0rked at that point

[11:13] <muixirt> moritz_: is the pir :main fixed? Or gets fixed in next days?

[11:14] <moritz_> muixirt: it's "fixed", which means the message disappears. Instead now the main body of a Perl 6 program is executed twice.

[11:14] <muixirt> didn't see anything in rakudo / Commit History

[11:14] <moritz_> parrot changed

[11:15] <moritz_> see yesterday's #parrot logs

[11:15] <moritz_> search for pmichaud++ appearing

[11:15] <muixirt> too bad to see a performance increase slip away

[11:15] <muixirt> ok moritz_ 

[11:16] <colomon> I'm sure jnthn will get around to fixing his patch soon, and we'll get it back.

[11:16] <colomon> It just wasn't quite ready for prime time yet.

[11:16] *** kanishka left
[11:16] <muixirt> colomon: good to hear

[11:18] <muixirt> I don't want to harp on it to much but rakudo perl could *really* use some speed enhancements

[11:19] <muixirt> it's heartbreaking slow and it's annoying that parrot get often in the way

[11:21] <muixirt> sorry for stating the obvious

[11:23] *** Util joined
[11:30] <Util> First cut of Rakudo binary package for Mac OS X:

[11:30] <Util>     http://s3.datasaw.com/Rakudo_Star_2010-12_experiment_1.dmg

[11:30] <Util> Testers wanted!

[11:34] <Util> s/Rakudo binary/Rakudo Star binary/

[11:35] *** oha left
[11:36] *** j-invariant left
[11:37] *** lamstyle left
[11:42] <colomon> Good grief, my masak code is failing the base tests miserably.

[11:43] *** gbacon joined
[11:47] *** lamstyle joined
[11:55] <colomon> okay, p3 fixed.

[11:59] *** roen joined
[11:59] <Util> p3 was my favorite

[12:00] <Util> p4, not so much

[12:01] <arnsholt> p3 had the advantage of being pretty simple

[12:01] <colomon> I really am kind of disliking the base-test tests.

[12:01] <colomon> particularly in p4.

[12:01] <arnsholt> Yeah. The ones for p3 are pretty normal, but p1 and p4 are weird

[12:02] <arnsholt> Haven't looked much at p2 or p5

[12:02] <colomon> I'm grumpy about having to add a bunch of error checking which has nothing to do with the problem in case of grossly illegal input. 

[12:03] <arnsholt> I'm pretty sloppy with my input validation, TBH

[12:03] <colomon> But I can't begin to fathom why base-test insists the computer makes a certain move in situations where every move is exactly equivalent.

[12:04] <arnsholt> Yeah, those tests I really don't like

[12:04] <arnsholt> I think I'll just ignore base-test for p4

[12:10] *** kanishka joined
[12:12] <muixirt> moritz_: do all nowspectest pass ?

[12:12] <muixirt> t/spec/S14-roles/parameter-subtyping.rakudo hangs again

[12:13] *** satyavvd left
[12:13] <colomon> muixirt: context?  It works fine for me with latest Rakudo and its default Parrot.

[12:14] <muixirt> Rakudo Perl 6, version 2010.12-16-gde98d15 built on parrot 2.11.0 RELEASE_2_11_0-659-gf1c0156

[12:15] <colomon> Platform?

[12:15] <muixirt> linux amd64

[12:15] <muixirt> lots of other test fails

[12:16] <muixirt> hence the question if the spectest is supposed to pass with latest parrot/rakudo or if I oberlooked something again

[12:17] <colomon> yeah, that test runs fine with those versions on OS X.

[12:17] <colomon> I'm building on 64-bit linux now.

[12:18] <muixirt> lots of 'More than one plan found in TAP output'

[12:19] <muixirt> neat: # Looks like you planned 21 tests, but ran 42

[12:20] <muixirt> well moritz_ said: Instead now the main body of a Perl 6 program is executed twice.

[12:20] <muixirt> He meant it! :-)

[12:21] <muixirt> <zum mäuse melken>

[12:22] *** Eevee left
[12:22] *** phenny left
[12:23] *** Eevee joined
[12:23] *** nsh_ left
[12:23] *** sbp left
[12:24] *** sbp joined
[12:24] <colomon> oh, I'm not using that version.  hmmm?

[12:24] <colomon> This is Rakudo Perl 6, version 2010.12-16-gde98d15 built on parrot 2.11.0 RELEASE_2_11_0-478-gd69dbbc

[12:24] <colomon> Guess that's not the latest Parrot?

[12:25] *** agentzh left
[12:25] *** nsh joined
[12:27] *** yarp left
[12:27] <muixirt> where do these gde98d15 gibberish come from again?

[12:28] <gfldex> a missing git pull maybe?

[12:28] <colomon> It's g plus the first 7 characters of the hash tag for the git commit.

[12:28] <gfldex> kill parrot_install while you are on it

[12:29] <colomon> gd69dbbc is what current Rakudo calls for.

[12:29] *** masonkramer left
[12:30] *** masonkramer joined
[12:30] *** bacek_ left
[12:30] <muixirt> according to https://github.com/parrot/parrot f1c015663e153d35a528 is the latest commit

[12:31] <gfldex> check build/PARROT_REVISION

[12:31] <gfldex> in rakudo

[12:31] <colomon> right, Rakudo's not on the latest Parrot yet.

[12:31] *** nsh left
[12:32] <muixirt> ok, I don't do --gen-parrot, sorry for the confusion

[12:32] *** nsh joined
[12:35] <colomon> muixirt: right, it appears the correct answer is that Rakudo does not yet work with the latest Parrot.

[12:35] *** avuserow left
[12:35] <muixirt> colomon: so rakudo works and spectests passes with d69dbbc?

[12:35] <colomon> yes

[12:36] <muixirt> ok, thanks colomon 

[12:36] *** _twitch joined
[12:37] *** avuserow joined
[12:40] <colomon> rakudo: my @a = "4,5'.eval; say @a.perl

[12:40] <p6eval> rakudo de98d1: OUTPUT«===SORRY!===␤Confused at line 22, near "my @a = \"4"␤»

[12:40] <colomon> rakudo: my @a = "4,5".eval; say @a.perl

[12:40] <p6eval> rakudo de98d1: OUTPUT«[4, 5]␤»

[12:41] <moritz_> http://trac.parrot.org/parrot/ticket/1932 is my bug report for rakudo on current parrot

[12:42] *** kanishka left
[12:42] *** nsh left
[12:44] *** sbp left
[12:44] *** mtk left
[12:45] *** [sbp] joined
[12:46] *** mtk joined
[12:48] *** sbp joined
[12:48] <muixirt> "...  and can't be easily reverted. " Erm, what?

[12:49] <colomon> hmmm?

[12:49] *** phenny joined
[12:50] *** nsh joined
[12:50] <muixirt> colomon: see the comment of bacek to moritz_ 's ticket

[12:50] <colomon> ah.

[12:56] <muixirt> we should request from the parrot devs that it executes main twice in to seperate threads :-)

[12:57] <moritz_> threads are deprecated :/

[12:58] *** yarp joined
[12:58] <moritz_> but I don't understand... there's a merge commit, that means it can't have been --no-ff

[12:58] <moritz_> but maybe we're talking about different branches

[12:59] <muixirt> or we could sell rakudo to the pentagon: SAFE programming through redundant computation

[12:59] *** Miguelanxo_ joined
[12:59] *** spacebat left
[13:01] *** takadonet joined
[13:02] *** Miguelanxo left
[13:03] *** kraai_ left
[13:04] <takadonet> morning all

[13:04] <tadzik> morning takadonet 

[13:04] <colomon> o/

[13:05] *** Miguelanxo_ left
[13:15] <wagnerf> hi all, is there a way to profile some code with rakudo ?

[13:15] <moritz_> yes, add 'say time' statements to it and parse / analyze the output

[13:15] <colomon> wagnerf: There is a Parrot profiler, last I heard it was working with Rakudo.  But it's tricky to use.

[13:15] <moritz_> no automized way though

[13:16] <wagnerf> ok

[13:18] *** MayDaniel joined
[13:18] <muixirt> i like perl6 --stagestats

[13:18] <moritz_> but it doesn't give profiling information

[13:19] <muixirt> if you wonder how long it takes to parse your program

[13:21] * colomon now has all but one base-test passing from p1-p4, and he'd argue the failing test is wrong.

[13:21] <muixirt> moritz_: but i would argue that a profiler for rakudo isn't very helpful for rakudo perl *users*

[13:21] <moritz_> colomon: which one do you think is wrong?

[13:22] *** sftp joined
[13:23] <wagnerf> well, maybe it's a good opportunity to try playing with the meta object protocol :)

[13:23] <colomon> moritz_: Test 5 on p4.  All first moves are exactly equivalent, but it assumes the computer will always choose 0, 1

[13:24] <moritz_> colomon: I've argued with masak over that one too. He meant I was free to ignore that test

[13:24] <moritz_> colomon: and then I started to implement the solution, and found that it was easier for me if I special-cased the first move anyway :-)

[13:25] *** [Coke] joined
[13:25] <moritz_> because after the first move, I can ignore the periodic boundary conditions, which suited me well

[13:25] <colomon> moritz_: huh.  I didn't special case the first move.

[13:26] <colomon> And what if the human player doesn't do something to break the periodic boundary?

[13:26] <moritz_> then I do a small coordinate transformation

[13:26] <moritz_> aka .rotate()

[13:27] * [Coke] yawns.

[13:30] <arnsholt> The first move in p4 is irrelevant anyways =)

[13:33] *** tzhs left
[13:35] *** V15170R joined
[13:35] <V15170R> hi :)

[13:36] <V15170R> i'm a newbie programmer, and i was reading about MONADS.... and learned about roles on perl6. 

[13:36] <takadonet> V15170R: welcome

[13:37] <V15170R> i don't understand monads completely, yet, but it seems that they are "similar" in the way they both "compose" behavoir....

[13:37] <V15170R> are roles inspired in some way in "monads" ?

[13:38] *** MayDaniel left
[13:39] *** arlinius|2 left
[13:43] *** yarp left
[13:44] <shortcircuit> One thing I really, really like about the Perl 6 community over the Perl community; it's not a sniping gallery in here.

[13:44] <tadzik> what do you mean?

[13:46] *** smash joined
[13:46] <smash> hello everyone

[13:47] <shortcircuit> My last couple experiences in #perl have been, in reverse order, responding to someone's suggestion that a code example be fixed, and (a year or so ago) being treated like a n00b (in a negative way) as I was trying to get the JSON module working on a broken operating system.

[13:48] <shortcircuit> The more recent event had a guy who wanted to see the code fixed, a guy who didn't care, except to see the site go away, and a guy who provided a nopaste with corrected code.

[13:48] <shortcircuit> I've not seen non-constructive aggressiveness around here, and I've been treated subjectively well when I haven't known what I'm doing.

[13:49] <shortcircuit> I like that about this place. :)

[13:50] <muixirt> I second that, but of course #perl6 is very small community

[13:50] <daxim> I can troll you hard to restore the universal balance and natural order in the perliverse

[13:52] *** yarp joined
[13:53] <daxim> that reminds me, why is that reddit novelty account that used to come up during the last year not active anymore? :(  was fun

[13:57] *** vastak joined
[14:06] *** V15170R left
[14:11] *** Miguelanxo joined
[14:12] *** Miguelanxo left
[14:17] *** satyavvd joined
[14:19] *** yarp left
[14:23] *** zorgnax left
[14:28] *** risou joined
[14:29] *** fhelmberger joined
[14:30] *** fhelmberger left
[14:30] *** pmurias joined
[14:30] *** fhelmberger joined
[14:31] <colomon> Okay, I've got all the base-tests passing on all problems, except for that one on p4.

[14:36] *** cjk101010 left
[14:45] *** felliott left
[14:48] *** risou left
[14:48] *** molaf left
[14:53] *** kaare_ left
[14:54] *** wamba left
[14:54] *** wamba joined
[14:58] *** pyrimidine joined
[14:58] <takadonet> pyrimidine: hey

[14:58] <pyrimidine> o/

[14:58] <takadonet> long time no see

[14:59] <pyrimidine> took a well-needed break

[14:59] *** khisanth__ joined
[15:00] *** khisanth__ is now known as Khisanth

[15:01] <takadonet> good to hear

[15:05] *** WonTu joined
[15:06] *** WonTu left
[15:08] *** drbean left
[15:09] *** orafu left
[15:09] *** orafu joined
[15:13] *** drbean joined
[15:17] *** hercynium joined
[15:20] *** MayDaniel joined
[15:24] *** wtw left
[15:25] *** kaare_ joined
[15:25] *** florz left
[15:26] *** florz joined
[15:27] *** tzhs joined
[15:31] *** IllvilJa joined
[15:38] *** PerlPilot joined
[15:39] *** frodwith joined
[15:39] <PerlJam> good * #perl6

[15:42] *** Kovensky left
[15:42] <colomon> o/

[15:48] *** felliott joined
[15:55] *** Kovensky joined
[15:56] *** orafu left
[15:56] *** orafu joined
[15:58] *** plobsing left
[16:09] *** gottreu joined
[16:11] *** PerlJam left
[16:24] *** roen left
[16:24] *** _twitch left
[16:28] *** tzhs left
[16:33] *** kanishka joined
[16:33] *** molaf joined
[16:36] *** muixirt left
[16:42] *** silug joined
[16:42] *** shi joined
[16:49] *** daxim left
[16:51] *** satyavvd left
[16:54] *** ggoebel left
[16:59] *** ggoebel joined
[17:02] *** plobsing joined
[17:02] *** c1sung left
[17:03] *** cogno joined
[17:04] *** justatheory joined
[17:07] *** cdarroch joined
[17:07] *** cdarroch left
[17:07] *** cdarroch joined
[17:09] *** c1sung joined
[17:13] *** jaldhar left
[17:16] *** c1sung left
[17:23] *** kent\n joined
[17:24] *** c1sung joined
[17:27] <kent\n> I'm looking for "resumable exceptions", but the synopsis code is a bit daunting. Essentially, I have a place where it may be useful to report a warning, but it may also be a good place to throw an exception, and I don't want to care which it is, and just throw an exception, and let the calling context decide "nah, thats alright, keep going" and return to statement line after the exception was thrown. 

[17:27] <flussence> try "fail()"

[17:28] *** c1sung left
[17:28] <kent\n> pseudocode: try { x ; fail(); y } catch { $_->resume() }   #   x, fail(), resume(), y 

[17:29] <flussence> rakudo: sub a { fail('foo') }; try { my $v = a(); CATCH { say 'fail' } }; my $w = a(); say 'alive'; say $v;

[17:29] <p6eval> rakudo de98d1: OUTPUT«===SORRY!===␤Symbol '$v' not predeclared in <anonymous> (/tmp/gvnnsF3Rjs:22)␤»

[17:29] <flussence> rakudo: sub a { fail('foo') }; try { my $v = a(); CATCH { say 'fail' } }; my $w = a(); say 'alive'; say $w;

[17:29] <p6eval> rakudo de98d1: OUTPUT«alive␤»

[17:30] <pmurias> kent\n: warnings are implemented as "resumable exceptions"

[17:30] <flussence> hm, someone else probably knows it better than I do

[17:31] <kent\n> code sample is doing my head in -_-

[17:31] * kent\n hasn't mastered p6 yet, its just something I concluded/realised p5 will probably never handle and want to see how/if p6 does it in a way I can understand

[17:34] *** PerlPilot is now known as PerlJam

[17:34] <PerlJam> no one has mastered Perl 6 yet.

[17:35] <kent\n> I shall rephrase: I haven't really yet written anything in p6 yet =p

[17:35] <pmurias> kent\n: something like $!.resume() will resume the exception

[17:36] <kent\n> awesome. 

[17:37] *** kensanata left
[17:37] * kent\n toys with the idea of writing his module in p6 for the lulz

[17:37] <TimToady> well, if you write it as a warning, it will default to resuming, and you can write a CONTROL exception catcher to kill it

[17:38] <kent\n> Ah!. the light brightens. 

[17:39] <TimToady> All the parts of Perl 6 are very well designed, except for the parts that aren't...

[17:43] <PerlJam> some parts have sharp edges (don't cut yourself!)  Other parts have fractal edges.  some parts are tooled to a fine precision using electron microscopes;  other parts were marked with chalk and cut with an axe.   :-)

[17:45] <PerlJam> oh, and these parts I've just described are not all mutually exclusive.

[17:46] * kent\n bets some of those edges are imaginary, or only exist in certain dimensional planes.

[17:47] <TimToady> rakudo: say 42i.Bool

[17:47] <p6eval> rakudo de98d1: OUTPUT«Bool::True␤»

[17:47] <flussence> rakudo: say (now R- now).perl # was just playing around in the REPL, found the numbers amusingly weird for some reason

[17:47] <p6eval> rakudo de98d1: OUTPUT«Duration.new(397/1809)␤»

[17:48] *** M_o_C joined
[17:49] <Util> Many things that were dull edges in Perl 5 are now tight dovetails in Perl 6. I plan a "dovetail" category when I start blogging.

[17:50] <VXZ> rakudo: say i**.5

[17:50] <p6eval> rakudo de98d1: OUTPUT«0.707106781186548 + 0.707106781186547i␤»

[17:50] <flussence> rakudo: say (0.18547485973194).Rat.perl # oh wow, didn't know this worked

[17:50] <p6eval> rakudo de98d1: OUTPUT«166/895␤»

[17:50] <TimToady> rakudo: say pi.WHAT

[17:50] <p6eval> rakudo de98d1: OUTPUT«Num()␤»

[17:50] <TimToady> rakudo: say pi.Rat.perl

[17:50] <p6eval> rakudo de98d1: OUTPUT«355/113␤»

[17:51] *** cogno left
[17:51] <TimToady> most of the sharp edges in Perl 6 are out there where in Perl 5 you're falling off the edge of the world

[17:52] <flussence> .oO( maybe "pi.perl" should output a continued fraction sequence )

[17:52] <moritz_> rakudo: say pi.Rat(1e-6).perl

[17:52] <p6eval> rakudo de98d1: OUTPUT«355/113␤»

[17:52] <moritz_> rakudo: say pi.Rat(1e-8).perl

[17:52] <p6eval> rakudo de98d1: OUTPUT«103993/33102␤»

[17:53] <TimToady> my @pi-digits := ...

[17:53] <Util> flussence: a continued fraction object type would be interesting. Module welcome :)

[17:53] *** envi left
[17:54] <[Coke]> p6eval: say pi.Rat

[17:54] <TimToady> you broked it

[17:54] <moritz_> rakudo: say pi.Rat

[17:55] <p6eval> rakudo de98d1: OUTPUT«3.14159292035398␤»

[17:55] <PerlJam> interesting

[17:56] <TimToady> seems like one could get a better Rat of pi, even in 32 bits

[17:56] <[Coke]> didn't like to be addressed by name. I was trying to /msg it anyway.

[17:56] <Util> (Repeating announcement from this morning)

[17:56] <Util> Mac OS X users needed for testing of Rakudo Star binary package (first cut) : http://s3.datasaw.com/Rakudo_Star_2010-12_experiment_1.dmg

[17:56] <moritz_> TimToady: .Rat uses a predefined precision in rakudo

[17:57] <moritz_> rakudo: say pi.Rat(1e-10)

[17:57] <p6eval> rakudo de98d1: OUTPUT«3.14159265361894␤»

[17:57] <moritz_> rakudo: say pi.Rat(1e-10).perl

[17:57] <p6eval> rakudo de98d1: OUTPUT«312689/99532␤»

[17:57] <moritz_> rakudo: say pi.Rat(1e-12).perl

[17:57] <p6eval> rakudo de98d1: OUTPUT«4272943/1360120␤»

[17:58] <TimToady> the default seems rather lossy

[17:58] <PerlJam> Any reason we don't truncate the digits beyond the Rat's precision?

[17:58] *** impious joined
[17:59] <moritz_> PerlJam: the NYI reason, probably

[17:59] <PerlJam> okie

[17:59] <TimToady> also, with 64-bit denom we could pretty much convert most Nums directly to a Rat

[17:59] <TimToady> and I still think lazy gcd is a good idea

[18:00] <TimToady> there's no reason to do gcd when adding up a bunch of, say, dollars and cents.

[18:00] <TimToady> you just want everything to be /100

[18:01] <TimToady> though we should probably support Rat100 etc. types anyway, unless they're called Fix100

[18:01] <TimToady> but it's kinda convenient that powers of ten don't intersect powers of two

[18:02] *** c1sung joined
[18:02] <TimToady> but probably it's just a role, anyway: Fix100 := Fix[1/100]

[18:03] <VXZ> Where do I report problems with that os x binary mentioned above?

[18:03] <moritz_> VXZ: talk to Util 

[18:04] <TimToady> if it's a role, we can also have fixed points larger than 1, like Fix[1_000_000_000]  # gdp scale :)

[18:04] *** c1sung left
[18:05] *** jaldhar joined
[18:05] *** c1sung joined
[18:06] <VXZ> Util: trying that os x binary...dyld complaining about not being able to find /sw/lib/libgmp.3.dylib...let me know what I can do to be more informative

[18:07] <arnsholt> VXZ: Do you have fink installed?

[18:07] <kent\n> are there any static-builds of rakudo that can just be downloaded and run? waiting for compile and getting it to work is such a barrier to entry

[18:07] <VXZ> arnsholt: Nope.  Didn't know it was needed.  Perhaps the install doc should mention it?

[18:08] <kent\n> ( for .nix  that is )

[18:08] <arnsholt> VXZ: It shouldn't be a requirement =)

[18:09] <arnsholt> But it could be that Util is using it and missed a dependency

[18:09] *** hanekomu joined
[18:09] <PerlJam> kent\n: I think you can get .deb and .rpm packages

[18:09] <moritz_> kent\n: the rakudo homepage has links to some linux binary packages

[18:09] <kent\n> PerlJam: I was just wanting a tar.bz2/tar.gz I could untar in ~/ and have it JustWork 

[18:09] *** c1sung left
[18:10] <Util> kent\n: We recognized exactly that point in a #phasers meeting last month. This OS X binary is the first of several platforms; good to know that at least one person would want it on Linux too.

[18:10] <moritz_> rakudo and parrot aren't relocatable

[18:10] <Util> VXZ: Thanks! That is just the kind of info I was looking for!

[18:11] <VXZ> Util: Np.  :)  Yeah, it's a nearly-pristine install of 10.6.  So...I don't even have a /sw

[18:11] *** c1sung joined
[18:11] <Util> moritz_: I have partially solved the relocation problem, at least on OS X.

[18:11] *** wamba left
[18:11] * arnsholt goes to try the OS X binary as well

[18:12] <arnsholt> I'm pretty sure I have a libgmp, but in /opt/local and not /sw (since I use MacPorts)

[18:13] <Util> arnsholt: You may need to ln -s /opt/local/lib/libgmp.3.dylib /sw/lib/libgmp.3.dylib

[18:13] <arnsholt> Yeah, probably =)

[18:14] <colomon> #phasers in 46 minutes?

[18:14] <arnsholt> You're using fink or somesuch, right?

[18:15] *** hanekomu left
[18:15] * kent\n wonders how to get -I lib # equivlaent in rakudo 

[18:15] <arnsholt> Util: Symlinking gave me a new error

[18:15] <Util> A mix of fink and manual installs, most dated from before I started keeping notes.

[18:15] <kent\n> 'man rakudo' # very unhelpful :(

[18:16] <moritz_> kent\n: contributions for a better manapge are welcome

[18:16] <arnsholt> It finds the lib, but it's the wrong architecture

[18:16] <arnsholt> Your perl6 is i386 and my lib is x64

[18:17] <Util> kent\n: BEGIN { @*INC.push("the/path/of/my/lib") };

[18:17] *** jaldhar left
[18:18] <Util> (Not a permanent solution; `use lib` not implemented yet)

[18:18] <arnsholt> There's also PERL6LIB=/path/to/stuff perl6

[18:19] <Util> arnsholt: OK, so I must either bundle libgmp, or tell Parrot to build as if I lack it.

[18:19] *** MayDaniel left
[18:20] <kent\n> Util: thanks. 

[18:21] <arnsholt> Util: Yeah, I think so

[18:23] <Util> I want to bundle, but creating the scaffolding to allow it will be complicated. I will rebuild without it for now, and add it back in later.

[18:23] *** c1sung left
[18:24] *** kanishka left
[18:25] *** kanishka joined
[18:29] <kent\n> Is there anything like  Path::Class qw( dir file ) + MooseX::Types::Path::Class in P6 yet?

[18:30] <[Coke]> Util: relocation problem - did you fix the "really linked against build dir" problem too?

[18:32] *** plobsing left
[18:33] *** dakkar left
[18:33] <[Coke]> which syn defines Num?

[18:35] <colomon> S32

[18:35] <colomon> what do you need to know?

[18:35] <Util> [Coke]: `install_name_tool` lets me change the installed exes to look for the dylibs at their new locations. Probably not the long-term solution, but it works for now.

[18:36] <TimToady> num is basically just a C double

[18:36] <TimToady> Num is just the boxed version of that

[18:36] <[Coke]> Util: ah, that's the trick that the port uses.

[18:36] <Util> [Coke]: Which port is that?

[18:36] <[Coke]> TimToady: ROODE is asking why Num includes .Rat(); trying to find a Syn to point him at.

[18:36] <[Coke]> Util: ... the macport

[18:36] <Util> thx

[18:37] <TimToady> and the Num api is in S32-setting-library/Numeric.pod, presumably

[18:37] <[Coke]> colomon: S32 is the setting. Is the setting "core" ? (is the part of core you can write in perl6?)

[18:38] <TimToady> we don't use the word "core" much

[18:38] <colomon> I'm not quite sure what you mean by that.

[18:38] <colomon> Most of the Num operations are a direct call into Parrot.

[18:38] <TimToady> the setting is the namespace that is outside your compilation unit

[18:38] <[Coke]> I don't see the rat function in there, just the Rat type.

[18:38] <TimToady> and I mean lexical namespace when I say that

[18:39] *** Juerd left
[18:39] <[Coke]> by core I mean: anything calling itself perl6 will have to have it.

[18:39] *** Juerd joined
[18:39] <TimToady> all classes are automatically recognized as conversion functions/methods

[18:40] <TimToady> the precision to Rat() is likely undocumented

[18:40] <[Coke]> ah, so that's really a cast between types?

[18:40] <[Coke]> (lossy)

[18:40] *** pmichaud joined
[18:40] <TimToady> yes

[18:40] <colomon> Yes.

[18:40] <colomon> method Rat(Real $epsilon = 1.0e-6)

[18:41] *** fhelmberger left
[18:41] <pmichaud> is #phasers still at 18:30 utc?

[18:41] <[Coke]> Thanks.

[18:41] <TimToady> epsilon?  doesn't seem very infinitesimal...

[18:41] <pmichaud> or is it 19:30 utc?

[18:41] *** cogno joined
[18:41] <[Coke]> I predict his followup question will be: "Why is Rat a builtin type?". ;)

[18:42] <moritz_> pmichaud: 19:00 utc iirc

[18:42] <pmichaud> moritz_++  # thanks

[18:42] <moritz_> ie in ~18min

[18:42] <pmichaud> so, #phasers in 18

[18:43] <colomon> yes

[18:43] <Util> For future reference, the /topic in #phasers shows the meeting time.

[18:44] <pmichaud> D'oh!  Util++

[18:44] <pmichaud> I rarely see the topics... but yes, it was there when I re-joined the chan.

[18:45] <colomon> I'm always wondering how UTC corresponds to local time.  ;)

[18:45] <[Coke]> ... wierd. google comp.lang.parrot calendar, I'm not seeing

[18:46] <pmichaud> one of my previous jobs meant doing nearly all of my work in utc, so I've learned to keep track of both :-)

[18:46] <Util> You can do a bare /topic to force the topic to display as if it were a message; I have to do that to see long topics.

[18:48] <moritz_> colomon: do you know of date --utc  ?

[18:48] <colomon> doesn't work on the mac

[18:48] <colomon> though if I remembered it, I suppose I could always log into one of the linux boxes to check.

[18:48] <colomon> except I think their time is drifting again.  :\

[18:51] *** mtk left
[18:51] <pmichaud> I often use    "TZ=UTC0 date"

[18:51] <pmichaud> works in places where --utc isn't available

[18:51] <PerlJam> date -u  ?

[18:51] *** mtk joined
[18:51] *** rpr_ joined
[18:51] <PerlJam> (where is that not available?)

[18:52] <colomon> ah, date -u works

[18:52] <colomon> (on OS X)

[18:53] <TimToady> the terminal should just highlight utc times with a popupable local time :)

[18:54] <TimToady> like it does with already with URIs

[18:56] *** stkowski joined
[19:02] <diakopter> TimToady: have you thought any further about my whine for signature aliases?  I realize you said "so I'd just go with Callable[:()] for now", but what I was asking for was a way to alias *those* signatures/annotations to a much shorter symbol.

[19:02] <TimToady> all types can be aliased with subset

[19:03] <diakopter> oh

[19:03] <TimToady> #phasers, btw

[19:03] <diakopter> I didn't understand that from http://irclog.perlgeek.de/perl6/2011-01-03#i_3145363

[19:03] <diakopter> oh

[19:04] *** estrabd is now known as estrabd_reading

[19:05] *** c1sung joined
[19:09] <diakopter> TimToady: but now I get it, usthinks

[19:09] <diakopter> er, usthink

[19:10] *** c1sung left
[19:18] *** shi left
[19:25] *** cogno left
[19:27] *** dual left
[19:31] *** Chillance left
[19:31] <masak> colomon: skipping "that test" in p4's base-test is OK. especially if passing it would sacrifice elegance.

[19:32] <masak> colomon: in fact, you're free to disregard the base-test files altogether... they're just there to make sure there is *some* common ground between my vision of the problem and people's solutions.

[19:32] *** bacek joined
[19:33] *** dual joined
[19:34] <arnsholt> masak: I hope the secret test cases for p4 are bit cleverer though

[19:34] <arnsholt> If not, evaluating the submissions is gonna be a pain =)

[19:35] <masak> s/If not, //

[19:35] <masak> :)

[19:35] <arnsholt> I suppose

[19:35] <colomon> \o/

[19:35] <masak> arnsholt: I would object, but then I'd have to explain why it ain't necessarily so. and I don't want to spoil the fun.

[19:36] *** plobsing joined
[19:36] <arnsholt> masak: Then we are two ;)

[19:37] <masak> I'm glad to hear colomon, arnsholt and Util are all working on solutions.

[19:38] <masak> I'm slightly *surprised* to see you discussing your solutions in the backlog. but I forget that you are trusting, non-conspiratory people :)

[19:38] <arnsholt> "Working on a solution" might be overselling a bit, but I've done the research necessary for work at least =)

[19:38] <masak> arnsholt: ok. you realize that the deadline is in 10 days, right?

[19:38] <arnsholt> Heh. It's hard not to discuss it for me. I quite like discussing this kind of thing

[19:39] <colomon> +1

[19:39] <arnsholt> Yeah, it pains me greatly that I don't have time to complete all the tasks =)

[19:39] <arnsholt> Especially p4 was fun discovering some cleverness for

[19:39] <masak> yeah, but don't you like to sneak in the best solution, win the books, and THEN talk about it? :P

[19:40] <arnsholt> Well, that would be fun. But I've been spending most of the christmas holidays doing absolutely nothing, so I don't have the time to do that =)

[19:41] *** mtk left
[19:41] <arnsholt> I'm pretty sure I'm out on number of completed tasks

[19:41] <Tene> masak: For me, and I expect several others, if I wanted books, I'd just buy them.  A competition like yours is fun in itself, rather more than just the value of books.

[19:41] <colomon> +1

[19:41] <PerlJam> Tene++

[19:41] <arnsholt> Yeah, it's mostly the chance to do stuff with Perl 6

[19:42] <colomon> Well, I wouldn't mind a few books.  ;)

[19:42] <arnsholt> True, true. I did say mostly =D

[19:42] <Tene> masak: as well, only one person will enjoy winning, but everyone can enjoy talking about it together.

[19:42] <masak> :)

[19:42] <colomon> But I'm doing it for the craic.

[19:42] <arnsholt> colomon: craic?

[19:42] <Tene> So if I were trying to optimize my expected utility, I'd anticipate more incremental expected fun from a conversation than from trying to keep secrets.

[19:42] <colomon> arnsholt: http://en.wikipedia.org/wiki/Craic

[19:42] <pmichaud> I even thought about contributing to increase the size of masak++'s prize.... or to allow masak++ to declare a second winner that I'd fund

[19:43] <masak> I'm going to host a context next year. and I'll spend all year thinking of a way to get you guys to be more secretive and avaracious :P

[19:43] <pmichaud> since I'm not planning to compete :)

[19:44] <arnsholt> masak: I suggest mind controlling space satelites

[19:44] <colomon> arnsholt: normally I'd spell it crack, but I thought that would just cause more confusion.

[19:44] <Tene> masak: Next year you should solicit contributions to the reward.

[19:44] <Tene> I'd have contributed.

[19:44] * TimToady always enters contexts

[19:44] <pmichaud> maybe I'll just offer to fund an "honorable mention" prize if masak++ would like to award one

[19:44] * pmichaud always loses contexts

[19:44] <masak> arnsholt: how come, it didn't help this year. er. I mean "interesting idea". heh.

[19:44] *** stkowski left
[19:44] * colomon is context-free

[19:44] *** stkowski joined
[19:45] <arnsholt> colomon: Nifty concept. Never encountered that before

[19:45] <masak> pmichaud: I think that might become very much needed. we have 18 contestant, someone is bound to be honourable and mentionworthy. :)

[19:45] <Tene> masak: speaking of optimizing expected utility, HP:MoR is updating again.

[19:45] <masak> colomon: maybe you're already on craic.

[19:45] <pmichaud> masak:  plan on being able to award a second prize then.  you can also decide the amount

[19:45] <masak> Tene: \o/

[19:45] <pmichaud> (presumably it would be for less than the first prize :)

[19:46] <pmichaud> er

[19:46] <pmichaud> rephrase

[19:46] <masak> pmichaud: :)

[19:46] <pmichaud> (presumably it would not be greater than the first prize)

[19:46] <pmichaud> (it could be ==)

[19:46] <masak> depends on the honourableness, I guess.

[19:47] <Tene> I'm rather entertained by greater reward for second place.

[19:47] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[19:47] <Tene> Greater reward for second place would rather *encourage* sharing and cooperation.

[19:48] <Tene> Which I rather like.

[19:48] <masak> I missed #phasers today, because a bus driver thought I said "middle of nowhere", not "$home".

[19:48] <masak> Tene: think of the first price as the second price, then. :P

[19:49] <flussence> masak: that's because $HOME is case-sensitive :P

[19:49] * flussence ducks

[19:49] <masak> s:g/price/prize/

[19:49] <masak> d'oh!

[19:49] <masak> I should have shouted at him. I'll do that next time I see him.

[19:52] <arnsholt> This channel is pleasingly random

[19:53] <pmichaud> $home would've worked in csh

[19:53] <pmichaud> but it's probably the only thing that works in csh :)

[19:54] <Su-Shee> good evening everyone.

[19:54] <pmichaud> Su-Shee!  o/

[19:54] <colomon> \o

[19:55] *** mtk joined
[19:55] <Util> Now configured without gmp, pcre, opengl, zlib, gettext, icu, libffi, or readline :

[19:55] <Util> http://s3.datasaw.com.s3.amazonaws.com/Rakudo_Star_2010-12_experiment_2.dmg

[19:57] <masak> Su-Shee: \o

[19:57] <tadzik> ~~

[19:58] <Su-Shee>  ~~ should have been called surf operator.. it looks like riding the wave.. ;)

[19:58] <tadzik> :)

[20:00] <masak> the pair-o'-worms operator.

[20:01] *** estrabd_reading is now known as estrabd

[20:02] <Su-Shee> wiggle op would also have been nice, because you could say something like "just wiggle it!" 

[20:02] <arnsholt> Util: That looks good to me

[20:02] <arnsholt> otool -L show no weird libs being referenced as well

[20:03] <masak> Su-Shee: from now on, I will tell people to just wiggle it.

[20:04] <PerlJam> Su-Shee: except that I call it "squiggle"

[20:04] <PerlJam> ;)

[20:04] <Su-Shee> works as verb as well :)

[20:05] *** plobsing left
[20:08] <Util> arnsholt: thanks!

[20:09] *** c1sung joined
[20:10] *** shi joined
[20:13] *** c1sung left
[20:17] *** stkowski left
[20:17] *** stkowski joined
[20:19] *** gabhi joined
[20:19] *** molaf left
[20:19] *** tylercurtis joined
[20:22] *** coldhead joined
[20:24] <tylercurtis> Hi, #perl6.

[20:25] *** amkrankruleuen left
[20:25] <colomon> o/

[20:26] *** amkrankruleuen joined
[20:26] <TimToady> I kinda think of it as the "aloha" operator

[20:26] <tadzik> tylercurtis: o/

[20:28] <tadzik> snarkyboojum: it's Niecza, not Niezca (twitter) :)

[20:29] *** y3llow_ joined
[20:29] *** pothos_ joined
[20:29] <masak> tylercurtis: hi!

[20:30] *** kanishka1 joined
[20:30] *** y3llow left
[20:30] *** y3llow_ is now known as y3llow

[20:30] *** pothos left
[20:30] *** pothos_ is now known as pothos

[20:31] *** kanishka left
[20:35] *** gabhi left
[20:36] *** c1sung joined
[20:40] *** c1sung left
[20:47] *** c1sung joined
[20:54] *** c1sung left
[20:59] *** MayDaniel joined
[21:00] *** c1sung joined
[21:01] *** vastak left
[21:03] *** plobsing joined
[21:05] *** dukeleto left
[21:05] *** dukeleto joined
[21:06] *** bacek left
[21:08] *** takadonet left
[21:08] *** c1sung left
[21:16] <VXZ> Util: that one works good here too...any tests or anything I should run?

[21:18] *** V15170R joined
[21:19] *** bacek joined
[21:21] *** c1sung joined
[21:22] <Util> VXZ: thanks for testing! I am not looking for any particular functional tests yet, just "it runs on my system" and "I don't understand X, so explain X better"

[21:25] *** lue left
[21:26] <VXZ> Util: nope, seems to work fine.  Follows the usual mac install process and packaging format and everything, ought to be easy for anyone to figure out.  Maybe put an alias to perl6 with a pretty icon in the root?  *shrug*

[21:29] *** bacek_ joined
[21:30] *** c1sung left
[21:32] <Util> VXZ: The "pretty icon" is in the works; Camelia is modelling for icon and for the background of the root folder.

[21:32] <Util> I am not sure what you mean by "alias to perl6", though. Can you describe it more precisely?

[21:33] *** bacek left
[21:34] <VXZ> An alias in os x is like a shortcut in windows.

[21:34] <VXZ> perl6 being bin/perl6

[21:36] <[Coke]> Util: via the finder instead of the shell.

[21:36] <Util> Do you mean a symlink?

[21:36] <[Coke]> symlink is for the shell. Alias is for the Finder.

[21:37] <[Coke]> I don't particularly care for aliases, myself. not sure if it's because I'm using using the command line.

[21:37] <VXZ> I agree, I'm just looking for ways to make it more friendly for the mac gui people.

[21:38] <Util> OK, let's approce this from the other direction. What is this supposed to *do*? Double-click on it, and it opens a Terminal session with the $PATH set correctly? I am just fuzzy on the goal of the suggestion.

[21:38] <Util> s/approce/approch/

[21:38] <VXZ> Also, you could change the structure of the folder to be a .app (with is just a folder with a special bit set and a particular format that gives os x some ideas of what to run when you click on it, which file types it should be associated with, etc)

[21:39] <VXZ> Trying to make it easier for less-knowledgable people to play with it, or for gui-inclined people to integrate it into their desktop and workflow.

[21:39] <arnsholt> While we're at it, I'd suggest changing the _ in the folder name to a space as well

[21:41] <VXZ> And yeah, I was thinking it could just launch perl6...you can already double-click on it directly in the finder, and it opens a terminal for you automatically, nothing to do there.

[21:42] <Util> I am considering .app format, just because it provides auto-support of bundled libgmp, etc. I had rejected .app previously because it is *not* an app; it has no sensible base function. I will look harder at this; I see that it is what users would expect, at the least.

[21:43] <Util> arnsholt: Noted, thanks! # underscore in name

[21:44] <VXZ> Util: plus, then, you can do the filetype associations, in case a script doesn't have a shebang, I think

[21:45] *** alester joined
[21:47] <Util> VXZ: filetype associations; noted, thanks!

[21:49] *** tylercurtis left
[21:49] <VXZ> Pretty sure .app allows you to do some other stuff, too, but not sure what.  Not a big mac fan.  I just own one.

[21:50] <VXZ> Util: btw, thanks for doing this!  Anything that makes p6 more accessible to more people is, in my mind, a Good Thing(tm).

[21:51] *** Patterner left
[21:53] *** Psyche^ joined
[21:53] *** Psyche^ is now known as Patterner

[21:59] *** M_o_C left
[22:06] *** lamstyle left
[22:09] *** amkrankruleuen left
[22:09] *** amkrankruleuen joined
[22:16] *** shi left
[22:17] *** c1sung joined
[22:19] *** bacek__ joined
[22:22] *** lamstyle joined
[22:22] *** bacek_ left
[22:26] *** Franek joined
[22:27] *** drake1 joined
[22:28] <drake1> can I please have those video presentation links about perl6 again?

[22:28] <drake1> they were fairly good

[22:29] *** shi joined
[22:30] *** c1sung left
[22:31] <masak> drake1: sorry, we only hand out one video presentation link per customer.

[22:31] <drake1> oh

[22:31] <masak> if you lose it, you have to wait until our next Special Offer.

[22:31] <drake1> I thought they functioned like ads

[22:32] <masak> we like to keep scarcity in the picture.

[22:32] <drake1> fine

[22:32] <drake1> extremely feature rich

[22:32] <PerlJam> drake1: they're on perl6.org aren't they?

[22:32] <masak> drake1: which video presentations do you mean? szabgab's?

[22:33] <PerlJam> masak: there are *more* than just szabgab's?

[22:33] <drake1> the one about argument aignatures

[22:33] <drake1> signatures

[22:33] <masak> PerlJam: ssh! let me handle the PR here :P

[22:33] <drake1> *giggle*

[22:34] <masak> drake1: http://szabgab.com/blog/2010/08/perl6-subroutines-and-home-made-operators.html

[22:34] *** molaf joined
[22:34] <masak> der

[22:34] <drake1> great masak

[22:34] <masak> drake1: don't listen to PerlJam, there's lots and lots of Perl 6 instruction videos! :)

[22:34] <masak> we have to ask people to slow down making them.

[22:35] *** stkowski left
[22:35] <PerlJam> masak: careful what you wish for  :)

[22:36] <masak> hm, true.

[22:36] <masak> szabgab++ # for making those videos

[22:37] <masak> today's autopun spotted in the wild: "Apple Cancels Press Conference on iPhone Alarm Glitch after Steve Jobs Oversleeps"

[22:37] * PerlJam notes he's spent a good portion of his time with Perl on IRC telling people "that book/tutorial/whatever is crap, see perl.org"

[22:37] <PerlJam> I'd hate to have to repeat that with Perl 6

[22:38] <PerlJam> (although, I suppose I'll spend a good bit of time telling people instead, "that's for Perl 5, what you want it perl6.org")

[22:38] <drake1> the transcript is really helpful. thanks

[22:39] <drake1> sub fn(Int $i where { $i < 500 } ) { ...

[22:40] <drake1> that's pretty obvious restraints on the signature

[22:40] <masak> yes, it sure beats no signatures, as with Perl 5.

[22:40] <masak> or less-than-awesome signatures, as with most other languages :P

[22:41] <drake1> I still love to shift and ( $a, $b, $c ) = @_ # list context

[22:41] <tadzik> I don't :)

[22:41] <drake1> hmm

[22:42] <huf> as always, there's a module for that on CPAN :) 

[22:42] <tadzik> but I started to like Perl 5 less as I use more 6

[22:42] <huf> but that still doesnt make it awesome-signatures, only less-than-awesome

[22:42] <drake1> perl6 seems perlfect

[22:43] *** pyrimidine left
[22:44] <drake1> in C it's pretty standard to add the signature like in perl5, for the `ed' scripts

[22:44] <drake1> when they're no all int's

[22:45] <drake1> the sematic tokens, however, have always had room for it

[22:45] <drake1> semantic

[22:49] <tadzik> http://goo.gl/BQCxh (SCNR)

[22:51] *** kaare_ left
[22:52] <drake1> great thing about perl6, it's now with extra tasteful cast operators

[22:52] <TimToady> or at least tasty

[22:52] <drake1> yeah

[22:53] *** plobsing left
[22:54] <drake1> Perl6 is actually in the Future Directions of www.gangsterfreak.com/vcfed

[22:55] *** c1sung joined
[22:55] *** _twitch joined
[22:56] <drake1> can the similarity of "4k" and "fork" be a straight coincidence?

[22:56] <Alias> Quick Question: Will Perl 6 allow for fast subroutine calls?

[22:56] <Alias> In Perl, the limiting factor for many things seems to be that the underlying minimum cost of a subroutine call is rather high

[22:57] <Alias> (Methods even more so)

[22:59] *** c1sung left
[23:03] <drake1> you can't call them from your assembly codes either

[23:04] <drake1> or maybe?

[23:05] <pmurias> Alias: according to sorear subroutines are already faster in niecza than they are in Perl 5

[23:05] <drake1> Perl has always been a bit slow but incredibly handy

[23:06] <Alias> neat

[23:06] <pmurias> s/subroutines/subroutine calls/

[23:06] *** bacek__ left
[23:07] <snarkyboojum> I wonder how that would be/has been benchmarked

[23:08] <pmurias> calling a sub 1000x times?

[23:09] *** _twitch left
[23:09] *** hercynium left
[23:09] <Alias> snarkyboojum: Some of the benchmarks in those online multi-language shootout claim to test something or another, but they require all languages implement the code directly as a copy of the C code

[23:10] <Alias> snarkyboojum: And when you make it as sub-call heavy as the C version it seems to end up being 10 or more times slower than if you could just inline the most intensive ones

[23:12] <snarkyboojum> Alias: ah - language comparison is tough I guess

[23:13] <Alias> Especially when they insist things be implemented as if you are writing C

[23:13] <TimToady> ***************

[23:14] <TimToady> obviously, we just need a Perl 6 compiler that's a little smarter about inlining and unrolling... :)

[23:15] <Alias> right! :)

[23:15] <Alias> Actually, I'm seeing something similar when I'm writing OpenGL code

[23:15] <Alias> I'm having to be completely paranoid about avoiding function calls anywhere I can

[23:17] <Alias> Anything that is O(Frame * Object) is going to be hit 60k times a second, and the function/method call overheads are starting to add up to a non-trivial percentage of total CPU consumption

[23:17] <drake1> I like the ease of hash associative sub routines in Perl

[23:17] <Alias> Although that's probably being exadurated quite a bit by the profiler

[23:17] <TimToady> drake1: not sure what you mean by that

[23:18] <drake1> then I don't have to link up the "hal" object that I wrote in m4 $^|as -o $<

[23:18] <drake1> TimTody: like spaghetti declarations

[23:19] <drake1> nested sub's in hash definitions

[23:20] <TimToady> that's mostly just a consequence of having first-class functions

[23:20] <snarkyboojum> has Niecza implemented loops yet?

[23:20] *** icwiener joined
[23:21] *** MayDaniel left
[23:21] <TimToady> niecza: .say for 1..10

[23:21] <p6eval> niecza v1-82-gf7b008c: OUTPUT«===SORRY!===␤Unhandled statement modifier for at /tmp/mGgoJgOKLu line 1 (EOF):␤------> .say for 1..10⏏<EOL>␤Can't call method "statement_level" on unblessed reference at /home/p6eval/niecza/src/Niecza/Actions.pm line 2383.␤Check

[23:21] <p6eval> ..failed␤»

[23:21] <TimToady> niecza: for 1..10 { .say }

[23:21] <p6eval> niecza v1-82-gf7b008c: OUTPUT«===SORRY!===␤Can't call method "statement_level" on unblessed reference at /home/p6eval/niecza/src/Niecza/Actions.pm line 2383.␤Attribute (do) does not pass the type constraint because: Validation failed for 'Op' with value undef (not isa Op) at

[23:21] <p6eval> ../home/p6eval/niecz…

[23:22] <TimToady> niecza: for 1,2,3 { .say }

[23:22] <p6eval> niecza v1-82-gf7b008c: OUTPUT«===SORRY!===␤Can't call method "statement_level" on unblessed reference at /home/p6eval/niecza/src/Niecza/Actions.pm line 2383.␤Attribute (do) does not pass the type constraint because: Validation failed for 'Op' with value undef (not isa Op) at

[23:22] <p6eval> ../home/p6eval/niecz…

[23:22] <TimToady> niecza: loop { say "hi"; last }

[23:22] <p6eval> niecza v1-82-gf7b008c: OUTPUT«===SORRY!===␤Action method statement_control__S_loop not yet implemented at /home/p6eval/niecza/src/Niecza/Actions.pm line 55.␤Check failed␤»

[23:22] <pumphaus> hum, it seems the rakudo star build system seems to be broken

[23:22] *** bacek__ joined
[23:22] <snarkyboojum> doesn't look like it eh

[23:22] <pumphaus> it assumes an already exisiting perl6 binary in $PREFIX

[23:22] <TimToady> snarkyboojum: the answer appears to be a close approximation of "no"

[23:23] <TimToady> well, there's always recursion...

[23:23] *** Grrrr left
[23:23] <snarkyboojum> which might not be the best way for benchmarking a number of subroutine calls :D

[23:24] <TimToady> niecza: map { .say }, 1,2,3

[23:24] <p6eval> niecza v1-82-gf7b008c: OUTPUT«===SORRY!===␤Can't call method "statement_level" on unblessed reference at /home/p6eval/niecza/src/Niecza/Actions.pm line 2383.␤Attribute (do) does not pass the type constraint because: Validation failed for 'Op' with value undef (not isa Op) at

[23:24] <p6eval> ../home/p6eval/niecz…

[23:24] <TimToady> niecza: my @x = map { .say }, 1,2,3

[23:24] <p6eval> niecza v1-82-gf7b008c: OUTPUT«===SORRY!===␤Can't call method "statement_level" on unblessed reference at /home/p6eval/niecza/src/Niecza/Actions.pm line 2383.␤Attribute (do) does not pass the type constraint because: Validation failed for 'Op' with value undef (not isa Op) at

[23:24] <p6eval> ../home/p6eval/niecz…

[23:24] <TimToady> niecza: my @x = map -> $x { $x.say }, 1,2,3

[23:24] <p6eval> niecza v1-82-gf7b008c: OUTPUT«1␤2␤3␤»

[23:24] <TimToady> there's a loop!

[23:25] <snarkyboojum> building niecza has improved quite a bit on OS X over the last couple of months anyway - Just Worked the other day

[23:25] *** Grrrr joined
[23:25] <TimToady> niecza: my @x = for 1,2,3 -> $x { $x.say }

[23:25] <p6eval> niecza v1-82-gf7b008c: OUTPUT«===SORRY!===␤Word 'for' interpreted as a listop; please use 'do for' to introduce the statement control word at /tmp/k3QkznPnEQ line 1:␤------> my @x = ⏏for 1,2,3 -> $x { $x.say }␤Unexpected block in infix position (two terms in a

[23:25] <p6eval> ..row) at /tmp/k…

[23:25] <TimToady> niecza: my @x = do for 1,2,3 -> $x { $x.say }

[23:25] <p6eval> niecza v1-82-gf7b008c: OUTPUT«1␤2␤3␤»

[23:25] <TimToady> ooh, there's another loop

[23:26] <masak> tadzik: the more I use Perl 6, the more I like and respect Perl 5, too.

[23:26] <snarkyboojum> specifying the series explicitly is no fun :P

[23:26] <TimToady> niecza: my @x = do for 1 .. 3 -> $x { $x.say }

[23:26] <p6eval> niecza v1-82-gf7b008c: OUTPUT«␤Unhandled Exception: System.Exception: Unable to find lexical &infix:<..> in ANON␤  at Niecza.CLRBackend.NamProcessor.ResolveLex (System.String name, System.Int32& uplevel, Boolean core) [0x00000] in <filename unknown>:0 ␤  at

[23:26] <p6eval> ..Niecza.CLRBackend.NamProcessor.RawAccessLex (System.St…

[23:26] <TimToady> niecza: my @x = do for 1 ... 3 -> $x { $x.say }

[23:26] <p6eval> niecza v1-82-gf7b008c: OUTPUT«␤Unhandled Exception: System.Exception: Unable to find lexical &infix:<...> in ANON␤  at Niecza.CLRBackend.NamProcessor.ResolveLex (System.String name, System.Int32& uplevel, Boolean core) [0x00000] in <filename unknown>:0 ␤  at

[23:26] <p6eval> ..Niecza.CLRBackend.NamProcessor.RawAccessLex (System.S…

[23:29] *** pmurias left
[23:30] <snarkyboojum> I'll place a feature request with sorear asking for loops :)

[23:31] *** felliott left
[23:33] *** Grrrr left
[23:34] *** Franek left
[23:36] *** felliott joined
[23:36] *** Grrrr joined
[23:37] *** felliott left
[23:38] <drake1> Perl6 can run in a Windows 7 terminal, right?

[23:39] *** felliott joined
[23:40] <drake1> might be a little bit awkward

[23:40] <TimToady> I can't think of any reason why not, as long as it can actually find the executable

[23:41] <drake1> set the path with the path command I guess

[23:42] <drake1> actually I think I'll just copy my Cygwin to it

[23:42] <drake1> cygwin.dll or something like that

[23:42] <drake1> no

[23:42] <TimToady> or just install a fresh cygwin

[23:43] <drake1> I will simply use the ftp client to transfer the program to a proper hosted execution environment

[23:43] *** felliott left
[23:46] *** Franek joined
[23:47] *** plobsing joined
[23:49] <drake1> does anyone know how to: cat > $name on windows?

[23:49] <flussence> s/cat/type/

[23:49] <drake1> ok

[23:50] <drake1> that should be fine

[23:50] <sjohnson> pigwyn

[23:50] <cotto_work> jnthn: ping

[23:50] <drake1> maybe copy type cat hehe heh

[23:51] *** shi left
[23:52] <sorear> good * #perl6

[23:52] <tadzik> good star sorear 

[23:52] <drake1> then it's quick to only update a part of the script before it's concatenated on the host

[23:53] <flussence> if you want to `cat` files on windows, it's "copy file1 + file2 + fileN file.out"

[23:53] <drake1> ok

[23:53] <drake1> then I wont copy type cat

[23:54] <drake1> thanks for the tip

[23:54] <drake1> does anyone have a shell account with perl6 ?

[23:55] <drake1> ed and cat?

[23:55] <flussence> (of course, the last time I used windows was some horrible WinCE embedded thing, so all this is a bit fuzzy)

[23:55] <drake1> eventually through a VPN telnet

[23:56] * sorear -> backlog

[23:57] <sorear> V15170R: monads and roles are not related

[23:57] *** felliott joined
[23:57] *** gbacon left
