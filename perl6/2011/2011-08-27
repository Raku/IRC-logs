[00:06] *** jevin left
[00:08] *** jevin joined
[00:11] *** lichtkind left
[00:13] *** frhodes joined
[00:25] *** frhodes left
[00:26] *** whiteknight joined
[00:27] *** lichtkind joined
[00:28] <lichtkind> TimToady: was .perl your idea?

[00:28] <lichtkind> i mean the dumper method

[00:33] <lichtkind> allright have to sleep now

[00:33] <lichtkind> cheers

[00:33] *** lichtkind left
[00:43] *** lateau_ joined
[00:45] *** lateau_ left
[00:53] *** wk joined
[01:11] *** uasi joined
[01:17] *** colomon left
[01:17] *** uasi left
[01:19] *** wamba left
[01:20] *** jevin left
[01:21] *** jevin joined
[01:24] *** uasi joined
[01:26] *** uasi left
[01:30] *** whiteknight left
[01:33] *** thou left
[02:03] *** Minimiscience joined
[02:04] <soh_cah_toa> phenny: tell masak i was thinking about adding a does_ok() sub to Test. it'd be just like isa_ok() except it would check roles instead of inheritance. what do you think?

[02:04] <phenny> soh_cah_toa: I'll pass that on when masak is around.

[02:07] *** wolfman2000 joined
[02:10] *** s1n joined
[02:12] *** [Coke] left
[02:13] <TimToady> http://rosettacode.org/wiki/Ternary_logic#Perl_6, just for mikemol++

[02:13] *** [Coke] joined
[02:14] <TimToady> decommuting &

[02:16] *** wk left
[02:17] <abercrombie> perl is really concise compared to others..

[02:18] *** risou is now known as risou_awy

[02:21] *** agentzh joined
[02:23] *** Chillance left
[02:27] <mikemol> Neat.

[02:27] * mikemol thanks TimToady++

[02:28] <mikemol> Now, why use multi instead of sub?

[02:29] <soh_cah_toa> mikemol: it allows for subs w/ the same name but different signatures and arity

[02:29] <soh_cah_toa> let me find an example

[02:30] <soh_cah_toa> mikemol: http://www.programmersheaven.com/2/Perl6-FAQ-Multi

[02:31] *** f00li5h joined
[02:31] *** cggoebel left
[02:32] <soh_cah_toa> mikemol: are you familiar w/ method overloading in c++? it's the same thing

[02:32] <soh_cah_toa> well, the same concept that is

[02:36] <mikemol> soh_cah_toa: I've written code with multis before, but none of these have the same name.

[02:37] <soh_cah_toa> oh ok. probably missed the beginning of that conversation :)

[02:37] <soh_cah_toa> why, did someone suggest using 'multi' over 'sub' even for subs w/ different names

[02:37] <mikemol> soh_cah_toa: http://rosettacode.org/wiki/Ternary_logic#Perl_6

[02:38] *** jevin left
[02:38] <mikemol> TimToady++ wrote it. I'm just trying to figure out the specific reason to use multi instead of sub.

[02:39] <soh_cah_toa> for subs that define some type of operator, you need to use multi

[02:39] <soh_cah_toa> notice how they all use prefix:<something>

[02:39] <mikemol> Ah

[02:40] <soh_cah_toa> it's the same as operator overloading which still involves multiple dispatch

[02:40] *** jevin joined
[02:40] <soh_cah_toa> keyword: 'multiple' ;)

[02:41] <soh_cah_toa> oh and s/prefix/infix/ mixed that up

[02:41] <soh_cah_toa> but you get the point :)

[02:41] <mikemol> Well, ¬ uses prefix.

[02:42] *** wolfman2000 left
[02:42] <mikemol> niecza: multi infix<¬> ($a, $b) {$a + $b}

[02:42] *** Minimiscience left
[02:43] <p6eval> niecza v8-55-g0db7bb8: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Malformed block at /tmp/QBL7ilCxu7 line 1:␤------> [32mmulti infix[33m⏏[31m<¬> ($a, $b) {$a + $b}[0m␤␤Parse failed␤␤»

[02:43] <soh_cah_toa> yeah, but it's the only one there. i was referring to the infix's but said prefix by mistake. prefix still needs it though b/c like i said it still uses multiple dispatch

[02:44] <mikemol> I know p6eval can return the the type signatures of objects. I'm wondering if it's possible to extract the ¬ from within &prefix:<¬>()

[02:47] <soh_cah_toa> hm, i'm sure it's possible but i'm not too familiar w/ tinkering around w/ meta objects

[02:47] <soh_cah_toa> perl6: prefix:<+>.^signature

[02:47] <p6eval> niecza v8-55-g0db7bb8: OUTPUT«Unhandled exception: No value for parameter \$v in CORE prefix:<+>␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (CORE prefix:<+> @ 0) ␤  at /tmp/01flJd7uhm line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2047 (CORE C953_ANON @…

[02:47] <p6eval> ..rakudo a55346: OUTPUT«too few positional arguments: 0 passed, 1 (or more) expected␤  in main program body at line 1:src/gen/core.pm␤»

[02:47] <p6eval> ..pugs: OUTPUT«*** No compatible multi variant found: "&prefix:+"␤    at /tmp/BTXdCc6XDy line 1, column 1 - line 2, column 1␤»

[02:48] <soh_cah_toa> yeah...not too sure about that :\

[02:49] <plobsing_> perl6: &prefix:<+>.^signature

[02:49] <p6eval> rakudo a55346: OUTPUT«Method 'signature' not found for invocant of class 'ClassHOW'␤  in main program body at line 22:/tmp/_oWM9nhj8f␤»

[02:49] <p6eval> ..pugs: OUTPUT«*** No such method in class Class: "&signature"␤    at /tmp/WzPVcLW7Vl line 1, column 1 - line 2, column 1␤»

[02:49] <p6eval> ..niecza v8-55-g0db7bb8: OUTPUT«Unhandled exception: Unable to resolve method signature in class ClassHOW␤  at /tmp/KMBY92WAnv line 1 (MAIN mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2047 (CORE C953_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2048 (CORE mo…

[02:49] <plobsing_> perl6: &prefix:<+>.signature

[02:49] <p6eval> niecza v8-55-g0db7bb8: OUTPUT«Unhandled exception: Unable to resolve method signature in class Sub␤  at /tmp/cJS7Fj1Kn1 line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2047 (CORE C953_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2048 (CORE module-…

[02:49] <p6eval> ..rakudo a55346: OUTPUT«get_attr_str() not implemented in class 'Sub'␤  in main program body at line 1:src/metamodel/RoleToInstanceApplier.nqp␤»

[02:49] <p6eval> ..pugs:  ( no output )

[02:50] <plobsing_> pugs: &prefix:<+>.signature.say

[02:50] <p6eval> pugs: OUTPUT«:($?1 is copy)␤»

[02:50] <soh_cah_toa> access to the mop uses the .^ syntax

[02:50] <plobsing_> you don't need the mop

[02:50] <plobsing_> the sub knows its signature

[02:50] <soh_cah_toa> to get the signature?

[02:50] <soh_cah_toa> oh right

[02:50] <soh_cah_toa> the capture or parcel or something right?

[02:51] <plobsing_> using the .^ would ask class Sub for a signature

[02:51] <plobsing_> pugs: &prefix:<+>.WHAT.say

[02:51] <p6eval> pugs: OUTPUT«Sub␤»

[02:55] <soh_cah_toa> that's odd. on my installation that code gives me 'Code()'

[02:55] <soh_cah_toa> rakudo: &prefix:<+>.WHAT.say

[02:55] <p6eval> rakudo a55346: OUTPUT«Code()␤»

[02:56] <plobsing_> I suspect that's a parrot leak, which makes some methods give parrot errors

[02:56] <soh_cah_toa> ok

[02:56] <plobsing_> rakudo, pugs: &prefix:<+>.Str

[02:57] <plobsing_> pugs: &prefix:<+>.Str

[02:57] <p6eval> pugs: OUTPUT«*** No such method in class Sub: "&Str"␤    at /tmp/RyURqwUNRH line 1, column 1 - line 2, column 1␤»

[02:57] <plobsing_> rakudo: &prefix:<+>.Str

[02:57] <p6eval> rakudo a55346: OUTPUT«get_attr_str() not implemented in class 'Sub'␤  in main program body at line 1:src/metamodel/RoleToInstanceApplier.nqp␤»

[02:57] <soh_cah_toa> you're right. now it's class 'Sub'

[02:58] *** cexsum left
[03:00] <soh_cah_toa> mikemol: anyway, i digress. there are quite a few p6 super ninjas that come around a little later that can help you w/ that a lot more than i can. just stick around :)

[03:01] <plobsing_> in attempting to answer the original question (getting just the 'x' out of &fixity:<x>), I don't see a method on the sub to do that

[03:01] <plobsing_> rakudo: &infix:<+>.^methods(:local)

[03:01] <p6eval> rakudo a55346:  ( no output )

[03:01] <plobsing_> rakudo: &infix:<+>.^methods(:local).say

[03:01] <p6eval> rakudo a55346: OUTPUT«candidatesmultiname␤»

[03:02] <plobsing_> rakudo: say for &infix:<+>.^methods(:local)

[03:02] <p6eval> rakudo a55346: OUTPUT«␤␤␤»

[03:02] <plobsing_> rakudo: .say for &infix:<+>.^methods(:local)

[03:02] <p6eval> rakudo a55346: OUTPUT«candidates␤multi␤name␤»

[03:02] <plobsing_> my copy must be old, I get a different result

[03:03] <soh_cah_toa> plobsing_: that reminds me, what does the :local adverb indicate for the .^methods() method? the phrase "local method" doesn't make sense to me

[03:03] <plobsing_> local means not to look up the inheritance heirarchy (IIRC)

[03:03] <plobsing_> it prunes out a lot of irrelevant methods

[03:04] <soh_cah_toa> oh, just the methods it defines. i see

[03:06] <ruz> grammar tracer and debugger, suspect these are only useful with master branch only?

[03:07] <TimToady> perl6: say ~&prefix:<+>

[03:07] <p6eval> niecza v8-55-g0db7bb8: OUTPUT«Sub()<instance>␤»

[03:07] <p6eval> ..rakudo a55346: OUTPUT«&prefix:<+>␤»

[03:07] <p6eval> ..pugs: OUTPUT«␤*** No compatible multi variant found: "&prefix:+"␤    at /tmp/BMW1VCzYnP line 1, column 1 - line 2, column 1␤»

[03:10] <TimToady> perl6: say &prefix:<+>.name

[03:10] <p6eval> pugs: OUTPUT«&::␤»

[03:10] <p6eval> ..rakudo a55346: OUTPUT«&prefix:<+>␤»

[03:10] <p6eval> ..niecza v8-55-g0db7bb8: OUTPUT«Unhandled exception: Unable to resolve method name in class Sub␤  at /tmp/YnBxOF4lUe line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2047 (CORE C953_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2048 (CORE module-CORE …

[03:12] <soh_cah_toa> rakudo: &prefix:<+>.name.comb[9]

[03:12] <p6eval> rakudo a55346:  ( no output )

[03:12] <soh_cah_toa> rakudo: &prefix:<+>.name.comb[9].say

[03:13] <p6eval> rakudo a55346: OUTPUT«+␤»

[03:13] <soh_cah_toa> i win :)

[03:13] <soh_cah_toa> although, that's a really horrible way to do it

[03:15] <soh_cah_toa> rakudo: &prefix:<+>.name.comb(/<punct>/)[3].say

[03:15] <p6eval> rakudo a55346: OUTPUT«+␤»

[03:16] <soh_cah_toa> timtowtdi baby ;)

[03:18] *** cexsum joined
[03:19] <mikemol> Does that work with infix, too?

[03:19] <soh_cah_toa> you'd need a different index number though

[03:20] <soh_cah_toa> i totally suggest not using that though. i was just goofing around

[03:20] <TimToady> in any case, niecza doesn't support .name yet

[03:21] <TimToady> and the code in question doesn't run under rakudo for some reason

[03:23] *** Su-Shee_ joined
[03:26] *** Su-Shee left
[03:30] *** colomon joined
[03:41] *** uvtc joined
[03:42] *** abercrombie left
[04:01] *** uvtc left
[04:19] *** kaare_ joined
[04:30] *** kaare_ left
[04:43] <moritz> good morning

[04:43] <soh_cah_toa> good night ;)

[04:44] *** soh_cah_toa left
[04:53] *** kaare_ joined
[05:04] *** birdwindupbird joined
[05:05] *** REPLeffect left
[05:19] *** REPLeffect joined
[05:29] *** Chillance joined
[05:37] *** mj41 joined
[05:37] *** Chillance left
[05:37] *** Chillance joined
[05:41] *** xinming left
[05:49] *** xinming joined
[05:56] *** mj41 left
[06:15] *** sili left
[06:21] *** sili joined
[06:29] *** ZaphrodZenovka left
[06:31] *** ZaphrodZenovka joined
[06:46] *** daniel-s joined
[06:48] *** kst left
[06:49] *** kst joined
[07:04] *** woosley joined
[07:39] *** yath joined
[07:43] *** envi left
[07:48] *** envi joined
[07:51] *** birdwindupbird left
[07:56] *** dual left
[08:06] *** molaf joined
[08:19] *** Su-Shee_ is now known as Su-Shee

[08:23] *** wk joined
[08:25] *** wk left
[08:34] *** wk joined
[09:06] *** wamba joined
[09:08] *** molaf left
[09:10] *** orafu left
[09:10] *** orafu joined
[09:14] *** whiteknight joined
[09:24] *** masak joined
[09:24] <masak> morning, #perl6

[09:24] <phenny> masak: 26 Aug 23:24Z <TimToady> tell masak "receptible" and "pund", unless they were punned.

[09:24] <phenny> masak: 02:04Z <soh_cah_toa> tell masak i was thinking about adding a does_ok() sub to Test. it'd be just like isa_ok() except it would check roles instead of inheritance. what do you think?

[09:28] *** im2ee joined
[09:30] <masak> TimToady: found and fixed s/pund/pound/. I think I might not see what's wrong with "receptible". :/

[09:35] <mberends> ahoj masak: wow. your last blog post was a long read! It must have been a long write :)

[09:36] <masak> mberends: I almost felt like Stevey there for a while.

[09:42] <masak> and yes, it took all of last night :)

[09:42] <mberends> the "do tests" == wrong idea did seem a bit extreme to me, but I get your point. Ad-hoc testing is very natural - before you buy a car, marry someone etc.

[09:43] <mberends> It seemed the ideal opportunity to mention tote as well.

[09:45] <masak> ooh

[09:45] <masak> I'm not saying manual testing is wrong. I'm saying my language sense about the word has been warped.

[09:46] *** wullikam joined
[09:47] <mberends> ah. warped. very reflective :)

[09:48] <masak> adding mention about ad-hoc tests being beneficial and about tote. mberends++

[09:48] <masak> mberends: ooc, is there a situation where you could see yourself making an ad-hoc test, it triggers a failure, and you'd *not* add it as a unit test?

[09:49] <mberends> masak: no. on the contrary, those produce some of the best tests.

[09:50] <masak> then we are in accord.

[09:50] <mberends> violently

[09:50] <masak> ;)

[09:51] <masak> some day I'll write a blog post/talk about turning against your own application, adopting the "exploit" mindset towards it in order to make it more robust.

[09:53] <mberends> hmm, nice idea. The creators are often less able to "turn against" than some users from hell, though.

[09:53] <masak> yes.

[09:53] <masak> that was a (commonly known) problem that I experienced when writing the adventure game.

[09:53] <masak> I kept running along the "happy path".

[09:54] <mberends> :)

[09:54] <masak> it was beta testers who kept finding bugs along various other paths.

[09:54] *** wullikam left
[09:54] <masak> in fact, I plan to re-write the whole game using tests.

[09:54] <masak> maybe not this weekend, but sometime soon.

[10:00] <mberends> excellent - that's the approach you also used with the module installation manager (post-proto). It worked very well.

[10:00] <masak> yes.

[10:00] <masak> and that now, IIUC, forms the basis of Pies.

[10:04] <mberends> today I'll be writing some docs for Niecza - a kind of developer's guide. Testing forms a big part of the procedure.

[10:05] <masak> mberends: Knuth has a nice story in some book about the creation of TeX, about how he kept around an "exploit" file for the TeX engine, in which he had tried to be as evil and out-of-the-box as possible, just to crash-test the program for robustness. ISTR he described that file as one of the most enjoyable things he had written.

[10:05] <masak> mberends++ # docs for Niecza

[10:10] *** pernatiy joined
[10:10] <masak> pernatiy: hi!

[10:24] <cognominal> nom: grammar A is HLL::Grammar

[10:24] <p6eval> nom 2742f6: OUTPUT«===SORRY!===␤No applicable candidates found to dispatch to for 'trait_mod:<is>'. Available candidates are:␤:(Attribute $attr, Any $rw)␤:(Attribute $attr, Any $readonly)␤:(Routine $r, Any $rw)␤:(Parameter $param, Any $readonly)␤:(Parameter $param, Any $rw)␤:(Parameter …

[10:25] <cognominal> is this problem known? that makes grammars not very useful.

[10:25] *** kst left
[10:26] *** kst joined
[10:26] <mberends> cognominal: probably just NYI, such things should work

[10:26] <cognominal> I think every language created with create_language.pl depends on it

[10:29] <masak> nom: say HLL::Grammar ~~ Mu

[10:29] <p6eval> nom 2742f6: OUTPUT«Could not find symbol 'HLL::&Grammar'␤  in mu <anon> at /tmp/uf9g0A3fDr:1␤  in mu <anon> at /tmp/uf9g0A3fDr:1␤␤»

[10:29] <cognominal> HLL::Grammar is not on the path, I checked

[10:29] <cognominal> next is QRegex

[10:29] <mberends> I investigated a little when you previously asked. There are similar examples that work in earlier Rakudo branches, so it *almost* works.

[10:31] <cognominal> the                     $*ST.apply_trait('&trait_mod:<is>', $declarand, $trait);  in Actions.pm is not executed as it should becausse HLL::Grammar is not defined,

[10:32] <cognominal> these are probably some pbc that should be loaded.

[10:33] <mberends> nom: say "%s and %s".sprintf(<salt pepper>);

[10:33] <p6eval> nom 2742f6: OUTPUT«salt and pepper␤»

[10:33] <mberends> S32-str/sprintf.t has tests for the sub form of sprintf(), but not the method form, although the method is specced in S32::Str. I have never seen sprintf() used as a method and it looks unintuitive. Should we de-spec the method form or add tests?

[10:33] <cognominal> I have trouble to understand the bootstrap process so I am not sure what can be loaded at this final stage.

[10:34] <cognominal> where are the pbc loaded anyway?

[10:37] <masak> mberends: +1 for de-spec.

[10:37] *** MayDaniel joined
[10:37] <masak> mberends: sending a message to a format string feels... weird.

[10:37] <masak> mberends: a bit like python's '|'.join(stuff)

[10:38] <mberends> masak: agreed. otoh, there is a general architecture for these kind of functions, and de-speccing would break the order. It  can be argued both ways...

[10:39] <masak> mberends: we already have $value.fmt($format)

[10:39] <mberends> true. I'd like to see a few more opinions before committing

[10:40] <mberends> (not bikeshed ones tho')

[10:42] *** wamba left
[10:45] *** szabgab left
[10:47] <masak> mberends: over the years, I've used .substr, .index, .rindex, .chars, .chomp, .split, .comb, .lc, .ucfirst, .ord, .flip, .trim, .lines more times than I can count. but never .sprintf

[10:49] <mberends> masak: sprintf is a predecessor of variable interpolation, so Perl seldom needs it but C does. Likewise strftime().

[10:52] <masak> well, I'm not disputing that.

[10:52] <mberends> anyhow, where do you think printf() gets its hard work done?

[10:53] <masak> rather, I'm suggesting that if .sprintf has a method form at all, the invocant shouldn't be the format string, but the list of values.

[10:53] <masak> just like with .join

[10:53] <masak> the format string isn't the main agent here, the list of values to be substituted in are.

[10:54] <mberends> agreed, but since the main goal is less surprise for existing sprintf users, let's aim to keep only the sub form.

[10:54] <masak> agreed.

[10:54] <masak> that's also the conservative route, that can later be changed.

[10:55] <masak> nom: say ("a", "b", "c").WHAT

[10:55] <p6eval> nom 2742f6: OUTPUT«Parcel()␤»

[10:56] * mberends feels the "forgiveness" itch overriding the "permission" twitch

[10:56] <masak> nom: augment class Parcel { method sprintf($format) { sprintf $format, |self } }; say ("Martin", "Berends").sprintf("I trust %s %s with a spec commit bit.")

[10:56] <p6eval> nom 2742f6: OUTPUT«===SORRY!===␤augment not allowed without 'use MONKEY_TYPING' at line 1, near "{ method s"␤»

[10:57] <masak> nom: use MONKEY_TYPING; augment class Parcel { method sprintf($format) { sprintf $format, |self } }; say ("Martin", "Berends").sprintf("I trust %s %s with a spec commit bit.")

[10:57] <p6eval> nom 2742f6: OUTPUT«I trust Martin Berends with a spec commit bit.␤»

[10:57] <masak> \o/

[10:57] <mberends> phew

[10:57] <masak> time to make lunch.

[10:58] <mberends> gorgonzola: mouldy by design

[10:58] <masak> nom: say Parcel ~~ List

[10:58] <p6eval> nom 2742f6: OUTPUT«Bool::False␤»

[10:58] <masak> nom: say Parcel.^parents

[10:58] <p6eval> nom 2742f6: OUTPUT«Cool() Any() Mu()␤»

[10:59] <masak> boy, I'm starting to really like those spaces. :)

[11:01] <masak> nom: say Parcel.^parents(:local)

[11:01] <p6eval> nom 2742f6: OUTPUT«Cool()␤»

[11:02] <masak> arguably a slight overloading of both a method and the term "parent", but alright.

[11:02] <masak> I can see the type of consistency that was chose, with .^methods

[11:02] <masak> chosen*

[11:10] <mberends> "was chose" sounds perfectly good in some states ;)

[11:11] <cognominal> it seems that HLL::Grammar depends on protoregex that are NYI :(

[11:13] *** szabgab joined
[11:15] <mberends> o/ szabgab!

[11:22] *** risou_awy is now known as risou

[11:23] <flussence> .oO( oh dear, my urxvt's forgotten how to draw uppercase "m". )

[11:29] *** agentzh left
[11:32] *** ilogger2 joined
[11:32] *** ChanServ sets mode: +v ilogger2

[11:35] *** zby_home_ joined
[11:36] *** wamba joined
[11:44] *** thelazydeveloper joined
[11:46] <masak> flussence: software is hard!

[11:48] *** agentzh joined
[11:52] *** wamba left
[11:56] *** ilogger2 joined
[11:56] *** ChanServ sets mode: +v ilogger2

[12:01] *** jedai_ joined
[12:08] *** jrockway joined
[12:25] <masak> I just want to ++ sorear on general principle.

[12:25] <masak> sorear: thank you for Niecza.

[12:25] <masak> sorear++

[12:32] *** mkramer joined
[12:33] * mberends seconds that. sorear++ :)

[12:42] <masak> having Rakudo only, we're a cyclops. with Niecza and Rakudo, we get stereo vision.

[12:42] <masak> depth.

[12:44] <mberends> Niecza makes http://perl6.org/compilers/features much more interesting.

[12:44] *** lichtkind joined
[12:45] *** woosley joined
[12:46] <masak> someone came to me and jnthn and pmichaud during the YAPC::EU hallway track.

[12:46] <masak> he said "shall we revive Pugs?". pmichaud said "why not?". I said "oh YESS!"

[12:47] <masak> he said he'd proposed it here on channel but got Warnock'd.

[12:47] <masak> we all told him he was just unlucky and should come back and try again.

[12:47] <masak> here's how you revive Pugs, by the way:

[12:47] <masak> 1. get together a dedicated group of about three people.

[12:48] <masak> 2. form a Haskell study group, open to everyone, meeting each week for 15 minutes or so.

[12:48] <masak> 3. ???

[12:48] <masak> 4. Pugs!

[12:49] * masak .oO( maybe 2012 *will* be the end of the world because that's the year Perl 6 will be released )

[12:49] <mberends> I'd like to join, but am daunted by the time probably required to master Haskell

[12:50] <mberends> I suggest offering a grant to someone dedicated enough to revive Pugs

[12:50] <flussence> Haskell doesn't look that hard... :)

[12:50] <flussence> (and I never would've said that before learning p6...)

[12:50] *** wamba joined
[12:51] <arnsholt> mberends: I think the main challenge with Haskell is getting into the whole mindset of it all

[12:52] <arnsholt> (I speak pidgin Haskell from configuring my XMonad)

[12:52] <lichtkind> if @@ gone?

[12:52] <arnsholt> ?

[12:52] <mberends> what was @@ ?

[12:53] <lichtkind> lol context op

[12:56] <lichtkind> so i think that || is also gone

[12:58] <lichtkind> wait im talking crap @@ went to **@ long before

[13:06] <masak> lichtkind: || replaced @@ replaced **@

[13:06] <masak> prefix:<||> is still there, AFAIK.

[13:06] <masak> arnsholt: I also speak pidgin Haskell, from writing some small things on my own, and from reading Pugs source code.

[13:07] *** pochi joined
[13:08] <lichtkind> masak: wiht || i mean positional flattenign of captures which should be still valid

[13:09] <masak> that's what I mean, too.

[13:09] <lichtkind> its no longer ||?

[13:11] <masak> no, I think it still is.

[13:11] <masak> (how did you get the impression from what I said...? oh, forget it...) :P

[13:17] <[Coke]> tl;dr

[13:18] <lichtkind> masak: before i forgot it i wated to say that "lichtkind: || replaced @@ replaced **@" confused me a bit

[13:19] <masak> lichtkind: it's no more confusing than 3 < 4 < 5 IMO.

[13:19] * masak sees http://www.mdk.me.uk/fun/raptor/vader/index.html again and laughs

[13:24] *** abercrombie joined
[13:28] *** wamba left
[13:30] <masak> mberends: re the "exploit" stance: https://twitter.com/carlmasak/status/11820728127066112 :)

[13:34] <mberends> masak: indeed. like calling a class 'is' :)

[13:39] *** donri joined
[13:39] <masak> I sure fell for that one :)

[13:39] <mberends> "Click Download to download Download"

[13:43] <masak> "Click to download Click"

[13:44] <mberends> There is the reverse problem choosing unique names in programming. I seem to collide increasingly with reserved words (eg next, date, list).

[13:45] <masak> ooh, an ancient autopun by quietfanatic: https://twitter.com/carlmasak/status/8715995394

[13:46] <masak> mberends: sigils are nice that way.

[13:47] *** jevin joined
[13:59] *** birdwindupbird joined
[14:12] *** dorlamm joined
[14:12] *** wamba joined
[14:18] *** hirschnase joined
[14:21] *** hirschnase left
[14:25] *** birdwindupbird left
[14:26] * masak realizes djanatyn hasn't been around in a while

[14:26] <masak> hope he comes back sometime.

[14:37] *** woosley left
[14:43] <donri> how you know djanatyn? :p

[14:43] *** JimmyZ joined
[14:47] <masak> he came in here last month.

[14:51] <JimmyZ> good evening, #perl6

[14:51] *** wamba left
[14:51] <masak> 晚上好, JimmyZ 

[14:51] <donri> i want to be missed too, i should leave

[14:51] <lichtkind> haha

[14:51] <donri> nah no one would notice

[14:52] <JimmyZ> 下午好， masak

[14:52] * donri commences arm cutting instead

[14:52] <lichtkind> donri: love always comes for free

[14:52] <lichtkind> cant force it 

[14:53] <donri> can't by me loooove love

[14:53] *** jevin left
[14:53] <donri> buy also

[14:53] <masak> donri: you just reminded me of http://en.wikipedia.org/wiki/Parable_of_the_Prodigal_Son

[14:54] <donri> :D

[14:54] <masak> i.e. there's more joy in someone coming back than in someone being around all the time. :)

[14:56] <donri> yay parrots http://www.picrandom.com/images/6cim.jpg

[14:56] <masak> :)

[14:57] <donri> dat glass

[14:57] *** jevin joined
[15:17] *** isBEKaml joined
[15:30] *** isBEKaml left
[15:32] *** araujo joined
[15:35] *** ilogger2 joined
[15:35] *** ChanServ sets mode: +v ilogger2

[15:35] *** birdwindupbird joined
[15:36] <masak> nom: say "windup".join("bird" xx 2)

[15:36] <p6eval> nom 2742f6: OUTPUT«windup␤»

[15:36] <masak> oh, right. not Python :)

[15:37] <masak> nom: say join "windup", "bird" xx 2

[15:37] <p6eval> nom 2742f6: OUTPUT«birdwindupbird␤»

[15:38] <mberends> nom: "%swindup%s".sprintf("bird" xx 2).say # :P

[15:38] <p6eval> nom 2742f6: OUTPUT«birdwindupbird␤»

[15:43] <JimmyZ> nom: dir

[15:43] <p6eval> nom 2742f6:  ( no output )

[15:44] <JimmyZ> nom: say dir

[15:44] <p6eval> nom 2742f6: OUTPUT«.vim std_mine sprixel Perlito .ccache old_perl5 niecza mono-2.10.1.tar.bz2 .cache partcl-nqp log .pugs_history .bash_history nqp std_hilited 6model _sprixel01 p1 rakudo-star-2011.04.tar.gz .lesshst .aptitude .bashrc .cpanm nom-inst2 rakudo-star-2010.09 .ghc perl5 eval…

[15:44] *** bluescreen10 joined
[15:45] *** JimmyZ joined
[15:45] <moritz> o/

[15:45] *** birdwindupbird left
[15:45] <mberends> o/

[15:45] <lichtkind> mberends: cheers

[15:46] *** birdwindupbird joined
[15:46] <masak> moritz: \o

[15:55] <mberends> lichtkind: hi, how does Kephra get on with Perl 6?

[15:56] <lichtkind> mberends: was pretty much busy with articles

[15:56] <mberends> lichtkind: yes, it was good to see all that activity :)

[15:57] *** hirschnase joined
[15:59] <lichtkind> and the is much more in planing

[16:03] <abercrombie> Do we still have a rakudo August release despite of the memory leaking issue?

[16:03] <moritz> there'll be one, yes

[16:04] <abercrombie> Oh, so the leaking will get resolved in Sept release?

[16:04] <lichtkind> due leaking

[16:06] <moritz> abercrombie: or maybe the Aug release will be after the fix

[16:06] <lichtkind> i con a different problem with my rakudo build; PARROT VM: Could not load bytecode; Incompatible versions of `perl6_ops' oplib, possibly due to loading bytecode generated by an old version of Parrot. Found 3.6.0 but loaded 3.7.0

[16:06] <lichtkind> any clue what i could do?

[16:06] <moritz> lichtkind: remove your installation directory

[16:06] <moritz> lichtkind: which verb did you mean to write instead of 'con'?

[16:06] <lichtkind> had

[16:07] <mberends> enCOuNtered

[16:07] <moritz> mberends++

[16:07] <lichtkind> haha

[16:07] <lichtkind> mberends++

[16:07] <mberends> moritz: everybody knows that! ;)

[16:07] <lichtkind> moritz: you mean rease the dir or change a var?

[16:08] <lichtkind> mberends++

[16:08] <mberends> lichtkind: rease the directory, or erase it of that doesn't work.

[16:08] <mberends> *if

[16:10] <lichtkind> mberends: maybe the pronlem is that i have 2 verson of rakudo compiled

[16:10] <lichtkind> and the one set some env vars

[16:12] <mberends> lichtkind: in that case changing PERL6LIB might help

[16:14] <lichtkind> to late just reased my dir :)

[16:14] <mberends> lichtkind: also check that the other perl6 is not in $PATH

[16:15] <lichtkind> yeah i had the path to the other parrot in $PATH

[16:16] <[Coke]> ni haA 

[16:16] <[Coke]> O_o?

[16:16] <masak> [Coke]: 你好

[16:17] <[Coke]> ni hǎo

[16:18] <[Coke]> (has to be an easier way to type that on os x.)

[16:19] <[Coke]> (than opening up the character input widget and clicking on the combining diacritical.

[16:19] <masak> [Coke]: there are great input modes for Mac OS X.

[16:20] <[Coke]> 你好

[16:21] <[Coke]> for hanzi, yah.

[16:22] * [Coke] will play around.

[16:22] *** daniel-s joined
[16:22] <[Coke]> masak: are you the one that recommend colloquial chinese?

[16:22] <[Coke]> *ed

[16:22] <masak> [Coke]: 是

[16:23] <JimmyZ> dà jiā hǎo

[16:25] *** Khisanth joined
[16:25] <masak> [Coke]: how do you like it so far?

[16:26] *** whiteknight joined
[16:27] *** jlaire joined
[16:30] <[Coke]> I need someone to speak out loud with, or the book's useless. ;)

[16:31] <[Coke]> thankfully, I work with someone who's a native speaker. (but she doesn't know pinyan, so she needs to see the english first .;)

[16:33] <masak> Pinyin.

[16:33] <JimmyZ> pinyin?

[16:35] <JimmyZ> good ningt

[16:35] * JimmyZ sleeps

[16:35] *** JimmyZ left
[16:36] <masak> 'night, JimmyZ.

[16:40] <TimToady> std: any<me expoits grammerz>

[16:40] <p6eval> std e3c970e: OUTPUT«ok 00:01 118m␤»

[16:40] <TimToady> hmm, not updated

[16:44] <TimToady> evalbot rebuild std

[16:44] <p6eval> OK (started asynchronously)

[16:47] <lichtkind> TimToady: sorry for repeating my question but the .perl dumper method was your idea?

[16:48] <TimToady> calling it .perl was my idea

[16:49] <TimToady> in Python it's .repr, and I said to myself, but what if I want the representation in APL, or COBOL?

[16:49] <TimToady> so I thought .repr was too general

[16:50] <masak> seems the Apocalypses don't mention .perl

[16:50] <TimToady> and .perl is almost a type conversion

[16:50] <TimToady> I don't remember when I decided that

[16:50] <TimToady> but .perl is more of a practical thing than an apocalyptic thing

[16:51] <TimToady> std: any<me expoits grammerz>

[16:51] <p6eval> std e3c970e: OUTPUT«ok 00:01 118m␤»

[16:52] <masak> std: say any<one for peanuts?>

[16:52] <p6eval> std e3c970e: OUTPUT«ok 00:01 119m␤»

[16:52] <TimToady> strange

[16:52] <masak> that STD likes peanuts? :P

[16:52] <TimToady> std: say;

[16:53] <p6eval> std e3c970e: OUTPUT«Potential difficulties:␤  Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument at /tmp/qSSaVXDSDp line 1:␤------> [32msay[33m⏏[31m;[0m␤ok 00:01 117m␤»

[16:53] <TimToady> std: any;

[16:53] <p6eval> std e3c970e: OUTPUT«ok 00:01 117m␤»

[16:54] <TimToady> bizarre, that's the version I pushed, and it complains about any here, but not as a  bot

[16:54] * TimToady wonders if it's reporting the new version but running the old one somehow

[16:55] <masak> perhaps it only thought it updated?

[16:55] <masak> right.

[16:55] <TimToady> std: WHICH;

[16:55] <p6eval> std e3c970e: OUTPUT«Potential difficulties:␤  Unsupported use of bare 'WHICH'; in Perl 6 please use .WHICH if you meant $_, or use an explicit invocant or argument at /tmp/H9GUkjJW_z line 1:␤------> [32mWHICH[33m⏏[31m;[0m␤ok 00:01 117m␤»

[16:55] <TimToady> that's the old version

[16:55] *** daniel-s left
[16:55] <TimToady> because WHICH switch over to any's message

[16:56] <TimToady> *ed

[16:56] *** frhodes joined
[16:56] *** benabik joined
[16:57] * TimToady should rejoice for having exploits-moded ur evalbot, but doesn't

[16:59] <masak> not unless you did it deliberately.

[17:05] <lichtkind> TimToady: thank you

[17:07] <lichtkind> TimToady: a seq() is a flat fully reified list?

[17:08] *** hirschnase left
[17:09] <cognominal> tough to go between coffeescript and perl6.    coffeescript does not need parentheses on method call with arguments but requires them on method call without argument (to avoid confusion with attribute access).

[17:09] <cognominal> on Perl 6 this is the opposite.

[17:12] <masak> yes.

[17:13] <masak> and Perl 6 *wants* you to confuse method calls with (public) attribute access. :)

[17:17] <TimToady> lichtkind: something like that, though we're still a bit unsure whether we'll keep it

[17:18] *** frhodes left
[17:22] <masak> as with the Seq type as such, I guess.

[17:25] * lichtkind understand each time reading WHICH just Witch

[17:28] *** ccc_ joined
[17:37] * lichtkind likes it also how * in  $*OUT  works like a placeholder like in F*** Y** when meaning STDOUT

[17:37] <masak> I read it more like "...for now."

[17:41] <cognominal> I thought that "confusion" was a design feature. As a user of a class I don't want to know if I call a non accessor method or call an accessor method. Attributes are just a implementtion detail.

[17:42] <cognominal> ho, TimToady answered lichtkind.

[17:43] <cognominal> like the compiler, I am esaily "confused"

[17:45] *** wamba joined
[17:45] <cognominal> btw, why the need for parentheses method calls for arguments?

[17:46] <moritz> cognominal: the parser must always know whether to expect a term or an infix

[17:48] <cognominal> I am not sure where it comes to play here.

[17:48] <moritz> cognominal: if $a.foo  allowed parameters after it, but optionally, it could be both an infix (for the no argument case) or a term (for the argument case)

[17:48] <moritz> s/paramters/arguments/

[17:49] *** Mowah_ joined
[17:50] <TimToady> sorear: does niecza ignore 'is equiv'?

[17:53] <TimToady> niecza: multi infix:<∧> is equiv(&infix:<*>) ($a,$b) {say 'and'; $a min $b }; multi infix:<∨> is equiv(&infix:<+>) ($a,$b) {say 'or'; $a max $b }; say True ∨ True ∧ False

[17:53] <p6eval> niecza v8-55-g0db7bb8: OUTPUT«or␤and␤Bool::False␤»

[17:53] <TimToady> this should be and or True

[17:53] <TimToady> or am I doing something rong?

[17:59] <masak> maybe 'is equiv' is NYI.

[18:09] <TimToady> usually niecza++ is good about carping when NYI

[18:10] <masak> niecza: multi infix:<∧> is a-little-horse("niegh") ($a, $b) {}; say "alive"

[18:10] <p6eval> niecza v8-55-g0db7bb8: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unhandled trait a-little-horse for this context at /tmp/nG5jMk0_gA line 1:␤------> [32mti infix:<∧> is a-little-horse("niegh") [33m⏏[31m($a, $b) {}; say "alive"[0m␤␤Potential difficulties:␤  $a is declared but not used at…

[18:10] <TimToady> niecza: multi infix:<∧> is tighter(&infix:<*>) ($a,$b) {say 'and'; $a min $b }; multi infix:<∨> is looser(&infix:<+>) ($a,$b) {say 'or'; $a max $b }; say True ∨ True ∧ False

[18:10] <p6eval> niecza v8-55-g0db7bb8: OUTPUT«or␤and␤Bool::False␤»

[18:12] <TimToady> std: any<me expoits grammerz>

[18:12] <p6eval> std e3c970e: OUTPUT«ok 00:01 118m␤»

[18:12] <TimToady> moritz: any kloo why std says it has the right version but doesn't?

[18:14] <moritz> TimToady: does 'make snap' work for you, and reports the correct revision?

[18:15] <TimToady> yes

[18:16] <TimToady> and the any fails with: The 'any' listop may not be called without arguments (please use () or whitespace to clarify) at (eval) line 1

[18:17] <moritz> I can git clean -xdf and see if that improves things

[18:17] <TimToady> thanks

[18:18] <moritz> Can't locate YAML/XS.pm in @INC

[18:19] <mberends> moritz: perlbrew version change?

[18:19] <moritz> mberends: most likely, yes

[18:20] <moritz> so it seems that 'make snap' updates the revision file even for failed builds :(

[18:20] <dalek> roast: 1aa4587 | Coke++ | S02-names_and_variables/names.t:

[18:20] <dalek> roast: nom fudge

[18:20] <dalek> roast: review: https://github.com/perl6/roast/commit/1aa4587a48

[18:21] *** frhodes joined
[18:21] <dalek> rakudo/nom: 0adc742 | Coke++ | t/spectest.data:

[18:21] <dalek> rakudo/nom: run this fudged test

[18:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0adc742612

[18:24] <moritz> std: any

[18:24] <p6eval> std e3c970e: OUTPUT«ok 00:01 117m␤»

[18:24] <moritz> std: any<foo>

[18:24] <p6eval> std e3c970e: OUTPUT«ok 00:01 118m␤»

[18:25] <moritz> that's a new, clean, successful build

[18:26] <TimToady> ./viv -e 'any<foo>' in the snap directory should fail

[18:26] <moritz> fwiw p6eval runs tryfile, not viv'

[18:26] <moritz> not sure if it matters

[18:27] <moritz> evalbot control restart

[18:28] *** p6eval joined
[18:28] *** ChanServ sets mode: +v p6eval

[18:29] <TimToady> tryfile fails for me here

[18:29] <moritz> std: any<f>

[18:29] <TimToady> I mean, succeeds in failing :)

[18:29] <p6eval> std e3c970e: OUTPUT«ok 00:01 118m␤»

[18:30] <TimToady> très étrange

[18:32] <TimToady> 奇特

[18:33] *** jevin joined
[18:38] *** stepnem joined
[18:41] <flussence> I just spent 3 hours on a ferry with no wifi and only a netbook - still managed to get some Pod::To::HTML stuff done though

[18:42] *** Minimiscience joined
[18:43] <flussence> it takes 5.5 minutes to generate s26.html, 3 of which are before pod2html even gets called :(

[18:45] <flussence> oh wait, that was with all the debug output. 4m43 without...

[18:46] *** Minimiscience left
[18:48] *** kst joined
[18:49] <lichtkind> what is the new name of /parrot_install/bin ?

[18:49] <flussence> s/parrot_//

[18:49] <lichtkind> thank you

[18:50] <lichtkind> flussence: you mean with underscore?

[18:50] <flussence> it's just install/bin now

[18:51] <lichtkind> i see

[18:51] <lichtkind> had some brain latency

[18:51] <lichtkind> it was a regex

[18:52] *** djanatyn joined
[18:52] <djanatyn> Hi!

[18:52] <djanatyn> masak: hello :D

[18:53] *** wamba left
[18:54] <lichtkind> nom doest understand =begin END

[18:54] <lichtkind> master did

[18:55] <donri> masak: ^ look who i brought

[18:55] <masak> djanatyn! \o/

[18:55] <masak> djanatyn: how's things?

[18:56] <flussence> tadzik: ping - seems like the pod parser doesn't do nested <>s inside FormattingCodes

[18:57] <flussence> ("C<B<>>" in the spec is ending up as "<code>B&lt;</code>&gt;")

[19:00] <donri> djanatyn: now that you're here, you'll have to write some perl6

[19:01] <flussence> .oO( am I a bad person for using <mark>/<em> where the spec suggests <em>/<u>? :)

[19:04] <djanatyn> masak: Doing great!. :)

[19:04] <djanatyn> donri: I've written perl6 code before ;)

[19:04] <donri> Show me.

[19:04] <djanatyn> masak: I took a little bit of time off to take a dip in python.

[19:04] <djanatyn> I already have, but sure.

[19:04] <djanatyn> donri: https://github.com/djanatyn/array-of-doom/blob/master/game.pl

[19:05] <masak> djanatyn: nice! how's python doing?

[19:05] <djanatyn> masak: Great.

[19:05] <djanatyn> I had originally planned to use Perl and SDL to create a game for a 48 hour game-making competition I participated in, ludum dare.

[19:05] <donri> djanatyn: you can use "given" to assign $_

[19:05] <djanatyn> However, I was having some issues and I eventually switched to python + pygame.

[19:05] <djanatyn> donri: *huh*. cool.

[19:06] <donri> given prompt { when ... }

[19:06] <masak> djanatyn: heh, I guessed you'd gravitate to pygame :)

[19:06] <masak> djanatyn: I've been glancing at it many times too.

[19:06] <djanatyn> Yeah. I actually got a pretty decent game released and did better than I expected.

[19:06] <djanatyn> Learning python quickly was fun. :)

[19:06] *** frhodes left
[19:06] <masak> \o/

[19:06] *** frhodes joined
[19:06] *** frhodes left
[19:06] <djanatyn> Since the most substantial work I've done with OOP has been in perl 5, it was quite a paradigm shift

[19:07] <masak> why?

[19:07] <djanatyn> Since I haven't even really used Moose very much.

[19:07] <masak> people say Python's OO and Perl 5's are pretty similar.

[19:07] <djanatyn> I had always considered it a little bit of work to write object oriented perl.

[19:07] <djanatyn> Like, writing a new method, and things like that.

[19:07] <masak> without Moose, sure! :)

[19:08] <djanatyn> Yeah, I meant without Moose :D

[19:08] <masak> and people put a lot of cargo-cult crap in their 'new' methods :P

[19:09] <djanatyn> I found it pretty fun to use.

[19:09] <djanatyn> And of course. Perl 6's OOP is awesome, though I don't have much experience with it yet

[19:09] <masak> all in good time ;)

[19:10] <masak> nom: class OOP {}; class awesome {}; role Perl6[OOP] is awesome {}; say "yay!"

[19:10] <p6eval> nom 0adc74: OUTPUT«yay!␤»

[19:11] <donri> nom: say .WHAT given *

[19:11] <p6eval> nom 0adc74: OUTPUT«Whatever()␤»

[19:11] <masak> nom: say .WHAT given .WHAT

[19:11] *** mj41 joined
[19:11] <p6eval> nom 0adc74: OUTPUT«Any()␤»

[19:11] *** frhodes joined
[19:12] <donri> perl 6 will not have competitions in obfuscation but in code-as-natural-language

[19:12] <masak> oh, it can do either :)

[19:13] <masak> nom: my $dna = "ttaagg"; sub translate($dna) { "FFLLSSSSYY!!CC!WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG".comb[map { :4($_) }, $dna.trans("tcag" => "0123").comb(/.../)] }; say translate($dna)

[19:13] <p6eval> nom 0adc74: OUTPUT«Method 'trans' not found for invocant of class 'Str'␤  in sub translate at /tmp/AYXOVlGxhu:1␤  in mu <anon> at /tmp/AYXOVlGxhu:1␤  in mu <anon> at /tmp/AYXOVlGxhu:1␤␤»

[19:13] <masak> rakudo: my $dna = "ttaagg"; sub translate($dna) { "FFLLSSSSYY!!CC!WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG".comb[map { :4($_) }, $dna.trans("tcag" => "0123").comb(/.../)] }; say translate($dna)

[19:13] <p6eval> rakudo a55346: OUTPUT«LR␤»

[19:13] <masak> nom doesn't do .trans yet?

[19:14] <masak> why wouldn't that be a showstopper to merging to master. .trans is everywhere.

[19:14] *** Limbic_Region joined
[19:14] <masak> s/\./?/

[19:15] <dalek> niecza: a7575a1 | diakopter++ | / (8 files):

[19:15] <dalek> niecza: make Kernel.cs compile under visual studio

[19:15] <dalek> niecza: make Builtins a partial class

[19:15] <dalek> niecza: add stub for sprintf

[19:15] <dalek> niecza: add Printf.cs to Makefile

[19:15] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a7575a1d22

[19:16] <masak> djanatyn: the above one-liner is from this blog post: http://strangelyconsistent.org/blog/the-genetic-code-oneliner-in-perl-6

[19:16] <flussence> masak: I think tadzik++ was trying to implement it for inside this Text::Escape module, turns out it's surprisingly complicated

[19:16] <masak> djanatyn: I needed to translate TimToady's adieu from DNA bases to amino acids :)

[19:16] <masak> flussence: you're telling me. :) I implemented it in master.

[19:17] <masak> well, re-implemented it.

[19:17] <dalek> niecza: a89a9a6 | diakopter++ | lib/Printf.cs:

[19:17] <dalek> niecza: add Printf.cs

[19:17] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a89a9a623c

[19:18] <TimToady> trans should probably turn into a little grammar that does LTM

[19:18] <masak> guess it's not that hard to build grammars using the MOP.

[19:19] <TimToady> but recognizing immutable arguments and not recreating the grammar will be a trick

[19:19] <masak> TimToady: but when you put it like that, it feels like a caching solu... right.

[19:19] <kthakore> djanatyn: how is it going?

[19:20] <masak> I already asked that. :P

[19:20] <kthakore> oh

[19:20] <kthakore> :\

[19:20] <kthakore> djanatyn: what were your issues? How can we make it better?

[19:20] <masak> kthakore++ # double-checking

[19:20] <masak> ooh, I wanted to ask that one :)

[19:20] <TimToady> so maybe we don't write .trans just yet, but .transcomp and transrun

[19:20] <kthakore> masak: thanks

[19:20] <donri> issues with what?

[19:21] <kthakore> donri =>  I had originally planned to use Perl and SDL to create a game for a 48 hour game-making competition I participated in, ludum dare. ... but I had some issues and I switched to Python and Pygame

[19:21] <kthakore> donri: we are still youngish ...

[19:21] <donri> oh

[19:21] <diakopter> nom: say sprintf( "%d%d%d%d%d", 0...*)

[19:21] <p6eval> nom 0adc74: OUTPUT«...␤»

[19:21] <djanatyn> kthakore: Well...^_^

[19:22] <djanatyn> I guess it was more personal issues.

[19:22] <kthakore> masak: is 1year some months stil youngish?

[19:22] <kthakore> djanatyn: that is fine your experience will help us

[19:22] <donri> we also need a .transvestite method for polymorphism

[19:22] <djanatyn> I found the pygame documentation easier to navigate, and their abstraction was a bit higher

[19:22] <kthakore> djanatyn: ok

[19:22] <masak> kthakore: for a project? I guess...

[19:22] <djanatyn> I liked how you could set the framerate without having to add handlers in pygame

[19:23] <kthakore> ok

[19:23] <djanatyn> I could structure my code the way I wanted easily without having $app->run();

[19:23] <kthakore> djanatyn: want to move this to pm btw?

[19:23] <djanatyn> kthakore: uhh, sure

[19:23] <donri> trying to keep the rest of us out eh

[19:23] <kthakore> oh ... I was afraid of going of topic

[19:23] <kthakore> this is perl5 module 

[19:23] <kthakore> sorry

[19:23] <donri> ;)

[19:24] <kthakore> masak++ thanks 

[19:24] <kthakore> apologies again

[19:26] <masak> oh, come on :) 

[19:26] <masak> I should apologise to *you* for being so silly.

[19:27] <masak> me being silly, I mean. not you.

[19:27] <masak> also, there's no ban on talking about Perl 5 here. as long as you don't go overboard about it.

[19:28] <diakopter> because then we'd have to throw you a lifeline or float ring

[19:29] *** mj41 left
[19:31] <masak> :P

[19:32] <masak> "Perl 6: like being saved from drowning."

[19:42] <TimToady> .oO(Hazardous Waters! Enter At Your Own Perl!)

[19:44] <kthakore> heh

[19:46] *** orphu joined
[19:51] *** rlb3 joined
[19:52] *** kst left
[19:53] *** kst joined
[19:53] *** orphu left
[19:56] <diakopter> TimToady: S32::Str sprintf grammar doesn't mention the ability to specify which argument supplies the vector override separator string

[19:57] <diakopter> but perlfunc sprintf mentions it

[19:57] <masak> diakopter: consider that grammar more a guideline than solid spec.

[19:57] <masak> (I didn't write it, but I've been studying it)

[19:57] * diakopter is working on sprintf for niecza

[20:00] <diakopter> I'll assume the 5.14.1 docs are correcter

[20:01] <lichtkind> diakopter: yes lots of docs effort lately

[20:01] <diakopter> ?

[20:01] <flussence> sprintf in rakudo is still pretty lacking, iirc.

[20:01] <djanatyn> Well, I've got rakudo-star installed on my Fedora box.

[20:01] <flussence> nom: printf('%d %1$x', 45);

[20:01] <p6eval> nom 0adc74: OUTPUT«'$' is not a valid sprintf format␤  in sub sprintf at src/gen/CORE.setting:1508␤  in sub printf at src/gen/CORE.setting:1513␤  in mu <anon> at /tmp/W4k1fryc16:1␤  in mu <anon> at /tmp/W4k1fryc16:1␤␤»

[20:01] <masak> djanatyn: great!

[20:02] <lichtkind> diakopter: fram reading p5p i know the docs fot improved lately , even from 5.14 to 5.14.1

[20:02] <lichtkind> s/fot/got/

[20:07] <masak> TimToady: did you see the first observation in https://gist.github.com/1148915 ? do you agree that S06 needs a fix for that example?

[20:08] <masak> TimToady: also, I'm concerned about http://irclog.perlgeek.de/perl6/2011-08-18#i_4293141

[20:08] <masak> (is writing on a macro grant proposal, so I got to thinking about those)

[20:09] <masak> s/is/am/ # g'ah

[20:09] <flussence> (is it just me or is github screwing up utf-8 code in a number of places?)

[20:10] <masak> I noticed that too.

[20:10] <masak> I went to edit it to fix it, but in the edit view it looked right. :/

[20:10] <flussence> yeah, seems like it's on their end...

[20:10] <lue> hello planet! o/

[20:12] <masak> hi lue!

[20:12] <masak> heh. it's so recently that I met TheDamian, that now when I read the Exegeses, they're all in Australian! :D

[20:14] *** mj41 joined
[20:14] <lue> [I heard he doesn't like IRC. He should visit sometime]

[20:16] <masak> lue: don't immanentize the eschaton! o.O

[20:16] <masak> TheDamian and IRC... it would be like matter and antimatter...

[20:17] <lue> .oO(I'd think it'd only be immanentizing if I were to send him a letter about coming on)

[20:17] *** birdwindupbird left
[20:18] <masak> lue: true, true. but you can never be too sure.

[20:18] <lue> masak: would the resulting annihilation create and leave Perl 7 in the debris?

[20:19] <masak> the chances of that are slim.

[20:19] <masak> from a pure entropy perspective, we'd be much more likely to end up with PHP 7. :/

[20:19] <flussence> AAAAAAAAAaaa!

[20:19] <masak> exactly.

[20:20] <lue> .oO(perhaps we can isolate #perl6 from the rest of the Internet just before annihilation to avoid PHP influences)

[20:20] <flussence> (does that mean PHP will cause the heat death of the universe?)

[20:20] <sbp> this is the scariest conversation I have so far seen in here

[20:21] <Juerd> sbp: Were you having any conversation here at all, just now?

[20:21] <masak> sbp: anything involving TheDamian takes on an edge of the scary.

[20:21] <sbp> nope, I'm conserving my conversation

[20:22] <lue> .oO(great. I just got *another* idea for a silly little project)

[20:22] *** Mowah_ left
[20:22] <masak> lue: how'd the game go?

[20:23] <lue> I'm uploading the repo now. [ Just the rules so far, want to make sure they're OK before implementing :) ]

[20:23] * masak is expectant

[20:24] <masak> lue: by the way, have you been feeling like submitting an AI for Little Animal Farm lately? :)

[20:25] <lue> It looked intereseting, have to take a crack at it [also interesting is a P6 IF game, rewriting my Pod parser..... gah! so many fun projects! I hath been converted!]

[20:26] <masak> :)

[20:26] <lichtkind> the speakers training in riga with thedamian was good

[20:26] *** Mowah_ joined
[20:26] * lichtkind currently practicing the learned

[20:28] <lue> https://github.com/lue/Frotzlexity --- I don't trust my instincts about the rules, have a look.

[20:29] <lue> [Of course, implementation will be a challenge, but any programming that deals with English is. Perhaps an esperanto version first...]

[20:29] *** Mowah_ left
[20:30] *** huf joined
[20:31] *** Mowah_ joined
[20:32] * masak looks

[20:32] <sbp> or lojban

[20:33] *** frhodes left
[20:35] <masak> lue: actually, analyzing the word for correct usage doesn't seem that hard.

[20:35] <masak> it's analyzing the rest of the sentence that's tricky.

[20:36] <masak> the game looks nice.

[20:37] *** mj41 left
[20:37] <djanatyn> sorear: Did someone say lojban?

[20:37] <djanatyn> ermm, sbp 

[20:37] <masak> lue: if I may offer an observation: it looks like even with made-up words, most people would be able to use them correctly in a sentence, purely based on their endings. there doesn't appear to be much of a challenge in it.

[20:37] <lue> Indeed. It's the first way I thought of making the "frotzlexity dice" more than just dice-rolling. There's likely a better way to turn it into a game...

[20:38] * masak realizes that mathw has been kinda silent lately

[20:38] <masak> lue: I could think of a couple of ways. but it's your game :)

[20:39] * lue thinks about a more all(fun,challenging,interesting) game...

[20:40] <lue> At least I didn't start implementing anything...

[20:40] <djanatyn> kthakore: http://paste.pocoo.org/show/465458/

[20:40] <masak> lue++ # releasing early and often

[20:40] <djanatyn> that's how the clock object works in pygame

[20:41] *** pernatiy joined
[20:41] <masak> nom: say <per>.roll, <naity>.roll

[20:41] <p6eval> nom 0adc74: OUTPUT«pernaity␤»

[20:41] <sbp> loaded dice!

[20:41] <masak> oops.

[20:41] <masak> nom: say <per>.roll, <natiy>.roll

[20:41] <p6eval> nom 0adc74: OUTPUT«pernatiy␤»

[20:42] <masak> \o/

[20:42] <masak> sbp: not loaded, just d1 dice :P

[20:42] <sbp> and loading is a d6 to d1 transformation?

[20:42] <djanatyn> http://paste.pocoo.org/show/465461/ <-- sample output of the first 50 iterations on my machine

[20:43] <djanatyn> not sure how I'd expect it in perl

[20:43] <djanatyn> but I like pygame's approach to it

[20:48] <lue> nom: say ("a".."z").roll(6).join('');

[20:48] <p6eval> nom 0adc74: OUTPUT«pnhatr␤»

[20:50] <masak> pn hatrs will pn hat.

[20:51] <kthakore> djanatyn: ok

[20:51] <lue> .oO(it could also perceived as the first step of a backronym generator)

[20:53] <sbp> nom has a mind of its own

[20:53] <pernatiy> masak: what so special in my nick? ;)

[20:54] <masak> pernatiy: oh, hi :) sorry, just being Saturday-evening silly.

[20:54] <masak> pernatiy: how are you liking Perl 6 (and #perl6) so far, by the way?

[20:55] <masak> (besides the silliness, I mean)

[20:56] <pernatiy> currently I am working with perl5, but I interested in perl6

[20:56] <sbp> you have like the duodecimal of nicks. it makes perfect sense, but hardly anybody knows it yet

[20:56] <pernatiy> not sure if I like it

[20:56] <pernatiy> to be honest I not sure if I like any programming language

[20:56] *** uvtc joined
[20:56] <masak> pernatiy: :)

[20:56] <pernatiy> =)

[20:56] <masak> pernatiy: so you're the Steve Yegge type, then.

[20:56] <pernatiy> their all are just tools

[20:57] <pernatiy> *they

[20:57] <masak> yes. they're just substrates for programs.

[20:57] <uvtc> kthakore, hi. Just curious: what is the status of SDL bindings for Perl 6? I poked around in github's PerlGameDev/SDL6,

[20:58] <uvtc> kthakore, but am not sure how far along it is.

[20:58] <masak> pernatiy: what do you like about Perl 5? (if anything)

[20:59] <TimToady> or contrariwise, what do you dislike the least? :)

[20:59] <pernatiy> perl6 have some features which I miss in perl5, but I need to do some work on perl6 to make complete opinion

[20:59] <masak> of course.

[20:59] <pernatiy> well, I like perl5 for it's XS capaility

[21:00] <masak> well, we don't have that :)

[21:00] <ingy> Pegex is self hosting!!

[21:00] <pernatiy> Inline::C package is one of the best =)

[21:00] <masak> ingy: \o/

[21:00] * ingy does a little dance

[21:00] <pernatiy> also OO approach in perl5 is funny

[21:01] <masak> pernatiy: as in "ridiculous"? :P

[21:01] <pernatiy> not much people understand it but it is brilliant from some point of view

[21:01] <TimToady> masak: yes, the circumfix macro is wrong

[21:01] <ingy> does rakudo have access to a pcre/p5 re engine yet?

[21:01] <masak> TimToady: I suggest either you fix it, or you suggest a fix and I fix it.

[21:01] *** rlb3 left
[21:02] <pernatiy> the way how it done allow you to use some similar technic in not OO programming

[21:02] <TimToady> well, we'd need a syntactic category "transparent"

[21:02] <masak> ingy: maybe through blizkost. I don't know that anyone has tried.

[21:02] <TimToady> or maybe it belons in ws somewhere

[21:02] * ingy should start writing a p6 grammar in pegex so he can parse p6 in python

[21:02] <pernatiy> so you can mix OO style with procedural, in quantity which you need

[21:02] <flussence> or some `is native<libpcre>` magic

[21:03] <masak> TimToady: isn't there a category "comment"?

[21:03] <TimToady> I guess there is

[21:03] <masak> why "transparent" and not "comment"?

[21:03] <TimToady> was just thinking of something more general, but it doesn't really work

[21:04] <TimToady> unless you can have a macro that matches anywhere

[21:04] <TimToady> which is not really what anyone wants

[21:04] <masak> especially not the poor schmuck who promised to implement them :/

[21:04] <Tene> masak: let me know how your macros work goes; I'm very interested in that.

[21:04] <masak> Tene: thanks! I will.

[21:04] <Tene> I've come pretty close to working on it myself half a dozen times over the past few years.

[21:04] *** natureboy joined
[21:05] <masak> Tene: I was really surprised when it fell into place for me how regular and simple they really are.

[21:05] <Tene> I should have published the prototypes I wrote; I can't find them anymore.

[21:05] <masak> Tene: at least the AST-based macros.

[21:06] *** envi joined
[21:07] *** Fuad joined
[21:07] <Fuad> hi

[21:07] <masak> Fuad! \o/

[21:07] <Fuad> masak: Hello bro!

[21:07] <masak> wow, this is like a family gathering!

[21:08] <Fuad> :)

[21:09] <TimToady> masak: and yes, the RC macro is bogus, but let's be sure that an AST can stringify back to its original code somehow, eh?

[21:09] <masak> TimToady: sure.

[21:09] <masak> TimToady: that might actually solve it in that particular case.

[21:10] *** daemon joined
[21:11] *** soh_cah_toa joined
[21:13] <masak> (then again, maybe not)

[21:17] <TimToady> almost certainly not...

[21:18] <diakopter> TimToady: I had a question about S32::Str sprintf ^^

[21:19] <TimToady> after all these years, I still don't know if I like that feature of sprintf; it seems wrong somehow 

[21:20] <TimToady> we should be doing that with named args or some such

[21:20] * diakopter whimpers

[21:21] <masak> what's the last/latest release of Pugs?

[21:21] <diakopter> http://hackage.haskell.org/package/Pugs

[21:21] <masak> diakopter: thanks.

[21:21] <diakopter> she updates it everytime a new ghc is released I think

[21:22] <masak> yes, that's what I guessed too.

[21:22] *** Fuad left
[21:22] <masak> 6.2.13, it seems.

[21:22] <masak> which is between 6.2 "Basic IO and control flow elements; mutable variables; assignment" and 6.28 "Classes and traits"

[21:23] <masak> even though Pugs has classes, at least.

[21:24] <TimToady> the MOP never dropped into it, but turned into Moose instead

[21:24] <masak> oh? was there a point when the MOP was targeted for Pugs, before it was Moose?

[21:25] <masak> that's not how I remember it...

[21:25] <masak> (which is not to say that it didn't happen that way)

[21:26] <donri> is pugs doomed to oblivion?

[21:27] <flussence> small random unrelated question - is there an obvious way to do (?$string.looks-like-an-int-literal) that I don't know about?

[21:28] <Tene> flussence: match against the int rule in the perl6 grammar

[21:28] <masak> donri: "Cannot predict now"

[21:28] <masak> or maybe "Outlook not so good"

[21:28] <donri> i recall hearing something about perl6 made the pugs design difficult

[21:29] <TimToady> perl6 makes every implementation difficult

[21:29] <donri> its use of parsec maybe

[21:29] <Tene> donri: right now, nobody has made public plans to adopt and maintain and improve pugs.  Unless someone starts working on it, nobody will work on it.

[21:29] <TimToady> well, it doesn't need to use parsec anymore

[21:29] <donri> kinda sad :(

[21:30] <Tene> donri: it's entirely possible that someone could come in here tomorrow and say "Hey, I'm working on Pugs, and I was wondering about ...", but it seems unlikely.

[21:33] <TimToady> masak: iirc, stevan++ was designing the MOP at least in part for Perl 6 at the Toronto hackathon, but I don't know if he was intending to hack it into pugs himself or delegate that to someone like nothingmuch++, but anyway, it didn't happen.

[21:33] <masak> ok.

[21:34] <TimToady> or maybe audreyt++ was going to hack it in

[21:34] * masak would like to meet stevan some day

[21:34] <TimToady> anyway, it crashed

[21:34] <masak> well, we got a MOP for Rakudo :)

[21:34] <masak> which is not entirely disjunct from Moose.

[21:40] *** Mowah_ left
[21:45] *** explorer__ joined
[21:49] *** wamba joined
[21:57] <silug> i really should catch up on that one of these years.

[21:58] <silug> oops, wrong channel.  :)

[21:58] <masak> thought you meant Moose and Rakudo's MOP ;)

[21:58] <silug> well, sure, that too.  :)

[22:00] <silug> why modern window managers don't have focus-follows-eyes yet, i'll never understand.

[22:00] *** ccc_ left
[22:01] <masak> TimToady: how are method-like macros such as .WHAT declared?

[22:02] <masak> silug: ugh, and I thought focus-follows-mouse was bad enough :/

[22:03] <silug> masak: i don't tend to accidentally type in the wrong window because my mouse has moved on though...  :)

[22:04] <masak> the few times I've had focus-follows-mouse, I've done that.

[22:04] <masak> YMMV, I guess.

[22:05] <silug> no, no, focus-follows-mouse is an abomination.  i agree.  :)

[22:10] <TimToady> masak: I presume they could just be postfix:<WHAT>

[22:10] <TimToady> but maybe not

[22:10] <TimToady> might have to be postfix:<.WHAT>

[22:11] <TimToady> and disallow . form on that as we do on \w-ish postfixes

[22:11] <flussence> .oO( I'd prefer mouse-follows-eyes )

[22:11] <masak> TimToady: that oughta work, yes.

[22:11] <TimToady> left-eye blink is left button, right-eye is right button, both eyes, is center :)

[22:12] <huf> nah, that's uncomfortable

[22:12] <huf> we need mindreading

[22:12] <TimToady> well, we could probably tell intentional eyeblink from unintentional even now

[22:13] <masak> but what if I want to drag-and-drop?

[22:13] <TimToady> drag it with your other eye, assuming you don't use lasers?

[22:14] <masak> ok, reasonable.

[22:14] <masak> center-button drags are uncommon anyway.

[22:14] <uvtc> first you think, you wink, you do a double blink, ... close your eyes, and jump

[22:15] <TimToady> maybe clicks should do tongue recognition

[22:15] <TimToady> and snakes could click or drag two things at once

[22:15] <huf> you dont need double blinks or mouse buttons actually, if you're not using the mouse, you have your hands on the kb anyway

[22:18] <TimToady> std: any<foo>

[22:18] <lue> for drag-and-drop, clamp your mouth shut.

[22:18] <p6eval> std e3c970e: OUTPUT«ok 00:01 118m␤»

[22:18] <TimToady> sigh

[22:19] <huf> the other solution is genetic engineering

[22:19] <huf> i'd like having 4 arms :)

[22:19] <huf> just imagine, a world where you can eat chips while ircing WITHOUT getting your keyboard sticky...

[22:20] <ruz> who tried jnthn's grammar::tracer? master complains when I try to use the module. didn't try nom as I think it still lacks support for grammars :(

[22:20] <lue> just imagine, a world where caffeine is a vital nutrient...

[22:20] <TimToady> ruz: nom is precisely where it will work, since it uses 6model

[22:21] <masak> yeah, won't ever work in master.

[22:21] *** uvtc left
[22:21] <masak> ruz: nom has support for grammars, just not full support. yet.

[22:22] <ruz> yep, so I'm still wating for nom to catch up with grammars

[22:22] <ruz> masak: spectest rate suggests that it's really limitted

[22:23] <ruz> going to check if nom compiles grammar I have

[22:24] <lue> afk

[22:24] <TimToady> going to check if a nap is about to occur

[22:28] *** abercrombie joined
[22:41] *** drbean joined
[22:47] *** Minimiscience joined
[22:56] *** cexsum joined
[22:58] *** ZaphrodZenovka joined
[23:21] *** Minimiscience left
[23:26] <ruz> cool, with a few changes grammar is parsed and traced

[23:26] <masak> \o/

[23:30] *** am0c joined
[23:37] *** abercrombie left
[23:39] <masak> heh. didn't have time for a blog post tonight. will have time tomorrow for at least one, though.

[23:39] <masak> 'night, #perl6.

[23:39] *** sili joined
[23:40] *** Psyche^ joined
[23:40] *** Psyche^ is now known as Patterner

[23:41] *** Khisanth left
[23:42] *** kfo joined
[23:55] *** Khisanth joined
[23:55] *** Limbic_Region left
[23:57] <flussence> woo, got L<#Section> things working

[23:57] <ruz> how hard it would be to say in a grammar that here may go indented block with <this> inside?

