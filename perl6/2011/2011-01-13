[00:01] <dalek> std: 4afb07c | larry++ | lib/Test.pm6:

[00:01] <dalek> std: catch up standard with s/done_testing/done/

[00:01] <dalek> std: review: https://github.com/perl6/std/commit/4afb07c0e2

[00:02] <masak> \o/

[00:03] *** payload joined
[00:04] <colomon> masak: so, how many people have turned in solutions to all problems now?

[00:04] <masak> colomon: that's classified until Friday.

[00:04] <colomon> masak: is it bigger than a breadbox?

[00:04] <masak> :)

[00:06] <TimToady> depends on whether you're french

[00:06] <masak> just assume, for the time being, that the competition is cause for everyone to be concerned. I'm not saying that's necessarily the case, just that it's a good assumption. :)

[00:06] <colomon> masak: you just want me to keep on obsessing with p4...

[00:07] <colomon> TimToady: do the French really have French bread length bread boxes?  They seem vaguely impractical at that size...

[00:07] *** am0c joined
[00:09] <allbery_b> afaik the French buy that bread fresh and finish it well before they'd need a breadbox

[00:09] <colomon> that definitely seems like a better plan.

[00:09] <allbery_b> you can get it on any street corner in most French cities

[00:09] <TimToady> so a French bread box is not very big at all :)

[00:10] <TimToady> the only question is how many of them fit on the head of a pin, and how that relates to the size of contest entries

[00:16] <dalek> sprixel: 24a5eac | diakopter++ | sprixel/ (6 files):

[00:16] <dalek> sprixel: fixed all (heretofore) known regressions

[00:16] <dalek> sprixel: (found from experimenting with viv->perlesque).

[00:16] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/24a5eacad1

[00:17] *** ashleydev left
[00:20] *** flatwhatson_ joined
[00:24] <masak> 'night, #perl6.

[00:24] *** masak left
[00:24] <payload> i wanted to port cairo today with zavolaj... but it is broken on current Star. but more likely parrot is broken. jnthn

[00:25] *** QinGW joined
[00:31] *** woosley joined
[00:32] *** flatwhatson_ left
[00:44] <dalek> evalbot: 9961391 | (Perl 6 Evalbot)++ | evalbot.pl:

[00:44] <dalek> evalbot: pushed sprixel dir 1 level deeper in evalbot

[00:44] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/996139124f

[00:44] <diakopter> github was teh slow

[00:46] * wolverian stares the file named stdin

[00:48] *** ashleydev joined
[00:50] <diakopter> sigh

[00:50] *** p6eval joined
[00:50] *** ChanServ sets mode: +v p6eval

[00:52] <diakopter> there we go.

[00:52] <diakopter> perlesque: say(5)

[00:52] <p6eval> perlesque: OUTPUT«5␤»

[00:52] *** cdarroch left
[01:00] *** justatheory left
[01:00] <sorear> wolverian: it's just the austrian national anthem

[01:03] <dalek> std: 0a2b4bd | larry++ | STD.pm6:

[01:03] <dalek> std: allow >) as infixstopper in regex

[01:03] <dalek> std: 

[01:03] <dalek> std: Code was probably confusing it with the )> token.  sorear++

[01:03] <dalek> std: review: https://github.com/perl6/std/commit/0a2b4bdcea

[01:06] *** plainhao left
[01:06] *** woosley left
[01:07] *** am0c left
[01:09] <dalek> std: 84ca780 | larry++ | STD.pm6:

[01:09] <dalek> std: parse ...^ correctly

[01:09] <dalek> std: 

[01:09] <dalek> std: oops, was parsing it as ... and then prefix ^

[01:09] <dalek> std: review: https://github.com/perl6/std/commit/84ca780aac

[01:10] * sorear wonders if &infix:<ff> has the macro-nature

[01:10] <TimToady> std: 1,2 ...^ -> $a { $a > 10 }

[01:10] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Preceding context expects a term, but found infix > instead at /tmp/vhF7nyhV_7 line 1:␤------> [32m1,2 ...^ -[33m⏏[31m> $a { $a > 10 }[0m␤Parse failed␤FAILED 00:01 120m␤»

[01:10] <sorear> A ff B -> _flipflopop(state $, A, B) perhaps

[01:11] <TimToady> if it's to follow P5 semantics, yes, it must be macroish

[01:11] *** rgrau left
[01:12] <TimToady> it can probably be written as a stateful ??!! somehow, in fact I think I wrote it out once

[01:12] <TimToady> afk &

[01:18] *** woosley joined
[01:24] *** lue joined
[01:24] <lue> OHAI! o/

[01:32] <colomon> \o\

[01:40] <diakopter> -o_

[01:43] *** gbacon left
[01:44] <snarkyboojum> _o|

[01:49] <dalek> sprixel: 7f319c7 | diakopter++ | sprixel/ (8 files):

[01:49] <dalek> sprixel: misc fixes/cleanup

[01:49] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/7f319c782f

[01:50] *** plobsing joined
[01:52] <jpr5> owowowow my eyes

[01:52] <diakopter> ?

[01:55] <diakopter> karma sorear 

[01:55] <aloha> sorear has karma of 671.

[01:55] <diakopter> karma larry

[01:55] <aloha> larry has karma of 8.

[01:56] <sorear> buubot: karma sorear

[01:56] <buubot> sorear: sorear has karma of 1625       

[01:56] <diakopter> buubot: karma larry

[01:56] <buubot> diakopter: larry has karma of 9       

[01:57] <diakopter> buubot: karma diakopter

[01:57] <buubot> diakopter: diakopter has karma of 621       

[01:57] <diakopter> buubot: karma TimToady 

[01:57] <buubot> diakopter: TimToady has karma of        

[01:57] <diakopter> karma TimToady 

[01:57] <aloha> TimToady has karma of 77.

[01:57] <diakopter> sigh

[01:58] <flussence> maybe aloha just wraps the int, while buubot uses a float and can't display +Inf.

[01:58] *** cafesofie left
[02:01] <sorear> neither bot has a reliable host, so they both only see a subset of deeds

[02:01] *** noganex_ joined
[02:01] <sorear> (I'm biased, I used to run the channel bot before somebody banned it)

[02:02] <cognominal_> karma gnole

[02:02] <aloha> gnole has karma of 0.

[02:03] <colomon> rakudo: say 1..10.map({; $_ => $_; }.perl;

[02:03] <p6eval> rakudo 8681da: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 22␤»

[02:03] <colomon> rakudo: say 1..10.map({; $_ => $_; }).perl;

[02:03] <p6eval> rakudo 8681da: OUTPUT«␤»

[02:04] <colomon> rakudo: say (1..10).map({; $_ => $_; }).perl;

[02:04] <p6eval> rakudo 8681da: OUTPUT«(1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9, 10 => 10)␤»

[02:04] <colomon> rakudo: say (1..10).map({; $_ => $_; }).grep( *.value ~~ 5..7 ).perl;

[02:04] <p6eval> rakudo 8681da: OUTPUT«()␤»

[02:04] <colomon> say (*.value ~~ 5..7).WHAT

[02:04] *** noganex left
[02:05] <colomon> rakudo: say (*.value ~~ 5..7).WHAT

[02:05] <p6eval> rakudo 8681da: OUTPUT«Bool()␤»

[02:05] <cognominal_> karma gnole is a pun on http://en.wikipedia.org/wiki/Carmagnole, and gnole, a strong alcohol

[02:05] <aloha> gnole is a pun on http://en.wikipedia.org/wiki/Carmagnole, and gnole, a strong alcohol has karma of 0.

[02:06] <cognominal_> arf

[02:07] <colomon> rakudo: say (4 < *.value < 10 ).WHAT

[02:07] <p6eval> rakudo 8681da: OUTPUT«WhateverCode()␤»

[02:07] <colomon> rakudo: say (1..10).map({; $_ => $_; }).grep( 4 < *.value < 8 ).perl;

[02:07] <p6eval> rakudo 8681da: OUTPUT«(1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9, 10 => 10)␤»

[02:08] <colomon> bug?

[02:08] <dalek> modules.perl6.org: bee61f4 | snarkyboojum++ | web/fame-and-profit.html:

[02:08] <dalek> modules.perl6.org: [fame-and-profit.html] Fix the camelia icon

[02:08] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/bee61f4409

[02:09] <diakopter> rakudo: say (1..10).map({; $_ => $_; }).grep({ 4 < $_.value < 8 }).perl;

[02:09] <p6eval> rakudo 8681da: OUTPUT«(5 => 5, 6 => 6, 7 => 7)␤»

[02:09] <diakopter> :?

[02:10] <diakopter> rakudo: say (1..10).map({; $_ => $_; }).grep({ 4 < $_.key < 8 }).perl;

[02:10] <p6eval> rakudo 8681da: OUTPUT«(5 => 5, 6 => 6, 7 => 7)␤»

[02:11] <colomon> I think maybe 4 < *.value < 8 is being silently translated to 4 < *.value && *.value < 8, or something like that? 

[02:11] <colomon> I don't know if it's a bug or not, but it definitely kind of sucks that the first two ways I thought of writing that code didn't work.  :\

[02:14] <flussence> rakudo: say (1..10).map({; $_ => $_ }).grep(4 < $^a.value < 8).perl # ?

[02:14] <p6eval> rakudo 8681da: OUTPUT«Null PMC access in find_method('value')␤  in main program body at line 22:/tmp/cSSI1mDUjp␤»

[02:14] <flussence> argh

[02:14] <colomon> needs parans.

[02:14] <colomon> er, braces.

[02:14] <flussence> oh right, $^ doesn't do that on its own...

[02:15] <colomon> rakudo: say (1..10).map({; $_ => $_ }).grep({4 < $^a.value < 8}).perl

[02:15] <p6eval> rakudo 8681da: OUTPUT«(5 => 5, 6 => 6, 7 => 7)␤»

[02:15] <flussence> rakudo: say (1..10).grep(4 < * < 8).perl

[02:15] <p6eval> rakudo 8681da: OUTPUT«(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)␤»

[02:15] <dalek> modules.perl6.org: 513d1b0 | snarkyboojum++ | web/fame-and-profit.html:

[02:15] <dalek> modules.perl6.org: Fix link to blurb about Camelia.

[02:15] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/513d1b0791

[02:15] <colomon> rakudo: say (4 < * < 8)(5).perl

[02:15] <p6eval> rakudo 8681da: OUTPUT«Bool::True␤»

[02:16] <colomon> rakudo: say (4 < * < 8)(100).perl

[02:16] <p6eval> rakudo 8681da: OUTPUT«Bool::True␤»

[02:16] <flussence> yeah, I'd expect chained-comparison + Whatever to dwim...

[02:16] <colomon> rakudo: say (4 < * < 8)("green").perl

[02:16] <p6eval> rakudo 8681da: OUTPUT«Bool::True␤»

[02:16] <colomon> I don't really have any idea how to explain that.

[02:16] <colomon> unless....

[02:16] <colomon> rakudo: say (* < 8)("green").perl

[02:16] <p6eval> rakudo 8681da: OUTPUT«Bool::True␤»

[02:16] <colomon> rakudo: say (* < 8)(100).perl

[02:16] <p6eval> rakudo 8681da: OUTPUT«Bool::False␤»

[02:17] <flussence> rakudo: say (Bool::False < 8 && Bool::True < 8).perl

[02:17] <p6eval> rakudo 8681da: OUTPUT«Bool::True␤»

[02:18] <flussence> I think it's being interpreted as (4 < *) < 8

[02:20] <dalek> sprixel: 13edce2 | diakopter++ | sprixel/sprixel.csproj:

[02:20] <dalek> sprixel: default is Release mode build...

[02:20] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/13edce23c0

[02:30] *** VXZ left
[02:30] *** VXZ joined
[02:33] *** VXZ is now known as VX64Z

[02:34] *** VX64Z is now known as VXZ

[02:45] *** molaf left
[02:54] *** justatheory joined
[02:55] *** stkowski left
[02:59] *** molaf joined
[03:12] *** mtk left
[03:12] *** justatheory left
[03:23] <payload> is there a fast version of .match(*, :g) ? -.- insane

[03:40] <sorear> niecza: my $st = "do99" x 1000; say +[ $st.comb(/\d+/) ];

[03:40] <p6eval> niecza v1-140-g7905557: OUTPUT«1000␤»

[03:40] <sorear> niecza: my $st = "do99" x 10000; say +[ $st.comb(/\d+/) ];

[03:40] <p6eval> niecza v1-140-g7905557: OUTPUT«10000␤»

[03:40] <sorear> niecza: my $st = "do99" x 50000; say +[ $st.comb(/\d+/) ];

[03:40] <p6eval> niecza v1-140-g7905557: OUTPUT«(timeout)»

[03:44] <payload> i get a website "blog.fefe.de" and .match( /(.)(html<-[$0]>*/, :g )

[03:45] <payload> argh, maybe the $0 makes it slow

[03:45] <sorear> <-[$0]> doesn't do what you think it does

[03:45] <payload> ah, no... i use '"' hardcoded

[03:45] <payload> no?

[03:45] <sorear> it matches any character except $ or 0

[03:46] <payload> whee

[03:47] <payload> well, '"' hardcoded is still slow

[03:54] *** cafesofie joined
[03:56] <colomon> rakudo: say ~([\+] (1..10))

[03:56] <p6eval> rakudo 8681da: OUTPUT«1 3 6 10 15 21 28 36 45 55␤»

[03:57] <colomon> huh.

[03:59] <TimToady> double useless use of parens :)

[04:00] <colomon> rakudo: say ~[\+] 1..10

[04:00] <p6eval> rakudo 8681da: OUTPUT«1 3 6 10 15 21 28 36 45 55␤»

[04:00] <colomon> \o

[04:00] <colomon> \o/

[04:00] <payload> there is a need for a regression test. doent print anything on current Star: http://perlgeek.de/blog-en/perl-6/starry-obfu.html

[04:06] *** ashleydev left
[04:23] *** Su-Shee_ joined
[04:26] *** ashleydev joined
[04:27] *** Su-Shee left
[04:35] *** Eevee left
[04:35] <TimToady> payload: I believe the semantics of * changed since then, from * + * meaning { $^a + $^a } to meaning { $^a + $^b }

[04:43] *** wormphlegm joined
[04:49] *** orafu left
[04:49] *** orafu joined
[04:49] <payload> ah, okay

[04:50] *** wormphlegm left
[05:07] *** satyavvd joined
[05:09] <lue> rakudo: say 0,10, *+* ... 100;

[05:09] <p6eval> rakudo 8681da:

[05:09] <p6eval> ..OUTPUT«(timeout)508013021034055089014402330377061009870159702584041810676501094601771102865704636807502501213930196418031781105142290832040013462690217830903524578057028870922746501493035202415781703908816906324598601023341550165580141026791429604334944370701408733011349031700183631190302…

[05:10] <lue> that's... unexpected. afk! \o

[05:22] *** typepeter joined
[05:22] *** payload left
[05:42] *** starcoder left
[05:43] *** dayangkun joined
[05:44] *** starcoder joined
[05:47] *** ashleydev left
[05:47] *** dukeleto left
[05:47] *** dukeleto joined
[05:55] *** kaare_ joined
[06:02] *** Bzek joined
[06:07] *** cjk101010 joined
[06:09] *** ashleydev joined
[06:22] *** typepeter left
[06:31] *** Bzek_ joined
[06:32] <dalek> niecza: 6c69124 | sorear++ | v6/harness:

[06:32] <dalek> niecza: [v6] Fix order of operations in Alt optimization

[06:32] <dalek> niecza: review: https://github.com/sorear/niecza/commit/6c69124d66

[06:32] <dalek> niecza: 4135121 | sorear++ | v6/ (10 files):

[06:32] <dalek> niecza: [v6] Mergeback

[06:32] <dalek> niecza: review: https://github.com/sorear/niecza/commit/41351218f5

[06:32] <dalek> niecza: 3a6eeb2 | sorear++ | v6/NieczaCompiler.pm6:

[06:32] <dalek> niecza: [v6] Cache loaded units between compiler runs

[06:32] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3a6eeb2e40

[06:33] *** ashleydev left
[06:34] *** Bzek left
[06:38] *** Bzek_ left
[06:46] <diakopter> perlesque: my $sw = Diagnostics::StopWatch.StartNew(); my $a = 10_000_000; sub b() { if (--$a) { b() } }; b(); say($sw.Elapsed)

[06:46] <p6eval> perlesque: OUTPUT«Could not allocate 16432 bytes␤Stacktrace:␤␤  at sprixel.FrameBase.Run () <0x000fe>␤  at (wrapper runtime-invoke) <Module>.runtime_invoke_object__this__ (object,intptr,intptr,intptr) <0xffffffff>␤  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke

[06:46] <p6eval> ..(System.R…

[06:46] <diakopter> bah

[06:48] <diakopter> perlesque: my $sw = Diagnostics::StopWatch.StartNew(); my $a = 5_000_000; sub b() { if (--$a) { b() } }; b(); say($sw.Elapsed)

[06:48] <p6eval> perlesque: OUTPUT«(timeout)9204037␤»

[06:48] <diakopter> weird

[06:48] <diakopter> it was doing so much better earlier

[06:49] <diakopter> perlesque: my $sw = Diagnostics::StopWatch.StartNew(); my $a = 2_000_000; sub b() { if (--$a) { b() } }; b(); say($sw.Elapsed)

[06:49] <p6eval> perlesque: OUTPUT«00:00:02.8491494␤»

[06:49] <diakopter> frowny frown

[06:49] *** wtw joined
[06:51] *** mberends joined
[06:54] *** cafesofie left
[06:54] *** cafesofie joined
[07:06] *** Alias left
[07:06] *** Alias joined
[07:16] *** cognominal_ left
[07:28] *** mberends left
[07:38] *** nsh- left
[07:38] *** dalek joined
[07:38] *** ChanServ sets mode: +v dalek

[07:38] *** nsh_ joined
[07:39] *** HarryS left
[07:42] *** Woody4286 left
[07:43] *** araujo left
[07:47] *** dalek left
[07:48] *** Woody4286 joined
[07:49] *** araujo joined
[07:51] *** p6eval left
[07:51] *** dalek joined
[07:51] *** ChanServ sets mode: +v dalek

[07:54] *** p6eval joined
[07:54] *** ChanServ sets mode: +v p6eval

[07:58] *** typepeter joined
[08:02] *** dalek left
[08:02] *** Eevee joined
[08:04] *** dalek joined
[08:04] *** ChanServ sets mode: +v dalek

[08:26] *** Su-Shee_ is now known as Su-Shee

[08:31] *** typepeter left
[08:34] *** daxim joined
[08:37] *** [particle] joined
[08:45] *** Bzek joined
[08:45] *** cognominal joined
[08:46] *** HarryS joined
[09:14] *** noganex_ is now known as noganex

[09:14] *** kensanata joined
[09:25] *** dakkar joined
[09:31] *** fhelmberger joined
[09:31] *** bacek left
[09:43] *** nadim left
[09:44] *** nadim joined
[10:05] *** woosley left
[10:09] *** QinGW left
[10:10] *** dayangkun left
[10:45] <sorear> niecza-compiled-niecza seems to work fine

[10:45] <sorear> but (niecza-compiled-niecza)-compiled-niecza is unusable

[10:46] <sorear> it can't even handle my $x; $x

[10:46] <sorear> it thinks $x is undeclared

[10:49] <arnsholt> The joys of bootstrapping?

[10:49] <moritz_> it acts as a harsh test suite with not-so-good diagnostics

[10:50] <sorear> aye

[10:50] <mathw> so clearly niecza-compiled-niecza is not behaving exactly the same as it should

[10:50] <mathw> recursively compiling yourself is a damned good test though :)

[10:50] <sorear> this would be inconceivable without a proper test suite to catch 90% of the compilation problems beforehand

[10:50] <moritz_> time to use spectest suite :-)

[10:51] <moritz_> you can stub eval_{lives,dies}_ok if you don't have eval yet

[10:52] <sorear> alternatively, I can find some way to diff 7MB of whitespace-free JSON

[10:52] <moritz_> first find a pretty printer

[10:52] <moritz_> shouldn't be too hard

[10:52] <moritz_> then diff the pretty-printed JSON

[10:53] <sorear> I've been using one for debugging, but I need to find one that produces deterministic output

[10:53] *** wtw left
[10:53] <mathw> might have to stop and write one

[10:53] <mathw> which would be a pain

[10:53] <sorear> ha

[10:55] <moritz_> can't you do a whitespace insensitive diff?

[10:57] <mathw> sorting

[10:58] <moritz_> ah

[10:58] <moritz_> crap

[10:58] <sorear> well, also there are spurious differences

[10:58] <moritz_> what's the biggest blocker to using roast?

[10:59] <sorear> tuits :)

[10:59] <moritz_> ok :-)

[10:59] <sorear> for idiotic historical reasons, the Perl 5 version of Niecza includes a copy of the full pathname in every position annotation node

[10:59] <moritz_> would an update script + test harness help?

[10:59] <sorear> already have both of those

[11:00] <sorear> pmurias++ has been tinkering with fudges

[11:00] <moritz_> so it's just a matter of fudging tests and adding them to the list of passing test files?

[11:01] *** wamba joined
[11:01] <sorear> "just"

[11:02] <moritz_> well, I've done that for rakudo before

[11:03] <moritz_> and I might have some tuits tonight (ie in about 6..8 hours)

[11:03] <dalek> modules.perl6.org: cefbeea | snarkyboojum++ | web/ (2 files):

[11:03] <dalek> modules.perl6.org: Align headings and link them to the homepage

[11:03] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/cefbeeace0

[11:18] <arnsholt> @ means does Positional, right?

[11:18] <sorear> maybe

[11:18] <sorear> it did at one point, but then we decided my @foo is Bag should work

[11:19] <sorear> it's been reslushified

[11:19] <arnsholt> Oh

[11:19] <moritz_> and Bag !~~ Positional?

[11:19] <sorear> correct

[11:19] <sorear> bags are unordered

[11:19] <sorear> like hashes

[11:19] <moritz_> my state is still that @ means "restrict to Positional and default to Array"

[11:20] <moritz_> shouldn't Bag be % sigiled then?

[11:20] <arnsholt> In S32 Array isn't Positional either, it seems

[11:21] <arnsholt> Array does List, and List does Container

[11:21] <sorear> Container is nonsense

[11:22] <arnsholt> Oh, great =)

[11:23] <moritz_> but List does Positional

[11:23] <moritz_> the specs are very vague in that area

[11:26] *** cafesofie left
[11:28] <arnsholt> Or, to ask a different question: When $/.ast is an Array, why does for $/.ast simply iterate once, with $_ being the whole array?

[11:29] <arnsholt> Or, why does @stuff = $/.ast become [[stuff]]?

[11:29] <moritz_> arnsholt: it probably is not an Array, but an Array in a Scalar

[11:29] <moritz_> try @stuff = $/.ast.list

[11:29] <moritz_> iirc is make() specced to be item context, or something

[11:30] <arnsholt> Aha

[11:30] <arnsholt> That might be it. Although $/.ast.WHAT being Array() in that case does seem weird

[11:31] <moritz_> the scalarness is a property of the container, whereas .WHAT returns the type of the contents

[11:31] <sorear> well, consider my @foo = ([1],[2]);

[11:31] <sorear> @foo[0].WHAT is Array()

[11:31] <moritz_> rakudo: say [].PARROT

[11:31] <p6eval> rakudo 8681da: OUTPUT«ObjectRef->Array␤»

[11:31] <moritz_> rakudo: say (my @a).PARROT

[11:31] <p6eval> rakudo 8681da: OUTPUT«Array␤»

[11:31] <arnsholt> Ah, I see

[11:32] <moritz_> this whole flatten/non-flatten bit is going to be an FAQ

[11:32] <moritz_> and we should make it easy to inspect

[11:32] <arnsholt> Yeah, I was about to say pretty much the same thing =)

[11:32] <dalek> modules.perl6.org: bff1a08 | snarkyboojum++ | web/ (2 files):

[11:32] <dalek> modules.perl6.org: Make pages validate and fix link styles

[11:32] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/bff1a08d65

[11:32] <arnsholt> (About the FAQ thing)

[11:32] * moritz_ -> lunch

[11:33] <arnsholt> But yay. My dead-stupid p3 solution works =D

[11:33] <sorear> note that it works completely differently under the hood in niecza

[11:35] *** DarkWolf84 joined
[11:36] <DarkWolf84> hi :)

[11:37] *** wtw joined
[11:40] *** hanekomu joined
[11:41] <sorear> hello and welcome, DarkWolf84

[11:45] <DarkWolf84> I can't compile the last rakudo :)

[11:45] <DarkWolf84> :(

[11:45] <DarkWolf84> it freezes my system

[11:46] <DarkWolf84> It never happened before

[11:46] <coldhead> what is your system?

[11:46] <DarkWolf84> amd64 512m ram

[11:46] <DarkWolf84> I know the ram is not too much

[11:47] <DarkWolf84> i'm on archlinux

[11:47] <coldhead> how much swap space do you have?

[11:47] <DarkWolf84> the x86_64 version

[11:47] <DarkWolf84> about 1G

[11:49] <DarkWolf84> free says 1004056

[11:50] <coldhead> do you know how far the compile gets?

[11:51] <DarkWolf84> last time more than 12 hours

[11:51] *** masak joined
[11:51] <masak> hi, #perl6.

[11:51] <snarkyboojum> o/

[11:51] <mathw> hi masak

[11:51] <DarkWolf84> hi, masak 

[11:51] <DarkWolf84> :)

[11:52] <masak> hi, snarkyboojum. hi DarkWolf84 -- long time, no see.

[11:52] <sorear> I've found a lovely misparse that I can't effectively golf

[11:53] <sorear> it seems to be context sensitive in some way

[11:53] *** satyavvd left
[11:53] <sorear> $*DECLARAND = $curstash.{$name} = $declaring; is getting compiled as left-associative in STD but not from the command line

[11:54] * sorear out

[11:54] <masak> intriguing.

[11:54] <mathw> ...run

[11:54] <mathw> ...fun*

[11:55] <mathw> or maybe just run screaming for the hills, and don't come back until you've reformulated Perl 6 using S-expressions which are at least easy to parse correctly

[11:55] <DarkWolf84> why compiling rakudo takes so much memory

[11:55] <sorear> masak: niecza-compiled-niecza seems to work fine, (niecza-compiled-niecza)-compiled-niecza is having... issues

[11:55] <sorear> 'my $x; $x' -> $x not predeclared

[11:56] <masak> DarkWolf84: there are some memory optimizations that require more effort than people have put in so far. we more or less know about them, but they'll require some work.

[11:56] <masak> sorear: I love the smell of strange loops in the morning.

[12:00] <mathw> rakudo: ([+] (16..100)) * 4

[12:00] <p6eval> rakudo 8681da:  ( no output )

[12:00] <mathw> rakudo: say ([+] (16..100)) * 4

[12:00] <p6eval> rakudo 8681da: OUTPUT«19720␤»

[12:11] <snarkyboojum> rakudo: say [+] 16..100 * 4; say ([+] 16..100) * 4

[12:11] <p6eval> rakudo 8681da: OUTPUT«80080␤19720␤»

[12:12] <snarkyboojum> rakudo: say [+] 16..400

[12:12] <p6eval> rakudo 8681da: OUTPUT«80080␤»

[12:12] <masak> huh.

[12:13] * masak thought [+] was a listop

[12:13] <masak> oh wait.

[12:13] <masak> never mind.

[12:13] <masak> 100 * 4 == 400

[12:13] <masak> yes, it does make sense as-is.

[12:16] <masak> wouldn't some Perl 6 implementor like to put in the optimization [+] $A..$B ==> ($B - $A + 1) * ($A + $B) / 2? :)

[12:17] <masak> (that only holds when $B >= $A, of course)

[12:17] <masak> rakudo: my $A = 16; my $B = 400; say ($B - $A + 1) * ($A + $B) / 2

[12:17] <p6eval> rakudo 8681da: OUTPUT«80080␤»

[12:17] <masak> \o/

[12:18] <snarkyboojum> _o/

[12:21] * masak really looks forward to toying with optimizations in Yapsi

[12:24] *** pmurias joined
[12:36] *** mtk joined
[12:37] *** helv12 left
[12:40] *** wamba left
[12:40] *** helv12 joined
[12:41] *** wamba joined
[12:50] *** pmurias left
[12:50] *** zby_home_ joined
[12:51] <arnsholt> masak: That optimisation only holds if there's no funny business going on with the .. op and so on, though =)

[12:53] *** WonTu joined
[12:53] *** WonTu left
[12:53] <jnthn> Thankfully, you can statically know about multi overrides. :)

[12:53] <masak> yay

[12:53] <moritz_> masak: I wanted to do in rakudo

[12:53] *** bacek joined
[12:53] <moritz_> masak: but it turns out that if I install one [+] multi, the rest isn't autogenerated

[12:54] <moritz_> and it needs to check if the boundaries are excluded

[12:55] <moritz_> erm, s/ex/in/

[12:57] *** DarkWolf84 left
[12:58] <masak> of course.

[13:02] *** dave_miles joined
[13:07] <takadonet> morning all

[13:09] <moritz_> \o

[13:09] *** DarkWolf84 joined
[13:09] *** jedai left
[13:11] <tadzik> o/

[13:11] <masak> takadonet: \o

[13:15] *** pmurias joined
[13:16] <pmurias> moritz_: niecza using roast see t/run_spectests

[13:16] *** takadonet left
[13:17] <moritz_> pmurias: thanks

[13:17] <moritz_> sadly my tuits just got destroyed

[13:17] <moritz_> (related only to real life being mean)

[13:19] <pmurias> roast tests are a mixture of easy and (very) hard test cases so it takes a lot of fuding to pass a spec test

[13:19] <moritz_> I know

[13:20] *** MayDaniel joined
[13:24] *** takadonet joined
[13:24] *** takadonet left
[13:24] *** takadonet joined
[13:24] <takadonet> yo

[13:25] <colomon> \o

[13:26] <moritz_> it seems that my parenthood is approaching faster than anticipated

[13:27] <moritz_> new ETA: tomorrow

[13:27] * moritz_ panics

[13:27] * masak hugs moritz_

[13:27] <masak> pmurias: do you think it would be worth it to segregate easy and very hard test cases? would such a division be the same across implementations?

[13:28] <moritz_> in general it would not

[13:28] <moritz_> but there are some things that are generally considered harder than others

[13:28] * colomon hugs moritz_ 

[13:28] <moritz_> ie multi harder than single dispatch

[13:28] * moritz_ feels hugged. Thanks masak and colomon 

[13:28] <colomon> moritz_: how early is this?

[13:29] <jnthn> moritz_: *hug* Good luck, hope all goes well!

[13:29] <moritz_> colomon: original ETA was Feb 1st

[13:29] *** satyavvd joined
[13:29] <moritz_> so it's about 2.5 weeks earlier

[13:29] <colomon> not bad.

[13:30] <mux> they should have progress bars on pregnant women bellies

[13:30] <moritz_> not too dramatic

[13:30] <masak> sounds relatively OK.

[13:30] <masak> mux: I doubt that would've helped in this case.

[13:30] <moritz_> mux: they have, kindof. But sometimes there are IO errors near the end

[13:30] <mux> heh.

[13:30] <moritz_> they make regular size measurements with supersonic imagining

[13:31] <mathw> moritz_: oooh good luck

[13:31] <mux> moritz_: congrats btw

[13:31] <moritz_> thanks everyone

[13:31] <moritz_> and sorry for distracting from masak's and pmurias' p6 discussion :-)

[13:31] <takadonet> mortiz_ looks like I be in the same boat as you in a few months

[13:32] <masak> moritz_: np. I didn't feel distracted from any discussion.

[13:32] <moritz_> takadonet: \o/ congratulations, and my well wishes to the whole (small) family

[13:38] <colomon> takadonet: congratulations as well!

[13:38] *** drbean joined
[13:38] *** ashleydev joined
[13:39] <coldhead> i hope perl6 doesn't get me pregnant too

[13:40] *** MayDaniel left
[13:44] <masak> coldhead: not if you use Perl 6 in the intended way.

[13:44] <jnthn> .oO( Always use Safe; )

[13:46] <daxim> http://p3rl.org/Sex

[13:46] *** coldhead left
[13:49] <masak> coldhead: no! don't leave :)

[13:50] <jnthn> "Scared of getting pregnant" would be a new reason for not using Perl 6...

[13:53] <masak> I'll take my chances. I've been a Perl 6 user thus far, and nothing like that has happened to me.

[13:53] <masak> I may have gained a little weight, but...

[13:55] <jnthn> Me too, and it's Perl 6's fault. I turn beer into code and consuming beer in order to produce code for the Perl 6 project made me fatter. :)

[13:57] <takadonet> thanks guys!

[14:03] *** takadonet left
[14:05] *** hanekomu left
[14:05] <gfldex> jnthn: did you try to code while riding a bicycle?

[14:06] *** hanekomu joined
[14:07] <masak> gfldex: I find I can do routine tasks, like passing tests, on a bicycle. deeper design-related coding issues, however, no.

[14:07] <masak> either the code comes out not very good, or I run off the road into a ditch.

[14:07] <masak> I also find the whole keyboard-and-steering thing complicated.

[14:08] <gfldex> if we had to power our computers via the dynamo, we would all be much healthier :)

[14:08] <PerlJam> good * #perl6

[14:09] <PerlJam> masak: They make chorded keyboards that are handle-bar-sized.  You just have to get used to them  :)

[14:09] *** satyavvd_ joined
[14:09] <masak> PerlJam: ooh

[14:09] <PerlJam> In fact, I think the original models were specifically for bicyclers.

[14:11] *** satyavvd left
[14:11] *** satyavvd_ is now known as satyavvd

[14:12] *** plobsing left
[14:13] *** takadonet joined
[14:14] *** ggoebel left
[14:16] <pmurias> masak: re segregating test i think it would be hard

[14:17] <pmurias> masak: some implemenation might have crufy syntax implemented others might have multimethods

[14:19] *** ggoebel joined
[14:19] <pmurias> masak: what could be helpfull would be to have a convienient fuding tool

[14:21] <masak> pmurias: I think no-one would object if you were to put forward more convenient tooling for fudging tests.

[14:24] *** ggoebel left
[14:29] *** ggoebel joined
[14:34] <[Coke]> doesn't moritz_ have something for auto-fudging and un-fudging for rakudo?

[14:35] *** plobsing joined
[14:35] <moritz_> just unfudging

[14:35] *** REPLeffect left
[14:36] * [Coke] ponders the sanity of writing a fudger in perl6.

[14:38] <pmurias> [Coke]: the fudger would be very complex

[14:38] <pmurias> * woudln't

[14:38] <pmurias> * wouldn't

[14:38] *** lamstyle left
[14:40] *** BaggioKwok joined
[14:40] <masak> [Coke]: it wouldn't be insane at all to do it in Perl 6. but I would consider featureset to be vastly more important than language choice in this case.

[14:41] *** satyavvd left
[14:43] *** BaggioKwok left
[14:48] *** cjk101010 left
[14:48] *** REPLeffect joined
[14:48] *** GinoMan left
[14:51] *** jedai joined
[14:57] <tadzik> what's a fudger?

[14:57] <takadonet> tadzik: someone who makes fudge :)

[14:57] <PerlJam> A more polite expletive? :)

[14:57] <masak> tadzik: a filter that selectively disables tests for implementations that don't support them yet.

[14:57] <tadzik> thanks

[14:57] <masak> tadzik: so that all implementations can (in theory) use the same spectest suite.

[14:57] <takadonet> masak: my explanation is better

[14:58] <masak> takadonet: oh, no doubt.

[14:58] <daxim> the interesting question then is:  why not let e.g. pugs just fail instead of distorting the outcome?

[14:58] <PerlJam> masak: What's this "(in theory)" stuff?  It seems to have worked in practice so far  :)

[14:59] <moritz_> daxim: because we also use the spectests as regression tests for the implementation

[14:59] <masak> daxim: Pugs is not a good example, because no-one's developing it right now. but for an implementation that's being developed, you'd want to see only the relevant tests.

[14:59] <masak> PerlJam: mostly what pmurias said. he seems not altogether happy with the current fudger.

[15:00] <masak> PerlJam: I don't know what that's about more exactly, but I don't think pmurias would say something like that without reason.

[15:04] <moritz_> sorear: what's your preferred way of receiving patches for niecza?

[15:06] *** lamstyle joined
[15:09] <pmurias> moritz_: fork it on github

[15:09] <pyrimidine> takadonet: Congrats!  I have a 4-month old now :)

[15:10] <pyrimidine> Babies everywhere

[15:10] <pyrimidine> (and belated congrats to moritz_ as well!)

[15:10] <takadonet> pyrimidine: thanks

[15:12] <PerlJam> I have two 60-month olds as of Jan 10  ;-)

[15:12] <masak> twins?

[15:12] *** skangas left
[15:12] <PerlJam> aye

[15:12] <masak> nice.

[15:12] <colomon> my guy is 28-months.  

[15:12] <mathw> my dad's a twin

[15:12] <mathw> none in my generation of the family though

[15:12] <colomon> and just "Super Chief, meet the Little Blue Engine."  (He's playing trains.)

[15:13] <mathw> his dad was a twin too

[15:14] *** KyleHa joined
[15:14] <KyleHa> Howdy #perl6.

[15:14] * moritz_ is abusing rakudo's update_passing_test_data.pl for niecza

[15:14] <moritz_> \o/ it's KyleHa 

[15:14] <masak> KyleHa! \o/

[15:14] <PerlJam> mathw: I didn't know there were any twins in my family until I had two myself.  Suddenly I found out that my mother's father was a twin as were a majority of his cousins.   (My mother's parents died when I was young and we moved out of state, so I didn't get to really know that part of my family)

[15:16] <KyleHa> Rakudo testers: I ran spectest on a system with no icu and discovered two other files that failed because of that (they passed after I installed icu).  They are dash-e.t and ignorecase.t.  Those don't seem all that Unicode-related.  Should they be marked #icu in the spectest.data, or should we do something about the tests in them?

[15:17] <moritz_> good question

[15:17] <PerlJam> maybe a little of both.

[15:18] <masak> the interesting question is *why* they currently depend on icu.

[15:19] <PerlJam> dash-e.t  uses \c[LATIN SMALL LETTER A WITH DOT ABOVE]  which seems a little hard to come by without some knowledge of unicode

[15:19] <KyleHa> As I recall, it's this test in ignorecase:  ok('Δ' ~~ m:i/δ/, ':i with greek chars');

[15:22] <mathw> PerlJam: Wht I never understood is why my grandma insisted on dressing Dad and his brother exactly the same whenever possible when they were boys.

[15:22] <PerlJam> maybe split ignorecase.t into two parts?   ignorecase-ascii.t  and ignorecase-unicode.t ?

[15:22] <mathw> PerlJam: in all the photos, even they don't know which is which.

[15:23] *** ashleydev left
[15:23] <masak> mathw: they're *twins*. that's the way it works.

[15:23] *** MayDaniel joined
[15:23] <masak> it's an unwritten rule or something.

[15:23] <mathw> maybe that explains why they're so different now

[15:23] <mathw> a backlash :)

[15:23] <PerlJam> My twins are boy-girl, so it would be really weird to dress them alike  ;)

[15:24] <mathw> ah fraternal twins

[15:24] <mathw> much more interesting

[15:24] <KyleHa> I saw twins on the train this morning.  The only difference was one had her pants over her boots and the other hand her pants bunched up above her boots.

[15:29] *** wtw left
[15:30] *** wtw joined
[15:30] *** wtw left
[15:30] *** skangas joined
[15:30] *** skangas is now known as kangas

[15:31] <Su-Shee> (I will rephrase in the next article accordingly.. "if vim gets you laid these days - Perl 6 gets you pregnant.." :)

[15:31] <takadonet> wow...

[15:31] <masak> heh

[15:31] *** kangas is now known as skangas

[15:31] <masak> Perl 6 got me a job. that's enough for now.

[15:32] <Su-Shee> masak: wait and see.. ;)

[15:32] *** gbacon joined
[15:32] <TimToady> rakudo: say [+](1..100) + 0  # is there a ticket for this misparse?

[15:32] <p6eval> rakudo 8681da: OUTPUT«100␤»

[15:33] * takadonet looks at masak

[15:33] *** orafu left
[15:33] <masak> std: say [+](1..100) + 0

[15:33] <p6eval> std 625303c: OUTPUT«ok 00:01 121m␤»

[15:34] *** risou joined
[15:34] <masak> TimToady: oh, I see now.

[15:34] <masak> not sure there's a ticket for that.

[15:34] <TimToady> point is, it's supposed to work like a list op

[15:34] <masak> there are similar tickets, for sure.

[15:34] * masak submits rakudobug, Justin Case

[15:34] <moritz_> fwiw it got me a job too, but I rejected

[15:34] <masak> moritz_: s/rejected/declined/

[15:35] <moritz_> erm, yes :-)

[15:35] <TimToady> or ejected, if it was to be a fighter pilot

[15:35] <colomon> Wait, is it a misparse?

[15:36] *** orafu joined
[15:36] <moritz_> niecza: say +"23"

[15:36] <p6eval> niecza v1-143-g3a6eeb2: OUTPUT«Unhandled exception: Unable to resolve method Numeric in class Str␤  at  line 0 (ExitRunloop @ 0)␤  at (eval) line 1 (MAIN mainline @ 1)␤  at /home/p6eval/niecza/lib/SAFE.setting line 1070 (SAFE C378_ANON @ 1)␤  at /home/p6eval/niecza/lib/SAFE.setting line 1070 (SAFE

[15:36] <p6eval> ..module-SAFE @ …

[15:36] <colomon> rakudo: say (1..100) + 0

[15:36] <p6eval> rakudo 8681da: OUTPUT«100␤»

[15:37] *** DarkWolf84 left
[15:37] <TimToady> rakudo: say ([+] 1..100) + 0  # should get this

[15:37] <p6eval> rakudo 8681da: OUTPUT«5050␤»

[15:37] <TimToady> a listop with immediate () is a function call

[15:41] *** kensanata left
[15:42] *** Kodi joined
[15:42] *** plobsing left
[15:42] <TimToady> rakudo: say [+](1..100) + 0 # instead of this

[15:42] <p6eval> rakudo 8681da: OUTPUT«100␤»

[15:42] *** MayDaniel left
[15:43] <TimToady> anyway, shouldn't need extra parens around [+]() to make it come out right

[15:43] <masak> nod

[15:43] * masak adds this to the ticket

[15:45] <dalek> niecza: 6b2a40e | pmurias++ | cl-backend/backend.lisp:

[15:45] <dalek> niecza: started working on classes in the common lisp backend

[15:45] <dalek> niecza: review: https://github.com/sorear/niecza/commit/6b2a40e93f

[15:45] <pmurias> hmm, what syntax should embedding common lisp in a Perl 6 program use?

[15:45] <pmurias> * embedding common lisp code

[15:46] <masak> pmurias: 'use Common::Lisp;', perhaps.

[15:46] <colomon> does that mean that [+](1..100) + 0 is different from [+] (1..100) + 0  ? # note extra space between ] & (

[15:47] <TimToady> yes

[15:47] <TimToady> same as for any other listop

[15:47] <TimToady> rakudo: say (1+2) + 3; say(1+2) + 3

[15:47] <p6eval> rakudo 8681da: OUTPUT«6␤3␤»

[15:48] <colomon> makes sense, I guess

[15:50] <masak> colomon: compare it to the path Perl 5 has chosen (explained at the beginning of 'perldoc perlfunc')

[15:50] <KyleHa> rakudo:  use Test;is [+](1..10) + 0, ([+] 1..10) +0, "RT 82210"

[15:50] <p6eval> rakudo 8681da: OUTPUT«get_attr_str() not implemented in class 'Sub'␤  in main program body at line 1:/tmp/FZvL0tOl9E␤»

[15:51] <KyleHa> C'est what?

[15:51] <masak> I'm tempted to submit another rakudobug for that :)

[15:52] <colomon> you should, it seems

[15:52] * masak submits rakudobug

[15:52] <TimToady> not that the first [+] is slurping is's args

[15:52] <TimToady> due to the bug in question

[15:52] <masak> troo

[15:52] <TimToady> *note

[15:52] <masak> KyleHa: try with more parentheses.

[15:53] <colomon> btw, has anyone looked at all the weird behavior turned up last night on the list? 

[15:53] <TimToady> particularly around the first arg to is

[15:53] * colomon no longer remembers the details, there is a lack of sleep thing going on here.

[15:53] <KyleHa> Oh, that makes sense.  Masak: I worked around it as "ok … == … " instead.

[15:53] <TimToady> that will still misparse if you're not careful

[15:54] <colomon> I mean http://irclog.perlgeek.de/perl6/2011-01-13#i_3181402 and further on

[15:54] <colomon> WhateverClosures misbehaving with respect to common idioms for looking at ranges of numbers.

[15:57] <TimToady> we've said that ~~ doesn't autocurry, but maybe it doesn't autocurry only on the right arg

[15:58] <TimToady> and chained ops are hard to autocurry correctly, but it will presumably get done someday

[15:59] <dalek> roast: c5240b2 | (Kyle Hasselbacher)++ | S03-metaops/reduce.t:

[15:59] <dalek> roast: [reduce] Test for RT 82210: Misparse of metaop with immediate ()

[15:59] <dalek> roast: review: https://github.com/perl6/roast/commit/c5240b2df8

[15:59] <dalek> roast: 8be7057 | (Kyle Hasselbacher)++ | S32-hash/push.t:

[15:59] <dalek> roast: Merge branch 'master' of github.com:perl6/roast

[15:59] <dalek> roast: review: https://github.com/perl6/roast/commit/8be7057c6a

[16:00] <pmurias> masak: {use Common::Lisp;(format t "Hello from Common Lisp~%")}?

[16:01] *** pmurias left
[16:01] <TimToady> a chained op has to be considered a function of all its args to curry right: 4 < *.value < 7 really means chain'em(4, &[<], *.value, &[<], 7) or some such

[16:01] *** plobsing joined
[16:01] *** KyleHa left
[16:02] <masak> pmurias: right.

[16:03] <dalek> rakudo: a350ff4 | kyleha++ | t/spectest.data:

[16:03] <dalek> rakudo: [spectest.data] Mark dash-e and ignorecase as depending on icu (because they do)

[16:03] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/a350ff4417

[16:09] <[Coke]> masak: (perl 6 got you a job) pics or it didn't happen. (well, ok, blog.)

[16:10] <TimToady> he didn't say it was a paying job

[16:10] <masak> [Coke]: http://twitter.com/Edument/status/24580314319822849

[16:10] <[Coke]> sadly, cold fusion is the only language that has gotten me a job. (twice, even.)

[16:11] <masak> [Coke]: I didn't say it was a Perl 6 job.

[16:11] <[Coke]> masak++

[16:11] <[Coke]> masak: I understand.

[16:12] <[Coke]> (one of the jobs I got with CF ended up being java mostly anyway. ;)

[16:13] *** plobsing left
[16:14] <masak> [Coke]: incidentally, it's the same employer as jnthn's, making that company probably the most p6-dense one in the world.

[16:15] <masak> hm, unfortunate choice of words. "p6-concentrated" :)

[16:18] *** Trashlord left
[16:19] *** plobsing joined
[16:20] *** cjk101010 joined
[16:27] *** risou_ joined
[16:27] <colomon> masak: well, my company has one employee... ;)

[16:28] <masak> that's a bit of a corner case, methinks.

[16:29] *** risou left
[16:29] <masak> at least you're on good terms with the boss ;)

[16:29] *** plobsing left
[16:30] <moritz_> 2 perl 6 hackers in one company sounds like a higher density than 1 in one company :-)

[16:31] <masak> depends whether you count per company or per employees in the company, I guess.

[16:32] <colomon> yeah, but as long as your company has more than two employees, the percentage win goes to mine.  :)

[16:33] *** avuserow left
[16:33] *** pyrimidine left
[16:35] *** avuserow joined
[16:40] *** kjeldahl joined
[16:41] <masak> jnthn: colomon is challenging our role as the most p6-packed company! :)

[16:41] <masak> jnthn: we need to lay a few people off, I think. :P

[16:42] *** plainhao joined
[16:45] <jnthn> masak: :P

[16:45] <jnthn> masak: Well, at least we're safe in such a layoff. :P

[16:47] *** pyrimidine joined
[16:48] <jnthn> .oO( We could always teach our boss Perl 6... )

[16:50] *** MayDaniel joined
[16:56] <colomon> you could always give me the funds to hire a couple more employees... ;)

[16:57] *** Trashlord joined
[17:03] *** cjk101010 left
[17:04] *** ashleydev joined
[17:04] *** daxim left
[17:08] *** mtk left
[17:09] *** mtk joined
[17:10] *** spq1 joined
[17:11] *** wamba left
[17:14] *** plobsing joined
[17:16] *** Vlavv` joined
[17:17] *** Vlavv_ left
[17:22] *** envi left
[17:22] *** justatheory joined
[17:24] *** Kodi left
[17:26] *** timbunce joined
[17:37] *** ashleydev left
[17:53] *** hanekomu left
[17:56] *** estrabd_afk is now known as estrabd

[17:58] *** ggoebel left
[17:58] *** MayDaniel left
[17:58] *** dakkar left
[18:00] *** rgrau joined
[18:02] *** ggoebel joined
[18:12] *** snearch joined
[18:13] *** kanishka joined
[18:18] *** masak left
[18:29] *** jaldhar left
[18:31] *** jferrero joined
[18:35] *** risou_ left
[18:41] *** timbunce left
[18:51] *** kanishka left
[18:55] *** molaf left
[19:10] *** cdarroch joined
[19:10] *** cdarroch left
[19:10] *** cdarroch joined
[19:13] *** _twitch joined
[19:17] *** vmspb joined
[19:34] *** mberends joined
[19:42] *** orafu left
[19:43] *** ggoebel left
[19:44] *** orafu joined
[19:48] *** ggoebel joined
[19:49] *** alester joined
[19:53] *** hercynium joined
[19:54] *** mtk left
[19:54] *** _twitch left
[19:55] <TimToady> was it something I said?

[19:57] <sorear> Hi!

[19:57] <sorear> good * #perl6

[19:58] <TimToady> likewise

[19:58] <colomon> \o

[19:59] <takadonet> sorear: yo

[20:01] <moritz_> hi sorear. Pull requests waits for you :-)

[20:06] *** coldhead joined
[20:07] *** KatrinaTheLamia left
[20:09] *** dave_miles left
[20:23] *** mtk joined
[20:27] *** shi joined
[20:44] *** plainhao left
[20:49] *** MayDaniel joined
[20:52] *** masak joined
[20:52] <masak> ahoy! \o/

[20:53] <moritz_> lolitsmasak!

[20:53] <tadzik> o/

[20:53] <jnthn> yayitsmasak!

[20:53] <masak> yayitsallyouguys!

[20:53] <jnthn> It soll them?

[20:54] <masak> I... don't know what that means.

[20:54] <jnthn> Me either. :P

[20:54] <masak> halp, jnthn is making English up as he goes along :)

[20:55] <masak> that's cheating. I've worked hard for the level of English I have at this point. you can't go extending it now! :)

[20:55] <jnthn> .oO( I can imagine people saying that about Perl 6... )

[20:55] *** kfo_ joined
[20:55] <masak> yeah, but you didn't predeclare your unorthodox use of the English language :)

[20:56] <jnthn> :P

[20:56] * moritz_ declares jnthn as a punster

[20:57] <masak> I've created a punster!

[20:57] <TimToady> you can think of the 'jnthn' on the front as a kind of meta-sigil that declares the following slang

[20:58] <moritz_> ... to be parsed with .*

[20:58] *** kfo left
[20:59] <jnthn> TimToady: Talking of slangs... Can I sorta think of them as a little piece of grammar that we need to compile into something role-ish immediately after parsing it, and mix into the current cursor? Or do you "enter" / consume a slang in some other explicit way?

[20:59] <perigrin> s'all is a perfectly crumulous word 

[20:59] <jnthn> I'm guessing it's not quite as simple as being just applied to the current compilation unit or you couldn't export them.

[21:01] *** thepler left
[21:02] *** plobsing left
[21:03] <TimToady> mixins are kinda the general approach; we do this writ small when we say Q:qq:c// and such; it just needs to be writ a bit bigger for importing

[21:03] *** snearch left
[21:04] <jnthn> TimToady: *nod*

[21:04] <jnthn> TimToady: I want to implement it soonish.

[21:05] <jnthn> TimToady: So just poking for more concrete. :)

[21:05] * sorear wonders what the syntax for implementing Cobol.pm6 is

[21:05] <jnthn> My use case is related to meta-model stuff and introducing new package declarators, fwiw.

[21:06] *** thepler joined
[21:06] <jnthn> EXPORT SYNTACTIC EXTENSION TO CALLER NAMED "COBOL"

[21:06] <jnthn> BEGIN GRAMMAR DIVISION

[21:06] <jnthn> ... :)

[21:06] <perigrin> START PROGRAMMATIC UNIT OF CODE

[21:07] <perigrin> gotta make sure it's < 80 columns though

[21:07] <perigrin> or else it'll never fit on a card.

[21:07] <sorear> jnthn: um, no

[21:07] <sorear> jnthn: bootstrapping can't be the first step :D

[21:08] <arnsholt> masak: For p4, should our solutions do something when the game is over?

[21:09] <masak> arnsholt: anything beyond base-test is optional/bonus stuff. that said, do something that you yourself believe in.

[21:09] <masak> arnsholt: I will quite literally judge the code on the bases of small things like that, along with more sweeping criteria.

[21:10] <masak> moritz_: jnthn and I discussed the return value of s/// a bit more. here's the solution we like best: a successful s/// returns the (whole) result string, an unsuccessful one returns Str. that way, it always returns something of type Str, and if you're interested in whether it matched, you can do &defined on it.

[21:10] <arnsholt> masak: Right, that makes sense, in a Perl 6 kind of way =)

[21:10] <arnsholt> Thanks!

[21:10] <sorear> masak: will all entrants be published?  I'd love to see a cross section of p6 styles

[21:10] <arnsholt> Yeah, that might be cool

[21:11] <masak> sorear: yes, all submissions (even overridden ones) will be published. that's part of the contest, so to speak.

[21:13] *** MayDaniel left
[21:14] <masak> which means people will have the same basis as I have for judging a winner. I hope the increased transparency won't create any problems. :)

[21:14] <masak> that's also why I ask people to send in exceptional solutions. makes it easier to pick a winner. :P

[21:16] *** mberends left
[21:28] *** plobsing joined
[21:29] *** mtk left
[21:30] *** masak left
[21:37] *** fhelmberger left
[21:41] <Tene> Hmm... so I could just send in anything at all, and he'd publish it with his solutions?

[21:42] <Tene> >.>

[21:46] <sjohnson> <.<

[21:48] <[Coke]> &.!

[21:54] *** Patterner left
[21:56] *** Psyche^ joined
[21:56] *** Psyche^ is now known as Patterner

[22:03] *** aindilis left
[22:06] <jnthn> Tene: Mwahaha. :)

[22:07] <Tene> obviously I need to write some TimToady / GVR slashfic to submit.

[22:09] <huf> do it

[22:16] <colomon> wait, overridden solutions will be published?!?!!!  Oh noez!

[22:25] *** colomon left
[22:26] *** shi left
[22:35] *** am0c joined
[22:37] *** Flibble3657 joined
[22:39] *** alester left
[22:41] *** Flibble3657 left
[22:43] *** colomon joined
[22:44] *** pmurias joined
[22:44] <pmurias> sorear: hi

[22:44] *** shi joined
[22:44] <pmurias> why do you want to implement cobol?

[22:54] <Khisanth> because there is still a lot of cobol code around? :p

[22:55] *** plobsing left
[22:55] * pmurias has never seen a cobol program

[22:59] *** kaare_ left
[22:59] *** Rodgey joined
[22:59] *** Rodgey left
[22:59] <flussence> they usually look VERY LOUD AND SERIOUS AND ONLY HAVE ONE PUNCTUATION SYMBOL.

[23:00] *** plobsing joined
[23:01] <flussence> by that metric I suppose they're the exact opposite of p6...

[23:10] *** kjeldahl left
[23:13] *** plobsing left
[23:14] *** zby_home_ left
[23:14] *** pmurias left
[23:22] *** hercynium left
[23:25] *** estrabd is now known as estrabd_afc

[23:25] *** estrabd_afc is now known as estrabd_amf

[23:37] <mdxi> cobol isn't as horrid as most people (who have also never read any) make it out to be.

[23:38] <mdxi> it's just very verbose and unimaginative

[23:39] <mdxi> a 5-10 page cobol program can be rewritten as a 10-15 line RPG program. not that that means anything to anyone, either :)

[23:56] *** plobsing joined
