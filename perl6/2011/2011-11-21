[00:04] *** dorlamm joined
[00:07] * diakopter finds it funny that the syntax highlighting setting that works the best for Actions.nqp is the C language setting.

[00:08] <sorear> I should try that

[00:08] <sorear> I've been using filetype=perl for most of my Perl 6 hacking

[00:08] <arnsholt> Not petdance/vim-perl?

[00:09] <diakopter> this is in Notepad++, so it probably won't match up with vim

[00:09] <sorear> which works pretty well but has an unfortunate tendency to get stuck in the wrong mode

[00:09] <arnsholt> Yeah, that makes sense =)

[00:09] <arnsholt> Yeah, it does get lost occasionally

[00:09] <sorear> arnsholt: the problem with petdance's perl6 mode is that it is infuriatingly slow

[00:11] <sorear> at 300-500 lines I can type faster than vim can update the highlighting (and it does so synchronously, so my typing is slowed down)

[00:11] <sorear> at 2000-6000 lines just _opening_ files takes far too long

[00:12] <sorear> this is of course not a complaint against petdance.  Rather it is an instantiation of Alias' old complaint that Perl 6 cannot be effectively parsed by tools

[00:13] <diakopter> should m:Perl5// support codeblocks?

[00:13] <sorear> why not?

[00:13] <diakopter> ok

[00:14] *** tokuhirom left
[00:17] <diakopter> sorear: should m:Perl5// be sigspace?

[00:19] *** ksi left
[00:20] *** Sarten-X joined
[00:21] <sorear> diakopter: I do not understand why you are asking this question.  Yes, spaces are significant in Perl 5 regexes

[00:21] *** replore joined
[00:21] <diakopter> ok, I was thinking of //x

[00:25] <arnsholt> sorear: Yeah, those are good points

[00:25] <arnsholt> Most of my Perl 6 is smaller than that though

[00:44] *** cooper left
[00:45] *** cooper joined
[00:51] *** mdxi joined
[00:57] *** PacoLinux joined
[00:58] *** Trashlord left
[01:00] *** Trashlord joined
[01:04] *** PacoLinux left
[01:04] *** Chillance left
[01:11] *** woosley joined
[01:14] *** lestrrat joined
[01:23] *** dorlamm left
[01:27] *** Mowah_ left
[01:32] *** PacoLinux joined
[01:38] *** PacoLinux left
[02:11] <diakopter> making <[\c32 .. \c126]> work is quite tricky

[02:12] <diakopter> esp if <[\c1 .. Z]> is allowed

[02:15] <diakopter> niecza: say '"' ~~ /<[\c32 .. \c126]>/

[02:15] <p6eval> niecza v11-24-gcdd4e66: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Action method charspec not yet implemented at /tmp/L7CMFR3epG line 1:␤------> [32msay '"' ~~ /<[\c32[33m⏏[31m .. \c126]>/[0m␤␤Action method backslash:c not yet implemented at /tmp/L7CMFR3epG line 1:␤------> [32msay '"' …

[02:28] *** cognominal_ joined
[02:33] *** cognominal_ left
[02:33] *** cognominal___ joined
[02:33] *** alvis joined
[03:06] *** ggoebel joined
[03:18] *** pat_js joined
[03:21] *** envi_ joined
[03:21] *** wolfman2000 joined
[03:41] *** satyavvd joined
[03:54] *** envi_ left
[04:18] <diakopter> karma larry

[04:18] <aloha> larry has karma of 157.

[04:18] <diakopter> karma sorear

[04:19] <aloha> sorear has karma of 2027.

[04:19] *** Sarten-X left
[04:20] <sorear> karma TimToady

[04:20] <aloha> TimToady has karma of 250.

[04:21] <sorear> diakopter: note that these figures are skewed because we've gone through several karma bots

[04:21] <diakopter> yeah

[04:21] <diakopter> karma audreyt

[04:21] <aloha> audreyt has karma of 3.

[04:22] *** PacoLinux joined
[04:22] <pat_js> hi, does someone know which of these dispatch:<…> methods do the "normal" dispatch?

[04:22] *** molaf joined
[04:23] <pat_js> like I can override dispatch:<.=> to get something else for $foo.="whatever"()

[04:23] <pat_js> but which of these do I override for a "normal" method?

[04:24] <pat_js> perl6: my $foo = "mumble" but role {method dispatch:<.=> ($var){say "Got $var"}}; $foo.='blabla'()

[04:25] <p6eval> niecza v11-24-gcdd4e66: OUTPUT«Potential difficulties:␤  Useless use of quotes at /tmp/ZLr6GROAcj line 1:␤------> [32m ($var){say "Got $var"}}; $foo.='blabla'[33m⏏[31m()[0m␤␤Unhandled exception: Unable to resolve method blabla in class Str but ANON␤  at /tmp/ZLr6GROAcj line 1 (mainl…

[04:25] <p6eval> ..rakudo 4cff8e: OUTPUT«Got blabla␤»

[04:25] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected "$foo"␤    expecting "=", "::", "handles", "is", bare trait, subroutine parameters, trait, block, context, ":" or "("␤    at /tmp/a0zlS8XBeT line 1, column 4␤»

[04:26] *** birdwindupbird joined
[04:26] <sorear> pat_js: the dispatch:<.=> methods are, as far as I can tell, an undocumented and nonstandardized Rakudo implementation detail

[04:27] <pat_js> ah, ok thanks

[04:28] <sorear> pat_js: I suppose you are trying to do something like perl 5's AUTOLOAD?

[04:29] <pat_js> sorear: sortof, just looking at Rosettacode to solve some simple task, and thought "Send_an_unknown_method_call" would be possible with all that metamodel stuff

[04:29] <sorear> niecza: class Foo { method FALLBACK($name, *@args) { say "got $name" } }; my $foo = Foo.new; say $foo.defined; $foo.blabla # here's what niecza can do for you

[04:29] <p6eval> niecza v11-24-gcdd4e66: OUTPUT«Potential difficulties:␤  @args is declared but not used at /tmp/DuccPvbalS line 1:␤------> [32mclass Foo { method FALLBACK($name, *[33m⏏[31m@args) { say "got $name" } }; my $foo = [0m␤␤Bool::True␤got blabla␤»

[04:30] <sorear> pat_js: the "correct" Rakudo way involves overriding find_method on the metaclass

[04:30] <sorear> jnthn please correct me if I'm wrong - I don't think users are supposed to touch dispatch:*

[04:30] * sorear queries p6eval to try and get somthing working

[04:30] <patch> hi all

[04:31] <patch> i just fixed lots of typos in the specs

[04:31] <patch> and am about to push them

[04:31] <patch> should i update Last Modified or just leave it since these are not substantial changes?

[04:32] <diakopter> when fixing typos I usually don't update it

[04:32] <diakopter> it's up to you though

[04:32] <patch> ok, thanks

[04:37] *** PacoLinux left
[04:43] <dalek> specs: 45ca8c8 | (Nick Patch)++ | S (16 files):

[04:43] <dalek> specs: fix typos

[04:43] <dalek> specs: review: https://github.com/perl6/specs/commit/45ca8c8cc4

[04:44] <diakopter> patch: wow nice

[04:57] *** jaldhar joined
[04:59] <pat_js> sorear: and HOW do i override a method in the metaclass, I can't even access it properly (e.g. has no .clone)

[05:02] <sorear> pat_js: jnthn blogged an example a few months ago

[05:03] *** domidumont joined
[05:04] <sorear> the spec talks about a CANDO method; Niecza's FALLBACK is closer but not quite there

[05:07] *** molaf left
[05:27] <pat_js> sorear: yes, I found it, but when I try to run his code, it says 'can only get_how on a SixModelObject' 

[05:28] <pat_js> sorear: sorry, made some copy & paste errors

[05:36] *** pat_js left
[06:01] *** localhost joined
[06:22] <diakopter> sorear: how goes the Unicode strivings?

[06:49] <sorear> diakopter: blocked on tuits

[06:58] *** koban joined
[07:04] *** sayu joined
[07:06] *** wtw joined
[07:15] *** kaleem joined
[07:23] *** wtw left
[07:35] *** wtw joined
[07:48] *** wtw left
[07:50] *** wtw joined
[08:16] *** koban left
[08:24] *** mkramer joined
[08:24] *** mkramer left
[08:26] *** y3llow_ joined
[08:28] *** y3llow_ is now known as y3llow

[08:28] *** Lothar joined
[08:31] *** mdxi left
[08:31] *** mdxi joined
[08:31] *** mkramer1 joined
[08:35] *** spine joined
[08:35] *** spine left
[08:39] *** am0c joined
[08:46] *** mj41 joined
[08:50] *** PacoLinux joined
[08:54] <masak> morning, #perl6

[08:54] * masak yawns

[08:54] <arnsholt> G'day masak o/

[08:54] *** PacoLinux left
[08:54] <masak> wow -- I know I'm busy when it doesn't even occur to me to backlog...

[08:59] <masak> sorear: sorry I missed your highlight yesterday -- I'd be happy to talk about promoting Niecza.

[09:10] <sorear> heh.. now *I'm* busy

[09:10] *** sftp joined
[09:10] *** sftp_ left
[09:10] *** jevin left
[09:10] *** miso2217__ joined
[09:10] *** Moukeddar joined
[09:10] *** jevin_ joined
[09:11] *** robins joined
[09:18] *** Moukeddar left
[09:19] *** mj41 left
[09:20] *** sayu left
[09:26] *** mj41 joined
[09:33] *** icwiener joined
[09:33] *** Sarten-X joined
[09:35] *** mkramer1 left
[09:36] *** mkramer joined
[09:36] <jnthn> mornin'

[09:36] *** woosley left
[09:36] <sorear> heya jnthn

[09:37] <jnthn> dang, slept through alarm...

[09:37] * jnthn is meant to be catching up $dayjob project today...

[09:37] *** Sarten-X left
[09:38] *** cosimo joined
[09:38] <jnthn> sorear: The dispatch:<blah> are an implementation details. 

[09:39] <jnthn> sorear: I can hide them if it's problematic that they're there.

[09:39] <jnthn> ...somehow... :)

[09:40] *** pomysl joined
[09:40] *** pomysl left
[09:40] *** pomysl joined
[09:42] <sorear> jnthn: don't bother I say

[09:42] <sorear> jnthn: maybe rename them to _dispatch:<blah>

[09:43] *** odoacre joined
[09:44] *** odoacre left
[09:44] <jnthn> sorear: Thinking about it a little more, they may end up as privates; those are non-vritual and so the optimizer would have a better shot at inlining them.

[09:53] *** envi_ joined
[09:55] *** odoacre joined
[10:02] *** fsergot left
[10:08] *** cosimo left
[10:12] <tadzik> 'morning

[10:14] *** bacek joined
[10:15] <bacek> ~~

[10:15] *** replore left
[10:15] <moritz> \o

[10:15] <bacek> moritz, o/

[10:18] <jnthn> bacek!

[10:18] <jnthn> o/

[10:20] *** cosimo joined
[10:20] <bacek> jnthn, aloha :)

[10:21] <bacek> jnthn, I was looking for you, actually.

[10:21] <bacek> I do want to get rid of Class/Object/PMCProxy/Namespace stuff in parrot in favour of 6model.

[10:21] *** fsergot joined
[10:21] *** mkramer left
[10:21] <djanatyn> awwww :(

[10:22] <djanatyn> there are no perl6 google code in tasks

[10:22] <djanatyn> I think

[10:22] <bacek> jnthn, is https://github.com/jnthn/6model/blob/master/overview.pod still a good starting point to understand 6model design?

[10:32] *** daxim joined
[10:33] * sorear sleep

[10:33] <jnthn> bacek: sorry, was on phone

[10:34] <jnthn> bacek: Yes

[10:34] <jnthn> bacek: The key header file to read is sixmodelobject.h

[10:36] <jnthn> bacek: http://6guts.wordpress.com/2010/10/15/slides-and-a-few-words-on-representation-polymorphism/ is also interesting perhaps. Plus there's some other posts on that blog that may help

[10:43] <bacek> jnthn, got it. Need couple of days to wrap my head around how it should fit into parrot.

[10:43] <bacek> jnthn, I'll (probably) ll have more questions later :)

[10:43] *** cosimo left
[10:46] <jnthn> bacek: That's fine :)

[10:49] *** PacoLinux joined
[10:53] *** PacoLinux left
[11:00] *** amkrankruleuen left
[11:01] *** amkrankruleuen joined
[11:01] *** icwiener_ joined
[11:02] *** icwiener left
[11:07] *** envi_ left
[11:10] *** icwiener_ left
[11:10] *** kensanata joined
[11:11] *** sftp left
[11:11] *** y3llow left
[11:12] <mls> morning!

[11:12] <fsergot> mls o/

[11:12] <tadzik> hello mls!

[11:13] <mls> IMHO one thing that's missing in current 6model is a "linking" phase

[11:14] <mls> Currently everything cas to be rebuilt when nqp is recompiled

[11:16] <mls> I think this has to go in the future. Say a distribution ships with a lot of perl6 modules, all precompiled to pbc. Then there's a securtiy issue in perl6, su an update is released.

[11:16] <mls> So I think some kind of "run time linker" at load time would be nice, which resolves the SC slots

[11:17] <mls> (This also means that SC entries must be "named", so there can be a lookup of some kind)

[11:18] <jnthn> mls: People should not be shipping PBCs ever

[11:18] <jnthn> mls: I see the PIR/PBC as a cache

[11:18] <mls> So you want to write them in the users home directory?

[11:18] <mls> I don't think that makes sense

[11:20] <jnthn> mls: Or the module installation tool is responsible for installing those.

[11:20] <mls> yeah, but what happens if there's a perl6 update?

[11:20] <mls> You need to "recompile" all modules as well

[11:20] <jnthn> Correct.

[11:20] <daxim> use $XDG_CACHE_HOME, which is $HOME/.cache by default

[11:20] <daxim> http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html

[11:20] <jnthn> daxim: ooh, thanks

[11:21] <mls> (except when there's no desktop)

[11:21] <jnthn> (or you're on Windows ;))

[11:21] <daxim> nonsense

[11:21] <daxim> it's also good on systems that do not have a desktop

[11:21] <daxim> I want to configure the backup regime to exclude cache dirs

[11:22] <mls> oh, where is it set?

[11:23] *** am0c left
[11:23] <daxim> /etc/xdg and ~/.config/user-dirs.dirs, but really read the spec.  it's not long.

[11:23] <mls> is it set by some pam module at login time?

[11:24] <jnthn> mls: I've already lived through the "you can update Rakudo without recompiling modules against it" days. People got a bunch of weird problems because things changed in subtle ways.

[11:24] <daxim> called from /etc/profile.d

[11:24] *** araujo joined
[11:24] <jnthn> And there wasn't a clear error, stuff just...randomly broke.

[11:27] <mls> Hmm, I have XDG_CONFIG_DIRS and XDG_DATA_DIRS, but to XDG_CACHE_HOME. Seems I need to update my system.

[11:28] <mls> jnthn: But it's pretty much the same with "C" and shared libraries.

[11:28] <mls> Saying you mist recompile everythink if there's a glibc update doesn't seem right

[11:29] <mls> must

[11:29] <mls> daxim: thanks for the xdb links, by the way. daxim++

[11:29] <mls> xdg

[11:30] <mls> one learns something everyday, I never heard of that spec

[11:31] <mls> (oh, a "lennart" spec, is that a good or a bad sign ;) )

[11:31] <daxim> usually a bad thing

[11:32] <mls> ;)

[11:32] <jnthn> mls: Remember that Perl 5 doesn't really compile anything in advance; it's done each time. We've long thought of any pre-compilation as a kind of cache, with the source file always being the authoritative thing.

[11:32] <jnthn> mls: Compare that to C, where you never install the sources.

[11:33] <jnthn> mls: Well, unless you're in a development situation.

[11:33] * daxim grunts vaguely about statting .pmc files

[11:33] <mls> Well, I compare it to python, which has that pbo files

[11:34] <mls> (and we want to be faster than python ;) )

[11:35] <jnthn> mls: And not having to do a bunch of name resolution on startup will be faster ;)

[11:36] <mls> yes, that's also true ;)

[11:36] <mls> afk -> lunch

[11:38] *** satyavvd left
[11:38] *** mkramer joined
[11:54] *** domidumont left
[11:54] <bbkr> nom: say 123 ~~ int32

[11:54] <p6eval> nom 4cff8e: OUTPUT«Bool::False␤»

[11:57] *** domidumont joined
[11:57] *** PacoLinux joined
[12:10] *** mj41 left
[12:12] *** Psyche^ joined
[12:16] *** Psyche^ is now known as Patterner

[12:22] *** replore_ joined
[12:25] *** mj41 joined
[12:28] *** replore_ left
[12:30] *** PacoLinux left
[12:45] *** am0c joined
[12:49] <dalek> nqp: 13508b4 | mls++ | src/NQP/SymbolTable.pm:

[12:49] <dalek> nqp: use direct lexinfo access in install_lexical_symbol()

[12:49] <dalek> nqp: review: https://github.com/perl6/nqp/commit/13508b4874

[12:51] *** sftp joined
[12:55] *** am0c left
[13:08] *** PacoLinux joined
[13:10] *** PZt left
[13:12] *** am0c joined
[13:12] *** PacoLinux left
[13:16] *** kaleem left
[13:18] *** aloha joined
[13:22] *** kensanata left
[14:01] *** mkramer left
[14:02] *** mkramer joined
[14:02] *** mkramer left
[14:03] *** mtk joined
[14:06] *** molaf joined
[14:08] <[Coke]> (perl 6 GCI tasks) we can rectify that at the second task-update point.

[14:09] <masak> when is that?

[14:10] *** mkramer joined
[14:10] *** plutoid joined
[14:12] *** mkramer left
[14:13] <[Coke]> December 16, seems.

[14:13] <[Coke]> I'll ask in #gci on perl.org about that.

[14:16] <[Coke]> yup. no worries, we can get p6 stuff in for that round.

[14:20] *** Trashlord left
[14:21] *** mkramer joined
[14:21] *** mkramer left
[14:24] <masak> \o/

[14:26] *** plutoid left
[14:26] *** envi_ joined
[14:27] *** bluescreen10 joined
[14:28] <masak> nom: say DateTime.new() before DateTime.new(:year(2011), :month(2), :day(28))

[14:28] <p6eval> nom 4cff8e: OUTPUT«No applicable candidates found to dispatch to for 'Numeric'. Available candidates are:␤:(Mu, Mu %_)␤␤  in method Numeric at src/gen/CORE.setting:614␤  in sub infix:<==> at src/gen/CORE.setting:2024␤  in sub infix:<cmp> at src/gen/CORE.setting:1059␤  in sub infix:<befo…

[14:28] <masak> since one can map DateTimes to Instants it could make sense to compare DateTimes... I think.

[14:29] <masak> maybe there's something funny with timezones that I'm not realizing right now.

[14:30] <masak> hm, seems the spec mandates a timezone. so it should be fine.

[14:31] <[Coke]> We should probably get a list of tasks going ahead of time so we don't have a last minute rush.

[14:32] <masak> speaking of last minute rush...

[14:32] <masak> ...allow me to gently insert the idea of a "Perl 6 Advent Calendar 2011" into the minds of gentlepeople on the channel.

[14:33] <masak> nothing says we *have* to have one this year. but it's generally a good PR thing, and one that people appreciate.

[14:33] * PerlJam says we have to have one  :)

[14:34] <masak> administration is pretty minimal; we generally make do with one or two files in a repo somewhere to coordinate themes and authors.

[14:34] <PerlJam> (of course, if I do all the entries it'll be very boring, but so be it)

[14:34] <masak> I volunteer for 4 or 5 entries, evenly spaced.

[14:43] <jnthn> I can do one about Grammar::Debugger, and probably one on meta-programming

[14:43] *** PacoLinux joined
[14:43] <jnthn> (if those are considered interesting topics)

[14:43] <PerlJam> jnthn: aye

[14:45] <masak> absolutely.

[14:46] <masak> I bet there are plenty of subjects that we've covered in previous years but that we could cover again, slightly differently.

[14:47] <masak> for example, there's probably lots more to write about junctions. or metaoperators.

[14:47] <jnthn> Potentially I can do one on Zavolaj 2 as well...but maybe better to wait a little on that until I get the work done ;)

[14:47] *** PacoLinux_ joined
[14:47] <jnthn> "Look, you can natively call into C libraires!" could be nice marketing though :)

[14:48] <daxim> libffi?

[14:48] <jnthn> no, I'm not using libffi

[14:48] <jnthn> I can't build the darn thing on my platform.

[14:48] <daxim> bummer

[14:48] <colomon> I'm hoping to do one on the mandelbrot script with a Gtk user interface -- assuming I can find time to write the code!

[14:49] <jnthn> daxim: http://dyncall.org/ works out better on the building angle and is clean and well documented. And tested plenty "in the wild" too.

[14:50] <jnthn> Plus has callback support...which is also maintiained on many platforms. Including Windows.

[14:51] *** PacoLinux_ left
[14:51] <jnthn> And the license lets us bundle it.

[14:54] <daxim> :thumb:

[14:59] <[Coke]> bundle++

[15:00] <jnthn> afk, beer shopping ;)

[15:04] <masak> who is Father Chrysostomos, and how did he manage to stumble across a perl6 queue ticket and run it on Perl 5.10.1? :)

[15:05] <masak> (not that I'm judging. I do more confused things than that with frightening regularity.)

[15:07] *** lutok joined
[15:08] <daxim> url?  :)  # curious

[15:09] <daxim> the father is PAUSE id sprout, also a frequent p5p-er

[15:09] <[Coke]> masak: he's a core perl 5 contributor.

[15:10] <[Coke]> I would have assumed he was giving us the p5 view if he didn't carp about the signature being bead.

[15:10] <[Coke]> *bad

[15:12] *** lutok left
[15:12] <masak> well, it *is* bad, from a Perl 5 perspective.

[15:12] <masak> I think data is insufficient whether he's aware he's in the p6 queue or not.

[15:13] <masak> daxim: https://rt.perl.org/rt3/Public/Bug/Display.html?id=77170

[15:13] <masak> [Coke]: oh, core perl 5 contributor! that's why his name sounded familiar!

[15:16] *** Trashlord joined
[15:26] *** rafl joined
[15:26] *** bluescreen10 left
[15:29] *** woosley joined
[15:35] *** wtw left
[15:41] *** bluescreen10 joined
[15:47] *** Trashlord left
[15:47] *** fsergot left
[15:50] *** woosley left
[15:50] <[Coke]> masak: I'm assuming he did a search for all recursion tickets and didn't restrict by queue or something.

[15:52] <rafl> seen tadzik

[15:52] <aloha> tadzik was last seen in #parrot 4 hours 22 mins ago saying "what particulary are you interested in?".

[15:53] <masak> [Coke]: yeah, could be.

[15:56] <masak> I think Perl 5 and Perl 6 manage to co-exist rather well these days.

[15:57] <masak> Perl 5 is the "low-risk, low-gain" effort, and Perl 6 is the "high-risk, high-gain" effort. a bit like Google's division into "improve ECMAScript"/"develop Dart".

[16:00] *** kaleem joined
[16:08] <[Coke]> http://blogs.perl.org/users/alberto_simoes/2011/11/the-perl-foundation-grants.html -- normal (NON hague) grant deadline extended.

[16:09] <jnthn> oh, my hague grant...

[16:09] <jnthn> :)

[16:11] <[Coke]> also: http://news.perlfoundation.org/2011/11/hague-grant-application-plperl.html (dukeleto's pl/perl hague grant app)

[16:13] <masak> interesting.

[16:17] <felher> +1 on a "Perl 6 Advent Calendar 2011" :)

[16:21] * masak decommutes

[16:21] *** mkramer joined
[16:22] *** mkramer left
[16:22] *** shanny joined
[16:23] *** Guest2721 joined
[16:23] *** mkramer joined
[16:24] *** mkramer left
[16:25] *** mkramer joined
[16:27] *** shanny left
[16:30] <tadzik> hello #perl6

[16:30] *** tty234 joined
[16:30] <felher> o/ tadzik 

[16:33] *** buubot_backup joined
[16:33] *** tty234 left
[16:34] *** kaleem left
[16:34] *** tty234 joined
[16:35] *** mkramer left
[16:37] *** mkramer joined
[16:41] *** birdwindupbird left
[16:43] *** dukeleto joined
[16:43] *** dukeleto left
[16:43] *** dukeleto joined
[16:43] *** dukeleto left
[16:44] *** dukeleto joined
[16:44] *** dukeleto left
[16:44] *** dukeleto joined
[16:44] *** dukeleto left
[16:45] *** dukeleto joined
[16:45] *** dukeleto left
[16:45] *** dukeleto joined
[16:45] *** dukeleto left
[16:46] *** dukeleto joined
[16:46] *** dukeleto left
[16:46] *** dukeleto joined
[16:46] *** dukeleto left
[16:47] *** daniel-s left
[16:47] *** dukeleto joined
[16:47] *** dukeleto left
[16:48] *** dukeleto joined
[16:48] *** dukeleto left
[16:49] *** dukeleto joined
[16:49] *** dukeleto left
[16:49] *** MayDaniel joined
[16:50] *** dukeleto joined
[16:50] *** dukeleto left
[16:50] *** dukeleto joined
[16:50] *** dukeleto left
[16:51] *** dukeleto joined
[16:51] *** dukeleto left
[16:52] *** dukeleto joined
[16:52] *** dukeleto left
[16:52] *** dukeleto joined
[16:52] *** dukeleto left
[16:53] *** dukeleto joined
[16:53] *** dukeleto left
[16:53] <mikemol> Regarding a P6 advent calendar, I can, of course, do another entry on P6 resources and Rosetta Code.

[16:56] *** kaleem joined
[16:59] *** wolfman2000 left
[17:14] *** uniejo joined
[17:18] *** uniejo left
[17:28] *** am0c left
[17:29] *** am0c joined
[17:32] *** kaleem left
[17:32] *** orafu left
[17:32] *** orafu joined
[17:32] *** kaleem joined
[17:35] *** PZt joined
[17:38] *** thou joined
[17:41] *** mkramer left
[17:43] *** mkramer joined
[17:48] <tadzik> djanatyn: ping

[17:49] <djanatyn> tadzik: heyo

[17:49] <tadzik> djanatyn: you were looking for Perl 6 tasks on GCI?

[17:50] <djanatyn> Yeah!

[17:50] <djanatyn> I found a couple that I was considering working on, but they were all perl 5

[17:50] <djanatyn> so I was going to port Dancer plugins to Dancer 2. But if there's anything involving perl 6, I'd love to do that instead

[17:51] <tadzik> djanatyn: we can figure out some nice tasks, I can then add and mentor them

[17:51] <PerlJam> djanatyn: port Dancer 2 to Perl 6? :)

[17:51] <tadzik> yes, that's nice. 48 hours enough? :)

[17:52] <PerlJam> sukria already did all of the hard design work, porting to Perl 6 should be trivial!  ;)

[17:52] <tadzik> also, bailador already works :)

[17:52] <tadzik> well, worked on b

[17:53] *** cosimo_ joined
[17:59] *** mj41 left
[18:02] <tadzik> djanatyn: how would you feel about porting a module from Perl 5/

[18:02] <tadzik> ?

[18:05] <tadzik> something doable, Text::Something, or even Acme::Something :)

[18:05] <tadzik> I wonder if Plack-related stuff would be approachable, since those are just subrefs returning an array

[18:06] <PerlJam> Anything in the Plack space would be nice for web apps on Perl 6.

[18:06] <tadzik> yeah

[18:06] <tadzik> I wonder if we could easily write and use Plack::Test or such

[18:07] <tadzik> I assume those are things which utilize the 'just a subref' patter, so it doesn't require any rocket science

[18:09] <[Coke]> Tasks cannot be added to the TPF project until December mumble.

[18:09] <[Coke]> it is unlike last year when we could add them at will.

[18:09] <[Coke]> there is one more "task add" point at midway; no p6 tasks until then.

[18:09] <PerlJam> [Coke]: er, what?

[18:09] <[Coke]> so, checkout p5 or parrot in the meantime.

[18:10] <[Coke]> PerlJam: we (P6 folks) dropped the ball this year.

[18:12] <tadzik> ok, that's fine

[18:12] <tadzik> we just have to figure out tasks until Dec 16, and they'll get published then

[18:14] <[Coke]> tadzik++ #optimist

[18:15] <tadzik> :)

[18:15] * [Coke] is double checking his facts on #parrot

[18:15] *** MayDaniel left
[18:16] <[Coke]> parrot suggests that the rules may be slushy. If someone has a p6 task, they should consider trying to get it in (see #gci on perl.org)

[18:20] *** PacoLinux_ joined
[18:21] *** molaf left
[18:23] *** mkramer left
[18:24] *** mkramer joined
[18:25] *** mkramer left
[18:27] *** mkramer joined
[18:29] *** envi_ left
[18:31] <[Coke]> nope. not slushy. deadline has passed, per rafl on #gci

[18:32] <rafl> if you guys can figure out a way of subverting any of the tasks we have right now into a perl 6 project, we'll be happy to do that as well

[18:33] <rafl> actually

[18:33] <rafl> we just got mail about a deadline extension

[18:34] <rafl> Nov 28. 8 UTC

[18:34] <rafl> get cracking!

[18:35] *** mkramer left
[18:36] *** PacoLinux_ left
[18:36] *** PacoLinux_ joined
[18:37] *** mkramer joined
[18:37] *** mkramer left
[18:40] *** am0c left
[18:42] <[Coke]> rafl++

[18:50] *** kaleem left
[18:51] <djanatyn> sorry for disappearing >_<

[18:51] <djanatyn> I had calculus class

[18:51] <djanatyn> tadzik: I would love to port a module from perl5. I have no idea how to, though

[18:51] <djanatyn> and sure, I'll port Dancer 2. I've used Dancer, but not Dancer 2

[18:52] * [Coke] wonders if there is work for a Mojo 6.

[18:52] <djanatyn> sure :D

[18:52] <tadzik> [Coke]: they claim so :)

[18:52] <tadzik> istr __sri demands perldoc

[18:53] <tadzik> djanatyn: wanna write perldocs? :)

[18:53] <djanatyn> tadzik: yeah, I can write docs

[18:53] <djanatyn> did you see my blog post yesterday? that's about the peak of my ability

[18:54] <djanatyn> I know the basics of perl and have written a few scripts

[18:54] <tadzik> djanatyn: nope, link?

[18:54] <tadzik> djanatyn: a 'perldoc perlintro' would be a good start, I suppose

[18:55] <djanatyn> http://djanatyn.github.com/2011/11/19/parsing-birthdays.html

[18:56] <djanatyn> I have a couple perl scripts on my github page - a few using SDL, and a little static website compiler using Template::Toolkit

[19:01] *** spine joined
[19:14] *** PacoLinux_ left
[19:26] *** MayDaniel joined
[19:28] <[Coke]> Quiet when jnthn has $dayjob work!

[19:30] <masak> he's not the only one who has $dayjob work...

[19:31] *** birdwindupbird joined
[19:31] *** birdwindupbird left
[19:32] *** PacoLinux_ joined
[19:33] *** jaldhar left
[19:33] <tadzik> sorry for the paste

[19:33] <tadzik> We realize there have been some difficulties entering  and editing your

[19:33] <tadzik> initial tasks for GCI into Melange by today so we are extending the

[19:34] <tadzik> deadline until next Monday, November 28th at 8:00 UTC.  So please feel free

[19:34] <tadzik> to add more tasks or edit your tasks as you see fit over the next week.

[19:34] <tadzik> so we can figure out some Perl 6 tasks and add them

[19:36] *** PacoLinux_ left
[19:42] <djanatyn> tadzik: :D

[19:42] <djanatyn> Do you guys know of any other pre-university students working on perl6 stuff?

[19:48] <masak> lue.

[19:59] *** lumi_ joined
[20:02] *** alester joined
[20:02] *** wooden joined
[20:05] *** lumi_ left
[20:06] *** lumi_ joined
[20:06] *** zostay joined
[20:20] *** Moukeddar joined
[20:28] *** ksi joined
[20:37] *** MayDaniel left
[20:38] *** PacoLinux_ joined
[20:41] *** mj41 joined
[20:44] *** Sarten-X joined
[20:48] *** pomysl left
[20:49] *** Sarten-X left
[20:49] *** wallberg joined
[20:52] *** estrabd joined
[21:01] *** Exodist joined
[21:02] *** Sarten-X joined
[21:04] *** PacoLinux_ left
[21:07] *** daxim left
[21:11] *** Sarten-X left
[21:13] *** cooper left
[21:16] *** bluescreen10 left
[21:19] <dalek> nqp/cclass: 0f3407b | diakopter++ | src/QRegex/P6Regex/ (2 files):

[21:19] <dalek> nqp/cclass: changes to support backslash endpoints

[21:19] <dalek> nqp/cclass: review: https://github.com/perl6/nqp/commit/0f3407bdd6

[21:21] *** Sarten-X joined
[21:25] *** cooper joined
[21:25] *** cooper left
[21:25] *** packetknife joined
[21:27] *** lutok joined
[21:32] *** Sarten-X left
[21:38] *** Moukeddar left
[21:42] *** Sarten-X joined
[21:45] *** Guest2721 left
[21:45] *** pomysl joined
[21:45] *** pomysl left
[21:45] *** pomysl joined
[21:54] *** spine left
[22:00] *** lutok left
[22:07] *** PacoLinux_ joined
[22:11] *** PacoLinux_ left
[22:18] *** PacoLinux_ joined
[22:25] * [Coke] begins a six day weekend wherein he might find some time to hack on perl6!

[22:25] <tadzik> \o/

[22:26] <PerlJam> [Coke]: have fun!

[22:26] <[Coke]> see folks tomorrow.

[22:29] *** envi_ joined
[22:29] *** Sarten-X left
[22:30] *** ksi left
[22:34] *** PacoLinux_ left
[22:36] *** Sarten-X joined
[22:38] *** vmspb joined
[22:41] *** Sarten-X left
[22:47] *** Sarten-X joined
[22:53] *** japhb_ joined
[22:53] <japhb_> jnthn, ping

[22:59] <japhb_> phenny, ask jnthn Do you have any data about how many distinct STABLEs exist (created in the bootstrap, setting, etc.) for even an empty Perl 6 program?  My brane is tanking on https://github.com/jnthn/6model/blob/master/overview.pod again, and it occurs to me I lack numbers to contextualize with.

[22:59] <phenny> japhb_: I'll pass that on when jnthn is around.

[23:00] *** vlixes joined
[23:00] <jnthn> japhb_: pong

[23:00] <phenny> jnthn: 22:59Z <japhb_> ask jnthn Do you have any data about how many distinct STABLEs exist (created in the bootstrap, setting, etc.) for even an empty Perl 6 program?  My brane is tanking on https://github.com/jnthn/6model/blob/master/overview.pod again, and it occurs to me I lack numbers to contextualize with.

[23:01] <jnthn> japhb_: I don't have an exact number. You can get a really good approximation by equating stable with type.

[23:01] <jnthn> japhb_: That is, each knowhow/class/role/subset/enum/grammar declaration is an s-table

[23:02] <japhb_> phenny, ask jnthn Also, is there any way in the current 6model to handle native types nearly bare? (e.g. Mozilla's JS implementations where IIRC int, string, and object types are packed into special encodings of NaN in a 64-bit word, in union with a native double)

[23:02] <phenny> japhb_: I'll pass that on when jnthn is around.

[23:02] <sorear> good * #perl6

[23:02] <japhb_> oops, sorry, forgot to remove the phenny, ask when you showed up and I was still thinking.  ;-)

[23:03] <jnthn> japhb_: You could write a representation that does that kind of union-y thing if you wishes.

[23:03] <phenny> jnthn: 23:02Z <japhb_> ask jnthn Also, is there any way in the current 6model to handle native types nearly bare? (e.g. Mozilla's JS implementations where IIRC int, string, and object types are packed into special encodings of NaN in a 64-bit word, in union with a native double)

[23:03] <jnthn> *wished

[23:03] <jnthn> japhb_: 6model does handle native types in various ways already

[23:03] <japhb_> OK, so it's not completely dependent on the first word being the STABLE pointer, it's just the way all existing repr's work?

[23:03] <jnthn> japhb_: The P6opaque REPR knows how to store them "flat" inside another object's body, for example.

[23:04] <jnthn> japhb_: er, that bit is important. :)

[23:04] <jnthn> japhb_: For boxed objects

[23:04] <jnthn> japhb_: However, if you statically know what type you have then you're free to keep things around on the stack, or in a packed array.

[23:04] <japhb_> Oh, OK, so you can't do less than two machine words for an object

[23:04] <jnthn> japhb_: That's what REPR API 2 was all about.

[23:05] <jnthn> japhb_: Not if you want it to be a standalone GC-able entity rather than in a memory space managed by something else, no.

[23:05] <japhb_> OK

[23:05] *** Chillance joined
[23:05] <jnthn> japhb_: Many REPR functions take pointers into the start of the object body though

[23:06] <jnthn> japhb_: And operate independently of if the header is there or not

[23:06] <jnthn> So long as you know the s-table *somehow*, you're all good

[23:06] <japhb_> Oh, excellent.

[23:06] <jnthn> So you could do things like C#'s stackalloc.

[23:07] <jnthn> You'd just have the memory space per call frame

[23:07] <jnthn> And then have one static thingy that holds the s-table pointer

[23:07] <japhb_> One could in theory have a VM that used a single word packing like with Mozilla JS, and just used internally-known STABLEs for the native types, and only used "real" STABLEs for non-native types.

[23:07] *** Chillance left
[23:07] <jnthn> Also, if you statically know a REPR, you can inline all of the stuff it does too. They're non-virtual.

[23:07] <japhb_> ooh

[23:07] <japhb_> nice

[23:07] *** pomysl left
[23:07] <jnthn> Yeah. I need to write a VM that does all of this some day.

[23:08] <japhb_> heh

[23:08] <jnthn> In the back of my mind when I designed 6model was "how can I have all the dynamism, but still let a language like Java be able to JIT field accesses like a JVM can"

[23:09] <jnthn> 6model is massively influenced by gradual typing.

[23:09] <japhb_> Yeah, I've heard you say that enough times that I believe it.  ;-)

[23:09] <jnthn> Some days, so do I ;)

[23:10] * jnthn does a little Perl 6 related stuff 

[23:10] *** amkrankruleuen left
[23:11] <japhb_> On a vaguely related performance note -- in your various valgrind/cachegrind runs, did you ever get a sense of how much the performance of Rakudo is bounded by off-CPU memory access?  (In other words, how cache-evil it is?)

[23:11] *** Chillance joined
[23:11] *** Chillance left
[23:12] <jnthn> japhb_: I've not had chance to do cachegrind runs; it doesn't run on my platform. And the VS profiler that I do use for C doesn't give me cache miss info, sadly.

[23:12] <japhb_> :-(

[23:12] <japhb_> Ah well.

[23:12] <jnthn> japhb_: The GC is potentially the most cache horrible.

[23:12] <jnthn> japhb_: Though I hunted down its worst behavior there and the Parrot folks patched it a while ago

[23:12] <japhb_> That's good at least.

[23:13] <jnthn> (It used to stomp all over the heap when doing "is this a pointer" analysis and was probably pathalogical for anybody with a set associative cache...)

[23:14] <jnthn> Basically it followed a link list of memory blocks. Which were allocated to probably hit page boundaries.

[23:14] <japhb_> Ewww.

[23:15] <japhb_> And IIRC very few CPUs had high (or full) associativity past about L1 or so.

[23:15] <japhb_> s/had/have had/

[23:15] <jnthn> Yeah, that's my impression too.

[23:19] *** skangas left
[23:19] *** amkrankruleuen joined
[23:20] *** mj41 left
[23:25] <sorear> o/ jnthn

[23:26] <jnthn> hi sorear 

[23:32] *** Ingis joined
[23:33] *** envi_ left
[23:37] *** tokuhirom joined
[23:39] *** [particle] joined
[23:41] <dalek> nqp/cclass: 74ca920 | jnthn++ | src/QRegex/P6Regex/ (2 files):

[23:41] <dalek> nqp/cclass: Simplify and correct the backslashes with .. in charclass patch. Needs more testing.

[23:41] <dalek> nqp/cclass: review: https://github.com/perl6/nqp/commit/74ca92050e

[23:45] *** whiteknight joined
[23:45] *** whiteknight is now known as Guest19937

[23:52] <dalek> nqp: 0f3407b | diakopter++ | src/QRegex/P6Regex/ (2 files):

[23:52] <dalek> nqp: changes to support backslash endpoints

[23:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0f3407bdd6

[23:52] <dalek> nqp: 74ca920 | jnthn++ | src/QRegex/P6Regex/ (2 files):

[23:52] <dalek> nqp: Simplify and correct the backslashes with .. in charclass patch. Needs more testing.

[23:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/74ca92050e

[23:52] <dalek> nqp: d4f6e5c | jnthn++ | src/QRegex/P6Regex/ (2 files):

[23:52] <dalek> nqp: Merge branch 'cclass'

[23:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d4f6e5c114

[23:54] <dalek> rakudo/nom: 55e5294 | jnthn++ | tools/build/NQP_REVISION:

[23:54] <dalek> rakudo/nom: Bump NQP_REVISION to get char class improvements.

[23:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/55e52940be

[23:54] <dalek> rakudo/nom: 4a57bd7 | jnthn++ | docs/ChangeLog:

[23:54] <dalek> rakudo/nom: Some ChangeLog entries.

[23:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4a57bd7ec8

[23:55] <jnthn> phenny: tell moritz diakopter++ did some work to support backlash endpoints in char classes; I've just twiddled it a bit and updated NQP_REVISION. Hope this helps your JSON::Tiny work.

[23:55] <phenny> jnthn: I'll pass that on when moritz is around.

