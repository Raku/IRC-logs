[00:00] <masak> I had some $life happen to me, ran out of time with my sekkrit project, so the graphics in the post are brought to you by ASCII.

[00:00] <masak> oh well.

[00:00] *** lamstyle left
[00:01] <masak> 'night, #perl6.

[00:02] *** kjeldahl left
[00:02] *** masak left
[00:04] *** icwiener left
[00:11] *** aindilis left
[00:14] *** rgrau left
[00:29] *** jimmy1980 left
[00:34] <[Coke]> if I want to test the exception message thrown for a compile time error, should: eval "thing that throws the error"; ok ~$! ~~ / 'portion of literal message' /, "reason"; // work?

[00:35] *** vert2_ left
[00:35] *** molaf_ joined
[00:36] *** whiteknight left
[00:39] *** molaf left
[00:44] *** vert2_ joined
[00:45] *** jimmy1980 joined
[00:54] *** kst left
[00:54] *** kst joined
[00:55] *** dorlamm left
[01:02] *** jimmy1980 left
[01:07] *** hudnix joined
[01:07] <sorear> diakopter: well I'm here.

[01:07] <sorear> [Coke]: yes but I don't like it

[01:14] *** dual joined
[01:22] <[Coke]> sorear: ok, well it /doesn't/ work. trying to figure out why - and why don't you like it?

[01:24] <[Coke]> aside from the usual "don't test the actual error message" (but in this case, that was the point of the ticket that was opened, that the error message didn't match STD)

[01:25] <[Coke]> rakudo: / <[a-z]> /

[01:25] <p6eval> rakudo 549d2a: OUTPUT«===SORRY!===␤Unsupported use of - as character range;in Perl 6 please use .. at line 22, near "z]> /"␤»

[01:25] <[Coke]> std: / <[a-z]> /

[01:25] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of - as character range; in Perl 6 please use .. at /tmp/f1feA04ho8 line 1:␤------> [32m/ <[a-z[33m⏏[31m]> /[0m␤Parse failed␤FAILED 00:01 120m␤»

[01:25] <[Coke]> GAH. That's why it hasn't been matching all this time. (note the extra space in STD. ;)

[01:32] <[Coke]> ... why is that space missing? looking at src/Perl6/Grammar.pm, it looks like the space should be there.

[01:34] *** thundergnat joined
[01:35] <[Coke]> ... because it's coming from nqp-rx.

[01:35] * [Coke] cries.

[01:35] <thundergnat> std: my @g; @g[^2]>>.[^6] >>[=]>> 0;

[01:35] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Can't hyper with = because list assignment operators are too fiddly at /tmp/gRZaVWEaGE line 1:␤------> [32mmy @g; @g[^2]>>.[^6] >>[=]>>[33m⏏[31m 0;[0m␤Check failed␤FAILED 00:01 122m␤»

[01:35] <thundergnat> bummer

[01:39] <thundergnat> std: my @g; @g[^2]>>.[^6] >>&[=]>> 0;

[01:39] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Missing << or >> at /tmp/RRBCYt62uJ line 1:␤------> [32mmy @g; @g[^2]>>.[^6] >>&[33m⏏[31m[=]>> 0;[0m␤    expecting infix_circumfix_meta_operator␤Parse failed␤FAILED 00:01 121m␤»

[01:40] <thundergnat> std: my @g; @g[^2]>>.[^6] >>&infix:<=>>> 0;

[01:40] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Missing << or >> at /tmp/ECoeVF8mPS line 1:␤------> [32mmy @g; @g[^2]>>.[^6] >>&[33m⏏[31minfix:<=>>> 0;[0m␤    expecting infix_circumfix_meta_operator␤Parse failed␤FAILED 00:01 121m␤»

[01:42] <thundergnat> std: my (@a, $b); @a >>[>]>> $b;

[01:42] <p6eval> std 625303c: OUTPUT«ok 00:01 123m␤»

[01:44] *** thundergnat left
[01:49] *** drbean joined
[01:57] *** kst left
[01:57] *** kst joined
[02:07] *** colomon left
[02:08] <dalek> nqp-rx: ab1ffc0 | Coke++ | src/Regex/P6Regex/Grammar.pm:

[02:08] <dalek> nqp-rx: Fix error message to match STD.

[02:08] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/ab1ffc0daf

[02:08] <dalek> nqp-rx: 96e4b67 | Coke++ | src/stage0/ (3 files):

[02:08] <dalek> nqp-rx: update bootstrap for " in Perl 6" error update.

[02:08] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/96e4b67a08

[02:09] *** colomon joined
[02:19] <diakopter> sorear: yes but this has occured for a few years now :)

[02:19] * diakopter wonders idly whether TimToady made it to India yet

[02:36] *** drbean left
[02:36] *** drbean joined
[02:39] *** sosey joined
[02:41] <sosey> hello

[02:41] <sosey> i'm a newbie with perl, but i have a lot of experiencie working with python

[02:42] <sosey> do you recomend me to use perl? 

[02:42] *** cafesofie joined
[02:45] <dukeleto> sosey: we recommend that you write code that you enjoy writing

[02:45] <dukeleto> sosey: also, hello

[02:46] <sosey> dukeleto: i'm enjoy writting c code, so i think i can enjoy writting perl code

[02:46] <dukeleto> sosey: perhaps :)

[02:46] <snarkyboojum> sosey: writing C and Perl 6 is very different, but most people in here would at least say "Give it a try" :D

[02:47] <dukeleto> sosey: what kind of code do you want to hack on? what interests you? It is hard for anybody to help you if we don't know what you are trying to do.

[02:48] *** sosey left
[02:49] <snarkyboojum> interesting reaction :)

[02:49] <perigrin> "I like writing device drivers, can I write those in Perl?"

[02:50] <sorear> http://www.datsi.fi.upm.es/~jmpena/korbit.html

[02:50] <flussence_> that pretty much describes my dayjob

[02:51] <perigrin> sorear: you scare me.

[02:51] <flussence_> "here's some undocumented hardware with a serial port. do everything kthx"

[02:52] *** cafesofie left
[02:59] <sorear> incidentally, there was a GSoC2010 project to port Parrot to the RTEMS kernel environment

[03:00] *** noganex_ joined
[03:03] *** noganex left
[03:05] *** kst left
[03:08] *** kst joined
[03:18] <skangas> Is there something like //= but for regular expressions?

[03:18] <skangas> I would like to do "$foo =~ /bar/" without having to prefix it with "defined $foo &&"

[03:19] <skangas> Otherwise if $foo is undefined, I get "Use of uninitialized value in pattern match"

[03:20] <skangas> Oh crap, wrong window, I thought this was #perl. Sorry :-(

[03:20] <colomon> skangas: I was trying to figure out how to answer the question in Perl 6.  :)

[03:21] <skangas> colomon: That would be interesting, too, albeit not directly relevant to what I am doing right now.  ;-)

[03:21] <colomon> mind you, I don't know that I have a better answer than ($foo // "") ~~ /bar/

[03:21] <colomon> which still seems kind of awkward, IMO.

[03:27] <flussence_> couldn't it just do "class Regex { multi ACCEPTS(Any) { Bool::False } }", or would that break other things?

[03:29] <pmichaud> draft of "What Rakudo needs from Parrot in 2011" available at 

[03:29] <pmichaud> 22:42 <pmichaud> but overall I don't want them to think "we keep doing things for Rakudo and they never recognize/appreciate it"  :-)

[03:29] <pmichaud> 22:42 <jnthn> *nod*

[03:29] <pmichaud> argggggh

[03:29] <pmichaud> wrong paste

[03:29] <pmichaud> (that was weird)

[03:29] <pmichaud> trying again

[03:30] <pmichaud> draft of "What Rakudo needs from Parrot in 2011" available at http://pmichaud.com/sandbox/rakpar.txt

[03:30] <flussence_> I think we've all mis-pasted something in here at some point :)

[03:30] <pmichaud> comments and suggestions welcomed.  I'll post that message to parrot-dev in a few hours or tomorrow morning

[03:34] <colomon> seems a good message IMO.

[03:34] <colomon> "We know that any improvements serialization" probably wants a "to"?

[03:35] <pmichaud> yes, added.

[03:35] <pmichaud> thanks

[03:35] <pmichaud> when I'm editing phrasing I tend to drop/add prepositions and articles

[03:50] *** snarkyboojum left
[04:10] *** satyavvd joined
[04:10] *** satyavvd left
[04:10] *** satyavvd joined
[04:11] *** satyavvd left
[04:15] *** satyavvd joined
[04:23] *** Su-Shee_ joined
[04:25] *** Su-Shee left
[04:41] *** lamstyle joined
[04:48] * [Coke] wonders why this test file has a non-zero exit status.

[04:52] <[Coke]> fudge adds exit(1)? how do other tests that are fudged not fail the harness?

[04:54] <[Coke]> ... arg. because I pre-fudged the file manually, I bet.

[04:56] *** kst left
[04:57] <dalek> roast: d9f5c2e | Coke++ | S05-metasyntax/charset.t:

[04:57] <dalek> roast: Add a test for RT #69682

[04:57] <dalek> roast: review: https://github.com/perl6/roast/commit/d9f5c2ee95

[04:58] *** kpg joined
[04:59] *** kst joined
[05:01] <[Coke]> ok, that took longer than it should have. ;)

[05:02] <dalek> rakudo: fcc46ea | coke++ | build/PARROT_REVISION:

[05:02] <dalek> rakudo: get latest nqp-rx fix for error message.

[05:02] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/fcc46eab8e

[05:03] *** strmaster joined
[05:09] *** knewt2_ left
[05:13] *** kanishka joined
[05:14] <[Coke]> seen jnthn ?

[05:14] <aloha> Sorry, I haven't seen jnthn .

[05:14] <[Coke]> seen jnthn?

[05:14] <aloha> jnthn was last seen in #perl6 6 hours 45 mins ago saying "They're just DSLs in Perl 6, right? ;_)".

[05:14] <[Coke]> aloha: msg bacek - "seen foo ?" should work the same as "seen foo?"

[05:15] <sorear> colomon: $foo andthen m/bar/ or $foo ~~ *.defined S& /bar/

[05:16] *** kanishka left
[05:16] <sorear> [Coke]: THere's a --keep-exit-code or similar option that Rakudo uses

[05:18] <sorear> pmichaud: Doesn't PIRATE already implement #4?

[05:19] <pmichaud> sorear: yes, apparently it does, although I'd like to see that declared "official" somehow for Parrot (either official tool or official approach for achieving that result)

[05:20] <[Coke]> sorear: yup, danke.

[05:21] <[Coke]> hey, can we close 63584 with "well, don't DO that, then?"

[05:22] <sorear> [Coke]: I'd rather we didn't.

[05:22] <sorear> One of my favorite things about the Perl5 toolchain is that it's very good about handling >1 perl in the $PATH

[05:23] <sorear> or even outside $PATH

[05:23] <[Coke]> it's not that there's more than one perl in the path, it's that he re-arranged his path.

[05:23] <sorear> I can install software using /opt/perl-5.11-debug/bin/perl $(which cpanm) ... and it all just works, even if the modules need to build XS and ...

[05:23] <[Coke]> hurm. nevermind.

[05:23] <sorear> oh, between steps?

[05:25] <[Coke]> sorear: that was my impression, yes.

[05:25] *** starcoder left
[05:25] <sorear> yeah.  don't do that then.

[05:25] <[Coke]> rakudo: say q<< <<woot>> >>

[05:25] <p6eval> rakudo 549d2a: OUTPUT«===SORRY!===␤Confused at line 22, near "say q<< <<"␤»

[05:25] <sorear> if you want to switch perls in $PATH, use perlbrew

[05:28] *** starcoder joined
[05:29] *** skangas left
[05:29] <[Coke]> std: say q<< <<woot>> >>

[05:29] <p6eval> std 625303c: OUTPUT«ok 00:01 119m␤»

[05:30] *** skangas joined
[05:30] *** strmaster left
[05:31] <dalek> roast: afcdfa2 | Coke++ | S02-literals/quoting.t:

[05:31] <dalek> roast: track RT#

[05:31] <dalek> roast: review: https://github.com/perl6/roast/commit/afcdfa2967

[05:31] *** knewt2 joined
[05:32] <[Coke]> sorear: I misread. he used /foo/to/bar/perl, but first-in-path was being picked for other things.

[05:32] <[Coke]> I'll put in a poisoned perl and see if anything breaks.

[05:36] <[Coke]> *facepalm*

[05:37] <[Coke]> if you build parrot with "perl", that's what's passed along to Rakudo's build system as the perl to use. not /derived/path/to/perl, just "perl"

[05:38] <[Coke]> so if you build parrot, change your path, you're going to get a different perl. (or, if you run rakudo's configure.pl and change your path, the build will use a different perl.)

[05:38] <[Coke]> ... not sure if this is worth fixing.

[05:46] *** kaare_ joined
[05:47] *** envi joined
[05:55] *** simon__ joined
[05:55] <simon__> hey. can someone explain to me how chained comparison operators work?

[05:55] *** gimix joined
[05:56] <simon__> at first i thought they were just syntactic sugar but then I tried to define another function that uses them internally and it could still be chained

[05:59] <simon__> rakudo: sub infix:<lesser> ($a, $b) { $a < $b }; 1 lesser 2 lesser 3;

[05:59] <p6eval> rakudo 549d2a:  ( no output )

[06:00] <simon__> rakudo: say 1 lesser 2 lesser 3

[06:00] <p6eval> rakudo 549d2a: OUTPUT«===SORRY!===␤Confused at line 22, near "say 1 less"␤»

[06:00] <[Coke]> (need to combine them.)

[06:00] <simon__> on my local machine it worked ;/

[06:00] *** lopaway is now known as lopnor

[06:01] <[Coke]> each line here is a separate compiled program.

[06:01] <simon__> oh

[06:01] <[Coke]> rakudo: sub infix:<lesser> ($a, $b) { $a < $b }; say 1 lesser 2 lesser 3; 

[06:01] <p6eval> rakudo 549d2a: OUTPUT«Bool::True␤»

[06:01] <[Coke]> rakudo: sub infix:<lesser> ($a, $b) { $a < $b }; say 1 lesser 2 lesser -1; 

[06:01] <p6eval> rakudo 549d2a: OUTPUT«Bool::False␤»

[06:02] <simon__> how can this work?

[06:03] <[Coke]> I'll leave that to someone more familiar with the grammar.

[06:15] *** Mowah joined
[06:17] *** qiyong joined
[06:18] <qiyong> is perl6 out?

[06:18] *** Quth joined
[06:18] <simon__> it has been for quite some time now

[06:18] *** Quth left
[06:19] <qiyong> will it replace perl5?

[06:20] <[Coke]> nope. New language.

[06:20] <simon__> probably not, at least not right away

[06:20] <[Coke]> We hope people will like it and use it, but perl5 will be around for some time.

[06:34] <cxreg> i keep having to correct people about that too.  "no, you're wrong.  perl6 _is_ out"

[06:34] <cxreg> sadly, it's sometimes the same people over and over

[06:36] *** satyavvd left
[06:38] <[Coke]> sorear: can you close out RT #75030?

[06:40] <[Coke]> msg sorear: can you close out RT #75030?

[06:42] *** kst left
[06:44] *** kst joined
[06:44] *** cjk101010 joined
[06:47] *** satyavvd joined
[06:47] *** Mowah left
[06:56] *** ubunturocks joined
[06:57] <sorear> [Coke]: that's "phenny: tell sorear ..."

[06:57] <sorear> colomon: and th answer is no.

[06:58] <sorear> [Coke]: and the answer is no.

[06:59] <sorear> simon__: Boolean values become 0 or 1 when passed to numeric operators like <

[07:00] <sorear> rakudo: sub infix:<lesser> ($a, $b) { $a < $b }; say 4 lesser 5 lesser 2

[07:00] <p6eval> rakudo fcc46e: OUTPUT«Bool::True␤»

[07:00] <simon__> that can't be

[07:00] <sorear> rakudo: say (4 < 5) < 2

[07:00] <p6eval> rakudo fcc46e: OUTPUT«Bool::True␤»

[07:00] <sorear> rakudo: say True < 2

[07:00] <p6eval> rakudo fcc46e: OUTPUT«Bool::True␤»

[07:00] <sorear> what can't be?

[07:01] <simon__> it tried it it still works when it would fail if they were interpreted as 1

[07:01] <simon__> at least i think so. ill try it again

[07:04] <simon__> you were right, sorry, my mistake

[07:04] *** snarkyboojum joined
[07:04] <snarkyboojum> lue: last post looks like some serious yak shaving :)

[07:08] <[Coke]> sorear: ... no because you don't have privs or because you disagree?

[07:29] * [Coke] needs to stop poking RT with a stick.

[07:58] <moritz_> good morning

[07:58] *** Alias left
[08:04] *** Su-Shee_ is now known as Su-Shee

[08:06] <moritz_> phenny: tell pmichaud re nqp.txt and the parrot tools using nqp-rx, there's another option: they just can continue to use nqp-rx, and we can hand out commit bits to nqp-rx freely to all parrot folks (or even move the nqp-rx repo to the parrot organization on github) if that's what the parrot folks want

[08:06] <phenny> moritz_: I'll pass that on when pmichaud is around.

[08:12] *** rhr left
[08:14] *** rhr joined
[08:20] *** kst left
[08:26] *** Alias joined
[08:28] *** kst joined
[08:34] *** Patterner left
[08:37] *** Psyche^ joined
[08:37] *** Psyche^ is now known as Patterner

[08:38] *** risou joined
[09:01] *** flatwhatson_ joined
[09:02] *** qiyong left
[09:04] *** wallberg joined
[09:17] *** dip joined
[09:17] *** dip is now known as Guest84197

[09:22] *** dakkar joined
[09:27] *** Tedd1 left
[09:29] *** daxim joined
[09:31] *** tzhs joined
[09:32] *** Tedd1 joined
[09:35] *** risou_ joined
[09:38] *** risou left
[09:43] *** simon__ left
[10:01] *** kst left
[10:02] *** kst joined
[10:16] *** cafesofie joined
[10:25] *** masak joined
[10:35] *** cafesofie left
[10:40] *** cafesofie joined
[10:43] *** risou_ left
[10:52] <masak> [Coke]++ # RT queue traversal

[11:07] *** gimix left
[11:22] *** lopnor is now known as lopaway

[11:36] *** kst left
[11:36] *** kst joined
[11:41] *** satyavvd left
[11:52] <cosimo> aah

[11:52] <cosimo> hallo

[12:08] <tadzik> hello

[12:15] <masak> ehlo

[12:18] *** bluescreen joined
[12:29] *** risou joined
[12:30] *** fmerges joined
[12:44] *** ab5tract joined
[12:49] *** cafesofie left
[12:54] <[Coke]> masak: no worries. what else am I going to do when I'm up until 4am for no reason?

[12:54] *** orafu left
[12:55] *** kst left
[12:57] <masak> [Coke]: we need more insomniacs like you :)

[12:58] <[Coke]> too bad I had to get up by 7:30 or I'd do it more often. ;)

[12:59] <masak> maybe we need a slogan, too: "Can't sleep? Why not try to reproduce a couple of RT tickets?"

[13:01] *** kst joined
[13:01] <[Coke]> perl6: /<[a-z]>/

[13:02] <p6eval> rakudo fcc46e: OUTPUT«===SORRY!===␤Unsupported use of - as character range; in Perl 6 please use .. at line 22, near "z]>/"␤»

[13:02] <p6eval> ..niecza v1-207-g786a885: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unsupported use of - as character range; in Perl 6 please use .. at /tmp/FD6qiWbDPI line 1:␤------> [32m/<[a-z[33m⏏[31m]>/[0m␤␤Parse failed␤␤»

[13:02] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.16/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped by operat…

[13:02] <[Coke]> hurm. why is std not in "perl6?" 

[13:02] <[Coke]> std: /<[a-z]>/

[13:02] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of - as character range; in Perl 6 please use .. at /tmp/MjkysOSYRL line 1:␤------> [32m/<[a-z[33m⏏[31m]>/[0m␤Parse failed␤FAILED 00:01 120m␤»

[13:02] <takadonet> morning all

[13:02] <masak> takadonet: \i

[13:02] <masak> er, \o :)

[13:02] <[Coke]> œ∑´®†\¨ˆøø

[13:02] <[Coke]> ø/

[13:03] <moritz_> mojibake-smiley!

[13:03] <[Coke]> oh, hey, look, if you hit enter, it sends it out to everyone!

[13:03] <masak> we're happy for all contributions, regardless of quality.

[13:04] *** coldhead left
[13:04] <moritz_> [Coke]: std is not in 'perl6:' because it doesn't produce run time output, and the perl6: target is supposed to return the same for all implementations for deterministic programs

[13:05] <moritz_> perl6: say rand # of course not in such a program :-)

[13:05] <p6eval> niecza v1-207-g786a885: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Action method term:rand not yet implemented at /tmp/NUZQGAGRxp line 1:␤------> [32msay rand[33m⏏[31m # of course not in such a program :-)[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/SAFE.setting line

[13:05] <p6eval> ..377 (SAFE die @ …

[13:05] <p6eval> ..rakudo fcc46e: OUTPUT«0.337835111978592␤»

[13:05] <p6eval> ..pugs: OUTPUT«0.6156015820139091␤»

[13:05] <colomon> and pugs kind of breaks that badly these days...

[13:05] * [Coke] listens to a story about a teleporting buddhist tyrannosaurus rex.

[13:05] * [Coke] wonders if something like:

[13:05] <[Coke]> std,rakudo: say "what?" ## would be helpful.

[13:06] <moritz_> might be. And not too hard to implement

[13:06] <moritz_> [Coke]++ # new evalbot ideas

[13:08] <[Coke]> (also "perl6,std:" to make checking diagnostics easier.)

[13:09] <moritz_> niecza: say 1, 2 Z 3, 4

[13:09] <p6eval> niecza v1-207-g786a885: OUTPUT«Unhandled exception: Zip operators NYI␤  at /home/p6eval/niecza/lib/SAFE.setting line 377 (SAFE die @ 2)␤  at /home/p6eval/niecza/lib/SAFE.setting line 1022 (SAFE infix:<Z> @ 2)␤  at /tmp/KR83bnMFOC line 1 (MAIN mainline @ 3)␤  at /home/p6eval/niecza/lib/SAFE.setting

[13:09] <p6eval> ..line 1037 (SAF…

[13:14] *** MayDaniel joined
[13:14] *** ab5tract left
[13:14] *** xinming_ left
[13:15] *** xinming joined
[13:16] *** ab5tract joined
[13:20] *** ab5tract left
[13:21] *** pmurias joined
[13:24] * [Coke] hurls http://isitchristmas.com/ ... which is very funny and relevant to perl6, but has a very sad story behind it.

[13:25] *** felliott joined
[13:25] *** kjeldahlw joined
[13:30] <masak> [Coke]: what's the story behind it?

[13:32] <masak> heh, the JavaScript source for telling whether it's Christmas is very readable... and it even does a bit of i18n, it seems. but it doesn't take into account that the *date* for Christmas varies. :)

[13:32] <masak> ask any Swede, and they'll say Dec 24 without hesitation.

[13:33] *** bluescreen left
[13:33] <colomon> our old neighbors never put up their Christmas decorations until after Dec. 25th.  I think they were perhaps Russian Orthodox?

[13:34] *** MayDaniel left
[13:34] <moritz_> well, in .de we think Christmas is from Dec24 to Dec26

[13:35] <[Coke]> masak - http://en.wikipedia.org/wiki/Bill_Zeller

[13:36] *** risou_ joined
[13:37] <moritz_> [Coke]: I don't quite see the connection

[13:38] <[Coke]> sorry, he was the author.

[13:38] *** risou left
[13:38] <moritz_> ah.

[13:39] <moritz_> I looked into the whois record, and he wasn't the domain holder

[13:39] <moritz_> that was I all I check though

[13:39] <[Coke]> linked to from a news article about the suicide.

[13:41] <masak> :(

[13:41] <masak> I've used Graph Your Inbox, one of his creations. it's a nice program.

[13:44] *** cafesofie joined
[13:44] * moritz_ medidates over http://perl6.org/page-stats#Domain%20referrals

[13:44] <moritz_> 1.5k visitors from planet.haskell.org. not bad.

[13:46] <takadonet> wait a min... why can I see that link? I have no administration power on perl6.org? 

[13:48] <moritz_> takadonet: what error do you get?

[13:48] <moritz_> I don't think there are any restrictions on that page

[13:48] *** bluescreen joined
[13:48] <takadonet> moritz_: i get no error. I can see the page 

[13:49] <takadonet> moritz_: just thought it would have been restricted 

[13:49] <moritz_> ah, I thought there was a negation somewhere :-)

[13:49] <moritz_> why should it be restricted?

[13:49] <moritz_> it doesn't reveal any private information

[13:50] *** wamba joined
[13:50] *** am0c joined
[13:50] <moritz_> and whom would we show the page, and whom not?

[13:58] *** kaare_ left
[14:01] <flussence_> The referrer links could use a rel=nofollow...

[14:01] *** kst left
[14:02] <flussence_> or at least exclude that page in robots.txt

[14:03] <moritz_> flussence_: robots.txt is a good idea... care to patch it?

[14:05] <flussence_> er, ok

[14:05] *** kst joined
[14:06] *** pmurias left
[14:08] *** drbean left
[14:09] *** plobsing left
[14:13] <pmichaud> good morning, #perl6

[14:13] <phenny> pmichaud: 08:06Z <moritz_> tell pmichaud re nqp.txt and the parrot tools using nqp-rx, there's another option: they just can continue to use nqp-rx, and we can hand out commit bits to nqp-rx freely to all parrot folks (or even move the nqp-rx repo to the parrot organization on github) if that's what the parrot folks want

[14:14] <pmichaud> moritz_: yes, that's definitely another option.

[14:14] <pmichaud> I'll try to add it to the text as well.

[14:15] <takadonet> pmichaud: morning

[14:15] <moritz_> I think it's important we don't the parrot dev's tools away as we go along :-)

[14:15] * [Coke] chuckles at the latest perl5 bug: http://rt.perl.org/rt3/Ticket/Display.html?id=83086

[14:15] <pmichaud> well, I'm rather hoping that Parrot will still decide to adopt the new NQP along with its object model.  It's not that big a stretch.

[14:15] <masak> morning, pm.

[14:16] <moritz_> pmichaud: sure. But some people like choices, just for the sake of it :-)

[14:16] <masak> moritz_: important that we don't accidentally the parrot dev tools? :)

[14:16] <pmichaud> I took it as "don't chase"

[14:17] <[Coke]> pmichaud: is there anything left to do on RT #50118, especially in light of jnthn's recent work?

[14:17] <flussence_> moritz_: sent a pull request for the robots.txt on github

[14:17] <pmichaud> [Coke]: no.

[14:17] <pmichaud> I think we can close that ticket

[14:18] <moritz_> flussence_: please commit directly. KTHXBY :-)

[14:18] <flussence_> oh :)

[14:18] <moritz_> flussence_: you now have commit access to most repos in the perl6/ organization, including perl6.org, mu, roast, specs and ecosystem

[14:19] <moritz_> we have a 'perl6' group into which we stuff people, because handing out bits for each repo separately is just too cumbersome

[14:20] <pmichaud> any other comments on nqp.txt or rakpar.txt before I post them?

[14:21] <dalek> perl6.org: 400c7a1 | (Anthony Parsons)++ | robots.txt:

[14:21] <dalek> perl6.org: Block /page-stats in robots.txt

[14:21] <dalek> perl6.org: 

[14:21] <dalek> perl6.org: The page contains hyperlinks to the top referrers; this should stop referral

[14:21] <dalek> perl6.org: spammers from taking advantage of it.

[14:21] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/400c7a170a

[14:22] <moritz_> pmichaud: if '+1' count as a comment... that would be mine :-)

[14:22] <moritz_> pmichaud: I guess you've seen my other correction in #parrot (s/#2/#3/)

[14:23] <pmichaud> no, didn't see that yet

[14:23] <pmichaud> looking

[14:23] <moritz_> at the bottom, where you refer back the serialization

[14:23] <pmichaud> ah, yes, I reordered but forgot to fix the reference

[14:23] <pmichaud> Added the line:

[14:23] <pmichaud> "Or, the existing

[14:23] <pmichaud> nqp-rx could continue to live on as its own project targeting Parrot

[14:23] <pmichaud> libraries, perhaps even being adopted into the Parrot repository.

[14:23] <pmichaud> Whatever the Parrot team chooses to do ..."

[14:24] <pmichaud> s/libraries/subsystems/

[14:29] <[Coke]> pmichaud: done.

[14:31] <colomon> rakudo: say ~reducewith(&infix:<*>, 1...10)

[14:31] <p6eval> rakudo fcc46e: OUTPUT«No applicable candidates found to dispatch to for 'reducewith'. Available candidates are:␤:(&op, *@args, Any :chaining($chaining), Any :right-assoc($right-assoc), Any :triangle($triangle), Any :xor($xor))␤␤  in main program body at line 22:/tmp/3gymi_u02B␤»

[14:31] *** Mowah joined
[14:32] <colomon> oh, right

[14:32] <moritz_> huh, what's missing?

[14:32] <moritz_> all those anmed params seem optional

[14:33] <colomon> not optional, because it's parsing as the sequence &infix:<*>, 1 ... 10

[14:33] <colomon> or something like that.

[14:33] <moritz_> oh

[14:34] <moritz_> rakudo: say ~reducewith(&infix:<*>, (1...10))

[14:34] <p6eval> rakudo fcc46e: OUTPUT«3628800␤»

[14:35] <colomon> just a side effect, I'm trying to sort out why metaops (etc) are failing so badly with Math::BigInt.

[14:35] <moritz_> I have a guess

[14:36] <moritz_> if you write [*] 1, 2

[14:36] <flussence_> I'd like that error message above to say something like "Got signature: [...]; Available candidates are: [...]"...

[14:36] <moritz_> rakudo generates a prefix:<[*]> 

[14:36] <[Coke]> perl6: say [+] [1,2,3] # what's the right answer here?

[14:36] <p6eval> niecza v1-207-g786a885: OUTPUT«Unhandled exception: System.Exception: Unable to find lexical &reduceop in mainline␤␤Server stack trace: ␤  at Niecza.CLRBackend.NamProcessor.ResolveLex (System.String name, System.Int32& uplevel, Boolean core) [0x00000] in <filename unknown>:0 ␤  at

[14:36] <p6eval> ..Niecza.CLRBackend.NamProcessor.…

[14:36] <p6eval> ..pugs: OUTPUT«1 2 3␤»

[14:36] <p6eval> ..rakudo fcc46e: OUTPUT«3␤»

[14:36] <moritz_> but I guess that doesn't properly multi-dispatch

[14:36] <pmichaud> [Coke]: Rakudo is correct

[14:36] <moritz_> [Coke]: 3 is correct I think

[14:37] <colomon> oh wow, here's a bad one:

[14:37] <colomon> 1L ... 50L turns into 50 50 50 50 50 ... 50

[14:37] <colomon> oh, I think I know what's up with that.

[14:37] <moritz_> so [*] is "frozen" to a particular multi, instead of doing a new dispatch in the caller's scope

[14:37] <moritz_> s/multi/candidate/

[14:38] *** risou_ left
[14:38] <colomon> the thing that's weird is [*] worked fine when I had it our multi infix:<*>(Math::BigInt etc) at the top level AND I called [*] in the same file.

[14:39] *** risou joined
[14:39] *** xinming left
[14:39] *** xinming_ joined
[14:39] <moritz_> that's because the generated prefix:<[*]> is global (and not per scope or so)

[14:39] <colomon> but when I made it our multi infix:<L*>(Math::BigInt etc) is export but defined it in the Math::BigInt class definition and then called it in a separate file, it fails miserably.

[14:40] *** ascent_ left
[14:40] <colomon> called [L*], that is.

[14:48] *** kaare_ joined
[14:49] *** kjeldahlw left
[14:58] *** chaitanya9186 joined
[14:58] <chaitanya9186> Hello

[14:59] <masak> chaitanya9186: hi!

[15:00] <chaitanya9186> Can i knw

[15:00] <chaitanya9186> u

[15:00] <chaitanya9186> ?

[15:00] <masak> yes...?

[15:00] <[Coke]> Can anyone really know anyone?

[15:00] *** felliott left
[15:00] <gfldex> there are moments where i know myself

[15:00] <masak> [Coke]: what, in the biblical sense? :P

[15:02] <mathw> I learn about myself in aikido classes, there are these vivid flashes of insight about halfway between the throw and the floor...

[15:03] *** PacoLinux joined
[15:03] <mathw> in mid-air, upside-down and rapidly rotating :)

[15:03] <mathw> I start to understand why people do acrobatics

[15:03] <masak> from an outside perspective, that sounds like the totally wrong moment to have an insight :P

[15:04] <mathw> no at that point it's fine

[15:04] <mathw> because if you've not set up properly for the fall by then so that you can just relax and let it happen, you're probably going to land wrong anyway

[15:04] <masak> oh, ok.

[15:04] <frettled> And that's when mathw solves Perl 6 problems.

[15:04] <moritz_> masak: I guess it's like seeing your live passing by while falling from the cliff

[15:05] <moritz_> "I should have made peace with Aunty Foo, really"

[15:05] <frettled> :D

[15:05] *** plainhao joined
[15:05] <mathw> proper throws send you down too fast to be able to fall consciously

[15:05] * [particle] got a large rope burn on his ankle this weekend after a mistaken cliff fall

[15:05] <mathw> ouch

[15:06] <[particle]> my fault for having my foot behind the rope :(

[15:06] <mathw> I hit the mat hard enough to numb three of the fingers on the hand that hit first

[15:06] <mathw> need to work on which bit of my body hits the ground first, spread it out a little more

[15:06] <mathw> just a tad too much force to dissipate into three fingers

[15:07] <[particle]> obviously, you need more fingers.

[15:07] * masak imagines having an Auntie named "Foo"

[15:08] *** Vlavv left
[15:08] *** kst left
[15:10] <mathw> [particle]: what would be cool is hands which can expand into giant shock-absorbing pads in a fraction of a second just before landing :)

[15:11] <[particle]> i'd certainly like skin that immediately stiffens when exposed to extreme friction

[15:11] *** kst joined
[15:12] *** LoRe left
[15:13] <mathw> That would also be useful

[15:14] <mathw> And maybe some sort of robot arm which comes out and whacks people who walk into me in the street because they forgot that other people use the pavement too... or am I going overboard now?

[15:14] *** alester left
[15:14] <pmichaud> wouldn't "going overboard" be something that would happen on a ship instead of a sidewalk?

[15:15] <frettled> or boardwalk?  ;)

[15:15] <mathw> on a boardwalk, it's 'falling in' :)

[15:15] <mathw> or maybe 'falling off'

[15:15] <mathw> all purely accidental of course

[15:15] * mathw whistles innocently

[15:15] <mathw> pmichaud: Good email. 6model is leading to excitement

[15:16] <takadonet> boardwalk empire  : http://en.wikipedia.org/wiki/Boardwalk_Empire

[15:16] <takadonet> ?

[15:16] *** LoRe joined
[15:16] * moritz_ must remember to keep distance to mathw :-)

[15:16] <moritz_> I do bump into people who just stop walking in front of me :-)

[15:17] *** mkramer1 left
[15:19] <[particle]> stop looking at your smartphone when you walk :P

[15:20] <masak> I hear there are apps that show you the street while you type :P

[15:20] *** Vlavv joined
[15:21] *** pmurias joined
[15:21] *** mkramer joined
[15:23] * moritz_ doesn't even have a smartphone

[15:26] <mathw> that's the problem then

[15:26] <mathw> it can't show you the street while you're typing your SMSes

[15:27] * moritz_ has written about 2 SMS last year

[15:27] *** cjk101010 left
[15:34] <Juerd> I'm going to archive some user accounts on feather again

[15:34] *** ubunturocks left
[15:35] <Juerd> All homedirs with mtime < 2009 will be tarred, the corresponding user accounts removed

[15:35] <Juerd> If you wish to keep your account, please shout :)

[15:35] <BinGOs> tarred and feathered!

[15:36] <Juerd> anatoly atnnn azuroth broquaint bsmith clkao cmarcelo domm er evalbot ferreira gaal geoffb henk jedai jesse joepurl johnpc karhu kolibrie lanny larry limbic liz lt marcel markstos mdiep morrow nothingmuch pdcawley pelagic scook0 shlomif simon sjp spinclad stevan szbalint tewk thoughtpolice zoo

[15:38] <masak> if that's not two terms in a row, I don't know what is. :P

[15:38] *** mkramer left
[15:40] *** mkramer joined
[15:42] *** plobsing joined
[15:42] *** am0c^ joined
[15:42] *** am0c left
[15:46] <arnsholt> "We could try each possible move in each possible heap, but that's inelegant." And what I did in my Kayles AI ^_^

[15:46] *** ascent_ joined
[15:47] <masak> arnsholt: I haven't convinced myself that that particular feature of Nim carries over to .137

[15:47] <masak> I'll know in a few days :P

[15:47] <arnsholt> Oh, goody. =)

[15:48] *** V15170R joined
[15:48] <masak> it's less trivial because of the mapping that goes on between .137 an Nim.

[15:48] <masak> so trying each possible move might actually be necessary.

[15:52] *** chaitanya9186 left
[15:59] *** maja joined
[16:00] *** alester joined
[16:05] *** bluescreen left
[16:06] <sorear> good * #perl6

[16:08] <pmurias> sorear: hi

[16:08] <pmurias> sorear: i'm updating cl-backend to doc/nam.pod

[16:13] *** Patterner left
[16:15] <sorear> pmichaud: I was under the impression that the P in PCT, PAST, POST always stood for "pmichaud"

[16:15] <masak> hi, sorear.

[16:15] *** Psyche^ joined
[16:15] *** Psyche^ is now known as Patterner

[16:16] <masak> sorear: see also PmWiki, PMCs, and PGE :)

[16:16] *** kst left
[16:16] <pmurias> didn't they stand for "Parrot"?

[16:16] <sorear> [Coke]: no because I don't have an RT account

[16:16] <masak> pmurias: come to think of it, what does the 'pm' in pmurias stand for...?

[16:16] <diakopter> :)

[16:16] *** kst joined
[16:17] <[particle]> just call me pmichaudarticle

[16:17] <pmichaud> when I was teaching at the university, some of my students would look at the many ".pm" files in /usr/lib/perl5 and marvel at how much code I was able to write.

[16:17] <masak> *lol*

[16:17] <pmichaud> "Dr. Michaud *really* likes Perl!"

[16:17] <pmurias> heh

[16:17] <[Coke]> heh.

[16:18] <pmichaud> I did want to register "pm.org" for myself, but alas, it was taken by some subversive programming cult.

[16:18] <pmichaud> afaict, they're just squatting on the domain anyway

[16:19] <PerlJam> pmichaud: I'd thought you'd lobby for a .pm TLD by now

[16:19] <pmichaud> hadn't quite thought of that yet.

[16:20] <pmichaud> yay, new blog online:  http://pmthium.com/

[16:20] *** stkowski joined
[16:20] *** tzhs left
[16:20] <pmichaud> now to get the feeds into Planet Perl Six, Planet Parrot, and Iron Man Perl

[16:21] <masak> pmthium! \o/ right there in the periodic table, between wonderflonium and unobtainium.

[16:22] *** felliott joined
[16:22] *** maja left
[16:23] <pmichaud> actually, I think it's between Neodymium and Samarium.  :-)

[16:23] *** maja joined
[16:23] <pmichaud> But there are some new isotopes to be explored.

[16:23] <masak> :)

[16:23] <PerlJam> If Adam Ant can get his own element, anyone can.

[16:24] * masak groans

[16:24] <pmichaud> ummmm, how do I update the location of my ironman feed, ooc?

[16:24] *** mkramer left
[16:25] <PerlJam> contact mst?

[16:26] <masak> there's an ironman address on the Ironman page.

[16:26] <pmichaud> maybe mailto:ironman@....

[16:26] <pmichaud> yeah

[16:26] <pmichaud> I'll try that

[16:27] *** mtk joined
[16:29] *** kst left
[16:32] <moritz_> iirc [Coke] can change planetsix URLs

[16:33] *** kst joined
[16:37] *** cafesofie left
[16:40] <[Coke]> aye.

[16:41] *** markmont joined
[16:42] <jnthn> evening o/

[16:43] * jnthn is pleased to see pmichaud has good taste in WordPress themes. ;)

[16:43] <pmichaud> heh

[16:44] <pmichaud> well, I was working on an abstract header graphic, but it wasn't turning out well and I finally decided to just use a landscape

[16:44] <jnthn> :)

[16:44] *** kjeldahl joined
[16:44] <jnthn> It's a pretty one. :)

[16:44] <jnthn> Looks a tad warmer than the one on 6guts. :)

[16:45] *** ab5tract joined
[16:48] <masak> hm, maybe I should have a landscape too, that's not too bad...

[16:48] <masak> anyone have a strangely consistent langscape sitting around? :P

[16:50] <jnthn> masak: Trying to think of somewhere that has old and new architecture side by side and makes it work...

[16:50] *** mkramer joined
[16:51] <jnthn> Though that'd be a cityscape rather than a landscape. :)

[16:53] <pmichaud> ("tad warmer")  actually, that photo was taken in late november, and it was around 5 degC when I took the photo :)

[16:53] <pmichaud> so, not all that warm

[16:53] <jnthn> Heh

[16:53] <jnthn> Mine was taken in mid-May. :)

[16:54] <jnthn> And was no warmer than that, but I doubt it was awfully colder. :)

[16:54] <pmichaud> so it's entirely possible it was warmer when you..... right :)

[16:54] <[particle]> jnthn: i'm thinking the guggenheim in bilbao or the mit campus

[16:54] <jnthn> Yes, I think my photo taken in November woulda been pretty crappy.

[16:54] <jnthn> Given it's in the Arctic Circle and there's no light in November. :)

[16:55] <masak> [particle]: url?

[16:56] <[particle]> http://www.kegz.net/archives/images/gehry_mit.jpg

[16:56] <pmichaud> someone needed a better square and level when they built that.

[16:57] * moritz_ sees how it matches "strange", but doesn't see the consistency :-)

[16:58] * PerlJam wonders if hobgoblins factor into this somehow

[16:59] <jnthn> Mmmm....Hobgoblin :D

[17:00] *** wamba left
[17:01] <[particle]> that's just one angle, which shows old+new integrated

[17:01] <[particle]> it's a fascinating building

[17:02] <dalek> niecza: a7f0672 | pmurias++ | cl-backend/backend.lisp:

[17:02] <dalek> niecza: [cl-backend] port over unit definition from doc/nam.pod

[17:02] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a7f0672dd0

[17:02] <dalek> niecza: a7cd075 | pmurias++ | cl-backend/backend.lisp:

[17:02] <dalek> niecza: [cl-backend] refactor the way subs are compiled

[17:02] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a7cd0754ce

[17:02] <jnthn> [particle]: Wow, that's...quite a building.

[17:03] <moritz_> masak: maybe some buildings by Hunterwasser?

[17:05] <pmichaud> fwiw, I like the strangelyconsistent header graphic

[17:06] <pmichaud> not saying "don't change it", but I like it fine as it exists now

[17:06] <daxim> Hundertwasser!

[17:06] <masak> moritz_: url?

[17:06] *** envi left
[17:07] *** awwaiid left
[17:07] <masak> [particle]: I look at that, and go "well, um, it gets the 'strangely' part down pat..." :)

[17:07] *** V15170R left
[17:09] <daxim> next time you come to vienna I could show you around.

[17:10] <masak> yay

[17:10] * masak has been to Vienna twice so far

[17:10] <masak> lovely city.

[17:11] <daxim> http://www.kunsthauswien.com/en/museum  # enjoyable geekery

[17:11] <masak> pmichaud: *really*? it's a placeholder specifically designed to give me enough bad conscience to make a real one... :P

[17:12] *** VAB4OU2 joined
[17:18] * allbery_b glances up and imediately thinks "stata?"

[17:18] *** pmurias left
[17:20] *** allbery_m joined
[17:21] *** allbery_b left
[17:21] *** allbery_m is now known as allbery_b

[17:21] *** cafesofie joined
[17:22] *** Axius joined
[17:22] <moritz_> masak: http://images.google.com/images?q=hundertwasser+buildings

[17:23] <masak> whoa

[17:24] *** plobsing left
[17:26] *** sftp_ joined
[17:26] <masak> this is what most gives me vibes of "strange consistency": http://www.roxanneardary.com/wp-content/uploads/2007/09/dar-al-hajar.jpg

[17:27] <masak> not too suitable as a header image, sadly...

[17:27] *** sftp left
[17:28] *** bluescreen joined
[17:29] <PerlJam> I keep thinking of things that are consistently strange (like Dali paintings :)

[17:29] <moritz_> PerlJam: I've thought of Dalí too

[17:31] *** awwaiid joined
[17:32] * colomon is testing his internet connection

[17:33] <moritz_> test, 1, 2, 3

[17:33] *** plobsing joined
[17:34] * masak .oO( The Tango Maureen )

[17:43] *** kst left
[17:45] *** kst joined
[17:45] *** allbery_b left
[17:49] *** Axius left
[17:58] *** cdarroch joined
[17:58] *** cdarroch left
[17:58] *** cdarroch joined
[18:01] *** cafesofie left
[18:02] <dalek> roast: b814b4d | moritz++ | S03-operators/eqv.t:

[18:02] <dalek> roast: [eqv.t] tests for RT #75322

[18:02] <dalek> roast: review: https://github.com/perl6/roast/commit/b814b4d139

[18:05] *** ab5tract left
[18:06] <moritz_> rakudo: class A is Array { }; my @a := A.new; @a.push: 'foo'; say @a

[18:06] <p6eval> rakudo fcc46e: OUTPUT«foo␤»

[18:07] *** dakkar left
[18:10] *** allbery_b joined
[18:16] *** snearch joined
[18:17] *** dukeleto left
[18:17] *** dukeleto joined
[18:18] *** daxim left
[18:19] <dalek> roast: bfe67a6 | moritz++ | S12-class/inheritance.t:

[18:19] <dalek> roast: [inheritance.t] tests for RT #74844

[18:19] <dalek> roast: review: https://github.com/perl6/roast/commit/bfe67a61c4

[18:20] <[Coke]> moritz_++ # writing tests.

[18:22] <moritz_> [Coke]++ # identifying what to write tests for

[18:24] *** kst left
[18:25] *** plobsing left
[18:25] *** kst joined
[18:25] <colomon> moritz_++ [Coke]++ # getting things done

[18:30] *** muixirt joined
[18:31] <muixirt> rakudo: say 2**2**2**2**2

[18:31] <p6eval> rakudo fcc46e: OUTPUT«Inf␤»

[18:32] <PerlJam> Is that an associativity problem?

[18:32] <PerlJam> (perhaps in my head?)

[18:33] <moritz_> ** is right-assoc

[18:33] <muixirt> inspired by http://twitter.com/#!/climagic/status/32140176075530240

[18:33] <moritz_> both in spec and rakudo

[18:34] <PerlJam> then, yes, it's in my head :)

[18:34] <colomon> whoa, that's a big number

[18:35] * colomon thinks he just created the biggest number ever calculated in Rakudo.  :)

[18:35] <colomon> https://gist.github.com/804533

[18:36] <moritz_> colomon: strictly speaking it wasn't calculated *in* rakudo

[18:36] <colomon> moritz_: by that logic, no math has ever been done *in* rakudo.

[18:36] <PerlJam> but thankfully both your number and python's number agree  :)

[18:37] <colomon> \o/

[18:38] <colomon> that's 19,729 digits long.

[18:38] <flussence_> rakudo: multi sub infix:<↑↑>(Int $a, Int $b) { return [**] $a xx $b }; say 2 ↑↑ 4

[18:38] <p6eval> rakudo fcc46e: OUTPUT«65536␤»

[18:39] <dalek> roast: aeb686f | moritz++ | S32-io/dir.t:

[18:39] <dalek> roast: basic tests for dir()

[18:39] <dalek> roast: review: https://github.com/perl6/roast/commit/aeb686f04b

[18:40] <flussence_> rakudo: multi sub infix:<↑↑>(Int $a, Int $b) { [**] $a xx $b }; say 3 ↑↑ 4

[18:40] <p6eval> rakudo fcc46e: OUTPUT«Inf␤»

[18:41] <flussence_> guess it doesn't like 7 trillion...

[18:41] <flussence_> rakudo: multi sub infix:<↑↑>(Int $a, Int $b) { [**] $a xx $b }; say 3 ↑↑ 3

[18:41] <p6eval> rakudo fcc46e: OUTPUT«7625597484987␤»

[18:41] <flussence_> or I just did it wrong

[18:42] <moritz_> I know $x ↑↑ $x as the Fuga function

[18:42] <moritz_> not sure if that's correct or wildly known though

[18:42] <Tene> flussence_: you need to define that as a meta-op, so you can handle any number of up arrows

[18:42] <Tene> 3 ↑↑↑↑ 3

[18:43] <flussence_> moritz_: haven't heard of it as that name before - http://en.wikipedia.org/wiki/Knuth's_up-arrow_notation

[18:44] <dalek> rakudo: d3e9a36 | moritz++ | t/spectest.data:

[18:44] <dalek> rakudo: run S32-io/dir.t test file

[18:44] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/d3e9a36edb

[18:44] <flussence_> how do you define a meta-op anyway? I looked before but couldn't find anything

[18:45] <colomon> You can't easily define one without modifying Rakudo's source, if that's what your'e asking

[18:46] <colomon> huh.

[18:46] <colomon> > use Math::BigInt;  say reducewith(&infix:<**>, (3L, 3L, 3L, 3L))

[18:46] <colomon> 7625597484987

[18:46] <colomon> rakudo: say 3 ** 3 ** 3

[18:46] <p6eval> rakudo fcc46e: OUTPUT«7625597484987␤»

[18:46] <colomon> where am I losing the last 3 there?

[18:46] <colomon> oh, right.

[18:47] <colomon> right-associative, that is.

[18:47] <colomon> errr, that's going to be a lot bigger than 2 ↑↑ 5 was....

[18:48] * colomon has finally given Math::BigInt a problem big enough to make it go very slow.

[18:49] <colomon> very slow indeed

[18:50] <flussence_> I don't think the answer will fit into RAM :)

[18:50] <takadonet> flussence_:  depend which machine :)

[18:50] *** plobsing joined
[18:51] <colomon> is that why my MBP is starting to smoke?

[18:51] <colomon> killed it before answer, sorry.

[18:52] <takadonet> colomon: running out of ram?

[18:53] <colomon> I don't know, but I was trying to get work done, so letting a pointless math problem trample the machine's processing and RAM seemed a poor idea.

[18:53] <colomon> The cooling fan definitely kicked in.

[18:54] <dalek> roast: 3a34f01 | (Fitz Elliott)++ | S04-declarations/my.t:

[18:54] <dalek> roast: [S04/my.t] fix and unfudge passing test for RT #63588 (global vars visible inside class)

[18:54] <dalek> roast: review: https://github.com/perl6/roast/commit/3a34f01466

[18:54] <felliott> is there anything more to #63588?

[18:55] <felliott> otherwise, I'll close it

[18:55] <dukeleto> colomon: nice work on Math::BigInt and friends

[18:56] <PerlJam> colomon++ what dukeleto said.    Though I have to tell you that I keep waiting for the "and now this is built-in" post  :)

[19:01] *** risou left
[19:03] <colomon> PerlJam: last time I talked about it with pmichaud, he was worried (with some justification) about slowing down  Rakudo further.

[19:04] <colomon> So I've got no plans to try to get Math::BigInt in place at this time.

[19:04] <colomon> but give me a few days, and I'll probably take a stab at implementing Math::FatRat...  ;)

[19:04] *** fmerges left
[19:04] <PerlJam> colomon: Sure, it's just if life were like a movie when I'm guessing the future plot changes, that seemed like a natural progression  :)

[19:05] *** cafesofie joined
[19:07] <colomon> PerlJam: believe me, I'd love to get it in Rakudo proper.  It would certainly be more elegant...

[19:09] <pmichaud> if adding BigInt doesn't slow down the existing parts of Rakudo, I have absolutely no problem with it.

[19:10] <colomon> oh.

[19:10] <pmichaud> I don't mind if BigInt is slow, I just mind if it slows down what we already have.  :)

[19:10] <colomon> understood.

[19:11] <colomon> well, I'll keep that in mind, and talk with more about it in a few days, then.

[19:11] <pmichaud> sounds great

[19:11] <PerlJam> What does python use for arbitrary precission arithmetic?  The python is *fast*

[19:12] <jnthn> We already have the checks in place, iirc.

[19:12] <jnthn> Promoting to BigInt where we today promote to Num is likely not too big a deal.

[19:12] <colomon> jnthn: not really.  we do calculations in Num, and then switch back to Int if they fit.

[19:12] <jnthn> Oh.

[19:12] <PerlJam> ah, gmp of course

[19:13] <colomon> that's not at all the same as doing them in proper Int form internally.

[19:13] <jnthn> I'm still not really too taken with those being the same type.

[19:13] <jnthn> But I guess people can use int if they want speed.

[19:14] <jnthn> Trouble is that then we force people into type annotations.

[19:14] <colomon> though I guess we could do what we do now, and then just redo the calculation if the result would overflow an int.

[19:14] <pmichaud> I think the Perl 6 vision was that Int would have two reprs behind it (one fast, one big) and would internally switch as needed

[19:14] <pmichaud> not that there'd be a single BigInt repr

[19:14] <colomon> Ack, it needs clever scheme, and right now I should be worrying about $work.

[19:14] <colomon> +1

[19:15] <dalek> roast: e6a9f12 | (Fitz Elliott)++ | S03-operators/overflow.t:

[19:15] <dalek> roast: [overflow.t] add missing utility functions so tests pass; update plan;

[19:15] <dalek> roast: review: https://github.com/perl6/roast/commit/e6a9f12cf6

[19:15] <jnthn> pmichaud: Ooh, REPR switching...

[19:15] <jnthn> ...that could be, er, evil. :)

[19:15] <pmichaud> basically, Int is a type wrapper around multiple "integer" types

[19:15] <pmichaud> perhaps like   Numeric is a type wrapper around Int + Rat + Num

[19:16] <jnthn> Yes, but "type wrapper" is clearly defined there. Numeric is a role and the others do it. :)

[19:16] <jnthn> That could be a viable solution here though, perhaps.

[19:17] <pmichaud> Right, I mean it in a handwavy sort of sense.

[19:17] <jnthn> :)

[19:17] <jnthn> Yes, the trouble is that the hands have never not waved on this issue yet. ;)

[19:17] <jnthn> I suspect we can come up with some sane REPR-y thing though.

[19:17] <pmichaud> well, maybe *your* hands haven't :-)

[19:18] <jnthn> :P

[19:18] <pmichaud> but istr that timtoady++'s hands have

[19:18] <PerlJam> Is there some sort of XS <-> Rakudo bridge somewhere?

[19:19] <jnthn> pmichaud: Maybe I should search the ir clogs... :)

[19:19] <jnthn> PerlJam: Blizkost is...sorta...ish. :)

[19:19] *** molaf_ left
[19:19] <PerlJam> sortaish is good enough for me for now  :)

[19:19] <jnthn> I mean, you can use Perl 5 modules that are XS ones using it.

[19:20] <jnthn> I dunno if that's what you were thinking of though. :)

[19:20] <PerlJam> This talk of "fast/big ints" has me wondering how to use PDL directly

[19:21] * jnthn goes to prep for tomorrow's class a bit

[19:22] *** solarion left
[19:24] <Tene> PerlJam: if you're just looking for C interop, look at Zavolaj.

[19:25] *** plobsing left
[19:25] <PerlJam> I don't know that PDL has an api exactly.  In fact, I think it does not.

[19:25] <dalek> roast: 32dd626 | moritz++ | S03-operators/short-circuit.t:

[19:25] <dalek> roast: unfudge passing tests

[19:25] <dalek> roast: review: https://github.com/perl6/roast/commit/32dd626242

[19:26] <PerlJam> But I haven't looked at PDLs insides in a long while.

[19:31] *** kst left
[19:31] *** kst joined
[19:32] *** plobsing joined
[19:32] *** icwiener joined
[19:43] *** cosimo left
[19:44] <dukeleto> PerlJam: TimToady was talking about how "subrectangles" in Perl 6 replace piddles

[19:44] *** cosimo joined
[19:46] <dalek> roast: 5b5d98a | moritz++ | S03-metaops/reduce.t:

[19:46] <dalek> roast: [reduce.t] tests for RT #76110

[19:46] <dalek> roast: review: https://github.com/perl6/roast/commit/5b5d98ac2b

[19:58] <moritz_> rakudo: my $c = 0; sub called($ignored) { $c = 1 }; use Test; dies_ok { called pi = 4 }; say $c

[19:58] <p6eval> rakudo fcc46e: OUTPUT«ok 1 - ␤0␤»

[19:59] <moritz_> why the heck do I get Bool::True for this last output?

[19:59] <moritz_> locally, that is

[20:00] <colomon> :\

[20:00] <moritz_> a, I was stupid

[20:00] <moritz_> I had a , after dies_ok, not a ;

[20:01] <moritz_> now both tests fail. Huh.

[20:03] <dalek> roast: 2d2be1c | moritz++ | S03-operators/assign.t:

[20:03] <dalek> roast: [assign.t] two (failing) tests for RT #77142

[20:03] <dalek> roast: review: https://github.com/perl6/roast/commit/2d2be1cd5a

[20:03] <moritz_> somebody please check this commit to roast

[20:03] *** flatwhatson left
[20:04] *** jdhore joined
[20:05] <jdhore> out of curiousity, can perl6/rakudo-star do most of the stuff Perl 5 can do?

[20:06] <Su-Shee> much, muche more. or the same stuff more easily.

[20:08] <jdhore> Well, I was more meaning, besides missing most of CPAN, is there anything from Perl5 that i'd currently miss in Perl6?

[20:08] <moritz_> speed

[20:08] <saaki> speed =(

[20:08] <moritz_> and robust IO

[20:08] <colomon> speed

[20:08] <jdhore> ah :(

[20:08] <colomon> errr, heredocs and forms, too.

[20:09] * moritz_ never used forms in p5 either

[20:11] <jdhore> I've never heard of forms and heredocs (unless that's POD docs inside actual perl modules), but i'm still kind of a Perl noob.

[20:12] <moritz_> heredocs start with <<MARKER in p5, and end with MARKER on a line of its own

[20:12] <moritz_> they are just string literals with a custom delimiter

[20:12] <jdhore> ah

[20:12] * [Coke] wonders if anyone has ported damian's perl6::format to perl 6.

[20:12] *** coldhead joined
[20:12] <moritz_> [Coke]: mathw has started, I think

[20:13] <[Coke]> yay.

[20:14] <colomon> heredocs are awesome, and p6 heredocs are supposed to be even better, but they're not supported in Rakudo yet.

[20:15] <moritz_> I think niecza does them so

[20:15] <moritz_> niecza: say Q:to<foo>␤some stuff␤foo

[20:15] <p6eval> niecza v1-209-ga7cd075: OUTPUT«some stuff␤␤»

[20:16] <moritz_> \o/

[20:16] <moritz_> sorear++

[20:16] *** flatwhatson joined
[20:16] <moritz_> and TimToady++

[20:16] <flussence_> niecza: my $x = Q:to<foo>;␤    some stuff␤  foo␤say $x.perl

[20:17] <p6eval> niecza v1-209-ga7cd075: OUTPUT«"    some stuff␤"␤»

[20:17] <flussence_> hasn't got the whitespace magic stuff, but it's still impressive :)

[20:20] * masak submits nieczabug

[20:20] <masak> :)

[20:22] <dalek> roast: 2be4bce | moritz++ | S32-str/split.t:

[20:22] <dalek> roast: [split.t] tests for RT #63066

[20:22] <dalek> roast: review: https://github.com/perl6/roast/commit/2be4bcefcf

[20:22] <colomon> You know, I thought the whitespace magic was p6's killer feature.  (back in 2003, that is.  ;)

[20:24] *** y3llow left
[20:24] *** pothos left
[20:24] *** fhelmberger left
[20:25] <PerlJam> I thought p6 had two killer features:  grammars and a nice OOP system.  The first one is still a killer feature but the second one seems to have had enough time to leak out into the world

[20:25] <flussence_> (I've "almost" got .indent done btw, "just" need to figure out how to handle \t properly :)

[20:25] <PerlJam> flussence++

[20:25] *** y3llow joined
[20:26] *** pothos joined
[20:26] <masak> flussence_: cool! that's great news.

[20:26] <masak> if you feel the need to air ideas for how to implement that (or how to make S32/Str clearer), we're here for you.

[20:26] <PerlJam> flussence_: What's the problem with \t exactly?  And how can we help? :)

[20:27] <masak> the problem is that there's a complicated invariant to be upheld between a \t and a certain number of spaces.

[20:28] <masak> "\t".indent(4) eq "\t    ", but "\t".indent(8) eq "\t\t"

[20:28] <masak> and outdenting is tricky, too.

[20:29] <PerlJam> whoa, is is a requirement that .indent generate tabs?

[20:29] <flussence_> I look a look at the Text::Tabs takadonet++ wrote, it's a bit verbose but I get the general idea of how to do it

[20:30] <pmichaud> PerlJam: if tabs are present, I think .indent is supposed to preserve/extend them

[20:31] <takadonet> flussence_: I never did finish it and I was simply doing line by line converting from the p5 version

[20:31] <takadonet> i'm happy someone else is finishing it

[20:32] <PerlJam> preservation I get, but extending I'm not so sure about.

[20:32] <PerlJam> And I just checked my copy of the spec and it only says "C<$steps> number of spaces have been added to each line"

[20:33] <PerlJam> though, I guess "consistent with leading whitespace" could be interpretted to mean "add tabs if the string starts with tab"

[20:34] <PerlJam> okay, never mind me  :)

[20:35] * PerlJam wonders about other leading whitespace though

[20:36] <PerlJam> if the line starts with a unicode non-breaking space, does that mean that .indent will add NBSs rather than space characters?

[20:37] *** cafesofie left
[20:39] *** kst left
[20:41] <pmichaud> in the past, I've found .indent to conceptually be very much a dwimmy sort of construct

[20:41] <pmichaud> so I'd think "yes"

[20:41] <pmichaud> i.e., it's past descriptions imply that the dwimminess knob is turned up fairly high

[20:43] <PerlJam> I guess the requirement that they all be the same is a concession to implementors for making that easy  :)

[20:43] <PerlJam> otherwise you'd have to have crazy logic for all of http://en.wikipedia.org/wiki/Space_(punctuation)#Spaces_in_Unicode

[20:43] *** kst joined
[20:44] <pmichaud> "Perl exists to torment the implementors on behalf of the users."

[20:44] <pmichaud> or something like that.

[20:46] <PerlJam> flussence_: where is your implementation of .indent?

[20:47] <flussence_> right now, here: https://github.com/flussence/p6-misc/blob/master/indent.p6

[20:51] *** plobsing left
[20:56] *** Renard joined
[20:57] *** Renard is now known as zlr

[21:01] <dalek> roast: f45e8fe | (Fitz Elliott)++ | S32-str/split.t:

[21:01] <dalek> roast: [split.t] fix typo in test

[21:01] <dalek> roast: review: https://github.com/perl6/roast/commit/f45e8fef79

[21:01] * mkramer is fascinated by the unicode spaces table

[21:01] *** plobsing joined
[21:05] *** mkramer left
[21:09] <moritz_> felliott++

[21:11] *** MayDaniel joined
[21:18] *** V15170R joined
[21:20] *** bluescreen left
[21:23] *** mberends joined
[21:23] <PerlJam> flussence_: https://gist.github.com/804840  I updated a comment and added a case for indenting where the string starts with a sequence consisting only of some other space character.  No tests though.

[21:28] <flussence_> wait, is that default{} inside when{} correct?

[21:29] *** Mowah left
[21:29] *** plobsing left
[21:31] <masak> flussence_: you can put a default {} anywhere.

[21:31] <flussence_> huh, I never knew that!

[21:31] <masak> 'given' and 'when/default' are completely decoupled.

[21:32] <moritz_> you can also do  for @list { when ... {  }; default { } }

[21:32] <masak> 'given' is just 'OK, we'll use this value as $_' (or whatever signature you pass into the pblick)

[21:32] <PerlJam> flussence_: actually that was a cut-n-paste error  :)

[21:32] <masak> 'when' is just 'smartmatch $_ against this expression'

[21:33] <masak> as moritz_ points out, 'given' is a kind of loop.

[21:33] <masak> (that only iterates once)

[21:33] <PerlJam> flussence_: fixed.  But I'm glad you learned something from my error  :)

[21:34] *** wallberg left
[21:34] <masak> rakudo: say "$_ is odd" when * % 2 for 15..20

[21:34] <p6eval> rakudo d3e9a3: OUTPUT«15 is odd␤17 is odd␤19 is odd␤»

[21:34] <masak> \o/

[21:35] <flussence_> either way, adding that line causes test #2 to infinite loop. weird :/

[21:36] *** plainhao left
[21:37] <flussence_> oh, got it

[21:42] *** kst left
[21:43] *** plobsing joined
[21:45] *** kst joined
[21:45] <V15170R> rakudo: sub prefix:< > ($val is rw) { $val = Mu }; my $a = 0; say  $a;

[21:45] <p6eval> rakudo d3e9a3: OUTPUT«0␤»

[21:46] <V15170R> rakudo: sub prefix:<_> ($val is rw) { $val = Mu }; my $a = 0; say  _$a;

[21:46] <p6eval> rakudo d3e9a3: OUTPUT«Mu()␤»

[21:48] <flussence_> .u 2000

[21:48] <phenny> U+2000 EN QUAD (􏿽xE2􏿽x80􏿽x80)

[21:48] <flussence_> .u 2001

[21:48] <phenny> U+2001 EM QUAD (􏿽xE2􏿽x80􏿽x81)

[21:48] <flussence_> not ok 12 - Default to prepending ASCII spaces for mixed, non-tab leading whitespace characters # :(

[21:54] *** MayDaniel left
[21:57] *** kst left
[21:59] *** kst joined
[22:00] *** icwiener_ joined
[22:03] *** V15170R left
[22:03] *** icwiener left
[22:07] *** cafesofie joined
[22:09] *** jevin left
[22:09] *** starcoder left
[22:10] *** starcoder joined
[22:12] *** kaare_ left
[22:35] *** kjeldahl left
[22:39] *** plobsing left
[22:40] *** mberends left
[22:40] *** zlr left
[22:41] *** plobsing joined
[22:43] *** REPLeffect left
[22:52] *** dju left
[23:05] *** wallberg joined
[23:07] <snarkyboojum> ni hao :)

[23:11] *** wallberg left
[23:12] <masak> 你好, snarkyboojum.

[23:13] *** REPLeffect joined
[23:13] <snarkyboojum> oh hej, masak :)

[23:14] <masak> :)

[23:17] * diakopter sighs at owning a Sandy Bridge CPU in a mobo with 4 defective 3Gb/s SATA ports.  I'm assuming it will be 4-6 months before Asus/Intel fix it :(

[23:17] <diakopter> *effectively* defective ports (I do realize the problem is with the chipset)

[23:17] *** kst left
[23:18] *** kst joined
[23:19] *** icwiener_ left
[23:19] <jdhore> :(

[23:24] *** bluescreen joined
[23:25] *** cafesofie left
[23:26] <masak> pmichaud: is http://pmichaud.com/sandbox/rakpar.txt still open for spelling suggestions? if so, s/noticably/noticeably/

[23:26] <pmichaud> masak: it's already been posted, but thanks :)

[23:27] <pmichaud> I'll fix it when it goes to pmthium, though.

[23:27] <pmichaud> (if it gets posted there)

[23:28] *** plobsing left
[23:30] *** whiteknight joined
[23:30] <masak> pmichaud: I'm not done reading yet, but it's a very good read so far.

[23:30] <pmichaud> there are some responses already on parrot-dev

[23:31] <masak> ooh

[23:34] <pmichaud> http://lists.parrot.org/pipermail/parrot-dev/2011-January/005422.html  is the start of the archive thread, if you want it :)

[23:34] *** felliott left
[23:34] <pmichaud> oops

[23:34] <pmichaud> http://lists.parrot.org/pipermail/parrot-dev/2011-January/005410.html

[23:35] <pmichaud> (grabbed wrong message)

[23:35] <masak> thanks -- I'm reading it right now, in my email client.

[23:36] <masak> 'there must be something wrong with "now"' -- yes, it creates objects, and that's very expensive.

[23:38] <masak> oh, pmichaud++ has a response outlining that further down :)

[23:40] *** felliott joined
[23:41] <sorear> good * #perl6

[23:41] <masak> very interesting thread. I hope to see more of it.

[23:41] <masak> good *, sorear.

[23:42] <masak> good night, #perl6 :)

[23:42] *** masak left
[23:42] *** f00li5h is now known as f00li5h[HireMe]

[23:42] *** plobsing joined
[23:43] *** f00li5h[HireMe] is now known as f00li5h

[23:45] *** felliott left
[23:45] <sorear> pmichaud: Woah, am I to understand Parrot is seeping into curricula?

[23:47] *** plobsing left
[23:50] *** markmont left
[23:50] <sorear> flussence_: I hear you've thought a lot  about whitesace in here docs.

[23:53] <flussence_> as I understand the spec for heredocs, the whitespace rule looks identical to .indent(*)

[23:54] <sorear> I've heard some people say that dedenting is sensitive to how the string is built

[23:55] <sorear> e.g. in my $foo = '   bar' ; say qq:to(pie)\n$foo\n   pie

[23:57] <flussence_> hm, I see

[23:59] <flussence_> IMO the whitespace trimming should happen before any interpolation

[23:59] <flussence_> I can see how it might complicate things either way, though

[23:59] <sorear> how do you suggest to accomplish that?

