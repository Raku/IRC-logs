[00:00] *** thowe left
[00:04] *** fridim_ left
[00:08] <dalek> roast: d09d1e9 | Coke++ | integration/99problems-11-to-20.t:

[00:08] <dalek> roast: rakudo fudge

[00:08] <dalek> roast: review: https://github.com/perl6/roast/commit/d09d1e93ce

[00:08] *** karamorf left
[00:10] <dalek> rakudo/nom: 9544769 | Coke++ | t/spectest.data:

[00:10] <dalek> rakudo/nom: Splice was implemented, run (fudged) tests

[00:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9544769b61

[00:32] *** wolfman2000 joined
[00:40] *** u2011 joined
[00:43] *** u2011 left
[00:56] *** Chillance left
[01:01] *** envi_ joined
[01:09] *** daniel__ joined
[01:17] *** whiteknight joined
[01:17] *** whiteknight is now known as Guest75824

[01:29] *** benabik joined
[01:32] *** mkramer joined
[01:34] *** soh_cah_toa joined
[01:35] *** Guest75824 left
[01:37] <dalek> 6model: 7369989 | diakopter++ | lua/ (3 files):

[01:37] <dalek> 6model: add a debugging helper; fix 1 bug where I didn't notice the implied return from the C# lambda when porting!

[01:37] <dalek> 6model: review: https://github.com/diakopter/6model/commit/73699897be

[01:39] *** thowe joined
[01:45] *** envi_ left
[01:51] *** hypolin joined
[01:54] *** alc joined
[02:07] *** alc left
[02:07] *** mkramer left
[02:14] *** daniel__ left
[02:22] <dalek> 6model: fe27ad5 | diakopter++ | lua/ (2 files):

[02:22] <dalek> 6model: add another debugging tool; also workaround very strange compiler bug; need to ask jnthn++ about it.

[02:22] <dalek> 6model: review: https://github.com/diakopter/6model/commit/fe27ad517a

[02:32] *** alc joined
[02:47] *** alc left
[02:52] *** tokuhiro_ joined
[03:15] *** alc joined
[03:17] *** tokuhiro_ left
[03:18] *** wooden left
[03:18] *** satyavvd joined
[03:22] *** mkramer joined
[03:24] *** tokuhiro_ joined
[03:29] *** tokuhiro_ left
[03:33] *** nek joined
[03:35] *** tokuhiro_ joined
[03:35] *** alc left
[03:41] *** soh_cah_toa left
[03:45] *** mkramer left
[03:54] *** cooper left
[03:55] *** cooper joined
[03:59] *** odoacre joined
[04:02] *** wooden joined
[04:02] *** wooden left
[04:02] *** wooden joined
[04:15] *** molaf joined
[04:25] <sorear> hrm

[04:25] <sorear> my research suggests most of the attention niecza is getting is coming from twitter

[04:29] *** tokuhiro_ left
[04:32] *** tyatpi joined
[04:33] *** tokuhiro_ joined
[04:34] *** kaleem joined
[04:42] *** tokuhiro_ left
[04:44] *** eternaleye joined
[04:57] *** molaf left
[05:06] *** sftp left
[05:13] *** orafu left
[05:18] *** orafu joined
[05:18] *** envi_ joined
[05:26] *** ponbiki left
[05:36] *** mkramer1 joined
[05:42] *** am0c joined
[05:42] *** wk left
[05:47] <dalek> niecza: 3f0470a | sorear++ | TODO:

[05:47] <dalek> niecza: Update TODO

[05:47] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3f0470a52f

[05:49] *** dual joined
[05:59] *** lateau_ joined
[06:06] *** ethndbst left
[06:07] *** ethndbst joined
[06:07] *** ethndbst left
[06:07] *** ethndbst joined
[06:22] *** tyatpi left
[06:31] *** koban joined
[06:31] *** mkramer1 left
[06:38] *** bonsaikitten left
[06:38] *** bonsaikitten joined
[06:43] <dalek> niecza: 036e405 | sorear++ | docs/compiler.pod:

[06:43] <dalek> niecza: Rewrite docs/compiler.pod for serialize

[06:43] <dalek> niecza: 

[06:43] <dalek> niecza: Probably gets rid of all the mberends++ magic that made it useful

[06:43] <dalek> niecza: in the first place... will almost certainly need feedback and

[06:43] <dalek> niecza: audience-widening.

[06:43] <dalek> niecza: review: https://github.com/sorear/niecza/commit/036e405567

[06:47] <colomon> sorear: when you say "module packaging", do you mean at the S11 level, or are you thinking of making a stab at something like tadzik's panda?

[06:50] <dalek> niecza: cccad74 | sorear++ | docs/overview.pod:

[06:50] <dalek> niecza: Get docs/overview.pod less hopelessly out of date ("compiler generates C#")

[06:50] <dalek> niecza: review: https://github.com/sorear/niecza/commit/cccad7414b

[06:50] <sorear> colomon: somewhere in between

[06:51] <sorear> colomon: I want to reinvent S11, but I think S11 needs to concern itself more with packaging

[06:51] *** sayu joined
[06:51] * sorear sleep

[06:51] <colomon> o/

[06:51] <sorear> nam.pod tracing.pod still need updating

[06:55] <moritz> good morning

[06:55] <dalek> rakudo/nom: a2e2b96 | moritz++ | / (4 files):

[06:55] <dalek> rakudo/nom: Get rid of nqp::want usage in the setting

[06:55] <dalek> rakudo/nom: 

[06:55] <dalek> rakudo/nom: Also switches pir:: ops to nqp:: ops and adds return type annotations

[06:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a2e2b96ead

[06:56] <colomon> \o

[07:12] *** wtw joined
[07:13] *** lateau_ left
[07:15] *** jdhore left
[07:19] *** jdhore joined
[07:25] *** lateau_ joined
[07:33] *** sayu left
[07:34] <moritz> o/

[07:43] *** envi_ left
[07:54] *** envi_ joined
[07:56] *** woosley joined
[08:02] * colomon still loves Perl 6 grammars and actions.

[08:03] * moritz too

[08:11] <dalek> roast: 41a51d3 | (Solomon Foster)++ | S02-literals/radix.t:

[08:11] <dalek> roast: Fudge for niecza.

[08:11] <dalek> roast: review: https://github.com/perl6/roast/commit/41a51d33ce

[08:12] <colomon> nom: say :16<aa>

[08:12] <p6eval> nom a2e2b9: OUTPUT«170␤»

[08:12] <colomon> nom: say :16<aa.a>

[08:12] <p6eval> nom a2e2b9: OUTPUT«170.625␤»

[08:12] <colomon> nom: say :16<aa.a>.WHAT

[08:12] <p6eval> nom a2e2b9: OUTPUT«Num()␤»

[08:13] <colomon> b: say :16<aa.a>.WHAT

[08:13] <p6eval> b 1b7dd1: OUTPUT«Num()␤»

[08:13] <colomon> I believe that's a Rakduo-bug

[08:13] <dalek> niecza: a2e7b9b | (Solomon Foster)++ | src/NieczaActions.pm6:

[08:13] <dalek> niecza: Add actions needed to handle the basic :N<number_base_N> radix form of numeric literals.

[08:13] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a2e7b9bc40

[08:13] <dalek> niecza: 8e5e697 | (Solomon Foster)++ | t/spectest.data:

[08:13] <dalek> niecza: Turn on radix.t.

[08:13] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8e5e6973e2

[08:14] <colomon> I guess tests for the type returned should be added to radix.t.   But I need to go back to bed and see if I can actually sleep some tonight.

[08:15] <colomon> Tests for bigints and radixs (radices?) as well

[08:15] <colomon> afk # sleep

[08:19] <fsergot> good morning :)

[08:21] *** daniel-s joined
[08:22] *** Trashlord left
[08:22] *** koban left
[08:27] *** Trashlord joined
[08:32] *** daniel-s left
[08:39] *** mj41 joined
[08:51] *** icovnik left
[08:56] <moritz> good morning

[08:58] *** mkramer joined
[09:09] *** fsergot left
[09:09] *** wk joined
[09:11] *** ab5tract joined
[09:13] *** icovnik joined
[09:20] *** am0c left
[09:22] <Woodi> http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2011-11/msg00076.html <- about adding new hash native operations; atomic inc would be nice

[09:22] <Woodi> uups

[09:22] <Woodi> http://antirez.com/post/Sorting-in-key-value-data-model.html

[09:22] <Woodi> here it is

[09:23] * Woodi coffe x 2

[09:30] *** fsergot joined
[09:37] <mls> morning!

[09:39] *** woosley left
[09:46] *** lateau_1 joined
[09:50] *** lateau_ left
[09:55] *** envi_ left
[10:06] *** hypolin left
[10:07] *** daxim joined
[10:14] <dalek> nqp: 4bc5cae | moritz++ | src/PAST/NQP.pir:

[10:14] <dalek> nqp: bitwise str nqp:: ops

[10:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4bc5cae4eb

[10:17] <dalek> rakudo/native-str-ops: 010ed9a | moritz++ | / (2 files):

[10:17] <dalek> rakudo/native-str-ops: add native str ops, add return type annotations, and use nqp:: opcodes for string bitwise ops

[10:17] <dalek> rakudo/native-str-ops: review: https://github.com/rakudo/rakudo/commit/010ed9a229

[10:18] <moritz> nom: multi infix:<x>(str $x, int $i) { nqp::x($x, $i) }; 'foo' x 3

[10:18] <p6eval> nom a2e2b9:  ( no output )

[10:18] <moritz> hm, in the setting that segfaults :(

[10:24] *** Saran joined
[10:24] <moritz> jnthn: rakudo/native-str-ops is again a branch that segfaults. This time I'm pretty sure I don't return anthing from pir:: directly

[10:25] <moritz> jnthn: but for example "foo" x 3  segfaults on that branch

[10:25] <Saran> A newbie here..Willing to contribute for perl6

[10:25] <moritz> hello Saran, welcome to Perl 6!

[10:26] <Saran> Hello Moritz..Thanks..Glad to see your response..

[10:26] <moritz> Saran: what do you want to do? there are lots of ways you can help

[10:26] *** wk left
[10:26] <Saran> Moritz : Would like to contribute in solving some bugs..

[10:26] <moritz> write modules, write documentations, organize a conference, help newbies, blog about perl 6, hack on a compiler, write tests...

[10:27] <Saran> moritz: more interested in writing modules..

[10:27] <moritz> Saran: http://modules.perl6.org/ is a list of what we have now

[10:27] <Saran> moritz : And wish to Organise a conference in Bangalore,India

[10:28] <moritz> Saran: so obviously a lot of stuff is missing... just pick something and implement it :-)

[10:28] <Saran> Moritz : First i would like to start with fixing bugs in any existing modules..which can give some basic idea.

[10:28] <moritz> or extend one of the existing modules

[10:28] <Saran> ok..

[10:29] *** ab5tract left
[10:30] <Saran> My favourite module is "Data::Dumper" in Perl5..i use in most of the perl program 

[10:30] <moritz> well, Perl 6 has that built in

[10:30] <moritz> rakudo: say ('a', 'b', 35).prtl

[10:30] <p6eval> rakudo a2e2b9: OUTPUT«Method 'prtl' not found for invocant of class 'Parcel'␤  in block <anon> at /tmp/tAfOSAw8AJ:1␤  in <anon> at /tmp/tAfOSAw8AJ:1␤»

[10:31] <moritz> rakudo: say ('a', 'b', 35).perl

[10:31] <p6eval> rakudo a2e2b9: OUTPUT«("a", "b", 35)␤»

[10:31] <Saran> cool..

[10:31] <moritz> ... and it helps if you spell it correctly :-)

[10:31] <Saran> Do they have any modules to connect to windows box

[10:31] <moritz> don't think so

[10:32] <Saran> like Net::Telnet /Net::SSH::Perl in Unix..Do they have any modules for windows [ Remote desktop connection ]

[10:32] <moritz> I don't think we have *any* remote connection stuff right now

[10:32] <Saran> Is there any modules in perl 5 ? 

[10:32] <moritz> but we have sockets, so you could write some

[10:32] <Saran> for the same..

[10:33] <Saran> sounds good..

[10:33] <moritz> Saran: dunno. You'd have to search CPAN

[10:33] <Saran> searching..

[10:34] *** envi_ joined
[10:37] <Saran> Am readin this "http://www.perlmonks.org/?node_id=816239"

[10:38] <Saran> moritz ..What skill we require to hack on a compiler..

[10:39] <moritz> Saran: same as on any other program, really

[10:39] <moritz> a compiler is just a program that reads some text files and produces some output

[10:39] *** lateau_1 left
[10:41] <moritz> it's just a relatively large program

[10:41] <Saran> moritz: any repository to see the source code of compiler program

[10:43] <moritz> Saran: https://github.com/rakudo/rakudo/ and https://github.com/sorear/niecza are the two major Perl 6 compilers right now

[10:45] <Saran> k.let me look at it

[10:50] <Saran> ooh! no..where do ppl file a bug while testing modules..

[10:53] <moritz> Saran: usually the modules are hosted on github, and each github project has its own bug tracker

[10:54] <moritz> nom: class A::B { ... }; my package A { class B { } }

[10:54] <p6eval> nom a2e2b9: OUTPUT«===SORRY!===␤The following packages were stubbed but not defined:␤    A::B␤␤»

[10:54] <moritz> that one hurts me currently

[10:54] <mls> jnthn: PIR already evaluates the while body in void context

[10:59] <mls> jnthn: you probably see the result of the optimizer inlining &infix<<>

[11:05] <Saran> moritz: ok

[11:08] *** benabik left
[11:15] *** kaleem left
[11:22] * moritz thinks that detecting void context in for-loops would speed up things considerably

[11:22] <moritz> then at some point we'd know that we can discard the results, and iterate eagerly

[11:22] <moritz> and could optimize iteration over int ranges

[11:24] *** kaleem joined
[11:28] <Woodi> is: while $l = $!sock.get() { $info ~= $l ~ "\n"; } efficient ?

[11:29] <moritz> Woodi: I guess .recv or .read is more efficient

[11:30] <Woodi> k, thank you

[11:36] *** lateau_ joined
[11:38] *** Psyche^ joined
[11:41] <colomon> sorear: actually, masak++ did roll.  :)

[11:42] *** Patterner left
[11:42] *** Psyche^ is now known as Patterner

[11:47] *** wk joined
[11:51] *** benabik joined
[11:58] *** satyavvd left
[12:13] *** mkramer1 joined
[12:15] *** mkramer left
[12:18] *** risou_awy is now known as risou

[12:21] *** mkramer1 left
[12:24] *** Saran left
[12:29] *** Trashlord left
[12:29] *** \patch left
[12:29] *** \patch joined
[12:30] *** odoacre left
[12:35] *** JimmyZ joined
[12:42] <Woodi> b: say 1

[12:42] <p6eval> b 1b7dd1: OUTPUT«1␤»

[12:42] <mls> back from lunch...

[12:44] <mls> moritz: yes, for statements always generate a closure at the moment, so the body cannot be inlined

[12:44] <moritz> nom: for 1 { die '' }

[12:44] <p6eval> nom a2e2b9: OUTPUT«␤  in block <anon> at /tmp/R0rOYMDKQ2:1␤  in method reify at src/gen/CORE.setting:3982␤  in method reify at src/gen/CORE.setting:3889␤  in method reify at src/gen/CORE.setting:3889␤  in method gimme at src/gen/CORE.setting:4251␤  in method eager at src/gen/CORE.settin…

[12:44] <moritz> mls: part of what I want is to get rid of this very deep stack trace, that *can't* be fast

[12:45] <moritz> mls: even if it still involves calling a closure for every iteration

[12:45] <mls> getting rid of the closure would also be nice, though. lexical lookups could be faster when the same context is used

[12:46] <moritz> yes, but that's way beyond my reach of compiler hacking

[12:46] *** nek left
[12:47] <mls> I also thougt about getting rid of that long call chain (I saw it in the subprof output), but I think that's a job for pmichaud++ when he has some tuits

[12:47] * [Coke] drinks coffee

[12:47] <moritz> that's the problem, ain't it?

[12:47] <[Coke]> beware adding too much to pmichaud's plate.

[12:47] <moritz> good morning [Coke] 

[12:47] <[Coke]> moritz: mumblegrumbleblarg.

[12:48] * [Coke] 's job now has him writing java instead of coldfusion. I honestly cannot tell if this is better or not.

[12:48] <moritz> <sorear> my research suggests most of the attention niecza is getting is coming from twitter

[12:48] <mls> does coffee help?

[12:48] * [Coke] guesses better, since it's different.

[12:49] <[Coke]> mls: coffee helps everything. except the problem of going to bed before midnight.

[12:49] <moritz> I think that's pretty obvious, because niecza doesn't really have a website, mailing list or *anything* beyond IRC and the github page

[12:50] <tadzik> and the irc is mainly Rakudo-dominated

[12:51] *** benabik_ joined
[12:51] *** benabik left
[12:51] *** benabik joined
[12:51] *** benabik_ left
[12:53] <moritz> that's slowly shifting

[12:53] <moritz> and I try to point people to both rakudo and niecza when they ask for a Perl 6 compiler

[12:53] <moritz> not sure I succeed

[12:56] <flussence> I've been using niecza a lot more... just because the features I want seem less broken in it at the moment

[12:57] *** am0c joined
[12:57] <flussence> (I still haven't got Text::Wrap to work in either compiler yet, and I'm close to giving up trying...)

[12:58] <moritz> what's the problem with it?

[12:58] *** am0c left
[13:00] <flussence> niecza goes wrong at some point I can't seem to pin down, and ends up hitting a sanity check I put in that shouldn't be reachable; rakudo doesn't do /. ** {...}/ yet

[13:01] <moritz> you can work around lack of .**{...}

[13:01] <moritz> <{".**$interpolate_range_here"}>

[13:01] <moritz> if I remember the syntax correctly

[13:01] *** _jaldhar joined
[13:03] <moritz> .u ね

[13:03] <phenny> U+306D HIRAGANA LETTER NE (ね)

[13:03] *** am0c joined
[13:08] <colomon> niecza: say :16<1234567890abcdef1234567890abcdef1234567890abcdef>

[13:08] <p6eval> niecza v11-5-g8e5e697: OUTPUT«446371678903360124661747118626766461972311602250509962735␤»

[13:08] <benabik> That's a lot of numbers.

[13:09] <colomon> niecza: say :16<1234567890abcdef1234567890abcdef1234567890abcdef.e>

[13:09] <p6eval> niecza v11-5-g8e5e697: OUTPUT«3570973431226880997293976949014131695778492818004079701887/8␤»

[13:09] *** envi_ left
[13:14] *** kfo_ joined
[13:17] *** kfo left
[13:18] <geekosaur> "/"?  not "." or ","?

[13:19] <moritz> it seems that nieczas .gist defaults to .perl

[13:21] <colomon> niecza: say :16<1234567890abcdef1234567890abcdef1234567890abcdef.e>.Str

[13:21] <p6eval> niecza v11-5-g8e5e697: OUTPUT«3570973431226880997293976949014131695778492818004079701887/8␤»

[13:21] <colomon> niecza: say :16<1234567890abcdef1234567890abcdef1234567890abcdef.e>.gist

[13:21] <p6eval> niecza v11-5-g8e5e697: OUTPUT«3570973431226880997293976949014131695778492818004079701887/8␤»

[13:21] <colomon> niecza: say :16<1234567890abcdef1234567890abcdef1234567890abcdef.e>.perl

[13:21] <p6eval> niecza v11-5-g8e5e697: OUTPUT«3570973431226880997293976949014131695778492818004079701887/8␤»

[13:21] <moritz> niecza: say :16<1234567890abcdef1234567890abcdef1234567890abcdef.e>.WHAT

[13:21] <p6eval> niecza v11-5-g8e5e697: OUTPUT«Rat()␤»

[13:22] <moritz> niecza: say 1/3

[13:22] <p6eval> niecza v11-5-g8e5e697: OUTPUT«1/3␤»

[13:22] <moritz> niecza: say (1/3).Str

[13:22] <p6eval> niecza v11-5-g8e5e697: OUTPUT«1/3␤»

[13:22] <moritz> https://github.com/sorear/niecza/issues/75 complains about that

[13:23] <benabik> niecza: say 1/10

[13:23] <p6eval> niecza v11-5-g8e5e697: OUTPUT«1/10␤»

[13:23] <colomon> yes

[13:23] <colomon> it's probably easy-ish to fix

[13:23] *** envi_ joined
[13:23] <colomon> the biggest question is the right way to fix it.  ;)

[13:27] <flussence> perl6: my $t = 5; say ('abcdef' ~~ rx/ <{'\N ** 0..' ~ $t - 1}> /);

[13:28] <p6eval> rakudo a2e2b9: OUTPUT«Null PMC access in find_method('MATCH')␤  in regex <anon> at /tmp/6sz0oJThdU:1␤  in method ACCEPTS at src/gen/CORE.setting:6569␤  in block <anon> at /tmp/6sz0oJThdU:1␤  in <anon> at /tmp/6sz0oJThdU:1␤»

[13:28] <p6eval> ..pugs b927740: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20111008/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HAND…

[13:28] <p6eval> ..niecza v11-5-g8e5e697: OUTPUT«#<match from(0) to(0) text() pos([].list) named({}.hash)>␤»

[13:28] <flussence> perl6: my Int $t = 5; my Str $r = '\N ** 0..' ~ $t - 1; say ('abcdef' ~~ rx/ <{$r}> /);

[13:28] <p6eval> rakudo a2e2b9: OUTPUT«Null PMC access in find_method('MATCH')␤  in regex <anon> at /tmp/fJopPgiQp7:1␤  in method ACCEPTS at src/gen/CORE.setting:6569␤  in block <anon> at /tmp/fJopPgiQp7:1␤  in <anon> at /tmp/fJopPgiQp7:1␤»

[13:28] <p6eval> ..pugs b927740: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20111008/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HAND…

[13:28] <p6eval> ..niecza v11-5-g8e5e697: OUTPUT«#<match from(0) to(0) text() pos([].list) named({}.hash)>␤»

[13:29] <flussence> I'm not sure about niecza's output, but that NPMCA looks wrong.

[13:29] <moritz> it does

[13:30] <flussence> (and with the string interpolation rakudo passes 17 tests instead of 28...)

[13:31] <geekosaur> oh

[13:31] * geekosaur missed it was outputting a rational :/

[13:39] *** JimmyZ left
[13:44] <flussence> rakudo: my $a = rx/./; my $b = rx/<{$a}>/;

[13:44] <p6eval> rakudo a2e2b9:  ( no output )

[13:44] <flussence> rakudo: my $a = rx/./; my $b = rx/<{$a}>/; say 'c' ~~ $b

[13:44] <p6eval> rakudo a2e2b9: OUTPUT«Null PMC access in find_method('MATCH')␤  in regex <anon> at /tmp/cJJmhZEFeP:1␤  in method ACCEPTS at src/gen/CORE.setting:6569␤  in block <anon> at /tmp/cJJmhZEFeP:1␤  in <anon> at /tmp/cJJmhZEFeP:1␤»

[13:44] <flussence> seems it's the <{...}> and not the string itself causing that

[13:45] <moritz> oh, I have an idea what might be going on

[13:45] <moritz> it might compile it into a nqp regex, not a p6 regex

[13:48] *** grondilu joined
[13:49] <mls> moritz: there's a type in core/Int.pm, line 88

[13:50] <mls> (I think)

[13:50] <moritz> mls: oops, thanks

[13:50] <mls> should be prefix:<abs> instead of prefix<->

[13:51] <moritz> indeed

[13:51] <mls> (perl6 should warn about the redifinition, IMHO)

[13:51] <mls> redefinition

[13:51] <moritz> well, for multis that's not so easy

[13:51] <dalek> rakudo/nom: c838c1c | moritz++ | src/core/Int.pm:

[13:51] <dalek> rakudo/nom: fix copy/pasto in native int op name, mls++

[13:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c838c1c1a9

[13:56] *** lateau_1 joined
[13:56] *** am0c left
[13:58] *** lateau_ left
[14:01] <fsergot> masak, i've problem with ufo :)

[14:03] <fsergot> hmm, works now. :)

[14:05] *** thowe left
[14:05] *** lateau_1 left
[14:08] *** lateau_ joined
[14:12] <flussence> niecza: my Int $t = 5; my Regex $r = rx/\N ** {0.. $t.pred}/; say ('abcdef' ~~ rx/ <{$r}> /);

[14:12] <p6eval> niecza v11-5-g8e5e697: OUTPUT«#<match from(0) to(0) text() pos([].list) named({}.hash)>␤»

[14:13] <moritz> nom: say 'abc' ~~ /<?{ '.+' }>/

[14:13] <p6eval> nom a2e2b9: OUTPUT«=> <>␤␤»

[14:13] <moritz> nom: say 'abc' ~~ /<{ '.+' }>/

[14:13] <p6eval> nom a2e2b9: OUTPUT«Null PMC access in find_method('MATCH')␤  in regex <anon> at /tmp/ThxAYWsWrh:1␤  in method ACCEPTS at src/gen/CORE.setting:6569␤  in block <anon> at /tmp/ThxAYWsWrh:1␤  in <anon> at /tmp/ThxAYWsWrh:1␤»

[14:13] <flussence> niecza: my Int $t = 5; my Regex $r = rx/\N ** {0.. $t.pred}/; say ('abcdef' ~~ rx/ $r /);

[14:13] <p6eval> niecza v11-5-g8e5e697: OUTPUT«Match()␤»

[14:13] <flussence> niecza: my Int $t = 5; my Regex $r = rx/\N ** {0.. $t.pred}/; say ('abcdef' ~~ rx/ $r /).perl;

[14:13] <p6eval> niecza v11-5-g8e5e697: OUTPUT«Match␤»

[14:13] <flussence> erm

[14:13] <moritz> the match fails

[14:13] <flussence> oh

[14:13] <moritz> so it returns the Match type object

[14:13] <moritz> b: say 'abc' ~~ /<{ '.+' }>/

[14:13] <p6eval> b 1b7dd1: OUTPUT«abc␤»

[14:14] <moritz> that's more like it

[14:15] * moritz submits rakudobug

[14:15] <flussence> niecza: my Int $t = 5; my Regex $r = rx/\N ** {0..4}/; say ('abcdef' ~~ rx/ $r /).perl;

[14:15] <p6eval> niecza v11-5-g8e5e697: OUTPUT«Potential difficulties:␤  $t is declared but not used at /tmp/7rL2vwiQiZ line 1:␤------> my Int ⏏$t = 5; my Regex $r = rx/\N ** {0..4}/; ␤␤Match␤»

[14:15] <flussence> niecza: my Regex $r = rx/\N ** 0..4/; say ('abcdef' ~~ rx/ $r /).perl;

[14:16] <p6eval> niecza v11-5-g8e5e697: OUTPUT«Match␤»

[14:16] <flussence> that's... odd

[14:16] <flussence> niecza: my Regex $r = rx/\N ** 0..4/; say ('abcdef' ~~ $r).perl;

[14:16] <p6eval> niecza v11-5-g8e5e697: OUTPUT«#<match from(0) to(4) text(abcd) pos([].list) named({}.hash)>␤»

[14:16] <flussence> oh.

[14:16] <moritz> niecza: say so 'a' ~~ /\N/

[14:16] <p6eval> niecza v11-5-g8e5e697: OUTPUT«Bool::True␤»

[14:17] <flussence> if niecza won't interpolate regexes like that, then chances are that's why my code doesn't work...

[14:17] <flussence> (assuming it should've worked the first time and I'm not making some stupid mistake in the above code)

[14:18] <flussence> rakudo: my Regex $r = rx/\N ** 0..4/; say ('abcdef' ~~ rx/ $r /).perl;

[14:18] <p6eval> rakudo a2e2b9: OUTPUT«Match.new(orig => "abcdef", from => 0, to => 4, ast => Mu, list => ().list, hash => EnumMap.new())␤»

[14:20] <flussence> rakudo: my Regex $r = rx/\N ** 0..4/; say ('abcdef' ~~ rx/ $r /);

[14:20] <p6eval> rakudo a2e2b9: OUTPUT«=> <abcd>␤␤»

[14:20] <flussence> rakudo: my Regex $r = rx/\N ** 0..4/; say ('abcdef' ~~ rx/ $r $ /);

[14:20] <p6eval> rakudo a2e2b9: OUTPUT«=> <cdef>␤␤»

[14:20] <flussence> rakudo: my Regex $r = rx/\N ** 0..4/; say ('abcdef' ~~ rx/ $r $ /).Str;

[14:20] <p6eval> rakudo a2e2b9: OUTPUT«cdef␤»

[14:20] <flussence> niecza: my Regex $r = rx/\N ** 0..4/; say ('abcdef' ~~ rx/ $r $ /).Str;

[14:20] <p6eval> niecza v11-5-g8e5e697: OUTPUT«␤»

[14:21] * flussence submits nieczabug

[14:24] <flussence> niecza: my Str $r = '\N ** 0..4'; say ('abcdef' ~~ rx/ <{$r}> $ /).Str;

[14:24] <p6eval> niecza v11-5-g8e5e697: OUTPUT«␤»

[14:24] <flussence> looks like interpolation flat out doesn't work there :(

[14:25] <moritz> niecza: my Str $r = '\N ** 0..4'; say $str ~~ /<{$str}>/

[14:25] <p6eval> niecza v11-5-g8e5e697: OUTPUT«===SORRY!===␤␤Variable $str is not predeclared at /tmp/Tc_k6J0vMt line 1:␤------> my Str $r = '\N ** 0..4'; say ⏏$str ~~ /<{$str}>/␤␤Variable $str is not predeclared at /tmp/Tc_k6J0vMt line 1:␤------> y Str $r = '\N…

[14:25] <moritz> niecza: my Str $r = '\N ** 0..4'; say $r ~~ /<{$r}>/

[14:25] <p6eval> niecza v11-5-g8e5e697: OUTPUT«#<match from(0) to(0) text() pos([].list) named({}.hash)>␤»

[14:26] <flussence> (I wonder if niecza misinterprets that as rx/ $ r /...)

[14:27] *** daniel-s joined
[14:27] <flussence> std: rx/ $ r /

[14:27] <p6eval> std be1f10e: OUTPUT«ok 00:01 120m␤»

[14:27] *** cosimo left
[14:27] <flussence> it'd explain the lack of errors

[14:30] *** grondilu left
[14:33] *** cosimo joined
[14:45] *** cosimo left
[14:52] <fsergot> nom: sub a { 1; }; say a.WHAT;

[14:52] <p6eval> nom a2e2b9: OUTPUT«Int()␤»

[14:52] <fsergot> nom: sub a { 1; }; say &a.WHAT;

[14:52] <p6eval> nom a2e2b9: OUTPUT«Sub()␤»

[14:53] <moritz> nom: say 1.WHAT

[14:53] <p6eval> nom a2e2b9: OUTPUT«Int()␤»

[14:53] *** icovnik left
[14:53] <moritz> nom: my int $x = 3; say $x.WHAT

[14:53] <p6eval> nom a2e2b9: OUTPUT«Int()␤»

[14:53] <moritz> that's curious, and probably not wrong

[14:54] *** cosimo joined
[14:56] <fsergot> :)

[14:58] <fsergot> nom: sub do { 1; }

[14:58] <p6eval> nom a2e2b9:  ( no output )

[14:58] <fsergot> nom: sub do { 1; }; do;

[14:58] <p6eval> nom a2e2b9:  ( no output )

[14:58] <fsergot> We can use keywords as subs names? :)

[14:59] <fsergot> name*

[14:59] <moritz> sure

[14:59] <fsergot> Great. :)

[14:59] <moritz> nom: sub if() { say 'IFF' }; if()

[14:59] <p6eval> nom c838c1: OUTPUT«IFF␤»

[14:59] *** Trashlord joined
[14:59] <flussence> nom: sub if() { say 'IFF' }; if if if;

[14:59] <p6eval> nom c838c1: OUTPUT«===SORRY!===␤Missing block at line 1, near "if;"␤»

[15:00] <flussence> heh :)

[15:00] <flussence> nom: sub if() { say 'IFF' }; if() if if();

[15:00] <p6eval> nom c838c1: OUTPUT«IFF␤IFF␤»

[15:00] <moritz> ... but sometimes you need () to disambiguate towards the function

[15:00] <fsergot> :)

[15:00] <moritz> nom: enum A <b c>; sub c() { 42 }; say c; say c()

[15:00] <p6eval> nom c838c1: OUTPUT«A::c␤42␤»

[15:00] <flussence> rakudo++ # letting me write stupid things :)

[15:02] <fsergot> nom: %h = 1, 2; say %h.keys

[15:02] <p6eval> nom c838c1: OUTPUT«===SORRY!===␤Variable %h is not predeclared at line 1, near " = 1, 2; s"␤»

[15:03] <fsergot> nom: my %h = 1, 2; say %h.keys

[15:03] <p6eval> nom c838c1: OUTPUT«1␤»

[15:03] <fsergot> nom: my %h = sub { say 1; }, 2; say %h.keys

[15:03] <p6eval> nom c838c1: OUTPUT«_block1011␤»

[15:04] <fsergot> nom: my %h = sub { say 1; }, 2; say $_ for %h.keys;

[15:04] <p6eval> nom c838c1: OUTPUT«_block1011␤»

[15:04] <fsergot> nom: my %h = sub { say 1; }, 2; $_ for %h.keys;

[15:04] <p6eval> nom c838c1:  ( no output )

[15:04] <fsergot> Why not "1" ? :)

[15:05] <fsergot> nom: my %h = sub { say 1; }, 2; $_() for %h.keys;

[15:05] <p6eval> nom c838c1: OUTPUT«Method 'postcircumfix:<( )>' not found for invocant of class 'Str'␤  in <anon> at src/gen/Metamodel.pm:3190␤  in block <anon> at /tmp/2ONvpQIa40:1␤  in method reify at src/gen/CORE.setting:3982␤  in method reify at src/gen/CORE.setting:3889␤  in method reify at src/ge…

[15:05] <fsergot> nom: my %h = sub { say 1; }, 2; say %h.kv

[15:05] <p6eval> nom c838c1: OUTPUT«_block1011 2␤»

[15:06] <fsergot> nom: my %h = sub { say 1; }, 2; $_ for %h.keys;

[15:06] <p6eval> nom c838c1:  ( no output )

[15:06] <fsergot> I want to see 1 :)

[15:06] <moritz> you won't

[15:06] <moritz> hash keys are strings

[15:06] <fsergot> Only? :)

[15:07] <benabik> nom: my %h = sub { say 1; }, 2; say %h.perl

[15:07] <p6eval> nom c838c1: OUTPUT«("_block1011" => 2).hash␤»

[15:07] <fsergot> nom: my %h = <a b c>, <d e f>; say %h.kv;

[15:07] <p6eval> nom c838c1: OUTPUT«a b c d e f␤»

[15:07] <fsergot> nom: my %h = <a b c>, <d e f>; say %h.k.WHAT;

[15:07] <p6eval> nom c838c1: OUTPUT«Method 'k' not found for invocant of class 'Hash'␤  in block <anon> at /tmp/dsPQYbPkll:1␤  in <anon> at /tmp/dsPQYbPkll:1␤»

[15:08] <fsergot> nom: my %h = <a b c>, <d e f>; say %h.keys.WHAT;

[15:08] <p6eval> nom c838c1: OUTPUT«List()␤»

[15:08] <moritz> nom: my %h = <a b c>, <d e f>; say %h.perl

[15:08] <p6eval> nom c838c1: OUTPUT«("a" => "b", "c" => "d", "e" => "f").hash␤»

[15:09] <fsergot> Ok. :)

[15:12] *** satyavvd joined
[15:13] *** JimmyZ joined
[15:13] *** nnunley joined
[15:14] *** satyavvd_ joined
[15:16] *** satyavvd_ left
[15:16] *** satyavvd left
[15:23] *** thou joined
[15:33] *** sftp joined
[15:41] *** am0c joined
[15:44] *** wtw left
[15:51] <PerlJam> masak: congrats on your grant!

[15:51] <JimmyZ> congratulations!

[15:53] *** lateau_ left
[15:57] <arnsholt> masak: Did you ever do anything more with your "MAIN for Perl 5" idea?

[16:00] *** ascent__ left
[16:00] *** ascent_ joined
[16:15] *** JimmyZ left
[16:15] *** daniel-s left
[16:16] *** colomon left
[16:17] *** wolfman2000 left
[16:20] *** Trashlord left
[16:20] *** colomon joined
[16:21] *** Trashlord joined
[16:22] *** Trashlord left
[16:24] *** Trashlord joined
[16:28] *** krakan_ left
[16:32] *** Trashlord left
[16:34] *** kaleem left
[16:42] *** Trashlord joined
[16:45] *** lateau_ joined
[16:47] <fsergot> What masak did? :)

[16:47] *** krakan joined
[16:48] *** mj41 left
[16:49] *** daniel___ joined
[16:50] *** kaleem joined
[16:51] *** kaleem left
[16:51] *** kaleem joined
[16:53] *** Trashlord left
[16:56] *** wolfman2000 joined
[17:01] <daxim> fsergot, [16:49] * rssbot PerlFoundation: Hague Grant Accepted:  Implementation of Macros in Rakudo (Karen) - http://news.perlfoundation.org/2011/11/hague-grant-accepted-implement.html

[17:01] <daxim> join MagNET #news for news

[17:02] <fsergot> Thanks daxim++. Congratulations masak++. :)

[17:05] *** colomon left
[17:08] *** colomon joined
[17:09] <colomon> masak++!

[17:14] *** benabik left
[17:15] *** MayDaniel joined
[17:17] <jnthn> o/ from Bratislava :)

[17:17] <jnthn> (just for a moment, will be dinner time soon :))

[17:17] <daxim> you decommuted!  \o/

[17:17] <jnthn> :D

[17:22] *** daniel-s joined
[17:23] *** benabik joined
[17:26] *** daniel___ left
[17:27] <jnthn> ok, dinner :)

[17:37] *** molaf joined
[17:37] *** daniel-s left
[17:40] *** simcop2387 left
[17:43] *** simcop2387 joined
[17:45] *** kaleem left
[17:51] *** MayDaniel left
[17:53] *** lateau_ left
[18:00] *** lateau_ joined
[18:02] *** thou left
[18:04] *** daniel-s joined
[18:06] *** tlocalhos left
[18:06] *** GlitchMr joined
[18:08] *** tlocalhos joined
[18:10] *** wk left
[18:16] *** Chillance joined
[18:17] *** lateau_ left
[18:20] <dalek> niecza: 22aed0b | diakopter++ | docs/compiler.pod:

[18:20] <dalek> niecza: typo

[18:20] <dalek> niecza: review: https://github.com/sorear/niecza/commit/22aed0b992

[18:20] <moritz> nom: class A::B { ... }; class A::B { }

[18:20] <p6eval> nom c838c1:  ( no output )

[18:20] * moritz wonders why that doesn't seem to work in the setting

[18:20] <tadzik> Setting is Special :)

[18:21] <tadzik> seen mberends

[18:21] <aloha> mberends was last seen in #perl6 7 days 23 hours ago joining the channel.

[18:21] <tadzik> :(

[18:21] <moritz> mberends is special too :-)

[18:21] <tadzik> that's why I'm looking for him :)

[18:22] <moritz> if it's urgent, I could dig up his mobile phone number for you

[18:22] <tadzik> I think I have it, but I don't think I need to bother him that much

[18:23] <tadzik> I have to think of some nice database I'd like to design and implement, for my RDBMS classes. I thought about design something alike popolnik, the db storing smoketests of perl6 modules

[18:29] *** ashleydev left
[18:29] *** ashleydev joined
[18:33] *** Trashlord joined
[18:34] *** benabik left
[18:34] <[Coke]> tadzik: ... there's a DB for storing smoketests of perl6 modules that isn't smolder?

[18:34] <tadzik> [Coke]: nope

[18:34] <[Coke]> tadzik: also see coke/muddle on github.

[18:34] <tadzik> but there were plans for that

[18:34] <tadzik> and it was also supposed to measure performance

[18:35] <[Coke]> tadzik: muddle can probably do that to, if I ever get back to it. ;)

[18:35] *** packetknife joined
[18:36] *** MayDaniel joined
[18:37] <tadzik> (:

[18:37] <tadzik> I don't need _it_, I need to implement it :)

[18:37] <tadzik> I just want something more appealing to me than another internet shop or such

[18:38] *** wk joined
[18:38] <[Coke]> tadzik: I am very happy to have another pair of hands. It's mojo, and I plan to jQuerify the front end.

[18:39] *** benabik joined
[18:39] <tadzik> [Coke]: I'm interested in db-side only; well, fsvo interested. I would probably be interested in every aspect of it, but what i need is the db side

[18:40] <[Coke]> https://github.com/coke/muddle/blob/master/script/sampledb.sql

[18:42] * [Coke] restarts http://feather.perl6.nl:2653/rakudo/

[18:42] <tadzik> [Coke]: ohh, that will be useful to me, thanks!

[18:42] <tadzik> [Coke]++

[18:43] <[Coke]> tadzik: if nothing else, you've motivated me to carve out some time here.

[18:43] <[Coke]> tadzik++

[18:43] <tadzik> I'll just need to put more bloat in it, they want like a 20-table-big database

[18:44] <flussence> just stick a login system on it, that'll easily add 3-5 tables :)

[18:44] <tadzik> I think performance measurement will put something in it

[18:45] <tadzik> also, the number of things I can force into it and still make it some minimal of sense is much bigger than 20 tables :)

[18:45] <[Coke]> tadzik: hey, don't forget to contribute upstream. ;)

[18:45] <tadzik> [Coke]: only the good parts, ok? :P

[18:46] *** daniel-s left
[18:46] <tadzik> like, connecting contributors to commits, and then figuring out who commited the most performance improvements, introduced the most bugs... ;)

[18:49] <[Coke]> tadzik: nifty.

[18:50] * tadzik shopping &

[18:52] *** daxim left
[18:58] <[Coke]> perl6.org - in IE8, if I mouse over camelia, the blue box contracts. mouse out, it expands. very distracting.

[19:00] * [Coke] tries to trick his boss into playing with Perl 6.

[19:01] *** UncleFester6 joined
[19:01] <moritz> [Coke]: does anything else change on mouse-over?

[19:01] <moritz> like, text underlining, borders or so?

[19:03] <diakopter> doesn't do it in ie9

[19:03] <flussence> maybe it just needs a use strict at the top... XHTML 1.0 Transitional triggers quirks mode

[19:03] *** wolfman2000 left
[19:03] <UncleFester6> rakudo: package A { our %h; %h{'A'} = 2 }

[19:03] <p6eval> rakudo c838c1: OUTPUT«Method 'at_key' not found for invocant of class 'Any'␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1039␤  in <anon> at /tmp/XrWJS1ZeNQ:1␤  in block <anon> at /tmp/XrWJS1ZeNQ:1␤  in <anon> at /tmp/XrWJS1ZeNQ:1␤»

[19:03] <UncleFester6> rakudo: package A { my %h; %h{'A'} = 2 }

[19:03] <p6eval> rakudo c838c1:  ( no output )

[19:06] *** envi_ left
[19:06] <[Coke]> moritz: nope.

[19:07] *** risou is now known as risou_awy

[19:07] <moritz> UncleFester6: looks like a bug in rakudo

[19:08] <[Coke]> flussence: the page is rendering in Ie8 standards mode.

[19:08] <UncleFester6> Thx - still doing some research - if I don't find a good match I'll send it in ...

[19:13] <flussence> oh well, I'm not all that familiar with IE8's rendering. IE6, I know more about than I'd like...

[19:15] <moritz> broken browser is broken

[19:18] *** packetknife left
[19:24] <Woodi>  »ö« Welcome to Perl 6! | http://perl6.org/ | evalbot usage: 'perl6: say 3;' or rakudo:, niecza:, std:, or /msg p6eval perl6: ... | irclog: http://irc.perl6.org/ | UTF-8 is o

[19:24] <Woodi> 19:20 <+dalek> niecza: review: https://github.com/sorear/niecza/commit/22aed0b992

[19:24] <Woodi> 19:20 < moritz> nom: class A::B { ... }; class A::B { }

[19:24] <Woodi> 19:20 <+p6eval> nom c838c1:  ( no output )

[19:24] <Woodi> 19:20  * moritz wonders why that doesn't seem to work in the setting

[19:24] <Woodi> 19:20 < tadzik> Setting is Special :)

[19:24] <Woodi> 19:21 < tadzik> seen mberends

[19:24] <Woodi> 19:21 < aloha> mberends was last seen in #perl6 7 days 23 hours ago joining the channel.

[19:24] <Woodi> 19:21 < tadzik> :(

[19:24] <Woodi> 19:21 < moritz> mberends is special too :-)

[19:24] <Woodi> 19:21 < tadzik> that's why I'm looking for him :)

[19:24] <Woodi> 19:22 < moritz> if it's urgent, I could dig up his mobile phone number for you

[19:24] <Woodi> 19:22 < tadzik> I think I have it, but I don't think I need to bother him that much

[19:24] <Woodi> 19:23 < tadzik> I have to think of some nice database I'd like to design and implement, for my RDBMS classes. I thought about design something alike popolnik, the db storing 

[19:24] <Woodi>                 smoketests of perl6 modules

[19:24] <Woodi> 19:34 < [Coke]> tadzik: ... there's a DB for storing smoketests of perl6 modules that isn't smolder?

[19:24] <Woodi> oops ?

[19:24] <moritz> oops.

[19:24] <moritz> think before you paste

[19:25] <tadzik> woot

[19:25] <Woodi> sorry, mis-readed. and realy going sleep...

[19:25] <Woodi> gn ppls

[19:25] <tadzik> gn

[19:27] <flussence> I'll be the creepy guy who points out that paste comes from, approximately, a terminal with 12px font maximised on a 1280x1024 screen... :)

[19:27] <flussence> (or is it 12pt...)

[19:28] <benabik> I think px and pt are fairly similar on most computers.

[19:36] <colomon> woah, wonder what mberends is off doing?

[19:46] <moritz> probably traveling

[19:46] <moritz> (or teaching)

[19:50] *** ksi joined
[19:52] *** UncleFester6 left
[19:52] <dalek> rakudo/nom: 4b4f5ef | moritz++ | src/core/ (2 files):

[19:52] <dalek> rakudo/nom: throw X::OutOfRange exception from Date and DateTime constructors

[19:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4b4f5efb4a

[19:56] *** MayDaniel left
[20:09] *** fsergot left
[20:09] *** fsergot joined
[20:19] *** mj41 joined
[20:20] *** GlitchMr left
[20:25] <masak> oh hai #perl6!

[20:25] <PerlJam> masak: congrats again in case you don't read the scrollback!  :)

[20:25] <diakopter> o.

[20:25] <masak> thanks -- I didn't, but I will.

[20:25] <moritz> \o masak 

[20:26] <fsergot> hey masak

[20:31] *** soh_cah_toa joined
[20:42] *** am0c left
[20:44] *** mj41 left
[20:44] <dalek> specs: 9950d83 | masak++ | S13-overloading.pod:

[20:44] <dalek> specs: [S13] unspec multiple signatures

[20:44] <dalek> specs: 

[20:44] <dalek> specs: S06 is fairly stable at this point, and the suggestion in S13 to

[20:44] <dalek> specs: support multiple signatures for one single routine never made it

[20:44] <dalek> specs: into S06. Neither of three major implementations support multiple

[20:44] <dalek> specs: signatures. There's no sense of a general demand for them. The

[20:44] <dalek> specs: feature is probably implementable, but the torment to the

[20:44] <dalek> specs: implementors isn't proportionate to the benefit for the users.

[20:44] <dalek> specs: review: https://github.com/perl6/specs/commit/9950d83ede

[20:46] *** daniel-s joined
[20:47] <PerlJam> masak++

[20:48] <PerlJam> (besides, it's easily doable with macros!  ;-)

[20:48] * masak whimpers :)

[20:48] <moritz> PerlJam: is it?

[20:49] <PerlJam> moritz: I don't know, I was just being flippant.

[20:49] * masak .oO( anything's possible with 'is parsed'... )

[20:49] <PerlJam> masak: I think the question was about "easily"

[20:49] <masak> nothing's easy with 'is parsed' :P

[20:50] <dalek> roast: 5e7be3e | moritz++ | S02-types/native.t:

[20:50] <dalek> roast: binding slurpy param to list of natively typed variables

[20:50] <dalek> roast: review: https://github.com/perl6/roast/commit/5e7be3e0fb

[20:53] <PerlJam> I was just thinking about how I'd do the equivalent of multiple sigs with only one routine body and it occurs to me that "is parsed" is "structured monkey typing"

[20:54] <PerlJam> (not really, but that's how we get augment and augmenting the grammar is what "is parsed" does)

[21:00] <[Coke]> masak: is there a perl6-level tailcall?

[21:01] <[Coke]> (if I had to deal with multi-multis in another language, I'd just make the second one call the first one.)

[21:01] <moritz> nextwith, nextsame

[21:02] <moritz> still one more dispatch

[21:02] <moritz> s/dispatch/call/

[21:02] <PerlJam> [Coke]: me too :)

[21:03] <masak> sorear: fwiw, I've been mostly on Niecza for the past month or so.

[21:04] <masak> except when tinkering with macros. ;)

[21:06] <colomon> masak: you know, it's not that hard to imagine cases where multiple signatures would be really nice in a DRY sense...

[21:06] *** benabik left
[21:06] *** benabik_ joined
[21:07] <dalek> rakudo/nom: 16b498b | moritz++ | docs/ChangeLog:

[21:07] <dalek> rakudo/nom: update ChangeLog

[21:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/16b498b1ee

[21:07] <masak> colomon: I actually agree.

[21:08] <masak> colomon: I just don't like the proposed solution.

[21:08] <colomon> masak: and (naively speaking) it doesn't seem like it would be wildly hard to implement.

[21:08] <masak> colomon: I'll reinstate the spec if you implement the feature.

[21:08] <colomon> heh.  

[21:08] *** thou joined
[21:09] <colomon> I did add new actions to Niecza's grammar last night during a bout of insomnia...

[21:10] *** Exodist_ is now known as Exodist

[21:10] *** u2011 joined
[21:11] *** daniel-s left
[21:14] *** cooper left
[21:16] <ingy> o/

[21:16] <masak> \o

[21:17] <masak> colomon: I'd much rather see an 'is symmetric' subroutine trait for the case of symmetric binary operators. it's much less of an overkill feature than general multiple siggies. it doesn't necessarily have to be core.

[21:19] <jnthn> Probably can be implemented in a module...Rakudo has most of what's needed to do that, I suspect.

[21:20] *** donri joined
[21:21] <colomon> ooooo, yes, is symmetric would indeed get every use case I've actually considered

[21:21] <colomon> masak: sounds like the implementation is in your court, then.  ;)

[21:22] <masak> dang. :)

[21:22] *** donri left
[21:22] <masak> I'll just charge you on the macro lateness account, then... :>

[21:24] *** donri joined
[21:24] *** mkramer joined
[21:31] <fsergot> gn!  o/

[21:35] *** donri left
[21:35] *** donri joined
[21:38] <masak> fsergot: 'branoc!

[21:38] *** fsergot left
[21:39] <colomon> jnthn: would the obvious way of implementing it in a module mean that one direction was slower than the other?

[21:39] *** donri left
[21:40] <dalek> 6model: fb12a3b | diakopter++ | lua/ (14 files):

[21:40] <dalek> 6model: more bugfixes; jnthn++ jnthn++

[21:40] <dalek> 6model: review: https://github.com/diakopter/6model/commit/fb12a3b0ed

[21:44] <jnthn> colomon: Probably a little, but that may be possible to overcome too.

[21:45] <jnthn> colomon: In fact, I can think of a way to do so...I think. :)

[21:46] <colomon> :)

[21:48] *** wolfman2000 joined
[21:49] <colomon> how do you add a trait, anyway?

[21:51] *** MayDaniel joined
[21:53] <jnthn> Just declare a multi

[21:53] <jnthn> See my Grammar::Debugger module for an example

[21:55] *** thou left
[21:56] <jnthn> sleep &

[21:57] *** donri joined
[21:59] *** donri left
[22:01] *** wooden left
[22:01] *** dorlamm joined
[22:07] *** MayDaniel left
[22:10] <dalek> 6model: f41b903 | diakopter++ | lua/compiler/PAST2LSTCompiler.pm:

[22:10] <dalek> 6model: fix scoping problem for Context locals

[22:10] <dalek> 6model: review: https://github.com/diakopter/6model/commit/f41b903309

[22:11] *** slavik1 left
[22:21] *** am0c joined
[22:25] *** u2011 left
[22:30] *** benabik_ left
[23:13] *** thou joined
[23:30] *** sunnavy left
[23:31] *** sunnavy joined
[23:33] *** dorlamm left
[23:37] *** mkramer left
[23:40] *** icovnik joined
[23:52] <dalek> 6model: 21470b5 | diakopter++ | lua/compiler/ (3 files):

[23:52] <dalek> 6model: store blocks in a table and use locals for one-off private functions.  try.bat makes x.lua start by  dofile('RakudoRuntime.lua');

[23:52] <dalek> 6model: review: https://github.com/diakopter/6model/commit/21470b50cf

[23:55] *** ksi left
