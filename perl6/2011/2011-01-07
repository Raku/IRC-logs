[00:04] <flussence> How would I go about doing Str.lines but keeping trailing \n? .comb(/^^ .* $$/) doesn't seem to do it, I just get the whole multiline string back.

[00:05] *** ab5tract left
[00:07] <sorear> .comb(/:r ^^ \N* \n?/) maybe

[00:08] *** GinoMan_ left
[00:09] <flussence> that works, thanks

[00:10] <flussence> now the hardest part, figuring out how to deal with \t in .indent...

[00:23] *** plobsing joined
[00:27] *** felliott left
[00:30] *** masonkramer left
[00:30] *** lopnor joined
[00:34] *** felliott joined
[00:34] *** lopnor is now known as lopaway

[00:37] *** hacknperl joined
[00:38] <hacknperl> We need a port of perl for WebOS.  :)

[00:40] * KatrinaTheLamia blinks

[00:40] *** impious left
[00:40] <KatrinaTheLamia> "WebOS"?

[00:40] *** ab5tract joined
[00:40] * KatrinaTheLamia will work on Jerl6 the JVM Perl6 with access to Android OS in a bit... just have to deal with a bit of furry drama.

[00:40] <hacknperl> WebOS = HP Palm's mobile operating system

[00:41] <hacknperl> hmmm... I would love to be able to write webos applications in perl rather than using javascript...

[00:41] *** gbacon left
[00:42] *** QinGW joined
[00:42] <hacknperl> I'm so out of touch with the hacking world these days anyway.... 10 years ago I was in love with perl.... that was my first business... selling CGI scripts... now I want to get back into programming and I like WebOS... and I think perl would be awesome on it...

[00:42] <flussence> for a minute there I was thinking that was the same thing as WebTV... 

[00:43] <KatrinaTheLamia> people still use Palm's Mobile OS?

[00:43] <hacknperl> It's not PalmOS

[00:43] <hacknperl> It is somewhat new...

[00:43] <hacknperl> WebOS is arguably one of the nicest mobile operating systems... way better than IOS

[00:43] <hacknperl> and it is Open... not open source but the source is availaable

[00:44] *** felliott left
[00:45] <KatrinaTheLamia> okay... I am more looking at what can be done on Android OS, iPod OS?, and Windows Mobile... I never heard of WebOS... I will look into it.

[00:45] <hacknperl> This year Palm will probably be releasing a nice tablet form factor device and new smart phones... I am just wondering how hard it would be to make perl run on it... there id a plug in development kit avaiable for webos so people can easilly port games written in c++

[00:46] <colomon> There was talk of trying to get Rakudo running on the Android at YAPC:NA last year, but I think speed and memory usage need to come down a good bit before it is practical...

[00:46] <hacknperl> You never heard of it because it was so badly marketed... beleive me when you use WebOS you will fall in love... you will probably hate the hardware its on but man what i slick interface with true multitasking... and on and on...

[00:47] <KatrinaTheLamia> colomon, well, the even bigger issue is Parrot is written in C, correct? Android applications run on the JVM.

[00:48] <colomon> No, there's some sort of native interface available too.

[00:48] <colomon> Perl 5 runs there, for instance.

[00:48] <KatrinaTheLamia> The Android OS, is in actuality a framework of JVM classes and services running ontop of a Linux Kernel.

[00:48] <hacknperl> Somone was able to get Open Office running on webos... not very usable with a touch type interface but its definetly possible... so i think they had  an xwindows system running on the device ... im not really sure how they did it

[00:49] <KatrinaTheLamia> I do not know about a native interface... I am guessing Perl 5 runs on there, coupled with the Linux Kernel functionality--but I doubt you can really use it for anything interesting.

[00:49] <KatrinaTheLamia> hacknperl, I may look into WebOS.

[00:49] <colomon> I dunno, it seemed fairly interesting to me, but I got frustrated when I had difficulty getting it to talk to my GPS.  

[00:49] <flussence> POSIX is POSIX, all it might need is a libc.

[00:49] <hacknperl> Yes please do... could bring more people to perl and more people to palm

[00:50] <hacknperl> webOS is based on a windows kernel

[00:50] <colomon> But I suspect that may have been because my GPS is dodgy

[00:50] <hacknperl> i mean linux kernel

[00:50] <hacknperl> lol sorry

[00:50] <diakopter> hee

[00:50] <hacknperl> im reading too much stuff here...

[00:50] <diakopter> the stuffy stuff, it stuffs you up

[00:51] <KatrinaTheLamia> flussence, colomon: yes, but that would not be following the Android OS model of doing stuff. It does have some TIMTOWDI on Android... but that is like doing Perl 4 code in a Perl 5 workspace.

[00:51] <dalek> nqp-rx/smoke: 1ec882f | dukeleto++ | build/Makefile.in:

[00:51] <dalek> nqp-rx/smoke: Getting closer to smoking nqp-rx

[00:51] <dalek> nqp-rx/smoke: review: https://github.com/perl6/nqp-rx/commit/1ec882f32c

[00:51] <dalek> nqp-rx/smoke: 27f1ff4 | dukeleto++ | build/Makefile.in:

[00:51] <dalek> nqp-rx/smoke: Looks like we need a harness

[00:51] <dalek> nqp-rx/smoke: review: https://github.com/perl6/nqp-rx/commit/27f1ff4425

[00:51] <KatrinaTheLamia> it would be easier to just have Perl 6 target the JVM, and do stuff from that point.

[00:52] <KatrinaTheLamia> and drama is straightened up... time to work on Java Kitty... my JVM+Android dead cat thing.

[00:52] <flussence> I suspect this whole JVM thing is why google are developing Native Client...

[00:53] <flussence> sandboxed app, runs in a browser, cross compile and it runs on Android.

[00:54] <flussence> it'd solve the complaints from people not wanting to use Java anyway

[00:54] * KatrinaTheLamia does a quick summary of Web OS on wikipedia before reading real information of it.

[00:54] <hacknperl> I kind of have an idea...  WebOS apps are basically javascripts and HTML... why cant perl be compiled on it directly and ran at a lower level and then use the web browser on the device to interact with perl scripts... or just write a native webos app that acts like a web server/client with the html veiw and let it run perl scripts in the backgrpound... kind of wwhat it does now... i dont know... im so stupid with this stuff now a days... 

[00:55] <KatrinaTheLamia> you know--we have Android and Web OS both running on a Linux Kernel. It is stuff like this, that makes me suggest Windows Next will run on a Linux Kernel as well.

[00:55] <flussence> rofl

[00:55] <KatrinaTheLamia> hacknperl, well, Android OS and iPod OS both function with a lot of stuff done in HTML5... I am checking to see if there is more to it than that.

[00:55] *** colomon left
[00:55] <flussence> nah, they'd write their own kernel long before they'd give Linux that much credit...

[00:55] <KatrinaTheLamia> flussence, look into Singularity and Miranda. It is not as crazy as it sounds =P

[00:56] <flussence> I've heard of Singularity before, not the other one though

[00:57] <KatrinaTheLamia> Singularity 2.x on top of Mono on top of Linux. Now, hand that to the Marketing department."Our new Windows takes the stability and functionality of the Linux kernel, and extends it, with all the user friendly functionality users at home love. We have now marred the easy to use and love operating system Windows, with the robust and stability, many technical experts have rallied behind."

[00:58] <sbp> worked for Apple. except for the whole BSD thing

[00:58] * KatrinaTheLamia scratches her head, "I kind of have some knowledge in how to do marketing... both proper marketing, and that... which is evil marketing."

[00:59] *** felliott joined
[01:00] <KatrinaTheLamia> hacknperl, oh, hey... looking into what they are saying on Wikipedia... WebOS uses libSDL, pulseaudio, Gstreamer, libpurple and a few other standard linux elements. I will now look at the real information on developing for it.

[01:01] <sorear> KatrinaTheLamia: do you have anything actually to show for Jerl yet?

[01:03] <KatrinaTheLamia> sorear, ah... no... I kind of was dealing with being homeless.

[01:03] <KatrinaTheLamia> which I was still trying to make commits to it, while staying at the women's shelter.

[01:03] <KatrinaTheLamia> I will keep shooting stuff out on it, though...

[01:03] *** rgrau left
[01:05] <KatrinaTheLamia> seems the universe hates me... I've had to deal with Hypothermia, a maintence issue that resulted in chlorine gas flooding my apartment at regular intervals, having to deal with a crack addicted landlord and homelessness... I think most of the drama is over... and I can get some real work done on it!

[01:06] * allbery_b suggests sacrificing a young goat or too to appease the demons

[01:06] <allbery_b> two

[01:06] <dalek> nqp-rx/smoke: 3fc8dc8 | dukeleto++ | / (3 files):

[01:06] <dalek> nqp-rx/smoke: We can now make Smolder shoot 500-smoke

[01:06] <dalek> nqp-rx/smoke: review: https://github.com/perl6/nqp-rx/commit/3fc8dc82dc

[01:07] <KatrinaTheLamia> allbery_b, technically I am a demon... and a boss of specific group of demons. I should not have to appease my employees.

[01:08] <allbery_b> there's always someone above (below? :) you

[01:08] <hacknperl> so KatrinaTheLamia... do you work on perl?

[01:09] <sbp> *perl6?

[01:09] <hacknperl> http://www.webos-internals.org has tons of info on hacking this os

[01:10] <KatrinaTheLamia> hacknperl, I have been trying to work on Perl 6. I have to ask diakopter about the model 6 developing group.. as I am in a spot I can join that... I hope.

[01:10] <hacknperl> Once you have command line access to Linux, everything else is a process of installing a community standard library of Linux programs so that users have the same tools and options available to them. (For example, you can install openssh or dropbear  enabling shell access to your device.) Once this is process is  completed, pretty much anything you can do on a Linux box you can also  do on the Pre or the Pre Emulator.  

[01:10] <KatrinaTheLamia> I think I was suppose to look into that, just before I got evicted by my crack addled landlord...

[01:10] <hacknperl> cool

[01:10] <hacknperl> not cool on the eveiction

[01:10] <hacknperl> lol

[01:11] <KatrinaTheLamia> hacknperl, that was what I was thinking. You may be get away with compiling Rakudo to ARM Linux, and doing stuff with that.

[01:11] <KatrinaTheLamia> it is mostly a matter of doing the tool chain to put Parrot and Rakudo onto WebOS, if that is the case.

[01:11] <sorear> I am uninterested in hearing about your demons.  Only working code.

[01:12] <hacknperl> but the idea is to be able to access the phone functions... so would we have to write some perl modules that worked with Palms PDK?

[01:13] <KatrinaTheLamia> hacknperl, ah... that would probably work once importing C or other language code into Perl6 has been more properly defined.

[01:15] <diakopter> just port a linux kernel to javascript; that'll solve it all.

[01:15] <KatrinaTheLamia> ...

[01:15] <KatrinaTheLamia> ...

[01:15] <diakopter> ;)

[01:15] <KatrinaTheLamia> ...

[01:15] <KatrinaTheLamia> OW! OW! OW! MY BRAINS! diakopter  YOU KILLED THEM! YOU BASTARD!

[01:15] <flussence> or port Linux to a Z80, then you can run it in that JS gameboy emulator :

[01:15] <flussence> );

[01:16] <flussence> (note to self: stop missing parentheses

[01:16] <KatrinaTheLamia> flussence, you are a horrible person for even suggesting that notion.

[01:20] <flussence> (didn't someone write a haskell thing in JS? That could run pugs...)

[01:20] *** lichtkind left
[01:24] *** jaldhar joined
[01:25] <coldhead> i don't know if it's sufficiently full featured

[01:26] <coldhead> also i believe it comes with popup ads

[01:26] *** envi joined
[01:27] <KatrinaTheLamia> either way... looking more into hacknperl's question, it may be easier to just make a tool chain to compile Rakudo/Parrot onto WebOS' Linux arrangement.

[01:31] *** felliott left
[01:34] *** [particle]1 joined
[01:35] *** [particle] left
[01:38] *** felliott joined
[01:39] *** felliott left
[02:00] *** stkowski left
[02:01] *** noganex joined
[02:02] *** roen left
[02:02] *** noganex_ left
[02:05] *** colomon joined
[02:10] <dalek> sprixel: 9091af5 | diakopter++ | / (9 files):

[02:10] <dalek> sprixel: multidimensional compact arrays:

[02:10] <dalek> sprixel: their type literals (for annotations as in foo below).

[02:10] <dalek> sprixel: fixed size multidim array declarations.

[02:10] <dalek> sprixel: assignment to individual elements.

[02:10] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/9091af586c

[02:10] <dalek> sprixel: bf1002a | diakopter++ | / (9 files):

[02:10] <dalek> sprixel: enable methods to use the trampoline when called from perlesque code,

[02:10] <dalek> sprixel: to allow full method/sub recursion. Note they still work just fine when

[02:10] <dalek> sprixel: called from other CLR code (if necessary).

[02:10] <dalek> sprixel: Generate an entry point when it's emitting to disk mode.

[02:10] <dalek> sprixel: Make return types on methods optional (void).

[02:10] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/bf1002a918

[02:15] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[02:16] <dalek> sprixel: c52246b | diakopter++ | / (4 files):

[02:16] <dalek> sprixel: oops, positional indexers are separated by semis

[02:16] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/c52246bafd

[02:21] *** cdarroch left
[02:22] *** felliott joined
[02:24] <diakopter> I could've sworn github enabled searching of source files

[02:24] <diakopter> ah well, I have a local clone anyway

[02:24] *** roen joined
[02:44] *** ab5tract left
[02:47] *** flussence_ joined
[02:49] *** flussence left
[02:49] *** molaf_ joined
[02:52] *** molaf__ left
[02:55] *** ab5tract joined
[03:00] <dalek> sprixel: f109344 | diakopter++ | sprixel/codegen/RunSharp/Operands/NewArray.cs:

[03:00] <dalek> sprixel: workaround mono oddness in Module implicit !=

[03:00] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/f1093444b7

[03:06] *** drbean left
[03:06] <dalek> sprixel: 9d9cc9a | diakopter++ | sprixel/src/ (2 files):

[03:06] <dalek> sprixel: fix

[03:06] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/9d9cc9a80d

[03:07] <diakopter> perlesque: my $a=4; my $b=5; my int @blah[$a;$b]; @blah[2;3] = 4;  say(@blah[2;3]); sub foo(Array[int;int] @bar) { say(@bar.Length); say(@bar.GetType) }; foo(@blah);

[03:07] <p6eval> perlesque: OUTPUT«4␤20␤System.Int32[,]␤»

[03:07] <diakopter> there we go :)

[03:09] <diakopter> perlesque: my $a=4; my $b=5; my int @blah[$a;$b;4;4;4]; @blah[2;3;3;3;3] = 4;  say(@blah[2;3;3;3;3]); sub foo(Array[int;int;int;int;int] @bar) { say(@bar.Length); say(@bar.GetType) }; foo(@blah);

[03:09] <p6eval> perlesque: OUTPUT«4␤1280␤System.Int32[,,,,]␤»

[03:09] <diakopter> heh, 1280 ints

[03:10] *** gbacon joined
[03:13] *** drbean joined
[03:17] *** Vlavv left
[03:26] *** satyavvd joined
[03:33] *** qw3rty joined
[03:34] *** qw3rty left
[03:43] *** ashleydev joined
[03:43] *** ashleydev left
[03:44] *** ashleydev joined
[03:49] *** ab5tract left
[03:59] *** GinoMan_ joined
[04:00] *** GinoMan_ left
[04:03] *** dwhipp joined
[04:04] <dwhipp> rakudo: ($^a for 1..3)

[04:04] <p6eval> rakudo 337f19:  ( no output )

[04:04] <dwhipp> rakudo: ($^a for 1..3).perl.say

[04:04] <p6eval> rakudo 337f19:  ( no output )

[04:04] <dwhipp> rakudo: say ($^a for 1..3).perl

[04:04] <p6eval> rakudo 337f19:  ( no output )

[04:04] <dwhipp> rakudo: say ($_ for 1..3).perl

[04:04] <p6eval> rakudo 337f19:  ( no output )

[04:04] <dwhipp> rakudo: say ([$_ for 1..3]).perl

[04:04] <p6eval> rakudo 337f19:  ( no output )

[04:04] <dwhipp> rakudo: say ([$_ for 1..3])

[04:04] <p6eval> rakudo 337f19:  ( no output )

[04:05] <dwhipp> perl6: say [$_ for 1..3].perl

[04:05] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "[$"␤    expecting bare or pointy block construct, ":", identifier or operator␤    at /tmp/YWE1a6C3cj line 1, column 5␤»

[04:05] <p6eval> ..rakudo 337f19:  ( no output )

[04:05] <p6eval> ..niecza v1-91-ga8291b0: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unhandled statement modifier for at /tmp/h8e2SxFz71 line 1:␤------> [32msay [$_ for 1..3[33m⏏[31m].perl[0m␤Check failed␤»

[04:05] *** GinoMan_ joined
[04:06] <dwhipp> are list comprehensions expected to work? I know I've seen them in a rakudo-star release at some point

[04:06] *** REPLeffect left
[04:06] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_basics_tablet

[04:07] *** REPLeffect joined
[04:08] *** GinoMan_ is now known as GinoMan

[04:09] <dwhipp> actually, I just tried the same code on try.rakudo.org -- works there!

[04:09] <dwhipp> The question I really wanted to ask here was about placeholder variables in list comprehensions:

[04:11] <dwhipp> is ($^a for 1..3) legal, or can only $_ be used? (if so, should use of $^a be reported as an error?)

[04:11] <sorear> the answer is in S02, S03, or S04

[04:14] *** shi left
[04:16] <dwhipp> Ah, S04, thanks. Most of the examples only use $_, but there is one towards the end:

[04:16] <dwhipp> rakudo: @names = ({ "$^name.$^num" } for 'a'..'zzz' X 1..100); say @names.perl

[04:16] <p6eval> rakudo 337f19:  ( no output )

[04:16] <dwhipp> perhaps a rakudobug is needed

[04:17] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_basics_tablet

[04:19] *** GinoMan left
[04:19] <sorear> dwhipp: (no output)

[04:20] *** GinoMan joined
[04:20] <sorear> dwhipp: that means that p6eval isn't working

[04:20] <sorear> nothinhg to do with Rakudo bugs

[04:20] <dwhipp> Investigated further: seems placeholders can only used if you include the closure. So only $_ is permitted, but is automatically unpacked by the closure

[04:21] <dwhipp> sorear: thanks: I've opened a separate window running try.rakudo.org. So I can see a more reasonable behavior there

[04:22] <PerlJam> dwhipp: if you don't have the closure, how is perl to know the placeholder isn't for the surrounding block? 

[04:23] <dwhipp> Though still an LTA error when you omit the closure:

[04:23] <dwhipp> my @names = ( "$^name.$^num" for 'a'..'c' X 1..2); say @names.perl

[04:23] <dwhipp> Null PMC access in get_string() 

[04:23] <PerlJam> yuck.

[04:23] <PerlJam> I hate those errors.

[04:23] *** Su-Shee_ joined
[04:24] <dwhipp> To answer the "how to you know" question ... not sure. I only came to list comprehension recently, as a side effect of learning python.

[04:25] <dwhipp> Perl6 seems clumsy in comparison, when probably means either that I'm missing something, or that there's scope for improvement

[04:25] <PerlJam> dwhipp: have you done dict comprehensions yet?

[04:26] <PerlJam> dwhipp: Perl may be a tad "clumsy" compared to python, but the difference is that python relies on a syntactic special case and perl relies on a general principle that has applications elsewhere.

[04:26] <PerlJam> (in the case of list comprehensions)

[04:27] *** Su-Shee left
[04:28] <dwhipp> Yeah. Its just that list comprehensions is the first thing that I found in Python that made me think "wow, this actually is better than perl"

[04:28] <dwhipp> Perhaps because python community doesn't like multi-line lambdas

[04:29] <dwhipp> not sure about dict comprehension: my python intuition didn't work first time, so I need to google it

[04:31] *** gbacon left
[04:31] <PerlJam> Are you using python 3?

[04:32] <dwhipp> In terms of the general principle in perl, yes the use of closures for placeholders is understandable ... I even realized how to include an "if" modifier that uses those placeholders (by adding it inside the closure)

[04:32] <dwhipp> No, I'm using python 2.7.

[04:33] <dwhipp> Starting new $job next week, and they told me they use 2.6

[04:33] <PerlJam> ah, dict comprehensions were rejected for python 2.x but got added to python 3

[04:34] <PerlJam> dwhipp: What will you be doing with python?

[04:34] <dwhipp> I do wonder if there are some lessons to by gained from the python3 transition for the perl community

[04:36] *** sftp left
[04:36] <dwhipp> What will I be doing? Probably need to be careful when I say. $job is at Google

[04:36] <PerlJam> cool.

[04:37] <PerlJam> congrats on the job then (I assume you *want* to be working at Google rather than have no other options  ;-)

[04:38] <dwhipp> It is hard to imagine being qualified for a job there without having other options ;).

[04:39] *** dylan_ joined
[04:41] <dwhipp> Any idea how to refer to an outer $_ when you didn't create a new scope? i.e. ( ($_ + $OUTER::_ for 1..2) for 1..2) -- not that that coding style seems like a good idea

[04:44] <cotto> seen jnthn

[04:44] <dwhipp> (the code I showed there gives a "Null PMC access in type()" error)

[04:44] <aloha> jnthn was last seen in #perl6 2 days 19 hours ago joining the channel.

[04:44] *** coldhead left
[04:44] <PerlJam> I don't think that works as you would expect even if it didn't die a horrible death.

[04:46] <dwhipp> I'm pretty sure you're right: I think I'd need some curlies there for OUTER to be meaningful.

[04:46] <PerlJam> yep

[04:49] <dwhipp> maybe ({[$_ + $OUTER::_ for 1..3]} for 1..2).perl -- though that gives the Null PMC access error.

[04:52] <sorear> dwhipp: without a new scope, there is no outer $_

[04:52] <dwhipp> Doesn't the closure there provide the scope?

[04:52] <sorear> 22:41 < dwhipp> Any idea how to refer to an outer $_ when you didn't create a  new scope? i.e. ( ($_ + $OUTER::_ for 1..2) for 1..2) -- not  that that coding style seems like a good idea

[04:52] <sorear> What closure?

[04:53] <dwhipp> My second attempt: ({[$_ + $OUTER::_ for 1..3]} for 1..2).perl

[04:56] <PerlJam> dwhipp: what do you want in the end?  A single list containing (2,3,4,3,4,5)   ?

[04:57] <PerlJam> er, ... but done correctly :)

[04:58] <PerlJam> Hmm.  I must be tired

[04:58] <dwhipp> In a way I don't really mind: either one flat list or else a 2d list: the latter seems more useful, and could be flattened to the former

[04:59] <dwhipp> (yes, this is easy if I just use a "map")

[04:59] <PerlJam> Well, I was thinking about X+ actually 

[05:00] <dwhipp> more than one day to do it.

[05:00] <PerlJam> aye.

[05:00] <dwhipp> But if P6 is to have list comprehensions it'd be good if they feel like first class citizens.

[05:01] <plobsing> dwhipp: explicit (scope) is better than implicit

[05:02] <dwhipp> What I'm really trying to do is figure out if it is useful to use multiple statement modifiers within a single expression with nested parentheses.

[05:03] <dwhipp> It's legal syntax, but seems less useful than perhaps it could be

[05:05] <PerlJam> rakudo: (($_ + * for 1..3) for 1..2).perl.say

[05:05] <p6eval> rakudo 337f19:  ( no output )

[05:06] <PerlJam> hmm

[05:06] <dwhipp> rakudo: say "hello"

[05:06] <p6eval> rakudo 337f19:  ( no output )

[05:06] *** dylan_ left
[05:06] <PerlJam> rakudo: (($_ + * for 1..3) for 1..2).eager.perl.say

[05:06] <p6eval> rakudo 337f19:  ( no output )

[05:06] <PerlJam> oh

[05:06] <PerlJam> anyhow ... 

[05:06] <PerlJam> #!/usr/bin/env perl6

[05:06] <PerlJam> use MONKEY_TYPING;

[05:06] <PerlJam> augment class Cool {

[05:06] <PerlJam>     our Str multi method indent ($str: $steps) is export {

[05:06] <PerlJam>         my $spaces = ' ' x $steps;

[05:06] <PerlJam>         my $copy = ~$str;

[05:06] <PerlJam>         return $steps < 0 ?? $copy.subst(/^^ \s ** { 0..4 } /, '|', :g)

[05:06] <PerlJam>                           !! $copy.subst(/^^/, { $spaces }, :g);

[05:07] <PerlJam>     }

[05:07] <PerlJam> }

[05:07] <PerlJam> my $str1 = "foo

[05:07] <PerlJam> bar

[05:07] <PerlJam> baz";

[05:07] <PerlJam> say $str1;

[05:07] <PerlJam> say $str1.indent(4);

[05:07] <PerlJam> say $str1;

[05:07] <PerlJam> my $str2 = "    foo

[05:07] <snarkyboojum> errr

[05:07] <PerlJam>   bar

[05:07] <PerlJam>     baz

[05:07] <PerlJam>        blat

[05:07] <PerlJam>     blah

[05:07] <PerlJam>      woot

[05:07] <PerlJam>     foo";

[05:07] <PerlJam> say '=' x 50;

[05:07] <PerlJam> say $str2;

[05:07] <PerlJam> say $str2.indent(-4);

[05:07] <PerlJam> say $str2;

[05:07] <PerlJam> say '=' x 50;

[05:07] *** sftp joined
[05:07] <PerlJam> my $x = 3.1415;

[05:07] <PerlJam> say $x.indent(4);

[05:07] <PerlJam> crap

[05:07] <PerlJam> blah ...  Those buffers are long-lived ... that was my playing with Str.indent from about 7 hours ago.

[05:08] <PerlJam> dwhipp: on my rakudo here, I get this:

[05:08] <PerlJam> > ($_+* for 1..3) for 1..2

[05:08] <PerlJam> 2 3 4 3 4 5

[05:08] <diakopter> heh

[05:08] <PerlJam> The use of the Whatever provides an implicit closure

[05:10] *** felliott left
[05:11] <dwhipp> Yes, sort of cool, though a little bit of a special case, in that it doesn't scale to a third level of nesting

[05:11] <diakopter> niecza: say (($_+* for 1..3) for 1..2) for 3..5

[05:11] <p6eval> niecza v1-91-ga8291b0: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unhandled statement modifier for at /tmp/HvQsozD06u line 1:␤------> [32msay (($_+* for 1..3[33m⏏[31m) for 1..2) for 3..5[0m␤Unhandled statement modifier for at /tmp/HvQsozD06u line 1:␤------> [32msay (($_+* for 1..3) for

[05:11] <p6eval> ..1..2[33m⏏[31m) for 3..5…

[05:11] <diakopter> std: say (($_+* for 1..3) for 1..2) for 3..5

[05:11] <p6eval> std 625303c: OUTPUT«ok 00:01 121m␤»

[05:11] <diakopter> odd

[05:14] <PerlJam> dwhipp: There's more than one way to do it, but some ways are encouraged by making it a tad onerous to try other ways.   :-)  This is one of those instances where you really want to name your parameters rather use implicit names

[05:15] <dwhipp> Yes, I really want to name my variables ... but no way to do that with statement modifiers

[05:16] <PerlJam> dwhipp: yet more subtle encouragement :)

[05:18] <cotto> Does anyone know nom well enough to explain what KnowHOW is?

[05:18] <PerlJam> cotto: jnthn  ;)

[05:18] *** ab5tract joined
[05:18] <cotto> correction:

[05:18] <cotto> Does anyone here know nom well enough to explain what KnowHOW is?

[05:19] <cotto> ;]

[05:21] <PerlJam> I could guess if that would help a little

[05:21] <cotto> sure

[05:21] *** roen left
[05:22] <PerlJam> I would guess it's the meta-class for building objects and classes and such

[05:22] <dwhipp> Ah, need to learn to not use the python (or math in general) statement ordering: in perl I can put the domain in front of the expression: ( for 1..2 -> $a {( for 3..4 -> $b { $a*10+$b})}).perl ... 

[05:22] <cotto> that's plausible

[05:25] <dwhipp> And now I realize I can do: ( -> $a { -> $b { $a*10+$b } for 1..2 } for 3..4 )

[05:26] <dwhipp> Though that's asking for trouble due to the reversal of the variable<->list association

[05:27] <PerlJam> cotto: Maybe http://irclog.perlgeek.de/perl6/2010-09-17 helps?  (search for KnowHOW)

[05:28] <colomon> rakudo: (*+* for 1..3) for 1..2

[05:28] <p6eval> rakudo 337f19: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in <anon> at line 22:/tmp/R4cLOfqmHl␤  in <anon> at line 1␤  in main program body at line 1␤»

[05:28] <dwhipp> As PerlJam's been trying to tell me, there's probably not a readable/maintainable way to do multiple list comprehension in a single expression -- so best use one of the other approaches for anything that gets complex

[05:29] <cotto> PerlJam, thanks.  that looks helpful

[05:34] *** [particle]1 left
[05:39] <dwhipp> rakudo: ({{ $^OUTER::a ~ $^a } for 1..2 } for 3..4 ).perl.say

[05:39] <p6eval> rakudo 337f19: OUTPUT«("12", "12")␤»

[05:49] *** dwhipp left
[05:49] *** f00li5h is now known as TheF00li5h

[05:51] *** yarp joined
[05:55] *** felliott joined
[05:58] <diakopter> rakudo's alive again I guess

[05:58] <PerlJam> rakudo: say "alive"

[05:58] <p6eval> rakudo 337f19: OUTPUT«alive␤»

[05:59] *** felliott left
[06:16] <dalek> specs: b046dd9 | diakopter++ | S02-bits.pod:

[06:16] <dalek> specs: minor grammaro in S02

[06:16] <dalek> specs: review: https://github.com/perl6/specs/commit/b046dd9332

[06:32] *** Vlavv_ joined
[06:35] *** TheF00li5h is now known as f00li5h

[06:39] *** ashleydev left
[06:45] *** apejens joined
[06:50] *** [particle] joined
[06:54] *** siak joined
[06:55] *** wtw joined
[06:57] *** cotto left
[07:00] *** rhr left
[07:04] *** cotto joined
[07:07] *** lopaway is now known as lopnor

[07:11] *** cotto left
[07:12] *** kaare_ joined
[07:22] *** Eevee left
[07:23] *** Eevee joined
[07:27] *** icwiener joined
[07:30] *** mkramer1 left
[07:30] *** p6eval left
[07:31] *** mkramer joined
[07:31] *** _twitch joined
[07:31] *** p6eval joined
[07:31] *** ChanServ sets mode: +v p6eval

[07:43] *** zby_home_ joined
[07:45] *** kanishka joined
[07:45] *** kanishka left
[07:53] *** redicaps joined
[07:53] *** jhuni joined
[08:01] *** daxim joined
[08:02] *** MayDaniel joined
[08:08] *** MayDaniel left
[08:13] *** yarp left
[08:17] *** Su-Shee_ is now known as Su-Shee

[08:26] *** Maksim_ joined
[08:33] *** kanishka joined
[08:51] <dalek> niecza: 349ade7 | sorear++ | v6/ (2 files):

[08:51] <dalek> niecza: [v6] Finish translation of Niecza::Actions

[08:51] <dalek> niecza: review: https://github.com/sorear/niecza/commit/349ade75b1

[08:55] * TimToady is home

[08:58] <sorear> wb TimToady

[08:58] <sorear> home = #perl6 right? :D

[08:59] <moritz_> "home is where my Perl 6 is"

[09:00] *** snearch joined
[09:01] <Su-Shee> I have a perl 6 in every home. ;)

[09:04] *** justatheory left
[09:12] *** ab5tract left
[09:25] *** hanekomu joined
[09:26] *** snearch left
[09:28] *** flussence_ is now known as flussence

[09:31] <dalek> niecza: e6a7b30 | sorear++ | v6/ (2 files):

[09:31] <dalek> niecza: [v6] Pass filename/modtime through Unit

[09:31] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e6a7b30c99

[09:31] <dalek> niecza: bdde84c | sorear++ | / (2 files):

[09:31] <dalek> niecza: Merge back aggregate improvements from tryfile

[09:31] <dalek> niecza: review: https://github.com/sorear/niecza/commit/bdde84c048

[09:31] <dalek> niecza: f82d33b | sorear++ | v6/ (2 files):

[09:31] <dalek> niecza: [v6] Translate Niecza::Grammar

[09:31] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f82d33b388

[09:31] * sorear out.

[09:31] *** muixirt joined
[09:34] *** masak joined
[09:36] <masak> oh hai, #perl6

[09:36] <flussence> perl6: (1..2 X+ 1..3).perl.say

[09:36] <p6eval> niecza v1-92-g349ade7: OUTPUT«[31m===[0mSORRY![31m===[0m␤Not a HASH reference at /home/p6eval/niecza/src/Niecza/Actions.pm line 1194.␤Check failed␤»

[09:36] <p6eval> ..rakudo 337f19: OUTPUT«(2, 3, 4, 3, 4, 5)␤»

[09:36] <p6eval> ..pugs: OUTPUT«((1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3))␤»

[09:37] <masak> niecza: 1..2 X+ 1..3

[09:37] <p6eval> niecza v1-92-g349ade7: OUTPUT«[31m===[0mSORRY![31m===[0m␤Not a HASH reference at /home/p6eval/niecza/src/Niecza/Actions.pm line 1194.␤Check failed␤»

[09:37] <masak> niecza: 1 X+ 1

[09:37] <p6eval> niecza v1-92-g349ade7: OUTPUT«[31m===[0mSORRY![31m===[0m␤Not a HASH reference at /home/p6eval/niecza/src/Niecza/Actions.pm line 1194.␤Check failed␤»

[09:37] *** dakkar joined
[09:37] * masak submits nieczabug

[09:38] <flussence> niecza: 1 X 1

[09:38] <p6eval> niecza v1-92-g349ade7: OUTPUT«␤Unhandled Exception: System.Exception: Unable to find lexical &infix:<X> in mainline␤  at Niecza.CLRBackend.NamProcessor.ResolveLex (System.String name, System.Int32& uplevel, Boolean core) [0x00000] in <filename unknown>:0 ␤  at

[09:38] <p6eval> ..Niecza.CLRBackend.NamProcessor.RawAccessLex (System…

[09:38] <flussence> hm

[09:38] <masak> we'll throw that one in as well.

[09:38] <masak> it's probably a TODO.

[09:39] <moritz_> niecza: say 1 Z 1

[09:39] <p6eval> niecza v1-92-g349ade7: OUTPUT«␤Unhandled Exception: System.Exception: Unable to find lexical &infix:<Z> in mainline␤  at Niecza.CLRBackend.NamProcessor.ResolveLex (System.String name, System.Int32& uplevel, Boolean core) [0x00000] in <filename unknown>:0 ␤  at

[09:39] <p6eval> ..Niecza.CLRBackend.NamProcessor.RawAccessLex (System…

[09:39] <moritz_> niecza: say 1 R+ 1

[09:39] <p6eval> niecza v1-92-g349ade7: OUTPUT«␤Unhandled Exception: System.Exception: Unable to find lexical &reverseop in mainline␤  at Niecza.CLRBackend.NamProcessor.ResolveLex (System.String name, System.Int32& uplevel, Boolean core) [0x00000] in <filename unknown>:0 ␤  at

[09:39] <p6eval> ..Niecza.CLRBackend.NamProcessor.RawAccessLex (System…

[09:45] *** kensanata joined
[09:45] <muixirt> moritz_++ thanks for bisect-parrot.pl, hmm ccache is a prerequisite

[09:47] <moritz_> muixirt: it could easily be removed

[09:48] <muixirt> does it help? 

[09:56] <muixirt> moritz_: it assumes "$rakudo_dir/parrot"  exists and it builds parrot/rakudo and runs the testfile once and than exits, right?

[09:58] <muixirt> moritz_: I'm not sure how to use the script for find what version of rakudo/parrot caused some bug

[10:00] <muixirt> something like git bisect run tools/bisect-parrot.pl I guess ... well only for experts :-)

[10:00] *** cotto joined
[10:01] <moritz_> muixirt: did you read the commit message?

[10:01] <moritz_> it can only be used to bisect parrot

[10:01] <moritz_> and yes, you use git run $script $testfile

[10:01] <moritz_> sorry, occupied with $other_job atm, and a bit terse

[10:02] <muixirt> commit message? oops :-)

[10:02] *** QinGW left
[10:04] *** BaggioKwok joined
[10:05] <muixirt> assuming that i'm not the only person that's clueless it may be useful to put the info of the commit msg into the USAGE msg

[10:06] <moritz_> aye

[10:07] <moritz_> as I wrote (in the commit msg :-) it's a very early draft

[10:08] <muixirt> and is it really git bisect run ../tools/bisect-parrot.pl test-file.t

[10:08] <muixirt> not git bisect run tools/bisect-parrot.pl test-file.t

[10:09] <muixirt> assuming execute bit is set

[10:09] <muixirt> (didn't read man git-bisect)

[10:10] *** redicaps left
[10:13] *** BaggioKwok left
[10:24] *** Maksim_ left
[10:29] <apejens> are there any good tools for helping write a grammar? Can I for instance dump the syntax tree easily?

[10:29] <masak> apejens: a very good question.

[10:30] <masak> apejens: there is .perl, but it's a bit too informative sometimes.

[10:30] <masak> apejens: my best tip is to develop your grammar in very small increments, and using tests.

[10:31] *** Chillance joined
[10:31] *** siak left
[10:32] <masak> apejens: there are also debugging capabilities built into grammars.

[10:32] <masak> apejens: moritz_++ has a good blog post with all the most common tips and tricks. I'll try to find it for you.

[10:34] <masak> apejens: http://perlgeek.de/en/article/debug-a-perl-6-grammar

[10:38] *** kanishka left
[10:43] *** satyavvd left
[10:50] *** satyavvd joined
[10:55] *** Maksim_ joined
[10:58] *** icwiener left
[10:58] <jnthn> o/ folks

[10:58] * jnthn is home

[10:59] <jnthn> ...and looking forward to things being more "normal" again for a while. :)

[11:00] <lopnor> hello, i'm banned from http://rakudo.org/

[11:00] <lopnor> what's happend?

[11:01] <lopnor> 403 with "Sorry, 122.1.9.166 has been banned." it's my ip.

[11:06] *** kanishka joined
[11:08] *** wamba joined
[11:09] <colomon> jnthn: \o/

[11:12] <jnthn> o/ colomon 

[11:12] <jnthn> How's things?

[11:12] <colomon> eh, insane-ish

[11:13] <colomon> my wife went to the emergency room last night with (it turned out) gallstones.

[11:13] <colomon> she's been referred to a surgeon as a result.

[11:14] <colomon> It's at least another four weeks before I'm supposed to be able to pick up our little guy, as a result of my own surgery last week.

[11:15] <colomon> as a result, at the moment, she can't drive (lots of painkillers) and I can't comfortably put on jeans or pick anything up.

[11:15] <colomon> the two of us combined can do almost anything a normal person can!  :)

[11:16] <jnthn> Ouch!!!

[11:16] <jnthn> I wish you both a swift recovery.

[11:17] <colomon> thanks.

[11:18] <muixirt> gallstones? Thought that be only a problem for elderly people...

[11:18] <colomon> apparently not.

[11:20] <colomon> her dad had his gallbladder out when he was 40, and a grandparent on both sides somewhere in the 30-50 y.o. range.

[11:21] *** agentzh joined
[11:22] *** drith joined
[11:23] *** lopnor is now known as lopaway

[11:24] <Maksim_> Are there people in p6 community working on a tk or qt modules for p6?

[11:24] *** lopaway is now known as lopnor

[11:26] <tadzik> there was this GUII idea, like DBI is for databases

[11:26] <tadzik> I feel like a blogpost, so maybe the idea will get some attention

[11:29] <apejens> masak: ahh, thanks

[11:29] *** mj41 left
[11:30] <masak> apejens: the reason I thought yours was a good question is that I could definitely see a use for a tree-of-matches form of output you ask about. someone ought to write one.

[11:30] <apejens> mhm

[11:30] <apejens> :p

[11:31] <apejens> but thanks for the moritz post, looks like a great place to start :)

[11:31] <jnthn> lolitsmasak!

[11:31] <masak> I also think there are far too few tools for giving information about a grammar parsing *failure*. the only options available to the user right now is debugging and scowling.

[11:31] <masak> lolitsjnthn!

[11:32] <masak> jnthn: home already?

[11:32] <jnthn> masak: Yes. :)

[11:32] <masak> jnthn: welcome to Lund! :)

[11:32] <Maksim_> tadzik: oh I see.. I thought there is already some work going on ok a GUI module.. I guess it is too early.. thanks :)

[11:32] <jnthn> masak: It has snow AND sunshine! \o/

[11:32] <masak> :)

[11:32] <Maksim_> tadzik: s/ok//;

[11:35] *** lopnor is now known as lopaway

[11:37] <colomon> http://imgs.xkcd.com/comics/good_code.png

[11:40] *** Intensity left
[11:40] *** redicaps joined
[11:42] <apejens> has anyone written a grammar for something like textile or markdown?

[11:43] <tadzik> well volunteered! :)

[11:43] <tadzik> I have a grammar for sexpcode

[11:43] <tadzik> almost complete even

[11:43] *** Chillance left
[11:44] <masak> apejens: yes, there is a markdown grammar in parrot. I'm writing one for niecza now.

[11:45] <flussence> rakudo: my @lines = ["   quack"]; @lines ~~ s/^ ' ' ** 2//; say @lines.join.perl

[11:45] <p6eval> rakudo 337f19: OUTPUT«" quack"␤»

[11:46] <apejens> masak: in the parrot source tree?

[11:46] <apejens> and niecza?

[11:46] <flussence> I'm pretty sure this regex's identical to the code I'm running, yet in there it only removes one space :/

[11:47] <flussence> oh. *this* is identical:

[11:47] <apejens> masak: ahh, https://github.com/fperrad/markdown/blob/050f23476e2c4a86378bbaf87e315224de0dd454/markdown/grammar.pg I presume?

[11:47] <flussence> rakudo: my $outdent = 2; my @lines = ["   quack"]; @lines ~~ s/^ ' ' ** $outdent//; say @lines.join.perl

[11:47] <p6eval> rakudo 337f19: OUTPUT«"  quack"␤»

[11:47] <masak> apejens: yes, in the parrot source tree somewhere.

[11:47] <masak> apejens: my niecza code is not public yet, but OTOH I haven't gotten very far.

[11:48] *** gimix joined
[11:49] <flussence> (I guess the {}s around **{$outdent} are required there...)

[11:50] <masak> shouldn't be, I think.

[11:50] <tadzik> oh, that could be moved to nqp

[11:50] <tadzik> (markdown)

[11:50] <flussence> It does behave differently for some reason...

[11:50] <flussence> rakudo: my $a = 2; my $b = '  b'; $b ~~ s/' ' ** {$a}//; say $b.perl

[11:50] <p6eval> rakudo 337f19: OUTPUT«"b"␤»

[11:51] <flussence> without { }, it evaluates $a as 1 every time.

[11:51] <flussence> wonder if that's a bug...

[11:51] <masak> a TODO bug, I'd say.

[11:51] <masak> I think we have something like that in RT already.

[11:52] <flussence> ok.

[11:52] <tadzik> RT is full of mess :/

[11:52] <tadzik> there are dozens of fixed, but opened bugs

[11:52] <apejens> what does the . mean in <.somerule>?

[11:53] <masak> apejens: it means "call, but don't capture"

[11:53] <tadzik> do not call actions for this one, methinks

[11:54] <tadzik> ah, no. What masak says, yes

[11:54] <masak> no, it has nothing to do with actions.

[11:54] <masak> as far as I know.

[11:54] <apejens> ahh, thanks

[11:56] <apejens> and {*} ?

[11:58] <tadzik> that's deprecated

[11:58] <tadzik> it means "call the action method now"

[12:00] *** mj41 joined
[12:11] *** Maksim_ left
[12:12] <masak> nowadays, actions are called upon rule completion.

[12:20] <masak> (which was where the explicit {*} markers were usually located anyway)

[12:21] <tadzik> there are those tricky {*} #= foobar thingies

[12:23] <moritz_> they just pass 'foobar' as second argument to the action method

[12:24] <tadzik> yeah

[12:24] <moritz_> nowadays we typically set a dynamic variable in the regex instead

[12:24] *** GinoMan left
[12:24] <tadzik> so $<foobar>=[ blah blah ]

[12:25] <moritz_> :my $*BRANCH-TAKEN = 'foo';  or so

[12:25] <moritz_> tadzik: that's a capture, not a dynamic variable

[12:25] <tadzik> oh, right

[12:26] *** kfo_ joined
[12:27] *** kanishka left
[12:27] *** gimix left
[12:29] *** kfo left
[12:31] *** agentzh left
[12:34] *** satyavvd left
[12:44] *** kanishka joined
[12:48] *** hanekomu left
[12:49] *** fIorz joined
[12:49] *** florz left
[12:50] *** dsp_ left
[12:52] *** felliott joined
[12:54] *** jhuni left
[12:58] *** hanekomu joined
[13:05] *** WonTu joined
[13:05] *** WonTu left
[13:07] *** dsp_ joined
[13:08] <takadonet> morning all

[13:12] <colomon> o/

[13:16] *** roen joined
[13:17] *** noganex left
[13:20] *** MayDaniel joined
[13:20] <masak> takadonet: \o

[13:20] <dalek> rakudo: 1037fc1 | KodiB++ | src/Perl6/Actions.pm:

[13:20] <dalek> rakudo: [Perl6/Actions] Eliminated $MAX_PERL_VERSION per tadzik++.

[13:20] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/1037fc13b1

[13:22] *** ashleydev joined
[13:28] <felliott> hello

[13:29] <takadonet> felliott: hello

[13:29] <felliott> I was looking at some of the xor bugs and hoping I could solve them, but it looks like one of them was fixed already.

[13:29] <felliott> thundergnat++ implemented [^^]  back in early Decemebr, but I think the patch fell by the wayside.

[13:30] <felliott> His patch is here: https://gist.github.com/731232

[13:30] <apejens> the latest rakudo-star needs a not-yet-released parrot?

[13:30] <felliott> and the discussion was here: http://irclog.perlgeek.de/perl6/2010-12-07#i_3063248

[13:31] <felliott> Is there was anything I could do to help get that applied?

[13:32] <felliott> I've run the patch against the spectests and it didn't cause any regressions.

[13:33] <moritz_> apejens: it usually requires the last released parrot

[13:33] <apejens> last supported, or released?

[13:34] <moritz_> apejens: last released

[13:34] <moritz_> felliott: the patch doesn't apply here

[13:35] <moritz_> felliott: if you supply one that's generated with `git format-patch` I'll happily apply

[13:35] <felliott> ?  Hrm, I haven't updated my rakudo in a few days, let me try again.

[13:35] <felliott> Okay, shall do. Thanks!

[13:35] <moritz_> just git pull --rebase

[13:35] <moritz_> and then   git format-patch HEAD^

[13:36] *** MayDaniel left
[13:37] *** noganex joined
[13:38] <felliott> mortiz_:  should I email or nopaste?

[13:39] <moritz_> felliott: nopaste is fine, as long as you don't wrap any lines

[13:40] <felliott> moritz_:  https://gist.github.com/769459

[13:42] * moritz_ applies and runs a spectests

[13:42] *** pmurias joined
[13:45] <pmichaud> patch rejected

[13:46] <pmichaud> the patch removes the short-circuit capabilities of the existing ^^

[13:46] <pmichaud> (at least it does as I read it)

[13:47] <pmichaud> also the [^^] operator won't work for an empty list

[13:47] <moritz_> in what way does ^^ short-circuit now? as a list?

[13:47] <moritz_> rakudo: 1 ^^ 1 ^^ (say 3)

[13:47] <p6eval> rakudo 337f19:  ( no output )

[13:47] <pmichaud> rakudo:    say (1 ^^ 1 ^^ 1 ^^ say('don't see this')

[13:47] <moritz_> rakudo: 1 ^^  (say 3)

[13:48] <p6eval> rakudo 337f19: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 22␤»

[13:48] <p6eval> rakudo 337f19: OUTPUT«3␤»

[13:48] <pmichaud> (mine was the error)

[13:48] <pmichaud> rakudo:  1 ^^ (say 3)

[13:48] <moritz_> yes, ' in '-quoted string

[13:48] <p6eval> rakudo 337f19: OUTPUT«3␤»

[13:48] <pmichaud> rakudo:  1 ^^ 1 ^^ (say 3)

[13:48] <p6eval> rakudo 337f19:  ( no output )

[13:49] <pmichaud> ^^ short-circuits after observing the second true value

[13:50] <moritz_> and the patch changes that. Confirmed.

[13:52] <takadonet> How do you do multiline strings in p6?

[13:52] <flussence> what, like heredocs?

[13:53] <jnthn> You can split the contents of a '...' and "..." over multiple lines too, fwiw.

[13:53] <takadonet> p5: perl <<EOF ......... EOF

[13:53] <takadonet> s perl/print/

[13:53] <apejens> can I from Match.perl on the string "" distinguish between a failed match and successful match?

[13:54] <jnthn> bbi15

[13:54] <moritz_> rakudo: say ('' ~~ /^/).perl

[13:54] <p6eval> rakudo 337f19: OUTPUT«Match.new(␤ from => 0,␤ orig => "",␤ to   => 0,␤)␤»

[13:54] <flussence> takadonet: "q:to'EOF'", S02:260

[13:54] <moritz_> rakudo: say ('' ~~ /^foo/).perl

[13:54] <p6eval> rakudo 337f19: OUTPUT«Match.new(␤ from => 1,␤ orig => "",␤ to   => -3,␤)␤»

[13:54] <masak> takadonet: those are called heredocs.

[13:54] <takadonet> flussence: thanks

[13:55] <moritz_> apejens: in rakudo, a failed Match has .to < .from

[13:55] <apejens> ok

[13:55] <pmichaud> I doubt that's spec, though.

[13:55] <pmichaud> Don't know what the spec would say about it.

[13:55] <moritz_> it just .Bool's to False

[13:55] <flussence> .oO(.indent will make heredocs readable again!)

[13:55] *** dsp_ left
[13:57] *** hanekomu left
[13:57] <colomon> aren't heredocs supposed to auto-unindent in p6?

[13:57] *** dsp_ joined
[13:58] <moritz_> they are

[13:58] <colomon> I've been waiting for that feature to work for five or six years now.  :)

[13:58] *** GinoMan joined
[13:59] <colomon> sounds stupid, but that was one of the things that excited me most about perl 6 when I first learned of it.

[13:59] *** GinoMan left
[13:59] *** GinoMan joined
[14:00] <masak> relying on .to < .from is EVIL, short-sighted, and implementation-dependent.

[14:00] <masak> use ?$match instead.

[14:00] <moritz_> right

[14:00] <flussence> and not perl6ish!

[14:00] <moritz_> if you ?eval($/.perl) you'll get the correct result too

[14:00] <apejens> yesyes, I'm not relying

[14:00] <apejens> I was just dumping .perl during testing

[14:00] <moritz_> so it's not a .perl bug, strictly speaking

[14:00] <apejens> and was curious

[14:01] <moritz_> apejens: it turns out that .perl is only of limited use during debugging... we'll probably have a .pretty method that provides less formal but much more concise output

[14:01] <apejens> mhm

[14:01] <moritz_> I think niecza implements that already

[14:02] <moritz_> well, .perl *is* useful, but it takes long for a human to parse a .perl of a nested Match object, so it could be better

[14:03] <apejens> and outputing stuff like what matched, not just from and to etc might aid more

[14:04] <flussence> does Match.perl do its own output formatting?

[14:04] <moritz_> flussence: yes

[14:04] <colomon> why are we talking about this instead of just coding something up? 

[14:04] <moritz_> because coding is hard.

[14:04] <flussence> might be nice to have a yaml-like common formatting function that contains the necessary smarts to make it look nice

[14:04] <moritz_> I think there was a .pretty method nopasted at some point

[14:05] <moritz_> but wasn't applied back then because not specced

[14:05] <colomon> should have made a module.

[14:06] <shortcircuit> rakudo: say {my $a = 7; print $a;}.perl

[14:06] <p6eval> rakudo 337f19: OUTPUT«{ ... }␤»

[14:06] <shortcircuit> ...That means nothing to me.

[14:07] <colomon> .perl can't do code objects yet

[14:07] <moritz_> shortcircuit: rakudo can't deserialiaze closures yet

[14:07] *** plobsing left
[14:07] <shortcircuit> Aww.

[14:07] <shortcircuit> I was hoping there'd be an interesting Quine solution in there somewhere.

[14:07] <arnsholt> There will be =)

[14:08] * moritz_ curses at expired nopastes

[14:10] <shortcircuit> Trying to make a GeSHi file for PIR. The Parrot docs are *not* the greatest-organized for someone looking for a complete list of keywords.

[14:14] <masak> moritz_: expired nopastes are why I went over completely to gists.

[14:15] <flussence> forgotten gist links are why I have a github username :)

[14:17] <pmurias> App::Nopaste gist support is broken :(

[14:17] *** dsp_ left
[14:19] <moritz_> http://irclog.perlgeek.de/perl6/2010-08-11#i_2690764 fwiw

[14:19] *** dsp_ joined
[14:19] <apejens> https://gist.github.com/6765af670a7371835a3a <-- why does the paragraph rule turn into an endless loop?

[14:19] <moritz_> I'm not entirely happy with the output, but I think it can be tweaked

[14:20] <moritz_> apejens: pline can match zero chars

[14:20] <moritz_> apejens: and if you wantify it, it loops

[14:20] <moritz_> known limitation in the regex engine

[14:20] *** orafu left
[14:21] <apejens> aha

[14:21] <moritz_> don't quantify it, and instead use \n+ in regex eol

[14:21] <flussence> rakduo: my $outdent = 2; my $ws = regex { ^ ' ' ** { $outdent } }; my $str = '   quack'; $str.subst($ws, '').perl;

[14:21] <flussence> rakudo: my $outdent = 2; my $ws = regex { ^ ' ' ** { $outdent } }; my $str = '   quack'; $str.subst($ws, '').perl;

[14:21] <p6eval> rakudo 337f19:  ( no output )

[14:21] <flussence> whoops

[14:21] <flussence> rakudo: my $outdent = 2; my $ws = regex { ^ ' ' ** { $outdent } }; my $str = '   quack'; $str.subst($ws, '').perl.say;

[14:21] <p6eval> rakudo 337f19:  ( no output )

[14:21] <flussence> ...?

[14:21] *** rhr joined
[14:21] <flussence> rakudo: say 1

[14:21] <apejens> dont quantify pline?

[14:21] <p6eval> rakudo 337f19:  ( no output )

[14:21] <flussence> oh.

[14:22] <moritz_> apejens: oh wait, that won't work either

[14:22] <flussence> anyway if I write "{$outdent}" it removes 3 spaces, and "$outdent" removes 1. Neither of which is 2...

[14:22] <moritz_> apejens: better: make pline not match zero chars, and use <pline>* instead

[14:22] *** orafu joined
[14:23] <flussence> I'm probably missing something obvious, but I can't see it :)

[14:25] <colomon> https://gist.github.com/769504 -- oha's Match.dump in a gist.  :)

[14:26] *** thundergnat joined
[14:26] <pmichaud> I don't think Rakudo's regex engine knows how to do runtime quantifiers yet.

[14:27] <moritz_> it doesn't

[14:27] *** dsp_ left
[14:27] <moritz_> colomon: one improvement I'd like to see is that the matched text should be printed for every rule

[14:27] <colomon> errrr... I'm have a hard time getting oha's Match.dump to do anything interesting?

[14:27] <colomon> moritz_: agreed.

[14:27] <flussence> the thing is, without the brackets it seems to evaluate $outdent as 1 every time...

[14:28] <pmichaud> it's probably mis-parsing something

[14:28] <moritz_> flussence: it parses it as  <token> ** <seperator_token>

[14:28] <moritz_> flussence: and never matches <separator_token>

[14:28] <flussence> argh

[14:28] <moritz_> so it's just <token> once

[14:28] <pmichaud> I should probably get the engine to warn/fail about that how

[14:28] <pmichaud> *somehow

[14:29] <moritz_> or maybe we should have a different operator for <token> ** range and  <token> ** <sep>

[14:29] <thundergnat> felliot, moritz,  Re [^^]: I had uploaded a newer patch to http://rt.perl.org/rt3/Public/Bug/Display.html?id=65164 that addressed some issues just a few days ago.

[14:30] <apejens> moritz_: aha, thanks :)

[14:30] <colomon> ah, that's better

[14:30] <felliott> sorry, very afk

[14:30] <colomon> afk # "need to make a train"

[14:30] <felliott> thundergnat:  cool, thanks!  I'll try it out here.

[14:34] *** Maksim_ joined
[14:35] <masak> flussence: are you using regexes to implement .indent?

[14:35] <flussence> I'm trying a few different things to see what works...

[14:36] <Maksim_> hi, can I use code from p5 and p6 in same script? something like: use v5 {...}, then some where else use v6 {...} ? if yes please provide me with a place of any examples.

[14:36] <colomon> https://gist.github.com/769515 example of oha's Match.dump in action.

[14:36] <moritz_> Maksim_: it's specced, but not yet implemented

[14:36] <flussence> masak: the hard part is figuring out how to do the mixed tabs/spaces stuff :/

[14:37] <Maksim_> moritz_: understood, thanks.

[14:37] <masak> flussence: yes, just like predicted yesterday.

[14:37] <flussence> I think I'll have to write a lot more tests...

[14:37] <flussence> (I've got 6/8 passing so far!)

[14:38] <masak> flussence: I would love to discuss this with you in detail, but I'm at work. maybe we could meet up later today and talk about it?

[14:38] <flussence> yeah, fine :)

[14:38] <masak> great! don't know what time zone you're in, but I'll get off in four or five hours.

[14:39] <masak> in the meantime, more than 8 tests sounds like an excellent idea. :) good luck.

[14:39] *** dsp_ joined
[14:39] <apejens> should Grammar.parse($str, :rule<$rule>) work? (the $rule in <>)

[14:39] <flussence> GMT here, so ±3 hours for me

[14:40] <flussence> apejens: $rule should usually be the name of the rule there. Try :$rule instead?

[14:40] <apejens> $rule is a string

[14:40] <moritz_> then "yes"

[14:40] <flussence> oh, that should work then

[14:41] <takadonet> one side note is that I WAS working on porting over Text-Tabs+Wraps a month or so ago but realized I really hated it :( https://github.com/Takadonet/Text-Tabs-Wrap

[14:41] *** Maksim_ left
[14:42] <felliott> https://gist.github.com/769524 One of the (currently skipped) tests for [^^] is broken.  This patch should fix it.

[14:42] <masak> moritz_, flussence: I'd bet you just misunderstood apejens there. moritz_' suggested fix :$rule should work, though.

[14:42] <felliott> According to S03, [^^] () be Bool::False

[14:43] <felliott> s/be/should be/

[14:44] <felliott> rakudo: my $x=0; 1 ^^ 1 ^^ ($x = 5);  $x.say;

[14:44] <p6eval> rakudo 1037fc: OUTPUT«0␤»

[14:44] <felliott> I'll add a test for that.

[14:45] <masak> felliott++

[14:45] <felliott> Thanks!  Testing is fun!

[14:46] <thundergnat> felliot: there is an extensive test file included in the RT ticket. You may want to look through it for possible test to go into roast. 

[14:48] *** kanishka left
[14:50] <felliott> thundergnat: yep, I've got them in one big xor-tests.t file now.  I'm not sure where some of them should go.  I'll ask here in a bit.

[14:51] <felliott> https://gist.github.com/769533  Test infix ^^'s short-circuiting abilties

[14:54] *** plobsing joined
[14:56] *** Miesco joined
[14:57] <Miesco> So perl 6's goals will fix perl 5's shortcomings?  Make it faster, make it more readable, make it more consistent

[14:58] <takadonet> Miesco: yes

[14:58] <moritz_> besides some other goals

[14:59] <PerlJam> good morning all

[14:59] <moritz_> like improved error messages, more flexibility, an improved community etc.

[14:59] <takadonet> PerlJam: morning

[14:59] <Miesco> takadonet: cool.  Is perl 5 considered pretty slow compared to java and python?

[15:00] <Miesco> I am not aware of how fast it is, i've tried looking at benchmarks but there all different.  Is it known to be slower generally?

[15:00] <PerlJam> Miesco: no.

[15:00] <takadonet> Miesco: i'm not the best person for an answer on that :( 

[15:00] * takadonet looks arounds

[15:00] <flussence> it's fast enough for Frozen Bubble, and I was running that on a Pentium 2...

[15:00] <moritz_> I don't think perl 5 is slower than python, generally

[15:00] *** wtw left
[15:01] <Miesco> So perl 5 is faster then python??

[15:01] *** V1517OR joined
[15:01] <Miesco> and how does it compare to java, generally

[15:01] <moritz_> comparing a dynamic language like perl or python to a compiled language like java isn't that easy

[15:01] <Miesco> Is perl 6 going to be a compiled language?

[15:01] <moritz_> java has a higher startup and compilation cost, but often runs faster once it is compiled

[15:02] <moritz_> Miesco: the specification allows both compilation and interpretation

[15:02] <PerlJam> This language comparison still bothers me.  (you can't compare execution speed of languages, only implementations)

[15:02] <moritz_> but most implementations so far do compilation

[15:03] <Miesco> moritz_: And that is not the case for perl 5, right?

[15:03] <felliott> thundergnat:  the new patch doesn't short circuit infix ^^ properly

[15:03] <moritz_> Miesco: correct

[15:03] *** JimmyZ joined
[15:03] <Miesco> moritz_: So is that one of the plans to make it faster?

[15:04] <moritz_> Miesco: that would be a broad oversimplification

[15:04] <felliott> see https://gist.github.com/769533 for an example test

[15:04] <PerlJam> Miesco: faster for the humans.

[15:04] <thundergnat> felliot: looking

[15:04] <moritz_> Miesco: in modern programming languages the boundary between compilation and interpretion are blurred, and not really so interesting anymore

[15:04] <moritz_> for example java compiles to byte code, which is then interpreted

[15:04] <moritz_> is it compiled or interpreted?

[15:05] *** Patterner left
[15:05] <moritz_> ... and then maybe JIT-compiled by the VM

[15:05] <Miesco> every program is interpretted at some point

[15:05] <huf> perl5 compiles too, and then interprets, but then sometimes goes back to compiling a bit ;)

[15:05] <moritz_> the question of compiled/interpreted doesn't make much sense anymore

[15:05] <huf> is it better than cake? YES.

[15:05] <huf> ^^ that's an important question to ask

[15:06] <Miesco> So does perl 5 have bytecode?

[15:06] <PerlJam> Miesco: nope

[15:07] <moritz_> yes it has

[15:07] <moritz_> it's just usually never written to disc

[15:07] <moritz_> but it has in-memory bytecode

[15:07] <pmurias> it's an optree

[15:07] *** Psyche^ joined
[15:07] *** Psyche^ is now known as Patterner

[15:07] <Miesco> Thats what I thought

[15:07] *** [particle]1 joined
[15:07] *** risou joined
[15:07] <moritz_> and an optree is not a bytecode?

[15:08] <PerlJam> Well, now we're back to definitions again ...

[15:08] <PerlJam> compiled or interpreted?  optree or bytecode?  What does it all *mean*?

[15:08] <PerlJam> :-)

[15:09] *** [particle] left
[15:09] <thundergnat> felliott: I'm not sure that anything can be done about that at this point. The root problem is the same thing affecting ALL of the short-circuiting operators.

[15:09] <Miesco> You tickle me in a way that if my wife tickled me in that way, I would go ohhhhhh -- Cleveland

[15:10] <pmurias> moritz_: it serves the same purpose but calling it that seems a bit misleading

[15:11] <felliott> thundergnat: Oh, okay.  What's the root problem? I'd be curious to have a look at it.

[15:11] <Miesco> I dont get how python can make a python python but perl 5 can not make a perl 5 perl 5

[15:11] <thundergnat> It almost seems like the &infix syntax caused each parameter to be evaluated before it is passed in. I don't know exactly what is happening. 

[15:11] <PerlJam> Miesco: it can, but no one wants to do the work to make that happen.   There's very little joy in it.

[15:12] <arnsholt> Miesco: Because lexical analysis and parsing of Perl 5 is significantly harder than the same for Python

[15:12] <Miesco> ah okay

[15:12] <arnsholt> Which is another thing Perl 6 aims to fix

[15:12] <moritz_> making parsing even harder! :-)

[15:13] <felliott> Interesting.

[15:13] <Miesco> bye to timy the toad?

[15:13] <thundergnat> All of the short circuiting operators have the same problem. namely, they don't.

[15:13] <arnsholt> (And there is already a fledling p6-in-p6, masak++'s yapsi)

[15:13] <PerlJam> arnsholt: it's even official!  :)

[15:13] *** tzhs joined
[15:13] <arnsholt> And complete!

[15:13] <thundergnat> short-circuit that is...

[15:13] <arnsholt> For some values of official and comple =D

[15:14] <thundergnat> felliott: &&. || and // have the same problem.

[15:15] <arnsholt> thundergnat: That sounds like a plausible explanation

[15:15] <moritz_> they solve this problem by supplying syntactic variants of the operators, and supply the &infix:<...> thing just for the hyper operators to work with

[15:15] <arnsholt> If the short-circuits are handled like non-short-circuit operators, the arguments will be evaluated accordingly

[15:16] <thundergnat> felliott:  rakudo may eventuall need sone kind of special cased infix routine for the s-c operators, I don't know.

[15:16] <felliott> && short-circuiting works for me

[15:16] *** kaare_ left
[15:16] *** roen left
[15:16] <felliott> rakudo: my $x; 0 && 1 && ($x = 5); $x.say

[15:16] <p6eval> rakudo 1037fc: OUTPUT«Any()␤»

[15:16] <felliott> ..or not

[15:16] <pmurias> Miesco: and Perl 6 implementations in Perl 6 are being created

[15:16] <thundergnat> rakudo: 0 && say 'oops'

[15:16] <p6eval> rakudo 1037fc:  ( no output )

[15:17] <thundergnat> umm...

[15:18] <PerlJam> so ... where's the short-circuit problem?

[15:18] <moritz_> PerlJam: the ^^ patch removes the short-circuiting from ^^

[15:18] <PerlJam> oh.

[15:18] <pmurias> arnsholt: niecza will be very soon a p6-in-p6

[15:19] <Miesco> How long has perl6 been in development, 6 years now?

[15:19] <Miesco> started 2003 right?

[15:19] <moritz_> the idea of creating Perl 6 is about 10 years old

[15:19] <Miesco> 2005

[15:19] <PerlJam> moritz_: older if you count Topaz as a proto-perl6

[15:19] <jnthn> Rakudo has had a large chunk of it written in Perl 6 for a while now too :)

[15:19] <moritz_> don't know at which point "development" starts for you

[15:20] <arnsholt> pmurias: Niecza as well? Cool!

[15:20] *** dsp_ left
[15:20] <Miesco> So is will I expect production ready perl6 is 2015?

[15:21] <Su-Shee> moritz_: very simple. when $me started to write the first line. it's a different date for everyone. ;)

[15:21] <moritz_> some of us use Rakudo in production already

[15:21] <felliott> Do you know if this is a problem with the grammar or with the implementation of ^^?  Or something else?

[15:21] <arnsholt> Miesco: Depends on what you're producing

[15:21] <Su-Shee> Miesco: depends on what you're expecting ;)

[15:22] <Miesco> Well to be generally stable but not 100% stable

[15:22] *** [particle]1 is now known as [particle]

[15:22] *** MayDaniel joined
[15:22] <moritz_> felliott: the patch probably shouldn't remove the :pirop<xor> thing, but supply an infix:<^^> and/or infix:<[^^]> for hyper ops

[15:22] <PerlJam> I don't see how ^^ can short-circuit.

[15:22] <Miesco> Like I heard its no where near production ready now

[15:22] <PerlJam> Miesco: again, some people use it in production now.

[15:23] <felliott> PerlJam:  1 ^^ 1 ^^ ($x = 5) should short-circuit before the assignment

[15:23] <Miesco> Is there a full specification yet?

[15:23] <Su-Shee> Miesco: don't believe everything you hear on the internet. install it, try it. 

[15:23] <[particle]> there is no 100% stable, but rakudo isn't as stable as we'd like

[15:23] <felliott> ^^  returns false if more than one argument is true.

[15:23] *** dsp_ joined
[15:23] <Miesco> Su-Shee: I heard it from mst I think

[15:23] <[particle]> there is not a full spec.

[15:23] <Su-Shee> Miesco: and mst isn't on the internet?

[15:24] <felliott> moritz_:  I'll give that a try

[15:24] <[particle]> is there a full specification for perl 5?

[15:24] <PerlJam> oh.  I see.  I was looking at it from the wrong end of the universe.

[15:24] <thundergnat> felliot: apparently, the short circuiting ops have been fixed sometime in the last few releases. see http://rt.perl.org/rt3/Public/Bug/Display.html?id=77420 for bug report.

[15:24] <[particle]> the answer is no.

[15:24] <Miesco> I do want to develop the perl 6 core when im smarter

[15:25] <PerlJam> Miesco: Why wait?  :)

[15:25] <moritz_> Miesco: one doesn't need to be very smart to write a compiler

[15:25] *** plobsing left
[15:25] <moritz_> Miesco: it's the simplest kind of program: reads input text, generates some output

[15:25] <[particle]> in some ways you have to be quite stupid.

[15:25] <[particle]> ;)

[15:25] <PerlJam> but on purpose, not on accident

[15:25] <Miesco> Well okay

[15:26] <Miesco> I wanna read Design Patterns first

[15:26] <moritz_> ... and mst says as much (though he yells "You're not good enough") :-)

[15:26] <thundergnat> felliott: nope. still broken

[15:26] <PerlJam> Miesco: just so you know, that book will be  thoroughly unhelpful for coding Perl 6

[15:26] <[particle]> Miesco: might i suggest 'pragmatic programming'?

[15:27] <Su-Shee> mst certainly didn't yell "design pattern" and he also yells very nicely against this "is the spec ready yet" thing in favor of perl 6. ;) 

[15:27] <pmichaud> "is the perl 5 spec ready?"

[15:27] <Miesco> [particle]: Is that a c++ book?

[15:28] <PerlJam> Su-Shee: he knows not to slit Perl 5's throat when he stabs at Perl 6  ;)

[15:28] <[particle]> Miesco: it's a book about how to approach the topic of programming.  it applies to any language.

[15:28] <Su-Shee> PerlJam: nicely put. :)

[15:29] <pmichaud> The problem with starting a language with a specification seems to be that lots of people assume you have to "finish the specification" before you can have anything usable, stable, or production ready.

[15:29] <Su-Shee> that doesn't even work in companies ;)

[15:29] <Miesco> [particle]: Ah I have to get this book

[15:29] <PerlJam> pmichaud: only because people are so used to the waterfall model of doing things (even those who should know better)

[15:29] <takadonet> It's not like building a house where you need to have the 'finished spec' before you can start

[15:30] <pmichaud> even builders know that the 'finished spec' of a house or building isn't the final design.

[15:30] <pmichaud> in fact, the construction industry lives on change orders.

[15:30] <mathw> indeed, they oftne put slightly curvy walls in, just for fun

[15:30] <mathw> even if the ones on the plan were straight

[15:30] <Su-Shee> realistically nothing is really build that way (I should know, we have a software to manage large construction sites ;)

[15:30] <[particle]> there were usable, production-ready c compilers before c89 was an approved standard

[15:30] <jnthn> The line between fun and incompetence can be thin. ;-)

[15:30] <[particle]> there were usable, production-ready c++ compilers before c99 was an approved standard

[15:31] <pmichaud> construction bids are often put in "at cost" (no profit) with large profit to be made on the inevitable change orders during construction.

[15:31] * jnthn remembers the "features" of his computer science lab. :)

[15:32] * PerlJam wonders how often the design spec is compared to the as-built spec in the construction industry.

[15:32] <pmichaud> depends on the lawsuit.

[15:32] <PerlJam> heh, I suppose so

[15:32] * pmichaud has some vicarious experience here.  :-)

[15:32] <Su-Shee> Imagine someone would have spec'ed the coming down of the Berlin wall first to actually make it happen.. ;)

[15:33] <Su-Shee> pmichaud: may I offer you our great product to manage competently large contstruction sites? it's even written in perl! ;) 

[15:33] <Su-Shee> cons-truc-tion.

[15:34] <felliott> thundergnat: thanks for showing me #77420.  Unfortunately, the fix is quite a bit beyond my understanding ATM, but I'll study it.

[15:34] <takadonet> Su-Shee: you mean cons::truc::tion ?

[15:35] * Su-Shee rephrases: build::this::thing::here ;)

[15:35] <thundergnat> felliott: it is still broken in current rakudo

[15:36] <pmichaud> I'm sure it was reverted due to an incorrect design.

[15:36] <pmichaud> let me check the log for the revert

[15:36] <pmichaud> hmmm,  *2009*

[15:37] <pmichaud> that's pre-nqp-rx

[15:37] <pmichaud> that would've been in alpha

[15:37] <pmichaud> so, it wasn't reverted -- it was not transferred to ng.

[15:38] <pmichaud> at any rate, it's wrong because it depends on compile-time detection //= and ||=

[15:38] <PerlJam> pmichaud: btw, can you point me in a good direction to look for making  'aaaab' ~~ / a ** {2} /   work properly?

[15:38] <pmichaud> PerlJam: are you also looking to do   / a ** {$x} /  in the process?

[15:39] <PerlJam> aye.

[15:39] <takadonet> PerlJam: i had that problem! one sec

[15:39] <PerlJam> but actually, I wanted  {0..$x} and I'm sort of assuming it's related.

[15:39] <jnthn> pmichaud: Is compile time detection actually wrong there?

[15:39] <jnthn> pmichaud: I mean, we need to thunk the RHS at the very least, I would guess...

[15:39] <pmichaud> jnthn: afaic, it is.

[15:39] <pmichaud> I agree with thunking the RHS

[15:40] <jnthn> || and // are compile-time detected 

[15:40] <pmichaud> but modifying the past tree based on the identification of &infix://=  (by name) is really not the right way to be doing things.

[15:40] <jnthn> Or at least, we know to compile them to "not just a call to infix:<||>"

[15:40] <jnthn> Ah, yes.

[15:40] <jnthn> For one because it doesn't even parse as that these days. :)

[15:42] <pmichaud> PerlJam: I think the regex engine itself needs some modification to be able to recognize a closure as a repetition parameter, and then know what to do with it.

[15:42] *** alester joined
[15:42] <takadonet> pmichaud: i have a work around... just trying to get it to work!

[15:44] <PerlJam> pmichaud: does nqp grok closures?

[15:44] <pmichaud> in regexes, yes.

[15:44] <takadonet> sorry gtg :( 

[15:44] <takadonet> PerlJam: https://github.com/Takadonet/Text-Tabs-Wrap/blob/master/lib/Text/Wrap.pm#L55

[15:44] <pmichaud> (nqp groks closures outside of regexes too)

[15:44] <takadonet> https://github.com/Takadonet/Text-Tabs-Wrap/blob/master/lib/Text/Wrap.pm#L56

[15:45] <takadonet> that an example how it works

[15:45] <takadonet> sorry I cannot golf it... work

[15:45] <pmichaud> jnthn: currently we handle || and // by virtue of the :pasttype<...>  parameter to the token.

[15:46] <pmichaud> the compiler doesn't specifically recognize them in actions.pm

[15:46] <jnthn> pmichaud: True. I still call that "compile time". :P

[15:46] <jnthn> But yes, it's in the grammar, not the actions.

[15:46] <felliott> Unfortunately, I have to go.  thundergnat, thanks for your work on this, and thank you everyone else for your help.  I'll work on adding thundergnat's tests when I get back.

[15:46] <felliott> It's been fun!

[15:46] <pmichaud> felliott++

[15:46] <jnthn> I wonder if we can form thunk in a reducecheck...

[15:47] <jnthn> ...or if that's sane.

[15:47] <thundergnat> felliott: thanks, bye

[15:47] *** felliott left
[15:47] <pmurias> ggoebel: the concurrency book is fun

[15:47] <pmichaud> well, iirc TimToady++ seems to put || and // and ^^ and && in the realm of macros

[15:47] <pmichaud> ...but I'm not quite sure what that implies for implementation yet

[15:48] <pmichaud> STD.pm still parses them as ordinary operators

[15:48] <jnthn> Hmm.

[15:48] <jnthn> *nod*

[15:48] <jnthn> I'm hoping that once nqp-rx gains roles, the whole slang/macro thing will become a tad easier to explore.

[15:48] <pmichaud> (the synopses mention them in the context of macros in a few places)

[15:48] <jnthn> Since we can mix into the current language.

[15:49] <jnthn> (Also, custom operators can become way less leaky. :))

[15:49] <pmichaud> it would be very helpful to see a plausible definition of the short-circuiting operators in perl 6

[15:49] *** hanekomu joined
[15:49] <jnthn> pmichaud: Yes, very much so.

[15:49] <pmichaud> i.e., if we had a full-fledged p6 implementation, how would they be defined?

[15:50] <pmichaud> then we'd have a much better idea of what we're working towards.

[15:50] *** Trashlord left
[15:50] <pmichaud> or, if they're somehow compiler primitives, let's state so somewhere.

[15:51] <pmichaud> more generally, if someone wants to write their own short-circuiting operator, (1) is it possible and (2) how do they define it?

[15:52] <pmichaud> I suppose I could resurrect pm.txt and add those questions to it.  :-)

[15:52] <colomon> \o/

[15:53] *** thundergnat left
[15:54] *** kaare_ joined
[15:56] *** mce_ro joined
[15:58] *** spq1 joined
[15:58] <colomon> woah, MAIN is really addictive.

[16:00] *** plobsing joined
[16:01] *** JimmyZ left
[16:22] *** shi joined
[16:25] <PerlJam> If you've got: proto token foo { <...> };  token foo:sym<a> { ... }; token foo:sym<b> { ... };  etc.  How do you match just the "b" foo?  Can I say  <foo:b>  or something ?

[16:27] <PerlJam> <foo:sym<b>> maybe?

[16:28] <arnsholt> PerlJam: IIRC, you don't

[16:28] <arnsholt> At least in nqp-rx

[16:28] <masak> what arnsholt said.

[16:28] *** dju left
[16:28] <masak> you can always filter on the captured submatch afterwards.

[16:28] *** dju joined
[16:29] <masak> asking for that functionality is like asking "I want to do a multi-dispatch, but only against this multi", if you ask me.

[16:30] <jnthn> PerlJam: Create a rule that the proto candidate calls.

[16:30] <jnthn> And call that one directly.

[16:30] <PerlJam> Sometimes you might want to do multi-dispatch and sometimes you might want to dispatch directly to a particular multi.  I don't see that as a problem.  (Other than to do that now, you have to add an extra level of indirection)

[16:31] *** gottreu joined
[16:31] <jnthn> I think it's rare enough that the loi isn't so bad. imho.

[16:31] <PerlJam> clearly it's rare.  I'm probably the first person to ask for it ever.  :)

[16:31] *** [particle] left
[16:32] *** [particle] joined
[16:33] <jnthn> :P

[16:34] <PerlJam> Seems like it would be less-rare in a regex setting though.

[16:35] <jnthn> Well, there is a way to do it for code-multis.

[16:39] * jnthn wonders if you can my &foo-bar = token foo:sym<bar> { ... } and refer to it as <&foo-bar> 

[16:39] <[particle]> <&{'foo-bar'}> should work in any case

[16:40] <[particle]> depending on which 'it' you mean

[16:40] <jnthn> [particle]: - is a valid identifier character in that position, so <&foo-bar> is a fine call, afaik.

[16:40] <jnthn> [particle]: Just meant, will it work out to call a token that is part of a proto directly.

[16:41] <[particle]> ah, i thought you were wondering if the - would perhaps be interpreted as a character set subtraction

[16:41] <[particle]> but ltm would make it's parsed as &foo-bar, not &foo - bar

[16:42] <[particle]> i'm not aware of recent spec changes, so my knowledge is perhaps dated.

[16:42] *** envi left
[16:43] <jnthn> No, I wasn't worried about the parsing of it. Just the semantics. :)

[16:43] <[particle]> yes, - is valid ident.

[16:43] <[particle]> just like my &foo`bar

[16:43] <[particle]> make that &foo'bar

[16:44] <colomon> Huh.  So <foo-bar> doesn't work, but <&foo-bar> does?

[16:44] <jnthn> colomon: Only because I defined it.

[16:44] <jnthn> colomon: afaik, <foo-bar> doesn't currently fall back to a lexical.

[16:45] <colomon> <foo-bar> will get you "regex assertion not terminated by angle bracket"

[16:45] <jnthn> Oh?

[16:45] <jnthn> std: /<foo-bar>/

[16:45] <p6eval> std 625303c: OUTPUT«ok 00:01 120m␤»

[16:45] <jnthn> nqp: /<foo-bar>/

[16:45] <p6eval> nqp:  ( no output )

[16:45] *** hanekomu left
[16:46] <jnthn> rakudo: /<foo-bar>/

[16:46] <p6eval> rakudo 1037fc: OUTPUT«===SORRY!===␤regex assertion not terminated by angle bracket at line 22, near "-bar>/"␤»

[16:46] <jnthn> Hmpfh.

[16:46] <jnthn> I think Rakudo is wrong there.

[16:46] <colomon> yes

[16:46] <colomon> agreed

[16:46] <colomon> I was worrying about what is currently practical.  :)

[16:46] <jnthn> Ah, OK

[16:46] *** Layla_91 joined
[16:49] <masak> rakudo is wrong, it's a known and reported bug.

[16:51] <Layla_91> hi i am new and have few questions.

[16:52] <jnthn> Layla_91: welcome :)

[16:52] <tadzik> hello zebras

[16:52] <tadzik> and hello Layla :)

[16:53] <masak> hi Layla_91. ask away.

[16:53] <masak> and hi tadzik :)

[16:55] <PerlJam> I'm old and I always have questions too  ;)

[16:55] <Layla_91> jnthn: em.. I usually program in python, I saw p6 site and it seem nice.. but i did not find a lot of full programs or advanced documents. I also need to know if I can embed c or c++ code into p6 because it seems not very complete.

[16:56] *** redicaps left
[16:56] <diakopter> is RosettaCode linked from perl6.org ?

[16:56] <shortcircuit> I think so

[16:56] <PerlJam> Layla_91: what are you going to use Perl 6 for exactly?

[16:57] <shortcircuit> It used to show up in the Documentation bubble. It did when I swung by there within the last week.

[16:57] <PerlJam> shortcircuit: still does

[16:57] <shortcircuit> Ah, there, in the Code examples bubble at http://perl6.org/documentation/

[16:57] <pmichaud> diakopter: I don't see rosettacode on perl6.org, and you're absolutely right that it needs to be there, prominently

[16:57] *** am0c left
[16:57] <pmichaud> I'd even like to see it on the main page

[16:57] <pmichaud> oh, there it is (code examples bubble)

[16:58] <pmichaud> I want it on the main page

[16:58] <masak> Layla_91: there are ways to tie together C code and Perl 6 code. and yes, there are fewer libraries written in Perl 6 at the moment than in, say, Perl 5.

[16:58] <jnthn> Layla_91: There are ways to call (some) C code from Perl 6.

[16:58] <jnthn> Though it's line like Perl 5's Inline::C

[16:58] <jnthn> *like

[17:00] <Layla_91> PerlJam: I started working in new company two weeks ago. I am working on a new website and I thought of using perl6 in some parts. it will have forums and web chat.. 

[17:00] <PerlJam> Layla_91: cool.  Have you seen modules.perl6.org ?

[17:02] *** cotto left
[17:02] <Layla_91> PerlJam: I seen them but I feel there is very little documentation and no books about them. I only know python and everytime I ask for help they tell me "it is almost like in perl5!" should I learn perl5 first?

[17:04] *** hercynium joined
[17:04] <dalek> perl6.org: e6f6f63 | pmichaud++ | source/about/index.html:

[17:04] <dalek> perl6.org: Typo fix.

[17:04] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/e6f6f63c5b

[17:05] <PerlJam> Layla_91: Perl 6 may not be for you yet.  It's mostly still for early adopters who don't mind having to debug strange errors or figure out how things work for themselves.

[17:05] <PerlJam> Layla_91: though, there is a book: https://github.com/perl6/book/downloads

[17:06] <PerlJam> Layla_91: it's not complete, but it's a start

[17:06] *** justatheory joined
[17:07] <Layla_91> PerlJam: but as per your knowledge, can it be used know for web programming.. I have no problem spending few weeks trying it :D

[17:09] *** daxim left
[17:09] <PerlJam> Layla_91: Yes, it can.  But I have no first-hand knowledge of doing so however.  There are others here who have actually written Perl 6 based web sites who may be able to give you some advice.

[17:09] <Layla_91> PerlJam: cool! :D Can you tell me how to reach them?

[17:09] <Layla_91> PerlJam: I am bored from python all time :(

[17:10] <tadzik> Layla_91: hello :)

[17:10] <moritz_> masak has written a tool that generates static pages for http://strangelyconsistent.org/

[17:10] <Layla_91> tadzik: helo tadzik :D

[17:10] <tadzik> I've used the grammar engine to do the dispatching

[17:10] <PerlJam> Layla_91: just keep asking questions here and you'll reach them  :-)

[17:10] <tadzik> unusual, but exciting :)

[17:11] <masak> Layla_91: my software for that blog is on github nowadays.

[17:11] <masak> it's delightfully short, and I have plans to make it shorter :)

[17:12] <masak> (through the right means, not through golfing it down)

[17:12] <Layla_91> masak: I think I am so lucky today! everybody so helpfull! :D

[17:12] <tadzik> welcome to Perl 6!

[17:12] <PerlJam> Layla_91: #perl6 is always like this!  :-)

[17:12] <tadzik> (where on earth is hugme)

[17:12] <plobsing> does github have a separate perl 6 language category yet? should it?

[17:12] <masak> Layla_91: on other channels it might be luck. on #perl6, it's just business as usual :)

[17:13] <tadzik> plobsing: we may ask them

[17:13] <masak> plobsing: no. yes.

[17:14] <plobsing> I'm also not fond of how PIR gets classified as "Perl". not at all the same things.

[17:14] <diakopter> tadzik: the link to viv from the front page ought not to link to the direct raw source of the viv script in github, as Chrome (and perhaps other browsers) treats it as a downloaded file by default.  http://github.com/perl6/std/raw/master/viv

[17:14] <diakopter> tadzik: Rather it should point to http://search.cpan.org/~sorear/STD/bin/viv

[17:15] <tadzik> Layla_91: http://ttjjss.wordpress.com/2010/11/27/grammar-dispatching-%E2%80%93-a-step-further/ for I assume you are interested :)

[17:15] <diakopter> as well as link to the std repo's main page on github

[17:15] <Layla_91> tadzik: yay! ^_^

[17:16] <tadzik> diakopter: I'm on it

[17:16] *** cjk101010 joined
[17:18] <tadzik> hmm, another two blag toasts await me today

[17:18] <dalek> perl6.org: fc84b08 | tadzik++ | source/index.html:

[17:18] <dalek> perl6.org: Fixed a viv link, diakopter++

[17:18] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/fc84b0867c

[17:19] <diakopter> tadzik: also the STD.pm link from the main page

[17:19] <Layla_91> Thank you all! I will be back soon after I check docs and Yapsi! now is dinner time bye! :D

[17:19] <tadzik> :F

[17:19] <diakopter> tadzik: the reason why the cpan link is best is b/c it does formatting

[17:20] <diakopter> and sorear keeps it updated quite often (when there are changes to STD)

[17:20] <diakopter> but like I said both/one of them should also link to the github page :)

[17:20] <diakopter> probably the STD one

[17:20] <tadzik> now where is STD.pm6 on cpan?

[17:21] *** JimmyZ joined
[17:21] <diakopter> oh

[17:21] <diakopter> good point.

[17:21] <tadzik> alright, go-to-library time, bbl

[17:21] <diakopter> well, at one time we had an html syntax-highlighted edition, I thought.

[17:21] *** MayDaniel left
[17:22] <diakopter> and that should be linked from perlcabal.org/syn

[17:22] <moritz_> IMHO the best approach would be to put a page on perl6.org that explains what STD and viv are

[17:22] <moritz_> and link to that

[17:22] *** Layla_91 left
[17:22] <diakopter> moritz_: I think that's a good idea

[17:23] <moritz_> I can start one, and I hope others will chime in and improve it :-)

[17:23] <moritz_> should it go under compilers/ or under viv/ ?

[17:23] <moritz_> erm

[17:23] <moritz_> compilers/ or specification/ ?

[17:23] *** GinoMan_ joined
[17:24] *** GinoMan left
[17:24] *** JimmyZ left
[17:30] <pmichaud> does it have to be "or"?

[17:31] <pmichaud> put the link on both

[17:31] <flussence> is " \t quack".indent(-2), any(' 'x7 ~ 'quack', "\tquack"), ??? # :S

[17:32] <PerlJam> flussence: No, it's just the first one.

[17:33] <PerlJam> er,  yes, it's just the first one :)

[17:33] <flussence> oh, that'll save my sanity then :)

[17:34] *** hanekomu joined
[17:35] *** Tedd1 left
[17:36] *** impious joined
[17:38] *** mce_ro left
[17:43] *** plobsing left
[17:50] *** pmurias left
[17:51] *** cdarroch joined
[17:51] *** cdarroch left
[17:51] *** cdarroch joined
[17:53] *** am0c joined
[17:53] *** am0c left
[17:53] *** cjk101010 left
[17:54] <pmichaud> afk, lunch

[17:58] *** hugme joined
[17:58] *** ChanServ sets mode: +v hugme

[18:01] *** felipe left
[18:04] *** cjk101010 joined
[18:08] *** Trashlord joined
[18:09] *** kjeldahl left
[18:10] *** risou left
[18:11] <dalek> perl6.org: 9710f83 | moritz++ | source/compilers/std-viv.html:

[18:11] <dalek> perl6.org: add dummy page for std and viv

[18:11] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/9710f83c78

[18:17] *** am0c joined
[18:21] *** dakkar left
[18:24] *** _twitch left
[18:26] *** cjk101010 left
[18:26] *** tzhs left
[18:27] *** tzhs joined
[18:30] <dalek> perl6.org: a73081b | moritz++ | source/compilers/std-viv.html:

[18:30] <dalek> perl6.org: fill in some more details about STD.pm6 and viv

[18:30] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/a73081b1f2

[18:34] <sorear> good * #perl6

[18:34] <diakopter> howdy

[18:35] <moritz_> good * *

[18:36] <moritz_> if you have anything to add or correct to the last two perl6.org commits, please do so

[18:37] <diakopter> I think the STD.pm link on index.html should link there (sry if that's obvious)

[18:38] <moritz_> well, that's what I intend to do once it's reviewed

[18:38] <moritz_> if you are impatient, feel free to do it right away :-)

[18:38] <diakopter> also <a href="http://search.cpan.org/~sorear/STD/bin/viv">viv</a> should be on that page (std-viv.html)

[18:38] <diakopter> I mean

[18:38] <moritz_> then add it

[18:38] <jnthn> nom &

[18:39] <PerlJam> diakopter: moritz_ didn't ask for commentary, he said "feel free to fix it"  :)

[18:39] <moritz_> well, both if possible :-)

[18:39] <diakopter> well, it's sorta ambiguous, but ok

[18:40] *** plobsing joined
[18:41] *** spq1 left
[18:41] <diakopter> "it is not suited for general Perl 6 code."  - are you sure that's correct?

[18:41] *** shi left
[18:41] *** jerome left
[18:42] <diakopter> that was the qualification for "gimme5"...

[18:43] <diakopter> I mean, it doesn't handle lots of Perl 6 features, but same for all the implementations

[18:45] <diakopter> it *is* suitable for general Perl 6 code, definitively, in that it's the only parser that parses Perl 6 code fully/correctly - it's just that its output is data, not programs, except for the perl5 backend.

[18:46] <diakopter> "it doesn't handle lots of Perl 6 features" refers to that perl5 backend

[18:47] * diakopter waits for more discussion

[18:49] *** rgrau joined
[18:50] *** jerome joined
[18:51] *** kensanata left
[18:55] *** kjeldahl joined
[19:00] *** shortcircuit left
[19:01] *** shortcircuit joined
[19:02] *** wamba left
[19:09] <moritz_> "it compiles only those features to Perl 5 code that are needed for running STD.pm6"

[19:10] <diakopter> yeah, but switch around "to Perl 5 code" to just after "compiles"

[19:10] <diakopter> so that "features" and "that are needed" are right next to each other :)

[19:10] <diakopter> sorry, I've been helping a cow-orker prep for the GMAT :D

[19:11] *** snearch joined
[19:12] <moritz_> I know I'm not a good technical writer, which is why I ask you guys

[19:15] <dalek> niecza: 0bed1b8 | sorear++ | v6/ (2 files):

[19:15] <dalek> niecza: [v6] Merge back tryfile -> STD

[19:15] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0bed1b8972

[19:15] <dalek> niecza: 75a3966 | sorear++ | src/Metamodel.pm:

[19:15] <dalek> niecza: Slightly more verbose merge error message

[19:15] <dalek> niecza: review: https://github.com/sorear/niecza/commit/75a3966caf

[19:19] *** hugme left
[19:21] *** ashleydev left
[19:23] *** Intensity joined
[19:24] *** risou joined
[19:24] *** MayDaniel joined
[19:24] <dalek> perl6.org: e236dc0 | moritz++ | source/compilers/std-viv.html:

[19:24] <dalek> perl6.org: rewording based on feedback by diakopter++

[19:24] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/e236dc067a

[19:24] <dalek> perl6.org: 287f7ef | moritz++ | source/ (3 files):

[19:24] <dalek> perl6.org: update some std and viv links

[19:24] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/287f7ef477

[19:25] *** ashleydev joined
[19:25] *** ggoebel left
[19:27] <diakopter> does the link to std-viv need a .html ?

[19:28] <moritz_> nope

[19:28] <moritz_> content negationation

[19:28] <moritz_> http://perl6.org/compilers/std-viv

[19:28] <diakopter> oh

[19:29] *** VXZ left
[19:31] *** ggoebel joined
[19:44] *** impious left
[19:47] *** am0c left
[19:52] *** kavi joined
[19:52] *** Alias__ joined
[19:52] <kavi> hi there

[19:52] <takadonet> kavi: hey

[19:53] <kavi> I justlike to get a bit more involved in perl 6

[19:53] <kavi> is this the right place to know what is all about ?

[19:53] <kavi> or bettere start from a feature list web site ?

[19:55] *** kavi left
[19:55] <takadonet> kavi: here is the best place for updated information

[19:55] *** Alias left
[19:55] <takadonet> ....

[19:55] <[particle]> teehee

[19:56] <takadonet> [particle]: ?

[19:56] <[particle]> (11:55:36 AM) kavi left the room.

[19:56] <takadonet> ya

[19:56] <[particle]> not the best way to get answers

[19:57] *** wamba joined
[19:57] *** wamba left
[19:57] *** wamba joined
[19:58] *** wamba left
[19:58] *** VXZ joined
[20:00] <[Coke]> .

[20:00] *** [hercynium] joined
[20:00] *** [hercynium] left
[20:00] *** [hercynium] joined
[20:01] *** zby_home_ left
[20:03] <diakopter> well, kavi did wait 2 minutes

[20:04] *** hercynium left
[20:04] *** [hercynium] is now known as hercynium

[20:06] * KatrinaTheLamia sighs

[20:07] <KatrinaTheLamia> looks like a Java Kitty specification will be made, because of my work on Jerl 6.

[20:07] <diakopter> is it open-source?

[20:07] <KatrinaTheLamia> The Perl community... we make Java a more intelligent solution.

[20:07] <KatrinaTheLamia> diakopter, yes... it is also FlOSS.

[20:07] <diakopter> where's it hosted

[20:08] <takadonet> diakopter: little hard to answer in a timely manner at work...

[20:08] <KatrinaTheLamia> ah... the Java Kitty spec has not been made yet. The working source code is being hosted on github. It is not much to look at it.

[20:08] *** [hercynium] joined
[20:08] *** [hercynium] left
[20:08] *** [hercynium] joined
[20:09] <KatrinaTheLamia> wait... I need to stop being so egotistical to assume people are talking to me, when questioning.

[20:09] <KatrinaTheLamia> diakopter, I still have yet to put in the Licensing info into the source tree. I am doing a dual license thing... GNU GPL v3... or new style BSD License...

[20:09] <dalek> niecza: 4b3d222 | sorear++ | / (2 files):

[20:09] <dalek> niecza: Fix class/common merge case

[20:09] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4b3d222e32

[20:09] <dalek> niecza: 212e8c9 | sorear++ | v6/ (3 files):

[20:09] <dalek> niecza: [v6] First steps towards integrating parser into harness

[20:10] <dalek> niecza: review: https://github.com/sorear/niecza/commit/212e8c9138

[20:10] <KatrinaTheLamia> but... I will need to read up on how the hell people do the dual license thing... as frankly, it does not make sense to me

[20:10] *** hercynium left
[20:10] *** [hercynium] is now known as hercynium

[20:14] <diakopter> just license it using the Artistic License 2

[20:14] <diakopter> which automatically dual-licenses it

[20:14] <diakopter> as well as *-licenses it

[20:14] <KatrinaTheLamia> ah, okay... thanks diakopter 

[20:15] * KatrinaTheLamia has less retarded crap to deal with now... seems diakopter helps remove menial tasks every time I talk to him =3

[20:15] <KatrinaTheLamia> you know--one of these days, I am going to make a joke about "getting in the diakopter, to get there better and faster."

[20:15] <diakopter> AL2 (listed there:) auto-allows redistro under any of these: http://opensource.org/licenses/alphabetical

[20:15] <diakopter> :/

[20:16] <KatrinaTheLamia> is... is that just that bad of a pun? I will never make it again. X3

[20:16] <diakopter> er, it used to.

[20:16] <diakopter> the Artistic License, I mean

[20:17] <KatrinaTheLamia> well, I will look into it, then. I might have some "free time" later, that I can do it. By free time, I mean, "needing to stop, so I do not walk into the offices of Sun Microsystems, and strangle the CEO to death."

[20:17] <diakopter> this is so stupid: "Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed."

[20:18] <diakopter> so no one is allowed to write a license that is worded slightly differently?

[20:18] <KatrinaTheLamia> As I am kind of scared that doing so, will have me become the new CEO of Sun Microsystems, in a standard mythological curse type set up.

[20:18] <diakopter> how does one "change a document" anyway

[20:19] <diakopter> there's a CEO of Sun?

[20:19] <fith> You mean Larry Ellison :)

[20:19] <KatrinaTheLamia> diakopter, laywer speak very rarely has anything to do with reality. It is the same world where you can sue, because hot coffee is hot.

[20:20] <moritz_> luckily it's not that crazy in all coutnries

[20:20] <KatrinaTheLamia> fith, yeah... going to try to not strangle him... as I am not certain how that curse is passed on exactly. Could be killing him, could be him biting me during a full moon--just going to play it slow, until I know more.

[20:20] <sorear> can we raise the level of this conversation a bit?

[20:20] <KatrinaTheLamia> oh, sorry...

[20:20] <fith> hehe

[20:21] <KatrinaTheLamia> uh, anyways--will work more on Java Kitty... and look into the Artistic License in a bit.

[20:21] <diakopter> I could've sworn a version of the artistic license referenced all the other licenses on opensource.org

[20:21] <diakopter> a version of the AL2, I mean

[20:22] <diakopter> it's annoying that it's not versioned (publicly, or at least discoverable (by me))

[20:24] *** risou left
[20:27] <dalek> sprixel: d236cd1 | diakopter++ | / (6 files):

[20:27] <dalek> sprixel: enable lack of signatures, e.g. my $a = sub { };  (same as my Callable[:()] $a = sub () { }; )

[20:27] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/d236cd1751

[20:29] <sorear> diakopter: are you planning to do gradual types in this perlesque or will it be 100% static like the last one?

[20:34] <dalek> rakudo: 18a9b2c | moritz++ | src/core/Match.pm:

[20:34] <dalek> rakudo: add Match.pretty method

[20:34] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/18a9b2c469

[20:37] <colomon> moritz_++

[20:37] *** lichtkind joined
[20:37] <moritz_> colomon: did you try it? :-)

[20:37] <colomon> nope

[20:38] <colomon> just saw it existed now, and was made happy.  :)

[20:39] <moritz_> colomon: https://gist.github.com/770063

[20:40] <colomon> looks like a lovely start!

[20:40] *** simon left
[20:40] <colomon> (and compiling...)

[20:42] *** V1517OR left
[20:42] <moritz_> suggestions on how to make it better are very welcome

[20:42] <moritz_> I'd love to have the name of the top level rule in the output (here TOP), but that's not available from within the match object

[20:46] <colomon> I don't think I'll have a solid clue until I run it one real data.  And I'm sure someone else will have better suggestions than me.

[20:46] <colomon> The important point is that it's already going to be very useful, IMO.

[20:46] *** roen joined
[20:48] *** MayDaniel left
[20:49] <colomon> yeah, that looks sweet!

[20:49] *** felipe joined
[20:49] <colomon> I wish I'd had that when I was debugging the bits I've added to the ABC Grammar.

[20:50] *** takadonet left
[20:50] <KatrinaTheLamia> btw diakopter... who was I suppose to talk to, on joining model6... I should probably watch for him jumping onto here.

[20:58] *** wamba joined
[21:02] *** y3llow_ joined
[21:02] *** pothos_ joined
[21:03] *** y3llow left
[21:03] *** y3llow_ is now known as y3llow

[21:04] *** pothos left
[21:04] *** pothos_ is now known as pothos

[21:07] <PerlJam> KatrinaTheLamia: probably jnthn

[21:09] <KatrinaTheLamia> PerlJam, ah, that is who I thought. Once he shows up, I will ask him about it.

[21:09] * KatrinaTheLamia curses a bit...

[21:10] <masak> very probably.

[21:10] <KatrinaTheLamia> you know, I will do what I can to get Perl 6 more a reality sooner.. as I am certain it will have its own version/equivalent of SQL Alchemy... which will make some of my "bootstrap" files less messy.

[21:10] * KatrinaTheLamia has determined, that for some things, it is better not to reinvent the wheel SQLite3 has given us.

[21:11] *** Kodi joined
[21:11] *** wamba left
[21:12] <PerlJam> What little I just read of SQL Alchemy makes it sound like perl 5's DBIC

[21:12] *** flatwhatson_ left
[21:12] <KatrinaTheLamia> PerlJam, ah... then it must have been a while since I have done anything with DBIC.

[21:13] *** flatwhatson_ joined
[21:13] <sorear> Perl 6 is very real

[21:13] <KatrinaTheLamia> Either way... I have learned to find Perl 5 a bit frightening to deal with. Perl 6 is much nicer to look at.

[21:13] <PerlJam> sorear: but it needs *more* realism  ;)

[21:13] <KatrinaTheLamia> sorear, I mean by that, having Perl 6 in a production environment.

[21:14] <PerlJam> KatrinaTheLamia: you mean you'll start using it in your production environment?

[21:14] <KatrinaTheLamia> I am willing to bet, most people here, would not suggest using Perl 6 for production  uses... well, the more saner of  us.

[21:14] <PerlJam> KatrinaTheLamia: depends on the production.  

[21:14] <KatrinaTheLamia> PerlJam, what Perl 6? I hope to get to the point, where it is a good recommendation to make

[21:14] <masak> I'm using Perl 6 for production uses.

[21:14] <sorear> KatrinaTheLamia: please stop using that word.  it means nothing.

[21:15] <KatrinaTheLamia> sorear, give me a better one then.

[21:15] <masak> "is it useful for me?"

[21:15] <sbp> autousefulness

[21:15] <KatrinaTheLamia> masak, PerlJam, sorear look, at this point, Perl 6 is like KDE when it was near (or in) the 4.0 version stages.

[21:16] <KatrinaTheLamia> I am mostly saying, I really want to see Perl 6, to be at a similar stage as to what KDE4 was, when it was KDE4.2 or KDE4.3

[21:16] <dalek> niecza: d21be50 | sorear++ | lib/Kernel.cs:

[21:16] <dalek> niecza: Do not NRE on TypeObj.attribute

[21:16] <dalek> niecza: review: https://github.com/sorear/niecza/commit/d21be5047e

[21:16] <masak> me too, whatever that stage is.

[21:16] <PerlJam> KatrinaTheLamia: I don't know what that means, but I'll say that Rakudo is more useful today than Ruby was when I first used it (circa 1999)

[21:16] <sbp> yup, nice to watch it gradually building up

[21:17] <sbp> the p in perl6 stands for patience, I think

[21:17] <KatrinaTheLamia> PerlJam, I dunno, I still consider Ruby useless... but that is my standard response to something with little to no documentation to it.

[21:17] <sbp> e is for eclectic

[21:17] * KatrinaTheLamia giggles at sbp

[21:17] <sbp> r is for ruby-beating

[21:17] <KatrinaTheLamia> l is for longevity?

[21:18] <sbp> nah, l6 is for the Lie group E6

[21:18] <sbp> it symbolises how far perl6's mathematical operators still have to go in complexity before all mathematicians will be happy therewith

[21:19] * sorear hugs KatrinaTheLamia

[21:19] <PerlJam> KatrinaTheLamia: Hmm. If Ruby has "little to no documentation", I can't imagine what you must think of Perl 6.

[21:19] <KatrinaTheLamia> I look forward to the AI Duplicate of Larry Wall's brain (which everybody will have loaded on their computer devices) starts work on Perl 7... the language of the Gods... which will be around 2063.

[21:19] *** Trashlord left
[21:19] <KatrinaTheLamia> PerlJam, well, Perl 6 has specs on what Perl 6 is suppose to do... to figure out what anything does in Ruby, you need to jump around, and start reading source code.

[21:20] <sbp> Larry once said, "only Perl 7 is True Perl"

[21:20] <KatrinaTheLamia> At least with Perl 6, there are plenty of items to read to say, "no, do not do THAT with that method, that is a very Bad Time(TM Larry Wall)".

[21:20] <sbp> Randal said, "perl7 solves the halting problem"

[21:21] <PerlJam> I don't know ... in my most recent bout with Ruby alot of the time I just guessed what I would do if it were Perl and Ruby just worked with it.

[21:21] <KatrinaTheLamia> Ruby, it is mostly just going through the source, and guessing how to use it... which often results in some rather horrid looking programs.

[21:21] <sbp> fun fact: the Perl6 POD synopsis is written in Perl6 POD

[21:21] * KatrinaTheLamia giggles

[21:21] <sbp> so you have to understand it semantically in order to parse it syntactically to understand it semantically

[21:21] <Su-Shee> PerlJam: I do the same with Ruby and Python and it works perfectly fine with a little reading up here and there...

[21:21] <sorear> KatrinaTheLamia: You're not helping.

[21:21] <masak> sbp: but you're OK if I publish my halting-problem-solving Perl 6 module, right? :)

[21:22] <KatrinaTheLamia> Katrina Payne said, "I have it on good authority that Eris, "bob", and the real gods use Perl 7."

[21:22] <sbp> masak: as long as it starts the Perl7 bootstrap!

[21:22] <masak> sbp: it's not entirely impossible.

[21:22] <tadzik> aloha zebras

[21:22] <PerlJam> Perl 6 is just a slang of Perl 7 after all

[21:23] *** orafu left
[21:23] <masak> or is it the other way around?

[21:23] <KatrinaTheLamia> anyways--I should get back to work on Java Kitty... and once I am happy a Perl 6 DBI will actually run, I will have the Java Kitty Language Map done in that.

[21:23] *** orafu joined
[21:23] <moritz_> KatrinaTheLamia: have you tried MiniDBI?

[21:23] <PerlJam> moritz++ beat me to it

[21:23] <PerlJam> :)

[21:23] <KatrinaTheLamia> wait... wait... what colour is Perl 7's bike shed?

[21:23] <moritz_> last I looked it did actually run

[21:23] <KatrinaTheLamia> that is the most important question we all need to ask... the colour of Perl 7's bike shed

[21:23] <KatrinaTheLamia> X3

[21:23] <sbp> it's a martian colour, one that only synæsthetes can see

[21:24] <sbp> (only some synæsthetes, in fact, probably a minority

[21:24] <KatrinaTheLamia> moritz_, yeah, but I get the feeling that rakudo seems to have something break on each build... that might no longer be the case.

[21:24] <sbp> *)

[21:24] <sbp> the star releases seem to be pretty good

[21:24] <sbp> numbers, I demand numbers!

[21:24] <PerlJam> KatrinaTheLamia: I haven't had anything significant break on me with Rakudo in a long while.

[21:24] <moritz_> KatrinaTheLamia: actually most of the time when we discuss rakudo breakage, it's not with the recommended parrot revision, but with a newer one

[21:25] <KatrinaTheLamia> moritz_, I will be more than happy once Rakudo, Jerl6, or something is at a "stable" enough to instill confidence.

[21:25] <moritz_> KatrinaTheLamia: and installing the last release should be a pretty safe choice

[21:25] <KatrinaTheLamia> moritz_, PerlJam I recall a pretty big one in 10.9... and another in 10.10

[21:25] <sbp> I wonder if that works in two directions differently, like the sorites "paradox"

[21:25] <KatrinaTheLamia> moritz_, yeah... once we get to the point where we do not have to have the latest version to not break, I will look into it, mmkay?

[21:26] <moritz_> KatrinaTheLamia: I don't understand... once a version it's installed, it doesn't break anymore

[21:26] <sbp> in other words, consider the progression of perl6 implementations like the adding of grains to a pile, and surveying people as to when it reaches a "usable state" as analogous to when the pile can indeed be called a pile or heap rather than just a group or a bunch of grains

[21:26] <moritz_> "breaking" is implied by changes, and if you don't change, there's no break

[21:26] <KatrinaTheLamia> moritz_, sbp, by that I mean, once people can start arguing for a legacy version of Perl 6 and not have people burst out laughing, I will do it.

[21:27] <sbp> in cognitive studies, the points reached are different depending on whether you add or take away grains one by one. similarly, the point at which perl6 enters a "usable state" as surveyed descriptively may be different depending on people's prognostications and their retrospectives

[21:27] <sorear> sbp: I think the proper solution is to round up and hang the smart-alecs who ask the questions

[21:27] <PerlJam> KatrinaTheLamia: sounds like you'll be in the "late majority" for Perl 6

[21:27] <moritz_> KatrinaTheLamia: if you#re happy with third-hand opinions, #perl6 might not be the proper place for you

[21:27] <KatrinaTheLamia> moritz_, ah, well, I am not happy with them. I do however want to put Perl6 to be able to be followed by them.

[21:27] *** estrabd is now known as estrabd_afk

[21:28] <PerlJam> sbp: you should make a blog post out of your last few lines.  :)

[21:28] <KatrinaTheLamia> PerlJam, not really... there is a chance I may put a bootstrap in Perl6 once I have confirmed that my bootstrap is not the broken bit of the program.

[21:28] <sbp> perhaps you should syndicate the #perl6 logs and save me the effort :-)

[21:29] *** MayDaniel joined
[21:29] *** snearch left
[21:29] <KatrinaTheLamia> moritz_, think of me as the person with the insanely decent marketing idea to take gothic/punk type trends, and make Hot Topic (The Gap with a darker colour scheme)... only somewhat more evil than him.

[21:29] <KatrinaTheLamia> X3

[21:29] <sbp> if I were a millionaire, I would employ a secretary to summarise #perl6 daily actually

[21:30] * KatrinaTheLamia notes a kick ban should be made for that analogy.

[21:30] <sbp> I think it would be a worthwhile activity, especially for the perl6 mailing list members who miss IRC communications. (and vice versa, perhaps?)

[21:30] <PerlJam> sbp: A more productive use of your money would be to fund pmichaud and/or jnthn to work on Perl 6  :)

[21:30] <moritz_> sbp: if I were a millionaire, I'd pay a few devs to work full time on ... what PerlJam said :-)

[21:31] <moritz_> sbp: would be worthwhile, yes. Feel free to start right away.

[21:31] <KatrinaTheLamia> yeah, going with moritz_ and PerlJam here.

[21:31] <sbp> you two don't want funding, eh? :-)

[21:32] <PerlJam> If I had a few million $$ to spare, I'd setup a foundation that TimToady, pmichaud, jnthn, moritz, masak, sorear, etc.  (sorry, if I listed everybody I'd be here all day ;) could draw funds from as needed to work on Perl 6 related projects.

[21:33] *** hercynium left
[21:33] <masak> quick, someone give PerlJam a few million $$!

[21:33] <sorear> PerlJam: tpf already has a few million (or at least 10^4) $$ to spare and issues grants to people who want to work on Perl related projects - I think jnthn is getting paid by them

[21:33] <sbp> there's always that crowdsource finding site that raised over $1m for iPod Nano wristwatch enclosures

[21:34] <sorear> PerlJam: it could be scaled up, not built from scratch

[21:34] <moritz_> sorear: it's not millions, and it's enough for smallish grants, but not enough to pay two peoples full time for two years, for example

[21:34] <PerlJam> sorear: aye, something about TPF's public relations leaves me wanting.  Perhaps I could fix that aspect of TPF instead.

[21:36] <moritz_> fixing TPF... not sure if that's possible with reasonable amount

[21:36] <PerlJam> maybe it's just the volunteerism that gets in the way.  TPF always seems to disappear from my radar for a while and then suddenly pop back up with something interesting for a couple of months.

[21:37] <moritz_> szabgab applied for a part of the Hague grant that was meant for building up fund raising

[21:37] <moritz_> he handed in a decent proposal, and since then I haven't seen any public reaction by TPF on that grant

[21:37] <moritz_> and nobody else applies for that part of the money

[21:37] <Su-Shee> putting up a flattr button might at least give better funding a start..

[21:37] <PerlJam> a perfect example  :(

[21:38] *** orafu left
[21:38] *** orafu joined
[21:41] <dalek> niecza: 6e32c05 | sorear++ | / (3 files):

[21:41] <dalek> niecza: [v6] Misc bug fixes; Hello world test works

[21:41] <dalek> niecza: review: https://github.com/sorear/niecza/commit/6e32c05799

[21:41] <KatrinaTheLamia> Either way... going to work on turning Perl 6 into trendy crap... mostly via me doing crap with MUMPs, JVM and a bit of Android OS stuff. You will see that I am more evil than the Hot Topic guy.

[21:42] <[Coke]> note that szabgab's request is for $$ that doesn't go through the grant committee. Find the person in charge of the Hague grant.

[21:42] * KatrinaTheLamia notes that having Perl 6 on the JVM allows Perl into the Enterprise and Android Circles. Then putting MUMPs onto the JVM will get Enterprise and Androids into Hospitals...

[21:42] <PerlJam> KatrinaTheLamia: I raise my can of Dr Pepper in salute to you  :)

[21:42] <KatrinaTheLamia> which means, your next heard transplant could be powered by Perl 6.

[21:42] <KatrinaTheLamia> X3

[21:42] <KatrinaTheLamia> thanks PerlJam 

[21:42] <KatrinaTheLamia> heart transplant*

[21:43] <KatrinaTheLamia> damn, malpractice by typo X3

[21:43] <moritz_> [Coke]: that's another poblem... I thought quite a bit about Hague grants, and read all posts on that topic, and I still don't know who that might be

[21:43] <moritz_> I might have read it and forgotten it

[21:43] <moritz_> or I might have never read it

[21:43] *** MayDaniel left
[21:44] <PerlJam> what moritz_ said.  I have no clue.

[21:44] <moritz_> from the outside, TPF is pretty opaque

[21:44] <[Coke]> When in doubt, go to TPF, look at the who's who, and ask someone on the board.

[21:44] <[Coke]> moritz_: s/from the outside/

[21:44] <[Coke]> but they are very responsive to emails, IME, so ping them if there's a topic that is unresolved that you care about.

[21:45] <PerlJam> I guess Karen Pauley administers the Hague money?

[21:46] <dalek> rakudo: 35c9071 | moritz++ | / (2 files):

[21:46] <dalek> rakudo: "fix" rakudo on newest parrot, and bump PARROT_REVISION

[21:46] <dalek> rakudo: 

[21:46] <dalek> rakudo: Arguably this is more of a workaround than a fix, but it does work, and my

[21:46] <dalek> rakudo: limited debugging skills didn't find the right calling location to fix

[21:46] <dalek> rakudo: (PIR line numbers being nonsenical doesn't help either)

[21:46] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/35c9071dca

[21:46] <tadzik> sniff sniff, I smell testing

[21:48] <tadzik> "Your branch is behind 'origin/master' by 9 commits, and can be fast-forwarded."

[21:48] <tadzik> is there a way to check it manually?

[21:48] <[Coke]> PerlJam: if not, she's on the board, and is an excellent resource.

[21:48] <dalek> roast: 039f3b1 | (Kodi Arfer)++ | S02-names_and_variables/names.t:

[21:48] <dalek> roast: [names.t] Added tests for RT #77528.

[21:48] <dalek> roast: review: https://github.com/perl6/roast/commit/039f3b1ed1

[21:49] <PerlJam> [Coke]: well, http://www.perlfoundation.org/ian_hague_perl_6_development_grants says "Evaluation of Ian Hague Perl 6 Development grants will be done by the president of TPF in consultation with other TPF members"

[21:49] <Kodi> Hm, I pushed to Rakudo first, but dalek noted my change to roast first.

[21:50] <tadzik> yeah. Just pulled and your change is there

[21:50] <moritz_> Kodi: the repos in the perl6/ organization on github push the changes to dalek, whereas it pulls from rakudo/rakudo

[21:50] <jnthn> moritz_: Looks kosher.

[21:50] <jnthn> moritz_: If incomplete.

[21:51] *** Cyrus joined
[21:51] <Kodi> moritz_: I see.

[21:51] <jnthn> moritz_++

[21:51] <dalek> rakudo: 71328bd | KodiB++ | src/Perl6/Grammar.pm:

[21:51] <dalek> rakudo: [Perl6/Grammar] Added many instances of "<!before '-'>" to permit calling subs named, e.g., "my-foo".

[21:51] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/71328bdf55

[21:52] <moritz_> Kodi: I think that's incomplete

[21:52] <moritz_> Kodi: for one there's also ' that's allowed in identifiers

[21:53] <moritz_> Kodi: and I think it should be a separate rule... I think STD.pm has <.nofun> for that, or so

[21:54] <tadzik> parrot-nqp.c:1280: error: expected ',' or ';' at end of input

[21:54] <jnthn> I guess this patch diverges us further from STD too?

[21:54] <sorear> <!apostrophe>

[21:54] <tadzik> ...does the new PARROT_REVISION compile for you?

[21:54] <sorear> nofun is something slightly different

[21:54] <Kodi> moritz_: Aha, I just saw the name "nofun" and assumed it only forbid parentheses.

[21:55] <moritz_> Kodi: listen to sorear, he knows STD better than me

[21:56] <moritz_> tadzik: you might need at really hard clean in the parrot repo (at least I needed it recently)

[21:56] <sorear> token nofun { <!before '(' | '.(' | '\\' | '\'' | '-' | "'" | \w > }

[21:57] <Kodi> Vs. Rakudo's token nofun { <![ ( \\ ' \- ]> » }

[21:59] *** nat2610_ left
[21:59] <tadzik> moritz_: yeah, that's what I did and it helped

[21:59] *** lestrrat left
[22:00] <diakopter> $1M doesn't go very far in California

[22:01] <Kodi> sorear: moritz_ was right; apostrophes remain a problem. If nofun works, think should I use that, or add a not-a-hyphen-or-apostrophe rule? Are there other punctuation characters allowed in identifiers?

[22:01] <diakopter> at least compared to my previous homes (Texas & Kansas). The real cost of living is tremendously higher

[22:02] *** masak left
[22:02] <sorear> Kodi: the rule in STD for matching - or ' is called <apostrophe>

[22:02] <sorear> Kodi: so not - or ' would be <!apostrophe>

[22:03] <tadzik> https://github.com/masak/proto/blob/master/PIONEER -- how about moving this to perl6/ecosystem?

[22:05] <moritz_> tadzik: +1

[22:06] <colomon> +1

[22:07] <dalek> ecosystem: 8620ed9 | tadzik++ | PIONEER:

[22:07] <dalek> ecosystem: Added PIONEER from the proto repo

[22:07] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/8620ed98dc

[22:07] <tadzik> wham!

[22:10] <moritz_> tadzik++ # good ideas, and carrying them out

[22:11] *** gbacon joined
[22:12] <tadzik> moritz_++ # knowing how to motivate, and how to reward the effort

[22:13] <sbp> "Proto cannot change your PERL6LIB environment variable"

[22:13] <sbp> why can't it?

[22:13] <tadzik> NYI in Parrot

[22:13] <sbp> thanks

[22:13] <tadzik> oh, this document is proto oriented, mind me changing it to be more general?

[22:13] <tadzik> As proto is not working now anyway

[22:14] <moritz_> would be nice, yes

[22:14] <moritz_> (to be more general, that is)

[22:15] *** masak joined
[22:15] <tadzik> plenty of code to change after the done_testing => done change

[22:15] <masak> oh, and remember, contestants: only a week remains of the contest. so send in your solutions!

[22:15] <masak> submissions after the deadline will be considered to be after the deadline! :)

[22:16] <masak> 'night, #perl6.

[22:16] *** masak left
[22:16] <tadzik> :)

[22:17] *** coldhead joined
[22:17] *** Kodi left
[22:18] <tadzik> hmm

[22:18] <tadzik> should I resist the temptation to, uhm, standarize PIONEER a bit?

[22:19] <tadzik> I know masak hates that word, but "we allow everything" leads to a stupid situations imho

[22:19] <colomon> tadzik: you mean like multiple test files in every module I have?

[22:20] <tadzik> colomon: hm?

[22:20] <colomon> when temptation comes you should give right in.

[22:20] <colomon> "plenty of code to change after the done_testing => done chang"

[22:20] <tadzik> colomon: I mean the lib6 situation a while ago

[22:20] <tadzik> ah, yeah

[22:21] <tadzik> btw, I think about implementing a bit of S22 in neutro and blogging about it

[22:21] <colomon> Ah, I think getting rid of lib6 for now works for me.

[22:22] <tadzik> I think the field in META.info telling the module installer where are the modules and where are the tests are a bit lacking sense in a broader view

[22:29] *** kaare_ left
[22:29] *** lestrrat joined
[22:30] <tadzik> http://wklej.org/id/452447/ -- how do you like a META.info like this?

[22:30] <tadzik> json, S22-alike, bla bla

[22:31] <moritz_> looks like a nice start

[22:31] <tadzik> S22 proposes YAML, but even CPAN is moving to json iirc, plus we don't have a YAML parses :)

[22:32] <tadzik> I'll try implementing it in neutro and blogging about it

[22:32] <tadzik> it should have something that deps.proto doesn't have... oh wait

[22:32] <moritz_> S22 can be changed :-)

[22:32] <tadzik> what do you think of something like this:

[22:33] <tadzik> META.info will contain the repo url, or a tarball url, whatever

[22:33] <moritz_> or possibly both

[22:33] <tadzik> our perl6/ecosystem will be a bunch of dirs, like json, neutro, etc

[22:33] <tadzik> with its META.info in each one

[22:34] <moritz_> if you tell me what the META.info should contain, I could make a release of JSON::Tiny, create a tarball and provide that for testing purposes

[22:34] <tadzik> now, we're fetching ecosystem with a module installer, we have names, descriptions, urls, deps, everything w/o even fetching the separate repos

[22:35] <tadzik> moritz_: my humble hope is that the important and popular modules will be ported to META.info, so people will get interested

[22:36] <moritz_> which is why I offer to make a start

[22:36] <tadzik> and look, we can get rid of this ugly perl6-Module-Tools thingy. It will only be a repo url

[22:36] <tadzik> moritz_++

[22:36] <tadzik> give me a few minutes to implement all this :)

[22:36] <moritz_> well, I'm going to bed now, so I'll have to do it tomorrow

[22:36] <tadzik> oh, sure

[22:37] <tadzik> can I make some mess in ecosystem in the meantime? :)

[22:37] <tadzik> I mean, add some files and dirs

[22:37] <tadzik> that's a big change after all

[22:37] <tadzik> maybe I'll just make a fork

[22:37] <moritz_> do you want to add one directory per project?

[22:37] <tadzik> si

[22:37] <moritz_> that doesn't seem right

[22:37] <tadzik> why not?

[22:37] <moritz_> just have a list with URLs

[22:38] <moritz_> because it's dependant information

[22:38] <moritz_> that shouldn't need to be in a repo

[22:38] <tadzik> well, one of the points was to keep META.info's in one place

[22:38] <tadzik> hmm

[22:38] <moritz_> just make a list of URLs

[22:38] <moritz_> and a perl script which fetches those URLs

[22:38] <tadzik> so URLs to META.infos?

[22:38] <moritz_> and summarizes them into a collected file

[22:38] <tadzik> I'll just make a fork and make a mess there

[22:38] <moritz_> which you can then download from modules.perl6.org

[22:39] <tadzik> hmm, right

[22:39] <tadzik> http://wklej.org/id/452456/ -- new info

[22:39] <moritz_> that's basically what is done now, except that the github API is used

[22:39] <moritz_> instead of a META.info

[22:40] <tadzik> I'll mangle a bit, and maybe post the effects to perl6-users@ later

[22:40] <tadzik> thanks for support moritz_

[22:40] <moritz_> you're very welcome

[22:40] <moritz_> bed &

[22:43] *** [Coke] left
[22:46] *** newbie joined
[22:46] *** newbie is now known as Guest81110

[22:48] <Guest81110> hi, can someone tell me what is piranha? and how is it related to perl6? 

[22:49] <sorear> never heard of it

[22:49] <sbp> where did you gear of piranha, Guest81110?

[22:49] <sbp> *hear of

[22:52] *** [Coke] joined
[22:56] *** MayDaniel joined
[22:59] <Guest81110> sorear: emm.. oh sorry I mean in rakudo source there are files with extension of .pir , what is that extension? I thought it was short for piranha which is a linux tool..

[22:59] <pumphaus> parrot intermediate representation, if I'm not mistaken

[23:00] <pumphaus> low-level parrot code, effectively

[23:00] <plobsing> pumphaus: something to that effect

[23:01] <Guest81110> low level parrot code.. but is it written in perl6?

[23:01] <plobsing> Guest81110: no. PIR is the language.

[23:03] <sbp> Guest81110: http://en.wikipedia.org/wiki/Parrot_intermediate_representation

[23:03] <sbp> that's the language

[23:06] <Guest81110> oh i see .. so there is pir and PASM.. but in rakudo they used pir..

[23:10] *** Guest81110 left
[23:14] *** GinoMan_ left
[23:21] *** MayDaniel left
[23:22] *** GinoMan joined
[23:59] *** hanekomu left
