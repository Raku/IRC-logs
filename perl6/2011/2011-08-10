[00:00] *** thou left
[00:01] *** Helios left
[00:03] *** flatwhatson joined
[00:04] *** flatwhatson left
[00:05] *** LoRe_ left
[00:05] *** LoRe joined
[00:06] *** hatseflats left
[00:07] *** hugme left
[00:07] *** tadzik left
[00:07] *** Util left
[00:19] *** PerlJam joined
[00:19] *** hatseflats joined
[00:19] *** Util joined
[00:20] *** pmichaud joined
[00:20] *** tadzik joined
[00:24] <jnthn> OK, sleep time

[00:24] <jnthn> night o/

[00:31] *** sftp left
[00:33] *** sftp joined
[00:34] *** sftp left
[00:34] *** sftp joined
[00:39] *** jaldhar left
[00:40] *** jaldhar joined
[00:41] <pmichaud> pmichaud@kiwi:~/nom$ ./perl6

[00:41] <pmichaud> > my $a = [[1,2,3], [4,5,6], [7,8,9]];  say [max] gather $a>>.&take;

[00:41] <pmichaud> 9

[00:41] <pmichaud> Util: ^^^

[00:41] <pmichaud> (spectesting nom now with that commit)

[00:42] <pmichaud> > my $a = [[1,2,3], [4,5,6], [7,8,9]];  say [*] gather $a>>.&take;

[00:42] <pmichaud> 362880

[00:42] <colomon> woah

[00:42] <pmichaud> nom:  say [*] 1..9;   # checking

[00:42] <p6eval> nom: OUTPUT«362880␤»

[00:42] <pmichaud> \o/

[00:43] <colomon> using gather and take like that flattens?

[00:43] <pmichaud> well, it grabs each non-iterable

[00:43] <pmichaud> (so yes)

[00:43] <benabik> .&take?

[00:43] * colomon 's brain is hurt by hyper take

[00:44] <pmichaud> > my $a = [[1,2], [3,4], 5];  $a>>.&say;

[00:44] <pmichaud> 3

[00:44] <pmichaud> 4

[00:44] <pmichaud> 5

[00:44] <pmichaud> 1

[00:44] <pmichaud> 2

[00:44] <TimToady> phenny: tell jnthn I'll be sitting there, but I might be writing my talk

[00:44] <phenny> TimToady: I'll pass that on when jnthn is around.

[00:44] <pmichaud> TimToady: ...if we let you.  :-) :-)

[00:45] <benabik> Is .&sub ~~ sub($_)?

[00:45] <pmichaud> benabik:    $a.&sub($b)  is essentially &sub($a, $b)

[00:45] <TimToady> the main thing is that order cannot be guaranteed with hyper take

[00:46] <TimToady> so it only works for feeding to commutative operations

[00:48] <colomon> rakudo: say 0.5.asin

[00:48] <p6eval> rakudo 922500: OUTPUT«0.523598775598299␤»

[00:53] <TimToady> nom: my @a = 1,2,Mu;  say @a>>.?succ

[00:53] <p6eval> nom: OUTPUT«3  2␤»

[00:53] <TimToady> hmm, that looks wrong

[00:53] <colomon> \o/ # sin.t just passed locally in nom

[00:53] <TimToady> a hyper is still supposed to return the values in the same order

[00:54] <TimToady> it's only side-effect order that can't be guaranteed

[00:54] <TimToady> (and take qualifies as a side effect for that purpose)

[00:54] <TimToady> pmichaud: ^^

[00:55] <TimToady> nom: my @a = 1,2,Mu;  say @a>>.?succ.perl

[00:55] <p6eval> nom: OUTPUT«Array.new(2, Nil, 3)␤»

[00:55] <TimToady> definitely wrong

[00:56] <TimToady> you can't shuffle the results

[00:56] <TimToady> you can only shuffle the order of operations

[01:04] <pmichaud> agreed, the results shouldn't be shuffled.

[01:04] <TimToady> nom: say [1,2,3]».succ

[01:04] <p6eval> nom: OUTPUT«2 3 4␤»

[01:04] <TimToady> that works...

[01:04] <pmichaud> > my @a = 1,2,Mu; say @a>>.?succ

[01:04] <pmichaud> 2 3 Nil

[01:04] <pmichaud> looks like my patch fixes that.

[01:04] <pmichaud> it's exposing another bug, though.

[01:08] *** Helios joined
[01:24] <pmichaud> spectesting new patch

[01:26] *** woosley joined
[01:29] <colomon> I'm getting 

[01:29] <colomon> ok 3 - # SKIP Null PMC access in invoke()

[01:29] <colomon> Null PMC access in invoke()

[01:29] <colomon> for t/spec/S02-names/our.t

[01:29] <colomon> known?

[01:32] <pmichaud> I'm seeing an error in our.t also.

[01:33] *** whiteknight left
[01:39] <colomon> pmichaud: I've got a patch ready to go, but it's very minorish, and i'm more than willing to wait a few for your patch and spectest again.

[01:40] <pmichaud> found another bug -- respectesting now

[01:43] <pmichaud> done!

[01:43] <pmichaud> committing, pushing.

[01:44] <dalek> roast: 43e8d10 | pmichaud++ | S03-metaops/hyper.t:

[01:44] <dalek> roast: Fudge out a possibly bogus test in hyper.t .

[01:44] <dalek> roast: review: https://github.com/perl6/roast/commit/43e8d1045b

[01:44] <pmichaud> pushed.

[01:45] <colomon> pulled

[01:45] <colomon> :)

[01:48] <dalek> rakudo/nom: f621500 | pmichaud++ | src/core/ (3 files):

[01:48] <dalek> rakudo/nom: Refactor handling of dispatch:<hyper> (>>.foo) to preserve structure.

[01:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f621500eb1

[01:51] <pmichaud> afk for a while

[02:03] *** shinobicl_ joined
[02:04] <shinobicl_> rakudo: say now.WHAT;

[02:04] <p6eval> rakudo 922500: OUTPUT«Instant()␤»

[02:05] <dalek> rakudo/nom: 9357e76 | (Solomon Foster)++ | src/core/ (4 files):

[02:05] <dalek> rakudo/nom: Add Real.asin, Cool.sin, Cool.asin, Complex.sin, Complex.asin, and protos / multi subs for asin.

[02:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9357e76a2c

[02:07] <dalek> rakudo/nom: 1f48277 | (Solomon Foster)++ | t/spectest.data:

[02:07] <dalek> rakudo/nom: Turn on sin.t.

[02:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1f48277c7a

[02:24] <pmichaud> nom: my $m = [[1,2,3], [4,5,6], [7,8,9]];  say [*] gather $m>>.&take;

[02:24] <p6eval> nom: OUTPUT«362880␤»

[02:24] <pmichaud> nom: my $m = [[1,2,3], [4,5,6], [7,8,9]];  say [max] gather $m>>.&take;

[02:24] <p6eval> nom: OUTPUT«9␤»

[02:24] <pmichaud> nom: my $m = [[1,2,3], [4,5,6], [7,8,9]];  $m>>.say;

[02:24] <p6eval> nom: OUTPUT«8␤7␤9␤6␤4␤5␤1␤3␤2␤»

[02:26] *** bbkr left
[02:26] *** bbkr joined
[02:26] <shinobicl_> hi, how could i get the current year?

[02:27] <sorear> qx[date +%Y]

[02:27] <TimToady> niecza: say qx[date +%Y]

[02:27] <p6eval> niecza v8-51-g785e335: OUTPUT«Unhandled exception: System.Exception: Unable to find lexical rungather in mainline␤  at Niecza.CLRBackend.NamProcessor.ResolveLex (System.String name, Boolean upf, System.Int32& uplevel, Boolean core) [0x00000] in <filename unknown>:0 ␤  at Niecza.CLRBacke…

[02:27] <benabik> rakudo: say now

[02:27] <p6eval> rakudo 922500: OUTPUT«Instant:2011-08-10T02:27:38.031032Z␤»

[02:27] <shinobicl_> now is an instant... but i can't convert it to a datetime

[02:28] *** Reaganomicon left
[02:28] <TimToady> rakudo: say Date.new

[02:28] <p6eval> rakudo 922500: OUTPUT«0000-00-00␤»

[02:28] <TimToady> rakudo: say Date.new(now)

[02:28] <p6eval> rakudo 922500: OUTPUT«Method 'year' not found for invocant of class 'Instant'␤  in 'Date::new' at line 7281:src/gen/core.pm␤  in main program body at line 22:/tmp/9LWzU1BZnE␤»

[02:28] <sorear> rakudo: say ~(now ~~ /\d+/)

[02:28] <p6eval> rakudo 922500: OUTPUT«Method 'match' not found for invocant of class 'Instant'␤  in 'Regex::ACCEPTS' at line 6418:src/gen/core.pm␤  in main program body at line 22:/tmp/U0mXhNPeXN␤»

[02:28] <sorear> rakudo: say ~(~now ~~ /\d+/)

[02:28] <p6eval> rakudo 922500: OUTPUT«2011␤»

[02:28] <TimToady> don't do that

[02:29] <pmichaud> rakudo:  say Date.now

[02:29] <p6eval> rakudo 922500: OUTPUT«Method 'now' not found for invocant of class ''␤  in main program body at line 22:/tmp/a7zf9qFU12␤»

[02:30] <pmichaud> rakudo: say DateTime.now

[02:30] <p6eval> rakudo 922500: OUTPUT«2011-08-10T02:30:03Z␤»

[02:30] <shinobicl_> rakudo: say (DateTime.now).year;

[02:30] <p6eval> rakudo 922500: OUTPUT«2011␤»

[02:30] <shinobicl_> :D

[02:30] <TimToady> rakudo: say DateTime.now.year

[02:30] <p6eval> rakudo 922500: OUTPUT«2011␤»

[02:30] <TimToady> don't need parens

[02:30] <benabik> nom: say DateTime.new.year # does this work yet?

[02:30] <p6eval> nom: OUTPUT«Method 'year' not found for invocant of class 'DateTime'␤current instr.: '_block1002' pc 75 ((file unknown):71294426) (/tmp/ngaondTw51:1)␤»

[02:30] <benabik> nome

[02:30] <shinobicl_> cool... thanks!!

[02:30] <benabik> *nope

[02:31] <TimToady> perl6: say Happy.new.year

[02:31] <p6eval> niecza v8-51-g785e335: OUTPUT«===SORRY!===␤␤Undeclared name:␤ 'Happy' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 685 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1136 (STD P6.comp_unit @ 36) ␤  at…

[02:31] <p6eval> ..rakudo 922500: OUTPUT«Could not find sub &Happy␤  in main program body at line 22:/tmp/wj2FIQNu73␤»

[02:31] <p6eval> ..pugs: OUTPUT«*** No such subroutine: "&Happy"␤    at /tmp/NXz8YLeq75 line 1, column 5 - line 2, column 1␤»

[02:31] <pmichaud> nom: my @a = 1,2,Mu;  say @a>>.?succ;

[02:31] <p6eval> nom: OUTPUT«2 3 Nil␤»

[02:31] <pmichaud> \o/

[02:32] *** jaldhar left
[02:32] *** donri left
[02:32] *** jaldhar joined
[02:33] *** rdesfo joined
[02:36] *** crked joined
[02:37] <TimToady> phenny tell moritz it would appear that the ir clog completely messed up the encoding for http://irclog.perlgeek.de/perl6/2011-08-10#i_4254641

[02:37] <TimToady> phenny: tell moritz it would appear that the ir clog completely messed up the encoding for http://irclog.perlgeek.de/perl6/2011-08-10#i_4254641

[02:37] <phenny> TimToady: I'll pass that on when moritz is around.

[02:39] <colomon> nom: asin(0.5)

[02:39] <p6eval> nom: OUTPUT«Could not find sub &asin␤current instr.: '_block1002' pc 63 ((file unknown):136) (/tmp/Bo_qDoVZix:1)␤»

[02:53] <TimToady> nom: asin(0.5)

[02:53] <p6eval> nom: OUTPUT«Could not find sub &asin␤current instr.: '_block1002' pc 63 ((file unknown):136) (/tmp/cG92dxdRac:1)␤»

[02:56] <shinobicl_> rakudo: my @weekdays = <Mon Tue Wed Thu Fri Sat Sun>; my $day = 'Thu';       with those 2 variables, is there a way i can know which position is 'Thu' in the @weekday array?

[02:56] <p6eval> rakudo 922500: OUTPUT«===SORRY!===␤Confused at line 22, near "with those"␤»

[03:12] <TimToady> rakudo: my @weekdays = <Mon Tue Wed Thu Fri Sat Sun>; my $day = 'Thu'; say @weekdays.pairs.grep: *.value eq $day

[03:12] *** wolfman2000 left
[03:12] <p6eval> rakudo 922500: OUTPUT«3 Thu␤»

[03:13] <TimToady> rakudo: my @weekdays = <Mon Tue Wed Thu Fri Sat Sun>; my $day = 'Thu'; my %inv = @weekdays.kv.reverse; say %inv{$day}

[03:13] <p6eval> rakudo 922500: OUTPUT«3␤»

[03:13] <TimToady> there's two ways

[03:14] <TimToady> rakudo: my @weekdays = <Mon Tue Wed Thu Fri Sat Sun>; my $day = 'Thu'; my $inv = enum @weekdays; say $inv{$day}

[03:14] <p6eval> rakudo 922500: OUTPUT«Could not find sub &enum␤  in main program body at line 22:/tmp/kfsc4UgbV3␤»

[03:14] <TimToady> perl6: my @weekdays = <Mon Tue Wed Thu Fri Sat Sun>; my $day = 'Thu'; my $inv = enum @weekdays; say $inv{$day}

[03:15] <p6eval> niecza v8-51-g785e335: OUTPUT«===SORRY!===␤␤Undeclared routine:␤      'enum' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 685 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1136 (STD P6.comp_unit @ 36) ␤  …

[03:15] <p6eval> ..pugs: OUTPUT«*** No such subroutine: "&enum"␤    at /tmp/z7bwfTH6U0 line 1, column 69-88␤»

[03:15] <p6eval> ..rakudo 922500: OUTPUT«Could not find sub &enum␤  in main program body at line 22:/tmp/rK7iU528Lr␤»

[03:15] <TimToady> perl6: my @weekdays = <Mon Tue Wed Thu Fri Sat Sun>; my $day = 'Thu'; my $inv = enum Weekdays @weekdays; say $inv{$day}

[03:15] <p6eval> rakudo 922500: OUTPUT«Could not find sub &Weekdays␤  in main program body at line 22:/tmp/f739KiQkqi␤»

[03:15] <p6eval> ..niecza v8-51-g785e335: OUTPUT«===SORRY!===␤␤Undeclared name:␤ 'Weekdays' used at line 1␤Undeclared routine:␤  'enum' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 685 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/S…

[03:15] <p6eval> ..pugs: OUTPUT«*** No such subroutine: "&enum"␤    at /tmp/LCCrlfShwg line 1, column 69-97␤»

[03:15] <TimToady> hmm

[03:16] <TimToady> nom: my @weekdays = <Mon Tue Wed Thu Fri Sat Sun>; my $day = 'Thu'; my $inv = enum Weekdays @weekdays; say $inv{$day}

[03:16] <p6eval> nom: OUTPUT«Could not find sub &Weekdays␤current instr.: '_block1002' pc 126 ((file unknown):32288937) (/tmp/QQqP1h3NRO:1)␤»

[03:16] <TimToady> nom: my @weekdays = <Mon Tue Wed Thu Fri Sat Sun>; my $day = 'Thu'; enum Weekdays @weekdays; say Weekdays{$day}

[03:16] <p6eval> nom: OUTPUT«Could not find sub &Weekdays␤current instr.: '_block1002' pc 123 ((file unknown):154) (/tmp/HYwGeB6HK2:1)␤»

[03:17] <TimToady> nom: constant @weekdays = <Mon Tue Wed Thu Fri Sat Sun>; my $day = 'Thu'; enum Weekdays @weekdays; say Weekdays{$day}

[03:17] <p6eval> nom: OUTPUT«Cannot handle constant with non-literal value yet at line 1, near "= <Mon Tue"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23611 (src/stage2/gen/NQPHLL.pir:6348) (src/stage2/gen/NQPHLL.pm:329)␤»

[03:17] <TimToady> niecza: constant @weekdays = <Mon Tue Wed Thu Fri Sat Sun>; my $day = 'Thu'; enum Weekdays @weekdays; say Weekdays{$day}

[03:17] <p6eval> niecza v8-51-g785e335: OUTPUT«===SORRY!===␤␤Undeclared name:␤ 'Weekdays' used at line 1,1␤Undeclared routine:␤        'enum' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 685 (CORE die @ 2) ␤  at /home/p6eval/niecza/src…

[03:17] <TimToady> Dear nom:, <Mon Tue Wed Thu Fri Sat Sun> is a literal value

[03:18] <shinobicl_> enum is an operator too?

[03:18] <TimToady> supposed to be

[03:19] <benabik> nom: constant @const = <literal value>

[03:19] <p6eval> nom: OUTPUT«Cannot handle constant with non-literal value yet at line 1, near "= <literal"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23611 (src/stage2/gen/NQPHLL.pir:6348) (src/stage2/gen/NQPHLL.pm:329)␤»

[03:19] <benabik> I tried to give it literal value.

[03:20] *** fbass left
[03:20] <TimToady> shinobicl_: see http://perlcabal.org/syn/S12.html#Anonymous_Enumerations

[03:20] *** obra joined
[03:21] <pmichaud> nom currently compiles <literal value>  into  &infix:<,>("literal", "value")

[03:22] *** obra left
[03:22] <pmichaud> I suppose we could make that compile-time somehow.

[03:22] <TimToady> that's what constant folding is supposed to do

[03:23] <shinobicl_> thanks TimToady

[03:23] <TimToady> that and a lot more

[03:23] <pmichaud> I'm not sure the serialization context knows how to serialize Parcels yet

[03:23] <djanatyn> Hey, TimToady.

[03:23] <djanatyn> Are you coming to the Pittsburgh Perl Workshop?

[03:23] <djanatyn> Also, sorry for being kind of absent the last couple of days. ^_^

[03:23] *** Su-Shee_ joined
[03:24] <djanatyn> My interest in Perl 6 is still there - it's just that I'm preparing to participate in a competition using SDL and Perl 5 this month

[03:24] <sorear> hello

[03:24] <djanatyn> hey sorear.

[03:24] *** Su-Shee left
[03:25] <TimToady> djanatyn: no, I'm trying to stay home this autumn for various reasons

[03:25] <djanatyn> Ah, there's no place like home.

[03:26] <djanatyn> I'm thinking about attending - it's only $40 for students.

[03:27] *** shinobicl_ left
[03:32] *** daniel-s joined
[03:36] *** fbass joined
[03:38] *** fbass left
[03:56] *** fbass joined
[03:57] *** crked left
[04:04] *** thou joined
[04:09] <dalek> features: 699e88b | larry++ | features.json:

[04:09] <dalek> features: Refer to new coercive type spec

[04:09] <dalek> features: review: https://github.com/perl6/features/commit/699e88bda0

[04:21] *** rdesfo left
[04:24] <moritz> good morning

[04:24] <phenny> moritz: 02:37Z <TimToady> tell moritz it would appear that the ir clog completely messed up the encoding for http://irclog.perlgeek.de/perl6/2011-08-10#i_4254641

[04:27] *** soh_cah_toa left
[04:28] <moritz> unfortunately that's a known problem - if the IRC server cuts off a message inside a UTF-8 multi byte sequence, decoding the line as UTF-8 fails

[04:28] <moritz> which happens deep inside POE somewhere, and I have no idea how to change that

[04:31] *** birdwindupbird joined
[04:48] *** fbass left
[04:48] *** fbass joined
[04:49] *** Helios left
[04:53] *** LoRe left
[04:54] *** Helios joined
[04:54] *** fbass left
[04:54] *** fbass joined
[04:55] *** fbass left
[04:58] <tadzik> good morning

[04:58] <tadzik> my patch broke the build? Weirdness

[04:58] <tadzik> sorry for that

[05:02] *** SHODAN left
[05:13] *** sorear joined
[05:13] *** SHODAN joined
[05:14] <moritz> t/spec/S02-names/our.rakudo seems to abort with a Null PMC access

[05:15] *** Mowah joined
[05:24] *** LoRe joined
[05:26] <dalek> roast: b059fe5 | moritz++ | S02-builtin_data_types/hash.t:

[05:26] <dalek> roast: unfudge hash.t

[05:26] <dalek> roast: 

[05:26] <dalek> roast: This is a bit messy, since fudge miscounts the tests after the unfudge,

[05:26] <dalek> roast: so sprinkle in a few #?DOES lines

[05:26] <dalek> roast: review: https://github.com/perl6/roast/commit/b059fe52e8

[05:28] *** alyx left
[05:34] *** aindilis left
[06:09] *** SHODAN left
[06:09] <tadzik> nom: my enum A <a b c>; say +c

[06:09] <p6eval> nom: OUTPUT«Null PMC access in invoke()␤current instr.: 'Numeric' pc 766946 (src/gen/CORE.setting.pir:197632) (src/gen/CORE.setting:1397)␤... call repeated 1 times␤»

[06:09] *** kjeldahl left
[06:22] <tadzik> seen flussence 

[06:22] <aloha> flussence was last seen in #perl6 7 hours 14 mins ago saying "rakudo: my @a = (4, 'q', False); say @a».?sqrt".

[06:22] *** wtw joined
[06:24] *** Su-Shee_ is now known as Su-Shee

[06:25] <tadzik> nom: Pair.new(2, "foo").perl.say

[06:25] <p6eval> nom: OUTPUT«Too many positional parameters passed; got 3 but expected 1␤current instr.: 'new' pc 805403 (src/gen/CORE.setting.pir:215715) (src/gen/CORE.setting:3947)␤»

[06:25] <tadzik> nom: Pair.new(2 => "foo").perl.say

[06:25] <p6eval> nom: OUTPUT«Too many positional parameters passed; got 2 but expected 1␤current instr.: 'new' pc 805403 (src/gen/CORE.setting.pir:215715) (src/gen/CORE.setting:3947)␤»

[06:26] <tadzik> nom: Pair.new(:key(2), :value("foo")).perl.say

[06:26] <p6eval> nom: OUTPUT«2 => "foo"␤»

[06:31] *** im2ee joined
[06:35] *** kjeldahl joined
[06:35] *** kjeldahl left
[06:49] *** Mowah_ joined
[06:50] *** dorlamm joined
[06:51] *** kjeldahl joined
[06:52] *** dorlamm left
[06:59] *** kjeldahl left
[07:01] *** koban joined
[07:03] *** benabik_ joined
[07:04] *** benabik left
[07:04] *** benabik_ is now known as benabik

[07:09] *** dual left
[07:18] *** hanekomu joined
[07:38] *** wamba joined
[07:42] *** agentzh joined
[07:42] *** Helios left
[07:42] *** nbrown left
[07:44] *** im2ee left
[07:45] *** LoRe left
[07:48] <jnthn> monring, #perl6

[07:48] <phenny> jnthn: 00:44Z <TimToady> tell jnthn I'll be sitting there, but I might be writing my talk

[07:49] <moritz> \o jnthn 

[07:49] <sorear> o/ jnthn

[07:49] *** sftp_ joined
[07:49] *** Helios joined
[07:50] <jnthn> nom: my enum A <a b c>; say c

[07:50] <p6eval> nom: OUTPUT«Null PMC access in invoke()␤current instr.: 'gist' pc 767051 (src/gen/CORE.setting.pir:197661) (src/gen/CORE.setting:1403)␤... call repeated 1 times␤»

[07:50] <jnthn> nom: enum A <a b c>; say c

[07:50] <p6eval> nom: OUTPUT«Null PMC access in invoke()␤current instr.: 'gist' pc 767051 (src/gen/CORE.setting.pir:197661) (src/gen/CORE.setting:1403)␤... call repeated 1 times␤»

[07:50] <jnthn> wtf

[07:50] <jnthn> nom: enum A <a b c>; say A::c

[07:50] <moritz> nom: enum A <a b c>; say c.Str

[07:50] <p6eval> nom: OUTPUT«Null PMC access in invoke()␤current instr.: 'gist' pc 767051 (src/gen/CORE.setting.pir:197661) (src/gen/CORE.setting:1403)␤... call repeated 1 times␤»

[07:50] <p6eval> nom: OUTPUT«Null PMC access in invoke()␤current instr.: 'Str' pc 767598 (src/gen/CORE.setting.pir:197922) (src/gen/CORE.setting:1432)␤... call repeated 1 times␤»

[07:50] <jnthn> nom: enum A <a b c>; say A

[07:50] <p6eval> nom: OUTPUT«A()␤»

[07:50] <moritz> why tf doesn't that break many more tests?

[07:51] <jnthn> That's what I'm wondering.

[07:53] *** sftp left
[07:54] <tadzik> LOL

[07:54] <tadzik> http://feather.perl6.nl:3000/s26.html

[07:56] <jnthn> tadzik: You wrote a Pod::To::Html? ;)

[07:56] <tadzik> jnthn: yeah :)

[07:56] <moritz> whoa there

[07:56] <jnthn> \o/

[07:56] <jnthn> nice!

[07:57] <tadzik> I tried to resemble the rest of the synopses

[08:02] <moritz> nom: enum A <a b c>; say a.key

[08:02] <p6eval> nom: OUTPUT«a␤»

[08:04] <jnthn> nom: enum A <a b c>; say a == 0

[08:04] <p6eval> nom: OUTPUT«Bool::True␤»

[08:04] <jnthn> nom: enum A <a b c>; say a == 1

[08:04] <p6eval> nom: OUTPUT«Bool::False␤»

[08:06] <jnthn> nom: enum A <a b c>; say a.Int

[08:06] <p6eval> nom: OUTPUT«Null PMC access in invoke()␤current instr.: 'Int' pc 767496 (src/gen/CORE.setting.pir:0) (src/gen/CORE.setting:1421)␤... call repeated 1 times␤»

[08:08] <tadzik> This document was successfully checked as HTML 4.01 Transitional!

[08:09] <jnthn> nom: enum A <a b c>; say a.enums

[08:09] <p6eval> nom: OUTPUT«("a" => 0, "b" => 1, "c" => 2).hash␤»

[08:09] <jnthn> There's no pattern to this :S

[08:09] <jnthn> nom: enum A <a b c>; say a.kv

[08:09] <p6eval> nom: OUTPUT«Null PMC access in invoke()␤current instr.: 'kv' pc 767141 (src/gen/CORE.setting.pir:197710) (src/gen/CORE.setting:1407)␤... call repeated 1 times␤»

[08:10] <jnthn> oh, wait

[08:10] <jnthn> aah

[08:12] <mberends> ++tadzik++ # Pod6 to HTML!!

[08:12] <jnthn> Pattern is anything that uses ::?CLASS

[08:15] <jnthn> nqp: say(3 +& 2)

[08:15] <p6eval> nqp: OUTPUT«2␤»

[08:16] *** LoRe joined
[08:29] <dalek> rakudo/nom: 7b1fa47 | jonathan++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[08:29] <dalek> rakudo/nom: When we do generic instantiation of a parameter, clear the nominal generic flag if needed.

[08:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7b1fa47800

[08:31] <jnthn> That should fix the enums thing.

[08:35] *** Chillance joined
[08:49] *** mj41 joined
[08:50] *** dakkar joined
[08:50] <tadzik> https://github.com/tadzik/Pod-To-HTML for the interested. Sadly, HTML::Template is not working on nom yet

[08:56] <tadzik> loliblug! http://ttjjss.wordpress.com/2011/08/10/s26-in-html/

[08:59] *** wamba left
[09:03] <tadzik> mberends: it would be even better to make it Pod6 in HTML6 :)

[09:04] <mberends> :-)

[09:05] *** jaldhar left
[09:05] <mberends> lolicommented!

[09:07] <moritz> tadzik++

[09:07] <tadzik> lolireddited too http://www.reddit.com/r/perl/comments/jef3x/perl_6_synopsis_26_now_available_in_html/

[09:07] <moritz> tadzik: should I mirror that on perlcabal.org/syn/ ?

[09:08] <tadzik> moritz: if you think it's good enough, sure

[09:08] <tadzik> it still has some bugs it seems, not only nyi things

[09:08] <moritz> tadzik: it's a lot better than what we have now (aka nothing)

[09:08] *** SHODAN joined
[09:08] <tadzik> moritz: maybe it's worth noting that the html version may be incomplete

[09:09] <tadzik> otoh, it will get suprise proofreading maybe :)

[09:10] <tadzik> hmm

[09:11] <tadzik> we could now write a Book chapter about documenting stuff

[09:11] <moritz> http://perlcabal.org/syn/S26.html

[09:11] <tadzik> moritz++

[09:12] <tadzik> moritz: is this a redirect to a feather page?

[09:12] <moritz> no, a mirror

[09:12] <tadzik> okay

[09:12] <moritz> wait a sec...

[09:12] <tadzik> I'll notify you if I'll improve something noticable

[09:13] <moritz> tadzik: what's your username on feather?

[09:13] <tadzik> moritz: tjs

[09:14] <tadzik> rakudo: Whatever but Cool

[09:14] <p6eval> rakudo 922500: OUTPUT«Attempt to use rebless_subclass where the new class was not a subclass␤  in 'infix:<does>' at line 1:src/gen/core.pm␤  in 'infix:<does>' at line 634:src/gen/core.pm␤  in 'infix:<but>' at line 638:src/gen/core.pm␤  in main program body at line 22:/tmp/KL8CGLqYIs␤»…

[09:15] <moritz> tadzik: you should now have write access to /home/pugscode/syn/ (you might need to re-login for it to work)

[09:15] <tadzik> moritz: kthx

[09:15] <moritz> tadzik: if you have a new version of S26.html, please put it there (note the upper-case 'S')

[09:15] <tadzik> okay

[09:19] <tadzik> moritz: how do you think we should support --doc=html? Shipping Pod::To::HTML? Warning if it's not installed? Can we do it any smarter than specialcasing of any --doc=argument?

[09:21] <dalek> mu: 9fd3e28 | moritz++ | docs/feather/syn_index.html:

[09:21] <dalek> mu: [pugscode] link to HTML version of S26

[09:21] <dalek> mu: review: https://github.com/perl6/mu/commit/9fd3e287b9

[09:21] <moritz> tadzik: not sure

[09:21] <moritz> maybe pod renderers can register with Pod::To when they load

[09:22] <moritz> but I'm fine with special-casing for now

[09:23] <tadzik> maybe we should ship a Pod::To::Any module, containing a pod2any(@pod, $what) sub, which will do the dirty work

[09:23] <tadzik> then we move it out of the compiler

[09:24] *** wamba joined
[09:27] *** fbass joined
[09:27] *** woosley left
[09:43] *** thou left
[09:44] <lue> a superbrief hello world o/

[09:44] *** noganex joined
[09:44] <jnthn> hellue!

[09:44] <lue> ooh, html version of S26? Finally!

[09:45] <lue> I came to mention I started documenting the Perl 6 type hierarchy: https://github.com/lue/Perl-6-Type-Hierarchy

[09:45] <moritz> except it's not a hierarchy :-)

[09:46] *** [particle]1 joined
[09:46] <moritz> lue: btw http://de.wikipedia.org/wiki/NUMA

[09:46] *** eternaleye_ joined
[09:46] <lue> I'll have to look at that tomorrow.

[09:47] *** [particle] left
[09:47] *** noganex_ left
[09:47] *** daemon left
[09:47] <lue> Or, technically, later today. It's 3am here, I should go to bed. 'night all o/

[09:47] <moritz> sleep well

[09:48] <pmichaud> good morning, #perl6

[09:48] *** Mowah left
[09:48] <moritz> nom: my Int $x; $x = Nil; say $x.perl

[09:48] <p6eval> nom: OUTPUT«Type check failed in assignment to '$x'; expected 'Int' but got 'Nil'␤current instr.: '_block1002' pc 63 ((file unknown):169) (/tmp/R_7emCJPxe:1)␤»

[09:48] <jnthn> monring, pmichaud 

[09:48] <moritz> \o pmichaud 

[09:49] <jnthn> moritz: ah, I didn't get Nil assignment finished up

[09:49] *** eternaleye left
[09:49] *** Mowah joined
[09:49] *** daemon joined
[09:49] <moritz> jnthn: just wondering, not wanting to urge you or anything

[09:49] <jnthn> :)

[09:51] <moritz> nom: say 1e0.cosh

[09:51] <p6eval> nom: OUTPUT«1.54308063481524␤»

[09:51] <moritz> nom: say 1i.asin

[09:51] <p6eval> nom: OUTPUT«0 + 0.881373587019543i␤»

[09:51] <moritz> nom: say 1i.cos

[09:51] <p6eval> nom: OUTPUT«Method 'cos' not found for invocant of class 'Complex'␤current instr.: '_block1002' pc 63 ((file unknown):136) (/tmp/LTbfCz0F89:1)␤»

[10:05] <dalek> nqp: b4e475a | pmichaud++ | src/NQPQ/ (3 files):

[10:05] <dalek> nqp: Bring NQPQ up-to-date with latest NQP compiler.

[10:05] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b4e475a40e

[10:13] *** fbass left
[10:14] <moritz> does github offer me an overview of open pull request across all of my repos?

[10:20] *** PacoLinux__ joined
[10:23] *** jedai_ joined
[10:23] *** LoRe_ joined
[10:23] *** pernatiy left
[10:24] *** MayDaniel joined
[10:24] *** MayDaniel left
[10:24] *** MayDaniel joined
[10:27] *** PacoLinux left
[10:27] *** daemon left
[10:27] *** mj41 left
[10:27] *** jedai left
[10:27] *** jdhore left
[10:27] *** broquaint left
[10:27] *** LoRe left
[10:27] *** TimToady left
[10:27] *** PacoLinux__ is now known as PacoLinux

[10:27] *** daemon joined
[10:30] *** broquaint joined
[10:30] *** TimToady joined
[10:31] *** tzhs joined
[10:33] *** hanekomu left
[10:35] *** mj41 joined
[10:35] *** jdhore joined
[10:40] <dalek> nqp: 6262ccf | pmichaud++ | src/ (2 files):

[10:40] <dalek> nqp: Eliminate "#= open" from regex_declarator, restore <sym> handling.

[10:40] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6262ccfca5

[10:44] <jnthn> ooh, NQPQ :)

[10:45] <pmichaud> it's temporary

[10:45] <pmichaud> once I have all of the protoregex stuff working again, NQPQ will become NQP :)

[10:46] <pmichaud> but I need a way to keep track of "NQP using (old) Regex" versus "NQP using (new) QRegex"

[10:46] <jnthn> *nod*

[10:46] <jnthn> Just happy to see patches landing :)

[10:49] *** im2ee joined
[10:57] *** Reaganomicon joined
[11:00] <takadonet> morning all

[11:04] *** hanekomu joined
[11:04] <tadzik> hello takadonet 

[11:10] *** Mowah_ left
[11:11] *** Alias joined
[11:12] *** pernatiy joined
[11:16] *** amkrankruleuen left
[11:16] *** amkrankruleuen joined
[11:22] <flussence> yay

[11:22] <flussence> tadzik++

[11:25] <dalek> perl6.org: bef666b | moritz++ | source/index.html:

[11:25] <dalek> perl6.org: markup fix

[11:25] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/bef666b595

[11:27] <dalek> perl6.org: ca3fd02 | moritz++ | source/whatever/index.html:

[11:27] <dalek> perl6.org: markup fix

[11:27] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/ca3fd02565

[11:29] <dalek> features: 2bf2424 | moritz++ | template.html:

[11:29] <dalek> features: add forgotten </a>

[11:29] <dalek> features: review: https://github.com/perl6/features/commit/2bf2424aa5

[11:31] *** odoacre left
[11:35] <moritz> http://www.amazon.com/exec/obidos/ASIN/1590598334/quelology-20 has this book ever been published?

[11:35] <moritz> it shows March 2010 as publication date, and "out of print"

[11:55] <pmichaud> I don't believe it's ever been published, no.

[11:56] <pmichaud> google books seems to have something for it, though.  I did a search of "beginning perl 6 james lee"

[11:57] <moritz> no hit here

[11:57] <moritz> might be a location thingy

[11:57] * moritz hates the "intelligent" web

[11:59] <pmichaud> oh, looks like google books just has "Beginning Perl", and the book has a section on "Perl 6".  Weird.

[11:59] <pmichaud> although it does mention Rakudo

[12:00] * tadzik hates the different web content for different countries

[12:00] * jnthn finally got started on his YAPC talk

[12:01] <pmichaud> http://www.apress.com/9781590598337

[12:01] <pmichaud> oh, hmmm.

[12:01] <pmichaud> https://www.apress.com/index.php/author/author/view/id/1706

[12:02] <dalek> rakudo/nom: 95b1f22 | moritz++ | / (5 files):

[12:02] <dalek> rakudo/nom: finish cos and acos enough to run the tests

[12:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/95b1f220ae

[12:03] *** timbunce joined
[12:03] * jnthn wonders how many tests we get back from those trig additions :)

[12:03] <moritz> jnthn: don't hold your breath, I'm working on atan now :-)

[12:04] <jnthn> :)

[12:04] <jnthn> moritz++

[12:07] <colomon> jnthn: not nearly so many tests as we used to have....

[12:08] <moritz> oh, and much of it is based on colomon++'s excellent work, I should add

[12:09] <moritz> though I should probably leave trig alone for a while, and focus on getting backtraces back

[12:09] <moritz> that seems much more important right now

[12:09] <colomon> the trig functions are really LHF at this point, I think.  :)

[12:10] <moritz> I've been rewriting Complex.atan not to use i

[12:11] <moritz> and forgot that postfix i is probably OK, just not 1i

[12:11] <moritz> (in the setting, that is)

[12:11] <pmichaud> would 1.i work, ooc?

[12:11] <pmichaud> nom:  say 1.i

[12:11] <p6eval> nom: OUTPUT«Method 'i' not found for invocant of class 'Int'␤current instr.: '_block1002' pc 63 ((file unknown):136) (/tmp/DavkuB3tB4:1)␤»

[12:11] <moritz> nom: say (1)i

[12:11] <p6eval> nom: OUTPUT«0 + 1i␤»

[12:11] <moritz> pmichaud: it's a postfix, not a method

[12:11] <pmichaud> right

[12:12] <pmichaud> but one can invoke (some?) postfixes using a dot, iirc.

[12:12] <pmichaud> e.g.   $a.++   is still a postfix

[12:13] <pmichaud> nom:  my $a;  $a.++;  say $a;

[12:13] <p6eval> nom: OUTPUT«Could not find sub &postfix:<.>␤current instr.: '_block1002' pc 65 ((file unknown):8253106) (/tmp/jOAdoTKwvk:1)␤»

[12:13] <pmichaud> oh, guess not.

[12:13] <moritz> obviously that won't work with identifiers anyway

[12:13] <colomon> nom: say 1..i

[12:13] <p6eval> nom: OUTPUT«Could not find sub &i␤current instr.: '_block1002' pc 62 ((file unknown):48608376) (/tmp/OfUXd5ZgYH:1)␤»

[12:13] <pmichaud> niecza:  my $a;  $a.++; say $a;

[12:13] <p6eval> niecza v8-51-g785e335: OUTPUT«1␤»

[12:14] <moritz> regarding exceptions and backtraces

[12:15] <moritz> the exception object needs to get hold of the backtrace somehow

[12:16] <moritz> so the runtime should call $ex.with-backtrace($bt) before storing the exception in $! (or $_ inside a CATCH block), and store the result of that method call

[12:16] <moritz> so the author of the exception can either go with mutable exceptions that return self in that method

[12:17] <moritz> or with immutable exceptions that can clone + add bt in one step

[12:17] <moritz> does that sound sane?

[12:17] <moritz> (the other day sorear++ asked if exceptions were mutable or immutable - that setup would allow both)

[12:17] <pmichaud> don't Parrot exceptions hold a backtrace already?

[12:18] <pmichaud> I'm pretty sure exceptions are mutable, since we need to be able to mark them as "handled".  Unless there's a handled and unhandled list

[12:18] <moritz> just to be clear, that's a general Perl 6 design question

[12:18] <moritz> and yes, a parrot exception has a bt

[12:22] *** JimmyZ joined
[12:22] *** am0c joined
[12:23] *** bluescreen10 joined
[12:30] <moritz> sorry, I accidentally included a bit of unrelated changes in the last commit

[12:30] <dalek> rakudo/nom: 8f74caf | moritz++ | NOMMAP.markdown:

[12:30] <dalek> rakudo/nom: two more TODOs for NOMMAP

[12:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8f74caf006

[12:30] <dalek> rakudo/nom: 48a3aed | moritz++ | / (6 files):

[12:30] <dalek> rakudo/nom: tan, atan

[12:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/48a3aed7e8

[12:30] <moritz> (which I haven't even tested yet if they compile)

[12:31] * moritz wishes his brain was as fast as his fingers

[12:31] <takadonet> nom : subset DNA of Str where { $_ ~~ m:i/^<[ATGC]>+$/ };  my DNA $test = 'ATaa';

[12:31] <moritz> testing now, if it doesn't compile I can revert it partially

[12:32] <moritz> takadonet: space before colon considered harmful

[12:32] <moritz> takadonet: and afaict nom's regexes don't have :i implemented yet

[12:33] <pmichaud> I suspect that :i inside the regex works.

[12:33] * moritz suspects it doesn't

[12:33] <moritz> nom: say 'A' ~~ /:i a/

[12:33] <p6eval> nom: OUTPUT«␤»

[12:34] <moritz> nom: say 'A' ~~ /:i A/

[12:34] <p6eval> nom: OUTPUT«A␤»

[12:34] <pmichaud> or, maybe not.

[12:34] <pmichaud> will fix.

[12:34] <moritz> note :r and :s work on the outside too

[12:35] <pmichaud> okay

[12:35] <pmichaud> will fix

[12:37] <kthakore_> djanatyn++ btw I am trying to clear my schedule to get perl6 + SDL going

[12:37] <kthakore_> hello folks

[12:39] *** im2ee left
[12:41] <moritz> hi kthakore_ 

[12:42] *** mj41 left
[12:52] *** drbean left
[13:00] *** [Coke] left
[13:02] *** [Coke] joined
[13:03] <dalek> nqp: 32fb34c | pmichaud++ | src/ (2 files):

[13:03] <dalek> nqp: nqpq: protoregex stub.

[13:03] <dalek> nqp: review: https://github.com/perl6/nqp/commit/32fb34c46f

[13:03] <dalek> nqp: 0ef4235 | pmichaud++ | src/NQPQ/Actions.pm:

[13:03] <dalek> nqp: nqpq: Remove obsolete "= open" key code.

[13:03] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0ef4235d2f

[13:03] <dalek> nqp: 285fe4f | pmichaud++ | src/QRegex/P6Regex/ (2 files):

[13:03] <dalek> nqp: Split out parsing of sequential/parallel alternation and conjunction.

[13:03] <dalek> nqp: review: https://github.com/perl6/nqp/commit/285fe4fea4

[13:03] <dalek> nqp: 4c6978d | pmichaud++ | src/Q (2 files):

[13:03] <dalek> nqp: Create separate 'alt', 'altseq', 'conj', 'conjseq' :rxtype nodes.

[13:03] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4c6978d11a

[13:04] *** woosley joined
[13:08] <moritz> https://gist.github.com/1136753 # I can't understand that output at all

[13:13] <jnthn> moritz: Note that method call returns are automatically marshalled

[13:13] <jnthn> But the actually issue is that you get an RPA of Parrot hashes back

[13:13] <jnthn> So the error is happening when you try to access that.

[13:14] <moritz> oh

[13:14] <moritz> when I call .WHAT on the result without the perl6ize_type, I get Parcel back

[13:14] <moritz> that makes a lot of sense

[13:15] <moritz> thanks jnthn 

[13:20] *** [particle]1 is now known as [particle]

[13:24] *** REPLeffect left
[13:25] *** REPLeffect joined
[13:28] <[Coke]> colomon++ # triggy

[13:30] *** mj41 joined
[13:35] <[Coke]> tadzik++

[13:37] *** koban left
[13:38] *** SHODAN left
[13:39] *** koban joined
[13:43] *** jaldhar joined
[13:50] *** tokuhirom left
[14:08] <dalek> 6model: 24a54a4 | (Martin Berends)++ | c/ (7 files):

[14:08] <dalek> 6model: odel/c] use OpenMP for threading if available

[14:08] <dalek> 6model: review: https://github.com/jnthn/6model/commit/24a54a48cb

[14:13] <[Coke]> yay, 3 more tests from pi.t ;)

[14:13] <dalek> rakudo/nom: 7dc428f | Coke++ | t/spectest.data:

[14:13] <dalek> rakudo/nom: run another test. track failure modes

[14:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7dc428ff43

[14:16] <moritz> nom: say try {  1 }

[14:16] <p6eval> nom: OUTPUT«1␤»

[14:20] <moritz> nom: say Sub ~~ Code

[14:20] <p6eval> nom: OUTPUT«Bool::True␤»

[14:20] <moritz> nom: say Sub ~~ Callable

[14:20] <p6eval> nom: OUTPUT«Bool::True␤»

[14:20] <moritz> nom: say Code ~~ Callable

[14:20] <p6eval> nom: OUTPUT«Bool::True␤»

[14:22] *** jdhore left
[14:23] *** jdhore joined
[14:28] *** MayDaniel left
[14:30] *** dual joined
[14:30] *** wtw left
[14:36] *** bluescreen100 joined
[14:39] <tadzik> \o/

[14:42] <JimmyZ> nom: sub func($a) { $a/2}; [1..10].[&func(*)];

[14:42] <p6eval> nom: OUTPUT«No applicable candidates found to dispatch to for 'Numeric'. Available candidates are:␤:(Mu, Mu %_)␤␤current instr.: 'Numeric' pc 759348 (src/gen/CORE.setting.pir:192149) (src/gen/CORE.setting:514)␤»

[14:42] <JimmyZ> moritz: seems that s/WhateverCode/Callable didn't fixed the bug?

[14:42] <moritz> JimmyZ: just &func should work

[14:43] <JimmyZ> nom: sub func($a) { $a/2}; [1..10].[&func];

[14:43] <p6eval> nom:  ( no output )

[14:43] <moritz> that's what the fix did

[14:43] <JimmyZ> moritz++

[14:43] *** thou joined
[14:43] <moritz> yours isn't even supposed to work (no currying of bare * in argument lists)

[14:43] <JimmyZ> nom: sub func($a, $b) { $a/2}; say [1..10].[&func];

[14:43] <moritz> otherwise a @a.pick(*) wouldn't work

[14:43] <p6eval> nom: OUTPUT«6␤»

[14:45] *** kaare_ joined
[14:45] *** foomator left
[14:47] *** foomator joined
[14:48] *** am0c left
[14:49] *** am0c joined
[14:49] *** hanekomu left
[14:51] *** am0c left
[14:56] *** Khisanth left
[14:56] *** am0c joined
[14:59] <JimmyZ> nom: sub func() { 10/2}; say [1..10].[&func];

[14:59] <p6eval> nom: OUTPUT«6␤»

[14:59] <JimmyZ> nom: sub func() { 9/2}; say [1..10].[&func];

[14:59] <p6eval> nom: OUTPUT«5␤»

[14:59] *** daniel-s left
[15:00] *** koban left
[15:03] *** Chillance left
[15:04] <pmichaud> re-good morning, #perl6

[15:05] <TimToady> o/

[15:05] <felher> o/

[15:05] <colomon> \o

[15:05] <JimmyZ> nom: say [1..10].[4.5]

[15:05] <p6eval> nom: OUTPUT«5␤»

[15:05] <tadzik> hah

[15:06] <tadzik> nom: say (1..5)[0.5]

[15:06] <p6eval> nom: OUTPUT«1␤»

[15:06] *** kst left
[15:06] <tadzik> std: say (1..5)[0.5]

[15:06] <p6eval> std 516268a: OUTPUT«ok 00:01 120m␤»

[15:06] <benabik> nom: say 0.5.Int

[15:06] <p6eval> nom: OUTPUT«0␤»

[15:06] <tadzik> niecza: say (1..5)[0.5]

[15:06] * JimmyZ wonders which [] was called

[15:06] <p6eval> niecza v8-51-g785e335: OUTPUT«1␤»

[15:06] *** kst joined
[15:07] <pmichaud>     multi method postcircumfix:<[ ]>($pos) is rw {

[15:07] <pmichaud> that one.

[15:07] <TimToady> can't have been circumfix

[15:07] <TimToady> that would be TTIAR

[15:08] <TimToady> niecza: say (1..5) [0.5]  # like this

[15:08] <p6eval> niecza v8-51-g785e335: OUTPUT«===SORRY!===␤␤Two terms in a row at /tmp/V5o5J91Dxl line 1:␤------> say (1..5) ⏏[0.5]  # like this␤␤Parse failed␤␤»

[15:08] <JimmyZ> nom: say [1..10].at_pos(4.5)

[15:08] <p6eval> nom: OUTPUT«5␤»

[15:09] <JimmyZ> nom: say [1..10].WHAT

[15:09] <p6eval> nom: OUTPUT«Array()␤»

[15:11] <JimmyZ> ^^ explains a lot 

[15:12] <TimToady> that one is a circumfix

[15:14] <JimmyZ> nom: say [1..10].at_pos(11)

[15:14] <p6eval> nom: OUTPUT«Any()␤»

[15:15] <JimmyZ> nom: say (1..10).at_pos(11)

[15:15] <p6eval> nom: OUTPUT«Mu()␤»

[15:16] * JimmyZ wonders why list returns Mu but array returns Any

[15:17] <pmichaud> arrays act like lists of scalar containers... and scalar containers default to Any

[15:18] <pmichaud> lists are just lists of objects, and if one isn't present then List currently returns Mu

[15:18] <pmichaud> we can switch that to Any if that would be better.

[15:18] <pmichaud> Mu feels righter to me at the moment.

[15:18] <TimToady> lists are more abstract than arrays, so Mu is okay, unless it should be Nil

[15:19] <pmichaud> yes, Nil would be another good choice.  I didn't have Nil available when I wrote the List.at_pos code :)

[15:20] <pmichaud> I guess Nil makes more sense, since it indicates "absence of a value"

[15:20] <TimToady> and Nil is appoximately the right abstraction level for a not-there list

[15:20] <pmichaud> I'll switch it.

[15:20] <TimToady> JimmyZ++  # fortunately fractional karma rounds up :)

[15:21] <TimToady> pmichaud++ # gets the other half, which also rounds up :)

[15:22] <TimToady> nom: say 1i

[15:22] <p6eval> nom: OUTPUT«0 + 1i␤»

[15:22] <TimToady> nom: say 1\i

[15:22] <p6eval> nom: OUTPUT«0 + 1i␤»

[15:23] <TimToady> moritz: ^^

[15:24] <TimToady> nom: constant i = 1i; say i

[15:24] <p6eval> nom: OUTPUT«0 + 1i␤»

[15:24] <TimToady> nom say i

[15:24] <TimToady> nom: say i

[15:24] <p6eval> nom: OUTPUT«Could not find sub &i␤current instr.: '_block1002' pc 58 ((file unknown):34180782) (/tmp/5W1grCHIrE:1)␤»

[15:24] <sbp> nom: say 5 / (2+1i)

[15:24] <p6eval> nom: OUTPUT«2 - 1i␤»

[15:24] <TimToady> that fruit is dragging on the ground

[15:24] *** tzhs left
[15:25] <TimToady> nom: my constant i = 1i; say i

[15:25] <p6eval> nom: OUTPUT«0 + 1i␤»

[15:25] <TimToady> even suitable for use in the setting :)

[15:25] <pmichaud> I don't know if "1i" works in the setting yet.

[15:25] *** rdesfo joined
[15:25] <sbp> nom: my constant j = 1j; say 1j

[15:25] <p6eval> nom: OUTPUT«Confused at line 1, near "my constan"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23611 (src/stage2/gen/NQPHLL.pir:6348) (src/stage2/gen/NQPHLL.pm:329)␤»

[15:26] <sbp> engineers fume

[15:26] <TimToady> well, would (1)i work in the setting?

[15:26] <sbp> nom: my constant j = 1i; say 1j

[15:26] <p6eval> nom: OUTPUT«Confused at line 1, near "say 1j"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23611 (src/stage2/gen/NQPHLL.pir:6348) (src/stage2/gen/NQPHLL.pm:329)␤»

[15:26] <TimToady> that's not a constant, that's a postfix

[15:26] <pmichaud> I think part of the problem is that at the time the setting is being compiled, "Complex" doesn't exist.

[15:26] <sbp> nom: my postfix j = 1j; say 1j

[15:26] <p6eval> nom: OUTPUT«Malformed my at line 1, near "postfix j "␤current instr.: 'nqp;HLL;Grammar;panic' pc 23611 (src/stage2/gen/NQPHLL.pir:6348) (src/stage2/gen/NQPHLL.pm:329)␤»

[15:26] <pmichaud> I might be wrong about that.

[15:27] <TimToady> sbp: you have to write it right

[15:27] <pmichaud> (nom doesn't do custom operators yet.)

[15:27] <sbp> yeah, programming by guessing is not a great approach... :-)

[15:27] <pmichaud> (working on the regex updates that will enable that.)

[15:27] <JimmyZ> so, array still returns Any instead of Nil ?

[15:27] <sbp> also I copied my bad form anyway, shuld have done j = 1i

[15:28] <TimToady> nom: sub postfix:<j> ($n) { $n * i }; say 21 + 42j

[15:28] <p6eval> nom: OUTPUT«Confused at line 1, near "say 21 + 4"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23611 (src/stage2/gen/NQPHLL.pir:6348) (src/stage2/gen/NQPHLL.pm:329)␤»

[15:28] <sbp> *should

[15:28] <TimToady> nom: sub postfix:<j> ($n) { $n\i }; say 21 + 42j

[15:28] <p6eval> nom: OUTPUT«Confused at line 1, near "say 21 + 4"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23611 (src/stage2/gen/NQPHLL.pir:6348) (src/stage2/gen/NQPHLL.pm:329)␤»

[15:28] <TimToady> perl6: sub postfix:<j> ($n) { $n\i }; say 21 + 42j

[15:28] <sbp> any builtin functions to get the conjugate?

[15:28] <p6eval> niecza v8-51-g785e335: OUTPUT«21+42i␤»

[15:28] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "i"␤    expecting "(" or "."␤    at /tmp/V6WUDjM51L line 1, column 27␤»

[15:28] <p6eval> ..rakudo 922500: OUTPUT«21 + 42i␤»

[15:31] <TimToady> nom: sub postfix:<!> ($n) { say [*] 2..$n }; say 10!

[15:31] <p6eval> nom: OUTPUT«Confused at line 1, near "say 10!"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23611 (src/stage2/gen/NQPHLL.pir:6348) (src/stage2/gen/NQPHLL.pm:329)␤»

[15:31] <TimToady> I guess nom doesn't do that yet

[15:31] <pmichaud> 15:27 <pmichaud> (nom doesn't do custom operators yet.)

[15:31] <pmichaud> 15:27 <pmichaud> (working on the regex updates that will enable that.)

[15:32] * TimToady should learn to read...

[15:33] <pmichaud> afk, break.

[15:33] <jnthn> Guess I should make mixins work in NQP so we can do the custom operators lexically scoped

[15:33] <sbp> rakudo: say (2+i).re()

[15:33] <p6eval> rakudo 922500: OUTPUT«2␤»

[15:33] <jnthn> Should be just one method to add... :)

[15:34] * JimmyZ go out to eat midnight snack

[15:35] <sbp> rakudo: say (28-43i) / (28-43i)

[15:35] <p6eval> rakudo 922500: OUTPUT«1 + 0i␤»

[15:35] *** woosley left
[15:35] <sbp> niecza: say (28-43i) / (28-43i)

[15:35] <p6eval> niecza v8-51-g785e335: OUTPUT«1+0i␤»

[15:36] <sbp> rakudo: say floor(2.5)

[15:36] <p6eval> rakudo 922500: OUTPUT«2␤»

[15:37] <sbp> rakudo: sub complex_modulus(a, b) { a - (b * floor(a / b)) }; say complex_modulus(28-43i, 28-43i)

[15:37] <p6eval> rakudo 922500: OUTPUT«===SORRY!===␤Invalid typename in parameter declaration at line 22, near ", b) { a -"␤»

[15:37] <sbp> rakudo: sub complex_modulus($a, $b) { $a - ($b * floor($a / $b)) }; say complex_modulus(28-43i, 28-43i)

[15:37] <p6eval> rakudo 922500: OUTPUT«floor is only defined for Reals, you have a Complex()␤Method 'Bridge' not found for invocant of class 'Failure'␤  in 'infix:<*>' at line 3783:src/gen/core.pm␤  in 'infix:<*>' at line 4589:src/gen/core.pm␤  in 'complex_modulus' at line 22:/tmp/NNEec0UHH3␤  in main p…

[15:38] <sbp> rakudo: sub complex_floor($a) { Complex(floor($a.re()), floor($a.im())) }; say complex_floor(2.5-2.5i)

[15:38] <p6eval> rakudo 922500: OUTPUT«Could not find sub &Complex␤  in 'complex_floor' at line 22:/tmp/wlk15DEVam␤  in main program body at line 22:/tmp/wlk15DEVam␤»

[15:38] <sbp> rakudo: sub complex_floor($a) { Complex.new(floor($a.re()), floor($a.im())) }; say complex_floor(2.5-2.5i)

[15:38] <p6eval> rakudo 922500: OUTPUT«2 - 3i␤»

[15:39] <sbp> rakudo: sub complex_floor($a) { Complex.new(floor($a.re()), floor($a.im())) }; sub complex_modulus($a, $b) { $a - ($b * complex_floor($a / $b)) }; say complex_modulus(28-43i, 28-43i)

[15:39] <p6eval> rakudo 922500: OUTPUT«0 + 0i␤»

[15:42] <sbp> suggest adding our Complex multi method conj() to S32

[15:43] * TimToady suggests that suggestions turn into autosuggestions

[15:44] <sbp> for some reason I had a vision of printing that on a tiny googly eyed teddy bear t-shirt

[15:46] <sbp> oh, it's already in there under conjugate(). was looking at the wrong bit

[15:46] <sbp> a function though, not a method. [DEBATE MERITS HERE]

[15:47] <sbp> no, a method on Numeric. hmm

[15:48] *** fbass joined
[15:48] <sbp> rakudo: say 2.conjugate(); say 2+i.conjugate()

[15:48] <p6eval> rakudo 922500: OUTPUT«2␤2 - 1i␤»

[15:49] <TimToady> rakudo: say (2+i).conjugate

[15:49] <p6eval> rakudo 922500: OUTPUT«2 - 1i␤»

[15:51] *** noganex_ joined
[15:54] *** noganex left
[15:55] <sbp> rakudo: sub first_quadrant_associate($a) { if $a.re >= 0 { if $a.im >= 0 { $a } else { $a * i } } elsif $a.im < 0 { -$a } else { $a * -i } }; say first_quadrant_associate(2-2i)

[15:55] <p6eval> rakudo 922500: OUTPUT«2 + 2i␤»

[16:00] <sbp> rakudo: sub first_quadrant_associate($a) { given $a { when $a.re >= 0 && $a.im >= 0 { $a }; when $a.re >= 0 { $a * i }; when $a.im < 0 { -$a }; default { $a * -i } } }; say first_quadrant_associate(2-2i)

[16:00] <p6eval> rakudo 922500: OUTPUT«2 + 2i␤»

[16:02] *** agentzh left
[16:03] <colomon> why given in that example?

[16:04] <sbp> I thought it might clarify the conditional structure, but it didn't

[16:04] *** ab5tract joined
[16:04] <colomon> you didn't actually use it in any meaningful fashion

[16:05] <colomon> rakudo: sub first_quadrant_associate($a) { when $a.re >= 0 && $a.im >= 0 { $a }; when $a.re >= 0 { $a * i }; when $a.im < 0 { -$a }; default { $a * -i } }; say first_quadrant_associate(2-2i)

[16:05] <p6eval> rakudo 922500: OUTPUT«2 + 2i␤»

[16:05] <colomon> rakudo: sub first_quadrant_associate($a) { when $a.re >= 0 && $a.im >= 0 { $a }; when $a.re >= 0 { $a * i }; when $a.im < 0 { -$a }; default { $a * -i } }; say first_quadrant_associate(2-3i)

[16:05] <p6eval> rakudo 922500: OUTPUT«3 + 2i␤»

[16:06] <PerlJam> colomon: why default?  ;)

[16:06] <colomon> just copying without the given

[16:07] <sbp> ah, thanks. didn't know the given was just syntactic sugar for the $_ conversion

[16:07] * TimToady wonders how succeed decides to return when there's no topicalizer

[16:07] <PerlJam> you could have just used $_ instead of $a to avoid mentioning the variable so many times too

[16:08] <TimToady> I guess a sub "sets" $_ by definition

[16:10] <PerlJam> I would have probably used explicit returns in colomon's version because otherwise it seems like it works because of careful conditional construction.

[16:14] *** birdwindupbird left
[16:16] *** leprevost joined
[16:16] <dalek> specs: 4b75bad | larry++ | S04-control.pod:

[16:16] <dalek> specs: Minor clarifications to 'succeed' semantics

[16:16] <dalek> specs: review: https://github.com/perl6/specs/commit/4b75bad663

[16:17] <colomon> sbp++ # starting the ball rolling for a spec change.  ;)

[16:18] <sbp> U+31337 HANDS IN THE AIR

[16:22] *** Alias left
[16:26] *** Khisanth joined
[16:26] *** bbkr left
[16:26] *** bbkr joined
[16:30] *** isBEKaml joined
[16:34] <[Coke]> U+234235235 SAYING AAYYYO

[16:40] <isBEKaml> [Coke]: what's wrong? :)

[16:48] <[Coke]> perhaps my cultural reference was slightly too obscure.

[16:50] <isBEKaml> maybe mine too -- but your reference in my culture is equivalent to head banging or just plain irritation. 

[16:51] *** pernatiy left
[16:52] *** Axius joined
[16:52] <isBEKaml> if that's not what you intended, foggedaboudid. :)

[16:55] <[Coke]> combined with sbp's send, mine is a song that is pretty always on the radio somewhere.

[16:56] <isBEKaml> OIC. # references are always lost on me. 

[16:58] *** ab5tract left
[17:02] *** dakkar left
[17:04] *** envi left
[17:14] *** Axius left
[17:16] *** worr joined
[17:18] *** worr left
[17:19] *** worr joined
[17:24] <dalek> nqp: 29ad65d | jonathan++ | src/how/NQPClassHOW.pm:

[17:24] <dalek> nqp: Update NQPClassHOW.find_method for API extension.

[17:24] <dalek> nqp: review: https://github.com/perl6/nqp/commit/29ad65d50b

[17:29] *** am0c left
[17:35] *** isBEKaml left
[17:41] *** im2ee_ joined
[17:43] *** im2ee_ is now known as im2ee

[17:43] *** im2ee is now known as im2e___

[17:43] *** Reaganomicon left
[17:43] *** im2e___ is now known as im2ee

[17:43] *** im2ee left
[17:44] *** im2ee joined
[17:44] *** Reaganomicon joined
[17:44] *** im2ee left
[17:46] *** masak joined
[17:46] <masak> aloha, #perl6!

[17:46] <colomon> o/

[17:47] <diakopter> hi

[17:47] <masak> tadzik++ # for being awesome

[17:49] <jnthn> o/ masak

[17:49] <masak> \o jnthn

[17:50] <jnthn> 1 day until $ridiculously-early-morning

[17:50] <pmichaud> same here :-)

[17:50] <jnthn> :-)

[17:51] <pmichaud> I need to start packing soon.

[17:51] <dalek> rakudo/nom: 4799849 | pmichaud++ | src/core/List.pm:

[17:51] <dalek> rakudo/nom: Nonexistent List elements return Nil instead of Mu.  JimmyZ++ TimToady++

[17:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4799849d7f

[17:51] <masak> can't we please-oh-please find a better name for that method than .reals? :( http://rosettacode.org/wiki/Quaternion_type#Perl_6

[17:51] <masak> it's such a dumb name.

[17:52] <masak> (the rest of the code is very nice, though)

[17:52] <jnthn> .fakes? <duck>

[17:52] <masak> :/

[17:52] <jnthn> .components mebbe

[17:52] <jnthn> But ti's kinda long.

[17:53] <colomon> long would be okay, it should be very rare for users to actually call it.

[17:56] * JimmyZ guesses there should be a test for 4799849

[17:57] <masak> here's why .components would be nice and .reals sucks: for immutable types and especially math types, the query methods ask for a "part" or an "aspect" or a "view" of the object. .reals misses the mark, because there is a real part of a quaternion, or of a complex number, and it's not the whole set of components.

[17:58] <masak> the analogy to a vector or something is flawed.

[17:58] <masak> (besides which, a vector might as well be a vector of complex numbers, or of quaternions)

[17:59] <jnthn> Sounds like it's .components then :)

[18:01] *** JimmyZ left
[18:04] <masak> quantum computer scientists the world over just drew a sigh of relief.

[18:05] <benabik> Quantum computer scientists?  I suppose that makes sense.  You can never tell if they're coding or not unless you're observing them.

[18:06] <benabik> And the act of observing them often changes the answer.

[18:06] <flussence> .oO( I thought it's the opposite - they're not coding until you observe them, then they appear to be coding but aren't at the same time )

[18:08] *** sayu joined
[18:10] <benabik> flussence++

[18:13] *** JimmyZ joined
[18:14] <felher> Isn't 'is redefined' a subroutine trait? I can not find it in: 'S06: Subroutine traits', only in S12.

[18:19] <dalek> rakudo/nom: 0f044f2 | jonathan++ | src/Perl6/Actions.pm:

[18:19] <dalek> rakudo/nom: Should apply method traits before method installation (really should apply them much sooner after we parsed them, but that's a bigger refactor).

[18:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0f044f2bb6

[18:20] *** JimmyZ left
[18:26] <[Coke]> only 97 spectest files nom's not running.

[18:26] * jnthn wonders how many master doesn't run

[18:26] * [Coke] isn't checking. :P

[18:27] <[Coke]> hurm. that actually doesn't seem right, we have 193 skips in spectest.data 

[18:27] * [Coke] was just counting the rows output from tools/update....

[18:30] <flussence> I'm *still* running that csv/graph thing... it's up to d0475ef now

[18:31] <flussence> (at this point I'm wondering whether development's happening faster than I can recompile the thing :)

[18:33] *** birdwindupbird joined
[18:40] *** cogno left
[18:40] *** cogno joined
[18:43] <[Coke]> are you doing every commit?

[18:43] <[Coke]> I would do "latest commit", then backfill the gap as time permits.

[18:44] <[Coke]> (that's how taptinder does it, e.g.)

[18:44] <benabik> Find the largest gap, get data for the commit in the center.  Repeat.

[18:46] <flussence> I had it doing every 20, this is filling in the gaps now. Could probably improve it a bit though...

[18:48] *** donri joined
[18:51] <[Coke]> ah. as long as you're not going oldest->latest, you're probably fine.

[18:52] <flussence> that's the first thing I tried, gave up on it pretty quick :)

[18:52] <flussence> anyway, it looks like this atm: https://github.com/flussence/specgraphs/raw/master/output/rakudo-tests.png

[18:55] <huf> what are the red spikes? an experimental-er branch landing?

[18:55] <flussence> those are where someone broke nom :)

[18:56] <flussence> e.g. the last one there is f1de2a85, the next one that worked is e37f8797

[19:00] *** mj41 left
[19:06] *** impious joined
[19:07] <pmichaud> can we get a definitive count of rakudo 2011.07 test results, ooc?

[19:12] <flussence> I think this one's the newest on the master branch... http://smolder.parrot.org/app/projects/report_details/19145

[19:12] *** masak left
[19:12] *** mj41 joined
[19:12] <pmichaud> 21,359 sounds okay to me.  Of course, the suite has shrunk a bit since then.

[19:13] <flussence> iirc that counts the todo/skip ones as passes too

[19:15] <pmichaud> well, it says that 599 todo and 1765 skipped, so I guess we could subtract that

[19:15] <pmichaud> nom:  say 21359-599-1765

[19:15] <p6eval> nom: OUTPUT«18995␤»

[19:17] *** worr left
[19:18] *** chadadavis joined
[19:25] *** masak joined
[19:30] *** thou left
[19:32] *** chadadavis left
[19:34] *** am0c joined
[19:36] *** birdwindupbird left
[19:38] *** worr joined
[19:50] <masak> rakudo: say "Don't worry, be happi!".comb[16, 20, 11, 12, 6, 7, 8, 9, 21]

[19:50] <p6eval> rakudo 922500: OUTPUT«hi, worr!␤»

[19:50] <masak> little bit of cheating with the 'i', but... :)

[19:51] <benabik> masak: Could have used "hey" instead of "hi" without cheating.

[19:52] <moritz> \o

[19:52] <masak> rakudo: say "Don't worry, be happy!".comb[16, 14, 20, 11, 12, 6, 7, 8, 9, 21]

[19:52] <p6eval> rakudo 922500: OUTPUT«hey, worr!␤»

[19:53] <masak> benabik++

[19:58] <sorear> good * #perl6

[19:58] <moritz> TimToady, pmichaud: the reason we don't have a constant i yet is that 1i doesn't work in the setting, and Complex.new(0, 1) neither, because 'constant' only supports literals yet

[19:59] <moritz> we could cheat with term:<i>

[19:59] <sorear> pmichaud: S04 contradicts itself slightly; I'm inclined to give precedence to S04:1264, which says that only Failures have a handled bit

[20:03] <Util> pmichaud++  # [max] gather $a>>.&take;

[20:04] <masak> hola sorear 

[20:04] <diakopter> sorear: yo

[20:05] <diakopter> masak: I'm curious; do you know much about rakdudo/nom's coverage of printf/.fmt? the features matrix shows it green but I find it difficult to believe it implements printf just like Perl 5

[20:05] *** soh_cah_toa joined
[20:05] <diakopter> rakudo even

[20:06] <masak> Util: that... looks like exploiting » for its non-orderliness...

[20:06] <moritz> sorear: would you handle CATCH { when X::Foo { } } not handling X::Bar (which is !~~ X::Foo) with an implicit default { } block?

[20:06] <moritz> diakopter: it just redispatches to parrot's printf

[20:06] <masak> diakopter: I believe the Perl 5 features coverage is fairly good.

[20:06] <moritz> sprintf even

[20:06] <Util> masak: The code is from a discussion yesterday; $a contains an AoA.

[20:06] <masak> diakopter: doesn't have argument reordering though, IIRC.

[20:07] <masak> diakopter: also, Perl 6 is supposed to have a %C or something which I've never seen implemented.

[20:07] <moritz> dunno how (in)complete .fmt is

[20:07] <Util> was trying to replace my $size = 1; for ^$m X ^$m -> $i, $j { $size max= $m[$i][$j].Str.chars; }

[20:07] <moritz> diakopter: maybe I shoudl clarify this in the README, but with green I don't mean "fully implemented", but rather "mostly implemented, and suitable for most use cases"

[20:08] <Util> ... with something that did not manually visit each node.

[20:08] <masak> Util: well, gather $a>>.&take would appear to be a no-op except that >> doesn't respect evaluation order...

[20:08] <masak> hm, maybe not.

[20:08] <masak> also, it doesn't matter because of [max]...

[20:09] <moritz> since most p6 features interact with each other, you mostly get "fully implemented" only if you have a fully complete Perl 6 compiler

[20:09] <masak> Util: why not write @($a) ?

[20:10] <Util> nom: my $a = [[1,2,3], [4,999,6], [7,8,9]];  say [max] gather $a>>.&take;

[20:10] <p6eval> nom: OUTPUT«999␤»

[20:10] <masak> oh! >> recurses down!

[20:10] <masak> nice! :)

[20:10] <moritz> nom: my $a = [[1,2,3], [4,999,6], [7,8,9]];  say [max] $a>>.flat

[20:10] <p6eval> nom: OUTPUT«7 8 9␤»

[20:10] <diakopter> moritz: that might be good to specify in the README

[20:11] <masak> nom: sub id { $^x }; say [max] $a>>.&id

[20:11] <p6eval> nom: OUTPUT«Symbol '$a' not predeclared in <anonymous> (/tmp/1s1cQLW9O8:1)␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 154 (compilers/pct/src/PCT/HLLCompiler.pir:111)␤»

[20:11] <masak> er :)

[20:11] <masak> nom: sub id { $^x }; my $a = [[1,2,3], [4,999,6], [7,8,9]]; say [max] $a>>.&id

[20:11] <p6eval> nom: OUTPUT«7 8 9␤»

[20:12] <masak> nom: sub id { $^x }; my $a = [[1,2,3], [4,999,6], [7,8,9]]; say $a>>.&id.perl

[20:12] <p6eval> nom: OUTPUT«([1, 2, 3], [4, 999, 6], [7, 8, 9])␤»

[20:12] <moritz> nom: my $a = [[1,2,3], [4,999,6], [7,8,9]];  say [max] $a.list>>.flat

[20:12] <p6eval> nom: OUTPUT«7 8 9␤»

[20:12] <moritz> nom: my $a = [[1,2,3], [4,999,6], [7,8,9]];  say [max] $a.list>>.flat.flat

[20:12] <p6eval> nom: OUTPUT«7 8 9␤»

[20:12] * moritz gives up

[20:12] <Util> masak: I am not completely sure that I like >> recursing; my mental model is just that it hypers over a single layer of list, but we need *something* that can recurse.  

[20:13] <pmichaud> "over a single layer of list" is essentially .map, though

[20:13] *** hanekomu joined
[20:13] <pmichaud> nom: my $a = [[1,2,3], [4,999,6], [7,8,9]];  say [max] $a.map({.flat})

[20:13] <p6eval> nom: OUTPUT«999␤»

[20:14] <pmichaud> nom: my $a = [[1,2,3], [4,999,6], [7,8,9]];  .say for $a.map({.flat})

[20:14] <p6eval> nom: OUTPUT«1␤2␤3␤4␤999␤6␤7␤8␤9␤»

[20:16] <pmichaud> I'd be in favor of a :hyper option to .map that says that it's allowed to process things in parallel, though :-)

[20:16] <pmichaud> or something along those lines

[20:16] <TimToady> hyper map is already specced

[20:17] <moritz> nom: my $x = { 1, 2, 3 X=> 1 }; say $x.WHAT

[20:17] <p6eval> nom: OUTPUT«Block()␤»

[20:17] <Util> nom: my $a = [<a aa aaa>, <bb bbbbbbbbbbbb b>, <ccc c c> ];  say [max] $a.map({.flat}).map({.chars});

[20:17] <p6eval> nom: OUTPUT«12␤»

[20:17] <Util> nom: my $a = [<a aa aaa>, <bb bbbbbbbbbbbb b>, <ccc c c> ];  say [max] map {.chars}, gather $a>>.&take;

[20:17] <p6eval> nom: OUTPUT«12␤»

[20:18] <pmichaud> ...except we don't quite know the mechanism for passing the "hyper" contextualizer to "map"

[20:18] <pmichaud> (internally, that is.)

[20:19] <pmichaud> Util: is that list intended to be 1-d?

[20:19] <pmichaud> nom:  my $a = [<a aa aaa>, <bb bbbbbbbbbbbbb b>, <ccc c c> ];  say [max] $a.map({.chars]);

[20:19] <p6eval> nom: OUTPUT«Unable to parse blockoid, couldn't find final '}' at line 1␤current instr.: 'nqp;Regex;Cursor;FAILGOAL' pc 3863 (src/Regex/Cursor.pir:244)␤»

[20:19] <pmichaud> nom:  my $a = [<a aa aaa>, <bb bbbbbbbbbbbbb b>, <ccc c c> ];  say [max] $a.map({.chars});

[20:19] <p6eval> nom: OUTPUT«13␤»

[20:20] <Util> pmichaud: Doh! No, it is not. Thanks!

[20:20] <pmichaud> nom:  my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say [max] $a.map({.chars});

[20:20] <p6eval> nom: OUTPUT«17␤»

[20:20] <pmichaud> nom:  my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say [max] $a.map({.flat}).map({.chars});

[20:20] <p6eval> nom: OUTPUT«12␤»

[20:20] <moritz> nom: say 'bbbbbbbbbbbb'.chars

[20:20] <p6eval> nom: OUTPUT«12␤»

[20:21] <Util> nom: my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say [max] $a.map({.flat}).map({.chars});

[20:21] <p6eval> nom: OUTPUT«12␤»

[20:21] <pmichaud> nom:  my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say [max] $a.map({.flat})>>.chars

[20:21] <Util> nom: my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say [max] map {.chars}, gather $a>>.&take;

[20:21] <p6eval> nom: OUTPUT«12␤»

[20:21] <pmichaud> nom:  my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say [max] $a>>&take>>.chars

[20:21] <p6eval> nom: OUTPUT«Missing << or >> at line 1, near "take>>.cha"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23611 (src/stage2/gen/NQPHLL.pir:6348) (src/stage2/gen/NQPHLL.pm:329)␤»

[20:22] <pmichaud> nom:  my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say [max] $a>>.&take>>.chars

[20:22] <p6eval> nom: OUTPUT«Warning␤Warning␤Warning␤Warning␤Warning␤Warning␤Warning␤Warning␤Warning␤1 1 1␤»

[20:22] <pmichaud> heh

[20:22] <pmichaud> nom:  my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say [max] (gather $a>>.&take)>>.chars

[20:22] <p6eval> nom: OUTPUT«Warning␤Warning␤Warning␤Warning␤Warning␤Warning␤Warning␤Warning␤Warning␤-Inf␤»

[20:22] <benabik> That's impressive.

[20:22] <pmichaud> normally that's a warning for a take outside of a gather.

[20:23] <pmichaud> nom:  my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say [max] (gather $a>>.&take)

[20:23] <p6eval> nom: OUTPUT«ccc␤»

[20:23] <pmichaud> nom:  my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say [max] (gather $a>>.&take).eager>>.chars

[20:23] <p6eval> nom: OUTPUT«12␤»

[20:23] <pmichaud> yeah, there's a bug with the reducer somewhere, I think.

[20:23] <pmichaud> nom:  my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say (gather $a>>.&take).eager>>.chars

[20:23] <p6eval> nom: OUTPUT«12 1 2 1 1 3 2 3 1␤»

[20:23] <pmichaud> nom:  my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say (gather $a>>.&take)>>.chars

[20:23] <p6eval> nom: OUTPUT«Warning␤Warning␤Warning␤Warning␤Warning␤Warning␤Warning␤Warning␤Warning␤␤»

[20:23] <pmichaud> or maybe it's with the hyper.

[20:24] <pmichaud> nom:  my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say (gather $a>>.&take)

[20:24] <p6eval> nom: OUTPUT«aa aaa a ccc c c bb bbbbbbbbbbbb b␤»

[20:24] <moritz> nom: say <a b c> »~» 1

[20:24] <p6eval> nom: OUTPUT«a1 b1 c1␤»

[20:24] <moritz> nom: say <a b c> »~» (1, 2)

[20:24] <p6eval> nom: OUTPUT«a1 b2 c1␤»

[20:25] <pmichaud> nom:  my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say (gather $a>>.&take).gimme(0)

[20:25] <p6eval> nom: OUTPUT«0␤»

[20:25] <sorear> moritz: niecza's CATCH blocks are specially hacked so that they return False if the exit by falling through, and True if they exit through a SUCCEED control exception

[20:25] <pmichaud> nom:  my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say (gather $a>>.&take).gimme(*)

[20:25] <p6eval> nom: OUTPUT«9␤»

[20:25] <pmichaud> nom:  my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say (gather $a>>.&take).flat.eager.gimme(0)

[20:25] <p6eval> nom: OUTPUT«9␤»

[20:25] <pmichaud> nom:  my $a = [[<a aa aaa>], [<bb bbbbbbbbbbbb b>], [<ccc c c>] ];  say (gather $a>>.&take).flat.gimme(0)

[20:25] <p6eval> nom: OUTPUT«0␤»

[20:25] <pmichaud> I'll have to look into that a bit more.

[20:26] <Util> .gimme ?

[20:26] <pmichaud> .gimme($n)  asks a list to make at least $n elements non-lazy, and returns the number of non-lazy elements in the List

[20:27] <Util> Specced?

[20:27] <pmichaud> as soon as I write it, yes :)(

[20:27] <pmichaud> :)

[20:27] <Util> pmichaud++

[20:27] <pmichaud> (I'm rewriting S07.)

[20:27] <jnthn> :)

[20:27] * jnthn is really looking forward to pmichaud++'s lists talk at YAPC

[20:28] <pmichaud> yeah, me too.  I'm glad it's on Wednesday, though.  More time to procra.... prepare.

[20:28] <jnthn> :)

[20:29] * Util gazes wistfully toward YAPC, across the pond.

[20:29] * diakopter too

[20:29] <moritz> https://gist.github.com/1138149 # that's what BackTrace can do after my latest push

[20:30] <jnthn> moritz++

[20:32] <dalek> rakudo/nom: 856dc3d | moritz++ | src/core/BackTrace.pm:

[20:32] <dalek> rakudo/nom: Revert accidential changes to BackTrace.pm from 48a3aed7e89

[20:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/856dc3de57

[20:32] <dalek> rakudo/nom: 4aab0e5 | moritz++ | src/core/BackTrace.pm:

[20:32] <dalek> rakudo/nom: tweak BackTrace so that you can generate and print a bt easily from an Exception object

[20:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4aab0e5334

[20:48] *** mj41 left
[20:48] *** araujo left
[20:49] *** araujo joined
[20:50] *** kaare_ left
[20:54] *** thou joined
[20:58] *** bbkr left
[20:59] *** thou left
[21:03] *** leprevost left
[21:04] <diakopter> .

[21:04] *** Mowah left
[21:04] <pmichaud> .u .

[21:04] <phenny> U+002E FULL STOP (.)

[21:05] <diakopter> I /upgrade d irssi

[21:05] <worr> are there some good beginner docs for learning parrot? I found parrot babysteps...but that looks a bit old

[21:05] <worr> is there anything more recent?

[21:06] <masak> the Sqwuak tutorial, perhaps?

[21:06] <masak> at least if you want to write a HLL.

[21:07] <worr> that sounds perfect

[21:08] <worr> I'll give that a shot, but it looks older than babysteps...thanks!

[21:08] <masak> it's supposed to be fairly recently updated.

[21:08] <masak> maybe you found an old copy?

[21:09] <worr> is it the one on wikibooks? because that looks like it's a year old

[21:09] <masak> that sounds about right, actually.

[21:09] <masak> I don't know if it's the one on wikibooks.

[21:10] * pmichaud wants to write a nqp tutorial.

[21:10] * jnthn wants to write a 6model tutorial. :)

[21:10] <worr> I'll definitely give it a read through though. it looks like it's exactly what I want

[21:11] <pmichaud> jnthn, masak:  discussion item for friday:  what to call the next distribution release :)

[21:11] <pmichaud> hopefully I'll be awake enough to be coherent.  Or maybe this is your chance(s) to get it named whatever you want while my resistance is low :)

[21:12] <jnthn> mwahahaha

[21:12] * masak steeples fingers

[21:15] * tadzik is back from the pm meeting

[21:15] *** timbunce left
[21:15] <masak> tadzik: welcome back! how was the pm meeting?

[21:15] <tadzik> heh, ridicoulosly early morning, you say? Well, I'm leaving to YAPC tomorrow :0

[21:15] <tadzik> :)

[21:15] * jnthn has to wait until Friday for a Pm meeting ;)

[21:15] <tadzik> masak: nice, we got some fresh blood :)

[21:15] <masak> tadzik: yummy.

[21:16] <tadzik> 13 emails? Are you nuts, internet?

[21:16] <tadzik> Leave home, they said

[21:20] *** sayu left
[21:21] *** timbunce joined
[21:23] *** bluescreen100 left
[21:24] *** bluescreen10 left
[21:25] *** y3llow_ joined
[21:25] *** pothos_ joined
[21:27] *** bbkr joined
[21:27] *** y3llow left
[21:27] *** y3llow_ is now known as y3llow

[21:27] *** pothos left
[21:28] *** pothos_ is now known as pothos

[21:30] <bbkr> mberends: I've fixed slow SSH to OS X shell (was hanging on GSS)

[21:34] *** thou joined
[21:34] <tadzik> seen szabgab 

[21:34] <aloha> szabgab was last seen in #perl6 20 days 3 hours ago saying "oh I just came in the right time   moritz++".

[21:36] <masak> 'night, #perl6

[21:37] *** masak left
[21:39] <bbkr> seen bbkr

[21:39] <aloha> bbkr was last seen in #perl6 0 seconds ago saying "seen bbkr".

[21:46] *** kanishka joined
[21:47] *** Patterner left
[21:47] *** drbean joined
[21:47] *** impious left
[21:49] *** Psyche^ joined
[21:49] *** Psyche^ is now known as Patterner

[21:55] <lue> hello world o/

[21:57] <lue> Hm. Is the fact that rakudo/nom needs modules in .pbc form now expected?

[21:58] *** timbunce left
[21:59] <jnthn> lue: That was fixed at the weekend.

[22:00] <lue> Oh, I suppose typing git pull is something I should get in the habit of doing again :)

[22:05] *** jamessalty joined
[22:20] <flussence> not quite sure what's happening here, might be informative to someone though... https://gist.github.com/1138427

[22:24] *** fridim_ joined
[22:35] *** am0c left
[22:45] *** daniel-s joined
[22:48] *** fridim_ left
[22:55] *** hanekomu left
[22:59] *** wamba left
[23:19] *** saaki left
[23:33] *** thou left
[23:34] *** crked joined
[23:35] *** ponbiki joined
[23:42] *** tokuhirom joined
[23:44] *** molaf_ left
[23:49] *** tokuhir__ joined
[23:50] *** tokuhirom left
[23:56] *** nbrown joined
[23:56] *** molaf_ joined
