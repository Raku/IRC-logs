[00:00] *** Su-Shee left
[00:04] *** KatrinaTheLamia left
[00:08] *** Vlavv_ left
[00:16] *** flatwhatson joined
[00:21] *** KatrinaTheLamia joined
[00:25] *** aloha left
[00:30] *** aloha joined
[00:38] <snarkyboojum> niecza: say "I work now"

[00:38] <p6eval> niecza v1-149-g56c80b0: OUTPUT¬´Can't open perl script "niecza_eval": No such file or directory‚ê§¬ª

[00:40] *** Su-Shee joined
[00:42] *** QinGW joined
[00:50] *** dorlamm joined
[01:05] *** rgrau left
[01:22] *** pmurias left
[01:32] *** vmspb left
[01:40] *** dorlamm left
[01:40] *** dorlamm joined
[01:49] *** Alias joined
[01:50] *** Alias_ left
[01:52] *** dorlamm left
[02:01] *** noganex joined
[02:04] *** noganex_ left
[02:24] *** Chillance left
[02:54] *** cafesofie left
[03:12] *** envi joined
[03:15] *** lopnor joined
[03:17] *** lopnor is now known as lopaway

[03:19] <diakopter> evalbot control restart

[03:19] *** p6eval left
[03:19] * diakopter waits

[03:19] *** p6eval joined
[03:19] *** ChanServ sets mode: +v p6eval

[03:19] <diakopter> niecza: 1

[03:20] <p6eval> niecza v1-149-g56c80b0: OUTPUT¬´./run/Niecza.exe: 1: MZ\x90\xFF\xFF\xB8@\x80\xBA\xB4: not found‚ê§./run/Niecza.exe: 1: Syntax error: "(" unexpected (expecting ")")‚ê§¬ª

[03:20] <diakopter> niecza: 1.say

[03:20] <p6eval> niecza v1-149-g56c80b0: OUTPUT¬´./run/Niecza.exe: 1: MZ\x90\xFF\xFF\xB8@\x80\xBA\xB4: not found‚ê§./run/Niecza.exe: 1: Syntax error: "(" unexpected (expecting ")")‚ê§¬ª

[03:20] <diakopter> o_O

[03:20] <diakopter> hee

[03:20] * diakopter goes to fix

[03:30] <diakopter> sorear: for p6eval, I'm getting the same error TimToady was

[03:31] <diakopter> Unable to resolve method keys in class Array

[03:31] <diakopter> 2.8.2 on linux amd64

[03:44] *** cafesofie joined
[03:51] *** agentzh joined
[03:52] *** willco left
[03:58] *** willco joined
[03:58] *** satyavvd joined
[04:07] <sorear> diakopter: I just spent an hour installing 2.8.2 and I can't reproduce it so you're on your own

[04:07] <sorear> sorry.

[04:23] *** Su-Shee_ joined
[04:24] *** cafesofie left
[04:24] *** cafesofie joined
[04:25] *** Su-Shee left
[04:31] *** cafesofie left
[04:31] *** cafesofie joined
[04:46] *** arlinius left
[04:46] *** justatheory left
[04:57] *** envi left
[05:01] *** envi joined
[05:06] *** arlinius joined
[05:07] *** cafesofi_ joined
[05:07] *** cafesofie left
[05:08] *** cafesofi_ left
[05:08] *** cafesofie joined
[05:19] *** dual left
[05:59] <diakopter> sorear: you should be saying "sorry" to p6eval :P

[06:01] * diakopter tries a fully fresh clone

[06:02] <diakopter> `make p6eval` being the first command

[06:03] *** cafesofie left
[06:06] <diakopter> NICE

[06:06] <diakopter> SIGABRT, this time

[06:07] <diakopter> Mono Ahead of Time compiler - compiling assembly /home/p6eval/niecza_msw/run/NieczaActions.dll

[06:07] <diakopter> * Assertion at liveness.c:593, condition `to >= from' not met

[06:08] *** dual joined
[06:22] *** Vlavv joined
[06:31] *** kaare_ joined
[06:55] <moritz_> niecza: say "good morning"

[06:55] <p6eval> niecza v1-149-g56c80b0: OUTPUT¬´./run/Niecza.exe: 1: MZ\x90\xFF\xFF\xB8@\x80\xBA\xB4: not found‚ê§./run/Niecza.exe: 1: Syntax error: "(" unexpected (expecting ")")‚ê§¬ª

[06:56] <moritz_> p6eval@host04:~/niecza$ ./run/Niecza.exe -e 'say 3'

[06:56] <moritz_> -su: ./run/Niecza.exe: cannot execute binary file

[06:56] <moritz_> p6eval@host04:~/niecza$ file run/Niecza.exe 

[06:56] <moritz_> run/Niecza.exe: PE32 executable for MS Windows (console) Intel 80386 32-bit Mono/.Net assembly

[06:57] <moritz_> that works on my local machine

[06:58] <dalek> evalbot: d86a077 | moritz++ | evalbot.pl:

[06:58] <dalek> evalbot: invoke niecza via mono

[06:58] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/d86a0778fb

[07:03] *** ponbiki left
[07:05] *** ponbiki joined
[07:09] *** wtw joined
[07:10] *** KatrinaTheLamia left
[07:11] <sorear> niecza: say "1"

[07:11] <p6eval> niecza v1-149-g56c80b0: OUTPUT¬´./run/Niecza.exe: 1: MZ\x90\xFF\xFF\xB8@\x80\xBA\xB4: not found‚ê§./run/Niecza.exe: 1: Syntax error: "(" unexpected (expecting ")")‚ê§¬ª

[07:13] <moritz_> evalbot control restart

[07:13] *** p6eval left
[07:13] <moritz_> niecza: say 2

[07:13] *** p6eval joined
[07:13] *** ChanServ sets mode: +v p6eval

[07:13] <moritz_> niecza: say 2

[07:13] <p6eval> niecza v1-149-g56c80b0: OUTPUT¬´Unhandled exception: Unable to resolve method keys in class Array‚ê§  at /home/p6eval/niecza/boot/lib/SAFE.setting line 922 (SAFE keys @ 2)‚ê§  at /home/p6eval/niecza/src/Metamodel.pm6 line 192 (Metamodel Namespace.list_stash @ 7)‚ê§  at

[07:13] <p6eval> ../home/p6eval/niecza/src/Metamodel.pm6 line 603 (Me‚Ä¶

[07:14] <moritz_> how that looks more like a problem for which I'm not responsible :-)

[07:16] *** KatrinaTheLamia joined
[07:16] *** avuserow left
[07:20] *** pyrimidine left
[07:20] *** avuserow joined
[07:22] *** satyavvd left
[07:22] *** mberends joined
[07:27] *** satyavvd_ joined
[07:29] <dalek> niecza: 0cdc4fd | sorear++ | Makefile:

[07:29] <dalek> niecza: Only run nam->dll step if file changed

[07:29] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0cdc4fd072

[07:29] <dalek> niecza: 6210c2c | sorear++ | / (3 files):

[07:29] <dalek> niecza: Give main modules in a REPL session unique names

[07:29] <dalek> niecza: review: https://github.com/sorear/niecza/commit/6210c2cba4

[07:29] <dalek> niecza: a9b3447 | sorear++ | lib/CLRBackend.cs:

[07:29] <dalek> niecza: Remove excessively global state from CLRBackend

[07:29] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a9b344707e

[07:30] <sorear> moritz_: awesome, an accessible demo

[07:30] * sorear wonders whether to abandon the "bootstrap images = v1.5 + releases, no exceptions" rule

[07:32] *** pyrimidine joined
[07:36] <moritz_> sorear: you can always make intermediate releases if you need them for bootstrapping

[07:38] <moritz_> niecza: say 1

[07:38] <p6eval> niecza v1-149-g56c80b0: OUTPUT¬´Unhandled exception: Unable to resolve method keys in class Array‚ê§  at /home/p6eval/niecza/boot/lib/SAFE.setting line 922 (SAFE keys @ 2)‚ê§  at /home/p6eval/niecza/src/Metamodel.pm6 line 192 (Metamodel Namespace.list_stash @ 7)‚ê§  at

[07:38] <p6eval> ../home/p6eval/niecza/src/Metamodel.pm6 line 603 (Me‚Ä¶

[07:38] * moritz_ -> hospital&

[07:41] *** flatwhatson_ joined
[07:53] *** kjeldahlw joined
[07:54] *** Layla_91 joined
[07:54] <Layla_91> Helo! o/

[07:57] *** avuserow left
[07:59] *** avuserow joined
[08:04] <Layla_91> anybody home? :D

[08:10] *** Su-Shee_ is now known as Su-Shee

[08:15] *** ashleydev left
[08:21] <sorear> Layla_91: I am

[08:22] <sorear> also, ITYM "awake"

[08:22] <sorear> it is late night/early morning across the US and Western Europe

[08:22] <sorear> which is where most of the world's english speaking computer users are

[08:25] <Layla_91> sorear: I know :D Well at least I found you :)

[08:25] <sorear> so what do you want ?

[08:27] <Layla_91> sorear: As a start just to say hi :D Also I need to ask about something, I read that RHEL fencing agent for vmware has a PerlVI based helper.. that is perl6 right?

[08:27] *** kjeldahlw left
[08:29] *** masak joined
[08:29] <masak> oh hai, zebras.

[08:29] <Layla_91> masak: hi! :D

[08:30] <masak> Layla_91: how's the studying going? is the book any good? :)

[08:30] <sorear> hello masak !

[08:30] <masak> hi sorear !

[08:30] <Layla_91> masak: It is great :D But currently I do not progress too fast because of some extra work at job.. 

[08:31] <Layla_91> masak: my first job :D

[08:31] <masak> ah. RAM seems to have been what the niecza build needed...

[08:31] <masak> Layla_91: :)

[08:31] <Layla_91> masak: I read that RHEL fencing agent for vmware has a PerlVI based helper.. that is perl6 right? 

[08:32] <masak> no idea.

[08:32] <Layla_91> masak: I just was surprised since that is a production ready product and it has some perl6.. pretty cool :)

[08:33] <sorear> masak: With a few well timed SIGINTs I can get it to build in 400MB

[08:33] <masak> :)

[08:33] <sorear> it's insane that it takes *more* memory than the Perl 5 version

[08:33] <masak> sorear: I have it built now, but the 'say 2 + 2' example in the REPL blows up.

[08:33] <masak> you probably know this.

[08:34] <sorear> masak: something about Array.keys?

[08:34] <masak> mhm

[08:34] <sorear> mono --version?

[08:34] <sorear> pmurias says 2.8.1 doesn't work but 2.8.2 does; diakopter says 2.8.2 doesn't work; 2.8.2 WFM; it's all very confusing

[08:36] <masak> Mono JIT compiler version 2.6.7 (Debian 2.6.7-4)

[08:36] <masak> that one built for moritz_ -- don't remember if it ran.

[08:37] *** Bzek left
[08:38] <sorear> masak: it clearly works almost-fine since it can build the compiler and get to the niecza> prompt

[08:39] <sorear> there isn't a whole lot of point in running make right now, since boot/run/Niecza.exe and run/Niecza.exe will be almost the same unless there's a horrible bug

[08:40] <masak> fwiw, boot/run/Niecza.exe runs 'say 2 + 2' fine.

[08:40] <masak> that means there's some horrible bug, right? :)

[08:44] <sorear> yes.

[08:45] <sorear> horrible, as in, when I found out, I quit the project

[08:45] <sorear> (for about 3 minutes...)

[08:49] <masak> bootstrapping is like this, from what I can tell.

[08:50] *** Patterner left
[08:52] *** Psyche^ joined
[08:52] *** Psyche^ is now known as Patterner

[09:00] *** Layla_91 left
[09:13] <tadzik> ~

[09:13] <mathw> Morning

[09:17] <masak> \o

[09:18] <masak> from the Android Dev guide: "It‚Äôs possible that you may need to restrict your app‚Äôs availability for business or legal reasons. For instance, an app that displays train schedules for the London Underground is unlikely to be useful to users outside the United Kingdom."

[09:18] <masak> wait.. was that a business reason or a legal reason? o.O

[09:19] <masak> sounds like the restricting-Duration-for-math-ops thing all over again.

[09:19] <mathw> a sheer practicality reason

[09:19] <mathw> except

[09:19] <mathw> what if you're about to travel to London and you're loading up your phone in readiness

[09:19] <sorear> possibly legal.  the BBC tends to restrict a lot of the stuff they publish to taxpayers

[09:19] <masak> mathw: that's what I mean.

[09:19] <masak> sorear: this is not BBC :)

[09:19] <mathw> London Underground times has nothing to do with the BBC

[09:19] <masak> this is transportation.

[09:19] <mathw> that would be Transport for London

[09:20] <mathw> Of course one could still just use their website I suppose

[09:20] <mathw> But it's a silly restriction

[09:20] <masak> I read it and thought "huh. are they that afraid of terrorists? (and do they think terrorists can not work around such limitations?)"

[09:20] <mathw> I just think it's a very bad example

[09:20] <masak> ok.

[09:21] <mathw> It can't be a TfL terrorism thing if it's from the Android dev guide...

[09:21] <masak> true.

[09:22] <mathw> Or at least, it makes it massively less likely :)

[09:22] <mathw> And it's all on their website anyway

[09:22] <mathw> plus, given the frequency of tube trains most of the time, you don't need to know exact times

[09:22] <mathw> unless you're right out in the outer zones

[09:22] <mathw> or at the start and end of the day

[09:23] <mathw> you just go and stand there for a bit, and a train arrives

[09:23] <masak> convenient.

[09:23] <mathw> that's my usual approach to the trams here

[09:23] <mathw> all day they run roughly every five minutes

[09:24] <mathw> so even if I'm going somewhere past the split, it's still every ten ish

[09:24] <mathw> slightly more irritating on a Sunday or late at night

[09:26] <masak> sorear: did you once say that even stack-based VMs like JVM are register-based at some lower level? mberends and I got to talking about that the other week.

[09:28] <dalek> niecza: d971196 | sorear++ | lib/CLRBackend.cs:

[09:28] <dalek> niecza: Implement a used units cache for CLRBackend

[09:28] <dalek> niecza: review: https://github.com/sorear/niecza/commit/d9711961f7

[09:28] <dalek> niecza: 6437ed8 | sorear++ | lib/Builtins.cs:

[09:28] <dalek> niecza: Use a persistant child AppDomain for running code

[09:28] <dalek> niecza: review: https://github.com/sorear/niecza/commit/6437ed84d2

[09:28] *** hanekomu joined
[09:28] <sorear> masak: I said something almost but not quite that

[09:29] <sorear> masak: many small JVMs are stack-based internally, but optimizing ones aren't

[09:30] *** dakkar joined
[09:31] *** cjk101010 joined
[09:33] <masak> sorear: ah, ok.

[09:33] <masak> I just learned that Dalvik, the Android VM, is register-based.

[09:35] <sorear> dalvik is a bit of a special case

[09:35] <sorear> the Sun Java VM is designed to run in an environment where RAM grows on trees

[09:36] <masak> aye.

[09:36] <sorear> the "64MB default heap size" is the most blatant lie I've ever seen in software docs :/

[09:39] <mathw> dalvik isn't really a JVM, as I understand it

[09:42] <sorear> nice, with the latest change, a stage2 niecza has <=0.25s turnaround at the REPL

[09:42] *** kjeldahlw joined
[09:43] <sorear> niecza> our $x = 42;

[09:43] <sorear> niecza> say our $x;

[09:43] <sorear> 42

[09:43] <sorear> \o/

[09:52] <masak> mathw: correct.

[09:53] <masak> sorear: shouldn't 'my' work just as well in that case? if the REPL does the infinitely-nested-blocks thing, I mean.

[09:54] <sorear> baby steps...

[09:55] <sorear> there was previously no retention of state at all

[09:55] <sorear> but yes my *should* work

[09:55] *** eternaleye_ is now known as eternaleye

[09:55] <sorear> it requires interacting with STD on a deeper level than niecza currently does

[09:55] <sorear> I'll have to talk to TimToady about this

[10:01] *** cjk101010 left
[10:06] *** cjk101010 joined
[10:18] *** QinGW left
[10:21] *** JimmyZ joined
[10:28] <masak> sorear++ # progress

[10:29] <sorear> although tbh it's the 20x improvement in turnaround speed that pleases me more

[10:30] *** tzhs joined
[10:31] <masak> turnaround speed?

[10:33] <dalek> niecza: 0fd012e | sorear++ | src/Metamodel.pm6:

[10:33] *** payload joined
[10:33] <dalek> niecza: Fix accidental excessive sharing of stash nodes

[10:33] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0fd012e1eb

[10:33] <dalek> niecza: b1c6b40 | sorear++ | src/ (2 files):

[10:33] <dalek> niecza: Prune optrees after saving units

[10:33] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b1c6b40252

[10:33] <payload> hi

[10:34] <payload> is the scope wrong? i think so, but it works          while my $c = $*IN.getc { ... }; say $c

[10:38] <tadzik> rakudo: while my $c = $*IN.getc { }; say $c.perl

[10:38] <p6eval> rakudo f3eb64: OUTPUT¬´undef‚ê§¬ª

[10:39] <masak> payload: how do you mean with "scope wrong"?

[10:40] <masak> $c is declared in the outer scope, so it's visible after the loop.

[10:45] <payload> this answers my question, thanks

[10:46] <payload> is there a flow control thing, where      keyword my $foo { }   declares   $foo in the inner scope?

[10:47] *** ponbiki left
[10:50] <masak> payload: in Perl 6, the variable is visible in the scope where you declare it. the p5ism where it isn't wasn't considered a feature.

[10:51] <payload> and scopes are only opened by curlys, right?

[10:51] <masak> yes, that's another rule-of-thumb in Perl 6: scopes and (term) curlies are synonymous.

[10:52] <masak> or maybe I should say 'blocks' rather than 'scopes', because there are non-block scopes, too.

[10:54] <masak> rakudo: sub unsuitable($v) { !defined $v or $v < 5 }; my $x = $x + 1 while unsuitable($x); say $x

[10:54] <p6eval> rakudo f3eb64: OUTPUT¬´Use of uninitialized value in numeric context  in <anon> at line 22:/tmp/uZt52W0tGy‚ê§5‚ê§¬ª

[10:54] <masak> should I get a warning there?

[10:55] <masak> rakudo: sub unsuitable($v) { !defined($v) or $v < 5 }; my $x = $x + 1 while unsuitable($x); say $x

[10:55] <p6eval> rakudo f3eb64: OUTPUT¬´Use of uninitialized value in numeric context  in <anon> at line 22:/tmp/e56br4Mrq9‚ê§5‚ê§¬ª

[10:58] <masak> oh, right. the rule is that C<$x = $x + 1> gives the warning but C<$x++> doesn't.

[10:58] <masak> rakudo: sub unsuitable($v) { !defined($v) or $v < 5 }; my $x++ while unsuitable($x); say $x

[10:58] <p6eval> rakudo f3eb64: OUTPUT¬´Could not find sub &while‚ê§  in main program body at line 22:/tmp/Tfu3C0Fvz5‚ê§¬ª

[10:59] <masak> rakudo: sub unsuitable($v) { !defined($v) or $v < 5 }; (my $x)++ while unsuitable($x); say $x

[10:59] <p6eval> rakudo f3eb64: OUTPUT¬´5‚ê§¬ª

[10:59] <masak> \o/

[11:00] <masak> so, what matthias_ requested at http://irclog.perlgeek.de/perl6/2011-01-12#i_3179352 already exists/works.

[11:01] *** JimmyZ_ joined
[11:03] *** ponbiki joined
[11:03] *** JimmyZ left
[11:03] *** JimmyZ_ is now known as JimmyZ

[11:04] <masak> JimmyZ: ÊÇ®Â•Ω

[11:05] <JimmyZ> masak: È∫¶È´òÔºå‰∏ãÂçàÂ•Ω

[11:08] <masak> ^_^

[11:13] *** kjeldahlw left
[11:21] *** dorlamm joined
[11:32] *** payload left
[11:33] *** cogno joined
[11:40] *** satyavvd_ left
[11:45] *** Chillance joined
[11:51] *** cogno left
[11:57] *** dorlamm left
[12:02] *** cotto left
[12:02] *** cotto joined
[12:05] *** cogno joined
[12:08] *** hillu_ is now known as hillu

[12:09] *** tzhs left
[12:17] *** pmurias joined
[12:18] <pmurias> sorear: re boot/ i think updating it with any revision that passes the test suit and can build a niecza that is capable of replicating itself (and passing the test suit) is sane

[12:18] <pmurias> sorear: and checking that on a bunch of the mono versions we care about

[12:20] *** JimmyZ left
[12:22] *** agentzh left
[12:22] <masak> rakudo: say IO ~~ Cool

[12:22] <p6eval> rakudo f3eb64: OUTPUT¬´Bool::True‚ê§¬ª

[12:22] <masak> why is IO Cool? what particular methods from Cool is it that an IO needs?

[12:24] *** risou joined
[12:24] <colomon> I thought the default was for all the setting's classes to be Cool.

[12:24] <flussence> rakudo: say +IO

[12:24] <colomon> (ie, as far as I know, there aren't any Cool methods IO actually needs.)

[12:24] <p6eval> rakudo f3eb64: OUTPUT¬´0‚ê§¬ª

[12:24] *** cogno left
[12:26] *** coldhead left
[12:27] <masak> colomon: so far, I've seen it as all things that were scalar values in Perl 5 should be Cool in Perl 6.

[12:27] <flussence> I can't think of a case where any of those methods would actually be useful, IO's stringification and numification are mostly meaningless.

[12:28] <colomon> masak: you mean, in the spec, or as you've seen it in practice?

[12:28] <masak> as I've thought about it myself.

[12:29] <masak> Cool arose because there wasn't a natural place for a bunch of scalar-value methods.

[12:29] <colomon> I've certainly seen arrays used as strings via cool.

[12:30] *** cogno joined
[12:30] <masak> right. that's an array being used in its scalar "aspect".

[12:30] <flussence> the way I'd phrase it is that Cool goes on objects without external side-effects

[12:31] <flussence> (which is wrong, because that description doesn't work for date things...)

[12:31] <flussence> "stuff that doesn't use buffers"

[12:31] <colomon> errr.. it's using an array as a scalar, I guess, but an array wouldn't have been a thing that had a scalar string value in P5, would it have?

[12:31] <masak> by the way, the spec is still quite happy about talking about Scalar as a type. I'm very suspicious towards that type, since it doesn't seem to find its way into implementations for some reason.

[12:35] <masak> pugs: my Int $a = 42; say $a

[12:35] <p6eval> pugs: OUTPUT¬´42‚ê§¬ª

[12:35] <masak> pugs: my Scalar $a = 42; say $a

[12:35] <p6eval> pugs: OUTPUT¬´42‚ê§¬ª

[12:35] <masak> wow, Pugs is fast :)

[12:36] <masak> pugs: say Int ~~ Scalar

[12:36] <p6eval> pugs: OUTPUT¬´1‚ê§¬ª

[12:36] *** pmurias left
[12:36] <flussence> pugs: say Array ~~ Scalar

[12:36] <p6eval> pugs: OUTPUT¬´‚ê§¬ª

[12:38] <flussence> does Scalar exist for any reason besides to say "~~ (not a container type)" ?

[12:38] <flussence> it just looks wrong to me.

[12:38] <masak> I'm glad I'm not the only one thinking that.

[12:40] *** cogno left
[12:44] * colomon hadn't even realized the spec claimed Scalar was a type.

[12:47] <flussence> the definition of it in S32/Basics is pretty vague.

[12:48] <flussence> and S29:680 makes a reference to a nonexistent S32/Scalars file...

[12:49] <colomon> masak: looking back at what you were saying about scalars and cool, it seems like it's backwards to me.  That is, Cool is mostly (entirely?) a set of scalar methods, so of course anything you call via it is going to be used as a scalar.  That doesn't mean that it's only appropriate to have scalar types be Cool.

[12:49] <colomon> masak: It seems like the rationale should be something like "It makes sense to treat this as a string or a number".

[12:52] <flussence> rakudo: my %a = (abc => 1, def => 2); say +%a

[12:52] <p6eval> rakudo f3eb64: OUTPUT¬´2‚ê§¬ª

[12:52] <colomon> that said, it seems like it's very not obvious how to treat arrays and hashes as scalars in general.

[12:53] *** cjk101011 left
[12:53] *** cjk101011 joined
[12:53] <colomon> rakudo: my @a = (pi / 2, pi, 2 * pi); say @a.sin

[12:53] <p6eval> rakudo f3eb64: OUTPUT¬´0.141120008059867‚ê§¬ª

[12:54] <colomon> rakudo: my @a = <a b c>; say @a.chars

[12:54] <p6eval> rakudo f3eb64: OUTPUT¬´5‚ê§¬ª

[12:54] *** MayDaniel joined
[12:55] <flussence> (does perl6 still have a $" and $, for stringifying arrays?)

[12:56] <colomon> flussence: I'm pretty sure not

[12:56] <colomon> I sincerely hope not!  :)

[12:57] <flussence> it's not a big loss now that you can interpolate code inside strings anyway :)

[13:00] <arnsholt> And if you really want to just say "@array" and have something weird, you can monkey patch Array.Str

[13:00] <arnsholt> =)

[13:02] *** tzhs joined
[13:08] *** Vlavv left
[13:10] <takadonet> morning all

[13:11] <colomon> o/

[13:12] <masak> takadonet: \o

[13:28] *** willco left
[13:43] *** MayDaniel left
[13:49] *** cjk101010 left
[13:54] *** fhelmberger left
[13:59] *** fhelmberger joined
[14:09] *** plobsing left
[14:26] *** molaf joined
[14:27] <colomon> http://news.ycombinator.com/item?id=2111794  # jnthn: how does this compare to your signature tricks?

[14:28] *** ggoebel left
[14:30] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_meta_tablet

[14:32] *** plobsing joined
[14:33] *** ggoebel joined
[14:34] *** kaare_ left
[14:45] *** cjk101010 joined
[14:46] *** vmspb joined
[15:03] *** kaare_ joined
[15:04] *** PacoLinux joined
[15:08] *** bluescreen joined
[15:19] *** Lorn left
[15:21] *** MayDaniel joined
[15:23] *** plobsing left
[15:26] *** wamba joined
[15:28] *** cogno joined
[15:31] *** felliott joined
[15:32] *** plobsing joined
[15:35] *** wtw left
[15:40] <flussence> rakudo: say 1

[15:40] <p6eval> rakudo f3eb64: OUTPUT¬´1‚ê§¬ª

[15:41] <flussence> rakudo: say q:to'end'.lines.perl;‚ê§  1‚ê§  2‚ê§  3‚ê§  end

[15:41] <p6eval> rakudo f3eb64: OUTPUT¬´===SORRY!===‚ê§Colons may not be used to delimit quoting constructs at line 22, near ":to'end'.l"‚ê§¬ª

[15:41] <flussence> rakudo: say q:to('end').lines.perl;‚ê§  1‚ê§  2‚ê§  3‚ê§  end

[15:41] <p6eval> rakudo f3eb64: OUTPUT¬´===SORRY!===‚ê§Colons may not be used to delimit quoting constructs at line 22, near ":to('end')"‚ê§¬ª

[15:42] <masak> heredocs NYI

[15:43] <flussence> would that work if they were?

[15:43] <masak> std: say q:to('end').lines.perl;‚ê§  1‚ê§  2‚ê§  3‚ê§  end

[15:43] <p6eval> std 625303c: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Two terms in a row at /tmp/u7kHCnQfzI line 1:‚ê§------> [32msay q:to('end').lines.[33m‚èè[31mperl;[0m‚ê§    expecting any of:‚ê§ POST‚ê§   bracketed infix‚ê§        infix or meta-infix‚ê§    postfix‚ê§        postfix_prefix_meta_operator‚ê§   statement modifier

[15:43] <p6eval> ..loop‚ê§Parse failed‚ê§FAILED‚Ä¶

[15:43] <masak> no.

[15:43] <flussence> aw :(

[15:44] <flussence> std: say q:to'end'.lines.perl;‚ê§  1‚ê§  2‚ê§  3‚ê§  end

[15:44] <p6eval> std 625303c: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unrecognized quote modifier: to'end at /tmp/Xnfr3pxTil line 1:‚ê§------> [32msay q[33m‚èè[31m:to'end'.lines.perl;[0m‚ê§(Possible runaway string from line 1)‚ê§Couldn't find terminator ' at /tmp/Xnfr3pxTil line 5 (EOF):‚ê§------> [32m 

[15:44] <p6eval> ..end[33m‚èè[31m<EOL>[‚Ä¶

[15:44] <flussence> std: say q:to'end';‚ê§  1‚ê§  2‚ê§  3‚ê§  end

[15:44] <p6eval> std 625303c: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unrecognized quote modifier: to'end at /tmp/vtJrLIhfso line 1:‚ê§------> [32msay q[33m‚èè[31m:to'end';[0m‚ê§(Possible runaway string from line 1)‚ê§Couldn't find terminator ' at /tmp/vtJrLIhfso line 5 (EOF):‚ê§------> [32m  end[33m‚èè[31m<EOL>[0m‚ê§Parse

[15:44] <p6eval> ..fa‚Ä¶

[15:45] <flussence> eh?

[15:45] <flussence> std: say q:to/end/;‚ê§  1‚ê§  2‚ê§  3‚ê§  end

[15:45] <p6eval> std 625303c: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§(Possible runaway string from line 2)‚ê§Couldn't find delimiter for heredoc‚ê§ at /tmp/VTAL566Vlm line 5 (EOF):‚ê§------> [32m  end[33m‚èè[31m<EOL>[0m‚ê§Parse failed‚ê§FAILED 00:01 119m‚ê§¬ª

[15:46] <flussence> those syntaxes are in the spec, I thought they'd work... unless the lack of trailing \n is tripping it up.

[15:48] <masak> it shouldn't, I think.

[15:49] *** cogno left
[15:51] <flussence> well I'll have to figure it out later... I left my laptop's power brick at home :D

[15:51] *** cogno joined
[15:51] <flussence> .oO( I wonder if this 3% is even accurate... )

[15:53] *** ashleydev joined
[15:55] *** MonetizedCulture joined
[15:56] <MonetizedCulture> Are #perl ops the types that hold grudges? I used to troll there back in high school and now they still ban me even though I need to use Perl in production now for managing an RDBMS

[15:58] <masak> MonetizedCulture: not really sure why you're asking that here. maybe you should talk to a #perl op, or go on the lookout for a channel you need that you haven't been trolling back in high school.

[15:58] <frettled> masak: perhaps he's just trolling ;)

[15:59] <masak> no way to know without interacting with him.

[16:00] <MonetizedCulture> Just trying to get to figure out some CPAN breakage :(

[16:00] <MonetizedCulture> sorry

[16:01] <frettled> MonetizedCulture: hey, we should apologize for being nasty.  Sorry.

[16:01] <masak> there are lots of channels on irc.perl.org that aren't #perl. I wouldn't call #perl the most informative/constructive channel, either.

[16:02] <sbp> and they say your permanent record won't count later in life...

[16:02] <masak> MonetizedCulture: I apologize for frettled being nasty. :P

[16:02] <frettled> MonetizedCulture: but although we do have people here who use both Perl 5 and Perl 6, I think that this is the right place for it.

[16:03] <MonetizedCulture> np

[16:03] <frettled> MonetizedCulture: but try asking your question, and see if we can get you any usable pointers.

[16:05] *** cogno left
[16:09] <MonetizedCulture> Okay, I found out it was just because they ban webchat.

[16:09] <MonetizedCulture> Thanks, bye :)

[16:09] *** MonetizedCulture left
[16:13] *** vmspb left
[16:15] *** cogno joined
[16:16] *** kjeldahl joined
[16:17] *** bluescreen left
[16:18] *** bacek left
[16:22] *** MayDaniel left
[16:23] *** mux left
[16:25] *** tzhs left
[16:25] *** MayDaniel joined
[16:26] *** cogno left
[16:27] *** envi left
[16:31] *** bacek joined
[16:33] *** risou_ joined
[16:35] <felliott> Good afternoon, #perl6

[16:35] *** hanekomu left
[16:35] *** risou left
[16:35] <takadonet> felliott: hey

[16:36] <felliott> I've written tests for the chained-xor bugs and I was wondering how I should submit them.

[16:36] <tadzik> o/

[16:36] <felliott> s/written/added thundergnat's tests from RT# 65164/

[16:36] <felliott> \o

[16:37] <takadonet> you could fork off the perl6 test suite and then do a pull request

[16:37] <tadzik> felliott: send them to the RT

[16:37] <tadzik> or what takadonet said

[16:37] <felliott> okay, I shall do that.

[16:37] <takadonet> https://github.com/perl6/roast

[16:37] <takadonet> that's the repo for the test suite

[16:39] <felliott> thanks!

[16:42] <takadonet> felliott: anytime

[16:42] <takadonet> thanks for helping :)

[16:42] *** cjk101010 left
[16:43] *** willco joined
[16:45] *** fhelmberger left
[16:46] *** JimmyZ joined
[16:50] *** fhelmberger joined
[16:51] *** plobsing left
[16:55] <masak> std: my ($a. $a)

[16:55] <p6eval> std 625303c: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unable to parse declarator at /tmp/AWTD9lrjAK line 1:‚ê§------> [32mmy [33m‚èè[31m($a. $a)[0m‚ê§Couldn't find final ')'; gave up at /tmp/AWTD9lrjAK line 1:‚ê§------> [32mmy ($a[33m‚èè[31m. $a)[0m‚ê§    expecting any of:‚ê§     constraint‚ê§     param_sep‚ê§ 

[16:55] <p6eval> ..    parameter‚ê§      ‚Ä¶

[16:56] <masak> a bit LTA.

[16:56] <masak> er.

[16:56] <masak> std: my ($a, $a)

[16:56] <p6eval> std 625303c: OUTPUT¬´Potential difficulties:‚ê§  Useless redeclaration of variable $a (see line 1) at /tmp/2eSGdq8S_e line 1:‚ê§------> [32mmy ($a, [33m‚èè[31m$a)[0m‚ê§ok 00:01 120m‚ê§¬ª

[16:56] <masak> heh. better :)

[16:56] <masak> rakudo: my ($a, $a) = 1, 2; say $a

[16:56] <p6eval> rakudo f3eb64: OUTPUT¬´===SORRY!===‚ê§Redeclaration of symbol $a at line 22, near ") = 1, 2; "‚ê§¬ª

[16:56] *** plobsing joined
[17:06] <felliott> I also found some old bugs that are fixed and already have tests.

[17:06] <felliott> Should I mark them resolved or comment on them?

[17:08] * takadonet points to masak

[17:08] *** solarion joined
[17:08] *** Vlavv_ joined
[17:13] *** plobsing left
[17:16] <masak> felliott: if you have the privs, please resolve them.

[17:16] *** wamba left
[17:16] <masak> felliott: I'm happy to meet people pushing the open-ticket number downwards. :)

[17:19] <felliott> Well, I submitted a comment and tried to mark it, but it said I don't have the privs.

[17:20] <felliott> I wish it hadn't let  the comment go through.  :)

[17:20] <felliott> I'm looking a #77578

[17:20] <felliott> s/a/at/

[17:21] * masak closes it

[17:22] <masak> felliott: if you want more tickets resolve, either let me/us know here, or have RT cc the comments to p6c.

[17:22] <felliott> thanks!

[17:22] <masak> felliott: next time pmichaud stops by, he can give you more RT privs.

[17:22] <masak> afk &

[17:30] <jnthn> evening, #perl6

[17:37] *** JimmyZ left
[17:42] *** justatheory joined
[17:45] *** cogno joined
[17:48] <takadonet> jnthn: evening

[17:49] <jnthn> o/, takadonet 

[17:55] *** simon__ joined
[17:59] <masak> lolitsjnthn!

[18:02] *** dakkar left
[18:02] <jnthn> yayitsmasak!

[18:03] *** MayDaniel left
[18:05] *** risou_ left
[18:07] <TimToady> whatsupwiththisnospacesmeme?

[18:07] *** PZt left
[18:09] *** supernovus joined
[18:11] *** PacoLinux left
[18:14] <jnthn> regularbrokenspacebartraining

[18:15] *** felliott left
[18:17] *** PacoLinux joined
[18:17] *** kfo joined
[18:20] *** mux joined
[18:21] *** kfo_ left
[18:22] *** GinoMan_ left
[18:23] *** GinoMan joined
[18:24] *** cogno left
[18:26] *** felliott joined
[18:28] <rokoteko> I never realized regular 'bro ken did spacebar training.

[18:31] <masak> Bro Ken! What's up, didn't you do any regular space bar training?

[18:33] <supernovus> in the META.info files, I haven't seen a spec for them yet, but is depends just an array of package names like deps.proto uses? Or is it the names as in the "name" field of the META.info ?

[18:34] <tadzik> supernovus: the new names

[18:34] <tadzik> I'll "spec" it in some spare time, I promise

[18:35] <supernovus> Ah, I'll have to update it, I had put "json" instead of "JSON::Tiny"... I'm used to deps.proto. Does neutro still use the deps.proto file if there is no META.info?

[18:37] <tadzik> nah

[18:37] <tadzik> it doesn't have the database of the old names, nope

[18:38] <supernovus> I'm guessing the new version isn't in play yet, as my ~/.neutro folder still has a copy of the old projects.list file :-)

[18:38] <sorear> good * #perl6

[18:39] <takadonet> sorear: yo

[18:39] *** plobsing joined
[18:40] <tadzik> supernovus: it probably didn't delete it :) Playing with the new branch requires removing the old .neutro dir

[18:40] <tadzik> sorear: o/

[18:42] <sorear> moritz_: diakopter ping

[18:42] *** PZt joined
[18:44] *** felliott left
[18:50] <supernovus> tadzik: I just looked at the new branch, that looks awesome! When I finish adding proper META.info files to all my projects, I'll send you a list you can update and remove the SHELTER files for.

[18:53] *** vmspb joined
[18:54] <tadzik> ++supernovus

[18:57] *** cogno joined
[19:05] *** molaf left
[19:06] *** payload joined
[19:06] <payload> hi

[19:06] <masak> \o

[19:06] <payload> rakudo: "foo".index("z")

[19:06] *** Lorn joined
[19:06] <p6eval> rakudo f3eb64:  ( no output )

[19:07] <payload> rakudo: say "foo".index("z")

[19:07] <p6eval> rakudo f3eb64:  ( no output )

[19:07] <payload> it throws a error

[19:07] <colomon> rakudo: say "foo".index("z").WHAT

[19:07] <p6eval> rakudo f3eb64: OUTPUT¬´Failure()‚ê§¬ª

[19:07] <masak> classic "something happens within a 'say' call and it never comes back" bug.

[19:08] <payload> > say "a".index("b") ===SORRY!=== Substring 'b' not found in 'a'

[19:09] <masak> that's better.

[19:09] <payload> no, it just dies where the spec says it returns a falsy StrPos

[19:09] <masak> StrPos NYI.

[19:09] <masak> it doesn't die, not really.

[19:10] <masak> rakudo: say defined "foo".index("z")

[19:10] <p6eval> rakudo f3eb64: OUTPUT¬´Bool::False‚ê§¬ª

[19:10] <colomon> rakudo: if "foo".index("z") { say "boo!"; };

[19:10] <p6eval> rakudo f3eb64:  ( no output )

[19:10] <colomon> rakudo: if "foo".index("z") { say "boo!"; } else { say "Drat"; };

[19:10] <p6eval> rakudo f3eb64: OUTPUT¬´Drat‚ê§¬ª

[19:13] <payload> why does my perl6 repl breaks and die screaming SORRY? but okay

[19:13] <payload> so i can use index for string inclusion test?

[19:14] <colomon> you're trying to use a non-existant result.  

[19:14] <masak> I don't know why it screams SORRY.

[19:14] *** felliott joined
[19:14] <masak> it dies because you're "triggering" the Failure by trying to print it.

[19:14] <colomon> SORRY is probably the "I've just tried to do something I cannot with a Failure" message.

[19:14] *** vmspb left
[19:15] *** felliott_ joined
[19:15] *** felliott left
[19:15] *** felliott_ is now known as felliott

[19:16] <colomon> masak: The spec does seem a bit wonky here.

[19:16] <masak> how do you mean?

[19:17] <colomon> payload: The thing is, if you just         say "foo".index("z")       then you'll get a mysterious warning message and a 0 value which is otherwise indistinguishable from the 0 you'd get if it found the string at the first position.

[19:19] *** plobsing left
[19:19] <colomon> masak: The spec'd behavior is to return a prototype StrPos there.  So if you don't test the return value, your only clue something went wrong is an informative warning message.

[19:20] <colomon> rakudo: say Int + 4;

[19:20] <p6eval> rakudo f3eb64: OUTPUT¬´4‚ê§¬ª

[19:20] <colomon> rakudo: say Int() + 4;

[19:20] <p6eval> rakudo f3eb64: OUTPUT¬´Could not find sub &Int‚ê§  in main program body at line 22:/tmp/QvZ5vdcv4p‚ê§¬ª

[19:20] <colomon> rakudo: my Int $a; say $a + 4;

[19:20] <p6eval> rakudo f3eb64: OUTPUT¬´4‚ê§¬ª

[19:20] <colomon> ack!

[19:21] <colomon> your only clue is an UNinformative warning message.

[19:22] <colomon> or judging by the above result, no warning message at all, in the current Rakudo.

[19:24] <masak> that *is* surprising.

[19:25] <masak> perhaps that was put in because of the Str thing.

[19:25] <colomon> I don't get a warning from p6eval or the REPL

[19:25] <masak> rakudo: my Str $s; for 1..10 { $s ~= $_ }; say $s

[19:25] <p6eval> rakudo f3eb64: OUTPUT¬´12345678910‚ê§¬ª

[19:25] <colomon> my $a; say $a ** 2; # does get a warning when run as a program.

[19:25] <masak> here, it's entirely reasonable that Str "collapses" to "".

[19:26] <masak> yes, but there it's untyped.

[19:26] <masak> it's the difference between Any and Int.

[19:26] <colomon> rakudo: my $a; say $a;

[19:26] <p6eval> rakudo f3eb64: OUTPUT¬´Any()‚ê§¬ª

[19:26] <colomon> rakudo: my Int $a; say $a;

[19:26] <p6eval> rakudo f3eb64: OUTPUT¬´Int()‚ê§¬ª

[19:26] <colomon> rakudo: my Str $a; say $a;

[19:26] <p6eval> rakudo f3eb64: OUTPUT¬´Str()‚ê§¬ª

[19:27] <colomon> look at that.

[19:27] <colomon> my Int $a; say $a ** 2; # no warning

[19:28] <colomon> rakudo: class A does Real { has $.n; method Bridge { $.n;  } }; my A $a; say $a ** 2;

[19:28] <p6eval> rakudo f3eb64: OUTPUT¬´Type objects are abstract and have no attributes, but you tried to access $!n‚ê§  in 'A::Bridge' at line 22:/tmp/YRkZXiPvN1‚ê§  in 'infix:<**>' at line 3715:CORE.setting‚ê§  in main program body at line 22:/tmp/YRkZXiPvN1‚ê§¬ª

[19:29] *** MayDaniel joined
[19:30] *** felliott left
[19:30] *** plobsing joined
[19:31] *** felliott joined
[19:34] <colomon> my Rat $a; say $a ** 2; # hard error which ends program execution

[19:34] *** proller_ joined
[19:38] <dalek> ecosystem: 23aa896 | (Timothy Totten)++ | projects.list:

[19:38] <dalek> ecosystem: Added whitenoise to projects.list

[19:38] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/23aa896f08

[19:39] *** cogno left
[19:39] *** cogno joined
[19:41] <supernovus> tadzik: There, all my projects have a META.info now. I sent a pull request with the updated META.list file.

[19:42] <tadzik> supernovus++

[19:42] <tadzik> awesome, let me pull this in

[19:42] <masak> I'll see about doing the same tonight with my projects.

[19:45] *** Alias left
[19:46] <supernovus> phenny: tell moritz_ there is a bug fix on JSON::Tiny waiting in your pull requests.

[19:46] <phenny> supernovus: I'll pass that on when moritz_ is around.

[19:47] <colomon> tadzik: I think all my projects have a META.info as well.  Though I'm not 100% convinced I'm not forgetting a project or two.  :)

[19:48] <tadzik> colomon: you can see if there's anything in the SHELTER

[19:48] <colomon> which is where?

[19:50] *** Khisanth joined
[19:51] <tadzik> colomon: https://github.com/tadzik/ecosystem/blob/master/META.list

[19:51] <tadzik> look for the ones with SHELTER in path

[19:51] *** coldhead joined
[19:53] <supernovus> Gah, 1m16.339s to generate 3 example pages and the relevant index pages using my new static website generator... I think I need to do some optimization on the generation algorithm. Rakudo's speed is certainly it's biggest drawback at the moment :(

[19:53] <colomon> tadzik: I believe Math-Vector, Math-Prime, and io-prompt are all up to date now.

[19:55] <jnthn> supernovus: Is the code somewhere?

[19:56] * jnthn wonders what would make a website generator so slow... :|

[19:56] <colomon> Rakudo can!  ;)

[19:56] <supernovus> jnthn: http://github.com/supernovus/whitenoise  but I'm going to completely change how the generation calls are made, so that indexes are built once after all pages are generated, so if two pages are tagged with the same tag, that tags index is only built once.

[19:56] <jnthn> colomon: :P

[20:01] *** felliott left
[20:02] <colomon> tadzik: mandelbrot has META.info now too.

[20:05] <tadzik> colomon: I added you, supernovus and masak to my ecosystem fork, can you fix the list?

[20:06] <tadzik> by "fix" I mean take the appropriate modules from the SHELTER

[20:06] <colomon> How do I fix it?  Is there an automatic way to do it?

[20:07] <tadzik> well, you just edit the META.list file and remove the SHELTER/module directory

[20:07] <tadzik> see the last commit by supernovus++

[20:07] * colomon is suddenly worried his brain is just not working today.

[20:08] <colomon> I can do that, I think.  :)

[20:10] <tadzik> wow, whitenoise looks impressive

[20:10] *** cogno left
[20:11] <colomon> tadzik: is there a way of checking to see if I've got the bits I've changed correct?

[20:11] * colomon does not like the idea of pushing to someone else's repo without having tests to run. 

[20:11] *** vmspb joined
[20:12] <tadzik> colomon: hmm. You can ./update.pl, move the generated file to the neutro config dir and check if --list looks ok, or even if the modules install

[20:12] *** estrabd is now known as estrabd_waac

[20:13] <tadzik> colomon: no worries, it's nothing critical, the whole thing is still experimental even compared to the existing ecosystem

[20:13] *** cogno joined
[20:14] *** Su-Shee_ joined
[20:14] *** Su-Shee left
[20:15] *** fhelmberger left
[20:16] * masak backlogs over the part where Layla_91 says she likes Camelia

[20:16] <masak> have we had any female hacker in here saying that they *don't* like Camelia?

[20:18] <colomon> tadzik: pushed without testing.  :)

[20:19] <tadzik> good :)

[20:19] <tadzik> erm, I mean, exciting!

[20:19] *** MayDaniel left
[20:20] <masak> I think a weekend of intense hacking by a group of 3..5 people would give us a really good start on STD_P5.

[20:20] <tadzik> colomon: looks ok to me

[20:20] <masak> question is, which other 2..4 people? :)

[20:20] * jnthn hides

[20:20] <tadzik> masak: you mean, the Perl 5 Standard Grammar?

[20:21] <masak> yes.

[20:21] <sorear> masak: what weekend?

[20:21] <masak> sorear: that's also a good question. some fitting weekend.

[20:22] <masak> tadzik: in fact, I wouldn't mind leading (or being an active participant in) the group that finally puts Perl 5 on Parrot.

[20:22] <masak> imagine, using nqp-rx to reimplement Goodenuf Perl 5!

[20:22] <tadzik> /o/ woo-hoo

[20:22] <jnthn> If you use nqp-rx, you might have it on more than just Parrot. :)

[20:23] <masak> jnthn: \o\ woo-hoo!

[20:23] <tadzik> ay, right!

[20:23] <tadzik> Failed fetching https://github.com/colomon/raw/master/mandelbrot/META.info

[20:23] <tadzik> I love the Github 404 page

[20:23] <jnthn> .oO( PCT = Portable Compiler Toolkit? )

[20:24] <masak> :D

[20:24] * masak always thought the "P" stood for "Patrick"

[20:24] <colomon> tadzik: ooooo, for obvious reasons

[20:24] <tadzik> si

[20:24] <tadzik> wanna fix this?

[20:24] <colomon> on it

[20:24] *** cogno left
[20:24] <jnthn> masak: Shhh...that's a secret. :P

[20:24] <colomon> dang it, I got them all wrong

[20:25] <jnthn> That 404 page rocks. It does still if you move your mouse around ont he image.

[20:25] <tadzik> yeah

[20:25] <masak> jnthn: oh, right. I forgot that part of The Plan wasn't to be disseminated.

[20:25] <masak> oops

[20:25] * masak shuts up

[20:26] <jnthn> :P

[20:26] <tadzik> neutro is terribly slow after all the Improvements

[20:26] *** cogno joined
[20:27] <colomon> tadzik: fix pushed

[20:28] *** proller_ left
[20:28] <supernovus> tadzik: The nicest part about Improvements, is they all tend to make things slower ;-)

[20:29] <tadzik> ;)

[20:29] <masak> I'd disagree, but then I might be accused of being slow (without necessarily being improved).

[20:30] *** cogno left
[20:31] *** cogno joined
[20:35] *** Util joined
[20:35] <arnsholt> masak: I might be interested in a STD_P5 hackathon

[20:35] <masak> nice!

[20:36] <arnsholt> Depending a bit on time and place and such, of course

[20:36] <masak> it'll be heavily test-based, of course.

[20:36] <masak> yes, it's depending a bit on time for me as well.

[20:36] <arnsholt> Yeah, test based makes sense. With a bit of luck a fair amount of tests can be created by stealing tests from the P5 test suite

[20:37] <masak> arnsholt: oh, you're thinking one might have an away-from-keyboard meeting? yes, that might be even more intensive.

[20:38] <arnsholt> Yeah, an IRL hackathon should be more intense, but harder to arrange of course

[20:38] <masak> aye.

[20:40] <masak> why would I write C<$file.IO ~~ :e> when I can write C<$file.IO.e>?

[20:40] <arnsholt> Brainfart? =)

[20:40] <masak> no, I mean, why is the former the convention?

[20:41] *** cogno left
[20:41] *** MayDaniel joined
[20:41] <masak> just inertia?

[20:41] <arnsholt> Oh, right

[20:41] <arnsholt> Yeah, I guess inertia might be an explanation

[20:41] <tadzik> phenny: "inertia"?

[20:41] <phenny> tadzik: Language guessing failed, so try suggesting one!

[20:42] <tadzik> oh, it's to-English

[20:42] *** cogno joined
[20:43] *** buubot joined
[20:44] <colomon> speaking of inertia: why is it ~~ :e or .e instead of .exists?

[20:44] <tadzik> buubot: print "Are you the one running Perl 5 code?"

[20:45] <masak> colomon: oh, there's a possible advantage of the pair syntax.

[20:45] <masak> colomon: ~~ :e & :d

[20:45] <masak> buubot: ?eval print "OH HAI!\n"

[20:46] <masak> buubot: eval print "OH HAI!\n"

[20:46] <colomon> :d doesn't imply :e ?

[20:46] <masak> colomon: it does. just an example :)

[20:46] <tadzik> ...so what's "inertia" again? I see only the physics-related meanings

[20:46] <masak> ~~ :d | :!e, then

[20:46] <masak> tadzik: it's a metaphor for the physics meaning.

[20:47] <masak> tadzik: "things moving in a straight line because there's nothing to stop them"

[20:47] *** cogno left
[20:47] <moritz_> sorear: pong

[20:47] <phenny> moritz_: 19:46Z <supernovus> tell moritz_ there is a bug fix on JSON::Tiny waiting in your pull requests.

[20:47] <masak> or maybe "things not moving because the forces acting on them are smaller than the resistance".

[20:47] <moritz_> supernovus: I know

[20:48] <moritz_> hugme: add supernovus to json

[20:48] * hugme hugs supernovus. Welcome to json!

[20:48] <buubot> tadzik: No factoid found. Did you mean one of these: [prints it funny =( jsc told me 'new Boolean("x")'] [prints the last expression that] [prints whatever]       

[20:48] <buubot> masak: OH HAI! 1       

[20:48] <supernovus> moritz_: thanks for the hug!

[20:48] <masak> buubot: you're slow.

[20:48] <buubot> masak: No factoid found. Did you mean one of these: [you're slow today,]       

[20:48] <moritz_> supernovus: I'm currently a bit short on tuits, but feel free to apply yourself (I don't think I'll forget, but it might take some time)

[20:48] <arnsholt> The borg approach to repo managment: You will be commiterified!

[20:48] <masak> buubot: you're slow today

[20:48] <buubot> masak: you're slow today, is buu abusing you again?       

[20:49] <masak> :)

[20:49] <moritz_> arnsholt: yes, learned that from au++

[20:50] <arnsholt> Indeed. It's a part of the Perl 6 community I quite like

[20:50] <sorear> moritz_: how do I enter p6eval's environment from a root shell on host04?

[20:51] <moritz_> sorear: chroot /chroot

[20:51] <moritz_> sorear: and then  su - p6eval

[20:51] <tadzik> ~36% of the ecosystem is now using the new META.info format

[20:51] <colomon> tadzik++

[20:53] *** willco left
[20:54] *** plobsing left
[20:54] *** mdxi left
[20:54] <tadzik> once masak ports his, we're up to 51%. cosimo would be able to bump it by another 6-7%, and then I think all the Star modules will be available

[20:55] * masak is currently working on a tool to publish the p6cc solutions

[20:55] <moritz_> supernovus: sorry for being so unresponsive so far

[20:55] <moritz_> apache? :-)

[20:55] *** cxreg left
[20:55] <supernovus> moritz_: no worries, I know how busy things can get!

[20:56] *** jql left
[20:56] <tadzik> masak: I hope you don't feel hurried constantly

[20:56] *** cschimm1 left
[20:56] *** starcoder left
[20:56] <masak> a little. but only because I'm eager to actually port my modules over to the META.info regime ;)

[20:59] *** cschimm1 joined
[20:59] *** lestrrat joined
[21:00] <tadzik> :)

[21:00] <tadzik> pardon me if you feel nagged

[21:00] <masak> no worries. :)

[21:01] <dalek> roast: 89c9e47 | (Fitz Elliott)++ | S03-operators/reduce-le1arg.t:

[21:01] <dalek> roast: fix erroneous [^^] () test

[21:01] <dalek> roast: review: https://github.com/perl6/roast/commit/89c9e47702

[21:01] <dalek> roast: 47ae049 | (Fitz Elliott)++ | S03-operators/short-circuit.t:

[21:01] <dalek> roast: test infix:<^^>'s short circuiting

[21:01] <dalek> roast: review: https://github.com/perl6/roast/commit/47ae04976c

[21:01] <dalek> roast: e813e69 | (Fitz Elliott)++ | S03-operators/reduce-le1arg.t:

[21:01] <dalek> roast: mark test for RT #65164

[21:01] <dalek> roast: review: https://github.com/perl6/roast/commit/e813e69ad8

[21:01] <dalek> roast: e9cdf15 | (Fitz Elliott)++ | S03-metaops/reduce.t:

[21:01] <dalek> roast: add tests for RT #65164 (chained-xor reduce: [^^])

[21:01] <dalek> roast: review: https://github.com/perl6/roast/commit/e9cdf1540d

[21:01] <dalek> roast: 98e39b7 | (Fitz Elliott)++ | S03-operators/short-circuit.t:

[21:01] <dalek> roast: test for RT #73820 & RT #72826, return values of infix ^^

[21:01] <dalek> roast: review: https://github.com/perl6/roast/commit/98e39b7294

[21:01] <dalek> roast: c70eae3 | (Fitz Elliott)++ | S02-literals/quoting.t:

[21:01] <dalek> roast: add test for RT #78874

[21:01] <dalek> roast: review: https://github.com/perl6/roast/commit/c70eae34bb

[21:01] <dalek> roast: d96889b | (Fitz Elliott)++ | S05-capture/caps.t:

[21:01] <dalek> roast: fix and unfudge tests for RT #75484

[21:01] <dalek> roast: review: https://github.com/perl6/roast/commit/d96889b087

[21:02] <masak> yay! commitflood!

[21:02] <masak> fitz++

[21:02] <moritz_> felliott++ had a pull request with seven commits

[21:02] <masak> excellent.

[21:02] <moritz_> and he now has commit access :-)

[21:02] <colomon> \o/

[21:02] <masak> seems like he should :D

[21:04] *** starcoder joined
[21:05] *** cxreg joined
[21:05] <supernovus> Well, that set of optimizations seems to have helped, went from 1m16.339s with the old page generation method to 0m41.936s with the new one.

[21:05] *** felliott joined
[21:06] *** Kovensky joined
[21:06] *** mdxi joined
[21:07] <dalek> rakudo: c664e85 | moritz++ | build/PARROT_REVISION:

[21:07] <dalek> rakudo: parrot release is immanent, so bump PARROT_REVISION for testing

[21:07] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/c664e859a1

[21:07] * moritz_ deosn't even know yet if rakudo compiles on that revision

[21:08] <jnthn> moritz_: I can launch a build here with it to see.

[21:08] <moritz_> jnthn: would be nice

[21:08] <moritz_> I'm building too, but quite on a different platform than you :-)

[21:08] <tadzik> the --gen-exciting-parrot would be a nice LHF, no?

[21:09] <masak> --gen-ex-parrot

[21:09] <jnthn> -exciting- ? :)

[21:10] <colomon> oh woah, release is this week?

[21:10] <masak> @flies>>.time

[21:10] <jnthn> colomon: Aye.

[21:10] <tadzik> jnthn: the "ignore PARROT_REVISION and get me the latest" option

[21:11] <jnthn> .oO( --gen-terrifying-parrot )

[21:12] <moritz_> seen pmichaud

[21:12] <aloha> pmichaud was last seen in #perl6 5 days 2 hours ago saying "it's in S12, iirc".

[21:12] * jnthn wonders how many Rakudo releases between now and 6model landing

[21:12] <masak> S12 can take quite a while to read through...

[21:12] <colomon> 1?  :)

[21:12] <jnthn> colomon: No, though by the next Rakudo release work on Rakudo on 6model will be underway in a branch.

[21:14] <colomon> that's nqp-rx / 6model or .net 6model?

[21:15] <jnthn> colomon: On nqp-rx/nom's 6model implementation

[21:16] <colomon> cool.

[21:16] <jnthn> colomon: The process of getting Rakudo using 6model will break a bunch of Parrot dependencies we have now.

[21:16] <jnthn> And thus make the latter easier.

[21:16] <jnthn> But NQP on CLR (and/or JVM) needs to be able to bootstrap itself before putting Rakudo on them is really possible/sane.

[21:17] <tadzik> hmm, will that mean PCT gets ported to .NET, JVM or something?

[21:17] <tadzik> And if not, how will Rakudo on .NET use it? Will it use Parrot to parse and then generate a code for a different platform?

[21:18] <jnthn> tadzik: Yes. The 6model repo already has a PAST compiler that ends up generating .Net code.

[21:18] <jnthn> tadzik: And the same but to a lesser extent for the JVM

[21:18] <jnthn> tadzik: At the moment it uses Parrot to parse and generate the code

[21:18] <jnthn> But at some point it'll be capable of building itself

[21:19] <jnthn> It's a cross-compiler at the moment

[21:19] <jnthn> But that's because that's all it can be at the moment. :)

[21:20] <tadzik> :)

[21:22] <jnthn> Anyway, my dream is that if you write your grammar and actions in NQP, build PAST nodes, and implement your object model atop of the 6model primitives, then you have a pretty portable compiler.

[21:28] <diakopter> niecza: 1.say

[21:28] <p6eval> niecza v1-149-g56c80b0: OUTPUT¬´Unhandled exception: Unable to resolve method keys in class Array‚ê§  at /home/p6eval/niecza/boot/lib/SAFE.setting line 922 (SAFE keys @ 2)‚ê§  at /home/p6eval/niecza/src/Metamodel.pm6 line 192 (Metamodel Namespace.list_stash @ 7)‚ê§  at

[21:28] <p6eval> ../home/p6eval/niecza/src/Metamodel.pm6 line 603 (Me‚Ä¶

[21:29] <tadzik> niecza: say 1

[21:29] <p6eval> niecza v1-149-g56c80b0: OUTPUT¬´Unhandled exception: Unable to resolve method keys in class Array‚ê§  at /home/p6eval/niecza/boot/lib/SAFE.setting line 922 (SAFE keys @ 2)‚ê§  at /home/p6eval/niecza/src/Metamodel.pm6 line 192 (Metamodel Namespace.list_stash @ 7)‚ê§  at

[21:29] <p6eval> ../home/p6eval/niecza/src/Metamodel.pm6 line 603 (Me‚Ä¶

[21:30] <moritz_> rakudo: .say for 0..^3.3

[21:31] <p6eval> rakudo f3eb64: OUTPUT¬´0‚ê§1‚ê§2‚ê§3‚ê§¬ª

[21:31] <moritz_> rakudo: say (0..^3.3).Numeric

[21:31] <p6eval> rakudo f3eb64: OUTPUT¬´4‚ê§¬ª

[21:36] <masak> should I be worried that the next Parrot release is "immanent" instead of "imminent"? :P

[21:37] <masak> dictionary.com defines "immanent" as "taking place withing the mind of the subject and having no effect outside it".

[21:37] <arnsholt> Possibly

[21:37] <masak> *within

[21:37] <tadzik> --amend and --force!!!11

[21:37] <arnsholt> Depends on how deconstructionist the current release manager is =)

[21:37] <masak> maybe it's a quantum-cat thing, and I shouldn't ask.

[21:40] <lue> hello worlds o/

[21:40] <tadzik> \o

[21:42] *** willco joined
[21:42] <lue> .oO(Monty's Parrot: The parrot (is&!is) dead)

[21:44] <tadzik> . o O ( Parrot.new but Dead but Alive )

[21:45] <masak> lue: hello little wave function.

[21:46] <lue> .oO(rakudo: my $a = 3; say $a;        OUTPUT¬´Null PMC access in xidhicoSd34‚ê§3¬ª)

[21:46] <lue> little wave function?

[21:46] <tadzik> xidhico!

[21:46] <tadzik> Looks like a Chinese dirty word

[21:46] <tadzik> phenny: "xidhico"?

[21:46] <phenny> tadzik: Language guessing failed, so try suggesting one!

[21:46] <masak> lue: you said 'hello worlds', which I took to be an allusion to the many-worlds theory.

[21:47] <masak> s/theory/hypothesis/

[21:47] <masak> tadzik: it can't be Mandarin, because a syllable can't end in a 'd'.

[21:47] <moritz_> s/hypthesis/interpretation/

[21:47] <masak> moritz_: thanks.

[21:48] * masak is a quantum amateur :)

[21:48] * moritz_ too

[21:48] <lue> accidental allusions are always amazing (along always are alliterations apparently)

[21:49] <masak> lue: anyway, if "wavefunction" is a new concept to you, I suggest you check out http://en.wikipedia.org/wiki/Double-slit_experiment

[21:50] <moritz_> yeah, a friend of mine wrote a story with allusions to fairytales, and when we read it we found more allusions than she had put in :-)

[21:51] <moritz_> the most fascinating aprt of the double slit experiment is that it works for single photons

[21:51] <masak> moritz_: yes, that's just creepy.

[21:51] <masak> it's like Nature is just showing off.

[21:52] * masak wonders if there's a subroutine in Nature called temporarily_switch_on_self_interference_for_those_double_slit_experimenters

[21:52] <lue> I think I saw an animation of this experiment when I was 5 and thought Encarta (and the rest of Microsoft) was really AWESOME!!

[21:53] <lue> Funny enough, it was title "Quantum Theory" or something and it was my favorite teaching animation out of all the others on Encarta :D

[21:53] <moritz_> masak: and it's comparably amazing that so little of that creepiness remains on the makroscopic scale

[21:54] <masak> indeed.

[21:56] <lue> a class inherets with    is    , regardless of whether it's inhereting a role or class, right?

[21:57] <jnthn> lue: If you try to inherit from a role, it puns a class and inherits from that

[21:57] *** plobsing joined
[21:59] <tadzik> you don't inherit a Role

[22:00] <masak> well, what jnthn said.

[22:00] <tadzik> yeah

[22:00] <Tene> The real world isn't creepy; the real world is very normal. :P

[22:00] <masak> rakudo: role R {}; say R ~~ Role; class C {}; say C ~~ Class

[22:00] <p6eval> rakudo f3eb64: OUTPUT¬´Bool::True‚ê§Could not find sub &Class‚ê§  in main program body at line 22:/tmp/xDlACC5szA‚ê§¬ª

[22:01] <moritz_> Tene: IMHO "creepy" and "normal" don't contradict

[22:01] <Tene> 'k

[22:01] <jnthn> masak: If you want to do that, ask about it's .HOW

[22:01] * sorear spent a lot of last month trying to make sense of it all

[22:01] <masak> jnthn: yes, but why is there a Role but no Class?

[22:01] <masak> std: "is there a", Class, "?"

[22:01] <p6eval> std 625303c: OUTPUT¬´ok 00:01 120m‚ê§¬ª

[22:01] <jnthn> masak: That bothers we a tad too. :)

[22:01] <Tene> lue: I highly recommend EY's Quantum Mechanics sequence for a good introduction: http://lesswrong.com/lw/r5/the_quantum_physics_sequence/

[22:02] <jnthn> masak: There may cease to be.

[22:02] <jnthn> masak: Apart from...I need a way to multi-dispatch on "it's a role"...maybe. Hm. :)

[22:05] <lue> this is what my question was for: https://gist.github.com/783583 [CAUTION: pretty silly reason]

[22:05] <jnthn> moritz_: Rakudo build + test on Win32/MSVC looked OK

[22:05] <jnthn> (with the latest PARROT_REVISION)

[22:06] <moritz_> jnthn: same on amd64 linux

[22:07] <jnthn> OK, seems encouraging. :)

[22:07] <Tene> I like EY's quotation from that sequence, "QM is counterintuitive, but that is a problem with your intuitions, not a problem with quantum mechanics."

[22:07] <masak> 'night, #perl6

[22:08] <moritz_> 'night

[22:08] <jnthn> o/, masak

[22:08] *** masak left
[22:11] *** orafu left
[22:11] *** orafu joined
[22:13] <sorear> Tene: neat.  I wish I had seen this a month ago.

[22:15] *** awwaiid left
[22:18] *** awwaiid joined
[22:24] *** awwaiid left
[22:25] <Tene> sorear: what happened a month ago?

[22:25] <sorear> I started trying to figure out most of this on my own

[22:25] <sorear> Well, re-started

[22:26] <sorear> I've been trying for too long :/

[22:26] <sorear> so maybe "sooner" in general

[22:37] *** awwaiid joined
[22:39] *** kaare_ left
[22:48] <lue> .oO[ Almost seems like he's saying "I'm not going to tell you the keycode to this vault is 7-3-9-2-0" :) ]

[22:55] *** supernovus left
[23:03] *** jql joined
[23:16] <dalek> nqp-rx/nom: f5e448a | jonathan++ | src/Regex/Cursor.pm:

[23:16] <dalek> nqp-rx/nom: To really get the benefits of 6model, we need to get Cursor etc into NQP. Plus it's just painful to not do so. :-) This is the start of that work. No doubt we'll end up with some chunks of PIR in the file too, but the ones done so far map very neatly to NQP.

[23:16] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/f5e448a08c

[23:16] <dalek> nqp-rx/nom: bf4218f | jonathan++ | CREDITS:

[23:16] <dalek> nqp-rx/nom: I probably contributed enough to nqp-rx/nom to have a CREDITS entry by now. :-)

[23:16] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/bf4218ffd9

[23:17] *** pmichaud joined
[23:19] <jnthn> o/ pmichaud 

[23:23] <coldhead> good work

[23:23] <pmichaud> aloha, for a moment

[23:23] <pmichaud> being called to dinner + errands :-|

[23:24] <pmichaud> so, bbl (or tomorrow)

[23:24] <jnthn> OK.

[23:24] <jnthn> I probably sleep in 30 mins or so.

[23:25] *** dorlamm joined
[23:32] <dalek> nqp-rx/nom: 6677616 | jonathan++ | src/pmc/stable.pmc:

[23:32] <dalek> nqp-rx/nom: Ensure the method cache gets marked if present.

[23:32] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/667761667e

[23:32] <dalek> nqp-rx/nom: 179a148 | jonathan++ | src/metamodel/how/NQPClassHOW.pm:

[23:32] <dalek> nqp-rx/nom: Get NQPClassHOW to publish a method cache.

[23:32] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/179a148495

[23:42] *** MayDaniel_ joined
[23:44] *** MayDaniel left
[23:47] <jnthn> sleep &

[23:48] <TimToady> jnthn++ has earned it

[23:52] <sjohnson> heh

[23:59] <sjohnson> perl so far has accumulated me a few beer 6packs

[23:59] <sjohnson> thanks, TimToady 

