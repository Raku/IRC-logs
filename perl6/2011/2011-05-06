[00:02] *** keeth left
[00:05] *** Moukeddar joined
[00:08] <sorear> perl6: my $x = 999999; substr($x,2,2)++; say $x

[00:08] <p6eval> rakudo 6ae3c9: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in main program body at line 7637:CORE.setting␤»

[00:08] <p6eval> ..niecza v4-79-g79a8315: OUTPUT«Unhandled exception: cannot increment a value of type Str␤  at /home/p6eval/niecza/lib/CORE.setting line 413 (CORE die @ 2)␤  at /home/p6eval/niecza/lib/CORE.setting line 23 (CORE Mu.succ @ 4)␤  at  line 0 (ExitRunloop @ 0)␤  at /tmp/8sQatjnLEQ line 1 (MAIN mainline

[00:08] <p6eval> ..@ 1)␤  at /home…

[00:08] <p6eval> ..pugs: OUTPUT«9910099␤»

[00:08] <sorear> perl6: my $x = 999999; substr($x,2,2) += 1; say $x

[00:08] <p6eval> rakudo 6ae3c9: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/lEttVy4EmT␤»

[00:08] <p6eval> ..pugs, niecza v4-79-g79a8315: OUTPUT«9910099␤»

[00:14] *** uniejo_ left
[00:17] *** [Coke] left
[00:19] *** [Coke] joined
[00:22] *** pothos left
[00:22] *** y3llow left
[00:25] *** Moukeddar left
[00:26] *** Moukeddar joined
[00:32] *** jaldhar joined
[00:38] *** y3llow joined
[00:46] *** bluescreen__ left
[00:47] *** whiteknight left
[00:48] *** justatheory left
[01:00] *** mjreed joined
[01:05] *** Moukeddar_ joined
[01:06] *** Moukeddar left
[01:11] *** mtk0 left
[01:11] *** justatheory joined
[01:12] *** Moukeddar_ left
[01:13] *** fhelmberger joined
[01:14] <mjreed> what's a good way to deal with pre-lexer passes in PGE?

[01:16] <mjreed> I'm thinking of things that don't fit well at the tokenizing level.  Things like C-style (as opposed to Lispy) macro expansion, or the way you can write "!" instead of "'." in INTERCAL, stuff like that.

[01:18] *** apejens left
[01:19] *** ascent_ joined
[01:19] *** plobsing left
[01:19] *** apejens joined
[01:19] *** cxreg2 joined
[01:19] *** plobsing joined
[01:19] *** never_ joined
[01:19] *** itz_ joined
[01:20] *** mtk0 joined
[01:20] *** Su-Shee_ joined
[01:20] *** Trashlord left
[01:20] *** PacoLinux left
[01:20] *** never left
[01:20] *** cxreg left
[01:20] *** justatheory left
[01:20] *** ggoebel left
[01:20] *** Su-Shee left
[01:20] *** itz left
[01:20] *** patch_ left
[01:20] *** sirmacik left
[01:20] *** patch_ joined
[01:20] *** justatheory joined
[01:20] *** ggoebel joined
[01:20] *** sirmacik joined
[01:20] *** PacoLinux joined
[01:22] *** Trashlord joined
[01:26] <sorear> mjreed: modify the string before parsing it

[01:26] <sorear> mjreed: also, PGE is not maintained any more

[01:28] <mjreed> so what are we supposed to write grammars in these days?

[01:38] <mjreed> or, well, I assume we still write them as perl6 grammars... but what processes them if not pge?  I thought pge was what rakudo used.

[01:39] <benabik> mjreed: We still use p6 grammars, but it's not implemented with PGE anymore IIRC.

[01:39] <sorear> mjreed: We use actual Perl 6 grammars these days

[01:39] <sorear> Using one of the Perl 6 subset implementations

[01:40] <sorear> rather than a specialized grammar processor like PGE

[01:41] <mjreed> ok.  docs says that rakudo *uses* pge as part of its implementation; guess that's out of date. 

[01:41] <mjreed> so I'll stop talking about PGE and just talk about perl 6 grammars/rules. 

[01:42] *** stkowski left
[01:42] <sorear> mjreed: Rakudo hasn't used PGE since February 2010

[01:42] <sorear> and it was one of the last major users

[01:51] *** woosley joined
[01:59] *** cdarroch left
[02:02] *** keeth joined
[02:04] *** leprevost joined
[02:20] *** keeth left
[02:24] *** keeth joined
[02:29] *** keeth left
[02:29] *** nymacro joined
[02:32] *** mjreed left
[02:36] *** envi joined
[03:04] *** hudnix left
[03:10] *** agentzh joined
[03:11] <dalek> niecza: 185c435 | sorear++ | Makefile:

[03:11] <dalek> niecza: Add a Makefile rule to build and test release tarballs

[03:11] <dalek> niecza: review: https://github.com/sorear/niecza/commit/185c435657

[03:14] *** agentzh left
[03:20] *** agentzh joined
[03:23] *** cxreg2 is now known as cxreg

[03:23] *** Su-Shee joined
[03:24] *** Su-Shee_ left
[03:24] *** agentzh left
[03:32] *** agentzh joined
[03:39] *** agentzh left
[03:45] *** agentzh joined
[03:53] *** agentzh left
[03:56] *** ymasory left
[03:58] *** agentzh joined
[04:01] *** newbee joined
[04:01] <newbee> hi all...

[04:02] <sorear> Hello newbee.

[04:02] <sorear> Welcome to #perl6!

[04:02] <sorear> You might want to pick a more unique name.  We've all been newbies at some time. :)

[04:04] <newbee> oh, well, i started learning perl6 just 2 weeks ago :) 

[04:04] <newbee> btw, im here with a question :)

[04:04] <sorear> Excellent.  We love those.

[04:05] <newbee> how should i write something like this?      class TimeOfDay { has $.hour { where 0 >= $.hour <= 23 }; }

[04:06] <sorear> class TimeOfDay { has $.hour where 0..^24 }

[04:06] <sorear> if that doesn't work, try: subset Hour of Int where 0 ..^ 24; class TimeOfDay { has Hour $.hour }

[04:07] <newbee> rakudo: class TimeOfDay { has Int $.hour where 0..23 }; 

[04:07] <p6eval> rakudo 6ae3c9: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 22␤»

[04:07] <sorear> (either one will only work on Rakudo)

[04:10] *** agentzh left
[04:11] <newbee> subset Hour of Int where 0 ..^ 24; class TimeOfDay { has Hour $.hour }; my $tod = TimeOfDay.new(hour => 12); say $tod.hour; my $tod2 = TimeOfDay.new(hour => 25); say $tod2.hour;

[04:11] <newbee> rakudo: subset Hour of Int where 0 ..^ 24; class TimeOfDay { has Hour $.hour }; my $tod = TimeOfDay.new(hour => 12); say $tod.hour; my $tod2 = TimeOfDay.new(hour => 25); say $tod2.hour;

[04:11] <p6eval> rakudo 6ae3c9: OUTPUT«12␤25␤»

[04:12] *** satyavvd joined
[04:13] <newbee> rakudo: class TimeOfDay { has Int $.hour where 0..23; };

[04:13] <p6eval> rakudo 6ae3c9: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 22␤»

[04:17] <newbee> mmm it does not enforce the limit on "hour" :(

[04:17] *** ymasory joined
[04:18] <sorear> that's weird

[04:18] <sorear> rakudo: say 25 ~~ (0 ..^ 24)

[04:18] *** agentzh joined
[04:18] <p6eval> rakudo 6ae3c9: OUTPUT«Bool::False␤»

[04:20] <newbee> rakudo: say 25 ~~ (0..^24)

[04:20] <p6eval> rakudo 6ae3c9: OUTPUT«Bool::False␤»

[04:23] <newbee> ok, is late here, good night and thanks :)

[04:23] <sorear> no problem, and come again!

[04:24] *** leprevost left
[04:27] *** sunnavy left
[04:28] *** newbee left
[04:29] *** sunnavy joined
[04:37] *** agentzh left
[04:40] <dalek> niecza: 5fa26c5 | sorear++ | src/NieczaCompiler.pm6:

[04:40] <dalek> niecza: Remove outdated use of GetNow internal call

[04:40] <dalek> niecza: review: https://github.com/sorear/niecza/commit/5fa26c580c

[04:40] <dalek> niecza: 4d3df1b | sorear++ | / (2 files):

[04:40] <dalek> niecza: Finish fixing up make reboot

[04:40] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4d3df1be3c

[04:40] <sorear> I now have a niecza-v5.zip sitting on my hard drive, but I seem to have broken the GitHub file uploader

[04:42] *** agentzh joined
[04:43] *** birdwindupbird joined
[04:47] *** agentzh left
[04:48] *** ymasory left
[04:50] *** birdwindupbird left
[04:55] *** agentzh joined
[05:06] *** agentzh left
[05:06] *** jon8 left
[05:10] <dalek> niecza: becc5ce | sorear++ | docs/announce.v5:

[05:10] <dalek> niecza: Write v5 release announce

[05:10] <dalek> niecza: review: https://github.com/sorear/niecza/commit/becc5ce210

[05:10] <dalek> niecza: 506560a | sorear++ | FETCH_URL:

[05:10] <dalek> niecza: Update bootstrap URL

[05:10] <dalek> niecza: review: https://github.com/sorear/niecza/commit/506560a6f9

[05:13] *** agentzh joined
[05:15] <sorear> release announcement sent.

[05:31] *** birdwindupbird joined
[05:32] *** agentzh left
[05:48] *** Mowah joined
[05:49] *** sftp joined
[05:50] *** agentzh joined
[05:55] *** sftp left
[06:02] *** miso2217 left
[06:08] *** agentzh left
[06:08] <moritz> sorear++ # v5 of v6 :-)

[06:14] *** Vlavv_ left
[06:23] *** agentzh joined
[06:27] *** SHODAN joined
[06:30] *** Vlavv_ joined
[06:34] *** mj41 joined
[06:34] *** birdwindupbird left
[06:42] *** agentzh left
[06:42] *** miso2217 joined
[06:46] *** SHODAN left
[06:49] *** aindilis left
[06:58] *** beppu left
[06:58] *** agentzh joined
[06:58] *** beppu joined
[07:02] *** donri joined
[07:03] *** birdwindupbird joined
[07:03] *** agentzh left
[07:03] *** am0c left
[07:19] *** noganex joined
[07:20] *** Jdoneright joined
[07:21] *** noganex_ left
[07:24] *** noganex left
[07:24] *** noganex joined
[07:34] *** _twitch joined
[07:38] *** agentzh joined
[07:41] *** SHODAN joined
[07:43] * sorear out

[07:45] *** agentzh left
[07:49] *** birdwindupbird left
[07:50] *** birdwindupbird joined
[07:50] *** agentzh joined
[07:54] *** agentzh left
[07:59] *** wamba joined
[08:02] *** agentzh joined
[08:05] *** birdwindupbird left
[08:15] <tadzik> it's almost like a real v6! :)

[08:18] *** cotto left
[08:20] *** wamba left
[08:22] *** cotto joined
[08:23] *** justatheory left
[08:23] *** justatheory joined
[08:23] <snarkyboojum> sorear: I'm amazed that "real multi dispatch" == "isn't as much cool new stuff as I'd like" - great release :)

[08:27] *** justatheory left
[08:29] *** agentzh left
[08:33] *** cromartie-x182 joined
[08:34] *** cromartie-x182 left
[08:44] *** agentzh joined
[08:58] *** _twitch left
[08:59] *** mtk0 left
[09:03] *** agentzh left
[09:08] *** mtk0 joined
[09:18] *** Mowah left
[09:20] *** agentzh joined
[09:20] *** Su-Shee_ joined
[09:23] *** Su-Shee left
[09:25] *** Su-Shee_ is now known as Su-Shee

[09:35] *** noganex left
[09:35] *** noganex_ joined
[09:37] *** pernatiy left
[09:39] *** woosley left
[09:54] *** am0c joined
[09:58] *** birdwindupbird joined
[09:58] *** agentzh left
[10:03] *** mikemol left
[10:04] *** tylercurtis left
[10:04] *** sivoais left
[10:04] *** ruoso left
[10:04] *** sunnavy left
[10:04] *** TiMBuS left
[10:13] *** agentzh joined
[10:18] *** tzhs joined
[10:21] *** amkrankruleuen left
[10:21] *** amkrankruleuen joined
[10:24] *** wamba joined
[10:29] *** wamba left
[10:39] *** REPLeffect left
[10:48] *** woosley joined
[10:54] *** tzhs left
[11:03] *** Mowah joined
[11:11] *** risou joined
[11:35] *** risou left
[11:40] *** agentzh left
[11:41] *** tylercurtis joined
[11:41] *** ruoso joined
[11:46] *** risou joined
[11:47] *** dakkar joined
[11:48] *** mikemol joined
[11:51] *** mikemol left
[11:51] *** mtk0 left
[11:52] *** Trashlord left
[11:53] *** mikemol joined
[11:56] *** mtk joined
[11:59] *** mtk left
[12:04] *** mtk joined
[12:07] *** birdwindupbird left
[12:07] *** pernatiy joined
[12:07] <moritz> std: m:s/[a| ]/

[12:08] <p6eval> std 9f27365: OUTPUT«ok 00:01 113m␤»

[12:08] <moritz> std: m/[a| ]/

[12:08] <p6eval> std 9f27365: OUTPUT«[31m===[0mSORRY![31m===[0m␤Null pattern not allowed at /tmp/VBaNc7c86G line 1:␤------> [32mm/[a| [33m⏏[31m]/[0m␤    expecting any of:␤      quantifier␤     regex atom␤Parse failed␤FAILED 00:01 113m␤»

[12:13] *** Moukeddar joined
[12:15] <takadonet> morning all

[12:18] *** SHODAN left
[12:18] <Moukeddar> morning Sir

[12:20] *** MayDaniel joined
[12:24] <moritz> std: m/ /

[12:24] <p6eval> std 9f27365: OUTPUT«[31m===[0mSORRY![31m===[0m␤Null pattern not allowed at /tmp/Ablb1Ce4Mi line 1:␤------> [32mm/ [33m⏏[31m/[0m␤    expecting quantifier␤Parse failed␤FAILED 00:01 113m␤»

[12:24] <moritz> std: m:s/ /

[12:24] <p6eval> std 9f27365: OUTPUT«ok 00:01 113m␤»

[12:31] *** Patterner left
[12:31] *** leprevost joined
[12:33] *** Psyche^ joined
[12:33] *** Psyche^ is now known as Patterner

[12:35] *** birdwindupbird joined
[12:35] *** risou left
[12:36] *** MayDaniel left
[12:38] *** mberends joined
[12:38] <mberends> ++asparagus!

[12:38] <phenny> mberends: 05 May 08:51Z <moritz> ask mberends if likes/fancies asparagus

[12:39] <mathw> mmmm asparagus

[12:39] <mberends> phenny, tell moritz yes, especially fresh in season

[12:39] <phenny> mberends: I'll pass that on when moritz is around.

[12:41] <mberends> (the home region in .nl is the local asparagus epicentre :)

[12:41] <moritz> \o/

[12:41] <phenny> moritz: 12:39Z <mberends> tell moritz yes, especially fresh in season

[12:41] <mberends> afk & # shopping and eating

[12:41] <mberends> sorry moritz, gtg

[12:41] <moritz> no problem

[12:41] *** mberends left
[12:44] *** risou joined
[12:46] <colomon> asparagus++

[12:46] *** Moukeddar left
[12:47] *** plainhao joined
[12:48] *** risou left
[12:50] *** hudnix joined
[12:51] <moritz> indeed

[12:53] *** wamba joined
[12:54] *** pmurias joined
[12:55] <tadzik> szparagi?

[12:55] <moritz> spargel in german

[12:55] <moritz> so sounds vaguely correct

[12:57] *** sunnavy joined
[12:59] <tadzik> phenny: "szparagi"?

[12:59] <phenny> tadzik: "asparagus" (pl to en, translate.google.com)

[12:59] <tadzik> aye

[13:02] *** satyavvd left
[13:02] *** bluescreen10 joined
[13:03] <pmichaud> good morning, #perl6

[13:04] <pmichaud> https://github.com/pmichaud/rakbench/blob/master/results/orange-x86_64-201105051910.txt  # latest benchmark timing runs

[13:04] <takadonet> pmichaud: morning

[13:08] *** bluescreen10 left
[13:09] *** bluescreen10 joined
[13:10] <tadzik> pmichaud: good morning. -pl indicates the bacek's wonderpatch?

[13:12] <pmichaud> tadzik: yes.

[13:12] <pmichaud> I should probably add that to the report somewhere.

[13:13] *** orafu left
[13:14] *** orafu joined
[13:15] *** wamba left
[13:18] *** tty234_ left
[13:18] *** sunnavy left
[13:19] *** sunnavy joined
[13:19] *** sunnavy left
[13:19] *** sunnavy joined
[13:21] *** plobsing left
[13:23] *** plobsing joined
[13:30] *** jaldhar left
[13:35] *** Su-Shee_ joined
[13:36] *** sftp joined
[13:37] *** tty234 joined
[13:38] *** icwiener joined
[13:39] *** Su-Shee left
[13:39] *** Su-Shee_ is now known as Su-Shee

[13:46] <colomon> What's this about a wonderpatch?  (I see the benchmarks have made a big jump forward!)

[13:47] <moritz> colomon: http://lists.parrot.org/pipermail/parrot-dev/2011-May/005837.html

[13:48] <colomon> huh.  what does the patch do?  (I mean, other than make rakudo faster.)

[13:49] <mathw> what else does it need to do? :P

[13:54] <colomon> What is the mechanism by which it makes rakudo faster?  :p

[13:55] <colomon> BTW (reading threads) I'd argue that spectests are probably not ideal for benchmarking.

[13:57] <moritz> agreed

[13:57] *** am0c left
[13:57] <moritz> more to the point, the only reason for using them is their availability

[13:58] <moritz> nearly none of them focus on exercising real world use patterns, nor do many of them exercise specific groups of features performance-wise

[13:59] <tadzik> json tests are a real-world example

[13:59] <pmichaud> colomon: why are spectests not ideal for benchmarking, ooc?

[13:59] <pmichaud> (I guess "what moritz++ said")

[13:59] <moritz> also, they change

[13:59] <pmichaud> I think it's a very useful tool... especially since that's the time sink that most of us developers see at the moment

[13:59] <pmichaud> not the ones used here

[14:00] <moritz> they often produce rather much IO for a non-IO benchmark

[14:00] <pmichaud> the benchmarks in that report are identical between 2011.01 and 2011.04

[14:00] <pmichaud> s/benchmarks/spectests/

[14:00] <pmichaud> the harness is only using the spectests that are unchanged since 2011.01

[14:01] <colomon> The main reason I was thinking is that the usage patterns are probably nothing like real world tasks.  

[14:01] <sorear> good * #perl6

[14:01] <pmichaud> well, we can easily add more benchmarks now :)

[14:01] <colomon> for instance, how many of the numerical tests in spectest check their results using strings?

[14:01] <colomon> (the trig tests are an exception there, I think.)

[14:01] <moritz> all that use is()

[14:02] <colomon> moritz: right, that's what I was trying to suggest.  :)

[14:02] <pmichaud> sure, but string equality is a fairly common operation

[14:02] <pmichaud> it'd argue it's at least (or more) common and important than numeric equality anyway

[14:02] <colomon> but it's not a fairly common numerical operation.

[14:02] <pmichaud> but it's a fairly *common* operation

[14:02] <pmichaud> I'm not benchmarking numerical performance, I'm benchmarking overall performance

[14:02] <colomon> look, I'm not saying we don't want the spectests to be fast.

[14:03] <pmichaud> the fact that the numerical tests are using string equality doesn't make them any less representative of overall real world tasks

[14:03] <colomon> I just think you'll get more interesting information if you have string benchmarks, numeric benchmarks, etc.

[14:04] <pmichaud> feel free to submit some :)

[14:04] <pmichaud> https://github.com/pmichaud/rakbench

[14:04] <moritz> I think string benchmarks are the only ones where you have a chance of the operations being slower than the calls involved (on the parrot level)

[14:04] <colomon> I have been submitting benchmarks for over a year now.

[14:04] <pmichaud> okay, feel free to let me know where they are :)

[14:05] <pmichaud> I guess they're in perl6/benchmarks?

[14:06] * moritz mashes some Oreos in preparation of a milk shake

[14:06] <frettled> Will someone benchmark moritz pre- and post-milkshake?

[14:07] <colomon> https://github.com/perl6/bench-scripts

[14:07] <pmichaud> colomon: which ones would you like to see run?

[14:07] <pmichaud> ("all of them" might take too long, so let's prioritize a bit)

[14:07] <colomon> give me a moment.

[14:08] <pmichaud> no rush

[14:08] <pmichaud> I won't be running any until later today anyway

[14:08] <pmichaud> right now I've got another set running to test gms performance versus ms2 performance

[14:09] <colomon> http://justrakudoit.wordpress.com/2011/03/06/first-benchmark-results/

[14:10] <colomon> looking at that, I'd suggest trans-sprintf.pl, prime.pl, and pick-words.pl -- they all seem to have suffered significant regressions over the last year.

[14:10] <pmichaud> okay, great

[14:10] <pmichaud> colomon++

[14:12] <colomon> It does make me think it might be worthwhile to sit down and write up simple benchmarks testing some common areas.  the collection in bench-scripts is certainly pretty random right now.

[14:12] <pmichaud> well, I'm hoping to organize this all a bit soon

[14:12] <pmichaud> since I have a nice harness now for running tests unattended over many different rakudo releases :)

[14:13] *** frew joined
[14:14] <moritz> frettled: my drinking performance seems highly dependent on the presence of milk shakes. Surprise, surprise :-)

[14:14] <frettled> :D

[14:22] *** woosley left
[14:31] *** Jdoneright left
[14:43] *** icwiener left
[14:56] *** ymasory joined
[14:57] *** Mowah left
[14:59] <pmichaud> http://gist.github.com/959083   # results of rakbench on 2011.04 with gms and ms2

[15:00] *** mj41 left
[15:00] *** frew left
[15:00] *** MayDaniel joined
[15:03] *** kaare_ joined
[15:04] <pmichaud> what machine/os information would be good to capture in these benchmark reports?

[15:05] <flussence> the stuff `lscpu` outputs would be informative...

[15:06] <pmichaud> oooooh, nice

[15:06] <pmichaud> didn't know that existed    flussence++

[15:07] <pmichaud> I guess the output of "free" is helpful, too

[15:07] <moritz> but please use free -m or so

[15:07] *** benabik left
[15:07] <moritz> I usually spend too much time counting digits otherwise :-)

[15:07] <pmichaud> +1

[15:08] <pmichaud> so, not "free -b" then?  ;-P

[15:09] <pmichaud> well, I'll probably have the log record "free -b", and the report can make it smaller

[15:10] <colomon> hmmm... it would be great to actually figure the amount of memory used by the process.  I don't know a good quick way of doing that, alas....

[15:12] <pmichaud> someday we could add an option to the perl6 binary (or HLL::Compiler)  that dumps out the interpreter statistics just before exiting

[15:13] <pmichaud> that might tell us total allocations of pmcs, memory used, etc.

[15:13] * pmichaud eagerly awaits the arrival of his new hardware

[15:13] *** orafu left
[15:13] <colomon> that actually sounds like it would be really useful.  is there any reason it's not possible to do something like that now?

[15:13] <pmichaud> tuits :-)

[15:14] <pmichaud> it's definitely possible, just needs code

[15:14] <pmichaud> also, perhaps it should also be an option to Parrot :)

[15:14] <colomon> but is it low tuit (just needs summary output) or high tuit (say, stats aren't actually kept yet)?

[15:14] <pmichaud> stats are kept already

[15:14] <pmichaud> (looking)

[15:15] *** orafu joined
[15:15] <pmichaud> http://gist.github.com/959131

[15:17] <pmichaud> for example, GC_MARK_RUNS tells us how many mark runs have been performed :)

[15:17] <pmichaud> TOTAL_PMCS tells us how many PMC allocations occurred

[15:17] <pmichaud> etc.

[15:17] *** am0c^ joined
[15:17] <colomon> that seems like it might be drastically important for benchmarking / profiling / etc

[15:18] <pmichaud> maybe I'll add something to nqp-rx then 

[15:18] <pmichaud> won't help for previous releases, but could help for future ones

[15:20] <colomon> would a nqp-rx fix potentially get lost when we land nom?

[15:20] <pmichaud> I'm sure we'd port it or duplicate it in nom

[15:22] <colomon> pmichaud++

[15:23] * pmichaud really wishes he could see the gps location of the truck that is carrying his new machine

[15:25] <pmichaud> afk for a while, break

[15:26] *** hercynium joined
[15:29] *** s1n left
[15:31] *** s1n joined
[15:33] *** simcop2387 left
[15:33] *** MayDaniel left
[15:36] *** simcop2387 joined
[15:42] *** sbp left
[15:42] *** sbp joined
[15:43] *** icwiener joined
[15:43] *** phenny left
[15:44] *** REPLeffect joined
[15:45] *** phenny joined
[15:46] *** justatheory joined
[15:57] *** ymasory left
[16:01] *** spq joined
[16:05] *** noganex joined
[16:05] *** noganex_ left
[16:06] *** am0c joined
[16:06] <jnthn> oh hai

[16:06] <jnthn> weekend! \o/

[16:06] <colomon> \o

[16:07] <colomon> hmmm.... Google Code Jam starts today.

[16:07] <pmichaud> did we get the Google Code Peanut Butter already?

[16:07] <colomon> mmmmm.... peanut butter ....

[16:08] <jnthn> Ewww...I don't like that stuff.

[16:08] <sorear> hello jnthn

[16:08] <jnthn> o/ sorear 

[16:09] <sorear> v5 didya see? :0

[16:09] <jnthn> Yes :)

[16:09] <pmichaud> I saw.  sorear++

[16:09] <jnthn> I want to see how you unified protoregexes and protos.

[16:09] <jnthn> That's...not something I'd really imagined doing.

[16:09] <pmichaud> fwiw, I think it is something TimToady++ imagined :)

[16:10] <am0c> oh hai all!

[16:10] <jnthn> Yeah but...is it spec'd anywhere?

[16:11] * pmichaud makes a backup in preparation for his new machine arriving later today

[16:12] *** benabik joined
[16:15] *** leprevost left
[16:18] *** am0c^ left
[16:20] <pmurias> sorear: hi

[16:20] <pmurias> sorear: what's faster niecza on mono or on .net?

[16:23] *** justatheory left
[16:23] <sorear> ask diakopter, I've never tried it on .net

[16:24] *** noganex_ joined
[16:24] *** noganex left
[16:39] *** risou joined
[16:41] *** pmurias left
[16:44] *** keeth joined
[16:46] *** mtk left
[16:47] *** colbseton joined
[16:50] *** mtk joined
[16:52] *** dakkar left
[16:52] *** colbseton left
[16:54] <colomon> pmichaud: so, what are the specs on this new machine of yours?

[16:54] *** Chillance joined
[16:55] *** slavik2 joined
[16:55] *** birdwindupbird left
[16:56] *** slavik left
[16:57] *** pernatiy left
[17:01] *** leprevost joined
[17:03] *** cdarroch joined
[17:03] *** cdarroch left
[17:03] *** cdarroch joined
[17:09] *** ashleydev left
[17:19] *** gbacon joined
[17:20] *** nymacro left
[17:20] *** Moukeddar joined
[17:21] <Moukeddar> Hello

[17:24] *** mkramer joined
[17:25] <takadonet> Moukeddar: hey

[17:25] <Moukeddar> how are you doing?

[17:26] *** Vlavv_ left
[17:26] *** Mowah joined
[17:28] *** Vlavv_ joined
[17:30] <PerlJam> buenos dias

[17:31] <sjohnson> yo

[17:34] <jnthn> hola

[17:39] *** risou left
[17:50] *** impious joined
[17:51] <sorear> hello

[17:53] <takadonet> sorear: hey

[17:57] *** MayDaniel joined
[17:57] *** fhelmberger left
[18:00] *** mkramer1 joined
[18:01] *** TiMBuS joined
[18:04] *** mkramer left
[18:09] *** fglock joined
[18:10] *** Moukeddar left
[18:10] *** MayDaniel left
[18:13] <tadzik> hello

[18:15] <fglock> tadzik: hi

[18:17] *** mkramer1 left
[18:20] <colomon> \o

[18:21] *** araujo left
[18:30] *** dual left
[18:32] *** dual joined
[18:44] *** masak joined
[18:44] <masak> greetings, carbon-based life forms.

[18:45] <jnthn> o/ masak 

[18:49] <sbp> what's the word on the street, masak and jnthn?

[18:50] <masak> um... "hi"? ;)

[18:50] *** impious left
[18:50] <flussence> .oO( "bus lane 07:30-09:00" )

[18:51] <sbp> at least make up some news if there isn't any

[18:51] <sbp> imagine you woke up at a State of the Onion podium

[18:51] <masak> there are news.

[18:51] <jnthn> sbp: My trains to work AND home were on time.

[18:51] <sbp> all those eyes watching you, expectantly

[18:51] <jnthn> This is a shocking development.

[18:51] <flussence> there's a patch that magically makes rakudo a bajillion (2-10) % faster!

[18:52] <sbp> the track signals are probably being run from perl6 code now

[18:52] <flussence> that's news to me.

[18:52] <sbp> there we go, that's some news!

[18:52] <sbp> is that in Star? where's the patch on Github?

[18:53] <flussence> it's on some mailing list thing, in the log 3-4 hours back

[18:53] <flussence> the numbers look promising though

[18:53] <masak> things are still being investigated.

[18:53] *** envi left
[18:53] <colomon> and most of the speed up just compensates for recent slow downs in Parrot, as far as I can tell.

[18:54] *** anazawa joined
[18:54] <masak> it's a Red Queen's race, for sure.

[18:56] <plobsing> colomon: we also suspect non-GC influences in the earlier regression and are attempting to track that down too.

[18:56] <colomon> plobsing++

[18:56] *** snearch joined
[18:56] * colomon prefers the "March of the Black Queen"

[18:57] <sbp> they should form a coalition side

[18:57] <sbp> .g gms ms2 rakudo

[18:58] <phenny> sbp: http://whiteknight.github.com/2011/04/16/imcc_branch_merge_aftermath

[19:15] *** justatheory joined
[19:17] *** ymasory joined
[19:18] <colomon> sbp: http://www.nntp.perl.org/group/perl.perl6.announce/2011/05/msg650.html

[19:20] <sbp> ah, I heard about v5 earlier. grats sorear, and thanks colomon

[19:20] *** jevin joined
[19:20] <colomon> It feels like the news of the moment to me (other than the benchmarking stuff)  :)

[19:20] <masak> I'm planning to send off an email to p6l.

[19:20] <masak> it's about base conversion.

[19:21] <jnthn> Will it still belong to us after the conversion?

[19:21] <masak> I assume that was a pun.

[19:21] <colomon> all of it

[19:21] <masak> ah. :)

[19:21] <jnthn> colomon++

[19:21] <Tene> I was super early to work yesterday, so I turned off the alarms on my phone so they didn't bother me while I was working.  Of course, I forgot to turn them back on, so I slept in very late today.  :)

[19:22] <Tene> That's my news for the morning, at least.

[19:23] <masak> ;)

[19:25] <masak> anyway. three questions: (1) if :2<1010> etc do the conversion *from* a base, what's the way to do the conversion *into* a base? (2) isn't :2<1010> just as ambiguous as bin('1010') (and 'oct' and 'hex') wrt conversion direction? (especially like this: :2($var))

[19:25] <masak> (3) what's a way to convert from a base that isn't a constant?

[19:25] <masak> all of these questions have come up in problem-solving situations and, IMO, need addressing.

[19:26] <sbp> I vote YES on Proposition 2

[19:27] <masak> so... :2<1010> doesn't *really* solve any problems better than bin('1010') ...?

[19:27] <masak> except for maybe eliminating three builtin subs and replacing them with literal syntax.

[19:28] <sbp> well it genericises the problem

[19:28] *** TSa joined
[19:28] <sbp> just does it in a very anthropantagonistic way

[19:29] <masak> how esquivalient.

[19:29] <colomon> masak: well, clearly :2<1010> is easier to generalize than bin('1010'), for what that's worth.

[19:30] <Tene> masak: 1) use fmt

[19:30] <Tene> iirc

[19:30] <masak> yes, but to what end? now I can do :19<blah>? yippie.

[19:31] <masak> that was for colomon.

[19:31] <masak> Tene: do you have any spec on that?

[19:31] <masak> Tene: that's a perfectly good solution if it's true.

[19:31] <benabik> Are numeric adverbs supposed to be generic base conversion, or it it just for literals?

[19:31] <masak> Tene: otherwise we should probably make it so :)

[19:31] <sbp> well, flickr short links use base58 for example

[19:31] <sbp> strange bases aren't unheard of

[19:31] <masak> benabik: depends what you mean. :4($n) works fine. :$b(42) doesn't.

[19:32] <sbp> but it uses a strange lexical table anyway

[19:32] <benabik> masak: I meant the first.  And that seems slightly odd to me.

[19:32] <sbp> which may be an issue, one that ought to be recognised

[19:32] <masak> sbp: I guess my point is that I wouldn't cry blood if :58($flickr-url) were from-base(58, $flickr-url)

[19:32] <benabik> It's much less ambiguous if it's only for literals.

[19:32] <sbp> I'd prefer the latter. it's clearer

[19:33] <masak> sbp: me too.

[19:33] <sbp> perhaps allow the table as the third arg

[19:33] <sbp> which is '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'

[19:33] <sbp> from-base(58, $number, $table)

[19:33] <masak> sbp: hm, but that's sending in 58 twice.

[19:33] <masak> sbp: that feels suboptimal.

[19:34] <sbp> you'd want num or table as first arg, num from table length if it's a string?

[19:34] <masak> that feels dangerous too.

[19:34] <Tene> masak: where's the ambiguity in :2/&bin ?

[19:34] <sbp> agreed

[19:34] <masak> Tene: look at the perldoc for bin/oct/hex.

[19:35] *** leprevost left
[19:35] <masak> Tene: 'To present something as hex, look into "printf", "sprintf", or "unpack".'

[19:35] *** orafu left
[19:35] <masak> Tene: people often get the direction wrong, because the name of the builtin *doesn't say*.

[19:36] <sbp> I thought of :Nary<...>, e.g. :2ary<1010>

[19:36] <sbp> and :base2<1010>

[19:36] <masak> std: :base2<1010>

[19:36] <p6eval> std 9f27365: OUTPUT«ok 00:01 112m␤»

[19:36] <Tene> masak: that wouldn't have even occurred to me.  Obviously if I wanted formatting into a string, I'd use fmt, sprintf, etc.

[19:37] <Tene> :2 is str->num, fmt is -> str

[19:37] <masak> Tene: things look obvious on the path you're on. there are lots of paths. :)

[19:37] <sbp> masak: what does (3) mean?

[19:37] * Tene nods.

[19:37] *** araujo joined
[19:37] <sbp> oh, nevermind, I understand

[19:37] <sbp> $myBase

[19:37] <masak> sbp: the opposite of :2<1010>

[19:38] <masak> sbp: and Tene says that's .fmt, but hasn't proved it yet.

[19:38] <sbp> that was (1)

[19:38] <sbp> (3) was non constant bases

[19:38] <masak> oh, sorry.

[19:38] <masak> yeah.

[19:38] <masak> (3) is :$b<123>

[19:38] <masak> std: my $b = 5; say :$b<123>

[19:38] <p6eval> std 9f27365: OUTPUT«ok 00:01 115m␤»

[19:38] <Tene> masak: wait, you want facts and evidence from me, instead of rumours and superstition?  I think you're thinking of a different Tene.

[19:39] <sbp> that could use $_. my $b = 5; say :<123>...

[19:39] <sbp> er, my $_ = 5

[19:39] <masak> Tene: truth is, I'm lazy and want someone else to go to the spec. :)

[19:39] <Tene> I have no idea if the spec currently agrees with me; I just believe that it should.

[19:39] <masak> Tene: fwiw, so do I.

[19:39] <masak> Tene: could we also dream up a syntax before we confirm? :P

[19:39] <sbp> that'd actually be kind of nice for when you're always doing something in a particular base

[19:40] <masak> Tene: oh, and .fmt is just a thin veneer over sprintf

[19:41] <sbp> any reason why there can't be adverbial AND functional forms?

[19:42] <masak> ...because the adverbial form is just a more limited, confusing version of the functional form...?

[19:42] <Tene> perl6: say 25.fmt("%2x")

[19:42] <p6eval> niecza v5: OUTPUT«Unhandled exception: Unable to resolve method fmt in class Num␤  at /tmp/W9MgnE_xwr line 1 (MAIN mainline @ 3)␤  at /home/p6eval/niecza/lib/CORE.setting line 1311 (CORE C552_ANON @ 2)␤  at /home/p6eval/niecza/lib/CORE.setting line 1312 (CORE module-CORE @ 39)␤  at

[19:42] <p6eval> ../home/p6eval/niec…

[19:42] <p6eval> ..pugs, rakudo 6ae3c9: OUTPUT«19␤»

[19:42] <masak> sbp: there's this general idea that we don't want to do things if they're bad... :)

[19:43] <Tene> bleh, no, that already means something.

[19:43] <sbp> masak: what if you're constantly using a particular base in some code and want to express it succinctly?

[19:43] <masak> sbp: write a one-letter wrapping function.

[19:43] <masak> sbp: doesn't get shorter than that. :)

[19:44] <masak> put it in the smallest lexical scope possible. everyone wins.

[19:44] <colomon> $*NUMERICAL_BASE = 15

[19:44] <masak> Perl 6 allows you to locally mutate the language without harming anyone further away.

[19:44] *** birdwindupbird joined
[19:45] <masak> <snarkyboojum> sorear: I'm amazed that "real multi dispatch" == "isn't as much cool new stuff as I'd like" - great release :)

[19:45] <masak> +1

[19:45] <masak> sorear++

[19:46] <sbp> yeah? how trivial is it to macroise numbers into trinary or something?

[19:46] <sbp> at some point, mutation isn't worth it

[19:46] <masak> phenny: "sparris"?

[19:46] <phenny> masak: "asparagus" (sv to en, translate.google.com)

[19:46] <sbp> if the setup will exceed the benefit

[19:47] <masak> sbp: with some appropriately twisted pragma, you could make what colomon++ suggested work.

[19:47] <masak> except that it would probably have to be parsing at compile-time, since that's when literals are evaulated.

[19:48] <masak> (so a dynamical probably isn't a great idea.)

[19:48] <colomon> good point

[19:50] <masak> but the general point holds.

[19:51] <masak> we can mutate the Perl 6 grammar to accept anything as a numeric literal.

[19:51] <masak> my $a = THIRTEEN AND A HALF;

[19:52] <sbp> yeah, but again, you have to have the appropriate cost:benefit ratio

[19:52] <sbp> just because something is possible doesn't make it feasible or sensible

[19:53] <sbp> but you can make it feasible or sensible by changing the syntax to increase the cost:benefit ratio

[19:53] <masak> right.

[19:53] <sbp> which is why I was wondering how trivial it would be

[19:53] <masak> Perl 6 will introduce real DSLs.

[19:53] <masak> I'm looking forward to that.

[19:54] <sbp> I can imagine people going quite mad with the DSLs :-)

[19:54] *** f00li5h left
[19:55] <masak> imagine a Prolog-like DSL in Perl 6. or a Constraint Programming one. or a DSL for making cute ASCII diagrams.

[19:55] *** f00li5h joined
[19:55] <masak> (I threw the last one in there because I don't want people to things that "DSL == cute sub/method names") :)

[19:55] <masak> think*

[19:56] <masak> ok. I'll write my email to p6l now.

[19:56] <masak> thanks sbp and Tene and colomon for the input ;)

[19:57] *** r0b86 joined
[20:02] *** REPLeffect left
[20:03] <sbp> a DSL for writing subs in befunge...

[20:09] *** mkramer joined
[20:10] <masak> yeah!

[20:10] *** stkowski joined
[20:12] <masak> "Use of the functional form on anything that is not a string will throw an exception explaining that the user has confused a number with the textual representation of a number.  This is to catch errors such as a C<:8(777)> that should have been C<< :8<777> >>, or the attempt to use the function in reverse to produce a textual representation from a number."

[20:12] <masak> that's S02:3276.

[20:13] <masak> and that answers my question (2), I think.

[20:22] <Tene> http://i.imgur.com/VZOiv.jpg -- Camelia cosplay?

[20:25] *** REPLeffect joined
[20:26] *** pmurias joined
[20:26] <sbp> butterfly dressed up as a camel? could be

[20:26] <masak> Tene: "expect to hear from us" -- O'Reilly lawyers :P

[20:27] <pmurias> masak: re DSL is that necessarily a good thing?

[20:27] <masak> pmurias: anything and everything can be overused. nothing new over the sun.

[20:28] <pmurias> my impression of DSL is that they trade of flexibility for cute syntax

[20:28] <masak> pmurias: but yes, I believe it can be used for good.

[20:28] <masak> pmurias: they do.

[20:28] <masak> pmurias: that's because they're domain-specific :P

[20:29] <masak> point is, Perl 6 will be a general language with the extra ability to turn into expertly specialized languages.

[20:29] *** snearch left
[20:29] *** REPLeffect left
[20:30] <masak> Tene: I thought you were going to post http://pic.plover.com/ :)

[20:30] *** bluescreen10 left
[20:31] <Tene> masak: that's supposed to represent perl 5 and 6?

[20:33] <masak> Tene: those are mjd's daughters.

[20:33] <Tene> I recognize plover.com as MJD, but I'm not seeing any other context for that image

[20:33] <Tene> Oh.  Why did you expect that for "camelia cosplay", then?

[20:33] <masak> dunno. they look colorful :)

[20:33] <masak> and one of them floats in the air.

[20:34] *** r0b86 left
[20:34] <masak> actually, that image comes the closest to what I'd imagine a Camelia-hackergirl t-shirt looking like.

[20:34] <masak> cool, well-drawn, happy and colorful :)

[20:34] <tadzik> I'd wear that

[20:35] <tadzik> though it will probably be recognised by even less people than the NLPW t-shirt :)

[20:37] <Tene> masak: given the context you presented, it came across as "fancy magical powers => 6, carries a huge sword => 5"

[20:38] <tadzik> I thought it carries a swiss army chainsaw

[20:38] <masak> Tene: I like the analogy my lack of context forced your imagination to apply :)

[20:40] <Tene> i remember a while back, my girl was drawing a stylized camelia-inspired anime girl, but I don't remember why, or where that ended up.

[20:40] *** kaare_ left
[20:40] <masak> as to the why, it was because I asked for one. :)

[20:40] <masak> I'd love such a t-shirt.

[20:42] <tadzik> masak: we can order some and sale/award them on the YAPC

[20:43] <tadzik> and the zebra t-shirts of course

[20:44] <masak> tadzik: I should try to draw up the girl-with-wings that I can envision. the polar bear has emboldened me somewhat. :)

[20:47] <Tene> masak: apparently, nothing google knows about links to pic.plover.com; how did you run across it?

[20:47] <Tene> masak: polar bear?

[20:47] <masak> Tene: mjd's twitter feed.

[20:47] <masak> Tene: http://conferences.yapceurope.org/npw2011/

[20:48] *** bacek left
[20:48] <masak> what I'm imagining for the t-shirt is a girl, with the proportions of Lilo http://www.imdb.com/media/rm4283406592/tt0275847 , the perspective in "Head First Design Patterns" http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124/ref=sr_1_1?ie=UTF8&qid=1304714793&sr=8-1

[20:49] <masak> ...and wings. round ones, like on a fairy or a butterfly.

[20:49] <masak> and with the same "attitude" as mjd's daughters in the picture.

[20:49] <masak> confident, playful, relaxed.

[20:57] *** sjn left
[20:58] *** benabik left
[20:59] *** dolmen joined
[20:59] *** donri left
[21:00] *** stkowski left
[21:00] *** wamba joined
[21:03] *** birdwindupbird left
[21:03] *** donri joined
[21:03] *** anazawa left
[21:04] *** bacek joined
[21:06] *** donri left
[21:12] *** Mowah left
[21:17] *** cookys left
[21:20] <masak> rakudo: sub phi { (1 + sqrt(5)) / 2 }; sub logphi { log($^n)/log(phi) }; for 2..20 -> $n { say floor($n + logphi( sqrt(5) * (logphi(sqrt(5) * $n) + $n) - 5 + 3/$n) - 2) }

[21:20] <p6eval> rakudo 6ae3c9: OUTPUT«4␤6␤7␤9␤10␤11␤12␤14␤15␤16␤17␤18␤19␤20␤22␤23␤24␤25␤26␤»

[21:20] <masak> an explicit formula for generating non-Fibonacci numbers.

[21:20] <masak> http://arxiv.org/abs/1105.1127

[21:23] *** REPLeffect joined
[21:23] *** leprevost joined
[21:25] *** spq left
[21:25] *** hercynium left
[21:25] *** miso2217 left
[21:26] *** ggoebel left
[21:30] *** miso2217 joined
[21:31] *** dodododo joined
[21:32] *** TSa left
[21:33] *** leprevost left
[21:34] *** ymasory left
[21:38] *** dodododo left
[21:42] *** dwnichols left
[21:45] *** dodododo joined
[21:47] *** pmurias left
[21:52] *** dwnichols joined
[21:54] *** wooden joined
[21:57] *** icwiener left
[22:06] *** plainhao left
[22:07] *** fglock left
[22:07] *** dodododo left
[22:08] *** dwnichols left
[22:13] *** dwnichols joined
[22:19] *** orafu joined
[22:24] *** dwnichols left
[22:24] *** MayDaniel joined
[22:33] *** ymasory joined
[22:37] *** dwnichols joined
[22:40] *** risou joined
[22:40] *** MayDaniel left
[22:53] <TiMBuS> Everything about this language sounds great. If I could make a small suggestion though -- I often find myself limited in C++ due to its inability to directly work with fractional indices and arrays. For instance, I should be able to do some_array[0.5] to access the second half of the first element of the array and the first half of the second. I know I could make a template for this but it really should be

[22:53] <TiMBuS>  a direct language feature.

[22:53] <TiMBuS> I guess it's just one of those things the C++ guys didn't have enough foresight to put into the language when they first designed it. 

[22:54] <masak> er.

[22:54] <TiMBuS> :D

[22:55] <masak> the feature is actually *under*specified.

[22:55] <masak> what does 'access the second half... and the first half...' mean?

[22:56] <plobsing> unaligned accesses, I would guess.

[22:56] <jnthn> There will be modules.

[22:57] <jnthn> TiMBuS: augment class List { multi method postcircumfix:<[ ]>(Num $n) { ...stuff... } } # it's this easy ;-)

[22:59] <masak> hm... Num, or Real?

[22:59] <masak> maybe Num, actually.

[22:59] <jnthn> I Really don't know...

[22:59] <masak> :)

[22:59] <jnthn> .oO( Complex ;-) )

[23:00] <plobsing> all this time, I've been wasting all this imaginary memory my machine has

[23:00] <TiMBuS> all that space that you could have packed more ints into

[23:01] <TiMBuS> memory page tetris

[23:01] <plobsing> memory invaders

[23:02] <TiMBuS> pack man

[23:02] <sorear> I think I'll try and get the numerics hierarchy working in niecza next

[23:06] <masak> \o/

[23:07] * sorear is trying to work out details...

[23:07] <masak> sorear: how's the Yapsi support going? I'm worrying about Yapsi fragmenting once it lands...

[23:07] <sorear> "fragmenting"?

[23:09] <sorear> hrm, I thought I had numerics hierarchy listed under yapsi-required

[23:10] <masak> I think Yapsi mostly uses Ints.

[23:11] <masak> yes, well. fragmenting into a codebase that works on Rakudo and one that works on Yapsi, without any coordination between the two.

[23:11] <masak> er, s/Yapsi/Niecza/

[23:11] <sorear> ah.

[23:12] <sorear> jnthn: does Rakudo/NOM support "subset" yet?

[23:12] <jnthn> sorear: rakudo/nom doesn't even compile yet!

[23:12] <masak> so... no? :P

[23:12] <jnthn> :P

[23:12] <jnthn> Gee, people expect me to like, do stuff. :P

[23:13] <masak> ("damnit, why can't he give us a straight answer!") :P

[23:13] <jnthn> NO NO NO NO NO

[23:13] <masak> /o\

[23:13] <jnthn> :P

[23:14] <masak> rakudo: sub rot13($_) { .subst("A..Z" => "N..ZA..M", "a..z" => "n..za..m") }; say rot13("hakank")

[23:14] <p6eval> rakudo 6ae3c9: OUTPUT«hakank␤»

[23:14] <masak> that's a bug, methinks.

[23:14] * masak submits rakudobug

[23:14] <jnthn> huh...yes.

[23:14] <jnthn> wait

[23:14] <jnthn> did you mean .trans?

[23:14] <masak> d'oh!

[23:15] <masak> rakudo: sub rot13($_) { .trans("A..Z" => "N..ZA..M", "a..z" => "n..za..m") }; say rot13("hakank")

[23:15] <p6eval> rakudo 6ae3c9: OUTPUT«unxnax␤»

[23:15] <masak> I even had S05 up *reading* about .trans!

[23:15] *** mtk left
[23:16] *** awwaiid left
[23:16] * sorear looks at the ng implementation of subset

[23:16] *** awwaiid joined
[23:17] <sorear> is ng the canonical stable name for "Rakudo" between Feb10 and Jul11?

[23:17] <jnthn> sorear: ng was the name of the branch that becamse master.

[23:17] * masak still calls it 'ng' sometimes

[23:17] <masak> I was probably the last alpha holdout.

[23:17] <jnthn> sorear: Generally I was delighted the branch was over and happy to forget the letters "ng". I'll probably feel the same about the "nom" branch once I get through it too.

[23:18] <masak> ...and then we'll release Rakudo Starve.

[23:18] <jnthn> Because people are hungry for the improvements? :P

[23:19] <masak> om nom improvements

[23:19] <jnthn> object model! new object model!

[23:20] <sorear> wait, wait, seriously?  The ng binder calls ACCEPTS to do all type chekcing?

[23:20] <jnthn> sorear: Yeah. The nom one won't. :)

[23:20] <masak> sorear: when you implement subtypes, please be aware of http://rt.perl.org/rt3/Ticket/Display.html?id=78322 :)

[23:20] <jnthn> sorear: It's "trivially correct", I guess...

[23:21] <masak> 'night, #perl6

[23:21] <jnthn> sorear: Note it does a bit of caching too.

[23:21] *** masak left
[23:21] <jnthn> sorear: But nom will look quite different there.

[23:22] <jnthn> Mostly because ACCEPTS should call some type checking primitive, not be the type checking primitive.

[23:24] <sorear> jnthn: Can you explain the bug masak linked?

[23:24] *** Moukeddar joined
[23:25] * jnthn looks

[23:25] <jnthn> sorear: Ah, that one. It just says "verify the condition this subset is based on is true before checking this subset's extra where clause"

[23:26] <jnthn> sorear: Confusingly, last I looked it *appeared* that's what Rakudo already seemed to be doing :/

[23:26] <sorear> jnthn: I mean I'm looking at the Rakudo sources and it's not making sense

[23:26] <jnthn> sorear: In what way?

[23:26] <sorear> The code looks like it should be working!

[23:27] <sorear> jnthn: How does perl6.ops:517 interact with nested subsets?

[23:27] <jnthn> This sounds familiar :/

[23:28] <jnthn> subtype_realtype should always point to a "nominal type"

[23:28] <jnthn> e.g. it's not a pointer to the direct "parent"

[23:28] <jnthn> Or at least, it's not meant to be.

[23:29] <jnthn> yeah, looks like the code does the right thing with that.

[23:30] <sorear> erm, doesn't that cause the intervening substype constraints to be ignored?

[23:30] <jnthn> That's not used for the checking

[23:30] <jnthn> It's used for working out what's the nominal type vs the constraint type.

[23:30] <sorear> oh, it's using the subtype itself as the constraint

[23:31] <sorear> Even $x doesn't become Int $x where * %% 2; it becomes Int $x where Even

[23:31] <jnthn> Right

[23:31] <sorear> jnthn: Do you think that subsets need their own STables?

[23:31] <jnthn> I plan to write a SubsetHOW.

[23:31] <jnthn> (so yes)

[23:32] <jnthn> Need to refactor the type cache a bit first.

[23:32] <jnthn> Really the issue is that they need their own type object

[23:32] <jnthn> And having an STable just follows on from that.

[23:33] <jnthn> Suspect enums fall into the same category.

[23:33] <PerlJam> If we keep them in a STable, can we call the HOrses?

[23:34] <jnthn> :P

[23:34] * jnthn suspects he should sleep soonish

[23:34] <jnthn> Want to actually do something this weekend

[23:35] <jnthn> Like, hack on nom...and try to beat my Russian into less awful shape. :)

[23:36] <jnthn> 'night o/

[23:38] *** cdarroch left
[23:39] *** risou_ joined
[23:41] *** risou left
[23:44] <sorear> learning Russian is a goal of mine too!

[23:44] <sjohnson> cool

[23:59] *** keeth left
