[00:01] *** dorlamm joined
[00:20] *** raiph joined
[00:20] *** tyatpi joined
[00:27] *** dorlamm left
[00:27] *** og01 joined
[00:47] *** fridim_ joined
[01:01] *** icwiener left
[01:02] *** icwiener joined
[01:03] *** raiph left
[01:49] *** nsh_ joined
[01:59] *** icwiener_ joined
[02:00] *** icwiener left
[02:12] *** tyatpi left
[02:14] *** tokuhirom joined
[02:19] *** am0c joined
[02:31] <colomon> anyone out there?  :)

[02:32] <colomon> nom: say &sin.signature

[02:32] <p6eval> nom 676b35: OUTPUT«:(Any)␤»

[02:33] <colomon> nom: say &sin.signature.WHAT

[02:33] <p6eval> nom 676b35: OUTPUT«Signature()␤»

[02:34] <colomon> nom: say &sin.signature.params.perl

[02:34] <p6eval> nom 676b35: OUTPUT«(Any,).list␤»

[02:34] <TimToady> you should realize nobody is here Friday night except extreme dweebs :)

[02:35] <colomon> TimToady: can't really go out for the evening without getting a babysitter.  ;)

[02:36] <colomon> nom: sub foo(Int $a, Rat $b) { say "I don't care!"; }; say &foo.signature.params.perl

[02:36] <p6eval> nom 676b35: OUTPUT«(Int $a, Rat $b).list␤»

[02:36] <colomon> nom: sub foo(Int $a, Rat $b) { say "I don't care!"; }; say &foo.signature.params[0].WHAT

[02:36] <p6eval> nom 676b35: OUTPUT«Parameter()␤»

[02:39] <colomon> TimToady: did you see the 'is cached' implementations flying by earlier?

[02:42] <TimToady> yes, that's cool

[02:42] <colomon> I love that it's possible to implement so simply.

[02:43] <colomon> I mean, obviously the industrial version will be more complicated.

[02:44] * colomon is trying to implement "is symmetric" without luck so far

[02:54] <colomon> sad thing is, I'm pretty sure jnthn could answer my question in under a minute, if he were awake....

[03:00] <colomon> phenny: tell jnthn https://gist.github.com/1425858 -- how do I get the routine name into the instantiate_generic?

[03:00] <phenny> colomon: I'll pass that on when jnthn is around.

[03:16] * diakopter extreme dweeb

[03:25] *** jaldhar joined
[03:36] * japhb apparently is as well

[03:39] <japhb> Led Zeppelin is so much less fun when you've got it quiet enough not to wake the little one(s)

[03:56] *** wolfman2000 joined
[04:12] *** cooper left
[04:21] *** mdxi joined
[04:29] *** jaldhar left
[04:29] *** jaldhar joined
[04:30] <PerlJam> colomon: you mean like $r.name ?

[04:37] *** tyatpi joined
[04:41] *** am0c left
[04:56] *** tyatpi left
[05:09] *** lue joined
[05:09] <lue> hello world o/

[05:09] <phenny> lue: 01 Dec 14:53Z <[Coke]> ask lue what he meant by the comment at the top of S32-list/minmax.t 

[05:09] * lue looks

[05:10] *** greg_72 joined
[05:12] <lue> ping [Coke]

[05:16] <lue> phenny: tell [Coke] look at commit 4925244e78 . Apparently that comment is a reference to the fact the array was defined with <> instead of (), which didn't work.

[05:16] <phenny> lue: I'll pass that on when [Coke] is around.

[05:17] <lue> phenny: tell [Coke] (The tone of the comment shows it was from way back in my early days of Perl 6. I'm sure there are a couple more comments of mine in roast I wish weren't written they way they are)

[05:17] <phenny> lue: I'll pass that on when [Coke] is around.

[05:17] *** ethndbst left
[05:21] <greg_72> hi, I see that the Rakudo compiler is written in Perl 5. Some time ago I have hear rumours that Perl 6 is developed using Haskell. Is it abandoned?

[05:22] <cxreg> that's wildly inaccurate

[05:22] <cxreg> there was an early versionuanu

[05:22] <cxreg> ack

[05:22] <cxreg> an earlier implementation of perl 6 named pugs was in haskell

[05:22] <cxreg> rakudo is not written in perl 5

[05:23] <cxreg> it's mostly written in perl 6

[05:23] <cxreg> with some parts in nqp

[05:23] <greg_72> ah, right

[05:23] <greg_72> what is nqp?

[05:23] <cxreg> http://en.wikibooks.org/wiki/Parrot_Virtual_Machine/Not_Quite_Perl

[05:25] <greg_72> I see

[05:26] <PerlJam> greg_72: STD is written in Perl 5.  Perhaps that's what you're thinking of (but just don't know it)

[05:27] <greg_72> I sais perl 5 because I saw the code of rakudo in /src and it seemed like perl 5 

[05:27] <PerlJam> greg_72: ah.  Perl is still Perl :)

[05:28] <greg_72> I was doing perl for four years and loved it

[05:28] * cxreg wonders what's up with the fact that http://rakudo.org/ hasnt had an update in 3 months

[05:28] <benabik> Uh.  The parrot wikibook.

[05:28] <benabik> ugh, even

[05:29] <greg_72> how much work is missing from rakudo being able to compile the whole perl 6 language?

[05:29] <cxreg> i guess theres still some pir in there too

[05:29] <PerlJam> cxreg: pmichaud does most of the updates and he's been largely busy with other things.

[05:29] <cxreg> yeah i heard, is he ok?

[05:29] <PerlJam> cxreg: he's fine afaik, but his wife has serious health issues.

[05:30] <cxreg> :(

[05:31] <PerlJam> greg_72: http://perl6.org/compilers/features  That might give you some idea

[05:37] *** tyatpi joined
[05:41] <dalek> features: f78f01f | moritz++ | features.json:

[05:41] <dalek> features: diakopter++ brought Unicode properties to nom

[05:41] <dalek> features: review: https://github.com/perl6/features/commit/f78f01fbac

[05:42] <greg_72> PerlJam: thanks

[05:44] <PerlJam> greg_72: Though the language is a moving target, so "compile the whole language" doesn't always make sense :)

[05:45] <PerlJam> greg_72: btw, checkout perl6advent.wordpress.com

[05:45] <greg_72> PerlJam: ok this was too academic, your link might answer when will I be ready for Perl 6 programming

[05:46] <PerlJam> greg_72: I think many people are ready now, they just don't have enough good learning resources.  We're working on that though.

[05:47] <PerlJam> greg_72: see https://github.com/perl6/book/downloads

[05:48] <TimToady> actually, STD is also written in Perl 6 that is translated to Perl 5

[05:48] <greg_72> PerlJam:  a hundred pages, that seem to be fine, not too long

[05:48] <PerlJam> greg_72: not finished yet either.

[05:49] <greg_72> that makes no problem, the important is that it gives a taste of it

[05:49] <PerlJam> greg_72: oh, check out the perl 6 problems on rosettacode.org too.  you can compare with perl 5 and other languages.

[05:50] <greg_72> I did build management in perl and it was The Proper Tool, I guess perl 6 will be Even More Proper. I did ClearCase stuff in it

[05:55] <sorear> PerlJam: STD is written in Perl 6.  there is a very ad-hoc compiler in 'viv' which compiles Perl 6 grammars very well and makes a weak and inconsistant attempt at translating other code

[05:56] <sorear> PerlJam: TimToady has said things in the past to the effect that STD's time has passed

[05:57] *** xinming joined
[05:58] <sorear> greg_72: Perl 6 is a vastly better language than Perl 5 in a lot of ways, but there are still issues with the implementations (they're all slow memory hogs) and libraries (quite sparse)

[06:02] *** greg_72 left
[06:14] *** molaf joined
[06:22] *** ethndbst joined
[06:45] *** tyatpi left
[06:53] *** xinming left
[06:54] <Woodi> perl6: my int $i; $i--;

[06:54] *** xinming joined
[06:55] <p6eval> pugs b927740:  ( no output )

[06:55] <p6eval> ..rakudo 676b35: OUTPUT«Cannot assign to a non-container␤  in sub postfix:<--> at src/gen/CORE.setting:2366␤  in block <anon> at /tmp/DaRTizee92:1␤  in <anon> at /tmp/DaRTizee92:1␤»

[06:55] <p6eval> ..niecza v12-2-geb42dfa: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Malformed my at /tmp/9X5tjN4Wm5 line 1:␤------> [32mmy [33m⏏[31mint $i; $i--;[0m␤␤Parse failed␤␤»

[06:55] <Woodi> perl6: my int $i=1; $i--;

[06:55] <p6eval> niecza v12-2-geb42dfa: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Malformed my at /tmp/bPqYiNMvlh line 1:␤------> [32mmy [33m⏏[31mint $i=1; $i--;[0m␤␤Parse failed␤␤»

[06:55] <p6eval> ..rakudo 676b35: OUTPUT«Cannot assign to a non-container␤  in sub postfix:<--> at src/gen/CORE.setting:2366␤  in block <anon> at /tmp/yMF1W6z6Sq:1␤  in <anon> at /tmp/yMF1W6z6Sq:1␤»

[06:55] <p6eval> ..pugs b927740:  ( no output )

[06:55] <Woodi> perl6: my int $i=1; $i-1;

[06:55] <p6eval> pugs b927740, rakudo 676b35:  ( no output )

[06:55] <p6eval> ..niecza v12-2-geb42dfa: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Malformed my at /tmp/QVz5XhlZAG line 1:␤------> [32mmy [33m⏏[31mint $i=1; $i-1;[0m␤␤Parse failed␤␤»

[07:00] *** xinming left
[07:03] *** ethndbst left
[07:09] *** molaf left
[07:09] *** xinming joined
[07:10] *** [Sec] joined
[07:22] *** xinming left
[07:25] *** xinming joined
[07:45] *** xinming left
[07:46] *** zby_home_ joined
[07:56] *** xinming joined
[08:00] *** xinming left
[08:11] *** xinming joined
[08:16] *** xinming left
[08:17] *** xinming joined
[08:22] *** xinming left
[08:23] *** xinming joined
[08:24] *** kaare_ joined
[08:27] *** xinming left
[08:35] <Woodi> hmm, found interesting fact about avionics software documentation :)  "One of the odder documentation requirements is that most commercial contracts require an assurance that system documentation will be available indefinitely. The normal commercial method of providing this assurance is to form and fund a small foundation or trust. The trust then maintains a mailbox and deposits copies (usually in ultrafiche) in a secure location, such as rented sp

[08:52] *** Chillance joined
[09:02] *** lab7 joined
[09:11] *** lab7 left
[09:27] *** araujo joined
[09:59] *** JimmyZ joined
[09:59] *** hundskatt joined
[10:34] *** araujo left
[10:38] *** araujo joined
[10:38] *** araujo left
[10:38] *** araujo joined
[10:38] <JimmyZ> rakudo: https://gist.github.com/1426729  # help, I wonders why say 'process' never be called

[10:38] <p6eval> rakudo 676b35: OUTPUT«===SORRY!===␤Confused at line 1, near "https://gi"␤»

[10:38] <JimmyZ> rakudo: https://gist.github.com/1426729

[10:38] <p6eval> rakudo 676b35: OUTPUT«begin␤I was called with 1␤2␤I was called with 2␤4␤I was called with 1␤2␤I was called with 2␤4␤»

[10:42] *** hundskatt left
[10:47] <JimmyZ> sub cached(Routine $r) { my %cache;$r.wrap(-> |$c {say 'process';my $key := $c.gist;%cache.exists($key) ??%cache{$key} !!(%cache{$key} = callsame)});}; cached sub foo($a) {return 2 * $a;}; say foo(1);say foo(2);  # why wrap is not called?

[10:48] <JimmyZ> rakudo: sub cached(Routine $r) { my %cache;$r.wrap(-> |$c {say 'process';my $key := $c.gist;%cache.exists($key) ??%cache{$key} !!(%cache{$key} = callsame)});}; cached sub foo($a) {return 2 * $a;}; say foo(1);say foo(2); 

[10:48] <p6eval> rakudo 676b35: OUTPUT«2␤4␤»

[10:52] *** Nostraa joined
[10:53] *** tokuhirom left
[10:54] *** Nostraa left
[11:01] *** lestrrat left
[11:01] *** lestrrat joined
[11:05] *** xinming joined
[11:36] *** xinming left
[11:37] *** xinming joined
[11:42] *** xinming left
[11:55] *** xinming joined
[11:57] *** jimmy1980 joined
[11:57] *** MayDaniel joined
[12:00] *** xinming left
[12:03] *** xinming joined
[12:06] *** jimmy1980 left
[12:08] *** icwiener_ left
[12:09] *** xinming left
[12:13] *** Psyche^ joined
[12:14] *** xinming joined
[12:14] *** Patterner left
[12:14] *** Psyche^ is now known as Patterner

[12:15] *** jimmy1980 joined
[12:19] *** xinming left
[12:21] *** xinming joined
[12:21] *** xinming left
[12:22] *** MayDaniel left
[12:29] *** xinming joined
[12:34] *** xinming left
[12:34] *** jimmy1980 left
[12:34] *** jimmy1980 joined
[12:36] *** xinming joined
[12:37] <jnthn> afternoon, #perl6

[12:37] <phenny> jnthn: 02 Dec 22:45Z <japhb> ask jnthn OOC, what do you teach?

[12:37] <phenny> jnthn: 03:00Z <colomon> tell jnthn https://gist.github.com/1425858 -- how do I get the routine name into the instantiate_generic?

[12:37] <colomon> o/

[12:37] <jnthn> colomon: Name? :)

[12:38] <colomon> jnthn: my is symmetric code runs, but doesn't seem to actually create another multi named foo (or whatever)

[12:39] <jnthn> colomon: Right, you need to do a little more work at the end of symmetric

[12:39] <jnthn> colomon: $r is a single candidate. To get its controlling proto, do $r.dispatcher

[12:39] <jnthn> Then you need to add your generated sub to that

[12:39] <colomon> ooooo

[12:40] <jnthn> $r.dispatcher.add_dispatchee(gen(@params[0].type, @params[1].type))

[12:41] <colomon> and that works!

[12:41] *** xinming left
[12:42] <colomon> jnthn++

[12:42] <jnthn> yeah

[12:42] <jnthn> and since this is a trait mod, it's OK to do that.

[12:43] <colomon> to call add_dispatchee, you mean?

[12:43] <jnthn> (Note that adding candidates after CHECK time is a really bad idea. But traits run at BEGIN time, so it's all good. :))

[12:43] <jnthn> colomon: yes

[12:43] *** mberends joined
[12:43] <jnthn> mberends! \o/

[12:43] <mberends> \o/

[12:43] <phenny> mberends: 01 Dec 15:24Z <moritz> ask mberends if he wants to d a p6advent post on Tetris in niecza

[12:44] <colomon> jnthn: so, can we get is symmetric into core?  it ought to be a big help with some math operators...

[12:44] <jnthn> phenny: tell japhb Well, next week I'll be teaching an advanced C# course. I teach various others. :)

[12:44] <phenny> jnthn: I'll pass that on when japhb is around.

[12:44] <jnthn> colomon: Is it spec?

[12:44] <colomon> jnthn: if it's not, it easily can be.  ;)

[12:45] <mberends> moritz: yes, that's a good idea (p6advent post on Tetris in niecza)

[12:45] <colomon> it doesn't look like it is spec yet

[12:46] <jnthn> colomon: OK. Wouldn't mind hearing TimToady say "yeah, it's OK to be in core" before we add it :)

[12:46] <jnthn> colomon: Especially if we're going to make other things in core depend on it.

[12:51] <JimmyZ> rakudo: sub cached(Routine $r) { my %cache;$r.wrap(-> |$c {say 'process';my $key := $c.gist;%cache.exists($key) ??%cache{$key} !!(%cache{$key} = callsame)});}; cached sub foo($a) {return 2 * $a;}; say foo(1);say foo(2);  # why wrap is not called?

[12:51] <p6eval> rakudo 676b35: OUTPUT«2␤4␤»

[12:53] *** xinming joined
[12:55] <JimmyZ> or I misused it

[12:55] <jnthn> oh, hm

[12:57] <jnthn> Yeah, it's the closure clone stuff that gets in the way there.

[12:58] * JimmyZ wonders how to fix it

[12:58] *** toebu joined
[12:59] * jnthn too :)

[12:59] <toebu> perl6: sub coercing ($people as Int) {  say "$people people in the room"; } coercing people=>34.4;

[12:59] <p6eval> rakudo 676b35: OUTPUT«===SORRY!===␤Confused at line 1, near "sub coerci"␤»

[12:59] <p6eval> ..niecza v12-2-geb42dfa: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Action method trait_mod:as not yet implemented at /tmp/m0X6j7CPgH line 1:␤------> [32msub coercing ($people as Int[33m⏏[31m) {  say "$people people in the room"; }[0m␤␤Unhandled exception: Cannot use hash access on an obj…

[12:59] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected "as"␤    expecting "?", "!", trait, "=", default value, "-->" or ")"␤    at /tmp/gwuv48WBj5 line 1, column 23␤»

[13:00] <toebu> perl6: sub coercing ($people as Int) {  say "$people people in the room"; } coercing 34.4;

[13:00] <p6eval> rakudo 676b35: OUTPUT«===SORRY!===␤Confused at line 1, near "sub coerci"␤»

[13:00] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected "as"␤    expecting "?", "!", trait, "=", default value, "-->" or ")"␤    at /tmp/Le4uY88bMa line 1, column 23␤»

[13:00] <p6eval> ..niecza v12-2-geb42dfa: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Action method trait_mod:as not yet implemented at /tmp/_A8qlGK2Qk line 1:␤------> [32msub coercing ($people as Int[33m⏏[31m) {  say "$people people in the room"; }[0m␤␤Unhandled exception: Cannot use hash access on an obj…

[13:00] <toebu> perl6: sub coercing ($people as Int) {  say "$people people in the room"; }; coercing 34.4;

[13:00] <p6eval> pugs b927740: OUTPUT«*** ␤    Unexpected "as"␤    expecting "?", "!", trait, "=", default value, "-->" or ")"␤    at /tmp/XQ9AHVin_H line 1, column 23␤»

[13:00] <p6eval> ..niecza v12-2-geb42dfa: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Action method trait_mod:as not yet implemented at /tmp/jF5H4CGxvt line 1:␤------> [32msub coercing ($people as Int[33m⏏[31m) {  say "$people people in the room"; }[0m␤␤Unhandled exception: Cannot use hash access on an obj…

[13:00] <p6eval> ..rakudo 676b35: OUTPUT«34 people in the room␤»

[13:01] *** xinming left
[13:01] <JimmyZ> rakudo: sub foo($a) {return 2 * $a;}; my %cache; &foo.wrap(-> |$c {say 'process';my $key := $c.gist;%cache.exists($key) ??%cache{$key} !!(%cache{$key} = callsame)});say foo(1); say foo(2); # this one works well

[13:01] <p6eval> rakudo 676b35: OUTPUT«process␤2␤process␤4␤»

[13:02] <jnthn> JimmyZ: Right. It never clones &foo there.

[13:03] <jnthn> JimmyZ: Trouble is, the thing getting in the way here is also rather helpful for people making generator functions and the like.

[13:03] <toebu> perl6: sub b($a){say $a};b a=2; 

[13:03] <p6eval> rakudo 676b35: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&a' called (line 1)␤»

[13:03] <p6eval> ..niecza v12-2-geb42dfa: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤      'a' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 880 (die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1139 (P6.comp_unit @ 32) ␤  at /home/p6e…

[13:03] <p6eval> ..pugs b927740: OUTPUT«*** No such subroutine: "&a"␤    at /tmp/nokaNqcrFK line 1, column 19-24␤»

[13:03] <toebu> perl6: sub b($a){say $a};b a  => 2 ; 

[13:03] <p6eval> pugs b927740: OUTPUT«a  2␤»

[13:03] <p6eval> ..niecza v12-2-geb42dfa: OUTPUT«2␤»

[13:03] <p6eval> ..rakudo 676b35: OUTPUT«Not enough positional parameters passed; got 0 but expected 1␤  in sub b at /tmp/gwoQR7fuMX:1␤  in block <anon> at /tmp/gwoQR7fuMX:1␤  in <anon> at /tmp/gwoQR7fuMX:1␤»

[13:04] <JimmyZ> toebu: you maybe want rakudo: or niecza:

[13:04] <toebu> except that rakudo seems not to like access to positional parameters by name at the moment

[13:05] <toebu> JimmyZ: yes for the call :-)

[13:05] <JimmyZ> rakudo: sub b(:$a){say $a};b a => 2 ; 

[13:05] <p6eval> rakudo 676b35: OUTPUT«2␤»

[13:05] <JimmyZ> toebu: ^^

[13:05] *** donri joined
[13:05] <jnthn> JimmyZ: Interestingly, S06 also has this:

[13:06] <jnthn>     my &old_thermo := &thermo;

[13:06] <jnthn>     &thermo = sub ($t) { old_thermo( ($t-32)/1.8 ) }

[13:06] <toebu> rakudo: sub b(:$a){say $a};b a  => 2 ;b 2; 

[13:06] <p6eval> rakudo 676b35: OUTPUT«2␤Too many positional parameters passed; got 1 but expected 0␤  in sub b at /tmp/cWO0ztDQ9_:1␤  in block <anon> at /tmp/cWO0ztDQ9_:1␤  in <anon> at /tmp/cWO0ztDQ9_:1␤»

[13:06] <jnthn> Which actually relies on the closure behavior you're running in to.

[13:06] <toebu> it used to be the case, that positional parameters could also be accessed by name ... has this changed ?

[13:07] <donri> moritz: re buffers: in the terminal your examples give me two different outputs, in google reader your post shows the correct unicode and in wordpress the actual bytes

[13:08] <donri> so the claim that "Both of those output operations have the same effect" is false for me, in fedora 16 rakudo

[13:09] <jnthn> toebu: There were certainly spec changes in that area. I forget exactly how it ended up.

[13:10] <donri> perl6: $*OUT.write(Buf.new(0x6d, 0xc3, 0xb8, 0xc3, 0xbe, 0x0a))

[13:10] <p6eval> rakudo 676b35: OUTPUT«møþ␤»

[13:10] <p6eval> ..pugs b927740: OUTPUT«*** No such method in class Scalar: "&write"␤    at /tmp/D3m_OFyS9G line 1, column 1 - line 2, column 1␤»

[13:10] <p6eval> ..niecza v12-2-geb42dfa: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared name:␤ 'Buf' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 880 (die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1139 (P6.comp_unit @ 32) ␤  at /home/p6ev…

[13:10] <donri> nom: $*OUT.write(Buf.new(0x6d, 0xc3, 0xb8, 0xc3, 0xbe, 0x0a))

[13:10] <p6eval> nom 676b35: OUTPUT«møþ␤»

[13:11] <donri> me: This is Rakudo Perl 6, version 2011.07 built on parrot 3.6.0 

[13:12] <donri> bbl food

[13:12] <JimmyZ> jnthn: Is it a rakudo bug or my bug?

[13:13] <jnthn> JimmyZ: I found the behavior a little surprising. But the sample I just pasted from S06 seems to suggest Rakudo may well be doing the right thing here.

[13:15] <toebu> do named maches not work at present ?

[13:16] <jnthn> toebu: Passing positional arguments to positional parameters works. Passing named arguments to named parameters works.

[13:17] <jnthn> It used to be that you could pass positional parameters by their name. 

[13:17] <toebu> ok

[13:18] <JimmyZ> jnthn: I still don't know it's a rakudo bug or my bug :(

[13:19] <jnthn> JimmyZ: Me either.

[13:19] <jnthn> :)

[13:19] <toebu> what about named captures in regular expressions ?

[13:19] * JimmyZ can't understand english well enough sometimes

[13:20] *** jimmy1980 left
[13:20] <jnthn> toebu: Should work

[13:20] <jnthn> nom: "abc123def" ~~ /$<digits>=[\d+]/; say $<digits>

[13:20] <p6eval> nom 676b35: OUTPUT«=> <123>␤␤»

[13:21] *** jimmy1980 joined
[13:21] <toebu> nom: my regex hfind { :i [ (Hello) \s? ]+ } "HeLLo hello" ~~ m{ <hname=&hfind> }; say $/<hname>[0].join(', ');

[13:21] <p6eval> nom 676b35: OUTPUT«===SORRY!===␤Confused at line 1, near "my regex h"␤»

[13:21] * colomon just figured out how to get mouse button events in the Gtk mandelbrot program!  o/

[13:22] <toebu> nom: my regex hfind { :i [ (Hello) \s? ]+ }; "HeLLo hello" ~~ m{ <hname=&hfind> }; say $/<hname>[0].join(', ');

[13:22] <p6eval> nom 676b35: OUTPUT«␤»

[13:23] <jnthn> toebu: Pretty sure that's an issue with :i, not with the capturing.

[13:23] <toebu> nom: my regex hfind {  [ (Hello) \s? ]+ }; "HeLLo hello" ~~ m{ <hname=&hfind> }; say $/<hname>[0].join(', ');

[13:23] <p6eval> nom 676b35: OUTPUT«␤»

[13:23] *** baest joined
[13:23] <toebu> nom: my regex hfind {  [ (Hello) \s? ]+ }; "Hello hello" ~~ m{ <hname=&hfind> }; say $/<hname>[0].join(', ');

[13:24] <p6eval> nom 676b35: OUTPUT«Hello␤»

[13:24] <jnthn> https://github.com/perl6/specs/commit/94d01246e7d286bb2a4df32ba9c2ba733d0aec04 # the spec commit that changed named => positional binding

[13:25] <toebu> thanks

[13:27] <jnthn> bbl

[13:27] <toebu> nom: sub postfix:<!> { [*] 1..$^n }; say 5!;

[13:27] <p6eval> nom 676b35: OUTPUT«===SORRY!===␤Confused at line 1, near "say 5!;"␤»

[13:27] <toebu> nom: sub postfix:<!> { [*] 1..$^n }; say 5 !;

[13:27] <p6eval> nom 676b35: OUTPUT«===SORRY!===␤Confused at line 1, near "say 5 !;"␤»

[13:28] <toebu> what is confusing rakudo here ?

[13:29] <flussence> nom: sub postfix:<!>($n) { [*] 1..$n }; say 5!;

[13:29] <p6eval> nom 676b35: OUTPUT«===SORRY!===␤Confused at line 1, near "say 5!;"␤»

[13:29] <flussence> hm

[13:29] <flussence> b: sub postfix:<!>($n) { [*] 1..$n }; say 5!;

[13:29] <p6eval> b 1b7dd1: OUTPUT«120␤»

[13:29] <flussence> probably a bug somewhere in nom

[13:29] <toebu> flussence: what is b ?

[13:30] <flussence> old rakudo

[13:30] <JimmyZ> rakudo: sub cached(Routine &r) { my %cache; &r.wrap(-> |$c {say 'process';my $key := $c.gist;%cache.exists($key) ??%cache{$key} !!(%cache{$key} = callsame)});}; cached sub foo($a) {return 2 * $a;}; say foo(1);say foo(2); # why wrap is not called?

[13:30] <p6eval> rakudo 676b35: OUTPUT«===SORRY!===␤Typed arrays/hashes/callables not yet implemented at line 1, near ") { my %ca"␤»

[13:30] <toebu> grin

[13:30] <JimmyZ> rakudo: sub cached(&r) { my %cache; &r.wrap(-> |$c {say 'process';my $key := $c.gist;%cache.exists($key) ??%cache{$key} !!(%cache{$key} = callsame)});}; cached sub foo($a) {return 2 * $a;}; say foo(1);say foo(2); # why wrap is not called?

[13:30] <p6eval> rakudo 676b35: OUTPUT«2␤4␤»

[13:30] *** xinming joined
[13:33] <JimmyZ> jnthn:  so do I need ticket it ?

[13:33] <JimmyZ> need to

[13:34] <JimmyZ> aloha, xinming 

[13:40] <donri> colomon: p6 bindings for gtk?

[13:43] *** xinming left
[13:49] <Woodi> are modules vs classes in Perl6 are lightweight ? I just thinking about rewriting class to module for performance reson...

[13:51] <colomon> donri: using Niecza, you bet

[13:51] <donri> ah

[13:51] <donri> because i was thinking a port of pygobject to nativecall would be coolness

[13:52] <donri> then you'd get all the libs found by locate .gir for free

[13:53] <colomon> https://github.com/colomon/mandelbrot/blob/master/bin/gtk-mandelbrot.pl is what I'm working on, the Gtk stuff starts around line 230.

[14:02] *** xinming joined
[14:06] *** orafu left
[14:07] *** orafu joined
[14:07] *** xinming left
[14:09] *** tty234 joined
[14:09] *** daxim joined
[14:14] <mberends> colomon: I like! What are the mouse/button events going to do, change colors, zoom, pan maybe?

[14:15] *** grondilu joined
[14:15] <grondilu> I ran out of memory trying to compile last rakudo version :(

[14:16] <grondilu> I currently have 1Go RAM.  Would adding swap solve the issue?

[14:17] <mberends> grondilu: yes, but at the expense of much slower compile times. Stopping all unnecessary processes (eg Firefox) is much more helpful.

[14:18] <grondilu> oh yeah indeed firefox is running.  Hadn't noticed.

[14:19] * mberends often has the same problem on a netbook :)

[14:21] * flussence tries compiling it ooc

[14:27] <mberends> jnthn: regarding your recent 6model/reprs refactor, if a representation (eg CPointer) does "this_repr->attr_funcs = NULL;", it will go boom instead of throwing an exception if any HOW code accidentally tries to call a non-existent repr function. I think instead of NULL, could you point this_repr->attr_funcs to a default "not implemented" thrower?

[14:32] *** MayDaniel joined
[14:34] <jnthn> mberends: Already done; see in repr_registry.c

[14:35] <mberends> jnthn++ :D

[14:35] <jnthn> Thanks for reviewing :)

[14:36] <JimmyZ> jnthn:  do I need to ticket it ?

[14:37] <mberends> jnthn: not strictly reviewing, trying to grok everything for 6model/c. I have this idea of trying to golf the essence of 6model down into a mini subset in one C file for a proof of concept, do you thing that's worth trying to do?

[14:41] *** mishin joined
[14:42] <jnthn> JimmyZ: Not for now. I'm curious if TimToady++ will have some opinion in the backlog.

[14:42] <jnthn> *when he backlogs

[14:42] <jnthn> mberends: Sounds feasible

[14:43] <mberends> :-) yay! -Ofun for weeks and months ahead

[14:43] <jnthn> mberends: Note that - other than the REPR function table refactor - the rest are not 6model core things but rather just extra representations.

[14:43] <jnthn> mberends: There's a mechanism now for other libraries to dynamically register extra representations.

[14:44] <jnthn> mberends: I guess I probably shouldn't have put the dynamic ones into the src/6model/reprs/ folder...

[14:44] <mberends> jnthn: yes, mostly NCI support. How many representations would a typical p6 program use?

[14:45] <JimmyZ> dynreprs?

[14:46] <mberends> that's a good folder name

[14:46] * grondilu could compile finaly

[14:46] <JimmyZ> that look like dynpmcs or dynops

[14:46] <jnthn> mberends: The overwhelming majority of objects are P6opaque. P6[int|num|str] are involved in the native type support.

[14:46] <JimmyZ> *looks

[14:47] <JimmyZ> but I like it

[14:47] <jnthn> mberends: KnowHOWREPR is for the core bootstrap. Uninstantiable is about the most boring repr imaginable; we use it for things taht are, well, uninstantiable. :)

[14:48] <mberends> jnthn: ok, so the repr registry can get away with a simple unoptimized data structure, maybe a single linked list.

[14:48] <jnthn> mberends: oh, we rarely hit the registry

[14:49] <jnthn> mberends: Generally, only when declaring a new type.

[14:49] <mberends> yes, it's almost always (shared) pointers to reprs in objects.

[14:49] <jnthn> Beyond that, the st points off to it

[14:49] <jnthn> right

[14:50] * mberends is beginning to grok some parts of 6model ;)

[14:51] *** xinming joined
[14:53] * jnthn goes for a quick walk before it gets totoally dark

[14:58] *** zby_home___ joined
[14:58] *** xinming left
[14:58] *** zby_home_ left
[15:00] <colomon> mberends: my current plan (subject to being able to get it to work) is that leftclick and drag opens up a zoom of the region you sketch out that way, and rightclick opens up a Julia set at the point you clicked on.  (I'm trying to start with the latter.)

[15:00] *** sayu joined
[15:01] *** grondilu left
[15:01] *** xinming joined
[15:02] <mberends> colomon++: oh wow, that's going to be awesome (modulo performance)!

[15:02] <colomon> mberends: yeah, performance is frustrating at the moment

[15:03] <dalek> mu: b994051 | (Martin Berends)++ | misc/perl6advent-2011/schedule:

[15:03] <dalek> mu: assign 'Tetris on Niecza' to Day 6

[15:03] <dalek> mu: review: https://github.com/perl6/mu/commit/b994051e8e

[15:03] *** molaf joined
[15:04] *** toebu left
[15:05] <dalek> mu: f0804af | (Martin Berends)++ | misc/perl6advent-2011/schedule:

[15:05] <dalek> mu: add an author name to Day 6 -- kinda useful

[15:05] <dalek> mu: review: https://github.com/perl6/mu/commit/f0804afad9

[15:05] * flussence just finished the part with compiling CORE.setting.pir - it's very RAM-hungry

[15:06] <flussence> (800MB)

[15:06] <dalek> mu: 6102bef | (Martin Berends)++ | misc/perl6advent-2011/topic-brainstorming:

[15:06] <dalek> mu: move Tetris to planned list

[15:06] <dalek> mu: review: https://github.com/perl6/mu/commit/6102bef5b6

[15:11] <colomon> mberends++

[15:13] *** xinming left
[15:15] *** birdwindupbird joined
[15:15] *** birdwindupbird left
[15:16] <mberends> :-) the post is quite easy to do - it will be the transcript of the soundtrack of the London Perl Workshop talk. The slides are already in niecza/docs, so it's a matter of remembering the audio between the images. Thanks to amsterdam.pm for getting me to give this talk in the first place.

[15:16] *** xinming joined
[15:17] <colomon> mberends: I wasn't able to figure out how to link to the slides in HTML form, else I would have linked to it from the Day 1 post.  :)  More of a surprise for readers this way, though!

[15:18] *** molaf left
[15:19] * jnthn back

[15:20] <mberends> colomon: I also tried and failed (eg with raw view) to get the HTML to display straight out of github, they probably wrap the content in some way that does not help us.

[15:20] * flussence found it amusing that the first article in the php advent calendar is about the importance of having fun :)

[15:21] <colomon> mberends: do you have somewhere to host it?  I could stick it up online if needed.

[15:21] *** xinming left
[15:22] <mberends> colomon: please do. I plan to set up a host somewhere, but tuit fail.

[15:22] *** xinming joined
[15:23] <colomon> http://www.harmonyware.com/perl/niecza-gtk.html

[15:27] <colomon> mberends: do you have much experience getting IntPtrs working in niecza?

[15:27] <mberends> colomon: not yet, but I'll look with you

[15:28] <colomon> I'm thinking I need SetData (string key, IntPtr data) to attach info to a window

[15:28] *** xinming left
[15:29] *** xinming joined
[15:29] <mberends> first thought is to try an array of int with only one element in it

[15:29] <colomon> public IntPtr (int value);

[15:29] <colomon> that looks like it might do the job nicely

[15:33] *** mkramer joined
[15:34] <colomon> bingo!

[15:34] <mberends> \o/ is IntPtr a built in CLR class?

[15:34] <Timbus> colomon, the traditional way to bind an event in gtk is to have a .connect method and the first arg is the event name

[15:35] *** xinming left
[15:35] <colomon> mberends: yes

[15:35] <colomon> Timbus: is that a general comment, or am I doing something wrong with my code?

[15:35] <Timbus> well, just looking at the first example

[15:36] <Timbus> you have on_DeleteEvent

[15:36] <Timbus> this would cxonfuse and anger me, a long time gtk programmer

[15:36] <colomon> versus something like on_Event("Delete", ...

[15:36] <colomon> ?

[15:36] <Timbus> yus

[15:36] <colomon> are you sure that's not a Gtk versus Gtk# thing?

[15:37] *** xinming joined
[15:37] *** mkramer left
[15:37] * colomon is a very very shorttime Gtk programmer

[15:37] *** sayu left
[15:37] *** mkramer joined
[15:39] <Timbus> well, i think its a gtk(C, C++, perl, python,) thing vs gtk#

[15:39] <Timbus> which seems to be slightly different here

[15:39] <mberends> all the niecza examples are written in the style of $window.add_DeleteEvent( ...

[15:39] <Timbus> oh wait no, gtkmm has the event as a method

[15:39] <Timbus> hello_world.signal_clicked( ).connect(

[15:39] <Timbus> augh thats even worse

[15:41] <mberends> Timbus: if you have niecza running locally, I think we'd all appreciate pointers towards better use of Gtk# :)

[15:43] <Timbus> hmmm if I have monodevelop do i just need to checkout and build?

[15:43] *** mkramer left
[15:43] *** mkramer joined
[15:48] <Timbus> a fundamental problem with gtk (perl5) is that it's terrible with threads. and since gtk's event system is pretty abysmal at dealing with blocking operations (especially non-I/O ones), you really need threads

[15:48] *** mkramer left
[15:48] *** mkramer joined
[15:48] <Timbus> so if niecza+gtk works with threads, thats a good start

[15:50] <Timbus> also, traditionally a spawned thread signals the mainloop not by a socket or whatever, but by calling gtk_main_add_idle 

[15:50] *** xinming left
[15:51] *** xinming joined
[15:52] <Timbus> this is important because you cant do that using fork or perls 'ithreads'

[15:55] *** mkramer left
[15:55] <mberends> so far the niecza code we have written to use Gtk# has been only single threaded. I think Niecza can create multiple threads, but I'm not really sure.

[15:57] *** xinming left
[15:58] <Timbus> well, if you can spawn a thread after loading gtk code, and also kill the thread.. that's still beating perl5

[15:59] <Timbus> heh. aim high

[16:00] *** mkramer joined
[16:04] *** xinming joined
[16:08] <[Coke]> moritz: http://perl6advent.wordpress.com/2011/12/03/buffers-and-binary-io/ seems to have bad strings: 

[16:08] <phenny> [Coke]: 05:16Z <lue> tell [Coke] look at commit 4925244e78 . Apparently that comment is a reference to the fact the array was defined with <> instead of (), which didn't work.

[16:08] <phenny> [Coke]: 05:17Z <lue> tell [Coke] (The tone of the comment shows it was from way back in my early days of Perl 6. I'm sure there are a couple more comments of mine in roast I wish weren't written they way they are)

[16:08] <[Coke]> oth of those output operations have the same effect, and print mÃ¸Ã¾ to the standard output stream

[16:12] <jnthn> yeah, looks that way for me too

[16:13] *** xinming left
[16:15] *** xinming joined
[16:24] *** xinming left
[16:35] *** xinming joined
[16:35] <colomon> Timbus: any hints about getting the X, Y coordinates of a mouse button press / release?

[16:40] *** JimmyZ left
[16:42] <colomon> oh, X and Y get.

[16:43] <PerlJam> Is there a way to pretty-print .gist/.perl output?  With indentions and such

[16:44] *** mishin left
[16:51] *** Trashlord left
[16:52] *** xinming left
[16:53] <colomon> mberends: Just pushed the very first code that can handle creates a Julia set corresponding to where you right-click on the mandelbrot set.  afk # fetching noms

[16:53] *** xinming joined
[16:58] <mberends> colomon++: it works! # beautiful Mandelbrot and Julia fractals in https://raw.github.com/colomon/mandelbrot/master/bin/gtk-mandelbrot.pl

[17:00] *** Trashlord joined
[17:08] *** xinming left
[17:12] *** Trashlord left
[17:14] *** Trashlord joined
[17:14] *** xinming joined
[17:17] *** jimmy1980 left
[17:22] *** Trashlord left
[17:23] <dalek> ecosystem: 7c3150b | duff++ | META.list:

[17:23] <dalek> ecosystem: Add Grammar::Profiler::Simple

[17:23] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/7c3150bfd3

[17:25] *** jimmy1980 joined
[17:28] *** xinming left
[17:33] *** ab5tract joined
[17:48] <colomon> mberends: yeah, just needs zooming and more gracefulness....

[17:48] <colomon> and lots and lots more speed.

[17:51] *** jimmy1980 left
[17:51] *** jimmy1980 joined
[17:53] *** ab5tract left
[17:58] *** jimmy1980 left
[18:04] *** jimmy1980 joined
[18:09] *** donri left
[18:17] *** DarthGandalf joined
[18:28] *** jimmy1980 left
[18:29] *** preflex_ joined
[18:29] *** preflex_ is now known as preflex

[18:34] *** xinming joined
[18:34] *** jimmy1980 joined
[18:40] *** ksi joined
[18:44] *** xinming left
[18:44] *** hundskatt joined
[18:44] *** birdwindupbird joined
[18:45] *** jimmy1980 left
[18:46] *** jimmy1980 joined
[18:46] *** birdwindupbird left
[18:51] *** mkramer left
[18:52] *** xinming joined
[18:54] *** mkramer joined
[18:57] *** xinming left
[18:58] *** mkramer left
[18:59] *** xinming joined
[19:00] *** mkramer joined
[19:02] *** MayDaniel left
[19:09] *** xinming left
[19:16] *** xinming joined
[19:20] *** xinming left
[19:24] *** jimmy1980 left
[19:26] *** Chillance left
[19:29] *** jimmy1980 joined
[19:37] *** cooper joined
[19:41] *** wooden joined
[19:46] *** xinming joined
[19:46] *** daxim left
[19:50] *** xinming left
[19:51] *** bacek joined
[19:53] <sorear> good * #perl6

[19:55] <jnthn> evenin', sorear 

[19:56] *** xinming joined
[19:59] <sorear> Timbus: I'm not sure if niecza's Threads.pm6 supports nonconsentual termination of threads.  That kind of feature is quite out of favor in modern libs like the CLR :|

[20:04] *** xinming left
[20:10] *** MayDaniel joined
[20:11] *** ksi left
[20:13] *** mkramer left
[20:15] *** xinming joined
[20:18] * sorear plays a bit with colomon's mandelbrot

[20:19] <moritz> [Coke]: thanks, fixed

[20:19] <colomon> sorear: improved version coming in a couple of minutes -- now with zoom!

[20:20] *** xinming left
[20:21] *** xinming joined
[20:22] <sorear> colomon: I was thinking a cool feature would be incremental rendering

[20:23] * sorear will try that

[20:23] * sorear wonders what @color_map is and why it's not procedural

[20:24] <colomon> @color_map is the old fractint color scheme

[20:24] *** wolfman2000 left
[20:25] <colomon> why it's not procedural -- I haven't studied it enough to find a pattern, if it has one.

[20:25] <sorear> another glaring issue I'll look at: it crashes on resize, but declares itself resizable in the metadata

[20:25] <colomon> sorear: I've got resizing fixed, I believe.

[20:26] <sorear> my WM fullscreens resizable windows by default, and mandelbrot crashes before I have a chance to un-fullscreen it

[20:26] *** MayDaniel left
[20:26] <colomon> but zooming isn't quite zooming in at the right place yet.

[20:26] * sorear has been playing with mandelbrot using Xnest :1 with no WM running inside.  Ugly but works

[20:27] <colomon> let me go ahead and upload what I've got anyway.

[20:28] <colomon> pushed

[20:33] *** fridim_ left
[20:33] *** xinming left
[20:34] <sorear> hrm, opening a fullscreen mandelbrot might still take a while

[20:34] <colomon> right

[20:34] *** xinming joined
[20:34] * sorear wants to make this thing multi-threaded with the ability to cancel renders

[20:35] *** y3llow joined
[20:36] *** localhost left
[20:37] *** localhost joined
[20:37] <colomon> sorear: sounds like a noble ambition.

[20:37] <colomon> I've also thought about a progress bar.

[20:38] <colomon> although displaying it as it is calculated would also be cool.

[20:38] <colomon> anyway, I probably should do an hour or two of $work now

[20:39] <colomon> I think this counts as a reasonably successful day of niecza/gtk hacking.  :)

[20:39] *** MayDaniel joined
[20:42] *** lab7 joined
[20:43] * sorear wonders if it would be a net win to have the main loop detect attractive limit cycles (approximate repetition with negative Lyapunov exponent) and just return Inf

[20:44] <sorear> as a special case, detecting the large disks (which wouldn't help much when zoomed)

[20:47] <colomon> my old mandelbrot program detected repetition.  but it was running higher order polynomials, so skipping calculations was a big win.

[20:47] <colomon> I've been thinking about the large disk case, it seems a natural improvement.

[20:48] <colomon> now googling "negative Lyapunov exponent"....

[20:51] <dalek> mu: 8adf7dd | moritz++ | misc/perl6advent-2011/ (2 files):

[20:51] <dalek> mu: [advent] update schedule, brainstorm

[20:51] <dalek> mu: review: https://github.com/perl6/mu/commit/8adf7dd7a6

[20:51] *** xinming left
[20:53] *** xinming joined
[20:55] <sorear> what I've never understood about the Mandelbrot set is _why_ it is self-similar.

[20:56] *** Trashlord joined
[20:56] <colomon> I don't know a really good explanation, but I do have a bit of a quick intuitive one that captures some of it.

[20:57] <sorear> the self-similarity in simple iteration fractals makes sense - in an area where the transition map has a large derivative, it creates a scaled down image of a large area

[20:57] <sorear> but that only helps me with Julia, not Mandelbrot

[20:57] <colomon> .... and which may be a level simpler than you're already thinking.

[20:57] *** lab7 left
[20:58] <diakopter> sorear: magic :)

[20:58] <Woodi> something like 'MyClass.HOW.add_method( ... )' adds method to class. Is a way to add subroutines to module or package ?

[20:59] <Woodi> or MOP is reserved only for OO ? :)

[21:00] <sorear> Woodi: subroutines aren't actually members of modules or packages

[21:00] <Woodi> no ?

[21:00] <sorear> Woodi: by subroutines exist in the lexical scope which cannot be touched at runtime

[21:00] <sorear> if you are talking about 'our' subroutines, those exist in MyModule.WHO

[21:00] <sorear> not HOW

[21:01] <Woodi> sorear: I look for way to add 50 - 100 nearly identical subs in loop and no idea how to do it

[21:01] <sorear> niecza: package Foo { }; Foo.WHO<&mysub> = sub ($x) { say "got $x" };  Foo::mysub(25)

[21:01] <p6eval> niecza v12-2-geb42dfa: OUTPUT«got 25␤»

[21:01] <sorear> Woodi: I don't think there is a good way.  I've faced the same problem

[21:02] <sorear> in my last example, the Foo:: is _required_

[21:02] <Woodi> so Perl6 syntax is Module.WHO<^name> = sub (...) {...} ?

[21:02] <diakopter> Woodi: why not store the subs in a hash?

[21:03] <sorear> Woodi: Where did you get the ^ from?

[21:03] <Woodi> probably from #perl6 and it work on rakudo atm :)

[21:04] <Woodi> diakopter: must think a while about that...

[21:04] <Woodi> but I was looking for official method :)

[21:04] *** xinming left
[21:05] <colomon> nom: my $z = 0; say $z * z -.1 + .7i

[21:05] <p6eval> nom 676b35: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&z' called (line 1)␤»

[21:05] <sorear> colomon: I'm looking for a proof, or at least a convincing argument , that z_0 + dz \in M iff z_1 + B*dz \in M  with |M| >> 1 for many possible values of z_0

[21:06] *** xinming joined
[21:06] <colomon> nom: my $z = 0; say $z * $z -.1 + .7i

[21:06] <p6eval> nom 676b35: OUTPUT«-0.1 + 0.7i␤»

[21:06] <colomon> nom: my $z = -.1 + .7i; say $z * $z -.1 + .7i

[21:06] <p6eval> nom 676b35: OUTPUT«-0.58 + 0.56i␤»

[21:07] <colomon> nom

[21:07] <colomon> ;

[21:07] *** tadzik left
[21:08] <colomon> nom: my $c = -.1 + .7i; my @m := 0, -> $z { $z * $z + $c } ... *; say @m[^10]

[21:08] <p6eval> nom 676b35: OUTPUT«0 -0.1 + 0.7i -0.58 + 0.56i -0.0772 + 0.0504000000000001i -0.09658032 + 0.69221824i -0.569838333577395 + 0.566290681741926i -0.0959694098134729 + 0.0546117231915473i -0.0937723126900039 + 0.689517890312821i -0.566641674434211 + 0.570684625568469i -0.104598154654616 + …

[21:08] <colomon> nom: my $c = -.1 + .7i; my @m := 0, -> $z { $z * $z + $c } ... *; say @m[^10].perl

[21:08] <p6eval> nom 676b35: OUTPUT«(0, Complex.new(-0.1, 0.7), Complex.new(-0.58, 0.56), Complex.new(-0.0772, 0.0504000000000001), Complex.new(-0.09658032, 0.69221824), Complex.new(-0.569838333577395, 0.566290681741926), Complex.new(-0.0959694098134729, 0.0546117231915473), Complex.new(-0.0937723126900…

[21:08] *** donri joined
[21:12] *** xinming left
[21:16] <cognominal___> is llvm the defaut for niecza?

[21:19] <sorear> n/a

[21:19] <sorear> llvm is not the default for mono

[21:20] <sorear> it's not even compiled in by default

[21:20] <sorear> ime mono --llvm runs Niecza worse than mono does

[21:21] <sorear> llvm imposes a fairly significant penalty when you have 5MB of bytecode

[21:21] <sorear> like 30 seconds

[21:21] <sorear> and mono --llvm --aot does not seem to work

[21:22] <Woodi> oops, I am sleepy, can't read&think properly... s/\^/\$/  And add_method work in Rakudo

[21:23] <cognominal___> I have not checked llvm  yet but reading a news about llvm 3, I was curious.

[21:23] <Woodi> sorear: you say you want threaded interpreter, any specific plans ?

[21:24] <cognominal___> *checked niecza

[21:24] <sorear> Woodi: I do not understand the question

[21:25] <Woodi> do you have isea how you would like to implement this ?

[21:25] <Woodi> idea

[21:26] <cognominal___> sorear, so mono is more adapted than llvm for a dynamic language?

[21:27] *** cognominal___ is now known as cognominal

[21:28] <sorear> Woodi: I still do not understant.  What is a threaded interpreter?

[21:29] *** xinming joined
[21:29] <sorear> cognominal: that's an awkward question because "dynamic language" is a poorly defined concept

[21:29] <Woodi> ok, I must find source of what i think i read in backlog...

[21:30] <sorear> cognominal: I would say that Mono's bundled JIT compiler (which is called "mini" for historical reasons) makes very different compilation speed/code quality tradeoffs from LLVM

[21:31] <sorear> colomon: it just occurred to me that I'm not limited to _one_ worker thread.  Got a multi-logical-CPU system?

[21:31] <colomon> I've got 4 cores, if that's what you mean

[21:33] * sorear was trying to talk about the multicore and multi-real-CPU cases generically

[21:33] <colomon> fair enough.

[21:33] *** xinming left
[21:34] <sorear> colomon: is there any particular reason you have both &mandel and &julia?

[21:35] <colomon> sorear: habit.  obviously mandel is just julia with the initial value of 0.

[21:35] *** MayDaniel left
[21:35] <colomon> DRY violation, but I haven't really cleaned up this code yet.

[21:41] *** xinming joined
[21:42] <colomon> I think the bigger question here is, why do I call it $upper-right when it is actually $upper-left?  (might have something to do with the fact the set is rotated in the other p6 versions)

[21:44] <sorear> wow, I seem to be actually using a double-linked list

[21:46] <colomon> what for?

[21:46] <sorear> work queue

[21:46] <colomon> thread work queue?

[21:46] *** xinming left
[21:46] <sorear> yes

[21:47] <sorear> I need something like an array with shift, push, and remove-from-middle

[21:47] <colomon> double-linked list ftw

[21:47] *** xinming joined
[21:48] <sorear> hrm, on second thought it might be more elegant to just have a cancelled flag

[21:48] <colomon> are you hacking on gtk-mandelbrot, or is this stuff internal to niecza?

[21:48] <sorear> gtk-mandelbrot

[21:55] *** mkramer joined
[21:55] *** xinming left
[21:56] *** xinming joined
[21:58] <sorear> colomon: does CLR::System::Environment.ProcessorCount return anything useful?

[21:58] <sorear> for you

[21:59] *** fsergot joined
[22:00] *** xinming left
[22:01] *** Jsauidhasj joined
[22:02] <colomon> it says 8

[22:03] <sorear> huh.  two quad-cores?

[22:03] <sorear> or hyperthreading?

[22:04] <colomon> hyperthreading, I guess

[22:04] <colomon> unless Apple forgot to charge me for an extra quad core processor!

[22:04] <fsergot> hi o/

[22:04] <colomon>  Number of Processors:	1

[22:04] <colomon>   Total Number of Cores:	4

[22:06] * jnthn has seen a quadcore + HT show up as 8 in various cases before

[22:06] <colomon> jnthn!  fsergot!  o/

[22:06] *** Mowah_ joined
[22:07] <jnthn> o/

[22:07] *** xinming joined
[22:12] *** toebu joined
[22:15] <dalek> rakudo/nom: b238ce4 | jnthn++ | src/core/ (3 files):

[22:15] <dalek> rakudo/nom: Give Positional/Associative/Callable type parameters.

[22:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b238ce4558

[22:15] <dalek> rakudo/nom: 2344572 | jnthn++ | / (2 files):

[22:15] <dalek> rakudo/nom: Bump to latest NQP.

[22:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2344572272

[22:15] <dalek> rakudo/nom: 7a8679d | jnthn++ | src/ (5 files):

[22:15] <dalek> rakudo/nom: Generalize type parameterization. T[...] now calls T.^parameterize(...), and ParametricRoleGroupHOW gets to decide about CurriedRoleHOW, which is now an implementation details.

[22:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7a8679dcb8

[22:15] <dalek> rakudo/nom: 823b1fa | jnthn++ | src/Perl6/Metamodel/ClassHOW.pm:

[22:15] <dalek> rakudo/nom: Stub in an implementation of ClassHOW.parameterize.

[22:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/823b1fa3d7

[22:15] <dalek> rakudo/nom: 3c6b5e5 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[22:15] <dalek> rakudo/nom: Fix a bug in generic instantiation of parameters; the container descriptor also needs to be instantiated.

[22:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3c6b5e5b3f

[22:15] <dalek> rakudo/nom: 80669d0 | jnthn++ | src/ (2 files):

[22:15] <dalek> rakudo/nom: Make SomeTypeObj but ARole just give you back a new type object representing the original type plus the role mxied in. Explicitly forbid this for does, since you can't change a type object in place.

[22:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/80669d0711

[22:15] * sorear writes for ^(%*ENV<THREADS> // CLR::System::Environment.ProcessorCount) { ...

[22:16] *** xinming left
[22:16] *** mdxi left
[22:20] *** toebu left
[22:22] *** toebu joined
[22:22] *** kaare_ left
[22:28] <colomon> sorear: I'm going to be on and off for the next few hours, till the big ten championship game settles in.  I've given you a mandlebrot commitbit, and I'm very interested in what you are up to.  :)

[22:31] *** cognominal left
[22:32] *** mkramer left
[22:33] *** cognominal joined
[22:43] *** [Sec] left
[22:46] *** mdxi joined
[22:50] *** fridim_ joined
[23:03] *** estrabd joined
[23:04] *** tadzik joined
[23:06] *** toebu left
[23:10] *** xinming joined
[23:11] *** colomon_Droid joined
[23:13] *** Jsauidhasj left
[23:14] *** wolfman2000 joined
[23:16] *** xinming left
[23:16] *** am0c joined
[23:19] <japhb> sorear, in case you did not already find it -- I think Woodi was referring to http://en.wikipedia.org/wiki/Threaded_code .

[23:19] <phenny> japhb: 12:44Z <jnthn> tell japhb Well, next week I'll be teaching an advanced C# course. I teach various others. :)

[23:19] *** xinming joined
[23:19] *** jimmy1980 left
[23:19] * japhb chuckles that someone who teaches advanced C# chooses to hack on the *other* major compiler.

[23:20] *** mj41 joined
[23:20] *** mdxi left
[23:22] *** xinming left
[23:23] <jnthn> It's good to maintain a balance of programming langauges in ones life. :)

[23:23] *** xinming_ joined
[23:24] <japhb> jnthn, true -- a balance I have neglected of late, sad to say.

[23:24] <sorear> japhb: jnthn has been a Rakudo bigshot since before I joined this channel

[23:25] <japhb> sorear, I assumed as much.  It just strikes my funny bone is all.  ;-)

[23:25] *** jimmy1980 joined
[23:27] * jnthn thought he'd "just implement junctions" :)

[23:29] <japhb> Seems like I've heard that sort of thinking before ...  ;-)

[23:33] *** simcop2387 left
[23:34] *** simcop2387 joined
[23:34] *** xinming_ left
[23:35] <japhb> perl6: 1.23bad

[23:35] <p6eval> niecza v12-2-geb42dfa: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Whitespace is required between alphanumeric tokens at /tmp/0jqnWhztni line 1:␤------> [32m1.23[33m⏏[31mbad[0m␤␤Two terms in a row at /tmp/0jqnWhztni line 1:␤------> [32m1.23[33m⏏[31mbad[0m␤␤Parse failed␤␤»…

[23:35] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected "bad"␤    expecting exponent, term postfix or operator␤    at /tmp/E3pnncBmZJ line 1, column 5␤»

[23:35] <p6eval> ..rakudo 80669d: OUTPUT«===SORRY!===␤Confused at line 1, near "1.23bad"␤»

[23:40] *** mberends left
[23:41] *** xinming joined
[23:44] *** mj41 left
[23:49] *** xinming left
[23:56] *** xinming joined
