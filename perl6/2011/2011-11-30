[00:13] *** molaf_ joined
[00:17] *** molaf left
[00:19] *** donri joined
[00:28] *** tokuhirom joined
[00:31] *** icwiener left
[00:32] *** replore joined
[00:32] *** thou left
[00:35] *** thou joined
[00:43] <jnthn> 'night, #perl6

[00:44] <japhb> phenny, ask sorear You mentioned wanting to do a Niecza/C.  Does that mean "implemented in C, targeting some VM or JIT" or "implemented in C, targeting C as an intermediate language", or some other variation entirely?

[00:44] <phenny> japhb: I'll pass that on when sorear is around.

[00:44] <japhb> 'night, jnthn

[00:46] <colomon> japhb: sorear was talking about what GC to use, so I'm pretty sure he means targeting C as an intermediate language.

[00:47] <diakopter> no, I'm pretty sure he means writing his own VM/interpreter/JIT in C.

[00:48] <colomon> sure, could be that too.

[00:48] <japhb> colomon, in that case I wonder if C-- might be a better intermediate language choice.  He does know GHC after all, so he at least has seen the cmm bits there.  :-)

[00:49] <japhb> diakopter, *chuckle* And now I'm back to knowing nothing of his plans again, with two of you offering opposite interpretations.  ;-)

[00:51] <diakopter> I'm nearly certain he doesn't want to rely on a C compiler at runtime

[00:54] *** hundskatt left
[00:57] *** tokuhirom left
[00:58] <colomon> diakopter: going back to the perl 5 model, eh?  that certainly fits with what he said, and seems to make sense.

[00:58] <diakopter> or parrot model

[01:02] *** cooper left
[01:03] *** lestrrat left
[01:03] <colomon> I'm just guessing, mind you, but I'd be really surprised if he were thinking the parrot model (ie, a new universal VM loosely coupled to niecza) rather than the p5 model (custom VM designed to do exactly what niecza needs).

[01:04] *** lestrrat joined
[01:06] <japhb> colomon, perhaps diakopter meant the parrot model in the sense of lower-level, byte-code and/or jit-based rather than just interpreting the optree as perl5 does.

[01:07] <colomon> ah, sure, that could make sense, too.  :)

[01:22] *** plutoid joined
[01:27] *** thou left
[01:50] *** woosley joined
[02:16] *** hypolin joined
[02:26] *** donri left
[02:30] <dalek> rakudo/nom: 652952a | colomon++ | README:

[02:30] <dalek> rakudo/nom: Add --gen-nqp to the Configure instructions.

[02:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/652952ac81

[02:38] *** envi_ left
[02:44] *** Guest28440 left
[02:56] *** wolfman2000 joined
[02:57] *** agentzh joined
[03:02] *** satyavvd joined
[03:06] *** lestrrat left
[03:07] *** lestrrat joined
[03:24] <colomon> Where does the updated Pugs repo live now that the revival effort is underway?

[03:27] <colomon> So, here's my first stab at the Advent Day 1 post.  Comments and suggestions would be very welcome.  http://perl6advent.wordpress.com/?p=735&preview=true

[03:27] <colomon> (You may need Advent editing permission to see that preview...)

[03:42] *** worr left
[03:47] *** preflex left
[03:49] *** preflex joined
[04:08] <sorear> good * #perl6

[04:08] <phenny> sorear: 00:44Z <japhb> ask sorear You mentioned wanting to do a Niecza/C.  Does that mean "implemented in C, targeting some VM or JIT" or "implemented in C, targeting C as an intermediate language", or some other variation entirely?

[04:12] <sorear> japhb: I am _not_ planning to generate C

[04:13] <sorear> I'm going for more of a threaded code interpreter like what Perl 5 does but with better dcache behavior

[04:41] *** agentzh left
[04:55] *** ethndbst left
[05:43] *** ethndbst joined
[05:43] *** ethndbst left
[05:43] *** ethndbst joined
[05:52] <dalek> niecza: 0b17f48 | sorear++ | docs/release.txt:

[05:52] <dalek> niecza: Add notes on how to cut a Niecza release

[05:52] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0b17f4869b

[05:52] <dalek> niecza: eb42dfa | sorear++ | FETCH_URL:

[05:52] <dalek> niecza: Update FETCH_URL

[05:52] <dalek> niecza: review: https://github.com/sorear/niecza/commit/eb42dfaded

[06:01] *** localhost left
[06:03] *** localhost joined
[06:15] *** kaleem joined
[06:25] *** ruz left
[06:26] *** clkao left
[06:32] *** molaf_ left
[06:38] *** wolfman2000 left
[06:42] *** rsimoes1 is now known as rsimoes

[06:44] *** Chillance joined
[06:50] *** koban joined
[07:04] *** fridim_ joined
[07:07] <moritz> good morning

[07:07] <sorear> good morning moritz

[07:07] <moritz> tomorrow is the first of December

[07:08] <moritz> if we want a Perl 6 advent calendar, soembody needs to write a first post

[07:08] <moritz> and people need to commit to dates and topics

[07:19] *** replore left
[07:21] <Woodi> I would like to read few "perlish" topics like about debugging/profiling tools (in Parrot too) or Grammar::Trace (me seen video)

[07:25] <moritz> Woodi: then do. Add your name and topic(s) to misc/perl6advent-2011/schedule in the perl6/mu repository

[07:25] <moritz> erm

[07:25] <moritz> sorry, I thought you wanted to write about them

[07:25] <masak> morning, #perl6

[07:25] <moritz> we have no lack of topics, we have a lack of people committed to dates and topics

[07:26] <moritz> good morning masak 

[07:27] <masak> if we don't have enough people committed to dates and topics by the end of the day, maybe it's better to not run an advent calendar this year?

[07:28] <masak> finding people to write the next day's post tends to be the tricky part (if not the most time-consuming, which is probably writing the post)

[07:28] <moritz> well, quite a few people seemed to be willing to do something

[07:28] <moritz> it would be a shame not to do

[07:28] <moritz> but I get your point

[07:29] <moritz> I wonder what's better, an advent calendar with only entries for half the days, or none at all

[07:32] <moritz> anyway, my current real-life situation does not allow me to spend as much time on it as last year (where I wrote several last-minute posts to fill gaps)

[07:33] <masak> same here.

[07:34] <masak> I'm going on a vacation with at best reduced internet access for two weeks, starting Friday.

[07:37] *** hundskatt joined
[07:38] *** pmurias joined
[07:38] *** ethndbst left
[07:39] <pmurias> sorear: why write an interpreter instead of generating C/llvm ir?

[07:39] *** preflex_ joined
[07:40] *** preflex left
[07:40] *** preflex_ is now known as preflex

[07:40] <sorear> pmurias: llvm is SLOW

[07:40] <sorear> pmurias: and gcc is slower

[07:40] <sorear> using llvm would erase all the wins from abandoning Mono

[07:40] <sorear> o/ masak

[07:41] <pmurias> sorear: what would the wins of abandoning Mono be?

[07:41] <sorear> faster startup, much more portability, less memory use

[07:42] *** baest left
[07:43] <sorear> moritz: I'm not sure I get it.  Didn't we cover all the topics last year?

[07:43] <sorear> What's left?

[07:44] *** baest joined
[07:46] <pmurias> sorear: you could try targeting the V8 IR

[07:47] <masak> sorear: I'm sure the set of Perl 6 topics has a cardinality bigger than 50 :)

[07:48] <pmurias> sorear: re gcc is slow, yes it used to be a problem with mildew

[07:52] <moritz> sorear: there are infinitely many topics. See topic-brainstorming in perl6/mu/misc/perl6advent-2011

[07:53] *** obra joined
[07:53] *** alvis left
[07:55] <jnthn> moritz: Gotta commute/do onsite $dayjob in a few minutes...I can commit to 2 or maybe 3 posts, including one on Grammar::Debugger and one on meta-programming.

[07:56] *** obra left
[08:05] * sorear wonders what the old pumpking dropped in for

[08:06] <sorear> moritz: ah, cool

[08:07] * sorear can't do "a look at Niecza" without first getting a better idea of what Niecza is and why it still exists

[08:07] <sorear> incidentally, the unicode folks made the clarification I wanted to tn18 before I had a chance to ask for it

[08:08] *** arlinius left
[08:08] <masak> "the old pumpking" sounds like something out of a children's story :)

[08:08] *** alvis joined
[08:09] <sorear> masak: until last week or so, obra was the p5 pumpking (now it's rjbs)

[08:14] <masak> nod

[08:14] <masak> oh, the switch wasn't until last week? I'd have thought it happened a month ago or so.

[08:15] <sorear> maybe, my sense of time ain't great

[08:16] * sorear sleep

[08:19] *** am0c^ joined
[08:29] *** am0c^ left
[08:31] <moritz> phenny: ask sorear if he'd like to write something for p6advent about his Unicode work for niecza

[08:31] <phenny> moritz: I'll pass that on when sorear is around.

[08:33] <moritz> jnthn: that's great. Could you please chose slots for that in https://github.com/perl6/mu/blob/master/misc/perl6advent-2011/schedule ?

[08:35] * moritz just discovered http://perldoc.perl.org/pstruct.html

[08:39] <moritz> jnthn: btw I ran test-summary.pl yesterday, 17690 passes

[08:39] *** mj41 joined
[08:39] <jnthn> moritz: najs!

[08:39] <jnthn> er. nice!

[08:42] <moritz> I've got 6 failures in t/spec/S05-mass/properties-general.t after [Coke]++ unfudged a bit. I guess they depend on the ICU version

[08:42] <moritz> oh, and whiteknight++ pondered bundling icu with parrot again yesterday

[08:43] *** stepnem left
[08:49] *** stepnem joined
[08:51] <jnthn> moritz: ooh, progress :)

[08:52] <jnthn> moritz: I can't get at the mu repo from this $dayjob place...will add myself this evening.

[08:54] <moritz> jnthn: ok. Or tell me the dates, and I'll enter you

[08:54] *** am0c^ joined
[08:55] <moritz> erm, it

[08:55] <moritz> whatever

[08:55] <jnthn> lol

[08:56] <jnthn> moritz: not 7th-9th and not 15th or 16th. Other than that, any days are fine.

[08:58] *** arlinius joined
[08:59] <dalek> mu: 7c49eae | moritz++ | misc/perl6advent-2011/schedule:

[08:59] <dalek> mu: sign up jnthn++ for day 2 and 14

[08:59] <dalek> mu: review: https://github.com/perl6/mu/commit/7c49eaeca8

[08:59] <masak> jnthn++

[09:00] <masak> I might have time to prepare-write something tomorrow, if I have time left over after blogging.

[09:00] <masak> but I don't want to sign up until I have something prepared.

[09:00] <masak> I could sign up already for any date after the 18th.

[09:00] <moritz> masak: please do

[09:01] <masak> haven't thought about what to write about yet, but if signing up my name alone is OK, I'll do that.

[09:01] <moritz> it is

[09:01] * masak does so, then

[09:03] *** koban left
[09:03] <dalek> mu: c8126c4 | (Carl Mäsak)++ | misc/perl6advent-2011/schedule:

[09:03] <dalek> mu: Signed up masak for 19th and 22nd

[09:03] <dalek> mu: review: https://github.com/perl6/mu/commit/c8126c4151

[09:03] <moritz> masak++

[09:04] *** domidumont left
[09:04] *** am0c^ left
[09:06] *** domidumont joined
[09:08] <snarkyboojum> abandoning Mono might forgo all the library goodness that Colomon was praising the other day too tho :(

[09:09] * moritz kinda thinks there are many good C libraries too

[09:09] <snarkyboojum> no doubt, though using C libraries is arguably more involved that a "platform" like Mono

[09:11] <snarkyboojum> I played around porting http://dev.aboutus.org/2011/07/03/getting-started-exploratory-parsing.html to Perl 6 which runs better on nom now - might make an interesting Advent post

[09:12] <snarkyboojum> though there might already be grammar'y type posts in there

[09:14] <snarkyboojum> Perl 6 naturally fits that kind of "exploratory parsing" niche, without having to install software like peg/leg (which is very good btw)

[09:18] <snarkyboojum> or not!

[09:18] *** mkramer joined
[09:19] <snarkyboojum> i.e. one of the simple examples is using more than 3GB of memory atm :(

[09:19] <snarkyboojum> but at least it hasn't coredumped yet :)

[09:20] *** mkramer left
[09:21] *** mkramer joined
[09:21] *** mkramer left
[09:21] *** mkramer joined
[09:22] *** woosley left
[09:32] <pmurias> snarkyboojum: re abandoning Mono, is the plan to abandon it or merely add an additional backend?

[09:32] <masak> does anyone know of any programming language besides Java and Perl 6 where enums are reference types?

[09:33] <snarkyboojum> pmurias: no idea - just reading sorears earlier comments

[09:34] <masak> snarkyboojum: I think you should definitely go for an "exploratory parsing" post. for one, because I'd like to read it :) but also because I know what you mean and I agree that it's one of the strengths of Perl 6 in general and of Niecza/Rakudo in particular.

[09:35] *** mkramer left
[09:35] <moritz> snarkyboojum: I'd very much welcome such a post

[09:35] *** mkramer joined
[09:35] *** mkramer left
[09:36] <pmurias> masak: enums are mutable in java?

[09:36] <moritz> snarkyboojum: grammars are a very central p6 feature (IMHO), and we can't show it off too much :-)

[09:36] <snarkyboojum> it seems it's the .perl on the match object in my little script that is the culprit for making the thing effectively hang :(

[09:36] <snarkyboojum> moritz masak: cool :)

[09:37] <moritz> snarkyboojum: on rakudo, try .gist for inspecting

[09:37] *** dakkar joined
[09:37] <snarkyboojum> moritz: good idea - will give that a go

[09:37] <moritz> snarkyboojum: but please submit a bug report too, I'd like to fix .perl eventually

[09:37] <masak> pmurias: essentially yes, but it's considered poor taste to give enum values mutable state.

[09:38] <masak> pmurias: or, as it was aptly put on stackoverflow "yes, but that would be *evil*"

[09:38] *** mkramer joined
[09:38] <moritz> (nearly) everything is mutable, if you go to a sufficiently low level :-)

[09:38] <snarkyboojum> I am trying to dump 16814 "facts" which have been parsed out of a text file (via .perl or .gist - both of which are v. slow)

[09:39] <moritz> erm, yes. I can imagine that

[09:39] <snarkyboojum> if just just count them, all is good, so it's string performance again I suppose

[09:41] <moritz> or maybe iteration preformance

[09:41] <snarkyboojum> ah

[09:41] <moritz> note that .perl is optimized for correctness, not for speed or readability

[09:42] <moritz> snarkyboojum: maybe I add you to the p6advent schedule? if yes, which day?

[09:43] <snarkyboojum> moritz: ok - stick me in there in the middle somewhere :)

[09:43] *** mkramer left
[09:44] <moritz> snarkyboojum: 12th then? :-)

[09:44] <snarkyboojum> major project at work goes "live" on Dec 14, so around there ;)

[09:44] <moritz> it's as middle as it gets :-)

[09:44] <moritz> around there, or later?

[09:45] *** mkramer joined
[09:45] <snarkyboojum> 12 would be probably be a great excuse for procrastination

[09:45] <moritz> ok, 12 it is then

[09:45] <snarkyboojum> "lock it in eddy"

[09:46] <dalek> mu: 7b043af | moritz++ | misc/perl6advent-2011/schedule:

[09:46] <dalek> mu: [p6advent] snarkyboojum++ volunteers for day 12

[09:46] <dalek> mu: review: https://github.com/perl6/mu/commit/7b043af287

[09:50] <dalek> mu: 0005bed | moritz++ | misc/perl6advent-2011/ (2 files):

[09:50] <dalek> mu: [p6advent] sign me up for day 3, Buf and binary IO

[09:50] <dalek> mu: review: https://github.com/perl6/mu/commit/0005beddca

[09:53] *** domidumont left
[09:54] *** envi_ joined
[10:05] *** hundskatt left
[10:06] *** hypolin left
[10:07] <moritz> nom: say '' ~ Buf.new

[10:07] <p6eval> nom 652952: OUTPUT«Buf<656769015169214330>␤»

[10:07] *** mkramer left
[10:08] *** mkramer joined
[10:19] <masak> ooh, I know! I'll write about operator precedence! I don't think anyone's done that before.

[10:19] <masak> and it's a topic I like ^_^

[10:22] <moritz> nom: https://gist.github.com/1408580

[10:22] <p6eval> nom 652952: OUTPUT«mÃ¸Ã¾␤møþ␤»

[10:22] <moritz> it seems that $*OUT.write(Buf) is broken :(

[10:24] *** daxim joined
[10:24] <jnthn> Just $*OUT?

[10:24] <moritz> hm, no idea

[10:24] * moritz checks

[10:26] <moritz> nope, other :w file handles too

[10:26] <moritz> hm

[10:26] <moritz> oh

[10:26] <moritz> I need to open it as :bin

[10:27] *** mkramer left
[10:28] <moritz> nom: nqp::say(nqp::typeof__SP(pir::getstdout__P()))

[10:28] <p6eval> nom 652952: OUTPUT«===SORRY!===␤Unrecognized nqp:: opcode 'nqp::typeof__SP' at line 1, near ")"␤»

[10:28] <moritz> nom: nqp::say(pir::typeof__SP(pir::getstdout__P()))

[10:28] <p6eval> nom 652952: OUTPUT«FileHandle␤»

[10:29] <moritz> nom: nqp::say(pir::getstdout__P().encoding)

[10:29] <p6eval> nom 652952: OUTPUT«utf8␤»

[10:31] *** satyavvd left
[10:34] <moritz> should .write automatically temporarily switch to binary IO? or die?

[10:34] <moritz> doing something non-sensical semems wrong to me :-)

[10:34] * moritz goes with DWIM for now

[10:37] *** pmurias left
[10:38] <masak> die would be the conservative option, but switching to binary has a certain allure, too, I guess.

[10:39] <moritz> nom: $*OUT.write($*IN.read(200))

[10:39] <p6eval> nom 652952: OUTPUT«Land der Berge, Land am Strome,␤Land der Ãcker, Land der Dome,␤Land der HÃ¤mmer, zukunftsreich!␤Heimat bist du groÃer SÃ¶hne,␤Volk, begnadet fÃ¼r das SchÃ¶ne,␤vielgerÃ¼hmtes Ãsterreich,␤vielgerÃ¼hm»

[10:40] <moritz> ah, same problem

[10:41] <masak> .write should always work on Buf, no?

[10:42] <moritz> and .read returns one, yes

[10:43] <masak> oh, but the problem is $*OUT being set to binary or not? I see.

[10:43] <moritz> curiously I think that $*IN doesn't need to be set to binary already

[10:44] *** domidumont joined
[10:45] *** agentzh joined
[10:46] *** plutoid left
[10:50] <dalek> rakudo/nom: 80f6ce0 | moritz++ | src/core/IO.pm:

[10:50] <dalek> rakudo/nom: make IO.write DWIM if the handle is not binary yet

[10:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/80f6ce0c93

[10:53] <moritz> erm

[10:54] <moritz> does anybody else find the section on Blob literals confusing?

[10:54] <moritz>     :16{A705E}              a blob4, 4 bits per column

[10:54] <colomon> masak: what can you tell me about the pugs revival effort (for the Day 1 post)?

[10:55] <moritz> so, to build a blob8, you need to write :256{...}? And what do you put in there?

[10:56] <moritz> colomon: ingy fixed some build issues, apart from that nothing has happened, only planning

[10:56] <moritz> (re pugs)

[10:56] <colomon> where's the repo for it?  is it still audreyt's, or is there a fork somewhere?

[10:57] <moritz> https://github.com/perl6/Pugs.hs

[10:58] <moritz> std: :2{0010}

[10:58] <p6eval> std be1f10e: OUTPUT«[31m===[0mSORRY![31m===[0m␤Malformed radix number at /tmp/vOx4dPvMHA line 1:␤------> [32m:2[33m⏏[31m{0010}[0m␤    expecting any of:␤        statement end␤  statement list␤Parse failed␤FAILED 00:01 118m␤»

[10:58] *** mkramer joined
[11:04] <colomon> moritz++

[11:04] <masak> colomon: an accurate picture of the pugs revival effort, I think, is that there's plans for it but it hasn't begun yet.

[11:05] <moritz> I'd rather have all Blob literals generate a Buf8, and have the leading number denote the basis for it, not the column width

[11:05] <masak> some people have gotten Pugs from a repo on their boxes. I haven't yet. haven't tried very hard, though.

[11:06] <moritz> nom: https://gist.github.com/1408580

[11:06] <p6eval> nom 652952: OUTPUT«mÃ¸Ã¾␤møþ␤»

[11:06] <moritz> evalbot control rebuild

[11:06] <moritz> evalbot rebuild nom

[11:06] <p6eval> OK (started asynchronously)

[11:10] <colomon> Do the plans for pugs include trying to bring it closer to the current spec?

[11:13] <masak> absolutely.

[11:14] <masak> though probably more on the LHF level of things until we understand the Pugs architecture better :)

[11:15] <masak> getting Pugs to run the roast tests would be a short-term goal as well.

[11:18] <moritz> any thoughts on the Blob literal issue I raised above?

[11:19] <masak> moritz: I thought Blob was to be an immutable Buf...

[11:19] <moritz> yes

[11:19] <moritz> (I might not have made the distinction above, because rakudo only implements Buf)

[11:20] <moritz> but the issue is the same nonethelss

[11:21] <moritz> by current spec, to create a Blob8 / Buf8, you'd need to write :256{...}, and I don't know wha the '...' is supposed to be

[11:21] <moritz> everything else in Perl 6 that supports radix notation only goes up to 36, because we only have 10 digits and 26 ASCIIbetical characters

[11:25] <moritz> question to the Socket users: should .recv return a Buf?

[11:28] <colomon> moritz: just off the top of my head (no idea what the spec says), I'd think the ... should be in hex.

[11:30] <colomon> anyone know if there's an easy way to get an HTML file from a github repo to actually display like a web page (instead of HTML source)?

[11:33] *** ggoebel joined
[11:38] *** markand joined
[11:38] <markand> hi

[11:38] <daxim> masak, http://paste.scsys.co.uk/163516

[11:38] <daxim> roasting is easy

[11:42] <markand> is it still possible to use perl5 from cpan with perl6 ?

[11:43] <tadzik> I think it's possible in niecza

[11:45] *** whiteknight joined
[11:45] *** whiteknight is now known as Guest622

[11:52] <masak> daxim: nice!

[11:52] <daxim> pugs: use perl5::Math::Trig; tan(50).say;

[11:52] <p6eval> pugs b927740: OUTPUT«pugs: *** Unsafe function 'use' called under safe mode␤    at /tmp/Um8xTt7FyL line 1, column 1␤»

[11:52] <daxim> markand, this does work offline.

[11:53] <markand> okay :)

[11:53] <markand> thanks

[12:02] *** mkramer left
[12:13] *** Psyche^ joined
[12:16] *** Patterner left
[12:16] *** Psyche^ is now known as Patterner

[12:18] *** agentzh left
[12:23] *** benabik left
[12:35] *** hundskatt joined
[12:43] *** mkramer1 joined
[12:47] *** bluescreen10 joined
[12:53] *** mtk joined
[12:56] <dalek> rakudo/nom: ff7fd2d | moritz++ | src/core/IO/Socket.pm:

[12:56] <dalek> rakudo/nom: .write method for sockets

[12:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ff7fd2d776

[12:56] <moritz> I've only tested that method very lightly; more testing appreciated

[13:08] *** mtk left
[13:10] *** benabik joined
[13:12] *** mtk joined
[13:19] *** tokuhirom joined
[13:26] *** mkramer1 left
[13:26] *** kaleem left
[13:44] <moritz> nom: class A { has str $.x; method BUILD(:$!x) { } }; say A.new(:x<foo>).x

[13:44] <p6eval> nom ff7fd2: OUTPUT«Cannot assign to a non-container␤  in method BUILD at /tmp/rmcjzlnZkz:1␤  in method BUILDALL at src/gen/CORE.setting:568␤  in method bless at src/gen/CORE.setting:558␤  in method new at src/gen/CORE.setting:543␤  in block <anon> at /tmp/rmcjzlnZkz:1␤  in <anon> at /tm…

[13:46] * moritz submits rakudobug

[13:48] <jnthn> Hm :)

[13:51] <moritz> nom: class A { has str $.x; method BUILD(str :$!x) { } }; say A.new(:x<foo>)

[13:51] <p6eval> nom ff7fd2: OUTPUT«Binding to natively typed attributive parameter '$!x' not supported␤  in method BUILD at /tmp/zHH0gweEES:1␤  in method BUILDALL at src/gen/CORE.setting:568␤  in method bless at src/gen/CORE.setting:558␤  in method new at src/gen/CORE.setting:543␤  in block <anon> at /…

[13:53] <jnthn> At least it knows it can't do that one yet :)

[13:58] *** hundskatt left
[14:04] *** markand left
[14:14] *** muixirt joined
[14:16] <muixirt> hi folks

[14:16] <colomon> \o

[14:17] <muixirt> does NativeCall/Zavolaj work?

[14:18] <moritz> muixirt: there's a branch called v2 in Zavolaj that should work on very latest nom

[14:19] <moritz> muixirt: test very much appreciated

[14:23] * jnthn should merge that branch this evening.

[14:24] * moritz deleted the rakudo nci branch today, hoping to have remembered correctly that it was already merged

[14:25] <jnthn> moritz: merged last night.

[14:25] <jnthn> thanks for cleaning up after my branch mess :)

[14:28] *** lichtkind joined
[14:35] <moritz> how much has Zavolaj's API changed?

[14:36] <jnthn> moritz: little

[14:37] <jnthn> You still write "is native('library')"

[14:37] <moritz> cool

[14:37] <jnthn> and OpaquePointer

[14:37] <jnthn> and so forth

[14:37] <moritz> just the struct things is new, no?

[14:37] <jnthn> You can use things like int8 and int16 in the parameter types

[14:37] <jnthn> You can also specify how to marshall the Str type now

[14:37] <jnthn> And it handles null much better

[14:37] <jnthn> (pass a type object to pass a null)

[14:38] <jnthn> at least, for string, struct and pointer types

[14:38] <jnthn> yes, struct stuff is at an early stage, but works for basic cases.

[14:38] <muixirt> jnthn: wrt zavolaj: a make install should suffice, right? get a LTA error message

[14:39] <jnthn> muixirt: I've not tried that at all in the v2 branch; I know make test didn't work out yet

[14:39] <jnthn> muixirt: What do you get, ooc?

[14:41] <muixirt> http://nopaste.snit.ch/97385

[14:42] <moritz> muixirt: how old/young is your rakudo build?

[14:42] <muixirt> from today

[14:42] <moritz> hm

[14:42] <moritz> and did you remember to install it?

[14:43] <moritz> the error message usually means that an op is not available that should be

[14:43] <moritz> which lets me guess that the native call ops aren't available

[14:44] <muixirt> the nci was merged in? :-)

[14:44] <jnthn> yes, looks like missing nqp_dyncall_ops or so

[14:45] <jnthn> muixirt: nqp provides some native calling support. The NativeCall.pm module just puts a shiny Perl 6 wrapper around it all. 

[14:47] *** JimmyZ joined
[14:47] <JimmyZ> good evening, #perl6

[14:47] <PerlJam> good morning JimmyZ  :)

[14:47] *** Guest622 left
[14:48] <JimmyZ> PerlJam:  hehe :)

[14:48] * JimmyZ wonders how about callback

[14:49] <jnthn> JimmyZ: I didn't get those in yet.

[14:49] <jnthn> JimmyZ: dyncall library does provide support for that. So I hope to get to it soon.

[14:49] <JimmyZ> jnthn:  thanks ;)

[14:51] <benabik> jnthn: Just curious: Why did you use dyncall instead of ffi in Parrot?  Just being contrary or does libFFI have some variety of issue?

[14:51] <moritz> windows build troubles

[14:52] <benabik> dyncall looks interesting, I'll admit.  :-)

[14:52] <jnthn> benabik: Build issues with libFFI, plus it doesn't seem very actively developed. Plus I didn't want people to have to dependency hunt. But what really did it was that I wanted to get some decent 6model integration.

[14:53] <jnthn> Now you can define a C structure in Perl 6 just by writing class and marking it "is repr('CStruct')".

[14:53] <benabik> jnthn: Cool, cool.  Looks slick.

[14:54] <muixirt> jnthn: sorry the error message  was probably caused by some stale files

[14:55] *** jasonmay left
[14:56] *** jasonmay joined
[15:08] <muixirt> jnthn: why is the .so extension needed? ( is native('libfoobar.so') )

[15:12] <jnthn> muixirt: I think whatever you specify at the moment gets passed straight down to the OS loader. Probably should get the .so added for you.

[15:12] *** kaleem joined
[15:17] <muixirt> jnthn and moritz, thanks for the help and the work on nci, bigint, optimizations and all the other things!

[15:23] *** molaf joined
[15:31] *** ethndbst joined
[15:35] *** MayDaniel joined
[15:41] *** thou joined
[15:52] *** _ilbot left
[15:52] *** mkramer joined
[15:57] *** mkramer left
[16:00] *** mkramer joined
[16:01] *** mkramer left
[16:01] *** _ilbot joined
[16:20] *** JimmyZ left
[16:23] <jnthn> decommute &

[16:25] <[Coke]> jnthn: hio.

[16:29] *** tokuhirom left
[16:29] *** tokuhirom joined
[16:33] *** tokuhirom left
[16:34] *** kaleem left
[16:43] <[Coke]> moritz? (or anyone here familiar with autounfudge?)

[16:45] <[Coke]> I'm having trouble unfudging a file because the fudged variant is returning 1 instead of 0 for an exit code.

[16:45] <japhb> phenny, tell moritz The spec supports :256[255,127,0,54] -- square braces, then comma separated decimal values

[16:45] <phenny> japhb: I'll pass that on when moritz is around.

[16:46] <[Coke]> (all tests are skipped - if you run make .../../foo.t , exit value 0. if you run the fudged variant, exit value 1

[16:46] <japhb> moritz, My Str.Numeric rewrite already supports this.

[16:46] <[Coke]> the fudged version has an explicit exit 1 in it.... wtf?

[16:46] <japhb> phenny, tell moritz My Str.Numeric rewrite already supports this.

[16:46] <phenny> japhb: I'll pass that on when moritz is around.

[16:49] <japhb> I may have to just push that to a branch, so other people can look at it, even though it can't be merged because of the Failure handling issue ... hmmm, I'll do that next time I have access to that computer unless someone gives me a better option

[16:55] *** kaleem joined
[16:55] <[Coke]> wtf. made trivial whitespace change to t/spec/fudge. autounfudge begins to work. back out trivial change. still works.

[16:56] <[Coke]> *head explode*

[16:58] <dalek> rakudo/nom: f0ac58c | coke++ | tools/autounfudge.pl:

[16:58] <dalek> rakudo/nom: add more on-demand debug output

[16:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f0ac58cdda

[16:58] <colomon> japhb: of course!  dunno how I forgot :256[255,127,0,54] , was just looking at it a few weeks ago.

[16:59] <PerlJam> colomon: I know how you forgot it ... Perl 6 is a big language with lots of corners.  :)

[16:59] <PerlJam> (fortunately most of the corners aren't sharp)

[17:01] * jnthn home :)

[17:01] <colomon> PerlJam: and my brain has enormous quantities of clutter in it...

[17:19] *** kranius left
[17:22] <pmichaud> good morning, #perl6

[17:22] <jnthn> hi, pmichaud

[17:23] <jnthn> nice to see you around here again! :)

[17:23] <pmichaud> good to be around again :)(

[17:23] <pmichaud> :)

[17:23] <pmichaud> still can't type, though.  :)

[17:23] <PerlJam> pmichaud!

[17:23] <PerlJam> pmichaud: How goes?

[17:24] <pmichaud> things are okay here... still making many trips to doctors and the like though

[17:24] *** kranius joined
[17:25] *** zby_home joined
[17:28] <[Coke]> pmichaud: o/

[17:36] *** clkao joined
[17:38] <moritz> \o pmichaud 

[17:38] <colomon> hey, #phasers?

[17:38] <phenny> moritz: 16:45Z <japhb> tell moritz The spec supports :256[255,127,0,54] -- square braces, then comma separated decimal values

[17:38] <phenny> moritz: 16:46Z <japhb> tell moritz My Str.Numeric rewrite already supports this.

[17:39] <jnthn> er :)

[17:39] *** flussence joined
[17:39] <moritz> japhb: erm, if :256[...] returns a Blob or Buf, Str.Numeric shouldn't support it, just val(), right?

[17:40] <moritz> PerlJam: can I motivate you to write something for the p6advent calendar?

[17:40] <PerlJam> moritz: I'm planning on writing something, I jsut don't know what yet.

[17:41] *** MayDaniel left
[17:47] *** sayu joined
[17:48] <PerlJam> colomon++ for getting the ball rolling on this year's advent calendar

[17:49] <colomon> PerlJam: I was really amused when I looked at the backtrace this morning and saw moritz talking about the need to figure out who was going to do day 1, when I already had the first draft of it up on the blog.  :)

[17:50] <PerlJam> colomon: Mentioning R* as a separate implementation of Perl 6 seems weird. Also, isn't there a R* release planned for Dec?  Talking about the previous R* on  the eve of the new R* is also a little weird.

[17:50] <PerlJam> colomon: who are "they" that have pugs building aain?

[17:50] <PerlJam> er, again

[17:50] <colomon> masak and ingy seem to be the ringleaders.

[17:51] <colomon> I think that R* needs to be mentioned separately at this time.  I certainly hope nom overtakes it during the month, and will edit the post accordingly when that happens.

[17:54] <colomon> hmmm.... how does one properly spell Masak and Ingy?  Do I remember correctly that they both have umlauts?

[17:55] <PerlJam> ingy döt net

[17:55] <PerlJam> (I don't know if he goes by that moniker "for real" though)

[17:56] <daxim> legal name.

[17:56] <pmichaud> I'm pretty sure it's "for real"

[17:56] <daxim> or "wallet name" is ’nym wars parlance

[17:57] <colomon> ah, I'll just leave the "döt net" part off.

[17:58] <colomon> and it's  Mäsak 

[17:59] <jnthn> Yes, that's correct :)

[18:00] <colomon> jnthn: are there lists somewhere of the 1) new features of nom (versus b) 2) current shortcomings of nom?

[18:00] <pmichaud> ...roadmap?

[18:01] <pmichaud> (is it current?)

[18:01] <colomon> pmichaud: nope

[18:01] <pmichaud> maybe generate a list of rt tickets that have been closed since August?  ;-)

[18:01] <colomon> last updated in august

[18:01] <pmichaud> that would certainly identify things fixed in nom that were broken in b

[18:01] <colomon> errr, august 2010

[18:02] <pmichaud> sorry, I meant NOMMAP

[18:02] <jnthn> We really should update ROADMAP before the next relesae.

[18:02] <jnthn> brb, phone

[18:03] <colomon> ah, NOMMAP.  (why isn't it in the docs directory?)

[18:03] *** dakkar left
[18:03] <pmichaud> it's intended to be temporary-ish, I believe

[18:07] *** kaare_ joined
[18:08] *** mj41 left
[18:08] *** donri joined
[18:08] *** Leo joined
[18:09] <Leo> Who has the most advanced implementation of Perl6 at the moment?

[18:10] <PerlJam> Leo: I do!

[18:10] <PerlJam> Leo: and you can too!  :-)

[18:11] <Leo> How do I get it then?

[18:11] <diakopter> Leo: would you rather use mono/.Net or Parrot

[18:12] <Leo> I'm on a mac, so that would be Parrot, right?

[18:12] <Leo> (Well, not on a mac right now... at work... but will be from home.)

[18:12] *** hundskatt joined
[18:12] <diakopter> mono runs on Mac

[18:14] <Leo> Would rather not have to go the mono route.  That the only way to get Perl6 on the mac?

[18:14] *** sayu left
[18:15] *** ksi joined
[18:16] <PerlJam> Leo: no, the parrot version runs fine (or it did last time I tried it)

[18:17] <colomon> parrot version ran fine yesterday.  :)  (haven't checked today's yet.)

[18:17] <colomon> (on mac, I mean)

[18:18] *** birdwindupbird joined
[18:18] *** birdwindupbird left
[18:19] <PerlJam> colomon: btw, will your advent day 1 post really be about getting perl 6?  so far it just  describes the options.

[18:19] <Leo> Can someone point me to a link or something for the latest parrot Perl6 then?  I am sure I can Google it, but since I am here with all you knowledgable people..  maybe you guys know of a secret implementation or something.  ;-)

[18:20] <diakopter> depends how bleeding edge you want

[18:20] <PerlJam> Leo: http://rakudo.org/how-to-get-rakudo-nom/

[18:20] <Leo> PerlJam:  Huh?  This is a Perl6 forum right?

[18:20] <[Coke]> if you want bleeding edge, and have git/perl/gcc installed, you can just grab the rakudo source from github and build from there, it will pull in everything you need.

[18:20] <PerlJam> Leo: aye.  Rakudo is the name of one of the Perl 6 implementations

[18:20] <japhb> moritz, My apologies.  :256[...] produces an Int.  I forgot that you were trying to get a Buf.  Although (big) Int -> Buf would be a nice operation to have.

[18:20] <Leo> PerlJam:  Thanks!

[18:21] <[Coke]> ah, and that page does what I just said. PerlJam++

[18:21] *** am0c joined
[18:22] <pmichaud> I think we no longer need the "git checkout nom" step

[18:22] <pmichaud> (doesn't hurt to have it, though)

[18:22] *** am0c left
[18:22] <colomon> PerlJam: yeah, once I decided to mention four implementations, explaining how to install each sounded like too much.  But I should say something about the links, which do go to places with instructions.

[18:22] <pmichaud> might also be worth changing "Building the nom compiler ..." to have "Perl 6" in it somewhere.

[18:23] <pmichaud> afk again

[18:26] <Leo> More questions:  How long (estimate) do you feel Perl6 (or Rakudo) will be "production ready"?  Who (or what org) makes the official call when it's finally ready? 

[18:26] <moritz> Leo: the users need to make that call

[18:26] <PerlJam> Leo: there is no "official" call on that and probably never will be.

[18:27] <moritz> Leo: there are applications (critical avionic mission control) where the JVM isn't considered "production ready"

[18:28] <Leo> What percentage of the Perl6 spec does Raukdo implement then?   What's still missing?  (Best answered with another link?)

[18:28] <PerlJam> Leo:  http://perl6.org/compilers/features.html  :-)

[18:28] <Leo> Moritz:  Ha!

[18:28] <lichtkind> will there this year http://perl6advent.wordpress.com/ ?

[18:29] <PerlJam> lichtkind: yes!  Want to write one of them?

[18:29] <lichtkind> am not sure i know enough

[18:29] <lichtkind> yeah maybe

[18:30] <lichtkind> currently busy writing other stuff

[18:30] <lichtkind> i think 1 i can do

[18:31] <muixirt> moritz: i like that notion of "production ready" :-)

[18:32] <PerlJam> lichtkind: what's your email address?

[18:33] <lichtkind> PerlJam: its my cpan ID

[18:33] <muixirt> moritz: and what do they consider "production ready"?

[18:33] <dalek> specs: 3c53f87 | larry++ | S02-bits.pod:

[18:33] <dalek> specs: Start moving Failure outside of Any

[18:33] <dalek> specs: review: https://github.com/perl6/specs/commit/3c53f87ce2

[18:35] *** Vlavv` left
[18:35] <PerlJam> lichtkind: you should get an invite soon (if not already)

[18:35] *** Vlavv` joined
[18:39] <sorear> good * #perl6

[18:39] <phenny> sorear: 08:31Z <moritz> ask sorear if he'd like to write something for p6advent about his Unicode work for niecza

[18:40] * sorear slept through #phasers :|

[18:41] <colomon> sorear: pretty quiet #phasers today anyway

[18:45] <sorear> didn't we have a getting Perl 6 post last year?

[18:45] <sorear> snarkyboojum: still here?

[18:47] <colomon> sorear: we had one two years ago, and the scene is quite a bit different these days.

[18:48] <mikemol> This task looks like it might be interesting in Perl6: http://rosettacode.org/wiki/Paraffins

[18:48] <PerlJam> seems to me it's been "getting rakudo" until now.

[18:49] *** ksi left
[18:49] <PerlJam> mikemol: write an advent post about it?  ;)

[18:49] <mikemol> If only I had time. My tuit count is at an all time low.

[18:50] <PerlJam> seems to be the case for everyone.

[18:50] * mikemol nods

[18:50] <mikemol> As soon as I have time available, I need to start jobhunting.

[18:50] <mikemol> I have a job, but I need a different one.

[18:52] <Util> mikemol: ooh, shiny! #Paraffins

[18:53] *** molaf left
[18:53] *** kaleem left
[18:54] *** REPLeffect joined
[18:55] *** MayDaniel joined
[18:55] *** hundskatt left
[19:01] *** ksi joined
[19:05] * colomon is doing his best to resist starting on the Paraffins thing....

[19:07] <TimToady> I'd've called it "alkanes" myself...

[19:08] <TimToady> especially if we eventually get "alkenes" and "alkynes"

[19:14] <sorear> it's an abstraction anyway, it doesn't handle steric hindrance

[19:15] <sorear> the name has historical significance iirc

[19:22] <lichtkind> PerlJam: got it

[19:24] * TimToady is inclined to think that Failure objects no longer need a .handled state

[19:25] <benabik> If Failure is outside of any would sub epic($x) { $x }; epic fail "test" actually epically fail?

[19:25] <benabik> Oops.

[19:25] <benabik> Wait, no that was "right"

[19:25] <moritz> epic() would never be called

[19:25] <TimToady> no, fail returns

[19:26] <benabik> Awh.

[19:26] <jnthn> It'd pass CHECK though :)

[19:26] <moritz> because the fail() returns the routine that the code is in

[19:26] <TimToady> is why I suggested epic-fail

[19:26] <benabik> Well, I guess it would be an epic failure, just not the kind I was expecting.  :-D

[19:27] <benabik> I guess epic would have to be some kind of macro.  :-D

[19:28] <TimToady> maybe a statement_prefix

[19:32] <lichtkind> PerlJam: now im in

[19:34] <PerlJam> lichtkind: now all you need to do is claim a day and write something :)

[19:36] *** MayDaniel left
[19:36] * [Coke] wonders what the point of skipping a test that is passing for the wrong reasons is.

[19:37] <[Coke]> Surely it's better to let it run and at least then you'll find out if it starts failing.

[19:37] <moritz> I usually skip them

[19:37] <[Coke]> #?rakudo skip 'RT81718 (false positive in nom)'

[19:38] <[Coke]> moritz: how do you know when to unskip them?

[19:38] <[Coke]> you can't just autounfudge them, obviously.

[19:38] <moritz> [Coke]: by running it occasionally, and checking if the error is right

[19:38] <moritz> I know that's LTA

[19:38] *** wormphlegm joined
[19:39] <[Coke]> moritz: er, what error?

[19:39] <moritz> isn't that about an error?

[19:39] <[Coke]> If it's /passing/ ... what error are you checking?

[19:39] <lichtkind> PerlJam: still wresle with the interface

[19:39] <moritz> isn't that a dies_ok?

[19:39] <[Coke]> yes.

[19:40] <[Coke]> it's dying. that's what the test is checking. If that's not sufficient, shouldn't we rewrite the test?

[19:40] <moritz> yes, we should

[19:40] <[Coke]> and then TODO it?

[19:40] <[Coke]> ok. Thanks. ;)

[19:40] <moritz> but checking the error message is also fragile

[19:40] <moritz> which is why I'm working on my exceptions grant :/

[19:41] * [Coke] gives up on autounfudge. too much work.

[19:42] <dalek> nqp: e680f11 | moritz++ | tools/build/PARROT_REVISION:

[19:42] <dalek> nqp: bump parrot revision

[19:42] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e680f11467

[19:43] <dalek> rakudo/nom: 2b31355 | moritz++ | / (2 files):

[19:43] <dalek> rakudo/nom: implement input-line-separator on IO::Socket::INET (not yet tested, but not regressing either)

[19:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2b31355165

[19:46] *** hundskatt joined
[19:52] <[Coke]> Do we have anyway to fudge based on anything other than platform? There's at least one thing that is fudge-skipped with a "fails on windows".

[19:53] <TimToady> that seems like a rathole

[19:53] <moritz> [Coke]: I'd rather not do that

[19:54] <[Coke]> Am i the only one annoyed by skipping passing tests? ;)

[19:55] <[Coke]> especially with all the regressions we just did on purpose, I'd hate for more to slip through accidentally.

[19:55] <moritz> I'm much more annoyed by passing TODOs that clutter the test result report

[19:55] <[Coke]> moritz: yes. I'm suggesting we avoid BOTH of those, and only todo the test when it is known to fail, not skip it when it might fail.

[19:56] *** daxim left
[19:57] <benabik> [Coke]: Are you talking about S16/unlink?  I notice that there's a $iswin32 variable that goes completely unused.

[19:57] <moritz> [Coke]: it's not (yet) a pain point for me

[19:59] <dalek> roast: aeb8722 | coke++ | S02-literals/numeric.t:

[19:59] <dalek> roast: Unfudge passing test (RT #70600)

[19:59] <dalek> roast: review: https://github.com/perl6/roast/commit/aeb872222c

[20:05] <[Coke]> nom: my $a="100.B".."102.B";say $a;say "$a";

[20:05] <p6eval> nom f0ac58: OUTPUT«"100.B".."102.B"␤No applicable candidates found to dispatch to for 'Numeric'. Available candidates are:␤:(Mu, Mu %_)␤␤  in method Numeric at src/gen/CORE.setting:634␤  in sub infix:<==> at src/gen/CORE.setting:2099␤  in sub infix:<==> at src/gen/CORE.setting:2099␤  in…

[20:06] <[Coke]> nom: my $a= +"100.B";

[20:06] <p6eval> nom f0ac58:  ( no output )

[20:06] <[Coke]> nom: my $a= +"100.B"; say $a; say "$a"

[20:06] <p6eval> nom f0ac58: OUTPUT«Failure.new()␤Decimal point must be followed by digit␤  in method Numeric at src/gen/CORE.setting:3131␤  in sub prefix:<+> at src/gen/CORE.setting:1911␤  in block <anon> at /tmp/mcndu7TeBT:1␤  in <anon> at /tmp/mcndu7TeBT:1␤»

[20:11] <[Coke]>  do we have a bot announcing new rakudobugs?

[20:12] *** Chillance left
[20:12] *** wormphlegm left
[20:15] <PerlJam> .oO( How would the bot know about new bugs? )

[20:15] <PerlJam> ;-)

[20:16] <jnthn> Just use masak as a bot. :)

[20:16] *** abercrombie left
[20:17] *** abercrombie joined
[20:18] <moritz> nom: say 0e9999999999999

[20:18] <p6eval> nom f0ac58: OUTPUT«NaN␤»

[20:19] <[Coke]> nom: say 0e9999999999999 == 0

[20:19] <p6eval> nom f0ac58: OUTPUT«Bool::False␤»

[20:19] <[Coke]> Odd. works for me.

[20:19] <[Coke]> wonder if it needs a bignum library that the bot doesn't get.

[20:19] <PerlJam> nom: say 1e9999999999999;

[20:19] <p6eval> nom f0ac58: OUTPUT«Inf␤»

[20:20] <benabik> Maybe the NeM notation isn't using bignums?

[20:20] <PerlJam> nom: say 0e999; say 1e999;

[20:20] <p6eval> nom f0ac58: OUTPUT«NaN␤Inf␤»

[20:20] <benabik> nom: say 1*10^9999999999999

[20:20] <moritz> benabik: it isn't for the exponent, I think

[20:20] <p6eval> nom f0ac58: OUTPUT«one(10, 9999999999999)␤»

[20:20] <moritz> nom: say 0 * 10 ** 9999999999999

[20:20] <benabik> nom: say 1*(10**9999999999999)

[20:20] <p6eval> nom f0ac58: OUTPUT«NaN␤»

[20:20] <p6eval> nom f0ac58: OUTPUT«Inf␤»

[20:20] <benabik> Strange.

[20:20] <moritz> not so strange

[20:21] * [Coke] swears this was working locally.

[20:21] <moritz> benabik: just think about how much storage 10 ** 9999999999999 would need

[20:21] <benabik> …  Details

[20:21] <benabik> I want to shoot myself in the foot, darn it.  ;-)

[20:22] <PerlJam> perl should stringify that number to "Ridiculously large"  :)

[20:22] <colomon> it shouldn't need more than "10 ** 9999999999999".chars bytes, right?  ;)

[20:22] <moritz> I've intentionally mapped bigint ** bigint to Inf

[20:22] <moritz> colomon: :-)

[20:23] <[Coke]> nom: say so 0e9999999999999 == 0

[20:23] <p6eval> nom f0ac58: OUTPUT«Bool::False␤»

[20:23] <moritz> though maybe we should special-case the 0e99999999999 thing

[20:23] <[Coke]> nom: say so 0e999999999999999 == 0

[20:23] <p6eval> nom f0ac58: OUTPUT«Bool::False␤»

[20:23] <[Coke]> that line, which is the one from the ticket, DOES work locally.

[20:23] <benabik> 0e<don't care> = 0 ?

[20:24] <moritz> yes

[20:24] <moritz> [Coke]: woah

[20:24] <PerlJam> sounds sensible to me.

[20:25] *** am0c joined
[20:25] <benabik> nom: (2**65).WHAT.say

[20:25] <p6eval> nom f0ac58: OUTPUT«Int()␤»

[20:25] *** am0c left
[20:26] <PerlJam> .oO( We've secretly replaced Coke's version of Rakudo with one from the future.  Let's see if anyone notices )

[20:26] <[Coke]> Regarding 105004; "nothing else is derived" != "Nothing else CAN be derived from it". 

[20:26] <benabik> nom: my $x = 2**65**0; $x.say; $x.WHAT.say

[20:26] <p6eval> nom f0ac58: OUTPUT«2␤Int()␤»

[20:26] <benabik> nom: my $x = (2**65)**0; $x.say; $x.WHAT.say

[20:26] <p6eval> nom f0ac58: OUTPUT«1␤Int()␤»

[20:28] *** overrosy left
[20:30] *** overrosy joined
[20:36] *** localhost left
[20:37] *** localhost joined
[20:40] <[Coke]> TimToady: should users be able to subclass Whatever if they want?

[20:41] <masak> colomon: both mberends and [Coke] have also expressed interest in hacking on Pugs.

[20:41] <jnthn> nom: class ScrewItIDon'tCare is Whatever { }

[20:41] <p6eval> nom f0ac58:  ( no output )

[20:41] <colomon> masak: it is fair to describe you and ingy as ringleaders, though, right?

[20:42] <[Coke]> masak, colomon: it is SUPER unlikely I will find time for that.

[20:42] <jnthn> [Coke]: Is there a bug in doing so that makes you ask? :)

[20:42] <[Coke]> jnthn: there is a bug just opened that you CAN subclass it.

[20:43] <jnthn> [Coke]: Huh.

[20:43] <jnthn> Why shouldn't you be able to...

[20:43] <jnthn> :)

[20:43] <[Coke]> and the submitter claims this is a bug because the spec says "nothing derives from it"

[20:43] <masak> colomon: sounds like it's a sect, not a restoration project. but beyond that, I guess it's fair :)

[20:43] <[Coke]> so I'm just hoping we can clarify the spec and close the rakudobug.

[20:43] <jnthn> [Coke]: Do they give an actual spec ref?

[20:47] <[Coke]> https://rt.perl.org/rt3/Ticket/Display.html?id=105004

[20:47] <cognominal_> is ingy a european to be diacritical?

[20:47] <[Coke]> which references S04:1292

[20:47] <[Coke]> I think he's just a contrarian.

[20:48] <masak> cognominal_: he's a döt on the 'Net, but not a cog in the machine.

[20:49] <[Coke]> (ingy, not stephane)

[20:49] <cognominal_> I am a cog too :)

[20:49] * masak .oO( cogtrarian )

[20:50] *** carlin joined
[20:51] <dalek> roast: b75d873 | coke++ | S03-operators/range.t:

[20:51] <dalek> roast: fudge RT#105014 for rakudo

[20:51] <dalek> roast: review: https://github.com/perl6/roast/commit/b75d87339a

[20:51] <cognominal_> I am using pir:: and get burnt using such an instruction as last statement of a function. I think it is not the first time. jnthn, should I file a bug?

[20:52] <cognominal_> I am not sure if these internals should be documented or supported.

[20:52] <[Coke]> don't use pir::

[20:52] <[Coke]> are you using it in rakudo code or nqp code?

[20:52] <benabik> [Coke]: Doctor, it hurts when I use pir::?

[20:53] <[Coke]> if rakudo, I'd say don't do that.

[20:53] <[Coke]> ... I'm biased, though, as I'm trying to keep the # of tickets down. ;)

[20:54] <jnthn> cognominal_: Typical users should not be using pir::. The only reason you don't need a pragma to be allowed to use it is because I didn't get around to it.

[20:54] <cognominal_> I am dabbling at undestanding what is necessary for a f:rom<nqp> so I am not sure how to answering coke.

[20:54] <jnthn> cognominal_: If you are using it, then there's a various things you need to know, and many, many ways to make the code-gen go wrong.

[20:55] <cognominal_> jnthn, I have already hit quite a few of them  :)

[20:55] <jnthn> cognominal_: One of them is that if you use a void op as the last thing in a block, you're going to have fun :)

[20:56] <jnthn> Anyway, I don't think we should have tickets about pir::. We could end up with a dozen tickets about it.

[20:56] <cognominal_> that was implicitely  my point when I said [21:51]  <cognominal_> I am not sure if these internals should be documented or supported.

[20:57] <cognominal_> on the other hand I find pir:: code a good way to have a feel about the internals.

[20:57] <jnthn> cognominal_: Documented is fine if it's for the benefit of Rakudo developers.

[20:57] <jnthn> cognominal_: Though really we should be using nqp:: ops these days.

[20:58] <jnthn> cognominal_: But I'd strongly discourage their use out of core.

[20:58] <cognominal_> I agree.

[20:58] *** araujo left
[20:58] *** overrosy left
[21:00] *** overrosy joined
[21:01] <dalek> roast: 1c4c5f0 | coke++ | S06-other/main-usage.t:

[21:01] <dalek> roast: fudge RT#105018 for rakudo

[21:01] <dalek> roast: review: https://github.com/perl6/roast/commit/1c4c5f0598

[21:02] *** ksi left
[21:02] *** ksi joined
[21:02] *** araujo joined
[21:02] *** araujo left
[21:02] *** araujo joined
[21:07] <[Coke]> jnthn: FYI, I'm going to start giving tickets to things that are marked "nom regression"

[21:07] <jnthn> [Coke]: ok, wfm.

[21:07] <[Coke]> (any new ones I'm finding in "make spectest" are getting tickets outright.)

[21:09] <lichtkind> PerlJam: i still  dont grok the system but i think writing something would be good anyhow :)

[21:10] *** bluescreen10 left
[21:10] *** y3llow left
[21:10] *** y3llow joined
[21:18] *** overrosy left
[21:20] *** overrosy joined
[21:39] *** dorlamm joined
[21:53] *** wolfman2000 joined
[21:53] *** alester joined
[21:53] *** prammer left
[21:58] *** ethndbst left
[21:59] <masak> [Coke]++ # RT-ifying nom regressions

[22:18] *** kaare_ left
[22:19] *** dorlamm left
[22:33] *** ksi left
[22:37] <sorear> good * #perl6

[22:40] *** prammer joined
[22:41] *** whiteknight joined
[22:41] *** whiteknight is now known as Guest75643

[22:42] <masak> good night, #perl6

[22:43] <sorear> bye

[22:43] <colomon> o/

[22:43] *** overrosy left
[22:45] *** overrosy joined
[22:46] *** lichtkind left
[22:52] *** overrosy left
[22:54] *** overrosy joined
[23:04] *** benabik left
[23:04] *** muixirt left
[23:15] *** overrosy left
[23:16] *** vmspb joined
[23:17] *** overrosy joined
[23:18] *** awwaiid left
[23:24] *** overrosy left
[23:24] *** buubot_backup left
[23:25] *** buubot_backup joined
[23:25] *** huf left
[23:26] *** overrosy joined
[23:27] *** huf joined
[23:32] *** awwaiid joined
[23:34] *** envi_ left
[23:34] *** cooper joined
[23:35] *** wolfman2000 left
[23:51] <vmspb> Hi, sorear.  Niecza does not have built-in Readline?

[23:51] <vmspb> I used on Ubuntu an external Readline shell - RLFE. It looks good

[23:51] <vmspb> $ rlfe mono run/Niecza.exe  or

[23:51] <vmspb> $ rlfe -h ~/.perl6_history mono run/Niecza.exe

[23:58] <sorear> vmspb: I use rlwrap with the niecza repl personally

