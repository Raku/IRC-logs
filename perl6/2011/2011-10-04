[00:03] *** Chillance left
[00:06] *** S11001001 left
[00:14] *** BinGOs left
[00:14] *** BinGOs joined
[00:15] *** donri joined
[00:17] *** mikemol left
[00:18] *** mikemol joined
[00:27] *** geekosaur left
[00:27] *** allbery_b joined
[00:29] *** localhost left
[00:31] *** localhost joined
[00:42] *** tokuhiro_ left
[00:43] <dalek> niecza/serialize: 900e616 | sorear++ | / (4 files):

[00:43] <dalek> niecza/serialize: Implement blasts, gather, default values and parameter types, statement for

[00:43] <dalek> niecza/serialize: review: https://github.com/sorear/niecza/commit/900e616cda

[00:46] *** mikemol left
[00:48] *** mikemol joined
[00:54] *** whiteknight left
[01:10] *** mikemol left
[01:10] *** jlaire left
[01:10] *** espadrine left
[01:10] *** itz left
[01:10] *** skangas left
[01:10] *** ribasushi_ left
[01:10] *** kst` left
[01:10] *** szabgab left
[01:10] *** m6locks left
[01:10] *** sftp left
[01:10] *** pmichaud left
[01:10] *** cotto left
[01:10] *** nebuchadnezzar left
[01:10] *** jevin left
[01:10] *** shachaf left
[01:10] *** zostay_ left
[01:10] *** diakopter left
[01:10] *** risou_awy left
[01:10] *** slavik1 left
[01:10] *** domidumont left
[01:10] *** snarkyboojum left
[01:10] *** wooden left
[01:10] *** ingy left
[01:10] *** sivoais left
[01:10] *** Patterner left
[01:10] *** y3llow left
[01:10] *** f00li5h left
[01:10] *** z-b left
[01:10] *** ashleydev left
[01:10] *** jrockway left
[01:10] *** LoRe left
[01:10] *** eiro left
[01:10] *** nsh- left
[01:10] *** mls_ left
[01:10] *** mux left
[01:10] *** flussence left
[01:10] *** pjcj left
[01:10] *** alvis left
[01:10] *** pothos left
[01:10] *** Exodist left
[01:10] *** arthur-_ left
[01:10] *** szbalint left
[01:10] *** Gothmog_ left
[01:10] *** BLZbubba left
[01:10] *** awwaiid left
[01:10] *** Lorn left
[01:10] *** fhelmberger_ left
[01:10] *** mkramer1 left
[01:10] *** mattp_ left
[01:10] *** buubot_backup left
[01:10] *** plobsing_ left
[01:10] *** p6eval left
[01:10] *** Maddingue left
[01:10] *** localhost left
[01:10] *** envi_ left
[01:10] *** packetknife left
[01:10] *** carlin left
[01:10] *** Bzek left
[01:10] *** mberends left
[01:10] *** _ilbot left
[01:10] *** jdhore left
[01:10] *** tty234_ left
[01:10] *** spacebat_ left
[01:10] *** imarcusthis left
[01:10] *** arnsholt left
[01:10] *** jesk left
[01:10] *** lumi_ left
[01:10] *** Helios left
[01:10] *** pochi left
[01:10] *** preflex left
[01:10] *** lestrrat left
[01:10] *** [Coke] left
[01:10] *** ruoso left
[01:10] *** PZt left
[01:10] *** ponbiki left
[01:10] *** japhb left
[01:10] *** Grrrr left
[01:10] *** yath left
[01:10] *** apejens left
[01:10] *** breinbaas left
[01:10] *** renormalist left
[01:10] *** moritz left
[01:10] *** Yappoko___ left
[01:10] *** hillu left
[01:11] *** HarryS joined
[01:13] *** mikemol joined
[01:13] *** localhost joined
[01:13] *** envi_ joined
[01:13] *** packetknife joined
[01:13] *** jlaire joined
[01:13] *** ingy joined
[01:13] *** mkramer1 joined
[01:13] *** sivoais joined
[01:13] *** carlin joined
[01:13] *** preflex joined
[01:13] *** Bzek joined
[01:13] *** espadrine joined
[01:13] *** sftp joined
[01:13] *** mberends joined
[01:13] *** snarkyboojum joined
[01:13] *** Patterner joined
[01:13] *** itz joined
[01:13] *** pmichaud joined
[01:13] *** flussence joined
[01:13] *** pjcj joined
[01:13] *** alvis joined
[01:13] *** cotto joined
[01:13] *** mattp_ joined
[01:13] *** y3llow joined
[01:13] *** pothos joined
[01:13] *** Exodist joined
[01:13] *** buubot_backup joined
[01:13] *** skangas joined
[01:13] *** f00li5h joined
[01:13] *** arthur-_ joined
[01:13] *** nebuchadnezzar joined
[01:13] *** jevin joined
[01:13] *** lestrrat joined
[01:13] *** _ilbot joined
[01:13] *** jdhore joined
[01:13] *** shachaf joined
[01:13] *** tty234_ joined
[01:13] *** z-b joined
[01:13] *** spacebat_ joined
[01:13] *** ribasushi_ joined
[01:13] *** plobsing_ joined
[01:13] *** zostay_ joined
[01:13] *** [Coke] joined
[01:13] *** szbalint joined
[01:13] *** diakopter joined
[01:13] *** ruoso joined
[01:13] *** risou_awy joined
[01:13] *** m6locks joined
[01:13] *** szabgab joined
[01:13] *** kst` joined
[01:13] *** slavik1 joined
[01:13] *** PZt joined
[01:13] *** ponbiki joined
[01:13] *** ashleydev joined
[01:13] *** japhb joined
[01:13] *** imarcusthis joined
[01:13] *** BLZbubba joined
[01:13] *** arnsholt joined
[01:13] *** jesk joined
[01:13] *** Gothmog_ joined
[01:13] *** jrockway joined
[01:13] *** domidumont joined
[01:13] *** p6eval joined
[01:13] *** Maddingue joined
[01:13] *** wooden joined
[01:13] *** lumi_ joined
[01:13] *** awwaiid joined
[01:13] *** Helios joined
[01:13] *** Lorn joined
[01:13] *** fhelmberger_ joined
[01:13] *** pochi joined
[01:13] *** mux joined
[01:13] *** mls_ joined
[01:13] *** nsh- joined
[01:13] *** eiro joined
[01:13] *** LoRe joined
[01:13] *** hillu joined
[01:13] *** Yappoko___ joined
[01:13] *** moritz joined
[01:13] *** renormalist joined
[01:13] *** breinbaas joined
[01:13] *** apejens joined
[01:13] *** yath joined
[01:13] *** Grrrr joined
[01:13] *** hubbard.freenode.net sets mode: +v p6eval

[01:13] *** donri left
[01:13] *** donri_ joined
[01:15] *** donri_ left
[01:22] *** wolfman2000 joined
[01:24] <colomon> sorear: ping?

[01:35] *** Sarten-X left
[01:41] <colomon> https://gist.github.com/1260722 is what I get if I add the line

[01:41] <colomon>             thandlers["twriter_puts"] = Methody(null, typeof(TextWriter).GetMethod("Write"));

[01:43] *** Sarten-X joined
[01:43] <colomon> seems like "Ambiguous matching in method resolution" is the key bit, maybe? lots of different versions of Write

[01:45] <colomon> Oooo, adding , new Type[] { Tokens.String }  seems to resolve it?

[02:00] <colomon> hmmm, now Unhandled Exception: System.Exception: System.String not subtype of System.IO.TextWriter:Void Write(System.String)

[02:00] <diakopter> interesting

[02:00] <diakopter> what's your input there

[02:00] <diakopter> if you gist it, p6eval can run it

[02:01] <colomon> Q:CgOp { (twriter_puts (obj_getstr {Niecza::gistcat(|$c)}) (unbox twriter (@ {self}))) };

[02:07] <colomon> it's low-level niecza stuff, probably cannot be evaluated with p6eval

[02:08] *** packetknife left
[02:09] <sorear> colomon: pong

[02:09] <colomon> \o/

[02:09] <colomon> I've been trying to get the TextWriter working, and stumbling.  (see recent backlog)

[02:11] <sorear> colomon: you need the arguments in the other order.  In CLR as in P6, invocant is a hidden first argument.

[02:11] <colomon> I tried it that way first

[02:12] <colomon> Unhandled Exception: System.ArgumentException: Value does not fall within the expected range.

[02:14] <colomon> https://gist.github.com/1260760 is my full current diff

[02:31] <sorear> colomon: you need a (rnull in there

[02:31] <colomon> around the twritter_plus?

[02:31] <sorear> puts

[02:31] <sorear> yes

[02:31] * sorear thinks colomon is trying to type twitter

[02:32] <colomon> definitely typing too fast, for sure

[02:32] <colomon> oooo, compiled!

[02:32] *** ggoebel left
[02:32] <sorear> every CgOp block has to return var

[02:34] <colomon> hmmm, still nothing written

[02:34] <colomon> niecza> my $file = open "soltest", :w; $file.say:  "yee-ha!";

[02:34] <sorear> likely needs a close

[02:35] <colomon> yeah, was just wondering about that

[02:37] <diakopter> should TextWriter::say/print be marked unsafe?

[02:38] <colomon> niecza> my $file = open "soltest", :w; $file.say:  "yee-ha!"; $file.close

[02:38] <colomon> Bool::True

[02:38] <colomon> Wynne:niecza colomon$ more soltest 

[02:38] <colomon> TextWriter.new(...)yee-ha!

[02:38] <colomon> errr.... not sure how I got TextWriter.new(...) in my output

[02:39] <benabik> gifting the invocant?

[02:39] <benabik> *gist

[02:43] <sorear> yes

[02:43] <sorear> (|$c) includes the invocant in the capture

[02:43] <colomon> oh!

[02:44] <colomon> ummm....

[02:45] <colomon> suggestions?

[02:46] <diakopter> |@c then shift the invocant?

[02:46] <sorear> shift doesn't work on parcels

[02:46] <sorear> the least bad way would probably be to use *@c for now

[02:47] <colomon> can I then pass that to gistcat?

[02:47] <colomon> that = @c

[02:47] <sorear> not sure

[02:48] <sorear> probably not

[02:48] <sorear> but you don't really need gistcat for that

[02:48] <colomon> well, it works to the first approximation

[02:48] <colomon> Wynne:niecza colomon$ more soltest 

[02:48] <colomon> yee-ha!

[02:48] <sorear> Wynne!

[02:48] * sorear imagines that's pronounced "win"

[02:49] <colomon> it is.  named for Irish fiddler/tunesmith Martin Wynne

[02:51] <colomon> all the machines in the house are named after traditional musicians.  :)

[02:53] <colomon> my guess is gistcat probably does the wrong thing when passed an array like that?  (from the perspective of what we want it to do)

[02:53] <sorear> yes

[02:53] <sorear> I guess you could flatten it and it would mostly work

[02:56] <colomon> niecza: say:  "yee-ha!", 1..5

[02:56] <p6eval> niecza v10-36-g241a2d8:  ( no output )

[02:56] <colomon> niecza: say "yee-ha!", 1..5

[02:56] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´yee-ha!1..5‚ê§¬ª

[02:56] <colomon> okay, that much works

[02:57] <benabik> niecza: say: say "test"

[02:57] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument at /tmp/6zREWKx9r0 line 1:‚ê§------> [32msay: say[33m‚èè[31m "test"[0m‚ê§‚ê§Two terms in a row at /tmp/6zREWKx9r0 ‚Ä¶

[02:58] <diakopter> hunh; why isn't that a label

[02:58] <sorear> I think it's being parsed as indirect object syntax

[02:58] <sorear> in at least some cases

[02:58] <diakopter> stdbug?

[02:58] <benabik> As whatnow?

[02:58] <sorear> shrug

[02:59] <sorear> niecza: say (perl: [1..5])

[02:59] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´1 2 3 4 5‚ê§¬ª

[02:59] <sorear> that, benabik

[02:59] <sorear> lets you put the invocant after the method name

[03:00] * diakopter sadface for labels

[03:00] <benabik> But shouldn't it be `method $obj: $arg` not `method: $obj` ?

[03:01] <sorear> : parses like ,

[03:01] <sorear> erm, wait

[03:01] <sorear> my example WAS using a label

[03:02] <sorear> niecza: say (perl [1..5]:)

[03:02] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Invocant handling is NYI at /tmp/T2Og70kO4l line 1:‚ê§------> [32msay (perl [1..5]:[33m‚èè[31m)[0m‚ê§‚ê§‚ê§Unhandled Exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 766 (CORE die @ 2) ‚ê§  at /home/p6eva‚Ä¶

[03:02] <sorear> hah

[03:02] <colomon> my example was wrong, I think

[03:02] <sorear> colomon: I'm pussling over 'say: say "test"'

[03:02] <sorear> OH!

[03:03] <benabik> share with the class.  ;-)

[03:03] <sorear> say: say "test" - say: introduces the 'say' symbol, so the second mention of 'say' is treated as a 0-ary term

[03:03] <benabik> ohhhh...

[03:03] <benabik> niecza: foo: say 'bar'

[03:04] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´bar‚ê§¬ª

[03:04] <sorear> niecza: foo: say 'bar'; goto foo;

[03:04] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´(timeout)bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚ê§bar‚Ä¶

[03:04] <benabik> niecza: foo: say foo

[03:04] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´Label.new(...)‚ê§¬ª

[03:04] <benabik> Perhaps there should be a "redeclaration of say" message?

[03:05] <benabik> test labels against already defined bare words (subs, consts, etc)

[03:06] <benabik> std: say: say 'test'

[03:06] <p6eval> std 20ae3bd: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument at /tmp/9zzV_HQaF3 line 1:‚ê§------> [32msay: say[33m‚èè[31m 'test'[0m‚ê§Two terms in a row at /tmp/9zzV_HQaF3 line 1:‚ê§-----‚Ä¶

[03:06] <colomon> anyway, I seem to have this working, modulo difficulties with the first points of gisting and say

[03:06] <benabik> I guess the redeclaration of say makes it parse say as a term, which triggers the obs message.  Strange.

[03:07] <colomon> sorear: want a patch for this?

[03:07] <benabik> And then the TTIAR from the string.

[03:07] * benabik goes back to studying.

[03:08] <sorear> colomon: yes

[03:08] <sorear> colomon: you can also strike open :w from docs/TODO

[03:09] <colomon> it's just TODO on my copy?

[03:09] <colomon> and it doesn't say anything about :w

[03:10] <sorear> oh hmm.

[03:10] <sorear> well, still good

[03:13] <colomon> okay, why isn't git format-patch working for me?

[03:15] <benabik> colomon: git format-patch creates a patch per commit after the named commit.  git format-patch HEAD likely doesn't do what you expect.  Try format-patch origin/master or format-patch -1

[03:16] <colomon> origin/master for the win!  I tried master earlier, but no luck.  benabik++

[03:18] <colomon> now how do I roll back to the public head?

[03:19] <benabik> generally w/ reset

[03:21] <colomon> git reset --hard HEAD^     or something like that

[03:21] <benabik> I generally use origin/master

[03:21] <benabik> Or @{u}

[03:21] <benabik> That's a fun one.

[03:21] <colomon> get reset origin/master

[03:21] <colomon> ?

[03:21] <sorear> git reset --hard origin/master

[03:22] <benabik> Yes.  --hard to also reset files

[03:22] <colomon> sorear++ benabik++

[03:30] *** am0c left
[03:31] *** am0c joined
[03:32] *** aloha left
[03:32] *** aloha joined
[03:34] *** donri joined
[03:37] <sorear> niecza: enum Bob ( only => 0, proto => 4, multi => 8 ); say +Bob("multi")

[03:37] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´8‚ê§¬ª

[03:40] <sorear> niecza: enum Sam::Bob ( only => 0, proto => 4, multi => 8 ); say +::Sam::multi

[03:40] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´0‚ê§¬ª

[03:42] *** araujo left
[03:47] <TimToady> actually, diakopter++ for finding the loop {} bug

[04:19] *** ashleydev left
[04:21] <japhb> nom: Str.new().Numeric

[04:21] <p6eval> nom 7823a4: OUTPUT¬´(signal SEGV)¬ª

[04:22] <japhb> o/~ And we'll have fun, fun, fun 'til Daddy takes the T-bird away ... o/~

[04:24] <japhb> Golfing it a bit:

[04:24] <japhb> nom: +Str.new

[04:24] <p6eval> nom 7823a4: OUTPUT¬´(signal SEGV)¬ª

[04:25] <japhb> That's got to be close to the shortest Perl 6 code that will cause a segfault in current Nom ....

[04:26] <tadzik> good morning

[04:26] <moritz> Str.new probably doesn't initialize $!value or so

[04:26] <japhb> o/

[04:26] <TimToady> nom: +''.new

[04:26] <p6eval> nom 7823a4: OUTPUT¬´(signal SEGV)¬ª

[04:26] <japhb> ooh

[04:26] <TimToady> beatchya

[04:26] <moritz> nom: ~1.new

[04:26] <p6eval> nom 7823a4:  ( no output )

[04:27] <japhb> TimToady++ # 7 chars, current champeen.

[04:32] <sorear> nice, even shorter than pir::hcf

[04:32] <moritz> well, p6 is much more expressive than PIR after all :-)

[04:33] <TimToady> nom: X.new

[04:33] <p6eval> nom 7823a4: OUTPUT¬´Null PMC access in elements()‚ê§  in method bless at src/gen/CORE.setting:529‚ê§  in method new at src/gen/CORE.setting:516‚ê§  in block <anon> at /tmp/pPePkYADmA:1‚ê§  in <anon> at /tmp/pPePkYADmA:1‚ê§‚ê§¬ª

[04:34] <japhb> Psssh.  Merely an NPMCA, doesn't count, clearly.  :-)

[04:49] <japhb> Gah.  In nom, how do I parse a string using a rule from Perl6::Grammar?  My guesses are failing, and there's precious little to cargo cult ...

[04:50] <japhb> Simply doing 'Perl6::Grammar.parse($foo, :rule('bar')) is not working

[05:05] * japhb giving up on it for the night, I think.

[05:06] <japhb> I'd really rather not replicate a chunk of the existing grammar in my own code, but I can't see a currently working way around it.  :-(

[05:07] <tadzik> what do you mean "not working"?

[05:07] <tadzik> as in "never matches, whatever you do"? You may want to try <?DEBUG(1)> on that

[05:08] <tadzik> maybe it's just :rule NYI

[05:08] <tadzik> no, it seems implemented

[05:09] <moritz> in nqp grammars?

[05:09] <tadzik> dunno about nqp

[05:10] <tadzik> japhb | Gah.  In nom

[05:10] <moritz> well, Perl6::Grammar is written in nqp

[05:11] <moritz> nom: Perl6::Grammar.parse('1', :rule<numish>)

[05:11] <p6eval> nom 7823a4: OUTPUT¬´Could not find symbol 'Perl6::&Grammar'‚ê§  in sub die at src/gen/CORE.setting:416‚ê§  in block <anon> at /tmp/6pzvW7Ba1t:1‚ê§  in <anon> at /tmp/6pzvW7Ba1t:1‚ê§‚ê§¬ª

[05:11] <moritz> nom: use Perl6::Grammar; Perl6::Grammar.parse('1', :rule<numish>)

[05:11] <p6eval> nom 7823a4: OUTPUT¬´===SORRY!===‚ê§Could not find Perl6::Grammar in any of: lib, /home/p6eval/.perl6/lib, /home/p6eval/nom-inst2/lib/parrot/3.8.0-devel/languages/perl6/lib, .‚ê§¬ª

[05:11] <moritz> how do you even use it?

[05:12] <sorear> it's probably not realistically possible

[05:12] <sorear> because you need toset up $*ST and friends

[05:12] <japhb> ... and therein lies the rub, I guess.

[05:12] *** GlitchMr joined
[05:19] *** sftp left
[05:25] <tadzik> oh, Perl6::Grammar, my bad

[05:26] <tadzik> I don't think you can use Perl6::Grammar in Perl 6 code

[05:26] <tadzik> that's why a pod-parser-as-a-module is not implementued

[05:27] <japhb> Yeah, I'm sadly gathering that.

[05:28] <japhb> I think what I may do is just paste in the relevant chunk of STD, and anywhere my code and the rest of Rakudo disagree about the parsing, I'll just file it as a rakudobug.  ;-)

[05:28] *** araujo joined
[05:28] *** araujo left
[05:28] *** araujo joined
[05:30] *** Trashlord left
[05:31] <sorear> japhb: I doubt Rakudo can run much of the grammar.

[05:31] *** Trashlord joined
[05:32] <japhb> sorear, I'm just looking for canonical parsing of values

[05:34] <moritz> "just"

[05:34] <moritz> values include strings, and strings include interpolation

[05:34] <japhb> moritz, yes, I had a bit of a smirk when I said that.

[05:34] <moritz> so you need a symbol table to look up the variables that are being interpolated

[05:35] <japhb> But actually, I meant in particular things other than strings ... or rather,

[05:35] <japhb> being able to detect anything that is a simple value that is not a string and treat it specially, while just leaving the remainder as the strings they started as.

[05:35] *** kaleem joined
[05:35] <japhb> (I'm trying to implement val() correctly-ish.)

[05:37] *** SHODAN joined
[05:37] <japhb> I've been slowly iterating my own hand-grown rules and then realized I really wasn't far off just reimplementing a bunch of what was already there, and that is of course just an excellent place for obscure bugs in edge cases where multiple grammars disagree ....

[05:38] <japhb> For example, my rules only allowed lowercase 'e' in exponential notation, but Rakudo's grammar allows uppercase as well.

[05:42] *** GlitchMr42 joined
[05:43] *** GlitchMr_42 joined
[05:44] *** wtw joined
[05:46] *** Trashlord left
[05:47] *** GlitchMr left
[05:47] *** GlitchMr42 left
[05:47] *** daniel-s joined
[05:48] *** GlitchMr_42 is now known as GlitchMr

[05:50] *** Trashlord joined
[05:56] <moritz> japhb: I think val() needs to use the grammar, but with some special hooks that aren't in place yet

[05:58] <japhb> moritz, for example?

[05:59] <moritz> japhb: well, for one we'd need a way to parse string literals without allowing interpolation, even if they are delimited with double quotes

[06:00] *** athomason joined
[06:00] <japhb> Ah, I think I see where you're going with that.

[06:00] <moritz> japhb: and then stuff like lists of literals only

[06:00] <japhb> right

[06:01] <japhb> What I really wanted to do was just inherit from the main grammar, and add a few extra rules that did things like 'list of literals'

[06:01] <sorear> moritz: is "\n" interpolatin?

[06:01] <moritz> japhb: how is MAIN coming along, btw?

[06:02] <moritz> sorear: no

[06:02] <sorear> how about '\n\qq[\n]' ?

[06:03] <sorear> hmm, I wonder how niecza will handle this one

[06:03] <sorear> niecza: say 'abc\qw[  a   b   c ]def'

[06:03] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´abca b cdef‚ê§¬ª

[06:03] <japhb> moritz, Oh, decently I'd say -- certainly I think the current state in my tree is better than nom HEAD.  But I think it can be enough better still that I wanted to iterate on it a bit more.

[06:03] <moritz> sorear: we just need to disallow :s :a :h :f :c adverbs to Q

[06:03] <sorear> and :x :)

[06:04] <moritz> well :-)

[06:05] <moritz> japhb: patch early, patch often

[06:05] * japhb shrugs

[06:06] <japhb> Well, fair enough.

[06:06] <sorear> huh.

[06:06] <japhb> Do you want a bazillion small patches, or one big patch of the current state?

[06:06] <moritz> japhb: one big patch

[06:07] <japhb> Okie.  Mailed where?

[06:07] <moritz> japhb: [email@hidden.address]
[06:07] <japhb> with [PATCH] in the subject, I assume?

[06:07] <moritz> japhb: yes please

[06:08] <japhb> Roger that.

[06:08] *** Trashlord left
[06:08] <moritz> nom: my $h = (1, 2); say %$h.perl

[06:08] <p6eval> nom 7823a4: OUTPUT¬´("1" => 2).hash‚ê§¬ª

[06:09] <japhb> Hmmm, should I include the # TODO block of comments at the top?

[06:10] <moritz> japhb: yes

[06:11] *** Trashlord joined
[06:14] <moritz> nom: die "foo"

[06:14] <p6eval> nom 7823a4: OUTPUT¬´foo‚ê§  in sub die at src/gen/CORE.setting:416‚ê§  in block <anon> at /tmp/olaySx9axg:1‚ê§  in <anon> at /tmp/olaySx9axg:1‚ê§‚ê§¬ª

[06:19] *** athomason left
[06:19] *** [Coke] left
[06:20] *** athomason joined
[06:20] *** [Coke] joined
[06:22] *** Trashlord left
[06:23] <japhb> moritz, sent ... though could be delayed by mail client trying to absorb huge pile of unhappy server spam from $day_job

[06:24] *** masak joined
[06:24] <masak> good morning, channel.

[06:24] <japhb> o/

[06:25] *** Trashlord joined
[06:25] <sorear> hello. masak.

[06:26] <sorear> /serialize is now parsing 26% of the setting

[06:26] <sorear> I may have to leave it for a bit though

[06:31] *** quester_ joined
[06:34] *** athomason left
[06:35] *** athomason_ joined
[06:36] *** c1sung_ joined
[06:38] * sorear sleep

[06:55] <masak> serialization in Niecza. that sounds exciting. I guess that will mean better support for things like BEGIN, and even macros!

[07:06] *** baest joined
[07:11] *** GlitchMr left
[07:24] *** quester_ left
[07:28] *** am0c left
[07:35] *** packetknife joined
[07:43] *** wamba joined
[07:45] *** mishin joined
[07:45] *** mishin_ joined
[07:57] *** mj41 joined
[08:00] *** mishin left
[08:00] *** mishin_ left
[08:01] *** mishin joined
[08:03] *** huf left
[08:04] *** baest left
[08:04] *** mishin left
[08:15] *** envi_ left
[08:15] *** envi_ joined
[08:18] *** dukeleto left
[08:22] *** gpk joined
[08:23] <gpk> hello

[08:23] <moritz> hello gpk

[08:23] <gpk> I need ur help

[08:24] <gpk> i ma developing an application using cgi perl & html

[08:24] <moritz> perl 5 or perl 6?

[08:24] <gpk> i want to login using perl & html in unix server

[08:24] <gpk> perl6

[08:25] <gpk> what code to write in perl so that my webpage should be connected to unix or solaris

[08:26] <moritz> so you want a remote shell over CGI, right?

[08:26] <gpk> yes

[08:27] <gpk> i put login name & pass in webpage & perl will connecte to unix server based on login name & pass

[08:27] <moritz> so, what part do you need help with?

[08:27] <gpk> coding part of perl

[08:27] <moritz> I thought so

[08:27] <gpk> to connect to unix server & check user name & pass

[08:28] <flussence> that'll need either something involving PAM, or a SSH connection.

[08:29] <gpk> how to use it

[08:29] *** huf joined
[08:29] <moritz> I don't think anybody has written PAM bindings for Perl 6

[08:29] *** masak left
[08:29] <gpk> i can use perl 5 also

[08:29] <moritz> but perl 5 is off-topic here

[08:29] <moritz> so we only consider Perl 6 solutions

[08:29] <gpk> okkk

[08:30] <moritz> so ssh is probably the way to go

[08:30] <gpk> okkk

[08:30] <gpk> how to use it i don't know

[08:30] <moritz> there's lots about it on the internet; try google.com to find it

[08:30] <gpk> okkk

[08:34] *** ponbiki left
[08:34] *** huf left
[08:35] *** huf joined
[08:44] *** kfo joined
[08:47] *** kfo_ left
[08:50] *** lateau_ joined
[09:02] *** daxim joined
[09:02] *** dakkar joined
[09:02] *** masak joined
[09:07] *** lateau_ left
[09:07] *** wamba left
[09:09] <masak> rakudo: sub ok($n) { "o" ~ "k" x $n }; say ok(3)

[09:09] <p6eval> rakudo 834d9d: OUTPUT¬´okkk‚ê§¬ª

[09:09] <moritz> masak++

[09:10] <masak> it's not just frivolous. we've discovered a bunch of bugs by playing around like this :)

[09:10] <moritz> I know :-)

[09:10] <masak> maybe that phase is over, though.

[09:11] <flussence> not quite, I broke nom last night!

[09:12] *** baest joined
[09:12] <flussence> nom: say ('aabaa' ~~ /\N+ b/).perl

[09:12] <p6eval> nom 834d9d: OUTPUT¬´Match.perl(orig => "aabaa", from => 0, to => 3, ast => Mu, list => ().list, hash => EnumMap.new())‚ê§¬ª

[09:12] *** packetknife left
[09:12] <flussence> or I did, somehow

[09:12] * moritz doesn't see the brokenness offhand

[09:13] <moritz> but somebody discovered that 'foobar' x 1.5  hung

[09:13] <flussence> nom: say ('aaaaabaaaaa' ~~ /^(<[a..z]>*) b/).perl;

[09:13] <p6eval> nom 834d9d: OUTPUT¬´Match.perl(orig => "aaaaabaaaaa", from => 11, to => -3, ast => Mu, list => ().list, hash => EnumMap.new())‚ê§¬ª

[09:13] <masak> huh!

[09:13] <flussence> it seems to not work with anything resembling a character class

[09:13] <masak> that's... wrong.

[09:13] <flussence> nom: say ('aaaaabaaaaa' ~~ /^(\N*) b/).perl;

[09:14] <p6eval> nom 834d9d: OUTPUT¬´Match.perl(orig => "aaaaabaaaaa", from => 11, to => -3, ast => Mu, list => ().list, hash => EnumMap.new())‚ê§¬ª

[09:14] <flussence> nom: say ('aaaaabaaaaa' ~~ /(\N*) b/).perl;

[09:14] <moritz> flussence: it seems that the combincation of * and captures somehow breaks

[09:14] <p6eval> nom 834d9d: OUTPUT¬´Match.perl(orig => "aaaaabaaaaa", from => 11, to => -3, ast => Mu, list => ().list, hash => EnumMap.new())‚ê§¬ª

[09:14] <flussence> hm

[09:14] <masak> moritz: is there an RT ticket for that yet?

[09:14] <moritz> nom: say so ('aaaaabaaaaa' ~~ /^(\N*) b/).perl;

[09:14] <p6eval> nom 834d9d: OUTPUT¬´Bool::True‚ê§¬ª

[09:14] <moritz> nom: say so ('aaaaabaaaaa' ~~ /^(\N*) b/)

[09:14] <p6eval> nom 834d9d: OUTPUT¬´Bool::False‚ê§¬ª

[09:14] <moritz> masak: I'm not aware of any

[09:14] <moritz> aloha: seen pmichaud 

[09:14] <aloha> moritz: pmichaud was last seen in #perl6 8 hours 1 mins ago joining the channel.

[09:15] * masak submits rakudobug

[09:16] *** replore left
[09:26] *** packetknife joined
[09:30] *** jferrero joined
[09:38] *** packetknife left
[09:43] *** packetknife joined
[09:59] *** Bzek left
[10:01] <eiro> is there a way to use perl5 modules inside perl6 scripts ? 

[10:04] <moritz> eiro: old rakudo had that possiblity (though limited) with blizkost

[10:04] <moritz> eiro: and pmurias is working on that facility for niecza

[10:05] <eiro> ok thanks 

[10:05] <mberends> eiro: yes, in Niecza right now: https://github.com/sorear/niecza/blob/master/examples/perl5.pl

[10:06] <eiro> yeah but i installed rakudo :)

[10:07] <eiro> isn't rakudo the reference implementation ? 

[10:07] <moritz> no

[10:07] <moritz> there's nothing that makes rakudo more 'official' or 'reference' than any other compiler

[10:08] <eiro> mberends, do you attend to belgian perl workshop ? (oct 15) 

[10:08] <eiro> moritz, ok so

[10:09] <mberends> eiro: unfortunately no, I shall be in Slovenia around that date

[10:09] <eiro> mberends, maybe next time 

[10:09] <eiro> anyone else ? a perl6 hacker at Brusells ?

[10:10] <eiro> oh ... but i hope we'll be a lot to join the perl dev room at fosdem

[10:10] <ingy> it's Brussel

[10:10] <eiro> ok 

[10:10] <ingy> if you are french

[10:11] <ingy> it's an acmeist city ;)

[10:11] <moritz> isn't there are spelling like 'Bruxelles' or so?

[10:11] <eiro> ingy, in french it's Bruxelles :)

[10:11] <eiro> yep

[10:12] <ingy> oh, I meant ...

[10:12] <eiro> i don't know why i thought it was Brusells in english 

[10:12] <ingy> I forget

[10:12] <eiro> :)

[10:12] <eiro> any ready to use niezca build somewhere ? 

[10:12] <ingy> But it is Brussel from the direction I drove into it on Friday

[10:12] <ingy> eiro: Pugs

[10:13] <ingy> can run all cpan modules

[10:13] <masak> niecza: say "eiro: here!"

[10:13] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´eiro: here!‚ê§¬ª

[10:13] <eiro> haha

[10:13] <ingy> masak: you are bringing pugs back to life, yeah?

[10:14] <eiro> ???

[10:14] <eiro> really ? 

[10:14] * ingy needs to go visit masak 

[10:14] <ingy> eiro: I think he was talking about it

[10:15] <ingy> a couple days ago

[10:15] <eiro> there is also https://github.com/masak/yapsi :)

[10:15] <eiro> too many things in perl6 floor :)

[10:16] <eiro> goto &eat 

[10:16] <eiro> cya all 

[10:16] <moritz> does yapsi work on nom?

[10:18] <masak> ingy: so far it's only loose talk. but yes, I want to.

[10:19] <masak> ingy: mberends++ did some initial trials with getting Pugs to build so that a developer can start toying with it. I didn't hear an exclamation of success on that, though. just a bunch of mumbling about dependencies.

[10:19] <masak> moritz: that is an interesting question. I should find out -- after $dayjob.

[10:20] <masak> it does do a bit of grammars/regexes, so probably not.

[10:21] <ingy> masak: cool. maybe I'll pIng au and see what needs to happen

[10:22] <ingy> o/

[10:25] *** mj41 left
[10:29] <masak> ingy: if you could ask au++ to write a step-by-step list for how to build Pugs outside of Cabal, that would be great.

[10:36] *** dark_x joined
[11:01] *** Trashlord left
[11:10] *** benabik left
[11:13] <masak> "The PHP language sucks. But that isn't what matters; it's good for getting things done."

[11:13] <masak> I think there's a bunch of truthiness to that quote. it's important for a language/tool to be able to "scale down" to the small, simple situations.

[11:19] <TiMBuS> Perl is awesome. But that isn't what matters; it's good for getting things done.

[11:19] <eiro> back 

[11:22] *** lateau_ joined
[11:22] <eiro> ingy, is perl6 one of the targets of pegex ? 

[11:25] *** replore_ joined
[11:26] *** Ptival joined
[11:36] *** benabik joined
[11:37] *** gpk left
[11:38] <ingy> eiro: well any p6 that exposes a pcre-ish regex engine 

[11:39] <ingy> eiro: although I am currently making a pegex emitter to p6rules

[11:39] <eiro> \o/ 

[11:39] <ingy> so you could compile a pegex grammar to native p6

[11:39] <ingy> bbut that may prove highly problematic :)

[11:40] <moritz> why?

[11:40] *** Patterner left
[11:40] <ingy> because I don't actually parse the pcre bits currently

[11:40] <ingy> I just trust them to work natively

[11:41] <moritz> uhm

[11:41] <moritz> so... pegex isn't related to c'dent?

[11:41] <ingy> which is not a bad assumption in my experience

[11:41] <moritz> I ask because c'dent is supposed to be AST based

[11:41] <moritz> not string based

[11:42] *** Psyche^ joined
[11:42] *** Psyche^ is now known as Patterner

[11:42] <ingy> many ways to answer, but low bandwidth

[11:42] <ingy> c'dent is parsed by pegex

[11:42] <ingy> someday pegex will be written in c'dent

[11:43] <ingy> c'dent is ast based

[11:44] <masak> TiMBuS: people often say that Haskell/Ruby/Python/whatever reads "like pseudocode". I have a similar feeling with Perl, but on the data structure level. arrays and hashes map very nicely to a bunch of problems in my head.

[11:46] <moritz> IMHO the point of pseudocode is that you don't have to care about all the small details; but in every real programming language you have to

[11:47] <masak> there is something to that.

[11:48] <masak> in the same way, arrays and hashes "gloss over" some of the details that more specific data structures might provide, but they are often good enough just like pseudocode is good enough.

[11:49] <moritz> and autovivification also takes care of some of those details

[11:49] <masak> in my experience, Java and .Net programmers don't think "oh, that's just a hash" in many of the cases I do.

[12:02] *** bluescreen10 joined
[12:09] *** grondilu joined
[12:11] <ingy> but waves hands at regexes in the ast

[12:11] <ingy> lost the net for a sec

[12:11] <moritz> that's why we have public logs :-)

[12:12] <masak> well, one reason :P

[12:12] <ingy> but now I'm checked in and at the LHR restaurant in a cozy chair

[12:14] <ingy> moritz: if you don't have to worry about any small details in perl 6, does that mean it's not a real programming language?

[12:14] <moritz> ingy: but you do

[12:15] <moritz> ingy: 90% of programming is caring about small details

[12:15] <ingy> at this point in history

[12:16] <moritz> for the last 50 or so years, yes

[12:16] <moritz> and I don't see any concept that will change that

[12:16] <moritz> on a fundamental level, that is

[12:17] <ingy> so it must not be possible!

[12:17] <moritz> unless somebody comes up with a really smart AI that takes care of the details just like it thinks a human would

[12:17] <moritz> ingy: I'm not saying that, I merely say that I don't see any concept

[12:18] <ingy> i know, just making sure nobody assumes that :)

[12:18] *** brill joined
[12:18] <moritz> mostly because I find that the lack of care about details is harmful not only in programming, but basically everywhere

[12:18] *** brill left
[12:18] <ingy> I find that the attention to details is also harmful :)

[12:20] <ingy> solid abstractions hide details

[12:20] <masak> abstractions leak. :/

[12:20] <ingy> and that's how we got from 50 years ago to now

[12:20] *** ggoebel joined
[12:21] <ingy> masak: do you know how many abstractions you take for granted every day?

[12:21] <ingy> ever wired transistors together?

[12:21] <masak> ingy: almost by definition, no.

[12:21] <masak> nope :)

[12:21] <moritz> you turn on the light, and gloss over how many details are necessary to generate the electricity, and get it to your home

[12:22] <moritz> and yet there is still enough complexity to worry about

[12:22] <ingy> transistors are a great abstraction built on top of a world of abstractions

[12:22] <moritz> because we always explore until we can't handle the complexity anymore

[12:22] <ingy> yes

[12:23] *** ab5tract joined
[12:23] <ingy> I just think that programming will become a solid abstraction

[12:23] <moritz> so if somebody gives me a tool to decrease complexity by 99%, I just build 100x more awesome stuff and *then* complain that I can't handle the complexity anymore

[12:23] <ingy> programming as we now know it

[12:23] <moritz> (assuming that complexity scales linearly with awesomeness, which it surely doesn't in real life)

[12:24] <ingy> we are still on the low side of the exponential curve

[12:25] <moritz> plotting what against what?

[12:25] <masak> that's the problem. hardware keeps getting exponentially awesomer; software clearly doesn't.

[12:25] <ingy> in my personal path I have been working on abstractions that just now are allowing me to publish one or two new modules a day

[12:26] <ingy> but only in one language at a time

[12:26] <moritz> ingy: and can you maintain all those modules?

[12:26] <ingy> I'm working on that abstraction as well

[12:26] <ingy> so not yet, but yes

[12:27] * flussence is sitting at $dayjob watching my 6-core workstation deadlock 6 threads in crap software over and over :)

[12:27] <ingy> that's my plan anyway

[12:27] <moritz> how do you plan to abstract maintenance?

[12:28] <ingy> the same way that you abstract community

[12:28] <moritz> well, I don't know how that works either

[12:29] <ingy> me neither, but I am working on it. seriously

[12:30] <ingy> I don't plan to release modules that aren't maintained

[12:30] * moritz doesn't know if he wants to be part of an abstracted community, whatever that might be

[12:30] <ingy> but if I spend all my time maintaining them, I fail

[12:30] <ingy> moritz: you already are

[12:30] <moritz> ingy: how so?

[12:30] <ingy> github is an abstract community

[12:31] <ingy> it's not perfectly abstracted

[12:31] <ingy> but it's a glimpse

[12:31] <moritz> I see github more as a tool that communities use, not as a community

[12:31] <[Coke]> if you're going to encourage people to send patches to rakudobug, you have to evaluate and respond to them so I don't end up sending an email 2 years later saying "oh. whoops."

[12:32] <ingy> I see it as an abstract community

[12:32] <moritz> [Coke]: I do try that (you don't see the applied patches and closed tickets), but there are many patches I can't judge, because I don't know the code well enough

[12:33] *** mishin joined
[12:33] <masak> ingy: I don't get the part about us abstracting community. please elaborate. :)

[12:34] <masak> do you mean when we talk about the community as an entity, rather than being composed of a bunch of people?

[12:34] <[Coke]> moritz: more of a general grumble, as I hate being the face of rakudo that says "hey, we suck at responding to patches! Thanks!"

[12:34] <moritz> [Coke]: quite understandable

[12:36] <[Coke]> uhoh. 749 tickets. we're edging back up.

[12:36] <masak> [Coke]: kudos for sending those emails.

[12:36] <masak> [Coke]: if it helps, I feel a pang of guilt every time I see one of those responses :/

[12:37] <[Coke]> good! ;)

[12:37] <masak> heh

[12:38] <masak> we should try not to let the RT perl6 queue grow that big again...

[12:38] <masak> easier said than done, of course.

[12:39] * moritz wonders how hard it would be to get dalek reporting of RT activity

[12:39] <moritz> one thing that people could do is write more tests for tickets, before they are resolved

[12:39] <moritz> but many of the tickets are "It dies in an LTA way", and nobody really knows what *should* happen instead

[12:39] <moritz> it's hard to write tests for that.

[12:40] <[Coke]> hey, TimToady, there are a few [spec] tickets still open. ;)

[12:41] <masak> seems to me people who write lots of tests in the spectest suite are either (a) short-lived in that role, or (b) moritz.

[12:41] <masak> I don't know why that is.

[12:42] <ingy> masak: when you release a module it gets an irc channel, a mailing list and a facebook page

[12:42] <moritz> yay, more dead mailing lists </sarcasm>

[12:42] <moritz> and more dead IRC channels...

[12:42] <ingy> yeah, that's a shitty implementation

[12:42] *** grondilu left
[12:43] <ingy> but  that's part of inventing abstractions

[12:43] <moritz> IME it's much better to start with *one* channel, and fork off some of it when the activity in one particular subtopic takes over all the s/n ratio

[12:43] <[Coke]> rakudo: say 1,2 Z 3,4 

[12:43] <p6eval> rakudo 7408d6: OUTPUT¬´1 3 2 4‚ê§¬ª

[12:44] <[Coke]> rakudo: say (1,2 Z 3,4).gist

[12:44] <masak> ingy: if that's what abstracting communities is about, I'd take a concrete community any day :)

[12:44] <p6eval> rakudo 7408d6: OUTPUT¬´1 3 2 4‚ê§¬ª

[12:44] <[Coke]> rakudo: say (1,2 Z 3,4).perl

[12:44] <p6eval> rakudo 7408d6: OUTPUT¬´((1, 3), (2, 4)).list‚ê§¬ª

[12:45] <[Coke]> rakudo: (1,2,3 Z[,] 4,5,6).perl.say

[12:45] <p6eval> rakudo 7408d6: OUTPUT¬´((1, 4), (2, 5), (3, 6)).list‚ê§¬ª

[12:45] <[Coke]> rakudo: (1,2,3 Z, 4,5,6).perl.say

[12:45] <p6eval> rakudo 7408d6: OUTPUT¬´((1, 4), (2, 5), (3, 6)).list‚ê§¬ª

[12:45] *** replore_ left
[12:45] <moritz> if done right, Z and Z, and Z[,] are all the same

[12:45] <moritz> ... and it seems they are in nom.

[12:46] *** replore joined
[12:47] <masak> I'm guessing there's an RT ticket for that already...?

[12:47] <[Coke]> masak: 75818; needs tests.

[12:48] *** Ptival left
[12:48] <[Coke]> rakudo: say True.so;

[12:48] <p6eval> rakudo 7408d6: OUTPUT¬´Bool::True‚ê§¬ª

[12:48] <[Coke]> rakudo: say True.not;

[12:48] <p6eval> rakudo 7408d6: OUTPUT¬´Method 'not' not found for invocant of class 'Bool'‚ê§  in block <anon> at /tmp/8Na9f0JyUp:1‚ê§  in <anon> at /tmp/8Na9f0JyUp:1‚ê§‚ê§¬ª

[12:51] <[Coke]> rakudo: say 748-38, "tickets open that aren't just stalled on tests."

[12:51] <p6eval> rakudo 7408d6: OUTPUT¬´710tickets open that aren't just stalled on tests.‚ê§¬ª

[12:57] <ingy> more  later

[12:57] <masak> rakudo: say (748-38, "tickets open that aren't just stalled on tests.")

[12:57] <p6eval> rakudo 7408d6: OUTPUT¬´710 tickets open that aren't just stalled on tests.‚ê§¬ª

[12:57] <masak> "parentheses are just for grouping" :P

[12:58] <[Coke]> rakudo: class E {has $.n is rw; has $.v is rw; method Str{~self.v}}; my E $x .= new(:v(1)); $x.n = E.new(:v(2)); (gather { my $i = $x; while $i.defined { take $i; $i = $i.n } }).join("|").say

[12:58] <p6eval> rakudo 7408d6: OUTPUT¬´1|2‚ê§¬ª

[12:59] <[Coke]> rakudo: my $x; say "$x >> ";

[12:59] <p6eval> rakudo 7408d6: OUTPUT¬´===SORRY!===‚ê§Unsupported use of >> to do right shift; in Perl 6 please use +> or ~> at line 1, near "\";"‚ê§¬ª

[12:59] <[Coke]> rakudo: my $x; say "$x >>";

[12:59] <p6eval> rakudo 7408d6: OUTPUT¬´Use of uninitialized value in string context‚ê§ >>‚ê§¬ª

[13:00] <[Coke]> rakudo: my $x=3; say "$x >>";

[13:00] <p6eval> rakudo 7408d6: OUTPUT¬´3 >>‚ê§¬ª

[13:00] <[Coke]> rakudo: my $x=3; say "$x >> ";

[13:00] <p6eval> rakudo 7408d6: OUTPUT¬´===SORRY!===‚ê§Unsupported use of >> to do right shift; in Perl 6 please use +> or ~> at line 1, near "\";"‚ê§¬ª

[13:00] <moritz> urks

[13:01] <moritz> std: my $x=3; say "$x >> ";

[13:01] <masak> [Coke]: if there's a ticket about that, it should be mergeable with one about qq strings, interpolation, whitespace, and comments.

[13:01] <[Coke]> that's been open for a over a year.

[13:01] <p6eval> std 20ae3bd: OUTPUT¬´ok 00:01 122m‚ê§¬ª

[13:01] <[Coke]> masak: RT #75320

[13:01] <[Coke]> If it's untouched for more than a year, and still happening, a comment that it's still happening is ok, yes?

[13:01] <moritz> yes

[13:02] <[Coke]> (if it's untouched a month, that's too soon.)

[13:02] <[Coke]> I won't bother figuring out where the boundary is and just stick with a year for now. ;)

[13:02] <[Coke]> (now I have another way to drop things off my "pingable" list of tickets, yay.)

[13:02] <masak> it's not so much the time as codebase change that matters... :)

[13:03] <masak> things from before February can't be about nom, for example.

[13:03] <moritz> and many old tickets refer to the parser in one way or another, because the parser hasn't been touched much in the b -> nom transition

[13:07] <[Coke]> moritz: Can you construct a test case for 76534 that doesn't involve Pugs?

[13:07] <flussence> rakudo: say "2 >> 1";

[13:07] <p6eval> rakudo 7408d6: OUTPUT¬´2 >> 1‚ê§¬ª

[13:07] <[Coke]> (also, hoping it's fixed already. ;)

[13:08] <moritz> [Coke]: it's OK to just do BEGIN @*INC.push: 't/spec/packages';

[13:08] <[Coke]> rakudo: require ::;

[13:08] <p6eval> rakudo 7408d6: OUTPUT¬´===SORRY!===‚ê§ResizablePMCArray: Can't pop from an empty array!‚ê§¬ª

[13:09] <[Coke]> alright, that one is only 11 months. Close enough. ;)

[13:10] <moritz> [Coke]: but since nom doesn't do custom ops, we can't close tickets that say we don't do them well enough

[13:11] *** dark_x left
[13:11] <[Coke]> moritz: that's fine, I just want an example in the ticket that is self contained.

[13:11] <[Coke]> rakudo: say @array.^methods;

[13:11] <p6eval> rakudo 7408d6: OUTPUT¬´===SORRY!===‚ê§Symbol '@array' not predeclared in <anonymous> (/tmp/LiNEqrj8gt:1)‚ê§¬ª

[13:12] <[Coke]> rakudo: my @a; say @a.^methods;

[13:12] <p6eval> rakudo 7408d6: OUTPUT¬´new at_pos flattens REIFY STORE_AT_POS STORE perl new Bool Int end fmt flat list flattens Capture Parcel at_pos eager elems exists gimme infinite iterator munch pick pop push roll reverse rotate shift unshift sort classify categorize REIFY STORE_AT_POS FLATTENABLE_‚Ä¶

[13:12] <[Coke]> rakudo: my @a; say @a.^methods.sort();

[13:12] <moritz> [Coke]: it needs to be in a separate file, but Exportops.pm is in roast

[13:12] <p6eval> rakudo 7408d6: OUTPUT¬´No applicable candidates found to dispatch to for 'Numeric'. Available candidates are:‚ê§:(Mu, Mu %_)‚ê§‚ê§  in method Numeric at src/gen/CORE.setting:607‚ê§  in sub infix:<==> at src/gen/CORE.setting:1992‚ê§  in sub infix:<cmp> at src/gen/CORE.setting:1035‚ê§  in method sort ‚Ä¶

[13:13] <masak> interesting error.

[13:13] *** dukeleto joined
[13:13] <moritz> it tries to do a numeric sort for some reason

[13:13] <[Coke]> rakudo: my @a=1,2,3; say @a.sort();

[13:13] <p6eval> rakudo 7408d6: OUTPUT¬´1 2 3‚ê§¬ª

[13:13] <[Coke]> rakudo: my @a=<a b c>; say @a.sort();

[13:13] <p6eval> rakudo 7408d6: OUTPUT¬´a b c‚ê§¬ª

[13:15] <[Coke]> 09:12 <+p6eval> rakudo 7408d6: OUTPUT¬´No applicable candidates found to dispatch to for 'Numeric'. Available candidates are:‚ê§:(Mu, Mu

[13:15] <[Coke]>                 %_)‚ê§‚ê§  in method Numeric at src/gen/CORE.setting:607‚ê§  in sub

[13:15] <[Coke]>                 infix:<==> at src/gen/CORE.setting:1992‚ê§  in sub infix:<cmp> at

[13:15] <[Coke]> sorry.

[13:15] <[Coke]>                 src/gen/CORE.setting:1035‚ê§  in method sort ‚Ä¶

[13:15] <[Coke]> ARGH.

[13:15] <[Coke]> rakudo: say :foo<<string\ here>>.perl

[13:15] <p6eval> rakudo 7408d6: OUTPUT¬´"foo" => ("string\\", "here")‚ê§¬ª

[13:15] <flussence> nom: say so ('aaaaabaaaaa' ~~ /(\N*) b/); # do we need a test added for this one?

[13:15] <p6eval> nom 7408d6: OUTPUT¬´Bool::False‚ê§¬ª

[13:15] <[Coke]> rakudo: say ¬´a\ b¬ª.perl

[13:15] <p6eval> rakudo 7408d6: OUTPUT¬´("a", "b")‚ê§¬ª

[13:16] <moritz> flussence: yes

[13:16] <masak> nom: my @a; say @a.^methods[0].WHAT

[13:16] <p6eval> nom 7408d6: OUTPUT¬´Method()‚ê§¬ª

[13:17] <flussence> hmm, what's the best place to put it...

[13:17] <masak> nom: my @a; say @a.^methods[0] ~~ Mu

[13:17] <p6eval> nom 7408d6: OUTPUT¬´Bool::True‚ê§¬ª

[13:17] <masak> nom: my @a; for @a.^methods[0] { say $_ ~~ Mu }

[13:17] <p6eval> nom 7408d6: OUTPUT¬´Bool::True‚ê§¬ª

[13:17] <[Coke]> rakudo: my $ = 5; my $ = 7; say "alive"

[13:17] <p6eval> rakudo 7408d6: OUTPUT¬´===SORRY!===‚ê§Redeclaration of symbol $ at line 1, near " = 7; say "‚ê§¬ª

[13:17] <masak> nom: my @a; for @a.^methods.list { say $_ ~~ Mu }

[13:17] <p6eval> nom 7408d6: OUTPUT¬´Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool::True‚ê§Bool‚Ä¶

[13:18] <moritz> nom: my @a; say [&&] @a.^methods.list { $_ ~~ Mu }

[13:18] <p6eval> nom 7408d6: OUTPUT¬´===SORRY!===‚ê§Confused at line 1, near "say [&&] @"‚ê§¬ª

[13:18] <moritz> nom: my @a; say [&&] @a.^methods.map: { $_ ~~ Mu }

[13:18] <p6eval> nom 7408d6: OUTPUT¬´Bool::True‚ê§¬ª

[13:19] <moritz> flussence: maybe S05-metasyntax/charset.t though I'm not really convinced

[13:19] <moritz> or S05-mass/rx.t, but it'll get lost there

[13:19] <flussence> nom: say so ('aaaaabaaaaa' ~~ /^(a*) b/);

[13:19] <p6eval> nom 7408d6: OUTPUT¬´Bool::True‚ê§¬ª

[13:19] <moritz> maybe a new test, S05-metasyntax/quantifier.t

[13:20] <flussence> it works fine for literals, not for char classes... charset.t might fit

[13:21] <moritz> nom: say so ('aaaaabaaaaa' ~~ /^(.*) b/);

[13:21] <p6eval> nom 7408d6: OUTPUT¬´Bool::False‚ê§¬ª

[13:21] <moritz> nom: say so ('aaaaabaaaaa' ~~ /^(<[a]>*) b/);

[13:21] <p6eval> nom 7408d6: OUTPUT¬´Bool::True‚ê§¬ª

[13:21] <moritz> nom: say so ('aaaaabaaaaa' ~~ /^(<-[b]>*) b/);

[13:21] <p6eval> nom 7408d6: OUTPUT¬´Bool::True‚ê§¬ª

[13:22] *** dark_x joined
[13:22] <moritz> that kinda convinces me it's not char classes that are the problem, but the fact that it needs to backtrack if that first thing matches an 'a' too

[13:23] <masak> aye.

[13:23] <masak> I should've seen that too.

[13:23] <masak> it's quantifiers and capturing groups that combine to create the bug.

[13:24] <moritz> nom: say so 'aaaaaba' ~~ / { pir::say(%*RX<r>) } a*b/

[13:24] <p6eval> nom 7408d6: OUTPUT¬´Dynamic variable %*RX not found‚ê§  in method throw at src/gen/CORE.setting:5979‚ê§  in method <anon> at src/gen/CORE.setting:6073‚ê§  in <anon> at src/gen/Metamodel.pm:2085‚ê§  in find_method_fallback at src/gen/Metamodel.pm:2083‚ê§  in find_method at src/gen/Metamodel.pm:785‚ê§‚Ä¶

[13:24] <moritz> nom: say so 'aaaaaba' ~~ / ^ .* b/

[13:24] <p6eval> nom 7408d6: OUTPUT¬´Bool::True‚ê§¬ª

[13:25] <moritz> nom: say so 'aaaaaba' ~~ / ^ (.*) b/

[13:25] <p6eval> nom 7408d6: OUTPUT¬´Bool::False‚ê§¬ª

[13:25] <moritz> nom: say so 'aaaaaba' ~~ / ^ (.)* b/

[13:25] <p6eval> nom 7408d6: OUTPUT¬´Bool::True‚ê§¬ª

[13:25] * moritz agrees with masak's diagnosis

[13:25] <flussence> nom: say so ('ab' ~~ /^(.*) b/);

[13:25] <p6eval> nom 7408d6: OUTPUT¬´Bool::False‚ê§¬ª

[13:26] <flussence> is there an RT number I can point the test to?

[13:26] * masak adds this to the ticket

[13:26] <moritz> flussence: 100650

[13:26] <flussence> thanks

[13:26] <masak> boy. we're in the hundred thousands now...

[13:26] <moritz> btw RT #100k is a spam ticket :(

[13:27] <masak> dang!

[13:27] <benabik> We should buy their product in celebration.

[13:27] <tadzik> (:

[13:27] <moritz> we should launch a missile at their control center in celebration

[13:27] <moritz> spammers should never win.

[13:29] <benabik> When does a 1 arg infix sub get called?

[13:29] <moritz> as a start value for a reduction

[13:29] <moritz> nom: say [*] 3

[13:29] <p6eval> nom 7408d6: OUTPUT¬´3‚ê§¬ª

[13:30] <benabik> Oh.  [+] 1,2,3  = +(3,+(2,+(1))) ?

[13:30] <moritz> wait, I think that uses the 0-arg version, no?

[13:30] <masak> modulo order, yes :)

[13:30] <moritz> I thought more ilke  [*] 5, 6, 6  == 1 * 5 * 6 * 6

[13:30] <masak> tadzik: greetings, human!

[13:30] <benabik> I don't think so, given that several infix ops have die on their 0-arg

[13:31] <tadzik> oh hai

[13:31] <moritz> but the 1 comes from infix:<*>()

[13:31] <moritz> nom: say [*]()

[13:31] <p6eval> nom 7408d6: OUTPUT¬´1‚ê§¬ª

[13:31] <benabik> nom: [x] 1,2,3

[13:31] <p6eval> nom 7408d6:  ( no output )

[13:31] <masak> nom: say [max]()

[13:31] <p6eval> nom 7408d6: OUTPUT¬´-Inf‚ê§¬ª

[13:31] <benabik> nom: say [x] 1,2,3

[13:31] <p6eval> nom 7408d6: OUTPUT¬´111111‚ê§¬ª

[13:31] <benabik> nom: say [x]

[13:31] <p6eval> nom 7408d6: OUTPUT¬´‚ê§Could not find sub &x‚ê§  in block <anon> at /tmp/AYtl3xlYKa:1‚ê§  in <anon> at /tmp/AYtl3xlYKa:1‚ê§‚ê§¬ª

[13:31] <benabik> nom: say [x] ()

[13:31] <p6eval> nom 7408d6: OUTPUT¬´No zero-arg meaning for infix:<x>‚ê§  in sub infix:<x> at src/gen/CORE.setting:822‚ê§  in sub <anon> at src/gen/CORE.setting:7556‚ê§  in block <anon> at /tmp/k4Gn0KaJtx:1‚ê§  in <anon> at /tmp/k4Gn0KaJtx:1‚ê§‚ê§¬ª

[13:31] *** localhost left
[13:31] <masak> no whitespace.

[13:31] <benabik> Can't be calling 0-arg, must start at 1.

[13:32] <masak> benabik: no, you're doin it rong.

[13:32] <masak> nom: say [x]()

[13:32] <p6eval> nom 7408d6: OUTPUT¬´No zero-arg meaning for infix:<x>‚ê§  in sub infix:<x> at src/gen/CORE.setting:822‚ê§  in sub <anon> at src/gen/CORE.setting:7556‚ê§  in block <anon> at /tmp/d9JV_35Hfp:1‚ê§  in <anon> at /tmp/d9JV_35Hfp:1‚ê§‚ê§¬ª

[13:32] <benabik> Same answer.  :-P

[13:32] <masak> oh, sorry :)

[13:32] <masak> wasn't reading properly.

[13:32] <benabik> But since [x] () doesn't work and [x] 1,2,3 does, then reduction has to start with 1 or 2 args, not 0

[13:32] <colomon> I believe 0-arg is called if there are no args in the reduce, 1-arg if there is exactly one arg, and only 2-arg versions otherwise

[13:33] <masak> I'm still not completely clear on why '[+] 1, 2, 3' works, but not '[+]'.

[13:33] <dalek> roast: ee33e98 | flussence++ | S05-metasyntax/charset.t:

[13:33] <dalek> roast: Add test for RT #100650

[13:33] <dalek> roast: review: https://github.com/perl6/roast/commit/ee33e98367

[13:33] <benabik> Reduction needs a list?

[13:33] <masak> colomon: sounds about right.

[13:33] <colomon> masak: that's grammar

[13:33] <benabik> [max] () === -Inf seems odd to me.

[13:33] <colomon> nom: my @a; say [+] @a

[13:33] <p6eval> nom 7408d6: OUTPUT¬´0‚ê§¬ª

[13:34] <moritz> nom: my @a; say [*] @a

[13:34] <colomon> nom: my @a; say [*] @a

[13:34] <p6eval> nom 7408d6: OUTPUT¬´1‚ê§¬ª

[13:34] <colomon> nom: my @a; say [max] @a

[13:34] <p6eval> nom 7408d6: OUTPUT¬´-Inf‚ê§¬ª

[13:34] <moritz> benabik: what would you rather see as [max] () ?

[13:35] <masak> benabik: only until you think about it.

[13:35] <moritz> hence my questions, which brings you to think about it :-)

[13:35] <benabik> I see it as parallel to [+] and [*], but getting the maximum value of a list and getting something that's not in it is wierder.

[13:35] <masak> benabik: the maximum of nothing is the smallest possible value, because anything is more maximal than nothing.

[13:36] <moritz> benabik: but there's no 0 in [+] () either

[13:36] <colomon> benabik: but there's nothing in the list at all

[13:36] <moritz> nor a 1 in [*] ()

[13:36] <moritz> but both make a lot of sense

[13:36] <masak> all three make a lot of sense.

[13:36] <colomon> benabik: so either you return Nil, or error, or -Inf

[13:37] <colomon> and -Inf is the most informative, least error-y of those choices

[13:37] <moritz> but you can't easily continue using Nil in a computation

[13:37] <benabik> I understand the logic, just not as intuitive for me I guess.  :-)

[13:37] <masak> benabik: think of it this way. to implement a &max subroutine, I keep a counter with the biggest number I've seen so far.

[13:38] <masak> benabik: what should I initialize the counter to?

[13:38] <dalek> rakudo/nom: 299e5af | moritz++ | src/core/Mu.pm:

[13:38] <dalek> rakudo/nom: Mu.not

[13:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/299e5af864

[13:38] <dalek> rakudo/nom: 545638a | moritz++ | src/Perl6/Actions.pm:

[13:38] <dalek> rakudo/nom: deal with "require ::"

[13:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/545638a018

[13:38] <masak> hm, maybe "accumulator" is a better term than "counter".

[13:43] *** SHODAN left
[13:43] *** mtk left
[13:46] *** localhost joined
[13:50] <masak> benabik: put differently, -Inf is the "unit" of the &infix:<max> operator -- the number that you can always apply without any noticeable change.

[13:52] <benabik> masak: I do understand the logic.  :-)  I guess I just mentally translate `[max] @a` to `foldl1 max @a`, which would explode.

[13:52] <benabik> masak: My expectations will adapt.

[13:53] *** risou_awy is now known as risou

[13:53] <masak> so I reckon.

[13:54] <colomon> benabik: perl 6 does try to avoid exploding.  ;)

[13:54] <moritz> ... at run time

[13:54] *** mtk joined
[13:54] <flussence> rakudo: my &j = &join.assuming(q{, }); say [&j] (1..5)

[13:54] <p6eval> rakudo 7408d6: OUTPUT¬´===SORRY!===‚ê§Confused at line 1, near "say [&j] ("‚ê§¬ª

[13:54] <moritz> and it does its best to explode at compile time

[13:55] <flussence> rakudo: my &j = &join.assuming(q{, }); say [&j] 1,2,3,4,5;

[13:55] <p6eval> rakudo 7408d6: OUTPUT¬´===SORRY!===‚ê§Confused at line 1, near "say [&j] 1"‚ê§¬ª

[13:55] <masak> flussence: operators != subroutines

[13:55] <moritz> flussence: &j is not an infix op

[13:55] <masak> flussence: not syntactically anyway.

[13:55] <moritz> that's what reduce() is for

[13:55] <flussence> oh, I still haven't woke up fully today :)

[13:55] <masak> flussence: you can only use metaops on ops.

[13:55] *** im2ee joined
[13:56] <im2ee> Hello! :)

[13:56] <moritz> nom: my &j := &join.assuming(', '); say (1..5).reduce: &j

[13:56] <p6eval> nom 7408d6: OUTPUT¬´can only reduce with arity 2 for now‚ê§  in method reduce at src/gen/CORE.setting:4229‚ê§  in method reduce at src/gen/CORE.setting:1026‚ê§  in block <anon> at /tmp/jwKEHEq9MM:1‚ê§  in <anon> at /tmp/jwKEHEq9MM:1‚ê§‚ê§¬ª

[13:56] <benabik> Actually, I suppose I more expect something like `foldl (\x y -> case x of Nothing -> y; Just x' -> max x' y) Nothing @a`  But Maybe Int is a less intuitive return type.  :-D

[13:56] *** mishin left
[13:56] <flussence> rakudo: my &j = &join.assuming(q{, }); say &j(1..5);

[13:56] <p6eval> rakudo 7408d6: OUTPUT¬´1, 2, 3, 4, 5‚ê§¬ª

[13:56] <flussence> rakudo: my &j = &join.assuming(q{, }); say &j 1..5;

[13:56] <p6eval> rakudo 7408d6: OUTPUT¬´===SORRY!===‚ê§Confused at line 1, near "say &j 1.."‚ê§¬ª

[13:56] <benabik> oooh, assuming.

[13:56] <moritz> rakudo: my &j = &join.assuming(q{, }); say j 1..5

[13:56] <p6eval> rakudo 7408d6: OUTPUT¬´1, 2, 3, 4, 5‚ê§¬ª

[13:57] <masak> im2ee: dzien dobry!

[13:57] <flussence> right, "&j" looks term-ish?

[13:57] <im2ee> masak, how do You do? :)

[13:57] <flussence> std: my &j = &join.assuming(q{, }); say &j 1..5;

[13:57] <p6eval> std 20ae3bd: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Two terms in a row at /tmp/G0IIzMhWvz line 1:‚ê§------> [32mmy &j = &join.assuming(q{, }); say &j [33m‚èè[31m1..5;[0m‚ê§    expecting any of:‚ê§ bracketed infix‚ê§        infix or meta-infix‚ê§    statement modifier loop‚ê§Parse failed‚ê§FAILED 00:01 126m‚ê§¬ª‚Ä¶

[13:57] <flussence> yep.

[13:57] <masak> im2ee: I'm on top of the world; how about You? :)

[13:58] <im2ee> masak, fine. :)

[13:58] <im2ee> masak, i'll write much code today! :)

[13:58] <masak> yay

[13:58] <masak> find us lots of bugs, too! :)

[13:59] <tadzik> ah, I haven't investigated the funny-select case yet

[13:59] <tadzik> and my classes start in a second

[13:59] <moritz> tadzik: you need a ticket system :-)

[13:59] <tadzik> it seems that my classes collide with #phasers too :/

[13:59] <moritz> or a TODO list

[13:59] <tadzik> moritz: yeah, I do

[14:00] <tadzik> holidays have ended, I must get organized again

[14:00] <masak> the horror

[14:01] <tadzik> maybe not

[14:01] <tadzik> I _should_ get more organized

[14:01] *** ab5tract left
[14:03] <im2ee> nom: say "a".ord; 

[14:03] <p6eval> nom 545638: OUTPUT¬´97‚ê§¬ª

[14:03] <im2ee> nom: say 97.chr; 

[14:03] <p6eval> nom 545638: OUTPUT¬´a‚ê§¬ª

[14:04] *** kaleem left
[14:05] <tadzik> nom: say 'a'.ord.chr.ord.chr.ord.chr.ord.chr.ord.chr.ord.chr

[14:05] <p6eval> nom 545638: OUTPUT¬´a‚ê§¬ª

[14:05] *** kaleem joined
[14:05] <tadzik> exciting

[14:05] *** kaleem left
[14:08] *** ab5tract joined
[14:09] *** dark_x left
[14:23] *** alester joined
[14:26] *** ab5tract left
[14:30] <masak> perl6: say sqrt(1i)

[14:30] <p6eval> rakudo 545638: OUTPUT¬´0.707106781186548 + 0.707106781186547i‚ê§¬ª

[14:30] <p6eval> ..niecza v10-36-g241a2d8: OUTPUT¬´0.707106781186548+0.707106781186547i‚ê§¬ª

[14:30] <p6eval> ..pugs: OUTPUT¬´0.7071067811865476 + 0.7071067811865475i‚ê§¬ª

[14:30] *** ab5tract joined
[14:32] *** sftp joined
[14:37] <masak> perl6: say sqrt -1

[14:37] <p6eval> pugs, rakudo 545638: OUTPUT¬´NaN‚ê§¬ª

[14:37] <p6eval> ..niecza v10-36-g241a2d8: OUTPUT¬´0+1i‚ê§¬ª

[14:37] * masak submits nieczabug

[14:38] *** aindilis left
[14:41] <im2ee> how it will look like in p5?

[14:41] <im2ee> unpack 'v', substr $message, $i, 2;

[14:42] <im2ee> ?

[14:42] <im2ee> :)

[14:42] <im2ee> in p6

[14:43] <[Coke]> Is there any interest in multiple perl6 implementations using the rt queue?

[14:43] <[Coke]> Right now it's basically some spec tickets and rakudo.

[14:44] <im2ee> nom: say "abc".substr(1,2).unpack('v');

[14:44] <p6eval> nom 545638: OUTPUT¬´Method 'unpack' not found for invocant of class 'Str'‚ê§  in block <anon> at /tmp/vaANOZPPsJ:1‚ê§  in <anon> at /tmp/vaANOZPPsJ:1‚ê§‚ê§¬ª

[14:44] <masak> im2ee: well, you can't unpack a Str in Perl 6

[14:44] <masak> im2ee: it must be a Buf.

[14:44] <moritz>  [Coke] I think that would be a bad idea

[14:44] <masak> im2ee: see http://strangelyconsistent.org/blog/str-and-buf-i-think-i-get-it-now

[14:44] <im2ee> Thanks masak++ :)

[14:45] <masak> im2ee: I should warn you that unpack isn't implemented yet, though.

[14:45] <im2ee> So.. I can't do what i wrote? :)

[14:45] <im2ee> Or, i can write something like "unpack subroutine"?

[14:46] *** replore left
[14:47] *** replore_ joined
[14:47] <masak> unpack is not yet implemented.

[14:48] <masak> you may, of course, emulate parts of it by handling Bufs by hand.

[14:49] <im2ee> I'm afraid im not so good.

[14:49] <im2ee> :)

[14:51] <im2ee> Hmm, or.. I have an idea! :)

[14:51] <[Coke]> moritz: (bad idea) why?

[14:52] <[Coke]> from a "I have a perl6 bug to report, where do I go?" standpoint, having them near each other makes sense.

[14:53] <[Coke]> (also, having only rakudo at perl.org gives it an incorrectly apparently priveleged status)

[14:54] * masak agrees in principle

[14:55] *** baest left
[14:55] <masak> the same way I agree that Rakudo only *appears* privileged by being THE Perl 6 implementation on top of Parrot.

[14:56] <[Coke]> (that said, if the perl6 RT queue at perl.org is separated from the perl5 queue (which will likely happen at some point), then we can slap a "rakudo.org" domain on it as the primary interface.)

[15:00] <daxim> but the queues are separate   <https://rt.perl.org/rt3/Search/Results.html?Query=Queue%20%3D%20'perl5'>   <https://rt.perl.org/rt3/Search/Results.html?Query=Queue%20%3D%20'perl6'>

[15:01] *** Trashlord joined
[15:03] <[Coke]> it's still tangled underneath.

[15:03] <[Coke]> (all 4 queues I see (and the one I know is there but can't see) share the same ticket numbers, e.g.)

[15:10] <masak> and that's a big problem in need of solving... because...? :)

[15:11] <flussence> someone else might get RT200k!

[15:14] <masak> probably a spammer... :/

[15:16] <flussence> maybe the answer is to not have another 100000 bugs :)

[15:19] *** ab5tract left
[15:24] *** pmurias joined
[15:26] *** ch3ck joined
[15:29] *** meldrake joined
[15:36] *** Woodi left
[15:41] *** espadrine left
[15:42] *** Woodi joined
[15:45] *** meldrake left
[15:45] *** rml joined
[15:49] *** espadrine joined
[15:50] *** daxim left
[15:51] *** itz_ left
[15:55] <masak> flussence: no, I don't think so.

[15:56] * masak decommutes

[15:56] *** masak left
[16:03] <flussence> .oO( I think I just accidentally told him to shut up :)

[16:04] *** mberends left
[16:13] *** am0c joined
[16:15] *** wolfman2000 left
[16:22] *** MayDaniel joined
[16:30] *** lateau_ left
[16:33] *** kaare_ joined
[16:48] *** dakkar left
[16:48] *** GlitchMr joined
[16:49] <GlitchMr> niecza: use so'this'is'perl6'huh

[16:49] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´‚ê§Unhandled Exception: Unable to locate module so'this'is'perl6'huh in @path‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 766 (CORE die @ 2) ‚ê§  at /home/p6eval/niecza/src/NieczaPathSearch.pm6 line 23 (NieczaPathSearch NieczaPathSearch.load_module @ 1‚Ä¶

[16:49] <GlitchMr> ... so it still contains this old feature from Perl 4...

[16:49] <GlitchMr> ...

[16:50] <benabik> Does P6 allow ' in identifiers?

[16:51] <GlitchMr> rakudo: use File'Copy

[16:51] <p6eval> rakudo 545638: OUTPUT¬´===SORRY!===‚ê§Could not find File'Copy in any of: lib, /home/p6eval/.perl6/lib, /home/p6eval/nom-inst1/lib/parrot/3.8.0-devel/languages/perl6/lib, .‚ê§¬ª

[16:51] <GlitchMr> rakudo: use File::Copy

[16:51] <p6eval> rakudo 545638: OUTPUT¬´===SORRY!===‚ê§Could not find File::Copy in any of: lib, /home/p6eval/.perl6/lib, /home/p6eval/nom-inst1/lib/parrot/3.8.0-devel/languages/perl6/lib, .‚ê§¬ª

[16:51] <GlitchMr> ...

[16:51] <GlitchMr> maybe, I don't know.

[16:51] <GlitchMr> I don't know if p6eval has any library which has two words

[16:51] <benabik> rakudo: my $x' = 2; say $x'

[16:51] <p6eval> rakudo 545638: OUTPUT¬´===SORRY!===‚ê§Confused at line 1, near "my $x' = 2"‚ê§¬ª

[16:51] <benabik> maybe not.

[16:51] <GlitchMr> > use File'Copy

[16:51] <GlitchMr> Unable to find module 'File'Copy' in the @*INC directories.

[16:52] <GlitchMr> > use File::Copy

[16:52] <GlitchMr> [nothing]...

[16:52] <GlitchMr> Makes sense...

[16:52] <lumi_> ' is valid in identifiers when followed by an alphabetic character, iiuc

[16:53] <TimToady> unlike Perl 5, ' is not a synonym for ::

[16:53] *** rml left
[16:53] <TimToady> it's in the same category as hyphen now

[16:54] <TimToady> use of ' in modules names is unlikely to make shell programmers happy though :)

[16:54] <benabik> rakudo: my $x'x = 2; say $x'x

[16:54] <p6eval> rakudo 545638: OUTPUT¬´2‚ê§¬ª

[16:54] <benabik> odd

[16:54] <GlitchMr> Makes sense...

[16:54] <TimToady> that doesn't stop TheDamian from writing Acme::Don't in Perl 6 though :)

[16:55] <TimToady> it's mostly for where you want apostrophes in English

[16:55] <benabik> I tend to expect ' to be at the end of a variable‚Ä¶  But I've used a ton of Haskell lately.

[16:55] <GlitchMr> I never had need to have ' in variable name.

[16:55] <TimToady> you just can't use 

[16:55] <TimToady> ' for that

[16:55] <GlitchMr> And "-" could be confused with substraction...

[16:55] <TimToady> but you can use  π for that

[16:56] <TimToady> GlitchMr: we're encouraging people to put whitespace around most infixes these days

[16:56] <colomon> nom: my $x` = 20; say $x`

[16:56] <p6eval> nom 545638: OUTPUT¬´===SORRY!===‚ê§Confused at line 1, near "my $x` = 2"‚ê§¬ª

[16:56] <GlitchMr> rakudo: my $notLoL = 42; sub win{20} print $notLoL-win

[16:56] <p6eval> rakudo 545638: OUTPUT¬´===SORRY!===‚ê§Confused at line 1, near "sub win{20"‚ê§¬ª

[16:56] <benabik> .u  π

[16:56] <phenny> U+02B9 MODIFIER LETTER PRIME ( π)

[16:56] <GlitchMr> rakudo: my $notLoL = 42; sub win{20}; print $notLoL-win

[16:56] <p6eval> rakudo 545638: OUTPUT¬´===SORRY!===‚ê§Symbol '$notLoL-win' not predeclared in <anonymous> (/tmp/v3loUjdHX6:1)‚ê§¬ª

[16:56] <colomon> nom: my $x π = 20; say $x π

[16:56] <p6eval> nom 545638: OUTPUT¬´20‚ê§¬ª

[16:56] <GlitchMr> rakudo: my $notLoL = 42; sub win{20}; print $notLoL - win

[16:56] <p6eval> rakudo 545638: OUTPUT¬´22¬ª

[16:56] <GlitchMr> Makes sense...

[16:57] <benabik> Hmph.  prime isn't on my keyboard.

[16:57] <GlitchMr> rakudo: print my $_::AAAA = 20

[16:57] <p6eval> rakudo 545638: OUTPUT¬´20¬ª

[16:57] <benabik> nom: my $x¬¥ = 2; say $x¬¥

[16:57] <p6eval> nom 545638: OUTPUT¬´===SORRY!===‚ê§Confused at line 1, near "my $x\x{b4} = 2"‚ê§¬ª

[16:58] <GlitchMr> But... it's Unicode...

[16:58] *** kfo_ joined
[16:58] <GlitchMr> (unless it isn't)

[16:58] <GlitchMr> nom: my $x¥ = 2; say $x¥

[16:58] <p6eval> nom 545638: OUTPUT¬´===SORRY!===‚ê§Confused at line 1, near "my $x\ufffd = 2"‚ê§¬ª

[16:58] <GlitchMr> \ufffd...

[16:58] <colomon> benabik: yeah, I cut-n-pasted what TimToady wrote to make my example work

[16:58] <GlitchMr> Ok, my IRC client does something wrong

[16:58] <TimToady> the thing about U+02B9 is that it's actually considered a letter, which is why it works

[16:58] <GlitchMr> FFFD is replacement character if I remember correctly.

[16:59] <GlitchMr> nom: my $polish≈Çariable = 3; print $polish≈Çariable

[16:59] <p6eval> nom 545638: OUTPUT¬´3¬ª

[16:59] <TimToady> but we're not trying to encourage the Haskell usage of primes here

[16:59] <GlitchMr> Makes sense...

[16:59] <tadzik> nom: my $≈Å√≥dka = 7; say $≈Å√≥dka

[16:59] <p6eval> nom 545638: OUTPUT¬´7‚ê§¬ª

[17:00] <GlitchMr> :)

[17:00] <colomon> TimToady: primes are always tempting to a mathematician

[17:00] <colomon> ;)

[17:00] <GlitchMr> I can perfectly see ≈Ç√≥dkƒô :).

[17:00] <GlitchMr> But from when boats are 7.

[17:00] *** kfo left
[17:02] <GlitchMr> nom: $_ = my $‚òÉ‚òÉ‚òÉ = 'snowman invasion';print $_

[17:02] <p6eval> nom 545638: OUTPUT¬´===SORRY!===‚ê§Confused at line 1, near "$_ = my $\u2603"‚ê§¬ª

[17:02] <GlitchMr> What's wrong with snowmans :(.

[17:02] <GlitchMr> nom: my $„Åì„Çì„Å´„Å°„ÅØ = 'Hi'; print $„Åì„Çì„Å´„Å°„ÅØ

[17:02] <p6eval> nom 545638: OUTPUT¬´Hi¬ª

[17:03] <colomon> nom: my $‚òÉ‚òÉ‚òÉ = 'snowman invasion'

[17:03] <sbp> I went through which codepoints are allowed for variable names in the logs somewhere

[17:03] <p6eval> nom 545638: OUTPUT¬´===SORRY!===‚ê§Confused at line 1, near "my $\u2603\u2603\u2603 = "‚ê§¬ª

[17:03] <colomon> std: my $‚òÉ‚òÉ‚òÉ = 'snowman invasion'

[17:03] <p6eval> std 20ae3bd: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Confused at /tmp/SK6C4GYhXe line 1:‚ê§------> [32mmy $[33m‚èè[31m‚òÉ‚òÉ‚òÉ = 'snowman invasion'[0m‚ê§    expecting any of:‚ê§  POST‚ê§   bracketed infix‚ê§        constraint‚ê§     infix or meta-infix‚ê§    postfix‚ê§        postfix_prefix_meta_operator‚ê§   shape

[17:03] <p6eval> ..definition‚ê§       stateme‚Ä¶

[17:03] <GlitchMr> O_o

[17:03] <GlitchMr> Why it doesn't like snowmans?

[17:03] <GlitchMr> Snowmans are fun.

[17:04] <GlitchMr> rakudo: print 'foo' if 0 == 3 | 4 | 'no'

[17:04] <p6eval> rakudo 545638: OUTPUT¬´foo¬ª

[17:04] <GlitchMr> niecza: print 'foo' if 0 == 3 | 4 | 'no'

[17:04] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´‚ê§Unhandled Exception: System.FormatException: Unknown char: n‚ê§  at System.Double.Parse (System.String s, NumberStyles style, IFormatProvider provider) [0x00000] in <filename unknown>:0 ‚ê§  at System.Double.Parse (System.String s, IFormatProvider provider) [‚Ä¶

[17:04] <GlitchMr> Kind of makes sense...

[17:04] <TimToady> snowmans aren't letters

[17:04] <sbp> can't find the discussion in the logs, sorry

[17:04] <TimToady> perl6: my @primes := 2, 3, -> $n is copy { repeat { $n += 2 } until $n %% none do for @primes -> $p { last if $p > sqrt($n); $p; } $n; } ... *;

[17:04] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Strange text after block (missing comma, semicolon, comment marker?) at /tmp/7kTtocpcoY line 1:‚ê§------> [32mmes -> $p { last if $p > sqrt($n); $p; }[33m‚èè[31m $n; } ... *;[0m‚ê§‚ê§Parse failed‚ê§‚ê§¬ª

[17:04] <p6eval> ..pugs: OUTPUT¬´*** ‚ê§    Unexpected "% none"‚ê§    expecting "::"‚ê§    at /tmp/4GiSFHd4F6 line 1, column 66‚ê§¬ª

[17:04] <p6eval> ..rakudo 545638: OUTPUT¬´===SORRY!===‚ê§Unable to parse blockoid, couldn't find final '}' at line 1‚ê§¬ª

[17:05] *** Chillance joined
[17:05] <GlitchMr> niecza: print 'foo' if 0 == 3 | 4 | '0x20'

[17:05] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´‚ê§Unhandled Exception: System.FormatException: Unknown char: x‚ê§  at System.Double.Parse (System.String s, NumberStyles style, IFormatProvider provider) [0x00000] in <filename unknown>:0 ‚ê§  at System.Double.Parse (System.String s, IFormatProvider provider) [‚Ä¶

[17:05] <GlitchMr> rakudo: print 'foo' if 0 == 3 | 4 | '0x20'

[17:05] <p6eval> rakudo 545638:  ( no output )

[17:05] <GlitchMr> ...

[17:05] <GlitchMr> YAY :).

[17:05] <GlitchMr> rakudo: print 'foo' if 0x20 == 3 | 4 | '0x20'

[17:05] <p6eval> rakudo 545638: OUTPUT¬´foo¬ª

[17:05] <GlitchMr> ...

[17:06] <GlitchMr> rakudo: print 'foo' if 32 == 3 | 4 | '0x20'

[17:06] <p6eval> rakudo 545638: OUTPUT¬´foo¬ª

[17:06] <TimToady> perl6: my @primes := 2, 3, -> $n is copy { repeat { $n += 2 } until $n %% none do for @primes -> $p { last if $p > sqrt($n); $p; }; $n; } ... *;  say @primes[^20];

[17:06] <p6eval> rakudo 545638: OUTPUT¬´splice() not implemented in class 'Mu'‚ê§  in method reify at src/gen/CORE.setting:3654‚ê§  in method gimme at src/gen/CORE.setting:4012‚ê§  in method exists at src/gen/CORE.setting:3998‚ê§  in method at_pos at src/gen/CORE.setting:3983‚ê§  in method postcircumfix:<[ ]> at s‚Ä¶

[17:06] <p6eval> ..pugs: OUTPUT¬´*** ‚ê§    Unexpected "% none"‚ê§    expecting "::"‚ê§    at /tmp/_aTduB3X2d line 1, column 66‚ê§¬ª

[17:06] <p6eval> ..niecza v10-36-g241a2d8: OUTPUT¬´2 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39‚ê§¬ª

[17:06] <colomon> 15, my favorite prime

[17:06] <TimToady> yeah...

[17:07] <TimToady> not to mention 9

[17:07] <colomon> and all the other odd numbers

[17:07] <colomon> (non-prime odd numbers, I mean)

[17:07] <PerlJam> that "none do for" part is interesting.

[17:08] <TimToady> b: my @primes := 2, 3, -> $n is copy { repeat { $n += 2 } until $n %% none do for @primes -> $p { last if $p > sqrt($n); $p; }; $n; } ... *;  say ~@primes[^20];

[17:08] <p6eval> b 1b7dd1: OUTPUT¬´2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71‚ê§¬ª

[17:08] <colomon> TimToady: is that the exact same code

[17:08] <colomon> ?

[17:08] *** Holy_Cow joined
[17:08] <TimToady> yes, except for ~ on printout

[17:09] <TimToady> it's from http://rosettacode.org/wiki/Count_in_factors#Perl_6

[17:09] <colomon> btw, wouldn't      do for @primes -> $p { last if $p > sqrt($n); $p; }; $n; } 

[17:09] <colomon> be more clear as     do @primes ... * > sqrt($n)   ?

[17:10] <TimToady> yes, but rakudo couldn't nest ... at that point

[17:10] <sbp> still wrong, 5 isn't prime. (2+i) * (2-i)

[17:10] <colomon> bad sbp, no cookies

[17:10] <sbp> hehe

[17:10] <TimToady> sbp: you have to allow for experimental error :)

[17:10] *** Holy_Cow left
[17:10] <colomon> he's just imagining things

[17:11] <sbp> going round in circles

[17:11] <GlitchMr> rakudo: @arrayª.match($regex);

[17:11] <jnthn> evening, #perl6

[17:11] <p6eval> rakudo 545638: OUTPUT¬´===SORRY!===‚ê§Confused at line 1, near "@array\ufffd.ma"‚ê§¬ª

[17:11] <GlitchMr> >>

[17:11] <jnthn> Just around for a little bit today.

[17:11] <GlitchMr> ...?

[17:11] <TimToady> perl6: say (2+i) * (2-i)

[17:11] <GlitchMr> rakudo: @array>>.match($regex);

[17:11] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´5+0i‚ê§¬ª

[17:11] <p6eval> ..rakudo 545638: OUTPUT¬´Could not find sub &i‚ê§  in block <anon> at /tmp/Uwp3W9MkF3:1‚ê§  in <anon> at /tmp/Uwp3W9MkF3:1‚ê§‚ê§¬ª

[17:11] <p6eval> ..pugs: OUTPUT¬´*** No such subroutine: "&i"‚ê§    at /tmp/LX1vawKikj line 1, column 6-9‚ê§¬ª

[17:11] <p6eval> rakudo 545638: OUTPUT¬´===SORRY!===‚ê§Symbol '@array' not predeclared in <anonymous> (/tmp/N3E3nim4wi:1)‚ê§¬ª

[17:11] <GlitchMr> rakudo: my @array>>.match($regex);

[17:11] <p6eval> rakudo 545638: OUTPUT¬´===SORRY!===‚ê§Confused at line 1, near "my @array>"‚ê§¬ª

[17:12] <TimToady> niecza++

[17:12] <GlitchMr> Why documentation has ª everywhere instead of >>?

[17:12] <TimToady> it's prettier

[17:12] <GlitchMr> ...

[17:12] <TimToady> and it's the real operator.  >> is just a workaround

[17:12] <GlitchMr> Unicode characters used as real operators O_o

[17:13] <GlitchMr> lolwhat?

[17:13] <colomon> hey now, >> is a real operator too.  

[17:13] <TimToady> ASCII is Unicode too :P

[17:13] <colomon> It's just... verbose.  

[17:13] *** daniel-s left
[17:13] <TimToady> but ¬ª is just Latin-1

[17:13] <GlitchMr> How I'm supposed to insert ª on my keyboard O_o

[17:13] <TimToady> do you have a Compose key?

[17:13] <GlitchMr> No...

[17:13] <benabik> Option-\ for me‚Ä¶  :-D

[17:14] <sjohnson> ¬ª is on OEM437 too

[17:14] <TimToady> well, Compose >>, or ^K >> in vim

[17:14] <GlitchMr> 

[17:14] <GlitchMr> ...

[17:14] <PerlJam> GlitchMr: windows or linux or mac?

[17:14] <GlitchMr> Windows

[17:14] <benabik> Alt-somesetofkeypaddigits?

[17:14] <sjohnson> also part of Windows-1252

[17:15] <PerlJam> bummer, I know squat about keycomposition on windows other than what benabik just said

[17:15] <GlitchMr> It's not worth bothering with it

[17:15] <GlitchMr>  

[17:15] <PerlJam> GlitchMr: Unicode is the future, better get used to it :)

[17:15] <TimToady> in gnome, CTRL-SHIFT-u BB

[17:15] <GlitchMr> Yeah, but I don't have characters on keyboard for every character O_o

[17:15] <sjohnson> TimToady: do you use Ubuntu?

[17:15] <[Coke]> windows: alt-0187, but that sucks.

[17:15] <GlitchMr> I can at most insert Euro characters. Ä...

[17:16] <sjohnson> or a different distro?

[17:16] * flussence read with some amusement that ebcdic thread on p5p the other day

[17:16] <GlitchMr> ª

[17:16] <GlitchMr> Yeah, it seems to work, but it sucks

[17:16] <PerlJam> on my ubuntu setup, I mapped the windows key to be compose

[17:16] <[Coke]> GlitchMr: see also: "Character Map"

[17:16] <TimToady> which is why there's a workaround, for people with sucky setups :)

[17:16] <benabik> Windows US International can use AltGr+[

[17:16] <GlitchMr> Why I would bother with "Character Map" if I want to insert just two characters

[17:16] <GlitchMr> [...

[17:16] <GlitchMr> Not helpful...

[17:17] <GlitchMr> I just get [ when doing that

[17:17] <TimToady> well, someday you might want to type Êó•Êú¨Ë™û too...

[17:17] <GlitchMr> ...

[17:17] <benabik> You probably have keyboard set to US, not US International

[17:17] <GlitchMr> –´–µ–∞—Ö, –∞–Ω–¥...

[17:17] <PerlJam> TimToady: I'd have to *really* stretch my imgaination for that one.

[17:17] * TimToady didn't start learning Japanese till about 7 years ago...

[17:17] <GlitchMr> benabik, I have keyboard set to Polish (programmer)

[17:18] *** masak joined
[17:18] <masak> \o/

[17:18] <flussence> /o\

[17:18] <GlitchMr> Or something like that

[17:18] <colomon> o/ o/

[17:18] <benabik> GlitchMr: Oh.  I don't know if there's a Polish International.

[17:18] <GlitchMr> Yeah...

[17:18] <GlitchMr> All I can do with AltGr is inserting Polish characters and Ä...

[17:19] <masak> got Twitter-privmsg'd from au++: she says it's as simple as this to get a dev env of Pugs: https://github.com/audreyt/Pugs.hs/blob/master/INSTALL#L42

[17:19] <masak> mberends: ^

[17:19] <masak> gotta try this myself.

[17:19] <masak> but first, outforarun. &

[17:20] *** GlitchMr left
[17:20] <masak> au_backlogging: oh, and thanks! :)

[17:33] <TimToady> perl6: constant @primes = 2, 3, -> $n is copy { repeat { $n += 2 } until $n %% none do for @primes -> $p { last if $p > sqrt($n); $p; }; $n; } ... *;  say ~@primes[^20];

[17:34] <p6eval> pugs: OUTPUT¬´*** ‚ê§    Unexpected "@primes"‚ê§    expecting "=", "::", context, ":" or "("‚ê§    at /tmp/Ge1uo8wjWn line 1, column 10‚ê§¬ª

[17:34] <p6eval> ..niecza v10-36-g241a2d8: OUTPUT¬´2 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39‚ê§¬ª

[17:34] <p6eval> ..rakudo 545638: OUTPUT¬´===SORRY!===‚ê§Cannot handle constant @primes with non-literal value yet at line 1, near "= 2, 3, ->"‚ê§¬ª

[17:34] <colomon> constant @primes, oooooo

[17:34] <TimToady> yes, Perl 6 can have infinite lazy constants

[17:35] *** mkramer joined
[17:35] <colomon> TimToady: that's very cool, and it's also cool that niecza already implements it!

[17:35] <TimToady> except for the "experimental errors"

[17:36] <TimToady> and in part it's because niecza is cheating

[17:36] <colomon> oh, bother, right.  I even checked the list and missed them

[17:37] <colomon> niecza: constant @fib = 1, 1, *+* ... *; say ~@fib[^20]

[17:37] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765‚ê§¬ª

[17:37] <colomon> niecza: constant @fib = 1, 1, *+* ... *; say ~@fib[200]

[17:37] *** mkramer1 left
[17:37] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´453973694165307953197296969697410619233826‚ê§¬ª

[17:41] *** wolfman2000 joined
[17:49] <colomon> niecza: constant @fib = 1, 1, *+* ... *; @fib[200] = 10; say ~@fib[200]

[17:49] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´10‚ê§¬ª

[17:50] <colomon> :\

[17:55] *** wamba joined
[17:56] <wamba> vedu?

[17:57] *** daniel-s joined
[18:00] *** mkramer left
[18:00] *** mkramer joined
[18:09] *** rml joined
[18:12] *** MayDaniel left
[18:18] <rml> hello all :-)

[18:18] <rml> I have a little question

[18:18] <sjohnson> rml: shoot

[18:18] <rml> I've pasted the related function here: http://pastebin.com/CiepdCqR

[18:18] <rml> a little function that treats an array as a stack

[18:19] <rml> and swaps the first two values

[18:19] <tadzik> Array @a is too much

[18:19] <tadzik> either Array $a or just @a

[18:19] <tadzik> Array @a is an array with elements of type Array

[18:19] <masak> rml: what tadzik++ said. the @ already conveys arrayhood.

[18:20] <rml> oh, that answers my question

[18:20] <masak> or at least positionalhood.

[18:20] <sjohnson> (=ÔæüœâÔæü=)

[18:20] <rml> thanks!

[18:20] <huf> tadzik: how do you say that with a $ variable? (an array of arrays)

[18:20] <masak> 'Array @a' means 'an array @a of arrays'

[18:20] <masak> huf: Array[Array] $a

[18:20] <masak> I guess.

[18:20] <tadzik> I think so

[18:20] <huf> aha!

[18:20] <huf> :)

[18:20] <masak> or maybe something out of S09.

[18:20] <masak> actually, I don't know how to specify dimensionality in signatures.

[18:21] <masak> or shape, for that matter.

[18:21] <huf> but there is some facility, isnt there?

[18:21] <huf> nothing user-visible is magical in p6, or?

[18:21] <masak> you can do most things with 'where' clauses :)

[18:21] <huf> (magical as in cannot fiddle with it freely in p6 code)

[18:22] <huf> (i'm hoping the usual "oh well, let's do it in XS then" thing wont come up with p6 ;))

[18:24] <rml>  /set beep_msg_level MSGS NOTICES DCC DCCMSGS HILIGHT

[18:24] * rml looks about, abashed

[18:27] *** risou is now known as risou_awy

[18:27] *** risou_awy is now known as risou

[18:29] <im2ee> How to change a character to hex representation? :)

[18:29] *** mberends joined
[18:30] <mberends> o/ from amsterdam.pm.org

[18:30] <sjohnson> im2ee: that one always confuses me.  i think it's pack() or something.  or maybe not.  i ended up always just using CPAN things to do it for me in perl 5

[18:30] <jlaire> perl6: say 'k'.ord.fmt('%02X')

[18:30] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´‚ê§Unhandled Exception: Unable to resolve method ord in class Str‚ê§  at /tmp/3l8_Uj0tk9 line 1 (MAIN mainline @ 1) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 2115 (CORE C1022_ANON @ 2) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 2116 (CORE module-COR‚Ä¶

[18:30] <p6eval> ..pugs, rakudo 545638: OUTPUT¬´6B‚ê§¬ª

[18:30] <[Coke]> .u ¬´

[18:30] <phenny> U+00AB LEFT-POINTING DOUBLE ANGLE QUOTATION MARK (¬´)

[18:31] <[Coke]> perl6: say '¬´'.ord.fmt('%04X');

[18:31] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´‚ê§Unhandled Exception: Unable to resolve method ord in class Str‚ê§  at /tmp/44AynrUcFM line 1 (MAIN mainline @ 1) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 2115 (CORE C1022_ANON @ 2) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 2116 (CORE module-COR‚Ä¶

[18:31] <p6eval> ..rakudo 545638: OUTPUT¬´00AB‚ê§¬ª

[18:31] <p6eval> ..pugs: OUTPUT¬´decodeUTF8': bad data: '\171'‚ê§00AB‚ê§¬ª

[18:34] <im2ee> Thanks. :)

[18:35] <im2ee> I forget... How to do "abc".split(''), but shorter?

[18:35] <flussence> nom: say 'abc'.comb.perl

[18:35] <p6eval> nom 545638: OUTPUT¬´("a", "b", "c").list‚ê§¬ª

[18:35] <im2ee> Thanks flussence++. :)

[18:36] <sjohnson> i can't wait till p6 comes pre-installed on ubuntu machines

[18:40] *** GlitchMr joined
[18:44] *** risou is now known as risou_awy

[18:48] <masak> sjohnson: why are you so eager for such an arbitrary and unlikely thing? :)

[18:49] <PerlJam> masak: what makes you think it's unlikely?

[18:50] <sjohnson> i use perl5 almost daily simply because it's ubiquious

[18:51] <masak> PerlJam: I'm not aware of which packages come pre-installed on Ubuntu machines, but I imagine Python and Ruby don't. Perl, yes. probably awk and sed too. but Perl 6? color me doubtful.

[18:51] * masak idly wonders how trolling works in ingy's abstract communities :)

[18:52] <sjohnson> masak: Python does yeah, but not ruby.

[18:52] <sjohnson> python's popularity is undeniable, methinks

[18:53] <sjohnson> i think ruby will too soon

[18:56] *** kfo_ left
[18:56] <masak> before Perl 6 comes bundled, there needs to be a reason to bundle it. like, a killer app. (hint, hint)

[18:56] <masak> and I don't mean software for assassins.

[18:56] *** kfo joined
[19:00] * colomon was going to make a Psycho Killer reference, but discovered the lyrics in his head don't come close to matching the printed version...

[19:06] *** birdwindupbird joined
[19:06] *** birdwindupbird left
[19:12] *** Juerd joined
[19:12] <Juerd> Hi :)

[19:12] <mberends> rakudo: say ^7.pick;

[19:12] <p6eval> rakudo 545638: OUTPUT¬´0..^7‚ê§¬ª

[19:12] <mberends> rakudo: say (^7).pick;

[19:12] <p6eval> rakudo 545638: OUTPUT¬´1‚ê§¬ª

[19:12] <colomon> rakudo: say (^7).pick;

[19:12] <p6eval> rakudo 545638: OUTPUT¬´0‚ê§¬ª

[19:13] <masak> hi Juerd!

[19:13] <BooK> it's a different value! there's a bug!!

[19:13] <mberends> Hi from Amsterdam.pm.org. Tetris demo soon!

[19:13] <Juerd> thr

[19:13] <Juerd> ee

[19:13] <Juerd> cha

[19:13] <Juerd> rs

[19:13] <Juerd> wid

[19:13] <Juerd> e

[19:13] <Juerd> :)

[19:14] <BooK> (pr

[19:14] <BooK> iva

[19:14] <BooK> te

[19:14] <BooK> jok

[19:14] <BooK> e

[19:14] <Juerd> lol

[19:14] <Juerd> BooK: )

[19:14] <BooK> much wider

[19:14] *** orafu joined
[19:18] <colomon> mberends: o/

[19:20] *** replore_ left
[19:24] *** envi_ left
[19:25] *** wamba left
[19:29] *** MayDaniel joined
[19:30] *** wolfman2000 left
[19:46] <tadzik> is there someone able to explain the problem of non-relocatable Parrot in simple words?

[19:46] <sjohnson> Ôºà„ÄÄ¬∞ „Éº¬∞Ôºâ

[19:46] <sjohnson> sounds confusing

[19:47] <tadzik> I'm trying to bring it up on #parrotsketch, but I'm unable to explain this

[19:47] <tadzik> I just know it blocks us sometimes

[19:49] <flussence> afaik: 

[19:49] <flussence> you can't compile parrot then move it afterwards without everything exploding

[19:50] <flussence> which made me give up trying to write an ebuild for it fairly rapidly :)

[19:50] <tadzik> would you be able to explain it on #parrotsketch?

[19:50] <cotto> where "move" means "install to somewhere other than the prefix"?

[19:50] <flussence> I'm terrible at explaining things, but what cotto said, yeah.

[19:51] <flussence> I think the same happens if you try to move the rakudo bits too

[19:51] <cotto> ok.  How is this causing issues for Rakudo?

[19:53] *** am0c left
[19:54] <flussence> not sure about other people's problems... but my package manager has a nifty feature that lets it install arbitrary directories to /usr. Doesn't work so well for rakudo because once it's compiled for one place, it's stuck there forever

[19:56] <arnsholt> flussence: Which package manager is that?

[19:56] <flussence> http://paludis.org/ :)

[19:57] <arnsholt> Huh. Cool

[19:57] <flussence> (be warned though, it's slow as molasses compared to pretty much any other PM ever)

[19:58] <flussence> (kinda like rakudo :)

[19:58] *** mj41 joined
[20:00] *** GlitchMr left
[20:01] <arnsholt> Hehe. I used gentoo a few years back and was reasonably happy with it

[20:01] *** benabik left
[20:01] <cotto> same here, but compiling got old

[20:01] *** benabik joined
[20:02] <cotto> well, compiling everything got old

[20:02] <arnsholt> Yeah, that was a bit annoying, but most of the time it was quick enough for me

[20:03] <arnsholt> Modulo upgrades, but I usually did those overnight

[20:04] <flussence> probably why I can tolerate compiling nom hundreds of times just for the sake of some graphs :)

[20:05] <arnsholt> Quite, quite

[20:10] *** pmurias left
[20:22] <masak> im2ee: so, how's it gone? written some code today? :)

[20:31] *** [Coke] left
[20:32] *** [Coke] joined
[20:40] *** scorpil joined
[20:41] *** colomon left
[20:49] *** kaare_ left
[20:50] *** mberends left
[20:51] *** MayDaniel left
[20:51] *** MayDaniel joined
[20:56] *** fantasym joined
[20:56] <fantasym> hi

[20:56] <masak> hi!

[20:57] <masak> rakudo: say "Rakudo Perl 6 welcomes you, fantasym ¬ª√∂¬´"

[20:57] <p6eval> rakudo 545638: OUTPUT¬´Rakudo Perl 6 welcomes you, fantasym ¬ª√∂¬´‚ê§¬ª

[20:57] <fantasym> im 38 m holl*nd  

[20:57] <masak> oh, a chatmosphere user...

[20:57] <masak> :/

[20:57] <masak> fantasym: heads-up notice: this is a channel about Perl 6.

[20:58] <masak> fantasym: generally, chatmosphere users are unaware of that fact when entering the channel.

[20:58] <fantasym> not good?  

[20:58] <masak> oh, you're certainly welcome here :)

[20:58] <masak> just try to stay on topic.

[20:58] *** packetknife left
[20:58] <fantasym> perl 6? 

[20:58] <masak> by the way, 38 meters is quite some height, especially in Holland!

[20:59] <masak> yeah, so. Perl 6 is a programming language. we solve problems with awesome syntax and semantics :)

[20:59] <fantasym> i know :) 

[21:00] <masak> text parsing, object orientation, you name it, we got it :)

[21:00] <fantasym> cool ! 

[21:00] *** MayDaniel left
[21:00] <masak> I know! :)

[21:00] *** fantasym left
[21:00] <tadzik> not cool enough

[21:00] <masak> come back soon! :)

[21:00] <tadzik> :)

[21:00] <benabik> hugme: hug Chatmosphere

[21:00] * hugme hugs Chatmosphere; benabik++

[21:01] <benabik> hugme gives karma?  Odd.

[21:01] <masak> tadzik: I imagine him folding over backwards before leaving through the door. geez, 38 meters...

[21:02] <jnthn> ...why did he censor holland? :)

[21:02] <tadzik> he must be a king of disco if he's able to get through the door wish such height

[21:02] <diakopter> hugme: hug diakopter

[21:02] * hugme hugs diakopter

[21:02] <tadzik> s/wish/with/

[21:02] <masak> jnthn: four letter w...? oh wait

[21:02] * moritz also hugs diakopter 

[21:02] * masak hugs diakopter too, just in case

[21:03] <diakopter> heh

[21:03] <tadzik> hugme: hug me

[21:03] * hugme hugs tadzik

[21:04] <moritz> GROUP HUG!

[21:04] <tadzik> if there will ever be a 'me' user on #perl6 he won't get many hugs I suppose :/

[21:04] * benabik hugs #perl6

[21:04] <tadzik> yay, sandwhich!

[21:04] <masak> where? :)

[21:04] <tadzik> phenny: "kanapka!"?

[21:04] <phenny> tadzik: "sandwich!" (pl to en, translate.google.com)

[21:04] <sjohnson> num num

[21:05] <tadzik> it's what we usually shout just before a spontaneous, group hug

[21:05] <sjohnson> phenny: "salut"

[21:05] <tadzik> it usually ends on the ground too

[21:05] <sjohnson> phenny: "salut"?

[21:05] <phenny> sjohnson: "salvation" (fr to en, translate.google.com)

[21:05] <sjohnson> phenny: "salut mec"?

[21:05] <phenny> sjohnson: "hello dude" (fr to en, translate.google.com)

[21:05] <masak> tadzik: TMI :)

[21:05] <tadzik> masak: oh, you can observe that on football matches and such

[21:05] <masak> I'm sure you can.

[21:06] <masak> actually, I'm just acting prude :P I do that too, sometimes.

[21:06] *** packetknife joined
[21:06] <tadzik> :)

[21:06] *** diakopter is now known as rakudo

[21:07] <masak> will probably hug a *lot* this weekend. it's the year's big Esperanto meetup in Sweden.

[21:07] <rakudo> phenny: tell rakudo say 389

[21:07] <phenny> You can tell yourself that.

[21:07] <tadzik> :P

[21:07] *** rakudo is now known as diakopter

[21:07] <masak> nice try.

[21:08] *** bluescreen10 left
[21:08] *** diakopter is now known as niecza

[21:08] <niecza> phenny: tell rakudo say 389

[21:08] <phenny> niecza: I'll pass that on when rakudo is around.

[21:08] <p6eval> niecza v10-36-g241a2d8: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Confused at /tmp/fj6DiG_yrX line 1:‚ê§------> [32mI'll pass that on when rakudo is around[33m‚èè[31m.[0m‚ê§‚ê§Undeclared name:‚ê§      'I'll' used at line 1‚ê§Undeclared routines:‚ê§     'around' used at line 1‚ê§        'is' used at line 1‚ê§   

[21:08] <p6eval> ..'on' used ‚Ä¶

[21:09] *** niecza is now known as rakudo

[21:09] <rakudo> .

[21:09] <phenny> rakudo: 21:08Z <niecza> tell rakudo say 389

[21:09] <p6eval> rakudo 545638: OUTPUT¬´===SORRY!===‚ê§Confused at line 1, near "21:08Z <ni"‚ê§¬ª

[21:09] *** rakudo is now known as diakopter

[21:09] <diakopter> oh wel

[21:09] <tadzik> nice one

[21:19] <im2ee> Good night! o/

[21:19] <tadzik> branoc

[21:19] <masak> 'branoc!

[21:20] *** im2ee left
[21:32] *** dorlamm joined
[21:35] *** benabik left
[21:37] *** benabik joined
[21:40] <masak> goodnoc, #perl6.

[21:41] <masak> dream of concrete communities with abstract hopes, dreams, and desires :)

[21:41] *** masak left
[21:42] <tadzik> (:

[21:44] *** mberends joined
[22:03] *** tokuhiro_ joined
[22:07] *** S11001001 joined
[22:08] *** ch3ck3r joined
[22:08] *** dorlamm left
[22:10] *** replore joined
[22:11] *** ch3ck left
[22:20] *** benabik left
[22:24] *** mj41 left
[22:40] *** kmwallio joined
[22:40] <[Coke]> tadzik: what's with the enormous forehead?

[22:40] *** frettled joined
[22:41] <tadzik> [Coke]: enormous forehead and no mouth?

[22:41] <[Coke]> aye. You look creepy.

[22:42] <[Coke]> (guy I went to school with always emoted upside down, too.)

[22:45] <tadzik> :)

[22:45] *** packetknife left
[22:45] <tadzik> sometimes I smile different

[22:46] *** packetknife joined
[22:46] *** replore left
[22:50] *** whiteknight joined
[23:03] *** foof joined
[23:04] <foof> my cat typed "]:[[[[[[[" over in #scheme - what do you think she's trying to format?

[23:05] *** preflex left
[23:07] <tadzik> that's an angry and sad face

[23:07] <tadzik> it looks a bit like a viking too

[23:07] <tadzik> g'night #perl6

[23:07] <mberends> o/

[23:08] *** preflex joined
[23:09] <diakopter> phenny: ask masak how many primes in the first 10^9 primes are primes when represented in a number system other than decimal, but interpreted as decimal, or vice versa?

[23:09] <phenny> diakopter: I'll pass that on when masak is around.

[23:11] <diakopter> phenny: ask masak ... or in any number system represented as another number system but interpreted as the original number system?

[23:11] <phenny> diakopter: I'll pass that on when masak is around.

[23:15] *** mberends left
[23:15] <diakopter> phenny: ask masak ... e.g. the prime X represented in base-X is 1, etc. that'll get you started.

[23:15] <phenny> diakopter: I'll pass that on when masak is around.

[23:16] <diakopter> phenny: ask masak er, scratch that last line ;)

[23:16] <phenny> diakopter: I'll pass that on when masak is around.

[23:17] <diakopter> (oops)

[23:20] *** kmwallio left
[23:22] *** benabik joined
[23:24] <jlaire> does that problem have an interesting solution?

[23:25] *** foof left
[23:25] <jlaire> sounds very ad-hoc

[23:26] <TimToady> I'd rather have masak working on pugs :)

[23:26] <diakopter> :/ sorry, yes it's ad-hoc

[23:27] <diakopter> it might have an interesting solution, I dunno.

[23:33] *** carlin left
[23:41] *** allbery_b is now known as geekosaur

[23:49] <plobsing_> diakopter: any number greater than 2 is representable as 11 in some base. or did I misunderstand the question?

[23:49] <sjohnson> perl6: internet

[23:49] <p6eval> pugs: OUTPUT¬´*** No such subroutine: "&internet"‚ê§    at /tmp/sEa1HANwKB line 1, column 1 - line 2, column 1‚ê§¬ª

[23:49] <p6eval> ..rakudo 545638: OUTPUT¬´Could not find sub &internet‚ê§  in block <anon> at /tmp/H4Khbec4jf:1‚ê§  in <anon> at /tmp/H4Khbec4jf:1‚ê§‚ê§¬ª

[23:49] <p6eval> ..niecza v10-36-g241a2d8: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Undeclared routine:‚ê§     'internet' used at line 1‚ê§‚ê§‚ê§Unhandled Exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 766 (CORE die @ 2) ‚ê§  at /home/p6eval/niecza/src/STD.pm6 line 1136 (STD P6.comp_unit @ 3‚Ä¶

[23:49] * ingy attempts to install pugs

[23:50] <diakopter> plobsing_: yep that's a good starting point.

[23:50] <plobsing_> starting point? that solves the question. the answer is "all of them".

[23:50] <plobsing_> unless you don't count 1 as prime

[23:50] <plobsing_> then it is "all but one"

[23:50] <diakopter> oh, I guess I was looking for a count of the pairings

[23:51] <plobsing_> oh, I only get to use one other base?

[23:51] <diakopter> any base and any other base..?

[23:52] <plobsing_> all your base are belong to primes

[23:52] <diakopter> but not Sentinel

[23:52] <benabik> Sentinel Prime is a dip.

[23:54] <plobsing_> yeah, I don't have a quick answer to that question, but perhaps there is one.

