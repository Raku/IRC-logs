[00:00] <TimToady> perl6: "foobar".comb(/oo/).say

[00:00] <p6eval> rakudo cbe898, niecza v10-23-g50e0320: OUTPUT«oo␤»

[00:00] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.16/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped b…

[00:00] <TimToady> is probably clearer with .comb anyway

[00:01] <soh_cah_toa> well, i was talking about how :adverbs don't seem to work

[00:01] <TimToady> especially since :g means very different things in p5's scalar vs list context

[00:01] <soh_cah_toa> perl6: "foobar" ~~ m:P5/oo/

[00:01] <p6eval> rakudo cbe898: OUTPUT«===SORRY!===␤Adverb 'P5' not allowed on m at line 1, near ""␤»

[00:01] <p6eval> ..pugs:  ( no output )

[00:01] <p6eval> ..niecza v10-23-g50e0320: OUTPUT«␤Unhandled Exception: Autoloading NYI␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 766 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 4608 (STD Regex.tweak @ 6) ␤  at /home/p6eval/niecza/src/STD.pm6 line 489 (STD C191_ANON @ 2) ␤  at /hom…

[00:02] <soh_cah_toa> perl6: "foobar" ~~ m:r/oo/

[00:02] <TimToady> perl6: say "FOOBAR" ~~ m:i/oo/

[00:02] <p6eval> rakudo cbe898, niecza v10-23-g50e0320:  ( no output )

[00:02] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.16/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped b…

[00:02] <p6eval> rakudo cbe898: OUTPUT«=> <>␤␤»

[00:02] <p6eval> ..niecza v10-23-g50e0320: OUTPUT«#<match from(1) to(3) text(OO) pos([].list) named({}.hash)>␤»

[00:02] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.16/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped b…

[00:03] <TimToady> nom: say "FOOBAR" ~~ m:i/oo/

[00:03] <p6eval> nom cbe898: OUTPUT«=> <>␤␤»

[00:03] <TimToady> say what?

[00:04] <colomon> nom: say "FOOBAR" ~~ m:/zz/

[00:04] <p6eval> nom cbe898: OUTPUT«===SORRY!===␤Confused at line 1, near "say \"FOOBA"␤»

[00:04] <colomon> nom: say "FOOBAR" ~~ m/zz/

[00:04] <p6eval> nom cbe898: OUTPUT«=> <>␤␤»

[00:04] <colomon> nom: say "FOOBAR" ~~ m/OO/

[00:04] <p6eval> nom cbe898: OUTPUT«=> <OO>␤␤»

[00:04] <soh_cah_toa> i guess it's just the :g and P5 adverbs

[00:05] <TimToady> well, it's not exactly doing :i either...

[00:05] <TimToady> nom: say "FOOBAR" ~~ m/:i oo/

[00:05] <p6eval> nom cbe898: OUTPUT«=> <>␤␤»

[00:05] <soh_cah_toa> yeah, that too

[00:05] <TimToady> nom: say "FOOBAR" ~~ /:i oo/

[00:05] <p6eval> nom cbe898: OUTPUT«=> <>␤␤»

[00:05] <jnthn> ugh

[00:05] <jnthn> Guess that can be my entry point to QRegex hacking. :/

[00:06] <TimToady> er...have the appropriate amount of fun...

[00:07] <soh_cah_toa> perl6: "foobar" ~~ /<!before f> oo/

[00:07] <p6eval> niecza v10-23-g50e0320:  ( no output )

[00:07] <p6eval> ..rakudo cbe898: OUTPUT«Method 'before' not found for invocant of class 'Cursor'␤  in regex <anon> at /tmp/EWvbvu_6Kd:1␤  in method ACCEPTS at src/gen/CORE.setting:6252␤  in block <anon> at /tmp/EWvbvu_6Kd:1␤  in <anon> at /tmp/EWvbvu_6Kd:1␤␤»

[00:07] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.16/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped b…

[00:07] <soh_cah_toa> perl6: say "foobar" ~~ /<!before f> oo/

[00:07] <p6eval> rakudo cbe898: OUTPUT«Method 'before' not found for invocant of class 'Cursor'␤  in regex <anon> at /tmp/uZYrM3dDgA:1␤  in method ACCEPTS at src/gen/CORE.setting:6252␤  in block <anon> at /tmp/uZYrM3dDgA:1␤  in <anon> at /tmp/uZYrM3dDgA:1␤␤»

[00:07] <p6eval> ..niecza v10-23-g50e0320: OUTPUT«#<match from(1) to(3) text(oo) pos([].list) named({}.hash)>␤»

[00:07] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.16/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped b…

[00:07] <jnthn> TimToady: Well, having a bus number of 1 on the regex engine is proving...painful...for Rakudo :(

[00:09] <soh_cah_toa> perl6: say "foobar" ~~ /<!before _> oo/

[00:09] <p6eval> rakudo cbe898: OUTPUT«Method 'before' not found for invocant of class 'Cursor'␤  in regex <anon> at /tmp/rQaDsUPA7j:1␤  in method ACCEPTS at src/gen/CORE.setting:6252␤  in block <anon> at /tmp/rQaDsUPA7j:1␤  in <anon> at /tmp/rQaDsUPA7j:1␤␤»

[00:09] <p6eval> ..niecza v10-23-g50e0320: OUTPUT«#<match from(1) to(3) text(oo) pos([].list) named({}.hash)>␤»

[00:09] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.16/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped b…

[00:09] <dalek> rakudo/nom: 3bc839c | jnthn++ | src/ops/perl6.ops:

[00:09] <dalek> rakudo/nom: Make the shiftpush op a bunch more efficient when handling more than a single element. We still call it with 1 far, far too often, but this helps for the other cases. for 1..100000 { } gets 3 times faster with this patch, for example.

[00:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3bc839c00e

[00:09] <soh_cah_toa> ng: say "foobar" ~~ /<!before _> oo/

[00:11] <TimToady> and just to make jnthn's day...

[00:11] <TimToady> perl6: my $x = <a b c d>; say %$x.perl

[00:11] <p6eval> pugs: OUTPUT«*** Cannot cast into Hash: VRef <Array:0x7f0154cbc7c9>␤    at /tmp/FQXywA6RWY line 1, column 24 - line 2, column 1␤»

[00:11] <p6eval> ..rakudo cbe898: OUTPUT«===SORRY!===␤Non-declarative sigil is missing its name at line 1, near "%$x.perl"␤»

[00:11] <p6eval> ..niecza v10-23-g50e0320: OUTPUT«{"a" => "b", "c" => "d"}.hash␤»

[00:11] <soh_cah_toa> ugh, seems like i run into every nyi feature when i need it most :(

[00:12] <jnthn> TimToady: moritz already asked me about that one today...

[00:12] <TimToady> yes, why I brought it up

[00:12] <colomon> nom: say "FOOBAR".match(/oo/, :i)

[00:12] <p6eval> nom cbe898: OUTPUT«=> <>␤␤»

[00:12] <TimToady> last I heard you were hoping %$x <> %($x)

[00:13] <jnthn> TimToady: no, no

[00:13] <TimToady> but that's always how it's been, afaik

[00:13] <jnthn> TimToady: moritz++ accidentally suggested @$x <> %($x) :)

[00:13] <TimToady> mkay

[00:13] <jnthn> Or some such :)

[00:14] <soh_cah_toa> perl6: say "foobar".match(/oo/, :g)

[00:14] <p6eval> niecza v10-23-g50e0320: OUTPUT«␤Unhandled Exception: Excess arguments to CORE Cool.match, unused named g␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (CORE Cool.match @ 0) ␤  at /tmp/DJ7n97nqlF line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2115 (CORE C10…

[00:14] <p6eval> ..rakudo cbe898: OUTPUT«oo␤»

[00:14] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.16/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped b…

[00:14] <jnthn> TimToady: %$var...is parsed by variable?

[00:14] <soh_cah_toa> wonderful...

[00:15] <TimToady> jnthn: yes, via desigilname

[00:15] <TimToady> desigilname only takes off one sigil at a time

[00:16] <TimToady> and calls back to <variable> recursively if before a $

[00:17] <jnthn> ah, got it.

[00:18] <jnthn> OK, doesn't look too hard.

[00:19] <jnthn> But making iteration 3 times fasters has made me kinda sleeply. So, tomorrow. :)

[00:19] <jnthn> *faster

[00:20] <TimToady> (making iteration 3 time faster)++

[00:20] <TimToady> *times

[00:20] <jnthn> for 1..100000 { } still seems to spend 80% of its time in memmove though o.O

[00:20] <TimToady> let's see the karma bot figger *that* out...

[00:20] <jnthn> oh, that's 200000...it isn't linear.

[00:21] <jnthn> Ugh.

[00:22] <colomon> jnthn++

[00:43] *** MayDaniel left
[00:50] *** mkramer joined
[00:54] *** whiteknight left
[00:56] *** Rob__ joined
[00:57] *** mkramer left
[00:58] *** mkramer joined
[01:02] *** rgrau joined
[01:04] *** mkramer left
[01:05] *** mkramer joined
[01:11] *** mkramer left
[01:13] *** mkramer joined
[01:23] *** Rob__ left
[02:57] *** donri left
[03:22] *** envi joined
[03:28] *** kmwallio left
[03:52] *** tokuhiro_ joined
[03:56] *** poisonarms joined
[03:58] *** espadrine left
[04:00] *** espadrine joined
[04:00] <mberends> masak++ # first macro merge

[04:06] *** soh_cah_toa left
[04:09] *** am0c joined
[04:17] <[Coke]> I didn't see it mentioned, but thinkgeek's email newsletter name dropped Larry about his birthday.

[04:29] *** icwiener left
[04:49] <dalek> rakudo/nom: 80ee09e | Coke++ | t/spectest.data:

[04:49] <dalek> rakudo/nom: track failure modes.

[04:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/80ee09e010

[04:50] *** risou_awy is now known as risou

[04:51] *** cooper left
[04:53] *** Chillance left
[05:01] *** Limbic_Region left
[05:28] *** cognominal___ joined
[05:31] *** cognominal_ left
[05:32] *** cognominal_ joined
[05:32] *** eternaleye joined
[05:34] *** kaare_ joined
[05:35] *** cognominal___ left
[05:35] *** cognominal___ joined
[05:37] *** cognominal___ left
[05:37] *** cognominal___ joined
[05:38] *** cognominal_ left
[05:48] <mberends> rakudo: my @m = [1 xx 2] xx 3; say @m.perl;

[05:48] <p6eval> rakudo 80ee09: OUTPUT«Array.new(1, 1, 1, 1, 1, 1)␤»

[05:48] <mberends> niecza: my @m = [1 xx 2] xx 3; say @m.perl;

[05:48] <p6eval> niecza v10-23-g50e0320: OUTPUT«[[1, 1], [1, 1], [1, 1]].list␤»

[06:10] *** gbacon left
[06:17] *** wamba joined
[06:18] *** tokuhiro_ left
[06:33] *** GlitchMr joined
[06:35] *** sayu joined
[06:40] *** beekor joined
[06:45] *** snarkyboojum left
[06:45] *** snarkyboojum joined
[06:45] *** snarkyboojum left
[06:45] *** snarkyboojum joined
[06:53] <mberends> rakudo: my @m; @m[2]="A"; say @m; @m[2][0]="B"; say @m;

[06:53] <p6eval> rakudo 80ee09: OUTPUT«Use of uninitialized value in string context␤Use of uninitialized value in string context␤  A␤Cannot assign to a non-container␤  in block <anon> at /tmp/Q9FjmbDJBN:1␤  in <anon> at /tmp/Q9FjmbDJBN:1␤␤»

[06:54] <mberends> b: my @m; @m[2]="A"; say @m; @m[2][0]="B"; say @m;

[06:54] <p6eval> b 1b7dd1: OUTPUT«Any()Any()A␤Any()Any()B␤»

[06:54] <mberends> pugs: my @m; @m[2]="A"; say @m; @m[2][0]="B"; say @m;

[06:54] <p6eval> pugs: OUTPUT«A␤*** Can't modify constant item: VStr "A"␤    at /tmp/PtSFO41ELz line 1, column 27-39␤»

[06:58] *** pmurias joined
[07:02] *** risou is now known as risou_awy

[07:13] *** GlitchMr42 joined
[07:16] <moritz> good morning

[07:16] <moritz> TimToady: if === is supposed to autothread over junctions, does that mean you can't test Mu === Mu?

[07:16] *** GlitchMr left
[07:17] <sorear> hello, moritz

[07:17] <moritz> hm right, S03 says so

[07:17] <moritz> \o sorear 

[07:18] <dalek> roast: da526e3 | moritz++ | S03-operators/value_equivalence.t:

[07:18] <dalek> roast: remove Mu tests for ===

[07:18] <dalek> roast: review: https://github.com/perl6/roast/commit/da526e368b

[07:20] <moritz> perl6: sub f(%a = ()) { say %a.perl }; f()

[07:20] <p6eval> pugs: OUTPUT«{}␤»

[07:20] <p6eval> ..niecza v10-23-g50e0320: OUTPUT«()␤»

[07:20] <p6eval> ..rakudo 80ee09: OUTPUT«Nominal type check failed for parameter '%a'; expected Associative but got Parcel instead␤  in sub f at /tmp/oznep0oRBh:1␤  in block <anon> at /tmp/oznep0oRBh:1␤  in <anon> at /tmp/oznep0oRBh:1␤␤»

[07:20] <moritz> pugs++

[07:21] <moritz> niecza is really wrong here

[07:21] <moritz> rakudo too

[07:21] <moritz> something with the % sigil cannot hold a Parce

[07:21] <mberends> niecza: my @m = [1 xx 2] xx 3; @m[0][0] = 2; say @m.perl # sorear: binding instead of assignment?

[07:21] <p6eval> niecza v10-23-g50e0320: OUTPUT«[[2, 1], [2, 1], [2, 1]].list␤»

[07:22] <moritz> mberends: the problem is that [] xx 3 returns the *same* array 3 times

[07:22] <moritz> mberends: so niecza is correct here

[07:24] <mberends> # locally got: [[2, 1], [2, 1], [2, 1]].list expected: [[2, 1], [1, 1], [1, 1]].list

[07:24] <dalek> roast: 8187463 | moritz++ | S32-temporal/DateTime-Instant-Duration.t:

[07:24] <dalek> roast: avoid useless default value

[07:24] <dalek> roast: review: https://github.com/perl6/roast/commit/81874639c9

[07:24] <moritz> mberends: well, that test is bogus then

[07:27] <mberends> moritz: thanks, it's only a local test, I'll rewrite my code :)

[07:29] *** hanekomu joined
[07:30] <sorear> moritz: I think rakudo is right-est here.  niecza is just showing the old "no roles"

[07:30] <sorear> moritz: if you want my %h = () semantics, use 'is copy'

[07:30] * sorear heads to sleep

[07:30] <dalek> roast: 9fb628f | moritz++ | S32-temporal/DateTime-Instant-Duration.t:

[07:30] <dalek> roast: correct previous commit

[07:30] <dalek> roast: review: https://github.com/perl6/roast/commit/9fb628fcf5

[07:32] <dalek> rakudo/nom: a78398a | moritz++ | src/core/ (2 files):

[07:32] <dalek> rakudo/nom: avoid assigning defaults of wrong type

[07:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a78398a89c

[07:36] *** molaf joined
[07:41] <Woodi> hallo

[07:42] <dalek> roast: fe02f96 | moritz++ | S02-types/array.t:

[07:42] <dalek> roast: test for RT #76676, indexing an array with a range clips to the exisiting elements

[07:42] <dalek> roast: review: https://github.com/perl6/roast/commit/fe02f963d7

[07:42] <Woodi> I read yesterday such strange sentence - it says "modern Web languages" and later "Ruby" and "Python"...

[07:43] <dalek> roast: 23dd35a | moritz++ | S03-junctions/misc.t:

[07:43] <dalek> roast: remove more outdated === tests

[07:43] <dalek> roast: review: https://github.com/perl6/roast/commit/23dd35a3c9

[07:43] * Woodi know it's about that languages libraries not core

[07:44] <moritz> TimToady: should eqv also be limited to Any?

[07:44] <Woodi> so: what functionality make language "modern" for the Web ?

[07:44] <moritz> Woodi: well, those languages gained a lot of users due to web stuff

[07:45] <Woodi> rails, but i look for some general-but-practical definition :)

[07:46] <Woodi> to use in Perl context :)

[07:48] <mberends> Woodi: imho languages designed later than html and http would qualify as recent enough, but "modern" is a slippery term, like "new" ;)

[07:49] <moritz> hey, perl is even postmodern :-)

[07:55] <dalek> roast: 9e5e20c | moritz++ | S16-io/say.t:

[07:55] <dalek> roast: correct say.t, and add a test for .print

[07:55] <dalek> roast: review: https://github.com/perl6/roast/commit/9e5e20c3cc

[08:01] <GlitchMr42> rakudo: eval("sub perl{42}") for <perl is nice language at least for me>; print erl && language || is nice(at least for me)

[08:01] <p6eval> rakudo a78398: OUTPUT«===SORRY!===␤Non-declarative sigil is missing its name at line 1, near "&& languag"␤»

[08:01] <GlitchMr42> rakudo: eval("sub perl{42}") for <perl is nice language at least for me>; print perl && language || is nice(at least for me)

[08:01] <p6eval> rakudo a78398: OUTPUT«===SORRY!===␤Non-declarative sigil is missing its name at line 1, near "&& languag"␤»

[08:01] <GlitchMr42> niecza: eval("sub perl{42}") for <perl is nice language at least for me>; print perl && language || is nice(at least for me)

[08:01] <p6eval> niecza v10-23-g50e0320: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Non-declarative sigil is missing its name at /tmp/oFBEGuIsXk line 1:␤------> [32me language at least for me>; print perl [33m⏏[31m&& language || is nice(at least for me)[0m␤␤Use of uninitialized value in string context␤ …

[08:09] <mberends> GlitchMr42: where is 'language' defined?

[08:10] *** daniel-s joined
[08:17] *** im2ee joined
[08:17] <im2ee> Hello! :)

[08:19] <mberends> hello im2ee!

[08:29] <dalek> niecza: 2e3e4ba | (Paweł Murias)++ | / (3 files):

[08:29] <dalek> niecza: Perl 5 methods can return a value.

[08:29] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2e3e4bad3f

[08:33] *** MayDaniel joined
[08:41] <pmurias> mberends: i get System.DllNotFoundException: gdiplus.dll when trying to run the notepad example

[08:43] <mberends> pmurias: I  have no idea where that dependency comes from, here on Ubuntu there is no gdiplus installed :(

[08:45] *** tokuhiro_ joined
[08:49] <pmurias> mberends: turns out i had to install that when building a mono from source but i didn't

[08:51] <mberends> pmurias: good :)  please forgive small notepad deficiencies, patches welcome

[08:52] *** tokuhiro_ left
[08:54] <Woodi> what are steps to use niecza on Linux ? assuming I have distro with good repository like Debian :)

[08:58] <mberends> Woodi: something like: sudo apt-get install mono-gmcs libmono-dev libmono-system2.0-cil # and maybe some others

[09:00] <pmurias> Woodi: then clone niecza from github

[09:00] <pmurias> Woodi: and type make

[09:01] <pmurias> Woodi: if you encounter problems mention them on the channel

[09:09] *** GlitchMr42 is now known as GlitchMr

[09:10] <GlitchMr> rakudo: eval"print 42"

[09:10] <p6eval> rakudo a78398: OUTPUT«===SORRY!===␤Confused at line 1, near "eval\"print"␤»

[09:10] <GlitchMr> rakudo: eval "print 42"

[09:10] <p6eval> rakudo a78398: OUTPUT«42»

[09:10] <GlitchMr> No Perl 5 like function"arg" :).

[09:10] <GlitchMr> I like it :).

[09:11] *** MayDaniel left
[09:12] <dalek> niecza: 7dbc457 | (Paweł Murias)++ | examples/term-ansicolor.pl:

[09:12] <dalek> niecza: Add example which prints out "Hello Colorful World" using p5

[09:12] <dalek> niecza: Term::ANSIColor.

[09:12] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7dbc45731f

[09:12] <mberends> ooh!

[09:23] <moritz> fwiw making === autothread breaks lots of spectests that assume you can compare type objects with ===

[09:23] <moritz> now what should I use for asking "are those two type objects the same?"

[09:28] *** orafu left
[09:28] *** orafu joined
[09:29] <dalek> niecza: e1988ad | (Paweł Murias)++ | / (3 files):

[09:29] <dalek> niecza: Perl 6 string can be converted to Perl 5 strings.

[09:29] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e1988ad775

[09:30] <dalek> roast: ac7ea9d | moritz++ | S (2 files):

[09:30] <dalek> roast: correct or remove tests that assume you can compare type objects with ===

[09:30] <dalek> roast: review: https://github.com/perl6/roast/commit/ac7ea9d249

[09:33] *** cognominal joined
[09:34] <mberends> pmurias: this is happening to all p5 examples locally: https://gist.github.com/1257273

[09:35] *** cognominal___ left
[09:35] <dalek> rakudo/nom: f7cc866 | moritz++ | src/core/ (2 files):

[09:35] <dalek> rakudo/nom: infix === is an Any operator

[09:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f7cc866609

[09:35] <dalek> rakudo/nom: 3515e47 | moritz++ | src/core/ (2 files):

[09:35] <dalek> rakudo/nom: fix Dateish.truncate-parts signature; simplify eqv

[09:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3515e47b48

[09:41] <dalek> niecza: 935bc30 | (Paweł Murias)++ | / (3 files):

[09:41] <dalek> niecza: Perl 5 code refs are invokable.

[09:41] <dalek> niecza: examples/term-ansicolor.pl now makes use of that.

[09:41] <dalek> niecza: review: https://github.com/sorear/niecza/commit/935bc30925

[09:41] <pmurias> mberends: hmm

[09:41] <pmurias> mberends: you typed "make perl5"?

[09:42] <mberends> pmurias: yes. now git pulled again and made perl5, same result

[09:43] <pmurias> no exception message at all?

[09:43] <pmurias> just a segfault?

[09:44] <mberends> pmurias: that's the strange thing, no message at all above the stacktrace

[09:45] <dalek> niecza: ee9b534 | (Paweł Murias)++ | lib/p5embed.c:

[09:45] <dalek> niecza: Add debugging statements to p5 eval.

[09:45] <dalek> niecza: review: https://github.com/sorear/niecza/commit/ee9b534a73

[09:45] <pmurias> meraxes: try with that

[09:45] <mberends> pmurias: ok

[09:47] <mberends> says # evaling code... Stacktrace: at (wrapper managed-to-native) Perl5Interpreter.EvalPerl5

[09:48] <pmurias> do you have a threading perl?

[09:49] <tadzik> task for today: Perl6TheBook.mobi

[09:50] <pmurias> tadzik: you have a kindle?

[09:50] <tadzik> pmurias: yep

[09:50] <tadzik> pmurias: and I have a friend who wants a .mobi too :)

[09:50] <mberends> pmurias: yes, perl -V includes USE_ITHREADS and some Debian threads patches

[09:52] <pmurias> mberends: you get the same error with just eval("1",:lang<perl5>)?

[09:53] <dalek> roast: c47bf35 | moritz++ | S05-grammar/action-stubs.t:

[09:53] <dalek> roast: test that make({}) sets .ast to a Hash (RT #78510)

[09:53] <dalek> roast: review: https://github.com/perl6/roast/commit/c47bf3570c

[09:53] <pmurias> tadzik: what do you read on the kindle? i have one too but it seems hard to find interesting books that display correctly on that

[09:53] <mberends> pmurias: yes, exactly the same, also initially # evaling code...

[09:54] <mberends> pmurias: I'll install a local perlbrew, that will take a few minutes

[09:55] <moritz> rakudo: class A {}; subset B of A; say A ~~ B; say B ~~ A

[09:55] <p6eval> rakudo a78398: OUTPUT«Bool::True␤Bool::True␤»

[10:03] <dalek> niecza: 9443cf8 | (Paweł Murias)++ | lib/p5embed.c:

[10:03] <dalek> niecza: some more debugging statements

[10:03] <dalek> niecza: review: https://github.com/sorear/niecza/commit/9443cf83dd

[10:04] <pmurias> mberends: how far does it get now?

[10:05] <mberends> pmurias: # initialising perl # initialised perl # evaling code <1>... Stacktrace:

[10:07] <mberends> pmurias: # initialising perl # initialised perl # evaling code <use Term::ANSIColor;>... Stacktrace:

[10:07] <tadzik> pmurias: currently SICP, I read the Pragmatic Programmer recently, I also have a nicely-formatted Operating Systems Design and Implementation

[10:08] <tadzik> pmurias: also non-technical stuff, like HPatMoR, some good, ol' SF, The God Delusion recently

[10:10] <Woodi> thanx pmurias++ :) will try

[10:13] <tadzik> pmurias: I'm yet to see a book in which the source code will be readable :)

[10:16] <dalek> roast: d7a95cb | moritz++ | S12-subset/subtypes.t:

[10:16] <dalek> roast: tests for RT #78748

[10:16] <dalek> roast: review: https://github.com/perl6/roast/commit/d7a95cbe8c

[10:17] <moritz> rakudo: say %*ENV.exists('FOO'); say %*ENV<FOO>.defined;

[10:17] <p6eval> rakudo 3515e4: OUTPUT«Bool::False␤Bool::False␤»

[10:19] <GlitchMr> rakudo: say $A.defined

[10:19] <p6eval> rakudo 3515e4: OUTPUT«===SORRY!===␤Symbol '$A' not predeclared in <anonymous> (/tmp/6S1lKBG9to:1)␤»

[10:19] <GlitchMr> rakudo: eval "my \$$_" for 'A'..'Z', 'a'..'z';say $A.defined

[10:19] <p6eval> rakudo 3515e4: OUTPUT«===SORRY!===␤Symbol '$A' not predeclared in <anonymous> (/tmp/wHDnHT3LR2:1)␤»

[10:20] <GlitchMr> rakudo: $_='a'; say "my \$$_"

[10:20] <p6eval> rakudo 3515e4: OUTPUT«my $a␤»

[10:20] <GlitchMr> ...

[10:20] <GlitchMr> Oh, I see... eval

[10:20] <GlitchMr> rakudo: eval "our \$$_" for 'A'..'Z', 'a'..'z';say $A.defined

[10:20] <p6eval> rakudo 3515e4: OUTPUT«===SORRY!===␤Symbol '$A' not predeclared in <anonymous> (/tmp/lejP7WvQ2v:1)␤»

[10:20] *** GlitchMr left
[10:20] *** GlitchMr joined
[10:21] <GlitchMr> lol I accidental part

[10:23] <mberends> GlitchMr: Perl 6 is always like P5's use strict 'refs';

[10:25] <dalek> roast: bd97a90 | moritz++ | S02-magicals/env.t:

[10:25] <dalek> roast: test non-existing env variables

[10:25] <dalek> roast: review: https://github.com/perl6/roast/commit/bd97a90c01

[10:32] *** espadrine left
[10:32] *** espadrine joined
[10:39] <pmurias> mberends: did you try on a newely brewed perl?

[10:39] <dalek> niecza: 8dbcaa8 | (Paweł Murias)++ | lib/Perl5Interpreter.cs:

[10:39] <dalek> niecza: one more debug statement

[10:39] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8dbcaa8b95

[10:40] <mberends> pmurias: waiting for the brew to finish. Will try this update with resident perl.

[10:40] <pmurias> the update won't help much

[10:41] <mberends> yep, just the same output

[10:43] *** risou_awy is now known as risou

[10:44] <jnthn> afternoon o/

[10:44] <mberends> o/ jnthn

[10:47] *** beekor left
[10:51] *** am0c left
[10:53] <dalek> niecza: bf4e20a | (Paweł Murias)++ | lib/p5embed.c:

[10:53] <dalek> niecza: remove suspect PERL_SET_CONTEXT

[10:53] <dalek> niecza: review: https://github.com/sorear/niecza/commit/bf4e20a7c3

[10:53] <pmurias> mberends: could you check with that commit, found a dubious cargo culted statement

[10:54] <mberends> pmurias: sure

[10:55] <mberends> pmurias: exact same # initialising perl # initialised perl # evaling code <use Term::ANSIColor;>... Stacktrace:

[11:03] *** whiteknight joined
[11:07] *** replore_ joined
[11:12] <dalek> roast: 17393d0 | moritz++ | S03-operators/value_equivalence.t:

[11:12] <dalek> roast: wee rakudo unfudge

[11:12] <dalek> roast: review: https://github.com/perl6/roast/commit/17393d0281

[11:19] <jnthn> Aww...just a wee one. :)

[11:26] <ingy> q: which is a better name for a module dealing with p6 regexes?: Foo::P6Regex Foo::P6Rules Foo::Perl6 Foo::Perl6Regexes Foo::Perl6Rulez

[11:27] <ingy> what's your name du jour?

[11:29] *** im2ee_ joined
[11:30] *** im2ee_ left
[11:33] *** im2ee left
[11:36] *** Patterner left
[11:39] *** im2ee joined
[11:41] *** Psyche^ joined
[11:41] *** Psyche^ is now known as Patterner

[11:51] *** sayu left
[11:52] <dalek> nqp: b6f7885 | tadzik++ | VERSION:

[11:52] <dalek> nqp: Bump VERSION, sirmacik++ for noticing

[11:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b6f78850cf

[11:53] <tadzik> long story short, 2011.09 release is a fail

[11:53] <tadzik> it uses VERSION for gen-version.pl, and Rakudo recognises 2011.09 as 2011.05

[11:57] <tadzik> my guess is that no one noticed, because everyone uses everything straight from git

[11:58] *** bbkr joined
[11:58] <mberends> yes, no worries. As long as it's fixed for the long term.

[11:58] <tadzik> I'll poke the case on #phasers, I suppose nqp needs to be released as carefully as rakudo now

[11:59] <tadzik> well, "no worries", I am worried, archlinux maintainers are now going crazy trying to package rakudo

[12:00] <tadzik> debianeers will probably go crazy too if only they updated their repos more often than once a year :P

[12:01] <Woodi> tadzik: well, I tried to write some module and best choice was to implement for Rakudo 2011.07, which is Star i think...

[12:02] <Woodi> bleeding edge requires recompiling after every dalek++ notice :)

[12:04] <flussence> (I've considered writing a script to check github's rss and do it for me...)

[12:04] <Woodi> but this makes problem... somethink work on Star and not on nom branch - i use deprecated feature or still broken in dev branch ??

[12:05] <Woodi> flussence: but before compilation finishes there is new commit announced :)

[12:07] <Woodi> eg:

[12:07] <Woodi> rakudo: class A { our %h = { 'a' => 1, 'b' => 2 } }

[12:07] <p6eval> rakudo 3515e4: OUTPUT«Method 'STORE' not found for invocant of class 'Any'␤  in <anon> at /tmp/jMPRTnbZIN:1␤  in block <anon> at /tmp/jMPRTnbZIN:1␤  in <anon> at /tmp/jMPRTnbZIN:1␤␤»

[12:09] <tadzik> new problem: Riga release depends on 2011.09-8-ge3d5c8b, not 2011.09

[12:09] <Woodi> or it is module vs class problem ? i would like to move our variable to package level but package cannot be named with same name as class, so i need to change class name to something strange for me...

[12:09] <tadzik> I suppose that might be my fault, which shows how we need to modify release_guide

[12:10] <moritz> tadzik: I don't think it's a problem that riga depends on 2011.09-8-ge3d5c8b

[12:11] <tadzik> moritz: so which nqp does a maintainer need to install, if he doesn't use --gen-nqp?

[12:11] <moritz> tadzik: 2011.09-8-ge3d5c8b

[12:11] <sirmacik> moritz: try to make its package for archlinux >.<

[12:11] <Woodi> tadzik: it would be nice to set 'official' script for github-cloning of parrot-nqp-rakudo repositories to help packagers :)

[12:11] <tadzik> moritz: does github allow us to download this specific release?

[12:11] *** ron__ joined
[12:11] <moritz> sirmacik: not hard if you are familiar with tar and git

[12:11] <tadzik> Woodi: yeah, thinking about it

[12:12] <moritz> tadzik: no, but we can make it so

[12:12] <tadzik> moritz: the point is that the package will be built by the user with a script written by the maintaner, and the user does not neceserilly have git

[12:12] <tadzik> it is possible to list git as a dependency, but we wanted to avoid that

[12:13] <jnthn> I thought we tended to encourage people to package R* releases, not compiler ones?

[12:13] <moritz> I'll create an nqp tarball

[12:13] <Woodi> eg: cat go.perl6.sh: git clone rakudo-repo; git clone nqp-`cat NQP_VERSION`; git clone parrot-`cat parrot_ver`

[12:13] <jnthn> class A { our %h = { 'a' => 1, 'b' => 2 } } # some bug here.

[12:14] <jnthn> If there's not one already, an RT ticket would be good.

[12:14] <Woodi> k

[12:14] <sirmacik> jnthn: on archlinux rakudo won't build without pre-installed parrot

[12:15] <Woodi> sirmacik: rakudo requires parrot everywhere :)

[12:15] <sirmacik> and --gen-nqp won't build on latest parrot from distribution repository 

[12:15] <tadzik> I'll raise the non-relocatable parrot issue on #ps this week, this has to stop

[12:15] <tadzik> even Star suffers from this burden

[12:16] <sirmacik> that's why we're trying to buid nqp package

[12:16] <Woodi> tadzik: pls touch concurency subject in parrot too :)

[12:17] <moritz> Woodi: that's a much longer path

[12:17] <ingy> I'll ask again..

[12:17] <ingy> q: which is a better name for a module dealing with p6 regexes?: Foo::P6Regex Foo::P6Rules Foo::Perl6 Foo::Perl6Regexes Foo::Perl6Rulez

[12:18] <ingy> I don't really know what the official name is

[12:18] <tadzik> Woodi: that's a matter of more than asking nicely :P

[12:19] <moritz> https://github.com/perl6/nqp/downloads/ now has an nqp tarball of the correct version

[12:19] <moritz> I just don't know if it identifies itself correctly to rakudo's Configure.pl

[12:19] *** mauke left
[12:20] *** dorlamm joined
[12:20] <moritz> ah, I start to see the problem

[12:20] <moritz> tadzik: do you want to make a 2011.09.1 release or so?

[12:20] <mberends> ingy: Foo::Perl6Regexes looks the most intuitive

[12:20] <jnthn> ingy: Prefer "Perl 6" over "P6", I think we tend to call them rules over regexes.

[12:20] <tadzik> moritz: of Rakudo?

[12:21] <moritz> tadzik: if that's necessary, yes

[12:21] <tadzik> moritz: mebbe

[12:21] <tadzik> but what do we change in it?

[12:21] <tadzik> so a new nqp release, then a new rakudo release, targeting the fixed nqp release?

[12:21] <ingy> I like Rules better

[12:22] <moritz> tadzik: bump NQP_REVISION again, and note where a tarball of nqp can be found, maybe

[12:22] <ingy> but Regexes seemed a little more asserted in S05

[12:22] <moritz> tadzik: though I'm not fully here mentally...

[12:22] <tadzik> me neither

[12:23] <moritz> ingy: the advantage of 'regexes' is that people know what we mean

[12:24] <ingy> moritz: kinda, but people don't think of regexes as PEG parser grammars, which is what they are

[12:24] <ingy> even if you use them where you'd use a regexp

[12:25] <ingy> anyway, I'll start using rules when I more mean grammars

[12:26] <moritz> ingy: most people don't know about PEG at all

[12:26] <moritz> even most programmers

[12:26] <moritz> if you mean grammar, maybe say "grammar"?

[12:26] <ingy> well s/PEG/bnf|recdescent|etc

[12:27] <ingy> grammar is a generic term

[12:27] <ingy> I'm looking for a term that encapsulates parsing with perl6

[12:27] <snarkyboojum> I remember when most programmers I dealt with didn't know what a regex was either :D

[12:28] <ingy> Perl6 Rules feels like it does that with the least confusion

[12:29] <snarkyboojum> ingy: I agree with you fwiw :D

[12:29] <ingy> \o/

[12:29] <ingy> done and done

[12:29] <ingy> \o

[12:30] <snarkyboojum> we could give camelia a peg leg...

[12:32] *** ab5tract joined
[12:37] <jnthn> afk, walk

[12:38] *** PacoLinux left
[12:52] *** PacoLinux joined
[12:52] *** PacoLinux_ left
[13:00] *** am0c joined
[13:05] *** PacoLinux left
[13:06] *** dorlamm left
[13:21] *** carlin left
[13:24] *** PacoLinux joined
[13:29] *** cognominal_ joined
[13:30] *** cognominal___ joined
[13:30] *** cognominal left
[13:32] *** cognominal joined
[13:33] *** cognominal_ left
[13:35] *** cognominal___ left
[13:39] <pmurias> mberends: did the new perl finish brewing?

[13:40] <mberends> pmurias: yes, but that did not help. The brewed perl does not include a libperl :(

[13:41] *** GlitchMr left
[13:42] <pmurias> mberends: what?

[13:42] <pmurias> what's your error message?

[13:42] <pmurias> mberends: you just did a standard perlbrew install ... invocantion?

[13:43] <tadzik> sirmacik++ # rakudo archlinux package

[13:43] <sirmacik> (:

[13:44] <mberends> pmurias: the error message from Niecza is unchanged, because it still loads /usr/lib/libperl.so.5.10. The perlbrew installation produces only a bin/perl executable, not a libperl.so.*.

[13:46] <pmurias> find ~/perl5/perlbrew/perls/ -name '*libperl*'

[13:47] *** cognominal_ joined
[13:47] <pmurias> i have a libperl.a here

[13:47] <mberends> pmurias: ~/perl5/perlbrew/perls/perl-5.14.1/lib/5.14.1/i686-linux/CORE/libperl.a

[13:48] <mberends> env

[13:49] <pmurias> mberends: ?

[13:49] <pmurias> could you nopaste the result of perlbrew list?

[13:50] *** cognominal left
[13:50] <mberends> pmurias: it's only 2 lines: * perl-5.14.1 and  /usr/bin/perl (5.10.1)

[13:51] <mberends> pmurias: I'll try setting LD_LIBRARY_PATH, it might help

[13:51] <pmurias> LD_LIBRARY_PATH is for runtime

[13:52] <pmurias> perl -MExtUtils::Embed -e ccopts -e ldopts?

[13:53] <mberends> -Wl,-E  -fstack-protector -L/usr/local/lib  -L/home/martin/perl5/perlbrew/perls/perl-5.14.1/lib/5.14.1/i686-linux/CORE -lperl -lnsl -ldl -lm -lcrypt -lutil -lc

[13:53] <mberends>  -fno-strict-aliasing -pipe -fstack-protector -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64  -I/home/martin/perl5/perlbrew/perls/perl-5.14.1/lib/5.14.1/i686-linux/CORE

[13:53] *** whiteknight left
[13:55] <pmurias> looks correct

[13:55] <pmurias> make perl5 should be linking against the new perl

[13:55] <mberends> pmurias: I was thinking to put that -L value into LD_LIBRARY_PATH before running 'make perl5'

[13:55] <pmurias> LD_LIBRARY_PATH is for dynamic linking

[13:55] <pmurias> mberends: how do you know that the old .so is used?

[13:56] <pmurias> mberends: did you do make -B perl5

[13:56] <pmurias> maybe the .so file wasn't rebuilt?

[13:58] <mberends> pmurias: libperl.so.5.10 was named in the native Stacktrace part of https://gist.github.com/1257273

[13:59] <pmurias> mberends: you are sure obj/p5embed.so was rebuilt?

[14:00] <mberends> pmurias++: rebuilt with make -B, that fixed it :-)

[14:00] <mberends> Hello Colorful World :D

[14:01] <dalek> niecza: e66416c | (Paweł Murias)++ | Makefile:

[14:01] <dalek> niecza: make clean now removes .so files from obj

[14:01] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e66416cce0

[14:05] *** cognominal joined
[14:05] *** cognominal_ left
[14:07] *** kaare_ left
[14:12] *** cognominal_ joined
[14:13] *** cognominal___ joined
[14:14] *** cognominal___ left
[14:14] *** cognominal left
[14:15] *** lateau_ left
[14:16] *** cognominal___ joined
[14:17] *** cognominal_ left
[14:18] *** PacoLinux left
[14:18] *** MayDaniel joined
[14:19] *** PacoLinux joined
[14:23] *** Chillance joined
[14:23] *** cognominal_ joined
[14:26] *** cognominal___ left
[14:27] *** cognominal_ left
[14:33] *** ron__ left
[14:37] *** cognominal joined
[14:57] *** pmurias left
[15:00] <dalek> niecza: d2614f8 | mberends++ | examples/gtk-tetris.pl:

[15:00] <dalek> niecza: [examples/gtk-tetris.pl] working proof of concept - patches welcome

[15:00] <dalek> niecza: review: https://github.com/sorear/niecza/commit/d2614f8ffb

[15:14] *** MayDaniel left
[15:20] *** poisonarms left
[15:24] <tadzik> woo

[15:24] *** PacoLinux_ joined
[15:30] *** rml joined
[15:32] *** packetknife joined
[15:41] *** GlitchMr joined
[15:44] *** rml left
[15:44] <dalek> niecza: b08643d | mberends++ | examples/gtk-tetris.pl:

[15:44] <dalek> niecza: [examples/gtk-tetris.pl] clear lines that are full of blocks

[15:44] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b08643dd0c

[15:46] <dalek> rakudo/nom: 1f1df92 | jnthn++ | src/Perl6/ (2 files):

[15:46] <dalek> rakudo/nom: Support $$foo, @$foo and %$foo as equivalents for $($foo), @($foo) and %($foo).

[15:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1f1df923c0

[15:51] <colomon> mberends: Yes, even my terrible tetris skills aren't as bad as that last game I just played

[15:52] <colomon> On the bright side, it doesn't know when the game is over, either.

[15:53] <mberends> colomon: it evokes lots of nostalgia. patches welcome! :)

[15:54] <colomon> Can't talk, playing tetris!  ;)

[15:58] <colomon> mberends++

[15:58] <colomon> mberends++

[15:58] <colomon> Can't begin to say how cool it is to be playing an "arcade" game written in p6.

[15:58] * mberends celebrates with a beer :)

[15:59] <colomon> I'd buy one for you if I could.  Bravo!

[16:00] <colomon> So, Gtk can handle text, too, right?

[16:00] <colomon> I've been meaning to write a program to help me remember to practice tunes I know, but didn't have any idea how to handle a UI for it.

[16:00] <mberends> colomon: yes, examples/gtk-clock.pl has some text. Resizeable, too.

[16:00] <colomon> I'm thinking Niecza+Gtk might be just the thing.

[16:01] <colomon> I don't need anything terribly fancy, just the ability to display, say, ten tune names at once, plus a couple of checkboxes to say "Practiced!" or "Needs extra eork!"

[16:02] <dalek> rakudo/nom: 8b07dd1 | jnthn++ | src/Perl6/Grammar.pm:

[16:02] <dalek> rakudo/nom: Fix failure to scream to the high heavens about certain redeclarations.

[16:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8b07dd1b67

[16:04] <mberends> colomon: good idea. See the Gtk VBox, CheckButton and Label classes.

[16:07] *** skangas joined
[16:11] <colomon> mberends++ # no time now, but I'll try to take a look at that before bed tonight, maybe

[16:26] *** am0c left
[16:27] <jnthn> b: say 'aa' ~~ /(.)$1/

[16:27] <p6eval> b 1b7dd1: OUTPUT«a␤»

[16:28] <jnthn> Turns out that nqp-rx regexes also have this issue.

[16:29] <jnthn> !BACKREF in QRegex essentially appears to be a port of the nqp-rx one.

[16:29] <jnthn> I'm guessing it's "bug compatible" ;)

[16:29] <jnthn> Unless undefined captures are menat to always be zero-width matches.

[16:30] <jnthn> niecza: say 'aa' ~~ /(.)$1/

[16:30] <p6eval> niecza v10-34-gb08643d: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 613 (CORE warn @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 21 (CORE Mu.Str @ 12) ␤  at  line 0 (ExitRunloop @ 0) ␤  at /tmp/VBiBHNqSIB line 1 (MAIN C3_ANON…

[16:30] <jnthn> niecza: say ?('aa' ~~ /(.)$1/)

[16:30] <p6eval> niecza v10-34-gb08643d: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 613 (CORE warn @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 21 (CORE Mu.Str @ 12) ␤  at  line 0 (ExitRunloop @ 0) ␤  at /tmp/u7xv5kLgab line 1 (MAIN C3_ANON…

[16:31] <jnthn> Grr, can't see if it succeeds

[16:31] <jnthn> niecza: while ?('aa' ~~ /(.)$1/) { 1 }

[16:31] <p6eval> niecza v10-34-gb08643d: OUTPUT«(signal XFSZ)Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 613 (CORE warn @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 21 (CORE Mu.Str @ 12) ␤  at  line 0 (ExitRunloop @ 0) ␤  at /tmp/K8pkvMbnT6 line 1 …

[16:31] *** replore_ left
[16:31] <jnthn> oh, seems it does.

[16:32] <jnthn> So, is RT#100472 wrong, or the implementations?

[16:32] <jnthn> TimToady: ^^, for when you're about.

[16:33] <jnthn> The S05 backreferences spec doesn't say either way.

[16:36] *** soh_cah_toa joined
[16:37] *** mj41 joined
[16:38] <dalek> Heuristic branch merge: pushed 22 commits to rakudo/optimizer by jnthn

[16:39] *** MayDaniel joined
[16:39] <soh_cah_toa> jnthn++ # work on optimizer

[16:41] <jnthn> soh_cah_toa: heh, that was just merging latest stuff from nom into optimizer ;)

[16:44] <soh_cah_toa> it's exciting though

[16:44] <soh_cah_toa> rakudo's horribly slow speed makes regular use very frustrating

[16:44] *** risou is now known as risou_awy

[16:44] <soh_cah_toa> so it's good to see work on optimization

[16:44] *** risou_awy is now known as risou

[16:45] <jnthn> :)

[16:45] <jnthn> Just going to make it catch a couple more obvious bugs at compile time. :)

[16:45] <jnthn> Need to teach it more about variables soon I guess.

[16:45] <soh_cah_toa> cool

[16:46] <jnthn> Though I think before that I might try and get the work so far merged.

[16:46] <jnthn> The optimizer branch will be where the latest cutting edge stuff gets done, and every so often, when we're comfortable with it, that gets merged into the mainline.

[16:48] *** soh_cah_toa_ joined
[16:50] *** soh_cah_toa left
[16:50] *** soh_cah_toa_ is now known as soh_cah_toa

[16:51] * soh_cah_toa has a *terrible* laptop battery

[16:52] <soh_cah_toa> has anybody ever ordered a replacement laptop battery online and know of a reputable site?

[16:52] *** buubot_backup left
[16:53] <benabik> soh_cah_toa: I tend to overpay and get OEM batteries.

[16:53] *** replore joined
[16:54] *** HarryS left
[16:54] <soh_cah_toa> benabik: yeah, i could do that i suppose

[16:54] *** packetknife left
[17:01] *** risou is now known as risou_awy

[17:08] *** buubot_backup joined
[17:08] *** localhost left
[17:09] *** localhost joined
[17:12] *** ab5tract left
[17:17] *** zby_home joined
[17:20] *** GlitchMr left
[17:23] <Woodi> idea just strikes me... humans have two hands so we do multitasking by-design... imagine we have only one hand... then we need to use other algoritms in our life... would be much slower (probably)... and in traditional programming languages we use sequencial algoritms... isn't it sub optimal ? even processors have only one PC register...

[17:23] <dalek> rakudo/optimizer: bd4c869 | jnthn++ | src/binder/bind.c:

[17:23] <dalek> rakudo/optimizer: Catch a few more must-fail binds at compile time. For example, 'sub x(Int $y) { }; x('pivo')' will now be caught at CHECK time.

[17:23] <dalek> rakudo/optimizer: review: https://github.com/rakudo/rakudo/commit/bd4c86922e

[17:23] <dalek> rakudo/optimizer: 34c0d41 | jnthn++ | src/Perl6/Optimizer.pm:

[17:23] <dalek> rakudo/optimizer: A block with exception handlers should not be inlined; fixes one of the broken test cases.

[17:23] <dalek> rakudo/optimizer: review: https://github.com/rakudo/rakudo/commit/34c0d41026

[17:23] <dalek> rakudo/optimizer: ec32d85 | jnthn++ | src/Perl6/Actions.pm:

[17:23] <dalek> rakudo/optimizer: Fix bad interaction between anonymous parameters and inlining.

[17:23] <dalek> rakudo/optimizer: review: https://github.com/rakudo/rakudo/commit/ec32d8568f

[17:24] *** MayDaniel left
[17:25] <jnthn> phenny: tell moritz I've been through the tests that the optimizer failed, and dealt with the genuine optimizer issues that broke some of them. The rest look like tests that needs dies => eval_dies love. If you have a moment for that, help most welcome. :)

[17:25] <phenny> jnthn: I'll pass that on when moritz is around.

[17:25] <jnthn> phenny: tell moritz oh, except the undef.t one. Though that's a todo'd test already.

[17:25] <phenny> jnthn: I'll pass that on when moritz is around.

[17:26] *** icwiener joined
[17:31] *** preflex_ joined
[17:32] *** preflex left
[17:32] *** preflex_ is now known as preflex

[17:33] *** wamba left
[17:37] *** lichtkind joined
[17:45] <lichtkind> seen thou

[17:45] <aloha> thou was last seen in #perl6 2 days 2 hours ago joining the channel.

[17:45] <lichtkind> thank you

[17:49] *** GlitchMr joined
[17:53] *** kaare_ joined
[17:58] <flussence> Woodi: yep, x86 in particular gets a lot of complaints for its shortage of GPRs. There's a project going on right now to give 32-bit programs access to the extra 64-bit registers - https://sites.google.com/site/x32abi/home

[18:05] <tadzik> can someone copypaste me the funky a in Masak? It's not even on his homepage :/

[18:05] <benabik> ä ?

[18:05] <tadzik> ok, found on github

[18:05] <tadzik> thanks :)

[18:05] <benabik> Apple makes accented characters easy.  :-)

[18:05] <soh_cah_toa> yeah, i never know how to type unicode characters either :\

[18:06] <tadzik> okay, I has a UsingPerl6.mobi with cover and everything :)

[18:06] <tadzik> out 'make html' is a bit less than awesome, it doesn't escape < and > inside <code> tags

[18:06] <tadzik> s/out/our/

[18:07] *** Exodist left
[18:07] <soh_cah_toa> i know, it's all i can use though since i get some weird 'latex is 5 years old' error when building

[18:10] <tadzik> uploaded to https://github.com/perl6/book/downloads/

[18:10] <tadzik> I asked Calibre nicely, but I'm still not sure if the cover's here or no

[18:11] <soh_cah_toa> tadzik: what's a .mobi file?

[18:11] <tadzik> soh_cah_toa: it's something that an ebook reader can display nicely

[18:11] <soh_cah_toa> ah

[18:11] *** Exodist joined
[18:12] <tadzik> contrary to the popular belief, PDF is not a good ebook format

[18:12] <soh_cah_toa> tadzik: how come?

[18:12] <tadzik> soh_cah_toa: they don't scale well

[18:12] <benabik> Lack of reflow, for one.

[18:13] <benabik> I prefer ePub, myself.

[18:13] <tadzik> they're page oriented too, a page on a pdf is not something to fit on a 6" screen

[18:13] <tadzik> I've never seen an ePub myself :)

[18:13] <benabik> ePub is essentially zipped HTML.

[18:14] <benabik> (Simplified HTML)

[18:14] <tadzik> nice

[18:14] <tadzik> I just processed UsingPerl6.html with kindlegen (amazon tool), and got UsingPerl6.mobi

[18:15] <benabik> Yeah.  Kindles don't support ePub for some reason.

[18:15] <tadzik> They don't?

[18:15] <tadzik> I thought they do

[18:16] <benabik> Nope.  Calibre and others will convert them to Mobipocket though.

[18:16] <tadzik> but that'd explain why do they always publish ePubs and "mobi for the Kindle"

[18:16] <benabik> Yeah.

[18:17] <benabik> ePub is the open standard for ebooks though.  It's an irritation to me that Kindles don't support it.

[18:17] <tadzik> yeah, that sounds wrong

[18:17] <soh_cah_toa> of course not. b/c it's open

[18:17] <tadzik> isn't mobi open?

[18:18] <benabik> .mobi is from Mobipocket SA

[18:18] <benabik> Bought by Amazon.

[18:18] <tadzik> that explains it

[18:27] *** Exodist left
[18:28] *** Exodist joined
[18:30] <dalek> rakudo/optimizer: 90c4020 | jnthn++ | src/binder/multidispatch.c:

[18:30] <dalek> rakudo/optimizer: Catch some type cases of multi dispatch being impossible also.

[18:30] <dalek> rakudo/optimizer: review: https://github.com/rakudo/rakudo/commit/90c40205fd

[18:47] *** cooper joined
[18:53] *** rgrau left
[18:56] *** donri joined
[19:01] *** GlitchMr left
[19:05] <sorear> phenny: tell mberends sudo apt-get install mono-complete.  the other mono packages exist for the sake of dependencies and should not be installed manuall

[19:05] <phenny> sorear: I'll pass that on when mberends is around.

[19:07] <mberends> sorear, phenny: ah, thanks. This Ubuntu has a frugal Mono install, occasionally runs into missing deps as you've explained.

[19:07] <phenny> mberends: 19:05Z <sorear> tell mberends sudo apt-get install mono-complete.  the other mono packages exist for the sake of dependencies and should not be installed manuall

[19:08] <sorear> I guess if you're on a slow and/or metered connection it might also make sense to install an incomplete mono

[19:11] <mberends> by a process of dependency creep, an  incomplete mono aymptotically approaches mono-complete over time

[19:11] <sorear> pmurias++

[19:12] <sorear> well, mono-complete includes a lot of stuff that niecza isn't likely to use anytime soon

[19:12] <sorear> like the asp.net support libs

[19:12] *** icwiener left
[19:22] *** kfo_ joined
[19:26] *** kfo left
[19:27] <Patterner> gentoo has no mono-complete :(

[20:05] <moritz> o/

[20:05] <phenny> moritz: 17:25Z <jnthn> tell moritz I've been through the tests that the optimizer failed, and dealt with the genuine optimizer issues that broke some of them. The rest look like tests that needs dies => eval_dies love. If you have a moment for that, help most welcome. :)

[20:05] <phenny> moritz: 17:25Z <jnthn> tell moritz oh, except the undef.t one. Though that's a todo'd test already.

[20:07] <jnthn> o/ moritz 

[20:08] *** mj41 left
[20:08] <moritz> jnthn: did you fix the Inf thing in optimizer?

[20:08] <dalek> rakudo/nom: d3d3ae1 | moritz++ | t/spectest.data:

[20:08] <dalek> rakudo/nom: run say.t

[20:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d3d3ae10ea

[20:12] <jnthn> moritz: As in, the num with Inf and NaN one?

[20:12] <moritz> jnthn: yes

[20:13] *** pothos left
[20:13] <jnthn> moritz: yes, it was a few days ago, I think :)

[20:13] *** y3llow left
[20:14] *** zby_home left
[20:14] *** y3llow joined
[20:15] *** pothos_ joined
[20:15] *** pothos_ is now known as pothos

[20:17] *** y3llow left
[20:17] *** y3llow joined
[20:17] *** wolfman2000 left
[20:19] <sorear> good * #perl6

[20:19] <mberends> good * sorear

[20:20] <moritz> jnthn: will look into the fallout tomorrow

[20:24] <moritz> I just did a very classic mistake

[20:24] <moritz> ran spectest with 3 concurrent jobs

[20:24] <moritz> and in another console typed 'uptime'

[20:24] <moritz> and wondered that the load average was < 0.2

[20:24] <moritz> so I restarted the spectest with 6 concurrent jobs

[20:24] <moritz> and... the load average dropped even further

[20:25] <moritz> because that other terminal had in fact a ssh session to another host open :-)

[20:25] <jnthn> hehe :)

[20:26] <moritz> and it was in the local network, so the latency was too small to notice

[20:31] *** envi left
[20:32] <moritz> 756 open tickets

[20:32] <moritz> I believe this is more than 100 less than two weeks ago

[20:36] <jnthn> Yes, it is :)

[20:37] <jnthn> Amazing work :)

[20:37] <jnthn> I fixed a couple of bugs today that should let us close a couple more too :)

[20:37] <benabik> Is this things nom fixed or just attacking bugs?

[20:37] <jnthn> Currently working on iteration performance.

[20:38] <jnthn> benabik: A lot is things nom fixed, but I've attacked various bugs of late too :)

[20:38] <moritz> benabik: in particular nom leaks far less parrot objects into p6 space

[20:38] <moritz> which often led to generic "weird behavior"

[20:39] <moritz> jnthn: many of the new error messages seem to have the line number off by one

[20:40] <moritz> jnthn: ie the error is often reported one line above the actual error

[20:41] <jnthn> moritz: In optimizer?

[20:42] <jnthn> The CHECK time ones?

[20:42] <jnthn> Or somewhere else?

[20:42] <moritz> jnthn: yes to both

[20:42] <jnthn> moritz: OK, thanks...will investigate.

[20:43] <jnthn> One fun discovery earlier is that

[20:43] <jnthn> sub foo($, $, $x) { $x }; foo(1,2,3)

[20:43] <jnthn> Is reduced by the optimizer now to just 3 :)

[20:44] <moritz> \o/

[20:45] <jnthn> Well, it's not so \o/ if 1 and 2 were things that had side-effects...

[20:45] <jnthn> So, will need to fix that one.

[20:45] <dalek> roast: 7db2936 | moritz++ | S (8 files):

[20:45] <dalek> roast: move a few dying tests to string eval, because an optimizer (erm, the optimizer :-) catches them at compile time

[20:45] <dalek> roast: review: https://github.com/perl6/roast/commit/7db2936a0b

[20:45] <moritz> this is not even close to all of the failures, rest tomrrow

[20:45] * moritz -> sleep

[20:47] *** kaare_ left
[20:47] <jnthn> moritz++, sleep well

[21:16] <im2ee> Good night! :) o/

[21:17] <jnthn> dobranoc, im2ee 

[21:18] *** im2ee left
[21:18] *** djspy187 joined
[21:19] *** wolfman2000 joined
[21:20] <djspy187> So seriously guys I'm already for Perl6

[21:24] *** wolfman2_ joined
[21:26] *** wolfman2000 left
[21:29] *** wolfman2_ left
[21:30] *** djspy187 left
[21:30] *** djspy187 joined
[21:31] <sorear> djspy187: Hello and welcome to #perl6.

[21:31] <sorear> djspy187: Is there anything we can help you with?

[21:39] <djspy187> ;-) I'd like to say I like Perl and would love to start using Perl6 in production environment. You guys are gr8!

[21:41] <sorear> Thanks

[21:41] <sorear> although this number-coding is a pet peeve of mine.  especially the people who say "3q"

[21:43] <djspy187> what is three queue suppose to mean?

[21:43] <djspy187> Is it like thank you?

[21:43] <sorear> in East Asian languages, 3 is pronounced san

[21:43] <jnthn> "freak"? :)

[21:43] <jnthn> oh :)

[21:44] <sorear> which is phonemically the same as than

[21:45] <djspy187> oh damn that is particularly bad

[21:45] <djspy187> Also 'ty' annoys me

[21:45] <djspy187> or 'ta'

[21:45] <djspy187> which is suppose to be thank you or thanks alot

[21:49] <mberends> ta pronounced tah is much older than the internet

[21:50] <djspy187> mberends: Yeah that word freakin annoys me

[21:50] <djspy187> mberends: If someone did something to deserve a thank you at least you can say the whole word ;-)

[21:51] <mberends> djspy187: you're quite right there :)

[21:53] <dalek> book: 4a4df08 | soh_cah_toa++ | src/subs-n-sigs.pod:

[21:53] <dalek> book: Made numerous additions and fixes to Chapter 4. Added 'Return Types', 'Required Parameters', and 'Abstract and Concrete Parameters' sections. Fixed example in 'Interpolating Arrays and Hashes'. Added some extra verbosity to several paragraphs.

[21:53] <dalek> book: review: https://github.com/perl6/book/commit/4a4df085ba

[21:56] <jnthn> heh, "ta" is quite common in some dialects in England. Including the one I was born in :P

[21:56] <jnthn> er, the one spoken where I was born. )

[21:57] <dalek> book: 0d5ec05 | soh_cah_toa++ | lib/book.sty:

[21:57] <dalek> book: Added myself to the credits.

[21:57] <dalek> book: review: https://github.com/perl6/book/commit/0d5ec055ae

[21:59] * jnthn seems to be much of the way to a patch that will let us do for loops over large numbers of elements without spending 90% of the time in memmove...

[21:59] <Tene> jnthn: nice

[22:02] <jnthn> Long story short, for 1..$n { } is meant to be O($n), but was accidentally more like O($n ** 2)

[22:03] * sorear resists the urge to yell 'told you so'

[22:03] <jnthn> sorear: Well, I've seen it in various timings. This is the first time I've dug into the mode and worked out why.

[22:03] <jnthn> *code

[22:04] <sorear> someone I'm helping off-channel wrote eval { ... } and it's not working

[22:04] <sorear> because, well, it should be try

[22:04] <sorear> I guess I ought to make eval take a Str arguemnt

[22:05] <jnthn> nom: eval { 42 }

[22:05] <p6eval> nom d3d3ae: OUTPUT«Nominal type check failed for parameter '$code'; expected Str but got Block instead␤  in sub eval at src/gen/CORE.setting:420␤  in block <anon> at /tmp/5VqgA06CW9:1␤  in <anon> at /tmp/5VqgA06CW9:1␤␤»

[22:18] *** pmurias joined
[22:18] *** PacoLinux_ left
[22:20] <sorear> o/ pmurias

[22:20] *** pernatiy left
[22:20] *** sjn left
[22:20] *** tomaw left
[22:20] *** dukeleto left
[22:20] *** cxreg left
[22:20] *** miso2217 left
[22:20] *** BinGOs left
[22:20] *** mattp_ left
[22:20] *** phenny left
[22:20] *** daemon left
[22:20] *** BooK left
[22:20] *** bloonix left
[22:20] *** broquaint left
[22:20] *** felipe left
[22:20] *** revdiablo left
[22:20] *** mdxi_ left
[22:20] *** Bucciarati left
[22:20] *** yahooooo left
[22:20] *** literal left
[22:21] *** pmurias left
[22:21] *** cotto left
[22:21] *** araujo left
[22:21] *** krakan_ left
[22:21] *** pjcj_ left
[22:21] *** ranguard left
[22:21] *** Tene left
[22:21] *** espadrine left
[22:21] *** mberends left
[22:21] *** Sarten-X left
[22:21] *** gfldex left
[22:21] *** ascent__ left
[22:21] *** Vlavv` left
[22:21] *** saaki left
[22:21] *** jfried left
[22:21] *** ruz left
[22:21] *** TimToady left
[22:21] *** JodaZ_ left
[22:21] *** sbp left
[22:21] *** nsh left
[22:21] *** _sri left
[22:21] *** betterworld left
[22:22] *** mattp_ joined
[22:22] <soh_cah_toa> sorear: remember the other day i asked about negative lookahead assertions? didn't you recommend an alternate syntax? something like <-[\n]> i think?

[22:22] <soh_cah_toa> sorear: apparantly, <!before foo> doesn't work on rakudo :(

[22:23] <sorear> <-[\n]> and <!before \n> are the ways I recommended

[22:23] *** literal joined
[22:23] *** yahooooo joined
[22:23] *** Bucciarati joined
[22:23] *** mdxi_ joined
[22:23] *** revdiablo joined
[22:23] *** broquaint joined
[22:23] *** felipe joined
[22:23] *** bloonix joined
[22:23] *** BooK joined
[22:23] *** daemon joined
[22:23] *** phenny joined
[22:23] *** BinGOs joined
[22:23] *** miso2217 joined
[22:23] *** cxreg joined
[22:23] *** dukeleto joined
[22:23] *** tomaw joined
[22:23] *** sjn joined
[22:23] *** pernatiy joined
[22:23] *** pmurias joined
[22:23] *** espadrine joined
[22:23] *** mberends joined
[22:23] *** cotto joined
[22:23] *** Sarten-X joined
[22:23] *** gfldex joined
[22:23] *** araujo joined
[22:23] *** krakan_ joined
[22:23] *** ascent__ joined
[22:23] *** pjcj_ joined
[22:23] *** Tene joined
[22:23] *** ranguard joined
[22:23] *** Vlavv` joined
[22:23] *** betterworld joined
[22:23] *** _sri joined
[22:23] *** nsh joined
[22:23] *** sbp joined
[22:23] *** JodaZ_ joined
[22:23] *** TimToady joined
[22:23] *** ruz joined
[22:23] *** jfried joined
[22:23] *** saaki joined
[22:23] <soh_cah_toa> ok

[22:23] *** donri left
[22:23] *** donri joined
[22:24] <sorear> wait, those aren't quite the same

[22:24] <sorear> <-[\n]> matches any character other than \n

[22:24] <sorear> <![\n]> matches zero-width but not before \n

[22:24] <sorear> <-[\n]> is like [ <!before \n> . ]

[22:25] <soh_cah_toa> right

[22:25] *** tokuhiro_ joined
[22:25] <sorear> perl6: say ?/ ^ <!before \n> /, ?/ ^ <![\n]> / for "", "\n", "n", "\\"

[22:25] <p6eval> niecza v10-34-gb08643d: OUTPUT«Bool::TrueBool::True␤Bool::FalseBool::False␤Bool::TrueBool::True␤Bool::TrueBool::True␤»

[22:25] <p6eval> ..rakudo d3d3ae: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in method Bool at src/gen/CORE.setting:6255␤  in sub prefix:<?> at src/gen/CORE.setting:1712␤  in block <anon> at /tmp/Oz0uE3s4K9:1␤  in method reify at src/gen/CORE.setting:3748␤  in method reify at src/gen/CO…

[22:25] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.16/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped b…

[22:26] <sorear> perl6: say ?($_ ~~ / ^ <!before \n> /), " ", ?($_ ~~ / ^ <![\n]> /) for "", "\n", "n", "\\"

[22:26] <p6eval> rakudo d3d3ae: OUTPUT«Method 'before' not found for invocant of class 'Cursor'␤  in regex <anon> at /tmp/U6U0ucoV4Z:1␤  in method ACCEPTS at src/gen/CORE.setting:6251␤  in block <anon> at /tmp/U6U0ucoV4Z:1␤  in method reify at src/gen/CORE.setting:3748␤  in method reify at src/gen/CORE.…

[22:26] <p6eval> ..niecza v10-34-gb08643d: OUTPUT«Bool::True Bool::True␤Bool::False Bool::False␤Bool::True Bool::True␤Bool::True Bool::True␤»

[22:26] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.16/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped b…

[22:27] <sorear> rakudo: say ?($_ ~~ / ^ <![\n]> /) for "", "\n", "n", "\\"

[22:27] <p6eval> rakudo d3d3ae: OUTPUT«Bool::False␤Bool::True␤Bool::False␤Bool::True␤»

[22:27] <sorear> rakudo: say ?($_ ~~ eval "/ ^ <![\\\n]> /") for "", "\n", "n", "\\"

[22:27] <p6eval> rakudo d3d3ae: OUTPUT«Bool::False␤Bool::False␤Bool::True␤Bool::True␤»

[22:28] <sorear> rakudo: say ?($_ ~~ eval "/ ^ <![\n]> /") for "", "\n", "n", "\\"

[22:28] <p6eval> rakudo d3d3ae: OUTPUT«Bool::False␤Bool::True␤Bool::True␤Bool::True␤»

[22:29] *** pmurias left
[22:29] <sorear> jnthn: do you know enough about the regex system to help soh_cah_toa?

[22:29] <jnthn> sorear: I know <!before ...> is not re-implemented yet.

[22:29] <soh_cah_toa> :(

[22:30] <jnthn> I guess <![\n]> maybe isn't either.

[22:30] <soh_cah_toa> soh_cah_toa ~~ /<!happy>/

[22:32] <soh_cah_toa> i wanna appened an octothorpe to the beginning of a string but i also want it to work w/ embedded newlines

[22:32] <soh_cah_toa> $msg ~~ s/^ <!before \#>/\# <space>/;

[22:32] <soh_cah_toa> $msg ~~ s:g/\n <!before \#>/\n \# <space>/;

[22:32] <soh_cah_toa> ^ no longer works :(

[22:33] <sorear> phenny: tell masak I have a new crazy dream: p5 in p6 using the macro infrastructure, probably with a few ad-hoc extensions.

[22:33] <phenny> sorear: I'll pass that on when masak is around.

[22:34] <jnthn> soh_cah_toa: Sorry it's still missing. pmichaud++ has had extremely limited (unexpectedly so) tuits to work on regex stuff in nom of late, and nobody else is yet up to speed on QRegex enough to fix things like that.

[22:34] *** molaf left
[22:34] <soh_cah_toa> yeah, it's alright i guess

[22:35] <soh_cah_toa> i wish i could fix it myself but there's not much low hanging fruit in rakudo :\

[22:38] *** hanekomu left
[22:39] *** whiteknight joined
[22:40] <soh_cah_toa> btw, i'm working on a Test::Builder module. would somebody be willing to add it to the ecosystem for me?

[22:40] <soh_cah_toa> https://github.com/soh-cah-toa/p6-test-builder

[22:40] * soh_cah_toa doesn't have a commit bit

[22:41] <soh_cah_toa> it's only a few days old but eventually i'd like to see Test.pm be built on it :)

[22:44] <sorear> soh_cah_toa: where is the ecosystem?

[22:44] <jnthn> sorear: perl6

[22:44] <jnthn> sorear: I don't think I have privs to grant soh_cah_toa a commit bit there

[22:44] * sorear mumbles about the proliferation of p6 testing modules

[22:44] <sorear> jnthn: I do

[22:44] <jnthn> Only you/TimToady/pmichaud/moritz

[22:44] * jnthn is not trusted :P

[22:44] *** replore left
[22:45] *** HarryS joined
[22:45] <sorear> done.

[22:46] <soh_cah_toa> sorear++

[22:46] <soh_cah_toa> great, thanks

[22:46] <sorear> jnthn: do you want to be?

[22:47] <jnthn> sorear: I don't mind either way; I guess spreading the load of giving out commit bits can be good though.

[22:47] <jnthn> sorear: Being able to give out nqp-rx bits would be especially useful.

[22:48] <[Coke]> jnthn++ #optimizer goodness.

[22:59] *** djspy187 left
[23:04] <jnthn> nom: say 286.105 / 7.003

[23:04] <p6eval> nom d3d3ae: OUTPUT«40.8546337284021␤»

[23:11] <dalek> rakudo/nom: af0d2e1 | jnthn++ | src/core/MapIter.pm:

[23:11] <dalek> rakudo/nom: Fix mis-design in MapIter that led to it being quadratic rather than linear order. Now, 'for 1..1000000 { $i++ }' runs around 40 times faster. No spectest regressions.

[23:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/af0d2e1d78

[23:13] <soh_cah_toa> perl6: #`{ HAI CAN HAS STDIO? } my $lolcode; say $lolcode.WHY

[23:13] <p6eval> niecza v10-34-gb08643d: OUTPUT«␤Unhandled Exception: Unable to resolve method WHY in class Any␤  at /tmp/6W9mQYwnye line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2115 (CORE C1022_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2116 (CORE module-COR…

[23:13] <p6eval> ..pugs:  ( no output )

[23:13] <p6eval> ..rakudo d3d3ae: OUTPUT«Any()␤»

[23:13] <soh_cah_toa> aw...still no declarator blocks yet?

[23:16] *** cotto left
[23:16] *** cotto joined
[23:17] <jnthn> I thought the sytnax for pod doc was #=

[23:18] <soh_cah_toa> oh yeah

[23:18] <soh_cah_toa> perl6: #={ HAI CAN HAS STDIO? } my $lolcode; say $lolcode.WHY

[23:18] <p6eval> pugs, rakudo d3d3ae:  ( no output )

[23:18] <p6eval> ..niecza v10-34-gb08643d: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Action method comment:sym<#=(...)> not yet implemented at /tmp/RULsE59NtM line 1:␤------> [32m#={ HAI CAN HAS STDIO? }[33m⏏[31m my $lolcode; say $lolcode.WHY[0m␤␤␤Unhandled Exception: Check failed␤␤  at /home/p6eval/niec…

[23:18] <soh_cah_toa> :(

[23:18] <jnthn> However, 1) you can't do it to variables yet, and 2) even when you can, it'll have to be $lolcode.VAR.WHY

[23:19] <jnthn> nom: #={ HAI CAN HAS STDIO? } class C { }; say C.WHY

[23:19] <p6eval> nom d3d3ae:  ( no output )

[23:19] <jnthn> oh...hmm...does #= take a blocky thing after it?

[23:20] <sorear> nom: #| HAI CAN HAS STDIO? ␤ class C { }; say C.WHY

[23:20] <p6eval> nom d3d3ae: OUTPUT«Any()␤»

[23:20] <sorear> nom: #= HAI CAN HAS STDIO? ␤ class C { }; say C.WHY

[23:20] <p6eval> nom d3d3ae: OUTPUT«Block::Declarator<3648813062187568205>␤»

[23:20] <sorear> nom: #= HAI CAN HAS STDIO? ␤ class C { }; say ~C.WHY

[23:20] <p6eval> nom d3d3ae: OUTPUT«Block::Declarator<5379478159188087177>␤»

[23:21] <sorear> nom: #= HAI CAN HAS STDIO? ␤ class C { }; say C.WHY.^methods(:local)

[23:21] <p6eval> nom d3d3ae: OUTPUT«set_docee WHEREFORE␤»

[23:21] <sorear> nom: #= HAI CAN HAS STDIO? ␤ class C { }; say C.WHEREFORE

[23:21] <p6eval> nom d3d3ae: OUTPUT«Method 'WHEREFORE' not found for invocant of class 'C'␤  in block <anon> at /tmp/VJubm1Mc9Q:2␤  in <anon> at /tmp/VJubm1Mc9Q:1␤␤»

[23:21] <sorear> nom: #= HAI CAN HAS STDIO? ␤ class C { }; say C.WHY.^methods(:all)

[23:21] <p6eval> nom d3d3ae: OUTPUT«too many named arguments: 1 passed, 0 used␤  in methods at src/gen/Metamodel.pm:365␤  in method dispatch:<.^> at src/gen/CORE.setting:709␤  in block <anon> at /tmp/URnqCIGQhe:2␤  in <anon> at /tmp/URnqCIGQhe:1␤␤»

[23:21] <sorear> wah?

[23:21] <sorear> nom: #= HAI CAN HAS STDIO? ␤ class C { }; say C.WHY.^parents

[23:21] <p6eval> nom d3d3ae: OUTPUT«Block() Any() Mu()␤»

[23:22] <jnthn> tadzik: See ^^ 

[23:22] <sorear> nom: #= HAI CAN HAS STDIO? ␤ class C { }; say C.HOW.WHY

[23:22] <p6eval> nom d3d3ae: OUTPUT«Method 'WHY' not found for invocant of class 'Perl6::Metamodel::ClassHOW'␤  in block <anon> at /tmp/YCpbc_Aez1:2␤  in <anon> at /tmp/YCpbc_Aez1:1␤␤»

[23:22] <jnthn> nom: #= HAI CAN HAS STDIO? ␤ class C { }; say C.^doc

[23:22] <p6eval> nom d3d3ae: OUTPUT«Method 'doc' not found for invocant of class 'Perl6::Metamodel::ClassHOW'␤  in method dispatch:<.^> at src/gen/CORE.setting:709␤  in block <anon> at /tmp/j2b_62cF0C:2␤  in <anon> at /tmp/j2b_62cF0C:1␤␤»

[23:22] <jnthn> nom: #= HAI CAN HAS STDIO? ␤ class C { }; say C.^docs

[23:22] <p6eval> nom d3d3ae: OUTPUT«too many positional arguments: 2 passed, 1 expected␤  in docs at src/gen/Metamodel.pm:68␤  in method dispatch:<.^> at src/gen/CORE.setting:709␤  in block <anon> at /tmp/ISFtxain4h:2␤  in <anon> at /tmp/ISFtxain4h:1␤␤»

[23:22] <jnthn> huh

[23:22] <sorear> nom: #= HAI CAN HAS STDIO? ␤ class C { }; say C.HOW.docs

[23:22] <p6eval> nom d3d3ae: OUTPUT«Block::Declarator<7529203389254166775>␤»

[23:23] <jnthn> That really, really should stringify better than that.

[23:28] <sorear> jnthn: it does seem that I have rights to add owners.  if you want to be in the group, and moritz doesn't object, I'll add you

[23:28] <jnthn> ok

[23:28] <jnthn> alright, time to rest. I've a pretty tough $dayjob week ahead.

[23:29] <jnthn> night o/

[23:29] <sorear> night!

[23:43] *** jferrero joined
[23:58] <soh_cah_toa> perl6: "foobar".subst(/o/, /e/, :g).say

[23:59] <p6eval> rakudo af0d2e: OUTPUT«Method '!cursor_start' not found for invocant of class 'Match'␤  in regex <anon> at /tmp/EK8i6CJD31:1␤  in method reify at src/gen/CORE.setting:3748␤  in method reify at src/gen/CORE.setting:3653␤  in method reify at src/gen/CORE.setting:3653␤  in method gimme at s…

[23:59] <p6eval> ..niecza v10-34-gb08643d: OUTPUT«␤Unhandled Exception: No value for parameter self in MAIN C2_ANON␤  at /tmp/XMeEtHcB1Q line 0 (MAIN C2_ANON @ 0) ␤  at /home/p6eval/niecza/lib/CORE.setting line 263 (CORE Cool.subst @ 32) ␤  at /tmp/XMeEtHcB1Q line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/…

[23:59] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.16/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped b…

