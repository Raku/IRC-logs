[00:04] <sorear> What methods are Stash required to support?

[00:26] *** lichtkind left
[00:31] *** thou__ left
[00:35] <dalek> niecza: ea1fc9e | sorear++ | / (5 files):

[00:35] <dalek> niecza: Implement .WHO and provide indexing on Stash

[00:35] <dalek> niecza: review: https://github.com/sorear/niecza/commit/ea1fc9e009

[00:40] *** envi joined
[00:41] *** icwiener left
[00:50] *** [Coke] joined
[00:55] *** [Coke] left
[00:57] *** [Coke] joined
[01:01] *** noganex_ joined
[01:04] *** noganex left
[01:08] *** Khisanth left
[01:22] *** Khisanth joined
[01:30] *** woosley joined
[01:31] *** Trashlord left
[01:35] *** ashleydev joined
[01:35] *** Trashlord joined
[01:45] *** alyx joined
[01:45] *** alyx is now known as Guest96723

[02:00] *** dayangkun left
[02:00] *** dayangkun joined
[02:21] *** dayangkun left
[02:22] *** dayangkun joined
[02:25] *** Guest96723 is now known as alyx

[02:25] *** alyx left
[02:25] *** alyx joined
[02:26] *** am0c left
[02:52] *** dayangkun_ joined
[02:57] *** dayangkun left
[03:23] *** Su-Shee_ joined
[03:27] *** Su-Shee left
[03:30] *** Transformer joined
[03:32] *** Transformer left
[03:44] *** dayangkun_ left
[03:46] *** envi left
[03:47] *** envi joined
[04:00] *** jaldhar left
[04:01] *** jaldhar joined
[04:26] *** Guest83181 is now known as beekor

[04:29] *** satyavvd joined
[04:35] *** [perlhack] joined
[04:36] <[perlhack]> It might rain today.:-)

[04:37] <TimToady> Not here. :)

[04:37] <[perlhack]> :-)Peking was rain.

[04:37] <TimToady> They always told us to see Beijing now.  ;)

[04:37] <TimToady> s/see/say/

[04:37] <[perlhack]> :-)

[04:38] <TimToady> well, it's 北京 either way...

[04:39] <[perlhack]> TimToady, where are you now 

[04:39] <TimToady> it never occured to me that 南京 was the other one :)

[04:39] <TimToady> California

[04:39] <TimToady> *occurred

[04:40] <[perlhack]> :-)American ....

[04:40] <TimToady> California is the 西京 of America :)

[04:41] <[perlhack]> O:-)i am wrong.

[04:42] <[perlhack]> What do you want to eat for dinner ?

[04:42] <TimToady> already ate

[04:42] <TimToady> it's almost bedtime

[04:42] *** molaf joined
[04:43] *** perlhack joined
[04:44] <[perlhack]> i am here at noon.

[04:44] <[perlhack]> haha

[04:47] *** Ameshk joined
[04:48] *** Ameshk left
[04:49] <[perlhack]> TimToady, Go to bed early it,i wish you dreams:-)

[04:49] <TimToady> thanks

[04:50] <[perlhack]> not at all.

[05:28] *** molaf left
[05:30] *** birdwindupbird joined
[05:31] *** Mowah joined
[05:38] *** soh_cah_toa left
[05:50] *** Mowah left
[05:57] *** woosley left
[06:00] <sorear> [perlhack]: hi

[06:01] <[perlhack]> hi sorear

[06:01] <[perlhack]> nice to meet you

[06:02] <nine> sorear: just curious. Is something of S17 implemented in Niecza?

[06:06] *** envi left
[06:07] *** envi joined
[06:09] *** wolfman2000 left
[06:10] <sorear> nine: no

[06:11] *** woosley joined
[06:13] *** wtw joined
[06:14] *** [perlhack] left
[06:25] *** Su-Shee_ is now known as Su-Shee

[06:26] *** rhr joined
[06:26] *** woosley left
[06:27] *** Anaeluxo joined
[06:31] *** woosley joined
[06:41] *** kjeldahlw left
[06:41] *** kjeldahlw_ left
[06:42] *** kjeldahlw joined
[06:46] *** Jackneill joined
[06:51] <dalek> niecza: 7c5619c | sorear++ | lib/ (3 files):

[06:51] <dalek> niecza: Implement postcircumfix fallback to {at,bind,exists,delete}_{key,pos}; use it for Stash

[06:51] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7c5619c07a

[06:52] *** perlhack left
[06:53] *** wamba joined
[06:53] *** daniel-s joined
[06:55] *** woosley left
[06:57] *** CBro2007 joined
[06:57] *** woosley joined
[06:58] *** daniel-s left
[06:58] *** daniel-s_ joined
[07:00] *** Anaeluxo left
[07:02] *** daniel-s_ left
[07:02] *** daniel-s_ joined
[07:03] *** woosley left
[07:06] *** daniel-s__ joined
[07:06] *** daniel-s_ left
[07:08] *** Jackneill left
[07:08] <nine> awwaiid: my topic just got accepted officially :)

[07:08] <sorear> topics?  YAPC?

[07:09] <nine> sorear: no, my bachelor paper: "Design of concurrency features of the Perl 6 programming language and 

[07:09] <nine> prototype for the Rakudo Perl 6 implementation."

[07:09] <sorear> he he he

[07:09] <sorear> good luck

[07:09] <nine> IOW: working on S17

[07:09] <sorear> hint: parrot is not threadsafe

[07:10] *** noganex joined
[07:10] *** Jackneill joined
[07:10] <sorear> you could probably make a passable prototype using coroutines, and hack the Rakudo signature binder to yield() every 1000 subroutine entries

[07:11] *** _daniel-s__ joined
[07:11] *** daniel-s__ left
[07:12] <nine> Yep. Something like that might be a good first step. It actually doesn't have to be real OS level multithreading to be a useful test for the spec

[07:12] <moritz> nine++

[07:12] <sorear> nine: I'd like to spend much more time talking about this with you.  I think S17 is insane in quite a few places

[07:13] *** noganex_ left
[07:14] <sorear> well, two mostly

[07:15] *** daniel-s joined
[07:15] *** _daniel-s__ left
[07:17] <sorear> 1. atomic code blocks as currently specified break the "you pay for what you use" rule, since every single Scalar access needs to check if there's a contend {} on the stack

[07:17] *** masak joined
[07:17] <sorear> I'd rather have my $x is txn;  but there may be a better way yet

[07:17] <masak> wow! ++nine

[07:17] <sorear> 2. the correct (deadlock-free) way to handle asynchronous signals isn't control exceptions, it's starting a thread to handle them

[07:19] <masak> is there anything that can be done to a threading model to prepare a lnaguage for better supporting the Actor model?

[07:19] <nine> sorear: well I'm very open for discussion, since I do not know enough about the problem space to have strong opinions anyway :)

[07:19] <nine> sorear: will you be at YAPC::EU?

[07:19] *** daniel-s_ joined
[07:19] <sorear> NO

[07:19] <sorear> No

[07:20] *** daniel-s left
[07:20] <mberends> sorear: if you're still unsure what niecza bits to work on next, could you bump up the priority of calling native libraries (a kind of niecza/Zavolaj facility) ?

[07:20] <sorear> I'm mostly familiar with STM and CSP, not Actors

[07:20] <sorear> mberends: *nod* but I'm currently focusing on ::()

[07:20] <mberends> :-)

[07:24] *** daniel-s__ joined
[07:24] *** daniel-s_ left
[07:26] *** mj41 joined
[07:27] *** daxim joined
[07:28] *** daniel-s__ left
[07:28] *** _daniel-s__ joined
[07:29] <CBro2007> what is the meaning of "binding" in p6?

[07:30] <CBro2007> rakudo: my @a = 1, 2, 3; my Int $x = 4; @a[0] := $x; $x+=2; say @a[0];

[07:30] <p6eval> rakudo f63b82: OUTPUT«6␤»

[07:31] <CBro2007> so saying @a[0] := $x ... doesn't bind only the types but it also makes them somehow point to the same value? like pointers

[07:32] *** daniel-s joined
[07:32] *** _daniel-s__ left
[07:33] <sorear> CBro2007: yes

[07:33] <sorear> it works both ways

[07:33] <CBro2007> sorear: what is this used for?

[07:33] <CBro2007> i mean when would you use such a thing?

[07:33] <sorear> creating aliases to values

[07:34] <sorear> it's what makes parameter binding work

[07:34] <sorear> sub foo($x is rw) { ... }

[07:34] <sorear> foo($y)

[07:34] <sorear> it's like $x := $y

[07:34] <CBro2007> k

[07:35] <sorear> it's generally useful when you need to call a function or something and use the lvalue multiple times

[07:35] <CBro2007> but in that instance that is automatically taken care of ... I mean for param binding

[07:35] <sorear> my $a := find_hash().{find_key()}; say "old=$a"; $a = 5

[07:36] <sorear> without :=, you would need two variables, one for the hash and one for the key, and you'd need to do the hash access twice

[07:36] *** daniel-s left
[07:36] <CBro2007> haven't looked much into hashes yet

[07:37] *** daniel-s joined
[07:37] <CBro2007> but what is the first line doing?

[07:37] <CBro2007> whats find_hash?

[07:37] <sorear> some function

[07:37] <CBro2007> some made up fn

[07:37] <CBro2007> ok

[07:37] <CBro2007> so you are first looking for the hash and then when you find the hash you look for a key?

[07:38] <sorear> yes

[07:38] <CBro2007> and what is $a bound to? 

[07:38] <CBro2007> the key

[07:38] <CBro2007> ?

[07:38] <sorear> the hash element

[07:38] <CBro2007> oh right yeah

[07:38] <CBro2007> i meant the element sorry

[07:38] <CBro2007> ok.

[07:39] <CBro2007> I still don't get why I need 2 vars sorry :(

[07:40] <sorear> my $hash = find_hash(); my $key = find_key(); say "old = $hash{$key}"; $hash{$key} = 5;

[07:40] <CBro2007> I mean if you did "find_hash().{find_key()}" shouldn't that just return an element

[07:40] <sorear> see, two vars

[07:40] <nine> CBro2007: no it returns the value. But you cannot assign to that

[07:40] <nine> CBro2007: it's just the same as in Perl 5

[07:41] *** daniel-s left
[07:41] *** daniel-s_ joined
[07:41] <sorear> niecza: my %hash = (a => 9); sub find_hash { %hash }; sub find_key { "a" }; my $elt = find_hash().{find_key()}; say "old = $elt"; $elt = 5;  say %hash.perl

[07:41] <p6eval> niecza v7-41-g7c5619c: OUTPUT«old = 9␤{"a" => 9}.hash␤»

[07:42] <sorear> see, it doesn't work

[07:42] <sorear> using = makes a copy

[07:42] <sorear> niecza: my %hash = (a => 9); sub find_hash { %hash }; sub find_key { "a" }; my $elt := find_hash().{find_key()}; say "old = $elt"; $elt = 5;  say %hash.perl

[07:42] <sorear> := makes it work

[07:42] <p6eval> niecza v7-41-g7c5619c: OUTPUT«old = 9␤{"a" => 5}.hash␤»

[07:42] <CBro2007> ok gotcha now

[07:43] <CBro2007> I had forgotten that your last statement of $a = 5, actually was now going to modify the hash element

[07:43] <CBro2007> hmm interesting :)

[07:44] <sorear> CBro2007: when you first came in here you were talking about a research project involving Perl 6.

[07:44] <sorear> CBro2007: I haven't yet gotten a chance to ask, but I'm curious.

[07:44] <CBro2007> sorear: nah its not about p6.. I was wondering if I could use p6 for it

[07:44] <CBro2007> :)

[07:45] *** daniel-s__ joined
[07:45] <sorear> What is the project, if I may?

[07:45] *** daniel-s_ left
[07:45] <CBro2007> so for the project I just wanted to make sure that p6 would work, but I guess I will have to stick with p5 for now and if time permits also write the same things in p6 (if possible)

[07:46] <CBro2007> its a geo application - something like google maps - but more a search engine for spatial objects. 

[07:47] <CBro2007> also looking at how best to index spatio-temporal data 

[07:48] <CBro2007> so I was thinking I need some sorta OO ... but at the same time it will be lots of prototyping and having to do and redo stuff.. so I don't want to write everything in C

[07:48] <CBro2007> but if some bits are too slow then I can write those things in C

[07:48] *** _daniel-s__ joined
[07:49] <CBro2007> but seems like p6 might not be a 100% useful for that at the moment... but I like the syntax 

[07:49] <CBro2007> sorear: did I answer your qn?

[07:49] <sorear> yes

[07:50] *** daniel-s__ left
[07:50] <CBro2007> cool ... so any thoughts/comments?

[07:50] <CBro2007> you reckon its worth trying it out in p6?

[07:51] <CBro2007> I mean the advantage I see is that I can choose my language as long as I can fix stuff when I hit a dead end ... wouldn't have this choice for a company project I guess :)

[07:52] <sorear> If you want my personal opinion - I'd rather stick with p5 for this, because existing p6 compilers are *much* slower than the p5 compiler

[07:53] <mberends> CBro2007: I think p6 might be convenient for rapid prototyping with small quantities of data, but memory consumption and speed would be bad when it comes to production quantities of geodata.

[07:53] *** daniel-s joined
[07:53] <sorear> niecza takes 40 seconds to parse 6,000 lines of code; perl 5 can parse 100,000 lines in 2 seconds

[07:53] *** _daniel-s__ left
[07:53] <CBro2007>  yeh I noticed that the p6 compilers are a bit slow atm

[07:54] <CBro2007> mberends: yeah agreed... thats why I am thinking I still want to keep p5 as the main project 

[07:54] <sorear> (I don't have a current Rakudo figure; it was 300 a few months ago)

[07:54] <CBro2007> ok

[07:54] <CBro2007> Its just that the other guys in my group are mostly Java heads... and I cannot be bothered with all the java OO

[07:55] <CBro2007> was thinking of doing this stuff in C++ -- but then perl is so much quicker to code in :)

[07:55] <mberends> CBro2007: also, p5 has a mature though inconvenient way of binding to almost any native library, regardless of its source language.

[07:55] <sorear> Yes.

[07:55] <CBro2007> some people suggested getting into Python... but cannot be arsed learning a new lang

[07:55] <nine> CBro2007: don't bother :)

[07:55] <CBro2007> mberends: you mean the P5 FFI yeah?

[07:56] <Su-Shee> use p5 with moose and you're halfway there in p6, at least conceptionally.

[07:56] <sorear> Personally I would probably start with p5 or haskell

[07:56] <CBro2007> Su-Shee: yeah I got to look into Moose

[07:56] * moritz conceptionally disagrees with Su-Shee 

[07:56] *** am0c joined
[07:56] <sorear> you need to remember Brooks' law(?): Plan to throw one away; you will, anyhow

[07:56] <CBro2007> sorear: I have done haskell before.. but didn't get into Monads

[07:57] <sorear> probability that you will completely rewrite your project between now and release: >> 0.99

[07:57] <Su-Shee> moritz: why? doesn't p6 have roles anymore etc? ;) 

[07:57] *** daniel-s left
[07:57] *** daniel-s_ joined
[07:57] <mberends> CBro2007: no, for native code I mean XS: http://perldoc.perl.org/perlxs.html

[07:57] <sorear> so don't worry about releasability when starting

[07:57] <CBro2007> I mean I have always used p5 for quick and dirty scripts ... sometime in the past for bigger projects.. so don't think I need to learn ONE more scipring lang

[07:57] <CBro2007> mberends: ah ok XS

[07:58] <moritz> Su-Shee: no, IMHO p5 + Moose gets you about 5% there, not 50% :-)

[07:58] <sorear> CBro2007: (monads) don't try to understand them, just use them

[07:59] <nine> CBro2007: CBro2007: if you need to call C code, try Inline::C. Should be much easier to learn than XS

[07:59] <CBro2007> sorear: hehe... yeah the kinda stuff we did in haskell was ok.. but I didn't work on any practical examples really. Just things like walking a tree, playing with lists etc

[07:59] <CBro2007> nine: ok

[07:59] <sorear> CBro2007: "we"?

[08:00] <CBro2007> but do you guys think its hard to maintain a p5 and p6 equivalent at the same time?

[08:00] <CBro2007> sorear: sorry "we" being the students in the course on FP :)

[08:00] <sorear> ah.

[08:02] * sorear has not figured out how to get inside the minds of non-selftaught programmerws

[08:02] <Su-Shee> CBro2007: why would that be hard?

[08:03] <sorear> (I mean I can't relate to their experiences and modes of thinking)

[08:03] <CBro2007> Su-Shee: just thinking it might be time consuming to do it twice ... I mean my main idea behind going with p5 or p6 is to be able to prototype stuff quicker than the java dudes :)

[08:03] <mberends> CBro2007: I think maintaining p5 and p6 side by side will be extra work, though not as much as double the effort. The existing p5 solutions often help to design the p6 solutions.

[08:03] <Su-Shee> you're quick do to stuff with tools you know really well. 

[08:04] <sorear> CBro2007: is your primary area of study software, geography, or something else?

[08:04] <CBro2007> sorear: primary is s/w yeah ... not geography

[08:04] <moritz> CBro2007: don't listen to them, coding in Perl 6 is fun, so do it. When it stops being fun, you can still migrate away :-)

[08:04] <sorear> CBro2007: is this some kind of contest?

[08:05] <CBro2007> moritz: spoken like a true p6 evangelist :)

[08:05] <moritz> :-)

[08:05] <CBro2007> I think I agree to what some of the guys have said ... p6 compilers are much slower...so I still want to produce stuff with "decent speed"

[08:06] *** Jackneill left
[08:06] <CBro2007> sorear: sorry .. you mean the project?

[08:06] <nine> CBro2007: I guess for a prototype performance would not be important

[08:06] <sorear> CBro2007: yes

[08:06] <CBro2007> nine: it would if you want to produce results and publish them :)

[08:06] <sorear> CBro2007: niecza's runtime speed is quite tolerable.  I'd estimate 1/2 - 1/10 as fast as Perl 5 at most primitives

[08:07] <CBro2007> sorear: nah its just research for writing papers 

[08:07] <CBro2007> sorear: ok

[08:07] <sorear> CBro2007: I'm wondering why you want to work faster than your project-mates.  Is this a non-cooperative task?

[08:07] <moritz> maybe just intrinsic motivation? :-)

[08:07] <CBro2007> yeah we are not working on the exact same problem

[08:08] <CBro2007> nah its just that I haven't started yet... but I have seen some of the other guys work and they are really good with Java

[08:08] <CBro2007> In my experience, java is good to read, but its like a million lines with too many classes and methods etc etc. 

[08:09] <CBro2007> don't think we will be "sharing" lots of code 

[08:09] <moritz> Java is just very verbose.

[08:09] <sorear> where Java really shines is machine readability

[08:09] <CBro2007> moritz: i agree

[08:09] <Su-Shee> use smalltalk then. you'd get the whole traits/roles concept along. 

[08:10] <sorear> it's designed poorly for human usage, but Java refactoring tools are second to not much

[08:10] <CBro2007> having recently gotten into things like haskell.. I notice that p6 borrows a lot of these concepts and so does python ... so it would be more fun coding

[08:10] <sorear> http://www.wall.org/~larry/pm.html

[08:11] <moritz> yes, Perl 6 borrows from every language that has some bright ideas :-)

[08:11] <CBro2007> the only thing I noticed was that my fellow students who were into Java were able to build some nice GUIs

[08:11] <CBro2007> moritz: and thats how it should be :)

[08:11] <moritz> $ ./perl6 -e 'say ::("Int")'

[08:11] <moritz> Int()

[08:11] <moritz> \o/

[08:13] <moritz> $ ./perl6 -e 'my $x = 3; say ::(q[$x])'

[08:13] <moritz> 3

[08:13] <dalek> rakudo/nom-indirect-name-lookup: e923236 | moritz++ | src/Perl6/Actions.pm:

[08:13] <dalek> rakudo/nom-indirect-name-lookup: unnegate a condition, because it is easier to read that way. No functional change

[08:13] <dalek> rakudo/nom-indirect-name-lookup: review: https://github.com/rakudo/rakudo/commit/e9232369a0

[08:13] <dalek> rakudo/nom-indirect-name-lookup: d724066 | moritz++ | src/Perl6/Actions.pm:

[08:13] <dalek> rakudo/nom-indirect-name-lookup: get the very simplest case of indirect name lookups via ::() working

[08:13] <dalek> rakudo/nom-indirect-name-lookup: review: https://github.com/rakudo/rakudo/commit/d7240666d6

[08:14] <sorear> looks like I blew my chance :)

[08:14] <beekor> haay moritz, i'm all new to this, but was reading S32 Containers and looking at tests indicated and the last several like minmax, any, all, one, none, comb have no test listed

[08:14] <beekor> so my Q is, if i wanted to write some tests, would that be a good place to start, and is that updated there?

[08:15] <beekor> i was gonna grep the dir for those and see if they had tests somewhere.

[08:15] <moritz> beekor: welcome to #perl6

[08:15] <beekor> but havent gotten there yet.

[08:15] <beekor> ha hey thanks.

[08:15] <sorear> welcome, beekor.

[08:15] <moritz> beekor: I'm pretty sure that some of them already have tests, but they are not properly crosslinked yet

[08:15] <beekor> okay.

[08:16] <moritz> beekor: for example there's t/spec/S32-str/comb.t

[08:16] <moritz> beekor: adding a "smartlink" into that file would be great

[08:16] <beekor> hm! gotcha.

[08:16] *** masak left
[08:16] <moritz> beekor: the documents at perlcabal.org/syn/ are updated every hour or so with new crosslinks

[08:17] <moritz> beekor: do you have a github ID?

[08:17] <beekor> i do not.  i've probably should.

[08:17] <beekor> ha.  but yeah.

[08:19] <moritz> beekor: I know of something else that needs testing, and is probably not hard

[08:19] <beekor> i am now: beekor

[08:19] <beekor> yassah?

[08:19] <moritz> hugme: add beekor to perl6

[08:19] * hugme hugs beekor. Welcome to the perl6 github organization

[08:19] <moritz> now you have commit access to the 'roast' repo (and a few others)

[08:20] <beekor> i seee that.  huh!

[08:20] <beekor> okay.

[08:20] <moritz> beekor: regex matches produce Match objects, which should be false in boolean context if the match failed

[08:20] <moritz> rakudo: 'a' ~~ /a/; say $/.Bool

[08:20] <p6eval> rakudo f63b82: OUTPUT«Bool::True␤»

[08:20] <moritz> rakudo: 'a' ~~ /b/; say $/.Bool

[08:20] <p6eval> rakudo f63b82: OUTPUT«Bool::False␤»

[08:20] <moritz> we don't have good tests for that

[08:21] <moritz> we've had bugs in two different compilers where Match objects where always True

[08:21] <beekor> gotcha.

[08:21] <moritz> benabik++ noted that lack of tests yesterday

[08:21] <moritz> (and I contradicted, but didn't found the tests that I thought existed)

[08:22] <beekor> okay.  let me see what i can figure out.

[08:23] <beekor> i'll most probably be back with questions.  anyone else in particular i should ask?  or just The Channel ?

[08:23] <beekor> i guess that probably depends on my question a bit.  ha.

[08:25] <beekor> i will keep an eye out for benabik also.

[08:25] <moritz> beekor: just ask here

[08:25] <beekor> k.

[08:25] <moritz> beekor: I can answer most questions about the test suite, but I'm not always available

[08:26] <moritz> it might make sense to start a new test file for testing properties of the Match object

[08:26] <beekor> yeah gotcha.   i'm never in too huge of a hurry.

[08:27] <sorear> look at S04

[08:27] <sorear> S05

[08:27] <beekor> k.

[08:28] <sorear> make a new file in S05-match/, I think

[08:28] <moritz> +1

[08:28] <moritz> niecza: 'a' ~~ /a/; say $/

[08:28] <p6eval> niecza v7-41-g7c5619c: OUTPUT«a␤»

[08:28] <moritz> niecza: 'a' ~~ /b/; say $/.defined

[08:28] <p6eval> niecza v7-41-g7c5619c: OUTPUT«Bool::False␤»

[08:29] <sorear> perl6: 'a' ~~ /b/; say $/.perl

[08:29] <moritz> niecza: 'a' ~~ /b/; say $/ === Match

[08:29] <p6eval> rakudo f63b82: OUTPUT«Match.new(␤ from => 1,␤ orig => "a",␤ to   => -3,␤)␤»

[08:29] <p6eval> ..niecza v7-41-g7c5619c: OUTPUT«Match␤»

[08:29] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.16/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped b…

[08:29] <p6eval> niecza v7-41-g7c5619c: OUTPUT«Bool::True␤»

[08:29] *** CBro2007 left
[08:30] <moritz> I think it makes sense to return the Match type object for a failed match

[08:30] <moritz> pmichaud: any opinions?

[08:34] <sorear> nom: 'a' ~~ /b/; say $/.perl

[08:34] <p6eval> nom: OUTPUT«␤»

[08:34] <sorear> nom: 'a' ~~ /b/; say $/.defined

[08:34] <p6eval> nom: OUTPUT«Bool::True␤»

[08:34] <sorear> nom: 'a' ~~ /b/; say $/.to

[08:34] <p6eval> nom: OUTPUT«-3␤»

[08:35] <moritz> just because cursors use $!to < $!from to indicate false matches internally doesn't mean we should propagate that to the user

[08:38] *** tokuhirom left
[08:39] *** drbean left
[08:40] <dalek> rakudo/nom-indirect-name-lookup: b5cd9ac | moritz++ | src/core/operators.pm:

[08:40] <dalek> rakudo/nom-indirect-name-lookup: deal gracefully with NYI case of ::() lookups

[08:40] <dalek> rakudo/nom-indirect-name-lookup: review: https://github.com/rakudo/rakudo/commit/b5cd9ac197

[08:47] <beekor> okay, i'm gonna save all this and reread.  i'm headed to bed.

[08:47] <beekor> is there a singlefile of all the synopsis's combined ?

[08:49] <beekor> i'd have to really think whether i'd want to write me something to parse and get and append it all into one

[08:49] <moritz> beekor: not that I know of. People usually just clone the perl6/specs repo on github, and read the docs with perldoc if they want if offlien

[08:49] <beekor> or just spend the time printing it at all.

[08:49] <beekor> okay.  that just looked like a good source of straight info.

[08:49] <beekor> i was reading the perl6 book that's also on github.  that has been pleasant so far.

[08:50] <moritz> \o/

[08:50] <beekor> hee haa !

[08:50] <beekor> ooh big rain sweeping in here.  just got rough out.

[08:50] <moritz> guess who is one of the authors...

[08:51] <beekor> yeah i just saw.  i went to look for its url.

[08:53] <beekor> i think i also saw something p6 written by you from like '03?

[08:53] <beekor> maybe twasnt you.  but i was reading, and wondering how relevant all the grammar still was.

[08:53] <moritz> that's highly unlikly, since I first started with Perl 6 in 2006

[08:54] <beekor> okay, well it was another common name i oft see.

[08:54] <beekor> ha.

[08:54] *** ab5tract joined
[08:54] <moritz> though of course somebody could have erased my memory in the mean time...

[08:54] <beekor> you may have had a traumatic 6 incident.

[08:54] <beekor> best to maybe not think of such things.

[08:55] <beekor> okay.  i am off to bed.

[08:55] *** wamba left
[08:55] <beekor> pleasant to chat with ya'll !

[08:55] <moritz> good night beekor 

[08:56] *** dakkar joined
[09:00] <dalek> rakudo/nom: fcd142d | moritz++ | src/ (3 files):

[09:00] <dalek> rakudo/nom: first attempt at indirect name loookup.

[09:00] <dalek> rakudo/nom: 

[09:00] <dalek> rakudo/nom: Does not work yet, method term:sym<name> in Actions.pm needs to learn

[09:00] <dalek> rakudo/nom: not to touch indirect name lookups first

[09:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fcd142d9ce

[09:00] <dalek> rakudo/nom: e923236 | moritz++ | src/Perl6/Actions.pm:

[09:00] <dalek> rakudo/nom: unnegate a condition, because it is easier to read that way. No functional change

[09:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e9232369a0

[09:00] <dalek> rakudo/nom: d724066 | moritz++ | src/Perl6/Actions.pm:

[09:00] <dalek> rakudo/nom: get the very simplest case of indirect name lookups via ::() working

[09:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d7240666d6

[09:00] <dalek> rakudo/nom: b5cd9ac | moritz++ | src/core/operators.pm:

[09:00] <dalek> rakudo/nom: deal gracefully with NYI case of ::() lookups

[09:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b5cd9ac197

[09:00] <dalek> rakudo/nom: 0f7be02 | moritz++ | src/ (3 files):

[09:00] <dalek> rakudo/nom: Merge branch 'nom-indirect-name-lookup' into nom

[09:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0f7be0264a

[09:07] <moritz> evalbot rebuild nom

[09:07] <p6eval> OK (started asyncronously)

[09:08] <BinGOs> did you mean 'asynchronously'

[09:09] *** woosley joined
[09:09] <sorear> yes.  not worth fixing.

[09:10] <dalek> evalbot: 0b6e35a | moritz++ | evalbot.pl:

[09:10] <dalek> evalbot: fix typo, BinGOs++

[09:10] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/0b6e35a2e9

[09:10] <moritz> nom: say ::("List").new(1, 2).perl

[09:10] <p6eval> nom: OUTPUT«Rebuild in progress␤»

[09:17] <moritz> nom: say ::("List").new(1, 2).perl

[09:17] <p6eval> nom: OUTPUT«(1, 2).list␤»

[09:17] <moritz> \o/

[09:18] *** [perlhack] joined
[09:21] <sorear> hello [perlhack] 

[09:21] <[perlhack]> hello sorear.

[09:21] <[perlhack]> what are you doing ?

[09:22] *** [perlhack] is now known as perlhack

[09:22] <sorear> writing the OUTER case of indexing for lexical pseudopackages

[09:22] <perlhack> :-)that's impresive.

[09:22] <phenny> perlhack: 15 Jul 06:34Z <mberends> tell perlhack the following British reference estimates that a vocabulary of 1500 English words is a practical minimum. http://www.bbc.co.uk/news/14130942

[09:23] <perlhack> very thanks meberend and phenny

[09:23] <sorear> phenny is a bt

[09:23] <sorear> bot

[09:24] <moritz> no need to be impolite to a bot :-)

[09:24] *** Jackneill joined
[09:24] <perlhack> i this year can learned 4300 words

[09:26] <perlhack> :-)haha we used to it

[09:26] <moritz> http://testyourvocab.com/ # just found this a few days ago

[09:27] <moritz> it's a nice test, but it shows the same percentiles for native speakers and foreigners, which is a bit useless

[09:27] <perlhack> thanks 

[09:28] <perlhack> i am reading

[09:28] <moritz> it estimated that I know about 17k English words, which would be very low for a native speaker

[09:30] <perlhack> :-)Wa ..... 

[09:30] <perlhack> powerful..

[09:33] <moritz> if you learn 4300 words a year, you will be there in less than 5 years :-)

[09:33] <sorear> what?  moritz isn't native?!

[09:33] <perlhack> :-D

[09:34] <moritz> sorear: I know I'm breaking a convention here, having an all lower-case handle and not being native :-)

[09:34] <perlhack> Chinese people will use 4300 words

[09:35] <sorear> words mostly don't matter

[09:36] <sorear> correct use of tenses and moods is the true marker

[09:36] <perlhack> :-)how many would you ?

[09:36] <perlhack> 17000 words ?

[09:37] <sorear> "I will use 17000 words" does not really make sense

[09:38] <sorear> if I use an average of 7 words per minute for the next 90 years, then I will use 300,000,000 words

[09:39] <sorear> someone who will use 17000 words is either on their deathbed or amazingly laconic

[09:39] <perlhack> wa ....

[09:39] *** araujo joined
[09:39] <perlhack> powerful ....

[09:39] *** Util left
[09:40] <perlhack> i want to learn

[09:40] <moritz> sorear: I think the question was more about the number of distinct words, not overall numbers

[09:40] *** Util joined
[09:41] <sorear> still the use of the future tense is... odd

[09:41] *** amkrankruleuen joined
[09:41] <sorear> my 2-month-old cousin will probably use about as many distinct words as I will

[09:43] <perlhack> I wish i were american.

[09:44] <sorear> I wish I weren't.

[09:44] <huf> there are worse things to be

[09:45] <huf> perlhack: are you unamerican then? a pinko commie agitator?

[09:48] *** woosley left
[09:48] <dalek> niecza: ef5768b | sorear++ | lib/Kernel.cs:

[09:48] <dalek> niecza: First draft of StashCursor mechanism

[09:48] <dalek> niecza: review: https://github.com/sorear/niecza/commit/ef5768b681

[09:49] *** wamba joined
[09:52] *** CBro2007 joined
[09:54] * sorear out

[09:58] <mberends> huf: many a true word spoken in jest, perhaps unintentionally :P perlhack is Chinese.

[09:59] <CBro2007> are junctions used a lot in p6?

[09:59] <perlhack> huf,haha  i am a Chinese person.

[09:59] <perlhack> :-)

[09:59] <huf> :)

[10:00] <CBro2007> I just see the use of "|" (Any) 

[10:00] <perlhack> :-)

[10:02] *** xinming_ left
[10:02] <moritz> CBro2007: they aren't use too much in good code

[10:02] <CBro2007> ok

[10:02] <moritz> CBro2007: mostly just in conditions - if you pass them around through long code paths, things can get a bit fragile

[10:03] <CBro2007> ok but I can do without yeah?

[10:03] <CBro2007> just trying to understand what the advantage of using junctions would be

[10:03] <moritz> mostly just that you can write things shorter

[10:03] <mberends> CBro2007: people have too-high expectations that junctions might have set-like properties, and they don't.

[10:04] <moritz> if  $i == 0 || $i == 1 { ... }

[10:04] <moritz> can be replaced with

[10:04] *** xinming joined
[10:04] <moritz> if $i == 0|1 { ... }

[10:04] *** drbean joined
[10:04] <CBro2007> hm ok

[10:05] <moritz> it's also useful for things like   my @filter = @raw.grep: Str & *.defined & /^text/;

[10:07] <CBro2007> ok

[10:07] *** jerome joined
[10:09] <CBro2007> whats the latest perl6 reference for all its functions and operators etc?

[10:09] <CBro2007> moritz: you said perl6.org was the most up to date site yeah?

[10:09] <moritz> yes

[10:11] <CBro2007> k

[10:13] <moritz> .u EURO

[10:13] <phenny> U+20AC EURO SIGN (€)

[10:21] <CBro2007> moritz: when I say something like "say @list;" ... I just get the elements listed out with no spaces or commas between them. Is that normal?

[10:22] <CBro2007> or should I be writing it as something else?

[10:22] *** wamba left
[10:22] <moritz> CBro2007: by newest spec, you'll get spaces between the list items. rakudo hasn't caught up yet (except in the 'nom' branch)

[10:22] <moritz> the change is fairly recent, about 2 weeks ago

[10:23] <CBro2007> hmm .. is there something I could do in the meanwhile? just to see the output?

[10:23] <moritz> nom: my @a = 1, 2, 3; say @a

[10:23] <p6eval> nom: OUTPUT«1 2 3␤»

[10:23] <moritz> you mean with spaces?

[10:23] <CBro2007> yeah or with commads 

[10:23] <CBro2007> commas

[10:23] <moritz> rakudo: my @a = 1, 2, 3; @a.join(', ')

[10:23] <p6eval> rakudo f63b82:  ( no output )

[10:23] <moritz> rakudo: my @a = 1, 2, 3; say @a.join(', ')

[10:23] <p6eval> rakudo f63b82: OUTPUT«1, 2, 3␤»

[10:23] <CBro2007> right 

[10:24] <moritz> rakudo: my @a = 1, 2, 3; say ~@a # shorter, but not quite so pretty

[10:24] <p6eval> rakudo f63b82: OUTPUT«1 2 3␤»

[10:24] <moritz> rakudo: my @a = 1, 2, 3; say @a.perl; #quite informative

[10:24] <p6eval> rakudo f63b82: OUTPUT«[1, 2, 3]␤»

[10:24] <CBro2007> yep

[10:25] <CBro2007> man rakudo is super slow in execution though 

[10:25] <moritz> you can even get the variable names in the debug output with a little trick:

[10:25] <CBro2007> so i guess the priority is to get more modules written and then work on improving its performance yeah?

[10:25] <moritz> rakudo: my @a = 1, 2, 3; my $x = 3; say (:@a, :$x).perl

[10:26] <p6eval> rakudo f63b82: OUTPUT«("a" => [1, 2, 3], "x" => 3)␤»

[10:26] *** am0c left
[10:26] <moritz> CBro2007: any help in that direction would be appreciated

[10:26] <CBro2007> the (a,b) syntax is a Pair yeah?

[10:26] <moritz> :@a is what constructs the pair

[10:26] <moritz> it's the same as   a => @a

[10:27] <moritz> the ,  makes a list

[10:27] <moritz> and I just put parens around it so that I can call a method on the list

[10:27] <CBro2007> moritz: in which direction? performance or modules?

[10:27] <moritz> CBro2007: both :-)

[10:27] <moritz> CBro2007: performance is not easy though, it requires quite some familarity with parrot

[10:27] <CBro2007> yeah true

[10:28] <moritz> good news is that the nom branch is quite a bit faster

[10:28] <moritz> http://perlgeek.de/blog-en/perl-6/how-fast-is-nom.writeback

[10:28] <CBro2007> was wondering if I have to complete reading the article before I can try writing some p5 module to p6

[10:28] <CBro2007> coz now I am looking at laziness - like gather and take and infinite lists

[10:29] <CBro2007> don't know if they are used so often

[10:29] <CBro2007> esp infinite lists

[10:30] <CBro2007> is it possible to make a sub lazy?

[10:32] *** wamba joined
[10:37] <arnsholt> You can always return a lazy list, for example

[10:41] *** jaldhar left
[10:42] *** jaldhar joined
[10:42] *** smash joined
[10:42] <CBro2007> k

[10:43] *** wamba left
[10:43] <smash> hello everyone

[10:43] *** donri joined
[10:43] *** wamba joined
[10:45] <CBro2007> moritz: i like your examples for the MAIN sub :)  "--bad_lang PHP "

[10:47] *** perlhack left
[10:48] *** perlhack joined
[10:57] *** perlhack left
[10:57] <CBro2007> moritz: you around?

[10:57] <CBro2007> just wondering with the list of modules in --> https://github.com/perl6/ecosystem/wiki/Most-Wanted%3A-Modules-to-write-port 

[10:58] <CBro2007> what was the "Crypto" package? was there any crypto package from CPAN that you guys had in mind?

[11:00] *** ciphertext left
[11:00] <CBro2007> anyone? :)

[11:08] *** satyavvd left
[11:09] *** satyavvd joined
[11:11] *** satyavvd left
[11:26] *** ciphertext joined
[11:29] <moritz> Crypt::CBC is "the" cryptography module on CPAN

[11:29] <moritz> not sure what the author(s) of that page meant

[11:32] *** kaare__ joined
[11:44] *** nothingmuch joined
[11:45] <nine> CBro2007: seems like that page vanished?

[11:45] <CBro2007> nine: which page?

[11:46] <moritz> you might need to replace %3A with # or so

[11:46] <CBro2007> ah k

[11:47] *** ab5tract left
[11:47] <CBro2007> moritz: you said --> "not sure what the author(s) of that page meant"?

[11:47] <CBro2007> didn't follow you

[11:47] <moritz> with "Crypto"

[11:48] <CBro2007> ok

[11:49] <nine> Ah, https://github.com/perl6/ecosystem/wiki/Most-Wanted-Modules seems to be the correct URL

[12:01] *** pmurias joined
[12:08] <Su-Shee> I wrote "Crypto" and I meant stuff like sha, gpg, hashsum stuff, ssl and so on. 

[12:11] <moritz> nom: say ::('X').WHO<Base>

[12:11] <p6eval> nom: OUTPUT«Base()␤»

[12:11] <moritz> \o/

[12:12] <moritz> nom: class A::B { }; say ::('A').WHO<B>

[12:12] <p6eval> nom: OUTPUT«Any()␤»

[12:12] <moritz> nom: class A::B { }; say ::('A').WHO

[12:12] <p6eval> nom: OUTPUT«().hash␤»

[12:13] <moritz> seems that the way the thing is declared matters

[12:13] <moritz> packages A { class B { } }   vs.  class A::B

[12:20] *** icwiener joined
[12:23] *** Jackneill left
[12:25] *** bluescreen10 joined
[12:27] *** CBro2007 left
[12:32] <moritz> http://confluence.jetbrains.net/display/Kotlin/Basic+syntax+walk-through interesting new language

[12:32] <moritz> statically typed

[12:32] <moritz> they seem to get some syntax aspect right that new languages often screw up, IMHO

[12:33] <moritz> for example they have keywords for declataions (both functions and variables)

[12:33] <moritz> just the optional semicolon looks dangerous

[12:38] *** Tedd1 joined
[12:43] *** wtw left
[12:46] *** awoodland joined
[12:49] <moritz> http://news.ycombinator.com/item?id=2784086 a bit of analysis

[12:56] *** Jackneill joined
[12:56] *** Holy_Cow joined
[13:00] *** timbunce joined
[13:08] *** wamba left
[13:12] *** _twitch joined
[13:13] *** Alias joined
[13:19] *** tokuhirom joined
[13:32] *** wamba joined
[13:34] <dalek> book: 0e73eb7 | duff++ | book-ideas:

[13:34] <dalek> book: add a small idea

[13:34] <dalek> book: review: https://github.com/perl6/book/commit/0e73eb74df

[13:35] <moritz> PerlJam: I thought about that too. But first I wanted to implement and spec them :-)

[13:36] <PerlJam> moritz: then think of it as added pressure to do so  ;)

[13:37] <Jackneill> perl6: print: .

[13:37] <p6eval> rakudo f63b82: OUTPUT«===SORRY!===␤Confused at line 22, near "print: ."␤»

[13:37] <p6eval> ..niecza v7-42-gef5768b: OUTPUT«===SORRY!===␤␤Bogus statement at /tmp/pSaoCvADvg line 1:␤------> print: ⏏.␤␤Parse failed␤␤»

[13:37] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected end of input␤    expecting ".", "\187", ">>", "=", "^", operator name, qualified identifier, variable name, "...", "--", "++", "i", array subscript, hash subscript or code subscript␤    at /tmp/YRctrSIpD2 line 1, column 9␤»

[13:37] <PerlJam> maybe we should setup a site where people can vote on the importance of the book ideas.  :-)

[13:37] *** JimmyZ joined
[13:39] * [Coke] hurls http://www.boingboing.net/2011/07/19/tom-the-dancing-bug-58.html for... moritz? masak?

[13:40] <flussence> rakudo: print ord("\187")

[13:41] <p6eval> rakudo f63b82: OUTPUT«===SORRY!===␤Unrecognized backslash sequence: '\1' at line 22, near "87\")"␤»

[13:41] <PerlJam> [Coke]: heh!

[13:41] <flussence> erm.

[13:41] <flussence> rakudo: print :8(187)

[13:41] <p6eval> rakudo f63b82: OUTPUT«Invalid character (8)! Please try again :) ␤  in main program body at line 1:src/metamodel/RoleToInstanceApplier.nqp␤»

[13:41] <flussence> whaa

[13:41] <flussence> rakudo: print 0o187

[13:41] <p6eval> rakudo f63b82: OUTPUT«===SORRY!===␤Confused at line 22, near "print 0o18"␤»

[13:41] <flussence> :(

[13:41] <flussence> oh

[13:42] * flussence smacks self in head

[13:42] <moritz> flussence: :8($string) tries to interpret $string as an octal value

[13:42] <moritz> but those can only go up to 7

[13:42] <flussence> I saw \[:digit:]{3} and thought "that looks octal"

[13:43] <flussence> ...wait...

[13:43] <flussence> pugs: say ord("\187")

[13:43] <p6eval> pugs: OUTPUT«pugs: Error: Invalid escape sequence \187; write as decimal \c187 or octal \o187 instead␤»

[13:43] <flussence> .u 187

[13:43] <phenny> flussence: Sorry, no results for '187'.

[13:45] <moritz> flussence: what do you want to do?

[13:45] *** JimmyZ left
[13:45] <flussence> wondering what that "\187" pugs was expecting is

[13:49] *** Jackneill left
[13:49] <PerlJam> probably a guillemet

[13:50] *** drbean left
[13:50] <moritz> pugs: say chr(187)

[13:50] <p6eval> pugs: OUTPUT«Â»␤»

[13:51] *** pmurias left
[14:10] *** hatsefla1s left
[14:11] *** CBro2007 joined
[14:12] *** tadzik joined
[14:12] *** hatseflats joined
[14:18] *** itz joined
[14:18] <itz>  version 2011.04-1240-g0f7be02 <=- is that "nom"?

[14:18] <pmichaud> good morning, #perl6

[14:19] <moritz> good am, pm

[14:19] <moritz> nom: say ::('Int')

[14:19] <p6eval> nom: OUTPUT«Int()␤»

[14:19] <moritz> itz: yes

[14:19] <itz> ty

[14:20] <pmichaud> moritz: \o/

[14:20] *** wamba left
[14:20] <moritz> git show 2011.04-1240-g0f7be02  even tells you in the commit message that it's nom :-) (ok, it could be lying)

[14:20] <moritz> pmichaud: and I think I know how to handle the A::B case, but it won't work in all cases right now

[14:21] <moritz> nom: say ::('X').WHO<Base> # looks up X::Base

[14:21] <p6eval> nom: OUTPUT«Base()␤»

[14:21] <moritz> but

[14:21] <moritz> nom: class A::B { }; say ::('A').WHO<B>

[14:21] <p6eval> nom: OUTPUT«Any()␤»

[14:21] <moritz> doesn't work yet - but I think it's a bug in the A::B declaration, not a "real" limitation

[14:22] <pmichaud> it's a bug in the A::B decl, yes.

[14:26] <moritz> anyway, adding ::() was fun

[14:26] *** envi left
[14:28] <moritz> nom: $Foo::('x')::Bar

[14:28] <p6eval> nom:  ( no output )

[14:28] <moritz> nom: say $Foo::('x')::Bar

[14:28] <p6eval> nom: OUTPUT«Any()␤»

[14:28] <moritz> I have the suspicion that this is misparsed

[14:28] <moritz> but I'm not entirely sure

[14:29] <moritz> anyway, I shouldn't distract pmichaud++ from working on the regex engine :-)

[14:30] <itz> nom: say $*VM<config>

[14:30] <p6eval> nom: OUTPUT«Method 'at_key' not found for invocant of class 'Failure'␤current instr.: 'postcircumfix:<{ }>' pc 466539 (src/gen/CORE.setting.pir:122974) (src/gen/CORE.setting:600)␤»

[14:34] *** Tedd1^ joined
[14:35] *** Tedd1 left
[14:38] *** JimmyZ joined
[14:38] <moritz> nom: say X.WHO.WHAT

[14:38] <p6eval> nom: OUTPUT«Stash()␤»

[14:39] <moritz> nom: say X.WHO.exists('Base')

[14:39] <p6eval> nom: OUTPUT«Bool::True␤»

[14:39] *** wamba joined
[14:40] <JimmyZ> rakudo: 'eval'().say

[14:40] <p6eval> rakudo f63b82: OUTPUT«invoke() not implemented in class 'Perl6Str'␤  in main program body at line 22:/tmp/Pra3FRY1Ad␤»

[14:40] <JimmyZ> rakudo: 'ls'.'eval'().say

[14:40] <p6eval> rakudo f63b82:  ( no output )

[14:41] *** MayDaniel joined
[14:48] *** tokuhirom left
[14:48] <moritz> nom: say nqp::split('::', 'foo::bar::baz').perl

[14:48] <p6eval> nom: OUTPUT«Method 'perl' not found for invocant of class 'ResizableStringArray'␤current instr.: '_block1002' pc 89 ((file unknown):17848077) (/tmp/M3ehS54sbF:1)␤»

[14:49] <moritz> oh, it's not an RPA

[14:49] <moritz> so it's not type-mapped

[14:51] *** noganex left
[14:52] *** Alias left
[14:58] *** awoodland left
[14:58] *** simcop2387 joined
[15:05] *** molaf joined
[15:13] *** perlhack joined
[15:15] *** MayDaniel left
[15:17] <CBro2007> guys what is the "but" operator doing here? my $x = $today but Day::Tue;

[15:18] <CBro2007> earlier on ...   enum Day ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun');

[15:18] <CBro2007> I don't quite get what its doing ... 

[15:24] <TimToady> do you know about mixins?

[15:28] <TimToady> anyway, this is discussed in S12:1869

[15:28] *** thou__ joined
[15:29] <CBro2007> TimToady: no I don't know mixins

[15:29] <CBro2007> is that a p5 concept too? or just p6?

[15:29] <TimToady> Moose does it in p5

[15:30] <TimToady> it's basically taking an object and putting it into a new subclass with new functionality

[15:30] <TimToady> where the old class is now the parent class

[15:31] <TimToady> do you know how to follow that S12 link I gave you?

[15:31] <TimToady> it's highlighted as a link on http://irclog.perlgeek.de/perl6/2011-07-20#i_4142422

[15:34] <CBro2007> TimToady: do you recommend reading the "Using Perl6" book?

[15:34] *** bluescreen100 joined
[15:34] <CBro2007> or is that a bit out of date?

[15:34] <TimToady> it's pretty up-to-date

[15:35] <TimToady> as far as I know, anyway; haven't read it myself

[15:35] <CBro2007> okie

[15:35] * TimToady learned Perl 6 a different way...

[15:35] * JimmyZ recommends reading SYN and testcase

[15:36] *** bluescreen10 left
[15:36] <CBro2007> TimToady: how? 

[15:37] *** simcop2387 left
[15:37] <CBro2007> TimToady: I have done perl 5 , but have had a gap of a few years .. so missed out on things like Moose

[15:37] <CBro2007> I am currently reading the perl 5 to 6 article moritz wrote

[15:37] <CBro2007> gives me a good idea as to what is possible in p6

[15:38] <CBro2007> someone recommended reading "Modern Perl" for p5 

[15:40] <CBro2007> TimToady: I thought you where gonna tell me your trick :)

[15:41] <TimToady> it's easy to learn a language when you design it yourself, for some definition of "easy" that doesn't seem to include much "ease"

[15:41] <CBro2007> hm

[15:42] *** tokuhirom joined
[15:43] *** simcop2387 joined
[15:53] *** JimmyZ left
[15:54] *** bluescreen100 left
[15:54] <dalek> rakudo/nom: 2357ca6 | moritz++ | src/core/Str.pm:

[15:54] <dalek> rakudo/nom: implement Str.split(Regex, :$all) -- no limit yet

[15:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2357ca6d3e

[15:54] *** y3llow joined
[15:55] *** dakkar left
[15:55] <TimToady> .oO(the possibilities are limitless...)

[15:55] *** dakkar joined
[15:56] *** bluescreen100 joined
[15:56] <CBro2007> TimToady: can you refer me to the latest documentation on all functions.. for example: I was wondering what this was --> $file.get.words;

[15:56] <CBro2007> so I want to see all methods that belong to $file object

[15:56] <moritz> $file is of type IO

[15:56] <CBro2007> yep I just want a list that I can refer to while coding

[15:56] <moritz> so you have to look in S32/IO

[15:56] *** perlhack left
[15:57] <CBro2007> so is there no site that shows all the built-in functions that are available?

[15:57] *** alester joined
[15:57] <TimToady> rakudo: say ~IO.^methods

[15:57] <p6eval> rakudo f63b82: OUTPUT«close eof get ins lines open print printf say read write getc slurp t d e f s l z created modified accessed changed move chmod copy link autoflush path stat Numeric Real Int Rat Num abs conjugate exp log log10 sqrt roots to-radians from-radians floor ceiling round …

[15:57] <moritz> say ~IO.^methods(:local)

[15:57] <moritz> rakudo: say ~IO.^methods(:local)

[15:57] <p6eval> rakudo f63b82: OUTPUT«close eof get ins lines open print printf say read write getc slurp t d e f s l z created modified accessed changed move chmod copy link autoflush path stat␤»

[15:58] <TimToady> nom: say IO.^methods

[15:58] <p6eval> nom: OUTPUT«open close eof get lines print say <anon> <anon> eager elems end classify infinite flat hash list pick roll reverse sort values Array grep join map min postcircumfix:<[ ]> at_pos postcircumfix:<{ }> ACCEPTS WHERE WHICH Bool defined new CREATE bless BUILDALL Numeric Str Strin…

[15:58] <CBro2007> but I want to see what each of these mean :)

[15:58] *** kst joined
[15:58] <TimToady> ah, well, you didn't ask that :)

[15:58] <CBro2007> sorry my bad :)

[15:59] <TimToady> but moritz++ already mentioned S32/IO

[15:59] <moritz> it's the closest we have right now

[15:59] <CBro2007> I have no idea what S32 means :)

[15:59] <TimToady> see http://perlcabal.org/syn/

[15:59] <TimToady> and look for IO

[16:01] <CBro2007> thanks

[16:01] *** quiccker joined
[16:01] <TimToady> moritz: I note that S32 doesn't link usefully in the irclog

[16:02] <TimToady> CBro2007: note that IO is still a draft, and is a bit under/over-engineered in spots

[16:02] <CBro2007> ah well.. its the best for now :)

[16:02] <TimToady> and in some cases just wrong

[16:02] <CBro2007> something is better than nothing

[16:02] <TimToady> troo

[16:02] *** am0c joined
[16:02] <TimToady> except when it isn't :)

[16:02] <CBro2007> hehe

[16:02] <moritz> TimToady: mental note taken

[16:02] <CBro2007> am just going through that book

[16:03] <CBro2007> looking at some sample code

[16:03] *** icwiener left
[16:03] <dalek> rakudo/nom: 69fe226 | moritz++ | src/core/operators.pm:

[16:03] <dalek> rakudo/nom: implement indirect name lookup of composed names ::("X::Base")

[16:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/69fe22654e

[16:03] *** icwiener joined
[16:07] <moritz> evalbot rebuild nom

[16:07] <p6eval> OK (started asyncronously)

[16:07] <moritz> evalbot control restart

[16:10] <moritz> it seems that in some cases the internet connection of p6eval is glacially slow

[16:10] *** p6eval joined
[16:10] *** ChanServ sets mode: +v p6eval

[16:10] <moritz> especially when it comes to opening new connections

[16:10] <moritz> decommute&

[16:15] <ashleydev> it'd be cool to be able to do `say IO.^methods_with_docs` or `say IO.^man`  and get the pod with the methods and such

[16:15] *** CBro2007 left
[16:24] <pmichaud> moritz++  # excellent indirect names implementation

[16:29] *** ab5tract joined
[16:30] *** daniel-s_ left
[16:30] *** SHODAN joined
[16:31] <TimToady> ashleydev: eventually IO.WHY should get to that info

[16:31] <ashleydev> nice

[16:31] <TimToady> maybe accessible via %=POD as well, somehow

[16:31] * benabik wonders what .WHY.WHY.WHY would document.

[16:31] *** wamba left
[16:32] <pmichaud> it would show how Perl is currently being used by 4-year-olds.

[16:33] <pmichaud> taken to its logical extension, .WHY.WHY.WHY.WHY....   ultimately returns "Because Larry said so."

[16:33] <benabik> pmichaud++

[16:41] *** wolfman2000 joined
[16:44] *** lichtkind joined
[16:45] *** tokuhirom left
[16:45] *** cooper left
[16:52] <lichtkind> thou__: 2 more projects ready i come nearer every day :)

[16:56] *** birdwindupbird left
[16:59] <[Coke]> I haz a google problem. ".WHY" returns results for "WHY". Help, perl-six-kenobi.

[16:59] *** daxim left
[17:03] *** bs338 left
[17:04] *** am0c left
[17:04] <TimToady> You don't have a google problem; google has a you problem.  :)

[17:08] *** _twitch left
[17:08] <flussence> er... should nom be using 1.6GB RAM on S03-sequence/basic.t?

[17:09] *** bs338 joined
[17:10] <pmichaud> flussence: I don't know.  I can't really say without knowing how much memory other programs run in your environment. (more)

[17:10] <pmichaud> perhaps comment out tests and see if there's any one test that pushes up the memory usage

[17:11] *** Kivutarrr joined
[17:11] <pmichaud> what are you using to measure memory usage?

[17:12] *** dakkar left
[17:12] <flussence> htop, a full memory usage bar and a process that's been stuck at 100% cpu for 2 hours :)

[17:12] *** bs338 left
[17:12] *** bs338 joined
[17:12] <diakopter> ooo htop

[17:14] *** wamba joined
[17:14] <flussence> aha

[17:14] <flussence> it's running 63 on that machine

[17:14] <flussence> it's marked SKIP on my other one...

[17:15] *** kcwu joined
[17:16] *** Chillance joined
[17:18] *** CBro2007 joined
[17:19] <pmichaud> nom:  say &[+].count

[17:19] <p6eval> nom: OUTPUT«1␤»

[17:19] <pmichaud> ...wonder what's happening there.

[17:20] <flussence> rakudo: say [+] ()

[17:20] <p6eval> rakudo f63b82: OUTPUT«0␤»

[17:20] <flussence> that?

[17:20] <pmichaud> nom:  say &infix:<+>.count

[17:20] <p6eval> nom: OUTPUT«1␤»

[17:21] *** lichtkind left
[17:21] <moritz> the &[+] version should only return arity 2 candidates

[17:22] <pmichaud> nom:  sub f(|$) { * };  say &f.count

[17:22] <p6eval> nom: OUTPUT«1␤»

[17:22] <pmichaud> aha.

[17:23] <pmichaud> flussence: test #68 in S03-sequence/basic.t

[17:23] <pmichaud> infinite loops, currently

[17:30] *** mj41 left
[17:32] <pmichaud> > say &[+].count

[17:32] <pmichaud> 2

[17:32] *** kjeldahl joined
[17:32] <flussence> huh, this isn't right...

[17:32] <flussence> my test run gets stuck after "ok 62 - alternating False and True is always Bool"

[17:33] <flussence> the next one is line 104

[17:33] *** lichtkind joined
[17:33] <pmichaud> what does the .rakudo file look like?

[17:34] <pmichaud> and is this 'nom' or 'master'?

[17:34] <flussence> nom

[17:34] <flussence> ah

[17:34] <flussence> it doesn't seem to be making a .rakudo file...

[17:34] <flussence> and t/spec is on the wrong branch... /facepalm

[17:35] *** lichtkind left
[17:35] <dalek> roast: df522ec | pmichaud++ | S03-sequence/basic.t:

[17:35] <dalek> roast: Unfudge a passing test.

[17:35] <dalek> roast: review: https://github.com/perl6/roast/commit/df522ec269

[17:36] <dalek> rakudo/nom: e2279de | pmichaud++ | src/core/Numeric.pm:

[17:36] <dalek> rakudo/nom: Fix .count for various numeric operators.  flussence++ .

[17:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e2279dedc9

[17:40] *** uvtc joined
[17:43] <uvtc> Noticed that the recent "Upcoming Rakudo releases" post (at rakudo.org) did not appear at planetsix. Seems like it ought've to ... ought to have.

[17:44] *** impious joined
[17:45] *** Kivutarrr left
[17:47] *** uvtc left
[17:48] *** jaldhar left
[17:48] *** jaldhar joined
[17:51] *** wamba left
[17:54] *** Jackneill joined
[17:54] *** jaldhar left
[17:55] *** mj41 joined
[17:59] *** Kivutarrr joined
[18:00] *** impious left
[18:00] *** impious joined
[18:03] *** Kivutarrr left
[18:04] *** saaki joined
[18:06] <moritz> nom: say 'abc' ~~ m:g/./

[18:06] <p6eval> nom: OUTPUT«Null PMC access in clone()␤current instr.: 'nqp;QRegex;P6Regex;Grammar;nibbler' pc 34391 (src/stage2/QRegex.pir:11337) (src/stage2/QRegex.nqp:771)␤»

[18:11] <[Coke]> uvtc - checking planetsix source...

[18:11] <[Coke]> get this! rakudo.org's blog is not in sixplanet.

[18:11] <[Coke]> Shall I rectify that?

[18:12] <sorear> good * #perl6

[18:12] *** Zapelius joined
[18:13] <[Coke]> (added)

[18:13] <[Coke]> uvtc++

[18:14] <[Coke]> give it an hour or so to catchup.

[18:18] <[Coke]> OHEY. I still can't build rakudo/nom on windows 7.

[18:24] <[Coke]> so, erum... help?

[18:26] *** Jackneill left
[18:26] <PerlJam> [Coke]: what dev environment do you use on windows 7?

[18:28] <[Coke]> gitbash for git; visual studio for compiling, strawberry perl.

[18:29] <[Coke]> so, I build parrot, test, install, fine. build nqp, install, fine. config rakudo/nom, fine. build, BOOM

[18:29] <[Coke]> (complains that the version of nom is too old, but not at configure time, only at build time.

[18:31] <PerlJam> [Coke]: is this with --gen-parrot/--gen-nqp  or are they built separately?

[18:32] <[Coke]> built separately - I can't build them together at the moment, because git-bash and visual command prompt are separate shells.

[18:33] <PerlJam> [Coke]: do you have an install dir in rakudo though?

[18:33] <[Coke]> no

[18:33] <[Coke]> I build and install parrot, build and install nqp.

[18:34] <PerlJam> aye, I mean even accidentally have that dir

[18:36] <PerlJam> the reason I ask is that I seem to recall that, at build time, rakudo/install/bin/nqp will be given precedence over an actual installed-somewhere-else-but-still-in-your-path nqp

[18:36] <[Coke]> I'll double check. in the middle of rebuilding nom on new parrot.

[18:37] <PerlJam> oh, but you said it complains that nom is too old?  that's odd.

[18:38] *** leprevost joined
[18:38] * PerlJam read "nqp" instead of "nom"

[18:40] <PerlJam> in any case, I've had trouble with build-time rakudo using the wrong nqp in the past, so it may still be problematic

[18:40] <[Coke]> no install directory.

[18:40] <[Coke]> ok, just rebuilt parrot(latest) and nqp(latest)

[18:42] *** molaf left
[18:44] <[Coke]> https://gist.github.com/1095608

[18:45] *** tokuhirom joined
[18:49] <[Coke]> This is nqp version  built on parrot 3.6.0 revision

[18:50] <[Coke]> ... So, the problem is probably that nqp requires the git executable during the build.

[18:50] <PerlJam> sounds perfectly reasonable.

[18:51] <[Coke]> I'll have to reinstall git bash to make that work, I suppose.

[18:51] *** tokuhirom left
[18:52] <[Coke]> In the meantime, I'll just comment that part of the check-versions script out.

[18:55] *** Zapelius left
[18:55] <PerlJam> [Coke]: Hmm.  Looking at the code, it doesn't look like it uses git at all to me.

[18:56] <[Coke]> how does nqp get its version id?

[18:56] <PerlJam> it's baked-in when built 

[18:57] <[Coke]> ... and how does the /build/ get it?

[18:58] <PerlJam> what does "nqp --show-config | grep nqp::version" (from the command line)  show?

[18:58] *** donri left
[18:59] <[Coke]> nqp::version=

[19:00] <[Coke]> ... it's using git --describe in tools/build/gen-version.pl

[19:00] <PerlJam> maybe the build should do something different (carp?) when it can't obtain the version

[19:00] <[Coke]> so, *boom*. not everyone has git executables in their path, esp. on windows.

[19:00] <[Coke]> (imagine a windows user with tortoiseGit, e.g.)

[19:01] <PerlJam> [Coke]: devs should have git in their paths  :)

[19:01] <[Coke]> this isn't a "dev" thing, it's a "builder" thing.

[19:02] <[Coke]> crud, meeting.

[19:04] *** wamba joined
[19:05] <moritz> pmichaud: ping

[19:07] *** donri joined
[19:09] <moritz> nom: say reverse(1, 2)

[19:09] <p6eval> nom: OUTPUT«Could not find sub &reverse␤current instr.: '_block1002' pc 80 ((file unknown):82812394) (/tmp/UgBpbSNJSv:1)␤»

[19:14] *** donri left
[19:19] *** miso2217 left
[19:19] <moritz> nom: say 42 gcd 22

[19:19] <p6eval> nom: OUTPUT«2␤»

[19:20] *** miso2217 joined
[19:21] *** birdwindupbird joined
[19:25] *** donri joined
[19:30] *** noganex joined
[19:32] <dalek> rakudo/nom: 823f449 | moritz++ | / (3 files):

[19:32] <dalek> rakudo/nom: implement &floor and &reverse, add more test files

[19:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/823f4491bc

[19:33] *** ab5tract left
[19:35] *** simcop2387 left
[19:38] *** wolfman2000 left
[19:39] <dalek> roast: 3d679db | moritz++ | / (3 files):

[19:39] <dalek> roast: some rakudo un/refudging, simplify 99problems-31-to-40.t

[19:39] <dalek> roast: review: https://github.com/perl6/roast/commit/3d679db811

[19:39] *** simcop2387 joined
[19:40] *** donri left
[19:41] *** cooper joined
[19:43] *** lichtkind joined
[19:44] *** alester left
[19:48] *** lichtkind left
[19:53] *** donri joined
[19:59] *** Tedd1^ left
[20:00] *** ciphertext left
[20:00] *** soh_cah_toa joined
[20:03] *** bluescreen100 left
[20:06] *** ciphertext joined
[20:17] *** bluescreen100 joined
[20:31] *** CBro2007_ joined
[20:35] *** CBro2007 left
[20:35] *** CBro2007_ is now known as CBro2007

[20:35] *** birdwindupbird left
[20:36] *** [particle] left
[20:42] * [Coke] kicks off a smolder run for parrot on win7.

[20:42] <[Coke]> er, for rakudo

[20:44] *** [Coke] left
[20:45] *** [Coke] joined
[20:50] *** [Coke] left
[20:52] *** [Coke] joined
[20:54] <dalek> specs: 4dbf083 | moritz++ | S32-setting-library/Str.pod:

[20:54] <dalek> specs: [S32/Str] fix braino

[20:54] <dalek> specs: review: https://github.com/perl6/specs/commit/4dbf083d4b

[20:58] *** Fuad joined
[21:01] <dalek> rakudo/nom: e6f6b27 | moritz++ | src/core/ (2 files):

[21:01] <dalek> rakudo/nom: basic Str.comb implementation

[21:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e6f6b2776f

[21:01] *** tokuhirom joined
[21:12] *** wolfman2000 joined
[21:14] *** kaare__ left
[21:14] *** Holy_Cow left
[21:19] *** SHODAN left
[21:19] <[Coke]> hurm. "make smoke" now failing because it's ignoring the http_proxy I set. wtf.

[21:19] <[Coke]> sorry, "make spectest_smolder"

[21:20] *** smash left
[21:20] <[Coke]> also, why does "make spectest_smolder" keep rebuilding a ton of stuff every time I invoke it?

[21:21] <[Coke]> even just "nmake spectest" is doing that.

[21:22] * [Coke] will attempt to debug this later. :(

[21:22] *** y3llow left
[21:22] *** timbunce left
[21:22] *** y3llow joined
[21:22] *** pothos_ joined
[21:23] *** pothos_ is now known as pothos

[21:26] <Fuad> hi all

[21:26] <takadonet> Fuad: yo

[21:27] <Fuad> takadonet: hey, sup mang

[21:28] <takadonet> Fuad: @ work u?

[21:28] *** timbunce joined
[21:30] <Fuad> takadonet: same here

[21:31] <[Coke]> I need "make t\spec" to use the http url instead of the git:// url.

[21:32] <[Coke]> add a config option?

[21:35] *** bluescreen100 left
[21:36] *** Fuad left
[21:36] *** impious left
[21:43] *** Psyche^ joined
[21:45] *** wamba left
[21:47] *** Patterner left
[21:47] *** Psyche^ is now known as Patterner

[21:51] *** tadzik_kindle joined
[21:51] <tadzik_kindle> hello zebras

[21:51] <[Coke]> are you really irc'ing from your kindle?

[21:51] <[Coke]> because... ew.

[21:52] <tadzik_kindle> say hello to the broken internet in the hotel

[21:53] <tadzik_kindle> masak says hi

[21:55] <[Coke]> decommute == "head home from work", yes?

[21:56] <[Coke]> or is it "arrive at home after commuting"?

[21:57] <tadzik_kindle> dunno

[21:58] *** Transformer joined
[21:58] <ingy> o/

[21:58] <tadzik_kindle> anything interesting in the perl6 world today?

[21:59] <tadzik_kindle> ingy o/

[21:59] <ingy> hi tadzik_kindle :)

[21:59] *** Transformer left
[22:05] *** cognominal joined
[22:08] *** kjeldahl left
[22:08] *** ashleyde1 joined
[22:08] <tadzik_kindle> we have very limited internet access here in bison land 

[22:08] *** mj41_nb joined
[22:11] *** dju_ joined
[22:12] *** drbean joined
[22:13] *** ashleydev left
[22:13] *** mj41 left
[22:13] *** dju left
[22:13] *** wamba joined
[22:13] *** daemon joined
[22:13] *** dju_ is now known as dju

[22:16] <sorear> hello tadzik_kindle

[22:16] <tadzik_kindle> hi

[22:17] * sorear is playing with MY::.{$name}

[22:18] * tadzik_kindle and masak_near_kindle are writing the Little Animal Farm game

[22:21] *** jdhore joined
[22:31] *** mj41_nb left
[22:31] *** tadzik_kindle left
[22:46] *** JodaZ_ joined
[22:47] *** beek_ joined
[22:47] *** beek_ is now known as Guest59342

[22:48] *** timbunce left
[22:49] <benabik> Was tadzik on from a Kindle?  Kindles have IRC?

[22:50] *** PacoLinux_ joined
[22:54] *** jdhore left
[22:54] *** daemon left
[22:54] *** wamba left
[22:54] *** p6eval left
[22:54] *** hatseflats left
[22:54] *** tadzik left
[22:54] *** beekor left
[22:59] *** daemon joined
[22:59] *** p6eval joined
[22:59] *** hatseflats joined
[22:59] *** tadzik joined
[22:59] *** ChanServ sets mode: +v p6eval

[23:03] *** jdhore joined
[23:09] *** whiteknight joined
[23:12] *** envi joined
[23:24] *** drbean left
[23:28] *** donri left
[23:33] *** orafu left
[23:35] *** orafu joined
[23:35] *** leprevost left
[23:35] *** thou__ left
