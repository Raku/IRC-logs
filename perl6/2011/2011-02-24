[00:01] *** ab5tract joined
[00:06] *** donaldh left
[00:08] *** ab5tract left
[00:10] *** cibs joined
[00:13] *** molaf_ joined
[00:17] *** molaf left
[00:36] *** saaki joined
[00:36] *** jtbraun joined
[00:38] *** bhwu joined
[00:42] *** kensanata joined
[00:57] *** dolmen left
[00:59] *** qiyong joined
[01:01] *** nymacro joined
[01:08] *** rdesfo joined
[01:19] *** rdesfo left
[01:20] *** kensanata left
[01:29] *** maja left
[01:29] *** maja joined
[01:35] *** cdarroch left
[01:37] *** qiuhw joined
[01:39] *** jtbraun1 joined
[01:44] *** cotto_work left
[01:44] *** rdesfo joined
[01:44] *** rdesfo left
[01:44] *** rdesfo joined
[01:46] *** jtbraun1 left
[01:46] *** jtbraun1 joined
[01:47] *** cotto_work joined
[01:48] *** jferrero left
[01:53] *** MOAR-f00li5h is now known as f00li5h

[01:54] *** rdesfo left
[01:54] *** Sarten-X joined
[02:00] *** arlinius joined
[02:01] *** noganex_ joined
[02:02] *** jtbraun1 left
[02:05] *** noganex left
[02:13] *** am0c joined
[02:14] *** jtbraun1 joined
[02:16] *** bluescreen left
[02:18] <dalek> sprixel: d270e0f | diakopter++ | sprixel/s (10 files):

[02:18] <dalek> sprixel: lots more grammar/regex/parsing infrastructure/work/progress.  And slashes.

[02:18] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/d270e0f6c0

[02:20] <diakopter> good * sorear

[02:22] *** Solarion_ left
[02:22] *** Solarion_ joined
[02:22] <sorear> good * #perl6

[02:22] *** Solarion_ is now known as Solarion

[02:22] <sorear> diakopter: :p

[02:26] *** qiuhw left
[02:29] <diakopter> perlesque: grammar Foo { rule TOP { { say 5666 } } };  Foo.new.parse('nothing')

[02:29] <p6eval> perlesque: OUTPUT«5666␤»

[02:36] *** jtbraun1 left
[02:37] *** jtbraun1 joined
[02:40] *** jtbraun1 left
[02:40] *** jtbraun1 joined
[02:44] *** jtbraun1 left
[02:44] *** jtbraun1 joined
[02:49] *** jtbraun1 left
[02:49] *** qiuhw joined
[02:57] *** aindilis left
[03:11] <sorear> TimToady: Under what circumstances is $match[0] === $match?

[03:11] <sorear> tadzik: Rakudo is not bootstrapped yet!  The compiler is still written entirely in NQP.

[03:23] <Tene> phenny: ask jnthn when he expects to have time available to talk to me about cardinal metamodel on 6model.

[03:23] <phenny> Tene: I'll pass that on when jnthn is around.

[03:23] <Tene> phenny: Thanks; I really appreciate it.

[03:25] <sorear> Tene: I know a few things about 6model; can I help?

[03:32] *** aindilis joined
[03:35] *** stifynsemons joined
[03:48] <tewk> So what is best practice for installing Perl6 modules proto, pls, neutro?

[03:52] *** JimmyZ_ joined
[03:55] <JimmyZ_> tewk: https://github.com/perl6/modules.perl6.org

[03:56] *** stifynsemons left
[04:05] <JimmyZ_> std: sub foo($bar:) {};

[04:05] <p6eval> std 4608239: OUTPUT«Potential difficulties:␤  $bar is declared but not used at /tmp/8rhTkW7FvT line 1:␤------> [32msub foo([33m⏏[31m$bar:) {};[0m␤ok 00:01 120m␤»

[04:06] <JimmyZ_> rakudo: sub foo($bar:) {};

[04:06] <p6eval> rakudo 58e40e:  ( no output )

[04:06] <JimmyZ_> std: sub foo($bar:) { say $bar };

[04:06] <p6eval> std 4608239: OUTPUT«ok 00:01 122m␤»

[04:23] *** Su-Shee joined
[04:27] *** Su-Shee_ left
[04:28] *** stifynsemons joined
[04:35] *** nadim_ left
[04:35] *** nadim_ joined
[04:37] *** sftp_ left
[04:38] *** eternaleye left
[04:43] *** mtk left
[04:43] <Tene> rakudo: my sub foo($bar:) { say "lol: $bar" }; "ohai".&foo;

[04:43] <p6eval> rakudo 58e40e: OUTPUT«Lexical 'self' not found␤  in 'foo' at line 1:/tmp/UzZGpsuyqh␤  in main program body at line 22:/tmp/UzZGpsuyqh␤»

[04:47] *** eternaleye joined
[04:51] *** am0c left
[04:51] *** mtk joined
[05:03] *** rodarmor joined
[05:30] *** rodarmor left
[05:35] *** kanishka joined
[05:53] <TimToady> rakudo: say 1[0] === 1

[05:53] <phenny> TimToady: 21 Feb 02:56Z <diakopter> ask TimToady  S05 is out-of-sync with STD wrt :ignoremark (S05) vs. :ignoreaccent (STD) ... which is right and which is the fossil...?

[05:53] <phenny> TimToady: 23 Feb 20:06Z <diakopter> tell TimToady nm about the mark/accent; we fixed it

[05:53] <p6eval> rakudo 58e40e: OUTPUT«Bool::True␤»

[05:54] <TimToady> sorear: ^^ just as 1[0] is forced to return 1, I suspect $match[0] should be forced to return $match if the positional interface "isn't operative"

[05:56] <TimToady> greetings from Nairobi, btw

[05:56] <TimToady> finally got my net connection set up here

[05:58] <TimToady> phenny: tell masak if there is something in S09 that indicates negative .[] subscripts are allowed, it's a fossil; the intent is that negative subscripting be done with .{} instead

[05:58] <phenny> TimToady: I'll pass that on when masak is around.

[05:59] *** drbean left
[06:03] *** stifynsemons left
[06:03] *** qiuhw left
[06:11] *** Schwern joined
[06:13] *** drbean joined
[06:14] *** zostay left
[06:15] *** zostay joined
[06:18] *** satyavvd joined
[06:20] *** kaare joined
[06:21] *** kaare is now known as Guest98189

[06:21] <perigrin> 22

[06:21] <perigrin> *sigh*

[06:22] *** kanishka left
[06:22] *** kanishka joined
[06:23] *** am0c joined
[06:27] <sorear> TimToady: does that extend to $0 meaning $/ if there are no pos captures?

[06:29] <TimToady> well...one can argue it both ways.  Certainly $0 is a little prettier than $/, and less likely to be confusing in a s/foo/$0/ than s/foo/$//

[06:30] *** jtbraun1 joined
[06:30] <TimToady> I'm trying to formulate an argument against it that doesn't seem more like a foolish consistency

[06:32] <diakopter> std: $$/[$0]/$/[$0]

[06:32] <p6eval> std 4608239: OUTPUT«ok 00:01 121m␤»

[06:32] <TimToady> but it seems like making a ()-less pattern act as if there were implicit () around the whole thing kinda smooths over the damage of having an object that overloads so many roles

[06:33] <TimToady> and fits with the 1[0] policy

[06:33] * sorear mostly wants to avoid massive yak shaving for the ? change

[06:33] <diakopter> std: $$$/[0]

[06:34] <p6eval> std 4608239: OUTPUT«ok 00:01 119m␤»

[06:34] <sorear> 167+ matches for \[0\] in STD & NieczaActions

[06:35] <sorear> niecza v3 may be up to 4-5 days late

[06:36] <sorear> I'm not sure I have time for paranoid build QC this weekend, especially due to the parser changes

[06:38] <diakopter> std: $$$$$$0

[06:38] <p6eval> std 4608239: OUTPUT«ok 00:01 118m␤»

[06:38] <diakopter> pugs: say $$$$$$0

[06:38] <p6eval> pugs: OUTPUT«␤»

[06:38] <diakopter> niecza: say $$$$$$0

[06:38] <p6eval> niecza v2-104-g891071d: OUTPUT«Any()␤»

[06:38] <diakopter> niecza: say $$$$$$/

[06:39] <p6eval> niecza v2-104-g891071d: OUTPUT«Any()␤»

[06:39] <moritz_> good morning

[06:40] <diakopter> BREAKFAST

[06:43] <TimToady> o/

[06:58] *** amkrankruleuen left
[07:01] *** justatheory left
[07:01] *** wtw joined
[07:01] *** justatheory joined
[07:04] *** amkrankruleuen joined
[07:06] *** justatheory left
[07:09] *** jaldhar left
[07:09] *** jaldhar joined
[07:12] *** amkrankruleuen left
[07:12] *** amkrankruleuen joined
[07:19] *** jtbraun2 joined
[07:19] *** jtbraun2 left
[07:20] *** jtbraun1 left
[07:20] *** noganex_ is now known as noganex

[07:26] <tadzik> good morning

[07:27] <dalek> sprixel: 0c66527 | diakopter++ | / (11 files):

[07:27] <dalek> sprixel: .

[07:27] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/0c66527864

[07:31] <diakopter> rakudo: grammar G { rule TOP { ... } }; say G.new.parse("aaa")

[07:31] <p6eval> rakudo 58e40e: OUTPUT«aaa␤»

[07:31] <diakopter> perlesque: grammar G { rule TOP { .... } }; say G.new.parse("aaa")

[07:31] <p6eval> perlesque: OUTPUT«Regex_dot succeeded␤Regex_dot succeeded␤Regex_dot succeeded␤Regex_dot failed␤␤»

[07:35] *** noganex_ joined
[07:39] *** noganex left
[07:40] *** Mowah joined
[07:41] *** cosimo left
[07:43] *** am0c left
[07:49] <TimToady> rakudo: $_ = '[]]['; while s/'[]'// {}; say "alive"

[07:49] <p6eval> rakudo 58e40e: OUTPUT«(timeout)»

[07:50] <TimToady> known bug?

[07:51] *** karupanerura joined
[07:52] <diakopter> rakudo: $_ = '[]]['; say $_; if s/'[]'// { say 1 }; say $_; if s/'[]'// { say 2 }; say "alive"

[07:52] <p6eval> rakudo 58e40e: OUTPUT«[]][␤1␤][␤2␤alive␤»

[07:52] <TimToady> rakudo: $_ = '[]]['; repeat while $/ { s/'[]'// }; say "alive"

[07:52] <p6eval> rakudo 58e40e: OUTPUT«alive␤»

[07:53] <TimToady> rakudo: $_ = '[]]['; repeat while $/ { s/'[]'// }; say "alive $_"

[07:53] <p6eval> rakudo 58e40e: OUTPUT«alive ][␤»

[07:53] <TimToady> rakudo: $_ = '[]]['; repeat while $/ { s:g/'[]'// }; say "alive $_"

[07:53] <p6eval> rakudo 58e40e: OUTPUT«alive ][␤»

[07:54] <TimToady> rakudo: $_ = '[[[]]]'; repeat while $/ { s:g/'[]'// }; say "alive $_"

[07:54] <p6eval> rakudo 58e40e: OUTPUT«alive [[]]␤»

[07:54] <diakopter> rakudo: $_ = ']['; if s/'[]'// { say 'oops' }

[07:54] <p6eval> rakudo 58e40e: OUTPUT«oops␤»

[07:54] <TimToady> note my $_ ended up with [[]], not ''

[07:54] <diakopter> it must not recurse

[07:55] <diakopter> and recurse

[07:55] <TimToady> :g always returns false, I think

[07:55] <TimToady> it should return the number of replacements

[07:56] <diakopter> niecza: $_ = '[]]['; while s/'[]'// {}; say "alive"

[07:56] <p6eval> niecza v2-104-g891071d: OUTPUT«alive␤»

[07:56] <diakopter> niecza: $_ = '[[[]]]'; repeat while $/ { s:g/'[]'// }; say "alive $_"

[07:56] <p6eval> niecza v2-104-g891071d: OUTPUT«alive [[[]]]␤»

[07:56] <diakopter> ?

[07:56] <diakopter> niecza: $_ = '[[[]]]'; repeat while $/ { s/'[]'// }; say "alive $_"

[07:56] <p6eval> niecza v2-104-g891071d: OUTPUT«alive [[[]]]␤»

[07:57] <diakopter> niecza: $_ = '[[[]]]'; repeat while s/'[]'//; say "alive $_"

[07:57] <p6eval> niecza v2-104-g891071d: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Missing block at /tmp/u3nLhOXbLP line 1:␤------> [32m$_ = '[[[]]]'; repeat while s/'[]'//[33m⏏[31m; say "alive $_"[0m␤␤Parse failed␤␤»

[07:57] <diakopter> niecza: $_ = '[[[]]]'; repeat while { s/'[]'// }; say "alive $_"

[07:57] <p6eval> niecza v2-104-g891071d: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Missing block at /tmp/bBKYfwaIEU line 1:␤------> [32m$_ = '[[[]]]'; repeat while { s/'[]'// }[33m⏏[31m; say "alive $_"[0m␤␤Parse failed␤␤»

[07:57] <diakopter> oh

[07:57] <TimToady> rakudo: $_ = '[[[]]]'; 1 while s:g/'[]'//; say "alive $_"

[07:57] <p6eval> rakudo 58e40e: OUTPUT«alive ␤»

[07:58] <TimToady> rakudo: $_ = '[[[]]]]['; 1 while s:g/'[]'//; say "alive $_"

[07:58] <p6eval> rakudo 58e40e: OUTPUT«(timeout)»

[07:58] <diakopter> :)

[07:59] <TimToady> niecza: $_ = '[[[]]]]['; 1 while s:g/'[]'//; say "alive $_"

[07:59] <p6eval> niecza v2-104-g891071d: OUTPUT«alive ][␤»

[08:01] <diakopter> niecza: $_ = '[[[[[[[][]]]][[[]]][]]]]'; 1 while s:g/'[]'//; say "alive $_"

[08:01] <p6eval> niecza v2-104-g891071d: OUTPUT«alive ␤»

[08:01] <tadzik> sorear: so only the settings library is in Perl 6, and this gets compiled by a compiler written in NQP?

[08:01] <diakopter> ooo first try

[08:05] <diakopter> tadzik: for rakudo, yes. for niecza, no

[08:06] <diakopter> niecza's compiler is Perl 5, C#, and "NAM"

[08:06] <diakopter> is *in

[08:08] *** wooden left
[08:20] <tadzik> diakopter: yeah, I meant Rakudo. But isn't niecza self-hosting for a while now?

[08:21] <diakopter> oh, I suppose so.

[08:25] <TimToady> added a niecza solution to balanced brackets on RC

[08:26] <TimToady> pugs: $_ = '[[[[[[[][]]]][[[]]][]]]]'; 1 while s:g/'[]'//; say "alive $_"

[08:26] <p6eval> pugs: OUTPUT«(timeout)»

[08:27] <TimToady> pugs: $_ = '[[[[[[[][]]]][[[]]][]]]]'; 1 while s/'[]'//; say "alive $_"

[08:27] <p6eval> pugs: OUTPUT«(timeout)»

[08:27] <TimToady> hmm

[08:27] <diakopter> Ithought pugs was still broken vis-a-vis p5bridge

[08:28] <TimToady> pugs: $_ = '[[[[[[[][]]]][[[]]][]]]]'; 1 while s:P5/\[\]//; say "alive $_"

[08:28] <p6eval> pugs: OUTPUT«(timeout)»

[08:28] <TimToady> so it would seem

[08:29] <tadzik> pugs: say "hello to my little friends"

[08:29] <p6eval> pugs: OUTPUT«hello to my little friends␤»

[08:30] *** nadim_ left
[08:30] *** wooden joined
[08:30] *** wooden left
[08:30] *** wooden joined
[08:30] *** nadim_ joined
[08:31] *** amkrankruleuen left
[08:33] *** amkrankruleuen joined
[08:43] <TimToady> lunch & # and fireside chat at iHub later tonight

[08:46] *** Schwern left
[08:51] *** amkrankruleuen left
[08:51] *** amkrankruleuen joined
[08:52] *** Mowah left
[09:09] *** cjk101010 joined
[09:15] *** aindilis left
[09:17] *** aindilis joined
[09:22] *** amkrankruleuen left
[09:23] *** amkrankruleuen joined
[09:25] <tadzik> rakudo: my $a = "2010-01-01"; $a ~~ s/ 0 (\d) $/$0/; say $a # what am I missing?

[09:25] <p6eval> rakudo 58e40e: OUTPUT«2010-01-Any()␤»

[09:26] *** amkrankruleuen left
[09:27] *** umboto joined
[09:30] <moritz_> tadzik: $/ and derivates aren't available in the RHS of s/// yes

[09:30] <moritz_> niecza: my $a = "2010-01-01"; $a ~~ s/ 0 (\d) $/$0/; say $a

[09:30] <p6eval> niecza v2-104-g891071d: OUTPUT«2010-01-1␤»

[09:30] <moritz_> niecza++

[09:30] *** amkrankruleuen joined
[09:32] <tadzik> I'd use it for my script if it had Date :)

[09:32] <moritz_> well, port it

[09:33] <moritz_> Date is written in pure Perl 6

[09:33] <moritz_> should be easy to get into niecza

[09:33] <moritz_> and luckily the two projects are licenced as AL2, so no problems here

[09:39] *** umboto left
[09:47] *** benabik joined
[09:55] *** kanishka left
[10:03] *** y3llow left
[10:03] *** y3llow_ joined
[10:04] *** y3llow_ is now known as y3llow

[10:04] *** tzhs joined
[10:14] *** kanishka joined
[10:21] *** dakkar joined
[10:27] *** daxim joined
[10:42] <dalek> roast: 68b538f | moritz++ | S03-smartmatch/ (2 files):

[10:42] <dalek> roast: remove last remnants of .notdef

[10:42] <dalek> roast: review: https://github.com/perl6/roast/commit/68b538fc03

[10:45] *** Lorn left
[10:47] *** ab5tract joined
[10:47] *** Lorn joined
[10:49] <dalek> roast: e2c4b95 | moritz++ | S02-builtin_data_types/array.t:

[10:49] <dalek> roast: [array.t] simplify a bit, and re-fudge for niecza

[10:49] <dalek> roast: review: https://github.com/perl6/roast/commit/e2c4b95655

[10:50] *** cjk101010 left
[10:59] <dalek> roast: fbafcc2 | jimmy++ | S03-smartmatch/disorganized.t:

[10:59] <dalek> roast: changed defined to .defined

[10:59] <dalek> roast: review: https://github.com/perl6/roast/commit/fbafcc2b10

[11:15] *** crimson22 joined
[11:16] *** crimson22 left
[11:22] *** Schwern joined
[11:23] <moritz_> niecza: my @a = 1, 2; sub f($x) { say $x.perl }; f @a

[11:23] <p6eval> niecza v2-104-g891071d: OUTPUT«[1, 2]␤»

[11:24] *** jedai_ left
[11:25] <moritz_> niecza: my %h = a => 1, b => 2, c => 3, d => 4; my @sel = <a c>; my %new = %h{@sel}:pairs

[11:25] <p6eval> niecza v2-104-g891071d: OUTPUT«Unhandled exception: Excess arguments to SAFE postcircumfix:<{ }>, unused named pairs␤  at /home/p6eval/niecza/lib/SAFE.setting line 0 (SAFE postcircumfix:<{ }> @ 0)␤  at /tmp/cJmWgFdeY0 line 1 (MAIN mainline @ 12)␤  at /home/p6eval/niecza/lib/SAFE.setting line 1180

[11:25] <p6eval> ..(SAFE C487_ANON…

[11:26] *** jedai joined
[11:32] *** qiyong left
[11:33] *** satyavvd left
[11:33] *** Trashlord left
[11:40] *** kanishka left
[11:48] *** JimmyZ_ left
[12:05] *** bluescreen joined
[12:11] *** krunen joined
[12:29] *** mtk left
[12:38] *** mtk joined
[12:40] *** noganex joined
[12:42] *** noganex left
[12:43] *** noganex_ left
[12:46] *** noganex joined
[12:46] *** mikehh joined
[12:46] *** MayDaniel joined
[12:47] *** bluescreen left
[12:49] *** shi joined
[12:53] *** shi left
[12:53] *** coldhead left
[12:55] *** Guest9160 is now known as perplexa

[12:55] *** perplexa left
[12:55] *** perplexa joined
[12:57] *** shi joined
[13:04] *** Trashlord joined
[13:05] *** shi left
[13:08] *** nymacro left
[13:08] *** shi joined
[13:14] *** nymacro joined
[13:16] *** donri joined
[13:17] *** MayDaniel left
[13:50] *** AphelionZ joined
[13:51] <AphelionZ> Maybe a dumb question but if I have perl5 modules installed, how do I include them and use them within a perl 6 script? I want to use the Device::SerialPort module.

[13:52] <moritz_> AphelionZ: if you're lucky, it works with https://github.com/jnthn/blizkost

[13:52] <moritz_> but note that you need some special options when compiling your p5

[13:55] *** amkrankruleuen left
[14:01] *** ab5tract left
[14:04] <AphelionZ> haha hmm maybe i'll just use Perl 5

[14:04] *** sftp joined
[14:06] <moritz_> you could also try to see what the module does, and do the same inPerl 6

[14:08] *** amkrankruleuen joined
[14:11] <AphelionZ> That's not a bad idea

[14:12] *** JimmyZ joined
[14:13] *** pigdude joined
[14:16] *** amkrankruleuen left
[14:22] *** nymacro left
[14:22] *** amkrankruleuen joined
[14:32] *** Guest98189 left
[14:34] *** rdesfo joined
[14:34] *** spq joined
[14:45] *** xinming_ joined
[14:47] *** xinming left
[14:47] *** Axius joined
[15:08] *** ab5tract joined
[15:23] <tadzik> AphelionZ: or you can port them to Perl 6 :)

[15:23] <tadzik> btw, are you around?

[15:23] <AphelionZ> tadzik: I'm here

[15:29] <tadzik> Talking via Github issues is hardly productive. So, how is your parrot installed?

[15:30] <AphelionZ> cool

[15:30] <AphelionZ> I installed the rakudo star and everything is from there

[15:32] *** risou joined
[15:32] <tadzik> what does `which parrot` give you?

[15:34] *** alester joined
[15:34] <AphelionZ> nothing...

[15:34] <AphelionZ> "parrot not found"

[15:34] <tadzik> oh funny

[15:34] <tadzik> that explains a lot. How about `which perl6`?

[15:34] <tadzik> I must say I never had Star installed

[15:34] <AphelionZ>  /usr/bin/perl6

[15:35] <AphelionZ> yeah the site "strongly recommended" it so I just installed that

[15:35] <tadzik> understandable

[15:35] <moritz_> ... and it installs to /usr/bin by default? WTF?

[15:36] *** Axius left
[15:36] *** Axius joined
[15:38] *** mberends left
[15:42] *** leprevost joined
[15:42] *** leprevost left
[15:43] *** leprevost joined
[15:44] <AphelionZ> moritz_: no it just makes a binary file and i stuck it in there since it was in my path

[15:44] <AphelionZ> so should I install parrot too?

[15:44] <moritz_> AphelionZ: you should install by running 'make install'

[15:44] *** plobsing_ left
[15:45] <moritz_> AphelionZ: the problem is that rakudo and parrot need runtime libraries

[15:45] <AphelionZ> I thought I did...

[15:45] <moritz_> AphelionZ: and if you just copy an executable, it might not be able to find those runtime libraries

[15:45] *** plobsing joined
[15:46] <moritz_> what should work is symlinking to the installed perl6 binary

[15:50] *** Shozan joined
[15:53] *** mikey_ joined
[15:54] *** wtw left
[15:54] <mikey_> quit

[15:54] <Shozan> no

[15:57] *** karupanerura left
[15:59] *** leprevost left
[16:00] *** leprevost joined
[16:01] <moritz_> "you can check out any time you like, but you can never leave"

[16:03] *** shi left
[16:06] *** risou_ joined
[16:08] <AphelionZ> ok, so just so I do this right:

[16:08] <AphelionZ> I just ran rakudo star's configure / make / make install again

[16:08] <AphelionZ> and now I have this: http://pastie.org/1602625

[16:09] *** risou left
[16:09] <AphelionZ> symlink parrot and perl6 to somewhere in my path?

[16:09] <AphelionZ> or maybe just add this dir to my path? iunno

[16:09] <moritz_> both work

[16:11] *** rhr left
[16:13] *** rhr joined
[16:13] <AphelionZ> tadzik: ok cool let me try neutro again

[16:14] <tadzik> AphelionZ: basically, you need a working prove :)

[16:14] <tadzik> maybe it'd be good to write a pureperl prove for Modules::Test

[16:15] <AphelionZ> haha yeah i don't know enough to do that... im still getting the Method 'postcircumfix:<{ }>' not found for invocant of class 'Failure' error

[16:15] <tadzik> but first neutro should be rewretten a bit

[16:16] <tadzik> damn

[16:16] <tadzik> AphelionZ: which neutro branch are you on?

[16:16] *** Patterner left
[16:16] *** tzhs left
[16:16] <AphelionZ> master

[16:18] *** Psyche^ joined
[16:18] *** Psyche^ is now known as Patterner

[16:21] <tadzik> crap, I hoped at least that one's working

[16:23] <tadzik> AphelionZ: could you try running it with "use Devel::Trace" added at the top?

[16:24] <AphelionZ> tadzik: sure, which file should I add that to?

[16:24] *** Rotwang joined
[16:25] *** Axius left
[16:26] *** snearch joined
[16:26] <tadzik> AphelionZ: bin/neutro I think

[16:32] *** rhr left
[16:38] <AphelionZ> tadzik: where do I get the Devel::Trace module for perl 6?

[16:38] <moritz_> it comes with rakudo, if your rakudo is new enough

[16:38] <flussence> there isn't one, it's actually a magic string

[16:38] <moritz_> rakudo: use Devel::Trace; say 1

[16:38] <p6eval> rakudo 58e40e: OUTPUT«use Devel::Trace␤say 1␤1␤»

[16:39] <AphelionZ> maybe i need to update rakudo :-/

[16:39] *** lamstyle left
[16:39] <flussence> what's your perl6 -v?

[16:39] <flussence> it is a pretty new feature...

[16:39] <AphelionZ> "This compiler is built with the Parrot Compiler Toolkit, parrot revision 45822."

[16:39] <moritz_> oh.

[16:39] <moritz_> that's... OLD

[16:39] <AphelionZ> aha!

[16:40] <moritz_> the newer one loook like

[16:40] <moritz_> This is Rakudo Perl 6, version 2011.02-14-g10d86d7 built on parrot 3.1.0 RELEASE_3_1_0-245-g9a2b775

[16:40] <AphelionZ> ok let me compile up a newer version... this could potentially solve all my problems

[16:41] *** justatheory joined
[16:42] *** HarryS left
[16:43] *** kanishka joined
[16:45] *** hanekomu joined
[16:45] *** hanekomu left
[16:45] *** hanekomu joined
[16:45] *** JimmyZ left
[16:53] *** rhr joined
[16:56] <tadzik> oh my, that was back in svn days?

[17:00] *** lamstyle joined
[17:03] *** rhr left
[17:04] *** orafu joined
[17:05] <AphelionZ> tadzik: looks like it's working now :) sorry about the hassle

[17:05] <AphelionZ> oh, wait

[17:05] *** rhr joined
[17:07] <AphelionZ> tadzik: got a new one for you now with Devel::Trace  http://pastie.org/1602821

[17:08] <AphelionZ> my perl6 -v is "This is Rakudo Perl 6, version 2011.01 built on parrot 3.0.0"

[17:09] <donri> how the heck do i find out the size of something listy?

[17:11] <pyrimidine> +@foo, I think

[17:12] <donri> ok that makes to much sense

[17:12] <daxim> rakudo: say (4,5,6).elems

[17:12] <p6eval> rakudo 58e40e: OUTPUT«3␤»

[17:12] <daxim> for everything a method.

[17:13] <pyrimidine> rakudo: say +(4,5,3);

[17:13] <p6eval> rakudo 58e40e: OUTPUT«3␤»

[17:14] <pyrimidine> TIMTOWTOI

[17:15] <pyrimidine> rakudo: say +('foo' => 'bar');

[17:15] <p6eval> rakudo 58e40e:  ( no output )

[17:15] <donri> rakudo: say +{'foo' => 'bar'}

[17:15] <p6eval> rakudo 58e40e: OUTPUT«1␤»

[17:15] <pyrimidine> ah

[17:15] <donri> yours is a parcel of pairs i think

[17:16] <donri> well, except not a parcel because no comma

[17:16] <donri> rakudo: say +(:foo<bar>,)

[17:16] <p6eval> rakudo 58e40e: OUTPUT«1␤»

[17:16] <tadzik> AphelionZ: the same problem :)

[17:16] <tadzik> notice line 4

[17:16] <tadzik> you need a -e aware prove

[17:16] *** Lorn left
[17:16] <daxim> phenny, tell masak well, how *does* lying make a bug report better?  inquiring minds want to know!

[17:16] <phenny> daxim: I'll pass that on when masak is around.

[17:16] *** ab5tract left
[17:16] <tadzik> is your parrot-prove installed this time?

[17:16] <pyrimidine> rakudo: say +[4,5,3];

[17:17] <p6eval> rakudo 58e40e: OUTPUT«3␤»

[17:19] *** tornadovj left
[17:22] <AphelionZ> tadzik: not sure... here's my parrot dir http://pastie.org/1602872

[17:23] <tadzik> AphelionZ: gotta go for PM meeting, bbl, possibly tomorrow. Basically, you need a prove binary that accepts the '-e' switch. You can try poking colomon-san, I think he had the same problem a while ago

[17:23] * tadzik out

[17:23] <AphelionZ> thanks

[17:23] <colomon> er?

[17:26] <moritz_> I think some old prove binaries had a -p switch instead (for "the perl to execute")

[17:29] *** Guest98189 joined
[17:30] *** Vlavv_ left
[17:31] *** Guest98189 is now known as kaare_

[17:31] *** risou_ left
[17:32] <AphelionZ> colomon: I'm trying to run neutro's bootstrap.sh script and it keeps barfing on the parrot-prove's -e flag

[17:33] <colomon> oooooo.

[17:33] <colomon> I have indeed run into that.

[17:33] <colomon> let me think a minute.

[17:33] <AphelionZ> np

[17:36] *** MayDaniel joined
[17:42] *** MayDaniel left
[17:42] <colomon> AphelionZ: I don't seem to have a working version of that on my machine at the moment, but I believe in the past I have hard-coded that prove call to use a different version of prove.

[17:42] *** MayDaniel joined
[17:42] *** MayDaniel left
[17:42] *** MayDaniel joined
[17:43] <colomon> Basically, I have a local to my personal directory install of Perl 5.10, and then instead of prove, I have scripts call /Users/colomon/localperl/bin/prove

[17:43] *** Vlavv_ joined
[17:43] <AphelionZ> huh, ok

[17:43] <AphelionZ> thanks, i'll try that

[17:43] <colomon> The line that would need to be changed in this case is line 15 of mt/lib/Module/Test.pm

[17:43] <colomon> hope that helps.

[17:46] *** cdarroch joined
[17:46] *** cdarroch left
[17:46] *** cdarroch joined
[17:48] *** pigdude left
[17:50] *** pigdude joined
[17:51] *** nymacro joined
[17:58] *** mikey_ left
[18:01] *** masak joined
[18:01] <masak> lol hi zebras

[18:01] <phenny> masak: 05:58Z <TimToady> tell masak if there is something in S09 that indicates negative .[] subscripts are allowed, it's a fossil; the intent is that negative subscripting be done with .{} instead

[18:01] <phenny> masak: 17:16Z <daxim> tell masak well, how *does* lying make a bug report better?  inquiring minds want to know!

[18:01] *** pigdude left
[18:02] <masak> daxim: you planning to skip the talk? :P

[18:02] *** pigdude joined
[18:02] <daxim> I can't do every conf

[18:03] <masak> aww :)

[18:03] <masak> daxim: there's an existing version of that talk up at github. wait, I'll get you the URL.

[18:05] <masak> daxim: http://github.com/downloads/masak/osdc-fr-2010-hardcore-bug-reporting/talk.pdf

[18:05] <daxim> :thumb:

[18:06] <masak> TimToady: looking at S09 again, I might actually have confused things. will read it more carefully later.

[18:06] *** hanekomu left
[18:10] *** dakkar left
[18:15] *** [Coke] left
[18:17] *** [Coke] joined
[18:17] *** cdarroch_ joined
[18:18] <donri> feed ops, seq ops and list processors have weird precedence

[18:18] *** cdarroch left
[18:18] *** envi left
[18:23] *** kanishka left
[18:23] *** shi joined
[18:24] <masak> donri: they have very low precedence.

[18:24] <masak> do you have a case where the precedence feels outright wrong?

[18:24] <donri> when combining them i constantly find myself needing extra parenthesis

[18:25] <donri> even recall a weird case of *assignment* not catching the whole expression

[18:25] <donri> my @factors = grep $num %% *, (@primes ... * > sqrt $num);

[18:25] <donri> ^ example from just now

[18:25] <donri> i understand what it does without the parens but that seems less common

[18:27] *** shi left
[18:27] <donri> rakudo: my @even = ^10 ==> grep * %% 2; say @even.perl

[18:27] <p6eval> rakudo 58e40e: OUTPUT«[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]␤»

[18:28] <donri> that can't be intentional?

[18:29] <colomon> donri: if you tried grep $num %% *, (@primes ... * > sqrt $num) without the parens, it's very easy to explain why it didn't work.

[18:30] <donri> I get what that does, just seems less useful for a default

[18:31] *** shi joined
[18:31] <colomon> but the whole idea of ... is that it takes a list on the left and a list on the right.  Given that, how could you make a precedence that does what you want?

[18:32] *** jaldhar left
[18:34] <donri> duno, treat literals and identifiers differently, shrug

[18:34] <donri> but more importantly see the assignment example

[18:34] <colomon> rakudo: ^10 ==> grep * %% 2 ==> my @even; say @even.per

[18:34] <p6eval> rakudo 58e40e: OUTPUT«Method 'per' not found for invocant of class 'Array'␤  in main program body at line 22:/tmp/dvXkr8U8gn␤»

[18:35] <colomon> rakudo: ^10 ==> grep * %% 2 ==> my @even; say @even.perl

[18:35] <p6eval> rakudo 58e40e: OUTPUT«[0, 2, 4, 6, 8]␤»

[18:35] <colomon> Personally I don't ever mess with ==>, so I don't know the justifications there.

[18:37] *** kanishka joined
[18:49] *** HarryS joined
[18:52] *** Chillance joined
[18:53] *** kanishka left
[18:54] *** rdesfo left
[18:56] *** AphelionZ left
[19:01] *** impious joined
[19:01] *** impious left
[19:10] *** shi left
[19:11] *** molaf_ left
[19:15] *** noganex_ joined
[19:15] *** Axius joined
[19:17] *** kanishka joined
[19:18] *** noganex left
[19:21] *** skangas left
[19:21] *** skangas joined
[19:23] *** kolibrie left
[19:23] *** c1sung left
[19:24] *** hillu_ left
[19:24] *** c1sung joined
[19:24] *** hillu joined
[19:24] *** kolibrie joined
[19:28] *** patch left
[19:29] *** patch joined
[19:29] *** meraxes_ left
[19:30] *** meraxes_ joined
[19:30] *** gimix left
[19:35] *** meraxes_ left
[19:36] *** kanishka left
[19:37] *** jasonmay left
[19:37] *** lopaway left
[19:38] *** larsen_ left
[19:38] *** sjn joined
[19:38] *** meraxes_ joined
[19:38] *** jasonmay joined
[19:38] *** daxim left
[19:38] *** larsen joined
[19:38] *** lopaway joined
[19:41] *** Axius left
[19:41] *** Axius joined
[19:42] *** MayDaniel left
[19:42] *** phenny left
[19:43] *** gimix joined
[19:43] *** phenny joined
[19:44] *** MayDaniel joined
[19:44] *** MayDaniel left
[19:44] *** MayDaniel joined
[19:51] *** kanishka joined
[19:59] *** meraxes_ left
[20:00] *** meraxes_ joined
[20:01] *** dalek left
[20:02] *** dalek joined
[20:02] *** ChanServ sets mode: +v dalek

[20:17] *** mtk left
[20:21] *** MayDaniel left
[20:24] *** knewt2 left
[20:25] *** mtk joined
[20:27] *** snearch left
[20:29] *** nymacro left
[20:29] *** jdhore left
[20:30] *** takadonet left
[20:30] *** Eevee left
[20:31] *** kanishka left
[20:31] *** phenny left
[20:31] *** nymacro joined
[20:31] *** Eevee joined
[20:32] *** thepler left
[20:33] *** ingy left
[20:33] *** Woody4286 left
[20:33] *** ingy joined
[20:33] *** slavik2 left
[20:34] <masak> blog post I'd like to read: "The ways Moose beats the Perl 6 object system"

[20:34] *** thepler joined
[20:34] <masak> someone please write it :)

[20:35] *** phenny joined
[20:35] *** slavik1 joined
[20:35] *** Woody4286 joined
[20:42] *** Axius left
[20:42] *** knewt2 joined
[20:46] *** jdhore joined
[20:47] *** kanishka joined
[20:49] *** edenc left
[20:49] *** edenc joined
[21:06] *** cjk101013 left
[21:07] *** cjk101010 joined
[21:09] *** Woody4286 left
[21:12] *** cjk101010 left
[21:12] *** Woody4286 joined
[21:13] <donri> masak: does it?

[21:16] <Rotwang> yeah, I'm interested also

[21:16] <Rotwang> why? [;

[21:18] *** cjk101010 joined
[21:19] *** spq left
[21:19] <masak> ok, there are two aspects to it.

[21:19] <masak> (1) Moose of today being more full-featured.

[21:20] <masak> (2) Moose actually having better theoretical underpinnings, which do or will get it further.

[21:20] <masak> I guess (2) is debatable. (1) isn't.

[21:20] *** Khisanth left
[21:20] <flussence> Moose is optional (not that that's always an advantage...)

[21:21] <masak> I'm interested in both. (1) will show us what to focus on that we don't have yet. (2) will point at deeper points of interest.

[21:21] <masak> flussence: in a sense, Perl 6 OO is optional too... it's just that you don't have to "use" it to use it :P

[21:21] *** zamolxes joined
[21:22] <donri> I heard a plan for parrot or rakudo to allow opting out from things like the object system

[21:22] *** pigdude left
[21:23] <donri> anyway, I'd like to see a way to hook arbitrary objects, such as subscribing to changes to them

[21:23] *** y3llow_ joined
[21:23] *** pothos joined
[21:25] *** pothos_ left
[21:25] *** y3llow left
[21:25] *** y3llow_ is now known as y3llow

[21:28] *** Khisanth joined
[21:28] <flussence> Does perl6 have an autoload mechanism yet?

[21:31] <masak> donri: I don't see how you could reasonably "opt out" of the Perl 6 object system. whoever said that can't have been looking at how Perl 6 is parsed. ;)

[21:31] <donri> yea, not sure

[21:31] <donri> stuff internally are built around objects too right?

[21:31] <masak> oh yes.

[21:31] <masak> if "opt out" means not using the "class" keyword, then it's trivial. just don't use it.

[21:32] <masak> (your loss)

[21:32] *** Tene left
[21:33] <donri> masak: http://www.modernperlbooks.com/mt/2010/07/an-accurate-comparison-of-perl-5-and-rakudo-star.html

[21:33] *** Tene joined
[21:33] <flussence> (hm, actually it wouldn't be too hard to have autoloadable methods already...)

[21:33] <donri> "Better yet, new features planned for Parrot offer the opportunity to deploy applications with only those features actually used, so if you avoid the object system or grammar manipulation altogether, you won't pay the memory or startup costs for them."

[21:33] *** coldhead joined
[21:33] <flussence> ((whether it's efficient is another matter...))

[21:34] <masak> donri: oh right. well, I can't accuse chromatic on being insufficiently versed in the internals :P

[21:34] <masak> donri: let's just say I'll believe it when I see it.

[21:34] <masak> anyone who considers that a challenge, be my guest. :)

[21:34] <donri> ;)

[21:35] <masak> literally. I will house you and feed you if you promise to work on this :)

[21:35] *** IRSeekBot joined
[21:35] <donri> hah

[21:37] <masak> ok, my awake juice has run out. have a good night, everybody.

[21:37] <masak> o/

[21:37] *** masak left
[21:41] *** icwiener joined
[21:42] <Tene> phenny: tell masak that if he had made that offer of supporting me to work on Parrot and Perl 6 a year ago, I'd probably be living on his couch today.

[21:42] <phenny> Tene: I'll pass that on when masak is around.

[21:42] <Tene> phenny: Thanks.

[21:46] *** leprevost left
[21:48] *** kaare_ left
[21:56] *** hercynium joined
[22:06] *** rdesfo joined
[22:18] *** Vlavv_ left
[22:21] <tadzik> hello

[22:27] *** takadonet joined
[22:29] *** Vlavv_ joined
[22:30] *** Schwern left
[22:32] *** fhelmberger left
[22:39] *** donaldh joined
[22:39] *** whiteknight joined
[22:41] *** dual left
[22:41] <Tene> phenny: tell masak that last year around this time I was considering trying to move to texas for a couple of months to stay with pmichaud and work on rakudo

[22:41] <phenny> Tene: I'll pass that on when masak is around.

[22:49] *** Khisanth left
[22:49] *** cosimo joined
[22:52] <flussence> spectest finished in 7.5 minutes... yay

[22:53] *** Khisanth joined
[23:01] <donri> hm was there a way to write sequences that skip steps, or is *the* way to do that with *+x ... *?

[23:02] <donri> oh wait 3,5...x

[23:02] <flussence> rakudo: say (1, 3, 6 ... * < 100)

[23:02] <donri> tried that with .. which didn't do it heh

[23:02] <p6eval> rakudo 58e40e: OUTPUT«1␤»

[23:02] <flussence> er.

[23:02] <flussence> rakudo: (1, 3, 6 ... * < 100).perl.say

[23:02] <p6eval> rakudo 58e40e: OUTPUT«(1)␤»

[23:02] <flussence> rakudo: (1, 3, 6 ... * > 100).perl.say

[23:02] <p6eval> rakudo 58e40e: OUTPUT«Method 'count' not found for invocant of class 'Failure'␤  in <anon> at line 861:CORE.setting␤  in 'List::Bool' at line 1␤  in <anon> at line 879:CORE.setting␤  in <anon> at line 881:CORE.setting␤  in 'Any::join' at line 1␤  in 'List::perl' at line 2821:CORE.setting␤  in main

[23:02] <p6eval> ..progr…

[23:03] <flussence> I forgot how this thing works ... :(

[23:03] <flussence> rakudo: (1, 3, 5 ... * > 100).perl.say

[23:03] <p6eval> rakudo 58e40e: OUTPUT«(1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101)␤»

[23:03] <flussence> oh, it just doesn't do triangle numbers.

[23:03] <donri> it can't figure out the sequence for 1,3,6

[23:03] <flussence> rakudo: (1, 3, 6, 10, 15 ... * > 100).perl.say # ?

[23:03] <p6eval> rakudo 58e40e: OUTPUT«Method 'count' not found for invocant of class 'Failure'␤  in <anon> at line 861:CORE.setting␤  in 'List::Bool' at line 1␤  in <anon> at line 879:CORE.setting␤  in <anon> at line 881:CORE.setting␤  in 'Any::join' at line 1␤  in 'List::perl' at line 2821:CORE.setting␤  in main

[23:03] <p6eval> ..progr…

[23:04] <flussence> rakudo: (1, 3, 6, * + @_ ... * > 100).perl.say # ?

[23:04] <p6eval> rakudo 58e40e: OUTPUT«Null PMC access in type()␤  in <anon> at line 22:/tmp/e7PeKBY_zo␤  in <anon> at line 865:CORE.setting␤  in 'List::Bool' at line 1␤  in <anon> at line 879:CORE.setting␤  in <anon> at line 881:CORE.setting␤  in 'Any::join' at line 1␤  in 'List::perl' at line 2821:CORE.setting␤ 

[23:04] <p6eval> ..in ma…

[23:04] <flussence> there's a way to get at the whole list, but I don't remember it...

[23:05] <donri> rakudo say (1, 3, 6, -> *@_ { [+] @_ } ... * > 100).perl

[23:05] <flussence> that's the one

[23:05] <donri> rakudo: say (1, 3, 6, -> *@_ { [+] @_ } ... * > 100).perl

[23:05] <donri> picky.

[23:05] <p6eval> rakudo 58e40e: OUTPUT«(1, 3, 6, 10, 20, 40, 80, 160)␤»

[23:05] <flussence> er.

[23:06] <flussence> I was doing it wrong anyway :)

[23:06] *** Schwern joined
[23:08] *** hercynium left
[23:08] <flussence> rakudo: ([\+] 1..15).perl.say # triangle operator, triangle numbers. makes sense...

[23:09] <p6eval> rakudo 58e40e: OUTPUT«(1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120)␤»

[23:09] <donri> it's actually faster to do unecessary tests than to skip them with sequence op

[23:15] <Tene> donri: the implied sequences are based only on the last three numbers in the source, and the autodetection supported is described in the specs

[23:16] <donri> yea read about that at some point

[23:17] <donri> I have rakudo solving euler #3 in 2.5s with imperative c-like code

[23:17] *** Sarten-X left
[23:19] <Tene> donri: use NativeCall and link against primegen: http://cr.yp.to/primegen.html

[23:19] <Tene> ;)

[23:19] <donri> :D

[23:19] <Tene> donri: c'mon, you know you want to :)

[23:20] <donri> blatantly plagiarised treed https://github.com/dag/euler/blob/master/Perl%206/3.pl

[23:21] <donri> bonus points for the MAIN subs?

[23:22] <donaldh> seen jnthn

[23:22] <aloha> jnthn was last seen in #perl6 1 days ago joining the channel.

[23:23] <flussence> "1 days"? Oh come on, you can do better than that :)

[23:23] <donaldh> :D

[23:23] <Tene> There's no Lingua::EN::Inflect for Perl 6 yet.

[23:24] <Tene> donri: you should accept an argument for the count in MAIN

[23:24] <donaldh> Is there any way to create a capture with "is rw" aliases?

[23:24] *** alester left
[23:24] <donri> yea maybe

[23:25] <donaldh> Or is there any way to cast a readonly argument into a rw argument ?

[23:32] *** MayDaniel joined
[23:32] *** MayDaniel left
[23:32] *** MayDaniel joined
[23:36] *** silent_h_ joined
[23:56] *** donaldh left
[23:59] *** MayDaniel left
