[00:00] <sorear> hi

[00:00] <shinobicl> what can i do to solve this "compile time" issue? 

[00:00] <shinobicl> nom: role Counter [**@ranges] { has @.ranges; has @.values; method new(*@new_values) { die if @new_values.elems != @ranges.elems; self.bless(*, :@new_values);} }; class TimeofDay does Counter[0..23, 0..59];

[00:00] <p6eval> nom: OUTPUT«Cannot use '0..23, 0..59' as an argument to a parametric role as its value is not known at compile time at line 1, near ";"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23510 (src/stage2/gen/NQPHLL.pir:6316) (src/stage2/gen/NQPHLL.pm:329)␤»

[00:01] <sorear> shinobicl: not use parametric roles like that

[00:01] <shinobicl> how should i use them?

[00:01] <shinobicl> or is NYI?

[00:03] <sorear> well, what you're seeing is a NYI error

[00:04] <sorear> but that code is IMO very bad form

[00:04] <sorear> so it's not likely to be made to work soon

[00:05] <sorear> the normal way to get values into an object is by using constructor arguments

[00:05] <sorear> not by constructing a special class with defaults

[00:07] <shinobicl> i want to implement the "counter" behavoir in a role, that's why i use a class to specify the ranges.

[00:07] <shinobicl> but the thing is, besides the class, how should i use the parametric roles?

[00:07] *** ab5tract left
[00:08] <sorear> why?

[00:08] *** ascent_ joined
[00:09] *** molaf joined
[00:10] <shinobicl> i saw this in a example here in this irc channel... i think the idea was to transform a "TimeOfDay" class into something more generic... i thought it was a good idea. The TimeOfDay class had just 3 'ranges', for hours, minutes and seconds.

[00:11] <sorear> **@x was only added like last week

[00:12] <sorear> if excessively abstracting a system causes problems, I think the sensible thing to do is to not excessively abstract it

[00:13] <shinobicl> just in time to try to implement it, then :). The example i saw only had an array of upper limits, like this: role Counter[**@maxvalues]

[00:13] <sorear> parametric roles are a dark corner of Perl 6 semantics.  don't go there unless you have a legitimate reason to be creating families of classes

[00:13] <shinobicl> oh yes, i know :) I'm not planning to use it on a system of library. I just want to see what can i do with perl6 roles :) 

[00:14] <shinobicl> mmm i see,.,. i'll wait some months then untile they are more mature

[00:17] <sorear> parametric roles are quite mature - for arguments that are classes

[00:17] <sorear> that's what they're most designed for

[00:17] <sorear> generic collections

[00:17] <sorear> tbh I think someone just added "oh and they can do values too!" as an afterthought

[00:18] <sorear> also, by bindng 0..23, 0..59 to a **@ranges, you're shooting yourself in the foot in the long term

[00:18] <sorear> ** coerces elements to List, I think

[00:19] <sorear> whereas you need the values to stay Range so that you can take advantage of the Range structure

[00:24] <shinobicl> The idea was not only to use Ranges, but any list for specifying a counter range

[00:25] <shinobicl> example: TimeOfDay does Counter[0..11,0..59,0..59,<AM PM>];

[00:25] <shinobicl> but was only an experiment

[00:28] *** lichtkind left
[00:29] <sorear> ok.

[00:29] <sorear> well for now I suggest using master

[00:30] <sorear> this will be a nom regression

[00:30] <shinobicl> master?

[00:30] <sorear> don't use the nom branch

[00:30] <sorear> just checkout rakudo

[00:30] <shinobicl> ahh ok, you mean the "**" ?

[00:30] <sorear> no, I mean the using computed values in roles

[00:30] <sorear> if you don't know what master is, you shouldn't be using nom

[00:31] <sorear> do you have an installed copy of rakudo?

[00:31] <shinobicl> ok. i always use rakudo, i just wanted to test **

[00:31] <shinobicl> yes, the april version

[00:31] <sorear> nom needs the arguments to roles to be literals

[00:31] <sorear> this will be fixed in ctmo

[00:32] <sorear> but that's internal development stuff

[00:32] *** Chillance left
[00:32] <shinobicl> by chance... do you know if '**' will be in the next release of rakudo?

[00:32] <sorear> it won't be

[00:33] <sorear> very unlikely

[00:33] <sorear> nom's still at least a month away from being releasable

[00:39] *** bluescreen10 left
[01:00] *** noganex joined
[01:01] *** wolfman2000 joined
[01:02] *** noganex_ left
[01:09] *** envi joined
[01:29] *** donri left
[01:46] *** whiteknight left
[01:58] *** f00li5h is now known as f00li5h[HireMe]

[02:00] *** f00li5h[HireMe] is now known as f00li5h

[02:12] *** woosley joined
[02:43] *** daniel-s left
[02:44] *** daniel-s joined
[02:45] <shinobicl> hi... how to show '1' as '01' ?

[02:53] <sorear> .fmt('%02d')

[02:54] <shinobicl> thanks :)

[02:54] *** jaldhar left
[02:55] *** jaldhar joined
[03:27] *** Su-Shee left
[03:28] *** Su-Shee joined
[03:36] *** buubot_backup left
[03:51] *** kboga left
[03:53] *** buubot_backup joined
[04:44] *** birdwindupbird joined
[05:10] <dalek> rakudo/nom: ed26e45 | pmichaud++ | / (4 files):

[05:10] <dalek> rakudo/nom: An initial implementation of $*ARGFILES and lines().

[05:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ed26e45aea

[05:11] *** eternaleye_ is now known as eternaleye

[05:13] *** shinobicl left
[05:25] *** ZaphrodZenovka left
[05:25] *** ZaphrodZenovka joined
[05:33] *** _jaldhar joined
[05:34] *** jaldhar left
[05:38] *** molaf left
[06:00] *** koban joined
[06:00] *** koban left
[06:04] *** ggoebel left
[06:14] <dalek> nqp: b5f2c5d | pmichaud++ | src/HLL/Compiler.pm:

[06:14] <dalek> nqp: -e option to HLL::Compiler needs to pass an arg0.

[06:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b5f2c5dc7f

[06:18] *** cognominal_ left
[06:20] *** a joined
[06:20] *** amkrankruleuen left
[06:20] *** a is now known as Guest99070

[06:25] *** Mowah joined
[06:27] *** wtw joined
[06:31] <moritz> \o

[06:31] <moritz> pmichaud: did you see the regex bug in the backlog?

[06:31] <pmichaud> which regex bug?  the one for arrays?

[06:31] <phenny> pmichaud: 24 Jul 12:17Z <moritz> tell pmichaud that m:s// now works in nom, but not :sigspace -- is that something you want to fix on the qregex level, or should I do it in nom (as best as I can)?

[06:32] <moritz> nom: 'a' ~~ /<.upper>/; say $/.Bool; say $/.to; say $/.from

[06:32] <p6eval> nom: OUTPUT«Bool::True␤0␤0␤»

[06:32] <moritz> nom: 'A' ~~ /<.upper>/; say $/.Bool; say $/.to; say $/.from

[06:32] <p6eval> nom: OUTPUT«Bool::True␤1␤0␤»

[06:32] <pmichaud> there will be a fix of some sort at the qregex level.

[06:32] <dalek> rakudo/nom: ad0bb3f | pmichaud++ | tools/build/NQP_REVISION:

[06:32] <dalek> rakudo/nom: Bump NQP_REVISION to get -e argument handling fix.

[06:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ad0bb3ffd5

[06:32] <dalek> rakudo/nom: 953c714 | pmichaud++ | src/ (3 files):

[06:32] <dalek> rakudo/nom: Clean up $*ARGFILES, .lines, .eof, and .get.

[06:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/953c7146f8

[06:33] <pmichaud> I'm still thinking about whether or not we can return the type object to indicate a failed match.  I'm guessing that probably has a few holes in it.

[06:33] *** ggoebel joined
[06:35] *** perlhack joined
[06:35] <pmichaud> anyway, time for sleep here -- will fix the regex bug after sleep

[06:35] <moritz> good night

[06:36] *** perlhack left
[06:52] *** kfo joined
[06:59] *** kjeldahlw joined
[07:04] *** kjeldahlw left
[07:05] *** mj41 joined
[07:05] *** kjeldahlw joined
[07:10] *** kjeldahlw left
[07:11] *** kjeldahlw joined
[07:26] *** xinming left
[07:26] *** xinming joined
[07:57] *** Jackneill joined
[07:57] *** Jackneill left
[07:57] *** Jackneill joined
[08:05] *** daniel-s left
[08:12] *** Trashlord joined
[08:23] *** thou left
[08:41] *** daxim joined
[08:46] *** scottjl joined
[08:48] <scottjl> Hi all. I'm trying out perl6... after a git clone, during perl congifure.pl --gen-parrot, I get a "Can't locate Test/Harness.pm in @INC"

[08:50] *** dakkar joined
[08:50] <scottjl> Does anyone have any suggestions?

[08:50] <moritz> scottjl: then your perl installation is broken or incomplete. Test::Harness is a core module since perl 5.0

[08:50] <moritz> scottjl: what kind of system is that?

[08:50] <moritz> operating system, perl version

[08:51] <moritz> (for example on debian you need to install the perl-modules package to get all perl core modules)

[08:51] <scottjl> fedore f14 upgraded to f15. perl --version is v5.12.4

[08:52] <moritz> then please check if there's a 'perl-modules' package or something of a similar name

[08:52] <BinGOs> it might be 'perl-dev'

[08:53] <moritz> wouldn't that be header files?

[08:53] <BinGOs> You'd think wouldn't you.

[08:53] <moritz> I would :-)

[08:55] <scottjl> Thank you moritz. Fixed with "yum install perl-Test-Harness".

[08:56] <BinGOs> http://rpmfind.net//linux/RPM/mandriva/updates/2008.1/i586/perl-devel-5.10.0-13.1mdv2008.1.i586.html

[08:56] <BinGOs> For example

[08:56] <moritz> they really put core modules into separate packages and not install them by default? that's kinda... scary

[08:57] <BinGOs> Oh it requires perl-Test-Harness

[08:57] <moritz> seems that it's a meta package that pulls in the core modules

[08:57] <moritz> that factoring might make it easier to upgrade a core module

[08:58] <BinGOs> It's easy to upgrade a 'core' module right now.

[08:58] * moritz just uses perlbrew with a sufficiently new perl :-)

[09:03] <BinGOs> I've not been that familiar with Redhat-esque systems, but have had to get up to speed with them in the past week or so.

[09:04] <BinGOs> I've managed to just use Debian/Ubuntu etc until now.

[09:06] *** Jackneill left
[09:15] *** kjeldahlw left
[09:17] *** Trashlord left
[09:20] <arnsholt> moritz: Ubuntu doesn't come with perldoc, annoyingly

[09:20] *** Jackneill joined
[09:21] <moritz> same with debian, needs perl-doc installed

[09:21] *** Trashlord joined
[09:22] <arnsholt> Right. It's really strange. Especially since the documentation is in the source code anyways >.<

[09:23] *** perlhack joined
[09:26] *** wamba joined
[09:27] *** wolfman2000 left
[09:29] *** perlhack left
[09:45] *** Jackneill left
[09:54] *** scottjl left
[09:56] <moritz> if I were to write a matrix of feature comparison for different Perl 6 compiler, what software could I use to generate them?

[09:57] *** Jackneill joined
[09:58] <moritz> nom: my @x = (1, 2, 3); @x[0] := my $x; $x = 8; say @x

[09:58] <p6eval> nom: OUTPUT«Cannot use bind operator with this LHS at line 1, near " my $x; $x"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23510 (src/stage2/gen/NQPHLL.pir:6316) (src/stage2/gen/NQPHLL.pm:329)␤»

[09:58] *** ab5tract joined
[09:59] *** woosley left
[10:15] *** kaare_ joined
[10:16] *** Jackneill left
[10:19] *** Jackneill joined
[10:27] *** Jackneill_ joined
[10:29] *** Jackneill left
[10:31] *** kjeldahlw joined
[10:31] *** Jackneill_ left
[10:40] *** domidumont left
[10:44] *** Jackneill_ joined
[10:44] *** domidumont joined
[10:45] *** pernatiy left
[10:54] *** wamba left
[11:05] *** wamba joined
[11:07] *** Jackneill_ left
[11:08] *** Jackneill joined
[11:08] *** Jackneill left
[11:08] *** Jackneill joined
[11:08] *** MayDaniel joined
[11:18] *** cosimo left
[11:18] *** cosimo joined
[11:19] *** fhelmberger joined
[11:19] *** fhelmberger left
[11:20] *** fhelmberger joined
[11:20] *** pernatiy joined
[11:29] *** fhelmberger left
[11:30] *** fhelmberger joined
[11:36] *** kaare_ left
[11:36] *** mj41 left
[11:36] *** Instil left
[11:36] *** mj41_nb joined
[11:36] *** kaare_ joined
[11:43] <dalek> rakudo/nom: 512670d | moritz++ | / (3 files):

[11:43] <dalek> rakudo/nom: enable ro-accessors for natively typed attributes

[11:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/512670db52

[11:45] *** icwiener joined
[11:48] *** Instil joined
[11:49] *** MayDaniel left
[11:54] *** ab5tract left
[11:59] *** icwiener left
[12:01] *** icwiener joined
[12:10] *** icwiener_ joined
[12:10] *** icwiener left
[12:16] *** bluescreen10 joined
[12:33] *** ab5tract joined
[12:37] <moritz> nom: say (* + 2).(5)

[12:37] <p6eval> nom: OUTPUT«7␤»

[12:37] <moritz> nom: say (* + 2).WHAT

[12:37] <p6eval> nom: OUTPUT«_block1014␤»

[12:43] <daxim> .WHAT   # .oO(this value is unacceptable, it's an outrage!)

[12:50] *** daniel-s joined
[12:52] <moritz> https://github.com/perl6/features

[12:53] <daxim> rm  Rakudo (branch master)

[12:53] <daxim> rm  Rakudo (branch nom)

[12:54] <daxim>  ↑ typo

[12:54] <sbp> moritz: + means has feature, - means doesn't have feature, and missing entry indicates not tested?

[12:54] <moritz> sbp: missing entry = no data available

[12:54] <moritz> and  rm+-  means "rakudo master partially implements it"

[12:54] <moritz> optionally with notes in parenthesis

[12:54] *** daniel-s left
[12:55] *** daniel-s joined
[12:55] <moritz> Zip: rm+- (only for two lists)

[12:55] <moritz> daxim: thanks, fixing

[12:56] <moritz> eventually somebody could automatically derive most of that data by associating features with test files, and smoking the compilers

[12:57] <moritz> but that's so much work that I don't see that happening in the next few weeks

[12:58] <dalek> features: 7eee291 | moritz++ | features.txt:

[12:58] <dalek> features: typo noticed by daxim++

[12:58] <dalek> features: review: https://github.com/perl6/features/commit/7eee29176a

[12:58] *** wamba left
[13:01] <moritz> is anybody interested in writing a script that turns that file into a HTML table?

[13:02] *** Holy_Cow joined
[13:03] *** Holy_Cow left
[13:04] <moritz> nom: sub f(::T $x) { say $x.WHAT }; f 12

[13:04] <p6eval> nom: OUTPUT«Int()␤»

[13:04] <moritz> perl6: sub f(::T $x) { say $x.WHAT }; f 12

[13:04] <p6eval> niecza v7-44-g54b5188: OUTPUT«Unhandled exception: Name component T not found in ::GLOBAL␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 570 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/Metamodel.pm6 line 146 (Metamodel Namespace.get_pkg @ 22) ␤  at /home/p6eval/niecza/src/Metamode…

[13:04] <p6eval> ..pugs: OUTPUT«Int␤»

[13:04] <p6eval> ..rakudo 922500: OUTPUT«Int()␤»

[13:05] <moritz> perl6: sub f($x as Int) { say $x.WHAT }; f "12"

[13:05] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "as"␤    expecting "?", "!", trait, "=", default value, "-->" or ")"␤    at /tmp/5Tr5lfJcqc line 1, column 10␤»

[13:05] <p6eval> ..niecza v7-44-g54b5188: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Action method trait_mod:as not yet implemented at /tmp/gfPOJnUoLz line 1:␤------> [32msub f($x as Int[33m⏏[31m) { say $x.WHAT }; f "12"[0m␤␤Unhandled exception: Cannot use hash access on an object of type Str␤  at /home/p…

[13:05] <p6eval> ..rakudo 922500: OUTPUT«Int()␤»

[13:06] <moritz> niecza: sub f(**@x) { say @x.perl }; my @a = 1, 2; my @b = 4, 5; f @a, @b

[13:06] <p6eval> niecza v7-44-g54b5188: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Slice parameters NYI at /tmp/YfF4mADPTU line 1:␤------> [32msub f(**@x[33m⏏[31m) { say @x.perl }; my @a = 1, 2; my @b =[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 570 (CORE …

[13:09] <dalek> features: 795a430 | moritz++ | features.txt:

[13:09] <dalek> features: add more data points

[13:09] <dalek> features: review: https://github.com/perl6/features/commit/795a430e45

[13:16] *** donri joined
[13:34] *** tokuhirom joined
[13:41] *** drbean left
[13:56] *** daniel-s left
[13:59] <dalek> features: 569fb82 | moritz++ | features.txt:

[13:59] <dalek> features: fix a few typos

[13:59] <dalek> features: review: https://github.com/perl6/features/commit/569fb8251b

[14:05] <kthakore_> hello

[14:06] <moritz> hi kthakore_ 

[14:06] <kthakore_> Su-Shee: ping? Before I left for India you mentioned there are some resources for making perl6 modules, what are thouse again?

[14:06] <kthakore_> hi moritz 

[14:06] <kthakore_> those*

[14:07] <Su-Shee> kthakore_: I have no idea? Sure it was me?

[14:07] <kthakore_> ... yeah 

[14:07] <kthakore_> I have logs 

[14:08] <kthakore_> I was talking about how I failed at Parrot dev and suck at language/compiler coding

[14:08] <moritz> kthakore_: all the links are on modules.perl6.org, iirc

[14:08] <Su-Shee> then I don't remember what I answered, I don't recall.

[14:08] <kthakore_> moritz: oh Su-Shee mentioned some other stuff .. I guess I can just peruse logs again

[14:09] <kthakore_> I prolly should have done that from the start. Sorry for wasting time.

[14:11] <kthakore_> moritz: The link you gave me doesn't help me with handling C deps and installation

[14:11] <kthakore_> I have to check for SDL install and/or install it 

[14:12] <moritz> I don't think there's much support for that in Perl 6 land

[14:12] <moritz> qx// and parsing the output maybe

[14:13] <kthakore_> ah ... ok

[14:13] * [Coke] wonders why facebook shows him as ... The Perl Foundation

[14:13] * kthakore_ is stuck

[14:13] <kthakore_> [Coke]: Cause you are TPF ... all of it!

[14:14] <kthakore_> moritz: how can I do this? In perl5 we have modules that search PATH and stuff for this. Also XSLoader allows us to preload libraries from sharedirs.

[14:15] <kthakore_> Maybe for now I can keep the SDL 1.3 code with the module, but how to compile that stuff on varying machines?

[14:15] <moritz> well, you can search %*ENV<PATH> too

[14:15] <moritz> rakudo: say %*ENV<PATH>

[14:15] <p6eval> rakudo 922500: OUTPUT«/home/p6eval/rakudo/parrot:/home/p6eval/perl5/perlbrew/bin:/home/p6eval/rakudo/parrot:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games␤»

[14:16] <moritz> kthakore_: and there's zavolaj/NativeCall.pm for calling C functions

[14:17] <kthakore_> moritz: yeah those are clashing with the differing versions of parrot

[14:17] <kthakore_> it didn't work with parrot 3.5 for me. 

[14:17] <moritz> I know :(

[14:17] <kthakore_> oh ...

[14:18] <kthakore_> Hmm maybe if I start making a list of issues and just keep buggin for help

[14:18] <moritz> they need fixing, or you need to use older versions

[14:18] *** mkramer joined
[14:18] <kthakore_> right ... that just adds way too much on my plate

[14:19] *** mkramer left
[14:19] <kthakore_> that means I would have to kickstart NativeCall, Alien::SDL and SDL6. Then testing ... and ... phew

[14:19] <moritz> well, you're a pioneer

[14:20] <kthakore_> I am gonna start with making a list 

[14:20] <kthakore_> moritz: yeah I have been here before ( SDL in p5p )

[14:20] *** icwiener_ left
[14:20] <kthakore_> having NativeCall would make my life alot easier tough

[14:21] <kthakore_> a parser for C header files to Native Call might be a good idea

[14:21] *** masak joined
[14:21] <masak> popping in because I just realized something.

[14:23] * moritz waits for a big revelation

[14:25] <masak> (sorry, mandatory keyboard break software kicked in) :)

[14:25] <masak> if https://github.com/perl6/specs/commit/e84b11137cc55ecd9f17f58976c08d361054ea05 is now the case...

[14:25] <masak> ...then the subs at https://github.com/rakudo/rakudo/blob/master/Test.pm#L176 are wrongly named.

[14:25] <kthakore_> moritz: this is what I thinking of doing https://github.com/PerlGameDev/SDL6/wiki

[14:26] <moritz> masak: no, actually they are named correctly now

[14:26] <moritz> masak: before, and eval() would never die... now it can

[14:27] <masak> moritz: huh? the mechanism is clearly meant to wrap around things to catch exceptions. hence, it should be named 'try_', not 'eval_'

[14:27] <flussence> does that mean there's a way to test for the presence of a warn() now?

[14:27] <moritz> masak: eval_dies_ok actually does an eval

[14:28] <masak> I know, and that's wrong now.

[14:28] <moritz> no.

[14:28] <masak> it should do a try.

[14:28] <moritz> it should do a try and an eval.

[14:28] <masak> oh, ok.

[14:28] <masak> yes, I see now.

[14:28] <moritz> but the try{} is really just an internal detail

[14:28] <moritz> like it is in lives_ok

[14:29] *** wtw left
[14:30] *** birdwindupbird left
[14:31] <masak> right.

[14:31] *** ymasory joined
[14:31] <masak> ok, so false alarm. :) no renaming necessary.

[14:31] <masak> see y'all tonight. o/

[14:31] *** masak left
[14:31] <moritz> \o

[14:32] *** _jaldhar left
[14:32] <kthakore_> I guess I am wasting time just yapping. thanks for the help.

[14:39] <pmichaud> good morning #perl6

[14:39] <colomon> o/

[14:39] <domidumont> hi

[14:40] *** daniel-s joined
[14:41] <moritz> \o

[14:41] *** wamba joined
[14:42] <domidumont> BTW, this has been long overdue: Rakudo is now available on Debian/unstable  (I've ironed out the last issues this week end)

[14:42] *** MayDaniel joined
[14:42] <moritz> domidumont++ # that's great!

[14:42] <pmichaud> domidumont: I tried looking through the debian sites to find the details and couldn'g find them

[14:42] <domidumont> pmichaud: here's rakudo package page: http://packages.qa.debian.org/r/rakudo.html

[14:43] <domidumont> more details are on: http://ddumont.wordpress.com/

[14:44] <domidumont> Debian pkg-rakudo team is on Alioth: https://alioth.debian.org/projects/pkg-rakudo/

[14:45] <takadonet> http://www.reddit.com/r/perl6/comments/iz7gb/perl6_aka_rakudo_is_available_on_debian/ :)

[14:45] <domidumont> ok, this team is currently made of 2 people which is admitedly not much :-p

[14:45] *** daniel-s_ joined
[14:45] *** daniel-s left
[14:46] <pmichaud> domidumont: is the package just the compiler, or is it packaging rakudo star?

[14:46] *** tokuhirom left
[14:46] *** pmurias joined
[14:47] <domidumont> pmichaud: We packaged rakudo-star tarball

[14:47] <pmichaud> excellent.  there's a new tarball coming out tomorrow.

[14:47] <domidumont> Does it depend on new parrot (3.6.0) or is 3.3.0 good enough ?

[14:47] <pmichaud> it uses the new parrot

[14:48] <domidumont> ok, then a parrot package update is required.

[14:48] <pmichaud> 3.3.0 had... issues (mainly with speed and gc)

[14:49] <domidumont> Updating parrot may take some time ... 

[14:49] *** daniel-s__ joined
[14:49] <pmichaud> okay.  I'd probably recommend using rakudo star 2011.01 instead, then, it's a fair bit faster.

[14:49] *** daniel-s_ left
[14:50] <pmichaud> 2011.04 isn't really the optimal release to be using.

[14:50] * moritz wouldn't mind if it took a bit

[14:51] <domidumont> Hmm, we don't have a package for 2011.01 and releasing an older version of rakudo may raise some eyebrows

[14:51] <pmichaud> I agree, I'd be in favor of waiting for parrot-3.6.0 to be packaged.

[14:52] <domidumont> Well, I can work on the package, but there are some organisational issues with debian-parrot-team to work out...

[14:52] <domidumont> I mean I can work on parrot package. (I did most of the packaging work for parrot 3.3.0)

[14:53] *** daniel-s__ left
[14:53] *** daniel-s__ joined
[14:54] <pmichaud> the new versions of star coming out over the next few months all will depend on 3.6.0 also.

[14:55] <domidumont> I'm all for updating parrot 

[14:55] <pmichaud> should I join the packaging team, ooc?  I've been meaning to get involved in debian packaging

[14:57] <domidumont> pmichaud: no problem. The more, the merrier :-)

[14:58] <domidumont> BTW, since you

[14:58] *** _daniel-s__ joined
[14:58] *** daniel-s__ left
[14:59] <domidumont> pmichaud: BTW, since you're also admin for parrot team, could you approve my request to join parrot team with my new DD account (dod) and remove my old account (ddumont-guest) ?

[14:59] <pmichaud> parrot team.... where?

[14:59] <moritz> github?

[14:59] <pmichaud> on github?

[14:59] <domidumont> on Alioth

[15:00] *** thou joined
[15:00] <[Coke]> O_o

[15:00] <domidumont> Hmm, sorry, I got confused, you're not admin, just member: https://alioth.debian.org/projects/pkg-parrot/

[15:00] <pmichaud> right... didn't think I was an admin there

[15:01] <domidumont> and I've just seen that my account was updated. Sorry about the noise

[15:02] *** daniel-s joined
[15:03] *** _daniel-s__ left
[15:04] <domidumont> ok. I'll work on updating parrot. OTOH, I'll be on vacation soon, so it may take a while

[15:06] <pmichaud> domidumont: okay.  maybe I can get some of the other parrot team members to do an update.

[15:06] <pmichaud> I just requested to join pkg-rakudo

[15:07] *** daniel-s left
[15:07] <domidumont> what role do you want ?

[15:07] <moritz> .oO( world domination )

[15:08] <pmichaud> admin seems appropriate, but I'm a newb on debian packaging so whatever role you think is appropriate is fine for now :)

[15:08] <domidumont> :-)

[15:08] <domidumont> pmichaud: welcome aboard, you're admin. 

[15:11] <domidumont> For me, admin role does not require packaging skills. Just common sense and good communication and some availability to answer questions :-p 

[15:11] <pmichaud> domidumont++  # thanks

[15:11] <domidumont> pmichaud: you're welcome :-)

[15:12] <eiro> domidumont++

[15:12] <eiro> hello world

[15:12] <pmichaud> and yes, domidumont++  for the packaging.  I was just at FOSSCON this past weekend and my talk lamented that we didn't have a rakudo debian package yet... now I can say that we do.  :-)

[15:13] <domidumont> Excellent :-D

[15:14] <domidumont> We also have to thanks ghedo (Alessandro Ghedini) for rakudo packaging, he did a lot of work too

[15:15] *** MayDaniel left
[15:15] *** shinobicl joined
[15:17] <moritz> ghedo++ then :-)

[15:18] <domidumont> Indeed :-)

[15:19] <dalek> features: 7701afe | moritz++ | / (3 files):

[15:19] <dalek> features: basic processing script

[15:19] <dalek> features: review: https://github.com/perl6/features/commit/7701afee27

[15:19] <moritz> http://moritz.faui2k3.org/tmp/features.html

[15:20] *** Trashlord left
[15:21] *** Trashlord joined
[15:22] <moritz> it's really ugly right now, but I hope somebody with CSS skills can fix that for us :-)

[15:24] <pmichaud> moritz++

[15:25] <pmichaud> do we have a canonical place for the page itself to live?

[15:25] <pmichaud> or is that still being worked out?

[15:25] <moritz> I want to put it somewhere on perl6.org, if nobody objects

[15:25] <pmichaud> +1

[15:25] <pmichaud> forgiveness > permission

[15:26] <moritz> perl6.org/compilers/features  or so

[15:27] <pmichaud> would love to have a way to add footnotes to that page   (Yes, I know, "patches welcome!" :-)

[15:27] <moritz> pmichaud: footnotes are already in the source file

[15:27] <moritz> pmichaud: please reload, just reduced the amount of text a bit :-)

[15:28] <pmichaud> I see them in the source file... but now features.html isn't displaying correctly :)

[15:29] <moritz> pmichaud: what's wrong?

[15:29] <pmichaud> all I see are '+' and '+-' in the table cells

[15:30] <moritz> and colors, hopefully?

[15:30] <pmichaud> yes, and colors

[15:30] <pmichaud> oh, I see, that's the new label.

[15:30] <pmichaud> hmmmm.

[15:30] <moritz> that's intended

[15:30] <pmichaud> they're a little hard to see

[15:30] <moritz> maybe I should put the legend box near the top

[15:30] <moritz> and with colors

[15:30] <pmichaud> might help if the columns were equal-width, too.

[15:30] <pmichaud> and maybe center the +/-

[15:34] <dalek> nqp: dc942fb | pmichaud++ | src/QRegex/Cursor.nqp:

[15:34] <dalek> nqp: Have !cursor_start create failing cursors by default.  Fixes problem with default alpha/alnum/upper/etc. rules not failing properly (moritz++).

[15:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dc942fb3a0

[15:35] <[Coke]> (css skills) which now?

[15:35] <[Coke]> oh, features.html? Sure, I can take a look.

[15:36] <[Coke]> Is there a repo it's in?

[15:36] <pmichaud> perl6/features

[15:37] <moritz> there it's generated from template.html and process.pl (needs HTML::Template::Compiled)

[15:38] <dalek> features: 9e8d0db | moritz++ | / (3 files):

[15:38] <dalek> features: some small tweaks; center-align +/-, pmichaud++

[15:38] <dalek> features: review: https://github.com/perl6/features/commit/9e8d0db8de

[15:38] <moritz> ok, I'll stop touching it, [Coke]++'s turn :-)

[15:42] <dalek> features: 46bde8a | pmichaud++ | features.txt:

[15:42] <dalek> features: Some features updates, corrections.

[15:42] <dalek> features: review: https://github.com/perl6/features/commit/46bde8a59b

[15:43] <pmichaud> why is rakudo listed with a '-' for conjunctions, ooc?

[15:43] <pmichaud> (in Regexes)

[15:43] <moritz> rakudo: say 'abc' ~~ /\w+ & .+/

[15:43] <p6eval> rakudo 922500: OUTPUT«abc␤»

[15:44] <moritz> pmichaud: because I didn't know :-)

[15:44] <pmichaud> nom:  say 'abc' ~~ /\w+ & .+/

[15:44] <p6eval> nom: OUTPUT«abc␤»

[15:44] <moritz> \o/

[15:44] <pmichaud> nom:  say 'abc' ~~ /\w+ & .**2/

[15:44] <p6eval> nom: OUTPUT«ab␤»

[15:44] <moritz> niecza: say 'abc' ~~ /\w+ & .**2/

[15:44] <p6eval> niecza v7-44-g54b5188: OUTPUT«Unhandled exception: Unable to resolve method oplift in class Any␤  at /home/p6eval/niecza/src/NieczaActions.pm6 line 274 (NieczaActions NieczaActions.op_for_regex @ 2) ␤  at /home/p6eval/niecza/src/NieczaActions.pm6 line 290 (NieczaActions NieczaActions.qu…

[15:45] <moritz> niecza: say 'abc' ~~ /\w+ & .*/

[15:45] <p6eval> niecza v7-44-g54b5188: OUTPUT«Unhandled exception: Unable to resolve method oplift in class Any␤  at /home/p6eval/niecza/src/NieczaActions.pm6 line 274 (NieczaActions NieczaActions.op_for_regex @ 2) ␤  at /home/p6eval/niecza/src/NieczaActions.pm6 line 290 (NieczaActions NieczaActions.qu…

[15:45] *** donri left
[15:45] <dalek> features: f255ab6 | moritz++ | features.txt:

[15:45] <dalek> features: update regex conjunction, pmichaud++

[15:45] <dalek> features: review: https://github.com/perl6/features/commit/f255ab6843

[15:45] * moritz counts that as a -

[15:46] *** donri joined
[15:46] <pmichaud> nom:  say 'abc' ~~ / <[bc]>+ /

[15:46] <p6eval> nom: OUTPUT«bc␤»

[15:47] <moritz> nom: say so "a\tb" ~~ / <[\t]> /

[15:47] <p6eval> nom: OUTPUT«Bool::False␤»

[15:48] <pmichaud> correct, we still don't do \-escapes in <[...]> yet.

[15:48] <moritz> I wonder if we should <:alpha> as char classes or unicode properties

[15:50] <pmichaud> unicode properties.

[15:51] *** REPLeffect joined
[15:52] <dalek> rakudo/nom: 3c8f0b6 | pmichaud++ | src/Perl6/Compiler.nqp:

[15:52] <dalek> rakudo/nom: Fix bug in interactive mode introduced by @*ARGS changes.

[15:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3c8f0b6044

[15:52] <dalek> rakudo/nom: d973a42 | pmichaud++ | / (2 files):

[15:52] <dalek> rakudo/nom: Bump NQP_REVISION to get alpha/alnum/digit/etc. fixes.

[15:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d973a42f8a

[15:52] <moritz> niecza: say 'a' ~~ /<:Letter>/

[15:52] <p6eval> niecza v7-44-g54b5188: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Action method assertion:sym<:> not yet implemented at /tmp/Y3iLKMoGsX line 1:␤------> [32msay 'a' ~~ /<:Letter[33m⏏[31m>/[0m␤␤Unhandled exception: Unable to resolve method oplift in class Str␤  at /home/p6eval/niecza/src/…

[15:53] <dalek> features: c37acce | moritz++ | features.txt:

[15:53] <dalek> features: add Unicode properties

[15:53] <dalek> features: review: https://github.com/perl6/features/commit/c37acce97d

[15:54] <moritz> nom: $_ = 'a'; say so m:c(10)/<?alpha>/

[15:54] <p6eval> nom: OUTPUT«Rebuild in progress␤»

[15:55] <moritz> is that also fixed with that nqp patch?

[15:55] <pmichaud> I don't know if it is or not.

[15:56] <pmichaud> > $_ = 'a';  say so m:c(10)/<?alpha>/

[15:56] <pmichaud> Bool::True

[15:56] <pmichaud> looks like not

[16:02] <pmichaud> need lunch here... I'll fix it after lunch.

[16:11] *** itz` joined
[16:12] *** itz` left
[16:13] *** kjeldahl joined
[16:20] *** Trashlord left
[16:21] <dalek> features: 17f43e8 | Coke++ | / (2 files):

[16:21] <dalek> features: minor updates to xhtml/css.

[16:21] <dalek> features: add unicode +/- symbol.

[16:21] <dalek> features: review: https://github.com/perl6/features/commit/17f43e8396

[16:21] <[Coke]> moritz: some updates.

[16:22] <sorear> good * #perl6

[16:23] *** jedai joined
[16:23] *** mj41_nb left
[16:24] *** shinobicl left
[16:27] *** benabik joined
[16:32] <dalek> features: fa8c84a | Coke++ | template.html:

[16:32] <dalek> features: Add rounded corners.

[16:32] <dalek> features: review: https://github.com/perl6/features/commit/fa8c84ad33

[16:32] <dalek> features: 8bc2ad0 | Coke++ | template.html:

[16:32] <dalek> features: pick slightly more legible colors.

[16:32] <dalek> features: review: https://github.com/perl6/features/commit/8bc2ad0327

[16:32] *** wjguo joined
[16:33] <[Coke]> http://feather.perl6.nl/~coke/features.html

[16:33] *** cdarroch joined
[16:33] *** cdarroch left
[16:33] *** cdarroch joined
[16:46] *** Trashlord joined
[16:52] <moritz> [Coke]++

[16:54] *** wolfman2000 joined
[16:54] *** mj41_nb joined
[16:56] *** pmurias left
[17:01] *** ymasory left
[17:03] <PerlJam> [Coke]++  except for the color chosen for not implemented.  :)

[17:05] *** soh_cah_toa joined
[17:07] *** masak joined
[17:08] <masak> hi, zebry.

[17:09] *** dakkar left
[17:09] *** [particle]1 joined
[17:09] <dalek> features: 8a260b4 | pmichaud++ | features.txt:

[17:09] <dalek> features: Fix typo, add entry for operators on natives.

[17:09] <dalek> features: review: https://github.com/perl6/features/commit/8a260b4d0f

[17:10] <masak> moritz++ # feature comparison table

[17:11] *** [particle] left
[17:13] <masak> [Coke]++ # improvements

[17:13] *** daxim left
[17:14] *** uvtc joined
[17:15] <[Coke]> PerlJam: I just picked a slightly less jarring red. you have an alternate suggestion?

[17:16] <PerlJam> I liked the jarring red actually.  Yours is just a tad too close to pink for me.

[17:16] <PerlJam> But I'm just bikeshedding it, so ignore me.

[17:19] <dalek> features: 3767f94 | masak++ | template.html:

[17:19] <dalek> features: improved color scheme

[17:19] <dalek> features: review: https://github.com/perl6/features/commit/3767f94380

[17:19] <masak> I'm just JFDI-ing, so ignore me :P

[17:21] <masak> http://feather.perl6.nl/~masak/features.html

[17:21] <[Coke]> yah, the orange is fine.

[17:21] <masak> yellow on white is never a good idea IMHO.

[17:22] <masak> (and bright cyan on white is almost as bad)

[17:22] <[Coke]> masak: there was no yellow when i was done.

[17:23] <[Coke]> I wouldn't call it bright cyan, but orange is fine. ;)

[17:23] <masak> [Coke]: right. just giving my reasons for going with orange instead of yellow. :)

[17:23] <uvtc> Wow. Had to pipe in -- that implemented features comparison table is great.

[17:23] <felher> masak++ for blog post. I played and solved it. But not without look into the source. I just couldn't find the right words sometimes. :). But great adventure. And quite funny :D

[17:24] <masak> felher: thank you. :)

[17:24] <masak> felher: I'm very interested to hear which parts had you stumped, and which words you tried.

[17:24] <masak> (they're probably fine, it's just that my imagination is limited)

[17:28] <pmichaud> (features)  I think the red is too strong/saturated.  It tends to overpower the table.

[17:29] <felher> masak: the hardest problem was guessing the names for the disks. What i tried was little, and big. After some movements the game suggested AC, AB and so on and i was glad to use that. :)

[17:29] <uvtc> re. the feature comparison table: I think it would be easier to read if "unknown" cells were at least rendered light gray or something.

[17:29] <pmichaud> it's fine in isolation ("Natively typed attributes"), but large blocks of red ("Regexes") are a bit jarring to my eyes

[17:30] <masak> feel free to change it to #f44 or #f66.

[17:30] <masak> felher: oh, nice!

[17:30] <masak> felher: yes, it's a tricky problem to lead people into the right path there.

[17:30] <uvtc> masak: re. the crypt, I had to look in the source to figure out how to move the disks around. It would be helpful if you gave a hint in the game to use the "ab", "ca"... commands.

[17:31] <masak> uvtc: noted.

[17:32] <soh_cah_toa> not that i have anything to do w/ this, but when i have to come up with a color scheme http://www.colorschemer.com/schemes/ has always been helpful

[17:33] <felher> masak: Yeah. :) There was one more thing but i can't recall it at the moment. Maybe i get it later.

[17:33] <masak> I agree with uvtc that missing cells should be pale gray.

[17:33] <uvtc> At http://perl6.org/compilers/ the link to Rakudo's status http://rakudo.org/status is broken.

[17:34] * tadzik pops out of nowhere

[17:35] <masak> tadzik! \o/

[17:36] <tadzik> empty fields on the features page mean "unknown"?

[17:36] <tadzik> masak: o/

[17:36] <tadzik> I has a computer, but it's less than fast, I may give it some love today and maybe it'll get a bit better

[17:37] <tadzik> laptop fixing mission failed, today. "Oh Lenovo? We don't fix those anymore, yes, the official site lies"

[17:37] <masak> does anyone want to submit https://github.com/masak/crypt to HN and/or Reddit? :)

[17:37] <tadzik> Will try tomorrow

[17:38] <uvtc> masak: about how long does it take crypt to start up on your system?

[17:38] <soh_cah_toa> masak: a text adventure game, nice. i remembering writing those in qbasic :)

[17:38] <soh_cah_toa> i have to try this out

[17:39] <uvtc> On my system (fairly modern laptop, R* 2011.04) it takes roughly 15 s.

[17:40] <[Coke]> tadzik: yah. 

[17:40] <[Coke]> ENODATA.

[17:42] <masak> uvtc: takes 66 s here on my Ubuntu VM.

[17:43] *** Chillance joined
[17:44] *** pernatiy left
[17:44] <soh_cah_toa> masak: http://digg.com/news/technology/a_text_adventure_game_in_perl_6

[17:45] <uvtc> masak: that's a big twinkie.

[17:45] <masak> soh_cah_toa++ # \o/

[17:47] <uvtc> masak: Is most of that time spent compiling crypt.pl into a form that Parrot can run?

[17:48] <tadzik> I suppose so

[17:48] <uvtc> Is there a way to pre-compile the file?

[17:49] <tadzik> I suppose so

[17:49] <tadzik> try perl6 --target=pir file.pl > file.pir

[17:49] <tadzik> then parrot file.pir

[17:50] <tadzik> or parrot -o pbc file.pbc file.pir; parrot file.pbc

[17:50] <tadzik> to go full hardcore^Wbytecode :)

[17:50] *** impious joined
[17:50] *** impious left
[17:50] <masak> IIUC, the speed gain for running the .pbc rather than the .pir isn't that great.

[17:51] <masak> but .pir rather than .pl will surely speed things up, circumventing the parsing which is the heavy step.

[17:52] <uvtc> Running `perl6 crypt.pl` took 15 s to start up. Compiling it using `perl6 --target=pir crypt.pl > crypt.pir` took about the same amount of time.

[17:52] <tadzik> and running

[17:52] <uvtc> Running that file via `parrot crypt.pir` started the game fairly quickly (a couple of seconds) but then died.

[17:53] <pmichaud> I suspect precompiling stuff still doesn't work very well... there's a lot of startup stuff that gets missed.

[17:53] <uvtc> tadzik: Thanks, tadzik++

[17:54] <uvtc> pmichaud: If crypt gets some attention, my guess is that people will howl at how long it takes to start up. Would be nice if precompiling worked smoothly.

[17:55] <pmichaud> uvtc: I agree, it would be nice.  :)

[17:55] <pmichaud> just because it would be nice doesn't make it easy.  :)

[17:55] <pmichaud> it's very challenging to get precompiled stuff to work properly (more)

[17:56] *** soh_cah_toa left
[17:56] <pmichaud> in the case where we compile the source, the compiler is loaded and initialized and *then* we start compiling.

[17:56] <pmichaud> In the case where we start from a pre-compiled .pir file, the .pir file gets loaded and then *it* has to load the compiler and make sure any initializations get run properly.

[17:58] <pmichaud> http://pmichaud.com/sandbox/features.html   # toned down the red slightly, added grab boxes for the empty spaces

[17:58] <pmichaud> *grey

[17:59] <uvtc> pmichaud: thanks for the info. Also, feature table colors look nice. I like the orange.

[18:00] <masak> pmichaud: the red looks nice. the grey is almost invisible on my screen, though.

[18:00] <masak> (and the contrast with the white question mark inside of it is too small)

[18:01] *** tokuhirom joined
[18:01] <pmichaud> well, I wanted the grey to be very subdued.  I can make it less so.

[18:02] <pmichaud> reload, now at #aaa

[18:03] <masak> better. maybe the question mark should be #666 or something.

[18:03] <pmichaud> I think that calls too much attention to the question mark, personally.

[18:04] <uvtc> masak: the question-mark of the beast

[18:04] <pmichaud> maybe there shouldn't be a question mark.  :)

[18:04] <pmichaud> maybe I'll use #aaa for the question mark :)

[18:06] <uvtc> pmichaud: the ± looks too dark

[18:09] <pmichaud> uvtc: I agree -- now switched to #333

[18:13] <dalek> features: 79b0910 | pmichaud++ | / (2 files):

[18:13] <dalek> features: Add placeholders for unknown entries, tone down colors a bit.

[18:13] <dalek> features: review: https://github.com/perl6/features/commit/79b0910f1e

[18:16] *** dodathome joined
[18:21] *** spq1 joined
[18:26] <[Coke]> nom: my $notFish; $notFish.++;

[18:26] <p6eval> nom: OUTPUT«Could not find sub &postfix:<.>␤current instr.: '_block1002' pc 77 ((file unknown):63250011) (/tmp/h0bN7qZP6W:1)␤»

[18:26] *** pernatiy joined
[18:28] *** pyrimidine joined
[18:29] *** nothingmuch left
[18:35] <masak> rakudo: my $a; $a.++; say "alive"

[18:35] <p6eval> rakudo 922500: OUTPUT«Could not find sub &postfix:<.>␤  in main program body at line 22:/tmp/LYLdHHj5Nc␤»

[18:37] *** dukeleto left
[18:38] *** bluescreen10 left
[18:39] *** jevin left
[18:39] <dalek> nqp: 4fb5124 | pmichaud++ | src/QAST/Compiler.nqp:

[18:39] <dalek> nqp: Avoid vtable_bool for determining whether subrule passed/failed.

[18:39] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4fb512421c

[18:39] *** bluescreen10 joined
[18:39] *** jevin joined
[18:39] *** birdwindupbird joined
[18:44] *** uvtc left
[18:48] *** Mowah left
[18:48] <dalek> rakudo/nom-install: 6a45ccb | moritz++ | / (2 files):

[18:48] <dalek> rakudo/nom-install: try to make nom installable

[18:48] <dalek> rakudo/nom-install: 

[18:48] <dalek> rakudo/nom-install: This is... wrong. It installs rakudo's pbcs into the general parrot install

[18:48] <dalek> rakudo/nom-install: location, because I can't figure out where the pbcs are actually loaded, and

[18:48] <dalek> rakudo/nom-install: how. On the plus side it gives us an idea what files need to be installed.

[18:48] <dalek> rakudo/nom-install: 

[18:48] <dalek> rakudo/nom-install: It gets us so far that we can actually run the perl6 binary from outside the

[18:48] <dalek> rakudo/nom-install: installation path, but using an Int literal results in "Could not locate

[18:48] <dalek> rakudo/nom-install: compile-time value for symbol Int"

[18:48] <dalek> rakudo/nom-install: review: https://github.com/rakudo/rakudo/commit/6a45ccbae0

[18:50] <[Coke]> moritz: if you want to know where to install PBC, there's a parrot-config setting that should tell you. (or so I think)

[18:51] <moritz> [Coke]: I know where I *can* install PBC to, but that's not where it *should* be installed to

[18:51] *** dukeleto joined
[18:52] <pmichaud> where do the NQP .pbcs get installed to?

[18:53] <moritz> into the same global location that nom-install installs its pbcs

[18:53] <moritz> ie install/lib/parrot/3.6.0-devel/library/

[18:53] <pmichaud> I'm willing to live with that for now.

[18:54] <moritz> ok, then the main problem is that it doesn't work when I use literals

[18:55] <[Coke]> moritz: I don't see a single flag, but "parrot_config prefix versiondir" should get you really close.

[18:55] <pmichaud> [Coke]: in my experience, the problem isn't so much figuring out where to put them as figuring out how to load them on the other side

[18:56] <[Coke]> hokay.

[18:57] <pmichaud> iwbni we could take all of the .pbc's and pbc_merge them into a single .pbc, though.

[18:58] <pmichaud> I don't think that PERL6_ML_PBC should appear in both LIBDIR and LIBDIR/blib

[18:58] <moritz> yep, should probably only the the latter

[18:58] <pmichaud> actually I don't think there should be a LIBDIR/blib

[18:59] <pmichaud> blib is where we put stuff while building... but after building, there shouldn't be a blib

[19:00] <pmichaud> (or more accurately, the "built" versions shouldn't need a blib)

[19:02] <moritz> the problem is that Perl6::SymbolTable.load_setting hard-codes the path

[19:02] <moritz> to ModuleLoader.pbc

[19:02] <moritz> because.... the logic for module loading is in ModuleLoader

[19:03] <moritz> and we get away with that either in the setting or in the installed location

[19:04] <moritz> the problem is really that we have different layouts in install and build dirs

[19:04] <moritz> maybe we should build everything in blib/ in the source dir

[19:05] <pmichaud> I think we run into circularity/bootstrap issues there.

[19:05] <moritz> do we? we can add a library path at the command line, I think

[19:06] <pmichaud> yesterday while working on @*ARGS it also bugged me that we call load_bytecode so many times for the same file.

[19:07] <pmichaud> maybe that was in nqp, though.

[19:08] *** bluescreen10 left
[19:08] <moritz> I thikn I want to experiment with "everything in blib/" a bit

[19:12] *** wamba left
[19:13] *** Jackneill left
[19:14] *** Jackneill joined
[19:14] *** Jackneill left
[19:14] *** Jackneill joined
[19:14] <pmichaud> seems like each ModuleLoader should be smart enough to know where to look for its modules

[19:15] <pmichaud> by default it should look in the appropriate parrot language install directory, unless directed (by command line option) to look elsewhere.

[19:17] *** mike joined
[19:17] *** mike is now known as Guest1080

[19:18] <pmichaud> so, Perl6::ModuleLoader should look in   install/lib/parrot/<version>/languages/perl6

[19:18] <pmichaud> oh, there's a bunch of ickiness there, though

[19:18] <pmichaud> because a lot of the modules are being loaded by nqp's ModuleLoader

[19:19] <moritz> including Perl6::ModuleLoader

[19:19] <pmichaud> only the core setting gets loaded by Perl6::ModuleLoader

[19:19] <moritz> but Perl6::ModuleLoader gets loaded by nqp's ModuleLoader, no?

[19:19] <moritz> hm, not sure

[19:19] <pmichaud> no

[19:20] <pmichaud> it's loaded by load_bytecode

[19:20] <pmichaud>     load_bytecode "blib/Perl6/ModuleLoader.pbc"

[19:20] <moritz> ah right, we've talked about that before :-)

[19:21] *** Guest1080 left
[19:21] <moritz> this is frustrating, now I get "Cannot fetch object from non-existant serialization context 1311615152.93596"

[19:21] <moritz> that's something I don't know how to debug

[19:23] <pmichaud> I suspect this is all something that really wants jnthn++ presence to resolve (more)

[19:23] <moritz> aye, I fear so :/

[19:23] *** bluescreen10 joined
[19:23] <pmichaud> I can certainly come up with something that "works", but I think some of the current structure is also due to portability concerns

[19:24] <pmichaud> and there are several startup-ish issues we need to resolve as well... such as dealing with @*ARGS in precompiled modules

[19:24] <pmichaud> er, precompiled programs.

[19:26] *** Jackneill left
[19:26] <moritz> phenny: tell sorear about http://moritz.faui2k3.org/tmp/features generated from https://github.com/perl6/features/ - please review it and add missing information about niecza before I put up that page on perl6.org somewhere

[19:26] <phenny> moritz: I'll pass that on when sorear is around.

[19:28] *** cdarroch left
[19:28] <pmichaud> > $_ = 'a'; say so m:c(10)/<?alpha>/

[19:28] <pmichaud> Bool::False

[19:29] <moritz> \o/

[19:29] <dalek> rakudo/nom: 91d7ab5 | pmichaud++ | tools/build/NQP_REVISION:

[19:29] <dalek> rakudo/nom: Bump NQP_REVISION to get cursor boolean fixes.  (moritz++)

[19:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/91d7ab5ffd

[19:32] <[Coke]> pbc_merge should be ok to use these days, pmichaud.

[19:33] <masak> so far, Niecza and Rakudo appear quite evenly matched in the features table.

[19:34] *** soh_cah_toa joined
[19:35] *** pmurias joined
[19:35] <flussence> nom: infix:<½>($a, $b) { ($a + $b) / 2 }; say 4 ½ 3;

[19:35] <p6eval> nom: OUTPUT«Confused at line 1, near "infix:<\x{bd}>("␤current instr.: 'nqp;HLL;Grammar;panic' pc 23510 (src/stage2/gen/NQPHLL.pir:6316) (src/stage2/gen/NQPHLL.pm:329)␤»

[19:35] <flussence> looks like you can fill in 'Defining new operators' there...?

[19:36] <flussence> rakudo: infix:<½>($a, $b) { ($a + $b) / 2 }; say 4 ½ 3;

[19:36] <p6eval> rakudo 922500: OUTPUT«===SORRY!===␤Confused at line 22, near "infix:<\x{bd}>("␤»

[19:36] <flussence> oh

[19:36] <flussence> unless I'm being stupid somewhere again :)

[19:36] <flussence> rakudo: sub infix:<½>($a, $b) { ($a + $b) / 2 }; say 4 ½ 3;

[19:36] <p6eval> rakudo 922500: OUTPUT«3.5␤»

[19:36] <flussence> nom: sub infix:<½>($a, $b) { ($a + $b) / 2 }; say 4 ½ 3;

[19:36] <p6eval> nom: OUTPUT«Confused at line 1, near "say 4 \x{bd} 3;"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23510 (src/stage2/gen/NQPHLL.pir:6316) (src/stage2/gen/NQPHLL.pm:329)␤»

[19:37] <flussence> (that page looks much nicer than it did a few hours ago, btw!)

[19:43] <masak> crowdsourcing++

[19:44] <flussence> and (I'm not trying to take all the fun for myself, honest) "is rw", "is copy", "@a».say" and "proto sub" all work in niecza :)

[19:48] *** silug_ left
[19:48] *** silug_ joined
[19:53] *** rperry joined
[19:56] <pmichaud> niecza: sub xyz($a is copy) { $a++; say $a };   xyz(3);

[19:57] <p6eval> niecza v7-44-g54b5188: OUTPUT«4␤»

[19:57] <pmichaud> niecza: sub xyz($a is copy) { $a++; say $a };  my $b = 3; xyz($b); say $b;

[19:57] <p6eval> niecza v7-44-g54b5188: OUTPUT«4␤3␤»

[19:57] <pmichaud> niecza: sub xyz($a) { $a++; say $a };  my $b = 3; xyz($b); say $b;

[19:57] <p6eval> niecza v7-44-g54b5188: OUTPUT«Unhandled exception: Writing to readonly scalar␤  at /tmp/FCQbLF6BZc line 0 (MAIN xyz @ 0) ␤  at /tmp/FCQbLF6BZc line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1933 (CORE C906_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting …

[19:57] <pmichaud> niecza: sub xyz($a is rw) { $a++; say $a };  my $b = 3; xyz($b); say $b;

[19:57] <masak> \o/

[19:57] <p6eval> niecza v7-44-g54b5188: OUTPUT«4␤4␤»

[19:57] <pmichaud> looks good to me!

[19:59] <pmichaud> fwiw, I think that @a».say is a meme we need to kill.

[19:59] <pmichaud> niecza:  my @a = <the quick brown fox>;   say @a».flip

[19:59] <p6eval> niecza v7-44-g54b5188: OUTPUT«ehtkciuqnworbxof␤»

[20:00] *** birdwindupbird left
[20:00] <masak> pmichaud: what made you think of @a».say ?

[20:00] <masak> oh, flussence mentioned it.

[20:00] <pmichaud> 19:44 <flussence> and (I'm not trying to take all the fun for myself, honest) "is rw", "is copy", "@a».say" and "proto sub" all work in niecza

[20:00] <masak> aye.

[20:00] <flussence> I know what he means, it's semantically wrong

[20:01] <pmichaud> in nom I'm going to make sure that hyper (methods) do things out-of-sequence.

[20:01] <masak> good.

[20:01] <pmichaud> niecza: my @a = <the quick brown fox>;  say @a »~» 'x'; 

[20:01] <p6eval> niecza v7-44-g54b5188: OUTPUT«thexquickxbrownxfoxx␤»

[20:02] <dalek> features: 965b89e | pmichaud++ | features.txt:

[20:02] <dalek> features: More features as noted by flussence++ on #perl6.

[20:02] <dalek> features: review: https://github.com/perl6/features/commit/965b89e54e

[20:10] *** soh_cah_toa left
[20:18] *** molaf joined
[20:19] <[Coke]> is http://moritz.faui2k3.org/tmp/features.html being updated with the changes?

[20:19] <moritz> [Coke]: I'm updating it right now

[20:19] <moritz> [Coke]: but it's not the final/permanent URL

[20:20] <[Coke]> something off perlcabal, perhaps?

[20:20] <moritz> perl6.org

[20:30] *** wamba joined
[20:33] *** rperry left
[20:34] *** dodathome left
[20:35] <sorear> good * #perl6

[20:35] <phenny> sorear: 19:26Z <moritz> tell sorear about http://moritz.faui2k3.org/tmp/features generated from https://github.com/perl6/features/ - please review it and add missing information about niecza before I put up that page on perl6.org somewhere

[20:35] <masak> evenin', sorear.

[20:35] <sorear> o/ masak

[20:36] <sorear> well it's the last monday of the month again

[20:36] <masak> yay

[20:36] <sorear> I'll need to cut a niecza release, though playing with J has meant I didn't get to everything I planned

[20:36] <sorear> well there's always Aug

[20:36] <pmichaud> only one more Monday before financial doomsday strikes the U.S.  :)

[20:37] <masak> sorear: Håkan told me to mention K and Kona to you ;)

[20:39] <sorear> Is Håkan hakank?

[20:39] <masak> aye.

[20:39] <masak> he's not on IRC, so I have to speak for him.

[20:39] *** thou left
[20:41] <sorear> heh.  Would he prefer me to join some forum of his choice?

[20:41] <masak> he seems to like email. :)

[20:42] <sorear> heh.  well he has my address

[20:43] <sorear> ->backlog

[20:44] <[Coke]> pmichaud: I thought the debt ceiling didn't explode until 02AUG

[20:47] <sorear> back

[20:48] <sorear> pmichaud: hmm.  do you think the debt ceiling will adversely impact my ability to release niecza v9?

[20:48] <sorear> moritz: Should I just correct and push to https://github.com/perl6/features/ ?

[20:48] <diakopter> heh

[20:49] <moritz> sorear: sure

[20:50] <masak> "Niecza v8" sounds like it would have something to do with JavaScript. :)

[20:56] *** soh_cah_toa joined
[20:57] <masak> blog post! http://strangelyconsistent.org/blog/what-i-learned-from-the-june-blogging

[20:59] <moritz> masak++

[20:59] *** bluescreen10 left
[21:01] <dalek> features: a3b3dc7 | moritz++ | / (2 files):

[21:01] <dalek> features: add output filename option to script; expand README

[21:01] <dalek> features: review: https://github.com/perl6/features/commit/a3b3dc7875

[21:01] <dalek> features: dddcf99 | moritz++ | / (2 files):

[21:01] <dalek> features: implement footnote display - more work for [Coke]++ and other CSS gurus

[21:01] <dalek> features: review: https://github.com/perl6/features/commit/dddcf99bfd

[21:13] *** benabik left
[21:14] *** bluescreen10 joined
[21:14] <felher> masak++, just again.

[21:18] <masak> thanks.

[21:24] *** jevin left
[21:25] *** jevin joined
[21:25] *** kaare_ left
[21:30] *** kjeldahl left
[21:36] *** Trashlord left
[21:37] <diakopter> moritz: maybe the feature items could hyperlink to their corresponding Sxx descriptions

[21:37] *** drbean joined
[21:38] <frettled> masak++ :)

[21:39] <sorear> hmm

[21:40] <sorear> .u 177

[21:40] <phenny> sorear: Sorry, no results for '177'.

[21:40] <sorear> .u U+B1

[21:40] <phenny> sorear: Sorry, no results

[21:40] <sorear> ah, ±

[21:41] *** bluescreen10 left
[21:43] *** Psyche^ joined
[21:46] *** Patterner left
[21:46] *** Psyche^ is now known as Patterner

[21:48] *** La4ux joined
[21:48] *** La4ux left
[21:48] *** pmurias left
[21:54] <pmichaud> 20:44 <[Coke]> pmichaud: I thought the debt ceiling didn't explode until 02AUG

[21:55] <pmichaud> right.  01Aug is the "one more monday" before the ceiling caves in :)

[21:56] *** dorlamm joined
[21:56] * pmichaud reads the "blog post!" and enjoys it.

[22:01] *** Guest99070 left
[22:01] *** cognominal_ joined
[22:10] <masak> ok, there's now a PDF. it's 83 pages long. http://feather.perl6.nl/~masak/book.pdf

[22:12] <masak> more exactly, there's now a build system in the adventure-game-book repository that takes the 30 chapters, converts them from Markdown to LaTeX, and then renders that as a PDF.

[22:12] *** mj41_nb left
[22:13] <dalek> features: 2540598 | sorear++ | features.txt:

[22:13] <dalek> features: Add/tweak some entries for niecza

[22:13] <dalek> features: review: https://github.com/perl6/features/commit/254059833a

[22:20] <masak> 'night, #perl6.

[22:20] *** masak left
[22:22] *** franek joined
[22:25] *** dorlamm left
[22:30] *** soh_cah_toa left
[22:36] <tadzik> Rakudo compilation takes about 30 minutes on this machine. No way I'll do any gsoc on this :/

[22:38] * tadzik looks at cpu prices

[22:45] *** whiteknight joined
[22:45] *** Trashlord joined
[23:00] *** donri left
[23:06] *** supernovus joined
[23:09] *** Trashlord left
[23:09] <supernovus> This may sound like a strange question, but is there anyway to reload a package once it's been called with "use" or "require" a first time. Say a long-running process and you've made changes to a class but don't want to have to restart the entire service?

[23:11] *** Trashlord joined
[23:11] <[Coke]> you can remove it from %INC and re-use it, I think (perl 5)

[23:12] <[Coke]> (though I'd use 'do <file>' in that case.)

[23:13] <[Coke]> evil: https://github.com/coke/tigerlily/blob/master/extensions/cj.pl#L657 (unloads) https://github.com/coke/tigerlily/blob/master/extensions/cj.pl#L267 (loads)

[23:14] <[Coke]> ... please don't make me rewrite my lily Bot in perl 6.

[23:14] *** _jaldhar joined
[23:15] <supernovus> [Coke], thanks. Is there an equivilant to %INC in perl6? I can find @*INC but %*INC at least on rakudo master gives a "Contextual %*INC not found" error.

[23:20] <supernovus> Hmm, and I'm thinking the biggest problem is going to be the dreaded "Illegal redeclaration of symbol 'ClassYouTriedToReload'" error. I think I'll just give on this and admit that changes to classes means restarting the daemon. Not optimal for a MOO/MUD but a necessary evil I guess. Only insane people try to write MOO engines in Perl 6... I blame Carl, it was his "crypt" game that inspired my latest bout of madness.

[23:22] <[Coke]> you could just write it in MOO. :)

[23:22] <[Coke]> (which, coincidentally, is what the aforementioned lily is written in)

[23:22] <[Coke]> I'm not sure that's fully baked in p6 yet.

[23:23] <[Coke]> there is a p5 module that does a better job of reloading rather than just stomping on already loaded code. (hurm.)

[23:24] <[Coke]> Something like Module::Reload

[23:27] <supernovus> I'll look into those, thanks :-)

[23:29] *** soh_cah_toa joined
[23:30] *** orafu left
[23:30] *** orafu joined
[23:48] *** jferrero joined
[23:51] *** _jaldhar left
[23:51] *** _jaldhar joined
[23:52] *** ab5tract left
[23:52] *** mattp_ left
[23:52] *** franek left
[23:52] *** molaf_ joined
[23:53] *** molaf left
[23:58] *** jferrero left
[23:59] *** soh_cah_toa left
