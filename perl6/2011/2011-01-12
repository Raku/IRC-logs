[00:04] *** GinoMan left
[00:05] *** envi joined
[00:05] <jnthn> sleep &

[00:05] *** plobsing joined
[00:05] *** GinoMan joined
[00:09] *** mikehh joined
[00:11] *** patrick[BROWSING joined
[00:12] <patrick[BROWSING> hello

[00:13] <patrick[BROWSING> I've just installed the new Rakudo star and first ran it with perl6 --version and got an error, is that one already known?

[00:14] <sorear> We can't answer that without knowing the error you got.

[00:15] <patrick[BROWSING> Null PMC access in get_bool()

[00:15] <sorear> How did you install the new Rakudo star?

[00:16] <patrick[BROWSING> perl Configure.pl --gen-parrot && make && make install

[00:17] <patrick[BROWSING> before that, I downloaded it from github and untared it

[00:19] * sorear is not familiar with this one, but doesn't follow Rakudo* too closely

[00:19] <patrick[BROWSING> it's not a big problem though, perl6 itself seems to work, but “perl6 --version” was the first run I did 

[00:19] <sorear> ha

[00:20] <dalek> niecza: b0be6ab | sorear++ | v6/ (3 files):

[00:20] <dalek> niecza: [v6] Fix shadowing of postcircumfix operators

[00:20] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b0be6ababb

[00:31] *** nymacro joined
[00:36] *** shi left
[00:38] *** ashleydev left
[00:42] *** carlos left
[00:43] *** risou joined
[00:53] *** envi left
[00:58] *** plobsing left
[01:00] *** GinoMan left
[01:01] <snarkyboojum> patrick[BROWSING: I can reproduce the error - looks like a bug

[01:06] *** plobsing joined
[01:07] *** QinGW joined
[01:12] *** patrick[BROWSING left
[01:15] *** plobsing left
[01:16] *** arlinius joined
[01:19] *** risou left
[01:25] <dalek> niecza: 8f7f9e8 | sorear++ | v6/harness:

[01:25] <dalek> niecza: [v6] Fix parsing of @_ placeholder

[01:25] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8f7f9e8b54

[01:25] <dalek> niecza: aa7ce49 | sorear++ | v6/harness:

[01:25] <dalek> niecza: [v6] Fix method not found in RxOp::Subrule.clone

[01:25] <dalek> niecza: review: https://github.com/sorear/niecza/commit/aa7ce499f7

[01:25] <dalek> niecza: d4cf9df | sorear++ | v6/harness:

[01:25] <dalek> niecza: [v6] Fix regex_infix parsing

[01:25] <dalek> niecza: review: https://github.com/sorear/niecza/commit/d4cf9dfbc2

[01:47] *** plobsing joined
[02:00] *** cafesofie left
[02:00] *** noganex_ joined
[02:03] *** noganex left
[02:13] *** ashleydev joined
[02:20] *** Chillance left
[02:29] *** helv joined
[02:29] *** helv is now known as helv12

[02:31] *** gbacon joined
[02:35] *** cafesofie joined
[02:38] *** nakashiman joined
[02:39] *** masonkramer joined
[02:43] *** molaf_ joined
[02:44] *** molaf left
[02:46] *** cafesofie left
[02:57] *** nakashiman left
[02:59] *** nakashiman joined
[03:00] *** cafesofie joined
[03:11] *** cafesofie left
[03:13] *** masonkramer left
[03:20] *** nakashiman left
[03:22] *** nakashiman joined
[03:23] *** nakashiman left
[03:36] <dalek> sprixel: dd8aa4e | diakopter++ | sprixel/ (7 files):

[03:36] <dalek> sprixel: lots & lots of mono vs .net behavior sync'ing fixes, wrt SRE madness. :)

[03:36] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/dd8aa4ec73

[03:38] *** cafesofie joined
[03:45] *** ashleydev left
[03:47] *** s1n left
[03:57] *** am0c^ left
[04:06] *** HarryS left
[04:09] *** HarryS joined
[04:13] *** flatwhatson_ left
[04:13] *** ashleydev joined
[04:15] <snarkyboojum> description of the bug affecting --version for Rakudo Star distributions, and a little patch - https://gist.github.com/775688

[04:16] *** orafu left
[04:17] *** orafu joined
[04:17] <snarkyboojum> raised by patrick[BROWSING earlier today

[04:20] *** s1n joined
[04:26] *** nadim left
[04:26] *** Su-Shee left
[04:28] *** cafesofie left
[04:28] *** Su-Shee joined
[04:35] *** ponbiki left
[04:40] *** gbacon left
[04:41] *** agentzh joined
[04:45] *** ponbiki joined
[04:48] *** orafu left
[04:49] *** orafu joined
[05:04] *** sjn left
[05:06] *** sjn joined
[05:06] *** cotto joined
[05:12] <dalek> niecza: 1b79755 | sorear++ | v6/ (6 files):

[05:12] <dalek> niecza: [v6] mergeback

[05:12] <dalek> niecza: review: https://github.com/sorear/niecza/commit/1b79755094

[05:12] <dalek> niecza: 28f62bc | sorear++ | v6/harness:

[05:12] <dalek> niecza: [v6] Fix adverb parsing

[05:12] <dalek> niecza: review: https://github.com/sorear/niecza/commit/28f62bccbb

[05:24] *** agentzh left
[05:39] *** estrabd left
[05:42] *** agentzh joined
[06:09] <dalek> sprixel: 0c25ee5 | diakopter++ | / (10 files):

[06:09] <dalek> sprixel: fix parsing of static fields, properties (on type literals, essentially)

[06:09] <dalek> sprixel: fix handling of them in runsharp & the compiler.

[06:09] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/0c25ee5c33

[06:14] *** cjk101010 joined
[06:23] *** hatseflats left
[06:38] *** cafesofie joined
[06:39] *** nymacro left
[06:45] *** rgrau left
[06:46] *** agentzh left
[06:47] *** dayangkun joined
[06:50] *** ashleydev left
[06:52] *** wtw joined
[06:55] *** sjn left
[06:59] *** typepeter joined
[06:59] *** kaare_ joined
[07:04] *** agentzh joined
[07:20] *** mberends left
[07:21] *** am0c joined
[07:23] *** hatseflats joined
[07:30] *** Bzek joined
[07:31] *** IllvilJa left
[07:38] <moritz_> http://www.perlmonks.org/?node_id=881785 another thread where I couldn't resist providing a Perl 6 answer :-)

[07:39] *** flatwhatson joined
[07:39] <dalek> rakudo: 9b8bad7 | snarkyboojum++ | src/Perl6/Compiler.pir:

[07:39] <dalek> rakudo: Parrot revision for --version fix

[07:39] <dalek> rakudo: 

[07:39] <dalek> rakudo: Check to see that the Parrot rev is available before trying to use it.

[07:39] <dalek> rakudo: 

[07:39] <dalek> rakudo: Signed-off-by: Moritz Lenz [email@hidden.address]
[07:39] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/9b8bad79fb

[07:41] *** Bzek left
[07:42] *** woosley joined
[07:50] <snarkyboojum> moritz_: cheers

[07:50] <moritz_> snarkyboojum: thank you for the patch

[07:51] <moritz_> snarkyboojum: I meant to write basically the same patch after the 2010.11 release, but forgot :-)

[07:51] <snarkyboojum> will "fix" the --version issue for Rakudo Star next release

[07:51] <snarkyboojum> moritz_: ah :)

[08:00] *** stepnem left
[08:05] <sorear> bizarre... managed to break A::B::C but not A::B

[08:27] *** _twitch joined
[08:32] *** QinGW1 joined
[08:33] *** QinGW left
[08:37] *** stepnem joined
[08:44] *** justatheory left
[08:46] *** kaare_ left
[08:46] *** kensanata joined
[08:46] *** kaare__ joined
[08:47] *** f00li5h joined
[08:50] *** kaare__ left
[08:54] *** _twitch left
[08:59] *** jerome joined
[09:00] *** mberends joined
[09:04] <tadzik> snarkyboojum: that's what I did

[09:04] <phenny> tadzik: 11 Jan 22:55Z <snarkyboojum> tell tadzik so in that case it might be worth moving your commands to --<command> switches? a la cpanm etc

[09:06] <snarkyboojum> tadzik: cool

[09:06] <tadzik> I was writing the USAGE looking at the cpanm --help

[09:07] <snarkyboojum> tadzik: in that case, I have a feature request :) .. --info switch or similar to just return info about a particular module

[09:09] <snarkyboojum> tadzik: e.g. the source of the module

[09:09] *** daxim joined
[09:09] <snarkyboojum> tadzik: not the source code, but where the module came from praps e.g. github url.. I don't know :)

[09:10] *** am0c left
[09:10] *** nadim joined
[09:10] *** mberends left
[09:11] <tadzik> snarkyboojum: awesome idea, well volunteered!

[09:11] <snarkyboojum> tadzik: I was going to just give you a patch, but wanted to wait until you had changed the command line args stuff :)

[09:12] <sorear> tadzik: what sorts of features does neutro need of the implementation?

[09:12] <tadzik> bah, META.info has no author

[09:12] <tadzik> sorear: I check it on niecza from time to time, let me see

[09:12] <tadzik> oh, file operations definitely

[09:12] <tadzik> and it's not dependency-free, so JSON, File::Tools and Module::Tools

[09:13] <tadzik> snarkyboojum: the args stuff was fixed yesterday

[09:13] <sorear> also, I beleive you meant to say "baile"

[09:13] <tadzik> (in the branch of course)

[09:13] <tadzik> probably, I'm not even A1 in Spanish :)

[09:13] <sorear> calling a function bailar is like calling it to_dance

[09:13] <sorear> A1?

[09:13] <tadzik> yeah, that's right

[09:14] *** kaare_ joined
[09:14] <tadzik> there is this scale on learning languages, A1, A2, B1, B2, C1, C2

[09:14] * sorear is not competent in the language by any means

[09:14] <tadzik> B2~C1 is what native speakers speak, iirc

[09:14] <sorear> tadzik: I do not beleive that system is used in the US

[09:14] <tadzik> maybe

[09:14] <sorear> so I have no experience with it

[09:16] <tadzik> have you heard of this FCE thingy?

[09:17] <tadzik> that's B2, so sort of "the basic understand and usage of the language". A1, which I'm not at yet, is like "I can understand basic sentences from the topics I know and say something in easy words about the topics I know"

[09:17] <tadzik> iirc

[09:18] *** masak joined
[09:18] <tadzik> sorear: http://pastie.org/1451570

[09:22] <masak> morning, zebras.

[09:22] <tadzik> morning masak

[09:22] *** holzbit joined
[09:23] *** dayangkun left
[09:24] *** dayangkun joined
[09:25] <sorear> hi masak.

[09:27] <tadzik> snarkyboojum: https://github.com/tadzik/neutro/issues#issue/2 :)

[09:27] *** fhelmberger joined
[09:27] <snarkyboojum> tadzik: I like :)

[09:27] *** fhelmberger left
[09:28] <tadzik> bbl, gotta go

[09:28] *** fhelmberger joined
[09:41] <snarkyboojum> tadzik: there ya go - https://gist.github.com/775944 :D

[09:47] *** dayangkun left
[09:48] *** ekki joined
[09:49] *** ekki left
[09:51] <snarkyboojum> tadzik: Feel free to clean up or throw away entirely :D https://gist.github.com/775953

[09:59] *** noganex_ is now known as noganex

[10:02] *** QinGW1 left
[10:08] *** dakkar joined
[10:13] *** woosley left
[10:25] <masak> std: my Int sub foo(--> Bool) returns Str { ... }

[10:25] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Extra 'of' type; already declared as type Int at /tmp/ckDRYuSFdy line 1:␤------> my Int sub foo(--> Bool⏏) returns Str { ... }␤Extra 'of' type; already declared as type Bool at /tmp/ckDRYuSFdy line 1:␤------> my Int sub

[10:25] <p6eval> ..foo(-->…

[10:26] <masak> :)

[10:26] <masak> std: my Int sub foo() returns Str { ... }

[10:26] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Extra 'of' type; already declared as type Int at /tmp/W3pBx0dUzU line 1:␤------> my Int sub foo() returns Str ⏏{ ... }␤Check failed␤FAILED 00:01 120m␤»

[10:26] <masak> there's no fooling STD.

[10:26] <moritz_> TimToady++

[10:27] <moritz_> there are areas where STD is quite thorough

[10:36] <tadzik> snarkyboojum: I'd go for @args».&install unless $info; !$info looks a bit like $!info, but nice patch

[10:36] <snarkyboojum> tadzik: good-o :)

[10:37] <snarkyboojum> tadzik: want me to send you another patch then?

[10:37] <tadzik> snarkyboojum: if you wish :) I'm on a discrete maths classes now anyways :)

[10:37] <snarkyboojum> tadzik: nps

[10:45] <masak> rakudo: my &r := &return; sub f { my sub return($v) { say "LOL!"; &r($v) }; return 42 }; say f

[10:45] <p6eval> rakudo 9b8bad: OUTPUT«LOL!␤42␤»

[10:45] *** tzhs joined
[10:45] <masak> rakudo: my &r := &return; sub f { my sub return($v) { say "LOL!"; &r($v + 10) }; return 42 }; say f

[10:45] <p6eval> rakudo 9b8bad: OUTPUT«LOL!␤52␤»

[10:46] <masak> wow! that *works*!

[10:46] <masak> moritz_! :D

[10:46] <masak> moritz_: I have a workaround for one of your RT tickets.

[10:46] * masak adds it to that ticket

[10:46] <moritz_> masak: I have too. I just name the new return differently :-)

[10:47] <masak> now you don't have to :)

[10:47] <moritz_> masak: fwiw my workaround in the submission for p4 :-)

[10:49] <masak> right. haven't looked at it yet. will soon, hopefully today.

[10:50] <moritz_> it's used for reverting the coordinate transformation that I do interenally to get rid of the cyclic boundary conditions

[10:55] *** dip joined
[11:02] <dalek> niecza: 6c3d380 | sorear++ | / (2 files):

[11:02] <dalek> niecza: [v6] More misc fixes

[11:02] <dalek> niecza: review: https://github.com/sorear/niecza/commit/6c3d3809e2

[11:02] <dalek> niecza: a21bc67 | sorear++ | v6/ (3 files):

[11:02] <dalek> niecza: [v6] More random fixes - first 674 tests pass

[11:02] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a21bc67cf7

[11:05] <sorear> delightful, my *-currying tests are broken

[11:06] <sorear> ok (* + 5)(2) == 7 # This means ok -> $a { ($a + 5)(2) == 7 }, and blocks are true

[11:06] <moritz_> you shouldn't curry code invocation :-)

[11:08] <mux> so that's how perl6 allows currying

[11:08] <masak> mux: there's also .assume

[11:09] <moritz_> .assuming iirc

[11:09] <sorear> * is mostly just for operators

[11:10] <sorear> although I've used *.&defined in a couple evil places in niecza-v6 :>

[11:10] <mux> so, * for left and right sections, and .assuming for partial application

[11:10] <mux> (that shouldn't be called currying actually)

[11:10] <masak> right, .assuming

[11:10] * mux googles .assuming

[11:10] <sorear> "left and right sections"... I know where YOU came from

[11:11] * mux hides :-)

[11:11] <masak> it's ok, we like lambdapeople.

[11:11] <mux> heh, I like that name: "whatever-star"

[11:11] <masak> mux: and I might be a bit confused about what currying really is, still, so maybe .assuming doesn't count, no.

[11:12] * moritz_ thinks it does

[11:12] * sorear wonders if mux remembers me

[11:12] *** cognominal_ joined
[11:12] <mux> mmmm, your nickname clearly rings a bell, but I can't say more

[11:13] <dalek> niecza: 6e17857 | sorear++ | v6/harness:

[11:13] <dalek> niecza: [v6] Fix whatever-star currying

[11:13] <dalek> niecza: review: https://github.com/sorear/niecza/commit/6e178570f8

[11:13] <sorear> wtf. "all tests successful"

[11:13] <sorear> ah well, best be happy.

[11:13] <moritz_> just means you don't have enough tests :-)

[11:14] * sorear -> sleep, tomorrow will see if niecza-v6 can compile itself

[11:14] <mux> sorear: please tell me when I met you already, I feel bad about it

[11:14] <moritz_> sorear: you can also exclude smart-matching and binding from whatever currying

[11:14] <sorear> mux: I was pretty active in #haskell ca. 2007

[11:14] <mux> sorear: aaaah. okay :)

[11:15] <mux> have a good night

[11:16] <tadzik> snarkyboojum: writing a patch?

[11:16] <snarkyboojum> tadzik: have done.. will generate it

[11:20] <tadzik> cool

[11:21] <snarkyboojum> tadzik: doh - don't know how to squash the two commits into one patch, and don't have time to learn atm :D

[11:23] *** typepeter left
[11:24] <moritz_> git rebase -i HEAD~3

[11:24] <moritz_> then change the last line to "s $commit_id"

[11:24] <moritz_> save and exit

[11:26] <snarkyboojum> moritz_: the last line?

[11:26] <moritz_> snarkyboojum: you will be offered a file with commits in your favorite $EDITOR

[11:27] <snarkyboojum> moritz_: gotcha I think - and what do you mean by "s $commit_id"

[11:27] <moritz_> snarkyboojum: do it, you'll see

[11:27] <moritz_> the lines are of the form <command> <commit_id>

[11:27] <moritz_> just change the command to s

[11:30] <snarkyboojum> ha - I stuffed it up I think - oh well

[11:30] <snarkyboojum> I "just tried it" before you explained ;)

[11:33] <snarkyboojum> moritz_: ooh - but fixed it, and it worked! thanks

[11:34] <moritz_> \o/

[11:34] <moritz_> you're welcome

[11:34] <snarkyboojum> git rebase --abort let me start again it seemed

[11:34] <moritz_> it does

[11:34] <snarkyboojum> nifty!

[11:35] <snarkyboojum> tadzik: and so after all of that, I have the same patch as before with 3 characters different :P https://gist.github.com/775953

[11:40] *** am0c joined
[11:45] <tadzik> snarkyboojum: applied, thanks!

[11:45] <snarkyboojum> tadzik: w00t - welcome

[11:52] *** IllvilJa joined
[11:56] *** mj41 joined
[12:00] <masak> tadzik: I've now read http://ttjjss.wordpress.com/2011/01/08/perl-6-module-ecosystem-%E2%80%93-news-and-ideas/

[12:00] <masak> tadzik: kudos.

[12:01] <masak> I really like how the ecosystem evolves bit by bit like this. it's very different now from when proto got started two years ago.

[12:01] * jnthn wonders if Neutro will one day win the Peace Prize too. :)

[12:04] <tadzik> Peace Prize?

[12:04] <tadzik> ah :)

[12:05] <tadzik> maybe, like proto evolved into pls, neutro will evolve into noble :)

[12:06] <tadzik> masak: today I realised I forgot to add an author field to META.info :)

[12:07] <tadzik> so, what would you say for merging the neutro branch, pulling tadzik/ecosystem into perl6/ecosystem and adjusting modules.perl6.org in, say, a few days?

[12:08] *** redicaps joined
[12:08] <tadzik> the only blocker is the module authors, there are still too many important modules in the old format

[12:09] *** agentzh left
[12:11] *** gimix left
[12:16] *** xinming left
[12:16] *** xinming joined
[12:27] *** holzbit left
[12:33] *** cafesofie left
[12:36] *** coldhead left
[12:36] *** coldhead joined
[12:42] <moritz_> .u ♥

[12:42] <phenny> U+2665 BLACK HEART SUIT (♥)

[12:46] <daxim> p6eval,  my $f = sub ($n) { return 1 if $n < 2; return $n * $?SUB.($n - 1); }; $f(6).say;

[12:47] <daxim> perl6,  my $f = sub ($n) { return 1 if $n < 2; return $n * $?SUB.($n - 1); }; $f(6).say;

[12:48] <daxim> DWIM for FSM's sake!

[12:48] <daxim> perl6:  my $f = sub ($n) { return 1 if $n < 2; return $n * $?SUB.($n - 1); }; $f(6).say;

[12:48] <p6eval> rakudo 9b8bad: OUTPUT«===SORRY!===␤Symbol '$?SUB' not predeclared in <anonymous> (/tmp/3A0pFR5V1b:22)␤»

[12:48] <p6eval> ..pugs: OUTPUT«*** No such subroutine: "$?SUB"␤    at /tmp/GaSi9TN0Kr line 1, column 47-66␤»

[12:48] <p6eval> ..niecza v1-138-g6e17857: OUTPUT«Potential difficulties:␤  Unrecognized variable: $?SUB at /tmp/3OvXXMoGse line 1:␤------>  { return 1 if $n < 2; return $n * $?SUB⏏.($n - 1); }; $f(6).say;␤␤Unhandled Exception: System.Exception: Unable to find lexical $?SUB in ANON␤  at

[12:48] <p6eval> ..Niecza.CLRBackend.NamProc…

[12:49] <takadonet> morning all

[12:57] <colomon> tadzik: couldn't you use deps.proto to make a fake META.info if a real META.info is not available?

[12:58] <colomon> tadzik: just as a stop gap?

[13:06] *** envi joined
[13:06] *** estrabd joined
[13:08] *** am0c left
[13:11] <tadzik> colomon: that's a bit complicated. If there's no META.info registered in the ecosystem, the installer does not know what/were the memory is

[13:12] <tadzik> but it should be possible to write a class faking the META.info if not present, as a stop

[13:12] *** gbacon joined
[13:12] <tadzik> but I'm afraid that'll result in some of the old modules never being fixed

[13:12] <tadzik> unless we set some deadline

[13:17] *** icwiener left
[13:18] *** coldhead left
[13:19] <daxim> oooo funky  http://p3rl.org/Whatever

[13:20] *** icwiener joined
[13:20] *** icwiener left
[13:21] *** MayDaniel joined
[13:26] *** Fuad joined
[13:26] <Fuad> hi

[13:27] <takadonet> Fuad: hey

[13:31] *** Fuad left
[13:31] *** Fuad joined
[13:36] <daxim> perl6: <In des Waldes tiefsten Gründen ist kein Räuber mehr zu finden.>.sort.say

[13:36] <p6eval> pugs: OUTPUT«decodeUTF8': bad data: '\252'␤decodeUTF8': bad data: '\228'␤GrÃ¼ndenInRÃ¤uberWaldesdesfinden.istkeinmehrtiefstenzu␤»

[13:36] <p6eval> ..rakudo 9b8bad: OUTPUT«GründenInRäuberWaldesdesfinden.istkeinmehrtiefstenzu␤»

[13:36] <p6eval> ..niecza v1-138-g6e17857: OUTPUT«Gründen In Räuber Waldes des finden. ist kein mehr tiefsten zu␤»

[13:37] <daxim> perl6: <In des Waldes tiefsten Gründen ist kein Räuber mehr zu finden.>.sort(*.chars <=> *.chars).say

[13:37] <p6eval> pugs: OUTPUT«decodeUTF8': bad data: '\252'␤decodeUTF8': bad data: '\228'␤0GrÃ¼ndenInRÃ¤uberWaldesdesfinden.istkeinmehrtiefstenzu␤»

[13:37] <p6eval> ..niecza v1-138-g6e17857: OUTPUT«␤Unhandled Exception: System.Exception: Unable to find lexical &infix:<<=>> in ANON␤  at Niecza.CLRBackend.NamProcessor.ResolveLex (System.String name, System.Int32& uplevel, Boolean core) [0x00000] in <filename unknown>:0 ␤  at

[13:37] <p6eval> ..Niecza.CLRBackend.NamProcessor.RawAccessLex (System.S…

[13:37] <p6eval> ..rakudo 9b8bad: OUTPUT«InzudesistkeinmehrWaldesRäuberGründenfinden.tiefsten␤»

[13:37] <Fuad> Im looking for PERL gaming bots

[13:37] <daxim> rakudo wins

[13:37] <Fuad> i have made one

[13:37] <Fuad> idleRPG bot on perl

[13:37] <Fuad> is there any other perl gaming bots ?

[13:38] <Fuad> perl is great

[13:38] *** MayDaniel left
[13:38] *** ashleydev joined
[13:43] *** ashleydev left
[13:53] <Fuad> masak

[13:55] *** simon_ joined
[14:01] *** lurker joined
[14:01] *** lurker is now known as lurkftw

[14:01] *** lurkftw is now known as lurkingnoob

[14:02] <lurkingnoob> Fuad: there's openkore =)

[14:03] <tadzik> oh, I know how to handle this

[14:03] <tadzik> I can create a module shelter, with a META.info for each orphaned module, with additional "note" : "ORPHANED"

[14:03] <tadzik> So if someone wants to continue work, he/she can adopt his/her module back

[14:04] <daxim> what sort of format is .info?

[14:05] <tadzik> json, actually

[14:05] <tadzik> if that's what you mean

[14:05] *** Fuad left
[14:05] <daxim> they why isn't it named so?

[14:06] <tadzik> hrm

[14:06] <tadzik> for I stole it from S22

[14:06] <daxim> aha

[14:06] <tadzik> where it's said to be YAML

[14:06] *** lurkingnoob left
[14:06] <tadzik> META.info is more general, it won't look stupid if one day we'll change json to something else

[14:09] <daxim> I'll teach you data design because we do not have a proper librarian here, that would be a job for one.

[14:09] <tadzik> hm?

[14:09] <daxim> note is signifying nothing, a hollow key where all the meaning is in the value ORPHANED

[14:10] <tadzik> warnings?

[14:10] <tadzik> gotchas? :)

[14:10] <daxim> no

[14:10] <tadzik> or we can put ORPHANED in the description, then it'll show up on the listing

[14:10] <daxim> invent a key that is self-explaining, like:  adopted-status: orphaned

[14:10] <daxim> lack of that key would imply the default value "actively maintained"

[14:11] *** mj41 left
[14:11] *** plobsing left
[14:12] <daxim> adding metadata into a name/description is right out.  that's the same stupid mistake as tieing the file type to the name as "extension", and we have been suffering from this the last 20, 30 years

[14:13] *** IllvilJa left
[14:14] <daxim> since that key name I just made up is not standardised in a spec, it is customary to prefix it with  x-

[14:16] <tadzik> daxim: adding ORPHANED to the description has this good side, that users will clearly see the state and module author will get ashamed

[14:16] <tadzik> and that's what I'd really like to achieve.

[14:16] <tadzik> Generally, putting metadata in name/description is stupid, I agree

[14:17] <daxim> that responsibility does not belong in the data, but in the toolchain.  whatever web page displays it can put a big fat warning in red and blink when it sees that value

[14:17] <takadonet> tadzik: speaking about being ashamed... you forgot to add one of my modules up there to your META list!

[14:17] <tadzik> :O

[14:17] * tadzik is ashamed

[14:17] <tadzik> takadonet: wanna commit bit, Justin Case?

[14:18] <takadonet> https://github.com/Takadonet/Text-Tabs-Wrap/raw/master/META.info

[14:18] <takadonet> if i get one... then I have no excuse!

[14:18] <tadzik> my git diff is non-empty :( I have no excuse!

[14:18] * tadzik pushes

[14:19] <tadzik> ee, ETOORESTRICTIVEFIREWALL

[14:19] <tadzik> oh wait, it worked

[14:19] <tadzik> ahh, pushing is via ssh

[14:21] <tadzik> daxim: if I were about to redesign META.info now, I'd probably add some field as you say. But with the possibilities that are there now, description is imho the best place to use

[14:21] <takadonet> thanks!

[14:22] <daxim> well, it's wrong.  I can't keep you from doing it

[14:24] *** mj41 joined
[14:25] <takadonet> mj41: welcome back

[14:25] *** hanekomu joined
[14:32] *** bluescreen joined
[14:32] *** bluescreen is now known as Guest91158

[14:34] <tadzik> daxim: it's temporary, and it's the most effective thing I can work out w/o adjusting the toolchain

[14:36] <tadzik> https://github.com/tadzik/ecosystem/tree/master/SHELTER -- the "still not there" modules

[14:37] <takadonet> shit! forgot to add bioperl6 META.info file....

[14:40] <tadzik> it works! \o/

[14:40] <cognominal_> In Grammar.pm, I see    rule param_sep { $<sep>=[','|':'|';;'|';'] { @*seps.push($<sep>) }}

[14:41] *** envi left
[14:41] <cognominal_> I can't remember what the ';' separator is used for

[14:41] <takadonet> tadzik: what works?

[14:41] <tadzik> takadonet: what works?

[14:41] <tadzik> ah

[14:41] <tadzik> takadonet: creating a shelter

[14:42] <tadzik> it magically makes module maintainer remember about the changes :)

[14:42] <cognominal_> Also in Actions.pm, I don't see that case handler in the signature method

[14:42] <cognominal_> *handled

[14:44] <PerlJam> cognominal_: Assuming I've got the right context, the semicolon is for multiple dimensions

[14:45] <cognominal_> PerlJam, what is the relationship with a parameter separator?

[14:46] <cognominal_> Is that some kind of pattern matching?

[14:48] *** mtk joined
[14:54] <PerlJam> Hmm.

[14:58] <PerlJam> aha!

[14:58] <PerlJam> cognominal_: See S12:1215

[14:59] *** kaare_ left
[15:01] *** takadonet left
[15:02] *** takadonet joined
[15:02] <PerlJam> I wonder if Rakudo implements that since the whole paragraph is conjectural

[15:03] <cognominal_> PerlJam++  # so it is parsed but not yet handled

[15:05] <PerlJam> After reading that paragraph 3 times that usage of semicolon still seems bizarre

[15:07] <cognominal_> Indded, It does not seem to involve parameter separators

[15:08] *** plainhao joined
[15:10] <PerlJam> The fact that the paragraph itself questions whether or not there is a use-case for it makes me think YAGNI and perhaps the paragraph could be shortened to "semicolon is treated as comma"

[15:10] <PerlJam> (and moved to S06)

[15:10] *** amkrankruleuen joined
[15:12] *** alester joined
[15:13] *** am0c joined
[15:23] *** matthias_ joined
[15:23] *** MayDaniel joined
[15:24] <takadonet> bioperl6 is not an ORPHAN !

[15:24] <masak> tadzik: re author field. it feels like you, to some extent, are duplicating data that originally resides in the module tags inside the .pm files

[15:29] *** GinoMan joined
[15:31] *** risou joined
[15:32] *** hanekomu left
[15:33] *** hanekomu joined
[15:36] *** redicaps left
[15:40] *** zby_home_ joined
[15:41] *** hercynium joined
[15:42] *** wtw left
[15:42] <matthias_> rakudo: my %h.=push( a => 1 );

[15:43] <p6eval> rakudo 9b8bad: OUTPUT«Odd number of elements found where hash expected␤  in '!STORE' at line 5210:CORE.setting␤  in main program body at line 22:/tmp/wAoYz1IeN8␤»

[15:43] <matthias_> rakudo: my %h.=push('a' => 1);

[15:43] <p6eval> rakudo 9b8bad: OUTPUT«Odd number of elements found where hash expected␤  in '!STORE' at line 5210:CORE.setting␤  in main program body at line 22:/tmp/cTQzVbcRKH␤»

[15:43] <matthias_> rakudo: my %h = %h.push('a' => 1);

[15:43] <p6eval> rakudo 9b8bad: OUTPUT«Odd number of elements found where hash expected␤  in '!STORE' at line 5210:CORE.setting␤  in main program body at line 22:/tmp/Gd1guQMCAu␤»

[15:44] <matthias_> rakudo: my %h; %h.push('a' => 1); say %h.perl;

[15:44] <p6eval> rakudo 9b8bad: OUTPUT«{"a" => 1}␤»

[15:45] *** plobsing joined
[15:46] *** holzbit joined
[15:47] <PerlJam> I guess Hash.push doesn't return the hash

[15:48] <colomon> rakudo: my %h; say %h.push('a' => 1).perl;

[15:48] <p6eval> rakudo 9b8bad: OUTPUT«Any␤»

[15:48] <matthias_> hm.. But maybe there is a general way to avoid "empty declarations"?

[15:49] *** Patterner left
[15:49] <colomon> rakudo: my %h = 'b' => 2; say %h.push('a' => 1).perl;

[15:49] <p6eval> rakudo 9b8bad: OUTPUT«Any␤»

[15:49] <colomon> rakudo: my @h = 'b'; say @h.push('a').perl;

[15:49] <p6eval> rakudo 9b8bad: OUTPUT«["b", "a"]␤»

[15:49] <matthias_> I would like to be able to use the declared variable right away in its initialization :)

[15:49] <PerlJam> The spec says it should return the hash.  That seems like it should be LHF

[15:49] <colomon> indeed.

[15:50] <matthias_> cool :)

[15:50] <PerlJam> matthias_: you can and you did :)

[15:50] <colomon> though I really don't see the point in using " the declared variable right away in its initialization" -- at least like this?

[15:51] <colomon> I mean, why not initialize it directly, rather than trying to push to it during initialization?

[15:51] *** Psyche^ joined
[15:51] *** Psyche^ is now known as Patterner

[15:51] <matthias_> I just find it annoying to write my X; X = ... in several situations :)

[15:52] <colomon> but you can say my X = ...

[15:52] <matthias_> yeah but it fails if I want to use the variable on the rhs

[15:52] <PerlJam> rakudo: my %h = 'a' => 1;  say %h.perl;

[15:52] <p6eval> rakudo 9b8bad: OUTPUT«{"a" => 1}␤»

[15:53] <PerlJam> matthias_: it failed for reasons totally unrelated to being able to use the var as soon as it is declared.

[15:54] <masak> diakopter: I'm not fully backlogged yet, but... three days ago you asked about non-self private attribute access. sorear answered $obj!attr. my impression is that sorear's proposed syntax only concerns private method calls, not private attributes, and that in Perl 6, objects are so opaque that not even non-self objects of the same class can see self's private attributes.

[15:54] <matthias_> perljam: I meant: I want to be able to use the variable on the rhs of the assignment: my %h = %h.push(); for example fails

[15:55] <PerlJam> matthias_: no, it works just fine except that Hash.push doesn't return the hash for assignment.

[15:55] <colomon> matthias_: but how is that construct in any way an improvement of my %h = whatever you were going to push?

[15:55] <PerlJam> :)

[15:55] <matthias_> oh!

[15:55] <matthias_> you're right, mea culpa :)

[15:56] <colomon> I can imagine complicated lazy constructs where you might want to use a variable in its own definition, but those won't work with = anyway.  :)

[15:56] <matthias_> colomon: I thought push() has special semantics, so it creates arrays where keys appear multiple times

[15:57] *** exodist is now known as Exodist

[15:57] <colomon> matthias_: hmmm...

[15:57] *** simon_ left
[15:57] <colomon> rakudo: my %h = 'a' => 10, 'a' => 20; say %h.perl

[15:57] <p6eval> rakudo 9b8bad: OUTPUT«{"a" => 20}␤»

[15:58] *** plainhao left
[15:58] <PerlJam> colomon: He's correct AFAIK

[15:58] <colomon> yup.

[15:58] *** plainhao joined
[15:58] *** plainhao left
[15:59] <matthias_> other constructs I thought about are  my $x; $x = ... while unsuitable($x);  which would be cool to write as  my $x = ... while unsuitable($x)  though I understand that the while-condition probably doesn't know about the $x that I want to initialize :)

[15:59] <colomon> so I guess that is a potential use for my %h .=push(...).  huh.  learn something every day!

[16:00] <colomon> I've got a whistle lesson now, but if no one else has it when I'm done, it's trivially easy to make Hash.push return self.

[16:00] <PerlJam> colomon: I'm adding a test for it now and I'll implement it

[16:00] <colomon> PerlJam++

[16:06] <dalek> roast: 77ad197 | duff++ | S32-hash/push.t:

[16:06] <dalek> roast: [push.t] Hash.push should return a Hash

[16:06] <dalek> roast: review: https://github.com/perl6/roast/commit/77ad1979dc

[16:07] <PerlJam> My computer is überslow this morning for some reason

[16:07] *** pyrimidine left
[16:07] *** pyrimidine joined
[16:07] <pyrimidine> takadonet++ # updates to bioperl6

[16:07] *** justatheory joined
[16:11] <dalek> rakudo: 8681daf | perlpilot++ | src/core/Hash.pm:

[16:11] <dalek> rakudo: Make Hash.push return the hash

[16:11] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/8681daf304

[16:12] <masak> rakudo: my @a = 1, 2, 3; say (@a.push: 4, 5).perl

[16:12] <p6eval> rakudo 9b8bad: OUTPUT«[1, 2, 3, 4, 5]␤»

[16:12] <masak> PerlJam++ # consistency

[16:12] <PerlJam> Has the rakudo build time gotten slower lately and I've only noticed today?

[16:13] <matthias_> thank you very much PerlJam++ :) Now I'm gonna send masak my solutions but p4, which I still have to solve (I think it is akin to the "paper strip game" (euler project)...)

[16:13] *** matthias_ left
[16:14] *** Guest91158 left
[16:14] <tadzik> masak: hmm, right

[16:17] *** lamstyle left
[16:18] <tadzik> takadonet: commit bit given

[16:21] *** lamstyle joined
[16:25] *** risou_ joined
[16:27] *** hanekomu left
[16:27] *** ashleydev joined
[16:28] *** risou left
[16:41] <masak> rakudo: my @a = "def".comb; my %h.=push( @a Z 0..* )

[16:41] <p6eval> rakudo 8681da:  ( no output )

[16:41] <masak> rakudo: my @a = "def".comb; my %h.=push( @a Z 0..* ); say %h.perl

[16:41] <p6eval> rakudo 8681da: OUTPUT«{}␤»

[16:42] <masak> ah -- that's the change that just went in. :)

[16:42] <masak> (was wondering why matthias_++ solution didn't work locally)

[16:42] * masak rebuilds Rakudo

[16:46] *** kaare_ joined
[16:59] *** am0c left
[17:02] *** MayDaniel left
[17:03] * colomon has become unhealthily obsessed with p4

[17:04] <masak> the scope of any such obsession is limited to the next three or so days.

[17:04] <arnsholt> ^_^

[17:04] <arnsholt> Indeed

[17:04] <masak> send in submissions, people! :)

[17:04] <arnsholt> I'll probably submit soon

[17:04] <arnsholt> Just need to finish my p4 solution

[17:05] *** kensanata left
[17:05] <masak> it's also possible to submit solutions one at a time.

[17:05] <arnsholt> True, true

[17:05] <arnsholt> And submit several times

[17:05] <arnsholt> But it has to be PERFECT!

[17:05] <arnsholt> *ahem* =)

[17:06] <masak> std: True, true

[17:06] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Undeclared routine:␤ 'true' used at line 1␤Check failed␤FAILED 00:01 120m␤»

[17:06] <masak> std: True, so

[17:06] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Prefix requires an argument at /tmp/4XxL5YuMgT line 1 (EOF):␤------> True, so⏏<EOL>␤Parse failed␤FAILED 00:01 120m␤»

[17:06] <masak> std: so True

[17:06] <arnsholt> std: so True

[17:06] <p6eval> std 625303c: OUTPUT«ok 00:01 118m␤»

[17:06] <masak> :)

[17:06] <arnsholt> Indeed

[17:06] <tadzik> wow

[17:07] <arnsholt> Perl poetry won't go out of fashion with Perl 6, evidently =D

[17:07] <moritz_> so True

[17:07] <moritz_> :-)

[17:07] <arnsholt> =D

[17:09] <masak> rakudo: sub exclaim { say $^thing.uc, '!!!' }; exclaim 'bam'

[17:09] <p6eval> rakudo 8681da: OUTPUT«BAM!!!␤»

[17:09] * masak is easily amused

[17:10] *** Guest91158 joined
[17:11] <tadzik> rakudo: sub exclaim { say $^thing.uc, '!!!' }; exclaim 'bam', 'bam'

[17:11] <p6eval> rakudo 8681da: OUTPUT«Too many positional parameters passed; got 2 but expected 1␤  in 'exclaim' at line 1:/tmp/qqs8aOdXQa␤  in main program body at line 22:/tmp/qqs8aOdXQa␤»

[17:12] <masak> tadzik: if you want slurp behavior, you have to use an explicit signature, I think.

[17:12] <tadzik> rakudo: sub exclaim { say @^nother_thing.join.uc, '!!!' }; exclaim 'bam', 'bam'

[17:12] <p6eval> rakudo 8681da: OUTPUT«Nominal type check failed for parameter '@nother_thing'; expected Positional but got Str instead␤  in 'exclaim' at line 1:/tmp/OpKgeM83_M␤  in main program body at line 22:/tmp/OpKgeM83_M␤»

[17:12] <tadzik> hmmm

[17:12] <tadzik> rakudo: sub exclaim { say *@^nother_thing.join.uc, '!!!' }; exclaim 'bam', 'bam'

[17:12] <p6eval> rakudo 8681da: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 22␤»

[17:12] <tadzik> bah

[17:13] <tadzik> rakudo: sub exclaim { say @_.join.uc, '!!!' }; exclaim 'bam', 'bam'

[17:13] <moritz_> you can't to self-declared slurpies

[17:13] <p6eval> rakudo 8681da: OUTPUT«BAMBAM!!!␤»

[17:13] <masak> tadzik: what I said.

[17:13] <tadzik> yeah, was just looking for a funky way

[17:13] *** cdarroch joined
[17:13] *** cdarroch left
[17:13] *** cdarroch joined
[17:15] <flussence> std: ????? ... ZZZZZZZZZZZZZZZ... (...).WHAT !!!!!

[17:15] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Ternary !! seems to be missing its ?? at /tmp/eM7FvnkqsF line 1:␤------> ??? ... ZZZZZZZZZZZZZZZ... (...).WHAT !!⏏!!!␤Undeclared name:␤   'ZZZZZZZZZZZZZZZ' used at line 1␤Parse failed␤FAILED 00:01 121m␤»

[17:15] <moritz_> rakudo: sub exclaim { say @^nother_thing.join.uc, '!!!' }; exclaim ['bam', 'bam']

[17:15] <p6eval> rakudo 8681da: OUTPUT«BAMBAM!!!␤»

[17:15] <flussence> :( works in rakudo.

[17:16] <moritz_> ternary parsing in rakudo is not very robust

[17:16] <flussence> std seems to be matching ?? instead of ??? first

[17:16] <moritz_> std: 1 ?? 2, 3 !! 4

[17:16] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Precedence of , is too loose to use between ?? and !!; please use parens around inner expression at /tmp/tsjBC6zJi6 line 1:␤------> 1 ?? 2,⏏ 3 !! 4␤Parse failed␤FAILED 00:01 119m␤»

[17:16] <moritz_> rakudo: 1 ?? 2, 3 !! 4

[17:16] <p6eval> rakudo 8681da: OUTPUT«===SORRY!===␤Confused at line 22, near "1 ?? 2, 3 "␤»

[17:16] <flussence> wait, not ???

[17:16] <moritz_> we should start a list with LTA parsing error messages

[17:16] <flussence> std: ??? ?? ... ZZZZZZZZZZZZZZZ... (...).WHAT !! !!!

[17:16] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Expecting a term, but found either infix ?? or redundant prefix ?␤  (to suppress this message, please use space between ? ?) at /tmp/3FG__aflxY line 1:␤------> ??? ??⏏ ... ZZZZZZZZZZZZZZZ... (...).WHAT !! !!␤Parse failed␤FAILED

[17:16] <p6eval> ..00:0…

[17:17] <moritz_> ??? can take an argument

[17:17] <flussence> oh.

[17:17] <moritz_> rakudo: say (???).()

[17:17] <p6eval> rakudo 8681da: OUTPUT«Stub code executed  in <anon> at line 22:/tmp/bw_vRGNWJa␤Null PMC access in invoke()␤  in main program body at line 22:/tmp/bw_vRGNWJa␤»

[17:17] <moritz_> rakudo: say (??? 'foo').()

[17:17] <p6eval> rakudo 8681da: OUTPUT«Stub code executed  in <anon> at line 22:/tmp/hNVzi4cmgO␤Null PMC access in invoke()␤  in main program body at line 22:/tmp/hNVzi4cmgO␤»

[17:17] <moritz_> and rakudo ignores it

[17:19] <TimToady> rakudo: 'Feel free to clean up or throw away entirely'.trans('up' => 'away', 'away' => 'up').say; # known bug?

[17:19] <p6eval> rakudo 8681da: OUTPUT«Feel free to cleun aw or throp upup entirelp␤»

[17:19] *** sasha joined
[17:20] <TimToady> I thought someone put LTMish semantics into trans

[17:20] <masak> yeah, I thought so too.

[17:20] <flussence> rakudo: 'Feel free to clean up or throw away entirely'.subst('up' => 'away', 'away' => 'up').say; # does this one work?

[17:20] <masak> TimToady: don't you have to put those in arrays?

[17:20] <p6eval> rakudo 8681da: OUTPUT«Feel free to clean up or throw away entirely␤»

[17:20] <flussence> aw.

[17:21] <masak> rakudo: 'Feel free to clean up or throw away entirely'.trans(['up', 'away'] => ['away', 'up']).say

[17:21] <p6eval> rakudo 8681da: OUTPUT«Feel free to clean away or throw up entirely␤»

[17:21] <masak> \o/

[17:22] <masak> TimToady: you just need to know the API, that's all :)

[17:22] <TimToady> DWIM!!!

[17:22] <masak> TimToady: you could always improve S05 if you want.

[17:22] <masak> TimToady: I've always felt there's something slightly wanting in just that area...

[17:22] <TimToady> if I always do one think I can never do something else

[17:23] <TimToady> *thing

[17:24] *** plobsing left
[17:24] <masak> the Pauli exclusion principle of Things People Do :)

[17:25] * TimToady is uncertain whether it's exclusive

[17:27] *** holzbit left
[17:27] <masak> rakudo: s:g/ /a/

[17:27] <p6eval> rakudo 8681da: OUTPUT«Method 'subst' not found for invocant of class ''␤  in main program body at line 22:/tmp/k5CBubyVvk␤»

[17:27] <masak> rakudo: my $_ = 'foo'; s:g/ /a/; say 'alive'

[17:27] <p6eval> rakudo 8681da: OUTPUT«===SORRY!===␤Redeclaration of symbol $_ at line 22, near " = 'foo'; "␤»

[17:27] <masak> er.

[17:27] <masak> rakudo: $_ = 'foo'; s:g/ /a/; say 'alive'

[17:27] <p6eval> rakudo 8681da: OUTPUT«alive␤»

[17:27] <masak> std: $_ = 'foo'; s:g/ /a/

[17:27] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Null pattern not allowed at /tmp/Lk7KnyYPsM line 1:␤------> $_ = 'foo'; s:g/ ⏏/a/␤    expecting quantifier␤Parse failed␤FAILED 00:01 122m␤»

[17:28] * masak submits rakudobug

[17:28] *** holzbit joined
[17:28] <tadzik> rakudo: say $_.perl

[17:28] <p6eval> rakudo 8681da: OUTPUT«Any␤»

[17:28] <tadzik> rakudo: $_ = 'foo'; s:g/ /a/; say $_.perl

[17:28] <p6eval> rakudo 8681da: OUTPUT«"afaoaoa"␤»

[17:29] <TimToady> it's doing s:g/ '' /a/ as we noted the other day

[17:29] *** cjk101010 left
[17:29] *** risou_ left
[17:30] *** us874 joined
[17:31] <masak> yes, I just backlogged over that one.

[17:32] <masak> what it's doing rather than failing isn't really that interesting. it should just fail, at parse time.

[17:34] *** justatheory left
[17:34] *** dakkar left
[17:36] *** plobsing joined
[17:40] *** risou joined
[17:45] *** nadim left
[17:45] <jnthn> rakudo: //

[17:45] <p6eval> rakudo 8681da: OUTPUT«===SORRY!===␤Null regex not allowed at line 22, near ""␤»

[17:45] <jnthn> rakudo: / /

[17:45] <p6eval> rakudo 8681da: OUTPUT«===SORRY!===␤Null regex not allowed at line 22, near ""␤»

[17:45] <jnthn> hm.

[17:45] <masak> right, it's only s///

[17:46] *** nadim joined
[17:47] *** plainhao joined
[17:49] *** tibzloh joined
[17:50] *** holzbit left
[17:51] <tadzik> rakudo: my $one = "name"; my $reg = eval "regex { \$<$one>=[ .+ ] }"; say 'alive' # how do I do this?

[17:51] <p6eval> rakudo 8681da: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 22␤»

[17:52] <masak> tadzik: remember that {} interpolates in ""

[17:52] <masak> tadzik: so probably start by escaping them.

[17:53] <tadzik> oh, right

[17:53] <tadzik> masak: that helped, thanks

[17:53] <TimToady> there oughta be a way to do it without eval

[17:53] <arnsholt> It makes me a bit sad that the UI code for my p4 solution will probably be more complicated than my AI code =)

[17:54] <TimToady> you just need to develop artificial users now

[17:54] <tadzik> TimToady: any idea how?

[18:06] *** Guest91158 left
[18:08] <pmichaud> good afternoon, #perl6

[18:08] <TimToady> o/

[18:08] <pmichaud> we create artificial users all of the time.  Those are the ones that know how to debug their programs without us providing useful error diagnostics.

[18:08] <jnthn> o/ pmichaud 

[18:09] <colomon> \o

[18:10] <TimToady> std: regex { $($/{'foo'}) = [ .* ] }

[18:10] <p6eval> std 625303c: OUTPUT«ok 00:01 122m␤»

[18:10] <masak> pmichaud! \o/

[18:11] <TimToady> std: regex { ( .* ) { $/{'foo'} = $0 }

[18:11] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Regex not terminated at /tmp/1p9E3j1LH5 line 1 (EOF):␤------> regex { ( .* ) { $/{'foo'} = $0 }⏏<EOL>␤    expecting quantifier␤Parse failed␤FAILED 00:01 123m␤»

[18:11] <TimToady> std: regex { ( .* ) { $/{'foo'} = $0 } }

[18:11] <p6eval> std 625303c: OUTPUT«ok 00:01 123m␤»

[18:11] *** tzhs left
[18:11] <TimToady> something like that

[18:12] <tadzik> ah, cute

[18:12] <tadzik> much better, thanks TimToady 

[18:12] <TimToady> that's assuming $/ is mutable, of course

[18:12] <TimToady> and ends up in the final Match object

[18:12] *** sasha left
[18:13] <TimToady> STD currently tends to do that sort of stuff with assignment to $¢<name> though supposedly the cursor is immutable

[18:13] <masak> it feels odd to think of $/ as containing something other than a Match object during parsing.

[18:14] *** justatheory joined
[18:14] <pmichaud> I thought $/ contained the partially completed match object (or the state of the match as of that point in the regex)

[18:15] <pmichaud> (haven't read backscroll, btw)

[18:16] <TimToady> it's a funny thing to deal with in a match engine where cursors are supposedly immutable; the block has to manufactur a new cursor from the final value of the $/ after the block is called

[18:16] <TimToady> STD is basically cheating on immutability by assigning directly into a cursor

[18:17] <pmichaud> nqp-rx cheats a fair bit on cursors also, although to the external world they appear immutable

[18:18] <TimToady> one almost wishes for versioned immutable objects

[18:19] <TimToady> but that's probably more overhead for small objects than simply copying

[18:21] <TimToady> a sufficiently ropey string implementation might usually provide immutable strings as versioned mappings to ropes

[18:22] *** plobsing left
[18:23] <TimToady> s/usually/usefully/

[18:25] <sorear> good * #perl6

[18:25] <sorear> pmichaud: why does rakudo do the $/.from > $/.to thing?

[18:26] <sorear> niecza's cursors are quite immutable... when porting STD, lines like $¢.<onlystar> = 1 were one of the biggest issues

[18:27] <sorear> to get things to work I added a slightly ad-hoc extension

[18:27] <sorear> niecza: "" ~~ / $<x> = {2 + 2} /; say $/.<x>

[18:27] <p6eval> niecza v1-138-g6e17857: OUTPUT«4␤»

[18:28] <pmichaud> sorear: left over from PGE, I suspect

[18:28] <pmichaud> it was just an easy way to indicate a failed match

[18:28] <sorear> niecza has mutable cursoroids deep inside, but they're never exposed to user code; $/ in a regex block is a Cursor created as a snapshot

[18:29] *** plobsing joined
[18:29] <TimToady> sorear: that's cute, but maybe we should have sugar to do that inside a block

[18:29] <TimToady> s/sugar/API/

[18:31] * TimToady thinks about the viability of $¢.=meth

[18:32] *** us874 left
[18:32] <sorear> masak: As I understand it, $!attribute actually means $( self!attribute ).

[18:32] * TimToady now thinks about the general question of whether $foo .= meth guarantees that $foo.WHICH is invariant

[18:33] *** gbacon left
[18:33] <sorear> it can't.  consider my $foo = "HI"; $foo .= flip

[18:33] <colomon> huh.  I thought it was important that it didn't.

[18:33] <sorear> unless you want to allow "HI" === "IH"

[18:34] <TimToady> but @foo.=method stays the same WHICH

[18:34] <TimToady> doesn't it?

[18:34] <TimToady> well, maybe just as a normal optimization

[18:34] <TimToady> I don't suppose it's guaranteed either

[18:35] <colomon> @foo.=grep certainly doesn't...

[18:35] <TimToady> right

[18:35] <TimToady> I guess if we define .= in terms of assignment, there's no such invariant

[18:35] <masak> sorear: but self!attribute would be a method call, and S12 *specifically* says that private attributes are slots/storage locations, not accessed by methods.

[18:36] * masak thinks it probably should be defined by assignment

[18:38] <diakopter> TimToady: I'd be grateful for a comment on masak's comment at 09:54 CST today

[18:38] <TimToady> so that argues for a $¢.=push( x => 2+2 ) inside regex blocks

[18:38] <TimToady> or some such

[18:39] <TimToady> diakopter: I run my irssi in PST :P

[18:39] * TimToady is still backlogging in any case

[18:39] <diakopter> oh..

[18:40] <masak> diakopter: what's that in UTC?

[18:41] <PerlJam> UTC++

[18:41] <diakopter> I dunno; it's your thought about access to private attributes & methods to objects other than self (but of the same class as self), in methods of a given class

[18:41] <TimToady> http://irclog.perlgeek.de/perl6/2011-01-12#i_3179322

[18:41] <PerlJam> (I'm in CST, but I run my irssi in UTC so I have the same problem as everyone else ... what time was that?)

[18:42] <diakopter> 2.8 hours ago

[18:42] <masak> diakopter: I'm surprised that sorear was the one bringing this up; I generally feel his metamodel and mine are fairly close when it comes to Perl 6 OO.

[18:42] <pmichaud> 9:54 CST = 15:54 UTC

[18:42] <TimToady> I don't think private attributes are that opaque; a class hopefully can trust itself

[18:42] <pmichaud> = 7:54 PST

[18:42] <masak> pmichaud++

[18:43] * pmichaud keeps three clocks in his head.

[18:43] <pmichaud> and yes, my irssi runs in UTC :)

[18:43] <PerlJam> pmichaud: because a man with 2 clocks nevers knows what time it it? :)

[18:43] <diakopter> masak: sorear was the one bringing this up?

[18:43] <masak> TimToady: is S12 specific about that? what's the syntax for private attribute access out of self?

[18:43] <TimToady> but it might need to use the trusted syntax, not the self syntax, to get at another object's privates...er...

[18:43] <pmichaud> this question has come up several times before

[18:43] <pmichaud> looking :)

[18:43] <masak> afk

[18:44] <pmichaud> https://github.com/perl6/mu/blob/master/misc/pm.txt#L76

[18:45] * diakopter tries to figure out where r28932 is

[18:45] <pmichaud> it's in S12, iirc

[18:46] <TimToady> also, note that all of these private accessors are really just function calls into the underlying repr; there's no dispatch going on here

[18:46] <TimToady> so yes, these "accessors" are just ways of naming slots and controlling access via the "trusts" mechanism

[18:47] <PerlJam> S12:1319

[18:48] <diakopter> sorry for the question, whose answer I'm sure I knew/read before... there's no __PACKAGE__ alias/macro?

[18:48] *** molaf_ left
[18:48] <moritz_> diakopter: 09a7b9b266e3ab13c6ec30ae02ff02a5e7c338e1 in specs repo

[18:49] <PerlJam> diakopter: there's $?PACKAGE

[18:49] <TimToady> diakopter: grep is your friend

[18:49] <PerlJam> s/grep/ack/

[18:49] <TimToady> in this case grep works find because it's in a top-level pod :)

[18:49] <TimToady> *fine

[18:50] <diakopter> moritz_: thanks :)

[18:50] <PerlJam> except that I find I don't use grep anymore  :)

[18:50] <PerlJam> (as I'm almost always looking through directory trees)

[18:50] <TimToady> well, to be sure, I actually use my own ack-ish program that I wrote long ago

[18:51] <TimToady> which I called "dgrep"

[18:51] <sorear> self!attribute doesn't really do dispatch either; in particular it can always be inlined (something I plan to do soonish)

[18:51] <sorear> you don't even need gradual typing

[18:51] <TimToady> I was including that notation in my remarks

[18:51] *** risou left
[18:51] <TimToady> but it is good to make that explicit :)

[18:52] *** gbacon joined
[18:52] <diakopter> std: class A { has $!attr; method foo { my $obj = A.new(); say($obj!$?PACKAGE.attr()) } }; say A.new.foo

[18:52] <p6eval> std 625303c: OUTPUT«ok 00:01 122m␤»

[18:53] <diakopter> rakudo: class A { has $!attr; method foo { my $obj = A.new(); say($obj!$?PACKAGE.attr()) } }; say A.new.foo

[18:53] <p6eval> rakudo 8681da: OUTPUT«===SORRY!===␤Symbol '$?PACKAGE' not predeclared in foo (/tmp/Xo5w5R_VKn:22)␤»

[18:53] <TimToady> how does that parse in STD!?!

[18:53] <diakopter> niecza: class A { has $!attr; method foo { my $obj = A.new(); say($obj!$?PACKAGE.attr()) } }; say A.new.foo

[18:54] <p6eval> niecza v1-138-g6e17857: OUTPUT«␤Unhandled Exception: System.Exception: Unable to find lexical $?PACKAGE in A.foo␤  at Niecza.CLRBackend.NamProcessor.ResolveLex (System.String name, System.Int32& uplevel, Boolean core) [0x00000] in <filename unknown>:0 ␤  at

[18:54] <p6eval> ..Niecza.CLRBackend.NamProcessor.RawAccessLex (System.Str…

[18:54] <PerlJam> TimToady: perhaps you have an infix:<!> somewhere

[18:54] <sorear> that syntax is absurd

[18:55] * diakopter agrees with sorear

[18:55] <TimToady> $obj!TrustsMe::slot is the normal syntax, iirc

[18:55] <PerlJam> std: class A { has $!attr; method foo { my $obj = A.new(); say($obj!"$?PACKAGE".attr()) } }; say A.new.foo  # just checking

[18:55] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Unsupported use of . to concatenate strings or to call a quoted method; in Perl 6 please use ~ to concatenate, or if you meant to call a quoted method, please supply the required parentheses at /tmp/onwtXso80q line 1:␤------>  my $obj =

[18:55] <p6eval> ..A.new(); …

[18:55] <diakopter> pm's note says there's a .

[18:56] <TimToady> we could, perhaps, make $obj!slot assume the current class, but only if I've had enough coffee, which I haven't.

[18:56] <diakopter> oh wait.

[18:56] <diakopter> I'm blind

[18:57] * diakopter would be ephemerally grateful

[18:57] <TimToady> well, a day is a significan period of time

[18:57] <sorear> $obj!"$?PACKAGE".attr means ($obj!"$?PACKAGE").attr

[18:57] <PerlJam> oh, precedence.

[18:57] <sorear> I think you meant $obj!"{$?PACKAGE}::attr", but I'm not convinced that should work

[18:57] <diakopter> sorear: I see now; I got the . wrong; it shoulda been ::

[18:58] <sorear> $obj!$?PACKAGE::attr is right out though

[18:58] <sorear> package names need to be barewords, period

[18:59] <TimToady> it would be a bit of a burden to support symbolic refs on slot names, but the "my class" special case can probably be sugared

[18:59] *** Guest91158 joined
[19:00] <diakopter> std: 2!"$a"

[19:00] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Variable $a is not predeclared at /tmp/2IjT356sUZ line 1:␤------> 2!"$a⏏"␤Unsupported use of . to concatenate strings or to call a quoted method; in Perl 6 please use ~ to concatenate, or if you meant to call a quoted method,

[19:00] <p6eval> ..please…

[19:00] <TimToady> then method new could do $obj!slot = if it wanted to

[19:00] <diakopter> Unsupported use of . to concatenate strings or to call a quoted method?

[19:01] <TimToady> hmm, probably assuming there was a . there

[19:01] <TimToady> when there was a !

[19:01] <diakopter> wants the sugar

[19:01] * diakopter 

[19:03] <TimToady> std: $obj!meth

[19:03] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Variable $obj is not predeclared at /tmp/jILbgRc1os line 1:␤------> $obj⏏!meth␤Check failed␤FAILED 00:01 118m␤»

[19:03] <TimToady> std: my $obj; $obj!meth

[19:03] <p6eval> std 625303c: OUTPUT«ok 00:01 119m␤»

[19:03] <TimToady> the sugar's already there, you just have to semanticalize it

[19:05] <sorear> niecza: class Foo { has $.bar = 7; method x { say self!"b{"a"}r" } }; Foo.new.x

[19:05] <p6eval> niecza v1-138-g6e17857: OUTPUT«===SORRY!===␤Unsupported use of . to concatenate strings or to call a quoted method; in Perl 6 please use ~ to concatenate, or if you meant to call a quoted method, please supply the required parentheses at /tmp/BhRosImVmt line 1:␤------> $.bar

[19:05] <p6eval> ..= 7; method x …

[19:05] <TimToady> we should probably carp at CHECK time if meth isn't a known method in the current class, since it probably indicates an attempt to cross a class boundary

[19:05] <TimToady> niecza: class Foo { has $.bar = 7; method x { say self!"b{"a"}r"() } }; Foo.new.x

[19:05] <p6eval> niecza v1-138-g6e17857: OUTPUT«7␤»

[19:06] <TimToady> if lookbehinds worked we could check for . there I guess

[19:07] <TimToady> the error is a bit LTA as it stands

[19:08] <TimToady> but the concat warning is going to be crucial for recovering P5 programmers, so we can't just take it out

[19:09] <arnsholt> "recovering P5 programmers" ^_^

[19:09] <TimToady> we have this 12,000 step program, you see

[19:10] <TimToady> niecza: my $a = "a"; class Foo { has $.bar = 7; method x { say self!"b{$a}r"() } }; Foo.new.x

[19:11] <p6eval> niecza v1-138-g6e17857: OUTPUT«7␤»

[19:11] <TimToady> sorear++

[19:12] *** KatrinaTheLamia joined
[19:12] <TimToady> niecza: my $a = "ee"; class Foo { has $.bar = 7; method x { say self!"b{$a}r"() } }; Foo.new.x

[19:12] <p6eval> niecza v1-138-g6e17857: OUTPUT«Unhandled exception: System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.␤  at System.Collections.Generic.Dictionary`2[System.String,Niecza.IP6].get_Item (System.String key) [0x00000] in <filename unknown>:0 ␤  at

[19:12] <p6eval> ..Niecza.DynMetaObject.Ge…

[19:13] <TimToady> ooh, explosive hash, should probably be classified as a munition

[19:14] * TimToady despises the modern tendency to use exceptions to indicate expected conditions

[19:15] <TimToady> I'm looking at you, Python

[19:15] *** mberends joined
[19:20] *** daxim left
[19:24] *** kulp joined
[19:27] <diakopter> but... return exceptions?

[19:27] *** ashleydev left
[19:27] *** plobsing left
[19:28] <PerlJam> Everything you do is exceptional!  Who cares if you came in 53rd in a race with 55 people?  You get a trophy anyway!

[19:28] *** fhelmberger left
[19:29] *** plobsing joined
[19:30] <TimToady> return exceptions are an exception :P

[19:30] <dalek> niecza: dc92b63 | sorear++ | / (5 files):

[19:30] <dalek> niecza: [v6] Improve timing display, translate NieczaBackendClisp

[19:30] <dalek> niecza: review: https://github.com/sorear/niecza/commit/dc92b63004

[19:30] <TimToady> exceptions are great for figuring out how far to unwind the call chain

[19:30] <TimToady> they're not great for returning an "oopsie" value

[19:32] *** koushi joined
[19:32] *** koushi left
[19:32] *** koushi joined
[19:33] <TimToady> "We're sorry, that flight is completely booked.  We will now shoot you."

[19:33] <TimToady> "and everyone else standing in line"

[19:34] <TimToady> "at every counter"

[19:34] <PerlJam> TimToady: Careful ... you might give the TSA some ideas.

[19:34] <TimToady> if they haven't had that idea up till now, I have no hope for them

[19:35] *** kulp left
[19:35] *** koushi is now known as kulp

[19:35] <TimToady> anyway, excptions are one of the biggest hammers out there that make parallel processing look like a thumb

[19:36] *** Guest91158 left
[19:37] *** Guest91158 joined
[19:49] *** plobsing left
[19:59] <TimToady> phone

[20:00] *** tibzloh left
[20:03] *** holzbit joined
[20:09] *** tylerni7 left
[20:12] *** plobsing joined
[20:18] * PerlJam really wishes that "Python is better than Perl 6" post wouldn't continue to get "air time" on the Internet.

[20:18] <tadzik> this post is hell stupid

[20:18] <flussence> if it was really better, they wouldn't need to try and force the point so much ;)

[20:21] <PerlJam> though the #5 thing in that post makes me think the Perl community (including Perl 5) needs to spend a little time making and marketing "perl distributions".  But I think Perl 6 will have to lead the way in that endeavor.

[20:21] <tadzik> chromatic_x Funny thing is, #perl 6 shipped in Fedora *before* Python 3 did

[20:21] <tadzik> (twitter)

[20:22] <perigrin> Perl 6 lead/can lead the way in a lot of endevours marketting wise.

[20:23] <perigrin> er 'will lead/can lead'

[20:24] *** tylerni7 joined
[20:24] *** tylerni7 left
[20:26] *** justatheory left
[20:27] *** mikehh left
[20:28] *** tibzloh joined
[20:28] *** holzbit left
[20:28] *** ashleydev joined
[20:33] *** tibzloh left
[20:33] *** holzbit joined
[20:33] *** jaldhar left
[20:34] *** KatrinaTheLamia left
[20:37] *** tibzloh joined
[20:38] *** jaldhar joined
[20:40] <sorear> hmm.  Is there anything I can do in exchange for the return of the minutes?

[20:40] <sorear> re. phone

[20:40] *** edenc left
[20:40] *** edenc joined
[20:41] *** holzbit left
[20:50] *** shortcircuit joined
[20:52] *** Layla_91 joined
[21:03] <sorear> hello Layla_91

[21:06] <tadzik> seen Eric_Clapton

[21:06] <aloha> Eric_Clapton was last seen in #perl6 4 days 1 hours ago saying "you knocked me on my knees!".

[21:07] <Layla_91> helo all.. am here just to watch :) who is Eric_Clapton? ..... :S

[21:07] <tadzik> :D

[21:07] <tadzik> this fella singing about some Layla lady

[21:08] <tadzik> Layla_91: wrote some nice Perl 6 recently?

[21:08] <Layla_91> tadzik: I am preparing to go to the UK for a couple of RHCA exams.. so was a little busy.. :(

[21:09] <tadzik> RHCA?

[21:09] <dalek> niecza: 7905557 | sorear++ | v6/harness:

[21:09] <dalek> niecza: [v6] Fix :$foo parsing

[21:09] <dalek> niecza: review: https://github.com/sorear/niecza/commit/79055572b6

[21:10] <Layla_91> tadzik: red hat certified architect.. 

[21:10] <tadzik> oh, cool

[21:12] <Layla_91> tadzik: I hope so.. I actually want to become a programmer.. but some sysadmin knowledge is ok :)

[21:12] <tadzik> a certificate is a nice thing too

[21:14] <Layla_91> tadzik: Yeah.. one more thing to hang on the wall :D Did certificates have good use for you? 

[21:15] *** plobsing left
[21:15] <TimToady> my brother-in-law once told me that my sysadmin job was a dead end, but that's how we got Perl :)

[21:16] <Layla_91> TimToady: are you really larry wall?!!!!!! :-S

[21:16] <tadzik> :D

[21:16] <TimToady> some days I am

[21:16] *** molaf joined
[21:16] <flussence> he's (larry wall).Str on here

[21:16] <moritz_> he's rather .Stringy in here :-)

[21:17] <TimToady> the rest of the time I just pretend to be Larry Wall by making up witticisms

[21:17] *** shortcircuit left
[21:18] *** shortcircuit joined
[21:18] <sorear> if $name !~~ /::/ { # This bug was just fixed in niecza.  I wonder if it should have warned.

[21:18] <tadzik> Layla_91: well, the only certificate I have is a CAE, and the use it have was giving me the highest grade from English classes on the Uni w/o a need to say a word in English :)

[21:19] *** tibzloh left
[21:19] <TimToady> sorear: was it trying to match /'::'/ ?

[21:19] <sorear> TimToady: it was supposed to, yes

[21:20] <sorear> but it actually matches more like /''/

[21:20] <TimToady> was it originally a m:p5/::/  ?

[21:20] <sorear> yes

[21:20] *** holzbit joined
[21:20] <TimToady> well, it is legal, I think

[21:20] <TimToady> it says if LTM matches nothing else, match ''

[21:21] <TimToady> though if we treated it more like a conjunction, we'd get an error

[21:21] <TimToady> std: /|/

[21:21] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Null pattern not allowed at /tmp/0P4oARCHjR line 1:␤------> /|⏏/␤Parse failed␤FAILED 00:01 117m␤»

[21:21] <TimToady> like that

[21:21] <Layla_91> tadzik: my english is terrible.. I hardly pass my english classes :D But I know Russian, Arabic, and Ukranian.. by the way I bought programming perl (3d ed).. to improve my perl and english skills :D

[21:22] <tadzik> Layla_91: where are you from?

[21:23] <Layla_91> tadzik: now or born in?

[21:23] <flussence> (your english is better than most people's russian, so we can't really complain :)

[21:23] *** holzbit left
[21:24] <tadzik> Layla_91: * :)

[21:24] <tadzik> rakudo: say *.WHAT

[21:24] <p6eval> rakudo 8681da: OUTPUT«Whatever()␤»

[21:24] <Layla_91> tadzik: :D

[21:24] <TimToady> niecza: say *.WHAT

[21:24] <p6eval> niecza v1-139-gdc92b63: OUTPUT«Sub()<instance>␤»

[21:24] <TimToady> hah

[21:25] *** plobsing joined
[21:25] <TimToady> niecza: say *.HOW

[21:26] <p6eval> niecza v1-139-gdc92b63: OUTPUT«Sub()<instance>␤»

[21:26] <Layla_91> flussence: Thanks, but you should hear me speaking English xD

[21:26] *** dual left
[21:27] <Layla_91> tadzik: currently in jordan (trace my IP :P) born in Russia.. lived in Israel, Turkey, Russia.. never been to the US.. you?

[21:27] <TimToady> niecza: say 42.HOW

[21:28] <p6eval> niecza v1-140-g7905557: OUTPUT«ClassHOW()<instance>␤»

[21:28] <TimToady> niecza: say (*.HOW)(42)

[21:28] <p6eval> niecza v1-140-g7905557: OUTPUT«Sub()<instance>␤»

[21:28] <TimToady> oopsie

[21:28] <diakopter> niecza: say .HOW

[21:28] <p6eval> niecza v1-140-g7905557: OUTPUT«===SORRY!===␤Can't call method "isa" on unblessed reference at /home/p6eval/niecza/src/Niecza/Actions.pm line 2306.␤Check failed␤»

[21:29] <diakopter> OO

[21:29] *** dual joined
[21:29] <tadzik> Layla_91: oh, interesting. Born in Poland, still there. Been there and around, never in USA too

[21:29] <TimToady> still using P5 underneath

[21:30] <sorear> TimToady: niecza does whatevercode currying on postfix operators, including postcircumfix:<( )>

[21:31] <sorear> moritz++ has hinted that I should probably excempt that operator

[21:31] <TimToady> perhaps

[21:31] <sorear> like how infix:<=> doesn't curry ever

[21:31] <diakopter> I wonder if irssi's tab completion can be extended to auto-add the ++

[21:31] <moritz_> diakopter: I'm pretty sure it can

[21:31] <TimToady> the uc ones are really supposed to be treated as macros

[21:31] <TimToady> so it's really a question of macro precedence

[21:32] <TimToady> also, .HOW desugars to something that can't be a straight method call

[21:32] <TimToady> since it has to supply the original object as 1st arg

[21:32] <sorear> it's not a straight method call

[21:32] <sorear> but it's still a curryable operator

[21:32] <TimToady> so it's really macro precedence

[21:33] <sorear> { $^a.HOW } makes sense

[21:33] <sorear> I am not familiar with this use of "prcedence"

[21:33] <TimToady> just as in "order of application"

[21:34] *** zby_home___ joined
[21:34] *** zby_home_ left
[21:35] <TimToady> rakudo is apparently do the .WHAT before it does the *.method transform, so it gets Whatever()

[21:35] <TimToady> this is a place where we'll have to thrash out inter-implementational issues

[21:36] <moritz_> rakudo cheats horribly :-)

[21:37] <TimToady> Larry the Ref: "In this corner we have Jnthn the Sturdy, and in that corner Sorear the Speedy."

[21:39] <PerlJam> .oO(Everyone's middle name is "the"!)

[21:39] <TimToady> niecza: say *i.WHAT

[21:39] <p6eval> niecza v1-140-g7905557: OUTPUT«␤Unhandled Exception: System.Exception: Unable to find lexical &postfix:<i> in ANON␤  at Niecza.CLRBackend.NamProcessor.ResolveLex (System.String name, System.Int32& uplevel, Boolean core) [0x00000] in <filename unknown>:0 ␤  at

[21:39] <p6eval> ..Niecza.CLRBackend.NamProcessor.RawAccessLex (System.S…

[21:40] <TimToady> rakudo: say *i.WHAT

[21:40] <p6eval> rakudo 8681da: OUTPUT«WhateverCode()␤»

[21:40] <diakopter> some people's first and last names are also "the"

[21:40] <TimToady> I have a jar that says "THE"

[21:40] <sorear> I should probably add a bunch of implementations of operators that just call die() so people don't get those backend failures

[21:41] <TimToady> yes, you should, especially if while doing that you decide it would be easier to implement them instead.  :)

[21:41] *** pmurias_ joined
[21:41] <sorear> since STD doesn't know how to sorry on unimplemented operators

[21:41] <sorear> hi pmurias_ 

[21:41] <pmurias_> sorear: hi

[21:42] *** justatheory joined
[21:42] <diakopter> at least it doesn't say "the first person singular linking/existential"

[21:42] *** pmurias_ is now known as pmurias

[21:42] <pmurias> sorear: how's the bootstrap

[21:42] <pmurias> ?

[21:42] <sorear> pmurias: v6-niecza passes all tests, although it's still choking on itself

[21:43] <diakopter> (the jar, I mean)

[21:43] <pmurias> tadzik: which city are you from?

[21:44] <TimToady> diakopter: "THE" is just French for "TEA", I'm led to believe

[21:44] <pmurias> sorear: that means the tests are too weak ;)

[21:44] <tadzik> pmurias: warsaw

[21:45] <diakopter> TimToady: oh; I thought it was claiming to be the definitive jar

[21:45] *** kulp left
[21:46] <pmurias> tadzik: i'm from zielona góra, but i study in wrocław

[21:46] *** kulp joined
[21:46] *** Guest91158 left
[21:46] *** kulp left
[21:46] <TimToady> P6 is really an AI in disguise, so not choking on itself is the *main* test.

[21:48] <tadzik> pmurias: are there PM groups there?

[21:48] <diakopter> does AI == Anteperfectus Infinitus ?

[21:49] <pmurias> tadzik: i don't think so

[21:49] <sorear> 13,311 total lines if you count my hacked version of STD.pm6.  I wonder if this is the largest Perl 6 program in existance.

[21:50] <diakopter> er,  Aeternus Imperfectus

[21:51] <pmurias> sorear: and withought STD.pm6?

[21:52] *** envi joined
[21:52] <colomon> hmmm... seems like it may be on the same scale as Rakudo's source?  though of course, some portion of that is nqp and some is pir.

[21:53] <moritz_> well, NQP *is* Perl 6... mostly :-)

[21:53] *** amkrankruleuen left
[21:53] <sorear> pmurias: 6399 fewer

[21:53] <moritz_> rakudo's src/core/*.pm is 6.9k lines

[21:53] *** Patterner left
[21:54] <moritz_> find src/ -name \*.pm | xargs wc -l

[21:54] <moritz_> => 22.4k 

[21:54] *** plobsing left
[21:54] <moritz_> wait, that counts src/gen/core.pm too

[21:55] <moritz_> so, minus 7.6k

[21:55] <moritz_> rakudo: say 22.4 - 7.6

[21:55] <p6eval> rakudo 8681da: OUTPUT«14.8␤»

[21:55] <moritz_> including grammar and action

[21:55] *** kaare_ left
[21:55] <Layla_91> * I wonder how draw the first picture of Camelia.. as a girl am sure it was a girl ^_^ much different than the camel image on my perl5 book :D

[21:56] *** Psyche^ joined
[21:56] *** Psyche^ is now known as Patterner

[21:56] <TimToady> er...

[21:56] <TimToady> or it was drawn by a guy who wanted to make Perl 6 more attractive to girls...

[21:57] <tadzik> TimToady: was that you? :)

[21:57] <Layla_91> TimToady: Oops :) I guess so :D

[21:57] <TimToady> looks like it worked, at least this time :D

[21:58] <TimToady> I have two daughters who are artists, so I kinda know how to fake it.  :)

[21:59] <Layla_91> TimToady: But you did a great job :) I really loved it :D there will be a p6 community of girls somday.. you will see B-)

[22:00] <TimToady> I hope so; I also hope you will stick around and help make it so, 'cause just a cartoon won't do it all by itself.  :)

[22:02] <Layla_91> I will.. :) 

[22:03] <Layla_91> dinner time! good night all :D

[22:03] <TimToady> o/

[22:03] *** Layla_91 left
[22:03] *** plobsing joined
[22:05] *** zby_home___ left
[22:12] *** vts joined
[22:13] *** kjeldahl left
[22:18] *** cafesofie joined
[22:21] *** Guest91158 joined
[22:23] *** vts left
[22:24] *** estrabd is now known as estrabd_afk

[22:27] <[Coke]> (every's middle name is the) - coke the curmudgeon?

[22:36] *** kulp joined
[22:39] *** mberends left
[22:42] *** crythias left
[22:45] <sorear> #p5p is talking about MAD being broken

[22:47] <snarkyboojum> 13,311 lines of Perl 6 in Niecza and 14,800 lines or Perl 6 in Rakudo - there's quite a bit of Perl 6 out there! :O

[22:47] <wolverian> whoa, that's a lot.

[22:47] <wolverian> I really really want to migrate already @ work to Perl 6... :)

[22:48] *** kulp left
[22:48] <pmurias>  /connect irc.perl.org

[22:49] <pmurias> sorry

[22:50] *** coldhead joined
[22:50] <pmurias> sorear: STD_P5 seems to be more promising for a translator

[22:53] *** alester left
[23:01] <diakopter> pmurias: if we can prod TimToady enough ;)

[23:09] <pmurias> most of work on STD_P5 doesn't require TimToady

[23:10] <pmurias> it's just changing rules to reflect Perl 5 instead of Perl 6

[23:10] *** stkowski joined
[23:13] *** rgrau joined
[23:14] *** KatrinaTheLamia joined
[23:18] *** Guest91158 left
[23:19] *** pmurias left
[23:21] *** KatrinaTheLamia left
[23:25] *** KatrinaTheLamia joined
[23:29] *** hercynium left
[23:32] *** plobsing left
[23:37] <sorear> std: /(<?before moo>)/

[23:37] <p6eval> std 625303c: OUTPUT«ok 00:01 120m␤»

[23:38] <sorear> this manages to not work in the niecza-compiled std

[23:38] <sorear> Unrecognized regex metacharacter >

[23:38] <sorear> but without the () it works fine

[23:40] *** IllvilJa joined
[23:42] <sorear> oh, hm, looking at the source it seems niecza is correct and viv isn't

[23:43] <sorear> TimToady: why does Regex.infixstopper use <?before '>'

[23:43] <sorear> TimToady: why does Regex.infixstopper use <?before '>' <-[ \> \) ]> > ?

[23:49] <colomon> rakudo: <A B C D>.reverse.say

[23:49] <p6eval> rakudo 8681da: OUTPUT«DCBA␤»

[23:50] <colomon> rakudo: sub swap-em(@a) { @a.map(-> $a, $b { $b, $a }).flat; } say swap-em(<A B C D>);

[23:50] <p6eval> rakudo 8681da: OUTPUT«===SORRY!===␤Confused at line 22, near "sub swap-e"␤»

[23:50] <colomon> rakudo: sub swap-em(@a) { @a.map(-> $a, $b { $b, $a }).flat; }; say swap-em(<A B C D>);

[23:51] <p6eval> rakudo 8681da: OUTPUT«BADC␤»

[23:51] <colomon> rakudo: sub swap-em(@a) { @a.map(-> $a, $b { $b, $a }).flat; }; say swap-em(<A B C D>).reverse; say swap-em(<A B C D>.reverse)

[23:51] <p6eval> rakudo 8681da: OUTPUT«CDAB␤CDAB␤»

[23:51] <TimToady> sorear: because >> and >) are valid tokens in their own right

[23:52] <TimToady> >> is a Texas »

[23:52] <TimToady> er, well, maybe it's really )>

[23:52] <TimToady> so dunno abou tthat one

[23:54] <TimToady> probably a bug

[23:55] <sjohnson> bugs are cute

[23:56] <TimToady> I will try a before/after with snaptest to see if anything shows up that I've forgotten

