[00:01] <colomon> Ack, he appears to have his own testing module.

[00:02] <colomon> oh, which he also sent me.

[00:03] <patrickas> Is there a reason why TheDamian doesn't release more all the crazy delicous stuff he has?

[00:03] <colomon> he wants to get it all right first, I think.

[00:03] *** yarrack_logging joined
[00:05] <masak> yarrack_logging: hi. are you a lumberjack?

[00:05] <patrickas> Oh! I wanted to retype a module of his from blurry screenshots of a video of a presentation :-) 

[00:06] <patrickas> I couldn't careless how all right it was

[00:06] <patrickas> I think it was "the computation in negative time" talk

[00:06] <colomon> I haven't seen that one.

[00:07] <sorear> is that anything like computation with supertasks?

[00:07] <colomon> I dunno, I can kind of understand why he wants to take his time.

[00:08] <colomon> But dang it, I want to use his modules.  Lots of us are writing Perl 6 now.

[00:09] *** felliott left
[00:11] <patrickas> sorear: I don't think so, iirc a bit more on the humorous side, but I seem to be unable to find the video again

[00:12] *** bacek joined
[00:13] <colomon> hm.

[00:13] <colomon> If I want to get these into ecosystem with minimal modifications, I need to tweak ufo.

[00:13] <colomon> But I'm currently using an obsolete hacked version of ufo locally.

[00:13] <colomon> Sigh.

[00:14] <patrickas> 'night all

[00:15] *** patrickas left
[00:16] <masak> why would ufo tweaks be needed?

[00:17] <tadzik> colomon: tweak module::tools :)

[00:17] <colomon> Well, for one thing, "prove" doesn't work on my machine the way it does in ufo.

[00:18] <colomon> tadzik: how is module::tools related?

[00:18] <tadzik> colomon: the mbuild tool is basically ufo w/o a make

[00:18] <colomon> you mean, it replaces make?

[00:19] <tadzik> sorta

[00:21] <colomon> masak: that's the local tweak.  The tweak we need for Damian's modules is to allow "lib6" as well as "lib".  (Unless you've already done that and my version is just behind.)

[00:23] <masak> colomon: no, but it sounds like a good addition.

[00:24] *** bacek left
[00:28] <colomon> oh, ack, not as easy as I was hoping.

[00:29] *** masonkramer left
[00:29] *** masonkramer joined
[00:30] *** aindilis left
[00:33] <colomon> rakudo: my $a = "lib6/Hello/Kitty.pm"; $a.subst(/^'lib(6?)/'/, ''); say $a

[00:33] <p6eval> rakudo a98c69: OUTPUT«lib6/Hello/Kitty.pm␤»

[00:33] <colomon> rakudo: my $a = "lib6/Hello/Kitty.pm"; $a.subst(/^'lib[6]?/'/, ''); say $a

[00:33] <p6eval> rakudo a98c69: OUTPUT«lib6/Hello/Kitty.pm␤»

[00:33] <colomon> rakudo: my $a = "lib6/Hello/Kitty.pm"; $a.subst(/^'lib"6"?/'/, ''); say $a

[00:33] <p6eval> rakudo a98c69: OUTPUT«lib6/Hello/Kitty.pm␤»

[00:34] <colomon> rakudo: my $a = "lib6/Hello/Kitty.pm"; $a.subst(/^"lib""6"?"/'/, ''); say $a

[00:34] <p6eval> rakudo a98c69: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 22␤»

[00:36] <lue> I'm starting to remember why I gave up before I started on GCC the first time...

[00:37] <colomon>     my %module-to-path = @modules Z=> @module-files;

[00:38] *** f00li5h joined
[00:45] <colomon> got it, I think.

[00:48] *** kanishka left
[00:57] *** qw3rty joined
[00:58] *** rgrau joined
[01:01] <colomon> tadzik: so, what's the module::tools

[01:01] <colomon> ?

[01:02] <masak> I just put my blogging software on github. it's 250 lines of Perl 6 code: https://github.com/masak/psyde/blob/master/psyde

[01:03] <masak> if anyone actually wants to deploy psyde, I have a .zip file where I actually pulled away the specific parts.

[01:04] <colomon> masak++

[01:04] <colomon> tadzik: found it.

[01:05] <masak> I'm currently porting Markdown to Niecza Perl 6. when that's done, my blog will be running pure Perl 6.

[01:05] * lue is interested

[01:05] <wolverian> heh. the required named param style looks kinda smalltalkish.

[01:05] * lue needs a website that can run Perl 6

[01:05] <masak> wolverian: that was the intent.

[01:06] <masak> wolverian: assuming you're talking about &nonexistent-or-older

[01:06] <masak> lue: I think I have your email address. I can send the .zip file over if you want.

[01:08] <lue> Sure. Only then I'd have to google "copy files to remote server through ssh" :)

[01:08] <lue> [alternatively, try compiling Rakudo again]

[01:08] <masak> lue: there's scp, which sounds like it does what you want.

[01:09] <colomon> tadzik: do I need to use ufo to install Module::Tools?  I'm confused here....

[01:09] <masak> oh, it's ggoebel++ who is already running a psyde instance. :)

[01:10] <lue> which bot lets me see the last time someone was on the channel?

[01:10] <wolverian> masak: yes.

[01:11] <masak> wolverian: that was directly inspired by the way Smalltalk does named param passing. I like it.

[01:11] <masak> buubot: seen lue?

[01:11] <buubot> masak: I don't think I've seen lue?.       

[01:11] <masak> buubot: seen lue

[01:11] <buubot> masak: I last saw lue saying "perlesque" at Sun May  9 02:27:52 2010 Z.       

[01:12] <masak> buubot: er.

[01:12] <buubot> masak: Couldn't match input.

[01:12] <lue> I'm pretty sure I've never had a reason to say perlesque, much less on 9 May.

[01:13] <wolverian> masak: can can you say :from [...] instead of :from[...]?

[01:13] <wolverian> or than, I forgot already what the name was. :)

[01:13] <lue> aloha: seen bkeeler

[01:13] <aloha> lue: Sorry, I haven't seen bkeeler.

[01:14] <lue> buubot: seen bkeeler

[01:14] <buubot> lue: I last saw bkeeler saying "bkeeler" at Tue Mar 30 23:58:23 2010 Z.       

[01:15] <masak> wolverian: no, that'd constitute a two-terms-in-a-row syntax error.

[01:15] <wolverian> ok.

[01:15] *** yarrack_logging left
[01:15] *** yarrack_logging joined
[01:15] <masak> std: :than\      ["OH HAI"]

[01:15] <p6eval> std 625303c: OUTPUT«ok 00:01 118m␤»

[01:16] <masak> that works, though.

[01:18] *** Fuld left
[01:21] * colomon 's momentum for messing around with other people's code tonight is pretty much gone...

[01:22] <masak> colomon++

[01:23] <colomon> Not clear if I've accomplished anything useful at all today, other than sending that not carefully tested patch to you, and getting Damian to send me his code.

[01:24] <colomon> Will be out of vicodin tomorrow, and need to get $work done on Monday, I fear.

[01:25] <colomon> Think I might resolve to try to have a Perl 6 day every week this year.

[01:25] <masak> the patch you sent is now applied and pushed.

[01:26] *** jarfhy left
[01:26] <colomon> ooo, thank you.

[01:27] <masak> thank *you* :)

[01:27] <masak> oh wait. the push failed.

[01:27] <masak> trying again.

[01:28] *** jarfhy joined
[01:29] <masak> would it be OK if I removed &module-name-to-path, rather than just commenting it out?

[01:29] <masak> I'm slightly allergic to commented-out code.

[01:30] <colomon> Of course.

[01:30] <colomon> I'm just slightly allergic to just deleting other people's code.

[01:31] <masak> next time, feel free to delete it. :)

[01:31] <colomon> Also, remember that I programmed for about 20 years before I had routine access to a version control system.

[01:31] <colomon> Paranoid habits die hard.

[01:31] <masak> I'm very unsentimental about dead code.

[01:32] <masak> they do indeed.

[01:32] <masak> ruthlessly removing code instead of commenting it out is definitely a habit I picked up after getting into version control systems.

[01:33] *** lukas___ left
[01:34] <colomon> Usually I comment stuff out and then a week or two later I delete the comments.

[01:34] <masak> my rule-of-thumb nowadays is that commented-out code is either (1) wrong and should be deleted at sight, or (2) equipped with a one-sentence comment explaining why it shouldn't be removed.

[01:34] <colomon> Every now and then I actually manage to lose something despite version control.

[01:35] <masak> last time I lost something was when I was robbed and my computer was lost. that must've been 2 years ago. I lost a day's worth of work on Druid.

[01:36] <colomon> I actually lost something today.

[01:36] <colomon> Switched too quickly from my version of something to moritz_++'s, lost about ten minutes of work.

[01:37] <colomon> I must say I'm very happy to have a time capsule full time on my LAN, so that I have routine hourly backups going on in the background.

[01:38] <masak> wolverian: you could also write :than(@these) or something.

[01:39] <masak> how will we make Perl 6 great in 2011? what should be our focus, as a community?

[01:39] * colomon checks on his off-site backup, to make sure his main svn repository is still being backed up each day.

[01:40] <colomon> masak: I think we need to ramp Perl 6 up to strength.

[01:40] <colomon> In particular, getting the module ecosystem up to speed.

[01:41] <masak> yes.

[01:41] <masak> I've been a bit negligent of pls, I fear.

[01:41] <colomon> And the two implementations converging in terms of speed and features.

[01:41] <masak> that'll be nice.

[01:41] <colomon> We've all been kind of negligent, I think.  I dunno, feels like I've been pretty distracted since August or so.

[01:42] <masak> yeah, apart from the Advent Calendar, we've been in a slump lately...

[01:42] <masak> pmichaud almost entirely distracted, jnthn largely distracted...

[01:42] <colomon> sorear aside, I think.  He's working miracles.

[01:42] <masak> but we had a similar (though shorter) slump around New Year's last year.

[01:43] <masak> yes, sorear++ makes us all look like lazy bums. :P

[01:43] <masak> I want to reward him by paying attention to his compiler.

[01:44] <lue> I would like to help with creating a module ecosystem. I think it's because I have a deep-rooted displeasure towards how it works.

[01:44] <colomon> I keep on meaning to try to install it again.  

[01:45] <masak> I think the Next Big Thing for the module ecosystem is Emmentaler. but it has pls as a prerequisite, so I need to finish pls first.

[01:45] * lue looks up Emmentaler

[01:46] <colomon> module::tools seems interesting.

[01:46] <colomon> looked like bits of ufo got into it....

[01:47] <masak> lue: http://strangelyconsistent.org/blog/cheese-speleology

[01:47] <colomon> masak: by the way, I've got a port of some C++ suffix tree code I found on the net done but not totally debugged for p5.  ;)

[01:48] <masak> that reminds me, I should send out an email to all the contestants.

[01:51] *** qiuhw joined
[01:54] *** qw3rty left
[01:54] *** icwiener left
[01:57] <lue> How do I mark a test todo or skip? [ I currently just comment out the offending line, but that's not a good solution. ]

[01:58] *** lao joined
[01:59] <lao> P5> @x=( "tom 87 98 90", "bob 78 98 90", "tim 88 98 84", "jon 78 87 90"); 

[02:00] <lao> P5> @x=sort { 

[02:00] <lao> @af  = (split /\s+/,$a)[1..3];

[02:00] <lao> @bf  = (split /\s+/,$b)[1..3];

[02:00] <lao> $af[2] <=> $bf[2] || $af[1] <=> $bf[1] || $af[0] <=> $bf[0]

[02:00] <lao> } @x;

[02:01] <colomon> masak: Getting organizational, it seems like we ought to spend the next couple of months worrying about meta issues with modules:  Installing them, testing them, making it easy to make modules which interface with other languages, etc.

[02:01] <lao> I try to convert P5 code to P6 for sort. Need help.

[02:01] <masak> lao: please don't do that.

[02:01] <masak> lao: use a pastebin of some sort :)

[02:03] <masak> rakudo: my @x = "tom 87 98 90", "bob 78 98 90", "tim 88 98 84", "jon 78 87 90"; @x .= sort( { my @af = $^a.words; my @bf = $^b.words; @af[2] <=> @bf[2] || @af[1] <=> @bf[1] || @af[0] <=> @bf[0] }); say @x.perl

[02:03] <p6eval> rakudo a98c69: OUTPUT«["jon 78 87 90", "bob 78 98 90", "tom 87 98 90", "tim 88 98 84"]␤»

[02:04] <masak> colomon: that's been the hidden challenge all along.

[02:05] <masak> colomon: thing is, no-one takes on solving those problems voluntarily. they're no fun, not really.

[02:05] <masak> colomon: so we need to grow into needing to solve them.

[02:05] <colomon> I dunno about hidden.  But it's been something we needed to do, and we ought to get our acts together.  (And I do mean "we", not just you.)

[02:05] <masak> right.

[02:05] <masak> my point is that it might actually have been too early thus far.

[02:07] <colomon> I reckon that's all irrelevant.  The point is, we really should get them done now.

[02:08] <colomon> afk # gotta go back home now.

[02:08] <colomon> happy new year!

[02:08] *** colomon left
[02:09] * masak waves after the departing colomon++

[02:15] *** awwaiid left
[02:16] *** redicaps joined
[02:18] <Tene> rakudo: my @a = 1,1,2; my @b = 1,2,1; say (@a Z<=> @b).perl

[02:18] <p6eval> rakudo a98c69: OUTPUT«(0, -1, 1)␤»

[02:20] <Tene> rakudo: my $a = '1 1 2'; my @b = '1 2 1'; say [||] ($a.words Z<=> $b.words)[2,1,0]

[02:20] <p6eval> rakudo a98c69: OUTPUT«===SORRY!===␤Symbol '$b' not predeclared in <anonymous> (/tmp/MPJ2UcKxaT:22)␤»

[02:20] <masak> rakudo: my @a = 1, 1, 2; my @b = 1, 2, 1; say (@a «<=>» @b).perl

[02:20] <Tene> rakudo: my $a = '1 1 2'; my $b = '1 2 1'; say [||] ($a.words Z<=> $b.words)[2,1,0]

[02:20] <p6eval> rakudo a98c69: OUTPUT«[0, -1, 1]␤»

[02:20] <p6eval> rakudo a98c69: OUTPUT«1␤»

[02:21] <Tene> That looks a bit more expressive than your long version, fwiw. :)

[02:24] <Tene> Huh.  I'd never noticed the similarity between Z and «» before.

[02:24] <Tene> What *is* the difference, actually?

[02:25] <masak> lazy and hyper, respectively.

[02:26] <wolverian> masak: or than => @these?

[02:26] <masak> wolverian: oh, right. yes.

[02:27] <masak> wolverian: I never use that syntax myself :) I had forgotten about it.

[02:29] <Tene> rakudo: my @x = "tom 87 98 90", "bob 78 98 90", "tim 88 98 84", "jon 78 87 90"; @x .= sort( { [||] ($^a.words Z<=> $^b.words)[2,1,0] } ); say @x.perl

[02:29] <p6eval> rakudo a98c69: OUTPUT«["jon 78 87 90", "bob 78 98 90", "tom 87 98 90", "tim 88 98 84"]␤»

[02:31] <masak> Tene++

[02:32] <Tene> That's still splitting into words repeatedly, so not quite optimal.

[02:34] <lue> afk everyone! o/

[02:35] <masak> afk, lue \o

[02:38] *** colomon joined
[02:42] *** rgrau left
[02:45] <masak> good night, zebras.

[02:46] <colomon> night!

[02:46] *** masak left
[02:47] *** florz left
[02:47] *** dukeleto left
[02:47] *** felliott joined
[02:48] *** dukeleto joined
[02:55] *** lukas___ joined
[02:59] *** florz joined
[03:03] *** jhuni left
[03:11] *** lukas___ left
[03:20] <lao> masak, Tene: Thanks. I wrould expect the result of sorting 3rd,3nd,1st field order: tim 88 98 84  	jon 78 87 90	 bob 78 98 90	tom 87 98 90

[03:25] *** alester joined
[03:37] <lao> ok I get it. I miss the correct index [3] [2] [1] for sorting.

[03:58] <lopnor> happy new year!

[04:00] <lopnor> how can i declear "local $foo" in perl6?

[04:06] *** alester left
[04:07] *** alester joined
[04:07] *** am0c left
[04:07] *** alester left
[04:26] *** dukeleto left
[04:27] *** dukeleto joined
[04:28] *** alester joined
[04:33] <sorear> lopnor: temp $foo

[04:33] <lopnor> oo!

[04:33] <sorear> it's also possible to do some of the same things with my $*foo

[04:33] <sorear> which is better supported

[04:34] <lopnor> I wanted to modify some environmental variables inside of method,

[04:35] <lopnor> i thought i should use method do_something ($foo is copy),

[04:35] <lopnor> which is better?

[04:51] <sorear> lopnor: not sure how is copy would work.

[04:51] <sorear> niecza: my $*foo = "Hello"; say "abc $*foo.uc() def"

[04:51] <p6eval> niecza v1-35-gc9d17a7: OUTPUT«abc HELLO def␤»

[04:54] *** justatheory left
[04:58] <lopnor> k, i will try someway

[05:01] *** orafu left
[05:01] *** orafu joined
[05:09] *** redicaps left
[05:14] *** redicaps joined
[05:15] <lue> phenny: tell masak I still get that malformed UTF-8 string error, and AFAICT my .markdown file is in utf-8. Maybe I'll stumble upon the cause in the meantime :) .

[05:15] <phenny> lue: I'll pass that on when masak is around.

[05:21] <sorear> niecza_eval: sub foo(*%_) { say %_.dump }; my $x = 5; foo(:$x)

[05:21] <sorear> niecza: sub foo(*%_) { say %_.dump }; my $x = 5; foo(:$x)

[05:21] <p6eval> niecza v1-35-gc9d17a7: OUTPUT«{"x" => 5}␤»

[05:25] <sorear> What's the best way to run some code and test the exception thrown?

[05:31] *** HarryS left
[05:41] *** gbacon left
[05:58] *** HarryS joined
[06:05] *** risou joined
[06:08] <sorear> niecza: class Base { class Derived is Base { } }; my $b = Base::Derived.new; say $b ~~ Base;

[06:08] <p6eval> niecza v1-35-gc9d17a7: OUTPUT«Bool::True␤»

[06:20] *** x19290 left
[06:20] <dalek> niecza: c23321d | sorear++ | v6n/ (2 files):

[06:20] <dalek> niecza: [v6] Translate first 1/3 of Metamodel

[06:20] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c23321da05

[06:20] *** alester left
[07:07] <diakopter> what is GameDay

[07:07] <diakopter> oh, that was a irclong time ago

[07:11] *** yarrack_logging left
[07:12] <sorear> diakopter: tournament of roses

[07:15] <diakopter> what's that

[07:16] <sorear> it's one of the highest level football games in the country

[07:16] <diakopter> I mean, I googled those terms, but I don't see how they're.. oh.

[07:17] <diakopter> tournament of roses brought up a bunch of stuff about a parade

[07:18] <diakopter> but yeah if there's a football game too, I can see how a tv show on sports would mention it

[07:22] <sorear> niecza: my @foo = 1, 2, 3; for @foo { $_++ }; say ~@foo

[07:22] <p6eval> niecza v1-35-gc9d17a7: OUTPUT«2 3 4␤»

[07:23] *** ROlds joined
[07:34] <simon> how do I join a predefined character group with a custom one? <[123] + <alpha>>?

[07:37] *** kaare joined
[07:37] *** kaare is now known as Guest29967

[07:40] <sorear> simon: yes

[07:40] <sorear> wait

[07:40] <sorear> no, it's just <[128]+alpha>

[07:40] <diakopter> niecza: my $foo = (1, 2, 3); for $foo { $_++ }; say ~$foo

[07:40] <p6eval> niecza v1-35-gc9d17a7: OUTPUT«Unhandled exception: Unable to resolve method Numeric in class Parcel␤  at  line 0 (ExitRunloop @ 0)␤  at (eval) line 1 (MAIN mainline @ 4)␤  at /home/p6eval/niecza/lib/SAFE.setting line 1064 (SAFE C381_ANON @ 1)␤  at /home/p6eval/niecza/lib/SAFE.setting line 1064

[07:40] <p6eval> ..(SAFE module-SAFE…

[07:44] <simon> sorear, thanks.

[07:55] <sorear> need is better than use because need does not affect the local language

[07:56] <sorear> a slightly smart compiler can respond to "need Foo; need Bar; " by loading Foo and Bar in parallel

[07:56] <sorear> this is not possible with use Foo; because Foo needs to be parsed for macros

[08:11] <dalek> niecza: ce5553f | sorear++ | v6n/ (3 files):

[08:11] <dalek> niecza: Translate second 1/3 of Metamodel

[08:11] <dalek> niecza: review: https://github.com/sorear/niecza/commit/ce5553fc9e

[08:13] <lao> Help: What is the equivalent statement in Perl6 for: substr($s1,3,4,"CAD") (perl5) 

[08:22] <simon> in grammars, how do I specify precedence? using ||s and ordering?

[08:25] <tadzik> rakudo: "CAD".substr(1, 2, 3)

[08:25] <p6eval> rakudo a98c69: OUTPUT«No applicable candidates found to dispatch to for 'substr'. Available candidates are:␤:(Mu : Any $start, Any $length?;; *%_)␤␤  in main program body at line 22:/tmp/JB6XgVRy0h␤»

[08:26] <mberends> lao: see the penultimate paragraph about substr (left hand side) in http://perlcabal.org/syn/S32/Str.html

[08:28] <mberends> rakudo: my $a="the cat sat"; substr($a,4,3)="dog"; $a.say;

[08:29] <p6eval> rakudo a98c69: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/i79vJtJd4x␤»

[08:29] <mberends> so it's NYI :-(

[08:34] <lao> mberends: Thank. I looked the web. substr just returns substring. I do not see replacement. I just want to change "theDOGHouse" to "theCADhouse" using substrng index rather than regex.

[08:38] <sorear> I'd rather see 4-argument substr than lvalue substr

[08:40] <sorear> the absense of error recovery in STD is irritating

[08:43] <sorear> std: $GLOBAL::x

[08:43] <p6eval> std 625303c: OUTPUT«ok 00:01 118m␤»

[08:44] <sorear> std: GLOBAL::Foo.new

[08:44] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Undeclared name:␤    'GLOBAL::Foo' used at line 1␤Check failed␤FAILED 00:01 118m␤»

[08:44] <sorear> std: Foo::Bar.new

[08:44] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Undeclared name:␤    'Foo::Bar' used at line 1␤Check failed␤FAILED 00:01 118m␤»

[08:45] <tadzik> isn't #81562 a feature?

[08:46] <tadzik> or is it a duplicate; I think I recall talking about it with someone here, and there was a reason I didn't file a bug report

[08:48] <dalek> niecza: 3523595 | sorear++ | v6n/Metamodel.pm6:

[08:48] <dalek> niecza: [v6] Fix compile errors

[08:48] <dalek> niecza: review: https://github.com/sorear/niecza/commit/352359509f

[08:48] <sorear> tadzik: search for "Interface consistency" in S12 or S06

[08:49] *** sftp left
[09:01] *** Chillance joined
[09:01] *** roen joined
[09:03] *** lao left
[09:05] *** neroxx joined
[09:15] *** isBEKaml joined
[09:19] *** Alias__ left
[09:34] *** redicaps left
[09:40] *** neroxx left
[09:48] *** isBEKaml left
[09:52] *** neroxx joined
[10:08] *** amkrankruleuen left
[10:08] *** amkrankruleuen joined
[10:09] *** mikehh joined
[10:35] <sorear> rakudo: sub flue($x is rw) {}; flue(5); say "alive"

[10:35] <p6eval> rakudo a98c69: OUTPUT«alive␤»

[10:35] *** roen left
[10:40] *** molaf joined
[10:41] <moritz_> rakudo's "is rw" doesn't work as it should

[10:41] <moritz_> it should fail to bind

[10:42] <moritz_> rakudo's 'is rw' is what should be 'is ref'

[10:47] <dalek> niecza: 51aa3cd | sorear++ | v6n/Sig.pm6:

[10:47] <dalek> niecza: [v6] Translate Sig

[10:47] <dalek> niecza: review: https://github.com/sorear/niecza/commit/51aa3cd3ba

[10:47] <pumphaus> hm, github still gives a 403 when I try to download 2010.12 -.-

[10:47] <sorear> is ref isn't actually documented

[10:49] <moritz_> wait

[10:49] <moritz_> the 'is ref' I meant was renamed to 'is parcel' in 4bd6b5e

[10:50] <moritz_> +You may modify the argument, but only if argument is already a suitable

[10:50] <moritz_> +lvalue since, unlike C<rw>, no attempt at autovivification is made,

[10:50] <moritz_> +so unsuitable lvalues will throw an exception if you try to modify

[10:50] <moritz_> +them within the body of the routine.

[10:51] <sorear> OH!

[10:51] <sorear> a lot of stuff is a lot clearer now that I have that connection.

[10:52] <moritz_> \o/

[10:52] <sorear> niecza: sub foo(\$x) { my @arr = $x; say +@arr }; foo((1,2,3)) # Discuss.

[10:52] <p6eval> niecza v1-35-gc9d17a7: OUTPUT«3␤»

[10:52] <sorear> my 'is parcel' preserves the list bit

[10:53] <moritz_> right; it doesn't force $x to be a scalar, even though it has the $ sigil

[10:53] <moritz_> which is mightily confusing, but probably right

[10:53] <sorear> the niecza setting couldn't exist without that

[10:54] <moritz_> right

[10:54] <moritz_> I just wish there was a distinction between "uncontexted" and "scalar" variables

[10:54] <sorear> now, STD's placeholder system turns { ... } into -> $_ is ref = OUTER::<$_> { ... }

[10:54] <moritz_> s/ref/parcel/

[10:54] <sorear> does this mean that $_ is potentially not a scalar in a bare block?

[10:55] <sorear> moritz_: it still uses ref there actually.  Which made no sense until todya.

[10:55] <moritz_> I guess that's a fossile

[10:55] <moritz_> and yes, $_ could be a list

[10:56] <dalek> rakudo: db11af9 | moritz++ | .gitignore:

[10:56] <dalek> rakudo: gitignore tarball created for smoke reports, mikehh++

[10:56] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/db11af90fa

[10:57] <sorear> which means that $_ and $^x are potentially very different

[10:57] <moritz_> yes :(

[10:57] * moritz_ wants the § sigil for variables with unknown context

[11:11] <sorear> niecza: my $h = { map { ($_ => 1) }, 1, 2, 3 }; say $h.dump

[11:11] <p6eval> niecza v1-35-gc9d17a7: OUTPUT«UnknownSub␤»

[11:11] <sorear> bleh

[11:12] <sorear> niecza: my $h = %( map { ($_ => 1) }, 1, 2, 3 ); say $h.dump

[11:12] <p6eval> niecza v1-35-gc9d17a7: OUTPUT«Unhandled exception: Unable to resolve method hash in class List␤  at (eval) line 1 (MAIN mainline @ 2)␤  at /home/p6eval/niecza/lib/SAFE.setting line 1064 (SAFE C381_ANON @ 1)␤  at /home/p6eval/niecza/lib/SAFE.setting line 1064 (SAFE module-SAFE @ 29)␤  at

[11:12] <p6eval> ../home/p6eval/niecza/lib/…

[11:12] <sorear> niecza: my $h = _hash_constructor( map { ($_ => 1) }, 1, 2, 3 ); say $h.dump

[11:12] <p6eval> niecza v1-35-gc9d17a7: OUTPUT«{"1" => 1, "2" => 1, "3" => 1}␤»

[11:12] * sorear ponders

[11:13] <sorear> how should I translate this line of Perl 5?

[11:13] *** Guest29967 left
[11:14] *** Guest29967 joined
[11:26] *** coldhead left
[11:27] * moritz_ doesn't see a line of perl 5

[11:31] *** masak joined
[11:31] <masak> \o/

[11:31] <phenny> masak: 05:15Z <lue> tell masak I still get that malformed UTF-8 string error, and AFAICT my .markdown file is in utf-8. Maybe I'll stumble upon the cause in the meantime :) .

[11:31] <masak> lue: check again :)

[11:32] <masak> either your UTF-8 is correct, or it's malformed. there's no third option.

[11:38] * moritz_ has a crazy idea: parallelized automatic bisecting

[11:39] <masak> as long as you have the computing power, sure.

[11:39] <masak> you need to be able to tell a bunch of nodes: "guys! stop! it's over here!"

[11:40] <moritz_> well, I have more CPUs than are typically used during a rakudo rebuild, and enough mem

[11:40] <moritz_> and two machines in my local network

[11:42] <arnsholt> Is it just me, or is checking out Parrot faster now that it's on git?

[11:45] <masak> lots faster.

[11:45] <masak> both the whole repo and comparable updates.

[11:52] *** kanishka joined
[11:57] <arnsholt> Yeah, that was my impression

[11:58] <masak> S32/Str/substr is a joke. one can't just posit that .substr returns an lvalue substring, without also saying what type machinery needs to be in place for that to work. (we already know that .substr is not allowed to "cheat" by using non-p6 primitives.)

[11:58] <masak> I'd say that that part of S32/Str is void by virtue of its naivety.

[11:58] <masak> *naïvité

[12:03] *** wamba joined
[12:04] *** Alias joined
[12:04] <masak> Alias! \o/

[12:05] <masak> Alias: it might please you to know that as of yesterday, 'done_testing' is called 'done' in the Perl 6 specification. :)

[12:05] <Alias> Oh thank the fucking lord

[12:05] <masak> :D

[12:06] <Alias> It pisses me off more than I can possibly describe when people take a perfectly good API that describes things in concise since terms and start adding new things with extra superfluous words

[12:06] <Alias> Usually because they don't speak english as a first language, and so don't trust themselves to get it right with just one word

[12:07] <Alias> ok_test

[12:07] <Alias> is_test

[12:07] <masak> :(

[12:07] <Alias> testing_plan

[12:07] *** kanishka left
[12:07] <Alias> use_module Foo::Bar;

[12:07] <masak> please stop... :/

[12:07] <Alias> Perl Language 6

[12:07] <Alias> :)

[12:07] <masak> urgh.

[12:12] <Alias> Personally though, I also hate done()

[12:12] <Alias> I think it makes people lazy

[12:12] <Alias> But I see how it might be slightly better in some cases

[12:12] <masak> I think it's not black-and-white.

[12:12] <Alias> My main concern is the existance of it will make people try less hard to actually make proper test counts

[12:12] <Alias> Which means less tests with test counts

[12:13] <masak> why is that a concern?

[12:13] <Alias> Which means we've traded improved-knowledge-of-early-stopping-for-unknown-plans for increased-likelyhood-someone-won't-use-a-plan-and-the-test-count-will-be-off-and-nobody-will-notice

[12:14] *** apeiron left
[12:15] <Alias> I've had test counts go wrong more times than I've had non-plan tests end prematurely with no obvious failure

[12:15] <Alias> But I'm mostly a -0 on the issue

[12:15] <Alias> I'm against it, but not enough for it to count

[12:15] *** pmurias joined
[12:17] <masak> I'm for it, but I don't mind when people use test plans, or argue for test plans.

[12:17] <masak> I like not having to re-count the test plan each time I add or remove a few tests in my file.

[12:17] <masak> I've not had much trouble with premature failures.

[12:17] <Alias> That you know of

[12:17] <Alias> oh wait

[12:18] <Alias> You mean for no_plan ones

[12:18] <masak> right.

[12:18] <masak> had I had much trouble with premature failures in no_plan test files, I might be more sceptical as well.

[12:19] <masak> but I haven't, so I'm not.

[12:19] <pmurias> premature failures are taken care of by done()

[12:20] <masak> right, that's why we need &done

[12:20] *** noganex_ joined
[12:20] <masak> this all assumes a TAP harness to keep us informed, of course.

[12:24] *** noganex left
[12:27] <pmurias> masak: test's are usually run by a harness, or manually for inspection

[12:28] <pmurias> Alias: doesn't updating the plan annoy you?

[12:28] <masak> mst once pointed out that updating the plan works particularly badly with version system merges.

[12:29] *** masonkramer left
[12:29] <masak> that blog post of his was what initially made me lean towards 'done()' in my test files.

[12:29] <moritz_> masak: that sounds logical, but I haven't had that problem in practise really

[12:29] *** masonkramer joined
[12:29] * pmurias had once

[12:30] <masak> moritz_: no, I think it's worse when many people crowd around a particular test file.

[12:30] <masak> moritz_: some test files in the p5 repo have upwards of 17k tests.

[12:30] <colomon> "The top referring sites [for justrakudoit] in 2010 were perlfoundation.org, reddit.com, planetsix.perl.org, Google Reader, and irclog.perlgeek.de." -- moritz_++

[12:31] * moritz_ kinda hopes in vain that many people crowd around roast

[12:31] *** kanishka joined
[12:31] <pmurias> masak: imagine having to count them up to see if the plan count is wrong or the tests are

[12:31] <masak> pmurias: I don't need to imagine very hard.

[12:32] <moritz_> I guess most people either only count the diffs, or just trust the count from TAP::Harness

[12:32] <masak> pmurias: though usually what I do is make an idempotent s/is /is / replacement in vim and count the number of replacements. :)

[12:32] <masak> s/count/read off/

[12:33] <pmurias> moritz_: if you trust the count from TAP::Harness the whole point of the plan is broken

[12:33] <masak> as soon as we have AST analyzers, we can start playing around with automated test counting.

[12:36] <moritz_> pmurias: right

[12:37] <Alias> pmurias, sure. Doesn't declaring variables annoy you?

[12:37] <masak> I don't think the analogy is very accurate.

[12:37] <Alias> Test plans take more work, but give more reliable result

[12:38] <Alias> With some extra typeing they remove a catagory of potential errors

[12:38] <Alias> Via some additional strictness

[12:38] <Alias> I think it's a reasonable analogy

[12:38] <masak> declaring variables so that they stay in their scopes will help me as my application grows. keeping a test plan up-to-date will become increasingly difficult as my test file grows.

[12:38] <masak> Alias: could you please explain in some more detail what the potential errors are?

[12:38] <masak> it seems neither pmurias or I understand that.

[12:39] <Alias> my @output = $some->function;

[12:39] <Alias> foreach ( @output ) { isa_ok($_, 'Something') }

[12:39] <Alias> How do you tell when it's returned the wrong number of things

[12:39] <Alias> That's one notional example

[12:39] <Alias> But there's tons of others

[12:40] <masak> oh, I think you've blogged about this once.

[12:40] <colomon> is +@output, right number of things.

[12:40] <moritz_> with  is scalar(@output), $expected_number, '...';

[12:40] <Alias> If I don't have a plan, then all of a sudden I don't need to skip any more either

[12:40] <Alias> I just shortcut

[12:40] *** kanishka1 joined
[12:40] <masak> ...and that's bad because...?

[12:40] <colomon> but yeah, loops which exit prematurely are harder to detect without a fixed plan.

[12:41] <Alias> Loops which exit prematurely, or conditionals which can silently evaluate wrong

[12:41] <masak> one could argue that testing for the length of the array is a good test to have in there anyway, plan or no plan.

[12:41] <Alias> In the old situation, the untested case was a test script which did a hard-non-error exit(0) prematurely

[12:41] <Alias> masak: Sure it is, but you don't have to

[12:41] <Alias> Just like using ? placeholders in DBI

[12:41] <masak> even with a plan, there might be subtle errors which offset each other, ending up on the right test count.

[12:42] <Alias> That is true

[12:42] <Alias> But then you have an two-factor error case

[12:42] <Alias> Which is likely to be exceedingly rare

[12:42] <masak> right. it's a weak argument that way.

[12:42] *** kanishka left
[12:43] <Alias> Personally, I can't remember more than 1 or 2 cases in my entire career that a test script has done a premature silent exit() which was also in a test script that did not have an inherently plan

[12:43] <Alias> I can remember lots where I got a loop count wrong

[12:43] <masak> Alias: if you get loop counts wrong so often, why don't you test the length of the array?

[12:44] <Alias> So in my opinion, we're fixing a very rare case and as a side effect encouraging greater use of unsafe behaviour 

[12:44] <Alias> masak: Because sometimes I'm lazy?

[12:44] *** kanishka1 left
[12:44] <Alias> Same thing with SQL and placeholders

[12:45] <Alias> And I have a lot of faith in programmers tendency to be lazy

[12:45] <Alias> As a collective userbase of Test::More 

[12:45] *** arthur-_ joined
[12:45] <masak> arthur-_! \o/

[12:45] <masak> arthur-_: happy new year!

[12:45] <arthur-_> masak: you too !

[12:46] <masak> Alias: putting in a test plan as a safeguard against laziness. I buy that.

[12:46] <Alias> right

[12:46] <Alias> And part of this thing with done() is that it's been promoted

[12:47] <Alias> I was reaonsably ok to have it, but I think you should HAVE to write explicitly no_plan in order to get it

[12:47] <Alias> It should take MORE work to access the lazy option

[12:47] <Alias> I'd even go so far as to leave it out of the SYNOPSIS

[12:49] <Alias> Encouraging it's use annoys me more than having it there for the one case it does defend against

[12:50] <dalek> ecosystem: df83462 | (Solomon Foster)++ | projects.list:

[12:50] <dalek> ecosystem: Add Damian Conway's Testing module to ecosystem.

[12:50] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/df834620d0

[12:52] <arnsholt> Making &done undocumented would be a bad idea

[12:52] *** zby_home_ joined
[12:52] <Alias> Not undocumented

[12:52] <Alias> Just not in the SYNOPSIS

[12:52] <arnsholt> Especially since that would mean it would be non-standard

[12:52] <arnsholt> The synopsis is the spec

[12:52] <Alias> No it isn't 

[12:53] <masak> arnsholt: you're attacking a strawman.

[12:53] <Alias> The SYNOPSIS is the bit at the top of the module

[12:53] <arnsholt> masak: Good point

[12:53] <masak> arnsholt: not undocumented, just removed from the SYNOPSIS section.

[12:53] <Alias> That shows the most normal and common usage

[12:53] <arnsholt> Oh, that synopsis

[12:53] <Alias> right

[12:53] <masak> yeah.

[12:53] <Alias> (Capital SYNOPSIS, not Synopsis)

[12:53] <masak> Alias wasn't shouting, he was using a technical term. :)

[12:57] *** neroxx left
[13:04] *** qiuhw left
[13:10] <moritz_> things I wish perl 5 had: a switch to log all IO

[13:10] <moritz_> like the system() or chdir() or exec() arguments

[13:10] <moritz_> I guess in Perl 6 it's easier to do, because run() isn't parsed as specially as system() is in p5

[13:13] <masak> Arc has this nice kind of function that takes a closure, and every 'say' or other output to $*OUT is gathered up into a string and returned from that function.

[13:14] <moritz_> not hard to do in Perl 6 either

[13:15] <moritz_> in fact that's a nice module to write :-)

[13:15] <masak> aye.

[13:16] <colomon> go moritz_, go!

[13:16] <moritz_> it just needs a class that supports .print and .say (and maybe .write), and then set $*OUT and $*ERR to instances of that

[13:16] <masak> the benefits of designing stuff right :)

[13:17] *** shi joined
[13:18] <moritz_> rakudo: class Dummy { method print(*@_) { }; method say(*@_) { } }; my $*ERR = Dummy.new; die "should not show up"

[13:18] <p6eval> rakudo db11af: OUTPUT«should not show up␤  in main program body at line 22:/tmp/iMWFJotqZL␤»

[13:18] <moritz_> am I right?

[13:18] * masak submits rakudobug

[13:18] <masak> think so.

[13:19] <masak> well, depends on in which scope the error is printed, I guess.

[13:19] <masak> but it's worth getting a verdict on.

[13:20] <moritz_> there might be some in-the-setting exception handler that catches and prints to $*ERR

[13:20] <moritz_> so it's not the localized $*ERR

[13:20] <masak> right.

[13:21] <masak> in fact, for the error to boil up all the way out of the program, it's pretty much certain that we've left the scope where $*ERR was overridden.

[13:21] <masak> so this is probably a non-bug.

[13:22] * moritz_ unsubmits the rakudobug :-)

[13:22] <masak> *poof*

[13:24] * moritz_ tries his new script for bisecting parrotbugs through rakudo

[13:27] <arnsholt> rakudo: class Dummy { method print(*@_) { }; method say(*@_) { } }; $*ERR := Dummy.new; die "should not show up"

[13:27] <p6eval> rakudo db11af: OUTPUT«should not show up␤  in main program body at line 22:/tmp/fWXB7EOyH1␤»

[13:27] <masak> hm... not declaring $*ERR *would* change matter, wouldn't it?

[13:27] <dalek> ecosystem: 7f3cf76 | (Solomon Foster)++ | projects.list:

[13:27] <dalek> ecosystem: Add Damian Conway's IO::Prompter to the ecosystem.

[13:27] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/7f3cf760f5

[13:27] * masak whirrs up the bug-submitter again

[13:28] <masak> arnsholt++

[13:28] <moritz_> not at all

[13:28] * masak whirrs down

[13:29] <arnsholt> I suppose it depends on where and how $*ERR is set up

[13:31] <colomon> moritz_: I hate to say it, but Damian's Testing code is beautiful.

[13:31] <moritz_> I imagine the setting to look like  this:  try { YOU_ARE_HERE }; $*ERR.print($!) if $!;

[13:31] <colomon> OK have => prompt(:integer, in => IN('a','1.2','-42a','-12')),

[13:31] <colomon>    want => -12,

[13:31] <colomon>    desc => "Require an integer";

[13:32] <arnsholt> masak: Consolation prize

[13:32] <arnsholt> rakudo: class Dummy { method print(*@_) { }; method say(*@_) { } }; my $*IN = Dummy.new; say "should not show up"

[13:32] <p6eval> rakudo db11af: OUTPUT«should not show up␤»

[13:32] <masak> arnsholt: $*IN?

[13:33] <arnsholt> >.<

[13:33] <arnsholt> I r an idiot =D

[13:33] * masak hugs arnsholt 

[13:33] <arnsholt> I blame your competition

[13:33] <arnsholt> I've been thinking too much about parsing all the input from stdin ;)

[13:34] <arnsholt> Given that, I guess it's just as well I don't have to do actual work 'till tomorrow

[13:34] <masak> arnsholt: make sure you submit as solutions some of that thinking you've been making. :)

[13:35] <arnsholt> *giggle*

[13:35] <arnsholt> I just need to implement some of that thinking as well

[13:36] *** ZeroCoder joined
[13:41] *** Layla joined
[13:45] <moritz_> git question: why does 'git describe' work out of the box in the rakudo repo, but needs the --tags option in the parrot repo?

[13:46] <masak> moritz_: from the manpage: "By default (without --all or --tags) git describe only shows annotated tags."

[13:46] <masak> maybe that's a clue.

[13:46] <moritz_> what's an annotated tag?

[13:46] <masak> I don't know what an annotated tag is, but it does sound relevant.

[13:46] <masak> "For more information about creating annotated tags see the -a and -s options to git-tag(1)." :)

[13:47] *** Guest29967 is now known as kaare_

[13:47] <masak> nom &

[13:48] *** masak left
[13:48] <moritz_> git-tag only mentions that it can create annotated tags

[13:48] <moritz_> wwow

[13:50] *** glow left
[13:51] *** Layla left
[14:00] <lopnor> hi, I finally made fully perl6-written blog online!

[14:00] <lopnor> http://journal6.soffritto.org/

[14:00] <lopnor> superslow so you have to wait about 3min.

[14:05] *** sftp joined
[14:06] *** qw3rty joined
[14:11] <moritz_> lopnor: cool idea. What do you think of a caching proxy? :-)

[14:11] <lopnor> moritz_: i should:)

[14:12] *** yarp joined
[14:12] <lopnor> but the best is perl6 is enought fast to return all request in time!

[14:12] <moritz_> or generate static HTML in the first place (though that would probably require many changes)

[14:12] <moritz_> lopnor: is the source code online somewhere?

[14:13] <lopnor> https://github.com/lopnor/p6-journal

[14:13] <lopnor> this is blog code

[14:13] <lopnor> https://github.com/lopnor/p6-plackdo

[14:13] <lopnor> this is firmware code

[14:14] <moritz_> lopnor: care to add it the official module list?

[14:15] <lopnor> and this is same blog retuned with perl5 http://journal.soffritto.org/

[14:15] <moritz_> lopnor: you now have commit access to http://github.com/perl6/ecosystem/

[14:15] <lopnor> great!

[14:16] <moritz_> (and most other repos in the perl6 organization, for that matter. Like test suite, mu, ...)

[14:16] <lopnor> moritz_: i'm warrying plackdo conflict some specs with 'web'

[14:17] <flussence> re: tags; annotated tag is just a tag with the tag's "commit message" filled in

[14:17] <flussence> (which is what -a/s prompt you for)

[14:19] <flussence> (also, those messages show up in qgit's statusbar but I don't think github shows them...)

[14:23] <moritz_> lopnor: don't worry; I haven't seen any real world application of 'web', and "works" wins over "specs" :-)

[14:23] <moritz_> at least regarding modules

[14:23] <lopnor> k, will work harder!

[14:24] <lopnor> moritz_: thank you!

[14:24] <moritz_> lopnor: you're very welcome

[14:24] <moritz_> fwiw I get 502 proxy errors from your blog

[14:24] *** rindolf joined
[14:24] <moritz_> "The proxy server received an invalid response from an upstream server.

[14:24] <moritz_> The proxy server could not handle the request GET /."

[14:24] <rindolf> Hi all.

[14:25] <lopnor> moritz_: yes, this blog runs with single process, i will enhance handler with prefork strategy.

[14:25] <moritz_> rakudo: pir::fork(); say 3

[14:25] <p6eval> rakudo db11af: OUTPUT«error:imcc:syntax error, unexpected '\n', expecting '('␤  in file 'EVAL_10' line 86␤===SORRY!===␤syntax error ... somewhere␤»

[14:26] <lopnor> currently thinking fork with NativeCall

[14:26] <moritz_> right, that's probably the only working solution today

[14:26] <moritz_> lopnor++ # cool perl 6 code

[14:27] <lopnor> almost every code is stolen from plack in perl5.

[14:28] <lopnor> so coolness is for miyagawa.

[14:28] <moritz_> well, you ported it and made it run

[14:29] *** yarp left
[14:29] <lopnor> :)

[14:35] <lopnor> now you can see http://journal6.soffritto.org/ , i think

[14:52] *** rgrau joined
[14:56] *** ZeroCoder left
[15:00] <moritz_> lopnor: yes, works now

[15:00] <moritz_> though I seem to lack fonts to display all of it properly

[15:00] <lopnor> moritz_: written in japanese so you would need japanese fonts.

[15:01] <moritz_> even then I couldn't read it :(

[15:01] <lopnor> if you see yellow squares it's css brought by perl6.

[15:02] <moritz_> just the favicon is a yellow square

[15:03] <flussence> ooh, nice

[15:04] <lopnor> moritz_:  ah, its writen by perl6 :)

[15:05] <lopnor> i will work harder to deliver thins more faster (in application layer). 

[15:05] <flussence> btw, "* { size: 90% }" is probably meant to be "body { font-size: 90% }" :)

[15:05] <lopnor> flussence: yes!

[15:05] <lopnor> my css is very bad work :P

[15:06] *** am0c joined
[15:07] <flussence> (Chrom[e|ium] puts a little warning symbol next to unknown css in the inspector now, nice)

[15:08] *** c1sung left
[15:09] *** c1sung joined
[15:15] <pmurias> Alias: for me the main reason why i hate test plans is not the extra typing but the fact that when is that i tend to forget updating them and i waste time counting tests

[15:15] <pmurias> Alias: the error you ran 11 tests instead of 12 isn't a very helpfull one

[15:16] <pmurias> Alias: if you keep track of the plan easily and do tricky stuff in the tests the plan might be helpfull

[15:18] <pmurias> Alias: but for me it's a tiny gain for a huge annoyance

[15:20] *** carlos__ joined
[15:21] *** lambda-nil left
[15:21] <flussence> it's a lot like having to manually set the size of an array

[15:21] *** jedai joined
[15:22] <flussence> what I usually do is just stick all my tests in an array and plan +@stuff; :)

[15:23] * pmurias likes that

[15:30] *** carlos__ left
[15:38] *** qw3rty left
[15:55] <dalek> niecza: 67a3e6f | pmurias++ | / (2 files):

[15:55] <dalek> niecza: added Niecza::Frontend::STD which will be responsible for the parsing

[15:55] <dalek> niecza: review: https://github.com/sorear/niecza/commit/67a3e6fff6

[15:55] <dalek> niecza: 77dab6d | pmurias++ | v6n/ (5 files):

[15:55] <dalek> niecza: Merge branch 'master' of github.com:sorear/niecza

[15:55] <dalek> niecza: review: https://github.com/sorear/niecza/commit/77dab6d805

[15:55] <pmurias> argh forgot git pull --rebase :(

[15:55] *** pmurias left
[15:57] *** hcchien joined
[16:01] *** Patterner left
[16:03] *** envi left
[16:06] *** am0c left
[16:06] *** orafu left
[16:06] *** orafu joined
[16:07] *** Psyche^ joined
[16:07] *** Psyche^ is now known as Patterner

[16:10] *** _twitch joined
[16:17] <colomon> hmmm.

[16:19] *** kanishka joined
[16:19] *** orafu left
[16:19] *** orafu joined
[16:20] <colomon> Fixed ufo to handle sources in lib6 directories last night.

[16:20] <colomon> But it installs them into .perl6/lib6   -- and Rakudo doesn't recognize that.

[16:21] <colomon> Change ufo or change Rakudo?

[16:24] <tadzik> ufo imno

[16:25] * tadzik tunes module::tools

[16:26] <colomon> tadzik: I think you might be right, but unfortunately that's the hard answer.  :)

[16:26] <tadzik> is it?

[16:27] *** kraai_ joined
[16:29] <kraai_> Hi.  The top-level README in Rakudo * 2010.12 says that it's from the 2010.08 release.

[16:29] <tadzik> . o O ( amap: appenging map )

[16:30] <tadzik> kraai_: that sounds wrong indeed, thanks for letting us know

[16:31] <kraai_> tadzik: You're welcome.

[16:37] <pumphaus> oh wow, we can finally download it :)

[16:41] <colomon> tadzik: I'd certainly rather tweak Rakudo than try to sort out how to make a significant modification to ufo's makefile generation.

[16:48] <tadzik> the "Suprise lib6" case made me think about some sorf of a META file, with info about where to find stuff

[16:49] <tadzik> I feel like a blag post promoting the idea, or rather provoking a discussion

[16:50] <tadzik> fixing every possible tool in a module toolchain because there appeared a module with different dirs feels LTA

[16:53] *** jimfuller joined
[16:53] *** gbacon joined
[16:53] *** shi left
[16:55] *** colomon left
[16:55] *** silug left
[16:55] <jimfuller> lazy request:  whats the state of visual gui (gtk, etc) integration with perl6 these days ?

[16:56] <tadzik> tk is reported to work on blizkost or zavolaj

[16:56] <tadzik> I know of no other attempts, feel free to try

[16:56] <tadzik> (I think that was blizkost)

[16:57] <jimfuller> ok, cheers for the info

[16:58] <tadzik> you're welcome

[17:02] *** masak joined
[17:02] <masak> lopnor: wow!

[17:02] <masak> that is seriously impressive.

[17:03] <masak> lopnor: I think your best chance at speed at this point is to make your code work on niecza.

[17:08] *** MayDaniel joined
[17:09] <masak> moving &

[17:09] *** masak left
[17:10] *** kanishka1 joined
[17:10] *** colomon joined
[17:11] *** kanishka1 left
[17:11] <colomon> tadzik: sorry for disappearing there.

[17:11] <colomon> I think we need to set standards.

[17:11] *** kanishka left
[17:11] <colomon> and in the meantime, I'm just going to change Damian's modules to use lib instead of lib6.

[17:14] <tadzik> good eye deer

[17:15] *** _jaldhar is now known as jaldhar

[17:16] * TimToady is still recovering from a spiral write on my disk drive yesterday morning, or maybe a minor headcrash

[17:16] *** MayDaniel left
[17:16] <TimToady> it's a bad thing when your OS decides to remount your filesystem ro

[17:16] *** MayDaniel joined
[17:17] <moritz_> oh dear yes

[17:17] <TimToady> and of course it clobbered the inode table and most of my top-level directories

[17:18] <TimToady> everything ended up in lost+found; well, everything it could get back

[17:18] <colomon> oh noez!

[17:18] <TimToady> still haven't seen my home directory anywhere...

[17:18] <TimToady> fortunately, most of what I care about is backed up on the net

[17:19] <TimToady> and though I'm running in a different partition now (and used the excuse to upgrade to 64-bit ubuntu), I don't really trust my disk anymore

[17:20] *** _twitch left
[17:21] <colomon> tadzik: lib6 to lib done and pushed.

[17:24] *** icwiener joined
[17:24] *** kraai_ left
[17:24] *** orafu left
[17:24] *** orafu joined
[17:29] *** _twitch joined
[17:34] *** jimfuller left
[17:43] *** dual left
[17:50] *** yarrack_logging joined
[17:53] <dalek> rakudo: fc2db18 | KodiB++ | / (2 files):

[17:53] <dalek> rakudo: Added a Perl 5 script to update the leap-second tables in tai-utc.pm.

[17:53] <dalek> rakudo: 

[17:53] <dalek> rakudo: I tried to do it in Perl 6 first, but I couldn't get perl6-lwp-simple to work.

[17:53] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/fc2db18ac9

[17:55] *** WonTu joined
[17:55] *** WonTu left
[18:03] <moritz_> my hacking on a bisecting script for parrot found a perl 5 bug :-)

[18:04] <moritz_> (well, an autodie bug, to be exact)

[18:05] <moritz_> maybe we should put instructions into the release managers guide to run the script after a release, and commit the results

[18:05] <moritz_> where by "the script" I meant KodiB++'s last commit

[18:07] *** MayDaniel left
[18:08] <pmichaud> I'm not sure that should be part of the release process

[18:09] <pmichaud> regenerating and/or updating src/core/tai-utc.pm should be in response to bugfix/maintenance, not part of release

[18:16] <TimToady> We should name our Metamodel Metalmode

[18:16] <pmichaud> yamm

[18:17] <pmichaud> (yet another meta model)

[18:21] <TimToady> sorear: STD does do a certain amount of error recovery from semantic errors--that's what sorry() is for

[18:33] <perigrin> MeatAlaMode

[18:34] *** jaldhar left
[18:37] *** dukeleto left
[18:38] *** dukeleto joined
[18:38] *** jaldhar joined
[18:40] *** justatheory joined
[18:41] *** _twitch left
[18:57] *** risou left
[18:59] <sorear> TimToady: how impossible would it be for STD to recover from a misplaced ) and report errors further along the file?

[19:00] <sorear> good * #perl6

[19:00] *** MayDaniel joined
[19:03] <sorear> phenny: tell masak What do you mean that substr cannot use non-p6 primitives?  How else is it supposed to inspect an opaque Str?

[19:03] <phenny> sorear: I'll pass that on when masak is around.

[19:07] *** wamba left
[19:11] *** kraai_ joined
[19:18] *** amkrankruleuen left
[19:26] <sorear> TimToady: I've never heard of a spiral write before.

[19:27] *** dual joined
[19:31] *** dorlamm joined
[19:41] *** MayDaniel left
[19:44] *** lukas___ joined
[19:46] <diakopter> metamodel -> Told A Meme

[19:50] <rindolf> I met a model.

[19:54] <dalek> sprixel: 6bbccc5 | diakopter++ | / (13 files):

[19:54] <dalek> sprixel: another wip commit.

[19:54] <dalek> sprixel: got generic types working on .net (largely imported/ported from the

[19:54] <dalek> sprixel: previous perlesque); still need to validate/debug them on mono.

[19:54] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/6bbccc5b3b

[19:55] *** shi joined
[19:56] *** Vlavv` joined
[19:57] *** Vlavv_ left
[20:10] *** rgrau left
[20:12] *** orafu left
[20:12] *** orafu joined
[20:15] <lue> ohai fellow zebras o/

[20:15] <moritz_> \o

[20:17] <colomon> o/

[20:36] * moritz_ has now submitted a solution for each of masak's five tasks, each good enough to pass base-test

[20:39] <colomon> what is base-test?

[20:40] <colomon> my p5 is still problematic.

[20:40] <colomon> and I didn't see any tests included for it?  the writeup seemed incomplete next to the others, though the concept is obviously straightforward.

[20:42] *** LeifD joined
[20:45] *** lukas___ left
[20:46] <lue> Just out of curiosity, do I need the line    module A::B;    in the file A/B.pm? [doesn't [seem to] hurt anything, just wondering if it's redundant]

[20:48] *** dorlamm left
[20:51] <moritz_> yes

[20:51] <moritz_> though class A::B { ... } will do too

[20:51] *** MayDaniel joined
[20:51] <moritz_> eventually the contents of the module file will be authorotative, not the name

[20:52] <lue> how do you mean?

[20:53] <flussence> filesystems are just an implementation detail :P

[20:53] <lue> Does that mean the name won't tell you everything, eventually?

[20:55] <moritz_> correct

[20:55] <moritz_> the spec says that we must be able to map module names that aren't directly mappable to file names

[20:55] <moritz_> like case sensitivity on case insensitive file systems

[20:55] <moritz_> or Unicode names on ASCII-only file systems

[20:56] <moritz_> and then there's this whole thing about versions and authorities

[20:57] * lue gets the sneaking feeling that S11 says more than he thinks if he were to just read it like a gripping adventure novel.

[20:59] *** explorer__ joined
[21:00] *** jferrero left
[21:02] *** LeifD left
[21:02] <moritz_> we had a brainstorming session on it, and then a hackathon to implement parts of it

[21:03] *** rindolf left
[21:04] *** colomon left
[21:05] *** dorlamm joined
[21:05] <lue> There's something about the module system I don't like. I'll read S11 first, and then see if I still don't like it.

[21:05] * lue reads

[21:06] *** colomon joined
[21:10] <tadzik> lue: what about the module system?

[21:11] *** awwaiid joined
[21:16] <lue> I honestly don't know [yet]. Maybe it's because it's (Not Yet|Not Well) Implemented.

[21:16] <dalek> sprixel: 3d6211f | diakopter++ | / (7 files):

[21:16] <dalek> sprixel: fixed if/else without intervening elsif, and various other things.

[21:16] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/3d6211f3ed

[21:18] *** pmurias joined
[21:19] <diakopter> pmurias: hi

[21:20] <tadzik> lue: you mean a CPAN-like infrastructure?

[21:21] <pmurias> diakopter: hi

[21:21] *** am0c joined
[21:22] *** lukas___ joined
[21:23] <moritz_> it certainly isn't well implemented yet

[21:23] *** plobsing left
[21:24] *** plobsing joined
[21:28] <pmurias> sorear: how often does the compiled by niecza STD use coroutines?

[21:30] *** molaf left
[21:31] <sorear> pmurias: every call to &map, &grep creates one; every 'regex' creates one

[21:32] <lue> moritz_: eventually, would I be able to store module A::B in places other than A/B.pm ?

[21:34] <moritz_> lue: yes

[21:34] <moritz_> though how "other" exactly they are going to be, I don't know yet

[21:34] <dalek> niecza: 7a14f4f | pmurias++ | src/Niecza/Backend/NAM.pm:

[21:34] <dalek> niecza: added the backend which outputs the ast as NAM

[21:34] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7a14f4feb5

[21:34] <dalek> niecza: 09646fd | pmurias++ | niecza:

[21:34] <dalek> niecza: started creating the script for the refactored compiler

[21:34] <dalek> niecza: review: https://github.com/sorear/niecza/commit/09646fd224

[21:35] <pmurias> sorear: so the mono specific continuation stuff would slow us down?

[21:38] <lue> Is A:name<B> always referred to as A:name<B>?

[21:38] <diakopter> pmurias: yay; man-or-boy.t is working again :D

[21:39] <diakopter> sorear: does man-or-boy work on niecza?

[21:39] <moritz_> lue: my $x = A:name<B> # now you can refer to it by $x

[21:39] <diakopter> (I'm not challenging, merely curious b/c I don't know)

[21:40] *** lukas___ left
[21:40] <lue> Let me see if I got this right: if module A comes with a shortname (e.g. :name<B>), then you can    use B;    instead of    use A;    , right?

[21:41] <pmurias> diakopter: is copy is not implemented yet in niecza

[21:41] <diakopter> pmurias: why would 'is copy' matter?

[21:41] <moritz_> you can easily change the test not to use "is copy"

[21:41] <diakopter> (right)

[21:42] <diakopter> my version is quite different, b/c it uses primitive types only

[21:42] <diakopter> well, and strongly-typed closures

[21:42] <moritz_> I get

[21:42] <moritz_> Can't use an undefined value as an ARRAY reference at /home/moritz/p6/niecza/src/NAMBackend.pm line 96.

[21:42] <moritz_> while trying to compile man-or-boy.t with niecza

[21:42] * moritz_ -> sleep

[21:43] <diakopter> nite

[21:43] <lue> My question was, does the longname ever get shown as anything other than A:name<B> ?

[21:43] <lue> 'night, moritz_ o/

[21:43] <pmurias> moritz_: rm -fr obj/

[21:44] <diakopter> lue: sorry; I don't know :(

[21:48] <lue> that's alright, it's just my curiosity, I don't actually need the info :) .

[21:49] <diakopter> pmurias: e.g. here's my edition: http://perl6.pastebin.com/raw.php?i=AXhUA23d

[21:49] <pmurias> sorear: i'm thinking ->run is not a good name for the method in passes, what would a good one be? ->tranform,->process?

[21:49] <dalek> sprixel: bfd7f45 | diakopter++ | sprixel/ (3 files):

[21:49] <dalek> sprixel: finish getting man-or-boy.t to work.  strongly-typed edition works. :)

[21:49] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/bfd7f456d1

[21:54] <sorear> pmurias: invoke?

[21:55] <diakopter> phenny: ask TimToady in the following primitive-typed edition of man-or-boy http://perl6.pastebin.com/raw.php?i=AXhUA23d I postulated a shorthand to write type annotations for "generic" Callables (that are strongly-typed)... could you please [in-]validate that such a construct could work?

[21:55] <phenny> diakopter: I'll pass that on when TimToady is around.

[21:55] <sorear> lue: you could also use A:name( "B" )

[21:55] <sorear> er, :name[ "B" ]

[21:57] <diakopter> phenny: ask TimToady but ignore the '&' "sigil" before 'B' - I'm removing that curiosity from this perlesque dialect

[21:57] <phenny> diakopter: I'll pass that on when TimToady is around.

[21:57] <pmurias> sorear: we could have passes as subs but i thing code reuse between the different passes will be important

[21:59] <dalek> niecza: 756b65f | pmurias++ | / (5 files):

[21:59] <dalek> niecza: passes and Niecza::Compiler that will tie stuff together

[21:59] <dalek> niecza: review: https://github.com/sorear/niecza/commit/756b65f72a

[21:59] <dalek> niecza: 8f0056c | pmurias++ | src/Niecza/ (4 files):

[21:59] <dalek> niecza: change the ->run method of passes to ->invoke

[21:59] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8f0056ce80

[21:59] <pmurias> sorear: changed

[22:01] <sorear> pmurias: are you planning to kill CompilerDriver and niecza_eval ?

[22:02] <pmurias> once niecza and the refactored stuff yes

[22:03] *** coldhead joined
[22:03] <pmurias> i don't want to break stuff so i'm letting CompilerDriver live for now

[22:04] <sorear> pmurias: why does the 'niecza' script need to know about the internal passes?  I call most of them ugly implementation details

[22:04] <sorear> Why doesn't Niecza::Compiler.compile use named arguments?

[22:04] <pmurias> it should use those

[22:05] <pmurias> niecza is a placeholder for testing

[22:05] <pmurias> what should specify the passes?

[22:06] <sorear> Niecza::Compiler?

[22:07] <pmurias> different backends/flag combinations can have different passes

[22:07] <pmurias> in mildew i used Bread::Board but i don't to pay the price for it's loading time

[22:07] <pmurias> s/to/want to/

[22:08] <pmurias> but i'm trying to do dependency injection manual

[22:12] <dalek> niecza: eb2e337 | pmurias++ | / (2 files):

[22:12] <dalek> niecza: make Niecz::Compiler use named arguments

[22:12] <dalek> niecza: review: https://github.com/sorear/niecza/commit/eb2e33706d

[22:12] *** spam joined
[22:13] *** spam is now known as Guest45477

[22:13] <pmurias> sorear: but we can store all the ugly implementation details in a seperate file

[22:13] *** Guest45477 left
[22:15] *** colomon left
[22:15] <lue> .oO(S11:535 is closely related to the bit in S01 about P5-by-default, just so you know.)

[22:15] *** colomon joined
[22:17] <pmurias> sorear: what does stagetime argument to CompilerDriver do?

[22:19] *** patrickas joined
[22:20] <patrickas> rakudo: my $r = 2..4;say pick 2,3,4;say $r.pick;say pick($r);

[22:20] <p6eval> rakudo fc2db1: OUTPUT«43␤3␤␤»

[22:20] <sorear> pmurias: implements the -v compiler option; try ./niecza_eval -v -e 'say 2+2'

[22:20] <patrickas> should the last pick act like the first or the second?

[22:20] *** rgrau joined
[22:20] <pmurias> so it should be named verbose?

[22:21] <sorear> pmurias: that would work too, but it prints stage times, so stagetime seemed like a good name

[22:40] *** jarfhy left
[22:44] *** explorer__ left
[22:44] *** dual left
[22:44] *** jaldhar left
[22:44] *** dukeleto left
[22:44] *** icwiener left
[22:44] *** gbacon left
[22:44] *** Patterner left
[22:44] *** masonkramer left
[22:44] *** felliott left
[22:44] *** knewt2 left
[22:44] *** mberends left
[22:44] *** JodaZ left
[22:44] *** skangas left
[22:44] *** robinsmidsrod left
[22:44] *** aloha left
[22:44] *** sjohnson left
[22:44] *** flatwhatson left
[22:44] *** elb0w left
[22:44] *** sukria left
[22:44] *** PacoLinux left
[22:44] *** sbp left
[22:44] *** barika_ left
[22:44] *** oha left
[22:44] *** __sri left
[22:44] *** DarthGandalf left
[22:44] *** pmurias left
[22:44] *** VXZ left
[22:44] *** Sarten-X left
[22:44] *** Tene left
[22:44] *** zorgnax left
[22:44] *** cognominal left
[22:46] *** explorer__ joined
[22:46] *** dual joined
[22:46] *** jaldhar joined
[22:46] *** dukeleto joined
[22:46] *** icwiener joined
[22:46] *** gbacon joined
[22:46] *** Patterner joined
[22:46] *** masonkramer joined
[22:46] *** felliott joined
[22:46] *** knewt2 joined
[22:46] *** mberends joined
[22:46] *** JodaZ joined
[22:46] *** skangas joined
[22:46] *** robinsmidsrod joined
[22:46] *** aloha joined
[22:46] *** sbp joined
[22:46] *** sjohnson joined
[22:46] *** flatwhatson joined
[22:46] *** elb0w joined
[22:46] *** sukria joined
[22:46] *** PacoLinux joined
[22:46] *** Util joined
[22:46] *** hillu joined
[22:46] *** sunnavy joined
[22:46] *** tadzik joined
[22:46] *** toebu joined
[22:46] *** jerome joined
[22:46] *** phenny joined
[22:46] *** nsh_ joined
[22:46] *** barika_ joined
[22:46] *** oha joined
[22:46] *** __sri joined
[22:46] *** DarthGandalf joined
[22:46] *** kjeldahl left
[22:46] *** kjeldahl joined
[22:46] *** cognominal joined
[22:46] *** pmurias joined
[22:46] *** VXZ joined
[22:46] *** Sarten-X joined
[22:46] *** Tene joined
[22:46] *** zorgnax joined
[22:51] *** jarfhy joined
[22:52] *** takadonet joined
[22:52] *** takadonet left
[22:53] *** yarrack_logging left
[22:54] *** mikehh left
[22:54] *** Eevee left
[22:54] *** sorear left
[22:54] *** tomaw left
[22:54] *** felipe left
[22:54] *** Gothmog_ left
[22:54] *** larsen left
[22:54] *** jdv79 left
[22:54] *** pmurias left
[22:54] *** VXZ left
[22:54] *** Sarten-X left
[22:54] *** Tene left
[22:54] *** zorgnax left
[22:56] *** mikehh joined
[22:57] *** kaare_ left
[22:57] *** takadonet joined
[22:58] *** Eevee joined
[22:58] *** jdv79 joined
[22:58] *** sorear joined
[22:59] *** c9s joined
[22:59] *** jmmills joined
[22:59] *** shachaf joined
[23:01] *** [Coke] joined
[23:03] *** larsen_ joined
[23:03] *** pmurias joined
[23:03] *** VXZ joined
[23:03] *** Sarten-X joined
[23:03] *** Tene joined
[23:03] *** zorgnax joined
[23:04] <sorear> nice netsplit.

[23:05] *** shi left
[23:08] <diakopter> wb all

[23:08] *** dorlamm left
[23:10] *** zby_home_ left
[23:12] *** kraai_ left
[23:13] *** kraai_ joined
[23:14] *** shi joined
[23:16] *** envi joined
[23:26] *** pmurias left
[23:27] *** explorer__ left
[23:27] *** dual left
[23:27] *** jaldhar left
[23:27] *** dukeleto left
[23:27] *** icwiener left
[23:27] *** gbacon left
[23:27] *** Patterner left
[23:27] *** masonkramer left
[23:27] *** felliott left
[23:27] *** knewt2 left
[23:27] *** mberends left
[23:27] *** JodaZ left
[23:27] *** skangas left
[23:27] *** robinsmidsrod left
[23:27] *** aloha left
[23:27] *** sjohnson left
[23:27] *** flatwhatson left
[23:27] *** elb0w left
[23:27] *** sukria left
[23:27] *** PacoLinux left
[23:27] *** Util left
[23:27] *** sunnavy left
[23:27] *** hillu left
[23:27] *** tadzik left
[23:27] *** toebu left
[23:27] *** jerome left
[23:27] *** phenny left
[23:27] *** nsh_ left
[23:27] *** sbp left
[23:27] *** barika_ left
[23:27] *** oha left
[23:27] *** __sri left
[23:27] *** DarthGandalf left
[23:27] *** envi left
[23:27] *** plobsing left
[23:27] *** orafu left
[23:27] *** jenk left
[23:27] *** arlinius left
[23:27] *** spq1 left
[23:27] *** IllvilJa left
[23:27] *** literal left
[23:29] *** tomaw joined
[23:29] *** envi joined
[23:29] *** literal joined
[23:29] *** IllvilJa joined
[23:29] *** spq1 joined
[23:29] *** arlinius joined
[23:29] *** jenk joined
[23:29] *** orafu joined
[23:29] *** plobsing joined
[23:29] *** explorer__ joined
[23:29] *** dual joined
[23:29] *** jaldhar joined
[23:29] *** dukeleto joined
[23:29] *** icwiener joined
[23:29] *** gbacon joined
[23:29] *** Patterner joined
[23:29] *** masonkramer joined
[23:29] *** felliott joined
[23:29] *** knewt2 joined
[23:29] *** mberends joined
[23:29] *** JodaZ joined
[23:29] *** skangas joined
[23:29] *** robinsmidsrod joined
[23:29] *** aloha joined
[23:29] *** sbp joined
[23:29] *** sjohnson joined
[23:29] *** flatwhatson joined
[23:29] *** elb0w joined
[23:29] *** sukria joined
[23:29] *** PacoLinux joined
[23:29] *** Util joined
[23:29] *** hillu joined
[23:29] *** sunnavy joined
[23:29] *** tadzik joined
[23:29] *** toebu joined
[23:29] *** jerome joined
[23:29] *** phenny joined
[23:29] *** nsh_ joined
[23:29] *** barika_ joined
[23:29] *** oha joined
[23:29] *** __sri joined
[23:29] *** DarthGandalf joined
[23:30] *** lukas___ joined
[23:31] *** Gothmog_ joined
[23:33] *** ggoebel left
[23:38] *** ggoebel joined
[23:41] *** yarp joined
[23:48] *** patrickas left
