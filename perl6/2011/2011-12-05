[00:03] <colomon> o/

[00:12] *** tokuhirom left
[00:13] *** cooper left
[00:17] *** lestrrat left
[00:18] *** lichtkind left
[00:18] *** lestrrat joined
[00:22] *** patspam left
[00:24] *** Radvendii left
[00:26] *** colomon left
[00:27] *** patspam joined
[00:30] *** patspam left
[00:30] *** patspam joined
[00:32] *** Moukeddar joined
[00:33] *** jaldhar joined
[00:34] *** colomon joined
[00:37] *** toebu left
[00:39] *** jeffreykegler left
[00:58] *** toebu joined
[01:02] * diakopter eagerly awaits Pm's appearance tomorrow

[01:04] <cognominal> linuxfr published my news :)   http://linuxfr.org/news/calendriers-de-lavent-perl-5-et-perl-6

[01:06] <diakopter> "About Perl 6, given the limited common with Perl 5 in terms of language, I wonder why it is still called Perl. I feel that there is about as much in common between Perl 5 and Perl 6 between the C and assembler (keeping in mind that we can carry the assembler in C very easily)."

[01:06] <diakopter> the last comment, translated

[01:07] *** Moukeddar left
[01:08] <sorear> does the p6 faq have an entry for that yet?

[01:08] <cognominal> I made a mistake about BigInt being a special type. I forgot that had become the regular Int.

[01:09] * diakopter is having fun using Eclipse for textbook-exercises in Java. what a great IDE.

[01:09] *** cooper joined
[01:11] *** am0c joined
[01:12] *** aber joined
[01:14] *** toebu left
[01:15] *** Trashlord joined
[01:15] *** hundskatt left
[01:17] *** wolfman2000 left
[01:23] *** aloha left
[01:25] *** whiteknight joined
[01:25] *** whiteknight is now known as Guest17755

[01:26] <sorear> diakopter: I can't tell if that was sarcasm

[01:27] <colomon> sorear: just added the ability to increase the number of iterations for a window

[01:27] <colomon> (not yet pushed)

[01:33] *** shinobicl_ joined
[01:35] <diakopter> sorear: not sarcasm

[01:39] *** aloha joined
[01:40] *** shinobicl_ left
[01:41] *** bonsaikitten joined
[01:48] *** cooper left
[01:53] *** shinobicl_ joined
[01:59] *** jaldhar left
[01:59] *** jaldhar joined
[01:59] *** odoacre joined
[02:03] <djanatyn> moritz: I think I'm going to need an extension >_>

[02:13] *** abercrombie joined
[02:16] *** aber left
[02:19] *** pat_js joined
[02:20] *** shinobicl_ left
[02:21] *** jeffreykegler joined
[02:24] *** orafu left
[02:24] *** orafu joined
[02:27] *** shinobicl_ joined
[02:38] *** pat_js left
[02:39] *** Guest17755 left
[02:41] *** donri left
[02:59] *** cooper joined
[03:00] *** shinobicl_ left
[03:08] *** ggoebel left
[03:11] *** ponbiki left
[03:12] *** ponbiki joined
[03:12] *** ggoebel joined
[03:22] *** patspam left
[03:29] <colomon> sorear: just pushed a patch which allows you to write out any fractal you're viewing as a PPM file.

[03:32] *** agentzh joined
[03:32] <sorear> nifty

[03:33] *** yeltzooo joined
[03:35] *** jimmy1980 left
[03:38] *** locky88 joined
[03:42] *** jimmy1980 joined
[03:47] *** jeffreykegler left
[04:00] *** envi_ joined
[04:00] *** envi_ left
[04:18] *** pochi left
[04:20] *** pochi joined
[04:40] *** aber joined
[04:42] *** abercrombie left
[04:43] *** abercrombie joined
[04:45] *** aber left
[04:51] *** ponbiki left
[04:53] *** packetknife left
[05:02] <moritz> good morning

[05:02] <moritz> djanatyn: deadline extended by 24h

[05:03] <djanatyn> moritz: :D

[05:03] *** locky88 left
[05:03] <djanatyn> thank you. I've been playing around with roast, and Tene told me a bit about &[+]

[05:04] <moritz> djanatyn: I'd recommened to use the example code from the ticket, and replace the call to say() with a call to a test function

[05:06] *** plobsing left
[05:08] *** natureboy joined
[05:08] *** natureboy left
[05:10] *** natureboy joined
[05:11] *** natureboy left
[05:11] *** cooper left
[05:19] *** sftp left
[05:28] *** overrosy left
[06:23] *** kaleem joined
[06:35] *** molaf joined
[06:36] *** japhb_ joined
[06:36] <japhb_> On my local system:

[06:36] <japhb_> > ':16«f.8*:4[2]**:2<1*2**2>»/-:60[1,0]'.Numeric.perl

[06:36] <japhb_> -62/15

[06:36] <japhb_> \o/

[06:42] <moritz> \o/

[06:52] *** sayu joined
[06:53] *** wk joined
[06:57] *** hundskatt joined
[07:11] *** koban joined
[07:16] *** molaf left
[07:30] *** wtw joined
[07:46] <jnthn> *yawn*

[07:46] <jnthn> morning, #perl6

[07:46] <sorear> hi jnthn

[07:46] <jnthn> japhb_: Nice .Numeric work! :)

[07:46] <jnthn> o/ sorear 

[08:00] <jnthn> commute, bbs

[08:02] *** mkramer joined
[08:03] *** mkramer left
[08:04] *** jerome__ left
[08:05] *** jerome__ joined
[08:07] *** mishin joined
[08:18] <tadzik> gmorning

[08:20] <moritz> \o

[08:20] <sorear> hello

[08:21] <moritz> jnthn: t/spec/S32-array/splice.rakudo segfaults here

[08:22] <moritz> jnthn: https://gist.github.com/1432838

[08:30] <japhb> jnthn, thank you.  :-)

[08:33] <japhb> g'night all!

[08:34] <moritz> japhb: have you pushed that to a branch_

[08:34] <moritz> s/_/?/

[08:34] <moritz> japhb: if not, please do so very soon

[08:34] <moritz> ... and good night to japhb :-)

[08:34] <japhb> Sure, give me a sec.

[08:35] <japhb> OK, should be there.

[08:35] <japhb> str-numeric

[08:35] <japhb> rebased on to nom a few hours ago.

[08:35] <dalek> rakudo/str-numeric: 499ce20 | (Geoffrey Broadwell)++ | src/core/Str.pm:

[08:35] <dalek> rakudo/str-numeric: WIP snapshot of Str.Numeric rewrite

[08:35] <dalek> rakudo/str-numeric: review: https://github.com/rakudo/rakudo/commit/499ce20867

[08:35] <dalek> rakudo/str-numeric: 7e86fa8 | (Geoffrey Broadwell)++ | src/core/Str.pm:

[08:35] <dalek> rakudo/str-numeric: Remove no-longer-needed workarounds

[08:35] <dalek> rakudo/str-numeric: review: https://github.com/rakudo/rakudo/commit/7e86fa8411

[08:35] <dalek> rakudo/str-numeric: d3645a8 | (Geoffrey Broadwell)++ | src/core/Str.pm:

[08:35] <dalek> rakudo/str-numeric: Refactor Str.Numeric parse failures and pos updates so that failure messages can show exact position of error in source string; wrap a few long lines in same code sections

[08:35] <dalek> rakudo/str-numeric: review: https://github.com/rakudo/rakudo/commit/d3645a8ccc

[08:35] <dalek> rakudo/str-numeric: 6d35d8c | (Geoffrey Broadwell)++ | src/core/Str.pm:

[08:35] <dalek> rakudo/str-numeric: Support :16<f.8*2**3> and :16«f.8*:4[2]**:2<1*2**2>» style radix/multiplier/exponent style numbers in Str.Numeric; add missing ASCII value comment

[08:35] <dalek> rakudo/str-numeric: review: https://github.com/rakudo/rakudo/commit/6d35d8c699

[08:36] <japhb> It should *not* be merged until Failure handling is resolved.

[08:36] <moritz> understood

[08:37] <japhb> OK, *now* sleep &

[08:37] * sorear sleep

[08:43] *** hundskatt left
[08:44] <moritz> nomo: my class X::Foo { ... }; my class X::Foo { };

[08:44] <moritz> nom: my class X::Foo { ... }; my class X::Foo { };

[08:44] <p6eval> nom 48b979: OUTPUT«===SORRY!===␤The following packages were stubbed but not defined:␤    X::Foo␤␤»

[08:44] <moritz> works with s:g/X/Y/

[08:45] *** alvis left
[08:50] <sorear> nom: say X;

[08:50] <p6eval> nom 48b979: OUTPUT«X()␤»

[08:51] <sorear> nom: my package X { }; class X::Foo { ... }; class X::Foo { }

[08:51] <p6eval> nom 48b979:  ( no output )

[08:51] <moritz> nom: class X::Foo { ... }; class X::Foo { };

[08:51] <p6eval> nom 48b979: OUTPUT«===SORRY!===␤The following packages were stubbed but not defined:␤    X::Foo␤␤»

[08:51] <moritz> nom: ny package X { }; my class X::Foo { ... }; my class X::Foo { };

[08:52] <p6eval> nom 48b979: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&ny' called (line 1)␤»

[08:52] <moritz> nom: my package X { }; my class X::Foo { ... }; my class X::Foo { };

[08:52] <p6eval> nom 48b979:  ( no output )

[08:52] <moritz> (FWIW, the 'my' sometimes made a difference in the past)

[09:08] *** mj41 joined
[09:09] <jnthn> moritz: Delightful. A crash *inside* GC. :/

[09:10] <tadzik> yo dawg

[09:10] <jnthn> moritz: I thought we patched that declaration thing last week...

[09:11] <moritz> jnthn: it seems that the presence of other X:: packages make a difference

[09:11] <moritz> nom: my class Y::A { ... }; my class Y::A { }

[09:11] <p6eval> nom 48b979:  ( no output )

[09:11] <moritz> without them, it works

[09:12] *** Mowah_ joined
[09:12] <jnthn> Oddness. That'd mean it was installing the stub in one place, but then failing to find it when it goes looking for an existing declaration.

[09:16] <jnthn> moritz: I suspect the splice one is one of the romaing GC segfaults. I'm pretty sure it didn't happen locally for me. :(

[09:17] <moritz> jnthn: if it helps, I could give you ssh access to a linux box where it's reproducable

[09:20] <jnthn> moritz: May help. I will see if running under the debugger catches it, though will have to be this evening once I'm home.

[09:21] <moritz> jnthn: I'm building as a separate user now, to see if it can reproduce the segfault

[09:27] *** tzhs joined
[09:34] <moritz> jnthn: hm, can't easily reproduce :/

[09:36] *** jimmy1980 left
[09:40] * moritz updated http://perl6advent.wordpress.com/2011/12/01/perl-6-advent-calendar-2011/ with links to the posts

[09:42] *** jimmy1980 joined
[09:44] <jnthn> moritz: yeah, that's always the issue with GC things :(

[09:45] <jnthn> http://perl6advent.wordpress.com/2011/12/05/the-flip-flop-operator/ seems to have linebreaks in odd places

[09:46] <moritz> nom: say so 'ab' ~~ /(.)+/; say $/[0].WHAT

[09:46] <p6eval> nom 48b979: OUTPUT«Bool::True␤Parcel()␤»

[09:46] <moritz> nom: say so 'ab' ~~ /(.)+/; say $/[0].elems

[09:46] <p6eval> nom 48b979: OUTPUT«Bool::True␤2␤»

[09:46] <moritz> nom: say so 'ab' ~~ /(.)+/; say $/[0][0].Str

[09:46] <p6eval> nom 48b979: OUTPUT«Bool::True␤a␤»

[09:47] <moritz> nom: say so 'ab' ~~ /(.)+/; say $/.list.elems

[09:47] <p6eval> nom 48b979: OUTPUT«Bool::True␤1␤»

[09:47] <moritz> nom: say so 'ab' ~~ /(.)+/; say $/.list[0].elems

[09:47] <p6eval> nom 48b979: OUTPUT«Bool::True␤2␤»

[09:47] * moritz fixes the line breaks

[09:49] <moritz> even the HTML view of the posts isn't the actual HTML that appears on the page

[09:50] <moritz> nom: my @a = @( 'a' ~~ /(.)+/ ); say @a.elems; say @a[0].elems

[09:50] <p6eval> nom 48b979: OUTPUT«1␤0␤»

[09:50] *** envi_ joined
[09:50] <moritz> nom: my @a = @( 'a' ~~ /(.)+/ ); say @a[0].WHAT

[09:50] <p6eval> nom 48b979: OUTPUT«Match()␤»

[09:50] <moritz> hm, shouldn't that be a Parcel?

[09:53] <jnthn> nom: my @a = @( 'a' ~~ /(.)+/ ); say @a.perl

[09:53] <p6eval> nom 48b979: OUTPUT«Array.new(Match.new(orig => "a", from => 0, to => 1, ast => Any, list => ().list, hash => EnumMap.new()))␤»

[09:53] <jnthn> nom: say @( 'a' ~~ /(.)+/ ).perl;

[09:53] <p6eval> nom 48b979: OUTPUT«((Match.new(orig => "a", from => 0, to => 1, ast => Any, list => ().list, hash => EnumMap.new()),),).list␤»

[09:53] <jnthn> moritz: I guess the parcel flattens?

[09:55] <moritz> hm, right

[10:18] *** alim joined
[10:25] *** s1n1 left
[10:26] <dalek> rakudo/nom: e9733c5 | moritz++ | src/core/Any.pm:

[10:26] <dalek> rakudo/nom: implement item()

[10:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e9733c558a

[10:26] <dalek> roast: 8d0856d | moritz++ | S32-array/splice.t:

[10:26] <dalek> roast: unfudge an item() test

[10:26] <dalek> roast: review: https://github.com/perl6/roast/commit/8d0856d6b9

[10:28] * jnthn wonders what shape the star repo is in with respect to nom

[10:30] *** overrosy joined
[10:32] *** mishin left
[10:38] *** sayu left
[10:46] *** alim_ joined
[10:47] *** alvis joined
[10:49] *** alim left
[10:49] *** alim_ is now known as alim

[10:51] *** overrosy left
[10:53] *** overrosy joined
[10:55] *** alim left
[10:55] *** alim joined
[11:13] *** Maddingue joined
[11:23] *** xinming left
[11:24] *** overrosy left
[11:25] *** xinming joined
[11:25] *** alim left
[11:25] *** alim joined
[11:33] *** odoacre left
[11:35] *** overrosy joined
[11:40] *** overrosy left
[11:41] *** overrosy joined
[11:42] *** mj41 left
[12:03] *** lestrrat left
[12:04] *** lestrrat joined
[12:13] *** Psyche^ joined
[12:16] *** Patterner left
[12:16] *** Psyche^ is now known as Patterner

[12:19] *** bluescreen10 joined
[12:33] <dalek> roast: 445d836 | moritz++ | S0 (2 files):

[12:33] <dalek> roast: rakudo unfudges

[12:33] <dalek> roast: review: https://github.com/perl6/roast/commit/445d8362cb

[12:33] <dalek> roast: 97c4f95 | moritz++ | S03-smartmatch/any-hash (2 files):

[12:33] <dalek> roast: rename a smartmatch file, and clean in up

[12:33] <dalek> roast: review: https://github.com/perl6/roast/commit/97c4f95b2b

[12:35] <dalek> rakudo/nom: d0c1523 | moritz++ | t/spectest.data:

[12:35] <dalek> rakudo/nom: track test file rename

[12:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d0c1523c0a

[12:41] *** plobsing joined
[12:59] *** jimmy1980 left
[13:00] *** jimmy1980 joined
[13:10] *** muixirt joined
[13:12] *** plobsing left
[13:13] *** araujo left
[13:16] *** araujo joined
[13:16] *** araujo left
[13:16] *** araujo joined
[13:22] <dalek> rakudo/nom: 568aed7 | moritz++ | lib/Test.pm:

[13:22] <dalek> rakudo/nom: [Test] fix typo and error diagnostics

[13:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/568aed7ea0

[13:30] *** jimmy1980 left
[13:33] * felher happily reads through the perl6 advent calendar :)

[13:35] *** jimmy1980 joined
[13:37] <dalek> rakudo/nom: cd3a5d7 | coke++ | t/spectest.data:

[13:37] <dalek> rakudo/nom: track failure modes

[13:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cd3a5d739b

[13:40] <muixirt> perl6: for 1..20 { .say if $_ == 9  ff  $_ == 13; }

[13:40] <p6eval> niecza v12-3-g193ca57: OUTPUT«9␤10␤11␤12␤13␤»

[13:40] <p6eval> ..pugs b927740: OUTPUT«*** No such subroutine: "&infix:ff"␤    at /tmp/WJIEomF78Z line 1, column 21-42␤»

[13:40] <p6eval> ..rakudo d0c152: OUTPUT«===SORRY!===␤Flip flop operators are not yet implemented at line 1, near "  $_ == 13"␤»

[13:43] *** kaleem left
[13:44] <dalek> roast: ae9d8ff | moritz++ | S (2 files):

[13:44] <dalek> roast: fudge and correct tests

[13:44] <dalek> roast: review: https://github.com/perl6/roast/commit/ae9d8ff453

[13:44] <moritz> nom: class C1 { }; class C2 is C1 { }; sub f(C1 @x) { }; my C2 @y; f @y

[13:44] <p6eval> nom d0c152: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'f' will never work with argument types (C2) (line 1)␤    Expected: :(Positional @x)␤»

[13:45] <moritz> jnthn: bug, or NYI?

[13:45] <jnthn> moritz: Definite bug, I know pretty much exactly what it is.

[13:46] <moritz> jnthn: tested in S14-roles/parameter-subtyping.t

[13:46] <jnthn> moritz: There's a far simpler case of it too

[13:46] *** daxim joined
[13:46] <jnthn> nom: my Int @x; my Int @y; @x := @y;

[13:46] <p6eval> nom d0c152: OUTPUT«Type check failed in binding␤  in block <anon> at /tmp/3zslD9JDm7:1␤  in <anon> at /tmp/3zslD9JDm7:1␤»

[13:46] <jnthn> nom: my @x; @x := 42; # also related

[13:46] <p6eval> nom d0c152:  ( no output )

[13:48] <dalek> rakudo/nom: 15ba074 | moritz++ | t/spectest.data:

[13:48] <dalek> rakudo/nom: run another test file

[13:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/15ba074ad1

[13:48] *** alvis left
[13:52] *** cognominal_ joined
[13:56] *** ispeak_ joined
[14:05] *** shinobicl joined
[14:05] <colomon> moritz++

[14:05] <aloha> Karma for moritz is now 2842

[14:08] *** mtk joined
[14:10] * jnthn wonders why aloha found that number more noteworthy than, say, any other one, and decided to tell us about it :)

[14:11] *** jimmy1980 left
[14:11] *** jimmy1980 joined
[14:16] *** tzhs left
[14:17] <moritz> jnthn++

[14:17] <aloha> Karma for jnthn is now 2464

[14:17] <moritz> oh NOE!

[14:17] <[Coke]> aloha, source?

[14:17] <[Coke]> aloha, master?

[14:18] <[Coke]> it's https://github.com/bacek/aloha, btw. looking now.

[14:19] *** koban left
[14:20] <[Coke]> the source hasn't been updated since February 16, 2011.

[14:20] <moritz> maybe it uses some modules that have been updated

[14:22] *** tzhs joined
[14:22] <[Coke]> http://search.cpan.org/~diz/Bot-BasicBot-Pluggable-0.95/lib/Bot/BasicBot/Pluggable/Module/Karma.pm

[14:23] <[Coke]> Responds with the new karma for <thing> unless karma_change_response is set to a false value.

[14:23] <[Coke]> looks fixable, anyway. ;)

[14:23] <moritz> [Coke]++

[14:23] <[Coke]> explain [Coke

[14:23] <aloha> positive: nothing; negative: nothing; overall: 0.

[14:23] <[Coke]> explain [Coke]

[14:23] <aloha> positive: nothing; negative: nothing; overall: 0.

[14:23] <[Coke]> explain moritz

[14:23] <aloha> positive: | S02-types/hash.t: (dalek), | src/metamodel/how/NQPMu.pm: (dalek), | LHF.markdown: (dalek); negative: git commit -a  without checking git diff first (moritz_), we have your karma. fix bug to get it back !:) (masak); overall: 2842.

[14:24] <[Coke]> seen diz?

[14:24] <aloha> diz was last seen in  15313 days 14 hours ago .

[14:24] <[Coke]> nom: say 15313 / 365.24

[14:24] <p6eval> nom 15ba07: OUTPUT«41.925856970759␤»

[14:24] *** alim_ joined
[14:25] <jnthn> ...is IRC evem 42 years old? :)

[14:25] <[Coke]> seen thingthatdoesntexit?

[14:25] <aloha> thingthatdoesntexit was last seen in  15313 days 14 hours ago .

[14:25] <[Coke]> Looks like a bug, going back to epoch.

[14:25] <[Coke]> (which is slightly older than I am, so I spot it often. ;)

[14:26] *** alim left
[14:26] *** alim_ is now known as alim

[14:26] <[Coke]> That's probably http://search.cpan.org/~diz/Bot-BasicBot-Pluggable-0.95/lib/Bot/BasicBot/Pluggable/Module/Seen.pm

[14:31] *** alim left
[14:31] *** alim joined
[14:42] <[Coke]> iwbni perl's advent calendar shared a feed every year.

[14:42] <[Coke]> (perl 5, that is)

[14:47] *** risou_awy is now known as risou

[14:58] *** PacoLinux joined
[14:59] *** sftp joined
[15:04] *** Trashlord left
[15:07] *** donri joined
[15:12] *** agentzh left
[15:12] <[Coke]> aloha: ask rjbs if we can get a perl5 advent calendar RSS feed that will show all years, not just the current year.

[15:12] <[Coke]> phenny: ask rjbs if we can get a perl5 advent calendar RSS feed that will show all years, not just the current year.

[15:12] <phenny> [Coke]: I'll pass that on when rjbs is around.

[15:18] <dalek> rakudo/nom: d9a22f4 | moritz++ | src/core/List.pm:

[15:18] <dalek> rakudo/nom: coerce the RHS to Int in infix:<xx>

[15:18] <dalek> rakudo/nom: 

[15:18] <dalek> rakudo/nom: fixes things like  $val xx @array

[15:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d9a22f4004

[15:18] <dalek> roast: d9bb314 | moritz++ | S03-operators/repeat.t:

[15:18] <dalek> roast: rakudo unfudge

[15:18] <dalek> roast: review: https://github.com/perl6/roast/commit/d9bb314b67

[15:21] * moritz enjoyed watching http://vimeo.com/9270320

[15:23] *** Trashlord joined
[15:24] <moritz> the information density isn't all that high, but it's... enjoyable nonethelss

[15:30] *** tokuhirom joined
[15:31] <dalek> rakudo/nom: b8ee2ed | coke++ | t/spectest.data:

[15:31] <dalek> rakudo/nom: track failure modes

[15:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b8ee2ed119

[15:37] *** jimmy1980 left
[15:43] *** jimmy1980 joined
[15:43] *** kaare_ joined
[15:43] <moritz> nom: sub f(:$a!, $b) { }

[15:43] <p6eval> nom d9a22f: OUTPUT«===SORRY!===␤Cannot put required parameter after variadic parameters at line 1, near ") { }"␤»

[15:44] <moritz> :$a! isn't optional, so that error message makes little sense

[15:44] <moritz> std: sub f(:$a!, $b) { }

[15:44] <p6eval> std be1f10e: OUTPUT«[31m===[0mSORRY![31m===[0m␤Cannot put required parameter after variadic parameters at /tmp/xI4t8RynP1 line 1:␤------> [32msub f(:$a!, $b[33m⏏[31m) { }[0m␤Potential difficulties:␤  $b is declared but not used at /tmp/xI4t8RynP1 line 1:␤------> [32msub f(:$a!,…

[15:45] <jnthn> hm, fail

[15:45] <jnthn> Should probably say "after named parameters" or so...

[15:45] <jnthn> At least Rakudo is consistent with STD here ;)

[15:46] <tadzik> 6 failures in t/spec/S05-mass/properties-general.rakudo, known?

[15:46] <dalek> roast: 3f59192 | moritz++ | S12-methods/what.t:

[15:46] <dalek> roast: correct tests that called positional arguments by name

[15:46] <dalek> roast: review: https://github.com/perl6/roast/commit/3f591925fe

[15:48] *** wtw left
[15:51] *** fsergot left
[15:53] <[Coke]> tadzik: I'll kick off a spectest here.

[15:54] <jnthn> I have vague memories of hearing about differeing pass/results on those tests.

[15:54] <jnthn> Maybe different ICU version or something...

[15:55] <tadzik> moritz: commented https://github.com/perl6/roast/commit/3f591925fe

[15:55] <moritz> (properties-general) fails here too

[15:55] <moritz> I suspect different ICU version too

[15:56] <moritz> tadzik: there's no mention of Multi or MultiSub in the specs

[15:57] <jnthn> It doesn't make any sense since the multi spec changed 

[15:57] <tadzik> so what does this RT expect?

[15:57] <tadzik> oh, it's outdated I guess

[15:58] <jnthn> decommute ^

[15:58] <jnthn> &

[15:58] <moritz> tadzik: it is

[15:58] <tadzik> okay

[15:59] *** ab5tract joined
[16:00] <moritz> the ticket just wanted it to not Null PMC Access

[16:01] <tadzik> okay

[16:02] <dalek> roast: 3d1207b | moritz++ | S02-names-vars/names.t:

[16:02] <dalek> roast: unfudge passing tests

[16:02] <dalek> roast: review: https://github.com/perl6/roast/commit/3d1207b50e

[16:02] *** ispeak_ left
[16:02] <dalek> rakudo/nom: bef928a | moritz++ | src/Perl6/Grammar.pm:

[16:02] <dalek> rakudo/nom: fix parsing of "enum" as identifier

[16:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bef928ab68

[16:04] *** lichtkind joined
[16:06] <lichtkind> i think i have a advent topic

[16:06] <colomon> \o/

[16:06] <lichtkind> the new hash methods

[16:06] <lichtkind> or is that taken?

[16:06] *** MayDaniel joined
[16:07] <lichtkind> i checked old calendars

[16:07] <lichtkind> by taken i mean in your plan

[16:07] <tadzik> new hash methods?

[16:07] <lichtkind> y

[16:08] <moritz> what new hash methods?

[16:08] <lichtkind> allright last year they were new

[16:08] <moritz> what hash methods?

[16:09] <moritz> classify?

[16:09] <moritz> ... and categorize

[16:09] <lichtkind> yes

[16:10] <moritz> lichtkind: then please add your name and topic to the schedule file in the mu repo

[16:10] <lichtkind> moritz: i better write first the text

[16:11] <moritz> nom: $_ = 3; for 1 -> $a { $_ = 5 }; .say

[16:11] <p6eval> nom b8ee2e: OUTPUT«5␤»

[16:12] *** tzhs left
[16:13] *** tokuhirom left
[16:14] *** fsergot joined
[16:14] *** alim_ joined
[16:15] <moritz> nom: say &[<=>].WHAT

[16:15] <p6eval> nom b8ee2e: OUTPUT«Sub()␤»

[16:15] *** alim left
[16:15] *** alim_ is now known as alim

[16:16] <moritz> nom: say &[<=>].('1', '4'(

[16:16] <p6eval> nom b8ee2e: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 1␤»

[16:16] <moritz> nom: say &[<=>].('1', '4')

[16:16] <p6eval> nom b8ee2e: OUTPUT«-1␤»

[16:17] <TimToady> nom: say '1'.&[<=>]('4')

[16:17] <p6eval> nom b8ee2e: OUTPUT«-1␤»

[16:18] <moritz> nom: say sort &[<=>], <1 4 3 6 2>

[16:18] <p6eval> nom b8ee2e: OUTPUT«No applicable candidates found to dispatch to for 'infix:<<=>>'. Available candidates are:␤:(int $a, int $b)␤:(num $a, num $b)␤:(Int $a, Int $b)␤:(Num $a, Num $b)␤:(Instant $a, Instant $b)␤:(Date $a, Date $b)␤:(Real $a, Real $b)␤:(Any $a, Any $b)␤␤  in sub infix:<<=>>…

[16:18] * moritz doesn't understand why

[16:19] <moritz> nom: say &[<=>].arity

[16:19] <p6eval> nom b8ee2e: OUTPUT«1␤»

[16:19] <moritz> nom: say &[<=>].count

[16:19] <p6eval> nom b8ee2e: OUTPUT«1␤»

[16:20] <moritz> ah

[16:20] <moritz> so it tries to invoke it with one argument only

[16:20] <moritz> jnthn: see above

[16:20] * moritz goes through the nom regressions in roast

[16:20] <TimToady> though &[] is supposed to force 2-arg

[16:21] <moritz> I know

[16:21] <TimToady> maybe because chaining?

[16:21] <TimToady> er, wait, no

[16:22] <moritz> and that implies that the tests that do   ok &infix:<==> === &[==]  are wrong

[16:22] <TimToady> nom: say &[cmp].arity

[16:22] <p6eval> nom b8ee2e: OUTPUT«2␤»

[16:22] <moritz> TimToady: no, default values for reduction

[16:22] <moritz> (I guess)

[16:23] <moritz> because if &[==] forces arity 2, and &infix:<==> does not, they can't be the same

[16:23] <TimToady> nom: say &[leg].arity

[16:23] <p6eval> nom b8ee2e: OUTPUT«1␤»

[16:23] <TimToady> leg is also 1

[16:23] <TimToady> but not cmp?!?

[16:24] *** MayDaniel left
[16:29] *** alim left
[16:29] *** alim joined
[16:37] *** MayDaniel joined
[16:40] *** wk left
[16:42] <[Coke]> https://gist.github.com/1434231 # for tadzik - i miss being able to just paste this into a bot on the web.

[16:43] <tadzik> [Coke]: I didn't get that failures, and I have the same TODO passing

[16:43] <moritz> I can declare a  my constant i = 1i; if I put it into SAFE.setting

[16:43] <[Coke]> tadzik: just unfudged that todo passing.

[16:43] <tadzik> ok cool

[16:43] <moritz> but it loops if I put it into src/core/ somwhere

[16:44] <[Coke]> tadzik: you have a 64 bit box?

[16:44] <moritz> (compilation loops, that is)

[16:44] <tadzik> [Coke]: yes

[16:44] <dalek> roast: 29ee946 | coke++ | S03-operators/range.t:

[16:44] <dalek> roast: unfudge for rakudo/nom

[16:44] <dalek> roast: review: https://github.com/perl6/roast/commit/29ee9462ab

[16:45] <jnthn> moritz: compilation loops probably means exception handling fail :/

[16:45] <[Coke]> tadzik: that'll do it.

[16:45] <jnthn> Or at least, that's what I've tended to encounter.

[16:45] *** fsergot left
[16:45] <jnthn> &[+] is kinda cheating at the moment - I didn't make it filter to arity 2. Not sure what they best way to do that is...it'd kinda suck to re-compute the arity-2 list every time, but I'm not sure where to stash it either.

[16:47] <PerlJam> jnthn: got a second?  Could you explain to me the process by which method lookup happens?  I think the first time the method is called, we get find_method, and the result of that is put in the cache and then executed.  Future method calls read from the cache.  Is that correct?

[16:48] <jnthn> PerlJam: no

[16:48] <jnthn> PerlJam: At compose time, we pre-emptively populate the method cache.

[16:48] <PerlJam> ah.

[16:48] <jnthn> PerlJam: NQP doesn't have to support any kind of dispatch failover, so it goes a step further and marks the cache as authoritative, meaning that normal dispatches never have to call .^find_method

[16:50] <PerlJam> Hmm

[16:50] <jnthn> Well, I should say NQP's meta-objects

[16:51] <jnthn> We have an interest in being able to say "no such method" quite fast in NQP.

[16:51] <PerlJam> jnthn: I was looking at Grammar::Debugger ... correct me if I'm wrong, but doesn't it create a new routine on each method call?

[16:52] <PerlJam> jnthn: I was thinking the way to optimize that was to call .wrap() on the method once and put that in the cache, but I guess I'd have to introspect the method names and call .wrap on them at compose time to populate the cache appropriately.

[16:53] <jnthn> PerlJam: If you wrap it then you'll damage to original.

[16:53] <jnthn> *the

[16:54] <jnthn> PerlJam: The answer is to cache the computed closures.

[16:54] <jnthn> PerlJam: It'd make things faster, though I'm not sure how much.

[16:56] <PerlJam> okay, thanks for the input (I just think about these things in the interstices when I'm procrastinating at work :)

[17:02] *** kaleem joined
[17:04] <tadzik> bug of the day: Foo *a = malloc(...); memset(&a, ...);

[17:05] <jnthn> oops :)

[17:05] <tadzik> (wtf, why did this malloc return 0)

[17:05] <mux> yes, why? that's actually an interesting question

[17:05] <tadzik> memset expects a pointer to the memory location

[17:05] <mux> oh scratch that, I didn't see the erroneous &

[17:05] <tadzik> me neither

[17:05] <mux> I thought you were talking about something else entirely :D

[17:06] <tadzik> me too

[17:06] <tadzik> :)

[17:06] <flussence> I vaguely remember reading somewhere that 0 is a valid return value for malloc...

[17:06] <mux> flussence: it is

[17:06] <mux> the thing is it rarely happens in practice

[17:06] *** fsergot joined
[17:06] <tadzik> it is, but it would be... extremely suprising :)

[17:06] <mux> (by 0 I meant NULL here)

[17:06] <flussence> or was it that it's a valid input value...

[17:06] <tadzik> I started to think "so malloc got broken and the system still runs? wow"

[17:09] *** mantovani left
[17:10] *** fsergot left
[17:15] *** ab5tract left
[17:17] *** jeffreykegler joined
[17:25] <ashleydev> on the iphone that wouldn't be as rare

[17:26] <ashleydev> but if you wait a while it'll clear out some memory space and it'll probably work the 2nd time

[17:29] *** alim left
[17:31] *** fsergot joined
[17:33] *** cognominal___ joined
[17:35] *** flussence_ joined
[17:35] *** flussence left
[17:36] *** cognominal_ left
[17:36] *** flussence_ is now known as flussence

[17:36] <sorear> good * #perl6

[17:38] <ashleydev> *

[17:38] *** jeffreykegler left
[17:39] *** fsergot left
[17:42] <colomon> o/

[17:43] <arnsholt> flussence: malloc will return NULL if it failed to allocate the requested amount of memory

[17:48] <colomon> woah.  one of the political blogs out there has just done a post inspired by the Flip-Flop operator post.

[17:50] <moritz> colomon: URL?

[17:50] <colomon> theothermccain.com

[17:50] <colomon> there's a trackback, that's how I learned about it.

[17:50] <colomon> http://theothermccain.com/2011/12/05/software-imitates-politics-perl-flip-flop/

[17:53] *** mj41 joined
[17:54] <arnsholt> colomon: That was one of the less coherent posts I've read in a while =)

[17:54] <colomon> I wouldn't be surprised if it doubles our page views just by accident, though.  :)

[17:55] <arnsholt> Indeed =)

[17:55] <arnsholt> Speaking of page views, has the advent calendar been submitted to HN/Slashdot?

[17:55] <moritz> arnsholt: I'm not aware of a /. submission

[17:56] <moritz> arnsholt: but it would be great to have one

[17:58] <[Coke]> colomon++

[17:58] <aloha> Karma for colomon is now 183

[17:59] *** s1n1 joined
[17:59] <colomon> [Coke]: er, what have I done now?  ;)

[18:00] <arnsholt> moritz: This is the third year of Perl 6 advent, no?

[18:00] <colomon> arnsholt: yes

[18:01] *** flussence left
[18:02] *** flussence joined
[18:05] <[Coke]> moritz: and still no real production release? ;) 

[18:08] <[Coke]> colomon: whoops! I thought you wrote the blog post. anyway, thanks for noting the linkback.

[18:08] <arnsholt> There we go. Submitted to slashdot as well: http://slashdot.org/submission/1870962/perl-6-advent-calendar

[18:08] <[Coke]> PerlJam++ # No, I still don't think I'll ever use the flipflop operator.

[18:08] <aloha> Karma for perljam is now 55

[18:13] *** japhb_ left
[18:13] <colomon> I've never used the flipflop, but after reading this it does feel to me like there is some cool application for it, hiding off in the shadows somewhere...

[18:14] <sorear> flipflop's reason for existing is, like so many other Perl feaures, s2p

[18:15] *** fsergot joined
[18:15] <sorear> '/foo/,/bar/d' becomes 'print unless /foo/ ff /bar/'

[18:15] <PerlJam> I used to used flip-flop all the time in Perl 5 (not so much lately) but I still had a hard time explaining it in words.

[18:25] *** risou is now known as risou_awy

[18:31] *** MayDaniel left
[18:33] *** dakkar left
[18:39] <moritz> PerlJam: the weird thing is that the flip-flop operator carries state

[18:39] <moritz> PerlJam: unlike any/most other operators

[18:39] *** GlitchMr joined
[18:41] <colomon> moritz: yeah, I was wondering how it was implemented....

[18:45] *** birdwindupbird joined
[18:45] *** birdwindupbird left
[18:50] *** fridim_ joined
[19:06] *** kaleem left
[19:09] <[Coke]> my $foo = 42; ($foo, "stuff")[0] = 24; say $foo;

[19:10] <[Coke]> perl6: my $foo = 42; ($foo, "stuff")[0] = 24; say $foo;

[19:10] <p6eval> pugs b927740: OUTPUT«*** Can't modify constant item: VRef <Scalar:0x7f41cc366fa1>␤    at /tmp/g6RkzZzOIu line 1, column 15-38␤»

[19:10] <p6eval> ..rakudo bef928: OUTPUT«Cannot assign to a readonly variable or a value␤  in block <anon> at /tmp/eROaY_J02E:1␤  in <anon> at /tmp/eROaY_J02E:1␤»

[19:10] <p6eval> ..niecza v12-3-g193ca57: OUTPUT«24␤»

[19:10] <[Coke]> std: my $foo = 42; ($foo, "stuff")[0] = 24; say $foo;

[19:10] <p6eval> std be1f10e: OUTPUT«ok 00:01 124m␤»

[19:10] <[Coke]> b: my $foo = 42; ($foo, "stuff")[0] = 24; say $foo;

[19:10] <p6eval> b 1b7dd1: OUTPUT«24␤»

[19:10] <[Coke]> are b and niecza right?

[19:11] <moritz> I think so

[19:11] *** shinobicl left
[19:12] *** packetknife joined
[19:14] *** hundskatt joined
[19:17] *** GlitchMr42 joined
[19:18] *** GlitchMr left
[19:18] *** GlitchMr42 is now known as GlitchMr

[19:18] <dalek> roast: 88b5007 | coke++ | S02-types/lists.t:

[19:18] <dalek> roast: Convert regression to RT

[19:18] <dalek> roast: review: https://github.com/perl6/roast/commit/88b5007222

[19:35] *** alester joined
[19:38] *** birdwindupbird1 joined
[19:38] *** birdwindupbird1 left
[19:43] *** GlitchMr left
[19:43] *** Trashlord left
[19:45] *** Trashlord joined
[19:46] *** Trashlord is now known as Guest12550

[19:47] *** alvis joined
[19:47] *** raiph joined
[19:51] *** bluescreen10 left
[19:54] *** daxim left
[19:55] <raiph> greetings, flying camels

[19:55] <tadzik> hello raiph 

[20:02] *** mj41 left
[20:03] <colomon> nom: say 'This "is" "really" a test'.comb(/ <-["]>/)

[20:04] <p6eval> nom bef928: OUTPUT«T h i s   i s   r e a l l y   a   t e s t␤»

[20:04] <colomon> oooo, right in one!  :)

[20:06] *** bluescreen10 joined
[20:16] *** jaldhar left
[20:19] *** mj41 joined
[20:29] *** miso2217 joined
[20:30] *** benabik left
[20:30] *** benabik joined
[20:34] *** ksi joined
[20:36] *** localhost left
[20:37] *** localhost joined
[20:38] *** envi_ left
[20:47] *** miso2217 left
[20:49] *** fsergot left
[20:53] *** muixirt left
[20:56] *** molaf joined
[20:58] *** s1n1 left
[21:02] *** Moukeddar joined
[21:05] *** kcwu left
[21:08] <felher> If i have a grammar, consisting only of regexes (which i think do backtrack) and i have a regex of structure 'regex A { \h* [<B>] \h* }' and change it to 'regex A { \h* [<A>|<B>] \h* }', how can the first parse something that the second can not? I'm only adding alternatives, am i not?

[21:09] <[Coke]> could have negative assertions in <A>, no?

[21:09] <arnsholt> Or could be some kind of LTMy bug

[21:10] <jnthn> We don't do LTM on alternations yet in nom, fwiw.

[21:10] *** cognominal_ joined
[21:10] <arnsholt> Then probably not an LTMy bug =)

[21:10] <felher> What workes is http://paste.pocoo.org/show/516795/

[21:10] <felher> what doesn't is: http://paste.pocoo.org/show/516793/

[21:11] <diakopter> are you using nom?

[21:11] *** Moukeddar left
[21:11] <felher> diakopter: yes

[21:11] *** fsergot joined
[21:12] <diakopter> probably it doesn't work because backtracking into subrules doesn't work

[21:13] *** cognominal___ left
[21:14] <felher> diakopter: Yeah, that would explain it. Thnx :)

[21:29] *** shinobicl joined
[21:36] *** aloha left
[21:36] *** bluescreen10 left
[21:37] *** jimmy1980 left
[21:43] *** jimmy1980 joined
[21:47] *** molaf left
[21:51] *** aloha joined
[21:52] *** bluescreen10 joined
[21:57] *** Mowah_ left
[21:59] *** mberends joined
[21:59] <mberends> \o/

[22:00] * mberends iz riting teh next p6advent blogpost :0

[22:01] <colomon> mberends++

[22:01] * colomon is cooking noms and swearing at LilyPond

[22:02] * jnthn is feeling way too tired after somehow only managing 4 hours of sleep last night

[22:08] * colomon sometimes thinks LilyPond was designed by the STEP specific committee...

[22:08] *** tokuhirom joined
[22:20] *** mj41 left
[22:23] * jnthn manages to make 5000 tests fail

[22:24] <jnthn> Fixed a longstanding RT though ;)

[22:25] *** packetknife left
[22:28] <benabik> 5000 failures to fix one bug?  Nice ratio.  ;-)

[22:28] <mux> that's one badass fix

[22:30] <jnthn> Yeah, turns out that losing the type constraints on every parameter works wonders for failing tests.

[22:30] *** kaare_ left
[22:32] *** envi_ joined
[22:35] *** japhb_ joined
[22:35] *** packetknife joined
[22:35] <japhb_> jnthn, I think you should call that a win.  ;-)

[22:38] *** ksi left
[22:39] *** Guest12550 left
[22:40] <jnthn> :P

[22:40] <jnthn> Got it fixed now

[22:40] *** Trashlord joined
[22:40] <jnthn> Busted split...well, because it does something bad.

[22:42] <japhb_> .oO( Bad method!  No biscuit! )

[22:43] <jnthn> Relied on @foo := ... not actually enforcing the sigil.

[22:43] <jnthn> Which I've got fixed locally.

[22:43] <benabik> ouch.

[22:43] <jnthn> Not sure Rakudo's ever got this right before

[22:45] *** wolfman2000 joined
[22:49] <japhb_> jnthn, out of curiosity, what are you working on?

[22:50] <dalek> roast: c486ab7 | jnthn++ | S14-roles/parameter-subtyping.t:

[22:50] <dalek> roast: Correct a test, unfudge another.

[22:50] <dalek> roast: review: https://github.com/perl6/roast/commit/c486ab7028

[22:50] <dalek> roast: 4f77025 | jnthn++ | S14-roles/parameterized-type.t:

[22:50] <dalek> roast: Turns out we still passed this test for the wrong reasons; fudge it. :(

[22:50] <dalek> roast: review: https://github.com/perl6/roast/commit/4f770256f5

[22:51] <dalek> rakudo/nom: 375bbe8 | jnthn++ | src/ (3 files):

[22:51] <dalek> rakudo/nom: Refactor to static type handling, so it relies on the bind constraint rather than the container descriptor. Fixes my @foo := 42; not failing, plus avoids giving the optimizer a bunch of crappy type info so it gives false positives when analyzing parameterized role arguments.

[22:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/375bbe8d0a

[22:51] <dalek> rakudo/nom: 32f00e7 | jnthn++ | src/core/Str.pm:

[22:51] <dalek> rakudo/nom: We now enforce the sigil when binding; fix split, which worked based on that check being missing.

[22:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/32f00e75f6

[22:52] <dalek> rakudo/nom: 40b3369 | jnthn++ | src/core/Array.pm:

[22:52] <dalek> rakudo/nom: First bit of enforcing typed array types.

[22:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/40b3369d0c

[22:52] <dalek> rakudo/nom: 104beb8 | jnthn++ | t/spectest.data:

[22:52] <dalek> rakudo/nom: We can now run and pass all of parameter-subtyping.t.

[22:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/104beb802e

[22:52] <jnthn> japhb_: That lot ;)

[22:52] <jnthn> japhb_: Another yak shave for doing arrays in NCI decently.

[22:52] <japhb_> Ah, gotcha!

[22:53] *** imarcusthis left
[22:55] * jnthn marks a 3 year old RT as testneeded

[22:56] <jnthn> eek, German spam in the RT queue

[22:56] <jnthn> "pray! Entspannt, Erfrischt, Macht fit!"

[22:56] <jnthn> phenny: "pray! Entspannt, Erfrischt, Macht fit!"?

[22:56] <phenny> jnthn: The de to en translation failed, sorry!

[22:56] <jnthn> aww

[22:56] * jnthn wanted to learn 3 new words :)

[22:57] <benabik> translate.google.com: Pray! Relaxed, refreshed, might fit!

[22:58] <jnthn> ah

[22:58] <jnthn> I'm pretty sure "might fit" is a bad translation.

[22:58] *** plobsing joined
[22:58] <jnthn> It's "might" as in "power", iiuc.

[23:00] <jnthn> nom: my &foo = 42

[23:00] <p6eval> nom bef928: OUTPUT«Type check failed in assignment to '&foo'; expected 'Callable' but got 'Int'␤  in block <anon> at /tmp/DXxkH5_axL:1␤  in <anon> at /tmp/DXxkH5_axL:1␤»

[23:01] <jnthn> \o/

[23:07] *** wolfman2_ joined
[23:07] *** jimmy1980 left
[23:08] *** wolfman2000 left
[23:17] *** jimmy1980 joined
[23:24] <dalek> roast: 3f1e455 | jnthn++ | S16-filehandles/filetest.t:

[23:24] <dalek> roast: Fudging; verification on a platform other than Windows would be helpful.

[23:24] <dalek> roast: review: https://github.com/perl6/roast/commit/3f1e4558ab

[23:25] <lichtkind> jnthn: correct translation is: makes agile

[23:25] <dalek> rakudo/nom: e5cf070 | jnthn++ | src/core/IO.pm:

[23:25] <dalek> rakudo/nom: Re-instate getc.

[23:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e5cf070eec

[23:25] <dalek> rakudo/nom: f346f0a | jnthn++ | t/spectest.data:

[23:25] <dalek> rakudo/nom: Run S16-io/getc.t.

[23:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f346f0a456

[23:25] <dalek> rakudo/nom: 7bc7c6e | jnthn++ | src/core/IO.pm:

[23:25] <dalek> rakudo/nom: Add back .z file test; filetest.t now seems close to working.

[23:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7bc7c6ea80

[23:25] <dalek> rakudo/nom: 74c7491 | jnthn++ | t/spectest.data:

[23:25] <dalek> rakudo/nom: Run filetest.t.

[23:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/74c7491831

[23:25] <jnthn> Clearly the spam was trying to sll us scrum training. :)

[23:25] <jnthn> *sell

[23:27] <lichtkind> something like that :)

[23:29] <diakopter> I will ScrumMaster your Requestor Sprint Backlog with Artifacts to Story

[23:30] <lichtkind> diakopter: now i have a full row :)

[23:30] *** tokuhirom left
[23:32] *** cooper joined
[23:37] *** envi_ left
[23:44] *** dalek left
[23:44] *** lestrrat left
[23:44] *** dalek joined
[23:44] *** ChanServ sets mode: +v dalek

[23:44] *** lestrrat joined
[23:45] *** risou_awy is now known as risou

[23:47] <dalek> roast: 62c60f6 | jnthn++ | S12-introspection/walk.t:

[23:47] <dalek> roast: Bring walk.t in line with the spec.

[23:47] <dalek> roast: review: https://github.com/perl6/roast/commit/62c60f6040

[23:48] <mberends> http://perl6advent.wordpress.com/2011/12/05/tetris-on-niecza/ came out slightly early, please comment :-)

[23:50] <jnthn> mberends++ # looks good

[23:51] <mberends> thanks jnthn

[23:51] <diakopter> +1

[23:53] * diakopter learns about the flip-flop operator for the first time

[23:54] *** jimmy1980 left
[23:54] <dalek> rakudo/nom: 6a15ccd | jnthn++ | src/core/Mu.pm:

[23:54] <dalek> rakudo/nom: Implement Mu.WALK.

[23:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6a15ccd742

[23:54] <dalek> rakudo/nom: ded9695 | jnthn++ | t/spectest.data:

[23:54] <dalek> rakudo/nom: Turn on S12-introspection/walk.t.

[23:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ded96950e0

[23:59] *** risou is now known as risou_awy

