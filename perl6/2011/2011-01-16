[00:00] <sorear> time profiling isn't currently available; when optimizing, I rely on NIECZA_TRACE_CALLS and the Mono profiler

[00:00] <pmurias> so it will take too long?

[00:00] <dukeleto> sorear: perhaps you can use redo

[00:00] <pmurias> what's redo?

[00:00] <dukeleto> https://github.com/apenwarr/redo

[00:01] <sorear> the Mono profiler can produce exclusive time information for Perl 6 calls, and then I correlate that with the call graph

[00:01] <dukeleto> djb's invention to replace make, implemented by someone else who is very talented

[00:01] <sorear> pmurias: more like "forever" for me; the build already swaps

[00:01] <snarkyboojum> dukeleto: redo doesn't work on windows though and requires python on all other platforms atm right?

[00:01] <pmurias> sorear: swaps?

[00:02] <pmurias> sorear: how much RAM do you have?

[00:02] *** sgarthp left
[00:02] <dukeleto> snarkyboojum: i believe there is a simple redo that comes with the python one, that only requires /bin/sh

[00:02] <snarkyboojum> dukeleto: I thought that was more a proof of concept, but still doesn't work on windows I guess

[00:03] <sorear> pmurias: 384MiB

[00:03] *** DarthGandalf left
[00:04] <pmurias> sorear: why so little?

[00:06] <lue> afk for a bit.

[00:10] <dalek> 6model: bbc7776 | jonathan++ | java/compiler/try.bat:

[00:10] <dalek> 6model: [java] A barebones try.bat so I can get things running on Windows.

[00:10] <dalek> 6model: review: https://github.com/jnthn/6model/commit/bbc77762b6

[00:11] <pmurias> sorear: so how long does recompiling niecza after changing one file take for you?

[00:16] *** DarthGandalf joined
[00:18] *** DarthGandalf left
[00:18] *** AzaToth joined
[00:21] <snarkyboojum> lue: "I still think S22's authority/author disambiguation is very illegal." - what do you mean by that?

[00:22] <TimToady> s/author/contributors/

[00:29] * snarkyboojum still wonders what's happening with cpan6.org :)

[00:31] <pmurias> the site is surely outdated

[00:31] <pmurias> as it referes to April 2010 as a future date

[00:32] <snarkyboojum> pmurias: aye

[00:35] *** redicaps joined
[00:39] *** supernovus joined
[00:39] <lue> hello again o/

[00:40] <lue> snarkyboojum: S11 states that the :auth option for modules (e.g.    module A::B :auth<ME!>) is left ambiguous, meaning either 'authority' or 'author', depending on what you want it to mean.

[00:41] <supernovus> good $timeofday

[00:41] <sorear> pmurias: I haven't done that since I set up the makefile.

[00:41] <sorear> I'll check out redo later

[00:41] <lue> S22 allowing those to be separate fields (instead of synonyms or replaced with one auth option) violates S11

[00:42] <snarkyboojum> lue: ah, "intentionally ambiguous". I see.

[00:42] <dalek> 6model: bae7169 | jonathan++ | java/compiler/NQPSetting.pm:

[00:42] <dalek> 6model: [java] Need the things in the simplified setting to have lexical scope.

[00:42] <dalek> 6model: review: https://github.com/jnthn/6model/commit/bae71697b3

[00:42] <dalek> 6model: 422f867 | jonathan++ | java/runtime/Rakudo/Init.java:

[00:42] <dalek> 6model: [java] Update outdated name.

[00:42] <dalek> 6model: review: https://github.com/jnthn/6model/commit/422f867ed9

[00:45] <supernovus> I was finding a strange issue with the JSON::Tiny library. I'm seeing if a complete reinstall of my Rakudo and libraries fixes it.

[00:51] * supernovus dreams of a day when rakudo is as fast as perl5...

[00:53] *** molaf_ joined
[00:54] <pmurias> sorear: redo is not portable to windows based on the makefile

[00:55] *** AzaToth left
[00:56] <dalek> 6model: d944750 | jonathan++ | java/compiler/JST2Java.pm:

[00:56] <dalek> 6model: [java] Fix code-gen of block setup, so now invocation bottoms out.

[00:56] <dalek> 6model: review: https://github.com/jnthn/6model/commit/d944750055

[00:56] *** pmurias left
[00:57] *** molaf left
[01:03] <dalek> nqp-rx/nom: 7852255 | jonathan++ | src/metamodel/multi_dispatch.c:

[01:03] <dalek> nqp-rx/nom: Finish up getting type-based multiple dispatch to work.

[01:03] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/7852255ed5

[01:05] *** dku joined
[01:07] <TimToady> the point is, auth is part of the key, and contributors is just part of the value

[01:07] <supernovus> Well, a nice fresh build of everything and I can still replicate the bug in JSON::Tiny. When you call from-json() on a JSON string that has an escaped " character in it, the \" part turns into Any(). So if you had <a href="blah"> it would become <a href=Any()blahAny()> which of course fails horridly when you try to parse it.

[01:12] *** ashleydev joined
[01:14] *** candotoo joined
[01:18] *** MayDaniel left
[01:21] *** dku left
[01:22] <supernovus> Well, it seems I fixed the bug. It was just missing an action for handing an escaped " character.

[01:27] <supernovus> Well, I submitted an issue on the json github page with the solution I used. Hope it gets fixed in the upstream :-)

[01:27] *** supernovus left
[01:28] *** cibs left
[01:36] <dalek> nqp-rx/nom: b6b076d | jonathan++ | src/metamodel/multi_dispatch.c:

[01:36] <dalek> nqp-rx/nom: Get multi-dispatch on definedness to work.

[01:36] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/b6b076d6af

[01:36] <dalek> nqp-rx/nom: f4fe15c | jonathan++ | t/nqp/55-multi-method.t:

[01:36] <dalek> nqp-rx/nom: Add multi-method tests from nqpclr, which now pass in nqp-rx/nom.

[01:36] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/f4fe15c2d7

[01:40] <sorear> TimToady: what version of mono do you have?

[01:44] <sorear> EVERYONE: What versions of Mono should I test niecza on?

[01:46] *** Chillance left
[01:53] <dalek> nqp-rx/nom: 78031bf | jonathan++ | src/stage0/ (3 files):

[01:53] <dalek> nqp-rx/nom: Update bootstrap with multiple dispatch and signature parsing improvements.

[01:53] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/78031bfdc9

[01:53] <dalek> nqp-rx/nom: b0fa8db | jonathan++ | src/metamodel/how/NQPMu.pm:

[01:53] <dalek> nqp-rx/nom: Make ACCEPTS a multi and correct the signature of it.

[01:53] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/b0fa8db53f

[01:55] <jnthn> night o/

[01:55] <sorear> night!

[01:57] *** coldhead left
[02:00] *** noganex_ joined
[02:03] *** noganex left
[02:05] *** amkrankruleuen left
[02:07] *** amkrankruleuen joined
[02:10] <sorear> S03-operators/flip-flop.t is extremely suspect

[02:10] <sorear> it appears to assert that ~[ Nil, Nil, Nil, Nil, Nil ] eq "    "

[02:12] *** cafesofie joined
[02:13] <colomon> Does the flip-flop operator even work in Rakudo?  I can't recall ever running into it in the source....

[02:14] <colomon> rakudo: say 4 ff 5

[02:14] <p6eval> rakudo 101491: OUTPUT«===SORRY!===␤Confused at line 22, near "say 4 ff 5"␤»

[02:15] <colomon> std: say 4 ff 5

[02:15] <p6eval> std 625303c: OUTPUT«ok 00:01 120m␤»

[02:15] <colomon> pugs: say 4 ff 5

[02:15] <p6eval> pugs: OUTPUT«*** No such subroutine: "&infix:ff"␤    at /tmp/lfZFiZegEU line 1, column 5 - line 2, column 1␤»

[02:16] <colomon> niecza: say 4 ff 5

[02:16] <p6eval> niecza v1-149-g56c80b0: OUTPUT«Can't open perl script "niecza_eval": No such file or directory␤»

[02:16] *** dduncan joined
[02:16] *** dduncan left
[02:17] *** Su-Shee left
[02:21] <snarkyboojum> alpha: say "I still work"

[02:21] <p6eval> alpha : OUTPUT«I still work␤»

[02:22] <colomon> alpha: say 4 ff 5

[02:22] <p6eval> alpha : OUTPUT«Confused at line 10, near "ff 5"␤in Main (file <unknown>, line <unknown>)␤»

[02:26] *** coldhead joined
[02:26] <diakopte1> phenny: tell sorear bash on latest cygwin is GNU bash, version 3.2.51(24)-release (i686-pc-cygwin)

[02:26] <phenny> diakopte1: I'll pass that on when sorear is around.

[02:26] *** diakopte1 is now known as diakopter

[02:26] *** [Coke] joined
[02:35] *** dukeleto left
[02:36] *** dukeleto joined
[02:41] <PerlJam> I just had a minor "moment".   I've got a window up with some Perl code in it that I just switched to.  For a few seconds I couldn't tell if I was looking at Perl 5 or Perl 6.

[02:41] <PerlJam> Somehow I think this is a good thing :)

[02:43] *** risou joined
[02:45] <sorear> diakopter: what versions of mono should I test on?

[02:45] <phenny> sorear: 02:27Z <diakopte1> tell sorear bash on latest cygwin is GNU bash, version 3.2.51(24)-release (i686-pc-cygwin)

[02:46] *** redicaps left
[02:49] <TimToady> sorear: I just upgraded to 2.8.2, but it still fails the say 1

[02:53] *** ashleydev left
[03:03] <sorear> TimToady: is that failure from a clean build after the upgrade?

[03:06] <TimToady> checking

[03:07] <TimToady> well, after git clean it doesn't offer to do anything

[03:08] <TimToady> git pull forces some stuff to rebuild though

[03:09] <TimToady> still can't resolve keys in class Array

[03:10] *** candotoo_ joined
[03:13] *** candotoo left
[03:15] *** dku joined
[03:21] <sorear> TimToady: after 'mono boot/run/Niecza.exe test.pl', do any not oks come up?

[03:23] <TimToady> undeclared routines: chr and ord

[03:32] *** envi joined
[03:42] *** colomon left
[03:43] <TimToady> attempting fresh clone

[03:45] *** colomon joined
[03:48] *** ashleydev joined
[03:49] <TimToady> same error, no chr or ord

[03:54] * sorear tries to install 2.8

[03:54] <sorear> .2

[03:57] *** helv12 joined
[04:19] *** candotoo_ left
[04:25] *** Su-Shee joined
[04:31] *** KatrinaTheLamia left
[04:35] <diakopter> TimToady: weird.

[04:40] <sorear> not weird at all

[04:40] <sorear> I just screwed up the directions

[04:40] <sorear> the bootstrap is a little bit older, and doesn't have ord or chr to test

[04:41] <sorear> I could ask TimToady to check out an older version of test.pl, or manually delete the last stanza, but I've exceeded my willing-to-ask-favors limit already

[04:48] *** dku left
[04:54] *** KatrinaTheLamia joined
[05:04] *** ashleydev left
[06:14] *** ashleydev joined
[06:15] *** jdv79 left
[06:16] *** DarthGandalf joined
[06:28] *** ashleydev left
[06:28] *** typepeter joined
[06:33] <typepeter> I have some questions about grammer. Is the grammer one kind of regex matching for lang parsing and behavior definitions?

[06:37] <typepeter> I think it's a very great invention that can implement all the lang in perl6,because it abstract all things in language.

[06:42] <typepeter> I do love it :D Though my friends which don't know the existence of perl6(even per5!!),i'll intro it to them

[06:48] <sorear> Could you rephrase that?

[06:51] <sorear> It is not clear what you mean by "one kind of regex matching"

[06:55] <typepeter> oh,i see. i meant,is it one form to do regex matching when lang parsing and behavior definition? I just guess about it

[06:57] <sorear> What do you mean by a form?

[06:58] <sorear> Standard practice is more like grammar Numbers { rule TOP { <number>+ }; token number { \d+ } }; class NumActions { method TOP($/) { ... }; method number($/) {... } }

[06:58] <sorear> So I guess no

[06:59] <sorear> huh, my shiny new mono self-identifies as 2.11.  I guess I missed the release

[07:06] <typepeter> Mm,i guess it's not equal to regex,but using regex matching actually:P

[07:07] *** Cyrus_ joined
[07:08] *** Cyrus_ left
[07:10] *** clkao_ is now known as clkao

[07:13] <typepeter> if i would like to implement a subset of perl6,regex have to be implemented first,and grammer is required then.I guess they are the essential element.

[07:26] *** Cyrus left
[07:31] *** risou left
[07:31] *** Cyrus joined
[07:36] *** Bzek joined
[07:38] *** Bzek_ left
[07:53] <diakopter> typepeter: yes, generally

[07:55] <typepeter> Thank you :D thanks sorear,too

[08:05] <diakopter> gee, I thub

[08:09] <sorear> so I've installed mono 2.8.2

[08:09] <sorear> good : the bootstrap niecza passes all tests

[08:09] <sorear> bad: it hangs in the unload phase

[08:24] <diakopter> (not for me)

[08:24] <diakopter> wfm with 2GB ram

[08:25] <diakopter> sorear: try it on the p6eval chroot, using the mono (fresh 2.8.2) installed to /home/p6eval/sprixel/clr

[08:26] <diakopter> (don't use the system mono)

[08:49] *** Patterner left
[08:57] *** Psyche^ joined
[08:57] *** Psyche^ is now known as Patterner

[09:19] *** typepeter left
[09:20] <dalek> 6model: 017f52a | (Martin Berends)++ | java/runtime/ (3 files):

[09:20] <dalek> 6model: [java/runtime] improve Makefile and diagnostics in catch blocks

[09:20] <dalek> 6model: review: https://github.com/jnthn/6model/commit/017f52a27c

[09:40] <sorear> diakopter: why not?  does it work? :)

[09:42] <sorear> diakopter: Which machine does p6eval run on again?

[09:44] *** kaare_ joined
[09:47] *** Bzek left
[09:50] *** Bzek joined
[09:51] *** kjeldahl joined
[09:58] *** cogno joined
[09:58] *** coldhead left
[10:01] *** tadzik joined
[10:01] <tadzik> bah, feather downtime

[10:08] *** justatheory left
[10:14] *** cogno left
[10:15] *** am0c joined
[10:20] <sorear> hello tadzik

[10:25] *** cogno joined
[10:33] *** rindolf joined
[10:33] <rindolf> Hi all.

[10:39] <tadzik> hi

[10:40] <rindolf> Hi tadzik 

[10:40] <rindolf> tadzik: what's up?

[10:41] <tadzik> rindolf: not bad. Hard week coming, but I try to keep up

[10:41] <tadzik> "EVERYONE: What versions of Mono should I test niecza on?"

[10:41] <tadzik> sorear: 2.6.7 if you may

[10:41] <rindolf> tadzik: ah.

[10:41] <rindolf> tadzik: why would the week be hard>

[10:41] <rindolf> ?

[11:01] <tadzik> rindolf: 4 exams, 2 labolatories, one programming project to finish

[11:04] <dalek> 6model: ef7ab8c | jonathan++ | java/compiler/NQPSetting.pm:

[11:04] <dalek> 6model: [java] Add missing NQPCode to the fake/temp setting.

[11:04] <dalek> 6model: review: https://github.com/jnthn/6model/commit/ef7ab8ca81

[11:04] <dalek> 6model: c8ae83c | jonathan++ | java/runtime/Rakudo/Metamodel/SharedTable.java:

[11:04] <dalek> 6model: [java] Correct capture construction for find_method call. And with this...hello world works on the JVM. \o/ mberends++

[11:04] <dalek> 6model: review: https://github.com/jnthn/6model/commit/c8ae83cd53

[11:04] *** cogno left
[11:04] <rindolf> tadzik: oh. :-S

[11:07] *** kaare_ left
[11:12] *** cogno joined
[11:16] *** cafesofie left
[11:32] *** cogno left
[11:44] *** risou joined
[11:54] <moritz_> tadzik: good luck

[11:54] <tadzik> thanks moritz_ 

[11:54] <tadzik> one of these is physics :)

[11:55] <rindolf> tadzik: yes, good luck.

[11:56] <tadzik> moritz_: how is ronja?

[11:56] <tadzik> * Ronja

[12:04] <moritz_> tadzik: she's very well - no signs of infection left

[12:04] <moritz_> in fact once she starts drinking milk on her own, she can leave the hospital

[12:06] <rindolf> moritz_: who is Ronja?

[12:06] <moritz_> rindolf: my little daughter, about 2 days old

[12:06] <rindolf> moritz_: ah.

[12:07] <rindolf> moritz_: mazal tov!

[12:07] <moritz_> thanks

[12:07] <rindolf> Receiving objects:  76% (267766/352071), 64.64 MiB | 28 KiB/s   

[12:09] *** mberends left
[12:11] *** MayDaniel joined
[12:22] *** pmurias joined
[12:32] *** risou left
[12:37] *** dsp_ left
[12:39] *** simcop[hireme] left
[12:39] *** cogno joined
[12:47] *** risou joined
[12:57] *** cogno left
[13:00] *** simcop2387 joined
[13:05] <dalek> nqp-rx: e657b28 | bacek++ | / (2 files):

[13:05] <dalek> nqp-rx: Add default value for  into RPA.join to follow Perl6 setting closely

[13:05] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/e657b280d6

[13:10] <dalek> nqp-rx: 2613f07 | bacek++ | t/setting/01-resizablepmcarray.t:

[13:10] <dalek> nqp-rx: Add test for RPA.map

[13:10] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/2613f07cb2

[13:30] *** risou left
[13:30] *** risou joined
[13:32] *** shi joined
[13:38] *** cogno joined
[13:39] *** Chillance joined
[13:47] *** Fredrek_j joined
[13:52] <Fredrek_j> Helo, I was reading about perl5 TK and how the death of "the father of perl/Tk" Nick Ing-Simmons caused the development of perl/Tk to almost stop completely.. is that true that the death of one person can cause a very important modules to stop evolving? 

[13:55] *** VXZ left
[13:57] *** VXZ joined
[13:58] *** Fredrek_j left
[14:00] <colomon> It's certainly true that losing a key developer can be a huge setback.

[14:02] <colomon> The perfect Perl 6 example is pugs.  It was by far the most successful early Perl 6 compiler, but when its key developer moved on elsewhere, no one else was able to pick up the reins, and it has languished ever since.

[14:06] *** rindolf left
[14:06] <colomon> At the same time, modules which are actually very important will normally have someone take over, or another project replace them, just as Rakudo and Niecza have replaced pugs as the Perl 6 compilers of choice.

[14:08] *** rindolf joined
[14:20] *** cogno left
[14:22] *** Patterner left
[14:26] *** carlos joined
[14:27] <tadzik> oh, someone just updated Rakudo in Gentoo

[14:29] <jnthn> Nice

[14:34] *** Psyche^ joined
[14:34] *** Psyche^ is now known as Patterner

[14:41] *** kaare_ joined
[14:51] *** satyavvd joined
[14:51] *** PerlJam left
[14:52] *** cogno joined
[14:52] <colomon> \o/

[14:53] *** PerlJam joined
[14:53] *** PerlJam left
[14:53] *** satyavvd_ joined
[14:54] *** PerlJam joined
[14:55] *** mberends joined
[14:55] *** satyavvd left
[14:55] *** satyavvd_ is now known as satyavvd

[15:03] <dalek> nqp-rx/nom: c759804 | jonathan++ | src/NQP/Actions.pm:

[15:03] <dalek> nqp-rx/nom: Get basic case of multi-subs in place. Just handles lexical case and multis in nested scopes are probably busted still.

[15:03] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/c759804e85

[15:03] <dalek> nqp-rx/nom: 46a10cd | jonathan++ | t/nqp/51-multi.t:

[15:03] <dalek> nqp-rx/nom: Replace old multi-dispatch tests. Multi-method dispatch is now in a separate test file, added yesterday. 51-multi.t will now just test multi subs. Needs more tests, but does cover arity based dispatch and that the proto functions as it should - being called first then delegating to the multi-dispatcher.

[15:03] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/46a10cde6e

[15:05] *** cogno left
[15:06] <PerlJam> colomon: re: losing key developers.  Right now I think Perl 6 could survive the loss of any single developer except perhaps TimToady.  (I don't see who would be his logical "second")

[15:07] <PerlJam> I guess Perl 6 would survive, its evolution would just be stunted.

[15:08] <arnsholt> A duumvirate of jnthn and pmichaud perhaps. With masak as court jester =)

[15:11] *** carlos left
[15:16] *** dorlamm joined
[15:21] *** payload joined
[15:21] <pmurias> PerlJam: Perl 6 as a whole would survive, but individual implementations are more vulnerable

[15:22] <pmurias> PerlJam: niecza withough sorear would have a very bleak future

[15:22] <PerlJam> indeed.

[15:23] <payload> hi. where can i look in the spec for the place of overwriting the behaviour of the + in +$a for a type foo?

[15:24] <payload> ha, never mind... found it

[15:24] <jnthn> S13

[15:24] <payload> thanks

[15:24] <jnthn> Overloading in Perl 6 is just multis. :)

[15:25] <jnthn> Though actually overloading prefix:<+> is not really what you want to do in this case, I suspect.

[15:25] <jnthn> If you want to control numification, just implement a method Numeric() { ... } in your type.

[15:25] <jnthn> + just calls .Numeric.

[15:26] <payload> Numeric? i would have done   multi method Int() 

[15:26] <payload> or multi method Num()

[15:26] <payload> or both

[15:26] <payload> or so

[15:27] <payload> didnt know that there is a Numeric ^^

[15:27] <jnthn> Numeric is the general "give me something that's number-ish" coercion.

[15:27] <jnthn> .Num and .Int are coercions to a floating point and integer specifically.

[15:31] <payload> in Rakudo Star      +(1..100000) does the job stupid and slow i think

[15:31] <payload> i didnt test it with current HEAD

[15:31] <payload> but i want to patch that ^^

[15:32] <jnthn> rakudo: +(1..100000)

[15:32] <payload> slow ^^

[15:32] <jnthn> ...

[15:32] <p6eval> rakudo 101491:  ( no output )

[15:32] <jnthn> FAIL.

[15:32] <payload> yes

[15:32] *** Alias joined
[15:32] <PerlJam> That seems like LHF

[15:32] <payload> succ and count

[15:32] <payload> LHF?

[15:32] <jnthn> rakudo: (1..100000).Numeric

[15:32] <PerlJam> Low Hanging Fruit

[15:32] <payload> yes

[15:32] <p6eval> rakudo 101491:  ( no output )

[15:32] <PerlJam> payload++

[15:33] <payload> rakudo: (^10).to, (^10).max

[15:33] <p6eval> rakudo 101491:  ( no output )

[15:33] <jnthn> Go for it, but it shouldn't be overriding prefix:<+>, but rather one of the coercion methods.

[15:33] <payload> rakudo: say (^10).to, (^10).max

[15:33] <p6eval> rakudo 101491: OUTPUT«1010␤»

[15:33] <payload> i also think one of them should return 9

[15:33] <payload> same for .from and .min

[15:34] *** Alias_ left
[15:34] <jnthn> rakudo: (^10)>>.say

[15:34] <p6eval> rakudo 101491: OUTPUT«0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[15:34] <jnthn> I agree. :)

[15:34] <jnthn> That looks...odd.

[15:34] <payload> but i cant decide which ^^

[15:34] <jnthn> Hm

[15:35] *** Kodi joined
[15:36] <payload> i would go for .to .from, cause they are methods

[15:36] *** tri joined
[15:36] <payload> and just do $.max $.min

[15:37] <jnthn> Oh, I felt the opposite.

[15:37] <jnthn> It felt odd to me because 

[15:37] <payload> well

[15:37] <jnthn> rakudo: (0,1,2,3,4).max.say; (^5).max.say;

[15:37] <p6eval> rakudo 101491: OUTPUT«4␤5␤»

[15:37] <jnthn> That difference is what bothers me a bit.

[15:37] <payload> yes

[15:37] <jnthn> Probably best to get more opinions before changing it.

[15:38] <PerlJam> setting .min/.max appropriately gets rid of .excludes_min and .excludes_max

[15:38] <payload> but this example makes it obvious

[15:38] <jnthn> PerlJam: Possibly that too, yes.

[15:39] <jnthn> payload: Feel free to propose a patch for this, but I'd like to see what others think before it's applied.

[15:39] <payload> then the information of range definition with excludes is gone... but this isnt relevant i think

[15:40] <payload> sure, will do

[15:40] <PerlJam> except that it's currently used in alot of places.

[15:40] <jnthn> I think we may depend on knowing that...I'm not sure off hand though.

[15:40] <jnthn> PerlJam: Right.

[15:40] <jnthn> For me the real conflict is that we make .max on a range mean something other than what Any.max means.

[15:41] <jnthn> payload: I'd do the +(1..1000000) opt as a separate patch - that one is probably quite readily appliable.

[15:42] * jnthn afk for a little bit

[15:44] <payload> rakudo$ grep -Ri excl * # if this would show all places where the exclusion information is relevant, it is manageable

[15:44] <colomon> The problem you guys are having with Ranges is you're not thinking of the non-Int cases.

[15:44] <payload> uh, i have to download the test suite

[15:45] <payload> well, i think of it

[15:45] <colomon> 0..4 is not at all the same thing as 0..^5

[15:45] <payload> a fallback to succ and count must be there

[15:45] *** cogno joined
[15:45] *** satyavvd left
[15:48] *** Bucciarati_ is now known as Bucciarati

[15:49] <colomon> The information of excludes is very important to Range.

[15:49] *** dorlamm left
[15:50] *** masak joined
[15:50] *** cogno left
[15:50] <masak> oh hai #perl6!

[15:50] <rindolf> masak: hai.

[15:50] <colomon> o/

[15:50] <colomon> so, can you tell us how many solutions you got yet?  ;)

[15:51] <masak> I'm a bit behind on the whole contest thing. been moving house yesterday and today.

[15:51] <masak> here's the plan for the next hour or so:

[15:51] <masak> I'm going to go through the last batch of solutions and accept/reject.

[15:52] <masak> then I'm going to write a blog post, describing the current status and the plan for the next week or so.

[15:53] <payload> hmm, i want to write something like   if #( there is a infix:<-> for $a and $b )#   but i dont know how to write this check without going into exceptions

[15:54] <colomon> payload: if $a ~~ Numeric and $b ~~ Numeric

[15:55] *** sftp left
[15:57] *** am0c left
[15:57] <payload> i have to think of the smartmatch more often

[15:58] *** pmurias left
[15:58] <colomon> mind you, that's not exactly saying "infix:<-> is available", but it's probably the closest approximation that doesn't involve invoking the multi dispatcher.

[15:59] <payload> yes

[15:59] <masak> rakudo: multi foo(Str) {}; multi foo(Int) {}; say &foo ~~ :(Str); say &foo ~~ :(Int); say &foo ~~ :(Bool)

[15:59] <p6eval> rakudo 101491: OUTPUT«Bool::False␤Bool::False␤Bool::False␤»

[15:59] * masak would like that to say TruenTruenFalse

[15:59] <colomon> Actually, if $a ~~ Real && $b ~~ Real is probably closer to what you actually want.

[16:01] <flussence> rakudo: multi foo(Str) {}; say :(Str) ~~ &foo;

[16:01] <p6eval> rakudo 101491: OUTPUT«Method 'ACCEPTS' not found for invocant of class 'Perl6MultiSub'␤  in main program body at line 22:/tmp/hbj_maQcVh␤»

[16:01] <flussence> :(

[16:01] * colomon apparently is overusing "actually" this morning.

[16:07] * arnsholt awaits masak++'s next blog post with bated breath

[16:08] *** Bzek left
[16:08] <dalek> rakudo: f3eb64f | KodiB++ | docs/release_guide.pod:

[16:08] <dalek> rakudo: [release_guide] Added instructions for updating the leap-second tables.

[16:08] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/f3eb64fc29

[16:10] *** Bzek joined
[16:15] <jnthn> masak: Is that spec'd in the smartmatch table?

[16:16] *** sftp joined
[16:16] <jnthn> ah, seems so

[16:16] <jnthn> Callable  Signature sig compatibility 

[16:17] *** sftp left
[16:17] <colomon> ooo, sweet

[16:18] <jnthn> rakudo: multi foo(Str) {}; multi foo(Int) {}; say any(&foo.candidates>>.signature>>.ACCEPTS(:(Str))

[16:18] <p6eval> rakudo 101491: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 22␤»

[16:18] <jnthn> rakudo: multi foo(Str) {}; multi foo(Int) {}; say any(&foo.candidates>>.signature>>.ACCEPTS(:(Str)))

[16:18] <p6eval> rakudo 101491: OUTPUT«any(Bool::False)␤»

[16:18] <masak> huh.

[16:18] <jnthn> rakudo: say :(Str) ~~ :(Str)

[16:18] <p6eval> rakudo 101491: OUTPUT«Bool::False␤»

[16:19] <jnthn> Oh

[16:19] <masak> o.O

[16:19] <PerlJam> heh

[16:19] * masak submits rakudobug

[16:19] <jnthn> Just NYI.

[16:19] <masak> and probably LHF too :)

[16:19] <jnthn> rakudo: say \("foo") ~~ :(Str)

[16:19] <p6eval> rakudo 101491: OUTPUT«Bool::True␤»

[16:19] <jnthn> rakudo: say \(42) ~~ :(Str)

[16:19] <p6eval> rakudo 101491: OUTPUT«Bool::False␤»

[16:19] <jnthn> Yeah

[16:19] <jnthn> Capture ~~ Signautre is.

[16:20] <jnthn> The Sig ~~ Sig and Callable ~~ Sig just ain't.

[16:20] <jnthn> And yes, probably LHF if somebody is feeling hacky. :)

[16:20] <dalek> roast: a2cd3d1 | (Kodi Arfer)++ | S02-builtin_data_types/bool.t:

[16:20] <dalek> roast: [bool.t] Removed two fudged tests that were contradicted by unfudged tests.

[16:20] <dalek> roast: review: https://github.com/perl6/roast/commit/a2cd3d1df0

[16:21] <arnsholt> masak: Oh, the deadline was friday not saturday. My bad =)

[16:21] *** sftp joined
[16:21] <masak> arnsholt: yeah. sorry about that.

[16:21] <arnsholt> For some reason my mental calendar had "saturday", not the 14th

[16:22] <arnsholt> My fault, not yours =)

[16:22] <masak> but you're right -- it takes all five tasks to win anyway. and if there's any second prize (I don't know yet), it'll also go to a five-task contestant, I guess.

[16:23] <arnsholt> Sounds fair

[16:23] <masak> if I find the tuits, I might put people's non-accepted solutions on display as well. might be interesting from the viewpoint of nice code to look at.

[16:25] <masak> colomon: now I can tell you how many solutions I got.

[16:25] <colomon> \o/

[16:25] *** cogno joined
[16:25] *** cogno left
[16:25] <masak> five per task, except for p4 which got six submissions, two of which are "second submissions".

[16:25] *** cogno joined
[16:27] <masak> five contestants have sent in accepted solutions. *four* contestants have sent in all five solutions.

[16:27] *** PacoLinux joined
[16:27] <masak> those four are colomon, fox, moritz_, and Util.

[16:27] <colomon> fox?

[16:28] <masak> that's what his email address line says.

[16:28] <masak> ok, I'm going to have a good look at all the solutions, taking careful notes. (after I've blogged)

[16:29] <colomon> oooo, if there's someone we haven't heard of sending in a full set of solutions, that's very cool!

[16:30] <masak> matthias, who sent in four solutions, visited the channel the other day to fix a NYI in Rakudo :)

[16:30] <masak> I have a question for everyone: would you prefer I divulged the winner directly after I've looked through the solutions but before I blog my analysis of each problem -- or should I blog the analyses first and then announce a winner? what do y'all think?

[16:31] <arnsholt> I say keep us waiting

[16:32] <masak> sure thing.

[16:32] <colomon> I'm inclined to agree with arnsholt.

[16:32] <masak> blogging the analyses might take between one and two weeks.

[16:32] <arnsholt> If nothing else, having your analyses first gives a bit more context to how you determine the winner as well

[16:32] <colomon> I'd rather get to look at the analyses without having my knowledge of who the winner was color things.

[16:33] <colomon> also, you might discover that feedback on the blogposts might influence your decisions, too.

[16:33] <colomon> whereas feedback post-decision would just be trouble.

[16:33] <colomon> (if you know what I mean.)

[16:34] <Kodi> As a student of the study of decision-making, I should point out that just writing the analyses, if you haven't decided already, might affect your decision. This can be a good or bad thing depending on how you look at it.

[16:34] <masak> Kodi: I have a feeling you're right. I haven't looked as closely as I want on all of the submissions yet.

[16:40] *** payload left
[16:40] <masak> oh, and now that we're past the stage where players can affect the contest, let me say one thing that I've wanted to say for weeks:

[16:40] <masak> p4 is where all the action seems to be.

[16:41] <masak> the other problems are relatively simple and straightforward for people. but p4 is where a lot of different solutions, none completely satisfactory, are put forward.

[16:41] <masak> (oh, and I know the REAL solution!)

[16:41] * masak hides

[16:42] *** robins is now known as robinsmidsrod

[16:44] *** justatheory joined
[16:44] *** spetrea joined
[16:44] <spetrea> what's up ?

[16:44] <masak> roof. clouds. sky. :)

[16:45] <flussence> aaaaaand my .indent pass rate: 8 oks out of 15

[16:45] <flussence> (yes, I haven't forgotten I was doing it)

[16:45] <masak> flussence: nice! what seems to be the blocker for the rest?

[16:46] <flussence> working on this one at the moment: not ok 5 - If a line contains too few spaces, only those should be removed

[16:46] <flussence> it seems like it unindents the first line and gives up

[16:46] * flussence pastes it somewhere

[16:47] <flussence> https://gist.github.com/781939

[16:48] *** dju left
[16:49] <PerlJam> What's with the eval?

[16:49] *** envi left
[16:49] <flussence> I couldn't get it to figure out what 0..$outdent meant using plain code, that's a workaround :/

[16:50] *** dju joined
[16:50] *** dju left
[16:50] *** dju joined
[16:50] <PerlJam> oh

[16:52] *** Kodi left
[16:54] <masak> flussence: it seems to me that you're doing the "check spaces-only or not" check on all lines at once. I read the spec as saying it should be done on each line individually.

[16:55] <flussence> that's the simplest case, if that check fails it's supposed to fall through to the "..." (which will do something smarter with each line :)

[16:57] <flussence> I guess I forgot to put on line 47 a check that none of the lines starts with a \t...

[16:58] <masak> I mean that I see nothing in the spec about checking the lines together. only about checking them individually.

[16:59] * flussence takes another look

[16:59] <masak> another way of saying that is that it should be possible to comb whole lines, call a helper sub on each line, and then join them back.

[17:01] <flussence> S32/Str:600 says to keep the indent scheme consistent if all lines start the same way, that doesn't appear to apply to the outdenting part...

[17:02] <flussence> I think I might be making this more complicated than it needs to be :)

[17:02] *** molaf_ left
[17:03] <masak> flussence: no, S32/Str:600 only talks about the current line.

[17:04] <flussence> ...I think I might've misunderstood "if these are all the same". whoops.

[17:07] <masak> flussence: if you have any suggestions how to make the spec less ambiguous, I'll happily apply them.

[17:11] <flussence> the "if these are all the same" got me... might be clearer if it explicitly says "for each line" somewhere

[17:15] <flussence> "if the line's indent consists of a single type of space", though that sounds a bit long-winded to me.

[17:16] *** cogno left
[17:19] <PerlJam> flussence: I think your $prefix calculation is a little off.  Sometimes tab characters will contribute less than $?TABSTOP spaces to the calculation.    (just in case you weren't aware of it)

[17:20] <flussence> I'd thought of that, but the way I interpreted the spec is to just assume they aren't elastic-width

[17:21] <masak> they are.

[17:21] <flussence> hm

[17:24] <masak> I guess that only matters when tab characters are exploded during an unindent.

[17:24] <PerlJam> basically.

[17:24] <masak> man, this is tricky. I'm starting to think .indent is a really useful function because it abstracts away a lot of details like this :)

[17:27] <flussence> ok so if I understand right now, (~@lines).indent($n) should be the same as @lines».indent($n) ?

[17:27] <flussence> i.e. the lines don't affect each other?

[17:28] <flussence> (apart from indent(*))

[17:30] <masak> correct.

[17:30] <masak> it's as if each line had its own indent character policy.

[17:32] <PerlJam> that and you really meant @lines.join.indent($n) since ~@lines will join them with a single space in between  :)

[17:32] <flussence> also, is there an easy way to write the first line of the function so it'll make an array of each line's /^^ (\s*) (\N*) (\n?)/ bits?

[17:32] <flussence> PerlJam: I'm always getting those two things mixed up :)

[17:34] <PerlJam> flussence: that's okay, at least you can focus on something for more than a minute such that you accomplish something.   I'm too easily distracted.

[17:37] *** Su-Shee left
[17:45] *** Su-Shee joined
[18:23] *** rgrau joined
[18:35] *** risou left
[18:37] <masak> suddenly everyone is writing Sinatra in Perl 6 :)

[18:39] *** MayDaniel left
[18:39] <jnthn> Well, to be Frank, it is awesome.

[18:39] <masak> :P

[18:39] <masak> jnthn: one of your sharpest in a long time. :)

[18:40] <masak> especially since the sentence has two meanings.

[18:46] <masak> (hm. that didn't come out quite right. it's not altogether uncommon for puns to have two meanings.) :)

[18:49] <jnthn> :P

[18:52] <masak> "I like this optical illusion -- especially the fact that it can be seen in two ways..."

[18:55] *** broquaint left
[18:55] *** rindolf left
[19:03] *** Vlavv` left
[19:05] *** Cyrus left
[19:06] *** Vlavv joined
[19:09] *** Cyrus joined
[19:12] *** amkrankruleuen left
[19:13] <lue> hello zebra PiRats o/

[19:14] <masak> \o

[19:18] <masak> what's up with the spelling of the word "aesthetics"? is it "aesthetics", or is it "æsthetics"?

[19:19] <lue> I would go with 'ae' unless you enjoy your ligatures. [I've actually never seen it spelt with æ until just now]

[19:19] <masak> I've seen it spelt with just the 'e' sometimes.

[19:20] <masak> I guess I'm just confused about what preferred and what isn't.

[19:20] <jnthn> masak: It's a weird word. It looks right to me with the "e"

[19:21] * masak .oO( "a wæird word" )

[19:21] <jnthn> :P

[19:21] <jnthn> Or at least, at school I was taught to spell it aesthetics, anyways. :)

[19:21] <lue> I honestly don't think it matters whether it's ae or æ, it'll be the same word [people don't get in an uproar over wikipædia :)]

[19:22] <jnthn> From Wikipedia, it looks like it was probably put into English from German.

[19:22] <masak> ah.

[19:23] <jnthn> Yeah, looks like it's the same as when ä in Swedish sometimes gets translitted as ae

[19:24] <jnthn> To me it looks mis-spelt without the a at the start, tbh.

[19:24] <masak> good to know.

[19:24] <jnthn> But I don't think I could objectively call it wrong either.

[19:25] <lue> Maybe you should conſider uſing a long s?

[19:26] <jnthn> I don't þink so. :P

[19:28] <masak> tempting, ðough...

[19:29] *** shi left
[19:30] <lue> There used to be an old rule where you had to use an umlaut to designate another syllable when it could be read as one, such as coördinate.

[19:31] <masak> never really liked that spelling :)

[19:32] <masak> though I'm fine with it in "naïve"

[19:32] <jnthn> Oh, *that's* what the unlaut in that word means.

[19:32] *** Alias_ joined
[19:33] *** payload joined
[19:34] *** MayDaniel joined
[19:34] <sorear> good * #perl6

[19:34] <lue> Oh, English. Your crazy idiosyncracies never fail to amuse us.

[19:34] <lue> hello sorear o/

[19:34] *** Alias left
[19:35] <sorear> mm, coördinate

[19:35] <masak> g'whatever, sorear.

[19:35] * sorear always thought Einstein made that one up

[19:35] * masak has blogged: http://strangelyconsistent.org/blog/the-perl-6-coding-contest-is-now-closed

[19:36] *** simcop2387 left
[19:37] <jnthn> EWWW!

[19:37] <colomon> masak: so glad to be part of "the people".   ;)

[19:37] <masak> :D

[19:38] * jnthn decides not to compete with a worse analogy in his forthcoming blog post

[19:42] <lue> .oO(We're getting five restaurant critiques highlighting the best of all the ad-hoc restaurants built in the commercial sector of Camelia-land)

[19:43] * moritz_ back

[19:44] <masak> moritz_! \o/

[19:44] <jnthn> o/ moritz_ 

[19:44] <lue> hello moritz_ o/

[19:44] <colomon> \o

[19:44] <colomon> moritz_: everything still going okay?

[19:46] <moritz_> colomon: yep, first steps towards breast feeding showed success

[19:46] <colomon> \o/

[19:46] <masak> \o/

[19:47] *** aindilis left
[19:49] *** coldhead joined
[19:51] *** dukeleto left
[19:52] *** dukeleto joined
[19:54] <lue> rakudo: my @a = [1,2],[3,4]; say @a[0][1]; say @a[0;1]

[19:55] <p6eval> rakudo f3eb64: OUTPUT«2␤3 4␤»

[19:55] * lue checks if that bug is reported

[19:55] <masak> lue: it's simply a TODO

[19:55] <masak> lue: @a[0;1] is treated as @a[1] because ; in .[] isn't implemented

[19:56] *** [Coke] left
[19:57] *** willco joined
[19:58] <willco> http://codepad.org/CSe2YH1I

[19:58] <willco> anybody have any idea why this doesn't work? it's killing me.

[19:58] <willco> it just outputs a single ':'

[19:59] <masak> willco: hi, this is #perl6.

[19:59] <masak> when we're in an exceptionally good mood, we give Perl 5 support. but it's not really the channel for that.

[20:00] <masak> try #perlhelp on irc.perl.org

[20:05] *** cogno joined
[20:12] *** simcop2387 joined
[20:14] *** cogno left
[20:19] *** snikkers joined
[20:20] *** Trashlord left
[20:21] *** shi joined
[20:26] *** y3llow_ joined
[20:26] *** y3llow left
[20:26] *** payload left
[20:26] *** y3llow_ is now known as y3llow

[20:26] *** pothos_ joined
[20:27] *** pothos left
[20:28] *** pothos_ is now known as pothos

[20:30] <dalek> 6model: 74c1fc0 | jonathan++ | overview.pod:

[20:30] <dalek> 6model: [docs] Add an overview of 6model.

[20:30] <dalek> 6model: review: https://github.com/jnthn/6model/commit/74c1fc0065

[20:36] <dalek> 6model: 0419a1f | jonathan++ | overview.pod:

[20:36] <dalek> 6model: [docs] Try and get something that renders nicer with GitHub's POD renderer.

[20:36] <dalek> 6model: review: https://github.com/jnthn/6model/commit/0419a1f121

[20:38] <dalek> 6model: c0a00fa | jonathan++ | overview.pod:

[20:38] <dalek> 6model: [docs] Tssk. Next time I just write plain text. Or HTML.

[20:38] <dalek> 6model: review: https://github.com/jnthn/6model/commit/c0a00faa6c

[20:38] <masak> :)

[20:39] <jnthn> OK, now it looks non-awful. :)

[20:39] <dalek> roast: 2769a7c | moritz++ | S0 (2 files):

[20:39] <dalek> roast: fudge relation.t for niecza

[20:39] <dalek> roast: review: https://github.com/perl6/roast/commit/2769a7c900

[20:39] * moritz_ forgot to push that commit

[20:39] <moritz_> niecza: say +'24'

[20:39] <p6eval> niecza v1-149-g56c80b0: OUTPUT«Can't open perl script "niecza_eval": No such file or directory␤»

[20:39] <moritz_> urks

[20:40] *** tri left
[20:41] <wolverian> jnthn: s/stratergies/strategies/

[20:43] <lue> afk

[20:44] <dalek> evalbot: 83a6deb | moritz++ | / (2 files):

[20:44] <dalek> evalbot: niecza now uses "make", and the executable is different

[20:44] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/83a6debdff

[20:45] <dalek> 6model: 7d4f8de | jonathan++ | overview.pod:

[20:45] <dalek> 6model: [docs] Typo spotted by wolverian++.

[20:45] <dalek> 6model: review: https://github.com/jnthn/6model/commit/7d4f8de2d3

[20:46] <jnthn> .oO( shudda spellchuck )

[20:49] <tadzik> o/

[20:49] *** aindilis joined
[20:50] <masak> "loopy"! \o/

[20:55] *** MayDaniel left
[20:55] *** araujo left
[20:57] *** countley joined
[20:59] *** countley left
[21:00] *** spetrea left
[21:03] * moritz_ is curious for the new idioms that masak++ has mentioned on his blog

[21:08] *** araujo joined
[21:12] <masak> I'll be sure to highlight them properly when I post.

[21:13] *** dukeleto left
[21:14] *** dukeleto joined
[21:17] <moritz_> hurry up!

[21:17] <moritz_> oh, two new chapters of HPatMoR

[21:17] <masak> ooh

[21:18] <arnsholt> colomon: BTW, I messed up on the p6cc deadline, so if you want to look at my p4 code, I'll have to put it somewhere =)

[21:18] * masak is currently watching Evil Dead III: Army of Darkness, indirectly referenced in MoR

[21:21] <masak> the movie's bad in a slightly enjoyable way :)

[21:21] *** pmurias joined
[21:22] *** mberends left
[21:23] *** pracacc001 joined
[21:26] *** Vlavv left
[21:27] <pracacc001> rakudo: "helo".say

[21:27] <p6eval> rakudo f3eb64: OUTPUT«helo␤»

[21:27] <moritz_> masak: have you found the RSS feed for HPatMoR?

[21:27] *** dual joined
[21:27] *** pracacc001 left
[21:27] <moritz_> http://demented.no-ip.org/~feep/rss_proxy.cgi?5782108 # soemtimes down, but quite reliable when up

[21:29] <masak> moritz_: aye, I have. but I haven't checked my Reader today.

[21:30] <colomon> arnsholt: oh no!  please do put it up somewhere...

[21:30] <colomon> Army of Darkness!

[21:33] <arnsholt> colomon: http://heim.ifi.uio.no/arnskj/p6cc2010/p4/code is the frontend code, http://heim.ifi.uio.no/arnskj/p6cc2010/p4/lib/Kayles.pm is the fun stuff

[21:33] <arnsholt> From the directory names, the rest of my code should be trivially findable if you're interested =)

[21:34] <moritz_> that's cheating, you used THEORY!

[21:34] <moritz_> :-)

[21:34] * justatheory coughs

[21:34] <masak> arnsholt++

[21:34] <masak> arnsholt: now I'm even more sorry you didn't make the deadline! :-|

[21:35] <arnsholt> moritz_: Why, thank you =)

[21:35] <moritz_> arnsholt: :-)

[21:35] <arnsholt> As I mentioned to colomon the other day, I went kinda bananas on the research on p4

[21:35] <masak> arnsholt: seeing the work "kayles" there tells me I want to look closer at your solution.

[21:36] <arnsholt> But it was an interesting field to look into

[21:36] <masak> arnsholt: yes, that was the idea. it'll be interesting to write up p4.

[21:36] <arnsholt> I vaguely knew of the field, but it was cool to learn a bit more

[21:36] <moritz_> I lacked the initial knowledge, so I had basically no idea what to search for

[21:36] <arnsholt> masak: I was happy it was normal play kayles though. Misere play would have been a lot harder

[21:37] <masak> misere play doesn't Grundy at all, IIUC.

[21:37] <arnsholt> I didn't know either actually, I was just struck by the idea that "this sounds like perfect play should be possible"

[21:37] <arnsholt> So I just noodled around on Wikipeda after christmas until I found it

[21:37] <masak> :)

[21:38] <arnsholt> Yeah, from my tidbits of research making it misere instantly makes the game harder, more or less

[21:38] <masak> the ending of Army of Darkness was as random as the rest of the movie :P

[21:39] <arnsholt> I really wanted to implement the n log n matrix chain algorithm as well, but since the paper is > 100 pages long I decided DP was enough

[21:39] <masak> "Oh no! I slept too long! Haaahahahahahah!"

[21:39] <moritz_> Misere game sounds like Antichess to me :-)

[21:40] <masak> arnsholt: DP was what I was hoping people would go for.

[21:40] <arnsholt> moritz_: Yeah, essentially. The player who has no move left wins

[21:40] <sorear> Who currently has trouble with building Niecza?

[21:40] <arnsholt> masak: Yeah, it's the obvious solution (at least to my eyes)

[21:40] <arnsholt> I instantly thought "oh, I'll just use CKY parsing" =)

[21:41] * moritz_ suddenly feels so dumb

[21:42] <masak> arnsholt: "CKY parsing"?

[21:42] <masak> moritz_: why?

[21:42] <arnsholt> CKY is a DP CFG parsing algorithm

[21:42] *** Vlavv_ joined
[21:42] <jnthn> moritz_: fwiw, I haven't understood almost any of the last 4 screenfulls. :)

[21:42] <arnsholt> In this context it means my matrix chain solver was a bottom up DP algorithm

[21:43] <moritz_> masak: because I missed some readily available theory on a subject, and handed in a quite imperfect solution

[21:43] <arnsholt> Starting by finding the costs for adjacent pairs of matrices, and working its way upwards through bracketings 

[21:43] <masak> moritz_: don't worry, everyone did. you all blew p4, except arnsholt who blew the deadline... :)

[21:43] <moritz_> masak: :-)

[21:43] <masak> arnsholt: you do realize that you're up for at least an honourable mention... :)

[21:44] <arnsholt> Thank you =)

[21:44] <masak> arnsholt: yes, exactly. I didn't know there was a name for that. gotta look up CKY...

[21:44] <arnsholt> Also, you should use the "everyone blew p4 ..." line. It has a nice ring to it

[21:44] <masak> :)

[21:44] <masak> oh, I'm going to have such a field day with p4.

[21:44] <moritz_> masak: actually I tried a DP solution for p4, and failed

[21:45] <masak> I can imagine.

[21:45] <arnsholt> CKY is just one application of the technique, I think. But it's an interesting algorithm

[21:45] <arnsholt> A bit limited in that it only does binary branching grammars, but oh well

[21:45] <masak> anyone who likes can consider the secret agenda of this whole contest being to spring Sprague-Grundy theory on people :)

[21:45] <masak> it's an "only works once" trick. :P

[21:45] <arnsholt> In that case, consider me educated =)

[21:46] <masak> arnsholt: binary branching grammars fit quite well with binary operators :)

[21:46] <moritz_> arnsholt: well, you can always use Chomsky normalization to get the grammar in binary branching form

[21:47] <arnsholt> Yeah, Chomsky normalisation is usually mentioned right before or right after SKY is introduced

[21:47] <masak> huh? SKY or CKY?

[21:47] <arnsholt> But it's not always desireable, especially because IIRC the grammars are only weakly equivalent

[21:47] <arnsholt> Er, CKY. Typo

[21:47] <pmurias> sorear: i had problems compiling the mono from github, but niecza works on 2.8.1

[21:48] <moritz_> arnsholt: actually CKY is the only reason that Chomsky normalization is taught at all :-)

[21:48] <arnsholt> And if you're parsing a natural language grammar, converting to CNF may lose some of the structures you're interested in

[21:48] <arnsholt> Yeah. The whole binary-branching thing makes the linguist part in me cry

[21:48] <arnsholt> I had to read up on it for a course I took. It's so ridiculous! >.<

[21:48] <moritz_> just consider it isomorphic to...

[21:49] <moritz_> that's like "it all makes perfect sense in n-dimensional space" :-)

[21:49] <arnsholt> Oh, and about feeling stupid, I tried to read up about the Ising model earlier today. Didn't exactly feel very clever either then =)

[21:49] <jnthn> I blug! http://6guts.wordpress.com/2011/01/16/nqp-and-6model-big-steps-forward-on-parrot-and-jvm/

[21:49] <sorear> pmurias: I thought you said earlier that it was non-functional on 2.8.1

[21:49] <sorear> something about Array.keys

[21:49] <moritz_> arnsholt: I never understood the analytical solution of 2D Ising model either :-)

[21:50] <arnsholt> I didn't understand any of it, more or less =)

[21:50] <arnsholt> I think I'mstarting to get graphical models, though

[21:52] <arnsholt> jnthn: Excellent, the English language needs more strong verbs!

[21:54] *** IllvilJa left
[21:54] <moritz_> it dus

[21:55] <masak> it dudn't!

[21:56] <pmurias> sorear: sorry it works on 2.8.2

[21:57] <pmurias> it's non functional on 2.8.1

[22:03] <masak> I'm on mono 2.6.7, and niecza doesn't build here.

[22:03] *** MayDaniel joined
[22:04] <tadzik> oh, 6model LHF!

[22:05] <jnthn> You know you want to.

[22:06] <tadzik> riiight

[22:07] * jnthn cheers on tadzik :)

[22:07] <masak> moritz_: which mono version did you have again?

[22:08] <moritz_> masak: 2.6.7-4

[22:08] <moritz_> (where the -4 is Debian specific, iirc)

[22:08] <masak> moritz_: can you build niecza?

[22:08] <tadzik> I have 2.6.7 and I can build, but not run

[22:09] <moritz_> masak: yes

[22:09] <tadzik> well, I can run, but I can't Helloworld :)

[22:09] <masak> I'm getting "MSBUILD: error MSBUILD0003: Please specify the project or solution file to build, as none was found in the current directory."

[22:10] <moritz_> masak: you need to use 'make' now

[22:10] <moritz_> not xbuild anymore

[22:10] <masak> oh.

[22:10] <masak> right, it's even in the README.pod

[22:10] *** orafu left
[22:10] <masak> moritz_++

[22:10] *** orafu joined
[22:12] *** am0c joined
[22:15] *** jedai left
[22:16] *** kjeldahl left
[22:17] *** jedai joined
[22:19] *** sftp left
[22:27] *** shi left
[22:35] *** shi joined
[22:39] *** Trashlord joined
[22:39] <snarkyboojum> moritz_: congrats on the healthy bub and healthy mum :)

[22:40] * dukeleto submitted a talk to PGCon 2011 about PL/Perl6 today

[22:41] <dukeleto> moritz_: congrats!

[22:41] *** MayDaniel left
[22:41] <dukeleto> jnthn: i am reuding your blug

[22:44] *** sftp joined
[22:47] <jnthn> dukeleto: :)

[22:49] <dukeleto> jnthn: thanks for writing a 6model overview!

[22:49] <jnthn> dukeleto: Hope it makes sense. :)

[22:49] <dukeleto> jnthn: i will let you know if it doesn't :)

[22:49] <jnthn> :)

[22:49] <jnthn> OK, sleep time for me tomorrow...gotta get up earlyish.

[22:50] *** kaare_ left
[22:50] <jnthn> wtf

[22:50] <jnthn> ...how did the tomorrow end up 4 words too early? :S

[22:50] <jnthn> sleep &

[22:52] *** vmspb joined
[22:52] *** cafesofie joined
[22:52] <masak> that's simply how early tomorrow comes :)

[22:59] *** vmspb left
[23:00] <masak> sorear: I think tonight's attempt to build niecza has taught me that giving Virtualbox 1024 MB of RAM isn't enough.

[23:00] <masak> the build hasn't failed yet, but it seems to have reached some kind of swapping plateau.

[23:00] * masak decides to try again tomorrow with more RAM

[23:00] <masak> 'night, #perl6.

[23:00] *** masak left
[23:07] *** vmspb joined
[23:15] *** [Coke] joined
[23:17] *** am0c left
[23:19] <snarkyboojum> how does one run the test harness for Niecza now?

[23:20] <snarkyboojum> t/run_spectests was working.. but I guess needs to be updated now there's not niecza_eval around anymore?

[23:38] *** ashleydev joined
[23:42] *** PacoLinux left
[23:42] *** flatwhatson left
[23:45] *** KatrinaTheLamia left
[23:52] *** shi left
[23:55] *** KatrinaTheLamia joined
