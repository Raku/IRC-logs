[00:00] <sorear> there have been several aborted attempts to run Perl 6 on the p5vm

[00:01] *** jfried left
[00:12] *** lumi left
[00:13] *** lumi joined
[00:18] <ruoso> sorear: well, as I repeated several times, if you consider p5 a vm, smop is a vm too ;)

[00:19] <ruoso> I think 6model is a very likely solution to port rakudo to Perl 5

[00:27] *** whiteknight left
[00:35] *** Serpen64 joined
[00:35] <Serpen64> pp

[00:35] *** Serpen64 left
[00:42] *** whiteknight joined
[00:43] *** silug joined
[00:48] *** whiteknight left
[00:49] *** lumi left
[00:50] *** lumi joined
[00:53] *** silug left
[00:54] *** silug joined
[00:55] *** thou left
[01:01] *** noganex_ joined
[01:01] *** jaldhar joined
[01:01] *** whiteknight joined
[01:04] *** noganex left
[01:05] *** silug left
[01:05] *** thou joined
[01:07] *** lumi left
[01:07] *** lumi joined
[01:08] *** whiteknight left
[01:09] *** thou left
[01:11] *** whiteknight joined
[01:18] *** gbacon joined
[01:24] *** pernatiy joined
[01:31] *** thou joined
[01:32] <colomon> sorear: how'd you implement the bigints?

[01:39] *** drbean joined
[01:42] *** whiteknight left
[01:48] <sorear> colomon: I took System.Numerics/BigInteger.cs from Mono, confirmed the MIT license, and copied it into my project

[01:48] <colomon> what version of mono does current niecza need?

[01:48] <colomon> ah, I see

[01:48] <colomon> (readme)

[01:49] <sorear> it definitely still runs fine on 2.6.7

[01:49] <sorear> p6eval is using that

[01:49] <colomon> my mono on OS X is still 2.0.1, so step two is going to be updating that.

[01:53] *** lumi left
[01:54] *** lumi joined
[02:02] *** jaldhar left
[02:06] *** yinyin joined
[02:06] * colomon is dreaming of full Int and FatRat...

[02:13] *** jaldhar joined
[02:13] <colomon> sorear: how are user grammars working at the moment in niecza?  (He asked, while waiting for the mono install to finish.)

[02:14] * colomon is also wondering what the odds are that niecza will work on his Droid faster than Rakudo on his MacBook Pro...

[02:15] *** isBEKaml left
[02:28] <colomon> afk # bed, mono still installing

[02:28] *** ymasory left
[02:33] *** lumi left
[02:33] *** jaldhar left
[02:34] *** lumi joined
[02:35] *** jaldhar joined
[02:41] *** envi_laptop joined
[02:48] *** f00li5h is now known as f00li5h[HireMe]

[02:50] *** Sarten-X left
[02:57] *** Sarten-X joined
[03:12] *** arnsholt_ joined
[03:13] *** Sarten-X left
[03:14] *** arnsholt left
[03:18] *** stephanepayrard_ left
[03:18] *** stephanepayrard_ joined
[03:18] *** lumi left
[03:19] *** lumi joined
[03:20] *** Sarten-X joined
[03:21] *** ethan left
[03:28] *** Sarten-X left
[03:28] *** yinyin left
[03:33] *** agentzh joined
[03:35] *** yinyin joined
[03:36] *** Sarten-X joined
[03:40] *** yinyin left
[03:40] *** _jaldhar joined
[03:40] *** jaldhar left
[03:41] *** _jaldhar left
[03:42] *** _jaldhar joined
[03:43] *** silug joined
[03:46] *** yinyin joined
[03:51] *** lumi left
[03:52] *** lumi joined
[03:54] *** silug left
[03:56] *** gbacon left
[04:05] <sorear> phenny: tell colomon user grammars work pretty well.  Mono 2.0.1 isn't likely to work.

[04:05] <phenny> sorear: I'll pass that on when colomon is around.

[04:16] *** envi_laptop left
[04:20] *** lumi left
[04:22] *** lumi joined
[04:39] *** benabik left
[04:39] *** donri joined
[04:41] *** birdwindupbird joined
[04:42] *** birdwindupbird left
[04:46] *** lumi left
[04:47] *** birdwindupbird joined
[04:47] *** lumi joined
[04:52] *** baest_ is now known as baest

[04:55] *** Sarten-X left
[05:01] <dalek> niecza: be9e4f6 | sorear++ | src/STD.pm6:

[05:01] <dalek> niecza: First batch of post-v6 STD convergences

[05:01] <dalek> niecza: review: https://github.com/sorear/niecza/commit/be9e4f6a1b

[05:03] *** Sarten-X joined
[05:03] *** hudnix left
[05:06] *** jmp___ left
[05:08] *** lumi left
[05:09] *** lumi joined
[05:15] *** sftp_ left
[05:37] *** Sarten-X left
[05:38] *** kjeldahl joined
[05:42] *** Sarten-X joined
[05:42] *** kjeldahl left
[05:47] *** woosley joined
[05:47] *** nymacro joined
[05:53] *** ethan joined
[05:57] *** lumi left
[05:58] *** lumi joined
[06:01] *** wtw joined
[06:04] *** stephanepayrard_ left
[06:04] *** stephanepayrard_ joined
[06:07] *** thou left
[06:23] <dalek> nqp: 5658834 | pmichaud++ | tools/ (3 files):

[06:23] <dalek> nqp: First version of tools/build/gen_parrot.pl and NQP::Config library.

[06:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/5658834893

[06:23] <dalek> nqp: c5c081b | pmichaud++ | .gitignore:

[06:23] <dalek> nqp: Update .gitignore for new install location, config.status.

[06:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c5c081becc

[06:23] <dalek> nqp: f412826 | pmichaud++ | / (2 files):

[06:23] <dalek> nqp: Move Makefile.in to tools/build.

[06:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f41282600a

[06:23] <dalek> nqp: 290d603 | pmichaud++ | / (7 files):

[06:23] <dalek> nqp: Refactor build/gen_how_pm.pl and build/gen_setting.pl into tools/build/gen-cat.pl.  Update to shiny new Configure.pl.

[06:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/290d603e9c

[06:23] <dalek> nqp: ac7720e | pmichaud++ | build/ (6 files):

[06:23] <dalek> nqp: Remove outdated build tools and directory.

[06:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ac7720e5ec

[06:23] <dalek> nqp: 7e4531a | pmichaud++ | Configure.pl:

[06:23] <dalek> nqp: Restore checks for files needed to build NQP.

[06:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7e4531ac19

[06:23] <dalek> nqp: 6e0ebf3 | pmichaud++ | STATUS:

[06:23] <dalek> nqp: Remove way outdated STATUS file.

[06:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6e0ebf3dcb

[06:23] <dalek> nqp: ba0fe9d | pmichaud++ | docs/6model/ (2 files):

[06:23] <dalek> nqp: Merge branch 'master' of github.com:perl6/nqp

[06:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ba0fe9d4e8

[06:24] *** koban` joined
[06:26] *** fhelmberger joined
[06:31] *** lumi left
[06:32] *** lumi joined
[06:35] *** noganex joined
[06:36] *** noganex_ left
[06:36] *** plobsing left
[06:38] *** jfried joined
[06:39] *** Shozan joined
[06:39] *** thou joined
[06:40] *** ethan left
[06:42] *** amkrankruleuen left
[06:48] *** ethan joined
[06:51] *** satyavvd joined
[06:53] *** amkrankruleuen joined
[06:55] *** thou left
[07:01] *** amkrankruleuen left
[07:03] <sorear> hello pmichaud

[07:03] *** silug joined
[07:05] *** pernatiy left
[07:05] *** amkrankruleuen joined
[07:05] *** Katip joined
[07:06] *** pernatiy joined
[07:10] *** lumi left
[07:11] *** lumi joined
[07:14] *** Katip left
[07:14] *** silug left
[07:15] *** silug joined
[07:16] *** mj41 joined
[07:16] *** Sarten-X left
[07:18] *** wamba joined
[07:23] *** Sarten-X joined
[07:27] *** envi_laptop joined
[07:28] <colomon> sorear: FYI, just discovered 2.6.7 didn't build for me, and my first thought wasn't "Darn.  No niecza for me."  It was "Maybe it's time to finally install OS X 10.6...."

[07:28] <phenny> colomon: 04:05Z <sorear> tell colomon user grammars work pretty well.  Mono 2.0.1 isn't likely to work.

[07:29] <sorear> ha

[07:29] <sorear> 2.4 will _probably_ work, although I don't have continuous integration for that

[07:31] * sorear -> seelp

[07:39] <jnthn> morning, #perl6

[07:41] <tadzik> morning jnthn 

[07:42] <tadzik> heh, someone posted niecza on reddit and misspelled the name

[07:42] <moritz> good morning

[07:42] <tadzik> good morning moritz 

[07:43] *** Sarten-X left
[07:46] <moritz> tadzik: my internet connection at home doesn't work atm, so I'm afraid I'll only be available for mentoring during the day (roughly 10am to 6pm) - I'll surely backlog #phasers, highlights for me in #perl6 and read mails

[07:46] <tadzik> moritz: no worries

[07:47] <moritz> sorear++ # niecza v6

[07:47] <yath> moritz: still your dsl splitter? i meant this honest yesterday, just drill the wires together

[07:48] *** lumi left
[07:49] *** lumi joined
[07:49] <moritz> yath: I replaced the splitter, still doesn't work. So could be either the router, or the telco company

[07:49] <yath> ah, hm

[07:50] *** Sarten-X joined
[07:53] *** araujo left
[07:59] *** lumi left
[07:59] *** lumi joined
[08:05] *** awoodland joined
[08:08] *** Katibe left
[08:09] *** Su-Shee joined
[08:10] <Su-Shee> hi everyone.

[08:10] <Su-Shee> sorear: niecza is on reddit. ;)

[08:11] *** cibs left
[08:11] *** Katibe joined
[08:12] *** daxim joined
[08:13] <tadzik> no it's not, it's some niezca compiler :)

[08:13] * moritz tried to use it now and then :-)

[08:15] <Su-Shee> yeah well choose a name which is easier to write properly and that doesn't happen. ;)

[08:16] *** lumi left
[08:16] *** amkrankruleuen left
[08:17] *** lumi joined
[08:17] *** Katibe left
[08:17] <moritz> people misspelle raduko... erm, rakudo all the time :-)

[08:17] *** amkrankruleuen joined
[08:18] <Su-Shee> actually I just thought that it might make sorear happy... 

[08:20] <tadzik> Su-Shee: the niecza on reddit?

[08:20] <Su-Shee> yes.

[08:20] <tadzik> oh, I'm sure it will

[08:21] <tadzik> is "niecza" difficult to spell for english-speaking people?

[08:23] <jnthn> tadzik: I don't find it so, but I'm probably a bad example. :)

[08:26] <Su-Shee> tadzik: well I'm german speaking and I have the same problem with all eastern european languages as I have difficulties to remember cz, sc, sz, younameit properly.

[08:26] <Su-Shee> but anyways. I don't think the spelling was the main point of the reddit posting. 

[08:26] <jnthn> Su-Shee: Living for a couple of yeras in East Europe helps. ;)

[08:26] <jnthn> I'm not sure that solution scales very well though. ;)

[08:32] <arnsholt_> On a related note, there are a couple of Polish cities where I happily ignore the native names. Stetting for example

[08:32] *** arnsholt_ is now known as arnsholt

[08:32] <arnsholt> *Stettin

[08:32] <tadzik> jnthn: yeah, you don't count

[08:33] <tadzik> Su-Shee: you said "younameit", you mean "Tadeusz"? :)

[08:33] <tadzik> arnsholt: do you mean Szczecin?

[08:33] <arnsholt> (A Polish friend tried to teach me how to pronounce the Polish name, but I just couldn't do it)

[08:33] <tadzik> I can understand that

[08:33] <arnsholt> Yes. ETOOMANYFRICATIVES

[08:34] <arnsholt> Affricates even

[08:34] <tadzik> I was quite suprised that folks on Holland Hackathon took a challenge of prononcing "tadzik", I thought they will stay on "Ted" :)

[08:35] *** amkrankruleuen left
[08:37] *** hanekomu joined
[08:38] <dalek> nqp: af48f8f | pmichaud++ | src/HLL/Compiler.pm:

[08:38] <dalek> nqp: Switch local %config hash to be a package-scoped %parrot_config shared by all HLL::Compilers.

[08:38] <dalek> nqp: review: https://github.com/perl6/nqp/commit/af48f8fcf9

[08:38] <dalek> nqp: 8dd1944 | pmichaud++ | src/HLL/Compiler.pm:

[08:38] <dalek> nqp: Add per-compiler configuration hash, --show-config option.

[08:38] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8dd19444c2

[08:38] <dalek> nqp: 3599a33 | pmichaud++ | / (4 files):

[08:38] <dalek> nqp: Tools to add version configuration information (based on git-describe)

[08:38] <dalek> nqp: to HLL::Compiler objects.

[08:38] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3599a33461

[08:38] <dalek> nqp: bc9df6c | pmichaud++ | src/HLL/Compiler.pm:

[08:38] <dalek> nqp: Move HLL::Compiler version string out of BUILD and into version() method.  Eliminate $!version attribute.

[08:38] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bc9df6c1b3

[08:40] <pmichaud> good morning, #perl6

[08:40] <jnthn> morning, pmichaud 

[08:40] <jnthn> wow, early morning ;)

[08:40] <pmichaud> late night, akshually

[08:41] <jnthn> pmichaud: How will %parrot_config fit in with @other_vm?

[08:41] <pmichaud> nqp has some new build tools :)

[08:41] <jnthn> yay! :D

[08:41] <pmichaud> jnthn: we'll rip/fix it as we get @other_vm in place

[08:41] <jnthn> pmichaud: OK, wfm. :)

[08:41] <pmichaud> jnthn: eventually it may just become %vm_config

[08:41] <jnthn> *nod*

[08:41] <pmichaud> mainly I wanted a way to get all of the configuration information I need from nqp directly

[08:41] <jnthn> yeah!

[08:41] <pmichaud> so.... nqp --show-config gives that to me

[08:42] <pmichaud> that will vastly simplify rakudo (and other languages) build configuration system

[08:42] * jnthn starts to see how this could get very nice :)

[08:42] <jnthn> pmichaud++

[08:42] <jnthn> Also, I'm happy you've been able to dig into new nqp after my hackfest. :)

[08:42] <pmichaud> and it's build into nqp itself, instead of requiring a separate tool (e.g., the way that parrot_config is separate from parrot -- I decided that's really kinda icky.)

[08:42] <pmichaud> *built

[08:43] <szabgab> hi

[08:43] <pmichaud> now that I've had time to look at it in more detail, I'm really impressed with the nqp stuff

[08:43] <szabgab> on https://github.com/rakudo/star/downloads I see that the lates binary for windows was in July 2010

[08:43] <pmichaud> szabgab: we don't have a good setup for building windows installers

[08:43] <szabgab> is there a technical reason for that or just lack of tuits to release it?

[08:44] <pmichaud> so, both technical and lack of tuits to resolve the technical :)

[08:44] <szabgab> is the rakudo start now relocatable?

[08:44] <pmichaud> you mean the binary?  no, not yet.  That's a parrot limitation.

[08:44] <szabgab> or do you have to install to the same path where you compiled?

[08:44] <szabgab> so same path

[08:45] <moritz> pmichaud: https://gist.github.com/1000178

[08:45] <pmichaud> you have to install to the same path where it was built, yes.

[08:45] <szabgab> ok

[08:45] <pmichaud> moritz: looking

[08:45] <szabgab> let's see if I can hold on to my tuits till the evening when I am infront of my own computer :)

[08:46] <pmichaud> moritz: hmmm, I'm not getting that.

[08:46] *** amkrankruleuen joined
[08:46] <pmichaud> moritz: do you have a tools/build/PARROT_REVISION ?

[08:47] <jnthn> pmichaud: btw I pushed some docs on 6model last night to nqp repo. Will continue working on those.

[08:47] <pmichaud> jnthn: I saw that they were pushed; haven't looked at them yet.

[08:47] <jnthn> pmichaud: I plan to do a demo of how to do class based OO, then another one of prototype OO.

[08:47] <pmichaud> moritz: oh!  maybe it's complaining because --gen-parrot wasn't specified or something

[08:47] <moritz> pmichaud: yes

[08:47] <pmichaud> let me try that.

[08:47] <moritz> pmichaud: right, that was without --gen-parrot

[08:48] <jnthn> With lots of notes on why stuff is being done.

[08:50] <tadzik> pmichaud: re the Parrot limitation, what is the problem exactly? I tried to bring it up on #parrot some time ago, and I got persuaded that the problem doesn't exist

[08:50] <tadzik> oh, I need to backlog more

[08:51] <dalek> nqp: ed47aba | pmichaud++ | Configure.pl:

[08:51] <dalek> nqp: Fix output when Configure.pl invoked with no options and parrot_config

[08:51] <dalek> nqp: isn't located.  moritz++

[08:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ed47abab00

[08:52] <pmichaud> tadzik: last time I checked, Parrot hardwires the paths where it looks for libraries into the parrot executable.

[08:53] <pmichaud> so, while you can move the parrot binary around, the library files have to remain in their original locations (or somewhere that parrot looks)

[08:54] *** Mowah_ joined
[08:54] <pmichaud> from a windows perspective, that means that if someone compiles parrot/rakudo into C:\RAKUDO, then that's the only place the files can be installed and have things work -- they aren't relocatable.

[08:55] *** lumi left
[08:56] *** lumi joined
[08:57] <pmichaud> (nqp build)  working on the build system was nice -- I got to git rid of a lot of fossils in this refactor :)

[08:57] <pmichaud> s/git/get/

[08:58] <pmichaud> and nqp --version now has up-to-date version information :)

[08:58] *** frank left
[08:58] <pmichaud> at some point we need to decide how (if) we'll institute a release cycle for nqp

[09:00] <pmichaud> oh, one question I ran into tonight -- in nqp is there a way for a subclass' method to invoke the superclass' method of the same name?

[09:00] <pmichaud> e.g., for   NQP::Compiler.somemethod to invoke HLL::Compiler.somemethod on self?

[09:00] <pmichaud> ("not yet" or "no" are perfectly acceptable answers :-)

[09:01] <jnthn> Not yet.

[09:01] <jnthn> Well, there is a way ;)

[09:01] <jnthn> HLL::Compiler.HOW.find_method(HLL::Compiler, 'somemethod')(self)

[09:01] <jnthn> Or some such.

[09:02] <jnthn> There's no sugar

[09:02] <pmichaud> that would actually be okay with me :-)

[09:02] <jnthn> But you can do it through the mop

[09:02] <jnthn> shorter is

[09:02] <pmichaud> makes perfect sense... I should've thought of it :)

[09:02] <jnthn> pir::find_method(HLL::Compiler, 'somemethod')(self)

[09:02] <jnthn> One day that'd be nqp::...

[09:02] <jnthn> It's potentially faster because that way will hit the method cache.

[09:03] <pmichaud> for the rare occasions that we need it thus far -- having these two choices is fine.

[09:03] <jnthn> oh, you may need an extra . in there before the arg list to get it by the parser...

[09:04] <pmichaud> okay, time for sleep here (short nap before having to get up to get kids to school)

[09:05] <pmichaud> tuit supply for Tuesday (and possibly rest of week) is not looking promising... but I'll work next on updating nom's build system so that it no longer needs --gen-parrot

[09:05] <pmichaud> it'll just be  --gen-nqp   or   --with-nqp

[09:07] <pmichaud> anyway, sleep time

[09:07] <pmichaud> bbl

[09:08] <jnthn> night o/

[09:18] *** Katibe joined
[09:18] *** dakkar joined
[09:21] *** hanekomu left
[09:21] *** Sarten-X left
[09:22] *** hanekomu joined
[09:30] *** cotto left
[09:30] *** Sarten-X joined
[09:32] *** snearch joined
[09:32] *** awoodland left
[09:34] *** lumi left
[09:35] *** lumi joined
[09:37] *** Sarten-X left
[09:38] *** cotto joined
[09:39] *** Sarten-X joined
[09:42] *** woosley left
[09:44] *** araujo joined
[09:44] *** wamba left
[09:48] *** silug left
[09:48] *** silug joined
[09:57] *** agentzh left
[10:02] *** lumi left
[10:03] *** lumi joined
[10:04] *** silug left
[10:04] *** MayDaniel joined
[10:04] *** MayDaniel left
[10:04] *** MayDaniel joined
[10:05] *** pernatiy left
[10:07] *** S0laris joined
[10:07] <S0laris> dear gents i need some help. I am looking to persuade further my education in information security, and i am not sure which university in Europe is perhaps a top in this field. Please any help would be appreciated. thank you

[10:10] <moritz> I don't think universities are leading in the field of information security

[10:11] <moritz> at least not when it comes to real-world aspects

[10:14] *** Ard1T joined
[10:24] *** nordicdy_ joined
[10:25] *** nordicdy_ left
[10:30] *** S0laris left
[10:31] *** hanekomu_ joined
[10:31] *** hanekomu left
[10:33] *** daniel-s joined
[10:33] <daniel-s> hi

[10:37] *** lumi left
[10:37] *** lumi joined
[10:55] *** MayDaniel left
[11:01] *** Mowah_ left
[11:04] <bbkr_> tadzik: latest panda bootstraps without required Shell::Command

[11:05] *** cotto left
[11:07] *** daniel-s left
[11:09] *** lumi left
[11:10] *** lumi joined
[11:11] *** cotto joined
[11:13] *** Moukeddar joined
[11:15] <bbkr_> is global match implemented in rakudo? m:g/a/ says "Adverb 'g' not allowed" (not "not implemented").

[11:16] *** amkrankruleuen left
[11:20] *** pernatiy joined
[11:22] *** amkrankruleuen joined
[11:24] *** hanekomu_ left
[11:26] *** Mowah left
[11:27] <colomon> rakudo: say "thisi is a test".match(/i./, :global)

[11:27] <p6eval> rakudo 048573: OUTPUT«isi is␤»

[11:27] <colomon> rakudo: say "thisi is a test" ~~ m:g/i./

[11:27] <p6eval> rakudo 048573: OUTPUT«===SORRY!===␤Adverb 'g' not allowed on m at line 22, near ""␤»

[11:27] <colomon> rakudo: say "thisi is a test" ~~ m/:gi./

[11:27] <p6eval> rakudo 048573: OUTPUT«===SORRY!===␤Confused at line 22, near "say \"thisi"␤»

[11:27] <colomon> rakudo: say "thisi is a test" ~~ m/i./:g

[11:27] <p6eval> rakudo 048573: OUTPUT«===SORRY!===␤Confused at line 22, near "say \"thisi"␤»

[11:27] <colomon> weird, I thought we hooked that up ages ago

[11:28] *** Moukeddar left
[11:31] *** Moukeddar joined
[11:40] <moritz> the modifiers go to the frong

[11:40] <moritz> but m:g// has issues with its return value

[11:40] <moritz> s:g/// OTOH works

[11:43] *** satyavvd left
[11:44] <jnthn> tadzik: Just heard from $dayjob that I may be in Poland sometime in August. \o/ Can probably find a way to drop by a PM group. :)

[11:45] *** wamba joined
[11:45] *** lumi left
[11:46] *** lumi joined
[11:52] *** Sarten-X left
[11:53] *** nordicdyno joined
[11:53] *** hanekomu joined
[11:53] *** nordicdyno left
[12:00] *** Sarten-X joined
[12:00] *** Moukeddar_ joined
[12:01] *** Moukeddar left
[12:04] *** Sarten-X left
[12:06] *** wknight8111 joined
[12:08] *** bs338 left
[12:09] *** Moukeddar joined
[12:09] *** Sarten-X joined
[12:09] *** lumi left
[12:10] *** lumi joined
[12:11] *** Moukeddar_ left
[12:11] <takadonet> morning all

[12:12] *** hanekomu left
[12:12] <pmichaud> takadonet: morning

[12:12] <takadonet> pmichaud: I thought you went to bed?

[12:12] *** araujo left
[12:12] <pmichaud> I'm up again... time to take the kids to school

[12:13] <takadonet> how much sleep did you get then?

[12:13] <pmichaud> maybe 1.5 hrs

[12:13] <moritz> colomon: fwiw most other regex flags work on m// - those that are implemented and just return a single Match object

[12:13] <pmichaud> my sleep schedule is totally messed up

[12:14] *** Sarten-X left
[12:15] <pmichaud> jnthn (and others):  any thoughts about a release cycle for nqp ?

[12:15] *** Moukeddar left
[12:16] <moritz> we could make it on the day between the parrot and rakudo release

[12:16] <moritz> but that would make for an unpleasantly tight schedule

[12:17] <pmichaud> I don't mind if we alter the rakudo compiler release schedule for nom

[12:17] <moritz> I think I'd prefer to do the nqp release on the Thursday, and the rakudo release on Saturday or so

[12:17] <moritz> or Friday maybe

[12:17] <pmichaud> maybe we just say "in the days following ..."  without committing to specific days?

[12:17] <pmichaud> or "not later than..."

[12:18] <moritz> +1 to "not later than"

[12:18] <colomon> +1

[12:18] <pmichaud> so, if things are ready sooner, we can publish sooner; if we have a bit of a delay, no biggie.

[12:20] <pmichaud> wfm

[12:20] <pmichaud> afk again ... bbl

[12:22] *** araujo joined
[12:22] *** Sarten-X joined
[12:24] <tadzik> jnthn: cool. But I'm afraid the only semi-active pm group is ours, in Warsaw. Krakow has one, but I dunno if it's active, no updates on the website

[12:24] <tadzik> bbkr_: but does it work without it?

[12:26] <bbkr_> tadzik: no, it doesn't. i added File::Tools, JSON and Mime::base64 by hand to .perl6/lib and it works.

[12:27] <tadzik> I'm confused

[12:27] *** mtk joined
[12:28] <tadzik> why would you need MIME::Base64?

[12:28] *** amkrankruleuen left
[12:30] *** amkrankruleuen joined
[12:31] <bbkr_> I have no idea :)

[12:32] <bbkr_> clean install of 2011.05 compiler build, no .perl6/ directory. i just ran bootstrap. it says it was successful.

[12:33] *** Sarten-X left
[12:35] <jnthn> tadzik: I think it's Warsaw that I'll be in :)

[12:35] *** Sarten-X joined
[12:35] *** hudnix joined
[12:36] <jnthn> pmichaud: I agree making actual releases of NQP is good, as would be a roadmap for it.

[12:36] <jnthn> pmichaud: On schedule, I'm not sure if we'll want/need a release every month.

[12:36] <jnthn> Maybe for now that's a reasonable thing though.

[12:37] <moritz> btw for building nom you have to manually create a Perl6/ directory

[12:37] <moritz> adding a Perl6/.gitignore (or running mkdir somewhere) would help

[12:37] *** lumi left
[12:37] * moritz can't commit the fix right now, not a machine that has a ssh key set up :/

[12:38] *** lumi joined
[12:39] <jnthn> oh yeah, git doesn't handle empty directories :(

[12:39] <jnthn> I need to twiddle with that somewhat anywya though, as it doesn't work out on OSX.

[12:39] <moritz> right

[12:40] <tadzik> jnthn: that's supercool!

[12:40] <jnthn> tadzik: Will let you know more, when I know more. :)

[12:40] <jnthn> Wodka. Can haz. ;)

[12:41] <tadzik> jnthn: about a year ago I was giving a Perl6/RakudoStar talk, I was thinking about doing a "Rakudo Star, a year after" in some upcoming time, if you were here we could make a full-blown Perl 6 workshop

[12:41] <tadzik> bbkr_: I see

[12:47] <jnthn> tadzik: ooh, yes :)

[12:50] *** Holy_Cow joined
[12:50] *** Holy_Cow left
[12:52] *** silug joined
[12:55] *** wamba left
[13:01] *** JimmyZ joined
[13:02] *** JimmyZ_ joined
[13:06] *** JimmyZ left
[13:06] *** JimmyZ_ is now known as JimmyZ

[13:11] *** wamba joined
[13:11] *** lumi left
[13:12] *** lumi joined
[13:20] *** bluescreen10 joined
[13:23] *** silug left
[13:32] *** hanekomu joined
[13:37] *** lumi left
[13:37] *** mikehh joined
[13:38] *** lumi joined
[13:40] *** JimmyZ left
[13:51] *** Shozan left
[13:52] *** ethan left
[13:52] *** ethan_ joined
[13:55] *** _twitch joined
[13:58] *** _twitch left
[14:09] *** PacoLinux joined
[14:12] *** MayDaniel joined
[14:17] *** hercynium joined
[14:21] *** _twitch joined
[14:22] *** benabik joined
[14:26] *** lumi left
[14:27] *** lumi joined
[14:28] *** Sarten-X left
[14:29] *** Moukeddar joined
[14:29] <Moukeddar> what's the bigg fuzz about erlang ?

[14:30] <jlaire> Moukeddar: what big fuzz? :o

[14:30] <Moukeddar> it's spreading :)

[14:35] *** Sarten-X joined
[14:40] <Util> Moukeddar: It is excellent for concurrent programming, like multiple TCP connections (as a client, like a Web spider, or as a server, like your own custom Apache), without having to do buggy threading.

[14:41] <Util> Featured in recent book: Seven Languages in Seven Weeks: A Pragmatic Guide to Learning Programming Languages

[14:41] *** Moukeddar left
[14:41] <Util> Dang, just missed him.

[14:41] *** dotconf joined
[14:43] *** Moukeddar joined
[14:43] <Moukeddar> what did i miss?

[14:43] <Moukeddar> what aout perl ?

[14:43] <Moukeddar> <Moukeddar> where does it spark ?

[14:44] *** dotconf left
[14:45] *** yinyin left
[14:45] <Util> Moukeddar: backlog here about Erlang: http://irclog.perlgeek.de/perl6/2011-05-31#i_3834086

[14:47] <Util> Moukeddar: Do you mean "what is cool about Perl 6"? Or maybe "what is cool about Perl 5"?

[14:48] *** Moukeddar_ joined
[14:48] *** birdwindupbird left
[14:49] <Moukeddar_> the connection is very unstable

[14:49] <Moukeddar_> i wanted to ask , where does Perl sparks ?

[14:49] <Util> Moukeddar: backlog here about Erlang: http://irclog.perlgeek.de/perl6/2011-05-31#i_3834086

[14:50] <Util> Moukeddar: Do you mean "what is cool about Perl 6"? Or are you asking about Perl 5 (the version that almost everyone in the world runs right now)?

[14:50] *** Moukeddar left
[14:50] <tadzik> Moukeddar_: expresiveness would be my vote

[14:50] <Moukeddar_> expressiveness?

[14:51] <tadzik> yes. It makes easy to express what you want to do

[14:51] <tadzik> I find it like this at least

[14:51] <Moukeddar_> design feature :)

[14:51] <Moukeddar_> i mean real world cases?

[14:51] <tadzik> is that not real-world enough? :)

[14:52] *** JimmyZ joined
[14:52] <Moukeddar_> idk ,

[14:53] <tadzik> writing in Perl is fun. You rarely get a feeling that the language makes something hard to do

[14:53] <tadzik> that's my feelings

[14:53] <Moukeddar_> in my university , they use perl to parse data 

[14:53] <Util> Moukeddar_: From Larry Wall's talk: "Perl, the first postmodern computer language" http://www.perl.com/pub/1999/03/pm.html

[14:53] <Util> ...it puts the focus not so much onto the problem to be solved, but rather onto the person trying to solve the problem.

[14:54] <Moukeddar_> Util, elaborate please

[14:54] <Tene> http://news.ycombinator.com/item?id=2602340 -- .Net to javascript compiler, written by an acquaintence of mine; thought a few people here would find it interesting

[14:55] *** Moukeddar_ left
[14:57] *** Moukeddar joined
[14:57] <Moukeddar> i'm so sorry guys , this connection is driving me crazy

[14:58] <Moukeddar> i can't keep up with you.

[14:59] *** kaare_ joined
[14:59] <Util> Moukeddar: Can you get to the web to see the backlog? http://irclog.perlgeek.de/perl6/2011-05-31#i_3834086

[15:00] <Util> That way you need not have IRC connected every moment.

[15:03] <Util> Moukeddar: Perl takes the good features of many languages, while leaving behind their painful parts, and integrates them into a real *language* that a programmer's brain can use fluidly.

[15:03] <Util> Most other languages feel like they have speedbumps between all the good parts.

[15:03] *** ethan_ left
[15:03] *** Moukeddar left
[15:04] *** ethan joined
[15:06] *** koban` left
[15:08] *** lumi left
[15:09] *** lumi joined
[15:09] <sorear> good * #perl6

[15:09] <Util> \o

[15:09] <colomon> o/

[15:12] <Util> Regarding http://perlcabal.org/syn/S32/Containers.html#min

[15:12] <Util> I have run across two RosettaCode tasks that would benefit from .max and .min returning a list instead of a single entry when unbroken ties occur.

[15:12] <Util> For example, this code:

[15:13] <Util> rakudo: my @a=[11],[13,13,13],[14,14],[15,15,15],[19,19]; my $max = @a.max({.elems}); my @maxes = @a.grep({$max==.elems}); @maxes.perl.say;

[15:13] <p6eval> rakudo 048573: OUTPUT«[[13, 13, 13], [15, 15, 15]]␤»

[15:13] <Util> versus this:

[15:13] <Util> rakudo: my @a=[11],[13,13,13],[14,14],[15,15,15],[19,19]; my @maxes = @a.max({.elems}); @maxes.perl.say;

[15:13] <p6eval> rakudo 048573: OUTPUT«[[13, 13, 13]]␤»

[15:13] <Util> If .max returned a list, then the second version would produce the same output as the first.

[15:13] <Util> A) Doesn't this seem like a generally useful change?

[15:13] <Util> B) Would there be any downsides to the change?

[15:13] <Util> C) Wouldn't this also apply to .minmax?

[15:13] *** snearch left
[15:13] <Tene> jnthn, sorear: I think both of you have done some .net/clr stuff: http://news.ycombinator.com/item?id=2602340

[15:14] <moritz> Util: consider 1 + @array.max

[15:14] <moritz> Util: on @array = (1, 5, 2, 4, 5);

[15:15] *** thou joined
[15:15] <moritz> Util: I'd be very surprised if that expression returned 3, and not 6

[15:15] <moritz> Util: but if .max returned a list of all maxes, it would return 3

[15:16] <moritz> (at least if I understood your proposal correctly)

[15:17] <Util> moritz: I see your point. What if we change .max to be context aware as well?

[15:17] *** DarthGandalf left
[15:18] <moritz> Util: context doesn't flow inwards in Perl 6 anymore

[15:18] <moritz> Util: and the problem is not tied to numeric context

[15:18] <moritz> Util: 'Hallo ' ~ @names.min ~ ' and up to ' ~ @names.max

[15:19] <Util> moritz: right, thanks. I will ponder it further.

[15:19] *** Moukeddar joined
[15:19] <Tene> rakudo: sub foo { return 'a' but ['a','a','a']}; my $x = foo(); say $x.perl; my @a = foo(); say @a.perl;

[15:19] <p6eval> rakudo 048573: OUTPUT«"a"␤["a"]␤»

[15:19] <moritz> Util: the fact remains that .min and .max returning multiple elements just isn't intuitive, and will surprise too many programmers. If you make the return value more magic, you just create weird edge cases where the expectations breakds down

[15:21] *** ethan left
[15:22] <Moukeddar> GIT or SVN for private projects ?

[15:22] <Util> Perhaps new methods, like .mins and .maxs?

[15:23] <moritz> Moukeddar: git

[15:23] <Moukeddar> Gracias

[15:23] *** hanekomu left
[15:23] <Util> Moukeddar: Whichever you are proficient in. If neither yet, then Git, definitely.

[15:23] <moritz> Util: that would be better than changing the existing ones, but I'm not sure their use is sufficiently wide to warrant inclusion in the core language

[15:23] <Moukeddar> neither , so Git :)

[15:24] <moritz> Util: they are not even in p5's List::MoreUtils

[15:24] <Util> moritz: good point

[15:24] * moritz usually can't be bothered to set up a local SVN server

[15:26] *** Sarten-X left
[15:27] *** leprevost joined
[15:34] <sorear> jnthn: ping

[15:35] *** Sarten-X joined
[15:36] <tadzik> orka

[15:41] *** noganex_ joined
[15:42] *** bluescreen10 left
[15:42] *** noganex left
[15:44] <tadzik> :)

[15:49] *** isBEKaml joined
[15:49] *** _twitch left
[15:50] *** lumi left
[15:50] *** pernatiy left
[15:51] *** lumi joined
[15:51] *** silug joined
[15:52] <sorear> tadzik: hi

[15:53] *** DarthGandalf joined
[15:55] *** Moukeddar_ joined
[15:55] *** ymasory joined
[15:55] *** Moukeddar left
[15:56] <sorear> tadzik: ping.

[15:57] *** REPLeffect joined
[16:00] *** Moukeddar joined
[16:01] * jnthn home from $dayjob :)

[16:02] *** Moukeddar_ left
[16:03] <jnthn> sorear: pong

[16:03] <sorear> jnthn: How well does/will ctmo support precompiling user modules?

[16:03] <colomon> Wynne:docs colomon$ mono --version

[16:03] <colomon> Mono JIT compiler version 2.10.2 (tarball Mon Apr 18 09:14:01 MDT 2011)

[16:03] <colomon> \o/

[16:04] <sorear> \o/

[16:05] <colomon> and niecza-6 works on my Mac!

[16:05] <jnthn> sorear: At least as well as master.

[16:05] <jnthn> sorear: Tehre's one more big refactor, post-nom, to take it the "rest of the way".

[16:05] <jnthn> e.g. to have proper BEGIN support.

[16:06] <sorear> yesss I was going to ask about that.

[16:06] <sorear> basically I still don't really get how BEGIN is supposed to work in combination with serialization

[16:07] <jnthn> sorear: Alas, I put off dealing with it Right Now because I suspected it'd be hard and I have enough hard things to think about already with 6model, package refactor, etc.

[16:07] <sorear> how do you stop BEGIN-time code from breaking all the invariants that make precomp work?

[16:07] <sorear> or is this just a case where we tell people "Here's a gun.  Use it responsibly."

[16:07] <jnthn> I suspect the latter.

[16:08] <sorear> colomon: Did you have to upgrade the OS after all?

[16:08] <jnthn> I mean, provided the result is odd behavior rather than segfaults, it's OK.

[16:08] *** Su-Shee left
[16:08] <jnthn> sorear: I suspect we need an implementation of it to experiment with before we'll really know.

[16:08] *** Moukeddar left
[16:08] <sorear> I'm more worried by the possibility of unpredictable behavior

[16:08] <jnthn> *nod*

[16:09] <sorear> A reliable segfault is better than randomly getting the wrong answer... I hate heisenbugs

[16:09] *** wamba left
[16:09] <jnthn> True. I'm not sure I'm expecting unrepeatable behavior unless people go out of their way to get it.

[16:10] <sorear> well, FSVO unrepeatable

[16:10] <tadzik> sorear: pong

[16:10] <sorear> niecza has a compiled-modules cache that's supposed to be invisible to normal users

[16:10] <jnthn> Right, that's what I expect Rakudo to also do.

[16:10] <sorear> in a BEGINny situation, "what modules were compiled this run" can have big effects

[16:11] <jnthn> In theory, separate compilation is meant to avoid that issue.

[16:12] <jnthn> The GLOBAL that BEGIN sees isn't really global.

[16:12] <jnthn> As far as I understand it, anyway.

[16:12] <jnthn> So every compilation unit (e.g. module) gets an empty GLOBALish which becomes the GLOBAL as far as its BEGIN blocks care.

[16:12] <jnthn> PROCESS is, admittedly, still a point of leakage.

[16:13] <jnthn> And there may well be others.

[16:14] *** mattp_ left
[16:14] *** mattp_ joined
[16:14] *** thou left
[16:17] <sorear> tadzik: repong.

[16:18] <colomon> sorear: I didn't have to upgrade the OS after all.  Turned out all I needed to do was google "mono download" and download a pre-compiled package rather than trying to get it with the stupid MacPorts package manager.

[16:18] <colomon> sorear: fast and simple, once I tried to do it the Mac way rather than the Linux way.  :)

[16:18] *** Sarten-X left
[16:18] <sorear> tadzik: I'm thinking now about how I can get into the Perl 6 Ecosystem ... stuff

[16:20] *** Ard1T left
[16:20] <sorear> tadzik: wondering what form that should take.  Panda port?  Incorporate module fetching into own build system?

[16:20] <colomon> Panda port, I reckon.

[16:21] *** nymacro left
[16:22] <pmichaud> re-good morning, #perl6

[16:22] <sorear> hello pmichaud

[16:23] *** ethan joined
[16:24] <jnthn> o/ pmichaud 

[16:25] <jnthn> pmichaud: Should be able to get some basic multi-dispatch back in this evening :)

[16:26] <jnthn> pmichaud: When you have a moment, would be good to discuss containers a bit.

[16:26] <sorear> What kind of containers?

[16:27] <pmichaud> I have a moment now

[16:27] <jnthn> pmichaud: OK.

[16:27] *** nymacro joined
[16:27] <jnthn> pmichaud: I've realized that we've been getting away with a load of stuff with our current container model that becomes...trickier...with 6model.

[16:27] *** REPLeffect left
[16:28] <jnthn> pmichaud: Of note, we now have a bunch of ops that do stuff with objects. .HOW, .WHAT and so on are macros.

[16:28] <pmichaud> container meaning "variables"  or meaning "aggregate containers"?

[16:28] <jnthn> pmichaud: Variables, but...well...I kinda want to figure out the two. :)

[16:28] <pmichaud> okay

[16:28] <sorear> I have choice words for the ng variables model...

[16:29] *** Sarten-X joined
[16:29] <jnthn> pmichaud: The whole "v-table delegation on scalar decontainerizes" is probably not very sustainable.

[16:29] <jnthn> pmichaud: I keep finding that the 6model ops expect to really have been given a pre-decontainerized thingy.

[16:30] <jnthn> And am worried that explicitly doing that will result us explicit dereferencing bits all over the codebase.

[16:30] <jnthn> I can make variants of the ops that do the dereferencing...which will then break when containerized stuff gets passed into NQP code.

[16:30] <pmichaud> if a 6model op expects a decontainerized thingy, can it just decontainerize?

[16:30] <jnthn> Yeah...but it's an NQP interop issue.

[16:30] *** noganex joined
[16:31] <pmichaud> I don't understand NQP interop

[16:31] <jnthn> Meta-objects are written in NQP

[16:31] <jnthn> I already ran into this one

[16:31] <jnthn> multi trait_mod:<is>($child, $parent) { $child.HOW.add_parent($parent) }

[16:32] <jnthn> This failed because ClassHOW (written in NQP) tried to get_how on $parent, but it was wrapped up in a ObjectRef.

[16:32] *** wtw left
[16:32] <sorear> It will make your lives much simpler if you rigorously separate ObjectRef from Object

[16:32] <jnthn> Of more concern though, we don't currently treat scalar containers as real objects.

[16:33] *** noganex_ left
[16:33] <jnthn> So we don't have a good path to implement my $foo is OtherThing;

[16:33] <pmichaud> ...why not make NQP aware of containers?

[16:33] *** lumi left
[16:33] <pmichaud> more to the point, I'm guessing containers should be implemented in NQP, not in Rakudo.

[16:33] <jnthn> pmichaud: Well, and the compiler toolkit generally perhaps... :)

[16:33] *** nymacro left
[16:33] <jnthn> sorear: Yes, we have too much magic right now.

[16:33] <jnthn> And as per usual, the magic is coming to hurt.

[16:33] <sorear> Explicit (de)containerization has been very good to me.

[16:34] <pmichaud> I don't understand "rigorously separate ObjectRef from Object"

[16:34] *** lumi joined
[16:34] <jnthn> pmichaud: I think sorear really means, don't try and pretend a containerized object and a decontainerized object can be used equivalently.

[16:34] <jnthn> pmichaud: Which is, largely, what we've been doing so far.

[16:34] <pmichaud> well, that's what Perl 6 does.

[16:34] <jnthn> From the user's POV, yes.

[16:35] <jnthn> But I'm not entirely sure we can go on that way. 

[16:35] <jnthn> Especially since we need to support user-defined containers.

[16:36] <jnthn> and .VAR should really give back a real object.

[16:36] <jnthn> sorear: Can you describe the explicit model a little more?

[16:36] <jnthn> sorear: How do you decide when to decontainerize?

[16:37] <sorear> remove the container when you need to operate on the object itself

[16:37] <pmichaud> explain "need to operate" here

[16:37] <aloha> positive: nothing; negative: nothing; overall: 0.

[16:37] <pmichaud> you mean... invoke a method?

[16:37] <sorear> I'm not quite sure how the explicit model would interact with NQP though

[16:38] <jnthn> sorear: What pmichaud asked. :) That was what I really meant to ask. :)

[16:38] <sorear> invoking a method is an odd grey area since it needs both the object and the variable

[16:38] <pmichaud> if it's not "invoke a method" ... what other operations are you referring to in "operate on the object"?

[16:38] <sorear> .HOW is the most basic example of "operating on the object"

[16:38] <jnthn> Yes, .HOW is one I ran into also.

[16:39] <jnthn> sorear: How many operations (roughly) do you have where you explicitly decontainerize?

[16:39] <sorear> $obj.foo; -> $obj.FETCH.HOW.find_method("foo").invoke($obj)

[16:39] <sorear> jnthn: almost all of them

[16:39] *** REPLeffect joined
[16:40] <jnthn> sorear: Where "them" are...?

[16:40] <pmichaud> .oO( "Q: How many states are in the U.S.?  A:  All of them." )

[16:41] <jnthn> sorear: All the "low level" operations, essentially?

[16:41] <sorear> jnthn: dozens, maybe a hundred

[16:41] <sorear> all the low level operations

[16:41] <jnthn> ok.

[16:42] <jnthn> sorear: Do you do .FETCH explicitly as a method call or is it more "low level" than that?

[16:42] <pmichaud> is ".FETCH" just a way of saying "decontainerize" ?

[16:42] <sorear> jnthn: it's .Fetch() in the C# code

[16:42] <sorear> pmichaud: yes

[16:43] <jnthn> pmichaud: fwiw, I'm leaning more towards the sort of model sorear++ is suggesting than what we're doing now.

[16:43] <sorear> jnthn: niecza variables are not real Perl 6 objects (I still haven't made up my mind whether to fix this, or just to make VAR cheat)

[16:44] <pmichaud> jnthn: your statements seem to imply I have some sort of attachment to what we're doing now

[16:44] <jnthn> pmichaud: That wasn't my implication.

[16:45] <jnthn> pmichaud: I was more implying that I think Rakudo should change here.

[16:45] <sorear> actually in the distant past niecza used real objects with a "FETCH" method, but it turned out that running multiple inferior runloops from every op was ... slow would be an understatement

[16:45] <pmichaud> so far I'm not following (1) what model sorear++ is suggesting or (2) what's really the issue with the current model

[16:45] <pmichaud> I totally agree Rakudo should change its model

[16:45] <pmichaud> that goes along with what I said yesterday about "rethinking things from the ground up"

[16:46] *** wamba joined
[16:46] <jnthn> At the moment, ObjectRef just delegates all vtable methods to the vtable method of the value it holds.

[16:46] <sorear> the crux of what I'm proposing is that you should be explicit in saying "containers are allowed here, they aren't here"

[16:46] <pmichaud> jnthn: I have no problem with saying that we have to decontainerize before doing any vtable methods (more)

[16:47] <jnthn> And then it a few places we explicitly decontainerize.

[16:47] <pmichaud> as I mentioned yesterday, we're really reaching a point where we shouldn't be doing much vtable access at all

[16:47] <jnthn> What I think sorear is suggesting is that our expectation should more be that we decontainerize explicitly where we need to.

[16:47] <sorear> why not do vtable access?

[16:47] <pmichaud> because parrot vtables are horribly slow for custom vtables

[16:48] <sorear> ...

[16:48] <pmichaud> I'm not saying don't do them... I'm saying they don't fit the Perl 6 model

[16:48] <jnthn> pmichaud: I still don't know that argument holds up with 6model. 

[16:48] <jnthn> (the speed one)

[16:48] <sorear> I thought the point of vtables was that they were faster than methods

[16:48] <jnthn> The "don't fit" one, OTOH, I agree with.

[16:48] <pmichaud> sorear: for PMCs, yes.  For custom HLL object types, they're a lot slower.

[16:48] <sorear> (when they are implemented in C, anyway)

[16:49] <pmichaud> (decontainerize explicitly where we need to)   I have no problem with that.

[16:49] <jnthn> OK.

[16:50] <pmichaud> I do think that containers should be implemented/provided in NQP, not in Rakudo.

[16:50] <pmichaud> unelss there's something incredibly specific about Rakudo containers versus what other HLLs might want/need

[16:50] <sorear> pmichaud: should NQP be magically container-aware?  ($x + $y versus $x.FETCH + $y.FETHC)

[16:50] <pmichaud> we do containers in Rakudo now simply because Parrot doesn't provide a usable container (or even lvalue) model

[16:51] <pmichaud> I don't understand "magically"

[16:51] <jnthn> pmichaud: I suspect that the notion of containers and some primitives should go there, but they should work with higher level container types, so we can support custom containers.

[16:51] <pmichaud> jnthn: yes, I'm thinking a base level container class

[16:51] <sorear> jnthn: how hard would it be in 6model to make a cross-level hook thing where you can implement, say, Bool.get_bool in C?

[16:52] <jnthn> sorear: If you add_parrot_vtable_override an NCI PMC in the meta-object, you can do that today.

[16:52] <pmichaud> let me back the discussion up just a bit

[16:53] <jnthn> sorear: That's know the KnowHOW and its circularity are implemented.

[16:53] <pmichaud> is it possible in 6model for us to create a Scalar data type?

[16:53] <colomon> sorear: I'm very impressed by your BigInt handling so far.  Everything I've tried has been scary fast.

[16:53] <jnthn> sorear: Well, the NCI bit.

[16:53] <pmichaud> i.e., something that acts like an ObjectRef ?

[16:53] <jnthn> pmichaud: We can do something like that.

[16:53] <pmichaud> That's what we should do, then.

[16:53] *** cdarroch joined
[16:53] *** cdarroch left
[16:53] *** cdarroch joined
[16:53] <jnthn> pmichaud: I'm curious what it is that makes a type "be" a container.

[16:54] <sorear> colomon: if you check the copyright statement on the file I checked in... send your thanks to kumpera in #mono

[16:54] <pmichaud> jnthn: the way it responds to .FETCH and .STORE

[16:54] <pmichaud> .FETCH on a non-container returns self

[16:54] <pmichaud> .FETCH on a container returns the thing it contains

[16:54] <jnthn> pmichaud: I more meant, how does .FETCH know that :)

[16:55] *** noganex left
[16:55] <sorear> niecza's current model: "Variable x" refers to a container, "P6any x" doesn't.  If a read-only value needs to be put in a "Variable x" slot, create a rw = false container.

[16:55] *** daxim left
[16:55] *** mj41 left
[16:55] <sorear> disclaimer: Kernel.NewROScalar is consistantly one of the top allocators and I'm not convinced I'll keep this model much longer

[16:55] <jnthn> sorear: Essentially, it goes on type?

[16:55] <pmichaud> .FETCH isn't just like a normal method or custom op?

[16:56] <colomon> sorear: If I'm reading this right (and it's approximate for sure), it looks like it takes about a tenth of a second to calculate and print 2 ** 3 through 2 ** 200.  That's just crazy.

[16:56] <jnthn> pmichaud: I expect it'd be op-ish, like .HOW

[16:56] <pmichaud> opish is fine

[16:56] <sorear> colomon: 2**200 is only a 25 byte value

[16:56] *** Sarten-X left
[16:56] *** noganex joined
[16:57] <sorear> operating on 25 or fewer bytes 197 times shouldn't take a modern computer more than a few hundred ns

[16:57] *** [hercynium] joined
[16:57] *** [hercynium] left
[16:57] *** [hercynium] joined
[16:57] *** ymasory left
[16:58] <jnthn> pmichaud: What you say put containers into NQP, does this imply that we may add them to NQP as a language? Or are you thinking more that we just put some container support into the compiler toolkit?

[16:58] <pmichaud> not in the language

[16:58] <jnthn> So it's there for Rakudo and other HLLs?

[16:58] <jnthn> OK

[16:58] <pmichaud> NQP is lower-level than that

[16:58] <jnthn> +1

[16:58] <colomon> sorear: that may be so, but I reckon it's competitive with the speed Rakudo has handling 32-bit integers, at a guess...

[16:58] <pmichaud> NQP doesn't need containers because it doesn't have assignment

[16:58] <pmichaud> but it can provide support for containers because HLLs do have assignment

[16:58] <jnthn> Well, that's what I was really getting at. :)

[16:58] <pmichaud> to justify it a bit further

[16:59] <jnthn> (e.g. were you pondering adding assignment to NQP)

[16:59] <pmichaud> noway

[16:59] <jnthn> OK, that's my feeling too. :)

[16:59] *** hercynium left
[16:59] *** [hercynium] is now known as hercynium

[16:59] <pmichaud> to justify it a bit further, I think one of the huge glaring holes of Parrot's design is that it doesn't support scalar containers "out of the box"

[16:59] <pmichaud> it also doesn't have any speedy support for any sort of object reference

[17:00] <pmichaud> i.e., there's no way to reference a reference

[17:00] <pmichaud> references in parrot aren't a built-in type

[17:00] <pmichaud> (whether that's as a PMC object or as a register)

[17:01] <pmichaud> NQP probably needs to overcome that limitation, at least for Parrot

[17:01] <jnthn> Well, really it needs to provide a consistent view of it over multiple VMs.

[17:01] <pmichaud> and that is the other reason for doing it there :)

[17:02] <jnthn> I'm very much more pushing container support down into the compiler toolkit though.

[17:02] <pmichaud> I guess to be more precise...

[17:02] <pmichaud> (more)

[17:02] <jnthn> BTW, when you say "into NQP" these days, should I be reading that as "into the compiler toolchain" rather than just "into the NQP language"?

[17:03] <pmichaud> I'm not committed one way or another about where container support lives (NQP versus Rakudo)

[17:03] <pmichaud> I'm very committed that our containers in Rakudo should be 6model based thingies and not PMCs

[17:03] <jnthn> OK, that's where I want to go with this too.

[17:04] <pmichaud> I think that NQP (the language) has to be aware somehow of the possible existence of container types and be able to work with them

[17:04] <colomon> sorear: Confirmed: calculating and printing 2 ** 1 through 2 ** 30 seven times in Rakudo takes twice as long as calculating and printing 2 ** 1 through 2 ** 200 in niecza.  sorear++

[17:04] <pmichaud> I don't think that NQP needs to use containers for its own variable bindings.

[17:04] *** [hercynium] joined
[17:05] *** Sarten-X joined
[17:05] <pmichaud> when I say "into NQP", whether that means the language or toolchain will probably depend on context.

[17:05] *** hercynium left
[17:05] *** [hercynium] is now known as hercynium

[17:05] <jnthn> OK, makes sense now. :)

[17:05] <pmichaud> I'll try to be explicit in the future... but just like "Perl 6" implies a language and a runtime environment, so does "NQP" these days :-)

[17:05] <jnthn> I see what you meant by "into NQP".

[17:06] <jnthn> Yeah, I'm tending to draw out 6model vs compiler toolkit vs NQP language a bit these days.

[17:06] <moritz> \o/ I can haz internetz again!

[17:06] <jnthn> I'm aware some in Parrot land want to use 6model without using NQP.

[17:06] <jnthn> moritz: yay! \o/

[17:07] <jnthn> Of course, I'm all for making the three together integrate really nicely so folks will really want to use them all together. :)

[17:07] <pmichaud> afk for a bit

[17:08] <colomon> moritz: \o/

[17:09] *** JimmyZ left
[17:11] <pmichaud> back

[17:13] *** lumi left
[17:14] *** lumi joined
[17:15] <jnthn> pmichaud: I plan to focus on multi-dispatch things this evening, once I've had some nom. After that, I'll trun my attention to containers and maybe try to come up with some suggestion or prototype.

[17:16] <jnthn> *turn

[17:16] <jnthn> pmichaud: I probably have most of the next two days available for Rakudo hacking.

[17:16] <colomon> sorear: Complex.re isn't there in niecza yet?  Also, seems like test.pl has many holes?  (Or am I missing something about how the tests are supposed to work?)

[17:17] *** masak joined
[17:17] <masak> bonsoir, gezebroj.

[17:18] <colomon> o/

[17:18] <jnthn> lolitsmasak!

[17:18] <masak> \o/

[17:18] <jnthn> masak: yay 1.5 red days ;)

[17:19] <masak> yay

[17:19] <masak> quick question: so... can I just nuke S32/Str:549..557?

[17:20] <masak> no objections? :)

[17:20] <colomon> what is it?

[17:20] <masak> lvalue substr

[17:20] * colomon looks to pmichaud ...

[17:20] <masak> thing that bugs me is this: either substr'd have to be magical for that to work.

[17:21] <pmichaud> I think substr is supposed to be magical

[17:21] <masak> a special syntactic form, akin to $str ~~ s[] = ...

[17:21] <pmichaud> at least, it was last I checked.

[17:21] <pmichaud> (per the spec)

[17:21] <jnthn> I'm not convinced it'd have to be a special syntactic form, fwiw.

[17:21] <masak> is there any place OTHER than S32/Str:549 that mentions substr being magical in this way?

[17:22] <pmichaud> no, I don't mean syntactically magical

[17:23] <colomon> sorear: @*ARGS NYI?

[17:24] * jnthn bbs, making nom

[17:25] <pmichaud> masak: I think it may fall into the category of "perl 6 has it because it exists in p5" or something like that.

[17:26] <masak> pmichaud: is the Str returned from substr a special container with an overridden STORE method?

[17:26] * colomon just created a simple mandlebrot set using niecza

[17:26] <pmichaud> masak: conceptually, yes.

[17:26] <masak> pmichaud: so, essentially we're not using anything that's not available on the user level already to have this work?

[17:26] <masak> I'm more fine with it staying, then.

[17:27] *** Holy_Cow joined
[17:28] *** dakkar left
[17:29] *** Mowah joined
[17:30] *** Sarten-X left
[17:35] *** sftp joined
[17:36] * colomon however, a 1001 x 1001 Mandelbrot is slow even in niecza....

[17:36] *** ymasory joined
[17:37] <colomon> 4m, 15s, counting startup time.

[17:38] <colomon> bad news is, it looks like the math may be a little bit wonky?

[17:39] *** Sarten-X joined
[17:39] <colomon> niecza: say (1 + 1i).abc

[17:39] <p6eval> niecza v6-1-gbe9e4f6: OUTPUT«Unhandled exception: Unable to resolve method abc in class Complex␤  at /tmp/9__2Lao8SY line 1 (MAIN mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1438 (CORE C638_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1439 (CORE module-CORE @ 42) ␤ 

[17:39] <p6eval> ..at /home/p6ev…

[17:39] <colomon> niecza: say (1 + 1i).aba

[17:39] <p6eval> niecza v6-1-gbe9e4f6: OUTPUT«Unhandled exception: Unable to resolve method aba in class Complex␤  at /tmp/XM2Pw6Amvl line 1 (MAIN mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1438 (CORE C638_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1439 (CORE module-CORE @ 42) ␤ 

[17:39] <p6eval> ..at /home/p6ev…

[17:39] <colomon> niecza: say (1 + 1i).abs

[17:39] <p6eval> niecza v6-1-gbe9e4f6: OUTPUT«1+1i␤»

[17:39] <colomon> well, that explains the error, I reckon

[17:40] <colomon> ping sorear 

[17:40] *** donri left
[17:43] *** sail0r joined
[17:43] <sail0r> Am curious...how much of the test suite does the latest rakudo star release pass?

[17:45] *** impious joined
[17:46] <colomon> sail0r: I don't know if someone handy knows the answer, but I'm not sure the question really makes much sense.  (after all, the test suite is also incomplete!)  what are you curious about?  

[17:48] *** thou_ joined
[17:53] <colomon> niecza: say (1 - 1i).abs

[17:53] <p6eval> niecza v6-1-gbe9e4f6: OUTPUT«1-1i␤»

[17:53] <colomon> niecza: say (-1 - 1i).abs

[17:53] <p6eval> niecza v6-1-gbe9e4f6: OUTPUT«1+1i␤»

[17:53] *** silug left
[17:53] *** silug joined
[17:54] <moritz> ouch

[17:55] *** kaare__ joined
[17:55] *** kaare_ left
[17:56] <sail0r> niecza: say puke

[17:56] <p6eval> niecza v6-1-gbe9e4f6: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤       'puke' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 469 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1146 (STD P6.comp_unit @ 31) ␤  at

[17:56] <p6eval> ../home/p6eval/niecza/sr…

[17:56] <sail0r> niecza: say "puke"

[17:56] <p6eval> niecza v6-1-gbe9e4f6: OUTPUT«puke␤»

[17:59] *** kaare__ left
[18:02] *** kaare__ joined
[18:02] <sail0r> std: say "puke"

[18:02] <p6eval> std 4b1b100: OUTPUT«ok 00:01 113m␤»

[18:03] <sail0r> rakudo: say "puke"

[18:03] <p6eval> rakudo 048573: OUTPUT«puke␤»

[18:03] <sail0r> niecza: 2-2

[18:03] <p6eval> niecza v6-1-gbe9e4f6:  ( no output )

[18:03] <sail0r> niecza: say 2-2

[18:03] <p6eval> niecza v6-1-gbe9e4f6: OUTPUT«0␤»

[18:04] <sail0r> rakudo: while(1){ say "puke}

[18:04] <p6eval> rakudo 048573: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<{ }>, couldn't find final '}' at line 22␤»

[18:04] <sail0r> haw haw haw

[18:04] *** sail0r left
[18:04] <moritz> rakudo: while 1 { say "puke" }

[18:05] <p6eval> rakudo 048573:

[18:05] <p6eval> ..OUTPUT«(timeout)␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤pu…

[18:05] *** arnsholt left
[18:05] <masak> ...happy now? :P

[18:05] <colomon> rakudo: loop { say "puke" }

[18:05] <masak> or, should I say, "feeling better now?"

[18:05] <p6eval> rakudo 048573:

[18:05] <p6eval> ..OUTPUT«(timeout)␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤puke␤pu…

[18:08] *** kaare_ joined
[18:08] * moritz feels puked

[18:08] *** kaare__ left
[18:12] *** kaare__ joined
[18:12] *** kaare_ left
[18:14] *** hercynium left
[18:17] *** Sarten-X left
[18:18] <colomon> loliblogged: http://justrakudoit.wordpress.com/2011/05/31/just-dont-rakudo-it/

[18:18] <masak> colomon++ # title win

[18:19] <pmichaud> ...leading contender?  really?

[18:20] <masak> yeah, I thought that was Yapsi. :P

[18:21] *** kaare__ left
[18:21] <colomon> well, I don't have a hard feeling for how much is missing in niecza.  but there's a lot there right now, and sorear++ is making crazily impressive progress.

[18:22] <colomon> and if he can get the goods in place without losing that speed advantage...

[18:24] <pmichaud> that's a little.... odd.  one of the reasons rakudo's mathematics is slow is because of code you added, colomon.

[18:25] <pmichaud> sorry, that was low on my part.  I think I need a break again for a while.

[18:25] *** pmichaud left
[18:25] *** Sarten-X joined
[18:26] <masak> :/

[18:26] <jnthn> ...huh?!

[18:27] <masak> I... I'm a bit stumped.

[18:27] <sbp> too many loop { say "puke" } constructs in the maths modules

[18:28] <jnthn> The way Num and Rat constants are done in Rakudo is not at all optimal, but it's also one of the things being fixed in nom, and I'm certainly happy to have had it working in some way rather than not up until this point.

[18:28] *** impious left
[18:30] <masak> colomon: fwiw, I agree about sorear++'s crazily impressive progress. but the features missing become evident as soon as one tries to run any Rakudo-based p6 code straight off. cf the contest entries.

[18:30] <szabgab> hi, I built a windows installer for Rakudo Starr but it is 20 Mb

[18:31] <szabgab> what parts of the original directory can I leave out?

[18:31] <jnthn> Rakudo Starr....the drummers edition of Rakudo!

[18:31] <jnthn> ;)

[18:31] <moritz> all .git dirs

[18:32] <jnthn> szabgab: Did you make install?

[18:32] <szabgab> yes make install

[18:32] <jnthn> szabgab: OK, what did you bundle already?

[18:32] <szabgab> and I don't think I have .git as it was built from the release

[18:32] <szabgab> downloaded the released source

[18:32] <szabgab> built it 

[18:32] <masak> #phasers in 29?

[18:32] <szabgab> and the whole directory 

[18:32] <colomon> masak: yes, but there's also an increasing list of features that niecza supports that rakudo does not.

[18:33] <masak> colomon: that's indeed worth pointing out.

[18:33] <jnthn> szabgab: I suspect just the install directory rather than the entire source tree is needed.

[18:34] <jnthn> e.g. if you specify a prefix when building like c:\Rakudo, then it's the stuff in there that needs installing.

[18:34] <masak> someone(TM) should decide to build a feature matrix for various features and Pugs/Rakudo/Niecza.

[18:34] <jnthn> masak: That'd be interesting to see.

[18:34] <szabgab> oh I can specify prefix ?

[18:35] <szabgab> I did not see that in the readme

[18:35] <szabgab> let me try it now

[18:35] <colomon> masak: and none of those features are ones which the contest programs will test, because they were supposed to work on Rakudo (in practice, if not in the rules).

[18:35] <masak> colomon: troo

[18:36] <masak> pugs: class A {}; class B { trusts A }

[18:36] <p6eval> pugs:  ( no output )

[18:36] <masak> pugs: class A {}; class B { trusts A }; say "alive"

[18:36] <p6eval> pugs: OUTPUT«alive␤»

[18:36] <masak> Pugs has 'trusts'. no other implementation does.

[18:36] <jnthn> szabgab: alas, no

[18:36] <masak> niecza: class A {}; class B { trusts A }; say "alive"

[18:36] <p6eval> niecza v6-1-gbe9e4f6: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Action method package_declarator:trusts not yet implemented at /tmp/VtpAYZBAD4 line 1:␤------> [32mclass A {}; class B { trusts A[33m⏏[31m }; say "alive"[0m␤␤Unhandled exception: Unable to resolve method statement_level in class Str␤ 

[18:36] <p6eval> ..at /home/p6…

[18:38] <szabgab> the thing works if I only have rakudo\install  and nothing else

[18:38] <szabgab> but I wonder what else should I try beside 42.say

[18:38] *** cooper__ joined
[18:38] <jnthn> Maybe try one of the built-in modules

[18:38] <jnthn> rakudo: use JSON::Tiny;

[18:39] <p6eval> rakudo 048573: OUTPUT«===SORRY!===␤Unable to find module 'JSON::Tiny' in the @*INC directories.␤(@*INC contains:␤  lib␤  /home/p6eval/.perl6/lib␤  /home/p6eval//p2/lib/parrot/3.4.0-devel/languages/perl6/lib␤  .)␤»

[18:39] <jnthn> star: use JSON::Tiny;

[18:39] <p6eval> star 2011.04:  ( no output )

[18:39] <jnthn> star: use JSON::Tiny; say "ok"

[18:39] <p6eval> star 2011.04: OUTPUT«ok␤»

[18:39] <jnthn> szabgab: ^

[18:40] <szabgab> it told me ok

[18:41] <szabgab> is that a p6 implementation?

[18:41] <masak> it's Rakudo Star.

[18:41] *** cooper__ is now known as cooper

[18:41] *** Holy_Cow left
[18:42] <szabgab> but the JSON::Tiny is I guess a p6 module that comes with r*

[18:42] <szabgab> right?

[18:42] <moritz> star: use JSON::Tiny; say to-json([1, 'abc'])

[18:42] <p6eval> star 2011.04: OUTPUT«[ 1, "abc" ]␤»

[18:42] <szabgab> oh to-json :)

[18:43] <szabgab> I was trying to_josn

[18:43] <masak> that's wrong, twice :P

[18:43] <flussence> .oO( javascript object syntax-notation? )

[18:43] <masak> we should really implement that method name typo detector... :P

[18:44] <szabgab> oh and if I do that on separat lines it does not work

[18:44] <szabgab> it even forgets I loaded a module ?

[18:44] <masak> star: use JSON::Tiny;␤say to-json([1, 'abc'])

[18:44] <p6eval> star 2011.04: OUTPUT«[ 1, "abc" ]␤»

[18:44] <masak> wfm

[18:45] <szabgab> no

[18:45] <jnthn> masak: I think he meant in the repl, where it should work, but it can be a little quirky.

[18:45] *** pmichaud joined
[18:45] <pmichaud> jnthn: ping

[18:45] <masak> oh, the REPL!

[18:45] <jnthn> pmichaud: pong

[18:45] <szabgab>  just restaretd rakudo between the use statement and the call to-json

[18:45] <pmichaud> how hard would it be to get nqp to load the trans_ops dynoplib

[18:45] <szabgab> I can forgive that it is not persitent between restarts :)

[18:45] *** arnsholt joined
[18:45] <pmichaud> for some reason Parrot thinks that the <pow> opcode ought to be a dynop.

[18:46] <jnthn> pmichaud: --vm-libs=trans_ops

[18:46] *** hercynium joined
[18:46] <jnthn> If you want it one-off

[18:46] <szabgab> so is there prefix flag for Configure.pl ?

[18:46] <pmichaud> I'm thinking more permanent

[18:46] <jnthn> oh

[18:46] <jnthn> that's easy too, one sec

[18:46] <pmichaud> more to the point, infix:<**> doesn't work in NQP now

[18:46] <pmichaud> because it depends on <pow> which has to be loaded.

[18:47] <pmichaud> (notably:  <sqrt> is considered useful enough to be core.)

[18:47] *** lumi left
[18:47] <jnthn> pmichaud: src/NQP/Actions.pm, line 58

[18:47] <jnthn> pmichaud: Add it to that array.

[18:47] *** lumi joined
[18:47] <pmichaud> line 72 in my copy...?

[18:48] <pmichaud> actually, 70 ?

[18:48] <jnthn> oh wtf

[18:48] <jnthn> the github line number column isn't aligned with the actual lines!

[18:48] <jnthn> my @loadlibs := ['nqp_group', 'nqp_ops'];

[18:48] <jnthn> That line

[18:48] <jnthn> :)

[18:49] <pmichaud> looks like line 70 to me on github, too :)

[18:49] * jnthn wonders how he's managed to get that broken locally :)

[18:50] *** Ali_h left
[18:52] *** silug left
[18:52] *** Chillance joined
[18:52] *** silug joined
[18:54] *** kjeldahl joined
[18:55] <pmichaud> It bugs me that we have a core Perl 6 contributor saying "Don't use Rakudo."

[18:56] <pmichaud> I kind of figured we were above such things.

[18:57] <masak> pmichaud: I don't believe colomon meant it in such a black-and-white manner.

[18:57] <pmichaud> masak: But I'm thinking of how others will read it.

[18:57] <colomon> what masak said.

[18:57] <pmichaud> furthermore, at the time the math code went in I said (1) it'll kill Rakudo performance and (2) it's the wrong way to do it.

[18:58] <pmichaud> It seems hardly fitting to blame Rakudo for it now.

[18:58] <masak> pmichaud: if Rakudo has any prestige to lose because Niecza is 50 times faster, it will no matter what colomon writes.

[18:58] <tadzik> sorear: I'd start from porting/running ufo

[18:58] <colomon> pmichaud: if you're talking about numeric literals, that has absolutely NOTHING to do with the performance difference I'm seeing

[18:59] <tadzik> running Pies should be quite straightforward, then you have running ufobuilder, which is a Panda implementation. The long-term goal will be porting Panda itself

[18:59] <pmichaud> not just literals, but the whole way the math classes and operators have been structured

[18:59] <colomon> About the only real world code that will ever slow down is the trig tests, and they needed it, because what you had before was too broken to use.

[19:00] <tadzik> sorry for the absence, my isp is nuts

[19:00] <szabgab> Argument "RELEASE_3_3_0" isn't numeric in addition (+) at Configure.pl line 25, <$REQ> line 1.

[19:00] <szabgab> just sayin'

[19:00] <masak> szabgab: on Windows?

[19:00] <szabgab> that's when I run perl Configure.pl ..

[19:00] <szabgab> yes

[19:00] <szabgab> 5.12.3

[19:01] * masak goes to look at that line in Configure.pl

[19:01] <jnthn> Is the Configure.pl in star the same as the one in Rakudo, ooc?

[19:01] <pmichaud> no

[19:01] * jnthn doesn't see that warning on Windows on the Rakudo one.

[19:01] <jnthn> Ah, OK

[19:01] *** Sarten-X left
[19:02] <pmichaud> http://gist.github.com/1001064  # jnthn, this program gives me a "Cannot take substr outside string" error when run in nqp

[19:02] <moritz> is it #phasers time?

[19:02] <masak> $reqsvn += 0;

[19:02] <colomon> moritz: yes

[19:02] <masak> moritz: yes.

[19:03] <masak> szabgab: that's the line.

[19:03] <szabgab> is there a rakudo logo somewher in the r* that could be used for a menu item in Windows?

[19:03] <pmichaud> I think that line can be removed.

[19:03] <masak> szabgab: feels like the wrong way to convert something to a number in the first place...

[19:03] * moritz never thought of updating star's Configure.pl to git revisions

[19:03] <masak> that might be why :P

[19:03] <jnthn> pmichaud: Oddness

[19:04] <pmichaud> jnthn: you might need the push I just made to get the trans_ops dynoplib loaded.

[19:04] <jnthn> pmichaud: Got a backtrace?

[19:04] <jnthn> pmichaud: Going to try and reproduce it now.

[19:04] <pmichaud> http://gist.github.com/1001069  # with backtrace

[19:05] *** mj41 joined
[19:05] *** thou_ left
[19:05] <jnthn> aarrrgh, that. :|

[19:06] <jnthn> masak++ also hit and filed that one.

[19:06] <jnthn> Platform specific. :|

[19:06] <jnthn> Will fix.

[19:07] <pmichaud> I've always hated that Parrot throws an exception there anyway.

[19:08] <masak> right, that one.

[19:08] <masak> yeah, one is bound to run into that bug if one plays around with big numbers for long enough...

[19:10] <pmichaud> ...what does it have to do with big numbers, ooc?

[19:10] *** Sarten-X joined
[19:10] <pmichaud> it happens even if I only do the loop once

[19:11] <masak> huh.

[19:11] <pmichaud> and it says the error is in set_mainline_module

[19:11] <masak> oh, this is nqp!

[19:12] <masak> I had already dived into RT looking for the original ticket :)

[19:12] <masak> but, no, here it is: https://github.com/perl6/nqp/issues/13

[19:12] <masak> nothing to do with big numbers.

[19:12] *** envi_laptop left
[19:13] <masak> to be perfectly fair, I didn't even discover it. someone++ at the YAPC::Russia hackathon did.

[19:14] <jnthn> masak: embarassingly, it also goes away if the filename is too long

[19:14] <jnthn> er

[19:14] <jnthn> is longer

[19:14] <masak> good luck with that one!

[19:14] <jnthn> I didn't expect an exception there :P

[19:14] <jnthn> meh

[19:14] <pmichaud> I don't understand what set_mainline_module is trying to do anyway

[19:14] *** Sarten-X left
[19:14] *** lumi left
[19:15] <masak> jnthn: btw, both times I've been building rakudo/nom, I've had to manually mkdir 'Perl6' to get the 'make' to go all the way through. is that a known defect?

[19:15] *** lumi joined
[19:15] <jnthn> masak: Somebody else mentioned that today.

[19:15] * moritz 

[19:15] <jnthn> masak: That whole area needs a twiddle to fix the OSX breakage though.

[19:16] <pmichaud> that Perl6 dir is just asking for trouble

[19:16] <masak> oh, so it's actually supposed to be there?

[19:16] <jnthn> masak: yeah

[19:16] <jnthn> masak: Well..."yeah" :)

[19:16] <masak> my guess was that those modules ended up being generated to the wrong dir.

[19:16] <jnthn> Well, they need to be where "use" will see them.

[19:16] <masak> there are ways to commit directories, even in git.

[19:16] <moritz> but on OSX it conflicts with ./perl6, so the location of these modules needs to change

[19:17] <masak> well, on any default-configured hard drive on OS X.

[19:17] <masak> first thing I do when I get an Apple laptop is to reformat the hard drive. :/

[19:18] *** wamba left
[19:18] <pmichaud> "use" needs to be smart enough to look in places other than the current dir

[19:18] <pmichaud> or, we need to change the name of the executable

[19:18] <jnthn> pmichaud: Indeed.

[19:18] <pmichaud> (we need to do the first, regardless)

[19:18] <moritz> any objections to calling the binary 'rakudo'?

[19:18] <jnthn> Patches welcome if you have tuits, otherwise I'll try and get to it in the next couple of days.

[19:19] <pmichaud> I'm working on the build system already, I'll put it on my list.

[19:19] <pmichaud> if someone else beats me to it, that's fine also.

[19:21] *** Sarten-X joined
[19:21] *** kjeldahl left
[19:23] *** Mowah_ joined
[19:24] <pmichaud> ...trying to build niecza-6, "make" gives me 'make: *** No rule to make target `FETCH_URL', needed by `.fetch-stamp'.  Stop.

[19:24] <pmichaud> what am I forgetting/missing?

[19:25] <pmichaud> nm, there's already a .exe for me

[19:27] <pmichaud> http://gist.github.com/1001108   # there's hope for Rakudo speed yet.

[19:29] <tadzik> pmichaud: isn't that mostly mono startup cost?

[19:29] <pmichaud> tadzik: maybe, but we also have Parrot startup cost

[19:29] <tadzik> sure

[19:29] <tadzik> pmichaud: how does that test scale?

[19:29] *** birdwindupbird joined
[19:30] <moritz> pmichaud: last I looked niecza had rather slow startup, but faster run time

[19:31] *** whiteknight joined
[19:31] *** whiteknight left
[19:31] <colomon> errr... why aren't the numbers the same?

[19:31] <colomon> oh, second one goes one further, is all

[19:31] <pmichaud> one has < and the other has <=

[19:32] *** Sarten-X left
[19:34] <pmichaud> Yes, niecza has a 1.39 second startup on my machine

[19:35] <pmichaud> afk, kid pickup

[19:40] *** Sarten-X joined
[19:49] *** _jaldhar left
[19:52] *** Mowah left
[19:53] *** silug left
[19:53] *** silug joined
[19:57] *** birdwindupbird left
[19:59] <masak> lol! I blogged! http://strangelyconsistent.org/blog/a-month-of-blogging-about-programming-fundamentals

[19:59] <szabgab> so I have  win32 binary with aan instalelr.exe

[19:59] <szabgab> where shall I put it?

[20:02] <pmichaud> I can put it in the star directory with the others

[20:02] <moritz> szabgab: do you have commit access to star?

[20:02] <pmichaud> and I can give commit access to star

[20:03] <szabgab> I don't think I have commit bit there

[20:03] <szabgab> let me put it on my server now

[20:04] <szabgab> and one you  takes it from there and adds to the server ?

[20:04] <szabgab> to the repo

[20:04] <szabgab> I should go to sleep ASAP :)

[20:05] *** pjcj left
[20:05] *** pjcj joined
[20:05] <szabgab> http://perlide.org/download/rakudo-star-2011.04.exe

[20:06] <szabgab> pls don't advertise this link

[20:06] <colomon> oh, now that's interesting!  on a stupid string benchmark, rakudo actually beats niecza -- even factoring out the startup times.

[20:06] <szabgab> it is about 6.5 Mb

[20:08] * moritz downloads it, and will upload to github when done

[20:08] <szabgab> thanks

[20:08] <szabgab> night&

[20:08] *** silug left
[20:09] *** silug joined
[20:09] <masak> 'night, buttercamels.

[20:09] <colomon> \o

[20:10] *** masak left
[20:10] *** lumi left
[20:11] *** lumi joined
[20:15] *** silug left
[20:18] <sorear> good * #perl6

[20:18] <sorear> lots of nice highlighted backlog

[20:19] <tadzik> oh, hello sorear

[20:20] *** shachaf_ joined
[20:21] <sorear> colomon: what do you mean by "holes in test.pl"?  And yes, no .re

[20:21] *** pjcj left
[20:21] *** pjcj joined
[20:22] <sorear> colomon: @*ARGS definitely works with the precompiler.  I might have broken it again in compile-and-run-mode

[20:22] <colomon> sorear: I believe you said (and maybe I misunderstood) that test.pl was the best place to check to see what was implemented?  I seem to keep finding stuff that works but isn't in test.pl as far as I can tell.

[20:23] <colomon> @*ARGS definitely wasn't working for me, but it was compile-and-run-mode, and you say.

[20:23] <moritz> maybe that was from before I added some spectests :-)

[20:23] <colomon> oooo, spectests

[20:23] <sorear> colomon: complex numbers are untested and probably don't work

[20:24] *** shachaf_ left
[20:24] <colomon> sorear: for sure .re and .abs don't work, but it seems like basic complex math works.

[20:24] *** pjcj left
[20:25] *** pjcj joined
[20:25] <colomon> either that or it was one hell of a coincidence I got the image of a mandelbrot set!

[20:25] <sorear> yikes, it looks like I'm starting to sow strife

[20:25] <colomon> yeah, sorry about that.

[20:26] <colomon> for what it's worth, I think you're doing an amazing job

[20:26] <pmichaud> I think sorear++ is doing an amazing job also

[20:26] <pmichaud> there's no question about that. 

[20:28] *** Sarten-X left
[20:29] <pmichaud> nor do I see it as "niecza is sowing strife."

[20:32] *** molaf_ left
[20:34] * moritz just sees it as a tongue in cheek comment that didn't arrive as such

[20:36] *** Sarten-X joined
[20:44] <sorear> colomon: what's the really bad string case?

[20:44] <sorear> rakudo: (3+4i).abs.WHAT.say

[20:44] <p6eval> rakudo 048573: OUTPUT«Num()␤»

[20:45] <sorear> rakudo: 5.re.perl.say

[20:45] <p6eval> rakudo 048573: OUTPUT«Method 're' not found for invocant of class 'Int'␤  in main program body at line 22:/tmp/h9DzxiSskU␤»

[20:48] *** Sarten-X left
[20:49] *** lumi left
[20:49] <colomon> sorear: for 1..20000 { $a ~= "b"; }

[20:50] <colomon> niecza: my @a = 1..10; say @a[*-1]

[20:50] <p6eval> niecza v6-1-gbe9e4f6: OUTPUT«10␤»

[20:50] <colomon> niecza: my @a = 1..10; say @a[*/2]

[20:50] <p6eval> niecza v6-1-gbe9e4f6: OUTPUT«6␤»

[20:50] *** lumi joined
[20:50] <sorear> not suprising that you got the same result in two imlementaions with that

[20:51] <sorear> it spends most of its time in memcpy()

[20:57] *** ymasory left
[20:58] *** Sarten-X joined
[21:00] <colomon> niecza: say 5 %% 4

[21:00] <p6eval> niecza v6-1-gbe9e4f6: OUTPUT«Bool::False␤»

[21:02] *** thou joined
[21:02] <moritz> fwiw I can't upload the win32 star installer to github

[21:02] <colomon> niecza: say [||] (4, 5, 0)

[21:02] <p6eval> niecza v6-1-gbe9e4f6: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤This macro cannot be used as a function at /tmp/pEPpJtjYIQ line 1:␤------> [32msay [||][33m⏏[31m (4, 5, 0)[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 469 (CORE die @ 2) ␤  at

[21:02] <p6eval> ../home/p6eval/niecza/src…

[21:02] <moritz> "Something went wrong that shouldn't have. Please try again or contact support if the problem persists."

[21:02] <moritz> and I'm too tired to contact the support

[21:02] <moritz> if soembody else manages to upload, that would be nice

[21:02] * moritz -> sleep

[21:04] <sorear> I had the same problem when I was trying to upload niecza-v5

[21:09] *** hercynium left
[21:09] *** wknight8111 left
[21:11] *** shachaf left
[21:12] <dalek> bench-scripts: c55c266 | (Solomon Foster)++ | prime-3.pl:

[21:12] <dalek> bench-scripts: Rework the prime benchmark so it works on niecza.

[21:12] <dalek> bench-scripts: review: https://github.com/perl6/bench-scripts/commit/c55c266e1f

[21:14] *** shachaf joined
[21:19] <tadzik> sleepytime, see you folks

[21:20] <sorear> night!

[21:24] <jnthn> Dammit, weather was hot today and now my appartment is also too hot.

[21:26] <jnthn> ahh...a cold beer :)

[21:27] <dalek> rakudo/nom: 5a3602a | jnthn++ | / (2 files):

[21:27] <dalek> rakudo/nom: Start to get the multi dispatcher core ported over the 6model.

[21:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5a3602a80a

[21:27] <dalek> rakudo/nom: abedc89 | jnthn++ | src/pmc/perl6multisub.pmc:

[21:27] <dalek> rakudo/nom: Remove old Perl 6 multisub PMC, which we'll no longer use.

[21:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/abedc89646

[21:27] <dalek> rakudo/nom: 56ee0f5 | jnthn++ | .gitignore:

[21:27] <dalek> rakudo/nom: Update .gitignore.

[21:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/56ee0f5e92

[21:32] *** mj41 left
[21:32] *** lumi left
[21:33] *** ruoso left
[21:33] *** lumi joined
[21:44] <sorear> jnthn: around now?

[21:44] <jnthn> sorear: around but trying to concentrate on multi-dispatch :)

[21:45] <sorear> jnthn: how does the ctmo bootstrap work?

[21:45] <jnthn> I'm not sure exactly what bootstrap you're talking about.

[21:45] <sorear> suppose you decide sometime in Sep to start a Javascript ctmo backend

[21:45] *** Sarten-X left
[21:45] <jnthn> ah, nqp?

[21:45] *** Patterner left
[21:46] <sorear> can ctmo cross-compile to another backend?

[21:46] <jnthn> The trick is mostly to write a PAST compiler for the target backend and implement the 6model primitives there.

[21:46] *** Psyche^ joined
[21:46] *** Psyche^ is now known as Patterner

[21:46] <jnthn> And then eventually get nqp to spit itself out on another platform.

[21:46] <sorear> jnthn: but don't you also need some kind of serialized metaobject stuff?

[21:47] <jnthn> Well, at the moment it's not really serialized per se.

[21:47] <jnthn> But yes

[21:47] <jnthn> It'll depend on that format being portable, at least during the initial bootstrap.

[21:47] <sorear> I thought ctmo was the serialization branch

[21:47] <jnthn> No

[21:47] <jnthn> Not the full-blown serialization.

[21:48] <jnthn> It's the cheating serialization :)

[21:48] <jnthn> It was mostly about doing all the meta-object setup during the compile.

[21:48] <jnthn> For now it records enough to re-do that at startup, but it has already statically resolved a bunch of symbol cross-references.

[21:49] <jnthn> It's kinda half way to what I want.

[21:50] <jnthn> The actions and grammar won't have to change beyond this, the refactor from here is pertty much all in HLL::SerializationContext and NQP::SymbolTable and those kinds of places.

[21:51] <jnthn> I coulda taken it on but...priorities.

[21:54] *** Sarten-X joined
[21:56] <sorear> jnthn: does it record while it builds, or does it generate the redo info based on the metaobjects?

[21:57] * sorear is currently trying to debug why eval() always returns Any on niecza

[21:57] <sorear> also, reddit thinks I need a better name.

[21:58] <jnthn> sorear: While it builds.

[21:58] <jnthn> sorear: Of course, the eventual serialization would just look at the metaobjects.

[22:01] <jnthn> sorear: My roadmap is something like, get nom good enough to be master, serialization, do BEGIN fully, PAST uses 6model, dig into writing an optimizer.

[22:01] <jnthn> Though it doesn't matter if I do all of those personally. :)

[22:01] <sorear> You plan to have a master without working BEGIN?

[22:01] <jnthn> (as in, I'm hoping not to :))

[22:02] <jnthn> Well, it'll be no less broken than current master has it.

[22:02] <sorear> How broken is current master?

[22:02] <jnthn> In fact, it'll be better than current master

[22:02] <jnthn> Very.

[22:02] <sorear> more broken than niecza? :)

[22:03] <jnthn> Dunno. :)

[22:03] <jnthn> niecza: BEGIN { say 42 }

[22:03] <p6eval> niecza v6-1-gbe9e4f6: OUTPUT«42␤»

[22:03] <sorear> protolexpads help.

[22:03] <jnthn> Yeah

[22:03] <jnthn> Got them in nom.

[22:03] <sorear> but it's being treated as INIT, so, that runs after the parse finishes

[22:03] <jnthn> ah, ok

[22:04] <sorear> if in a module, perhaps long after

[22:06] * jnthn glances NQP to see how he did multi subs there, and realizes it cheats more than Rakudo can get away with

[22:07] <sorear> niecza: say module Foo { 2 + 2 }

[22:07] <p6eval> niecza v6-1-gbe9e4f6: OUTPUT«Any()␤»

[22:07] <sorear> this is the crux of the Niecza eval->Any bug

[22:07] <sorear> except it's "my module CORE; ...; {YOU_ARE_HERE}"

[22:07] <jnthn> hmm

[22:08] * jnthn somewhat expects that to output Foo() (e.g. the type object for the module)

[22:09] <sorear> as would I, except modules don't have type objects yet

[22:10] <sorear> on reflection, the real issue is that evals are being installed in the setting at all

[22:10] <sorear> they should be getting installed at the call site!

[22:13] <jnthn> gah, internet fail...

[22:13] * jnthn back

[22:16] *** phenny left
[22:16] *** sbp left
[22:16] *** nsh left
[22:17] *** crux_ joined
[22:24] *** leprevost left
[22:27] <Util> Does Niecza use the Setting from Rakudo?

[22:27] <tylercurtis> Util: no.

[22:27] <Util> Why not?

[22:33] *** lumi left
[22:33] <tylercurtis> Util: partly because Rakudo's setting is somewhat wrong due to limitations in Rakudo that aren't present in Niecza.

[22:33] *** lumi joined
[22:33] <tylercurtis> I expect.

[22:34] <sorear> hah

[22:34] <jnthn> heh

[22:34] <sjohnson> any of you guys excited for the NHL games tomorrow?

[22:34] <Util> tylercurtis: thanks, that helps

[22:34] <tylercurtis> The reverse also likely applies.

[22:34] <sorear> it's really more the other way aound :p

[22:34] <jnthn> I suspect that for many low-level things, the setting is just too innevitably tied to the guts of an implementation also.

[22:35] <jnthn> Also, different implementations may have different most efficient ways of implemetning the same built-in.

[22:36] <tylercurtis> sorear: well, I was mostly thinking about Rakudo's setting being full of our-scoped things.

[22:36] <sorear> large portions of niecza's setting are, however, more or less directly cloned from Rakudo

[22:36] <sorear> one thing worth noting in niecza's setting is that it has no multis

[22:37] <sorear> partly because for a long time niecza didn't support multis, and partly because they're still disgustingly slow

[22:39] *** crux_ left
[22:40] <dalek> rakudo/nom: 9052157 | jnthn++ | src/ (3 files):

[22:40] <dalek> rakudo/nom: First untested cut of op to enter the multi-dispatcher and a very basic, non-caching multi dispatcher entry point.

[22:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9052157d6a

[22:40] <dalek> rakudo/nom: 865919b | jnthn++ | src/ops/perl6.ops:

[22:40] <dalek> rakudo/nom: Oops, copy-pasto.

[22:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/865919bcfd

[22:40] <dalek> rakudo/nom: f9a8b45 | jnthn++ | src/Perl6/ (2 files):

[22:40] <dalek> rakudo/nom: Start to get handling of multi and proto in place. Dispatch doesn't actually work just yet, though.

[22:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f9a8b45b95

[22:40] *** noganex_ joined
[22:43] *** noganex left
[22:46] <sorear> colomon: What was pmichaud referring to when he said that complex number speed was your fault?

[22:49] *** Sarten-X left
[22:50] *** silug joined
[22:58] *** Sarten-X joined
[22:59] <sorear> hrm.  I guess -n and -p should only affect MAIN's setting, not the setting of every single module :)

[23:03] *** cooper left
[23:04] *** cooper joined
[23:09] *** lumi left
[23:09] *** lumi joined
[23:12] *** Sarten-X left
[23:15] *** MayDaniel left
[23:24] <dalek> niecza: b8c3c97 | sorear++ | / (5 files):

[23:24] <dalek> niecza: Improve handling of free variables with settings, make {YOU_ARE_HERE} in a loop work

[23:24] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b8c3c972d5

[23:24] <dalek> niecza: 49b11af | sorear++ | / (5 files):

[23:24] <dalek> niecza: Add $*ARGFILES, -n and -p option handling

[23:24] <dalek> niecza: review: https://github.com/sorear/niecza/commit/49b11afb66

[23:24] <dalek> niecza: b23212e | sorear++ | src/NieczaBackendDotnet.pm6:

[23:24] <dalek> niecza: Fix @*ARGS accidentally not being passed to compile-and-run code

[23:24] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b23212ef56

[23:24] <dalek> niecza: 2bacd41 | sorear++ | lib/COR (2 files):

[23:24] <dalek> niecza: Add CORP and CORN setting files, -n & -p are now fully functional

[23:24] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2bacd41d59

[23:24] <tylercurtis> sorear++

[23:24] <tylercurtis> Does Rakudo have those options yet?

[23:25] <sorear> I think so

[23:25] <jnthn> Yeah, masak++ added -n and -p a while ago, though the Niecza factoring of it is preferable. 

[23:26] <jnthn> Well, I *guess* it is :)

[23:28] *** Chillance left
[23:29] <sorear> Why do you say you guess it is?

[23:30] <jnthn> sorear: Because I said it was preferable before I'd read the patch.

[23:30] <sorear> Ah

[23:30] <jnthn> sorear: Just read it, and it's what I expected. So, it certainly is. :)

[23:30] *** Sarten-X joined
[23:33] <dalek> nqp: 970ebe2 | jonathan++ | src/pmc/sixmodelobject.pmc:

[23:33] <dalek> nqp: Add a (hopefully quite temporary) workaround for Parrot's Parrot_pcc_invoke_from_sig_object sucks.

[23:33] <dalek> nqp: review: https://github.com/perl6/nqp/commit/970ebe2280

[23:33] *** Vlavv left
[23:37] <dalek> rakudo/nom: 518fec3 | jnthn++ | src/ (3 files):

[23:37] <dalek> rakudo/nom: Needed to mark parameters that the multi-dispatcher should consider; also make ;; work again.

[23:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/518fec316b

[23:37] <dalek> rakudo/nom: c40fc7e | jnthn++ | src/binder/multidispatch.c:

[23:37] <dalek> rakudo/nom: Fix a silly inverted condition, and we have basically functioning, if incomplete and unoptimized, multiple dispatch.

[23:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c40fc7e87c

[23:40] *** silug left
[23:45] *** Vlavv joined
[23:45] *** thou left
[23:45] *** kst` is now known as kst

[23:48] *** cdarroch left
[23:50] *** lumi left
[23:51] *** jql left
[23:51] *** stephanepayrard_ left
[23:51] *** dayangkun joined
[23:51] *** lumi joined
[23:54] *** sirmacik left
[23:54] *** Sarten-X left
[23:54] *** sirmacik joined
[23:54] *** sirmacik left
[23:54] *** sirmacik joined
[23:54] *** baest_ joined
[23:55] *** ribasushi left
[23:55] *** ribasushi joined
[23:56] *** baest left
[23:56] <dalek> niecza: 29be4bb | sorear++ | lib/ (2 files):

[23:56] <dalek> niecza: On-same-runloop eval, simplify somewhat

[23:56] <dalek> niecza: review: https://github.com/sorear/niecza/commit/29be4bb891

[23:58] *** frettled left
