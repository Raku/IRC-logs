[00:01] <diakopter> nom: my $i; for 1..1000000 { $i++ }

[00:02] <p6eval> nom af0d2e: OUTPUT«(timeout)»

[00:02] <colomon> perl6: "foobar".subst(/o/, "e", :g).say

[00:02] *** replore joined
[00:02] <p6eval> rakudo af0d2e, niecza v10-34-gb08643d: OUTPUT«feebar␤»

[00:02] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.16/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped b…

[00:04] <soh_cah_toa> isn't there a character class or rule for spaces? i thought it was <space> and \s doesn't work anymore

[00:07] *** stepnem left
[00:09] <colomon> pretty sure \s still works fine

[00:09] <colomon> and the class is <ws>, maybe?

[00:09] <soh_cah_toa> it doesn't seem to work in the replace string of a substitution

[00:10] <colomon> "replace string"

[00:10] <colomon> ?

[00:10] <benabik> You can't replace with "generic whitespace"

[00:10] <soh_cah_toa> replacement

[00:10] *** stepnem joined
[00:10] <soh_cah_toa> i can't add space to a string?

[00:10] <benabik> s/blah/\s/ ?

[00:10] <colomon> you can't add a character class to a string!

[00:10] <benabik> You can, but you have to specify _what_ whitespace to add.

[00:10] <soh_cah_toa> oh, right

[00:10] <benabik> s/blah/   /

[00:11] <soh_cah_toa> yeah, didn't think about that

[00:11] <soh_cah_toa> using \x20 is fine though which makes sense

[00:11] <colomon> nom: say "this is a test".subst(/<ws>/, 'X', :g)

[00:11] <p6eval> nom af0d2e: OUTPUT«XthisXXisXXaXXtestX␤»

[00:11] <colomon> !!!!

[00:12] <soh_cah_toa> that's odd that it placed X at the start and end of the string

[00:12] <benabik> ?

[00:12] <colomon> niecza: 

[00:12] <colomon> [8:11pm] p6eval: nom af0

[00:12] <colomon> niecza: say "this is a test".subst(/<ws>/, 'X', :g)

[00:12] <p6eval> niecza v10-34-gb08643d: OUTPUT«thisXisXaXtest␤»

[00:12] <colomon> nom bug, I think

[00:12] <benabik> nom: say "this is a test".subst(/\s/, 'X', :g)

[00:12] <p6eval> nom af0d2e: OUTPUT«thisXisXaXtest␤»

[00:12] <benabik> I wonder if it's a differing definition of <ws>

[00:13] <colomon> b: say "this is a test".subst(/<ws>/, 'X', :g)

[00:13] <p6eval> b 1b7dd1: OUTPUT«XthisXXisXXaXXtestX␤»

[00:14] <colomon> seems like, but how odd

[00:16] <benabik> ws is... <!ww> [ \s+ | <.unv> ]*

[00:16] <benabik> So it is a zero width match at the edge of words?

[00:17] <colomon> that seems.... bad

[00:17] <benabik> Maybe it's related to nom not doing LTM

[00:25] *** whiteknight left
[00:26] *** whiteknight joined
[00:28] *** lichtkind left
[00:31] *** Chillance left
[00:33] *** tokuhiro_ left
[00:40] *** daniel-s left
[00:41] *** dual left
[00:53] *** quester_ joined
[01:01] *** S11001001 joined
[01:15] *** daniel-s joined
[01:18] <S11001001> moritz: I have a little nitpick for the perl6.org front page: "Using Perl 6" is not open source.

[01:20] *** whiteknight left
[01:36] <dalek> ecosystem: be84f95 | soh_cah_toa++ | spec.pod:

[01:36] <dalek> ecosystem: Fixed several grammar errors in spec.pod.

[01:36] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/be84f9500d

[01:36] <dalek> ecosystem: e0167e0 | soh_cah_toa++ | spec.pod:

[01:36] <dalek> ecosystem: Added an example META.info file to spec.pod. Also added 'author' field to 'Optional Fields' section.

[01:36] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/e0167e0681

[01:36] <dalek> ecosystem: ff14d24 | soh_cah_toa++ | META.list:

[01:36] <dalek> ecosystem: Added Test::Builder to list. Also updated URL for Digest::SHA256 since I renamed the repo name.

[01:36] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/ff14d24665

[01:45] *** quester_ left
[01:57] *** ggoebel left
[02:02] *** ggoebel joined
[02:04] *** sivoais left
[02:04] *** sivoais joined
[02:08] *** S11001001 left
[02:28] <snarkyboojum> I guess S11001001 was referring to the non-free fonts? You can always use different fonts.

[02:39] <sorear> colomon: what nom is doing seems to be more correct than what niecza is doing.

[02:40] <sorear> colomon: what niecza is doing = subst ignores zero-length matches

[02:40] <sorear> colomon: I guess there are three choices here.  Ignore zero-length matches alltogether (niecza), use exactly one zero-length match (nom), use arbitrarily many (infinite loop)

[02:41] <sorear> colomon: I suspect I was thinking of the zero-infinity rule when I set niecza's behavior

[02:41] <sorear> benabik: it's not related at all to ltm

[02:41] <sorear> benabik: <ws> is supposed to match zero width at the edge of words

[02:42] <sorear> niecza: say ?("a+b" ~~ /a <.ws> '+' <.ws> b/)

[02:42] <p6eval> niecza v10-34-gb08643d: OUTPUT«Bool::True␤»

[02:42] <sorear> that is ws' design function

[02:42] <sorear> it is designed to DWIM "optional whitespace" in grammars

[02:43] <sorear> soh_cah_toa: if you want to match one space of any kind, use \s.  If you want to match a positive number of spaces, use \s+.

[02:43] <sorear> soh_cah_toa: <.ws> is mostly for parsing programming languages

[02:44] <soh_cah_toa> sorear: right. i was trying to use that to add a space in the replacement string of a substitution which, obviously, makes no sense ;)

[02:44] <sorear> soh_cah_toa: I'd like to know what you were thinking at the tiem.

[02:45] <soh_cah_toa> sorear: something like "foobar" ~~ s/oo/oo \s/

[02:45] <sorear> you can just use s/oo/oo /

[02:45] <sorear> you don't even need \x20

[02:46] <soh_cah_toa> sorear: well, not without :ss, right?

[02:46] <soh_cah_toa> or does :ss not default for substitutions?

[02:46] <sorear> soh_cah_toa: huh?  :ss has nothing to do with this

[02:46] *** wolfman2000 joined
[02:46] <soh_cah_toa> sorear: adding space in a regex doesn't add a literal space unless sigspace is used

[02:47] <sorear> soh_cah_toa: s/(this is a regex)/(this is a literal string)/

[02:47] <soh_cah_toa> sorear: ah, i see

[02:47] <sorear> soh_cah_toa: write s[regex] = 'literal string' if it makes you feel better

[02:47] <sorear> regexes are only used for matching, not constructing replacements

[02:47] <soh_cah_toa> oh yeah, i forgot about that new syntax

[02:48] <soh_cah_toa> sorear: has regexes always been like that? in p5 too? i can't believe i've never realized until now

[02:49] <soh_cah_toa> wow, that's a total noob mistake :\

[02:49] <sorear> soh_cah_toa: yes, the right side of s/// has never been a regex

[02:49] <sorear> in Perl 5 it's essentially a double quoted string

[02:49] <soh_cah_toa> i guess i never knew that b/c p5 tends to blur the lines between strings and regexes

[02:50] <sorear> Perl 5 even makes it more confusing because you have to write s/(\d)\1/$1/

[02:50] <sorear> on the left side, a backreference is \1, on the right it's $1

[02:52] <soh_cah_toa> yeah

[02:53] <Tene> sorear: you can use $1 in regex for backreference.

[02:54] <Tene> at least, I've done it often, and it seems to work in tests.  perlre says you should use \1 though.

[03:08] *** _jaldhar left
[03:10] *** jaldhar joined
[04:03] *** alvis left
[04:03] *** ggoebel left
[04:12] *** soh_cah_toa left
[04:12] *** envi joined
[04:38] *** kaleem joined
[04:56] *** dual joined
[05:16] *** sftp left
[05:35] *** koban joined
[06:05] *** quester_ joined
[06:07] <quester_> perl6: say "X" x 22

[06:07] <p6eval> pugs, rakudo af0d2e, niecza v10-34-gb08643d: OUTPUT«XXXXXXXXXXXXXXXXXXXXXX␤»

[06:07] <quester_> perl6: say "X" x 22.0

[06:08] <p6eval> rakudo af0d2e: OUTPUT«(timeout)»

[06:08] <p6eval> ..pugs, niecza v10-34-gb08643d: OUTPUT«XXXXXXXXXXXXXXXXXXXXXX␤»

[06:10] *** PacoLinux left
[06:12] <quester_> Rakudo bug?  FWIW, I found this while tracking down why the first example in Chapter 3 of Using Perl 6 no longer works; it hangs up at the line printf $format, .key, 'X' x ($unit * .value); apparently due to $unit being a Rat

[06:13] <snarkyboojum> quester_: looks like it - shouldn't give a 'maximum recursion depth exceeded' imho

[06:13] <sorear> odd bug

[06:14] <snarkyboojum> b: say "X" x 22.0

[06:14] <p6eval> b 1b7dd1: OUTPUT«XXXXXXXXXXXXXXXXXXXXXX␤»

[06:14] <snarkyboojum> used to work

[06:14] <snarkyboojum> nomgression :)

[06:18] <quester_> Yes, that's what it looks like.  Changing it to "X" x 22.0.Int is a workaround.

[06:34] *** SHODAN joined
[06:37] <snarkyboojum> quester_: log it!

[06:39] *** wamba joined
[06:42] <snarkyboojum> I wonder if it has anything to do wit 'multi infix:<x>($s, $n) { $s.Stringy x $n.Numeric }'

[06:42] <snarkyboojum> with*

[06:44] *** grondilu joined
[06:45] * grondilu failed compiling rakudo:  http://pastebin.com/fQ9W6e36

[06:46] <grondilu> :(

[06:49] <sorear> snarkyboojum: seems very likely

[06:49] *** koban left
[06:49] <sorear> grondilu: Try again.

[06:49] <quester_> snarkyboojum: Yes, it does.  I changed it to ... $n.Int and recompiled and "X" x 22.0 now works. Um, how would I "log it"...?

[06:50] <snarkyboojum> I think just email [email@hidden.address]
[06:50] <grondilu> sorear: after a pull?

[06:50] <sorear> grondilu: 

[06:50] <sorear> no

[06:50] <sorear> maybe try updating gcc

[06:50] <quester_> snarkyboojum:  Ah, so. Thank you.

[06:50] <grondilu> oh

[06:50] *** molaf joined
[06:51] <sorear> the error you have indicates a gcc bug, hardware failure, (or possibly OS problem)

[06:51] <sorear> compiler crashes are never the fault of your code

[06:52] <grondilu> my gcc is 4:4.6.1-2 and the most recent available in my Debian repo is 4:4.6.1-3.  I doubt that's worth updating, is it?

[06:52] <sorear> check the changelog

[06:53] <grondilu> ok, I'll do that

[06:54] <sorear> also you should try the build again

[06:55] <sorear> if it fails twice in the same place, it's not a hardware problem

[06:56] <snarkyboojum> can I ask a dumb question - what are all these Str:D types in core rakudo and EnumMap:D: etc?

[06:56] <sorear> defined

[06:56] <snarkyboojum> in method signatures etc

[06:56] <snarkyboojum> oic

[06:56] <sorear> it's kind of like Str $x where *.defined

[06:56] <mberends> grondilu: have you tried 'make install' instead of 'make install-dev' ?

[06:57] <snarkyboojum> dang - when did that happen - does it check for definedness or something?

[06:57] <snarkyboojum> nice

[06:57] <sorear> but much faster and semantically lower level

[06:57] <snarkyboojum> v. cool

[06:57] <grondilu> mberends: no

[06:58] * sorear waits for grondilu's result on "just try it again, same way"

[06:58] <grondilu> the compiling actually fails before the make, at the configure.  I have no idea why it does compile suffs at this stage, btw.

[06:59] <sorear> grondilu: configuring Rakudo will download and compile Parrot automatically

[07:07] <grondilu> ~ /j perl

[07:07] <grondilu> oops

[07:08] <mberends> grondilu: to eliminate some possible problems, try cloning Rakudo again into separate directory and try perl Configure.pl --gen-parrot there.

[07:09] *** Trashlord joined
[07:10] <grondilu> instead, isn't there a "make clean" command or something?

[07:10] * grondilu is quite low on disk and doesn't want to waste space

[07:11] <TiMBuS> git clean

[07:11] <TiMBuS> (dont do this)

[07:12] <TiMBuS> actually, since you seem to be doing that from scratch

[07:13] <TiMBuS> git clean is probably a good idea

[07:13] <snarkyboojum> grondilu: you can always do a rm -rf parrot/; make clean; perl Configure.pl --gen-parrot; make install or similar

[07:14] <TiMBuS> you can do thae above, or do git clean -fdx which resets the entire tree to a clena git clone

[07:14] <grondilu> snarkyboojum: there is no makefile in my directory :-/

[07:14] <TiMBuS> hence

[07:15] * grondilu will just do a git clean

[07:15] <mberends> grondilu: git clean -dfx

[07:15] * grondilu will just do a git clean -dfx

[07:16] <grondilu> well, that was fast.  It just removed  nqp/ and parrot/

[07:16] <snarkyboojum> there won't be a Makefile till you've run Configure.pl

[07:17] <mberends> grondilu: there is a chance that some of your memory may be intermittently unreliable, thus causing corruptions to you C compiler. Those faults can appear randomly, depending on what else was already occupying RAM.

[07:17] <snarkyboojum> could also be solar flares :)

[07:18] <grondilu> mberends: I tried to compile twice, as suggested above.  Failed twice.

[07:19] <TiMBuS> the angry arm of the sun reaches out and touches your ram.

[07:19] *** hanekomu joined
[07:19] <TiMBuS> well if a git clean fails, something is pretty wrong

[07:19] <sorear> I thought that solar flares didn't result in particles of sufficiently high energy to penetrate magnetosphere, atmosphere, and roof

[07:20] * mberends considers getting a tinfoil hat

[07:20] <sorear> (they can cause serious damage to satellites and power lines though)

[07:21] <sorear> my head is already shielded by >1cm of bone, I don't think tinfoil would help at all

[07:21] <TiMBuS> the sun is hot and angry and could just murder you if it wants to[1].  1: that scene in fantasia where the sun melts jack frost.

[07:22] <snarkyboojum> I wear a Magneto style helmet at all times

[07:22] <TiMBuS> further evidence: that angry sun in super mario that keeps swooping at you

[07:25] *** espadrine left
[07:25] <quester_> Submitted RT [perl #100552] "Recursion depth exceeded in x operator".  Good night (or $localtime of your choice) everyone.

[07:26] *** quester_ left
[07:29] <mberends> grondilu: if flaky RAM may be your problem, a temporary workaround might be to re-start the computer and change the programs you have resident before you run perl Configure.pl.  That way the C compiler will use different hardware memory addresses. Have other programs ever experienced random faults on your computer? Another approach is to install another OS on a LiveUSB: Debian and Ubuntu are good at that.

[07:30] *** alvis joined
[07:31] <grondilu> Other random faults on my computer?  No.

[07:31] * mberends has used an 8GB MicroSD card as system drive for the past month.

[07:31] <snarkyboojum> mberends: was that dog slow?

[07:32] <mberends> snarkyboojum: the speed is well matched to the user ;)

[07:32] <snarkyboojum> mberends: :P

[07:33] <mberends> snarkyboojum: RAM caches so much, that there are only a few delays

[07:34] *** grondilu left
[07:34] <snarkyboojum> aww - hope he got it working

[07:35] * mberends will visit a cable provider today to consider an 80Mbit internet connection for €20/month

[07:38] <cotto> mberends, see if you can get me one of those too.  If I could get that price, figuring out where to get Euros wouldn't be a big deal.

[07:40] <mberends> cotto: I'll ask. NY is a bit beyond southern .NL, though ;)

[07:43] *** pjcj_ left
[07:45] <cotto> mberends, so there's probably no hope for Redmond, WA

[07:46] *** DarthGandalf left
[07:47] <mberends> cotto: move over here, on this street there are several houses for sale ;)

[07:48] *** koban joined
[07:49] *** pjcj joined
[07:49] <mberends> The big cable push is to get subscribers for the premium HD sports TV channels, which do not interest me. The flagship contract is €60/month, no thanks.

[07:52] *** im2ee joined
[07:53] <im2ee> Hiho! :)

[07:59] *** flussence left
[07:59] *** flussence joined
[08:03] <jnthn> morning, #perl6

[08:06] <moritz> good morning

[08:14] <TiMBuS> multi infix:<x>($s, $n)        { $s.Stringy x $n.Numeric } -> multi infix:<x>(Str:D $s, Int:D $repetition) oh, lol

[08:15] <moritz> oh

[08:16] <TiMBuS> that should uh. probably be $n.Int? unless these days "string" x 1.5 returns "stringstr"

[08:16] <moritz> TiMBuS: you're correct. I'm testing the fix.

[08:17] *** mj41 joined
[08:17] <moritz> nom: say 'string' x 1.5

[08:17] <moritz> will recursive infinitely, I think

[08:17] <p6eval> nom af0d2e: OUTPUT«(timeout)»

[08:17] <TiMBuS> b: say 'string' x 1.5

[08:17] <p6eval> b 1b7dd1: OUTPUT«string␤»

[08:17] <TiMBuS> oh come on

[08:18] <TiMBuS> in this modern day and age i gotta manually halve my strings

[08:20] <moritz> .oO( 'long string' x pi )

[08:21] <jlaire> .oO( '-' x 1i eq '|' )

[08:24] <TiMBuS> http://web.archiveorange.com/archive/v/5H3d1YCbNGuMTs2ydpWS see now heres a valid reason to combine strings and math. if only perl6 had the foresight for this usage.

[08:25] <moritz> nom: say 0.6.round(0.5)

[08:25] <p6eval> nom af0d2e: OUTPUT«(timeout)»

[08:25] <TiMBuS> laughed

[08:26] <TiMBuS> best solution: stars = float(str(round(float(star_sum)/num_raters,1)).split(’.')[0]) + {’0′:0, ‘1′:0, ‘2′:0, ‘3′:0.5, ‘4′:0.5, ‘5′:0.5, ‘6′:0.5, ‘7′:0.5, ‘8′:1.0,’9′:1.0}[str(round(float(star_sum)/num_raters,1)).split(’.')[1]]

[08:27] *** pmichaud left
[08:27] *** bbkr left
[08:28] *** bbkr joined
[08:28] *** pmichaud joined
[08:30] *** mj41 left
[08:31] <moritz> jnthn++ # iterator performance improvements

[08:31] * mux wonders how perl6 iterators look like

[08:31] <mux> moritz: any link to point me at?

[08:32] <mux> http://en.wikibooks.org/wiki/Perl_6_Programming/Lazy_Lists_and_Feeds#Iterators ?

[08:32] <TiMBuS> i tried to find the perl6 iterator, but every time i peeked, it moved a step away.

[08:32] * sorear sleep

[08:32] <mux> sorear: g'night

[08:36] *** mj41 joined
[08:41] *** sayu joined
[08:41] *** hanekomu left
[08:42] <snarkyboojum> should you be able to call MAIN() manually? It seems that it should be treated semi-specially by the compiler at runtime - Rakudo let's you run it manually.

[08:43] <snarkyboojum> I guess it's just a sub

[08:43] <snarkyboojum> in my case

[08:43] <dalek> roast: 7f5a2ae | moritz++ | integration/advent2009-day04.t:

[08:43] <dalek> roast: eval-safeguard another failing dispatch

[08:43] <dalek> roast: review: https://github.com/perl6/roast/commit/7f5a2aef50

[08:44] <moritz> snarkyboojum: yes, it's a sub

[08:44] *** daxim joined
[08:44] *** dakkar joined
[08:45] <bbkr_> rakudo: nextsame # MAIN sub :)

[08:45] <p6eval> rakudo af0d2e: OUTPUT«No dispatcher in scope␤  in block <anon> at /tmp/A3VthrUdgS:1␤  in <anon> at /tmp/A3VthrUdgS:1␤␤»

[08:45] <bbkr_> hm, fixed? last time it segfaulted :)

[08:45] <moritz> yep, surprisingly sane

[08:46] <moritz> hey, that would be a good name or tagline for a blog

[08:46] <moritz> surprisinglysane.perl6.org :-)

[08:48] *** Bzek joined
[08:48] *** im2ee left
[08:50] <snarkyboojum> surprisinglyinsane.perl6.org

[08:51] *** mj41 left
[08:54] *** sayu left
[09:00] *** sirmacik left
[09:04] <Woodi> rakudo: class A { has %!h = { 'a' => 1, 'b' => 2  }; my @a = %!h.keys }

[09:04] <p6eval> rakudo af0d2e: OUTPUT«Can only use repr_get_attr_obj on a SixModelObject␤  in <anon> at /tmp/Pa9g1uHMSo:1␤  in block <anon> at /tmp/Pa9g1uHMSo:1␤  in <anon> at /tmp/Pa9g1uHMSo:1␤␤»

[09:04] <Woodi> rakudo: class A { my %h = { 'a' => 1, 'b' => 2}; my @a = %h.keys }

[09:04] <p6eval> rakudo af0d2e:  ( no output )

[09:05] <Woodi> 'my' version works... should be ? class is just package ?

[09:09] <jnthn> hm, should probably catching using %!h outside of a place with self at compile time...

[09:10] <jnthn> And yes, sure the my version works. Aside from when it's a hash constructor, { ... } always implies a lexical scope.

[09:11] *** jlaire left
[09:11] <Woodi> [%@]!h with initialization and usage outside methods do not work, posted rt.

[09:11] <Woodi> $ work

[09:13] <jnthn> Well, initialization is fine, but you're not really assigning.

[09:13] <jnthn> Usage in the class body should always be detected and complained about though.

[09:14] <Woodi> i have use case where i need code in class body: method generation from hash keys

[09:14] <Woodi> that was 'clousere' in perl5

[09:15] *** jlaire joined
[09:16] *** masak joined
[09:16] <masak> good greetings, channel of #perl6.

[09:16] <phenny> masak: 02 Oct 22:33Z <sorear> tell masak I have a new crazy dream: p5 in p6 using the macro infrastructure, probably with a few ad-hoc extensions.

[09:16] * masak is intrigued

[09:17] <masak> ...but it might also be a case of overestimating macros ;)

[09:17] <jnthn> Woodi: Yes but you can't use attributes there as they exist per instance and in the class body you don't have one.

[09:18] <jnthn> Woodi: What's wrong with "my"?

[09:18] <masak> sorear: by the way, 3q for telling us what Asian sound-based abbreviations peeve you out :P

[09:19] <masak> 三Q

[09:19] <masak> I also like the name "Surprisingly sane" for a blog post. ;)

[09:20] <Woodi> jnthn: 'my' in class body do not look object-like :)

[09:22] <Woodi> probably i should use package varible

[09:22] <Woodi> but it mess with class names...

[09:22] <jnthn> Woodi: What are you trying to do, write Java in Perl 6? :)

[09:23] <jnthn> The point is whether something solves the problem at hand, not if it looks "object-like" 

[09:23] <jnthn> Unless you want the thing to be visible to the outside world, using "our" is scoping it too widely.

[09:24] <Woodi> rakudo: package A { class A {} }

[09:24] <p6eval> rakudo af0d2e:  ( no output )

[09:24] <Woodi> it works ok. i got problems before with 'package Name;'...

[09:27] <masak> what kind of problems?

[09:27] *** PacoLinux joined
[09:27] <Woodi> rakudo: package A { my %h = { 'a' => 1, 'b' => 2 }; class A {for %h.keys -> $n {say $n} } }

[09:27] <p6eval> rakudo af0d2e: OUTPUT«a␤b␤»

[09:27] <jnthn> nom: package A;

[09:27] <p6eval> nom af0d2e: OUTPUT«===SORRY!===␤This appears to be Perl 5 code. If you intended it to be Perl 6 code, please use a Perl 6 style package block like "package Foo { ... }", or "module Foo; ...". at line 1, near ""␤»

[09:27] <Woodi> this looks OK 

[09:27] *** orafu left
[09:28] <jnthn> masak: Those problems maybe ;)

[09:28] *** orafu joined
[09:28] <Woodi> b: package A { my %h = { 'a' => 1, 'b' => 2 }; class A {for %h.keys -> $n {say $n} } }

[09:28] <p6eval> b 1b7dd1: OUTPUT«===SORRY!===␤Illegal redeclaration of symbol 'A'␤»

[09:28] <jnthn> Oh. :)

[09:28] <Woodi> probably i write module for b...

[09:28] <jnthn> Yeah, b didn't really do nested packages.

[09:28] <jnthn> Or at least, not so well.

[09:29] <Woodi> yes. i think today i will stick to 'my' version. later will port to nom :)

[09:32] <Woodi> masak: problem was that i used S11 not S10... looks in Perl6 package can contain few modules, so lvl up from v5 :)

[09:33] *** am0c^ left
[09:34] <masak> Woodi: I don't quite follow you there.

[09:36] <Woodi> masak: looks class eq package in perl6. i think in perl5 package is near the same as module

[09:36] <Woodi> no, class eq module in v6

[09:37] <masak> more like class ⊂ module

[09:37] <Woodi> hmm

[09:37] <jnthn> Classes can do what modules can, and then add some stuff.

[09:38] *** sirmacik joined
[09:38] <moritz> nom: say ClassHOW ~~ ModuleHOW

[09:38] <p6eval> nom af0d2e: OUTPUT«Could not find sub &ModuleHOW␤  in block <anon> at /tmp/x_afRHT5L_:1␤  in <anon> at /tmp/x_afRHT5L_:1␤␤»

[09:38] <Woodi> ok, but from package developer (syntactically) module and class is the same

[09:38] <moritz> nom: module A { }; say A.HOW

[09:38] <p6eval> nom af0d2e: OUTPUT«Method 'gist' not found for invocant of class 'Perl6::Metamodel::ModuleHOW'␤  in sub say at src/gen/CORE.setting:4953␤  in block <anon> at /tmp/2IZ8wpM4sT:1␤  in <anon> at /tmp/2IZ8wpM4sT:1␤␤»

[09:39] *** pernatiy left
[09:39] <Woodi> package developer ppint of view*

[09:39] <Woodi> whatever :)

[09:39] <moritz> nom: say Perl6::Metamodel::ClassHOW ~~ Perl6::Metamodel::ModuleHOW

[09:39] <p6eval> nom af0d2e: OUTPUT«Could not find symbol 'Perl6::Metamodel::&ClassHOW'␤  in sub die at src/gen/CORE.setting:416␤  in block <anon> at /tmp/o9fTvqAXtB:1␤  in <anon> at /tmp/o9fTvqAXtB:1␤␤»

[09:39] *** replore left
[09:39] <jnthn> moritz: Those are all in Metamodel::

[09:39] * Woodi goes to vim

[09:39] <jnthn> moritz: However, that isn't true.

[09:40] <jnthn> moritz: Because it's factored as roles, not inheritance.

[09:40] *** pernatiy joined
[09:40] <jnthn> class composes all the same roles that module does, and then some more :)

[09:40] <masak> roles++

[09:40] <masak> Woodi: I'm not sure what statement you were trying to approximate, but I suspect such an assertion might hinder more than it helps.

[09:40] <jnthn> Also, I guess I'm going to have to make meta-objects pretend they're Mu, aren't I... :S

[09:40] <masak> Woodi: a class is not just another module, it's a very special type of module.

[09:41] <masak> jnthn: preferably.

[09:41] <masak> unless there's a compelling reason not to.

[09:41] <jnthn> masak: Level purity :P

[09:41] <jnthn> masak: Thing is, we can't really make it true all levels down

[09:42] <tadzik> good morning #perl6

[09:42] <jnthn> masak: Which means even if I fix it for .HOW, then .HOW.HOW will still exhibit the same kind of issue.

[09:42] <tadzik> nom: #= HAI CAN HAS STDIO? ␤ class C { }; say C.WHY

[09:42] <p6eval> nom af0d2e: OUTPUT«Block::Declarator<-105050119877563243>␤»

[09:42] <tadzik> nom: #= HAI CAN HAS STDIO? ␤ class C { }; say C.WHY.content

[09:42] <p6eval> nom af0d2e: OUTPUT«HAI CAN HAS STDIO? ␤»

[09:42] <tadzik> there we are

[09:42] <tadzik> it should stringify to the content, I agree on that

[09:43] <jnthn> tadzik: Yeah, preferably.

[09:43] <masak> good moritz tadzik

[09:43] *** jerome_ left
[09:43] <tadzik> good morning Carl

[09:44] *** jerome_ joined
[09:44] <masak> tadzik: did you put an umlaut on my last name somewhere?

[09:44] <tadzik> masak: yep

[09:44] <masak> why? :)

[09:44] <tadzik> masak: in the list of authors on the Perl 6 book ebook

[09:44] <tadzik> because it belongs there

[09:44] * masak looks

[09:44] <tadzik> it was on the cover

[09:45] <moritz> jnthn: fwiw I eval()ed the compile time dispatch failures for rakudo/optimizer

[09:45] <tadzik> masak: https://github.com/perl6/book/downloads/

[09:45] <tadzik> heh, seems that Calibre stripped it down anyway

[09:45] <tadzik> maybe it's better inside, if that even went inside the .mobi and not inside this silly metadata.opf

[09:46] <masak> I was just wondering because in the 2011.07 version, the umlaut is on the wrong 'a'. :/

[09:46] <masak> so someone meant to be considerate, and it backfired.

[09:47] <jnthn> moritz: Great...how do the tests look now?

[09:47] <moritz> jnthn: two error reporting tests fail

[09:47] <jnthn> moritz: All win apart from undef.t?

[09:47] <jnthn> Ah

[09:47] <jnthn> Legitimately?

[09:47] <tadzik> masak: umlaut on the wrong a would result in 'masaak', right?

[09:48] <moritz> well, one of them (for single dispatch) wants the parameter name in the error message

[09:48] <jnthn> :S

[09:49] <moritz> doesn't sound too wrong

[09:49] <jnthn> Guess we can do it.

[09:50] <jnthn> Not sure how's best yet.

[09:50] <moritz> but IMHO it wouldn't hurt to relax those tests for compile time checking

[09:53] <masak> tadzik: well, the umlaut on 'a' in Swedish makes it a completely different vowel, which to your Polish ears would make my name sound like 'mesak'.

[09:53] <moritz> another wants the nominal type of the parameter to appear

[09:53] <tadzik> oh

[09:53] <masak> and yes, putting the umlaut on the wrong vowel would make it come out like 'masek'. :/

[09:53] <moritz> and aa would be more like a long 'o'

[09:56] *** envi left
[09:59] <masak> yeah. except I see that spelling more in Norway and Denmark.

[09:59] <masak> we have it as 'å'.

[10:10] <moritz> I know aa the ASCII transliteration of å

[10:11] <moritz> funny thing is, å and thus aa sorts after z in Norwegian

[10:17] <jnthn> Same in Swedish, iirc

[10:17] <jnthn> Or at least in the dictionary I think they come at the end.

[10:22] <mberends> whether å sorts after z is a collation matter; there are hundreds of collations, some accent sensitive and others accent insensitive.

[10:23] <mberends> rakudo: say 'å' > 'z';

[10:23] <p6eval> rakudo af0d2e: OUTPUT«Bool::False␤»

[10:23] <moritz> well, most languages have a kinda stanard collation

[10:23] <moritz> and the nn and nb colation says å comes last

[10:25] <moritz> nom: my $a = [1, 2, 3]; .say for @$a

[10:25] <p6eval> nom af0d2e: OUTPUT«1␤2␤3␤»

[10:25] <moritz> jnthn++

[10:26] <dalek> roast: 8a543d3 | moritz++ | S (4 files):

[10:26] <dalek> roast: rakudo unfudging

[10:26] <dalek> roast: review: https://github.com/perl6/roast/commit/8a543d356a

[10:32] <moritz> rakudo: subset Pod6::Text of Str; say 'markdown' ~~ Pod6::Text

[10:32] <p6eval> rakudo af0d2e: OUTPUT«Bool::True␤»

[10:34] <dalek> roast: 1f36ea3 | moritz++ | S12-subset/subtypes.t:

[10:34] <dalek> roast: test that subet with :: in the name works (RT #89708)

[10:34] <dalek> roast: review: https://github.com/perl6/roast/commit/1f36ea3189

[10:35] <dalek> rakudo/nom: eb8d302 | moritz++ | src/core/Stringy.pm:

[10:35] <dalek> rakudo/nom: string repetition should coerce to Int, not just Numeric. TiMBuS++

[10:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eb8d302649

[10:37] <moritz> rakudo: my @odd = 1,3,5 ... 8; say @odd[^4]

[10:37] <p6eval> rakudo af0d2e: OUTPUT«(timeout)»

[10:38] <tadzik> rakudo: my @odd = 1,3,5 ... *; say @odd[^4]

[10:38] <p6eval> rakudo af0d2e: OUTPUT«1 3 5 7␤»

[10:38] <tadzik> odd

[10:38] <moritz> since it has a non-* limit, the sequence generator think it's a finite sequence

[10:38] <tadzik> aye

[10:38] <moritz> and the array assignment tries to reify it all

[10:38] <moritz> BOOM

[10:39] <moritz> rakudo: my $s = sub foo { return sub is rw { 1; } }; $s.().WHAT.say

[10:39] <p6eval> rakudo af0d2e: OUTPUT«===SORRY!===␤Malformed block at line 1, near "rw { 1; } "␤»

[10:39] <moritz> std: my $s = sub foo { return sub is rw { 1; } }; $s.().WHAT.say

[10:39] <p6eval> std 8b331d2: OUTPUT«[31m===[0mSORRY![31m===[0m␤Malformed block at /tmp/PifY0rlWaT line 1:␤------> [32mmy $s = sub foo { return sub is [33m⏏[31mrw { 1; } }; $s.().WHAT.say[0m␤    expecting any of:␤    routine_def␤    trait␤Parse failed␤FAILED 00:01 122m␤»

[10:44] <dalek> roast: b518730 | moritz++ | S12-class/augment-supersede.t:

[10:44] <dalek> roast: test for RT #76600, augmenting a class should not re-apply roles

[10:44] <dalek> roast: review: https://github.com/perl6/roast/commit/b518730497

[10:47] <dalek> roast: 439f6e0 | moritz++ | S12-subset/subtypes.t:

[10:47] <dalek> roast: test for RT #76834

[10:47] <dalek> roast: review: https://github.com/perl6/roast/commit/439f6e03cf

[10:54] <jnthn> moritz: btw, I'm curious if the iterator improvements help mandelbrot. If you have a chance to try, would be interested to see if it makes a difference.

[10:54] <jnthn> moritz: Note I didn't merge that change into optimizer yet.

[10:59] <moritz> jnthn: 44.4s on nom

[10:59] <moritz> as opposed to about 49s before

[11:03] <tadzik> I get plenty of spectest failures

[11:03] <tadzik> https://gist.github.com/1258894

[11:06] <jnthn> nom: say (16 * 60 + 14) / 44.4

[11:06] <p6eval> nom eb8d30: OUTPUT«21.9369369369369␤»

[11:09] <moritz> tadzik: looks like your copy of roast is stuck

[11:09] <tadzik> I'll give it a look

[11:09] <tadzik> oh, indeed, thanks

[11:09] <tadzik> 23 commits behind

[11:09] *** itz__ left
[11:10] <jnthn> .oO( mmm...slow roast... )

[11:11] *** itz joined
[11:12] * masak .oO( it's rusted in place )

[11:13] <masak> in Swedish, the verbs for "roast" and "rust" are homonyms.

[11:14] <tadzik> are there any other evil ways for setting an attribute than nqp::bindattr?

[11:16] <flussence> weird, I had the same stuck roast problem today.

[11:16] <tadzik> that's what you get when you're adding tests and suddenly you fall asleep :)

[11:17] *** SHODAN left
[11:17] <masak> tadzik: maybe have a separate roast checkout where you add tests?

[11:18] <moritz> tadzik: rw accessors, methods :-)

[11:18] <tadzik> masak: I used to, but figured that I don't need two separate repos. Also, it's nice to just 'make spectest' and run the tests before you push them

[11:19] <flussence> oh, my bad, it was because I was messing around with my rebuild script to not run `make spectest`. The makefile usually handles the pull itself there.

[11:19] <tadzik> moritz: keyword 'evil' :) I'm trying to eliminate methods as 'set_docs', 'set_docee' before someone tries to use them

[11:19] *** SHODAN joined
[11:21] <moritz> tadzik: make them private?

[11:21] <tadzik> moritz: how am I going to call them then? :)

[11:22] <masak> sotto voce :P

[11:22] <tadzik> see traits.pm:82

[11:25] <dalek> rakudo/nom: 356fe7a | tadzik++ | / (2 files):

[11:25] <dalek> rakudo/nom: Stringify Pod::Block::Declarator to its content

[11:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/356fe7a2b6

[11:25] *** jerome_ left
[11:32] *** SHODAN left
[11:34] *** SHODAN joined
[11:40] *** Patterner left
[11:40] *** replore_ joined
[11:42] *** Psyche^ joined
[11:42] *** Psyche^ is now known as Patterner

[11:56] *** mishin joined
[11:56] *** mishin left
[11:56] *** mberends left
[11:56] *** snarkyboojum left
[11:57] *** snarkyboojum joined
[11:57] *** snarkyboojum left
[11:57] *** snarkyboojum joined
[11:57] *** pernatiy left
[11:59] *** mberends joined
[12:00] *** jerome_ joined
[12:02] *** woosley joined
[12:02] *** koban left
[12:19] *** ggoebel joined
[12:22] * masak suddenly realizes that it's the author of HPMoR who wrote http://yudkowsky.net/rational/the-simple-truth

[12:25] *** bluescreen10 joined
[12:25] *** tokuhiro_ joined
[12:27] *** colomon left
[12:38] *** donri left
[12:38] *** leprevost joined
[12:40] <moritz> I never can remember when I should use "but" and when I should use "does" when mixing in stuff into an object

[12:40] <moritz> is there any mnemonic or so?

[12:43] <masak> "but" works like "does", BUT it clones the object first :)

[12:44] <moritz> :-)

[12:44] <moritz> I'll try that

[12:47] <masak> also, I find it makes absolutely no sense to claim that '42 does Something', whereas '42 but Something' feels perfectly fine.

[12:48] <moritz> only if you read it as a declaration

[12:48] <masak> no, I read it as an imperative statement.

[12:49] <masak> or simply as an operator.

[12:50] <[Coke]> rakudo: say 314+433+5

[12:51] <p6eval> rakudo 356fe7: OUTPUT«752␤»

[12:51] <[Coke]> rakudo: say 314+433+5, " tickets"

[12:51] <p6eval> rakudo 356fe7: OUTPUT«752 tickets␤»

[12:51] <moritz> [Coke]: btw my search shows the number of tickets in the title

[12:51] <moritz> on the RT homepage, simply click on the 'perl6' queue link

[12:52] <moritz> says Found 752 tickets

[12:52] <[Coke]> moritz: yes, but I start on the home page, as I have access to 4 different queues.

[12:53] <[Coke]> wow, the qpsmtpd queue is smaller, but even less well tended.

[12:53] <[Coke]> moritz: I also have a more tractable list of 265 tickets that I look for things to close in. Which reminds me...

[12:54] <[Coke]> aloha, seen robrt?

[12:54] <aloha> [Coke]: Sorry, I haven't seen robrt.

[12:54] *** GlitchMr joined
[12:55] <[Coke]> rt question: I'm trying to search by "things that haven't been updated since may 1st". I've added 

[12:55] *** grondilu joined
[12:55] <[Coke]> AND Updated < '2011-05-01'

[12:55] * grondilu has finally managed to compile rakudo :)

[12:55] <[Coke]> to the search criteria, but am still getting things that were updated yesterday. any pointers?

[12:56] <[Coke]> grondilu: \o/

[12:56] <grondilu> :)

[12:57] <masak> grondilu: welcome to the circle of erudite rakudites! :)

[12:58] <grondilu> thanks.  Now all I have to do is to read and read again the specs.  Hopefully I'll get to master Perl6 before I die.

[12:58] <[Coke]> aloha, seen obra?

[12:58] <aloha> [Coke]: obra was last seen in #perl6 54 days 9 hours ago leaving the channel.

[12:58] *** pernatiy joined
[13:00] *** colomon joined
[13:03] * [Coke] opens a ticket with [email@hidden.address]
[13:03] * [Coke] also cannot search for "not like testsneeded" - it gets confused if a ticket has more than one tag.

[13:07] <masak> grondilu: a tip from someone who has read and re-read the spec: it helps to try things out by writing code. either while you're reading the spec, or shortly thereafter. just write something you enjoy writing.

[13:09] *** DarthGandalf joined
[13:17] *** xPixelDesignx joined
[13:18] *** woosley left
[13:21] *** envi_ joined
[13:23] <grondilu> hum...  'make test' exited with 'make: *** [CORE.setting.pbc] Erreur 137'

[13:23] <grondilu> I guess it's not critical as it is only a test, right?

[13:23] <masak> uhm.

[13:24] <masak> could you nopaste that whole make output, please?

[13:25] <grondilu> masak: 'nopaste'?

[13:26] <masak> http://gist.github.com/ for example.

[13:26] <masak> somewhere you can dump a bit of text and link to it.

[13:27] <masak> it's called 'nopaste' because it's used instead of pasting large amounts of text to the channel. :)

[13:27] <grondilu> http://pastebin.com/6R4Q5mp6

[13:28] <grondilu> I thought you meant 'could you not paste...'

[13:28] *** jaldhar left
[13:28] *** jaldhar joined
[13:29] *** kaleem left
[13:31] *** PacoLinux left
[13:32] *** grondilu left
[13:32] *** _jaldhar joined
[13:33] *** jaldhar left
[13:35] *** _jaldhar left
[13:35] *** _jaldhar joined
[13:39] *** wamba left
[13:41] *** _jaldhar left
[13:42] <masak> hm, I don't see the error message in that paste :/

[13:42] *** SHODAN left
[13:45] *** _jaldhar joined
[13:46] *** sftp joined
[13:48] *** PacoLinux joined
[13:50] *** _jaldhar left
[13:52] *** risou_awy is now known as risou

[13:53] *** PacoLinux_ joined
[13:58] *** _jaldhar joined
[14:01] *** xPixelDesignx left
[14:02] <daxim> nopaste is a dumb word.  when I'm emperor of the world, I'm going to abolish it in favour of "paste service"

[14:05] *** wolfman2000 left
[14:06] <masak> done!

[14:06] <masak> here at #perl6, your emperor-of-the-world wishes come true early! :)

[14:07] <masak> the correct term is now "paste service".

[14:07] <jnthn> Please can you paste service me a rationale for this? :P

[14:08] <masak> jnthn: don't look at me, I'm just following the emperor's orders...

[14:08] <sjn> daxim: what kind of pastes will you be serving then? :)

[14:10] *** MayDaniel joined
[14:10] *** MayDaniel left
[14:10] *** MayDaniel joined
[14:10] <masak> of course, the word carries fond memories for me from my early Pugs debugging days... http://irclog.perlgeek.de/perl6/2005-03-18#i_-760321

[14:11] <moritz> wohoo, a line with a negative ID

[14:11] <masak> yeah. it's that old.

[14:12] <masak> consider this bug that I found back in 2005 a very early premonition of Rakudo's lexpad-related bugs.

[14:12] <moritz> ... and the pastebot domain is now for sale :(

[14:12] <masak> <autrijus> so obviously the pad is broken

[14:12] <masak> <masak> ah, obviously :)

[14:13] <masak> haha, that 2005 masak is sooo out of his depth!

[14:13] <moritz> masak: you seem to have a fondness for bugs that involve broken pads :-)

[14:13] *** huf left
[14:13] <masak> *they* have a fondness for *me*!

[14:13] <jnthn> Was that "obviously" as in, what "clearly" normally means in math proofs? ;)

[14:14] <masak> jnthn: it was "obviously" as in "wow, I'm talking with autrijus!"

[14:14] <jnthn> :)

[14:15] <masak> it feels odd to read that and realize how much has happened since then in Perl 6 land.

[14:18] *** huf joined
[14:18] <colomon> anyone know how to open a file for writing in Niecza?  open($filename, :w) doesn't seem to do it.

[14:19] <masak> hm, never had that use case.

[14:21] <masak> colomon: seems it doesn't know about the :w option: https://github.com/sorear/niecza/blob/master/lib/CORE.setting#L2062

[14:22] <colomon> masak: kind of looks like it doesn't know about writing at all?

[14:22] <colomon> hurumph

[14:22] *** im2ee joined
[14:23] <masak> mberends: very interesting to read your tetris code! mberends++

[14:24] <masak> im2ee: dobradzien! :P

[14:24] * masak overgeneralizes language

[14:26] * ingy hugs the 2005 masak 

[14:28] *** huf left
[14:29] *** huf joined
[14:29] * masak , 6 years later, feels a seemingly acausal warmth weave through him

[14:30] *** MayDaniel left
[14:31] * colomon tries to hack in open :w mode....

[14:32] *** alester joined
[14:32] <colomon> huh.  got it to open the file, but it doesn't write to it...

[14:34] <colomon> sorear: ping?

[14:35] <flussence> colomon: try doing .close manually, might be the same problem as rakudo...

[14:35] <colomon> flussence: I suspect the problem is say doesn't know how to handle a filehandle

[14:36] <flussence> oh

[14:37] <colomon> I can sort of see what's going on with the treader definition, but not how it all fits together.  Makes implementing twriter hard.

[14:37] *** shinobicl joined
[14:38] <colomon> afk # driving home from service center

[14:38] *** colomon left
[14:44] <masak> that wouldn't be the paste service center, would it? :P

[14:52] *** PacoLinux left
[14:59] <masak> found an old quote by audreyt: "the line between silly jokes and serious realities in p6l is so blurred it's a fog"

[14:59] <masak> also from 2005 :)

[15:01] *** mishin joined
[15:01] <im2ee> masak, hej! :)

[15:03] *** daxim left
[15:04] *** daxim joined
[15:08] <sorear> good * #perl6

[15:09] <mberends> masak: thanks :) I hope we get your system to run Gtk with Niecza soon.

[15:09] <mberends> good * sorear

[15:10] <masak> *, sorear 

[15:10] <masak> mberends: me too.

[15:11] *** Holy_Cow joined
[15:11] <masak> mberends: interesting how you're capitalizing your subroutine names. I'm guessing that's a .Net influence...

[15:13] *** colomon joined
[15:14] <masak> jnthn: wow, you have to see this! http://web.archive.org/web/20060407044836/http://pugscode.org/images/metamodel.png

[15:15] <masak> back when Perl 6 had not only Object but Class, too!

[15:17] <masak> I can happily say I grok that picture better today than I did back then.

[15:17] <masak> mostly thanks to jnthn, our demiurge :P

[15:18] <masak> bits of what's found on the left feels like things that ended up in our HOWs.

[15:19] <jnthn> HOW is the metaverse, yes :)

[15:19] <jnthn> That diagram looks familiar :)

[15:20] <masak> wow, and the private attr sigil was the colon. :)

[15:20] <jnthn> Though the Class class happily went away :)

[15:20] <sorear> even the name dates it...

[15:20] <im2ee> nom: say "abc".split('').join('!');

[15:20] <p6eval> nom 356fe7: OUTPUT«a!b!c␤»

[15:21] <jnthn> hmm...it confuses me in various ways :)

[15:21] <masak> me too :)

[15:21] <masak> im2ee: consider using .comb instead, for great justice. :)

[15:22] <TimToady> and 5 fewer characters

[15:22] <masak> nom: say "abc".comb.join('!')

[15:22] <p6eval> nom 356fe7: OUTPUT«a!b!c␤»

[15:22] <im2ee> masak, fantastic, thanks. :)

[15:24] *** zby_home joined
[15:30] *** tokuhiro_ left
[15:30] *** risou is now known as risou_awy

[15:31] *** risou_awy is now known as risou

[15:31] <jnthn> walk &

[15:32] <masak> im2ee didn't ask here on the channel, so I'll ask for him: what are the current known-working ways to make use a SQL database from Perl 6?

[15:33] <moritz> Nil

[15:34] <masak> both mystifying and a bit depressing, if so.

[15:34] <im2ee> Hm, i have problem with log in mysql db, but i have just saw solution i p5. :) 

[15:34] *** pernatiy left
[15:35] <im2ee> So, i probably will use it. And i hope i'll write mysql module, or something like that, for p6 . :)

[15:36] <TimToady> that's the spirit

[15:37] <im2ee> TimToady, i'm begginer in p6, but i have a dream to become a professional. :)

[15:37] <TimToady> std: foo"bar"

[15:38] <p6eval> std 8b331d2: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row (listop with args requires whitespace or parens) at /tmp/3fMWyJz5tE line 1:␤------> [32mfoo[33m⏏[31m"bar"[0m␤    expecting any of:␤   POST␤   argument list␤  bracketed infix␤        infix or meta-infix␤    postfix␤       

[15:38] <p6eval> ..postfix_prefi…

[15:38] <TimToady> im2ee: just keeping banging your head against the wall, and eventually it will start to crumble

[15:38] <sorear> your head or the wall?

[15:39] <TimToady> yes

[15:39] <TimToady> I mean, Bool::True

[15:39] <sorear> colomon: hi

[15:40] <masak> sorear: from experience, both.

[15:40] <TimToady> moritz: yes, eqv should also autothread; all normal user-visible operators should autothread

[15:41] <moritz> TimToady: and how would I compare two type objects?

[15:41] <TimToady> === works fine

[15:41] <moritz> no

[15:41] <moritz> not if one of them is Mu or Junction

[15:41] <TimToady> *except* for Junction and Mu

[15:42] <TimToady> well, and ~~ is special

[15:42] <moritz> well, how would I compare two type objects if I don't know in advance if one of them might be Mu or Junction, or not?

[15:42] <TimToady> .isa(Junction)

[15:43] <TimToady> declare your type Any, and then you can know in advance :)

[15:43] <TimToady> also, we don't have to autothread undefined junctions

[15:43] <moritz> .isa also consider subtyping, which is not always what I want

[15:45] <TimToady> nothing much derives from Junction

[15:45] <TimToady> and testing things for Mu is generally not a good idea

[15:46] <TimToady> ~~ :(Mu:U) or some such might work

[15:46] <sorear> erm, moritz is asking about *type objects*

[15:46] <sorear> not things

[15:46] <TimToady> yes, I know

[15:46] <sorear> sub my_func(Mu:U $x1, Mu:U $x2) { ... ... if (???) { ... } }

[15:46] <sorear> I recommend $x1.HOW === $x2.HOW

[15:47] *** daxim left
[15:47] <TimToady> identity is determined by .WHICH, not by .HOW

[15:47] <TimToady> which is why S03 recommends that

[15:47] *** risou is now known as risou_awy

[15:49] <TimToady> also, there's the S12:1598-specced Mu:T to play with

[15:50] <TimToady> and Mu can certainly define its own === that can decide whether to delegate to Junction or not

[15:50] <TimToady> there are various places to cut the gordian knot, but in the middle of the normal operators is not acceptable to me

[15:51] <TimToady> I'm fine if certain methods like .gist are on the non-autothreading side

[15:51] *** kaare_ joined
[15:51] *** shinobicl left
[15:51] <TimToady> and the WH macros are certainly on that side

[15:52] <TimToady> but the typical user is going to want === and eqv to autothread most of the time

[15:53] <TimToady> (in my estimation)

[15:53] <TimToady> I realize there aren't many typical users wandering around here just yet... :)

[15:54] <TimToady> in my head, it's really the Any type that maps most closely to what other OO languages call Object

[15:54] <TimToady> Mu is an outer container of concepts

[15:55] <TimToady> that don't necessarily have a one-to-one mapping to objects in the classical sense

[15:58] <colomon> sorear: any thoughts on open files to write to them in niecza?  I tried https://gist.github.com/1259443 and that seems to open a file okay, but $file.say fails silently instead of working.

[15:59] <sorear> colomon: you also need a TextWriter class with a say method.

[15:59] <sorear> the code you pasted looks fine

[16:00] <sorear> (as long as you made the other &open a multi too)

[16:00] * masak decommutes

[16:00] <colomon> (yes, of course)

[16:00] *** masak left
[16:01] *** espadrine joined
[16:02] <colomon> Ah, I see the TextReader class now.  (I really have to get my ack fixed to looking in the .setting files by default.)

[16:02] <sorear> I'm a little suprised it "silently failed" though

[16:04] <colomon> If it crashed without a message, I wouldn't have noticed it.

[16:04] <colomon> (since it was in a .t file I was calling from prove)

[16:05] *** GlitchMr left
[16:10] *** espadrine left
[16:17] <TimToady> jnthn: re http://irclog.perlgeek.de/perl6/2011-10-02#i_4512490, S05:1121 already claims match on an undefined value fails

[16:19] <jnthn> TimToady: ah, that's the kinda comment I was looking for and somehow missed.

[16:19] <jnthn> TimToady: Applies to backrefs too?

[16:19] <TimToady> but use of $1 where there's only one () should probably produce a compile-time error anyway

[16:20] <jnthn> It could probably do that, yes.

[16:20] <TimToady> backrefs are just normal variables, as far as that is concerned, yes

[16:20] <jnthn> Though for now making it at least fail to match will be an improvement.

[16:21] <TimToady> the compile error would be in the category "This can't possibly work"

[16:21] <jnthn> OK, I figured out how to fix it, was just a little thrown off that we've done the same in b, and wanted to be sure how it would be. I was expecting just a nom regression.

[16:21] <TimToady> or maybe in the category, "You are a recovering Perl 5 programmer, I perceive" :)

[16:21] <jnthn> ;)

[16:22] <TimToady> hmm

[16:22] <TimToady> std: /(.)\1/

[16:22] <p6eval> std 8b331d2: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of the 1-based special form '\1' as a backreference; in Perl 6 please use the 0-based variable '$0' instead at /tmp/SyhzrylExF line 1:␤------> [32m/(.)\1[33m⏏[31m/[0m␤Check failed␤FAILED 00:01 120m␤»

[16:22] <TimToady> std: /(.)$1/

[16:22] <p6eval> std 8b331d2: OUTPUT«ok 00:01 121m␤»

[16:22] <TimToady> what I thought...

[16:24] <TimToady> >>todo

[16:24] <sorear> niecza: /(.)\1/

[16:24] <p6eval> niecza v10-34-gb08643d: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unsupported use of the 1-based special form '\1' as a backreference; in Perl 6 please use the 0-based variable '$0' instead at /tmp/KweFaGMRFO line 1:␤------> [32m/(.)\1[33m⏏[31m/[0m␤␤Action method backslash:oldbackref n…

[16:26] <TimToady> do other people's irssi's color extra things in a buggy way like mine does?  I see bac<red>kreferen</red>ce

[16:26] <moritz> nope, fine here

[16:26] <jnthn> looks fine to me too

[16:26] <moritz> only the === and the second / is red here

[16:26] <TimToady> maybe something else I'm highlighting is doing it bogusly

[16:26] <TimToady> thanks

[16:27] <TimToady> oh, maybe it's trying to highlight the Perl 6 and missing

[16:28] <TimToady> that's probably it

[16:28] * moritz wants a ==== that doesn't autothread

[16:28] * TimToady wants to shoot moritz, in the nicest possible way

[16:29] <moritz> is it really too much to ask for an identity operator that actually tells me if the LHS is the same as the RHS, without any DWIM?

[16:30] * TimToady is not sure

[16:32] <TimToady> the point of having a conceptual space outside of Any is to fuzz the concept of identity, so it's not at all clear on what metalevel beyond .WHICH to define it

[16:33] <moritz> well, .WHICH doesn't autothread

[16:33] <TimToady> if you want something that always means .WHICH === .WHICH, you can define one, but it doesn't seem terribly useful to me outside of implementing junctions and such, and a hazard for newbies

[16:34] <moritz> being able to reliably compare type objects is very useful for any kind of meta stuff, including testing

[16:36] <TimToady> you can certainly define an === that works on Junction:T args

[16:36] <jnthn> Junction === Junction could certainly still be made to work.

[16:36] <jnthn> (with :U)

[16:36] <TimToady> no, :T :)

[16:36] <TimToady> as specced

[16:36] <jnthn> grr, stop changing stuff just after I get it implemented!! :P

[16:37] <TimToady> it's been there a while

[16:37] <jnthn> I know, it still landed just after I got done implementing :U/:D.

[16:37] <jnthn> It's probably been there long enough to make me think it isn't about to change yet again by now though.

[16:37] <TimToady> :P

[16:39] <TimToady> in fact, can just be Mu:T === Mu:T I think

[16:40] <jnthn> Wait, what?

[16:40] <jnthn> Oh, you mean infix:<===>(Mu:T, Mu:T) ?

[16:40] <sorear> What?

[16:40] <TimToady> yes

[16:40] <TimToady> sorry for the shorthand

[16:40] <jnthn> oh, phew....I thought we were about to have Mu:T being an entity we can pass around first class :)

[16:40] <sorear> ...how is that supposed to work?

[16:41] <jnthn> (Which I guess we could, but...)

[16:41] <TimToady> it's a candidate that only matches on type objects

[16:41] <jnthn> It depends on the others being :D (is it still that?) I guess

[16:41] <sorear> TimToady: oh you mean making === a multi?

[16:42] <TimToady> well, yes, nearly all P6 ops are multis...

[16:44] <TimToady> jnthn: MyType:T is officially just a subset type, like :U and :D

[16:44] <TimToady> that doesn't mean we can't cheat on it here and there

[16:44] <jnthn> Well, we kinda have to in the dispatcher if we want decent performance :)

[16:44] <TimToady> or define them in primitive terms

[16:45] <jnthn> But yes, if they show up somewhere where they have to be first class they can vivify subset types.

[16:45] <sorear> Has anyone figured out how the whole Failure-mixed-into-types thing works yet?

[16:45] <TimToady> so Mu:T is first-class only in the sense that other subset types are

[16:45] <jnthn> Well, the ones you declare with subset most certainly are :)

[16:46] <TimToady> sorear: I think of it as mixing in a bottom type

[16:46] <TimToady> which is probably insane in various ways, but that's how I think of it currently

[16:48] <sorear> TimToady: I don't understand the mixning. :)

[16:48] <TimToady> it's probably more like Haskell's Error type

[16:49] <TimToady> more like typed bottom-ish values that can still officially fit into a typed container

[16:50] <TimToady> but tell the world, "I am undefined because of non-computability"

[16:50] <TimToady> as opposed to "I am undefined because I was never initialized"

[16:50] <sorear> what is the type of a Failure?

[16:51] <sorear> haskell can get away with this because of type erasure

[16:52] *** Chillance joined
[16:52] *** kaleem joined
[17:00] *** lateau_ joined
[17:01] *** lateau_ left
[17:04] *** lateau_ joined
[17:08] *** localhost left
[17:09] *** localhost joined
[17:11] <dalek> niecza/serialize: f1f89cc | sorear++ | / (5 files):

[17:11] <dalek> niecza/serialize: Reimplement blocks and inlining

[17:11] <dalek> niecza/serialize: review: https://github.com/sorear/niecza/commit/f1f89cc768

[17:13] *** dakkar left
[17:16] *** envi_ left
[17:20] *** shinobicl joined
[17:22] *** wolfman2000 joined
[17:32] <dalek> niecza/serialize: 6c3002f | sorear++ | lib/ (2 files):

[17:33] <dalek> niecza/serialize: Fix Frame.code/protopad/RUN_ONCE interaction

[17:33] <dalek> niecza/serialize: review: https://github.com/sorear/niecza/commit/6c3002f13d

[17:33] *** bbkr left
[17:40] *** kmwallio joined
[17:46] <dalek> niecza/serialize: 7bea562 | sorear++ | lib/Kernel.cs:

[17:46] <dalek> niecza/serialize: Fix LIPackage.Get code generation

[17:46] <dalek> niecza/serialize: review: https://github.com/sorear/niecza/commit/7bea562e70

[17:48] *** benabik left
[17:49] <moritz> nom: role R { }; module M does R { }

[17:49] <p6eval> nom 356fe7: OUTPUT«===SORRY!===␤Method 'add_role' not found for invocant of class 'Perl6::Metamodel::ModuleHOW'␤»

[17:50] <moritz> jnthn: when would the error in traits.pm line 107 be triggered?

[17:52] *** rindolf joined
[17:52] *** kmwallio left
[17:55] <jnthn> nom: module M { }; class C does M { }

[17:55] <p6eval> nom 356fe7: OUTPUT«===SORRY!===␤C cannot compose M because it is not composable␤»

[17:55] <jnthn> moritz: Should probably check the other way around too.

[17:56] <jnthn> unless pir::can($doee.HOW, 'add_role') { die ... ~ "does not support having roles composed into it" } or some such.

[17:57] *** wamba joined
[18:10] <dalek> niecza/serialize: 04630ce | sorear++ | / (3 files):

[18:10] <dalek> niecza/serialize: Improve variable existence detection

[18:10] <dalek> niecza/serialize: review: https://github.com/sorear/niecza/commit/04630cef57

[18:13] *** benabik joined
[18:16] *** masak joined
[18:16] <masak> buona sera, #perl6.

[18:18] <[Coke]> robert addressed my RT issues. (search on lastupdated, not updated) (restrict on CF.perl6.{Tag}, not CF.{Tag})

[18:18] <[Coke]> portuguese?

[18:19] *** sures joined
[18:20] *** sures left
[18:21] <flussence> niecza's caught up quite a bit with those extra tests enabled - https://github.com/flussence/specgraphs/raw/e015/impls.png

[18:22] <dalek> niecza/serialize: aaeae45 | sorear++ | / (2 files):

[18:22] <dalek> niecza/serialize: Implement embeddedblock, fix crash on 10th variable in a sub

[18:22] <dalek> niecza/serialize: review: https://github.com/sorear/niecza/commit/aaeae4513d

[18:23] <[Coke]> flussence: what is that, almost double?

[18:23] <flussence> 7919 up from 3813

[18:23] <sorear> flussence: the teal zone has to be nom?

[18:23] * sorear leaves

[18:23] <flussence> yes

[18:23] <[Coke]> rakudo: say 7919/3813

[18:23] <p6eval> rakudo 356fe7: OUTPUT«2.07684238132704␤»

[18:25] <[Coke]> rakudo: our Str a

[18:25] <p6eval> rakudo 356fe7: OUTPUT«===SORRY!===␤In "our" declaration, typename Str must be predeclared (or marked as declarative with :: prefix) at line 1, near " a"␤»

[18:25] <sorear> std: our Str a

[18:25] <p6eval> std 8b331d2: OUTPUT«[31m===[0mSORRY![31m===[0m␤Multiple prefix constraints not yet supported at /tmp/k9Lxlm7UTU line 1:␤------> [32mour Str [33m⏏[31ma[0m␤Malformed our at /tmp/k9Lxlm7UTU line 1:␤------> [32mour Str [33m⏏[31ma[0m␤    expecting any of:␤ multi_declarator␤       typen…

[18:25] <[Coke]> std: our Str a

[18:25] <p6eval> std 8b331d2: OUTPUT«[31m===[0mSORRY![31m===[0m␤Multiple prefix constraints not yet supported at /tmp/uKcu3mUID2 line 1:␤------> [32mour Str [33m⏏[31ma[0m␤Malformed our at /tmp/uKcu3mUID2 line 1:␤------> [32mour Str [33m⏏[31ma[0m␤    expecting any of:␤ multi_declarator␤       typen…

[18:25] <mberends> flussence: the 7919 includes over 1400 skipped tests that 'prove' does considers passes.

[18:25] <mberends> s/does//

[18:26] <masak> [Coke]: no, Spanish, I hope.

[18:27] <masak> [Coke]: Portuguese would be 'bom tarde', I think.

[18:27] <[Coke]> spanish is "buen~os tardes", methinks.

[18:27] *** supernovus joined
[18:27] *** lateau_ left
[18:27] <[Coke]> perhaps it's italian? ;)

[18:28] <[Coke]> it is.

[18:29] <masak> oh! :)

[18:29] <[Coke]> (er, and if that's evening, es "noches", no "tardes". whoops.)

[18:29] <masak> romance fail :P

[18:29] <[Coke]> close enough. ;)

[18:29] <supernovus> Probably a dumb question, but what is the difference between the Str and Stringy methods? I don't remember seeing Stringy prior to nom... but have used Str methods quite often...

[18:30] *** lateau_ joined
[18:30] *** MayDaniel joined
[18:32] <[Coke]> std: my $x =3; say ++++$x

[18:32] <p6eval> std 8b331d2: OUTPUT«ok 00:01 122m␤»

[18:32] <[Coke]> rakudo: my $x =3; say ++++$x

[18:32] <p6eval> rakudo 356fe7: OUTPUT«Cannot assign to a readonly variable or a value␤  in sub prefix:<++> at src/gen/CORE.setting:2241␤  in block <anon> at /tmp/ufoahxjRzU:1␤  in <anon> at /tmp/ufoahxjRzU:1␤␤»

[18:33] <[Coke]> niecza my $x =3; say ++++$x

[18:33] <[Coke]> niecza: my $x =3; say ++++$x

[18:33] <p6eval> niecza v10-34-gb08643d: OUTPUT«5␤»

[18:33] <[Coke]> who's right?

[18:34] <masak> dunno.

[18:34] <[Coke]> I'm going with rakudo, based on RT 74912

[18:34] *** lateau_ left
[18:34] *** _jaldhar left
[18:35] *** _jaldhar joined
[18:35] <masak> supernovus: Stringy is a role. think of Numeric for numbers. Num ~~ Numeric, and Str ~~ Stringy

[18:35] <jnthn> Guess if we want consistency with postfix:<++> then Rakudo is right.

[18:36] <[Coke]> rakudo: my %h; sub h { say "srsly wtf" }; enum Foo %h;

[18:36] <p6eval> rakudo 356fe7: OUTPUT«Could not find sub &Foo␤  in block <anon> at /tmp/PypFDQseNO:1␤  in <anon> at /tmp/PypFDQseNO:1␤␤»

[18:36] <[Coke]> moritz: can we close 67942 % tests ?

[18:36] *** _jaldhar is now known as jaldhar

[18:38] <[Coke]> phenny: ask moritz if we can close 67942 % tests ?

[18:38] <phenny> [Coke]: I'll pass that on when moritz is around.

[18:39] *** GlitchMr joined
[18:40] *** araujo left
[18:40] <[Coke]> rakudo: say 'aa' ~~ /(.)$1/; say $0.to

[18:40] <p6eval> rakudo 356fe7: OUTPUT«=> <a>␤ 0 => <a>␤␤1␤»

[18:40] <supernovus> masak: Yeah, I was just reading through the specs again, and spotted Stringy in there. The flexibility in Perl 6 is certainly awesome :-)

[18:41] *** araujo joined
[18:42] <[Coke]> rakudo: 14:40 < [Coke]> rakudo: say 'aa' ~~ /(.)$1/; say $0.to

[18:42] <[Coke]> 14:40 <+p6eval> rakudo 356fe7: OUTPUT«=> <a>␤ 0 => <a>␤␤1␤»

[18:42] <p6eval> rakudo 356fe7: OUTPUT«===SORRY!===␤Confused at line 1, near "14:40 < [C"␤»

[18:42] <[Coke]> grr.

[18:42] <[Coke]> subset ComplexNumeric of Numeric where { ($_ ~~ Real) || ($_ ~~ Complex) }; my ComplexNumeric $x = 1; say $x.perl; $x = 1i; say $x.perl

[18:43] <[Coke]> rakudo: subset ComplexNumeric of Numeric where { ($_ ~~ Real) || ($_ ~~ Complex) }; my ComplexNumeric $x = 1; say $x.perl; $x = 1i; say $x.perl #also grr!

[18:43] <p6eval> rakudo 356fe7: OUTPUT«1␤Complex.new(0, 1)␤»

[18:43] <[Coke]> rakudo: subset ComplexNumeric of Numeric where { ($_ ~~ Real) }; my ComplexNumeric $x = 1; say $x.perl;

[18:43] <p6eval> rakudo 356fe7: OUTPUT«1␤»

[18:45] *** mishin left
[18:46] <dalek> rakudo/nom: 59d442b | Coke++ | t/spectest.data:

[18:46] <dalek> rakudo/nom: track failure mode.

[18:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/59d442bb67

[18:48] <moritz> o/

[18:48] <phenny> moritz: 18:38Z <[Coke]> ask moritz if we can close 67942 % tests ?

[18:50] *** soh_cah_toa joined
[18:51] <masak> moin, moritz 

[18:51] <sjohnson> :)

[18:51] <masak> supernovus: if by that you mean that we have many types in CORE, then yes :P

[18:55] *** MayDaniel left
[18:57] <moritz> std: my %h; enum Foo %h;

[18:57] <p6eval> std 8b331d2: OUTPUT«[31m===[0mSORRY![31m===[0m␤Illegal redeclaration of symbol 'Foo' (see line 1) at /tmp/l6giZF50zq line 1:␤------> [32mmy %h; enum Foo[33m⏏[31m %h;[0m␤Undeclared routine:␤   'h' used at line 1␤Check failed␤FAILED 00:01 122m␤»

[18:58] <moritz> WTF?

[18:58] <moritz> why is Foo redeclared, and why does it try to call h()?

[18:58] *** am0c joined
[18:58] <sjohnson> cause it's perl6's madness monday today

[18:59] *** wolfman2000 left
[19:02] <masak> moritz: more to the point, how did you discover this? :P

[19:03] <[Coke]> RT #67942

[19:03] <moritz> [Coke]: I'm convinced that the new response is wrong also

[19:03] <[Coke]> moritz: hokay.

[19:03] <moritz> a sane response would be "value of %h not known at compile time" or so

[19:03] <[Coke]> Most of the time, I'm just saying "this has changed" and don't know enough perl6 to know if it's for the better. ;)

[19:04] <dalek> roast: 20b8292 | moritz++ | S02-types/capture.t:

[19:04] <dalek> roast: RT #78496, Pair.Capture

[19:04] <dalek> roast: review: https://github.com/perl6/roast/commit/20b8292671

[19:04] <[Coke]> colomon: ping.

[19:04] <[Coke]> phenny: ask colomon if RT# 69382 is still an issue.

[19:04] <phenny> [Coke]: I'll pass that on when colomon is around.

[19:05] <masak> [Coke]: I do that too. :)

[19:05] <[Coke]> masak: FYI, I'm explicitly ignoring your tickets in the queue. ;)

[19:05] <[Coke]> (and regex, and rule, and ... a few other things.)

[19:06] *** leprevost left
[19:06] <[Coke]> Leaves me with a more tractable subset of tickets to wander through.

[19:06] <masak> :P

[19:06] <masak> I'll take that as a compliment.

[19:09] <dalek> roast: e65bacd | moritz++ | S03-operators/repeat.t:

[19:09] <dalek> roast: infix x with fractional numbers

[19:09] <dalek> roast: review: https://github.com/perl6/roast/commit/e65bacdfbb

[19:09] <moritz> < 750 tickets! \o/\o/\o/

[19:10] <moritz> std: <a b>[-1]

[19:10] <p6eval> std 8b331d2: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of [-1] subscript to access from end of array; in Perl 6 please use [*-1] at /tmp/KmgYHBihNe line 1:␤------> [32m<a b>[-1][33m⏏[31m<EOL>[0m␤Parse failed␤FAILED 00:01 119m␤»

[19:10] <moritz> nom: <a b>[-1]

[19:10] <p6eval> nom 59d442:  ( no output )

[19:14] <jnthn> I'm guessing that enum parses as the modulo operator and a call to h

[19:14] <jnthn> e.g. enum (Foo % h)

[19:15] <moritz> but why then would it be a redeclaration of Foo?

[19:16] <colomon> sorear: oh, there's already a TextWriter class, it just doesn't really do much of anything

[19:16] <phenny> colomon: 19:04Z <[Coke]> ask colomon if RT# 69382 is still an issue.

[19:16] <moritz> nom: eval { die "foo" }; say $!.backtrace

[19:16] <jnthn> I was guessing at Rakudo's interpretation, not STDs.

[19:16] <p6eval> nom 59d442: OUTPUT«Nominal type check failed for parameter '$code'; expected Str but got Block instead␤  in sub eval at src/gen/CORE.setting:420␤  in block <anon> at /tmp/2MUIZd9krB:1␤  in <anon> at /tmp/2MUIZd9krB:1␤␤»

[19:16] <moritz> nom: try { die "foo" }; say $!.backtrace

[19:17] <p6eval> nom 59d442: OUTPUT«Method 'backtrace' not found for invocant of class 'Exception'␤  in block <anon> at /tmp/miMmj_4Qli:1␤  in <anon> at /tmp/miMmj_4Qli:1␤␤»

[19:17] <jnthn> STD may be doing it by backtracking over the type reg or something.

[19:21] <rindolf> Hi all. perl Configure.pl --gen-parrot fails here - http://paste.debian.net/133888/

[19:21] <dalek> niecza: 5239f11 | mberends++ | examples/gtk-webbrowser.pl:

[19:21] <dalek> niecza: Add a lightweight (text only) Gtk.HTML based web browser example

[19:21] <dalek> niecza: review: https://github.com/sorear/niecza/commit/5239f1160f

[19:22] <rindolf> Can anyone help?

[19:22] <[Coke]> rindolf: what version of git do you have?

[19:23] <moritz> rindolf: how old is your rakudo?

[19:23] <moritz> it tries to build a parrot 2.11

[19:23] <[Coke]> oh. yah, 2.11 is pretty ancient parrot.

[19:23] <moritz> the current rakudo depends on parrot 3.8.something

[19:25] <rindolf> [Coke]: git?

[19:26] <[Coke]> rindolf: answer moritz's question first.

[19:26] <[Coke]> (and yes, it's checking out a copy of parrot via git for you.)

[19:26] <rindolf> moritz: it's Date:   Sat Jan 1 22:49:26 2011 +0200

[19:26] <rindolf>  - hmmm...

[19:27] <moritz> rindolf: that won't make you happy at all

[19:27] <[Coke]> "there's your problem."

[19:27] <moritz> rindolf: git fetch; git checkout nom; perl Configure --gen-parrot

[19:27] <rindolf> moritz: OK.

[19:27] <rindolf> moritz: hmmm... github mislead me. I thought that "fork" meant "Fork it!", but it's my own fork.

[19:28] <supernovus> nom: my @a = 1,2,3; @a.splice(1,1);

[19:28] <p6eval> nom 59d442: OUTPUT«Method 'splice' not found for invocant of class 'Array'␤  in block <anon> at /tmp/sTUNw2OZjm:1␤  in <anon> at /tmp/sTUNw2OZjm:1␤␤»

[19:28] *** Holy_Cow left
[19:29] <rindolf> OK, it seems to be a bug.

[19:29] <rindolf> In github.

[19:29] <moritz> what does   git remote -v   say?

[19:29] <[Coke]> rakudo: class A::B { has $.s = "hey" }; my $q = "B"; my $l = gather { take "A::$q".new; }; $l[0].s.say

[19:29] <p6eval> rakudo 59d442: OUTPUT«Method 's' not found for invocant of class 'Str'␤  in block <anon> at /tmp/qOmsyeOrqt:1␤  in <anon> at /tmp/qOmsyeOrqt:1␤␤»

[19:30] <moritz> [Coke]: "string".new just creates a new, empty Str object

[19:30] <moritz> lookup by name would be ::("A::$q").new

[19:32] <moritz> [Coke]: or in other words, rakudo is right here

[19:32] <[Coke]> moritz: don't care, just ticket spelunking. ;)

[19:32] *** kaleem left
[19:33] *** araujo left
[19:33] <[Coke]> https://rt.perl.org/rt3/Ticket/Display.html?id=77178 was the ticket. I've gotta get back to dayjob.

[19:33] *** araujo joined
[19:36] <moritz> [Coke]: thanks, closing that one

[19:38] <[Coke]> moritz: \o/ !

[19:44] *** daniel-s left
[19:47] <dalek> rakudo/nom: 7823a4c | moritz++ | src/core/Exception (2 files):

[19:47] <dalek> rakudo/nom: give Exception a backtrace method

[19:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7823a4c98d

[19:48] *** GlitchMr left
[19:48] <moritz> nom: .say for gather { loop { take 1 } }

[19:48] <p6eval> nom 59d442: OUTPUT«(timeout)»

[19:48] <moritz> why doesn't this print lots of 1s before timing out?

[19:50] *** MayDaniel joined
[19:53] *** packetknife joined
[19:54] <flussence> insufficient laziness?

[19:54] <[Coke]> shouldn't that be "insufficient eagerness" ?

[19:54] <PerlJam> flussence: perhaps too much laziness.

[19:55] <diakopter> std: .say for gather { loop { take 1 } }

[19:55] <p6eval> std 8b331d2: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused at /tmp/Bmw4GxOg9G line 1:␤------> [32m.say for gather { loop { take 1 }[33m⏏[31m }[0m␤    expecting horizontal whitespace␤Parse failed␤FAILED 00:01 121m␤»

[19:55] <diakopter> std:  .say for gather { loop { take 1 } }

[19:55] <moritz> huh, what's wrong with it?

[19:55] <p6eval> std 8b331d2: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused at /tmp/l8xXNJCY0f line 1:␤------> [32m.say for gather { loop { take 1 }[33m⏏[31m }[0m␤    expecting horizontal whitespace␤Parse failed␤FAILED 00:01 121m␤»

[19:55] <flussence> nom: .say for (gather { loop { take 1 } }).[5]

[19:55] <p6eval> nom 59d442: OUTPUT«1␤»

[19:55] <PerlJam> std may t hink you need a ;

[19:55] <moritz> std: loop { }

[19:55] <p6eval> std 8b331d2: OUTPUT«ok 00:01 118m␤»

[19:56] <moritz> std:  .say for gather { loop { take 1 }; }

[19:56] <p6eval> std 8b331d2: OUTPUT«ok 00:01 121m␤»

[19:56] <moritz> TimToady: I think it's a stdbug that you need that ;

[19:56] * PerlJam too

[19:56] <flussence> nom: my $a = 0; .say for gather { loop { take 1; last if ++$a > 50 } }

[19:56] <p6eval> nom 59d442: OUTPUT«Method 'eager' not found for invocant of class 'Integer'␤  in sub coro at src/gen/CORE.setting:3900␤  in method reify at src/gen/CORE.setting:3870␤  in method reify at src/gen/CORE.setting:3653␤  in method reify at src/gen/CORE.setting:3653␤  in method gimme at src/ge…

[19:56] <flussence> er

[19:56] <diakopter> niecza: .say for gather { loop { take 1 }; }

[19:57] <p6eval> niecza v10-35-g5239f11: OUTPUT«(timeout)1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1􏿽xE2􏿽x90

[19:57] * moritz thinks there's something rotten in the state of rakudo/nom

[19:58] <jnthn> moritz: ?

[19:58] <moritz> nom: .say for gather { loop { take 1 } }

[19:58] <p6eval> nom 7823a4: OUTPUT«(timeout)»

[19:59] <moritz> jnthn: I'd expect that one to print lots of 1's before timeouting

[20:00] *** espadrine joined
[20:00] <jnthn> same

[20:00] <dalek> niecza: 241a2d8 | mberends++ | examples/gtk-tetris.pl:

[20:00] <dalek> niecza: refactoring - no functional changes

[20:00] <dalek> niecza: review: https://github.com/sorear/niecza/commit/241a2d8ce2

[20:02] <mberends> oops, shoulda said sorear++ for the refactoring tips

[20:02] <sjohnson> perl6: sprintf("just another %u hacker", (5 + 1)).perl

[20:02] <sjohnson> oops.

[20:02] <p6eval> pugs, rakudo 7823a4, niecza v10-35-g5239f11:  ( no output )

[20:03] <sjohnson> perl6: sprintf("just another perl %u hacker", (5 + 1)).perl.say

[20:03] <p6eval> pugs: OUTPUT«\"just another perl 6 hacker"␤»

[20:03] <p6eval> ..rakudo 7823a4, niecza v10-35-g5239f11: OUTPUT«"just another perl 6 hacker"␤»

[20:03] <sjohnson> mad skillz

[20:03] <masak> :D

[20:06] <[Coke]> 748 tickets, minus 36 that needtests.

[20:06] <jnthn> \o/

[20:06] <masak> impressive.

[20:07] <jnthn> say (gather { loop { say 42; take 1 } }).iterator.infinite

[20:07] <jnthn> nom: say (gather { loop { say 42; take 1 } }).iterator.infinite

[20:07] <p6eval> nom 7823a4: OUTPUT«Bool::False␤»

[20:07] *** packetknife left
[20:07] <mberends> masak: I realized after your comment that the PascalCase style in gtk-tetris.pl was caused by the method names in the Gtk libraries. It looked wrong to conflict with them.

[20:07] <[Coke]> moritz++

[20:07] <masak> mberends: ah, gtk.

[20:07] <masak> mberends: guessed it was something like that.

[20:08] <masak> mberends: I'm not condemning it. in fact I supposed it was a conscious choice made from weighing the two options.

[20:08] <mberends> masak: yeah, it was conscious. An earlier style looked worse.

[20:08] <masak> :)

[20:08] <masak> mberends++

[20:09] <jnthn> moritz: Slightly worried it may be somewhat related to my MapIter work yesterday.

[20:09] <moritz> jnthn: it isn't

[20:09] <jnthn> moritz: Oh?

[20:09] <jnthn> OK.

[20:09] <jnthn> moritz: You already tried undoing that?

[20:10] <moritz> jnthn: that was my first idea as well, and I compiled rakudo with the revision before your MapIter patch

[20:10] <moritz> and it still doesn't print anything

[20:10] <colomon> moritz++ 

[20:10] <jnthn> moritz: OK

[20:10] * moritz -> sleep

[20:10] *** rindolf left
[20:15] *** soh_cah_toa left
[20:15] *** mj41 joined
[20:16] <masak> dobranacht, moritz. dream of bots automatically writing roast tests and closing bugs.

[20:18] *** kmwallio joined
[20:20] <masak> rakudo: say "rah ", "tata tah " xx 2, "ta tam!" for ^3; say "yeah!"

[20:20] <p6eval> rakudo 7823a4: OUTPUT«rah tata tah  tata tah ta tam!␤rah tata tah  tata tah ta tam!␤rah tata tah  tata tah ta tam!␤yeah!␤»

[20:20] *** molaf left
[20:20] <masak> hm.

[20:20] * masak wonders how to get the spaces right

[20:21] *** rgrau joined
[20:21] <masak> rakudo: say "rah ", "tata tah" xx 2, " ta tam!" for ^3; say "yeah!"

[20:21] <p6eval> rakudo 7823a4: OUTPUT«rah tata tah tata tah ta tam!␤rah tata tah tata tah ta tam!␤rah tata tah tata tah ta tam!␤yeah!␤»

[20:21] <masak> yeah!

[20:22] <masak> rakudo: say "rah ", ("tata tah", "ta tam").roll(3), "!" for ^3; say "yeah!"

[20:22] <p6eval> rakudo 7823a4: OUTPUT«rah tata tah ta tam tata tah!␤rah ta tam ta tam ta tam!␤rah ta tam ta tam ta tam!␤yeah!␤»

[20:22] <masak> ending was a bit weak.

[20:23] <mberends> masak: now you've done it. I'll dream of the Christmas Drummer Boy song.

[20:23] <masak> oops.

[20:24] <masak> if you want, I can sabotage your mental jukebox with something else.

[20:24] <mberends> lol

[20:24] <masak> rakudo: say "At first I was afraid, I was petrified..."

[20:24] <p6eval> rakudo 7823a4: OUTPUT«At first I was afraid, I was petrified...␤»

[20:24] <jnthn> .oO( t-t-t-t-telephone )

[20:24] <masak> auugh.

[20:24] <mberends> lol xx 2

[20:24] <jnthn> .oO( Friday...Frriiiiday )

[20:24] <masak> make... it... stop...

[20:24] <[Coke]> .oO(bananaphone!)

[20:24] <masak> gnnn

[20:24] <jnthn> oh no

[20:25] <jnthn> :P

[20:26] <masak> [Coke]: was that *really* necessary? there's nothing that trumps the bananaphone! :P

[20:26] <masak> now we're all stuck with it for the evening...

[20:27] <jnthn> nom: say 'ring' xx 4, 'bananaphone' for ^2

[20:27] <p6eval> nom 7823a4: OUTPUT«ring ring ring ringbananaphone␤ring ring ring ringbananaphone␤»

[20:27] <jnthn> oh, not enough rings...and spaces

[20:28] <masak> there's 7 "ring"s.

[20:29] <jnthn> yes...yes there is...

[20:29] <masak> nom: say "ring" xx 7, '! bananaphone!' for ^2

[20:29] <p6eval> nom 7823a4: OUTPUT«ring ring ring ring ring ring ring! bananaphone!␤ring ring ring ring ring ring ring! bananaphone!␤»

[20:30] *** MayDaniel left
[20:34] <jnthn> masak++ # faithful rendition of bananaphone

[20:34] <jnthn> .oO( you know those times when you're not sure if it should be ++ or -- ... :-) )

[20:35] * masak bows elaborately

[20:35] *** wolfman2000 joined
[20:35] <[Coke]> masak: thankfully, I'm more of a carrier.

[20:35] <jnthn> OK, deciding that we consider GatherIter to be infinite by default fixes this case, but not the others. It'll take more digging than I have brane for today.

[20:36] <jnthn> (where this case is the one that hangs)

[20:36] <jnthn> or a pmichaud++ to show up and tell us how it should be.

[20:36] *** dual left
[20:36] <[Coke]> "is perl6 happy with RT as a bug tracker" ?

[20:36] <masak> rakudo: class wolfman { method greet { say "greetings, {self.^name}$.version!" } }; (wolfman.new but role { has $.version = 2000 }).greet

[20:37] <p6eval> rakudo 7823a4: OUTPUT«greetings, wolfman+{<anon>}2000!␤»

[20:37] <[Coke]> so asks your bugadmin.

[20:37] <masak> dang :)

[20:37] <wolfman2000> and afternoon to you too masak.

[20:37] <wolfman2000> not here long: wireless in my present area is not great.

[20:37] <masak> [Coke]: I sure am!

[20:37] <masak> [Coke]: it's very easy to open tickets!

[20:38] <[Coke]> masak: that's far too enthusiastic.

[20:38] *** icwiener joined
[20:38] <masak> ok, sorry.

[20:38] <flussence> .oO( RT is our bug tracker? I thought that was masak... )

[20:38] <masak> [Coke]: I kinda like it. it's alright.

[20:38] <[Coke]> he's the bug OPENER. :P

[20:38] <masak> occasionally I close them too.

[20:38] <masak> but I try not to make a habit of it.

[20:38] <masak> :P

[20:40] *** Bzek left
[20:40] *** Bzek joined
[20:40] *** wolfman2_ joined
[20:41] <masak> but really, the bugs are there whether or not there's tickets for them. I just happen to like there being tickets for them. :)

[20:41] <masak> and the reason I find a percentage of them first is that I'm a bit of a masakist.

[20:42] <[Coke]> You've been hanging around ingy too much.

[20:42] <masak> I wouldn't mind hanging around him more :)

[20:43] *** wolfman2000 left
[20:43] * masak .oO( acme-masakism )

[20:43] *** wolfman2000 joined
[20:44] <masak> rakudo: say (((class wolfman {}).new but role {}) but rolw {}).^name

[20:44] <p6eval> rakudo 7823a4: OUTPUT«Could not find sub &rolw␤  in block <anon> at /tmp/YffAmDSFex:1␤  in <anon> at /tmp/YffAmDSFex:1␤␤»

[20:44] <masak> rakudo: say (((class wolfman {}).new but role {}) but role {}).^name

[20:44] <p6eval> rakudo 7823a4: OUTPUT«wolfman+{<anon>}+{<anon>}␤»

[20:44] <wolfman2000> having fun with my joining and leaving?

[20:45] <masak> that, and anon roles.

[20:45] <masak> I think I get how they work now.

[20:45] <wolfman2000> glad my bad wireless can be of service

[20:46] <jnthn> Well, at least if it serves you badly it's making it up by serving masak well :)

[20:46] *** wolfman2_ left
[20:46] *** zby_home left
[20:47] <masak> rakudo: class wireless { has $.1uality = 'bad'; has $.service = 'yes' }; given wireless.new { say "Can the {.quality} {.^name} be of service?"; say .service ?? "yes!" !! "no!" }

[20:47] <p6eval> rakudo 7823a4: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 1␤»

[20:47] <wolfman2000> :P

[20:48] <masak> rakudo: class wireless { has $.quality = 'bad'; has $.service = 'yes' }; given wireless.new { say "Can the {.quality} {.^name} be of service?"; say .service ?? "yes!" !! "no!" }

[20:48] <jnthn> Your wireless. Same quality as masak's typing :)

[20:48] <p6eval> rakudo 7823a4: OUTPUT«Can the bad wireless be of service?␤yes!␤»

[20:48] <masak> jnthn: oh, 1hut 7p. :P

[20:50] *** alester_ joined
[20:50] *** alester left
[20:50] *** alester_ is now known as alester

[20:51] *** felher left
[20:51] *** alester left
[20:51] *** felher joined
[20:51] *** Trashlord left
[20:52] *** Trashlord joined
[20:52] *** TiMBuS left
[20:53] *** shinobicl left
[20:53] *** TiMBuS joined
[20:59] *** wolfman2000 left
[21:04] *** sivoais left
[21:07] *** orafu left
[21:08] *** HarryS left
[21:08] *** preflex left
[21:08] *** sorear left
[21:08] *** geekosaur left
[21:08] *** silug left
[21:08] <flussence> nom: enum A is export <one two>;

[21:08] <p6eval> nom 7823a4: OUTPUT«===SORRY!===␤No applicable candidates found to dispatch to for 'trait_mod:<is>'. Available candidates are:␤:(Mu $type, Any $size, Any $nativesize)␤:(Attribute $attr, Any $rw)␤:(Attribute $attr, Any $readonly)␤:(Routine $r, Any $rw)␤:(Routine $r, Any $default)␤:(Parame…

[21:08] <flussence> b: enum A is export <one two>;

[21:08] *** geekosaur joined
[21:08] <p6eval> b 1b7dd1: OUTPUT«Could not find sub &export␤  in main program body at line 22:/tmp/1lg1ozekm6␤»

[21:08] *** sorear joined
[21:08] <flussence> niecza: enum A is export <one two>;

[21:08] <p6eval> niecza v10-36-g241a2d8:  ( no output )

[21:09] *** preflex joined
[21:09] <flussence> doesn't work in rakudo?

[21:10] *** kaare_ left
[21:11] *** silug joined
[21:13] *** shinobicl joined
[21:15] *** HarryS joined
[21:15] *** HarryS left
[21:22] *** kmwallio left
[21:25] *** packetknife joined
[21:26] *** senobmeht left
[21:30] <masak> dobranatt, #perl6.

[21:30] *** masak left
[21:31] *** benabik left
[21:32] *** packetknife left
[21:32] *** athomason joined
[21:37] <im2ee> Dobranoc #perl6 ! :)

[21:38] *** im2ee left
[21:41] *** packetknife joined
[21:42] <dalek> std: 20ae3bd | larry++ | STD.pm6:

[21:42] <dalek> std: parse whitespace after loop {}, moritz++

[21:42] <dalek> std: review: https://github.com/perl6/std/commit/20ae3bdab5

[21:47] *** shinobicl left
[21:49] <colomon> niecza: enum A is export <one two>; say "Alive!" # member:flussence

[21:49] <p6eval> niecza v10-36-g241a2d8: OUTPUT«Alive!␤»

[21:53] <flussence> .oO( the more I work on Text::Wrap, the more it looks like a big ball of mud... )

[22:00] <flussence> perl6: say ('aaaaabaaaaa' ~~ /^(\N*) b/).perl;

[22:00] <p6eval> niecza v10-36-g241a2d8: OUTPUT«#<match from(0) to(6) text(aaaaab) pos([#<match from(0) to(5) text(aaaaa) pos([].list) named({}.hash)>].list) named({}.hash)>␤»

[22:00] <p6eval> ..rakudo 7823a4: OUTPUT«Match.perl(orig => "aaaaabaaaaa", from => 11, to => -3, ast => Mu, list => ().list, hash => EnumMap.new())␤»

[22:00] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.16/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped b…

[22:00] <flussence> b: say ('aaaaabaaaaa' ~~ /^(\N*) b/).perl;

[22:00] <p6eval> b 1b7dd1: OUTPUT«Match.new(␤ from => 0,␤ orig => "aaaaabaaaaa",␤ to   => 6,␤ positional => [␤   Match.new(␤    from => 0,␤    orig => "aaaaabaaaaa",␤    to   => 5,␤   ),␤  ],␤)␤»

[22:00] <flussence> nom: say ('aaaaabaaaaa' ~~ /^(\w*) b/).perl;

[22:00] <p6eval> nom 7823a4: OUTPUT«Match.perl(orig => "aaaaabaaaaa", from => 11, to => -3, ast => Mu, list => ().list, hash => EnumMap.new())␤»

[22:00] <flussence> nom: say ('aaaaabaaaaa' ~~ /^(a*) b/).perl;

[22:00] <p6eval> nom 7823a4: OUTPUT«Match.perl(orig => "aaaaabaaaaa", from => 0, to => 6, ast => Mu, list => (Match.perl(orig => "aaaaabaaaaa", from => 0, to => 5, ast => Mu, list => ().list, hash => EnumMap.new()),).list, hash => EnumMap.new())␤»

[22:01] <flussence> nom: say ('aaaaabaaaaa' ~~ /^(\S*) b/).perl;

[22:01] <p6eval> nom 7823a4: OUTPUT«Match.perl(orig => "aaaaabaaaaa", from => 11, to => -3, ast => Mu, list => ().list, hash => EnumMap.new())␤»

[22:01] <flussence> nom: say ('aaaaabaaaaa' ~~ /^(<[a..z]>*) b/).perl;

[22:01] <p6eval> nom 7823a4: OUTPUT«Match.perl(orig => "aaaaabaaaaa", from => 11, to => -3, ast => Mu, list => ().list, hash => EnumMap.new())␤»

[22:02] <flussence> hm. not sure how to work around that...

[22:03] *** S11001001 joined
[22:04] <sorear> hello S11001001

[22:04] <S11001001> sorear: greetings

[22:05] <sorear> 2011.10.02.18.01.59 -!- S11001001 [~sirian@c-71-232-60-227.hsd1.ma.comcast.net] has joined #perl6

[22:05] <sorear> 2011.10.02.18.18.32 < S11001001> moritz: I have a little nitpick for the perl6.org front page: "Using Perl 6" is not open source.

[22:05] <sorear> 2011.10.02.19.08.58 -!- S11001001 [~sirian@c-71-232-60-227.hsd1.ma.comcast.net] has quit [Quit: bye bye]

[22:05] <S11001001> aye

[22:05] <sorear> We couldn't figure out what you meant and you left too quickly for us to ask.  Don't do that please. :)

[22:06] <S11001001> sorry, was leaving coffeeshop where I said that

[22:07] <S11001001> anyway, I meant that by restricting commercial distribution, it doesn't meet the open source definition (point 1), nor the FSF free software definition or DFSG

[22:07] <S11001001> (the README states it is under by-nc-sa)

[22:08] <sorear> Moritz thought you were referring to non-free fonts

[22:09] <S11001001> that is also a problem, but probably not enough to prevent calling it open source

[22:10] *** sunnavy left
[22:10] *** athomason left
[22:11] <flussence> hm. not sure how to work around that...

[22:11] <flussence> ww

[22:11] *** ingy left
[22:12] <flussence> I'm getting better progress with niecza in Text-Tabs-Wrap right now... just need to figure out why unexpand() returns whitespace strings :(

[22:16] <flussence> «Unhandled Exception: Unable to resolve method ctxzyg in class Str»

[22:16] * flussence is slightly scared by that method name

[22:17] *** mikemol left
[22:18] *** bluescreen10 left
[22:18] *** bluescreen10 joined
[22:19] *** mikemol joined
[22:22] *** carlin joined
[22:24] <flussence> perl6: say ($_ for 1..4).perl;

[22:25] <p6eval> rakudo 7823a4: OUTPUT«(1, 2, 3, 4).list␤»

[22:25] <p6eval> ..niecza v10-36-g241a2d8: OUTPUT«Nil␤»

[22:25] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "for"␤    expecting operator or ")"␤    at /tmp/uN8Zepa9IR line 1, column 9␤»

[22:25] <flussence> sorear: ^ bug?

[22:26] *** bluescreen10 left
[22:30] *** mj41 left
[22:34] <sorear> flussence: NYI.

[22:34] <flussence> ah, ok then

[22:48] *** replore_ left
[22:48] *** envi_ joined
[23:00] *** rgrau left
[23:02] * snarkyboojum didn't realise that Using Perl 6 used an NC license

[23:05] *** sivoais joined
[23:08] *** mkramer1 joined
[23:10] *** mkramer left
[23:13] *** ingy joined
[23:13] *** sunnavy joined
[23:13] *** whiteknight joined
[23:14] *** jferrero left
[23:15] *** mikemol left
[23:15] *** mikemol joined
[23:18] <tadzik> good night #perl6

[23:20] <colomon> o/

[23:20] <sorear> bye tadzik

[23:22] *** icwiener left
[23:23] <tadzik> hey, but I just came in!

[23:23] <tadzik> :)

[23:23] <tadzik> it was just too late for 'good evening', I thought

[23:24] <snarkyboojum> laku noc!

[23:27] *** wamba left
[23:31] *** jlaire left
[23:33] *** aloha left
[23:34] *** aloha joined
[23:34] *** tokuhiro_ joined
[23:37] *** jlaire joined
[23:40] *** benabik joined
[23:44] *** envi_ left
[23:44] <dalek> niecza/serialize: 5239f11 | mberends++ | examples/gtk-webbrowser.pl:

[23:44] <dalek> niecza/serialize: Add a lightweight (text only) Gtk.HTML based web browser example

[23:44] <dalek> niecza/serialize: review: https://github.com/sorear/niecza/commit/5239f1160f

[23:44] <dalek> niecza/serialize: 241a2d8 | mberends++ | examples/gtk-tetris.pl:

[23:44] <dalek> niecza/serialize: refactoring - no functional changes

[23:44] <dalek> niecza/serialize: review: https://github.com/sorear/niecza/commit/241a2d8ce2

[23:44] <dalek> niecza/serialize: 68ddcb5 | sorear++ | / (9 files):

[23:44] <dalek> niecza/serialize: Merge branch 'master' of github.com:sorear/niecza into serialize

[23:44] <dalek> niecza/serialize: review: https://github.com/sorear/niecza/commit/68ddcb50e4

[23:44] <dalek> niecza/serialize: 297c615 | sorear++ | src/ (4 files):

[23:44] <dalek> niecza/serialize: mergeback src/niecza

[23:44] <dalek> niecza/serialize: review: https://github.com/sorear/niecza/commit/297c615808

[23:44] *** supernovus left
[23:48] *** cooper left
[23:50] *** packetknife left
[23:51] *** packetknife joined
[23:54] *** envi_ joined
[23:57] *** replore joined
