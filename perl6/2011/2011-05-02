[00:04] *** alester joined
[00:04] *** Moukeddar joined
[00:05] <Moukeddar> hello 

[00:06] *** Helios left
[00:08] *** Helios joined
[00:19] *** rgrau left
[00:42] *** revdiablo left
[00:43] *** revdiablo joined
[00:49] *** Moukeddar left
[00:55] *** Mowah left
[01:00] *** Chillance left
[01:01] *** Moukeddar joined
[01:12] *** bluescreen10 left
[01:15] *** uniejo_ joined
[01:15] *** uniejo_ left
[01:16] *** uniejo_ joined
[01:20] *** stepnem left
[01:23] *** Moukeddar left
[01:25] *** bluescreen10 joined
[01:31] *** stepnem joined
[01:35] *** Helios left
[01:37] *** am0c left
[01:39] *** Helios joined
[01:42] *** takesako joined
[01:43] *** revdiablo left
[01:43] *** orafu joined
[01:43] *** revdiablo joined
[01:43] *** revdiablo left
[01:43] *** revdiablo joined
[01:47] *** whiteknight left
[02:10] *** sbp left
[02:24] *** leprevost joined
[02:25] *** uniejo_ left
[02:49] *** woosley joined
[03:01] *** bluescreen10 left
[03:03] *** imamelia joined
[03:05] <imamelia> Well, I can think of two things that don't seem to be scheduled for inclusion in Perl 6 that don't seem to be directly available in Perl 5.x either...

[03:08] <TimToady> and if you were to mention them, what would you have said?  :)

[03:08] *** am0c joined
[03:09] <imamelia> Inline functions and constant variables.

[03:09] <imamelia> No doubt both can be done with modules or the like, but...

[03:09] <TimToady> any function may be inlined, it's up to the cmpiler

[03:09] <TimToady> we already have constants too

[03:09] <TimToady> but rakudo doesn't implement them yet

[03:10] <TimToady> niecza: constant pi = 3;  say pi

[03:10] <p6eval> niecza v4-76-g7bf5ef9: OUTPUT«3␤»

[03:10] <TimToady> you'll have to try harder :)

[03:11] <imamelia> Huh.

[03:11] <imamelia> I looked up both of those and didn't really find much...

[03:11] <imamelia> And if any function can be inlined, wouldn't that be arbitrary?

[03:12] <imamelia> I mean, couldn't something be inlined when it wasn't supposed to be or vice versa?

[03:13] <TimToady> re inlining, see S06:2788

[03:14] <imamelia> Also... [21:10] <TimToady> niecza: constant pi = 3;  say pi <-- As in barewords? That not only seems unsafe, it doesn't even work for me.

[03:14] <TimToady> there isn't much we haven't thought about in the last ten years, if only to say "we don't know enough yet, so let's just get close enough for later"

[03:14] <TimToady> that's not implemented in rakudo yet

[03:15] <TimToady> which is why I used niecza

[03:15] <TimToady> you can make it a variable if you want the sigil

[03:15] <TimToady> niecza: constant $lue = 42; $lue++  # I wonder if niecza checks this yet?

[03:15] <p6eval> niecza v4-76-g7bf5ef9: OUTPUT«Unhandled exception: Writing to readonly scalar␤  at /tmp/shDSaanZA7 line 0 (MAIN mainline @ 0)␤  at /home/p6eval/niecza/lib/CORE.setting line 1311 (CORE C552_ANON @ 2)␤  at /home/p6eval/niecza/lib/CORE.setting line 1312 (CORE module-CORE @ 39)␤  at

[03:15] <p6eval> ../home/p6eval/niecza/lib/CORE.set…

[03:16] <TimToady> yup

[03:16] <imamelia> So you couldn't add a my or our?...

[03:17] <TimToady> no, "constant" is a declarator in the same syntactic slot as my or our

[03:17] <TimToady> you can make readonly variables 'my' or 'our'

[03:17] <TimToady> but that's different

[03:17] <TimToady> these are compile-time constants

[03:17] <TimToady> so can be constant folded, for instance

[03:17] <imamelia> Well, constant $x gives me a warning message.

[03:17] <TimToady> in what?

[03:17] <imamelia> constant $zzzz = 42;

[03:17] <imamelia> print $zzzz;

[03:18] <TimToady> in rakudo?

[03:18] <imamelia> In Perl 5.

[03:18] <TimToady> um, this is #perl6, not #perl5

[03:18] <imamelia> Yes, but...you're saying that constants are supported in Perl 6 but not Perl 5?

[03:19] <TimToady> we aren't trying to fix Perl 5 here *at all*

[03:19] <TimToady> the whole point of Perl 6 was to break compatibility with Perl 5

[03:19] <TimToady> anything Perl 5 chooses to borrow back is up to the Perl 5 community

[03:19] <imamelia> So constants will be available, then, just not yet.

[03:19] <TimToady> and they already have 'use constant' so they won't

[03:20] *** cotto joined
[03:20] <imamelia> Also, S06:2788...?

[03:20] <TimToady> um, you seem to be confused about the fact that the language spec has little to do with the individual implementations

[03:20] <TimToady> some implementations implement some parts, others don't

[03:21] <TimToady> goto http://irclog.perlgeek.de/perl6/today and that will be highlighted with a link into the specs

[03:23] <TimToady> down toward the end, where you'll see our conversation

[03:23] <imamelia> I see...

[03:25] * Khisanth thinks trying to learn Perl 5 and Perl 6 at the same time would be a terrible idea

[03:25] * TimToady learned p5 first...

[03:26] <Khisanth> in more ways than one :P

[03:26] <Khisanth> but does it count if you are the one inventing it?

[03:26] <TimToady> even Tolkien merely "discovered" Middle Earth :)

[03:27] *** Su-Shee left
[03:28] *** Su-Shee joined
[03:31] *** simcop2387 left
[03:31] *** simcop2387 joined
[03:34] <sorear> 20:17 < TimToady> no, "constant" is a declarator in the same syntactic slot as  my or our

[03:35] <sorear> this is inconsistent with STD's current behavior and the currently spec setting

[03:35] <sorear> std: package Foo { our constant bar = 5; }; say Foo::bar

[03:35] <p6eval> std 9f27365: OUTPUT«Can't locate YAML/XS.pm in @INC (@INC contains: /home/p6eval/perl5/perlbrew/perls/perl-5.12.2/lib/site_perl/5.12.2/x86_64-linux /home/p6eval/perl5/perlbrew/perls/perl-5.12.2/lib/site_perl/5.12.2 /home/p6eval/perl5/perlbrew/perls/perl-5.12.2/lib/5.12.2/x86_64-linux

[03:35] <p6eval> ../home/p6eval/perl…

[03:35] <sorear> niecza: package Foo { our constant bar = 5; }; say Foo::bar # hey where'd STD go...

[03:36] <p6eval> niecza v4-76-g7bf5ef9: OUTPUT«5␤»

[03:36] <TimToady> hmm, maybe it's really in the "sub" slot now...

[03:36] <sorear> it's parsed as a type_declarator

[03:37] <TimToady> right

[03:37] <TimToady> but it's still compile-time, like a type declaration

[03:38] * TimToady is occasionally confused as well... :/

[03:38] <TimToady> and like other type declartion declares "bare" words, not listops

[03:39] <TimToady> I'd forgotten that it was no longer a scope declarator...

[03:39] * TimToady apologies for lying to imamelia...

[03:39] *** jimmy1980 joined
[03:41] *** leprevost left
[03:44] *** hudnix left
[03:45] *** araujo left
[03:46] *** leprevost joined
[03:47] *** leprevost left
[03:48] *** hudnix joined
[03:53] *** alester left
[03:58] *** am0c left
[03:58] *** am0c joined
[04:23] *** molaf joined
[04:36] <diakopter> moritz: hi

[04:38] *** molaf left
[04:41] *** hudnix left
[04:59] *** Axius joined
[05:18] *** Axius left
[05:26] *** kst joined
[05:48] *** imamelia left
[05:54] *** jaldhar left
[05:54] *** jaldhar joined
[05:58] *** wtw joined
[05:58] *** kaare_ joined
[06:00] *** justatheory left
[06:02] *** Helios left
[06:03] *** Helios joined
[06:04] <moritz> diakopter: good morning

[06:07] <moritz> std: package Foo { our constant bar = 5; }; say Foo::bar

[06:07] <p6eval> std 9f27365: OUTPUT«Can't locate File/ShareDir.pm in @INC (@INC contains: /home/p6eval/perl5/perlbrew/perls/perl-5.12.2/lib/site_perl/5.12.2/x86_64-linux /home/p6eval/perl5/perlbrew/perls/perl-5.12.2/lib/site_perl/5.12.2 /home/p6eval/perl5/perlbrew/perls/perl-5.12.2/lib/5.12.2/x86_64-linux

[06:07] <p6eval> ../home/p6eva…

[06:08] <moritz> std: package Foo { our constant bar = 5; }; say Foo::bar

[06:08] <p6eval> std 9f27365: OUTPUT«ok 00:01 114m␤»

[06:23] *** birdwindupbird joined
[06:32] *** mtk left
[06:33] *** drbean joined
[06:38] *** drbean left
[06:39] *** drbean joined
[06:40] <sorear> moritz++

[06:41] *** mtk joined
[06:45] *** drbean left
[06:45] *** mj41 joined
[06:45] *** woosley left
[06:45] *** drbean joined
[06:49] <mathw> mathw: yes, it was my birthday yesterday

[06:49] <mathw> woops

[06:50] <mathw> phenny: tell masak yes, it was my birthday yesterday

[06:50] <phenny> mathw: I'll pass that on when masak is around.

[06:50] <mathw> Trashlord: yes, it was my birthday yesterday, and it was indeed the first of may.

[06:50] *** drbean left
[06:52] <moritz> mathw++

[06:52] <moritz> erm, mathw.age++

[06:52] <moritz> whatever :-)

[06:53] <mathw> :)

[06:53] <mathw> well really I'm only one day older than I was the day before

[06:54] <mathw> it's just that the year counter has flipped over as well

[06:54] <moritz> it's just that the earth has finished an integer number of rounds around the sun, counting from your birth

[06:55] <mathw> approximately

[06:55] <mathw> I doubt it maps precisely

[06:55] <mathw> although they do occasionally adjust the length of the year

[06:55] <moritz> it's 365.24<something> days

[06:56] <jnthn> morning o/

[06:57] <mathw> lo jnthn

[06:59] *** dju__ is now known as dju

[07:10] *** kcwu left
[07:10] *** kcwu joined
[07:11] *** SHODAN joined
[07:21] *** Mowah joined
[07:46] *** Mowah left
[08:13] *** wamba joined
[08:19] *** bbkr_ left
[08:20] *** bbkr_ joined
[08:24] *** tzhs joined
[08:27] *** nymacro joined
[08:30] *** starcoder is now known as |starcder|

[08:30] *** |starcder| is now known as |starcoder|

[08:31] *** |starcoder| is now known as starcoder

[08:31] <tadzik> star: use Benchmark

[08:31] *** p6eval left
[08:31] *** Mowah joined
[08:31] <tadzik> no star? :(

[08:32] *** starcoder is now known as |starcoder|

[08:32] *** robinsmidsrod left
[08:32] <moritz> I haven't installed the new star on p6eval anyway

[08:32] *** p6eval joined
[08:32] *** ChanServ sets mode: +v p6eval

[08:32] *** robins joined
[08:32] * moritz puts it on his TODO list

[08:33] * am0c hugs new p6eval 

[08:33] *** birdwindupbird left
[08:36] <tadzik> who else does not like the new layout of search.cpan.org?

[08:36] *** IllvilJa joined
[08:37] <moritz> there's a new layout?

[08:38] <tadzik> I hope it's just a broken CSS on my side then

[08:38] *** |starcoder| is now known as starcoder

[08:38] <mathw> looks the same as always here

[08:38] <tadzik> http://i.imgur.com/v7uwU.png

[08:39] <tadzik> looks like a missing css

[08:39] <moritz> aye

[08:39] <tadzik> fine then

[08:39] <moritz> try Ctrl+Shift+r

[08:40] <tadzik> I reopened a tab and it's ok now

[08:40] <tadzik> I've seen the same thing yesterday, hence my doubt. But whatever, it looks fine now

[08:40] <mathw> interesting

[08:41] *** Helios left
[08:41] *** birdwindupbird joined
[08:41] *** Helios joined
[08:44] <tadzik> for big enough files, the new .comb() is much faster than the old one (about 10 times faster for src/pmc/p6role.c)

[08:45] <jnthn> yay :)

[08:46] <moritz> fwiw the new star now compiles on the p6eval host

[08:46] <tadzik> not much different for the small ones, 7x faster for pmc/perl6scalar.pmc

[08:46] <moritz> I don't know who or what deleted the old one (might have been me :/)

[08:46] <tadzik> PerlJam++ # Benchmark.pm6

[08:47] <tadzik> moritz: how many bugs did we close yesterday?

[08:47] <moritz> tadzik: 4 or 5

[08:48] <moritz> the answer, my friend, is blowing in the backlog

[08:48] * tadzik plays the recorder

[08:49] <tadzik> huh, that melody is actually quite easy :) I'm just lacking the style of ol' Bob Dylan

[08:50] <moritz> as long as you have the style of Joan Baez ... :-)

[08:52] <dalek> evalbot: 26bef83 | moritz++ | evalbot.pl:

[08:52] <dalek> evalbot: [star] fix path to new release

[08:52] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/26bef83d98

[08:52] <tadzik> Ticket 85602: Permission Denied

[08:52] <tadzik> http://rt.perl.org/rt3/Ticket/Display.html?id=85602 closable though

[08:53] <moritz> evalbot control restart

[08:53] *** p6eval left
[08:53] *** p6eval joined
[08:53] *** ChanServ sets mode: +v p6eval

[08:54] <dalek> evalbot: 9e43d8c | moritz++ | evalbot.pl:

[08:54] <dalek> evalbot: typo

[08:54] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/9e43d8c537

[08:54] <moritz> tadzik: when was the faster .comb added?

[08:55] <moritz> ah

[08:55] <moritz> nm

[08:55] *** pmurias left
[08:56] <tadzik> http://rt.perl.org/rt3/Ticket/Display.html?id=62244 -- what SQLite3 is that related to?

[08:59] <tadzik> http://rt.perl.org/rt3/Ticket/Display.html?id=63584 -- isn't that closable?

[09:02] <moritz> tadzik: don't think so

[09:02] <moritz> tadzik: rakudo should build fine with two perls, and always use the one with which Configure.pl was invoked

[09:03] <tadzik> mhm

[09:04] *** robins is now known as robinsmidsrod

[09:06] <moritz> I just don't see why it shouldn't work

[09:06] <moritz> because all the scripts in build/ use $^X consistently, and Makefile contains absolute paths to perl

[09:23] <tadzik> http://rt.perl.org/rt3/Ticket/Display.html?id=66576 seems wrong. The bug is about .name, the test tests .key, and where is it speced anyway?

[09:24] *** donri joined
[09:25] <tadzik> the only specs I see for Bool are http://perlcabal.org/syn/S32/Numeric.html#Bool

[09:25] <moritz> Bool is an enum

[09:25] <moritz> enums are in S12

[09:26] <moritz> and yes, it seems that .name has been re*name*d to .key :-)

[09:26] <moritz> rakudo: say True.name

[09:26] <p6eval> rakudo 6ca614: OUTPUT«Method 'name' not found for invocant of class 'Bool'␤  in main program body at line 22:/tmp/Iyzig97SbW␤»

[09:26] <moritz> rakudo: say True.key

[09:26] <p6eval> rakudo 6ca614: OUTPUT«Method 'key' not found for invocant of class 'Bool'␤  in main program body at line 22:/tmp/az8HdnzgLJ␤»

[09:27] <moritz> rakudo: enum A <b c>; say c.key

[09:27] <p6eval> rakudo 6ca614: OUTPUT«c␤»

[09:27] <moritz> so, Bool still needs fixing

[09:27] <tadzik> rakudo: use MONKEY_TYPING; augment class Bool { method key() { self.Stringy } }; True.key

[09:27] <p6eval> rakudo 6ca614:  ( no output )

[09:27] <tadzik> rakudo: use MONKEY_TYPING; augment class Bool { method key() { self.Stringy } }; True.key.say

[09:27] <p6eval> rakudo 6ca614: OUTPUT«True␤»

[09:28] <moritz> +1 to putting that into core

[09:28] <tadzik> we have to wait for my `make` :)

[09:29] <tadzik> rakudo: say .Int.perl for True, False

[09:29] <p6eval> rakudo 6ca614: OUTPUT«1␤0␤»

[09:29] <tadzik> http://rt.perl.org/rt3/Ticket/Display.html?id=76446 is fixed then, I'll add a spectest for that

[09:30] <tadzik> niecza: True.Int.say

[09:30] <p6eval> niecza v4-76-g7bf5ef9: OUTPUT«Unhandled exception: Unable to resolve method Int in class Bool␤  at /tmp/qVAoHSRxBq line 1 (MAIN mainline @ 1)␤  at /home/p6eval/niecza/lib/CORE.setting line 1311 (CORE C552_ANON @ 2)␤  at /home/p6eval/niecza/lib/CORE.setting line 1312 (CORE module-CORE @ 39)␤  at

[09:30] <p6eval> ../home/p6eval/nie…

[09:30] <tadzik> so I should add a skip() for niecza?

[09:30] <moritz> that would be friendly, yes

[09:30] <moritz> at least if niecza runs the test file at all

[09:31] <moritz> (see its t/spectest.data)

[09:31] <tadzik> S02-builtin_data_types/bool.t has some #niecza skip

[09:32] * tadzik wonders if "Intify" is right, or just -Ofun

[09:32] * moritz has actually used it

[09:33] <dalek> roast: 139f600 | tadzik++ | S02-builtin_data_types/bool.t:

[09:33] <dalek> roast: Add tests for RT #76446

[09:33] <dalek> roast: review: https://github.com/perl6/roast/commit/139f600ddc

[09:35] <moritz> ticket closed

[09:35] <moritz> tadzik++

[09:35] <tadzik> hey, I haven't commented yet! :)

[09:35] <tadzik> I'm slow :)

[09:36] <tadzik> t/spec/S02-builtin_data_types/bool.rakudo ...................... All 45 subtests passed 

[09:36] <tadzik> (less 2 skipped subtests: 43 okay)

[09:36] *** rhebus joined
[09:38] *** Trashlord left
[09:39] <tadzik> wakey wakey dalek

[09:40] <dalek> rakudo: 5e81848 | tadzik++ | src/core/Bool.pm:

[09:40] <dalek> rakudo: Add Bool.key, fixes RT #66576

[09:40] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/5e81848ad0

[09:41] <tadzik> moritz: http://rt.perl.org/rt3/Ticket/Display.html?id=66576 can be closed

[09:41] <tadzik> rakudo: my $x = class C { }; say $x.WHAT

[09:41] <p6eval> rakudo 6ca614: OUTPUT«Code()␤»

[09:42] <tadzik> rakudo: class A { proto method b {}; has $.b }

[09:42] <p6eval> rakudo 6ca614: OUTPUT«===SORRY!===␤A method named 'b' already exists in class 'A'. It may have been supplied by a role.␤»

[09:42] <tadzik> rakudo: if()

[09:42] <moritz> tadzik: are the tests corrected to use .key?

[09:42] <p6eval> rakudo 6ca614: OUTPUT«Could not find sub &if␤  in main program body at line 22:/tmp/CExmcu3ZXO␤»

[09:43] <tadzik> moritz: oh, not yet, fixing that

[09:43] <tadzik> fixed-faxed

[09:43] <dalek> roast: 4cf4f7f | tadzik++ | S02-builtin_data_types/bool.t:

[09:43] <dalek> roast: Unskip tests for Bool.key

[09:43] <dalek> roast: review: https://github.com/perl6/roast/commit/4cf4f7f8b7

[09:43] * moritz closes the ticket

[09:44] <tadzik> std: if()

[09:44] <p6eval> std 9f27365: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤ 'if' used at line 1␤Check failed␤FAILED 00:01 112m␤»

[09:44] <tadzik> good enough then

[09:46] <tadzik> moritz: mind closing http://rt.perl.org/rt3/Ticket/Display.html?id=76358 ?

[09:46] *** birdwindupbird left
[09:47] <moritz> std: if(3) { say 3 }

[09:47] <p6eval> std 9f27365: OUTPUT«[31m===[0mSORRY![31m===[0m␤Word 'if' interpreted as 'if()' function call; please use whitespace instead of parens at /tmp/eGdQeoWrGF line 1:␤------> [32mif[33m⏏[31m(3) { say 3 }[0m␤Unexpected block in infix position (two terms in a row) at /tmp/eGdQeoWrGF line 1:␤------>

[09:47] <p6eval> ..[…

[09:47] <moritz> rakudo: if(3) { say 3 }

[09:47] <p6eval> rakudo 6ca614: OUTPUT«===SORRY!===␤Confused at line 22, near "if(3) { sa"␤»

[09:47] <moritz> that's the warning the ticket wants

[09:48] <tadzik> oic

[09:49] <tadzik> rakudo: IO.WHAT.say

[09:49] <p6eval> rakudo 6ca614:  ( no output )

[09:51] *** nsh joined
[09:51] *** sbp joined
[09:52] *** sbp left
[09:53] <tadzik> moritz: care to take a look at http://rt.perl.org/rt3/Ticket/Display.html?id=67808 ?

[09:53] *** sbp joined
[09:55] <moritz> rakudo: my $x; $x + 1

[09:55] <p6eval> rakudo 6ca614: OUTPUT«Use of uninitialized value in numeric context  in <anon> at line 22:/tmp/qTSFIXEhVP␤»

[09:57] * moritz replies and resolves

[09:59] *** birdwindupbird joined
[10:01] <tadzik> rakudo: use MONKEY_TYPING; my $d = ”; augment class Str { method  some_meth_1 {$d = $d ~ self;}}; for '0' .. '5' { .WHAT.say; sub; };

[10:01] <p6eval> rakudo 6ca614: OUTPUT«===SORRY!===␤Confused at line 22, near "my $d = \u201d;"␤»

[10:01] <tadzik> rakudo: use MONKEY_TYPING; my $d = ''; augment class Str { method  some_meth_1 {$d = $d ~ self;}}; for '0' .. '5' { .WHAT.say; sub; };

[10:01] <p6eval> rakudo 6ca614: OUTPUT«Null PMC access in getprop()␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/a2FPmWoixj␤»

[10:01] <tadzik> rakudo: use MONKEY_TYPING; augment class Hash { method hi { say 'hi' } }; my %h; %h.hi;

[10:01] <p6eval> rakudo 6ca614: OUTPUT«Method 'hi' not found for invocant of class ''␤  in main program body at line 22:/tmp/dGKFxWJ56q␤»

[10:02] <moritz> rakudo: say Hash.HOW

[10:02] <p6eval> rakudo 6ca614:  ( no output )

[10:02] <tadzik> rakudo: my $condition = "perfect";  say $condition ?? "True" :: "False";

[10:02] <p6eval> rakudo 6ca614: OUTPUT«===SORRY!===␤Please use !! rather than :: at line 22, near ":: \"False\""␤»

[10:02] <moritz> rakudo: say Hash.HOW.PARROT

[10:02] <p6eval> rakudo 6ca614: OUTPUT«RoleHOW␤»

[10:02] <moritz> tadzik: Hash is a role in rakudo

[10:02] <tadzik> std: my $condition = "perfect";  say $condition ?? "True" :: "False";

[10:02] <p6eval> std 9f27365: OUTPUT«[31m===[0mSORRY![31m===[0m␤Please use !! rather than :: at /tmp/DtIIuqUDKd line 1:␤------> [32m= "perfect";  say $condition ?? "True" :[33m⏏[31m: "False";[0m␤    expecting any of:␤        coloncircumfix␤ signature␤Parse failed␤FAILED 00:01 116m␤»

[10:02] <jnthn> That'll probably change in rakudo/nom

[10:02] <moritz> tadzik: which is why monkey-typing doesn't work

[10:02] <jnthn> It's sucky having Array as a class and Hash as a role

[10:03] *** [Coke] left
[10:03] <tadzik> moritz: I think http://rt.perl.org/rt3/Ticket/Display.html?id=76926 can be fixed

[10:04] *** PacoLinux left
[10:05] * moritz closes

[10:05] <tadzik> rakudo: say <>

[10:05] <p6eval> rakudo 6ca614: OUTPUT«===SORRY!===␤Unsupported use of <>; in Perl 6 please use lines() to read input, ('') to represent a null string or () to represent an empty list at line 22, near "<>"␤»

[10:05] <tadzik> std: say <>

[10:05] <p6eval> std 9f27365: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of <>; in Perl 6 please use lines() to read input,␤  or ('') to represent the null string,␤  or () to represent Nil at /tmp/1ylV5dV49b line 1:␤------> [32msay <[33m⏏[31m>[0m␤Parse failed␤FAILED 00:01 112m␤»

[10:05] *** [Coke] joined
[10:05] <tadzik> moritz: I think http://rt.perl.org/rt3/Ticket/Display.html?id=77568 was applied, but not closed

[10:06] <moritz> indeed

[10:06] <moritz> tadzik++

[10:07] <moritz> and moritz-- for not closing it earlier

[10:08] <tadzik> one more ticket and we're down to 850 :)

[10:08] <moritz> :-)

[10:08] <moritz> karma tadzik 

[10:08] <aloha> tadzik has karma of 248.

[10:08] <tadzik> rakudo: my @a := 1; say @a ~~ Positional

[10:08] <p6eval> rakudo 6ca614: OUTPUT«Bool::False␤»

[10:09] <moritz> the bind should typecheck-fail

[10:09] <tadzik> rakudo: ~[]<c>

[10:09] <p6eval> rakudo 6ca614: OUTPUT«postcircumfix:<{ }> not defined for type Array()␤  in main program body at line 1␤»

[10:09] <tadzik> moritz: yeah, that's your ticket :)

[10:09] <moritz> :-)

[10:09] <moritz> everybody look, it's a non-masak ticket!

[10:09] <tadzik> moritz: http://rt.perl.org/rt3/Ticket/Display.html?id=77504 seems fine

[10:10] <tadzik> rakudo: grammar A { token TOP { <any> }; token any { 'foo' | 'bar' } }; say A.parse('foo')

[10:10] <p6eval> rakudo 6ca614: OUTPUT«Too many positional parameters passed; got 2 but expected 1␤  in 'Any::any' at line 1499:CORE.setting␤  in 'A::any' at line 22:/tmp/8wRtYsUcEz␤  in 'A::TOP' at line 22:/tmp/8wRtYsUcEz␤  in 'Grammar::parse' at line 6408:CORE.setting␤  in main program body at line

[10:10] <p6eval> ..22:/tmp/8wRtYsUcEz␤»

[10:10] <moritz> what's the problem here? the name 'any'?

[10:11] <tadzik> yeah

[10:11] <tadzik> Found 850 tickets \o/

[10:11] <tadzik> I wonder if I can implement use lib

[10:12] <moritz> tadzik: once you get 'use Foo <import list>' working, lib.pm will be a breeze

[10:13] <moritz> rakudo: use Test <plan>;

[10:13] <p6eval> rakudo 6ca614: OUTPUT«===SORRY!===␤Confused at line 22, near "use Test <"␤»

[10:13] <tadzik> parsing is the first step

[10:13] <moritz> .oO( can I say "good luck" without having it sound ironic or discouraging? )

[10:13] <moritz> maybe it's a straight-forward port from STD

[10:14] <moritz> std: use Test <plan ok>;

[10:14] <tadzik> rakudo: use Foo 1.23;

[10:14] <p6eval> rakudo 6ca614: OUTPUT«===SORRY!===␤Unable to find module 'Foo' in the @*INC directories.␤(@*INC contains:␤  lib␤  /home/p6eval/.perl6/lib␤  /home/p6eval//p1/lib/parrot/3.3.0-devel/languages/perl6/lib␤  .)␤»

[10:14] <p6eval> std 9f27365: OUTPUT«Compiled lib/Test.pm6␤ok 00:01 115m␤»

[10:14] <tadzik> okay..

[10:14] <tadzik> rakudo: use Foo ('ars')

[10:14] <p6eval> rakudo 6ca614: OUTPUT«===SORRY!===␤Unable to find module 'Foo' in the @*INC directories.␤(@*INC contains:␤  lib␤  /home/p6eval/.perl6/lib␤  /home/p6eval//p1/lib/parrot/3.3.0-devel/languages/perl6/lib␤  .)␤»

[10:14] <tadzik> hmmm

[10:15] <tadzik> rakudo: use Devel::Trace ('ars')

[10:15] <p6eval> rakudo 6ca614: OUTPUT«===SORRY!===␤Confused at line 22, near "use Devel:"␤»

[10:15] <moritz> star: use Benchmark;

[10:15] <p6eval> star 2011.04: OUTPUT«===SORRY!===␤Unable to find module 'Benchmark' in the @*INC directories.␤(@*INC contains:␤  /home/p6eval/.perl6/lib␤  /home/p6eval/rakudo-star-2011.04/install/lib/parrot/3.3.0/languages/perl6/lib␤  .)␤»

[10:15] <moritz> star: use SVG;

[10:15] <p6eval> star 2011.04:  ( no output )

[10:16] <tadzik> rakudo: Perl6::Grammar.parse("('ars')", :rule<arglist>);

[10:16] <p6eval> rakudo 6ca614:  ( no output )

[10:16] <moritz> star: use SVG; say SVG.serialize('svg' => [ circle => [ radius => 1, cx => 2, cy = 4 ] ]);

[10:16] <p6eval> star 2011.04: OUTPUT«Could not find sub &cy␤  in main program body at line 22:/tmp/v235e2VKxY␤»

[10:16] <moritz> star: use SVG; say SVG.serialize('svg' => [ circle => [ radius => 1, cx => 2, cy => 4 ] ]);

[10:17] <p6eval> star 2011.04: OUTPUT«<svg xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><circle radius="1" cx="2" cy="4" /></svg>␤␤»

[10:17] <moritz> rakudo: say Perl6::Grammar.parse("('ars')", :rule<arglist>);

[10:17] <tadzik> Grammar looks wrongish

[10:17] <p6eval> rakudo 6ca614: OUTPUT«('ars')␤»

[10:17] <tadzik> token module_name { <longname> [ <?before '['> '[' ~ ']' <arglist> ]? }

[10:17] <tadzik> and

[10:18] <moritz> rakudo: use Devel::Trace ['foo'];

[10:18] <p6eval> rakudo 6ca614: OUTPUT«===SORRY!===␤Confused at line 22, near "use Devel:"␤»

[10:18] <tadzik> token statement_control:sym<use> { <sym> <.ws> [ | <version> | <module_name> [ <.spacey> <arglist> ]? ] <.ws> }

[10:18] <moritz> rakudo: use Devel::Trace['foo'];

[10:18] <tadzik> so <arglist> is there twice, no?

[10:18] <p6eval> rakudo 6ca614: OUTPUT«===SORRY!===␤Unable to find module 'Devel::Trace' in the @*INC directories.␤(@*INC contains:␤  lib␤  /home/p6eval/.perl6/lib␤  /home/p6eval//p1/lib/parrot/3.3.0-devel/languages/perl6/lib␤  .)␤»

[10:18] <moritz> tadzik: the arglist in module_name is for things inside brackets

[10:18] <moritz> tadzik: like Foo::Bar['baz']

[10:19] <moritz> I have no idea what that means, but it parses :-)

[10:19] <tadzik> :)

[10:19] <moritz> std: use Test['foo'];

[10:19] <p6eval> std 9f27365: OUTPUT«ok 00:01 113m␤»

[10:19] <tadzik> looks like a submodule

[10:19] <moritz> fact is that the <.spacey> <argilst>  doesn't seem to match anything

[10:19] <tadzik> anyway, looking at statement_control:sym<use>... exactly

[10:21] <moritz> rakudo: say so Perl6::Grammar.parse(' ', :rule<spacey>)

[10:21] <p6eval> rakudo 6ca614: OUTPUT«Bool::False␤»

[10:22] <tadzik> uh-oh

[10:23] <tadzik> rakudo: say so Perl6::Grammar.parse('', :rule<spacey>)

[10:23] <p6eval> rakudo 6ca614: OUTPUT«Bool::False␤»

[10:23] <tadzik> rakudo: say so Perl6::Grammar.parse('  ', :rule<spacey>)

[10:23] <p6eval> rakudo 6ca614: OUTPUT«Bool::False␤»

[10:24] <tadzik> <?before <[ \s \# ]> > it is

[10:25] <moritz> ah

[10:25] <moritz> and rakudo doesn't understand backslash sequences in char classes

[10:25] <moritz> changing it to <?before [\s | '#']>  should fix it

[10:27] <tadzik> spacey is used only as <.spacey> anyway

[10:28] <moritz> tadzik: will you fix it, or should I?

[10:28] <tadzik> moritz: compiling

[10:29] <moritz> tadzik: time for some fencing, eh? :-)

[10:29] * moritz refers to http://xkcd.com/303/

[10:29] <tadzik> moritz: yeah, I sometimes think that if jnthn++ wouldn't make it with splitting compilation in Rakudo til the GSoC time, my main activity will be waiting :)

[10:29] <tadzik> moritz: yeah, I know :)

[10:30] <moritz> tadzik: that's why you should be developing as much of the parser as possible outside of Grammar.pm

[10:30] <tadzik> yeah, I know

[10:30] <jnthn> tadzik: I'm still not convinced splitting is possible/ideal. The better improvement is to make compilation fast enough to not be a bother.

[10:30] <tadzik> moritz: http://rt.perl.org/rt3/Ticket/Display.html?id=77412 what does this one actually do?

[10:30] <tadzik> jnthn :)

[10:31] <tadzik> I think sqlite3 doesn't bother, and they just have a single sqlite3.c file

[10:31] <jnthn> The build process will almost certainly be changing drastically though.

[10:31] <jnthn> e.g. we won't build a stage 1 compiler, and then a setting, and then bundle them into one perl6.pbc

[10:32] <jnthn> We'll just build a perl6 and then use it with like perl6 --setting=NULL src/gen/CORE.setting or some such

[10:32] <jnthn> To build the setting. Then future usages just expect the setting to be there.

[10:32] <tadzik> nice

[10:33] <tadzik> jnthn: does your work improve the quality of the generated pir anyhow?

[10:33] <jnthn> So if you re-build the setting the only thing that will need to be re-compiled is the setting.

[10:33] *** pnu left
[10:33] <jnthn> tadzik: Kinda, in places. We'll have a LOAD less :load :init methods.

[10:33] <jnthn> s/methods/subs/

[10:33] <tadzik> so a higher startup times?

[10:34] <jnthn> ?

[10:34] <jnthn> *less* :)

[10:34] <tadzik> bleh, lower

[10:34] <jnthn> yes, that's the aim :)

[10:34] *** woosley joined
[10:35] <tadzik> moritz: http://nopaste.snit.ch/43109 I don't think that helped

[10:35] *** birdwindupbird left
[10:35] <jnthn> It's basically the halp way stage between where we are now and full-blown serialization

[10:35] <jnthn> *half

[10:35] <tadzik> oh noes!

[10:36] <tadzik> I should've copypasted :)

[10:37] <tadzik> time to slack of again :0

[10:37] <tadzik> :)

[10:37] <tadzik> nqp: class A {}; A.foo

[10:37] <p6eval> nqp: OUTPUT«sh: ./nqp: not found␤»

[10:38] <tadzik> whoa, that's so fast! oh wait...

[10:38] <tadzik> > class A {}; A.foo

[10:38] <tadzik> Method 'foo' not found for invocant of class 'SixModelObject'

[10:38] <tadzik> jnthn: nqpbug?

[10:39] <jnthn> tadzik: In the error reporting?

[10:39] <jnthn> Yes, it's LTA

[10:39] <cognominal> jnthn, hi. Do you know if you will be able to talk at fpw?

[10:40] * tadzik submits nqpbug

[10:40] <jnthn> cognominal: Not sure off hand. If I can, it'd be on the Saturday - I know I've gotta teach a class here in Sweden on the Thu/Fri of that week.

[10:40] <jnthn> cognominal: Tough to fit everything in that month, with NPW going on too...

[10:40] <cognominal> I thought so

[10:41] <jnthn> cognominal: I'll have a look if there's a Friday evening flight to Paris from where I'm teaching. If so, maybe I cna come and speak on the Saturday.

[10:41] <jnthn> *can

[10:42] <cognominal> your are welcome, as always....

[10:42] <cognominal> mberends will give talks on Perl 6 Saturday too

[10:43] <tadzik> rakudo: ????????????????????????????????????????????????????????

[10:43] <p6eval> rakudo 5e8184: OUTPUT«===SORRY!===␤Found ?? but no !! at line 22, near "???"␤»

[10:43] <tadzik> moritz: http://rt.perl.org/rt3/Ticket/Display.html?id=72868 seems fixed

[10:44] *** PacoLinux joined
[10:44] <cognominal> jnthn, you will have finished your current  stuff on nqp/rakudo, So things should be exciting by then

[10:44] <tadzik> std:  @a = (1,2,3,4); @a.>>.say

[10:44] <p6eval> std 9f27365: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable @a is not predeclared at /tmp/FYfJAo9EII line 1:␤------> [32m@a[33m⏏[31m = (1,2,3,4); @a.>>.say[0m␤Variable @a is not predeclared at /tmp/FYfJAo9EII line 1:␤------> [32m@a = (1,2,3,4); @a[33m⏏[31m.>>.say[0m␤Check failed␤FAILED

[10:44] <p6eval> ..00:01 1…

[10:44] <tadzik> std: my  @a = (1,2,3,4); @a.>>.say

[10:44] <p6eval> std 9f27365: OUTPUT«ok 00:01 117m␤»

[10:44] <tadzik> is » a method of some sort?

[10:45] <tadzik> moritz: huge success!

[10:45] <tadzik> > use Test :plan(1)

[10:45] <tadzik> _block85

[10:45] *** pnu joined
[10:45] <tadzik> rakudo: use Test :plan(1)

[10:45] <p6eval> rakudo 5e8184: OUTPUT«===SORRY!===␤Confused at line 22, near "use Test :"␤»

[10:46] <tadzik> now to delegate this somewhere

[10:48] <tadzik> when is import() called?

[10:49] <jnthn> cognominal: Will look into the flights

[10:49] * jnthn -> office &

[10:53] <tadzik> http://nopaste.snit.ch/43110 -- shouldn't this call import()?

[10:54] *** birdwindupbird joined
[10:58] <dalek> rakudo: 5c6fe02 | tadzik++ | src/Perl6/Grammar.pm:

[10:58] <dalek> rakudo: Fix parsing module import lists, moritz++

[10:58] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/5c6fe02a82

[11:00] <tadzik> moritz: http://rt.perl.org/rt3/Ticket/Display.html?id=77024 and http://rt.perl.org/rt3/Ticket/Display.html?id=77790 should probably be merged

[11:02] *** sjn joined
[11:05] *** wamba left
[11:11] *** birdwindupbird left
[11:27] *** tzhs left
[11:27] *** Moukeddar joined
[11:28] *** jaldhar left
[11:32] *** jaldhar joined
[11:33] <moritz> tadzik: closed ????? parsing bug, merged the misreported double colons

[11:33] <moritz> tadzik++

[11:34] <moritz> tadzik: just a wee formality regarding gsoc: is it ok if we do the regular status updates as part of #phasers?

[11:34] <tadzik> moritz: of course

[11:35] <moritz> tadzik: rafl++, or org mentor, also wants weekly status reports to the -students mailing list... so you can either blog (in short #phasers-style) and send a link to the mailing list and in #phasers, or just paste that part of the IRC log or so

[11:35] <moritz> s/or/our/

[11:36] *** cdd joined
[11:36] <Juerd> (Off topic) Poll: Which of these three traffic signs most clearly indicates that you are currently *allowed* to drive on the shoulder (emergency lane)? http://juerd.nl/i/070a3e2cc74ce0f54bed9ca2a5d71b56.png

[11:37] <moritz> 2 IMHO

[11:37] <moritz> 3 is also clear, but only after you thought about it for 3 seconds

[11:37] <tadzik> hmm

[11:39] <tadzik> Juerd: http://i.imgur.com/TlpB7.png how about something of this sort?

[11:40] <Juerd> tadzik: That's probably too much visual information for use on a motorway

[11:40] <Juerd> Thanks for your replies :)

[11:40] <tadzik> well, without the cars it should be clear enough :)

[11:41] <moritz> Juerd: I've seen similar signs to tadzik's drawing in the case when the autobahn is extended from 2 to 3 lanes

[11:42] <Juerd> It's common with arrows, yes

[11:43] <tadzik> moritz: about the gsoc, you mean gsoc-students, the global one, or something perl-specific?

[11:43] *** Moukeddar left
[11:43] <moritz> tadzik: http://groups.google.com/group/tpf-gsoc-students

[11:44] <moritz> tadzik: they'll kill you if send them to the global gsoc-students list

[11:44] <moritz> tadzik: speaking of which, http://groups.google.com/group/tpf-gsoc-students/browse_frm/thread/4789ca40a6a4f2f0 is interesting for you

[11:45] <tadzik> thanks

[11:46] * tadzik joins the ML

[11:48] <tadzik> hmm, seems that I broke roast a bit

[11:49] <Juerd> tadzik, moritz: with option 4 added, which one would win? http://juerd.nl/i/e6c11ca92276f9176150ab508430bb5e.png?

[11:50] <dalek> roast: c2c9573 | tadzik++ | S02-builtin_data_types/bool.t:

[11:50] <dalek> roast: Fix the plan for bool.t

[11:50] <dalek> roast: review: https://github.com/perl6/roast/commit/c2c957302c

[11:51] <tadzik> Juerd: I like the 4th :)

[11:52] <tadzik> rakudo: multi foo() { say '1' }; multi foo($foo, :$bar) { say '2' }; foo(:bar(1));

[11:52] <p6eval> rakudo 5e8184: OUTPUT«Unexpected named parameter 'bar' passed␤  in 'foo' at line 1:/tmp/gYs0f9h0By␤  in main program body at line 22:/tmp/gYs0f9h0By␤»

[11:52] <moritz> that error message is LTA

[11:52] <tadzik> rakudo: class A { multi method foo() { say '1' }; multi method foo($foo, :$bar) { say '2' } }; A.foo(:bar(1));

[11:52] <p6eval> rakudo 5e8184: OUTPUT«1␤»

[11:52] <tadzik> is that correct, the second one?

[11:53] <moritz> yes

[11:53] <moritz> superfluous named args are ignored in methods

[11:53] <tadzik> that seems wrongish to me, if not the effect, then the idea

[11:53] <tadzik> oh yeah, I remember that now. But I still don't like it

[11:53] <tadzik> rakudo: class A { multi method foo() { say '1' }; multi method foo($foo = 1, :$bar) { say '2' } }; A.foo(:bar(1)); A.foo();

[11:53] * moritz neither, I just don't like the alternatives either

[11:53] <p6eval> rakudo 5e8184: OUTPUT«2␤2␤»

[11:54] <tadzik> ...great

[11:54] <tadzik> that's ok too?

[11:55] * moritz is not sure, and defers to jnthn 

[11:55] *** Patterner left
[11:56] <tadzik> moritz: in some spare time, could you look at my use-import doubts?

[11:56] <tadzik> shopping &

[11:57] *** Psyche^ joined
[11:57] *** Psyche^ is now known as Patterner

[11:59] <moritz> tadzik: sorry, what doubts?

[11:59] <moritz> tadzik: the fix to <spacey> helped in that it enabled the parsing

[11:59] <moritz> tadzik: now you need to patch up the actions too

[11:59] <tadzik> oh, so the import calling in NYI yet?

[11:59] <moritz> tadzik: probably

[12:00] <moritz> nqp: say(1)

[12:00] <p6eval> nqp: OUTPUT«sh: ./nqp: not found␤»

[12:01] <donri> :D

[12:01] <moritz> the rebuild log files show no failures

[12:01] <moritz> so I have no clue why it shouldn't have built

[12:02] *** Helios left
[12:03] <donri> wrong $PWD? it's doing ./

[12:03] <moritz> nqp: say(1)

[12:03] <p6eval> nqp: OUTPUT«1␤»

[12:03] *** Helios joined
[12:03] <donri> \o/

[12:03] <moritz> donri: then it would just have used the old build

[12:03] *** Trashlord joined
[12:03] <takadonet> mornign all

[12:04] <donri> is nqp intended to be a real thing in the longer run or is it an intermediary boot strapping thing just for now?

[12:04] <donri> would be nice to see it standardized otherwise

[12:04] <donri> unless it already is?

[12:04] <moritz> donri: it's "a" real thing, but not "the" real thing

[12:04] <donri> FSVO.

[12:05] <moritz> donri: it's meant for compiler writers

[12:05] <donri> sure :D but might be valuable as a "simplified grammar"

[12:05] <donri> yea

[12:05] <donri> bbl

[12:05] <moritz> it has a simplified grammar

[12:05] * moritz doesn't understand what point donri is trying to make

[12:06] <moritz> better docs would be awesome, yes

[12:09] *** Moukeddar_ joined
[12:10] <tadzik> moritz: a place to fire the import would be Perl6/Module/Loader.pm:import(), yes?

[12:10] *** orafu left
[12:11] *** LitHJK joined
[12:12] *** LitHJK left
[12:13] <moritz> tadzik: I'm trying to understand the module loading as it is now...

[12:13] <moritz> Actions.pm line 587 first need()s it

[12:14] <moritz> and then calls import($/)

[12:14] <Moukeddar_> they killed Bin Laden , what a joke :p

[12:14] <tadzik> yes

[12:14] <tadzik> and import imports the exported subs

[12:14] <tadzik> ohwait

[12:14] <moritz> it calls stub_lexical_imports

[12:15] <tadzik> well, the import($/) eventually calls Perl6::Module::Loader::import(), and then what I say

[12:15] <moritz> and then emits a a block that calls .import

[12:15] <tadzik> yes

[12:15] <moritz> nononononono

[12:15] <moritz> it can't work like that

[12:15] <moritz> in the long run

[12:15] <tadzik> the emmited block does Perl6::Module::Loader::import($modulename)

[12:16] <moritz> we need to ask the module which lexical stubs to install

[12:17] <moritz> hm

[12:17] <Moukeddar_> is the module system like the ruby packages or Nuget libraries?

[12:18] <moritz> is that was the get_imports method does?

[12:18] <tadzik> I don't know either

[12:18] <moritz> Moukeddar_: see http://modules.perl6.org/

[12:18] <tadzik> well, I broke stuff :)

[12:18] <tadzik> seems that nqp doesn't really like $name::import();

[12:18] <Moukeddar_> yep , it's pretty much the same concept

[12:19] <Moukeddar_> and most of them are pandaistic

[12:20] <tadzik> anyway shopping & for real now

[12:28] *** ymasory left
[12:35] <colomon> \o

[12:40] <moritz> o/

[12:50] *** mberends joined
[12:50] *** mberends left
[12:51] *** _twitch joined
[12:53] <tadzik> o/

[12:54] <moritz> tadzik: for 'use lib;' it might be enough to assume that the arguments to the module don't alter the exported symbol list

[12:54] <moritz> tadzik: and simply pass on $<arglist>.ast to the actual loading call somehow

[12:55] * moritz has only very vague ideas of how that should look like

[12:57] <tadzik> I would go for that as a start

[12:57] <tadzik> for now, I don't know how this $name::import() should look like, in legal nqp

[12:58] <moritz> nqp: module Foo { our sub import($x) { say($x) } }; Foo::import('blah')

[12:58] <p6eval> nqp: OUTPUT«blah␤»

[12:59] <tadzik> module Foo { our sub import($x) { say($x) } }; my $a := "Foo"; $a::import('blah')

[13:00] <tadzik> nqp: module Foo { our sub import($x) { say($x) } }; my $a := "Foo"; $a::import('blah')

[13:00] <p6eval> nqp: OUTPUT«invoke() not implemented in class 'Undef'␤current instr.: '_block11' pc 77 ((file unknown):33580231)␤»

[13:00] <tadzik> that's the real problem

[13:00] <moritz> ah

[13:00] *** hudnix joined
[13:01] <tadzik> also, checking whether the import() sub exists

[13:01] <moritz> tadzik: see Module/Loader.pm lines 96 and the following

[13:01] *** bluescreen10 joined
[13:01] <moritz> tadzik: you can get_hll_global the ns entry of ['Foo'], '&import', and check for null

[13:02] *** perigrin_ joined
[13:02] <moritz> tadzik: see also: start of method get_imports

[13:02] <tadzik> pir then, eh. Alright, I'll see

[13:02] <moritz> tadzik: it's pretty much exactly what you need

[13:04] *** MayDaniel joined
[13:05] <tadzik> yeah, it seems so

[13:06] <tadzik> nqp: my $a := sub { say('ok'); }; $a()

[13:06] <p6eval> nqp: OUTPUT«Routine declaration requires a signature at line 1, near "{ say('ok'"␤current instr.: 'nqp;HLL;Grammar;panic' pc 20767 (src/stage2/gen/HLL.pir:5644)␤»

[13:06] <tadzik> nqp: my $a := sub () { say('ok'); }; $a()

[13:06] <p6eval> nqp: OUTPUT«ok␤»

[13:06] <tadzik> ok

[13:08] *** Holy_Cow joined
[13:08] *** Trashlord left
[13:09] *** Moukeddar_ left
[13:09] *** jaldhar left
[13:10] *** jaldhar joined
[13:12] *** leprevost joined
[13:15] *** MayDaniel left
[13:20] *** rhebus left
[13:22] *** _twitch left
[13:23] *** mberends joined
[13:29] *** Mowah left
[13:32] *** woosley left
[13:32] *** woosley joined
[13:33] <tadzik> yay, import works!

[13:33] *** mberends left
[13:33] <tadzik> oh wait, it doesn't

[13:33] <moritz> \o/

[13:33] <moritz> /o\

[13:34] *** [particle]1 is now known as [particle]

[13:38] *** woosley left
[13:41] *** kaare_ left
[13:42] *** tzhs joined
[13:45] *** Moukeddar joined
[13:50] *** ab5tract joined
[13:50] *** leprevost left
[13:52] *** leprevost joined
[13:56] *** Holy_Cow left
[14:00] <tadzik> moritz: is there a way to use my own Perl6::Module::Loader, so I don't recompile the whole rakudo with every change?

[14:00] *** spq joined
[14:01] <moritz> tadzik: I'm not aware of any

[14:01] <tadzik> jnthn should now jump out of the box saying "fixed in nom!"

[14:03] <tadzik> moritz: anyway, with this http://nopaste.snit.ch/43132 should I seek import in @current-namespace.append(@nsparts) rather than @nsparts itself?

[14:05] *** Mowah joined
[14:05] <moritz> I don't think so

[14:07] *** ella joined
[14:10] <tadzik> then I'm out of clues

[14:11] *** Moukeddar left
[14:11] <moritz> tadzik: you could try the get_hll_namespace + getprop that's used elswhere in Module::Loader

[14:12] <tadzik> hmm

[14:12] <moritz> tadzik: you can experiment with finding stuff in namespaces outside of rakudo sources...

[14:13] <moritz> tadzik: but beware the module loading time... at the time you're running the code, has the module actually been loaded?

[14:13] <tadzik> moritz: I think so

[14:14] <moritz> tadzik: an easy way to test is to add a say() to the mainline code of the module

[14:14] <tadzik> I'll try it as soon as I unbreak my rakudo :)

[14:18] *** molaf joined
[14:19] *** mtk left
[14:19] *** mtk0 joined
[14:20] *** leprevost left
[14:20] *** leprevost joined
[14:22] <tadzik> moritz: yeah, the module is loaded by then

[14:23] *** leprevost left
[14:23] <moritz> hm

[14:28] <moritz> tadzik: I have a failure in t/spec/S32-str/comb.rakudo, failed test 9

[14:29] <TimToady> std: sub postfix:< > ($x) {...}

[14:29] <p6eval> std 9f27365: OUTPUT«[31m===[0mSORRY![31m===[0m␤Null operator is not allowed at /tmp/MH2K7Nhvmv line 1:␤------> [32msub postfix:< >[33m⏏[31m ($x) {...}[0m␤Parse failed␤FAILED 00:01 112m␤»

[14:29] <TimToady> \o/

[14:29] <TimToady> thanks

[14:29] <moritz> tadzik: it's .comb(:limit(2))

[14:29] <tadzik> moritz: yeah, I know :/

[14:29] * moritz bows to TimToady 

[14:30] <tadzik> it's the "we don't mind additional arguments"

[14:30] <colomon> std++

[14:30] <tadzik> .comb(:limit(2)) actually dispatches to .comb()

[14:30] <moritz> the either implement :$limit in .comb()

[14:30] <tadzik> new module: https://github.com/tadzik/Module-Starter

[14:30] <moritz> or do a :$limit where !.defined

[14:31] <tadzik> it was created using Module::Starter itself :)

[14:31] <moritz> \o/

[14:31] <colomon> tadzik: can you explain in more detail?

[14:32] <colomon> there's only the one .comb method, right?

[14:32] <moritz> colomon: not since 6ca6140a4683a66b9f7d54e9a336051d5f564924

[14:32] <Su-Shee> "just use .brush instead!" ;) sorry :)

[14:33] <colomon> pulling...

[14:33] <tadzik> colomon: as soon as I fix it, you will be able to `module-starter Task::Catalyst`, and get a shiny new Task-Catalyst directory, with a valid META.info, and a git repo ready to push to github as soon as you open a Task-Catalyst repo

[14:33] <colomon> ooooo

[14:33] * TimToady wonders whether the new protos will enable us to do better named arg checking...  "This argument is not recognized by any of my candidates"

[14:34] <colomon> created especially for those of us addicted to creating modules, eh?  ;)

[14:34] <tadzik> yes :)

[14:34] <tadzik> and to those of "What is this META.info again?" :)

[14:34] <dalek> rakudo: c9e5e0e | moritz++ | src/ (2 files):

[14:34] <dalek> rakudo: [binder] use more appropriate NULLs

[14:34] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/c9e5e0ef0a

[14:35] <moritz> colomon: if you look at http://search.cpan.org/~miyagawa/ (ok, p5, but still impressive) you can see how much time one can spend on starting modules :-)

[14:35] *** shabble joined
[14:35] <colomon> seems trivial to implement limit in the new .comb method ?

[14:35] <tadzik> yes, I'm on it

[14:35] * moritz also tries something

[14:36] <tadzik> colomon: http://nopaste.snit.ch/43133

[14:36] <tadzik> then you only need to add something and 'git push origin master'

[14:36] <moritz> rakudo: class A { multi method a(:$foo where .not) { 1  }; multi method a ($x = 2, :$foo) { $x }}; say A.new.a(); say A.new.a(:foo)

[14:36] <p6eval> rakudo 5c6fe0: OUTPUT«1␤2␤»

[14:37] <colomon> tadzik: it handles creating the project on github?!

[14:37] <moritz> tadzik: I'm trying it with two such guards, one for :limit and one for :match

[14:37] <tadzik> colomon: no, you have to do that one yourself

[14:37] <tadzik> moritz: waitwait, since when is limit a named param?

[14:37] *** ella left
[14:37] <tadzik> colomon: but that'd be a nice feature :)

[14:38] <tadzik> and I think it's even possible, since we have JSON::RPC, that may help with the github api

[14:38] <moritz> tadzik: since, like, forever?

[14:39] <tadzik> . o O ( am I blind or something? )

[14:39] <tadzik> moritz: https://github.com/rakudo/rakudo/blob/master/src/core/Cool-str.pm#L63 it looks positional to me

[14:39] <moritz> ouch

[14:39] *** am0c left
[14:40] <colomon> tadzik's right

[14:40] <tadzik> so the tests which is failing is actually using the 'positional param as a named param', which is NYI, and there are tests TODOed because of it

[14:40] <colomon> though I think it might make more sense as a named param

[14:40] <moritz> positional as named is not NYI (in general)

[14:40] <tadzik> so I believe that tests should be TODOed too

[14:41] <tadzik> although when it was working, even accidentally, it was pretty DWIM

[14:41] *** alester joined
[14:42] <alester> Ping moritz

[14:42] <moritz> rakudo: sub f($x) { say $x }; f :x<foo>

[14:42] <moritz> alester: pong

[14:42] <p6eval> rakudo 5c6fe0: OUTPUT«foo␤»

[14:42] <alester> Let's talk STRINGNULL etc

[14:42] <moritz> sure

[14:43] <moritz> tadzik: note that omitting the first (optional) param but filling the second *only* works by name

[14:43] <alester> You're saying you can't use STRINGNULL in Rakudo.  Is it specific places?

[14:43] <alester> That commit is all mine.

[14:43] <moritz> alester: src/binder/bind.c, as I commented in the ticket

[14:43] <tadzik> hmm

[14:43] <alester> But there are many more.

[14:43] <alester> Right, but is that the only place?

[14:44] <moritz> alester: I'm not sure. It's a huge mess

[14:44] <moritz> alester: there are many NULLs in calls to Parrot_throw_ex_from_C_args() or so

[14:44] <moritz> alester: but the parrot code base itself uses NULL there too

[14:44] <alester> I've tried to weed them out.

[14:44] <tadzik> moritz: yeah, so what does it mean?

[14:45] <moritz> tadzik: it means that you have add more multis, for example. Or more checks.

[14:46] <tadzik> oh

[14:47] <moritz> rakudo: class A { multi method a() { 1 }; multi method a($ = 1, $ = 2) { 2 } }; say A.new.a

[14:47] <p6eval> rakudo 5c6fe0: OUTPUT«1␤»

[14:47] <moritz> tadzik: I'm think of two multis

[14:48] <moritz> tadzik: comb(:$limit where !.defined, :$match where .not)

[14:48] <tadzik> moritz: I made it comb() { self.comb(self.chars) }; and comb(Int $limit) { gather for 1..$limit {} }

[14:48] <moritz> tadzik: and comb(Regex $matcher = /./, $limit = *, :$match)

[14:50] <moritz> compiling mine now

[14:51] *** araujo joined
[14:51] *** araujo left
[14:51] *** araujo joined
[14:52] *** Sarten-X left
[14:53] <moritz> alester: did you have much success weeding out the NULLs?

[14:53] <alester> Yeah, I did.

[14:53] <alester> Do you know what specific functions are blowin' up?

[14:54] <moritz> tadzik: my variant didn't work, ambigious dispatch on the very  first test

[14:54] <alester> I'd hate to allow NULLs everywhere.

[14:54] <moritz> no idea

[14:54] <moritz> I approached it as a black box, and found the offender only with bisect

[14:55] <alester> ok

[14:55] <moritz> tadzik: now I remember why I haven't added the simple, efficient version of .comb() before :-)

[14:55] <tadzik> neither did mine, but I also failed one more test :P

[14:55] <alester> Well, we can't go back to your branch.

[14:55] <alester> at least not as a whole.

[14:56] <tadzik> but, while waiting, I managet do get Module::Starter actually create a github repo itself :)

[14:56] <alester> tadzik: That makes me happy. :-)

[14:56] <moritz> alester: why not?

[14:56] <alester> Becuase it's more than just NULL acceptance.]

[14:56] <alester> I'm weeding thru the diffs.

[14:57] <moritz> ah, there's also a consting

[14:57] <alester> Consting won't be a prob

[14:57] <alester> and tehre's also a lot of other things in that branch

[14:58] <moritz> huh?

[14:58] <moritz> that branch differs from master in just two commits

[14:58] <moritz> one is irrelevant (a test) for us

[14:58] <moritz> and one is yours

[14:59] *** tzhs left
[15:00] *** ymasory joined
[15:00] *** wtw left
[15:01] <alester> And stuff in ports/

[15:02] <moritz> ignore it.

[15:02] <alester> I am.

[15:02] <alester> as i weed thru the diffs.

[15:02] <moritz> it's really about c1f77f7eb90041468c3b13f5b48ae2ca1d1c37a5

[15:02] *** Sarten-X joined
[15:02] <moritz> you can forget the branch if you want

[15:03] <moritz> alester: maybe we can even use it as a whole, and just fix up rakudo

[15:04] <alester> But I thought you couldn't use STRINGNULL in your statics

[15:04] <tadzik> colomon: http://nopaste.snit.ch/43134 created https://github.com/tadzik/Module-Starter/ How is that? :)

[15:04] <alester> is how I read it.

[15:04] <moritz> alester: for example with initializing those variables to NULL first, and changing them to STRINGNULL in an init fucntion

[15:04] <moritz> alester: not by a simple textual substitution

[15:04] <alester> Does that work?

[15:05] <moritz> I have no idea

[15:05] <moritz> but why shouldn't it?

[15:05] <alester> Dunno.

[15:05] <moritz> :-)

[15:05] <alester> Try it, let me know.

[15:05] <alester> I'd realy rather not allow NULLs if we don't have ot.

[15:06] <moritz> I just don't know how to write a function that's called at startup

[15:07] <alester> I can't do anything definite this moment.

[15:07] <alester> I'm working on Real Job Work 

[15:07] <alester> but will pursue more in a bit

[15:07] *** justatheory joined
[15:08] <moritz> no hurry

[15:08] <tadzik> my github followers probably hate me now :) tadzik created repo, tadzik deleted repo, tadzik created repo... but I had to test it :)

[15:09] <moritz> :-)

[15:10] <tadzik> moritz: but say, should that tests really work since 'positional as named' doesn't work anyway?

[15:11] <moritz> tadzik: positional as named works.

[15:12] <moritz> rakudo: sub f($x) { say $x }; f :x<OH YES!>;

[15:12] <tadzik> I think I saw a test TODOed due to this today

[15:12] <p6eval> rakudo 5c6fe0: OUTPUT«OH YES!␤»

[15:13] <moritz> tadzik: for multis it might only work if a proto is involved

[15:13] <colomon> tadzik++

[15:14] *** rhebus joined
[15:20] *** Moukeddar joined
[15:30] <cognominal> jnthn, I was afk and I had not configured x-chat to have big buffer so I know that you (or someone else) addressed me but I don't know what he said

[15:31] <cognominal> xchat--  # 300 lines by default

[15:31] *** orafu joined
[15:31] <moritz> cognominal: http://irclog.perlgeek.de/search.pl?channel=perl6&nick=&q=cognominal knows (albeit a bit slow)

[15:32] *** bluescreen10 left
[15:32] <cognominal> oops, I forgot about that. Moritz++

[15:33] <cognominal> and jnthn++

[15:35] *** Moukeddar left
[15:35] *** perigrin_ left
[15:36] <donri> * moritz doesn't understand what point donri is trying to make  -- i think i may have been thinking of e.g. embedding

[15:37] <donri> if you want perl6 in situations where you might otherwise go with lua or js

[15:37] <donri> maybe nqp makes sense there

[15:37] <donri> shrug

[15:37] <moritz> depends

[15:38] <moritz> if your application is parsing, why not?

[15:38] <donri> is that its only main strength then?

[15:38] <tadzik> it's the main purpose

[15:38] <donri> i don't really know how much it isn't "quite perl 6"

[15:45] *** perigrin joined
[15:47] *** colomon left
[15:49] <tadzik> moritz: ok I fixed that

[15:50] <tadzik> but it's not very nice and not very speccy :/

[15:50] *** lateau joined
[15:50] <tadzik> http://nopaste.snit.ch/43135

[15:51] <tadzik> now when I look at it it looks wrong to me

[15:52] *** texture joined
[15:56] *** domidumont left
[15:56] *** MayDaniel joined
[15:56] *** ggoebel joined
[15:59] <jnthn> moritz, tadzik: Importation (and exportation) needs a complete re-write.

[15:59] *** perigrin left
[16:00] <tadzik> ok, good to know :)

[16:00] <tadzik> will the new nqp allow this?

[16:00] <jnthn> It changed to lexical import

[16:00] <tadzik> or bring us closer?

[16:01] <jnthn> tadzik: It'll actually make it WAY easier to implemnt.

[16:01] <tadzik> cool

[16:01] <jnthn> New nqp - and rakudo/nom - are in general very lexical-oriented.

[16:03] *** pmurias joined
[16:06] *** awwaiid joined
[16:09] <tadzik> moritz: mind if I commit it like this? I can't think of any better way

[16:09] <tadzik> well, I can, but it gives no results

[16:09] *** molaf left
[16:11] <pmurias> j

[16:11] <pmurias> sorry

[16:14] <dalek> rakudo: 632f813 | tadzik++ | src/core/Cool-str.pm:

[16:14] <dalek> rakudo: Fix a regression introduced by 6ca6140a. This doesn't look like the best way to do it, but there are no tests to prove it incorrect

[16:14] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/632f813ea7

[16:16] <tadzik> enough Rakudo for today

[16:16] <jnthn> tadzik++ #

[16:17] *** MayDaniel left
[16:19] *** colomon joined
[16:21] *** mishima joined
[16:22] *** mishima left
[16:22] *** mishima joined
[16:22] *** mishima is now known as mish

[16:23] *** mish left
[16:23] *** Tedd1 left
[16:25] *** kaare_ joined
[16:34] *** mj41 left
[16:41] *** nymacro left
[16:53] *** lateau left
[16:55] *** jferrero left
[16:55] *** Trashlord joined
[16:58] *** cdarroch joined
[16:58] *** cdarroch left
[16:58] *** cdarroch joined
[17:01] *** pmurias left
[17:02] *** Chillance joined
[17:11] *** pnu left
[17:11] *** skangas left
[17:11] *** PerlJam left
[17:11] *** nnunley_ left
[17:11] *** ponbiki left
[17:11] *** jevin left
[17:11] *** HarryS left
[17:11] *** Exodist left
[17:11] *** jrockway left
[17:12] *** ribasushi left
[17:12] *** pnu joined
[17:12] *** skangas joined
[17:12] *** PerlJam joined
[17:12] *** nnunley_ joined
[17:12] *** ponbiki joined
[17:12] *** jevin joined
[17:12] *** HarryS joined
[17:12] *** Exodist joined
[17:12] *** jrockway joined
[17:12] *** ribasushi joined
[17:13] *** HarryS left
[17:13] *** HarryS joined
[17:16] *** jaldhar left
[17:19] *** orafu left
[17:24] *** masak joined
[17:25] <masak> o/, pan^Wzeb^Wbutterflies

[17:25] <phenny> masak: 06:50Z <mathw> tell masak yes, it was my birthday yesterday

[17:25] <masak> mathw.age++

[17:26] <tadzik> hello masak 

[17:28] * masak bobs happily in the air

[17:29] <masak> that's how I picture us all having this conversation. floating in the air.

[17:29] <colomon> \o/   \o/    \o/

[17:30] * colomon probably can't flap fast enough to stay aloft

[17:30] <masak> on the Internet, there's no gravitational pull.

[17:30] <masak> that's why it's so easy to waste hours online.

[17:30] <masak> there's no "down" :)

[17:31] <colomon> on the Internet, no one can tell you're plummeting towards the ground...

[17:31] <masak> ;)

[17:33] <masak> TimToady: just as a reminder, this is why you changed 'constant' to be in the 'sub' slot: http://strangelyconsistent.org/blog/i-can-haz-constant :P

[17:34] <jnthn> yayitsmasak! \o/

[17:34] * masak bobs

[17:34] <jnthn> Like an apple?

[17:34] <dalek> nqp/ctmo: 5e5c46f | jonathan++ | src/stage0/ (6 files):

[17:34] <dalek> nqp/ctmo: Update bootstrap with latest changes.

[17:34] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/5e5c46f3ba

[17:34] <dalek> nqp/ctmo: d2f7759 | jonathan++ | src/pmc/dispatchersub.pmc:

[17:34] <dalek> nqp/ctmo: Ensure DispatcherSub is properly initialized.

[17:34] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/d2f775980e

[17:34] <masak> oh, I made the same mathw.age++ joke as moritz had already done in the backlog. we need new jokes :P

[17:34] <masak> jnthn: yes, almost exactly like an apple.

[17:35] <moritz> masak: joke? that was a congratulation for geeks :-)

[17:35] <masak> uh. of course.

[17:36] <masak> it's a nerdy way to say "you're one year older now". :)

[17:36] *** orafu joined
[17:36] *** Vlavv_ left
[17:37] *** Vlavv joined
[17:39] <tadzik> wow, TheDamian still maintains his Pod6 parser

[17:40] <masak> TheDamian++

[17:41] *** Vlavv_ joined
[17:41] <sorear> My age incremenets continuously

[17:41] <masak> discussion.nerdiness++

[17:41] <masak> :P

[17:42] *** Vlavv left
[17:48] <PerlJam> Is it just me or is there a dearth of Perl 6 related talks at OSCON this year?

[17:48] *** Tedd1 joined
[17:49] <masak> Tedd1: greetings.

[17:49] <Tedd1> hi

[17:49] <jnthn> Hey, somebody from .no! Are you coming to http://conferences.yapceurope.org/npw2011/? ;-)

[17:50] <Tedd1> whats that?

[17:50] <masak> a Nordic Perl workshop.

[17:50] <Tedd1> I kind of liked Perl5, dunno if I like Perl6

[17:50] <jnthn> Tedd1: A Perl workshop. :)

[17:50] <jnthn> It's for Perl 5 at least as much as it's for Perl 6. :)

[17:51] <masak> the theme is "Perl in 2011".

[17:51] <jnthn> In fact, I expect the majority of the talks will be Perl 5 ones. :)

[17:51] * masak craks up

[17:51] <masak> cracks*

[17:51] <Tedd1> http://freshmeat.net/projects/pimpbnc/ <- mine

[17:51] <Tedd1> (Perl5)

[17:51] <jnthn> What's...what's wrong with our theme? :)

[17:51] <masak> nothing!

[17:51] <masak> it's... very topical!

[17:51] <jnthn> :D

[17:51] <PerlJam> Tedd1: tropical would be better, but you probably can't swing that :)

[17:52] <PerlJam> er, masak 

[17:52] <masak> Tedd1: an IRC... bouncer?

[17:52] <masak> does it kick people out of channels? :)

[17:52] <jnthn> PerlJam: We may well have sun and sea!

[17:52] <Tedd1> yeah, back in 2003 ... I rewrote it like a hundret times

[17:52] <Tedd1> its a proxy

[17:52] <Tedd1> it was more of a hobby to keep rewriting it for perfection

[17:53] <sorear> hehe

[17:53] <Tedd1> it has native webserver with mod_perl/CGI support, can update its modules while running + normal irc features

[17:53] <sorear> I came here to write an IRC tool too...

[17:53] <Tedd1> shit

[17:53] <sorear> ?

[17:53] <sorear> What's wrong?

[17:54] <Tedd1> dammit

[17:54] <Tedd1> I just got a x445 home

[17:54] <Tedd1> with 2xSAN

[17:54] <Tedd1> installing OS on it, and it said POFF

[17:55] <tadzik> moritz?

[17:55] <Tedd1> power suply gone, switched to next

[17:55] <tadzik> oh, masak's around

[17:55] <Tedd1> dammit, probably overloaded the old psu by using one instead of both

[17:56] <Tedd1> I have 28 disks with 400GB on each in SAN ... @home

[17:56] <Tedd1> kind of noisy

[17:57] <tadzik> moritz: unping

[17:57] <sorear> ...wow

[17:58] <PerlJam> jnthn, masak: NPW should have a fund-drive like thing on the front page:  X talks submitted ... we're only Y talks away from our goal of ...

[17:58] <PerlJam> :-)

[18:00] *** Helios left
[18:01] *** Helios joined
[18:01] <masak> nice idea :)

[18:01] * moritz unpings

[18:03] <cotto_work> masak++ for another great release announcement

[18:03] <masak> ;)

[18:04] <colomon> it made me laugh out loud last night.  

[18:04] <masak> glad to hear that.

[18:04] *** silug left
[18:04] *** silug joined
[18:05] <Tedd1> perl6: say test

[18:05] <p6eval> rakudo 632f81: OUTPUT«Could not find sub &test␤  in main program body at line 22:/tmp/rqjDFSK0oa␤»

[18:05] <p6eval> ..niecza v4-76-g7bf5ef9: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤      'test' used at line Any()1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 388 (CORE die @ 2)␤  at /home/p6eval/niecza/src/STD.pm6 line 1141 (STD P6.comp_unit @ 75)␤  at

[18:05] <p6eval> ../home/p6eval/niecza…

[18:05] <p6eval> ..pugs: OUTPUT«*** No such subroutine: "&test"␤    at /tmp/FXzq0khpSA line 1, column 5 - line 2, column 1␤»

[18:05] <Tedd1> hmm

[18:06] <Tedd1> perl6: say "test";

[18:06] <p6eval> pugs, rakudo 632f81, niecza v4-76-g7bf5ef9: OUTPUT«test␤»

[18:06] <Tedd1> perl6: say "test\r\nPRIVMSG #perl6 :OhNoes!";

[18:06] <p6eval> pugs, rakudo 632f81, niecza v4-76-g7bf5ef9: OUTPUT«test

[18:06] <Tedd1> :)

[18:07] <moritz> it does pay off to built on well-tested modules :-)

[18:07] <Tedd1> hehe ;)

[18:08] *** texture left
[18:14] <sorear> huh, why is it cut off?

[18:14] *** molaf joined
[18:15] <sorear> perl6: say "test\nPRIVMSG #perl6 :OhNoes!";

[18:15] <p6eval> pugs, rakudo 632f81, niecza v4-76-g7bf5ef9: OUTPUT«test␤PRIVMSG #perl6 :OhNoes!␤»

[18:15] <sorear> without the \r it works fine

[18:15] <jnthn> perl6: say "aaaaarrr\rgh!"

[18:15] <p6eval> pugs, rakudo 632f81, niecza v4-76-g7bf5ef9: OUTPUT«aaaaarrr

[18:16] <jnthn> From frustated to pirate with just one escape sequence.

[18:16] <masak> :P

[18:18] <Tedd1> I was attempting to inject an IRC command from bot to server, so without \r it doesn't conform to IRC protocol specs (and it just returns the data, which was not the point)

[18:18] <sorear> p6eval is smart enough to escape \n

[18:18] <sorear> I wonder what it's doing with the \r

[18:19] <sorear> perl6: say "test\rPRIVMSG #perl6 :OhNoes!";

[18:19] <p6eval> pugs, rakudo 632f81, niecza v4-76-g7bf5ef9: OUTPUT«test

[18:19] <diakopter> heh

[18:19] <sorear> rakudo: say "test\rPRIVMSG #perl6 :OhNoes!";

[18:19] <p6eval> rakudo 632f81: OUTPUT«test

[18:19] <diakopter> add another line break at the end

[18:19] <sorear> it goes much faster if you only request one compiler

[18:20] <sorear> rakudo: say "test\rPRIVMSG #perl6 :OhNoes!\r";

[18:20] <p6eval> rakudo 632f81: OUTPUT«test

[18:20] <diakopter> oh well

[18:20] <sorear> "perl6:" is for comparisons

[18:20] <sorear> perl6: my $a = 1; my $b := $a; $a := 2; say $b

[18:21] <p6eval> rakudo 632f81: OUTPUT«2␤»

[18:21] <p6eval> ..pugs, niecza v4-76-g7bf5ef9: OUTPUT«1␤»

[18:21] <sorear> perl6: my $a = 1; my $b ::= $a; $a = 2; say $b

[18:21] <p6eval> pugs, rakudo 632f81: OUTPUT«2␤»

[18:21] <p6eval> ..niecza v4-76-g7bf5ef9: OUTPUT«1␤»

[18:24] *** anonymous joined
[18:25] *** anonymous is now known as Guest64732

[18:27] *** fhelmberger left
[18:28] *** silug left
[18:28] *** silug joined
[18:29] *** mj41 joined
[18:34] *** hercynium joined
[18:46] *** Guest64732 left
[18:51] <dukeleto> how does one change the current process name in Perl 6? Is that in the spec somewhere, or is it still implementation-dependent?

[18:53] * masak goes a-lookin'

[18:53] <PerlJam> I'd guess the latter though

[18:55] <masak> there's no mention of 'current process name' in S28.

[18:56] <PerlJam> I wonder if you could search for "$0"  or "the old $0" and find something useful.

[18:56] *** orafu left
[18:56] * PerlJam pulls a fresher spec

[18:57] <masak> $*PROGRAM_NAME

[18:57] <masak> apparently.

[18:58] *** [Coke] left
[18:59] <dukeleto> masak: intetesting. going to play with that now. masak++

[18:59] <masak> waitwait, I didn't say it *works*! :/

[18:59] *** [Coke] joined
[19:01] <PerlJam> it's mentioned in src/core/MAIN.pm

[19:01] <masak> probably read-only, though...

[19:01] <PerlJam> and src/glue/run.pir and src/gen/core.pm

[19:01] <masak> rakudo: $*PROGRAM_NAME = "foo"; say "alive"

[19:01] <p6eval> rakudo 632f81: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/3FwgGtmOJs␤»

[19:01] * masak submits rakudobug

[19:04] <dukeleto> masak++

[19:04] * dukeleto would actually like to fix that bug

[19:04] <masak> good news: source is downlaodable, and we accept patches ;)

[19:05] * dukeleto is relieved

[19:05] *** noganex_ joined
[19:05] <dukeleto> why was that error about an infix <=> ?

[19:06] *** spq left
[19:07] *** mberends joined
[19:08] *** Helios left
[19:08] <masak> because it was in the assignment that things blew up.

[19:09] *** noganex left
[19:10] *** Helios joined
[19:10] <dukeleto> &infix:<=> looks to me like it refers to <=> instead of =. I forgot the <> is just syntax salt

[19:11] *** TiMBuS left
[19:11] *** Mowah left
[19:11] <masak> yeah, and it didn't used to be that way, either.

[19:12] <masak> many other languages do without something like the <> around their operators when they define them.

[19:13] <masak> looks dangerous, now that I'm used to those <> :)

[19:13] *** Helios left
[19:14] * dukeleto digs around to see how to make $*PROGRAM_NAME writable

[19:15] <masak> dukeleto++

[19:16] *** Helios joined
[19:17] * dukeleto goes spelunking into src/gen/core.pm

[19:20] <tadzik> oh, don't

[19:20] <tadzik> core.pm is basically everthing else in src/ splat together

[19:20] <tadzik> unless you actually want that

[19:21] <dukeleto> tadzik: it is leading me in the correct direction

[19:21] <moritz> the real reason is that circumfixes and some other operators consist of two or more parts

[19:21] <moritz> so we can't declare them without syntax salt

[19:21] <moritz> dukeleto: anything with 'gen' in the name is generated

[19:21] <dukeleto> src/glue/run.pir is where $*PROGRAM_NAME is defined

[19:21] <dukeleto> moritz: duly noted.

[19:21] <dukeleto> is there any $*FOO that is not read-only

[19:21] *** patrickas joined
[19:22] <dukeleto> the code doesn't seem to specify that it should be read-only. It is defaulting to that, somewhere along the way

[19:22] *** slavik left
[19:23] *** slavik joined
[19:23] *** patrickas left
[19:23] <dukeleto> rakudo: $*EXECUTABLE_NAME = "foo"; say "aliving"

[19:23] <p6eval> rakudo 632f81: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/a9msEDpiKh␤»

[19:24] *** spetrea joined
[19:24] <spetrea> it would be so awesome if I had a collection of videos like http://ontwik.com/perl/perl-6-update/

[19:24] <spetrea> so I could just get a lot of food, some drinks and some smokes and watch Perl6 continously and then learn it :)

[19:25] <spetrea> of course I would take some breaks but the basic idea of having video lecture for Perl6 is pretty awesome :)

[19:25] <spetrea> is this very hard to make ? just curious

[19:26] <masak> moritz: there's a nice philosophical reason too, besides the real one: it reads like 'defining an infix, and it's QUOTE = UNQUOTE"

[19:26] <masak> s/"/'/

[19:26] <dukeleto> is $*EXECUTABLE_NAME being read-only a bug or a feature?

[19:26] <dukeleto> seemingly, all $*FOO globals are read-only

[19:26] <dukeleto> even %*ENV is read-only? This bug may be deeper that I thought.

[19:26] <moritz> dukeleto: iirc there was some parrot problems with the ENV pmc

[19:27] *** birdwindupbird joined
[19:27] <tadzik> spetrea: I think there is a file in the ol' pugs repo with a list of Perl 6 talks. I'm sure it's quite outdated, but a Courageous Soul may want to collect the videos in the same manner

[19:28] <dukeleto> moritz: yes, I am sure parrot is to blame for it's fair share of bugs

[19:29] <moritz> spetrea: http://jnthn.net/articles.shtml

[19:29] <moritz> spetrea: some of them exist as videos too

[19:30] <spetrea> ah nice :) I should make a list of those for myself

[19:32] <tadzik> spetrea: seen szabgab's videos?

[19:33] <spetrea> tadzik: didn't know he had Perl6 videos, saw some Padre ones though

[19:33] * dukeleto digs down to set_hll_global

[19:33] <tadzik> spetrea: Perl6 ones are nice, I'm sure they're linked on perl6.org

[19:33] <tadzik> spetrea: http://perl6.org/documentation/ see "for newcomers"

[19:34] * dukeleto digs down to Parrot_ns_set_global()

[19:35] *** TiMBuS joined
[19:36] <tadzik> moritz, masak -- I'd aprreciate a look through the latest gsocmess commits

[19:36] *** molaf left
[19:36] * moritz takes a peek

[19:37] <tadzik> warning: fun stuff :)

[19:37] * dukeleto gets out the backhoe and digs into set_pmc_keyed_str on the Namespace PMC

[19:38] <moritz> dukeleto: fwiw the normal way to manipulate a dynamic variable is to declare a new one

[19:38] <moritz> rakudo: my $*PROGRAM_NAME = 3; say $*PROGRAM_NAME

[19:38] <p6eval> rakudo 632f81: OUTPUT«3␤»

[19:39] <masak> tadzik: if you post the URL to the repo, you'll surely have more eyeballs ;)

[19:39] <tadzik> rakudo: { my $*PROGRAM_NAME = 3; say $*PROGRAM_NAME }; say $*PROGRAM_NAME

[19:39] <p6eval> rakudo 632f81: OUTPUT«3␤/tmp/sMgui152XA␤»

[19:40] <moritz> tadzik: s/allow/allowed/ in Block::Code ?

[19:40] <tadzik> masak: I may want to consider that (puts on the fedora hat)

[19:40] <TimToady> rakudo: $PROCESS::PROGRAM_NAME = 3; say $*PROGRAM_NAME

[19:40] <p6eval> rakudo 632f81: OUTPUT«Null PMC access in getprop()␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/TmUQcB1SWj␤»

[19:40] <dukeleto> TimToady: interesting

[19:40] * masak submits rakudobug

[19:40] <moritz> rakudo doesn't really do PROCESS or GLOBAL yet

[19:40] <tadzik> a sekkrit repo, interested people only! https://github.com/tadzik/gsocmess

[19:40] <masak> rakudo: $PROCESS::FOO = 3

[19:41] <p6eval> rakudo 632f81: OUTPUT«Null PMC access in getprop()␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/xMta8jTUeR␤»

[19:41] <tadzik> moritz: yeah, fells more senseish

[19:41] <dukeleto> from reading the innards of set_hll_global, it doesn't seem, at first glance, that Parrot is making stuff read-only

[19:41] <tadzik> verbs sound like subs

[19:41] <moritz> dukeleto: maybe the binding to the variable makes it read-only?

[19:42] <dukeleto> moritz: somewhere in the glue it is becoming read-only. Haven't tracked it down yet.

[19:42] <moritz> rakudo: my $x := 3; say $x; $x = 5; say $x

[19:42] <p6eval> rakudo 632f81: OUTPUT«3␤Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/exDGZ4BaMD␤»

[19:43] <dukeleto> moritz: that looks quite likely

[19:43] <moritz> tadzik: looks sane-ish

[19:43] <tadzik> I'm glad

[19:43] <moritz> tadzik: missing braces arounds the contents in the first Pod6::Block example

[19:44] <moritz> tadzik: and I wonder if if a Pod6::Block should be an array of contents, not have-an array of contents

[19:44] <moritz> tadzik: just like match objects are captures (and thus arrays and hashes)

[19:44] <tadzik> hmm

[19:44] <dukeleto> rakudo: $PROCESS::PROGRAM_NAME := "foo"; say $*PROGRAM_NAME

[19:45] <p6eval> rakudo 632f81: OUTPUT«Null PMC access in can()␤  in main program body at line 1:/tmp/OHq2Sxu3R2␤»

[19:45] <moritz> it's a fine line

[19:45] <dukeleto> bugs bugs bugs

[19:45] <dukeleto> masak: you want that rakudobug?

[19:45] <moritz> same bug as before

[19:45] <dukeleto> moritz: ah, just a different error

[19:45] <moritz> rakudo: $Foo::Bar := 3

[19:45] <p6eval> rakudo 632f81: OUTPUT«Null PMC access in can()␤  in main program body at line 1:/tmp/Vu7Mw9ke1y␤»

[19:45] <moritz> rakudo: $Foo::Bar = 3

[19:45] *** Helios left
[19:45] <p6eval> rakudo 632f81: OUTPUT«Null PMC access in getprop()␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/lDfvtH4u2i␤»

[19:45] <moritz> can vs. getprop

[19:46] <moritz> really just a matter of the especific call chain

[19:46] <moritz> the issue is the same: the package does not exist

[19:46] <tadzik> moritz: I don't think I see the missing braces though

[19:46] <moritz> erm, brackets, sorry

[19:47] <moritz> Pod6::Block( content => Pod6::Block::Heading(

[19:47] <moritz> should be

[19:47] <tadzik> oh, sure

[19:47] <moritz> content => [ ... ]

[19:47] <tadzik> not only the first one

[19:48] <tadzik> ou, I think all of them are malformed :) I must think of a better way of presenting them

[19:48] *** Helios joined
[19:48] <moritz> time will tell if it might be easier for the user if all entries in @.content do a common role

[19:49] <moritz> like in the browser DOM, all nodes support some common operations

[19:50] <jnthn> Everything in Rakudo is readonly unless it's flagged rw

[19:50] <moritz> I can understand the beauty of stuffing in strings, arrays etc.

[19:51] <jnthn> We used to have it the other way around and it was an endless source of bugs.

[19:51] *** kst left
[19:51] <moritz> but as a user it most likely means that you have to do type checks (or given/when based on type) every time you access it

[19:51] <jnthn> The problem with $*EXECUTABLE_NAME is harder though, because really you want some kind of tied-style variable there.

[19:52] <moritz> tadzik: maybe you want a .pretty method on Pod6::Block that presents them more concisely than .perl

[19:53] <tadzik> moritz: I may. So far I'm writing all this with my fingers anyway

[19:54] <tadzik> moritz: regarding your previous sentence, so things like Pod6::Content, Pod6::Text etc?

[19:57] <moritz> tadzik: maybe. Or maybe just Pod6::Block nodes that have text instead of contents

[19:57] <moritz> hm, sounds more like a separate Pod6::Text node type

[19:57] <tadzik> yeah

[19:58] <tadzik> hmm, now I don't see how it'd be any different from a plain Str

[19:58] *** Helios left
[19:59] <moritz> it's only useful if it has some unified behavior together with the rest of the nodes

[19:59] <tadzik> yeah, I'm thinking about it

[19:59] <moritz> which is why I don't yet know if it's worth the trouble

[19:59] *** Helios joined
[19:59] <moritz> so, just wait and see

[20:00] <tadzik> yeah, time will tell

[20:01] <masak> I'd argue that putting a name on the type is reason enough.

[20:02] <moritz> Array and Str are fine type names.

[20:03] <masak> oh, I agree.

[20:03] <masak> but even 'subset Pod6::Text of Str' would help put a *label* on the thing.

[20:04] <masak> I'm not saying it's a side that wins over the other concerns. just that it's a side that should be evaluated among the rest. :)

[20:04] <moritz> rakudo: subset Pod6::Text of Str; say 'markdown' ~~ Pod6::Text

[20:04] <p6eval> rakudo 632f81: OUTPUT«Bool::False␤»

[20:05] <moritz> rakudo: subset Pod6::Text of Str where True; say 'markdown' ~~ Pod6::Text

[20:05] <p6eval> rakudo 632f81: OUTPUT«Bool::False␤»

[20:06] <masak> huh?

[20:07] <moritz> rakudo: subset Pod6Text of Str where True; say 'markdown' ~~ Pod6Text

[20:07] <p6eval> rakudo 632f81: OUTPUT«Bool::True␤»

[20:07] <moritz> it's the ::

[20:07] * masak submits rakudobug

[20:07] <jnthn> lolwut

[20:07] * moritz dimly recalls such a bug

[20:07] <masak> jnthn: fixed in 6model? :P

[20:08] <moritz> 6model doesn't yet have subset types, does it?

[20:09] *** MayDaniel joined
[20:09] <jnthn> I don't get "6model doesn't have..." :)

[20:09] <jnthn> 6model doesn't have anything much. :)

[20:09] <jnthn> But it provides you with enough to write meta-objects that will do most things.

[20:09] <moritz> right :-)

[20:10] <jnthn> I know that the core actually needs a minor tweak for subset types, but that's about 30 minutes of tweaking. All the rest is implementing SubsetHOW. :)

[20:13] *** ymasory left
[20:13] *** ymasory joined
[20:13] * masak .oO( "implementing 6model, and HOW!" )

[20:15] *** ymasory left
[20:16] *** Helios left
[20:16] *** ymasory joined
[20:17] *** GinoMan joined
[20:20] *** Helios joined
[20:22] *** Helios left
[20:23] *** Helios joined
[20:36] *** sivoais left
[20:37] *** alester left
[20:44] *** birdwindupbird left
[20:53] *** SHODAN left
[20:53] *** uniejo_ joined
[21:03] *** cogno joined
[21:03] <masak> place just went all quiet.

[21:04] *** dorlamm joined
[21:05] *** kaare_ left
[21:07] <tadzik> aye

[21:09] *** kst joined
[21:10] <jnthn> shhh...I'm trying to concentrate :P

[21:10] <masak> WA WA WA

[21:10] <jnthn> dåligt.

[21:10] <jnthn> :P

[21:10] <masak> :D

[21:10] <masak> phenny: "dåligt."?

[21:11] <phenny> masak: "bad." (sv to en, translate.google.com)

[21:11] <jnthn> It sounds better in Swedish. :)

[21:12] *** rhebus left
[21:13] *** cogno left
[21:13] *** GinoMan left
[21:14] *** GinoMan joined
[21:15] *** mathw left
[21:16] *** mathw joined
[21:17] *** GinoMan left
[21:18] *** dorlamm left
[21:19] *** impious joined
[21:19] *** dorlamm joined
[21:29] *** sivoais joined
[21:34] *** impious left
[21:34] *** ymasory left
[21:42] <masak> 'night, adventurers.

[21:42] *** masak left
[21:48] *** mj41 left
[21:59] *** dorlamm left
[22:00] *** uniejo_ left
[22:04] *** hercynium left
[22:07] *** MayDaniel left
[22:07] *** pmurias joined
[22:19] *** pmurias left
[22:21] *** Chillance left
[22:23] *** Chillance joined
[22:35] * spetrea wonders if this is for real http://www.perldonate.com/

[22:46] *** wallberg joined
[22:47] *** whiteknight joined
[22:51] *** ab5tract left
[22:51] *** wallberg left
[22:55] *** ymasory joined
[22:57] *** saaki joined
[23:02] <dalek> nqp/ctmo: 76e0641 | jonathan++ | src/HLL/SerializationContextBuilder.pm:

[23:02] <dalek> nqp/ctmo: Start working towards fixup of roles. Gets us back the first two tests, though methods in roles are still totally broken.

[23:02] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/76e06412b6

[23:02] <dalek> nqp/ctmo: c69b201 | jonathan++ | src/ (2 files):

[23:02] <dalek> nqp/ctmo: Fix issues relating to type parametricism of roles and compile time meta-object handling.

[23:02] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/c69b2013b3

[23:10] <dalek> nqp/ctmo: df3640c | jonathan++ | src/ (2 files):

[23:10] <dalek> nqp/ctmo: Do fixup with the vastly less evil assign rather than copy. Just happens to fix half of the broken multi-sub tests.

[23:10] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/df3640c394

[23:23] <jnthn> Should be able to get those last two failing tests dealt with tomorrow. Then fix installation issues. :-)

[23:23] <jnthn> Then...rakudo/nom :)

[23:32] *** cdarroch left
[23:33] *** donri left
[23:33] *** leprevost joined
[23:34] *** donri joined
[23:44] *** masonkramer joined
