[00:03] *** Radvendii joined
[00:10] *** cooper joined
[00:11] <sorear> o/ Radvendii

[00:16] *** tokuhirom joined
[00:19] *** donri left
[00:20] *** Radvendii left
[00:21] *** Chillance left
[00:28] *** replore joined
[00:29] *** cooper left
[00:36] *** icovnik left
[00:36] *** cooper joined
[00:42] *** ab5tract left
[00:45] <lichtkind> good night

[00:45] <lichtkind> o/

[00:46] *** lichtkind left
[00:51] *** thou left
[00:53] *** Radvendii joined
[01:10] <Util> (when the time comes) how do I post my day's article to perl6advent ?

[01:11] <Util> sorear: what kind of questions? Maybe me.

[01:19] <sorear> Util: I'm not sure what the capturing behavior of <~~0> is supposed to be

[01:22] *** Vlavv_ joined
[01:26] *** Vlavv left
[01:31] *** drbean left
[01:38] *** drbean joined
[01:44] *** jlaire left
[01:44] <dalek> niecza: b8a5ff0 | sorear++ | / (5 files):

[01:44] <dalek> niecza: Treat quantifiers as partially declarative whenever at all possible

[01:44] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b8a5ff0589

[01:45] *** lestrrat left
[01:46] *** lestrrat joined
[01:47] *** jlaire joined
[01:52] *** birmjin joined
[01:52] *** alc joined
[02:11] *** benabik joined
[02:26] <dalek> niecza: 45041d2 | sorear++ | / (5 files):

[02:26] <dalek> niecza: Implement $() @() %() special forms, make $/.ast default to undef

[02:26] <dalek> niecza: review: https://github.com/sorear/niecza/commit/45041d2562

[02:31] *** drbean left
[02:38] *** drbean joined
[02:45] *** am0c joined
[02:47] *** agentzh joined
[02:49] *** mkramer1 left
[02:50] *** hrj joined
[02:55] *** replore left
[02:55] *** SAADD24 joined
[02:56] *** mkramer joined
[03:10] <Radvendii> are there plans for making perl-style graphics?

[03:14] <colomon> what is "perl-style graphics"?

[03:15] <colomon> nom: say ~(1..5)

[03:15] <p6eval> nom 06bbaa: OUTPUT«1 2 3 4 5␤»

[03:15] <colomon> niecza: say ~(1..5)

[03:15] <p6eval> niecza v12-40-g45041d2: OUTPUT«1..5␤»

[03:15] <colomon> sorear: mind if I change Range.Str to conform to nom/spec?

[03:16] *** drbean left
[03:16] *** hrj left
[03:16] *** mkramer left
[03:18] <sorear> colomon: no

[03:19] <colomon> nom: say (1..5).perl

[03:19] <p6eval> nom 06bbaa: OUTPUT«1..5␤»

[03:20] <colomon> niecza: say ~(1, 3, 5, 10)

[03:20] <p6eval> niecza v12-40-g45041d2: OUTPUT«1 3 5 10␤»

[03:22] *** drbean joined
[03:24] <dalek> roast: 94e7168 | (Solomon Foster)++ | S03-operators/range-int.t:

[03:24] <dalek> roast: Change .munch(N) to .[^N].

[03:24] <dalek> roast: review: https://github.com/perl6/roast/commit/94e71683a6

[03:26] <colomon> sorear: okay, my next commit will have ~480 additional working tests for niecza.  ;)

[03:32] <colomon> errr... assuming I didn't break something?

[03:32] <sorear> I may have broken a thing or two; I don't spectest continuously

[03:33] <sorear> If I broke things, they're probably in regexes

[03:34] <colomon> no, it's me.

[03:35] *** Psyche^ joined
[03:35] <colomon> it's range.t, it was massively fudged for niecza, but in the case I'm looking at, it was TODO'd when it needs to be skipped.  easy enough to fix

[03:39] *** Patterner left
[03:39] *** Psyche^ is now known as Patterner

[03:52] <dalek> niecza: af8d58a | (Solomon Foster)++ | lib/CORE.setting:

[03:52] <dalek> niecza: Make Range.Str conform to the spec.

[03:52] <dalek> niecza: review: https://github.com/sorear/niecza/commit/af8d58ae42

[03:52] <dalek> niecza: 86bc474 | (Solomon Foster)++ | t/spectest.data:

[03:52] <dalek> niecza: Turn on S03-operators/range-int.t.

[03:52] <dalek> niecza: review: https://github.com/sorear/niecza/commit/86bc474a54

[03:53] <dalek> roast: 2311165 | (Solomon Foster)++ | S03-operators/range.t:

[03:53] <dalek> roast: Refudge for niecza.

[03:53] <dalek> roast: review: https://github.com/perl6/roast/commit/231116511b

[03:53] <colomon> with the new fudging on range.t, it ought to be 500+ new passing tests.

[04:10] *** birmjin left
[04:12] *** Radvendii left
[04:15] <colomon> sorear: Unhandled exception: Autoloading NYI  

[04:15] <colomon> any idea how I might have triggered that?

[04:16] <dalek> roast: 7b0eeb3 | (Solomon Foster)++ | S05-mass/rx.t:

[04:16] <dalek> roast: Refudge for niecza.

[04:16] <dalek> roast: review: https://github.com/perl6/roast/commit/7b0eeb3bf0

[04:17] <sorear> colomon: :P5

[04:18] <abercrombie> Hi all, why .* in a regex in rakudo doesn't backtrack?

[04:18] <sorear> abercrombie: Because you put parentheses around it.

[04:18] <abercrombie> but niecza does it?

[04:19] <sorear> colomon: that error message is kind of a fossil; when I was first trranslating niecza into Perl 6, :Perl5 relied on "require" to work, which wasn't implemented

[04:19] <sorear> abercrombie: Backtracking/parentheses is a bug which gets reported here pretty much daily.

[04:19] <colomon> looks like that might be it

[04:19] <sorear> abercrombie: sadly, the Rakudo regex engine currently has a bus number of 0

[04:20] <abercrombie> ok. So currently is there a way to make rakudo does backtrack even .* in parenthese? Or should I add some thing? I

[04:21] <sorear> I am not aware of any workaround

[04:22] <abercrombie> Then which way is the standard? I mean (.*), according to standard, it should or not backtrack?

[04:22] <sorear> abercrombie: Should.

[04:22] <abercrombie> Thanks!

[04:22] <moritz> the presence of parens should have no influence on backtracking

[04:23] <abercrombie> ok, I got it. Thank you, experts.

[04:28] *** cooper left
[04:47] <dalek> niecza: 886540f | sorear++ | / (5 files):

[04:47] <dalek> niecza: Implement $var in regexes using Regex objects as subregexes (fixes #77)

[04:47] <dalek> niecza: review: https://github.com/sorear/niecza/commit/886540f65e

[04:49] <colomon> sorear: working on epic refudge of rx.t

[04:49] <colomon> going to have to quite halfway through and go to sleep

[04:50] <sorear> colomon: how much was rx.t fudged before?

[04:50] <colomon> might not have been fudged at all for niecza

[04:50] <colomon> it's very heavily fudged for pugs and rakudo

[04:50] <colomon> we're going to have to skip or todo about 125 tests.

[04:50] <colomon> but that least us with nearly 600 working tests

[04:51] <dalek> roast: 03a5b5c | (Solomon Foster)++ | S05-mass/rx.t:

[04:51] <dalek> roast: Epic fudging for niecza, not yet complete.

[04:51] <dalek> roast: review: https://github.com/perl6/roast/commit/03a5b5cbe3

[04:51] <sorear> meanwhile, I'm trying to implement as much of S05 as I possibly can before the 26th

[04:52] <colomon> hopefully having a mostly working rx.t will be a big help.  :)

[04:52] <colomon> or at least, will be mildly useful.

[04:55] <colomon> afk # sleep

[04:55] <japhb> Is the bus number of regex in nom 0 because it's currently too complex to understand without a tutor, or because no one wants to learn something that is "about to" change, or something else entirely ...?

[04:55] <japhb> g'night, colomon

[04:56] *** jaldhar joined
[04:56] <sorear> japhb: it's 0 because pmichaud's wife has cancer and there is a massive tuit shortage in the Michaud household

[04:57] <japhb> sorear, I apologize, I was unclear.  I knew about pmichaud's wife and the related issues.  I meant, why has no one else picked it up yet?

[04:59] <sorear> japhb: I can't speak for everyone.  My personal reason for not picking up QRegex is that I have a regex engine of my own to deal with.

[05:01] <japhb> Sure, understood.  I guessed your reason, of course.  I was asking the channel at large, to find out if there was a reason none of the other regulars picked it up.

[05:03] <moritz> japhb: uhm, jnthn and diakopter did a fair bit of qregex hacking

[05:03] *** sftp left
[05:04] <japhb> moritz, ISTR jnthn++ saying he felt only qualified to make minor changes ...?  Or is that an out of date comment?

[05:05] <moritz> japhb: seems out of date-ish

[05:05] <japhb> Ah, that's good to hear!

[05:05] <moritz> japhb: for example he added :i, and helped diakopter++ with the DFA creation and backslash escapes in char classes

[05:06] <japhb> Ah good.  Then we have at least bus number .5.  ;-)

[05:06] * moritz tries to sleep once more

[05:06] <japhb> sleep well

[05:26] *** drbean left
[05:31] *** drbean joined
[05:34] *** nek joined
[05:36] *** thou joined
[05:36] *** alc left
[05:47] *** ponbiki joined
[05:53] *** jehymez joined
[06:03] *** kaleem joined
[06:03] *** jehymez left
[06:08] *** mkramer joined
[06:10] *** mkramer left
[06:16] <dalek> niecza: 95e0703 | sorear++ | / (4 files):

[06:16] <dalek> niecza: Implement @var in regexes, incl. LTM and regex elements

[06:16] <dalek> niecza: review: https://github.com/sorear/niecza/commit/95e070352f

[06:21] *** jehymez joined
[06:38] *** thou left
[06:44] *** molaf joined
[07:06] <dalek> features: ad5db4a | moritz++ | features.json:

[07:06] <dalek> features: nom has ObjAt

[07:06] <dalek> features: review: https://github.com/perl6/features/commit/ad5db4a7fc

[07:07] *** koban joined
[07:14] *** molaf left
[07:14] *** jehymez left
[07:16] *** jehymez joined
[07:21] *** ispeak_ joined
[07:22] *** cognominal___ joined
[07:23] <jnthn> morning!

[07:23] *** jehymez left
[07:23] <sorear> hi jnthn

[07:24] *** jehymez joined
[07:24] <moritz> \o jnthn, sorear 

[07:25] *** cognominal_ left
[07:25] *** lrnperl6 joined
[07:27] *** jehymez left
[07:27] <jnthn> sorear, japhb: It's not that I can't hack on QRegex and figure it out, given time to do it; I've fixed and added various bits. It's only code. It is, however, much less familiar than most of Rakudo to me, and hard to just quickly throw patches in to. I could hack on it in Nov 'cus I ignored my $dayjob a lot. :-) This month I had to pay a bit more attention to it. :-)

[07:28] <dalek> features: 9886972 | moritz++ | features.json:

[07:28] <dalek> features: niecza interpolates arrays into regexes

[07:28] <dalek> features: review: https://github.com/perl6/features/commit/9886972674

[07:28] *** jehymez joined
[07:33] <dalek> niecza: 854dc3f | sorear++ | / (3 files):

[07:33] <dalek> niecza: Less-insane implementation of regex_infix:<~>

[07:33] <dalek> niecza: 

[07:33] <dalek> niecza: The new implementation runs as a normal-ish quantifier, instead of

[07:33] <dalek> niecza: creating a pseudo subrule.  It uses the backtracking mechanism to

[07:33] <dalek> niecza: set and reset $*GOAL as needed.  Needs more tests.

[07:33] <dalek> niecza: review: https://github.com/sorear/niecza/commit/854dc3ff89

[07:35] <dalek> rakudo/nom: 8ea0b2b | moritz++ | src/core/ObjAt.pm:

[07:35] <dalek> rakudo/nom: ObjAt needs its own WHICH method, since it is a value type

[07:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8ea0b2b0ba

[07:36] <dalek> features: 8908da3 | sorear++ | features.json:

[07:36] <dalek> features: Niecza does conjunction too now

[07:36] <dalek> features: review: https://github.com/perl6/features/commit/8908da3a28

[07:36] * sorear -> sleep

[07:37] *** jehymez left
[07:37] <jnthn> phenny: tell kboga thanks for the feedback - fixed the bugs :)

[07:37] <phenny> jnthn: I'll pass that on when kboga is around.

[07:38] *** jehymez joined
[07:44] *** drbean left
[07:44] *** jehymez left
[07:46] *** jehymez joined
[07:48] *** koban left
[07:49] *** lrnperl6 left
[07:49] *** jehymez left
[07:50] *** drbean joined
[07:51] *** jehymez joined
[07:56] *** drbean left
[07:56] *** jehymez left
[07:56] *** drbean_ joined
[07:56] *** drbean_ is now known as drbean

[07:56] *** jehymez joined
[08:10] *** ponbiki left
[08:11] *** baest joined
[08:11] *** jehymez left
[08:13] *** jehymez joined
[08:13] *** wtw joined
[08:35] *** carlin left
[08:35] *** jehymez left
[08:37] *** jehymez joined
[08:39] *** mj41 joined
[08:47] *** _twitch joined
[08:53] *** abercrombie left
[09:08] *** _twitch left
[09:08] *** jehymez left
[09:09] *** jehymez joined
[09:18] *** am0c left
[09:18] *** bacek joined
[09:18] *** bacek left
[09:19] *** bacek joined
[09:19] *** bacek left
[09:22] *** drbean left
[09:22] *** jehymez left
[09:22] *** dakkar joined
[09:24] *** jehymez joined
[09:28] *** drbean joined
[09:28] *** jehymez left
[09:29] *** jehymez joined
[09:34] *** _twitch joined
[09:39] *** _twitch left
[09:47] *** icovnik joined
[09:59] <moritz> szabgab: http://de.arxiv.org/abs/1112.3335 I didn't know you were into lithography :-)

[10:07] <moritz> niecza: constant x = (1, 2, 3); .say for x;

[10:08] <p6eval> niecza v12-45-g854dc3f: OUTPUT«1␤2␤3␤»

[10:08] <moritz> nom: constant x = (1, 2, 3); .say for x;

[10:08] <p6eval> nom 8ea0b2: OUTPUT«===SORRY!===␤Cannot handle constant x with non-literal value yet at line 1, near "= (1, 2, 3"␤»

[10:10] <szabgab> moritz: :)

[10:10] *** jehymez left
[10:12] *** jehymez joined
[10:14] *** aindilis left
[10:14] *** aindilis joined
[10:15] *** jehymez left
[10:17] *** jehymez joined
[10:22] *** ispeak_ left
[10:33] *** geekosaur left
[10:33] *** nek left
[10:34] *** geekosaur joined
[10:34] *** jehymez left
[10:35] *** jehymez joined
[10:43] *** domidumont left
[10:43] *** domidumont joined
[10:44] *** jehymez left
[10:51] <moritz> nom: do { die "foo"; CATCH default { } }; say $!

[10:51] <p6eval> nom 8ea0b2: OUTPUT«===SORRY!===␤Missing block at line 1, near "default { "␤»

[10:51] <moritz> nom: do { die "foo"; CATCH { default { } } }; say $!

[10:51] <p6eval> nom 8ea0b2: OUTPUT«Exception.new()␤»

[10:51] <moritz> nom: do { die "foo"; CATCH { default { } } }; say $!.Str

[10:51] <p6eval> nom 8ea0b2: OUTPUT«foo␤»

[10:56] *** daxim joined
[10:57] *** drbean left
[11:01] *** jehymez joined
[11:04] *** drbean joined
[11:06] *** mtk left
[11:06] *** jehymez left
[11:15] *** daxim left
[11:15] *** daxim joined
[11:17] <flussence> nom: say 'abc'.indent(4)

[11:17] <p6eval> nom 8ea0b2: OUTPUT«Method 'indent' not found for invocant of class 'Str'␤  in block <anon> at /tmp/Cz3rzZIxa1:1␤  in <anon> at /tmp/Cz3rzZIxa1:1␤»

[11:17] <flussence> I've got working code for that, if anyone wants it...

[11:17] <flussence> b: say 'abc'.indent(4)

[11:17] <p6eval> b 1b7dd1: OUTPUT«    abc␤»

[11:17] <flussence> niecza: say 'abc'.indent(4)

[11:17] <p6eval> niecza v12-45-g854dc3f: OUTPUT«Unhandled exception: Unable to resolve method indent in class Str␤  at /tmp/tsZ6hF77HW line 1 (mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2229 (ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2230 (module-CORE @ 58) ␤  at /home…

[11:18] <flussence> doesn't work on niecza, though :(

[11:18] <tadzik> flussence: wasn't that you who implemented it in nom in the first place?

[11:19] <flussence> I did the old version, I just remembered I'd fixed it up for nom too

[11:19] <moritz> flussence: but you didn't submit a patch, did you?

[11:19] <flussence> hm, probably not :)

[11:20] <flussence> (it's not in patch-ready form yet, I've done it as a bunch of subs)

[11:21] <moritz> http://moritz.faui2k3.org/tmp/exceptions.pod proposed advent post for today

[11:21] <moritz> I'll probably leave for lunch in a few minutes, but will backlog for feedback

[11:22] <moritz> and then publish (unless the general feedback is "don't publish" :-)

[11:22] <tadzik> haha, nice title ;)

[11:25] <tadzik> moritz: t accesses an attribute that wasn't declare in class -- s/declare/declared/?

[11:26] <moritz> aye

[11:26] <tadzik> moritz: the last code snippet misses a } I think

[11:26] <tadzik> method message() { "Permission denied: $.reason";

[11:27] <moritz> thanks

[11:27] * moritz should actually test his code :-)

[11:27] <tadzik> I very like it, and learned stuff from it. moritz++

[11:27] <tadzik> erm, really like it

[11:27] <moritz> \o/

[11:29] <moritz> ok, corrected, and actually works now

[11:30] <moritz> btw an exception class can chose not show the backtrace by overwriting .gist

[11:30] <moritz> if you write  multi method gist(X::MyType:D) { $.message }

[11:30] <moritz> you get no backtrace by default

[11:31] <moritz> but somebody who catches the exception can still call .backtrace on the object to obtain it

[11:32] <moritz> but maybe there should be a boolean $.show-bt option or so, and the default .gist respects that, or so

[11:33] <tadzik> or a dynvar

[11:34] <moritz> I don't think that property belongs to a dynamic scope

[11:34] <moritz> I mean, there are typically two use cases for exceptions

[11:34] <moritz> one to signal an error to the user

[11:34] <tadzik> possibly. I'm just throwing ideas around :)

[11:34] <moritz> and one to bail out when an internal error is detected

[11:34] <moritz> so IMHO it would make sense to have two separate throw functions for that

[11:35] <tadzik> why so?

[11:35] <moritz> error 'You entered a bad number'; # surpressed backtrace by default, directed at the user

[11:35] <moritz> die 'OH NOEZ, something bad happened'; # internal error, directed at the programmer; should include a backtrace by default

[11:35] <tadzik> I think in the second case you're unlikely to bother with the backtrace. You'll just read the type, and possibly the message... oh,the message prints backtrace by default?

[11:36] <moritz> not the message, the outer-most exception handler

[11:37] <tadzik> okay. I think if it's not something user-directed, it shouldn't probably be caught by the outer-most EH. I'll rather care about catching it and present it to a user in an appropriate way

[11:38] <moritz> if it's not caught by the outer-most EH, the excpetion silently aborts the program

[11:39] <moritz> afk, lunch

[11:48] *** drbean left
[11:55] *** drbean joined
[11:58] *** jlaire left
[11:59] *** jlaire joined
[12:03] *** ispeak_ joined
[12:11] *** Patterner left
[12:12] *** Psyche^ joined
[12:12] *** Psyche^ is now known as Patterner

[12:16] <tadzik> http://mapofcpan.org/#/

[12:22] <jnthn> moritz++ # dat title

[12:23] *** drbean left
[12:25] <jnthn> Rakudo switched to X::Comp objects - missing are

[12:25] *** mkramer joined
[12:25] <jnthn> I don't like your nose either :P 

[12:26] <jnthn> moritz++ 

[12:27] <tadzik> :P

[12:28] *** drbean joined
[12:29] <flussence> funny thing is, PHP's had an entire exception class hierarchy like this for years... and it doesn't use it!

[12:30] <tadzik> :)

[12:32] <dalek> roast: aea2197 | (Solomon Foster)++ | S05-mass/rx.t:

[12:32] <dalek> roast: Finish epic fudging for niecza.

[12:32] <dalek> roast: review: https://github.com/perl6/roast/commit/aea219782d

[12:38] *** orafu left
[12:39] *** orafu joined
[12:41] *** mkramer left
[12:41] <moritz> http://perl6advent.wordpress.com/2011/12/15/day-15-something-exceptional/ # now online

[12:43] *** Patterner left
[12:44] <moritz> submitted to http://news.ycombinator.com/item?id=3355907 too

[12:45] *** Psyche^ joined
[12:45] *** Psyche^ is now known as Patterner

[12:48] <Juerd> I love exceptions in Perl 6. Thanks for reminding me that they're beautiful.

[12:48] <moritz> you're welcome

[12:51] *** drbean left
[12:56] *** drbean joined
[12:57] *** mkramer joined
[12:57] <colomon> phenny: tell sorear rx.t is now fudged for niecza.  There are something like 125 tests fudged, so it feels weird to add it to to spectest.data.  On the other hand, there are 600 or so tests that pass, which would be good to test.  Your opinion?

[12:57] <phenny> colomon: I'll pass that on when sorear is around.

[12:58] <colomon> phenny: tell sorear your latest patches have already broken my fudging!  ;)

[12:58] <phenny> colomon: I'll pass that on when sorear is around.

[13:09] <geekosaur> heh

[13:13] *** kaleem left
[13:16] *** mkramer left
[13:16] *** risou_awy is now known as risou

[13:27] *** tokuhirom left
[13:32] <[Coke]> jnthn++ pmichaud++ moritz++ sorear++ colomon++

[13:34] <[Coke]> colomon: IMO, if the test runs, fudged, and has 1 passing test, all is well.

[13:34] <[Coke]> if ALL the tests are fudged, then maybe not.

[13:44] *** ispeak_ left
[13:45] *** drbean left
[13:52] *** drbean joined
[13:54] <moritz> wow, >2k page views on the advent calendar today

[13:54] <[Coke]> huh. looks like I now have booking.com's routing numbers!

[13:54] <moritz> mostly due to jnthn++'s excellent posting on meta programming, coming from hacker news, reddit and twitter (in that order)

[13:55] <[Coke]> (assuming checks in the EU work like checks in the US.)

[13:58] *** donri joined
[14:01] *** kaleem joined
[14:04] *** mtk joined
[14:10] <jnthn> moritz: oh, the meta-programming post got widespread? :)

[14:10] <jnthn> nice :)

[14:10] <jnthn> Happy it was liked.

[14:10] <jnthn> Well. read. ;)

[14:11] <moritz> jnthn: yep, 1.9k views on just that page

[14:12] <[Coke]> jnthn++, nice article.

[14:12] *** benabik left
[14:16] *** hrj joined
[14:16] *** zamolxes joined
[14:16] <jnthn> Hm. In front of a class doing stuff on the whiteboard is a bad time to discover you've no clue how to draw an &. :)

[14:16] <jnthn> .oO( by h& )

[14:17] <moritz> yes, that takes some practise :-)

[14:19] <jnthn> Good job I don't teach C. :)

[14:19] <flussence> & is an upside-down duck, more or less

[14:20] <huf> it's benjamin franklin

[14:20] <huf> pot-bellied dude in a... the long tailed coat

[14:25] <[Coke]> do it "cursive". 3, reversed, with a |

[14:25] <colomon> [Coke]: unfortunately, the file now has 0 tests passing, as it fails with a mysterious error it didn't get before sorear++'s latest changes.

[14:25] <jnthn> I'm not sure cursing would have helped

[14:26] <jnthn> oh, wait...you meant... :)

[14:26] <[Coke]> colomon: well, that sucks.

[14:26] <colomon> agreed

[14:26] *** Patterner left
[14:27] <flussence> jnthn: might help to remember that it's just a stylised "Et" ligature - it's supposed to be an unintelligible squiggle!

[14:27] *** Psyche^ joined
[14:27] *** Psyche^ is now known as Patterner

[14:27] *** agentzh left
[14:27] <jnthn> flussence: OH! That's where it came from!

[14:27] *** Sarten-X left
[14:28] <colomon> [Coke]: I mean, it's dying hard -- it never actually starts executing the file, as far as I can tell.

[14:28] <colomon> I think it must be dying while parsing the regexes

[14:29] <jnthn> Die Hard with a Regex

[14:29] *** c1sung joined
[14:30] <[Coke]> *snrk*

[14:35] <colomon> now working on locating the problem using proof by intimidation.  

[14:36] * moritz just found out that the ear plugs on his mp3 player are not free of side effects -- without them, radio receiving functionality doesn't work

[14:36] <moritz> seems it abuses the cables to ear plugs as an antenna. Clever.

[14:36] <colomon> oh yeah, my old iRiver did something like that

[14:36] <flussence> I think I had an old electronics set that did that :)

[14:37] <colomon> but I never actually used the radio functionality...

[14:38] *** Sarten-X joined
[14:42] <colomon> phenny: tell sorear the crash occurs in the following regex: 'abcdef' ~~ /<[dcb]>**{3}/

[14:42] <phenny> colomon: I'll pass that on when sorear is around.

[14:42] <colomon> niecza: say 'abcdef' ~~ /<[dcb]>**{3}/

[14:42] <p6eval> niecza v12-45-g854dc3f: OUTPUT«Unhandled exception: Unable to resolve method postcircumfix:<( )> in class Any␤  at /home/p6eval/niecza/src/RxOp.pm6 line 141 (Quantifier.code @ 15) ␤  at /home/p6eval/niecza/src/niecza line 66 (RegexBody.code @ 20) ␤  at /home/p6eval/niecza/src/Op.pm6 lin…

[14:43] <colomon> there it is.

[15:00] *** drbean left
[15:02] *** envi_ left
[15:02] *** envi_ joined
[15:04] *** MindosCheng joined
[15:06] *** drbean joined
[15:07] *** ispeak_ joined
[15:11] <sjn> nom: ("a".."p" X~ 1..24)».say

[15:11] <p6eval> nom 8ea0b2: OUTPUT«m17␤a10␤d22␤c6␤p9␤e6␤a18␤m13␤f7␤m23␤k6␤g15␤f21␤l15␤d6␤p8␤d13␤e3␤p13␤f18␤m9␤o14␤p21␤e23␤k14␤b14␤n15␤b4␤k23␤d18␤n21␤j7␤j18␤n8␤l20␤e15␤d8␤f23␤p4␤j19␤c4␤h5␤g20␤m12␤c11␤e22␤g23␤f20␤m19␤h2␤l23␤n17␤i2␤n23␤m20␤m11␤c9␤m21␤o22␤l11␤e11␤m1␤h16␤b7␤j1␤i18␤o8␤m22␤h18␤g12␤j22␤c18􏿽xE2􏿽x90

[15:11] <sjn> question... why isn't that list sorted in some way?

[15:11] <moritz> sjn: >> is supposed to parallelize

[15:11] <sjn> ooh

[15:11] <moritz> sjn: so it's not intended for things that produce side effects

[15:12] <colomon> nom: for ("a".."p" X~ 1..24) { .say }

[15:12] <p6eval> nom 8ea0b2: OUTPUT«a1␤a2␤a3␤a4␤a5␤a6␤a7␤a8␤a9␤a10␤a11␤a12␤a13␤a14␤a15␤a16␤a17␤a18␤a19␤a20␤a21␤a22␤a23␤a24␤b1␤b2␤b3␤b4␤b5␤b6␤b7␤b8␤b9␤b10␤b11␤b12␤b13␤b14␤b15␤b16␤b17␤b18␤b19␤b20␤b21␤b22␤b23␤b24␤c1␤c2␤c3␤c4␤c5␤c6␤c7␤c8␤c9␤c10␤c11␤c12␤c13␤c14␤c15␤c16␤c17␤c18␤c19␤c20␤c21␤c22␤c23␤c24␤d1􏿽xE2

[15:12] <sjn> ok

[15:12] <sjn> is there a non-parallelizing equivalent to »?

[15:13] <moritz> .map

[15:14] <sjn> equivalent, as in "can replace » directly in this example"

[15:16] <sjn> no matter

[15:18] <sjn> moritz: thanks anyway :)

[15:18] <sjn> btw

[15:19] <sjn> is there a way I could have found out this fact (» being parallelizing) using some introspection feature?

[15:20] *** drbean left
[15:22] <sjn> (sorry about all the silly questions, hope I'm not being too annoying here)

[15:27] *** drbean joined
[15:27] <moritz> sjn: not really; it's a feature that the compiler implements directly, it's not done via introspectable objects

[15:28] <moritz> and no, not annoying; perl 6 questions are exactly what this channel is for :-)

[15:29] <jnthn> nom: ("a".."p" X~ 1..24).map: *.say

[15:29] <p6eval> nom 8ea0b2:  ( no output )

[15:29] <jnthn> oh heh, too lazy

[15:29] <jnthn> nom: .say for "a".."p" X~ 1..24 # kinda clean

[15:29] <p6eval> nom 8ea0b2: OUTPUT«a1␤a2␤a3␤a4␤a5␤a6␤a7␤a8␤a9␤a10␤a11␤a12␤a13␤a14␤a15␤a16␤a17␤a18␤a19␤a20␤a21␤a22␤a23␤a24␤b1␤b2␤b3␤b4␤b5␤b6␤b7␤b8␤b9␤b10␤b11␤b12␤b13␤b14␤b15␤b16␤b17␤b18␤b19␤b20␤b21␤b22␤b23␤b24␤c1␤c2␤c3␤c4␤c5␤c6␤c7␤c8␤c9␤c10␤c11␤c12␤c13␤c14␤c15␤c16␤c17␤c18␤c19␤c20␤c21␤c22␤c23␤c24␤d1􏿽xE2

[15:29] <moritz> nom: sink ("a".."c" X~ 1..4).map: *.say

[15:29] <p6eval> nom 8ea0b2: OUTPUT«a1␤a2␤a3␤a4␤b1␤b2␤b3␤b4␤c1␤c2␤c3␤c4␤»

[15:30] <flussence> ooh, I've never seen "sink" before...

[15:30] <jnthn> it should really sink itself there

[15:30] <flussence> what's the difference between that and "eager"?

[15:30] <moritz> flussence: "eager" keeps the values

[15:31] <moritz> flussence: "sink" knows it can discard them

[15:31] <flussence> oh!

[15:32] <moritz> nom: sink 1.map: &die

[15:32] <p6eval> nom 8ea0b2: OUTPUT«1␤  in method reify at src/gen/CORE.setting:4346␤  in method reify at src/gen/CORE.setting:4253␤  in method reify at src/gen/CORE.setting:4253␤  in method gimme at src/gen/CORE.setting:4614␤  in method eager at src/gen/CORE.setting:4590␤  in method eager at src/gen/CO…

[15:32] <moritz> though it doesn't seem to take advantage of that fact

[15:33] <jnthn> Don't be so sure without checking the code. :-) I've seen :$sink parameters int eh list implementation :)

[15:33] * moritz just looked at the "eager" methods and thought "it takes the same code path"

[15:34] <moritz> ack -w sink src/core

[15:34] <moritz> finds only 3 matches

[15:35] <moritz> and statement_prefix:sym<sink> emits a call to &eager, without extra arguments

[15:36] <jnthn> ugh

[15:36] <jnthn> fail

[15:36] <jnthn> Guess Pm never finishd that bit then.

[15:40] <moritz> and it seems the :$sink argument is never passed

[15:40] *** thou joined
[15:41] *** kaare_ joined
[15:41] *** baest left
[15:45] <sorear> good * #perl6

[15:45] <phenny> sorear: 12:57Z <colomon> tell sorear rx.t is now fudged for niecza.  There are something like 125 tests fudged, so it feels weird to add it to to spectest.data.  On the other hand, there are 600 or so tests that pass, which would be good to test.  Your opinion?

[15:45] <phenny> sorear: 12:58Z <colomon> tell sorear your latest patches have already broken my fudging!  ;)

[15:45] <phenny> sorear: 14:42Z <colomon> tell sorear the crash occurs in the following regex: 'abcdef' ~~ /<[dcb]>**{3}/

[15:49] <dalek> niecza: a50ac9b | sorear++ | src/RxOp.pm6:

[15:49] <dalek> niecza: Fix typo on RxOp.pm6:141 (colomon++)

[15:49] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a50ac9b0d4

[15:55] <sorear> phenny: tell colomon ('abcdef' ~~ /<[dcb]>**{3}/) fixed.

[15:55] <phenny> sorear: I'll pass that on when colomon is around.

[15:57] <sorear> yay, rx.t passes now.

[15:59] *** icovnik left
[16:08] *** Trashlord left
[16:12] *** Trashlord joined
[16:16] * moritz finds that he doesn't understand ListIter at all

[16:22] <moritz> let me try to summarize...

[16:23] <moritz> List has an RPA called $!items that holds the items that have been reified already

[16:24] <moritz> it also a $!nextiter, which is presumably of type ListIter

[16:24] <moritz> or is it?

[16:24] <moritz> nom: say (1..*).list.WHAT

[16:24] <p6eval> nom 8ea0b2: OUTPUT«List()␤»

[16:25] <moritz> nom: say nqp::getattr((1..*).list, List, '$!nextiter').WHAT

[16:25] <p6eval> nom 8ea0b2: OUTPUT«ListIter()␤»

[16:27] <moritz> and when I call List.iterator, it generates a *new* ListIter, which gets both the reified elements and $!nextiter

[16:30] <moritz> and then it gets hairy, because I don't know what all the custom opcodes do, like perl6_shiftpush

[16:30] <sorear> one of the important insights in Niecza's list implementation is that .iterator really has to return a _set_ of cursors

[16:30] <sorear> I think ListIter is Rakudo's equivalent concept?

[16:31] <moritz> ListIter seems to be a linked list of some sorts

[16:31] *** benabik joined
[16:33] <moritz> hm, given a code like

[16:33] <sjn> jnthn: I ended up with .say for "a".."p" X~ 1..24 too

[16:33] <moritz> my @x = 1... $big_number; @x.sink; .say for @x

[16:33] <sjn> btw

[16:34] <moritz> what should the result be?

[16:34] *** sftp joined
[16:34] *** kaleem left
[16:34] <sjn> I've been chatting with Damian lately, and he's coming to Oslo in April.. Would it be sensible to try and set up a weekend hackathon when he's here?

[16:35] <sjn> we're talking the weekend of april 20th-22nd 2012

[16:36] <sjn> venue is ready, and I might be able to find some partial funding for it (to help people get to Oslo)

[16:36] <sjn> comments, critique, please. :9

[16:36] <moritz> +Inf from me :-)

[16:37] <colomon> sorear++

[16:37] <phenny> colomon: 15:55Z <sorear> tell colomon ('abcdef' ~~ /<[dcb]>**{3}/) fixed.

[16:38] <sjn> jnthn, masak, you guys are pretty close, what do you think?

[16:38] <moritz> arnsholt might be interested too

[16:39] <colomon> Damian is awesome.  :)

[16:39] <sjn> that's very cool :)

[16:41] <colomon> sorear: Okay, I'm adding rx.t to spectest.data -- seems like this bug was a pretty good example of why it should be in the spectest now.  :)

[16:48] <jnthn> sjn: I can probably come, especially if I get a date.

[16:48] <jnthn> er...misword :P

[16:49] <jnthn> especially if you tell me the date...oh but you did :)

[16:49] * jnthn goes and adds it to the schedule so nobody books him for anything :)

[16:50] * moritz is kinda glad to see that even native speakers occasionally run into such accidental uses of ambiguous or compound words

[16:50] * jnthn gets scared when he looks at the $dayjob diary for as far away as April and there's already stuff in it.

[16:50] <jnthn> sjn: Dates blocked out in my schedule. :)

[16:50] <sorear> jnthn has worked at $dayjob in the future?

[16:51] <jnthn> sorear: No, just bound to work at $dayjob in the future :P

[16:52] <jnthn> My looks botheredly at how his January already looks like hard work.

[16:53] <jnthn> er, /me

[16:53] <dalek> niecza: 8bc4441 | (Solomon Foster)++ | t/spectest.data:

[16:53] <dalek> niecza: Turn on S05-mass/rx.t.

[16:53] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8bc4441efb

[16:53] <jnthn> Yeah, I really should just go and eat nice curry tonight rather than do anything that matters. :)

[16:54] *** envi_ left
[16:55] <[Coke]> jnthn++ # enjoy the curry!

[16:55] <jnthn> [Coke]: Will when I get there. Not quite hungry enough yet. :)

[16:57] *** mj41 left
[16:57] *** lichtkind joined
[16:57] <lichtkind> o/

[17:00] *** wtw left
[17:00] <jnthn> hi lichtkind 

[17:01] <lichtkind> jnthn: i really hope to help you more next year, 

[17:01] <lichtkind> i was excited to see niecze do gui

[17:01] <lichtkind> i compiled it

[17:01] <lichtkind> but still not tested

[17:02] <jnthn> :)

[17:02] <lichtkind> but id rather use rakudo

[17:02] <lichtkind> omn somer grammar stuff, plan talk about that in erlangen anyway

[17:02] <jnthn> lichtkind: I will get callbacks in native call as soon as I get to tuits :)

[17:02] <lichtkind> jnthn: you plan any talk for erlangen?

[17:02] <jnthn> *the tuits

[17:02] <jnthn> My English is very broken today :(

[17:03] <jnthn> lichtkind: I didn't submit anything yet. Probably should.

[17:03] <lichtkind> its march

[17:03] *** fsergot joined
[17:03] <jnthn> lichtkind: Yeah, I already have the dates marked in my calendar :)

[17:03] <fsergot> hi o/ !

[17:03] <jnthn> o/ fsergot 

[17:04] <lichtkind> \o

[17:04] *** risou is now known as risou_awy

[17:04] <lichtkind> jnthn: i can hand over the topic if you wish but so you can concentrate on the more in depth stuff

[17:04] <jnthn> General question: seems we still have holes in the advent calendar schedule. I can do one more post, though Saturday at earliest.

[17:04] <jnthn> Shall I?

[17:05] <moritz> yes

[17:05] <lichtkind> jnthn: and on other side kephraXP is doing well only 3 good days more and you actually can use it for editing

[17:05] <jnthn> lichtkind: Well, if I did talk about grammars right now it'd probably be about Grammar::Debugger

[17:05] *** mkramer joined
[17:05] <jnthn> Since my meta-programming post got a good reply maybe I should give some talks on that. :)

[17:05] <lichtkind> moritz: the reason why im here is to finish that 

[17:05] <moritz> finish what?

[17:05] <jnthn> Perl 6!

[17:06] <lichtkind> haha

[17:06] <moritz> oh yeah, of course :-)

[17:06] <jnthn> ++lichtkind ;-)

[17:06] *** mkramer left
[17:06] <lichtkind> no the calendar text

[17:06] <lichtkind> had $job and $grandma 

[17:07] <lichtkind> just finishing nom now :)

[17:07] <lichtkind> jnthn: i dont mean your work :)

[17:07] <jnthn> :P

[17:09] <lichtkind> jnthn: so your fine with that work division in erlangen, i thought about talking abot hashes since i dindt did that part of the topic i promised, but grammars are really the blazing feature

[17:09] *** kaare_ left
[17:10] <moritz> lichtkind: I'm sure that whatever Perl 6 talks you submit, jnthn, tadzik, mberends and me will find enough interesting Perl 6 topics to talk about :-)

[17:11] <[Coke]> nom: say 9673/18374

[17:11] <p6eval> nom 8ea0b2: OUTPUT«0.526450419070426␤»

[17:11] <[Coke]> (from https://gist.github.com/1476841)

[17:12] <dalek> roast: 02c4e6d | (Solomon Foster)++ | S02-types/range.t:

[17:12] <dalek> roast: Unfudge tests niecza now passes.

[17:12] <dalek> roast: review: https://github.com/perl6/roast/commit/02c4e6df98

[17:13] <moritz> jnthn: oh, $obj."$meth"() emits code the calls the get_string vtable

[17:14] <moritz> find_lex $P10, "$meth"

[17:14] <moritz> $S100 = $P102."Stringy"()

[17:15] <jnthn> D'oh.

[17:17] <dalek> rakudo/nom: b70ea99 | moritz++ | src/core/ListIter.pm:

[17:17] <dalek> rakudo/nom: missing unbox

[17:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b70ea99ec5

[17:17] *** baest joined
[17:18] <moritz> (that commit is unrelated)

[17:20] * [Coke] ponders doing the test_summary comparision on a synopsis granularity level.

[17:20] * [Coke] wonders if that would be helpful to, say, sorear.

[17:24] *** skangas joined
[17:25] <sorear> [Coke]: can't say.

[17:31] <[Coke]> would get you a way to see how niecza compares to rakudo on, e.g. S05.

[17:31] * [Coke] finds a use for the ff operator. huh.

[17:32] *** fsergot left
[17:35] <lichtkind> [Coke]++

[17:46] <moritz> I might have a patch for the vtable codegen, spectesting

[17:53] <lichtkind> it there a way to get exception (space dont sperate) in <> ?

[17:53] <sorear> is cedric-vincent one of us?

[17:54] *** pyrimidine joined
[17:54] *** fsergot joined
[17:58] <moritz> perl6: say <a\ b>.elems

[17:59] <p6eval> pugs b927740, rakudo b70ea9, niecza v12-47-g8bc4441: OUTPUT«2␤»

[17:59] <moritz> seems like "no"

[17:59] *** snearch joined
[17:59] <dalek> rakudo/nom: 081cc0e | moritz++ | src/Perl6/Actions.pm:

[17:59] <dalek> rakudo/nom: fix codgen for ."$var"()

[17:59] <dalek> rakudo/nom: 

[17:59] <dalek> rakudo/nom: it used to call the get_string vtable, now uses an explicit unbox_s

[17:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/081cc0e279

[18:03] *** fsergot left
[18:05] <dalek> niecza: c1f4746 | sorear++ | / (2 files):

[18:05] <dalek> niecza: Less-insane implementation of $<foo>=[...]

[18:05] <dalek> niecza: 

[18:05] <dalek> niecza: No longer generates an anonymous subrule!

[18:05] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c1f47469a7

[18:06] <pyrimidine> 'less insane' is always nice

[18:09] *** dakkar left
[18:16] * [Coke] vaguely wishes he could write $foo{'rakudo'}[0][0] as $foo.rakudo.0.0

[18:16] <sorear> ineeed

[18:18] <[Coke]> maybe as $foo{rakudo.0.0}

[18:20] <PerlJam> sounds like someone has been playing with template toolkit.

[18:20] <sjn> btw, are there any meaningful mailing lists or similar that I should send a mail to about the April 20-22 hackathon?

[18:21] <sorear> perl6-announce

[18:21] *** kboga joined
[18:22] <sjn> sorear: cool, thanks. any other places? :)

[18:23] <[Coke]> which country was this in again?

[18:23] <sjn> [Coke]: Oslo, Norway

[18:23] <sjn> also, since Damian is coming, are there any specific topics worth focusing on while he's in Oslo?

[18:23] <moritz> sjn: [email@hidden.address]
[18:23] <moritz> not sure if non-members can post there

[18:25] *** fsergot joined
[18:25] *** icovnik joined
[18:25] * sjn joins

[18:27] * PerlJam wonders what mapofcpan.org would look like for the perl 6 modules we have so far

[18:27] <kboga> moritz: Exceptional blogpost!  (tiny CATCH s/can chose/can choose/) :)

[18:27] <phenny> kboga: 07:37Z <jnthn> tell kboga thanks for the feedback - fixed the bugs :)

[18:27] <kboga> np, thanks for blogging jnthn

[18:28] <[Coke]> how to push an array of values (@foo) as a single element onto an AoA? (@bar) 

[18:28] <[Coke]> PerlJam: like a very sad island of misfit toys?

[18:29] <moritz> [Coke]: @bar.push: @foo.item

[18:29] <moritz> or @bar.push: $(@foo)

[18:30] *** localhost left
[18:32] *** localhost joined
[18:33] <[Coke]> \o/

[18:33] <[Coke]> moritz++

[18:34] *** Trashlord left
[18:34] *** fridim_ left
[18:34] *** kaleem joined
[18:35] <[Coke]> nom: mY @a = (1,2,3); say $a[0][0][0][0][0];

[18:35] <p6eval> nom 081cc0: OUTPUT«===SORRY!===␤Variable @a is not predeclared at line 1, near " = (1,2,3)"␤»

[18:35] <[Coke]> nom: my @a = (1,2,3); say $a[0][0][0][0][0];

[18:35] <p6eval> nom 081cc0: OUTPUT«===SORRY!===␤Variable $a is not predeclared at line 1, near "[0][0][0]["␤»

[18:35] <[Coke]> nom: my @a = (1,2,3); say @a[0][0][0][0][0]; #5ism

[18:35] <p6eval> nom 081cc0: OUTPUT«1␤»

[18:35] *** fsergot left
[18:36] <[Coke]> nom: say $(1)[0]

[18:36] <p6eval> nom 081cc0: OUTPUT«1␤»

[18:39] *** molaf joined
[18:46] *** molaf left
[18:54] <[Coke]> is auto-flattening solving a problem? (I'm very surprised whenever I realize that's why I only have a 1-d list.)

[18:56] *** Chillance joined
[18:56] <[Coke]> (how can one write a literal 2D array?)

[18:57] <moritz> [Coke]: it's what makes it possible write   for 0..9, 'a'..'z' { }  which does seem rather need

[18:57] <moritz> my @a2d = [1, 2], [3, 4], [5, 6]

[18:57] <[Coke]> ah, not parens. Danke.

[19:00] *** daxim left
[19:01] *** kboga left
[19:07] <[Coke]> nom: my %foo; %foo{'a'}{'b'} = 3;

[19:07] <p6eval> nom 081cc0: OUTPUT«Method 'at_key' not found for invocant of class 'Any'␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1155␤  in block <anon> at /tmp/6oG14d7nhm:1␤  in <anon> at /tmp/6oG14d7nhm:1␤»

[19:07] <PerlJam> autoviv bug

[19:08] <[Coke]> so that should work, then?

[19:08] <PerlJam> It should, but never has to my knowledge

[19:12] * [Coke] ponders a .pretty, because .perl is too lumpy.

[19:12] <PerlJam> [Coke]: +1  (I wanted that just yesterday)

[19:13] *** Trashlord joined
[19:14] <moritz> call it .gist

[19:15] <[Coke]> looks like that's already taken!

[19:15] <[Coke]> (if the suggestion is to use gist instead of perl, it's still too ugly.)

[19:15] <PerlJam> .gist isn't quite right anyway

[19:16] <moritz> on what kind of object?

[19:18] <[Coke]> hash of hash of list of list. or something like that.

[19:18] <[Coke]> (comes through a a single line of output, which is only slightly helpful.)

[19:22] <[Coke]> nom: '"hi","bye"'.split(',').map: { s:g/'"'//; $_};

[19:22] <p6eval> nom 081cc0:  ( no output )

[19:23] <[Coke]> nom: say '"hi","bye"'.split(',').map: { s:g/'"'//; $_}

[19:23] <p6eval> nom 081cc0: OUTPUT«Cannot assign to a non-container␤  in sub infix:<=> at src/gen/CORE.setting:8305␤  in block <anon> at /tmp/HHc4J2__em:1␤  in method reify at src/gen/CORE.setting:4348␤  in method reify at src/gen/CORE.setting:4253␤  in method reify at src/gen/CORE.setting:4253␤  in me…

[19:23] <[Coke]> I'm sure I'm anticipating something to work like perl5 here when it doesn't.

[19:25] <[Coke]> ah, the $_ is readonly in the map. bleargh.

[19:26] <[Coke]> is there a more sixian way to write that then copying $_ by hand in the map block?

[19:27] *** Moukeddar joined
[19:27] *** Moukeddar left
[19:27] <benabik> .subst(/'"'/, '', :g)  ?

[19:28] <[Coke]> that certainly works for this case. Danke.

[19:28] <moritz> or .map: { (my $x = $_) ~~ s:g/'"'// }

[19:29] <benabik> nom: say '"hi","bye"'.split(',').map: { (my $ = $_) ~~ s:g/'"'// } # I wonder….

[19:29] <p6eval> nom 081cc0: OUTPUT«True True␤»

[19:30] <moritz> oh, it doesn't return the modified string

[19:30] <benabik> Apparently not.

[19:30] <benabik> nom: say '"bye"'.subst(/\"/, '', :g)

[19:30] <p6eval> nom 081cc0: OUTPUT«bye␤»

[19:30] <benabik> But subst does.

[19:32] <[Coke]> moritz: right. does perl6 have the new perl5 way to return the modifid string yet?

[19:32] * [Coke] forgets which modifier that is.

[19:32] <moritz> /r iirc, but not sure

[19:32] <moritz> [Coke]: no

[19:32] *** drbean left
[19:33] <benabik> :r means :ratchet in STD (although not in spec)

[19:33] <moritz> not in spec? then we should add that quickly

[19:34] <moritz> (rakudo supports it too)

[19:35] <benabik> I don't see it in S05 at least.

[19:35] <moritz> it's not in there, right

[19:35] <benabik> Maybe :f(:$functional) to make it return the value?

[19:35] <moritz> we can always use :copy for the long form

[19:36] <moritz> but :c is already taken

[19:36] <moritz> benabik: hm, nice

[19:36] *** ispeak_ left
[19:36] <benabik> Although that's a long long form.  :-D

[19:36] <PerlJam> I seem to recall there was a table in A05 for both the long and short forms.  Maybe it jsut needs to be copied (and updated) to S05

[19:37] <moritz> niecza: say 'aaa' ~~ /:r a+ a/

[19:37] <p6eval> niecza v12-48-gc1f4746: OUTPUT«Match()␤»

[19:37] <moritz> niecza: say 'aaa' ~~ / a+ a/

[19:37] <p6eval> niecza v12-48-gc1f4746: OUTPUT«#<match from(0) to(3) text(aaa) pos([].list) named({}.hash)>␤»

[19:38] <dalek> specs: 9f731e5 | moritz++ | S05-regex.pod:

[19:38] <dalek> specs: [S05] add :r alias for :ratchet

[19:38] <dalek> specs: 

[19:38] <dalek> specs: std, rakudo and niecza already support it anyway

[19:38] <dalek> specs: review: https://github.com/perl6/specs/commit/9f731e51ec

[19:40] *** drbean joined
[19:41] <moritz> or maybe :k, :keep

[19:42] *** Radvendii joined
[19:45] *** kaare_ joined
[19:45] *** vlixes joined
[19:51] *** kaleem left
[20:01] *** snearch left
[20:04] *** pyrimidine left
[20:05] *** HarryS left
[20:09] *** y3llow_ joined
[20:09] *** pothos_ joined
[20:11] *** HarryS joined
[20:11] *** y3llow left
[20:11] *** pothos left
[20:12] *** y3llow_ left
[20:12] *** y3llow joined
[20:13] *** pothos_ left
[20:13] *** pothos joined
[20:14] *** y3llow left
[20:14] *** y3llow joined
[20:15] *** drbean left
[20:16] *** pothos left
[20:16] *** y3llow left
[20:16] *** pothos joined
[20:17] *** y3llow joined
[20:19] *** pothos left
[20:19] *** pothos joined
[20:22] *** ksi joined
[20:22] *** drbean joined
[20:22] *** pothos left
[20:22] *** pothos joined
[20:25] *** pothos left
[20:25] *** pothos joined
[20:28] *** Radvendii left
[20:28] *** pothos left
[20:28] *** pothos joined
[20:31] *** pothos left
[20:31] *** pothos joined
[20:34] *** pothos left
[20:34] *** pothos joined
[20:37] *** pothos left
[20:37] *** pothos joined
[20:37] *** worr left
[20:38] *** skangas left
[20:50] *** cooper joined
[20:57] <tadzik> 'evening, #perl6

[20:57] <tadzik> moritz: I was actually thinking about talking about perl6 modules and stuff on GPW

[20:57] <tadzik> thinking more like "let's imagine a world in which" rather than anything serious :)

[21:01] <dalek> mu: 2a9d366 | jonathan++ | misc/perl6advent-2011/schedule:

[21:01] <dalek> mu: I'll do one more on the 18th. Topic TBD.

[21:01] <dalek> mu: review: https://github.com/perl6/mu/commit/2a9d366a81

[21:01] <jnthn> I signed up for 18th in advent cal :)

[21:02] <jnthn> oh...it gets reported here anyway :)

[21:04] <colomon> :)

[21:17] *** kaare_ left
[21:46] *** drbean left
[21:53] *** drbean joined
[21:53] *** cooper left
[22:06] *** baest left
[22:14] *** drbean left
[22:20] *** drbean joined
[22:26] *** Radvendii joined
[22:30] *** titi joined
[22:33] *** titi left
[22:39] *** mj41 joined
[22:54] *** mj41 left
[22:57] *** ksi left
[23:01] *** cognominal___ left
[23:02] *** cognominal joined
[23:05] <Radvendii> is there any interest here in working on a perl programmer's keyboard layout? (so things like $ are more accessable)

[23:12] *** benabik left
[23:18] <Radvendii> i take that as a no...

[23:21] <jlaire> Radvendii: you might have better luck in a perl 5 channel, more people there

[23:21] <Radvendii> ah. i meant more for perl 6, but i guess they would be pretty much the same

[23:22] <geekosaur> p6 has a bit more need for accessible unicode though :)

[23:22] <jlaire> true, that :)

[23:22] <jlaire> to me, 'en_US' feels like heaven after using 'fi' for some years

[23:22] <jlaire> $ [ ] { }  are all behind AltGR on finnish layout

[23:23] <Radvendii> aww...

[23:24] <Radvendii> yeah but still... shift-4 seems a bit much for something used so much...

[23:25] <jlaire> some people just flip the number row, so that digits are shifted and symbols are default

[23:26] <Radvendii> mhmm...

[23:27] *** tokuhirom joined
[23:42] *** thou left
[23:43] *** worr joined
[23:45] *** risou_awy is now known as risou

