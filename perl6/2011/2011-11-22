[00:07] <vmspb> Hi

[00:07] <vmspb> if (0) { augment class C {...} } - It should give effect, or be ignored?

[00:07] <vmspb> niecza: use MONKEY_TYPING; class C {}; if (1) { augment class C { method s () {say 'A'} } } else { augment class C { method s () {say 'B'} } }; my $o = C.new(); $o.s();

[00:08] <p6eval> niecza v11-24-gcdd4e66: OUTPUT«B␤»

[00:08] <vmspb> rakudo: use MONKEY_TYPING; class C {}; if (1) { augment class C { method s () {say 'A'} } } else { augment class C { method s () {say 'B'} } }; my $o = C.new(); $o.s();

[00:08] <p6eval> rakudo 4cff8e: OUTPUT«===SORRY!===␤Package 'C' already has a method 's'; did you mean to declare a multi-method?␤»

[00:08] <jnthn> vmspb: Declarations take place at BEGIN time.

[00:12] <sorear> vmspb: in other words, give effect

[00:13] <vmspb> Is there another way to add and modify methods in runtime?

[00:14] <jnthn> Use the meta-object

[00:15] <jnthn> nom: class C { }; C.^add_method('foo', method () { say "ooh, a foo" }); C.foo

[00:15] <p6eval> nom 4cff8e: OUTPUT«ooh, a foo␤»

[00:15] <jnthn> nom: class C { }; if 0 { C.^add_method('foo', method () { say "ooh, a foo" }); } C.foo

[00:15] <p6eval> nom 4cff8e: OUTPUT«===SORRY!===␤Confused at line 1, near "if 0 { C.^"␤»

[00:15] <jnthn> nom: class C { }; if 0 { C.^add_method('foo', method () { say "ooh, a foo" }); }; C.foo

[00:15] <p6eval> nom 4cff8e: OUTPUT«Method 'foo' not found for invocant of class 'C'␤  in block <anon> at /tmp/_cZ2TnKqfb:1␤  in <anon> at /tmp/_cZ2TnKqfb:1␤»

[00:15] <jnthn> Like that.

[00:19] <vmspb> thanks

[00:19] <jnthn> sleep &

[00:25] *** japhb_ left
[00:25] *** japhb__ joined
[00:26] *** y3llow joined
[00:27] *** replore joined
[00:28] <diakopter> is the nqp build broken for anyone else?

[00:29] <diakopter> mls: ping

[00:32] <diakopter> reverting https://github.com/perl6/nqp/commit/13508b4874034715cf09c929da41b8709d753833 unbroke the nqp build for me

[00:33] <diakopter> anyone: is mls mlschroe on github? :)

[00:36] *** wolfman2000 joined
[00:37] *** yves joined
[00:43] *** packetknife left
[00:49] *** wolfman2_ joined
[00:49] *** wolfman2000 left
[00:50] *** wolfman2_ is now known as wolfman2000

[00:55] <diakopter> niecza: my @ltm = "b", "bb", "bbc", "bc"; say ~("abd" ~~ / @ltm /)

[00:55] <p6eval> niecza v11-24-gcdd4e66: OUTPUT«␤»

[00:55] <diakopter> rakudo: my @ltm = "b", "bb", "bbc", "bc"; say ~("abd" ~~ / @ltm /)

[00:55] <p6eval> rakudo 4a57bd: OUTPUT«␤»

[00:55] <sorear> niecza: say ~("abd" ~~ / b | bb | bbc | bc /)

[00:55] <p6eval> niecza v11-24-gcdd4e66: OUTPUT«b␤»

[00:55] <diakopter> nqp: my @ltm := [ "b", "bb", "bbc", "bc" ]; say(~("abd" ~~ / @ltm /))

[00:55] <p6eval> nqp: OUTPUT«b␤»

[00:56] <diakopter> I wonder why nqp does that.

[00:56] <diakopter> I mean, I see the code for it in !INTERPOLATE

[00:56] <diakopter> I wonder why it was designed that way.

[00:58] <diakopter> that code is straight from t/nqp/49-regex-interpolation.t

[00:59] *** lichtkind joined
[01:02] <sorear> o/ lichtkind

[01:02] <sorear> diakopter: it does it because that's what S05 says

[01:02] <diakopter> heh, oh

[01:03] <sorear> S05:1193

[01:03] <sorear> NYI in niecza

[01:07] *** tokuhirom left
[01:09] * diakopter tackles it in nqpq

[01:10] <diakopter> since it's part of the nqp test suite

[01:11] *** wolfman2000 left
[01:12] *** hypolin joined
[01:16] *** PacoLinux_ joined
[01:20] *** PacoLinux_ left
[01:21] <lichtkind> reused nqp any punie code?

[01:21] <lichtkind> sorear: o/

[01:25] *** pomysl joined
[01:25] *** pomysl left
[01:25] *** pomysl joined
[01:27] *** plutoid joined
[01:32] *** woosley joined
[01:49] *** lutok joined
[01:54] *** lutok left
[02:03] <diakopter> anyone know how to test whether something is Callable in nqp?

[02:08] <diakopter> hm, inline pir seems to be the way to go

[02:08] <sorear> Callable.ACCEPTS($obj)?

[02:09] <diakopter> I can't find a Callable

[02:12] <sorear> then what do you mean by "whether something is Callable"?

[02:12] <sorear> I didn't think NQP had a Callable

[02:12] <sorear> I'd be interested to see what you came up with, because I don't think Parrot makes a distinction between objects that truly support VTABLE_invoke and objects where that always throws

[02:13] <diakopter> I found this: is_invokable

[02:14] <diakopter> ahah

[02:14] <diakopter> pir::is_invokable__IP($obj)

[02:16] <diakopter> oh, it's an nqp op

[02:17] *** orafu left
[02:18] *** wolfman2000 joined
[02:26] *** PacoLinux_ joined
[02:30] *** vmspb left
[02:31] *** PacoLinux_ left
[02:35] *** Guest19937 left
[02:52] *** satyavvd joined
[03:04] *** packetknife joined
[03:11] *** am0c joined
[03:22] *** Sarten-X left
[03:24] *** plutoid left
[03:28] *** envi_ joined
[03:29] *** Sarten-X joined
[03:34] *** kfo_ joined
[03:36] *** japhb__ left
[03:36] *** Sarten-X left
[03:37] *** kfo left
[03:38] *** satyavvd left
[03:43] *** Sarten-X joined
[03:43] * diakopter finished porting !INTERPOLATE from pir to nqp

[03:48] *** Sarten-X left
[03:54] <diakopter> hunh

[03:54] <diakopter> No suitable candidate found for 'add', with signature 'PPP->P'

[03:55] <diakopter> nqp generated add $P117, $P115, $P116  from my $adv := $pos + $len;

[03:57] <diakopter> must be a bug in nqp

[03:57] <djanatyn> could someone ping me whenever any perl6 tasks are added to google code-in?

[03:59] *** envi_ left
[03:59] *** envi_ joined
[03:59] <sorear> diakopter: no, I think that is quite correct

[03:59] <sorear> diakopter: either $pos or $len or both isn't handling the 'add' multimethod

[04:03] <diakopter> I wonder how that could be

[04:08] *** birdwindupbird joined
[04:14] *** Sarten-X joined
[04:36] <diakopter> get_number() not implemented in class 'int'

[04:36] <diakopter> curiouser and curiouser

[04:36] *** alvis left
[04:37] <benabik> Class 'int'?

[04:37] <benabik> Not class 'Int'?

[04:38] <diakopter> yeah

[04:38] <diakopter> 6model error

[04:39] <diakopter> o_O it got farther. 2 interpolation tests pass

[04:41] <diakopter> hm, I've forgotten the name of the branch I'm in

[04:41] *** jaldhar joined
[04:42] *** vlixes left
[04:45] *** lue joined
[04:46] <diakopter> lue: if you can think of a p6 task, you might be able to participate in Google CodeIn

[04:46] <lue> hello diakopter o/

[04:47] * lue searches for P6 GCI

[04:47] <diakopter> I think no one's added a task yet

[04:48] <[Coke]> no p6 tasks will be visible to students until the 28th, I think.

[04:48] <[Coke]> as we didn't add any before the first deadline.

[04:51] <lue> [ Reading the GCI rules, I'm reminded of the fact that I hate when times are set on midnight ("The Contest begins at 12:00:00 A.M. Pacific Time (PT) Zone") ]

[04:51] <sorear> hello lue

[04:51] <lue> hello sorear o/

[04:55] <dalek> nqp/rxinterpolate: 734d9f3 | diakopter++ | src/NQP/SymbolTable.pm:

[04:55] <dalek> nqp/rxinterpolate: Revert "use direct lexinfo access in install_lexical_symbol()"

[04:55] <dalek> nqp/rxinterpolate: 

[04:55] <dalek> nqp/rxinterpolate: This reverts commit 13508b4874034715cf09c929da41b8709d753833.

[04:55] <dalek> nqp/rxinterpolate: review: https://github.com/perl6/nqp/commit/734d9f379e

[04:55] <dalek> nqp/rxinterpolate: 137dd06 | diakopter++ | src/ (2 files):

[04:55] <dalek> nqp/rxinterpolate: first cut at \!INTERPOLATE and \!INTERPOLATE_REGEX. strange number conversion workarounds and errors for jnthn++ to debug.

[04:55] <dalek> nqp/rxinterpolate: review: https://github.com/perl6/nqp/commit/137dd06116

[04:57] <lue> Just thinking about it, there's of course going to be a Perl 6 Advent Calendar this year, right? :)

[05:03] *** envi_ left
[05:07] <diakopter> phenny: tell jnthn see the rxinterpolate branch. t/nqp/49 first two tests pass; dies on the third.

[05:07] <phenny> diakopter: I'll pass that on when jnthn is around.

[05:23] <diakopter> in case anyone wonders, my latest error is  Can only use repr_get_attr_int on a SixModelObject

[05:31] *** Woodi joined
[05:32] *** alvis joined
[05:44] *** buubot_backup left
[06:00] *** localhost left
[06:01] *** localhost joined
[06:03] *** Woodi left
[06:03] *** Woodi joined
[06:04] *** kaleem joined
[06:04] *** buubot_backup joined
[06:12] *** sayu joined
[06:35] *** daniel-s joined
[06:38] *** Chillance joined
[06:42] *** wtw joined
[06:47] *** koban joined
[06:48] *** koban left
[06:59] *** Sarten-X left
[07:03] *** sftp left
[07:05] *** jeffreykegler joined
[07:07] *** jeffreykegler left
[07:07] *** Sarten-X joined
[07:13] *** PacoLinux_ joined
[07:18] *** PacoLinux_ left
[07:28] *** c9s joined
[07:43] *** wallberg left
[07:46] <moritz> o/

[07:46] <phenny> moritz: 21 Nov 23:55Z <jnthn> tell moritz diakopter++ did some work to support backlash endpoints in char classes; I've just twiddled it a bit and updated NQP_REVISION. Hope this helps your JSON::Tiny work.

[07:47] <diakopter> I could show you if we had a nqpq p6eval target

[07:47] *** lumi_ left
[07:47] *** lumi_ joined
[07:48] <moritz> we have a nom target

[07:48] <diakopter> oh yeah; I forgot the NQP_REVISION was bumped

[07:51] *** jdhore left
[07:53] *** lumi_ left
[07:54] <diakopter> moritz: do you think \n should/can be a legal endpoint in a char range?

[07:54] *** sayu left
[07:55] *** sayu joined
[07:56] <moritz> diakopter: yes

[07:56] <diakopter> hm

[07:57] <diakopter> nom: say "\n" ~~ /<[\n..z]>/

[07:57] <p6eval> nom 4a57bd: OUTPUT«===SORRY!===␤Illegal range endpoint in regex: \n..z at line 1, near ">/"␤»

[07:58] <diakopter> we'll have to add a special exception for \n then

[07:59] *** lumi_ joined
[07:59] <moritz> just see what STD does

[08:00] <moritz> std: /<[\n..z]>/

[08:00] <p6eval> std be1f10e: OUTPUT«ok 00:01 121m␤»

[08:01] *** mkramer joined
[08:01] <diakopter> std: /<[\W..\w]>/

[08:01] <p6eval> std be1f10e: OUTPUT«ok 00:01 121m␤»

[08:01] <diakopter> yeah but \W and \w should definitely be illegal

[08:07] *** nebuchadnezzar joined
[08:13] *** sayu left
[08:13] *** PacoLinux_ joined
[08:18] *** PacoLinux_ left
[08:33] *** daxim joined
[08:39] *** mj41 joined
[08:39] <moritz> aye

[08:39] <diakopter> we'll need an exception for \n

[08:41] <diakopter> nom: say "\r" ~~ /<[\r..\r]>/

[08:41] <p6eval> nom 4a57bd: OUTPUT«=> <

[08:42] <jnthn> o/

[08:43] <phenny> jnthn: 05:07Z <diakopter> tell jnthn see the rxinterpolate branch. t/nqp/49 first two tests pass; dies on the third.

[08:44] *** mkramer left
[08:45] *** mkramer joined
[08:50] *** Trashlord joined
[08:52] *** Sarten-X left
[08:58] *** lestrrat left
[08:58] *** lestrrat joined
[09:00] <dalek> nqp/rxinterpolate: 0fbc43b | mls++ | src/NQP/SymbolTable.pm:

[09:00] <dalek> nqp/rxinterpolate: use direct lexinfo access in install_lexical_symbol()

[09:00] <dalek> nqp/rxinterpolate: review: https://github.com/perl6/nqp/commit/0fbc43b813

[09:00] *** Sarten-X joined
[09:08] <diakopter> parrot commit  Merge branch 'kill_constants'  broke nqp

[09:09] <diakopter> 1 day ago

[09:11] *** diegoviola joined
[09:12] <diakopter> /usr/local/bin/parrot -o src/stage0/NQPRegex.pbc        src/stage0/Regex-s0.pir

[09:12] <diakopter> /usr/local/bin/parrot: symbol lookup error: dynext/nqp_group.so: undefined symbol: Parrot_pmc_new_constant

[09:12] <diakopter> moritz: ^^

[09:12] <dalek> nqp/rxinterpolate: 14a9298 | jnthn++ | src/QRegex/Cursor.nqp:

[09:12] <dalek> nqp/rxinterpolate: Couple of fixes; passes all of the regex interpolation tests now.

[09:12] <dalek> nqp/rxinterpolate: review: https://github.com/perl6/nqp/commit/14a9298adb

[09:13] <diakopter> ahah

[09:16] <jnthn> diakopter: NQP_REVISION appears to point to a8cb7da, which is just after mls did the patch needed for his direct lexinfo access patch, but before bacek's constants branch landed.

[09:17] <diakopter> ok

[09:17] * diakopter looks up how to checkout to a particular revision

[09:18] <jnthn> git checkout put-sha1-here

[09:18] <jnthn> doesn't have to be the whole sha1; the ones after the g in PARROT_REVISION are dost

[09:18] <jnthn> er

[09:18] <jnthn> are enough

[09:22] <moritz> you can use the whole string from PARROT_REVISION too

[09:22] <jnthn> oh...I didn't know that bit :)

[09:22] <bacek> erm. Why there is "constants" in nqp?

[09:23] <moritz> why not?

[09:23] <jnthn> bacek: I didn't get chance to reproduce the breakage here yet and take a look.

[09:24] <bacek> moritz, because grep^W ack couldn't find it.

[09:24] * jnthn is a little surprised too

[09:24] <bacek> And I actually hacking nqp on very recent parrot now without "constant breakage"

[09:25] *** thou left
[09:25] *** Sarten-X left
[09:25] <bacek> diakopter, try to reconfigure nqp.

[09:25] <jnthn> diakopter: I assume you did a "make clean" and/or re-configured? It's not just leftover build of nqp_ops or so?

[09:26] <diakopter> well, I downgraded to PARROT_REVISION already

[09:26] <jnthn> Gotta go for a bit...$dayjob stuff. Should have some hacking time for nativecall later today though :)

[09:26] <bacek> nqp's Makefile is cra^... suboptimal?

[09:26] <moritz> might be missing a dependency

[09:26] <moritz> I'll try on newest parrot

[09:27] <diakopter> bacek: it was after a make clean, but not after a reconfigure

[09:27] <bacek> diakopter, may be some weird leftovers.

[09:28] <bacek> diakopter, e.g. old version of installed parrot with nqp_group.so 

[09:28] <diakopter> hm

[09:29] *** cosimo_ left
[09:29] <bacek> or missing dependency as moritz++ said

[09:31] <moritz> diakopter: fwiw I just built latest nqp/master on latest parrot/master

[09:31] <moritz> well, not quite finished building yet, but the C parts have been built

[09:33] <diakopter> hm

[09:34] <moritz> built finished. Worked

[09:39] *** dakkar joined
[09:40] <bacek> jnthn, 6model question: why are you using #defines instead of enums?

[09:44] *** Sarten-X joined
[09:45] <bacek> jnthn, and what is "REPR API 2"? Is it current state of nqp?

[09:50] *** alester_ joined
[09:52] *** Sarten-X left
[09:52] *** alester left
[09:52] *** alester_ is now known as alester

[09:53] <mls> morning!

[09:54] <diakopter> mls: disregard my earlier ping :)

[09:54] <mls> ok, will do ;)

[09:55] *** alester left
[09:56] *** alester joined
[09:58] <jnthn> bacek: It's the current set of functions in the REPROps struct.

[09:58] <jnthn> bacek: If you're looking at current state of NQP, yes, you're looking at the latest stuff.

[09:58] <bacek> jnthn, ok. Thanks!

[09:58] <jnthn> bacek: There are probably some #defines that could be replaced by enums. No good reason.

[09:58] *** Trashlord left
[09:59] <bacek> jnthn, ok than.

[10:06] *** hypolin left
[10:09] *** woosley left
[10:12] *** Sarten-X joined
[10:12] *** PacoLinux_ joined
[10:13] *** replore left
[10:15] *** birdwindupbird left
[10:17] *** PacoLinux_ left
[10:18] *** cosimo joined
[10:21] *** Trashlord joined
[10:23] *** birdwindupbird joined
[10:24] *** packetkn_ joined
[10:25] *** Sarten-X left
[10:25] *** packetknife left
[10:26] *** daxim left
[10:27] *** daxim joined
[10:46] *** Sarten-X joined
[10:50] *** Sarten-X left
[10:59] *** Sarten-X joined
[11:04] *** Sarten-X left
[11:11] *** skangas joined
[11:12] *** Sarten-X joined
[11:12] *** PacoLinux_ joined
[11:15] *** bacek left
[11:17] *** PacoLinux_ left
[11:17] *** Sarten-X left
[11:19] *** Sarten-X joined
[11:23] *** Sarten-X left
[11:30] *** Sarten-X joined
[11:53] *** PacoLinux_ joined
[11:57] *** PacoLinux_ left
[12:16] *** Patterner left
[12:16] *** mkramer left
[12:18] *** Psyche^ joined
[12:18] *** Psyche^ is now known as Patterner

[12:27] *** replore_ joined
[12:28] *** replore_ left
[12:28] *** envi_ joined
[12:32] *** envi_ left
[12:32] *** envi_ joined
[12:34] *** daniel-s left
[12:36] *** bluescreen10 joined
[12:37] *** kaleem left
[12:48] *** tokuhirom joined
[12:52] <bbkr> I'm not sure what kind of miracle happened in 2011.11 release but Mongo driver is not segfaulting \o/

[12:56] *** Trashlord left
[12:58] *** Trashlord joined
[12:59] <jnthn> yay :)

[13:03] *** envi_ left
[13:03] *** Sarten-X left
[13:05] *** JimmyZ joined
[13:06] *** PacoLinux_ joined
[13:09] *** mkramer joined
[13:10] *** mkramer left
[13:11] *** PacoLinux_ left
[13:11] *** Sarten-X joined
[13:12] *** daxim left
[13:12] *** daxim joined
[13:15] <[Coke]> jnthn++ magic-anti-segfaulting-machine

[13:16] * [Coke] is kind of weirded out to have bacek AND jnthn hacking on nqp.

[13:16] * [Coke] hopes it doesn't explode! ;)

[13:16] * [Coke] ponders the horror of doing more RT maintenance.

[13:17] <[Coke]> jnthn: what's your schedule like today?

[13:18] <JimmyZ> looks like dyncall is better libffi, I'm curious that libffi is used more widely than dyncall

[13:18] <JimmyZ> *better than

[13:28] <bbkr> Is "maximum recursion depth exceeded" in circular files loading (A.pm has "use B", B.pm has "use A") considered a bug? Even on single pass parsing it should detect that file is already loaded, am I right?

[13:39] <jnthn> [Coke]: $dayjob for the next 2 hours or so, then I'll ahve Perl 6 time for the rest of the day.

[13:39] <jnthn> bbkr: it's suboptimal

[13:39] <jnthn> bbkr: We should really manage better than that.

[13:40] <jnthn> JimmyZ: Maybe just an age thing.

[13:40] <jnthn> JimmyZ: Adoption takes time. dyncall is, afaik, much more recent.

[13:42] *** jrockway joined
[13:44] *** lichtkind left
[13:48] <JimmyZ> jnthn: thanks.

[13:53] *** colomon joined
[13:57] *** lichtkind joined
[13:59] <tadzik> hello channel

[14:00] <tadzik> I'd like to gather a meeting about Perl 6 in GCI, since I'm never on #phasers this semester

[14:00] <tadzik> anyone interested? We could get some fresh flesh

[14:00] <jnthn> on nom

[14:00] <jnthn> er, wait, I mean..

[14:00] <jnthn> :)

[14:00] <jnthn> tadzik: I can try and think up some tasks. Is there something I can read to get an idea of the sort of task/scope?

[14:01] <tadzik> jnthn: you can look through the existing tasks

[14:01] <tadzik> I'll open a wiki page for us

[14:01] *** wolfman2000 left
[14:01] <jnthn> tadzik: ok

[14:01] *** PacoLinux_ joined
[14:01] <jnthn> link?

[14:03] <tadzik> https://github.com/perl6/ecosystem/wiki/Google-Code-In

[14:03] <tadzik> link to existing tasks?

[14:03] <tadzik> http://www.google-melange.com/gci/dashboard/google/gci2011#all_org_tasks

[14:03] <tadzik> Try "Perl" in the "Organization" field

[14:03] *** Sarten-X left
[14:04] <tadzik> there are lots and lots of translation tasks, but I'm not sure if they're really beneficial

[14:06] *** PacoLinux_ left
[14:06] <tadzik> djanatyn: ping

[14:07] *** Chillance left
[14:07] *** diegoviola left
[14:10] *** tokuhirom left
[14:10] *** Sarten-X joined
[14:11] <djanatyn> tadzik: pong

[14:12] <djanatyn> I started a transcription task for a youtube video

[14:12] <tadzik> cool

[14:13] <tadzik> djanatyn: I linked to a wiki page above, if you have any nice ideas for Perl 6 tasks feel free to add them there, and we'll see what we can do

[14:14] <colomon> github wiki page working slowly / not working for me?

[14:15] <colomon> I was thinking about porting modules to nom... seems like some of that is probably LHF and a nice intro to things p6ish.

[14:18] <tadzik> indeed

[14:18] <colomon> and even just determining why a module isn't easy to port (if it isn't) would be a worthwhile achievement

[14:18] <PerlJam> colomon: and might generate something for an advent calendar entry  :)

[14:18] <jnthn> Maybe get bailador working on nom (may be no-op though). Perhaps create an example application with/for it that does some small but useful-ish thing.

[14:19] *** alvis left
[14:19] <tadzik> maybe porting Dancer::Test and then slowly we could improve Bailador to a sensemaking state

[14:19] <jnthn> *nod*

[14:19] * jnthn would like to see that.

[14:19] * PerlJam too

[14:19] <tadzik> colomon: I think most of Plack:: stuff may be doable, since Plack requires (I think) little to no infrastructure

[14:19] <tadzik> it's just a subref returning an array

[14:20] <tadzik> we need no Black Magic to use that in P6

[14:20] <jnthn> I think a small example application - maybe in second round of GCI though - could be quite cool :)

[14:20] <colomon> oh, I was thinking one step easier than that -- porting Perl *6* modules to nom.

[14:21] <tadzik> :)

[14:21] <colomon> of course, porting CPAN modules would also be good!

[14:21] <tadzik> I don't think that's easy

[14:21] <tadzik> well, some of them

[14:21] <colomon> tadzik: exactly why I said "some of them" are LHF.

[14:21] <tadzik> we could also add stuff like "investigate the most needed modules for Perl 6"

[14:21] <jnthn> I guess it needs a first pass to pick out some LHF ones

[14:21] <tadzik> or "find 5 modules on CPAN easy to port to Perl 6"

[14:21] <colomon> at least I hope that there are cases where porting is simple

[14:21] <tadzik> then we could add those 5 tasks

[14:22] <tadzik> profit, and profit

[14:22] <tadzik> please add all your ideas to that wiki page

[14:22] <colomon> I haven't been able to get to the wiki page

[14:22] <tadzik> wfm, I can add some of those

[14:23] *** mj41 left
[14:25] *** ribasushi joined
[14:25] <tadzik> jnthn: hey, that "hier" was intentional :P

[14:26] <jnthn> oh!

[14:26] <jnthn> :P

[14:27] *** PacoLinux_ joined
[14:28] *** drbean joined
[14:28] <tadzik> oh!

[14:28] <tadzik> investigate what it needs to make panda run on windows/niecza/<insert ideas here>

[14:31] *** PacoLinux_ left
[14:33] *** am0c left
[14:33] <dalek> mu: 4bfc2b5 | duff++ | misc/perl6advent-2011/topic-brainstorming:

[14:33] <dalek> mu: add a few ideas

[14:33] <dalek> mu: review: https://github.com/perl6/mu/commit/4bfc2b57ec

[14:33] <tadzik> oh, nice

[14:34] *** alvis joined
[14:37] *** PacoLinux_ joined
[14:38] *** benabik left
[14:39] *** hanekomu_ joined
[14:39] *** mj41 joined
[14:39] *** ggoebel left
[14:45] *** sftp joined
[14:45] *** ribasushi_ joined
[14:45] *** ribasushi left
[14:45] *** ribasushi_ is now known as ribasushi

[14:46] *** PacoLinux_ left
[14:53] *** Moukeddar joined
[14:59] *** envi_ joined
[15:03] *** ribasushi_ joined
[15:05] *** ribasushi left
[15:05] *** ribasushi_ is now known as ribasushi

[15:11] *** ribasushi_ joined
[15:11] *** ribasushi left
[15:11] *** ribasushi_ is now known as ribasushi

[15:12] * PerlJam wonders what happens if no one comments on dukeleto's grant application

[15:15] *** colomon left
[15:17] *** bluescreen10 left
[15:20] *** wtw left
[15:31] *** bluescreen10 joined
[15:37] *** kmwallio joined
[15:48] *** bluescreen10 left
[15:53] *** JimmyZ left
[15:55] *** kaleem joined
[15:57] *** thou joined
[16:10] *** envi_ left
[16:18] <PerlJam> Does goal matching work in nom?

[16:20] <PerlJam> nom: my $s = "blah 'foo bar' blah";  $s ~~ / "'" ~ "'" [.*] /;

[16:20] <p6eval> nom 4a57bd: OUTPUT«Unable to parse _block1011, couldn't find final "'"␤  in FAILGOAL at src/stage2/QRegex.nqp:1125␤  in regex <anon> at /tmp/fogjJ_uwQ7:1␤  in method ACCEPTS at src/gen/CORE.setting:6634␤  in block <anon> at /tmp/fogjJ_uwQ7:1␤  in <anon> at /tmp/fogjJ_uwQ7:1␤»

[16:21] *** Ganymedes joined
[16:21] <PerlJam> or have I forgotten something ?

[16:21] <Ganymedes> Hey, is anyone here a Mentor representing Perl on Google Code-in?

[16:22] <tadzik> yep

[16:22] <jnthn> nom: my $s = "blah 'foo bar' blah";  $s ~~ / "'" ~ "'" [.*?] /;

[16:22] <p6eval> nom 4a57bd: OUTPUT«Unable to parse _block1011, couldn't find final "'"␤  in FAILGOAL at src/stage2/QRegex.nqp:1125␤  in regex <anon> at /tmp/jyoBKSjIH9:1␤  in method ACCEPTS at src/gen/CORE.setting:6634␤  in block <anon> at /tmp/jyoBKSjIH9:1␤  in <anon> at /tmp/jyoBKSjIH9:1␤»

[16:22] <jnthn> hm

[16:22] <PerlJam> jnthn: tried that too :)

[16:22] <tadzik> Ganymedes: you want to work for Perl 6 on it?

[16:22] <jnthn> nom: my $s = "blah 'foo bar' blah";  $s ~~ / "'" ~ "'" [<-["]>*] /;

[16:22] <p6eval> nom 4a57bd: OUTPUT«Unable to parse _block1011, couldn't find final "'"␤  in FAILGOAL at src/stage2/QRegex.nqp:1125␤  in regex <anon> at /tmp/ZzIIH44oSM:1␤  in method ACCEPTS at src/gen/CORE.setting:6634␤  in block <anon> at /tmp/ZzIIH44oSM:1␤  in <anon> at /tmp/ZzIIH44oSM:1␤»

[16:22] <Ganymedes> tadzik, i've submitted a task about 6 hours ago i think

[16:22] <Ganymedes> and i was wondering when it might be accepted

[16:22] <tadzik> btw, is anyone beside me a mentor here?

[16:23] <tadzik> Ganymedes: you may want to ask on #gci on irc.perl.org

[16:23] <PerlJam> tadzik: I've gotten as far as thinking about it.

[16:23] <Ganymedes> :/

[16:23] <Ganymedes> i'll try

[16:23] <jnthn> PerlJam: Oddness

[16:23] <Ganymedes> thanks

[16:23] <jnthn> PerlJam: I'm sure we have a bunch of passing tests for it.

[16:23] <PerlJam> jnthn: that's what I thought too

[16:24] <Ganymedes> tadzik, just a random question, anyone can become a mentor?

[16:24] <jnthn> nom: my $s = "blah 'foo bar' blah";  $s ~~ / "(" ~ ")" [.*] /;

[16:24] <p6eval> nom 4a57bd:  ( no output )

[16:24] <Ganymedes> (Seeing you asked me, although, i'm probably ineligible due to the fact im competeing)

[16:24] <jnthn> uh. :)

[16:24] <tadzik> Ganymedes: not really, you need to be invited to be one

[16:24] <jnthn> nom: my $s = "blah 'foo bar' blah";  $s ~~ / "[" ~ "]" [.*] /;

[16:24] <p6eval> nom 4a57bd:  ( no output )

[16:24] <tadzik> Ganymedes: what task did you submit?

[16:24] <jnthn> nom: my $s = "blah 'foo bar' blah";  $s ~~ / '\'' ~ '\'' [.*] /;

[16:24] <p6eval> nom 4a57bd: OUTPUT«Unable to parse _block1011, couldn't find final '\''␤  in FAILGOAL at src/stage2/QRegex.nqp:1125␤  in regex <anon> at /tmp/RXmOVGXO8e:1␤  in method ACCEPTS at src/gen/CORE.setting:6634␤  in block <anon> at /tmp/RXmOVGXO8e:1␤  in <anon> at /tmp/RXmOVGXO8e:1␤»…

[16:25] <Ganymedes> Translate Mojolicious::Guides::FAQ into Hebrew

[16:25] <jnthn> PerlJam: File an RT...something is busted 

[16:25] <tadzik> szabgab: ping

[16:26] <Ganymedes> seeing this system is a bit slow, and it was nice to translate it, i might translate some more docs later outside the Google Code-in loop, since i want to do a Assembly task.

[16:26] <Ganymedes> System being The Google Code-in red tape

[16:27] *** envi_ joined
[16:28] <Ganymedes> thanks tzadik, ill go try irc.erpl.org

[16:30] <tadzik> you're welcome

[16:33] *** kaleem_ joined
[16:33] *** birdwindupbird left
[16:33] *** kaleem left
[16:39] <dalek> nqp/nci: 131dd2e | jnthn++ | 3rdparty/dyncall-0.6/ (231 files):

[16:39] <dalek> nqp/nci: Bring dyncall-0.6 into the NQP repo.

[16:39] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/131dd2ef28

[16:39] <dalek> nqp/nci: d2ec8c9 | jnthn++ | / (3 files):

[16:39] <dalek> nqp/nci: First cut at getting dyncall configuration and build integrated, and linking it into a stub dynops library.

[16:39] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/d2ec8c996c

[16:40] <dalek> nqp/nci: 0166457 | jnthn++ | .gitignore:

[16:40] <dalek> nqp/nci: Quieten .gitignore.

[16:40] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/01664577a7

[16:46] *** Guest2721 joined
[16:49] *** kmwallio left
[16:53] *** mj41 left
[16:57] *** Ganymedes left
[16:58] *** kaleem_ left
[17:03] *** hanekomu_ left
[17:05] *** PacoLinux_ joined
[17:09] *** envi_ left
[17:16] *** MayDaniel joined
[17:18] *** cbk1090 joined
[17:21] *** PacoLinux_ left
[17:34] <dalek> nqp: 734d9f3 | diakopter++ | src/NQP/SymbolTable.pm:

[17:34] <dalek> nqp: Revert "use direct lexinfo access in install_lexical_symbol()"

[17:34] <dalek> nqp: 

[17:34] <dalek> nqp: This reverts commit 13508b4874034715cf09c929da41b8709d753833.

[17:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/734d9f379e

[17:34] <dalek> nqp: 137dd06 | diakopter++ | src/ (2 files):

[17:34] <dalek> nqp: first cut at \!INTERPOLATE and \!INTERPOLATE_REGEX. strange number conversion workarounds and errors for jnthn++ to debug.

[17:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/137dd06116

[17:34] <dalek> nqp: 0fbc43b | mls++ | src/NQP/SymbolTable.pm:

[17:34] <dalek> nqp: use direct lexinfo access in install_lexical_symbol()

[17:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0fbc43b813

[17:34] <dalek> nqp: 14a9298 | jnthn++ | src/QRegex/Cursor.nqp:

[17:34] <dalek> nqp: Couple of fixes; passes all of the regex interpolation tests now.

[17:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/14a9298adb

[17:35] *** lichtkind left
[17:36] <jnthn> diakopter: BTW, for the future - it may have been cleaner to cherry-pick the two commits out of the 4 into master. :)

[17:37] <diakopter> ah

[17:37] <jnthn> But no worries

[17:37] <diakopter> t/p6regex/01-regex.t still fails btw :S

[17:37] <diakopter> new error though

[17:38] <jnthn> Yeah, it's 'cus the match function in NQPCORE goes looking for the old regex implementation

[17:38] <jnthn> We can't easily fix that just for NQPQ though.

[17:39] <jnthn> Maybe it's time to start an nqpq branch...

[17:39] <diakopter> nqpq will be named nqp eventually?

[17:39] <jnthn> yes

[17:40] <jnthn> feel free to give the branch a better name if you can think of a short way of saying "nqp using qregex" :)

[17:43] *** lichtkind joined
[17:48] <diakopter> nom: my $s = "blah [foobar] blah";  $s ~~ / "[" ~ "]" <-[\]]>+ /;

[17:49] <p6eval> nom 4a57bd:  ( no output )

[17:49] <TimToady> niecza: my $s = "blah [foobar] blah";  $s ~~ / "[" ~ "]" <-[\]]>+ /;

[17:49] <p6eval> niecza v11-24-gcdd4e66:  ( no output )

[17:51] <jnthn> nom:  my $s = "blah [foobar] blah"; say $s ~~ / "[" ~ "]" <-[\]]>+ /;

[17:51] <p6eval> nom 4a57bd: OUTPUT«=> <[foobar]>␤␤»

[17:51] <jnthn> nom:  my $s = "blah 'foobar' blah"; say $s ~~ / "'" ~ "'" <-[\]]>+ /;

[17:51] <p6eval> nom 4a57bd: OUTPUT«Unable to parse _block1011, couldn't find final "'"␤  in FAILGOAL at src/stage2/QRegex.nqp:1125␤  in regex <anon> at /tmp/FuiSmPVqQb:1␤  in method ACCEPTS at src/gen/CORE.setting:6634␤  in block <anon> at /tmp/FuiSmPVqQb:1␤  in <anon> at /tmp/FuiSmPVqQb:1␤»

[17:51] <jnthn> diakopter: ^ is the problem case

[17:51] <jnthn> though

[17:51] <jnthn> nom:  my $s = "blah 'foobar' blah"; say $s ~~ / "'" /;

[17:51] <p6eval> nom 4a57bd: OUTPUT«=> <'>␤␤»

[17:52] <jnthn> hm, not quite so simple ;)

[17:52] <diakopter> it's not backtracking

[17:52] <szabgab> tadzik: reping

[17:52] <TimToady> nom: my $s = "blah 'foobar' blah"; say $s ~~ / "'" ~ "'" <-[']>+ /;

[17:52] <p6eval> nom 4a57bd: OUTPUT«=> <'foobar'>␤␤»

[17:53] <TimToady> yes, backtrack feyl

[17:53] <jnthn> ah

[17:53] <jnthn> May simply be that .backtrack isn't being set somewhere in the actions.

[17:54] <TimToady> might explain why .*? doesn't foretrack too

[17:54] *** kmwallio joined
[17:54] <jnthn> aye

[17:57] <dalek> nqp/nci: 837fa8b | jnthn++ | / (3 files):

[17:57] <dalek> nqp/nci: Add a NativeCall REPR and get it filled out enough for now; may need a re-visit later for callback support.

[17:57] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/837fa8ba4a

[17:58] <diakopter> NativeCall gets its own REPR?

[17:58] *** imarcusthis left
[17:59] <jnthn> diakopter: Seems like the cleanest way.

[17:59] <jnthn> diakopter: It means that languages can just have their own objects that represent a native call.

[17:59] *** MayDaniel left
[17:59] <jnthn> The REPR API 2 stuff I did means that info can also just get flattened into any other object they use to represent a call site.

[18:00] <tadzik> szabgab: there was a student who wanted to have his work revied, but he's solved his problem on #gci now, methinks

[18:01] <szabgab> ok

[18:01] <szabgab> I am also on #gci

[18:01] <szabgab> so you can ping me there too :)

[18:01] <tadzik> a'right :)

[18:03] *** mtk left
[18:04] *** mtk joined
[18:04] *** imarcusthis joined
[18:07] *** MayDaniel joined
[18:07] *** imarcusthis left
[18:08] *** imarcusthis joined
[18:09] *** dakkar left
[18:17] <jnthn> nombrak

[18:17] <jnthn> *break

[18:20] *** spine joined
[18:24] *** bacek joined
[18:26] <diakopter> phenny: tell jnthn since goal is done using a subrule, backtracking doesn't work because backtracking doesn't work into a subrule call.

[18:26] <phenny> diakopter: I'll pass that on when jnthn is around.

[18:38] *** Moukeddar left
[18:42] *** Sarten-X left
[18:43] *** bluescreen10 joined
[18:47] *** kmwallio left
[18:49] *** Sarten-X joined
[18:51] *** kmwallio joined
[18:53] *** daxim left
[19:07] *** Sarten-X left
[19:08] *** meraxes joined
[19:14] *** Sarten-X joined
[19:27] *** birdwindupbird joined
[19:34] *** bbkr1 joined
[19:35] *** tipdbmp joined
[19:52] *** Sarten-X left
[19:53] <jnthn> diakopter: oh! So that's what it is. Ok.

[19:53] <phenny> jnthn: 18:26Z <diakopter> tell jnthn since goal is done using a subrule, backtracking doesn't work because backtracking doesn't work into a subrule call.

[19:54] *** birdwindupbird left
[19:59] *** MayDaniel left
[20:00] *** hundskatt joined
[20:03] *** Sarten-X joined
[20:04] *** fridim_ joined
[20:06] <masak> phenny: sv "hundskatt"?

[20:06] <phenny> masak: "dog tax" (sv to en, translate.google.com)

[20:06] *** tipdbmp left
[20:06] <masak> :)

[20:07] *** MayDaniel joined
[20:07] * zb parsed that as dogs cat...

[20:15] *** kmwallio left
[20:23] *** lestrrat left
[20:26] *** lestrrat joined
[20:27] *** ksi joined
[20:32] *** simcop2387 joined
[20:32] *** simcop2387 left
[20:33] *** simcop2387 joined
[20:46] *** cosimo_ joined
[20:47] *** cosimo_ left
[20:48] *** Trashlord left
[20:51] *** Sarten-X left
[20:58] <djanatyn> what's Bailador?

[20:58] <PerlJam> djanatyn: Dancer on Perl 6

[20:59] <djanatyn> :D

[20:59] <djanatyn> That's a clever name

[20:59] *** bbkr1 left
[21:03] <tadzik> yeah

[21:03] <tadzik> I wrote it in my notebook during my Spanish classes

[21:09] <japhb> tadzik, "Whatever but Cool" is your blog, right?

[21:10] <tadzik> japhb: yes

[21:10] *** Sarten-X joined
[21:10] <japhb> tadzik, Ah cool.  OOC, why are some posts (including the one introducing Bailador) not visible on the main page?

[21:10] <japhb> Are they "unpublished"?

[21:11] *** bluescreen100 joined
[21:11] <djanatyn> tadzik: so, as for making a small application with bailador, I had an idea:

[21:12] *** mike joined
[21:12] <djanatyn> say, you had a very simple webapp using mongodb that tracks tasks

[21:13] *** mike is now known as Guest40539

[21:13] <djanatyn> it could either run locally for your own personal use (one user) or it could support multiple accounts

[21:13] <djanatyn> you can add tasks, delete tasks, mark tasks as done

[21:14] <djanatyn> each task has a date, name, and possible description

[21:15] <djanatyn> and tasks can be public or private. each user has a profile page with tasks listed

[21:15] *** Guest40539 left
[21:15] <djanatyn> would that be something possible to do for GCI?

[21:15] *** cosimo2_ joined
[21:16] <djanatyn> I was just thinking of ideas

[21:20] *** bluescreen10 left
[21:20] *** bluescreen100 left
[21:29] *** cosimo2_ left
[21:29] <jnthn> djanatyn: Something like that sounds nice

[21:30] <jnthn> djanatyn: Guess you need to make sure it's not too big, so it can be done in the time :)

[21:30] *** Sarten-X left
[21:32] <dalek> nqp/nci: b2bb084 | jnthn++ | / (2 files):

[21:32] <dalek> nqp/nci: Start to fill out the NCI related ops. This gets us to the point where we can successfully call a function with no args and void return.

[21:32] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/b2bb084bfb

[21:32] <dalek> nqp/nci: 218fe83 | jnthn++ | / (2 files):

[21:32] <dalek> nqp/nci: Toss previous sketching out of NCI stuff, now that the new solution is well underway.

[21:32] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/218fe8355a

[21:32] <djanatyn> ah, true

[21:33] *** ksi left
[21:34] <tadzik> japhb: probably too old they are

[21:34] <tadzik> well, we can give it plenty of time

[21:34] <tadzik> like 5 days or such

[21:34] <japhb> jnthn, djanatyn: if you build the skeleton of something now, you can make individual GCI tasks to fill in bits of it.

[21:35] <djanatyn> ah, true.

[21:35] <japhb> tadzik, the Bailamos post is newer than the post that appears second on the main view.

[21:35] <tadzik> japhb: I highly doubt it

[21:35] <tadzik> :)

[21:35] <djanatyn> how many people do you expect to sign up for perl6 tasks?

[21:36] <tadzik> did you mistake 2010 for 2011? :)

[21:36] <japhb> tadiz:The Bailamos post is marked 'Posted: 10/01/2011'

[21:37] <tadzik> yes

[21:37] <tadzik> that's 10th of January, I believe

[21:37] <tadzik> unless you are using the weird convention of dates :)

[21:37] <japhb> OH DEAR HEAVENS ALL THE HATEFUL DATE FORMATS

[21:37] <jnthn> bwaha :)

[21:37] <japhb> THERE SHOULD BE ONLY ONE

[21:37] <PerlJam> yes, and it should be YYYY-MM-DD

[21:38] <japhb> PerlJam: YES

[21:38] <djanatyn> definitely :)

[21:38] <jnthn> Maybe we just shouldn't blog in the first 12 days of the month

[21:38] <japhb> </shouting>

[21:38] <tadzik> jnthn++

[21:38] *** estrabd is now known as estrabd_afk

[21:38] *** lichtkind left
[21:40] <jnthn> At this rate we should certainly have some kind of NativeCall.pm working by the weekend

[21:40] <japhb> jnthn++

[21:40] <japhb> I can't even tell you how happy that makes me

[21:40] <japhb> So ... how much work is it going to be for me to wrap OpenGL?

[21:41] <japhb> Does the "wrap a whole library" helper stuff work for our use case?

[21:42] <jnthn> japhb: "wrap a whole library helper stuff"? :)

[21:45] <japhb> IIRC in one of the dyncall presentations, there was mention of a helper that made it easier to wrap an entire library.

[21:46] * japhb looks for the reference ...

[21:48] *** Guest2721 left
[21:49] <japhb> Hmmm, I see it being referred to as 'dynport tools'

[21:54] <japhb> jnthn, ah, OK, it looks like the dynports thing is that you turn an M * N binding problem into an M + N one by producing one 'dynport' binding per library, then one binding to the dynports API per language, and then step 3.

[21:55] <japhb> ... and a bunch of graphics libs already have existing dynports.  :-_

[21:55] <japhb> er :-)

[21:55] <jnthn> ah, ok

[22:12] <japhb> jnthn, in nqp_native_call_build() from b2bb084bfb , why don't you need to Parrot_str_free_cstring(lib_name) when you're about to throw an exception?

[22:14] <jnthn> japhb: That bit of memory needs to be handled by the REPR

[22:14] <jnthn> japhb: for its copy_to method to do the right thing

[22:14] <jnthn> japhb: I've got a note on my todo list telling me to sort that out. :)

[22:15] <japhb> heh

[22:15] <jnthn> But glad somebody is reading the code ;)

[22:16] <japhb> I've been trying to at least skim the nqp and Rakudo commits from the last few days to get a broader understanding of how things work.

[22:16] <japhb> Should make it easier to make more extensive changes than I have been, eventually.

[22:16] <jnthn> :)

[22:16] <jnthn> Nice. Feel free to ask questions if there's unclear bits.

[22:17] <japhb> will do, thank you!

[22:19] *** cooper joined
[22:44] *** Sarten-X joined
[22:44] <dalek> nqp/nci: 25331a6 | jnthn++ | src/ops/nqp_dyncall.ops:

[22:44] <dalek> nqp/nci: Start getting some argument processing in place. Handle integer and floating point arguments. Works.

[22:44] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/25331a6b42

[22:45] <jnthn> What's nice is that we don't need some magic list of signatures pre-compiled somewhere for this. :)

[22:46] <diakopter> is there a byte blob type

[22:46] <tadzik> Works!

[22:46] <jnthn> DYNCALL_ARG_PACKEDARRAY should cover that.

[22:48] <dalek> nqp/nci: 87a45c4 | jnthn++ | src/ops/nqp_dyncall.ops:

[22:48] <dalek> nqp/nci: Fix typo (diakopter++).

[22:48] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/87a45c45a1

[22:59] <diakopter> nqp: say("foo" ~~ /("f" ["oo" | "o"]) "o"/);

[22:59] <p6eval> nqp: OUTPUT«foo␤»

[22:59] <diakopter> nqp: say("blah 'foo' blah" ~~ / "'" ~ "'" .* /);

[22:59] <p6eval> nqp: OUTPUT«Can only use get_who on a SixModelObject␤current instr.: 'nqp;Regex;Cursor;FAILGOAL' pc 3827 (src/Regex/Cursor.pir:236)␤»

[22:59] <diakopter> ahaha

[23:00] <diakopter> so it didn't work in the previous engine either

[23:08] *** Sarten-X left
[23:12] <dalek> nqp/nci: b642c65 | jnthn++ | src/ops/nqp_dyncall.ops:

[23:12] <dalek> nqp/nci: Start getting return type handling in place. Again, just int and float for now. Also seems to work.

[23:12] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/b642c65c09

[23:14] <jnthn> Decent start. Still lots to go.

[23:14] <tadzik> jnthn: are there any funny examples?

[23:16] *** MayDaniel left
[23:17] *** Sarten-X joined
[23:17] <tadzik> like, the tests that you're using or so, don't bother if you're busy hacking :)

[23:17] <jnthn> tadzik: I really need to put together a proper test suite

[23:19] <jnthn> tadzik: https://gist.github.com/1387382 is what I've been trying it with

[23:21] *** Sarten-X left
[23:21] <jnthn> $on-site-dayjob tomorrow so I guess I should stop here.

[23:23] <jnthn> night o/

[23:23] <diakopter> o/

[23:24] <tadzik> g'night!

[23:27] <lue> hello world o/

[23:29] <tadzik> hello lue!

[23:33] *** Chillance joined
[23:33] *** Sarten-X joined
[23:34] *** spine left
[23:36] *** whiteknight joined
[23:37] *** whiteknight is now known as Guest29400

[23:38] *** tokuhirom joined
[23:39] *** fridim_ left
[23:45] *** fhelmberger joined
[23:48] *** Sarten-X left
[23:53] <diakopter> pmichaud: ping

[23:53] <diakopter> seen pmichaud

[23:53] <aloha> pmichaud was last seen in #parrot 3 hours 29 mins ago joining the channel.

[23:58] *** envi_ joined
