[00:06] <TimToady> sorear: the spec only mentions int64, not Int64

[00:07] <dalek> niecza: f95532e | sorear++ | / (5 files):

[00:07] <dalek> niecza: [mmd] Implement bindability checks

[00:07] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f95532ef87

[00:07] <dalek> niecza: 70fa410 | sorear++ | / (2 files):

[00:07] <dalek> niecza: [mmd] Implement redispatching to candidate list

[00:07] <TimToady> but I view storage types as primarily constrained values of a larger type

[00:07] <dalek> niecza: review: https://github.com/sorear/niecza/commit/70fa4104e8

[00:08] <sorear> TimToady: this was prompted by thundergnat looking for :rotate

[00:08] <sorear> I'm not sure how :rotate is expected to discover the type size

[00:08] <sorear> on +> / +<

[00:09] *** ymasory joined
[00:10] <TimToady> I suppose we could do :rotate(64)

[00:12] <TimToady> or we could somehow mark ops whose unboxed types are known at compile time

[00:13] <TimToady> that might take some type inference though

[00:13] <TimToady> bbl &

[00:15] *** sftp left
[00:15] *** sftp_ joined
[00:16] *** starcoder left
[00:16] *** starcoder joined
[00:21] *** whiteknight joined
[00:32] *** icwiener left
[00:33] *** benabik joined
[00:34] <Tene> TimToady: any thoughts on sorear's assertion that *&foo in a signature is unimplementable?

[00:34] *** justatheory left
[00:34] <sorear> *&foo appears to be a relic from the Perl5 '&' signature

[00:43] *** madalu joined
[00:46] *** wallberg left
[00:48] *** madalu left
[00:52] *** ymasory left
[01:11] *** justatheory joined
[01:19] *** whiteknight left
[01:23] *** leprevost joined
[01:27] *** mtk left
[01:28] *** gantrixx left
[01:28] *** gantrixx joined
[01:35] *** mtk joined
[01:44] *** kanishka left
[01:49] *** silent_h_ joined
[02:00] *** Alias joined
[02:01] *** Woody2143 left
[02:01] *** larsen_ left
[02:01] *** edenc left
[02:01] *** hillu_ left
[02:01] *** dukeleto left
[02:01] *** aesop left
[02:01] *** athomason left
[02:01] *** szbalint_ left
[02:01] *** Grrrr left
[02:01] *** PerlJam left
[02:01] *** [Coke] left
[02:01] *** sunnavy left
[02:01] *** BinGOs left
[02:01] *** Raynes left
[02:02] *** Sarten-X left
[02:02] *** ggoebel left
[02:02] *** xinming left
[02:03] *** Sarten-X joined
[02:03] *** ggoebel joined
[02:03] *** xinming joined
[02:03] *** amkrankruleuen joined
[02:03] *** Woody2143 joined
[02:03] *** LoRe joined
[02:03] *** huf joined
[02:03] *** larsen_ joined
[02:03] *** hillu_ joined
[02:03] *** dukeleto joined
[02:03] *** aesop joined
[02:03] *** athomason joined
[02:03] *** Grrrr joined
[02:03] *** PerlJam joined
[02:03] *** [Coke] joined
[02:03] *** sunnavy joined
[02:03] *** BinGOs joined
[02:03] *** Raynes joined
[02:04] *** edenc joined
[02:04] *** szbalint joined
[02:04] *** nsh_ joined
[02:11] *** silent_h_ left
[02:26] *** agentzh joined
[02:48] *** takadonet1 joined
[02:48] <takadonet1> hey

[02:48] *** gantrixx left
[02:49] <takadonet1> anyone know what the equivalent is for Perl 5 $/  in Perl 6?

[02:51] *** ymasory joined
[02:53] *** woosley joined
[02:57] *** leprevost left
[02:58] <sorear> takadonet1: S28:182

[03:01] <takadonet1> sorear: looks NYI :(

[03:06] *** hudnix left
[03:08] <tylercurtis> std: $/

[03:08] <p6eval> std 4608239: OUTPUT¬´ok 00:01 118m‚ê§¬ª

[03:08] <tylercurtis> ah, right.

[03:20] <takadonet1> sorear: thx

[03:20] <takadonet1> night all

[03:20] *** takadonet1 left
[03:21] *** JimmyZ joined
[03:21] <JimmyZ> TimToady:  ping

[03:23] *** Su-Shee_ joined
[03:27] *** Su-Shee left
[03:33] *** Exodist left
[03:33] *** nymacro joined
[03:38] *** JimmyZ left
[03:43] <sorear> rakudo: multi foo(Int $a, Int $b) { say 1; nextsame }; multi foo(Any $a, Int $b) { say 2 }; multi foo(Int $a, Any $b) { say 3 }; foo(5,6);

[03:43] <p6eval> rakudo 4bf132: OUTPUT¬´1‚ê§Null PMC access in clone()‚ê§  in 'foo' at line 1‚ê§  in main program body at line 22:/tmp/M1X43YJANG‚ê§¬ª

[03:43] <sorear> What?

[03:50] *** JimmyZ joined
[03:50] *** MindosCheng left
[03:50] *** JimmyZ left
[04:01] *** gantrixx joined
[04:02] *** JimmyZ joined
[04:02] *** orafu left
[04:04] *** orafu joined
[04:08] *** plobsing_ left
[04:18] *** agentzh left
[04:29] *** ymasory left
[04:30] *** cibs joined
[04:30] *** kst left
[04:52] *** ymasory joined
[05:17] *** sftp_ left
[05:32] *** Khisanth left
[05:36] *** arlinius left
[05:37] *** justatheory left
[05:48] *** arlinius joined
[05:53] *** Guest84973 joined
[05:55] *** wtw joined
[05:58] *** Guest84973 is now known as Khisanth

[05:58] <sorear> today's .NET pet peeve: arrays use .Length while lists use .Count for no obvious reason

[06:00] *** woosley left
[06:00] *** woosley joined
[06:08] *** donri joined
[06:14] <dalek> niecza: fb61e2b | sorear++ | lib/Kernel.cs:

[06:14] <dalek> niecza: [mmd] Implement candidate sorting

[06:14] <dalek> niecza: review: https://github.com/sorear/niecza/commit/fb61e2be54

[06:14] <dalek> niecza: 2dd3fec | sorear++ | lib/Kernel.cs:

[06:14] <dalek> niecza: [mmd] Implement tie checking

[06:14] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2dd3fec317

[06:14] <sorear> 'multi method' is now fully functional

[06:15] <sorear> tomorrow I'll work on 'multi sub'

[06:16] <sorear> also tomorrow will cache dispatch lists

[06:16] *** kaare_ joined
[06:20] *** birdwindupbird joined
[06:20] *** birdwindupbird left
[06:21] *** birdwindupbird joined
[06:27] *** birdwindupbird left
[06:27] *** birdwindupbird joined
[06:27] *** noganex_ is now known as noganex

[06:36] *** fhelmberger joined
[06:45] *** Su-Shee_ is now known as Su-Shee

[06:53] *** shi joined
[07:01] *** kanishka joined
[07:04] *** fhelmberger left
[07:04] *** fhelmberger joined
[07:17] *** wallberg joined
[07:18] *** mj41 joined
[07:33] *** kanishka left
[07:33] *** Mowah joined
[07:43] *** woosley1 joined
[07:45] *** woosley left
[07:46] *** mtoma joined
[07:46] *** mtoma left
[07:47] *** mtoma joined
[07:47] *** mtoma is now known as miso

[07:47] *** miso left
[07:48] *** drbean_ joined
[07:50] *** miso2217 joined
[07:51] <miso2217> perl6: say 3;

[07:51] <p6eval> pugs, rakudo 4bf132, niecza v4-26-g2dd3fec: OUTPUT¬´3‚ê§¬ª

[07:51] <moritz> good morning

[07:52] <miso2217> perl6: if (1){say 3;}

[07:52] <p6eval> pugs: OUTPUT¬´*** ‚ê§    Unexpected ";}"‚ê§    expecting "_", fraction, exponent, term postfix, operator, ":", "," or "}"‚ê§    at /tmp/egQTdujPvN line 1, column 13‚ê§¬ª

[07:52] <p6eval> ..rakudo 4bf132: OUTPUT¬´===SORRY!===‚ê§Missing block at line 22, near ""‚ê§¬ª

[07:52] <p6eval> ..niecza v4-26-g2dd3fec: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Any()Missing block at /tmp/bxdGIZlF1n line 1 (EOF):‚ê§------> [32mif (1){say 3;}[33m‚èè[31m<EOL>[0m‚ê§‚ê§Parse failed‚ê§‚ê§¬ª

[07:52] <miso2217> perl6: if (1) {say 3;}

[07:52] <p6eval> pugs, rakudo 4bf132, niecza v4-26-g2dd3fec: OUTPUT¬´3‚ê§¬ª

[07:52] <moritz> perl6: if 1 { say 3 } # no need for those parens

[07:53] <p6eval> pugs, rakudo 4bf132, niecza v4-26-g2dd3fec: OUTPUT¬´3‚ê§¬ª

[07:55] <JimmyZ> std: if (1){say 3;}

[07:55] <p6eval> std 4608239: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Missing block at /tmp/zM2w3TW8cL line 1 (EOF):‚ê§------> [32mif (1){say 3;}[33m‚èè[31m<EOL>[0m‚ê§Parse failed‚ê§FAILED 00:01 119m‚ê§¬ª

[07:56] <moritz> if( is parsed as a function call

[07:56] <moritz> thing{...} is parsed as a postcirumfix

[07:56] <JimmyZ> and if ( ?

[07:56] <moritz> JimmyZ: as a conditional

[07:56] <moritz> an 'if', where the '(' is a circumfix

[07:57] <JimmyZ> so if (1){ ... } ?

[07:57] <moritz> (which is usually a no--op

[07:57] <moritz> JimmyZ: that's parsed as  if  (1).postcircumfix:<{ }>( ... }

[07:58] <moritz> and then there's no block left for the if

[07:58] <moritz> which is why STD complains about missing block

[07:58] <miso2217> It was somwhat surpsising as I always used the if (1){ form, the error message is somewhat not too clear. Should be somewhere in the doc that the space before the { is needed, I think

[07:58] *** pjcj left
[07:58] <miso2217> Always used in perl5 of course

[07:58] <moritz> miso2217: the spec is not user-level documentation. It's in the spec, but not very explicit

[07:59] *** Rotwang joined
[07:59] <moritz> we really need to have user-level documentation that explains such stuff

[08:00] <JimmyZ> std: if (10){} { say 'hi'; }

[08:00] <p6eval> std 4608239: OUTPUT¬´ok 00:01 120m‚ê§¬ª

[08:00] <moritz> it will be a run time error of course

[08:00] <JimmyZ> std: if (10){say 'hi'} { say 'hi'; }

[08:00] <p6eval> std 4608239: OUTPUT¬´ok 00:01 120m‚ê§¬ª

[08:00] <moritz> but it's valid syntax

[08:00] <miso2217> Yes of course, it is but as there is not yet a user level documentation yet I checked the specs.

[08:01] <miso2217> perl6: if (10){say 'hi1'} { say 'hi2'; }

[08:01] <moritz> miso2217: true. But adding user-level docs to the spec is the wrong fix

[08:01] <p6eval> rakudo 4bf132: OUTPUT¬´hi1‚ê§¬ª

[08:01] <p6eval> ..niecza v4-26-g2dd3fec: OUTPUT¬´hi1‚ê§Unhandled exception: Cannot use hash access on an object of type Num‚ê§  at /tmp/6U8fM8nLma line 1 (MAIN mainline @ 1)‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 1277 (CORE C535_ANON @ 2)‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 1278 (CORE module-CORE @

[08:01] <p6eval> ..39)‚ê§  at /home/p‚Ä¶

[08:01] <moritz> and there is some doc, just incomplete

[08:01] <p6eval> ..pugs: OUTPUT¬´hi1‚ê§*** Odd number of elements found where hash expected: VInt 10‚ê§    at /tmp/X42di0Ts0J line 1, column 4-20‚ê§¬ª

[08:05] <JimmyZ> so, the right things is 

[08:05] *** drbean_ left
[08:05] <JimmyZ> rakudo: if (1){ say 3;} {}

[08:05] <p6eval> rakudo 4bf132: OUTPUT¬´3‚ê§¬ª

[08:05] <moritz> miso2217: https://github.com/perl6/book/issues/53 I'v submitted a bug report against the book in progress, so that we don't forget it

[08:06] <JimmyZ> that's ugly

[08:07] <moritz> JimmyZ: it's a known bug in rakudo that hash-indexing a string is not an error

[08:08] <miso2217> I don't really get it, what is the if (1){ say 3;} {} form suposed to do? Call the {say 3;} code block on the (1) list and evaluat that as a bool?

[08:08] <JimmyZ> also a std bug?

[08:09] <moritz> miso2217: the { say 3; } is parsed as a hash index

[08:09] <moritz> miso2217: just like in %hash{ $key }

[08:09] <moritz> JimmyZ: nope. STD doesn't actuall run the code, just parses it

[08:09] <moritz> JimmyZ: so it can't know it's an illegal operation

[08:11] <jnthn> morning o/

[08:11] <moritz> \o

[08:11] <JimmyZ> good morning

[08:11] <JimmyZ> jnthn:  where are you now? sweden Ôºü

[08:12] *** bacek left
[08:12] <jnthn> JimmyZ: yes

[08:13] <miso2217> moritz: so it thries to evaluate (1) as a hash, ok, it's clearer now, thx.

[08:13] *** drbean joined
[08:13] *** pjcj joined
[08:19] <JimmyZ> jnthn, I just got the link. http://conference.perlchina.org/bjpw2011/

[08:24] *** miso2217 left
[08:25] <jnthn> JimmyZ: Ah, OK. One day in June.

[08:25] *** JimmyZ_ joined
[08:27] *** miso2217 joined
[08:27] *** JimmyZ left
[08:27] *** JimmyZ_ is now known as JimmyZ

[08:35] *** domidumont joined
[08:36] *** ab5tract joined
[08:38] *** Rotwang left
[08:44] *** toebu left
[08:54] *** awoodland joined
[09:03] *** jaffa4 joined
[09:04] <jaffa4> hi

[09:13] *** mtk left
[09:17] *** autin joined
[09:19] *** JimmyZ left
[09:21] *** pmurias joined
[09:22] *** awoodland left
[09:22] *** mtk joined
[09:27] *** ab5tract left
[09:29] *** kanishka joined
[09:36] <pmurias> phenny: tell sorear can we drop log from the unit in nam?

[09:36] <phenny> pmurias: I'll pass that on when sorear is around.

[09:45] *** gantrixx left
[09:51] <miso2217> hello, I have two versions of rakudo, rakudo-star-2011.01 and the latest trunk from git. I have a smoll test script which I execute using rakudo-star-2011.01/perl6 ent it works. But if I try with the latest trunk I have an error mesasge: PARROT VM: Could not load bytecodeCould not load oplib `perl6_ops'. This is not really a serious idssue as I only copied the modules directory from rakudo star into the latest rakudo from git. The real problem is that 

[09:51] <miso2217> when after this I try to execute my script with the perl6 in rakudo-star I get a segfault. Any ideas?

[09:54] <moritz> miso2217: have separate install locations for both versions. Always run 'make install'.

[10:00] <miso2217> moritz: what do you mean by "have separate install locations for both versions"? does the 'make install' command try to write comewhere else than the original rakudo directory? I downloaded both vesions in two separate directories "~/TEMP/rakudo-star-2011.01" and "~/TEMP/rakudo" and I think i run make install in both of them. But I did not specify any other install location as I tough I was only writing to the original directories. 

[10:01] <moritz> miso2217: how did you configure the rakudos?

[10:03] <moritz> miso2217: if you configure the current dev version with 'perl Configure.pl --gen-parrot', it will then install into the parrot_install subdirectory

[10:04] <moritz> miso2217: if you do that, and don't have the other perl6 executable in $PATH, you should be safe

[10:04] <miso2217> I run: perl Configure.pl --gen-parrot in both directories

[10:05] <miso2217> I'll check my $PATH

[10:10] <miso2217> I have only ~/TEMP/rakudo/perl6 and ~/TEMP/rakudo-star-2011.01/perl6 none of them is in the $PATH

[10:11] <moritz> where did the star install to?

[10:14] <miso2217> in the star directory only: ~/TEMP/rakudo-star-2011.01/, at least this where it generated the perl6 executable ant the parrot-3.0.0 directory

[10:14] <moritz> that's where it generated it, but that's not where it installed it

[10:17] <miso2217> ~/TEMP/rakudo-star-2011.01/install/

[10:17] <moritz> then I don't see how the installations could interact :(

[10:20] <miso2217> Neither me, i'm checking if the star installation didnt put the parot exe somewhere else, but I dont think so.

[10:22] *** autin left
[10:23] <miso2217> And it did not :( strange. Re-running make install in the star directory solves the problem.

[10:26] *** Mowah left
[10:38] *** dayangkun_ left
[10:41] *** jaffa4 left
[10:46] *** am0c^ joined
[11:05] *** hudnix joined
[11:14] *** dakkar joined
[11:17] *** noganex_ joined
[11:21] *** noganex left
[11:23] *** satyavvd joined
[11:23] *** plobsing joined
[11:53] *** Patterner left
[11:55] *** Psyche^ joined
[11:56] *** Psyche^ is now known as Patterner

[11:57] *** satyavvd left
[12:01] *** pmurias left
[12:02] <takadonet> morning all

[12:07] *** mingzhi joined
[12:08] <mingzhi> echo "fff"

[12:09] <mingzhi> what is this???

[12:09] <moritz> not Perl 6.

[12:10] *** noganex_ is now known as noganex

[12:12] <tadzik> good day everyone

[12:14] <mingzhi> Is there anyone know how to write a shell like in the unix?

[12:14] <moritz> mingzhi: which language do you want to write it in?

[12:15] <mingzhi> C or C++ with python

[12:15] <moritz> then you're off topic here

[12:15] <moritz> but as a small hint: there are already many open source shells in C

[12:15] <moritz> look at their code for inspiration

[12:15] <mingzhi> what one?

[12:16] <moritz> http://gondor.apana.org.au/~herbert/dash/

[12:17] <mingzhi> thanks a lot

[12:19] *** kanishka left
[12:32] *** sftp joined
[12:33] *** am0c joined
[12:35] *** _twitch joined
[12:35] *** Sharon joined
[12:35] *** JimmyZ joined
[12:36] <Sharon> is it legal to use a "powered by perl6" with the logo of perl6 on a perl6 powered website?

[12:36] <Sharon> are there any restrictions?

[12:37] <JimmyZ> you have site  powerd by perl6 ?

[12:37] <moritz> Sharon: Larry said that you can use the Perl 6 logo fairly liberally with anything connected to Perl 6

[12:37] <moritz> https://github.com/perl6/mu/raw/master/misc/camelia.txt

[12:38] <moritz> The Camelia image is a trademark of Larry Wall, and permission is

[12:38] <moritz> granted for non-exclusive use to label anything related to Perl 6,

[12:38] <moritz> provided the image is labeled as a trademark when used as a main logo

[12:38] <moritz> on a page.  

[12:38] <Sharon> I just plan to use it on the footer on the page just to advertise perl6

[12:39] <moritz> since advertising perl6 is surely "related to Perl 6", that's OK :-)

[12:39] <Sharon> ok great :)

[12:40] *** plainhao joined
[12:42] *** [Coke] left
[12:44] <tadzik> Sharon: how are you using Perl 6 to power your site, out of curiosity?

[12:46] *** mingzhi left
[12:47] *** burning_aces joined
[12:50] *** _twitch left
[12:54] *** Sharon left
[12:57] *** bacek joined
[12:58] *** Holy_Cow joined
[13:01] *** jaffa4 joined
[13:01] <jaffa4> hi

[13:01] <jaffa4> What is the state of Perl 6?

[13:02] <moritz> it's in development, as you well know

[13:03] <jaffa4> you measure its state somehow

[13:03] <jaffa4> I guess

[13:03] <jaffa4> e.g. completion state

[13:03] <jaffa4> in %

[13:03] <moritz> no

[13:03] *** shi left
[13:03] <jaffa4> how many features left?

[13:03] <moritz> since we don't know how the "final" (whatever that means) thing looks, we can't know how close we are

[13:03] *** ingy joined
[13:03] <tadzik> aleph 0

[13:03] *** shi joined
[13:04] <jaffa4> How come you do not know?

[13:04] <moritz> jaffa4: counting features would need some kind of quantization, which doesn't exist

[13:04] <JimmyZ> jaffa4:  use it before ask :)

[13:05] <moritz> jaffa4: the spec is still changing, in reponse to implementation concerns and user feedback

[13:05] *** shi left
[13:05] <jaffa4> Are there any serious users?

[13:05] * moritz is serious

[13:06] <jaffa4> with $$$

[13:06] *** geekosaur joined
[13:06] <moritz> some of us earn dollars, yes

[13:06] <moritz> though I'm more of a EUR person

[13:06] <jaffa4> with Perl 6?

[13:07] <jaffa4> Is there a debugger for Perl 6 now?

[13:07] *** silent_h_ joined
[13:08] *** shi joined
[13:09] *** leprevost joined
[13:17] <tadzik> not that I know of

[13:17] <tadzik> oh, there is one for yapsi

[13:17] <moritz> does it actually work?

[13:17] <tadzik> dunno

[13:19] *** pmurias joined
[13:19] *** gantrixx joined
[13:24] <mathw> One of the stated purposes for yapsi is the development of a time-travelling debugger

[13:26] *** woosley1 left
[13:29] *** am0c^ left
[13:31] *** shortcircuit is now known as mikemol

[13:41] <moritz> that doesn't imply that it works now :-)

[13:42] *** hanekomu joined
[13:43] *** hanekomu left
[13:43] *** hanekomu joined
[13:49] <pmurias> sorear: ping

[13:56] *** MindosCheng joined
[14:04] *** jaldhar left
[14:05] *** shi left
[14:09] *** silent_h_ left
[14:09] *** am0c^ joined
[14:17] *** xinming_ joined
[14:17] <jaffa4> time travelling debugger?

[14:19] *** xinming left
[14:21] <mathw> jaffa4: yes, I believe the idea is that you can rewind the program state to any point in its execution history.

[14:22] <jaffa4> Interesting concept

[14:22] <jaffa4> could be useful

[14:23] *** am0c^ left
[14:26] *** justatheory joined
[14:26] *** kaare_ left
[14:27] *** hanekomu left
[14:29] *** justatheory left
[14:32] *** mikehh joined
[14:33] <sorear> jaffa4: ?

[14:33] <phenny> sorear: 09:36Z <pmurias> tell sorear can we drop log from the unit in nam?

[14:35] *** kanishka joined
[14:38] <pmurias> sorear: hi

[14:38] <sorear> pmurias: currently log is what is used to handle run-time stash merging.  There is no easy way to get rid of it

[14:38] <pmurias> it's described as  Mostly unused vestige of last stash system

[14:39] <pmurias> sorear: how is it used?

[14:40] <pmurias> sorear: does it make sense for be to write the loading for the current nam format for the hoop optimiser? or will it change soon?

[14:41] <sorear> pmurias: each entry is converted into code which is added to the BOOT sub

[14:41] <sorear> pmurias: er, if there's no loader, how do you plan to use it?

[14:43] <pmurias> i could wait for the new format

[14:46] *** envi joined
[14:46] *** birdwindupbird left
[14:52] *** JimmyZ left
[14:52] <sorear> new format design is a ways off.. weeks, at least

[14:52] <sorear> I think tonight I'll try to document the stash system

[14:53] <sorear> perl6: class Doubler { multi method double($x) { $x * 2 }; multi method double(Str $x) { $x ~ $x } }; say Doubler.double(35); say Doubler.double("abc")

[14:53] <p6eval> rakudo 4bf132, niecza v4-26-g2dd3fec: OUTPUT¬´70‚ê§abcabc‚ê§¬ª

[14:53] <p6eval> ..pugs: OUTPUT¬´3535‚ê§abcabc‚ê§¬ª

[14:54] <moritz> pugs really faked types

[14:54] <pmurias> sorear: converting the nam into a typed haskell data structure might even help to specify the format more rigorously

[14:55] <sorear> moritz: I'll say!

[14:55] * sorear out

[14:55] *** kanishka left
[14:57] *** am0c left
[14:59] *** [sbp] joined
[15:05] *** kst joined
[15:12] *** am0c joined
[15:14] *** wtw left
[15:17] *** kst left
[15:22] *** uvtc joined
[15:25] <uvtc> Python recently had their Pycon conference, and many of the talks were videotaped.

[15:25] <uvtc> I wasn't at the conference, and it was very cool to watch many of them.

[15:25] <uvtc> Learning some new things as well as putting faces with names.

[15:25] <uvtc> Would be great if http://perl6.org/community/ had some links to videos of Perl 6 talks.

[15:32] <TimToady> +1

[15:33] <jaffa4> What is multi method?

[15:35] <TimToady> having multiple methods of the same name that are differentiated by the types of their arguments to pick the best one to call

[15:36] <TimToady> operator overloading is a specific instance of it

[15:37] <jaffa4> Is it like overloading functions in C++?

[15:38] <TimToady> a little, except it's dispatched at run time, not decided in advance like in C++

[15:38] <TimToady> (well, we can decide some parts of it at compile time too, like what the candidate list is.)

[15:38] <TimToady> short answer, just like C++, except correct :)

[15:39] <TimToady> we also discourage people from overloading operators for unrelated purposes, unlike C++

[15:39] <TimToady> instead we encourage people to use an appropriate unicode operator

[15:40] <TimToady> you won't see us using < for IO frinstnce

[15:40] <TimToady> or + for concat

[15:41] <TimToady> (though we did steal p5's . operator for method calls, so switched concat to ~)

[15:42] *** frooh_ left
[15:43] <jaffa4> ~ from D?

[15:43] <moritz> .oO( we could have used -> for concat :-))

[15:44] <uvtc> '~' looks looks stringy ... like you're weaving strings together

[15:44] <TimToady> no, we just picked ~ because it was available, not too hard to type, works as a prefix, and looks like a bit of string :)

[15:45] *** frew joined
[15:45] *** frew left
[15:45] * TimToady is not really familiar with D

[15:45] <TimToady> so think of it as convergent evolution :)

[15:45] *** frew joined
[15:46] *** ymasory_ joined
[15:47] *** mj41 left
[15:51] *** frew left
[15:53] *** rdesfo joined
[15:54] *** kaare_ joined
[16:00] *** ggoebel left
[16:01] *** justatheory joined
[16:08] *** fhelmberger left
[16:09] *** MayDaniel joined
[16:11] <uvtc> What is the current purpose of the github perl6/mu project? Are bits of it gradually being teased out and put into their own dedicated github perl6/foo projects?

[16:13] <moritz> uvtc: mu are those parts of the former pugs repo that don't have enough activity to warrant extracting things into separate repos (yet)

[16:15] <moritz> in fact the one file showing non-zero activity during the last months was dalek-conf.json :-)

[16:16] <uvtc> moritz: ah, the irc bot

[16:16] <moritz> uvtc: right

[16:20] *** risou joined
[16:22] *** uvtc left
[16:24] *** burning_aces left
[16:34] *** pmurias left
[16:34] *** kanishka joined
[16:36] <tadzik> how does one install Rakudo on windows these days?

[16:36] <tadzik> not neceserilly Star, rather a New Rakudo

[16:37] <moritz> just like on linux

[16:37] <moritz> you build it

[16:38] <tadzik> with some specific compiler, msvc or something?

[16:38] * tadzik is completely green about windows

[16:38] <moritz> msvc or cygwin or mingw, iirc

[16:39] <jnthn> MSVC is most actively tested on, I expect

[16:40] <tadzik> jnthn: with MSVC the makefile and everything Just Works?

[16:44] <jnthn> tadzik: I build with ActiveState Perl and MSVC and it associated tool chain, and it all Just Works.

[16:44] <jnthn> The makefile works with nmake (the MS make implementation)

[16:44] <tadzik> nice, thanks

[16:53] *** M_o_C joined
[16:53] *** Chillance joined
[16:54] <tadzik> wow, cygwin can even install Rakudo and Rakudo Star, shame it's 201007

[16:57] <benabik> Ug, Cygwin.  I used to use it a lot but decided a VirtualBox Debian or Ubuntu install was just easier.

[17:00] <tadzik> I'm in a "Virtualbox Windows" situation :P

[17:01] <benabik> Details, details.

[17:03] *** rdesfo left
[17:07] *** dakkar left
[17:14] *** M_o_C left
[17:15] <tadzik> IAL. My signicant other: ‚ÄûRakudo, that's this ¬´way of the something¬ª?‚Äù

[17:17] *** M_o_C joined
[17:18] <PerlJam> no, it's the way of whatever  ;)

[17:18] <tadzik> ;)

[17:19] *** Eevee left
[17:20] *** Eevee joined
[17:21] *** ab5tract joined
[17:25] *** masak joined
[17:25] <masak> greetings, #perl6 folks.

[17:25] <jnthn> o/ maska

[17:25] <jnthn> gah

[17:25] <jnthn> masak

[17:25] <masak> :)

[17:25] <moritz> \o

[17:26] <jnthn> .oO( it was a typo, but I coulda claimed accidental accusative case... )

[17:26] <masak> j'accuse!

[17:26] <jnthn> :P

[17:28] <tadzik> hi maska!

[17:30] <masak> :P

[17:30] *** cdarroch joined
[17:30] *** cdarroch left
[17:30] *** cdarroch joined
[17:30] <masak> in my mother tongue, sv:'maska' means en:'stitch'.

[17:31] <tadzik> in my mother tongue it's "mask"

[17:31] <tadzik> phenny: "maska"?

[17:31] <phenny> tadzik: "Mask" (sl to en, translate.google.com)

[17:31] <masak> tadzik: was just going to say that :)

[17:31] <masak> tadzik: or 'hood', right?

[17:31] <tadzik> not really, if that's the hood I think about. Oh, the car hood?

[17:31] <masak> dunno.

[17:31] <tadzik> Not the Robin Hood :)

[17:32] <masak> I'm doing Google Translate research :)

[17:32] <masak> many things that cover/conceal, it seems.

[17:32] <masak> mask/hood/vizor/guise.

[17:34] <jnthn> nom time, then back to nqp :)

[17:35] <tadzik> I thought nqp is a prerequisite for nom :)

[17:35] *** wallberg left
[17:35] <jnthn> :P

[17:35] <jnthn> Last night, it turned out fixing Parrot's register allocator was a prerequisite for nqp :/

[17:35] <jnthn> Thankfully, I haz a viable patch.

[17:36] <masak> wow, niecza has multi methods.

[17:36] <masak> jnthn++ # viable patch

[17:39] *** risou_ joined
[17:43] *** risou left
[17:44] *** nnunley joined
[17:45] *** nnunley left
[17:45] *** nnunley joined
[17:46] *** nnunley left
[17:56] <masak> backlog: yes, the debugger for Yapsi works. it's called Tardis. it travels in time.

[17:57] <masak> that said, it's limited by what Yapsi can run, which is... limited.

[17:59] <masak> jaffa4: hi! \o

[18:00] <masak> jaffa4: when you ask about the degree of completion of Perl 6, what is it that you really have in mind? do you plan to start trying it out when it hits 100%? ;)

[18:01] <masak> if I told you "Perl 6 is at 65%" without providing a source for that number, would that be sufficient?

[18:01] <masak> I'm not trying to be insolent, just wondering what you're going to use the percentage for.

[18:01] *** icwiener joined
[18:01] *** mj41 joined
[18:02] *** mikehh left
[18:03] *** M_o_C left
[18:03] <jaffa4> masaK: hi

[18:03] <jaffa4> I have to think about the answer

[18:04] <jaffa4> masak

[18:04] <masak> that's fine.

[18:04] <jaffa4> I have already tried it couple of times

[18:04] <jaffa4> by the way

[18:04] <masak> I know you have. :)

[18:04] <masak> but that only means that you should be able to estimate what's there already and what isn't yet. :)

[18:05] <PerlJam> 85% of statistics are made-up on the spot though

[18:05] <jaffa4> there is another project

[18:05] <jaffa4> they make a C++ compiler

[18:05] <arnsholt> masak: But which estimator should he use? Maximum Likehood, Maximum A Posteriori? I don't know anymore!

[18:05] <jaffa4> there I could see what features of C++ compiler are implemented

[18:05] <arnsholt> (Says the man up to his ears in statistical gobbledy-gook)

[18:05] <jaffa4> when I asked that is what I ahd in my mind

[18:06] <masak> arnsholt: crystall ball, preferably.

[18:06] * moritz already explained the difference about frozen spec

[18:06] <jaffa4> look here what I mean: http://clang.llvm.org/cxx_status.html

[18:06] <masak> jaffa4: oh, ok. well, the closest thing we have is the spec (in its current state), and the amount we implement of that.

[18:07] <masak> jaffa4: BUT (as moritz  points out), the spec is still changing in response to the implementation digging further into Perl 6.

[18:07] <jaffa4> ok

[18:07] <arnsholt> masak: Indeed. I wish I had a CRF crystal ball. Would save me enormous amounts of time waiting for numerical approximations to converge ^_^

[18:07] <masak> jaffa4: and (perhaps more important), we *expect* it to do so.

[18:07] <jaffa4> you can still have a snapshot

[18:07] <masak> jaffa4: we have lots of snapshots :)

[18:07] <masak> it's called git :)

[18:07] <jaffa4> a snapshot of completion

[18:08] <masak> jaffa4: point is, we're currently more interested in making a good spec than having a frozen spec.

[18:08] <masak> at least that's true for some parts of the spec. some are already quite stable.

[18:08] <masak> if you want a Perl 6 that doesn't change much at all, I recommend traveling about 30 years into the future.

[18:09] <jaffa4> that is not a problem if it is changing

[18:09] <jaffa4> I just would like to see what is its state now

[18:09] <masak> if you're fine with it not changing: welcome! we're having fun using Perl 6 already, and you're free to join! :)

[18:09] <masak> there are a few drawbacks:

[18:09] <masak> * documentation is sometimes difficult and/or incomplete

[18:10] <masak> * blog posts grow old quickly, and aren't always kept up-to-date

[18:10] <masak> * sometimes the only way to learn something is to ask here

[18:10] <masak> #perl6 is definitely the prime source of knowledge at this point. not some book or online tutorial.

[18:11] <masak> that said, the Advent Calendar is very good, and probably very up-to-date.

[18:11] <moritz> advantage: you can blog multiple times about the same topic

[18:11] <masak> :P

[18:11] <masak> one of the biggest advantages for me is that I get to be a (small) part of creating an awesome language.

[18:11] <jaffa4> What Advent Calendar?

[18:12] <masak> http://perl6advent.wordpress.com/

[18:12] <masak> (enjoy!)

[18:12] * PerlJam boggles that someone is on #perl6 and missed the advent calendar

[18:12] <PerlJam> (but I guess that's normal because it is a seaonal thing after all)

[18:14] <jaffa4> good idea, the advent calendar

[18:15] <takadonet> people blog about perl6? cool

[18:15] <takadonet> :)

[18:15] <tadzik> :)

[18:15] <tadzik> I almost didn't catch it on time :)

[18:16] *** envi left
[18:18] <jaffa4> has anyone made a compiler for parrot?

[18:18] <jaffa4> has anyone made a compiler for parrot bytecode?

[18:19] <masak> yes.

[18:19] <jaffa4> last time I checked something like that

[18:19] <jaffa4> it did not work

[18:19] <jaffa4> I wonder anything has changed since then.

[18:20] <benabik> Compiler for bytecode?  Like bytecode to i386, or language to bytecode?

[18:20] <jaffa4> bytecode to assemly or machine language or to executable

[18:21] <benabik> I don't think there's a program that does that currently.  There's a JIT prototype, but nothing functional at the moment.  It does allow you to make a small executable wrapper (ref: "perl6" binary in Rakudo)

[18:22] <tylercurtis> Wait. Was there Perl 6 advent calendar last year?

[18:22] * tylercurtis somehow forget to read it, I think.

[18:22] <flussence_> yep

[18:23] <masak> tylercurtis: happy reading! :D

[18:27] <tadzik> (:

[18:28] *** Eevee left
[18:28] <tylercurtis> masak: thanks. I'm sure I will enjoy reading them eventually.

[18:28] <jaffa4> ok, bye all

[18:30] <masak> bye, jaffa4 \o

[18:34] *** MayDaniel left
[18:42] *** nymacro left
[18:58] *** fhelmberger joined
[18:58] *** fhelmberger left
[18:59] *** fhelmberger joined
[18:59] *** awoodland joined
[19:02] *** kanishka left
[19:03] *** Eevee joined
[19:04] *** kst joined
[19:06] *** ymasory left
[19:06] *** ymasory_ is now known as ymasory

[19:06] *** risou_ left
[19:18] *** kanishka joined
[19:32] *** proller joined
[19:35] *** justatheory left
[19:43] <dalek> nqp/ctmo: ad4b814 | jonathan++ | src/ (3 files):

[19:43] <dalek> nqp/ctmo: Make native types declared in the setting be lexically scoped.

[19:43] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/ad4b8140fa

[19:43] <dalek> nqp/ctmo: 89440ca | jonathan++ | build/PARROT_REVISION:

[19:43] <dalek> nqp/ctmo: Bump Parrot revision to get lexical register allocation fix.

[19:43] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/89440ca7ca

[19:43] *** fhelmberger left
[19:45] <dalek> nqp/ctmo: 9a54b8e | jonathan++ | src/Regex.pir:

[19:45] <dalek> nqp/ctmo: Remove debugging comment accidentally left in.

[19:45] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/9a54b8eb70

[19:45] <sjohnson> so, whats new in the perl 6 world

[19:48] <tadzik> sjohnson \o/

[19:48] <sjohnson> yo tadzik

[19:48] * PerlJam is waiting for more Perl 6 proposals for GSoC

[19:50] <tadzik> sjohnson: you don't have this long face unicodeart somewhere near, do you? :)

[19:51] *** aesop left
[19:52] <sjohnson> i do!

[19:52] <sjohnson> different varieties too

[19:52] <sjohnson> Ôºà„ÄÄÔΩÄ„Éº¬¥Ôºâ

[19:52] <sjohnson> fat face

[19:52] <sjohnson> Ôºà¬¥„ÉºÔΩÄ„ÄÄÔºâ

[19:52] <sjohnson> worried fat face

[19:52] <sjohnson> Ôºà„ÄÄ¬∞ „Éº¬∞Ôºâ

[19:52] <sjohnson> fat face after realizing there is porn on the internet

[19:53] <dalek> errors: 7e7bf7c | moritz++ | notes.pod:

[19:53] <dalek> errors: add notes on checking for specific excpetions

[19:53] <dalek> errors: review: https://github.com/perl6/errors/commit/7e7bf7cf3d

[19:56] <masak> sjohnson: I always thought it was the face of a pug :>

[19:59] *** stkowski joined
[20:00] <sjohnson> well, interpretation is in the eye of the beholder

[20:00] <sjohnson> mr wall thought it was a sleeping cat, which is cute

[20:01] *** frew joined
[20:02] <masak> frew! \o/

[20:02] <frew> ...?

[20:02] <PerlJam> Stop saying "mr wall".   It always takes me a second to figure out who you're talking about ;)

[20:02] <pyrimidine> Pink Floyd's Mr. Wall

[20:03] * PerlJam wonders how the bricks got there though

[20:03] <PerlJam> Did he eat them?

[20:03] *** BenPoole joined
[20:03] * TimToady is usually just known as "that guy cowering over in the corner"

[20:03] *** BenPoole left
[20:04] <masak> TimToady: because of the bricks?

[20:04] * pyrimidine is trying to think of a finish to the line "We don't need no ..." w/o starting a language war

[20:04] *** kanishka left
[20:05] <PerlJam> pyrimidine: we're fairly language-agnostic here ...  I mean they're all just subsets of Perl 6 anyway  ;)

[20:05] *** mj41 left
[20:05] <PerlJam> s/subset/slang/

[20:05] <pyrimidine> PerlJam: very true

[20:08] *** plainhao left
[20:10] <sjohnson> Larold Wallstonbury

[20:10] *** aesop joined
[20:12] *** y3llow_ joined
[20:12] *** pothos_ joined
[20:14] *** y3llow_ is now known as y3llow

[20:15] *** pothos_ left
[20:15] *** pothos joined
[20:21] *** leprevost left
[20:23] *** PerlJam left
[20:23] *** PerlJam joined
[20:26] *** [Coke] joined
[20:30] *** MayDaniel joined
[20:39] *** MayDaniel left
[20:47] *** testin joined
[20:47] *** Mowah joined
[20:47] <testin> hola?

[20:48] <jnthn> cerveza?

[20:48] <testin> adios..may the force be with youQ

[20:48] <testin> cerveza  porfavor

[20:48] *** testin left
[20:50] <jnthn> Well, that's my Spanish practice for the year. :)

[20:53] <tadzik> "a mi tambien", he said, laughing in the face of grammar rules

[20:53] *** Holy_Cow left
[20:59] *** pmurias joined
[21:01] *** Khisanth left
[21:01] <pmurias> masak: re frozen spec, even if we had a frozen spec, it wouldn't help estimating completion much

[21:02] <masak> no, probably not.

[21:02] <masak> freezing the spec, IMO, is a solution looking for a problem.

[21:03] <tadzik> no need for freezing the spec w/o freezing the compiler behaviour

[21:12] *** mj41 joined
[21:14] *** Mowah left
[21:14] *** justatheory joined
[21:18] <pmurias> why are people interested so much when 100% feature completeness will happen?

[21:19] <tadzik> they have a different attitude, I can understand that

[21:23] <masak> easiest to think of this in terms of early adopters vs late adopters, perhaps.

[21:24] <masak> asking for 100% feature completeness is a late-adopter question.

[21:26] *** Guest51323 joined
[21:28] <masak> rakudo: my @a = ""; @a = @a X~ "foo", "bar"; say @a.perl

[21:28] <p6eval> rakudo 4bf132: OUTPUT¬´["foo", "bar"]‚ê§¬ª

[21:28] <masak> rakudo: my @a = ""; @a X~= "foo", "bar"; say @a.perl

[21:28] <p6eval> rakudo 4bf132: OUTPUT¬´[""]‚ê§¬ª

[21:29] <masak> rakudo: my @a = ""; @a X~= ("foo", "bar"); say @a.perl

[21:29] <p6eval> rakudo 4bf132: OUTPUT¬´[""]‚ê§¬ª

[21:29] <masak> bug?

[21:30] <pmurias> masak: but 100% feature completeness isn't important for production readiness, things like library support and performance are much more important

[21:31] <masak> that's another thing. people want something, but they think that something is called "100% completeness".

[21:31] <pmurias> according to google g++ isn't 100% complete

[21:34] <pmurias> google meaing stuff found by a search  not some offical statement from the company ;)

[21:34] *** proller left
[21:34] <pmurias> * meaning

[21:35] *** Guest51323 is now known as Khisanth

[21:37] <Eevee> I don't think "100% complete" means the same to you and them

[21:37] <Eevee> I suspect a lot of people asking when it's "done" just mean "when can I do all the things you've promised"

[21:37] <masak> that's a good point.

[21:38] <masak> maybe never. we've promised so many crazy things.

[21:38] <jnthn> We've delivered quite a few of them though :)

[21:38] *** icwiener left
[21:38] <masak> yeah.

[21:38] <jnthn> Though with quite a few still go to :)

[21:44] <masak> but looking good!

[21:44] <masak> S09 up next, with luck.

[21:44] <masak> I still believe S09 will be an important one for showing off Perl 6 from the good side.

[21:45] <aesop> it'll be done when it's done - lwall

[21:48] <masak> and that goes for any piece of software. regardless of what deadlines or rules mere mortals come up with.

[21:50] <Eevee> on the bright side, everyone who's bothered that it's not "done" can only be bothered because they want to use it  8)

[21:52] *** kaare_ left
[21:54] <dalek> niecza: 9f14024 | pmurias++ | hoopl/n (2 files):

[21:54] <dalek> niecza: [hoopl] started of loading nam opcodes

[21:54] <dalek> niecza: review: https://github.com/sorear/niecza/commit/9f1402438b

[21:54] <dalek> niecza: 7d6f610 | pmurias++ | hoopl/nam.hs:

[21:54] <dalek> niecza: [hoopl] loads all opcodes in "say 1"

[21:54] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7d6f610cdc

[21:55] *** eternaleye joined
[22:08] <masak> and we should be saying "we're working on it as fast as we can. help us or step aside." ;)

[22:09] *** ymasory left
[22:10] <masak> today's cute little script: this piece of code generates all the possible strings that match /<[hm]> <[ea]> [nk|n|nn] [ing|ell|all]/: https://gist.github.com/908829

[22:12] <masak> in a way, it could be seen as running the regex "in reverse", spitting out all possible matching strings rather than accepting a string and saying if it matched or not.

[22:12] <cognominal_> jnthn, trying to build the current ctmo branch with --gen-parrot and got :  Checking out Parrot RELEASE_3_2_0-100-g7e9553d via git... error: pathspec 'RELEASE_3_2_0-100-g7e9553d' did not match any file(s) known to git. Command failed (status 256): git checkout RELEASE_3_2_0-100-g7e9553d

[22:12] <flussence_> .oO(quantum computer regex engine!)

[22:13] <masak> with this strategy, we'd run into some depth-first problems with quantifiers... but most other things would work fine.

[22:13] *** jaffa4 left
[22:14] <masak> it should be possible to find a lazier formulation of lines 12..14. suggestions welcome.

[22:16] *** Su-Shee left
[22:16] <masak> rakudo: my @a = "foo", "bar"; my @b = "baz", "quux"; .say for [X~] "", @a, @b

[22:16] <p6eval> rakudo 4bf132:  ( no output )

[22:16] <masak> rakudo: my @a = "foo", "bar"; my @b = "baz", "quux"; .say for [X~] "", [@a], [@b]

[22:16] <p6eval> rakudo 4bf132:  ( no output )

[22:17] <masak> oh well.

[22:17] <masak> 'night, #perl6

[22:17] *** masak left
[22:23] *** proller_ joined
[22:29] *** ab5tract left
[22:29] <TimToady> niecza: my @a = ""; @a [X~]= ("foo", "bar"); say @a.perl

[22:30] <p6eval> niecza v4-28-g7d6f610: OUTPUT¬´["foo", "bar"]‚ê§¬ª

[22:30] <TimToady> \o/

[22:37] *** thundergnat joined
[22:39] <thundergnat> rakudo: our multi sub infix:¬´op¬ª( $a, $b, :$foo, :$bar ) { .say for $a, $b, $foo, $bar }; infix:¬´op¬ª( 45,3,:foo);

[22:39] <p6eval> rakudo 4bf132: OUTPUT¬´Could not find sub &infix:¬´op¬ª‚ê§  in main program body at line 22:/tmp/rBdw0eLNPE‚ê§¬ª

[22:39] <thundergnat> Arg.

[22:39] <thundergnat> rakudo: our multi sub infix:¬´op¬ª( $a, $b, :$foo, :$bar ) { .say for $a, $b, $foo, $bar }; infix:<op>( 45,3,:foo);

[22:39] <p6eval> rakudo 4bf132: OUTPUT¬´45‚ê§3‚ê§Bool::True‚ê§Any()‚ê§¬ª

[22:41] <thundergnat> sigh. Is there any other way to quote infix sub names? Rakudo apparently doesn't like guillemot quotes when searching for infix subs.

[22:43] <thundergnat> Makes it extremely difficult to use alternate calling conventions for infix:¬´+>¬ª( ){ } among others...

[22:45] <thundergnat> rakudo: my $INTSIZE = (4294967297.Int == 1) ?? 32 !! 64; $INTSIZE.say;

[22:46] <p6eval> rakudo 4bf132: OUTPUT¬´64‚ê§¬ª

[22:46] *** dayangkun_ joined
[22:46] <thundergnat> ^^ ugly hack to determine native int size. 

[22:52] *** awoodland left
[22:53] <flussence_> rakudo: say max (1..128).grep({ ('0b1'~'0' x $^i - 2).Int.sign == 1 })

[22:53] <p6eval> rakudo 4bf132: OUTPUT¬´64‚ê§¬ª

[22:55] *** am0c left
[22:55] *** Chillance left
[22:56] *** mj41 left
[23:03] *** whiteknight joined
[23:05] <thundergnat> Anyway, I wrote the logic to implement :rotate and :unsigned for bit shift operators. It works correctly under 32 and 64 bit linux and Windows. Gist here: https://gist.github.com/908965

[23:08] *** am0c joined
[23:10] *** cdarroch left
[23:24] *** pmurias left
[23:37] *** thundergnat left
[23:38] *** zer0o joined
[23:48] *** cbk left
