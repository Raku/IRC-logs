[00:01] *** Moukeddar left
[00:02] <dalek> nqp/ctmo: 4e2bed3 | jonathan++ | src/ (2 files):

[00:02] <dalek> nqp/ctmo: Remove magical loading of the NQP meta-objects library, and just do it with a use statement in the setting.

[00:02] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/4e2bed30f4

[00:02] <dalek> nqp/ctmo: 8147a0f | jonathan++ | src/stage0/ (6 files):

[00:02] <dalek> nqp/ctmo: Update bootstrap, just to be sure the previous works out there too.

[00:02] *** Moukeddar_ left
[00:02] <dalek> nqp/ctmo: review: https://github.com/perl6/nqp/commit/8147a0fad6

[00:03] <jnthn> That'll do for one day's hacking. :-) 'night o/

[00:27] *** Sarten-X left
[00:38] *** Rotwang left
[00:38] *** Sarten-X joined
[00:46] *** aesop joined
[00:52] *** Moukeddar__ left
[01:10] *** ymasory joined
[01:21] *** cdarroch left
[01:22] *** ymasory left
[01:25] *** justatheory left
[01:30] *** Chillance left
[01:30] *** ymasory joined
[01:33] *** whiteknight left
[01:36] *** alester joined
[01:36] *** ymasory left
[01:45] *** Moukeddar joined
[02:00] *** mtk left
[02:07] *** mtk joined
[02:32] *** leprevost joined
[02:36] *** Moukeddar left
[02:43] <lestrrat> is it possible to do the equivalent of P5 my %HoH = ( key1 => \%args ); while ( my($k, $v) = each %HoH ) { MyClass->new(%$v) #<-- this  }

[02:44] <lestrrat> currently my constructor thinks it's getting one hash argument, so I'd like to flatten it or do the equivalent.

[02:46] <lestrrat> I guess it's  new(|$v) ?

[02:46] <lestrrat> hmm, guess not...

[02:57] *** envi joined
[03:07] *** dwhipp joined
[03:12] <dwhipp> lestrrat: did you try: for %hoh.kv -> $key, %h { MyClass.new(|%h) }

[03:15] <lestrrat> for ... -> $k, %v gave me a compile error :/   something about "Nominal type check failed for parameter '%v'; expected Associative but got Seq instead"

[03:18] <dwhipp> rakudo: my %hoh = ( 'a' => { 'b' => 1 } ); class X { has $.b }; for %hoh.kv -> $k, %h { my $x = X.new(|%h); say $x.perl }

[03:18] <p6eval> rakudo ecc4ef: OUTPUT«X.new(b => 1)␤»

[03:23] *** Su-Shee_ joined
[03:27] *** Su-Shee left
[03:33] *** dwhipp left
[03:37] <tylercurtis> rakudo: my %hoh = a => {c => 1, d => 2}, b => {c => 3, d => 4}; class X { has $.a; has $.b }; for %hoh.kv -> $k, %h { my $x = X.new(|%h); say $x.perl }

[03:37] <p6eval> rakudo ecc4ef: OUTPUT«X.new(a => Any, b => Any)␤X.new(a => Any, b => Any)␤»

[03:38] <tylercurtis> rakudo: my %hoh = a => {c => 1, d => 2}, b => {c => 3, d => 4}; class X { has $.a; has $.b }; for %hoh.kv -> $k, $h { my $x = X.new(|$h); say $x.perl }

[03:38] <p6eval> rakudo ecc4ef: OUTPUT«X.new(a => Any, b => Any)␤X.new(a => Any, b => Any)␤»

[03:38] <tylercurtis> rakudo: my %hoh = a => {c => 1, d => 2}, b => {c => 3, d => 4}; class X { has $.c; has $.d }; for %hoh.kv -> $k, %h { my $x = X.new(|%h); say $x.perl }

[03:38] <p6eval> rakudo ecc4ef: OUTPUT«X.new(c => 1, d => 2)␤X.new(c => 3, d => 4)␤»

[03:44] <tylercurtis> lestrrat: Can you give more details about the code you're trying that isn't doing what you want?

[03:49] *** ymasory joined
[03:49] *** fhelmberger joined
[03:54] *** ymasory left
[04:01] *** Bucciarati left
[04:17] *** orafu left
[04:17] *** orafu joined
[04:26] *** pigdude joined
[04:41] <snarkyboojum> I get a fail in t/spec/S19-command-line/dash-e.t when running the spec test suite on OS X. Unicode related. I have ICU installed and parrot build uses it. Yay unicode related test failures.

[04:42] <snarkyboojum> on another note, it's the only test which fails out of the whole spectest! o/

[04:42] <snarkyboojum> (for me)

[04:44] <snarkyboojum> sad that the option explanation when using --help was taken out - was nice to get an explanation of what options meant and what params they took

[04:45] *** drbean left
[05:06] *** birdwindupbird joined
[05:16] *** pigdude left
[05:28] *** alester left
[05:31] <lestrrat> tylercurtis: hmm, that works?

[05:31] <lestrrat> odd...

[05:31] <lestrrat> I'll try it after $day_job

[05:32] *** peterhil left
[05:33] *** hudnix left
[05:39] *** geekosaur is now known as eviltwin_b

[05:39] *** frooh left
[05:44] *** Bzek left
[06:14] *** isBEKaml joined
[06:16] *** mj41 joined
[06:31] *** nymacro joined
[06:46] *** masak joined
[06:46] <masak> good Friday, #perl6.

[06:47] <isBEKaml> goodfriday,masak. :)

[06:49] *** birdwindupbird left
[06:54] <sorear> hi masak!

[06:55] <masak> hello there.

[06:59] <masak> sorear: question: what's your reaction on http://blogs.perl.org/users/martin_berends/2011/04/niecza-almost-took-part-in-the-perl-6-coding-contest.html ?

[07:00] * PerlJam thinks mberends has a different definition of "almost" than him  ;)

[07:00] <masak> I mean, do you think it would help niecza to (let's say) help improve it with those scripts in mind?

[07:01] <sorear> yes

[07:01] <sorear> I haven't read the post yet

[07:04] <masak> I'd like to create an editable web resource somewhere to keep track of (1) the errors or faulty results from the scripts, (2) why they occur, (3) if and how they can be worked around, and (4) what features niecza would need for them to run.

[07:05] <sorear> mberends doesn't seem to be on planetsix

[07:05] <sorear> BOO

[07:06] <masak> that can probably be ameliorated.

[07:08] *** birdwindupbird joined
[07:08] <sorear> mberends++ for confirming my suspicion that the spectests are a reasonable cross-section of "real world" Perl 6

[07:08] <sorear> if more than one sample says "Niecza can run 10% of real code", I feel more confidence

[07:09] <sorear> thanks masak

[07:09] *** Trashlord left
[07:10] *** Trashlord joined
[07:11] <TiMBuS> will the new 6model will change how .^methods work? im assuming so

[07:12] <TiMBuS> as in, theres a bug in ^add_composable that makes the object lose its type. is it worth investigating at this point?

[07:15] <masak> ah, here we go: https://github.com/perl6/misc/wiki/Niecza-and-p6cc2010

[07:16] *** drbean joined
[07:17] <masak> sorear: the spectests both are and aren't a "reasonable cross-section". the one thing that application code does that spectests don't: application code tends to "sweep" over the configuration space of possible programs, and thus discover more bugs in the implementation.

[07:30] <moritz> s/more/other/

[07:30] <masak> right.

[07:38] <masak> TiMBuS: I'd say it's worth investigating, or at least noting down in a rakudobug.

[07:46] *** jedai left
[07:51] <TiMBuS> masak, youve already done it :>

[07:53] <TiMBuS> i was investigating why typed arrays infinitely looped out on access

[07:57] <masak> oh, ok.

[07:57] *** Trashlord left
[07:59] *** Trashlord joined
[08:00] *** jedai joined
[08:13] *** Su-Shee_ is now known as Su-Shee

[08:27] *** Trashlord left
[08:28] *** Mowah joined
[08:29] *** Trashlord joined
[08:35] *** aindilis left
[09:08] *** pmurias joined
[09:09] *** envi left
[09:10] *** jaldhar left
[09:10] *** jaldhar joined
[09:11] *** envi joined
[09:11] <pmurias> phenny: tell sorear the p6 coding contest entries represent the subset of "real world" Perl 6 programms that actually run on rakudo

[09:11] <phenny> pmurias: I'll pass that on when sorear is around.

[09:14] *** SHODAN joined
[09:15] <masak> I think that was already clear... :)

[09:17] <pmurias> and as they were supposed to be idiomatic they are likely to be stretching the limit of what rakudo can do

[09:17] <masak> some do, some don't.

[09:18] <masak> also, depends what you mean by "limits" :)

[09:18] <pmurias> are the submission somewhere in a repo?

[09:18] <pmurias> masak: meaning that they use all the new cool features like junctions etc.

[09:18] <pmurias> * submissions

[09:18] <masak> junctions are notably absent from most submissions. except in some if statements.

[09:19] <masak> pmurias: they are in a repo, but one I've kept private since I used it during the whole contest.

[09:19] <masak> I could probably pull out the submissions themselves and publish them in a public repo.

[09:20] *** am0c joined
[09:20] <pmurias> as http://strangelyconsistent.org/p6cc2010/ seems a very inconvinient iterface to download them all

[09:22] *** Mowah left
[09:23] <masak> yes; having it on github would be far superior.

[09:24] <masak> I'm a bit tied up right now with the #cqrs-perl6 hackathon.

[09:24] <masak> but later I will throw it up as a github repo.

[09:44] <tadzik> friday, friday... hello zebras!

[09:44] * tadzik has his both hands free :)

[09:47] *** mtk left
[09:47] *** icwiener joined
[09:53] <moritz> \o/

[09:55] *** mtk joined
[10:11] *** MayDaniel joined
[10:12] <masak> tadzik: congrats!

[10:22] *** isBEKaml left
[10:27] *** birdwindupbird left
[10:28] *** isBEKaml joined
[10:30] *** birdwindupbird joined
[10:35] <tadzik> :)

[10:36] *** isBEKaml left
[10:37] <tadzik> also, I now have internets at the garden, thanks to my mother's way of thinking

[10:37] <tadzik> where I look for technology, she expands the existing solution. Where I worry about wifi, she thinks of dropping a 10-or-20 meter ethernet cable out of the window

[10:38] <tadzik> the most awesome workplace I ever had <3

[10:39] *** am0c left
[10:51] *** MayDaniel left
[10:52] *** am0c joined
[10:54] *** pernatiy left
[11:00] *** JimmyZ joined
[11:00] *** Solarion left
[11:00] *** Solarion joined
[11:09] *** dorlamm joined
[11:13] <pmurias> tadzik: so how do you close the window now?

[11:15] <moritz> if the weather in Poland is as good as in Germany right now, I don't see why anyone would want to close a window :-)

[11:15] * jnthn and masak just had lunch outside. It's even nice weather this far north. :)

[11:16] <tadzik> pmurias: as always, shift+super+c

[11:17] <tadzik> http://i.imgur.com/nD0Hn.jpg :)

[11:21] *** awoodland joined
[11:21] <jnthn> tadzik: nice :)

[11:22] <tadzik> so out-chilling :)

[11:26] *** Axius joined
[11:34] *** bacek left
[11:34] *** pernatiy joined
[11:38] *** pernatiy_ joined
[11:39] *** JimmyZ left
[11:40] *** pernatiy left
[11:43] *** Chillance joined
[11:46] <tadzik> who misses glob()? Hands up!

[11:47] <tadzik> \o

[11:47] *** bacek joined
[11:47] <pmurias> where is max {...} defined?

[11:48] *** tadzik is now known as wisdom_of_ack

[11:48] <wisdom_of_ack> core/Any-List.pm

[11:48] *** wisdom_of_ack is now known as tadzik

[11:48] <pmurias> in the spec

[11:48] <tadzik> oh

[11:49] *** nymacro left
[11:50] <pmurias> i'm trying to get the pcc entries to work on niecza

[11:50] *** nymacro joined
[11:50] <tadzik> S03-operators.pod I believe

[11:52] *** Axius left
[11:55] *** Patterner left
[11:57] *** Psyche^ joined
[11:57] *** Psyche^ is now known as Patterner

[11:57] <pmurias> it's defined as an infix operator there

[11:57] <pmurias> so it's seems to be a rakudo extension

[11:59] *** leprevost left
[12:05] *** dorlamm left
[12:05] *** JimmyZ joined
[12:06] *** Feng joined
[12:06] *** Feng left
[12:24] *** NAHTANOj joined
[12:27] *** Axius joined
[12:33] *** birdwindupbird left
[12:34] <arnsholt> pmurias: Could be something about it in S32 as well

[12:37] *** birdwindupbird joined
[12:38] *** coldhead left
[12:42] *** mj41 left
[12:48] *** NAHTANOj left
[12:57] <colomon> masak, jnthn: how goes the hacking?

[12:57] <masak> colomon: live at #cqrs-perl6 :)

[12:57] <colomon> ooooo

[12:57] <masak> :)

[12:58] <colomon> with logs, even!  

[12:58] <masak> moritz++

[13:01] * colomon was hoping DDD was the DataDisplayDebugger, which he was just looking at this morning...

[13:02] *** hudnix joined
[13:02] *** Lorn left
[13:03] *** Lorn joined
[13:14] *** awoodland left
[13:15] *** MayDaniel joined
[13:20] *** cosimo left
[13:22] *** Trashlord left
[13:24] *** woosley joined
[13:30] *** MayDaniel left
[13:32] <pmurias> masak: max {...} seems very suspect as being an unspecced thing

[13:37] <tadzik> rakudo: sub a { ??? }; a(); say 'alive'

[13:37] <p6eval> rakudo ecc4ef: OUTPUT«Stub code executed  in 'a' at line 22:/tmp/lfDUrX2WQP␤alive␤»

[13:38] <tadzik> bug?

[13:38] <tadzik> perl6: sub a { ??? }; a(); say 'alive'

[13:38] <p6eval> rakudo ecc4ef: OUTPUT«Stub code executed  in 'a' at line 22:/tmp/7u9ism9XpP␤alive␤»

[13:38] <p6eval> ..niecza v4-67-g1f44650: OUTPUT«Unhandled exception: >>>Stub code executed␤  at /tmp/AVgl5o0zGz line 1 (MAIN a @ 3)␤  at /tmp/AVgl5o0zGz line 1 (MAIN mainline @ 1)␤  at /home/p6eval/niecza/lib/CORE.setting line 1311 (CORE C552_ANON @ 2)␤  at /home/p6eval/niecza/lib/CORE.setting line 1312 (CORE

[13:38] <p6eval> ..module-CORE @ 39)␤ …

[13:38] <p6eval> ..pugs: OUTPUT«*** Cannot cast from VUndef to GHC.IO.Handle.Types.Handle (VHandle)␤    at /tmp/X6I2Ea4A6w line 1, column 9-13␤»

[13:41] <tadzik> oh, just a REPLfail

[14:00] *** hercynium joined
[14:13] *** Rotwang joined
[14:19] *** icwiener left
[14:20] *** Oleg joined
[14:20] *** alester joined
[14:21] *** Oleg is now known as Guest76481

[14:34] *** Trashlord joined
[14:44] <pmurias> sorear: hi

[14:45] *** alester left
[14:53] <bbkr_> any idea why panda returns 

[14:53] <bbkr_> Unknown option: e

[14:53] <bbkr_> while installing MIME::Base64 ?

[14:54] <masak> no, but that sounds odd.

[14:55] <colomon> Seems like that was an error I used to get (with neutro) when I tried to test things with an older version of prove?

[14:56] <bbkr_> I have "prove v2.64, using Test::Harness v2.64 and Perl v5.10.0"

[14:59] <masak> yeah, it's probably in that area, with prove and Test::Harness.

[14:59] <colomon> bbkr_: the one I have now (which works) says TAP::Harness v3.17 and Perl v5.12.3

[15:02] <bbkr_> confirmed. it is prove that does not accept -e switch (called from lib / Panda / Tester.pm line 14)

[15:05] *** ymasory joined
[15:06] *** mkramer joined
[15:06] *** mkramer left
[15:11] <tadzik> oh, not this again

[15:11] <tadzik> Mac OSX, right?

[15:12] <tadzik> oh ok, it's already figured out

[15:12] *** Axius left
[15:12] <tadzik> yeah, I'm afraid you need to update your prove

[15:15] <bbkr_> this occured on Debian 5.0. when tested on Ubunto 10.04 LTS everything works fine, so indeed this is prove lacking --exec param.

[15:15] <bbkr_> and just for curiosity i'll test panda on MacOS X 10.6.7 at home :)

[15:24] *** justatheory joined
[15:26] *** woosley left
[15:30] *** nymacro left
[15:31] *** rdesfo joined
[15:34] <tadzik> :)

[15:34] <tadzik> I think colomon's case was on OSX, and that was the first one

[15:35] *** mkramer1 joined
[15:35] *** jaldhar left
[15:36] *** mkramer1 left
[15:41] *** rgrau left
[15:47] *** MayDaniel_ joined
[15:52] *** simcop2387 left
[15:54] *** am0c left
[15:54] *** simcop2387 joined
[15:57] *** icwiener joined
[16:01] *** risou joined
[16:01] *** alester joined
[16:02] *** ymasory left
[16:07] *** alester left
[16:08] *** am0c joined
[16:08] *** ymasory joined
[16:26] *** Guest76481 left
[16:31] *** alester joined
[16:32] *** am0c left
[16:33] *** ymasory left
[16:35] *** birdwindupbird left
[16:44] *** alester left
[16:48] *** JimmyZ left
[16:56] *** ray24 joined
[16:57] <ray24> Do you have to go to school to learn perl?

[16:57] <moritz> sure

[16:57] <moritz> there's a town called Perl in the north of Germany

[16:57] <moritz> and that's where you can learn perl in school

[16:58] <moritz> http://www.perl-mosel.de/

[17:00] <moritz> sadly about half of the students are distracted by the beautiful landscape

[17:00] <moritz> and leave Perl without substatial Perl knoweledge

[17:02] *** cdarroch joined
[17:02] *** cdarroch left
[17:02] *** cdarroch joined
[17:06] <ray24> I want mastery I don't care about self gratifications

[17:07] <ray24> I need to maximize my potential 

[17:07] <ray24> perl will be a mastery 

[17:07] <moritz> then I suggest quitting IRC, and get on with it

[17:07] <ray24> can do without it?

[17:07] <moritz> you have much more time for programming without IRC

[17:07] <moritz> and mastery needs time

[17:16] <ray24> True, very true.

[17:16] <ray24> But also, it's going to be lonely without IRC :(

[17:16] *** Bzek joined
[17:16] <ray24> And so you are saying all these people here don't have mastery

[17:16] <moritz> not at all

[17:16] <moritz> many just reached mastery before joining IRC

[17:24] *** rindolf joined
[17:24] <rindolf> Hi all.

[17:25] *** risou left
[17:26] <ray24> Can we be with mastery in one language alone?

[17:26] *** allbery_b joined
[17:26] <ray24> can I learn perl without c++ 

[17:27] <rindolf> ray24: yes, you can.

[17:27] <rindolf> ray24: only three people in the world really know C++.

[17:27] <ray24> But I want more mastery than one

[17:27] <rindolf> ray24: that's a good idea.

[17:28] <tadzik> hi rindolf 

[17:28] <rindolf> tadzik: what's up?

[17:29] <tadzik> rindolf: not bad. My hand recently got freed from a cast

[17:29] <rindolf> tadzik: ah, that's good.

[17:30] <sorear> hello pmurias

[17:30] <phenny> sorear: 09:11Z <pmurias> tell sorear the p6 coding contest entries represent the subset of "real world" Perl 6 programms that actually run on rakudo

[17:30] <sorear> good * #perl6

[17:33] <pmurias> sorear: hi

[17:33] <pmurias> sorear: are variables bound by letn mutable?

[17:33] *** mtk left
[17:34] <ray24> Any programmers here a regular chess player?

[17:34] *** allbery_b left
[17:34] *** pmurias left
[17:34] <sorear> phenny: tell pmurias Yes

[17:34] <phenny> sorear: I'll pass that on when pmurias is around.

[17:36] *** allbery_b joined
[17:39] *** dorlamm joined
[17:40] *** ruben1194navarro joined
[17:41] *** mtk joined
[17:42] *** mtk left
[17:47] *** allbery_b left
[17:48] <ray24> What is the rate of success for programmers?

[17:48] <ray24> How often do individual programmers build a successful program that impact the market?

[17:48] *** allbery_b joined
[17:50] <rindolf> ray24: how can you measure?

[17:50] <rindolf> ray24: you seem to be talking to yourself.

[17:50] <rindolf> ray24: define "impact".

[17:50] <ray24> Don't we all talk to ourselves?

[17:50] <ray24> But I tend to expand , i need insight

[17:51] <masak> ray24: it's an interesting question, for sure.

[17:51] <ray24> facebook impact

[17:51] *** eviltwin_b left
[17:51] <ray24> I mean, if there are so many productive programmers .. how come there aren't more innovations of social media

[17:51] <masak> ray24: but the answer isn't quantifiable.

[17:51] <ray24> why is there only one 

[17:52] <ray24> So...

[17:52] *** allbery_b is now known as geekosaur

[17:52] <huf> if there are so many productive $x, how come there arent more innovations in $field_of{$x}?

[17:52] <huf> where are my flying cars? :D

[17:52] <masak> innovation is more difficult than people think.

[17:52] <masak> the principle behind it is simple. but it takes a lot of hard work.

[17:52] <masak> most people aren't up to it.

[17:52] <ray24> facebook doesn't seem like that difficult of an idea to come up with 

[17:53] <huf> ray24: an *unsuccessful* fb-clone doesnt seem like a difficult idea to come up with

[17:53] <masak> ray24: there are probably hundreds of applications like Facebook out there at this point.

[17:53] <huf> a successful one however... there's only one

[17:53] <masak> ray24: and Facebook might not even have been the first one.

[17:53] <masak> ray24: they just got a lot of stuff right.

[17:54] <jnthn> git pull

[17:54] <jnthn> oops

[17:55] <huf> pull the other one

[17:55] <ray24> How many hours should I put in a day for perl?

[17:56] <ray24> I have to build something like facebook

[17:56] <masak> ray24: you shouldn't be asking that question.

[17:56] <masak> ray24: you should try it out for yourself.

[17:57] <masak> we're not better judges of your time investment than you are.

[17:57] <ray24> You bring good points

[17:57] <ray24> I dont know why I tend to need reassurances

[17:58] <tadzik> huf: they're called planes

[17:58] <huf> tadzik: i've seen those and there's no glove compartment

[17:58] <huf> ergo not a car. 

[18:00] <tadzik> hrm

[18:11] *** pernatiy_ left
[18:14] *** envi left
[18:15] *** envi joined
[18:15] *** Mowah joined
[18:19] *** MayDaniel_ left
[18:19] *** fhelmberger left
[18:24] *** Exodist joined
[18:25] <Exodist> What is the terminology used when you return something, but what that something is is never actually calculated unless it is used?

[18:25] <moritz> Exodist: lazy evaluation

[18:26] <Exodist> thank you

[18:41] <masak> rakudo: sub foo { gather say "OH HAI" }; my $a = foo; say "A"; say $a

[18:41] <p6eval> rakudo ecc4ef: OUTPUT«A␤OH HAI␤␤»

[18:43] <moritz> rakudo: sub foo { gather say "OH HAI" }; my $a := foo; say "A"; say $a

[18:43] <p6eval> rakudo ecc4ef: OUTPUT«A␤OH HAI␤␤»

[18:44] <moritz> rakudo: sub foo { gather {take; say "OH HAI"} }; my $a := foo; say "A"; say $a

[18:44] <p6eval> rakudo ecc4ef: OUTPUT«A␤OH HAI␤␤»

[18:46] <ray24> lol @ moritz 

[18:46] <ray24> "lazy evaluation"

[18:46] <moritz> ray24: what's so funny about it?

[18:46] <masak> ray24: no, that's what it's called.

[18:46] <ray24> oh..

[18:47] <ray24> That's funny -- the fact that I thought it meant to be funny but actually it's really what it's called

[18:48] * jnthn doesn't mention phasers and lols

[18:48] <masak> the only thing that could have lead to that situation is lazy research :P

[18:51] <ray24> Anyone here find that google is overdoing flash banner?

[18:52] <ray24> Google.com They have a very lagging flash 

[18:52] <ray24> Why are they doing that

[18:54] <TimToady> it's free advertising for them when you come here and ask us about it :)

[18:54] <sorear> does google need advertising?  they're a monopoly

[18:55] <TimToady> s/advertising/branding/

[18:55] <donri> ray24: not flash

[19:04] *** pernatiy joined
[19:04] <masak> ...which is part of the reason they're doing it, I guess.

[19:19] *** birdwindupbird joined
[19:30] <ray24> btw, is this an offtopic channel? 

[19:30] <moritz> normally not

[19:35] <ray24> You're pretty quick with the responses

[19:35] <ray24> Are you working on a project?

[19:35] *** envi left
[19:35] <moritz> on multiple

[19:36] *** ruben1194navarr1 joined
[19:38] *** ruben1194navarro left
[19:40] *** lichtkind joined
[19:45] *** ymasory joined
[19:50] *** rdesfo left
[19:51] *** [Coke] left
[19:54] *** [Coke] joined
[20:04] *** [Coke] left
[20:06] *** [Coke] joined
[20:07] *** y3llow_ joined
[20:07] *** pothos_ joined
[20:08] *** ray24 left
[20:08] *** pothos left
[20:08] *** pothos_ is now known as pothos

[20:09] *** y3llow left
[20:09] *** y3llow_ is now known as y3llow

[20:18] *** rindolf left
[20:21] *** [Coke] left
[20:31] <tylercurtis> From a formal languages point-of-view, what class of languages is Perl 6 in (optionally ignoring "supercede slang MAIN")?

[20:32] <perigrin> is there a reference for "formal languages point-of-view" ?

[20:32] * perigrin is curious

[20:35] <sorear> I think tylercurtis means https://secure.wikimedia.org/wikipedia/en/wiki/Chomsky_hierarchy

[20:35] *** [Coke] joined
[20:36] <sorear> tylercurtis: context-sensitive

[20:36] <sorear> Wikipedia says that if a language can be recognized in O(N) space, it is no worse than context-sensitive

[20:36] <sorear> and STD is O(N) space

[20:37] <sorear> no context-free language can implement declaration before use (making my $x; $y invalid)

[20:37] <sorear> except for Haskell, most serious programming languages are context-sensitive

[20:38] <sorear> many though are described as "context free + a few semantic constraints"

[20:39] <sorear> I would love to see a non-p6regex parser for full Perl 6

[20:39] <sorear> partly because I'm not fully convinced p6regex can be made "fast enough"

[20:40] <perigrin> give Moore enough tiem.

[20:44] <tylercurtis> sorear: Haskell isn't context-sensitive?

[20:47] *** ray24 joined
[20:59] *** Moukeddar joined
[20:59] *** ray24 left
[21:02] *** pyrimidine left
[21:04] <sorear> tylercurtis: I remain to be convinced that the Haskell 98 grammar is even recursive.

[21:04] *** MayDaniel_ joined
[21:05] <Moukeddar> hello pandas

[21:05] <Moukeddar> good and evil

[21:06] <sorear> hello Moukeddar

[21:06] <moritz> evil pandas? what did I miss?

[21:07] <Moukeddar> how you doing today ?

[21:07] <Moukeddar> yeah evil panda can kill you

[21:08] <masak> that's why it's important to upgrade your modules.

[21:09] *** ruben1194navarr1 left
[21:11] <tylercurtis> sorear: oh, I see. I misinterpreted your statement that it's not context-sensitive. Common Lisp shares the trait of not being context-sensitive, I believe.

[21:12] *** birdwindupbird left
[21:12] <moritz> perl can run code at compile time, so not even a Turing complete parser is enough

[21:21] *** icwiener left
[21:21] *** ruben1194navarro joined
[21:27] <masak> 'night, pandas

[21:27] *** masak left
[21:40] *** bacek left
[21:44] *** Rotwang left
[21:49] <colomon> Lisp can run code at compile time as well, yes?

[21:50] <Moukeddar> what's the benefits of that ?

[21:52] *** pmurias joined
[21:52] <pmurias> Moukeddar: you can extend the grammar

[21:52] <phenny> pmurias: 17:34Z <sorear> tell pmurias Yes

[21:53] <Moukeddar> how ?

[21:54] <pmurias> i have to look that up

[21:54] <pmurias> macro circumfix:«<!-- -->» ($text) is parsed / .*? / { "" } # example from the spec

[21:57] <pmurias> Moukeddar: and if most of the metaprogramming is done at compile time we won't have to pay a performance price at runtime

[21:58] <Moukeddar> ahh

[21:58] <Moukeddar> sounds pretty

[21:58] <tylercurtis> Moukeddar: you can also do more simple things like defined new operators.

[21:58] <tylercurtis> rakudo: sub postfix:<k>($n) { $n * 1024 }; say 10k;

[21:58] <p6eval> rakudo ecc4ef: OUTPUT«10240␤»

[21:59] <Moukeddar> new operators ?

[21:59] *** coldhead joined
[21:59] <Moukeddar> not just override them ?

[21:59] <pmurias> yes

[21:59] <Moukeddar> wow

[21:59] <pmurias> or it's possible to have marcos which use the standard subroutine syntax and generate code

[22:00] <Moukeddar> you mean generating other code blocks at compile time ?

[22:00] <Moukeddar> other than the original 

[22:03] <pmurias> macro foo { 'say 1+' ~ '1; # ' }; foo();

[22:03] *** aindilis joined
[22:04] <pmurias> Moukeddar: so can generate code at compile time an insert it using a macro

[22:04] <Moukeddar> wow

[22:04] <Moukeddar> amazing stuff

[22:05] <pmurias> i'm not sure it's implemented yet

[22:06] <sorear> there's a patch for ~Mar10 rakudo which implements basic string macros

[22:06] <pmurias> sorear: how hard would it be to have them in niecza?

[22:06] <sorear> it's built on too many hacks though

[22:07] <sorear> pmurias: once somebody figures out how to implement BEGIN in niecza, macros will be easy

[22:07] *** hercynium left
[22:08] *** dorlamm left
[22:08] <pmurias> BEGIN seems like a lot of refactoring

[22:09] <pmurias> we would have to switch to building up the program piece by piece and the serialising it

[22:10] *** ruben1194navarro left
[22:10] <pmurias> sorear: as code in BEGIN can use all the subs which were defined on top

[22:11] *** ruben1194navarro joined
[22:11] <pmurias> sorear: didn't we have that discussion before? ;)

[22:13] <pmurias> if i remember correctly the problem is how do we serialise foreign pointers and open filehandles/sockets

[22:14] <pmurias> sorear: but we could just raise an error on those

[22:14] <pmurias> as being able to precompile things is vastly more important then C pointers surviving the BEGIN phase

[22:15] <Moukeddar> oooh

[22:15] <Moukeddar> i need many many years to grasp all that

[22:16] <pmurias> Moukeddar: you know perl5?

[22:16] <Moukeddar> no

[22:17] *** ruben1194navarro left
[22:17] *** bacek joined
[22:17] <Moukeddar> i mean some advanced topics in programmation in general

[22:17] <Moukeddar> but hey

[22:17] <Moukeddar> still young :p

[22:17] *** donri left
[22:21] *** ruben1194navarro joined
[22:23] <Tene> pmurias: macros are completely feasible in rakudo; I've done some pretty promising little experiments.  I just haven't had the time and resources to work on it.

[22:30] <sorear> pmurias: We probably did.  It's been a major TODO since almost the beginning.

[22:31] *** donri joined
[22:36] *** silent_h_ joined
[22:43] *** silent_h_ left
[22:54] *** MayDaniel_ left
[23:02] *** pmurias left
[23:03] *** ruben1194navarr1 joined
[23:03] *** yegor left
[23:06] *** cogno joined
[23:06] *** ruben1194navarro left
[23:10] *** ymasory left
[23:15] *** ruben1194navarro joined
[23:17] *** ruben1194navarr1 left
[23:22] *** noganex_ joined
[23:23] *** noganex left
[23:25] *** cogno left
[23:28] *** rdesfo joined
[23:29] *** cogno joined
[23:39] *** cogno left
[23:54] *** molaf__ joined
[23:57] *** molaf_ left
