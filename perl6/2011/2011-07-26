[00:01] *** f00li5h is now known as f00li5h[HireMe]

[00:01] <supernovus> Hmm, IO::Socket::INET appears to have changed its API since I wrote the SCGI library... 

[00:04] *** Eevee joined
[00:12] <supernovus> well, figured out the new API, much nicer to work with

[00:12] *** supernovus left
[00:13] *** soh_cah_toa joined
[00:17] *** dayangkun joined
[00:17] *** donri joined
[00:20] *** jferrero joined
[00:24] *** daniel-s joined
[00:28] *** shinobicl joined
[00:29] *** daniel-s left
[00:29] *** daniel-s joined
[00:31] *** supernovus joined
[00:33] *** daniel-s_ joined
[00:33] *** daniel-s left
[00:37] *** daniel-s__ joined
[00:37] *** daniel-s_ left
[00:42] *** _daniel-s__ joined
[00:42] *** daniel-s__ left
[00:46] *** _daniel-s__ left
[00:46] *** _daniel-s__ joined
[00:46] *** Chillance left
[00:49] *** soh_cah_toa left
[00:50] *** _daniel-s__ left
[00:50] *** daniel-s joined
[00:55] *** daniel-s_ joined
[00:55] *** tokuhirom left
[00:55] *** daniel-s left
[00:56] *** dayangkun_ joined
[00:59] *** dayangkun left
[00:59] *** daniel-s__ joined
[00:59] *** daniel-s_ left
[01:01] *** noganex_ joined
[01:02] *** soh_cah_toa joined
[01:03] *** _daniel-s__ joined
[01:03] *** daniel-s__ left
[01:04] *** noganex left
[01:08] *** daniel-s joined
[01:08] *** _daniel-s__ left
[01:12] *** daniel-s_ joined
[01:12] *** daniel-s left
[01:15] *** wamba left
[01:16] *** daniel-s_ left
[01:16] *** daniel-s__ joined
[01:21] *** _daniel-s__ joined
[01:21] *** daniel-s__ left
[01:21] <supernovus> Okay, another strange question, how can you accept more than one connection on IO::Socket::INET at the same time? Or is this not currently possible?

[01:24] <sorear> probably not possible

[01:24] <sorear> that's called "asynchronous I/O" and it's been on the TODO list for a while

[01:24] <sorear> not many people want to write a web server in one of the world's slowest languages, so it's kinda been on the back burner

[01:25] *** daniel-s joined
[01:25] *** _daniel-s__ left
[01:28] <supernovus> Ah, okay. Well, I fixed the SCGI library so it works with the newest IO::Socket::INET API. It doesn't require async or non-blocking IO. My MUD/MOO daemon on the other hand does, so it's being shelved. Oh well, it was worth a try. :(

[01:29] *** daniel-s_ joined
[01:29] *** daniel-s left
[01:34] *** daniel-s__ joined
[01:34] *** daniel-s_ left
[01:38] *** _daniel-s__ joined
[01:38] *** daniel-s__ left
[01:41] *** donri left
[01:42] *** Instil left
[01:42] *** daniel-s joined
[01:42] *** _daniel-s__ left
[01:43] *** dayangkun_ left
[01:44] *** dayangkun_ joined
[01:45] *** woosley joined
[01:46] *** daniel-s_ joined
[01:46] *** daniel-s left
[01:51] *** daniel-s__ joined
[01:51] *** daniel-s_ left
[01:52] *** mattp_ joined
[01:52] *** _jaldhar left
[01:54] *** Instil joined
[01:55] *** daniel-s__ left
[01:55] *** daniel-s__ joined
[01:56] *** whiteknight left
[01:59] *** jaldhar joined
[01:59] *** daniel-s__ left
[01:59] *** _daniel-s__ joined
[02:03] <shinobicl> how do i create a constructor? 

[02:03] <shinobicl> rakudo: class Flashlight { has Bool $.is_on = False; method poweron {$.is_on = True} }; my $F = Flashlight.new; say $F.perl; 

[02:03] <p6eval> rakudo 922500: OUTPUT«Flashlight.new(is_on => Bool::False)␤»

[02:03] <shinobicl> rakudo: class Flashlight { has Bool $.is_on = False; method new {$.is_on = True}; method poweron {$.is_on = True} }; my $F = Flashlight.new; say $F.perl; 

[02:03] <p6eval> rakudo 922500: OUTPUT«Type objects are abstract and have no attributes, but you tried to access $!is_on␤  in 'Flashlight::new' at line 22:/tmp/EwLZhGS9tl␤  in main program body at line 22:/tmp/EwLZhGS9tl␤»

[02:04] *** _daniel-s__ left
[02:04] *** daniel-s joined
[02:04] *** soh_cah_toa left
[02:08] *** daniel-s_ joined
[02:08] *** daniel-s left
[02:12] *** daniel-s__ joined
[02:13] *** daniel-s_ left
[02:17] *** _daniel-s__ joined
[02:17] *** daniel-s__ left
[02:21] *** daniel-s joined
[02:21] *** _daniel-s__ left
[02:25] *** daniel-s_ joined
[02:26] *** daniel-s left
[02:30] *** daniel-s__ joined
[02:30] *** daniel-s_ left
[02:34] *** _daniel-s__ joined
[02:34] *** daniel-s__ left
[02:38] *** daniel-s joined
[02:38] *** _daniel-s__ left
[02:43] *** daniel-s_ joined
[02:43] *** daniel-s left
[02:47] *** dayangkun_ left
[02:47] *** daniel-s__ joined
[02:47] *** daniel-s_ left
[02:47] *** xinming left
[02:48] *** supernovus left
[02:48] *** dayangkun_ joined
[02:51] *** _daniel-s__ joined
[02:51] *** daniel-s__ left
[02:53] *** xinming joined
[02:55] *** _daniel-s__ left
[02:55] *** daniel-s joined
[02:56] *** soh_cah_toa joined
[03:00] *** daniel-s_ joined
[03:00] *** daniel-s left
[03:01] *** molaf_ left
[03:01] *** mkramer1 joined
[03:04] *** daniel-s__ joined
[03:05] *** daniel-s_ left
[03:08] *** daniel-s__ left
[03:08] *** _daniel-s__ joined
[03:09] <sorear> shinobicl: you write a method named "new" and return a new object from it

[03:11] <shinobicl> rakudo: class Thing { has Int $.x = 0; method new { $.x = 1}; }; my $T = Thing.new; say $T.perl;

[03:11] <p6eval> rakudo 922500: OUTPUT«Type objects are abstract and have no attributes, but you tried to access $!x␤  in 'Thing::new' at line 22:/tmp/AF40sBhcHV␤  in main program body at line 22:/tmp/AF40sBhcHV␤»

[03:11] <shinobicl> rakudo: class Thing { has Int $.x = 0; method new { $.x = 1}; }; my $T = Thing.new; say $T.perl;

[03:11] <p6eval> rakudo 922500: OUTPUT«Type objects are abstract and have no attributes, but you tried to access $!x␤  in 'Thing::new' at line 22:/tmp/D59kgEeEcc␤  in main program body at line 22:/tmp/D59kgEeEcc␤»

[03:11] <shinobicl> so

[03:11] *** soh_cah_toa left
[03:11] <shinobicl> i should add a 'return' at the end of 'new'?

[03:13] *** daniel-s joined
[03:13] *** _daniel-s__ left
[03:17] *** daniel-s left
[03:17] *** daniel-s joined
[03:18] *** dayangkun__ joined
[03:21] *** nine joined
[03:21] *** daniel-s_ joined
[03:22] *** daniel-s left
[03:22] *** dayangkun_ left
[03:23] <sorear> shinobicl: you need to create a new object in new

[03:24] <sorear> niecza: class A { has $.v; method new($x) { my $new = self.bless(*); $new.v = $x; $new } }; say A.new(15).v

[03:24] <p6eval> niecza v7-44-g54b5188: OUTPUT«15␤»

[03:24] <sorear> note, you can call 'new' anything you want

[03:25] <sorear> Perl doesn't have a concept of constructors

[03:25] <sorear> only static factory methods

[03:25] *** soh_cah_toa joined
[03:25] <sorear> all classes get an automatic static factory named "new", but you're free to override it or make a completely different one

[03:25] *** spetrea left
[03:26] *** daniel-s_ left
[03:26] *** daniel-s__ joined
[03:26] <sorear> (to be more precise, they inherit it, from Mu, the base of all classes.  Unlike C#/Java, static methods can be inherited in Perl.)

[03:27] *** Su-Shee left
[03:28] <shinobicl> mmm... looks strange, to say at least :) looks like something from perl5. i've never been versed in perl5's oop anyway... 

[03:28] *** Su-Shee joined
[03:30] *** daniel-s__ left
[03:30] *** _daniel-s__ joined
[03:33] *** spetrea joined
[03:34] *** daniel-s joined
[03:35] <shinobicl> time to sleep :).. thanks for your help sorear!

[03:35] *** _daniel-s__ left
[03:37] *** shinobicl left
[03:39] *** daniel-s_ joined
[03:39] *** daniel-s left
[03:43] *** daniel-s__ joined
[03:43] *** daniel-s_ left
[03:47] *** _daniel-s__ joined
[03:48] *** daniel-s__ left
[03:52] *** birdwindupbird joined
[03:52] *** daniel-s joined
[03:52] *** _daniel-s__ left
[03:56] *** daniel-s left
[03:56] *** daniel-s_ joined
[04:00] *** daniel-s__ joined
[04:01] *** daniel-s_ left
[04:04] *** daniel-s__ left
[04:05] *** daniel-s__ joined
[04:05] *** araujo left
[04:24] *** dayangkun__ left
[04:25] *** dayangkun__ joined
[04:27] *** daniel-s__ left
[04:33] *** bluescreen10 joined
[04:57] *** dayangkun__ left
[04:58] *** dayangkun__ joined
[05:10] *** koban joined
[05:10] *** koban left
[05:15] *** soh_cah_toa left
[05:22] *** molaf joined
[05:25] *** dayangkun_ joined
[05:27] <TimToady> whoever's currently editing the features table should make sure it has "state" and "constant" somewhere

[05:28] *** dayangkun__ left
[05:46] *** molaf left
[05:51] *** koban joined
[05:52] *** koban left
[06:02] *** dayangkun_ left
[06:04] *** sivoais left
[06:04] *** TiMBuS left
[06:05] *** bluescreen10 left
[06:07] *** wtw joined
[06:37] <moritz> TimToady: that could be you :-)

[06:43] <moritz> niecza: constant x = 1 + 2; say x

[06:43] <p6eval> niecza v7-44-g54b5188: OUTPUT«3␤»

[06:44] <moritz> rakudo: state $x = 3; say $x

[06:44] <p6eval> rakudo 922500: OUTPUT«===SORRY!===␤"state" not yet implemented at line 22, near "= 3; say $"␤»

[06:44] <moritz> niecza: state $x = 3; say $x

[06:44] <p6eval> niecza v7-44-g54b5188: OUTPUT«3␤»

[06:45] *** pothos left
[06:45] *** nebuchadnezzar left
[06:46] *** pothos_ joined
[06:46] *** pothos_ is now known as pothos

[06:48] <dalek> features: 9b361fb | moritz++ | features.txt:

[06:48] <dalek> features: add more data points, including state variables and constants, TimToady++

[06:48] <dalek> features: review: https://github.com/perl6/features/commit/9b361fbd7f

[06:48] <dalek> features: 3a33f8a | moritz++ | features.txt:

[06:48] <dalek> features: syntax tweaks - no need for commas

[06:48] <dalek> features: review: https://github.com/perl6/features/commit/3a33f8aaf0

[06:49] <moritz> sorear++ # filling in more niecza entries

[06:50] *** Mowah joined
[06:50] *** nebuchadnezzar joined
[06:55] *** araujo joined
[06:55] *** dalek joined
[06:55] *** ChanServ sets mode: +v dalek

[06:58] *** dalek left
[06:58] *** dalek joined
[06:58] *** ChanServ sets mode: +v dalek

[06:59] *** yath joined
[07:00] <jnthn> morning, #perl6

[07:00] *** nebuchadnezzar left
[07:01] *** nebuchadnezzar joined
[07:04] <moritz> \o jnthn, how was your vacation?

[07:04] <jnthn> moritz: Great. Not the best weather, but still got to see/do plenty. And lots of awesome noms and beer. :)

[07:05] <moritz> \o/

[07:05] * jnthn was a little surprised by the fresh snow in July covering trails he wanted to hike :)

[07:05] *** TimToady left
[07:05] *** TimToady_ joined
[07:06] <jnthn> moritz++ # lots of nom patches \o/

[07:06] <sorear> o/ jnthn

[07:07] <jnthn> o/ sorear 

[07:10] <jnthn> Catching up planetsix was quick. :)

[07:12] <sorear> I love when mcs complains that my "Shouldn't get here" throws are unreachable

[07:12] *** jevin left
[07:15] <dalek> niecza: 55f66db | sorear++ | lib/Kernel.cs:

[07:15] <dalek> niecza: runtime-package-access: add simple GLOBAL::Foo::Bar cases, most lexical cases

[07:15] <dalek> niecza: review: https://github.com/sorear/niecza/commit/55f66dbc03

[07:16] * jnthn gets latest Rakudo/nqp builds done while unpacking a few bits

[07:17] *** jevin joined
[07:23] <moritz> unpack NYI at line 1

[07:23] <sorear> Do we have a feature for 4-arg and *-1 substr?

[07:24] <moritz> sorear: not yet, feel free to add it though

[07:24] <sorear> should we?

[07:24] <moritz> yes

[07:24] <moritz> we should also have phasers and eval

[07:24] <sorear> Do you have a hard rule for what goes in?

[07:25] <moritz> no, just soft rules

[07:29] *** mj41_nb joined
[07:29] <dalek> features: 13e5be3 | moritz++ | README:

[07:29] <dalek> features: soft rules for what should go into features.txt

[07:29] <dalek> features: review: https://github.com/perl6/features/commit/13e5be3800

[07:38] <dalek> niecza: 3764b20 | sorear++ | docs/announce.v8:

[07:38] <dalek> niecza: Draft v8 announce

[07:38] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3764b202e6

[07:39] *** wamba joined
[07:44] *** jedai left
[07:50] *** [particle]1 left
[07:54] *** BinGOs joined
[08:01] *** daniel-s joined
[08:04] *** ab5tract joined
[08:05] <jnthn> moritz: Any idea of current nom blockers that I should take a look at?

[08:06] *** daniel-s_ joined
[08:06] *** daniel-s left
[08:10] <moritz> jnthn: yesterday I tried to make it installable

[08:10] <moritz> jnthn: see branch nom-install, the commit message says what's wrong

[08:10] <moritz> jnthn: in general it seems that renaming files is fragile, I run into things not being found in serialization contexts, which I don't know how to fix/debug

[08:13] <moritz> jnthn: it's not a blocker for further development, but we should fix it before we switch it over to be master

[08:20] <sorear> any problems with the v8announce?

[08:21] * moritz reads

[08:22] <jnthn> moritz: I'd be surprised if renaming broke SC stuff

[08:22] <jnthn> moritz: What may happen is that we load the wrong version of a file.

[08:22] <moritz> jnthn: ah, that could happen

[08:23] <jnthn> If you have some modules A and B and a module C uses them, and you pre-compile A and B, then C, then you *must* make sure C sees the A and B it was compiled against.

[08:23] <moritz> sorear: for [Breaking changes] I'd either add a (none) line or remove the heading

[08:23] <jnthn> sorear: I glanced over it and didn't notice anything wrong.

[08:24] <jnthn> moritz: I can improve the error to say what file it's finding the wrong version of.

[08:24] <jnthn> Meant to do that before, just didn't get around to it.

[08:25] <moritz> sorear++

[08:37] <jnthn> grrr...hardware fail :/

[08:37] <dalek> niecza: 87d556d | sorear++ | src/Operator.pm6:

[08:37] <dalek> niecza: Fix typo in flipflop compiling

[08:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/87d556dbde

[08:37] *** REPLeffect left
[08:38] <dalek> niecza: 5075908 | sorear++ | docs/announce.v8:

[08:38] <dalek> niecza: Remove empty subheads in announce (moritz)

[08:38] <dalek> niecza: review: https://github.com/sorear/niecza/commit/50759081cd

[08:49] *** Jackneill joined
[08:49] *** Jackneill left
[08:49] *** Jackneill joined
[08:51] *** REPLeffect joined
[09:04] *** woosley left
[09:07] *** frodwith joined
[09:13] <dalek> features: 1038c2d | moritz++ | template.html:

[09:13] <dalek> features: add link to the repo to template.html

[09:13] <dalek> features: review: https://github.com/perl6/features/commit/1038c2d8fc

[09:34] *** daxim joined
[09:38] *** dakkar joined
[09:41] *** pernatiy left
[09:47] *** Trashlord left
[09:49] *** Trashlord joined
[09:50] <moritz> http://perl6.org/compilers/features is now online.

[09:52] *** donri joined
[09:53] *** dayangkun_ joined
[09:54] <jnthn> moritz: in nom - attributes don't work with MI. Really? I thought I fixed that a while back...

[09:54] <moritz> jnthn: my information might be out of date

[09:55] <moritz> nom: class A { has $.a = 3 }; class B { has $.b = 5 }; class C is A is B { has $.c = 8 }; given C.new { say .a, .b, .c }

[09:55] <p6eval> nom: OUTPUT«358␤»

[09:55] <moritz> \o/

[09:57] <jnthn> Also, should Feed operators be under misc, not under MOP?

[09:58] <jnthn> Role composition works through the MOP in nom (has to...everything goes through the MOP in nom... :))

[09:58] <tadzik> good morning #perl6

[09:58] <dalek> features: ba3be9c | moritz++ | features.txt:

[09:58] <dalek> features: nom does support attributes with MI, jnthn++

[09:58] <dalek> features: review: https://github.com/perl6/features/commit/ba3be9c180

[09:58] <dalek> features: 4f1b640 | moritz++ | template.html:

[09:58] <dalek> features: note that the .html is automatically updated

[09:58] <dalek> features: review: https://github.com/perl6/features/commit/4f1b6409ea

[09:58] <dalek> features: 57bd8e8 | moritz++ | features.txt:

[09:58] <dalek> features: more data fixes by jnthn++

[09:58] <dalek> features: review: https://github.com/perl6/features/commit/57bd8e8754

[09:59] <jnthn> Anyway, moritz++ (and others no doubt) for the features page

[09:59] <jnthn> o/ tadzik 

[09:59] <moritz> [Coke]++ for the CSS, pmichaud++ for data and CSS fixes, sorear++ contributed some niecza data points

[09:59] <jnthn> Nice :)

[09:59] *** Alias joined
[10:00] <moritz> now I'm curious if the automatic update (in about 15 minutes) works

[10:00] <moritz> \o tadzik 

[10:00] <jnthn> nom does have parametric roles to some degree also, it's moslty the type checking that is missing and some bugs.

[10:00] <jnthn> So +/- ATM.

[10:01] <tadzik> since everyone's there: what kind of cpu am I looking for when I care about compilation speed, not much else? Something with big cache? Looking at game benchmarks seems like not the best idea

[10:01] <moritz> tadzik: iirc pmichaud had rather high compile speeds, best ask him

[10:01] <moritz> (iirc some Intel CPUs)

[10:02] <dalek> features: f2b12b0 | moritz++ | features.txt:

[10:02] <dalek> features: nom mostly does parametric roles

[10:02] <dalek> features: review: https://github.com/perl6/features/commit/f2b12b0d8c

[10:03] <tadzik> yeah, I'm looking for some intel, I don't want to buy a whole new pc, just give this one some balls

[10:04] *** MayDaniel joined
[10:05] * jnthn may be doing a new CPU soon too...didn't plan to, but if my machine's current ailment turns out to be a mobo failure...may as well.

[10:06] <dalek> niecza: 3a54a7e | sorear++ | FETCH_URL:

[10:06] <dalek> niecza: Set bootstrap to v8

[10:06] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3a54a7ec30

[10:09] * sorear out

[10:15] *** dayangkun__ joined
[10:17] * moritz blug: http://perlgeek.de/blog-en/perl-6/feature-comparison-matrix.writeback 

[10:18] *** dayangkun_ left
[10:22] * jnthn eases back into things with a little refactor to the 6model core

[10:34] *** kboga joined
[10:43] *** MayDaniel left
[11:04] *** pernatiy joined
[11:04] *** MayDaniel joined
[11:14] *** timbunce joined
[11:15] <dalek> nqp: 1b06d16 | jonathan++ | / (24 files):

[11:15] <dalek> nqp: Eliminate the REPR PMC, which wrapped around the REPR function pointer table; after a previous refactor that table is now always a singleton. Makes things simpler, and removes a level of indirection for every REPR operation.

[11:15] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1b06d16100

[11:16] *** TiMBuS joined
[11:19] <flussence> tadzik: depends what your PC will take, a few of the new Core CPUs have a turbo mode which is good for single-process stuff (i.e. building CORE.setting)

[11:21] <tadzik> flussence: I just looked through my motherboard compatibility list, and looks like I'm limited to core2/core quad. Seems like I'm going to settle on the first one though

[11:22] <flussence> still, if it takes half an hour to compile then anything's going to seem like an improvement :)

[11:22] <tadzik> which would probably still be at least as good as my laptop, which is still 10x faster in compilation time :)

[11:23] <tadzik> still, I'll need to wait at least one day for that one to be deliviered. Gah. Once I'm done with this madness I'll be gsoccing 16 hours a day, or more

[11:24] <flussence> it can't be as bad as the one I use at $dayjob... thankfully I'm getting rid of that piece of rust too this week :)

[11:25] <tadzik> what do you have there?

[11:25] <flussence> 1.2GHz celeron :(

[11:26] <tadzik> wtf

[11:27] <moritz> that's... prehistoric

[11:27] <tadzik> I mean, my laptop just started

[11:27] <tadzik> where did I put this hdd

[11:28] <flussence> moritz: everything there is. They don't bother upgrading it because "it works"... never mind the fact that fixing anything when it breaks is a day-long job because of how out of date it is...

[11:31] <tadzik> scary piece of junk. I wonder when it'll break again

[11:31] <tadzik> but! I have a working machine!

[11:31] <flussence> \o/

[11:31] <tadzik> maybe it just needed to take a rest from me or something

[11:31] <moritz> just don't touch it... oh, wait :-)

[11:32] <tadzik> and I have this scary feeling that it can break any time now :/

[11:32] <moritz> a good reason to commit and push often :-)

[11:32] <tadzik> yes I should :)

[11:33] <tadzik> okay, a battery of tea and I'm ready to hack

[11:33] *** birdwindupbird left
[11:34] <tadzik> heh, just before I clicked "yes, buy" on the shop with the cpu I chose. This "and what if it runs without the battery" feeling

[11:34] * tadzik switches machines

[11:41] *** [Coke] left
[11:42] *** [Coke] joined
[11:44] *** birdwindupbird joined
[11:46] <frettled> moritz++ - very nice, very nice

[11:48] <dalek> rakudo/nom-install: 9da32b2 | moritz++ | / (2 files):

[11:48] <dalek> rakudo/nom-install: compile a lot more things in blib/ instead of src/gen

[11:48] <dalek> rakudo/nom-install: 

[11:48] <dalek> rakudo/nom-install: That way we have a more consistent layout between source tree and installation tree

[11:48] <dalek> rakudo/nom-install: review: https://github.com/rakudo/rakudo/commit/9da32b2e0c

[11:48] <dalek> rakudo/nom-install: f74a171 | moritz++ | / (3 files):

[11:48] <dalek> rakudo/nom-install: be more consistent with build locations

[11:48] <dalek> rakudo/nom-install: review: https://github.com/rakudo/rakudo/commit/f74a171e7f

[11:48] <dalek> rakudo/nom-install: bcb8d70 | moritz++ | src/Perl6/ (2 files):

[11:48] <dalek> rakudo/nom-install: simplify module loading

[11:48] <dalek> rakudo/nom-install: review: https://github.com/rakudo/rakudo/commit/bcb8d70668

[11:51] *** kaare_ joined
[11:57] *** wamba left
[12:10] <takadonet> morning all

[12:12] *** MayDaniel left
[12:13] <tadzik> morning takadonet 

[12:14] <takadonet> http://www.reddit.com/r/perl6/comments/j039i/perl_6_compiler_feature_matrix/ :)

[12:14] <takadonet> moritz++

[12:14] <moritz> takadonet: it's nice that you submit those links, but in r/perl6/ nobody will see them

[12:15] <moritz> the idea is to reach out of the echo chamber

[12:15] <takadonet> well was about to crosspost to programming

[12:15] <takadonet> or perl

[12:16] <moritz> both make sense

[12:17] <kboga> perl6: say ~Int.WHAT

[12:17] <p6eval> pugs: OUTPUT«Int␤»

[12:17] <p6eval> ..rakudo 922500, niecza v8: OUTPUT«Int()␤»

[12:17] <kboga> nom: say ~Int.WHAT

[12:17] <p6eval> nom: OUTPUT«Use of uninitialized value in string context␤␤»

[12:17] <moritz> nom++

[12:18] <moritz> nom: say Int.gist

[12:18] <tadzik> WHAT

[12:18] <p6eval> nom: OUTPUT«Int()␤»

[12:18] <tadzik> :)

[12:18] <moritz> by latest spec, say() uses .gist instead of .Str/.Stringy

[12:18] <tadzik> oh, segfault when building nom

[12:18] <moritz> and .gist tries to return something interesting for the human reader

[12:18] <kboga> this seems to cause some spectest failures

[12:19] <moritz> whereas .Str returns what interests the compuer

[12:19] <moritz> kboga: then those spectests must be fixed

[12:19] <kboga> oh i see

[12:19] <tadzik> http://wklej.org/id/567425/

[12:19] *** dayangkun__ left
[12:19] <tadzik> did anyone build nom yet on the bleeding nqp?

[12:20] <jnthn> tadzik: Got a local patch that makes that work.

[12:20] <jnthn> tadzik: 6model API changed; needs following in nom.

[12:21] <dalek> nqp: e9244ec | jonathan++ | src/HLL/SerializationContextBuilder.pm:

[12:21] <dalek> nqp: Get an SC to track those others it ends up referencing.

[12:21] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e9244ec4fd

[12:21] <dalek> nqp: 3279ea7 | jonathan++ | src/ (2 files):

[12:21] <dalek> nqp: Add a way to give an SC a friendly description.

[12:21] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3279ea7231

[12:21] <dalek> nqp: 95fbb94 | jonathan++ | src/ (3 files):

[12:21] <dalek> nqp: Improve detection of wrong version of pre-compiled code being used, and include the filename in the error rather than a weird SC identifier.

[12:21] <dalek> nqp: review: https://github.com/perl6/nqp/commit/95fbb9402b

[12:23] <jnthn> Wanted to get those chnages in first too, though :)

[12:24] <moritz> :-)

[12:28] <tadzik> okay :)

[12:30] *** BinGOs is now known as bingos_

[12:30] *** BinGOs joined
[12:31] *** bingos_ left
[12:33] <kboga> nom: ~1.WHAT

[12:33] <p6eval> nom: OUTPUT«Use of uninitialized value in string context␤»

[12:34] <jnthn> (note, . is higher prec than ~)

[12:34] <kboga> was intended, but the output is normal right?

[12:35] <moritz> yes

[12:35] <moritz> (except that it should be a warning, not writing to $*ERR directly)

[12:36] <moritz> perl6: say 129.base(2)

[12:36] <p6eval> pugs: OUTPUT«*** No such method in class Int: "&base"␤    at /tmp/W4MxbFzYpc line 1, column 5 - line 2, column 1␤»

[12:36] <p6eval> ..niecza v8: OUTPUT«Unhandled exception: Unable to resolve method base in class Int␤  at /tmp/9oNjWdunRw line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1933 (CORE C906_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1934 (CORE module-CORE @ 56) ␤  at …

[12:36] <p6eval> ..rakudo 922500: OUTPUT«10000001␤»

[12:37] <moritz> rakudo: printf '%032b', 129

[12:37] <p6eval> rakudo 922500: OUTPUT«00000000000000000000000010000001»

[12:38] *** colomon left
[12:41] *** colomon joined
[12:41] <dalek> rakudo/nom: c19671d | jonathan++ | / (2 files):

[12:41] <dalek> rakudo/nom: Bump NQP revision and chase 6model API updates.

[12:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c19671d825

[12:41] <dalek> rakudo/nom: d0ce251 | jonathan++ | src/Perl6/Grammar.pm:

[12:41] <dalek> rakudo/nom: Add description to SC if available, so we can get the better dependency out of date errors.

[12:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d0ce251d27

[12:42] <moritz> wow, t/nqp/58-attrs.t looks botched up

[12:43] <moritz> did nqp ever support accessors?

[12:44] *** Holy_Cow joined
[12:45] <jnthn> moritz: There was a broken attempt to add them...that test file is bogus.

[12:45] *** bluescreen10 joined
[12:45] <jnthn> I ended up commenting out the code that tried to do it since it was causing me other issues a couple of weeks ago.

[12:46] *** Holy_Cow left
[12:46] <jnthn> I guess we need ot decide whether we should have accessor method generation in NQP or not.

[12:46] <jnthn> But if so the test file should use the correct (has $.x) syntax at least.

[12:46] <moritz> which nqp doesn't like

[12:46] <moritz> nqp: class Foo { has $.answer };

[12:46] <p6eval> nqp: OUTPUT«Unable to parse blockoid, couldn't find final '}' at line 1␤current instr.: 'nqp;Regex;Cursor;FAILGOAL' pc 3863 (src/Regex/Cursor.pir:244)␤»

[12:46] <moritz> nqp: class Foo { has $!answer };

[12:46] <p6eval> nqp:  ( no output )

[12:47] <moritz> I'm fine with nqp not having accessors

[12:47] <moritz> I'll just change the test to test attributes, not accessors

[12:50] <dalek> nqp: 4a314bf | moritz++ | t/nqp/58-attrs.t:

[12:50] <dalek> nqp: fix 58-attrs.t

[12:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4a314bf301

[12:52] <tadzik> the laptop's broken again :/

[12:52] <moritz> :(

[12:52] <tadzik> it just started discharging again

[12:53] <kboga> nom: use Test; is 1.WHAT.gist, 'Int()'; # or .perl --> 'Int'?

[12:53] <p6eval> nom: OUTPUT«Rebuild in progress␤»

[12:55] <moritz> kboga: the correct test would be   1.WHAT === Int 

[12:55] <moritz> kboga: though comparing .gist in is() will give better diagnostics

[12:57] *** dayangkun joined
[13:08] *** MayDaniel joined
[13:11] *** daniel-s joined
[13:12] *** daniel-s_ left
[13:14] *** [particle] joined
[13:16] *** daniel-s left
[13:16] *** daniel-s joined
[13:16] <dalek> rakudo/nom: 10d4051 | (Solomon Foster)++ | src/core/ (2 files):

[13:16] <dalek> rakudo/nom: Start to implement sign.

[13:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/10d4051806

[13:16] <colomon> wait, how did I do that?

[13:17] <colomon> ah, I see

[13:17] <colomon> one of those weird git message things.

[13:18] <kboga> ah, it makes more sense to me now, thanks for the explanation moritz++

[13:19] <kboga> rakudo: my $a = 0; for (1..10000000000) {$a++;last}

[13:19] <p6eval> rakudo 922500:  ( no output )

[13:19] <kboga> nom: my $a = 0; for (1..10000000000) {$a++;last}

[13:20] <moritz> rakudo: my $a = 0; for (1..10000000000) {$a++;last}; say $a

[13:20] <p6eval> nom: OUTPUT«(timeout)»

[13:20] <p6eval> rakudo 922500: OUTPUT«1␤»

[13:20] <moritz> ouch, seems it reifies the list somewhere

[13:20] *** daniel-s left
[13:20] *** daniel-s joined
[13:20] <moritz> nom: say (1..1000000000000).map({ 1; last  })

[13:21] <p6eval> nom: OUTPUT«(timeout)»

[13:21] <moritz> pmichaud: feel hilighted, see above

[13:24] <PerlJam> nom: my $a = 0; for 1..10000000000 {$a++;last}; say $a

[13:24] <p6eval> nom: OUTPUT«(timeout)»

[13:25] *** daniel-s left
[13:25] *** daniel-s_ joined
[13:25] *** MayDaniel left
[13:25] <moritz> nom: (1..100000000000).list; say 'alive';

[13:25] <p6eval> nom: OUTPUT«alive␤»

[13:25] <moritz> nom: (1..100000000000).list.map({last}); say 'alive';

[13:25] <p6eval> nom: OUTPUT«alive␤»

[13:25] <moritz> nom: (1..100000000000).list.map({last}).eager; say 'alive';

[13:26] <p6eval> nom: OUTPUT«(timeout)»

[13:26] <moritz> ah, the problem is that .eager causes it to continue to process after the 'last'

[13:26] <moritz> and for @list  boils down to  eager @list.map: ... 

[13:27] <jnthn> Seems a little too eager.

[13:29] *** daniel-s__ joined
[13:29] *** daniel-s_ left
[13:32] *** Su-Shee_ joined
[13:33] *** Mowah left
[13:33] *** _daniel-s__ joined
[13:34] *** daniel-s__ left
[13:35] *** Su-Shee left
[13:38] *** daniel-s joined
[13:38] *** _daniel-s__ left
[13:39] * [Coke] tries to build ... sorear's perl6.

[13:42] *** daniel-s_ joined
[13:42] *** daniel-s left
[13:43] *** Su-Shee_ is now known as Su-Shee

[13:44] <[Coke]> https://gist.github.com/1106792

[13:44] <[Coke]> Can't build Niecza

[13:44] <[Coke]> er.

[13:44] <[Coke]> msg sorear https://gist.github.com/1106792

[13:44] <[Coke]> tell sorear https://gist.github.com/1106792

[13:45] <[Coke]> *sigh* bothelp?

[13:45] <tadzik> phenny: tell sorear [Coke] says https://gist.github.com/1106792

[13:45] <phenny> tadzik: I'll pass that on when sorear is around.

[13:46] <moritz> [Coke]: niecza traditionally needs a hard clean (for example  git clean -xdf  ) after a release

[13:47] *** daniel-s__ joined
[13:47] *** daniel-s_ left
[13:47] <[Coke]> ok, rebuilding...

[13:48] <[Coke]> niecza is not ||make friendly, it seems, either. (not cause of my original issue)

[13:48] <moritz> phenny: tell sorear about https://gist.github.com/1106801 too -- bootstrapping with parallel make seems to be missing a few dependencies

[13:48] <phenny> moritz: I'll pass that on when sorear is around.

[13:48] *** dayangkun left
[13:49] <[Coke]> moritz++

[13:49] <moritz> timing ;-)

[13:50] *** _daniel-s__ joined
[13:51] *** thou joined
[13:51] <Su-Shee> who did the feature matrix?

[13:51] *** daniel-s__ left
[13:52] *** Trashlord left
[13:52] <[Coke]> moritz: no change. still fails, same error.

[13:52] <[Coke]> Su-Shee: moritz.

[13:52] <moritz> Su-Shee: me, [Coke], pmichaud 

[13:53] <[Coke]> (with some help from masak, pmichaud, sorear and me.)

[13:53] <moritz> ah right, forgot sorear++ and masak++

[13:54] <moritz> you can see that the design is far too nice to come from me :-)

[13:54] <Su-Shee> moritz: you earned yourselves a luxury chocolate truffle cake on some occasion. 

[13:54] *** daniel-s joined
[13:55] <moritz> \o/

[13:55] *** _daniel-s__ left
[13:55] <moritz> Su-Shee: let's do that at German Perl Workshop 2012 :-)

[13:55] *** Trashlord joined
[13:56] <Su-Shee> the one in berlin? better be, because chocolate truffle cake doesn't really work well after 6 hours in a train ;)

[13:56] <moritz> no, Erlangen

[13:56] *** thou left
[13:57] <Su-Shee> uff. :)

[13:58] *** drbean left
[13:58] * moritz prefers nougat to truffle anyway :-)

[13:59] *** daniel-s_ joined
[13:59] <Su-Shee> no problem. ;)

[13:59] *** daniel-s left
[13:59] <Su-Shee> you can make truffle cream out of nougat just fine. :)

[14:01] <Su-Shee> may I suggest to make "Rakudo", "Rakudo/Nom" and "Niecza" a) a link to the appropriate github repo and b) to add behind it in what language it is written? like Rakudo (Parrot), Rakudo/Nom (Perl 6), Niecza (C#) or something like this?

[14:02] <moritz> links are on my TODO list

[14:02] <moritz> languages... it's not so easy

[14:02] <moritz> niecza is also written in Perl 6 to a good degree

[14:03] <[Coke]> Su-Shee: can you open those as tickets on perl6/features queue?

[14:03] <Su-Shee> if I remember correctly, the feature about rakudo/nom is being a pure perl 6 thing, right?

[14:03] <[Coke]> Su-Shee: it's still running on parrot.

[14:03] <[Coke]> more of it is written in perl6, but I don't think it's all.

[14:03] <moritz> it's more about the New Object Model (nom) :-)

[14:03] *** daniel-s_ left
[14:03] <moritz> some of it is in C (lots new dynops)

[14:03] *** daniel-s__ joined
[14:03] <moritz> but most in nqp or p6, yes

[14:05] <[Coke]> url for n4a ?

[14:05] <[Coke]> (yes, I'm that lazy.)

[14:05] <moritz> n4a?

[14:05] <Su-Shee> moritz: ah ok. 

[14:06] <Su-Shee> I/me goes looking for the perl67features queue..

[14:07] <moritz> github.com/perl6/features/issues

[14:08] *** daniel-s__ left
[14:08] *** _daniel-s__ joined
[14:09] <[Coke]> sorear's perl6.

[14:09] <[Coke]> that is annoying difficult to remember how to spell. ;)

[14:09] <moritz> https://github.com/sorear/niecza

[14:09] <moritz> [Coke]: here's a small trick:

[14:09] <moritz> perl6: say 1

[14:09] <Su-Shee> hm dammit I can't watch the entire perl6 thing..

[14:09] <tadzik> as a Pole, I don't see anything difficult to spell that :)

[14:09] <p6eval> pugs, rakudo 922500, niecza v8: OUTPUT«1␤»

[14:09] <moritz> its name is right there in the output list :-)

[14:12] *** daniel-s joined
[14:13] *** _daniel-s__ left
[14:13] <dalek> features: 8d948eb | moritz++ | / (3 files):

[14:13] <dalek> features: implement links for compiler names. It is an ugly hack, but so is the rest of this script :/

[14:13] <dalek> features: review: https://github.com/perl6/features/commit/8d948eb25e

[14:14] <Su-Shee> tadzik: as a german I point to the joke with the polish name. ;)

[14:14] <tadzik> :>

[14:15] <[Coke]> GAH.

[14:15] <Su-Shee> submitted issue nr. 1 ;) https://github.com/perl6/features/issues/1

[14:15] <[Coke]> moritz: guess what I just tripped over trying to push my changes to allow urls.

[14:16] <moritz> [Coke]: sorry, we should coordinate better :/

[14:16] <moritz> [Coke]: is your patch a less ugly hack than mine?

[14:17] *** daniel-s_ joined
[14:17] *** daniel-s left
[14:17] <[Coke]> only slightly, but I already deleted it.

[14:18] <[Coke]> i would just do a split...3 there.

[14:18] <Su-Shee> I can' stress enough how much more of an idea this feature matrix gives anyone not knowing perl 6 well.. also, that it looks like _three_ compilers already support like 80% looks very nice. :)

[14:18] <[Coke]> but otherwise, it's like a 90% overlap with wht I did.

[14:18] <[Coke]> moritz++

[14:20] *** wtw left
[14:21] *** smash joined
[14:21] *** daniel-s__ joined
[14:21] *** daniel-s_ left
[14:21] <smash> hello everyone

[14:23] *** hugme joined
[14:23] *** ChanServ sets mode: +v hugme

[14:23] <moritz> hugme: add kboga to perl6

[14:23] *** hugme left
[14:24] <moritz> ouch

[14:25] <[Coke]> moritz: adding the timestamp.

[14:25] *** daniel-s__ left
[14:25] *** _daniel-s__ joined
[14:27] <pmichaud> good morning, #perl6

[14:27] <moritz> kboga: you now have commit access to the roast repo, welcome

[14:27] <jnthn> morning, p

[14:27] <jnthn> gah

[14:27] <jnthn> pmichaud: 

[14:27] <moritz> kboga: please go ahead and merge your pull request, I'm too lazy to do that for everybody :-)

[14:27] <jnthn> ...worreva

[14:28] *** hugme joined
[14:28] <pmichaud> jnthn: o/

[14:28] *** ChanServ sets mode: +v hugme

[14:28] <moritz> [Coke]: do you plan to add the timestamp based on creation date of the file, or based on the timestamp from the last commit?

[14:30] *** envi left
[14:30] *** _daniel-s__ left
[14:30] *** _daniel-s__ joined
[14:32] <kboga> thanks moritz

[14:32] * kboga hopes he doesn't mess things up =/

[14:33] <moritz> kboga: if you do, don't worry - it's all under version control

[14:33] <kboga> what a relief :)

[14:33] <moritz> so it's trivial to roll back to the last working state if somebody breaks something

[14:33] *** birdwindupbird left
[14:34] <moritz> oh btw, you also got access to a lot of other repos in the perl6/ organization on github - we are too lazy for a finer graded access control :-)

[14:34] *** _daniel-s__ left
[14:34] <moritz> not only lazy, but so far it worked pretty well

[14:34] *** _daniel-s__ joined
[14:34] <dalek> features: 41b8c9a | Coke++ | / (2 files):

[14:34] <dalek> features: display last updated info in UTC.

[14:34] <dalek> features: review: https://github.com/perl6/features/commit/41b8c9a32a

[14:35] <moritz> I don't know of a single case of vandalism in our repos

[14:35] *** donri left
[14:35] <[Coke]> moritz: ... I just made it last time the page was run. if we want a different time, just replace the call to time()

[14:35] <[Coke]> is the thing running it always in a git repo?

[14:35] <moritz> yes

[14:36] <[Coke]> hurm. actually, I can just use perl. momentito.

[14:36] *** nebuchadnezzar left
[14:37] *** mkramer1 left
[14:37] *** nebuchadnezzar joined
[14:38] <moritz> (stat "features.txt")[9]  or so

[14:39] *** daniel-s joined
[14:39] *** _daniel-s__ left
[14:41] <dalek> roast: afa3b69 | kboga++ | S04-statements/for.t:

[14:41] <dalek> roast: Fix tests to concat the gist of the type object instead of the type object directly.

[14:41] <dalek> roast: review: https://github.com/perl6/roast/commit/afa3b69ef0

[14:41] <dalek> roast: a96302b | kboga++ | S04-statements/for.t:

[14:41] <dalek> roast: Merge pull request #4 from kboga/master

[14:41] <dalek> roast: 

[14:41] <dalek> roast: Fix for using a type object in string context.

[14:41] <dalek> roast: review: https://github.com/perl6/roast/commit/a96302b547

[14:43] *** daniel-s_ joined
[14:43] *** daniel-s left
[14:44] <dalek> features: 5d52303 | Coke++ | / (2 files):

[14:44] <dalek> features: note both page creation time and data update time.

[14:44] <dalek> features: review: https://github.com/perl6/features/commit/5d5230394b

[14:44] <[Coke]> moritz: there's a first pass. enjoy.

[14:44] <moritz> [Coke]++

[14:44] <dalek> roast: 38f4adc | (Solomon Foster)++ | S32-num/sign.t:

[14:44] <dalek> roast: Fudge for nom.

[14:44] <dalek> roast: review: https://github.com/perl6/roast/commit/38f4adc704

[14:44] <dalek> rakudo/nom: 9c39731 | (Solomon Foster)++ | src/core/Real.pm:

[14:44] <dalek> rakudo/nom: Add Real.sign(Real:U:).

[14:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9c39731fe9

[14:47] *** daniel-s__ joined
[14:48] *** daniel-s_ left
[14:50] *** envi joined
[14:50] <dalek> rakudo/nom: bbde437 | (Solomon Foster)++ | t/spectest.data:

[14:50] <dalek> rakudo/nom: Turn on sign.t.

[14:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bbde4376db

[14:52] *** daniel-s__ left
[14:52] <kboga> say, if all the tests but the last were to pass for t/spec/S04-statements/for.t, would I be allowed to fudge that one test, marking it as todo, and turn on the for.t?

[14:52] *** daniel-s__ joined
[14:52] <moritz> kboga: yes

[14:56] *** _daniel-s__ joined
[14:57] *** daniel-s__ left
[14:57] <pmichaud> from features/template.html: "It is automatically updated at least once per hour.

[14:57] <pmichaud> ...where?  ;-)

[14:57] <tadzik> hihi :)

[14:59] * moritz tries to figure out if pmichaud's question has a serious component

[14:59] <pmichaud> it does.  I'm looking for the latest features.html but don't know where to look.

[15:00] <moritz> http://perl6.org/compilers/features

[15:00] <moritz> sorry :-)

[15:00] <TimToady_> or git clone [email@hidden.address] for the very latest

[15:00] <pmichaud> also, the word "It" is a little ambiguous in that sentence... it almost sounds as though the repository itself is automatically updated.  :)

[15:00] <pmichaud> but I can fix that part.

[15:00] <moritz> pmichaud: please do

[15:01] *** daniel-s joined
[15:01] <moritz> maybe also add a note about the canonical URL of that document, or so

[15:01] *** _daniel-s__ left
[15:01] <pmichaud> and I did go to the compilers page on perl6.org but didn't find a link to features :)

[15:01] <moritz> I've now update the homepage link in the github repo

[15:01] <moritz> pmichaud: that's also something that needs to be done

[15:05] <dalek> features: 8b27249 | larry++ | features.txt:

[15:05] <dalek> features: add compact and shaped entries

[15:05] <dalek> features: review: https://github.com/perl6/features/commit/8b272496e4

[15:06] *** daniel-s left
[15:06] <dalek> perl6.org: 6cf9e44 | moritz++ | source/compilers/index.html:

[15:06] <dalek> perl6.org: [compilers/] add link to feature comparison matrix, fix/remove some outdated links

[15:06] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/6cf9e448d5

[15:08] <Su-Shee> moritz: works perfectly. :) 

[15:08] *** daniel-s__ joined
[15:10] <tadzik> Test.pm compilation segfaults, yep?

[15:10] <moritz> worked fine here last I tried

[15:10] <tadzik> I hope it's not my laptop trolling me again

[15:11] <tadzik> 0x00007ffff42b5a7f in Parrot_Perl6LexPad_set_pointer_orig () from dynext/perl6_group.so

[15:11] *** lichtkind joined
[15:11] <jnthn> tadzik: Make sure you have lastest NQP; also try to make clean.

[15:11] <jnthn> I bumped NQP_REVISION ealirer today.

[15:12] <jnthn> *earlier

[15:12] <dalek> features: 847299b | pmichaud++ | template.html:

[15:12] <dalek> features: Update page location information.

[15:12] <dalek> features: review: https://github.com/perl6/features/commit/847299b69d

[15:13] *** _daniel-s__ joined
[15:13] *** daniel-s__ left
[15:17] *** xinming left
[15:17] *** daniel-s joined
[15:18] *** _daniel-s__ left
[15:18] <lichtkind> thou++

[15:19] *** xinming joined
[15:20] <tadzik> okay, make clean helped

[15:20] *** Mowah joined
[15:22] *** daniel-s left
[15:26] *** molaf joined
[15:31] *** donri joined
[15:31] <dalek> features: 5ed48b8 | pmichaud++ | / (2 files):

[15:31] <dalek> features: Hovering over a footnote link displays the footnote via tooltip.

[15:31] <dalek> features: review: https://github.com/perl6/features/commit/5ed48b886d

[15:33] <moritz> pmichaud: very nice. Note that escape=html is the default, by process.pl line 69, default_escape => HTML

[15:35] <dalek> features: 525c283 | pmichaud++ | template.html:

[15:35] <dalek> features: Use true superscript for footnotes, keep +/_ aligned.

[15:35] <dalek> features: review: https://github.com/perl6/features/commit/525c283074

[15:36] <pmichaud> moritz: ah, didn't see that.

[15:36] <pmichaud> this is actually my first time to use H::T::C  :-)

[15:36] <pmichaud> or anything H::T related

[15:37] <dalek> roast: 7e60c7d | kboga++ | S04-statements/for.t:

[15:37] <dalek> roast: Fudge S04-statements/for.t

[15:37] <dalek> roast: 

[15:37] <dalek> roast: skip test for RT #64886 on which nom regressed

[15:37] <dalek> roast: review: https://github.com/perl6/roast/commit/7e60c7d224

[15:45] <kboga> to enable the test see following pull requests: https://github.com/rakudo/rakudo/pull/27

[15:47] <kboga> hmm should I git pull --rebase to avoid the merge?

[15:47] <dalek> features: d7ce843 | pmichaud++ | template.html:

[15:47] <dalek> features: Clean up footnote_link class handling a bit, reduce the size of the space before the footnote number.

[15:47] <dalek> features: review: https://github.com/perl6/features/commit/d7ce843391

[15:48] <dalek> features: f60f1b7 | Coke++ | .gitignore:

[15:48] <dalek> features: add a gitignore

[15:48] <dalek> features: review: https://github.com/perl6/features/commit/f60f1b7489

[15:48] <dalek> features: 2320bcb | Coke++ | Makefile:

[15:48] <dalek> features: Add a makefile

[15:48] <dalek> features: review: https://github.com/perl6/features/commit/2320bcb69c

[15:49] <dalek> features: 413dd7b | pmichaud++ | template.html:

[15:49] <dalek> features: Remove extra escape=html, moritz++ points out that it's the default in process.pl.

[15:49] <dalek> features: review: https://github.com/perl6/features/commit/413dd7b716

[15:49] <dalek> features: c2212b0 | pmichaud++ | / (2 files):

[15:49] <dalek> features: Merge branch 'master' of github.com:perl6/features

[15:49] <dalek> features: review: https://github.com/perl6/features/commit/c2212b0b31

[15:49] <pmichaud> mmmm, Makefile.   Coke++

[15:49] <dalek> features: dc890f2 | moritz++ | / (3 files):

[15:49] <dalek> features: implement links for feature names

[15:49] <dalek> features: review: https://github.com/perl6/features/commit/dc890f2ae8

[15:50] <moritz> I didn't really test that commit, so be doubly impressed if it actually works :-)

[15:50] <moritz> have to run now... bad timing :/

[15:50] <moritz> feel free to revert if it breaks anything

[15:51] <[Coke]> the link to compact arrays seems fine.

[15:52] <[Coke]> the table formatting has been screwed up.

[15:55] <pmichaud> (table formatting)  what's messed up?  it looks fine on my display.

[15:57] <[Coke]> in chrome, "rakudo/master" is over the rakudo/nom column.

[15:57] <pmichaud> ah, yes.

[15:57] <[Coke]> looks fine in IE.

[15:58] <[Coke]>                 <th><a href=""></a></th>

[15:58] <[Coke]> looks like there's an extra cell.

[16:00] *** daxim left
[16:01] <pmichaud> seems odd that there's an extra cell in the header but not in the body

[16:02] <pmichaud> oh, i see why

[16:02] <pmichaud> (why there's a difference, not why we get an empty compiler in the headers)

[16:02] <[Coke]> ah, good. I was starting to go blind.

[16:03] *** donri left
[16:04] * TimToady_ would like to see the text fields be links to appropriate RC entries that demonstrate runnable code

[16:04] *** TimToady_ is now known as TimToady

[16:05] <pmichaud> TimToady: instead of to the spec?

[16:05] * [Coke] thinks linking to the SYN is more appropriate.

[16:05] <[Coke]> (and then have the SYN link to rosetta code for examples)

[16:05] <TimToady> pmichaud: yes, the spec is too scattered, and too abstract

[16:05] <pmichaud> how about separate "(spec)" and "(code)" links?

[16:05] <TimToady> and the test suite is too, er, testy

[16:05] <pmichaud> s/code/example/

[16:05] <TimToady> that'd be okay too

[16:06] <[Coke]> pmichaud: do you have a fix for the empty compiler?

[16:06] <pmichaud> [Coke]: should have one shortly

[16:06] <pmichaud> I'm running at only about 50% capacity today due to household distractions

[16:07] <[Coke]> ah, got it. just double the shift. ;)

[16:07] * TimToady is a bit distracted by having to write a soto, but would like to make heavy use of the feature list

[16:07] <TimToady> since it's very much about the current state

[16:07] <[Coke]> soto?

[16:07] <[Coke]> Oh.

[16:08] <TimToady> state of the...

[16:08] <pmichaud> TimToady: I'll see if I can develope separate "(spec)" and "(code)" here shortly.  But you'll have to provide the RC links or tell us where to look :)

[16:08] <[Coke]> He can update features.txt. ;)

[16:08] <TimToady> I can do the rc links

[16:08] <pmichaud> when is soto?

[16:08] <TimToady> thu night

[16:08] <pmichaud> oh, *plenty* of time :)

[16:08] <[Coke]> pmichaud: want me to commit the quick fix for the column headers?

[16:08] <pmichaud> [Coke]: if you have one, yes.

[16:09] *** donri joined
[16:09] <TimToady> in particular, if I can click to the p6 rc entry, then I can just backscroll to talk about how p5 could do the same thing

[16:09] <dalek> features: 258dac9 | Coke++ | process.pl:

[16:09] <dalek> features: Avoid generating a empty td in the header.

[16:09] <dalek> features: review: https://github.com/perl6/features/commit/258dac9de7

[16:09] <pmichaud> I think the problem is that the blank line is being treated as a compiler.

[16:09] <pmichaud> (after ABBREVIATIONS)

[16:10] <[Coke]> pmichaud: I think it's being skipped already by the $comment RE.

[16:11] <pmichaud> [Coke]: I think you're right.

[16:11] <[Coke]> ``fixed''.

[16:11] <pmichaud> I don't know why the shift is needed, then.

[16:11] <[Coke]> fixed headers on the table would be nice, but I'll leave that alone for now. ;)

[16:13] <pmichaud> oh, I see.

[16:14] <pmichaud> 1-based indexing is Evil.  2-based indexing is worse.  :)

[16:14] *** pernatiy left
[16:14] <tadzik> :P

[16:14] <[Coke]> pmichaud: urk?

[16:15] *** benabik joined
[16:16] <[Coke]> TimToady: can you give us a RC url for one of those lines?

[16:16] <TimToady> sec

[16:16] <pmichaud> [Coke]: are you working on the code example part?

[16:16] <[Coke]> just getting the URL for one of us to deal with.

[16:16] <pmichaud> or just gathering data for me to do it?  ;-)

[16:16] <pmichaud> okay :)

[16:17] <[Coke]> our .txt input file is getting complicated enough to consider switching to an .ini file.

[16:17] <[Coke]> (or json or yml or something)

[16:17] <pmichaud> I agree there

[16:17] <TimToady> http://rosettacode.org/wiki/Inheritance/Single#Perl_6

[16:18] <[Coke]> pmichaud: do you care which? I tend to slightly prefer json, but I work with it every day.

[16:18] <TimToady> rc:Inheritance/Single#Perl_6 for short, maybe

[16:18] <TimToady> or just full url, if we want that

[16:18] <TimToady> since some examples may be elsewhere

[16:19] <[Coke]> full url is "easier" for now.

[16:19] <pmichaud> [Coke]: I'd prefer json also.

[16:19] <tadzik> > Int.HOW.docs

[16:19] <tadzik> sample WHY output

[16:19] <tadzik> small steps forward :)

[16:19] <TimToady> full is fine

[16:20] <[Coke]> pmichaud: k.

[16:20] <jnthn> tadzik: yay :)

[16:20] <pmichaud> [Coke]: would you prefer to work on it for now?  I may be at 50% for a while.

[16:21] *** Alias left
[16:21] <tadzik> jnthn: Perl6::Metamodel::Naming looks like a sensemaking place for it, doesn't it? You stick those to something that has a name

[16:22] <jnthn> tadzik: I'd rather add a Perl6::Metamodel::Documenting or so.

[16:22] <jnthn> tadzik: The idea is that the roles are single-purpose. :)

[16:22] <pmichaud> somehow I have trouble seeing the relationship between "documenting" and "metamodel", fwiw.

[16:23] <pmichaud> it feels misnamed.

[16:23] <jnthn> pmichaud: The various roles that get composed into meta-objects all live under there.

[16:23] <dalek> features: 2aae895 | Coke++ | Makefile:

[16:23] <dalek> features: add make clean;

[16:23] <dalek> features: review: https://github.com/perl6/features/commit/2aae895bcd

[16:24] <[Coke]> pmichaud: sure.

[16:24] <PerlJam> jnthn: meta-roles?  :)

[16:24] <[Coke]> lunch break from work, I can hack on this for a minute.

[16:24] <tadzik> jnthn: oh, ok. Anyway, since you appeared: I'm looking for some place to pass the parsed documentation to the class/package/whatever somehow. The only thing that I see happening in Actions.pm is adding the block.ast and then SymbolTable calls .compose. Where do I stick my additional information?

[16:24] <jnthn> PerlJam: Sure, if you like :)

[16:25] <jnthn> tadzik: At what point do you have it?

[16:25] <jnthn> tadzik: and how do you know what to associate it with?

[16:27] *** cooper joined
[16:27] <tadzik> jnthn: At no point, almost. I see that whatever happens to be a class declaration goes to the <package_def> method in actions. Then the method does all the dirty work with it. I want to stick something into package_def that'll be capable of adding a parsed documentation to the resulting class

[16:28] <tadzik> that sounds confusing now that I read it :)

[16:29] <tadzik> okay, the first inchstone will be: classes have a .HOW.docs method which returns "this is $!name", $something_passed_there_by_actions.pm

[16:29] <jnthn> OK, but I meant where does that something come from? When do you parse that something?

[16:30] <jnthn> Is this the "applies to the next declaration" thingy?

[16:30] <jnthn> tadzik: I ask because actually the class meta-object is around long, long before the package_def action method is called. that just "finalizes" it.

[16:31] <jnthn> It's actually around from just before the opening curly of the class decl.

[16:33] <tadzik> oh, that explains stuff. Well, I guess that gets parsed along with the class declaration

[16:33] <tadzik> so the #= foo foo before 'class' goes to the package_def method as well

[16:33] <jnthn> tadzik: Can I see an example of the source along with the docs?

[16:33] <tadzik> yes

[16:33] *** mj41_nb left
[16:33] <jnthn> What else does this apply to? Attributes also? Methods?

[16:34] <jnthn> I'm thinking we need a more "general" mechanism.

[16:34] <tadzik> http://wklej.org/id/567587/

[16:34] <tadzik> yes, attributes and methods as well. Also subroutine parameters, iirc

[16:34] <[Coke]> (features.json) something like this? https://gist.github.com/1107185

[16:35] <pmichaud> the "status" doesn't give a good way to do footnotes

[16:35] <pmichaud> I

[16:35] <pmichaud> I'd go for

[16:35] <[Coke]> it's definitely verbose compared to the .txt file, but it's going to get unweildy adding multiple urls.

[16:35] <pmichaud> oh, I guess the footnotes could be done the same way as now

[16:36] <pmichaud> I was thinking of something like:

[16:36] <[Coke]> (I was just going to do footnotes the same way)

[16:36] <jnthn> tadzik: What about for attributes? (more)

[16:36] <jnthn> I have vague memories of something like

[16:36] <[Coke]> trying to strike a balance between verbosity and ... the other thing.

[16:36] * [Coke] goes to grab a lunch and will return shortly.

[16:36] <jnthn> #= What type of beer?

[16:36] <jnthn> has $!type;

[16:36] <jnthn> working 

[16:36] <jnthn> but also you could do

[16:36] <jnthn> has $!type; #= What type of beer?

[16:37] <jnthn> Is that correct, or memory of older spec? :)

[16:37] <pmichaud> [Coke]: yes, footnotes same way as now works

[16:38] * moritz pops up for a few minutes

[16:38] <pmichaud> moritz: I think we're jsonifying features.txt, unless you object :)

[16:38] <tadzik> jnthn: that's still spec-ok

[16:39] <tadzik> jnthn: do those cases differ much?

[16:39] <moritz> pmichaud: that's OK, as long as it doesn't become too verbose

[16:39] <jnthn> tadzik: At first glance, yeah

[16:39] <pmichaud> moritz: yeah, we definitely want to avoid verbosity

[16:39] <jnthn> tadzik: Trying to thing how to most neatly handle that.

[16:39] <jnthn> tadzik: There wouldn't happen to be a trait version of this also, would there?

[16:39] <jnthn> is doc('...') 

[16:39] <jnthn> ?

[16:39] <tadzik> really? I thought it's just token attribute { 'has' <something something> <docs> }, <docs> appearing at various places

[16:40] <tadzik> is doc() -- I don't think so

[16:40] <jnthn> tadzik: Oh...I thought it was just parsed as a normal pod comment?

[16:40] <tadzik> jnthn: nope, that gets attached to the attribute/class/whatever

[16:40] <tadzik> well, it probably will end up being parsed as a <pod_string> or something of this sort

[16:41] <tadzik> brb, nom

[16:41] <jnthn> Well, it's not token attribute either...it's just a normal variable declarator.

[16:41] <jnthn> ooh, dinner...I like that idea.

[16:42] <jnthn> I guess I'm mostly curious if "#= foo" style comments are just parsed explicitly in certain places, or fall under normal comment parsing and then we use a contextual or something to identify the attachment target, or the docs to be attached...

[16:43] <[Coke]> moritz: TimToady wants multiple urls per row. (2 for now). need something a little more structured than 'everything on a line', I think.

[16:47] <pmichaud> technically, TimToady wanted links to RC.  :-)   multiple links is the way to handle both spec and RC :)

[16:47] <pmichaud> at any rate, a json format will be more extensible for the next features feature we decide to include :)

[16:48] <[Coke]> roger.

[16:50] *** wamba joined
[16:53] <tadzik> jnthn: they are only needed in certain cases

[16:55] <tadzik> oh, looks like it can be used with any kind of declarator

[16:55] <arnsholt> jnthn: D'you think it'd be possible to reuse/subvert some of the serialization context code to implement a Storable-like module?

[17:00] *** thou joined
[17:01] *** dakkar left
[17:03] <[Coke]> pmichaud: have to drop off and get back to DAYJOB. Will be happy to finish this up after I get home, though.

[17:03] <[Coke]> (can provide the .json in progress if someone wants to jump in.)

[17:04] *** thou left
[17:04] *** tokuhir__ joined
[17:08] <pmichaud> [Coke]: I can jump in.  Perhaps you can make a branch?

[17:08] <pmichaud> or just send me diffs

[17:09] <[Coke]> http://feather.perl6.nl/~coke/features.json

[17:09] <[Coke]> that's just the first 2 sections so I had something to work with.

[17:10] <[Coke]> (going to make it work as is first, make sure the .html output was the same, /then/ add the new links)

[17:10] *** tokuhir__ left
[17:11] *** mj41_nb joined
[17:11] <[Coke]> there's a process.pl there also, but the only thing worth grabbing at the moment is the setup at the top to get you the json pulled into $config.

[17:11] <[Coke]> if you don't get to it, I'll finish it up this evening. (or polish what's left if you get some of it in)

[17:16] <pmichaud> I'll work on it a while.

[17:18] <[Coke]> I tried to pick a slightly more compact json rendering. It's a little odd, but hopefully will please moritz.

[17:19] <pmichaud> moritz: comments on the Coke's json format welcomed.

[17:20] * diakopter still hopes for links to the Snn

[17:20] <pmichaud> diakopter: that's why we're going through this.

[17:20] <diakopter> oh cool

[17:24] * diakopter suggested it yesterday, but no one replied

[17:25] <pmichaud> diakopter: probably ENOTUITS, depending on when the suggestion occurred :)

[17:25] <[Coke]> if you could collect some links o the SYN, that would help. ;)

[17:25] <jnthn> arnsholt: When it really does serialization, almost certainly.

[17:26] *** Chillance joined
[17:28] <tadzik> > our multi sub postfix:<$>($a) { "$a dolarów" }; 5$

[17:28] <diakopter> [Coke]: ok I'll gather some links, of the form  S06.html#%22Pointy_blocks%22

[17:28] <tadzik> zsh: segmentation fault  perl6

[17:29] <diakopter> I needed something to do today anyway

[17:29] *** shinobicl joined
[17:29] <arnsholt> jnthn: Excellent. It won't be very cross-compiler, but it'd give a quick solution to the problem (and save a massive amount of work)

[17:33] <jnthn> oops, still didn't get around to eating...

[17:33] * jnthn goes to get dinner

[17:36] *** masak joined
[17:37] <masak> jnthn! \o/

[17:37] <masak> #perl6! \o/

[17:37] <tadzik> masak: \o/

[17:37] <tadzik> s/:/!/

[17:37] <masak> :)

[17:39] * masak makes nom

[17:39] <masak> g'ah! the food kind. :P

[17:41] <tadzik> http://goo.gl/xLl7Y :)

[17:42] * masak boars on

[17:43] <masak> a pig's gotta eat.

[17:43] <tadzik> (:

[17:44] <TimToady> nom: constant $x = 42;

[17:44] <p6eval> nom:  ( no output )

[17:45] <TimToady> nom: constant $x = 42; say $x

[17:45] <p6eval> nom: OUTPUT«42␤»

[17:45] <benabik> nom: constant x = 42; say x # sigil-less?

[17:45] <p6eval> nom: OUTPUT«42␤»

[17:45] <masak> \o/

[17:45] <TimToady> was looking at the footnote

[17:45] <TimToady> nom: constant x = 1+2; say x

[17:45] <p6eval> nom: OUTPUT«Cannot handle constant with non-literal value yet at line 1, near "= 1+2; say"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23611 (src/stage2/gen/NQPHLL.pir:6347) (src/stage2/gen/NQPHLL.pm:329)␤»

[17:46] <TimToady> nom: constant x = BEGIN 1+2; say x

[17:46] <p6eval> nom: OUTPUT«Could not find sub &infix:<+>␤current instr.: '_block1002' pc 29 ((file unknown):91180491) (/tmp/FNV4bexXfe:1)␤»

[17:46] <masak> nom: constant 马x = "OH HAI"; say 马x # horse sigil?

[17:46] <p6eval> nom: OUTPUT«OH HAI␤»

[17:46] <masak> oh ma!

[17:47] <TimToady> a horse named Max?

[17:48] <masak> Mǎx, perhaps :)

[17:48] <tadzik> 马d马x

[17:48] <TimToady> beyond thundergnat...

[17:49] * masak can't sto马ch all these puns

[17:49] <jnthn> nom: BEGIN say 1 + 2

[17:49] <p6eval> nom: OUTPUT«Could not find sub &infix:<+>␤current instr.: '_block1002' pc 29 ((file unknown):57101099) (/tmp/I9bzKbJVml:1)␤»

[17:49] <jnthn> nom: BEGIN { say 1 + 2 }

[17:49] <p6eval> nom: OUTPUT«3␤»

[17:49] <jnthn> :S

[17:50] <masak> niecza: BEGIN say 1 + 2

[17:50] <p6eval> niecza v8: OUTPUT«3␤»

[17:50] <TimToady> thundergnat == 雷蚋 or some such

[17:51] <jnthn> We won't get full-blown constants, nor BEGIN, in nom until the serialization stuff is done.

[17:51] <jnthn> It's high on my list after the master merge.

[17:51] <jnthn> Next big project, as such.

[17:53] <diakopter> [Coke]: are you jsonifying features?

[17:56] <pmichaud> diakopter: Coke++ turned it over to me for a while.  I'm working on it now.

[17:57] <pmichaud> I'm about 50% done.

[17:57] <pmichaud> (I'm also refactoring the process.pl code a fair bit )

[17:57] <[Coke]> pmichaud++

[17:57] <pmichaud> I'm thinking I'll leave the house for a short while so I can get a duty cycle >50% for a bit.

[17:57] <pmichaud> (fewer distractions)

[18:00] <masak> hm. the feature table never seemed to make it to reddit.com/r/programming ...

[18:00] <pmichaud> okay, changing locations... bbi20

[18:00] <diakopter> I just noticed that the Ann and Enn links are all broken on perlcabal.org/syn

[18:05] <masak> I've been pointing that out for some time now.

[18:06] <masak> since the perl.org redesign.

[18:06] <masak> they're available through the Wayback Machine.

[18:09] *** shinobicl left
[18:09] *** impious joined
[18:10] <diakopter> hm

[18:11] <diakopter> some of these very broad feature items defy nailing down to one region of the Snn

[18:11] <diakopter> "basic types (strings, numbers)"

[18:14] <TimToady> that's what I was saying

[18:14] <TimToady> http://irclog.perlgeek.de/perl6/2011-07-26#i_4170610

[18:15] <TimToady> maybe instead of single links, we can have a list of (spec) (spec) (spec) (eg) (eg) (eg) on the end of the line

[18:15] <TimToady> or maybe it means it's time to reorg the spec :)

[18:15] <diakopter> egads

[18:16] <Eevee> \o/  this matrix is a grand improvement

[18:16] <dalek> rakudo/nom: eb38b99 | jonathan++ | src/Perl6/Actions.pm:

[18:16] <dalek> rakudo/nom: Fix thunk building, so BEGIN say 1 + 2 will work.

[18:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eb38b99402

[18:16] <TimToady> Eevee: thanks for the blog that initiated it

[18:17] <Eevee> let me know if you ever need my expert griping services again

[18:18] <pmichaud> back again

[18:20] *** birdwindupbird joined
[18:22] <masak> Eevee: just gripe at will! :)

[18:23] <Su-Shee> Eevee: nice blogging. I agreed a lot :)

[18:23] *** rurban joined
[18:23] <TimToady> poor will...

[18:23] <rurban> Will rakudo-star-2011.07 be the next and when? Maybe someone knows

[18:24] <rurban> Because it might be the last one with these packaging rules and I want to provide it for cygwin

[18:24] <pmichaud> next: yes.  when: tonight.

[18:24] <rurban> great

[18:24] <diakopter> whip ...

[18:24] <rurban> good luck

[18:27] *** kjeldahl joined
[18:29] *** rurban left
[18:39] *** envi left
[18:42] * [Coke] is sorry he dumped the json thing on pmichaud if he had other stuff to do. ;)

[18:42] <pmichaud> [Coke]: no, I didn't.

[18:43] <pmichaud> I'm quite happy to be doing it.

[18:43] <TimToady> it's not at all clear to me how one should checkout a nom branch into a separate directory to avoid clobbering the current rakudo directory; the nom readme and git manpages are somewhat unhelpful

[18:43] <pmichaud> TimToady: git clone [email@hidden.address] nom

[18:43] <TimToady> that makes a nom dir?

[18:43] <pmichaud> that clones rakudo into a "nom" dir.

[18:43] <pmichaud> then

[18:43] <pmichaud> $ cd nom

[18:43] <pmichaud> $ git checkout nom

[18:44] <TimToady> thanks

[18:44] <pmichaud> and you have a separate install for the nom branch

[18:44] <TimToady> I assume it's still an internal install

[18:44] <pmichaud> it is

[18:44] <TimToady> k

[18:44] <pmichaud> $ perl Configure.pl --gen-parrot; make

[18:45] <pmichaud> (or create config.default if you don't want to type the options on each reconfig :)

[18:45] <TimToady> I always do --gen-parrot

[18:48] <masak> I always do --gen-nqp --gen-parrot with nom.

[18:50] <pmichaud> http://gist.github.com/1107547  # is this too verbose?

[18:50] <TimToady> it appears to be doing the nqp automatically

[18:51] <pmichaud> --gen-parrot implies --gen-nqp, yes.

[18:51] <dalek> roast: 5627618 | kboga++ | S02-polymorphic_types/subset.t:

[18:51] <dalek> roast: (un)fudge subset.t for nom

[18:51] <dalek> roast: review: https://github.com/perl6/roast/commit/562761855f

[18:52] <TimToady> pmichaud: that's fine; earlier we speculated about multiple spec and code entries

[18:52] <pmichaud> TimToady: I know how to adapt to that if needed

[18:53] <pmichaud> *when needed :)

[18:53] <pmichaud> with this json structure the code gets a fair bit simpler

[18:53] <TimToady> shpaed arrays/hashes is already an example, since the link only points to arrays

[18:54] <pmichaud> and it doesn't seem too much farther than what Coke++ already proposed (and makes extension even easier)

[18:54] <kboga> maybe the "subset Person of Hash" test could be made more robust by doing a regexp on the Exception in the dies_ok case?

[18:55] <kboga> the exception message being: Type check failed in assignment to '$p'; expected 'Person' but got 'Hash'

[18:55] <masak> #phasers in 5.

[18:56] <pmichaud> kboga: it's not clear to what extent exception messages are "spec"

[18:56] <pmichaud> at least, not yet.

[18:56] <kboga> pmichaud: i know but they seem to be used for other testing

[18:57] <pmichaud> in the spectests themselves?

[18:57] <kboga> like this: ok "$!" ~~ / RT67256 /, 'error for bad assignment mentions subset';

[18:58] <kboga> RT67256 being the name of the subset

[18:59] <masak> I got one of those the other day, where having the name of the thing would've helped.

[18:59] <pmichaud> kboga: I'm not opposed, but it might need a larger discussion about how much conformity we expect among error messages.

[18:59] <masak> rakudo: role A { method foo {} }; role B { method foo {} }; class C does A does B {}

[18:59] <p6eval> rakudo 922500: OUTPUT«===SORRY!===␤Method 'foo' collides and a resolution must be provided by the class␤»

[18:59] <masak> yeah, but which class? :)

[18:59] <masak> nom: role A { method foo {} }; role B { method foo {} }; class C does A does B {}

[18:59] <p6eval> nom: OUTPUT«Method 'foo' must be resolved by class 'C' because it exists in multiple roles (B, A)␤current instr.: '_block2900' pc 43822 (src/gen/perl6-metamodel.pir:13596) (src/gen/Metamodel.pm:1275)␤»

[18:59] <masak> \o/ jnthn++

[19:02] *** shinobicl joined
[19:02] <TimToady> nitpick: why is 'C' quoted, but not B or A?

[19:03] <masak> and why are (B, A) reversed wrt how they occur in the code?

[19:04] <TimToady> nom: role A { method foo {} }; role B { method foo {} }; class C does B does A {}

[19:04] <p6eval> nom: OUTPUT«Method 'foo' must be resolved by class 'C' because it exists in multiple roles (A, B)␤current instr.: '_block2900' pc 43822 (src/gen/perl6-metamodel.pir:13596) (src/gen/Metamodel.pm:1275)␤»

[19:04] <TimToady> fixed it for ya

[19:04] <masak> #phasers has begun.

[19:04] <masak> TimToady: :P

[19:04] <masak> TimToady: they're still reversed wrt how they are being 'does'-ed.

[19:05] <kboga> pmichaud: I understand, however there are multiple ways in which a dies_ok test can fail, I kinda want to assert that the case in which it fails is the case in which it is allowed to fail.

[19:06] <masak> kboga: all "check for failure" tests should be like that, IMO.

[19:08] <kboga> But the only way to do that is to check the error message?

[19:08] <masak> presumably.

[19:09] <pmichaud> "currently" the only way ...

[19:09] <masak> checking anything else would have a distinctly lower success rate :P

[19:09] <pmichaud> I'm not sure that should be the spec way.

[19:09] <jnthn> masak: Roles are inherently unordered.

[19:10] <masak> jnthn: but data structures in memory never are.

[19:10] <jnthn> masak: It's not deliberate that they "disorder" in that error message...you can probably find out where it's happening if you want to.

[19:11] <masak> ok.

[19:11] <jnthn> masak: It's not so surprising though...the code doesn't have to care for ordering of does statements. In fact, the point of roles is that the ordering doesn't matter.

[19:11] <masak> right.

[19:12] <jnthn> TimToady: In general, would you prefer quotes or none?

[19:12] <jnthn> TimToady: I agree the lack of consistency sucks.

[19:12] <TimToady> I tend to put quotes only where I think it might be confusing

[19:12] <TimToady> since classes are uppercase, they tend to not need quotes

[19:13] <TimToady> method names, being lowercase usually, can be more confusing

[19:13] <jnthn> OK

[19:13] <TimToady> suppose you had a method named cannot

[19:13] <TimToady> Method cannot must be resolved...

[19:14] <TimToady> Method never must be resolved

[19:14] <TimToady> :)

[19:14] <pmichaud> Method always must be resolved...

[19:14] <masak> Method maybe must be resolved.

[19:14] <TimToady> so I tend to quote lowercase words, but nothing else

[19:14] <TimToady> well, if it can be the null string, it needs quotes too

[19:14] <masak> rakudo: maybe

[19:15] <p6eval> rakudo 922500: OUTPUT«Could not find sub &maybe␤  in main program body at line 22:/tmp/NrEtXVP9rp␤»

[19:15] <masak> prefixing with '&' is a kind of quoting, too :)

[19:15] <TimToady> sigils are also suppressive of quote needfullness

[19:15] *** shinobicl left
[19:15] <masak> rakudo: even_though_I_looked_for_it_everywhere

[19:15] <p6eval> rakudo 922500: OUTPUT«Could not find sub &even_though_I_looked_for_it_everywhere␤  in main program body at line 22:/tmp/tMOi6IKisM␤»

[19:17] *** molaf left
[19:18] <colomon> rakudo: my $a; my $b = "Num"; say "($a).$b";

[19:18] <p6eval> rakudo 922500: OUTPUT«(Any()).Num␤»

[19:18] <colomon> rakudo: my $a = Mu; my $b = "Num"; say "($a).$b";

[19:18] <p6eval> rakudo 922500: OUTPUT«(Mu()).Num␤»

[19:18] *** soh_cah_toa joined
[19:22] <dalek> rakudo/nom: 08c2f9c | jonathan++ | src/Perl6/Metamodel/RoleToClassApplier.pm:

[19:22] <dalek> rakudo/nom: Be more consistent on quoting in an error (TimToady++).

[19:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/08c2f9cce6

[19:26] *** Jackneill left
[19:27] <masak> "be more consistent with your feedback" -- Flight of the Conchords

[19:30] <sorear> good * #perl6

[19:30] <phenny> sorear: 13:45Z <tadzik> tell sorear [Coke] says https://gist.github.com/1106792

[19:30] <phenny> sorear: 13:48Z <moritz> tell sorear about https://gist.github.com/1106801 too -- bootstrapping with parallel make seems to be missing a few dependencies

[19:31] *** mkramer1 joined
[19:32] *** mkramer1 left
[19:34] <[Coke]> sorear;I'm here if you need me to retry anything.

[19:34] *** lichtkind left
[19:35] <sorear> [Coke]: are you on mono 2.6.7?

[19:35] <[Coke]> yes.

[19:35] <sorear> good, then I know what happened

[19:36] <[Coke]> \o/

[19:36] <[Coke]> do I need to upgrade or something?

[19:37] <sorear> upgrading would fix it, yes, but I have a workaround that I forgot to commit yesterday

[19:39] <[Coke]> if you like, I'll hold off on the upgrade until I can test your workaround.

[19:39] <colomon> rakudo: say Radians

[19:39] <p6eval> rakudo 922500: OUTPUT«0␤»

[19:42] <masak> is there a way, short of regexes, to answer the question "is this character a letter?"?

[19:42] <dalek> niecza: 24e0bb1 | sorear++ | Makefile:

[19:42] <dalek> niecza: Do not use bootstrap compiler in multi-compile mode

[19:42] <dalek> niecza: review: https://github.com/sorear/niecza/commit/24e0bb1c86

[19:42] <dalek> niecza: f6cf9b5 | sorear++ | Makefile:

[19:42] <dalek> niecza: Leave confusing files out of binary

[19:42] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f6cf9b5c59

[19:43] <tadzik> masak: $a.ord ~~ ('a'..'z')?

[19:43] <tadzik> or so

[19:43] <[Coke]> masak: ask ICU?

[19:43] <[Coke]> tadzik: see also: unicode.

[19:43] <tadzik> yeah, I know

[19:44] <sorear> niecza: say Q:CgOp { (UniCat {'z'}) }

[19:44] <p6eval> niecza v8: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Q:CgOp not allowed in safe mode at /tmp/0PBm1lhKud line 1:␤------> [32msay Q:CgOp { (UniCat {'z'}) [33m⏏[31m}[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 685 (CORE die @ 2) ␤  at /home/p…

[19:44] <sorear> [Coke]: you can try again (will need to clean)

[19:44] <masak> tadzik: I was aiming especially for a Unicode-aware solution. failed to mention that.

[19:45] <tadzik> mhm

[19:45] <masak> [Coke]: that sounds like a good suggestion.

[19:45] <masak> [Coke]: any concrete way to do that?

[19:46] <[Coke]> modified:   hoopl/Nam.hs 

[19:46] <[Coke]> I cannot seem to un-modify it.

[19:46] <tadzik> git checkout hoopl/Nam.hs?

[19:47] <[Coke]> masak: well, you can call C (ew), or there might be a parrot opcode that DTRT (slightly less ew)

[19:47] <[Coke]> tadzik: still modified.

[19:47] <tadzik> [Coke]: with --force maybe?

[19:48] <[Coke]> tadzik: still modified.

[19:48] <tadzik> git checkout -f 'branch'?

[19:49] <[Coke]> "Already on master"

[19:49] <masak> [Coke]: that sounds intriguing, albeit a bit tricky.

[19:50] *** birdwindupbird left
[19:50] <[Coke]> want me to see the 

[19:51] <[Coke]> ... no clue what that was. sorry

[19:52] <sorear> masak: what if I added a Str.general-category method?

[19:53] <sorear> [Coke]: um.  on OSX?

[19:53] <[Coke]> sorear: yes.

[19:54] <sorear> it looks like pmurias committed both hoopl/nam.hs and hoopl/Nam.hs

[19:54] <masak> sorear: sounds fine, but a word of warning: making them just .letter or so is not a good idea.

[19:54] <[Coke]> ... GAH

[19:55] <sorear> I wonder if pmurias would be offended if I exiled his not-quite-ever-working-and-very-bitrotten backends to branches

[19:55] <[Coke]> i can't even update at this point.

[19:55] <masak> sorear: we've had problems with .print methods on objects being that kind of method.

[19:55] <masak> [Coke]: are you experiencing git frustration?

[19:55] <[Coke]> masak: only when I use niecza. ;)

[19:55] <masak> oh :)

[19:56] <masak> [Coke]: git frustration used to happen to me, but nowadays it happens very seldom. it's all about finding one's own particular set of subcommands that can take one out of any particular pinch.

[19:56] <diakopter> sorear: I'm sure pmurias wouldn't be offended

[19:56] <sorear> masak: niecza repo contains two files that differ only in case.  [Coke]'s fs is case insensitive.  Bang.

[19:57] <masak> ah.

[19:57] <masak> Pro tip for Mac OS X users: first thing you do, reformat the HD to be case sensitive. for your own mental health's sake.

[19:57] <[Coke]> even git reset --hard HEAD leaves a changed file.

[19:57] <[Coke]> masak: ok. now fix windows.

[19:58] <dalek> niecza: 838bc38 | sorear++ | / (14 files):

[19:58] <dalek> niecza: Exile alternate backends to a branch

[19:58] <dalek> niecza: review: https://github.com/sorear/niecza/commit/838bc38a03

[19:58] <masak> what's Windows? :P

[19:58] <[Coke]> masak: "hah."

[19:58] <masak> some kind of scheduling software?

[19:58] <benabik> masak: I leave mine case insensitive specifically so I can find breakages for the users who don't understand how to change it.

[19:58] <[Coke]> given that I do 99% of my work on windows/OS X, I find your world view amusingly baroque. :P

[19:58] <tylercurtis> masak: it's a bad idea to not have a case insensitive HFS partition somewhere on a Mac.

[19:59] <sorear> [Coke]: try git fetch; rm hoopl/nam.hs; git reset --hard 838bc38

[19:59] <tylercurtis> Some Mac software refuses or fails to work on case sensitive filesystems.

[19:59] <masak> benabik: that's heroic of you. I'm not that heroic.

[19:59] <masak> tylercurtis: why?

[19:59] <pmichaud> TimToady (and others):  http://pmichaud.com/sandbox/features.html

[19:59] <benabik> Hah.  Yes.  Some devs don't notice they used different cases on files.

[19:59] <pmichaud> See the "Single inheritance" entry

[20:00] <[Coke]> sorear++

[20:00] <pmichaud> json used to create that:  http://gist.github.com/1107842

[20:00] <tylercurtis> The Mac version of Steam, for example, caused me great deals of problems when I kept it on my case sensitive external drive.

[20:01] <[Coke]> pmichaud: that's not checked in?

[20:01] <pmichaud> [Coke]: not yet... just wanted to get initial feedback before I commit it.

[20:01] <pmichaud> also, the features.json needs to be filled out again :)

[20:01] <[Coke]> oh, didn't even notice your 1st url wasn't on perl6. ;)

[20:02] <pmichaud> I could probably write a short program to convert the existing features.txt to features.json, rather than doing it by hand

[20:03] <pmichaud> if only there was a good programming languag..... oh.

[20:03] <masak> awk!

[20:03] <masak> sed!

[20:03] <[Coke]> masak: your offer is accepted.

[20:04] <masak> d'oh

[20:04] <pmichaud> I fairly radically rewrote process.pl

[20:05] *** Mowah left
[20:06] <kboga> nom: use Test; eval 'NoSuchClass.new()'; ok  $!  ~~ Exception, 'death to instantiating nonexistent class'; diag($!); ok "$!" ~~ / NoSuchClass /, 'error for "NoSuchClass.new()" mentions NoSuchClass';

[20:06] <p6eval> nom: OUTPUT«ok 1 - death to instantiating nonexistent class␤# Could not find sub &NoSuchClass␤ok 2 - error for "NoSuchClass.new()" mentions NoSuchClass␤»

[20:06] <TimToady> 'example' is kinda long, maybe 'eg'

[20:06] <kboga> Could not find sub &NoSuchClass  --> err?

[20:07] <pmichaud> I fear 'eg' looks too much like 'eq'.  Maybe with dots as  "e.g."?

[20:07] <pmichaud> can always just use "code", too.

[20:07] <masak> or just "ex".

[20:07] <pmichaud> "ex" I can live with.

[20:07] <masak> and "sp".

[20:07] <TimToady> code would be okay to

[20:08] <TimToady> and same length as spec

[20:08] <TimToady> ex and sp are okay too

[20:08] <TimToady> or just color coded buttons :)

[20:08] <kboga> brb

[20:10] *** tyatpi_ joined
[20:10] <pmichaud> I'll finish converting features.txt, then commit, then people can hack on improvements :)

[20:11] * TimToady wates with baited breath

[20:11] *** Kivutarrr joined
[20:11] <TimToady> .oO(Diet of Worms?)

[20:12] <diakopter> lol

[20:12] *** ymasory_ joined
[20:14] <kboga> rakudo: use Test; eval 'NoSuchClass.new()'; ok $! ~~ Exception, 'death to instantiating nonexistent class'; diag($!); ok "$!" ~~ / NoSuchClass /, 'error for "NoSuchClass.new()" mentions NoSuchClass';

[20:14] <p6eval> rakudo 922500: OUTPUT«ok 1 - death to instantiating nonexistent class␤# Could not find sub &NoSuchClass␤ok 2 - error for "NoSuchClass.new()" mentions NoSuchClass␤»

[20:14] <[Coke]> hopefully moritz's perl has JSON.

[20:15] <[Coke]> I'm surprised no one has asked why it's not written in p6 yet.

[20:16] <diakopter> but then one would need to choose which implementation's variant of the language to use

[20:17] * TimToady thought of it, and also thought it would be rude :)

[20:18] <kboga> rakudo: use Test; eval 'NoSuch::Subclass.new()'; ok  $!  ~~ Exception, 'death to instantiating nonexistent::class'; diag($!); ok "$!" ~~ / 'NoSuch::Subclass' /, 'error for "NoSuch::Subclass.new()" mentions NoSuch::Subclass';

[20:18] <p6eval> rakudo 922500: OUTPUT«ok 1 - death to instantiating nonexistent::class␤# Cannot find sub NoSuch::Subclass␤ok 2 - error for "NoSuch::Subclass.new()" mentions NoSuch::Subclass␤»

[20:18] <kboga> nom: use Test; eval 'NoSuch::Subclass.new()'; ok  $!  ~~ Exception, 'death to instantiating nonexistent::class'; diag($!); ok "$!" ~~ / 'NoSuch::Subclass' /, 'error for "NoSuch::Subclass.new()" mentions NoSuch::Subclass';

[20:18] <p6eval> nom: OUTPUT«ok 1 - death to instantiating nonexistent::class␤# Could not find symbol 'NoSuch::&Subclass'␤not ok 2 - error for "NoSuch::Subclass.new()" mentions NoSuch::Subclass␤»

[20:19] <kboga> Could not find symbol 'NoSuch::&Subclass --> hmm

[20:19] <masak> in fact, it was the first thing I thought when I saw moritz++'s script: "huh, this would have been an excellent thing to dogfood." but then I saw that it used modules and stuff, so I assumed moritz had a reason or two.

[20:19] *** bluescreen10 left
[20:19] <[Coke]> MM, mainly the modules, I'd wager.

[20:20] <[Coke]> Seems like JSON would be a nice one to have with a grammar.

[20:22] <masak> there is one.

[20:22] <masak> in the book, even.

[20:23] <pmichaud> http://pmichaud.com/sandbox/features.html  # after converting features.txt to features.json

[20:23] <pmichaud> http://gist.github.com/1107922  # full features.json

[20:24] <pmichaud> "code" and "spec" entries are allowed to be either single string urls or an array of string urls

[20:24] <diakopter> I suggest it should live as a page on perl6.org itself eventually

[20:24] <pmichaud> diakopter: catch up, dude.   http://perl6.org/compilers/features  :-P

[20:24] <TimToady> seems to be missing the code button

[20:24] <pmichaud> I don't have any code entries there...

[20:24] <pmichaud> let me put that back.

[20:26] <pmichaud> http://pmichaud.com/sandbox/features.html  # updated with "code" link

[20:26] <pmichaud> okay, committing, pushing

[20:28] *** dorlamm joined
[20:28] <dalek> features: 6cd36f5 | pmichaud++ | / (4 files):

[20:28] <dalek> features: Radical rewrite.  features.txt is now features.json, and process.pl has been simplified a fair bit.  We now allow "code" and "spec" values for each item to have links to relevant examples and the Perl 6 specification.

[20:28] <dalek> features: review: https://github.com/perl6/features/commit/6cd36f5a47

[20:29] <TimToady> thanks!

[20:30] * pmichaud wates with baited breath for a flurry of TimToady++ commits :)

[20:30] <pmichaud> okay, I should head back home now and be a family member again.  I'll bbi30 and will watch on/off for any issues with the code.

[20:36] <dalek> features: 36b78bf | Coke++ | Makefile:

[20:36] <dalek> features: add a 'clean' target.

[20:36] <dalek> features: review: https://github.com/perl6/features/commit/36b78bf1cb

[20:40] *** y3llow_ joined
[20:41] *** pothos_ joined
[20:42] *** kaare_ left
[20:42] *** pothos left
[20:43] *** timbunce left
[20:43] *** pothos_ is now known as pothos

[20:43] *** y3llow left
[20:43] *** y3llow_ is now known as y3llow

[20:43] *** Trashlord left
[20:47] <pmichaud> back home again

[20:48] <masak> that was fast!

[20:48] <pmichaud> light traffic this afternoon, plus wasn't all that far away.

[20:49] <pmichaud> there's a local cafe with wifi that I escape to when I need to do stuff without household distractions :)

[20:49] *** timbunce joined
[20:54] *** bluescreen10 joined
[20:55] <dalek> features: 5f65854 | pmichaud++ | features. (2 files):

[20:55] <dalek> features: Remove features.txt from repo, update features.json for Rakudo master.

[20:55] <dalek> features: review: https://github.com/perl6/features/commit/5f65854041

[21:10] <dalek> features: 336c0d9 | larry++ | features.json:

[21:10] <dalek> features: add a few codes

[21:10] <dalek> features: review: https://github.com/perl6/features/commit/336c0d955f

[21:17] <masak> Moose is so nice. it makes programming Perl 5, which was already a fairly pleasant experience, even better.

[21:19] <dalek> features: 16a29c8 | pmichaud++ | features.json:

[21:19] <dalek> features: Fix multiple code entries from commit 5f65854.

[21:19] <dalek> features: review: https://github.com/perl6/features/commit/16a29c8067

[21:19] <pmichaud> oops, referenced wrong commit.  oh well.

[21:19] <pmichaud> should've been 336c0d9 in the commit message :)

[21:20] <masak> the biggest complaint I have with Perl 5, syntactically, is that sometimes I expect some postcircumfix operator to Just Work on an expression (because it does in Perl 6), but then it often turns out that I need to parenthesize the expression.

[21:20] *** shinobicl joined
[21:23] *** bluescreen10 left
[21:26] <kboga> rakudo: @*INC.push: 't/spec/packages'

[21:26] <p6eval> rakudo 922500:  ( no output )

[21:26] <kboga> nom: @*INC.push: 't/spec/packages'

[21:26] <p6eval> nom: OUTPUT«Method 'push' not found for invocant of class 'Failure'␤current instr.: '_block1002' pc 91 ((file unknown):73461515) (/tmp/RLjWEpse3R:1)␤»

[21:28] <masak> huh? CPAN's Test::More doesn't have a dies_ok? :)

[21:28] <masak> guess I have to write my own, then...

[21:29] <masak> ...using "eval" instead of "try". how gauche :P

[21:29] <kboga> rakudo: .say for @*INC

[21:29] <p6eval> rakudo 922500: OUTPUT«lib␤/home/p6eval/.perl6/lib␤/home/p6eval//p2/lib/parrot/3.6.0-devel/languages/perl6/lib␤.␤»

[21:30] <BinGOs> Test::Exception has a dies_ok()

[21:30] <masak> oh! thanks.

[21:30] <masak> BinGOs++

[21:31] *** mj41_nb left
[21:31] <masak> and throws_ok even checks how. excellent.

[21:31] * BinGOs was just PASSing by

[21:32] *** dorlamm left
[21:32] <masak> :P

[21:33] <tadzik> better than skipping :)

[21:33] <masak> or flunking :)

[21:37] *** Kivutarrr left
[21:38] *** bluescreen10 joined
[21:39] *** thou joined
[21:41] *** spq1 left
[21:43] *** Psyche^ joined
[21:45] *** shinobicl left
[21:47] *** slavik joined
[21:47] *** Patterner left
[21:47] *** Psyche^ is now known as Patterner

[21:49] *** ab5tract left
[21:49] *** ymasory_ left
[21:50] <tadzik> nom: 1 #= why exactly am I broken?

[21:50] <p6eval> nom: OUTPUT«Whitespace character is not allowed as a delimiter at line 1, near " why exact"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23611 (src/stage2/gen/NQPHLL.pir:6347) (src/stage2/gen/NQPHLL.pm:329)␤»

[21:50] <tadzik> nom: 1 #=[while I work perfectly fine?]

[21:50] <p6eval> nom:  ( no output )

[21:53] *** impious left
[21:54] <masak> ISTR this was a problem in master, too.

[21:54] <tadzik> yes

[21:55] *** dukeleto left
[21:57] <masak> just grep for the error message.

[21:58] <tadzik> it falls under token comment:sym<#=(...)> { I suppose

[21:58] <tadzik> instead of token comment:sym<#=> {

[22:02] <jnthn> Could always try a <!ws> before the <quote_EXPR> in the former.

[22:04] <moritz> masak: I didn't do the script in p6 because 1) I wanted a well-tested template module 2) didn't want to compiler rakudo on feather2 and 3) didn't want to use rakudo on feather2

[22:04] <moritz> masak: 2) and 3) mostly because it's low memory - even the p5 CPAN client sometimes runs OOM on feather2

[22:04] <moritz> as do some of the tests in p5 code

[22:05] <masak> oh, ok.

[22:06] <moritz> [Coke]: I'm find with your json proposal

[22:06] <masak> the first reason I guessed, but the latter two make sense as well.

[22:08] <tadzik> jnthn: that seems to have fixed it

[22:09] <tadzik> oooo, you do want to see that!

[22:10] <tadzik> ...okay, it's buggy. But!

[22:11] <tadzik> http://wklej.org/id/567820/

[22:11] <tadzik> the first one was commented out because, for some reasons, it prints "potatoes" as well :P

[22:12] <tadzik> it's full of ugly hacks, but it proves I'm on the right track :)

[22:13] <tadzik> oh, and that first one is probably due to binding in nqp

[22:15] <tadzik> http://wklej.org/id/567822/ this one works. Weird

[22:15] <tadzik> okay. Morale boost achieved, I can go to sleep now :)

[22:18] *** timbunce left
[22:18] *** drbean joined
[22:19] <jnthn> tadzik++

[22:19] <tadzik> :)

[22:26] <masak> 'night, #perl6.

[22:26] *** masak left
[22:26] <kboga> would @*INC need to be set up in src/main.nqp for nom?

[22:28] <pmichaud> probably similar to @*ARGS, yes.

[22:29] *** lichtkind joined
[22:29] <pmichaud> it's going to be a little challenging to handle, though, but @*INC needs to be a Rakudo array, which makes it a little more challenging to access from nqp

[22:29] <pmichaud> s/but/because/

[22:30] <lichtkind> thou: great

[22:30] <lichtkind> thou: are you done with that tablet?

[22:30] <thou> hi, lichtkind! yes, i think i'm done with it.

[22:30] <pmichaud> in general, initializing things in MAIN (in src/main.nqp) is likely incorrect, because there are some scenarios in which that MAIN() probably won't be called.

[22:32] <kboga> ic

[22:35] *** soh_cah_toa left
[22:40] <lichtkind> thou: really great

[22:41] <thou> thanks!

[22:43] <lichtkind> thou: maybe you do the smallhttp://www.perlfoundation.org/perl6/index.cgi?perl_6_delta_tablet#trends section till i got the first tablet

[22:43] <lichtkind> http://www.perlfoundation.org/perl6/index.cgi?perl_6_delta_tablet#trends

[22:45] <lichtkind> thou: the things in the quote where meant to be transliterations done by purpose

[22:57] <jnthn> sleep time &

[22:58] <thou> lichtkind: yes, i thought so; but also it didn't read well to me, too distracting. i'd be ok with putting back the "ehm" perhaps, if you feel it sets a desirable tone.

[23:03] *** jevin left
[23:06] *** whiteknight joined
[23:07] *** jevin joined
[23:10] <lichtkind> thou: no its good

[23:10] <lichtkind> dont has to be there

[23:10] <lichtkind> sometimes some joke too muh are just distracting

[23:11] <lichtkind> jnthn: good night

[23:12] <lichtkind> thou: so you go on with the trends?

[23:16] *** uvtc joined
[23:23] *** cryptographrix joined
[23:28] *** cryptographrix left
[23:29] *** cryptographrix joined
[23:30] *** orafu left
[23:30] *** orafu joined
[23:33] *** benabik left
[23:35] *** benabik joined
[23:37] <uvtc> Seems like the new Perl 6 features page could use a Camelia logo. Maybe add something like

[23:37] <uvtc> <img src="camelia-logo-small.png" align="right">

[23:37] <uvtc> to line 51 of the template.html file.

[23:38] <uvtc> I don't think I've got a commit bit to perl6.

[23:40] <TimToady> I thought they just gave you one

[23:40] *** benabik left
[23:40] *** benabik joined
[23:40] <uvtc> I don't believe so. I'm new to github. Should I fork and send a pull req?

[23:41] *** benabik left
[23:41] <uvtc> Ooh, wanted to fix a typo on perl6.org also.

[23:43] <uvtc> TimToady: I pointed out a broken link on perl6.org yesterday, but didn't ask for commit access to fix it.

[23:44] *** dukeleto joined
[23:45] <TimToady> hugme: add uvtc

[23:46] <[Coke]> do you need a "to" something?

[23:47] <TimToady> I believe you are added--went to github

[23:47] *** wamba left
[23:48] <uvtc> TimToady: thank you. As I mentioned, I'm new to github, so I'm reading some docs right now. I think I'm supposed to clone, edit, commit, then push...

[23:49] <uvtc> s/commit/add, then commit/

[23:49] <TimToady> well, you don't have to add something if it's already in the clone

[23:49] <uvtc> I mean, 'git add' my change to my local index.

[23:49] *** tyatpi_ left
[23:50] <TimToady> I've never used git add

[23:50] *** tyatpi_ joined
[23:50] <TimToady> (that I recall)

[23:51] <uvtc> Perhaps instead of "git add; git commit" you use "git commit -a"?

[23:51] <PerlJam> uvtc: or "git commit filename" (if filename is already added to the repo)

[23:51] <TimToady> those are what I usually use

[23:52] <uvtc> PerlJam: Oh, didn't know "git commit filename" actually adds then commits. Thanks, will try that out.

[23:56] *** cryptographrix left
[23:59] <dalek> perl6.org: 7bb0793 | (John Gabriele)++ | source/whatever/index.html:

[23:59] <dalek> perl6.org: minor spelling fix

[23:59] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/7bb0793dea

