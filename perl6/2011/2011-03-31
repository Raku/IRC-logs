[00:01] *** nymacro joined
[00:10] *** icwiener_ left
[00:24] *** Rotwang left
[00:28] *** justatheory left
[00:29] *** justatheory joined
[00:33] *** justatheory left
[00:47] *** nothingmuch joined
[00:48] *** jaldhar joined
[00:57] *** woosley joined
[00:58] *** ponbiki left
[01:00] *** icwiener joined
[01:02] *** justatheory joined
[01:18] <cotto> rakudo: 4..24.pick(*)

[01:18] <p6eval> rakudo 405afa:  ( no output )

[01:18] <cotto> rakudo: 4..24.pick(*).say

[01:18] <p6eval> rakudo 405afa: OUTPUT«24␤»

[01:18] <cotto> rakudo: 4..24.pick(*).join(',').say

[01:18] <p6eval> rakudo 405afa: OUTPUT«24␤»

[01:21] *** whiteknight left
[01:23] *** ponbiki joined
[01:23] *** silent_h_ joined
[01:24] <cotto> rakudo: (4..24).pick(*).join(',').say

[01:24] <p6eval> rakudo 405afa: OUTPUT«5,9,18,13,7,6,23,8,24,22,12,15,4,10,11,20,14,16,17,21,19␤»

[01:25] * cotto goes off to find out if 24 is better in random order

[01:34] *** silent_h_ left
[01:39] *** rdesfo left
[01:53] *** donri left
[01:59] *** GinoMan joined
[02:05] *** benabik joined
[02:24] *** ymasory left
[02:39] *** ajs joined
[02:40] *** benabik left
[02:40] *** icwiener left
[02:40] <ajs> Curious if anyone has an improvement on my code at http://essays.ajs.com/2011/03/perl-6-for-finding-non-trivial-powers.html -- I could golf it a bit, but that wasn't what I had in mind.

[02:41] <ajs> It's based on a python example that I wanted to play with a bit.

[02:44] *** benabik joined
[02:46] *** ymasory joined
[02:50] <sorear> ... is an unnecessarily big gun for this problem

[02:50] <sorear> using .. would be safer

[02:50] <sorear> I might write the loop as for 2 .. $lim X 2 .. $lim -> $a, $b {

[02:51] <sorear> line 10 possibly better written using Hash.push

[02:52] <sorear> the closure on sort is unnecessary; pairs sort by .key automatically

[02:56] <sorear> %powers := classify { .key ** .value }, (2 .. $lim X=> 2 .. $lim) # perhaps too golfy

[02:59] * sorear pokes ajs

[03:17] *** am0c joined
[03:23] <ajs> hey

[03:24] <ajs> I thought ... was supposed to be used for looping now? When did it change back?

[03:25] <PerlJam> It never changed to begin with.

[03:25] <PerlJam> ... is the sequence generator

[03:25] <ajs> Yeah, sorear, those are certainly more idiomatic approaches, but I don't know how much they improve the code.

[03:26] <PerlJam>  .. is just a range op

[03:26] <ajs> Oh, and I don't think you can use X because of the way you have to short circuit the inner loop

[03:27] <ajs> PerlJam, I know. But there was a time on this channel when people were pushing ... as the right solution for loop ranges. I think it was when we were having the range vs. sequence discussion re: characters and strings.

[03:29] <PerlJam> I don't think it matters much in this case.  They may end up being the same thing

[03:29] <PerlJam> (i.e. I think that $a ... $b turns into $a .. $b when it can)

[03:30] <ajs> I'm sure it's all jitted down to some SSE instruction that gets pushed out to the GPU ;-)

[03:31] *** Limbic_Region left
[03:33] *** GinoMan left
[03:34] *** hudnix left
[03:35] *** sftp left
[03:37] <ajs> Actually, I might be wrong about "my Array %foo"

[03:38] <ajs> Would you be able to just push onto arbitrary indexes (e.g. %foo<blah>.push(0)) or is that goingt to fail because an undefined value of type Array is stored there?

[03:40] <sorear> ajs: just use push %foo, blah => 0;

[03:57] <ajs> I don't think that does the same thing

[03:58] *** agentzh joined
[03:58] <ajs> The idea is you have an empty %foo. You want to add one element to the array at index "blah". In Perl 5: push @{$foo{blah}}, 0;

[04:01] <sorear> rakudo: my %foo; push %foo, blah => 1; push %foo, blah => 2; say %foo.perl; # Now do you beleive me?

[04:01] <p6eval> rakudo 405afa: OUTPUT«Method '!fill' not found for invocant of class ''␤  in 'List::push' at line 2907:CORE.setting␤  in main program body at line 22:/tmp/gc85QxsW3I␤»

[04:01] <sorear> hmm

[04:02] <ajs> no ;)

[04:02] <sorear> rakudo: my %foo; %foo.push: blah => 1; %foo.push: blah => 2; say %foo.perl;

[04:02] <p6eval> rakudo 405afa: OUTPUT«{}␤»

[04:02] <sorear> it's absolutely specced to work.

[04:02] <PerlJam> wow.

[04:02] <sorear> I thought it worked in Rakudo

[04:02] <ajs> that would be very keen

[04:02] <PerlJam> so did I

[04:09] *** ymasory left
[04:13] *** lue joined
[04:16] <mberends> ajs++: nice blog

[05:03] *** birdwindupbird joined
[05:04] *** jimmy1980 left
[05:04] *** birdwindupbird left
[05:09] *** birdwindupbird joined
[05:11] *** jimmy1980 joined
[05:11] *** jimmy1980 left
[05:12] *** jimmy1980 joined
[05:13] *** bacek left
[05:17] <PerlJam> rakudo: my %foo; %foo.push: 'blah' => 1; %foo.push: 'blah' => 2; say %foo.perl

[05:17] <p6eval> rakudo 405afa: OUTPUT«{"blah" => [1, 2]}␤»

[05:18] <PerlJam> sorear: it only seems to fail when you try to push a Pair that has an unquoted string on the LHS of the =>

[05:18] <PerlJam> and with that ... I'm asleep

[05:19] *** _dev0_ left
[05:20] *** kaare_ joined
[05:30] *** jimmy1980 left
[05:31] *** justatheory left
[05:33] *** mberends left
[05:37] *** jimmy1980 joined
[05:56] *** wtw joined
[06:16] *** Mowah joined
[06:30] <moritz_> good morning

[06:31] <moritz_> fwiw Hash.push is not specced to work with named arguments

[06:32] <moritz_> the signature in S32 just mentions *@values

[06:32] *** wiebie joined
[06:33] <dalek> specs: bb2a783 | moritz++ | S32-setting-library/Containers.pod:

[06:33] <dalek> specs: [S32] typo or thinko in Hash.push signature

[06:33] <dalek> specs: review: https://github.com/perl6/specs/commit/bb2a783fc7

[06:35] *** bacek joined
[06:35] *** wiebie left
[06:36] <sorear> oh! of course

[06:36] <sorear> good morning moritz_.

[06:44] * sorear out

[06:45] <moritz_> you witnessed: shift changeover in #perl6 :-)

[06:46] <moritz_> the US slowly fades away, Europe slides into the sun's focus again

[07:03] *** shi joined
[07:14] *** chin_up joined
[07:20] *** fhelmberger joined
[07:33] <tadzik> guten morgen #perl6

[07:49] *** ajs left
[07:52] *** domidumont joined
[08:02] *** fhelmberger left
[08:03] *** fhelmberger joined
[08:09] <jdhore> moritz_, ping

[08:10] <moritz_> jdhore: pong

[08:11] <jdhore> moritz_, Do you think someone's going to take Release Manager for 2011.04 in the next ~2 weeks or should I just take it now (I want to give others a chance)

[08:12] <moritz_> jdhore: I'll ask around if anybody wants to do it

[08:12] <jdhore> OK :)

[08:13] <moritz_> jdhore: it's great that you volunteer, I just want to keep the bus number high by diversivying

[08:13] <jdhore> Exactly

[08:13] *** fhelmberger left
[08:13] *** fhelmberger_ joined
[08:14] *** kostja_osipov joined
[08:17] *** fhelmberger joined
[08:18] *** kostja_osipov left
[08:19] *** tzhs joined
[08:20] *** fhelmberger_ left
[08:34] *** kostja_osipov joined
[08:36] *** benabik left
[08:41] *** chin_up left
[08:48] *** nothingmuch left
[08:54] <moritz_> btw today I received the 3rd item of the p6cc price :-)

[08:54] <moritz_> "winning ways for your mathematical plays"

[08:54] <moritz_> so that I won't botch up a p4-like task in future :-)

[08:54] <moritz_> only one book missing, but that's a pre-order

[08:58] *** Su-Shee joined
[08:58] <Su-Shee> hello everyone!

[08:58] <moritz_> oh hai su shee

[09:01] <tadzik> Su-Shee \o/

[09:04] *** araujo left
[09:08] *** am0c left
[09:10] <Su-Shee> so none of you had a journey to perl? :) -> twitter -> #myjourneytoperl :)

[09:11] *** cosimo left
[09:13] * moritz_ had a journey to perl, but doesn't twitter

[09:14] <Su-Shee> moritz_: it's a great announcement tool. 

[09:14] <moritz_> I know. I should stop being so old-fashioned

[09:15] * Su-Shee moves moritz_' mouse over the "sign up" button. ;)

[09:15] <tadzik> heh, I recently realized I'm some sort of an internet hipster, so if anything becomes too upstream I keep away from it. Like I'd never sign up to facebook

[09:16] <Su-Shee> I'm a late early adopter. ;) 

[09:16] <tadzik> besides a false account I need for downloading music sheets sometimes, they often want "login with facebook"

[09:16] <Su-Shee> I keep an eye on things and start when I actually see any value

[09:16] <moritz_> tadzik: I avoid facebook like the plague

[09:17] <Su-Shee> after I realized that I could use twitter to get dates and appointments and events served easily, I made an account.

[09:17] <tadzik> moritz_: same here

[09:17] <tadzik> but that makes me think that if I ever get to microblogging, that'd be rather identi.ca, not twitter. Dunno why

[09:18] <Su-Shee> tadzik: I don't think it's really about microblogging. well not within the geek community anyways. I see mostly links to docs, articles, short opinions, events etc

[09:19] <moritz_> Su-Shee: you've just given a good defintion of micro blogging :-)

[09:19] <tadzik> yeah, 140 chars is to little for anyblogging :)

[09:19] <Su-Shee> and there's the marketing aspect of course. announcements spread very nicely via twitter.

[09:22] <moritz_> ok, registered as 'nogoodnickleft'

[09:23] <tadzik> I wonder if tadzik is taken

[09:23] <Su-Shee> moritz_: *haha* nice one :)

[09:23] <tadzik> username has already been taken. What a ....

[09:23] <moritz_> all my usual ones were taken already

[09:23] <moritz_> even "perlgeek"

[09:23] <Su-Shee> tadzik: that happens with 10 million people. I didn't get Su-Shee as well and had to go for my alternate sheeshee

[09:24] * moritz_ is happy he was an early github adopter, and got his usual nick there

[09:24] <tadzik> see? Too mainstream! Even for tadzik!

[09:26] *** Rotwang joined
[09:26] *** ManOwl joined
[09:26] *** bacek left
[09:28] *** Rotwang left
[09:30] <tadzik> oh, our kids will have serious problems

[09:31] *** Rotwang joined
[09:31] <moritz_> no, they'll just use new services

[09:31] <moritz_> do you really expect twitter to still be mainstream in 12 years?

[09:32] *** Rotwang left
[09:32] *** Rotwang joined
[09:34] <Su-Shee> of course not. I have yet to see _any_ "social web" thingie which isn't out of fashion after 5 years.

[09:34] *** Rotwang left
[09:34] *** Rotwang joined
[09:34] <Su-Shee> (kuro5hin, oloh, advogato, orkut...)

[09:35] <moritz_> myspace!

[09:35] <Su-Shee> dropped rapidly indeed.

[09:35] <Su-Shee> lifejournal.

[09:35] <moritz_> was there a social network before myspace?

[09:35] *** Rotwang left
[09:36] *** Rotwang joined
[09:36] <Su-Shee> hm, if you count slashdot?

[09:37] <moritz_> that was never social :-)

[09:37] <Su-Shee> harhar :)

[09:39] *** Rotwang left
[09:41] *** orafu left
[09:41] *** orafu joined
[09:43] *** Rotwang joined
[09:43] *** Rotwang left
[09:44] <tadzik> (:

[09:44] *** Rotwang joined
[09:44] *** Rotwang left
[09:46] *** Rotwang joined
[09:58] *** woosley left
[10:02] *** Rotwang left
[10:02] *** Rotwang joined
[10:02] *** Rotwang left
[10:03] *** Rotwang joined
[10:03] *** Rotwang left
[10:04] *** Rotwang joined
[10:06] *** Rotwang1 joined
[10:08] *** Rotwang1 left
[10:09] *** Rotwang left
[10:09] *** Rotwang joined
[10:25] *** tzhs left
[10:26] *** Rotwang left
[10:26] *** Mowah left
[10:29] *** Tene left
[10:30] *** Tene joined
[10:34] *** Mowah joined
[10:41] *** fhelmberger left
[11:02] *** PZt joined
[11:02] *** agentzh left
[11:10] *** ponbiki left
[11:20] *** fhelmberger joined
[11:25] *** ponbiki joined
[11:28] *** fhelmberger_ joined
[11:29] *** fhelmberger left
[11:35] *** birdwindupbird left
[11:37] *** kostja_osipov left
[11:40] *** kostja_osipov joined
[11:53] *** Patterner left
[11:54] *** bacek joined
[11:54] *** Psyche^ joined
[11:54] *** Psyche^ is now known as Patterner

[11:55] *** birdwindupbird joined
[12:08] *** hudnix joined
[12:24] *** nymacro left
[12:27] *** Mowah left
[12:27] *** MayDaniel joined
[12:30] *** Mowah joined
[12:30] *** Axius joined
[12:38] *** MayDaniel left
[12:46] *** Axius left
[13:01] *** ManOwl left
[13:07] *** sftp joined
[13:09] *** ajs joined
[13:12] *** tzhs joined
[13:24] *** spq joined
[13:28] *** Trashlord left
[13:30] *** plainhao joined
[13:30] *** nymacro joined
[13:38] *** pmurias joined
[13:38] <pmurias> sorear: ping

[13:46] <dalek> rakudo: 4bf1327 | perlpilot++ | docs/release_guide.pod:

[13:46] <dalek> rakudo: Claim April release

[13:46] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/4bf1327765

[13:46] <moritz_> PerlJam++

[13:47] *** tzhs left
[13:48] *** mtk joined
[13:48] *** mtk left
[13:52] *** spq left
[13:59] *** kaare_ left
[13:59] *** mtk joined
[13:59] *** mtk left
[14:00] *** mtk joined
[14:04] <sorear> pmurias: hi

[14:05] <sorear> good * #perl6

[14:05] <moritz_> good morning sorear 

[14:06] <PerlJam> buenos dias

[14:07] <PerlJam> sorear: I bet that Hash.push problem is relatively LHF (though I haven't really looked at it myself)

[14:07] <PerlJam> rakudo: my %h; %h.push: a => 1; say %h.perl;

[14:07] <p6eval> rakudo 405afa: OUTPUT«{}␤»

[14:07] <PerlJam> rakudo: my %h; %h.push: 'a' => 1; say %h.perl;

[14:07] <p6eval> rakudo 405afa: OUTPUT«{"a" => 1}␤»

[14:08] <moritz_> PerlJam: it's spec, not LHF

[14:09] <PerlJam> oh?  That's odd.

[14:09] <moritz_> a => 1 is a named parameter to push()

[14:09] <moritz_> 'a' => 1 is a pair that's passed as a positional parameter

[14:09] <moritz_> the spec says *@values, which catches the latter but not the former

[14:10] <PerlJam> The devil is always in the details

[14:10] <PerlJam> moritz___

[14:10] <PerlJam> er, moritz_++

[14:10] *** _buno_ joined
[14:10] <moritz_> it would be a LHF to change, but requires concious decision

[14:11] <moritz_> also note that the use of named arguments would lead to weird behavior

[14:11] <moritz_> %h.push: 'a' => 1, a => 2, 'a' => 3; # now, what's the order of %h<a> ?

[14:12] <moritz_> a naive implementation would produce either 1, 3, 2 or 2, 1, 3

[14:13] *** wtw left
[14:13] *** stkowski joined
[14:14] *** ymasory joined
[14:15] *** envi joined
[14:18] <pmurias> sorear: would finishing the lisp backend be a good gsoc project?

[14:18] <pmurias> sorear: hi

[14:20] *** gottreu joined
[14:25] <sorear> PerlJam: I now beleive there is no problem.

[14:25] <sorear> pmurias: I doubt it

[14:26] <pmurias> sorear: why?

[14:26] <pmurias> not usefull enought?

[14:26] <pmurias> or too small/big?

[14:26] *** Trashlord joined
[14:26] <sorear> that's what I'm thinking, not useful widely enough

[14:26] <moritz_> let's play the devil's advocate: what are the benefits for the perl (6) community at large?

[14:28] *** _buno_ left
[14:30] *** _buno_ joined
[14:32] *** kaare_ joined
[14:38] *** domidumont left
[14:41] *** envi left
[14:43] *** _buno_ left
[14:44] *** justatheory joined
[14:48] <pmurias> moritz_: adds a secondary backend to niecza targeting something largely different then .net removing showing .net specificness in niecza

[14:48] *** donri joined
[14:48] <moritz_> pmurias: that in itself doesn't sound like a benefit for the perl community

[14:49] <moritz_> then we know that $feature is .NET specific - so what?

[14:49] <pmurias> moritz_: it's a backend we can expect good performance of as common lisps (like sbcl) offer good performance for a similiar language

[14:51] <PerlJam> We get the benefit of all of these years of people hacking on lisp compilers. 

[14:51] <moritz_> what does that mean? faster execution?

[14:51] <pmurias> yes

[14:52] <moritz_> now *that's* something you can write in such a proposal

[14:53] * sorear out

[14:54] *** MindosCheng joined
[14:56] *** envi joined
[14:58] *** cotto joined
[15:01] *** kostja_osipov left
[15:04] *** shi left
[15:10] *** icwiener joined
[15:15] <pmurias> moritz_: re if .net specific stuff is found in niecza i would make it more generall

[15:16] <moritz_> pmurias: that's still no benefit for the perl 6 community at large

[15:16] <moritz_> pmurias: think in terms of "what does the user of your compiler care about?"

[15:18] <pmurias> what the sbcl backend would over is hopefully reasonably good performance

[15:18] <pmurias> but it's not a sure thing before it's done

[15:19] <pmurias> s/over/offer

[15:19] <PerlJam> pmurias: is there anything that having yet another Perl 6 backend  intrinsically buys us?  (other than the hopeful performance boost)

[15:20] <moritz_> integration with the vast landscape of lisp libraries? dunno if that exists...

[15:21] <PerlJam> portability to more systems?

[15:22] <moritz_> I was about to say "it makes it easier to add more backends", but then the question is recursively "what do more backends buy us?"

[15:22] <PerlJam> access to some lispian technology that would greatly benefit us?

[15:22] *** domidumont joined
[15:23] *** mj41 joined
[15:24] <PerlJam> Is there a bootstrap path that if it involved lisp would obtain us an epic win?  :)

[15:25] <TimToady> rewrite emacs in Perl 6?

[15:25] <moritz_> now I'm scared.

[15:25] <TimToady> oops, one day too early

[15:25] <PerlJam> heh

[15:26] <TimToady> hmm

[15:26] * flussence wonders if I could write a php grammar in 24 hours...

[15:27] <PerlJam> flussence: isn't the grammar already out there somewhere? 

[15:27] <TimToady> php's grammar is written in lisp?!?

[15:28] <TimToady> maybe we can work Paul Graham in there somewhere...

[15:29] <PerlJam> TimToady: for an AFJ?  Sure.  :)

[15:29] <TimToady> personally, I think a Haskell backend might be more useful than a Lisp backend  :)

[15:30] <TimToady> you just have to write a CheatAllOverThePlace monad

[15:40] *** mj41 left
[15:46] *** sivoais joined
[15:46] *** poincare101 joined
[15:46] *** plobsing left
[15:46] <poincare101> 'perl6: say3:'

[15:46] <poincare101> perl6: say3;

[15:47] <poincare101> perl6: say 3;

[15:47] <sbp> rakudo: say 3

[15:47] <p6eval> niecza v4: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤  'say3' used at line Any()1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 387 (CORE die @ 2)␤  at /home/p6eval/niecza/src/STD.pm6 line 1141 (STD P6.comp_unit @ 75)␤  at

[15:47] <p6eval> ../home/p6eval/niecza…

[15:47] <p6eval> ..pugs: OUTPUT«*** No such subroutine: "&say3"␤    at /tmp/V5hXz43kDc line 1, column 1-5␤»

[15:47] <p6eval> ..rakudo 4bf132: OUTPUT«Could not find sub &say3␤  in main program body at line 22:/tmp/JhqcDX0V5d␤»

[15:47] <p6eval> pugs, rakudo 4bf132, niecza v4: OUTPUT«3␤»

[15:47] <p6eval> rakudo 4bf132: OUTPUT«3␤»

[15:47] <poincare101> rakdu say "hi!";

[15:47] <poincare101> rakudo: say "hi!";

[15:47] <p6eval> rakudo 4bf132: OUTPUT«hi!␤»

[15:47] <poincare101> that's exciting.

[15:47] <moritz_> rakudo: say 'patience, spelling :-)'

[15:47] <p6eval> rakudo 4bf132: OUTPUT«patience, spelling :-)␤»

[15:48] <poincare101> moritz_: :)

[15:48] <TimToady> .oO(you ain't seen nuthin')

[15:48] <moritz_> rakudo: say [*] 1..6

[15:48] <p6eval> rakudo 4bf132: OUTPUT«720␤»

[15:48] <moritz_> commute&

[15:48] <poincare101> I don't wanna write any more PHP, get on with Perl 6 please.

[15:48] <poincare101> moritz_: WHOA

[15:48] <poincare101> moritz_: that's like map in Haskell

[15:48] <sbp> rakudo: my @ips = ((0..255).roll(4).join('.')for 0..99); .say for @ips.sort: { .&naturally };

[15:49] <p6eval> rakudo 4bf132: OUTPUT«Could not find sub &naturally␤  in <anon> at line 22:/tmp/JSBglHth8g␤  in 'List::sort' at line 1␤  in main program body at line 22:/tmp/JSBglHth8g␤»

[15:49] <TimToady> poincare101: it's a fold

[15:49] <sbp> rakudo: sub naturally ($a) { $a.lc.subst(/(\d+)/, -> $/ { 0 ~ $0.chars.chr ~ $0 }, :g) ~ "\x0" ~ $a }; my @ips = ((0..255).roll(4).join('.')for 0..99); .say for @ips.sort: { .&naturally };

[15:49] <poincare101> TimToady: That's exciting. Again.

[15:49] <p6eval> rakudo 4bf132: OUTPUT«(timeout)»

[15:51] <sbp> rakudo: my @random-nums = (1..100).pick(*); my @odds-squared <== sort <== map { $_ ** 2 } <== grep { $_ % 2 } <== @random-nums; say ~@odds-squared;

[15:51] <p6eval> rakudo 4bf132: OUTPUT«1 9 25 49 81 121 169 225 289 361 441 529 625 729 841 961 1089 1225 1369 1521 1681 1849 2025 2209 2401 2601 2809 3025 3249 3481 3721 3969 4225 4489 4761 5041 5329 5625 5929 6241 6561 6889 7225 7569 7921 8281 8649 9025 9409 9801␤»

[15:53] <sbp> rakudo: my @d10 = 1 ... 10; my @scores = (@d10 X+ @d10) X+ @d10; say @scores.perl;

[15:53] <p6eval> rakudo 4bf132: OUTPUT«[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 10, 11, 12, 13, 14, 15,

[15:53] <p6eval> ..16, 1…

[15:54] <sbp> rakudo: my @powers-of-two := 1, 2, 4 ... *; say @powers-of-two[^10].perl; 

[15:54] <p6eval> rakudo 4bf132: OUTPUT«(1, 2, 4, 8, 16, 32, 64, 128, 256, 512)␤»

[15:54] <flussence> hm, google doesn't turn up any results for a php grammar...

[15:54] *** rlb3 joined
[15:55] <donri> Guys I quite like ==> but find it weird to have it end with the "my @foo", and to start with an assignment has weird precedence, requiring parenthesis.

[15:55] <donri> Can't we change that?

[15:55] <sbp> rakudo: my @Fibonacci := 0, 1, * + * ... *; say (@Fibonacci ...^ * > 10000).perl; 

[15:55] <p6eval> rakudo 4bf132: OUTPUT«(0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765)␤»

[15:55] <PerlJam> flussence: http://www.icosaedro.it/articoli/php-syntax-ebnf.txt

[15:55] <tadzik> flussence: http://trac.parrot.org/parrot/wiki/Languages

[15:55] <donri> And similarly allow assignment with <==

[15:55] <tadzik> there is a PHP implementation

[15:56] <PerlJam> flussence: http://svn.php.net/repository/php/php-src/trunk/Zend/zend_language_parser.y

[15:56] <PerlJam> flussence: http://code.google.com/p/phpparser/source/browse/grammar/Php.g

[15:56] <PerlJam> flussence: all of those could be used as a starting poitn.

[15:57] <TimToady> donri: I don't follow you at all, but maybe it's because I've only had half a pot of coffee...

[15:57] <sbp> rakudo: my @random-stuff := 1, 3, 4, 7 ... *; say @random-stuff[^10].perl

[15:57] <p6eval> rakudo 4bf132: OUTPUT«Method 'count' not found for invocant of class 'Failure'␤  in <anon> at line 861:CORE.setting␤  in 'List::at_pos' at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1808:CORE.setting␤  in <anon> at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1␤  in main program body at line

[15:57] <p6eval> ..1␤»

[15:57] <sbp> — via jasondavies. is a bug?

[15:57] <flussence> the BNF thing looks like something I can understand... I might try this.

[15:57] <flussence> tadzik: seems like it's dead :(

[15:57] <donri> TimToady: "my @foo = @bar ==> grep stuff" will assign @bar, not the grepped result, i think

[15:58] <sbp> in Soviet Perl6, @bar ==> grep stuff = @foo, my!

[15:58] <TimToady> well, yes, sometimes you have to use parens to do unnatural precedence

[15:58] <donri> but why is it unnatural?

[15:59] <TimToady> there's no way to arrange a precedence table so that never happens

[15:59] <donri> why doesn't assignment have the lowest precedence

[15:59] <TimToady> feeds are "pipes" in a Unixy sense, and have to be very "heavy"

[15:59] <TimToady> they're really intended for inter-thread use

[16:00] <PerlJam> donri: just put my @foo on the other end and be happy  :)

[16:00] <donri> PerlJam: but that reads weird

[16:00] <PerlJam> donri: read it to me.

[16:01] <donri> mainly i'm curious if this behavior is a result of puristic idealism, or because of technical reasons, or just NYI

[16:01] *** jimmy1980 left
[16:02] <donri> or if it's actually useful in ways i haven't understood

[16:03] *** colomon left
[16:08] *** jimmy1980 joined
[16:08] <dalek> specs: b1878bf | larry++ | S03-operators.pod:

[16:08] <dalek> specs: dig out a precedence fossil

[16:08] <dalek> specs: 

[16:08] <dalek> specs: List assignment is looser than list infix, not just looser than comma.

[16:08] <dalek> specs: review: https://github.com/perl6/specs/commit/b1878bfb59

[16:12] <TimToady> feed operators are heavier than assignment operators, in part because they make promises about lack of side effects between threads, and because they're really message queues, which are intended to connect larger chunks of code than assignment typically does

[16:13] *** colomon joined
[16:13] <TimToady> they have larger names to indicate their greater weight too

[16:15] <TimToady> they may also end up getting used for file IO

[16:15] <TimToady> generator() ==>> io("filename") or some such

[16:16] <TimToady> or more generally, allow channel targets a la Go

[16:17] <TimToady> in the limit, some feed operators might be implemented by forking and using a real pipe

[16:18] <TimToady> (or shared memory so you don't have to marshall/demarshall)

[16:18] *** am0c joined
[16:19] <donri> alright thanks :)

[16:20] <TimToady> the prec table is in S03 if you're interested

[16:21] <TimToady> feed operators are the loosest infix there is

[16:22] <TimToady> (but note that rakudo only partially implements feed ops yet; the precedence is according to spec, though, afaik)

[16:22] <PerlJam> I don't know  ...   semi-colons look infix to me  ;)

[16:23] <TimToady> sometimes they are :)

[16:24] <TimToady> in any case, precedence table design is both a science and an art

[16:24] <TimToady> we can give lots of reasons, but the overall reason is "it feels about right"

[16:25] <moritz_> it's often "so that $common_used_construct DWYM"

[16:26] <PerlJam> TimToady: you should write a book called "The Art of Programming Language Design"  ala Knuth  :-)

[16:26] <PerlJam> Just don't take 40 years to finish it.

[16:26] <PerlJam> FSVO finish

[16:26] <moritz_> it'll never be finished, of course :-)

[16:26] <Eevee> isn't that what Perl 6 is

[16:27] <Eevee> "if you want to design a programming language, make this one"

[16:27] <TimToady> well, depends on whether you want your language to be the universal root of all other languages...

[16:27] <PerlJam> Eevee: Except TMTOWTDI and context is important.  (all very perly lessons)

[16:27] <moritz_> there's still much room for designing special purpose language

[16:28] <[particle]> writing a book on designing arabic?

[16:28] <moritz_> "optimized for poetry"

[16:29] <PerlJam> I once asked Jon Bentley if he were going to update "More Programming Pearls" and in his response he indicated that languages like Perl have largely made the whole "little languages" idea obsolete.  He couldn't have been more wrong.

[16:35] <pmurias> moritz_: what about adding ...:from<C#> or use ...:from<perl5> to niecza

[16:35] <pmurias> ?

[16:37] <moritz_> pmurias: works for me

[16:37] <moritz_> pmurias: I would also accept the lisp backend for niecza as a GSOC project, you just have to be very careful to forumlate the benefits for the community

[16:38] <moritz_> whatever you do, remember that the majority of mentors who review your proposal are p5 hackers, so don't assume any domain knowledge

[16:39] *** cdarroch joined
[16:39] *** cdarroch left
[16:39] *** cdarroch joined
[16:39] *** kjeldahl joined
[16:43] *** spq joined
[16:43] *** spq left
[16:44] *** birdwindupbird left
[16:47] <TimToady> once you're done with it, all you have to do is invert the process to come up with a lisp-to-perl6 translator :)

[16:58] *** icwiener left
[16:58] *** rlb3 left
[17:02] *** am0c left
[17:17] *** takadonet joined
[17:17] <takadonet> hey all

[17:18] <pmurias> TimToady: so the plan would be to bait lisp hackers with our pretty syntax and use the lisp-to-perl6 translator to allow them to switch their code over? ;)

[17:19] <PerlJam> lisp people are clearly not swayed by pretty syntax.

[17:20] *** poincare101 left
[17:21] <cxreg> or fearful of punctuation

[17:22] *** mj41 joined
[17:23] *** plobsing joined
[17:23] *** icwiener joined
[17:25] *** ajs left
[17:25] <TimToady> just call it a fancy macro processor and they should eat it up

[17:26] <tadzik> hello

[17:27] <tadzik> my today's idea: one can measure docs coverage by counting how many ^methods have their .WHY

[17:27] <takadonet> tadzik: i like

[17:31] *** fhelmberger_ left
[17:32] *** ymasory left
[17:33] *** masak joined
[17:35] <masak> oh hai zebras!

[17:35] <phenny> masak: 30 Mar 23:00Z <sorear> tell masak STD has issues with nested subs; it generates spurious warnings.  However it DID come up ok.

[17:35] <masak> indeed :)

[17:35] <masak> STD is generally so good that I'm always a little disappointed when it isn't perfect.

[17:36] <tadzik> hey masak 

[17:37] *** kostja_osipov joined
[17:44] <masak> tadzik: hey

[17:44] <masak> kostja_osipov: hi! welcome.

[17:46] <takadonet> how can you determine if a Class is already loaded? 

[17:47] <moritz_> rakudo: use Test; say %*INC.perl

[17:47] <p6eval> rakudo 4bf132: OUTPUT«undef␤»

[17:47] <moritz_> hm

[17:47] <moritz_> I think there's a variable that holds the loaded modules

[17:47] <masak> .perl shouldn't say 'undef'

[17:47] <moritz_> digging through the rakudo source should give an answer

[17:48] <moritz_> masak: right

[17:48] <takadonet> I have a list of objects and I don't want to load all of them since most of the time most will not be used

[17:48] <tadzik> there should be no undef anywhere, should it?

[17:49] <masak> tadzik: correct.

[17:50] <moritz_> rakudo: say keys %Perl6::Module::Loader::Loaded

[17:50] <p6eval> rakudo 4bf132: OUTPUT«Null PMC access in isa()␤  in main program body at line 22:/tmp/Alr0qxiUAC␤»

[17:50] <moritz_> rakudo: say  %Perl6::Module::Loader::Loaded.PARROT

[17:50] <p6eval> rakudo 4bf132: OUTPUT«Null PMC access in find_method('PARROT')␤  in main program body at line 2:/tmp/9m52ufksHj␤»

[17:50] <moritz_> rakudo: say  %Perl6::Module::Loader::LOADED.PARROT

[17:50] <p6eval> rakudo 4bf132: OUTPUT«Null PMC access in find_method('PARROT')␤  in main program body at line 2:/tmp/SS7tvdNnGz␤»

[17:51] <moritz_> rakudo: say  %Perl6::Module::Loader::LOADED

[17:51] <p6eval> rakudo 4bf132: OUTPUT«Null PMC access in type()␤  in main program body at line 22:/tmp/BykO43DIJh␤»

[17:51] <moritz_> it's class Perl6::Module::Loader;

[17:51] <moritz_> our %LOADED;

[17:53] *** plobsing left
[18:02] <dalek> std: a105156 | larry++ | STD.pm6:

[18:02] <dalek> std: don't complain about unused 'our' declarations

[18:02] <dalek> std: review: https://github.com/perl6/std/commit/a105156633

[18:02] *** [sbp] joined
[18:04] *** mberends joined
[18:07] *** Chillance joined
[18:10] <masak> \o/

[18:10] <sjohnson> yo

[18:10] <sjohnson> masak.excited

[18:11] <masak> Bool::True

[18:13] *** MayDaniel joined
[18:14] <sjohnson> heh

[18:16] *** plobsing joined
[18:22] *** MayDaniel left
[18:29] *** tyatpi_ joined
[18:30] *** benabik joined
[18:32] *** nymacro left
[18:33] <masak> pop quiz: which Perl 6 implementation do you think will be the first to implement Bool as an enum?

[18:35] <tadzik> yapsi

[18:38] <colomon> pugs?

[18:38] <tadzik> "will be" :)

[18:40] <TimToady> perl6: my $x = Bool::False; $x++; say $x

[18:40] <p6eval> rakudo 4bf132, niecza v4: OUTPUT«Bool::True␤»

[18:40] <p6eval> ..pugs: OUTPUT«1␤»

[18:40] <sjohnson> *gasp*

[18:40] <sjohnson> perl6: my $x = Bool::False; $x++; $x++; say $x

[18:41] <p6eval> rakudo 4bf132, niecza v4: OUTPUT«Bool::True␤»

[18:41] <p6eval> ..pugs: OUTPUT«2␤»

[18:41] <colomon> pugs--

[18:41] <tadzik> . o O ( pugs: OUTPUT«2» )

[18:41] <tadzik> blah, I failed a joke

[18:41] <tadzik> . o O ( pugs: OUTPUT«1» )

[18:43] *** mj41 left
[18:49] *** hudnix left
[18:50] *** hudnix joined
[19:00] *** ymasory joined
[19:03] *** ronoreck left
[19:05] *** patrickas joined
[19:06] <patrickas> sbp: still here ?

[19:07] <masak> making Bool an enum is challenging because Bool is usually a low-level concept (involved in 'if' and 'while' constructs, for example), while enums build on quite a number of things and is high-level.

[19:08] <patrickas> I am not sure how to best handle the issue you reported with the sequence op in the backlog. Currently in your case the sequence op is "fail"ing with a message. 

[19:08] <patrickas> rakudo: use fatal; my @random-stuff := 1, 3, 4, 7 ... *; say @random-stuff[^10].perl

[19:08] <p6eval> rakudo 4bf132: OUTPUT«Unable to figure out pattern of series␤  in 'get-next-closure' at line 1␤  in <anon> at line 860:CORE.setting␤  in 'List::at_pos' at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1808:CORE.setting␤  in <anon> at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1␤  in main

[19:08] <p6eval> ..program bo…

[19:09] <patrickas> Oh and hello all :-)

[19:10] <tadzik> hello patrickas 

[19:10] <masak> hi patrickas

[19:10] <tadzik> patrickas: you're the Gentoo guy, aren't you?

[19:10] <sbp> patrickas: I am, hello

[19:10] <patrickas> tadzik no I am not! But I sure look like him!

[19:10] * tadzik is confused

[19:11] <sbp> the use fatal message is certainly much more helpful

[19:11] <tadzik> yeah, you're the rakudo maintainer :)

[19:11] <sbp> I wonder if there's any way to make the message sans use fatal more helpful?

[19:11] *** sivoais left
[19:11] <patrickas> actually maybe someone can help .. is that the right way to handle failure inside the sequence op in the first place?

[19:12] <tadzik> patrickas: you might want to take a look at https://github.com/tadzik/gmpup I'm looking for Gentooers' feedback on this one

[19:12] <patrickas> tadzik: I am even more confused! I am not the Gentoo guy nor have I ever been! :-(

[19:13] <tadzik> hrm, weird. Must've mistaken you for somebody else then, nevermind :)

[19:13] <patrickas> tadzik: hence the silly failed joke of me looking like him :-)

[19:13] <tadzik> now I get it :)

[19:14] <tadzik> it's a Patrick too, this guy, I thought that was you :)

[19:14] *** Holy_Cow joined
[19:14] <sbp> patrickas: I don't really understand why the Failure that you get when you consume the dodgy sequence isn't reported, but passed along as an object to try to get .count on

[19:14] <sbp> surely it'd be better for it to choke on the Failure?

[19:15] *** ronoreck joined
[19:15] <sbp> I understand at least that the Failure isn't arising in the first statement because it's a lazy expansion

[19:16] <patrickas> sbp: beats me ... All I did was fail "error message" thinking that was the right thing to do

[19:18] *** tty234 left
[19:18] *** hercynium joined
[19:19] *** rlb3 joined
[19:22] <patrickas> maybe someone will read backlog and help us out. I'll check the log later and if someone suggests a better way, I can implement any changes to the way the seq op fails.

[19:23] <patrickas> bye all o/

[19:23] *** patrickas left
[19:23] <masak> er.

[19:23] <masak> 1, 3, 4, 7 ...

[19:24] <masak> I'm not sure I see the bug.

[19:24] <masak> there's no obvious next number there.

[19:25] <PerlJam> maybe it should have been 1, 2, 4 ,7  ?

[19:25] *** rlb3 left
[19:25] <PerlJam> (or someone could enlighten me what the pattern in the original sequence is)

[19:27] <masak> even 1, 2, 4, 7 wouldn't have an obvious next number, by the narrow definition of "obvious next number" used in the spec.

[19:27] <masak> there are two types of sequence supported natively: arithmetic, and geometric.

[19:28] <masak> 1, 2, 4, 7 is a nice start of some other type of sequence. :)

[19:28] <Su-Shee> 1+3 is 4, 3+4 is 7 so the next number is 11. (4+7)

[19:28] <masak> not without a closure giving that rule.

[19:28] <PerlJam> What?!?  you mean sequences aren't magical?

[19:28] <PerlJam> ;)

[19:29] <masak> yes, just not as magical as you seem to like :)

[19:29] <masak> "Perl 6: the madn^H^H^H^Hmagic only goes so far"

[19:30] <Su-Shee> pft. closure schmosure. if I see the next number with my own eyes.. :) 

[19:31] <masak> it would be nice to see an API in the spec for providing user-defined "sequence guessers", perhaps through clever use of multis or sump'n.

[19:31] <masak> or we could let clever module developers handle that bit, that's OK too.

[19:34] *** pmurias left
[19:36] *** pmurias joined
[19:51] *** Chillance left
[19:52] *** Chillance joined
[19:56] <colomon> Seems to me in the old days, if you couldn't determine that a sequence was arithmetic or geometric, you just made the generating function *.succ (or maybe *.pred if the right-hand-side was less than the left-hand-side).  Seems weird that the spec now says nothing about what is done.

[20:00] <masak> arguably giving a loud error message is a better failure mode than just guessing that a weird enough sequence suddenly proceeds by steps of one, though.

[20:00] <masak> could be argued either way, I guess.

[20:01] *** GinoMan joined
[20:04] <Util> +1 for loud error message

[20:05] *** GinoMan left
[20:05] <PerlJam> what about some standard $*SEQUENCE_GUESSER as a fallback?  (which would carp loudly by default)

[20:05] <PerlJam> or, how is the user to modify the sequence guessing algorithm?  monkey patching?

[20:06] * masak again mumbles about someone providing a fantastic module for this...

[20:06] <masak> Perl 6 is insanely pluggable. we don't need to provide everything out of the box.

[20:06] <masak> the best we can do going forward is focus, not generalize... :)

[20:08] <masak> "The core should be as big as is convenient, but no bigger." :P

[20:08] *** jaldhar left
[20:08] <PerlJam> masak:  so ... how is someone to write such a module?

[20:08] <TimToady> um, all you need is an inner lexical scope defining infix:<...>

[20:09] <masak> and the existing ones need to at least gracefully receive a &nextsame

[20:10] <masak> which I guess they do.

[20:10] <TimToady> there's a reason the current language is defined *lexically*, not by any ISA chain

[20:10] <colomon> isn't that reversed, though?

[20:11] <colomon> if you use nextsame, then you have to figure out whether or not to call the existing infix:<...>

[20:11] <colomon> ideally for what we've been talking about, you want yours called only if the existing one doesn't find a solution.

[20:12] <masak> colomon: I was thinking that the new multi would get first dibs at looking for matches, it being the newest addition. if it doesn't it just lets the sequence through.

[20:12] <masak> colomon: nicely enough, that works even if someone did it in a scope between yours and the setting.

[20:13] <Util> If the native perl6 ... will throw an exception that the lexical ... will catch, then the lexical ... can just pass everything through to the native, and if an exception is raised, either do its magic DWIM or propogate the exception upwards.

[20:14] <colomon> Util: true

[20:15] <masak> Util: I read your message as having a lot of pauses, and had to re-read it. :P

[20:15] *** mj41 joined
[20:15] <masak> Util: why aren't you using our very nice infix:<...> syntax? :)

[20:16] <masak> not that I'm forcing you. but it would make you look a lot less hesitant.

[20:16] *** takadonet left
[20:16] <flussence> .oO( I tend to use markdown's ``s in normal text for that sort of thing )

[20:20] <masak> Pod's C<...> would be fine too.

[20:20] <masak> awww. I feel very stereotypical as a programmer, kvetching about people's lack of use-versus-mention distinction. :/

[20:21] <masak> ok, general task for people: (1) there was a nice email to p6c or p6l some years ago. I don't remember who wrote it, but I remember it had a long list of the S28/S32 functions/methods, and it considered/commented the naming of all the parameters. could you help me locate this message?

[20:22] <masak> (2) it would be very nice to act on the message in some way. maybe simply commit some of the suggested improvements to the spec, or submit RT tickets if they require some discussion?

[20:24] *** envi left
[20:24] *** Mowah left
[20:26] *** MindosCheng left
[20:29] <moritz_> iirc it was a nopaste here on #perl6

[20:29] <moritz_> and it expired when I came back to it later

[20:29] <masak> awww :(

[20:29] <masak> moritz_: who made it?

[20:30] <moritz_> I don't remember

[20:30] *** kostja_osipov1 joined
[20:31] <PerlJam> masak: ask on p6l and maybe whoever it is will come out of the woodwork

[20:31] <masak> kostja_osipov1: Добро пожаловать :)

[20:31] <masak> PerlJam++: good idea.

[20:31] * masak does that

[20:33] *** kostja_osipov left
[20:35] *** MayDaniel joined
[20:35] <masak> mail sent.

[20:39] *** Chillance left
[20:40] *** Chillance joined
[20:40] *** patrickas joined
[20:41] <patrickas> back for a while!

[20:43] <patrickas> masak: I was not questioning if the sequence should try to guess the next number, it was should it complain louder

[20:43] *** noganex_ joined
[20:44] <masak> patrickas: "Unable to figure out pattern of series"

[20:44] <masak> that's the error.

[20:44] <patrickas> here is the context

[20:44] <patrickas> spb reported

[20:44] <patrickas> rakudo: my @random-stuff := 1, 3, 4, 7 ... *; say @random-stuff[^10].perl

[20:45] <p6eval> rakudo 4bf132: OUTPUT«Method 'count' not found for invocant of class 'Failure'␤  in <anon> at line 861:CORE.setting␤  in 'List::at_pos' at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1808:CORE.setting␤  in <anon> at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1␤  in main program body at line

[20:45] <p6eval> ..1␤»

[20:45] <patrickas> I replied with 

[20:45] <patrickas> rakudo: use fatal; my @random-stuff := 1, 3, 4, 7 ... *; say @random-stuff[^10].perl

[20:45] <p6eval> rakudo 4bf132: OUTPUT«Unable to figure out pattern of series␤  in 'get-next-closure' at line 1␤  in <anon> at line 860:CORE.setting␤  in 'List::at_pos' at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1808:CORE.setting␤  in <anon> at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1␤  in main

[20:45] <p6eval> ..program bo…

[20:45] <patrickas> that's what I mean by louder ... unless you "use fatal" you have no idea what went wrong

[20:45] <masak> huh.

[20:46] * masak didn't even know Rakudo had 'use fatal' already

[20:46] <masak> yes, that one should definitely complain louder.

[20:46] * masak submits rakudobug

[20:47] *** noganex left
[20:47] <Tene> masak: Yes, I implemented it. :)

[20:47] <Tene> The exceptions system isn't quite right, but it's a ways down on my list right now. :(

[20:47] <Tene> I wish I had more time. :(

[20:48] <masak> me too :(

[20:48] <masak> hugme: hug me

[20:48] * hugme hugs masak

[20:48] <masak> hugme: hug Tene too

[20:48] * hugme hugs Tene

[20:49] *** tyatpi_ left
[20:49] *** sivoais joined
[20:49] *** stkowski left
[20:50] <masak> oh, and Tene++ for implementing 'use fatal' :)

[20:50] <patrickas> ok then ... that's settled, /me disapears again in a puff of smoke

[20:50] <Tene> masak: "use fatal" == 'my $*FATAL = Bool::True;'

[20:50] *** patrickas left
[20:50] <Tene> similarly 'no fatal'

[20:52] <masak> Tene: I don't care if it was trivial. you implemented it -- kudos :)

[20:52] <Tene> 'k

[20:53] <masak> I wish more people would pick LHF like that. not just in the Perl 6 world, but generally in software.

[20:53] <masak> we need more _why-like people, who see opportunities and paint the world in joyous colors. :)

[20:54] <Tene> I wish I could find sysadmins looking for work.

[20:54] <masak> I've been thinking of color pickers lately, by the way. and how basically all of them suck.

[20:54] <Tene> I think I like your wish a bit better, though.

[20:55] <masak> a color picker shouldn't be based on RGB or even HSL.

[20:55] <masak> it should be based on how the brain thinks about color.

[20:56] <Eevee> Lab?

[20:56] <masak> and the fact that all we have... in 2011... is mostly the boring old dull color pickers, is that people aren't _why-like enough to rise up and throw out crap and replace it with decent stuff.

[20:56] <flussence> Pixel.new(pear => 0.8, beige => 0.2) ?

[20:56] <Eevee> (fwiw HSL is how *I* think about color; RGB and HSV are foreign languages)

[20:57] <masak> HSL is a good step up if all you have is RGB.

[20:57] <masak> but I'm talking about something much more brain-friendly than just the right triplet model.

[20:58] <tadzik> when/where is Tene's use fatal?

[20:58] *** pyrimidine left
[20:58] <Tene> masak: mypaint has a colour picker I haven't seen before in its "colour changer" tool.

[20:58] <masak> take flussence's idea, for example. why can't I write "pear" and get a pear-toned color in my color picker?

[20:59] <masak> why do I have to pick individual colors? why can't I pick them in matching threes or fours? why can't I set whole color themes all in one swoop?

[20:59] <Tene> tadzik: src/Perl6/Actions.pm, Jan 3 2010

[20:59] <masak> there's von Neumann bottleneck involved in color pickers. :)

[20:59] <Tene> tadzik: 4456d81dc9c1551a867d58d22c011c977298e537

[20:59] <masak> hugme: hug git

[20:59] * hugme hugs git

[21:00] <tadzik> oh, I wasn't a Perl6er by then :)

[21:01] <Tene> Haha, looking at my commit history in rakudo, it's mostly silly LHF.  :)

[21:01] <masak> same here.

[21:01] <tadzik> same here :)

[21:01] <benabik> People taking care of LHF is how stuff gets done.

[21:02] <masak> many small brooks...

[21:02] <benabik> (You need a few people on ladders, but there's an awful lot of fruit at the bottom.)

[21:02] <flussence> masak, you might like this then: http://colorschemedesigner.com/

[21:03] <masak> flussence: yess!

[21:03] <masak> flussence: but give me that in Gimp, in Inkscape, in OpenOffice. not just as a webapp. this is how it should look, always.

[21:04] <masak> but yes, that's exactly what I have in mind when I think "better".

[21:04] <Tene> masak: One of the other color pickers in mypaint has it.

[21:04] <Tene> They've got like... five?

[21:04] <flussence> there's also a Color::Scheme on CPAN, which afaik is exactly this thing without the GUI part

[21:05] * masak falls in love with http://colorschemedesigner.com/

[21:06] <masak> I should pick up Gimp or Inkscape and try to patch something like this in. see if they accept it.

[21:07] <Tene> http://mypaint.intilinux.com/ -- open-source digital painting program; I wish I had known about it back when I would have actually used it.

[21:07] <flussence> I think Gimp has plugin-able colour widgets, even

[21:08] *** Rotwang joined
[21:09] *** noganex_ is now known as noganex

[21:21] *** REPLeffect left
[21:22] *** MayDaniel left
[21:29] *** ymasory left
[21:32] *** kjeldahl left
[21:36] *** hatseflats left
[21:36] *** hatseflats joined
[21:42] *** Rotwang left
[21:43] *** REPLeffect joined
[21:45] <masak> 'night, #perl6.

[21:47] *** masak left
[21:47] *** araujo joined
[21:48] *** Rotwang joined
[21:52] *** mj41 left
[21:54] *** plainhao left
[21:55] <TimToady> um, implementing 'use fatal' with a dynamic variable would be incorrect, since pragmas are supposed to be lexically scoped...

[21:56] <Tene> TimToady: The commit message clearly says that it's an incorrect implementation.

[21:56] <TimToady> nod

[21:56] *** REPLeffect left
[21:56] <TimToady> just checking...

[21:58] *** plobsing left
[22:01] *** donaldh joined
[22:02] *** Holy_Cow left
[22:03] *** ymasory joined
[22:05] *** bacek left
[22:05] *** Rotwang left
[22:11] *** Rotwang joined
[22:12] *** eternaleye joined
[22:14] *** ymasory left
[22:14] *** ymasory joined
[22:16] *** dorlamm joined
[22:20] *** plobsing joined
[22:25] *** Rotwang left
[22:29] <sjohnson> la la la

[22:30] *** Rotwang joined
[22:35] *** kaare_ left
[22:39] *** icwiener_ joined
[22:41] *** icwiener left
[22:46] *** kostja_osipov1 left
[23:01] *** whiteknight joined
[23:04] *** dorlamm left
[23:05] *** pmurias left
[23:05] *** hercynium left
[23:05] *** donaldh left
[23:15] *** chitragupt left
[23:17] *** Rotwang left
[23:18] *** chitragupt joined
[23:18] *** Rotwang joined
[23:30] *** Rotwang left
[23:35] *** Rotwang joined
[23:38] *** icwiener_ left
[23:52] *** chitragupt left
[23:58] *** cosimo joined
