[00:00] *** protorom joined
[00:04] *** protorom left
[00:05] *** ddima left
[00:06] *** Trashlord joined
[00:06] *** ddima joined
[00:08] *** varna left
[00:09] *** varna joined
[00:22] *** shi left
[00:25] *** stifynsemons left
[00:26] *** justatheory joined
[00:36] *** nadim__ left
[00:44] *** bacek left
[00:56] *** protorom_ joined
[00:56] *** protorom_ left
[01:07] <dalek> niecza: ba728f8 | sorear++ | / (2 files):

[01:07] <dalek> niecza: Combine ehspan and span into a single neater primitive

[01:07] <dalek> niecza: review: https://github.com/sorear/niecza/commit/ba728f85b5

[01:07] <dalek> niecza: 40c432a | sorear++ | / (3 files):

[01:07] <dalek> niecza: &return and &take take multiple arguments

[01:07] <dalek> niecza: review: https://github.com/sorear/niecza/commit/40c432ab0a

[01:07] <dalek> niecza: 1e98895 | sorear++ | src/ (2 files):

[01:07] <dalek> niecza: &return et al are inlinable primitives

[01:07] <dalek> niecza: review: https://github.com/sorear/niecza/commit/1e98895169

[01:07] *** qiyong joined
[01:18] *** Chillance left
[01:38] *** cosimo joined
[01:40] *** Vlavv_ left
[01:42] *** Vlavv joined
[01:43] *** Eevee left
[01:48] *** Eevee joined
[01:50] *** obra left
[01:56] <[Coke]> if you have something that segfaults with an optimized parrot and not without, please open a trac ticket so we can fixit.

[01:57] *** charsbr__ left
[01:58] *** charsbr__ joined
[02:01] *** noganex_ joined
[02:04] *** noganex left
[02:18] *** lakshman left
[02:20] <colomon> phenny: tell masak I apologize profusely for the inscrutability of my second p4 submission.  Basically I spent all my time (definitely more than I could really afford to spend on the contest) trying to get it to work better, and no time at all trying to polish it.  I do believe it will play "perfectly" for games up to 50 or 60 stones, after which point it will play pretty well against a normal human, but get toasted by a perfect versio

[02:20] <colomon> the algorithm.

[02:20] <phenny> colomon: I'll pass that on when masak is around.

[02:37] *** whiteknight left
[02:54] *** stifynsemons joined
[03:02] *** lateau joined
[03:05] *** agentzh joined
[03:15] *** Trashlord left
[03:17] *** fake joined
[03:18] *** fake is now known as Guest39810

[03:21] *** Guest39810 left
[03:22] *** stifynsemons left
[03:29] <diakopter> colomon: I saw "...but get toasted by a perfect versio"

[03:32] <arnsholt> Yeah, me too

[03:32] <arnsholt> Looks like your client and the server have different opinions fo the maximum line length =)

[03:45] *** [particle]1 joined
[03:48] *** [particle] left
[03:50] <dalek> niecza: dc84a47 | sorear++ | / (2 files):

[03:50] <dalek> niecza: Optimize intrablock control ops to goto

[03:50] <dalek> niecza: review: https://github.com/sorear/niecza/commit/dc84a47f09

[03:50] *** Bzek_ joined
[03:52] <sorear> I need to come up with some more priority items for the feb 28 release :)

[03:53] *** Bzek left
[03:55] *** satyavvd joined
[03:57] *** kanishka joined
[04:21] *** stifynsemons joined
[04:27] *** Su-Shee left
[04:28] *** Su-Shee joined
[04:30] *** rdesfo joined
[04:31] <rdesfo> has something changed in perl6 since "Perl 6 now" came out.  the book says the output for print 037 should be 0c37 in perl6 and it is 37.

[04:49] <sorear> I've never heard of "Perl 6 now"

[04:49] <sorear> the language is still in heavy development

[04:50] <sorear> std: say 037

[04:50] <p6eval> std 625303c: OUTPUT«Potential difficulties:␤  Leading 0 does not indicate octal in Perl 6; please use 0o37 if you mean that at /tmp/N44qRzl3JL line 1:␤------> say 037⏏<EOL>␤ok 00:01 118m␤»

[04:52] <rdesfo> thanks

[04:53] <rdesfo> The book also says it would print out 31 when "print 0c037" is executed

[04:53] <sorear> rakudo: print 0c037

[04:53] <p6eval> rakudo : OUTPUT«===SORRY!===␤Confused at line 22, near "print 0c03"␤»

[04:54] <sorear> I imagine that's just a printing problem and it should say 0o037

[04:54] <sorear> ... implausible but I can't think of a better explanation

[04:54] <sorear> anyone else know?

[04:57] *** Sargun joined
[04:58] <Sargun> What's the status on Perl6/parrot

[05:10] <sorear> Status?  It's the most complete implementation!

[05:11] <sorear> oh, hmm, I guess you meant "Perl 6 and Parrot"

[05:11] <sorear> I thought "Perl 6 implemented on Parrot" at first...

[05:11] <sorear> Perl 6 is fine.  Can't speak for Parrot personally.

[05:12] <rdesfo> http://rakudo.org/announce/rakudo-star/2011.01

[05:12] <rdesfo> here is the lastes news.  another update was just released for rakudo star

[05:17] * sorear wonders why there have been some many new comers the past 1-2 days

[05:23] *** cognominal left
[05:25] *** molaf joined
[05:28] *** rdesfo left
[05:30] *** lakshman joined
[05:36] *** molaf left
[05:39] *** justatheory left
[05:41] *** justatheory joined
[05:45] *** ddima left
[05:45] *** ddima joined
[05:47] *** stifynsemons left
[05:55] *** envi joined
[05:56] <sorear> Sargun: any specific questions?

[05:57] <Sargun> sorear, why hasn't Perl6 succeeded perl5?

[05:57] <Sargun> sorear, people making fun of Perl and Parrot on Reddit H-N

[05:58] <sorear> you need a thick skin to be a p6er

[05:59] <sorear> it hasn't succeededed perl5 because perl5 was revived

[05:59] <sorear> perl6 was started at a point in time when perl5 looked dead

[05:59] <sorear> this was around 5.6

[05:59] <sorear> now, we have two active branches of Perl

[06:00] <sorear> you might think of them as forks, but they aren't, really, they're much closer than that

[06:00] <sorear> a lot of ideas have started in one and spread to the other

[06:01] <Sargun> So, how do you kill a perl? stake to the heart, silver bullet?

[06:01] <Sargun> sorear, Like Py 3x and 2x

[06:14] *** mberends left
[06:15] *** arlinius left
[06:16] *** arlinius joined
[06:18] *** cjk101010 joined
[06:20] *** sftp left
[06:21] *** Trashlord joined
[06:27] *** mberends joined
[06:34] *** drbean left
[06:37] *** kaare_ joined
[06:42] *** kaare_ left
[06:43] *** mberends left
[06:44] *** nadim__ joined
[06:47] *** kaare_ joined
[06:48] *** dual left
[06:59] *** wtw joined
[07:01] *** Alias joined
[07:08] *** noganex_ is now known as noganex

[07:19] *** kchevy joined
[07:19] <kchevy> hey ppls

[07:20] *** kchevy left
[07:27] * sorear -> sleep

[07:31] *** clkao left
[07:45] *** lakshman left
[07:56] *** shi joined
[07:57] *** risou joined
[08:08] *** perimosocordiae joined
[08:08] *** ymasory left
[08:10] *** ymasory joined
[08:17] *** aesop left
[08:20] *** daxim joined
[08:20] *** justatheory left
[08:34] *** cotto left
[08:39] *** perimosocordiae left
[08:42] *** Vlavv left
[08:45] *** araujo left
[08:46] *** nymacro joined
[08:47] *** araujo joined
[08:48] *** aesop joined
[08:54] *** risou left
[08:56] *** Vlavv joined
[08:56] *** bubo joined
[09:02] *** dip joined
[09:02] *** dip is now known as Guest58675

[09:07] *** coldhead left
[09:11] *** ankitsingh joined
[09:12] *** coldhead joined
[09:13] *** risou joined
[09:13] *** cibs left
[09:14] *** kanishka left
[09:23] *** tty234 left
[09:23] *** Mowah joined
[09:24] *** tty234 joined
[09:24] *** lolo_91 joined
[09:26] *** dakkar joined
[09:29] *** kanishka joined
[09:29] <lolo_91> Howdy world! o/

[09:29] *** Mowah left
[09:30] *** Sargun left
[09:30] <moritz_> \o

[09:30] *** mberends joined
[09:30] <jnthn> o/, moritz_ 

[09:31] *** tzhs joined
[09:32] * moritz_ had a very tasty mango for breakfast

[09:32] <moritz_> well, actually half of it. $wife got the other half :-)

[09:32] *** Sargun joined
[09:32] *** Mowah joined
[09:33] <jnthn> moritz_: Healthy! I just eated a chokladbullar... :)

[09:34] <mberends> :-) IRC at $work...

[09:34] *** Guest58675 left
[09:34] <moritz_> looks tasty too :-)

[09:34] <moritz_> good morning mberends 

[09:35] <mberends> hi moritz_, I hope you're getting a bit of regular sleep

[09:35] <jnthn> mberen! ! \o/

[09:35] <moritz_> mberends: if by "regular" you mean "a few times a few hours in a row each night", then yes, I do :-)

[09:35] <jdhore> moritz_, mind a quick, slightly off-topic PM?

[09:36] <jnthn> er, where'd the ds go.... :)

[09:36] <moritz_> jdhore: go right ahead

[09:36] *** lolo_91 left
[09:36] <mberends> jnthn: huffman eated them

[09:37] <jnthn> Guess he's gotta have breakfast too :)

[09:40] <jnthn> Aww.

[09:40] * jnthn glances the backscroll and realizes he missed saying hi to lolo

[09:48] <moritz_> http://www.perlmonks.org/?node_id=887946 # curious question (not Perl 6 though)

[09:53] *** risou_ joined
[09:53] *** risou left
[10:05] *** clkao joined
[10:05] <dalek> nqp-cl-parser: 09a6725 | moritz++ | / (2 files):

[10:05] <dalek> nqp-cl-parser: the code now lives in the perl6/nqp repo

[10:05] <dalek> nqp-cl-parser: review: https://github.com/moritz/nqp-cl-parser/commit/09a67254bf

[10:06] <dalek> mu: bb031ec | moritz++ | misc/dalek-conf.json:

[10:06] <dalek> mu: stop tp track nqp-cl-parser, it is now incorporated in nqp

[10:06] <dalek> mu: review: https://github.com/perl6/mu/commit/bb031ec4e8

[10:13] <jnthn> moritz_: If you're in that file, any chance you can add the nom branch of Rakudo to the tracking?

[10:13] <jnthn> If you have a moment free to do it, anyway... :)

[10:13] * jnthn keeps forgetting to and is at $dayjob atm.

[10:13] <moritz_> jnthn: sure, cando

[10:14] <dalek> mu: 169a365 | moritz++ | misc/dalek-conf.json:

[10:14] <dalek> mu: nom nom. Track rakudo's nom branch.

[10:14] <dalek> mu: review: https://github.com/perl6/mu/commit/169a365a48

[10:15] * jdhore took off his $dayjob today to spend V-day with the wife :D

[10:16] <dalek> nqp: 5c5b494 | moritz++ | src/HLL/Compiler.pm:

[10:16] <dalek> nqp: rewrite parts of command_line in nqp

[10:16] <dalek> nqp: review: https://github.com/perl6/nqp/commit/5c5b4942ca

[10:16] <dalek> nqp: 2255560 | bacek++ | src/ops/nqp.ops:

[10:16] <dalek> nqp: Fix write barrier in updating method_cache

[10:16] <dalek> nqp: review: https://github.com/perl6/nqp/commit/22555607c5

[10:16] <dalek> nqp: f6b7f76 | moritz++ | t/p6regex/01-regex.t:

[10:16] <dalek> nqp: make p6regex tests runnable again

[10:16] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f6b7f76f7c

[10:17] <dalek> mu: 10de494 | moritz++ | misc/dalek-conf.json:

[10:17] <dalek> mu: [dalek] nqp is now pushed, so remove from the config

[10:17] <dalek> mu: review: https://github.com/perl6/mu/commit/10de4941f7

[10:17] <jnthn> moritz_: Thanks!

[10:17] <moritz_> sorry for the dupe report, that was the "Test Hook" button on github

[10:20] *** kanishka left
[10:21] *** kanishka joined
[10:25] <bubo> part

[10:25] *** bubo left
[10:26] <moritz_> this part doesn't seem to have worked :-)

[10:41] <qiyong> with perl6 do i have to use my vars ? like use strict implied?

[10:43] <moritz_> yes

[10:43] <moritz_> except in -e oneliners, where it's off by default (but I don't think any compiler implements "no strict" mode yet)

[10:44] <moritz_> rakudo: $x

[10:44] <p6eval> rakudo : OUTPUT«===SORRY!===␤Symbol '$x' not predeclared in <anonymous> (/tmp/VjIrbH8XcQ:22)␤»

[10:46] *** Tedd1 joined
[10:47] *** qiyong left
[10:51] *** qiyong joined
[10:52] *** risou_ left
[10:54] *** masak joined
[10:54] <masak> good almost-noon, #perl6

[10:54] <phenny> masak: 02:20Z <colomon> tell masak I apologize profusely for the inscrutability of my second p4 submission.  Basically I spent all my time (definitely more than I could really afford to spend on the contest) trying to get it to work better, and no time at all trying to polish it.  I do believe it will play "perfectly" for games up to 50 or 60 stones, after which point it will play pretty well against a normal human, but get toasted by a perfect versio

[10:54] <masak> no need to apologize, colomon :)

[10:55] <masak> there's a nice spread to the solutions, and none of them are perfect.

[10:55] <masak> the solution colomon-2 just happens to have a most interesting mix of perfections and imperfections :P

[10:56] <jnthn> lawltismasak

[11:00] <moritz_> straw poll: assume a programming language that has two functions, Sum and Total. Would you know what they did, or at least how they differed?

[11:00] <moritz_> background: they both appear in a popular computer algebra system

[11:01] <jnthn> Well, to sum some things is to add them up. To total some things is to destroy them ("I totalled my car!"). ;)

[11:01] <moritz_> :-)

[11:01] *** coldhead left
[11:01] <jnthn> But no, if I saw both I'd have to go read the docs. :)

[11:02] <jnthn> (That is, the difference wouldn't be obvious to me from the names.)

[11:02] <moritz_> thanks

[11:03] *** bacek joined
[11:04] <masak> moritz_: no, I don't think I can guess how they differ.

[11:05] <moritz_> turns out that in Mathematica, Total is like [+] in Perl 6

[11:05] <moritz_> whereas Sum has a built-in iterator

[11:05] *** risou joined
[11:06] <moritz_> so Sum is more like  [+] @array[0, 1 ... *] or so

[11:06] <moritz_> confused the hell out of me at first

[11:11] <masak> feels a bit silly to have both Sum and Total, no matter what the difference is... :)

[11:12] <moritz_> well, Sum can also calculate closed forms of algebraic sums

[11:12] <moritz_> Sum[1/x^2, {x, 1, Infinity}]

[11:12] <moritz_> -> pi^2/6

[11:13] <moritz_> so there's a need for it... it's just the naming that's silly

[11:13] <masak> *nod*

[11:14] <moritz_> rakudo: say  ([+] (1..*).map(1 / * ** 2).[^10]) - pi * pi / 6

[11:14] <p6eval> rakudo : OUTPUT«-0.0951663356816856␤»

[11:14] <moritz_> rakudo: say  ([+] (1..*).map(1 / * ** 2).[^20]) - pi * pi / 6

[11:14] <p6eval> rakudo : OUTPUT«-0.0487708229352031␤»

[11:14] <moritz_> rakudo: say  ([+] (1..*).map(1 / * ** 2).[^50]) - pi * pi / 6

[11:14] <p6eval> rakudo : OUTPUT«-0.0198013332266973␤»

[11:15] <moritz_> rakudo: say  ([+] (1..*).map(1 / * ** 2).[^500]) - pi * pi / 6

[11:15] <p6eval> rakudo : OUTPUT«-0.0019980013333325␤»

[11:15] <moritz_> identity experimentally verified :-)

[11:15] <moritz_> rakudo: say  ([+] (1..*).map(1 / * ** 2).[^5000]) - pi * pi / 6

[11:15] <p6eval> rakudo : OUTPUT«(timeout)»

[11:15] <moritz_> rakudo: say  ([+] (1..*).map(1 / * ** 2).[^1000]) - pi * pi / 6

[11:15] <p6eval> rakudo : OUTPUT«-0.000999500166664946␤»

[11:16] <moritz_> rakudo: say  ([+] (1..1000).map(1 / * ** 2)) - pi * pi / 6

[11:16] <p6eval> rakudo : OUTPUT«-0.000999500166664946␤»

[11:17] <moritz_> niecza: say  ([+] (1..1000).map(1 / * ** 2)) - pi * pi / 6

[11:17] <p6eval> niecza v2-57-gdc84a47: OUTPUT«(timeout)»

[11:18] <moritz_> niecza: say  ([+] (1..100).map(1 / * ** 2)) - pi * pi / 6

[11:18] <p6eval> niecza v2-57-gdc84a47: OUTPUT«===SORRY!===␤␤Confused at /tmp/42itN1kEAc line 1:␤------>   ([+] (1..100).map(1 / * ** 2)) - pi * ⏏pi / 6␤␤Undeclared routine:␤      'pi' used at line Any()1␤␤Parse failed␤␤»

[11:18] *** agentzh left
[11:18] <moritz_> niecza: say  ([+] (1..100).map(1 / * ** 2)) - 3.1415926**2 / 6

[11:18] <p6eval> niecza v2-57-gdc84a47: OUTPUT«===SORRY!===␤␤Action method dec_number not yet implemented at /tmp/zV9uyXOoI7 line 1:␤------> +] (1..100).map(1 / * ** 2)) - 3.1415926⏏**2 / 6␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/SAFE.setting line

[11:18] <p6eval> ..377 (SAFE die …

[11:19] <moritz_> niecza: say  ([+] (1..100).map(1 / * ** 2)) - 3.1415926e0**2 / 6

[11:19] <p6eval> niecza v2-57-gdc84a47: OUTPUT«===SORRY!===␤␤Action method escale not yet implemented at /tmp/9_qaTrkYId line 1:␤------>  (1..100).map(1 / * ** 2)) - 3.1415926e0⏏**2 / 6␤␤Action method dec_number not yet implemented at /tmp/9_qaTrkYId line 1:␤------> 

[11:19] <p6eval> ..(1..100).map(1 / * …

[11:19] <moritz_> eek.

[11:19] <moritz_> no wonder there's no pi term :-)

[11:24] *** awoodland joined
[11:31] * masak found a bug in &slurp

[11:31] <masak> it duplicates empty lines.

[11:31] <moritz_> huh.

[11:31] <masak> no, wait.

[11:31] <masak> it's .lines

[11:32] <masak> good, then it's testable here.

[11:32] <masak> rakudo: .say for "A\n\nB".lines

[11:32] <p6eval> rakudo : OUTPUT«A␤␤␤B␤»

[11:32] * masak submits rakudobug

[11:34] *** mikehh left
[11:41] *** satyavvd left
[11:43] *** masak` joined
[11:46] *** masak left
[11:46] *** mikehh joined
[11:48] *** masak` is now known as masak

[11:55] *** risou left
[12:00] *** risou joined
[12:02] *** ankitsingh left
[12:03] *** drbean joined
[12:05] *** kanishka left
[12:08] *** kanishka joined
[12:41] *** tzhs left
[12:42] *** tzhs joined
[12:46] <masak> yes! colomon's second algorithm finally made a tiny mistake! :P

[12:49] *** awoodland left
[12:51] <moritz_> :-)

[12:52] <moritz_> masak: did you take a perfectly playing solution, and let the two play against each other?

[12:52] <masak> no, that would have been an even better idea.

[12:52] <masak> I just had colomon-2 play against itself until it did something unexpected.

[12:53] *** takadonet joined
[12:53] <takadonet> morning all

[12:54] <masak> takadonet: \o

[12:54] *** risou_ joined
[12:54] <takadonet> masak: how are u sir?

[12:55] *** risou left
[12:55] <masak> takadonet: sir, I have a bit of a sore throat, but I'm otherwise of a good mood and fine temperament.

[12:55] <masak> takadonet: what about u sir?

[12:56] *** stifynsemons joined
[12:57] <takadonet> masak: busy as hell at work and got a good chuck of Text::Diff working 

[12:57] *** MayDaniel joined
[12:57] *** obra joined
[12:57] *** drbean left
[12:58] <masak> it's funny, I never hear people say "they give me too little to do at work, I find myself having too much free time".

[12:58] <moritz_> rakudo: say "a\nb\n\nc".lines.perl

[12:58] <p6eval> rakudo : OUTPUT«("a", "b", "", "", "c")␤»

[12:58] *** stifynsemons left
[12:59] <masak> odd, no?

[12:59] <moritz_> masak: but that's just because people won't want talk about having too little work, fearing they might get too much

[12:59] <moritz_> s/won/don/

[12:59] <takadonet> I actually do hear that sometime just not in our group

[13:00] <moritz_> there were times where I had some side jobs where I had too little work, and was terribly bored

[13:03] *** kaydsoft joined
[13:11] *** mtk joined
[13:12] *** shi left
[13:12] *** ab5tract joined
[13:13] *** plainhao joined
[13:17] *** tzhs left
[13:19] *** _jaldhar_ left
[13:20] *** _jaldhar_ joined
[13:26] *** orafu joined
[13:27] *** shi joined
[13:28] *** MayDaniel left
[13:32] *** orafu left
[13:44] *** REPLeffect left
[13:44] *** REPLeffect joined
[13:54] *** risou joined
[13:55] *** risou_ left
[14:05] *** sftp joined
[14:08] *** awoodland joined
[14:09] *** satyavvd joined
[14:10] *** cognominal joined
[14:10] <colomon> masak: how far did you have to go before colomon-2 made a mistake?

[14:13] * colomon has no illusions colomon-2 is perfect -- far from it! -- but never systematically tested it to see where it loses its grip.

[14:14] *** cognominal left
[14:16] *** felliott left
[14:17] <masak> colomon: 56 stones.

[14:18] <masak> colomon: colomon-2 against itself with 56 stones => player 1 wins, but it's a guaranteed win for player 2 => player 2 made a mistake somewhere.

[14:18] <masak> I'm happy I found *something*, because my blog post takes the angle that everyone failed in some sense. :)

[14:18] *** cognominal joined
[14:18] <masak> I'm not too bothered by having had to look hard for a crack, that only speaks to colomon-2's advantage.

[14:20] *** cognominal left
[14:20] <colomon> so my estimate that it played perfectly to somewhere between 50 and 60 was pretty accurate.  :)

[14:20] <masak> yeah :)

[14:20] <masak> I plan to delve a bit more into the workings of colomon-2, and then I'll publish the p4 post.

[14:20] <masak> probably sometime late tonight.

[14:24] *** plobsing left
[14:29] *** Bzek_ left
[14:31] *** Bzek joined
[14:39] *** kaare_ left
[14:45] *** [particle]1 is now known as [particle]

[14:47] <colomon> masak: it just occurs to me that an interesting question about the 56 case is at what point my code knew it had a winning situation.

[14:47] *** stifynsemons joined
[14:51] <masak> it's more about player 2 bottoming out in a win before player 1 does, I think.

[14:51] <masak> er, sorry. other way around.

[14:52] <colomon> masak: but at some point along the line my code should have had a good enough grasp of things to know whether it had a sure thing or not.

[14:53] *** PacoLinux joined
[14:53] <colomon> It would be interesting to know at what point that happened.  (for me, anyway.)

[14:53] <colomon> (interesting to me, I mean.)

[14:53] *** cjk101010 left
[14:54] *** risou_ joined
[14:55] <moritz_> colomon: arnsholt posted his perfectly playing solution in the backlog at some point. You can let it play against yours (and swap the players for each length too), and see where the non-optimal behavior starts

[14:55] *** risou__ joined
[14:55] <masak> colomon: what moritz_ said. also feel free to make use of my harness at http://www.flickr.com/photos/r-butler/4766152181/

[14:55] <masak> er, mispaste :)

[14:56] <masak> https://gist.github.com/824207

[14:56] <colomon> Actually, my code has a built-in mode for playing against itself.  :)

[14:56] <daxim> always you with your fruit pr0nz.

[14:56] <masak> daxim: dang, found out again!

[14:56] <masak> daxim: (I'm building a presentation for $work. this one is for the red-green-refactor slide) :)

[14:57] *** risou left
[14:57] <arnsholt> As an aside, I'm very jealous of masak's slide-building skills

[14:58] <masak> ♥

[14:58] *** stifynsemons left
[14:59] <masak> that's a refreshing contrast from constantly having to live with my perfectionist side. :)

[14:59] *** risou_ left
[15:00] *** satyavvd left
[15:00] <arnsholt> I was very impressed with the slides you had for your Copenhagen presentation (Prince of Parsea, IIRC). They complemented the talk very well

[15:03] <masak> thanks. that's from the minimalist (Takahashi?) framework I built. it's called Failure: https://github.com/masak/failure

[15:04] *** kanishka left
[15:04] <masak> I also have another, newer framework which I've used once and got good feedback on. I call it "Infinite Canvas", and it can be seen in https://github.com/masak/osdc-fr-2010-hardcore-bug-reporting/downloads

[15:05] <jnthn> <- just uses Powerpoint O.O

[15:05] <masak> (my primary weakness is that I write my own frameworks) :)

[15:05] *** cotto joined
[15:06] <moritz_> masak: your primary weakness is that existing frameworks just don't work good enough for you :-)

[15:06] <masak> I *hope* that's the reason. :)

[15:08] <masak> but yes. I have a bit of an aversion to the normal way of doing presentations, and I like the control that a home-grown framework gives me.

[15:08] * colomon has never made a slide presentation...

[15:08] <masak> some of the best presenters I know do very simple slides, and have each of them up for a second or two. I like that.

[15:10] <moritz_> that style is nearly never found in the scientific community

[15:10] <daxim> "I have no powerpoint."

[15:10] <moritz_> "I have power, but not point"

[15:11] *** tzhs joined
[15:12] <daxim> http://presentationzen.blogs.com/photos/uncategorized/ppt_4.jpg

[15:13] * jnthn did give up on bullet points a while ago and doesn't miss them at all :)

[15:13] * masak likes http://norvig.com/Gettysburg/

[15:13] <jnthn> Only used the Takahashi style for lightning talks really though.

[15:14] <arnsholt> daxim: What do the kana say?

[15:14] <daxim> see above.

[15:14] <arnsholt> Ah, right =)

[15:15] <daxim> I first encountered takahashi method in bochum at german perl workshop 2006, presented by audreyt

[15:16] <daxim> that was quite an eye-opener

[15:16] <masak> yes, I also discovered it via au++

[15:16] <masak> also in 2006 :)

[15:19] <moritz_> perl6: say 1/2

[15:19] *** kaare_ joined
[15:19] <p6eval> pugs, rakudo , niecza v2-57-gdc84a47: OUTPUT«0.5␤»

[15:19] <moritz_> niecza: say 0.5

[15:19] <p6eval> niecza v2-57-gdc84a47: OUTPUT«===SORRY!===␤␤Action method dec_number not yet implemented at /tmp/sZsqDdZgMO line 1 (EOF):␤------> say 0.5⏏<EOL>␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/SAFE.setting line 377 (SAFE die @ 2)␤  at

[15:19] <p6eval> ../home/p6eval/niecza…

[15:20] *** pyrimidine joined
[15:22] *** nymacro left
[15:23] <masak> pyrimidine: greetz. there has been general interest in bioperl6 lately.

[15:24] <daxim> openbio hackathon in vienna thus july.

[15:24] *** MayDaniel joined
[15:26] <takadonet> masak: u talking about ryan__ ?

[15:27] <pyrimidine> masak: good to hear!  If anyone wants to be added to the repo let me know.   takadonet can also add (I think)

[15:27] *** am0c joined
[15:27] *** SkaRiko joined
[15:27] <SkaRiko> 9,9_0,0_4,4_1,1.0,12 Un saluto a tutti i presenti da SkaRiko 1,1..9􏿽x950􏿽x954􏿽x959C0I4A12O9􏿽x950􏿽x954􏿽x95

[15:27] <SkaRiko> sera

[15:27] <takadonet> pyrimidine: i do not think so

[15:28] *** kanishka joined
[15:30] *** kanishka left
[15:30] *** masak left
[15:32] *** masak joined
[15:33] <pyrimidine> takadonet: looks like we would have to move it into an organization to add you as an admin

[15:33] <takadonet> pyrimidine: no hurry 

[15:36] *** plobsing joined
[15:37] <pyrimidine> might be interesting to see how well rakudo deals with very large data like SNPs, next-gen data, etc.  Speed is the major bottleneck there unfortunately

[15:38] <pyrimidine> but one could possibly use zavolaj to interface to various tools (samtools) for those purposes

[15:38] <moritz_> I guess once 6model lands, packed arrays will help to reduce the memory footprint a lot

[15:39] *** masak left
[15:39] <pyrimidine> moritz_: timeline is supposed to be by next R*, correct?

[15:39] *** mberends left
[15:40] <moritz_> pyrimidine: April, yes. +- a month or so :-)

[15:40] *** [particle]1 joined
[15:40] *** SkaRiko left
[15:40] <sorear> good * #perl6

[15:41] <pyrimidine> definitely worth looking into.  Very likely can't go to BOSC this year at ISMB (Vienna would have been nice)

[15:41] <moritz_> oh hai sorear 

[15:41] <pyrimidine> sorear: o/

[15:41] *** [particle] left
[15:43] *** jimbob joined
[15:43] *** kjeldahl joined
[15:46] *** masak joined
[15:48] *** wtw left
[15:50] <jnthn> Note that packed arrays probably won't be in the initial chunk of nom work, but they can follow on very closely behind it.

[15:50] * jnthn will try and keep the branch scope as small as he sanely can

[15:50] *** masak left
[15:51] *** masak joined
[15:51] *** masak left
[15:55] *** awoodland left
[15:56] *** awoodland joined
[15:58] *** pigdude joined
[15:59] <jnthn> decommute &

[15:59] *** stifynsemons joined
[16:01] *** stifynsemons left
[16:01] *** qiyong left
[16:02] *** plobsing left
[16:03] *** cibs joined
[16:04] *** justatheory joined
[16:14] *** plobsing joined
[16:15] *** Patterner left
[16:17] *** Psyche^ joined
[16:17] *** Psyche^ is now known as Patterner

[16:19] *** tzhs left
[16:23] *** alester joined
[16:23] *** cjk101010 joined
[16:24] <moritz_> http://python3wos.appspot.com/

[16:26] *** gdey joined
[16:28] *** kaydsoft_ joined
[16:28] *** kaydsoft left
[16:31] *** cogno joined
[16:32] <dalek> roast: 140dea8 | moritz++ | S32-str/lines.t:

[16:32] <dalek> roast: first Str.lines tests

[16:32] <dalek> roast: review: https://github.com/perl6/roast/commit/140dea874b

[16:32] *** felliott joined
[16:32] *** kaydsoft_ left
[16:34] <moritz_> rakudo: say "a\n\nb".comb(rx/ ^^ \N*)>>.Str.perl

[16:34] <p6eval> rakudo : OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 22␤»

[16:34] <moritz_> rakudo: say "a\n\nb".comb(rx/ ^^ \N*/)>>.Str.perl

[16:34] <p6eval> rakudo : OUTPUT«("a", "", "", "b")␤»

[16:34] *** daxim left
[16:34] *** kaydsoft joined
[16:35] <moritz_> rakudo: say "a\n\nb".comb(rx/ ^^ \N*/)>>.from.perl

[16:35] <p6eval> rakudo : OUTPUT«Method 'from' not found for invocant of class 'Str'␤  in main program body at line 22:/tmp/2Jse3RL_ZV␤»

[16:35] <moritz_> rakudo: say "a\n\nb".comb(rx/ ^^ \N*/, :match)>>.from.perl

[16:35] <p6eval> rakudo : OUTPUT«(0, 2, 2, 3)␤»

[16:36] <moritz_> I guess that's that a bug, right?

[16:36] <moritz_> if so, it's the bug behind the .lines() bug

[16:36] *** Trashlord left
[16:37] <moritz_> rakudo: say "a\n\nb".comb(rx/ ^^ \N*/, :match)>>.to.perl

[16:37] <p6eval> rakudo : OUTPUT«(1, 2, 2, 4)␤»

[16:37] *** dip joined
[16:37] *** dip left
[16:37] *** dip joined
[16:37] *** dip is now known as Guest57743

[16:41] *** kaydsoft left
[16:42] <moritz_> I think I have a fix. And I'm pretty sure I wrote the original, buggy code

[16:45] <moritz_> spectesting now...

[16:46] *** jferrero joined
[17:04] *** shi left
[17:05] *** Trashlord joined
[17:08] *** ab5tract left
[17:08] *** kaydsoft joined
[17:10] *** Sarten-X left
[17:12] <Tene> http://journal.stuffwithstuff.com/2011/02/13/extending-syntax-from-within-a-language/ looks interesting; haven't read it yet.

[17:16] *** molaf joined
[17:20] *** ashleyde1 is now known as ashleydev

[17:20] *** cogno left
[17:21] *** Sarten-X joined
[17:24] *** cogno joined
[17:26] <sorear> niecza: .say for "a\n\nb".lines

[17:26] <p6eval> niecza v2-57-gdc84a47: OUTPUT«a␤␤b␤»

[17:28] *** MayDaniel left
[17:29] *** awoodland left
[17:35] *** cogno left
[17:36] <TimToady> Tene: he discovers the need for BEGIN semantics, then makes the mistake of automatically applying BEGIN semantics to every top-level statement, so he can't import into a block

[17:37] *** masak joined
[17:39] *** stkowski joined
[17:39] *** cdarroch joined
[17:39] *** cdarroch left
[17:39] *** cdarroch joined
[17:39] <masak> another interesting advantage of the 'commit often' practice is that when the VM maxes out on memory, becomes unresponsive, and needs to be killed, no unnecessary pulling of the hairs over lost data needs to be performed.

[17:42] *** mikehh left
[17:45] <dalek> rakudo/nom: cf9a50e | moritz++ | src/core/Cool-str.pm:

[17:45] <dalek> rakudo/nom: fix .comb for zero-width matches that do not coincide with the current position. Also fixes .lines and thus RT #84070

[17:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cf9a50e695

[17:46] <masak> moritz_++

[17:48] *** gdey left
[17:49] <moritz_> and of course I forgot something...

[17:51] <dalek> rakudo/nom: 433000e | moritz++ | t/spectest.data:

[17:51] <dalek> rakudo/nom: run lines.t

[17:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/433000e71f

[17:51] *** donri joined
[17:51] <donri> Hi there, I want to install rakudo to ~/.local, how?

[17:52] <moritz_> donri: configure parrot with --prefix=~/.local 

[17:52] <moritz_> donri: build parrot

[17:52] <moritz_> donri: and then configure rakudo with --parrot-config=~/.local/bin/parrot_config

[17:52] <moritz_> build and install rakudo

[17:52] <moritz_> forgot, install parrot too of course

[17:52] *** mtk left
[17:52] <moritz_> there's also a --gen-parrot-prefix option in Configure.pl, but I think it has been reported not to work reliably

[17:52] *** Tedd1 left
[17:53] <donri> so I can't use --gen-parrot?

[17:54] <moritz_> you can try (together with --gen-parrot-prefix), but I'm not sure if it works.

[17:54] *** icwiener joined
[17:54] *** plobsing left
[17:56] *** lakshman joined
[17:56] <dalek> rakudo/nom: b56186a | moritz++ | build/PARROT_REVISION:

[17:56] <dalek> rakudo/nom: parrot 3.1 release is immanent, bump PARROT_REVISIOIN for testing

[17:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b56186ac17

[17:57] <moritz_> oops, I accidentally committed all my last changes to nom instead of master

[17:57] <moritz_> I guess i need to cherry-pick then

[17:59] <sorear> wait, does this mean you just got rakudo/nom ready to release? :)

[18:00] <moritz_> "parrot 3.1 release is immanent", not "rakudo release" :-)

[18:00] <moritz_> anyway, I don't think it hurts nom to have those commits

[18:00] *** MayDaniel joined
[18:00] <moritz_> so I've just cherry-picked to master, and might even get double karma for my errors :-)

[18:01] <jdhore> TimToady, Oh no, you used Flinstones characters too?

[18:01] *** mtk joined
[18:01] <masak> --gen-parrot-prefix "works", but you have to do a lot of the build process as root.

[18:01] <dalek> rakudo: 6fbb341 | moritz++ | src/core/Cool-str.pm:

[18:01] <dalek> rakudo: fix .comb for zero-width matches that do not coincide with the current position. Also fixes .lines and thus RT #84070

[18:01] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/6fbb341770

[18:01] <dalek> rakudo: 3de0187 | moritz++ | t/spectest.data:

[18:01] <dalek> rakudo: run lines.t

[18:01] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/3de018750c

[18:01] <dalek> rakudo: 6f9116f | moritz++ | build/PARROT_REVISION:

[18:01] <dalek> rakudo: parrot 3.1 release is immanent, bump PARROT_REVISIOIN for testing

[18:01] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/6f9116f8a7

[18:02] <TimToady> jdhore: flintstones tends to be from merlyn++

[18:02] <moritz_> masak: unless you install to a location where you have writing permissions

[18:02] <masak> jdhore: "nom" is a Flintstones character?

[18:02] <masak> moritz_: oh, true.

[18:02] <jdhore> TimToady, Yeah, i know he used them in Learning Perl, but i was hoping for a different set of example characters in Programming Perl. :D

[18:02] * moritz_ tries that now

[18:04] <masak> oh! it's release week!

[18:05] <[Coke]> <random> at 24x80, the standard old school terminal is about 1/2 the golden ratio.

[18:06] *** dakkar left
[18:06] <masak> so if you put two next to each other, it's perfect? :)

[18:07] <TimToady> which is great if you're characters are twice as tall as they are wide

[18:07] <TimToady> *your

[18:08] *** plobsing joined
[18:09] <masak> 真吗?

[18:09] <moritz_> donri: sorry, I was wrong. --gen-parrot-prefix= works fine here

[18:09] <donri> yep, me too

[18:10] <donri> > say 'Victory!'

[18:10] <donri> Victory!

[18:10] <masak> .u victory

[18:10] <phenny> U+270C VICTORY HAND (✌)

[18:10] <TimToady> masak: if you're characters are double wide, then it's a 24x40 screen :P

[18:10] <TimToady> *your

[18:10] <TimToady> !?@#$!!

[18:10] <sorear> cute.  I can't paste the second character there into my EUC-JP xterm running xjdic, it comes out as "?"

[18:11] <sorear> .u 吗

[18:11] <phenny> U+5417 CJK UNIFIED IDEOGRAPH-5417 (吗)

[18:11] <TimToady> it's simplified

[18:11] <masak> yeah, sorry about that.

[18:11] <TimToady> try 嗎instead

[18:11] <masak> simplified is what LEIM produces by default.

[18:12] <sorear> oh, I guess I need to get my hands on a copy of xcdic

[18:12] <masak> I wonder what proportion of text-centering and other text-justification algorithms in the world assume fixed width and break for double-width characters.

[18:12] <TimToady> use a terminal that does Unicode, is my recommendation

[18:12] <masak> s/justification/justifying/

[18:13] * TimToady imagines programming Perl 6 in a proportional font someday

[18:13] <moritz_> masak: all those that work with proportional fonts shouldn't have problems with double-width

[18:13] <TimToady> there's somewhere Python can't go...

[18:14] <TimToady> otoh, internal tabs are a problem in any language

[18:15] <sorear> TimToady: funny that; I actually had trouble finding a terminal that was willing to *not* do Unicode

[18:15] *** bacek left
[18:15] <sorear> maybe someday I'll patch xjdic to add utf-8 to the supported encodings

[18:15] *** MayDaniel left
[18:16] <masak> TimToady: what's the allure of programming in a proportional font? I like the vertical aligning I can get from monospaced.

[18:17] <TimToady> the question is whether the internal representation loses info; most Japanese editors still store in some non-Unicode form, iiuc

[18:17] <masak> things like putting the hash values in the same column.

[18:17] <TimToady> other than the tab problem, proportional text is prettier

[18:18] <sorear> why can't Python do proportional fonts?

[18:19] <TimToady> very difficult to detect mismatches when there's no redundancy

[18:19] <masak> I once saw a proposal for a proportional-font editor with settable tab stops. if I were interested in proportional fonts for my source code, that's probably what I'd want.

[18:19] <masak> I've also sometimes envied Fortress for its conversion to LaTeX.

[18:19] <moritz_> TimToady: prettier, but not better suited. In programming 'thin' characters like . and , usually carry much more meaning. Having them too thin makes code hard to read

[18:20] <sorear> masak: check out lhs2TeX if you haven't already

[18:21] <moritz_> also constructs that match \w\.\w appear much more often in program code, and looks just Plain Wrong in proportional fonts

[18:22] <masak> sorear: ooh

[18:22] <TimToady> moritz_: your points are valid, but I often wish I had more choice than single or double width chars

[18:23] <moritz_> TimToady: maybe it's just that current proportional fonts weren't designed for programming

[18:23] <TimToady> nod

[18:24] *** risou__ left
[18:25] *** risou joined
[18:25] *** Axius joined
[18:30] *** gdey joined
[18:30] <sorear> text files period are a pretty lousy interface to compilers

[18:30] <sorear> but every replacment I've seen sucks more, so

[18:34] <masak> aye.

[18:42] * sorear ponders the implementation of &run on the CLR

[18:43] <sorear> the CLR System.Diagnostics.Process class, AFAICT, only supports running programs by $filename, $restofcommandline

[18:45] *** cjk101010 left
[18:45] <TimToady> yes, every program gets to build in its own "shell" quoting

[18:45] <sorear> it's not clear how to map run($command) or run(@argv) onto that

[18:46] <sorear> kinda silly since on the other end, the CLR provides a perfectly ordinary string[] argv to Main methods

[18:47] <TimToady> yeah, it's almost as bad as having a filesystem that is anti-gnostic to encodings

[18:47] <sorear> anti-gnostic?

[18:47] *** DarthGandalf left
[18:48] <TimToady> not only doesn't know, doesn't want to know

[18:48] * sorear thinks that a consistently UTF-16 filesystem is one of the things Windows does *much* better than Unix

[18:49] <TimToady> yes, though I suspect that one of the centuries Unix will settle on a consistent UTF-8 system

[18:50] <TimToady> coupling filename encodings to locale is insane

[18:51] <TimToady> anyway, wrt run() you might be able to steal some ideas from P5

[18:52] <TimToady> since it also has to deal with the Windows view of reality

[18:52] <sorear> P5 only has to deal with the Windows view of reality on Windows

[18:52] <TimToady> if it's feature decomposed correctly, it should depend on the "feature", not the OS

[18:53] *** DarthGandalf joined
[18:53] <TimToady> that was actually one of the earliest innovations in the early Configure scripts for rn and Perl

[18:54] <TimToady> up till then, most #ifdefs were architecture based

[18:54] <TimToady> rn and Perl switch to feature-based #ifdefs

[18:54] <TimToady> *ed

[18:55] <TimToady> an idea later picked up by the autoconf folks

[18:55] *** Axius left
[18:55] <PerlJam> good * #perl6

[18:56] *** Axius joined
[18:56] <TimToady> */

[18:57] <PerlJam> TimToady: if you hadn't written patch, do you think someone else would have (at that time)?

[18:57] <TimToady> eventually someone would have figgered it out, but there was a psychological barrier

[18:57] <TimToady> which was that ed already provided a way to spit out a script

[18:57] <TimToady> er, diff

[18:57] <TimToady> could spit out an ed scripts

[18:58] <TimToady> so people assumed that if they wanted to automate something, they should use that form of diff output

[18:58] <TimToady> one of those places where the Unix philosophy was bogus

[18:58] <TimToady> since ed didn't do one thing, nor did it do it well.  :)

[18:58] <TimToady> and same for diff

[18:59] *** Tedd1 joined
[18:59] <TimToady> so there was a barrier to realizing that a context diff could be read by computers as well as humans

[18:59] <TimToady> I just saw through that barrier first

[19:00] <TimToady> or was crazy enough to do something about it, might be more accurate

[19:00] <PerlJam> heh, I showed some diff output to some students the other day.  I think they'd contest the idea that diff output can be read by humans  ;)

[19:00] <TimToady> patch was really written in self-defence before the 2nd version of rn came out, since no one would patch the first version consistently

[19:01] *** molaf left
[19:01] <TimToady> kids these days can only read tiny proportional-font letters on a tiny touchscreen

[19:01] <TimToady> *defense if you're not British

[19:02] *** mberends joined
[19:03] <flussence> I don't agree with always-UTF16 being a good idea on a filesystem. Not saying UTF-8 is perfect, but that at least is optimised for the common case

[19:03] <PerlJam> my filesystem is ASCII and I like it that way!   

[19:03] <PerlJam> ;>

[19:03] *** rdesfo joined
[19:04] <flussence> specifying utf-byte-width per directory might've been a better approach IMO

[19:04] <sorear> flussence: there are 3 billion people in East Asia who would object to your notion of "the common case"

[19:04] <TimToady> flussence: it's the common case in western countries only..what sorear said

[19:04] <sorear> hanzi are 50% larger in utf8 than utf16

[19:04] <sjohnson> what's wrong with utf-8 filenames?

[19:04] <sorear> not 100% sure about devanagari et al

[19:05] <flussence> yeah, but there's still about 100k files on an OS disk that never need more than ASCII...

[19:05] <sorear> .u KANNADA

[19:05] <phenny> U+0C85 KANNADA LETTER A (ಅ)

[19:05] <sorear> .u DEVANAGARI

[19:05] <TimToady> UTF-8 also doesn't need to worry about byte order

[19:05] <phenny> U+0950 DEVANAGARI OM (ॐ)

[19:06] <PerlJam> I think it's just that that whole idea of a "file" is moving from being a "low level, OS-centric thing" to being a "high level, user-centric thing"

[19:06] <PerlJam> files used to be user-centric only by accident.

[19:07] <sorear> the concept of files used to be pretty diverse

[19:07] <sorear> "a file is a string of bytes" is actually quite recent

[19:07] <TimToady> Unix: do half a thing and do it half well...

[19:08] <flussence> that just means theres 75% room for improvement :)

[19:08] <sorear> pre-Unix files wore more like tables in a modern database (except without joins)

[19:09] <sorear> the memetic precursor of the modern file was the stack of punched cards

[19:10] <sorear> when files started appearing, they kept a lot of misfeatures like 80-byte blocks at first

[19:10] <PerlJam> It's all Herman Hollerith's fault

[19:12] <sorear> FORTRAN 66 makes a beautiful example of people retaining tabular-data mentality even when it's completely inappropriate to the problem domain...

[19:13] *** vmspb joined
[19:13] <PerlJam> sorear: just like all of those people who insist on using terminals that are 80 characters wide or write code that wraps at approximately 80 characters to accomodate them.

[19:14] <sorear> I try to keep my code under 66 characters ;)

[19:15] <masak> I try not to go beyond 78 characters.

[19:15] <masak> it's more of a challenge in Java than in Perl 5/6 ;)

[19:16] <PerlJam> I try to keep my terminals more than 100 chars wide but less than 150   :)

[19:16] <PerlJam> And I do still use a fixed-width font

[19:17] * sorear wonders if PerlJam used to use a VTxx in 132-column mode

[19:17] <mberends> I prefer 72 characters because the output of pod2text then still fits in 80 characters, and hardcopy on A4 has a reasonable margin.

[19:17] <PerlJam> sorear: vt220 I think ... yep

[19:18] <PerlJam> sorear: but back then I still coded as if there was an invisible barrier at 80 characters because most terminals were

[19:18] <PerlJam> mberends: be not constrained by the limitations of dead trees!

[19:18] <mberends> heh

[19:19] *** plobsing left
[19:26] *** aesop left
[19:27] *** bacek joined
[19:28] *** plobsing joined
[19:33] <donri> So because you never get this question: a complete, stable and "production ready" perl6 implementation, are we talking a year or five?

[19:34] <tadzik> two

[19:34] <tadzik> *SCNR*

[19:34] <tadzik> seriously, rather five than two, IMHO

[19:34] <dsp_> wasn't it due out by christmas?

[19:34] <tadzik> but I'd Love to be wrong

[19:35] <takadonet> dsp_: we never told you which christmas :)

[19:35] <dsp_> takadonet: ssshhhh :D

[19:35] <mberends> donri: it depends who you ask. I think... I'd rather not say ;-)

[19:38] <masak> donri: I would answer the question if I thought there was a single answer.

[19:38] <masak> in reality, it's a sliding-scale thing.

[19:38] <donri> In summary, what are the different answers? :)

[19:38] <donri> I'll happily take a very loose estimation

[19:38] <masak> "two years", "five years", "rather not say", "don't think there's one answer" :)

[19:39] <donri> :D

[19:39] <masak> donri: here's what happened for me: I started out using Perl 6. a lot. then I realized that I can already use it for a fair amount of things.

[19:39] <masak> donri: and for other things it's unusable, but will be usable in the future.

[19:40] <masak> and it's difficult to summarize the situation better than that.

[19:40] <masak> I explicitly don't believe in a big-bang Production Ready 6.0.0 release thing.

[19:41] <masak> the closest thing we had like that was Rakudo Star, this last summer.

[19:41] <masak> it made a splash, but not a particularly big one, as splashes go. I doubt we'll have the chance to make a bigger one anytime soon.

[19:42] <masak> so we should focus on showing Perl 6's current strengths, and pulling people in to help work on its weaknesses. :)

[19:42] <masak> donri: does that answer your question?

[19:43] <donri> There doesn't seem to be an answer to my question. ;)

[19:44] <masak> someone with a crystal ball might do better.

[19:44] <flussence> it'll be production ready when you start using it in production

[19:44] <masak> I use it in production.

[19:45] <masak> it's been faithfully rendering the HTML of my blog since September.

[19:46] <donri> Last I checked, e.g. speed wasn't even a concern yet and rakudo was mad slow on random dead-simple things

[19:46] <donri> Which is certianly understandable and surely acceptable, but not what I mean with "production ready"

[19:47] <jnthn> By now, speed is very high on the list. :)

[19:47] <mberends> Lately I figured out what I think most people mean by "production ready". It means "guaranteed as far as we can tell not to break your production source code any more". Which to us means, the specs freeze.

[19:48] *** cogno joined
[19:48] <donri> I'm not even sure what I mean, thus the scare-quotes.

[19:48] <flussence> if you want "guaranteed not to break with updates", one option is to never update. Ever.

[19:48] <flussence> (my $dayjob does that...)

[19:48] <donri> But there are rather well established practices of what to call a alpha release and what to call a final release.

[19:49] <donri> Where would you say rakudo is on such a spectrum?

[19:49] <masak> mberends: well, a couple of days ago S05 changed. that's generally the most stable synopsis, IMO. spec freeze, by whatever mechanism that's applied, doesn't seem to be on the horizon.

[19:50] *** MayDaniel joined
[19:50] <masak> mberends: OTOH, I'm not sure it'd be beneficial to consider a spec freeze before we have a reasonably versatile/complete implementation.

[19:50] <[Coke]> doesn't pmichaud have a blog entry somewhere about stable vs. alpha vs. 1.0 that tries to address the terminology?

[19:50] <flussence> to use a javascript analogy, I'd say Rakudo's at where Firefox 2.0 was

[19:51] <flussence> the useful stuff is there, it's just not fast yet

[19:51] <masak> donri: on such a spectrum, I would say Rakudo is somewhere between alpha and beta. but even there, it's not as one-dimensional as that.

[19:51] <mberends> masak: +1. After a first "ready" I guess specs can still extend the language, but must do so within non-breaking constraints the way Perl 5 does.

[19:51] <masak> donri: some features of Rakudo are very stable.

[19:52] <masak> mberends: we could always do releases of the spec: 6.0.0, 6.1.0...

[19:52] <masak> mberends: though I believe it's still much too early to do that.

[19:52] <mberends> yes

[19:52] <masak> mberends: similarly, I believe it's still much too early for any specific Perl 6 module in the ecosystem to do versioning.

[19:52] <masak> it's just not worth the hassle.

[19:52] <masak> yet.

[19:53] <TimToady> if you declare you're using a particular version of Perl, then we have to emulate that version later, according to spec

[19:53] <TimToady> we could start 6.0.0 today, but we'd end up with a lot of emulation later

[19:54] <mberends> so let's not do that ;)

[19:55] <masak> I think the most beneficial thing for Perl 6 would be if people keep on implementing the spec like we are now, making it ever more stable/reliable/frozen. meanwhile, we promote the language through blog posts, talks, and tutorials.

[19:55] *** shi joined
[19:55] <TimToady> and rosettacode :)

[19:55] <masak> \o/

[19:55] <jnthn> And using it for stuff. :)

[19:55] <TimToady> esp dogfoody stuff

[19:56] <masak> aye.

[19:56] <[Coke]> I need to get a "safe" rakudo install I can use for day to day that isn't constantly getting blown away by parrot & rakudo upgrades.

[19:56] <donri> Wasn't that what Star was intended to be?

[19:56] <masak> [Coke]: huh? blown away?

[19:56] <TimToady> I've not had much of anything blown away, ever.

[19:56] <masak> [Coke]: just don't upgrade! :)

[19:57] <TimToady> my quiz editor has been working with HEAD for some time now

[19:57] <jnthn> Not surprised, if you never moved from HEAD to master :P

[19:57] <TimToady> 'course that's not stressing the new bits :)

[19:57] <TimToady> well, whatever the front thing is called

[19:58] <mberends> TimToady: I don't doubt your word at all, but why esp dogfoody stuff?

[19:58] <jnthn> heh, it's kinda still called HEAD in git ;)

[19:58] <masak> [Coke]: the only painful upgrade for me was from alpha to ng. took months to move the code over.

[19:58] *** aesop joined
[19:58] <jnthn> Yeah, alpha => ng was ouchy.

[19:58] <masak> mberends: because dogfoody stuff simultaneously exercises the language and produces tools for the language?

[19:58] <masak> mberends: like neutro, for example.

[19:58] * jnthn is going to do his best to make ng => nom far less painful

[19:59] <TimToady> currently the dogfoody stuff puts the most stress on the system to be stable and fast

[19:59] <TimToady> or more accurately, stabilizable and optimizable...

[20:00] <[Coke]> I upgrade parrot several times a day, and when i install rakudo, I  put it in the same place. I often wipe the install directory as part of testing parrot.

[20:00] <masak> also, dogfoody stuff tends to put me in a mood of "let's just write it like this" without being too worried about whether Rakudo supports it. it's a great way to discover rakudobugs :)

[20:00] <mberends> I thought it might have been about reducing dependence on other tools, or about a higher level of Turing Completeness that I'm not aware of.

[20:00] *** MayDaniel left
[20:01] <TimToady> it's more about forcing convergence where we can, and minimizing platform dependencies

[20:01] <TimToady> while keeping the language optmizable for any specific VM

[20:02] <TimToady> *i

[20:03] <TimToady> and keeping the platform-agostical optimizations platform agnostic

[20:03] <mberends> *n

[20:03] <TimToady> that too

[20:04] * TimToady wonders what a "gostic interpolation" would be...

[20:05] <frettled> Might be related to Gosling?

[20:13] <masak> or ghosts?

[20:16] *** Axius left
[20:18] *** bacek left
[20:18] <cogno> I have lost touch with perl6, so I may talk silly, but should not be a github group for stable Perl 6 software.

[20:18] <masak> cogno: seen http://modules.perl6.org?

[20:19] <cogno> A major Perl 6 release should not break these softs or they should be fixed before.

[20:19] <masak> cogno: that's a nice goal, but hard to enforce without some kind of tooling/automation.

[20:19] <cogno> Masak: do we commit to fix these if broken.

[20:19] <cogno> ??

[20:19] <moritz_> cogno: who is "we"?

[20:20] <moritz_> cogno: if you commit to it, "we" do :-)

[20:20] <cogno> :)

[20:20] <moritz_> I personally also commit to fix my modules, as soon as I learn of breakage

[20:20] *** _jaldhar_ left
[20:20] <masak> cogno: things like that are fixed as soon as we become aware of them.

[20:22] *** lateau left
[20:22] <cogno> Modules are hot dog food :)

[20:23] *** jimbob left
[20:23] <masak> cogno++ # "hot dog food"!

[20:25] *** fhelmberger left
[20:26] <cogno> Cogno is too much occupied learning category theory, chu spaces and HTML 5 to pay enough attention to Perl 6. But I am sure all these interests will converge someday

[20:27] <masak> undoubtedly.

[20:33] <cogno> Masak, i am considering writing subway shuffle as a HTML canvas

[20:33] *** plainhao left
[20:36] <moritz_> don't consider, do

[20:37] <masak> </yoda>

[20:47] <tadzik> what's "dogfoody stuff"?

[20:49] <TimToady> http://en.wikipedia.org/wiki/Eating_your_own_dog_food

[20:51] *** plobsing left
[20:53] <[Coke]> icecreaming, champagning...

[20:54] <TimToady> marketroids don't understand humility

[20:57] *** MayDaniel joined
[20:58] *** coldhead joined
[20:58] *** Mowah left
[21:00] * mathw finds the 6model Rakudo code very interesting

[21:01] <jnthn> mathw: The few bits I put into the Rakudo repo in the nom branch so far?

[21:02] <mathw> yeah

[21:02] *** ymasory_ joined
[21:02] <moritz_> jnthn: I advertised them in a blog post :-)

[21:02] <mathw> src/metamodel, yeah?

[21:02] <mathw> I'm finding it pleasingly comprehensible

[21:02] <moritz_> yes

[21:02] <jnthn> mathw: src/Perl6/Metamodel

[21:02] <jnthn> Not src/metamodel - that's the older stuff ;)

[21:02] <mathw> hah

[21:03] *** VXZ joined
[21:03] <mathw> okay is the new stuff as comprheensible

[21:03] <mathw> does this mean I should've learned how rakudo works inside earlier?

[21:03] <mathw> (but when would I have had time for that)

[21:03] <jnthn> mathw: Yes :)

[21:03] *** cogno left
[21:04] <jnthn> moritz_: Any chance you could link to https://github.com/rakudo/rakudo/tree/nom/src/Perl6/Metamodel instead? :)

[21:04] <mathw> okay so ClassHOW is good...

[21:04] <mathw> just a big collection of roles

[21:04] <moritz_> jnthn: yes, doing that now...

[21:04] <jnthn> mathw: It'll have some bits of its own.

[21:04] <mathw> good

[21:04] <jnthn> mathw: But yes, much of it comes from roles.

[21:04] <mathw> it would be a bit too mind-bending if it could all come from roles

[21:05] <jnthn> mathw: If you find the factoring interesting also see http://scg.unibe.ch/archive/papers/Duca05ySafeMetaclassTrait.pdf

[21:06] <mathw> it certainly makes sense t ohave roles for AttributeContainer and MethodContainer

[21:06] <jnthn> Right. Roles and classes both have methods.

[21:06] <jnthn> And roles come in their parametric and concrete variants.

[21:07] <mathw> heh I see RoleContainer is missing a certain something special :)

[21:07] <jnthn> mathw: Right.

[21:07] <jnthn> mathw: It'll come later. See https://github.com/rakudo/rakudo/blob/nom/NOMMAP.markdown for my nom roadmap.

[21:08] <mathw> well of course it'll come later :)

[21:08] <mathw> it's awesome that you can write metaclasses in NQP like this

[21:09] <jnthn> mathw: Scarier is that NQPs own metaclasses are written in NQP. :)

[21:09] <jnthn> Bootstrapping FTW.

[21:09] <jnthn> But yes, I'm enjoying writing them in a Perl 6 subset. :)

[21:09] <mathw> so the only bits not written in NQP are the fundamental components you need to implement the metamodel?

[21:09] <jnthn> Right.

[21:09] <mathw> awesome

[21:10] <jnthn> There's one core meta-object.

[21:10] <mathw> I'd read that this was going to be good for porting to other platforms, but I hadn't realised it was *this* good

[21:10] <jnthn> The bits are are VM-specific are chosen very carefully.

[21:10] <jnthn> s:1st/are/that/

[21:10] <masak> jnthn++

[21:10] <jnthn> So we can write the meta-objets in this way, but still get good performance.

[21:10] <mathw> nice

[21:11] <jnthn> There's only so many code paths that need to be really fast. They're method dispatch, attribute access, object allocation and nominal type checks.

[21:12] <mathw> well when you get right down to it, those are what an object-oriented system is built on

[21:12] *** Rotwang joined
[21:12] <moritz_> jnthn: links updated

[21:12] <jnthn> moritz_++

[21:12] *** cogno joined
[21:13] <mathw> :)

[21:13] <mathw> jnthn++

[21:14] <TimToady> group ++

[21:15] <tadzik> looking at https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Metamodel/Versioning.pm I assume nqp has no '$.foo'?

[21:15] <jnthn> tadzik: Correct

[21:15] <jnthn> Not at the moment, anyway

[21:15] <mathw> everybody++

[21:15] <masak> chromatic++ # http://www.modernperlbooks.com/mt/2011/02/want-better-perl-6-sooner-write-rakudo-benchmarks.html

[21:16] <jnthn> tadzik: We could easily do the non-rw case of those.

[21:16] <tadzik> jnthn: https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Metamodel/AttributeContainer.pm#L15 -- why not push like in #23?

[21:16] <colomon> chromatic++ indeed!  sweet post.

[21:17] <jnthn> tadzik: There's an attribute auto-viv, erm, curiosity in NQP at the moment.

[21:17] <jnthn> I need to talk with pmichaud++ about how to best deal with it.

[21:17] <tadzik> mhm

[21:17] <masak> jnthn: attribute auto-viv?

[21:17] <jnthn> It's not new. Curiously, I ended up with the exact same "bug" in nqpclr too :)

[21:18] <jnthn> masak: At the moment, an attribute slot for has @!foo is empty and the first time it's accessed an array lazily springs to life in it.

[21:18] <jnthn> masak: If it's used in a binding context, all ends very well.

[21:18] <jnthn> If it's not...things end badly.

[21:18] <masak> huh.

[21:18] <jnthn> Right. :)

[21:19] <jnthn> I think Pm probably has some views on how to fix this.

[21:19] <jnthn> So I'd rather hear them before diving in and changing stuff.

[21:19] <tadzik> I don't get it, why cuddled elses are bad. Everyone likes to be cuddled

[21:19] <jnthn> masak: But it'll get changed/fixed in some way, for sure.

[21:20] <masak> tadzik: you're allowed to cuddle your elses on Valentine's Day :)

[21:20] <tadzik> my elses have Valentine's day everyday :)

[21:21] <masak> tadzik: have you read "Perl Best Practices"?

[21:21] <tadzik> masak: nah

[21:21] <masak> there's an argument there about it.

[21:21] <mathw> I don't think I've ever seen anybody arguing for cuddled elses in any language at all

[21:21] <masak> it goes like this: the eye scans vertically along the leftmost edge of the code.

[21:22] * mathw -> bed

[21:22] <masak> therefore, important things should be first on the line.

[21:22] <masak> therefore, consider not cuddling your elses.

[21:22] <TimToady> makes it easier to install an elsif too

[21:22] <PerlJam> masak: except that "the left most edge" is larger than 1 charcter  :)

[21:22] <PerlJam> er, character

[21:23] <TimToady> and vertical screen real estate isn't all that important anymore

[21:23] <masak> PerlJam: well, even then it's about probabilities, and you want to maximize those.

[21:25] *** kst left
[21:25] *** kst joined
[21:26] *** cogno left
[21:28] *** MayDaniel left
[21:36] *** plobsing joined
[21:43] *** kjeldahl left
[21:51] *** kjeldahl joined
[21:52] *** VXZ left
[21:54] <PerlJam> Hrm.  http://www.perlfoundation.org/perl6/index.cgi?documentation has many LTA links and I can't seem to login to fix them :(

[22:03] <jnthn> moritz_: Somehow, it seens nqp doesn't have a non-zero when an unhandled exception occurs now. Instead, it prints the usage message. Any ideas?

[22:06] *** icwiener left
[22:10] *** kaare_ left
[22:12] <jdhore> Question: If i use static typing (my Str $foo) in Perl 6, are there (or is it planned to have) anything like casts or functions to do conversions? Or is it basically assumed that if you'd be using a cast, just don't statically type.

[22:13] <PerlJam> jdhore: static typing and type conversions are not mutually exclusive you know

[22:14] <jdhore> true

[22:14] <PerlJam> jdhore: so ... "functions to do conversions"    Sure, why not?

[22:15] <jnthn> It's probably better to see those as type constraints that may or may not have static effects.

[22:15] <Tene> rakudo: say 1.WHAT; say 1.Str.WHAT;

[22:15] <masak> casts generally look like this in Perl 6: (2 + 2).Str

[22:15] <p6eval> rakudo 6f9116: OUTPUT«Int()␤Str()␤»

[22:15] <Tene> like that

[22:15] <masak> what Tene said :)

[22:15] <Rotwang> what is this ␤ character?

[22:15] <PerlJam> Rotwang: a newline?

[22:15] <masak> it's a representation of a newline.

[22:16] <Rotwang> thx

[22:16] <masak> 'say' prints stuff and then a newline.

[22:16] <masak> either that, or we really like the Netherlands :P

[22:17] <jnthn> Well, or both. ;)

[22:17] * jnthn likes newlines AND the Netherlands

[22:18] <masak> jdhore: I think an Apocalypsis mentioned that if an assignment is going to fail because of type mismatch, Perl 6 can look for the needed type conversion method. it's not spec though, and I'm not 100% convinced it's a good idea.

[22:19] <jnthn> It's not spec, and not likely to happen.

[22:19] <masak> there you go, then.

[22:19] <jnthn> We may introduce coercion types to explicitly say you want that.

[22:19] <moritz_> 23:03 < jnthn> moritz_: Somehow, it seens nqp doesn't have a non-zero when an [...]

[22:19] <PerlJam> Implicit conversions are evil

[22:19] <moritz_> non-zero return status? or what?

[22:19] <jnthn> moritz_: sorry, I was sure I'd typed exit code!

[22:19] <jnthn> moritz_: But let me make realclean just to be sure I've got everything straight...

[22:20] <moritz_> ./nqp -e 'pir::die("foo")'; echo $?

[22:20] <moritz_> foo

[22:20] <moritz_> [backtrace]

[22:20] <moritz_> 1

[22:20] <moritz_> seem just fine

[22:20] * moritz_ -> sleep

[22:21] <masak> moritz_: 'night. you'll have the p4 post to look forward to tomorrow :)

[22:21] *** am0c left
[22:24] *** zb left
[22:29] *** alester left
[22:35] *** zb joined
[22:42] <donri> rakudo: say [+] gather for 1..999 { take $_ unless $_ % (3 & 5); }

[22:42] <p6eval> rakudo 6f9116: OUTPUT«233168␤»

[22:42] <donri> What do I win?

[22:46] <masak> rakudo: say [+] grep { $_ %% (3 | 5) }, ^1000

[22:46] <p6eval> rakudo 6f9116: OUTPUT«(timeout)»

[22:47] *** zb left
[22:47] <masak> rakudo: say [+] grep { $_ %% 3 & 5 }, ^1000

[22:47] <p6eval> rakudo 6f9116: OUTPUT«(timeout)»

[22:49] <masak> rakudo: .say unless $_ % (3 & 5) for 3..15

[22:49] <p6eval> rakudo 6f9116: OUTPUT«3␤5␤6␤9␤10␤12␤15␤»

[22:49] <Tene> rakudo: say [+] ^1000.grep: * %% 3 & 5

[22:49] <p6eval> rakudo 6f9116: OUTPUT«0␤»

[22:50] <Tene> rakudo: say [+] ^1000.grep: * %% (3 & 5)

[22:50] <p6eval> rakudo 6f9116: OUTPUT«0␤»

[22:50] <Tene> rakudo: say [+] (^1000).grep: * %% (3 & 5)

[22:50] <masak> ...timeout

[22:50] <p6eval> rakudo 6f9116: OUTPUT«(timeout)»

[22:50] <masak> :(

[22:51] *** cosimo_ joined
[22:51] <Tene> rakudo: say [+] (^1000).grep: * %% 3

[22:51] <p6eval> rakudo 6f9116: OUTPUT«166833␤»

[22:51] *** bpalmer joined
[22:52] <donri> and multiples of five

[22:52] *** zb joined
[22:52] <donri> rakudo: say [+] (1..999).grep: { !($_%(3&5)) }

[22:53] <p6eval> rakudo 6f9116: OUTPUT«233168␤»

[22:54] * PerlJam idly wonders if !%% works

[22:55] <jnthn> std: 5 !%% 3

[22:55] <p6eval> std 625303c: OUTPUT«ok 00:01 119m␤»

[22:58] *** am0c joined
[22:59] *** shi left
[23:03] <donri> lack of readline in the interactive rakudo is such an annoyance :(

[23:04] <Tene> donri: I have readline...

[23:04] <Tene> donri: do you maybe not have readline-dev or whatever installed?

[23:04] <donri> quite possible. need to recompile rakudo after installing that?

[23:05] <Tene> You'll want to make sure to do a clean of the parrot dir too, to make sure parrot properly detects it during configure

[23:05] <donri> git clean -fdx

[23:05] <Tene> it's a parrot issue; rakudo just uses whatever parrot provides.

[23:05] <Tene> ftw

[23:07] *** zb left
[23:07] *** zb joined
[23:11] *** Rotwang left
[23:13] *** zb left
[23:15] *** whiteknight joined
[23:18] <dalek> rakudo/nom: 6c07d98 | jnthn++ | src/Perl6/Metamodel/ClassHOW.pm:

[23:18] <dalek> rakudo/nom: Fill out ClassHOW a little more.

[23:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6c07d984f3

[23:18] <dalek> rakudo/nom: ed92a03 | jnthn++ | src/core-nom/ (3 files):

[23:18] <dalek> rakudo/nom: Start to sketch out the initial bits of the new core setting. Note that none of this will compile yet, much less run.

[23:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ed92a0348c

[23:20] *** Sargun left
[23:20] <donri> thanks Tene, works :)

[23:21] <sorear> good * #perl6

[23:21] <tadzik> hello sorear 

[23:21] <donri> good morningstar to you too good sir or otherwise

[23:22] <masak> ok, people -- the wait is over: http://strangelyconsistent.org/blog/p4-pick-the-last-pair-of-stones

[23:23] *** Sargun joined
[23:25] <tadzik> the wait is over? „Oh well, let's wait for the last task's results” :)

[23:26] <masak> that's a new, separate wait :P

[23:27] <masak> tadzik: did you just jump to the bottom of the post, eager for the result of the contest? :)

[23:29] <jnthn> masak: "pit all the five non-trivial solutions against each other" is a link to the blog post itself.

[23:29] <jnthn> Should it be?

[23:35] <tadzik> masak: no :)

[23:35] *** felliott left
[23:35] <masak> jnthn: no, that seems needlessly self-referent. :) fixing.

[23:35] *** cogno joined
[23:38] *** cogno left
[23:39] <masak> fixed. jnthn++

[23:41] <dalek> nqp: 1307625 | jonathan++ | src/pmc/dispatchersub.pmc:

[23:41] <dalek> nqp: Fix up dispatcher sub cloning.

[23:41] <dalek> nqp: review: https://github.com/perl6/nqp/commit/13076256c8

[23:41] <dalek> nqp: 86697e2 | jonathan++ | src/metamodel/how/NQPMu.pm:

[23:41] <dalek> nqp: Mark the Str proto as also being the parrot_vtable handler for get_string. This means say(SomeTypeObj) works.

[23:41] <dalek> nqp: review: https://github.com/perl6/nqp/commit/86697e20c1

[23:42] *** donri left
[23:43] <jnthn> Turns out the new proto approach to multis makes some things a bunch easier. :)

[23:45] <Tene> phenny: tell donri btw, if you *do* run into other non-readline programs, please use rlwrap.  Friends don't let friends use non-readline interactive programs. ;)

[23:45] <phenny> Tene: I'll pass that on when donri is around.

[23:45] <masak> *lol* -- in http://railspikes.com/2008/7/14/why-programmers-should-play-go , this comment by "Internet TV", made my day: "Will have to check it out, haven’t heard of Go before. Looks a lot like pente."

[23:45] <masak> only on the Internet...

[23:46] <masak> (and possibly Usenet)

[23:46] <Tene> .wik Pente

[23:46] <phenny> "Pente is a strategy board game created in 1977 by Gary Gabrel." - http://en.wikipedia.org/wiki/Pente

[23:48] <masak> it's Pente that looks a lot like Go, fwiw.

[23:48] <Tene> Rather. :)

[23:48] <masak> but the similarities stop at the board and the stones.

[23:48] <plobsing> you mean there's more to it than that? ;)

[23:49] *** stkowski left
[23:50] *** cotto left
[23:51] <masak> anyway, it's as if someone would say "Will have to check it out, haven't heard of Chess before. Looks a lot like Crazyhouse."

[23:53] <Tene> plobsing: Doesn't look like Pente has the knife fights.

[23:54] *** bacek_at_work joined
[23:54] <bacek_at_work> ~~

[23:54] <bacek_at_work> masak, ping

[23:54] * plobsing thought chess looked a lot like checkers for a while

[23:54] <masak> bacek_at_work: pong

[23:55] <masak> bacek_at_work: about to go to bed.

[23:55] <bacek_at_work> masak, can you test rakudo on parrot's gen_gc2 branch? I hope I fixed it.

[23:55] <masak> Tene: have you heard of Hex being described as "a knife fight in a phone booth"? it's quite fitting, at least for small boards.

[23:56] <masak> bacek_at_work: ok, testing now.

[23:56] <bacek_at_work> masak, thanks!

[23:56] <Tene> masak: I haven't.

[23:56] <masak> hey, anything to help the Parrot people ;)

[23:57] *** Vlavv left
