[00:22] *** lumi_ left
[00:32] *** am0c left
[00:40] *** silug joined
[00:44] *** am0c joined
[00:58] *** silug left
[00:58] *** silug joined
[00:59] *** kanishka joined
[01:19] *** zerothehero joined
[01:28] *** kid51 left
[01:36] *** zerothehero left
[01:39] *** kanishka left
[01:41] *** silug left
[01:41] *** dukeleto left
[01:42] *** dukeleto joined
[01:43] <sorear> Is it just my imagination, or was there at one point a full sextet of infix operators, div, mod, divrem, quot, rem, quotrem?

[01:46] <TimToady> It's your imagination

[01:50] <TimToady> my hope is that we can have polymorphic literals like Go does

[01:50] <TimToady> in which case we might allow initializing a Buf with an ASCII literal

[01:53] <TimToady> see, for instance, S03:3688

[01:54] <TimToady> basically you can't treat a Buf as anything other than ASCII without more info

[01:56] <sorear> TimToady: does eval "use latin1; say '¢'".encode("latin1") make any sense?

[01:56] <dalek> niecza: b013b3d | sorear++ | lib/ (3 files):

[01:56] <dalek> niecza: Remove the indirection between nam names and method names

[01:56] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b013b3d9e4

[01:56] <dalek> niecza: 6c52f02 | sorear++ | lib/ (2 files):

[01:56] <dalek> niecza: Implement div/mod

[01:56] <dalek> niecza: review: https://github.com/sorear/niecza/commit/6c52f02bd6

[01:56] <TimToady> not without a closing quote "   :P

[01:57] <sorear> ...those quotes look balanced to me.

[01:57] <TimToady> oh, okay, I see it

[01:57] <TimToady> but why are you encoding the result of say as latin?

[01:58] <TimToady> *1

[01:58] <TimToady> oh, you're not

[01:58] <TimToady> sorry, been a long day

[01:58] * TimToady should learn to read

[01:58] <TimToady> I don't think eval needs to run on a Latin-1 buf, no

[01:59] <TimToady> the only way to make that work would be to have a latin1 buf type

[02:00] <TimToady> and as far as I recall, we only ever set up a utf8 buf type

[02:00] <TimToady> so you can't just assume you know the encoding of any random buf8

[02:00] *** bacek joined
[02:01] *** dukeleto left
[02:02] *** dukeleto joined
[02:13] *** whiteknight left
[02:14] <sorear> TimToady: does it make sense to have pragmas set the source encoding?

[02:15] *** Chillance left
[02:15] <sorear> perl6: say (given 5 { when Int { $_ * 2 } })

[02:15] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "given"␤    expecting expression or ")"␤    postfix op␤    at /tmp/i6zNNaSOsq line 1, column 6␤»

[02:15] <p6eval> ..rakudo 0d3c71: OUTPUT«10␤»

[02:15] <p6eval> ..niecza v5-97-g5967651: OUTPUT«␤»

[02:15] <sorear> interesting

[02:16] *** bacek left
[02:16] <sorear> I will have to study what rakudo is doing to make that happen

[02:30] *** am0c left
[02:54] <sorear> rakudo: 9.sqrt.WHAT.say

[02:54] <p6eval> rakudo 0d3c71: OUTPUT«Num()␤»

[03:13] <sorear> TimToady: do you have anything to say about <<+>> parsing?

[03:16] <sorear> nevermind, I see the issue

[03:19] *** mberends joined
[03:19] <dalek> niecza: 0163f97 | sorear++ | lib/ (2 files):

[03:19] <dalek> niecza: Add Cool.abs, sqrt, postfix:<i>, Hash.Numeric

[03:19] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0163f978ab

[03:19] <dalek> niecza: 93cb7df | sorear++ | lib/ (2 files):

[03:19] <dalek> niecza: Initial prototype (Perl6) implementation of hyperops

[03:19] <dalek> niecza: review: https://github.com/sorear/niecza/commit/93cb7dff20

[03:19] <dalek> niecza: beb5018 | sorear++ | src/niecza:

[03:19] <dalek> niecza: Fix parsing of <<+>>

[03:19] <dalek> niecza: review: https://github.com/sorear/niecza/commit/beb5018a95

[03:26] <dalek> roast: 5180aec | util++ | S (9 files):

[03:26] <dalek> roast: Fix typos.

[03:26] <dalek> roast: review: https://github.com/perl6/roast/commit/5180aecf26

[03:33] <dalek> niecza: 33ef6e6 | sorear++ | lib/CORE.setting:

[03:33] <dalek> niecza: Any numifies to 0

[03:33] <dalek> niecza: review: https://github.com/sorear/niecza/commit/33ef6e6534

[03:34] <dalek> niecza: edb7aab | sorear++ | t/spectest.data:

[03:34] <dalek> niecza: Add hyper.t as a passing test file

[03:34] <dalek> niecza: review: https://github.com/sorear/niecza/commit/edb7aab9c0

[03:34] <dalek> roast: 47f2ea2 | sorear++ | S03-metaops/hyper.t:

[03:34] <dalek> roast: Fudge S03-metaops/hyper.t for niecza

[03:34] <dalek> roast: review: https://github.com/perl6/roast/commit/47f2ea26d2

[03:38] *** ymasory joined
[03:38] *** mtk left
[03:49] *** mtk joined
[03:54] *** thou left
[03:54] <sorear> What would be some more cool things to do before Monday?

[03:58] *** ymasory left
[03:58] *** araujo left
[04:03] *** mberends left
[04:04] <sorear> nothing on my TODO is looking very -Ofun at the moment,

[04:04] <sorear> .

[04:05] <dalek> roast: 4a30726 | util++ | S (3 files):

[04:05] <dalek> roast: Fix more typos.

[04:05] <dalek> roast: review: https://github.com/perl6/roast/commit/4a30726777

[04:15] *** envi joined
[04:35] *** thou joined
[04:36] *** silug joined
[04:41] *** pamera joined
[04:43] <dalek> roast: 1661645 | sorear++ | S03-metaops/hyper.t:

[04:43] <dalek> roast: Fix more typos.

[04:43] <dalek> roast: review: https://github.com/perl6/roast/commit/16616457b7

[04:58] *** gbacon left
[05:18] *** silug left
[05:19] *** silug joined
[05:30] *** thou left
[05:41] <dalek> niecza: e8768a7 | sorear++ | / (2 files):

[05:41] <dalek> niecza: Draft v6 announcement

[05:41] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e8768a7154

[05:41] <sorear> I would like people to read that... it'll be posted in 3 days

[05:47] *** silug left
[06:02] <sorear> I would also like people to suggest directions

[06:14] *** molaf joined
[06:15] *** wamba joined
[06:28] *** envi left
[06:33] *** envi joined
[06:40] *** Lorn left
[06:46] *** donri joined
[06:47] <TiMBuS> http://dev.perl.org/perl6/rfc/175.html reading this makes me whaleface all over the place

[06:48] *** araujo joined
[06:51] <sorear> hello TiMBuS 

[06:51] <TiMBuS> hello

[06:52] <sorear> what's your favorite Perl 6 feature that nobody's bothered to implement yet?

[06:53] <TiMBuS> async{}/threads

[06:53] <TiMBuS> ok thats not a perl 6 feature but, itd be nice.

[06:54] <TiMBuS> hmmmm thats tough. almost all of the 'cool' parts of perl 6 are done now.. macros maybe?

[06:56] * sorear doesn't like the new Mono profiler.

[06:57] *** Lorn joined
[06:58] <TiMBuS> has niecza got threads?

[06:59] *** dukeleto left
[07:00] *** dukeleto joined
[07:04] *** shachaf left
[07:13] *** shachaf joined
[07:32] <sorear> TiMBuS: yes

[07:38] <cxreg> following S17?

[07:38] <sorear> no

[07:38] <sorear> S17 is a joke

[07:38] <cxreg> i thought so

[07:38] <sorear> Woods and Lyon would be proud

[07:39] *** snearch joined
[07:44] <cxreg> so what type of model have you got?

[07:44] <sorear> a KISS one

[07:45] <sorear> paper-thin wrapper over the CLR model, which happens to be basically exactly the same as Java, Windows, and pthreads

[07:45] <cxreg> "whatever was easiest for the CLR to give me" ?

[07:45] <cxreg> heh.

[07:45] <cxreg> so yes, then.  totally reasonable.

[07:49] <TiMBuS> s17 is basically coro

[07:49] <TiMBuS> at least, the sensible parts are basically coro

[07:50] <sorear> hmm, google doesn't seem to be able to find the work of "Woods and Lyon" without help

[07:51] *** mberends joined
[07:51] *** satyavvd joined
[07:54] <mberends> sorear: I would like to see NativeCall for niecza, to enble us to try to do zavolaj-ish things, including callbacks for GUI work.

[07:54] <cxreg> to other managed code, or to somehow escape the prison?

[07:55] <cxreg> I have no idea how jailed CLR code is

[07:57] <sorear> CLR code is jailed quite optionally

[07:57] <sorear> remember, this is Microsoft we're talking about; they consider the Windows API their #1 asset, due to its developer lockin functionality

[07:58] <sorear> a jail was added when Silverlight came out.  for an afterthought it's not too horrible

[07:58] <cxreg> heh

[08:07] <sorear> good night

[08:10] <mberends> 'night

[08:16] *** masak joined
[08:16] <masak> dearest #perl6! I greet you.

[08:17] <mberends> and I, for one, welcome our rakudobuging overlord.

[08:17] <tadzik> be greeted too, thouh shan't come to #perl6 ungreeted

[08:18] <masak> I bow to your collective eloquence, good sirs.

[08:18] <masak> 'tis a fine thing that IRC is such a refined and sophisticated place.

[08:19] <mberends> verily

[08:21] <tadzik> shame is that only infinitesimal amount of places are to hold a heritage like this

[08:22] <mberends> that's fine. if everywhere were like here, this place would not be special.

[08:23] <tadzik> touche

[08:24] * mberends noms a norange

[08:24] <tadzik> norange, like a very close?

[08:24] <tadzik> 'oh!

[08:24] <mberends> heh

[08:24] * tadzik picks of monocle

[08:24] <tadzik> masak: how you doing, good sir?

[08:24] <mberends> about to nom a nother orange

[08:25] <tadzik> nother, like somewhere else?

[08:25] <masak> mberends: you mean 'norange' :P

[08:25] <masak> tadzik: I'm still recovering after a somewhat hectic week following the vacation. :) but I knew it was going to be like this.

[08:26] <masak> tadzik: how are you doing?

[08:26] <masak> mberends: you, you already covered that topic... :P

[08:26] * masak too slow

[08:27] <mberends> :P

[08:28] <masak> sorry 'bount that, nuncle.

[08:29] <mberends> know problem

[08:29] <tadzik> masak: enjoying the last moments of chill I am given. I ought to finish gsocwork and then prepare for one of the more monstrous weeks of the semester

[08:31] *** MayDaniel joined
[08:33] <masak> tadzik: sounds like a plan.

[08:35] *** isBEKaml joined
[08:36] <tadzik> target=past is broken, isn't in?

[08:37] <masak> it was in nom last I tried.

[08:37] <tadzik> I'm thinking of master now

[08:37] <masak> er, in nqp, I mean.

[08:38] <tadzik> looks like make_variable is what I'd want to use

[08:40] <isBEKaml> holafolks!

[08:41] <tadzik> one usually uses ":node($/)" in PAST::Var creations. What if a variable I want to create is not assosiaced with any piece of code?

[08:41] <isBEKaml> notquitalazysaturday,Isee.  :D

[08:42] *** silug joined
[08:42] <tadzik> bah. Hola, isBEKaml 

[08:43] <isBEKaml> tadzik: how goes thou? gsoc-work?

[08:44] <tadzik> isBEKaml: aye

[08:45] <tadzik> what PAST does @a.push('foo') produce?

[08:45] *** mj41 joined
[08:46] <tadzik> oh, there is :pasttype<callmethod>

[08:46] *** silug left
[08:47] *** silug joined
[08:48] <isBEKaml> tadzik: ah, have fun! 

[08:50] <tadzik> I do :)

[08:50] <tadzik> If only Rakudo compiled _a_bit_ faster

[08:50] <isBEKaml> I can actually understand that putting into context my _ancient_ machine. :D

[08:51] <tadzik> std: say $=POD.WHAT

[08:51] <p6eval> std 4b1b100: OUTPUT«ok 00:01 113m␤»

[08:51] <isBEKaml> that partially explains why I can never be as active on this as I would like to be. 

[08:51] <tadzik> rakudo: my $=POD; say $=POD.WHAT

[08:51] <isBEKaml> :(

[08:51] <p6eval> rakudo 0d3c71: OUTPUT«===SORRY!===␤Non-declarative sigil is missing its name at line 22, near "$=POD.WHAT"␤»

[08:51] <tadzik> gotcha, rakudo

[08:52] <tadzik> I hope no one, nowhere, uses $*POD in his/her code

[08:52] <tadzik> at least for now :)

[08:53] <isBEKaml> tadzik: whoa, one thing I do know. if you commit some trade-offs at the start, it'll *bite* you later. :)

[08:53] <isBEKaml> std: say $=WTF.WHAT

[08:53] <p6eval> std 4b1b100: OUTPUT«ok 00:01 113m␤»

[08:53] <tadzik> isBEKaml: well, the proper $=POD is scheduled for like a month from now :)

[08:53] <isBEKaml> hmm, so that's valid pod6 format. 

[08:53] *** Trashlord left
[08:54] <isBEKaml> tadzik: looking forward to it! :)

[08:55] <isBEKaml> rakudo: say $=WTF

[08:55] <p6eval> rakudo 0d3c71: OUTPUT«===SORRY!===␤Non-declarative sigil is missing its name at line 22, near "$=WTF"␤»

[08:57] *** isBEKaml left
[08:58] <tadzik> where are PAST::Nodes documented

[08:58] <tadzik> ?

[08:58] *** Trashlord joined
[08:59] <tadzik> looks like http://docs.parrot.org/parrot/latest/html/docs/pdds/pdd26_ast.pod.html

[09:01] *** Vlavv_ left
[09:14] *** noganex left
[09:16] *** Vlavv joined
[09:16] <tadzik> developing Rakudo is fun. I change two lines in the compiler, fire 'make test' and I can go do the laundry, nom, clean up the room..

[09:16] <felher> Hey folks. Why is my @array an Array but my %hash only does a Hash? In other words: Why is Array a class but Hash a role?

[09:20] *** silug left
[09:20] *** buubot_backup left
[09:23] <masak> felher: I don't think it's ever been established whether Array and Hash should be classes or roles.

[09:24] <masak> felher: but Hash has probably been made a role so that it can be parameterized on the type of its values.

[09:24] <masak> same could be done for Array, of course.

[09:25] <masak> (hm, or is Hash parameterized on the type of its keys?)

[09:26] *** noganex joined
[09:26] <felher> masak: Ah, k. I just wondered why @array.isa(Array) works like a charm but %hash.isa(Hash) doesnt, while @array.does(Array) doesn't work but %hash.does(Hash) does. :) I guess i should use ~~ instead of .isa and .does :)

[09:26] <masak> felher: yes, always use ~~ for type checks.

[09:27] <felher> masak: k, thnx. :)

[09:27] <masak> it abstracts over *how* something is of a certain type. :)

[09:27] <masak> rakudo: role A {}; class B does A {}; class C is B {}; say C ~~ A

[09:27] <p6eval> rakudo 0d3c71: OUTPUT«Bool::True␤»

[09:28] <masak> rakudo: role A {}; class B does A {}; class C is B {}; subset D of C {}; say D ~~ A

[09:28] <p6eval> rakudo 0d3c71: OUTPUT«===SORRY!===␤Confused at line 22, near "subset D o"␤»

[09:28] <masak> rakudo: role A {}; class B does A {}; class C is B {}; subtype D of C {}; say D ~~ A

[09:28] <p6eval> rakudo 0d3c71: OUTPUT«===SORRY!===␤Confused at line 22, near "subtype D "␤»

[09:28] <masak> hm.

[09:29] <masak> been away from Perl 6 for too long ÖP

[09:29] <masak> :P

[09:29] <masak> rakudo: role A {}; class B does A {}; class C is B {}; subtype D of C; say D ~~ A

[09:29] <p6eval> rakudo 0d3c71: OUTPUT«Could not find sub &of␤  in main program body at line 22:/tmp/D1xPMnA5dN␤»

[09:29] *** daniel-s joined
[09:29] <masak> rakudo: role A {}; class B does A {}; class C is B {}; subtype D of C where 1; say D ~~ A

[09:29] <p6eval> rakudo 0d3c71: OUTPUT«===SORRY!===␤Confused at line 22, near "subtype D "␤»

[09:30] <masak> rakudo: role A {}; class B does A {}; class C is B {}; subset D of C; say D ~~ A

[09:30] <p6eval> rakudo 0d3c71: OUTPUT«Bool::True␤»

[09:30] <masak> \o/

[09:30] <daniel-s> hey

[09:31] <tadzik> hey

[09:31] * daniel-s has news

[09:31] <daniel-s> I just had a jiu jitsu comp

[09:31] <daniel-s> I beat 2 of 3 guys

[09:31] <daniel-s> lost 2 - 0 to the other guy on points

[09:32] <daniel-s> :(

[09:33] <tadzik> how do I efficiently create a new Array in PAST?

[09:34] *** pmurias joined
[09:35] <pmurias> daniel-s: on a takedown?

[09:35] <daniel-s> nah, the organisers were using different scoring

[09:36] <daniel-s> I think it was for a guard pass and mount

[09:36] <tadzik> masak: http://nopaste.snit.ch/48185 does anything look wrong here to you?

[09:36] <daniel-s> he was only on top of me for like a moment though, then I got him off and onto his back straight away

[09:37] <tadzik> masak: seems like autovification is not working for some reason

[09:40] <masak> tadzik: looking

[09:40] <masak> tadzik: that piece of PIR doesn't tell me much at all.

[09:41] <masak> what does it do? what is it meant to do?

[09:42] <tadzik> masak: it's supposed to be 'my $POD = []; $POD.push(42)"

[09:42] <tadzik> I'm now trying binding Array.new to $POD

[09:43] <masak> rakudo: my $POD = []; $POD.push(42); say $POD.perl

[09:43] <p6eval> rakudo 0d3c71: OUTPUT«[42]␤»

[09:43] <masak> wfm

[09:44] <tadzik> Yeah, but I need to produce it using PAST, not Perl6 code :)

[09:44] <masak> oh, and you can't generate the PAST for the above because --target=PAST is broken?

[09:45] <tadzik> yeah

[09:45] <masak> why not clone an older version of Rakudo where --target=PAST worked, and try it there?

[09:45] *** satyavvd left
[09:45] <tadzik> and --target=pir for the new tryout is using &infix<:=> which is LTA too

[09:45] <tadzik> has it ever worked?

[09:45] <masak> --target=PAST? I'm pretty sure it has.

[09:45] <masak> at some point.

[09:46] <tadzik> ohwait, I think I made it working

[09:46] <tadzik> at least it doesn't crash

[09:46] <masak> \o/

[09:47] <tadzik> hrm

[09:48] <tadzik> when I create a new variable, do I need to let Actions.pm know about it somehow?

[09:48] <tadzik> Guess compile-time variable-not-found check is biting my hand now

[09:50] <tadzik> hrm

[09:51] <tadzik> looks like the code I created goes _after_ the user-code

[09:52] *** snearch left
[09:54] <masak> where do you want it to go?

[09:56] <tadzik> before :) I'm now looking at wrap_option_n_code and creating something similar for pod

[09:57] <tadzik> so one day we may want to not call it, and also ignore any other pod actions to not add runtime hit when not using --doc

[09:58] <felher> If i have 'my $array = Array.new(1,2,3,4)' i can not use 'for $array { do_something; }' to do something with every element in the array. I know that i can use 'for @($array) { do_someting; }'. But is @($array) the way to go or is there a better one?

[10:02] <masak> felher: I ususally go with $array.list

[10:03] <masak> felher: the general rule is that it's treated as an item if the sigil is scalar and you don't convert it somehow, like with @() or .list

[10:04] *** lumi_ joined
[10:04] <felher> masak: thnx. :) Are the methods of the Array-Class documented somewhere?

[10:05] <tadzik> somewhat

[10:05] <tadzik> felher: http://perlcabal.org/syn/S32/Containers.html#Array

[10:07] <tadzik> Method 'push' not found for invocant of class 'Array'

[10:07] * tadzik scratches head

[10:08] <tadzik> and I can't even --target=pir that

[10:08] *** mj41 left
[10:15] *** gbacon joined
[10:16] <felher> tadzik: thnx. :)

[10:17] <tadzik> felher: you're welcome :)

[10:20] *** Katibe joined
[10:20] *** masak` joined
[10:23] *** masak left
[10:29] *** wamba left
[10:42] *** masak` is now known as masak

[10:42] *** ggoebel left
[10:46] *** wamba joined
[10:48] *** ggoebel joined
[10:51] *** whiteknight joined
[10:51] *** orafu left
[10:55] *** awoodland left
[10:57] *** awoodland joined
[11:02] *** MayDaniel left
[11:05] *** awoodland left
[11:06] *** MayDaniel joined
[11:06] <tadzik> http://wklej.org/id/536590/ lines 69 and forth. If I have $POD like this, how do I access it in Perl 6 code? $POD, $::POD all result in "variable $POD not predeclared"

[11:07] <masak> superficially, that makes sense, I guess.

[11:08] <masak> it hasn't been created as part of the regular lexpad installation.

[11:08] <masak> I'm sure either jnthn or pmichaud could be of more help here.

[11:08] <tadzik> it's supposed to be package-scoped

[11:09] <masak> right, but the *parser* doesn't know about the variable.

[11:09] <tadzik> http://wklej.org/id/536597/ that's the patch

[11:09] <tadzik> masak: the PAST::Compiler is generating the message

[11:09] <masak> that's my point.

[11:09] <tadzik> or that's what ack said

[11:09] <tadzik> hmm

[11:11] <masak> I imagine you're making a new variable, but the parser keeps its own list of variables it considers "declared", and yous isn't on that list.

[11:11] <tadzik> yeah, makes senst

[11:14] *** daniel-s left
[11:15] *** JimmyZ joined
[11:15] <JimmyZ> hello masak

[11:15] <masak> JimmyZ: 你好

[11:16] <JimmyZ> rakudo: my @a; say @a[2]; # 这个输出的结果正确吗？

[11:16] <p6eval> rakudo 0d3c71: OUTPUT«Any()␤»

[11:18] <masak> JimmyZ: 是

[11:19] <masak> 未分配的 Array 元素是“Any“

[11:19] <JimmyZ> 嗯

[11:20] <JimmyZ> 我以为是 Mu

[11:20] <masak> 不是

[11:20] <masak> Mu 太笼统

[11:21] <masak> 它没有 postfix:<++> 等

[11:21] *** pernatiy joined
[11:22] <JimmyZ> Any does Mu， 对吧？

[11:22] *** Chillance joined
[11:22] <masak> 对, Any is Mu

[11:23] <masak> 还 Junction is Mu

[11:23] <JimmyZ> 嗯

[11:23] <masak> 他们一起坐在层次结构的顶部。

[11:25] <JimmyZ> 你的中文讲的不错

[11:25] <masak> 这样， Junction 调度实际上是 type-based 的。

[11:25] *** Chillance left
[11:25] <masak> Google Translate 中文讲的不错 ^^

[11:26] <JimmyZ> :)

[11:26] <ingy> o/ 你好Perl六

[11:27] <masak> \o ingy-山

[11:27] <ingy> haha

[11:27] *** daxim joined
[11:27] <ingy> masak ♥ my 山

[11:28] <masak> (don't know whether 山 actually corresponds to the Japanese honorific "san".)

[11:28] <masak> (probably not)

[11:28] <ingy> it's mountain

[11:28] <ingy> shan

[11:28] <masak> yeah, I know.

[11:28] *** mtk left
[11:28] <masak> so the sound is similar anyway.

[11:28] <ingy> not really :)

[11:29] <masak> phenny: en to ch "ingy-san"?

[11:29] <masak> phenny: en to zh "ingy-san"?

[11:29] <masak> how does one write "-san" in Japanese?

[11:29] *** awoodland joined
[11:30] <ingy> is yaml banned from perl六？

[11:30] <masak> banned? in what sense?

[11:30] <ingy> I think I saw it got removed

[11:30] <ingy> is it wanted back?

[11:30] <masak> removed? from where?

[11:31] * masak confused

[11:31] <ingy> I think from star

[11:31] <masak> ah.

[11:31] <ingy> it was probably broked

[11:31] <masak> that's not perl六, that's a Rakudo distribution :)

[11:31] <masak> probably pmichaud knows the reason for the borking. possibly the backlogs have the answer, too.

[11:31] <ingy> yeah but it was funnerer to type 六

[11:32] <ingy> ok

[11:33] <masak> you could have written 楽園 :)

[11:34] <masak> oh, it's 楽土. lue++

[11:36] *** mtk joined
[11:37] *** ggoebel left
[11:42] <tadzik> is it possible to compile Grammar, Actions, and then just use the old core.pir instead of generating the new one?

[11:42] <tadzik> or does Grammar and Actions go into core.pm too?

[11:45] <tadzik> is pir::say("foo") illegal in Actions.pm? I added one in a method, and the build dies: http://wklej.org/id/536615/

[11:48] <masak> tadzik: you keep showing only either your patch or its effects :P

[11:48] <masak> tadzik: they're supposed to come in pairs...

[11:49] <tadzik> :)

[11:51] *** daniel-s joined
[11:51] *** silug joined
[11:52] <tadzik> I'm gonna let it crash and will paste the patch then

[11:53] <masak> apparently "san" is written さん in Japanese.

[11:53] <masak> that's... Hiragana, I guess. wonder if there's a Kanji spelling too.

[11:54] <tadzik> http://wklej.org/id/536622/ line 54 and along

[11:56] <masak> indeed.

[11:56] *** silug left
[11:56] <masak> maybe it's pir::say_p or pir::say_s or something funny like that.

[11:56] *** silug joined
[11:56] <masak> or maybe it's nqp:: nowadays?

[11:58] *** buubot_backup joined
[11:58] <tadzik> dunno,trying the PAST::Op version

[12:04] <tadzik> okay, it compiled, but the actual call is nowhere. Is that because the rule containing pod_content is not calling .ast on it anywhere?

[12:04] *** daniel-s left
[12:05] *** Tedd1^ joined
[12:05] <tadzik> I wonder if pod_* rules should now belong to the statement-related rules, rather than to comment/whitespace related ones

[12:06] *** Tedd1 left
[12:07] <pmichaud> good morning, #perl6

[12:08] <tadzik> good morning pmichaud 

[12:08] <tadzik> oh, pmichaud, I have a question for you

[12:08] <tadzik> pmichaud: could you peek at http://irclog.perlgeek.de/perl6/2011-05-28#i_3816148 in some spare time?

[12:12] *** wamba left
[12:13] <masak> morning, pm!

[12:17] <pmichaud> tadzik: I'm not sure that patch can be correct

[12:19] <pmichaud> it's creating an empty array in $::POD  right after the INIT phase

[12:20] <pmichaud> (i.e., at the beginning of the mainline execution)

[12:21] <tadzik> yes

[12:21] <pmichaud> so..... it'll always be empty, right?

[12:22] <tadzik> unless something is added to it later

[12:22] <pmichaud> what would be adding to it?

[12:22] <tadzik> the action methods for pod nodes

[12:22] <pmichaud> note:  INIT phase

[12:22] <pmichaud> by the time you get to the INIT phase, the action nodes are long gone

[12:23] <pmichaud> program sequence is roughly    BEGIN - compile - CHECK - INIT - run - END

[12:23] <pmichaud> by the time you reach INIT, compiling has already been completed.

[12:23] <tadzik> I thought the plan is to make the pod tree built in runtime, until we have proper serialization. So pod nodes will generate PAST nodes adding stuff to $POD

[12:23] <tadzik> then the code gets generated, and the $POD is filled in in runtime

[12:24] <pmichaud> is that the plan?  that sounds... not really useful.

[12:24] <tadzik> I thought it's the plan

[12:24] <tadzik> surely a better way would be to build the whole tree in compile time and then just expose it to runtime

[12:24] <pmichaud> that's what I would think.

[12:25] <pmichaud> (that's kinda what I expected it)

[12:25] <pmichaud> s/it//

[12:25] <tadzik> yeah, but how would one achieve that?

[12:25] *** Moukeddar joined
[12:25] <pmichaud> a :loadinit node that sets the tree would work

[12:25] <Moukeddar> Hello :) O/

[12:26] <pmichaud> it could run at CHECK time, or perhaps even earlier.

[12:27] <tadzik> so the plan is: build the whole tree in compile-time, then expose the object using :loadinit somehow?

[12:27] <pmichaud> or, all of the action methods for pod could generate BEGIN blocks (or one big BEGIN block)

[12:30] <tadzik> what is the loadinit anyway, is it documented somewhere? I guess it's something like "evaluate this just before the end of the compile time"?

[12:30] *** Chillance joined
[12:30] <pmichaud> :loadinit is "evaluate this as soon as it's loaded"

[12:30] <pmichaud> it's a part of PAST

[12:31] <pmichaud> but I think BEGIN/CHECK blocks are what you really ought to aim for

[12:31] <tadzik> so the very beginning of runtime?

[12:31] <pmichaud> BEGIN/CHECK will handle any :loadinit management for you ( as well as being more portable )

[12:31] <masak> hi Moukeddar.

[12:32] <Moukeddar> how are you doing Mr ?

[12:32] <masak> Moukeddar: fine. and you?

[12:32] <Moukeddar> feeling awesome :)

[12:32] <pmichaud> :loadinit occurs even before "runtime"

[12:32] <masak> Moukeddar: had any Perl 6 thoughts recently?

[12:32] <pmichaud> :loadinit is more like "BEGIN time"

[12:33] <Moukeddar> i haven't touched any  editor in 2 months :)

[12:33] <tadzik> mhm

[12:33] <Moukeddar> 4 more weeks and i'm free :)

[12:34] <Moukeddar> the exams are keeping me busy

[12:34] <tadzik> that's like with me

[12:35] *** nymacro joined
[12:41] *** silug left
[12:46] <mberends> so where this Pod is heading, users will soon notice "the more Pod I write, the longer my program takes to run. I'll write as little Pod as possible".  I have been afraid of this since I first read S26. I think the solution is to only engage in Pod parsing if there is a 'use Pod;' statement in the program.

[12:48] <pmurias> mberends: isn't the problem a result of a sluggish pod parser?

[12:49] <mberends> pmurias: partly, and also partly forcing the startup to do potentially unnecessary work.

[12:49] <pmichaud> how up-to-date is the current S26?

[12:49] <mberends> Pod parsing should somehow be lazy.

[12:50] <mberends> pmichaud: it's complete, nobody is holding back patches afaik.

[12:51] <pmichaud> mberends: I don't think that parsing pod will be significantly slower than parsing any other part of a Perl 6 program

[12:52] <mberends> pmichaud: ok, that makes sense

[12:52] <pmichaud> yes, some things should be lazy if we can make them so.... but the basic parse shouldn't be an issue.

[12:54] <mberends> in most other languages, parsing comments or docs is *much* faster than parsing the program code though.

[12:54] <pmichaud> ...parsing, or compiling?

[12:55] <pmichaud> parsing program code can be fairly fast too

[12:55] <pmichaud> in most other languages, the comments are simply stripped

[12:55] <pmichaud> and that's why it's faster

[12:56] <pmichaud> here, we propose the comments to actually add some semantic meaning to the program

[12:57] <mberends> I've written a tokenizer in C where comments and whitespace are not stripped, but passed as annotation to the downstream code.

[13:05] *** Moukeddar left
[13:24] *** wamba joined
[13:42] <dalek> rakudo: 2ad1b52 | pmichaud++ | src/builtins/ (2 files):

[13:42] <dalek> rakudo: Fix Parcel.item, remove Seq.new_from_RPA (added in 037775e).

[13:42] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/2ad1b5229c

[13:42] <tadzik> mberends: the parser rules existing now won't probably change, the rest of the stuff will probably end up in action methods, and those can be easily nooped when we're not using --doc

[13:43] <tadzik> and the rpbench on gsoc-podparser now is as fast (or: as slow) as master

[13:46] *** nymacro left
[13:50] <pmichaud> did I run rpbench using the coretests for that one?

[13:51] <pmichaud> at the moment it's hard to say "as fast as" or "as slow as" because very few of the test files have significant pod comments.

[13:52] <sorear> good * #perl6

[13:53] <tadzik> true

[13:54] <masak> good *, sorear.

[13:55] <tadzik> hello sorear 

[13:55] <pmurias> sorear: hi

[13:56] <sorear> masak! hi.

[13:57] <sorear> hmm.  I wonder *how* we should be writing Rakudo...

[13:57] <dalek> rakudo: 64178b4 | pmichaud++ | src/ (2 files):

[13:57] <dalek> rakudo: Move Parcel.hash out of PIR and into core setting.

[13:57] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/64178b4448

[13:57] <dalek> rakudo: c7c6779 | pmichaud++ | src/core/ (2 files):

[13:57] <dalek> rakudo: Comments update -- no functional changes.

[13:57] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/c7c6779414

[13:57] <tadzik> I'm fine with the capital R

[13:59] <sorear> masak: [mountain] is on-pronounced exactly the same as -san

[13:59] <sorear> masak: the object called fu-ji-san had me quite confused for a while

[14:00] <sorear> however the honorific is normally (always?) hiragana

[14:00] <sorear> [mountain] by itself is normally /yama/ though.  (Have you learned about on and kun yet?)

[14:03] <dalek> rakudo: 30809a2 | pmichaud++ | src/core/Itera (2 files):

[14:03] <dalek> rakudo: Comment updates -- no functional changes.

[14:03] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/30809a2a78

[14:03] *** jaldhar_ left
[14:04] *** jaldhar_ joined
[14:10] *** wamba left
[14:12] <masak> sorear: no, I don't know about on and kun.

[14:14] * sorear has decided ey does not like the new mono 2.10.x profiler

[14:18] <masak> sorear: you're the only person I've met outside of a Nomic game who uses Spivak pronouns in English.

[14:20] *** gbacon left
[14:27] *** drbean left
[14:27] *** hudnix joined
[14:51] <sorear> masak: is it not a shame?

[14:56] <masak> sorear: don't stand too close, my apathy may be contagious. :) worthy cause (as is often the case), small chances of ever catching on.

[14:57] *** thou joined
[14:58] <masak> then again, if Nomic players manage to take over the world somehow...

[15:00] <sorear> I didn't voluntarily start, it just sort of happened after I spent too long in a channel where it was the norm

[15:00] <sorear> but it's awesome, so.

[15:03] <pmichaud> autotrim....

[15:04] <pmichaud> > my @a = 'a'..'z';

[15:04] <pmichaud> a b c d e f g h i j k l m n o p q r s t u v w x y z

[15:04] <pmichaud> > say @a[1,3,5 ... *]

[15:04] <pmichaud> bdfhjlnprtvxz

[15:04] <pmichaud> > say @a[1,4,7 ... *]

[15:04] <pmichaud> behknqtwz

[15:05] *** thou left
[15:07] <sorear> How does it work?

[15:07] <sorear> How happy are you with the design?

[15:07] <pmichaud> it trims when the series is detectably infinite

[15:07] <pmichaud> there are some issues -- for example:

[15:08] <pmichaud> say @a[1,3,5 ... +@a]    # not yet detectably infinite

[15:09] <pmichaud> however, that can be fixed with

[15:09] <pmichaud> say @a[1,3,5 ... +@a, *]   # detectably infinite

[15:10] <pmichaud> (might need parens)

[15:11] <pmichaud> there would still be an issue with something like    @a[1,3,5 ... @a/2]     though

[15:12] <pmichaud> so that would have to be written  @a[1, 3, 5 ... * > @a/2]   or something like that

[15:17] <masak> pmichaud: that feels quite consistent with how sequences work outside of .[] anyway.

[15:18] <pmichaud> basically, a range or sequence ending with whatever star ends up being "infinite", and thus the slice autotrims

[15:18] <pmichaud> one can also autotrim from any parcel

[15:18] <masak> sounds like an easy rule to follow.

[15:19] <pmichaud> @a[@indices, *]   # autotrims at the first element of @indices that is beyond the end of @a

[15:19] <pmichaud> so

[15:19] *** cotto left
[15:20] <pmichaud> > my @a = <a b c d>;  my @indices = 1..10; '';

[15:20] <pmichaud> > say @a[@indices].elems;

[15:20] <pmichaud> 10

[15:20] <pmichaud> > say @a[@indices,*].elems

[15:20] <pmichaud> 3

[15:20] <pmichaud> > 

[15:21] <pmichaud> might be an issue there if all(@indices) < +@a  though

[15:30] <tadzik> hrm, why is 'has $.a' 'has $a' in nqp?

[15:38] *** lumi_ left
[15:43] <pmichaud> nqp, or nqp-rx?

[15:44] <pmichaud> nqp-rx doesn't have private attributes or accessor generation.

[15:45] <tadzik> nqp

[15:45] <pmichaud> I don't know -- you'd have to ask jnthn++ I think.

[15:47] *** silug joined
[15:51] <tadzik> does nqp have something like PERL6LIB?

[15:51] <pmichaud> I don't know if it has it yet

[15:51] <pmichaud> (it certainly will at some point)

[15:52] <tadzik> I'm translating my gsocmess parser to nqp, for it will need to be nqp anyway to land in Rakudo one day

[15:54] *** ymasory joined
[15:54] <pmichaud> I don't know that that's true, but okay.

[15:54] <tadzik> well, the action methods can't really be Perl 6, can they

[15:54] <tadzik> ?

[15:54] <pmichaud> at present, they're nqp

[15:54] <tadzik> in Rakudo, now

[15:54] <pmichaud> in Rakudo master, now, they're nqp-rx

[15:55] <pmichaud> if you mean that you're translating your nqp-rx version to nqp, that's correct.

[15:55] <pmichaud> if you mean that you're putting pod parsing into nqp itself... I'm not sure about that.  :)

[15:55] <tadzik> nope, I'm translating my Perl 6 version to nqp-any :)

[15:55] <pmichaud> okay, wfm

[15:55] <tadzik> well, that would be interesting somehow :)

[15:56] <tadzik> is nqp-rx capable of 'use foo'?

[15:56] <pmichaud> no.

[15:57] <tadzik> so if I wanted to rewrite the parser to nqp-rx, I'll need to include it in every test file?

[15:57] <pmichaud> I don't understand.

[15:58] <tylercurtis> tadzik: nqp-rx use pir::load_bytecode to load PBCs, IIRC.

[15:58] <sorear> pmichaud: do you know much about 'ctmo' or do I need to ping jnthn?

[15:58] <pmichaud> sorear: you'd need to ping jnthn

[15:58] <sorear> jnthn: ping

[15:59] *** MayDaniel left
[16:04] *** lichtkind joined
[16:05] *** Aridai joined
[16:06] *** Aridai left
[16:07] *** Aridai joined
[16:09] <Aridai> rakudo: say 23 + 23

[16:09] <p6eval> rakudo 30809a: OUTPUT«46␤»

[16:10] <Aridai> rakudo: "Hello".say

[16:10] <p6eval> rakudo 30809a: OUTPUT«Hello␤»

[16:15] <sorear> Aridai: welcome

[16:15] <Aridai> sorear, Hello

[16:15] *** wamba joined
[16:20] <Aridai> How do I print the items form a hash?

[16:24] <tylercurtis> rakudo: my %hash = 1 => 2, 3 => 4; for %hash.kv -> $k, $v { say "$k => $v" }

[16:24] <p6eval> rakudo 30809a: OUTPUT«1 => 2␤3 => 4␤»

[16:24] <tylercurtis> Aridai: ^^

[16:24] <Aridai> rakudo: my %h = "car" => 3, "sun" => 34; %h.perl  I've tried somthing like this.

[16:24] <p6eval> rakudo 30809a: OUTPUT«===SORRY!===␤Confused at line 22, near "%h.perl  I"␤»

[16:28] *** CupiD joined
[16:28] <tylercurtis> rakudo: my %h = "car" => 1, "sun" => 34; say %h.perl;

[16:28] <p6eval> rakudo 30809a: OUTPUT«{"car" => 1, "sun" => 34}␤»

[16:28] <tylercurtis> I don't actully see how what I did differs from what you tried, though...

[16:31] <sorear> tylercurtis: Aridai forgot to include # before the comment

[16:31] *** TBA joined
[16:31] <tylercurtis> Oh, yes.

[16:31] <sorear> also, Aridai forgot the ".say

[16:31] <sorear> "

[16:32] <dalek> niecza: 176cbba | sorear++ | TODO:

[16:32] <dalek> niecza: Eval programme

[16:32] <dalek> niecza: review: https://github.com/sorear/niecza/commit/176cbbae53

[16:32] <dalek> niecza: 202659e | sorear++ | / (7 files):

[16:32] <dalek> niecza: Remove some redundant allocations from list iteration

[16:32] <dalek> niecza: review: https://github.com/sorear/niecza/commit/202659e04a

[16:32] <dalek> niecza: e6af5b8 | sorear++ | perf/ (2 files):

[16:32] <dalek> niecza: New microbenchmarks from STD analysis

[16:32] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e6af5b8311

[16:33] <tylercurtis> sorear: I noticed that. I was just confused by why that difference would cause a parse error (since I didn't notice the lack of #).

[16:33] *** drbean joined
[16:34] <Util> New RC solution: http://rosettacode.org/wiki/Gray_code#Perl_6

[16:36] <tadzik> is there something like s/// in nqp?

[16:37] <tadzik> (nqp-rx)

[16:38] *** drbean left
[16:38] <Aridai> tylercurtis, I fogat to put the semicolon.

[16:41] *** silug left
[16:41] <tylercurtis> tadzik: https://github.com/perl6/nqp-rx/blob/master/src/setting/Regex.pm#L30

[16:41] *** CupiD left
[16:42] <tadzik> oh, this way. Thanks tylercurtis 

[16:42] <tylercurtis> tadzik: here's the test: https://github.com/perl6/nqp-rx/blob/master/t/setting/05-subst.t

[16:50] <tadzik> is there any set of conditions under which passing $/ to a method will count as two parameters?

[16:50] <tadzik> if I call self.any_block(), it's "1 parameter passed, 2 expected". self.any_block($/) becomes "3 parameters passed, 2 expected"

[16:51] *** JimmyZ left
[16:57] *** y3llow left
[16:59] <masak> tadzik: you sure the two errors are for the same invocation?

[17:02] *** y3llow joined
[17:03] *** drbean joined
[17:07] <masak> Util: nice use of the bitwise operators.

[17:07] <TBA> how can i dynamically import a package/class at runtime? something along the lines of "use $class". tried various require/eval/import combinations from p5 but can't find anything that works

[17:07] <Util> masak: thanks!

[17:07] <masak> Util: $n +^= ($mask +> 1)

[17:08] <masak> Util: it works without parens there too, right?

[17:08] *** drbean left
[17:09] <masak> I know, I'm quite far towards the end of the spectrum that dislikes precedence-resolving parens, even for clarity's sake. :)

[17:09] <Aridai> How do I add a element to an array?

[17:10] <masak> TBA: 'require' is implemented in Rakudo, I believe.

[17:11] <masak> Aridai: @array.push($element)

[17:11] <Util> masak: yes, thanks for catching that; I had been using a longer form that needed it.

[17:11] <masak> ah.

[17:12] <masak> I failed to mention that the code otherwise looks very well-balanced and Perl6ish. Util++

[17:13] <tadzik> masak: yep

[17:15] <TBA> masak: i'm using rakudo, require works insofar as it finds the class file and doesn't die, but the class doesn't appear to get imported. rakudo dies with 'Cannot find sub My::Package in main program body at line 1'

[17:15] <Aridai> masak, thanks

[17:16] <tadzik> TBA: require is semi-implemented actually :)

[17:16] <TBA> tadzik: semi-implemented in what sense? ;p

[17:16] <tadzik> TBA: I think that importation is broken

[17:17] <TBA> lol... that explains a lot!!

[17:17] <tadzik> but you should be able to require Foo; Foo::Bar()

[17:17] <tadzik> the eval should work too, but, wll

[17:17] <TBA> will play around a bit more, i can use/require a package name and that works, but as soon as I try to load dynamically it falls apart lol

[17:18] <sorear> Aridai: TBA: where did you hear about Perl6?  It's not usual for us to get two new people in such quick succession

[17:18] <tadzik> heh, I became curious too

[17:19] *** Mowah joined
[17:19] <TBA> sorear: been using p5 for as long as i can remember, waiting for p6 since p5 came out! been playing with the various rakudo builds for about 9 months but now starting to use p6 when i can, want to get used to the language before it becomes a serious p5 replacement

[17:20] <masak> TBA: good for you!

[17:20] <masak> welcome!

[17:20] <TBA> tadzik, masak: i'll start digging in the rakudo source to see what happens with requires, thanks for all your help!

[17:20] <TBA> masak: ty

[17:20] <masak> we'll be here for your next question. ask early, ask often. :P

[17:20] <tadzik> TBA: I tried implementing import recently, the result was "meh, jnthn has almost done it in nom anyway, I'll wait for nom"

[17:21] <masak> we're all waiting for nom.

[17:21] <TBA> oh i will ;) been meaning to get a bit more involved in p6 but been seriously lacking time, making time for it now lol

[17:21] <masak> it's like a "Perl 6 within the Perl 6" :P

[17:21] <TBA> excuse my ignorance (or memory lol), nom?

[17:22] <TBA> tadzik: its likely i'll come to the same conclusion ;p

[17:22] <masak> TBA: oh, it's an internal name.

[17:22] <masak> TBA: the name of a Rakudo branch, to be exact.

[17:22] <tylercurtis> TBA: it stands for "new object model", I believe.

[17:22] <masak> aye.

[17:23] <tylercurtis> It's a branch that reworks Rakudo to use the new version of NQP (Not Quite Perl, which is a somewhat simpler Perl 6-resembling language used to implement Rakudo).

[17:24] <sorear> generally, nom cleans up a lot of the very low-level details of objects and packages

[17:24] <sorear> rakudo: Match.^methods.say

[17:24] <p6eval> rakudo 30809a: OUTPUT«Method 'methods' not found for invocant of class 'P6metaclass'␤  in main program body at line 22:/tmp/Zu1NKEo2RZ␤»

[17:24] *** lumi_ joined
[17:24] <sorear> nom will fix that, for instance

[17:24] <Aridai> sorear, I've watched a video presentation about Perl 6 and I've decided to try it.

[17:24] <sorear> *every* standard Perl 6 class will have a usable metaclass

[17:26] <tylercurtis> It also implements some not as precisely low-level things that weren't previously implemented: for example, representations and (I think) native types(int, num, etc.)

[17:26] *** daxim left
[17:27] <Aridai> Do can you guys  recommend a tutorial to learn more about Perl 6?

[17:27] <TBA> nom sounds good, how far along is it in terms of usability?

[17:27] <masak> Aridai: have you found http://perl6advent.wordpress.com/ ?

[17:28] <masak> TBA: hard to estimate. it just started building the other day, though.

[17:28] <masak> TBA: far from being as featureful as Rakudo master, though.

[17:28] <TBA> masak, aridai: i read that as it was being published, can definitely recommend it, clears up a few things about p6 lol

[17:28] <masak> aye.

[17:28] *** birdwindupbird joined
[17:29] <Aridai> Thank you for you suggestion; I will take a look.

[17:30] <TBA> masak: will have a look tonight if I get the chance, will get involved if i can

[17:33] *** drbean joined
[17:33] *** birdwindupbird left
[17:34] <masak> TBA: sounds nice. make sure you stick around, this is a nice place.

[17:35] *** lumi_ left
[17:35] *** lumi_ joined
[17:38] *** drbean left
[17:39] *** birdwindupbird joined
[17:41] <masak> rakudo: say .[0, 1, 0] given <bird windup>

[17:41] <p6eval> rakudo 30809a: OUTPUT«birdwindupbird␤»

[17:41] <masak> \o/

[17:43] <masak> rakudo: my @a = 'a' .. 'z'; @a[^10].=flip; say @a

[17:43] <p6eval> rakudo 30809a: OUTPUT«j i h g f e d c b aAny()Any()Any()Any()Any()Any()Any()Any()Any()klmnopqrstuvwxyz␤»

[17:43] <masak> hm.

[17:44] <masak> this surprises me.

[17:44] <masak> rakudo: my @a = 'a' .. 'j'; @a[^10].=flip; say @a.perl

[17:44] <p6eval> rakudo 30809a: OUTPUT«["j i h g f e d c b a", Any, Any, Any, Any, Any, Any, Any, Any, Any]␤»

[17:44] <masak> ah.

[17:44] <masak> rakudo: my @a = 'a' .. 'z'; @a[^10].=reverse; say @a

[17:44] <p6eval> rakudo 30809a: OUTPUT«jihgfedcbaklmnopqrstuvwxyz␤»

[17:45] * masak <-- bug is in there, not in Rakudo :)

[17:46] *** Aridai left
[17:54] *** kanishka joined
[18:03] *** drbean joined
[18:08] *** drbean left
[18:14] <dalek> niecza: 2c9ae3e | sorear++ | lib/ (2 files):

[18:14] <dalek> niecza: Add missing Any.exists-key accelerator

[18:14] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2c9ae3eb68

[18:14] <dalek> niecza: 6e796b3 | sorear++ | lib/C (3 files):

[18:14] <dalek> niecza: Call action methods on the same runloop

[18:14] <dalek> niecza: review: https://github.com/sorear/niecza/commit/6e796b3135

[18:14] <dalek> niecza: 23293ec | sorear++ | lib/Cursor.cs:

[18:14] <dalek> niecza: Cut an unneeded allocation out of RxFrame::.ctor

[18:14] <dalek> niecza: review: https://github.com/sorear/niecza/commit/23293ec9b4

[18:34] *** drbean joined
[18:38] *** drbean left
[18:41] *** wamba left
[18:58] *** daniel-s joined
[19:02] <masak> 'night, #perl6.

[19:02] *** masak left
[19:02] <sorear> 'night!

[19:04] <daniel-s> hi

[19:05] <sorear> hello, daniel-s.

[19:08] *** kanishka left
[19:14] *** mtk left
[19:17] *** birdwindupbird left
[19:19] *** cotto joined
[19:25] *** mtk joined
[19:27] *** Tedd1 joined
[19:28] *** birdwindupbird joined
[19:28] *** kanishka joined
[19:28] *** Tedd1^ left
[19:39] *** spinclad left
[19:49] *** mj41 joined
[19:54] *** silug joined
[19:54] *** kanishka left
[20:02] *** mtk left
[20:03] *** MayDaniel joined
[20:08] *** Katibe left
[20:12] *** mberends left
[20:12] *** mberends joined
[20:19] *** Mowah left
[20:21] *** wamba joined
[20:28] *** daniel-s left
[20:34] *** silug left
[20:34] *** silug joined
[20:37] <dalek> niecza: e80f452 | sorear++ | / (2 files):

[20:37] <dalek> niecza: Avoid slurpies in nam generation, tweak STD.ws to be closed to backtracking

[20:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e80f452c5b

[20:37] <dalek> niecza: 94d8f55 | sorear++ | / (4 files):

[20:37] <dalek> niecza: Fixes for Match.synthetic

[20:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/94d8f557cc

[20:43] *** lumi_ left
[20:44] *** envi left
[20:45] *** drbean joined
[20:49] *** drbean left
[20:54] *** ymasory left
[20:55] *** birdwindupbird left
[21:04] *** ymasory joined
[21:04] *** wamba left
[21:09] *** mathw left
[21:10] *** molaf left
[21:15] *** drbean joined
[21:19] *** drbean left
[21:22] *** silug left
[21:45] *** drbean joined
[21:46] *** Psyche^ joined
[21:49] *** Patterner left
[21:49] *** Psyche^ is now known as Patterner

[21:50] *** drbean left
[21:54] *** MayDaniel left
[21:57] *** spinclad joined
[21:57] *** lumi_ joined
[22:01] *** mathw joined
[22:15] *** drbean joined
[22:18] <dalek> niecza: cc6a5c3 | sorear++ | / (3 files):

[22:18] <dalek> niecza: Improve inlining for , and =>

[22:18] <dalek> niecza: review: https://github.com/sorear/niecza/commit/cc6a5c3d0f

[22:18] <dalek> niecza: ded9dfa | sorear++ | lib/CORE.setting:

[22:18] <dalek> niecza: Retire RAWCREATE

[22:18] <dalek> niecza: review: https://github.com/sorear/niecza/commit/ded9dfa896

[22:19] *** drbean left
[22:28] *** mj41 left
[22:45] *** donri left
[22:45] *** drbean joined
[22:51] *** drbean left
[22:57] <dalek> niecza: bae3748 | sorear++ | / (2 files):

[22:57] <dalek> niecza: Rewrite Parcel.LISTSTORE using new iterator API, ($x,$y) = ($y,$x) is 5x faster

[22:57] <dalek> niecza: review: https://github.com/sorear/niecza/commit/bae3748c93

[22:57] <dalek> niecza: e41e2cf | sorear++ | / (3 files):

[22:57] <dalek> niecza: Tweak $<foo> to play nicer with inliner

[22:57] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e41e2cf2d9

[23:03] *** pmurias left
[23:06] *** TBA2 joined
[23:07] <TBA2> quick question, how do i get hold of the nom branch from git? git clone https://github.com/rakudo/rakudo/tree/nom doesn't seem to work

[23:07] *** noganex left
[23:07] *** TBA left
[23:11] *** noganex joined
[23:11] *** pernatiy left
[23:15] *** drbean joined
[23:18] <TBA2> ok, am i right in thinking i git clone the normal rakudo.git then git checkout nom? *confused*

[23:19] *** drbean left
[23:21] <benabik> TBA2: Yes

[23:24] <TBA2> benabik: thanks, not a git user, didn't expect it to be that easy (svn makes it well known when things change :p)

[23:24] <benabik> TBA2: Switching branches is expected and common in git, so it doesn't make a big deal about it.

[23:45] *** drbean joined
[23:49] *** Limbic_Region joined
[23:49] *** drbean left
[23:57] *** dukeleto left
[23:59] *** dukeleto joined
[23:59] *** dukeleto left
