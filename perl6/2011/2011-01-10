[00:02] *** ashleydev joined
[00:03] *** rindolf left
[00:06] <snarkyboojum> cosimo: ping

[00:07] <lue> hello world o/

[00:07] <takadonet> lue: yo

[00:07] <snarkyboojum> hellue

[00:08] <sorear> phenny: tell masak Assuming you went the Debian route, you're missing something with a name like libmono2.0-cil

[00:08] <phenny> sorear: I'll pass that on when masak is around.

[00:11] <snarkyboojum> Niecza build error on a clean checkout on OS X FWIW - https://gist.github.com/772167

[00:11] <snarkyboojum> was building a few days ago

[00:16] *** pmurias left
[00:16] *** ashleydev left
[00:19] <snarkyboojum> I'm having a strange issue where running a test for one of cosimo++'s perl-facter modules is causing the perl6 process to consume memory until killed manually - has to do with blib being included in $PERL6LIB prior to running prove - https://gist.github.com/772170

[00:20] <snarkyboojum> not an issue with the module that I can tell, as it passes tests ok, seems to be some weirdness with using the blib version of the module when running prove for this one module

[00:28] <colomon> I had problems with facter going berserk as well.

[00:31] *** takadonet left
[00:32] <snarkyboojum> colomon: ah good to hear it's reproducible - it basically stops me from being about to use neutro's smoker.pl

[00:34] <snarkyboojum> colomon: interestingly, it works if I remove the compiled PIR version of Facter::Util::Resolution in the blib...

[00:34] <snarkyboojum> blib directory even

[00:49] *** QinGW joined
[00:56] <colomon> sorry, my computer was taken over for Thomas the Tank Engine watching.  Back in a minute....

[00:59] <snarkyboojum> ah - turns out it's just the PIR version of this module causing perl6 is blow up and nom memory until manually forces to close

[01:00] <snarkyboojum> forced

[01:03] <dalek> sprixel: ba0654b | diakopter++ | sprixel/ (12 files):

[01:03] <dalek> sprixel: Add Complex (Complex64), BigRational, and BigInteger as types easily accessible from perlesque code, to be used as REPRs.

[01:03] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/ba0654b59f

[01:06] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_basics_tablet

[01:06] <snarkyboojum> phenny: tell cosmio, FWIW - it looks like the compiled PIR version of Facter::Util::Resolution, when used, causes Rakudo to use excessive amounts of memory until it is killed

[01:06] <phenny> snarkyboojum: I'll pass that on when cosmio is around.

[01:07] <snarkyboojum> phenny: tell cosimo, but works OK when the PIR version is removed and the .pm version is used

[01:07] <phenny> snarkyboojum: I'll pass that on when cosimo is around.

[01:08] <diakopter> re ba0654b, note that those types have built in implicit conversions to all the other built-in CLR value types

[01:18] <diakopter> perlesque: my $a = Complex.new(4452, 3325); say($a); say($a.GetType)

[01:18] <p6eval> perlesque: OUTPUT«(4452, 3325)␤System.Numerics.Complex␤»

[01:21] <diakopter> perlesque: my $a = Complex.new(4452, 3325); my $b = Complex.new(2,8); say($a); say($a.GetType); say($a / $b); say($a * $b)

[01:21] <p6eval> perlesque: OUTPUT«(4452, 3325)␤System.Numerics.Complex␤(522.117647058824, -425.970588235294)␤(-17696, 42266)␤»

[01:21] *** ashleydev joined
[01:22] <diakopter> tiz speedy and stuff

[01:26] * diakopter must now debug why generic types from CLR corlib are getting thrown into *my* new assembly

[01:28] <sorear> ?

[01:29] <diakopter> I dunno.

[01:29] <diakopter> more info in a bit

[01:29] <diakopter> my new ModuleBuilder, I mean

[01:34] *** _twitch joined
[01:35] <diakopter> fixed

[01:35] <diakopter> now to see whether that fixes a seemingly-unrelated error on mono

[01:45] *** redicaps joined
[01:53] *** ashleydev left
[02:01] *** envi joined
[02:05] *** _twitch left
[02:39] *** xinming left
[02:45] *** molaf_ joined
[03:34] *** redicaps left
[03:35] *** woosley joined
[03:36] *** xinming joined
[03:41] *** agentzh joined
[04:06] *** Quadrescence joined
[04:06] <Quadrescence> http://i.imgur.com/qTLPM.gif

[04:11] *** satyavvd joined
[04:16] <diakopter> um

[04:16] *** orafu joined
[04:23] *** Su-Shee_ joined
[04:31] <coldhead> that is powerful awesome, Quadrescence

[04:45] *** fIorz joined
[04:46] *** fIorz left
[04:46] *** florz joined
[04:48] *** florz is now known as fIorz

[05:10] *** satyavvd left
[05:11] *** Quadrescence left
[05:14] *** jhuni left
[05:15] *** fIorz left
[05:15] *** fIorz joined
[05:16] *** satyavvd joined
[05:27] *** fIorz left
[05:27] *** fIorz joined
[05:45] *** icwiener joined
[05:52] *** fIorz left
[05:52] *** fIorz joined
[05:56] *** kaare_ joined
[06:03] *** stkowski joined
[06:03] *** ashleydev joined
[06:04] *** stkowski left
[06:15] *** cafesofie joined
[06:15] *** fIorz left
[06:15] *** fIorz joined
[06:16] *** Quadrescence joined
[06:16] <Quadrescence> http://www.youtube.com/watch?v=sZr3_Ac_nB4

[06:27] *** ashleydev left
[06:28] *** fIorz left
[06:28] *** fIorz joined
[06:33] *** kanishka joined
[06:34] *** risou joined
[06:39] *** cjk101010 joined
[06:39] *** fIorz left
[06:39] *** fIorz joined
[06:39] *** fIorz is now known as florz

[06:40] *** florz is now known as fIorz

[06:51] *** fIorz left
[06:51] *** fIorz joined
[06:51] *** fIorz is now known as florz

[06:53] *** florz is now known as fIorz

[07:03] *** fIorz left
[07:03] *** fIorz joined
[07:03] *** fIorz is now known as florz

[07:04] *** florz left
[07:04] *** florz joined
[07:10] *** risou_ joined
[07:11] *** wtw joined
[07:12] *** risou left
[07:33] *** icwiener left
[07:55] *** cjk101010 left
[08:00] *** Quadrescence left
[08:10] *** risou_ left
[08:13] *** risou joined
[08:16] *** daxim joined
[08:18] *** MayDaniel joined
[08:19] *** teee joined
[08:20] *** teee left
[08:22] *** typepeter joined
[08:22] *** u12844 joined
[08:23] *** MayDaniel left
[08:23] <typepeter> Is it possible to implement perl6 in C? Though it's difficult....

[08:26] <sorear> sure

[08:26] <sorear> perl5 was, after all

[08:27] <typepeter> thank you,sorear :D

[08:27] <sorear> the main issue will be the grammar - nobody except au knows how macros should work with a non-Perl grammar

[08:27] *** Trashlord joined
[08:28] *** yarp joined
[08:29] *** GinoMan joined
[08:30] <typepeter> because of the dynamic structure of perl6?I meant, maybe written in C,it might occur many problems in the runtime?

[08:34] <typepeter> as i knew,everything in C lang is a value or a pointer (just in pure C)

[08:37] <typepeter> so we can consider everything in C is a pointer to executeable block(function) or a pointer to data,or just pure values. 

[08:37] <typepeter> In perl6,everything is a reference to an object

[08:39] <typepeter> but,what's the difference between implementation of perl5 and perl6? 

[08:46] <plobsing> typepeter: are you implying implementing Perl 5 would be easy? I think Topaz teaches us something different.

[08:47] <typepeter> Sorry,I don't imply that...I just think about the difference

[08:48] <woosley> maybe implement Perl6 in C is a super hard work

[08:49] <plobsing> you'd greenspun a lot. if you accept that upfront, you would probably come up with a VM.

[08:50] *** Su-Shee_ is now known as Su-Shee

[08:54] *** flussence_ joined
[08:56] <typepeter> plobsing: thank you:D I'll study more about it

[08:57] <moritz_> A compiler is "just" text processing with some kind of output, often binary

[08:58] <moritz_> usually writing text processing programs in high level languages is more (programmer time) efficient than writing it in C

[09:01] *** justatheory left
[09:03] <mathw> you could implement it in assembly language if you wanted to... but it'd be rather painful :)

[09:07] <cosimo> snarkyboojum: cool, thanks

[09:07] <phenny> cosimo: 01:07Z <snarkyboojum> tell cosimo but works OK when the PIR version is removed and the .pm version is used

[09:07] <cosimo> morning, #perl6

[09:07] <moritz_> good morning zebras!

[09:10] *** fhelmberger joined
[09:11] <sorear> hi cosimo

[09:12] *** cjk101010 joined
[09:16] *** cjk101010 left
[09:19] *** fhelmberger left
[09:21] *** cjk101010 joined
[09:24] *** woosley1 joined
[09:24] *** masak joined
[09:24] <masak> morning, #perl6

[09:24] <phenny> masak: 00:08Z <sorear> tell masak Assuming you went the Debian route, you're missing something with a name like libmono2.0-cil

[09:25] *** woosley left
[09:25] <masak> ok.

[09:26] <typepeter> Hence,There is no necessity to implement it in C...?(if it's just for the running performance)

[09:27] <Su-Shee> hey you've got paid a nice compliment. compared to python 3 and ruby 2 some people like to have your productivity :)

[09:27] <Su-Shee> (you = you perl 6 developers)

[09:27] <masak> :)

[09:27] <masak> Su-Shee: url?

[09:28] <moritz_> typepeter: the choice of implementation language will likely have only minor impact on the run time speed

[09:28] <Su-Shee> masak: still the two threads about my article in reddit/hn. (reddit -> "Get something the size of Perl6 designed and implemented in two years? Python 3 extended an existing VM and was a "relatively mild improvement" (GvR), yet took longer than that.

[09:28] <moritz_> typepeter: the characterstics of the run time system are much more important

[09:28] <Su-Shee> I'd like some of your productivity juice!

[09:32] <typepeter> moritz_ : thank you:)  it means,we care more for the flexibility,and reuse

[09:33] <moritz_> typepeter: that's not what I said

[09:33] <moritz_> typepeter: we do too, but it's just that a good JIT might beat a classical runtime environment, independently of the implementation language

[09:33] <moritz_> or a good metho cache

[09:33] <moritz_> or Whatever

[09:34] <moritz_> *method

[09:34] *** dakkar joined
[09:35] *** pmurias joined
[09:35] <pmurias> typepeter: what do you mean by implement it to C?

[09:36] <masak> Su-Shee: ah, that argument shows up now and then.

[09:36] * masak now has a compiled niecza again o/

[09:36] <masak> sorear++

[09:37] <Su-Shee> masak: well it is a compliment I'd say. :)

[09:37] <pmurias> typepeter: compiling perl6 to C is possible and has been done before, but the problem is you have to have a lot of runtime stuff?

[09:37] <pmurias> s/?//

[09:38] <moritz_> std: s/?//

[09:38] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Quantifier quantifies nothing at /tmp/kPldIdd_Jn line 1:␤------> [32ms/?[33m⏏[31m//[0m␤Check failed␤FAILED 00:01 119m␤»

[09:40] <masak> Su-Shee: something between that and a defense for Perl 6 taking some time to emerge.

[09:41] <typepeter> pmurias: i meant,"implement an interpretor in C",or "a backend in C for Perl6"

[09:42] <pmurias> the second one has been done

[09:42] <typepeter> moritz_ : Mm,I know

[09:42] <pmurias> typepeter: and parrot is the first one

[09:44] <pmurias> but Perl 6 doesn't map directly onto C (garbage collection, dynamism, multimethods) so it's really C+a runtime library

[09:45] <pmurias> typepeter: with sufficent type inference we could translate my $foo=123 into int foo=123 in some cases, but that's a hard problem

[09:48] <pmurias> typepeter: and even if we eventually have a smart enough compiler we might get better performance at first targeting a very fast vm so we don't have to care about optimising the garbadge callector

[09:48] <typepeter> pmurias: I know,but...if by using hash implementation,it might be: %local{foo}=123 ,then might be right.

[09:49] <typepeter> pmurias: I see.

[09:49] *** woosley1 left
[09:53] *** Bin_Eliazer joined
[09:55] <Bin_Eliazer> Helo, I heard perl6 will be ready in 2011, is that true? if not, how of perl6 has been implemented according to the specs? 

[09:58] <masak> Bin_Eliazer: in some senses Perl 6 is "ready" today. in other senses, it won't be ready in 2011.

[09:59] <masak> Bin_Eliazer: when you ask how much of Perl 6 has been implemented, in which units would you like your answer. are you content with the reply "quite a lot"? :)

[10:01] <Bin_Eliazer> masak: I mean in sense of "I can tell my programmer: Perl v6.0.0.0 is out, optimized and releable.. lets start using it!"

[10:02] <masak> Bin_Eliazer: based on those criteria, you might want to wait a bit. but recall that language usage is not an on/off switch. it takes some time to get used to a platform, during which it doesn't have to be "complete".

[10:02] <masak> Bin_Eliazer: example: I've been using Rakudo Perl 6 for two and a half years now, writing all kinds of applications: web apps, regex engines, compilers...

[10:03] <masak> I wouldn't say Rakudo is fast, by any standard. but not all problems require speedy solutions.

[10:03] *** QinGW left
[10:04] <gfldex> slow software leave you move time to think :)

[10:04] <masak> and gives you more reason to choose a smart solution :)

[10:04] <masak> Bin_Eliazer: the current implementations target "early adopters", people who are curious enough about Perl 6 to withstand some bumps and bruises.

[10:05] <typepeter> masak: could I know what kind of web apps is better in perl6?:P

[10:05] <Bin_Eliazer> masak: I tried personally translating our reporting system from perl5.6 to perl6.. it is fun to write in perl6.. and.... it is fun.........!

[10:05] <typepeter> but,mod_parrot seems couldn't work under win32 ...

[10:06] *** u12844 left
[10:06] <masak> typepeter: I wouldn't claim any technological *advantages* yet, mind you. I'm saying it's possible.

[10:06] <masak> typepeter: I imagine the advantages will come, though.

[10:07] <Bin_Eliazer> masak: but perl is about features and speed.. and I think that speed with be the issue that will stick to perl6 for a long time.. 

[10:07] <masak> Bin_Eliazer: I think you're right.

[10:07] <masak> Bin_Eliazer: there are smart people around here working hard on the problem of speed.

[10:07] <sorear> typepeter: I think you need to study the concept of Turing equivalence some more.

[10:08] <masak> people in the Parrot camp, some Rakudo devs, and the entire Niecza team are all working on performance in various ways.

[10:09] <gfldex> and the power of perl6 as a language of niceness wont show up until editors support it properly

[10:09] <gfldex> strict types allow quite a few shortcuts

[10:10] <Bin_Eliazer> masak: I am sure the results will be great.. and am sure everybody is doing his best.. for now.. I have admit that the syntax and programming style of perl6 is unique and very enjoyable.. :)

[10:10] <apejens> What is Niecza?

[10:10] <moritz_> apejens: a Perl 6 compiler

[10:10] <moritz_> niecza: say "hi"

[10:10] <p6eval> niecza v1-114-g656d5f3: OUTPUT«hi␤»

[10:10] <apejens> so another implementation than rakudo?

[10:11] <moritz_> right

[10:11] <moritz_> niecza compiles to the CLR

[10:11] <moritz_> ie mono or .NET

[10:11] <apejens> aha

[10:19] <typepeter> sorear: why...?

[10:20] <sorear> typepeter: You doubted that Perl 6 in C was possible

[10:20] <Bin_Eliazer> By the way.. a quetion for those who have been developing perl6 since the early 2000's.. Do you think ParrotVM could be the choice that is delaying the birth of the new language? 

[10:21] <masak> Bin_Eliazer: I think that would be an oversimplification at best.

[10:21] <sorear> the birth of Perl6 wasn't delayed

[10:21] <sorear> it's in infancy, not overdue

[10:21] <masak> Bin_Eliazer: how long would *you* take to completely redesign a successful 13-year-old scripting language? :)

[10:22] <masak> ...including providing a performant implementation for your new design.

[10:22] <Bin_Eliazer> masak: another 13 years I guess :)

[10:22] <sorear> a lot of people are expecting a delivery date, but what's really happinging is a date of majority... which are completely arbitrary and largely in the eye of the beholder

[10:22] <masak> Bin_Eliazer: something like that :)

[10:22] *** flussence_ is now known as flussence

[10:22] <masak> Bin_Eliazer: meaning we still have 3-6 years left, depending on how one counts.

[10:23] <masak> Bin_Eliazer: Rakudo is four years old. go back and see what you could and could not do with Perl back in 1991.

[10:23] <flussence> I'd personally consider p6 ready for "general" use once someone ports Frozen Bubble to it (and it's playable).

[10:24] <typepeter> masak: sorry...there's a misunderstand...I meant , is there any good webapps framework in perl6. i'm not doubting you...

[10:24] <masak> typepeter: sorry if I got defensive too fast :)

[10:24] <masak> typepeter: I'm using a 250-line static web page generator written in Perl 6 for my blog.

[10:24] <masak> typepeter: it's still in active deveopment, but it works today.

[10:25] <Bin_Eliazer> masak: You mean perl in 90's is worse than perl6 now?

[10:25] <masak> Bin_Eliazer: in some senses, yes.

[10:25] <Bin_Eliazer> masak: In that case I disagree..:)

[10:26] <masak> feel free.

[10:26] *** coldhead joined
[10:29] <Bin_Eliazer> masak: nothing personal :) I admire your and everybodys work for the open source community.. I wish I could have a part in that too...

[10:31] <sorear> I thought the same thing half a year ago

[10:31] <sorear> Then I got tired of wishing

[10:31] <Bin_Eliazer> sorear: I have a business to run... :) maybe after retirement..

[10:32] <masak> sorear++ # JFDI

[10:33] <pmurias> sorear: what does newboundvar do?

[10:34] <typepeter> masak: cool :D

[10:36] <sorear> pmurias: handles the active aspects of binding

[10:36] <sorear> e.g. in my $foo ::= $bar  newboundvar is in charge of stripping the container

[10:37] <sorear> my $foo := funct; # newboundvar makes sure funct returned >=Any, and makes the value not interpolate

[10:37] *** Bin_Eliazer left
[10:37] <sorear> my @foo := funct; # newboundvar makes the value do interpolate

[10:37] *** tzhs joined
[10:37] <sorear> newboundvar also handles binding autovivification

[10:38] <pmurias> hmm, it would be nice to have that documented in docs/nam.pod what all the various flags to that do

[10:41] <sorear> yes, yes it would be

[10:41] * sorear doesn't like documenting volatile stuff

[10:42] *** agentzh left
[10:43] *** pmurias left
[10:45] *** pmurias joined
[10:48] <typepeter> sorear: but, implementation in C seems no matter with Turing Equivalence...if we use the concept and coding a interpretor in C,why it's impossible? I jsut think about that it's possible,not because it's better solution.

[10:49] <moritz_> typepeter: I think sorear's point was more that it doesn't really mattter which language it's implemented in

[10:50] <moritz_> it's possible, but it makes more sense to use whatever language is best suited

[10:50] <typepeter> sorear: Thank you:) I just think about it.I'm not doubting you... Thank you for your patient...I got a lot from you:)

[10:56] <typepeter> moritz: Mm,I see.Thank you:) 

[10:57] <dalek> niecza: 2227cd8 | sorear++ | v6/ (8 files):

[10:57] <dalek> niecza: [v6] Second batch of fixes

[10:57] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2227cd8247

[10:57] <dalek> niecza: 8c23155 | sorear++ | v6/ (5 files):

[10:57] <dalek> niecza: [v6] Third batch of fixes

[10:57] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8c23155a49

[11:00] *** pmurias left
[11:00] *** mkramer1 joined
[11:06] *** flussence left
[11:07] *** flussence joined
[11:11] <masak> rakudo: my $number = 24 but role { method Str { self.flip } }; say $number; say ~$number

[11:11] <p6eval> rakudo bdbf3f: OUTPUT«24␤24␤»

[11:11] <masak> hm.

[11:11] <flussence> Should .indent assume a default of "*"? It's not in spec, but it seems like an obvious choice.

[11:11] <masak> rakudo: my $number = 24 but role { method Stringy { self.flip } }; say $number; say ~$number

[11:11] <p6eval> rakudo bdbf3f: OUTPUT«24␤24␤»

[11:11] *** roen_ joined
[11:11] <masak> flussence: this was discussed the other day. my contention is "no".

[11:11] <flussence> ok.

[11:12] <masak> flussence: we can always introduce that default later if it turns out it hurts too much not to have it.

[11:12] <masak> it would be more difficult to remove it if it turns out to have been a bad idea to have it.

[11:12] <flussence> good point.

[11:12] *** nakashiman joined
[11:12] <flussence> (wrote 4 more tests on the bus, whee)

[11:13] <masak> I think .indent(*) is a nice function, but I don't consider it the "default" behavior of .indent

[11:15] <dalek> niecza: 300f88c | sorear++ | v6/ (2 files):

[11:15] <dalek> niecza: [v6] Fourth batch of fixes; say "Hello, world" runs!

[11:15] <dalek> niecza: review: https://github.com/sorear/niecza/commit/300f88c896

[11:15] * sorear -> sleep

[11:15] *** hanekomu joined
[11:15] <masak> \o/

[11:17] <snarkyboojum> any ideas why I'm getting this error when trying to build niecza from a fresh checkout?

[11:17] <snarkyboojum> https://gist.github.com/772167

[11:18] <masak> snarkyboojum: huh. I just did a pull, and things build here. odd.

[11:19] <snarkyboojum> masak: that was the case for me a few days ago too :|

[11:19] * moritz_ can also build fine here

[11:20] <snarkyboojum> I wonder if it's a mono version thing.. bizarre

[11:20] <masak> snarkyboojum: what version of Mono do you have?

[11:20] <snarkyboojum> 2.6.4.0

[11:21] <masak> should be fine, then.

[11:22] <snarkyboojum> if I revert to niecza say, 7 days ago, things build

[11:23] <apejens> time to bring out the git bisect powertool? :p

[11:26] <snarkyboojum> aha - the culprit was https://github.com/sorear/niecza/commit/4365d61503f149b47083080253b2bdd68bbdf127

[11:26] <snarkyboojum> since wildcards were introduced my setup doesn't want to build Niecza :(

[11:27] *** envi left
[11:27] <snarkyboojum> phenny: tell sorear, since commit 4365d61 my system can't build Niecza

[11:27] <phenny> snarkyboojum: I'll pass that on when sorear is around.

[11:30] *** envi joined
[11:31] <masak> snarkyboojum: if you're ambitious, you might even create an issue on github.

[11:31] <masak> or I can do it.

[11:31] <snarkyboojum> masak: that sounds like work :O

[11:31] <snarkyboojum> masak: would do me good to learn how to do that :P

[11:34] <masak> oh, it's easy.

[11:35] <masak> https://github.com/sorear/niecza/issues

[11:35] <masak> just paste in the relevant IRC log. four-space indent makes a <code> block.

[11:46] *** noganex_ joined
[11:51] <snarkyboojum> masak: cheers - just lodged one

[11:52] <masak> snarkyboojum++

[11:59] *** typepeter left
[12:08] *** zby_home joined
[12:12] *** araujo joined
[12:13] *** noganex_ is now known as noganex

[12:16] *** pmurias joined
[12:16] *** Trashlord left
[12:27] *** satyavvd left
[12:32] *** redicaps joined
[12:32] *** thelarry joined
[12:33] *** thelarry left
[12:35] *** xinming left
[12:35] <dalek> nqp-rx: cb33a76 | bacek++ | src/setting/ResizablePMCArray.pm:

[12:35] <dalek> nqp-rx: Remove redundant pirop signatures. PAST::Compiler is smart enough to handle it as is.

[12:35] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/cb33a762c3

[12:35] <dalek> nqp-rx: f11a416 | bacek++ | / (2 files):

[12:35] <dalek> nqp-rx: Properly handle unscoped multi methods/subs

[12:35] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/f11a416625

[12:35] *** xinming joined
[12:37] <arnsholt> Whee. I think my solution to p1 works now =D

[12:37] <dalek> nqp-rx: b1a8289 | bacek++ | src/stage0/ (4 files):

[12:37] <dalek> nqp-rx: Rebootstrap files

[12:37] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/b1a8289a4f

[12:50] <moritz_> arnsholt: how many working solutions do you have?

[12:52] <colomon> I'm pulling my hair out on p4.  I've already sent a solution for it to masak++, but I can feel a better solution in the back of my brain, and can't figure out how to code it up.

[12:53] * masak smiles

[12:55] <moritz_> I not only feel that my solution is sub-optimal, I *know* it

[12:55] <moritz_> ie I found a case where it doesn't play The One winning move

[12:55] <masak> still a few days to go.

[12:56] <dalek> niecza: 2df11fb | pmurias++ | cl-backend/backend.lisp:

[12:56] <dalek> niecza: added binding and a couple of hacks to the clisp backend

[12:56] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2df11fb24d

[12:56] <dalek> niecza: c290ade | pmurias++ | docs/nam.pod:

[12:56] <dalek> niecza: document prog and sink nam ops

[12:56] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c290adee93

[12:56] <dalek> niecza: acf4f57 | pmurias++ | cl-backend/backend.lisp:

[12:56] <dalek> niecza: proper binding and assigment interaction in the common lisp backend

[12:56] <dalek> niecza: review: https://github.com/sorear/niecza/commit/acf4f577db

[12:56] *** avms joined
[12:57] <colomon> I believe my current solution is pretty optimal in the end game, but extremely stupid about getting there.

[12:57] <moritz_> colomon: where does the "end game" start?

[12:57] *** nakashiman left
[12:57] *** bacek joined
[12:58] <colomon> moritz_: If there's nothing bigger than a run of six stones left, I believe my program will always win if it is possible.  It just has limited smarts getting there.

[12:58] <moritz_> colomon: ok

[12:59] <moritz_> well, that's not too complicated :-)

[12:59] *** takadonet joined
[12:59] *** redicaps left
[12:59] *** nakashiman joined
[12:59] <takadonet> morning all

[12:59] *** cafesofie left
[12:59] <moritz_> I know that my program misbehaves when there's just one "island" (consecutive run) with length 10 left

[13:00] <moritz_> the winning move is it split it into 2 islands of length 4 each

[13:01] <moritz_> maybe I should recursively explore all solutions, and look for a winner

[13:01] <moritz_> or some dynamic programming

[13:01] * arnsholt shuts up

[13:01] <masak> I wish you all good luck in this endeavour.

[13:01] <arnsholt> Thank you =)

[13:02] <arnsholt> moritz_: I have two working solutions ATM

[13:02] <masak> your solutions have already brightened my life in unexpected ways. I hope there will be mamy more as we approach the deadline.

[13:02] <arnsholt> And a pretty good handle on how I'll solve p4, if no actual code

[13:03] * moritz_ hopes his mult MAIN('test') { ... } was inspiring

[13:03] <moritz_> s/mult/multi/

[13:03] *** woosley joined
[13:04] <colomon> moritz_: I'm curious why one run of 10 is a terrible problem.  If nothing else, seems like it would be easy enough to write a special case for it in your code...

[13:04] <moritz_> colomon: yep, but then my ego would suffer

[13:05] *** wamba joined
[13:05] <moritz_> colomon: if my AI is worse then me at playing the game, I sucked at writing the AI

[13:05] <moritz_> and special casing is just like playing it yourself

[13:05] *** coldhead left
[13:05] *** hanekomu left
[13:05] *** pmurias left
[13:06] <flussence> random thought - it'd be interesting if rakudo had a flag to print each statement as it executes... right now it runs slow enough that it'd be possible to follow in realtime

[13:06] <moritz_> flussence: that would make a nice blog post :-)

[13:06] * colomon is starting to think moritz_'s solution must be radically different from his...

[13:06] <colomon> afk # breakfast

[13:07] *** coldhead joined
[13:07] *** hanekomu joined
[13:10] <arnsholt> colomon: Yeah, it's definitely completely different from what I'm planning on as well

[13:13] *** Cyrus joined
[13:15] *** avms left
[13:18] *** yarp left
[13:18] *** MayDaniel joined
[13:25] *** roen_ left
[13:31] *** V15170R joined
[13:32] *** coldhead left
[13:35] <apejens> is there any difference in a grammar between regex, rule, token etc?

[13:35] <arnsholt> Yes

[13:35] <flussence> whitespace, mostly

[13:35] <arnsholt> In rules, whitespace becomes <.ws>

[13:35] <jnthn> regex backtracks

[13:36] <arnsholt> token and rule don't backtrack

[13:36] <jnthn> rule and token don't

[13:36] <jnthn> If you're writing a language parser, you mostly want rule and token (for performance reasons)

[13:38] <apejens> I'm still struggelig with my "almost-textile/markdown, but not quite" parser from before the weekend :)

[13:39] <arnsholt> apejens: S05 has the full details. Last bullet point of http://perlcabal.org/syn/S05.html#Regexes_constitute_a_first-class_language%2C_rather_than_just_being_strings

[13:39] *** yarp joined
[13:41] <apejens> ok, thanks

[13:41] *** MayDaniel left
[13:46] *** skangas joined
[13:47] *** V15170R left
[13:51] *** Trashlord joined
[13:55] *** zby_home left
[13:58] <apejens> I think I might have asked this on friday as well, but I'm fuzzy on the memory bits: https://gist.github.com/02da976d5e03b700ce3f

[13:58] <apejens> basically, I'm trying to store a rule-name in a variable, and pass that to parse as :rule<$var>

[13:58] <apejens> but I get a strange exception

[13:59] <jnthn> :rule<foo> treats foo as a literal

[13:59] <jnthn> try :rule($var)

[14:00] <moritz_> or if your variable happens to be called $rule,  :$rule also works

[14:00] <apejens> ahh, thanks

[14:01] *** plainhao joined
[14:17] *** Gothmog_ joined
[14:18] *** GinoMan left
[14:18] *** GinoMan joined
[14:20] *** yarp left
[14:22] *** wamba left
[14:23] *** kaare_ left
[14:25] *** zby_home_ joined
[14:33] *** ashleydev joined
[14:47] <flussence> Another .indent question: should { $?TABSTOP=8; ("\t" ~ ' 'x7).indent(1) } eq "\t\t"?

[14:50] *** nakashiman left
[14:52] *** kaare_ joined
[15:01] *** woosley left
[15:05] *** Patterner left
[15:07] *** Psyche^ joined
[15:07] *** Psyche^ is now known as Patterner

[15:09] *** risou left
[15:11] *** risou joined
[15:12] * arnsholt is enjoying p4 so far

[15:15] *** PacoLinux joined
[15:19] *** Lorn joined
[15:20] *** MayDaniel joined
[15:21] <tadzik> ~

[15:21] <colomon> %%

[15:22] <flussence> ??? ZZZ !!!

[15:24] *** am0c joined
[15:25] <huf> wait, ??? !!! exists now?

[15:25] <huf> what's it do?

[15:25] <flussence> rakudo: say ???

[15:25] <p6eval> rakudo bdbf3f: OUTPUT«Stub code executed  in <anon> at line 22:/tmp/N7Sh0EDhDw␤Null PMC access in type()␤  in main program body at line 22:/tmp/N7Sh0EDhDw␤»

[15:25] <flussence> rakudo: say !!!

[15:25] <p6eval> rakudo bdbf3f: OUTPUT«Stub code executed␤  in main program body at line 22:/tmp/v8G9UXytOQ␤»

[15:25] <tadzik> it's like ..., but different :)

[15:25] <huf> oh those

[15:25] <huf> i thought it was an alternate ternary

[15:25] <huf> so what, ZZZ is what?

[15:25] <flussence> std: ...?????!!!!!

[15:26] <p6eval> std 625303c: OUTPUT«ok 00:01 120m␤»

[15:26] *** plobsing joined
[15:26] <colomon> wait, which one generates the Null PMC?!

[15:26] <flussence> ZZZ is a very slow/inefficient Z in that context

[15:27] <flussence> rakudo: my $a = ???; say '1'; say $a; say '2';

[15:27] <p6eval> rakudo bdbf3f: OUTPUT«Stub code executed  in <anon> at line 22:/tmp/CIy1euNJuq␤Null PMC access in isa_pmc()␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/CIy1euNJuq␤»

[15:27] <flussence> huh.

[15:27] <flussence> rakudo: say ???.WHAT

[15:28] <p6eval> rakudo bdbf3f: OUTPUT«Stub code executed  in <anon> at line 22:/tmp/JgjhEFLw5p␤Null PMC access in find_method('WHAT')␤  in main program body at line 22:/tmp/JgjhEFLw5p␤»

[15:28] <jnthn> Think that's a known issue 

[15:28] <jnthn> ??? throws a resumable exception.

[15:28] <jnthn> But evaluates to null when the thingy is resumed.

[15:28] <colomon> jnthn++

[15:28] <flussence> hmm...

[15:29] <flussence> rakudo: try { ???; CATCH { say 'whatever' } }; say 'alive';

[15:29] <p6eval> rakudo bdbf3f: OUTPUT«whatever␤alive␤»

[15:29] <flussence> oh, basically it's just a radioactive exception right now.

[15:30] <moritz_> rakudo: CATCH { say "OH NOEZ" }

[15:30] <p6eval> rakudo bdbf3f:  ( no output )

[15:30] <moritz_> rakudo: CATCH { say "OH NOEZ" }; die "hard"

[15:31] <p6eval> rakudo bdbf3f: OUTPUT«OH NOEZ␤»

[15:31] *** ashleydev left
[15:31] <jnthn> die "hard" :D

[15:31] <jnthn> I'm not sure CATCH should be catching warnings, btw.

[15:32] <moritz_> I'm sure it should not

[15:32] <jnthn> Aren't they control exceptions?

[15:32] <moritz_> right

[15:32] <moritz_> rakudo: CATCH { say "not me" }; return "ORLY?"

[15:32] <jnthn> I thought we fixed that stuff.

[15:32] <p6eval> rakudo bdbf3f:  ( no output )

[15:32] <jnthn> Ah, OK. It doesn't get return now but still noms warnings.

[15:32] <moritz_> rakudo: sub f { CATCH { say "not me" }; return "ORLY?" }; say f

[15:33] <p6eval> rakudo bdbf3f: OUTPUT«ORLY?␤»

[15:33] <moritz_> \o/

[15:33] <flussence> rakudo: use Test; plan 1; do { warn; flunk; CATCH { pass; } }

[15:33] <p6eval> rakudo bdbf3f: OUTPUT«(timeout)»

[15:33] <flussence> I broke it :(

[15:34] *** wtw left
[15:34] <flussence> (I'm using something like that to test the bit where .indent is supposed to warn on)

[15:34] <moritz_> you can use Test::Util to spawn another process, and capture its STDERR

[15:39] <flussence> rakudo: my Int $outdent = 2; my $leading-ws = token { ^ ' ' ** 0..$outdent };

[15:39] <p6eval> rakudo bdbf3f: OUTPUT«===SORRY!===␤Only integers or '*' allowed as range quantifier endpoint at line 22, near "$outdent }"␤»

[15:39] <flussence> I can't figure out what the right way to do this is...

[15:42] *** ashleydev joined
[15:42] <flussence> std: my Int $outdent = 2; my $leading-ws = token { ^ ' ' ** 0..$outdent };

[15:42] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Malformed range at /tmp/VuXOcLlwAt line 1:␤------> [32m2; my $leading-ws = token { ^ ' ' ** 0..[33m⏏[31m$outdent };[0m␤    expecting quantifier␤Parse failed␤FAILED 00:01 124m␤»

[15:42] <moritz_> flussence: it's simply NYI

[15:43] <moritz_> my $outdent = 2; my $out_re = eval " \{ ^ ' ' ** 0..$outdent \}"; say so '   foo' ~~ $out_re

[15:43] *** _2easy joined
[15:43] <moritz_> rakudo: my $outdent = 2; my $out_re = eval " \{ ^ ' ' ** 0..$outdent \}"; say so '   foo' ~~ $out_re

[15:43] <p6eval> rakudo bdbf3f: OUTPUT«Bool::False␤»

[15:43] *** _2easy left
[15:43] <moritz_> huh

[15:44] * moritz_ too distracted for debugging

[15:44] <flussence> rakudo: my $outdent = 2; my $out_re = eval "token \{ ^ ' ' ** 0..$outdent \}"; say so '   foo' ~~ $out_re

[15:44] <p6eval> rakudo bdbf3f: OUTPUT«Bool::True␤»

[15:44] <flussence> missed the regex keyword :)

[15:44] <moritz_> erm, yes :-)

[15:46] *** ashleydev left
[15:52] <flussence> .oO( why is there a minmax but no divmod? )

[15:53] <flussence> (oh, obvious. minmax is chainable)

[15:53] <colomon> if you really want divmod, it's easy enough to write your own.

[15:54] <moritz_> on i386 there's a CPU instruction that calculates both div and mod of two integers in a single instruction

[15:55] <moritz_> sadly no programming language I know of exposes that to the programmer (except assembly of course, but that doesn't count as a "language" IMHO)

[15:55] <plobsing> moritz_: FORTH has divmod IIRC

[15:56] <moritz_> plobsing: makes sense

[15:56] <mathw> but do any FORTH implementations implement it in hardware on i386?

[15:57] *** MayDaniel left
[15:59] <plobsing> mathw: it wouldn't be terribly hard to do just that (for a FORTH implemented on i386). they tend to expose much of the underlying machine.

[15:59] <plobsing> an interesting combination of power and simplicity (a local optimum IMHO)

[16:01] <masak> idea for a talk: trying out different programming language implementations, adopting the mindset "how can I subvert this system into doing something it wasn't designed to do?" :)

[16:02] <arnsholt> masak: Well-volunteered ;)

[16:02] <masak> yes, I meant for myself. :)

[16:02] <gfldex> isnt perl6 subverting itself in that manner?

[16:04] <plobsing> is there something perl 6 was not designed to do?

[16:04] <daxim> http://www.youtube.com/watch?v=K2Rvh8VG3o8  # how to

[16:04] <Su-Shee> do the dishes?

[16:04] <flussence> run perl 7 code?

[16:04] <Su-Shee> good evening everyone.

[16:04] <huf> most things not yet invented?

[16:04] <mathw> take the cat to the vet#

[16:04] <mathw> although I suppose you could, given sufficiently sophisticated hardwaqre, write a perl 6 program which would negotiate a way to the vet with a cat carrier on board

[16:04] <huf> what, there's no vet method?

[16:05] <mathw> starting of course with some fancy visual-recognition libraries

[16:05] <gfldex> can cats run perl6?

[16:05] *** justatheory joined
[16:06] <daxim> http://diveintomark.org/archives/2002/11/24/how_i_turned_30  # it is said the manual way involves sharp claws and prodding to see whether the beast is still alive

[16:06] <tadzik> perl6 can run cats

[16:06] <tadzik> https://github.com/tadzik/perl6-Acme-Meow/

[16:06] <masak> latest in cat-based technology!

[16:06] <flussence> but can cat cat a cat?

[16:07] <gfldex> was thinking along this line: http://images.wikia.com/fallout/images/d/d2/FNVRex.png

[16:07] <tadzik> doggy!

[16:08] <daxim> looks like straight outta http://en.wikipedia.org/wiki/A_Boy_and_His_Dog

[16:08] *** cjk101010 left
[16:08] <gfldex> close, it's fallout 3

[16:08] <mdxi> that was a *terrible* movie :)

[16:09] *** kaare_ left
[16:09] *** plobsing left
[16:10] <tadzik> it's a novel adaptation, they rarely are good

[16:12] <colomon> short story, actually.  ;)

[16:12] <tadzik> s/they/the novel adaptations/

[16:13] *** fith left
[16:13] * colomon wonders if the rest of the book that "A Boy and His Dog" was supposed to be chapter 2 of ever got written.

[16:15] *** kaare_ joined
[16:20] *** plobsing joined
[16:23] *** hercynium joined
[16:27] *** mauror joined
[16:27] *** kaare_ left
[16:30] *** kaare_ joined
[16:30] *** tzhs left
[16:31] *** mauror left
[16:34] *** envi left
[16:42] *** mama21mama joined
[16:43] <mama21mama> hi

[16:44] <masak> mama21mama: hi!

[16:45] <mama21mama> gtranslate> "only test the bot which logs"

[16:45] * masak blinks

[16:46] * flussence <marquee>s

[16:47] * masak makes sure his spacer gifs are ok

[16:47] <flussence> masak: I tried to ask before but I think it got lost; should indent collapse spaces to tabs as well as expanding them?

[16:47] <arnsholt> masak: Oh, how I wish I had +o now so I could kick you ;)

[16:48] <masak> arnsholt: 哈哈

[16:48] <masak> flussence: could you give a concrete example? my brain feels really small right now.

[16:49] <flussence> "\t\t".indent(-1).indent(1) eq "\t\t", or "\t        "?

[16:49] *** arlinius left
[16:50] *** WonTu joined
[16:50] *** WonTu left
[16:52] <masak> I think the spec is clear on that already.

[16:52] <masak> the latter.

[16:52] <flussence> that makes it easier :)

[16:52] <masak> flussence: can you motivate the former from S32/Str? if so, then we need to strict it up a bit.

[16:53] <flussence> mainly the "consistent with existing whitespace on the line", but I guess the "added" part rules out collapsing spaces.

[16:54] * masak reads S32/Str

[16:56] *** mama21mama left
[16:56] <masak> right. since the line has both a tab character and spaces, at that point, spaces are added.

[16:57] <arnsholt> How hard would it be to get Perl6MultiSub to dump the signature the candidates are being matched against when MMD fails?

[16:57] <masak> though we do have a problem in that it says that the spaces are added "after each logical newline". they're not -- they're added at the end of the indent.

[16:58] <masak> arnsholt: doesn't it do that already?

[16:58] *** cjk101010 joined
[16:58] <arnsholt> Only the sigs of the candidates

[16:58] <arnsholt> Not the type-signature of the arglist

[16:58] *** kfo joined
[16:59] <masak> oh! right.

[16:59] <masak> yes, I've been wanting that, too.

[16:59] <arnsholt> Which would be helpful right now, since I've no idea why my MMD fails =)

[16:59] <arnsholt> I'm looking at src/pmc/perl6multisub.pmc but it's not exactly a simple piece of code to dive into

[17:04] <jnthn> It's simpler with beer.

[17:04] <jnthn> ;)

[17:04] <arnsholt> I can imagine ^^

[17:04] <arnsholt> If you don't mind, I'll poke you for some guidance about it at some later date

[17:04] <arnsholt> Right now I have to go

[17:05] <jnthn> arnsholt: Sure :)

[17:06] <arnsholt> Cool

[17:21] *** cjk101010 left
[17:22] *** rgrau joined
[17:23] *** cjk101010 joined
[17:24] *** plobsing left
[17:25] *** bacek left
[17:25] *** daxim left
[17:26] *** GinoMan left
[17:26] *** GinoMan joined
[17:28] *** StylusEater_work joined
[17:31] *** kaare_ left
[17:31] <StylusEater_work> Su-Shee: thanks for inspiring me to brush up on perl

[17:33] *** GinoMan_ joined
[17:33] <Su-Shee> \o/ :)

[17:34] <tadzik> Su-Shee++

[17:34] *** GinoMan left
[17:34] <tadzik> Su-Shee: where did you find the blogpost, ooc?

[17:35] *** molaf_ left
[17:35] <Su-Shee> tadzik: which blogpost?

[17:35] *** cjk101010 left
[17:35] <tadzik> bah, that was supposed to be for StylusEater_work 

[17:35] *** kaare_ joined
[17:36] <StylusEater_work> tadzik: HN

[17:37] <StylusEater_work> tadzik: ooc? I found it on HackerNews (y combinator).

[17:37] <tadzik> StylusEater_work: "out of curiosity" I meant

[17:37] *** bacek joined
[17:37] <StylusEater_work> tadzik: sorry, bit rusty. :-)

[17:39] <Su-Shee> StylusEater_work: so, how much brushing up do you need? ;)

[17:39] *** Layla_91 joined
[17:40] <takadonet> Layla_91: hey

[17:41] <Layla_91> takadonet: helo! :D

[17:42] <tadzik> hey Layla_91 

[17:43] <Layla_91> tadzik: hey! :D I feel I am becoming famous here! :D

[17:43] *** kaare_ left
[17:44] *** kaare_ joined
[17:44] <Layla_91> tadzik: I am preparing few notes and questions about classes.. but first I must have dinner or mom will kill me! :P :D Will be back very soon :)

[17:49] <tadzik> :)

[17:49] <tadzik> bah, Perl 6 has a 'get' sub

[17:49] <tadzik> Dancer is not gonna be Dancer anymore :(

[17:49] <tadzik> or is there a way to "cover" the existing one?

[17:50] <Su-Shee> overriding it? :)

[17:50] <flussence> more-specific signature?

[17:50] <tadzik> sub get(Pair $x) is export {

[17:50] <flussence> that's how mkdir(:p) works...

[17:50] <StylusEater_work> tadzik: subclass and override it

[17:50] <tadzik> StylusEater_work: subclass what?

[17:51] *** Layla_91 left
[17:51] <tadzik> flussence: hmm, right. Even I'm the one who wrote File::Mkdir :)

[17:51] <StylusEater_work> tadzik: can't you write a class that extends the base class where get is located ... then define a get subroutine in your class?

[17:51] <tadzik> StylusEater_work: it's a sub in Perl6, not a method

[17:51] *** broquaint left
[17:52] <colomon> it's a method too, of course.

[17:52] <colomon> rakudo: say $*IN.get

[17:52] <tadzik> hmm, is export is not working as I expected

[17:52] <p6eval> rakudo bdbf3f: OUTPUT«Land der Berge, Land am Strome,␤»

[17:52] <tadzik> rakudo: say &get.WHAT

[17:52] <p6eval> rakudo bdbf3f: OUTPUT«Multi()␤»

[17:53] <tadzik> oh, a multi? No problem then

[17:53] *** cjk101010 joined
[17:55] *** kaare__ joined
[17:56] <tadzik> rakudo: my $a = sub { "asd" }; say $a()

[17:56] <p6eval> rakudo bdbf3f: OUTPUT«asd␤»

[17:56] <tadzik> hrm

[17:56] *** kaare_ left
[17:56] <tadzik> oh

[17:58] <tadzik> Perl 6, I have something interesting for ya :)

[17:58] <tadzik> http://wklej.org/id/454346/

[17:58] <tadzik> what does it look like?

[18:00] <Su-Shee> like a method based web framework and not a restful one ;)

[18:00] <tadzik> http://perldancer.org/

[18:00] *** cdarroch joined
[18:00] *** cdarroch left
[18:00] *** cdarroch joined
[18:00] <Su-Shee> I know. :)

[18:01] <tadzik> but! It's not Perl 5

[18:01] <saaki> sinatra?

[18:02] <tadzik> not quite :)

[18:02] <moritz_> looks like Mojolicious

[18:02] <moritz_> (::Lite)

[18:02] <Su-Shee> they all look like sainatra :)

[18:02] <tadzik> It's a minimal implementation of Dancer in Perl 6

[18:03] <tadzik> http://wklej.org/id/454352/

[18:03] <Su-Shee> nice!

[18:03] <takadonet> nicely done

[18:03] * tadzik is preparing a blogopost, another one in a "look, it's awesome" fasion

[18:03] <colomon> \o/

[18:03] <tadzik> now the fun is, it's ~~

[18:04] <Su-Shee> (what have I done.. ;)

[18:04] <tadzik> it's the freakin ~~, so Junctions, Regexes, bla bla bla

[18:04] <tadzik> Su-Shee: not you ;) I did this a few times before, see my grammar dispatching posts

[18:05] * moritz_ wants postfix:? for argument lists

[18:05] <tadzik> that's what I'm into

[18:05] <tadzik> I think it's doable to parse it, and dynamically create a Redex

[18:05] <moritz_> so $closure($var?) would mean "supply this variable if the closure accepts it, and if not leave it empty"

[18:06] <tadzik> hmm

[18:06] <tadzik> it's possible?

[18:06] <tadzik> I mean, is it P6?

[18:07] <jnthn> Module. :P

[18:08] <tadzik> hm, sub($x) is forbidden?

[18:08] <jnthn> (And yes, I know, Rakudo doesn't let you write a module to do that just yet.)

[18:08] *** MayDaniel joined
[18:09] <jnthn> moritz_: What's the use case you have for it, ooc?

[18:10] <moritz_> jnthn: I thought about tadzik's dispatch example, and I thought that   get rx{^'/id/' (\d+)} => sub($/) { say $/ }   could avoid re-matching

[18:10] <tadzik> $/ is what I'm working on atm

[18:10] <moritz_> jnthn: and then I thought about writing the dispatcher, and that it certainly shouldn't force the user to accept a positional in the signature

[18:10] *** kaare__ left
[18:11] <moritz_> jnthn: so it would be nice to call it $callback($/?) # yay, line noise!

[18:11] *** nadim left
[18:12] *** nadim joined
[18:12] <jnthn> :P

[18:12] <jnthn> moritz_: I worry about about sticking more complexity into calling, tbh. It's a hot path that's already got plenty to do.

[18:13] <moritz_> jnthn: fwiw it wasn't a well thought-out proposal, just a whim

[18:13] <moritz_> jnthn: more p6l-ish throwing around ideas :-)

[18:13] <jnthn> moritz_: You could always implement a helper to do something like this too.

[18:13] <tadzik> how to get The Positional Parameters Mathed from $/?

[18:13] <jnthn> Using introspection. :)

[18:13] <jnthn> Apart from introspection is bad. ;)

[18:13] <jnthn> The interaction wiht multis probably gets fun too. ;)

[18:13] <moritz_> tadzik: do you mean the positional captures?

[18:14] <tadzik> moritz_: si

[18:14] <jnthn> $/.list

[18:14] <jnthn> Or I guess @$/ does that...yay line noise! :)

[18:14] <moritz_> @$/ is NYI - would need to be @($/)

[18:14] <jnthn> Ah

[18:15] <tadzik> :[

[18:15] <tadzik> hmm, something fails

[18:17] *** MayDaniel left
[18:18] *** karb joined
[18:18] <tadzik> http://wklej.org/id/454360/ -- could you take a look? Visiting /foofoo says "regexes! I got foofoo"

[18:18] <tadzik> so it's the whole string, not the mathed part

[18:19] <moritz_> because you pass in $/, and not $/.list

[18:19] <moritz_> or |$/.list

[18:20] <moritz_> what about  |($/.list, $/.hash)

[18:21] *** risou left
[18:21] <tadzik> oh, right

[18:21] <tadzik> |$/.list

[18:21] <tadzik> LOL PERL IS SO UGLY!!!!11

[18:22] <dukeleto> tadzik: I CAN'T HEAR YOU OVER ALL THE PUNCTUATION

[18:24] <tadzik> moritz_: there is $/.hash?

[18:25] <tadzik> Method 'hash' not found for invocant of class ''

[18:25] <StylusEater_work> tadzik: seems weird to want to respond to /foo(.+)/ ...

[18:27] <tadzik> StylusEater_work: why?

[18:27] *** Trashlord left
[18:28] <Su-Shee> shouldn't in perl 6 a router aka url parser be based on a url grammar...? :)

[18:29] *** karb left
[18:31] <StylusEater_work> tadzik: I'd imagine you'd want something more concrete... an actual resource /get/record/1 /upload/record/1 ... etc.

[18:32] <StylusEater_work> tadzik: if you want to do something like foo(.+) ... why not implement a default handler that will parse the values for you as opposed to have the routes defined with wildcards?

[18:32] <StylusEater_work> tadzik: I guess it's just a matter of style. 

[18:34] *** hanekomu left
[18:36] *** Helios joined
[18:36] <tadzik> StylusEater_work: that's a matter of me not porting it yet :)

[18:37] <tadzik> StylusEater_work: that'd be /get/:what/:id/ in Dancer

[18:39] *** Helios left
[18:40] *** cjk101010 left
[18:42] *** ashleydev joined
[18:42] *** kaare__ joined
[18:44] <sorear> good * #perl6

[18:44] <phenny> sorear: 11:28Z <snarkyboojum> tell sorear since commit 4365d61 my system can't build Niecza

[18:46] *** plobsing joined
[18:47] <diakopter> ohi

[18:50] <dalek> niecza: f5e81fb | sorear++ | Niecza.proj:

[18:50] <dalek> niecza: Revert "Use wildcart dependencies in build system"

[18:50] <dalek> niecza: 

[18:50] <dalek> niecza: This "cosmetic" change broke snarkyboojum's build.

[18:50] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f5e81fb4d0

[18:52] *** dakkar left
[18:53] *** Helios joined
[18:54] <PerlJam> tadzik++ dancer in perl 6 -- awesome!  :)

[18:54] *** uniejo joined
[18:57] <tadzik> loliblogged! http://ttjjss.wordpress.com/2011/01/10/bailamos/

[18:58] <moritz_> tadzik++

[18:59] <tadzik> I'm just advertising it between Dancer people. They attitude towards Perl 6 was usually "well, mberends is writing the port, right?"

[19:00] <tadzik> maybe that will poke them a bit :)

[19:01] *** am0c left
[19:01] *** kjeldahl joined
[19:01] *** e4124 joined
[19:08] <dalek> sprixel: 6b30134 | diakopter++ | / (16 files):

[19:08] <dalek> sprixel: generic types instantiated with in-progress custom types.  <relief/>

[19:08] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/6b30134462

[19:08] *** uniejo left
[19:18] *** am0c joined
[19:23] *** _jaldhar left
[19:23] *** ashleydev left
[19:25] *** plobsing left
[19:25] *** Layla_91 joined
[19:25] <Layla_91> helo to all! :)

[19:25] <tadzik> hi

[19:26] <TimToady> howdy doo

[19:27] <diakopter> dy

[19:27] <Layla_91> tadzik: I am a little confused by the class example.. (though it is funny :)).. I have a couple of questions about it.. if you want I can paste the example code somewhere before asking so you can look it up quickly..

[19:28] <StylusEater_work> who do I talk to about a failed post through 'make spectest_smolder'

[19:28] <moritz_> StylusEater_work: to us :-)

[19:29] <moritz_> StylusEater_work: what error do you get?

[19:29] <StylusEater_work> curl: (26) failed creating formpost data

[19:29] <TimToady> .oO(some of us are more ussy than others of us)

[19:29] <StylusEater_work> ... ./perl6 -e "run qqx[git log -1 --pretty=format:%H].fmt(qq[curl -F architecture=i386 -F platform=linux -F revision=%s -F report_file=@rakudo_test_run.tar.gz -F username=parrot-autobot -F password=qa_rocks http://smolder.parrot.org/app/projects/process_add_report/5])"

[19:29] <flussence> same here

[19:29] <moritz_> StylusEater_work: do you have TAP::Harness::Archive installed? (see README)

[19:29] <tadzik> Layla_91: go on, I'm not the only one :

[19:30] <tadzik> :)

[19:30] <StylusEater_work> moritz_: doh!!!

[19:30] <flussence> Oh, I was running it on my laptop, that'd explain the failure

[19:30] <StylusEater_work> moritz_: thought I might have forgot something in the rakudo readme

[19:31] <moritz_> StylusEater_work: we need better diagnostics from the harness though

[19:32] * moritz_ has a patch, but can't test it right now

[19:32] *** plobsing joined
[19:33] <Layla_91> What exactly does bless method does, for example in "return self.bless(*, :&callback, :@dependencies);" how could we fix the code if there was no bless ?

[19:33] <StylusEater_work> moritz_: do we keep previous runs?

[19:34] <TimToady> .oO(no bless oblige...)

[19:34] <StylusEater_work> Layla_91: http://perldoc.perl.org/functions/bless.html

[19:35] <TimToady> <moritz_> @array[^2]:delete

[19:35] <TimToady> that does not do the same as a splice, if we follow P5 semantics on array delete

[19:35] *** pyrimidine joined
[19:36] <Layla_91> oh it is in perl5 too.. I guess that is why I am the only one not understanding it :D

[19:36] *** lichtkind joined
[19:36] <lichtkind> why does succ in Bool context returns true?

[19:37] <lichtkind> http://perlcabal.org/syn/S32/Numeric.html#Bool

[19:37] *** kaare_ joined
[19:38] *** kaare__ left
[19:38] <TimToady> lichtkind: see S03:540

[19:40] <Layla_91> I keep seeing callback method in class examples.. where can I find what it does?

[19:42] <StylusEater_work> Layla_91: I believe it returns the reference to the caller in the call graph.

[19:43] <StylusEater_work> flussence: is try.rakudo.org not working atm?

[19:43] <StylusEater_work> flussence: or maybe it's chrome on osx that's not working properly

[19:43] <TimToady> pmurias: a litte "roast" is a "toast"

[19:43] <flussence> working for me...

[19:44] <Su-Shee> StylusEater_work: works for me as well. (FF, Linux)

[19:44] <flussence> JS turned on?

[19:45] <Layla_91> StylusEater_work: I just understood it.. I have to say the examples are a little complex in the perl6 tutorial.. or maybe It's just me.. :S

[19:45] <tadzik> wfm too

[19:45] <Su-Shee> Layla_91: in which tutorial?

[19:46] <Layla_91> Su-Shee: Learning perl6

[19:46] <Layla_91> Su-Shee: I have no experience with perl5.. maybe that is the reason..

[19:46] <sorear> Is there a standard Perl6 getopt_long module?

[19:46] <PerlJam> sorear: MAIN  :)

[19:47] <Su-Shee> Layla_91: URL?

[19:47] <sorear> MAIN is less powerful than getopt_long, and in any case needs to be built on *something*

[19:48] <Layla_91> Su-Shee: ops it is using perl6 not learning perl6 :D https://github.com/perl6/book/downloads.. 

[19:48] *** kaare_ left
[19:48] *** david1337 joined
[19:49] *** kaare_ joined
[19:50] * TimToady has a profound antipathy toward any module named getopt*, having seen far too many of them in his life...

[19:50] <StylusEater_work> flussence: all I see is the -> (white arrow) ... if I type help and press "Send" I see nothing ... maybe I'm not using it properly.. user error... :-)

[19:50] <Su-Shee> oh my.. ;) Layla_91: Look into real code how they do it and copy it or ask about that. ;)

[19:50] <StylusEater_work> TimToady: prefers ... getover* :-)

[19:51] <flussence> StylusEater_work: "help" displays the message at the bottom that's already there when you load the page

[19:51] <PerlJam> sorear: how is MAIN less powerful?

[19:51] <flussence> try "1" or something in the command line, should echo it back

[19:51] <StylusEater_work> print "Hello."; works... so it was user error. :-)

[19:52] <TimToady> PerlJam: it's not as overdesigned :)

[19:52] <flussence> I guess it should scroll on typing help or something... at least give some visible reaction

[19:53] <StylusEater_work> flussence: it is neat btw. good work.

[19:53] <sorear> PerlJam: no ability to say :!permute

[19:53] <flussence> heh, most of the work wasn't me. I just got the tutorial stuff working :)

[19:53] <PerlJam> The only thing I can think of right off is that thing where options are additive.

[19:54] <flussence> (which needs more content...)

[19:54] <Layla_91> Su-Shee: mmm.. sorry my english is not too good :D you mean I should copy others code?! :S

[19:55] <Su-Shee> Layla_91: yes, of course. that's how you learn. take a class of an existing perl 6 project and make it work for you and change stuff.

[19:55] <StylusEater_work> Layla_91: read others code and improve upon existing code.  It's open source so you're not stealing if you follow the license.

[19:56] <PerlJam> sorear: --permute=0 doesn't work?

[19:56] * sorear just wants to clone GNU getopt_long; Getopt::Long and MAIN both irritate me

[19:57] <PerlJam> okay

[19:57] <sorear> PerlJam: No, because that's a command line argument

[19:57] <TimToady> S06:3280 give :! syntax

[19:57] <sorear> I want a way to control the option parser itself

[19:57] <diakopter> heh

[19:57] <TimToady> fine, you can always write your own module

[19:58] <diakopter> is the option parser a Grammar?

[19:58] <Layla_91> Su-Shee, StylusEater_work: mmm.. I agree :) actually it is time to download some perl6 exmaples from the web.(If exists!) :D

[19:58] <TimToady> that's why we give access to @*ARGS all the way through the mainline

[19:58] <TimToady> MAIN is only called at the end

[19:58] <sorear> Well I *need* to write a module because nobody has given me something reusable

[19:58] <diakopter> there must not be a Grammar for MAIN's parsing

[19:58] *** MayDaniel joined
[19:58] <TimToady> I don't understand what you think is missing

[19:59] <TimToady> eventually signatures will support parsing of lists

[19:59] <TimToady> as in grammar based

[19:59] * diakopter keeps suggesting an "official" Grammar... (if there isn't one already)

[19:59] <flussence> (if you implement NativeCall, you could just reuse the existing getopt_long... :)

[20:00] <sorear> Rakudo's src/core/MAIN.pm has the Parrot-specific introspection and the parsing intertwined

[20:00] <sorear> I can't reuse it

[20:00] <TimToady> that's a rakudo problem

[20:01] <TimToady> not necessarily a Perl 6 problem

[20:01] <jnthn> From a Rakudo perspective, it's probably not even really a problem. Gotta interop with the VM somewhere. :)

[20:01] <TimToady> sorear: define "reuse"

[20:02] *** jaldhar joined
[20:02] <sorear> TimToady: use it to support argument parsing in niecza

[20:03] <TimToady> just use your own multiple dispatch implementation

[20:04] *** ashleydev joined
[20:04] <TimToady> oh, you're talking about the translator

[20:04] <TimToady> it's not clear to me why the translator would need introspection

[20:05] <Layla_91> I got examples from https://github.com/eric256/perl6-examples/ all the games not working on my laptop :(

[20:05] *** aindilis joined
[20:05] <masak> in a method, 'self' accesses the invocant. how would I access the invocant of the class my nested class is inside?

[20:05] <TimToady> everything in the translator ought to be data driven

[20:06] <TimToady> masak: what makes you think you have one?

[20:06] <TimToady> it's a different class, with its own objets

[20:07] * TimToady typos french...

[20:07] * jnthn finds masak's question odd in that sense too

[20:07] <masak> maybe it doesn't make sense, true.

[20:07] <tadzik> Layla_91: most of the examples are not working I'm afraid

[20:07] <flussence> tell it to pass that into the inner object?

[20:08] <jnthn> I suspect there may be some Java-think here. I think there, a nested class does have some kinda relationship with the outer one in that way.

[20:08] <TimToady> we all don't make sense from time to time... :)

[20:08] <masak> flussence: that might be an option, yes.

[20:08] <jnthn> But I mostly found it confusing. :)

[20:08] <Layla_91> tadzik: where else can I find working perl6 code examples?!

[20:08] <tadzik> Layla_91: you may want to look into some of the existing modules, see modules.perl6.org

[20:08] <masak> jnthn: in Java, the syntax would be C<Outerclass.this>

[20:08] <Su-Shee> Layla_91: in the module's list. also, just write your own stuff and ask.

[20:08] <PerlJam> Layla_91: perl6advent.wordpress.com

[20:08] <masak> jnthn: and yes, that's what made me think about it.

[20:08] <jnthn> masak: ah, OK, so I'm not crazy rusty. :)

[20:08] <jnthn> masak: I still seem to remember if confusing me though. :)

[20:09] <PerlJam> Layla_91: http://perl6.org/documentation/ has lots of links

[20:09] *** am0c left
[20:09] *** broquaint joined
[20:09] <TimToady> Layla_91: did anyone send you to http://rosettacode.org/wiki/Category:Perl_6 ?  Those are all working examples, supposedly.

[20:09] <TimToady> and there's 254 of 'em currently

[20:10] <Layla_91> TimToady: awsome! ^_^

[20:10] <TimToady> We aim to please, when we aim at all...

[20:11] <moritz_> https://gist.github.com/773366 <-- new debugging stuff :-) I think it was tadzik++ who proposed it originally

[20:11] <tadzik> did I?

[20:11] *** ashleydev left
[20:11] <tadzik> moritz_++ # awesome

[20:11] <moritz_> or was it masak?

[20:11] *** ashleydev joined
[20:11] <masak> no, tadzik++

[20:12] <PerlJam> whoever++   that's very cool

[20:12] <masak> moritz_: how are you planning to make that publicly usable?

[20:12] <TimToady> is that lexically scoped?

[20:12] <moritz_> TimToady: it is

[20:12] <moritz_> at least I think so

[20:12] <TimToady> coolness

[20:12] *** jaldhar left
[20:13] *** jaldhar joined
[20:13] <moritz_> yes, it is

[20:13] <moritz_> just tested it

[20:13] <flussence> random idea: allow specifying a file descriptor other than std* for it to print to, so it can be piped into other programs

[20:13] <tadzik> http://ttjjss.wordpress.com/2011/01/10/bailamos/#comment-46 -- may I have some feedback on this one?

[20:13] <masak> oh, now I see; it's the 'use STATEMENT_PRINT;' that does it. :)

[20:13] <tadzik> I know how to answer that, but I don't want to do it semi-correctly :)

[20:14] <masak> moritz_: why not 'use Statement::Print;'?

[20:14] <moritz_> masak: because I suck at naming :-)

[20:14] *** mberends left
[20:14] <flussence> tadzik: it's like xargs on a commandline, but with a pipe character, and right-to-left

[20:14] <masak> moritz_: also, suggestion -- hide the printing of 'use STATEMENT_PRINT;' :)

[20:14] <tadzik> flussence: that's the "my own words" version :)

[20:14] <masak> it doesn't add anything.

[20:14] <moritz_> masak: it adds simplicity on the implementation side

[20:15] <tadzik> and it may be useful if you accidentally (or not) import this twice, no?

[20:16] <masak> moritz_: I won't press it. just felt a bit unnecessary.

[20:16] <TimToady> 'set -x' is shorter  :(

[20:16] <Su-Shee> tadzik: well answer what the pipe does? :)

[20:17] <moritz_> is there a general consensus that I should push it to master?

[20:17] <sorear> I propose Devel::Trace

[20:17] <moritz_> sorear: I like that

[20:17] <sorear> moritz_: does it have any impact when disabled?

[20:17] <tadzik> Su-Shee: I think it'd be nice in a spec-speak :)

[20:17] <Su-Shee> in a what? :)

[20:17] *** rindolf joined
[20:18] <moritz_> sorear: one dynamic variable per compilation unit, one executed 'if' per statement at compile time

[20:18] <rindolf> Hi all.

[20:18] <moritz_> both at compile time, that is

[20:18] <sorear> hello rindolf

[20:18] <tadzik> rindolf: o/

[20:18] <moritz_> ie not much

[20:18] <rindolf> sorear, tadzik : what's up?

[20:19] <tadzik> rindolf: seen my blag toast? :)

[20:19] <rindolf> tadzik: no.

[20:19] <rindolf> not yet

[20:19] <rindolf> What is a "blag'?

[20:19] <tadzik> http://ttjjss.wordpress.com/2011/01/10/bailamos/

[20:19] <tadzik> it's a funny blog

[20:19] <rindolf> Ah.

[20:19] <tadzik> ;)

[20:19] <lichtkind> TimToady: thank  you

[20:19] <masak> I think my blog is too serious to be a blag.

[20:20] <rindolf> tadzik: ah.

[20:20] <rindolf> tadzik: interesting.

[20:20] <rindolf> tadzik: it would be neater if rakudo had macros.

[20:21] <rindolf> I mean the syntax would be.

[20:21] <tadzik> rindolf: what would you change?

[20:21] <rindolf> tadzik: well, I would do something like get /foo(.+)/ { }

[20:22] *** ashleydev left
[20:22] <rindolf> Without the => and the sub.

[20:23] <rindolf> Can't the "sub" keyword be omitted already?

[20:23] <rindolf> You can also use named captures.

[20:23] <tadzik> rindolf: interesting question

[20:23] <tadzik> yeah, I know about those

[20:23] <masak> in 'get /foo(.+)/ { }', you definitely run into TTIAR.

[20:24] *** ashleydev joined
[20:24] <masak> which is why macros would be needed, I guess.

[20:24] <TimToady> but not if you parse it as a statement control

[20:24] <masak> right.

[20:24] <masak> s/get/if/ and it would be legal.

[20:24] <tadzik> :)

[20:24] <masak> so either macros or sufficient control over the active parser rules :)

[20:24] <tadzik> that's closer and closer to when

[20:25] <TimToady> or s/get/when/ and it's even a smartmatch

[20:25] *** Trashlord joined
[20:25] <masak> one could probably do a few nice tricks already today, passing in a block of when clauses to a function.

[20:26] <TimToady> but yeah, eventually we'll have real macros that can emulate any builtin syntactic category

[20:26] <TimToady> s/emulate/add to/

[20:27] <TimToady> currently niecza is closest to having real macros, since transitive LTM is a requirement

[20:28] *** spq1 joined
[20:28] <sorear> I thought pugs already had them

[20:29] <moritz_> notreally

[20:29] <moritz_> you could write 'macro foo($x) { $x * 2 }', but to the best of my knowledge it was faked at run time

[20:29] <moritz_> at least nobody ever showed some awesome macro magic with it :-)

[20:29] *** mberends joined
[20:30] <TimToady> macros were the *last* think on the pugs roadmap

[20:30] * moritz_ -> early sleep

[20:30] <TimToady> *ng

[20:30] <TimToady> enjoy it while you can :)

[20:30] <dalek> rakudo: 33788e8 | moritz++ | t/harness:

[20:30] <dalek> rakudo: die on spectest_smolder if TAP::Harness::Archive cannot be loaded

[20:30] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/33788e8a43

[20:30] <dalek> rakudo: ca62f23 | moritz++ | src/Perl6/Actions.pm:

[20:30] <dalek> rakudo: non-spec Devel::Trace pragma that prints statements before executing them

[20:30] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/ca62f23341

[20:31] <moritz_> :-)

[20:31] *** kaare__ joined
[20:32] *** kaare_ left
[20:33] *** coldhead joined
[20:33] *** GinoMan_ left
[20:33] *** GinoMan joined
[20:34] <sorear> TimToady: Does that mean pugs is complete?

[20:34] <sorear> :)

[20:35] * sorear wants something like if EXPR -> $v { ... }, but checking defined() instead of so()

[20:35] <tadzik> no, but yapsi is :)

[20:36] *** GinoMan left
[20:36] *** tylerni7 left
[20:36] <TimToady> sorear: andthen is something like that

[20:37] *** shi joined
[20:37] <TimToady> see S03:2464

[20:38] <TimToady> in fact, it was original postulated as a way to write the STD engine more hapily

[20:38] <TimToady> *pp

[20:39] <sorear> The most irritatingly subtle incompatibility between Perl 6 and Perl 5 for what I've done so far is the truth value of []

[20:40] *** MayDaniel left
[20:40] *** alester joined
[20:41] <TimToady> well, all references are true in P5, which was a mistake

[20:45] *** kaare__ left
[20:46] *** kaare__ joined
[20:47] *** kaare__ left
[20:47] *** kaare__ joined
[20:49] *** plobsing left
[20:49] *** kaare__ left
[20:49] *** Layla_91 left
[20:49] *** kaare__ joined
[20:50] *** cafesofie joined
[20:52] <masak> sorear: au/Pugs never got to macros :/

[20:52] <masak> kinda stalled on the OO step.

[20:53] *** david1337 left
[20:56] *** plobsing joined
[20:56] *** y3llow_ joined
[20:57] *** pothos_ joined
[20:59] *** y3llow_ is now known as y3llow

[20:59] *** pothos_ is now known as pothos

[21:01] *** ashleydev left
[21:01] *** jaldhar left
[21:02] *** lichtkind left
[21:03] <tadzik> Devel::Trace! \o/

[21:07] *** cafesofie left
[21:08] <sorear> masak: I thought I saw someone demo a pugs macro once

[21:08] <sorear> nevermind

[21:08] <sorear> the other interesting question is

[21:09] <sorear> "Does the existance of macros require all Perl 6 implementations to use an object oriented PEG/LTM engine for parsing input?"

[21:09] <sorear> is it possible to construct, say, a C Perl6 which uses yacc?

[21:10] <TimToady> PEG/LTM is a requirement for Perl 6

[21:10] *** cafesofie joined
[21:12] <masak> the common API that macros would run on top of is underspec'd, but that's more or less to be expected at this point, with no implementations having macros...

[21:14] *** plainhao left
[21:15] *** e4124 left
[21:16] <masak> is the NEXT phaser executed the last iteration through a loop?

[21:16] <masak> assuming that iteration exits normally.

[21:17] *** pmurias joined
[21:17] <pmurias> sorear: how are classes  represented in NAM?

[21:18] <TimToady> masak: see S04:1420

[21:18] <TimToady> so the answer is "yes"

[21:19] <masak> ok.

[21:19] <TimToady> and "last" is considered abnormal

[21:19] <TimToady> NEXT is basically the same as P5's continue {}

[21:19] <TimToady> so it can do the "increment" before the loop's "while" test

[21:23] *** GinoMan joined
[21:25] <sorear> pmurias: the xref pool contains an object of the form ["class",name,package_install_slots,attributes,methods,superclasses,mro]

[21:27] <pmurias> thanks, i was viewing a mangled form of the xref pool so i didn't notice that

[21:31] *** MayDaniel joined
[21:32] *** avms joined
[21:40] <Tene> I did have macros working on an nqp-rx language before, as a prototype.  It wouldn't have been too much more to make them lexically-scoped, etc.

[21:40] <masak> what's the simplest way to use phasers (or something else) to execute something between iterations of a loop, such as adding a separator between list items?

[21:40] *** tylerni7 joined
[21:40] *** tylerni7 left
[21:40] *** tylerni7 joined
[21:40] *** zby_home_ left
[21:40] <Tene> It's definitely doable on rakudo, just a SMOP

[21:41] *** molaf joined
[21:41] <masak> Tene: what can the rest of us do to help you in this endeavour?

[21:41] <masak> (aka "want. macros. now.")

[21:42] <Tene> masak: seeing as I haven't actually worked on it in about a year... any "help" would be "do all of it"

[21:42] <masak> noted.

[21:48] *** StylusEater_work left
[21:51] <masak> seen this? http://everythingsysadmin.com/2011/01/python-is-better-than-perl6.html

[21:51] <aloha> Sorry, I haven't seen this? http://everythingsysadmin.com/2011/01/python-is-better-than-perl6.html.

[21:51] <masak> aloha: ssh!

[21:52] <masak> perlbuzz tweeted it a few hours back.

[21:52] <Tene> masak: fwiw, I rather miss working on that sort of project, so if you have any ideas about motivating me, please feel free to try whatever you like.

[21:52] <alester> I think Tom makes some swell points.

[21:52] <alester> esp. from the POV of someone who's forced to use the snake.

[21:53] <mkramer1> despite the title, he hasn't mentioned he likes about python  that perl6 doesn't have (specced) 

[21:53] <mkramer1> *what he

[21:53] <alester> I think the biggie is "it exists."

[21:53] <alester> (For his value of "exists")

[21:54] <masak> right. probably not productive to tell this kind of blogger that Perl 6 does "ship".

[21:54] <mkramer1> Then he should have said that, it's misleading to title your post that way and then spend the rest of the article writing about why python is better than perl 5

[21:54] <alester> Don't discount Tom Limoncelli as "this kind of blogger".

[21:54] <alester> He's no dummy, and he's highly respected.

[21:55] <masak> I didn't mean it derogatorily.

[21:55] <alester> For his purposes, Perl 6 doesn't ship.

[21:55] *** rindolf left
[21:55] <masak> I meant that he actually has a criterion, and is not just bashing Perl 6.

[21:55] <masak> he has a slightly clumsy way of saying it, but then again, which outsider doesn't?

[21:56] <sorear> alester: do you know anything about the rakudo.org banning epidemic?

[21:56] <masak> I'd consider such a blog post to be bad PR for Perl 6 (in the drops-on-stone sense), and there's no easy way to counteract it, besides working on Perl 6.

[21:57] <Tene> I understood "this kind of blogger" in that context to mean "a well-informed blogger who knows what he's talking about"

[21:58] <masak> something like that. better informed than just cargo-culting twitter or reddit people, at least.

[21:58] <Tene> Seems like most of the post is talking about Perl 5, though.

[21:59] <Tene> Which is valid, just makes the title a bit odd.

[21:59] <masak> someone saying "Perl 6 doesn't ship" is liable to trigger an automatic reaction in me no matter what.

[21:59] <cognominal> *welcome

[22:00] <masak> cognominal: sorry, what?

[22:00] <jnthn> cognominal: wrong window

[22:00] <jnthn> :)

[22:00] <alester> sorear: Yes.

[22:01] <masak> welcome, cognominal, to the Wrong Window :)

[22:01] <mkramer1> Tene: that's what I thought when I read it.  He ennumerates ten features that he likes about Python, nine of which  Perl6 also has, the one exception being 7, "no interpolation of strings"

[22:01] <mkramer1> also, I didn't see clear criteria for "shipping" anywhere

[22:01] *** kaare__ left
[22:01] <gfldex> he tries to justify to himself why he is using python in a public place

[22:02] <cognominal> wrong window indeed. 

[22:02] <gfldex> most blogs are used in that way tho :->

[22:02] <masak> there can't be clear criteria, since Perl 6 is shipping, and has been for years.

[22:02] <cognominal> but you are welcome anyway

[22:02] <masak> cognominal: thanks -- you too :)

[22:02] <sorear> alester: Out of curiousity, what's causing it?

[22:03] <alester> I banned about 20 Class A's a week ago.

[22:03] <alester> And have since removed them.

[22:03] <alester> masak: "Shipping" according to you.

[22:03] <sorear> alester: Several people have reported getting a "banned" error page from their normal computer, but being able to access from others in the same class C

[22:03] <sorear> alester: among them: lopaway, coldhead

[22:04] *** MayDaniel left
[22:04] <Tene> Personally, this is the definition of "shipping" that I'd like to see used in these discussions: http://en.wikipedia.org/wiki/Shipping_%28fandom%29

[22:04] <masak> Tene++ :P

[22:05] <masak> alester: now, "shipping" is an objective thing. it's whether we share what we have with others.

[22:05] <masak> alester: Rakudo has an open github repository, it has monthly releases, it has release announcements.

[22:06] <masak> alester: saying that it *isn't* shipping after that is... not a matter of subjective opinion.

[22:06] <masak> in my opinion :)

[22:06] <Tene> If the actual product being shipped doesn't meet your needs, that's a completely valid and accurate complaint, but there's a different word for that.

[22:06] <masak> yes.

[22:06] <masak> "inadequate".

[22:07] <Tene> When rakudo star is distributed by my linux distro, it's pretty hard to argue that it hasn't "shipped".

[22:07] <masak> but note the *huge* difference between "Perl 6 doesn't exist/ship" and "Perl 6 is inadequate for my needs"

[22:08] <alester> sorear: Yes, and I said I have since removed them.

[22:08] <alester> masak: I think that defending Perl 6 by saying "Look, it's shipping, for some value of shipping that happens to not be yours" is a waste of time.

[22:09] <masak> alester: I generally manage to convince people that Perl 6 is shipping, though.

[22:09] <alester> Arguing over word choice is masturbatory.  The key is, to many people, Perl 6 is not "done" enough.  That's why I put the post out there.

[22:10] <masak> I'm not really arguing over word choice.

[22:10] <masak> but I agree with your general feeling about the post.

[22:10] <masak> I like that you posted it.

[22:10] <alester> sorear: Are your questions adequately answered?

[22:10] <masak> s/posted/tweeted/

[22:11] <Tene> alester: I think that an important part of any improvement process is making sure we have an *accurate* view of our deficiencies.  I don't know that I've ever seen anyone here assert that there are no problems at all with Rakudo, or assert that because we've published a release, no other problems matter.

[22:12] <Tene> If someone accuses me of being a slacker at work and of kicking puppies, I'm going to acknowledge the correct accusation and refute the inaccurate claim.

[22:13] <masak> I haven't found telling people that Rakudo has releases to be masturbatory. about a third of those people have genuinely grateful/interested reactions.

[22:13] <sorear> alester: yes

[22:13] <Tene> Hmm.

[22:14] <alester> Tene: I think that we pretend that we know our deficiencies.

[22:14] <diakopter> those poor puppies

[22:14] <alester> When people say "Perl 6 doesn't exist" we get all frothy and say "Yes it does! Yes it does!"

[22:14] <alester> instead of acknowledging that to THAT PERSON and, indeed, the vast majority of the computing world, it does NOT.

[22:15] <diakopter> (as they define "exist")

[22:15] <alester> Right.

[22:15] <TimToady> what does acknowledging that gain us?

[22:15] <Tene> erlang isn't currently useful to me; in what meaningful sense could I then claim that erlang doesn't exist?

[22:15] <alester> which is what matters.

[22:16] <alester> Customer walks into Blockbuster (clearly this is years ago)

[22:16] <alester> Customer doesn't find movie customer wants

[22:16] <TimToady> our intent is to educate them, not coddle them

[22:16] <alester> Customer says "This store doesn't have anything!"

[22:16] <alester> Clerk can say "Yes we do!  Yes we do!"

[22:16] <diakopter> !addquote < masak> I haven't found telling people that Rakudo has releases to be masturbatory.

[22:16] <alester> but why?

[22:16] <masak> diakopter: :P

[22:17] <TimToady> I fail to see how your analogy helps us.

[22:17] <alester> I feel like we are in the position of the clerk.

[22:17] <TimToady> I fail to see how your analogy helps us.

[22:18] <alester> Telling the customer "We have stuff!" It's just not what they want.

[22:18] <TimToady> I fail to see how your analogy helps us.

[22:18] <alester> Telling the customer "Your defintino sucks" doesn't help.

[22:18] *** spq1 left
[22:18] <TimToady> I fail to see how your analogy helps us.

[22:18] <masak> under the clerk analogy, I like to show the customer our selection of films.

[22:18] <alester> OK, Larry, I'll shut up.

[22:18] <masak> that's what I usually tend to work towards. showing stuff.

[22:19] <masak> it's extremely difficult for someone to claim that a thing that just produced a cool thing doesn't exist.

[22:20] <Tene> alester: What would you like us to say?

[22:20] <alester> "I know we don't have everything you want, and I'm sorry we're not there yet.  Let us show what we do have."

[22:20] <alester> But we're so focused on "You're wrong!" to the accusations.

[22:20] <alester> I know it's furstrating.

[22:21] <alester> It's frustrating when people tell me ack is broken because it doesn't do what they expected.

[22:21] <alester> (for example)

[22:21] <mkramer1> Well, they're wrong accusations.  If we don't refute them, then we've implicitly confirmed them

[22:21] <alester> mkramer1: So what?

[22:21] <alester> Let THEM decide.

[22:21] <alester> Otherwise it's a fight.

[22:21] <alester> And fighting helps no one.

[22:21] <TimToady> the right people will decide when the time is right

[22:21] <alester> Exactly.

[22:22] <masak> alester: I don't usually get depressed responding to people's mistaken claims about Perl 6. I get depressed trying to align to what you're saying now.

[22:22] <alester> why?

[22:22] <masak> let me try to analyze it for a minute or so.

[22:23] <TimToady> we all know the wave is building, the only question is when we want people to notice; I am personally in favor of a slow build over a fast splash

[22:23] <alester> TimToady: I can agree with that.

[22:23] <alester> s/can/do/

[22:23] <masak> alester: hm. because I think many people are blocking themselves from even *seeing* Perl 6 by cargo-culting the meme that it doesn't exist, or hasn't arrived yet.

[22:24] <alester> masak: OK, but that's not a you problem.

[22:24] <masak> not sure I know what that means.

[22:24] <alester> You don't have to own that problem.

[22:24] <masak> of couse not.

[22:24] <masak> Twitter is all about exchanging views with people.

[22:24] <masak> so is Reddit. so is HN.

[22:25] <TimToady> when people see continuums as either-or, that's a problem that prevents communication

[22:25] <alester> And, in general, I think that our time is better spent writing code/toolchain/modules/whatever that serves the whole, rather than convincing a single person.

[22:25] <TimToady> we're all very much trying to argue that there's a continuum, so naturally react against black/white arguments

[22:25] <alester> TimToady: Yes, black/white thinking can be a problem.  And it's not a problem we are going to solve.

[22:25] <Tene> I don't think those are exclusive tasks.

[22:25] <masak> alester: I think I would be depressed if my *main* occupation was to try to convince people like that.

[22:25] <alester> Tene: Can you write code at the same time you're arguing on reddit?

[22:26] <TimToady> the only way to solve black/white problems is to let people continue to be ignorant, eh?

[22:26] <sbp> you could write code to argue for you on reddit

[22:26] <alester> Do you have a way to stop them from being so?

[22:26] <dalek> niecza: dff8b2f | sorear++ | v6/ (2 files):

[22:26] <dalek> niecza: [v6] Add an option parser, command-line interface

[22:26] <dalek> niecza: review: https://github.com/sorear/niecza/commit/dff8b2fd0b

[22:26] <sbp> some kind of markov chain...

[22:26] <Tene> alester: No, but there *are* times that I can argue on reddit when I can't or am otherwise disinclined to write code.

[22:26] <TimToady> alester: several ways

[22:26] <masak> alester: I feel I have helped people see the light. are you saying that was a mistaken feeling?

[22:26] <Tene> alester: Similarly, there are plenty of times when I'm inclined to write code and disinclined to argue on reddit.

[22:26] <alester> masak: No

[22:26] <TimToady> some of them respond to talking, and others only respons to "show me the code"

[22:26] <TimToady> some of them will never respond

[22:27] <TimToady> people have different learning styles, and you can't assume only one way is the right way to teach 'em

[22:27] <alester> I just think there's more bang/buck in code/blogging/creation-of-something than there is in arguing the wrong.

[22:27] <alester> That's all.

[22:27] <masak> some of them are in it for the trolling. but those are few and far between.

[22:27] <TimToady> we can't know which they are unless we push back a bit

[22:27] <masak> most are genuinely misinformed.

[22:28] <sbp> I was thinking that as long as perl6 is a bunch of useful things for making other useful things, the education side won't matter (roughly, build and they will come). but then I thought about how Javascript coding practices have changed over the past ten years, not due to the language changing but due to education and slow evolution and creativity in usage patterns

[22:28] <alester> my $troll =~ ($comment =~ m/Duke Nuk/);

[22:28] <alester> One other suggestion:

[22:28] <alester> That I am trying to do

[22:28] <alester> when I see people say something wrong

[22:28] <alester> think something incorrect

[22:28] <sbp> so I wonder: how many of the people who are "yet to be convinced" about perl6 are going to also be those who help with the education and slow evolution / creativity in usage patterns?

[22:28] <masak> most Duke Nukem people are of the misinformed kind, not of the real-troll kind.

[22:28] <alester> I'm trying to blog about it, BEFORE replying in the thread,

[22:28] <alester> and THEN point the person to it.

[22:29] *** crythias left
[22:29] *** crythias joined
[22:29] <alester> So that the energy I place into replying to a single person, or single thread on a board, is directed for the world to see.

[22:29] <sbp> because the underlying constructive element, the language, the implementations, and the libraries are being built. so how many of those people who, apparently though I don't entirely follow the conversation, sorely need to be convinced or undeluded will contribute to those extra factors?

[22:29] <mkramer1> Hey, speaking of Duke Nukem, didja hear that the project has got more funding recently? :D

[22:29] <TimToady> alester: I think that scales well for some forums, but irc is more immediate, and they'll wander off before you get anything written here

[22:30] <TimToady> but I admire the attempt at knowledge capture

[22:30] <alester> True.

[22:30] <masak> me too. alester++

[22:30] <alester> In a larger scale, I think that message boards fall into False Importance.

[22:31] * diakopter bugs eyes at TimToady corpspeak

[22:31] <alester> Just because it's said in business doesn't make it invalid.

[22:31] <diakopter> I don't think all (any?) corpspeak is invalid :P

[22:31] <TimToady> well, we need leverage on all different scales :)

[22:32] <sbp> anyone? outstanding question in the wash above

[22:32] <diakopter> mkramer1's? ;)

[22:32] <masak> sbp: tl;dr :)

[22:33] <sbp> verbosity doesn't translate to buoyancy? :-)

[22:33] <TimToady> sbp: some not insignificant %

[22:33] <alester> My own Sisyphusian task is getting people to create sensible resumes. :-)

[22:33] <alester> (and buy my book)

[22:33] <sbp> not insignificant: in the way that every individual is not insignificant in the grand scheme, or...? :-)

[22:34] <TimToady> I mean that some portion of the new talent we will recruit over the next year will be "converts" from oversimpified views of reality

[22:35] <masak> fwiw, I agree with alester that most of those converts will be through cool code, not through active refutation of their views.

[22:35] <TimToady> there are a lot of people who think of Perl 6 as a "yes/no" question who will see what we've been doing and realize they can be a part of the transition from "no" to "yes".

[22:35] <TimToady> this will get more true as we put more real stuff out there

[22:35] <alester> Pretty much everyone in the "Perl 6 doesn't exist yet" camp are from Missouri.

[22:36] <TimToady> this is why I've been hacking so hard on rosettacode, for instance

[22:36] <Tene> alester: Missouri?

[22:36] <alester> "Show me"

[22:36] <Tene> ><

[22:36] <sbp> some. well I imagine that if those some are 10%, that's a very different case to 90%. the flexibility of perl6, the utter metameta of it, should mean that there will be more of a slide over time as new things are bootstrapped on top of the language than in most other languages

[22:36] <alester> sorry, for the non-US folks.

[22:36] <masak> I got it once you explained it.

[22:36] <alester> http://www.sos.mo.gov/archives/history/slogan.asp

[22:36] <sbp> one of the things that I really like about (especially) #perl6, but perl6 development in general, is that people get their heads down and just work on things, so the recent spate of concern over PR is interesting to me. I still don't really feel as though I should care

[22:37] <alester> I spent some childhood years in Nebraska, so it's 2nd nautre. :-)

[22:37] <sbp> which is why I'm so curious about the numbers

[22:37] <masak> alester: I disagree; pretty much everyone in the "Perl 6 doesn't exist yet" camp have peers who probably would think it was a nice punchline.

[22:37] <alester> example of what I've been trying to do on reddit http://www.reddit.com/r/resumes/comments/ez8n6/include_an_objective_or_not/c1c4kb0

[22:37] <alester> re: resumes

[22:37] <alester> Answering the question, while linking to existing message.

[22:38] <alester> Do we even have a page/blog post somewhere that canonically addresses "Perl 6 isn't out yet"?

[22:39] <edenc> alester: while I agree with you about blogging/coding/getting-things-done instead of arguing, if my late, humble opinion counts, there's a human factor to account for, when you've done a lot of work on something and people still bash it cluelesly, it's natural to stop rationalizing about what's the best thing to do, and there's when you can start making mistakes in how you react to things

[22:39] <alester> Because I suspect there's a lot of rework.

[22:39] <Tene> Oh man, resumes.  A friend of mine has been having a lot of trouble findign work lately, and the resume she's using is *exclusively* a list of previous employers and titles.

[22:39] <alester> "when you've done a lot of work on something and people still bash it cluelesly": Yes, I agree, we're all human and it hurts to hear people say our work sucks or is inadequate.

[22:39] <sbp> I'd use https://github.com/rakudo/star/downloads

[22:39] <alester> Tene: Point her to my book and blog http://techworklove.com/

[22:40] <alester> The big thing I'm seeing so much on reddit/resumes is lack of detail.

[22:40] *** GinoMan left
[22:41] <edenc> I'm working on a perl6 grammar-based dispatch and someone managed to get my ramblings onto hackernews where some clueless person said "congratulations, perl6 is almost like python" and pasted a link to the django regular expression dispatcher

[22:41] <edenc> there's a big conflict, it's hard to decide whether to educate the guy and explain the *big* difference between regexes and grammars or just shut up and go back to work

[22:42] <alester> edenc: I think we put too much stock into re-education of people.

[22:42] <edenc> so I'm always of the opinion of letting whoever's getting something done alone

[22:43] *** hercynium left
[22:43] *** jaldhar joined
[22:43] <edenc> whether he argues a lot like mst or a more reserved guy like larry, leave'em alone :)

[22:44] <edenc> if arguing is pointless, arguing about arguing is less even

[22:45] <sorear> 1. he's right 2. code is good

[22:45] <sorear> Perl 5 has been at the Python level for quite some time - Perl 6 is catching up

[22:45] <sbp> "at the Python level"?

[22:46] <alester> edenc++

[22:48] <masak> 'night, #perl6.

[22:48] <colomon> \o

[22:48] *** masak left
[22:48] <gfldex> if they defend their language that hard it can only mean that they have to defend their language. i like that. :)

[22:49] <alester> OK, off to be Dad.

[22:49] *** alester left
[22:49] *** hudnix left
[22:50] *** GinoMan joined
[22:53] <tadzik> edenc: erm, that was me working on grammar based dispatching

[22:54] <edenc> tadzik: yeah I now

[22:54] <edenc> *know

[22:54] <tadzik> edenc: you were the HN submitter?

[22:55] <TimToady> .oO(so we're supposed to create buzz without re-educating people, eh?)

[22:55] *** cafesofie left
[22:55] <edenc> tadzik: no, you posted the blog entry after we discussed in here, along with ruoso

[22:55] <tadzik> ah, that was you! I remember know

[22:56] <sorear> TimToady: you can't re-educate people, you can only corrupt the youth.  It it no coincidence that PaFo ranks far higher in GCI than GSoC

[22:56] <tadzik> I even mentioned you in the blog post

[22:56] <edenc> tadzik: yeah

[22:57] <edenc> tadzik: I'm silently and slowly learning the inner workings of perl 6 grammars in order to make up my mind about whether to copy some of the things into perl 5 or just plain use perl6 for the whole thing

[22:58] <tadzik> I see

[22:59] <edenc> and trying to pay the bills at the same time :)

[23:00] <edenc> I was part of a framework project that suffered a slow and horrible death

[23:00] <edenc> it really sucks to be bashed on a daily basis

[23:02] *** avms left
[23:02] *** avms joined
[23:03] <edenc> and I really admire the perl 6 folks for the persistence, even with all the bashing coming from the perl community itself

[23:07] *** plobsing left
[23:09] *** kjeldahl left
[23:13] <pmurias> sorear: is there a GSoC ranking?

[23:14] <diakopter> ranking of what

[23:16] <pmurias> "PaFo ranks far higher in GCI than GSoc"

[23:16] <sorear> pmurias: not an official one, but just look at the 5 PaFo tasks and the 20+ ffmpeg tasks

[23:16] <pmurias> people likely want to do something easy

[23:17] <sorear> pafo gets very little love from gsoc students, relative to most open source projects

[23:17] <pmurias> sorear: btw are you a student?

[23:17] <sorear> yes

[23:17] <pmurias> why didn't you take part in GSoC?

[23:18] <sorear> I don't have a good reason

[23:19] *** avms left
[23:19] *** hudnix joined
[23:19] <pmurias> you can take part this year

[23:19] <pmurias> ;)

[23:21] *** hudnix left
[23:22] *** hudnix joined
[23:22] *** cafesofie joined
[23:24] *** yarp joined
[23:27] <tadzik> 'night

[23:27] *** icwiener joined
[23:40] *** jaldhar left
[23:43] *** dukeleto joined
[23:46] *** sji joined
[23:46] *** sji left
[23:47] *** risou joined
[23:48] *** shi left
[23:51] *** risou left
