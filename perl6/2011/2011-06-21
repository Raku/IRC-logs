[00:09] *** slontec joined
[00:25] *** daniel-s left
[00:25] *** kborer joined
[00:27] <jnthn> sleep &

[00:44] <sorear> What's the most idiomatic way to write "{$from}::$_" ?

[00:48] *** sftp joined
[00:48] <thou> ::($from)<$_>

[00:48] <thou> no idea if that works

[00:48] <thou> :-)

[00:49] <thou> o/ hello!  and, ... \o goodbye, #perl6 :-)

[00:49] *** thou left
[00:51] <sorear> not what I meant :)

[00:52] <sorear> I want $from ~ "::" ~ $)

[00:52] <sorear> $_

[00:57] <sorear> niecza v7 release on the 27th

[01:01] *** sftp_ joined
[01:02] *** sftp left
[01:06] *** noganex joined
[01:10] <TimToady> you mean more like ::($from)::{$_}, or maybe ::($from)::($_)

[01:12] <TimToady> or ::($from ~ '::' ~ $_)

[01:12] <sorear> No

[01:12] <sorear> I do not want to look up a name

[01:12] <sorear> I just want to construct a string

[01:13] <TimToady> then the way you wrote it first seems pretty okay

[01:14] <TimToady> but I don't know what you mean by 'idiomatic'

[01:14] <sorear> "{$package}::$name" just looks a bit ugly to me

[01:15] <TimToady> perl6: my $from = "abc"; $_ = "def"; say "$from\::$_"

[01:15] <p6eval> pugs, rakudo 248244, niecza v6-177-g365e216: OUTPUT«abc::def␤»

[01:15] <TimToady> that works too

[01:17] <TimToady> but $from ~ '::' ~ $_ ain't all that bad either

[01:18] *** sftp_ left
[01:23] *** sftp_ joined
[01:23] *** woosley joined
[01:40] <lichtkind> TimToady: sorry for being little bit grumpy on that sin thing, i dont take my position to seriously only if other people suffer :)

[01:44] <lichtkind> i mean not too seriously :)

[01:47] <lichtkind> TimToady: other than that i just want to know if there are any changes in the IO sector underway, because that tablet is gona to be wrtten next

[01:51] *** whiteknight left
[01:52] *** gh joined
[01:53] *** Chillance joined
[01:56] *** cognominal_ joined
[02:00] *** molaf joined
[02:00] *** d4l3k_ joined
[02:00] *** kst` joined
[02:01] *** nsh joined
[02:01] *** beekar joined
[02:02] *** scottp_ joined
[02:02] *** miso2217__ joined
[02:03] *** uniejo_ joined
[02:03] *** diakopte1 joined
[02:04] *** _patch_ joined
[02:04] *** Gruber joined
[02:04] *** orafu joined
[02:04] *** xinming_ joined
[02:08] *** Helios left
[02:08] *** Grrrr left
[02:08] *** _patch left
[02:08] *** nsh| left
[02:09] *** d4l3k_ is now known as dalek

[02:09] *** ChanServ sets mode: +v dalek

[02:13] *** gh left
[02:23] *** Guest42133 joined
[02:27] *** Guest42133 left
[02:29] *** envi_laptop joined
[02:30] *** stepnem joined
[02:34] *** chitragupt left
[02:36] *** ab5tract joined
[02:46] *** cooper left
[02:47] *** cooper joined
[02:57] *** molaf left
[03:03] *** chitragupt joined
[03:20] <dalek> nqp-rx: 1dc87d4 | pmichaud++ | src/stage0/ (3 files):

[03:20] <dalek> nqp-rx: Update bootstrap files to take advantage of new PAST::Stmt nodes and

[03:20] <dalek> nqp-rx: better register allocation.

[03:20] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/1dc87d48d6

[03:23] *** Su-Shee_ joined
[03:24] <pmichaud> all parrot tests pass with new nqp-rx bootstrap... building rakudo

[03:24] <pmichaud> oops, wrong chan

[03:24] *** agentzh joined
[03:24] *** agentzh left
[03:24] *** agentzh joined
[03:30] *** JimmyZ joined
[03:32] *** jaldhar joined
[03:41] *** sftp_ left
[04:08] <colomon> in a rather abrupt change in personal plans, I just booked a flight to YAPC::NA.  I don't like flying, but it turns out I like the idea of driving 12 hours by myself, part of it through mountains (which I hate) even less.  Plus the cost of the flight was almost the same as the gas would have cost.

[04:08] <colomon> afk # bed

[04:16] *** ab5tract left
[04:23] <TimToady> http://rosettacode.org/wiki/Arbitrary-precision_integers_(included)#Perl_6

[04:24] <TimToady> uses niecza...didn't mention it takes 2m 17s on my T61...  :)

[04:25] <TimToady> niecza: say 5 ** 262144;   # this is the slow part  :)

[04:25] <p6eval> niecza v6-177-g365e216: OUTPUT«(timeout)»

[04:26] *** satyavvd joined
[04:32] <sorear> hehe, I can imagine :)

[04:32] <sorear> the ** routine is... old.

[04:33] <sorear> pmurias wrote it, iirc, before niecza even had bitops

[04:34] <TimToady> it could likely be sped up by squaring 5 repeatedly and factoring out large pieces, the doing it again for the remainder

[04:35] <sorear> yeah

[04:35] <sorear> wait.

[04:35] <sorear> 262144 is a power of 2

[04:36] <TimToady> niecza: say 4**3**2

[04:36] <p6eval> niecza v6-177-g365e216: OUTPUT«262144␤»

[04:36] <TimToady> yes

[04:36] <sorear> niecza: say (5, { $^a * $^a } ... *)[18]

[04:36] <p6eval> niecza v6-177-g365e216: OUTPUT«(timeout)»

[04:36] <sorear> niecza: say (5, { $^a * $^a } ... *)[1]

[04:36] <p6eval> niecza v6-177-g365e216: OUTPUT«25␤»

[04:36] <sorear> niecza: say (5, { $^a * $^a } ... *)[8]

[04:36] <p6eval> niecza v6-177-g365e216: OUTPUT«86361685550944446253863518628003995711160003644362813850237034701685918031624270579715075034722882265605472939461496635969950989468319466936530037770580747746862471103668212890625␤»

[04:37] <sorear> niecza: say (5, { $^a * $^a } ... *)[18].chars

[04:37] <p6eval> niecza v6-177-g365e216: OUTPUT«(timeout)»

[04:37] <sorear> niecza: say (5, { $^a * $^a } ... *)[16].chars

[04:37] <p6eval> niecza v6-177-g365e216: OUTPUT«(timeout)»

[04:37] <sorear> niecza: say (5, { $^a * $^a } ... *)[10].chars

[04:37] <p6eval> niecza v6-177-g365e216: OUTPUT«716␤»

[04:37] <sorear> niecza: say (5, { $^a * $^a } ... *)[13].chars

[04:37] <p6eval> niecza v6-177-g365e216: OUTPUT«5726␤»

[04:38] <sorear> fail

[04:42] * sorear decides to forbid class MY::Foo { }

[04:43] *** birdwindupbird joined
[04:52] <TimToady> hmm, BigInteger has a Pow routine, but it looks like maybe you're not using it

[04:56] <sorear> right

[04:57] <sorear> you want lib/CORE.setting:291

[04:57] <sorear> I don't really understand how ** is supposed to work, typologically

[04:58] <sorear> I kindof like the Haskell solution there...

[04:58] <sorear> I wonder things like whether -2 ** 4e0 should be Complex

[04:59] <sorear> rakudo: say (-2 ** 4e0).WHAT

[04:59] <p6eval> rakudo 248244: OUTPUT«Num()␤»

[05:03] <TimToady> niecza: say 2 ** .5

[05:03] <p6eval> niecza v6-177-g365e216: OUTPUT«2␤»

[05:03] <TimToady> heh

[05:05] *** koban joined
[05:06] <sorear> but 4e0 is often considered to have an <=epsilon (real) error

[05:06] <dalek> nqp: 6e4f4db | pmichaud++ | / (3 files):

[05:06] <dalek> nqp: Add PAST::Want nodetype, allows selection of a PAST tree based

[05:06] <dalek> nqp: on rtype signature requested by the caller.

[05:06] <dalek> nqp: 

[05:06] <dalek> nqp: This will likely move into Parrot's source tree eventually; I've

[05:06] <dalek> nqp: added it here now so we can test and iterate it more directly

[05:06] <dalek> nqp: until it stabilizes.

[05:06] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6e4f4db287

[05:08] * sorear tries to figure out how to type lessequals again

[05:12] *** tomize joined
[05:13] <dalek> rakudo/nom: d3bd796 | pmichaud++ | / (2 files):

[05:13] <dalek> rakudo/nom: Bump NQP_REVISION to get PAST::Want.  Use PAST::Want on constant

[05:13] <dalek> rakudo/nom: nodes to avoid serializing and unboxing constant int/num operands

[05:13] <dalek> rakudo/nom: going directly to pir:: opcodes.

[05:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d3bd796843

[05:14] <sorear> What is PAST::Want?

[05:15] *** Trashlord joined
[05:20] *** birdwindupbird left
[05:26] *** kaare_ joined
[05:43] *** Chillance left
[05:44] *** stephanepayrard_ joined
[05:47] *** cognominal_ left
[05:50] *** envi_laptop left
[05:50] *** starcoder joined
[05:55] *** wtw joined
[06:03] *** wamba joined
[06:10] *** birdwindupbird joined
[06:10] *** Sarten-X joined
[06:22] *** Su-Shee_ is now known as Su-Shee

[06:24] *** fhelmberger joined
[06:26] *** tomize left
[06:26] *** tomize joined
[06:37] *** benabik joined
[07:03] *** scottp_ is now known as scottp

[07:17] *** dukeleto left
[07:17] *** dukeleto joined
[07:33] *** araujo joined
[07:34] *** mj41 joined
[07:39] *** araujo left
[07:42] *** daxim joined
[08:00] *** envi_laptop joined
[08:00] *** wamba left
[08:00] *** tzhs joined
[08:05] *** Gruber is now known as Grrrr

[08:19] <moritz> sorear: it's probably detecting sink context

[08:20] <JimmyZ> Walk ant?

[08:20] *** REPLeffect joined
[08:26] *** dakkar joined
[08:26] *** xinming_ is now known as xinming

[08:32] <sorear> moritz: the pod in the commit explains it

[08:32] <sorear> it selects one of N children based on INSP result type

[08:33] <sorear> to make constants more efficient in native type code

[08:33] <sorear> (grr... efficient native types will set me *so far back*)

[08:37] <moritz> sorear: no, it will set rakudo forth, not niecza back

[08:39] *** Sarten-X left
[08:43] *** mberends joined
[08:44] <mberends> I recall pmichaud++ was famous for DO NOT WANT want() ;)

[08:45] <sorear> o/ mberends

[08:45] <mberends> o/

[08:45] *** Shozan joined
[08:45] <moritz> mberends: indeed, but the sink/notsink distinction can actually be made, and should (for performance and eagerness reasons)

[08:46] <moritz> mberends: contrary to want(), which wasn't computable

[08:46] <sorear> I hate sink/notsink because it brazenly violates the "do not pay for what you do no use" rule

[08:47] <sorear> $x = foo($y,$z); # this has to call $x.sink

[08:47] <sorear> er wait

[08:47] <sorear> foo($y,$z); # this has to call .sink

[08:48] <sorear> I can arrange to short-circuit it by testing a flag on the STable, but still

[08:48] *** Sarten-X joined
[08:49] *** icwiener joined
[08:49] <sorear> or I could add PL_sawlazylist and only generate .sink calls if lazy lists are being used.  That's sure to elicit a response from TimToady:D

[08:55] *** Sarten-X left
[09:04] *** mberends left
[09:05] <sorear> *out*

[09:08] *** Sarten-X joined
[09:14] *** saaki joined
[09:14] <dalek> rakudo: f234be6 | moritz++ | build/PARROT_REVISION:

[09:14] <dalek> rakudo: bump PARROT_REVISION to 3.5.0

[09:14] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/f234be6859

[09:16] *** daniel-s joined
[09:19] <dalek> rakudo: 7570802 | moritz++ | docs/ChangeLog:

[09:19] <dalek> rakudo: update ChangeLog a bit

[09:19] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/757080260f

[09:22] *** toebu joined
[09:36] *** kanishka joined
[09:45] *** woosley left
[10:07] *** agentzh left
[10:18] *** stepnem left
[10:25] *** fbass joined
[10:27] *** stepnem joined
[10:37] *** araujo joined
[10:37] *** araujo left
[10:37] *** araujo joined
[10:40] *** mkramer1 joined
[10:44] *** mkramer joined
[10:46] *** mkramer1 left
[10:56] *** s1n joined
[11:15] *** xinming left
[11:16] *** xinming joined
[11:19] *** envi_laptop left
[11:21] *** avar joined
[11:32] *** wamba joined
[11:40] *** pnu joined
[11:42] *** satyavvd left
[11:49] <colomon> moritz++

[12:03] *** stepnem left
[12:04] *** stepnem joined
[12:06] *** Helios joined
[12:06] <takadonet> morning all

[12:06] <colomon> o/

[12:07] <moritz> \o

[12:07] *** lichtkind joined
[12:08] *** orafu left
[12:08] *** orafu joined
[12:12] *** yves joined
[12:13] *** aloha joined
[12:18] <daniel-s> is it bad to write the opening curly bracket on the next line, rather than as: if (a<b) {

[12:18] *** birdwindupbird left
[12:19] <moritz> it's much more important to put whitespace around the infix operator

[12:19] <moritz> and you don't need the ( ) either

[12:19] <moritz> so just write   if a < b {   and be happy :-)

[12:19] * moritz is great in not actually answering questions :-)

[12:20] *** molaf joined
[12:22] <dalek> rakudo: 3fc36ba | pmichaud++ | docs/announce/2011.06:

[12:22] <dalek> rakudo: Add a draft 2011.06 release announcement.  (Still needs updates.)

[12:22] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/3fc36ba58d

[12:31] <JimmyZ> good evening, #perl6

[12:31] <pmichaud> JimmyZ: o/

[12:31] <pmichaud> good morning, #perl6

[12:31] <takadonet> JimmyZ: o/

[12:31] <JimmyZ> && good morning, pmichaud 

[12:32] *** woosley joined
[12:32] <moritz> pmichaud: do you want to mention the nom branch in the release announcement?

[12:32] <pmichaud> I think it would be good to mention it, yes.

[12:32] <JimmyZ> takadonet: o

[12:38] <lichtkind> moritz: if you would be so kind make a quick check if I did no major BS http://perlpunks.de/paste/show/4e00909e.9d1.4e

[12:49] *** bluescreen10 joined
[12:51] <moritz> lichtkind: not bullshit, but I'd like to remind you that only names and substantives are capitalized in German

[12:51] <lichtkind> moritz: sounds plausible :)

[12:52] <PerlJam> greetings #perl6lings

[12:53] <pmichaud> PerlJam: o/

[12:53] <PerlJam> This month's release is the "hitchhikers guide to the galaxy" release   :)

[12:53] <pmichaud> yes, I believe that's why jdhore++ claimed it. :)

[12:53] <pmichaud> We should put "Don't Panic" in the announcement.  :-)

[12:53] * moritz wonders why lue wasn't faster :-)

[12:53] <PerlJam> indeed

[12:54] <PerlJam> had lue gotten it, there would have been too much HHGTTG

[12:54] <PerlJam> :-)

[12:54] *** mberends joined
[12:54] <pmichaud> oh, and all-caps.

[12:54] <moritz> INDEED

[12:55] <mberends> \o/ biggish int long division works: 0x906c93c2fa29608fc6f2cad3ef5 / 0x11112222333344445555 == 0x87654321 # will push after $work

[12:56] *** JimmyZ_ joined
[12:58] *** JimmyZ left
[12:58] *** JimmyZ_ is now known as JimmyZ

[12:59] *** fbass left
[13:00] <PerlJam> I wonder if someone on the "outside" is looking at the Rakudo release announcements and wondering what happened to that Worhtington guy ... he hasn't contributed in a while   ;-)

[13:00] <pmichaud> Slacker.

[13:02] *** birdwindupbird joined
[13:03] *** sftp joined
[13:03] *** Holy_Cow joined
[13:03] *** birdwindupbird left
[13:03] *** birdwindupbird joined
[13:04] *** smash joined
[13:04] <smash> hello everyone

[13:05] *** MayDaniel joined
[13:07] <takadonet> smash: hey

[13:08] <smash> hmm.. i'm a bit lost in these new nqps' (my fault of course)

[13:08] *** mberends left
[13:11] *** woosley left
[13:12] <PerlJam> smash: lost how?

[13:13] <moritz> it's quite easy

[13:13] <moritz> there's the old-old NQP. It's dead

[13:14] <moritz> the next one was NQP-rx, on which rakudo master is built

[13:14] <moritz> it ships with parrot

[13:14] * smash nods.

[13:14] <smash> nqp-rx was the last one i looked at

[13:14] <moritz> then there's the new nqp, which comes with 6model, and on which rakudo/nom is being built

[13:14] *** koban left
[13:14] *** sunnavy joined
[13:14] <moritz> the only really confusing thing is that the nqp-rx executable is called 'parrot-nqp'

[13:16] <smash> moritz: thank you for the summary

[13:16] <moritz> smash: you're welcome

[13:33] *** aidan2011 joined
[13:34] *** lichtkind left
[13:39] *** tokuhirom joined
[13:40] *** daniel-s left
[13:41] *** daniel-s joined
[13:52] *** wamba left
[13:58] *** Shozan left
[14:00] *** jasonmay joined
[14:06] *** Holy_Cow left
[14:09] *** kfo joined
[14:09] *** mkramer left
[14:15] *** Chillance joined
[14:17] *** wtw left
[14:17] *** leprevost joined
[14:20] *** bluescreen10 left
[14:23] *** jaldhar left
[14:23] *** jaldhar joined
[14:24] *** MayDaniel left
[14:30] *** mkramer1 joined
[14:32] *** molaf left
[14:38] *** daniel-s left
[14:38] *** daniel-s joined
[14:39] *** slavik joined
[14:51] *** thou joined
[14:56] <dalek> nqp: bcfe1f0 | pmichaud++ | tools/build/PARROT_REVISION:

[14:56] <dalek> nqp: Bump PARROT_REVISION to 3.5.0 release.

[14:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bcfe1f009e

[14:56] <dalek> nqp: c62322b | pmichaud++ | / (5 files):

[14:56] <dalek> nqp: Add initial version of nqp:: pseudo-opcode space for low-level primitives.

[14:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c62322b88c

[14:59] <moritz> pmichaud: do the control nqp:: opcodes take closures?

[15:00] <moritz> pmichaud: also you wrote that the p6 terms are prefered, but use nqp::upcase instead of nqp::uc

[15:03] *** tokuhirom left
[15:03] *** tokuhirom joined
[15:05] <moritz> pmichaud: and we might want an open() opcde (?) 

[15:06] <moritz> ah, not closures, just statements

[15:07] <moritz> thunks

[15:07] *** mkramer1 left
[15:08] <moritz> pmichaud++

[15:09] <moritz> though why do we need nqp::if and nqp::: when we already have the ternary? bootstrapping thingies?

[15:20] *** daniel-s left
[15:21] *** toebu left
[15:22] *** wamba joined
[15:28] *** donri joined
[15:28] *** kaare_ left
[15:36] *** strider__ joined
[15:36] *** strider__ left
[15:36] *** strider__ joined
[15:37] *** tzhs left
[15:38] *** Tedd1 joined
[15:38] *** cotto joined
[15:39] *** strider__ left
[15:39] *** stormcrow joined
[15:47] *** stormcrow left
[15:47] *** strider__ joined
[15:50] *** strider__ left
[15:50] *** strider__ joined
[15:53] <pmichaud> moritz: yes, bootstrapping.

[15:54] <pmichaud> eventually ?? !! will be defined in terms of nqp::if() .

[15:54] <pmichaud> Agreed on "uc" versus "upcase" -- fixing.

[15:54] *** slontec left
[15:54] <moritz> pmichaud: but isn't control flow usually bootstrapped by the code emitting part?

[15:55] <pmichaud> nqp::if() is just another way of saying  PAST::Op(:pasttype<if> ... )

[15:55] <moritz> I mean, the PAST if-block takes care of that

[15:55] <moritz> ok

[15:55] <pmichaud> all of the nqp:: "opcodes" are really just ways of requesting specific PAST nodes

[15:55] <pmichaud> it even occurred to me earlier that we can do  nqp::stmts(...)   and create PAST::Stmt blocks

[15:56] <pmichaud> i.e., eventually it would be possible to write all of nqp using nqp:: ops :)

[15:56] <pmichaud> (well, maybe not all, but we can get darn close)

[15:57] <pmichaud> what nqp:: really does is give us a functional syntax to map to the capabilities of whatever virtual machine we happen to be on

[15:57] <pmichaud> (as exposed by PAST)

[15:57] <pmichaud> eventually PAST will be written in nqp, at which point we'll be very self-hosted

[15:58] *** cotto left
[15:58] <pmichaud> About 20 minutes ago I was thinking of nqp::parrot(...), which performs an operation on Parrot but is a no-op everywhere else.

[15:58] <moritz> might be useful, might be dangerous

[15:59] <pmichaud> well, I was thinking of the case of something like the 'compreg' opcode.

[15:59] <pmichaud> Eventually HLL::Compiler will have its own "lookup a compiler" equivalent, that can be independent of compreg

[16:00] <pmichaud> i.e., it'll keep its own table of compilers

[16:00] <pmichaud> but if we're running on parrot, we'd like to go ahead and register the compiler via compreg anyway

[16:01] <pmichaud> so:   nqp::parrot(pirop=>'compreg', ...args...)   can do that for us.  It lets us execute a parrot opcode, but gets ignored by non-parrot vms.

[16:01] *** Yaakov joined
[16:01] <pmichaud> anyway, yes, there's a lot of new capability here to be explored :)

[16:02] <pmichaud> I'm eager to start converting nom to using nqp:: instead of pir:: where we can

[16:03] <moritz> shouldn't be too hard, once you've bootstrapped

[16:03] *** Yaakov left
[16:03] <pmichaud> oh, I can add nqp:: syntax to nom now :)

[16:03] <pmichaud> no bootstrap necessary, at least for the CORE.setting part

[16:03] <moritz> ah, I misread

[16:03] <moritz> I thought you meant nqp

[16:04] <moritz> for nqp you'd need bootstrapping

[16:04] <pmichaud> nqp already can start using nqp::

[16:04] <pmichaud> that's how it's able to test it :)

[16:04] <pmichaud> (nqp:: is already built into nqp.)

[16:04] <moritz> but not in the stage1 compiler, is it?

[16:04] <pmichaud> rakudo uses the stage2 compiler

[16:05] <pmichaud> anyway, "make bootstrap-files"  will put it into stage 0 :)

[16:05] <moritz> but you couldn't use nqp:: in NQP's Action.pm unless you bootstrap, right?

[16:05] * moritz just wants to check his sanity

[16:05] <pmichaud> right

[16:05] <pmichaud> s/unless/until, at this point.

[16:05] <moritz> right

[16:07] <pmichaud> doing that now :)

[16:09] <pmichaud> the opcodes I'm not entirely happy with are nqp::bindattribute and nqp::getattribute.  They feel "long", and I'm not fond of "get" either.  I'm thinking of just  nqp::bindattr and nqp::getattr

[16:09] <pmichaud> or even just nqp::attr instead of nqp::getattr

[16:10] <PerlJam> whenever I see "get...", I tend to expect there to be a corresponding "set..." 

[16:10] <PerlJam> (just a data point)

[16:10] *** mj41 left
[16:10] *** strider__ left
[16:10] *** strider__ joined
[16:11] <pmichaud> PerlJam: I'm the same way.  I'm still stung by Parrot's over-misuse of that term.

[16:11] *** MayDaniel joined
[16:12] <pmichaud> and I think I'd be much more explicit by using "bind*" instead of "set*", so that means "get*" should probably disappear in favor of something else

[16:12] <dalek> nqp: 3bb5b1c | pmichaud++ | / (3 files):

[16:12] <dalek> nqp: nqp::downcase/nqp::upcase should be nqp::lc/nqp::uc.  moritz++

[16:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3bb5b1cbac

[16:12] <dalek> nqp: 900cf14 | pmichaud++ | src/stage0/ (6 files):

[16:12] <dalek> nqp: Re-bootstrap to enable nqp:: ops within NQP itself.

[16:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/900cf14206

[16:15] *** spq1 joined
[16:16] *** strider__ left
[16:16] *** strider__ joined
[16:17] *** strider__ left
[16:20] * PerlJam suffers a failure of imagination on replacement candidates for "get*"

[16:20] *** REPLeffect left
[16:21] *** dukeleto left
[16:21] *** dukeleto joined
[16:22] <pmichaud> "fetch"  is the best I've come up with thus far

[16:23] *** Trashlord left
[16:23] <pmichaud> "grab"

[16:23] <PerlJam> "reap" might work if you're so inclined  (it certainly won't have any cognitive overload in this context ;)

[16:23] <pmichaud> "reap" implies to delete or remove, to me.

[16:24] <pmichaud> pmichaud@kiwi:~/nom$ ./perl6

[16:24] <pmichaud> > nqp::say(nqp::add_i(2,3))

[16:24] <pmichaud> 5

[16:24] <pmichaud> \o/

[16:25] <JimmyZ> \o we open the door to other vms :)

[16:25] <JimmyZ> not we, I mean pmichaud++

[16:25] <pmichaud> it's a collective effort, certainly.

[16:26] <JimmyZ> though I don't like C# and Java :)

[16:26] <pmichaud> well, if this goes well, then you'll be able to use Perl on the CLR without having to deal with C# :-)

[16:26] *** Trashlord joined
[16:27] <PerlJam> "grab" works for me (I tend to favor something with 4 letters to match "bind" in the absence of some mnemonic device)

[16:27] * JimmyZ never learns   commercial language

[16:27] <pmichaud> I'll brainstorm a bit more.

[16:27] <JimmyZ> I would like fetch

[16:31] <PerlJam> so will there be 3 variants or just 2?

[16:31] <pmichaud> ?

[16:32] <PerlJam> bind, fetch, and "change the thing bound" ?

[16:32] <PerlJam> or just bind?

[16:32] <pmichaud> bind, fetch, and maybe store

[16:32] <pmichaud> where store means "put into the thing"

[16:32] <PerlJam> ok

[16:32] <pmichaud> i.e., we bind a lexical symbol, and we can store into a container

[16:32] <pmichaud> (also following some of the p6 terminology here :)

[16:34] <PerlJam> You can't go too far wrong following the lead of a linguist when doing languagey things  ;)

[16:35] <pmichaud> ...how does this look to folks?   http://gist.github.com/1038259

[16:36] <PerlJam> less verbose than before.

[16:37] <JimmyZ> maladjustment

[16:37] <PerlJam> stupid question:  We can't have ops that operate on boxed ints?

[16:38] <pmichaud> in parrot, that would mean going through the vtables

[16:38] <pmichaud> which would mean creating a vtable for every type

[16:40] <pmichaud> which currently means that you either write that code in C (not portable), or you suffer an absolutely gigantonormous performance penalty as you jump through inferior runloops to get to the pir that implements your vtable

[16:41] *** aidan2011 left
[16:41] <pmichaud> if you mean "can we create ops that automatically unbox the ints for us"... we might be able to do that, but jnthn++ feels pretty strongly at this point that we should keep coercions a bit more explicit (I agree with him for now)

[16:41] <pmichaud> s/ops/pseudo-ops/

[16:42] <pmichaud> s/coercions/(un)boxing/

[16:45] <PerlJam> I was thinking ahead a little to the mythical VM that caters to Rakudo's needs and wondering how this code would change to run on both that VM (or a VM like it) and Parrot

[16:45] <pmichaud> I think the code might be the same -- on that VM the unbox_i opcodes would be no-ops (and thus optimize out)

[16:46] *** cdarroch joined
[16:46] *** cdarroch left
[16:46] *** cdarroch joined
[16:52] <dalek> rakudo/nom: 2089c06 | pmichaud++ | / (3 files):

[16:52] <dalek> rakudo/nom: Bump NQP_REVISION, add nqp::ops.

[16:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2089c0612a

[16:52] <dalek> rakudo/nom: b513e34 | pmichaud++ | src/ (2 files):

[16:52] <dalek> rakudo/nom: Proof of concept of Int arithmetic ops using nqp:: opcodes instead of pir:: .  Win.

[16:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b513e348fd

[16:53] *** kst` left
[16:54] <pmichaud> I *like* this layer of abstraction.  :)

[16:55] <pmichaud> afk, lunch

[16:58] *** kst joined
[16:58] *** tokuhirom left
[16:58] *** cotto joined
[16:59] *** birdwindupbird left
[17:04] *** daxim left
[17:05] *** dakkar left
[17:09] *** dual joined
[17:14] *** Chillance left
[17:16] *** Chillance joined
[17:18] *** Sarten-X left
[17:18] <jdhore1> pmichaud, I could've done the announcement :(

[17:19] <PerlJam> jdhore1: a) it's not finished and b) why the :( ?  this is what open source and community is about.  Everyone does a little bit to make the whole better.

[17:19] <jdhore1> True, but I sort of like writing them

[17:20] <PerlJam> you've got the more important and difficult task though ... choosing a name :)

[17:20] <jdhore1> I already have that

[17:21] <jdhore1> Since it's release #42, i'm going to be making all sorts of Hitchiker's Guide references. The release name is one of them.

[17:21] *** y3llow joined
[17:25] *** Sarten-X joined
[17:26] *** smash left
[17:26] *** kanishka left
[17:28] <spetrea> sorear: hey

[17:28] <phenny> spetrea: 19 Jun 18:14Z <sorear> tell spetrea to check out niecza if performance is a major concern

[17:29] <spetrea> sorear: I always wonder around, write Perl5 a lot at work and at home, but I come here from time to time because I want to know the future

[17:29] <PerlJam> so, we have a higher concentration of the future here than other places?

[17:30] <JimmyZ> maybe we can change the future here

[17:30] <JimmyZ> error, not me

[17:30] <JimmyZ> you guys

[17:31] <PerlJam> we can change other people's future, just not our own

[17:38] *** cotto left
[17:45] <pmichaud> jdhore1: I only created an initial draft.

[17:45] <pmichaud> jdhore1: you're welcome to change it however you want.  :)

[17:46] <jdhore1> :D

[17:46] <pmichaud> I do have one more change to make

[17:46] <pmichaud> (with a hitchhiker's reference :)

[17:48] *** JimmyZ left
[17:50] <jdhore1> :D

[17:51] <jdhore1> I'm going so obscure with the releasename that even i didn't get the reference till someone explained it to me...but it's perfect.

[17:52] *** cotto joined
[17:52] *** Chillance left
[18:02] <dalek> rakudo: 7175e54 | pmichaud++ | docs/announce/2011.06:

[18:02] <dalek> rakudo: Add a DON'T PANIC note referencing "nom".

[18:02] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/7175e54022

[18:03] <PerlJam> pmichaud: awww, you didn't like my "contribution"?  :)

[18:04] *** cotto left
[18:06] <pmichaud> PerlJam: I missed it, I guess

[18:07] <PerlJam> I only added my name to the release doc to claim the Oct release  :)

[18:07] <PerlJam> so that lumps me in with "and others" I guess :)

[18:07] <pmichaud> oh, that

[18:08] <pmichaud> You're welcome to edit the announcement and add yourself if you want.  I think that's worth a mention :)

[18:08] *** masak joined
[18:08] <masak> oh hai #perl6

[18:08] <pmichaud> masak: oh hai!

[18:09] <moritz> \o

[18:09] <PerlJam> masak: greets!

[18:09] * masak is having laptop trouble

[18:10] <masak> worse, I gave it to a computer repairman yesterday, but I had to take it back because it turns out I can't live without it... :/

[18:10] <masak> but enough about me. how are you guys doing?

[18:10] <pmichaud> I'm preparing my #phasers report

[18:12] <masak> ooh, thanks for the reminder! :)

[18:19] *** kboga joined
[18:33] *** lichtkind joined
[18:34] <Tene> masak: I've got a spare laptop laying around; obviously you should come hang out at my place.

[18:37] <pmichaud> I've got two or three.  Of course, some of them are woefully underpowered.  :)

[18:38] <masak> I can use this one, but only with a USB keyboard plugged in.

[18:38] <masak> Tene: thanks for the offer. I wish it were easier to realize :)

[18:39] <pmichaud> I even have a spare usb wireless keyboard or two :)

[18:40] <masak> I have a model M one, but I'll need to buy a smaller one before going to FPW.

[18:40] <pmichaud> bbi20

[18:40] *** colomon joined
[18:40] *** dukeleto left
[18:41] *** dukeleto joined
[18:41] <colomon> sorear: I'm going to take a stab at properly implementing infix:<**> on the drive back up.  (Unless I successfully manage to download a lot of useful $work stuff from this cafe in the next five minutes.)

[18:49] *** kborer left
[18:50] <sorear> good * #perl6

[18:51] *** cotto joined
[18:52] *** mberends joined
[18:53] *** Chillance joined
[18:54] *** colomon left
[18:55] *** colomon joined
[18:57] *** colomon left
[18:59] *** jaldhar left
[19:03] <sorear> spetrea: o/

[19:09] *** Woodi joined
[19:25] *** bakedb joined
[19:27] <moritz> std: $::a

[19:27] <p6eval> std 37a0cdd: OUTPUT«ok 00:01 118m␤»

[19:29] <masak> there's an OO pattern called Memento of which I've learned recently.

[19:29] <masak> it uses an inner class to do serialization without breaking encapsulation/data hiding.

[19:30] *** robinsmidsrod left
[19:30] <masak> it's common in Java and C#, it seems.

[19:30] <moritz> and I thought it involved reversed time (like the movie)

[19:30] <masak> :P

[19:30] <masak> I was wondering if the same could be done in Perl 6, and I think it can; if the inner class trusts the outer.

[19:31] <masak> and then I got to thinking -- maybe inner (physically nested) classes should trust outer ones by default.

[19:31] <masak> s/\./?/

[19:35] <masak> std: $::"foo"

[19:35] <p6eval> std 37a0cdd: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row at /tmp/cz8DfJ2CCB line 1:␤------> [32m$::[33m⏏[31m"foo"[0m␤    expecting any of:␤    POST␤   bracketed infix␤        infix or meta-infix␤    name␤   postfix␤        postfix_prefix_meta_operator␤   statement modifier

[19:35] <p6eval> ..loop␤Parse failed␤FAILED 00:01 119m␤»

[19:36] <sorear> std: $::("foo")

[19:36] <p6eval> std 37a0cdd: OUTPUT«ok 00:01 119m␤»

[19:37] <masak> std: $::($::($::("foo")))

[19:37] <p6eval> std 37a0cdd: OUTPUT«ok 00:01 119m␤»

[19:38] *** birdwindupbird joined
[19:38] <pmichaud> blog post draft -- comments welcome:  http://pmichaud.com/sandbox/lists.html

[19:41] <moritz> nice one

[19:41] <sorear> TimToady: 'no strict; $x = 5; my $x; say $x' # What should this do in Perl 6?

[19:41] <pmichaud> feels a little airy, but maybe I can add more down-to-earth stuff in a future post

[19:43] <masak> pmichaud: reading that draft, I'm reminded of what I like about the Perl 6 design process: we're all building towards Perl 6, but we don't exactly know what it is yet. but "we know it when we see it" -- we know what Perl behaves like, and we often realize we have a number of expectations on Perl 6 too.

[19:43] <masak> how list laziness interacts with arrays is one example.

[19:43] <masak> it feels like it "falls out" of our expectations and our vague notions of what "Perlish" behavior is.

[19:43] *** robinsmidsrod joined
[19:44] <pmichaud> in this case it's more like "here's how we think it works, nope -- that's definitely not perlish, let's try this inste.... oops, that doesn't fit either, how about ..."

[19:44] <PerlJam> I like the paragraph with the analogy of quantum physics and chemists

[19:44] <mberends> pmichaud: a few short code examples (you're very good at those) would reduce the airiness

[19:44] <masak> once I designed a chess variant. it made me realize that I have a lot of vague notions of "Chessish" behavior that made the variant "design itself" in spots. :)

[19:45] *** ingyfoo joined
[19:45] <pmichaud> mberends: I'm trying to decide if it's better to put this up now and concrete examples later, or to have this wait for the concrete examples.  It might be a day or two before I can get the examples in, which makes me think "post now and again later" may be the better approach.

[19:45] *** Raynes joined
[19:45] *** Raynes left
[19:45] *** Raynes joined
[19:45] <tadzik> pmichaud: I'm sligthly confused by the post. It starts with "what's up in nom", and then describes what are the two branches about

[19:45] *** sunnavy left
[19:48] <pmichaud> tadzik: hmm, the post is really more about the state of Perl 6 list implementations :)

[19:49] <tadzik> oh, ok :)

[19:50] <TimToady> sorear: obviously it should say "'no strict' not allowed in strict mode"  :)

[19:50] <PerlJam> pmichaud: will S07 mention all of those listy things you talk about in this post?

[19:50] <pmichaud> PerlJam: definitely.

[19:50] <pmichaud> it pretty much has to

[19:51] <TimToady> sorear: seriously, rather than just throwing variables into the current package like P5, we should consider whether assuming an implicit 'our' makes more sense

[19:51] <pmichaud> they all relate pretty tightly --- indeed, most of them were developed in response to "hey, lists don't work"

[19:52] *** Raynes left
[19:52] *** Raynes joined
[19:53] <PerlJam> The only one I don't really have a firm handle on are LoLs.  I'd like to see a blog post about them at some point if you're taking suggestions

[19:53] <pmichaud> Yes, I think that's a blog post on its own.  :)

[19:53] *** sunnavy joined
[19:53] <pmichaud> And I can write that post as soon as I have a handle on LoLs.

[19:53] <masak> PerlJam: I think LoLs are inherently sludgy, not just for you.

[19:53] <pmichaud> Which will probably happen just about after the time I finish the first draft implementation of them :)

[19:53] <thou> pmichaud: i'm looking forward to your S07 rewrite; there's some stuff in S02 that is hard to understand without knowing the difference between LoL context, list context, list vs Array vs. Seq, etc., and I've still not seen a good description of how all those terms relate

[19:54] <pmichaud> thou: as masak++ said, some of them are still fuzzy -- they're waiting for an implementation to sort them out.  nom is likely to be that implementation that does the first batch of sorting :)

[19:54] <masak> how do LoLs and captures interact? &zip takes a LoL as an argument, doesn't it?

[19:54] <thou> yeah, it's exciting. jnthn++ pmichaud++ !

[19:54] <PerlJam> thou: it's easy ... all you have to do is hang out on #perl6 and participate in every discussion relating to lists and then pay attention to what the collective has decided does and does not work.   ;-)

[19:55] <thou> hehe

[19:55] <thou> working on it.

[19:55] <pmichaud> zip takes a capture, its signature binds the capture into a LoL

[19:55] <masak> PerlJam: I wish that weren't so true... :)

[19:55] *** cbk joined
[19:55] <masak> pmichaud: yeah, I guess that is pretty easy, actually.

[19:55] <pmichaud> well, there's still some trickiness in that we have to make sure that &infix:<;> dtrt  :-)

[19:56] <pmichaud> er,  semicolon in arglists, too

[19:56] <thou> and the relationship of get() and getarg() may be a good way to explain things, too -- dive down to that lower level with an example or two

[19:56] <masak> pmichaud: did you catch TimToady's comment about ; not being an infix?

[19:56] <pmichaud> there is no get() and getarg() in the new implement

[19:56] <thou> oh, well, nevermind then

[19:56] <thou> hehhe

[19:56] <pmichaud> masak: yes, thus my correction.  it's an argument separator

[19:56] <pmichaud> as well as a statement terminator

[19:57] <masak> pmichaud: it's only the latter, but the constant folder catches it.

[19:57] <masak> IIUC.

[19:57] <pmichaud>  token semiarglist {

[19:57] <pmichaud>         <arglist> ** ';'

[19:57] <pmichaud>         <.ws>

[19:57] <pmichaud>     }

[19:57] <pmichaud> (from STD.pm6)

[19:57] <masak> oh, ok.

[19:58] <PerlJam> The last sentence of the 5th paragraph may come back to haunt you.  "...while Perl 6 programmers can do a lot of useful chemistry without having to be aware of the gory details underneath."    I'm *so* reminded of leaky abstractions there.

[19:59] <PerlJam> As long as they can be gradually aware of the gory details thought, everything is fine.

[19:59] <PerlJam> s/ght/gh/

[19:59] <pmichaud> PerlJam: some chemists do need to know about the quantum mechanics underneath, yes.  :)

[19:59] <masak> it's hard to get a precise understanding of it without going into the gory details, probably.

[19:59] <pmichaud> I didn't say you can do all chemistry without having to be aware of the details, just that you can do a lot.

[20:00] <TimToady> y'all make it sound like chemistry isn't Compleatly Gory in its own right...

[20:00] <pmichaud> anyway, it certainly wouldn't be the first statement that comes back to haunt me.  :-)

[20:01] <pmichaud> I think one of my first mis-statements was:  "Perl 6 compiler pumpking?  Sure, why not?"  :-P

[20:01] * masak hugs pmichaud 

[20:01] <TimToady> that wasn't a statement; it was a question

[20:01] <pmichaud> see!  that's the sort of haunting I get!  :-P

[20:01] <masak> mis-question... :)

[20:01] <tadzik> it's just that no one answered

[20:02] <TimToady> well, the Spirit of Christmas Future answered by pointing at your grave..

[20:02] <masak> no-one knows the answer.

[20:02] <pmichaud> and if I understand correctly, it's really an "interrogatory statement".

[20:02] <masak> it's really an interrogatory statement?

[20:02] <masak> :P

[20:02] <PerlJam> heh

[20:03] <TimToady> it was a derogatory instatement...

[20:03] * pmichaud looks over the precipice of having any sort of discussion with TimToady++ on the meaning of words and language and decides to back away slowly.

[20:04] <TimToady> .oO(if you can't confuse 'em...er...confuse 'em...)

[20:04] <masak> lingrist -- implementor: 1 -- 0 ;)

[20:05] <pmichaud> I'm going back to writing code, where I don't have to deal with TimToady's ideas on langua.... er, wait.

[20:05] <TimToady> you can rewrite the rest of the Synopses too :)

[20:05] * PerlJam notes that TimToady is haunted as well  ;)

[20:06] <TimToady> well, a haunted house still needs Walls

[20:06] <masak> *groan*

[20:06] <mberends> with broken Windows?

[20:07] <masak> that's most houses these days...

[20:07] <PerlJam> TimToady: speaking of which!   How come http://www.wall.org/~larry/natural.html is disappeared?

[20:09] <PerlJam> in fact, many (if not all) of the wall.org/~larry/*.html documents that I think should be there are actually not.

[20:10] <PerlJam> pm.html -- gone.   perl.html --- gone.

[20:11] *** pochi joined
[20:12] <TimToady> still recovering from a headcrash several months ago, and using it as an excuse not to carry over stuff that isn't neede anymore

[20:12] <TimToady> but haven't copied over everything that I do want to carry over yet

[20:13] <PerlJam> bummer

[20:13] <TimToady> but natural is there now

[20:15] <PerlJam> makes it easier to spread the good word if it's there for people to read  :)

[20:16] <Su-Shee> PerlJam: let me guess: you never throw away stuff and everyone can see for how long by looking into your garage/cellar/etc? :)

[20:17] <PerlJam> Su-Shee: I have been conditioned to occasinally throw stuff away.  I recently threw away my high school physics notes even!

[20:17] <Su-Shee> .oO(I know how old he is.. ;)

[20:19] *** whiteknight joined
[20:19] <PerlJam> Su-Shee: my wife and I go good together ... she's always pressuring to throw away old stuff, I'm always pressuring to keep it ... at some point we arrive at an equilibrium where we keep stuff for as long as needed but it eventually migrates to elsewhere  (other people, junk yard, good will, whatever)

[20:21] <PerlJam> though there have been some snafus  (my fishing rods were sold in a garage sale without my knowledge and once a pair of shoes I'd only had a few weeks were given to good will)

[20:21] *** mj41 joined
[20:21] <Su-Shee> PerlJam: ah. yes. we have the same roles here. we solved the problem by mr shee has a room for him, I have one for me. guess which one has 7 monitors and 3 printers and 5 database servers and shelves of steel?

[20:27] * sorear doesn't know much about oraperl and sybperl

[20:29] *** jedai joined
[20:33] *** Woodi left
[20:38] *** bakedb left
[20:39] <masak> sorear: aren't those pre-p5 "distributions" which threatened to fracture the codebase?

[20:39] <masak> Perl 5 solved the original issue by having a module system.

[20:41] *** Sarten-X left
[20:46] *** Woodi joined
[20:46] *** diakopte1 is now known as diakopter

[20:47] <mberends> o/ diakopter

[20:47] <diakopter> o

[20:47] <phenny> diakopter: 11 Jun 20:45Z <moritz> ask diakopter any idea what's up with the appflux server? I can't seem to ssh to it, and dalek often times out

[20:47] <diakopter> wow that was awhile ago

[20:47] <moritz> \o diakopter. Ignore that, issue is long since gone

[20:48] <diakopter> I wonder how long I was diakopte1

[20:48] *** impious joined
[20:49] <diakopter> I recall helping maintain an oraperl

[20:49] <diakopter> *installation

[20:51] <diakopter> TimToady: a haunted house can have a genius or two, too

[20:52] *** Sarten-X joined
[20:52] *** birdwindupbird left
[21:02] *** colomon joined
[21:03] *** leprevost left
[21:03] *** MayDaniel left
[21:15] *** wamba left
[21:27] <masak> diakopter: ah, Maniac Mansion... :)

[21:28] <masak> good times.

[21:37] *** donri left
[21:37] *** cotto left
[21:40] *** donri joined
[21:40] *** mj41 left
[21:42] <sorear> diakopter: you remember oraperl?  how did that work?

[21:44] * sorear is interested in the history of it

[21:45] <sorear> pmichaud: I hear you want a 'rakudo-nom:' p6eval target

[21:46] <benabik> nom: say 'hi'; # I thought one got installed.

[21:46] <p6eval> nom: OUTPUT«hi␤»

[21:46] <sorear> benabik: that was supposed to be my line :(

[21:46] * benabik didn't mean to spoil it.  :-(

[21:46] *** Psyche^ joined
[21:46] *** Psyche^ is now known as Patterner

[21:47] *** MayDaniel joined
[21:48] <PerlJam> sorear: as I recall, oraperl just baked in some custom functions that talked to an oracle database. The functions were just there like the rest of perlfunc.  But that's about all I know.

[21:48] <PerlJam> I think I compiled it once to see what all of the fuss was about, but I never used it.

[21:48] <masak> http://search.cpan.org/~timb/DBD-Oracle-1.16/Oraperl.pm

[21:49] <masak> those seem to be the functions.

[21:49] <pmichaud> sorear: what I'm looking for is a way to manually prod p6eval into rebuilding rakudo-nom right away instead of waiting for the next update

[21:49] <pmichaud> the next timed update

[21:50] *** jferrero joined
[21:51] <pmichaud> I already know about "nom: " on p6eval.

[21:53] <masak> pmichaud: ...while avoiding race conditions and p6eval locking up...

[21:53] <pmichaud> if it's hard or can't be done, then I can live with the current system, yes.

[21:54] <pmichaud> I figured it was an easyish sort of thing to do.  If not, no biggie.

[21:54] <masak> maybe I'm just being overly pessimistic.

[21:54] <pmichaud> I know that I see other people restart it from time to time.

[21:55] <pmichaud> (and it seems to get the update when they do their magic)

[21:57] <PerlJam> it's too bad there isn't some sort of smart queue that you can just inject a "rebuild nom" message or even "build nom SHA1"

[21:57] <masak> blog post! http://strangelyconsistent.org/blog/june-20-2011-hangman

[21:59] <dalek> rakudo/nom: 047ab6a | pmichaud++ | src/ (3 files):

[21:59] <dalek> rakudo/nom: More nqp:: updates.  For now I've put some 'generic' nqp:: ops

[21:59] <dalek> rakudo/nom: into Perl6/Actions.pm for testing, when they stabilize they can

[21:59] <dalek> rakudo/nom: migrate to the nqp repo.

[21:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/047ab6af06

[22:00] *** tylercurtis joined
[22:02] <sorear> hmm.  might be doable

[22:02] <sorear> although you'd have to wait a bit

[22:02] <sorear> and you wouldn't know how long to wait, without login access

[22:05] <lichtkind> thou: the article is ready if you want to look at it

[22:06] * sorear is looking for good shell-accessible mutual exclusion programs

[22:11] <felher> masak++ for blog post

[22:13] <sorear> 6model: hi

[22:14] *** alester joined
[22:14] <thou> hi, lichtkind. ok, sure

[22:15] <lue> hello world! o/

[22:15] * sorear would like to at least try :)

[22:15] <sorear> hello lue!!

[22:16] *** daniel-s joined
[22:16] <masak> hi lue!

[22:17] <masak> 'night, #perl6

[22:18] *** masak left
[22:20] *** [particle]1 joined
[22:22] <diakopter> sorear: too long ago; a very distant memory

[22:22] <diakopter> I touched only one script I think

[22:23] *** PacoLinux left
[22:25] *** MayDaniel left
[22:29] *** cotto joined
[22:34] <sorear> evalbot control restart

[22:34] *** p6eval joined
[22:34] *** ChanServ sets mode: +v p6eval

[22:39] *** p6eval left
[22:40] *** p6eval joined
[22:40] *** ChanServ sets mode: +v p6eval

[22:41] <sorear> niecza: say 2 + 2 # pmichaud

[22:41] <p6eval> niecza v6-177-g365e216: OUTPUT«4␤»

[22:41] <sorear> evalbot rebuild niecza

[22:41] <p6eval> OK (started asyncronously)

[22:41] <sorear> niecza: say 2 + 2

[22:41] <p6eval> niecza v6-177-g365e216: OUTPUT«Rebuild in progress␤»

[22:41] <sorear> niecza: say 2 + 2

[22:41] <p6eval> niecza v6-177-g365e216: OUTPUT«4␤»

[22:42] <pmichaud> +1

[22:42] <pmichaud> +2

[22:42] <benabik> sorear++

[22:46] <kboga> pmichaud: is this helpful? http://pastebin.com/mNwkfhTz

[22:49] <sorear> moritz: is there anything special I have to do to push from the evalbot machine?

[23:03] *** p6eval left
[23:03] *** p6eval joined
[23:03] *** ChanServ sets mode: +v p6eval

[23:04] *** daniel-s left
[23:06] <dalek> evalbot: 5e15117 | sorear++ | / (4 files):

[23:06] <dalek> evalbot: Allow issuing restart commands, and do a bit of mutual exclusion locking

[23:06] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/5e151174e6

[23:06] <dalek> evalbot: 20fc7c7 | sorear++ | lib/EvalbotExecuter.pm:

[23:06] <dalek> evalbot: Drop max_output_len a bit to stop Bot::BasicBot from making orphans

[23:06] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/20fc7c7201

[23:07] <pmichaud> kboga:  cool, thanks for the patch!  I'll review and apply shortly.

[23:07] <kboga> also, i think commit 047ab6af0681a427d739 removed the Num's modulo infix operator

[23:08] <pmichaud> kboga: it appears part of the patch may be missing at the end?

[23:08] <kboga> hmm, let me see

[23:10] <kboga> resubmission: http://pastebin.com/SavXvfVU

[23:13] <TimToady> sorear: if you happen to notice in passing where the (timeout) overwrites the output...

[23:15] <sorear> TimToady: I'm fixing that now

[23:16] <sorear> mildew: say 2 + 2

[23:16] <p6eval> mildew: OUTPUT«sh: /home/mildew/perl5/perlbrew/bin/perl: not found␤»

[23:16] <sorear> is mildew likely to ever work again or should I just axe it now?

[23:17] <pmichaud> reviewing...

[23:17] *** whiteknight left
[23:19] *** gfldex joined
[23:20] <pmichaud> compiling

[23:21] *** p6eval left
[23:21] *** p6eval joined
[23:21] *** ChanServ sets mode: +v p6eval

[23:23] *** cdarroch left
[23:23] <TimToady> sorear: I'd say ax it

[23:24] <pmichaud> kboga: applied, thanks!  kboga++

[23:25] <kboga> pmichaud: np, thanks for reviewing

[23:25] <pmichaud> afk, fetching dinner

[23:27] <dalek> rakudo/nom: 4272fe4 | pmichaud++ | src/core/ (13 files):

[23:27] <dalek> rakudo/nom: Patches to convert many pir:: ops into nqp:: ops.  Patch courtesy kboga++ via IRC.

[23:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4272fe4bdd

[23:30] <sorear> hehe... 

[23:30] <sorear> rakudo: say "hi"; 1 while 1

[23:30] <p6eval> rakudo 7175e5: OUTPUT«hi␤(timeout)»

[23:30] <sorear> fixed? well...

[23:31] <sorear> rakudo: say "$_ " for 1..*

[23:31] <p6eval> rakudo 7175e5: OUTPUT«1 ␤2 ␤3 ␤4 ␤5 ␤6 ␤7 ␤8 ␤9 ␤10 ␤11 ␤12 ␤13 ␤14 ␤15 ␤16 ␤17 ␤18 ␤19 ␤20 ␤21 ␤22 ␤23 ␤24 ␤25 ␤26 ␤27 ␤28 ␤29 ␤30 ␤31 ␤32 ␤33 ␤34 ␤35 ␤36 ␤37 ␤38 ␤39 ␤40 ␤41 ␤42 ␤43 ␤44 ␤45 ␤46 ␤47 ␤48 ␤49 ␤50 ␤51 ␤52 ␤53 ␤54 ␤55 ␤56 ␤57 ␤58 ␤59 ␤60 ␤61 ␤62 ␤63 ␤64 ␤65 ␤66 ␤67 ␤68 ␤69 ␤

[23:31] <sorear> I don't think cutting off (timeout) is the most useful behavior.

[23:32] *** tokuhirom joined
[23:36] *** whiteknight joined
[23:36] <lichtkind> thou: got it?

[23:37] <thou> looking...

[23:37] <lichtkind> thanks :)

[23:39] <kboga> oh typo in 047ab6af0681a427d739: pow_n        => 'mod__Nnn', (patch coming up)

[23:39] <TimToady> sorear: nevertheless, it's more useful than overwriting the front

[23:40] *** p6eval left
[23:40] <TimToady> esp when you already know it's gotta be infinite

[23:40] *** p6eval joined
[23:40] *** ChanServ sets mode: +v p6eval

[23:41] <TimToady> maybe s/OUTPUT/TIMEOUT/ in that case

[23:41] <TimToady> TIMEOUTPUT«1 ␤2 ␤3 ␤4 ␤5 ␤6 ␤     :)

[23:43] *** p6eval left
[23:43] *** p6eval joined
[23:43] *** ChanServ sets mode: +v p6eval

[23:43] <kboga> small patch to fix some typo and the missing % operator: http://pastebin.com/Gd1kynKh

[23:43] <sorear> rakudo: "$_ ".say for 1..*

[23:43] <p6eval> rakudo 7175e5: OUTPUT«(timeout)1 ␤2 ␤3 ␤4 ␤5 ␤6 ␤7 ␤8 ␤9 ␤10 ␤11 ␤12 ␤13 ␤14 ␤15 ␤16 ␤17 ␤18 ␤19 ␤20 ␤21 ␤22 ␤23 ␤24 ␤25 ␤26 ␤27 ␤28 ␤29 ␤30 ␤31 ␤32 ␤33 ␤34 ␤35 ␤36 ␤37 ␤38 ␤39 ␤40 ␤41 ␤42 ␤43 ␤44 ␤45 ␤46 ␤47 ␤48 ␤49 ␤50 ␤51 ␤52 ␤53 ␤54 ␤55 ␤56 ␤57 ␤58 ␤59 ␤60 ␤61 ␤62 ␤63 ␤64 ␤65 ␤66 ␤67 ␤68 

[23:43] <sorear> rakudo: my $x; $x := $x; $x = 5

[23:43] <p6eval> rakudo 7175e5: OUTPUT«Segmentation fault␤»

[23:44] <sorear> wtf

[23:44] <sorear> I just added code to print "(signal " . ($? & 127) . "?"

[23:45] <sorear> oh, hmm, I didn't actually have the & there

[23:45] <sorear> maybe $? is a dualvar

[23:45] <TimToady> I believe it is

[23:46] <TimToady> or maybe not

[23:46] <TimToady> $! is

[23:47] <sorear> well I won't complain. :)

[23:47] <TimToady> it would be OT :)

[23:47] <lichtkind> what is a dualvar?

[23:48] <TimToady> a p5 var with both a string and numeric value

[23:48] <dalek> evalbot: 94a9b38 | sorear++ | / (2 files):

[23:48] <dalek> evalbot: Fix (timeout) overwriting, generate errors for signal-exit

[23:48] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/94a9b383b1

[23:48] *** icwiener left
[23:48] <lichtkind> TimToady: and both are different?

[23:48] *** mberends left
[23:49] <TimToady> they're not autmatically derivable from the other value

[23:49] <lichtkind> i never noticed that, thank you

[23:50] <TimToady> any scalar can have both a numeric and string value, but that's just caching a coercion

[23:51] <TimToady> you can set $! to an errno, and it will give you back a string with the error message (in P5)

[23:51] <sorear> buubot_backup: eval: (kill 9, 1), [ 0 + $!, "" . $! ]

[23:51] <buubot_backup> sorear: [1,"Operation not permitted"]

[23:51] <spetrea> I shaved my head http://i.imgur.com/MIqkW.jpg

[23:51] *** tokuhir__ joined
[23:52] <sorear> buubot_backup: eval: (unlink "/tmp/pies"), [ 0 + $!, "" . $! ]

[23:52] <buubot_backup> sorear: [2,"No such file or directory"]

[23:52] <sorear> that's how it works

[23:53] <sorear> TimToady: who is responsible for PerlIO?  Should p6 try to offer something similar?

[23:54] <TimToady> um, that's what all the discussion of the S32/IO has been about

[23:54] <sorear> I think I've improved p6eval enough for today.

[23:54] <TimToady> you could put ...⌛  on the end if it times out :)

[23:54] <TimToady> .u ⌛

[23:54] <phenny> U+231B HOURGLASS (⌛)

[23:55] *** Tene joined
[23:55] <sorear> S32/IO doesn't seem to have any STREAMSish features

[23:55] <sorear> at most it handles encodings

[23:56] *** tokuhirom left
[23:59] <TimToady> there are other possible ways to model that in p6, I suppose, anywhere from a fancy "encoding" to a variant on feed operators

