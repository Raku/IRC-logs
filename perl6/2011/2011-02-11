[00:01] *** alester left
[00:02] *** rgrau left
[00:02] *** cotto_work joined
[00:03] *** cotto_work left
[00:13] *** mikehh left
[00:22] *** jevin left
[00:24] *** icwiener left
[00:37] *** [Coke] left
[00:49] <masak> good night, #perl6.

[00:49] *** masak left
[00:54] *** mikehh joined
[00:56] <sorear> good * #perl6

[00:56] <sorear> weekend \o/

[00:56] <sorear> NIECZA TIME

[00:57] <sorear> TimToady: "map" is lazyish too but supports loop control

[00:57] <sorear> TimToady: I should clarify - I'm planning to use a factoring where map, Z, and X call the same code

[00:58] <sorear> wanted: .u with UniHan/EDICT support

[01:09] *** plobsing joined
[01:14] <TimToady> let's just say that normal operators that you'd apply metas to shouldn't be in the business of doing "next"

[01:14] <TimToady> we can just call it "undefined"

[01:48] *** felliott left
[01:48] *** nadim left
[01:51] *** envi joined
[02:01] *** noganex_ joined
[02:04] *** noganex left
[02:06] *** cafesofie left
[02:22] *** cdarroch left
[02:23] *** stkowski left
[02:25] *** stkowski joined
[02:25] *** stkowski left
[02:26] *** [Coke] joined
[02:27] *** mtk left
[02:36] *** whiteknight left
[02:36] *** mtk joined
[02:42] *** envi left
[02:53] *** envi joined
[02:55] *** eternaleye left
[02:56] *** jevin joined
[02:59] *** dukeleto left
[02:59] *** dukeleto joined
[03:12] *** agentzh joined
[03:22] *** mtve left
[03:30] *** mikehh left
[03:30] *** Trashlord left
[03:30] *** spq left
[03:30] *** brill left
[03:30] *** shachaf left
[03:30] *** pochi left
[03:30] *** kaydsoft left
[03:30] *** domidumont left
[03:30] *** cotto left
[03:30] *** hillu left
[03:30] *** jmmills left
[03:36] *** felliott joined
[03:42] *** benabik joined
[03:45] *** [particle]1 joined
[03:46] *** [particle] left
[03:48] *** [particle]1 is now known as [particle]

[03:50] *** felliott_ joined
[03:50] *** felliott left
[03:50] *** felliott_ is now known as felliott

[04:01] *** mikehh joined
[04:01] *** Trashlord joined
[04:01] *** spq joined
[04:01] *** brill joined
[04:01] *** shachaf joined
[04:01] *** pochi joined
[04:01] *** kaydsoft joined
[04:01] *** domidumont joined
[04:01] *** cotto joined
[04:01] *** kcwu joined
[04:01] *** TiMBuS joined
[04:01] *** pjcj joined
[04:01] *** nothingmuch joined
[04:01] *** bartolin joined
[04:01] *** hillu joined
[04:01] *** jmmills joined
[04:01] *** eternaleye joined
[04:02] *** eternaleye left
[04:02] *** eternaleye joined
[04:11] *** satyavvd joined
[04:14] *** hercynium joined
[04:14] <sorear> so quiet

[04:15] <benabik> chirp, chirp

[04:19] <sorear> TimToady: ping

[04:26] *** Su-Shee left
[04:28] *** Su-Shee joined
[04:43] *** charsbr__ left
[04:43] *** charsbr__ joined
[04:52] *** risou joined
[04:54] * TimToady is icing a carpal tunnel and can only type left handed

[04:54] <sorear> ow :/

[04:55] <sorear> I was just curious what your goals were in rebooting STD

[04:55] <TimToady> just see if it worked with new cclass stuff

[04:59] *** meswami joined
[05:03] *** meswami left
[05:09] <sorear> TimToady: there seem to be issues with assignment and metachar:var

[05:11] <sorear> TimToady: I'm snaptesting a fix now

[05:12] <sorear> TimToady, what was the last snaptest result?

[05:13] <TimToady> b4 reboot 93% good

[05:13] <TimToady> same as before

[05:17] <TimToady> 724/778

[05:24] *** lue left
[05:31] *** felliott left
[05:33] *** molaf joined
[05:35] *** dukeleto left
[05:35] *** qiyong joined
[05:35] <qiyong> perl6 doesn't support switch?

[05:35] *** dukeleto joined
[05:35] <TimToady> called given/when

[05:41] *** kaare_ joined
[05:44] *** hercynium left
[05:48] *** risou_ joined
[05:48] <TimToady> http://rosettacode.org/wiki/Execute_Brain****/Perl_6 is an example

[05:48] *** kaydsoft left
[05:49] *** risou left
[05:50] <sorear> it should be pointed out that all current implementations are O(number of cases)

[05:51] <sorear> given/when is designed to support jumptables but I don't think anyone does it

[05:51] <sorear> certainly not niecza or rakudo

[05:52] <TimToady> not Perl 5 either

[05:52] <TimToady> oddly Perl 5 did, and without even having a switch statement :)

[05:52] <TimToady> s/5/4

[05:53] <sorear> How were Perl 4 jumptables written?

[05:53] <TimToady> two opcodes jumped on an int or on an initial char

[05:53] <sorear> I mean in source code

[05:53] <TimToady> any conditional cascades worked

[05:54] <sorear> also note: both Perl 5 and Niecza use an O(n) algorithm for goto

[05:54] <sorear> TimToady: why was that removed in the rewrite?  did it turn out irrelevant?

[05:54] <TimToady> the innards were completely different, and no one ever got around to reproducing the logic

[05:57] <TimToady> in a sense it was much easier in Perl 4 because the interpreter just interpreted the tree

[05:58] <TimToady> in p5 we had an op_next to consider, so the structure was not so evident in some ways

[06:04] *** benabik left
[06:16] *** kaydsoft joined
[06:16] *** dju joined
[06:18] *** dju left
[06:18] *** dju joined
[06:18] *** dju left
[06:18] *** dju joined
[06:23] *** mayuresh joined
[06:25] *** dju left
[06:25] *** dju_ joined
[06:27] *** dju_ left
[06:27] *** dju_ joined
[06:27] *** dju_ left
[06:27] *** dju_ joined
[06:28] *** Aankhen`` joined
[06:29] *** Aankhen`` left
[06:32] *** cjk101011 left
[06:33] *** cjk101010 joined
[06:35] *** mayuresh left
[06:37] <moritz_> good morning

[06:39] <TimToady> still a very dark morning here :)

[06:39] <TimToady> and only in the other half of the country

[06:39] <sorear> 727/781

[06:40] <dalek> std: 6e4a586 | sorear++ | / (4 files):

[06:40] <dalek> std: Reboot and fix viv

[06:40] <dalek> std: review: https://github.com/perl6/std/commit/6e4a586d12

[06:40] <TimToady> looks like I need to pull more tests :)

[06:42] *** nadim joined
[06:43] <jdhore> tomaw, Out of curiousity, what side of the country are you on, if you don't mind my asking, good sir?

[06:43] <TimToady> the half where it's not morning yet

[06:44] <jdhore> ah

[06:44] <TimToady> the quarter where it still won't be morning in an hour

[06:45] <jdhore> The West Coast. Just as i suspected...Excellent *taps fingers together*

[06:45] * jdhore calls the hounds

[06:45] <jdhore> :P

[06:45] <TimToady> course, there's bits that won't have morning for two or three hourse yet...

[06:45] <TimToady> *hours

[06:46] <jdhore> Yep. Like Palin-land and Hawaii :P

[06:47] * sorear -> sleep

[06:47] <TimToady> n*

[06:48] <jdhore> g'night

[06:54] *** brill left
[06:57] *** s1n left
[06:58] *** s1n joined
[07:00] *** wtw joined
[07:02] *** jaldhar_ joined
[07:03] *** necrodearia left
[07:06] *** _jaldhar left
[07:06] *** necrodearia joined
[07:30] *** cjk101011 joined
[07:32] *** Mowah joined
[07:32] *** slavik2 joined
[07:33] *** slavik1 left
[07:47] *** dukeleto left
[07:48] *** dukeleto joined
[07:55] *** noganex joined
[07:58] *** noganex_ left
[07:59] *** noganex left
[08:00] *** cosimo left
[08:00] *** noganex joined
[08:02] *** kanishka joined
[08:11] *** dju_ is now known as dju

[08:29] <jnthn> morning, #perl6

[08:30] <moritz_> \o jnthn 

[08:31] <jnthn> o/

[08:31] * jnthn is in Stockholm today :)

[08:31] *** dukeleto left
[08:32] <jnthn> Snow storm. Can haz.

[08:32] <moritz_> teaching again?

[08:32] <jnthn> No, "just" speaking this time at an event. :)

[08:32] *** dukeleto joined
[08:33] <jnthn> In theory, heading home this evening. In practice, the airports are...chaotic...thanks to the snow.

[08:35] <moritz_> I thought the Scandinavians had learned to cope with that? :-)

[08:35] <jnthn> I suspect they're pretty good at recovering from it or coping with normal amounts.

[08:36] <jnthn> This is, apparently, less normal.

[08:38] *** kjeldahl joined
[08:41] <sjn> jnthn: radar images show that it's getting better in stockholm :)

[08:41] <sjn> jnthn: http://www.yr.no/radar/norden.html 

[08:45] *** risou_ left
[08:48] *** wiseguyxp joined
[08:50] *** justatheory left
[08:51] *** justatheory joined
[08:54] *** kjeldahl left
[08:54] <jnthn> sjn: Ah, that's kinda reassuring. :)

[08:55] *** justatheory left
[09:01] *** wiseguyxp left
[09:04] *** solarion left
[09:05] *** solarion joined
[09:18] *** redicaps joined
[09:21] *** redicaps left
[09:30] *** awoodland joined
[09:38] *** dakkar joined
[09:39] *** kanishka left
[09:50] *** mayuresh joined
[09:51] *** mayuresh left
[09:52] *** cjk101011 left
[09:53] *** cjk101011 joined
[10:01] *** cotto left
[10:10] *** kanishka joined
[10:15] *** mtk left
[10:21] *** kanishka left
[10:23] *** daxim joined
[10:24] *** mtk joined
[10:25] *** mayuresh joined
[10:27] *** mayuresh left
[10:28] *** am0c joined
[10:34] *** coldhead left
[10:48] *** awoodland left
[10:49] *** drbean left
[10:56] *** arnsholt left
[10:56] *** arnsholt joined
[10:58] *** jaldhar_ left
[10:58] *** jaldhar_ joined
[11:23] *** masak joined
[11:23] <masak> good afternoon, #perl6

[11:25] <tadzik> afternoon masak

[11:25] <tadzik> masak: I passed my first year :)

[11:25] <colomon> zenog: -1 * log(1 - $u, $E) can be just -ln(1 - $u)

[11:25] <masak> tadzik: kudos. tadzik++

[11:26] <tadzik> masak: actually, not entirely. I'll be repeating Physics, but don't tell moritz ;)

[11:26] <masak> it's in the vault :P

[11:26] <colomon> rakudo: say e

[11:26] <tadzik> hm?

[11:26] <p6eval> rakudo 86bf4c: OUTPUT«2.71828182845905␤»

[11:26] <colomon> zenog: also, e is a built-in constant in p6, see above

[11:27] *** woosley joined
[11:27] <colomon> zenog: as is pi, come to think of it

[11:29] <zenog> colomon: Cool, thank you!

[11:29] <masak> sorear: I'm curious: why is the algorithm for goto O(n) in Niecza and Perl 5?

[11:29] <colomon> oh, you're on at the moment (instead of just logging) -- great!

[11:30] <colomon> afk # for about two minutes

[11:30] <zenog> rakudo: say pi

[11:30] <p6eval> rakudo 86bf4c: OUTPUT«3.14159265358979␤»

[11:30] <zenog> nice

[11:33] *** cibs left
[11:35] <colomon> back

[11:35] <jnthn> rakudo: say pie

[11:35] <p6eval> rakudo 86bf4c: OUTPUT«Could not find sub &pie␤  in main program body at line 22:/tmp/SxB1R1rqQX␤»

[11:35] <masak> jnthn! \o/

[11:35] <jnthn> masak! \o/

[11:36] <masak> jnthn: so... snow, eh? :)

[11:36] <colomon> rakudo 86bf4c: yum, yum

[11:36] <jnthn> \o/

[11:36] <jnthn> masak: Yeah!

[11:36] <jnthn> masak: Loads!

[11:36] <masak> we got it down here as well. in the form of rain. :P

[11:36] <jnthn> "Liquid snow"

[11:36] <masak> and not too much, either.

[11:37] <jnthn> heh

[11:37] <zenog> rakudo: say ln(1) 

[11:37] <p6eval> rakudo 86bf4c: OUTPUT«Could not find sub &ln␤  in main program body at line 22:/tmp/JgymcU48q5␤»

[11:37] <jnthn> There's enough here to cancel flights and stuff.

[11:37] <masak> jnthn: I hope the events are going fine.

[11:37] <jnthn> But it seems to be improving.

[11:37] <jnthn> Yeah, event is fine.

[11:37] <zenog> colomon: ln is not there, need to use log(x, e) then

[11:37] <jnthn> I'm last speaker today.

[11:39] <masak> best of luck.

[11:39] <colomon> zenog: oh!  That's an odd inconsistency.  colomon--

[11:39] <colomon> rakudo: say 1.ln

[11:39] <p6eval> rakudo 86bf4c: OUTPUT«0␤»

[11:39] <colomon> rakudo: say -4.lmn

[11:39] <colomon> rakudo: say -4.ln

[11:39] <p6eval> rakudo 86bf4c: OUTPUT«Method 'lmn' not found for invocant of class 'Int'␤  in main program body at line 22:/tmp/eWkwLmiClW␤»

[11:39] <p6eval> rakudo 86bf4c: OUTPUT«-1.38629436111989␤»

[11:40] * masak submits rakudobug

[11:40] *** cibs joined
[11:41] * colomon tries to remember if he had a reason for leaving out the sub form of ln, or if it is just an oversight.

[11:42] <colomon> rakudo: say 9.log; say 9.ln

[11:42] <p6eval> rakudo 86bf4c: OUTPUT«2.19722457733622␤2.19722457733622␤»

[11:42] <colomon> ah, log actually defaults to base e anyway.

[11:42] <colomon> I think I might have put ln in merely as an internal routine.

[11:43] <colomon> should maybe be !ln

[11:43] <masak> what does the spec say?

[11:43] <colomon> spec has log and log10, no ln

[11:44] * masak adds this to the ticket

[11:44] *** satyavvd left
[11:46] *** ab5tract joined
[11:46] <colomon> I think (looking at the code) that ln is there because it was tricky defining log($x, $base) in terms of log($x) / log($base).  Something about the interaction of multis and roles, I think. I'll have to look through the blog and see if I explained it there.

[11:47] <colomon> Might be worth re-evaluating when our new nom overlords have taken over.

[11:48] *** shi joined
[11:48] <jnthn> There are issues with multis and roles that will be fixed.

[11:49] <colomon> zenog: I'm very confused by your use of is r vs is rw and $. vs $!

[11:49] <colomon> zenog: not sure it's wrong, but it's definitely surprising / befuddling to me.  :)

[11:49] <masak> 'is r' looks wrong.

[11:49] <masak> should be 'is readonly', no?

[11:49] <jnthn> aye

[11:50] <zenog> colomon: let me see

[11:50] <zenog> masak, colomon: I guess I naively assumbed 'r' means 

[11:50] <zenog> 'readonly'

[11:51] <masak> it's the default for attributes, so you might not even need to write it.

[11:51] <colomon> readonly doesn't actually mean constant in this context, does it?

[11:51] <masak> (I haven't looked at the code.)

[11:51] <zenog> Why does Rakudo not complain about it? What is the meaning of 'r'?

[11:52] <zenog> So readonly is the default? Good to know ;-)

[11:52] <masak> colomon: for private attributes, it does. a readonly private attribute is essentially useless.

[11:52] <tadzik> oh, an lhf

[11:53] *** felliott joined
[11:53] <colomon> rakudo: class A { has $.a is rw; }; my $b = A.new; $b.a = 10;

[11:53] <zenog> masak: So private attributes you also cannot initialize?

[11:53] <p6eval> rakudo 86bf4c:  ( no output )

[11:53] <colomon> rakudo: class A { has $.a is rw; }; my $b = A.new; $b.a = 10; say $b.perl

[11:53] <p6eval> rakudo 86bf4c: OUTPUT«A.new(a => 10)␤»

[11:53] <masak> zenog: exactly. it just falls out of the design. :P

[11:53] <colomon> rakudo: class A { has $.a is r; }; my $b = A.new; $b.a = 10; say $b.perl

[11:53] <p6eval> rakudo 86bf4c: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/3s6sI4DQhq␤»

[11:53] <zenog> OK

[11:53] <colomon> rakudo: class A { has $.a; }; my $b = A.new; $b.a = 10; say $b.perl

[11:53] <p6eval> rakudo 86bf4c: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/8MCrgWBrbV␤»

[11:54] <colomon> zenog: readonly doesn't mean it's constant; it means there is no write accessor constructed for the attribute.

[11:55] <colomon> rakudo: class A { has $.a; method set-a() { $!a = 10; }; }; my $b = A.new; $b.set-a; say $b.perl

[11:55] <p6eval> rakudo 86bf4c: OUTPUT«A.new(a => 10)␤»

[11:55] <masak> colomon: only for public attributes.

[11:56] <zenog> colomon: Is there a way of accessing attributes bypassing accessors, i.e. are objects still some kind of blessed hash?

[11:56] <masak> that's the thing 'is readonly' affects the attribute if it's declared private, and the accessor if the attribute is declared public.

[11:56] <colomon> rakudo: class A { has $!a is readonly = 10;  }; my $b = A.new; say $b.perl

[11:56] <p6eval> rakudo 86bf4c: OUTPUT«A.new(a => 10)␤»

[11:56] <masak> zenog: not without using the metaclass.

[11:57] <colomon> so if it's a private attribute and is readonly, it's effectively constant?  That's handy, I guess.

[11:57] <masak> zenog: (so it's still possible, but it's considered bad form)

[11:57] <masak> colomon: no, it's not handy. it can't even be assigned to once.

[11:57] <jnthn> Actually the meta-class isn't really what knows how to access attributes.

[11:57] <jnthn> The meta-class only know what attributes an object has.

[11:58] <masak> right, but you can get at Attribute objects through the meta-class.

[11:58] <colomon> masak: I certainly just did it back there.  Is it a rakudobug?

[11:59] <masak> colomon: I'm only now seeing it.

[11:59] <tadzik> > perl6 -e 'say ln(1)'

[11:59] <tadzik> 0

[11:59] <masak> colomon: it goes against what I've understoon about 'is readonly', but I'm glad to see it works.

[11:59] <jnthn> masak: Yeah but I'm not convinced they help either.

[11:59] <jnthn> masak: They only give information to the REPR about the attribute.

[12:00] <masak> tadzik: note that the bug changed since I opened it.

[12:00] *** qiyong left
[12:00] <masak> tadzik: I forgot to cc p6c about the change.

[12:00] <jnthn> I know we ended up with get_value and set_value or something on the attribute meta-object. I'm not particularly intending to keep that.

[12:00] <masak> jnthn: oh?

[12:00] <jnthn> I didn't think it was right in the first place.

[12:01] <jnthn> And Damian had plenty of issues with it.

[12:01] <masak> I thought the hard-fought consensus was that they were OK.

[12:01] <tadzik> hmm, right

[12:01] <masak> Damian didn't object to my eloquent rebuttal. :)

[12:01] <jnthn> If there's a way to do it, that's one thing. I just don't know that the correct way is via the attribute meta-object.

[12:03] *** gdey joined
[12:04] *** drbean joined
[12:11] *** eternaleye left
[12:11] *** eternaleye joined
[12:17] <masak> the argument, briefly, goes: "The MOP breaks encapsulation big time *anyway*, and there are unholy ways of getting at an object's attributes *anyway*, so let's just provide a clean way to access the attributes through the MOP."

[12:19] *** gdey_ joined
[12:22] *** gdey left
[12:23] <masak> recall also that we're not doing it just for foolish consistency, but because (1) attribute initialization and (2) serialization *require* the encapsulation of attributes to be momentarily broken.

[12:24] <masak> either we provide a clean way to do that in Perl 6, or we'll be forever confined to (probably platform-dependent) escape hatches.

[12:25] <jnthn> masak: My point was that the REPR uses the MOP to arrnage an allocation strategy, so knowledge of how to look up an attribute is not "owned" by the attribute meta-object.

[12:25] <jnthn> I agree we should provide an escape hatch.

[12:26] <jnthn> I'm just not overly keen on the current factoring.

[12:26] *** obra joined
[12:28] <masak> ok.

[12:37] <dalek> niecza: b246ee3 | pmurias++ | cl-backend/backend.lisp:

[12:37] <dalek> niecza: [cl-backend] handle class Foo {...}

[12:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b246ee308a

[12:37] <dalek> niecza: 710ffd7 | pmurias++ | cl-backend/backend.lisp:

[12:37] <dalek> niecza: [cl-backends] remove empty lines

[12:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/710ffd7b0e

[12:37] <dalek> niecza: e735b87 | pmurias++ | cl-backend/backend.lisp:

[12:37] <dalek> niecza: [cl-backend] added simple arithmetic ops

[12:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e735b8712f

[12:37] <dalek> niecza: a552664 | pmurias++ | cl-backend/ (2 files):

[12:37] <dalek> niecza: [cl-backend] move stash handling into a seperate package

[12:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a552664b99

[12:39] *** wolfram_ joined
[12:39] <masak> pmurias++

[12:41] <wolfram_> masak: re http://irclog.perlgeek.de/perl6/2011-02-10#i_3276966: looks like you point to the worst copy (scanned image) of that doc. See http://www.google.com/search?q=intitle%3A%22functional+programming+with+bananas%22+filetype%3Apdf

[12:42] <wolfram_> Other PDFs are Type 3 fonts which is just acceptable quality but quite typical for not-so-recent TeX -> PDF

[12:43] <bacek> ~~

[12:43] *** solarion left
[12:43] *** solarion joined
[12:43] <bacek> JFYI, parrot switched to GenerationalGC few minutes ago.

[12:43] <masak> wolfram_: ok, great, thanks!

[12:44] <bacek> Testers are welcome. You'll need bleeding edge version of rakudo.

[12:44] <masak> wolfram_: I must say I liked the fonts, despite the less-than-perfect quality of the document.

[12:44] <masak> bacek++ bacek++ bacek++

[12:45] * masak builds the latest rakudo

[12:46] *** bluescreen joined
[12:49] *** wolfram_ left
[12:50] <jnthn> bacek++ # will check it out! :-)

[12:50] <jnthn> bacek: Will try to get nqp working on it at weekend.

[12:51] <jnthn> Unless you beat me to it ;)

[12:51] <bacek> jnthn, I checked nqp source. It will not be easiest task :)

[12:51] <jnthn> :/

[12:51] <jnthn> bacek: How so?

[12:51] <bacek> Too much low-level C memory allocations.

[12:52] <bacek> And there is no "core.pir" to test on it :)

[12:52] *** MayDaniel joined
[12:52] <masak> Parrot revision RELEASE_3_0_0-512-g78df613 required (currently RELEASE_3_0_0-238-g97b004d)

[12:52] <bacek> which exposed quite few problems

[12:52] <jnthn> Well, though nqp it bootstrapped. So it has to be able to build itself. That's a pretty big test case :)

[12:52] <masak> this is right after building/installing the latest Parrot.

[12:52] <masak> what have I missed?

[12:53] <bacek> masak, make reconfig in parrot?

[12:53] <masak> um. ok.

[12:53] <masak> never heard that one before.

[12:53] <bacek> masak, it's make realclean + Configure.pl combo

[12:53] <masak> ooh.

[12:54] <masak> right, I've lost the realclean habit since moving to a new laptop.

[12:54] <masak> bacek++

[12:54] <bacek> And don't forget --optimize in parrot. Debug build has way too many internal checks :)

[12:54] <jnthn> bacek: It's in theory "just" inserting write barriers in the correct places, though?

[12:54] <bacek> jnthn, yes :)

[12:55] <jnthn> bacek: OK. :)

[12:55] <jnthn> bacek: I can always write some object allocation stress tests too.

[12:55] <bacek> jnthn, it will definitely help

[12:56] <bacek> jnthn, afaiu you have own "vtables", correct?

[12:56] <bacek> you can put write barriers just after calling set_*

[12:57] *** obra left
[12:58] <takadonet> morning all

[12:58] <masak> takadonet: \o

[12:58] <jnthn> bacek: OK, will take a look.

[12:58] <jnthn> Will ask if I run into any issues.

[13:02] *** risou joined
[13:03] <bacek> jnthn, ok, sure. I'll take a look also. May be it's not _so_ big task.

[13:05] *** drbean left
[13:05] <jnthn> bacek: :)

[13:06] <jnthn> bacek: Shouldn't be so bad. Many of the low-level allocations never reference another PMC.

[13:06] <jnthn> Well, some of them don't anyway :)

[13:06] <bacek> jnthn, yes. But nqp crashes :)

[13:06] <jnthn> Right.

[13:06] <jnthn> I expected it'd need changes.

[13:07] <jnthn> They're worth it, to have generational GC :)

[13:08] <masak> bacek: Parrot build works, but Rakudo build fails: https://gist.github.com/822316

[13:08] <bacek> ok. Just build parrot without optimize. It will be dead slow. But help to catch GC errors early.

[13:08] <masak> this is bleedingest of both Parrot and Rakudo.

[13:08] <bacek> masak, which platform?

[13:09] <masak> Debian.

[13:09] <masak> x64

[13:09] <bacek> masak, and how much memory do you have?

[13:09] <bacek> Latest stable?

[13:09] <masak> about 1.5 GB inside this VM.

[13:09] <masak> HEAD of both Rakudo and Parrot.

[13:10] <bacek> interesting...

[13:10] <bacek> It should work.

[13:11] <masak> glad we agree on that point ;)

[13:11] <bacek> remote gdb session?

[13:12] <bacek> just to print pmc->vtable->whoami->strstart

[13:12] <bacek> from assertion

[13:12] <masak> sure, but I'll need hand-holding...

[13:13] <bacek> gdb --args usr/local/bin/parrot  src/gen/perl6.pbc --target=pir  src/gen/core.pm

[13:13] <bacek> type "r" in prompt

[13:13] <bacek> wait until it crashes

[13:13] * masak tries that

[13:14] *** felliott left
[13:14] <bacek> .oO( Are commits from perl6/nqp reported somewhere? )

[13:14] <bacek> masak, did you realclean rakudo?

[13:14] <masak> um. no :/

[13:14] * masak tries that first

[13:15] <masak> that's probably the reason, come to think of it. :/

[13:15] <bacek> masak, it can help :)

[13:17] <dalek> mu: 1329dd0 | moritz++ | misc/dalek-conf.json:

[13:17] <dalek> mu: [dalek] report commits of the new nqp to #perl6 and #parrot

[13:17] <dalek> mu: review: https://github.com/perl6/mu/commit/1329dd0d59

[13:19] <takadonet> just wrote my first python script..... man i feel dirty hehe

[13:19] *** kfo_ joined
[13:19] <masak> takadonet: nah, don't feel dirty. students of French don't feel dirty when they write Spanish.

[13:21] <takadonet> ya

[13:22] *** dsp_ joined
[13:22] *** kfo left
[13:25] <bacek> jnthn, nqp is buildable now. Few tests are failing though.

[13:25] <moritz_> two test files have been failing before

[13:25] <moritz_> module.t

[13:25] <moritz_> and... can't remember the other

[13:26] <dalek> nqp: 7387a66 | bacek++ | src/metamodel/reprs/P6opaque.c:

[13:26] <dalek> nqp: Insert write barrier after compute of allocation strategy.

[13:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7387a662f7

[13:26] <dalek> rakudo: 32b3a9d | moritz++ | build/PARROT_REVISION:

[13:26] <dalek> rakudo: bump PARROT_REVISION to generational_gc merge. We can use some testing :-)

[13:26] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/32b3a9d16b

[13:27] <masak> bacek: problem persists even after the realclean. doing the gdb thing.

[13:28] <masak> bacek: "No executable file specified."

[13:29] <masak> bacek: this was when running gdb --args usr/local/bin/parrot  src/gen/perl6.pbc --target=pir  src/gen/core.pm

[13:29] <moritz_> maybe the --args need to go after the parrot?

[13:29] <masak> I tried that too.

[13:29] <masak> got ""/home/masak/git-ours/rakudo/src/gen/perl6.pbc": not in executable format: File format not recognized"

[13:31] <moritz_> is the path to parrot correct?

[13:32] *** satyavvd joined
[13:32] <masak> no, missing / at the beginning.

[13:32] <masak> moritz_++

[13:35] <bacek> jnthn, is nqp test passed before?

[13:36] *** whiteknight joined
[13:37] <moritz_> bacek: nope, 2 or 3 test files failed

[13:37] <whiteknight> good morning, #perl6

[13:37] <moritz_> vtable.t

[13:37] <moritz_> module.t

[13:37] <moritz_> and maybe roles.t

[13:37] <bacek> moritz_, hooray! nqp is ported to gen_gc :)

[13:38] <bacek> masak, any luck? Or it's still running?

[13:39] <masak> still running.

[13:40] <masak> bacek: ok, got the same error now from within gdb.

[13:41] <bacek> "up"

[13:41] <bacek> x times to reach assert

[13:41] <masak> PARROT_ASSERT(

[13:41] <bacek> "p pmc->vtable->whoami->strstart"

[13:42] <masak> "No symbol "pmc" in current context."

[13:42] <masak> did I not go far enough?

[13:42] <whiteknight> masak: "frame"

[13:42] <masak> ok.

[13:42] <masak> is the output of that interesting to you?

[13:43] <whiteknight> yes

[13:44] <bacek> masak, first few lines

[13:44] <bacek> whiteknight, full backtrace https://gist.github.com/822316

[13:44] <masak> https://gist.github.com/822316

[13:44] <masak> also has gdb interaction now.

[13:46] <bacek> masak, "down"

[13:46] <masak> ok, back one level down.

[13:47] <bacek> "p pmc->..."

[13:48] <masak> $1 = 0x7ffff7a7398e "CallContext"

[13:48] <whiteknight> is there an actual gdb backtrace?

[13:48] <bacek> got it...

[13:48] <bacek> whiteknight, #1990

[13:49] *** risou left
[13:49] <bacek> whiteknight, may be not...

[13:53] *** agentzh left
[13:54] *** nadim left
[13:56] *** risou joined
[13:57] *** clkao joined
[14:04] <dalek> tpfwiki: (Razan Abbass)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6

[14:06] *** kaare_ left
[14:06] *** mikehh left
[14:07] <bacek> masak, can you pull parrot to bleeding edge again?

[14:08] * masak does so

[14:11] *** plobsing left
[14:28] <bacek> masak, I'm falling asleep. Create ticket on trac.parrot.org if latest commit didn't help. Or update #2005

[14:29] <masak> bacek: oki.

[14:30] <masak> so far, so good. not past the gen/core.pm step yet, but if it crashes I'll create a ticket.

[14:33] <bacek> masak, ok, night.

[14:34] <bacek> Don't forget to rebuild parrot with "Configure.pl --optimize" for any performance testing :)

[14:35] <masak> gotha :)

[14:35] <colomon> how long has --optimize been in there?

[14:39] *** rhr left
[14:45] <tadzik> since I remember

[14:45] <tadzik> but it's not that long ;)

[14:46] <masak> I think I learned about it fairly early, but ignored it since it was connected with instability.

[14:46] <masak> and I preferred stability to speed.

[14:48] <colomon> Ah, agreed on that.

[14:50] <masak> Parrot's stability has since improved a great deal, but I hadn't re-evaluated that decision.

[14:50] *** Chillance joined
[14:50] *** risou_ joined
[14:51] <masak> hm, the build proper succeeded.

[14:51] <masak> but compiling Test.pm failed.

[14:51] * masak submits parrotbug

[14:51] *** risou left
[14:52] *** ofir joined
[14:53] *** pmurias joined
[14:56] *** rhr joined
[14:58] <masak> phenny: tell bacek http://trac.parrot.org/parrot/ticket/2006

[14:58] <phenny> masak: I'll pass that on when bacek is around.

[15:04] *** benabik joined
[15:05] *** shi left
[15:14] *** whiteknight_ joined
[15:14] *** cotto joined
[15:15] *** whiteknight left
[15:15] *** whiteknight_ is now known as whiteknight

[15:15] *** lestrrat left
[15:16] *** whiteknight left
[15:16] *** slavik2 left
[15:16] *** rokoteko left
[15:17] *** benabik left
[15:17] *** hatseflats left
[15:17] *** hudnix left
[15:17] *** ggoebel left
[15:17] *** jql left
[15:17] *** silug left
[15:17] *** araujo left
[15:17] *** zostay left
[15:17] *** Maddingue left
[15:17] *** jrockway left
[15:17] *** sbp- left
[15:17] *** diakopter joined
[15:17] *** JodaZ left
[15:17] *** masak left
[15:17] *** simcop2387 left
[15:17] *** starcoder left
[15:18] *** rokoteko joined
[15:18] *** ggoebel joined
[15:18] *** hatseflats joined
[15:18] *** lestrrat joined
[15:19] *** simcop2387 joined
[15:19] *** yahooooo left
[15:19] *** jql joined
[15:19] *** yahooooo joined
[15:20] *** araujo joined
[15:20] *** Chillance left
[15:20] *** dukeleto left
[15:20] *** envi left
[15:20] *** ofir left
[15:20] *** szabgab left
[15:20] *** gbacon left
[15:20] *** bacek left
[15:20] *** zenog left
[15:20] *** hugme left
[15:20] *** pmichaud left
[15:20] *** cognominal left
[15:20] *** BinGOs left
[15:20] *** skangas left
[15:20] *** thepler left
[15:20] *** ponbiki left
[15:20] *** dsp_ left
[15:20] *** Tedd1 left
[15:20] *** rhr left
[15:20] *** necrodearia left
[15:20] *** Su-Shee left
[15:20] *** dual left
[15:20] *** y3llow left
[15:20] *** kst` left
[15:20] *** edenc left
[15:20] *** shortcircuit left
[15:20] *** sftp left
[15:20] *** uniejo left
[15:20] *** ascent_ left
[15:20] *** TimToady left
[15:20] *** nsh- left
[15:20] *** jpr5 left
[15:20] *** krakan_ left
[15:20] *** perigrin left
[15:20] *** peters_mops left
[15:20] *** revdiablo left
[15:20] *** MayDaniel left
[15:20] *** daxim left
[15:20] *** solarion left
[15:20] *** noganex left
[15:20] *** [particle] left
[15:20] *** maja left
[15:20] *** flatwhatson left
[15:20] *** tty234 left
[15:20] *** pnu left
[15:20] *** Tene left
[15:20] *** larsen left
[15:20] *** bluescreen left
[15:20] *** gdey_ left
[15:20] *** _ilbot left
[15:20] *** pyrimidine left
[15:20] *** barika left
[15:20] *** starcoder2 left
[15:20] *** cschimm1 left
[15:20] *** gabiruh left
[15:20] *** chitragupt left
[15:20] *** sorear left
[15:20] *** mathw left
[15:20] *** jnthn left
[15:20] *** Khisanth left
[15:20] *** s1n left
[15:20] *** dju left
[15:20] *** charsbr__ left
[15:20] *** [Coke] left
[15:20] *** colomon left
[15:20] *** cls_bsd left
[15:20] *** huf left
[15:20] *** LoRe left
[15:20] *** llabthgie left
[15:20] *** Grrrr left
[15:20] *** yves left
[15:20] *** Bucciarati left
[15:20] *** stepnem left
[15:20] *** frooh left
[15:20] *** cjk101010 left
[15:20] *** varna left
[15:20] *** ab5tract left
[15:20] *** Mowah left
[15:20] *** Patterner left
[15:20] *** jedai left
[15:20] *** sjohnson left
[15:20] *** ruoso left
[15:20] *** tadzik left
[15:20] *** PacoLinux left
[15:20] *** Hackbinary left
[15:20] *** ddima left
[15:20] *** patch left
[15:20] *** betterworld left
[15:20] *** mdxi left
[15:20] *** cjk101011 left
[15:20] *** kaydsoft left
[15:20] *** molaf left
[15:20] *** lopaway left
[15:20] *** Vlavv_ left
[15:20] *** literal left
[15:20] *** jonnie left
[15:20] *** robinsmidsrod left
[15:20] *** risou_ left
[15:20] *** wtw left
[15:20] *** Sarten-X left
[15:20] *** aesop left
[15:20] *** meteorjay left
[15:20] *** pothos left
[15:20] *** takadonet left
[15:20] *** Eevee left
[15:20] *** felipe left
[15:20] *** Gothmog_ left
[15:20] *** PZt left
[15:20] *** snarkyboojum left
[15:20] *** tomaw left
[15:20] *** pmurias left
[15:20] *** clkao left
[15:20] *** awwaiid left
[15:20] *** arlinius left
[15:20] *** florz left
[15:20] *** p6eval left
[15:20] *** sunnavy left
[15:20] *** Grimnir_ left
[15:22] *** diakopter left
[15:22] *** jevin left
[15:22] *** mkramer left
[15:22] *** ashleydev left
[15:22] *** xinming left
[15:22] *** Helios left
[15:22] *** c1sung left
[15:22] *** PerlJam left
[15:22] *** DarthGandalf left
[15:22] *** phenny left
[15:22] *** renormalist left
[15:22] *** nsh left
[15:22] *** sbp left
[15:22] *** moritz_ left
[15:22] *** takesako left
[15:22] *** szbalint left
[15:22] *** Trashlord left
[15:22] *** spq left
[15:22] *** shachaf left
[15:22] *** pochi left
[15:22] *** domidumont left
[15:22] *** kcwu left
[15:22] *** TiMBuS left
[15:22] *** pjcj left
[15:22] *** nothingmuch left
[15:22] *** bartolin left
[15:22] *** hillu left
[15:22] *** jmmills left
[15:22] *** cibs left
[15:22] *** rokoteko left
[15:22] *** lestrrat left
[15:22] *** cotto left
[15:22] *** eternaleye left
[15:22] *** jaldhar_ left
[15:22] *** am0c left
[15:22] *** mtk left
[15:22] *** dakkar left
[15:22] *** _sri left
[15:22] *** allbery_b left
[15:22] *** yahooooo left
[15:22] *** kfo_ left
[15:22] *** mj41 left
[15:22] *** nrr left
[15:22] *** wooden left
[15:22] *** Kovensky left
[15:22] *** kst left
[15:22] *** gfldex left
[15:22] *** flatwhatson_ left
[15:22] *** rbuels left
[15:22] *** mux left
[15:22] *** aloha left
[15:22] *** kolibrie left
[15:22] *** frodwith left
[15:22] *** meraxes left
[15:22] *** araujo left
[15:22] *** jql left
[15:22] *** simcop2387 left
[15:22] *** REPLeffect left
[15:22] *** wolverian left
[15:22] *** f00li5h left
[15:22] *** cookys left
[15:22] *** hatseflats left
[15:22] *** ggoebel left
[15:22] *** satyavvd left
[15:22] *** estrabd left
[15:22] *** frettled left
[15:27] *** ashleyde1 joined
[15:27] *** diakopte1 joined
[15:27] *** amkrankr1leuen joined
[15:27] *** avuserow_ joined
[15:27] *** c1sung_ joined
[15:27] *** xinming_ joined
[15:27] *** szbalint_ joined
[15:27] *** shabble_ joined
[15:27] *** PerlPilot joined
[15:27] *** cxreg2 joined
[15:27] *** moritz__ joined
[15:27] *** knewt2_ joined
[15:27] *** justatheory joined
[15:27] *** Sarten-X joined
[15:27] *** cookys joined
[15:27] *** szbalint joined
[15:27] *** meraxes joined
[15:27] *** takesako joined
[15:27] *** moritz_ joined
[15:27] *** sbp joined
[15:27] *** nsh joined
[15:27] *** frodwith joined
[15:27] *** renormalist joined
[15:27] *** frettled joined
[15:27] *** phenny joined
[15:27] *** kolibrie joined
[15:27] *** _sri joined
[15:27] *** DarthGandalf joined
[15:27] *** aloha joined
[15:27] *** mux joined
[15:27] *** dalek joined
[15:27] *** jjore joined
[15:27] *** hcchien joined
[15:27] *** apejens joined
[15:27] *** broquaint joined
[15:27] *** amkrankruleuen joined
[15:27] *** saaki joined
[15:27] *** avuserow joined
[15:27] *** cxreg joined
[15:27] *** knewt2 joined
[15:27] *** jdhore joined
[15:27] *** shabble joined
[15:27] *** flussence joined
[15:27] *** PerlJam joined
[15:27] *** rbuels joined
[15:27] *** allbery_b joined
[15:27] *** flatwhatson_ joined
[15:27] *** calvino.freenode.net sets mode: +vvv phenny aloha dalek

[15:27] *** f00li5h joined
[15:27] *** wolverian joined
[15:27] *** REPLeffect joined
[15:27] *** c1sung joined
[15:27] *** Helios joined
[15:27] *** xinming joined
[15:27] *** estrabd joined
[15:27] *** gfldex joined
[15:27] *** kst joined
[15:27] *** Kovensky joined
[15:27] *** wooden joined
[15:27] *** nrr joined
[15:27] *** ashleydev joined
[15:27] *** mj41 joined
[15:27] *** mkramer joined
[15:27] *** jevin joined
[15:27] *** Trashlord joined
[15:27] *** spq joined
[15:27] *** shachaf joined
[15:27] *** pochi joined
[15:27] *** domidumont joined
[15:27] *** kcwu joined
[15:27] *** TiMBuS joined
[15:27] *** pjcj joined
[15:27] *** nothingmuch joined
[15:27] *** bartolin joined
[15:27] *** hillu joined
[15:27] *** jmmills joined
[15:27] *** dakkar joined
[15:27] *** mtk joined
[15:27] *** am0c joined
[15:27] *** jaldhar_ joined
[15:27] *** cibs joined
[15:27] *** eternaleye joined
[15:27] *** kfo_ joined
[15:27] *** satyavvd joined
[15:27] *** cotto joined
[15:27] *** diakopter joined
[15:27] *** rokoteko joined
[15:27] *** ggoebel joined
[15:27] *** hatseflats joined
[15:27] *** lestrrat joined
[15:27] *** simcop2387 joined
[15:27] *** jql joined
[15:27] *** yahooooo joined
[15:27] *** araujo joined
[15:27] *** starcoder joined
[15:27] *** jrockway joined
[15:27] *** Maddingue joined
[15:27] *** zostay joined
[15:27] *** WAAGL8K joined
[15:27] *** benabik joined
[15:27] *** ribasushi joined
[15:27] *** DAA4Y6Q joined
[15:27] *** JodaZ joined
[15:27] *** hudnix joined
[15:27] *** masak` joined
[15:27] *** rhr joined
[15:27] *** pmurias joined
[15:27] *** ofir joined
[15:27] *** risou_ joined
[15:27] *** Chillance joined
[15:27] *** clkao joined
[15:27] *** dsp_ joined
[15:27] *** MayDaniel joined
[15:27] *** bluescreen joined
[15:27] *** gdey_ joined
[15:27] *** ab5tract joined
[15:27] *** daxim joined
[15:27] *** cjk101011 joined
[15:27] *** solarion joined
[15:27] *** dukeleto joined
[15:27] *** noganex joined
[15:27] *** Mowah joined
[15:27] *** necrodearia joined
[15:27] *** wtw joined
[15:27] *** s1n joined
[15:27] *** cjk101010 joined
[15:27] *** dju joined
[15:27] *** kaydsoft joined
[15:27] *** molaf joined
[15:27] *** charsbr__ joined
[15:27] *** Su-Shee joined
[15:27] *** [particle] joined
[15:27] *** envi joined
[15:27] *** [Coke] joined
[15:27] *** szabgab joined
[15:27] *** awwaiid joined
[15:27] *** dual joined
[15:27] *** colomon joined
[15:27] *** gbacon joined
[15:27] *** aesop joined
[15:27] *** Patterner joined
[15:27] *** maja joined
[15:27] *** jedai joined
[15:27] *** bacek joined
[15:27] *** lopaway joined
[15:27] *** meteorjay joined
[15:27] *** sjohnson joined
[15:27] *** pothos joined
[15:27] *** y3llow joined
[15:27] *** takadonet joined
[15:27] *** zenog joined
[15:27] *** Eevee joined
[15:27] *** kst` joined
[15:27] *** hugme joined
[15:27] *** ruoso joined
[15:27] *** Vlavv_ joined
[15:27] *** cls_bsd joined
[15:27] *** tadzik joined
[15:27] *** pmichaud joined
[15:27] *** arlinius joined
[15:27] *** felipe joined
[15:27] *** Tedd1 joined
[15:27] *** ponbiki joined
[15:27] *** thepler joined
[15:27] *** skangas joined
[15:27] *** BinGOs joined
[15:27] *** cognominal joined
[15:27] *** bbkr joined
[15:27] *** Raynes joined
[15:27] *** rblackwe joined
[15:27] *** breinbaas joined
[15:27] *** krunen_ joined
[15:27] *** Juerd joined
[15:27] *** Util joined
[15:27] *** Grimnir_ joined
[15:27] *** sunnavy joined
[15:27] *** p6eval joined
[15:27] *** florz joined
[15:27] *** edenc joined
[15:27] *** flatwhatson joined
[15:27] *** _ilbot joined
[15:27] *** Gothmog_ joined
[15:27] *** pyrimidine joined
[15:27] *** shortcircuit joined
[15:27] *** PacoLinux joined
[15:27] *** literal joined
[15:27] *** sftp joined
[15:27] *** Hackbinary joined
[15:27] *** jonnie joined
[15:27] *** calvino.freenode.net sets mode: +vv hugme p6eval

[15:27] *** tty234 joined
[15:27] *** barika joined
[15:27] *** uniejo joined
[15:27] *** pnu joined
[15:27] *** huf joined
[15:27] *** Tene joined
[15:27] *** ascent_ joined
[15:27] *** LoRe joined
[15:27] *** snarkyboojum joined
[15:27] *** starcoder2 joined
[15:27] *** llabthgie joined
[15:27] *** TimToady joined
[15:27] *** tomaw joined
[15:27] *** ddima joined
[15:27] *** Grrrr joined
[15:27] *** cschimm1 joined
[15:27] *** gabiruh joined
[15:27] *** chitragupt joined
[15:27] *** sorear joined
[15:27] *** yves joined
[15:27] *** revdiablo joined
[15:27] *** peters_mops joined
[15:27] *** perigrin joined
[15:27] *** krakan_ joined
[15:27] *** jpr5 joined
[15:27] *** nsh- joined
[15:27] *** patch joined
[15:27] *** varna joined
[15:27] *** larsen joined
[15:27] *** Khisanth joined
[15:27] *** jnthn joined
[15:27] *** mathw joined
[15:27] *** betterworld joined
[15:27] *** frooh joined
[15:27] *** stepnem joined
[15:27] *** Bucciarati joined
[15:27] *** mdxi joined
[15:27] *** robinsmidsrod joined
[15:27] *** lamstyle left
[15:27] *** HarryS left
[15:27] *** woosley left
[15:28] *** HarryS joined
[15:28] *** alester joined
[15:29] *** xinming left
[15:29] *** ashleydev left
[15:30] *** lamstyle joined
[15:30] <masak`> I think there could be a market for a really good p5->p6 regex converter.

[15:30] *** knewt2 left
[15:30] *** Helios left
[15:30] *** PerlJam left
[15:30] *** cxreg left
[15:30] *** shabble left
[15:30] *** renormalist left
[15:30] *** c1sung left
[15:30] *** moritz_ left
[15:30] *** szbalint left
[15:30] *** avuserow left
[15:30] *** amkrankruleuen left
[15:30] *** diakopter left
[15:30] *** phenny left
[15:30] *** nsh left
[15:30] *** Helios joined
[15:31] *** phenny joined
[15:31] *** nsh joined
[15:32] *** masak` is now known as masak

[15:33] <sorear> masak: linear search

[15:35] <moritz__> takadonet: perl 6 regexes interpolate strings as literals (not regexes), so there's no point in \Q...\E anymore

[15:35] <moritz__> and for writing literals, we have quotes in regexes too

[15:36] <moritz__> m/'match f*#&! things'/

[15:36] <takadonet> moritz__: Indeed just saw that in S05 . I rewrote the rx and all is well

[15:36] <takadonet> I got my test to pass now and working on the others

[15:39] *** Lorn joined
[15:40] <tadzik> I thought about writing a JSON parses using json-glib through zavolaj, but estimating the number of calls needed I doubt if it would be any faster, and if it's worth the effort

[15:40] *** molaf left
[15:41] <masak> sorear: that was my guess. Yapsi does it as well right now.

[15:41] <masak> sorear: shouldn't be difficult to improve, though.

[15:42] *** plobsing joined
[15:44] <tadzik> looks like the biggest bottleneck of JSON::Tiny is lots and lots of method calls

[15:45] <tadzik> is anyone familiar with those profiling wonders?

[15:46] *** cotto_work joined
[15:46] *** cotto_work left
[15:50] <masak> tadzik: I know pmichaud did a bit of profiling. he mentioned it on parrot-dev, and that he got surprising/seemingly impossible results.

[15:50] <flussence> gee, he's still having problems joining the channel? :/

[15:50] <tadzik> yeah, seems so

[15:51] *** felliott joined
[15:51] *** nadim joined
[15:52] <TimToady> std: not 42

[15:52] <p6eval> std 625303c: OUTPUT«ok 00:01 118m␤»

[15:53] <TimToady> sorear: that seems to fail now under ./viv -e

[15:53] <masak> std: so not 42

[15:53] <p6eval> std 625303c: OUTPUT«ok 00:01 118m␤»

[15:54] <TimToady> Whitespace required after keyword at (eval) line 1:

[15:54] <TimToady> ------> no⏏t 42

[15:54] <masak> std: no t

[15:54] <p6eval> std 625303c: OUTPUT«ok 00:01 117m␤»

[15:55] <flussence> WRT profiling, "impossible" has been the case every time I've done any serious profiling of code...

[15:58] *** PerlPilot left
[15:58] *** PerlJam joined
[15:59] *** jaldhar_ left
[15:59] *** jaldhar_ joined
[15:59] *** satyavvd left
[16:03] *** cjk101011 left
[16:04] *** wtw left
[16:05] <sorear> TimToady: I fixed that in niecza recently.  I guess the bug wasn't niecza-only...  let me try to same fix.

[16:13] <TimToady> is the <?before \w> in <ws> wrongly adding itself to the longest token?

[16:13] <dalek> std: 0ef3d73 | sorear++ | STD.pm6:

[16:13] <dalek> std: [STD] Fix keyspace LTM

[16:13] <dalek> std: review: https://github.com/perl6/std/commit/0ef3d732e8

[16:13] <sorear> <ws> should be special-cased to not generate longest tokens ever

[16:14] <sorear> there was, however, nothing to stop the <?before <-[(]>> in keyspace from adding to it

[16:14] *** Patterner left
[16:14] <TimToady> right--I didn't search for the right error message :)

[16:15] <TimToady> thanks

[16:17] *** Psyche^ joined
[16:17] *** Psyche^ is now known as Patterner

[16:17] *** kaare_ joined
[16:20] <TimToady> appears to fix all my 'nok' blowups too, not surprisingly :)

[16:20] <sorear> snaptest improved much?

[16:21] <TimToady> well, moving it over to my new server machine speeded it up to 18 minutes :)

[16:21] <TimToady> if you'd like an account for snaptesting, I can give you one...

[16:22] <sorear> is this diakopter's vps?

[16:22] <TimToady> no, a machine in my house

[16:23] <sorear> the trouble with external testing is I prefer to test, then publish...

[16:23] <TimToady> right

[16:23] <TimToady> also, the name is under dynamic IP, so disappears off the face of the earth for 10 minutes if my network glitches

[16:24] <TimToady> but if you want some heavy CPU at some point, I've got six cores on that machine

[16:26] <TimToady> it's also still a bit unstable because we're still bringing up sysadmin stuff that was on our old linux gateway machine before it started dying

[16:37] *** orafu joined
[16:38] *** MayDaniel left
[16:44] <dalek> std: 4608239 | sorear++ | / (2 files):

[16:44] <dalek> std: [viv] Add $<x> = { code } to reduce dependency on mutable cursors

[16:44] <dalek> std: review: https://github.com/perl6/std/commit/4608239d16

[16:45] *** bluescreen left
[16:50] <TimToady> for some reason my last snaptest on my new server couldn't find is_run, despite the fact that it's defined in the .syml

[16:50] <TimToady> so I only got 905

[16:50] <TimToady> 90%

[16:50] *** ofir left
[16:51] <TimToady> likely related somehow to being in Test/Util.syml

[16:57] *** felliott left
[16:59] <TimToady> the encapsulation breakers should be named something like BAD_MONKEY_SEE and BAD_MONKEY_DO :)

[17:00] <pmurias> sorear: hi

[17:00] <pmurias> sorear: i passed my lisp project

[17:01] <TimToady> \o/

[17:01] *** wiseguyxp joined
[17:01] <pmurias> sorear: do you think it makes sense to work more on the lisp backend or should i help more with the main stuff?

[17:02] *** Sarten-X left
[17:04] *** zenog left
[17:05] *** ab5tract left
[17:06] *** shi joined
[17:09] <TimToady> takadonet: I presume you discovered that /m turned into ^^ and $$ anchors instead

[17:10] <TimToady> std: /^$/m

[17:10] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of suffix regex modifiers; in Perl 6 please use prefix adverbs at /tmp/kMEfZaXdvs line 1:␤------> [32m/^$/m[33m⏏[31m<EOL>[0m␤Other potential difficulties:␤  Unsupported use of /m; in Perl 6 please use ^^ and $$ anchors at

[17:10] <p6eval> ../tmp/kMEf…

[17:11] *** felliott joined
[17:11] *** felliott_ joined
[17:11] *** felliott left
[17:11] *** felliott_ is now known as felliott

[17:12] *** Sarten-X joined
[17:15] *** avuserow_ is now known as avuserow

[17:21] *** felliott left
[17:22] *** kjeldahl joined
[17:24] *** araujo left
[17:25] *** bluescreen joined
[17:27] *** icwiener joined
[17:28] *** silug joined
[17:33] *** pmurias left
[17:34] *** aesop left
[17:34] *** aesop joined
[17:43] *** cdarroch joined
[17:43] *** cdarroch left
[17:43] *** cdarroch joined
[17:44] *** aesop left
[17:48] *** Lorn__ joined
[17:48] *** kjeldahl left
[17:50] *** wiseguyxp_ joined
[17:51] *** MayDaniel joined
[17:51] *** diakopte1 left
[17:51] *** hatseflats left
[17:51] *** ggoebel left
[17:51] *** starcoder left
[17:51] *** simcop2387 left
[17:51] *** diakopter joined
[17:51] *** ggoebel joined
[17:51] *** jql left
[17:51] *** starcoder joined
[17:51] *** hatseflats joined
[17:51] *** yahooooo left
[17:51] *** Lorn left
[17:51] *** wiseguyxp left
[17:51] *** ryan__ joined
[17:51] *** yahooooo joined
[17:52] *** simcop2387 joined
[17:53] <moritz__> rakudo: say (1161-1629)/1629*100 # rakudo speedup through parrot's gen_gc

[17:53] <p6eval> rakudo 86bf4c:  ( no output )

[17:53] <moritz__> pugs: say (1161-1629)/1629*100 # rakudo speedup through parrot's gen_gc

[17:53] <p6eval> pugs: OUTPUT«-28.7292817679558011049723756906077348066298␤»

[17:53] <moritz__> erm, minus the - :-)

[17:54] <benabik> moritz__: Measured how?  Build, spectest, other benchmark?

[17:54] <moritz__> benabik: spectest

[17:54] <moritz__> rakudo: say 1

[17:54] <p6eval> rakudo 86bf4c:  ( no output )

[17:54] <benabik> moritz__: Awesome.

[17:54] <flussence> well of course it'd be 28 times faster - it replaced everything with no-op!

[17:55] <benabik> :-D

[17:56] <TimToady> when can we haz it?

[17:57] <moritz__> I'm rebuilding now on the server

[17:57] <moritz__> TimToady: it's already merged, so "now"

[17:58] <jdhore> Does rakudo have non-blocking IO yet?

[17:59] <moritz__> no

[18:00] <jdhore> :(

[18:01] <TimToady> the forest fire simulator is quite a bit snappier now \o/

[18:01] <moritz__> any contributions in that direction would be very welcome

[18:02] *** MayDaniel left
[18:02] *** mtk left
[18:03] *** dakkar left
[18:03] *** stkowski joined
[18:06] <TimToady> my quiz editor doesn't seem much faster though, so may it's not GC-bound

[18:07] *** szbalint_ is now known as szbalint

[18:08] <TimToady> it's probably just too-many-PMC-indirections-bound

[18:10] *** aesop joined
[18:11] *** mtk joined
[18:11] *** gdey joined
[18:13] <masak> jdhore: "Is feature X in yet?" -- "No." -- ":(" is a fairly inefficient way to promote a featuer in an open-source project.

[18:14] <jdhore> masak, I was just curious.

[18:15] <flussence> async IO is easy - just implement threads and it's a one-liner

[18:15] *** gdey_ left
[18:15] <masak> other ways: "you know what would be great... here's why: ..." -- "hey, I wrote these tests!" -- "hey, I wrote this patch" -- "hey, I have this project that could really use feature X. if someone implements it, it'd be really cool!"

[18:16] <jdhore> masak, None of those apply to me and i don't like patronizing people by overstating/lying about a feature that'd be nice/cool.

[18:17] *** ymasory joined
[18:18] <masak> jdhore: I'm not saying that async IO isn't important. (I don't know enough about it to say either way.) I'm saying that the devs have a given set of priorities and that some actions make it easier than others to prioritize your priorities.

[18:18] <flussence> libaio + zavolaj might be an easy way to get it

[18:18] <flussence> (though it's very kernel-specific)

[18:19] *** ggoebel left
[18:19] <jdhore> masak, I'm not asking them to prioritize my priorities. I was just curious. It wouldn't really bother me if rakudo didn't get async IO for 10 years.

[18:20] <masak> jdhore: ok, then I misinterpreted your ":(".

[18:21] *** plainhao joined
[18:21] *** simcop2387 left
[18:21] *** takadonet left
[18:22] *** takadonet joined
[18:22] <jdhore> Yes you did.

[18:23] <takadonet> flussence: how's Text-tab-wrap fork doing?

[18:23] <TimToady> but perhaps you also misled him :)

[18:23] *** simcop2387 joined
[18:24] <flussence> takadonet: I've made the module code more perl6ish, I'll look at replacing the global variables with named params soon

[18:24] <takadonet> ok

[18:24] *** ggoebel joined
[18:25] <flussence> also, this is a lot more readable than the original IMO: https://github.com/flussence/Text-Tabs-Wrap/blob/cleanup/t/wrap.t :)

[18:27] <takadonet> i already saw that branch :) Good job. Remember I was just doing a straight port 

[18:27] <takadonet> I'm doing the same with Text::Diff right now and man it's ugly 

[18:28] <flussence> takadonet++ # porting scary code

[18:28] <moritz__> rakudo: say 1

[18:28] <p6eval> rakudo : OUTPUT«1␤»

[18:29] *** PZt joined
[18:29] *** envi left
[18:30] <takadonet> flussence++ for cleaning up my mess

[18:33] <TimToady> takadonet: you saw my note above about /m?

[18:33] <takadonet> nope

[18:35] <dukeleto> has anybody done any rakudo benchmarking on the new parrot master branch, since generational_gc was merged?

[18:35] <TimToady> http://irclog.perlgeek.de/perl6/2011-02-11#i_3280982

[18:36] <TimToady> ^^ for takadonet 

[18:36] <TimToady> dukeleto: http://irclog.perlgeek.de/perl6/2011-02-11#i_3281109

[18:38] <dukeleto> TimToady: the performance change is uneven. It seems that for the spectest, it is a win

[18:38] <TimToady> 28% faster

[18:38] <dukeleto> TimToady: but for write-heavy code, it will be slower

[18:38] <dukeleto> things seem to be faster on average, but some stuff is much slower. Is this acceptable for Rakudo ?

[18:39] <dukeleto> the branch was merged to master earlier than some would like, so I am trying to figure out if Rakudo is happy

[18:39] <dukeleto> yes, the spectest is faster, but has anyone tried some actual benchmark code?

[18:40] <TimToady> my quiz editor is still usable

[18:40] <masak> dukeleto: I'm having problems running the built Rakudo: http://trac.parrot.org/parrot/ticket/2006

[18:40] <masak> dukeleto: bacek started looking at it, and helped with a problem during the build itself.

[18:40] <TimToady> what rakudo mostly needs is to use fewer PMCs, or for parrot to provide much lighter PMCs

[18:40] <takadonet> TimToady: thx

[18:40] <dukeleto> we are seeing a >2x slowdown on Parrot's md5sum code

[18:42] <TimToady> does that use PMCs heavily, or native types?

[18:42] <flussence> spectest faster? we'll see about that :)

[18:42] <TimToady> flussence++

[18:42] * flussence goes to rebuild on slow-as-molasses server

[18:44] <dukeleto> TimToady: a mixture. It seems to use FixIntegerArrays and lots of native type variables

[18:44] <dukeleto> TimToady: so it uses PMCs for containers, but uses native types for the actual calculated quantities

[18:44] * TimToady wonders if it's doing unnecessary boxing/unboxing

[18:44] *** ymasory left
[18:46] *** cotto_work joined
[18:47] *** cotto_work left
[18:47] *** jferrero joined
[18:50] *** risou_ left
[18:52] <TimToady> obviously we should change our algorithms so they always do reads instead of writes  ;)

[18:52] <colomon> brilliant!  ;)

[18:55] *** kjeldahl joined
[18:55] *** mikehh joined
[18:57] *** cotto_work joined
[18:57] *** cotto_work left
[18:59] *** daxim left
[19:01] *** kjeldahl left
[19:03] *** cotto_work joined
[19:03] *** cotto_work left
[19:04] *** cotto_work joined
[19:04] *** hudnix left
[19:07] <dalek> tpfwiki: (Razan Abbass)++ | http://www.perlfoundation.org/perl6/index.cgi?max

[19:07] *** cotto_work left
[19:07] *** cotto_work joined
[19:07] *** hudnix joined
[19:08] <TimToady> um, that's odd

[19:09] *** cotto_work left
[19:10] *** cotto_work joined
[19:10] *** araujo joined
[19:11] *** cotto_work left
[19:11] *** cotto_work joined
[19:12] *** cotto_work left
[19:12] <[Coke]> http://blastr.com/2011/02/read-arthur-c-clarkes-rel.php - short story from Arthur C Clarke that might be of interest to this crowd.

[19:14] *** cotto_work joined
[19:14] *** cotto_work left
[19:15] *** cotto_work joined
[19:16] *** cotto_work left
[19:17] <TimToady> At least Clarke gives God some free will, which is more than we can say for lots of theologies that tell God what he must have done, and how he must have done it.  :)

[19:18] <TimToady> I include those theologies that tell God he can't exist... :)

[19:19] *** hatseflats left
[19:19] <sbp> God gives Clarke free will, Clarke gives God free will

[19:19] *** hatseflats joined
[19:20] *** cotto_work joined
[19:20] *** cotto_work left
[19:22] *** cotto_work joined
[19:22] *** cotto_work left
[19:25] *** cotto_work joined
[19:25] *** cotto_work left
[19:26] *** cotto_work joined
[19:26] *** ymasory joined
[19:33] <masak> it's interesting how even such a short story has a clear ring of that era. had it been written today, would God have been using multitouch gestures instead of all-caps verbs?

[19:33] <sbp> and fifty years before, it would have been some telephone exchange metaphor

[19:35] <sbp> sort of like Vannevar Bush's Memex paper. I know it's prophetic genius and so on, but it does make me chuckle how the various inventions are represented in such thoroughly contemporary terms

[19:36] <sbp> forseeing the styles, fashions, and quirks of the future much harder than the trends

[19:36] <sbp> someone should translate Ada Lovelace's "first program" into perl6

[19:36] <masak> ooh

[19:37] <[Coke]> ZOMG I TRIED IT AND IT ALREADY COMPILES

[19:38] <takadonet> rakudo: my $ya = "\cIa"

[19:38] <p6eval> rakudo : OUTPUT«===SORRY!===␤Method 'panic' not found for invocant of class 'Regex;Match'␤»

[19:38] <takadonet> ???

[19:38] <moritz__> internal error during error reporting

[19:38] * masak submits rakudobug

[19:39] <takadonet> nuts

[19:40] <masak> sbp: the Wikipedia page says Ada's program computed Bernoulli numbers, but it doesn't go into details. know any webpage that goes into details?

[19:40] <sbp> no, but see http://cs-www.cs.yale.edu/homes/tap/Files/ada-lovelace-notes.html for a quote

[19:40] <sbp> the program was Note G in Lovelace's appendices

[19:40] <sbp> reprinted, apparently, in Toole's work quoted there

[19:40] <masak> ok, thanks.

[19:41] *** shi left
[19:41] <sbp> I have not been able to find any more substantive reproduction on the web, of which I am somewhat surprised

[19:41] <masak> rakudo: "\cI"

[19:41] <p6eval> rakudo : OUTPUT«===SORRY!===␤Method 'panic' not found for invocant of class 'Regex;Match'␤»

[19:41] <masak> sbp: indeed.

[19:41] <takadonet> rakudo: my $ya = '\cIa'

[19:41] <p6eval> rakudo :  ( no output )

[19:42] <moritz__> nqp: "\cla"

[19:42] <p6eval> nqp: OUTPUT«Unrecognized \c character at line 1, near "la\""␤current instr.: 'parrot;HLL;Grammar;panic' pc 635 (src/cheats/hll-compiler.pir:206)␤»

[19:42] <moritz__> that's the error I'd expect

[19:43] <sbp> this is supposed to be a copy of some table associated with her Bernoulli algorithm:

[19:43] <moritz__> what's weird is that rakudo doesn't override <charspec> (the routine that throws this error)

[19:43] <sbp> http://www.computerhistory.org/babbage/adalovelace/img/5-7-2.jpg

[19:43] * masak adds that to the ticket

[19:44] <sbp> http://blog.wolfram.com/2008/04/29/today-we-broke-the-bernoulli-record-from-the-analytical-engine-to-mathematica/ is of some interest too, a modern solution to the same problem

[19:45] <sbp> masak: found it:

[19:45] <sbp> http://www.fourmilab.ch/babbage/sketch.html

[19:45] <masak> \o/

[19:45] <sbp> specifically http://www.fourmilab.ch/babbage/sketch.html#NoteG

[19:46] <sbp> I love the beginning of the second paragraph

[19:46] <sbp> "The Analytical Engine has no pretensions whatever to originate anything. It can do whatever we know how to order it to perform. It can follow analysis; but it has no power of anticipating any analytical relations or truths. Its province is to assist us in making available what we are already acquainted with."

[19:46] <sbp> what a wonderful introduction to the notion of programming in general

[19:50] <masak> when I got into cumputing in the 80's, that was a fact that I still saw stated in introductory computing books. I wonder if it needs to be as heavily emphasized nowadays. :)

[19:50] *** MayDaniel joined
[19:52] *** bluescreen left
[19:55] <masak> sbp: seems the whole algorithm is treating (8) as a recurrence relation.

[19:55] <sbp> well, I'm more impressed with the way that she understood so thoroughly the principles, at the same time as she was writing out the first program. a lot of people come to new ideas with only partial understanding

[19:56] <sbp> for example Newton and his fluxions: Bishop Berkeley famously derided him for not having solved the bit that we now solve with limits

[19:56] <sbp> but Newton did that step intuitionistically

[19:57] <sbp> or, similarly, the behaviouralisms of HTML weren't really understood very well, so SGML kept its grip in the standards side of things until HTML5 moved things on (despite the TAG's TagSoup issue)

[19:57] <dukeleto> Many of the most famous math proofs of history where technically first proved incorrectly, but then found out to be correct for other reasons.

[19:57] <dukeleto> Euler was the king of questionable algebra that turned out to be correct.

[19:57] <sbp> Fermat's famous margin wouldn't have contained the contemporary proof even if it had extended to a dozen folios, indeed

[19:57] <sbp> no, surely Ramanujan

[19:58] <sbp> people are still puzzled over where he got his insights

[19:58] <sbp> his approximations for pi, for example

[19:58] <benabik> I love how long it took for the infinitesimal method of calculus to actually be proved.

[19:58] <sbp> some of those are insane!

[19:58] <dukeleto> sbp: Ramanujan never had questionable algebra. He just wrote down the answer.

[19:58] <sbp> hehe

[19:58] <sbp> I see, that is an important distinction :-)

[19:58] <dukeleto> sbp: i've implemented some of Ramanujans pi identities in GMP. They are fascinating.

[19:58] <arnsholt> The Chuck Norris algebra! =D

[19:59] <dukeleto> Ramanujan was the Chuck Norris of Number Theory

[19:59] *** kjeldahl joined
[20:00] *** jql joined
[20:00] *** am0c left
[20:01] <masak> if you've mentioned Euler and Ramanujan, I'll have to throw in Galois, my famous young troubled mathematician.

[20:01] <masak> don't know about the quality of his proofs, but there is reputed to be a lot of "I don't have time to explain" in his notes...

[20:03] * masak backs a few Parrot/Rakudo revisions so that he can write a Bernoulli number algorithm

[20:04] *** bluescreen joined
[20:05] <arnsholt> masak: Ah that's a classic proof technique. Proof by left-as-an-exercise-for-the-reader

[20:06] <arnsholt> I've used it occasionally in my math-related exams =)

[20:06] <benabik> arnsholt: Better than Fermat's famous proof by don't-have-room-on-this-page.

[20:06] <arnsholt> =D

[20:09] <masak> Ramanujan has a number of formulas for calculating Bernoulli numbers. as usual, his formulas look totally arbitrary.

[20:11] <arnsholt> And apparently the Bernoulli numbers were first published in a book called Ars Conjectandi. "The art of guessing", a bit crudely translated =D

[20:12] <masak> I do love a good gerund.

[20:13] <masak> "Six numerical data are in this case necessary for making the requisite combinations." -- nice to see someone treat "data" as a plural. nowadays it's more of a mass noun. :)

[20:13] <arnsholt> The gerund is indeed an awesome form

[20:13] <arnsholt> Too bad it fell out of use in medieval Latin

[20:14] <masak> I never got that far. I took classical Latin, and then didn't proceed up to the newer forms.

[20:14] <arnsholt> And I'm guilty of treating data as a mass noun, actually. I tend (or at least try) to be conservative with the classical inflections in English

[20:15] <masak> aye.

[20:15] <arnsholt> Medieval Latin is primarily closer modern Romance, really

[20:15] <arnsholt> So gerunds and supines are all but gone, and the syntax is a lot simpler

[20:19] <arnsholt> (Unless it's completely broken, which is occasionally the case when the scribes really didn't know what they were doing)

[20:22] <masak> Ada Lovelace's Note G doesn't quite help explaining it to me. and for once, the Wikipedia page on Bernoulli numbers is more a hindrance than a help.

[20:22] <TimToady> data as a count noun has turned into a mere shibboleth

[20:23] <sbp> Lt. Cmdr. Data are not amused

[20:24] <masak> on the Wikipedia page, the odd-indexed Bernoulli numbers that are all 0, except for B_1. but Ada's equation has only odd-indexed Bernoulli numbers in it.

[20:24] <benabik> masak: It's a simplification to make computation faster.

[20:26] <sbp> wonder if you could get to 10**9 using the same method but with the techniques used in that recent pi computation paper

[20:26] <sbp> then again, part of that was down to the algorithm

[20:26] <masak> benabik: ok.

[20:27] <masak> I think the secret to what Ada is actually doing might be revealed if one understands her tables. but I'm not sure I have the presence of mind to do that tonight.

[20:27] <benabik> masak: Nothing makes an equation faster than removing all the parts that require doing math with things other than 0.

[20:27] <moritz__> rakudo: "\ca"

[20:27] <p6eval> rakudo : OUTPUT«===SORRY!===␤Unrecognized \c character at line 22, near "a\""␤»

[20:27] <moritz__> rakudo: "\cla"

[20:27] <p6eval> rakudo : OUTPUT«===SORRY!===␤Unrecognized \c character at line 22, near "la\""␤»

[20:27] <arnsholt> TimToady: My response to insisting on data as a plural is to ask for the plural of aquarium =)

[20:28] <moritz__> rakudo: "\cIa"

[20:28] <p6eval> rakudo : OUTPUT«===SORRY!===␤Method 'panic' not found for invocant of class 'Regex;Match'␤»

[20:28] <masak> arnsholt: "fish tanks"? :P

[20:28] <arnsholt> Cop out =p

[20:28] * sbp images fish going to war

[20:28] <sbp> *imagines

[20:28] <sbp> "Forms:  Pl. -iums, -ia." - OED

[20:29] *** mkramer left
[20:29] <arnsholt> That would be awesome. Also, I so want an unabridged OED

[20:30] <sbp> aquariums from 1869, aquaria from 1880 (Disraeli, heh)

[20:30] *** ryan__ left
[20:30] <dalek> nqp-rx: 14741af | moritz++ | src/HLL/Grammar.pm:

[20:30] <dalek> nqp-rx: change error reporting in <charspec>

[20:30] <dalek> nqp-rx: 

[20:30] <dalek> nqp-rx: This makes no difference in nqp itself, but in rakudo the old way caused a

[20:30] <dalek> nqp-rx: "Method 'paniuc' not found for invocant of class 'Regex;Match'

[20:30] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/14741af69c

[20:30] <dalek> nqp-rx: e18bf4e | moritz++ | src/stage0/ (3 files):

[20:30] <dalek> nqp-rx: update bootstrap files

[20:30] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/e18bf4e643

[20:34] <sbp> (ooh http://en.wikipedia.org/wiki/Boustrophedon_transform )

[20:34] *** jaldhar_ left
[20:35] <TimToady> and I'm *guilty* of using data as a mass noun only in the sense that I'm guilty speaking 21st century English.

[20:35] <TimToady> so please don't apologize to masak for speaking modern English.  :P

[20:35] <masak> "boustrophedon" is an awesome word. :)

[20:35] <TimToady> not if you're an ox

[20:36] <masak> not sure oxes have opinions on words...

[20:36] <TimToady> ox fords seems to, however

[20:36] <TimToady> *seem

[20:37] <masak> :P

[20:37] <[Coke]> my new favorite is octopodes.

[20:37] <TimToady> odd that they have no feet

[20:37] *** nadim left
[20:38] <sbp> octopodes - two feet

[20:40] <TimToady> unless the octopode in question is a yoke of oxen...

[20:41] <sbp> (try them as two trochees, sounds awesome)

[20:44] *** nadim joined
[20:50] <sbp> http://programmingpraxis.com/2011/02/08/the-first-computer-program/2/

[20:50] <sbp> some putative versions of Lovelace's Bernoulli program in lisp and python

[20:52] *** MayDaniel left
[20:52] <arnsholt> sbp: As an aside, the Greek quantity pattern is probably short-long-short-short =)

[20:52] <arnsholt> But, yay trochees indeed

[20:54] <sbp> bah, the Greeks wouldn't know euphony if it hit them with an... oh wait, euphony is a Greek word

[20:54] *** plobsing left
[20:54] <TimToady> I greatly prefer to use amphibrach meter...

[20:55] *** plainhao left
[20:55] <sbp> they should call the amphibrach a namphimacer

[20:56] <sbp> also, it's funny how amphibrach is an amphimacer but amphimacer doesn't even reciprocate in using the same syllabic cardinality

[20:57] <dukeleto> generational_gc just unmerged from Parrot master

[20:57] <sbp> perhaps amphimacer was the original word for an amphibrach, and modern amphimacer was called a namphimacer and then evolved to the current form through apheresis

[20:57] <dukeleto> currently lives in the gen_gc2 branch. We would love some Rakudo testing on it, since we plan to merge it after 3.1 gets cut

[20:58] * dukeleto goes back to cave

[20:58] <TimToady> well, anapest is dactyl, and dactyl is trochee, so you can see how everything ends up there...

[20:59] *** takadonet left
[20:59] <TimToady> that's why it's Teenage Mutant Ninja Turtles all the way down...

[21:07] <masak> ok, I have an algorithm that I think might be right.

[21:07] <masak> rakudo: my @B; for 1..* -> $n { say @B[2 * $n - 1] = [+] 1/2 * (2 * $n - 1)/(2 * $n + 1), map -> $k { -@B[2 * $k - 1] * ([*] map { 2 * $n - $_ }, 0 .. 2 * $k) / ([*] 2..2+2*$k); }, 1..$n-1 }

[21:07] <p6eval> rakudo : OUTPUT«(timeout)66666667␤0.133333333333333␤-0.60952380952381␤-2.57936507936508␤1.53131313131313␤89.213986013986␤582.988563288563␤-1006.4921087627␤-72644.3203851761␤-895113.241460749␤-1371996.23046368␤193955278.071697␤4847126037.86978␤49192195850.4352␤-917903851769.26␤-59060810914091␤-1.48…

[21:08] <masak> does that look like Bernoulli numbers to you? :)

[21:08] <masak> anyway, it's based on Ada's equation (8). and it looks a bit similar to the Lisp program sbp linked to.

[21:12] <masak> Ada writes "Thus there will be a cycle of a cycle of Variable-cards." I think she is referring to the map inside the $k for loop.

[21:13] <arnsholt> Certainly sounds like a nested loop

[21:13] <pmichaud> good afternoon, #perl6

[21:14] <pmichaud> I may be largely unavailable except via email for the next 5 days; Paula and I are taking an "emergency vacation"  :-)

[21:15] <pmichaud> I will be checking email and irc each evening and morning, however

[21:21] <moritz__> pmichaud: have the appropriate amount of fun and recovery/recreation

[21:22] <pmichaud> we will.  Do we have a release manager for Thursday?

[21:22] <moritz__> nope

[21:22] <moritz__> but I'll take care of that

[21:22] <pmichaud> if no-one volunteers, I will do it.

[21:22] <moritz__> (either find a volunteer, or do it myself)

[21:22] <pmichaud> wfm

[21:22] <pmichaud> and thanks

[21:23] *** gdey left
[21:23] *** gdey joined
[21:25] <sbp> masak++

[21:26] <flussence> spectest finished! half an hour faster than usual

[21:26] *** plobsing joined
[21:27] <flussence> which, considering it went up by half an hour a few days ago, is a good start...

[21:30] <moritz__> anybody wants to do the release on Thursday?

[21:30] <moritz__> it's nto hard, just follow instructions :-)

[21:30] <moritz__> the hardest part is settling for a .pm group for the code name

[21:31] *** arlinius left
[21:31] *** kaare_ left
[21:32] <masak> that's actually true.

[21:33] *** dukeleto left
[21:34] *** dukeleto joined
[21:36] *** mtk left
[21:40] <pmichaud> was any .pm group active at FOSDEM, ooc?

[21:40] <pmichaud> if so, they're a good candidate for release name, imo

[21:42] <pmichaud> also, I'd accept almost any .pm group that szabgab++ would care to honor :)

[21:50] *** MayDaniel joined
[21:53] *** awwaiid left
[21:54] *** arlinius joined
[21:55] <jdhore> I'm not szabgab++, but NYC.pm :P

[21:56] * masak becomes aware of the Java syntax 'A.new B()' for the first time

[21:56] <masak> er, a.new B(), where a is an A, and B is a nested class in A.

[21:57] <moritz__> what does it do?

[21:57] <moritz__> kinda looks like TTIAR to me

[21:58] <masak> it creates a new instance of A.B

[21:58] <masak> yeah, it looks totally weird.

[21:58] *** aindilis joined
[21:58] *** gdey_ joined
[22:00] <masak> Eclipse was complaining when I wrote it as new A.B();

[22:00] <masak> and it even knew to give a good enough hint of what I should write instead.

[22:01] <moritz__> maybe that's like closures, where the outer context has to be executed to provide the lexical context for the inner scope

[22:01] <arnsholt> Yeah, new A.B() only works if B is class A { static class B {} } IIRC

[22:02] <moritz__> so the outer class needs an instance to create the inner one

[22:02] <arnsholt> What moritz__ said. The inner object of a non-static inner class can access properties (even privates! =) of its outer object

[22:02] <masak> yes, you're both right.

[22:02] *** gdey left
[22:02] <arnsholt> You can even do A.self to get your parent

[22:03] <masak> and the class B couldn't be made static, because it used instances from the outer class A.

[22:03] *** moritz__ is now known as moritz_

[22:04] <arnsholt> Arglebargle. Prolog's exception handling is making my brain all weird

[22:04] <moritz_> you mean it isn't already all weird? :-)

[22:04] <arnsholt> Well, weird-er- =)

[22:05] <arnsholt> Prolog is kinda weird as well, which doesn't exactly help ^^

[22:06] <moritz_> masak: do you have an ETA for p4 reviews?

[22:07] <masak> moritz_: I'm hoping to start preparing a blog post tomorrow. I don't want to rush it though, so it might be a few days before I publish it.

[22:07] <moritz_> masak: ok, thanks

[22:07] <moritz_> arnsholt: do you want to do a Rakudo release for a change? :-)

[22:08] <arnsholt> I could do that, I guess

[22:08] <arnsholt> But I have to fill out the CLA, right?

[22:10] * masak doubts that's necessary

[22:11] <masak> or maybe it is, since you're making commits to the Rakudo repo...

[22:11] <moritz_> arnsholt: would be good, but for a single release i think we can manage without

[22:11] <moritz_> arnsholt: if you want to make occasional Rakudo contributions, you should consider signing one

[22:12] <arnsholt> Yeah, I've been meaning to do it, but never got around to it

[22:12] <moritz_> arnsholt: I've entered you as a release manager

[22:12] <moritz_> now I need to go to bed :-)

[22:12] <moritz_> 'night all

[22:13] <arnsholt> 'nite

[22:13] *** ryan__ joined
[22:15] <masak> 'night, moritz_.

[22:16] <dalek> rakudo: d267ba8 | moritz++ | docs/release_guide.pod:

[22:16] <dalek> rakudo: [docs] arnsholt++ volunteers for release

[22:16] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/d267ba8d35

[22:22] <sorear> good * #perl6

[22:29] *** ymasory left
[22:29] <masak> sorear! \o/

[22:32] <arnsholt> Hmm. Maybe my exception handling code wasn't just wrong, but also too complicated

[22:32] * arnsholt hopes the light at the end of the tunnel isn't a train

[22:33] <sorear> sbp: I recently got my hands on a computer architecture book from 1959.  I think the symbols used for AND and OR gates are the biggest thing that's changed in the last 50 years...

[22:34] *** pyrimidine left
[22:36] *** felliott joined
[22:36] <sorear> speaking of papers with antequated terms

[22:39] <sorear> jdhore: What exactly do you mean by "non-blocking IO"?

[22:41] <ryan__> Hello,  I'm looking for GSOC ideas and Dukeleto++ informed me that I should speak to some people in the IRC.  Does any one have any ideas?

[22:42] <jnthn> ryan__: Not off hand but I'm planning to blog some GSoC ideas that I'd be willing to mentor shortly.

[22:42] <jnthn> I'm sure others have ideas too.

[22:42] <jnthn> What are you intersted in working on?

[22:44] <ryan__> I'm interested in bioinformatics

[22:44] <sorear> jdhore: I think currently my perl6 is in the best position to add that...

[22:44] <masak> woot

[22:44] *** vmspb joined
[22:45] <masak> ryan__: hi, I'm an almost-graduated bioinformatician. :)

[22:45] <sorear> you are in good company, ryan__

[22:45] <jdhore> sorear, Which Perl 6 is yours?

[22:45] <sorear> niecza

[22:45] <jdhore> ah

[22:45] <arnsholt> Aren't there some people working on BioPerl6?

[22:46] <arnsholt> There was someone in here, but the name escapes me...

[22:47] <ryan__> I've asked about that in the #bioperl irc, but I often don't get any responses from people

[22:47] <masak> arnsholt: I think that's takadonet, but not sure either.

[22:47] <ryan__> bioperl6 would be really interesting

[22:47] * sorear knows regrettably little about this "bioinformatics" stuff

[22:47] <arnsholt> Yeah, takadonet sounds right

[22:48] <masak> sorear: it's fascinating. lots of nice data structures and big data sets.

[22:48] <arnsholt> In theory I know nothing about bioinformatics. But since I'm a computational linguistics, a lot of the same techniques turn up ^_^

[22:48] *** gdey_ left
[22:48] <masak> sorear: I learned about the wonders of suffix trees on a bioinformatics course.

[22:49] <masak> ryan__: just "bioperl6" is probably way too big a project for GSoC... :)

[22:49] <jdhore> <sorear> sbp: I recently got my hands on a computer architecture book from 1959.  I think the symbols used for AND and OR gates are the biggest thing that's changed in the last 50 years...    <--- What are these magical symbols, out of curiousity?

[22:50] <masak> ryan__: but there are a number of things related to it that probably would make good GSoC projects.

[22:51] <sorear> jdhore: I don't fully remember offhand, sorry

[22:51] <jdhore> dang

[22:51] <sorear> jdhore: it was more "this is annoying" than "this is interesting"

[22:51] <jdhore> I can imagine.

[22:51] <ryan__> masak: can you think of any off hand?  is there a webpage that would like bioperl6 sub projects?

[22:51] *** whiteknight joined
[22:51] <masak> ryan__: not to my knowledge. there might be a github page for bioperl6 somewhere.

[22:51] * masak looks

[22:51] <sbp> hmm. 'There are two sets of symbols in common use, both now defined by ANSI/IEEE Std 91-1984 and its supplement ANSI/IEEE Std 91a-1991. The "distinctive shape" set, based on traditional schematics, is used for simple drawings, and derives from MIL-STD-806 of the 1950s and 1960s.'

[22:52] <masak> ryan__: ah, here: https://github.com/cjfields/bioperl6

[22:53] <arnsholt> Bah. Beat me to it =p

[22:53] <masak> ryan__: from what I've heard, Perl 6 grammars are a great enabler for things like parsing FASTA etc.

[22:53] <arnsholt> I also have a basic Viterbi decoder module

[22:53] *** jevin left
[22:54] <arnsholt> I've talked a bit to takadonet about making it useful for bioperl6, but nothing came out of it

[22:54] <masak> ryan__: but slow runtime speed and large memory footprint also set fairly strict limits to what can be done.

[22:54] <sbp> what's the difference between the ^^ and the ?? !! operators?

[22:55] <sbp> x ?? a !! b is pretty much x(a) ^^ b, isn't it?

[22:56] <masak> I wouldn't say so.

[22:56] <sorear> My book used these: http://commons.wikimedia.org/wiki/Category:DIN_logic_gates

[22:56] <masak> sbp: in x ?? a !! b, x and either one of a or b (but not both) is evaluated.

[22:56] <masak> sbp: x(a) looks like a function call of x with a as an argument.

[22:57] <masak> sbp: and then both x, a and b are evaluated.

[22:57] <sbp> yeah, but obviously I mean by x(a) to construct a nonce function that returns a if x and false otherwise

[22:57] <masak> "obviously" :)

[22:57] <sbp> hehe

[22:58] <masak> well, b will always be evaluated if you use ^^

[22:58] <sorear> jdhore: ^^^

[22:58] <sbp> oh, hmm. what does it mean that ^^ is short-circuiting then?

[22:58] <sorear> True ^^ True ^^ die() # doesn't die

[22:58] <jdhore> ah, wow

[22:58] <masak> sbp: it means that it stops as soon as it has *enough* information.

[22:58] <sorear> as soon as two true values are seen, ^^ stops

[22:59] <sbp> ah, I see. but True ^^ die() does die

[22:59] <masak> right.

[22:59] <sbp> is there a fully short-circuiting form of xor?

[23:00] <arnsholt> You can't really short-circuit more, I think

[23:00] <masak> right.

[23:00] <sbp> what about this: a ?? a !! b

[23:00] <arnsholt> a xor b can't be decided based on a single value like or/and

[23:00] <sbp> hmm, otherwise it could be or. of course...

[23:00] <arnsholt> That's a or b

[23:00] <masak> sbp: that's called a || b

[23:01] <sbp> I just don't think ahead

[23:01] *** pmurias joined
[23:01] <pmurias> sorear: hi

[23:01] <sorear> pmurias: hi

[23:02] <arnsholt> sbp: Then I'm not alone, which is good I suppose

[23:02] <arnsholt> Or at least a consolation to me =)

[23:02] <sbp> :-)

[23:02] <pmurias> sorear: i passed my common lisp project ;)

[23:03] *** gdey joined
[23:04] <pmurias> sorear: what are niecza's long term plans?

[23:04] *** mj41_ joined
[23:06] <pmurias> sorear: i'm not sure what the role of the common lisp backend should be

[23:06] *** mj41 left
[23:07] *** mj41_ is now known as mj41

[23:07] *** Mowah left
[23:08] *** drbean joined
[23:11] *** vmspb left
[23:14] <sbp> so what about (a if x) or b? is that the same as x ?? a !! b?

[23:14] <sorear> sbp: it's spelled (x and a) or b

[23:15] <sorear> sbp: and it's not *quite* the same - consider x=1, a=0, b=1

[23:15] <sorear> sbp: but it's close enough that Python uses it

[23:15] <sorear> pmurias: I'm not totally sure about the long-term plans myself

[23:17] <sbp> oh, the ternary forces booleanity back into the condition alone

[23:18] <sbp> you could make binops that behaved that way

[23:18] <sbp> do any others do that? only treating False as false, not 0?

[23:20] *** alester left
[23:20] <sorear> uhm, x=True a=False b=True has the same issue

[23:21] <sbp> oh, silly me

[23:25] <masak> 'night, #perl6

[23:25] <sbp> so what about this:

[23:25] <sbp> (x and a or Nil) // b

[23:26] <sbp> 'night masak

[23:26] *** masak left
[23:26] <sbp> (ignore cases where a is Nil)

[23:27] <pmurias> sorear: i think it would be worthwhile to decide/think about what do you want niecza to be

[23:27] <pmurias> s/be/become

[23:27] <sbp> ugh, no, that won't work either

[23:28] <sbp> (a if x or Nil) // b seems to

[23:28] *** plobsing left
[23:29] <sbp> not sure if that needs to be ((a if x) or Nil)

[23:29] <sbp> ¿tighter(if, or)?

[23:29] <pmurias> sorear: making it usefull for something seems a decent plan (you would have to find a niche for it)

[23:31] <pmurias> sorear: possible things that come to my mind would be either making useable .NET option for Perl coders (interop/more of the commonly used features/decent speed)

[23:32] <sbp> rakudo: say "a" if 0 or 1 # easy way to find out

[23:32] <p6eval> rakudo : OUTPUT«a␤»

[23:32] <pmurias> sorear: or making it an interesting toy (implement something cool that rakudo etc. is not likely to have in the near future)

[23:33] <pmurias> sorear: the way i intended to go with mildew (before i decided it wasn't worth pushing it and smop alone) was to go the static/compile time route as much as possible

[23:35] *** plobsing joined
[23:37] <sorear> the original idea of niecza was that it would be an interesting toy, a test platform for optimizations

[23:37] <sorear> since then things have changed a bit

[23:38] <sorear> it's still a lovely test platform - I can explore things Rakudo does differently

[23:44] <sorear> niecza implements a few things Rakudo is far away from, and vice versa

[23:45] <sorear> it will serve as an "interesting toy" for people who want threads, or LTM

[23:45] <sorear> definitely I should work on getting full CLR interop working

[23:48] <sorear> a lot of people are having issues with smallish missing features, like .fmt and decimal literals

[23:49] <sorear> pmurias: how does the simple-tests stuff work?

[23:50] <sorear> TimToady: Are the "is unary" declarations in STD fossils?

[23:51] <pmurias> sorear: the clisp backend pass the simple-tests

[23:52] *** jevin joined
[23:53] <sbp> rakudo: say 1,2 X 3,4 X 5,6

[23:53] <p6eval> rakudo : OUTPUT«No applicable candidates found to dispatch to for 'infix:<X>'. Available candidates are:␤:(Any $lhs, Any $rhs)␤␤  in main program body at line 22:/tmp/h2bytGzjpz␤»

[23:53] <sbp> —

[23:53] <sbp> The operator is list associative, so

[23:53] <sbp>      1,2 X 3,4 X 5,6

[23:53] <sbp> produces

[23:53] <sbp>      (1,3,5),(1,3,6),(1,4,5),(1,4,6),(2,3,5),(2,3,6),(2,4,5),(2,4,6)

[23:53] <sbp> —

[23:53] *** MayDaniel left
[23:53] <sbp> (S03)

[23:54] <sorear> sbp: not in rakudo (known bug)

[23:54] <sbp> thanks

[23:56] *** ryan__ left
[23:59] <pmurias> prove -e 'mono run/Niecza.exe' simple-tests runs the simple tests

