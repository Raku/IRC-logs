[00:00] *** REPLeffect joined
[00:02] <dalek> nqp: 5a7f87b | jonathan++ | src/core/NQPMu.pm:

[00:02] <dalek> nqp: Default get_bool override in NQPMu.

[00:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/5a7f87b63d

[00:24] <dalek> rakudo/nom: d532131 | jnthn++ | src/Perl6/SymbolTable.pm:

[00:24] <dalek> rakudo/nom: Record trait applications.

[00:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d53213169e

[00:24] <dalek> rakudo/nom: 0d4f343 | jnthn++ | src/Perl6/ (2 files):

[00:24] <dalek> rakudo/nom: Start getting attribute initialization closures stuff in place; this just builds the closure and does the (so far unimplemented) call to add it.

[00:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0d4f3435c2

[00:24] <dalek> rakudo/nom: 5aa86b8 | jnthn++ | src/Perl6/Actions.pm:

[00:24] <dalek> rakudo/nom: Fix trait handling up a bit; resolves bug with inheritance in pre-comp.

[00:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5aa86b8048

[00:24] <dalek> rakudo/nom: e25ab89 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[00:24] <dalek> rakudo/nom: Fill Attribute bootstrap out a little more.

[00:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e25ab89eb7

[00:24] <dalek> rakudo/nom: 2f44c5c | jnthn++ | src/Perl6/Actions.pm:

[00:24] <dalek> rakudo/nom: Apply attribute traits.

[00:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2f44c5ca7f

[00:24] <dalek> rakudo/nom: 696d78b | jnthn++ | src/CORE.setting/traits.pm:

[00:24] <dalek> rakudo/nom: Couple of Attribute trait handlers.

[00:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/696d78b6c0

[00:34] *** bitpart joined
[00:51] *** bitpart left
[00:52] *** ymasory joined
[01:00] <dalek> rakudo/nom: 172cb8e | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[01:00] <dalek> rakudo/nom: Assorted bootstrap twiddles.

[01:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/172cb8e32b

[01:00] <dalek> rakudo/nom: 7efe726 | jnthn++ | src/ (4 files):

[01:00] <dalek> rakudo/nom: Various setting additions to get us passing most of 03-op-logical.t.

[01:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7efe7269ff

[01:00] <dalek> rakudo/nom: 9638dc6 | jnthn++ | NOMMAP.markdown:

[01:00] <dalek> rakudo/nom: Update nommap.

[01:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9638dc67e1

[01:02] <jnthn> enough hacking for this period of conciousness &

[01:03] *** tomaw left
[01:10] *** tomaw_ joined
[01:15] *** mberends joined
[01:52] <sorear> o/ mberends

[01:53] <mberends> hi sorear, you detected my insomnia! (3:53am here)

[02:00] *** whiteknight left
[02:09] *** envi joined
[02:10] <mberends> sorear: fyi, niecza spectest passes 1983 on Debian 6.0 and Mono 2.6.7, but does not compile S03-junctions/misc.t and S03-metaops/hyper.t

[02:16] *** Chillance left
[02:16] <mberends> S03-junctions/misc.t: Undeclared routine: 'junction' used at line 14,15,387,388,389,390. $x is declared but not used at .../misc.t line 374: ------>lives_ok { try { for any(1,2) -> ⏏$x {}; } }, Unhandled exception: Check failed

[02:16] <mberends> S03-metaops/hyper.t: Unhandled exception: System.IndexOutOfRangeException: Array index is out of range. at Niecza.RuntimeUnit.ReadXref

[02:17] <mberends> compiles, but does not run, to be precise

[02:20] *** PhatEddy left
[02:22] <mberends> mono run/Niecza.exe -c test.pl is like: Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object Server stack trace: at Niecza.CLRBackend.LexStash.GetCode, at Niecza.CLRBackend.CpsOp+<LexAccess>c__AnonStorey9.<>m__D (Niecza.CLRBackend.ClrOp[] heads)

[02:48] *** thou joined
[02:51] *** noganex_ joined
[02:51] *** noganex left
[03:02] *** Khisanth left
[03:06] *** pharvey joined
[03:06] <pharvey> is there a perl6critic?

[03:07] <mberends> not yet

[03:08] <mberends> pharvey: will you volunteer to write one? ;)

[03:10] <pharvey> maybe in 10 years I can pretend to have that much experience :P

[03:10] *** parcs joined
[03:15] *** wamba joined
[03:23] *** Su-Shee_ joined
[03:24] *** Khisanth joined
[03:32] *** ymasory left
[03:46] *** wamba left
[03:52] *** pharvey left
[04:15] <sorear> mberends: you need to update your copy of the spectests

[04:24] *** molaf joined
[04:28] <sorear> mberends: misc.t doesn't mention "junction" anymore

[04:32] <TimToady> why the *@#$& did my rakudo stop loading ICU?

[04:33] <TimToady> s/rakudo/parrot/ I suppose

[04:36] <sorear> the combinatorial explosion of figuring out the correct handling of combinations like 'our enum $!x' is driving me mad

[04:39] <TimToady> the correct handling of that one is probably "Don't be ridiculous!"  :)

[04:57] <sorear> you mean it wouldn't be intepreted as { our constant $x = enum <...> }; method !x() { $OUR::x } ?

[04:58] <sorear> hmm, I wonder if that works

[04:58] <sorear> niecza: { our constant $x = 42 }; say $OUR::x

[04:58] <p6eval> niecza v6-56-g84360d1: OUTPUT«42␤»

[04:58] <TimToady> $!x doesn't imply a !X method

[04:59] <sorear> oh right

[04:59] <sorear> so 'our $!x' and 'my $!x' and all permutations are right out?

[04:59] *** REPLeffect left
[04:59] <TimToady> it's barely okay that my $.x creates an accessor

[05:00] <TimToady> I don't see any reason for $!x to do so

[05:00] <sorear> S12:739 talks about 'our %!cache'

[05:01] <TimToady> well, if so, it only works because the symbol table lets it have that sigil as part of the name, I suppose

[05:02] <TimToady> but I don't see how it behaves differently from %cache

[05:02] <TimToady> *our %cache

[05:02] <sorear> monkey patching?

[05:02] <sorear> roles?

[05:03] <sorear> there's some confusing stuff about 'my $!x' versus 'has $!x' in role composition, I have no idea how I'm to implement the permutations of that

[05:04] <TimToady> whatever you an jnthn++ agree on is fine with me

[05:04] <TimToady> *and

[05:09] <TimToady> between lexical scoping and metaobject scoping we ought to be able to solve most problems; trying to make roles yet another scope separate from the classes their in seems a bit more than strictly necessary for most purposes

[05:09] <TimToady> *they're

[05:10] <TimToady> but my brain has been in sideways all day, which is why I'm talking out of the side of my mouth

[05:13] <sorear> ouch

[05:22] <dalek> niecza: 75df890 | sorear++ | src/ (2 files):

[05:22] <dalek> niecza: Draft parsing of subset and enum.  Does not handle enum $.x yet

[05:22] <dalek> niecza: review: https://github.com/sorear/niecza/commit/75df890d34

[05:42] <mberends> sorear: thanks, updated roast and niecza. S03-metaops/hyper.t now says: Package subs NYI at .../S03-metaops/hyper.t line 489: ------> ⏏my %a = a => 1, b => 2, c => 3; Unhandled exception: Check failed at .../CORE.setting line 469 (CORE die @ 2) at .../STD.pm6 line 1146 (STD P6.comp_unit @ 31) at .../STD.pm6 line 101 (STD STD.TOP @ 7) at .../CORE.setting line 1102 (CORE Grammar.parse @ 3) at .../NieczaFrontendSTD.pm6 line 542 (NieczaFrontendSTD Niec

[05:42] <mberends> zaFrontendSTD.parse @ 27)

[05:45] *** vkp joined
[05:45] *** vkp left
[05:54] <sorear> uh

[05:55] <sorear> mberends: how are you running the spectests?

[05:55] <mberends> sorear: using niecza's 'make spectest'

[05:56] <sorear> some part of your setup is fundamentally broken

[05:56] <sorear> line 489 is clearly marked '#?niecza skip'

[05:56] <mberends> there is a symlink from ../../roast to niecza/t/spec

[05:57] <mberends> oh, no fudging somehow. ok, will look into that. thanks.

[05:57] *** dorlamm joined
[05:58] <sorear> line endings maybe?

[05:59] <mberends> no idea yet

[05:59] <dalek> roast: 3ea5cc1 | larry++ | S02-builtin_data_types/range.t:

[05:59] <dalek> roast: add test for grep 1..3, 0..5

[05:59] <dalek> roast: review: https://github.com/perl6/roast/commit/3ea5cc1d16

[06:00] *** kaare_ joined
[06:00] *** dorlamm left
[06:04] <mberends> hmm, S03-metaops/hyper.t is about 2 days old and hyper.niecza is longer and 2 minutes newer, so fudging was done then

[06:05] *** wamba joined
[06:08] *** daniel-s left
[06:10] <mberends> git clean -fdx removed the .niecza files, a new spectest re-created then, and still the harness ran hyper.t instead of hyper.niecza

[06:11] *** c9s joined
[06:13] <mberends> correction: the harness says it's running hyper.t but the error message comes from hyper.niecza

[06:22] <mberends> run/Niecza.exe t/spec/S03-metaops/hyper.niecza passes 48 tests, ending: ok 48 - method call on list elements. Unhandled exception: System.IndexOutOfRangeException: Array index is out of range ...at Niecza.RuntimeUnit.ReadXref ...at Niecza.RuntimeUnit.LoadSubInfo ...at Niecza.RuntimeUnit.LoadAllSubs ...at MAIN_2.BOOT

[06:33] *** snearch joined
[06:39] *** kaare_ left
[06:56] *** [particle] joined
[06:57] *** thou left
[07:00] <dalek> book: 8ebeb7e | moritz++ | src/multi-dispatch.pod:

[07:00] <dalek> book: [multi] fix order of multis, pharvey++

[07:00] <dalek> book: review: https://github.com/perl6/book/commit/8ebeb7e6ae

[07:02] *** flussence_ joined
[07:09] *** Su-Shee_ is now known as Su-Shee

[07:11] *** daniel-s joined
[07:12] *** mj41 joined
[07:15] *** daniel-s left
[07:20] *** billiam joined
[07:21] *** snearch left
[07:22] *** billiam left
[07:43] *** am0c joined
[07:51] *** daniel-s joined
[07:57] *** Mowah joined
[08:07] *** uniejo_ joined
[08:07] *** uniejo_ left
[08:38] *** jfried joined
[08:42] *** hanekomu joined
[08:44] *** wamba left
[08:47] *** masak joined
[08:47] <masak> morning, #perl6.

[08:48] <tadzik> good morning masak

[08:48] <mberends> ahoy masak

[08:50] <masak> I have a feeling today'll be a productive day. :)

[08:51] * mberends likewise :)

[08:52] *** mj41 left
[08:54] *** cognominal_ left
[08:54] *** cognominal joined
[08:57] *** Trashlord joined
[09:07] *** wamba joined
[09:07] *** tomaw_ is now known as tomaw

[09:09] <mberends> masak: new zavolaj example proof of concept works, buggy but promising :) https://github.com/jnthn/zavolaj/blob/master/examples/biggishint.pl6

[09:14] <masak> rakudo: sub pfx($p) { join " ", ("{$p}$_" for <ee ie oe>) }; say pfx($_) for <f m j>

[09:14] <p6eval> rakudo 048573: OUTPUT«fee fie foe␤mee mie moe␤jee jie joe␤»

[09:14] <masak> mberends: nice!

[09:15] <masak> with not very much work at all, you could have a grammar in place there, for arbitrarily deep arithmetic expressions.

[09:16] <masak> but maybe that'd just detract from the exercise, I dunno.

[09:19] <mberends> good point, it would be a good improvement if the resulting example did not become too long.  That may be LHF for someone else with Copious Free Time :)

[09:20] <mberends> I'm going back to Zavolaj troubleshooting, the mysql client only half works :/

[09:22] <masak> here's how short such code *could* be: http://strangelyconsistent.org/blog/what-you-can-do-with-ggeoptable-that-you-couldnt-without

[09:26] *** mtk joined
[09:27] *** wamba left
[09:27] <mberends> masak: nice! I may try to apply that later, depending on how other work goes.  I'll link in the algebra script as a todo item in any case :)

[09:30] <masak> well... you may or may not want a dependency on GGE, of course. ;)

[09:31] *** [particle]1 joined
[09:33] *** [particle] left
[09:33] <mberends> masak: well, no, that would be too much dependency :)

[09:36] *** MayDaniel joined
[09:36] <masak> I'd still like to see the same thing being done with Perl 6 grammars.

[09:36] <masak> I don't doubt it's possible. it's just that I haven't seen anyone do it.

[09:37] <moritz> hm, what? parsing arithmetic expressions?

[09:38] <mberends> yes, a nice way to show of Perl 6 grammars

[09:39] <tadzik> masak: wasn't that one of pmichaud

[09:39] <tadzik> 's talks?

[09:39] <tadzik> a calculator-compiles?

[09:39] <tadzik> * compiler

[09:40] *** MayDaniel left
[09:42] <masak> sure, but then that compiler is probably written in PCT/nqp.

[09:43] <masak> I'm talking about using optable parsers from Perl 6.

[09:43] <tadzik> oh, I see

[09:44] <masak> I still maintain that you'd sometimes want to throw together a little operator-based language, and not use grammars so much, just the OPTable parser.

[09:46] *** n0den1te joined
[09:52] *** wamba joined
[09:54] *** am0c left
[09:58] <masak> I think it'll be increasingly recognized that Perl 6 is a language-processing tool, just like Perl 5 is a text-processing tool.

[09:58] <n0den1te> masak: p6cc? :)

[09:58] <masak> grammars, macros, AST processing, slangs, real DSLs -- they will all be part of the same push towards Perl 6 the language-processing tool.

[09:58] <n0den1te> or p6rules?

[09:59] <masak> there's already a Wikipedia article called "Perl 6 rules" :P

[09:59] <n0den1te> Oh, you already knew what I was referring to. :P

[10:01] *** n0den1te is now known as isBEKaml

[10:02] <masak> isBEKaml! \o/

[10:02] <tadzik> cover blown!

[10:02] <masak> class Cover { method blow {} }

[10:02] <isBEKaml> yeah, I keep forgetting I'm on different consoles. :P

[10:04] <isBEKaml> masak: I'm currently fiddling with emacs. going over the inbuilt tutorial and sorts. (still the Ctrl key bindings feel very weird to me)

[10:05] <tadzik> remap it to capslock :)

[10:05] <isBEKaml> whatever you remap it to, it's still a weird mishmash of a keybinding. :)

[10:05] *** wamba left
[10:05] * isBEKaml thinks emacs is a ctrl freak!  (ducks)

[10:07] <isBEKaml> As an example, for repeating the last action in vim, you simply press the period key (.). Emacs has it like C-x z. It doesn't help that x and z are next to each other. :|

[10:08] *** nymacro joined
[10:11] <masak> isBEKaml: anything in Emacs will feel excessively long to type after vim.

[10:11] <masak> isBEKaml: a tip about Ctrl: sacrifice Caps Lock for Ctrl. you'll thank yourself.

[10:12] <masak> generally, the tips in http://sites.google.com/site/steveyegge2/effective-emacs are worth considering.

[10:13] <isBEKaml> masak: That's true about vim and emacs. about ctrl key, I'll remap it. Every page I visited about emacs from google,  suggests remapping it that way. :)

[10:14] <isBEKaml> that's odd since I do ctrl+p all the time when visiting history from prompt keeping emacs mode on. 

[10:19] <masak> that's simply where the ctrl key should be, emacs or no emacs. ;)

[10:20] *** kjeldahl joined
[10:22] <isBEKaml> ;)

[10:23] <flussence_> .oO( I usually map that to Escape... )

[10:24] <wolverian> me too. and my readline is in vi mode.

[10:25] <flussence_> I tried that once, didn't like it. Some things are better off modeless

[10:26] <isBEKaml> yeah, vi-mode on prompt feels weird too. I found it much better to just search back in history with ctrl+r and hit enter on match. 

[10:27] * flussence_ curses ctrl+r for not using a circular buffer

[10:34] *** birdwindupbird joined
[10:43] <Juerd> Hm, sacrificing my Caps Lock for Ctrl would mean I'd sacrifice my Multi_key, because I had already sacrificed Caps Lock for that :)

[10:44] * Juerd only maps keys he doesn't use anyway, to keys he didn't have without the mapping

[10:44] <Juerd> I'd advise against relocating keys that were already present if you regularly have to use other people's computers :)

[10:44] *** kaare_ joined
[10:45] <masak> well, I admit to uselessly toggling other people's Caps Lock flag quite a bit ;)

[10:45] <Juerd> (With a huge exception for switching between sufficiently distinct entire keymaps; do learn Dvorak! :))

[10:45] <masak> :)

[10:46] <Juerd> I think it's funny that Caps Lock is typically remapped by geeks. I guess at least half of all geeks have it mapped to something else, including perhaps noop.

[10:47] <Juerd> When I still used Windows primarily, I just removed the key cap

[10:47] <Juerd> I couldn't think of a better function for the key.

[10:47] <Juerd> Now I can choose between Multi_key, ctrl and esc as very interesting options.

[10:49] <masak> even in Windows, I have it remapped as Ctrl. remapping it was one of the first things I did.

[10:51] <isBEKaml> Multi_key is compose? I have that as mod4 key here -- uses the "windows" key. :>

[11:04] <jnthn> afternoon, #perl6

[11:05] <moritz> jnthn: I thought it was still morning in your personal time zone :-)

[11:06] <Juerd> isBEKaml: I need the "Windows" key for dragging windows around :)

[11:07] <isBEKaml> Juerd: you and your complexity-filled keyboard. :P

[11:08] <Juerd> :)

[11:08] <tadzik> windows is the most used key on my keyboard, it does almost anything :)

[11:08] <Juerd> It's just Dvorak with CapsLk remapped to Multi_key

[11:08] <tadzik> Switches desktops, launches apps, moves windows...

[11:08] <Juerd> tadzik: You have that mappedto dwim?

[11:08] *** Chillance joined
[11:08] <tadzik> Juerd: no, I use KDE actually, but it's a dwm habit, yes

[11:09] <jnthn> moritz: I'm in denial about my timezone because on Tuesday I'll actually have to get up at a normalish $dayjob time :P

[11:10] <tadzik> Juerd: you meant dwm, right? dwim doesn't sound familiar in this context

[11:10] <tadzik> oh, unless you actually mean "do what I mean key" :)

[11:10] <Juerd> tadzik: Do-What-I-Mean key, indeed.

[11:10] <Juerd> "it does almost anything"

[11:10] <tadzik> close. I think every letter on a keyboard does something different with the dwim key

[11:11] <tadzik> yeah, that's a nice name for it

[11:11] <tadzik> I also used this funny key next to the right_windows key, context menu key?

[11:11] <Juerd> Menu key, in short

[11:11] <tadzik> that's a new definition of useless. I wrote a quicklaunch app and binded it to that key, shame KDE does not allow that

[11:12] <isBEKaml> yeah, the context menu key -- I never could reach it without leaving the home row. So I let it be. :)

[11:12] <Juerd> isBEKaml: Exactly :)

[11:12] <tadzik> I think that key means "help me Microsoft, my right hand is broken"

[11:12] <Juerd> It and the right ctrl key are the least used keys on my keyboard

[11:12] <tadzik> or "my thumb is twisted"

[11:13] <isBEKaml> Juerd: same keys left unused! :)

[11:13] <tadzik> also, right shift

[11:13] <Juerd> And Pause

[11:13] * Juerd uses both shift keys

[11:13] <tadzik> pause pauses some games, useful ;)

[11:13] <tadzik> I should learn that too

[11:13] <isBEKaml> pause is far off -- near the numpad and there's this turbo key next to rshift.

[11:14] <Juerd> I don't really play computer games

[11:14] <tadzik> but I barely reach Enter, I usually raise my hand to press it, so it would be the same with rshift I suppose

[11:14] <Juerd> I use mutt, irssi, firefox, inkscape and gimp, and that's about it.

[11:14] <tadzik> well, board games don't need pause

[11:14] <Juerd> Oh, libreoffice from time to time.

[11:15] <Juerd> tadzik: Do you have an international keyboard? i.e. with an extra key (\) left of enter?

[11:15] <isBEKaml> Oh, talking about libreoffice, you must have heard about oracle's latest move? 

[11:15] <Juerd> Not really

[11:15] <tadzik> heh, plugging and external monitor and keyboard to my thinkpad was a good decision. Only reaching to the trackpoint is LTA

[11:15] <tadzik> Juerd: nope, it's above enter

[11:15] <tadzik> I can't stand this other kind of layout

[11:16] <isBEKaml> Juerd: Oracle now donated open office to ASF. 

[11:16] <tadzik> like gave it away?

[11:16] <isBEKaml> yes

[11:16] * tadzik makes the Obelix laugh

[11:16] <isBEKaml> ASF is now turning into a dumpyard of sorts. :(

[11:16] <Juerd> Hm

[11:17] <Juerd> So what's going to happen to OOo now? I hope the name LibreOffice stays, because the .org part of OOo was really annoying.

[11:18] <masak> yeah :)

[11:18] <tadzik> :)

[11:18] <isBEKaml> http://www.pcmag.com/article2/0,2817,2386364,00.asp

[11:18] <tadzik> so much politics

[11:19] <isBEKaml> that's especially an odd and a vindictive move given that they could have given it the Doc Foundation. 

[11:22] <isBEKaml> to put into context, ASF and Doc Foundation are very much at loggerheads over license issues. LGPL and ASF don't agree. 

[11:24] <mberends> odd and vindictive, that sounds about right for oracle

[11:24] <isBEKaml> Juerd: to answer your question, I'm guessing that LibreOffice would possibly merge with ASF's OOo since TDF seems open to discussing license with ASF, going by their blog post. 

[11:30] <isBEKaml> Juerd: http://tinyurl.com/3qgmzdc

[11:36] <Juerd> Interesting

[11:37] <tadzik> int eresting;

[11:55] *** icwiener joined
[11:55] *** kaare_ left
[11:58] <masak> std: my int constant eresting = 42

[11:58] *** Reaganomicon joined
[11:58] <p6eval> std 4b1b100: OUTPUT«ok 00:01 114m␤»

[11:58] <masak> std: my int constant eresting

[11:58] <p6eval> std 4b1b100: OUTPUT«[31m===[0mSORRY![31m===[0m␤Missing initializer on constant declaration at /tmp/cLRVgpkq1T line 1 (EOF):␤------> [32mmy int constant eresting[33m⏏[31m<EOL>[0m␤Check failed␤FAILED 00:01 112m␤»

[12:00] <colomon> niecza: my int constant eresting = 42

[12:00] <p6eval> niecza v6-57-g75df890: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Any()Malformed my at /tmp/WoE4Ky386Q line 1:␤------> [32mmy [33m⏏[31mint constant eresting = 42[0m␤␤Parse failed␤␤»

[12:00] <colomon> niecza: my constant eresting = 42

[12:00] <p6eval> niecza v6-57-g75df890:  ( no output )

[12:00] *** buubot_backup joined
[12:00] <colomon> niecza: my constant eresting = 42; say eresting

[12:00] <masak> masak's conjecture: every off-topic discussion can be derailed into discussion of Perl 6 syntax and semantics. :)

[12:00] <p6eval> niecza v6-57-g75df890: OUTPUT«42␤»

[12:02] <isBEKaml> constant vars don't need a dollar? 

[12:02] <isBEKaml> rakudo: my foo = 42; say foo;

[12:02] <p6eval> rakudo 048573: OUTPUT«===SORRY!===␤Malformed my at line 22, near "foo = 42; "␤»

[12:02] <isBEKaml> rakudo: my constant foo = 42; say foo;

[12:02] <p6eval> rakudo 048573: OUTPUT«===SORRY!===␤Constant type declarator not yet implemented at line 22, near "= 42; say "␤»

[12:02] <isBEKaml> niecza: my constant int foo = 42; say foo;

[12:02] <p6eval> niecza v6-57-g75df890: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Any()Malformed constant at /tmp/44cnXePzGx line 1:␤------> [32mmy constant int [33m⏏[31mfoo = 42; say foo;[0m␤␤Parse failed␤␤»

[12:03] <flussence_> makes sense, it'd be syntactically the same as using perl5 constants.

[12:03] <isBEKaml> niecza: my constant foo = 42; say foo; 

[12:03] <p6eval> niecza v6-57-g75df890: OUTPUT«42␤»

[12:04] <isBEKaml> hmmm, learn something new everyday. :)

[12:04] <flussence_> (is there a difference between constants and readonly vars?)

[12:05] <masak> constants are "assigned" at compile time.

[12:06] <yath> *delurk*

[12:06] <masak> yath: hi! :)

[12:06] <yath> i haven't written anything besides some one-liners in perl6 yet, but i'm trying to change that

[12:06] <yath> hi masak :)

[12:06] <yath> but.. i need a native call for that

[12:06] <masak> yath: that's great news!

[12:06] <yath> inb(), outb() and ioperm() exactly

[12:06] <masak> yath: talk to mberends, he's working on zavolaj at the moment.

[12:07] <colomon> I was going to say, is zavolaj working again yet?

[12:07] <yath> masak: ah, thanks

[12:07] <yath> masak: ah cool, with DBD::mysql-like example code :)

[12:08] <mberends> yes, zavolaj is partly working, there is a growing test suite that is picking up things that appear to changed in Parrot.

[12:08] <yath> aaaand.. something different. would i use latest rakudo star for development, latest master branch oder nom (probably not)?

[12:09] <jnthn> Not nom yet. It's very experimental and incomplete.

[12:09] <yath> mberends: partly? can i wrap three libc calls? :)

[12:09] <masak> mberends++

[12:09] <masak> yath: we all long to use nom, but it's a bit too early :)

[12:10] <mberends> known zavolaj failures listed at the end of https://github.com/jnthn/zavolaj/blob/master/t/02-resident.t

[12:10] * yath just needs an equivalent for Sys::PortIO for now

[12:10] <yath> (... with a better function naming style)

[12:11] <mberends> yath: the same file above also contains calls to libc that do work :)

[12:11] *** satyavvd joined
[12:12] <yath> mberends: yep, just looked at it. though i'm unsure if i get the "perl6 way to do things" right, but i think i'll just write some code and post it here for criticism :)

[12:12] <yath> so, time for git init :)

[12:12] <mberends> :) good

[12:12] <masak> I think 'take-rw' is an ugly keyword. I hope it doesn't stick.

[12:13] <jnthn> s/keyword/function/ ;)

[12:13] <jnthn> masak: You'd use "take" for most things anyway, I suspect.

[12:14] <jnthn> masak: As with return vs return-rw

[12:14] *** satyavvd_ joined
[12:14] <daniel-s> a question about grammas:

[12:14] <daniel-s> am I right to say that a token cannot refer to another token

[12:14] <jnthn> No

[12:14] <jnthn> tokens can refer to whatever they wish

[12:15] <daniel-s> so, is the only difference between rules and tokens that whitespaces are important in rules

[12:15] <jnthn> Yes

[12:15] <masak> jnthn: waitwait, there's a 'return-rw'? arrrgh!

[12:16] <jnthn> masak: Yes. :)

[12:16] <masak> I thought that was goverened through 'is rw' on the routine!

[12:16] *** satyavvd left
[12:16] <mberends> we need some linguists in here to sort out this language ;)

[12:17] <jnthn> masak: I was mostly relieved to see them arrive. tbh.

[12:17] <jnthn> masak: Mostly for the clarified semantics rather than their exact naming though :)

[12:18] <jnthn> OTOH, things that look a bit odd being the thing you usually don't want is kinda a good thing.

[12:18] *** isBEKaml left
[12:19] <masak> I dunno. both 'take-rw' and 'return-rw' feel like they're wrongly factored solutions crowding in on the fame and cleanness of the original keywords.

[12:19] <masak> and... dashes in keywords! it just isn't done! :(

[12:19] <masak> that alone is a design smell.

[12:20] <jnthn> masak: Then suggesting a right factoring that solves the same problem.

[12:20] <jnthn> *suggest

[12:22] *** satyavvd_ left
[12:24] <jnthn> .oO( s/take-rw/steal/, s/return-rw/smuggle-out/ ;-) )

[12:27] *** hanekomu_ joined
[12:29] *** hanekomu_ left
[12:31] *** hanekomu left
[12:35] <dalek> rakudo/nom: 2fea4a0 | jnthn++ | src/Perl6/SymbolTable.pm:

[12:35] <dalek> rakudo/nom: Make sure attributes get an SC slot so they can be referenced.

[12:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2fea4a04cc

[12:35] <dalek> rakudo/nom: c9d605f | jnthn++ | src/Perl6/Actions.pm:

[12:35] <dalek> rakudo/nom: Oops, need to install attribute initialization closure code in the PAST tree.

[12:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c9d605f8b0

[12:38] *** Reaganomicon left
[12:46] *** JimmyZ joined
[12:50] <yath> mberends: hmm, does zavolaj dlopen() or so or does it behave like p5's Inline::C?

[12:50] <yath> err, dlsym()

[12:52] <yath> just wondering because outb() is actually an inlined __asm__ in the libc headers :-/

[12:53] *** Reaganomicon joined
[12:57] *** nymacro left
[12:58] <yath> ah, looks like the former. damn.

[12:58] <mberends> yath: dlopen() looks like a regular libc function, so the first thing to verify is that the signature dlopen(Str $s,Int $i) returns OpaquePointer is passed on correctly by Parrot. That parameter type/return type combination has not been tested yet

[12:59] <yath> mberends: no, i was asking because inb and outb aren't actually exported symbols by libc but rather inline functions that evaluate to __asm__(...)

[13:00] <yath> mberends: so i'd need a C compiler

[13:01] <mberends> yath: yes, stick to exported symbols

[13:02] <yath> mberends: if there was an equivalent.. :)

[13:03] <felher> Isn't it quite inconsistent to allow every word to be quoted using <> but STDIN?

[13:03] <mberends> popular functions are often available in both inline and exported form, for example isalpha(). But that could be compiler dependent.

[13:05] <yath> not for inb and outb it seems.

[13:07] <mberends> rakudo: say <STDCHEESE STDIN STDJAM>.join(",") # felher: <--

[13:07] <p6eval> rakudo 048573: OUTPUT«STDCHEESE,STDIN,STDJAM␤»

[13:08] <felher> mberends: Yeah, but:

[13:08] <felher> rakudo: say <STDIN>

[13:08] <p6eval> rakudo 048573: OUTPUT«===SORRY!===␤Unsupported use of <STDIN>; in Perl 6 please use $*IN.lines at line 22, near "<STDIN>"␤»

[13:09] *** zby_home_ joined
[13:09] <mberends> felher: true, TimToady++ likes to warn explicitly about wrong perl5isms.

[13:12] *** birdwindupbird left
[13:18] *** JimmyZ_ joined
[13:21] *** JimmyZ left
[13:21] *** JimmyZ_ is now known as JimmyZ

[13:22] <felher> I see the point. I also fear that people might stumble upon this, though. Especially scripts that are building perl6 scripts for whatever reason might produce non-working perl6 scripts because the author didn't think of quoting STDIN alone is not possible using <>.

[13:25] <mberends> felher: I see your point too.  Sometimes the spec considers some aspects deeply, and overlooks others.  There is the overall aim of minimizing surprise and/or corner cases, and you have just highlighted one.

[13:25] *** jrockway joined
[13:27] <yath> hmmm... so if i really needed to invoke a C compiler for building some glue between parrot and my OS, like with perl5's XS, is there a module that i could look at as an example?

[13:29] <yath> or i could build a shared library that zavolaj uses. i have no idea. is there a Preferred Way? :)

[13:30] <felher> mberends: hm, quite a quandary.

[13:30] <mberends> yath: I have built a couple of shared libraries in the past week or so, it has not given any problems

[13:31] *** jrockway left
[13:31] *** jrockway joined
[13:31] <mberends> felher: discuss it with TimToady++ when he's next here

[13:31] <yath> mberends: nah, i meant whether there is a standard way to do this or just build an .so with unsigned char foo_inb(unsigned short int port) { return inb(port); } and so on

[13:32] <yath> *or if i should just build

[13:33] <yath> and if so, is there an example module or should i just write the makefile myself?

[13:37] <mberends> yath: there is no standard, because so little of this sort of thing has been done.  Your idea of making a wrapper lib for the inline functions looks sane.  Copy the lib/libzavolajtest.so target from Zavolaj's Makefile if it helps.

[13:37] <yath> mberends: okay, i'll give it try. thanks :)

[13:41] *** jrockway left
[13:42] *** jrockway joined
[13:48] *** birdwindupbird joined
[13:55] *** jaldhar_ joined
[13:59] *** jaldhar_ left
[14:00] *** jaldhar_ joined
[14:03] *** awoodland joined
[14:03] <dalek> rakudo/nom: baf8e10 | jnthn++ | / (7 files):

[14:03] <dalek> rakudo/nom: Clean up and unify the way we keep hold of interesting types for use in binder/multi-dispatch/ops.

[14:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/baf8e10c4f

[14:03] <dalek> rakudo/nom: 2514db1 | jnthn++ | src/ (2 files):

[14:03] <dalek> rakudo/nom: Simplify boxing.

[14:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2514db1049

[14:03] <dalek> rakudo/nom: b703150 | jnthn++ | src/ (4 files):

[14:03] <dalek> rakudo/nom: Some handling of types coming from Parrot land (or NQP), and marshalling them into Perl 6 types.

[14:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b7031508ed

[14:03] <dalek> rakudo/nom: 7424801 | jnthn++ | src/CORE.setting/Cool.pm:

[14:03] <dalek> rakudo/nom: Start putting back Cool.chars, Cool.substr. Various others simple string methods (.bytes, .chop, .lc, .uc...) can also be put back by some enterprising soul with tuits; follow the style shown here.

[14:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/74248010fe

[14:04] <mberends> jnthn++ # LHF to nom :)

[14:06] <jnthn> Note that these versions of things don't go creating Parrot types then calling ~ to coerce them into Perl 6 things, avoiding master's resulting wastage of a String PMC and a multi-dispatch.

[14:06] <JimmyZ> loop { $jnthn++ }

[14:07] * jnthn overflows

[14:07] *** JimmyZ left
[14:08] <tadzik> ooh, LHFs!

[14:08] *** JimmyZ joined
[14:10] *** donri joined
[14:12] <jnthn> mberends: heh, it too me until now to realize the pun...nommable fruit :P

[14:12] <mberends> :)

[14:21] *** awoodland left
[14:22] *** kaare_ joined
[14:26] *** awoodland joined
[14:31] <jnthn> Grrr... // is busted.

[14:40] <dalek> rakudo/nom: aa39de8 | jnthn++ | src/ (2 files):

[14:40] <dalek> rakudo/nom: Fix optional parameters up a bit (they are, at least, optional now).

[14:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aa39de8cb6

[14:43] *** awoodland left
[14:47] *** bluescreen10 joined
[14:47] <dalek> nqp: 44a422b | jonathan++ | src/pmc/sixmodelobject.pmc:

[14:47] <dalek> nqp: Make defined v-table overridable.

[14:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/44a422b915

[14:53] *** whiteknight joined
[14:55] <dalek> rakudo/nom: 7bc6136 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[14:55] <dalek> rakudo/nom: Unbust //.

[14:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7bc6136d2d

[14:55] <dalek> rakudo/nom: 8fe5607 | jnthn++ | src/CORE.setting/Cool.pm:

[14:55] <dalek> rakudo/nom: Fix thinko in substr with single arg.

[14:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8fe5607606

[15:11] <dalek> rakudo/nom: 11e4010 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[15:11] <dalek> rakudo/nom: Make Perl 6 types friendlier to the Parrot world.

[15:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/11e4010069

[15:11] <dalek> rakudo/nom: 8ace1f1 | jnthn++ | src/CORE.setting/Attribute.pm:

[15:11] <dalek> rakudo/nom: Auto-generated attribute accessors, both readonly (default) and rw if 'is rw' trait is applied. Happily, handled by real multi-dispatch trait mods, not special-cased in the compiler like master.

[15:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8ace1f158f

[15:13] *** mikehh_ joined
[15:19] <jnthn> Another LHF is putting back some more math ops. Can do them just on Int for now. See t/00-parrot/02-op-math.t for some inspiration.

[15:19] <jnthn> And operators.pm for approach.

[15:20] <jnthn> Actually maybe I should start an LHF file. :)

[15:20] <JimmyZ> > say 'abcdef'.substr(1,'e3');

[15:20] <JimmyZ> Method 'Int' not found for invocant of class 'SixModelObject'

[15:22] *** hudnix joined
[15:22] * JimmyZ is enjoying the newest nom

[15:22] <jnthn> JimmyZ: Str.Int method not yet implemented. :)

[15:30] <TimToady> niecza: my constant pi of Int = 3; say pi

[15:30] <JimmyZ> jnthn: does nom still complain 'cannt find undefined method' at runtime? 

[15:30] <p6eval> niecza v6-57-g75df890: OUTPUT«3␤»

[15:30] <TimToady> niecza: my Int constant pi = 3; say pi

[15:30] <p6eval> niecza v6-57-g75df890: OUTPUT«3␤»

[15:31] <jnthn> JimmyZ: Yes, we can't (in general) detect undeclared methods at compile time.

[15:31] <JimmyZ> oh, I see 

[15:32] <dalek> rakudo/nom: c14a6c9 | jnthn++ | / (2 files):

[15:32] <dalek> rakudo/nom: Add LHF file, update nommap.

[15:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c14a6c986a

[15:32] <jnthn> Undeclared attributes you'll now be told about at compile time.

[15:32] <JimmyZ> because it is dynamic

[15:32] <jnthn> Right :)

[15:32] <TimToady> well, we could detect undeclared methods with whole program analysis, assuming no methods are declared after CHECK time

[15:32] <jnthn> Well, it's gradual, but the gradualness more helps us optimize in this case, rather than error report.

[15:33] <jnthn> TimToady: Yes, but only with a fully typed program.

[15:33] <TimToady> doesn't have to be

[15:33] <jnthn> my $x = get_thingy(); $x.blah

[15:33] <TimToady> if nobody declares a method foo anywhere, $x.foo is suspect

[15:33] <jnthn> Oh, you meant it in that more blurry sense :)

[15:34] <jnthn> Yeah, that is more possible.

[15:34] <TimToady> when I said whole program analysis I meant analyzing the whole program  :P

[15:34] <jnthn> :P

[15:34] <TimToady> we can't so easily detect calling .foo on the wrong type though...

[15:35] <jnthn> No, that's harder.

[15:35] <TimToady> still, if the parentage is nailed down at CHECK time, you can make some guesses

[15:35] <jnthn> Needs full program analysis, assumption of class closure, and lots of type annotations (or an assumption that untyped means "don't check"). :)

[15:36] <jnthn> But yes, writing that sort of thing is at least a lot more tractable now.

[15:36] <jnthn> Given we have all the meta-objects to hand at compile time.

[15:36] <jnthn> well, by CHECK time, I mean ;)

[15:36] <TimToady> that kind of analysis is necessary to make single dispatch into direct invocation anyway, so systems that are single dispatch only often get into such optimizations

[15:37] <TimToady> some such optimizations might need pragmatic reassurances

[15:37] <TimToady> or a system of declarative pessimizations, as we've specced in spots

[15:38] <jnthn> Sure they do - it's not so much inability to implement such things, so much as them not giving so many false positives that users hate them. :)

[15:38] <jnthn> And yes, promises-by-pragma sounds like a sane approach.

[15:38] <TimToady> "the optimizer is allowed to optimize X at CHECK time unless you've said 'this thing is stupid'"

[15:39] <TimToady> that's how we've specced open/closed/final classes

[15:39] <TimToady> we'd really like Perl 6 to run fast by default :)

[15:40] <TimToady> at the expense of a few "too late to do that after CHECK" errors and erroneousnesses

[15:41] <TimToady> ah well, preaching to the choir, or singing to the preacher, or something...

[15:41] <jnthn> :)

[15:43] <TimToady> I suppose if there's a sense in which we're handing off control with take-rw and return-rw, so maybe TAKE and RETURN

[15:44] *** bluescreen10 left
[15:47] <dalek> rakudo/nom: 9e07d02 | jnthn++ | src/CORE.setting/traits.pm:

[15:47] <dalek> rakudo/nom: Remove debug code I accidentally left in.

[15:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9e07d02bb8

[15:51] *** kboga joined
[15:51] <dalek> std: c843201 | larry++ | STD.pm6:

[15:51] <dalek> std: clarify <STDIN> message for felher++

[15:51] <dalek> std: review: https://github.com/perl6/std/commit/c843201cf8

[15:52] * JimmyZ tries to add LHF to operatoers.pm and success

[15:52] *** thou joined
[15:54] *** kfo_ joined
[15:58] <dalek> rakudo/nom: e80400f | jnthn++ | src/Perl6/Grammar.pm:

[15:58] <dalek> rakudo/nom: Track <STDIN> error update from STD.

[15:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e80400f036

[16:06] *** mikehh_ is now known as mikehh

[16:07] <jnthn> So...what's next on my list...oh my. Multi-methods.

[16:23] *** daniel-s left
[16:32] *** snearch joined
[16:36] *** asdf_ joined
[16:37] *** kboga left
[16:42] *** awoodland joined
[16:47] *** asdf_ left
[16:53] *** awoodland left
[16:55] <dalek> rakudo/nom: 391b249 | jnthn++ | src/Perl6/ (3 files):

[16:55] <dalek> rakudo/nom: Get basic case of multi-method dispatch, where a proto and multi-candidates are declared in the same class - to work.

[16:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/391b249ad7

[17:01] <jnthn> afk for a bit

[17:05] *** mtk left
[17:12] <sorear> good * #perl6

[17:14] <donri> new rakudo website eh

[17:15] *** mtk joined
[17:18] <moritz> jnthn: looking at Cool.chars etc., wouldn't it be better in the long run to return native ints, and have some magic that automatically boxes them when the receiver wants a boxed type? Or is that ETOOMUCHMAGIC?

[17:22] *** snearch left
[17:30] *** zby_home_ left
[17:31] <dalek> rakudo/nom: 131a296 | moritz++ | build/Makefile.in:

[17:31] <dalek> rakudo/nom: [build] missing dependency on setting files

[17:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/131a296633

[17:31] <dalek> rakudo/nom: 0c146e2 | moritz++ | src/CORE.setting/Cool.pm:

[17:31] <dalek> rakudo/nom: implement Cool.lc and .uc

[17:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0c146e2a04

[17:33] *** zby_home joined
[17:33] *** MayDaniel joined
[17:36] <dalek> rakudo/nom: 4afdce2 | moritz++ | / (2 files):

[17:36] <dalek> rakudo/nom: implement Cool.lcfirst and Cool.ucfirst

[17:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4afdce22c0

[17:36] *** kaare_ left
[17:37] *** Trashlord left
[17:45] *** awoodland joined
[17:46] *** JimmyZ left
[17:47] <dalek> rakudo/nom: e89fd23 | moritz++ | src/CORE.setting/operators.pm:

[17:47] <dalek> rakudo/nom: implement binary operators for integers

[17:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e89fd234b5

[17:47] <dalek> rakudo/nom: 84ab1c3 | moritz++ | src/CORE.setting/operators.pm:

[17:47] <dalek> rakudo/nom: implement integer bitshift operators

[17:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/84ab1c30a1

[17:52] *** awoodland left
[17:53] <moritz> nqp: say(pir::bnot("a"))

[17:53] <p6eval> nqp: OUTPUT«error:imcc:syntax error, unexpected PREG, expecting '(' ('$P17')␤   in file '(file unknown)' line 26␤error:imcc:syntax error ... somewhere␤ in file '(file unknown)' line 120␤syntax error ... somewhere␤»

[17:53] <moritz> nqp: say(pir::bnot__PP("a"))

[17:53] <p6eval> nqp: OUTPUT«error:imcc:syntax error, unexpected PREG, expecting '(' ('$P17')␤   in file '(file unknown)' line 26␤error:imcc:syntax error ... somewhere␤ in file '(file unknown)' line 120␤syntax error ... somewhere␤»

[17:55] <moritz> nqp: pir::loadlib('bit_ops'); say(pir::bnot__PP("a"))

[17:55] <p6eval> nqp: OUTPUT«error:imcc:syntax error, unexpected PREG, expecting '(' ('$P18')␤   in file '(file unknown)' line 44846891␤error:imcc:syntax error ... somewhere␤   in file '(file unknown)' line 44846985␤syntax error ... somewhere␤»

[17:56] *** MayDaniel left
[17:58] <jnthn> ooh, moritz++ has been patchin'

[17:58] * jnthn reviews

[18:00] <jnthn> moritz: They look good.

[18:00] *** birdwindupbird left
[18:00] <jnthn> moritz: It's too late to use loadlib at runtime

[18:01] <jnthn> moritz: If you want to play with other oplibs then --vmlibs=bit_ops will help

[18:01] <jnthn> moritz: Note, avoid the PP versions, or they re-box...

[18:04] <felher> thnx, TimToady++, jnthn++

[18:04] <moritz> jnthn: noted.

[18:08] <dalek> rakudo/nom: 53f404e | moritz++ | src/CORE.setting/IO.pm:

[18:08] <dalek> rakudo/nom: hacky version of print() to get some tests passing

[18:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/53f404e3ed

[18:08] <dalek> rakudo/nom: 639f872 | moritz++ | src/ (2 files):

[18:08] <dalek> rakudo/nom: implement prefix +^ for integers

[18:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/639f8727cd

[18:08] <moritz> nqp: say 2 ** 3

[18:08] <p6eval> nqp: OUTPUT«Confused at line 1, near "say 2 ** 3"␤current instr.: 'nqp;HLL;Grammar;panic' pc 26397 (src/stage2/gen/NQPHLL.pir:7039)␤»

[18:08] <moritz> nqp: say(2 ** 3)

[18:09] <p6eval> nqp: OUTPUT«8␤»

[18:15] *** wamba joined
[18:17] <moritz> somehow I can't get pir::pow__NNN to work, even if I load math_ops

[18:18] <moritz> nqp: say(pir::pow__NNN(3, 4))

[18:18] <p6eval> nqp: OUTPUT«81␤»

[18:18] <jnthn> moritz: Is there no III variant?

[18:19] <jnthn> moritz: NNN is floating point.

[18:19] <moritz> jnthn: dunno

[18:19] <moritz> nqp: say(pir::pow__III(3, 4))

[18:19] <p6eval> nqp: OUTPUT«error:imcc:The opcode 'pow_i_i_i' (pow<3>) was not found. Check the type and number of the arguments␤       in file '(file unknown)' line 30␤»

[18:19] <jnthn> So using it with Ints is probably not going to end so well ;)

[18:19] <moritz> aye

[18:19] <jnthn> rakudo: say 3 ** 4

[18:19] <moritz> well, it tries to coerce

[18:19] <p6eval> rakudo 048573: OUTPUT«81␤»

[18:19] <jnthn> rakudo: say (3 ** 4).WHAT

[18:19] <p6eval> rakudo 048573: OUTPUT«Int()␤»

[18:20] <jnthn> "tries"? :)

[18:20] <moritz> error:imcc:syntax error, unexpected NREG, expecting '(' ('$N25')

[18:20] <jnthn> Can you nopaste the code and/or what you're seeing? :)

[18:20] <moritz> $unit.loadlibs('nqp_group', 'nqp_ops', 'perl6_group', 'perl6_ops', 'bit_ops', 'math_ops'); in src/Perl6/Actions.pm

[18:21] <jnthn> *nod* 

[18:21] <jnthn> That bit looks right.

[18:21] <moritz> and then just pir::pow__NNN(2, 3) on the command line

[18:21] <jnthn> oh

[18:21] <jnthn> Using pirops directly on the command line ain't going to end too well in nom.

[18:21] <jnthn> Well

[18:21] <jnthn> It probably will be we implemented Int.Num

[18:21] <jnthn> I'm guessing the erorr is about a missing .Num?

[18:22] <moritz> error:imcc:syntax error, unexpected NREG, expecting '(' ('$N25')

[18:22] <jnthn> OH

[18:22] <jnthn> :S

[18:22] <donri> hm, what does make install do that make don't? i get the binaries installed by just make

[18:22] <donri> rakudo star

[18:23] <moritz> it should install

[18:23] <donri> but it already did? :P

[18:24] <moritz> where does it install them?

[18:25] <moritz> erm, iinto which location?

[18:25] <donri> same as make install

[18:25] <donri> i.e. --prefix defaulting to install/

[18:26] *** wamba left
[18:29] *** awoodland joined
[18:30] <donri> hm i just compiled rakudo by accident

[18:31] <donri> was going to check some stuff in web.pm, completely forgot what i was doing, ended up compiling latest star

[18:31] <donri> adhd be damned

[18:32] <masak> just try again.

[18:32] <masak> if you have any questions about Web.pm, feel free to ask here. some parts are a bit antiquated and... neglected. :/

[18:33] <tadzik> did we eventually make it run on master?

[18:34] <masak> it's a collection of heterogenous applications... but yes, largely.

[18:34] *** wamba joined
[18:35] <tadzik> hmm, I remember fixing some stuff but I don't see my commits anywhere

[18:35] <tadzik> oh, that must be in my fork or somewhere

[18:37] <masak> sounds pullworthy.

[18:39] <donri> man github needs better syntaxing of 6p

[18:39] <donri> p6

[18:39] <tadzik> pod6! :)

[18:40] <donri> ?

[18:40] <tadzik> look how it parses S26: https://github.com/tadzik/gsocmess/blob/master/docs/S26-documentation.pod

[18:40] <donri> http://icanhascheezburger.files.wordpress.com/2009/08/funny-pictures-cat-is-amazed.jpg

[18:41] <tadzik> I like how cats are never offtopic

[18:41] <masak> the only way to provide github with better syntax highlighting of Perl 6 is to place a sufficiently good syntax highlighter, in a language they can use, at their doorstep. :)

[18:41] *** envi left
[18:42] <donri> cats go wrong with cants

[18:42] <donri> masak: they use pygments, python

[18:42] <tadzik> hitomi relies on <after> in grammars it seems

[18:43] <masak> that's workaroundable.

[18:43] <tadzik> and stuff. Hitomi fails, the rest of the tests pass

[18:43] <masak> hitomi shouldn't even be parsing XML, really.

[18:43] <jnthn> moritz: Did you manage to fathom the pow issue?

[18:43] <masak> we should have a good binding to some XML lib.

[18:44] <tadzik> there was a gsoc project about it, wasn't there?

[18:44] <moritz> jnthn: no

[18:44] <jnthn> moritz: OK, will look

[18:45] <moritz> jnthn: added as nom-power branch to github

[18:45] <moritz> erm... or will be, wenn my slow connection finishes the upload

[18:45] <moritz> done.

[18:45] <masak> tadzik: not that I know.

[18:46] <masak> tadzik: was that parrot-xml lib binding, then?

[18:46] <donri> libxml2 seems to be generally considered best-of-breed

[18:47] <tadzik> masak: lemee resee

[18:47] <donri> https://github.com/supernovus/exemel/ ?

[18:47] <tadzik> masak: http://wiki.enlightenedperl.org/gsoc2011/ideas ^F "xml parser"

[18:47] <tadzik> donri: let's see how it works

[18:48] <masak> tadzik: ah, a project proposal.

[18:48] <masak> tadzik: yes, I might even have written that one.

[18:48] <tadzik> yeah

[18:48] <donri> does it make sense to nativecall stuff like libxml2 when there's PGE?

[18:49] <donri> speed?

[18:49] <tadzik> exemel passes its tests, maybe it could be used for hitomi

[18:49] <tadzik> donri: what does PGE have to do with it?

[18:49] <tadzik> oh, I get it

[18:49] <donri> wait, is pge not perl6 grammars

[18:49] <tadzik> yeah, but I see your point

[18:49] <tadzik> I

[18:49] <tadzik> I'm sure binding to libxml2 or something will end up being faster, at least for now

[18:49] <masak> it's not just about parsing. it's also a lot of other XML wheels that don't merit re-inventing.

[18:50] <masak> yes, it will be faster.

[18:50] <masak> it's also a very good fit with jnthn's work with reprs.

[18:50] <donri> i get that it's probably faster *for now* but what about "potentially"?

[18:51] <tadzik> masak: so, what's the plan for Web?

[18:51] <masak> it would take a lot for me to prefer someone's PGE/nqp/Perl 6 grammar of XML to a well-tried, well-used XML library.

[18:52] <masak> tadzik: finish week 20, salvage what's good from it into other github repos.

[18:52] <donri> anyway libxml2+libxslt is the typical preference in python (lxml) and ruby (nokogiri)

[18:52] <masak> tadzik: I have a pretty good idea of what we want to keep from Web.pm.

[18:52] <tadzik> masak: oh, that's your grant?

[18:52] *** awoodland left
[18:53] <masak> mine, ihrd's and Tene's, yes.

[18:53] <tadzik> expertise: exemel is working as an xml parser. hitomi can be moved to old/ until reworked, and then the tests pass, there's a working astaire, ratel and something else

[18:54] <tadzik> loldispatch, squerl and Web/Handler/HTTPDaemon is already old'ed

[18:54] <donri> in pythonland, "werkzeug" has *excellent* request and response objects, very well designed and a good source of inspiration

[18:54] <tadzik> from various reasons, being broken traits, broken sqlite, and broken something respectively

[18:54] <masak> I'd like to keep squerl alive. it's one of the projects that I think have promise.

[18:54] <masak> ah yes, broken sqlite.

[18:54] <moritz> a perlish source of inspiration would be Mojo/Mojolicious

[18:55] <tadzik> or was it sqlite? Don' remember

[18:55] *** Trashlord joined
[18:55] <tadzik> yeah, sqlite

[18:55] <masak> sqlite3, IIRC.

[18:56] <tadzik> aye

[18:56] <Tene> I've been repeatedly surprised that people mention loldispatch; I just meant it as a throwaway toy demo.

[18:56] <tadzik> :)

[18:57] <tadzik> lol!

[18:57] <Tene> but people keep treating it like it's a real thing

[18:57] <masak> the name is charming :)

[18:57] <donri> what *is* it?

[18:57] <tadzik> feel free to throwaway it entirely if you want to, you have access to my fork Tene 

[18:58] <tadzik> All tests successful.

[18:58] <tadzik> Files=6, Tests=33, 22 wallclock secs

[18:58] <masak> tadzik++

[18:58] <tadzik> masak: feel free to pull/cherry-pick whatever you think makes sense

[18:58] <tadzik> moritz++ # nom-power!

[18:59] <masak> tadzik: thanks, I will.

[18:59] <masak> donri: it's a little module pairing subroutine traits with URI dispatch.

[18:59] <tadzik> donri: imagine 

[18:59] <donri> kinda like dancer?

[19:00] <tadzik> "sub foo() is http-handler(/foo/) {}"

[19:00] <tadzik> not quite

[19:00] *** molaf left
[19:00] <Tene> donri: look at the usage section of https://github.com/masak/web/blob/master/lib/LolDispatch.pm

[19:00] <donri> well, i was going to say flask/bottle but they're python and you don't know them ;)

[19:00] <tadzik> donri: https://github.com/tadzik/web/blob/master/old/lib/LolDispatch.pm#L22

[19:00] <tadzik> oh, I is late

[19:01] <donri> i suppose it's astaire that's like dancer

[19:01] <tadzik> also, Bailador is like Dancer :>

[19:01] <donri> but i really meant more like the python sinatras; decorators being similar to traits

[19:02] <tadzik> donri: see https://github.com/tadzik/Bailador/blob/master/app.pl

[19:02] <tadzik> I wonder if that still works

[19:02] <masak> yes, Astaire was created before I knew about Dancer.

[19:04] <tadzik> heh, it does :)

[19:07] <sorear> mberends: that error from LoadAllSubs is suggestive of stale files in the module cache, maybe Test.dll

[19:08] <mberends> sorear: thanks, I suppose a fresh checkout is the safest option

[19:08] <tadzik> Requests per second:    12.28 [#/sec] (mean)

[19:09] <tadzik> not that bad :)

[19:10] <masak> that's really nice.

[19:10] <masak> requests in November typically took on the order of 3 seconds.

[19:10] <tadzik> well, bailador is barely 20 lines

[19:16] <tadzik> 12.68 [#/sec] on bare PSGI app

[19:16] <tadzik> hmmm

[19:17] *** kjeldahl left
[19:17] <sorear> yath: Isn't inb a macro?  You'll have trouble zavolajing it if so.

[19:17] <sorear> (am I the first person to verb that?)

[19:18] <jnthn> sorear: zavolaj already is an imperative verb in the languages the name came from :)

[19:18] <jnthn> *language

[19:18] <sorear> masak: return-rw and leave-rw are only intended for use in cases where you cannot use 'is rw'.  namely, pointy blocks

[19:19] <TimToady> hmm

[19:19] <TimToady> std: -> $x { is rw; ... }

[19:19] <p6eval> std c843201: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routines:␤        'is' used at line 1␤    'rw' used at line 1␤Potential difficulties:␤  $x is declared but not used at /tmp/IjAD2y9RKu line 1:␤------> [32m-> [33m⏏[31m$x { is rw; ... }[0m␤Check failed␤FAILED 00:01 115m␤»

[19:19] <tadzik> "z wołaniem"

[19:19] <TimToady> std: -> $x { also is rw; ... }

[19:19] <p6eval> std c843201: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/X4gdKijgEe line 1:␤------> [32m-> [33m⏏[31m$x { also is rw; ... }[0m␤ok 00:01 114m␤»

[19:19] <TimToady> there you go

[19:19] <masak> sorear: what TimToady said.

[19:20] <masak> and in general, that would be my proposed solution: rw-ize the container, not the returning(-ish) action.

[19:20] <masak> the latter seems like unnecessarily much freedom to me.

[19:20] <masak> bothersomely much.

[19:24] <sorear> +1 to 'also is rw' in blocks

[19:30] *** awoodland joined
[19:31] <moritz> nqp: say (pir::neg__NN(3))

[19:31] <p6eval> nqp: OUTPUT«Confused at line 1, near "say (pir::"␤current instr.: 'nqp;HLL;Grammar;panic' pc 26397 (src/stage2/gen/NQPHLL.pir:7039)␤»

[19:32] <moritz> nqp: say(pir::neg__NN(3))

[19:32] <p6eval> nqp: OUTPUT«-3␤»

[19:32] <moritz> nqp: say(pir::neg__II(3))

[19:32] <p6eval> nqp: OUTPUT«-3␤»

[19:32] <jnthn> nqp: say(pir::neg__II(3))

[19:32] <p6eval> nqp: OUTPUT«-3␤»

[19:32] <jnthn> oh, phew, there is one :)

[19:33] <moritz> jnthn: why do all the ops in operators.pm have a \ before the parameters?

[19:34] <jnthn> moritz: "is parcel"

[19:34] <jnthn> moritz: "bind whatever you get straight into the lexpad"

[19:34] <jnthn> moritz: Basically, optimization

[19:34] <jnthn> moritz: In theory, a smart compiler would spot the chance to do it for us.

[19:35] <jnthn> moritz: In practice, we didn't write src/Perl6/Optimizer.pm yet :)

[19:35] *** PhatEddy joined
[19:35] <moritz> :-)

[19:35] <jnthn> Anyway, it gives a speed win.

[19:35] <PhatEddy> perl6: grammar g { token TOP { a } }; enum select_parser (parse_a => g)

[19:35] <p6eval> rakudo 048573: OUTPUT«===SORRY!===␤Method 'succ' not found for invocant of class 'Failure'␤»

[19:35] <p6eval> ..niecza v6-57-g75df890: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Illegal redeclaration of symbol 'g' (see line 1) at /tmp/NalVrv9Xgi line 1 (EOF):␤------> [32ma } }; enum select_parser (parse_a => g)[33m⏏[31m<EOL>[0m␤␤Compile time expression is insufficiently trivial at /tmp/NalVrv9Xgi line 1

[19:35] <p6eval> ..(EOF):␤------> […

[19:35] <p6eval> ..pugs: OUTPUT«*** No such subroutine: "&enum"␤    at /tmp/6MrhpVzUpN line 1, column 32 - line 2, column 1␤»

[19:36] <PhatEddy> perl6: sub griddle { say 'hot' }; enum h ( hot => &griddle )

[19:36] <p6eval> niecza v6-57-g75df890: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Compile time expression is insufficiently trivial at /tmp/IjxTZVXLR9 line 1 (EOF):␤------> [32m say 'hot' }; enum h ( hot => &griddle )[33m⏏[31m<EOL>[0m␤␤Unhandled exception: Check failed␤␤  at

[19:36] <p6eval> ../home/p6eval/niecza/boot/lib/CORE.setting line 469 (…

[19:36] <p6eval> ..rakudo 048573: OUTPUT«===SORRY!===␤Could not find sub &griddle␤»

[19:36] <p6eval> ..pugs: OUTPUT«*** No such subroutine: "&enum"␤    at /tmp/jeREmNZGM_ line 1, column 28 - line 2, column 1␤»

[19:36] *** MayDaniel joined
[19:37] <sorear> PhatEddy: enum values must be either Int or Str or a subtype thereof

[19:37] <sorear> my goal for today is to make enum and subset work

[19:39] <mberends> sorear: S03-metaops/hyper.niecza line 234 contains: eval '@r = ("f", "oo", "bar").».chars'; and here it still throws IndexOutOfRangeException at ReadXref etc.

[19:41] *** MayDaniel left
[19:41] <dalek> rakudo/nom: 59611dc | moritz++ | src/CORE.setting/operators.pm:

[19:41] <dalek> rakudo/nom: implement prefix:<-> for Int and Num

[19:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/59611dc80d

[19:42] <jnthn> moritz: Awesome, though we don't have Num literals yet. ;-)

[19:42] <jnthn> Or any way to Num :)

[19:44] <tadzik> details :)

[19:44] *** birdwindupbird joined
[19:45] <jnthn> Maybe I should put them back soon. :)

[19:48] <moritz> it compiles, so it must be correct :-)

[19:49] <PhatEddy> That sort of makes sense but I just double checked S02 and S12 and didn't see the Int or Str "requirement".

[19:50] * moritz doesn't see why it needs to

[19:54] *** birdwindupbird left
[19:57] <dalek> rakudo/nom: 0462779 | moritz++ | src/Perl6/Actions.pm:

[19:57] <dalek> rakudo/nom: comment out version check that dies on "use v6;"

[19:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0462779986

[19:57] <jnthn> moritz: heh, use v6 didn't work? :D

[19:58] <moritz> jnthn: nope :/

[19:58] <jnthn> heh :)

[19:58] <jnthn> oh, I think I know why...

[20:00] <moritz> rakudo: say 1 leg 2

[20:00] <p6eval> rakudo 048573: OUTPUT«-1␤»

[20:01] <tadzik> std: 1 leg 2 legs

[20:01] <p6eval> std c843201: OUTPUT«[31m===[0mSORRY![31m===[0m␤Whitespace is required between alphanumeric tokens at /tmp/k_bs2PCRAv line 1:␤------> [32m1 leg 2 leg[33m⏏[31ms[0m␤"leg" and "leg" are non-associative and require parens at /tmp/k_bs2PCRAv line 1:␤------> [32m1 leg 2 leg[33m⏏[31ms[0m␤No

[20:01] <p6eval> ..delimi…

[20:02] <jnthn> moritz: leg does Order enum, iirc?

[20:03] <moritz> jnthn: yes

[20:04] <sorear> mberends: you got that with a clean niecza and roast checkout? :/

[20:05] <jnthn> moritz: OK. No enums yet.

[20:05] <mberends> sorear: yes

[20:05] <sorear> wtf

[20:07] <dalek> rakudo/nom: 04b1572 | moritz++ | src/CORE.setting/operators.pm:

[20:07] <dalek> rakudo/nom: cheated infix:<leg>

[20:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/04b1572352

[20:10] <sorear> S03-metaops/hyper.t passes here

[20:10] <sorear> let me try again with a clean checkout

[20:12] <mberends> I'll move to another system later, it will have a newer Mono

[20:18] *** masak left
[20:21] *** wamba left
[20:22] *** masak joined
[20:24] *** _jaldhar_ joined
[20:25] <sorear> mberends: what mono version are you using now?

[20:26] <sorear> \o/

[20:26] <mberends> 2.6.7 on Debian 6.0

[20:26] <sorear> I have REPRODUCED the FAILURE

[20:26] <mberends> oooh!

[20:27] *** masak left
[20:27] *** y3llow joined
[20:27] *** pothos joined
[20:28] *** jaldhar_ left
[20:30] <sorear> it only happens with an older mono

[20:31] <sorear> niecza: sub foo($x) { eval q[say $x]; eval q[say $x] }; foo(15) #OK

[20:31] <p6eval> niecza v6-57-g75df890: OUTPUT«15␤15␤»

[20:31] <sorear> hey

[20:31] *** tomaw_ joined
[20:32] *** tomaw left
[20:32] <sorear> for some reason p6eval is using 2.10.1

[20:35] *** tomaw_ is now known as tomaw

[20:36] <moritz> "for some reason" = "i installed it because it wouldn't work on older versions back then"

[20:36] *** masak joined
[20:37] <sorear> oops.

[20:37] <sorear> sorry.

[20:37] <moritz> don't worry, it's "auld lang syne"

[20:38] <sorear> Confused at line 1, near "auld"

[20:38] <moritz> "old long since"

[20:44] <moritz> nqp: say(pir::bneg__SS("!a3"))

[20:44] <p6eval> nqp: OUTPUT«error:imcc:syntax error, unexpected SREG, expecting '(' ('$S18')␤   in file '(file unknown)' line 41516155␤error:imcc:syntax error ... somewhere␤   in file '(file unknown)' line 41516249␤syntax error ... somewhere␤»

[20:44] <moritz> nqp: say(pir::bneg__PP("!a3"))

[20:44] <p6eval> nqp: OUTPUT«error:imcc:syntax error, unexpected PREG, expecting '(' ('$P17')␤   in file '(file unknown)' line 47596330␤error:imcc:syntax error ... somewhere␤   in file '(file unknown)' line 47596424␤syntax error ... somewhere␤»

[20:44] <jnthn> moritz: Needs bit_ops?

[20:44] <moritz> jnthn: probably

[20:45] <moritz> nqp: say(pir::bnot__PP("!a3"))

[20:45] <p6eval> nqp: OUTPUT«error:imcc:syntax error, unexpected PREG, expecting '(' ('$P17')␤   in file '(file unknown)' line 40387370␤error:imcc:syntax error ... somewhere␤   in file '(file unknown)' line 40387464␤syntax error ... somewhere␤»

[20:46] <moritz> and right spelling :-)

[20:47] *** thou left
[20:47] <jnthn> moritz: And hopefully not PP :)

[20:47] <moritz> jnthn: right, SS and II exist

[20:47] <moritz> erm

[20:48] <moritz> ... but spelled bnots__SS

[20:50] <jnthn> that's nots-o consistent...

[20:50] <moritz> all the binary string ops have an s postfix

[20:50] *** thou joined
[20:50] <moritz> and it seems that the PP variant coerces to something numberish

[20:51] <jnthn> ah, ok

[20:51] <jnthn> It's nots o bad then :)

[20:51] <PhatEddy> rakudo: class A {has $.a; submethod BUILD($!a) {}; sub new($str) {return this.bless(*, a => $str)}}; my $x = A.new('abc')

[20:51] <p6eval> rakudo 048573: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in 'A::BUILD' at line 22:/tmp/dJnUDQTGG5␤  in main program body at line 22:/tmp/dJnUDQTGG5␤»

[20:51] <PhatEddy> rakudo: class A {has $.a; submethod BUILD(:$init_a) {$!a = $init_a; say 'init_a is ', $init_a}; sub new($str) {return this.bless(*, init_a => $str)}}; my $x = A.new('abc'); say $x.a

[20:51] <p6eval> rakudo 048573: OUTPUT«init_a is Any()␤Any()␤»

[20:53] *** mj41 joined
[20:55] <moritz> jnthn: try "a" + "b" in nom

[20:56] <moritz> segfaults here

[20:56] <jnthn> moritz: Yeah, I'd noticed that multi-dispatch fails sometimes fail a bit too hard.

[20:56] <jnthn> moritz: But not always.

[20:56] <jnthn> moritz: It'll be something silly, I'm sure.

[20:58] *** masak left
[20:58] <jnthn> moritz: Does nom-power still need looking at?

[20:58] <jnthn> (been busy sorting out NPW bits :-))

[20:58] *** masak joined
[20:58] *** jevin joined
[20:59] <dalek> rakudo/nom: b504ad2 | moritz++ | src/CORE.setting/operators.pm:

[20:59] <dalek> rakudo/nom: implement some string bitwise ops

[20:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b504ad24f5

[21:01] <moritz> jnthn: yes, it doesn't work :/

[21:03] <moritz> it compiles to    pow $N780, $N777, $N779

[21:03] <moritz> which is a syntax error :(

[21:04] <moritz> even though there was a .loadlib "math_ops"

[21:04] <jnthn> nqp: say(pir::pow__NNN(2,3))

[21:04] <p6eval> nqp: OUTPUT«8␤»

[21:04] <jnthn> :S

[21:04] <moritz> erm

[21:04] <moritz> it seems its in trans.ops

[21:05] <moritz> not math.ops

[21:05] <moritz> wtf?

[21:05] <jnthn> oh!

[21:05] <jnthn> wtf.

[21:05] <jnthn> moritz: Shall I leave it to you, now you've figured out what's up? :)

[21:06] <moritz> jnthn: yes, but that way I'll only get the Num ** Num case to work...

[21:06] <jnthn> moritz: OK, do that one, I'll look into the int one.

[21:06] <jnthn> *Int

[21:06] <moritz> jnthn: should I just use the __NNN form for integers too, and have parrot do the boxing?

[21:06] <jnthn> moritz: oh

[21:06] <jnthn> moritz: Actually if you do that it'll not box, afaik.

[21:06] <PhatEddy> We had some discussion about build and positional parameters yesterday.  Now the parameters seem positional.  Is there some further misunderstanding or something else wrong?

[21:06] <jnthn> moritz: It'll do an I to N coercion

[21:07] <jnthn> moritz: Which is fine.

[21:07] <moritz> erm, yes

[21:07] <jnthn> (it doesn't allocate)

[21:07] *** jfried left
[21:08] *** thou left
[21:09] *** _jaldhar_ left
[21:09] <dalek> rakudo/nom: 32fd8e1 | moritz++ | src/ (2 files):

[21:09] <dalek> rakudo/nom: try to add infix:<**>

[21:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/32fd8e152b

[21:09] <dalek> rakudo/nom: 23dbedc | moritz++ | src/Perl6/Actions.pm:

[21:09] <dalek> rakudo/nom: pir::pow requires trans_ops

[21:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/23dbedc22e

[21:09] <dalek> rakudo/nom: 834ae1e | moritz++ | src/ (2 files):

[21:09] <dalek> rakudo/nom: Merge branch 'nom-power' into nom

[21:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/834ae1eedb

[21:10] <moritz> nqp: say(pir::set__IP("34"))

[21:10] <p6eval> nqp: OUTPUT«34␤»

[21:11] *** awoodland left
[21:12] <moritz> nqp: say(pir::set__IN(2.3))

[21:12] <p6eval> nqp: OUTPUT«2␤»

[21:13] <moritz> rakudo: pir::set__IP "23"

[21:13] <p6eval> rakudo 048573:  ( no output )

[21:13] * moritz never realized that in rakudo pir::thing is just a listop

[21:14] *** _jaldhar_ joined
[21:14] <dalek> rakudo/nom: 6c0be96 | moritz++ | src/CORE.setting/operators.pm:

[21:14] <dalek> rakudo/nom: implement infix ** for integers

[21:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6c0be969ae

[21:15] <moritz> next failure in 02-op-math.t: infix:<%>

[21:15] <moritz> I think I'll leave that for colomon++ or other interested folks, and go to sleep now

[21:15] <moritz> 'night

[21:16] <jnthn> moritz: night o/

[21:16] <jnthn> moritz++ # nom hacking

[21:19] * tadzik gets on track

[21:19] <jnthn> \o/

[21:20] <dalek> rakudo/nom: 66b57e3 | jnthn++ | src/binder/multidispatch.c:

[21:20] <dalek> rakudo/nom: Fix segfault in multi-dispatcher, as noticed by moritz++.

[21:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/66b57e3d77

[21:20] <tadzik> jnthn: I remember you saying that you'd rather make setting compilation fast than trying to split up the compilation. It is fast now, but will it scale?

[21:21] <tadzik> t/00-parrot/02-op-math.t pass :)

[21:21] <tadzik> that's probably due to lack of tests

[21:21] <jnthn> tadzik: Probably won't scale that much better than master, but a bit.

[21:21] <jnthn> tadzik: Parse trees are lighter now.

[21:22] <jnthn> tadzik: But PAST isn't switched over to 6model yet and NQP is missing at lesat one important optimization that'd make a difference.

[21:22] <tadzik> I see

[21:23] <jnthn> On the one hand, the compiler is building a much fuller view of the runtime than it was before also

[21:23] <jnthn> On the other hand, some of those make previous things go away

[21:23] <tadzik> nice, t/00-parrot/03-op-logic.t segfaults

[21:23] <jnthn> (e.g. we now build the real signatures and classes rather than objects that generate them)

[21:23] <jnthn> tadzik: Does it still segfault after the commit I made a few minutes ago?

[21:24] <tadzik> oh, not 'made' (ha ha!) yet, will check

[21:24] <jnthn> .oO( What sort of beer does a Perl 6 compiler prefer when it's almost done compiling a program? CHECK beer! )

[21:25] <tadzik> ;)

[21:25] <dalek> rakudo/nom: 8766c01 | tadzik++ | src/CORE.setting/operators.pm:

[21:25] <dalek> rakudo/nom: Implement prefix:<abs> and infix:<%>, making t/00-parrot/02-op-math.t pass

[21:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8766c017bc

[21:25] <tadzik> jnthn: it's Null PMC access in invoke() after the patch

[21:26] *** _jaldhar_ left
[21:26] <jnthn> tadzik: And something saying multi-dispatch error reporting is busted?

[21:27] <tadzik> yeah, yeah

[21:27] <jnthn> OK :)

[21:28] <tadzik> William Paste

[21:28] <tadzik> http://wklej.org/id/541631/

[21:28] <jnthn> oh

[21:28] <jnthn> hm

[21:28] *** _jaldhar_ joined
[21:29] <jnthn> ah, yes, it's down at the bottom there

[21:29] <jnthn> OK

[21:29] <jnthn> I can't fix that up until I have Code.signature.perl working again.

[21:29] <tadzik> no worries, keep up the good work :)

[21:29] * tadzik peeks in LHFmap

[21:29] <jnthn> Anyway, that's still better than a segfault

[21:29] <jnthn> hmm...I wonder if all the LHF nom has been eaten :)

[21:29] <tadzik> the pir-related test segfaults

[21:30] <jnthn> eww

[21:30] <jnthn> Though it may be that it breaks some type system assumption.

[21:31] <jnthn> oh, yes

[21:31] <jnthn> it sneaks a Parrot type somewhere that cna't yet handle that.

[21:32] <jnthn> Will put on my fix list...we really had best not segfault for that.

[21:34] *** _jaldhar_ left
[21:36] *** _jaldhar_ joined
[21:38] *** [particle] joined
[21:39] *** [particle]1 left
[21:40] <dalek> rakudo/nom: 26e0b96 | tadzik++ | LHF.markdown:

[21:40] <dalek> rakudo/nom: Update LHF.markdown

[21:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/26e0b96769

[21:45] *** jevin left
[21:46] *** Psyche^ joined
[21:49] *** Patterner left
[21:49] *** Psyche^ is now known as Patterner

[22:01] <tadzik> http://search.cpan.org/~philip/Test-Spec-0.31/lib/Test/Spec.pm -- funny

[22:02] <masak> blog post! http://strangelyconsistent.org/blog/june-5-2011-guess-a-number

[22:04] <tadzik> nice :)

[22:06] <masak> up until I actually wrote the post, I had the random number generation as (rand * 100 + 1). old habits die hard :)

[22:07] <jnthn> :)

[22:08] <jnthn> masak++

[22:09] <tadzik> :)

[22:15] *** bitpart joined
[22:17] *** mj41 left
[22:31] * sorear wonders

[22:31] <sorear> How important a deal is it that eval is somewhat broken on 2.6.7?

[22:33] <masak> probably not more important than charging ahead with more features.

[22:34] <sorear> you think the features are important?

[22:34] <masak> yes. Niecza seems to be in that early growth phase still.

[22:34] <sorear> I've thought of features as the lazy way to improve stuff

[22:34] <sorear> ok

[22:34] <TimToady> +1 to those features that let me run rosettacode examples :)

[22:35] * sorear shelves mberends' 2.6.x test failures and goes back to eval/subset

[22:35] <masak> just an opinion. others may disagree and think that eval on 2.6.7 is very important for them.

[22:35] <sorear> 2.6.7 is only important because of lousy timing between Debian 6.0 and Mono 2.8.0

[22:41] *** bitpart left
[22:41] <TimToady> things I've wanted for RC: floor, log, enums, sorting on Pairs, s:g

[22:42] <masak> 'night, #perl6. dream of wonderful features in wonderful implementations.

[22:42] *** masak left
[22:44] <TimToady> and the sequence operator, several times...

[22:45] <sorear> hehehe,  except for pair sorting that's all lowish-hanging fruit now

[22:45] <sorear> I want to understand default sorting better

[22:45] <TimToady> don't we all...

[22:49] <mikemol> "I want to understand default sorting better." "Don't we all..." <-- Makes one wonder if a language risks gaining sentience.

[22:49] <mikemol> What's the skynet cost on changes to the default sorting?

[22:50] <sorear> o/ mikemol

[22:50] <sorear> you heard rosettacode, didn't you.

[22:50] <mikemol> Well, of course. :)

[22:50] <mikemol> Though a little while ago, someone pinged me on 'immolation'.

[22:50] <mikemol> (Elsewhere)

[22:51] <mikemol> mikemol -> m*mol -> mmol <- i*mmol*ation. *sigh*

[22:53] <sorear> clearly you need to highlight on «mmol»

[22:53] <sorear> some regex packages (do I need to posture here and call them inferior?) spell that \b, or \<\>

[22:54] <mikemol> I can probably remove the highlight. I no longer use this client to connect to anything where I use that as a username.

[22:58] <mikemol> Looking forward to seeing what niecza does, though I still have fantasy of writing an up-to-NQP implementation in C++.

[22:58] <mikemol> I really doubt it'll be a high enough priority to overtake other things on my plate, though.

[23:12] *** Ali_h joined
[23:20] *** zby_home left
[23:23] *** Mowah left
[23:56] *** dorlamm joined
[23:58] *** thou joined
