[00:05] *** cognominal left
[00:06] *** cognominal joined
[00:18] *** kaare_ left
[00:27] <lue> rakudo: class Present { has $!item; method look() { return $!item; };}; say Present.new(:item("sock")).look;

[00:27] <p6eval> rakudo eb6c4b: OUTPUT¬´Any()‚ê§¬ª

[00:28] <lue> I wonder what I'm doing wrong there... (is it not setting $!item like I think?)

[00:28] <tadzik> default .new doesn't set private attrs

[00:29] <lue> ah, ok.

[00:29] <tadzik> that's new in nom

[00:36] <lue> bless isn't cooperating. I think I'll just go to a pubic $.item (it's just part of an example for something entirely unrelated anyway)

[00:43] <Util> tadzik: Unsure what you mean. the `#` divider is below the two Perl 5 lines, and above the two Perl 6 code lines and one Perl 6 comment line.

[00:44] <tadzik> Util: oh, okay. I must have got some old version in RSS

[00:44] <tadzik> I have # before ( $x, $y ) .= reverse;

[00:45] <Util> tadzik: yes, I corrected it from a comment from japhb++ 

[00:45] <Util> For great freshness: http://perl6advent.wordpress.com/2011/12/23/day-23-idiomatic-perl-6/

[00:47] <tadzik> alrighty

[01:00] *** drbean left
[01:06] *** buubot_backup left
[01:06] *** drbean joined
[01:08] <lue> Would describing |$ as something that means "all possible arguments" in the context of  proto sub something(|$){*}  be correct?

[01:11] *** ksi left
[01:18] *** docdurdee joined
[01:19] <docdurdee> perl6: say 3;

[01:19] <p6eval> pugs b927740, rakudo eb6c4b, niecza v12-153-g7139c15: OUTPUT¬´3‚ê§¬ª

[01:22] *** shinobicl_ joined
[01:27] *** buubot_backup joined
[01:33] *** cognominal_ joined
[01:37] *** cognominal left
[01:42] *** docdurdee left
[01:51] <lue> There's a preview of my advent post available, if anyone's logged in and willing to look it over.

[01:52] *** benabik joined
[02:08] *** wolfman2000 joined
[02:12] *** cooper joined
[02:16] <Util> lue: Your advent post looks great, accurate and informative

[02:17] <Util> lue++

[02:18] <lue> thank you, just published:  https://perl6advent.wordpress.com/2011/12/24/day-24-subs-are-always-better-in-multi-ples/

[02:19] <lue> [ that last bit in the post would'nt've happened had I not learned of the official humorous answer from your post, Util :) ]

[02:20] <lue> s/\'nt/n\'t/

[02:20] *** leprevost joined
[02:24] <Util> :)

[02:25] *** shinobicl_ left
[02:28] * lue turns to ponder how long it would take to re-implement ‚òÉ‚òÑ for the holidays

[02:30] *** stepnem left
[02:30] *** Chillance left
[02:31] <sorear> interesting; of the test files niecza currently does not run at all, the longest is 468 lines

[02:31] <sorear> all the 500+ line test files are being run now

[02:32] <colomon> By plan, the longest niecza doesn't run is 200 tests.

[02:32] <colomon> there are only 12 files it doesn't run with 100 or more tests

[02:32] <sorear> yeah, well, there was a movement a while back to eliminate plans :[

[02:33] <colomon> and most of those are S05-modifier/perl5_*.t

[02:34] <colomon> S02-literals/listquote-whitespace.t # look further

[02:34] *** stepnem joined
[02:34] <colomon> array-shapes.t

[02:35] <colomon> int-unit.t

[02:36] <colomon> S19-command-line-options

[02:37] <colomon> okay, I just eyeball scanned all the plans, and those are the only funny guys that I don't know we're handling

[02:37] <colomon> I only saw one plan * left in the entire list

[02:39] <sorear> plan * is not longer valid

[02:39] <sorear> the way to do no_plan now is, just have done; at the end

[02:39] <sorear> a test file with done; does not need a plan

[02:40] * sorear could start on the release changelog, that might take a while ;)

[02:40] <colomon> you're kidding me.  that's like the worst of all possible worlds?

[02:40] <colomon> s/\?/!/

[02:41] <sorear> no.

[02:42] <colomon> ...actually, I guess I can easily tweak the LHF finder to look for that.

[02:43] <colomon> but I have to disinfect some eBay christmas toys first.

[02:45] <benabik> ‚Ä¶ disinfect?

[02:46] <colomon> lysol disinfecting wipes, applied to higglytown heroes

[02:46] <benabik> Oh.  Yes.  eBay + Children = disinfect plz

[02:46] * geekosaur 's immediate reaction to that was a thought that some "toys" one simply should not get via eBay

[02:47] *** hundskatt left
[02:49] <lue> I can't actually augment Perl6::Grammar in rakudo yet, can I? (Not even use MONKEY_TYPING worked)

[02:50] <sorear> Perl6::Grammar uses old regex, anything you write will use QRegex, interop is not possible

[02:50] <sorear> so no, even if you could add a method, modifying the grammar per se is impossibvle

[02:51] <colomon> The thing is, the higglytown heroes show went off the air a few years ago, so no more toys are being made.  my son got addicted watching DVDs from the library.  thus ebay hunts to find toys for him

[02:52] <colomon> okay, looks like there are about 40 files with no plan that we're not running atm

[02:55] <colomon> I can get to work on them, see what we can handle

[03:04] <colomon> niecza: constant foo = 42; say foo;

[03:04] <p6eval> niecza v12-153-g7139c15: OUTPUT¬´42‚ê§¬ª

[03:04] <colomon> niecza: constant foo = 42; say foo == 42

[03:04] <p6eval> niecza v12-153-g7139c15: OUTPUT¬´Bool::True‚ê§¬ª

[03:06] <colomon> that's not passing in constant.t .... :\

[03:18] <dalek> roast: 9548c68 | (Solomon Foster)++ | S04-declarations/constant.t:

[03:18] <dalek> roast: Fudge for niecza.

[03:18] <dalek> roast: review: https://github.com/perl6/roast/commit/9548c68d59

[03:18] <colomon> sorear: when you get a chance, look at the first couple of todo tests in that one ^^

[03:19] *** cognominal_ left
[03:20] *** cognominal joined
[03:24] <sorear> niecza: {  constant foo = 42; say foo == 42 ]

[03:24] <sorear> niecza: {  constant foo = 42; say foo == 42 }

[03:24] <p6eval> niecza v12-153-g7139c15: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Unable to parse block at /tmp/MlMSDksbaH line 1:‚ê§------> [32m{[33m‚èè[31m  constant foo = 42; say foo == 42 ][0m‚ê§Couldn't find final '}'; gave up at /tmp/MlMSDksbaH line 1:‚ê§------> [32m{  constant foo = 42; say foo == 42‚Ä¶

[03:24] <p6eval> niecza v12-153-g7139c15: OUTPUT¬´Bool::True‚ê§¬ª

[03:24] <sorear> colomon: was that the error you got?

[03:24] <sorear> wait, nvm

[03:24] <colomon> constant foo = 42;

[03:24] <colomon>     ok foo == 42 # this comes out false

[03:25] <sorear> niecza: use Test; {  constant foo = 42; ok foo == 42, "bar" }

[03:25] <p6eval> niecza v12-153-g7139c15: OUTPUT¬´ok 1 - bar‚ê§¬ª

[03:25] <sorear> niecza: use Test; {  constant foo = 42; ok foo == 42, "bar"; { foo = 3 } }

[03:25] <p6eval> niecza v12-153-g7139c15: OUTPUT¬´ok 1 - bar‚ê§Unhandled exception: assigning to readonly value‚ê§  at /tmp/s4Zs2kw9sT line 1 (ANON @ 2) ‚ê§  at /tmp/s4Zs2kw9sT line 1 (mainline @ 1) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 2498 (ANON @ 2) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line ‚Ä¶

[03:28] <colomon> sorear: you are seeing it at your end, too, right?

[03:28] <sorear> haven't tried

[03:29] <colomon> it's so weird, almost all the harder tests pass, but that first basic test fails

[03:40] *** Patterner left
[03:42] *** Psyche^ joined
[03:42] *** Psyche^ is now known as Patterner

[04:04] <dalek> niecza: e0216c6 | sorear++ | src/CClass.pm6:

[04:04] <dalek> niecza: Fiddle \w and \d to match the UTS18 definitions

[04:04] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e0216c6d10

[04:04] <sorear> niecza: { constant foo = 42; say foo; }; { constant foo = 5 } # colomon

[04:04] <p6eval> niecza v12-153-g7139c15: OUTPUT¬´5‚ê§¬ª

[04:06] <sorear> colomon: I'm calling the test wrong, since it tries to define two constants GLOBAL::foo (constants are "our" by default).  Still, LTA failure mode.

[04:07] <colomon> ooooo... so foo gets 5, eh?

[04:07] <sorear> yes

[04:07] <colomon> I'll fix the test

[04:13] <dalek> roast: 01a2c6d | (Solomon Foster)++ | S04-declarations/constant.t:

[04:13] <dalek> roast: Fix tests (constants are our, so you can't declare the same one twice) and unfudge.

[04:13] <dalek> roast: review: https://github.com/perl6/roast/commit/01a2c6d530

[04:14] <dalek> niecza: cf4faee | (Solomon Foster)++ | t/spectest.data:

[04:14] <dalek> niecza: Turn on S04-declarations/constant.t.

[04:14] <dalek> niecza: review: https://github.com/sorear/niecza/commit/cf4faee8fd

[04:15] *** benabik_ joined
[04:16] *** benabik left
[04:16] *** benabik_ is now known as benabik

[04:17] *** leprevost left
[04:17] *** leprevost joined
[04:19] *** thou left
[04:20] <colomon> sorear++

[04:23] <dalek> roast: 20ccb4a | (Solomon Foster)++ | S06-advanced/callsame.t:

[04:23] <dalek> roast: Fudged for niecza.

[04:23] <dalek> roast: review: https://github.com/perl6/roast/commit/20ccb4a0ef

[04:24] *** aindilis left
[04:28] *** bkolera joined
[04:28] <colomon> sorear: does niecza have "handles" delegation yet?

[04:32] *** silug_ joined
[04:32] <sorear> colomon: no

[04:35] *** silug left
[04:35] *** cognominal left
[04:36] <dalek> niecza: b3fda07 | sorear++ | / (5 files):

[04:36] <dalek> niecza: Fix \w handling, update <<>> to use new \w, add a bunch of predefined rules like <punct>

[04:36] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b3fda07868

[04:36] <colomon> sorear: don't suppose you could get Action method post_constraint running for Christmas?  ;)

[04:36] *** cognominal joined
[04:38] <sorear> niecza: sub foo($x where * > 0) { }

[04:38] <p6eval> niecza v12-154-ge0216c6: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Action method post_constraint not yet implemented at /tmp/rMIFf5Ja3q line 1:‚ê§------> [32msub foo($x where * > 0[33m‚èè[31m) { }[0m‚ê§‚ê§Unhandled exception: Unable to resolve method sorry in class Match‚ê§  at /home/p6eval/niec‚Ä¶

[04:38] <sorear> you mean that?

[04:39] <colomon> yes

[04:39] <colomon> it keeps coming up in these test files tonight.  :)

[04:46] *** drbean left
[04:50] *** cognominal left
[04:51] *** drbean joined
[04:52] *** cognominal joined
[04:55] *** lestrrat left
[04:56] *** lestrrat joined
[05:09] <sorear> rakudo: sub foo(Mu $x [ $y ]) { }; foo([ any(1,2,3) ])

[05:09] <p6eval> rakudo eb6c4b: OUTPUT¬´(timeout)maximum recursion depth exceeded‚ê§¬ª

[05:09] <sorear> thought so

[05:09] <sorear> worth filing a bug over?

[05:10] <colomon> I'm not sure I understand it?

[05:10] <colomon> rather, I'm sure I don't understand it

[05:10] <sorear> I'm reading Rakudo's binder and I noticed a case where the auto-threader could be made to recurse without limit

[05:10] <colomon> file a bug, I'd say

[05:11] <colomon> sorear++ 

[05:11] <colomon> afk # sleep

[05:11] <sorear> sleep well

[05:11] <sorear> rakudobug@ still?

[05:12] <sorear> sent.

[05:24] *** thou joined
[05:25] *** kaleem joined
[05:25] <moritz> Util: in p6, grep takes a smart-matcher

[05:25] <moritz> nom: say (0..10).grep(4|8)

[05:25] <p6eval> nom eb6c4b: OUTPUT¬´4 8‚ê§¬ª

[05:44] <moritz> and basically anything can serve as a smart-matcher

[05:49] <Util> moritz: thanks! I will re-read that part of the Spec in the morning. Midnight approacheth...

[05:53] *** kaleem left
[06:01] <moritz> Util++ # advent post

[06:01] <moritz> lue++ # advent post

[06:02] *** bkolera left
[06:06] <moritz> nom: say "\x[FFFE]"

[06:06] <p6eval> nom eb6c4b: OUTPUT¬´===SORRY!===‚ê§Invalid character for UTF-8 encoding‚ê§‚ê§¬ª

[06:24] <dalek> roast: afa5414 | moritz++ | S05-mass/properties-general.t:

[06:24] <dalek> roast: fudge properties-general.t again for rakudo

[06:24] <dalek> roast: review: https://github.com/perl6/roast/commit/afa5414270

[06:27] * sorear starts the process of turning sig_i and sig_r into proper objects

[06:32] <sorear> moritz: do you think nom might be right here?

[06:34] <moritz> sorear: I have no idea

[06:37] <geekosaur> I would say it's wrong, but that depends on your conceptual level

[06:37] <geekosaur> since it's a low-level "character" whose purpose is defining the interpretation of the rest of the character stream

[06:38] * sorear was under the impression that all values from 0 to 0x10FFFF would be legal

[06:38] <geekosaur> it can be argued that its proper place is whatever handles translating between internal and external encodings, and for it to be visible internally is an error

[06:39] <geekosaur> that's the thing.  it's *not* operable at that level, it's more like the surrogates used for encoding in utf16

[06:40] <sorear> geekosaur: how many BMP chars are guaranteed to stay Cn forever?

[06:40] <geekosaur> which are not really characters in the 0 - 0x10fff sense, but an artifact of how those characters are encoded

[06:40] <sorear> geekosaur: the old code was using "one past the 5.1 CJK UNIFIED IDEOGRAPHS block" as "Cn character".  Which...no.

[06:42] *** cognominal_ joined
[06:42] * geekosaur is not familiar with said code and isn't really talking about that level

[06:44] <geekosaur> IIRC the spec says that fffe is a reserved noncharacter which allows a program reading particular unicode encodings to determine the byte order used in the encoding and thereby its correct interpretation.  they are explicitly *not* actual characters, just reserved "slots"

[06:44] <sorear> that was my reasoning

[06:44] <sorear> fffe was a reserved slot, so the tests could use it as a noncharacter

[06:45] *** cognominal left
[06:46] *** kaare_ joined
[06:55] <sorear> hah, I had forgotten how many places I had duplicated the sig_i parsing logic :/

[07:04] *** thou left
[07:32] *** cognominal joined
[07:34] *** cognominal_ left
[07:36] *** bkolera joined
[08:21] <dalek> roast: 21b8e66 | moritz++ | S05-mass/properties-script.t:

[08:21] <dalek> roast: fudge properties-script.t again for rakudo

[08:21] <dalek> roast: review: https://github.com/perl6/roast/commit/21b8e66ef4

[08:21] <dalek> niecza: acc5e83 | sorear++ | / (2 files):

[08:21] <dalek> niecza: Factor Niecza::Benchmark out of perf/

[08:21] <dalek> niecza: 

[08:21] <dalek> niecza: Useful for timing one-liners

[08:21] <dalek> niecza: review: https://github.com/sorear/niecza/commit/acc5e83d92

[08:21] <dalek> niecza: 10ba66d | sorear++ | lib/ (6 files):

[08:21] <dalek> niecza: Turn Signatures into real objects

[08:21] <dalek> niecza: 

[08:21] <dalek> niecza: Instead of the old weird int[] and object[] thing.  Actually reduces code!

[08:21] <dalek> niecza: Should have no visible effects; preparation for some signature improvements,

[08:21] <dalek> niecza: like "where", sub-signatures, maybe even signature introspection.

[08:21] * sorear -> sleep

[08:21] <dalek> niecza: review: https://github.com/sorear/niecza/commit/10ba66d093

[08:23] *** molaf joined
[08:26] *** dsafjn348 joined
[08:37] *** cognominal left
[08:38] *** cognominal joined
[08:43] *** snearch joined
[08:53] <masak> oh! good morning, hushpuppies. :)

[08:54] <moritz> \o

[08:59] *** pkkm joined
[09:21] <dsafjn348> hi

[09:36] <kshannon> I need a bit of help cleaning up some monkey-see monkey-do copy and paste work I've done to fix Rakudo bug RT#53814. I made a copy of token term:sym<miscbad> from STD.pm6 and merged it into Perl6::Grammar as token nullterm (I tried to just copy it but couldn't get it to work)

[09:36] <kshannon> token nullterm {  {} <!{ $*QSIGIL }> [ || <?.infixish> <.panic: "Preceding context expects a term, but found infix instead"> || <?> ]

[09:37] <kshannon> }

[09:37] *** mj41 joined
[09:37] <kshannon> It compiles and passes stresstest (+long) 

[09:38] <kshannon> It also passes the TODO test in t/spec/S06-signature/optional.t for the bug.

[09:39] * moritz waits for the "but"

[09:40] <kshannon> Well,  I don't really know all the regex stuff yet,  so I'm just wondering if anyone can see any style issues with it.

[09:41] <moritz> well, the leading {} is probably not necessary right now, because it's just to limit LTM, and rakudo doesn't do that yet

[09:41] <moritz> but it doesn't hurt to keep it in there either

[09:42] <moritz> kshannon: but if it works, and comes from STD, it's fine to include it in rakudo's grammar

[09:46] <kshannon> Well it comes from STD, but as an entirely different rule,  essentialy as a fallback term which could never match but would give an error if matching an infixish would work.  It used CURSOR.suppose rather than a lookahead.

[09:53] <kshannon> I've added it into the nullterm instead which is used by nulltermish to possibly match nothing.  The comma operator has the :nexterm<nulltermish> property which is how it allows trailing commas.  We inherit token nullterm { <?> } from HLL::Grammar.  I think I've just ended up reducing the scope of the infixish lookahead to after infix:<,> which is good enough for the bug but won't give the nice error message which STD (and Niecza) give for any two consecutive

[10:00] *** dsafjn348 left
[10:10] *** mj41 left
[10:22] <tadzik> hello #perl6

[10:23] <tadzik> anyone with a minute in handy and a zavolaj commit bit can update its README and possibly Makefile to not run tests? I have cookies

[10:23] *** nebuchadnezzar left
[10:23] * tadzik bbs

[10:24] <tadzik> I can do it in 30-60 as well

[10:25] *** nebuchadnezzar joined
[10:30] <moritz> hugme: add tadzik to zavolaj

[10:30] <hugme> moritz: You need to register with freenode first

[10:30] <moritz> hugme: add tadzik to zavolaj

[10:30] <hugme> moritz: You need to register with freenode first

[10:31] *** hugme left
[10:31] *** hugme joined
[10:31] *** ChanServ sets mode: +v hugme

[10:31] <moritz> hugme: add tadzik to zavolaj

[10:31] <hugme> moritz: You need to register with freenode first

[10:31] * moritz swears loudly

[10:31] <moritz> why did it work yesterday, but not today?

[10:39] *** donri joined
[10:57] *** mucker joined
[10:59] <masak> API change somewhere?

[11:02] *** mucker left
[11:06] <moritz> there was no notification from freenode

[11:09] *** snearch left
[11:26] <tadzik> moritz: I'm added :)

[11:26] <tadzik> I was just afk, will poke it in a while

[11:28] *** tokuhirom joined
[11:34] <tadzik> Incorrect pre-compiled version of <unknown> loaded

[11:34] <tadzik> -_-

[11:39] <tadzik> I'll just leave that to jnthn :)

[11:46] *** pmurias joined
[11:48] *** abercrombie left
[11:49] *** cognominal_ joined
[11:51] *** mishin joined
[11:51] *** mj41 joined
[11:52] *** cognominal left
[11:57] *** fsergot joined
[11:58] *** risou_awy is now known as risou

[12:01] *** MayDaniel joined
[12:07] *** hundskatt joined
[12:10] *** drbean left
[12:11] *** mj41 left
[12:13] <masak> lue: "What has to be different between these subs is their signature, or list of arguments." -- arguments are on the caller side, parameters are on the callee side.

[12:13] * masak fixes

[12:14] <masak> lue: it took me quite a while to get used to that distinction, too ;)

[12:17] *** drbean joined
[12:17] <masak> I fail to see why lue's proto open was needed in the blog post.

[12:18] <masak> also, if I may grumble a bit, I'm not sure that post ends on the most PR-tactical of notes.

[12:18] <masak> (we use the 24th post to tell the world "guess [Perl 6] isn't [completed]"? huh.)

[12:21] *** pkkm_ joined
[12:23] *** pkkm left
[12:33] *** mkramer joined
[12:33] *** mkramer left
[12:45] <kshannon> Ok,  refactored to give error message for all consecutive infixes: https://gist.github.com/1517254

[12:48] <moritz> kshannon: that looks good; would you care to submit that as a pull request on github?

[12:48] <kshannon> The last thing I'd like to do with this is include the offending infix in the error mesaage like the original in STD did (and Niecza does too),  but I'm having troubles.

[12:49] <kshannon>  Fails to parse: <?before <infixish> <.panic: "Preceding context expects a term, but found infix " ~ $<infixish>.Str ~ " instead"> >

[12:49] <kshannon> If I try to use a code block instead,  it fails to find the end of the block :(

[12:49] <moritz> kshannon: that's a known limitation in the grammar engine

[12:50] <kshannon> What is the limitation?

[12:50] <moritz> that it's hard to include the content of variables in error messages

[12:50] <moritz> it's in nqp, in which Perl6::Grammar is written

[12:53] *** fglock joined
[12:53] <pmurias> fglock: hi

[12:53] <fglock> pmurias: hi!

[12:53] <fglock> I just released perlito #8

[12:54] <moritz> fglock++

[12:56] * pmurias just saw that perlito now also compiles perl5 to javascript

[12:57] <fglock> yes, the original idea was a perl5 that could be embedded in a perl6 compiler

[12:58] <fglock> but I found it better to write the new perl5 compiler in perl5

[12:58] <fglock> so perl5 people can contribute more easily

[12:58] <fglock> also it makes the bootstrap more interesting

[12:59] <fglock> it can still be embedded in a perl6 compiler: just add a perl6 backend

[13:03] *** drbean left
[13:04] *** bluescreen10 joined
[13:10] *** drbean joined
[13:10] <pmurias> fglock: it's already bootstraped?

[13:13] <fglock> yes, it is

[13:14] *** mishin left
[13:15] <fglock> it contains some non-perl5 extensions, which I'm cleaning up (these make it easier to write the compiler)

[13:16] *** am0c joined
[13:16] <pmurias> and how are you planning to deal with Perl6 rules being used for parsing?

[13:16] <pmurias> add them as a CPAN module to perl5? ;)

[13:17] <fglock> something like: *myrule = eval Rule->compile( "..." )

[13:17] <fglock> as in PCR

[13:18] <fglock> Pugs::Compiler::Rule

[13:21] <pmurias> the alternative would be to use Devel::Declare to add the token keyword to real p5

[13:23] <fglock> I think it can be ignored for now, because there is a perl5 backend which "desugars" the extensions

[13:24] <fglock> but all other extensions should be cleaned up

[13:25] *** bluescreen10 left
[13:32] <fglock> re Devel::Declare, I can only support pure-perl5 modules

[13:33] <masak> fglock++ # perlito

[13:34] <masak> fglock: I've been toying with the idea of compiling some Perl 6 code to one of the many JS web graphics libraries out there (such as Paper.js), and using Perlito for that. haven't attempted it yet, though.

[13:35] *** pkkm_ is now known as pkkm

[13:36] <fglock> masak: I've tried it with titanium - http://www.appcelerator.com/products/titanium-mobile-application-development/

[13:37] <fglock> node.js also works, you only need to tweak the missing runtime stuff

[13:37] <masak> ooh

[13:37] <masak> sounds eminently doable, then.

[13:39] *** Guest91318 left
[13:40] <fglock> titanium is particularly difficult because it contains a syntax checker doesn't like automatically generated javascript

[13:40] <fglock> *that* doesn't

[13:40] <masak> sounds odd.

[13:41] <masak> or rather, sounds like a not-particularly-good syntax checker, then.

[13:41] *** bkolera left
[13:44] <moritz> somehow precompilation is rather busted

[13:45] <moritz> when I run panda from outside the panda dir, I get "Incorrect pre-compiled version of /home/moritz/p6/panda/ext/JSON/Tiny.pm loaded"

[13:45] <moritz> from inside the panda dir, I get "Method 'parse' not found for invocant of class 'Signature' in block <anon> at /home/moritz/.perl6/bin/panda:12 in sub from-json at lib/JSON/Tiny.pm:50

[13:45] <moritz> from-json calls JSON::Tiny::Grammar.parse(...)

[13:46] <moritz> so, JSON::Tiny::Grammar ends up as Signature? wtf?

[13:50] <masak> moritz: consider submitting those findings as an RT ticket.

[13:52] <masak> using Titanium to build nontrivial Perl 6 apps that run on Android or iPhone would be *awesome*.

[13:58] *** pkkm left
[14:00] <pmurias> fglock: what javascript implementation does titanium use underneath?

[14:01] <fglock> hmm - no idea

[14:03] <fglock> this was my test case for titanium:

[14:03] <fglock> http://nopaste.info/22d897c4fd.html

[14:03] <fglock> the Titanium object was hacked in the emitted js code

[14:07] *** tokuhirom left
[14:07] <pmurias> fglock: it runs on your mobile phone?

[14:08] * pmurias only has a symbian phone

[14:11] <fglock> no, this was something nferraz++ was testing

[14:27] <masak> it's something like that I'd like to try out, yes.

[14:28] <flussence_> omg! https://github.com/flussence/specgraphs/raw/master/impls.png

[14:37] <tadzik> flussence_: nice. Does it get autocommited or what?

[14:38] <flussence_> nah, I do most of it manually. I'm not all that confident in my ability to write automatic things interacting with remote stuff which don't go horribly wrong :)

[14:39] <tadzik> :)

[14:40] <tadzik> perldoc perlsyn | perl -ne 's/^.*?"|\\.*$//g,print if/1\.\.15/'

[14:40] <tadzik> odyniec++

[14:41] <masak> wow.

[14:42] <arnsholt> Nifty =D

[14:45] <masak> flussence_: that graph represents how I feel about Niecza. quite capable and fast approaching the level of Rakudo.

[14:48] <masak> oh, that perlsyn thing was less magical than I thought. there's the actual substring "Merry Christmas" in perldoc perlsyn.

[14:48] <masak> still, creative :)

[15:04] *** am0c left
[15:18] *** x3nU joined
[15:23] <dalek> roast: 0dee370 | (Solomon Foster)++ | S32-list/map.t:

[15:23] <dalek> roast: Fudge for niecza.

[15:23] <dalek> roast: review: https://github.com/perl6/roast/commit/0dee370e40

[15:27] <dalek> roast: 03b1456 | (Solomon Foster)++ | S32-list/grep.t:

[15:27] <dalek> roast: Fudge for niecza.

[15:27] <dalek> roast: review: https://github.com/perl6/roast/commit/03b1456a23

[15:27] *** cognominal_ left
[15:29] *** cognominal joined
[15:40] <dalek> niecza: 1075f3e | (Solomon Foster)++ | lib/CORE.setting:

[15:40] <dalek> niecza: Enable Whatever argument to roll, add sub roll.

[15:40] <dalek> niecza: review: https://github.com/sorear/niecza/commit/1075f3e0ba

[15:40] <dalek> niecza: a1c4b26 | (Solomon Foster)++ | t/spectest.data:

[15:40] <dalek> niecza: Turn on S32-list's grep.t, map.t, and roll.t.

[15:40] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a1c4b26060

[15:54] <colomon> niecza: say [min] 2, 4, 6, 10

[15:54] <p6eval> niecza v12-158-g10ba66d: OUTPUT¬´Unhandled exception: Excess arguments to infix:<min>, used 2 of 4 positionals‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 0 (infix:<min> @ 0) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 1511 (reduceop @ 8) ‚ê§  at /tmp/zSeumtDVPB line 1 (mainline @ 1‚Ä¶

[15:59] <colomon> niecza: say [+] 2, 4, 6, 10

[15:59] <p6eval> niecza v12-158-g10ba66d: OUTPUT¬´22‚ê§¬ª

[16:19] *** fsergot left
[16:27] *** cognominal left
[16:28] *** cognominal joined
[16:41] <TimToady> if we can get away with it, I'd like to see fffe and surrogates be valid at a codepoint level, but not at a grapheme level

[16:41] <phenny> TimToady: 19 Dec 10:52Z <moritz> ask TimToady if he wants to the 24th post for the advent calendar

[16:41] <phenny> TimToady: 19 Dec 10:53Z <moritz> tell TimToady erm, missing verb. Insert 'write' where appropriate :-)

[16:41] <TimToady> er, no, I don't :)

[16:42] <TimToady> only just starting to get my brane back after the zombies munched it overmuch...

[16:42] <flussence_> .oO( and lue++ might object to having his day 24 post replaced :)

[16:43] <flussence_> .oO( unless it's declared `multi post` )

[16:54] *** leprevost left
[17:11] *** JimmyZ joined
[17:11] *** mkramer joined
[17:11] *** mkramer left
[17:22] <JimmyZ> Merry Christmas, #perl6

[17:22] *** MayDaniel left
[17:29] *** MayDaniel joined
[17:32] *** drbean left
[17:38] *** drbean joined
[17:39] *** Ingis left
[17:54] *** fglock left
[18:00] *** drbean left
[18:03] <masak> merry Midwinter Wish-it-were-summer festivities, JimmyZ!

[18:05] <JimmyZ> well, here is summerish. I'm in Shenzhen

[18:05] <JimmyZ> ;)

[18:05] <masak> :D

[18:05] <masak> JimmyZ: I was in HK a week ago. it was alright, too.

[18:06] *** drbean joined
[18:06] <JimmyZ> masak: Happy vacation

[18:06] <masak> yeah, it was a happy vacation. ;)

[18:08] * JimmyZ hadn't been in other countries

[18:08] <masak> it was interesting getting a sense of Chinese culture.

[18:08] <masak> JimmyZ: you consider HK to be another country? :)

[18:08] <JimmyZ> HK

[18:08] <masak> È¶ôÊ∏Ø

[18:09] <JimmyZ> I thought USA, Maybe it's too late here

[18:09] <JimmyZ> 2:00 AM

[18:09] <masak> ah :)

[18:09] <masak> well, US has that kind of two-letter combinations for states, so it's a good guess, I guess.

[18:09] <JimmyZ> yeah

[18:10] <JimmyZ> HK looks like US to me 

[18:11] <masak> there's a HI for Hawaii; that seems to be the closest one.

[18:11] <[Coke]> https://gist.github.com/1476841 - niecza now at 75.29%. up from 49.67% 10 days ago.

[18:11] <[Coke]> colomon++ sorear++

[18:11] <colomon> [Coke]: something's wrong with those numbers

[18:11] <colomon> niecza is not getting 1264 failures

[18:12] <JimmyZ> I still more like rakudo :)

[18:13] <colomon> [Coke]: I'm pretty sure we actually hit 80% yesterday

[18:18] <colomon> I did a run with 14814 passing tests

[18:18] <[Coke]> colomon: did you commit your fix to test_summary in spec?

[18:18] <colomon> yes

[18:18] <[Coke]> hurm.

[18:18] <colomon> and even without it, we were showing ~300 failures, not ~1200

[18:19] * [Coke] double checks.

[18:21] <[Coke]> perhaps I'm using my "limited" perl6 for that (restricts memory & time)

[18:21] <[Coke]> yup, that's part of it, at least. rerunning.

[18:23] <dalek> niecza: 34200c9 | coke++ | t/spectest.data:

[18:23] <dalek> niecza: run S03-smartmatch/any-hash.t

[18:23] <dalek> niecza: review: https://github.com/sorear/niecza/commit/34200c9752

[18:24] <flussence_> [Coke]: what time limit are you using on that? 120s seems to work for me, while 30s caused a few thousand test fails

[18:24] <flussence_> er, on rakudo

[18:24] <[Coke]> #exec "ulimit -t 45; ulimit -v 256072; nice -20 mono ./run/Niecza.exe @ARGV";

[18:25] <[Coke]> I had cut the memory down quite a bit after juerd's recent request.

[18:25] <[Coke]> (doing a run now with no limits)

[18:26] <flussence_> you probably want -m instead of -v...

[18:32] <[Coke]> flussence_: taken directly from tools/rakudo/*limit*

[18:32] <[Coke]> er, rakudo's tools/*limit*, that is.

[18:34] *** JimmyZ left
[18:37] <[Coke]> https://gist.github.com/1476841 - niecza now at 82.12%, up from 49.67%, in 10 days. colomon++ for requesting a recount. ;)

[18:39] <flussence_> oh, I just remembered I need to do some recounting of my own...

[18:42] <[Coke]> nom: say 18376-18222, 15090-9050

[18:42] <p6eval> nom eb6c4b: OUTPUT¬´1546040‚ê§¬ª

[18:42] <[Coke]> nom: say 18376-18222, ":", 15090-9050

[18:42] <p6eval> nom eb6c4b: OUTPUT¬´154:6040‚ê§¬ª

[18:42] <[Coke]> (not bad, 6040 more passing tests, that's 604 a day. ;)

[18:43] <sorear> good * #perl6

[18:44] * sorear wonders why we don't see fglock around anymore

[18:44] <[Coke]> sorear: o/

[18:44] <[Coke]> aloha: seen fglock

[18:44] <aloha> [Coke]: fglock was last seen in #perl6 4 hours 33 mins ago saying "no, this was something nferraz++ was testing".

[18:53] *** Ingis joined
[18:53] <dalek> niecza: e919c7b | coke++ | t/spectest.data:

[18:53] <dalek> niecza: re-enable S04-phasers/begin.t

[18:53] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e919c7b500

[19:09] <pmurias> sorear: he can't irc from work anymore, so he can be here as often as he used to

[19:10] *** rsimoes joined
[19:12] <[Coke]> niecza: list(4)

[19:12] <p6eval> niecza v12-162-ge919c7b: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Undeclared routine:‚ê§    'list' used at line 1‚ê§‚ê§Unhandled exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 880 (die @ 2) ‚ê§  at /home/p6eval/niecza/src/STD.pm6 line 1143 (P6.comp_unit @ 32) ‚ê§  at /hom‚Ä¶

[19:12] <[Coke]> nom: list(4)

[19:12] <p6eval> nom eb6c4b:  ( no output )

[19:12] <[Coke]> nom: list(4).say

[19:12] <p6eval> nom eb6c4b: OUTPUT¬´4‚ê§¬ª

[19:12] <[Coke]> nom: list(4).HAT

[19:12] <p6eval> nom eb6c4b: OUTPUT¬´Method 'HAT' not found for invocant of class 'List'‚ê§  in block <anon> at /tmp/1C9adP8GYz:1‚ê§  in <anon> at /tmp/1C9adP8GYz:1‚ê§¬ª

[19:12] <[Coke]> nom: list(4).WHAT

[19:12] <p6eval> nom eb6c4b:  ( no output )

[19:12] * [Coke] gives up. ;)

[19:15] <flussence_> I just noticed the PHP advent calendar... day 16's a long essay complaining about the language and detailing why it can't be fixed. Ouch.

[19:21] *** molaf_ joined
[19:24] *** molaf left
[19:25] *** fglock joined
[19:28] <[Coke]> niezca: say 33 ~ Failure

[19:28] <[Coke]> niezca: say 33 ~~ Failure

[19:28] <[Coke]> niecza: say 33 ~~ Failure

[19:29] <p6eval> niecza v12-162-ge919c7b: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Undeclared name:‚ê§       'Failure' used at line 1‚ê§‚ê§Unhandled exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 880 (die @ 2) ‚ê§  at /home/p6eval/niecza/src/STD.pm6 line 1143 (P6.comp_unit @ 32) ‚ê§  at /hom‚Ä¶

[19:29] <fglock> sorear: I'm hacking offline - except when it's holidays :)

[19:30] <pmurias> fglock: should i seperate Runtime.js into Runtime.js and Runtime/D8.js so we can have Runtime/Node.js?

[19:32] <fglock> I think it's a good idea - but only the i/o subs are different, so maybe keep the generic Runtime.js and add the extra backend-specific ones

[19:34] <dalek> roast: 004612d | coke++ | S32-array/pop.t:

[19:34] <dalek> roast: niecza fudge

[19:34] <dalek> roast: review: https://github.com/perl6/roast/commit/004612d8f1

[19:34] <dalek> niecza: 4ffb3b3 | coke++ | t/spectest.data:

[19:34] <dalek> niecza: run S32-array/pop.t

[19:34] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4ffb3b3ed5

[19:34] <pmurias> fglock: yes, that's what i want to do

[19:34] <pmurias> fglock: Runtime/D8.js would contain the d8 specific io part

[19:37] <sorear> pmurias: ah, that makes sense :|

[19:37] <sorear> o/ fglock

[19:37] *** Trashlord left
[19:37] <fglock> sorear: hi \o/

[19:38] <sorear> how does perlito do on spectests?

[19:39] <fglock> sorear: it... doesn't - I haven't tried the spectests for a while

[19:39] <pmurias> fglock: src5/lib/Perlito5/Javascript/Runtime.js is editable?

[19:39] <sorear> how close to feature-complete is it?

[19:39] <fglock> pmurias: yes, everything in src/ is editable

[19:39] <sorear> hah, this is a large repository

[19:40] <pmurias> fglock: should i remove the "do not edit warning" from that?

[19:41] * sorear is trying to figure out what the relationship between niecza and perlito is/should be

[19:41] <fglock> sorear: hmm - let me think about it 

[19:42] <fglock> pmurias: ah, yes - that message would be copied to the compiled files, but it is no longer needed

[19:46] <fglock> sorear: perlito goal is to have as much as possible perl6 source code, with minimal backend-specific parts

[19:47] <fglock> also as many features as possible implemented as extensions, with a small core

[19:48] <fglock> the small core allows it to be executed in the browser and small devices

[19:48] <fglock> I understand that niecza is also retargetable, right?

[19:48] <fglock> up to some point

[19:52] <pmurias> fglock: it is retargetable, backends are much more complex then perlito ones, but allow more features

[19:57] <fglock> does niecza embed perl5 for 'use v5'?

[19:58] <fglock> alternately, it could embed a perlito5

[19:59] <pmurias> it doesn't support 'use v5' yet

[19:59] <[Coke]> sorear: where would one define Array's delete() method?

[19:59] <pmurias> fglock: i implemented some basic eval(:language<perl5>,...) support using an embedded perl5

[20:02] <pmurias> fglock: how do we distinguish if perlito5 should emit code for d8 or node?

[20:02] *** molaf_ left
[20:03] <fglock> pmurias: how about -Cjs-node / -Cjs-v8 options in perlito.pl

[20:03] <fglock> perlito5.pl

[20:04] <fglock> sorear: I'd like to see more code shared between implementations, but that's really really difficult to achieve

[20:05] <fglock> the architectures are pretty different

[20:07] <[Coke]> is perlito running any spec tests?

[20:08] <fglock> Coke: v6.pm used to pass over 50% of the spec tests, but it was unmaintainable

[20:08] <fglock> perlito now uses a small set of tests,

[20:09] <fglock> these tests are features required for bootstrapping

[20:09] <pmurias> fglock: js-node and js-d8? node also uses v8 internally

[20:09] <fglock> running the bootstrap is the ultimate test for perlito

[20:10] <fglock> pmurias: hmm - the default now is d8; maybe just add js-node

[20:11] <fglock> Coke: it is not optimal, but it keeps things simple

[20:11] *** drbean left
[20:11] *** mkramer joined
[20:12] <pmurias> fglock: ok

[20:13] * pmurias doesn't like node very much

[20:13] <fglock> pmurias: don't do it then :P

[20:14] <fglock> it should be fun

[20:14] *** mkramer1 joined
[20:16] *** pothos left
[20:16] *** y3llow left
[20:16] <sorear> [Coke]: in the Array class?   you mean for @arr.delete($ix) ?

[20:17] *** mkramer left
[20:17] *** drbean joined
[20:18] *** y3llow joined
[20:18] *** pothos joined
[20:20] *** y3llow left
[20:20] *** y3llow joined
[20:21] *** pothos left
[20:21] *** pothos joined
[20:22] *** y3llow left
[20:22] *** y3llow joined
[20:23] <[Coke]> aye.

[20:24] <fglock> hmm - maybe runtime-loadable modules is the key to keep perlito core simple - it only needs some way to map the missing features to modules

[20:25] <moritz> \o

[20:25] * moritz wishes everybody of the appropriate time zones a happy christmas eve

[20:26] <fglock> moritz: happy christmas there

[20:26] <fglock> perlito5.js is 1.2Mbytes, that's too big already

[20:32] <pmurias> fglock: is it possible to sanely split up the compiler into parts? I can't see how that would be done for the parser?

[20:35] <pmurias> fglock: both minifiying the js and emitting more consise js should greatly reduce the size of the executable

[20:35] <pmurias> s/executable/js file/

[20:36] <pmurias> fglock: what do we need CallSub for?

[20:36] <fglock> yes, it is possible to split up

[20:36] <fglock> ah, that's a js workaround

[20:36] <fglock> because in js you can't tell a method from a sub, 

[20:37] <fglock> if the first arg is a CallSub then you know it's a sub - otherwise, it needs to add the object to @_

[20:38] <fglock> method-call is the default

[20:39] *** cognominal_ joined
[20:40] <fglock> re split up: consider something like - <rule> { require Stuff } <parse_more> 

[20:42] *** cognominal left
[20:43] <fglock> the problem is how to get the "right" granularity - and if the compiler itself requires some feature, then splitting doesn't save anything

[20:44] * moritz -> sleep again

[20:47] <pmurias> fglock: i think it would make sense for more complex features like Moose support etc.

[20:47] <fglock> yes - but I'm thinking about perlito6, where all features are "core"

[20:47] <[Coke]> sorear: also need Array.exists

[20:48] <pmurias> fglock: perlito6 and perlito5 will have seperate backends?

[20:49] *** snearch joined
[20:51] <fglock> they have separate backends now, because it is easier to implement the small differences

[20:52] <fglock> keeping everything together can be confusing - but this might change later

[20:53] *** cognominal_ left
[20:55] *** cognominal joined
[20:57] *** pmurias left
[20:59] *** Trashlord joined
[21:00] *** fridim_ joined
[21:09] *** benabik left
[21:12] *** fglock left
[21:13] *** benabik joined
[21:22] *** fridim_ left
[21:22] <[Coke]> niecza: say "3".exp

[21:22] <p6eval> niecza v12-163-g4ffb3b3: OUTPUT¬´20.085536923187668‚ê§¬ª

[21:22] <[Coke]> niecza: say 3.exp

[21:22] <p6eval> niecza v12-163-g4ffb3b3: OUTPUT¬´20.085536923187668‚ê§¬ª

[21:24] *** bluescreen10 joined
[21:24] <[Coke]> nom: say 17.roots(4)

[21:24] <p6eval> nom eb6c4b: OUTPUT¬´2.03054318486893 + 0i 3.6446153367886e-09 + 2.03054318486893i -2.03054318486893 + 7.28923067357719e-09i -1.09338460103658e-08 - 2.03054318486893i‚ê§¬ª

[21:25] <[Coke]> nom: say +(17.roots(4))

[21:25] <p6eval> nom eb6c4b: OUTPUT¬´4‚ê§¬ª

[21:33] *** MayDaniel left
[21:36] * [Coke] thinks S32-num/cool-num.t has some suspicious "floar" tests.

[21:36] <dalek> roast: badeafc | coke++ | S32-num/cool-num.t:

[21:36] <dalek> roast: fix plan

[21:36] <dalek> roast: review: https://github.com/perl6/roast/commit/badeafc72c

[21:36] <dalek> roast: c03f823 | coke++ | S32- (2 files):

[21:36] <dalek> roast: niecza fudge

[21:36] <dalek> roast: review: https://github.com/perl6/roast/commit/c03f823ec5

[21:36] *** drbean left
[21:37] <dalek> niecza: 8275ae4 | coke++ | t/spectest.data:

[21:37] <dalek> niecza: run S32-array/shift.t, S32-num/cool-num.t

[21:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8275ae4af9

[21:43] *** drbean joined
[21:45] <dalek> roast: ee8a33c | coke++ | S32-hash/kv.t:

[21:45] <dalek> roast: niecza fudge

[21:45] <dalek> roast: review: https://github.com/perl6/roast/commit/ee8a33cabb

[21:45] <dalek> niecza: e0913f8 | coke++ | t/spectest.data:

[21:45] <dalek> niecza: run S32-hash/kv.t

[21:45] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e0913f82c8

[21:50] *** DarthGandalf left
[21:54] *** sudokode left
[21:54] *** integral left
[21:56] *** sudokode joined
[21:57] *** jrockway left
[21:58] *** mikemol left
[21:58] *** mikemol joined
[22:00] *** DarthGandalf joined
[22:00] *** integral joined
[22:00] *** integral left
[22:00] *** integral joined
[22:15] *** jrockway joined
[22:31] *** mkramer joined
[22:31] *** mkramer1 left
[22:31] *** MayDaniel joined
[22:33] *** ksi joined
[22:40] *** mkramer left
[22:53] *** PacoLinux_ joined
[22:55] *** mkramer joined
[23:00] *** mkramer left
[23:07] *** kaare_ left
[23:08] *** fridim_ joined
[23:12] *** packetknife joined
[23:17] *** PacoLinux_ left
[23:29] *** mkramer joined
[23:31] *** mkramer left
[23:31] *** mkramer1 joined
[23:33] *** Mowah left
[23:44] *** Trashlord left
[23:45] *** ponbiki joined
[23:47] *** MayDaniel left
[23:47] *** mkramer1 left
[23:50] *** mkramer joined
[23:51] *** thou joined
[23:51] *** mkramer left
[23:51] *** mkramer joined
[23:56] *** bluescreen10 left
