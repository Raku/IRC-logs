[00:02] *** mkramer1 left
[00:03] <dalek> modules.perl6.org: 38300ab | snarkyboojum++ | web/ (4 files):

[00:03] <dalek> modules.perl6.org: Fix camelia icon for IE

[00:03] <dalek> modules.perl6.org: 

[00:03] <dalek> modules.perl6.org: IE doesn't seem to be able to render .ico files. Create a local

[00:03] <dalek> modules.perl6.org: png version of the camelia icon.

[00:03] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/38300abd4b

[00:04] *** hanekomu_ joined
[00:04] *** hanekomu left
[00:07] *** hanekomu_ left
[00:09] *** awwaiid_ joined
[00:10] <dalek> modules.perl6.org: fa83aaf | snarkyboojum++ | web/ (2 files):

[00:10] <dalek> modules.perl6.org: Use a better image filename

[00:10] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/fa83aaf95f

[00:15] <dalek> niecza: 9347367 | sorear++ | FETCH_URL:

[00:15] <dalek> niecza: Update bootstrap for recompilation fixes

[00:15] <dalek> niecza: review: https://github.com/sorear/niecza/commit/9347367b7f

[00:16] <sorear> snarkyboojum: that is so ironic... .ico is a Windows-native format and IE was the first browser to render them

[00:16] <snarkyboojum> sorear: weirdness.. doesn't render in HTML that I can see :|

[00:17] *** mkramer joined
[00:17] *** dorlamm left
[00:17] <snarkyboojum> sorear: obviously renders favicon.ico ok...

[00:23] *** hercynium left
[00:23] *** pmurias left
[00:25] <snarkyboojum> I suspect it was probably working, but was being blocked through the proxy I was using to check it (stupid corporate firewalls). Ugh.

[00:29] *** plobsing joined
[00:38] *** cosimo joined
[00:40] <snarkyboojum> phenny: tell moritz_, whatever process copies files from the modules.perl6.org github repo to the web server needs to be updated to include two additional images web/proto.png and web/camelia.png :|

[00:40] <phenny> snarkyboojum: I'll pass that on when moritz_ is around.

[00:40] <snarkyboojum> ok I'm going to stop breaking stuff now ;)

[00:53] <Tene> Hmm.  I wonder why IO.dir doesn't return IO objects...

[00:56] <flussence> well, you could do dir».IO ...

[00:57] <Tene> Yeah, I guess.  It just surprised me.

[00:57] <diakopter> niecza: say 12

[00:57] <p6eval> niecza v1-149-g56c80b0: OUTPUT«12␤»

[00:57] <Tene> IO could use a nicer .Str, too

[01:01] *** QinGW joined
[01:01] *** klunky left
[01:03] *** dju left
[01:03] *** dju joined
[01:07] *** sftp left
[01:08] <Tene> flussence: not quite, actually, as the strings returned don't have path information

[01:08] <Tene> rakudo: dir('/tmp')>>.IO>>.created

[01:08] <p6eval> rakudo 388eed: OUTPUT«Operation not permitted in safe mode␤  in 'Safe::forbidden' at line 2:/tmp/rFAkqEjEg7␤  in main program body at line 22:/tmp/rFAkqEjEg7␤»

[01:10] *** sftp joined
[01:11] *** drbean joined
[01:16] *** [Coke] left
[01:19] <dalek> niecza: e2d1ed2 | sorear++ | Makefile:

[01:19] <dalek> niecza: Write VERSION file

[01:19] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e2d1ed2065

[01:20] *** QinGW left
[01:21] *** QinGW joined
[01:25] <sorear> I need some sort of way for people to give input on long-term priorities

[01:25] <sorear> MMD?  Lexotic controls?  Parallelism?  etc

[01:27] *** [Coke] joined
[01:27] <snarkyboojum> MMD!

[01:32] <snarkyboojum> sorear: and slangs! :D

[01:36] *** kst left
[01:36] *** kst joined
[01:36] <snarkyboojum> sorear: is there something like a github hosted wiki you could use?

[01:40] *** QinGW left
[01:42] *** QinGW joined
[01:42] *** lichtkind_ left
[01:50] <diakopter> sorear: I suggest fleshing out the various phasers, if they're not already

[01:52] *** clkao joined
[02:00] *** QinGW left
[02:01] *** satyavvd joined
[02:01] *** QinGW joined
[02:04] *** noganex left
[02:06] *** noganex joined
[02:25] *** mtk left
[02:26] *** pencilk joined
[02:29] <[Coke]> does "needs tests" still mean "assign to moritz" ?

[02:31] <coldhead> hahaha

[02:31] *** mtk joined
[02:37] *** cafesofie joined
[02:41] <colomon> not at the moment... he has a lot on his mind.  :)

[02:41] <snarkyboojum> the perl 6 spec could use some pretty pictures :P

[02:43] * snarkyboojum hopes that's deemed heretical :P

[02:43] <snarkyboojum> oops *not* deemed...

[02:45] <snarkyboojum> colomon: enjoyed your last post explaining your stack machine in p1 :D

[02:45] <colomon> snarkyboojum: thanks.

[02:45] <colomon> I love stack machines.  :)

[02:46] <snarkyboojum> colomon: that came across too :)

[02:51] *** mkramer1 joined
[02:52] *** mkramer left
[02:54] *** lopaway is now known as lopnor

[02:54] <snarkyboojum> I wonder if, generally, this "right of reply" will influence masak++'s decision at all

[02:55] *** mkramer joined
[02:55] *** mkramer1 left
[03:01] *** mkramer1 joined
[03:01] *** mkramer1 left
[03:01] *** mkramer left
[03:03] *** mkramer joined
[03:03] *** mberends left
[03:05] *** plobsing_ joined
[03:05] <colomon> snarkyboojum: I don't think it should with that script.  I mean, mine is pretty clearly #4.  Maybe #5 if you're being mean.  I think it's interesting and cute code, but it's clearly not a good solution to the problem.

[03:08] *** plobsing left
[03:08] <snarkyboojum> colomon: sure, I guess I meant in the final analysis, for an arbitrary definition of "final" :)

[03:08] <colomon> On the other hand, p2 is going to be interesting.  

[03:11] <snarkyboojum> colomon: aye, at least a week of enjoyable analysis/reading ahead :)

[03:15] *** justatheory left
[03:16] *** envi joined
[03:27] *** _jaldhar joined
[03:35] *** QinGW left
[03:37] *** mkramer1 joined
[03:39] *** mkramer left
[03:41] *** lopnor is now known as lopaway

[03:42] *** satyavvd left
[03:44] *** QinGW joined
[03:46] *** mkramer joined
[03:47] *** mkramer1 left
[03:50] *** agentzh joined
[04:02] *** QinGW left
[04:02] *** QinGW joined
[04:04] *** Grimnir_ left
[04:06] *** Vlavv left
[04:15] *** Grimnir_ joined
[04:17] *** satyavvd joined
[04:19] *** Vlavv joined
[04:20] *** justatheory joined
[04:20] *** gabiruh left
[04:22] *** QinGW left
[04:23] *** QinGW joined
[04:25] *** awwaiid left
[04:26] *** race6 joined
[04:27] *** Su-Shee left
[04:27] *** awwaiid joined
[04:28] *** Su-Shee joined
[04:29] *** drbean left
[04:38] *** bacek_ left
[04:41] *** race6 left
[04:42] *** satyavvd left
[04:56] *** orafu left
[04:56] *** orafu joined
[04:58] *** satyavvd joined
[05:13] *** p6eval left
[05:14] *** dalek left
[05:15] *** diakopter left
[05:15] *** TimToady left
[05:15] *** sorear left
[05:25] *** sftp left
[05:26] *** sftp joined
[05:28] *** dalek joined
[05:28] *** ChanServ sets mode: +v dalek

[05:28] *** sorear joined
[05:28] *** p6eval joined
[05:28] *** ChanServ sets mode: +v p6eval

[05:28] *** orafu left
[05:28] *** TimToady joined
[05:28] *** diakopter joined
[05:28] *** orafu joined
[05:35] <sorear> interesting

[05:35] <sorear> p6eval and diakopter have completely different IPs but they lose connectivity at once

[05:36] <snarkyboojum> ergo, diakopter is a bot

[05:36] <sorear> that does not follow

[05:39] *** dalek left
[05:40] *** dalek joined
[05:40] *** ChanServ sets mode: +v dalek

[05:42] *** QinGW left
[05:42] *** kst left
[05:42] *** QinGW joined
[05:43] *** Patterner left
[05:43] *** kst joined
[05:43] <snarkyboojum> sorear: what sort of qualitative evidence do you have for your original statement?

[05:45] *** Psyche^ joined
[05:45] *** Psyche^ is now known as Patterner

[05:45] *** p6eval left
[05:46] <snarkyboojum> diakopter: is still here

[05:46] *** dalek left
[05:51] *** sorear left
[05:52] <snarkyboojum> rakudo: say "Yikes, I don't work"

[05:52] *** sorear joined
[05:52] <sorear> ~[6~[6~[6~just look at the logs

[05:52] <sorear> sorear, diakopter, TimToady, dalek, and p6eval all pinged out in the same 5 minute interval

[05:52] <sorear> also I am currently fighting 120+ second lag

[05:53] <snarkyboojum> are they all IRC bouncing through the same server?

[05:53] <snarkyboojum> oh, diff ips :P

[05:53] <sorear> no, that's my point

[05:53] <snarkyboojum> well, the last disconnect for p6eval didn't result in a disconnect for diakopter or TimToady 

[05:53] <sorear> the humans are on host02.appflux.net, the bots are on host04

[05:54] *** dukeleto left
[05:55] *** dukeleto joined
[06:04] *** kaare_ joined
[06:19] <sorear> rakudo: (1..5).say

[06:22] <snarkyboojum> p6eval is dieded

[06:22] *** am0c joined
[06:30] <diakopter> it may return

[06:30] <snarkyboojum> sorear: are you using the t/run_spectests harness for Niecza?

[06:31] *** justatheory left
[06:32] <diakopter> host02 and host04 are in the same datacenter, ish

[06:32] <snarkyboojum> host04 is looks to be currently down, but host02 isn't fwiw

[06:33] <diakopter> it'll return

[06:33] <snarkyboojum> aye :)

[06:33] <sorear> diakopter: odd that they have completely different IPs

[06:33] <diakopter> meh

[06:33] <sorear> I thought IP routing was prefix-based

[06:34] <diakopter> it can be, simplisticly

[06:34] *** cafesofie left
[06:35] <diakopter> incidentally, I can reach host04 from host02 :)

[06:35] <snarkyboojum> diakopter: so it's a routing issue then... ?

[06:35] <sorear> snarkyboojum: no

[06:35] <diakopter> snarkyboojum: yeah

[06:35] <sorear> snarkyboojum: I haven't tried run_spectests

[06:36] <diakopter> well, a semi-planned issue, according to the vps host

[06:36] <sorear> I know it won't work on Linux

[06:36] <snarkyboojum> sorear: what that a moritz_ WIP to setup a test harness for Niecza then

[06:36] <snarkyboojum> was*

[06:36] <sorear> if it works at all it's Windows-exclusive - it assumes you can just run a .exe program directly

[06:37] <snarkyboojum> sorear: because it just needs some TLC to do mono run/Niecza.exe as p6eval etc to work again

[06:37] *** c9s joined
[06:38] <snarkyboojum> sorear: i.e. it's still referring to niecza_eval. Oh well :)

[06:38] <diakopter> snarkyboojum: ?

[06:38] <diakopter> oh, not the p6eval evalbot.pl

[06:38] <diakopter> that doesn't do that

[06:38] <sorear> snarkyboojum: moritz_ gave a pull request and we can't agree how it should work

[06:40] <snarkyboojum> diakopter: no, the t/fudgeandrun script in the niecza reop

[06:40] <snarkyboojum> repo(

[06:40] <snarkyboojum> eek

[06:41] <snarkyboojum> sorear: fair enough :) was nice when it was working a little while ago.. will bide my time then :)

[06:44] <snarkyboojum> sorear: there should be a build system dependent invocation to run the "right thing" I guess re tests

[06:47] *** pencilk left
[06:47] <snarkyboojum> i.e. change the test target in the Makefile to do the right thing, or add a spec_test target

[06:48] *** c9s left
[06:50] *** cafesofie joined
[06:51] * diakopter blinks hard at https://mozillalabs.com/zaphod/

[06:53] <snarkyboojum> diakopter: did you read http://brendaneich.com/2011/01/harmony-of-my-dreams/ ?

[06:54] <diakopter> most of it

[06:54] <diakopter> till the blearies in my eyes pulled their lids stuck

[06:54] *** dalek joined
[06:54] *** ChanServ sets mode: +v dalek

[06:55] * diakopter bows

[06:55] <snarkyboojum> diakopter: I enjoyed the focus on parens-free control structures etc

[06:55] * diakopter is always pleased at how robustly dalek (botnix) reconnects

[06:56] <diakopter> I enjoyed the focus on #subs

[06:56] <coldhead> new javascript features just make me sad because they're always years away from widespread adoption

[06:56] <coldhead> there's nothing people won't update like their battered old internet explorer 6

[06:57] *** dduncan_ joined
[06:57] <snarkyboojum> and implicit return values

[06:57] *** dduncan_ left
[06:57] *** p6eval joined
[06:57] *** ChanServ sets mode: +v p6eval

[06:58] <diakopter> perl6: .die

[06:58] <p6eval> rakudo 388eed: OUTPUT«Method 'die' not found for invocant of class ''␤  in main program body at line 22:/tmp/E8p6IjkE7a␤»

[06:58] *** wtw joined
[06:58] <p6eval> ..pugs: OUTPUT«*** Died␤    at /tmp/tEdUswben4 line 1, column 1 - line 2, column 1␤»

[06:58] <p6eval> ..niecza v1-149-g56c80b0: OUTPUT«Unhandled exception: Unable to resolve method statement_level in class Hash␤  at /home/p6eval/niecza/src/NieczaActions.pm6 line 2129 (NieczaActions C766_ANON @ 1)␤  at /home/p6eval/niecza/boot/lib/SAFE.setting line 73 (SAFE C36_ANON @ 1)␤  at

[06:58] <p6eval> ../home/p6eval/niecza/boot/lib/SAFE.setti…

[06:58] *** drbean joined
[06:58] <diakopter> pugs++

[07:00] <diakopter> niecza: {}.statement_level

[07:00] <p6eval> niecza v1-149-g56c80b0: OUTPUT«Unhandled exception: Unable to resolve method statement_level in class Hash␤  at /tmp/z6L8K1obD7 line 1 (MAIN mainline @ 3)␤  at /home/p6eval/niecza/lib/SAFE.setting line 914 (SAFE C354_ANON @ 1)␤  at /home/p6eval/niecza/lib/SAFE.setting line 915 (SAFE module-SAFE @

[07:00] <p6eval> ..29)␤  at /home/…

[07:01] *** cogno joined
[07:02] *** justatheory joined
[07:06] *** justatheory left
[07:14] *** ascent__ left
[07:14] *** puge left
[07:15] *** ascent_ joined
[07:15] *** puge joined
[07:21] *** cogno left
[07:24] *** am0c left
[07:26] <sorear> no, Hash does *not* have statement_level

[07:27] <sorear> statement_level is defined on Op, anyway

[07:27] <sorear> niecza keeps the meta-levels rigidly separate; statement_level only exists in the compiler

[07:28] *** cogno joined
[07:28] <diakopter> I was just trying to reproduce the error it gave from  .die

[07:28] <sorear> btw while dalek was out I added Range

[07:28] <sorear> niecza: say 1..10

[07:29] <p6eval> niecza v1-149-g56c80b0: OUTPUT«(timeout)»

[07:29] <sorear> niecza: say 1..10

[07:29] <p6eval> niecza v1-149-g56c80b0: OUTPUT«12345678910␤»

[07:32] *** [particle] left
[07:34] *** cogno left
[07:36] *** hanekomu joined
[07:38] <sorear> it looks like making .method; work has a dependency on the planned operator overhaul

[07:38] * sorear bumps that

[07:48] *** masak joined
[07:48] <masak> early morning wakeup attempt WIN \o/

[07:48] <masak> morning, #perl6

[07:55] <masak> "we moved to a new development model" -- http://blog.whatwg.org/html-is-the-new-html5 (via @obra)

[07:57] *** yarp joined
[08:05] <moritz_> phenny: tell snarkyboojum see web/build-project-list.pl in the moduels.perl6.org repo - it does the copying

[08:05] <phenny> moritz_: I'll pass that on when snarkyboojum is around.

[08:05] <phenny> moritz_: 00:40Z <snarkyboojum> tell moritz_ whatever process copies files from the modules.perl6.org github repo to the web server needs to be updated to include two additional images web/proto.png and web/camelia.png :|

[08:06] <sorear> hello masak.

[08:07] <sorear> although I'll be going to bed soon :p

[08:07] <snarkyboojum> moritz_: oh my, ok - that's some hardcoded goodness :)

[08:07] <phenny> snarkyboojum: 08:05Z <moritz_> tell snarkyboojum see web/build-project-list.pl in the moduels.perl6.org repo - it does the copying

[08:07] <sorear> masak: it turned out all p6eval needed to fix "Array.keys" was a clean rebuild.  You might try that.

[08:08] <masak> ok.

[08:08] <masak> so just nuke niecza/ and clone it again?

[08:09] <sorear> git clean -dfx

[08:09] <sorear> git pull

[08:09] <moritz_> snarkyboojum: you can also add globs to the script

[08:10] <snarkyboojum> moritz_: goody - will have a look. thanks.

[08:15] *** daxim joined
[08:17] <snarkyboojum> moritz_: how does this perl script get copied to the server?

[08:18] *** am0c joined
[08:19] <masak> sorear: build trouble -- se bottom of https://gist.github.com/789410

[08:23] *** am0c left
[08:25] *** am0c joined
[08:45] *** jjore left
[08:46] *** jjore joined
[08:50] *** yarp left
[08:51] <snarkyboojum> rakudo: say [*] Nil

[08:51] <p6eval> rakudo 388eed: OUTPUT«1␤»

[08:51] <snarkyboojum> why is that the case?

[08:51] <moritz_> snarkyboojum: via github

[08:52] <snarkyboojum> moritz_: i.e. there is a cronjob or something with copies from github?

[08:52] <moritz_> snarkyboojum: 1 is the neutral element to multiplication

[08:52] <moritz_> snarkyboojum: it git pulls and then runs the script

[08:52] <moritz_> yes, cronjob

[08:52] <snarkyboojum> moritz_: ah, ok - to both answers :) thanks

[08:53] <moritz_> rakudo: say prefix:<[+]>()

[08:53] <p6eval> rakudo 388eed: OUTPUT«0␤»

[08:53] <moritz_> rakudo: say prefix:<[*]>()

[08:53] <p6eval> rakudo 388eed: OUTPUT«Could not find sub &prefix:<[*]>␤  in main program body at line 22:/tmp/AbpbTNq0Ka␤»

[08:54] <moritz_> rakudo: say infix:<*>()

[08:54] <p6eval> rakudo 388eed: OUTPUT«1␤»

[08:54] <moritz_> rakudo: say infix:<+>()

[08:54] <p6eval> rakudo 388eed: OUTPUT«0␤»

[08:54] <moritz_> rakudo: say infix:<&&>()

[08:54] <masak> \o/

[08:54] <p6eval> rakudo 388eed: OUTPUT«Bool::True␤»

[08:54] <snarkyboojum> that's pretty cool

[08:55] <masak> I wonder how to specify that for a user-defined chaining op.

[08:55] <moritz_> masak: you just define a nullary infix that returns the default element

[08:55] <masak> maybe the way to define chaining ops will always be in terms of all their operands as a slurpy.

[08:55] <moritz_> yes

[08:56] <masak> then no nullary case is needed.

[08:56] <moritz_> though it doesn't account for short-circuiting operators

[08:59] *** hanekomu left
[08:59] <masak> true.

[08:59] <masak> are those chaining, though?

[08:59] * masak czechs

[09:00] <moritz_> sure

[09:00] <moritz_> a() && b() && c()

[09:00] <masak> no; they're list associative.

[09:00] <masak> that's different.

[09:00] <moritz_> hm

[09:01] <masak> "chaining" is more of a precedence level with certain special rules.

[09:01] <moritz_> 1 < 2 < 3  could be both chaining and short-circuiting

[09:01] <masak> right, but that's handled very differently.

[09:02] <moritz_> in rakudo's Configure.pl, line 179, where does $1 get set?

[09:02] <moritz_> ah

[09:02] * moritz_ dumb

[09:05] *** kensanata joined
[09:08] *** am0c_ joined
[09:08] <masak> in the case of a tie between a multi method in a Parent class and a multi method in a Child class (belonging to the same proto method), does the Child multi always win?

[09:10] *** am0c left
[09:10] *** am0c_ is now known as am0c

[09:11] <masak> rakudo: class Wide {}; class Narrow is Wide {}; class Parent { multi method foo(Narrow) { say "Parent" } }; class Child is Parent { multi method foo(Wide) { say "Child" } }; Child.new.foo # tie, or Child.foo wins?

[09:12] <p6eval> rakudo 388eed: OUTPUT«No candidates found to invoke for method 'foo' on object of type 'Child'; available candidates have signatures:␤:(Mu : Wide ;; *%_)␤␤  in main program body at line 22:/tmp/d596Oc_qYy␤»

[09:12] <masak> er

[09:12] <moritz_> I thought the child method is always considered first anyway?

[09:12] <masak> rakudo: class Wide {}; class Narrow is Wide {}; class Parent { multi method foo(Narrow) { say "Parent" } }; class Child is Parent { multi method foo(Wide) { say "Child" } }; Child.new.foo(Wide) # tie, or Child.foo wins?

[09:12] <p6eval> rakudo 388eed: OUTPUT«Child␤»

[09:12] <masak> moritz_: that is my question. I know it is for only methods, but...

[09:13] *** kst left
[09:13] * moritz_ -> afk

[09:13] *** kst joined
[09:13] <masak> moritz_: here, in essence, the method is *located* in Parent, with one multi definition in Parent and one in Child.

[09:13] <jnthn> masak: ask nqp-rx/nom or nqpclr

[09:14] <jnthn> masak: Answer is a tie.

[09:14] <jnthn> By current spec.

[09:14] <jnthn> And I expect nqp-rx/nom and nqpclr get it right.

[09:15] <jnthn> Actually mutli-dispatch doesn't care about where the method is located. It does care about the type of the invocant, which as far as its concerned is just the first argument.

[09:15] <jnthn> Like anywhere in Perl 6.

[09:16] <masak> that's what I suspected/hoped.

[09:16] <jnthn> Anyway, Rakudo is lagging current spec.

[09:16] <jnthn> But I know how to implement current spec on Parrot now as I've done the hard bits in nqp-rx already. :)

[09:18] *** jjore left
[09:18] <jnthn> It'll land in the branch to get Rakudo onto 6model.

[09:20] *** jjore joined
[09:26] <masak> \o/

[09:29] *** am0c left
[09:34] *** jlaire left
[09:34] *** am0c joined
[09:36] *** am0c left
[09:38] *** REPLeffect left
[09:38] *** jlaire joined
[09:39] *** REPLeffect joined
[09:43] *** kst left
[09:43] *** kst joined
[09:43] *** am0c joined
[09:47] <masak> phenny: tell sorear that I ran into some build trouble -- see bottom of https://gist.github.com/789410

[09:47] <phenny> masak: I'll pass that on when sorear is around.

[09:47] *** masak left
[09:51] *** tzhs joined
[09:55] *** am0c left
[10:06] *** QinGW left
[10:11] *** mtk left
[10:13] *** kst left
[10:13] *** kst joined
[10:18] *** Grimnir_ left
[10:19] *** dakkar joined
[10:19] *** mtk joined
[10:29] *** cjk101010 joined
[10:36] *** daxim left
[10:47] *** Grimnir_ joined
[11:17] *** VXZ joined
[11:22] <flussence> argh, CPAN is annoying. It seems like half the interesting-sounding module names link straight to a "No matches" error page.

[11:26] *** hcchien left
[11:28] <mathw> yes, CPAN is very annoying

[11:29] *** am0c joined
[11:31] *** JimmyZ joined
[11:35] *** Chillance joined
[11:37] *** Bzek joined
[11:43] *** Lorn left
[11:44] *** agentzh left
[11:46] *** Lorn joined
[11:47] *** satyavvd left
[11:58] *** cogno joined
[12:10] *** hcchien joined
[12:15] *** Bzek left
[12:18] *** daxim joined
[12:27] *** am0c left
[12:31] *** cogno left
[12:35] *** gimix left
[12:43] *** am0c joined
[12:45] *** drbean left
[12:46] *** jferrero joined
[12:46] *** JimmyZ left
[12:50] *** jarfhy left
[12:51] *** drbean joined
[13:00] <takadonet> morning all

[13:08] *** MayDaniel joined
[13:08] *** MayDaniel left
[13:08] *** MayDaniel joined
[13:09] *** Kodi joined
[13:10] <Kodi> rakudo: my $x = 2; say "$x =~ b";

[13:10] <p6eval> rakudo 388eed: OUTPUT«===SORRY!===␤Unsupported use of =~ to do pattern matching; in Perl 6 please use ~~ at line 22, near " b\";"␤»

[13:11] <Kodi> rakudo: my $x = 2; say "$x << b";

[13:11] <p6eval> rakudo 388eed: OUTPUT«===SORRY!===␤Unsupported use of << to do left shift; in Perl 6 please use +< or ~< at line 22, near "b\";"␤»

[13:11] <Kodi> rakudo: my $x = 2; say "$x +< b";

[13:11] <p6eval> rakudo 388eed: OUTPUT«2 +< b␤»

[13:14] <Kodi> Ah, RT #76878.

[13:18] *** cafesofie left
[13:26] <arnsholt> I'm gonna write a Trie module

[13:26] *** MayDaniel left
[13:26] <arnsholt> Should I call it Data::Trie, or Algorithm::Trie?

[13:27] <Kodi> I vote for the former.

[13:27] <Kodi> The word "data" suggests "data structure".

[13:27] *** cogno joined
[13:28] <arnsholt> Yeah, I think I agree

[13:31] <dalek> roast: cdf3825 | (Kodi Arfer)++ | S03-operators/brainos.t:

[13:31] <dalek> roast: [brainos.t] Added tests for RT #76878.

[13:31] <dalek> roast: review: https://github.com/perl6/roast/commit/cdf3825536

[13:32] *** awwaiid_ left
[13:34] *** drbean left
[13:38] *** Kodi left
[13:39] *** cogno left
[13:45] *** am0c left
[13:47] *** dju left
[13:48] *** dju joined
[13:49] *** simcop2387 left
[14:02] *** simcop2387 joined
[14:13] *** plobsing_ left
[14:31] *** [particle] joined
[14:31] *** kaare_ left
[14:34] *** JimmyZ joined
[14:44] *** orafu left
[14:47] *** orafu joined
[14:47] *** mtk left
[14:47] *** molaf joined
[14:50] *** hanekomu joined
[14:52] *** mtk joined
[14:57] *** mtk left
[15:02] *** mtk joined
[15:13] *** Alias_ joined
[15:13] *** kaare_ joined
[15:15] *** Alias left
[15:15] *** Alias__ left
[15:15] *** Alias joined
[15:19] *** dakkar_ joined
[15:19] *** dakkar left
[15:19] *** wtw left
[15:19] *** dakkar_ is now known as dakkar

[15:25] *** plobsing joined
[15:33] *** plobsing left
[15:37] *** cognominal joined
[15:42] *** plobsing joined
[15:45] *** estrabd_afk is now known as estrabd

[15:45] <flussence> I thought I'd be clever at $p5_dayjob and use `xxd -r` for binary patching - it turns out xxd itself is *really* unforgiving with the format of lines...

[15:45] <dalek> book: a3f9258 | (Greg Donald)++ | README:

[15:45] <dalek> book: mention Perl 5 Template module dependency

[15:45] <dalek> book: review: https://github.com/perl6/book/commit/a3f92582ff

[15:45] <dalek> book: a8a5a89 | (Greg Donald)++ | src/operators.pod:

[15:45] <dalek> book: how to type hyper operator character in Emacs

[15:45] <dalek> book: review: https://github.com/perl6/book/commit/a8a5a8985a

[15:46] *** szabgab left
[15:47] *** kaare_ left
[15:49] *** kaare_ joined
[15:49] <sorear> phenny: tell masak wtf.  What files are in boot/obj?  What does MONO_LOG_LEVEL=debug mono boot/obj/CLRBackend.exe boot/obj MAIN.nam MAIN.exe 1 say?

[15:49] <phenny> sorear: I'll pass that on when masak is around.

[15:49] <phenny> sorear: 09:47Z <masak> tell sorear that I ran into some build trouble -- see bottom of https://gist.github.com/789410

[16:00] *** szabgab joined
[16:00] *** cognominal left
[16:05] *** JimmyZ left
[16:07] *** kaare_ left
[16:10] <sorear> good * #perl6

[16:13] <tadzik> hello zebras

[16:21] *** tzhs left
[16:24] *** slavik joined
[16:32] *** bluescreen joined
[16:33] *** justatheory joined
[16:35] <TimToady> sorear: still can't quite get niecza built: https://gist.github.com/789935

[16:36] <TimToady> does it need some kind of a library path?

[16:36] *** snearch joined
[16:36] <[Coke]> niecza?

[16:36] * [Coke] wonders how to activate the bots.

[16:38] <TimToady> (trying again after git clean)

[16:38] <[Coke]> where is niecza?

[16:38] *** kensanata left
[16:38] <sorear> https://www.github.com/sorear/niecza

[16:38] <sorear> TimToady: ok, so you can reproduce masak's issue

[16:39] *** dipthegeezer left
[16:39] <TimToady> yes, same error after the clean

[16:40] <sorear> TimToady: what files are in boot/obj?  (I'm especially looking for SAFE.dll, Kernel.dll, SAFE.nam)

[16:40] <sorear> niecza: say "compilation worked"

[16:41] <p6eval> niecza v1-149-g56c80b0: OUTPUT«compilation worked␤»

[16:41] <TimToady> there's no SAFE.dll

[16:41] <sorear> mm, 29 revisions behind

[16:41] <TimToady> the other two are there

[16:45] <sorear> erp.  I think I just found a bug in p6eval

[16:45] <sorear> phenny: tell moritz_ Is it deliberate that build.pl only saves STDOUT to the log file?

[16:45] <phenny> sorear: I'll pass that on when moritz_ is around.

[16:46] <sorear> in any event I can now reproduce it

[16:48] *** daxim left
[16:48] *** MayDaniel joined
[16:50] *** hanekomu left
[16:54] <jnthn> evening :)

[16:55] <takadonet> jnthn: hey

[16:55] <jnthn> o/ takadonet 

[16:56] <TimToady> sorear: do you still want the log level 1 output?

[16:57] <TimToady> or is that what you were referring to with "can reproduce"

[16:57] <sorear> TimToady: I've tracked down the problem

[16:57] *** bluescreen left
[16:57] <sorear> /bin/sh in p6eval's chroot has a [ builtin that is not quite compatible with the [ builtin in my dev env

[17:04] <sorear> TimToady: Why are < and lt in Perl reversed from their sense in test(1)?

[17:08] <sbp> test(1) has to be better at something

[17:10] *** wamba joined
[17:12] <sorear> niecza: say "did it work?"

[17:12] <p6eval> niecza v1-178-gd94bb5e: OUTPUT«did it work?␤»

[17:14] *** kst left
[17:14] <TimToady> obviously, because test got it wrong :)

[17:14] *** kst joined
[17:15] <TimToady> maybe they liked fortran or somethin'

[17:17] <TimToady> and because < looks lke math, and because lt looks like a string

[17:17] <[Coke]> TimToady++

[17:17] <TimToady> and because of that Hubris thang...

[17:18] * TimToady was not totally wowwed with the Wonderfully Perfect Design of All Things Unix

[17:20] <TimToady> which is fine, given that others have felt the same way about Perl :)

[17:20] *** slavik left
[17:20] *** slavik joined
[17:22] <dalek> niecza: bd091ab | sorear++ | Makefile:

[17:22] <dalek> niecza: Change Makefile to support dash builtin [

[17:22] <dalek> niecza: 

[17:22] <dalek> niecza: It's still not a POSIX usage pattern though.

[17:22] <dalek> niecza: review: https://github.com/sorear/niecza/commit/bd091ab458

[17:22] *** GinoMan left
[17:23] <sorear> phenny: tell masak nevermind, found the problem and fixed it

[17:23] <phenny> sorear: I'll pass that on when masak is around.

[17:24] *** timbunce joined
[17:26] * [Coke] installs mono on darwin and gets another copy of perl (5.8.9) for free!

[17:27] <TimToady> 'tworks!!  \o/

[17:28] *** kaare_ joined
[17:28] *** cogno joined
[17:30] <TimToady> though the knapsack packer stil chews through memory like no one's business

[17:32] <TimToady> a newer GC might or might not fix that...

[17:32] <sbp> "Hey, I had to let awk be better at *something*...  :-)"

[17:32] <sbp> — http://groups.google.com/group/comp.lang.perl/msg/af646f4ae85fcbe4

[17:36] *** c9s joined
[17:39] <diakopter> shortcircuit: has someone added the new (allegedly) polynomial 3-SAT solution algorithm to your site?

[17:39] <diakopter> if not, do so and I'm sure some of us around here would work on a port :)

[17:39] *** MayDaniel left
[17:40] *** pyrimidine joined
[17:40] <shortcircuit> diakopter: Not AFAIK. It'd have to be vetted against license restrictions, though. (Whoever added it has to be able to license it to RosettaCode.org under the GFDL 1.2)

[17:40] <diakopter> oh, I just mean a placeholder page

[17:40] <shortcircuit> Also, I don't have the time to do it myself right, now, but anyone _could_.

[17:40] *** cdarroch joined
[17:40] *** cdarroch left
[17:40] *** cdarroch joined
[17:41] <shortcircuit> diakopter: Ah. Well, on that note...There's no task-creators' club. See http://blog.rosettacode.org/2011/01/getting-2011-rolling.html for an easy intro on how to create the task.

[17:42] <diakopter> so, a draft task

[17:42] <shortcircuit> Yup; the community on the wiki will help the creator through the rest of the process.

[17:46] *** plobsing left
[17:51] <sorear> is the 3-SAT thing for real?

[17:52] <diakopter> in order to prove his algorithm is 100% successful, he would need to prove that the 3rd output message code is unreachable :)

[17:53] <diakopter> "failure of classication—in case when HSS forming was completed, but a satisfying set couldn’t be found."

[17:53] <diakopter> in *his* tests, he never got that message

[17:53] <sorear> I'd like to see him crack RSA-100 with his NP solver, then I'll care

[17:54] <diakopter> :)

[17:57] <shortcircuit> diakopter: If you haven't already, go ahead and create the task page. It'll be interesting to see what happens.

[17:57] *** mtk left
[17:57] * diakopter has to master vmware esxi this morning

[17:58] *** mtk joined
[17:58] *** mtk left
[17:59] *** mtk joined
[17:59] *** masak joined
[18:01] <shortcircuit> I expect someone at Google is already planning a run of the code through their server farm.

[18:01] <shortcircuit> Or a reasonable translation of it.

[18:02] <masak> hola, zebras!

[18:02] <phenny> masak: 15:49Z <sorear> tell masak wtf.  What files are in boot/obj?  What does MONO_LOG_LEVEL=debug mono boot/obj/CLRBackend.exe boot/obj MAIN.nam MAIN.exe 1 say?

[18:02] <phenny> masak: 17:23Z <sorear> tell masak nevermind, found the problem and fixed it

[18:02] <masak> sorear++

[18:02] <masak> whatever it was. :)

[18:02] * masak cleans, pulls and tries again

[18:03] <sorear> it seems that -nt isn't POSIX and bash and dash interpret it slightly differently

[18:03] <masak> sorear: was the gist I posted of any use in debugging that?

[18:04] <sorear> no

[18:04] <masak> also, what's dash? I know that's probably what I'm using, but I only recently saw the name.

[18:04] <masak> is it an alternative sh interpreter?

[18:04] <sorear> Debian Almquist SHell

[18:04] <sorear> yes

[18:04] * masak googles

[18:05] <masak> smaller, more streamlined, faster. nice.

[18:08] <Tene> A friend and I were talking about ideas for an alternative setting for Perl 6 with changes to make it nicer for usage as an interactive shell.

[18:08] <Tene> There's some interesting possibilities there.

[18:08] <[Coke]> (man does mono have a lot of prereqs on darwin)

[18:11] *** mberends joined
[18:12] *** dakkar left
[18:12] *** impious joined
[18:12] *** impious left
[18:12] *** timbunce left
[18:14] *** mtk left
[18:15] *** mtk joined
[18:18] <masak> Tene: tell us more.

[18:19] *** timbunce joined
[18:22] *** cogno left
[18:23] *** cogno joined
[18:23] *** rhr left
[18:23] *** slavik left
[18:24] *** slavik joined
[18:25] *** masonkramer joined
[18:26] *** cjk101010 left
[18:30] <moritz_> sorear: not deliberate - feel free to fix

[18:30] <phenny> moritz_: 16:45Z <sorear> tell moritz_ Is it deliberate that build.pl only saves STDOUT to the log file?

[18:34] *** cogno left
[18:40] <sorear> moritz_: I ran 'apt-get install strace' in the p6eval chroot; is this proper form?

[18:46] * masak now has a built niecza again o/

[18:47] <masak> sorear: autoprinting of expressions went away completely in the REPL?

[18:48] *** cogno joined
[18:49] *** wamba left
[18:49] <dalek> evalbot: 52b1dc9 | sorear++ | build.pl:

[18:49] <dalek> evalbot: Redirect STDERR when autobuilding, too.

[18:49] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/52b1dc9dde

[18:49] <sorear> erm.  yes

[18:49] <sorear> (oops?)

[18:50] <sorear> do you want it back?

[18:50] *** Util left
[18:50] *** Juerd left
[18:50] *** Juerd joined
[18:50] *** Util joined
[18:50] <masak> I think so. preferably with .perl applied, if possible.

[19:00] <PerlJam> It would be nice to have a REPL where you could build up a lexical environment piece-wise and choose when to execute it.

[19:00] <dalek> niecza: 9311ad1 | sorear++ | lib/SAFE.setting:

[19:00] <dalek> niecza: dump => perl for consistency with Rakudo

[19:00] <dalek> niecza: review: https://github.com/sorear/niecza/commit/9311ad16df

[19:00] <dalek> niecza: 98d0cc5 | sorear++ | src/niecza:

[19:00] <dalek> niecza: Restore auto-say in REPL

[19:00] <dalek> niecza: review: https://github.com/sorear/niecza/commit/98d0cc58de

[19:00] <tadzik> my niecza still fails to run

[19:01] <masak> tadzik: did you clean -dfx?

[19:01] *** rhr joined
[19:01] <tadzik> maybe not, let me see

[19:01] <tadzik> building again

[19:04] <Tene> masak: I ran into a couple of awkward issues with the current setting.  Consider this: dir('/tmp/')>>.IO>>.created

[19:04] *** MayDaniel joined
[19:05] <Tene> That currently dies, because the strings returned from dir() don't have path information.

[19:05] <Tene> I'm considering pushing to get IO objects returned instead.

[19:05] <masak> Tene: just the other day I was thinking of that!

[19:05] <masak> Tene: I'm not sure &dir should strip the path information.

[19:05] <Tene> Well, it's not stripped.

[19:05] <Tene> it's not there in the first place.

[19:06] <TimToady> dir doesn't know the path in the first pal... what he said

[19:06] <TimToady> the path is '.'

[19:06] <masak> I say return the full (relative) path, and provide a simple way to strip off the path.

[19:06] <Tene> TimToady: *dir* does know the path... it's passed as an argument! :P

[19:06] <Tene> masak: There are some nice things, though.  dir ==> grep /foo/

[19:06] <TimToady> well, okay, but it's not guaranteed to be an absolute path

[19:06] <masak> then people who want the IO can do .IO, and the people who want only the file name can do... something.

[19:06] <masak> TimToady: not needed.

[19:07] <TimToady> trooo

[19:07] <masak> just that it leads to the file.

[19:07] <Tene> TimToady: It's guaranteed to be a path that can be used to make an IO object, though.

[19:07] <TimToady> I wish I could say that was my first mistake this year...

[19:07] <masak> .split($dirsep)[*-1] would give the filename again.

[19:08] <TimToady> well, I could say it, but it would be a mistake...

[19:08] <masak> modulo nasty escaped $dirseps etc

[19:08] <masak> maybe there should be a convenience method for that.

[19:08] <masak> oh, oh!

[19:08] <masak> .IO.filename :)

[19:09] *** hercynium joined
[19:09] <masak> or .IO.name, doesn't matter.

[19:09] <TimToady> well, dir() was never really designed, it just sorta popped up existing

[19:09] <masak> let's pop it sideways a bit to give full paths.

[19:09] <masak> before it's too late. :)

[19:10] <tadzik> you can use File::Find and get the paths

[19:10] <TimToady> or have a different function that does that

[19:10] <masak> tadzik: that's nice to know, but I think &dir would be better if it gave the paths.

[19:11] <tadzik> maybe

[19:11] <TimToady> or have a dir($dir, :bare) option

[19:11] <masak> here's my full argumentation: people might want three things from &dir: just the filename, the full (relative) path, or the IO object. if we give the full (relative) path, the other two are easy to reconstruct.

[19:11] <TimToady> rawdir()

[19:11] <Tene> masak: you could always return the string name, but mix in the IO object with but

[19:11] <Tene> ;)

[19:11] * hercynium was going to try to make a glib remark about dir being designed vs. evolved but decided against :)

[19:11] *** envi left
[19:12] <wolverian> masak: why not IO object?

[19:12] <masak> Tene: :P

[19:12] <TimToady> an IO object only reprents a file, it doesn't have to have opened it yet

[19:12] <masak> wolverian: hm, maybe. if it stringifies to the full (relative) path.

[19:12] <TimToady> *represents

[19:12] <TimToady> unless you're worried about races

[19:12] <hercynium> of course, there's no reason for it's evolution to be a result of the design on a lower level ;)

[19:12] *** Tedd1 left
[19:13] <hercynium> um, I mean *not* to be

[19:13] <Tene> IO objects as they're written now, btw, breaks if you chdir between instantiation and use.

[19:13] <hercynium> too many negatives

[19:13] <TimToady> certainly the ingyesque view of IO objects is lazy about deciding how to open it

[19:13] <TimToady> ==> IO  vs IO ==>

[19:14] <Tene> I don't understand "==> IO  vs IO ==>"

[19:14] <allbery_b> what does an io object stringify to?

[19:15] <TimToady> whether it's opened for reading or writing depends on whether you read or write it

[19:15] *** cogno left
[19:15] <Tene> Ah.

[19:15] <TimToady> see the IO module in P5

[19:16] <Tene> One other thing that makes me nervous is the pun between .say on strings and .say on IO objects.

[19:16] <TimToady> so other than possible race conditions and a bit more overhead (maybe), I don't see much problem with dir returning IO objects directly

[19:16] <TimToady> assuming they can be used like strings

[19:17] <TimToady> but I guess there was some heartburn a few days ago about IO being in Cool

[19:17] <Tene> I've seen plenty of places where people iterate over a collection calling .say on everything to see it printed.

[19:17] <TimToady> I guess that was over +IO rather than ~IO though

[19:17] <Tene> You pass IO objects into that, and suddenly your debug or logging method or whatever is writing to the files you're looking at.

[19:17] <Tene> What was the problem with +IO?

[19:18] <TimToady> what would it mean?

[19:18] <sorear> I think Rakudo is wrong to have IO and FileHandle be the same type

[19:18] <masak> TimToady: no, I was just wondering *why* an IO was a Cool. we didn't seem to use it for anything.

[19:18] <sorear> TimToady: What does +IO and ~IO mean?

[19:19] <sorear> I see IO as being a kind of Stringy and thus Cool; FileHandle is a separate type in Niecza and not Cool

[19:19] <TimToady> I mean what would an IO object numify/stringify to

[19:19] <masak> TimToady: also IO can have nice stringifications/numifications without being in Cool.

[19:19] <masak> not saying it should/shouldn't. :)

[19:19] *** Tedd1 joined
[19:20] <sorear> IO being Cool allows .comb, etc to work

[19:20] <Tene> sorear: but is .comb over the contents of the file, the filename, what?

[19:21] <sorear> Tene: the filename

[19:21] <sorear> my IO identifies a file, not a file handle

[19:22] <Tene> sorear: so you're saying that you can't do IO on your IO objects?

[19:22] <TimToady> it might possibly contain a filehandle, and delegate in some circumstances

[19:22] <TimToady> it represents the identity of a file

[19:22] <Tene> ;)

[19:22] <sorear> Tene: correct.

[19:23] <Tene> My inclination would be towards having a File class oslt, and use the name "IO" for handles, fds, etc.

[19:23] <sorear> masak: have you read the latest Parrot release message?  I think cotto_work is trying to steal your schtick

[19:23] <sorear> Tene: we could even call it Path, for consistency with qp// (which presumably returns them)

[19:24] <Tene> sorear: Yes, I like that.

[19:24] <sorear> Tene: What happens with $filename.IO.e ?  Does it become $filename.Path.e ?

[19:25] <Tene> sorear: I'd prefer .File.e, but IMO yes, that's better.

[19:25] <masak> sorear: now I've got to more'n skim it :P

[19:26] <Tene> I certainly don't think that I've given sufficient thought to the entire problem space of IO, sockets, fds, IPC, etc, but the current architecture seems rather suboptimal.

[19:26] <TimToady> or we rename qp to qio

[19:26] <Tene> Bleh.

[19:27] <TimToady> well, "path" is arguably too overloaded

[19:27] <Tene> There are plenty of files that aren't meaningful to read or write to, and you can do IO on plenty of non-file things.

[19:27] <PerlJam> So ... a Path is something like  "http://perl6.org/community", right?

[19:27] <Tene> TimToady: Yes, which is why I prefer File

[19:28] <TimToady> File is wrong, and PerlJam++ sez

[19:28] <TimToady> s/and/as/

[19:29] <[particle]> java must have a terminology for URIs and non-uniform resources too.

[19:29] <[particle]> but is it any good?

[19:29] <cotto_work> sorear: masak's release announcements were where I got the idea.

[19:29] <Tene> File is *Wrong*, or file is *incomplete*?

[19:29] <TimToady> a socket is not a file

[19:29] <masak> sorear: inclined to agree. cotto_work++. well, I'll have to up the ante, then. :)

[19:29] <[particle]> a link is not a file (well, slow links are)

[19:30] <TimToady> and I'm fine with a qp// returning an IO

[19:31] <Tene> TimToady: what does .stat or .e or .w mean on a socket?

[19:31] <TimToady> depends on whether it's a Unix-domain socket :P

[19:31] <Tene> TimToady: IO as it is right now is exclusively about Files, and not about sockets or other IO-like concepts.

[19:32] <Tene> TimToady: Not all unix sockets are associated with a file.

[19:32] <TimToady> so some io operations can fail; nothing new here

[19:32] <[particle]> rudy can't fail.

[19:33] <PerlJam> failure is not an option?

[19:33] <TimToady> trying to prevent IO failures using type theory is an exercise in exercise

[19:33] <Tene> TimToady: That's very true, but that certainly doesn't mean that no IO type hierarchies are less useful than others.

[19:35] <TimToady> just trying to guard the huffman coding from the user's perspective here

[19:35] <TimToady> IO is short, so should be public facing

[19:35] <PerlJam> Tene: When you're best candidates are all heavily overloaded terms, it's time to change the lexicon a bit I think  :)

[19:35] <PerlJam> s/you're/your/

[19:36] <Tene> Maybe.

[19:36] <Tene> I certainly don't have well-supported conclusions here, just questions.

[19:36] <TimToady> perhaps qp[] returns an IO::Path

[19:37] * masak eyes qp[] warily

[19:37] <TimToady> but I'd like to get somewhere close to ingy's ==> io("filename") smarts

[19:38] <TimToady> reading and writing a list to a file seems very huffman-worthy

[19:38] <TimToady> as it is, we're still a long way from >filename

[19:39] <Tene> Is there a common role for IO-related types?

[19:40] <masak> Tene: sure, but it's all out in the land of sludge known as S16.

[19:42] <Tene> I'm also a bit skeptical about attempts to unify http, local filenames, sockets, and kitchen sinks in the short default API.  I'd be a bit grumpy if the default-recommended function for reading files can suddenly make network requests if a user happens to pass a specially-formatted filename.

[19:44] <PerlJam> one person's dwim is another person's accident, eh?

[19:44] <TimToady> so io() is the general one, and we also have file(), http(), etc for the paranoid :)

[19:45] <TimToady> or more likely, uri()

[19:45] *** rgrau joined
[19:45] *** timbunce left
[19:47] <Tene> TimToady: If you plan for io() to be so general, why have IO be so file-specific?

[19:47] <TimToady> it's not, in my mind

[19:47] <Tene> maybe io() could return an IO::File object instead, which does the IO role?

[19:47] *** klunky joined
[19:47] <Tene> Ahh, I misunderstood then.

[19:48] <TimToady> to me, io() is the most generic and dwimmy, and there are more specific functions to be more, er, specific

[19:48] <TimToady> likewise with IO

[19:48] <TimToady> it's got some defaultness as the top of the IO hierarchy

[19:48] <flussence> all I see io() doing is delegating to a more specific thing based on the ^(.*):// part.

[19:48] <TimToady> and tries to be generic across all registered IO types

[19:48] <Tene> Okay, I'm a lot happier with that.

[19:50] *** molaf left
[19:50] <TimToady> including (I hope) the ability to lazily determine its own actual type according to usage

[19:50] *** timbunce joined
[19:50] <Tene> Certainly would be nice to do something like: class IO::Frob { .. }; and then have support for frob:// urls.

[19:50] <TimToady> but maybe there's some way that can be determined statically rather than dynamically

[19:51] <TimToady> yes, which is why I said "registered"

[19:51] *** am0c^ joined
[19:51] * masak .oO( sounds a bit like Dependency Injection... )

[19:52] <TimToady> don't it?

[19:52] <TimToady> IO = "Injectable Objects"  :)

[19:53] <TimToady> almost sounds like objects with a different dispatch mechanism

[19:53] <TimToady> delegation to registrants

[19:54] <flussence> (sounds like KDE's IO stuff...)

[19:54] <[Coke]> whoa. macports not only installed perl 5, it complained that I needed to upgrade my java (which on os x, requires I agree to a dev license agreement...) what the hell was I installing again? ;)

[19:54] <hercynium> uri isn't paranoid! they really *are* out to get him!

[19:55] <masak> hercynium: or PUT, or POST, or DELETE...

[19:55] <TimToady> maybe if he changes his name to url, he can put them off his trail

[19:55] <hercynium> masak++

[19:58] <hercynium> duke of url

[19:59] * hercynium needs to call uri, I'm almost out of cocoa :)

[20:03] *** [particle]1 joined
[20:04] *** [particle] left
[20:05] *** timbunce left
[20:05] *** [particle]1 is now known as [particle]

[20:06] *** kst left
[20:06] *** kst joined
[20:07] *** cognominal joined
[20:10] *** timbunce joined
[20:11] *** plobsing joined
[20:15] *** dukeleto left
[20:16] *** dukeleto joined
[20:20] <moritz_> hello zebras!

[20:21] <tadzik> o/

[20:21] <moritz_> sorear: re apt-get install in chroot, yes that's the correct way

[20:21] <masak> moritz_! \o/

[20:21] *** cognominal left
[20:22] * masak dedicates himself to pushing out a p2 blog post

[20:24] <jnthn> o/ moritz_ 

[20:32] <colomon> \o

[20:33] <moritz_> how are things in the Perl 6 world?

[20:33] <masak> IO-y :)

[20:34] <moritz_> \IO/

[20:36] <sjohnson> yo friends of perl

[20:36] *** MayDaniel left
[20:36] <masak> sjohnson! \o/

[20:37] *** kst left
[20:37] *** kst joined
[20:40] *** plobsing left
[20:42] * dukeleto would like to announce that Parrot now supports unicode filename, thanks to nwellnhof++

[20:42] <dukeleto> unicode filenames for .pir, .pbc and .pasm, that is

[20:43] <jnthn> perl6 пиво.п6

[20:43] <dukeleto> I trust that the #perl6 folks will have the appropriate amount of fun with this :)

[20:44] <masak> you bet :)

[20:48] * TimToady wonders how parrot supports unicode filenames when the OS doesn't...

[20:58] *** c9s left
[20:59] <shortcircuit> are any of .pbc, .pir andd .pir generated by Parrot?

[20:59] <shortcircuit> er.

[20:59] <shortcircuit> .pbc, .pir and .pasm

[21:00] <masak> all of them, likely as not.

[21:01] <masak> some people insist on writing PIR by hand... :P

[21:02] <shortcircuit> Remind me to finish that GeSHi file I was working on for PIR and PASM.

[21:02] <moritz_> IMCC (which is part of parrot) compilers PIR to PBC

[21:03] <masak> the compiler that sounds like a weapon of mass destruction...

[21:04] <moritz_> IMCC vs. ICBM?

[21:04] <masak> yes, that's the association I'm making when I see it.

[21:04] <TimToady> last I heard, POSIX filesystems have no clue what their filename encodings might be

[21:05] <TimToady> is Parrot just guessing?

[21:05] <moritz_> afaict they just assume the file name to be binary

[21:07] <TimToady> one can, of course, treat filenames like blobs, but at some point you might want to print a filename in an error message

[21:07] <TimToady> not to mention reading filenames from the command line

[21:08] <moritz_> error blobs!

[21:09] <TimToady> there is no sane way forward; the least insane way forward is to assume UTF-8 unless instructed otherwise, for some insane definition of "instructed"

[21:09] <moritz_> looking at the local might be good first guess

[21:10] <TimToady> as I said, "insane"

[21:10] <moritz_> the real trouble is that linux et. al. just don't make assumptions

[21:10] <moritz_> all "system" file names are ASCII only

[21:10] <moritz_> and what the user does and what the userspace programs do is left to them

[21:11] <moritz_> aka "I'm looking in the other direction, don't bother me"

[21:11] <TimToady> forcing the metadata out of band without giving a different band for metadata

[21:11] <shortcircuit> You might probe during initialization; try creating a file with a unicode name, test that it was created, then remove it.

[21:11] <TimToady> "insane"

[21:11] <shortcircuit> I don't have an answer as to _where_ to create the file, though.

[21:12] <masak> /usr/bin :P

[21:12] <masak> what could possibly go wrong?

[21:12] <moritz_> /proc :-)

[21:12] <masak> *lol*

[21:12] <TimToady> the least insane place is '.'

[21:13] <shortcircuit> What about TMP?

[21:13] <TimToady> then at least you're probably in the right filesystem

[21:13] <shortcircuit> mm. Point.

[21:13] <TimToady> wrong filesystem

[21:13] <shortcircuit> Ech. It hit sme that you'd have to probe for each location you might try. The best you might be able to assume is that a location will be safe once shown to be safe once.

[21:14] * shortcircuit wonders what a sme would be, and what hit it.

[21:14] <moritz_> the whole idea of creating a file at startup is completely insane

[21:15] <flussence> on linux, couldn't you just check that %*ENV<LC_ALL> ~~ /.UTF-8$/?

[21:15] <TimToady> there should be a way to ask the fs (or better, directory) what encoding its filenames should be in

[21:15] <moritz_> people will start to wonder why a program behaves differently on a read-only mounted file system, even if the program nominally doesn't write a file

[21:15] <moritz_> or why the modification date of the directory changes whenever you run that program

[21:15] <TimToady> either that, or require all non-utf-8 filenames to be explicitly marked with their encoding as part of the filename

[21:16] <moritz_> let's just use the same encoding that MIME uses for email subjects

[21:16] * TimToady didn't want to barf today...

[21:17] * moritz_ barks

[21:17] <TimToady> just so you don't byte

[21:22] <flussence> I say assume utf-8 and let the minority of people with oddball fs encodings jump through hoops when they want to create filenames with squiggly characters, because any other default would lead to the opposite situation and that's crazy.

[21:23] <shortcircuit> Isn't that what Parrot did?

[21:23] <shortcircuit> (more or less analogously, anyway)

[21:25] *** plobsing joined
[21:25] <shortcircuit> moritz_: So, Rakudo can run on a read-only filesystem? (i.e. no .pir, .pasm or .pbc files will be created)

[21:26] * shortcircuit needs to learn how Unicode works on Linux. He's spent too much time coding on Windows.

[21:28] <flussence> basically, you install the OS then find out 6-8 months later you forgot to put LC_ALL=en_US.UTF-8 somewhere because all your files are showing up as ??????? :)

[21:33] <shortcircuit> Been there, done that. Too many anime soundtracks...

[21:33] <flussence> hehe

[21:36] *** plobsing left
[21:36] *** plobsing joined
[21:37] *** stkowski joined
[21:43] *** Br joined
[21:44] *** klunky left
[21:45] *** timbunce left
[21:46] *** Br left
[21:48] <[Coke]> bah. mono install finally failed, after several hours.

[21:50] <moritz_> shortcircuit: I think so, never tried

[21:50] *** MayDaniel joined
[21:51] *** timbunce joined
[21:57] *** hercynium left
[21:58] *** klunky joined
[22:01] *** klunky left
[22:02] <diakopter> [Coke]: did you try  http://ftp.novell.com/pub/mono/archive/2.8.2/macos-10-x86/1/MonoFramework-2.8.2_1.macos10.novell.x86.dmg

[22:04] <colomon> Is that the latest stable mono for OS X?  (he asked hopefully)

[22:04] <diakopter> yeah

[22:05] <diakopter> x86

[22:05] <diakopter> there's also one for ppc

[22:05] <diakopter> http://www.go-mono.com/mono-downloads/download.html

[22:06] <snarkyboojum> FWIW, that's what I installed and am using and it works a charm

[22:08] *** mtk left
[22:09] *** klunky joined
[22:17] <[Coke]> diakopter: <homer>noooo</homer>

[22:17] <[Coke]> diakopter: I found a resolution to the dependency failure that tripped me up earlier.

[22:18] <[Coke]> (so it's going again)

[22:18] <diakopter> [Coke]: use the .dmg  :)

[22:18] <[Coke]> but I'M SO CLOSE!

[22:30] *** slavik left
[22:33] *** kaare_ left
[22:35] *** plobsing left
[22:38] *** awwaiid_ joined
[22:40] *** timbunce left
[22:43] * masak hugs [Coke] 

[22:45] *** awwaiid_ left
[22:46] *** timbunce joined
[22:49] *** klunky left
[22:49] *** awwaiid_ joined
[22:50] *** bacek_ joined
[22:54] *** klunky joined
[22:54] <szabgab> crap, I cannot build parrot on win32

[22:54] <szabgab> I just sent the output to the perl6-compiler list

[22:54] <[Coke]> szabgab: did you use the wiki page?

[22:55] <szabgab> nope

[22:55] <jnthn> szabgab: More specifically, you can't build Parort on Win32 with Strawberry + its toolchain "out of the box".

[22:55] <szabgab> which wiki page?

[22:55] <szabgab> oh that's bad

[22:55] <[Coke]> szabgab: http://trac.parrot.org/parrot/wiki/Platforms/Windows

[22:55] <jnthn> szabgab: With ActivePerl + MSVC toolchain, it "just works". Ideally it should work for both though.

[22:55] <[Coke]> and it used to. someone broke it.

[22:55] <jnthn> [Coke]: *nod*

[22:56] <szabgab> it is something "new" it worked last time I checked on this machine

[22:56] <[Coke]> I hope to have some time tomorrow to hack on that.

[22:56] *** shi joined
[22:56] <jnthn> [Coke]: Suspect it's that nobody doing regular Parrot or Rakudo dev is building on that platform.

[22:56] <szabgab> I'll be in the Alps by that time without network and I wanted to have it working

[22:56] <szabgab> I shoudl have stayed with the one from 2 months ago :(

[22:56] <[Coke]> jnthn: often enough that we have a workaround, though. ;)

[22:56] <jnthn> [Coke]: Aye.

[22:58] *** visitor_ joined
[22:59] *** klunky left
[23:00] *** timbunce left
[23:00] <szabgab> gmake is not recognized as an internal or external command

[23:01] <szabgab> but that's what the wiki said

[23:01] <szabgab> mingw32-make works, I wonder if it will be good

[23:02] <szabgab> oh there is a whole list at the bottom of that page

[23:02] <[Coke]> yay, I can run niecza on my OS X box.

[23:02] <[Coke]> Is it currently slow?

[23:03] <[Coke]> (the initial say "hi" is slow, but future say invocations seem zippy.)

[23:04] *** klunky joined
[23:06] <sorear> It's currently slower than Perl 5 in most cases

[23:06] <sorear> I consider this a flaw

[23:07] <sorear> Parse time is a LOT slower than Perl 5 because it's using STD.pm6, not yacc

[23:07] <sorear> niecza treats CORE.setting as just another module to be compiled on first use, which is why the first say is so slow

[23:09] <visitor_> wer i can see example on array of arry slicing under perl6?

[23:10] <masak> here! :)

[23:10] *** hugme left
[23:11] <masak> rakudo: my @array = 0..10; say @array[4..7]

[23:11] <p6eval> rakudo 388eed: OUTPUT«4567␤»

[23:11] <masak> rakudo: my @array = 0..10; say @array[4..7].perl

[23:11] <p6eval> rakudo 388eed: OUTPUT«(4, 5, 6, 7)␤»

[23:11] <masak> visitor_: any questions?

[23:13] *** kfo joined
[23:15] <visitor_> masak: Ah, I mean if i wants to get at a slice (part of a row) in multidimensional array.

[23:16] <visitor_> masak: same as i did under perl5?

[23:16] *** kfo_ left
[23:17] <huf> @array[range;range;range;.....] i guess, tho iirc the @array[range][range]... syntax works too

[23:17] <huf> but i'm not sure

[23:17] <masak> rakudo: my @matrix = [1, 2, 3], [4, 5, 6]; say @matrix[1][1..2].perl

[23:17] <p6eval> rakudo 388eed: OUTPUT«(5, 6)␤»

[23:17] <masak> huf: hum, I've never considered many ranges in a multidim indexing... should work, though...

[23:17] *** justatheory left
[23:17] <masak> ES09TOOSLUDGY

[23:18] <huf> masak: i seem to recall seeing this in whatever i read to learn about the array syntax

[23:19] <huf> but i'll be damned if i know what

[23:19] <masak> S09.

[23:19] <masak> probably.

[23:19] <visitor_> masak: let us say I need 1 and 2 from first array and 5 and 6 from second array, how i put that?

[23:21] <sorear> [Coke]: need anything else?

[23:26] <masak> rakudo: my @matrix = [1, 2, 3], [4, 5, 6]; say (@matrix[0][0..1], @matrix[1][1..2]).perl

[23:26] <p6eval> rakudo 388eed: OUTPUT«((1, 2), (5, 6))␤»

[23:26] <masak> visitor_: like that? :)

[23:26] <masak> it's possible to do shorter, but you didn't say whether there was a pattern.

[23:27] <visitor_> masak: yes, it is clear and nice to look at!

[23:28] <masak> \o/

[23:28] <masak> visitor_: as huf++ mentions, there's also a semicolon syntax, but no implementation has it yet.

[23:29] <visitor_> reference based method for dealing with complex data structure is no longer used un perl6 ?

[23:29] <masak> TimToady: would the .[ $a..$b ; $c..$d ] be able to pull out a sub-rectangle of an array of arrays?

[23:30] <masak> visitor_: the references are there. you just don't see them anymore.

[23:30] <masak> like in Java.

[23:30] <dukeleto> Anybody considering writing a Perl 6 version of JSYNC? https://github.com/ingydotnet/jsync-pm

[23:30] <visitor_> thank god.. it was a nightmare.. 

[23:31] <masak> dukeleto: I think ingy was at some point...

[23:31] <dukeleto> masak: i heard rumors, but I can't find any code...

[23:32] <masak> probably best to ask ingy. :)

[23:34] <sorear> niecza: use JSYNC; my @array; push @array, $(@array); say to-jsync(@array)

[23:34] <TimToady> masak: yes, subrectangles are supported by S09 slicing

[23:34] <p6eval> niecza v1-181-g98d0cc5: OUTPUT«(timeout)»

[23:34] <sorear> niecza: use JSYNC; my @array; push @array, $(@array); say to-jsync(@array)

[23:35] <masak> TimToady: \o/

[23:35] <p6eval> niecza v1-181-g98d0cc5: OUTPUT«===SORRY!===␤␤Q:CgOp not allowed in safe mode at /home/p6eval/niecza/lib/JSYNC.pm6 line 5:␤------> :CgOp { (box Str (to_jsync (@ {$obj}))) ⏏} }␤␤Q:CgOp not allowed in safe mode at /home/p6eval/niecza/lib/JSYNC.pm6 line 6:␤------>

[23:35] <p6eval> ..ns (from_j…

[23:35] <sorear> bah

[23:35] <sorear> stupid safe mode

[23:35] <sorear> TimToady: so qp{foo} and $*IN have the same type?

[23:35] <TimToady> the intent is to do nearly everything you can do today in PDL via a native syntax

[23:36] <sorear> dukeleto: niecza has native JSYNC support via C# code, does that count?

[23:36] <TimToady> I would say, more like, different types that can be used as the same type under some operations

[23:36] <TimToady> and IO is that umbrella type

[23:37] <TimToady> but $*IN's identity is just a file descriptor

[23:37] <TimToady> and qp{foo}'s identity comes via a filename

[23:37] <dukeleto> sorear: sure! That is cool.

[23:38] *** visitor_ left
[23:38] <dukeleto> TimToady: native PDL-like syntax is very awesome

[23:39] <TimToady> only if it ever gets implemented :)

[23:39] <dukeleto> TimToady: sounds fun to my sick sick mind :)

[23:39] <sorear> TimToady: Is IO a mutable type?  If $f = qp{foo}; can $f's identity change to "descriptor"?

[23:40] <TimToady> I suspect IO is mutable in that way

[23:41] <TimToady> though perhaps it's more like "but" mixins

[23:41] <sorear> "but" or "does"?

[23:41] <TimToady> does would probably be harder

[23:42] <TimToady> but maybe is necessary

[23:43] <TimToady> certainly filehandles have always been "mutable" with respect to, say, file pointer

[23:43] *** am0c^ left
[23:43] <TimToady> so maybe IO is a kind of container

[23:43] <masak> blig blag blog. http://strangelyconsistent.org/blog/p2-is-the-point-in-the-polygon

[23:45] *** snearch left
[23:50] *** vmspb joined
[23:54] <sorear> masak++

[23:56] *** slavik joined
[23:56] <TimToady> masak: in http://strangelyconsistent.org/p6cc2010/p2-matthias/ you missed the idiomatic use of: if $bx - $ax -> $dx {

[23:57] <masak> that's true. adding that.

[23:57] <masak> TimToady++

[23:57] *** shi left
[23:58] *** cafesofie joined
[23:59] *** slavik left
[23:59] *** slavik joined
