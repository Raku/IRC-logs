[00:08] <lue> in a for loop (e.g    for @a -> $b), is there an easy way to tell if I have the last element of @a in $b ? [ I was thinking of creating some sort of $last flag if not ]

[00:09] *** thowe left
[00:09] *** kjeldahl left
[00:11] *** paroxyzm joined
[00:12] <tadzik> lue: if $b == @a[*-1]?

[00:22] *** shi joined
[00:22] <lue> That's what I'll do. I was just wondering if there was some nifty hidden function in a for loop I was unaware of :)

[00:24] <tadzik> jnthn: I'm tadzik :)

[00:25] <tadzik> „Encouraged by tadzkik++, added META.info files to some of my modules”

[00:35] *** pmurias joined
[00:38] <dalek> niecza: 301b2c1 | pmurias++ | / (2 files):

[00:38] <dalek> niecza: hacking on the lisp backend to bring it closer to subs

[00:38] <dalek> niecza: review: https://github.com/sorear/niecza/commit/301b2c19dc

[00:38] <dalek> niecza: 183d166 | pmurias++ | cl-backend/backend.lisp:

[00:38] <dalek> niecza: sub calls work in the clisp backend

[00:38] <dalek> niecza: review: https://github.com/sorear/niecza/commit/183d166fda

[00:38] <dalek> sprixel: 4e9752d | diakopter++ | / (15 files):

[00:38] <dalek> sprixel: enable fully recursive/self-referential custom classes

[00:38] <dalek> sprixel: (in their attribute type annotations & method signatures).

[00:38] <dalek> sprixel: Validate single inheritance works with the same.

[00:38] <dalek> sprixel: Had to prepend YApass. :)

[00:38] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/4e9752d3d0

[00:40] <diakopter> pmurias: hi :)

[00:40] *** avms left
[00:40] <pmurias> diakopter: hi

[00:43] *** fhelmberger joined
[00:49] *** buubot joined
[00:51] <dalek> sprixel: 68b9a2a | diakopter++ | sprixel/src/ (5 files):

[00:51] <dalek> sprixel: don't use a class munging prefix... I guess.

[00:51] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/68b9a2ad4c

[00:59] <dalek> niecza: 2e66cf1 | pmurias++ | cl-backend/backend.lisp:

[00:59] <dalek> niecza: add &infix:~ to the clisp backend

[00:59] <dalek> niecza: pass 01-sanity.t

[00:59] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2e66cf1c08

[00:59] <pmurias> sorear: i'll hack on the clisp backend so i don't get in the way

[01:09] <dalek> sprixel: c74daea | diakopter++ | sprixel/src/ (2 files):

[01:09] <dalek> sprixel: strip sigil from attribute name... I guess

[01:09] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/c74daeab79

[01:10] <diakopter> perlesque: class Foo is Bar { has string $slot1; my $f=Foo.new(); method la { say("slot1 is: "~this.get_Bar_f().slot1); say($f~this.tra()); say("slot1 is: "~this.get_Bar_f().slot1) } }; class Bar { my $f=Foo.new(); method baz { $f.slot1="heehee" }; method get_Bar_f(-->Foo){return $f}; method tra(-->string){this.baz(); return "oopsie"}}; Foo.new().la()

[01:10] <p6eval> perlesque: OUTPUT«slot1 is: ␤Foooopsie␤slot1 is: heehee␤»

[01:10] <diakopter> har. not readable

[01:10] <diakopter> (and yes I know the attribute declaration syntax is not correct)

[01:14] <dalek> sprixel: 072d593 | diakopter++ | / (6 files):

[01:14] <dalek> sprixel: fix attribute syntax so it's a *little* closer to spec

[01:14] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/072d5936f6

[01:14] <diakopter> there, a little better:

[01:15] <diakopter> perlesque: class Foo is Bar { has string $!slot1; my $f=Foo.new(); method la { say("slot1 is: "~this.get_Bar_f()!slot1); say($f~this.tra()); say("slot1 is: "~this.get_Bar_f()!slot1) } }; class Bar { my $f=Foo.new(); method baz { $f!slot1="heehee" }; method get_Bar_f(-->Foo){return $f}; method tra(-->string){this.baz(); return "oopsie"}}; Foo.new().la()

[01:15] <p6eval> perlesque: OUTPUT«slot1 is: ␤Foooopsie␤slot1 is: heehee␤»

[01:15] <diakopter> I dunno how to deal with "private" field access on an object other than on "this"

[01:16] <diakopter> sorear: do you know?

[01:16] <diakopter> masak?  anyone?

[01:16] <sorear> ldfld?

[01:16] <diakopter> no, I mean p6 syntax

[01:16] <pmurias> ldfld?

[01:17] <sorear> diakopter: $obj!field

[01:17] <pmurias> is there a test suit for young perl 6 implementations?

[01:17] <diakopter> ok..  so I'd have to store to a tmp var instead of this? (ewww)  this.get_Bar_f()!slot1

[01:17] <sorear> diakopter: that will work too

[01:18] <diakopter> oh good :)

[01:18] * diakopter tries it out on std

[01:18] <sorear> pmurias: this is why niecza has its own test suite.... you might be able to use the early parts as is

[01:18] * sorear is researching filesystems

[01:18] <pmurias> there are sanity tests

[01:19] <pmurias> mu/t/01-sanity

[01:21] <pmurias> where can i find early revisions of pugs?

[01:21] <diakopter> heh

[01:24] <dalek> sprixel: 445c781 | diakopter++ | / (6 files):

[01:24] <dalek> sprixel: argh. rename 'this' to 'self' globally; /me dumb, for the 90th time at least.

[01:24] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/445c781874

[01:24] *** takadonet joined
[01:25] <takadonet> yo

[01:25] <pmurias> would anybody else besides me have a use for a simplified tests suit? (having simple tests for very basic functionality)?

[01:25] <diakopter> there we go

[01:25] <pmurias> diakopter: ?

[01:25] <diakopter> pmurias: sure, me

[01:26] <diakopter> "there we go" referred to 445c781

[01:26] <pmurias> diakopter: perlesque requires type info on things?

[01:27] <diakopter> technically, yeah, but in reality it infers types on declarations. but if you want a variable to be "wider" than its initializing expression, you can denote the wider type

[01:27] <diakopter> technically, meaning, "to conform to spec" ;)

[01:28] <pmurias> i can also reuse tests from mildew

[01:28] <pmurias> sleep&

[01:29] <diakopter> in other words, the subset of p6 that is perlesque requires type annotations on all declarations of lexicals and routine signatures. but a hidden "easter egg" feature is that it can infer types. ;)

[01:29] *** pmurias left
[01:29] <diakopter> (which isn't to spec, since those would normally be much wider, like Any or Cool or Mu or whatever they do these days

[01:33] *** risou joined
[01:37] *** MayDaniel left
[01:37] <sorear> diakopter: is it possible in .net to use a single code path for all kinds of file system objects, or am I stuck doing Directory.Exists(str) ? Directory.GetCreationTime(str) : File.GetCreationTime(str)

[01:38] <lue> are @x[1][1] and @a[1;1] equivalent expressions?

[01:40] <TimToady> with those particular values they are, but [][] can't deal with multidimensionality

[01:40] <TimToady> well, I oversimplify

[01:41] <TimToady> [][] cannot express multidimensionality; it can only deref one dimension at a time

[01:41] <TimToady> you can write @a[ ||@hyperslice ] which has implied ;'s in it

[01:42] <lue> rakudo: my @a = [1,2],[3,4]; say @a[1][1]; say @a[1;1]

[01:42] <p6eval> rakudo e7e9d5: OUTPUT«4␤3 4␤»

[01:42] <lue> bug?

[01:42] <TimToady> sure looks like, but rakudo does almost none of S09 yet

[01:43] <TimToady> is probably evalating 1;1 as a statement list and getting 1

[01:44] <takadonet> yet

[01:44] <TimToady> *u

[01:45] <TimToady> rakudo: my @a = [1,2],[3,4]; say @a[42;1]

[01:45] <p6eval> rakudo e7e9d5: OUTPUT«3 4␤»

[01:45] <TimToady> sometimes the answer to LUE is meaningless :)

[01:47] <lue> rakudo: 42?;

[01:47] <p6eval> rakudo e7e9d5: OUTPUT«===SORRY!===␤Confused at line 22, near "42?;"␤»

[01:51] <TimToady> sorear: you can't combine $x with Parcel($x) if that's the distinction you need to dispatch infix:<=> correctly to item vs listy container; druther say that they are distinct but that items can behave like parcels at need

[01:53] <TimToady> or are you thinking of distinguishing $x= from ($x)= some other way?

[01:54] <TimToady> (not distinguishing them is, I think, not acceptable to the Perl 5 brane, which I have one of)

[01:55] *** paroxyzm left
[01:55] <diakopter> perlesque: my @a = [[1,2],[3,4]]; say(@a[1][1]);

[01:55] <p6eval> perlesque: OUTPUT«4␤»

[01:57] <diakopter> perlesque: my @a = [[1,2],[3,4]]; say(@a[1][1]); say(@a[1;1]);

[01:57] <p6eval> perlesque: OUTPUT«␤Unhandled Exception: System.ArgumentException: Index count mismatch␤  at sprixel.Operands.ArrayAccess..ctor (sprixel.Operand array, sprixel.Operand[] indexes) [0x00000] in <filename unknown>:0 ␤  at sprixel.Operand.get_Item (sprixel.Operand[] indexes) [0x00000] in <filename

[01:57] <p6eval> ..unknow…

[01:58] <TimToady> perlesque: my @a[2;2] = (1,2),(2,4);  say @a[1][1]; say @a[1;1]

[01:58] <p6eval> perlesque: OUTPUT«unhandled node type: <invalid>␤Statement_list 1␤ Statement_list 2␤  Sub_declaration 3␤   IDENT say␤   Statement_list 1␤    Statement_list 1␤     Infix_expr 1␤      Infix_expr 1␤       Infix_expr 1␤        Infix_expr 1␤         Infix_expr 1␤          Infix_expr 1␤          

[01:58] <p6eval> ..Tail_exp…

[01:58] <diakopter> I think I can make that work

[01:58] *** GinoMan left
[01:58] <diakopter> there's no list context

[02:00] <diakopter> perlesque: my int @a[2;2]; @a = [[1,2],[3,4]]; say(@a[1;1])

[02:00] <p6eval> perlesque: OUTPUT«␤Unhandled Exception: System.InvalidCastException: Cannot convert type from 'System.Int32[][]' to 'System.Int32[,]'␤  at sprixel.Conversion+Invalid.Emit (sprixel.CodeGen g, System.Type from, System.Type to) [0x00000] in <filename unknown>:0 ␤  at sprixel.CodeGen.Convert

[02:00] <p6eval> ..(sprixel.Op…

[02:01] *** noganex_ joined
[02:01] <diakopter> no list context, meaning only the [] work

[02:01] *** _jaldhar joined
[02:02] <diakopter> I can get the accessor to work, but maybe not the decomposing setter

[02:02] *** jaldhar left
[02:02] <diakopter> well, maybe

[02:04] *** noganex left
[02:06] <diakopter> given that perlesque is generally intended to be an intermediate representation and a language in which to write a bootstrapping compiler framework, such literals (such as one might find in one-off scripts or stand-alone programs) aren't expected to be a common case

[02:07] <TimToady> 1 way to write something is probably sufficient in that case

[02:07] <diakopter> perlesque: my int @a[2;2]; @a[0;0]=1;@a[0;1]=2;@a[1;0]=3;@a[1;1]=4; say(@a[1;1])

[02:07] <p6eval> perlesque: OUTPUT«4␤»

[02:07] <diakopter> there's the way :)

[02:08] <diakopter> actually there is a blockcopy routine that one can use from a flat array...

[02:08] <diakopter> since the multidim array is stored flat anyway...

[02:08] <diakopter> perlesque: my long @a[2;2]; @a[0;0]=1;@a[0;1]=2;@a[1;0]=3;@a[1;1]=4; say(@a[1;1])

[02:08] <p6eval> perlesque: OUTPUT«4␤»

[02:09] <diakopter> perlesque: my decimal @a[2;2]; @a[0;0]=1;@a[0;1]=2;@a[1;0]=3;@a[1;1]=4; say(@a[1;1])

[02:09] <p6eval> perlesque: OUTPUT«␤Unhandled Exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.InvalidProgramException: Invalid IL code in t:Exec (): IL_003d: ldelema   0x01000004␤␤␤  at sprixel.FrameBase.Run () [0x00000] in <filename

[02:09] <p6eval> ..unkno…

[02:09] <diakopter> oo interesting; runsharp bug

[02:09] *** risou left
[02:10] <diakopter> perlesque: my decimal $a = 4; say($a.GetType)

[02:10] <p6eval> perlesque: OUTPUT«System.Decimal␤»

[02:11] <diakopter> perlesque: my decimal128 $a = 4; say($a.GetType)

[02:11] <p6eval> perlesque: OUTPUT«␤Unhandled Exception: System.Exception: could not resolve type decimal128␤  at sprixel.Env.ResolveType (System.String typeName) [0x00000] in <filename unknown>:0 ␤  at sprixel.perlesqueParser.emitCode (sprixel.Env e, Antlr.Runtime.Tree.CommonTree node,

[02:11] <p6eval> ..Antlr.Runtime.Tree.CommonTree…

[02:11] <diakopter> heh

[02:11] *** risou joined
[02:16] <lue> blog post! https://rdstar.wordpress.com/2011/01/09/ordinal-numbers-and-musical-camelias/

[02:16] <lue> afk

[02:19] <diakopter> TimToady: now that perlesque has 1. classes with single inheritance (from clr builtin types or perlesque-declared types), 2. method & attribute signatures that can refer to other perlesque classes, 3. recursive method invocations incorporated into the ("stackless") trampoline, 4. typed (multidim) arrays, and 5. recursive/nested eval EXPR,  it's *finally* ready to accept highly desugared p5 code

[02:19] <diakopter> Cursor, and translated from STD 

[02:20] *** redicaps joined
[02:20] <TimToady> \o/

[02:21] <diakopter> I guess what I'm asking is, how can I help provide use cases/tests for STD_P5 :)

[02:21] <diakopter> a leading question if ever I saw one

[02:22] <TimToady> Your leading question balances out my trailing answer rather nicely.

[02:24] <diakopter> hrm

[02:25] <diakopter> anyone have comments on http://host04.appflux.net/STD.pm6.simple.html  before I link it from perl6.org/compilers/std-viv ?

[02:31] <TimToady> the bold/normal distinctions kinda bother me

[02:32] <diakopter> how should they be adjusted/removed?

[02:33] *** 13WAAYULM left
[02:33] <diakopter> seems like it's bolding comments, variable names, and sigils

[02:33] <TimToady> and normal methods, but not <.methods>

[02:33] <diakopter> oh, hm, this is weird

[02:34] <diakopter> search for  backslash:oldbackref

[02:34] <diakopter> must be a mis-parse

[02:35] <TimToady> something wierd on push @nibbles too

[02:35] <TimToady> one of the pushes is bold

[02:36] <diakopter> which browser are you using

[02:36] <TimToady> ff

[02:36] <diakopter> odd; both chrome and ff have oldbackref in blue

[02:36] <diakopter> I mean

[02:36] <diakopter> sec

[02:36] <TimToady> in the particular fonts I'm using, I rather everything was bold

[02:37] <TimToady> the non-bold is hard to read

[02:37] <TimToady> and the colors disappear-ish

[02:37] <diakopter> backslash before oldbackref is marked "_scalar"

[02:38] <diakopter> whereas backslash before the others is marked "regex_declarator"

[02:38] *** HarryS joined
[02:38] *** HarryS left
[02:38] *** HarryS joined
[02:38] <TimToady> I've always thought that highlighter was a bit...suboptimal

[02:39] <diakopter> mebbe we should verify it's not a bug in std...

[02:39] <TimToady> I'd think sorear++ would have found it if so

[02:39] *** shi left
[02:41] <diakopter> but oldbackref ff. are error paths

[02:42] <diakopter> (so maybe std is failing to parse something that token line, and it's falling back to some kind of scaler

[02:42] <diakopter> scalar

[02:42] <TimToady> Herestub.new is also strange in the pair list

[02:44] * diakopter adds some tracing to the hiliter

[02:45] <TimToady> something wrong in the token comment: area too

[02:47] <TimToady> the highlighter seems to keep some state that is unrelated to the actual context, and gets out of sync, rather than relying on the stack of outer contexts, I think

[02:47] <TimToady> iirc

[02:47] * diakopter looks at redspans_traverse

[02:49] * TimToady wanders off for a bit

[02:49] <diakopter> oh wait

[02:49] <diakopter> this is TimToady code

[02:57] *** yarp joined
[03:17] *** hacknperl joined
[03:17] *** envi joined
[03:45] *** yarp left
[03:47] *** Sarten-X left
[03:47] *** ashleydev joined
[03:57] <takadonet> quiet night...

[04:05] *** yarp joined
[04:11] <sorear> TimToady: actually, it's more a case of me wanting ($x) and ($x,) to be the same

[04:16] *** flatwhatson_ left
[04:18] *** orafu left
[04:20] *** orafu joined
[04:24] *** Su-Shee left
[04:28] *** Su-Shee joined
[04:35] *** yarp left
[04:39] *** lopaway is now known as lopnor

[04:45] <takadonet> rakudo: my $x= ' '; $x ~~ s:g/ /\\s/; say $x;

[04:45] <p6eval> rakudo e7e9d5: OUTPUT«\s \s␤»

[04:49] <TimToady> er...

[04:49] <TimToady> I see what happened, but it should've been a compile error

[04:50] <TimToady> std: my $x= ' '; $x ~~ s:g/ /\\s/; say $x;

[04:50] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Null pattern not allowed at /tmp/RpxVpfZ42U line 1:␤------> my $x= ' '; $x ~~ s:g/ ⏏/\\s/; say $x;␤    expecting quantifier␤Parse failed␤FAILED 00:01 123m␤»

[04:52] <takadonet> indeed

[04:52] <takadonet> it's the :g flag that mucking it up

[04:53] <TimToady> no, it's working exactly as it ought to, if it really were matching a null string

[04:53] <takadonet> ic

[04:54] <TimToady> rakudo: my $x= ' '; $x ~~ s:g/ ' ' /\\s/; say $x;

[04:54] <p6eval> rakudo e7e9d5: OUTPUT«\s␤»

[04:54] <TimToady> rakudo: my $x= ' '; $x ~~ s:g/ '' /\\s/; say $x;

[04:54] <p6eval> rakudo e7e9d5: OUTPUT«\s \s␤»

[04:55] <takadonet> well i already changed my p5 code that i'm ported to my workaround....

[04:55] <takadonet> fix it later

[04:56] *** lopnor is now known as lopaway

[04:58] *** risou left
[05:04] *** icwiener joined
[05:11] *** takadonet left
[05:27] *** ashleydev left
[05:33] *** ashleydev joined
[05:34] *** gbacon left
[05:52] *** ashleydev left
[05:53] *** lopaway is now known as lopnor

[06:00] *** yarp joined
[06:04] <diakopter> TimToady: I reduced it to a minimal test case (that causes "b" to be marked a "_scalar" instead of "regex_declarator").. I realize it's not very sensical, but it parses:   $<l>; token b { . }

[06:05] <diakopter> I suspect something is not actually descending into the <l>

[06:08] *** Eimantas joined
[06:10] <diakopter> oh, I think I found the bug

[06:16] *** justatheory left
[06:16] <diakopter> o_O

[06:16] <diakopter> brane gymnastics are a good use of saturday evening

[06:18] * diakopter tests the fix on the full STD.pm6

[06:22] <diakopter> closer, hm... /me keeps at it

[06:24] *** coldhead left
[06:27] <diakopter> :/

[06:27] <redicaps> perl6: @a=<5 4 2>; my :($f, *@r) := \(|@a); say $f.perl

[06:27] <p6eval> niecza v1-111-g2e66cf1: OUTPUT«===SORRY!===␤Variable @a is not predeclared at /tmp/XsvUGQwG56 line 1:␤------> @a⏏=<5 4 2>; my :($f, *@r) := \(|@a); say $␤Malformed my at /tmp/XsvUGQwG56 line 1:␤------> @a=<5 4 2>; my ⏏:($f, *@r) := \(|@a); say

[06:27] <p6eval> ..$f.perl␤    e…

[06:27] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "=<"␤    expecting "::"␤    Variable "@a" requires predeclaration or explicit package name␤    at /tmp/IDRSHCdlv9 line 1, column 3␤»

[06:27] <p6eval> ..rakudo e7e9d5: OUTPUT«===SORRY!===␤Malformed my at line 22, near ":($f, *@r)"␤»

[06:29] <redicaps> rakudo: my @a=<5 4 2>; my :($f, *@r) := \(|@a); say $f.perl

[06:29] <p6eval> rakudo e7e9d5: OUTPUT«===SORRY!===␤Malformed my at line 22, near ":($f, *@r)"␤»

[06:30] <redicaps> Hi perl6er, this code is taken from the latest Using-Perl-6 book, which breaks in rakudo

[06:31] <TimToady> std: @a=<5 4 2>; my :($f, *@r) := \(|@a); say $f.perl

[06:31] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Variable @a is not predeclared at /tmp/nnBPgAkd94 line 1:␤------> @a⏏=<5 4 2>; my :($f, *@r) := \(|@a); say $␤Malformed my at /tmp/nnBPgAkd94 line 1:␤------> @a=<5 4 2>; my ⏏:($f, *@r) := \(|@a); say $f.perl␤  

[06:31] <p6eval> .. e…

[06:31] <TimToady> std: @a=<5 4 2>; my ($f, *@r) := \(|@a); say $f.perl

[06:31] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Variable @a is not predeclared at /tmp/VQaVb3rOo5 line 1:␤------> @a⏏=<5 4 2>; my ($f, *@r) := \(|@a); say $f␤Variable @a is not predeclared at /tmp/VQaVb3rOo5 line 1:␤------> @a=<5 4 2>; my ($f, *@r) := \(|@a⏏);

[06:31] <p6eval> ..say …

[06:31] <TimToady> std: @a=<5 4 2>; my :($f, *@r) := \(|@r); say $f.perl

[06:31] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Variable @a is not predeclared at /tmp/N0ZdbYj7Zz line 1:␤------> @a⏏=<5 4 2>; my :($f, *@r) := \(|@r); say $␤Malformed my at /tmp/N0ZdbYj7Zz line 1:␤------> @a=<5 4 2>; my ⏏:($f, *@r) := \(|@r); say $f.perl␤  

[06:31] <p6eval> .. e…

[06:31] <TimToady> std: my @a=<5 4 2>; my ($f, *@r) := \(|@a); say $f.perl

[06:31] <p6eval> std 625303c: OUTPUT«ok 00:01 124m␤»

[06:32] <TimToady> perl6: my @a=<5 4 2>; my ($f, *@r) := \(|@a); say $f.perl

[06:32] <p6eval> niecza v1-111-g2e66cf1: OUTPUT«===SORRY!===␤Action method capture not yet implemented at /home/p6eval/niecza/src/Niecza/Actions.pm line 55.␤Action method capterm not yet implemented at /home/p6eval/niecza/src/Niecza/Actions.pm line 55.␤invalid undef here at

[06:32] <p6eval> ../home/p6eval/niecza/src/Niecza/Action…

[06:32] <p6eval> ..pugs: OUTPUT«*** Wrong number of binding parameters: 1 actual, 2 expected␤    at /tmp/P6KzQBqqoh line 1, column 16-38␤»

[06:32] <p6eval> ..rakudo e7e9d5: OUTPUT«\(\("5", "4", "2"))␤»

[06:32] <TimToady> perl6: my @a=<5 4 2>; my :($f, *@r) := \(|@a); say $f.perl

[06:32] <p6eval> pugs: OUTPUT«*** Wrong number of binding parameters: 1 actual, 2 expected␤    at /tmp/RGC4v1i77i line 1, column 16-39␤»

[06:32] <p6eval> ..rakudo e7e9d5: OUTPUT«===SORRY!===␤Malformed my at line 22, near ":($f, *@r)"␤»

[06:32] <p6eval> ..niecza v1-111-g2e66cf1: OUTPUT«===SORRY!===␤Malformed my at /tmp/tXxmjpsgVT line 1:␤------> my @a=<5 4 2>; my ⏏:($f, *@r) := \(|@a); say $f.perl␤    expecting scoped declarator␤Parse failed␤»

[06:33] <redicaps> rakudo: my @a=<5 4 2>; my ($f, *@r) := \(|@a); say $f.perl

[06:33] <p6eval> rakudo e7e9d5: OUTPUT«\(\("5", "4", "2"))␤»

[06:33] <TimToady> perl6: my @a=<5 4 2>; my ($f, *@r) := |@a; say $f.perl

[06:33] <p6eval> niecza v1-111-g2e66cf1: OUTPUT«Illegal use of Op::SimpleParcel in bvalue context at /home/p6eval/niecza/src/Op.pm line 40␤      Op::code_bvalue('Op::SimpleParcel=HASH(0x79ce5e0)', 'Metamodel::StaticSub=HASH(0x7944a98)', 0, 'CgOpNode=ARRAY(0x7c829c0)') called at /home/p6eval/niecza/src/Op.pm line

[06:33] <p6eval> ..714␤   Op::Bind::code('…

[06:33] <p6eval> ..rakudo e7e9d5: OUTPUT«\("5", "4", "2")␤»

[06:33] <p6eval> ..pugs: OUTPUT«*** Wrong number of binding parameters: 1 actual, 2 expected␤    at /tmp/GOPC0Z8i3t line 1, column 16-35␤»

[06:34] <TimToady> looks like rakudo has it right

[06:34] <TimToady> you don't need the double capture

[06:35] <redicaps> What the code want in  the book is to put first element in @a to $first, and others to @rest, but what we get here in $first is a capture

[06:35] <TimToady> because of the extra \

[06:35] <TimToady> use what I wrote last

[06:36] <TimToady> the book is wrong there

[06:37] *** coldhead joined
[06:38] <redicaps> rakudo: my @a=<5 4 2>; my ($f, *@r) := @a; say $f.perl

[06:38] <p6eval> rakudo e7e9d5: OUTPUT«["5", "4", "2"]␤»

[06:39] <TimToady> you need the | to insert @a as more than one arg

[06:39] <redicaps> rakudo: my @a=<5 4 2>; my ($f, *@r) := |@a; say $f.perl

[06:39] <p6eval> rakudo e7e9d5: OUTPUT«\("5", "4", "2")␤»

[06:39] <redicaps> but the out put is still a list here?

[06:40] <redicaps> I am expecting just a 5

[06:40] <TimToady> hmm

[06:41] <TimToady> perl6: my @a = <5 4 2>; my ($f, *@r) = |@a; say $f.perl

[06:41] <p6eval> rakudo e7e9d5: OUTPUT«\("5", "4", "2")␤»

[06:41] <p6eval> ..pugs: OUTPUT«\"5"␤»

[06:41] <p6eval> ..niecza v1-111-g2e66cf1: OUTPUT«␤Unhandled Exception: System.Exception: Unable to find lexical &prefix:<|> in mainline␤  at Niecza.CLRBackend.NamProcessor.ResolveLex (System.String name, System.Int32& uplevel, Boolean core) [0x00000] in <filename unknown>:0 ␤  at

[06:41] <p6eval> ..Niecza.CLRBackend.NamProcessor.RawAccessLex (Syste…

[06:42] <TimToady> pugs: my @a = <5 4 2>; my ($f, *@r) := |@a; say $f.perl

[06:42] <p6eval> pugs: OUTPUT«*** Wrong number of binding parameters: 1 actual, 2 expected␤    at /tmp/lhmnyUXyh_ line 1, column 18-37␤»

[06:42] <TimToady> pugs: my @a = <5 4 2>; say @a.elems

[06:42] <p6eval> pugs: OUTPUT«3␤»

[06:42] <TimToady> strange

[06:43] <sorear> I guess pugs is interpreting the RHS as an expression, not an argument list

[06:43] <redicaps> TimToady:  what should be the right syntax here?

[06:43] <TimToady> dunno

[06:44] <TimToady> rakudo: my @a = <5 4 2>; my ($f, *@r) := |@a; say $f.perl

[06:44] <p6eval> rakudo e7e9d5: OUTPUT«\("5", "4", "2")␤»

[06:44] <dalek> niecza: b56c97d | sorear++ | / (2 files):

[06:44] <dalek> niecza: [v6] Fill in path-manip methods

[06:44] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b56c97da79

[06:44] <TimToady> rakudo: my @a = <5 4 2>; my ($f, *@r) := (|@a); say $f.perl

[06:44] <p6eval> rakudo e7e9d5: OUTPUT«\("5", "4", "2")␤»

[06:46] <TimToady> rakudo: my @a = <5 4 2>; my ($f, *@r) ::= (|@a); say $f.perl

[06:46] <p6eval> rakudo e7e9d5: OUTPUT«Any␤»

[06:47] <TimToady> rakudo: my @a = <5 4 2>; my $f; my @r; :($f, *@r) := |@a; say $f.perl

[06:47] <p6eval> rakudo e7e9d5: OUTPUT«Any␤»

[06:48] <TimToady> rakudo: my @a = <5 4 2>; my ($f, *@r) := |(|@a); say $f.perl

[06:49] <p6eval> rakudo e7e9d5: OUTPUT«\("5", "4", "2")␤»

[06:49] <TimToady> bizarre

[06:49] <TimToady> rakudo: my @a = <5 4 2>; my ($f, *@r) := |@a.list; say $f.perl

[06:49] <p6eval> rakudo e7e9d5: OUTPUT«\("5", "4", "2")␤»

[06:50] *** lopnor is now known as lopaway

[07:00] *** Eimantas left
[07:12] *** icwiener left
[07:16] *** lopaway is now known as lopnor

[07:17] <sorear> makes total sense to *me*

[07:30] *** prabuinet joined
[07:31] <prabuinet> i'm getting error when running rakudo on windows , "could not load oplib `perl6_ops`" ,

[07:31] <prabuinet> anybody have a solution?

[07:37] <prabuinet> hi

[07:47] <sorear> that's usually caused by incorrect installation

[07:48] <sorear> hi

[07:48] <sorear> and welcome to #perl6

[07:48] <prabuinet> sorear, what to do?

[07:48] <sorear> prabuinet: read the documentation carefully, see what you did wrong

[07:48] <sorear> not knowing what exactly you did, I can't guess myself

[07:49] <prabuinet> sorear, i just installed the msi

[07:49] <sorear> ok, that's out of my domain

[07:49] <sorear> which msi?

[07:50] <prabuinet> from sourceforge

[07:50] <sorear> which msi from sourceforge?

[07:50] <prabuinet> first this : http://sourceforge.net/projects/parrotwin32/files/parrotwin32%20setup/Parrot-2.11.0/setup-parrot-2.11.0.exe/download

[07:51] <sorear> I don't know what it is about newbies always coming in the 4-hour window when both sides of the Atlantic are asleep

[07:51] <prabuinet> and next : http://sourceforge.net/projects/parrotwin32/files/parrot-rakudo%20addon/

[07:51] <prabuinet> hmm..

[08:12] *** kjeldahl joined
[08:24] *** redicaps1 joined
[08:24] *** redicaps left
[08:33] *** prabuinet left
[08:36] *** kaare_ joined
[08:43] *** Guest98012 joined
[08:45] <coldhead> any advice on getting my IP unbanned from rakudo.org ?

[08:47] <lopnor> i'm banned too.

[08:48] <lopnor> i don't do any spamming on rakudo.org :)

[08:48] <coldhead> that'll teach us not to do whatever we did

[08:48] <lopnor> stop developing on perl6?

[08:49] *** teee joined
[08:50] *** Guest98012 left
[08:55] <lopnor> noway?

[08:55] *** molaf joined
[08:56] <sorear> coldhead: email the webmaster

[08:56] <coldhead> email? what is this, the 80s?

[08:56] <sorear> lopnor: email the webmaster

[08:56] <coldhead> i will, thanks

[08:56] <lopnor> do you know the address?

[08:57] <sorear> you're looking for Andy Lester

[08:57] <sorear> he drops by here very infrequently

[08:58] <sorear> can either of you access betterthangrep.com?

[08:59] <coldhead> andy splat rakudo.org

[08:59] <coldhead> yeah i get that domain fine

[08:59] <cotto> jnthn, it's good to finally see another blog post

[08:59] <sorear> Let us all shame lopnor, who is pming me when it's quite obvious that coldhead needs the same answers

[09:00] <sorear> lopnor either wants to force me to reply twice, or does not care

[09:00] <lopnor> sorry,

[09:01] <lopnor> sorear: i apologize to you about my bad mannar.

[09:02] <lopnor> it was so serious thing to unban me from rakudo.org.

[09:03] <coldhead> everything is going to be okay, lopnor

[09:03] <lopnor> coldhead: thank you, and i'm sorry about it.

[09:05] <sorear> lopnor: can you explain exactly in what way you are "banned"? I'm curious

[09:06] <coldhead> oh good, the email address listed on the site doesn't receive mail

[09:06] <sorear> complaining about rakudo.org's lack of stability is a popular sport here.  We don't have a lot of control over its administration

[09:07] <lopnor> i'm seeing http://gyazo.com/79074ddeb143fd7234bc5d5f9cd8bd3c.png

[09:07] <lopnor> a screen capture.

[09:07] <sorear> andy splat petdance.com doesn't get mail?

[09:08] <coldhead> i'll try that

[09:13] <lopnor> sorear: sent email to andy. thank you.

[09:23] *** arlinius left
[09:26] <teee> sometimes i'd been banned when surffing in the cybercafe...

[09:26] <teee> maybe use webproxy?

[09:27] <lopnor> teee: i'm currently using no proxy.

[09:32] <teee> i meant,connecting by a proxy,and maybe it might been saw?

[09:34] <lopnor> ah, i see.

[09:39] *** snearch joined
[09:44] *** yarp left
[09:48] *** flatwhatson_ joined
[09:52] <moritz_> good morning zebras

[09:57] *** Vlavv` left
[10:00] <tadzik> morning moritz

[10:00] <sorear> hi moritz_

[10:00] <diakopter> hi

[10:05] <moritz_> rakudo: my $a = *; $a = "foo"; say $a

[10:05] <p6eval> rakudo e7e9d5: OUTPUT«Whatever()<0x9d98628>␤»

[10:06] <moritz_> (known bug, just curious if it still persists)

[10:06] <moritz_> rakudo: my $a = *; $a := "foo"; say $a

[10:06] <p6eval> rakudo e7e9d5: OUTPUT«foo␤»

[10:09] *** redicaps1 left
[10:10] <Su-Shee> good morning everyone. :)

[10:11] *** skangas left
[10:13] *** redicaps joined
[10:17] *** lopnor is now known as lopaway

[10:17] <moritz_> Su-Shee++ # two nice blog posts on perl perception

[10:18] <Su-Shee> thanks. :)

[10:19] <tadzik> Su-Shee: o/

[10:22] *** roen joined
[10:26] *** lopaway is now known as lopnor

[10:31] *** Vlavv joined
[10:31] <coldhead> this suddenly you're hip article is fascinating, thanks for pointing it out

[10:32] <Su-Shee> you now move to vim? ;)

[10:32] <coldhead> haha, no i feel smug about already using vim

[10:33] <Su-Shee> *hihi* :)

[10:35] <Su-Shee> though I've just realized another thing: a catalyst developer commented that he actually made a screencast and got no feedback about it. I think it's also important to actually promote and present each other to spread perl in general. and I also like to get back all the developers who deep down in their hearts never really left Perl and still have an eye on Perl 6 for example.

[10:35] <Su-Shee> (which btw was nicely present during december on hackernews and reddit thanks to the controversies about some advent calendar articles :)

[10:36] <moritz_> Su-Shee: to be fair, the title of the screencast wasn't very appealing

[10:36] <moritz_> Su-Shee: but I agree that we should promote perl stuff

[10:36] <Su-Shee> yeah I think we have to cut it some slack as long as the _content_ is good/well done/useful

[10:37] <Su-Shee> I still have serious problems to even wrap my head around screencasts which aren't about "how to click this ultra complex move in blender"..

[10:38] <Su-Shee> but well.. I just have to sell it - not buy it. ;)

[10:40] * moritz_ doesn't "get" screencasts either

[10:41] <Su-Shee> I also don't get "funny" documentation, cute pictures in it and the like.. I'm a boring "Oh, I liked Stevens very much" all the way.. 

[10:42] <moritz_> Su-Shee: did you like "Programming Perl"?

[10:42] <Su-Shee> yes. because it's the _right_ amount of dense, precise information and a joke here and there.

[10:42] <moritz_> I liked it very much, because the fun was related to the topic, and it didn't sacrificy usefulness to the fun

[10:42] *** roen left
[10:43] <Su-Shee> exactly.

[10:43] <Su-Shee> even stevens has a mild acadamic chuckle here and there. 

[10:44] <moritz_> rakudo: my $x = 1 // *; say $x.perl

[10:44] <p6eval> rakudo e7e9d5: OUTPUT«{ ... }␤»

[10:44] <Su-Shee> moritz_: I take boredom over fun every time for depths and breadth of information.

[10:44] *** zby_home_ joined
[10:47] <moritz_> rakudo: enum A <b c d e>; .say for A.pick(3)

[10:47] <p6eval> rakudo e7e9d5: OUTPUT«d 2␤b     0␤c     1␤»

[10:50] *** jhuni left
[10:52] *** kanishka joined
[11:04] *** MayDaniel joined
[11:05] *** sunnavy left
[11:05] *** sunnavy joined
[11:06] <dalek> roast: d5e42b6 | moritz++ | S32-list/pick.t:

[11:06] <dalek> roast: tests for RT #76238, Bool.pick (and SomeEnum.pick)

[11:06] <dalek> roast: review: https://github.com/perl6/roast/commit/d5e42b65e0

[11:08] <Su-Shee> *lol* ruby blog quotes matz: "But when we relase Ruby 2.0 is not decided. I think it takes several years" comment: Yes, several years. Ruby 2.0 is our Perl 6. so I'd say that's a shiny quote. "If ruby 2 can take several years, we can too."

[11:09] *** mj41 left
[11:09] *** [sbp] left
[11:09] *** apejens left
[11:09] *** arlinius| left
[11:09] *** literal left
[11:09] *** fhelmberger left
[11:09] *** mkramer left
[11:09] *** drbean left
[11:09] *** Khisanth left
[11:09] *** larsen left
[11:09] *** Tene left
[11:11] <moritz_> just imagine how long we'll have to wait for Ruby 6 :-)

[11:11] *** fhelmberger joined
[11:11] *** mkramer joined
[11:11] *** drbean joined
[11:11] *** Khisanth joined
[11:11] *** larsen joined
[11:11] *** Tene joined
[11:11] <jnthn> o/, #perl6

[11:11] *** mj41 joined
[11:11] *** apejens joined
[11:11] *** [sbp] joined
[11:11] *** arlinius| joined
[11:11] *** literal joined
[11:12] *** kjeldahl left
[11:12] *** kjeldahl joined
[11:13] *** Chillance joined
[11:14] <Su-Shee> moritz_: I'd say the new quote is": "Perl 6 is our Ruby 2.0" ;)

[11:25] *** timbunce joined
[11:29] *** masak joined
[11:29] <masak> oh hai #perl6 \o/

[11:35] <jnthn> yayitsmasak!

[11:36] *** pmurias joined
[11:38] *** teee left
[11:39] * masak is in a Perl hacking mood today o/

[11:41] <jnthn> \o/

[11:46] *** noganex joined
[11:48] *** timbunce_ joined
[11:50] *** noganex_ left
[11:51] *** timbunce left
[11:51] *** timbunce_ is now known as timbunce

[11:53] *** lopnor is now known as lopaway

[12:26] <dalek> nqp-rx/nom: 940a00d | jonathan++ | src/metamodel/rakudoobject. (2 files):

[12:26] <dalek> nqp-rx/nom: Bring over the latest S-Table bits. This stubs in some bits for method cache and type check support.

[12:26] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/940a00d0ef

[12:26] <dalek> nqp-rx/nom: 5b23dc9 | jonathan++ | src/ (3 files):

[12:26] <dalek> nqp-rx/nom: type_check op and initial port of the type checking logic.

[12:26] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/5b23dc93d8

[12:31] <masak> does cpanm have an IRC channel?

[12:33] <moritz_> did you try #cpanm or #cpanminus on irc.perl.org?

[12:34] <moritz_> if not, probably #toolchain (though I don't know if the author hangs out there)

[12:35] *** Fredrek__J joined
[12:36] <Fredrek__J> helo ppl, What does the exclamation mark (!) in "has Task @!dependencies;" in a class definition mean? is it for negation, also in "push @!dependencies, $dependency;"  

[12:37] <moritz_> it's a private attribute

[12:37] <moritz_> it's a "twigil", ie a second sigil

[12:38] <Fredrek__J> moritz_: So what's the difference between push @!dependencies and push @dependencies?

[12:39] <jnthn> The first will access an attribute of the current class, the second refers to just a normal variable.

[12:40] <jnthn> Generally, the twigil tells you something about the scope of the variable.

[12:40] <tadzik> is self.@attributes also possible?

[12:40] <jnthn> No

[12:41] <tadzik> that's for methods only?

[12:41] <moritz_> tadzik: right

[12:41] <jnthn> tadzik: Yes

[12:41] <jnthn> has @.attributes; will give you an @!attributes attribute and also a method you could call as self.attributes

[12:42] <tadzik> hmm. Can I visit #phasers on tuesday to talk about the module ecosystem progress?

[12:42] <moritz_> sure

[12:42] *** Alias__ joined
[12:43] *** agentzh joined
[12:45] *** Alias_ left
[12:46] <dalek> nqp-rx/nom: 5cefcab | jonathan++ | src/ops/nqp.ops:

[12:46] <dalek> nqp-rx/nom: Untested port of the type check and method cache publication ops.

[12:46] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/5cefcab0c1

[12:52] <masak> moritz_: yes, I tried both those.

[12:53] *** rgrau joined
[12:54] *** yarp joined
[13:01] *** Fredrek__J left
[13:01] *** am0c joined
[13:08] *** lichtkind joined
[13:09] <pmurias> how should the test suit for fledgling perl 6 implementations be called?

[13:09] <lichtkind> rakudo: my @a = 1..5; @a.shift(2); say @a;

[13:09] <p6eval> rakudo e7e9d5: OUTPUT«Too many positional parameters passed; got 2 but expected 1␤  in 'List::shift' at line 2841:CORE.setting␤  in main program body at line 22:/tmp/D1z1x4LhRo␤»

[13:10] <lichtkind> why not gife shift a second optional parameter?

[13:10] <masak> pmurias: sanity tests?

[13:10] <masak> lichtkind: because .splice already does that?

[13:11] <lichtkind> masak: with that argument we need no shift at all

[13:11] <masak> lichtkind: because it's more pure from a model perspective to have one operation that returns an item at all times?

[13:11] <pmurias> masak: sanity tests already exists

[13:11] <pmurias> masak: and they are a bit adhoc

[13:11] <lichtkind> masak: i think perl is not about  purity :)

[13:12] <masak> pmurias: common-sense, then? :)

[13:12] <moritz_> lichtkind: because there are enough primitives to easily do it, and it's not even used often enough to warrant such a non-orthongonal functionality

[13:12] <lichtkind> you can also push severel items at once in a array

[13:12] <lichtkind> why not pop it too

[13:12] <masak> lichtkind: Perl is not about ignoring purity either :)

[13:12] <lichtkind> sounde more orthogonal to me

[13:12] <masak> not to me.

[13:12] <moritz_> lichtkind: I guess you're the only one :-)

[13:13] <pmurias> masak: maybe baby-roast? ;)

[13:13] <masak> pmurias: that's a horrible name! o.O

[13:13] * lichtkind still thinks its a good idea

[13:13] <masak> lichtkind: then I suggest you define a multi in your local scope.

[13:14] <masak> lichtkind: or, if you're ambitious, create a module which exports such a multi.

[13:14] <lichtkind> masak: you mean in rakudo?

[13:14] <masak> no, I mean in your scripts and in the ecosystem, respectively.

[13:14] <lichtkind> masak: i thought more of an optional parameter that defaults to 1

[13:15] <lichtkind> for you all nothing would change

[13:15] <masak> lichtkind: you still don't get it, methinks.

[13:15] <masak> lichtkind: of course a change in the semantics of &shift will have an effect on me down the line.

[13:15] <masak> these changes are not to be made willy-nilly.

[13:15] <moritz_> you can combine ranges with subscripting

[13:16] <lichtkind> of course thats why i post it

[13:16] <moritz_> @array[^2]:delete

[13:16] <masak> moritz_++

[13:16] <moritz_> is what you propose as @array.shift(2)

[13:16] <snarkyboojum> it's been discussed before - http://dev.perl.org/perl6/rfc/56.html

[13:16] <masak> ooh

[13:16] <moritz_> so, you can combine :delete and ranges to get to it

[13:16] <lichtkind> moritz_: do i get the deleted items as a return?

[13:16] <masak> is it in any of the apocalypses, too?

[13:17] <masak> lichtkind: yes.

[13:17] <moritz_> which is why it's not orthongonal

[13:17] <masak> does :exist also take a range?

[13:18] <moritz_> doesn't make sense to me

[13:18] <dalek> nqp-rx/nom: 997e41c | jonathan++ | src/ (2 files):

[13:18] <dalek> nqp-rx/nom: Merge remote branch 'origin/nomnom' into nom

[13:18] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/997e41c1fa

[13:18] <dalek> nqp-rx/nom: f82129f | jonathan++ | src/HLL/Compiler.pm:

[13:18] <dalek> nqp-rx/nom: Add all attributes from PCT::HLLCompiler and also some commentary about the transition.

[13:18] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/f82129ff09

[13:18] <dalek> nqp-rx/nom: 239cac7 | jonathan++ | src/ (2 files):

[13:18] <moritz_> [any 1..3]:exists

[13:18] <dalek> nqp-rx/nom: Bring over initialization bits that used to be in PCT::HLLCompiler, plus some refactoring so we don't try and set attributes on a type object.

[13:18] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/239cac7b9a

[13:18] * masak can see a case for disallowing that, and requiring explicit all() or any() junctions instead

[13:18] <moritz_> would make sense to me

[13:18] <moritz_> or all()

[13:18] <masak> right.

[13:18] <masak> moritz_: let's spec that :P

[13:18] <jnthn> colomon: Thanks for the work in the nomnom branch, just merged it into nom and continuing work on it there.

[13:19] <moritz_> masak: can you pleae do it? I've got some work here left...

[13:19] <masak> moritz_: sure thing :)

[13:19] <moritz_> rakudo: say Date.new('2011-01-19') - Date.today # number of days until birth of $daughter

[13:20] <p6eval> rakudo e7e9d5: OUTPUT«10␤»

[13:20] <tadzik> \o/

[13:20] <tadzik> moritz_++

[13:20] <tadzik> oh rather: Baby.new but moritz_

[13:21] <masak> heh

[13:21] <pmurias> lichtkind: adding stuff that is not used often and can be accomplished by a different subroutine/method will only bloat the language

[13:21] <moritz_> it's more like  class Ronja is Signe is Moritz { ... }

[13:21] <moritz_> I guess she'll augment herself many times while growing up

[13:21] <masak> Ronja is a nice name.

[13:21] <moritz_> thanks :-)

[13:21] *** Alias joined
[13:22] <masak> moritz_: guess you're familiar with the Astrid Lindgren connection.

[13:22] <moritz_> masak: sure

[13:22] <masak> oh phew :)

[13:23] *** Alias__ left
[13:23] <pmurias> masak: i'll call the tests simple-tests

[13:23] <moritz_> Astrid Lindgren and James Krüss were my favorite authors as a child

[13:24] <moritz_> pmurias: what about "cook"? it's one step less extreme than "roast" :-)

[13:24] <pmurias> seems a bit rubyish

[13:24] <masak> "simmer"

[13:24] <Su-Shee> Kalle Blomquist!

[13:24] <snarkyboojum> "steam"

[13:24] <masak> "fry"

[13:25] <pmurias> "warm up"

[13:25] <masak> "pre-heat"

[13:25] <snarkyboojum> "nuke"

[13:25] <snarkyboojum> lol - maybe not

[13:25] <masak> snarkyboojum: I think we need to go over the rules. :)

[13:25] <snarkyboojum> I was thinking "microwave" vs "annihilate" :)

[13:26] <tadzik> closi

[13:26] <pmurias> https://github.com/pmurias/simple-tests

[13:30] <tadzik> pmurias: https://github.com/pmurias/simple-tests/blob/master/say-many.t -- shouldn't that be "o","k"," 1" or something?

[13:32] <pmurias> tadzik: " 1" is optional

[13:32] <tadzik> I see

[13:33] <pmurias> how can i give  commit rights to simple-tests to everyone in the perl6 group?

[13:35] *** yarp left
[13:37] *** shi joined
[13:48] *** ilogger2 joined
[13:48] *** ChanServ sets mode: +v ilogger2

[13:52] <moritz_> pmurias: the easiest way is that I fork it into the perl6 organization, and assign the 'perl6' group to it

[13:52] <moritz_> pmurias: I don't think you can give permissions to teams from foreign organizations on github

[13:54] <moritz_> pmurias: https://github.com/perl6/simple-tests with same permissions as roast, mu etc.

[13:55] <colomon> jnthn: sorry I didn't really do anything useful there!  Is there any LHF fruit in the new nom branch I could tackle?

[14:12] <masak> hah! interesting! the spec as it stands currently is contradictory wrt what :exists on a many-item slice does. S02:2142 says it has all() semantics, but S03:3595 says it has any() semantics. :)

[14:12] <masak> best argument I've seen yet for outlawing it and requiring explicitness. :)

[14:12] * masak makes it so

[14:13] <dalek> nqp-rx/nom: a511a30 | jonathan++ | src/HLL/Compiler.pm:

[14:13] <dalek> nqp-rx/nom: Bring enough of PCT::HLLCompiler into HLL::Compiler that we can now run and get a prompt. Doesn't yet compile anything, but a step closer. Note that mostly this just wraps PIR bodies into an NQP wrapper; some would be very LHF to translate to NQP fully.

[14:13] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/a511a302cb

[14:13] <jnthn> colomon: LHF ^^ :)

[14:15] *** Kodi joined
[14:18] <masak> hm, belay that. it's not as inconsistent as I thought.

[14:19] <masak> S03 uses an explicit any() to get any() semantics. the array form usually has all() semantics.

[14:19] <masak> so it's not an argument for outlawing it and requiring explicitness.

[14:20] <masak> but I still think there's a reason to do so.

[14:21] <masak> however, S03:3758 could be seen as corroborating the need for explicit marking.

[14:25] <masak> reading the paragraphs surrounding S02:2415, the :exists form does stick out as being the only adverb that *doesn't* ignore non-existent indices. the "Likewise," on S02:2417 is even a bit of a non sequitur because of this.

[14:26] <colomon> jnthn++

[14:31] *** nadim joined
[14:31] *** Alias_ joined
[14:40] <dalek> specs: 3018ff2 | masak++ | S (3 files):

[14:40] <dalek> specs: [S02] outlawed :exists on a list slice

[14:40] <dalek> specs: 

[14:40] <dalek> specs: People seem to have different expectations on whether the

[14:40] <dalek> specs: desugaring should be any(@slice) or all(@slice), so we

[14:40] <dalek> specs: require making it explicit. This also makes the code more

[14:40] <dalek> specs: readable and self-documenting.

[14:40] <dalek> specs: review: https://github.com/perl6/specs/commit/3018ff242a

[14:41] *** Alias joined
[14:42] *** Alias left
[14:42] *** Alias_ left
[14:43] *** Alias joined
[14:54] <jnthn> colomon: Whee. I seem to have a working HLL::Compiler that doesn't depend on PCT::HLLCompiler.

[14:55] <masak> \o/

[14:57] *** MayDaniel joined
[14:59] <dalek> nqp-rx/nom: dafce7f | jonathan++ | src/HLL/Compiler.pm:

[14:59] <dalek> nqp-rx/nom: Port dumper from PCT::HLLCompiler to HLL::Compiler, translating to NQP along the way.

[14:59] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/dafce7fa19

[14:59] <dalek> nqp-rx/nom: 492aa92 | jonathan++ | src/HLL/Compiler.pm:

[14:59] <dalek> nqp-rx/nom: Fix various thinkos, and remove the parse method grabbed from PCT::HLLCompiler, since it's overridden in the hll-compiler cheats anyway. This gets us through the build again, without depending on PCT::HLLCompiler.

[14:59] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/492aa929a6

[15:01] <dalek> specs: e04fd48 | masak++ | S02-bits.pod:

[15:01] <dalek> specs: [S02] added non-junction :exists example

[15:01] <dalek> specs: 

[15:01] <dalek> specs: Also un-forgot bumping the version.

[15:01] <dalek> specs: review: https://github.com/perl6/specs/commit/e04fd48df4

[15:04] *** roen joined
[15:05] <Kodi> rakudo: eval "1" for 1, 2, 3;

[15:05] <p6eval> rakudo e7e9d5: OUTPUT«Null PMC in copy␤  in 'eval' at line 1185:CORE.setting␤  in <anon> at line 22:/tmp/wZPKazlzXP␤  in main program body at line 1␤»

[15:05] <Kodi> O.o

[15:05] <arnsholt> Fun =)

[15:06] *** xinming_ joined
[15:06] <arnsholt> jnthn: What's the nom branch for, incidentally?

[15:06] <arnsholt> The name is a bit opaque to me =)

[15:06] <Kodi> RT #77646, looks like.

[15:07] *** Psyche^ joined
[15:07] *** Psyche^ is now known as Patterner

[15:08] <tadzik> arnsholt: new object model, iirc

[15:09] <arnsholt> Ah, that makes sense =)

[15:09] <tadzik> NOM NOM NOM

[15:15] <jnthn> arnsholt: yup, new object model :)

[15:15] <jnthn> arnsholt: Getting nqp-rx using 6model, basically

[15:19] <tadzik> but isn't 6model in .NET?

[15:19] *** jedai left
[15:22] *** jedai joined
[15:23] <jnthn> tadzik: 6model is a meta-model design. There's a .Net implementation of it, a Parrot implementation of it and a JVM implementation of it, all in various stages of completeness.

[15:23] <tadzik> oh, I see

[15:24] <tadzik> so you were just starting the implementation from .NET for easier profiling and stuff?

[15:24] <tadzik> and to have Rakudo target .NET one day, of course

[15:26] <dalek> nqp-rx/nom: 4c967a1 | jonathan++ | src/ (2 files):

[15:26] <dalek> nqp-rx/nom: Bring in the remaining missing methods from PCT::HLLCompiler.

[15:26] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/4c967a14ad

[15:26] <dalek> nqp-rx/nom: 7e9d75b | jonathan++ | t/hll/0 (4 files):

[15:26] <dalek> nqp-rx/nom: A bunch of tests also relied on the ability to set attributes in a type object. D'oh. Corrected.

[15:26] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/7e9d75b634

[15:26] <jnthn> tadzik: Yes, those reasons and more.

[15:27] <jnthn> tadzik: I worried that if I started out in Parrot I'd maybe be too weighed down with the way Parrot is rather than being able to focus on what I wanted things to look like.

[15:29] <tadzik> that's a twisted sentence :) But I think I get it

[15:31] * jnthn wonders how on earth regex interpolation has got broken during the elimination of PCT::HLLCompiler.

[15:34] <jnthn> oh, more of the type object attribute brain damage...

[15:34] <tadzik> oh, parrot-nqp fails when I run it in nqp-rx/nom directory

[15:35] <jnthn> hm 

[15:35] <jnthn> Who knows what versions of things it's finding :)

[15:35] <jnthn> The nqp executable in there works for me, however.

[15:37] <dalek> nqp-rx/nom: ca87742 | jonathan++ | src/Regex/P6Regex.pir:

[15:37] <dalek> nqp-rx/nom: Fix another case where the type object rather than an instance was being used and needing to store attributes. This gets the regex interpolation tests to run again, and things back to where they were before eliminating PCT::HLLCompiler.

[15:37] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/ca877420c5

[15:42] <colomon> jnthn: \o/

[15:43] <colomon> sorry to be in-and-out this morning, we had a houseguest.

[15:44] *** roen left
[15:44] <jnthn> colomon: No worries. :)

[15:45] <colomon> sounds like you've made a lot of progress!  (Haven't read the blog post yet.)

[15:45] *** ashleydev joined
[15:47] <jnthn> colomon: Blog post was mostly "oh hai I'm back" :)

[15:49] <colomon> Looks like a long list of recent accomplishments and future plans.  jnthn++

[15:50] <jnthn> colomon: Are you planning to work on nom "right now"?

[15:50] <jnthn> If so, just want to make sure we don't conflict... :)

[15:51] <colomon> I would love to pitch in and help, but unless you urgently need help, probably finishing my submissions to masak++'s contest and cleaning up my modules to conform to the new standards is a higher priority.

[15:51] <jnthn> colomon: That's fine :)

[15:52] <jnthn> There are a couple of places in Compiler.pm that I want to change right now, that's all :)

[15:52] <colomon> go for it!

[15:53] <colomon> I'll focus on more cases for p4, and maybe dealing with that poopy diaper I'm smelling.  :)

[15:56] *** risou joined
[16:10] <colomon> diaper dealt with!  ;)

[16:10] <masak> \o/

[16:11] <masak> "I repeat: the diaper situation is contained."

[16:11] <colomon> it's extra tricky when you cannot pick up the child.  stupid surgery recovery weight restrictions.

[16:12] *** xinming_ is now known as xinming

[16:14] <dalek> nqp-rx/nom: 3a05d0d | jonathan++ | src/NQP/ (2 files):

[16:14] <dalek> nqp-rx/nom: Add a class_6m package declarator so classes built using 6model can be tried out without introducing it everywhere just yet.

[16:14] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/3a05d0dc15

[16:14] <dalek> nqp-rx/nom: 2ac9555 | jonathan++ | src/HLL/Compiler.pm:

[16:14] <dalek> nqp-rx/nom: Turn proccess_args into NQP.

[16:14] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/2ac955592a

[16:16] <jnthn> OK, The Plan is to gradually work towards every class being a class_6m. :)

[16:24] <dalek> nqp-rx/nom: 25b6884 | jonathan++ | src/NQP/Actions.pm:

[16:24] <dalek> nqp-rx/nom: Fix compilation of inheritance. Seems to work just fine for class_6m-s now.

[16:24] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/25b688447f

[16:34] *** MayDaniel left
[16:39] *** kaare_ joined
[16:41] *** ashleydev left
[16:47] *** ashleydev joined
[17:01] *** Alias_ joined
[17:02] *** takadonet joined
[17:03] *** Alias left
[17:04] *** Alias joined
[17:07] *** Alias_ left
[17:09] *** ashleydev left
[17:14] <dalek> nqp-rx/nom: 0dbc62c | jonathan++ | src/NQP/Actions.pm:

[17:14] <dalek> nqp-rx/nom: Replace an (ab)use of .WHAT with smartmatching in the Actions.

[17:14] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/0dbc62c14b

[17:15] *** takadonet left
[17:16] <dalek> nqp-rx/nom: 6993926 | jonathan++ | src/stage0/ (3 files):

[17:16] <dalek> nqp-rx/nom: Update bootstrap to complete the elimination of PCT::HLLCompiler and to enable use of class_6m in NQP itself.

[17:16] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/699392652f

[17:18] *** Axius joined
[17:25] *** hacknperl joined
[17:25] *** risou left
[17:26] *** ashleydev joined
[17:50] *** hacknperl left
[17:57] <dalek> nqp-rx/nom: 8c92b8f | jonathan++ | src/metamodel/how/NQPClassHOW.pm:

[17:57] <dalek> nqp-rx/nom: find_method should return null if there's no method available, not throw an exception.

[17:57] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/8c92b8fbcf

[17:57] <dalek> nqp-rx/nom: c30d699 | jonathan++ | src/ (3 files):

[17:57] <dalek> nqp-rx/nom: Switch all of the Actions classes to use 6model rather than Parrot's OO (that's HLL::Actions, NQP::Actions, Regex::P6Regex::Actions and NQP::RegexActions). Seems to work out just fine, though it's an easy case: no instantiation, just method calls and single inheritance. But nice it works already!

[17:57] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/c30d699ab1

[18:08] *** Layla_91 joined
[18:08] <Layla_91> Hello, I hope you are all having good time here :D I am here with small question :D

[18:09] <tadzik> hello again Layla_91 

[18:09] <Layla_91> tadzik: hi! :D

[18:10] <Layla_91> I was reading learning perl pdf, at page 50 I read that type objects are undefined (which means they return false if you call the .defined method on them). then there is this example: my $obj=Int; If $obj.defined {say "type object";} else { say "defined object";} when I read it I got the impression that type objects are defined.. :S Any clarification please :)

[18:10] <tadzik> rakudo: my $obj=Int; If $obj.defined {say "type object";} else { say "defined object";}

[18:11] <p6eval> rakudo e7e9d5: OUTPUT«===SORRY!===␤Confused at line 22, near "If $obj.de"␤»

[18:11] <tadzik> rakudo: my $obj=Int; if $obj.defined {say "type object";} else { say "defined object";}

[18:11] <p6eval> rakudo e7e9d5: OUTPUT«defined object␤»

[18:11] <tadzik> erm

[18:11] <Layla_91> tadzik: Aha?

[18:11] <tadzik> Aha

[18:11] <jnthn> I think those two branches are in the wrong order...

[18:12] <tadzik> Also, I have no idea :) Whether it's a bug in the book, spec or rakudo

[18:12] <tadzik> oh, right

[18:12] <jnthn> rakudo: my $x = Int; say $x.defined

[18:12] <p6eval> rakudo e7e9d5: OUTPUT«Bool::False␤»

[18:12] <tadzik> pff

[18:12] <jnthn> That is the correct answer

[18:12] * tadzik fixing the example

[18:12] <jnthn> So I think error in the book

[18:12] <jnthn> tadzik: You got book commit bit? :)

[18:12] <jnthn> OK, cool. :)

[18:13] <Layla_91> So type objects should be undefined and that is just mistake in the book right?

[18:13] *** icwiener joined
[18:14] <tadzik> jnthn: I happen to, yes :)

[18:14] <tadzik> Layla_91: ywis

[18:14] <dalek> book: e49d34a | tadzik++ | src/classes-and-objects.pod:

[18:14] <dalek> book: Fixed the Type.defined example in src/classes-and-objects.pod, Layla_91++

[18:14] <dalek> book: review: https://github.com/perl6/book/commit/e49d34a462

[18:14] <tadzik> Layla_91: thanks for pointing this out

[18:14] *** hudnix left
[18:15] <Layla_91> tadzik: ok now I will continue reading thank you tadzik I will be back :)))

[18:15] <tadzik> I hope so :)

[18:15] <tadzik> come back with more bugs :)

[18:16] <tadzik> hmm, I remember having a few ideas about a new book chapters

[18:17] <Layla_91> tadzik: hihi... I hope there is no more bugs :) the tutorial is really sweet I enjoy reading it :)) and its free! 

[18:20] *** Layla_91 left
[18:21] <tadzik> got it: http://irclog.perlgeek.de/perl6/2010-12-28#i_3126730

[18:25] *** hudnix joined
[18:29] *** GinoMan joined
[18:32] *** ashleydev left
[18:34] *** ashleydev joined
[18:40] *** justatheory joined
[18:41] <sorear> good * #perl6

[18:48] <Su-Shee> two days wasted on a simple blog posting.. I think the Perl cliche will resist until 2023.

[18:49] *** ashleydev left
[18:59] *** jhuni joined
[18:59] *** dual joined
[19:03] <masak> Su-Shee++ # "wasting" two days on blog posting

[19:04] <Su-Shee> masak: well this day got wasted by defending it on hackernews.. 

[19:04] <Su-Shee> I'm _so_ tired of this stupid perl write once cliche.. 

[19:05] <lue> hello! o/

[19:06] <lue> Su-Shee: what Perl cliche?

[19:06] <colomon> That perl is a "write only" language.

[19:06] <Su-Shee> that perl is a write once language and you can't do anything powerful in it or a large projects jadajadajda

[19:06] <Su-Shee> (and I don't mean the operator ;)

[19:07] *** Axius left
[19:07] <tadzik> Su-Shee: mind linking the discussion?

[19:07] <colomon> People have a lot of daft opinions.

[19:07] <Su-Shee> tadzik: http://news.ycombinator.com/item?id=2085276

[19:07] <Kodi> . o O ( Jada, Perl 6 on the JVM )

[19:07] <colomon> Or perhaps, a lot of people have daft opinions

[19:07] <Su-Shee> Kodi: *hihi* :)

[19:07] <masak> Su-Shee: I'm tired of it too.

[19:08] <tadzik> I recently had a similar conversation with a buddy: „Hey watcha doing?” – „Mangling the module infrastructure for Perl 6” – „LOL Perl. There is Python now, you know”

[19:08] <Su-Shee> masak: also I'm an idiot because I've tried to argue with people who - no matter what you say - will never look into something else but their ruby or python.

[19:08] <lue> I predict... the cliche will die in 2038, when it single-handedly helps old computer deal with a timekeeping problem...

[19:09] <lue> computer*s

[19:09] <Su-Shee> tadzik: I usally say "come back when you've got a 850000 line project in <language x> which runs for 12 years straight. ;)

[19:09] <Su-Shee> lue: *haha* I was thinking about that :)

[19:09] <masak> Su-Shee: I sense your frustration is of exactly the same kind as when I tried to approach the Perl 5 community in November 2009.

[19:09] <masak> Su-Shee: it was... interestingly excruciating.

[19:09] <plobsing> funny. write once is considered a feature in java but a bug in perl

[19:10] <Su-Shee> masak: luckily, even those hard nosed bitches changed their opinion. they got soft in terms of perl 6. ;)

[19:10] <masak> plobsing: that's two homonyms, though.

[19:10] <sbp> masak: what do you think the root of that experience was?

[19:10] <lue> [ Python sucks if you want to program an NES emulator :) ]

[19:10] <sbp> you'd use luæ for that?

[19:10] <masak> plobsing: Java's is "you can run it anywhere you please", Perl's is "you can't read it once you've written it"

[19:10] *** Layla_91 joined
[19:11] <plobsing> perl runs in many places too

[19:11] <masak> sbp: I don't exactly know what you're asking for. I later adopted a personal theory of "weaving stories" to explain both sides to myself.

[19:11] *** onwijzehenk joined
[19:11] <lue> I always take the "looks the same before and after encryption" joke as a compliment. That's a very difficult thing to do.

[19:11] *** takadonet joined
[19:12] <sbp> masak: specifically why you think the situation, the reception you got from the perl5 crowd, was so. would also be interested to hear the stories, links to existing writeups etc.

[19:12] <masak> sbp: http://strangelyconsistent.org/blog/how-perl-6-could-kill-us-all

[19:12] <Su-Shee> well I've learned in my job that ugly written usally isn't really a problem - but really bad architecture for example is. not even a weird API is as bad.

[19:12] <sbp> thanks very much!

[19:13] <Su-Shee> masak: ah that posting. I remember. those times are over. 

[19:13] <Layla_91> tadzik: how can I register my nickname here?... (I forgot that command :(  ) sorry I know it is a non perl6 question..

[19:14] <Su-Shee> Layla_91: you have to register it with freenode.

[19:14] <tadzik> Layla_91: msg nickserv help register, I think

[19:14] <jnthn> Su-Shee: Oh, snap. Just about all the clients I have who have problems have them as a result of crappy architecture, not individual bits of code being unreadable.

[19:14] <masak> Su-Shee: yes, those times are mostly over.

[19:14] <tadzik> bah, diem perdidi :( Being sick is not nice

[19:15] <tadzik> . o O (where is that picture of mine)

[19:15] <tadzik> http://i.imgur.com/pqT11.png

[19:16] <tadzik> ha-ha :)

[19:16] *** onwijzehenk left
[19:16] <Su-Shee> jnthn: I've actually wrote a couple of experiments to make sure that I don't confuse shitty architecture with a weird API - but even a weird API is just that.. weird..

[19:16] <masak> sbp: in summary: the Perl 6 community was behaving like a little mosquito saying "we're the only rightful heirs of Perl", and many Perl 5 community members were instinctively rejecting that picture. it was, in many senses, a collision course. one which wouldn't have led to anything good.

[19:17] <lue> I think all problems people still have with Perl 6 can be solved by renaming it, because the 6 is what gets them started. Problems: a renaming will never happen :)

[19:18] <sbp> “Perl 5 replaced Perl 4, which replaced Perl 3, etc. Perl 6 lambdacamels don't think much about this, but Perl 5 folks fielding questions from outsiders about Perl 6 sure do.” — chuckle

[19:18] <Kodi> I'm pro-renaming, too.

[19:19] <Su-Shee> lue: not necessary anymore.

[19:19] <sbp> Perl Star

[19:19] <Kodi> Perlambda.

[19:19] <Su-Shee> and as this _great_ code example of COBOL versus Cobol90 showed: we don't have to worry about that anymore.. :)

[19:19] <sorear> rakudo: say time.WHAT

[19:19] <p6eval> rakudo e7e9d5: OUTPUT«Int()␤»

[19:19] <sbp> Perl Star would suck up all the remaining numbers :-)

[19:20] <masak> sbp: the cold war erupted due to just such a meeting. a certain emma first visited #perl (on irc.perl.org) and then #perl6.

[19:20] <sbp> yeah, I saw the mention of the name in that piece

[19:20] <masak> I'm firmly anti-renaming, for practical reasons.

[19:21] <Su-Shee> I'm against renaming as well unless you call it "pinkdaisy the butterfly language"

[19:21] <Kodi> Well, yeah, it's probably too late at this point, well after the initial release of Rakudo *.

[19:21] <colomon> On the other hand, it might be a quick way to sidestep the existing anti-Perl bias.  :)

[19:21] <tadzik> I won't be so sure

[19:21] <Su-Shee> colomon: the bias isn't really about 5 & 6 anymore - it's about write-once cliches (5) and the duke nukem meme (6) 

[19:21] <sbp> I don't support renaming either because I believe in the Perl 6 story

[19:22] *** Layla_91 left
[19:22] *** fhelmberger joined
[19:22] <masak> I "believe" in both the Perl 5 and the Perl 6 stories.

[19:22] * moritz_ doesn't see any point in discussing renaming unless we have a good name to rename to

[19:22] <masak> and I believe that having both stories is ultimately a good thing.

[19:22] <tadzik> when I was giving a Parrot talk on a local LUG some time ago, before I even started people started joking "oh, the Perl is readable now or something?"

[19:22] <Su-Shee> yeah, everyone does. 

[19:23] * sbp looks at mst's post too

[19:23] * masak doesn't see any point in discussing renaming to anything unless renaming is an option :)

[19:23] <BinGOs> "Ignorance, you don't know the meaning of the word"

[19:23] <Su-Shee> moritz_: you don't like "pinkdaisy the butterfly language"?

[19:23] <colomon> Su-Shee: right.  But if Perl 6 suddenly became Sapphire, then both biases would "no longer apply".  ;)

[19:23] * colomon might be playing Devil's Advocate.  

[19:24] <masak> Perl 6 isn't Sapphire. Perl 6 is Perl.

[19:24] <colomon> Yes, but we don't need to tell other people that.

[19:24] <Kodi> We could change Perl 6's name to Camelia. Not the word "Camelia", but the image itself. Then everybody would have to call it The Language Formerly Known as Perl 6.

[19:24] <Su-Shee> tadzik: If I would be younger and not already having experienced Perl and be very put off by DHH, I probably would have gone down the Ruby path as well.

[19:24] <moritz_> Su-Shee: too long

[19:24] <sbp> »ö«

[19:24] <Su-Shee> moritz_: meh. ;)

[19:24] <tadzik> Su-Shee: "as well"?

[19:24] * BinGOs will just continue to quote the Python Whitespace Fascism Meme instead.

[19:25] <Su-Shee> tadzik: as many people I know who started with Perl in the 90ies

[19:25] <lue> Here are some pretty pictures that detail (in a very general way) how Perl 6 is percieved today (at least in P6-land): https://rdstar.wordpress.com/2010/12/28/the-view-of-perl6-and-cleaning-the-specs/

[19:25] <tadzik> I have a feeling Ruby community is full of people who couldn't wait for Perl 6

[19:25] <sbp> if Perl 6 is a little sister, I'd say it's the quiet little sister who stays in and studies hard

[19:25] * colomon wrote his first Perl code in 1994 or 1995.

[19:26] *** WonTu joined
[19:26] <Su-Shee> tadzik: oh wow you really must know very different people than I do.. :)

[19:26] *** WonTu left
[19:26] <tadzik> Su-Shee: I mainly know angry Pythoners

[19:26] <Su-Shee> colomon: without Perl, I wouldn't have had a career as a developer and open source activist and by the way of that as a journalist.. :)

[19:27] <tadzik> in fact, the thing that turns me off Python is the hate-oriented community. The friendliest Pyhoners I know are Perlists

[19:27] <Su-Shee> tadzik: oh wait I have to paste you the right cartoon for that.. :)

[19:27] <masak> tadzik: ah, you meant "were to impatient to wait for Perl 6", not "were eager to get their hands on Perl 6"... :)

[19:28] <Su-Shee> tadzik: http://sedition.com/a/3054

[19:28] <tadzik> Su-Shee: yeah, seen that :)

[19:28] <tadzik> masak: ywis

[19:28] * Su-Shee has done some python.

[19:29] <lue> tadzik: I liked python (version 3). I needed binding, but I could live without it. When I needed given/when statements, I gave up and joined Perl 6 :)

[19:31] <sbp> tadzik: I'm a Python programmer, but I don't program Perl 5

[19:31] <Kodi> Hm, I actually find that a proper block-scoped "my" is what I miss most while writing Python.

[19:32] <tadzik> sbp: maybe I just stumbled on the wrong people, idk. But again, looking at reddit/hn... eh

[19:32] <Su-Shee> I don't miss anything in either one - I'm only in a language for the fun and the community and the environment. :)

[19:32] *** pmurias joined
[19:33] <dalek> roast: 6f4dfd4 | (Kodi Arfer)++ | S02-literals/pairs.t:

[19:33] <dalek> roast: [pairs.t] Added tests for RT #74948.

[19:33] <dalek> roast: review: https://github.com/perl6/roast/commit/6f4dfd4c56

[19:33] <dalek> roast: 5e42fea | (Kodi Arfer)++ | S02-names_and_variables/names.t:

[19:33] <dalek> roast: [names.t] Added tests for RT #72438.

[19:33] <dalek> roast: review: https://github.com/perl6/roast/commit/5e42fea45b

[19:33] <dalek> roast: 6bc4635 | (Kodi Arfer)++ | S04-statements/for.t:

[19:33] <dalek> roast: [for.t] Untodoed a passing test.

[19:33] <dalek> roast: review: https://github.com/perl6/roast/commit/6bc4635abd

[19:35] <sbp> I haven't done as much with Perl 6 as I've intended so far, but when I do one of the things that I'm looking forward to writing about is the point of view of learning 6 without knowing much at all, and having no intention to learn further, about 5

[19:35] <sbp> given the very strong heritage in Perl 5, I think it's (and that it'll continue to be) interesting to pick it up as a fresh entry point

[19:36] <lue> I really enjoy Perl 6 as well as #perl6. I wouldn't have been able to stay this long if it weren't :)

[19:37] <masak> sbp: I would be very interested to read what you have to say about that.

[19:37] <sbp> of course there are some points where I'm spoiled on that, e.g. pcre. everybody knows pcre, hard to pick up Perl 6 regex as though it were entirely new!

[19:37] *** fhelmberger left
[19:37] <Su-Shee> sbp: the interesting part of 5 is the amazing flexibility which made something as Moose possible. There's sure as hell a lot to learn..

[19:38] <arnsholt> Which Perl 6 is it that has full-LTM in its regexes again?

[19:38] <dalek> rakudo: 8b8655b | KodiB++ | src/Perl6/Grammar.pm:

[19:38] <dalek> rakudo: [Perl6/Grammar] Combined <!apostrophe> and <nofun> into <end_keyword>.

[19:38] <dalek> rakudo: 

[19:38] <dalek> rakudo: This fixes RT #72438 and RT #74948.

[19:38] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/8b8655b2a3

[19:38] <arnsholt> I forget

[19:38] <colomon> arnsholt: it's not Rakudo. 

[19:39] <colomon> maybe niecza?

[19:39] <moritz_> yes

[19:39] <masak> niecza++ sorear++

[19:40] <sorear> arnsholt: niecza and viv

[19:40] <arnsholt> Cheers!

[19:40] * arnsholt goes to download niecza and Mono

[19:41] <lue> that reminds me. I don't suppose there's any way to fake LTM with proto regexes like you can with a list of choices (e.g. /abra||abr||ab||a/), is there?

[19:41] <pmurias> sorear: hi

[19:41] <pmurias> sorear: how are containers implemented in niecza?

[19:42] <pmurias> and what does the second argument to nam-scopedlex do?

[19:44] <sorear> pmurias: binding.  $x := $y becomes (scopedlex $x (newboundvar ... $y))

[19:44] <sorear> newboundvar does the binding type check, and also handles readonly/list bits

[19:45] <sorear> at a lower level, (scopedlex $x ...) sets a frame slot, (scopedlex $x) fetches oen

[19:45] <masak> sorear: do you have any idea how to solve my problem with xbuild?

[19:45] <masak> it's what prevents me from using niecza currently.

[19:45] <sorear> as for containers... scalar or aggregate?

[19:46] <moritz_> masak: what's the problem?

[19:46] <sorear> masak: my only guess is that you're not starting xbuild from the top directory

[19:47] <sorear> masak: does xbuild /v:diag say anything interesting?

[19:49] <dalek> rakudo: bdbf3f4 | moritz++ | src/core/IO.pm:

[19:49] <dalek> rakudo: fix RT #80252, parrot strings returned from dir()

[19:49] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/bdbf3f4669

[19:51] <masak> moritz_: getting the following error:

[19:51] <masak> MSBUILD: error MSBUILD0003: No .proj file specified and no found in current directory.

[19:51] <masak> I see a Niecza.proj right there.

[19:51] <moritz_> huh.

[19:51] <masak> when I specify it explicitly, I get this:

[19:52] <masak> MSBUILD: error MSBUILD0000: Could not load file or assembly '/home/masak/git-theirs/niecza/obj/PerlTask.dll' or one of its dependencies. The system cannot find the file specified.

[19:52] <masak> the obj/ directory is empty.

[19:53] <pmurias> sorear: does niecza support user defined containers?

[19:53] <masak> adding /v:diag only outputs a version header, and then the same error.

[19:55] <sorear> pmurias: what kind?

[19:55] <sorear> masak: odd; the way it's supposed to work is that PerlTask.dll is built before it's needed

[19:55] <sorear> masak: what version of xbuild do you have?

[19:56] <pmurias> my $foo := foo();$foo = 123 # a method gets called on the thing foo() returned

[19:56] *** shi joined
[19:57] <pmurias> sorear: there's a Proxy class in the synopsis that can be used to create a custom container

[19:57] <sorear> niecza doesn't currently have that

[19:58] <sorear> if you want to give $foo special behavior, you'll need to subclass Niecza.Variable in Kernel.dll

[19:58] <masak> sorear: XBuild Engine Version 0.1\nMono, Version 1.9.1.0

[20:00] <sorear> masak: the minimum version of Mono confirmed to work is 2.4

[20:00] <masak> oh, ok.

[20:00] <masak> that explains it, then.

[20:00] <masak> I'll see about upgrading.

[20:00] <sorear> that was a while ago, I might have broken compat since then. :/

[20:02] <pmurias> sorear: but that should be possible?

[20:02] *** Kodi left
[20:03] <sorear> pmurias: yes

[20:05] <sorear> I'm not thrilled with the Proxy API but variables with custom get/set routines are on the near todo

[20:08] <moritz_> what's the correct way to run the niecza tests?

[20:09] <sorear> xbuild /t:Test

[20:09] * moritz_ tries

[20:10] <masak> sorear: I'm not thrilled with the Proxy API either, but I'm very eager to use *anything* like it.

[20:10] <moritz_> All tests successful

[20:19] <pmurias> masak: what would you prefer FETCH/STORE on a custom class?

[20:21] <masak> pmurias: sorry, question doesn't parse.

[20:21] <masak> missing comma or extraneous "what", perhaps?

[20:21] <masak> please restate.

[20:22] <moritz_> maybe s/<?after 'prefer '>/in favor of/  ?

[20:22] <masak> oh.

[20:26] * moritz_ would love to inherit from Scalar or PositionalContainer or HashContainer for $, @ and %

[20:29] *** rindolf joined
[20:29] <rindolf> Hi all.

[20:30] <tadzik> ~

[20:30] <rindolf> tadzik: hi.

[20:30] <rindolf> tadzik: what's up?

[20:31] <lue> afk

[20:31] <masak> greetings, rindolf.

[20:31] <rindolf> Hi masak . Sup?

[20:31] <rindolf> Does anyone here know Dylan?

[20:31] <masak> roof. sky. space. :)

[20:31] <Su-Shee> I do.

[20:32] *** risou joined
[20:32] <rindolf> Su-Shee: great.

[20:32] <rindolf> Su-Shee: what piqued your interest in it?

[20:32] <tadzik> rindolf: cool

[20:32] <tadzik> rindolf: the module ecosystem is evolving nicely

[20:32] <rindolf> tadzik: nice.

[20:32] <masak> pmurias: I don't know, really. seems one would conceivably get away with 'Any.new but { method FETCH { ... }; method STORE { ... } }'

[20:33] <Su-Shee> rindolf: nothing. someone mentioned it, I looked into it, didn't think much of it but "oh yet another language with nice features and no ecosystem" and played a little with it like with a dead mouse. ;)

[20:33] <masak> pmurias: but maybe it makes sense to have sugar for that in the form of a Proxy class, I dunno.

[20:33] <rindolf> Su-Shee: I see.

[20:36] * masak gives up installing a sufficiently recent Mono on Debian for today

[20:37] <masak> it appears possible, and probably easy when one knows the right incantations.

[20:37] <moritz_> masak: what Debian do you use?

[20:37] <moritz_> masak: on Squeeze it's a breeze :-)

[20:38] <moritz_> aptitude install mono-xbuild  mono-gmcs

[20:38] <moritz_> maybe also mono-2.0-gac

[20:38] <masak> I'm on Lenny.

[20:38] <masak> I'll try those.

[20:38] <moritz_> on lenny they are too old I fear

[20:38] <masak> oh :(

[20:39] <masak> Lenny is 5.0, right?

[20:39] <masak> thought that was the latest Debian when I installed it.

[20:39] <moritz_> jep; Squeeze is still "testing" (though actually quite stable)

[20:39] <masak> I think I'd like to use that one, then.

[20:39] <masak> what's my best course of action?

[20:40] <masak> can I just do a global update somwhow?

[20:40] <masak> *somehow

[20:40] * icwiener bets that Squeeze will be release in February. :)

[20:40] <moritz_> masak: you can do an upgrade, yes

[20:40] <moritz_> I don't know the instructions by heart though

[20:41] <icwiener> Edit /etc/apt/sources.list -> s/lenny/squeeze/

[20:42] <icwiener> paste the resulting file if you are unsure.

[20:42] <pmurias> masak: compile on from source

[20:42] <icwiener> And then run "aptitude update && aptitude full-upgrade"

[20:42] <pmurias> s/on/one

[20:42] <masak> pmurias: that doesn't appear to be the Debian Way.

[20:42] <masak> icwiener: thanks.

[20:42] <moritz_> see http://www.debian-administration.org/users/e5z8652/weblog/22

[20:42] <masak> hokay.

[20:42] <moritz_> masak: the step of updating the kernel, and then rebooting is important

[20:42] <moritz_> (before doing the rest of the upgrade)

[20:43] <moritz_> I didn't on my machine, and had some trouble figuring out the mess afterwards :-)

[20:43] <pmurias> masak: i prefere packages that the debian folk don't tamper with

[20:43] <pmurias> * prefer

[20:44] <Su-Shee> .oO(Slackware. Untempered Linux since 1993 ;)

[20:44] <Su-Shee> Tampered ;)

[20:44] <icwiener> moritz_: Oh, good to know (/me never actually did this upgrade) :)

[20:44] <[Coke]> .

[20:44] <moritz_> icwiener: then be careful with what you recommend :-)

[20:45] <flussence> I'd like to second that "."

[20:45] <sorear> I just use mono from github; it'll be ages before 2.9+ is in any version of Debian

[20:46] <moritz_> sorear: I'll just annoy you when you break niecza on mono 2.6.7 :-)

[20:46] <flussence> (slackware was the first distro I ever used... I didn't even know *how* to RTFM back then)

[20:46] <sorear> moritz_: I appreciate that

[20:46] <masak> moritz_: having slight problems on the linux-image step.

[20:47] *** risou left
[20:47] <masak> moritz_: aptitude couldn't find a module of that exact name.

[20:47] <moritz_> masak: did you run 'aptitude update' after chaning sources.list ?

[20:47] <masak> yes.

[20:47] <masak> it did a lot of updating.

[20:47] <flussence> masak: it'll have "2.6" in the name too, try searching for that part

[20:48] <icwiener> moritz_: I upgraded three versions of Debian that way so I had that warm fuzzy feeling of confidence about those steps. But you are right. :)

[20:48] <masak> moritz_: though now I see there were some 404s in the output from 'aptitude update'.

[20:48] <flussence> (the ncurses interface makes this a lot easier...)

[20:48] <moritz_> masak: could you plese nopaste your sources.list?

[20:49] <moritz_> 404s are bad

[20:49] <tadzik> ncurses... bingings for ncurses would be nice

[20:50] <flussence> I've never written a console-gui program before, but I've heard slang is easier than ncurses.

[20:50] <masak> moritz_: https://gist.github.com/772001

[20:50] <masak> tadzik: Parrot has bindings for ncurses.

[20:51] <tadzik> right. Back to the wrapper problem again

[20:52] <moritz_> masak: if you comment out two volatile lines (with # ) and re-run aptitute update, do you still get 404s?

[20:53] <masak> moritz_: I added the output from 'aptitude update': https://gist.github.com/772001

[20:53] <masak> I'll try commenting out.

[20:54] <moritz_> no need, all the 404s are from volatile

[20:54] <moritz_> that shouldn't hurt

[20:54] <moritz_> masak: what's your architecture? amd64?

[20:54] <masak> 404s went away.

[20:54] *** timbunce joined
[20:54] <masak> yes, amd64.

[20:55] <masak> I see linux-image-2.6-amd64 here. trying that.

[20:55] <moritz_> that would have been my next suggestion, yes

[20:55] <masak> whee

[20:56] *** arlinius joined
[20:57] *** GinoMan left
[20:59] *** timbunce left
[21:01] <dalek> niecza: ad19fad | sorear++ | / (7 files):

[21:01] <dalek> niecza: [v6] First port of NieczaCompiler

[21:01] <dalek> niecza: review: https://github.com/sorear/niecza/commit/ad19fad6a9

[21:03] * moritz_ thinks "why remove the fun?" whenever he reads (defun ...)

[21:03] <masak> sorear: interesting. so you're writing a lot of Perl 6 code now?

[21:05] <moritz_> advent2009-day20.t somtimes fails a test for me

[21:06] <sorear> masak: yes

[21:07] <moritz_> ah, it uses random numbers

[21:07] <moritz_> and has a test that sorting by string is different than sorting by number

[21:07] <masak> here are the failures from a spectest run I just finished: https://gist.github.com/772022

[21:08] * masak reboots

[21:08] * sorear is now trying to use the Perl6 version of Niecza to compile the setting

[21:09] <dalek> roast: 3a387fe | moritz++ | integration/advent2009-day20.t:

[21:09] <dalek> roast: make advent day 20 more reliable

[21:09] <dalek> roast: review: https://github.com/perl6/roast/commit/3a387fe666

[21:12] <pmurias> moritz_: re defun are you looking at niecza's common lisp backend? ;)

[21:13] <moritz_> pmurias: yes

[21:13] <moritz_> well, "looking" is exaggerated

[21:13] <moritz_> I just read some diffs

[21:13] <diakopter> sorear: impressive.  most impressive.

[21:21] <arnsholt> sorear: BTW, what is a good starting point for looking into Niecza's parsing code?

[21:22] <tadzik> phenny: tell masak shouldn't the blog url on your GH dashboard end with .org?

[21:22] <phenny> tadzik: I'll pass that on when masak is around.

[21:27] <sorear> arnsholt: the various code methods in RxOp.pm and the C# functions they call in Cursor.cs

[21:27] <arnsholt> Cheers!

[21:29] *** mberends joined
[21:33] *** GinoMan joined
[21:46] <dalek> niecza: 656d5f3 | sorear++ | v6/ (2 files):

[21:46] <dalek> niecza: [v6] First batch of fixes to parse setting

[21:46] <dalek> niecza: review: https://github.com/sorear/niecza/commit/656d5f3343

[21:56] <dalek> nqp-rx/nom: 1146ba7 | jonathan++ | src/HLL/Compiler.pm:

[21:56] <dalek> nqp-rx/nom: More PIR => NQP and other work to prep HLL::Compiler to work with 6model.

[21:56] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/1146ba7ff5

[22:03] <dalek> sprixel: dd83c25 | diakopter++ | / (7 files):

[22:03] <dalek> sprixel: remove right recursion in perlesque grammar's statement list, which was overf .net stack on large input files.

[22:03] <dalek> sprixel: vastly simplify that portion of the grammar as a happy side effect.

[22:03] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/dd83c2525a

[22:07] *** MayDaniel joined
[22:10] <colomon> dang, a lot of commits flying by today!!

[22:10] <tadzik> fun! \o/

[22:15] <plobsing> \o/ /o\ \o/ # flying commits

[22:15] *** _jaldhar joined
[22:19] *** shi left
[22:33] *** shi joined
[22:33] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[22:38] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[22:40] *** GinoMan left
[22:44] *** jevin_ joined
[22:46] * sorear needs to figure out why ../niecza_eval harness caused NieczaActions to be rebuilt *twice*

[22:57] *** kaare_ left
[23:01] *** MayDaniel left
[23:03] *** masak joined
[23:03] <masak> \o/

[23:03] <phenny> masak: 21:22Z <tadzik> tell masak shouldn't the blog url on your GH dashboard end with .org?

[23:03] <dalek> nqp-rx/nom: c00a30c | jonathan++ | / (7 files):

[23:03] <dalek> nqp-rx/nom: Switch HLL::Compiler, NQP::Compiler and Regex::P6Regex::Compiler to use class_6m. In the process, create .pm files for a couple of them (we keep the PIR around too, to combine the various produced outputs). Needs re-configure.

[23:03] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/c00a30cf5f

[23:03] <dalek> nqp-rx/nom: bd0b0fe | jonathan++ | src/HLL (2 files):

[23:03] <dalek> nqp-rx/nom: Move Parrot HLL compiler init to avoid tickling an initializatin order bug (will track it down tomorrow or so). Gets some of the tests regressed when making HLL::Compiler et al use 6model passing again (down to just 2 regressions now).

[23:03] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/bd0b0fe943

[23:05] *** KyleHa joined
[23:06] <masak> tadzik: indeed. good catch, tadzik++. fixed.

[23:09] <KyleHa> Folks, my test reporter has been out of commission for over a week now.

[23:09] <KyleHa> It may yet return, but I think it will be quite a while. For faster service, you might want to find someone else to run it.

[23:10] <colomon> KyleHa: what would be involved?

[23:10] <KyleHa> colomon: I ran it as a cron job every ten minutes or so.  It updates a local copy of the roast repo and sends an email when appropriate.

[23:11] <KyleHa> So it needs a persistent network connection and the ability to send email.

[23:11] <KyleHa> The code is in test-reporter.pl, probably in the Mu repo somewhere now.

[23:11] <colomon> did it run the tests, or just monitor them?

[23:12] <colomon> I mean, monitor their source.

[23:12] <KyleHa> Just monitor.  It looks for a commit of a test for an RT ticket and sends an email to the ticket with the diff.

[23:13] <colomon> hmmm.... wonder if my wee server can send e-mail?

[23:14] <KyleHa> The biggest problem I had was when it couldn't get to the repo, and cron would send me an error message several times per hour.

[23:14] <colomon> ouch

[23:15] <KyleHa> It keeps a record of the last commit that it looked at.  Before you run it, you should set that to something recent, so it doesn't send repeat notices.

[23:17] <KyleHa> Anyone looking for help is welcome to email me at [email@hidden.address]  Thanks.

[23:17] *** KyleHa left
[23:20] *** icwiener left
[23:24] *** MayDaniel joined
[23:27] *** VXZ joined
[23:33] *** renormalist joined
[23:33] *** frettled joined
[23:41] *** crythias joined
[23:48] *** shi left
[23:55] <jnthn> goodnight, #perl6

[23:56] *** MayDaniel left
[23:57] <masak> sorear: almost there now. I'm getting this error message: https://gist.github.com/772160

[23:57] * masak ==>> $bed

[23:58] *** masak left
