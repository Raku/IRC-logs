[00:02] <sorear> oh, jnthn out

[00:02] <sorear> TimToady: ping

[00:06] *** icwiener joined
[00:06] <dalek> roast: 49c50e0 | sorear++ | S05-grammar/protoregex.t:

[00:06] <dalek> roast: [S05-grammar/protoregex.t] Use current syntax

[00:06] <dalek> roast: review: https://github.com/perl6/roast/commit/49c50e01e1

[00:06] *** mdxi joined
[00:06] *** mdxi left
[00:07] <dalek> niecza: a986786 | sorear++ | lib/Cursor.cs:

[00:07] <dalek> niecza: Fix a very strange infinite loop in protoregex handling

[00:07] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a986786bb4

[00:08] *** fridim_ left
[00:10] <dalek> niecza: 96c7512 | sorear++ | t/spectest.data:

[00:10] <dalek> niecza: Run spectests that no longer explode

[00:10] <dalek> niecza: review: https://github.com/sorear/niecza/commit/96c7512d9b

[00:10] *** ab5tract left
[00:10] <sorear> rakudo: say +Match

[00:10] <p6eval> rakudo 6fd655: OUTPUT«use of uninitialized value of type Match in numeric context␤0␤»

[00:11] *** ab5tract joined
[00:12] *** leprevost joined
[00:29] *** replore_ joined
[00:30] <dalek> niecza: 567948e | sorear++ | lib/CORE.setting:

[00:30] <dalek> niecza: +Match should be 0 (fixes #84)

[00:30] <dalek> niecza: review: https://github.com/sorear/niecza/commit/567948e374

[00:30] <dalek> roast: c8f64b9 | sorear++ | S12-methods/what.t:

[00:30] <dalek> roast: [S12-methods/what] Unfudge for sorear/niecza#84

[00:30] <dalek> roast: review: https://github.com/perl6/roast/commit/c8f64b9050

[00:31] *** wolfman2000 joined
[00:38] *** benabik left
[00:44] *** worr left
[00:45] *** ispeak_ joined
[00:47] *** raiph left
[00:48] *** s1n joined
[00:48] <s1n> pmichaud: can't make it tonight, i'll be there next month though

[00:52] *** molaf_ joined
[00:56] *** icwiener left
[00:56] *** molaf left
[01:08] *** thou left
[01:11] *** estrabd left
[01:14] <colomon> panda successfully bootstrapped!

[01:16] *** benabik joined
[01:17] *** tokuhirom left
[01:27] *** ab5tract left
[01:32] *** mtk left
[01:36] *** jeffreykegler joined
[01:37] <donri> colomon: nom?

[01:37] <colomon> donri: yes

[01:37] <donri> coolio

[01:37] <colomon> I just made it the official "perl6" executable on my laptop.  :)

[01:38] <colomon> thanks to jnthn fixing the showstopping bug for on my main $work perl 6 script

[01:41] <donri> perhaps it's time for me to build a fresh rakudo soon

[01:41] <donri> just have the fedora16 package at the moment

[01:41] <donri> This is Rakudo Perl 6, version 2011.07 built on parrot 3.6.0 0  -- aka oooooold!!1 in perl6-land

[01:43] *** jeffreykegler left
[01:45] <dalek> roast: 1641b95 | (Solomon Foster)++ | S04-statements/given.t:

[01:45] <dalek> roast: Add test that when /regex/ sets $/ properly.

[01:45] <dalek> roast: review: https://github.com/perl6/roast/commit/1641b9550d

[01:57] *** envi_ left
[02:02] *** envi_ joined
[02:03] <colomon> hmmm... IO::Prompter uses things like     :v(:$verbatim)       of Bool

[02:05] <colomon> std: https://gist.github.com/1474897

[02:05] <p6eval> std be1f10e: OUTPUT«Potential difficulties:␤  %unexpected_options is declared but not used at /tmp/AC3WtQlqD3 line 31:␤------>   *⏏%unexpected_options,␤  @prompt is declared but not used at /tmp/AC3WtQlqD3 line 32:␤------>   *⏏@prompt,␤  $prompt_str…

[02:05] <colomon> niecza: https://gist.github.com/1474897

[02:05] <p6eval> niecza v12-30-g567948e: OUTPUT«===SORRY!===␤␤Unhandled trait of at /tmp/J_k9rZmged line 5:␤------>   :d(:$default)        of Str⏏,␤␤Unhandled trait of at /tmp/J_k9rZmged line 8:␤------>   :f(:$fail)           of Bool       ⏏= sub{False…

[02:12] *** DarthGandalf left
[02:17] <colomon> whoa, ABC brings ufo to its knees?

[02:21] <colomon> using 2.3 gigs of memory right now...

[02:23] *** donri left
[02:24] <colomon> 2.8

[02:24] *** DarthGandalf joined
[02:25] *** birmjin__ joined
[02:27] *** birmjin left
[02:29] <colomon> got up to 3.2 gigs before I gave up and killed it

[02:31] *** whiteknight joined
[02:31] *** whiteknight is now known as Guest77466

[02:42] <colomon> does lines not work in nom?

[02:47] <colomon> damn.

[02:48] <colomon> nom: qqx{ls}

[02:48] <p6eval> nom 6fd655: OUTPUT«qx, qqx is disallowed in safe mode␤  in sub restricted at src/SAFE.setting:2␤  in sub QX at src/SAFE.setting:9␤  in block <anon> at /tmp/q4eIT9bGKJ:1␤  in <anon> at /tmp/q4eIT9bGKJ:1␤»

[02:50] <colomon> nom: for $*IN.lines -> $line { say $line }

[02:50] <p6eval> nom 6fd655: OUTPUT«Land der Berge, Land am Strome,␤Land der Äcker, Land der Dome,␤Land der Hämmer, zukunftsreich!␤Heimat bist du großer Söhne,␤Volk, begnadet für das Schöne,␤vielgerühmtes Österreich,␤vielgerühmtes Österreich!␤␤Heiß umfehdet, wild umstritten␤liegst dem Erdteil du inmitte…

[02:54] <colomon> so, IO.lines doesn't seem to ever stop any more.

[02:54] <colomon> *and* for is now eager?

[02:56] <sorear> nom: for 1..* { .say }

[02:57] <p6eval> nom 6fd655: OUTPUT«(timeout)1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤29␤30␤31␤32␤33␤34␤35␤36␤37␤38␤39␤40␤41␤42␤43␤44␤45␤46␤47␤48␤49␤50␤51␤52␤53␤54␤55␤56␤57␤58␤59␤60␤61␤62␤63␤64␤65␤66␤67␤68␤69␤70␤71␤72␤73␤74␤75␤76␤77␤78␤79␤80␤81␤82􏿽xE2

[02:57] <sorear> colomon: how do you mean for is eager?

[02:57] <colomon> I mean, I'm passing it an infinite list and it never gets to the first item

[02:57] <colomon> nom: for 1...* { .say }

[02:57] <p6eval> nom 6fd655: OUTPUT«(timeout)1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤29␤30␤31␤32␤33␤34␤35␤36␤37␤38␤39␤40␤41␤42␤43␤44␤45␤46␤47␤48␤49␤50␤51␤52␤53␤54␤55␤56␤57␤58␤59␤60␤61␤62␤63␤64␤65␤66␤67␤68␤69␤70␤71␤72␤73␤74␤75␤76␤77␤78␤79␤80␤81␤82􏿽xE2

[02:57] <colomon> thought so

[02:57] <sorear> nom: for 1, 1, *+* ... * { .say }

[02:58] <p6eval> nom 6fd655: OUTPUT«(timeout)1␤1␤2␤3␤5␤8␤13␤21␤34␤55␤89␤144␤233␤377␤610␤987␤1597␤2584␤4181␤6765␤10946␤17711␤28657␤46368␤75025␤121393␤196418␤317811␤514229␤832040␤1346269␤2178309␤3524578␤5702887␤9227465␤14930352␤24157817␤39088169␤63245986␤102334155␤165580141␤267914296␤433494437␤701408733␤1…

[02:58] <colomon> hmmm

[02:58] <sorear> colomon: it looks to me like it's getting to the first item

[02:58] <colomon> yeah, in this case.

[02:58] <colomon> golfing...

[02:58] <colomon> nom: my @a = 1...*; for @a -> $a { say $a }

[02:58] <colomon> whoops

[02:58] <p6eval> nom 6fd655: OUTPUT«(timeout)1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤29␤30␤31␤32␤33␤34␤35␤36␤37␤38␤39␤40␤41␤42␤43␤44␤45␤46␤47␤48␤49␤50␤51␤52␤53␤54␤55␤56␤57␤58␤59␤60␤61␤62␤63␤64␤65␤66␤67␤68␤69␤70␤71␤72␤73␤74␤75␤76␤77␤78␤79␤80␤81␤82􏿽xE2

[02:58] <colomon> nom: my @a := 1...*; for @a -> $a { say $a }

[02:59] <p6eval> nom 6fd655: OUTPUT«(timeout)1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤29␤30␤31␤32␤33␤34␤35␤36␤37␤38␤39␤40␤41␤42␤43␤44␤45␤46␤47␤48␤49␤50␤51␤52␤53␤54␤55␤56␤57␤58␤59␤60␤61␤62␤63␤64␤65␤66␤67␤68␤69␤70␤71␤72␤73␤74␤75␤76␤77␤78␤79␤80␤81␤82􏿽xE2

[02:59] <colomon> bad example, then

[02:59] <colomon> nom: my @a := gather loop { take 10; }; for @a { .say }

[02:59] <p6eval> nom 6fd655: OUTPUT«(timeout)»

[02:59] <colomon> there you go

[03:00] <sorear> waitwait, :samespace is nondeterministic?

[03:00] <sorear> S05:379 /randomly/

[03:01] <colomon> sorear: that's changing the subject, right?

[03:01] <colomon> what's happening to me in nom is:

[03:02] <colomon> 1) IO.get appears to loop through the file instead of stopping at the end of it

[03:03] <colomon> 2) for is eager if it doesn't know its argument is infinite

[03:04] <colomon> The combination completely breaks the standard      for $fh.lines { }      idiom

[03:04] <sorear> colomon: yes.  I'm picking over S05, trying to make a comprehensive list of S05 features not in niecza

[03:04] <colomon> sorear: gotcha.  just wanted to make sure we were on the same wavelength.

[03:11] *** Guest77466 left
[03:15] *** ispeak_ left
[03:29] <[Coke]> sorear++

[03:31] <sorear> [Coke]: for the bugs?

[03:32] <sorear> niecza: "abc" ~~ / . { say $/.WHAT; say $¢.WHAT } /

[03:32] <p6eval> niecza v12-30-g567948e: OUTPUT«Cursor()␤Cursor()␤»

[03:34] <sorear> japhb: still here?

[03:36] <japhb> Good timing, sorear, I just got bak

[03:37] <sorear> japhb: what do you think about S05:933 ?

[03:37] * japhb goes to look ...

[03:39] *** Patterner left
[03:39] *** envi_ left
[03:40] <japhb> sorear, OK, I've read it a couple times.  What in there is bothering you?

[03:40] *** Psyche^ joined
[03:40] *** Psyche^ is now known as Patterner

[03:41] <sorear> japhb: do you really think it makes sense for a regex to return Failure?

[03:42] <japhb> Let me preface my response with "I've spent a LOT less time thinking about the grammar engine than you, pmichaud, etc." ...

[03:43] <japhb> That said, when I first started looking at Perl 6, fail-in-regex was the first or second place I saw it.

[03:43] <colomon> perl6: say .5 ** Inf

[03:43] <p6eval> pugs b927740: OUTPUT«(timeout)»

[03:43] <p6eval> ..rakudo 6fd655, niecza v12-30-g567948e: OUTPUT«0␤»

[03:44] <japhb> To me, the concept of forcing the match to fail using a verb 'fail' makes complete sense.  That fail() in the context of a regex should act exactly the same as fail() in the context of a non-grammar Routine is not entirely clear.

[03:46] <japhb> It doesn't make a lot of sense to me that match attempt that fails because the string doesn't match the regex pieces versus a match attempt that fails because the regex called fail() would act differently.

[03:48] <sorear> Not matching regex pieces has behavior like { return Nil }

[03:48] <sorear> it's not entirely clear to me whether { fail } is supposed to behave more like <!> or ::: <!>

[03:49] <japhb> Right.  My point was that it seems goofy for the two cases to act differently.

[03:49] <sorear> a regex is supposed to return a lazy list of Match objects

[03:51] <japhb> Let me alter my phrasing: It makes sense to me that either: A) not matching regex pieces puts a Failure into that lazy list (and thus fail() inside a regex just acts the same automatically) or B) The grammar engine captures Failure inside of a regex and silences it back to Nil.

[03:52] <japhb> I'm afraid I haven't spent enough time thinking about the grammar engine to say which of those makes more sense.

[03:53] <japhb> .oO( ENEEDMORETUITS )

[03:53] <sorear> niecza: / {*} /

[03:53] *** envi_ joined
[03:53] <p6eval> niecza v12-30-g567948e:  ( no output )

[03:55] *** Radvendii joined
[03:55] <sorear> o/ Radvendii

[03:56] <Radvendii> hey

[03:56] <sorear> niecza: sub infix:<•>($x,$y) { CORE::infix:<*> $x, $y }; say 3 • 4 # I fixed a bug for you

[03:56] <p6eval> niecza v12-30-g567948e: OUTPUT«12␤»

[04:03] *** leprevost left
[04:04] <sorear> niecza: my $foo = /abc/; say "xyabcdef" ~~ / <.$foo> /

[04:04] <japhb> sorear, Sorry I couldn't be of more help about fail() in regex.  BTW, you probably already realized this, but ... the grammar engine has to know how to deal with Failure no matter what, because any closure could return Failure some other way than calling fail().

[04:04] <p6eval> niecza v12-30-g567948e: OUTPUT«===SORRY!===␤␤Dottyop assertions NYI at /tmp/hUI5Ql9f0S line 1:␤------> $foo = /abc/; say "xyabcdef" ~~ / <.$foo⏏> /␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 880 (die @ 2) …

[04:05] <sorear> japhb: To me, violating the subrule call protocol is DIHWIDT.

[04:06] <sorear> niecza: my $foo = /abc/; say "xyabcdef" ~~ / <$foo> /

[04:06] <p6eval> niecza v12-30-g567948e: OUTPUT«#<match from(2) to(5) text(abc) pos([].list) named({}.hash)>␤»

[04:06] <sorear> niecza: my $foo = /abc/; say "xyabcdef" ~~ / <$foo(2)> /

[04:06] <p6eval> niecza v12-30-g567948e: OUTPUT«Unhandled exception: System.InvalidCastException: Cannot cast from source type to destination type.␤  at Anon.1.Run.MAIN.C1ANON (Niecza.Frame ) [0x00000] in <filename unknown>:0 ␤  at Niecza.Kernel.RunCore (Niecza.Frame& cur) [0x00000] in <filename unknown…

[04:07] <japhb> Sure, but even DIHWIDT shouldn't blow up the missile.

[04:07] <japhb> (to mix a couple metaphors)

[04:12] <sorear> std: my $foo; / <$foo = 5> /

[04:12] <p6eval> std be1f10e: OUTPUT«ok 00:01 124m␤»

[04:14] <sorear> niecza: my $str = "alpha"; say "x" ~~ /<::($str)>/

[04:14] <p6eval> niecza v12-30-g567948e: OUTPUT«===SORRY!===␤␤Indirect method calls NYI at /tmp/UKgoE4x1lC line 1:␤------> my $str = "alpha"; say "x" ~~ /<::($str)⏏>/␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 880 (die @ 2…

[04:18] <sorear> nice fossil at S05:1513

[04:21] <[Coke]> sorear: well, the bugfixes. I see spectest is mixed now, will try to clean it up.

[04:22] <[Coke]> niecza: my $a=Mu; say $a++

[04:22] <p6eval> niecza v12-30-g567948e: OUTPUT«0␤»

[04:23] <sorear> niecza: / <[ z .. a ]> /

[04:23] <p6eval> niecza v12-30-g567948e:  ( no output )

[04:23] <[Coke]> niecza: my $a=Mu; say defined($a--);

[04:23] <p6eval> niecza v12-30-g567948e: OUTPUT«Bool::True␤»

[04:23] <[Coke]> nom: my $a=Mu; say defined($a--);

[04:23] <p6eval> nom 6fd655: OUTPUT«Bool::True␤»

[04:26] *** drbean left
[04:31] <[Coke]> perl6: sign(1+2i);

[04:31] <p6eval> rakudo 6fd655: OUTPUT«(timeout)»

[04:31] <p6eval> ..niecza v12-30-g567948e: OUTPUT«Unhandled exception: Complex numbers are not arithmetically ordered; use cmp if you want an arbitrary order␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (sign @ 0) ␤  at /tmp/Rv3WEKfIaV line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting l…

[04:31] <p6eval> ..pugs b927740:  ( no output )

[04:33] *** drbean joined
[04:35] <sorear> niecza: regex :ratchet  { x y z }

[04:35] <p6eval> niecza v12-30-g567948e: OUTPUT«===SORRY!===␤␤Colonpair traits NYI at /tmp/o05PxdeQAZ line 1:␤------> regex :ratchet  ⏏{ x y z }␤␤Use of uninitialized value in string context␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 773 (warn @ 2) ␤  at /ho…

[04:37] <sorear> niecza: say "abc" ~~ /a :: bc/

[04:37] <p6eval> niecza v12-30-g567948e: OUTPUT«#<match from(0) to(3) text(abc) pos([].list) named({}.hash)>␤»

[04:37] <sorear> niecza: say "abc" ~~ /a ::> bc/

[04:37] <p6eval> niecza v12-30-g567948e: OUTPUT«#<match from(0) to(3) text(abc) pos([].list) named({}.hash)>␤»

[04:40] <dalek> roast: 737ff9d | coke++ | S (4 files):

[04:40] <dalek> roast: niecza fudging (with tickets)

[04:40] <dalek> roast: review: https://github.com/perl6/roast/commit/737ff9d3b3

[04:41] <[Coke]> sorear: several random unfudges, one or three new ones.

[04:41] <[Coke]> #90 is dubious, but I figured better a skip with a ticket than a failing test.

[04:55] *** envi_ left
[04:56] *** ssotka joined
[04:58] *** ispeak joined
[05:01] *** am0c joined
[05:07] *** Radvendii left
[05:10] *** Radvendii joined
[05:10] <Radvendii> am i being shown as logged in?

[05:11] <Radvendii> (im trying to check if autosendcmd is working...

[05:11] <Radvendii> )

[05:12] *** Radvendii left
[05:13] *** ispeak left
[05:14] *** Radvendi1 joined
[05:14] *** Radvendi1 left
[05:14] *** Radvendii joined
[05:14] *** Radvendii left
[05:14] *** Radvendii joined
[05:15] *** Radvendii left
[05:17] *** Radvendii joined
[05:17] *** thou joined
[05:23] *** kaleem joined
[05:24] *** ponbiki joined
[05:29] <sorear> Radvendii: hi

[05:29] <sorear> Radvendii: 1. you are logged in 2. DON'T USE AUTOSENDCMD FOR LOGGING IN

[05:32] <sorear> Radvendii: http://freenode.net/faq.shtml#identify

[05:38] *** birmjin__ left
[05:44] *** drbean left
[05:51] *** Radvendii left
[05:52] *** envi_ joined
[05:52] *** drbean joined
[06:04] *** ssotka left
[06:05] *** kaleem left
[06:07] *** qiuhw joined
[06:08] <qiuhw> perl6: say '/aa-aa' ~~ / '/' (.+?) '-' .+/;

[06:08] <p6eval> niecza v12-30-g567948e: OUTPUT«#<match from(0) to(6) text(/aa-aa) pos([#<match from(1) to(3) text(aa) pos([].list) named({}.hash)>].list) named({}.hash)>␤»

[06:08] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected "'"␤    expecting term postfix, operator, ":" or ","␤    at /tmp/QVYVlT0xwW line 1, column 21␤»

[06:08] <p6eval> ..rakudo 6fd655: OUTPUT«#<failed match>␤»

[06:09] <qiuhw> say ?('/aa-aa' ~~ / '/' (.+?) '-' .+/);

[06:09] <qiuhw> perl6: say ?('/aa-aa' ~~ / '/' (.+?) '-' .+/);

[06:09] <p6eval> niecza v12-30-g567948e: OUTPUT«Bool::True␤»

[06:09] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected "'"␤    expecting term postfix, operator or ")"␤    at /tmp/6u8L8L9RKa line 1, column 23␤»

[06:09] <p6eval> ..rakudo 6fd655: OUTPUT«Bool::False␤»

[06:09] <qiuhw> I think this is a rakudo bug

[06:09] <sorear> qiuhw: known bug

[06:10] <qiuhw> Oh, please also have a look at this: https://gist.github.com/1475234, are the other bugs all known?

[06:12] <sorear> 11 and 12 are exactly the same

[06:12] <sorear> 1 is not quite the same, I'm not sure

[06:12] <sorear> wait for a Rakudo expert

[06:14] <qiuhw> Yes, 11 and 12 and exactly the same. Also 1 and 2 are exactly the same. I just listed all the possibilities.

[06:20] *** drbean left
[06:20] <dalek> niecza: 45fd62a | sorear++ | docs/TODO.S05:

[06:20] <dalek> niecza: Add a more-or-less complete list of unimplemented S05 features

[06:20] <dalek> niecza: review: https://github.com/sorear/niecza/commit/45fd62aaa3

[06:20] *** kaleem joined
[06:21] <moritz> shouldn't they all match?

[06:25] <sorear> o/ moritz 

[06:26] *** alvis left
[06:26] *** drbean joined
[06:31] <qiuhw> moritz: Oh sorry, a long time I haven't write any code and I just misunderstood the greedy mode and the backtracing . Yes they should be all matched.

[06:34] <qiuhw> Then, the bug are tests 3 and 4, not 1 and 2.

[06:37] <sorear> perl6: say 'Deu' ~~ / D<*euteronomy> /

[06:37] <p6eval> niecza v12-30-g567948e: OUTPUT«===SORRY!===␤␤Action method assertion:sym<*> not yet implemented at /tmp/Jh0iHdpnT4 line 1:␤------> say 'Deu' ~~ / D<*euteronomy⏏> /␤␤Unhandled exception: Unable to resolve method oplift in class Str␤  at /home/p6eval/n…

[06:37] <p6eval> ..rakudo 6fd655: OUTPUT«===SORRY!===␤Confused at line 1, near "say 'Deu' "␤»

[06:37] <p6eval> ..pugs b927740: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20111008/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HAND…

[06:37] <sorear> Has anyone ever implemented this?

[06:41] *** alvis joined
[06:41] <moritz> b: say 'Deu' ~~ / D<*euteronomy> /

[06:41] <p6eval> b 1b7dd1: OUTPUT«===SORRY!===␤Confused at line 22, near "say 'Deu' "␤»

[06:42] <moritz> I don't think so

[06:42] *** qiuhw left
[06:47] <sorear> I am hoping to get almost all of S05 implemented for v13, for some defintion of 'almost all'

[06:47] *** koban joined
[06:48] * sorear wonders if it might be useful to start tagging the niecza bugs.  nyi, normal, major, this-is-a-feature

[06:49] <sorear> blocks-on-roles

[06:54] <sorear> hmm, <* @abbrev> is problematic because there is no spec way to get the "full" key out

[06:54] *** Ind001 joined
[06:55] *** Ind001 left
[06:57] <sorear> I need to discuss a few of these with TimToady, maybe tomorrow

[07:00] *** wtw joined
[07:05] * sorear -> sleep

[07:07] *** alvis left
[07:15] *** cosimo left
[07:18] *** stepnem_ joined
[07:19] *** stepnem left
[07:19] *** kfo_ left
[07:19] *** kfo joined
[07:19] *** stepnem_ is now known as stepnem

[07:20] *** alvis joined
[07:23] *** drbean left
[07:24] *** cosimo joined
[07:26] *** ponbiki left
[07:27] *** sftp left
[07:28] *** wolfman2000 left
[07:28] *** thou left
[07:29] *** drbean joined
[07:29] *** sftp joined
[07:32] *** molaf_ left
[07:42] *** avar left
[07:42] *** avar joined
[07:42] *** djanatyn left
[07:42] *** envi_ left
[07:42] *** djanatyn joined
[07:44] *** _twitch joined
[07:48] *** drbean left
[07:51] *** replore_ left
[07:52] *** replore__ joined
[07:55] *** drbean joined
[08:04] *** _twitch left
[08:08] *** envi_ joined
[08:11] *** baest joined
[08:16] <moritz> nom: say 3.5 === 3.5

[08:16] <p6eval> nom 6fd655: OUTPUT«Bool::False␤»

[08:18] *** agentzh joined
[08:24] * moritz is about to fix that

[08:25] <dalek> rakudo/objat: d81c8a1 | moritz++ | / (5 files):

[08:25] <dalek> rakudo/objat: first shot at ObjAt, and make .WHICH use it

[08:25] <dalek> rakudo/objat: 

[08:25] <dalek> rakudo/objat: All tests pass

[08:25] <dalek> rakudo/objat: review: https://github.com/rakudo/rakudo/commit/d81c8a1e2e

[08:25] <dalek> rakudo/objat: 5aed0e3 | moritz++ | src/core/ (6 files):

[08:25] <dalek> rakudo/objat: split WHICH into multis, and special-case the .WHICH of value types

[08:25] <dalek> rakudo/objat: review: https://github.com/rakudo/rakudo/commit/5aed0e30f5

[08:28] <moritz> phenny: tell jnthn about the objat branch, which implements ObjAt and passes all spectests; I'll merge it if you're fine with the general approach

[08:28] <phenny> moritz: I'll pass that on when jnthn is around.

[08:29] *** drbean left
[08:34] *** drbean joined
[08:44] *** lestrrat left
[08:45] *** lestrrat joined
[08:48] <moritz> ... and two TODO tests pass :-)

[08:57] *** mj41 joined
[08:58] *** wtw left
[09:02] *** cognominal_ joined
[09:03] *** hypolin joined
[09:05] *** cognominal left
[09:05] *** wtw joined
[09:05] *** envi_ left
[09:10] *** Trashlord joined
[09:11] <dalek> rakudo/objat: a100ad0 | moritz++ | docs/ROADMAP:

[09:11] <dalek> rakudo/objat: ObjAt is done

[09:11] <dalek> rakudo/objat: review: https://github.com/rakudo/rakudo/commit/a100ad0479

[09:32] *** Sarten-X left
[09:39] *** Sarten-X joined
[09:44] *** baest_ joined
[09:46] *** dakkar joined
[09:47] *** baest left
[09:47] *** envi_ joined
[09:53] <moritz> ... and now that we have a proper .WHICH, object hashes aren't too hard to implement (just fiddly)

[09:54] <jnthn> moritz: Bit tied up ATM, but will review your ObjAt stuff on the train this afternoon.

[09:54] <phenny> jnthn: 08:28Z <moritz> tell jnthn about the objat branch, which implements ObjAt and passes all spectests; I'll merge it if you're fine with the general approach

[10:02] *** replore__ left
[10:06] *** baest_ is now known as baest

[10:06] *** hypolin left
[10:31] *** jerome_ joined
[10:37] <dalek> rakudo/nom: a2ca4c6 | moritz++ | src/core/EnumMap.pm:

[10:37] <dalek> rakudo/nom: change a pir:: to nqp:: opcode

[10:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a2ca4c69b5

[10:39] *** am0c left
[10:40] *** [particle]1 joined
[10:42] *** [particle] left
[10:47] *** daxim joined
[11:03] *** mkramer joined
[11:17] <flussence> I'm a little bit rusty, is there anything here I'm doing obviously wrong? https://github.com/flussence/perl6-XMMS2/blob/for-zavolaj-v2/lib/XMMS2/Connection.pm6#L40

[11:17] <flussence> (I'm getting "Cannot assign to a non-container" on line 51)

[11:19] <moritz> flussence: that's weird

[11:20] *** lestrrat left
[11:20] <jnthn> Indeed.

[11:20] <jnthn> Does binding work?

[11:20] <jnthn> Wonder is CPointer REPR is giving out something really dodgy in its storage_spec.

[11:21] *** lestrrat joined
[11:21] <flussence> aha, that seems to get further...

[11:22] *** mkramer left
[11:24] <flussence> got one test passing now :D

[11:29] *** hillu left
[11:30] *** hillu joined
[11:31] <jnthn> flussence: I need to get my stuff packed and head to the station in a moment, but try applying https://gist.github.com/1476220 to see if it helps your assign issue.

[11:32] <flussence> will do, thanks

[11:37] *** sftp left
[11:38] *** jerome_ left
[11:40] *** sftp joined
[11:48] *** sftp left
[11:52] *** benabik left
[11:54] *** sftp joined
[11:58] <jnthn> travel time...back this evening &

[11:58] <colomon> o/

[11:59] *** donri joined
[12:00] *** icovnik joined
[12:01] *** cognominal joined
[12:03] <donri> "==> Succesfully installed panda" but then "Incorrect pre-compiled version of lib/JSON/Tiny/Actions.pm loaded"

[12:04] *** cognominal_ left
[12:06] <donri> works if I set PERL6LIB like bootstrap does, but should you have to?

[12:07] *** jerome_ joined
[12:09] *** bacek joined
[12:10] *** jerome_ left
[12:12] *** lichtkind joined
[12:12] *** jerome_ joined
[12:16] *** raiph joined
[12:16] <tadzik> donri: yeah, there's something broken about module precompilation

[12:16] <tadzik> just find ~/.perl6/lib -name '*.pir' -delet

[12:17] *** jerome_ left
[12:17] *** jerome_ joined
[12:18] *** snearch joined
[12:19] <donri> tadzik: works. so, why doesn't panda install itself on my system?

[12:20] <donri> also getting "use of uninitialized value of type Command in string context" but doesn't seem to matter

[12:21] <tadzik> donri: doesn't it?

[12:21] <donri> $ which panda

[12:21] <donri> /usr/bin/which: no panda in ...

[12:22] <donri> i have to cd to my panda repo clone and do perl6 bin/panda

[12:22] <tadzik> do you have ~/.perl6/bin in your $PATH?

[12:22] <donri> ah, i see

[12:22] <donri> i expected it to install where my parrot/perl6 are

[12:23] <tadzik> don't hesitate to open a ticket for that

[12:25] <tadzik> at least a symlink would be nice, I uppose

[12:25] <donri> ~/.perl6 is fine, just needs to be documented ;)

[12:26] <tadzik> wanna commit bit? :)

[12:26] <donri> scary prospect

[12:28] *** jerome_ left
[12:33] <moritz> commit bits don't hurt anybody

[12:37] *** benabik joined
[12:39] *** orafu left
[12:39] *** orafu joined
[12:39] *** Patterner left
[12:39] *** bluescreen10 joined
[12:51] *** jerome_ joined
[12:57] *** bacek left
[13:01] *** PZt left
[13:01] *** hrj joined
[13:04] *** PZt joined
[13:05] *** ispeak_ joined
[13:11] *** Radvendi1 joined
[13:13] <moritz> nom: say so 'foo' ~~ /^<|w>/

[13:13] <p6eval> nom a2ca4c: OUTPUT«===SORRY!===␤Confused at line 1, near "say so 'fo"␤»

[13:14] <Radvendi1> perl6: while prompt("hi") {say $_.WHAT}

[13:14] <p6eval> pugs b927740: OUTPUT«*** No such subroutine: "&prompt"␤    at /tmp/6qC9jBpDOc line 1, column 7-20␤»

[13:14] <p6eval> ..rakudo a2ca4c, niecza v12-31-g45fd62a: OUTPUT«hiAny()␤hiAny()␤hiAny()␤hiAny()␤hiAny()␤hiAny()␤hiAny()␤hi»

[13:14] <Radvendi1> why is $_ of type any()? shouldn't it be Str()?

[13:14] <moritz> Radvendi1: because you didn't assign to it

[13:15] <moritz> perl6: while prompt('hi') -> $_ { say $_.WHAT }

[13:15] <Radvendi1> doesn't while do that?

[13:15] <p6eval> pugs b927740: OUTPUT«*** No such subroutine: "&prompt"␤    at /tmp/4ZREb9Qqob line 1, column 7-20␤»

[13:15] <p6eval> ..rakudo a2ca4c, niecza v12-31-g45fd62a: OUTPUT«hiStr()␤hiStr()␤hiStr()␤hiStr()␤hiStr()␤hiStr()␤hiStr()␤hi»

[13:15] <moritz> Radvendi1: no

[13:15] <Radvendi1> aw really?

[13:15] <Radvendi1> oh

[13:15] <moritz> Radvendi1: it's not Perl 5 :-)

[13:15] <Radvendi1> can i say while given prompt 'hi' {}?

[13:15] *** drbean left
[13:16] <moritz> you can also do it like I just demonstrated

[13:16] <Radvendi1> i always feel silly assigning things to $_. it's the automatically assigned variable... but okay.

[13:16] <Radvendi1> thanks

[13:17] <Radvendi1> also, can i use when: without a given?

[13:17] <moritz> yes

[13:18] <Radvendi1> sweet

[13:18] *** mtk joined
[13:19] *** Psyche^ joined
[13:19] *** Psyche^ is now known as Patterner

[13:20] <donri> given just sets $_ for the duration of the block and when just smartmatches on $_

[13:20] <donri> they only work well together "coincidentally" ;)

[13:21] <moritz> donri: not quite true

[13:21] <donri> oh well

[13:21] <moritz> donri: a 'when' also implies some additional control flow

[13:21] <moritz> nom: given 1 { when 1 { say 'in 1' }; say 'outside 1' }

[13:21] <p6eval> nom a2ca4c: OUTPUT«in 1␤»

[13:21] <donri> nom: for ^5 { .say when *%2 }

[13:21] <p6eval> nom a2ca4c: OUTPUT«1␤3␤»

[13:22] <donri> moritz: oh? i see

[13:22] *** drbean joined
[13:23] <moritz> that's done so that a given { } with multiple when-clauses aborts after the first successful match

[13:23] <donri> ah yea

[13:23] *** jaldhar left
[13:24] *** icovnik left
[13:24] <Radvendi1> i dont see.

[13:24] <[Coke]> moritz: so, no way to get the c-style fall through on switch blocks with given/when?

[13:24] <donri> Radvendi1: the "outside 1" never ran

[13:24] <donri> because a "when" matched

[13:24] <colomon> [Coke]: there is a way, but I forget what it is called

[13:24] <Radvendi1> what about the second example?

[13:24] <colomon> continue?

[13:25] <donri> Radvendi1: my example?

[13:25] <Radvendi1> yeah

[13:25] <donri> Radvendi1: what part don't you understand?

[13:25] <colomon> nom: for ^5 { .say when *%2; say "not when" }

[13:25] <p6eval> nom a2ca4c: OUTPUT«not when␤1␤not when␤not when␤3␤not when␤not when␤»

[13:25] <Radvendi1> shoulding it be printing 2 and 4?

[13:25] <donri> Radvendi1: no, % gives the remainder which is truth-like

[13:25] <colomon> huh

[13:25] <Radvendi1> oh right

[13:26] <Radvendi1> sorry

[13:26] <donri> but yea i did mean %%

[13:26] <donri> nom: for ^5 { .say when *%%2 }

[13:26] <p6eval> nom a2ca4c: OUTPUT«0␤2␤4␤»

[13:26] <Radvendi1> okay

[13:26] <donri> %% is "not %"

[13:26] <colomon> nom: for ^5 { .say when *%%2; say "not when" }

[13:26] <p6eval> nom a2ca4c: OUTPUT«0␤not when␤not when␤2␤not when␤not when␤4␤not when␤»

[13:26] <donri> aka "divisible by"

[13:26] <colomon> nom: for ^5 { when *%%2 { .say }; say "not when" }

[13:26] <p6eval> nom a2ca4c: OUTPUT«0␤not when␤2␤not when␤4␤»

[13:26] <colomon> moritz: bug or feature?

[13:27] <colomon> niecza: for ^5 { .say when *%%2; say "not when" }

[13:27] <p6eval> niecza v12-31-g45fd62a: OUTPUT«0␤not when␤not when␤2␤not when␤not when␤4␤not when␤»

[13:27] <colomon> niecza: for ^5 { when *%%2 { .say }; say "not when" }

[13:27] <p6eval> niecza v12-31-g45fd62a: OUTPUT«0␤not when␤2␤not when␤4␤»

[13:27] <donri> nom: .say when *%%2 for ^5

[13:27] <p6eval> nom a2ca4c: OUTPUT«0␤2␤4␤»

[13:27] <moritz> perl6: for ^5 { .say when *%%2; say "not when $_" }

[13:27] <p6eval> rakudo a2ca4c, niecza v12-31-g45fd62a: OUTPUT«0␤not when 0␤not when 1␤2␤not when 2␤not when 3␤4␤not when 4␤»

[13:27] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected "when"␤    expecting operator or "}"␤    at /tmp/0CwrnncVqu line 1, column 15␤»

[13:28] <moritz> perl6: for ^5 { when *%%2 { .say }; say "not when $_" }

[13:28] <p6eval> rakudo a2ca4c, niecza v12-31-g45fd62a: OUTPUT«0␤not when 1␤2␤not when 3␤4␤»

[13:28] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected "%2"␤    expecting term postfix, operator or block␤    at /tmp/MPb5OLKkAp line 1, column 17␤»

[13:28] <donri> heh

[13:29] <donri> nice to see new implementations surpassing pugs ;)

[13:29] <moritz> colomon: looks good to me, no bug there

[13:30] <colomon> moritz: when as a statement modifier doesn't skip the remainder of the enclosing block?

[13:30] <moritz> colomon: correct

[13:31] <colomon> why?

[13:31] <[Coke]> almost up to 11000 niecza tests run.

[13:31] *** Radvendi1 left
[13:31] <colomon> ah, found it in the spec

[13:31] <dalek> rakudo/nom: 12334be | moritz++ | docs/ROADMAP:

[13:31] <dalek> rakudo/nom: add some more ROADMAP goals

[13:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/12334bec17

[13:31] <moritz> colomon: because that seems to be what most people expect, I supose

[13:32] <colomon> most people are weird.  ;)

[13:33] <colomon> nom: say ($_ when /7/ for 1..20).perl

[13:33] <p6eval> nom a2ca4c: OUTPUT«(7, 17).list␤»

[13:36] *** flussence_ joined
[13:36] <colomon> btw, I'm getting really weird results with I/O in nom.

[13:36] *** flussence left
[13:37] <colomon> I posted some last night, but I'm getting different ones this morning.

[13:37] <moritz> I've also heard reports that .get and .lines interact weirdly

[13:39] *** CoreX_ left
[13:39] *** am0c joined
[13:39] <colomon> yeah, it was looping on the file for me last night

[13:40] <colomon> this morning, I can't get it to open the file at all

[13:40] <colomon> and I get weirdly different errors

[13:41] <colomon> https://gist.github.com/1476606 # cannot open a file

[13:42] <colomon> I've tried it in niecza (just to make sure I'm sane) and it works fine there.

[13:42] <moritz> huh.

[13:43] <colomon> and this stuff was working fine for me last night, it's my attempt to golf it down which seems to have created a problem.

[13:43] *** mj41_nb joined
[13:43] *** mj41_nb left
[13:43] *** drbean left
[13:44] *** mkramer joined
[13:50] *** drbean joined
[13:51] *** kaleem left
[13:51] <moritz> note that   while $thing.get  { ... }   won't work very well

[13:55] *** CoreX_ joined
[13:57] *** agentzh left
[14:01] <lichtkind> doesnt change True in num context to 1 ?

[14:01] *** mkramer left
[14:01] <moritz> perl6: say (+True).perl

[14:01] <p6eval> rakudo 12334b, niecza v12-31-g45fd62a: OUTPUT«1␤»

[14:01] <p6eval> ..pugs b927740: OUTPUT«1.0␤»

[14:02] <moritz> looks like, yes

[14:02] <moritz> lichtkind: do you still want to write an advent post?

[14:02] <lichtkind> i ask because i currently on it

[14:03] *** mkramer joined
[14:04] <lichtkind> found the bug didnt thought about precedence of +

[14:05] * moritz thinks he should make the post about operator precdence after all :-)

[14:09] *** mkramer left
[14:09] *** mkramer joined
[14:09] *** mkramer left
[14:12] *** [particle]1 is now known as [particle]

[14:17] *** Sarten-X left
[14:18] *** cognominal left
[14:20] *** srini joined
[14:20] *** cognominal joined
[14:20] * [Coke] ponders creating a .implementation file in niecza & rakudo that is just a file that says "niecza" or "rakudo".

[14:22] <moritz> [Coke]: what would you use it for?

[14:22] *** koban left
[14:23] *** cognominal_ joined
[14:23] <[Coke]> moritz: things like tools/test_summary.pl

[14:23] <[Coke]> or fudge.

[14:24] <dalek> rakudo/nom: 5cf8eba | coke++ | tools/test_summary.pl:

[14:24] <dalek> rakudo/nom: Make test_summary less rakudo-specific

[14:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5cf8ebad15

[14:26] *** snearch left
[14:26] *** cognominal left
[14:28] <lichtkind> perl6: chars 'hahaha'

[14:28] <felher> I have a role that i use somewhat like a java-interface. Is there a way to specify that certain methods should also be available on the type-object of a class that 'does' that role?

[14:28] <p6eval> rakudo 12334b: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&chars' called (line 1)␤»

[14:28] <p6eval> ..pugs b927740, niecza v12-31-g45fd62a:  ( no output )

[14:28] <lichtkind> niecza: chars 'hahaha'

[14:28] <moritz> felher: that's the default

[14:28] <p6eval> niecza v12-31-g45fd62a:  ( no output )

[14:28] *** Sarten-X joined
[14:30] <felher> moritz: I know that i can call the methods on the type-object. I'm searching for a way to annotate that they should _work_ with only a type-object. Something that prevents or hints the programmer from accessing attributes, for example.

[14:31] <moritz> felher: write some POD

[14:32] <moritz> I don't think there are any kind of semantic annotations that automatically ensure that

[14:32] <felher> moritz++: okay, thnx :)

[14:34] <flussence_> nom: class A { method B(A:U:) { } }; A.new.B

[14:34] <p6eval> nom 12334b: OUTPUT«Parameter '' requires a type object, but an object instance was passed␤  in method B at /tmp/MiBIgN2fHp:1␤  in block <anon> at /tmp/MiBIgN2fHp:1␤  in <anon> at /tmp/MiBIgN2fHp:1␤»

[14:35] *** flussence_ is now known as flussence

[14:35] <moritz> felher: that doesn't stop method B from trying to access attributes though

[14:35] <moritz> sorry, meant flussence 

[14:36] <flussence> oh, right, the method has to work for both :D and :U...

[14:37] <lichtkind> substr doesnt take negative input?

[14:38] <flussence> lichtkind: you probably want *-1 instead of -1

[14:38] *** cognominal_ left
[14:38] <moritz> nom: say 'foobar'.substr(*-2)

[14:38] <p6eval> nom 12334b: OUTPUT«Method 'Int' not found for invocant of class 'WhateverCode'␤  in method substr at src/gen/CORE.setting:3142␤  in block <anon> at /tmp/7xFyoYT3Sf:1␤  in <anon> at /tmp/7xFyoYT3Sf:1␤»

[14:38] <moritz> nom: say 'foobar'.substr(-2)

[14:38] <p6eval> nom 12334b: OUTPUT«Failure.new()␤»

[14:38] *** cognominal_ joined
[14:38] <moritz> that's LTA

[14:38] <moritz> *-2 should work, I think

[14:39] <lichtkind> flussence: i did

[14:39] <flussence> nombug?

[14:39] <moritz> flussence: yes

[14:39] *** mkramer joined
[14:39] <[Coke]> https://gist.github.com/1476841 - comparison of niecza vs. rakudo.

[14:40] <lichtkind> No applicable candidates found to dispatch to for 'Numeric'. Available candidates are:

[14:40] <lichtkind> :(Mu, Mu %_)

[14:41] <benabik> [Coke]: Why the difference in the spec column?

[14:41] <lichtkind> thats what i got when i tried my @sorted =  map {$_ = [$_ => substr($_, * - 1)] }, @dj;

[14:41] <felher> flussence++: thnx, it at least gives a hint. And maybe a clever compiler can detect those things a compiletime someday :) And best of all: I learned about :_, :T, :D, :U, which i didn't know before :)

[14:41] <moritz> benabik: because not all test files declare a plan() that can be statically parsed

[14:41] <flussence> lichtkind: something's calling Mu.Numeric, which means there's an undefined value getting in somehwere...

[14:41] <benabik> moritz: Ah.  Thanks.

[14:42] *** mkramer left
[14:43] *** alvis left
[14:43] <[Coke]> benabik: they run different tests.

[14:44] <lichtkind> flussence: i checked but @dj has no enpty value

[14:44] <moritz> it's the * - 1 that doesn't work yet

[14:44] <moritz> I'm spectesting a patch

[14:45] <moritz> lichtkind: why are you assigning to $_ in the map?

[14:45] <lichtkind> i trying old school schwartz in perl 6

[14:45] <felher> Hm, but shouldn't :T instead of :U mean a type-object?

[14:45] <lichtkind> i test some cornercase before talking in article about it

[14:46] <moritz> lichtkind: old school Schwartz doesn't modify the original array

[14:46] <lichtkind> yes

[14:46] <moritz> lichtkind: and you can simply use an arity-1 sub to get automatic Schwartz transform

[14:46] <[Coke]> niecza: say 9050/18222

[14:46] <p6eval> niecza v12-31-g45fd62a: OUTPUT«4525/9111␤»

[14:46] <[Coke]> niecza: print 9050/18222

[14:46] <p6eval> niecza v12-31-g45fd62a: OUTPUT«4525/9111»

[14:47] <[Coke]> niecza: say (9050/18222).Num()

[14:47] <p6eval> niecza v12-31-g45fd62a: OUTPUT«0.496652398199978␤»

[14:47] *** cognominal_ left
[14:47] *** cognominal_ joined
[14:48] <lichtkind> moritz: i didnt got that first?

[14:48] <moritz> which first?

[14:48] <lichtkind> you mean inside sort?

[14:48] <lichtkind> first menas now, at the first reading

[14:49] <moritz> nom: my @a = <foo bar baz quox>; say @a.sort: { .substr(.chars - 1) }

[14:49] <p6eval> nom 12334b: OUTPUT«foo bar quox baz␤»

[14:49] <moritz> lichtkind: that sorts by the last character

[14:49] <moritz> because the closure passed to .sort expects only one argument

[14:50] <moritz> so it does an automatic schwartz transform

[14:50] * flussence bludgeons the code with a golf club... @sorted = @dj.sort(*.substr(*-1));

[14:50] <lichtkind> yes

[14:51] <lichtkind> moritz: thank you thats helpful

[14:51] *** Radvendi1 joined
[14:54] <lichtkind> flussence: that you too

[14:54] <lichtkind> flussence: dut this will not work on own subs

[14:55] <lichtkind> oh wait if it has a signiture it could work

[14:55] <lichtkind> have test that

[14:55] <dalek> rakudo/nom: e765b67 | moritz++ | src/core/Cool.pm:

[14:55] <dalek> rakudo/nom: implement missing sub chars

[14:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e765b67c04

[14:55] <dalek> rakudo/nom: 18d6b14 | moritz++ | src/core/Str.pm:

[14:55] <dalek> rakudo/nom: support closures as first argument to .substr()

[14:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/18d6b141bc

[14:55] <moritz> evalbot control rebuild

[14:55] <moritz> evalbot rebuild nom

[14:55] <p6eval> NOT OK (maybe a rebuild is already in progress?)

[14:56] *** drbean left
[14:58] <lichtkind> no test worked

[14:58] <lichtkind> come back later

[14:59] * moritz wonders what to make of that "feedback"

[15:01] <lichtkind> moritz: ried to wrench sub strip ($str) { substr($str, -3) } somehow into test

[15:01] <lichtkind> didnt work out

[15:01] <lichtkind> but have to go out for a while

[15:01] *** alvis joined
[15:01] *** drbean joined
[15:02] <dalek> roast: ee37b17 | moritz++ | S04-exceptions/fail.t:

[15:02] <dalek> roast: rakudo unfudge

[15:02] <dalek> roast: review: https://github.com/perl6/roast/commit/ee37b17069

[15:03] <moritz> lichtkind: recompile rakudo, then substr($str, *-3) works

[15:03] <lichtkind> gret thanks

[15:04] <lichtkind> moritz:++

[15:09] <lichtkind> ... compiling :)

[15:12] <dalek> roast: fca20a4 | moritz++ | S32-str/substr.t:

[15:12] <dalek> roast: rakudo unfudges

[15:12] <dalek> roast: review: https://github.com/perl6/roast/commit/fca20a411b

[15:13] <moritz> there, 10 more passing spectests :-)

[15:15] <colomon> oh noez, niecza's falling further behind!  ;)

[15:16] * colomon starts poking around for LHF

[15:16] <colomon> hmmm... is it git reset HARD that deletes unwanted commits?

[15:16] <moritz> yes

[15:17] <[Coke]> colomon: yah, let's get it to 50%, at least. ;)

[15:18] <moritz> std: sub f returns Int ($x) { $x }

[15:18] <p6eval> std be1f10e: OUTPUT«ok 00:01 122m␤»

[15:18] <moritz> std: sub f($x) returns Int  { $x }

[15:18] <p6eval> std be1f10e: OUTPUT«ok 00:01 122m␤»

[15:19] <moritz> both forms are allowed?

[15:19] *** mkramer joined
[15:19] *** mkramer left
[15:20] *** ab5tract joined
[15:21] <dalek> roast: d886c58 | moritz++ | S06-signature/types.t:

[15:21] <dalek> roast: bring test more in line with my understanding of Perl 6; fudge it for rakudo

[15:21] <dalek> roast: review: https://github.com/perl6/roast/commit/d886c58ac5

[15:22] *** tokuhirom joined
[15:24] *** Radvendi1 left
[15:27] *** PacoLinux joined
[15:27] <dalek> roast: 1867d4a | moritz++ | S06-traits/misc.t:

[15:27] <dalek> roast: update trait tests to current spec, unfudge

[15:27] <dalek> roast: review: https://github.com/perl6/roast/commit/1867d4a8d5

[15:27] *** kaleem joined
[15:28] <lichtkind> it really worked

[15:28] <colomon> \o/

[15:28] <moritz> of course :-)

[15:30] <srini> ifconfig

[15:30] *** srini left
[15:30] <moritz> bash: ifconfic: command not found

[15:32] *** _twitch joined
[15:33] <dalek> roast: ee08acb | moritz++ | S12-attributes/mutators.t:

[15:33] <dalek> roast: simplify tests; not sure how correct they are :(

[15:33] <dalek> roast: review: https://github.com/perl6/roast/commit/ee08acb4a4

[15:34] *** drbean left
[15:36] <flussence> .oO( ifconfig? but `ip addr` is much more parsable... )

[15:36] <mux> and completely unportable

[15:36] <moritz> perl6: Role

[15:37] <p6eval> niecza v12-31-g45fd62a: OUTPUT«===SORRY!===␤␤Undeclared name:␤        'Role' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 880 (die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1139 (P6.comp_unit @ 32) ␤  at /home/p6…

[15:37] <p6eval> ..pugs b927740:  ( no output )

[15:37] <p6eval> ..rakudo 18d6b1: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&Role' called (line 1)␤»

[15:37] <dalek> roast: 2a4eb3f | moritz++ | S14-roles/basic.t:

[15:37] <dalek> roast: random rakudo fudge

[15:37] <dalek> roast: review: https://github.com/perl6/roast/commit/2a4eb3f8fe

[15:37] *** ksi joined
[15:38] <sorear> good * #perl6

[15:38] <moritz> \o sorear 

[15:38] <dalek> rakudo/nom: f9ccaff | moritz++ | t/spectest.data:

[15:38] <dalek> rakudo/nom: run two more test files

[15:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f9ccaff428

[15:38] <colomon> sorear: just the man I was looking for.

[15:38] <daxim> previous art: http://p3rl.org/IO::Interface http://p3rl.org/Net::Interface

[15:38] <colomon> sorear: what are the current limitations on sort in niecza?

[15:38] <colomon> sorear: it's blowing up badly on me at the moment...

[15:38] <moritz> sorear: do you believe in the Role class?

[15:39] <sorear> moritz: No.

[15:39] <moritz> sorear: ok. Me neither

[15:39] <sorear> moritz: Role is a fossil from back when 5.WHAT.WHAT === Class

[15:39] <moritz> same for Class, Module, Package?

[15:39] <sorear> I think so.

[15:39] <moritz> std: Class

[15:39] <p6eval> std be1f10e: OUTPUT«ok 00:01 118m␤»

[15:39] <moritz> perl6: Class

[15:39] <p6eval> niecza v12-31-g45fd62a: OUTPUT«===SORRY!===␤␤Undeclared name:␤        'Class' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 880 (die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1139 (P6.comp_unit @ 32) ␤  at /home/p…

[15:39] <p6eval> ..rakudo 18d6b1: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&Class' called (line 1)␤»

[15:39] <p6eval> ..pugs b927740:  ( no output )

[15:40] <moritz> perl6: Abstraction

[15:40] <p6eval> niecza v12-31-g45fd62a: OUTPUT«===SORRY!===␤␤Undeclared name:␤        'Abstraction' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 880 (die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1139 (P6.comp_unit @ 32) ␤  at /…

[15:40] <p6eval> ..rakudo 18d6b1: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&Abstraction' called (line 1)␤»

[15:40] <p6eval> ..pugs b927740: OUTPUT«*** No such subroutine: "&Abstraction"␤    at /tmp/VmN77FcJ42 line 1, column 1 - line 2, column 1␤»

[15:40] <moritz> std: Abstraction

[15:40] <p6eval> std be1f10e: OUTPUT«ok 00:01 118m␤»

[15:40] *** drbean joined
[15:40] *** thou joined
[15:41] <sorear> colomon: sort(@list) doesn't take a comparson function, @list.sort($cmp) does

[15:41] *** cognominal_ left
[15:41] <sorear> colomon: also, sort doesn't do a true Schwartzian transform

[15:41] <colomon> yes, was just looking at your source

[15:42] <sorear> colomon: other than that it should be complete ?

[15:42] <moritz> is Abstraction a fossil too?

[15:42] <sorear> moritz: abstraction is an I-can't-tell-what-this-is-supposed-to-mean

[15:42] <moritz> it seems a bit weird that Array ~~ Abstraction, but Array.new !~~ Abstraction

[15:42] *** cognominal joined
[15:42] <moritz> that kinda totally doesn't make sense in our current picture

[15:43] <colomon> oh, I think I see my problem here.

[15:43] <moritz> std: my ::x

[15:43] <p6eval> std be1f10e: OUTPUT«===SORRY!===␤Illegal redeclaration of symbol 'x' (see line 1) at /tmp/qDvwDHnjUG line 1:␤------> my ::x⏏<EOL>␤Multiple prefix constraints not yet supported at /tmp/qDvwDHnjUG line 1 (EOF):␤------> my ::x⏏<EOL>␤M…

[15:43] <sorear> subset Abstraction of Any where !*.defined :D

[15:44] <moritz> what a long way to write Mu:U

[15:44] <colomon> sorear: got it figured out -- was using .kv when I should have been using .pairs, and Match objects when I wanted an Int.

[15:46] <dalek> specs: a69961f | moritz++ | S (2 files):

[15:46] <dalek> specs: remove Abstraction fossil

[15:46] <dalek> specs: 

[15:46] <dalek> specs: It doesn't make sense to have a role that is implemented by type

[15:46] <dalek> specs: objects, but not by defined objects.

[15:46] <dalek> specs: review: https://github.com/perl6/specs/commit/a69961fb23

[15:49] <dalek> mu: 1fd31f9 | moritz++ | docs/feather/syn_index.html:

[15:49] <dalek> mu: [perlcabal.org] remove link to Abstractiono synopsis that is now gone

[15:49] <dalek> mu: review: https://github.com/perl6/mu/commit/1fd31f9556

[15:51] * moritz has been productive: -71 lines written :-)

[15:55] *** cognominal left
[15:55] <[Coke]> moritz++

[15:56] <[Coke]> moritz: "Abstraction" still appears in 2 tests.

[15:56] *** cognominal joined
[15:56] <moritz> [Coke]: will remove them too

[15:58] *** wtw left
[15:59] <moritz> nom: class A does NotThere { }

[15:59] <p6eval> nom f9ccaf: OUTPUT«===SORRY!===␤Unable to parse $*PKGDECL definition at line 1, near "does NotTh"␤»

[16:00] <moritz> std: class A does NotThere { }

[16:00] <p6eval> std be1f10e: OUTPUT«===SORRY!===␤Unable to parse class definition at /tmp/_DDOQ2TWKM line 1:␤------> class A does ⏏NotThere { }␤    expecting typename␤Parse failed␤FAILED 00:01 118m␤»

[16:05] <dalek> roast: e823777 | moritz++ | S14-roles/basic.t:

[16:05] <dalek> roast: fudge and correct role tests

[16:05] <dalek> roast: review: https://github.com/perl6/roast/commit/e823777fc5

[16:05] <dalek> roast: c27acee | moritz++ | S02-types/ (2 files):

[16:05] <dalek> roast: Abstraction defossilization

[16:05] <dalek> roast: review: https://github.com/perl6/roast/commit/c27acee6c3

[16:05] <moritz> another -32 lines :-)

[16:12] *** drbean left
[16:13] <colomon> niecza: say NaN + Inf

[16:13] <p6eval> niecza v12-31-g45fd62a: OUTPUT«NaN␤»

[16:14] <Util> colomon: no, no. Nan+Inf==Wtf  :^)

[16:16] <colomon> perl6: say 13 % -4

[16:16] <p6eval> niecza v12-31-g45fd62a: OUTPUT«5␤»

[16:16] <p6eval> ..pugs b927740, rakudo f9ccaf: OUTPUT«-3␤»

[16:17] <colomon> 5?!

[16:18] <colomon> dang, there is so much NOISE running arith.t in niecza!

[16:18] *** tokuhirom left
[16:19] *** drbean joined
[16:21] <colomon> perl6: say 9 div -4

[16:21] <p6eval> pugs b927740: OUTPUT«*** ␤    Unexpected "div"␤    expecting operator, ":" or ","␤    at /tmp/BAXtCXvn4Z line 1, column 7␤»

[16:21] <p6eval> ..niecza v12-31-g45fd62a: OUTPUT«-1␤»

[16:21] <p6eval> ..rakudo f9ccaf: OUTPUT«-2␤»

[16:22] *** overrosy left
[16:28] <sorear> colomon: why, undef warnings?

[16:28] <colomon> sorear: yes

[16:28] <colomon> I just fixed them with a simple patch to Test.pm6

[16:28] <sorear> should fix those :>

[16:29] <colomon> at least, they went completely away for the file I was looking at.

[16:29] <lichtkind> moritz++ for  digging out fossils

[16:29] <dalek> niecza: b496530 | (Solomon Foster)++ | lib/Test.pm6:

[16:29] <dalek> niecza: Initialize Builder variables to prevent undef errors.

[16:29] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b496530407

[16:30] <colomon> sorear: please check that and see if the change looks right to you.

[16:31] * colomon actually wrote a script to find the biggest LHF candidates (number of tests -wise) for niecza.  ;)

[16:31] <dalek> roast: 2e97e92 | (Solomon Foster)++ | S03-operators/arith.t:

[16:32] <dalek> roast: Patch for niecza.

[16:32] <dalek> roast: review: https://github.com/perl6/roast/commit/2e97e92f54

[16:33] <sorear> colomon: Looks fine but partially redundant - current-test is already initialized on line 82

[16:33] <sorear> funny that Mono.Unix.Native.Syscall has execve but not fork

[16:33] *** kaleem left
[16:34] <PerlJam> I think that's just history

[16:36] <colomon> sorear:  then I guess it was $todo-up-to that was causing all the trouble.

[16:37] <dalek> niecza: 4f74860 | (Solomon Foster)++ | t/spectest.data:

[16:37] <dalek> niecza: Turn on S03-operators/arith.t.

[16:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4f74860ff7

[16:37] <dalek> niecza: 0392d28 | (Solomon Foster)++ | lib/Test.pm6:

[16:37] <dalek> niecza: Remove redundant initialization.

[16:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0392d28b0b

[16:38] <colomon> [Coke]: there, that should have niecza with just slightly over half the nom tests passed mark.  ;)

[16:42] *** mls_ left
[16:42] *** ab5tract left
[16:44] <[Coke]> colomon++

[16:45] <[Coke]> any issue with moving tools/test-summary.pl from rakudo/tools to roast (along side fudge)?

[16:45] <[Coke]> (ISTR I asked this before and everyone said "meh?")

[16:46] * colomon has no opinion

[16:47] * PerlJam is likewise devoid of opinion on this matter

[16:47] <sorear> [Coke]: +1

[16:47] <colomon> sorear: hmmm, still getting warnings from Test.pm6, now in a different test file.  will try to track this down as well.

[16:48] *** _twitch left
[16:49] <[Coke]> rename to "test_summary" to match "fudge" (sans .pl) ?

[16:51] <sorear> [Coke]: +1

[16:52] <PerlJam> [Coke]: *that* I have an opinion on, +1

[16:55] *** ispeak_ left
[16:55] *** ispeak_ joined
[16:56] <cognominal> each time I type a statement starting with say on the bahs shell insteas of the perl6 shell  in my mac, I am for a noisy surprise.

[16:58] <dalek> roast: bdf46c2 | coke++ | test_summary:

[16:58] <dalek> roast: Copy tools/test_summary.pl from rakudo

[16:58] <dalek> roast: 

[16:58] <dalek> roast: This handy tool can easily be used by other implementations.

[16:58] <dalek> roast: 

[16:58] <dalek> roast: Drop the .pl to match "fudge", and change the usage to make

[16:58] <dalek> roast: the implementation name the first param.

[16:58] <dalek> roast: review: https://github.com/perl6/roast/commit/bdf46c2997

[16:59] *** kmwallio joined
[17:01] *** mj41 left
[17:02] <[Coke]> there. now niecza can do "perl t/spec/test_summary niecza" as well.

[17:03] <dalek> rakudo/nom: 4a509fd | coke++ | tools/test_summary.pl:

[17:03] <dalek> rakudo/nom: Moved to roast

[17:03] <dalek> rakudo/nom: 

[17:03] <dalek> rakudo/nom: Run as <perl5> t/spec/test_summary rakudo

[17:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4a509fd5d3

[17:04] <cognominal> nom: class A { multi method a() { ... }; multi a() {}, multi a($a) {} }; say $_ if $_ eq 'a' for A.^methods

[17:04] <p6eval> nom f9ccaf: OUTPUT«a␤»

[17:04] <[Coke]> whoops. I have a local "perl6" command for niecza.

[17:05] <[Coke]> I will think of a way to fix this post lunch.

[17:06] <[Coke]> (I think a .impl file still makes sense: it can include informatio non how to run our copy of perl6 also.)

[17:06] <[Coke]> (in the meantime, adding a .perl6 that does mono ./run/Niecza.exe $@ is a workaround)

[17:08] <cognominal> probably the method "methods" is missing from MultiMethod Container

[17:09] *** MayDaniel joined
[17:10] *** cognominal left
[17:11] <dalek> roast: ec052ef | (Solomon Foster)++ | S03-operators/assign.t:

[17:11] <dalek> roast: Fudge some for niecza, but still has dozens of errors there.

[17:11] <dalek> roast: review: https://github.com/perl6/roast/commit/ec052efcbb

[17:12] *** cognominal joined
[17:12] *** skangas left
[17:13] *** icovnik joined
[17:22] *** sayu joined
[17:27] <colomon> arrrgh, .munch

[17:27] *** triploidtree joined
[17:27] <triploidtree> love the spokesbug

[17:27] *** triploidtree left
[17:28] <sorear> colomon: eeevil

[17:28] <colomon> sorear: in the sequence tests, it's massively frustrating.

[17:28] *** MayDaniel left
[17:29] <colomon> wish that part of the spec were pinned down

[17:31] <Util> .munch vs .batch needs to be settled. .munch is used in Rakudo and Roast but not Specs. .batch is in the Specs but not in Rakudo or Roast.

[17:32] <Util> #phasers time?

[17:32] <PerlJam> indeed

[17:33] *** CoreX_ left
[17:33] <lichtkind> moritz: i consider unary sort a important feature worth an own calendar episode

[17:33] <moritz> any reason not to just use .[^$n] in the tests?

[17:33] <Util> lichtkind: I agree, and was just thinking about that this morning.

[17:35] <cognominal> nom: class A { multi method a() { ... }; multi a() {}, multi a($a) {} }; say $_,.signature if $_ eq 'a' for A.^methods

[17:35] <p6eval> nom 4a509f: OUTPUT«a:(Any, Any, Mu %_)␤»

[17:36] <moritz> lichtkind: http://perl6advent.wordpress.com/2010/12/23/day-23-its-some-sort-of-wonderful/

[17:36] <Util> moritz: Good point. It looks like Roast only uses them for utility, not actually unit-testing the .munch method itself.

[17:37] <Util> lichtkind: also http://perl6advent.wordpress.com/2009/12/20/day-20-little-big-things/

[17:37] <jnthn> moritz: +1 to tossing Abstraction...doesn't make sense in our current world view.

[17:37] <colomon> moritz: the fundamental reason is that .munch is about an order of magnitude simpler than .[^$n].  Which is to say, it was implemented long before [^$n] worked

[17:38] <colomon> dunno if that justifies keeping munch, though.  (if munch were spec'd, sure...)

[17:39] <colomon> (keeping munch in the tests, I mean.)

[17:39] <moritz> anyway, we need to either spec it or remove it

[17:40] *** kaleem joined
[17:41] <jnthn> I...don't think we can remove munch. At least, not as far as I understand the list model.

[17:41] *** ascent_ left
[17:41] *** ascent_ joined
[17:41] <colomon> jnthn: remove it from the tests, not from rakudo

[17:42] <moritz> nom: try eval q[class A { $!foo }]; say $!.name; say $!.package-name

[17:42] <p6eval> nom 4a509f: OUTPUT«$!foo␤A␤»

[17:42] <jnthn> colomon: oh :)

[17:42] <colomon> all right, any objections to my removing munch from S03-sequences/basic.t?

[17:43] <moritz> colomon: go for it

[17:44] <Util> +1

[17:46] <colomon> oh, $&%(*)W%*)(&W*%( -- this test was never updated for the new sequence definition

[17:47] <Util> lichtkind: I was not thinking of writing it myself. I am writing on Perl 6 Idioms, and realized this morning that I needed to remove the S.T. idiom from my advent post, since it deserves its own post.

[17:48] * colomon is very confused

[17:49] <colomon> nom: 1 ... -3

[17:49] <p6eval> nom 4a509f:  ( no output )

[17:50] *** daxim left
[17:51] <colomon> #phasers is now, btw (notice for other slow people like me)

[17:52] <colomon> nom: use Test; is (1 ... -3).join(', '), '1, 0, -1, -2, -3', 'simple decreasing sequence with one item on the LHS';

[17:52] <p6eval> nom 4a509f: OUTPUT«(timeout)»

[17:53] <colomon> why is this test passing?!

[17:53] <colomon> nom: say (1 ... -3).join(', ')

[17:53] <p6eval> nom 4a509f: OUTPUT«1, 0, -1, -2, -3␤»

[17:53] <PerlJam> Util: if you're writing a post on idioms, could you update the topic-brainstorming file to put that in the "already planned" section?

[17:53] <colomon> niecza: say (1 ... -3).join(', ')

[17:53] <p6eval> niecza v12-34-g0392d28: OUTPUT«1, 0, -1, -2, -3␤»

[17:54] <Util> PerlJam: will do.

[17:54] <colomon> apparently I've forgotten a case?

[18:00] *** am0c left
[18:01] <cognominal> nom: my $a = :a(0); say ++$a

[18:01] <p6eval> nom 4a509f: OUTPUT«Method 'succ' not found for invocant of class 'Pair'␤  in sub prefix:<++> at src/gen/CORE.setting:1178␤  in block <anon> at /tmp/wx37cwyJHC:1␤  in <anon> at /tmp/wx37cwyJHC:1␤»

[18:01] <cognominal> should not it increment the value?

[18:02] <moritz> is that specced?

[18:02] <moritz> I mean, if you want to increment the value, why not use .value++?

[18:03] <cognominal> I don't know. I thought it to be a good way to dwim.

[18:05] <dalek> roast: f72a6f4 | (Solomon Foster)++ | S03-sequence/basic.t:

[18:05] <dalek> roast: Switch .munch(N) to .[^N].  Fudge for Niecza.

[18:05] <dalek> roast: review: https://github.com/perl6/roast/commit/f72a6f4af8

[18:06] <cognominal> do { ++$a.value; $a  }  is quite a mouthful

[18:07] *** kaare_ joined
[18:08] *** dakkar left
[18:10] <dalek> niecza: 2f0fa32 | (Solomon Foster)++ | t/spectest.data:

[18:10] <dalek> niecza: Turn on S03-sequence/basic.t.

[18:10] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2f0fa32287

[18:18] *** kaleem left
[18:24] *** s1n left
[18:30] *** hrj left
[18:30] *** localhost left
[18:30] *** mkramer1 joined
[18:32] *** localhost joined
[18:34] *** sayu left
[18:40] *** MayDaniel joined
[18:42] *** araujo left
[18:42] *** risou is now known as risou_awy

[18:42] <dalek> rakudo/nom: 19401a9 | moritz++ | / (10 files):

[18:42] <dalek> rakudo/nom: Merge remote branch 'origin/objat' into nom

[18:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/19401a98cc

[18:44] *** drbean left
[18:45] *** s1n joined
[18:45] <dalek> mu: 9c673d6 | util++ | misc/perl6advent-2011/topic-brainstorming:

[18:45] <dalek> mu: [advent] claimed Idiom topic for myself

[18:45] <dalek> mu: review: https://github.com/perl6/mu/commit/9c673d6241

[18:46] *** araujo joined
[18:46] *** araujo left
[18:46] *** araujo joined
[18:46] *** mkramer1 left
[18:46] *** mkramer joined
[18:49] *** raiph left
[18:50] *** estrabd joined
[18:50] *** drbean joined
[18:52] *** hrj joined
[18:53] <dalek> mu: 5f02809 | util++ | misc/perl6advent-2011/topic-brainstorming:

[18:53] <dalek> mu: [advent] Added topic for Unary sort (++lichtkind)

[18:53] <dalek> mu: review: https://github.com/perl6/mu/commit/5f028096ba

[18:53] *** mkramer left
[18:56] *** mkramer joined
[18:57] *** mkramer1 joined
[18:57] *** mkramer left
[18:57] <Util> LHF?

[18:57] *** carlin joined
[18:58] *** Chillance joined
[18:59] <sorear> Util: "low-hanging fruit"

[18:59] <PerlJam> heh, that's what I thought too, but I think he knows what LHF is.

[19:00] <PerlJam> (maybe)

[19:01] <Util> sorear: thanks!

[19:01] <colomon> Util: if you're wondering about my script, it doesn't actually detect LHF.  Instead, what it does is cross-references the number of tests in a test file (via plan N) with the test files listed in spectest.data, so you can easily find out what the biggest unused test files are.  :)

[19:02] <Util> PerlJam: Normally yes, but brain drain resulted in lack of bloodflow to my acronym decoder :)

[19:03] <Util> colomon: Cool!

[19:04] <colomon> Util: it makes for a neat little p6 script, and niecza executes it in under 5 seconds (for the entire test suite).  I do cheat by using `find -name "*.t"` to send in a list of all the test files.

[19:06] <dalek> roast: 877e2df | moritz++ | S (2 files):

[19:06] <dalek> roast: unfudge === tests for rats

[19:06] <dalek> roast: review: https://github.com/perl6/roast/commit/877e2dfdb4

[19:07] *** mkramer joined
[19:09] *** mkramer1 left
[19:11] <dalek> roast: c0878ca | moritz++ | S14-traits/variables.t:

[19:11] <dalek> roast: update variable traits test; do not seem to work on nom

[19:11] <dalek> roast: review: https://github.com/perl6/roast/commit/c0878ca3b4

[19:11] <Util> colomon: published anywhere I could see? (just curious)

[19:11] *** drbean left
[19:13] <dalek> roast: 0e9b3e5 | moritz++ | S19-command-line/dash-e.t:

[19:13] <dalek> roast: rakudo unfudges

[19:13] <dalek> roast: review: https://github.com/perl6/roast/commit/0e9b3e5d5d

[19:14] <colomon> Util: https://gist.github.com/1478008

[19:14] *** simcop2387 left
[19:14] <lichtkind> moritz: will not finish today but i hope tomorrow, have here 4 other works in the pipe pressing

[19:14] <colomon> Util: it's pretty classic perl, just p6 instead of p5

[19:14] *** simcop2387 joined
[19:14] <dalek> rakudo/nom: b0fc7aa | moritz++ | t/spectest.data:

[19:14] <dalek> rakudo/nom: run dash-e.t

[19:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b0fc7aa921

[19:14] <colomon> Util: though I did try to use "when" stylishly.  ;)

[19:17] <dalek> roast: 54c16c1 | moritz++ | S32-container/zip.t:

[19:17] <dalek> roast: rakudo refudges for zip.t

[19:17] <dalek> roast: review: https://github.com/perl6/roast/commit/54c16c1ef9

[19:19] *** drbean joined
[19:23] <Util> colomon: nice

[19:27] <sorear> grr.  Seems it actually _isn't_ possible to implement run(LIST) using the Mono built-in libraries

[19:29] *** mkramer left
[19:30] *** MayDaniel left
[19:31] *** mkramer joined
[19:37] *** mkramer left
[19:38] <jnthn> Whoa. That was one hot mongolian bbq. :D

[19:38] * [Coke] tries to parse 106222.

[19:38] * jnthn starts working on the advent post

[19:38] *** mkramer joined
[19:39] <[Coke]> jnthn++

[19:39] <flussence> jnthn: patch worked, btw

[19:40] <colomon> jnthn++

[19:40] <jnthn> flussence: yay...I'm happy that was nothing deeper than me doing a copy-pasto

[19:44] <tadzik> objat!

[19:44] <tadzik> phenny: "obiad"?

[19:44] <phenny> tadzik: Unable to guess your crazy moon language, sorry.

[19:44] <tadzik> phenny: pl "obiad"?

[19:44] <phenny> tadzik: The pl to en translation failed, sorry!

[19:45] <tadzik> silly phenny. It means "dinner"

[19:48] <dalek> roast: df26d3c | moritz++ | S32-io/chdir.t:

[19:49] <dalek> roast: simplify chdir.t, fudge for rakudo

[19:49] <dalek> roast: review: https://github.com/perl6/roast/commit/df26d3cb1d

[19:50] <dalek> rakudo/nom: 0dc7d63 | moritz++ | / (3 files):

[19:50] <dalek> rakudo/nom: bring back $*CWD, run chdir.t

[19:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0dc7d63dc2

[19:53] <dalek> roast: f99ad1c | moritz++ | integration/advent2009-day09.t:

[19:53] <dalek> roast: fix integration/advent2009-day09.t

[19:53] <dalek> roast: review: https://github.com/perl6/roast/commit/f99ad1cb3d

[19:54] <dalek> rakudo/nom: 06bbaa6 | moritz++ | t/spectest.data:

[19:54] <dalek> rakudo/nom: run advent2009-day09.t

[19:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/06bbaa6dcf

[20:05] <sorear> niecza: say "ababab" ~~ / [aba?] ** 3 /

[20:06] <p6eval> niecza v12-35-g2f0fa32: OUTPUT«#<match from(0) to(5) text(ababa) pos([].list) named({}.hash)>␤»

[20:06] <sorear> nice bug...

[20:11] *** preflex left
[20:11] *** preflex_ joined
[20:12] *** preflex_ is now known as preflex

[20:17] <moritz> what's wrong with it?

[20:17] <moritz> oh, it doesn't include the final b

[20:18] <moritz> niecza: say 'ab' ~~ /.**3/

[20:18] <p6eval> niecza v12-35-g2f0fa32: OUTPUT«Match()␤»

[20:18] <moritz> niecza: say 'ab' ~~ /.**2/

[20:18] <p6eval> niecza v12-35-g2f0fa32: OUTPUT«#<match from(0) to(2) text(ab) pos([].list) named({}.hash)>␤»

[20:19] <sorear> moritz: count the repetitions of [aba?] in the match

[20:20] <sorear> niecza: say (("ab" x 10) ~~ / [aba?] ** 10 /).chars

[20:20] <p6eval> niecza v12-35-g2f0fa32: OUTPUT«10␤»

[20:20] <moritz> sorear: yes, I noticed

[20:21] <sorear> the backtracking causes ** to overcount progress

[20:39] *** mkramer1 joined
[20:40] *** mkramer left
[20:44] *** mkramer1 left
[20:45] *** packetknife joined
[20:53] *** benabik left
[20:59] *** drbean left
[21:00] *** cooper left
[21:00] *** wolfman2000 joined
[21:05] *** drbean joined
[21:07] *** ab5tract joined
[21:12] *** mkramer joined
[21:16] *** mkramer left
[21:17] *** baest left
[21:18] *** bluescreen10 left
[21:20] *** fridim_ joined
[21:20] *** mkramer joined
[21:27] *** og01 left
[21:35] *** og01 joined
[21:35] *** kmwallio left
[21:36] *** og01 left
[21:36] *** hundskatt joined
[21:38] *** MayDaniel joined
[21:39] *** worr joined
[21:44] *** mkramer1 joined
[21:46] *** mkramer left
[21:48] *** hrj left
[21:49] <jnthn> hmm, seems I writed quite a lot for advent today

[21:49] <sorear> o/ jnthn

[21:55] *** snearch joined
[22:01] <jnthn> Advent post is up! http://perl6advent.wordpress.com/2011/12/14/meta-programming-what-why-and-how/

[22:01] <jnthn> o/ sorear 

[22:01] <jnthn> I've been about for a bit, just hiding away working on the advent post ;)

[22:04] <sorear> jnthn++

[22:05] *** Sarten-X left
[22:05] <lichtkind> jnthn++

[22:07] *** kaare_ left
[22:14] *** MayDaniel left
[22:19] <jnthn> early night...gotta go prep for class way too early tomorrow... &

[22:20] *** kboga joined
[22:22] <kboga> nice post jnthn! (small nitpick: s/that about/what about/)

[22:22] *** Sarten-X joined
[22:23] *** kboga left
[22:30] *** scottp_ left
[22:30] *** scottp joined
[22:33] *** kboga joined
[22:36] *** donaldh joined
[22:40] <kboga> also, shouldn't the "EXPORTHOW.WHO." really be "EXPORTHOW.WHO.<class>" ?

[22:52] *** kboga left
[22:52] *** donaldh left
[23:17] *** ispeak_ left
[23:20] *** drbean left
[23:26] *** lumi___ left
[23:27] *** drbean joined
[23:27] *** lumi___ joined
[23:33] <dalek> niecza: 6944409 | sorear++ | src/niecza:

[23:33] <dalek> niecza: Simplify and deoptimize quantifier handling, add %% support (fixes #80)

[23:33] <dalek> niecza: review: https://github.com/sorear/niecza/commit/69444092a6

[23:33] <dalek> niecza: e7236a4 | sorear++ | / (3 files):

[23:33] <dalek> niecza: Fix ** state funkiness, add tests

[23:33] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e7236a44d5

[23:34] *** snearch left
[23:36] <sorear> Who can answer questions about <~~> ?

[23:38] *** cognominal_ joined
[23:39] *** packetknife left
[23:39] *** ksi left
[23:41] *** cognominal left
[23:58] <dalek> niecza: d07a93d | sorear++ | src/ (5 files):

[23:58] <dalek> niecza: Mergeback

[23:58] <dalek> niecza: review: https://github.com/sorear/niecza/commit/d07a93ddba

