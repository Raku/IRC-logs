[00:01] *** sftp left
[00:02] *** sftp joined
[00:06] *** sftp left
[00:08] *** sftp joined
[00:08] *** carlin joined
[00:15] *** am0c left
[00:17] *** replore joined
[00:22] <dalek> Pugs.hs: 9782a01 | (Ingy dot Net)++ | install-haskell-platform-ghc7-and-pugs-on-debian-or-ubuntu-from-scratch.sh:

[00:22] <dalek> Pugs.hs: This script will install GHC7 and Pugs on Debian.

[00:22] <dalek> Pugs.hs: 

[00:22] <dalek> Pugs.hs: If you are very lucky. :)

[00:22] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/9782a0127c

[00:24] <ingy> moritz: ^^

[00:24] <ingy> moritz: That should do the trick.

[00:24] <ingy> moritz: and what a holy pain it was...

[00:25] *** ab5tract left
[00:26] <ingy> anyone want to try to install pugs on debian?

[00:27] <ingy> :)

[00:29] <ingy> masak: ?

[00:31] <[Coke]> ah, I can try to install haskell platform on OS X now.

[00:31] <ingy> moritz: even though the script above will take a long time, the building of pugs in cron using Pugs-hs/Pugs/Makefile should only take a few seconds

[00:32] <ingy> [Coke]: you'll need to tweak the script

[00:32] <ingy> one sec

[00:33] <[Coke]> ingy: download is going to take another 22 minutes.

[00:34] <ingy> actually the script is pretty debian specific

[00:34] <ingy> but please try getting going on mac

[00:34] <[Coke]> ingy: i'm looking at the haskell platform .pkg ; I can only imagine it's OS X specific.

[00:34] <ingy> :)

[00:35] *** whiteknight left
[00:35] <ingy> I think linux was the hardest

[00:35] <ingy> I was even working with a haskell guy and he was sighing how ridiculous the process was

[00:38] <ingy> [Coke]: how do we give out commit bits?

[00:39] <ingy> shachaf needs a bit for pugs

[00:39] <ingy> hugme: shachaf 

[00:39] <ingy> guess

[00:45] <[Coke]> ingy: I think perl6/ is pretty liberal.

[00:45] <[Coke]> hugme: help?

[00:45] <hugme> [Coke]: (add $who to $project | list projects | show $project | hug $nickname | tweet $twittername $message )

[00:45] <[Coke]> hugme: add shachaf to Pugs.hs

[00:45] <hugme> [Coke]: sorry, I don't know anything about project 'Pugs.hs'

[00:45] <[Coke]> hugme: list projects

[00:45] <hugme> [Coke]: I know about Math-Model, Math-RungeKutta, MiniDBI, bench-scripts, book, gge, hugme, ilbot, java2perl6, json, modules.perl6.org, november, nqp-rx, nqpbook, perl6, perl6-examples, perl6-wtop, proto, pugs, rakudo, star, svg-matchdumper, svg-plot, tardis, try.rakudo.org, tufte, ufo, web, yapsi

[00:46] <[Coke]> I think the pugs there is old pugs.

[00:46] <diakopter> Pugs.hs is under the perl6 project I thought

[00:46] <[Coke]> but iunno

[00:46] <ingy> right

[00:46] <[Coke]> oh! that's easy, then.

[00:46] <ingy> do it

[00:46] <[Coke]> I leave it as an excercize for the reader.

[00:46] <diakopter> hugme: add shachaf to perl6

[00:46] <[Coke]> ;)

[00:46] *** hugme left
[00:46] <ingy> shachaf: ^^

[00:46] <diakopter> nice

[00:46] <diakopter> I crashed it

[00:46] <[Coke]> BWUAAHAH.

[00:46] <[Coke]> ahem.

[00:47] <ingy> gah

[00:47] <ingy> moritz: ^^

[00:47] <ingy> rather

[00:47] <ingy> sigh

[00:47] <ingy> what a day of FAIL

[00:47] <ingy> beer time

[00:47] <ingy> &

[00:48] <gfldex> nom: my Rat $sum = 0.Rat; $sum += 24537130 * 3.37; $sum += 5678 * 4.28; say $sum;

[00:48] <p6eval> nom 3fd353: OUTPUT«82714429.94␤»

[00:48] <gfldex> anybody still awake who could try that on 32bit ?

[00:49] <[Coke]> sure.

[00:49] <gfldex> on my 32bit host it says: -3184915.98

[00:50] <[Coke]> gfldex: 82714429.94

[00:51] <[Coke]> I'm on OS X

[00:51] <[Coke]> 10.6.8, 32 bit, intel

[00:51] <gfldex> Linux dexhome 3.0.0-1-686-pae #1 SMP Sat Aug 27 16:41:03 UTC 2011 i686 GNU/Linux

[00:53] <gfldex> [Coke]: what is your perl6 --version ?

[00:53] <sorear> shachaf is a proper p6er now? \o/

[00:55] <[Coke]> This is perl6 version 2011.09-66-gabc6874 built on parrot 3.8.0 revision RELEASE_3_8_0-130-gfad30ea

[00:55] <[Coke]> few days old.

[00:56] <[Coke]> I'll kick off a rebuild.

[00:56] <sorear> I've added Shachaf to perl6

[00:56] <sorear> made sure it was the right one, too.

[00:56] <gfldex> mine is a few hours old

[00:56] <[Coke]> gimmie a minute.

[00:59] <shachaf> sorear: Oh, hello.

[00:59] <shachaf> ingy: What have you gotten me into?

[00:59] <ingy> trouble

[01:00] <ingy> with two capital S's

[01:02] <shachaf> So Pugs has been resurrected?

[01:02] <[Coke]> trouSSle ?

[01:02] * shachaf moves #perl6 down from irssi window 87.

[01:08] <[Coke]> ugh. compiling rakudo just kills my machine. :P

[01:08] <shachaf> What's the oldest version of GHC that people actually compile Pugs with? I'd like to get rid of all these deprecation warnings.

[01:09] <[Coke]> shachaf: I suspect that all 3 of them are here.

[01:09] *** plobsing_ joined
[01:10] <[Coke]> I haven't started yet, but am installing whatever the latest version on haskell platform is.

[01:10] <shachaf> [Coke]: People who compile Pugs?

[01:11] <[Coke]> ingy just resurrected it, I thought.

[01:11] <[Coke]> shachaf: yes, them.

[01:11] <[Coke]> I'm installing  2011.2.0.1 , apparently.

[01:12] *** tyatpi_ joined
[01:13] *** plobsing left
[01:13] *** donri left
[01:27] *** daniel-s joined
[01:31] *** tyatpi_ left
[01:34] <[Coke]> does "cabal install Pugs" install from the local checkout?

[01:37] <shachaf> [Coke]: No, it installs from Hackage.

[01:37] <shachaf> [Coke]: Just "cabal install" should run from the current directory, though.

[01:38] <[Coke]> I'm thinking that "cabal install Pugs" shouldn't be the first thing in the README, then.

[01:39] *** soh_cah_toa_ left
[01:42] <[Coke]> gfldex: same result.

[01:43] <gfldex> i will rebuild myself while i ./snore &

[01:43] *** awwaiid left
[01:49] <dalek> roast: 167c741 | Coke++ | S16-io/bare-say.t:

[01:49] <dalek> roast: rakudo fudging

[01:49] <dalek> roast: review: https://github.com/perl6/roast/commit/167c7419a8

[01:49] <dalek> rakudo/nom: 3e66bdf | Coke++ | t/spectest.data:

[01:49] <dalek> rakudo/nom: track failures, run fudges

[01:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3e66bdf773

[01:50] * [Coke] wonders why Pugs.hs/README says "Perl 5"

[01:51] * [Coke] finds HACKING, and goes down that path instead.

[01:51] <sorear> hello shachaf

[01:56] <[Coke]> "at least the following dependiences are missing"... "cabal install <dep>" ?

[01:57] <[Coke]> looks like.

[02:17] *** jaldhar joined
[02:18] *** benabik joined
[02:28] *** wolfman2000 joined
[02:35] <[Coke]> ingy, shachaf: http://nopaste.snit.ch/87090

[02:35] <[Coke]> ;(build failure on pugs on OS X)

[02:38] *** Khisanth left
[02:38] *** Khisanth joined
[02:38] <shachaf> [Coke]: Hmm, what version of GHC/base are you using?

[02:40] * sorear wonders if shachaf has set an /ignore

[02:41] <shachaf> sorear: No, why?

[02:45] * shachaf is confused.

[02:47] <sorear> shachaf: ignoring hellos, and our past

[02:47] <sorear> shachaf: apologies for the hasty conclusion

[02:48] <[Coke]> shachaf: um...

[02:49] <[Coke]> how would I tell? ;)

[02:49] *** drbean left
[02:49] <shachaf> [Coke]: ghc --version; ghc-pkg list base; ghc-pkg list stm

[02:49] *** drbean joined
[03:08] <[Coke]> ah, which ghc is showing me the macports one, not the cabal one. checking...

[03:10] <[Coke]> aaaaargh. all the prereqs I installed were apparently tied to other-pugs.

[03:10] <[Coke]> er, other-ghc.

[03:10] <[Coke]> starting over...

[03:10] <[Coke]> (or, are wiped with a 'make clean')

[03:23] <colomon> b: say 10.rand

[03:23] <p6eval> b 1b7dd1: OUTPUT«2.59589085196243␤»

[03:24] <sorear> o/ colomon

[03:24] <colomon> \o

[03:25] <colomon> I'm trying to see if I can get a quick version of pick up and running before bedtime

[03:25] <colomon> nom: say 10.rand

[03:25] <p6eval> nom 3e66bd: OUTPUT«3.306615122865␤»

[03:27] <[Coke]> new error, nopaste coming..

[03:32] <[Coke]> https://gist.github.com/1283291

[03:32] <[Coke]> (that's only a fragment of the build)

[03:33] <shachaf> [Coke]: Looks like an OS X issue.

[03:33] <shachaf> [Coke]: As far as I know only 32-bit GHC is available for OS X. Maybe libperl.a is 64-bit?

[03:38] <[Coke]> I've only got 32 bits.

[03:39] <[Coke]> zzzz soon. will investigate more tomorrow. Thanks!

[03:42] <colomon> sorear: bother.  no splice yet either? ;)

[03:43] <[Coke]> (and after removing ports, I'm using ghc 7.0.3, btw.)

[03:43] <colomon> afk #bedtime

[03:57] *** satyavvd joined
[04:03] <ingy> shachaf: I think you can feel free to make pugs use fairly modern ghc

[04:05] <ingy> I had it running on 6.12.4? for a bit but now I am going to stick with 7+

[04:05] <ingy> what version did the deprecations start with?

[04:05] <ingy> time to zzzz

[04:17] *** dukeleto left
[04:17] *** Khisanth left
[04:18] *** dukeleto joined
[04:18] *** dukeleto left
[04:18] *** benabik left
[04:19] *** dukeleto joined
[04:38] *** molaf left
[04:42] *** lestrrat left
[04:43] *** lestrrat joined
[04:47] *** envi_ joined
[04:48] *** Khisanth joined
[05:01] *** Exodist left
[05:03] <moritz> good morning

[05:05] *** Exodist joined
[05:07] <moritz> ingy: I alrady tried to install GHC 7.0.3 myself. It failed because of GHC bug 5005.

[05:11] *** orafu left
[05:11] *** orafu joined
[05:12] <sorear> nom: role A[::B] { class C { method foo() { say B } }; method bar { C.foo } }; class D { }; A[D].bar

[05:12] <p6eval> nom 3e66bd: OUTPUT«Cannot call a method on type variable B␤  in find_method at src/gen/Metamodel.pm:267␤  in sub say at src/gen/CORE.setting:4957␤  in method foo at /tmp/B2F_HHl8Pe:1␤  in method bar at /tmp/B2F_HHl8Pe:1␤  in <anon> at src/gen/Metamodel.pm:1125␤  in block <anon> at /tmp/…

[05:12] <sorear> I'm looking for a way to emulate ML functors

[05:12] <sorear> parametric roles would do the job if that example worked. :)

[05:14] *** sftp left
[05:18] <sorear> essentially, modules (with EXPORTed functions and zero or more types) parametrized over one or more other modules

[05:19] <moritz> nom: role A[$B] { class C { method foo() { say $B } }; method bar { C.foo } }; class D { }; A[D].bar

[05:19] <p6eval> nom 3e66bd: OUTPUT«Null PMC access in find_method('gist')␤  in sub say at src/gen/CORE.setting:4957␤  in method foo at /tmp/IvqRxAPI_7:1␤  in method bar at /tmp/IvqRxAPI_7:1␤  in <anon> at src/gen/Metamodel.pm:1125␤  in block <anon> at /tmp/IvqRxAPI_7:1␤  in <anon> at /tmp/IvqRxAPI_7:1␤…

[05:19] <moritz> I guess it doesn't like the inner class being composed at compile time, before the role is being concretized

[05:22] *** bazqux joined
[05:52] *** kaleem joined
[05:56] *** wtw joined
[06:06] *** am0c joined
[06:08] *** bazqux1 joined
[06:08] *** bazqux left
[06:13] *** bazqux1 left
[06:28] <masak> good morning, #perl6.

[06:29] <masak> http://www.modernperlbooks.com/mt/2011/10/in-search-of-minimum-viable-utility.html # chromatic++

[06:29] <moritz> good masak, morning

[06:30] *** Woodi left
[06:31] <masak> in some ways, it's not a fun read. but it keeps close to reality. I'm saddened that in 2011, a Perl 6 backer like chromatic can't realistically use Perl 6 for daily tasks.

[06:31] *** Woodi joined
[06:33] *** MayDaniel joined
[06:37] *** MayDaniel left
[06:37] <masak> I agree with a commenter that good Perl 5 integration would be a big help.

[06:39] <moritz> "I worry that once you release a programming language with minimum viable utility, you ossify early decisions of design and implementation such that you can't quite yank the floorboards out from underneath any users you have, lest they stop being users and stop providing feedback."

[06:39] <moritz> I can't believe this sentence comes from somebody who complains about the frequent rewrites of rakudo

[06:41] <moritz> well, makes a very big deal out of those rewrites

[06:44] <moritz> chromatic makes a good job describing the problem. If he only offered a solution...

[06:45] <masak> I don't blame him for not doing that. he's one of the few people, maybe the only one, who describes the problem.

[06:46] <masak> as to yanking the floorboards, I've always considered the phase Perl 6 has been in from 2005 up until now to be this "fluid" phase where we have the privilege to make spec course corrections without it hurting anyone.

[06:46] <masak> that would change overnight if someone took Perl 6 on as their "production platform".

[06:47] <masak> of course, it's not a one-way causality arrow there. not entirely. some prospective clients may be scared off by all the fluidity.

[06:47] <masak> "it's 2011 and you're still mucking around with the spec!?"

[06:48] <masak> I've gathered that mberends argues, or at least has argued, for freezing the entire spec in order to attract such clients.

[06:49] <moritz> that sounds nice, unless you actually plan to implement it :-)

[06:50] <masak> right. :)

[06:51] <masak> my counter-point at the time was something along the lines of the fluidity of the spec being important to the implementors, and the benefits of freezing the spec uncertain.

[06:51] <moritz> it would make us fall into the same kind of trap as the parrot deprecation policy

[06:51] *** PacoLinux joined
[06:51] <mberends> masak: I no longer argue so. I wrongly suggested freezing when I believed the spec was largely complete, and merely being extended. I now understand better that the spec is still very patchy.

[06:51] <moritz> ie it would make sense iff we had a horde of users out there. Maybe.

[06:51] <jnthn> It doesn't make sense to talk about "the spec" as if it's all at the same level of maturity.

[06:52] <jnthn> The bar for changes to most of S03, S06, S12 and S14 should be very high.

[06:52] <jnthn> To S11, pretty low.

[06:52] <mberends> aye

[06:52] <masak> right. there's a city center of the spec that's stable and high quality. the suburbs are so-so.

[06:53] <masak> jnthn: I'd include S05 too in the "bar should be high", even though it's seen some changes lately.

[06:54] <jnthn> er, yes, that to

[06:54] <jnthn> I wasn't trying to be exhaustive.

[06:54] <jnthn> At a personal level, I no longer have appetite for big changes to things I consider stable any moer.

[06:54] <jnthn> *more

[06:54] <jnthn> It's demotivating.

[06:54] <jnthn> OK, teaching time. o/

[06:58] <masak> that's an important factor too. implementor burnout.

[06:58] <masak> but with any such change I would prefer to argue against change on merits of the current spec rather than "jnthn quits if you change this again!", if possible ;)

[06:59] <masak> sorear's recent proposal for changing the MMD semantics is a good example.

[06:59] <masak> as I understand it, there are really good reasons Perl 6 shouldn't/can't emulate C# semantics there.

[07:08] <moritz> I didn't follow that discussion very closely -- can you give a quick summary of the reasons?

[07:09] <masak> only a garbled version of what jnthn told me.

[07:10] <masak> essentially, C# has different distributions of compile-time/runtime dispatch decisions.

[07:10] <sorear> the C# spec is very close to what P6 is doing already.  I do not beleive jnthn's answer to be correct at all.

[07:11] <sorear> but I'm not going to convince him except with working code

[07:11] <masak> I do take it seriously that jnthn has implemented the algorithm for dispatch resolution, and he says that we're in a model sweet spot.

[07:12] <masak> yes, that's arguing from authority. but in this case, the authority is what makes my MMD calls work ;)

[07:14] <sorear> after I get /serialize working I'll make the necessary changes to niecza.  I don't think it will change the behavior of any sane code, but it does a better job of carping in insane cases

[07:15] <sorear> but for now, *sleep*

[07:15] <masak> 'night, sorear. dream of working serialization and sane code.

[07:19] *** pochi joined
[07:21] <masak> ingy: I'll try installing Pugs when I get home tonight.

[07:24] <masak> nom: role A[$B] { class C { method foo() { say $B } }; method bar { C.foo } }; class D { }; A[D].bar

[07:24] <p6eval> nom 3e66bd: OUTPUT«Null PMC access in find_method('gist')␤  in sub say at src/gen/CORE.setting:4957␤  in method foo at /tmp/xCHvZokqR7:1␤  in method bar at /tmp/xCHvZokqR7:1␤  in <anon> at src/gen/Metamodel.pm:1125␤  in block <anon> at /tmp/xCHvZokqR7:1␤  in <anon> at /tmp/xCHvZokqR7:1␤…

[07:24] <masak> moritz: did you RT this one?

[07:24] <moritz> masak: no

[07:24] * masak submits rakudobug

[07:25] <moritz> after yesterday's discussion, I'm not convinced anymore that it makes sense to ticket each weird corner case

[07:27] <masak> wow, that's not at all what I took away from yesterday's discussion.

[07:27] *** wooden left
[07:27] <masak> and even if it were, I'd probably consider the above case well within the set of worthy tickets.

[07:28] <moritz> well, it was more the result of the non-discussion part

[07:29] <moritz> where I asked what value RT provides, and nobody had really convincing cases

[07:29] <masak> I'd rather have a longish RT queue and people complaining that it's longish, than a situation where someone suffers from a Null PMC access in production and we go "oh yeah, that one. we stumbled upon it, and then forgot about it."

[07:29] <masak> moritz: wut? I thought I replied to just that question.

[07:30] <masak> RT, in the best case, represents what we know to be wrong with Rakudo and/or Perl 6.

[07:30] <moritz> masak: you did, and it didn't convince me of the practical value of RT

[07:30] <masak> :(

[07:32] <masak> on balance, if I find something wrong, I submit it to RT. here's why: over 50% of the tickets I've ever submitted have been fixed. there's no doubt in my mind that a smaller quantity of the same bugs would've gotten fixed had those tickets not been in the queue.

[07:32] <masak> I don't see how that's not value.

[07:33] <moritz> we had a huge amount of tickets where parrot objects leaked through to p6 space

[07:33] <masak> (I'm not talking about just my tickets, of course. I just happen to know what proportion of my tickets have been closed.)

[07:34] <moritz> switching to nom made those tickets really uninteresting

[07:34] <masak> so what?

[07:34] *** mj41 joined
[07:34] <masak> it's like saying "this refactor made your feature requests moot"

[07:35] <masak> there was no way for us to know *at the time* that those tickets would be uninteresting.

[07:35] <masak> and each one probably represented some amount of pain for the submitter.

[07:35] <moritz> so they turned out to be an (RT, roast) maintenance burden, and not useful

[07:35] <masak> what you're saying is maybe cause for overseeing process somewhere. not for throwing out RT.

[07:38] *** drbean left
[07:41] <masak> the relevant question is perhaps "could we have known, foreseen, or prepared for those tickets becoming really uninteresting?"

[07:42] *** uvtc joined
[07:42] <masak> maybe pre-emptively tagging them all with a parrotobjectleakingthrough would've been enough to help combat the subsequent sense of futility.

[07:43] <uvtc> Interesting blog post from Chromatic.

[07:43] <uvtc> I've been thinking that what Perl 6 indirectly needs to reach "minimum viable utility" stage is Perl 6 user docs. perldocs for Perl 6.

[07:43] <uvtc> I wrote an article about it, which could be a blog post, I suppose, except that I don't have a blog at the moment. It's temporarily here, in case anyone wants to take a gander: http://www.unexpected-vortices.com/temp/perl-5-success-perl-6-needs.html

[07:43] <uvtc> The last section addresses Perl 6.

[07:43] *** drbean joined
[07:43] * masak takes a gander

[07:46] <frettled> you give me goose bumps ;)

[07:46] <uvtc> Who, me?

[07:46] <uvtc> Why?

[07:46] <frettled> No, masak.  He's like that. :)

[07:47] <frettled> (gander = adult male goose, BTW)

[07:47] * frettled is a horrible punster.

[07:47] <uvtc> Hahaha. Nice. :)

[07:48] <masak> "and yet Perl 5 survives" -- the principle of "worse is better" in action, I guess.

[07:49] <frettled> yup

[07:49] <frettled> uvtc: Nice write-up.

[07:50] <uvtc> Thanks, frettled.

[07:50] <masak> I agree. Perl 6 needs docs.

[07:50] <moritz> the real problem is that Perl 6 needs so many things

[07:51] <moritz> it needs features I can use

[07:51] <moritz> it needs docs for those features

[07:51] <masak> and Perl 6 is always going to be compared with Perl 5 for the things it lacks.

[07:51] <moritz> and it needs the stability to make the documentation not outdated after half a year

[07:51] <moritz> and it needs to be not so slow

[07:51] <moritz> and it needs to be robust, and so on

[07:51] <masak> we just have to converge slowly on all of those things.

[07:52] <uvtc> My understanding is that, although it needs all those things, feedback from users drives the process.

[07:52] <uvtc> I'm guessing it also provides encouragement to developers.

[07:53] <masak> someone who takes on a major doc writing project needs to be prepared for some amount of spec bitrot, and not be discouraged by that.

[07:53] <uvtc> And to get users (hence, feedback), you need those docs. It's just a necessary evil that they're going to have to be updated a lot.

[07:53] <masak> the Perl 6 Advent runs have showed that exposing the workings of Perl 6 to users is a really good thing. docs would help with that, too.

[07:54] *** koban joined
[07:54] <masak> uvtc: we're waiting for a champion.

[07:54] <uvtc> My impression of the advent articles was that they generated interest. They showed off features. But they left me wanting real meat and potatoes perldocs.

[07:56] <uvtc> masak: I don't think it needs to even be a "major" doc writing project. Just some basic readable user-level basics.

[07:56] <moritz> uvtc: then write them. I'll support you wherever I can

[07:56] <moritz> in fact I've started writing docs multiple times, and got starved by lonliness

[07:56] <uvtc> moritz: "starved by lonliness"?

[07:57] <uvtc> moritz: do you mean it was turning into more work than you anticipated?

[07:57] <masak> moritz: me too.

[07:57] <moritz> uvtc: nobody seriously joined my effort, and I lost focus

[07:57] <masak> it's hugely thankless work, with little feedback on the way.

[07:57] <jnthn> Null PMC access is always wrong really...tickets on it are fine. In the role case above, we should do something better...

[07:57] <moritz> same thing with the book; I can't seem to motivate my co-authors to work more on it

[07:58] <moritz> commute&

[07:59] <uvtc> I see. A possible solution might be to institute some kind of policy where, when spec changes happen that disagree with the docs, someone pings the doc champion.

[08:03] <uvtc> For me, the Synopses are difficult to follow. If I were writing perldocs, and the Synopses were changing under my feet, and I didn't know where to look to see what's changing,

[08:04] <uvtc> and users were complaining that the docs were out of date,

[08:05] <uvtc> that would probably spiral into the docs getting abandoned.

[08:05] <masak> the desired traits of a doc champion are rare. it has to be someone with more than a decent understanding of the spec, the implementations, and how to write docs.

[08:06] <uvtc> If no one experienced here is working on perldocs in stealth-mode, then I don't think you're going to find someone with the traits you desire.

[08:06] <masak> me neither.

[08:07] <uvtc> What I think you're going to find is a volunteer who's good at technical writing, but who has trouble making sense of the specs.

[08:07] <uvtc> If you can think of a system for that person to succeed, I think you'll have a workable solution.

[08:07] <masak> I'm wondering if I don't consider the book of higher short-term importance/benefit, though. and *it*, for all intents and purposes, has currently stalled.

[08:07] <mberends> uvtc: I like your post. I've tried to be a perl6doc champion for some time, and have been set back and disillusioned by the overambition of the design and the impracticality of the resulting tools.

[08:07] <masak> it's just hard to write a lot of text and keep it consistent and updated.

[08:07] *** johs39 joined
[08:08] <johs39> just reading about perl6. anyone know of its current performance vs python?

[08:09] <mberends> uvtc: I'd like to take a chainsaw to S26 and severely prune it.

[08:09] <masak> johs39: if it's performance you're looking for, take a look at Niecza.

[08:09] <masak> niecza: say "OH HAI johs39!"

[08:09] <p6eval> niecza v10-43-gf5298c8: OUTPUT«OH HAI johs39!␤»

[08:09] <johs39> thanks

[08:09] <masak> johs39: can't say anything offhand about how it stacks up against Python, but I'd guess pretty well except for perhaps startup time.

[08:10] <johs39> because of mono?

[08:10] <masak> johs39: if you'd be willing to do some measurements of your own, I'm pretty sure we'd be interested.

[08:10] <uvtc> masak: the book is good for those with minimal experience, who want a nice leisurely walk-though. However, one of the most useful programming language docs I've read is the first or 2nd chapter of the Python nutshell book.

[08:10] <masak> johs39: because of a number of things.

[08:10] <johs39> alright

[08:10] <masak> johs39: https://github.com/sorear/niecza

[08:11] <mberends> johs39: yes. programming Niecza is like programming C# whilst wearing Perl 6 gloves.

[08:11] <johs39> already there

[08:11] <johs39> nice

[08:12] <johs39> what are the main differences between this implementation and rakudo? 

[08:12] <uvtc> mberends: regarding S26, I agree. Though, for me, I actually prefer Markdown. Seems like the path of least resistance to getting docs written.

[08:12] <johs39> i see the feature comparison, but i mean methodology maybe or maybe something else guides it?

[08:13] <masak> johs39: Niecza started out focusing on optimizations. also, it's on .NET, not Parrot.

[08:13] <uvtc> mberends: regarding "disillusioned by the overambition of the design", you're talking about S26 or Perl 6 in general?

[08:14] <johs39> alrigth that sums it up

[08:15] <masak> johs39: I'm using Niecza currently and finding it pleasingly fast and relatively feature-complete.

[08:15] <snarkyboojum> also don't forget http://perl6.org/compilers/features :)

[08:15] <masak> it doesn't have all of what Rakudo has, for sure. but it's getting there, and what's not there can often be worked around.

[08:16] <uvtc> masak, mberends: Perhaps if perldocs are too ambitious, then a http://perl101.org/ , with an easy way for core devs to provide feedback on bitrotted docs,

[08:16] <uvtc> is the way to go to get started.

[08:16] <uvtc> masak, mberends: I meant, a perl101 for Perl 6, of course.

[08:17] <masak> a perl110 ;)

[08:17] <uvtc> masak: Heh. Though, I don't like the '1' next to the 'l'. I'd prefer perl-6-101.org.

[08:20] <uvtc> Oh, man. Why do I stay up so late. Thanks for the food for thought, all.

[08:21] *** uvtc left
[08:22] <masak> #perl6. the soup kitchen for thought.

[08:22] *** mj41 left
[08:29] <johs39> niecza built, up and running

[08:32] <masak> johs39: nice. let us know how it goes.

[08:32] <johs39> alright

[08:32] <johs39> will do

[08:34] <johs39> thanks for the info. i'm heading out

[08:34] *** johs39 left
[08:34] *** amkrankruleuen left
[08:34] <moritz> if somebody starts writing docs, I'll happily take the role of pinging the maintainers about spec changes

[08:35] *** mj41 joined
[08:39] *** uvtc joined
[08:40] <uvtc> masak, wait. I missed your comment. You wrote: "the principle of "worse is better" in action, I guess."

[08:40] <masak> re smosher's p6c message about .reduce and higher arities: it always seemed to me that MMD almost-but-not-quite applies when what we're binding against is a prefix of unknown length of a stream of arguments.

[08:40] <masak> uvtc: yes. I don't mean it in any derogatory way.

[08:40] <uvtc> masa: My point was, if you have those docs in order -- if you have a way to bring that new user up to speed and productive in a very short amount of time --

[08:40] <masak> uvtc: I mean that everyone can agree that Perl 6 is superior on paper, and still elect Perl 5 in practice, partly for the arguments you outline.

[08:40] <frettled> These days, they call it «agile» ;)

[08:41] <uvtc> then you beat "worse is better".

[08:41] <masak> not sure you can "beat" worse is better :P

[08:41] *** amkrankruleuen joined
[08:41] <frettled> It's theoretically possible to beat "worse is better", but in practice, noone has.  ;)

[08:42] <masak> frettled: no, agile is about development methodology. "worse is better" is about design philosophy.

[08:42] *** [particle] left
[08:42] <uvtc> A new user has a new task and is sitting in front of a choice of a few new languages they might use. Which language do they choose? As chromatic points out,

[08:43] <frettled> masak: technicalities, besides, Perl in either incarnation isn't quite worse-is-better.

[08:43] <frettled> (http://www.jwz.org/doc/worse-is-better.html)

[08:43] <uvtc> it's the one with the minimum "distance between zero and just getting something done."

[08:43] *** dakkar joined
[08:44] <uvtc> If your "not worse" language has the shorter distance, then you beat "worse is better".

[08:45] <frettled> masak: I'd rather argue that Perl 5 is from the bazaar, while Perl 6 is from the Cathedral.

[08:46] <masak> that's an interesting point, for sure.

[08:46] <masak> I wouldn't say that it's that clear-cut, but in relative terms, sure.

[08:46] <moritz> masak: I'm writing a reply to smosher

[08:46] <masak> moritz++

[08:46] <moritz> ... and p6c

[08:46] <frettled> masak: mm, absolutely not clear-cut.

[08:47] <masak> moritz: do you see what I mean about streamish MMD? it's like the dispatch is "slanted". in fact, it looks a bit more like LTM than the regular MMD.

[08:48] *** DarthGandalf left
[08:48] <moritz> masak: yes

[08:48] <uvtc> moritz: your offer is noted. I think it's a good step.

[08:48] <moritz> masak: that's exactly what I'm writing about :-)

[08:48] <masak> \o/

[08:48] <uvtc> moritz: re. http://irclog.perlgeek.de/perl6/2011-10-13#i_4561649

[08:48] *** [particle] joined
[08:49] <moritz> uvtc: I think one of the mistakes of the previous doc efforts was that they were too humble in going public, thus receiving too little feedback

[08:49] <moritz> uvtc: so my second offer is that I can set up a docs.perl6.org/ system that people can easily hack on

[08:49] <masak> I'd like to add to that that a "spike" solution would probably go a long way.

[08:50] <masak> i.e. a working workflow of editable documentation consisting of only one entry.

[08:50] <moritz> so that it sounds "official" from the start, and we can point people to it. Hopefully others will contribute a nice design, as has happened with several Perl 6 related sites already

[08:50] <masak> and yes, public.

[08:50] <uvtc> moritz: I was writing some docs on my own. I was trying some things out, and remember asking here about lists of lists -- about the difference between (1,2,3) and [1,2,3], I think.

[08:51] <uvtc> This seemed like a very basic thing to ask, but I recall that the answer seemed convoluted (something about one flattening and one not).

[08:51] <masak> lichtkind had some hopes for November in that regard, but November is unfortunately stuck in bitrot-land.

[08:51] <moritz> uvtc: I guess that our understanding of that topic is now much better than it was half a year ago

[08:51] <moritz> at least mine is

[08:51] <uvtc> moritz: The kind of docs I'm thinking of would be basic bread-and-butter, "here's how you do this and here's how it works" type docs.

[08:51] <moritz> (though still not perfect)

[08:53] <uvtc> moritz: I'm not sure a docs.perl6.org would be motivating. I know, for me anyway, I'd rather do something on my own server -- in a definitely-unofficial capacity -- and have it mature a bit before going for docs.perl6.org...

[08:54] <masak> I vote for docs.perl6.org

[08:54] <moritz> uvtc: whatever you prefer. I just found that when things looked official, people looked at it, and provided feedback, and that motivated me

[08:54] <masak> if nothing else, it might scare us into maintaining the quality of the docs :P

[08:54] <moritz> if they don't look official, people say "why isn't this official, if it's the best you have?"

[08:56] <uvtc> Ok. I think I need to leave this soup kitchen of thought, as I'm becoming delirious from lack of sleep. G'night. :)

[08:56] *** uvtc left
[09:00] <masak> we make it look official. and we choose a cooler name for the effort than "u4x". or better yet, no name at all ;)

[09:02] <moritz> mail to p6c sent.

[09:03] *** DarthGandalf joined
[09:10] *** mberends left
[09:12] *** ab5tract joined
[09:22] *** PacoLinux left
[09:24] *** PacoLinux joined
[09:26] *** satyavvd left
[09:27] *** ab5tract left
[09:31] *** ab5tract joined
[09:32] *** risou_awy is now known as risou

[09:39] *** wk left
[09:40] *** ab5tract left
[09:47] <masak> it would be fun/interesting to prototype a stream binder as a Perl 6 module.

[09:49] *** risou is now known as risou_awy

[09:50] <moritz> challenging to do right :-)

[09:50] <moritz> and would need some badass signature introspection

[09:51] *** risou_awy is now known as risou

[09:52] <masak> badass signature introspection -- isn't that what we want, anyway?

[09:52] <masak> this might smoke out missing bits.

[09:53] <moritz> aye

[09:53] <masak> with my limited vision of the problem domain, it seems to me it's "MMD but longest match wins".

[09:55] <dalek> roast: a179684 | moritz++ | S05-mass/rx.t:

[09:55] <dalek> roast: remove bogus use of eval as exception catcher from S05-mass/rx.t

[09:55] <dalek> roast: review: https://github.com/perl6/roast/commit/a179684d6b

[09:56] <moritz> one thing that needs care is to not eagerly evaluate the argument stream

[09:58] *** satyavvd joined
[10:10] <masak> well, one needs to lookahead as far as the longest signature demands. but no further.

[10:11] <masak> slurpy arrays would perhaps work (and always win) with finite streams. they seem downright anti-social with infinite or not-known-to-be-finite streams.

[10:11] <moritz> you can pass a lazy/infinite stream to a slurpy param

[10:11] <moritz> s/pass/bind/

[10:12] <dalek> roast: 1de96d9 | moritz++ | S05-mass/rx.t:

[10:12] <dalek> roast: some initial rakudo fudging

[10:12] <dalek> roast: review: https://github.com/perl6/roast/commit/1de96d9a23

[10:12] <masak> oh!

[10:13] *** PacoLinux left
[10:13] <masak> for some reason I had it as slurpy arrays always being eager.

[10:14] <moritz> nom: sub f(*@a) { say @a[10] }; f 1 ... *

[10:14] <p6eval> nom 3e66bd: OUTPUT«11␤»

[10:15] <moritz> so you just have to be careful to only do that binding when nothing before it in the signature failed to bind

[10:17] *** drbean left
[10:17] *** risou is now known as risou_awy

[10:18] *** PacoLinux joined
[10:21] *** drbean joined
[10:23] *** wk joined
[10:24] <masak> right.

[10:25] <moritz> std: sub f(*@a, $b?) { }

[10:25] <p6eval> std 580b69a: OUTPUT«[31m===[0mSORRY![31m===[0m␤Cannot put optional positional parameter after variadic parameters at /tmp/Cgx_sJ37xz line 1:␤------> [32msub f(*@a, $b?[33m⏏[31m) { }[0m␤Potential difficulties:␤  $b is declared but not used at /tmp/Cgx_sJ37xz line 1:␤------> [32m…

[10:25] <moritz> is "variadic" the new "slurpy"?

[10:25] <masak> STD has always had it as that, I think.

[10:25] <moritz> std: sub f(|$a, $b?) { }

[10:25] <p6eval> std 580b69a: OUTPUT«[31m===[0mSORRY![31m===[0m␤Cannot put optional positional parameter after variadic parameters at /tmp/zuCVdW6uj3 line 1:␤------> [32msub f(|$a, $b?[33m⏏[31m) { }[0m␤Potential difficulties:␤  $b is declared but not used at /tmp/zuCVdW6uj3 line 1:␤------> [32m…

[10:25] <masak> ah, that might be why.

[10:25] <moritz> ok, that isn't slurpy. but variadic

[10:26] <moritz> I see the point.

[10:26] <masak> right.

[10:28] *** replore left
[10:30] <moritz> on a totally off-topic note I've learned some interesting rules about the convergence of fourier series

[10:31] <moritz> if you fourier-transform a continuous function, the coefficients drop at least as fast as 1/omega

[10:32] <moritz> if it's also a smooth function, they drop at least as fast as 1/omega^2

[10:32] <moritz> (I forgot, needs to be periodic too)

[10:33] <moritz> </off-topic>, self -> lunch

[10:54] <tadzik> can anyone compile Grammar::Debugger?

[10:55] <jnthn> Worked last time I tried it...note it needs the ANSI::TermColor around.

[10:56] <jnthn> tadzik: If it fails in some way, file an issue

[10:56] <tadzik> okay

[10:56] <tadzik> jnthn: ===SORRY!===

[10:56] <tadzik> PAST::Compiler can't compile node of type InterventionPoint

[10:57] *** kaleem left
[10:57] <jnthn> tadzik: Hm...thought that got fixed a while ago (the enum fix I did)

[10:57] <jnthn>  Does it work non-precompiled?

[10:58] <jnthn> back to $class...

[10:58] *** satyavvd left
[10:58] *** PacoLinux left
[11:00] *** kaleem joined
[11:02] <TiMBuS> nom: sub f($a, $b, *@c) { say $b; say @c[10] }; f 1 ... *

[11:02] <p6eval> nom 3e66bd: OUTPUT«Not enough positional parameters passed; got 1 but expected at least 2␤  in sub f at /tmp/fOtGpZ2QKK:1␤  in block <anon> at /tmp/fOtGpZ2QKK:1␤  in <anon> at /tmp/fOtGpZ2QKK:1␤»

[11:03] <TiMBuS> oh yeah

[11:03] <TiMBuS> lesse here

[11:03] <TiMBuS> nom: sub f($a, $b, *@c) { say $b; say @c[10] }; f(|1 ... *)

[11:03] <p6eval> nom 3e66bd: OUTPUT«Could not find sub &prefix:<|>␤  in block <anon> at /tmp/pDpXjUlrSD:1␤  in <anon> at /tmp/pDpXjUlrSD:1␤»

[11:03] <TiMBuS> not it..

[11:04] *** mj41 left
[11:05] *** PacoLinux joined
[11:05] <TiMBuS> ehhn it doesnt matter, if i force it to flatten to an arglist it will run forever won't it.

[11:07] *** drbean left
[11:07] *** im2ee joined
[11:08] <im2ee> Hello

[11:10] <flussence> does nom have any equivalent of ng's <?DEBUG(1)> for regex?

[11:10] *** f00li5h left
[11:13] <tadzik> nope

[11:13] *** drbean joined
[11:13] <tadzik> just stumbled upon it

[11:13] <tadzik> well, not that I know of

[11:16] <tadzik> nom: class A { method perl { "foobar" } }; A.new.perl.say

[11:16] <p6eval> nom 3e66bd: OUTPUT«foobar␤»

[11:17] <tadzik> hrm

[11:19] *** mj41 joined
[11:21] *** koban left
[11:27] <colomon> flussence: look for jnthn++'s regex tracer / debugger -- that only works with nom.

[11:28] <flussence> thanks, but you said that about 10 seconds after I figured out what was wrong in my code :)

[11:28] <flussence> Str.match doesn't set $/ apparently :(

[11:30] <moritz> should it?

[11:31] <flussence> dunno... I was trying to use it for an if {} and couldn't figure out why it returned true, but $/.perl showed a failed match

[11:32] <masak> yay, Karen replied via email about my grant application.

[11:33] <tadzik> ....aaaand?

[11:33] <masak> turns out there's been a bit of a delay due to the zombie Web.pm grant.

[11:34] <moritz> are you going to finish it? or GC it?

[11:34] <masak> actually, now that I think about it, that might very well be why Alberto contacted me and Tene about the Web.pm grant the other week.

[11:35] <masak> moritz: I'm/we're going to finish it according to its grant proposal before the end of November, or fail trying.

[11:35] <masak> that's what we decided with Alberto.

[11:35] <moritz> sounds sane.

[11:36] <masak> Karen also asked what I think about D4, and how much of a risk it is. I'll need to mull over that one today before I reply.

[11:40] *** wamba joined
[11:40] <moritz> maybe you could decouple it from the grant in some way

[11:40] <masak> D1..D3 are essentially feature additions, whereas D4 is a refactor. refactors are difficult to assess.

[11:40] *** Patterner left
[11:40] *** benabik joined
[11:41] <masak> moritz: maybe. right now I don't feel that's necessary, though.

[11:42] *** Psyche^ joined
[11:42] *** Psyche^ is now known as Patterner

[11:43] <masak> I could try to outline D4 in as much detail as I can discern from my current vantage point.

[11:44] <masak> sort of recursively find milestones within D4.

[11:44] <masak> I thought of doing that in reply to my commenters on the grant proposal post anyway.

[11:45] *** [particle] left
[11:46] *** benabik_ joined
[11:46] *** benabik_ left
[11:46] *** benabik_school joined
[11:46] *** [particle] joined
[11:46] *** benabik_school left
[11:48] <moritz> wouldn't hurt, I think

[11:50] <masak> in fact, that might be the only way to assess the risk involved; to break it down into subtasks.

[11:52] <masak> interesting article about Dart: http://arstechnica.com/business/news/2011/10/javascript-has-problems-can-googles-dart-solve-them.ars

[11:55] *** am0c left
[12:02] <dalek> nqp: 15be997 | mls++ | src/HLL/Compiler.pm:

[12:02] <dalek> nqp: Do not let control exceptions slip through. Also adds a handle-control hook.

[12:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/15be997bb7

[12:04] *** mkramer1 joined
[12:13] *** SHODAN joined
[12:13] *** amkrankruleuen left
[12:18] *** lestrrat left
[12:19] *** lestrrat joined
[12:25] *** SHODAN left
[12:27] *** replore joined
[12:29] *** SHODAN joined
[12:34] *** kaleem left
[12:38] *** kaleem joined
[12:41] *** ab5tract joined
[12:44] *** mtk left
[12:45] *** f00li5h joined
[12:47] *** imarcusthis left
[12:48] <masak> perl6: my $N = Inf; say join " on the wall, ", "$N bottles of beer"; say "take one down, pass it around"; $N--; say "$N bottles of beer on the wall"

[12:48] <p6eval> rakudo 3e66bd: OUTPUT«Inf bottles of beer␤take one down, pass it around␤Inf bottles of beer on the wall␤»

[12:48] <p6eval> ..niecza v10-43-gf5298c8: OUTPUT«Infinity bottles of beer␤take one down, pass it around␤Infinity bottles of beer on the wall␤»

[12:48] <p6eval> ..pugs: OUTPUT«sh: /home/p6eval/.cabal/bin/pugs: not found␤»

[12:48] *** drbean left
[12:49] <masak> sorear: is it LHF to make 'Infinity' read 'Inf' above?

[12:49] <masak> niecza: say Inf

[12:49] <jnthn> INFINITE BEER!!!

[12:49] <p6eval> niecza v10-43-gf5298c8: OUTPUT«Infinity␤»

[12:50] *** mtk joined
[12:50] <masak> jnthn: most of it's room temperature, though, since there isn't a fridge large enough to hold it.

[12:51] <masak> perl6: my $N = Inf; say join " on the wall, ", "$N bottles of beer" xx 2; say "take one down, pass it around"; $N--; say "$N bottles of beer on the wall"

[12:51] <p6eval> rakudo 3e66bd: OUTPUT«Inf bottles of beer on the wall, Inf bottles of beer␤take one down, pass it around␤Inf bottles of beer on the wall␤»

[12:51] <p6eval> ..niecza v10-43-gf5298c8: OUTPUT«Infinity bottles of beer on the wall, Infinity bottles of beer␤take one down, pass it around␤Infinity bottles of beer on the wall␤»

[12:51] <p6eval> ..pugs: OUTPUT«sh: /home/p6eval/.cabal/bin/pugs: not found␤»

[12:51] <masak> that's better.

[12:53] *** wolfman2000 left
[12:54] *** drbean joined
[12:55] <dalek> evalbot: e94ed5d | moritz++ | evalbot.pl:

[12:55] <dalek> evalbot: exclude pugs from "perl6:" target while its installation is busted; include b for the lulz

[12:55] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/e94ed5d070

[12:57] *** p6eval left
[12:57] *** p6eval joined
[12:57] *** ChanServ sets mode: +v p6eval

[13:03] <masak> for the lulz, eh?

[13:03] <masak> maybe I should switch to this 'b' implementation. it seems to be on the rise in popularity...

[13:06] *** ggoebel left
[13:08] *** awwaiid joined
[13:11] <masak> perl6: say "b, are you there?"

[13:11] <p6eval> nom 3e66bd, b 1b7dd1, niecza v10-43-gf5298c8: OUTPUT«b, are you there?␤»

[13:11] <masak> \o/

[13:11] <masak> moritz++ # lulz

[13:11] *** Holy_Cow joined
[13:17] *** drbean left
[13:19] <masak> perl6: say .perl for (gather for 1, 2, 3 -> $a { for <a b c> -> $b { take ($a, $b) } })

[13:19] <p6eval> nom 3e66bd, b 1b7dd1, niecza v10-43-gf5298c8: OUTPUT«1␤"a"␤1␤"b"␤1␤"c"␤2␤"a"␤2␤"b"␤2␤"c"␤3␤"a"␤3␤"b"␤3␤"c"␤»

[13:19] <masak> perl6: say .perl for (gather for 1, 2, 3 -> $a { for <a b c> -> $b { take [$a, $b] } })

[13:19] <p6eval> b 1b7dd1, niecza v10-43-gf5298c8: OUTPUT«[1, "a"]␤[1, "b"]␤[1, "c"]␤[2, "a"]␤[2, "b"]␤[2, "c"]␤[3, "a"]␤[3, "b"]␤[3, "c"]␤»

[13:19] <p6eval> ..nom 3e66bd: OUTPUT«1␤"a"␤1␤"b"␤1␤"c"␤2␤"a"␤2␤"b"␤2␤"c"␤3␤"a"␤3␤"b"␤3␤"c"␤»

[13:19] * masak submits rakudobug

[13:20] *** donri joined
[13:21] *** drbean joined
[13:21] <moritz> what's wrong, the .perl?

[13:22] *** PacoLinux left
[13:22] <moritz> nom: say <a b>.perl

[13:22] <p6eval> nom 3e66bd: OUTPUT«("a", "b")␤»

[13:22] <moritz> oh, it flattens

[13:23] <masak> nom: say [<a b>].perl

[13:23] <p6eval> nom 3e66bd: OUTPUT«["a", "b"]␤»

[13:23] <masak> no, the problem isn't .perl, it seems, but &take

[13:25] <moritz> I think we have a ticket about take flattening

[13:26] * masak searches for it

[13:26] <benabik> perl6: say .perl for (gather for 1, 2, 3 -> $a { for <a b c> -> $b { take $a, $b } })

[13:26] <p6eval> nom 3e66bd, b 1b7dd1, niecza v10-43-gf5298c8: OUTPUT«1␤"a"␤1␤"b"␤1␤"c"␤2␤"a"␤2␤"b"␤2␤"c"␤3␤"a"␤3␤"b"␤3␤"c"␤»

[13:26] <benabik> Right.

[13:27] <moritz> rakudo: say (<a b c d e> Zxx 0,1,0,1,0) 

[13:27] <p6eval> rakudo 3e66bd: OUTPUT«b d␤»

[13:27] <masak> moritz: searches for 'take' and 'flatten' didn't turn up a ticket except the one I just submitted.

[13:28] <masak> moritz: oh, cool!

[13:28] <moritz> rakudo: say (<a b c d e> Zxx 0,1,0,1,0).Str

[13:28] <p6eval> rakudo 3e66bd: OUTPUT«b d␤»

[13:28] <moritz> so https://rt.perl.org/rt3/Ticket/Display.html?id=78026 is fixed it seems

[13:29] <moritz> masak: I might have confused it with a test or something

[13:29] <masak> I'll mark #78026 as needstest

[13:29] *** wk left
[13:30] <moritz> S04-statements/gather.t around line 87

[13:30] <moritz> rakudo: my @list  = gather { take [1,2,3]; take [4,5,6];}; say @list.perl

[13:30] <p6eval> rakudo 3e66bd: OUTPUT«Array.new(1, 2, 3, 4, 5, 6)␤»

[13:31] *** localhost left
[13:32] <moritz> rakudo: sub foo {my @a = (1,2,3,4,5);my $val ;gather {while @a {$val = @a.shift();take $val;}}};say ~( foo() ) ; say foo();

[13:32] <p6eval> rakudo 3e66bd: OUTPUT«1 2 3 4 5␤1 2 3 4 5␤»

[13:32] *** eiro joined
[13:32] <eiro> hello perl6 

[13:33] <moritz> and https://rt.perl.org/rt3/Ticket/Display.html?id=77302 is teh same as #78026 it seems

[13:33] <masak> heiro!

[13:33] *** localhost joined
[13:33] *** sayu joined
[13:34] <masak> ah, decontainerization.

[13:34] *** GlitchMr joined
[13:39] <dalek> roast: 7b2fd5a | moritz++ | S04-statements/gather.t:

[13:39] <dalek> roast: tests for RT #78026, RT #77302, gather/take value decontainerization

[13:39] <dalek> roast: review: https://github.com/perl6/roast/commit/7b2fd5ab33

[13:43] *** PacoLinux joined
[13:44] <dalek> niecza: 82a2206 | (Solomon Foster)++ | lib/CORE.setting:

[13:44] <dalek> niecza: Add method form of rand, pick.

[13:44] <dalek> niecza: review: https://github.com/sorear/niecza/commit/82a2206d8a

[13:44] *** PacoLinux_ joined
[13:49] <masak> oh look, Real has a .rand method! :)

[13:49] <masak> colomon++ # .pick

[13:49] *** espadrine left
[13:50] <colomon> masak: needed it for my project.  :)

[13:50] *** espadrine joined
[13:50] <frettled> colomon++ v.nice

[13:50] <masak> is it... a sekkrit project? :>

[13:50] <colomon> no, it's the project I've been talking about for a week or two.  ;)

[13:51] <colomon> not to mention repeatedly asking for help with the Gtk bits of it on here.

[13:51] <ingy> moritz: how did you try to install 7.0.3?

[13:51] <moritz> ingy: download tarball, extract it, ran ./configure --prefix=/some/path && make install

[13:56] <masak> colomon: oh, oh, something with TreeIter, right? right? ;)

[13:56] <masak> ooh! http://www.harmonyware.com/pictures/gtk-treeview.png

[13:57] <masak> Niecza did that?

[13:57] <colomon> yes

[13:57] <masak> \o/

[13:57] <masak> that's pretty awesome.

[13:58] <colomon> current version also has a (working) column of checkboxes at the front, and records which selections were checked at exit in a log file

[13:58] <colomon> now I just need working pick to so it's easy to randomly select tunes which haven't been checked recently

[14:00] *** imarcusthis joined
[14:02] <colomon> masak: the Gtk code is at https://github.com/colomon/TuneReminder/blob/master/bin/practice.pl

[14:02] <masak> ooh

[14:02] * masak devours it

[14:02] <colomon> other than a couple of minor weirdnesses, it's very close to what the equivalent C# would be (in terms of Gtk calls)

[14:03] <colomon> ie this is a practical, real-world UI that works in Niecza now.

[14:03] <masak> heh, both you and mberends go for sub names in CamelCase ;)

[14:03] <moritz> does it feel responsive?

[14:03] <ingy> moritz: would you mind running it again and sending me the output?

[14:04] <masak> and method names.

[14:04] <moritz> ingy: is it not enought to know that it hits http://hackage.haskell.org/trac/ghc/ticket/5005 and dies with the same error as in that ticket?

[14:04] <masak> colomon: it's refreshing to see Perl 6 code used in this way.

[14:04] <masak> for a GUI, I mean. not the CamelCase :P

[14:05] <ingy> moritz: i've looked at all that, I just want to see the full run failure

[14:05] *** drbean left
[14:06] *** jferrero joined
[14:07] <colomon> moritz: I'm not sure the actual interaction parts of the UI are enough to be representative, but certainly the checkbox checking portion of it feels completely responsive.

[14:08] <colomon> masak: I've always used CamelCase for subs in C++, and since I started with a hunk of mberends' Gtk code, I just followed his conventions without thinking about it.

[14:09] <moritz> ingy: http://moritz.faui2k3.org/tmp/ghc-7.0.3.build.log

[14:10] <moritz> ingy: that's the transcript from script(1)

[14:10] *** drbean joined
[14:10] <colomon> masak: The extremely awesome thing (even better than having a working UI for Perl 6!) is that (as far as I know) there's nothing magic going on to specifically support Gtk.  I think any mono/.NET/C# library can be called from Niecza this way.  Which means there's actually a chance I may be working on a Perl 6 CAD program before the year is out....

[14:13] <masak> woo

[14:13] <masak> that's great news!

[14:14] <frettled> wow!

[14:15] * colomon hopes he's not over-promising what niecza can do...

[14:20] *** simcop2387 left
[14:20] *** alastyr left
[14:23] *** _sri left
[14:23] *** simcop2387 joined
[14:23] *** dukeleto left
[14:24] *** dukeleto joined
[14:26] *** _sri joined
[14:26] *** PacoLinux_ left
[14:30] <ingy> moritz: it looks like 5005 was resolved on March 12th and 7.0.3 was released March 27th :\

[14:30] <ingy> not sure how this could be happening :\

[14:30] <moritz> ingy: but in which branch was it resolved?

[14:30] <moritz> ingy: I've also tried it with 7.0.4, and it's the same error

[14:31] <ingy> I'll ask around

[14:34] *** drbean left
[14:34] *** SHODAN left
[14:36] <TimToady> BBC says Dennis Richie has died

[14:37] <masak> aye :/

[14:37] *** pmurias joined
[14:37] <masak> so does Twitter.

[14:37] <TimToady> *Ritchie

[14:37] <moritz> and hackernews. And reddit.

[14:38] *** PacoLinux_ joined
[14:38] <pmurias> colomon: what is the CAD software currently written in? 

[14:38] <masak> rip dmr

[14:40] *** drbean joined
[14:40] *** GlitchMr42 joined
[14:40] *** jack-ji joined
[14:43] *** GlitchMr left
[14:47] *** GlitchMr42 is now known as GlitchMr

[14:48] <PerlJam> what?

[14:49] <masak> Requiescat in pace, Dennis MacAlistair Ritchie.

[14:50] <PerlJam> :(

[14:51] <PerlJam> The one thing about getting old that I'm not sure I'm going to handle too well is everyone dying.

[14:52] *** tyatpi_ joined
[14:52] <PerlJam> (particularly when it's me :)

[14:52] <moritz> PerlJam: oh, when it's you, you won't have to handle it :-)

[14:55] <masak> PerlJam: over the years, I've gotten the feeling that the ones who are best at handling their own death are Tibetans. they consider it an acquired skill. consider checking it out.

[14:56] *** imarcusthis left
[14:59] *** alastyr joined
[15:01] *** kaleem left
[15:01] *** imarcusthis joined
[15:03] *** mkramer1 left
[15:05] <colomon> pmurias: for $work I do CAD libraries in C++.  One of the geometry engine companies I work with has a C# version of their geometry engine.

[15:06] *** PacoLinux_ left
[15:09] *** sayu left
[15:10] <ingy> moritz: I just talked to folk on #haskell and they say the fix did not go in until 7.2 and suggested 7.2.

[15:10] *** PacoLinux_ joined
[15:10] <ingy> moritz: then au suggested 7.2 as well

[15:11] <ingy> moritz: you don't get platform but supposedly we don't need it

[15:11] <moritz> ingy: problem is, I don't get Cabal either

[15:11] <ingy> moritz: it's just sugar modules basically

[15:11] *** wtw left
[15:11] <ingy> moritz: soo... I'll script it all for you

[15:12] <ingy> bbl

[15:12] <moritz> ingy: http://irclog.perlgeek.de/perl6/2011-10-12#i_4557943

[15:12] <moritz> ingy: that's what happen when I try to install Cabal from tar ball on top of 7.2.1

[15:13] <ingy> after nuking .cabal?

[15:13] <moritz> yes

[15:16] *** risou_awy is now known as risou

[15:16] <sjohnson> perl6.pals

[15:19] <masak> greetings, sjohnson 

[15:19] <sjohnson> yo masak

[15:22] <tadzik> （　｀ー´）

[15:22] <tadzik> or, （　｀ー´）/

[15:22] <masak> ;)

[15:22] *** loloiiiijj joined
[15:25] *** kaare_ joined
[15:26] *** jkeats_ joined
[15:27] <masak> perl6: class perl6 { method pals { <sjohnson tadzik masak> } }; say so 'sjohnson' eq any perl6.pals

[15:27] <p6eval> nom 3e66bd, b 1b7dd1, niecza v10-44-g82a2206: OUTPUT«Bool::True␤»

[15:27] <sjohnson> tadzik: :)

[15:27] <sjohnson> masak++ # programming powar

[15:28] <masak> just goofing off.

[15:32] <sjohnson> (=ﾟωﾟ=)

[15:32] *** PacoLinux_ left
[15:33] <sjohnson> kind of interesting this syntax though

[15:33] <sjohnson> what does "so" do?

[15:33] <moritz> it so boolifies your result

[15:33] <moritz> opposite of 'not'

[15:33] *** Trashlord left
[15:34] <masak> sjohnson: same as prefix:<?> does, but with looser precedence.

[15:34] <masak> rakudo: say ?42; say so 42

[15:34] <p6eval> rakudo 3e66bd: OUTPUT«Bool::True␤Bool::True␤»

[15:34] <sjohnson> that's handy

[15:35] <masak> well, it lets me skip the parentheses in the above case :)

[15:35] * moritz adds "what is &so?" to his FAQ list

[15:35] <masak> perl6: class perl6 { method pals { <sjohnson tadzik masak> } }; say ?('sjohnson' eq any perl6.pals)

[15:35] *** Trashlord joined
[15:35] <p6eval> nom 3e66bd, b 1b7dd1, niecza v10-44-g82a2206: OUTPUT«Bool::True␤»

[15:36] <benabik> I wonder if we can make "does so" valid syntax.  :-D

[15:36] <masak> moritz: "...and why do I seem to need it when I'm playing around with junctions?"

[15:36] *** tokuhiro_ left
[15:36] <sjohnson> perl6: say 4?

[15:36] <moritz> masak: that's not frequently asked here

[15:36] <p6eval> nom 3e66bd: OUTPUT«===SORRY!===␤Confused at line 1, near "say 4?"␤»

[15:36] <p6eval> ..niecza v10-44-g82a2206: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Confused at /tmp/yAykPloVwx line 1:␤------> [32msay 4[33m⏏[31m?[0m␤␤Parse failed␤␤»

[15:36] <p6eval> ..b 1b7dd1: OUTPUT«===SORRY!===␤Confused at line 22, near "say 4?"␤»

[15:36] <sjohnson> perl6: say ?4

[15:36] <masak> moritz: people ask "what's so?" quite a lot.

[15:36] <p6eval> nom 3e66bd, b 1b7dd1, niecza v10-44-g82a2206: OUTPUT«Bool::True␤»

[15:36] <moritz> nom: my $x = 3; $x does so Whatever; say so $x

[15:36] <sjohnson> perl6: say ?(4)

[15:36] <p6eval> nom 3e66bd, b 1b7dd1, niecza v10-44-g82a2206: OUTPUT«Bool::True␤»

[15:36] <p6eval> nom 3e66bd: OUTPUT«No applicable candidates found to dispatch to for 'infix:<does>'. Available candidates are:␤:(Mu $obj, Positional @roles)␤:(Mu $obj, Mu $role)␤␤  in sub infix:<does> at src/gen/CORE.setting:7364␤  in block <anon> at /tmp/O7qJUQqxuh:1␤  in <anon> at /tmp/O7qJUQqxuh:1␤»…

[15:36] <moritz> masak: that's why I put it on my FAQ list :-)

[15:36] <masak> moritz: we give them the immediate semantic answer, but don't often tell them why we put it there.

[15:37] <masak> moritz: as long as you explain why it's needed, I'm happy :)

[15:37] <moritz> masak: currently I'm collecting questions, not answers

[15:37] <masak> right.

[15:37] <masak> consider it a reminder to myself, then.

[15:37] <masak> there's often a surface question and a deeper question.

[15:39] <moritz> sure

[15:39] <masak> "what's &so ?" -- surface answer: "it boolifies a value" -- deep answer: "it causes the junctional value there to collapse"

[15:39] <moritz> masak: if you recall my 5-to-6 series, you might remember that I tried really hard to answer the deep questions too :-)

[15:39] <masak> you did indeed.

[15:40] *** jedai left
[15:40] <masak> that's why I keep linking people to it ;)

[15:40] *** jedai joined
[15:43] *** dukeleto left
[15:44] *** dukeleto joined
[15:44] *** dukeleto left
[15:44] *** dukeleto joined
[15:45] *** dukeleto left
[15:45] *** dukeleto joined
[15:45] *** dukeleto left
[15:45] *** dukeleto joined
[15:46] *** dukeleto left
[15:46] <masak> by the way, it seems good practice to me to do &so or equiv on any junction before returning it from a routine.

[15:46] <masak> I call it the principle of "don't return junctions" :P

[15:46] *** dukeleto joined
[15:46] *** dukeleto left
[15:46] <masak> may need future refinement, but so far it's working out just fine.

[15:46] <moritz> so far I've never been tempted to return junctions from subroutines

[15:46] *** jedai_ joined
[15:47] *** dukeleto joined
[15:47] <masak> right. exactly.

[15:47] <moritz> it's mostly not what the caller expects, and thus bad

[15:47] *** Trashlord left
[15:47] *** dukeleto left
[15:47] <moritz> I use them only as matchers

[15:47] <moritz> so either I smart-match against them, or I pass them to a routine or callback that does

[15:47] *** dukeleto joined
[15:47] *** dukeleto left
[15:47] *** jedai left
[15:47] <PerlJam> that sounds like a challenge for someone to build a "junction oriented" program where every sub returns a junction

[15:48] *** dukeleto joined
[15:48] *** dukeleto left
[15:48] <masak> I use them (1) in conditionals, (2) as matchers, (3) in 'where' clauses.

[15:48] <masak> though arguably (3) is a special case of (2).

[15:48] <moritz> PerlJam: in roast there's a small program that solves integer equations by brute-forcing them with junctions

[15:48] *** dukeleto joined
[15:48] *** dukeleto left
[15:49] *** dukeleto joined
[15:49] *** dukeleto left
[15:49] *** dukeleto joined
[15:49] *** dukeleto left
[15:49] <moritz> it's not exactly a program that returns junctions all over, but it's the closest form of junction abuse in that direction which I've seen so far

[15:50] *** dukeleto joined
[15:50] *** dukeleto left
[15:51] *** dukeleto joined
[15:51] *** dukeleto left
[15:51] *** dukeleto joined
[15:51] *** dukeleto left
[15:51] *** Trashlord joined
[15:51] *** pmurias left
[15:52] *** dukeleto joined
[15:52] *** dukeleto left
[15:52] *** dukeleto joined
[15:52] *** dukeleto left
[15:53] <jferrero> TimToady, Did you meet Dennis Ritchie?

[15:53] *** dukeleto joined
[15:53] *** dukeleto left
[15:54] *** dukeleto joined
[15:55] *** Mowah_ joined
[15:55] <masak> decommute &

[15:55] *** dukeleto left
[15:56] * PerlJam corresponded with dmr via email almost exactly 1 year ago

[15:56] *** dukeleto joined
[15:56] *** dukeleto left
[15:57] *** dukeleto joined
[15:57] <TimToady> jferrero: yes, we were at the same conference quite a few times

[15:57] <PerlJam> (I was asking him what he thought about how long C would live back in the 1970s because on #perl6 we were talking about Perl as a hundred year language)

[15:58] *** mj41 left
[15:58] <mls_> niecza: while 0 {LAST {say "hello"}}

[15:58] <p6eval> niecza v10-44-g82a2206: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Action method statement_prefix:LAST not yet implemented at /tmp/tTWWOYi1Ii line 1:␤------> [32mwhile 0 {LAST {say "hello"}[33m⏏[31m}[0m␤␤␤Unhandled Exception: Unable to resolve method statement_level in class Str␤  at /h…

[15:59] <moritz> mls_: interesting edge case :-)

[15:59] <PerlJam> and back then, he had no idea that C would even *exist* in 2010

[15:59] <mls_> I think it should say hello

[16:00] <moritz> what's the last element of an empty list? :-)

[16:00] <PerlJam> mls_: whyfor? The loop is never entered, ergo it's never executed a"last" time

[16:00] <moritz> but I can see your reasoning

[16:00] <TimToady> it has to be outside of the while test in any case

[16:00] <TimToady> which is officially outside of the block

[16:01] <moritz> PerlJam: I think LAST is more of an AFTER -- you can't know if an iteration is the last

[16:01] *** GlitchMr left
[16:01] <moritz> PerlJam: you can just save a reference to the LAST closure, and execute it *after* the last iteration

[16:01] <TimToady> so while cond { LAST stuff } turns into something more like { while cond {}; stuff }

[16:01] *** GlitchMr joined
[16:01] <GlitchMr> I was disconnected

[16:02] *** Trashlord left
[16:02] <moritz> TimToady: so in plain English, the LAST phaser fires even if the body wasn't ever executed. Right?

[16:02] <mls_> except is sees the lexicals from the block?

[16:02] <TimToady> yes, it also has to act as a closure

[16:02] <GlitchMr> ... and in log I don't see question which I've asked...

[16:02] <sjohnson> wow, dennis ritchie is dead

[16:02] <GlitchMr> split //, "AAA"

[16:02] <GlitchMr> How can I do it in Perl 6?

[16:02] <GlitchMr> Just asking...

[16:02] <moritz> GlitchMr: "AAA".comb

[16:02] <TimToady> but if the loop is never entered, the closure isn't closed :)

[16:03] <PerlJam> That seems like an artifact of implementation more than anything else.

[16:05] *** PacoLinux_ joined
[16:05] <colomon> Won't the lexicals from the block be kind of weird?  

[16:05] <moritz> PerlJam: it's not just an artifact, unless you count computability questions as artifacts too

[16:05] <TimToady> the thing is, it may be very inefficient to keep reclosing the closure each time through the loop

[16:06] <colomon> TimToady: true, I guess

[16:06] <TimToady> if it's being used as a "finally" without access to lexicals, then there's no problem, I suppose

[16:07] <TimToady> "ya pays for whatcha uses"

[16:08] <PerlJam> moritz: so ... would you also expect LEAVE phasers to fire on loops that never execute?

[16:09] <PerlJam>  perhaps we should rename START to BEFORE and create a corresponding AFTER

[16:09] <moritz> PerlJam: no, because LEAVE is per invocation (which means "per iteration" in a loop)

[16:09] <PerlJam> (START has always looked a little lonely to me)

[16:10] <PerlJam> Though I guess changing START to BEFORE does muck with the semantics.

[16:11] <TimToady> there is nothing corresponding to START because we can't know the future

[16:11] <TimToady> START does something at first use, and there's no way to determined "last use"

[16:11] <TimToady> *mine

[16:12] <TimToady> at least, no way to determine that till END time, at which point you might as well use END

[16:12] *** mj41 joined
[16:13] <moritz> .oO( the END is nigh )

[16:13] <TimToady> it's sort nice that "end" can be construed as the antonym of both "begin" and "start"

[16:13] <TimToady> *sorta

[16:13] <PerlJam> no way to know the future?  I thought this was #perl6?!?  Impossible things become possible all the time!   ;-)

[16:14] <TimToady> though the words "begin" and "start" don't indicate their asap vs alap relationship in p6

[16:14] <PerlJam> in any case, having a LAST phaser fire on a loop that is never entered would be tres surprising.

[16:15] <TimToady> maybe we should have "INIT", "EAGERINIT", and "LAZYINIT" instead ;)

[16:16] <ingy> moritz: can someone else host the pugs p6eval ?

[16:16] <PerlJam> .oO( INIT to WINIT )

[16:16] <moritz> ingy: I can't make sense of that question. Care to rephrase?

[16:16] *** lateau_ joined
[16:17] <ingy> moritz: the eval bots or whatever you call them, run on your machine?

[16:17] <moritz> ingy: well, on diakopter's

[16:17] <moritz> it could run on a different machine, but it would be lots of effort migrate

[16:17] <ingy> i see

[16:18] <moritz> of course you can run a second copy that only handles pugs

[16:18] <moritz> feel free to do that

[16:18] <ingy> ok. is there a writeup?

[16:18] <moritz> no, just a repo. perl6/evalbot/ on github.

[16:18] <ingy> ok

[16:18] * moritz -> decommute

[16:21] *** mj41 left
[16:24] *** slavik1 joined
[16:25] * PerlJam reads chromatic

[16:28] <[Coke]> (tickets) as someone who has gone through a LOT of tickets this week, I'd rather have 4 tickets that all have the same root cause but we didn't know it that are all then easy to close later than 0 tickets.

[16:31] *** sftp joined
[16:47] *** mj41 joined
[16:48] *** jrockway left
[16:49] *** jrockway joined
[16:57] *** kaleem joined
[16:59] *** mj41 left
[17:00] *** GlitchMr left
[17:01] *** mj41 joined
[17:01] *** saaki left
[17:02] *** wk joined
[17:03] *** GlitchMr joined
[17:04] *** dakkar left
[17:05] * colomon is reading chromatic

[17:06] *** mj41 left
[17:06] *** ggoebel joined
[17:09] *** Kivutarrr joined
[17:10] *** dukeleto left
[17:10] *** dukeleto joined
[17:10] *** dukeleto left
[17:11] <GlitchMr> rakudo: say 0.1+0.2-0.3

[17:11] <p6eval> rakudo 3e66bd: OUTPUT«0␤»

[17:11] <GlitchMr> ...

[17:11] *** dukeleto joined
[17:12] <moritz> perl6: ...

[17:12] <p6eval> nom 3e66bd, b 1b7dd1:  ( no output )

[17:12] <p6eval> ..niecza v10-44-g82a2206: OUTPUT«␤Unhandled Exception: >>>Stub code executed␤  at /tmp/KTMxvXfKYX line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2160 (CORE C1034_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2161 (CORE module-CORE @ 58) ␤  at /home/…

[17:12] <GlitchMr> This is why floats are weir

[17:12] <GlitchMr> d

[17:14] <moritz> what's weird about 0.1 + 0.2 - 0.3 being 0?

[17:14] <TimToady> those aren't floats

[17:15] <TimToady> rakudo: say (0.1 + 0.2 - 0.3).WHAT

[17:15] <p6eval> rakudo 3e66bd: OUTPUT«Rat()␤»

[17:15] <TimToady> rakudo: say (0.1 + 0.2 - 0.3).perl

[17:15] <p6eval> rakudo 3e66bd: OUTPUT«0/1␤»

[17:16] <GlitchMr> rakudo: e**pi-pi

[17:16] <p6eval> rakudo 3e66bd: OUTPUT«Could not find sub &pi-pi␤  in block <anon> at /tmp/ORVDFFg1Io:1␤  in <anon> at /tmp/ORVDFFg1Io:1␤»

[17:16] <GlitchMr> rakudo: e**pi - pi

[17:16] <p6eval> rakudo 3e66bd:  ( no output )

[17:17] <GlitchMr> rakudo: say e**pi - pi

[17:17] <p6eval> rakudo 3e66bd: OUTPUT«19.9990999409208␤»

[17:17] <masak> TimToady: I'm surprised at the notion that LAST runs after a 0-iteration loops. if nothing else, it creates a strange assymmetry with FIRST.

[17:17] <TimToady> yes, I'm thinking it shouldn't run on 0-times, since the closure makes no sense

[17:18] <masak> I'm in full support of it not running on 0-times.

[17:18] <masak> if you want AFTER semantics, put it after the loop ;)

[17:18] *** molaf joined
[17:18] <masak> if you wanted access to lexicals in the loop without ever running the loop, see a shrink :P

[17:19] *** dukeleto left
[17:19] *** dukeleto joined
[17:19] *** dukeleto left
[17:20] *** dukeleto joined
[17:20] *** dukeleto left
[17:20] <TimToady> it also, coincidentally, allows the LAST block to be rewritten as a goto, if the conditional test can be inlined

[17:20] *** jack-ji left
[17:21] <masak> oh man. in a year or two, I'll take those phasers for granted as part of my programmer vocabulary. and then I'll miss them greatly in all other languages. :)

[17:21] *** dukeleto joined
[17:21] *** dukeleto left
[17:21] <TimToady> an important optimization will be figuring out which loop blocks don't actually have to become closures

[17:21] <masak> aye.

[17:21] *** dukeleto joined
[17:21] *** dukeleto left
[17:22] *** dukeleto joined
[17:22] *** dukeleto left
[17:22] *** dukeleto joined
[17:23] *** dukeleto left
[17:23] <moritz> masak: there are several solutions to that problem which are all not really desirable/possible

[17:23] *** dukeleto joined
[17:23] *** dukeleto left
[17:23] <moritz> :-)

[17:24] *** dukeleto joined
[17:24] *** dukeleto left
[17:24] *** dukeleto joined
[17:24] *** dukeleto left
[17:24] <masak> to what problem?

[17:25] <masak> GlitchMr: 0.1 isn't a Num (floating-point) in Perl 6, it's a Rat.

[17:25] <moritz> masak: missing phasers in other languages

[17:25] *** dukeleto joined
[17:25] *** dukeleto left
[17:25] <masak> WORLD DOMINATION

[17:26] *** tyatpi_ left
[17:26] *** bluescreen10 joined
[17:26] *** dukeleto joined
[17:26] *** dukeleto left
[17:26] <moritz> for example :-)

[17:26] <masak> er, I mean, successful employment of PR to increase the mindshare of Perl 6.

[17:26] <masak> of course.

[17:26] *** dukeleto joined
[17:26] *** wooden joined
[17:26] *** wooden left
[17:26] *** wooden joined
[17:26] *** dukeleto left
[17:27] <moritz> that's what I read from the start :-)

[17:27] *** dukeleto joined
[17:27] *** jdhore left
[17:27] *** dukeleto left
[17:27] *** bluescreen10 left
[17:27] *** dukeleto joined
[17:27] <masak> dukeleto: would you stop doing that? :/

[17:27] *** dukeleto left
[17:27] *** bluescreen10 joined
[17:28] <masak> backlog space doesn't exactly grow on trees.

[17:28] *** dukeleto joined
[17:28] *** dukeleto left
[17:28] <ashleydev> gosh think if it *was* paper...

[17:28] *** dukeleto joined
[17:30] <moritz> maybe it is paper, and somebody prints out every day of #perl6 backlog

[17:30] <masak> if that printer ever runs out of ink, we're hosed. o.O

[17:30] <masak> oh wait

[17:32] *** Kivutarrr left
[17:32] *** jack-ji joined
[17:32] *** Kivutarrr joined
[17:34] *** arthur-_ left
[17:34] *** ab5tract left
[17:34] *** GlitchMr42 joined
[17:36] <[Coke]> following up on the "use perl6 now" thread from earlier: for me to use perl6 for projects, I'd need it to either be a browser scripting language or an awesome middle tier web language. Or maybe possibly a PL/SQL replacement. And then I'd have a hard sell internally unless someone was selling support.

[17:36] <[Coke]> So I've pretty much ruled it out in that niche.

[17:36] <dukeleto> masak: sorry, my irc proxy gets into fits occasionally

[17:37] <masak> dukeleto: I'm just glad you're OK :)

[17:37] *** GlitchMr left
[17:38] *** GlitchMr42 is now known as GlitchMr

[17:40] <dukeleto> masak: i use dircproxy, and sometimes I forget to register my nick and then freenode and dircproxy start dueling with each other

[17:40] <dukeleto> masak: or, i forget to identify for my registered nick

[17:41] *** jdhore joined
[17:42] *** donri left
[17:44] *** donri joined
[17:44] *** jack-ji left
[17:48] *** tyatpi_ joined
[17:48] *** PacoLinux_ left
[17:50] <masak> ah.

[17:51] *** molaf left
[17:52] <diakopter> was the "use perl6 now" thread on irc or email?

[17:52] *** wk left
[17:53] *** arthur-_ joined
[17:54] <[Coke]> discussion on IRC about chromatic's latest blog posting. maybe his last 2.

[17:54] <[Coke]> about 10 hours ago.

[17:54] *** wk joined
[17:55] *** Chillance joined
[17:56] *** jack-ji joined
[17:58] *** daniel-s left
[17:59] *** am0c joined
[18:00] <masak> diakopter: tl;dr: it's 2011. why aren't there more overwhelming reasons to use Perl 6 rather than some other language?

[18:03] *** wk left
[18:03] *** jkeats_ left
[18:03] * diakopter blackogs

[18:04] <sjohnson> diakopter: hi

[18:06] <diakopter> hi

[18:13] <sjohnson> how's it going?

[18:14] *** Elizabeth_ joined
[18:14] *** risou is now known as risou_awy

[18:16] *** wk joined
[18:26] <[Coke]> moritz: is S05-mass/rx.t now legitimately unfudgable? 

[18:27] <[Coke]> (it's no longer crashing, just failing some tests (and passing some TODOs)

[18:34] *** jack-ji left
[18:39] *** slavik1 left
[18:40] * ingy types his first irc msg from oneiric ocelot

[18:41] <[Coke]> phenny: ask moritze if S05-mass/rx.t now legitimately unfudgable? (it's no longer crashing, just failing some tests (and passing some TODOs)

[18:41] <phenny> [Coke]: I'll pass that on when moritze is around.

[18:41] <[Coke]> phenny: ask moritz if S05-mass/rx.t now legitimately unfudgable? (it's no longer crashing, just failing some tests (and passing some TODOs)

[18:41] <phenny> [Coke]: I'll pass that on when moritz is around.

[18:42] *** PacoLinux left
[18:42] *** slavik1 joined
[18:42] <ingy> unity seems better than on natty

[18:42] <ingy> progress++

[18:42] * TimToady spent >< that much time futzing with unity before switching

[18:43] * ingy spent > < that much

[18:43] <ingy> TimToady: are you still on natty?

[18:44] <masak> why are you all doing Cartman impressions?

[18:44] <ingy> masak: wanna pair on a pugsbot?

[18:44] <masak> tempting. please specify task some more.

[18:45] <ingy> masak: masak you ssh into my server and join my screen session and we install pugs and p6eval

[18:46] <diakopter> ingy: what do you mean by pugsbot

[18:46] <ingy> pugs: say "fail"

[18:46] <p6eval> pugs: OUTPUT«sh: /home/p6eval/.cabal/bin/pugs: not found␤»

[18:46] <diakopter> surely that is fixable.

[18:46] <flussence> perl6: fail "say"

[18:46] <p6eval> niecza v10-44-g82a2206: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤     'fail' used at line 1␤␤␤Unhandled Exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 766 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1136 (STD P6.comp_unit @ 36) ␤…

[18:46] <p6eval> ..nom 3e66bd, b 1b7dd1:  ( no output )

[18:47] <TimToady> ingy: yes, but I hit the upgrade button > < minutes ago :)

[18:47] <masak> ingy: do you simply mean fixing p6eval?

[18:48] <masak> sounds easier than writing a whole new bot for Pugs.

[18:48] <TimToady> ingy: does the upgrade switch back to unity if you switched away?

[18:48] <ingy> TimToady: I'll give you a unity report next week

[18:48] <ingy> in person

[18:48] <moritz> [Coke]: yes, you can (un)fudge rx.t if you have the necessary patience :-)

[18:48] <phenny> moritz: 18:41Z <[Coke]> ask moritz if S05-mass/rx.t now legitimately unfudgable? (it's no longer crashing, just failing some tests (and passing some TODOs)

[18:49] <ingy> masak: moritz cannot install pugs on diakopter's machine and after 24 hours of investigation I am convinced it cannot easily be done

[18:49] <moritz> I've fudged out the missing <?before> and fixed up the evals, but didn't want to do the rest

[18:49] <ingy> masak: so moritz said we could just install p6eval elsewhere

[18:49] <masak> ah.

[18:50] <moritz> (at least a copy of p6eval that powers pugs)

[18:50] <masak> pugseval :)

[18:50] * ingy ♥ lightbulbs

[18:50] * ingy hates the default terminal font in unity

[18:52] <ingy> masak: if you are interested it should be really easy...

[18:52] <ingy> ™

[18:52] <diakopter> moritz: did you try installing older version of ghc?

[18:53] <masak> it sounds like fun but

[18:53] <masak> I'm afraid I don't have time to pair up tonight. :/

[18:53] <ingy> diakopter: moritz tried EVERYTHING

[18:53] <moritz> diakopter: yes; there pugs' dependencies don'T build

[18:53] <moritz> diakopter: I've tried 4 different GHC versions

[18:53] <ingy> it's an insane set of fail

[18:53] <masak> nice. I've never seen "don'T" before, but it kinda makes sense.

[18:53] *** Holy_Cow left
[18:53] <ingy> even au gives up

[18:54] <masak> ingy: but you installed Pugs locally, didn't you?

[18:54] <moritz> masak: it's the "shift key still pressed from typing '"

[18:55] <ingy> yes

[18:55] <moritz> masak: problem is that the kernel on p6eval's host is old-ish

[18:55] <masak> oh!

[18:55] <moritz> masak: and while GHC would probably build, but the GHC that is used for bootstrapping has been compiled a newer kernel...

[18:55] <ingy> haskell is having some growing pains

[18:56] <masak> upgrading the kernel not an option?

[18:56] <moritz> and has thus selected a newer version of a syscall which my old kernel doesn't help

[18:56] <diakopter> nope :(

[18:56] <moritz> masak: not so easy on a virtualized machine

[18:56] <masak> ah, right.

[18:56] <masak> sounds like Mr Different Server to the rescue, then.

[18:56] <ingy> moritz: which is fixed in 7.2, but then cabal fails, yes?

[18:57] <moritz> there's a fix for GHC, but it's on in The New Version (7.2)

[18:57] <moritz> but the rest of the toolchain doesn't work on 7.2

[18:57] <ingy> masak: let me set up my pair station

[18:57] <ingy> bbiab

[18:57] <moritz> (there's a big warning on the GHC download page that you should rather use 7.0.3. Which I can't. Thank you)

[18:58] <masak> ingy: I... I don't have time... :/

[18:59] <masak> ingy: I'm in the middle of doing some residual $dayjob and working on the macros branch and doing a thing with Niecza and looking for a new apartment...

[19:01] <ingy> ok

[19:03] <ingy> TimToady: gnome classic is not installed by default :)

[19:03] <ingy> TimToady: sudo apt-get install gnome-session-fallback

[19:03] <ingy> seems to be the trick

[19:03] *** kaleem left
[19:04] *** loloiiiijj left
[19:05] <ingy> masak: ping

[19:05] <masak> pong

[19:06] <[Coke]> moritz: it will be a welcome relaxation after working on CF all day.

[19:06] <ingy> masak: get back to doing some residual $dayjob and working on the macros branch and doing a thing with Niecza and  looking for a new apartment...

[19:06] <ingy> :)

[19:08] <masak> yeah...

[19:08] <masak> sorry for not being more available right now.

[19:08] <masak> it's fun to pair up with you, ingy :)

[19:09] <masak> I'm hoping we'll have some fun together in PugsClub in the near future.

[19:09] <ingy> TimToady: ironically (for some definition of ironic) when you try to install that it will try to get the flash plugin from a special url, because the flash plugin will fail during your upgrade, and that url is being ddossed at the moment, so have fun using your forced Unity trial :)

[19:10] <moritz> that's just because flash is nasty non-free software, and can't be distributed by Debian|Ubuntu directly

[19:10] <TimToady> well, I guess I'm gonna be helping with that ddos

[19:11] <moritz> sometimes I believe that RMS is more right than he has any right to be

[19:12] <TimToady> 'course, I use the noflash plugin...

[19:12] <sjohnson> someone from #gnu asked why a program i was working on wasn't free

[19:12] <TimToady> but it's still gonna try to install it, I'm sure

[19:12] <sjohnson> my answer:  cause i'd lose my job?

[19:13] <sjohnson> </gpl rant>

[19:13] <ingy> oh right, Unity takes over the Super key. Therefore useless...

[19:13] <tadzik> if you didn't have a job you'd have to eat stuff from your feet *SCNR*

[19:13] <TimToady> yes, that griped me last time

[19:14] <ingy> sjohnson: what's wrong with losing your job?

[19:15] <sjohnson> tadzik: if i didn't have a job...  （　｀ー´）would become -> (`-')

[19:15] <tadzik> :)

[19:15] <sjohnson> ingy: i'd die of starvation?

[19:15] <tadzik> that'd be sad

[19:15] <sjohnson> well, i don't think i'd die.

[19:15] <ingy> sjohnson: I doubt it

[19:15] <sjohnson> but i'd be in financial woe

[19:15] <sjohnson> i'm already broke enough as it is!

[19:17] <ingy> sjohnson: give away all your possessions and join the Cult of Perl 6

[19:17] <ingy> We hang out in airports

[19:17] <sjohnson> heh

[19:18] <masak> preaching about butteryflies

[19:18] <masak> argh

[19:18] <masak> battery flies.

[19:19] <sjohnson> showering ourseves with wet paper towels in the restrooms

[19:19] <sjohnson> ourselves*

[19:19] <masak> living the dream.

[19:20] <moritz> ingy: if you give away all of your posessions, how do you use Perl 6, without a computer? :-)

[19:21] <ingy> moritz: you think I'm using a computer?

[19:21] <slavik1> moritz: is a computer required to compile and use perl? why not do it in your head?

[19:21] <moritz> ingy: I'm pretty sure

[19:22] <moritz> slavik1: memory constraints :-)

[19:22] <ingy> tell me about it

[19:22] <slavik1> moritz: need more paper

[19:22] <moritz> ingy: how do you use IRC, without any form of computer?

[19:22] <ingy> oneiric has 5.12.4

[19:22] <masak> moritz: abacus.

[19:22] <tadzik> fair enough, I'm staying on arch

[19:23] *** envi_ left
[19:24] <ingy> moritz: it's hard to explain... very mystical...

[19:25] <GlitchMr> niecza> Bool::False::False

[19:25] <GlitchMr> Funny merge failure ::CORE:30::False (Bool, False)

[19:25] <GlitchMr> lolwhat?

[19:25] <GlitchMr> niecza: Bool::False::False

[19:25] <p6eval> niecza v10-44-g82a2206: OUTPUT«␤Unhandled Exception: Funny merge failure ::CORE:30::False (Bool, False)␤  at  line 0 (boot-MAIN @ 0) ␤  at  line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 766 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/NieczaBackendDotnet.…

[19:25] <GlitchMr> rakudo: Bool::False::False

[19:25] <p6eval> rakudo 3e66bd: OUTPUT«===SORRY!===␤Confused at line 1, near "Bool::Fals"␤»

[19:25] <GlitchMr> ...

[19:25] <GlitchMr> std: Bool::False::False

[19:25] <p6eval> std 580b69a: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared name:␤    'Bool::False::False' used at line 1␤Check failed␤FAILED 00:01 118m␤»

[19:25] <GlitchMr> perl6: Bool::False::False

[19:25] <p6eval> niecza v10-44-g82a2206: OUTPUT«␤Unhandled Exception: Funny merge failure ::CORE:30::False (Bool, False)␤  at  line 0 (boot-MAIN @ 0) ␤  at  line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 766 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/NieczaBackendDotnet.…

[19:25] <p6eval> ..b 1b7dd1: OUTPUT«Cannot find sub Bool::False::False␤  in main program body at line 1:src/metamodel/RoleToInstanceApplier.nqp␤»

[19:25] <p6eval> ..nom 3e66bd: OUTPUT«===SORRY!===␤Confused at line 1, near "Bool::Fals"␤»

[19:26] <GlitchMr> OK...

[19:26] <ingy> TimToady: I survived the ddos

[19:26] <ingy> brb

[19:27] <TimToady> "Funny merge failure" is a funny error message :)

[19:27] <sjohnson> is Fals on purpose?

[19:27] <TimToady> but I imagine it really means "failure to unify different notions of global"

[19:27] <moritz> niecza seems to full of those

[19:27] <sjohnson> 4 letter opposite of True?

[19:28] <moritz> slavik1: there is no Fals,  except where 'False' was cut off

[19:28] <moritz> erm sorry, meant sjohnson 

[19:28] <masak> "C3 wedgie"!

[19:28] <sjohnson> :)

[19:28] <sjohnson> oic

[19:28] <GlitchMr> perl6: /[([])]/

[19:28] <moritz> masak: that's the one I was thikning of

[19:28] <p6eval> nom 3e66bd: OUTPUT«===SORRY!===␤Unrecognized regex metacharacter (must be quoted to match literally) at line 1, near ")]/"␤»

[19:28] <p6eval> ..niecza v10-44-g82a2206: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Null pattern not allowed at /tmp/EUMfm0n7pI line 1:␤------> [32m/[([[33m⏏[31m])]/[0m␤␤Parse failed␤␤»

[19:28] <p6eval> ..b 1b7dd1: OUTPUT«===SORRY!===␤Confused at line 22, near "/[([])]/"␤»

[19:29] <TimToady> niecza has that one nailed

[19:30] <moritz> aye

[19:30] <GlitchMr> perl6: Bool->new

[19:30] <masak> worth rakudobug reporting?

[19:30] <p6eval> niecza v10-44-g82a2206: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unsupported use of -> as postfix; in Perl 6 please use either . to call a method, or whitespace to delimit a pointy block at /tmp/1g4FWnF5xg line 1:␤------> [32mBool->[33m⏏[31mnew[0m␤␤Parse failed␤␤»

[19:30] <p6eval> ..b 1b7dd1: OUTPUT«===SORRY!===␤Unsupported use of -> as postfix; in Perl 6 please use either . to call a method, or whitespace to delimit a pointy block at line 22, near "new"␤»

[19:30] <p6eval> ..nom 3e66bd: OUTPUT«===SORRY!===␤Unsupported use of -> as postfix; in Perl 6 please use either . to call a method, or whitespace to delimit a pointy block at line 1, near "new"␤»

[19:30] <TimToady> not really

[19:30] <moritz> masak: nope, known

[19:30] <GlitchMr> ... ok...

[19:30] <GlitchMr> perl6: Bool.new

[19:30] <p6eval> nom 3e66bd, b 1b7dd1, niecza v10-44-g82a2206:  ( no output )

[19:30] <TimToady> it's just the Non-convergence-with-STD bug

[19:30] <moritz> masak: nqp/rakudo don't really recognize null patterns

[19:31] <TimToady> perl6: say Bool.new

[19:31] <p6eval> nom 3e66bd, b 1b7dd1, niecza v10-44-g82a2206: OUTPUT«Bool::False␤»

[19:31] <GlitchMr> Think negatively... with new falses!

[19:31] <TimToady> ooh, widespread agreement for something completely unspecced!

[19:32] <moritz> TimToady: exactly my thought :-)

[19:32] <GlitchMr> I was trying to do .new just because of Perl 5 :P.

[19:33] <GlitchMr> I was wondering of reaction for this...

[19:33] <moritz> probably because an Int holding the boolean value internally is initlialized to 0 or so

[19:33] <ingy> TimToady: they seem to have made gnome classic feel really crappy

[19:33] <ingy> it's definitely not the same

[19:33] <TimToady> GlitchMr: but Perl 5 has no Bool type, so I don't know what you were expecting :)

[19:33] <GlitchMr> Well, it's object :P

[19:33] <moritz> what does it object to?

[19:34] <masak> TimToady: it's spec'd implicitly.

[19:34] <GlitchMr> So I was wondering what would happen if I would do .new on it

[19:34] <masak> Bool::False is isomorphic to 0, the default default.

[19:34] <ingy> TimToady: you should study ubuntu's techniques to push people from Perl Classic to Perl Unity\w6

[19:34] <GlitchMr> perl6: Int.new

[19:34] <GlitchMr> perl6: say Int.new

[19:34] <GlitchMr> right...

[19:34] <masak> Perl Plurality

[19:35] <p6eval> nom 3e66bd, b 1b7dd1, niecza v10-44-g82a2206:  ( no output )

[19:35] <p6eval> niecza v10-44-g82a2206: OUTPUT«␤Unhandled Exception: System.InvalidCastException: Cannot cast from source type to destination type.␤  at Niecza.CtxIntStr.Get (Niecza.Variable obj) [0x00000] in <filename unknown>:0 ␤  at Niecza.CtxBoxify`1[System.String].Get (Niecza.Variable obj) [0x0000…

[19:35] <p6eval> ..nom 3e66bd, b 1b7dd1: OUTPUT«0␤»

[19:35] <GlitchMr> ...?

[19:35] <GlitchMr> It's ok for Niecza until it has to actually say it... O_o

[19:35] <masak> GlitchMr: when you don't spell out your questions, it's hard to know what you're asking.

[19:35] <masak> yeah, that's odd.

[19:35] <GlitchMr> I'm actually surprised about it

[19:36] <masak> maybe it's evaluating lazily.

[19:36] <masak> :)

[19:36] <masak> niecza: Int.new; say "alive"

[19:36] <p6eval> niecza v10-44-g82a2206: OUTPUT«alive␤»

[19:36] <masak> huh.

[19:36] <moritz> niecza: Int.new.gist; say 'alive'

[19:36] <GlitchMr> masak, you're not using that value

[19:36] <masak> niecza: my $a = Int.new; say "alive"

[19:36] <TimToady> perl6: say 1 + '2x'

[19:36] <p6eval> niecza v10-44-g82a2206: OUTPUT«␤Unhandled Exception: System.InvalidCastException: Cannot cast from source type to destination type.␤  at Niecza.CtxIntStr.Get (Niecza.Variable obj) [0x00000] in <filename unknown>:0 ␤  at Niecza.CtxBoxify`1[System.String].Get (Niecza.Variable obj) [0x0000…

[19:36] <p6eval> niecza v10-44-g82a2206: OUTPUT«Potential difficulties:␤  $a is declared but not used at /tmp/1YdrBdc5NW line 1:␤------> [32mmy [33m⏏[31m$a = Int.new; say "alive"[0m␤␤alive␤»

[19:36] <p6eval> niecza v10-44-g82a2206: OUTPUT«␤Unhandled Exception: System.FormatException: Unknown char: x␤  at System.Double.Parse (System.String s, NumberStyles style, IFormatProvider provider) [0x00000] in <filename unknown>:0 ␤  at System.Double.Parse (System.String s, IFormatProvider provider) […

[19:36] <p6eval> ..nom 3e66bd: OUTPUT«No applicable candidates found to dispatch to for 'Numeric'. Available candidates are:␤:(Mu, Mu %_)␤␤  in method Numeric at src/gen/CORE.setting:601␤  in sub infix:<+> at src/gen/CORE.setting:1941␤  in sub infix:<+> at src/gen/CORE.setting:1941␤  in block <anon> at /t…

[19:36] <p6eval> ..b 1b7dd1: OUTPUT«3␤»

[19:36] <masak> ah :)

[19:37] <GlitchMr> It's ok to do 1 + '2x'... until you have some weird characters

[19:37] <moritz> nom doesn't really handle failures gracefully

[19:37] <GlitchMr> "x" is unexpected... weird...

[19:37] <TimToady> and niecza doesn't handle it at all :)

[19:37] <moritz> do you expect an 'x' when parsing a string as a number?

[19:37] <GlitchMr> Nope

[19:38] *** PacoLinux joined
[19:38] <moritz> so why do you find it weird that x is unexpected?

[19:38] <GlitchMr> C:\Users\Konrad\Desktop\run\run>php

[19:38] <GlitchMr> <?php echo 1 + '2x';

[19:38] <GlitchMr> ^Z

[19:38] <GlitchMr> 3

[19:38] <GlitchMr> But that's probably not reason

[19:38] <GlitchMr> Strict typing is better :).

[19:38] <PerlJam> GlitchMr: this is #perl6, not #php6  :)

[19:38] <GlitchMr> lol

[19:39] <GlitchMr> There is no PHP 6 :P.

[19:39] <GlitchMr> That was PHP 5.3.8...

[19:40] <GlitchMr> Perl 5 also does it like PHP

[19:40] <ingy> TimToady: I feel like gnome has been made non-acceptable option. So looks like I'll have to futz >               <

[19:40] <GlitchMr> But then, I'm not sure if it's good

[19:40] <GlitchMr> And PHP was made for parsing data coming from Internet which might be intentionally invalid to make errors.

[19:40] <ingy> TimToady: I'll be interested to get your take

[19:41] <GlitchMr> So yeah...

[19:41] <GlitchMr> Except Perl 5 seems to make warnings in strict mode

[19:41] <GlitchMr> Argument "2x" isn't numeric in addition (+) at - line 1.

[19:41] <GlitchMr> 3

[19:41] <GlitchMr> So yeah....

[19:41] <GlitchMr> PHP doesn't care...

[19:41] <moritz> warnings and strict are orthogonal

[19:42] <moritz> wow, cabal seems to repeat the mistakes from CPAN.pm

[19:42] <moritz> Pugs-6.2.13.20111008 depends on haskeline-0.6.4.3 which failed to install.

[19:42] <moritz> haskeline-0.6.4.3 failed during the building phase. The exception was:

[19:42] <moritz> ExitFailure 1

[19:42] <GlitchMr> PHP is probably only programming language which doesn't care at all about 1 + '2x';...

[19:42] <PerlJam> yet warnings and strict always seem to be mentioned in the same utterance ;)

[19:42] <moritz> so it caches build failures, but doesn't tell me what went wrong the last time

[19:43] <PerlJam> moritz: it doesn't write a log somewhere?

[19:43] <masak> PerlJam: that's because they're both good ideas, not because they're the same idea :)

[19:43] <moritz> PerlJam: dunno. If it does, it doesn't tell me about it

[19:43] <PerlJam> masak: sure ... like PB&J or beans & rice or pots & kettles  :)

[19:50] *** kaare_ left
[19:52] <masak> PerlJam: I had to look up "PB&J". you must be from the US. :P

[19:54] <PerlJam> masak: stroopwafels & icing then ?

[19:54] <PerlJam> (what goes with stroopwafels?)

[19:54] <PerlJam> masak: nah, I'm not from the US ... I'm from Texas  ("it's like a whole other country" according to the tourism ads I see on TV)

[19:54] * TimToady misses BLTs

[19:55] <TimToady> Texans *think* they are from a different country, but Californians really are...

[19:55] <masak> PerlJam: do they say "whole other" or "whole 'nother"? the latter sounds more genuine to my ears.

[19:56] <ingy> TimToady: Gnome will be going the way of the BLT for you very soon

[19:56] <PerlJam> masak: you know ... I'm not really sure.  I never listen that closely

[19:56] <TimToady> in which case I will preach dis-unity with Ubuntu

[19:56] <ingy> I for one welcome our new Unity overlords :\

[19:56] <ingy> actually it's not called Unity anymore

[19:57] <ingy> it's called Ubuntu

[19:57] <ingy> hmm

[19:57] <ingy> what does that remind me of...

[19:57] <PerlJam> masak: http://www.traveltex.com/  "It's like a whole other country"  (at least in print ;)

[19:57] <ingy> begins with a P, I think

[19:57] <TimToady> maybe I should cancel my upgrade

[19:57] <ingy> TimToady: not a bad idea

[19:58] <PerlJam> unity -- just counting the number of people that actually like it

[19:58] <ingy> you will not have what you had before, and it seems to have thrown away many settings

[19:58] <ingy> gnome is ass

[19:58] <masak> PerlJam: :)

[19:59] <ingy> Uwhatever is the only way to go

[19:59] <masak> PerlJam: I think it's mostly in spoken language that it happens. or written language wanting to mimic spoken language.

[19:59] <ingy> but I'm already tripping and applying bandaids

[19:59] <awwaiid> xmonad works pretty good in ubuntu :)

[20:00] <ingy> then again, that's the spirit of Perl 6 in general

[20:00] <TimToady> ah well, Ubuntu was good while it lasted

[20:00] <awwaiid> (but I switched back to debian in protest anyway)

[20:01] <ingy> TimToady: the new stuff looks a whoole lot better than 6 months ago

[20:01] <ingy> kinda like Perl 6

[20:01] <TimToady> I'll let other people guinea pig it for me

[20:01] <TimToady> not interested in losing my key mappings

[20:02] <ingy> I didn't lose all of them :)

[20:03] *** kfo_ joined
[20:05] <TimToady> bbl &

[20:05] <djanatyn> rd                                                                 |<automatous> exit                                                       [13:01]

[20:05] <djanatyn> Ermm, sorry about that.

[20:07] *** kfo left
[20:07] <diakopter> at least it was only one line :D

[20:08] *** GlitchMr left
[20:09] <djanatyn> yep :)

[20:14] <dalek> specs: 1770286 | diakopter++ | S05-regex.pod:

[20:14] <dalek> specs: S05 typo

[20:14] <dalek> specs: review: https://github.com/perl6/specs/commit/177028647d

[20:14] *** Kivutarrr left
[20:15] *** huf left
[20:18] *** wamba left
[20:24] *** huf joined
[20:24] *** PZt left
[20:24] *** djanatyn is now known as secret-djan

[20:25] *** secret-djan is now known as djanatyn

[20:32] *** wamba joined
[20:32] *** wamba left
[20:34] *** soh_cah_toa joined
[20:35] *** Lma joined
[20:37] <[Coke]> S05-mass/rx.t is slooow

[20:45] *** dual joined
[20:53] <masak> [Coke]: probably not unusually slow, just the single largest test file in roast.

[20:53] <ingy> sudo apt-get install compizconfig-settings-manager

[20:53] <ingy> sorry

[20:53] <ingy> but you WILL need that

[20:53] <masak> :)

[20:53] <ingy> so, you're welcome ;)

[20:54] <ingy> I almost got things back to normal except I can't stop Super+t opening trash

[20:54] <ingy> I use super for all my term settings

[20:55] <ingy> so super+t opens tab

[20:55] <ingy> oh well

[20:56] <ingy> super+cntl+t for now

[20:57] *** saaki joined
[20:59] *** wamba joined
[21:07] *** lateau_ left
[21:12] *** wamba left
[21:13] *** PZt joined
[21:16] *** mj41 joined
[21:19] *** bluescreen10 left
[21:20] <im2ee> Dobranoc! :)

[21:20] <im2ee> o/

[21:20] *** mj41 left
[21:20] *** im2ee left
[21:25] <saaki> reception supposed to start at 2:30, but there's already like 20 people here

[21:25] <saaki> oops

[21:27] *** wamba joined
[21:29] *** wk left
[21:31] *** mj41 joined
[21:40] *** bluescreen10 joined
[21:40] *** Mowah_ left
[21:43] <soh_cah_toa> perl6: say $?FILE

[21:43] <phenny> soh_cah_toa: 11 Oct 05:55Z <moritz> tell soh_cah_toa that source_url in https://raw.github.com/soh-cah-toa/p6-digest-sha256/master/META.info points to the old repo name (without the p6- prefix)

[21:43] <p6eval> b 1b7dd1: OUTPUT«===SORRY!===␤Symbol '$?FILE' not predeclared in <anonymous> (/tmp/MxUFFgiRRD:22)␤»

[21:43] <p6eval> ..nom 3e66bd: OUTPUT«===SORRY!===␤Symbol '$?FILE' not predeclared in <anonymous> (/tmp/l8gVicUfia:1)␤»

[21:43] <p6eval> ..niecza v10-44-g82a2206: OUTPUT«/tmp/U5JBE8cATX␤»

[21:45] <soh_cah_toa> lame...

[21:45] *** tyatpi_ left
[21:45] <colomon> huh.  it gave you the result in all three, but spurious warnings in both rakudo versions?

[21:46] *** wamba left
[21:47] *** Lma_ joined
[21:47] *** Lma_ left
[21:47] *** dorlamm joined
[21:48] *** wolfman2000 joined
[21:49] <masak> well, I got residual $dayjob and apartment search done today. at least that's something ;)

[21:50] <masak> tomorrow I'll do some Perl 6, I promise.

[21:50] <masak> 'night, batteryflies.

[21:50] *** Lma left
[21:54] *** wamba joined
[21:58] *** wamba left
[22:00] *** wamba joined
[22:00] *** wamba left
[22:02] *** wamba joined
[22:04] *** cognominal_ joined
[22:04] *** jevin left
[22:05] *** mj41 left
[22:06] <soh_cah_toa> phenny: tell moritz good eye. i took care of it. thanks :)

[22:06] <phenny> soh_cah_toa: I'll pass that on when moritz is around.

[22:07] *** cognominal left
[22:12] *** aqz left
[22:14] *** jevin joined
[22:15] *** mikemol left
[22:15] *** Exodist left
[22:16] *** mikemol joined
[22:16] *** aqz joined
[22:17] *** Exodist joined
[22:21] *** benabik left
[22:24] <diakopter> niecza: print "{ "foo" ~~ /f(<perl>)o/ }"

[22:24] <p6eval> niecza v10-44-g82a2206: OUTPUT«␤Unhandled Exception: System.InvalidCastException: Cannot cast from source type to destination type.␤  at RxFrame.IncorporateChild (System.String[] names, Boolean passcap, Niecza.P6any match) [0x00000] in <filename unknown>:0 ␤  at RxFrame.IncorpShift (Sys…

[22:24] *** colomon left
[22:34] *** floyy joined
[22:36] *** whiteknight joined
[22:37] <dalek> roast: a3f34bf | Coke++ | S05-mass/rx.t:

[22:37] <dalek> roast: rakudo fudging

[22:37] <dalek> roast: review: https://github.com/perl6/roast/commit/a3f34bf290

[22:37] *** donri left
[22:38] * [Coke] fudges S05-mass/rx.t

[22:38] <dalek> rakudo/nom: ce15be4 | Coke++ | t/spectest.data:

[22:38] <dalek> rakudo/nom: run fudged test

[22:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ce15be4ee5

[22:43] <diakopter> phenny: ask TimToady is the following supposed to work (S05 Named scalar aliasing to subpatterns) std: "foo" ~~ ms/ $<key>=( f o o ) /; say $/<key> 

[22:43] <phenny> diakopter: I'll pass that on when TimToady is around.

[22:44] *** tokuhiro_ joined
[22:50] *** replore left
[22:51] <sjohnson> bc == BNU Calculator

[22:52] *** sivoais left
[22:53] *** donri joined
[22:53] *** wolfman2_ joined
[22:56] *** wolfman2000 left
[22:57] *** dorlamm left
[23:01] *** wamba left
[23:07] *** DarthGandalf left
[23:09] *** bluescreen100 joined
[23:13] *** DarthGandalf joined
[23:16] *** lestrrat left
[23:17] *** lestrrat joined
[23:17] *** soh_cah_toa left
[23:19] <diakopter> std: "foo" ~~ rx<a>

[23:19] <p6eval> std 580b69a: OUTPUT«ok 00:01 122m␤»

[23:26] *** Tene left
[23:26] *** Tene joined
[23:26] *** Tene left
[23:26] *** Tene joined
[23:26] *** djanatyn left
[23:27] *** djanatyn` joined
[23:28] <TimToady> this vv can't work because identifiers can't have spaced in 'em

[23:28] <phenny> TimToady: 22:43Z <diakopter> ask TimToady is the following supposed to work (S05 Named scalar aliasing to subpatterns) std: "foo" ~~ ms/ $<key>=( f o o ) /; say $/<key> 

[23:28] <TimToady> *spaces

[23:29] <diakopter> std: ms/ $<key>=( (<[A..E]>) (\d**3..6) (X?) ) /; # ok I'll paste the example exactly

[23:29] <p6eval> std 580b69a: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row at /tmp/p8by_hMWLE line 1:␤------> [32mms/ $<key>=( (<[A..E]>) [33m⏏[31m(\d**3..6) (X?) ) /; # ok I'll paste the[0m␤    expecting any of:␤    bracketed infix␤        infix or meta-infix␤    statement modifier loop␤Undeclared

[23:29] <p6eval> ..r…

[23:30] <diakopter> (that's what it has in S05)

[23:34] *** cognominal joined
[23:35] *** cognominal_ left
[23:48] *** jkeats_ joined
[23:49] *** Elizabeth_ left
[23:50] *** Trashlord joined
[23:54] <TimToady> probably shouldn't be an ms

[23:55] *** jkeats_ left
[23:55] *** Trashlord left
[23:55] <diakopter> what's an ms

[23:56] <TimToady> m:s

[23:56] <diakopter> match sigspace?

[23:56] <TimToady> nod

[23:56] <diakopter> whee; I might actually learn S05 this time through

[23:57] *** Trashlord joined
[23:57] *** Trashlord is now known as Guest34898

[23:58] <diakopter> what does "match null before a letter, don't capture" in S05 mean

[23:58] <diakopter> for "A leading ? ..."

[23:59] *** wolfman2_ left
[23:59] *** shinobicl_ joined
[23:59] <diakopter> is that like ?= ?

[23:59] <TimToady> means it's a 0-width assertion, and doesn't end up in $<alpha>

