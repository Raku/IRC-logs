[00:11] *** soh_cah_toa joined
[00:26] *** felher left
[00:35] *** ZaphrodZenovka joined
[00:37] *** whiteknight left
[00:40] *** whiteknight joined
[01:05] *** daniel-s joined
[01:08] *** jaldhar joined
[01:14] *** LimitSupremum joined
[01:30] *** yotta joined
[01:30] *** whiteknight left
[01:31] *** whiteknight joined
[01:31] *** felher joined
[01:32] <yotta> rakudo: say 37 + 5

[01:32] <p6eval> rakudo 922500: OUTPUT«42␤»

[01:34] <felher> [Coke]: Hope i didn't miss anything. The weechat-server just crashed.

[01:36] <felher> well, whatever. Its far to late (or early). good night #perl6

[01:39] *** yotta left
[01:43] *** [Coke] left
[01:46] *** whiteknight left
[01:51] *** woosley joined
[01:51] *** [Coke] joined
[01:57] *** Guest71835 left
[02:02] *** LimitSupremum left
[02:21] *** Trashlord left
[02:33] *** tokuhirom joined
[02:47] *** Trashlord joined
[02:52] *** Alias joined
[02:53] *** JimmyZ joined
[02:54] *** JimmyZ left
[02:54] *** tokuhirom left
[03:09] *** agentzh joined
[03:10] *** jaldhar left
[03:10] *** uniejo_in_riga joined
[03:10] *** jaldhar joined
[03:14] *** uniejo_in_riga left
[03:23] *** Su-Shee_ joined
[03:25] *** Su-Shee left
[03:28] *** jaldhar left
[03:44] *** soh_cah_toa left
[03:47] *** worr left
[03:48] *** worr joined
[03:59] *** Chillance left
[03:59] *** kaare_ joined
[04:01] *** uniejo_in_riga joined
[04:01] *** noganex left
[04:03] *** null- joined
[04:04] *** noganex joined
[04:05] *** LimitSupremum joined
[04:10] *** JimmyZ joined
[04:15] *** bluescreen10 left
[04:17] *** uniejo_in_riga left
[04:21] *** uniejo_in_riga joined
[04:24] *** crked left
[04:39] *** JimmyZ left
[04:47] *** uniejo_in_riga left
[04:47] *** null- left
[04:52] <dalek> 6model: d50b8cb | (Martin Berends)++ | c/ (7 files):

[04:52] <dalek> 6model: [6model/c] begin performance testing OpenMP threads

[04:52] <dalek> 6model: review: https://github.com/jnthn/6model/commit/d50b8cbd29

[04:53] *** uniejo_in_riga joined
[05:01] *** JimmyZ joined
[05:04] <JimmyZ> good afternoon

[05:06] *** uniejo_in_riga left
[05:08] *** chadadavis joined
[05:16] *** tokuhirom joined
[05:22] *** masak joined
[05:22] <masak> morning, #perl6

[05:23] *** takadonet1 joined
[05:23] <takadonet1> hello all

[05:23] <JimmyZ> morning, #perl6

[05:23] <mberends> \o/

[05:23] <takadonet1> nom: my Rat $x; my $a;$a+=$x;

[05:23] <p6eval> nom: OUTPUT«Cannot access attributes in a type object␤  in method denominator at src/gen/CORE.setting:1062␤  in sub infix:<+> at src/gen/CORE.setting:4748␤  in mu <anon> at /tmp/lW3tRkGVeS:1␤  in mu <anon> at /tmp/lW3tRkGVeS:1␤␤»

[05:23] <takadonet1> bug?

[05:24] * takadonet1 looks at masak

[05:24] *** agentzh left
[05:25] <pmichaud> good morning, #perl6

[05:25] <JimmyZ> rakudo: my Rat $x; my $a;$a+=$x;

[05:25] <p6eval> rakudo 922500: OUTPUT«Type objects are abstract and have no attributes, but you tried to access $!denominator␤  in 'infix:<+>' at line 4286:src/gen/core.pm␤  in main program body at line 1:src/metamodel/RoleToInstanceApplier.nqp␤»

[05:25] <mberends> good morning pmichaud

[05:26] <takadonet1> pmichaud: morning

[05:26] <pmichaud> nom:  my Rat $x; my $a;  $a += $x;

[05:26] <p6eval> nom: OUTPUT«Cannot access attributes in a type object␤  in method denominator at src/gen/CORE.setting:1062␤  in sub infix:<+> at src/gen/CORE.setting:4748␤  in mu <anon> at /tmp/t4H9IHRT7C:1␤  in mu <anon> at /tmp/t4H9IHRT7C:1␤␤»

[05:27] <pmichaud> probably need some :D's

[05:28] *** uniejo_in_riga joined
[05:29] <JimmyZ> nom: class A { method BUILD { say 'hi' }; method m1() { say 42 }; method m2() { say 49 }; }; A.m1; A.m2  #bug ?

[05:29] <p6eval> nom: OUTPUT«42␤49␤»

[05:30] <jnthn> morning, #perl6

[05:30] <pmichaud> JimmyZ: I see no bug there.

[05:30] <takadonet1> jnthn: morning

[05:30] <JimmyZ> perl jnthn++'s blog, BUILD is looked up

[05:30] <pmichaud> BUILD should normally be a submethod, and it's only used when creating a new instance iiuc

[05:30] <jnthn> JimmyZ: You didn't make an instance.

[05:31] <jnthn> JimmyZ: It is *looked up* at class composition time, but not executed. :)

[05:31] <mberends> morning jnthn # amazing time of day for you to be awake

[05:31] <JimmyZ> jnthn: I thought it also executed 

[05:31] <jnthn> mberends: Timezone change ;)

[05:31] <mberends> ;)

[05:31] <jnthn> JimmyZ: No. :)

[05:31] <JimmyZ> btw: morning jnthn pmichaud   masak :)

[05:33] <jnthn> heh, I thought I was up before masak....alas, no :)

[05:34] <JimmyZ> what's the subject of Perl 6 hackathon‎ today?

[05:34] <pmichaud> my subject is improving parsing speed

[05:35] <mberends> jnthn, pmichaud: could I please queue a hackathon request to look at Zavolaj/nom?  Even an API change if it helps get it working, and maybe some callback?  I'm around all day for testing.

[05:35] <pmichaud> I can look at zavolaj a bit

[05:35] <mberends> thanks

[05:35] <pmichaud> some of the new features added since the spring should make it possible to be more robust

[05:36] * jnthn can give tuits to Zavolaj also :)

[05:36] <jnthn> I'm guessing at this point it really doesn't work on nom at all...

[05:37] <pmichaud> likely not

[05:37] <pmichaud> but I'm thinking it shouldn't take too much to update

[05:37] <jnthn> maybe not

[05:37] * mberends can test Zavolaj on OS X as well thanks to bbkr_++

[05:37] <jnthn> It does do great evil )

[05:38] *** agentzh joined
[05:39] <masak> jnthn, pmichaud: a quick shave and then I'm ready for breakfast.

[05:39] * jnthn is ready in 5-10 

[05:39] <pmichaud> I'm ready when you two are.

[05:39] * JimmyZ would like to see giving some love to Link-C module too

[05:39] * pmichaud reviews zavolaj

[05:46] <jnthn> hmmm.

[05:46] <jnthn> :)

[05:48] <masak> JimmyZ: 'see some love given to'. :)

[05:48] *** worr left
[05:49] <masak> gerunds don't seem to like being direct objects in English.

[05:49] *** worr joined
[05:49] * jnthn has no problem with "giving some love to" :P

[05:49] <jnthn> oh, but maybe not afer "see" :)

[05:50] <jnthn> Too early to grammar.

[05:50] <masak> jnthn: I'd like to see writing like that! :P

[05:50] * JimmyZ always abuses english grammar

[05:51] <masak> JimmyZ++ # keep doing it

[05:51] * masak pops up to jnthn and pmichaud who are one floor abuv

[05:52] <jnthn> frukost \o/

[05:53] <JimmyZ> is there a way to submit a english bug when I abused grammar and found a bug?

[05:53] <jnthn> bbiab

[05:55] <mberends> JimmyZ: yes, http://engrishfunny.failblog.org/

[05:57] <JimmyZ> mberends:  hah, there is some chinese there

[06:00] <JimmyZ> "NO NOTHING" :(

[06:00] <takadonet1> nom: my @x=<1 2 3>;my @y = <4 5 6>; say @x >>*<< @y;

[06:00] <p6eval> nom: OUTPUT«Use of uninitialized value in numeric context␤Use of uninitialized value in numeric context␤4 10 18␤»

[06:01] <takadonet1> i'm missing something ?

[06:01] <JimmyZ> rakudo: my @x=<1 2 3>;my @y = <4 5 6>; say @x >>*<< @y;

[06:01] <p6eval> rakudo 922500: OUTPUT«41018␤»

[06:02] <takadonet1> nom issue then?

[06:03] <JimmyZ> I am not sure

[06:03] *** araujo left
[06:03] <takadonet1> well sleep time. Hopefully someone can take a look

[06:17] *** wamba joined
[06:18] <LimitSupremum> how exactly does autovivification work?

[06:22] <mberends> LimitSupremum: http://en.wikipedia.org/wiki/Autovivification for what it means to your program, but the source code is the documentation for the guts

[06:22] *** woosley left
[06:23] <LimitSupremum> read the wiki... was wondering exactly how it works

[06:23] <LimitSupremum> and I suppose why it isn't more universal

[06:24] <TimToady> well, it's kinda hard, which explains why it isn't more universal

[06:24] <phenny> TimToady: 12 Aug 20:54Z <diakopter> ask TimToady STD doesn't seem to parse Blob literals (S02), but pugs does

[06:24] <phenny> TimToady: 12 Aug 21:41Z <diakopter> tell TimToady try  std: say Q :regex /a/

[06:25] <JimmyZ> \o/, compile core setting takes 600MB memory 

[06:25] <TimToady> basically you have to track whether something is an lvalue, and if the lvalue is something that doesn't exist yet, arrange to create it before it's too late

[06:26] <TimToady> by itself, that is not hard

[06:26] <TimToady> but if it includes the "path" to the new value, that path has to be created as well

[06:27] <TimToady> so it's like saying make a file in Unix called /foo/bar/baz, and not only does baz not exist, but foo and bar have to be created as well

[06:27] *** uniejo_in_riga left
[06:28] <TimToady> this is even harder in Perl 6, where we don't necessarily know whether something will be an lvalue at compile time

[06:28] <TimToady> so we arrange to do the autoviv lazily, when it's actually needed

[06:31] <LimitSupremum> that does sound tricky...

[06:31] <LimitSupremum> yikes

[06:32] <TimToady> but it's one of the areas where we torment the implementors on behalf of the users :)

[06:33] <mberends> :)

[06:34] <LimitSupremum> so, take the example wikipedia gives with the four nested hashes

[06:34] <LimitSupremum> it isn't perl 6, but whatever

[06:35] <LimitSupremum> how much of that would actually have to be created?

[06:35] <LimitSupremum> if other values are never added to the hashes

[06:36] <mberends> every part of the path

[06:36] <LimitSupremum> ah

[06:36] <mberends> think of the Unix 'mkdir -p' command, it's similar

[06:44] <masak> except that it's more like a `touch` which causes an `mkdir -p`.

[06:46] * masak --> hackathon

[06:46] * TimToady too

[06:46] *** masak left
[06:50] *** chadadavis left
[06:55] <jnthn> hackathon! \o/

[06:56] * mberends is there, virtually o/

[06:56] <jnthn> :)

[06:57] <pmichaud> hello from the hackathon

[06:59] *** masak joined
[06:59] *** uniejo_in_riga joined
[07:00] <lue> hello world, for a moment o/

[07:02] * lue wonders for a moment where the hackathon is

[07:03] <baest> lue: here :)

[07:03] <sorear> lue: riga

[07:03] <sorear> and I'm *not* there

[07:03] <baest> sorear: :(

[07:06] *** JimmyZ left
[07:11] *** kolyuchiy joined
[07:14] *** wk joined
[07:16] *** im2ee joined
[07:18] <tadzik> hello zebras and hackathonees

[07:18] <sorear> hello tadzik

[07:20] <lue> blag toast!  https://rdstar.wordpress.com/2011/08/13/beginning-notes-for-the-perl-6-type-hierarchy/

[07:25] *** imarcusthis joined
[07:25] * masak ponders the difference between hackathoners and hackathonees

[07:26] * uniejo_in_riga wonders if the comparison in method min should be $cmp($_, $min)  in src/core/Any.pm - ditto for max

[07:27] * masak looks

[07:29] *** thou left
[07:29] <tadzik> The list of Most Wanted modules, for hackathoners looking for something to jump into: https://github.com/perl6/ecosystem/wiki/Most-Wanted-Modules

[07:29] *** saaki joined
[07:30] <masak> uniejo_in_riga: I don't really see which method/file/branch you're referring to. url?

[07:30] <pmichaud> http://rakudo.org/how-to-get-rakudo-nom/  # notes for downloading and building nom

[07:31] <masak> also, tadzik and I have a Perl 6 game/AI project that welcomes one or more volunteers. ping us or ask us if you're intrigued by this.

[07:32] <uniejo_in_riga> masak: in nom. Downloads and checks.

[07:32] <masak> uniejo_in_riga: I'm looking at Any.min in nom now: https://github.com/rakudo/rakudo/blob/nom/src/core/Any.pm#L46

[07:32] <masak> but I don't see what you mean.

[07:33] <tadzik> or if you feel like playing a board game :)

[07:33] <masak> yes, we have a meatspace version of it as well.

[07:34] <lue> tadzik: you just gave me a list of fun ideas. Must mull over them as I go to bed. goodnight all o/

[07:34] <uniejo_in_riga> masak: src/core/Any.pm line 50

[07:35] <masak> uniejo_in_riga: in nom? in master?

[07:35] *** chadadavis joined
[07:35] <uniejo_in_riga> masak: in nom. The compare uses cmp instead of the user supplied $cmp

[07:36] <mberends> .oO( meatspace on the little farm - not for your sensitive children )

[07:36] <masak> oh!

[07:36] <tadzik> lue: gnite!

[07:36] <masak> uniejo_in_riga: yes, I see it now. sorry for being a bit pre-coffee :)

[07:36] <masak> uniejo_in_riga: I think you're right. could you make a patch that fixes it?

[07:37] <uniejo_in_riga> masak: ok, and put it on pastebin ?

[07:38] <wk> uniejo_in_riga: isn't same in max too?

[07:38] <masak> uniejo_in_riga: yes. I would give you a commitbit, but I think Rakudo still requires a CLA.

[07:38] <pmichaud> yes, looks like max has the same bug.

[07:38] <masak> and minmax.

[07:38] <masak> no wait

[07:38] <masak> minmax is correct.

[07:38] <baest> yes

[07:41] *** mj41 joined
[07:47] <wk> masak: CLA? Command-line argument?

[07:47] <tadzik> Comtributor License Agreement I guess

[07:47] <masak> oh, that's what it is. :)

[07:48] <masak> people who are new on the channel. you can do this if you want to highlight Rakudo behaviour:

[07:48] <masak> rakudo: say "OH HAI"

[07:48] <p6eval> rakudo 922500: OUTPUT«OH HAI␤»

[07:49] <sorear> new people on channel?

[07:49] <masak> sorear: because of the hackathon that just started in Riga.

[07:52] <sorear> masak: I figured you'd be getting existing Perl 6 people for that.  Do you have giant banners on the street advertising Perl 6 and the hackathon?

[07:53] <wk> sorear: whole city breaths for perl6 now

[07:54] <masak> sorear: there are quite a number of aspiring lambdacamels here.

[07:54] <masak> or is that "butterflycamels" these days?

[07:54] <mberends> cameliaphiles

[07:55] <tadzik> open question: is anyone dissatisfied with Pod::To::Text, and would like to have something improved?

[07:55] <tadzik> mostly about the output it produces

[07:56] <wk> is this used to produce the Book?

[07:57] <tadzik> nope, it's used as a perldoc-ish thing

[07:57] <tadzik> try perl6 --doc SomeModule.pm on the nom branch

[07:58] <masak> tadzik: slight inconsistency: named2text ends with 'given', but declarator2text ends with 'do given'.

[07:59] <tadzik> checking

[07:59] <masak> tadzik: besides that, the code is a joy to read and looks like very cool Perl 6.

[07:59] <mberends> tadzik: for http://perlcabal.org/syn/S26.html could you style the tables to look a little less 1994? Also, the main title should be much bigger and bolder. 

[08:00] <tadzik> masak: oh, that's because I can contecanete things to do-given, I don't think I can do that with a bare given

[08:00] <masak> rakudo: for 1..5 { say "!" ~ ($_ if $_ %% 2) ~ "!" }

[08:00] <p6eval> rakudo 922500: OUTPUT«!Nil()!␤!2!␤!Nil()!␤!4!␤!Nil()!␤»

[08:00] <masak> should Nil() stringify there?

[08:00] <tadzik> nom: say given 1 { when 1 { 'foo' } } ~ 'bar'

[08:00] <p6eval> nom: OUTPUT«===SORRY!===␤Confused at line 1, near "say given "␤»

[08:00] <tadzik> nom: say do given 1 { when 1 { 'foo' } } ~ 'bar'

[08:01] <p6eval> nom: OUTPUT«foobar␤»

[08:01] <tadzik> masak: ↑

[08:01] <masak> tadzik: I know what 'do' does. :)

[08:01] <tadzik> okay :) That's why I'm using a 'do' in declarator2text

[08:01] <masak> tadzik: I'm just saying your using it in one place and not in another.

[08:01] <tadzik> that's for a reason

[08:01] <masak> oh!

[08:01] <masak> there's something after the 'given' :)

[08:02] <masak> that's... I wouldn't consider that good style... necessarily...

[08:02] <tadzik> hmm

[08:02] <masak> you're mixing a very long block with a string concatenation.

[08:02] <tadzik> well, the fact that you didn't notice this "somethin after the given" says something about the readability, yeah

[08:03] <tadzik> I can fix that

[08:03] <masak> it's like telling a two-hour story and then ending it with "so that's why I want a cookie today".

[08:03] <masak> :)

[08:03] <pmichaud> nom: for 1..5 { say "!" ~ ($_ if $_ %% 2) ~ "!"};  # checking

[08:03] <p6eval> nom: OUTPUT«!!␤!2!␤!!␤!4!␤!!␤»

[08:03] <uniejo_in_riga> masak: http://pastebin.com/wwEgBqXe

[08:03] * masak looks

[08:03] * pmichaud looks

[08:04] <pmichaud> +1 to the patch

[08:04] * masak patches it in

[08:04] <masak> uniejo_in_riga++

[08:05] <pmichaud> also, can we get the $by param to default to  &infix:<cmp> or &[cmp]  ?

[08:05] <pmichaud> that would be better than the explicit block

[08:05] *** envi joined
[08:06] <masak> pmichaud: ISTR there was a problem with doing that change, at least in master.

[08:06] <masak> pmichaud: everything just broke inexplicably.

[08:06] <masak> but I'll run spectests on it and see what happens.

[08:06] <dalek> rakudo/nom: b7b88d7 | (Erik Johansen)++ | src/core/Any.pm:

[08:06] <dalek> rakudo/nom: Change min and max to use user supplied compare.

[08:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b7b88d7906

[08:06] <pmichaud> it should work in nom.

[08:06] <pmichaud> It gets used in other places (sort, for example)

[08:07] *** wamba left
[08:07] <masak> oki.

[08:07] <masak> I'll spectest a patch for that.

[08:08] <tadzik> masak: anyway, back to Pod::To::Text, I'm wondering if I could do something for https://github.com/tadzik/gsocmess/issues/4

[08:08] <baest> Is it possible on github to see what branch a commit "belongs" to?

[08:08] <dalek> rakudo/nom: ada28b6 | tadzik++ | lib/Pod/To/Text.pm:

[08:08] <dalek> rakudo/nom: [Pod::To::Text] Tune and clarify declarator2text() a bit

[08:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ada28b6d2d

[08:08] <masak> baest: commits don't belong to branches in git.

[08:08] <tadzik> baest: what do you want to achieve?

[08:08] <masak> baest: branches point to lineages of commits.

[08:09] <wk> while tried "perl6 --doc Tiny.pm" i got "Error while reading from file: Unable to open filehandle from path 'Tiny.pm'"

[08:09] <masak> tadzik++ # de-X/Y-ing

[08:09] <wk> which modules should i try?

[08:09] <tadzik> wk: I'll paste you something

[08:10] <tadzik> wk: try https://gist.github.com/1143598 for example

[08:10] <tadzik> moritz: pingy

[08:11] <tadzik> wk: note that the order of class/method declarations is broken currently, that's due to a known nombug. Segfaults, fireworks, stuff :)

[08:11] <uniejo_in_riga> perl6: <1 2 3 2 1>.uniq.perl.say

[08:11] <p6eval> pugs, rakudo 922500: OUTPUT«("1", "2", "3")␤»

[08:11] <p6eval> ..niecza v8-51-g785e335: OUTPUT«("1", "2", "3").list␤»

[08:11] * masak .oO( knowmbug )

[08:11] <sorear> ooh, fireworks?

[08:11] <tadzik> mberends: about the old-style tables, I'm not really a html person, patches to Pod::To::HTML are more than welcome

[08:11] * sorear enjoys fireworks

[08:11] <baest> masak: well, yes, but the above commits is for nom right? When you've checked the master branch out this commit shouldn't be active in your working dir (I'm mostly using mercurial during $job, so I mix up the names of stuff)

[08:12] <tadzik> mberends: I'm just using perlcabal.org

[08:12] <tadzik> 's css file

[08:12] <szabgab> my task for todays hackathon: try to follow 2 irc channels at the same time without getting dizzy

[08:12] <tadzik> baest: this commit won't appear in the master branch, yes

[08:12] <masak> baest: it says 'rakudo/nom' to the left on the dalek output.

[08:13] <baest> masak: yes, I would be nice to have that info in github commit description too... Not our problem I know

[08:14] *** rafl joined
[08:14] <masak> baest: commit descriptions are forever, but branches are transient.

[08:15] <baest> masak: indeed, but when you merge a branch into another the description could change so that you always could see what branch the commit is applied to (or whatever you want to call it)

[08:15] *** SHODAN joined
[08:15] <masak> maybe there's a client that does that. I haven't thought of it as a problem/desired feature so far.

[08:16] <mberends> tadzik: ok. I'll investigate the HTML tables formatting. Later.

[08:16] <masak> I usually make do with 'git log' on the command line.

[08:16] <baest> nevermind, I just read some commits and the wondered if they were for nom or master. Not important 

[08:16] <masak> :)

[08:16] *** JimmyZ joined
[08:17] <tadzik> mberends: you may want to talk to flussence++, he has a fork of Pod::To::HTML which is much better than the original one

[08:18] <tadzik> I can give you guys a commit bits if you want to

[08:19] <wk> tadzik: still no clue, how see doc's... How does apply the example link here?

[08:21] <mberends> tadzik: I also thought about that. Please give me a commitbit too.

[08:21] <tadzik> wk: do you have the file in the gist downloaded? As AcmeMeow.pm for example?

[08:21] <tadzik> wk: then you can just perl6 --doc AcmeMeow.pm

[08:22] <masak> int main(int argc, char **argv) { printf("OH HAI\n"); } /* masak is writing C */

[08:22] <masak> this feels so primitive! :)

[08:22] <masak> like using a 60s Soviet tank or something.

[08:23] <tadzik> you mean it's shooting vodka bottles?

[08:23] <masak> C code, no matter what it actually does, always shoots vodka bottles.

[08:23] *** im2ee left
[08:24] <pmichaud> in sovjet russia, the bottles shoot your C code.

[08:24] <masak> ;)

[08:24] *** im2ee joined
[08:24] <jnthn> vodka! \o/

[08:24] <mberends> masak: it's not C, it's structured portable assembler. And its in ur rakudo, runnin all ur code ;)

[08:24] *** tokuhirom left
[08:24] <wk> tadzik: thank you, thought it should be somewhere in @INC

[08:27] <tadzik> wk: what should be?

[08:28] <wk> tadzik: some module to see the it's docs. nevermind..

[08:28] <tadzik> wk: well, probably. I could document Pod::To::Text or Test.pm as an example

[08:28] <masak> mberends: I'm gonna dedicate a few hours to try and port dlx-simple to structured portable assembler.

[08:28] <tadzik> or you can do that. Are you at the hackathon?

[08:29] <mberends> masak: \o/

[08:29] <masak> trying to get use to the relative lack of whipuptitude... :)

[08:30] <wk> tadzik: yes, i'm in Riga

[08:30] <masak> s/use/used/

[08:31] <mberends> shopping &

[08:32] <tadzik> wk: are you sitting somewhere around and want to hack on it? :)

[08:32] <wk> tadzik: i'd like to do something, but feel little bit lost here ;)

[08:33] <tadzik> wk: okay, are you in the hackathon place?

[08:33] <wk> tadzik: yep!

[08:36] <masak> they found each other AFK! \o/

[08:39] <moritz> tadzik: pong-ish

[08:39] <JimmyZ> moritz: hello

[08:41] <JimmyZ> moritz: https://gist.github.com/1143629, I use perl6 --ll-exception sample-libcrypt.pl , and it didn't output which file is wrong 

[08:42] *** M_o_C joined
[08:42] <JimmyZ> moritz: Is there a way yet?

[08:42] *** nbrown_ left
[08:43] *** nbrown joined
[08:43] <moritz> rakudo: 1 1

[08:43] <p6eval> rakudo 922500: OUTPUT«===SORRY!===␤Confused at line 22, near "1 1"␤»

[08:43] <moritz> JimmyZ: same problem in master

[08:43] <JimmyZ> ah

[08:43] <moritz> ack -w constant # to find possible occurences

[08:43] <moritz> nom: constant x = 1 + 1

[08:43] <p6eval> nom: OUTPUT«===SORRY!===␤Cannot handle constant with non-literal value yet at line 1, near "= 1 + 1"␤»

[08:44] <moritz> that's the case that triggers the error

[08:45] <tadzik> moritz: the Synopsis link for S26 on perlcabal.org is not clickable, is that intentional>?

[08:45] <moritz> tadzik: not at all

[08:46] <moritz> but it works fine here, wonder what's wrong for you

[08:46] * JimmyZ doesn't know why only S26 needs POD6 to html

[08:47] <moritz> JimmyZ: S26 is written in pod6, the others are all in pod5

[08:47] <tadzik> JimmyZ: only this one's written in Pod6

[08:47] <JimmyZ> ah

[08:47] * JimmyZ thought they are all Pod6

[08:48] *** Su-Shee_ is now known as Su-She

[08:48] *** Su-She is now known as Su-Shee

[08:49] <dalek> mu: dfa6118 | moritz++ | docs/feather/syn_index.html:

[08:49] <dalek> mu: [syn] close a few more <a> tags

[08:49] <dalek> mu: review: https://github.com/perl6/mu/commit/dfa6118ebb

[08:52] *** mishin joined
[08:52] <mishin> @masak Hi

[08:52] <masak> mishin: hi! :)

[08:53] <moritz> info: 1023 smartlinks found and 136 broken in 792 test files (192 test files had no links).

[08:57] <dalek> mu: d0de245 | moritz++ | docs/feather/syn_index.html:

[08:57] <dalek> mu: [syn] fix more html

[08:57] <dalek> mu: review: https://github.com/perl6/mu/commit/d0de24568b

[08:58] <moritz> tadzik: please try again after reloading, the HTML is now less crappy

[09:00] *** betterworld left
[09:01] <tadzik> moritz: works, thanks

[09:01] <wk> what means '|$' in sub-declaration?

[09:01] *** betterworld joined
[09:02] <pmichaud> wk: it's a placeholder -- basically it means "match anything"

[09:02] <pmichaud> wk: (technically it's the way that we capture all remaining arguments into a single Capture parameter)

[09:04] <wk> pmichaud: how it differs from not declaring at all? 

[09:04] <pmichaud> if declared with (), that means "no arguments"

[09:05] <pmichaud> if declared without any parens, it will capture by default into @_ (and flatten), which isn't what we typically want.

[09:05] *** uniejo_in_riga left
[09:05] <moritz> pmichaud: and only if @_ is used in the method body

[09:05] <pmichaud> in general you'll see |$ in the core code for proto sub declarations (where we don't want to restrict the types of arguments) and in places where we're expecting non-Perl6 (i.e., Parrot) arguments

[09:05] *** uniejo_in_riga joined
[09:06] <moritz> wk: thing is, |$ is typically used in protos that re-dispatch. In that case we avoid binding to parameters for efficiency too

[09:06] *** araujo joined
[09:09] <JimmyZ> nom: sub f{ @_; } ; say f 1, 2, 3

[09:09] <p6eval> nom: OUTPUT«1 2 3␤»

[09:10] <masak> nom: say (sub { @_ }) 1, 2, 3

[09:10] <p6eval> nom: OUTPUT«===SORRY!===␤Confused at line 1, near "say (sub {"␤»

[09:10] <masak> nom: say (sub { @_ })(1, 2, 3)

[09:10] <p6eval> nom: OUTPUT«1 2 3␤»

[09:10] <masak> nom: say sub { @_ }(1, 2, 3)

[09:10] <p6eval> nom: OUTPUT«===SORRY!===␤Confused at line 1, near "say sub { "␤»

[09:10] <JimmyZ> nom: class A {  method f{ @_; } ; }; say A.f 1, 2, 3

[09:10] <p6eval> nom: OUTPUT«===SORRY!===␤Placeholder variables cannot be used in a method at line 1, near "; }; say A"␤»

[09:11] <masak> tough break.

[09:11] <masak> nom: class A { method f { $^test } }; say A.new.f("OH HAI")

[09:11] <p6eval> nom: OUTPUT«===SORRY!===␤Placeholder variables cannot be used in a method at line 1, near "}; say A.n"␤»

[09:12] <wk> moritz: this means things like multi-subs?

[09:12] <dalek> roast: cfb4a0d | moritz++ | S0 (3 files):

[09:12] <dalek> roast: fix a few smartlinks

[09:12] <dalek> roast: review: https://github.com/perl6/roast/commit/cfb4a0de38

[09:12] * JimmyZ doesn't know what 'only if @_ is used in the method body' means

[09:13] <moritz> wk: yes, a proto is basically something that sits on top of several multis

[09:13] <moritz> nom: sub f { }; f(1)

[09:13] <p6eval> nom: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in sub f at /tmp/bS6HL_x4QM:1␤  in mu <anon> at /tmp/bS6HL_x4QM:1␤  in mu <anon> at /tmp/bS6HL_x4QM:1␤␤»

[09:13] <masak> JimmyZ: is that from the spec? where?

[09:13] <moritz> nom: sub f { @_ }; f(1)

[09:13] <p6eval> nom:  ( no output )

[09:13] <moritz> JimmyZ: see above

[09:13] <JimmyZ> masak: from moritz++

[09:13] <moritz> JimmyZ: if @_ is used in the body of f, f accepts positional arguments

[09:13] <moritz> if not, not

[09:14] <JimmyZ> moritz: Did you mean @_ can't be used in method ?

[09:15] <moritz> JimmyZ: I haven't talked about methods today at all

[09:15] <JimmyZ> moritz: only if @_ is used in the method body # this one

[09:15] <moritz> sorry, meant s/method/routine/

[09:17] <JimmyZ> heh

[09:18] <masak> well, that clears it up :)

[09:18] <dalek> specs: d8202fe | moritz++ | S02-bits.pod:

[09:18] <dalek> specs: [S02] remove context fossile

[09:18] <dalek> specs: 

[09:18] <dalek> specs: "called in item context" implies that context flows inwards, which it

[09:18] <dalek> specs: does not anymore

[09:18] <dalek> specs: review: https://github.com/perl6/specs/commit/d8202fe5b1

[09:18] <JimmyZ> nom: sub f{ shift; } ; say f 1, 2, 3

[09:18] <p6eval> nom: OUTPUT«Too many positional parameters passed; got 3 but expected 0␤  in sub f at /tmp/orfXrCTWUJ:1␤  in mu <anon> at /tmp/orfXrCTWUJ:1␤  in mu <anon> at /tmp/orfXrCTWUJ:1␤␤»

[09:19] <JimmyZ> nom: sub f{ shift @_; } ; print f 1, 2, 3 # perl5?

[09:19] <p6eval> nom: OUTPUT«1»

[09:26] *** wk left
[09:27] <chadadavis> rakudo:'2abc' ~~ /\d\w**{3}/

[09:28] <dalek> roast: 975f34d | moritz++ | S02-literals/ (4 files):

[09:28] <dalek> roast: fix a few smartlinks, and remove some redundant ones

[09:28] <dalek> roast: review: https://github.com/perl6/roast/commit/975f34da33

[09:28] <chadadavis> nom: '2abc' ~~ /\d\w**{3}/

[09:28] <p6eval> nom: OUTPUT«===SORRY!===␤Null PMC access in invoke()␤»

[09:29] <moritz> chadadavis: try **3 (without the brackets)

[09:29] <JimmyZ> rakudo: '2abc' ~~ /\d\w**{3}/

[09:29] <p6eval> rakudo 922500:  ( no output )

[09:29] <chadadavis> Thanks moritz. Was reading old docs.

[09:30] <moritz> chadadavis: oh, the **{3} form is supposed to work too, but it's probably not yet implemented in nom

[09:30] <chadadavis> moritz: yeah, it works in rakudo, hence my confusion.

[09:30] <moritz> nom: say '2abc' ~~ /\d \w ** 3 /

[09:30] <p6eval> nom: OUTPUT«2abc␤»

[09:35] *** wk joined
[09:36] *** JimmyZ left
[09:36] <moritz> JimmyZ: please pull rakudo :-)

[09:36] <dalek> rakudo/nom: 05b7e3a | moritz++ | src/Perl6/Actions.pm:

[09:36] <dalek> rakudo/nom: include constant name NYI error message

[09:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/05b7e3a0eb

[09:37] <moritz> ugh, that should have been *in* NYI error message

[09:37] <moritz> evalbot rebuild nom

[09:37] <p6eval> OK (started asynchronously)

[09:37] <moritz> nom: say 1

[09:37] <p6eval> nom: OUTPUT«1␤»

[09:38] *** wamba joined
[09:41] <moritz> how is the hackathon going?

[09:41] <tadzik> pretty nice

[09:41] <masak> it ebbs and flows :)

[09:41] <tadzik> everyone's slacking off mumbling something about "compiling"

[09:41] <masak> people are regrouping according to power outlet availability.

[09:42] <moritz> I WANT TO SEE COMMITS, not slacking off!!!

[09:42] * masak hugs moritz

[09:42] <jnthn> moritz: Relax, I have some locally :)

[09:43] <moritz> push, push, push

[09:43] *** JimmyZ joined
[09:43] <JimmyZ> :)

[09:44] <dalek> rakudo/nom: ada28b6 | tadzik++ | lib/Pod/To/Text.pm:

[09:44] <dalek> rakudo/nom: [Pod::To::Text] Tune and clarify declarator2text() a bit

[09:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ada28b6d2d

[09:44] <dalek> rakudo/nom: 51eb0f8 | pmichaud++ | src/core/ (2 files):

[09:44] <dalek> rakudo/nom: Add Grammar.parse .

[09:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/51eb0f893b

[09:44] <dalek> rakudo/nom: ea2b5e6 | pmichaud++ | src/Perl6/Actions.pm:

[09:44] <dalek> rakudo/nom: Merge branch 'nom' of github.com:rakudo/rakudo into nom

[09:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ea2b5e62ba

[09:45] <masak> moritz: you sound a bit like a midwife.

[09:46] <moritz> :-)

[09:47] <JimmyZ> is that  premature delivery ?

[09:47] <JimmyZ> ;)

[09:47] <masak> deliver early, deliver often.

[09:49] *** whiteknight joined
[10:04] *** wamba left
[10:10] <dalek> roast: b75f0ec | moritz++ | S32- (2 files):

[10:10] <dalek> roast: fudge map.t and substr.t for rakudo

[10:10] <dalek> roast: review: https://github.com/perl6/roast/commit/b75f0ecd47

[10:11] *** wk left
[10:11] *** wk joined
[10:11] *** renormalist left
[10:12] <moritz> LHF: add back Str.capitalize

[10:12] <dalek> rakudo/nom: 6ff7c69 | moritz++ | t/spectest.data:

[10:12] <dalek> rakudo/nom: run map.t and substr.t

[10:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ff7c699db

[10:12] <baest> can "sub minmax(*@args, :&by = { $^a cmp $^b }) { @args.minmax(&by) }" be written another way so the default parameter for $by isn't repeated?

[10:12] <moritz> baest: you can write two multi candidates

[10:12] <jnthn> Repeated?

[10:13] <moritz> jnthn: the method also has the default

[10:13] <jnthn> ah

[10:13] <jnthn> But why aren't both :&by = &infix:<cmp> ?

[10:13] <baest> moritz: there is already multi infix:<minmax>(*@args) { @args.minmax }

[10:14] <baest> jnthn: that is what I'm trying to do, but I don't see why it should be necessary to repeat the cmp both places

[10:14] <moritz> jnthn: because nobody has merged baest++'s pull request yet :-)

[10:15] <baest> moritz: yeah, I'm missing minmax in that request and also the subs here. I should propably redo it 

[10:19] <masak> jnthn: working on that.

[10:20] <masak> oh, baest already has a patch for it?

[10:20] <masak> then I'll stop spectesting mine :P

[10:20] <moritz> https://github.com/rakudo/rakudo/pull/39

[10:20] <baest> masak: :) I'm guessing you wont succeed anyways. There is a problem somewhere (before my patch)

[10:21] <JimmyZ> moritz: just using your patch, but it didn't mention which .pm file

[10:21] <moritz> JimmyZ: I know, but it might still make debugging easier

[10:21] <masak> baest: a... problem?

[10:21] <tadzik> nqp: sub foo { sub bar { say("baz") }; bar() }; foo()

[10:21] <p6eval> nqp: OUTPUT«Routine declaration requires a signature at line 1, near "{ sub bar "␤»

[10:21] <JimmyZ> moritz: yeah, thanks 

[10:21] <tadzik> nqp: sub foo() { sub bar() { say("baz") }; bar() }; foo()

[10:21] <p6eval> nqp: OUTPUT«baz␤»

[10:21] <tadzik> niice

[10:21] <masak> nqp++

[10:22] <masak> Yapsi can do that too :)

[10:22] <moritz> yapis: sub foo() { sub bar() { say("baz") }; bar() }; foo()

[10:22] <baest> masak: my history is screwed right now but t/spec/S03-operators/minmax.t explodes in test 10

[10:22] <baest> history as in scrollback in term

[10:22] <moritz> yapsi: sub foo() { sub bar() { say("baz") }; bar() }; foo()

[10:22] <p6eval> yapsi: OUTPUT«Could not parse␤»

[10:23] <moritz> doesn't look like :/

[10:23] <tadzik> moritz: don't use strings :P

[10:23] <tadzik> yapsi: sub foo() { sub bar() { say(1) }; bar() }; foo()

[10:24] <p6eval> yapsi: OUTPUT«Could not parse␤»

[10:24] <tadzik> ew

[10:25] <masak> hm.

[10:25] <masak> yapsi: sub foo { sub bar { say 1 }; bar() }; foo()

[10:26] <p6eval> yapsi: OUTPUT«(timeout)»

[10:26] <masak> very specific when it comes to syntax :)

[10:26] <masak> that should work if the timeout isn't there.

[10:28] * masak .oO( Yapsi needs a longer timeout... )

[10:29] *** wamba joined
[10:29] *** jel joined
[10:29] *** jel is now known as elgaard

[10:30] *** elgaard is now known as elhaard

[10:31] *** elhaard is now known as elgaard

[10:34] <elgaard> perl6: print 'hej '; say 'verden';

[10:34] <p6eval> pugs, rakudo 922500, niecza v8-51-g785e335: OUTPUT«hej verden␤»

[10:34] *** kolyuchiy left
[10:37] *** uniejo_in_riga left
[10:38] *** uniejo_in_riga joined
[10:48] *** LimitSupremum left
[10:48] *** whiteknight left
[10:52] *** MayDaniel joined
[10:53] *** pernatiy joined
[10:55] <cognominal_> hi, in rakudo master, when I use a file containing a grammar Grammar.js, it works fine. If I requires it, I get Cannot find sub Grammar::js

[10:55] <cognominal_> what is the way to file a bug today?

[10:56] *** SHODAN left
[10:56] <cognominal_> good hackathon for the guys at riga btw

[10:58] *** JimmyZ left
[10:58] *** whiteknight joined
[10:59] <cognominal_> I tried the  eval "use Grammar::js" to no use (pun intended)  :(

[11:05] *** MayDaniel left
[11:15] *** dual joined
[11:15] *** uniejo_in_riga left
[11:15] *** im2ee left
[11:16] *** im2ee joined
[11:17] *** kolyuchiy joined
[11:24] *** JimmyZ joined
[11:25] * JimmyZ NickServ identify zhuomingliang

[11:25] * JimmyZ NickServ identify zhuomingliang

[11:25] *** uniejo_in_riga joined
[11:26] *** worr left
[11:26] *** M_o_C left
[11:32] <yath> JimmyZ: you might want to change your password.. :-)

[11:32] <JimmyZ> yath, yeah, changed 

[11:33] <JimmyZ> yath: thanks 

[11:41] *** kboga joined
[11:44] *** mishin left
[11:48] *** wk left
[11:56] *** mberends left
[11:56] *** mberends joined
[11:58] <dalek> rakudo/nom: 205e0ed | jonathan++ | src/Perl6/SymbolTable.pm:

[11:58] <dalek> rakudo/nom: When we need to on-demand compile a proto, we should also immediately do its candidates.

[11:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/205e0ed457

[11:58] <dalek> rakudo/nom: 1b8d004 | jonathan++ | src/binder/multidispatch.c:

[11:58] <dalek> rakudo/nom: Re-enable constraints being able to see the lexical environment.

[11:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1b8d004f96

[11:58] <dalek> rakudo/nom: f1e2037 | jonathan++ | src/ (5 files):

[11:58] <dalek> rakudo/nom: Make it so the constraints actually see the correct lexical environment, not just the static lexpad entries.

[11:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f1e2037edc

[11:58] <dalek> rakudo/nom: 5d3e444 | jonathan++ | NOMMAP.markdown:

[11:58] <dalek> rakudo/nom: Update nommap; code constraints on multi-dispatch are done.

[11:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5d3e444ee2

[12:00] <mberends> jnthn, masak, moritz, pmichaud : are we on opposite sides of a netsplit?

[12:00] <masak> mberends: don't think so.

[12:01] <masak> if we were, we wouldn't be able to even tab complete on each other.

[12:03] <mberends> :) there was so little traffic coming this way, and an expected commit message did not appear

[12:03] <mberends> how's the structured portable assembly going? I'm using it today to write a cut down split().

[12:04] <jnthn> mberends: well, we went for lunch ;)

[12:04] <masak> even hackathoners have to eat.

[12:04] <jnthn> om nom

[12:04] <masak> mberends: I'm hacking along, but it's slow going.

[12:05] *** cotto joined
[12:05] <mberends> ah, nom, should do that here too. poached fish is on the menu.

[12:09] <chadadavis> rakudo: loop (my $i=0; $i<1; $i++) { }; # say 'abc' ~~ m/<&nonexistant>/

[12:10] <p6eval> rakudo 922500: OUTPUT«===SORRY!===␤Missing block at line 22, near "(my $i=0; "␤»

[12:10] *** cotto left
[12:13] *** mj41 left
[12:17] *** birdwindupbird joined
[12:23] <tadzik> nqp: my @a := []; @a.push(1); @a.push(2); say(pir::join(@a, '')) # stupid nqp, why don't you even complain a bit?

[12:23] <p6eval> nqp: OUTPUT«␤»

[12:23] <elgaard> Does anyone else at the hackathon have problems connecting to rt.perl.org and bitcard.org?

[12:24] <moritz> nom: say '12'.Real

[12:24] <p6eval> nom: OUTPUT«Method 'Real' not found for invocant of class 'Str'␤  in mu <anon> at /tmp/7oIH5XrJfj:1␤  in mu <anon> at /tmp/7oIH5XrJfj:1␤␤»

[12:25] <pmichaud> nom: say '12'.Numeric.Real  # checking

[12:25] <p6eval> nom: OUTPUT«Method 'Real' not found for invocant of class 'Int'␤  in mu <anon> at /tmp/uE9RQmdhXa:1␤  in mu <anon> at /tmp/uE9RQmdhXa:1␤␤»

[12:27] *** daniel-s left
[12:27] <moritz> I'm working on atan2 now, can also add a no-op Real coercer to Real

[12:29] <tadzik> for some reason I keep thinking that make == return

[12:30] <chadadavis> elgaard: RT times out for me too.

[12:32] *** elgaard is now known as elhaard

[12:34] *** wk joined
[12:35] <moritz> tadzik: me too

[12:38] <masak> :(

[12:44] <flussence> * *, *

[12:48] *** pochi left
[12:48] <moritz> wow, atan2 is a beast

[12:49] <flussence> tadzik: do you want to take that Pod::To::HTML stuff I've done so far?

[12:51] <moritz> you need to consider (Cool, Real) and (Real, Cool) argument constallations, but many types do Real and are Cool

[12:51] <baest> moritz: but the reverser doesn't apply :)

[12:51] <baest> -r

[12:51] <masak> moritz: oh, I thought you meant all the corner cases of atan2 itself...

[12:51] <moritz> baest: can you speak for beast too? :-)

[12:52] <tadzik> flussence: of course

[12:52] <baest> :)

[12:53] <tadzik> flussence: I've just added you and mberends to Pod::To::HTML

[12:53] <flussence> yay

[12:53] <mberends> yay+1

[12:53] <tadzik> feel free to do whatever you find appropriate to do with it

[12:53] *** JimmyZ left
[12:53] <moritz> tadzik: should I just fork it into the perl6 organization, and give the 'perl6' team (same as roast, specs etc.) permission for it?

[12:54] <tadzik> moritz: wfm

[12:54] <moritz> then you don't have to care about commit bits :-)

[12:54] <baest> I've updated https://github.com/rakudo/rakudo/pull/39 to include minmax and the sub versions

[12:54] <tadzik> okay, wfm twice then :)

[12:54] *** hugme joined
[12:54] *** ChanServ sets mode: +v hugme

[12:54] *** crked joined
[12:55] <moritz> https://github.com/perl6/Pod-To-HTML it is then

[12:56] *** JimmyZ joined
[12:56] <moritz> basically everyone in here has now access to it

[12:56] <moritz> and anybody who doesn't, but who wants it, please speak up and tell me your github ID

[12:56] <tadzik> moritz++

[13:00] *** birdwindupbird left
[13:00] <flussence> just pushed my stuff, it's in a 'html5' branch for now while I experiment with ways of doing things

[13:01] <moritz> flussence++

[13:01] <flussence> oh, and nom's over 10k passes now too: https://github.com/flussence/specgraphs/blob/792aa/output/rakudo-tests.png

[13:02] <moritz> so now it just needs a factor of 2 to catch up to master? :-)

[13:02] <flussence> yep :)

[13:03] <tadzik> is there any good way to concatenate arrays in nqp?

[13:04] <moritz> tadzik: don't think so

[13:04] <moritz> you need push and shift

[13:04] <moritz> or a loop that carries over

[13:04] <baest> can you augment the class Any to override a method (I'm trying to test something without having to compile setting every trial and error)

[13:05] <pmichaud> jnthn++ says "I think so."

[13:05] * moritz doesn't think so

[13:05] <pmichaud> jnthn++ now says "yes."

[13:05] <moritz> at least in master it didn't work with overriding

[13:05] <moritz> nom: say Any.^method(:local)

[13:05] <p6eval> nom: OUTPUT«Method 'method' not found for invocant of class 'Perl6::Metamodel::ClassHOW'␤  in method dispatch:<.^> at src/gen/CORE.setting:615␤  in mu <anon> at /tmp/jYuK4lGeud:1␤  in mu <anon> at /tmp/jYuK4lGeud:1␤␤»

[13:05] <moritz> nom: say Any.^methods(:local)

[13:05] <p6eval> nom: OUTPUT«eager elems end classify infinite flat hash list pick roll reverse sort values keys kv pairs Array grep join map min max minmax postcircumfix:<[ ]> at_pos all any one none postcircumfix:<{ }> reduce␤»

[13:06] <moritz> nom: augment class Any { method elems() { 5 } }; say Any.elems

[13:06] <p6eval> nom: OUTPUT«===SORRY!===␤augment not allowed without 'use MONEKY_TYPING' at line 1, near "{ method e"␤»

[13:06] <moritz> nom: use MONKEY_TYPING; augment class Any { method elems() { 5 } }; say Any.elems

[13:06] <p6eval> nom: OUTPUT«===SORRY!===␤Package 'Any' already has a method 'elems'; did you mean to declare a multi-method?␤»

[13:07] <baest> moritz: it was trying to replace a method. You can only add new ones according to jnthn++

[13:07] <baest> s/it/I/

[13:07] <jnthn> Yeah, you shouldn't be able to replace with augment

[13:07] <baest> ehh, kind of scary when you call yourself "it". Kinda silence of the lambs, just worse

[13:08] <moritz> baest: pro tip: remove the method from Any, and then monkey-patch it in again

[13:08] <moritz> that way you have to compile just once

[13:08] <moritz> compile the setting, that is

[13:08] <baest> moritz: cool, you of course

[13:08] <baest> s/you/yes/

[13:08] <dalek> rakudo/nom: 607c1b8 | moritz++ | / (4 files):

[13:08] <dalek> rakudo/nom: atan2

[13:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/607c1b8a7b

[13:09] <tadzik> $<char>=[ \N || [ <?{$*POD_IN_FORMATTINGCODE == 1}> \n ] ] # is there anything particulary wrong about this piece of code?

[13:09] <tadzik> it dies with "Null PMC access in set_string_native()"

[13:10] <masak> any one of the new Perl 6 people want to pair up and write a game AI in Perl 6?

[13:10] <masak> :)

[13:11] <masak> tadzik: maybe it gets sad if $*POD_IN_FORMATTINGCODE wasn't assigned to already, or something?

[13:11] <tadzik> I want $<char> to be any character in we're in the formattingcode (dynvar set), or a non-newline character if we're not

[13:12] <tadzik> masak: it always is, either 0 or 1

[13:12] <masak> ok.

[13:12] <tadzik> (I think :))

[13:12] <masak> then it looks fine to me.

[13:12] <tadzik> it's never :my'd without being given a value

[13:13] <moritz> tadzik: does the error come from compile time? or from run time?

[13:13] <tadzik> moritz: runtime

[13:16] <moritz> nqp: my $*P := 1; say("yes") if $*P == 1

[13:16] <p6eval> nqp: OUTPUT«yes␤»

[13:16] <moritz> hm

[13:17] <pmichaud> where is $*POD_IN_FORMATTINGCODE being defined?

[13:18] <tadzik> in the parent rule of the one I'm using it in

[13:18] <moritz> where parent == caller, right?

[13:19] <tadzik> methinks so, yes

[13:20] *** orafu left
[13:20] *** orafu joined
[13:22] <tadzik> okay, that appears to be something else :)

[13:25] *** drbean left
[13:28] <baest> moritz: no YAPC::EU for you this year?

[13:29] <moritz> baest: no, $family takes priority

[13:30] <baest> moritz: when it has to be, it is a good reason

[13:32] <tadzik> ok, apparently $<code>=<[A..Z]> is what dies

[13:32] <moritz> the best :-)

[13:32] <moritz> nqp: say('abc' ~~ /$<code>=<[A..Z]>/)

[13:32] <p6eval> nqp: OUTPUT«␤»

[13:32] <moritz> nqp: say('ABC' ~~ /$<code>=<[A..Z]>/)

[13:32] <p6eval> nqp: OUTPUT«A␤»

[13:33] <moritz> nqp: say( ('ABC' ~~ /$<code>=<[A..Z]>/)<code> )

[13:33] <p6eval> nqp: OUTPUT«A␤»

[13:33] <tadzik> it only appeared when I did put the { $*POD_IN_FORMATTINGCODE := 1 } around

[13:33] <tadzik> if I move it below...

[13:34] <tadzik> then it still dies, ok

[13:35] <tadzik> and it dies somewhere else when I change <[A..Z]> to \w. Wtf

[13:38] *** flussence left
[13:39] <tadzik> moritz: given no complains from the community, do you think I can close https://github.com/tadzik/gsocmess/issues/4

[13:40] <pmichaud> I tend to want to put square brackets after anything like  $<name>=   in regexes

[13:40] <pmichaud> e.g.,   $<code>=[\w]  and not $<code>=\w

[13:41] <masak> +1

[13:41] <masak> precedence in regexes is tricky enough as it is.

[13:41] <masak> take /foo ** bar/, for example.

[13:41] <masak> I think there should be a warning for that particular case.

[13:42] <pmichaud> I don't think I've seen any examples in S05 that have $<name>=   and something that isn't <subrule>, [group], or (subpat)

[13:42] <masak> (it means /fo[o ** b]ar/)

[13:42] <baest> hmm, I'm not sure how to do more than one pull request at once. Can anybody change line 1155 of src/Perl6/Grammar.pm from MONEKY_TYPING to MONEKY_TYPING?

[13:42] <baest> to MONKEY_TYPING

[13:42] * baest really needs a to type better

[13:43] <moritz> tadzik: I think text output of tables could still use some polishing

[13:44] <moritz> tadzik: for example the VERSION table from S26 is not aligned at all when printed with --doc

[13:44] <dalek> rakudo/nom: 9f86f98 | moritz++ | / (4 files):

[13:44] <dalek> rakudo/nom: sec, asec

[13:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9f86f98687

[13:45] <dalek> rakudo/nom: 8479b4f | moritz++ | src/Perl6/Grammar.pm:

[13:45] <dalek> rakudo/nom: fix typo in Grammar.pm, baest++

[13:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8479b4f42a

[13:47] <dalek> roast: 2dc589e | jonathan++ | S06-multi/type-based.t:

[13:47] <dalek> roast: nom unfudges

[13:47] <dalek> roast: review: https://github.com/perl6/roast/commit/2dc589ef1a

[13:47] <dalek> rakudo/nom: 3cfd93d | jonathan++ | src/ (5 files):

[13:47] <dalek> rakudo/nom: Fix use of captured type variables as multi-dispatch constraints.

[13:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3cfd93dea5

[13:47] <dalek> rakudo/nom: 882128c | jonathan++ | NOMMAP.markdown:

[13:47] <dalek> rakudo/nom: Operator overloading seems to work fine, so remove from punch list.

[13:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/882128c6c5

[13:47] <masak> baest: why is 'a' so important for typing better? :P

[13:47] *** whiteknight left
[13:48] <mberends> 'a' as in baetter

[13:49] <masak> what? he's already the baest at it! :P

[13:49] <baest> mberends++ # exactly

[13:53] <jnthn> nom: my $x = 42; say $x.^isa(Range)

[13:53] <p6eval> nom: OUTPUT«Cannot access attributes in a type object␤  in method max at src/gen/CORE.setting:1062␤  in method infinite at src/gen/CORE.setting:3843␤  in method infinite at src/gen/CORE.setting:3138␤  in method gimme at src/gen/CORE.setting:3420␤  in method ARGLIST_FLATTENABLE at src/ge…

[13:53] <jnthn> nom: my $x = 42; say $x.isa(Range)

[13:53] <p6eval> nom: OUTPUT«Bool::False␤»

[13:54] <dalek> specs: a4e255c | larry++ | S12-objects.pod:

[13:54] <dalek> specs: new attempt at :D policy

[13:54] <dalek> specs: 

[13:54] <dalek> specs: :D and :U are now defined in terms of a low-level macro, DEFINITE.

[13:54] <dalek> specs: The old :A now becomes :T, which admits only type objects.  Invocants

[13:54] <dalek> specs: now default to :D, except for the new method, whose prototype puts a

[13:54] <dalek> specs: default of :T on the invocants of all "new" methods in derived classes.

[13:54] <dalek> specs: review: https://github.com/perl6/specs/commit/a4e255cdec

[13:55] *** im2ee left
[13:57] <tadzik> moritz: okay, I'm noting that down

[13:59] *** uniejo_in_riga left
[14:00] *** uniejo_in_riga joined
[14:04] *** flussence joined
[14:11] <moritz> TimToady++ # latest :D and :U spec looks good

[14:13] <TimToady> jnthn++ pointed out that we have a little problem with ACCEPTS, since either way we define the proto ACCEPTS causes problems

[14:13] <TimToady> if the proto sets :D to make all the other ACCEPTS default to :D, then we can't write the :U multi

[14:14] <TimToady> if we default to :_ then we have to put :D on all the other ACCEPTS

[14:14] *** JodaZ left
[14:14] <TimToady> various hacks are under discussion

[14:15] * moritz can also think of a few hacks, none of them good

[14:15] <TimToady> but in general pmichaud++ and jnthn++ like the idea of letting protos specify the default :D and :U

[14:16] <TimToady> or :T

[14:17] <jnthn> It feels kinda like we're trying to make the thing on the proto be both the default and the gatekeeper, which aren't always the same thing...

[14:18] *** timbunce joined
[14:19] *** hanekomu joined
[14:23] <baest> jnthn: your method dispatch:<.^> *@pos -> **@pos didn't seem to work

[14:23] <dalek> rakudo/nom: a959e52 | jonathan++ | src/Perl6/Metamodel/ParametricRole (2 files):

[14:23] <dalek> rakudo/nom: Toss some unused methods.

[14:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a959e52510

[14:24] <dalek> features: 256eddb | jonathan++ | features.json:

[14:24] <dalek> features: nom does additional constraints in multi-dispatch and need.

[14:24] <dalek> features: review: https://github.com/perl6/features/commit/256eddb7bb

[14:24] <jnthn> baest: ah, hm

[14:28] <moritz> nom: say (*.uc).('foo')

[14:28] <p6eval> nom: OUTPUT«Method 'postcircumfix:<( )>' not found for invocant of class 'Str'␤  in mu <anon> at src/gen/Metamodel.pm:2714␤  in mu <anon> at /tmp/iPIq8FELik:1␤  in mu <anon> at /tmp/iPIq8FELik:1␤  in mu <anon> at /tmp/iPIq8FELik:1␤␤»

[14:29] <moritz> nom: say (*.uc).WHAT

[14:29] <p6eval> nom: OUTPUT«Str()␤»

[14:29] <jnthn> moritz: That one's in nommap

[14:29] <moritz> ok

[14:32] <dalek> nqp: bdab779 | pmichaud++ | src/QAST/Compiler.nqp:

[14:32] <dalek> nqp: Add pastnode rxtype to QAST::Regex.

[14:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bdab779b79

[14:33] * moritz just disovered an unpushed local commit in nqp

[14:33] <tadzik> please tell me it's about write bareers

[14:34] <dalek> nqp: e913287 | moritz++ | src/HLL/Compiler.pm:

[14:34] <dalek> nqp: error and backtrace should go to standard error by default

[14:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e913287c90

[14:34] <moritz> tadzik: nope, error processing

[14:34] <tadzik> :(

[14:34] <tadzik> still, :)

[14:34] <moritz> tadzik: sorry to disappoint you

[14:34] <tadzik> no worries :)

[14:34] *** birdwindupbird joined
[14:35] <moritz> nqp: my $a; ~$a // 0

[14:35] <p6eval> nqp: OUTPUT«Null PMC access in set_string_native()␤»

[14:35] <moritz> nqp: my $a; ~$a 

[14:35] <p6eval> nqp:  ( no output )

[14:35] <moritz> nqp: my $a; $a // 0

[14:35] <p6eval> nqp:  ( no output )

[14:35] <moritz> nqp: my $a; ~($a // 0)

[14:35] <p6eval> nqp:  ( no output )

[14:35] <moritz> nqp: my $a; ~$a // 0

[14:35] <tadzik> moritz: it's related to PAST::Compiler

[14:35] <p6eval> nqp: OUTPUT«Null PMC access in set_string_native()␤»

[14:35] <tadzik> pmichaud++ investigated that a bit already

[14:35] <moritz> ok

[14:36] * moritz feels a bit disconnected

[14:36] <tadzik> hugme: hug moritz

[14:36] * hugme hugs moritz

[14:36] * tadzik hugs moritz too

[14:38] *** MayDaniel joined
[14:44] <dalek> rakudo/nom: 6ac303d | pmichaud++ | / (2 files):

[14:44] <dalek> rakudo/nom: Add code blocks and code assertions in regexes.

[14:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ac303ddc8

[14:45] *** mishin joined
[14:47] <dalek> features: 867f131 | pmichaud++ | features.json:

[14:47] <dalek> features: Update features.json with grammar and regex code block changes.

[14:47] <dalek> features: review: https://github.com/perl6/features/commit/867f131574

[14:47] <dalek> specs: a69cc7b | jonathan++ | S11-modules.pod:

[14:47] <dalek> specs: Start trying to make S11 a little saner; this gets us to a point where C<import> could feasibly work again.

[14:47] <dalek> specs: review: https://github.com/perl6/specs/commit/a69cc7b20d

[14:51] *** jimmy1980 left
[14:57] *** jimmy1980 joined
[14:58] *** |newbie| joined
[14:58] <|newbie|> hi

[14:58] <|newbie|> hi

[14:59] *** pochi joined
[14:59] <uniejo_in_riga> nom: (2 + 3i).rand.say

[15:00] <p6eval> nom: OUTPUT«Method 'Num' not found for invocant of class 'Real'␤  in method Num at src/gen/CORE.setting:4851␤  in method rand at src/gen/CORE.setting:1247␤  in mu <anon> at /tmp/fSs1hFEYzB:1␤  in mu <anon> at /tmp/fSs1hFEYzB:1␤␤»

[15:01] <tadzik> |newbie|: hi

[15:03] *** Limbic_Region left
[15:04] *** Axius joined
[15:05] <|newbie|> DO you know pir?

[15:05] *** wamba left
[15:05] <masak> |newbie|: yes. some of us here know PIR.

[15:05] <tadzik> more less. But #parrot on irc.perl.org is probably a better place to ask about pir

[15:05] <masak> |newbie|: but the nice thing about the new Rakudo is that you don't have to know PIR :)

[15:07] *** JimmyZ left
[15:08] *** JimmyZ joined
[15:08] *** Axius left
[15:09] *** Axius joined
[15:09] <masak> jnthn++ pmichaud++

[15:09] <pmichaud> yes, today during the hackathon we managed to turn a number of "red" items in compilers/features to green.

[15:10] <pmichaud> okay, time for a break

[15:10] <pmichaud> bbl

[15:11] *** |newbie| left
[15:11] *** jaffa4 joined
[15:12] <jaffa4> hi

[15:13] <jaffa4> how is the current new perl6 framework doing?

[15:13] <jaffa4> THe one is to be released this month.

[15:14] <masak> jaffa4: we'll be seeing a rakudo nom release this month.

[15:15] <flussence> shouldn't perl6.org/compilers/features have a row for "Pod"? I don't see it.

[15:15] <masak> flussence: indeed. feel free to add it.

[15:16] *** Axius left
[15:17] <jaffa4> Are you excited?

[15:17] *** kolyuchiy left
[15:18] <jaffa4> WHat was the hackeron like?

[15:18] <masak> jaffa4: yes, excited. even though the big speed win will come a few months later.

[15:18] <masak> jaffa4: the hackathon is still ongoing.

[15:18] <jaffa4> What is it like? Do you program 24 hours a day?

[15:19] <tadzik> not really :)

[15:19] <elhaard> anything -athon must be 42 - so 42 hrs/day :-P

[15:20] <tadzik> We started on 10 AM and we're now hacking, joking, eating, drinking and so

[15:20] <jaffa4> How is programming done? Tow at the same time?

[15:21] *** birdwindupbird left
[15:21] <tadzik> well, more like twenty

[15:21] <TimToady> dinner &

[15:22] <jaffa4> Where is it now?

[15:23] *** hanekomu left
[15:23] *** uniejo_in_riga left
[15:25] *** Moukeddar joined
[15:25] *** masak left
[15:25] *** hanekomu joined
[15:26] *** wk left
[15:26] *** elhaard left
[15:28] *** chadadavis left
[15:28] *** eiro left
[15:28] <Moukeddar> hi guys o/

[15:29] <Moukeddar> i know it's a bit off-topic, but could someone lead me to something explaining distributed computing and how it can be used?

[15:29] <Moukeddar> thank you gentlmen

[15:29] <Moukeddar> gentlemen*

[15:31] *** hanekomu left
[15:36] *** masak joined
[15:37] <Su-Shee> Moukeddar: Why don't you just click it on Wikipedia?

[15:39] <Moukeddar> something other than wiki maybe ?

[15:39] *** jimmy1980 left
[15:42] <Su-Shee> no, I couldn't be more extensive than the article without googling around and that you can do yourself. :)

[15:43] <Moukeddar> ok, i found what i was looking for

[15:44] <dalek> features: dbd012e | flussence++ | features.json:

[15:44] <dalek> features: Add Pod to features.json

[15:44] <dalek> features: review: https://github.com/perl6/features/commit/dbd012ebb4

[15:44] <dalek> features: 59e1a40 | flussence++ | process.pl:

[15:44] <dalek> features: Use U+2212 MINUS SIGN for "-" in output

[15:44] <dalek> features: review: https://github.com/perl6/features/commit/59e1a40a00

[15:46] <tadzik> flussence: what do you mean by 'parsing, no $=POD', so it doesn't break on a pod it encounters?

[15:46] *** jimmy1980 joined
[15:46] <masak> Moukeddar: 50 years ago, a computer was just a processor. nowadays, we think of it as CPU, keyboard, mouse, screen... most of those new parts have circuitry in them. ta-daa! distributed computing :P

[15:47] <mberends> Moukeddar: there are lots of helpful tutorials here, see clusters and MPI : https://computing.llnl.gov/?set=training&page=index

[15:48] *** _ilbot left
[15:48] <benabik> Moukeddar: At its simplest, distributed computing is having more than one computer work on a problem.  It's used… everywhere.  Technically, anything involving the internet is distributed.

[15:48] <Moukeddar> i got it, my idea is i think P2P network thingy

[15:49] *** _ilbot joined
[15:49] *** wamba joined
[15:49] <flussence> tadzik: yes

[15:50] <flussence> rakudo master errors out on #= IIRC

[15:50] <tadzik> oh, that's correct

[15:51] *** MayDaniel left
[15:51] *** mishin left
[15:52] <masak> Moukeddar: one of the most inspiring computing texts I've read is about distributed computing: http://logicerror.com/curiousYellow

[15:53] <Moukeddar> thanks masak i'm reading it

[15:54] <flussence> (I think of distributed computing as anything with fewer end products than power cables)

[15:55] *** chadadavis joined
[15:59] <Moukeddar> masak, that article reminds me of some film about smart nanobots working together :p

[16:00] <masak> aye. that's where we're heading.

[16:01] <masak> now we just need to make the nanobots run Perl 6.

[16:02] <Moukeddar> lol, good one masak  :)

[16:02] *** agentzh left
[16:04] <masak> we're laying out the plans for an initial army of Perl 6 nanobots right now, in jnthn's hotel room.

[16:05] <jnthn> wtf, I don't want nanobots in my hotel room

[16:05] <jnthn> ...unless they're beer making ones or something.

[16:05] <tadzik> oopsie, too late

[16:06] <masak> they're beer making ones. or something.

[16:06] <benabik> Little tiny nano-benders converting the world's water to beer.

[16:07] <jaffa4> If I am correct, the new perl6 framework will support different backends.

[16:08] <Moukeddar> that's greedy :p

[16:09] <Moukeddar> masak, the idea of yellow curious is pretty smart

[16:09] *** Su-Shee left
[16:11] <Moukeddar> impressive

[16:12] *** Axius joined
[16:14] *** Moukeddar left
[16:17] *** felher left
[16:17] *** felher joined
[16:18] <masak> jaffa4: yes.

[16:18] *** am0c joined
[16:33] <jaffa4> Are you planning some backends already?

[16:37] * moritz gets lots of spectest failures

[16:37] <jaffa4> Is it new?

[16:37] <moritz> this is a build on parrot master, but I don't know if that's the problem - the errors don't seem to indicate that

[16:38] <moritz> it's also on a different machine than the last successful spectest

[16:40] <moritz> has anybody spectested pmichaud++'s last commit already?

[16:40] <JimmyZ> npoe

[16:41] <JimmyZ> just got a new build

[16:43] * JimmyZ make spectest

[16:44] <JimmyZ> startup is a bit long

[16:47] *** cotto joined
[16:50] *** thou joined
[16:52] <JimmyZ> rakudo can't pass  instants-and-durations.t 

[16:53] *** cotto left
[16:53] *** Alias left
[16:55] * JimmyZ gives up

[16:55] *** am0c left
[16:56] *** Axius left
[17:06] *** araujo left
[17:16] <moritz> spectest clean on recommended parrot rev

[17:20] *** araujo joined
[17:23] *** cotto joined
[17:24] *** LimitSupremum joined
[17:25] <mberends> current nom on OS X fails only test 1 of S02-whitespace_and_comments/one-pass-parsing.t and aborts 3 tests of S32-trig/pi.t

[17:25] <cotto> any folks at yapc::eu hanging out here?  I'll need someplace to stay when I get to Riga before I can check into my room.

[17:26] <JimmyZ> nom: say (1 | 2 | 3)(3)

[17:26] <p6eval> nom: OUTPUT«Method 'postcircumfix:<( )>' not found for invocant of class 'Int'␤  in mu <anon> at src/gen/Metamodel.pm:2700␤  in method reify at src/gen/CORE.setting:3196␤  in method reify at src/gen/CORE.setting:3101␤  in method reify at src/gen/CORE.setting:3101␤  in method gimme at sr…

[17:29] <JimmyZ> how can use method postcircumfix:<( )> in  the Junction Class?

[17:29] <moritz> JimmyZ: on a junction of code objects

[17:29] <moritz> nom: say (* + 1 | * + 2).(5)

[17:29] <p6eval> nom: OUTPUT«any(6, 7)␤»

[17:30] <JimmyZ> nom: say { Junction.new(1,2,3)}.(3);

[17:30] <p6eval> nom: OUTPUT«Use of uninitialized value in string context␤(1, 2, 3)␤»

[17:31] <JimmyZ> moritz: thanks

[17:31] <cotto> moritz, are you going to and/or at yapc::eu?

[17:31] <moritz> cotto: no :(

[17:32] <cotto> shame about that

[17:33] *** crked left
[17:40] *** JimmyZ left
[17:42] *** MayDaniel joined
[17:44] *** cotto left
[17:51] *** envi left
[17:51] <moritz> baest: spectesting your pull request now

[17:51] <moritz> baest: I don't like the merge commits, so I'll squash all commit into one

[17:52] *** birdwindupbird joined
[17:54] *** MayDaniel left
[17:58] *** birdwindupbird left
[17:58] *** thou left
[17:58] *** birdwindupbird joined
[18:05] *** cotto joined
[18:07] *** buubot_backup left
[18:10] *** cotto left
[18:21] <moritz> *all commits

[18:22] *** MayDaniel joined
[18:23] *** lichtkind joined
[18:23] <lichtkind> rafl: please tell me if you arriving somewhere to maybe later join

[18:25] *** renormalist|work joined
[18:28] <pmichaud> good evening, #perl6

[18:28] <moritz> good pm, pm :-)

[18:30] *** buubot_backup joined
[18:34] *** lichtkind left
[18:37] <arnsholt> moritz: Have you ever worked with implementing numerical optimization algorithms? (I ask since I remember you own the Runge-Kutta module)

[18:50] *** birdwindupbird left
[18:51] *** Moukeddar joined
[19:03] <moritz> arnsholt: not optimization

[19:03] <arnsholt> Dang. I was hoping I might be able to pick your brains a bit =)

[19:03] <moritz> arnsholt: I've built Math::Model, which offers an intuitive way to write systems or ODEs

[19:04] *** MayDaniel left
[19:04] <arnsholt> Yeah, not quite what I need, unfortunately

[19:05] *** nbrown left
[19:07] <dalek> rakudo/nom: 6a4783e | (Martin Kjeldsen)++ | src/core/Any.pm:

[19:07] <dalek> rakudo/nom: Replace $by in min,max with &infix:<cmp>

[19:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6a4783e6a8

[19:08] <moritz> baest++ # needs a bit extra karma, since I squashed his commits into one

[19:09] <moritz> nom: multi f(*@a) { 1 }; multi f($, $, $b) { 2 }; say f(1, 2, 3)

[19:09] <p6eval> nom: OUTPUT«2␤»

[19:10] *** s1n left
[19:10] <moritz> nom: proto f(*@) {*}  multi f(*@a) { 1 }; multi f($, $, $b) { 2 }; say f(1, 2, 3)

[19:10] <p6eval> nom: OUTPUT«===SORRY!===␤Confused at line 1, near "proto f(*@"␤»

[19:10] * jnthn back

[19:10] <moritz> nom: proto f(*@) {*};  multi f(*@a) { 1 }; multi f($, $, $b) { 2 }; say f(1, 2, 3)

[19:10] <dalek> nqp: e0f623d | tadzik++ | src/6model/reprs/P6opaque.c:

[19:10] <dalek> nqp: Move write bareer to a correct place; jnthn++

[19:10] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e0f623d678

[19:10] <p6eval> nom: OUTPUT«2␤»

[19:10] <tadzik> o/

[19:11] <jnthn> Beer and Russian nom \o/

[19:11] <jnthn> er, ном :-)

[19:13] <flussence> .oO( Hall of Mirrors? )

[19:13] *** birdwindupbird joined
[19:14] *** Moukeddar left
[19:19] *** kolyuchiy joined
[19:20] *** worr joined
[19:23] *** kaare_ left
[19:24] <dalek> rakudo/nom: c0e4135 | tadzik++ | / (4 files):

[19:24] <dalek> rakudo/nom: Implement Formatting Codes in Pod strings

[19:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c0e4135de0

[19:25] <tadzik> whew, the whole day of work :)

[19:25] <tadzik> I wonder if parsing S26 still gives sensemaking results now :)

[19:27] <moritz> I just noticed that 6a4783e doesn't quite work the way I would like it to

[19:27] <moritz> fix upcoming, after being tested

[19:27] <moritz> but formatting codes are exciting :-)

[19:28] <tadzik> they even work! :P

[19:29] <moritz> \o/

[19:29] * tadzik checks out the new S26.txt

[19:31] *** nwc10 joined
[19:31] <nwc10> Is Perl 6 done yet? :-) Or is there more hackathon tomorrow?

[19:32] <lue> hello planet o/

[19:32] <jnthn> nwc10: Patches welcome ;-) ;-)

[19:32] <jnthn> nwc10: I'm sure some of us will be hacking tomorrow :)

[19:33] <jnthn> nwc10: Though there's nothing "official" :)

[19:33] <nwc10> do you want the wrong answer very fast? Or were you actually inisiting on having something correct too?

[19:33] <lue> .oO(today is a good day I think to reinstall the master branch of rakudo and work on my Pod6 parser)

[19:33] <moritz> nom: multi f(*@a, :&by!) { 1 } ; multi f(*@a) { 2 }; say f(1, 2)

[19:33] <p6eval> nom: OUTPUT«Ambiguous dispatch to multi 'f'. Ambiguous candidates had signatures:␤:(Positional @a, Callable &by)␤:(Positional @a)␤␤  in sub f at /tmp/_b6rrh83TZ:1␤  in mu <anon> at /tmp/_b6rrh83TZ:1␤  in mu <anon> at /tmp/_b6rrh83TZ:1␤␤»

[19:33] <moritz> jnthn: see above, bug

[19:33] <nwc10> jnthn: IIRC we land at 16:30 tomorrow, so I don't think I'm going to be anywhere usefully near a hackathon

[19:34] <moritz> jnthn: the mandatory named seems to be ignored

[19:34] <jnthn> nwc10: OK. But you'll be at the pre-conference meetup for a beerothon? ;-)

[19:34] <jnthn> moritz: Ew. :/

[19:34] <nwc10> I don't know about the "thon" bit.

[19:34] <jnthn> :)

[19:35] <nwc10> I hope to be somewhere in Riga, with food at some point. And drink

[19:35] <jnthn> moritz: I'm not quite sure what's going on there...but all the trait mods rely on required named args.

[19:36] <moritz> nom: multi f(*@a, :$by!) { 1 } ; multi f(*@a) { 2 }; say f(1, 2)

[19:36] <jnthn> So it can't be completely ignoring them. 

[19:36] <p6eval> nom: OUTPUT«Ambiguous dispatch to multi 'f'. Ambiguous candidates had signatures:␤:(Positional @a, Any $by)␤:(Positional @a)␤␤  in sub f at /tmp/lJ5IR5hkIm:1␤  in mu <anon> at /tmp/lJ5IR5hkIm:1␤  in mu <anon> at /tmp/lJ5IR5hkIm:1␤␤»

[19:36] <jnthn> moritz: maybe slurpy related...

[19:36] <moritz> nom: multi f(:$by!) { 1 } ; multi f() { 2 }; say f()

[19:36] <p6eval> nom: OUTPUT«2␤»

[19:36] <moritz> jnthn: seems like, yes

[19:36] <jnthn> nom: multi f(@a, :$by!) { 1 } ; multi f(@a) { 2 }; say f(1, 2)

[19:36] <p6eval> nom: OUTPUT«No applicable candidates found to dispatch to for 'f'. Available candidates are:␤:(Positional @a, Any $by)␤:(Positional @a)␤␤  in sub f at /tmp/I81p5GlGAO:1␤  in mu <anon> at /tmp/I81p5GlGAO:1␤  in mu <anon> at /tmp/I81p5GlGAO:1␤␤»

[19:36] <jnthn> nom: multi f(@a, :$by!) { 1 } ; multi f(@a) { 2 }; say f([1, 2])

[19:36] <p6eval> nom: OUTPUT«2␤»

[19:39] *** uniejo_in_riga joined
[19:40] *** soh_cah_toa joined
[19:40] *** chadadavis left
[19:47] *** worr left
[19:49] *** molaf__ left
[19:52] <moritz> it's amazing how many cases multi dispatch tests need to cover

[19:52] <moritz> (and how many cases the dispatcher needs to cover, too)

[19:55] <dalek> roast: 487c5f9 | moritz++ | S06-multi/positional-vs-named.t:

[19:55] <dalek> roast: [multi] test interaction of slurpy positional and mandatory named param

[19:55] <dalek> roast: review: https://github.com/perl6/roast/commit/487c5f9b8f

[19:56] <moritz> jnthn: you can unfudge that one when you fix it :-)

[19:57] *** nwc10 left
[19:58] *** cotto joined
[20:00] *** noganex_ joined
[20:01] <jnthn> ;-)

[20:01] <jnthn> moritz: Yeah, the second bit is the harder part...given it needs to be fast

[20:03] *** noganex left
[20:06] <tadzik> nom: for 1..5 -> $a, $b { say $a, $b } # shouldn't that work?

[20:06] <p6eval> nom: OUTPUT«12␤34␤Not enough positional parameters passed; got 1 but expected 2␤  in block <anon> at /tmp/UlyzGuC9pX:1␤  in method reify at src/gen/CORE.setting:3199␤  in method reify at src/gen/CORE.setting:3104␤  in method reify at src/gen/CORE.setting:3104␤  in method gimme at src/ge…

[20:07] *** cotto left
[20:08] <jnthn> tadzik: ?

[20:08] <jnthn> (on the $b)

[20:08] <moritz> nom: for 1..5 -> $a, $b? { say $a, $b }

[20:08] <p6eval> nom: OUTPUT«12␤34␤5Mu()␤»

[20:09] *** donri joined
[20:09] <tadzik> oh, that's fine

[20:09] <tadzik> moritz++

[20:09] <moritz> jnthn++ actually :-)

[20:09] *** colomon left
[20:10] <jnthn> Heh. And tadzik is sat 2 feet away from me. :)

[20:10] <tadzik> :)

[20:10] <tadzik> oh

[20:10] <tadzik> I thought you didn't understand the question

[20:10] <tadzik> that's what you get with the '?' and :D

[20:10] <jnthn> No, was just being terse :P

[20:10] <tadzik> what'n'lol

[20:10] <moritz> tadzik: ./perl6 --doc $foo   now emits things like FormattingCode<98395288>

[20:11] <tadzik> moritz: yeah, I know that. Working on those

[20:11] <tadzik> will probably need some more fixes in the grammars/actions themselves, the way of thinking changed a bit

[20:12] <moritz> maybe a FormattingCode should  stringify to its text contents

[20:12] <tadzik> previously it made sense to make a paragraph object hold an array of lines, now it doesn't have the point anymore

[20:12] <tadzik> could be, yes

[20:13] *** lichtkind joined
[20:13] <tadzik> now it doesn't really emit a proper twine. I commited a bit too earlish

[20:14] <lichtkind> tadzik: were at kabuki where you?

[20:14] <tadzik> lichtkind: today? I wasn't

[20:14] <tadzik> lichtkind: I was half into my gsoc work after the hackathon and I didn't want to lose the mindflow

[20:16] <lichtkind> tadzik: allright

[20:16] <tadzik> lichtkind: were you partying at the same place today?

[20:17] *** jaldhar joined
[20:19] * lue thinks a rewrite of SUPERNOVA is in order.

[20:21] <dalek> rakudo/nom: 290edf6 | moritz++ | src/core/Any.pm:

[20:21] <dalek> rakudo/nom: correct usage of proto

[20:21] <dalek> rakudo/nom: 

[20:21] <dalek> rakudo/nom: If the proto never re-dispatches to its candidates, there is

[20:21] <dalek> rakudo/nom: no point in having the candidates at all

[20:21] <dalek> rakudo/nom: 

[20:21] <dalek> rakudo/nom: There's still a multi dispatch bug that prevents us from running the

[20:21] <dalek> rakudo/nom: candidates without named param though :(

[20:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/290edf60c2

[20:21] <dalek> rakudo/nom: 88ba2f1 | moritz++ | src/core/Any.pm:

[20:21] <dalek> rakudo/nom: work around a multi dispatch bug

[20:21] <dalek> rakudo/nom: 

[20:21] <dalek> rakudo/nom: Unfortunately that means going back to a repetition of the default value

[20:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/88ba2f16e2

[20:23] <dalek> rakudo/nom: deb5c7b | jonathan++ | / (6 files):

[20:23] <dalek> rakudo/nom: Merge branch 'nom' of github.com:rakudo/rakudo into nom

[20:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/deb5c7b0ef

[20:23] *** pothos left
[20:23] *** y3llow left
[20:25] *** y3llow joined
[20:25] *** pothos_ joined
[20:25] *** pothos_ is now known as pothos

[20:26] <lue> Do proto regexes work now? (Or just normal proto subs/methods)

[20:30] *** uniejo_in_riga left
[20:31] *** timbunce left
[20:37] *** timbunce joined
[20:39] <jnthn> lue: no protoregexen in nom yet

[20:48] *** M_o_C joined
[20:50] *** lichtkind left
[20:51] *** uniejo_in_riga joined
[20:52] *** jaldhar left
[20:52] *** jaldhar joined
[20:54] *** masak left
[20:55] *** awwaiid left
[20:55] *** timbunce left
[20:56] *** awwaiid joined
[20:57] *** masak joined
[20:59] *** ggoebel joined
[21:04] *** ggoebel left
[21:06] *** uniejo_in_riga left
[21:09] *** masak left
[21:10] *** ggoebel joined
[21:10] *** masak joined
[21:11] <jnthn> Time for some sleep... &

[21:12] <tadzik> jnthn, masak: I'm home

[21:12] <masak> tadzik! \o/

[21:12] <masak> tadzik: I... I made it home OK too.

[21:12] <tadzik> :) I did one redundant circle

[21:12] <masak> those are the best kind.

[21:12] <tadzik> but I got to know the old town more at least

[21:13] <masak> there you go.

[21:13] <jnthn> tadzik: :)

[21:14] <jnthn> zzz

[21:14] <tadzik> gnite

[21:16] <masak> 'night, jnthn 

[21:16] <masak> dream of segfault-free algorithms written in C.

[21:21] <lue> I think I'll go implement a Digest:: module (as suggested in the most wanted modules), and avoid getting hung up on the unified API bit (at least for now).

[21:22] <masak> sounds good.

[21:25] *** ggoebel left
[21:26] *** JodaZ joined
[21:28] *** Moukeddar joined
[21:30] *** ggoebel joined
[21:33] *** benabik left
[21:34] *** ggoebel left
[21:39] *** ggoebel joined
[21:39] *** drbean joined
[21:41] *** Moukeddar left
[21:41] *** birdwindupbird left
[21:43] *** jfried joined
[21:44] *** Psyche^ joined
[21:47] *** ggoebel left
[21:48] *** Patterner left
[21:48] *** Psyche^ is now known as Patterner

[21:52] *** ggoebel joined
[21:53] *** thou joined
[21:56] *** lichtkind joined
[22:09] *** thou left
[22:17] *** masak left
[22:21] *** kolyuchiy left
[22:24] *** M_o_C left
[22:29] *** colomon joined
[22:33] *** crked joined
[22:34] *** fbass joined
[22:34] *** fbass left
[22:36] *** whiteknight joined
[22:37] *** LimitSupremum left
[22:38] *** worr joined
[22:44] <sorear> good * #perl6

[22:45] *** jaffa4 left
[22:46] *** jimmy1980 left
[22:47] *** jimmy1980 joined
[22:58] *** lichtkind left
[22:59] *** Mowah joined
[22:59] *** Mowah left
[23:03] <dalek> rakudo/nom: 482e96e | Coke++ | t/spectest.data:

[23:03] <dalek> rakudo/nom: run more tests, track failure modes

[23:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/482e96e7d3

[23:05] <[Coke]> a LOT of tests just all changed their failure modes to a new common one.

[23:07] <[Coke]> Method 'push' not found for invocant of class 'U

[23:07] <[Coke]> ndef'

[23:07] *** cognominal_ left
[23:07] <[Coke]> s/tests/tests that were already failing/

[23:07] *** donri left
[23:07] *** cognominal joined
[23:07] *** cogno joined
[23:08] *** molaf joined
[23:09] *** cotto joined
[23:10] *** cogno_ left
[23:10] *** whiteknight left
[23:11] *** whiteknight joined
[23:12] <cotto> Does anyone in Riga have a couch or something I could crash on until my room opens up 10-12?

[23:18] *** molaf_ joined
[23:19] *** molaf left
[23:20] *** worr left
[23:21] <[Coke]> Dang, am I the only one not in Riga? ;)

[23:21] *** worr joined
[23:23] *** LimitSupremum joined
[23:28] *** soh_cah_toa left
[23:28] <sorear> [Coke]: I'm not either :(

[23:30] *** worr left
[23:40] <takadonet1> [Coke]: me too :(

[23:41] * cotto would rather not be atm

[23:42] <cotto> that'll change once I have a bed

[23:43] <cotto> then it'll be great

[23:44] <[Coke]> cotto: que hora es out there?

[23:45] <cotto> [Coke], 0245

[23:46] <tadzik> cotto: do you have a sleeping bag or so?

[23:47] <cotto> tadzik, nope.  Packing light isn't turning out to work in my favor.

[23:47] <tadzik> cotto: I'm in a hotel room with rafl, but we only have a piece of floor for you :/

[23:47] <cotto> tadzik, that'd be fine.  Where are you at?

[23:49] <tadzik> cotto: Kolonna hotel. But seriously, we don't even have a spare pillow. If it's fine for you feel free to come

[23:49] <tadzik> Tirgoņu iela 9

[23:51] <rafl> note that we have no spare pillows or blankets, though

[23:51] <rafl> however, timesharing beds wmight ve a possibility

[23:52] <cotto> rafl, floor space sounds amazing at this point.  I can use my clothes as a pillow.

[23:52] <tadzik> cotto: he just went asleep-ish. Are you ircing from your phone or so?

[23:55] <cotto> tadzik, no.  The hostel I'm at has free wifi.  I'm a 5 minute walk from you.

[23:55] <cotto> tadzik, do I need to do anything special to get in?

[23:55] <cotto> (5 minutes if I don't get lost)

[23:56] <tadzik> cotto: I'll get down on the street and get you in

[23:56] <tadzik> ETA?

[23:56] <cotto> tadzik, great.  See you in 5 minutes or so.

[23:56] <tadzik> would you recognize me?

[23:56] <tadzik> Olive hoody, black pants

[23:57] *** soh_cah_toa joined
[23:58] *** benabik joined
