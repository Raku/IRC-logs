[00:01] <dalek> niecza: 8cf84c4 | (Solomon Foster)++ | t/spectest.data:

[00:01] <dalek> niecza: Turn on S03-operators/short-circuit.t.

[00:01] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8cf84c46d0

[00:01] <dalek> niecza: d1c33de | (Solomon Foster)++ | lib/CORE.setting:

[00:01] <dalek> niecza: Fix postfix:<i> so it handles Complex numbers properly.

[00:01] <dalek> niecza: review: https://github.com/sorear/niecza/commit/d1c33ded62

[00:02] *** awoodland joined
[00:04] *** wallberg left
[00:13] <sorear> colomon: pong

[00:23] *** kaare_ left
[00:27] *** Chillance left
[00:31] *** xjiujiu joined
[00:31] *** alester left
[00:32] *** am0c joined
[00:37] *** ksi left
[00:49] *** xjiujiu left
[00:49] *** donri left
[00:59] *** X99 joined
[01:06] <colomon> sorear: whoops

[01:06] <colomon> sorear: I've got a couple of failing spectests here now.  I think from changes of yours earlier in the day?

[01:07] <colomon> S13-type-casting/methods.t and t/spec/S32-trig/atan2.t

[01:18] <sorear> colomon: this test (S13) is pretty nonsense

[01:19] <sorear> subclassing Str?  and then calling new? seriously?

[01:23] <colomon> it's dodgy, for sure, but I believed it's always worked in Rakudo...

[01:24] <colomon> do you have a reason to think it is actually wrong?  I'm certainly not attached to it...

[01:24] <sorear> yes

[01:24] <sorear> the test predates Cool, and we use Cool now to mark stuff that can be coerced

[01:25] <dalek> roast: 307d69f | sorear++ | S13-type-casting/methods.t:

[01:25] <dalek> roast: [S13-type-casting/methods] We use Cool to mark Str-usable things now; refudge

[01:25] <dalek> roast: review: https://github.com/perl6/roast/commit/307d69fc52

[01:26] <sorear> the second failure is very real though

[01:27] <colomon> niecza: 10.Rat(1e-9)

[01:27] <p6eval> niecza v12-124-gd1c33de: OUTPUT¬´Unhandled exception: Excess arguments to Int.Rat, used 1 of 2 positionals‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 0 (Int.Rat @ 0) ‚ê§  at /tmp/QXCba_zo2W line 1 (mainline @ 1) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 2486 (ANON @ 2) ‚ê§  at /hom‚Ä¶

[01:28] <dalek> niecza: 46519aa | sorear++ | lib/CORE.setting:

[01:28] <dalek> niecza: Oops, adding this made no sense

[01:28] <dalek> niecza: review: https://github.com/sorear/niecza/commit/46519aa9ac

[01:28] *** envi_ joined
[01:29] <colomon> that's got it

[01:29] *** cooper left
[01:29] *** cooper joined
[01:38] <dalek> roast: d0e5790 | (Solomon Foster)++ | S32-num/power.t:

[01:38] <dalek> roast: Unfudge test that works now.

[01:38] <dalek> roast: review: https://github.com/perl6/roast/commit/d0e5790443

[01:38] <dalek> roast: 797dfa0 | (Solomon Foster)++ | S05-grammar/action-stubs.t:

[01:38] <dalek> roast: Unfudge test that works now.

[01:38] <dalek> roast: review: https://github.com/perl6/roast/commit/797dfa090d

[01:41] *** drbean left
[01:44] *** alvis left
[01:46] *** drbean joined
[01:50] *** hundskatt joined
[01:54] <colomon> sorear: originally what I pinged you for was for help writing infix:<^^> and infix:<xor>.  but after studying the source, I figure it's too complicated for an easy project tonight.  :)

[02:20] *** Ingis left
[02:23] <dalek> roast: 0956e55 | (Solomon Foster)++ | S0 (2 files):

[02:23] <dalek> roast: Fudge for niecza.

[02:23] <dalek> roast: review: https://github.com/perl6/roast/commit/0956e558a2

[02:23] *** wolfman2000 joined
[02:23] <dalek> niecza: bc9276f | (Solomon Foster)++ | t/spectest.data:

[02:23] <dalek> niecza: Turn on S02-lexical-conventions/unspace.t.

[02:23] <dalek> niecza: review: https://github.com/sorear/niecza/commit/bc9276fda5

[02:26] <colomon> perl6: say "a".ord

[02:26] <p6eval> niecza v12-125-g46519aa: OUTPUT¬´Unhandled exception: Unable to resolve method ord in class Str‚ê§  at /tmp/4ISJ7ffSZS line 1 (mainline @ 1) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 2485 (ANON @ 2) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 2486 (module-CORE @ 59) ‚ê§  at /home/p‚Ä¶

[02:26] <p6eval> ..pugs b927740, rakudo dfd1d7: OUTPUT¬´97‚ê§¬ª

[02:32] <colomon> sorear: ping?

[02:34] <colomon> niecza: say "a".codes

[02:34] <p6eval> niecza v12-125-g46519aa: OUTPUT¬´1‚ê§¬ª

[02:35] <colomon> nom: say "hello".ord

[02:35] <p6eval> nom dfd1d7: OUTPUT¬´104‚ê§¬ª

[02:38] *** mkramer1 left
[02:42] <sorear> colomon: pong

[02:43] <colomon> o/

[02:43] <colomon> one moment,

[02:44] <colomon> sorry, wife had a present wrapping disaster just then

[02:44] <colomon> I think I meant to be asking about implementing .ord

[02:45] <colomon> I distracted myself by actually going a long way toward figuring out the C# aspects of the problem.

[02:46] <colomon> nom: say "".ord

[02:46] <p6eval> nom dfd1d7: OUTPUT¬´Cannot get character of empty string‚ê§  in method ord at src/gen/CORE.setting:1734‚ê§  in block <anon> at /tmp/xrwqL7xQub:1‚ê§  in <anon> at /tmp/xrwqL7xQub:1‚ê§¬ª

[02:46] <sorear> niecza: say ord("‰∏É")

[02:46] <p6eval> niecza v12-125-g46519aa: OUTPUT¬´19971‚ê§¬ª

[02:47] <sorear> colomon: LHF.

[02:47] <colomon> oh, geez!

[02:47] <colomon> never thought to check that

[02:47] <colomon> okay, I can take it from there.  

[02:47] * colomon wishes he had an embarrassed smiley face

[02:50] <dalek> niecza: 7c57deb | (Solomon Foster)++ | lib/CORE.setting:

[02:50] <dalek> niecza: Add Cool.ord.

[02:50] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7c57deb50f

[02:50] <dalek> niecza: 7b80047 | (Solomon Foster)++ | t/spectest.data:

[02:50] <dalek> niecza: Turn on S02-literals/quoting-unicode.t.

[02:50] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7b80047bc0

[02:51] <colomon> well, sweet, that's a 72 test file which now works without any fudging at all.

[02:53] <colomon> nom: say ords("hello")

[02:53] <p6eval> nom dfd1d7: OUTPUT¬´104 101 108 108 111‚ê§¬ª

[02:53] <colomon> perl6: say ords("hellO")

[02:53] <p6eval> pugs b927740: OUTPUT¬´*** No such subroutine: "&ords"‚ê§    at /tmp/iqnwvDDeWw line 1, column 5 - line 2, column 1‚ê§¬ª

[02:53] <p6eval> ..rakudo dfd1d7: OUTPUT¬´104 101 108 108 79‚ê§¬ª

[02:53] <p6eval> ..niecza v12-125-g46519aa: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Undeclared routine:‚ê§    'ords' used at line 1‚ê§‚ê§Unhandled exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 880 (die @ 2) ‚ê§  at /home/p6eval/niecza/src/STD.pm6 line 1143 (P6.comp_unit @ 32) ‚ê§  at /hom‚Ä¶

[02:56] <colomon> nom: say ords("hello").chrs

[02:56] <p6eval> nom dfd1d7: OUTPUT¬´hello‚ê§¬ª

[03:00] <colomon> niecza: say "hello".comb

[03:00] <p6eval> niecza v12-125-g46519aa: OUTPUT¬´h e l l o‚ê§¬ª

[03:00] <colomon> :\

[03:02] <sorear> :\ ?

[03:02] <colomon> niecza> "hello".comb

[03:02] <colomon> Unable to resolve method postcircumfix:<( )> in class Any

[03:02] <colomon>   at /Users/colomon/tools/niecza/lib/CORE.setting line 501 (Cool.comb @ 7) 

[03:03] <colomon> My only change was adding two subs in CORE.setting.

[03:04] <sorear> cool, you've discovered a new REPL bug

[03:04] <colomon> \o/

[03:04] <sorear> comb doesn't work in the REPL for me either

[03:05] <colomon> ooo, looks like my code does indeed work.  sorear++

[03:08] *** Ingis joined
[03:10] *** arlinius joined
[03:12] <colomon> niecza: say "\c[LATIN CAPITAL LETTER A, COMBINING DOT ABOVE]"

[03:12] <p6eval> niecza v12-128-g7b80047: OUTPUT¬´AÃá‚ê§¬ª

[03:12] <[Coke]> niecza: say q{"\00"}

[03:12] <p6eval> niecza v12-128-g7b80047: OUTPUT¬´"\00"‚ê§¬ª

[03:13] <dalek> roast: 5c867ca | (Solomon Foster)++ | S29-conversions/ord_and_chr.t:

[03:13] <dalek> roast: Fudge for niecza.

[03:13] <dalek> roast: review: https://github.com/perl6/roast/commit/5c867ca000

[03:13] <dalek> roast: 6725641 | coke++ | S02-literals/char-by-number.t:

[03:13] <dalek> roast: niecza fudge

[03:13] <dalek> roast: review: https://github.com/perl6/roast/commit/672564130b

[03:14] <dalek> niecza: 98e6ce1 | coke++ | t/spectest.data:

[03:14] <dalek> niecza: run fudged test

[03:14] <dalek> niecza: review: https://github.com/sorear/niecza/commit/98e6ce1ab5

[03:17] <dalek> niecza: cbdb331 | coke++ | t/spectest.data:

[03:17] <dalek> niecza: run (already) fudged test

[03:17] <dalek> niecza: review: https://github.com/sorear/niecza/commit/cbdb3319cd

[03:22] <dalek> niecza: 481d20d | (Solomon Foster)++ | lib/CORE.setting:

[03:22] <dalek> niecza: Add .chr, .ords, .chrs, ords, and chrs.

[03:22] <dalek> niecza: review: https://github.com/sorear/niecza/commit/481d20d3c5

[03:22] <dalek> niecza: 4102b49 | (Solomon Foster)++ | t/spectest.data:

[03:22] <dalek> niecza: Turn on S29-conversions/ord_and_chr.t.

[03:22] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4102b4905c

[03:23] <dalek> niecza: 64f5cf1 | coke++ | t/spectest.data:

[03:23] <dalek> niecza: run another test

[03:23] <dalek> niecza: review: https://github.com/sorear/niecza/commit/64f5cf1754

[03:23] <colomon> [Coke]: That ord_and_chr.t was another 247 passing tests

[03:25] <[Coke]> I just added a couple of dozen.

[03:25] <colomon> It's been a good evening for it.  :)

[03:26] <dalek> roast: 20ad8da | Coke++ | S02-names-vars/contextual.t:

[03:26] <dalek> roast: @*INC isn't always set.

[03:26] <dalek> roast: review: https://github.com/perl6/roast/commit/20ad8dafae

[03:27] <[Coke]> that's a left over from weeks ago that I just found on my home machine.

[03:28] <colomon> 'night, all

[03:29] <[Coke]> colomon: ~~

[03:31] *** mkramer joined
[03:33] <[Coke]> sorear: S02-literals/hex_chars.t fails only one test for me (but is hard to fudge)

[03:34] <[Coke]> so maybe you can wrangle it. ;)

[03:36] *** Psyche^ joined
[03:37] *** Patterner left
[03:37] *** Psyche^ is now known as Patterner

[03:39] <sorear> colomon++ [Coke]++

[03:40] <[Coke]> t/spec/S05-mass/named-chars.t looks tempting.

[03:40] *** mkramer left
[03:40] <colomon> [Coke]: I fudged it so it runs to completion, but it's got gazillions of fails.

[03:40] <dalek> roast: f1b8437 | coke++ | integration/advent2009-day19.t:

[03:40] <dalek> roast: niecza fudge

[03:40] <dalek> roast: review: https://github.com/perl6/roast/commit/f1b8437eb6

[03:41] <dalek> niecza: 794a876 | coke++ | t/spectest.data:

[03:41] <dalek> niecza: run more tests

[03:41] <dalek> niecza: review: https://github.com/sorear/niecza/commit/794a876328

[03:42] *** fridim_ joined
[03:44] *** alc joined
[03:49] *** docdurdee joined
[03:49] <sorear> whyfor the fails?

[03:52] *** alc left
[03:54] *** hundskatt left
[03:54] <sorear> oh

[03:55] *** lutok left
[03:59] <dalek> niecza: 59989fe | sorear++ | / (2 files):

[03:59] <dalek> niecza: Fix case being ignored on multi-character backslash escapes; we now pass S05-mass/named-chars.t

[03:59] <dalek> niecza: review: https://github.com/sorear/niecza/commit/59989fe748

[03:59] *** drbean left
[04:00] *** docdurdee left
[04:03] <sorear> [Coke]: hex_chars.t will fix itself after the next bootstrap

[04:03] <sorear> it's one of the issues that results from boot/ not being surrogates aware

[04:03] <sorear> so the chr() call inside the compiler fails

[04:05] <[Coke]> ah.

[04:06] *** drbean joined
[04:06] <[Coke]> before 59989fe, we got up to 12198 passing tests.

[04:07] *** shinobicl_ joined
[04:08] <[Coke]> 377 more from that test.

[04:08] <[Coke]> nom: say (12198+377)/18418

[04:08] <p6eval> nom dfd1d7: OUTPUT¬´0.682755999565642‚ê§¬ª

[04:09] <[Coke]> nom: say (18418*.7-(12198+377)).Int

[04:09] <p6eval> nom dfd1d7: OUTPUT¬´317‚ê§¬ª

[04:09] <[Coke]> sorear++

[04:09] *** agentzh joined
[04:10] <sorear> niecza: say (12198+377)/18418

[04:10] <p6eval> niecza v12-135-g59989fe: OUTPUT¬´0.68275599956564226‚ê§¬ª

[04:10] <sorear> I fixed this yesterday :P

[04:10] <sorear> perl6: say log(2) - ~log(2)

[04:10] <p6eval> rakudo dfd1d7: OUTPUT¬´3.33066907387547e-16‚ê§¬ª

[04:10] <p6eval> ..pugs b927740, niecza v12-135-g59989fe: OUTPUT¬´0‚ê§¬ª

[04:20] <moritz> good morning

[04:20] *** awoodland left
[04:21] <moritz> phenny: tell tadzik the failure in Panda is easy to fix "class Pand::Ecosystem is Pies::Ecosystem" should have s/is/does/. Otherwise it tries to pun a class from the role, and fails because methods are stubbed

[04:21] <phenny> moritz: I'll pass that on when tadzik is around.

[04:21] <moritz> the error message might be a tad LTA though

[04:22] <moritz> phenny: tell tadzik I can push the fix if you give me a commit bit :-)

[04:22] <phenny> moritz: I'll pass that on when tadzik is around.

[04:23] *** hugme joined
[04:23] <moritz> hugme: list projects

[04:23] *** ChanServ sets mode: +v hugme

[04:23] <hugme> moritz: I know about Math-Model, Math-RungeKutta, MiniDBI, bench-scripts, book, gge, hugme, ilbot, java2perl6, json, modules.perl6.org, november, nqp-rx, nqpbook, perl6, perl6-examples, perl6-wtop, proto, pugs, rakudo, star, svg-matchdumper, svg-plot, tardis, try.rakudo.org, tufte, ufo, web, yapsi

[04:23] <moritz> no panda :(

[04:23] <sorear> no niecza either.

[04:24] <sorear> did we ever get the github org thing resolved?

[04:24] <moritz> which thing do you mean?

[04:25] <sorear> iirc there were issues with github orgs that prevented rakudo from working after perl6 became an org

[04:25] * moritz continues to backlog, and finds that tadzik++ already came to the same conclusion (re panda)

[04:25] <moritz> sorear: I don't remember such issues

[04:26] <moritz> sorear: only hugme wasn't able to add people to an organization, because the organization API wasn't working back then

[04:27] <sorear> that's what I mean, "hugme: add foo to rakudo"

[04:27] <moritz> hugme: add sorear to perl6

[04:27] <hugme> moritz: You need to register with freenode first

[04:27] <moritz> hugme: add sorear to perl6

[04:27] *** hugme left
[04:28] *** hugme joined
[04:28] <moritz> urks, seems that thing is broken again

[04:28] *** ChanServ sets mode: +v hugme

[04:28] <moritz> malformed JSON string, neither array, object, number, string or atom, at character offset 0 (before "LWP will support htt...") at /home/moritz/perl5/perlbrew/perls/perl-5.14.1/lib/site_perl/5.14.1/JSON/Any.pm line 571.

[04:28] <moritz> that's how hugme dies

[04:28] <moritz> but it worked before, and it's probably just a SMOP to fix, not a fundamental issue

[04:30] <moritz> hugme: hug github

[04:30] * hugme hugs github

[04:32] <dalek> niecza: 525ca24 | sorear++ | lib/UCD.cs:

[04:32] <dalek> niecza: Add support for the roast-defined LF, CR, FF, NEL aliases

[04:32] <dalek> niecza: review: https://github.com/sorear/niecza/commit/525ca24c0d

[04:32] *** hugme left
[04:32] *** hugme joined
[04:33] *** ChanServ sets mode: +v hugme

[04:33] <moritz> hugme: add moritz to perl6

[04:33] * hugme hugs moritz. Welcome to the perl6 github organization

[04:33] <moritz> ah, an upgrade of Net::GitHub fixed it

[04:33] <moritz> yay for easy maintenance :-)

[04:34] <dalek> roast: 34bcde0 | sorear++ | S05-mass/named-chars.t:

[04:34] <dalek> roast: [S05-mass/named-chars] Unfudge for niecza

[04:34] <dalek> roast: review: https://github.com/perl6/roast/commit/34bcde0579

[04:34] <sorear> 44 more tests

[04:35] <sorear> moritz: SMO"P" eh :)

[04:36] *** drbean left
[04:36] <moritz> :-)

[04:36] <moritz> sorear: it was, I just let somebody else do the programming :-)

[04:37] *** kaleem joined
[04:39] <moritz> let's see if an update of POE::Component::IRC::Plugin::AutoJoin also fixes the problem that hugme often fails to rejoin

[04:39] *** hugme left
[04:40] *** hugme joined
[04:40] *** ChanServ sets mode: +v hugme

[04:42] *** drbean joined
[04:48] *** shinobicl_ left
[04:59] *** drbean left
[05:06] *** mikemol left
[05:12] *** drbean joined
[05:20] *** envi_ left
[05:23] *** alvis joined
[05:26] *** alvis_ joined
[05:28] *** alvis left
[05:30] * moritz tries to sleep again

[05:30] <sorear> gn

[05:32] *** alvis_ left
[05:34] <masak> morg'n, #perl6

[05:34] <sorear> o/ mask

[05:35] <sorear> waitwaitwait.  Why are masak and moritz in opposition if they're both in the CEST/EEST region?

[05:36] *** molaf joined
[05:39] *** kaleem left
[05:44] <masak> sorear: I can only guess because moritz wanted a few extra shuts of eye due to wakeful child-rearing.

[05:47] <masak> and I'm early up, because I'm still partly on Hong Kong time. :)

[05:47] <masak> ss/early up/up early/

[05:49] * masak is stoked about this year's p6cc, and want to make other people excited about it too

[05:50] <sorear> *muhahahahahaa8*

[05:51] <sorear> masak: backlogged any yet?

[05:54] <dalek> roast: 42cc279 | sorear++ | S05-mass/properties-script.t:

[05:54] <dalek> roast: [S05-mass/properties-script] Bidi, lookahead

[05:54] <dalek> roast: 

[05:54] <dalek> roast: Restores the negative lookahead tests that were removed in f199800d;

[05:54] <dalek> roast: updates Bidi_Class checks to use valued property syntax; adds missing

[05:54] <dalek> roast: underscores to Old_Italic and Canadian_Aboriginal.

[05:54] <dalek> roast: review: https://github.com/perl6/roast/commit/42cc27932e

[05:55] <sorear> 361 more passing tests

[05:55] <dalek> niecza: 45f825d | sorear++ | / (2 files):

[05:55] <dalek> niecza: Implement usage of pseudo-properties like :Letter for all gc/sc aliases

[05:55] <dalek> niecza: review: https://github.com/sorear/niecza/commit/45f825d3e9

[05:56] <masak> sorear: I'm backlogging now and then, but I'm still on 2011-12-04.

[05:56] <masak> sorear: was there anything noteworthy in the past few hours that I should have seen?

[05:57] <sorear> coke, colomon, and I have been attacking spectests is all.

[05:57] <sorear> niecza: say (12198+377+44+361)/18418

[05:57] <p6eval> niecza v12-136-g525ca24: OUTPUT¬´0.70474535780215009‚ê§¬ª

[05:58] <sorear> and that. ;)

[05:59] <sorear> masak: ^^^ directed at you

[06:01] <masak> sorear: ok -- what do the numbers mean?

[06:02] <sorear> 18418 - non-skip spectests passed by Rakudo nom

[06:02] <sorear> 12198 - non-skip spectests passed by Niecza as of much earlier today

[06:02] <sorear> 377+44+361 - new test files added to niecza's linup since then

[06:02] <masak> \o/

[06:03] <masak> sorear++

[06:03] <dalek> niecza: 20a19dd | sorear++ | src/STD.pm6:

[06:03] <dalek> niecza: Allow <:!Letter> to parse

[06:03] <dalek> niecza: review: https://github.com/sorear/niecza/commit/20a19ddfd9

[06:03] <masak> sorear: at this rate, you'll overtake Rakudo sometime around Easter ;)

[06:04] *** kaleem joined
[06:04] <sorear> I would also like to call your attention to the fact that the result of the division is displayed in convenient decimal format

[06:05] <masak> _sri++ # wanting reference documentation

[06:05] <masak> sorear: yes, I noticed already yesterday when I upgraded. that's very nice.

[06:05] <sorear> rakudo: / <:Moo> /

[06:05] <p6eval> rakudo dfd1d7:  ( no output )

[06:07] *** molaf left
[06:11] <dalek> niecza: 3c28d9b | sorear++ | lib/UCD.cs:

[06:11] <dalek> niecza: Enable loose matching for property *names*

[06:11] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3c28d9ba2e

[06:11] *** benabik left
[06:12] *** alvis joined
[06:16] *** alvis left
[06:16] <dalek> niecza: d8d1e25 | sorear++ | lib/UCD.cs:

[06:16] <dalek> niecza: Fix <:CurrencySymbol> rejection

[06:16] <dalek> niecza: review: https://github.com/sorear/niecza/commit/d8d1e251a9

[06:18] *** alvis joined
[06:18] *** jaldhar left
[06:18] *** alvis left
[06:21] * sorear gently taunts the person who decided to use 9FC4 as an "unassigned character" in properties-general.t

[06:21] <sorear> it's a CJK ideograph with Age=5.2.  Write future-proof tests please

[06:23] <sorear> it turns out that the tests that are failing as a result are *precisely* the tests that Rakudo skips, except for the Lr ones

[06:24] *** jaldhar joined
[06:24] <sorear> I'm gonna change em to FFFE and FFFF

[06:31] <dalek> roast: 3e54827 | sorear++ | S05-mass/properties-general.t:

[06:31] <dalek> roast: [S05-mass/properties-general] Update, niecza fudge

[06:31] <dalek> roast: 

[06:31] <dalek> roast: This file was using characters chosen to be unassigned in Unicode 5.1,

[06:31] <dalek> roast: but they got assigned in 5.2!  They have been changed to characters

[06:31] <dalek> roast: guaranteed to remain unassigned.

[06:31] <dalek> roast: review: https://github.com/perl6/roast/commit/3e548270de

[06:31] <dalek> niecza: 8e88d76 | sorear++ | lib/UCD.cs:

[06:31] <dalek> niecza: Seems the spectests want Sc to mean :gc<Sc>, requiring Script written out in full

[06:31] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8e88d763c9

[06:31] <dalek> niecza: b6f0531 | sorear++ | t/spectest.data:

[06:31] <dalek> niecza: We run S05-mass/properties-general.t

[06:31] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b6f053179f

[06:31] <sorear> niecza: say (12198+377+44+361+584)/18418 # 584 more passing spectests

[06:31] <p6eval> niecza v12-138-g20a19dd: OUTPUT¬´0.73645346943207735‚ê§¬ª

[06:33] *** alvis joined
[06:33] *** alvis left
[06:48] <masak> [Coke]: re pasting with a bot: what if there was a bot who listened people's gist feeds, and gists marked up in some trivial way were reported to the channel. people would have to "register" their github accounts with the bot for it to listen to them.

[06:48] <masak> I think that could be quite nice.

[06:49] *** alvis joined
[06:50] *** alvis left
[06:59] <masak> [backlog] Things I Did Not Expect, #518: a US politics blog does a riff on one of Perl 6's operators, and links to the Perl 6 Advent calendar. o.O

[07:03] *** koban joined
[07:03] <dalek> niecza: 7450fe2 | sorear++ | lib/UCD.cs:

[07:03] <dalek> niecza: Add ANY, ASCII, ASSIGNED properties

[07:03] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7450fe2124

[07:15] *** mkramer joined
[07:25] <dalek> niecza: 2f49fa3 | sorear++ | / (2 files):

[07:25] <dalek> niecza: Add :InFoo block shortcuts

[07:25] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2f49fa38ef

[07:25] <sorear> 670 more!

[07:25] <dalek> roast: 1f2c5a3 | sorear++ | S05-mass/properties-block.t:

[07:25] <dalek> roast: [S05-mass/properties-block] Unfudge for niecza

[07:25] <dalek> roast: review: https://github.com/perl6/roast/commit/1f2c5a313a

[07:26] <masak> woo!

[07:26] <sorear> niecza: say (12198+377+44+361+584+670)/18418

[07:26] <p6eval> niecza v12-143-g7450fe2: OUTPUT¬´0.77283092626778149‚ê§¬ª

[07:26] * sorear will retire for the night now.

[07:29] <masak> sorear: sleep well.

[07:30] * masak hops on a train &

[07:36] *** X99 left
[07:48] *** drbean left
[07:54] *** drbean joined
[07:56] *** pkkm_ joined
[08:05] *** GlitchMr joined
[08:22] *** cognominal_ joined
[08:24] *** cognominal left
[08:32] *** mkramer left
[08:33] *** Trashlord left
[08:34] *** Trashlord joined
[08:35] *** Trashlord left
[08:36] *** pkkm_ is now known as pkkm

[08:37] *** Trashlord joined
[08:41] *** alvis joined
[08:43] *** alvis left
[08:48] *** baest joined
[08:53] *** donri joined
[08:53] <donri> perl6: say ?:!foo

[08:53] <p6eval> rakudo dfd1d7, niecza v12-144-g2f49fa3: OUTPUT¬´Bool::True‚ê§¬ª

[08:53] <p6eval> ..pugs b927740: OUTPUT¬´1‚ê§¬ª

[08:54] <donri> this can't possibly be right?

[08:54] <donri> perl6: say :!foo.value

[08:54] <p6eval> pugs b927740: OUTPUT¬´pugs: Named argument found where no matched parameter expected: (foo,Val (VBool False))‚ê§¬ª

[08:54] <p6eval> ..rakudo dfd1d7, niecza v12-144-g2f49fa3: OUTPUT¬´Bool::False‚ê§¬ª

[08:57] <donri> perl6: say "hi" if :!foo

[08:57] <p6eval> pugs b927740, rakudo dfd1d7, niecza v12-144-g2f49fa3: OUTPUT¬´hi‚ê§¬ª

[09:02] *** pomysl_ left
[09:02] *** daxim joined
[09:03] *** pomysl joined
[09:03] *** pomysl left
[09:03] *** pomysl joined
[09:07] <dalek> panda: 87743c0 | tadzik++ | lib/Panda/Ecosystem.pm:

[09:07] <dalek> panda: Fix a typo. Fixes compilation issues on new Rakudo

[09:07] <dalek> panda: review: https://github.com/tadzik/panda/commit/87743c05e1

[09:11] *** wallberg joined
[09:16] *** wallberg left
[09:16] *** pomysl left
[09:16] *** pomysl joined
[09:16] *** pomysl left
[09:16] *** pomysl joined
[09:22] <dalek> panda: ebafa5b | tadzik++ | / (2 files):

[09:22] <dalek> panda: Don't compile precompile modules for now. Causes more harm than good

[09:22] <dalek> panda: review: https://github.com/tadzik/panda/commit/ebafa5b590

[09:25] *** am0c left
[09:27] *** imarcusthis left
[09:27] *** imarcusthis- joined
[09:32] *** alvis joined
[09:36] *** alvis_ joined
[09:36] *** alvis_ left
[09:37] *** alvis left
[09:40] *** alvis joined
[09:42] <tadzik> Perl 5 has Module::XS. How would you name a Perl 6 module using NCI?

[09:42] <phenny> tadzik: 04:21Z <moritz> tell tadzik the failure in Panda is easy to fix "class Pand::Ecosystem is Pies::Ecosystem" should have s/is/does/. Otherwise it tries to pun a class from the role, and fails because methods are stubbed

[09:42] <phenny> tadzik: 04:22Z <moritz> tell tadzik I can push the fix if you give me a commit bit :-)

[09:43] <tadzik> perl6: (:foo).perl.say

[09:43] <p6eval> rakudo dfd1d7, niecza v12-144-g2f49fa3: OUTPUT¬´"foo" => Bool::True‚ê§¬ª

[09:43] <p6eval> ..pugs b927740: OUTPUT¬´("foo" => Bool::True)‚ê§¬ª

[09:43] <tadzik> donri: ^

[09:43] <tadzik> perl6: (:!foo).perl.say

[09:43] <p6eval> rakudo dfd1d7, niecza v12-144-g2f49fa3: OUTPUT¬´"foo" => Bool::False‚ê§¬ª

[09:43] <p6eval> ..pugs b927740: OUTPUT¬´("foo" => Bool::False)‚ê§¬ª

[09:44] <tadzik> perl6: (:!foo).value.perl.say

[09:44] <p6eval> pugs b927740: OUTPUT¬´\Bool::False‚ê§¬ª

[09:44] <p6eval> ..rakudo dfd1d7, niecza v12-144-g2f49fa3: OUTPUT¬´Bool::False‚ê§¬ª

[09:45] *** alvis left
[10:02] *** fridim_ left
[10:03] *** cognominal_ left
[10:03] *** cognominal___ joined
[10:04] *** pomysl left
[10:13] *** pomysl joined
[10:13] *** pomysl left
[10:13] *** pomysl joined
[10:19] *** pomysl left
[10:21] *** drbean left
[10:27] *** drbean joined
[10:37] *** fsergot joined
[10:37] <fsergot> hi o/

[10:37] <masak> \o hi

[10:37] <masak> (from a train!)

[10:43] *** mj41 joined
[10:48] *** fsergot left
[10:50] *** kshannon joined
[10:56] *** pomysl joined
[10:57] <kshannon> niecza: sub infix:<foo> ($a, $b = ($a foo 3 * 4)) is tighter(&infix:<*>) { ($a + $b) / 2 }; say infix:<foo>(1); say 1 foo (1 foo 3 * 4); say 1 foo (1 foo (3 * 4));

[10:57] <p6eval> niecza v12-144-g2f49fa3: OUTPUT¬´3.75‚ê§4.5‚ê§3.75‚ê§¬ª

[10:58] <kshannon> installed into the grammar before the signature,  and then precedence fixed up later after the default is parsed...

[11:01] <kshannon> admittedly an edge case that should never occur naturally.

[11:04] *** AlexBear joined
[11:11] *** AlexBear left
[11:19] <kshannon> Ok, again but this time cover using the operator in the definition body:

[11:19] <kshannon> niecza: sub infix:<foo> ($a, $b = ($a foo 2 * 3 - $a)) is tighter(&infix:<*>) { $a == 0 ?? 1 foo 2 * 3 !! $a + $b }; say infix:<foo>(1); say 1 foo 2 * 3; say 1 foo (2 * 3); say (1 foo 2) * 3; say 0 foo 0;

[11:19] <p6eval> niecza v12-144-g2f49fa3: OUTPUT¬´7‚ê§9‚ê§7‚ê§9‚ê§9‚ê§¬ª

[11:28] *** agentzh left
[11:29] <moritz> .oO( use parenthesis! )

[11:29] <moritz> perl 6 has the iron rule of never reparsing source code

[11:29] <moritz> I don't think we will bend it for such a case

[11:30] *** bkolera joined
[11:34] *** Gothmog_ left
[11:35] *** ispeak joined
[11:36] *** whiteknight joined
[11:36] *** whiteknight is now known as Guest91318

[11:38] *** Gothmog_ joined
[11:42] <donri> tadzik: i know, but certainly the .Bool of a Pair is more intuitively the .value.Bool?

[11:43] <donri> especially considering the :! syntax

[11:44] <donri> i guess it's primarily used in ways where you get the .value anyway, rarely the Pair itself

[11:46] *** agentzh joined
[11:49] *** hundskatt joined
[11:54] *** ghjk465 joined
[12:07] *** ispeak left
[12:10] *** daxim left
[12:14] *** daxim joined
[12:20] *** pkkm_ joined
[12:23] *** pkkm left
[12:38] *** bluescreen10 joined
[12:43] *** mikemol joined
[12:54] <tadzik> donri: maybe

[12:58] *** mj41 left
[13:19] <ghjk465> hi

[13:42] *** mkramer joined
[13:44] *** kaleem left
[13:51] *** donri left
[14:00] *** am0c joined
[14:02] <moritz> nom: say (:foo, :!foo)>>.Bool

[14:02] <p6eval> nom dfd1d7: OUTPUT¬´Bool::True Bool::True‚ê§¬ª

[14:12] *** kaleem joined
[14:17] *** Mowah joined
[14:17] *** cognominal___ left
[14:19] *** cognominal joined
[14:19] *** bkolera left
[14:22] *** GlitchMr left
[14:24] <colomon> is .bytes really supposed to be implementation independent?

[14:24] *** baest left
[14:26] <colomon> I asked because S32-str/length.t has a bunch of tests for .bytes, and niecza fails almost all of them.

[14:26] <colomon> looking at the spec, I don't get the impression these tests are correct

[14:27] <moritz> I don't think .bytes makes sense on a Str at all

[14:27] <moritz> more on a Buf

[14:27] <colomon> it's definitely spec

[14:27] <colomon> our Int multi method bytes ( Str $string: $enc = $?ENC, :$nf = $?NF) is export

[14:27] <colomon> Returns the number of bytes in the string if it were encoded in the specified way.

[14:28] <moritz> yes, I know it's spec

[14:28] <colomon> but all the tests are using the default encodings.

[14:28] <moritz> but... I don't see the reason for .bytes at all

[14:28] <colomon> I think it makes sense -- maybe you need to know how much storage is being taken up.

[14:29] <colomon> but I'd think it would be used very infrequently

[14:29] <moritz> colomon: but that's not what .bytes returns

[14:29] <moritz> colomon: it returns what storage would be taken up if the Str was encoded in a certain normal form and character encoding

[14:30] <colomon> oh.

[14:30] <moritz> but I can't think of any use case where you need to know that, but not need the buffer with that representation

[14:30] <colomon> so it's actually telling you how big the equivalent Buf would be.

[14:30] <moritz> ... in which case you'd just get the Buf straigt away, and ask *that* for the number of bytes

[14:30] <moritz> colomon: correct

[14:30] <kshannon> So to get user defined precedence in Rakudo I'm thinking we'll need something like function_O from https://github.com/sorear/niecza/blob/master/src/NieczaFrontendSTD.pm6 in Perl6::Grammar and then fiddle with gen_op to call it rather than use the pre-calculated %prec.

[14:31] <kshannon> I mean build the PAST to call it;  not call it directly from gen_op.

[14:31] <colomon> moritz: got to agree, that sounds like at best it has a very very very limited use

[14:32] <moritz> kshannon: that sounds roughly sane, but I don't really know much of the operator overloading code

[14:34] <colomon> back off to the insanity of last minute Christmas shopping...

[14:34] <kshannon> We'll also need to implement the appropriate traits to save the information in the routine for the function_O to be able to find later.

[14:36] <kshannon> The more I look at the more I think I'm biting off more than I can chew for a first patch... :)

[14:38] *** koban left
[14:52] <Util> Does any Perl 6 implementation currently support FIRST blocks?

[14:52] <moritz> kshannon: have you been reading the advent calendar?

[14:52] <moritz> perl6: for 1, 2, 3  { FIRST { .say } } 

[14:52] <p6eval> rakudo dfd1d7: OUTPUT¬´===SORRY!===‚ê§FIRST phaser not yet implemented at line 1, near " }"‚ê§¬ª

[14:52] <p6eval> ..niecza v12-144-g2f49fa3: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Action method statement_prefix:FIRST not yet implemented at /tmp/BhNQXNbsQJ line 1:‚ê§------> [32mfor 1, 2, 3  { FIRST { .say }[33m‚èè[31m }[0m‚ê§‚ê§Unhandled exception: Unable to resolve method statement_level in class Str‚ê§  a‚Ä¶

[14:52] <p6eval> ..pugs b927740: OUTPUT¬´‚ê§¬ª

[14:52] <moritz> Util: looks like "no"

[14:53] <Util> moritz: thanks!

[14:58] *** ghjk465 left
[14:58] *** molaf joined
[14:58] *** agentzh left
[15:14] <kshannon> moritz: Yes :)

[15:18] *** MayDaniel joined
[15:29] <moritz> kshannon: good to see it's inspiring

[15:38] *** flussence_ left
[15:39] *** flussence joined
[15:40] *** flussence_ joined
[15:42] <sorear> good * #perl6

[15:43] *** flussence left
[15:45] <sorear> hello kshannon

[15:45] <sorear> rakudo: 2 @ 3

[15:45] <p6eval> rakudo dfd1d7: OUTPUT¬´===SORRY!===‚ê§Confused at line 1, near "2 @ 3"‚ê§¬ª

[15:45] <sorear> rakudo: { my sub infix:<@>($x,$y) { $x * $y } }; 2 @ 3

[15:45] <p6eval> rakudo dfd1d7: OUTPUT¬´===SORRY!===‚ê§CHECK FAILED:‚ê§Undefined routine '&infix:<@>' called (line 1)‚ê§¬ª

[15:49] <moritz> ENOTLEXICALENOUGH

[15:49] *** molaf left
[15:54] <colomon> sorear: did you see moritz++ and my discussion about .bytes?

[15:56] <sorear> colomon: yes

[15:57] <colomon> opinion?

[15:57] <sorear> I, too, have never seen a use case for it

[15:58] <colomon> even if there is a use case, does it make any sense to test it against a default number of bytes?  that seems very implementation-dependent to me.  (ie regardless of whether .bytes deserves to be whacked, are the tests wrong?_

[15:58] <colomon> )

[16:01] <sorear> colomon: If there is a standard default encoding (perhaps utf8/NFC), then the tests aren't "wrong"

[16:01] <sorear> however I doubt that much is actually spelled out in the spec

[16:01] <moritz> I think the implicit assumption is that UTF-8 and some composed normal form are the default

[16:02] <moritz> but I'm not sure I've seen it in the spec either

[16:03] <colomon> the definition references $?ENC and $?NF.  Are those specified somewhere?

[16:08] <moritz> nope, doesn't seem like (from a quick ack)

[16:08] *** pkkm_ is now known as pkkm

[16:13] <colomon> okay, I'm taking those tests out of roast

[16:21] <dalek> roast: c266519 | (Solomon Foster)++ | S32-str/length.t:

[16:21] <dalek> roast: Remove the .bytes tests on the theory they are misguided and method itself

[16:21] <dalek> roast: should probably go away. Fudge for niecza.

[16:21] <dalek> roast: review: https://github.com/perl6/roast/commit/c266519c3f

[16:22] <dalek> specs: e52fc11 | util++ | S28-special-names.pod:

[16:22] <dalek> specs: Fix typo. $*ARGFILES is plural in all but one instance.

[16:22] <dalek> specs: review: https://github.com/perl6/specs/commit/e52fc11b61

[16:24] *** pkkm left
[16:32] *** kaleem left
[16:32] *** kaare_ joined
[16:42] *** thou joined
[16:42] <colomon> we landed properties-block.t, properties-general.t, and properties-script.t?!  \o/

[16:43] <sorear> colomon: yes

[16:43] <colomon> that's like 1000 tests, isn't it?

[16:43] <sorear> -derived eluded me though.

[16:43] <sorear> niecza: say 361+584+670

[16:43] <p6eval> niecza v12-144-g2f49fa3: OUTPUT¬´1615‚ê§¬ª

[16:43] <colomon> \o/

[16:44] <colomon> you turned on named-chars.t too, eh?

[16:45] <colomon> with no fudging at all?!?  \o/

[16:47] *** MayDaniel left
[16:47] <colomon> sorear++  sorear++ sorear++

[16:47] *** lopex joined
[16:50] *** kaleem joined
[16:58] *** MayDaniel joined
[17:00] <moritz> nom: my %a = ('a'.. 'c') X=> 'foo'; say %h.perl;

[17:00] <p6eval> nom dfd1d7: OUTPUT¬´===SORRY!===‚ê§Variable %h is not predeclared at line 1, near ".perl;"‚ê§¬ª

[17:00] <moritz> nom: my %a = ('a'.. 'c') X=> 'foo'; say %a.perl;

[17:00] <p6eval> nom dfd1d7: OUTPUT¬´("a" => "foo", "b" => "foo", "c" => "foo").hash‚ê§¬ª

[17:00] <moritz> nom: my %a = ('a'.. 'c') X=> [1, 0]

[17:00] <p6eval> nom dfd1d7:  ( no output )

[17:00] <moritz> nom: my %a = ('a'.. 'c') X=> [1, 0]; say %h.perl;

[17:00] <p6eval> nom dfd1d7: OUTPUT¬´===SORRY!===‚ê§Variable %h is not predeclared at line 1, near ".perl;"‚ê§¬ª

[17:01] <moritz> nom: my %a = ('a'.. 'c') X=> [1, 0]; say %a.perl;

[17:01] <p6eval> nom dfd1d7: OUTPUT¬´("a" => 0, "b" => 0, "c" => 0).hash‚ê§¬ª

[17:02] <moritz> erm

[17:02] <moritz> that... shouldn't flatten

[17:04] *** antocat joined
[17:06] <colomon> nom: say "hello".bytes

[17:06] <p6eval> nom dfd1d7: OUTPUT¬´5‚ê§¬ª

[17:11] *** daxim left
[17:12] <tadzik> nom: say "≈º√≥≈Çw".bytes

[17:12] <p6eval> nom dfd1d7: OUTPUT¬´7‚ê§¬ª

[17:14] *** thou left
[17:17] *** MayDaniel left
[17:19] *** GlitchMr joined
[17:25] *** lopex left
[17:32] *** Vlavv_ joined
[17:32] *** Vlavv_ left
[17:33] *** Vlavv` left
[17:33] <dalek> roast: 0188367 | (Solomon Foster)++ | S05-mass/properties-derived.t:

[17:33] <dalek> roast: Fudge for niecza.

[17:33] <dalek> roast: review: https://github.com/perl6/roast/commit/01883677f5

[17:33] *** Vlavv joined
[17:42] <dalek> niecza: 24cbe92 | (Solomon Foster)++ | t/spectest.data:

[17:42] <dalek> niecza: Turn on S32-str/length.t.

[17:42] <dalek> niecza: review: https://github.com/sorear/niecza/commit/24cbe92ed3

[17:42] <dalek> niecza: a9455a3 | (Solomon Foster)++ | t/spectest.data:

[17:42] <dalek> niecza: Turn on S05-mass/properties-derived.t.

[17:42] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a9455a3e6b

[17:43] * sorear ponders what direction next

[17:45] *** pkkm joined
[17:45] <dalek> roast: 4d42452 | (Solomon Foster)++ | S05-mass/rx.t:

[17:45] <dalek> roast: Unfudge passing tests.

[17:45] <dalek> roast: review: https://github.com/perl6/roast/commit/4d42452bdc

[17:49] <colomon> sorear: are grammar actions working yet?

[17:52] *** ksi joined
[17:54] <sorear> you mean like the stuff in NieczaActions.pm6?

[17:54] *** mj41 joined
[17:57] <colomon> sorear: yes, and I take it that means the answer to my question is yes.

[17:57] <colomon> :)

[17:59] <colomon> "is export"?

[18:00] <colomon> roles, of course, I'm assuming you'll do when you're ready

[18:00] <sorear> colomon: subs and classes only (see Test.pm6)

[18:01] <sorear> yeah... don't want to start on roles this close to the 26th

[18:01] <colomon> it's actually a hard question ("what direction next?") because frankly, pretty much everything I've tried to do in Niecza lately has worked.  :)

[18:01] * sorear is trying to see how Rakudo does :D currently

[18:04] *** drbean left
[18:05] <sorear> rakudo: multi foo(Any:D $x) { "A" }; multi foo(Any $x) { "B" }; say foo(5)

[18:05] <p6eval> rakudo dfd1d7: OUTPUT¬´Ambiguous dispatch to multi 'foo'. Ambiguous candidates had signatures:‚ê§:(Any $x)‚ê§:(Any $x)‚ê§‚ê§  in block <anon> at /tmp/_WbwFwt3QU:1‚ê§  in <anon> at /tmp/_WbwFwt3QU:1‚ê§¬ª

[18:11] *** drbean joined
[18:14] <sorear> nom: say Mu.pred

[18:14] <p6eval> nom dfd1d7: OUTPUT¬´Method 'pred' not found for invocant of class 'Mu'‚ê§  in block <anon> at /tmp/waVerNGo86:1‚ê§  in <anon> at /tmp/waVerNGo86:1‚ê§¬ª

[18:14] <sorear> nom: say Mu.succ

[18:14] <p6eval> nom dfd1d7: OUTPUT¬´Method 'succ' not found for invocant of class 'Mu'‚ê§  in block <anon> at /tmp/CGCD0rBhb1:1‚ê§  in <anon> at /tmp/CGCD0rBhb1:1‚ê§¬ª

[18:16] <[Coke]> masak: (gist pasting) excellent plan.

[18:19] <[Coke]> sorear++ #even more stuff done, wow.

[18:20] <colomon> [Coke]: new target is 75%  ;)

[18:22] *** thou joined
[18:28] *** mj41 left
[18:28] *** drbean left
[18:33] *** antocat left
[18:34] *** drbean joined
[18:35] <sorear> colomon: no, that can't be our new target.

[18:35] <sorear> niecza: say (12198+377+44+361+584+670)/18418

[18:35] <p6eval> niecza v12-146-ga9455a3: OUTPUT¬´0.77283092626778149‚ê§¬ª

[18:37] <colomon> dang it, I wasn't quite optimistic enough!

[18:38] <sorear> niecza: say (18418 * 0.8).Int - (12198+377+44+361+584+670)

[18:38] <p6eval> niecza v12-146-ga9455a3: OUTPUT¬´500‚ê§¬ª

[18:39] <sorear> that should be a nice managable number ;)

[18:44] *** cognominal left
[18:45] *** cognominal joined
[18:46] <colomon> 80% by Boxing Day?

[18:46] <colomon> niecza: say 16797 / 18418

[18:46] <p6eval> niecza v12-146-ga9455a3: OUTPUT¬´0.91198827234227386‚ê§¬ª

[18:46] * sorear wonders why github is giving a "Fork" button for sorear/niecza

[18:46] <sorear> What's 16767?

[18:47] <colomon> total tests reported in a spectest run locally

[18:47] <colomon> but that's counting skipped and todo'd.

[18:48] <sorear> coke's been using test_summary.pl

[18:48] <sorear> any new failure?

[18:48] <sorear> s

[18:49] *** am0c left
[18:50] <colomon> no new failures that I know of, but definitely some new skips & todos

[18:50] *** Chillance joined
[18:50] * colomon is trying to figure out how to run test_summary against niecza

[18:50] <colomon> ...and it's off!

[18:51] <moritz> perl t/spec/test_sumamry niecza # I think

[18:51] <moritz> hm, that requires a './perl6'

[18:52] <moritz> which you can create as a shell script

[18:52] <colomon> yeah, I hacked it to use mono run/Niecza.exe instead

[18:52] * colomon has two different perl6s installed on his system

[18:58] <colomon> woah, test_summary is slow compared to TEST_JOBS=4 make spectest

[18:58] <[Coke]> yah, it's single threaded. :(

[18:59] <sorear> o/ [Coke] 

[18:59] <dalek> niecza: 3db221f | coke++ | t/spectest.data:

[18:59] <dalek> niecza: run more tests

[18:59] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3db221f010

[19:00] *** MayDaniel joined
[19:01] <colomon> hey, no fair obsoleting my counting run before it's finished!  ;)

[19:02] <colomon> 14509 pass

[19:02] <moritz> that's what we'd call a "luxury problem" in German :-)

[19:02] <colomon> niecza: say 14509 / 18418

[19:02] <p6eval> niecza v12-146-ga9455a3: OUTPUT¬´0.78776197198392872‚ê§¬ª

[19:03] <colomon> huh.  so why 305 fails with test_summary, and none with make spectest?

[19:05] <[Coke]> colomon: huh. good question.

[19:06] <[Coke]> 7 more passes with those 2 files.

[19:06] <colomon> test_summary printed a couple of screens of messages like this:

[19:06] <colomon> S03-operators/arith.niecza aborted 46 test(s)

[19:06] <[Coke]> O_o

[19:07] <colomon> if I run it with fudgeandrun, it's perfect

[19:07] <[Coke]> wonder if fudgeandrun is doing something different than "fudge, and run"

[19:08] <colomon> the fudging is the same

[19:08] <[Coke]> colomon: https://gist.github.com/1515097

[19:09] <colomon> [Coke]: what's that/

[19:09] <colomon> ?

[19:09] <moritz> hm, maybe test_summary doesn't like tests without a description?

[19:09] <moritz> but then it would show the same troubles with rakudo...

[19:09] <[Coke]> another helper script from rakudo.

[19:09] <[Coke]> fudged to run against niecza.

[19:09] <colomon> moritz: overflow.t (which is what I'm currently looking at) has a description

[19:11] <[Coke]> colomon: I grabbed the 2 that were passing unfudged and just added them. but there are others like t/spec/S04-phasers/begin.t that look like they could be fudged. (already passing 6/9)

[19:11] <[Coke]> slightly higher fruit.

[19:11] <colomon> [Coke]++

[19:12] <[Coke]> looking at anyhash-0t

[19:13] <[Coke]> huh. already fudged, even.

[19:14] <[Coke]> split-simple.t...

[19:17] <colomon> I think I've got it.  it looks like test_summary is counting tests that have no description as failures

[19:18] <colomon> yup, that's the problem

[19:19] <colomon> https://gist.github.com/1515122

[19:21] <[Coke]> ah, good catch.

[19:21] <[Coke]> niecza: ''.split('')

[19:21] <p6eval> niecza v12-147-g3db221f:  ( no output )

[19:21] <[Coke]> niecza: say (''.split('')).perl

[19:21] <p6eval> niecza v12-147-g3db221f: OUTPUT¬´["", ""].list‚ê§¬ª

[19:21] <[Coke]> niecza: say +(''.split(''))

[19:21] <p6eval> niecza v12-147-g3db221f: OUTPUT¬´2‚ê§¬ª

[19:22] <colomon> I'm rerunning now with my patch

[19:22] <[Coke]> nom: say +(''.split(''))

[19:22] <p6eval> nom dfd1d7: OUTPUT¬´use of uninitialized value of type Nil in numeric context‚ê§0‚ê§¬ª

[19:22] *** benabik joined
[19:23] <[Coke]> niecza: 'theXbigXbang'.split(/X/, -1)

[19:23] <p6eval> niecza v12-147-g3db221f:  ( no output )

[19:23] <[Coke]> niecza: 'theXbigXbang'.split(/X/, -1).say

[19:23] <p6eval> niecza v12-147-g3db221f: OUTPUT¬´theXbigXbang‚ê§¬ª

[19:26] <moritz> nom: say 'theXbigXbang'.split(/X/, -1).perl

[19:26] <p6eval> nom dfd1d7: OUTPUT¬´().list‚ê§¬ª

[19:27] *** mj41 joined
[19:28] *** kaleem left
[19:28] *** benabik left
[19:30] *** benabik joined
[19:35] *** benabik left
[19:35] *** GlitchMr left
[19:36] <colomon> niecza: say 14814 / 18418

[19:36] <p6eval> niecza v12-147-g3db221f: OUTPUT¬´0.80432185905092846‚ê§¬ª

[19:36] <sorear> 80% wah?

[19:37] <colomon> already, yup

[19:37] <tadzik> outstanding

[19:37] <sorear> the stuff Rakudo does better needs more tests. ;)

[19:37] <colomon> test_summary was shortchanging us by 300-something

[19:37] <sorear> why wasn't it shortchanging rakudo?

[19:37] <colomon> of course, it might be shortchanging Rakudo too

[19:39] <colomon> [Coke]: was test_summary also showing failures for Rakudo?

[19:41] * moritz wonders why it's so hard to count :-)

[19:44] <sorear> niecza: say "\c[0x3BB]"

[19:44] <p6eval> niecza v12-147-g3db221f: OUTPUT¬´Œª‚ê§¬ª

[19:46] <moritz> fwiw new Test::Harness versions do count the number of skipped tests

[19:46] <moritz> it's just not printed by default

[19:46] <dalek> roast: 5ee36f4 | (Solomon Foster)++ | test_summary:

[19:46] <dalek> roast: Tests which have no description still have passed, honest.

[19:46] <dalek> roast: review: https://github.com/perl6/roast/commit/5ee36f4795

[19:46] <moritz> see http://search.cpan.org/~andya/Test-Harness-3.23/lib/Test/Harness.pm#execute_tests%28_tests_=%3E_\@test_files,_out_=%3E_\*FH_%29

[19:49] <[Coke]> colomon: yes, 28 failures for rakudo.

[19:49] <[Coke]> colomon: https://gist.github.com/1476841

[19:50] <[Coke]> moritz: is there an env var to print it?

[19:50] <moritz> [Coke]: nope, it seems I need to hack t/harness (in rakudo at least) to use it

[19:50] <[Coke]> so that's about another 250 in our favor. ;)

[19:51] <[Coke]> moritz: so we still need test_summary for now.

[19:51] <moritz> [Coke]: aye

[19:57] <dalek> rakudo/nom: eb6c4be | moritz++ | lib/Test.pm:

[19:57] <dalek> rakudo/nom: [Test.pm] fix stupid thinko, moritz--

[19:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eb6c4be44c

[20:07] <dalek> roast: 900ce61 | (Solomon Foster)++ | integration/99problems-31-to-40.t:

[20:07] <dalek> roast: Fudge for niecza.

[20:07] <dalek> roast: review: https://github.com/perl6/roast/commit/900ce618b3

[20:08] <sorear> moritz: it would be cool if we had an implementation-shared t/harness

[20:09] <sorear> niecza's is quite different and doesn't support muddle

[20:09] <sorear> I'd like to kill it

[20:09] <dalek> niecza: 5dd7927 | (Solomon Foster)++ | t/spectest.data:

[20:09] <dalek> niecza: Turn on integration/99problems-31-to-40.t.

[20:09] <dalek> niecza: review: https://github.com/sorear/niecza/commit/5dd7927b13

[20:10] *** alvis joined
[20:11] <sorear> colomon: a lot of these properties-derived fudges "icu" are quite silly

[20:12] <colomon> the tests themselves, you mean?

[20:12] <sorear> 9FC4 is immediately after the end of the ideographs block in 5.1

[20:12] <sorear> new ideographs are coined continuously, and occasionally they have to be encoded

[20:12] *** mkramer left
[20:12] *** bluescreen10 left
[20:12] <sorear> I'd like some stern words with whoever decided to test that the Chinese would stop being Chinese

[20:13] *** mkramer joined
[20:14] *** alvis left
[20:15] <moritz> muddle?

[20:15] <sorear> moritz: [Coke]'s WIP replacement for smolder

[20:15] <sorear> he wants to see niecza/rakudo spectests on it, too

[20:16] <moritz> sorear: does rakudo's harness lack any features that niecza needs?

[20:17] <moritz> besides calling a different executable, that is :-)

[20:18] <sorear> moritz: ability to check out/update the spectests

[20:18] <sorear> (I factored this a smidge differently from Rakudo, which does it in the Makefile)

[20:18] <moritz> sorear: well, checking out the spectests can't be done from inside a shared harness in t/spec/, that's for sure :-)

[20:19] <sorear> hah!

[20:20] <moritz> doing it rakudo's way has a certain advantage: if you do a parallel make, the git pull can happen while the compiler builds

[20:24] *** bluescreen10 joined
[20:27] *** cognominal_ joined
[20:28] <colomon> do we have an Advent post for today?

[20:28] *** cognominal_ left
[20:28] <moritz> Util++ does, iirc

[20:29] *** cognominal left
[20:29] *** cognominal_ joined
[20:40] <sorear> #p5p is quite infuriating at times

[20:40] <dalek> roast: d03f6cc | (Solomon Foster)++ | integration/lazy-bentley-generator.t:

[20:40] <dalek> roast: Add forgotten plan.

[20:40] <dalek> roast: review: https://github.com/perl6/roast/commit/d03f6cceee

[20:41] <dalek> niecza: 0776e11 | (Solomon Foster)++ | lib/CORE.setting:

[20:41] <dalek> niecza: Add simple implementation of trim methods and subs.

[20:41] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0776e110d6

[20:41] <dalek> niecza: e1a40ee | (Solomon Foster)++ | t/spectest.data:

[20:41] <dalek> niecza: Turn on S32-str/trim.t.

[20:41] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e1a40ee673

[20:41] <dalek> niecza: 2bf9d26 | (Solomon Foster)++ | t/spectest.data:

[20:41] <dalek> niecza: Turn on integration/advent2009-day17.t.

[20:41] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2bf9d26df3

[20:41] <colomon> That's another 100 or so passing tests.

[20:47] *** wolfman2000 left
[20:50] *** alvis joined
[20:50] *** pkkm left
[20:52] <colomon> nom: say (1, 1, 2, 3, 4, 4).grep({ $^a == $^b }).perl

[20:52] <p6eval> nom eb6c4b: OUTPUT¬´Not enough positional parameters passed; got 1 but expected 2‚ê§  in block <anon> at /tmp/g2O9tsIcuN:1‚ê§  in method ACCEPTS at src/gen/CORE.setting:1290‚ê§  in method reify at src/gen/CORE.setting:4352‚ê§  in method reify at src/gen/CORE.setting:4257‚ê§  in method gimme at src‚Ä¶

[20:53] <colomon> pugs: say (1, 1, 2, 3, 4, 4).grep({ $^a == $^b }).perl

[20:53] <p6eval> pugs b927740: OUTPUT¬´()‚ê§¬ª

[20:53] *** bluescreen10 left
[20:57] * colomon frowns deeply at grep.t

[20:58] <Util> I am still writing my Advent post (Idiomatic Perl 6), finishing up in the next hour.

[20:58] <Util> I would greatly appreciate any reviews of the almost-complete work:

[20:58] <colomon> Util++

[20:58] <Util>     http://perlcabal.org/~util/Advent/

[20:59] *** alvis left
[21:01] <moritz> Util: that's rather nice

[21:01] <moritz> Util: I jsut think that you should mark p5 and p6 separately in the code samples

[21:01] <moritz> Util: some people tend to gloss over the text, and miss the description of what is p5 and what is p6

[21:01] *** mkramer left
[21:02] <moritz> as it is, it will add confusion

[21:02] <colomon> Util: say 0+@array; appears twice

[21:03] *** mkramer joined
[21:06] <moritz> also the uniq examples are a bit weird, because they use return() outside of any subroutine

[21:06] <moritz> would be better to just assign to my @uniq or so

[21:07] *** mkramer left
[21:07] <Util> colomon: yes, it is identical in P5 and P6. I thought about suppressing that case, but have not (yet?)

[21:07] <colomon> ah

[21:08] <moritz> and  @starts_with_number = grep { /^\d/ }, @a;

[21:08] <moritz> would be idiomatically written as just

[21:08] <moritz> grep /^\d/, @a

[21:08] <moritz> both in p5 and p6

[21:09] <Util> moritz: I thought grep was block-only in P6, unless you use the * trick to generate the block.

[21:09] *** bluescreen10 joined
[21:12] <Util> moritz: Thanks, I am adding a `#` seperator between P5/P6 sections.

[21:23] <dalek> niecza: 7596452 | sorear++ | lib/UCD.cs:

[21:23] <dalek> niecza: Allow access to Script_Extensions/scx

[21:23] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7596452ad7

[21:23] <dalek> niecza: 7139c15 | sorear++ | docs/TODO.UTS18:

[21:23] <dalek> niecza: Add a TODO file for UTS18 conformance items

[21:23] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7139c15c21

[21:42] *** cooper left
[21:47] *** drbean left
[21:50] <sorear> niecza: say "2 + 2".words

[21:50] <p6eval> niecza v12-151-g2bf9d26: OUTPUT¬´2 + 2‚ê§¬ª

[21:50] <sorear> perl6: say "2 + 2".words.perl

[21:50] <p6eval> niecza v12-151-g2bf9d26: OUTPUT¬´["2", "+", "2"].list‚ê§¬ª

[21:50] <p6eval> ..rakudo eb6c4b: OUTPUT¬´("2", "+", "2").list‚ê§¬ª

[21:50] <p6eval> ..pugs b927740: OUTPUT¬´*** No such method in class Str: "&words"‚ê§    at /tmp/5Aw1t166AL line 1, column 5 - line 2, column 1‚ê§¬ª

[21:52] <sorear> Util: $*ARGFILES, not @*ARGFILES

[21:54] *** drbean joined
[21:54] <sorear> Util: @array .= rotate; is not the same as @array.push: @array.shift

[21:55] <sorear> Util: the former involves re-assigning all elements, so it 1. is much slower 2. will do interesting things with a list of aliases

[21:57] <Util> sorear: thanks for catching the @*

[21:58] <Util> re: the rotate, S32-Containers says: A positive rotation of 1 is defined as: @array.push(@array.shift);

[22:00] <sorear> oh, then I suspect you may be misusing .=

[22:00] <sorear> or something is inconsistent

[22:00] <Util> Is the "re-assigning all elements" just the behavior of a current implementation?

[22:00] <sorear> rakudo: my @foo = 1,2,3,4,5; @foo.rotate; say @foo

[22:00] <p6eval> rakudo eb6c4b: OUTPUT¬´1 2 3 4 5‚ê§¬ª

[22:00] <sorear> rakudo: my @foo = 1,2,3,4,5; @foo.push: @foo.shift; say @foo

[22:00] <p6eval> rakudo eb6c4b: OUTPUT¬´2 3 4 5 1‚ê§¬ª

[22:00] <sorear> look, not the smae

[22:01] <sorear> Util: no, it's what .= does

[22:01] <sorear> .= is a compound assignment operator; it does not work in place as people like to pretend

[22:01] <Util> I am writing about Perl 6 as specced, even if we are currently doing it wrong in an implementation.

[22:02] <Util> Hmmm. "compound assignment operator". Thinking...

[22:03] <Util> sorear: From the spec:

[22:03] <Util>     @a.=rotate       # @a is rotated in place

[22:06] <Util> and it works:

[22:06] <Util> rakudo: my @foo = 1,2,3,4,5; @foo.=rotate; say @foo

[22:07] <p6eval> rakudo eb6c4b: OUTPUT¬´2 3 4 5 1‚ê§¬ª

[22:09] <sorear> I suspect whoever wrote that was using an unusual definition of "in place"

[22:09] <sorear> @a.=rotate means @a = @a.rotate

[22:09] <japhb> Util: There is nothing in your example that indicates it actually happened in place, rather than the rotated values being assigned back into @foo.

[22:15] <Util> japhb: True, my example does not provide evidence of that, one way or the other.

[22:16] <Util> I look to the spec, since that exact part was authored by Larry.

[22:16] <Util> git show b4f39b3a

[22:16] <Util> [Containers] define .rotate more like a PDL slice, rely on other ops for exact semantics

[22:16] <japhb> Util, sure, no argument there -- I was merely responding to your "and it works:" comment.  :-)

[22:18] <Util> japhb: Oh, I see. My "and it works" was in reply to sorear's earlier p6eval, where = was used instead of .=

[22:20] *** bluescreen10 left
[22:21] *** Moukeddar joined
[22:33] *** mj41 left
[22:46] *** MayDaniel left
[22:52] *** M_o_C joined
[23:04] *** fridim_ joined
[23:04] *** drbean left
[23:05] *** cognominal_ left
[23:06] *** cognominal joined
[23:07] *** M_o_C left
[23:12] *** drbean joined
[23:20] <Util> Last section completed, and article published:

[23:20] <Util>   http://perl6advent.wordpress.com/2011/12/23/day-23-idiomatic-perl-6/

[23:20] *** Moukeddar left
[23:26] <colomon> Util++

[23:32] *** drbean left
[23:34] <japhb> Util: In section "Idiom 5 ==> Idiom 6", for example "Swap two variables", I think the '#' marker between Perl 5 and Perl 6 is one line too far down.

[23:39] <lue> Util++ Great post, feels like just a couple steps short of a "Perl 6 Idioms" pamphlet :)

[23:39] <lue> [Now time to write my advent post]

[23:40] *** drbean joined
[23:40] <Util> japhb: fixed, Thanks!

[23:40] *** fridim_ left
[23:41] <japhb> No problem.  And I should of course say a big Util++, because that was a truly excellent post.

[23:47] <sorear> Util++

[23:51] <tadzik> Util: in Swap Variables, did # go too far?

[23:54] <tadzik> great post, Util++

