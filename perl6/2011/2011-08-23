[00:03] <diakopter> oh wait...

[00:05] <diakopter> speaking of curry, nom beckoneth

[00:16] *** bbkr1 joined
[00:19] *** Sarten-X left
[00:19] *** maja_ joined
[00:19] *** kshannon_ joined
[00:19] *** frettled_ joined
[00:19] *** jnthn_ joined
[00:19] *** stepnem_ joined
[00:20] *** itz_ joined
[00:20] *** kthakore_ joined
[00:20] *** avarab joined
[00:22] *** stepnem left
[00:22] *** bbkr left
[00:22] *** kshannon left
[00:22] *** maja left
[00:22] *** buubot_backup left
[00:22] *** frettled left
[00:22] *** takesako left
[00:22] *** jnthn left
[00:22] *** itz left
[00:22] *** p6eval left
[00:22] *** avar left
[00:22] *** stepnem_ is now known as stepnem

[00:24] *** p6eval joined
[00:24] *** ChanServ sets mode: +v p6eval

[00:25] *** takesako joined
[00:28] *** Holy_Cow joined
[00:28] *** Holy_Cow left
[00:29] *** Holy_Cow joined
[00:30] *** jevin left
[00:31] *** jevin joined
[00:33] <dalek> rakudo/nom: b0d942e | Coke++ | t/spectest.data:

[00:33] <dalek> rakudo/nom: track failure mode

[00:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b0d942ee1b

[00:34] *** Holy_Cow left
[00:34] *** Holy_Cow joined
[00:37] <jlaire> .u ł

[00:37] <phenny> U+0142 LATIN SMALL LETTER L WITH STROKE (ł)

[00:37] *** buubot_backup joined
[00:37] *** f00li5h joined
[00:40] <jlaire> .u †

[00:40] <phenny> U+2020 DAGGER (†)

[00:44] *** Sarten-X joined
[00:45] *** dayangkun joined
[00:46] *** fbass joined
[00:47] *** uasi joined
[00:54] <fbass> where can I fetch official perl6 git repositories?

[00:55] *** rnddim is now known as lue

[01:03] *** nightlord joined
[01:04] *** Helios left
[01:05] *** Helios joined
[01:09] *** fbass left
[01:11] <[Coke]> "which one" ?

[01:11] <[Coke]> are you looking for the spec, or one of the implementations?

[01:11] <[Coke]> Can't hurt to start at http://perl6.org/

[01:12] <[Coke]> here's a pointer to the latest rakudo: http://rakudo.org/how-to-get-rakudo-nom/

[01:12] <[Coke]> and niecza is at: https://github.com/sorear/niecza

[01:15] *** tokuhirom left
[01:27] *** uasi left
[01:30] *** uasi joined
[01:30] *** soh_cah_toa joined
[01:35] *** Helios left
[01:36] *** Helios joined
[01:39] <soh_cah_toa> nom: goto FOO; say "a'; FOO: say 'b';

[01:39] <p6eval> nom: OUTPUT«===SORRY!===␤Confused at line 1, near "say \"a'; F"␤»

[01:39] <soh_cah_toa> nom: goto FOO; say 'a'; FOO: say 'b';

[01:40] <p6eval> nom: OUTPUT«===SORRY!===␤Confused at line 1, near "FOO: say '"␤»

[01:40] <soh_cah_toa> does 'goto' really not work on 2011.07 or am i not doing something right?

[01:41] <diakopter> last I knew, goto/labels weren't implemented

[01:41] <soh_cah_toa> agh

[01:41] <diakopter> niecza: goto FOO; say 'a'; FOO: say 'b';

[01:41] <p6eval> niecza v8-54-g5b8523c: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Illegally post-declared type:␤    'FOO' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 685 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1136 (STD P6.comp_unit …

[01:41] <diakopter> niecza: goto foo; say 'a'; foo: say 'b';

[01:41] <p6eval> niecza v8-54-g5b8523c: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Illegally post-declared type:␤    'foo' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 685 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1136 (STD P6.comp_unit …

[01:42] <soh_cah_toa> somehow i keep running into every unimplemented feature. it's really annoying

[01:43] *** dayangkun_ joined
[01:46] *** dayangkun left
[01:54] *** whiteknight left
[01:57] <lue> is 2011.07 the nom branch?

[01:57] <soh_cah_toa> no, that was the most recent release

[01:58] <soh_cah_toa> i believe nom came afterwards

[02:00] <lue> rakudo: goto FOO; say 'a'; FOO: say 'b';

[02:00] <p6eval> rakudo a55346: OUTPUT«===SORRY!===␤Confused at line 22, near "FOO: say '"␤»

[02:03] <soh_cah_toa> ironically, the only reason i want 'goto' is for a totally hacky work around another unimplemented feature in rakudo: escape sequences in character classes :\

[02:03] <soh_cah_toa> also, i can't interpolate an array index in a character class b/c the brackets get confusing

[02:04] *** colomon joined
[02:13] *** jaldhar joined
[02:20] <sorear> diakopter: forward gotos require quotes

[02:20] <benabik> niecza: goto "foo"; say 'a'; foo: say 'b';

[02:20] <p6eval> niecza v8-54-g5b8523c: OUTPUT«b␤»

[02:20] <benabik> sorear++

[02:21] <soh_cah_toa> rakudo: goto "FOO"; say 'a'; FOO: say 'b';

[02:21] <p6eval> rakudo a55346: OUTPUT«===SORRY!===␤Confused at line 22, near "FOO: say '"␤»

[02:21] <soh_cah_toa> nom: goto "FOO"; say 'a'; FOO: say 'b';

[02:21] <p6eval> nom: OUTPUT«===SORRY!===␤Confused at line 1, near "FOO: say '"␤»

[02:23] <soh_cah_toa> wouldn't need stupid goto if i could just interpolate an array index in a character class... :(

[02:23] * soh_cah_toa huffs and puffs

[02:29] <sorear> um, what.

[02:29] <sorear> you can't interpolate anything in character classes, that's not how they work :|

[02:30] <sorear> what are you trying to do?

[02:36] *** s1n left
[02:38] <soh_cah_toa> i have an array @foo = <abc def ghi> and i want to check if some scalar contains any of the characters in the first element @foo[0]. however, i can't do `$something ~~ /<[@foo[0]]>/`. actually, i want to do this for @foo[0] and @foo[1] and another scalar string all in one character class

[02:39] <soh_cah_toa> so like $something ~~ /<[$value @foo[0] @foo[1]]>/

[02:39] <soh_cah_toa> except that's illegal obviously

[02:39] <soh_cah_toa> not in p5 though

[02:41] *** beekor left
[02:42] *** odoacre joined
[02:44] *** ponbiki left
[02:47] <soh_cah_toa> not sure why this would be illegal in p6. i can do what i want just fine in p5 :\

[02:48] <lue> nom: my @a = <abc def ghi>; say [|] @a; # I would assume this is the expected result, but just making sure

[02:48] <p6eval> nom: OUTPUT«any(any("abc", "def"), "ghi")␤»

[02:50] <soh_cah_toa> well, i want it to match *any* of the characters in the string (in one of the array elements). not the entire string itself

[02:51] *** s1n joined
[02:53] <soh_cah_toa> except it has to be any of the characters in $value OR any of the characters in @foo[0] OR any of the characters in @foo[1]. thus, a character class should perform exactly that task

[02:54] *** nightlord left
[02:59] <lue> nom: my $a = 'z'; my @b = <abc def ghi>; @b = @b.join('').comb; say "i" ~~ ($a | [|] @b);

[02:59] <p6eval> nom: OUTPUT«Bool::True␤»

[02:59] <lue> Not pretty, but perhaps it'll do? [Unless you *need* to use a regex, that is]

[02:59] <lue> afk

[03:00] <soh_cah_toa> i think i get what you're doing but $a should be a string like 'abc' and see if any of them are a match

[03:02] <soh_cah_toa> what does .comb() split on by default? <alpha>?

[03:10] *** xinming left
[03:12] *** xinming joined
[03:12] <soh_cah_toa> lue: agh, so close. doesn't work when $a is longer than one character which is what i need

[03:12] <lue> nom: say "L337 teχtors!".comb.perl

[03:12] <p6eval> nom: OUTPUT«("L", "3", "3", "7", " ", "t", "e", "χ", "t", "o", "r", "s", "!").list␤»

[03:13] <lue> nom: my $a = 'xyz'; $a = $a.comb; my @b = <abc def ghi>; @b = @b.join('').comb; say "y" ~~ ($a | [|] @b);

[03:13] <p6eval> nom: OUTPUT«Bool::False␤»

[03:13] <soh_cah_toa> oh yeah, looks like if i make it $a.comb in the match it works

[03:13] <lue> nom: my $a = 'xyz'; my @b = <abc def ghi>; @b = @b.join('').comb; say "y" ~~ ([|] $a.comb | [|] @b);

[03:13] <p6eval> nom: OUTPUT«Bool::True␤»

[03:13] <soh_cah_toa> lue: you

[03:13] <soh_cah_toa> lue: rock

[03:14] <soh_cah_toa> lue++

[03:14] *** donri left
[03:15] * soh_cah_toa discovers the ultimate power of reductions and .comb()

[03:17] *** Sarten-X left
[03:17] <uasi> maybe @b = @b>>.comb; ?

[03:17] <soh_cah_toa> that code may be incredibly cryptic but it's also incredibly awesome

[03:19] *** JimmyZ_ joined
[03:27] *** Su-Shee left
[03:28] <abercrombie> Hi, could anyone tell me the syntax that make an assignment to a Buf obj?  i.e. my Buf $a=?

[03:28] *** Su-Shee joined
[03:29] *** ponbiki joined
[03:32] *** ponbiki left
[03:34] <lue> rakudo: my $a = Buf.new([1,2,3]); say $a.perl;

[03:34] <p6eval> rakudo a55346: OUTPUT«Buf.new(1 2 3)␤»

[03:35] <lue> [last I recall, you can't do    my Buf $a;    ]

[03:35] <benabik> nom: my Buf $a

[03:35] <p6eval> nom:  ( no output )

[03:35] <benabik> nom: my Buf $a; say 'alive'

[03:35] <p6eval> nom: OUTPUT«alive␤»

[03:36] <benabik> nom: say (:16{dead_beef}).perl

[03:36] <p6eval> nom: OUTPUT«===SORRY!===␤Malformed radix number at line 1, near "{dead_beef"␤»

[03:39] <lue> nom: say (:16{0xdead_beef}).perl

[03:39] <p6eval> nom: OUTPUT«===SORRY!===␤Malformed radix number at line 1, near "{0xdead_be"␤»

[03:39] <lue> nom: say (:16(0xdead_beef)).perl

[03:39] <p6eval> nom: OUTPUT«Nominal type check failed for parameter '&call'; expected Callable but got Sub instead␤  in sub AUTOTHREAD at src/gen/CORE.setting:1259␤  in sub unbase at src/gen/CORE.setting:3088␤  in mu <anon> at /tmp/8geCbvTErj:1␤  in mu <anon> at /tmp/8geCbvTErj:1␤␤»

[03:39] <lue> nom: say (:16<0xdead_beef>).perl

[03:39] *** Sarten-X joined
[03:39] <p6eval> nom: OUTPUT«3735928559␤»

[03:39] <benabik> lue: I think the Blob literal syntax is NYI

[03:40] *** wooden joined
[03:43] *** obr2 joined
[03:43] *** obr2 left
[03:43] <abercrombie> my $a = Buf.new([1,2,3]); doesn't work for nom?

[03:44] <JimmyZ_> yeah

[03:45] <sorear> don't use [|]

[03:45] <sorear> the interaction between junctions and &reduce is going to be very fragile

[03:45] <sorear> use &any instead

[03:47] <soh_cah_toa> well, looks like it still works w/ any() anyway. what do you means it's fragile though?

[03:50] *** ponbiki joined
[03:55] *** birdwindupbird joined
[03:57] <TimToady> nom: my @x = <a b c>; say "cab" ~~ /@x/

[03:57] <p6eval> nom: OUTPUT«===SORRY!===␤Method 'rxtype' not found for invocant of class 'PAST;Regex'␤»

[03:57] <TimToady> rakudo: my @x = <a b c>; say "cab" ~~ /@x/

[03:57] <p6eval> rakudo a55346: OUTPUT«␤»

[03:58] <TimToady> nom: my @x = <a b c>; say "cab" ~~ /|@x/

[03:58] <p6eval> nom: OUTPUT«===SORRY!===␤Method 'rxtype' not found for invocant of class 'PAST;Regex'␤»

[03:58] <TimToady> arrays in regex are supposed to have "any" semantics too

[03:59] <TimToady> niecza: my @x = <a b c>; say "cab" ~~ /|@x/

[03:59] <p6eval> niecza v8-54-g5b8523c: OUTPUT«Match()␤»

[03:59] <TimToady> niecza: my @x = <a b c>; say ("cab" ~~ /|@x/).perl

[03:59] <p6eval> niecza v8-54-g5b8523c: OUTPUT«Match␤»

[04:00] <TimToady> niecza: my @x = <a b c>; say ("cab" ~~ /@x/).perl

[04:00] <p6eval> niecza v8-54-g5b8523c: OUTPUT«Match␤»

[04:00] <TimToady> nom: my @x = <a b c>; say "cab" ~~ /<@x>/

[04:00] <p6eval> nom: OUTPUT«===SORRY!===␤Method 'rxtype' not found for invocant of class 'PAST;Regex'␤»

[04:00] <TimToady> rakudo: my @x = <a b c>; say "cab" ~~ /<@x>/

[04:00] <p6eval> rakudo a55346: OUTPUT«c␤»

[04:01] <TimToady> that one works

[04:01] <TimToady> rakudo: my @x = <a b c>; say "cab" ~~ /<@x>*/

[04:01] <p6eval> rakudo a55346: OUTPUT«cab␤»

[04:01] <TimToady> rakudo: my @x = <a ab c>; say "cab" ~~ /<@x>*/

[04:01] <p6eval> rakudo a55346: OUTPUT«cab␤»

[04:02] <soh_cah_toa> odd, i thought the <> was reserved for named regexes? how does it behave w/ an array?

[04:02] <TimToady> ooh, even does ltm

[04:03] <TimToady> there are many, many things that can go inside <>

[04:04] <sorear> yikes, rakudo is ahead of niecza at something, need to fix

[04:05] <TimToady> soh_cah_toa: see http://perlcabal.org/syn/S05.html#Extensible_metasyntax_(%3C...%3E)

[04:05] <sorear> TimToady: do you think it makes any sense to allow variables in character classes?

[04:05] <sorear> I'm on the fence

[04:05] <sorear> character classes feel very literal-y to me

[04:05] *** dark_x joined
[04:05] <sorear> niecza has a lovely O(log n) implementation of character classes that requires pre-analysis

[04:06] <TimToady> rakudo: my @x = <a ab c>; say "cab" ~~ /<{@x.join('|')}>*/

[04:06] <p6eval> rakudo a55346: OUTPUT«ca␤»

[04:06] <TimToady> hmm, that seems to have foiled the LTM

[04:07] *** satyavvd joined
[04:07] <TimToady> rakudo: my @x = <a b c>; say "cab" ~~ /<{ "<[@x]>" }>*/

[04:07] <p6eval> rakudo a55346: OUTPUT«␤»

[04:08] <TimToady> rakudo: my @x = <a b c>; say "cab" ~~ /<{ "<[@x[]]>" }>*/

[04:08] <p6eval> rakudo a55346: OUTPUT«cab␤»

[04:08] <soh_cah_toa> i don't see why it shouldn't. whatever the variable holds would be interpreted as literal characters

[04:08] <TimToady> there's another way

[04:08] <soh_cah_toa> my $foo = 'abc'; /<[$foo]>/; would be the same as /<[a b c]>/

[04:10] <TimToady> I think if there are so many ways to generate an any match already without resorting to eval, we should probably keep the char classes literal

[04:11] <TimToady> there's also defining your own character properties

[04:11] <TimToady> then it's just <+myprop>

[04:11] <TimToady> I don't think we need to retreat to P5's confusion of regexes with strings

[04:12] <soh_cah_toa> a valid point

[04:12] <TimToady> a lot of this redesign is just gut feelings

[04:13] <TimToady> but I can come up with lots of rationalizations for my gut feelings :)

[04:13] <soh_cah_toa> :)

[04:14] <TimToady> 'course, it's not exactly specced yet how to make your own character properties...

[04:14] <TimToady> "a topic of ongoing research" :)

[04:14] <TimToady> this may fall out of actually implementing Unicode properties natively, though

[04:15] <soh_cah_toa> i was just gonna ask that. what's a character property? never heard of that

[04:16] <TimToady> well, something like <alpha>

[04:16] <TimToady> or that's supposed to be <:alpha> now, actually

[04:16] <TimToady> Unicode defines skadillions of character properties

[04:17] <TimToady> things you get at with \p and \P in p5

[04:20] <soh_cah_toa> oh, i thought <alpha> was just a character class

[04:21] <TimToady> a great deal of Unicode is "just character classes"

[04:22] <TimToady> but p5 is still rather far ahead of p6 on Unicode classes

[04:24] <TimToady> anyway, S05 is well worth a gander, since regexen are the parts of perl that are most heavily redesigned in p6

[04:24] <TimToady> and the whole p6 grammar is basically a set of fancy regexes

[04:24] <soh_cah_toa> yeah, i've yet to get through the whole thing. it's the size of an encyclopedia

[04:25] <TimToady> you can stop when it starts enumerating all the different capture cases, unless you're interested

[04:26] *** daniel-s joined
[04:26] <TimToady> well, usually listing the differences from p5 makes a shorter document, but in this case, it's probably longer that way :)

[04:28] <TimToady> the grammar is a good example to learn from, if you learn from examples, but it won't tell you much about the bits that haven't been implemented yet, which haven't been because the parser doesn't need them yet :)

[04:28] <soh_cah_toa> indeed

[04:29] <TimToady> there are things like hard-wired lists of brackets that should be using Unicode properties

[04:32] <soh_cah_toa> well, time to call it a night

[04:33] <soh_cah_toa> TimToady: thanks a bunch :)

[04:33] *** soh_cah_toa left
[04:47] *** wolfman2000 left
[04:59] *** abercrombie left
[05:07] *** SHODAN joined
[06:02] *** ponbiki left
[06:09] *** am0c joined
[06:13] *** wtw joined
[06:13] *** ponbiki joined
[06:14] *** JimmyZ_ left
[06:35] *** mj41 joined
[06:44] *** ponbiki left
[06:45] *** ponbiki joined
[06:49] *** mj41 left
[07:06] *** dayangkun_ left
[07:07] <lue> Hm. I can't seem to find where := and ::= are currently implemented in Rakudo. (according to NOMMAP it could use some fixing, and I'd like to see if I could do it.)

[07:12] <lue> nevermind, I think I found it (Actions.pm, right?)

[07:12] <moritz> right

[07:13] <sorear> try to do it even better than the last time you did it

[07:17] <moritz> sorear: in rakudo I'm now using a trait (is hidden_from_backtrace) to hide certain routines from backtraces (notably &die for now)

[07:17] <moritz> sorear: have you spent any thoughts on how you want to do that in niecza?

[07:17] <sorear> moritz: no, but I like that one

[07:17] <moritz> sorear: background of the question is that I want to know if you think it's sensible to spec that

[07:18] <sorear> moritz: niecza already uses something similar for test failures

[07:18] <moritz> sorear: care to explain a bit more?

[07:18] <sorear> it prints something like (callframe(), *.caller ... *).first(!*.hints('$?TRANSPARENT')).line

[07:19] <moritz> ah, ok

[07:20] <sorear> the top of Test.pm6 has my constant $?TRANSPARENT = True; so not ok skips all Test lines

[07:23] *** wk joined
[07:24] *** mj41 joined
[07:24] <moritz> sorear: are you OK with speccing the 'hidden_from_backtrace' trait, or do you want rather want to leave it open to the implementation how to achieve it?

[07:25] *** SHODAN left
[07:29] *** xinming left
[07:31] *** xinming joined
[07:35] <sorear> moritz: this is the kind of thing that we can easily emulate later if we change our minds, +1 to speccing

[07:35] *** im2ee joined
[07:36] <moritz> sorear: ok, thanks for your opinion

[07:41] *** Sarten-X left
[07:41] *** wk left
[07:45] <cognominal> jnthn, we need a perl 6 talker for osdcfr and the talk submission closes in two days, We are part of a larger event and we can't accept talkers at very short notice.

[07:56] <dalek> roast: f444b83 | lue++ | S03-operators/binding-attributes.t:

[07:56] <dalek> roast: Added missing semicolon to line 36 of S03-operators/binding-attributes.t

[07:56] <dalek> roast: review: https://github.com/perl6/roast/commit/f444b8328b

[08:03] <eiro> cognominal, i think the schedule is overbooked 

[08:03] *** Sarten-X joined
[08:07] *** masak joined
[08:07] <masak> morning, #perl6

[08:07] <felher> o/

[08:08] <lue> good day sir o/

[08:08] *** jnthn_ is now known as jnthn

[08:21] <dalek> specs: a7cfe02 | moritz++ | S32-setting-library/Exception.pod:

[08:21] <dalek> specs: [S32] backtraces overhaul

[08:21] <dalek> specs: 

[08:21] <dalek> specs: spec hidden_from_backtrace trait, be more verbose on backtrace stringification,

[08:21] <dalek> specs: and introduce separate BackTraceLine class

[08:21] <dalek> specs: review: https://github.com/perl6/specs/commit/a7cfe02002

[08:29] *** wamba joined
[08:37] <masak> moritz: maybe BackTrace::Line?

[08:38] *** daxim joined
[08:38] <moritz> masak: maybe. But even the 'Line' part isn't quite correct

[08:42] <pmichaud> good morning, #perl6

[08:42] <lue> good morning pmichaud o/

[08:42] <jnthn> o/, pmichaud 

[08:43] <jnthn> Hope journey home worked out fine.

[08:43] <moritz> seems like pmichaud's uptime is still synchronized with Europe, at least partially

[08:44] <pmichaud> journey was excellent, actually.  flights were all early, in fact.

[08:44] *** dakkar joined
[08:44] *** orafu left
[08:44] <jnthn> Wow. :)

[08:44] *** orafu joined
[08:45] <pmichaud> I even managed to zoom through immigration+customs in the U.S. -- they opened a whole new section just as I arrived.  and since I didn't have any checked baggage, I whizzed past all of the people waiting at baggage claim :)

[08:45] <pmichaud> so, nice return trip overall

[08:45] <pmichaud> my uptime is completely hosed at the moment

[08:46] <pmichaud> I think I'm closer to far east (japan/china) time than europe time at the moment

[08:46] <moritz> then your flight went into the wrong direction :-)

[08:46] <pmichaud> maybe so.  :)

[08:47] <pmichaud> I'm just getting ready to head to sleep (for <3 hrs), thought I'd pop in real quick to see what's up :)

[08:48] <satyavvd> ['1 2','3 4']>>.words.perl

[08:49] <satyavvd> why this is not working ? ['1 2','3 4']>>.words>>.[1]

[08:49] * pmichaud suggests a "nom: " and a "say"

[08:49] <pmichaud> nom:  ['1 2', '3 4']>>words.perl.say

[08:49] <p6eval> nom: OUTPUT«===SORRY!===␤Confused at line 1, near "['1 2', '3"␤»

[08:49] <satyavvd> nom: say ['1 2','3 4']>>.words.perl

[08:49] <p6eval> nom: OUTPUT«(("1", "2").list, ("3", "4").list)␤»

[08:49] <moritz> satyavvd: >> recurses into data structures

[08:50] <satyavvd> nom: say ['1 2','3 4']>>.words>>.[1]

[08:50] <p6eval> nom: OUTPUT«.[1] out of range for type "1"␤  in method at_pos at src/gen/CORE.setting:913␤  in method postcircumfix:<[ ]> at src/gen/CORE.setting:895␤  in method reify at src/gen/CORE.setting:3596␤  in method reify at src/gen/CORE.setting:3501␤  in method reify at src/gen/CORE.setting:3…

[08:50] <moritz> satyavvd: so >>.[1] never does what you want, since it's not called on the inner list, but on each result string

[08:50] <moritz> use .map instead

[08:50] <pmichaud> nom:  ['1 2', '3 4']>>words.[1].say

[08:50] <p6eval> nom: OUTPUT«===SORRY!===␤Confused at line 1, near "['1 2', '3"␤»

[08:50] <pmichaud> nom:  ['1 2', '3 4']>>.words.[1].say

[08:50] <p6eval> nom: OUTPUT«2␤»

[08:51] <lue> goodnight all o/

[08:52] <moritz> .u -

[08:52] <phenny> U+002D HYPHEN-MINUS (-)

[08:52] <pmichaud> nom: say ['1 2', '3 4'].map: { .words.[1] }

[08:52] <p6eval> nom: OUTPUT«2 4␤»

[08:52] <satyavvd> ok got it.. Thanks

[08:54] <pmichaud> anyway, time for sleep for me

[08:54] <masak> moritz: Backtrace::Element?

[08:54] <pmichaud> Element +1   Line -1

[08:54] <jnthn> Backtrace::Frame

[08:54] <masak> moritz: IMO the 't' in Backtrace should be a small letter.

[08:54] <moritz> masak: better, though 'Element' usually frings the 'too general' bell

[08:54] <jnthn> nap well, pmichaud 

[08:54] <moritz> +1 to Backtrace::Frame from me

[08:54] <masak> 'Backtrace' is one concept

[08:54] <pmichaud> backtrace seems to be a single word in most usages I've found

[08:54] <pmichaud> so Backtrace +1  BackTrace -1

[08:55] <moritz> ok

[08:55] <masak> yes, +1 to Backtrace::Frame

[08:55] <masak> very honest and perly.

[08:55] <pmichaud> Backtrace::Frame sounds very nice

[08:55] <pmichaud> +2

[08:55] <satyavvd> jnthn: I have seen this in your slides : cat data.txt | perl6 -e "say [+] $*IN.lines>>.words>>.[2]"

[08:55] <satyavvd> does it works?

[08:55] <pmichaud> satyavvd: might be from an older version of the spec

[08:56] <satyavvd> ok

[08:56] <pmichaud> the hyper recursion into Iterables is somewhat recent.

[08:56] <TimToady> not that recent

[08:56] <pmichaud> well, for >>.method it is, at least in implementation

[08:57] * TimToady is taking an anti-nap :)

[08:57] <TimToady> glad pmichaud++ got home safely

[08:57] <pmichaud> TimToady: yeah, it's odder to see you here at this time than it is to see me at this time :)

[08:57] <pmichaud> TimToady: likewise (glad you arrived home safely as well)

[08:58] <dalek> specs: d91760b | moritz++ | S32-setting-library/Exception.pod:

[08:58] <dalek> specs: [S32] backtrace renames, as suggested by masak++, jnthn++ and pmichaud++

[08:58] <dalek> specs: review: https://github.com/perl6/specs/commit/d91760b253

[08:58] <masak> moritz: re Damian's "And why is this entire message written in questions?" -- he was talking about his own message. he was trying to be humourous.

[08:58] <moritz> masak: ah :-)

[08:58] * moritz needs more sleep

[08:58] <pmichaud> my p6-tuits may be in very limited supply for the next 24-48 hrs, but after that I expect to be around again

[08:59] <jnthn> satyavvd: I'm quite sure it worked at the time I wrote the slides. :)

[09:01] <pmichaud> okay, naptime.  bbl.

[09:04] <satyavvd> :)

[09:04] <moritz> satyavvd: fwiw I recently stumbled over the same problem

[09:04] *** drbean left
[09:07] *** koban joined
[09:07] *** koban left
[09:09] <tadzik> good morning

[09:11] <masak> dzień dobry, tadzik 

[09:18] *** coregateFX left
[09:18] *** coregateFX joined
[09:30] <masak> TimToady++ # the 'rename' command

[09:32] <dalek> rakudo/nom: 89e9ef2 | tadzik++ | src/ (2 files):

[09:32] <dalek> rakudo/nom: Make --doc take optional value, defaulting to 'text'

[09:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/89e9ef27b4

[09:39] *** JimmyZ joined
[09:41] <masak> "In good OO programming, we don’t make class hierarchies in order to satisfy our inner Linnaeus." -- http://lists.canonical.org/pipermail/kragen-tol/2011-August/000937.html -- via Su-Shee++

[09:42] <Su-Shee> I liked the "inner Linneus" :)

[09:44] <sjn> Yeah, that was a good one :)

[09:45] <Su-Shee> (and yes, I agree. I hate those examples dearly..)

[09:46] <moritz> Su-Shee: I immediately thought of you when reading that

[09:47] *** SHODAN joined
[09:55] <moritz> LHF: write a README for the perl6/specs repo

[09:59] <masak> the problem with "Car extends Vehicle" and similar examples is that they are rooted in the idea that there is One True Model, namely what you arrive at by thinking about modeling for five seconds.

[10:04] <moritz> and the model depends on what operations you want need to perform

[10:05] <moritz> (which I hate about our current src/classes-and-objects.pod in the book)

[10:06] <masak> add a comment in a TODO file somewhere.

[10:06] <masak> otherwise we'll forget.

[10:06] <moritz> (the Inheritance example, the first one (Task) is fine)

[10:06] <moritz> I'll open a github issue

[10:07] <moritz> it has Employee, Programmer, Cook, Baker, GeekCook etc.

[10:09] *** im2ee_ joined
[10:09] <daxim> print "a Sheep goes baaaah!\n";

[10:11] *** perlhack joined
[10:12] *** im2ee left
[10:12] <moritz> https://github.com/perl6/book/issues/58

[10:14] <colomon> moritz: reading hacker news this morning, are we?  (or is it on reddit too?)  ;)

[10:14] <moritz> colomon: it was on hacker news yesterday night (in my time zone) already :-)

[10:15] * jnthn is getting a new main dev machine next week o/

[10:15] <colomon> \o

[10:15] <colomon> \o/

[10:15] <jnthn> Quad core i7, 16 GB of RAM, etc. :)

[10:16] <dalek> book: 6816148 | moritz++ | src/classes-and-objects.pod:

[10:16] <dalek> book: add a TODO note for the inheritance example

[10:16] <dalek> book: review: https://github.com/perl6/book/commit/6816148ba1

[10:17] * flussence got a 6-core AMD with 4GB at $dayjob a few weeks ago... (but with what I had before, I'll take anything)

[10:21] *** satyavvd left
[10:25] *** perlhack left
[10:26] <tadzik> hrm, lots of spectest failing

[10:27] <tadzik> aah, HoMM VI will have battles on squares, not hexes. What has this world come to!

[10:27] <masak> it makes perfect sense. squares have 8 neighbours, hexes only 6 :P

[10:34] *** Species8472 joined
[10:35] *** dark_x left
[10:36] *** dark_x joined
[10:36] *** dual left
[10:41] *** im2ee_ left
[10:41] *** im2ee joined
[10:43] *** dual joined
[10:45] *** coregateFX left
[10:45] *** avarab is now known as avar

[10:46] <tadzik> yeah, next time they'll pick circles. Oh, wait...

[10:50] <tadzik> erm, do only I have so many spectest failures?

[10:54] *** pernatiy left
[10:58] <im2ee> Hello, are there any Plug-ins for Eclipse? 

[10:58] <tadzik> Nominal type check failed for parameter '&x'; expected Callable but got Sub instead. Wow

[10:58] <im2ee> Perl6 plug-ins ofcourse.

[10:58] <tadzik> nom: say so Sub ~~ Callable

[10:58] <p6eval> nom: OUTPUT«Bool::False␤»

[10:59] <tadzik> moritz: you've been moving stuff around in the setting recently?

[10:59] <tadzik> im2ee: I'm not aware of any

[10:59] <tadzik> not ok 23 - a multi does Callable

[10:59] <tadzik> yeah, stuff's broken

[11:00] <flussence> nom: say Sub ~~ not so Callable # :)

[11:00] <p6eval> nom: OUTPUT«Bool::True␤»

[11:00] <tadzik> im2ee: http://perl6.org/whatever/ this lists known editor plugins

[11:00] <im2ee> tadzik, thank You. :)

[11:00] *** drbean joined
[11:00] <tadzik> im2ee: you're welcome :)

[11:01] <jnthn> Makefile.in change in https://github.com/rakudo/rakudo/commit/19cfd13d25601826842fc4b6a2937a643b16d789 will have done it.

[11:01] <tadzik> I think so, yes

[11:02] <tadzik> but I'm not bisecting again. You have 42 core machines, you do it ;)

[11:04] *** Trashlord left
[11:10] <tadzik> I has weird nom bug

[11:10] <tadzik> nom: https://raw.github.com/gist/1164867/ce4d8ef0f7712f835c7cd32ad9cee2b8132f71b8/gistfile1.txt

[11:10] <p6eval> nom: OUTPUT«===SORRY!===␤Confused at line 1, near "https://ra"␤»

[11:11] <tadzik> nom: https://gist.github.com/1164867

[11:11] <p6eval> nom: OUTPUT«===SORRY!===␤Invalid typename in parameter declaration at line 7, near " $s) { !!!"␤»

[11:11] <tadzik> if we move subset declaration after a class declaration, it works

[11:12] <masak> sounds like possibly a role lexpad issue.

[11:12] <tadzik> jnthn will be happy

[11:14] <tadzik> nom: class Pies::Fetcher {}; class Pies { has Pies::Fetcher $!fetcher } #another

[11:14] <p6eval> nom: OUTPUT«===SORRY!===␤In "has" declaration, typename Pies::Fetcher must be predeclared (or marked as declarative with :: prefix) at line 1, near " $!fetcher"␤»

[11:14] <flussence> nom: class A::B::C {}; class A::B {}; class A {};

[11:14] <p6eval> nom: OUTPUT«===SORRY!===␤error:imcc:Multiple declarations of lexical 'A'␤␤      in file '(file unknown)' line 27070149␤»

[11:15] <jnthn> No, it's not a role lexpad issue, it's just unfinished package munging.

[11:15] <tadzik> looks like Pies does to much magic to be nom-runnable at the moment

[11:15] <jnthn> Here, class Pies has to steal the WHO of the package Pies that we stubbed when declaring Pies::Fletcher

[11:16] <tadzik> . o O ( class Pies { has $!fleas }

[11:16] <tadzik> )

[11:21] <tadzik> can I somehow reuse a grammar token, but with a different action method? I'd like to handle colonpair a bit differently in Pod blocks configuration

[11:22] *** pernatiy joined
[11:23] <moritz> well, you can do

[11:23] <moritz> token my_colonpair { <colonpair }

[11:23] <moritz> and then do another action in the my_colonpair action method

[11:25] <tadzik> but the colonpair() action method will still be called, and I'll only have access to what it returns, not to colonpair internals like $<key>, $<value> or so

[11:25] <jnthn> $<colonpair><key> would work

[11:26] <tadzik> oh, ok

[11:32] *** MayDaniel joined
[11:40] *** Bucciarati left
[11:41] *** Bucciarati joined
[11:49] *** donri joined
[11:55] *** ab5tract joined
[11:58] *** Bucciarati left
[11:58] *** Bucciarati joined
[12:03] *** im2ee left
[12:08] *** daniel-s left
[12:12] *** daniel-s joined
[12:14] *** Bucciarati left
[12:19] *** im2ee joined
[12:25] *** Bucciarati joined
[12:29] *** ab5tract left
[12:29] *** dark_x left
[12:32] *** Holy_Cow left
[12:34] *** dark_x joined
[12:34] *** agentzh joined
[12:37] *** thou left
[12:38] *** bluescreen10 joined
[12:43] *** SHODAN left
[12:47] *** MayDaniel left
[12:47] <tadzik> damn I'm doing evil stuff

[12:47] <tadzik> $val<quote_EXPR><quote_delimited><quote_atom>.Str

[12:51] *** donri left
[12:51] *** donri joined
[12:51] *** dark_x left
[12:53] *** awoodland joined
[12:54] *** awoodland left
[12:58] *** drbean left
[13:02] *** Trashlord joined
[13:03] *** tokuhirom joined
[13:10] *** Trashlord left
[13:23] *** Trashlord joined
[13:25] *** Aridai joined
[13:32] <dalek> rakudo/nom: 4f6018b | tadzik++ | src/Perl6/Grammar.pm:

[13:32] <dalek> rakudo/nom: Allow any number of colonpairs in Pod block configuration

[13:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4f6018b539

[13:32] <dalek> rakudo/nom: 380494c | tadzik++ | / (3 files):

[13:32] <dalek> rakudo/nom: Parse Pod block configuration and store it in Pod::Block.config. Add tests.

[13:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/380494cfbc

[13:33] *** uasi left
[13:35] *** bluescreen10 left
[13:42] <daxim> how do I run roast?  should I just prove … */*.t?

[13:43] <JimmyZ> make spectest

[13:43] <tadzik> in Rakudo/niecza, that is

[13:44] <moritz> in niecza you do t/run_spectests

[13:44] <daxim> alright, I'll see what spectest calls

[13:44] <tadzik> it just does prove, yes

[13:44] <tadzik> prove -e 'perl6' t/spec/ or so

[13:45] <tadzik> or maybe something s/spectest.data related

[13:45] <moritz> well, module the fudging, and reading file list from t/spectest.data

[13:45] <moritz> actually rakudo's t/harness calls Test::Harness directly, without the route through prove

[13:49] *** TiMBuS left
[13:50] *** TiMBuS joined
[13:59] *** uasi joined
[14:00] *** uasi left
[14:00] *** uasi joined
[14:09] *** wtw left
[14:14] <dalek> rakudo/nom: 276bfeb | tadzik++ | / (5 files):

[14:14] <dalek> rakudo/nom: Parse =config directives properly

[14:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/276bfeb0d2

[14:14] *** cosimo left
[14:14] *** Trashlord left
[14:15] *** abercrombie joined
[14:20] *** Trashlord joined
[14:21] <daxim> fyi, roasting a pug 6.2.13.20110519/ghc 6.12.3 smells like:  791 files     7471 tests, 4795 ok, 2676 failed, 14 todo, 9 skipped, 587 parse errors

[14:21] <daxim> also, the ghc toolchain become better and better

[14:23] <moritz> well, pugs is getting out of date rather quickly

[14:23] <daxim> you never cease mentioning that ;)

[14:23] *** cogno_ left
[14:23] *** cognominal left
[14:24] <tadzik> oopsie, broke S26

[14:27] *** cognominal joined
[14:31] <tadzik> nom: say so 'C<>' ~~ /<identifier>/

[14:31] <p6eval> nom: OUTPUT«Method 'identifier' not found for invocant of class 'Cursor'␤  in regex <anon> at /tmp/G6ChgiFA1Z:1␤  in method ACCEPTS at src/gen/CORE.setting:5805␤  in mu <anon> at /tmp/G6ChgiFA1Z:1␤  in mu <anon> at /tmp/G6ChgiFA1Z:1␤␤»

[14:31] <tadzik> meh

[14:31] <tadzik> nom: grammar a { token TOP { <identifier> } }; say so a.parse('C<>')

[14:31] <p6eval> nom: OUTPUT«Method 'identifier' not found for invocant of class 'a'␤  in regex TOP at /tmp/2mcVsQObQv:1␤  in method parse at src/gen/CORE.setting:5797␤  in mu <anon> at /tmp/2mcVsQObQv:1␤  in mu <anon> at /tmp/2mcVsQObQv:1␤␤»

[14:32] *** Holy_Cow joined
[14:32] <tadzik> I'll just assume this is it

[14:32] *** Aridai left
[14:32] <jnthn> nom: grammar a { token TOP { <ident> } }; say so a.parse('C<>')

[14:32] <p6eval> nom: OUTPUT«Bool::True␤»

[14:32] <tadzik> oh

[14:36] *** PacoLinux joined
[14:38] <tadzik> yeah, <identifier> doesn't like C<>. It matches only 'C'

[14:38] <moritz> nom: grammar a { token TOP { <ident> } }; say a.parse('C<>')

[14:38] <p6eval> nom: OUTPUT«C␤»

[14:40] <tadzik> \S+ shall it be, then

[14:42] <pmichaud> re-good morning, #perl6

[14:42] <moritz> good am, pm

[14:42] <colomon> \o

[14:43] <tadzik> hello pmichaud 

[14:43] <dalek> rakudo/nom: df376ba | tadzik++ | src/Perl6/Grammar.pm:

[14:43] <dalek> rakudo/nom: Allow any non-whitespace string as a =config type identifier. Fixes S26 parsing

[14:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/df376bab86

[14:44] *** PacoLinux left
[14:44] *** PacoLinux joined
[14:51] *** tokuhirom left
[14:55] * pmichaud considers having failed matches actually dump "NO!" to the standard output.  :-)

[14:56] <pmichaud> (c.f. jnthn++'s talk at ye2011

[14:56] <arnsholt> Just like Prolog! =)

[14:57] <moritz> pmichaud: pleae make that 'OH NOEZ'

[14:57] <tadzik> that would look funny in the Perl 6 parser. Maybe it could yell "NO NO PLEASE NO" instead :)

[14:57] <pmichaud> "NO!"  (in jnthn++'s presentation, "OH NOEZ" is what the person said after receiving the "NO!" :) 

[14:58] <tadzik> can I use stuff like $<spaces> inside <!before>?

[14:58] <moritz> I think so

[14:59] *** ab5tract joined
[14:59] <pmichaud> tadzik: I'm not sure.  might not work because <!before> might impose a separate lexical scope on $/.

[14:59] <tadzik> hmm

[14:59] <moritz> nom: say 'a a' ~~ m:s/<alpha> <!before $<alpha>/

[14:59] <p6eval> nom: OUTPUT«===SORRY!===␤regex assertion not terminated by angle bracket at line 1, near "/"␤»

[14:59] <moritz> nom: say 'a a' ~~ m:s/<alpha> <!before $<alpha> >/

[14:59] <p6eval> nom: OUTPUT«Method 'before' not found for invocant of class 'Cursor'␤  in regex <anon> at /tmp/7i72Lz3WHx:1␤  in method ll-match at src/gen/CORE.setting:2826␤  in method match at src/gen/CORE.setting:2870␤  in mu <anon> at /tmp/7i72Lz3WHx:1␤  in mu <anon> at /tmp/7i72Lz3WHx:1␤␤»…

[15:00] <pmichaud> enobefore?

[15:00] <pmichaud> hmmmm

[15:00] <moritz> not in nom/qregex

[15:00] <pmichaud> need to add that to the punch list..... /me adds

[15:00] <moritz> nqp: say('a a' ~~ m:s/<alpha> <!before $<alpha> >/)

[15:00] <p6eval> nqp: OUTPUT«Confused at line 1, near "say('a a' "␤»

[15:00] <tadzik> I'll try with storing those in some :my'

[15:00] <tadzik> s

[15:00] <pmichaud> nqp doesn't have m:

[15:00] <moritz> nqp: say('a a' ~~ /<alpha> \s  <!before $<alpha> >/)

[15:00] <p6eval> nqp: OUTPUT«␤»

[15:00] <moritz> pmichaud: just noticed, yes

[15:00] <moritz> nqp: say('a ' ~~ /<alpha> \s  <!before $<alpha> >/)

[15:01] <p6eval> nqp: OUTPUT«␤»

[15:01] *** ab5tract left
[15:01] <moritz> nqp: say('a b' ~~ /<alpha> \s  <!before $<alpha> >/)

[15:01] <p6eval> nqp: OUTPUT«␤»

[15:01] <moritz> it seems to never match regardless

[15:02] <tadzik> now '<!before $spaces =end \h+ $type >' dies with regex assertion not terminated by angle bracket, can I only use dynamic variables in those?

[15:02] <pmichaud> yes, I think that <!before ...>  ends up with its own $! for the subpattern

[15:02] <pmichaud> quote the = ?

[15:02] <tadzik> oh, sure

[15:02] <tadzik> oh, that might have been this entire problem

[15:03] <tadzik> how big is my vim undo buffer again...

[15:03] *** birdwindupbird left
[15:04] <sorear> moritz: make spectest works too

[15:06] <tadzik> apparently $<spaces> works well enough :0

[15:06] <tadzik> :)

[15:07] <dalek> rakudo/nom: 8336468 | pmichaud++ | NOMMAP.markdown:

[15:07] <dalek> rakudo/nom: Add <!before> to NOMMAP.

[15:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/833646872f

[15:08] <tadzik> and non-greedy match is smart enough not to backtrack

[15:09] <sorear> rakudo: say "a'b" ~~ /<ident>/

[15:09] <p6eval> rakudo a55346: OUTPUT«a␤»

[15:09] <masak> well, there's non-greedy and non-greedy.

[15:09] <masak> tadzik: if it's frugal (.*?), it will backtrack, but forwards.

[15:10] <masak> tadzik: if it's ratchet (.*:), it won't backtrack at all.

[15:10] *** daniel-s left
[15:10] *** kaare__ joined
[15:11] <tadzik> masak: I changed .*? to [ <!before bla bla> \N* \n ]* and it takes it exactly the same time to parse S26

[15:11] <tadzik> well, maybe half a second faster

[15:14] <moritz> perl6: say Q'\\'

[15:14] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "'\\\\'"␤    expecting "::", dot, ":", "(", term postfix, operator or ","␤    at /tmp/WvnM6eN8XL line 1, column 6␤»

[15:14] <p6eval> ..rakudo a55346, niecza v8-54-g5b8523c: OUTPUT«\\␤»

[15:14] <sorear> rakudo: my $x = 'aaaaaa'; $x ~~ s:7x/a/b/; say $x

[15:15] <p6eval> rakudo a55346: OUTPUT«aaaaaa␤»

[15:16] <moritz> rakudo: my $x = 'aaaaaa'; $x ~~ s:x(1..7)/a/b/; say $x

[15:16] <p6eval> rakudo a55346: OUTPUT«bbbbbb␤»

[15:16] <masak> tadzik: if you know it won't/shouldn't backtrack, you should mark it as ratchet somehow.

[15:17] <tadzik> masak: it should, probably

[15:17] <tadzik> it's the =begin code\n.*=end code case

[15:18] <moritz> and it needs to be ['=end' | <.panic('unterminated =begin code') ]

[15:19] <moritz> otherwise you'll have trouble finding the error

[15:19] <pmichaud> note that token+rule imply ratchet already (just in case those are involved)

[15:20] <tadzik> it is

[15:21] <dalek> niecza: 0db7bb8 | sorear++ | / (3 files):

[15:21] <dalek> niecza: Add properly speccy :nth, Cursor.ident, other tweaks and bugfixes

[15:21] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0db7bb8a07

[15:21] <dalek> roast: 0df1205 | sorear++ | S05-modifier/counted.t:

[15:21] <dalek> roast: [S05-modifier/counted] Remove oldspec :nth:g tests, fix up a few results, fudge for niecza

[15:21] <dalek> roast: review: https://github.com/perl6/roast/commit/0df1205200

[15:22] <sorear> Does :nth really imply :global?

[15:22] <sorear> :nth(List)

[15:25] * sorear leaves

[15:28] <abercrombie> Hi, adverbs on quotes hasn't been implemented yet right?

[15:29] *** mberends joined
[15:29] <flussence> nom: my $x = 1; say q:qq("123b$x")

[15:29] <p6eval> nom: OUTPUT«===SORRY!===␤Colons may not be used to delimit quoting constructs at line 1, near ":qq(\"123b$"␤»

[15:29] <flussence> nom: my $x = 1; say Q:qq("123b$x")

[15:29] <p6eval> nom: OUTPUT«===SORRY!===␤Colons may not be used to delimit quoting constructs at line 1, near ":qq(\"123b$"␤»

[15:29] <masak> might need a space or so.

[15:30] <flussence> std: q:qq()

[15:30] <p6eval> std 516268a: OUTPUT«[31m===[0mSORRY![31m===[0m␤Too late for :qq at /tmp/uy5AaI4UoG line 1:␤------> [32mq:qq()[33m⏏[31m<EOL>[0m␤    expecting any of:␤   circumfix␤      semicolon list␤Parse failed␤FAILED 00:01 118m␤»

[15:30] <flussence> std: Q:qq()

[15:30] <p6eval> std 516268a: OUTPUT«Invalid class name (STD::stop::) at /usr/local/lib/perl/5.10.1/Class/MOP.pm line 88␤        Class::MOP::load_first_existing_class('STD::stop::') called at /usr/local/lib/perl/5.10.1/Class/MOP.pm line 136␤        Class::MOP::load_class('STD::stop::', undef) called at

[15:30] <p6eval> ../usr/local/lib…

[15:30] <flussence> uh oh

[15:30] * flussence runs away from the burning wreckage before someone notices

[15:31] * moritz is quite sure that STD will recover

[15:31] <moritz> std: 'are you OK?'

[15:31] <p6eval> std 516268a: OUTPUT«ok 00:01 118m␤»

[15:31] <mberends> phew, it's ok :)

[15:33] <abercrombie> nom: my $a='b'; say Q:w /a $a c/   

[15:33] <p6eval> nom: OUTPUT«===SORRY!===␤Colons may not be used to delimit quoting constructs at line 1, near ":w /a $a c"␤»

[15:33] <abercrombie> Am I typing the correct thing?

[15:34] <moritz> std: my $a='b'; say Q:w /a $a c/

[15:34] <p6eval> std 516268a: OUTPUT«ok 00:01 122m␤»

[15:34] <flussence> perl6: say (Q:w /x y z/).perl

[15:34] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "."␤    at /tmp/ks5MBWfVCK line 1, column 18␤»

[15:34] <p6eval> ..rakudo a55346: OUTPUT«===SORRY!===␤Colons may not be used to delimit quoting constructs at line 22, near ":w /x y z/"␤»

[15:34] <p6eval> ..niecza v8-55-g0db7bb8: OUTPUT«("x", "y", "z")␤»

[15:34] <moritz> abercrombie: you are, but it's NYI in rakudo and nom

[15:34] <flussence> niecza++

[15:35] <moritz> niecza: my $a='b'; say Q:w /a $a c/ # I hope this is a $a c

[15:35] *** pochi left
[15:35] <p6eval> niecza v8-55-g0db7bb8: OUTPUT«Potential difficulties:␤  $a is declared but not used at /tmp/VtOcdk7PBJ line 1:␤------> [32mmy [33m⏏[31m$a='b'; say Q:w /a $a c/ # I hope this i[0m␤␤a $a c␤»

[15:35] <moritz> niecza++ # again

[15:36] <flussence> so what'd be interpolating there? Q:w:qq?

[15:36] <moritz> q:w

[15:36] <moritz> or qw for short

[15:36] <moritz> or q:s:w  (where :s stands for 'scalar', iirc)

[15:37] <abercrombie> why cannot be Q:w?  It seems q is just Q:q which only interpoltes \\, \q and \'

[15:37] <moritz> why can't what be Q:w?

[15:38] <abercrombie> Q:w /a $a c/ let $a get interpolated

[15:38] <moritz> because that's not consistent, and not what you asked perl to do

[15:39] <moritz> I mean, why must it be Q:w when qq:w does it, and is consistent with all other uses?

[15:39] <abercrombie> I read that :w is for "Split result on words (no quote protection)"

[15:39] <moritz> yes, and it's not "interpolate scalars"

[15:40] <moritz> that's what :s gives your

[15:40] <abercrombie> Oh, I thought "no quote protection" means it will interpolate variables

[15:40] <moritz> no, it means that it's split on quoted whitespaces too

[15:41] <moritz> 'a b "c d" e' -> 'a', 'b', 'c d', 'e'  would be with quote protection

[15:41] <moritz> and without it: 'a', 'b', '"c', 'd"', 'e'

[15:41] * moritz -> decommute

[15:42] <abercrombie> Oh, I see. So does q:w work really because the effect of :q ?

[15:43] <abercrombie> Since q:w is Q:q:w

[15:47] <abercrombie> perl6: my $a='b'; say Q:qq/a $a c/

[15:47] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "c"␤    expecting operator, ":" or ","␤    at /tmp/2mORBMAwfe line 1, column 26␤»

[15:47] <p6eval> ..rakudo a55346: OUTPUT«===SORRY!===␤Colons may not be used to delimit quoting constructs at line 22, near ":qq/a $a c"␤»

[15:47] <p6eval> ..niecza v8-55-g0db7bb8: OUTPUT«a b c␤»

[15:48] <abercrombie> yep

[15:49] <dalek> rakudo/nom: 3f57585 | jonathan++ | src/Perl6/Actions.pm:

[15:49] <dalek> rakudo/nom: Be sure to apply traits for regexes with the same ordering we do methods.

[15:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3f57585494

[15:49] <dalek> rakudo/nom: 0999de1 | jonathan++ | src/Perl6/Actions.pm:

[15:49] <dalek> rakudo/nom: Action method for trait_mod:<will>.

[15:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0999de1e7b

[15:50] <abercrombie> perl6: my $a='b'; say Q:s/a $a c/

[15:50] <p6eval> rakudo a55346: OUTPUT«===SORRY!===␤Colons may not be used to delimit quoting constructs at line 22, near ":s/a $a c/"␤»

[15:50] <p6eval> ..niecza v8-55-g0db7bb8: OUTPUT«a b c␤»

[15:50] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "c"␤    expecting operator, ":" or ","␤    at /tmp/TweJZhbQ4D line 1, column 25␤»

[15:51] <abercrombie> So :s is the minimum set one should use to get scalar interpolated

[15:51] *** nebuchadnezzar left
[15:52] *** nebuchadnezzar joined
[15:59] <pmichaud> afk for a while

[16:01] *** uasi left
[16:05] *** simcop2387 left
[16:07] *** simcop2387 joined
[16:15] *** Trashlord left
[16:16] *** Trashlord joined
[16:25] *** Holy_Cow left
[16:32] *** masak left
[16:34] *** wamba left
[16:35] *** MayDaniel joined
[16:35] *** JimmyZ left
[16:42] *** donri left
[16:43] *** donri joined
[16:43] *** kthakore_ left
[16:43] *** kthakore joined
[16:44] *** daxim left
[16:46] *** pernatiy left
[16:49] *** MayDaniel left
[16:50] *** donri_ joined
[16:51] *** donri left
[16:52] *** uvtc joined
[16:53] <uvtc> Were any videos made of the YAPC::EU Perl 6 -related talks?

[16:53] *** szbalint_ joined
[16:53] <uvtc> I saw the one with Larry, Pm, and Masak. The welcome to Riga talk.

[16:54] <uvtc> Which was great.

[16:54] <tadzik> that was from the hackathon

[16:54] <jnthn> uvtc: Many things were recorded.

[16:54] <tadzik> I haven't seen anything released yet

[16:55] *** Sarten-X2 joined
[16:55] <jnthn> Right, me either.

[16:55] <jnthn> It'll probably take a bit.

[16:55] <abercrombie> Hope I can see the video @ yapc.tv soon

[16:55] <jnthn> It's a serious amount of work to do 4 tracks x 3 days worth of video :)

[16:56] <uvtc> I could imagine. Thanks. Looking forward to them.

[16:56] *** Sarten-X left
[16:56] *** itz_ left
[16:56] *** itz joined
[16:58] *** dakkar left
[16:59] *** uvtc left
[17:05] *** agentzh left
[17:16] * [Coke] is out of work until power at his office is restored. perhaps some perl to take the edge off.

[17:18] <PerlJam> There are Riga videos available already?

[17:19] *** mj41 left
[17:19] <tadzik> not really

[17:19] <tadzik> there's one from the hackathon, and one from the closing ceremotny

[17:19] <PerlJam> ah

[17:19] <colomon> the hackathon one is quite nifty, if short

[17:19] <PerlJam> watching it now  :)

[17:20] <PerlJam> pm let his hair grow  :)

[17:21] *** cggoebel joined
[17:21] <PerlJam> yeah, that's a nice video

[17:21] *** Species8472 left
[17:22] <PerlJam> Was ash in charge of the video stuff too? 

[17:22] <tadzik> dunno

[17:26] *** ggoebel left
[17:29] *** wamba joined
[17:30] *** mj41 joined
[17:32] *** mj41 left
[17:33] *** pochi joined
[17:33] *** mj41 joined
[17:34] *** wamba left
[17:36] *** PacoLinux left
[17:37] *** wamba joined
[17:38] <tadzik> oh, oh, I think I know how to handle this --doc=foo issue

[17:39] <tadzik> or maybe not

[17:39] <tadzik> hmm. something could be magified in a module's import() sub

[17:44] *** Alias left
[17:59] *** masak joined
[17:59] <masak> \o/

[18:00] <mberends> o/

[18:00] <tadzik> \o

[18:01] * masak builds nom

[18:01] <masak> dinner, that is. not the branch.

[18:01] <dalek> rakudo/nom: c8be361 | tadzik++ | src/Perl6/Pod.pm:

[18:01] <dalek> rakudo/nom: Fix Pod::Config regression

[18:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c8be361ca9

[18:01] <dalek> rakudo/nom: 16bad5c | tadzik++ | / (2 files):

[18:01] <dalek> rakudo/nom: Allow multi-line Pod block configuration

[18:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/16bad5c0f7

[18:01] <tadzik> wait

[18:01] <tadzik> oh, ok :)

[18:01] <masak> :)

[18:01] <tadzik> karma tadzik

[18:01] <aloha> tadzik has karma of 667.

[18:01] <tadzik> uff, not evil anymore

[18:01] <masak> karma nom

[18:01] <aloha> nom has karma of 7.

[18:02] <masak> nom++ # so awesome

[18:02] <masak> the branch, that is.

[18:02] <masak> well, food isn't too bad either.

[18:02] <tadzik> food is faster to cook

[18:02] <moritz> is anybody working on the inferior runloop problem that causes those huge memory leaks?

[18:03] <jnthn> moritz: It's on my todo list. I hope to make some progress on it this evening.

[18:04] <jnthn> But more help is always welcome :)

[18:05] <tadzik> ronaldxs++

[18:09] <tadzik> gah, my colonpair magic is less than awesome :/

[18:09] <masak> ronaldxs?

[18:10] <tadzik> the URI contributor, he just made LWP::Simple use URI and added some Jsonrpc capabilities

[18:10] <tadzik> https://github.com/cosimo/perl6-lwp-simple/pull/6

[18:10] <moritz> on the one hand, +1 to extra funcitonality

[18:11] <moritz> otoh, -0.5 for a dependency

[18:11] <moritz> since it's cosimo++'s project, I want him to decide on acceptance of the patch

[18:11] *** Alias joined
[18:12] <tadzik> I don't think adding a dependency is a bad idea. It's not that we don't have a working module installer resolving dependencies, and reimplementing URI parsing is not awesome if we have a proper module for that. +1 on waiting for cosimo though

[18:13] <moritz> nom: say Sub ~~ Callable

[18:13] <p6eval> nom: OUTPUT«Bool::False␤»

[18:13] <moritz> that's... wrong.

[18:13] <moritz> it makes t/spec/S02-builtin_data_types/anon_block.rakudo fail

[18:13] <moritz> and other tests too

[18:13] <masak> nom: say Method ~~ Callable

[18:13] <p6eval> nom: OUTPUT«Bool::True␤»

[18:14] <tadzik> moritz: that's probably due to your Sub.pm in Makefile.in mangling I'm afraid :/

[18:14] <moritz> ouch

[18:14] <moritz> I was pretty sure I had spectested

[18:14] <tadzik> I wasn't bisecting, but it seems that it was it

[18:14] <moritz> would make sense, kindof

[18:15] <jnthn> moritz: I think Sub.pm appears before Code.pm/Block.pm/Routine.pm

[18:15] <moritz> or not, given that I haven't actually changed the file

[18:15] <jnthn> That is, appears in Makefile.in.

[18:16] <moritz> it appears after Code, Block and Routine

[18:17] <tadzik> jnthn: given (:pasttype('callmethod'), :name('new'), :returns('Pair')), can I easily serialize it, using simple_code_block() or so?

[18:20] <moritz> but why would the order in which they appear in the setting matter at all?

[18:21] *** wolfman2000 joined
[18:21] <jnthn> moritz: It matters.

[18:21] <jnthn> And it doesn't appear afterwards in the Makefile.in I'm looking at here (jsut pulled to be sure I have latest)

[18:21] <jnthn>   src/core/natives.pm \

[18:21] <jnthn> then later

[18:21] <jnthn>   src/core/Sub.pm \

[18:21] <jnthn>   src/core/control.pm \

[18:21] <jnthn>   src/core/Any.pm \

[18:21] <jnthn>   src/core/Code.pm \

[18:21] <jnthn>   src/core/WhateverCode.pm \

[18:21] <jnthn>   src/core/Block.pm \

[18:21] <jnthn>   src/core/Routine.pm \

[18:22] <moritz> oh

[18:22] * moritz looked at the wrong version

[18:22] <jnthn> It matters because in Code.pm it "does Callable"

[18:22] <jnthn> And if Sub.pm comes earlier, then it computes its type cache without Callable in it.

[18:23] <moritz> so I need to try to shuffle it around enough to make it work :/

[18:25] *** mikehh joined
[18:26] *** Trashlord left
[18:28] *** Trashlord joined
[18:30] <TimToady> perhaps caches need to be recomputable; most caches these days allow write-through :)

[18:32] <jnthn> TimToady: Already on the todo list. :)

[18:33] <jnthn> Plus you can already force a re-computation at any point you like, but I don't want anybody in user space to ever need to do that.

[18:37] <dalek> rakudo/nom: 6ad7834 | moritz++ | tools/build/Makefile.in:

[18:37] <dalek> rakudo/nom: fix bug from 19cfd13 that made Sub !~~ Callable

[18:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ad7834182

[18:37] <moritz> jnthn++ and tadzik++ for helping me with this one

[18:37] <jnthn> moritz++ for fixing it

[18:37] *** jevin left
[18:38] *** jevin joined
[18:40] <tadzik> meh, I suppose proper colonpairs in Pod would have to wait for full-blown serialization

[18:44] <tadzik> perl6: "foo".isupper

[18:44] <p6eval> niecza v8-55-g0db7bb8: OUTPUT«Unhandled exception: Unable to resolve method isupper in class Str␤  at /tmp/Ehvvy4JZHI line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2047 (CORE C953_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2048 (CORE module-CO…

[18:44] <p6eval> ..rakudo a55346: OUTPUT«Method 'isupper' not found for invocant of class 'Str'␤  in main program body at line 22:/tmp/7GddW3My9L␤»

[18:44] <p6eval> ..pugs: OUTPUT«*** No such method in class Str: "&isupper"␤    at /tmp/4NVNVW_Pyk line 1, column 1 - line 2, column 1␤»

[18:44] <tadzik> do we have an idiom for $foo eq $foo.uc?

[18:45] <flussence> don't think there's a shorter way to write it than that...

[18:46] *** birdwindupbird joined
[18:46] <TimToady> we need reliable Unicode tables to do it any better; in the long run ICU is not always going to be a good dependency

[18:48] *** wolfman2000 left
[18:50] <tadzik> #phasers in 10?

[18:50] <mberends> +10

[18:58] <sjohnson> we need more codepage 437's

[19:00] <moritz> #phasers NOW!

[19:00] <tadzik> yessir! /o

[19:03] *** Trashlord left
[19:06] *** Trashlord joined
[19:09] *** saaki left
[19:11] *** Trashlord left
[19:14] *** Trashlord joined
[19:15] *** skangas left
[19:16] *** soh_cah_toa joined
[19:20] *** dakkar joined
[19:26] *** PacoLinux joined
[19:42] *** M_o_C joined
[19:43] *** saaki joined
[19:46] *** M_o_C left
[19:49] <tadzik> jnthn: re blizkost, as I see in p5sv and p5scalar, the point is to write a p5array or so, implementing Parrot's array vtables?

[19:50] *** birdwindupbird left
[19:51] *** fbass joined
[19:53] *** fbass left
[19:55] *** mkramer joined
[19:55] <tadzik> jnthn: ok, I found some design docs

[19:59] *** Trashlord left
[20:01] *** pernatiy joined
[20:05] *** envi left
[20:07] *** jevin left
[20:08] <diakopter> seems I missed an interesting #phasers

[20:09] <masak> we're not at END yet.

[20:09] <moritz> not over yet, it seems

[20:09] <diakopter> oh!

[20:09] <soh_cah_toa> pmichaud: ping

[20:10] *** jevin joined
[20:11] <Su-Shee> popcorn! mst and chromatic fighting over rakudo on twitter!

[20:12] *** Trashlord joined
[20:12] <tadzik> link!

[20:12] <Su-Shee> www.twitter.com? ;)

[20:12] <masak> :P

[20:12] <tadzik> gah

[20:12] <masak> Su-Shee++

[20:12] <Su-Shee> tadzik: http://twitter.com/chromatic_x http://twitter.com/shadowcat_mst

[20:12] <dakkar> can we raise some funds to have them both in the same room and film them while they argue?

[20:13] <tadzik> and plush cthulus

[20:14] <tadzik> Su-Shee: thanks, that's funny :)

[20:15] <Su-Shee> "hm. hm."

[20:15] <tadzik> can I .flat those tweets somehow?

[20:16] <Su-Shee> uff. now I have my observer in Moose. next, I will have one in rakudo. 

[20:17] <dakkar> tadzik: not easily, there's no Twitter API call for "give me a conversation"

[20:17] <tadzik> shame

[20:17] <diakopter> tadzik: click the arrow on the upper left of chromatic's top post

[20:17] <moritz> tadzik: I've opened http://twitter.com/#!/chromatic_x and http://twitter.com/#!/shadowcat_mst in separate tabs

[20:17] <diakopter> tadzik: upper right I meant

[20:17] <masak> also, chromatic doesn't seem to use the "reply" function when he has conversations :(

[20:18] <tadzik> diakopter: I did that, thanks

[20:19] <masak> gaaargh New Twitter, you big piece of fail...

[20:19] <moritz> masak: not surprising, since there's hidden meta data involved, which is very easy to miss

[20:19] <TimToady> pray don't mind the missiles flying overhead; none of them is really aimed at us :)

[20:19] <jnthn> :)

[20:20] <tadzik> I have a feeling that chromatic++ still has mixed feelings about Rakudo targeting different VMs, and mst++ is defending the idea

[20:20] <masak> tadzik: "mixed feelings"? :)

[20:20] <masak> not very mixed, IMO.

[20:21] <tadzik> masak: yeah, I remember that #parrotsketch too

[20:21] <masak> "we'd like to make Rakudo more platform-independent" -- "NOOOOOO!"

[20:21] *** molaf_ left
[20:21] <masak> obviously I'm paraphrasing here.

[20:22] <moritz> well, mst++'s "defense" doesn't seem to work for chromatic, it seems

[20:22] <Su-Shee> I shall make popcorn.. ;)

[20:22] *** bbkr1 left
[20:22] <[Coke]> It is hard not to that as a failure of parrot.

[20:23] <masak> [Coke]: accidentally? :)

[20:23] <[Coke]> The whole situation is... convoluted.

[20:23] <[Coke]> masak: *take that!

[20:23] <masak> :)

[20:23] <moritz> [Coke]: agreed. But the wish for Perl on other platforms than C/Parrot is much older than that decision

[20:24] *** bbkr joined
[20:24] *** donri_ is now known as donri

[20:25] *** PacoLinux left
[20:27] *** PacoLinux joined
[20:28] <[Coke]> Yup. It's hard to fault teamRakudo for pursuing it.

[20:28] <[Coke]> I do find the whole perl6/parrot thing confusing, myself. far too organic, not enough BDFL.

[20:29] <Su-Shee> "BDFL"?

[20:29] <PerlJam> Su-Shee: pythonism -- Benevolent Dictator for Life

[20:30] <masak> well, Parrot is a foundering project on top of a wonderful vision. meaning, it could still be great if it gets its act together. M0 could be that, who knows?

[20:30] <PerlJam> [Coke]: the problem with that is that the BDFL is driving blind too  :)

[20:30] <diakopter> PerlJam: curious who's the BDFL

[20:31] * masak .oO( Oracle seems to be finding their niche as a MDFL... )

[20:31] <PerlJam> masak: whiteknight is fixing things.  He seems to be pointing Parrot in the right direction.  Let's hope he never tires of it until Parrot is "finished"  :)

[20:33] <tadzik> this twitter thing is weird. It's smart enough to display "2 new tweets", but not smart enough to just display the tweets

[20:33] <[Coke]> I dislike the default web app. :|

[20:34] <PerlJam> tadzik: I've thought that forever.

[20:35] <[Coke]> I would prefer a model where they were automatically added, but scroll locked at the last one until you moved it.

[20:35] <dakkar> tadzik: http://twitter.trauma2u.com/pbtweet/ makes the web interface usable

[20:41] <Su-Shee> stop playing with the clients, it's 40-love chromatic, next serve mst. ;) (no, I have no clue of tennis ;)

[20:45] <masak> Su-Shee: chromatic is winning the flame war? I couldn't tell.

[20:45] <Su-Shee> masak: do you know the german word "nebenkriegsschauplatz" by any chance? ;)

[20:46] <masak> no.

[20:47] <masak> phenny: "nebenkriegsschauplatz"?

[20:47] <phenny> masak: Language guessing failed, so try suggesting one!

[20:47] <masak> phenny: de "nebenkriegsschauplatz"?

[20:47] <phenny> masak: "sideshow" (de to en, translate.google.com)

[20:48] *** wk joined
[20:49] <mberends> .oO( ringside seats ? )

[20:50] *** lichtkind joined
[20:50] *** Reaganomicon joined
[20:51] <mberends> o/ kind von licht!

[20:51] <lichtkind> cheers

[20:52] <tadzik> hello lichtkind 

[20:52] <lichtkind> tadzik: greetings

[20:52] <lichtkind> tadzik: will be around next days just came vom riga

[20:53] <masak> hail, oh kind of licht.

[20:53] *** Trashlord left
[20:53] <lichtkind> masak: we need to talk :)

[20:53] *** daniel-s joined
[20:56] <Su-Shee> that never means something good ;)

[20:56] <jnthn> hehe :)

[20:58] * masak and lichtkind privmsg

[20:58] <Su-Shee> *sniff* surely one leaves the other and moves out and takes the cat with him and... 

[20:59] *** skangas joined
[20:59] <lichtkind> life is good :)

[21:00] *** mattp_ joined
[21:01] <masak> yeah, don't worry Su-Shee. lichtkind and I are still pals. the cat is fine, too.

[21:05] <masak> perl6: my @a = 1, [2, 3, 4], 5; my @b = @a; @a[1][1] = 42; say @b.perl

[21:05] <p6eval> niecza v8-55-g0db7bb8: OUTPUT«[1, [2, 42, 4], 5].list␤»

[21:05] <p6eval> ..pugs, rakudo a55346: OUTPUT«[1, [2, 42, 4], 5]␤»

[21:11] *** jedai_ joined
[21:13] *** dakkar left
[21:13] <masak> 'night, channel.

[21:13] <diakopter> n :)

[21:13] *** masak left
[21:14] *** jedai left
[21:15] *** kaare__ left
[21:15] <mberends> d: are you into extreme abbreviation nowadays? keyboard battery low? ;)

[21:16] <lichtkind> TimToady: what is the correct way to get a deep copy of a AoA structure in perl 6?

[21:19] *** mkramer left
[21:27] *** drbean joined
[21:36] <TimToady> nom: my @a = 1, [2, 3, 4], 5; my @b = @a».clone; @a[1][1] = 42; say @b.perl

[21:36] <p6eval> nom: OUTPUT«Array.new(1, [2, 3, 4], 5)␤»

[21:37] *** Trashlord joined
[21:37] <TimToady> though I wouldn't necessarily call it *the* correct way

[21:38] <lichtkind> TimToady: sound good enough for me now, thank you

[21:43] <TimToady> it might not even be a correct way, since it probably doesn't handle anything but trees currently

[21:43] *** bbkr left
[21:44] <diakopter> nom: my @a = 1, [2, 3, 4], 5; @a[0][0] = @a; my @b = @a».clone; @a[1][1] = 42; say @b.perl

[21:44] <p6eval> nom: OUTPUT«Cannot assign to a non-container␤  in mu <anon> at /tmp/CNg7KFnQhm:1␤  in mu <anon> at /tmp/CNg7KFnQhm:1␤␤»

[21:45] <lichtkind> TimToady: you mean hashes yes but nothing cyclic?

[21:45] <TimToady> unlikely even to handle DAGs correctly

[21:45] <tadzik> The videos recorded during the conference will be incrementally

[21:45] <diakopter> see ^^

[21:45] <tadzik> appearing on the yapc.tv website in the following weeks.

[21:46] <TimToady> unless we spec hypers to do that a little better than we do now

[21:46] <lichtkind> TimToady: dont understand DAG?

[21:46] <TimToady> directed acyclic graph

[21:46] <diakopter> nom: my @a = @a, [2, 3, 4]

[21:46] <p6eval> nom: OUTPUT«splice() not implemented in class 'Mu'␤  in method reify at src/gen/CORE.setting:3502␤  in method gimme at src/gen/CORE.setting:3839␤  in method eager at src/gen/CORE.setting:3815␤  in method STORE at src/gen/CORE.setting:4219␤  in mu <anon> at /tmp/YEroFNueMn:1␤  in mu <ano…

[21:47] <jnthn> sleep &

[21:47] <TimToady> diakopter: that would not be cyclic

[21:47] <lichtkind> jnthn: good night

[21:47] *** am0c left
[21:48] <diakopter> niecza: my @a = @a, [2, 3, 4]

[21:48] <p6eval> niecza v8-55-g0db7bb8:  ( no output )

[21:48] <diakopter> niecza: my @a = @a, [2, 3, 4]; say @a.perl

[21:48] <p6eval> niecza v8-55-g0db7bb8: OUTPUT«[[2, 3, 4]].list␤»

[21:48] <lichtkind> TimToady: thanks, randal used that in his git talk but its no common shortcut for me

[21:49] <diakopter> std: Q :regex /a/ # TimToady did you see this

[21:49] <p6eval> std 516268a: OUTPUT«Can't use string ("STD::Regex") as a HASH ref while "strict refs" in use at /usr/local/share/perl/5.10.1/CursorBase.pm line 549.␤FAILED 00:01 117m␤»

[21:50] <lichtkind> rakudo: my @a = 1, [2, 3, 4], 5; my @b = @a».clone; @a[1][1] = 42; say @b.perl

[21:50] <p6eval> rakudo a55346: OUTPUT«[1, 2, 3, 4, 5]␤»

[21:52] <TimToady> yes, but I don't actually have time to maintain the fiddly bits of STD at the moment

[21:52] *** am0c joined
[21:53] <TimToady> and the current implementation of STD has largely fulfilled its goal of being a prototype

[21:54] <TimToady> in many ways niecza is a more solid example of STD

[21:54] <diakopter> niecza: Q :regex /a/

[21:54] <p6eval> niecza v8-55-g0db7bb8: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unrecognized adverb :regex(1) at /tmp/cFCiq6R0y4 line 1:␤------> [32mQ [33m⏏[31m:regex /a/[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 685 (CORE die @ 2) ␤  at /home/p6eval/n…

[21:54] <diakopter> oh

[21:55] <TimToady> I didn't say "in all ways"  :P

[21:56] <TimToady> in particular, this particular bug is aimed at the underlying Moose/6model stuffings, so I'm not surprised it has problems

[21:57] <TimToady> that being said, it *might* be an easy bug to hunt down; it's just not high on my priority list right now

[21:58] <TimToady> in fact, right now a nap is on the top of my list

[21:58] <TimToady> zzz &

[21:58] <diakopter> std: :2{0010_1110_1000_10}

[21:58] <p6eval> std 516268a: OUTPUT«[31m===[0mSORRY![31m===[0m␤Malformed radix number at /tmp/tkevzkowXK line 1:␤------> [32m:2[33m⏏[31m{0010_1110_1000_10}[0m␤Parse failed␤FAILED 00:01 117m␤»

[21:58] <diakopter> blob literals too

[21:59] <tadzik> what should happen if we have both a .pm and a .pm6 file and we try to use the module?

[21:59] <tadzik> die?

[22:01] <TimToady> I would assume the .pm is really Perl 5

[22:01] <tadzik> and use pm6 instead?

[22:01] <tadzik> sounds sane

[22:02] <diakopter> TimToady: before you zzz, are forward gotos spec'd?

[22:02] *** mj41_nb joined
[22:02] <diakopter> I was thinking of adding gotos to the features matrix

[22:08] <diakopter> niecza: say :2{0010_1110_1000_10}

[22:08] <p6eval> niecza v8-55-g0db7bb8: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Malformed radix number at /tmp/V46RMjLBhd line 1:␤------> [32msay :2[33m⏏[31m{0010_1110_1000_10}[0m␤␤Parse failed␤␤»

[22:08] *** mj41 left
[22:09] <TimToady> diakopter: apparently not well enough, since I couldn't find it

[22:09] <TimToady> but they've been specced several times on IRC :)

[22:09] <TimToady> or at least the fact that forward goto requires a quoted label

[22:10] <TimToady> renap &

[22:16] <lichtkind> bye tim

[22:22] <tadzik> hmm

[22:22] *** drbean left
[22:23] <tadzik> nom: role A { has $!a }; class B does A { method foo { $!a } }

[22:23] <p6eval> nom: OUTPUT«===SORRY!===␤Attribute $!a not declared in class B at line 1, near " } }"␤»

[22:23] <tadzik> rakudo: role A { has $!a }; class B does A { method foo { $!a } }

[22:23] <p6eval> rakudo a55346:  ( no output )

[22:23] <tadzik> is that a nom feature, and a rakudobug?

[22:28] <tadzik> jasonmay: ping

[22:32] *** drbean joined
[22:32] *** wamba left
[22:32] *** wamba joined
[22:33] <mberends> tadzik: yes, as you say, same private attribute discussion: http://irclog.perlgeek.de/perl6/2011-06-27#i_4013339

[22:33] <tadzik> mberends: yes, checked in synopsis too :)

[22:34] *** mj41_nb left
[22:34] <tadzik> seen jasonmay 

[22:34] <aloha> jasonmay was last seen in #perl6 17 days 18 hours ago saying "boston".

[22:34] *** jevin left
[22:34] <jasonmay> tadzik: hey

[22:34] <tadzik> oh hi

[22:34] <tadzik> I just patched IoC to compile on nom

[22:34] <jasonmay> awesome!

[22:34] <tadzik> it still fails tests, I haven't got to that yet

[22:34] <tadzik> will send a pull request in a second

[22:36] <tadzik> jasonmay: https://github.com/jasonmay/perl6-ioc/pull/1

[22:36] <tadzik> if you're curious about either, I consulted the spec and nom is right in both cases :)

[22:37] <jasonmay> I wonder if that explains some weird stuff I was running into when writing more

[22:37] <jasonmay> they both look good to me; merging

[22:37] <tadzik> oh, stop

[22:37] <tadzik> I also introduced a bug

[22:37] *** im2ee left
[22:37] <tadzik> since $.foo attrs are not writable now

[22:38] <jasonmay> oops :)

[22:38] <tadzik> the only way to avoid this, which comes to my mind, is the setter method in a role

[22:38] <tadzik> not sure how this should be handled

[22:39] *** jevin joined
[22:39] <tadzik> there or another way we expose the atribute writeness to the outside world, which we don't neceserilly want

[22:39] <jasonmay> if there is code smell in my module let me know, I'm open to implementations

[22:40] <tadzik> not sure

[22:40] <jasonmay> I based it off my perl5/moose fu :)

[22:40] <jasonmay> & for an hour or so

[22:40] <tadzik> I guess we could have an initialize() method in a role, which will die if we initialize an already initialized attribute

[22:40] <tadzik> will hack on that and add it to the pull request

[22:43] <mberends> nom: role A { has $.a }; class B does A { method foo { $.a } }; my $x = B.new(:a(7)); say $x.foo

[22:43] <p6eval> nom: OUTPUT«7␤»

[22:44] <tadzik> okay, I got a running test, 10 more to go :)

[22:55] *** wolfman2000 joined
[23:05] <tadzik> nom: class Foo {}; say eval("Foo.new").perl

[23:05] <p6eval> nom: OUTPUT«Foo<60745960>␤»

[23:05] <tadzik> nom: class Foo {}; say ::("Foo").new.perl

[23:05] <p6eval> nom: OUTPUT«Foo<52658000>␤»

[23:06] <tadzik> nom: my $a = "Foo"; class Foo {}; say ::($a).new.perl

[23:06] <p6eval> nom: OUTPUT«Foo<35584400>␤»

[23:08] <tadzik> yay, passes!

[23:12] <tadzik> rakudo: say so Sub ~~ Block

[23:12] <p6eval> rakudo a55346: OUTPUT«Bool::True␤»

[23:12] <tadzik> nom: say so Sub ~~ Block

[23:12] <p6eval> nom: OUTPUT«Bool::True␤»

[23:12] <tadzik> hm

[23:12] <tadzik> rakudo: say so Sub.^isa(Block)

[23:12] <p6eval> rakudo a55346: OUTPUT«Bool::True␤»

[23:12] <tadzik> nom: say so Sub.^isa(Block)

[23:12] <p6eval> nom: OUTPUT«Bool::True␤»

[23:12] <tadzik> nom: say so Sub.^isa('Block')

[23:12] <p6eval> nom: OUTPUT«Bool::False␤»

[23:12] <tadzik> rakudo: say so Sub.^isa('Block')

[23:12] <p6eval> rakudo a55346: OUTPUT«Bool::True␤»

[23:12] <tadzik> gotcha

[23:13] *** wolfman2_ joined
[23:13] <dalek> rakudo/nom: 54e85a2 | tadzik++ | src/Perl6/ModuleLoader.pm:

[23:13] <dalek> rakudo/nom: Accept .pm6 as a module file extensions, prefer it to .pm if both are present

[23:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/54e85a20b1

[23:15] *** envi joined
[23:15] *** wolfman2000 left
[23:16] <tadzik> nom: say so "foo".^isa('Str')

[23:16] <p6eval> nom: OUTPUT«Bool::False␤»

[23:16] <tadzik> niecza: say so "foo".^isa('Str')

[23:16] <p6eval> niecza v8-55-g0db7bb8: OUTPUT«Bool::True␤»

[23:17] <lichtkind> good night

[23:17] *** lichtkind left
[23:19] *** Slot|processor joined
[23:22] <tadzik> jasonmay: all tests pass, pull request sent

[23:22] <tadzik> I really like the module, I wonder if I could use it in panda

[23:24] *** REPLeffect joined
[23:28] *** wolfman2_ left
[23:32] <lue> hello planet o

[23:32] <lue> * o/

[23:34] *** Psyche^ joined
[23:37] *** Patterner left
[23:38] *** Psyche^ is now known as Patterner

[23:38] <dalek> roast: 75bf7cb | diakopter++ | S (19 files):

[23:38] <dalek> roast: fix all the remaining S02/Literals smartlinks I broke by adding headings.

[23:38] <dalek> roast: review: https://github.com/perl6/roast/commit/75bf7cbc65

[23:38] <dalek> roast: bd9cbd8 | diakopter++ | / (18 files):

[23:38] <dalek> roast: Merge branch 'master' of github.com:perl6/roast

[23:38] <dalek> roast: review: https://github.com/perl6/roast/commit/bd9cbd8d75

[23:41] <tadzik> hello lue 

[23:45] *** Sarten-X2 left
[23:49] <tadzik> lue: how about some module fixing?

[23:49] <lue> which ones?

[23:49] <lue> [updating nom right now]

[23:50] <jasonmay> tadzik: I'm glad you like it :) I want to add more sugar to it, something like https://metacpan.org/module/Bread::Board::Declare syntax

[23:50] <jasonmay> involving parameterized traits probably, but not sure

[23:51] <tadzik> hmm, I wonder if you could do that now

[23:53] *** wamba left
[23:53] *** Sarten-X joined
[23:53] *** wamba joined
[23:54] <tadzik> https://github.com/perl6/ecosystem/wiki/State-of-modules-on-nom

[23:56] <lue> I should start by fixing my own module (Numbers::Ordinal)

[23:56] <tadzik> lue: that's what I wanted to suggest :)

[23:57] <tadzik> I'm tired for now, time to sleep probably

[23:57] <soh_cah_toa> uh oh, got some tests to fix

[23:58] <soh_cah_toa> also gotta get my new module IRC::Utils up there :)

[23:58] <tadzik> \o/

[23:59] <jasonmay> so, I'm out of the loop on this nom stuff

[23:59] <jasonmay> I know it's a reimplementation, but not sure how to develop with it

[23:59] <jasonmay> just origin/nom on the rakudo repo?

[23:59] <tadzik> yes

[23:59] <jasonmay> cool

