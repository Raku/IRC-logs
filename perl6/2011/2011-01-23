[00:01] <Util> When it works with ..^ , I will show it off to Atlanta.pm; "Infinity minus one" is a cool concept! (Yes, I know it is really "Whatever", but they will just see it as an infinite list) 

[00:01] <masak> in this case, it's more like "the length (of the thing indexed) minus one"... :)

[00:01] <masak> of course, if the array is infinite... :)

[00:03] <Util> Yes, and I love how the use of * there devolves/dovetails to the new [*-1] manner of reverse indexing.

[00:03] <Util> (in re: in this case... , not "array is infinite") I am a slow typist

[00:07] <lue> hello again #perl6 o/

[00:08] <jnthn> o/ lue 

[00:08] <masak> Util: actually, it was [*-1] that led to the Whatever star having a role as an autocurry device.

[00:09] * lue considers continuing learning C++ today, and decides Bool::True

[00:10] <masak> lue: will you be writing some C++ code?

[00:11] <Util> masak: Yes, historically true. I am preoccupied by elements of the Perl 6 design that "dovetail" (for a future blog post); I did not mean to imply causality.

[00:11] <lue> It's what my GCC frontend project will likely be in, so I decided I may wish to learn it :) https://rdstar.wordpress.com/2011/01/22/some-thoughts-on-p6-on-gcc/

[00:12] <masak> lue: yep, I saw that one.

[00:12] <masak> lue: does that mean you'll be writing a Perl 6 parser engine in C++?

[00:13] <masak> s/parser/grammar/

[00:13] <masak> Util: sounds like a nice post.

[00:15] <lue> If all goes well, yes. What the project sets out to do is turn Perl 6 code into the AST that GCC uses to compile to various architectures.

[00:16] *** VXZ left
[00:16] <masak> lue: making something the size of STD in C++ is quite a big undertaking. I'd recommend trying to interface with STD if possible.

[00:19] <lue> I'll cheat^W utilize as much as I can :D

[00:21] <masak> yes. and do consider it "utilizing" rather than "cheating" :)

[00:22] * jnthn is utilizing Parrot's nqp-rx to help on the way to a bootstrapped nqpclr :)

[00:22] <jnthn> It's easier to only have to invent one piece at a time. :)

[00:23] <masak> lue: Andrew Shitov is the only one I know who has written a Perl 6 parser in C++, using a generics framework 'boost' that contains a parser library. he did a very-very small subset of STD.

[00:24] <jnthn> And it was bloody fast. :)

[00:24] <masak> lue: but the subset he did, he did all the way (without using gcc). he had Perl 6 code translated to C++, and then executed real fast.

[00:24] <masak> lue: his code is still out there somewhere.

[00:25] <masak> lue: http://talks.shitov.ru/ppt/bapm2009/faster-perl6-en.pdf

[00:25] <masak> 'night, #perl6.

[00:25] <jnthn> heh, I saw taht talk

[00:25] <jnthn> o/ masak

[00:25] *** masak left
[00:32] <lue> rakudo: sub is_prime($n) { for 2 .. $n - 1 -> $d { return 0 unless $n % $d; }; return 1; }; say is_prime(15511);

[00:32] *** cafesofie joined
[00:32] <p6eval> rakudo 388eed: OUTPUT«1␤»

[00:33] <lue> it's gotten a *little* faster since the talk [microscopically faster, but still :)]

[00:42] *** snearch left
[00:44] <jnthn> Enough for today. I *think* I'm on track to have nqp-rx grammars using 6model tomorrow. With a bit of luck, I'll even be able to push that change into the bootstrap.

[00:45] <Tene> :D

[00:45] <Tene> jnthn: how much do you have working on CLR and JVM these days?

[00:45] *** molaf__ joined
[00:46] <jnthn> Tene: Best way I can think to answer is that the CLR version passes everyting in https://github.com/jnthn/6model/tree/master/t/nqp

[00:47] <jnthn> Tene: JVM version is way further behind in terms of test coverage, but has potential to catch up fast.

[00:47] <Tene> 'k, thanks :)

[00:48] <jnthn> The JVM version managed for the first time to init the meta-model and a mini setting and say hello world a week ago. :)

[00:48] <jnthn> mberends++ for that :)

[00:49] *** molaf_ left
[00:51] <lue> jnthn: Is my understanding of 6model correct, in that I could potentially use it in my P6-for-GCC project, or is my understanding way off on what it is?

[00:52] <lue> The way I understand it, 6model is a sort of interface to use in creating a Perl 6 compiler.

[00:53] <jnthn> lue: 6model is a meta-model design

[00:53] <jnthn> lue: That is, it is a way to handle the various object oriented functionality that Perl 6 needs.

[00:54] <jnthn> lue: It's implemented so far in varying states of completeness on Parrot, the CLR and JVM.

[00:54] <jnthn> So in theory it's fairly portable. In practice, how hard it is to port it depends on what your target has to offer.

[00:56] <lue> So it makes the OOP aspects of P6 easier to implement? [ I'm only making sure I'm getting it ]

[00:57] <jnthn> Well, only after you've implemented it. :)

[00:58] <sorear> Tene: I have a complete STD parser running on the CLR

[00:58] <jnthn> It gives you a design that I believe will cover the stuff Perl 6 needs in terms of OO.

[01:02] *** sji left
[01:02] <dalek> niecza: 3e85a71 | sorear++ | / (3 files):

[01:02] <dalek> niecza: Operator handling unification (postfix)

[01:02] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3e85a71613

[01:02] * jnthn -> sleep &

[01:03] <lue> Would it by any chance replace src/metamodel ?

[01:03] <lue> night jnthn! o/

[01:13] *** rgrau` left
[01:24] *** rgrau left
[01:24] *** MayDaniel left
[01:45] *** hudnix joined
[01:45] <dalek> niecza: bee6460 | sorear++ | / (3 files):

[01:45] <dalek> niecza: Operator handling unification (prefix)

[01:45] <dalek> niecza: review: https://github.com/sorear/niecza/commit/bee64608ab

[02:00] *** whiteknight left
[02:03] *** whiteknight joined
[02:18] *** lue left
[02:31] *** cafesofie left
[02:40] *** andre__ joined
[02:40] *** andre__ is now known as Guest32641

[02:40] *** klunky left
[02:43] <dalek> niecza: 63e2b4c | sorear++ | src/ (2 files):

[02:43] <dalek> niecza: Operator handling unification (infix)

[02:43] <dalek> niecza: review: https://github.com/sorear/niecza/commit/63e2b4c322

[02:45] *** cafesofie joined
[02:49] *** whiteknight left
[03:08] *** hudnix left
[03:10] <sorear> rakudo: my @foo; say @foo[0].PARROT

[03:10] <p6eval> rakudo 388eed: OUTPUT«Perl6Scalar->␤»

[03:10] <sorear> rakudo: my @foo = 5; say @foo[0].PARROT

[03:10] <p6eval> rakudo 388eed: OUTPUT«Perl6Scalar->Int␤»

[03:20] *** VXZ joined
[03:47] *** cafesofie left
[03:57] *** cafesofie joined
[04:01] *** felliott left
[04:01] *** cafesofie left
[04:02] *** cafesofie joined
[04:23] *** Su-Shee_ joined
[04:23] *** drbean joined
[04:27] *** Su-Shee left
[04:31] *** envi joined
[04:32] *** xinming left
[04:34] *** xinming joined
[04:35] *** cafesofie left
[04:35] *** cafesofie joined
[05:05] *** solarion left
[05:10] *** solarion joined
[05:43] *** Patterner left
[05:45] *** Psyche^ joined
[05:45] *** Psyche^ is now known as Patterner

[05:51] *** rod_ joined
[06:27] *** lue joined
[06:27] <lue> hello! o/

[06:28] <rod_> hi...0/

[06:29] *** cafesofie left
[06:32] *** cafesofie joined
[06:36] *** am0c joined
[06:40] *** masak joined
[06:40] *** orafu left
[06:41] *** orafu joined
[06:42] *** drbean left
[06:42] *** cafesofie left
[06:43] <lue> buubot: seen bkeeler

[06:43] <lue> aloha: seen bkeeler

[06:43] <aloha> lue: Sorry, I haven't seen bkeeler.

[06:44] <masak> morning, #perl6.

[06:45] <lue> hello, masak! o/

[06:47] <lue> how long does STD take to compile on the average computer?

[06:48] <TimToady> it takes about 30 seconds on a fast computer

[06:50] <lue> I'm going to guess 30 minutes for me :D

[06:50] <diakopter> lue: you're a fast/60 computer?

[06:50] <lue> .oO(feather has the stuff needed for STD on a <11-year-old server, right?)

[06:51] <lue> I have a processor that goes... oh I can't remember, just a second. (I know it's under 1GHz)

[06:53] *** cafesofie joined
[06:53] * lue hears faint cries from the masses to get a new computer, and ponders stealing a better one from his future self.

[06:55] <sorear> GHz is far from everything

[06:55] <sorear> I suspect STD is actually cache-bound on most hardware

[06:55] *** rod_ left
[06:56] <sorear> it's approximately 20 times faster on diakopter's Nemerle than my Northwood

[06:56] <lue> I have the feeling RAM ought be an issue though. (384MiB)

[06:56] *** mica_ella_tuazon joined
[06:57] <masak> mica_ella_tuazon! \o/

[06:57] <masak> lue: can you even compile Rakudo with that?

[06:57] <lue> Hey, it didn't take that long! I guess either a) compilation of STD has gotten faster, or b) I was waay to impatient the other times I've tried compiling.

[06:57] <mica_ella_tuazon> \o/.......friend...

[06:58] <lue> Last time I tried compiling Rakudo was way back in Spring/Early Summer 2010, when I first came here. I've heard rumors it wouldn't be as painful to compile on my comp nowadays.

[06:59] <lue> .oO(Ah, I remember all those times my computer would commit instantaneous suicide in the middle of core.pm > core.pir)

[07:03] <sorear> you could always join my cabal... I know for a fact it builds in 384, that's what I've got

[07:03] * sorear is trying to figure out what the Parcel resulting from zip(@a; @b) looks like

[07:08] <masak> sorear: when you do, let us know...

[07:08] <masak> I wouldn't rule out some sludge in the form of wishful thinking around the multidim ;

[07:10] * diakopter lolz at 'Nemerle'

[07:11] <diakopter> I suspect you mean Nehalem

[07:12] <lue> what's compiling after the line `Compiled ./Cursor.pm6' ?

[07:16] *** ram_ joined
[07:16] <ram_> hello all

[07:17] <masak> ram_: hi!

[07:17] <masak> ram_: lue needs more of you. :P

[07:17] <ram_> ok..

[07:17] <ram_> I am from India.. 

[07:17] <masak> welcome, ram_ from India!

[07:17] <ram_> thansk masak

[07:18] <ram_> thanks*

[07:18] <masak> in here, Perl 6 already happened :) and it's great.

[07:18] <ram_> where can i download

[07:18] <masak> perl6.org

[07:18] <ram_> nice

[07:18] <ram_> whats new

[07:19] <masak> ram_: Rakudo is the most feature-rich Perl 6, but Niecza is coming strong, and is faster.

[07:19] <ram_> whats rakudo

[07:19] <ram_> why differebnt names

[07:19] <masak> rakudo: say "hi, ram_"

[07:20] <p6eval> rakudo 388eed: OUTPUT«hi, ram_␤»

[07:20] <masak> niecza: say "hi from me too, ram_"

[07:20] <p6eval> niecza v1-184-g63e2b4c: OUTPUT«hi from me too, ram_␤»

[07:20] <masak> ram_: different names because unlike Perl 5, there's a specification and many implementations.

[07:21] <ram_> wow.. nice 

[07:22] <ram_> ok whats one thing noticebaly changed in perl6

[07:22] <masak> ah, from Perl 5?

[07:22] <masak> well, we have sub signatures.

[07:23] <ram_> ok

[07:23] <masak> rakudo: say foo { my ($a, $b) = @_; say $b }; foo(1, 2, 3) # Perl 5 style

[07:23] <p6eval> rakudo 388eed: OUTPUT«Could not find sub &foo␤  in main program body at line 22:/tmp/AryXGcOotd␤»

[07:23] <masak> er.

[07:23] <masak> rakudo: sub foo { my ($a, $b) = @_; say $b }; foo(1, 2, 3) # Perl 5 style

[07:23] <p6eval> rakudo 388eed: OUTPUT«2␤»

[07:23] <masak> like that.

[07:23] <masak> but now...

[07:23] <sorear> diakopter: Yes, I do.

[07:23] <masak> rakudo: sub foo($a, $b, $) { say $b }; foo(1, 2, 3)

[07:24] <p6eval> rakudo 388eed: OUTPUT«2␤»

[07:24] <masak> ram_: shorter, and more informative.

[07:24] <ram_> oh... that was good

[07:24] <ram_> ypu guys are amazing

[07:24] <sorear> masak: there are several interlocking bits of sludge

[07:24] <ram_> perl6 seems to be coolest thing to learn

[07:25] <masak> ram_: for me Perl 6 helped me understand Perl 5 better.

[07:25] <ram_> oh ya

[07:25] <ram_> thata a plus

[07:25] <masak> ram_: Perl 5 is better if you want things done above all else. Perl 6 is better if you want understanding too. :)

[07:25] <sorear> masak: multidim array subscripts are connected to the fine structure of Parcels, which are connected to the nature of list assignment, the behavior of one-element slices, polycontext 'return', and the precise handling of 'is rw' on subs

[07:26] <sorear> masak: I suspect both Rakudo and Niecza get all of those things wrong, and I suspect they cannot be improved one at a time

[07:26] <masak> sorear: nod.

[07:26] <masak> sorear: this takes a broadside approach of some kind.

[07:26] <diakopter> [OT trivia]: in what movie does Hayden Christiansen play 'Luke'?

[07:26] <diakopter> er, Hayden Christensen

[07:27] <lue> aaaah, my computer is getting slower by the second (at least I know STD's compiling)

[07:28] *** bacek joined
[07:29] * sorear starts to write, sub zipop($fn) { sub (|@lists) { ...

[07:30] *** ram_ left
[07:31] <diakopter> o_O

[07:33] <sorear> basically I don't know how to effectively write a "list infix" operator in Perl 6

[07:34] <sorear> except for secret primitives

[07:34] *** lue left
[07:38] *** lue joined
[07:40] <lue> And that's what happens when the compilation process get so memory-consuming it takes a few minutes to get to typing ^C, and doing *that* is memory-consuming enough that my IRC client couldn't stay connected to the internet.

[07:41] <lue> *sigh* :)

[07:41] <sorear> lue: ulimit is your friend. :)

[07:41] <sorear> lue: also, try my compiler - I have binaries!

[07:42] <masak> sorear++

[07:42] <lue> ?(your compiler == niecza)

[07:45] <sorear> Bool::True

[07:45] *** kfo_ joined
[07:46] <lue> Actually, I would try compiling STD on the server I do all my P6 work on, but cpan won't let me install the dependencies w/o root

[07:46] <sorear> use cpanm instead

[07:46] <sorear> it uses about 1/20 the memory, is 20 times faster, and doesn't need root

[07:46] <sorear> what are you waiting for?

[07:47] <masak> cpanm++

[07:48] * lue catapults over several Under Construction signs left behind during the Geocities takedown to find cpanm

[07:48] *** kfo left
[07:50] <apejens> cpanminus

[07:51] <dalek> 6model: 8df8c58 | (Martin Berends)++ | java/ (6 files):

[07:51] <dalek> 6model: [java/compiler] replacing JST::Temp with JST::Local about halfway done

[07:51] <dalek> 6model: review: https://github.com/jnthn/6model/commit/8df8c5815d

[07:52] <sorear> lue: Why do you want to compile STD using the outdated Perl5 harness anyway? :p

[07:53] <lue> [with laughing sobs] I can't win. It won't let me install to /usr/local/bin , and there doesn't appear to be any (easy) way to change it.

[07:53] <apejens> there is

[07:53] <apejens>   -l,--local-lib            Specify the install base to install modules

[07:53] <lue> sorear: I actually just wanted to see if I could possibly interface with it in my P6-on-GCC project, when I get started on it.

[08:05] *** drbean joined
[08:09] *** GinoMan joined
[08:23] *** lamstyle joined
[08:27] *** kaare_ joined
[08:42] <dalek> 6model: 25e6eed | (Martin Berends)++ | java/compiler/ (2 files):

[08:42] <dalek> 6model: [java/compiler] completed the conversion from JST::Temp to JST::Local

[08:42] <dalek> 6model: review: https://github.com/jnthn/6model/commit/25e6eede0c

[08:53] <lue> goodnight Camelia-land! o/

[08:53] <moritz_> g'night lue 

[08:53] <masak> sleep well, lue. dream of more RAM.

[08:55] *** cafesofie left
[09:17] *** cafesofie joined
[09:27] *** justatheory left
[09:28] *** drbean left
[09:42] *** amkrankruleuen joined
[09:49] *** rgrau joined
[09:49] <dalek> 6model: 65877f0 | (Martin Berends)++ | java/compiler/JST2Java.pm:

[09:49] <dalek> 6model: [java/compiler] update codegen for JST:: New and If nodes

[09:49] <dalek> 6model: review: https://github.com/jnthn/6model/commit/65877f095e

[09:57] *** cafesofie left
[09:58] *** cogno joined
[10:01] *** lopaway left
[10:02] *** Su-Shee_ is now known as Su-Shee

[10:08] *** karupanerura joined
[10:13] *** cogno left
[10:31] <dalek> 6model: 1fd57eb | (Martin Berends)++ | java/compiler/JST2Java.pm:

[10:31] <dalek> 6model: [java/compiler/JST2Java.pm] update codegen for JST::Literal node

[10:31] <dalek> 6model: review: https://github.com/jnthn/6model/commit/1fd57ebe48

[10:43] *** drbean joined
[10:44] <dalek> 6model: ca389d4 | (Martin Berends)++ | java/compiler/JST2Java.pm:

[10:44] <dalek> 6model: [java/compiler/JST2Java.pm] update codegen for JST::ArrayLiteral

[10:44] <dalek> 6model: review: https://github.com/jnthn/6model/commit/ca389d40b6

[10:53] *** kalkin- left
[10:54] <moritz_> regarding masak's coding contest... I thought arnsholt had submitted some solutions too?

[10:55] <moritz_> I don't see any on the overview page

[10:56] <moritz_> arnsholt: or did you just write and not submit them?

[10:58] <moritz_> masak: and I find it weird that you discuss correctness under the the heading "Algorithmic efficiency"

[11:02] *** pmurias joined
[11:04] <pmurias> lue: re p6-on-gcc you are aware that's a project that has little chance of going anywere, targeting the GCC is almost the same as targeting C, and the hardest part is not emitting code but implementing the runtime

[11:06] <pmurias> ?

[11:07] *** mica_ella_tuazon left
[11:09] *** cogno joined
[11:25] <dalek> 6model: 8b8eca6 | (Martin Berends)++ | java/compiler/PAST2JSTCompiler.pm:

[11:25] <dalek> 6model: [java/compiler/PAST2JSTCompiler.pm] port diverse bits from dotnet/

[11:25] <dalek> 6model: review: https://github.com/jnthn/6model/commit/8b8eca6e0f

[11:34] *** whiteknight joined
[11:39] *** coldhead left
[11:40] *** cogno left
[11:40] *** cogno joined
[11:53] <moritz_> phenny: tell masak that the p2 review is neither in the archive nor on the front page of your blog. Pity.

[11:54] <phenny> moritz_: I'll pass that on when masak is around.

[11:55] *** dual left
[11:56] *** Guest32641 left
[11:56] *** klunky joined
[12:04] *** xinming left
[12:04] *** xinming joined
[12:04] *** cogno left
[12:07] <dalek> 6model: 41ef0a1 | (Martin Berends)++ | java/compiler/Grammar.pm:

[12:07] <dalek> 6model: [java/compiler/Grammar.pm] sync with dotnet/ counterpart. They are identical, so there is a good case for having a single instance of this file in common/.

[12:07] <dalek> 6model: review: https://github.com/jnthn/6model/commit/41ef0a18de

[12:08] *** rgrau left
[12:09] *** klunky left
[12:14] <mberends> pmurias: +1 about the GCC and runtime, but think about how much fun lue++ can have finding out why ;)

[12:15] *** am0c left
[12:16] <pmurias> it can be intresting as an exercise but from my vague recollection of the GCC it isn't very friendly nor fun

[12:16] <pmurias> s/GCC/GCC ast/

[12:18] <mberends> :)

[12:34] *** x3nU joined
[12:34] <x3nU> hi

[12:36] <jnthn> morning, #perl6

[12:36] *** x3nU left
[12:36] <moritz_> mornin' jnthn 

[12:37] *** risou joined
[12:41] <jnthn> mberends: Wow! Lots of hackin'

[12:41] *** dual joined
[12:42] <mberends> jnthn: yes, even right now :)

[12:42] <jnthn> mberends: :D

[12:42] <mberends> no additional tests passed yet, which might have been your next question ;)

[12:43] <jnthn> (shared grammar) Reasonable idea.

[12:43] <jnthn> I think actions too should be equally tractable.

[12:44] <mberends> Actions.pm is over 99% the same, only the java version needs some bootstrapping patches atm.

[12:44] *** kaare_ left
[12:44] <mberends> (currently checking diffs on that file)

[12:44] <masak> morrn', jnthn.

[12:44] <phenny> masak: 11:54Z <moritz_> tell masak that the p2 review is neither in the archive nor on the front page of your blog. Pity.

[12:45] *** kaare_ joined
[12:45] <masak> moritz_: will investigate.

[12:46] <jnthn> o/ masak

[12:52] <jnthn> mberends: I'm guessing the P6Object.pm bits?

[12:53] <mberends> jnthn: yes

[12:54] <jnthn> OK, that's just loading an extra module rather than bootstrappy. :)

[12:56] *** pmurias left
[12:59] <dalek> 6model: b40d504 | (Martin Berends)++ | java/compiler/Actions.pm:

[12:59] <dalek> 6model: [java/compiler/Actions.pm] almost synced with dotnet/ counterpart, missing just not loading core libraries because P6Objects is not ready.

[12:59] <dalek> 6model: review: https://github.com/jnthn/6model/commit/b40d5044df

[13:08] <dalek> nqp-rx/nom: e282329 | jonathan++ | src/HLL/Grammar.pm:

[13:08] <dalek> nqp-rx/nom: Get two of the cheats into HLL::Grammar proper. This first one adds .O (just a wrapper around the PIR) and the second translates .panic into NQP.

[13:08] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/e282329052

[13:10] <flussence> ooh, the Terminus font can display that funny unicode newline thing that p6eval uses, now.

[13:19] *** MayDaniel joined
[13:28] *** MayDaniel left
[13:35] *** klunky joined
[13:41] *** felliott joined
[13:42] *** rgrau joined
[13:43] *** am0c joined
[13:43] *** rhizo joined
[13:47] <masak> moritz_: p2 should now be back; thanks for the heads-up. the dates for the two were identical, and p2 must've disappeared in a .sort -- feels like there's a rakudobug to be had here...

[13:48] *** cogno joined
[13:49] <masak> rakudo: class A { has Int $.t }; say [A.new(:t(3)), A.new(:t(2)), A.new(:t(2)), A.new(:t(1))].sort( *.t ).elems

[13:49] <p6eval> rakudo 388eed: OUTPUT«4␤»

[13:49] <masak> but it's not as simple as that.

[13:49] <masak> rakudo: class A { has Int $.t }; say ~[A.new(:t(3)), A.new(:t(2)), A.new(:t(2)), A.new(:t(1))].sort( *.t )>>.WHICH

[13:49] <p6eval> rakudo 388eed: OUTPUT«269053600 269110728 269080160 269146544␤»

[13:50] <masak> I'll get you, Bug. :)

[13:58] *** cogno left
[13:59] *** dju left
[14:00] *** am0c left
[14:02] *** dju joined
[14:07] *** risou left
[14:07] <masak> ah; no, for some reason I had decided to hash on the timestamp in psyde... :) no rakudobug.

[14:08] *** JimmyZ joined
[14:09] <dalek> nqp-rx/nom: 250d2a3 | jonathan++ | src/HLL.pir:

[14:09] <dalek> nqp-rx/nom: Re-shuffle include order so that for the earlier bootstrap stages the old cheats in HLL::Grammar take precedence.

[14:09] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/250d2a3fec

[14:09] <dalek> nqp-rx/nom: a0f4265 | jonathan++ | src/HLL/Grammar.pm:

[14:09] <dalek> nqp-rx/nom: Add LANG, MARKER, MARKED. Partial ports to NQP, with some embedded PIR still.

[14:09] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/a0f4265583

[14:11] <jnthn> masak: 1 blog post a day should be enough for anyone... :P

[14:13] *** sji joined
[14:15] <masak> jnthn: timestamp, not date. :)

[14:16] <masak> Number One Sign that ISO-8601 was well-thought-out: sorting dates of that format is the same as sorting with infix:<leg>.

[14:21] *** VXZ left
[14:22] *** drbean left
[14:44] *** cogno joined
[14:46] <dalek> nqp-rx/nom: 583c7bf | jonathan++ | src/HLL/Grammar.pm:

[14:46] <dalek> nqp-rx/nom: Add EXPR and related, plus ternary, to HLL::Grammar.

[14:46] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/583c7bfaca

[14:54] *** stifynsemons joined
[15:02] <masak> today's autopun:

[15:02] <masak> rakudo: role FactoryJoke[Str $type] { method make { say "Help, I am trapped inside a $type factory!" } }; FactoryJoke["role"].make

[15:02] <p6eval> rakudo 388eed: OUTPUT«Help, I am trapped inside a role factory!␤»

[15:02] <dalek> nqp-rx/nom: 659a99f | jonathan++ | src/HLL/Grammar.pm:

[15:02] <dalek> nqp-rx/nom: Get the remaining HLL::Grammar cheats put into NQP bodies, and in one case just port entirely to PIR. In theory, this should be all that's needed to switch Grammar/Actions over to 6model. In reality, there's some bug(s) somewhere. :-(

[15:02] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/659a99f07e

[15:02] <jnthn> masak: :P

[15:07] *** cogno left
[15:12] *** masak left
[15:12] *** masak joined
[15:19] *** MayDaniel joined
[15:21] * mberends roles on the floor

[15:21] *** icwiener joined
[15:21] <masak> :)

[15:22] <masak> today's mini-challenge: write a datatype that works like http://download.oracle.com/javase/6/docs/api/java/util/TreeSet.html -- elements are inserted in order, no duplicate elements, good access performance characteristics. try to make the API fit naturally among extant data types in Perl 6.

[15:22] <masak> it's a self-sorting Set.

[15:33] * masak learns in the backlog that he's four years older than Tene

[15:33] <masak> wouldn't have guessed that.

[15:34] <Tene> orly?  What would you have guessed?

[15:34] <masak> about the same age, or you one or two years older.

[15:34] <masak> then again, I never'd've successfully guessed sorear's age either :P

[15:35] <Tene> Back when I was teaching linux classes, I often had students guess my age as at least ten years older than I really am.

[15:35] <masak> do you have a long, thick beard?

[15:35] <Tene> My girlfriend tends to be guessed at much younger than she really is, too.  We sometimes get very dirty looks when we're out in public together.  ;)

[15:36] <masak> heh :)

[15:36] <jnthn> Beards seem to be, like, $age += $a_bunch

[15:36] <Tene> No, I keep my beard pretty short.

[15:37] <Tene> It grows far too fast and thick for shaving to actually do much, so I just don't bother until it starts annoying me.

[15:37] <masak> :)

[15:40] *** cogno joined
[15:54] *** pmurias joined
[15:59] *** cogno left
[16:05] *** colomon left
[16:10] *** envi left
[16:32] *** starcoder left
[16:36] *** starcoder joined
[16:50] *** shi joined
[16:51] *** sji left
[16:59] *** JimmyZ left
[17:03] *** nadim_ left
[17:12] *** icwiener left
[17:13] *** fhelmberger joined
[17:20] <dalek> nqp-rx/nom: 3887fc5 | jonathan++ | src/ (3 files):

[17:20] <dalek> nqp-rx/nom: Switch grammars over to 6model. This includes changes to get protoregexes working again. Sadly, due to some other bug, much is still broken.

[17:20] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/3887fc51ce

[17:20] <dalek> nqp-rx/nom: 28c49b3 | jonathan++ | src/Regex/Cursor2.pir:

[17:20] <dalek> nqp-rx/nom: Unbreak language transitioning - probably a copy-pasto.

[17:20] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/28c49b3ec9

[17:20] <dalek> nqp-rx/nom: 37173b1 | jonathan++ | src/HLL/Grammar.pm:

[17:20] <dalek> nqp-rx/nom: Fix a translate-o in HLL::Grammar.LANG.

[17:20] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/37173b1e85

[17:20] <dalek> nqp-rx/nom: 5763b4a | jonathan++ | t/nqp/45-smartmatch.t:

[17:20] <dalek> nqp-rx/nom: Skip some tests that are Parrot-dependent and could never work in a portable NQP.

[17:20] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/5763b4ad47

[17:20] <dalek> nqp-rx/nom: 43af670 | jonathan++ | src/NQP/Actions.pm:

[17:20] <dalek> nqp-rx/nom: Avoid trying to emit meta-object calls for methods/regexes that are written outside of a package; cleans up the last issues with the tests and mostly unbreaks NQP setting compilation.

[17:20] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/43af670b86

[17:26] <diakopter> jnthn: did you see my note about pulling Util's pull requests for 6model

[17:27] <jnthn> diakopter: No, I musta missed it.

[17:28] <jnthn> diakopter: Did you already pull them or did you want me to?

[17:30] *** thundergnat joined
[17:31] <jnthn> diakopter: Can't find your note either. :(

[17:32] <dalek> 6model: 4081240 | util++ | / (2 files):

[17:32] <dalek> 6model: Fix typo.

[17:32] <dalek> 6model: review: https://github.com/jnthn/6model/commit/4081240bd6

[17:32] <dalek> 6model: 8f6a5f6 | util++ | common/NQP/NQPSetting.pm:

[17:32] <dalek> 6model: Change Northern-Englander slang to friendlier spelling.

[17:32] <dalek> 6model: review: https://github.com/jnthn/6model/commit/8f6a5f6053

[17:32] <dalek> 6model: a0fc0dd | util++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[17:32] <dalek> 6model: Change stray tabs to spaces.

[17:32] <dalek> 6model: review: https://github.com/jnthn/6model/commit/a0fc0ddc1f

[17:36] *** justatheory joined
[18:04] <diakopter> jnthn: :)  somewheres in the backlog; I shoulda stashed it in phenny

[18:18] *** thundergnat left
[18:29] *** cogno joined
[18:36] *** nadim_ joined
[18:41] *** cogno left
[18:48] *** wamba joined
[18:49] *** crythias joined
[19:00] *** cogno joined
[19:01] <sorear> good * #perl6

[19:02] *** GinoMan left
[19:03] *** colomon joined
[19:04] *** GinoMan joined
[19:05] * colomon 's Internet is back!

[19:06] * colomon has just been told he needs to shovel some more coal.

[19:07] *** pmurias left
[19:07] *** shi left
[19:07] <moritz_> /o\

[19:09] *** cogno left
[19:10] *** klunky left
[19:11] <masak> colomon: your Internet is coal-driven?

[19:11] <colomon> No, Henry's trains are coal-driven.

[19:11] <masak> ah.

[19:11] * moritz_ thought it was IP-over-smoke-signs

[19:13] * mberends hopes the dutch internets are windmill-driven

[19:18] *** cogno joined
[19:18] <lue> hello world! o/

[19:18] <masak> \o

[19:20] <lue> You can always use the carrier-pigeon protocol, if nothing else http://tools.ietf.org/html/rfc2549

[19:21] <lue> (actually, that link is an amendment to http://tools.ietf.org/html/rfc1149)

[19:22] *** cogno left
[19:30] *** pmurias joined
[19:32] <pmurias> hi

[19:32] <lue> hello! o/

[19:33] *** Intensity left
[19:33] <lue> pmurias: I refute your doubt about the project! Although I do agree that information is ('scarce'|'technical').

[19:33] *** kst left
[19:34] <pmurias> lue: how do you refute my doubt?

[19:34] *** kst joined
[19:36] <lue> optimism and clever hiding spots.

[19:36] * lue ducks

[19:37] *** wallberg joined
[19:42] *** s_mosher left
[19:42] *** wallberg left
[19:43] *** wallberg joined
[19:44] <masak> wallberg: \o

[19:44] *** coldhead joined
[19:44] <wallberg> hi there :-)

[19:48] <wallberg> masak: cool contest! nice indeed :-)

[19:49] <masak> thank you. :)

[19:49] <masak> I'm already looking forward to the next year.

[19:50] *** thundergnat joined
[19:51] *** imax joined
[19:58] *** cschimm1 left
[19:59] <dalek> nqp-rx/nom: 125d4ab | jonathan++ | src/setting/Hash.pm:

[19:59] <dalek> nqp-rx/nom: Unbreak setting compilation.

[19:59] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/125d4ab5ee

[19:59] <dalek> nqp-rx/nom: 910fcac | jonathan++ | src/NQP/ (2 files):

[19:59] <dalek> nqp-rx/nom: Only add the return exception handler when there's a return statement in a routine. On Parrot, adding one to a sub that doesn't use it makes the invocation over 3 times more costly; since EXPR and so forth are now wrapped in NQP subs, we really need to save on this.

[19:59] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/910fcac241

[19:59] <dalek> nqp-rx/nom: 6a1bb2a | jonathan++ | src/metamodel/reprs/P6opaque. (2 files):

[19:59] <dalek> nqp-rx/nom: A little sloppy programming saw every attribute get/bind in P6opaque accidentally cause the creation of two GC-ables. This brings that down to zero, as it was intended to be.

[19:59] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/6a1bb2a229

[20:01] <thundergnat> Is there any shorthand (built in) way in perl 6 to build an array of explicit numeric values? Short of actually writing out the actual array and inserting commas?  

[20:02] <tadzik> emm

[20:02] <thundergnat> something that is interpeted as [1,2,7,14,35]. [<1 2 7 14 35>] is close but is an array of numbery strings.

[20:02] <moritz_> <0 1 2 3> is supposed to return a list/Parcel of nmbers

[20:02] <tadzik> rakudo: my @a = 1, 2, 3, 4; say @a.perl

[20:02] <p6eval> rakudo 388eed: OUTPUT«[1, 2, 3, 4]␤»

[20:02] <moritz_> which happen to remeber their original string form

[20:03] <thundergnat> tadzik: hmm. yes but how about if you need to build a multi level array?

[20:03] <thundergnat> Is there anything like 'quote numeric'? [qn/1 2 3 4 5/]

[20:03] <tadzik> hmm, multi level?

[20:03] <tadzik> like my @a = [1, 2], [3, 4];?

[20:04] <thundergnat> multi dimentional

[20:04] <moritz_> thundergnat: the [] help with multi dimensional

[20:04] <moritz_> and inside you can use any literals you want

[20:05] <thundergnat> moritz_: doh. I may be over thinking this.... :(

[20:07] *** shi joined
[20:09] <thundergnat> I have some large two dimentional arrays I am constructing by typing in values and was trying to to just type the lists without needing to insert explicit commas between each value.   

[20:09] <wolverian> "dimensional", by the way.

[20:10] <thundergnat> But if I use the [<1 2 3>] list constructor, they are interpreted stringily. 

[20:10] <masak> :)

[20:10] <moritz_> thundergnat: that's a rakudo limitation

[20:10] <moritz_> thundergnat: you can always +<< them

[20:10] <moritz_> or +« if you prefer

[20:10] <thundergnat> Normally that wouldn't matter but in this case it makes a difference.

[20:10] <masak> rakudo: say (+«<1 2 3>)[0].WHAT

[20:10] <p6eval> rakudo 388eed: OUTPUT«Num()␤»

[20:11] <masak> should be Int, but at least it isn't Str.

[20:11] <thundergnat> oooo.

[20:11] <thundergnat> let me try that.

[20:12] <moritz_> you can also ».Int them if they are supposed to be ints

[20:12] <thundergnat> Rats actually.

[20:13] <masak> rakudo: say <1 2 3>».Rat[0].WHAT

[20:13] <p6eval> rakudo 388eed: OUTPUT«Rat()␤»

[20:13] <thundergnat> See https://gist.github.com/792379 for what I'm trying to do

[20:13] <thundergnat> and why it makes a difference to me

[20:15] *** cschimm1 joined
[20:20] *** klunky joined
[20:22] <thundergnat>  The [<1 2 3>».Rat] will work for me, thanks. I still think it would be nice to have a generic numeric "quoting" like qn/1 2 3/ though.

[20:23] <moritz_> <...> is that

[20:23] <moritz_> it's just NYI in rakudo

[20:24] <thundergnat> Ah! cool.

[20:28] <masak> thundergnat: the things that come out will be something with both a Str and an Int/Num/Rat nature.

[20:30] <thundergnat> masak: Seems like a lot of overhead...

[20:31] <thundergnat> moritz_: BTW, congratulations on $family++

[20:31] <moritz_> thundergnat: thanks

[20:31] <moritz_> it's both a source of joy and sorrow :-)

[20:31] <thundergnat> I'm sure. :)

[20:32] <masak> thundergnat: no overhead in the best case, since the things are literals.

[20:32] * moritz_ wonders how that's going to look in the implementations

[20:34] <masak> class IntStr is Int is Str { #[ cough cough ] }

[20:34] <masak> er, #`[ ... ]

[20:34] <moritz_> and that for every core numeric type?

[20:35] *** klunky left
[20:35] <moritz_> rakudo: print 'cough ' while True;

[20:35] <p6eval> rakudo 388eed: OUTPUT«(timeout)gh cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough

[20:35] <p6eval> ..cough …

[20:36] *** dorlamm joined
[20:37] <masak> rakudo: loop { print 'cough ' }

[20:37] <p6eval> rakudo 388eed: OUTPUT«(timeout)gh cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough cough

[20:37] <p6eval> ..cough …

[20:37] <moritz_> oh come on, way too idiomatic

[20:38] <pmurias> sorear: how are named arguments passed to methodcall nam op?

[20:38] <masak> moritz_: yes, for every numeric type. but now that you mention it, it would be really cool if it had bindings into literal parsing in such a way that when someone extends the grammar with a new literal, the corresponding StrNewliteral hybrid automatically popped into existence.

[20:39] <masak> a new literal type and its parsing, that is.

[20:39] <moritz_> ETOOMUCHMAGIC

[20:39] <masak> either that's way too much to ask... yes.

[20:39] <masak> but we should consider how that use case would work.

[20:40] <masak> user-added literals shouldn't be second class, I think.

[20:40] <moritz_> right

[20:40] <moritz_> so... we need real junctive types?

[20:41] <pmurias> what is IntStr?

[20:41] * moritz_ doesn't want to be the who proposes it in earnest to jnthn 

[20:41] <pmurias> and what would StrNewLiteral do?

[20:42] <dalek> roast: d37e5d1 | (Kodi Arfer)++ | S03-operators/range.t:

[20:42] <dalek> roast: [range.t] Marked tests for RT #76950.

[20:42] <dalek> roast: review: https://github.com/perl6/roast/commit/d37e5d1003

[20:44] <dalek> rakudo: 7787c15 | moritz++ | build/Makefile.in:

[20:44] <dalek> rakudo: cc_hasjit config item is gone

[20:44] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/7787c15c23

[20:45] <masak> pmurias: it would have a Str aspect and a NewLiteral aspect, just like all the other not-pure-Str objects falling out of <...>

[20:45] * masak --> early night

[20:45] <masak> good night, zebras.

[20:45] <moritz_> gute nacht masak 

[20:46] *** masak left
[20:47] *** tylerni8 joined
[20:47] *** tylerni8 left
[20:52] <jnthn> Gah. So I switched grammars to 6model at last and got a HUGE performance regression. :-/ Well, thought it may be due to wrapping methods that were PIR ones up in NQP bodies and re-writing some to NQP. Added an opt. Minor improvement. Next up, discovered attribute access was rather less efficient than planned. Fixed that. Still awful.

[20:52] <jnthn> Turns out I'd screwed up the method cache construction in the class meta-object, so method dispatches were 50x slower than they shoulda been.

[20:53] <moritz_> good news is: if you fix it, it might be not so slow anymore :-)

[20:53] <jnthn> Now the NQP test suite runs faster than before I switched grammars over to 6model, even though some bits are less efficient due to the NQP => PIR move, and that's still before the work to actually really take advantage of 6model...

[20:54] <jnthn> The mistake was so silly I'm almost embarassed to check in the fix. :P

[20:55] <moritz_> jnthn: if you just committed it with message "fix some thinkos", nobody would have noticed :-)

[20:55] <moritz_> jnthn: now you can commit it as "sped up method calls by a factor of 50"

[20:55] <moritz_> and be a hero!

[20:56] <dalek> nqp-rx/nom: 5d9c643 | jonathan++ | src/metamodel/how/NQPClassHOW.pm:

[20:56] <dalek> nqp-rx/nom: Fix a really silly bug in method cache construction.

[20:56] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/5d9c643269

[20:56] <dalek> nqp-rx/nom: 1e0c709 | jonathan++ | src/metamodel/rakudoobject.c:

[20:56] <dalek> nqp-rx/nom: A cleaned up version of the method finding code. No functional changes, was just easier to reassure myself this bit wasn't the problem by factoring it this way, when hunting the issue fixed in the previous commit.

[20:56] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/1e0c70934f

[20:56] <jnthn> moritz_: darn, that woulda been a good idea. :P

[20:56] <jnthn> Anyway, good news is that grammars now run on 6model.

[20:56] <moritz_> \o/

[20:56] <jnthn> Match objects actually are still using the old object system. But that'll be not too bad to deal with.

[20:57] <jnthn> Having worked on this, I'm quite sure there's still plenty of wins to be had too.

[20:58] <jnthn> In some places I expect we're boxing/unboxing more than we used to, even though other opts bring the overall time out ahead of where it was.

[20:59] * moritz_ wonders if creation of failed Match objects is really necessary

[20:59] <jnthn> And with the natively typed attributes work it should be possible to box even less stuff.

[20:59] <jnthn> e.g. the current position and the target string needn't be.

[21:02] <jnthn> Whee. With the method cache fixed and the bootstrap updated, nqp-rx builds itself faster too. :)

[21:02] <moritz_> well, of course :-)

[21:03] <dalek> nqp-rx/nom: e11a117 | jonathan++ | src/stage0/ (5 files):

[21:03] <dalek> nqp-rx/nom: Update the bootstrap to use 6model during the parsing all the way through the build. At this point, there's still a bunch of clean-up work to do to eliminate the old cursor and the rename Cursor2 back to just Cursor.

[21:03] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/e11a117840

[21:03] <jnthn> Darn, wish I'd found this issue earlier.

[21:03] <jnthn> I'd have had faster builds the whole weekend.

[21:04] * moritz_ tries a nom build on newest parrot

[21:04] <jnthn> moritz_++

[21:04] <sorear> pmurias: CgOp.methodcall($obj, "method", ":name", $value)

[21:04] <jnthn> I'm still lagging back a bit.

[21:04] <sorear> pmurias: iirc

[21:05] <moritz_> jnthn: current PARROT_REVISION misses what, 3 releases? :-)

[21:06] <jnthn> moritz_: Wow. :)

[21:06] <jnthn> moritz_: OK, the Parrot I'm testing with ain't *that* far behind. :-)

[21:06] <jnthn> moritz_: BTW, where is the current value to go in PARROT_REVISION obtained from?

[21:07] *** flussence left
[21:07] <jnthn> The version number and sha1 chunk are obvious but the number that goes between them is from ...?

[21:07] *** flussence joined
[21:08] <moritz_> git describe --tags # in parrot repo

[21:08] <sorear> It's the number of commits since the release.

[21:08] <moritz_> parrot_config git_describe

[21:09] <jnthn> ah, thanks.

[21:09] <jnthn> sorear: I guess that's what it was, but didn't fancy counting them by hand. P

[21:09] <jnthn> *:P

[21:10] *** wamba left
[21:12] *** apejens left
[21:13] <pmurias> sorear: that seems a bit wird

[21:13] <pmurias> how is the backend supposed to determin if it's a named literal by checking the type?

[21:14] *** apejens joined
[21:16] <sorear> pmurias: yes

[21:17] <lue> I shall vworp my way into a future time at #perl6 . Unfortunately, I haven't a time machine, so just afk for now :)

[21:17] <moritz_> niecza: multi f($x) { say "positional" }; multi f(:$x) { say "named" }; f "x" => 3

[21:17] <p6eval> niecza v1-184-g63e2b4c: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Multi routines NYI at /tmp/vHH0haoASm line 1:␤------> [32mmulti f($x) { say "positional" }[33m⏏[31m; multi f(:$x) { say "named" }; f "x" =>[0m␤␤Multi routines NYI at /tmp/vHH0haoASm line 1:␤------> [32mitional" }; multi f(:$x) {

[21:17] <p6eval> ..say "named" }[3…

[21:18] <moritz_> niecza: sub f(:$x) { say "named" }; f "x" => 3

[21:18] <p6eval> niecza v1-184-g63e2b4c: OUTPUT«Unhandled exception: Excess arguments to MAIN f, used 0 of 1 positionals␤  at /tmp/X2tH0jEwWa line 0 (MAIN f @ 0)␤  at /tmp/X2tH0jEwWa line 1 (MAIN mainline @ 2)␤  at /home/p6eval/niecza/lib/SAFE.setting line 1037 (SAFE C432_ANON @ 1)␤  at

[21:18] <p6eval> ../home/p6eval/niecza/lib/SAFE.setting line …

[21:18] <moritz_> niecza: sub f(:$x) { say "named" }; f x => 3

[21:18] *** plobsing_ joined
[21:18] <p6eval> niecza v1-184-g63e2b4c: OUTPUT«named␤»

[21:18] <pmurias> sorear: would it be possible to have more structure in the op tree?

[21:19] <dalek> roast: 62713eb | moritz++ | S03-operators/range.t:

[21:19] <dalek> roast: [range.t] fix plan

[21:19] <dalek> roast: review: https://github.com/perl6/roast/commit/62713ebd5f

[21:22] <moritz_> jnthn: nom builds on newest parrot, but 'make test' isn't clean

[21:22] <pmurias> sorear: is there a reason to duplicate the invocant in nam-methodcall?

[21:22] <moritz_> t/nqp/52-vtable.t ............... get_pmc_keyed() not implemented in class 'Undef'

[21:22] *** plobsing left
[21:22] <jnthn> moritz_: That's not surprising.

[21:22] <jnthn> moritz_: Right.

[21:22] <jnthn> moritz_: There's a few that are regressed still.

[21:22] <jnthn> moritz_: Mostly ones that are to do with Parrot integrationy bits.

[21:23] <jnthn> moritz_: If it's just that and the odd one in t\hll then please bump the PARROT_REVISION.

[21:23] <moritz_> t/hll/02-modules.t .............. Method 'WHO' not found for invocant of class 'RakudoObject'

[21:23] <jnthn> *nod*

[21:23] <jnthn> Yup, that one is fail here too

[21:24] <moritz_> jnthn: http://nopaste.snit.ch/28626 is the full test summary

[21:24] *** kjeldahl joined
[21:24] <jnthn> thanks, checking

[21:25] <jnthn> moritz_: Yes, consistent with that I have.

[21:25] <moritz_> then I'll push

[21:25] <jnthn> moritz_++ 

[21:25] <jnthn> Thanks!

[21:25] <dalek> nqp-rx/nom: ff8c915 | moritz++ | build/PARROT_REVISION:

[21:25] <dalek> nqp-rx/nom: bump PARROT_REVISION to something non-ancient

[21:25] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/ff8c915fa6

[21:26] <jnthn> moritz_: Hmm. Configure.pl --gen-parrot spews out a bunch of errors here :(

[21:27] <jnthn> moritz_: https://gist.github.com/792454

[21:27] <jnthn> Hmm, this looks...familiar...

[21:29] <dalek> roast: fd5e4b1 | (Kodi Arfer)++ | S03-operators/assign.t:

[21:29] <dalek> roast: [assign.t] Added tests for #76734.

[21:29] <dalek> roast: review: https://github.com/perl6/roast/commit/fd5e4b1e2e

[21:30] <dalek> nqp-rx/nom: 1401ec6 | jonathan++ | build/gen_parrot.pl:

[21:30] <dalek> nqp-rx/nom: Apply gen_parrot.pl fix as also found in Rakudo's gen_parrot.pl to avoid a Win32 issue.

[21:30] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/1401ec647e

[21:30] <jnthn> moritz_: Don't worry, see ^^

[21:32] * moritz_ doesn't worry

[21:36] * moritz_ -> sleep

[21:36] <jnthn> night, moritz_ 

[21:39] *** karupanerura left
[21:39] <sorear> pmurias: more structure would be possible, but it would massively complicate NAMOutput - right now, low-level op trees consist only of arrays and strings, which means they can be passed directly to to-json

[21:39] <thundergnat> jnthn: do you get the "fatal: No names found, cannot describe anything." warning when you build rakudo under windows? or is it just me? see RT 82524

[21:39] <sorear> pmurias: also, my last profiler run came up saying that low-level op trees are the largest memory sink in niecza, so I'm very wary to touch them in a way that might use more space

[21:40] <sorear> p,moritz_: as for duplicating the invocant - it's mostly historical

[21:40] <jnthn> thundergnat: Yes, I've seen that. Didn't get chance to look more closely yet.

[21:41] <sorear> the duplication needs to happen, but it could be pushed down a level or two; I need to try this and benchmark it at some point

[21:42] <thundergnat> jnthn: Theres a patch in 82524. It's a quoting issue.

[21:45] *** dorlamm left
[21:49] *** colomon left
[21:56] <dalek> nqp-rx/nom: f508992 | jonathan++ | src/metamodel/reprs/P6opaque.c:

[21:56] <dalek> nqp-rx/nom: Switch from malloc to the fixed size allocator for object bodies.

[21:56] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/f5089921d4

[22:00] *** thundergnat left
[22:07] <pmurias> sorear: how does memory does niecza use?

[22:08] <sorear> pmurias: O(file size)

[22:08] <pmurias> sorear: we could reduce the memory usage of the optree by building an binary representation directly (in C#)

[22:09] <pmurias> or just building JSON directly without creating an array

[22:09] <pmurias> as STD.nam takes only 2.9M

[22:10] <pmurias> but maybe premature optimalisation is not worth it at that point

[22:15] *** jedai_ joined
[22:16] *** kaare_ left
[22:17] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[22:18] *** jedai left
[22:19] *** lichtkind joined
[22:23] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_lookup_tablet

[22:25] *** lichtkind left
[22:26] <pmurias> avar: i'm adding a common lisp backend to niecza (a Perl 6 compiler currently targeting .NET), as you attempted something similiar for kp6 may i ask your opinion on some implementation choices

[22:27] *** crythias left
[22:31] *** PacoLinux left
[22:39] *** noganex_ joined
[22:43] *** noganex left
[22:50] *** sji joined
[22:51] *** shi left
[22:51] *** Limbic_Region joined
[23:01] *** felliott left
[23:02] *** colomon joined
[23:04] *** felliott joined
[23:04] *** tarski joined
[23:09] *** imax left
[23:31] *** sji left
[23:43] <jnthn> I blug: http://6guts.wordpress.com/2011/01/24/well-that-was-hard-work-getting-nqp-rx-grammars-using-6model/

[23:43] <jnthn> Darn, where'd my weekend go...

[23:43] <jnthn> :)

[23:43] *** MayDaniel left
[23:52] <dalek> roast: 3f869dd | (Kodi Arfer)++ | S03-operators/range.t:

[23:52] <dalek> roast: [range.t] Fixed fudge syntax.

[23:52] <dalek> roast: review: https://github.com/perl6/roast/commit/3f869ddec0

[23:53] *** kst left
[23:54] *** kst joined
