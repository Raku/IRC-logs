[00:03] *** hanekomu left
[00:05] *** ashleydev joined
[00:13] <sjohnson> (っ´ω｀)っ

[00:23] *** ash_ joined
[00:28] *** gimix joined
[00:32] <snarkyboojum> coldhead: aye, they could cover for "Inversion of Control"

[00:33] *** molaf_ joined
[00:34] *** tylercurtis joined
[00:34] *** tylercurtis left
[00:34] *** molaf left
[00:35] *** ashleydev left
[00:37] *** ashleydev joined
[00:41] *** ashleydev left
[00:42] *** ashleydev joined
[00:42] *** ashleydev left
[00:43] *** ashleydev joined
[00:46] *** dorlamm left
[00:48] *** cafesofie left
[00:59] *** cdarroch left
[01:01] *** shi left
[01:07] *** felliott left
[01:13] *** felliott joined
[01:14] *** felliott_ joined
[01:14] *** felliott left
[01:14] *** felliott_ is now known as felliott

[01:15] *** felliott left
[01:16] *** felliott joined
[01:19] *** felliott left
[01:22] *** cafesofie joined
[01:24] *** ash_ left
[01:24] *** ash_ joined
[01:45] *** cafesofie left
[01:47] <sorear> good * #perl6

[01:48] <snarkyboojum> o/

[01:51] <colomon>  \o

[01:53] *** Chillance joined
[01:59] <sorear> colomon: for a while it was fashionable to put that constant in x86 release binaries, because IDA has the same bug

[02:00] <sorear> colomon: a related bug, at least.

[02:00] *** noganex_ joined
[02:01] *** ash_ left
[02:02] *** _jaldhar joined
[02:03] *** noganex left
[02:04] *** cafesofie joined
[02:05] *** felliott joined
[02:05] *** am0c joined
[02:05] <sorear> shortcircuit: "mono" on Debians is a stripped down version that can't run any real programs.  You need "mono-complete".

[02:06] <sorear> shortcircuit: that said, niecza has been tested on Mono 2.4.4, 2.6.4, 2.6.7, 2.8.2, and HEAD

[02:08] <sorear> Tene: Niecza has a fork of the IO class.  I'm interested in discussing philosophy with you.

[02:10] *** bpalmer left
[02:12] <sorear> whew.  backlog finished.

[02:15] *** V15170R joined
[02:19] <colomon> sorear: I'm pleased to say I had only the smallest difficulty getting niecza v2 running on my Windows box, and that problem was completely the result of my own impatience.  Whee!

[02:40] *** whiteknight left
[02:46] *** V15170R left
[02:51] <sorear> colomon: Is that a +1 to "I need to find a way to avoid the initial setting compile on all new installs"?

[02:52] <colomon> errr... only the gentlest +1.  It's not exactly arduous, if you know to expect it.

[02:53] <colomon> I just didn't read quite far enough down the README.

[02:53] <colomon> Actually, if you could just have it print a message saying what it is doing before it starts, that would be all you need, IMO.

[02:54] <colomon> I didn't know if I was invoking it the right way, so when it just sat there, I assumed I had done something wrong.

[02:59] <sorear> how long did it take on what hardware, ooc?

[03:07] <sorear> perl6: sub infix:<L+>($x, $y) { $x ~ $y }; my $z = "f"; $z L+= "g"; say $z

[03:07] <p6eval> niecza v2-1-gc6596ea: OUTPUT«fg␤»

[03:07] <p6eval> ..rakudo d3e9a3: OUTPUT«Null PMC access in invoke()␤  in main program body at line 1␤»

[03:07] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "L"␤    expecting operator␤    at /tmp/PKSv33MRrm line 1, column 53␤»

[03:11] <colomon> It took a minute or two, perhaps?  It's a quad core machine with 8 gigs RAM, I'm not sure the exact processor type or speed.

[03:12] <colomon> It really wasn't unreasonably long, it was just surprisingly long because I wasn't expecting any significant pause.

[03:13] <sorear> huh.

[03:15] <sorear> it takes about 30 seconds on my one-core (P4 Northwood 2003), 0.375 gigs RAM machine.

[03:15] <sorear> I wonder what's so pessimal about your setup.

[03:15] <sorear> diakopter says it takes 5 seconds for him

[03:21] *** orafu left
[03:22] <colomon> Huh.  It was definitely more than 5 seconds.  Might have been 30 seconds, though, I certainly wasn't timing it closely.  Is there any way I can redo it so I can time it properly?

[03:23] *** orafu joined
[03:30] <colomon> afk # bed

[03:43] <snarkyboojum> niceza takes about 10-15 seconds for a first run, on my lappy

[03:44] <snarkyboojum> fwiw :)

[03:52] <Util> rakudo: say "line ", $. ;

[03:52] <p6eval> rakudo d3e9a3: OUTPUT«===SORRY!===␤Unsupported use of $. variable; in Perl 6 please use the filehandle's .line method at line 22, near " ;"␤»

[03:52] <Util> rakudo: say "line ", $*IN.line ;

[03:52] <p6eval> rakudo d3e9a3: OUTPUT«Method 'line' not found for invocant of class 'IO'␤  in main program body at line 22:/tmp/TTTFk9sbXm␤»

[03:52] <Util> rakudo: say $*IN.^methods».name.grep({ m:i/ line | input | record | number / }).Str;

[03:52] <p6eval> rakudo d3e9a3: OUTPUT«lines lines␤»

[03:52] <Util> Error message says ".line", S28 says ".input_record_number", Rakudo lists neither as methods on a file handle.

[03:52] *** shGeo joined
[03:52] <snarkyboojum> rakudo: say 'niecza'.comb(/./).pick(*).join

[03:52] <p6eval> rakudo d3e9a3: OUTPUT«ziecan␤»

[03:58] *** shGeo left
[04:02] *** felliott left
[04:18] *** satyavvd joined
[04:20] *** cafesofie left
[04:23] *** Su-Shee_ joined
[04:26] *** kaydsoft joined
[04:57] *** cafesofie joined
[05:17] <Tene> sorear: I recommend you look through the IRC logs for my last conversation with timtoady about IO

[05:39] *** ash_ joined
[05:43] *** jarfhy joined
[05:58] *** am0c left
[05:59] *** cosimo left
[06:02] *** dukeleto joined
[06:02] *** mtk left
[06:09] *** mtk joined
[06:14] *** kaare_ joined
[06:47] *** Eevee left
[06:53] *** Eevee joined
[07:07] <sorear> phenny: tell jnthn Is 6model/dotnet or nqp-rx/nom the current state of the art in nomminess?

[07:07] <phenny> sorear: I'll pass that on when jnthn is around.

[07:10] *** kaare_ left
[07:11] *** kaare_ joined
[07:12] <coldhead> nomminess <3

[07:13] <sorear> colomon: so, you say you're not good enough?

[07:21] *** ash_ left
[07:29] *** cjk101010 joined
[07:39] *** wtw joined
[07:46] <moritz_> good morning

[08:02] *** cafesofie left
[08:11] *** Su-Shee_ is now known as Su-Shee

[08:16] *** hanekomu joined
[08:17] *** cjk101010 left
[08:26] *** f00li5h joined
[08:26] *** Mowah joined
[08:42] *** abraxxa joined
[08:45] *** rhr joined
[08:46] *** justatheory left
[08:48] *** daxim joined
[09:05] *** am0c joined
[09:08] *** fhelmberger joined
[09:15] *** bacek joined
[09:16] *** bacek left
[09:26] <moritz_> funny, the top 4 stories on hackernews are all about bing vs. google and alleged search result stealing

[09:27] *** cotto_work joined
[09:32] *** c9s joined
[09:32] *** c9s left
[09:33] *** bacek joined
[09:40] *** kensanata joined
[09:43] *** dakkar joined
[09:48] *** hanekomu left
[09:58] *** shi joined
[10:03] *** shi left
[10:17] *** masak joined
[10:17] <masak> g'day, zebras.

[10:18] <moritz_> o/

[10:18] * frettled whinnies in two tones like a good zebra.

[10:22] * mathw thinks about recorder technique

[10:24] *** dorlamm joined
[10:26] * masak thinks about $x % 2

[10:28] <frettled> That's very zebraish of you.

[10:29] *** dorlamm left
[10:51] *** dorlamm joined
[11:00] *** gimix left
[11:05] *** ispeak_ joined
[11:05] *** ispeak_ left
[11:08] <masak> phenny: tell daxim ok, I think I solved your problem, bonus points and all: https://gist.github.com/807554

[11:08] <phenny> masak: I'll pass that on when daxim is around.

[11:09] *** Gothmog_ left
[11:09] *** Gothmog_ joined
[11:10] *** orafu left
[11:12] *** orafu joined
[11:23] *** dorlamm left
[11:24] *** llabthgi1 joined
[11:29] *** whiteknight joined
[11:41] *** satyavvd left
[12:01] *** llabthgi1 left
[12:07] *** kaare_ left
[12:16] *** tzhs joined
[12:29] *** bluescreen joined
[12:47] *** MayDaniel joined
[12:55] *** kaare_ joined
[12:59] *** mtk left
[13:00] *** mtk joined
[13:00] <takadonet> morning all

[13:03] <tadzik> o/

[13:04] <colomon> \o

[13:07] <abraxxa> i'm having a problem with nested hash access

[13:07] <abraxxa> my $matching_rank = %rank_for{$matching_number_cnt}.{$matching_star_cnt};

[13:07] <abraxxa> when printing $matching_rank the output is Any()

[13:07] <abraxxa> what happens in perl 6 if a key doesn't exist?

[13:08] *** felliott joined
[13:10] <abraxxa> when i look at https://github.com/perl6/roast/blob/master/S09-autovivification/autovivification.t it seems the dot isn't needed

[13:10] <arnsholt> IIRC if you're reading you'll get an undefined value, if you assign it'll get auto-vivified

[13:10] <abraxxa> is my syntax correct?

[13:10] <abraxxa> or do i need <> around vars?

[13:11] <abraxxa> that's how i've defined my hash: my %rank_for = {  5 => {  2 => 1 }};

[13:16] <abraxxa> this works my $matching_rank = %rank_for{$matching_number_cnt}{$matching_star_cnt};

[13:17] <abraxxa> but it returns Any() and not undef if the key's don't exist

[13:17] <daxim> perl6:   my %rank_for = {  5 => {  2 => 1 }};  %rank_for.perl.say;

[13:17] <phenny> daxim: 11:08Z <masak> tell daxim ok, I think I solved your problem, bonus points and all: https://gist.github.com/807554

[13:18] <p6eval> rakudo d3e9a3: OUTPUT«{"5" => {"2" => 1}}␤»

[13:18] <p6eval> ..pugs: OUTPUT«{("5" => {("2" => 1),}),}␤»

[13:18] <p6eval> ..niecza v2-1-gc6596ea: OUTPUT«Unhandled exception: Attempted to access slot key of type object for Hash␤  at /home/p6eval/niecza/lib/SAFE.setting line 0 (SAFE Hash.LISTSTORE @ 0)␤  at /tmp/HtlCApg8Lv line 1 (MAIN mainline @ 8)␤  at /home/p6eval/niecza/lib/SAFE.setting line 1037 (SAFE C432_ANON @

[13:18] <p6eval> ..1)␤  at /home/p…

[13:18] <tadzik> there is no undef in Perl 6

[13:18] <tadzik> std: undef

[13:18] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of undef as a value; in Perl 6 please use something more specific:␤  Mu (the "most undefined" type object),␤ an undefined type object such as Int,␤  Nil as an empty list,␤  :!defined as a matcher,␤        Any:U as a type constraint␤

[13:18] <p6eval> ..    or fail() as…

[13:20] <abraxxa> daxim: i did that and the hash looks ok to me

[13:21] <abraxxa> the encoding of p6eval isn't ok for me

[13:21] <tadzik> it's not the encoding, these are the ANSI escape sequences for colors

[13:21] <abraxxa> tadzik: ah, thanks for the info

[13:23] <colomon> abraxxa: Any() is (one of) Perl 6's way(s) of saying undef.

[13:24] <abraxxa> what's the perl 6 equivalent of cond ? true : false; ?

[13:25] <masak> cond ?? true !! false;

[13:25] <abraxxa> ah, ?? !! 

[13:25] <abraxxa> i've read it somewhere yesterday and thought it was ?? ||

[13:26] <masak> std: my ($a, $b, $c); $a ? $b : $c;

[13:26] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of ?: for the conditional operator; in Perl 6 please use ??!! at /tmp/KlsAZcIyvq line 1:␤------> [32mmy ($a, $b, $c); $a ?[33m⏏[31m $b : $c;[0m␤Parse failed␤FAILED 00:01 122m␤»

[13:26] *** mtk left
[13:26] <abraxxa> https://gist.github.com/806301

[13:27] <abraxxa> masak: i tried that with my say line but got a different output

[13:27] <abraxxa> std: my $foo; say $foo ? 'yes' : 'no';

[13:27] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of ?: for the conditional operator; in Perl 6 please use ??!! at /tmp/t6fEDYHAgL line 1:␤------> [32mmy $foo; say $foo ?[33m⏏[31m 'yes' : 'no';[0m␤Parse failed␤FAILED 00:01 121m␤»

[13:28] <abraxxa> i got Unable to parse blockoid, couldn't find final '}' at line 77

[13:28] <colomon> abraxxa: that would be a Rakudo error, not a std: error, I'm betting.

[13:28] <colomon> rakudo: my $foo; say $foo ? 'yes' : 'no';

[13:28] <p6eval> rakudo d3e9a3: OUTPUT«===SORRY!===␤Confused at line 22, near "say $foo ?"␤»

[13:28] <abraxxa> colomon: i see

[13:29] <masak> abraxxa: it's ??!!, not ?:

[13:29] <masak> abraxxa: I just did ?: to show you the informative error message STD gives you.

[13:29] <abraxxa> masak: i tried to trigger the error message i got

[13:29] <masak> Rakudo sometimes says "confused" where it should give more informative error messages.

[13:30] *** mtk joined
[13:32] <daxim> masak, what's the expression mex in solution.txt?

[13:33] *** jedai joined
[13:34] <masak> daxim: mex means "minimum excluded". it's the smallest natural number that's not among the arguments.

[13:35] <masak> daxim: for an (impartial) game position with a number of "options", positions to which you can move, the value of that game position is the mex of its options.

[13:37] <daxim> I fail to see a flaw in your written reasoning.  I still need an explanation how you arrive at picking up a certain number of sticks when the opponent has already forced you into an unwinnable situation, e.g. when 6 are remaining

[13:37] *** MayDaniel left
[13:38] <daxim> if I see this correctly, the formula would pick 1

[13:38] *** whiteknight left
[13:43] * masak looks

[13:44] <masak> right, 6-sticks-remaining is an unwinnable situation.

[13:44] <masak> hence, there is no winning move.

[13:44] <daxim> but you must play until the bitter end

[13:44] <masak> right, so pick an arbitrary strategy.

[13:44] <masak> it doesn't matter at that point.

[13:44] <masak> not if the opponent's good.

[13:44] <daxim> so, what do you pick?  I usually say rand(1..4)

[13:45] <masak> it doesn't matter.

[13:45] <masak> there's nothing to recommend any particular strategy in a losing position.

[13:45] <masak> also, that wasn't part of your original problem.

[13:46] <daxim> I read that nim games are always played out because one could always make a mistake at the last moment (humans being involved and all…) and giving up would squander that chance

[13:47] <masak> I'm not arguing against that. I'm saying that at the point where you find yourself in a losing position, there's no strategy that will save you. only "luck".

[13:47] <masak> ...which doesn't exist when you play against a good player.

[13:52] *** Lorn joined
[13:53] *** tzhs left
[14:01] *** drbean left
[14:04] <Util> rakudo: our regex serial_number { <[A..Z]> \d**8 }; $_ = "ABCDEFGH"; my $z = /<serial_number>/ ?? "Y" !! "N"; say $z;

[14:04] <p6eval> rakudo d3e9a3: OUTPUT«Method 'serial_number' not found for invocant of class 'Cursor'␤  in <anon> at line 22:/tmp/l6FgU8fGKV␤  in 'Cool::match' at line 2631:CORE.setting␤  in 'Regex::Bool' at line 6211:CORE.setting␤  in main program body at line 1:/tmp/l6FgU8fGKV␤»

[14:05] <Util> ???

[14:11] *** gbacon joined
[14:12] *** plobsing left
[14:12] *** daxim left
[14:15] *** felliott left
[14:15] <snarkyboojum> rakudo: our regex serial_number { <[A..Z]> \d**8 }; $_ = "ABCDEFGH"; my $z = /serial_number/ ?? "Y" !! "N"; say $z;

[14:15] <p6eval> rakudo d3e9a3: OUTPUT«N␤»

[14:18] <Util> snarkyboojum: without the angle brackets, "serial_number" is just a series of characters to search for.

[14:18] <snarkyboojum> Util: Sure. Nfi here - just playing :)

[14:19] <Util> thx

[14:22] *** am0c left
[14:37] *** plobsing joined
[14:39] <masak> Util: I'm momentarily mystified as well.

[14:39] <masak> Util: that, or something very much like it, used to work.

[14:39] <masak> rakudo: our regex serial_number { <[A..Z]> \d**8 }; $_ = "ABCDEFGH"; my $z = /<&serial_number>/ ?? "Y" !! "N"; say $z;

[14:39] <Util> It works within a grammar.

[14:39] <p6eval> rakudo d3e9a3: OUTPUT«N␤»

[14:39] <masak> there you go.

[14:43] *** ashleyde1 joined
[14:43] *** ashleyde1 left
[14:44] <Util> My reading of S05 is that the & should be legal (to mean a lexical regex), but not *necessary* in this code.

[14:44] <Util> thanks, though; it is just the work-around that I needed.

[14:45] <Util> OHNO! the &-form supresses capture.

[14:45] <PerlJam> Util: <foo=&foo>

[14:45] <Util> PerlJam: thx

[14:46] <Util> and Doh!

[14:46] <PerlJam> Util: what part of S05 gives you the impression that the & isn't necessary?

[14:49] *** cjk101010 joined
[14:49] *** bluescreen left
[14:51] <Util> PerlJam: "This form always gives preference to a lexically scoped regex declaration"

[14:52] <Util> (I was testing with "my" instead of "our").

[14:52] <Util> rakudo: my regex serial_number { <[A..Z]> \d**8 }; $_ = "ABCDEFGH"; my $z = /<serial_number>/ ?? "Y" !! "N"; say $z;

[14:52] <masak> Util: I think you're right, and that the &-less shortcut is simply unimplemented in nqp-rx.

[14:52] <p6eval> rakudo d3e9a3: OUTPUT«Method 'serial_number' not found for invocant of class 'Cursor'␤  in <anon> at line 22:/tmp/MsLFjfYuxL␤  in 'Cool::match' at line 2631:CORE.setting␤  in 'Regex::Bool' at line 6211:CORE.setting␤  in main program body at line 1:/tmp/MsLFjfYuxL␤»

[14:52] <Util> rakudo: my regex serial_number { <[A..Z]> \d**8 }; $_ = "ABCDEFGH"; my $z = /<&serial_number>/ ?? "Y" !! "N"; say $z;

[14:52] <p6eval> rakudo d3e9a3: OUTPUT«N␤»

[14:53] <PerlJam> Hmm.

[14:53] <PerlJam> In my reading that sentence applies to either <foo()> or <foo:>, but not <foo>

[14:54] <masak> I haven't read the context in S05, but it feels "right" to me that serial_number should defer to &serial_number.

[14:55] <PerlJam> ah, but the last paragraph in that section says "A call to C<< <foo> >> will fail if there is neither any lexically scoped routine of that name it can call, nor ..."    

[14:56] <PerlJam> masak: yes, it does.

[14:59] <PerlJam> now I've got to lookup what the problems with implementing it were last time we talked about this.

[14:59] <masak> :)

[15:00] <Util> PerlJam: I just arrived at the same thought; that the last paragraph implies my interpretation. Also, all the intervening text makes sense (as in "is coherent") if you read it as generic <foo>, and take all the extra stuff in each <foo...> example as being extra detail given to match the discussion in previous section.

[15:02] * Util is not awake enough to make that last missive more intelligible :(

[15:02] <PerlJam> Util: looked fine to me :)

[15:03] <Util> thx, and big thanks to you both for your help.

[15:03] <Util> I will have more bugs (of a different nature) later this morning.

[15:04] <masak> yay

[15:06] *** bluescreen joined
[15:06] *** cognominal joined
[15:10] <PerlJam> Looks like we talked about this subject (named regex outside of a grammar) on 2010-07-20: http://irclog.perlgeek.de/perl6/2010-07-20

[15:10] <PerlJam> I don't know if that was the last time though :)

[15:15] *** cafesofie joined
[15:16] <PerlJam> The answer to Pm-21/22 in https://github.com/perl6/mu/blob/master/misc/pm.txt seem to be the last state of everyone's thinking.

[15:17] <PerlJam> and NYI of course

[15:21] <Util> PerlJam: thanks!

[15:22] <masak> PerlJam++ # research

[15:26] *** felliott joined
[15:27] *** plobsing left
[15:29] *** justatheory joined
[15:32] <pmichaud> good morning, #perl6

[15:33] <takadonet> pmichaud: morning

[15:33] <masak> morning, pm

[15:35] <jnthn> morning, pmichaud 

[15:35] <phenny> jnthn: 07:07Z <sorear> tell jnthn Is 6model/dotnet or nqp-rx/nom the current state of the art in nomminess?

[15:36] <colomon> \o

[15:36] <jnthn> phenny: tell sorear the CLR one is a bit cleaner for understanding it. Only nqp-rx/nom knows the native types bit though.

[15:36] <phenny> jnthn: I'll pass that on when sorear is around.

[15:38] <pmichaud> note that the answer to Pm-21/22 are not only NYI, but also "not yet specced"

[15:38] <pmichaud> *answers

[15:43] *** wtw left
[15:43] *** plobsing joined
[15:47] *** bluescreen left
[15:49] *** bluescreen joined
[16:00] *** vmspb joined
[16:03] *** Chillance left
[16:03] *** Chillance joined
[16:09] *** kjeldahl joined
[16:14] *** Patterner left
[16:16] *** ash_ joined
[16:16] *** Psyche^ joined
[16:16] *** Psyche^ is now known as Patterner

[16:17] *** cjk101010 left
[16:17] *** risou joined
[16:18] <sorear> good * #perl6

[16:18] <phenny> sorear: 15:36Z <jnthn> tell sorear the CLR one is a bit cleaner for understanding it. Only nqp-rx/nom knows the native types bit though.

[16:20] <sorear> jnthn: thanks.

[16:24] <Util> pmichaud: thanks

[16:25] <Util> (unrelated)

[16:25] <Util> Strange example in S05: given $source_code { $parsetree = STD.parse($source_code) }

[16:25] <Util> Why use a given{...} block?

[16:26] <colomon> thinko

[16:26] <PerlJam> also, that code might have undergone modifications that left it in that state but was originally more complex

[16:27] <colomon> I... yeah, what PerlJam said.

[16:27] <colomon> or the standard switched and it was corrected without looking at it closely or something.

[16:27] <Util> Ah, I did not think to look at the Spec's history.

[16:31] <Util> `git show a8aa081` is the commit that did it.

[16:32] <colomon> what was it before?

[16:32] <Util> $parsetree = m:keepall/<Perl::prog>/;

[16:33] <Util> I will update the spec

[16:33] <pmichaud> Util++

[16:35] *** ash_ left
[16:37] <dalek> specs: 4c4b50f | util++ | S05-regex.pod:

[16:37] <dalek> specs: Remove block left-over from a8aa081e5acf4116026f20152fd50a8d78e7fd03

[16:37] <dalek> specs: review: https://github.com/perl6/specs/commit/4c4b50f304

[16:38] <sorear> jnthn: In a STable, how many of the fields are REPR-dependant?  Which are they?

[16:38] <sorear> hello pmichaud 

[16:39] <pmichaud> sorear: o/

[16:39] *** risou left
[16:41] *** bluescreen left
[16:43] *** kensanata left
[16:46] *** risou joined
[16:46] <sorear> rakudo: subset Even of Int where * %% 2; my Even $x; say $x.WHAT; say $x ~~ Int; say $x.^methods;

[16:46] <p6eval> rakudo d3e9a3:

[16:46] <p6eval> ..OUTPUT«Int()␤Bool::True␤perlpredsuccWHICHStrBridgeIntRatNumsignACCEPTSRealBoolComplexrealsisNaNabsexplnsqrtrootsfloorceilingtruncateroundcisunpolarrandsinasincosacostanatansecaseccosecacoseccotanacotansinhasinhcoshacoshtanhatanhsechasechcosechacosechcotanhacotanhatan2Numericloglog10to-rad…

[16:47] <sorear> rakudo: subset Even of Int where * %% 2; my Even $x; say $x; $x = Int; say $x

[16:47] <p6eval> rakudo d3e9a3: OUTPUT«Int()␤Int()␤»

[16:47] <sorear> rakudo: say Int %% 2;

[16:47] <p6eval> rakudo d3e9a3: OUTPUT«Bool::True␤»

[16:47] <sorear> rakudo: say Int !%% 2;

[16:47] <p6eval> rakudo d3e9a3: OUTPUT«===SORRY!===␤Infix !% is deprecated in favor of infix %% at line 22, near "% 2;"␤»

[16:47] <sorear> rakudo: say Int ![%%] 2;

[16:47] * masak submits rakudobug

[16:47] <p6eval> rakudo d3e9a3: OUTPUT«Bool::False␤»

[16:48] <masak> std: say Int !%% 2;

[16:48] <p6eval> std 625303c: OUTPUT«ok 00:01 120m␤»

[16:48] *** pmurias joined
[16:48] <sorear> rakudo: subset Odd of Int where * ![%%] 2; my Odd $x; say $x; $x = $x; say $x

[16:48] <p6eval> rakudo d3e9a3: OUTPUT«Int()␤Type check failed for assignment␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/fNWcjWwAcl␤»

[16:48] <sorear> Is this how it's supposed to work?

[16:49] <sorear> perl6: sub infix:<L+>($x,$y) { $x ~ $y }; my $z = 'f'; $z L+= 'g'; say $z; # masak, is this one known?

[16:49] <p6eval> niecza v2-1-gc6596ea: OUTPUT«fg␤»

[16:49] <p6eval> ..rakudo d3e9a3: OUTPUT«Null PMC access in invoke()␤  in main program body at line 1␤»

[16:49] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "L"␤    expecting operator␤    at /tmp/8nysncGppZ line 1, column 52␤»

[16:50] <masak> sorear: yes.

[16:50] <masak> sorear: it's an oldie-but-goodie.

[16:50] <masak> IIRC, use 'our' on the sub and it goes away.

[16:51] *** ashleydev left
[16:53] <pmurias> perl6: say 3 ![%%] 2

[16:53] <p6eval> rakudo d3e9a3: OUTPUT«Bool::True␤»

[16:53] <p6eval> ..niecza v2-1-gc6596ea: OUTPUT«Unhandled exception: Modulus calculation NYI␤  at /home/p6eval/niecza/lib/SAFE.setting line 377 (SAFE die @ 2)␤  at /home/p6eval/niecza/lib/SAFE.setting line 1003 (SAFE infix:<%> @ 2)␤  at /home/p6eval/niecza/lib/SAFE.setting line 983 (SAFE infix:<%%> @ 2)␤  at

[16:53] <p6eval> ../tmp/pewVv5Ji_r line…

[16:53] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "![%%]"␤    expecting operator, ":" or ","␤    at /tmp/K8eVkslczG line 1, column 7␤»

[16:54] <pmurias> rakduo: say 3 %% 2

[16:54] <[Coke]> why is the output frmo niecza in 2 sends there?

[16:54] <[Coke]> (why isn't it just a single send with another ␤ ?

[16:55] <pmurias> ?

[16:55] <pmurias> [Coke]: what do you mean?

[16:55] <pmichaud> yay, snow days!

[16:55] <pmurias> [Coke]: ah, i get it

[16:56] <masak> [Coke]: because it's so long.

[16:56] *** ashleydev joined
[16:56] <masak> it's broken off somewhere along the way.

[16:56] <pmurias> eval_bot should just nopaste errors

[16:56] <pmurias> * p6eval

[16:57] <[Coke]> pmichaud: I'm just glad it looks like we're not going to lose power this time. :P

[16:57] *** ashleyde1 joined
[16:57] <pmurias> niecza, pugs: see nopaste-url

[16:57] *** ashleyde1 left
[16:58] <[Coke]> ... wait, YOU have a snow day?

[16:58] *** ashleydev left
[16:58] <pmichaud> our second in a row

[16:58] <pmichaud> and there's a good possibility for a third tomorrow

[16:58] <pmichaud> we got hit by ice storms, and the temperature has yet to go above 20 degF, so the ice on the roads is just.... sitting there

[16:59] <pmichaud> the whole state of Texas is going through "rolling blackouts" because the utilities can't keep up with demand

[17:01] <takadonet> bah we never have snow days :(

[17:02] * sorear hasn't had any either :(

[17:03] <[Coke]> you're welcome to come shovel us out, you can have our snow day. :)

[17:06] <takadonet> [Coke]: see we do have lots of snow but we just have enough machines to clear it out

[17:09] *** abraxxa left
[17:10] <pmichaud> No machines here.  No road salt.  Just ice pellets all frozen together on the road surface, and a bunch of Priuses trying to maintain traction on it.  :-P

[17:11] <pmichaud> (no "snow tires" either, of course :)

[17:13] <arnsholt> My girlfriend is headed for Texas ATM. She'll be really unhappy if there's snow =)

[17:13] <pmichaud> That's further south -- it doesn't snow quite as often there.

[17:13] <arnsholt> Ah, right. Good for her then =)

[17:15] * sorear is still trying to figure out subsets- see above

[17:15] <pmichaud> oops, but it looks like it's forecasting snow there on Friday :-)

[17:17] <arnsholt> Fun, fun. Austin looks like it should miss it, but the temperature forecasts are a bit chilly

[17:19] <pmurias> sorear: what's the part you are figuring out?

[17:20] *** cafesofie left
[17:21] <tadzik> \o/

[17:21] <sorear> rakudo: subset Odd of Int where * ![%%] 2; my Odd $x; $x = $x

[17:21] <p6eval> rakudo d3e9a3: OUTPUT«Type check failed for assignment␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/2g5di8RELL␤»

[17:21] * tadzik is now on the 3rd semester, disregarding the two remaining exams

[17:21] <sorear> pmurias: stuff like that

[17:27] *** cdarroch joined
[17:27] *** cdarroch left
[17:27] *** cdarroch joined
[17:27] <sorear> phenny: tell jnthn thanks.

[17:27] <phenny> sorear: I'll pass that on when jnthn is around.

[17:28] <sorear> phenny: tell jnthn In a STable, how many and which of the fields are REPR-dependant?

[17:28] <phenny> sorear: I'll pass that on when jnthn is around.

[17:28] <sorear> phenny: tell jnthn How do subsets fit into the 6model type_check cache paradigm?

[17:28] <phenny> sorear: I'll pass that on when jnthn is around.

[17:31] *** lamstyle joined
[17:36] *** Tene left
[17:38] *** ash_ joined
[17:39] *** kjeldahl left
[17:41] <sorear> eeek!  nqp-rx/nom hardcodes "8" instead of "CHAR_BIT"

[17:42] *** Tene joined
[17:42] *** vmspb left
[17:42] *** risou_ joined
[17:43] *** risou left
[17:43] <sorear> phenny: tell jnthn At P6str.c line 128, why don't you mark the STRING?

[17:43] <phenny> sorear: I'll pass that on when jnthn is around.

[17:43] <dukeleto> magic constants!

[17:44] <sorear> I'm sure 9-bit chars will become fashionable again someday

[17:44] <sorear> Or perhaps 32

[17:46] *** vmspb joined
[17:46] <dukeleto> I am holding out for 36bit words

[17:50] *** vmspb left
[17:55] *** Trashlord joined
[17:55] <ash_> does IO let you access the file descriptor? 

[17:55] *** bluescreen joined
[17:55] <ash_> or am i going to have to dig into PIR to get to that? 

[17:57] <masak> likely.

[17:58] <perigrin> colomon++ # submitted a talk!

[18:00] *** pmurias left
[18:01] <colomon> perigrin: I was also unable to pay when I tried.  Clicking on the "credit card" link took me to an error page.

[18:01] <perigrin> *sigh*

[18:01] <perigrin> I'll talk with the ACT peopel

[18:01] <perigrin> er people

[18:02] <perigrin> colomon: your talk will probably be accepted so don't pay yet :)

[18:02] *** plobsing left
[18:03] <colomon> perigrin: yeah, I figured out after the fact that I shouldn't have been trying, but thought you'd want to know.

[18:04] *** dakkar left
[18:05] *** am0c joined
[18:05] <perigrin> colomon: thanks, mail sent to the ACT people

[18:16] <ash_> is there an unbuffered io object? 

[18:16] <ash_> and or a bare file descriptor object? 

[18:17] <sorear> Int, use POSIX:from<perl5>

[18:17] <ash_> eh, well not object but i hope you understand what i am asking

[18:18] <ash_> i am hoping to be able to do this with just parrot/rakudo (i'd like to just do it with rakudo to be honest though) 

[18:18] <ash_> i was going to see about writing a serial library, for opening serial ports (like the USB kind) 

[18:20] <ash_> ah, parrot's Handle object has get_fd, which will let me access the file descriptor directly

[18:20] <ash_> IO should let you get the fd as well, for ffi purposes 

[18:30] <sorear> phenny: tell jnthn How does the NQP 'native' type_declarator work?

[18:30] <phenny> sorear: I'll pass that on when jnthn is around. I'll have to use a pastebin, though, so your message may get lost.

[18:30] <sorear> agggh.

[18:30] <sorear> aloha: msg jnthn How does the NQP 'native' type_declarator work?

[18:30] <sorear> aloha: tell jnthn How does the NQP 'native' type_declarator work?

[18:32] <sorear> phenny is configured to use a pastebin that no longer exists, so "may" means "will"

[18:33] <ash_> can we fix phenny?

[18:35] *** plobsing joined
[18:43] *** risou_ left
[18:45] *** risou joined
[18:48] *** icwiener joined
[18:51] *** risou left
[18:51] *** risou joined
[18:53] *** ash_ left
[19:03] *** ashleydev joined
[19:05] *** ashleyde1 joined
[19:06] *** ashleyde1 left
[19:06] *** ashleydev left
[19:07] *** kjeldahl joined
[19:08] *** ashleydev joined
[19:08] *** ashleyde1 joined
[19:08] *** ashleyde1 left
[19:11] *** MayDaniel joined
[19:13] *** ab5tract joined
[19:13] *** cotto_work left
[19:16] *** am0c left
[19:20] *** kfo joined
[19:22] *** risou left
[19:23] *** kfo_ left
[19:28] *** vmspb joined
[19:29] *** cotto_work joined
[19:48] *** MayDaniel left
[19:48] *** pmurias joined
[19:50] *** pmurias left
[19:50] *** pmurias joined
[19:51] <pmurias> sorear: what's the hard part with that subset?

[19:52] <pmurias> ![%%] seems strange

[19:54] *** cafesofie joined
[19:55] <[Coke]> masak: is that %% ticket different from the existing %% ticket?

[19:56] <[particle]> potty mouth

[19:56] <masak> [Coke]: url?

[20:05] <dalek> tpfwiki: (Razan Abbass)++ | http://www.perlfoundation.org/perl6/index.cgi?first_post_in_ssd_weblog

[20:11] <dalek> tpfwiki: (Razan Abbass)++ | http://www.perlfoundation.org/perl6/index.cgi?first_post_in_ssd_weblog

[20:11] <dalek> tpfwiki: (Razan Abbass)++ | http://www.perlfoundation.org/perl6/index.cgi?navigation_for_ssd_weblog

[20:12] *** buubot joined
[20:13] <colomon> ![%%] seems insane, I'd say.

[20:13] <colomon> or at least, [%%] does.

[20:14] <colomon> rakudo: say [%%] 5, 4, 6, 3

[20:14] <p6eval> rakudo d3e9a3: OUTPUT«Bool::False␤»

[20:14] <colomon> rakudo: say [%%] 6, 3

[20:14] <p6eval> rakudo d3e9a3: OUTPUT«Bool::True␤»

[20:15] <colomon> rakudo: say [%%] 6, 3, 1

[20:15] <p6eval> rakudo d3e9a3: OUTPUT«Bool::True␤»

[20:15] <colomon> rakudo: say [%%] 6, 3, 2

[20:15] <p6eval> rakudo d3e9a3: OUTPUT«Bool::False␤»

[20:15] <masak> ![%%] just means !%%

[20:15] <masak> it's just a way of disambiguation.

[20:15] <masak> don't panic :)

[20:15] <colomon> ah

[20:16] <colomon> rakudo: say 5 ![%%] 2

[20:16] <p6eval> rakudo d3e9a3: OUTPUT«Bool::True␤»

[20:16] <colomon> rakudo: say 5 !%% 2

[20:16] <p6eval> rakudo d3e9a3: OUTPUT«===SORRY!===␤Infix !% is deprecated in favor of infix %% at line 22, near "% 2"␤»

[20:16] <[particle]> ELTMFAIL

[20:17] *** ab5tract left
[20:17] *** gottreu joined
[20:17] <masak> exactly.

[20:20] <pmichaud> std: say 5!%2;

[20:20] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Can't negate % because multiplicative operators are not iffy enough at /tmp/XMjHuV6Ugh line 1:␤------> [32msay 5!%[33m⏏[31m2;[0m␤Parse failed␤FAILED 00:01 120m␤»

[20:20] <[Coke]> masak: i haven't found the old one yet. :)

[20:20] <masak> searching RT is a fine art.

[20:20] <[Coke]> what's the syntax for looping over an array while still having access to the index if you need it?

[20:21] <pmichaud> for @array.kv -> $index, $value { ... }

[20:21] <[Coke]> danke.

[20:23] *** TSa joined
[20:24] <pmichaud> std:  say 5 !+ 2;

[20:24] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Can't negate + because additive operators are not iffy enough at /tmp/8gz0BTMnxe line 1:␤------> [32msay 5 !+[33m⏏[31m 2;[0m␤Parse failed␤FAILED 00:01 120m␤»

[20:24] *** coldhead joined
[20:26] <masak> "iffy" == "returning something that's either a boolean, or would be if it wasn't a more interesting value" :)

[20:27] <pmichaud> right

[20:27] <pmichaud> I'm just trying to add it to Rakudo to see what happens :)

[20:27] <colomon> pmichaud: are you fixing the !%% in the process?  

[20:27] <pmichaud> yes

[20:28] <pmichaud> since %% is iffy

[20:28] <colomon> then I will undo my local (rather brute force) changes.  ;)

[20:29] <pmichaud> let's see what happens :-)

[20:30] <pmichaud> http://gist.github.com/808367  # patch I'm currently testing, if anyone is interested :-)

[20:31] <colomon> so you're switching the specific !% error message to a generic "not iffy enough" one.

[20:31] *** fhelmberger left
[20:31] *** thepler left
[20:31] <pmichaud> I'm eliminating the specific !% token altogether.  STD.pm6 doesn't have one.

[20:32] <pmichaud> I'm generally following the way that STD handles it

[20:32] <colomon> very reasonable policy.

[20:32] *** coldhead left
[20:33] *** eternaleye joined
[20:35] *** vmspb left
[20:35] *** [sbp] left
[20:35] *** sbp- joined
[20:36] *** flatwhatson_ joined
[20:36] *** huf joined
[20:37] *** coldhead` joined
[20:37] *** coldhead` is now known as coldhead

[20:38] *** Grimnir_ joined
[20:39] *** Guest84197 joined
[20:39] <pmichaud> pmichaud@orange:~/rakudo$ ./perl6

[20:39] <pmichaud> > say 5 !%% 2;

[20:39] <pmichaud> Bool::True

[20:39] <pmichaud> > say 5 !+ 2;

[20:39] <pmichaud> Can't negate + because it is not iffy enough at line 1, near " 2;\n"

[20:39] <tadzik> pmichaud++

[20:39] <pmichaud> spectesting now

[20:40] *** coldhead left
[20:40] <tadzik> pmichaud: ooc, what are the chances for Rakudo using STD one day, like niecza does?

[20:40] <pmichaud> tadzik: I still expect STD and Rakudo's grammar to converge, more than it being "one or the other"

[20:40] <colomon> do we have a spectest for !%%   ?

[20:41] <pmichaud> colomon: ack doesn't reveal any

[20:41] <pmichaud> there are still some things that I think Rakudo's grammar handles slightly better than STD, although that's becoming less and less so thanks to niecza

[20:42] <pmichaud> but yes, someday I expect us to be using a very common grammar at some point in the not-to-distant future

[20:43] <colomon> huh.  there's a block of %% tests in S03-metaops.not.t.  Leftover from !%, perhaps?

[20:43] <pmichaud> it's even more likely to occur if/when we get roles into nqp

[20:44] <pmichaud> +1 for colomon++ to fix the tests :-)

[20:44] <colomon> crazily enough, there appear to be no other direct tests of %% -- all other incidences are using %% to test some other feature.

[20:44] <colomon> We should have done tests that day at YAPC::NA.  :)

[20:44] <pmichaud> I wonder if I should start using audreyt's approach   "You want this fixed?  Patch in a test first!"  :-P

[20:44] <colomon> I'll get to work on it.

[20:45] <pmichaud> or, as I think she said:  "I produce code in exchange for tests"

[20:45] <pmichaud> something like that

[20:45] <colomon> what do we call %%, anyway?  divisible-by.t ?

[20:46] <pmichaud> C<< infix:<%%> >>, is divisible by

[20:46] <pmichaud> (from S03)

[20:46] <colomon> is-divisible-by.t it is, then.

[20:49] *** eternaleye left
[20:49] *** icwiener left
[20:52] *** coldhead joined
[20:54] *** coldhead` joined
[20:56] <dalek> roast: 799b9e9 | (Solomon Foster)++ | S03- (2 files):

[20:56] <dalek> roast: Move infix:<%%> tests from S03-metaops/not.t to a new S03-operators/is-divisible-by.t.

[20:56] <dalek> roast: review: https://github.com/perl6/roast/commit/799b9e90b4

[20:56] <dalek> roast: 30833cd | (Solomon Foster)++ | S03-operators/is-divisible-by.t:

[20:56] <dalek> roast: Temporarily fudge file until pmichaud gets his infix::<!%%> patch merged in.

[20:56] <dalek> roast: review: https://github.com/perl6/roast/commit/30833cd77a

[20:56] *** bluescreen left
[20:56] *** coldhead left
[20:58] <colomon> done.

[20:58] * colomon is suspicious he's at least partially responsible for the previous sloppy test.

[21:00] <dalek> rakudo: 88fa70d | colomon++ | t/spectest.data:

[21:00] <dalek> rakudo: Add S03-operators/is-divisible-by.t.

[21:00] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/88fa70dea3

[21:03] *** coldhead` left
[21:06] *** Chillance left
[21:07] <pmichaud> almost finished with spectests

[21:08] <pmichaud> one failure in charset.t

[21:09] <pmichaud> ....which appears to be due to a nqp-rx string mismatch

[21:09] <pmichaud> so, committing.

[21:10] <pmichaud> pmichaud@orange:~/rakudo$ make t/spec/S03-operators/is-divisible-by.t 

[21:10] <pmichaud> All tests successful.

[21:11] <masak> \o/

[21:11] <colomon> did you unfudge it?  I wasn't able to run the !%% tests here (obviously).

[21:11] <pmichaud> colomon: did you update the plan in not.t?  plan says 36 tests but I think there's only 30.

[21:11] <colomon> pmichaud: good catch.

[21:11] <colomon> I'll fix it.

[21:12] <dalek> roast: 5a1dd86 | (Solomon Foster)++ | S03-metaops/not.t:

[21:12] <dalek> roast: Fix plan to reflect the moved tests.

[21:12] <dalek> roast: review: https://github.com/perl6/roast/commit/5a1dd86cb9

[21:16] <pmichaud> Resolved ticket :-)

[21:16] <colomon> pmichaud++

[21:16] <tadzik> 527 open tickets, a bit like Parrot :)

[21:17] <dalek> rakudo: 3851302 | pmichaud++ | / (2 files):

[21:17] <dalek> rakudo: Fix RT #83250, enabling !%% to work properly, removing the bogus !% panic, and eliminating the invalid cases of meta-negation on non-iffy infix operators.

[21:17] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/3851302622

[21:17] <dalek> rakudo: 2666b6f | pmichaud++ | /:

[21:17] <dalek> rakudo: Merge branch 'master' of github.com:rakudo/rakudo

[21:17] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/2666b6f2bf

[21:17] <colomon> probably resolved at least one other with the iffy fix, too, no?

[21:17] <pmichaud> if there was another, then yes.

[21:17] <[Coke]> tadzik: you have to count new+open

[21:17] <tadzik> ouch

[21:17] <masak> sorry... :P

[21:18] <pmichaud> I blame masakbug.

[21:18] <tadzik> rakudo: $_ = "test"; s/t/x/; .say;

[21:18] <p6eval> rakudo d3e9a3: OUTPUT«xest␤»

[21:18] <tadzik> http://rt.perl.org/rt3/Public/Bug/Display.html?id=62064 closable then, no?

[21:19] <pmichaud> tadzik: looks like yes to me, if we have spectests.

[21:19] <pmichaud> 832 tickets, it looks like

[21:19] <masak> we have tr/// ?

[21:19] <[Coke]> down from about 850 earlier in the week.

[21:19] <colomon> [Coke]++

[21:19] <pmichaud> [Coke]++ and tadzik++   # ticket wranglers

[21:19] <tadzik> dozens of them are opened, but fixed

[21:20] <[Coke]> tadzik: might be less than dozens, now, but I'm hopeful.

[21:20] <tadzik> I remember finding like 20 of them one afternoon, but had no one to close them, and didn't think about responding to them, shame on me

[21:21] <[Coke]> tadzik: you have privs now, yes?

[21:21] <tadzik> [Coke]: dunno, don't remember I must say

[21:21] <tadzik> I remember asking pmichaud about them

[21:22] <[Coke]> huh. new "mark spam" link on the toolbar.

[21:22] <[Coke]> (used to be you had to change the queue to spam manually)

[21:22] *** Tedd1 joined
[21:22] <tadzik> will investigate after my exams

[21:22] <tadzik> everything on my schedule is for "after my exams"

[21:25] <pmichaud> std:  my %v = q=>10;

[21:25] <p6eval> std 625303c: OUTPUT«ok 00:01 121m␤»

[21:26] <dalek> roast: fbe953c | (Solomon Foster)++ | S03-operators/is-divisible-by.t:

[21:26] <dalek> roast: Unfudge now that pmichaud++ has it working.

[21:26] <dalek> roast: review: https://github.com/perl6/roast/commit/fbe953cd24

[21:28] <moritz_> rakudo: say 1/6 * [+] 0..5

[21:28] <p6eval> rakudo d3e9a3: OUTPUT«2.5␤»

[21:31] *** bluescreen joined
[21:31] *** bluescreen left
[21:31] <moritz_> rakudo: say 1/6 [+] (0..5 X- 2.5) X** 2

[21:32] <p6eval> rakudo d3e9a3: OUTPUT«38.0277777777778␤»

[21:35] *** Lando-SpacePimp joined
[21:35] <colomon> huh

[21:35] <colomon> ?

[21:35] <colomon> rakudo: say (1/6 [+] (0..5 X- 2.5) X** 2).perl

[21:35] <p6eval> rakudo d3e9a3: OUTPUT«(1369/36)␤»

[21:36] <moritz_> context: mean and variance for http://www.perlmonks.org/?node_id=885823

[21:36] <colomon> but how is 1/6 [+] (list) not two terms in a row?

[21:36] <colomon> std: say 1/6 [+] (0..5 X- 2.5) X** 2

[21:36] <moritz_> a growth model where each member of the population spawns between 0 and 5 children (uniform distribution)

[21:36] <p6eval> std 625303c: OUTPUT«ok 00:01 120m␤»

[21:37] <moritz_> rakudo: say 1/6 *  [+] (0..5 X- 2.5) X** 2

[21:37] <p6eval> rakudo d3e9a3: OUTPUT«2.91666666666667␤»

[21:37] <moritz_> much saner :-)

[21:37] <moritz_> rakudo: say (1/6 *  [+] (0..5 X- 2.5) X** 2).perl

[21:37] <p6eval> rakudo d3e9a3: OUTPUT«35/12␤»

[21:37] <pmichaud> std:  say (1/6) [+] (0..5 X- 2.5) X** 2

[21:37] * moritz_ doesn't know how it's parsed

[21:37] <p6eval> std 625303c: OUTPUT«ok 00:01 121m␤»

[21:37] <moritz_> oh

[21:37] <moritz_> OH

[21:38] <pmichaud> that's indeeded a bit weird.  I'm guessing it's the operator [] instead of the reduction []

[21:38] <moritz_> it's jsut infix<+>

[21:38] <pmichaud> right

[21:38] <colomon> ah.

[21:38] <moritz_> rakudo: say 1 [+] 3

[21:38] <p6eval> rakudo d3e9a3: OUTPUT«4␤»

[21:38] <pmichaud> [+] in infix position is same as +

[21:38] <moritz_> rakudo: say 1 [[[+]]] 5

[21:38] <colomon> but isn't it a list on the RHS?

[21:38] <p6eval> rakudo d3e9a3: OUTPUT«6␤»

[21:38] <colomon> rakudo: say 1 + (2, 3)

[21:38] <moritz_> colomon: yep. In numeric context

[21:38] <p6eval> rakudo d3e9a3: OUTPUT«3␤»

[21:38] <colomon> ah.  right.

[21:38] <moritz_> colomon++ # spotting bug in my code

[21:38] *** MayDaniel joined
[21:39] *** buubot left
[21:41] <pmichaud> do we have tests for <time> and <now>?  I'm thinking RT #77904 can be closed

[21:41] <pmichaud> rakudo: say now

[21:41] <p6eval> rakudo d3e9a3: OUTPUT«Instant:2011-02-02T21:41:41.700150Z␤»

[21:42] <pmichaud> I thought there was a 'needtests' status or something?

[21:42] * pmichaud looks

[21:42] *** Lando-SpacePimp left
[21:43] <pmichaud> found it

[21:44] <pmichaud> time for a break

[21:46] <[Coke]> I called it testneeded to match the existing test*

[21:47] *** TSa left
[21:49] <pmurias> sorear: is niecza powerfull enough for writing a moderatly complex gui app (a behaviour trees editor)?

[21:49] *** MayDaniel left
[21:50] * moritz_ would be surprised if it weren't

[21:51] <masak> pmurias: how will you do the GUI bindings?

[21:52] <pmurias> that's the hard part

[21:53] <pmurias> that is the one thing turing completness isn't enough for

[21:54] <pmurias> masak: the best option would be to have the work magically

[21:55] <pmurias> as hand binding stuff is annoying and doesn't give a better binding if it's not a C library

[21:56] *** plobsing left
[21:57] <masak> I'm all for things working magically.

[21:59] <pmurias> but it's possible to call C# stuff by some thing to embed niecza IR (NAM) 

[22:00] *** dukeleto left
[22:00] <moritz_> I've now created http://rakudo.de/testneeded and http://rakudo.de/testcommitted as redirects the corresponding RT queries

[22:01] <moritz_> and 'needstest' and 'hastest' as aliases

[22:01] *** dukeleto joined
[22:01] <masak> moritz_++

[22:05] *** dukeleto left
[22:06] *** dukeleto joined
[22:06] <Tene> For any vim users, I just discovered and rather like http://code.google.com/p/conque/wiki/Usage

[22:07] *** kjeldahl left
[22:07] <Tene> seems like a nice way to embed a terminal in a vim window, and I've had a few nice uses of sending Perl 6 code to a repl from a buffer.

[22:16] *** ab5tract joined
[22:16] *** sjohnson left
[22:19] <jnthn> phenny: tell sorear answers in https://gist.github.com/808572

[22:19] <phenny> jnthn: I'll pass that on when sorear is around.

[22:19] <phenny> jnthn: 17:27Z <sorear> tell jnthn thanks.

[22:19] <phenny> jnthn: 17:28Z <sorear> tell jnthn In a STable, how many and which of the fields are REPR-dependant?

[22:19] <phenny> jnthn: 17:28Z <sorear> tell jnthn How do subsets fit into the 6model type_check cache paradigm?

[22:19] <phenny> jnthn: 17:43Z <sorear> tell jnthn At P6str.c line 128, why don't you mark the STRING?

[22:19] <phenny> [Sorry, some messages were elided and lost...]

[22:19] <arnsholt> Tene: That -does- seem useful

[22:19] <jnthn> phenny: :P

[22:21] <jnthn> pmichaud++ # fixing bugs \o/

[22:21] * jnthn is muchly distracted by $teaching this week :)

[22:21] <jnthn> 2 more days, then normal life/hacking resumes. ;)

[22:22] <Tene> arnsholt: I'm also trying to get in the habit of using surround.vim

[22:22] <Tene> jnthn: what are you teaching?

[22:23] <jnthn> Tene: Some .Net crap

[22:23] <jnthn> Tene: Well, some of it's good too :)

[22:24] *** Lando-SpacePimp joined
[22:24] *** sjohnson joined
[22:24] <jnthn> It's a web dev course. It's nice that at least one of the people in the class actually thinks about usability issues along the way. :)

[22:24] <Tene> Nice.

[22:24] <jnthn> Yeah, the students are a very nice bunch. :)

[22:24] <jnthn> Makes it much more fun that way.

[22:24] <Tene> I'm starting to miss teaching a bit.

[22:25] <jnthn> You don't do it so much these days?

[22:25] <Tene> No, I've been full-time sysadmin for about a year.

[22:25] <jnthn> I couldn't cope with doing it every week, but it's nice to do.

[22:25] <jnthn> Aww.

[22:25] <Tene> Yeah, previous job was a bit too much.  I was teaching linux sysadmin classes almost every week.

[22:25] <Tene> Lots of travel.

[22:26] <Tene> Lots of fun, but was getting tiring after 2.5 years.

[22:26] <jnthn> *nod8

[22:26] <jnthn> I tend to teach about one class a month, roughly.

[22:27] <jnthn> Normally locally, but they sent me up to Stockholm for this one. :)

[22:27] <masak> oh dear, I think I've gotten used to Mu.

[22:28] <jnthn> oh no, you accidentally Mu in Java instead of Object? ;)

[22:28] <masak> not that used to it.

[22:28] <jnthn> :)

[22:29] <masak> I'm reading https://github.com/perl6/mu/blob/master/misc/pm.txt , a very nice read.

[22:29] <masak> in Ml-1, the reply had a few "Object"s in it. I found myself thinking "heh, that's old... that should be Mu..."

[22:33] *** takadonet joined
[22:35] *** eternaleye joined
[22:37] *** kaare_ left
[22:37] *** Mowah left
[22:38] *** cosimo joined
[22:46] *** coldhead joined
[23:00] *** rgrau joined
[23:02] <masak> I complained yesterday about the lack of good error reporting for multis.

[23:03] <masak> there's a cute workaround that's worth knowing about.

[23:03] <masak> define a most-general multi and have it give a good error :)

[23:03] <jnthn> masak: Huh? Multi errors are quite informative these days, no?

[23:04] <masak> jnthn: yes, they are.

[23:05] <masak> they're just missing one essential part: what you passed in. :/

[23:05] <masak> jnthn: but don't worry, the awesome vaporware state machine binder will solve that ;)

[23:05] * masak haz plans

[23:06] <jnthn> uh-oh :)

[23:07] <jnthn> sleep &

[23:07] <masak> oh, and I did my first C<(for ... { ... }) // ...> yesterday. pretty neat.

[23:14] *** jferrero joined
[23:18] *** felliott left
[23:21] *** flatwhatson joined
[23:21] *** felliott joined
[23:24] *** jferrero left
[23:27] *** felliott left
[23:29] *** pmurias left
[23:29] *** felliott joined
[23:34] *** felliott left
[23:37] *** jferrero joined
[23:39] *** molaf_ left
[23:41] *** hudnix left
[23:41] * masak reads the reply to Pm-18 with widening eyes

[23:42] *** hudnix joined
[23:43] *** hudnix left
[23:44] *** hudnix joined
[23:44] *** hudnix left
[23:45] *** hudnix joined
[23:45] <masak> rakudo: (say "Found $_!" if $_ %% 10 for 7..12) or say "Aww"

[23:45] <p6eval> rakudo 2666b6: OUTPUT«Found 10!␤»

[23:45] *** mikehh joined
[23:45] <masak> rakudo: (say "Found $_!" if $_ %% 10 for 11..12) or say "Aww"

[23:45] <p6eval> rakudo 2666b6: OUTPUT«Aww␤»

[23:45] <masak> rakudo: (say "Found $_!" if $_ %% 10 for 11..12) // say "Aww"

[23:45] <p6eval> rakudo 2666b6:  ( no output )

[23:45] <masak> hm. so it really is 'or' there, and not '//' ?

[23:46] * masak looks in S04

[23:46] *** colomon left
[23:46] *** Lando-SpacePimp left
[23:49] *** cafesofie left
[23:50] *** felliott joined
[23:52] <masak> I can't find the place I'm looking for, but I guess it should be 'or', since an empty Seq isn't undefined.

[23:53] *** whiteknight joined
[23:54] *** alester joined
[23:57] *** colomon joined
[23:57] <colomon> n

[23:57] <masak> nn

[23:58] <colomon> whoever thought it was a good idea to shift focus from the "enter password" window to the normal irc window in the middle of initialization needs a lesson in UI design.

[23:59] <masak> most UIs suck. film at eleven.

