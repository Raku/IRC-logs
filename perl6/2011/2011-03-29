[00:00] <sjn> rakudo: say (1..6).roll(10).sort.reverse

[00:00] <p6eval> rakudo 405afa: OUTPUT«6543322221␤»

[00:00] <sjn> much better

[00:00] *** kfo left
[00:01] <sjn> although the bench-scripts/dice.pl example uses the sort(-*) way

[00:03] * sjn is still a n00b :-P

[00:09] <sorear> * probably shouldn't be treated similarly to *-containing expressions because of the extensionality problem

[00:10] <sorear> a lot of operators (.. comes to mind) want to treat * very differently from { $^a }

[00:10] <sorear> making (*) irregular is the least bad known way

[00:11] *** Vlavv_ left
[00:13] <sorear> TimToady: in the long run, should 'v5' be using Perl 6 grammars or LALR(1) with lexer feedback?

[00:16] *** ymasory_ joined
[00:23] *** ymasory_ left
[00:27] *** Rotwang left
[00:27] *** Vlavv joined
[00:31] *** whiteknight left
[00:39] *** DarthGandalf joined
[00:40] *** ponbiki left
[00:42] *** ponbiki joined
[00:43] *** awwaiid joined
[00:50] *** Holy_Cow joined
[00:50] *** Holy_Cow left
[01:00] *** noganex_ joined
[01:04] *** noganex left
[01:07] *** [Coke] left
[01:07] *** ponbiki left
[01:12] *** ponbiki joined
[01:14] *** DarthGandalf left
[01:20] <colomon> rakudo: my @b := 1, 0, 0, 2, 2, 1, 0, 1, 1, 2, 1 ... *;  say @b[^4]

[01:21] <p6eval> rakudo 405afa: OUTPUT«1002␤»

[01:21] *** DarthGandalf joined
[01:22] <colomon> huh.  why isn't that exact same line working in my code?

[01:23] <colomon> errr, because I'd hopelessly messed up the parser ahead of that point, it appears.

[01:24] <TimToady> sorear: by which you mean, a sane parser, or an insane parser?  :)

[01:24] <colomon> doh!

[01:25] * colomon was running his code through p5 instead of p6.  sigh.

[01:25] <TimToady> heh

[01:25] <TimToady> rakudo: sub foo([*@x]) { say @x.shift }; my @kay := 1... *; say ~@kay[^4]; foo(@kay); say ~@kay[^4];

[01:25] <p6eval> rakudo 405afa: OUTPUT«(timeout)»

[01:25] <TimToady> there's a bug

[01:26] <TimToady> rakudo: sub foo([*@x],[*) { say @x.shift }; my @kay := 1... *; say ~@kay[^4]; foo(@kay); say ~@kay[^4];

[01:26] <p6eval> rakudo 405afa: OUTPUT«===SORRY!===␤Malformed parameter at line 22, near "*) { say @"␤»

[01:26] <TimToady> rakudo: sub foo([*@x],[*@y]) { say @x.shif, @y.shiftt }; my @kay := 1... *; say ~@kay[^4]; foo(@kay, @kay); say ~@kay[^4];

[01:26] <p6eval> rakudo 405afa: OUTPUT«(timeout)»

[01:26] <TimToady> that should be how you do more than one

[01:27] <TimToady> er, only with the shift methods spelt righer

[01:27] <TimToady> *t

[01:27] <TimToady> somehing is obviously wrong with my tt key

[01:43] *** am0c joined
[01:44] *** Eevee joined
[02:01] *** icwiener left
[02:20] *** UAAGA3J joined
[02:22] *** silug joined
[02:25] *** benabik joined
[02:30] <sorear> TimToady: p5 bug-compatibility will ensure that both of them are insane

[02:30] <sorear> TimToady: I just think that a naturally insane parser might turn out to be saner than trying to emulate an insane parser

[02:32] *** rdesfo joined
[02:33] <rdesfo> I was trying out the perl6-examples at github (

[02:35] <rdesfo> https://github.com/eric256/perl6-examples/tree/master/games)

[02:35] <rdesfo> and I get the following error:

[02:35] <rdesfo> $ perl6 connect4.p6

[02:35] <rdesfo> ===SORRY!===

[02:35] <rdesfo> Unable to parse blockoid, couldn't find final '}' at line 23

[02:38] <sorear> "eric256" eh.  it's nice to see people outside the cabal hacking p6.

[02:39] <sorear> this is rather old code then

[02:39] <sorear> my $user_input = =$*IN; has been invalid for longer than I've been here

[02:39] <sorear> I think it's spelled $*IN.get now

[02:40] <rdesfo> ok I'll try that

[02:40] <sorear> there are other problems

[02:41] <rdesfo>  my $user_input $*IN.get; # changed from $*IN

[02:41] <rdesfo> right?

[02:45] <diakopter> 0x2c4e

[03:00] *** [hudnix] joined
[03:02] *** larsen_ joined
[03:06] *** am0c left
[03:06] *** woldrich left
[03:06] *** xinming_ left
[03:06] *** alester left
[03:06] *** TiMBuS left
[03:06] *** tadzik left
[03:06] *** amkrankruleuen left
[03:06] *** PZt left
[03:06] *** Bucciarati left
[03:06] *** renormalist left
[03:06] *** knewt2 left
[03:06] *** baest left
[03:06] *** Brandon_W_ATS left
[03:06] *** mdxi_ left
[03:06] *** apejens left
[03:06] *** ribasushi left
[03:06] *** IRSeekBot left
[03:06] *** kolibrie left
[03:06] *** arlinius left
[03:06] *** mux left
[03:06] *** patch_ left
[03:06] *** aloha left
[03:06] *** barika left
[03:06] *** rokoteko left
[03:06] *** benabik left
[03:06] *** f00li5h left
[03:06] *** mberends left
[03:06] *** [particle] left
[03:06] *** felher left
[03:06] *** starcoder left
[03:06] *** sunnavy left
[03:06] *** skangas left
[03:06] *** aesop left
[03:06] *** quotemstr left
[03:06] *** frodwith left
[03:06] *** DarthGandalf left
[03:06] *** plobsing left
[03:06] *** prammer left
[03:06] *** nadim left
[03:06] *** Grrrr left
[03:06] *** betterworld left
[03:06] *** jnthn left
[03:06] *** ponbiki left
[03:06] *** noganex_ left
[03:06] *** orafu left
[03:06] *** rdesfo left
[03:06] *** ingy left
[03:06] *** cognominal left
[03:06] *** jevin left
[03:06] *** jedai left
[03:06] *** HarryS left
[03:06] *** huf left
[03:06] *** spq left
[03:06] *** s1n left
[03:06] *** TimToady left
[03:06] *** itz left
[03:06] *** frettled_ left
[03:06] *** PerlJam left
[03:06] *** ascent_ left
[03:06] *** PacoLinux left
[03:06] *** cotto left
[03:06] *** flatwhatson_ left
[03:06] *** hudnix left
[03:06] *** Juerd left
[03:06] *** literal left
[03:06] *** perplexa left
[03:06] *** nymacro left
[03:06] *** ashleydev left
[03:06] *** Lorn left
[03:06] *** hatseflats left
[03:06] *** mathw left
[03:06] *** cbk_ left
[03:06] *** Helios` left
[03:06] *** ronoreck left
[03:06] *** sjn left
[03:06] *** c1sung left
[03:06] *** meteorjay left
[03:06] *** awwaiid left
[03:06] *** cosimo left
[03:06] *** araujo left
[03:06] *** stepnem left
[03:06] *** pothos left
[03:06] *** gfldex left
[03:06] *** pjcj left
[03:06] *** Vlavv left
[03:06] *** saaki left
[03:06] *** jimmy1980 left
[03:06] *** Trashlord left
[03:06] *** Sarten-X left
[03:06] *** charsbar_ left
[03:06] *** cxreg left
[03:06] *** ggoebel left
[03:06] *** edenc left
[03:06] *** dukeleto left
[03:06] *** kfo_ left
[03:06] *** flussence left
[03:06] *** twinshadow left
[03:06] *** phenny left
[03:06] *** nsh left
[03:09] *** aindilis joined
[03:12] *** cotto joined
[03:14] *** PacoLinux joined
[03:14] *** tomaw joined
[03:14] *** DarthGandalf joined
[03:14] *** plobsing joined
[03:14] *** prammer joined
[03:14] *** nadim joined
[03:14] *** meraxes joined
[03:14] *** szabgab joined
[03:14] *** jjore joined
[03:14] *** slavik1 joined
[03:14] *** Grrrr joined
[03:14] *** betterworld joined
[03:14] *** jnthn joined
[03:14] *** __sri joined
[03:14] *** jpr5 joined
[03:14] *** am0c joined
[03:18] *** nrr joined
[03:18] *** sftp joined
[03:18] *** [sbp] joined
[03:18] *** awwaiid joined
[03:18] *** cosimo joined
[03:18] *** araujo joined
[03:18] *** stepnem joined
[03:18] *** pothos joined
[03:18] *** gfldex joined
[03:18] *** pjcj joined
[03:18] *** flatwhatson_ joined
[03:18] *** jimmy1980 joined
[03:18] *** rdesfo joined
[03:18] *** UAAGA3J joined
[03:18] *** ponbiki joined
[03:18] *** noganex_ joined
[03:18] *** orafu joined
[03:18] *** itz joined
[03:18] *** ingy joined
[03:18] *** cognominal joined
[03:18] *** jevin joined
[03:18] *** jedai joined
[03:18] *** HarryS joined
[03:18] *** huf joined
[03:18] *** spq joined
[03:18] *** s1n joined
[03:18] *** TimToady joined
[03:18] *** shortcircuit joined
[03:18] *** arnsholt joined
[03:18] *** avuserow joined
[03:18] *** krunen joined
[03:19] *** Vlavv joined
[03:19] *** saaki joined
[03:19] *** Trashlord joined
[03:19] *** Sarten-X joined
[03:19] *** charsbar_ joined
[03:19] *** cxreg joined
[03:19] *** ggoebel joined
[03:19] *** edenc joined
[03:19] *** dukeleto joined
[03:19] *** mkramer1 joined
[03:19] *** tty234 joined
[03:19] *** Khisanth joined
[03:19] *** jasonmay joined
[03:19] *** rblackwe_ joined
[03:19] *** hillu joined
[03:19] *** Tene joined
[03:19] *** cotto_work joined
[03:19] *** jrockway joined
[03:19] *** WAAGL8K joined
[03:19] *** jimmy1980 left
[03:19] *** nymacro joined
[03:19] *** ashleydev joined
[03:19] *** sjn joined
[03:19] *** Lorn joined
[03:19] *** hatseflats joined
[03:19] *** mathw joined
[03:19] *** cbk_ joined
[03:19] *** Helios` joined
[03:19] *** ronoreck joined
[03:19] *** spinclad joined
[03:19] *** c1sung joined
[03:19] *** meteorjay joined
[03:19] *** _ilbot joined
[03:19] *** revdiablo joined
[03:19] *** moritz_ joined
[03:19] *** clkao joined
[03:19] *** zb joined
[03:19] *** arlinius joined
[03:19] *** mux joined
[03:19] *** patch_ joined
[03:19] *** aloha joined
[03:19] *** barika joined
[03:19] *** rokoteko joined
[03:19] *** HarryS left
[03:20] *** HarryS joined
[03:20] *** Juerd joined
[03:20] *** woldrich joined
[03:20] *** xinming_ joined
[03:20] *** alester joined
[03:20] *** TiMBuS joined
[03:20] *** tadzik joined
[03:20] *** amkrankruleuen joined
[03:20] *** PZt joined
[03:20] *** Bucciarati joined
[03:20] *** renormalist joined
[03:20] *** knewt2 joined
[03:20] *** baest joined
[03:20] *** Brandon_W_ATS joined
[03:20] *** mdxi_ joined
[03:20] *** apejens joined
[03:20] *** ribasushi joined
[03:20] *** IRSeekBot joined
[03:20] *** kolibrie joined
[03:20] *** chitragupt joined
[03:20] *** zamolxes joined
[03:20] *** frettled_ joined
[03:20] *** PerlJam joined
[03:20] *** ascent_ joined
[03:20] *** benabik joined
[03:20] *** felher joined
[03:20] *** f00li5h joined
[03:20] *** mberends joined
[03:20] *** [particle] joined
[03:20] *** starcoder joined
[03:20] *** sunnavy joined
[03:20] *** quotemstr joined
[03:20] *** skangas joined
[03:20] *** aesop joined
[03:20] *** BinGOs joined
[03:20] *** Raynes joined
[03:20] *** frodwith joined
[03:20] *** kfo_ joined
[03:20] *** flussence joined
[03:20] *** twinshadow joined
[03:20] *** phenny joined
[03:20] *** nsh joined
[03:20] *** shabble joined
[03:20] *** rhr joined
[03:20] *** jerome joined
[03:20] *** LoRe joined
[03:20] *** perigrin joined
[03:20] *** cschimm1_ joined
[03:20] *** yahooooo joined
[03:20] *** llabthgie joined
[03:20] *** frooh joined
[03:20] *** jimmy1980 joined
[03:20] *** jimmy1980 left
[03:20] *** jimmy1980 joined
[03:26] *** Gothmog_ joined
[03:26] *** literal joined
[03:26] *** perplexa joined
[03:26] *** perplexa is now known as Guest34727

[03:29] *** sftp left
[03:42] *** izydor joined
[03:43] <sorear> rdesfo: you need an = in there.

[03:48] *** jaldhar left
[03:49] *** jaldhar joined
[03:55] <rdesfo> sorear: thanks

[03:59] *** GinoMan joined
[04:02] *** ponbiki left
[04:02] *** jevin left
[04:03] *** ponbiki joined
[04:03] *** jevin joined
[04:04] *** cbk_ left
[04:11] *** eternaleye left
[04:11] *** eternaleye joined
[04:20] *** mberends left
[04:20] *** woosley joined
[04:21] *** mberends joined
[04:23] *** rdesfo left
[04:29] *** cspencer joined
[04:29] <cspencer> rakudo: my $x; say $x++ for 1..10;

[04:29] <p6eval> rakudo 405afa: OUTPUT«Any()␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[04:31] <TimToady> which is incorrect by spec

[04:31] <cspencer> yes, i was just checking that on the latest build

[04:31] <cspencer> shall i file a bug report?

[04:32] <TimToady> S03:546

[04:32] <TimToady> (for any onlookers)

[04:34] <TimToady> sure, file away

[04:36] <sorear> niecza: my $x; say $x++ for 1..10;

[04:36] <p6eval> niecza v4: OUTPUT«Any()␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[04:37] <sorear> hmm I thought I fixed that

[04:43] *** alester left
[04:51] *** baest left
[04:56] *** baest joined
[05:00] <woosley> pugs: my $x; say $x++ for 1..10;

[05:00] <p6eval> pugs: OUTPUT«0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[05:02] *** cspencer left
[05:07] *** GinoMan left
[05:17] *** birdwindupbird joined
[05:19] *** GinoMan joined
[05:26] *** _dev0_ joined
[05:29] *** snarkyboojum joined
[05:31] *** kaare_ joined
[05:33] *** mberends left
[05:48] *** izydor left
[05:57] *** wtw joined
[06:04] *** donri joined
[06:37] <diakopter> pugs: say my $x++ for 1..6

[06:37] <p6eval> pugs: OUTPUT«0␤1␤2␤3␤4␤5␤»

[06:37] <diakopter> rakudo: say my $x++ for 1..6

[06:37] <p6eval> rakudo 405afa: OUTPUT«Could not find sub &for␤  in main program body at line 22:/tmp/78cPQsUwI1␤»

[06:38] <diakopter> std: say my $x++ for 1..6

[06:38] <p6eval> std 4608239: OUTPUT«ok 00:01 121m␤»

[06:38] <diakopter> niecza: say my $x++ for 1..6

[06:38] <p6eval> niecza v4: OUTPUT«Any()␤1␤2␤3␤4␤5␤»

[06:38] <diakopter> (winning)

[06:39] <diakopter> niecza: say $_++ for 1..10

[06:39] <p6eval> niecza v4: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[06:39] <diakopter> niecza: say ++$_ for 1..10

[06:39] <p6eval> niecza v4: OUTPUT«2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤»

[06:48] <moritz_> rakudo: say ++$_ for 1..10

[06:48] <p6eval> rakudo 405afa: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in <anon> at line 22:/tmp/qlI5S7Gree␤  in main program body at line 1␤»

[06:48] * moritz_ thinks this is a bug

[06:49] <moritz_> and it doesn't seem right that niecza starts at 2 either

[06:49] <TiMBuS> .. why not?

[06:49] <TimToady> 1+1 == 2

[06:50] <TimToady> $_ starts at 1, and ++ adds 1

[06:50] *** cosimo left
[06:52] <TiMBuS> TimToady! How is @a[1..*] supposed to work?

[06:54] *** chin_up joined
[06:55] <TiMBuS> I've asked a few times but no one seems to know

[06:58] <TiMBuS> i have missed him again :( toads are very slippery

[06:59] <moritz_> doesn't it start at Any?

[06:59] <moritz_> and Any 

[06:59] <moritz_> +1 == 1

[06:59] <TimToady> for sets $_

[06:59] <TiMBuS> for 1..10

[06:59] <moritz_> ah

[06:59] <moritz_> ouch

[07:00] <TimToady> TiMBuS: subscripts are supposed to know when they have a range that runs off the end, and truncate it

[07:01] <TiMBuS> oh. ooooohhhh. yeaaah its coming back to me now

[07:01] <TimToady> that implies some API to an iterator that can peek at the next bit to see if that's the case

[07:01] <TiMBuS> but we cant do that because assigning to a slice

[07:02] <TimToady> s/because/when/

[07:02] <TimToady> we know lvalues from rvalues, I hope

[07:02] * TiMBuS looks at hands, traces thumb and forefinger

[07:03] <TiMBuS> yes

[07:03] <TiMBuS> but i have no idea how we do it in code

[07:05] * TimToady ought to go to bed now, since it's now tomorrow in California...

[07:06] <TimToady> and tomorrow I have to go to SF in the morning to get a Brazilian visa...

[07:06] <TimToady> so zzz &

[07:06] <TiMBuS> night

[07:17] *** bacek joined
[07:20] *** mtk left
[07:28] *** mtk joined
[07:40] *** JimmyZ joined
[07:44] <TiMBuS> does --target=past no longer work for rakudo?

[07:49] <moritz_> don't try to mix --target with -e

[07:49] <TiMBuS> oh..

[07:51] *** am0c left
[07:52] *** felipe joined
[07:52] *** am0c joined
[08:03] *** awoodland joined
[08:05] *** domidumont joined
[08:12] <felher> Can someone explain to me why "subset MStr of Str where { /abc/ }" is not the same as "subset MStr of Str where { $_ ~~ /abc/ }", please? Thought /abc/ matches against $_, unless further specified.

[08:12] *** Alias joined
[08:19] <felher> and btw: subset-types are just so neat! :D

[08:28] *** donri left
[08:29] *** donri joined
[08:30] <moritz_> felher: /.../ only matches against $_ under certain conditions. Use m/.../ if you want it to always match against $_

[08:30] <moritz_> felher: or just write  subst MStr of Str where /abc/;

[08:30] <moritz_> rakudo: my $x = /foo/; say $x.WHAT

[08:30] <p6eval> rakudo 405afa: OUTPUT«Regex()␤»

[08:31] <moritz_> rakudo: $_='foo'; my $x = m/foo/; say $x.WHAT

[08:31] <p6eval> rakudo 405afa: OUTPUT«Match()␤»

[08:31] <moritz_> rakudo: $_='foo'; my $x = _ /foo/; say $x.WHAT

[08:31] <p6eval> rakudo 405afa: OUTPUT«Could not find sub &_␤  in main program body at line 22:/tmp/bUUVtNInLV␤»

[08:31] <moritz_> rakudo: $_='foo'; my $x = ? /foo/; say $x.WHAT

[08:31] <p6eval> rakudo 405afa: OUTPUT«Method 'match' not found for invocant of class ''␤  in 'Regex::Bool' at line 6295:CORE.setting␤  in 'prefix:<?>' at line 490:CORE.setting␤  in main program body at line 22:/tmp/FcRm9_1p5L␤»

[08:31] <moritz_> huh.

[08:33] <felher> Ah, k, moritz_, thnx! 

[08:34] <moritz_> http://dev-tricks.net/pipe-infix-syntax-for-python feeds for python

[08:36] *** chin_up left
[08:38] <moritz_> sorear++ # niecza v4, probably the Most Awesome niecza release ever!

[08:39] *** nymacro left
[08:40] *** dakkar joined
[08:45] *** nymacro joined
[08:46] *** JimmyZ left
[08:48] *** Gothmog_ left
[08:49] *** Gothmog_ joined
[08:52] *** awoodland left
[08:53] <moritz_> wow, we seem to have quite many gsoc students concentrating on a few ideas

[08:54] <moritz_> that hasn't happened before :/

[09:03] *** am0c left
[09:06] *** chin_up joined
[09:07] <moritz_> http://jpwhiting.blogspot.com/2011/03/qtzeitgeist-070-released.html "Today we released version 0.7.0 of libqzeitgeist aka QtZeitgeist (the first release with a tarball) It's basically the same as 0.1.0 but with a new version, some minor fixes, and a license file."

[09:08] <moritz_> just another demonstration of the silliness of classical version numbers

[09:09] *** pmurias joined
[09:24] <tadzik> good morning zebraland

[09:24] <moritz_> good morning tadzik 

[09:24] <moritz_> you've got competition regarding the POD GSOC proposal

[09:25] <tadzik> oh?

[09:25] <moritz_> see parrot-dev

[09:25] <moritz_> https://docs.google.com/document/pub?id=1JRw-lgO6Qw1GEnVM9YamB31FFMS4nfTJQXGi10YIBaE

[09:26] <moritz_> seen joseph_

[09:26] <aloha> joseph_ was last seen in #perl6 2 days 16 hours ago joining the channel.

[09:26] <tadzik> well, that's parrot-dev, is that the same task?

[09:27] <moritz_> it says "Implement an S26 documentation parser" and "A working POD parser in Perl 6"

[09:27] <tadzik> yeah, I see the possible mentors

[09:27] *** [sbp] is now known as sbp

[09:28] <moritz_> so you can either try to to better, convince him to do a different project, or do a different project :-)

[09:28] *** SSSS joined
[09:28] <tadzik> can one apply to more than one project?

[09:28] <moritz_> yes

[09:28] <moritz_> you just can't do more than one project at a time :-)

[09:29] *** SSSS left
[09:29] <tadzik> yeah, I see

[09:30] <tadzik> anyway, I've got a few important ideas which he doesn't have, but I'm afraid to say them aloud so they won't be stolen :)

[09:30] <moritz_> :-)

[09:30] <moritz_> masak++ provided a link to our IRC discussion

[09:31] <moritz_> I'd really love to the POD thing happen, but there other worthwhile Perl 6 projects too

[09:31] <moritz_> for example related to module infrastructure/packaging

[09:34] <tadzik> yeah, I see

[09:34] <tadzik> hmm, so maybe I'll hit the module ecosystem, as I've been doing for the last months

[09:34] <tadzik> any ideas?

[09:35] <moritz_> there are also lots of 6model-related tasks, but I'm a bit scared of approving those before rakudo-on-6model actually runs

[09:35] <moritz_> tadzik: what does panda do right now?

[09:36] <tadzik> moritz_: installs modules. It has plans to manage the installed ones, being capable of removing them, removing unneeded dependencies and stuff

[09:37] <moritz_> well, then you have ideas already :-)

[09:38] <moritz_> other things you could do:

[09:38] <tadzik> yeah, but those are things I'll do anyway during the nearest few months

[09:38] <moritz_> a script that generates a META.yaml for modules that makes the PAUSE indexer ignore them

[09:38] <moritz_> and then upload a few modules to the Perl 5 CPAN

[09:39] <moritz_> and make panda install them from CPAN

[09:39] <tadzik> I'd like to get for GSoC something else, something challenging and something I probably won't be able to do all by myself in my spare time

[09:39] <tadzik> if you know what I mean

[09:39] <moritz_> generate your own indexer for Perl 6 modules, on a separate website

[09:39] <tadzik> yeah, this is the part of my plans, as on feather.perl6.nl:3000

[09:39] <tadzik> (that one's probably dead due to feather downtimes)

[09:40] <moritz_> thus use the p5 mirror infrastructure for module distribution

[09:40] <tadzik> up again

[09:40] *** orafu left
[09:40] <moritz_> yes, I see

[09:41] *** orafu joined
[09:41] <moritz_> maybe jnthn++ has some 6model-ideas that could be implemented in nqp directly

[09:41] <tadzik> Pod parser seems challenging and interesting, and it seems exciting enough so I have plenty of ideas about what to do after it's completed to make it even more awesome

[09:43] <moritz_> agreed, it's a good idea

[09:43] <tadzik> aye, that's why I choose it

[09:43] <tadzik> but now I have a competition :)

[09:45] <tadzik> The bad thing is, because my proposal is also based on masak's Grant Draft, my GSoC proposal would look similar to joseph's and thus it'd look like I'm the one stealing projects and ideas

[09:45] *** woosley left
[09:45] <tadzik> what happens if I apply to a few projects, who chooses what happens next?

[09:46] <moritz_> the mentors of each organization internally rate the projects

[09:46] <moritz_> and then requests slots from google

[09:46] <moritz_> google allocates $n slots

[09:46] <moritz_> and then the top-$n projects are chosen, weeding out duplicates etc.

[09:49] <moritz_> of course there can be discussions between mentors and students

[09:49] <tadzik> but say I apply for the Pod parser, and for a Shakespeare compiler for Parrot. What if I get accepted for both, I tell Parrot or Rakudo guys "well, how about no", and they stay with an empty slot? Or the organization then picks up someone who didn't make it in the first attempt?

[09:49] <moritz_> the latter

[09:50] <moritz_> ... unless the don't have enough good proposals (which rarely happens)

[09:50] <moritz_> in which case they'd give a free slot to another organization, and don't have any hard feelings either

[09:52] <tadzik> one more. Will the expertise in the field, for example I'm an all-star Shakespeare programmer, be a strong point when proposing, or does a Project Schedule or some other things in Proposal matter much more?

[09:53] <moritz_> it all matters

[09:53] <moritz_> the students need to convince us that they

[09:53] <moritz_> 1) know what the actually want to do

[09:53] <moritz_> 2) have spent some time thinking about the project

[09:53] <moritz_> 3) have the necessary background to actually complete it

[09:54] <moritz_> 4) the project is worthwhile for the community

[09:54] <moritz_> a detailed schedule greatly helps with 1) and 2)

[09:54] <moritz_> and bio and references to previous work help with 3)

[09:58] <tadzik> one more again :) What happens if something slips in the Schedule, for example I do the first four month in the first week, or get some point of my schedule one week later?

[09:59] <moritz_> if you run ahead, no problem :-)

[10:00] <moritz_> either take some time off (preferably at the end), or do more stuff

[10:00] <moritz_> if you are behind, student and mentor get together and discuss possibilities

[10:00] <moritz_> (catch up, don't do some of the planned features, ...)

[10:01] <moritz_> in the middle and end the mentor needs to fill out an evaluation, and has to make a yes/no decision if you're sufficiently on track to continue/pay out

[10:05] <tadzik> I see

[10:06] <tadzik> anyway, about this: http://irclog.perlgeek.de/perl6/2011-03-28#i_3434365

[10:06] <tadzik> that's basically Perl6::Grammar.parse(:actions(I-Want-Pod-Only.new)), or something far more fancy?

[10:06] *** f00li5h left
[10:12] *** c1sung left
[10:13] *** Guest34727 is now known as perplexa

[10:13] *** perplexa left
[10:13] *** perplexa joined
[10:23] *** f00li5h joined
[10:24] *** [Coke] joined
[10:29] <tadzik> oh nevermind, that's a different thing. So I don't know what mberends had on his mind: no Pod so no Pod tokens matched, so me methods called

[10:29] *** chin_up left
[10:40] *** agentzh joined
[10:42] *** agentzh left
[11:01] *** Mowah joined
[11:22] *** amkrankruleuen left
[11:30] *** mtk left
[11:40] *** leprevost joined
[11:42] *** shi joined
[11:43] <moritz_> tadzik: I think you should start with a pod parser that lives inside rakudo's Grammar.pm, despite mberends' objections

[11:47] <moritz_> at least the parsers and .WHY attachements need to be available without explicit module loading

[11:48] *** mtk joined
[11:48] <tadzik> moritz_: would you have some time to criticise my proposal in a second? I'd really like to get your feedback, especially on the timeline

[11:48] <moritz_> tadzik: sure

[11:51] <tadzik> bah, I sticked everything before the midterms

[11:51] <tadzik> Timeline is the hardest thing to do for me

[11:52] <moritz_> cram less into a week

[11:53] *** Patterner left
[11:53] <moritz_> and it's ok to plan a slack week each before midterm and final to be able to catch up delays

[11:53] <moritz_> Hofstadter's rule: Everything takes longer than you expect, even when

[11:53] <moritz_> you take Hofstadter's rule into account.

[11:54] *** Psyche^ joined
[11:54] *** Psyche^ is now known as Patterner

[12:01] <tadzik> the main thing that bothers me is the possibility of "suprise holiday trips"

[12:02] <tadzik> say, a week long. I'll probably have those planned a week before or something :|

[12:03] <moritz_> it's ok to take a week off, just tell your mentor about it, and catch up later on

[12:03] <tadzik> but that should be possible to do two weeks in one and just scheule a cronjob for commiting part of the changes later :)

[12:03] <tadzik> oh, good, I hoped for that

[12:07] <pmurias> tadzik: do you intend to implement the shakespeare programming language? or is it an hypothetical example?

[12:08] <tadzik> pmurias: no, it's just an unrelated example, to not to refer to any particular task

[12:09] <tadzik> I wanted it to be a bit absurd, but it's nice that you asked :)

[12:09] <pmurias> the actuall tasks are secret? ;)

[12:09] <pmurias> * actual

[12:12] <tadzik> the actual task is the Pod parser :)

[12:15] <tadzik> moritz_: https://gist.github.com/892249 can I ask you for some opinions? I'd like to know what you think about the schedule, will something take more time than I think and I should split it up, or is it good to join some of the tasks?

[12:16] <tadzik> To everyone: would you like to see something more done for Rakudo on this project, any desired features?

[12:18] <moritz_> The project also features fixing and extending Synopses 26 if needed,

[12:18] <moritz_> and if there in a need to do this.

[12:18] <moritz_> double if

[12:19] *** MayDaniel joined
[12:20] <moritz_> tadzik: I think you need more time for the parsing itself (and testing)

[12:20] <moritz_> you have 2 weeks for blocks, and one for the whole rest

[12:21] <moritz_> I'd add one for inline markup (I<...>, C<...> and nesting them)

[12:21] <tadzik> hmm, right

[12:23] <moritz_> also I remember some quite tricky features

[12:23] <moritz_> where you have code blocks which allow certain markup, but not all of it

[12:23] <tadzik> yeah, I remember reading about those

[12:24] <moritz_> maybe re-read, and allocate another week for it if it seems necessary

[12:24] <moritz_> =begin code :allow<B> The "exeunt" command B<Z<Think about renaming this command?>> is used to quit all applications.

[12:24] <moritz_> =end code

[12:25] <tadzik> yeah, that might be tricky/interesting

[12:29] *** W0rM joined
[12:30] *** pmurias left
[12:30] <W0rM> !login sorear

[12:31] <W0rM> who change the login ?

[12:32] <moritz_> W0rM: what are you talking about?

[12:32] <W0rM> bots login i need 

[12:33] <moritz_> most bots here don't require login

[12:33] <moritz_> hugme: hug W0rM 

[12:33] * hugme hugs W0rM

[12:33] <moritz_> see? works without login :-)

[12:35] <W0rM> dalek: hug W0rM

[12:37] *** MayDaniel left
[12:38] *** amkrankruleuen joined
[12:38] *** icwiener joined
[12:41] <[Coke]> W0rM: Is there something specific we can help you with?

[12:41] *** durmitor joined
[12:42] <moritz_> [Coke]: it seems that W0rM is after some blackhat practices (told me in privmsg)

[12:42] <moritz_> [Coke]: I think hugging is the best you can do

[12:42] *** plobsing left
[12:42] <[Coke]> might as well ban him, then.

[12:42] <W0rM> i gave you

[12:42] <W0rM> my father credit card :D

[12:43] <W0rM> just give me login :D

[12:43] <W0rM> for one ddosing

[12:43] <[Coke]> ah, n00bs.  they're so cute.

[12:43] *** durmitor left
[12:43] <W0rM> mother fucker

[12:43] <W0rM> :@ im

[12:43] <moritz_> W0rM: stop it. We discuss programming languages here (well, one in particular). We don't do any attacks

[12:44] <W0rM> operator

[12:44] <W0rM> in bluewin.ch

[12:44] *** durmitor joined
[12:44] <W0rM> admin

[12:44] <W0rM> and 

[12:44] <W0rM> i 

[12:44] <W0rM> tell to the FBI 

[12:44] *** ChanServ sets mode: +o moritz_

[12:44] <W0rM> for this server

[12:44] <W0rM> dont kick me

[12:44] <W0rM> mother fucker

[12:44] <W0rM> listening

[12:44] <W0rM> :d

[12:44] *** moritz_ sets mode: +b *!*ASdas@46.217.36.*

[12:44] *** W0rM was kicked by moritz_ (W0rM))
[12:44] *** moritz_ sets mode: -o moritz_

[12:45] <[Coke]> Too much hugging, not enough banning.

[12:47] *** meraxes left
[12:47] <mux> that was fun

[12:51] <moritz_> we need a new command, /hugban :-)

[12:51] *** durmitor left
[12:54] *** chin_up joined
[12:55] *** JimmyZ joined
[12:56] *** JimmyZ left
[13:01] *** tyatpi_ joined
[13:03] *** plainhao joined
[13:07] <tadzik> as in * hugme hugs W0rM goodbye

[13:10] *** pmurias joined
[13:11] *** Holy_Cow joined
[13:18] *** flatwhatson_ left
[13:28] *** cspencer joined
[13:31] *** meraxes joined
[13:31] *** cspencer left
[13:31] *** _twitch joined
[13:32] *** bluescreen10 joined
[13:33] *** plobsing joined
[13:34] <PerlJam> colomon++

[13:38] <tadzik> moritz_: what do you think about me saving the last few weeks for some Justin Case fixes, related mini-projects or something, is it desired?

[13:39] <moritz_> tadzik: it's fine, but you shouldn't do it with more than two weeks in total

[13:39] <moritz_> better yet just one

[13:40] <tadzik> ok

[13:42] *** mikehh left
[13:57] *** bluescreen10 left
[14:00] *** cotto left
[14:03] *** nymacro left
[14:04] *** spq left
[14:06] *** stkowski joined
[14:09] *** bluescreen10 joined
[14:10] *** pyrimidine joined
[14:12] *** cotto joined
[14:18] *** cogno joined
[14:19] *** wtw left
[14:29] *** alester joined
[14:32] *** orafu left
[14:32] *** ab5tract joined
[14:33] *** Trashlord left
[14:34] *** sftp joined
[14:34] *** Trashlord joined
[14:35] *** zamolxes left
[14:35] *** zamolxes joined
[14:35] *** slavik2 joined
[14:36] *** orafu joined
[14:36] *** slavik1 left
[14:40] *** cogno left
[14:44] <sorear> hi #perl6

[14:45] <moritz_> hi sorear 

[14:45] <tadzik> hi sorear

[14:55] <pmurias> sorear: hi

[14:55] *** shi left
[15:05] *** bluescreen10 left
[15:06] *** mtk left
[15:10] *** slavik1 joined
[15:10] <diakopter> !login sorear indeed

[15:11] <moritz_> :-)

[15:11] <tadzik> :D

[15:11] *** slavik2 left
[15:12] <tadzik> that was one naive attempt of this guy

[15:13] <moritz_> he thought this was a bot net, because we have bots

[15:13] <pmurias> ?

[15:14] <tadzik> pmurias: see the logs, 14:30 or something

[15:22] *** bluescreen10 joined
[15:25] *** mtk joined
[15:30] *** birdwindupbird left
[15:37] <tadzik> moritz_: I updated the proposal draft, extending the Schedule. Can you take a look? https://gist.github.com/892249

[15:41] *** Axius joined
[15:42] <moritz_> tadzik: much better... except for the test coverage, which will be hard to determine without the proper tools

[15:43] <tadzik> oh, that's right

[15:45] *** Axius left
[15:45] *** Axius joined
[15:46] *** bluescreen10 left
[15:46] *** bacek left
[15:47] *** kaare_ left
[15:55] *** birdwindupbird joined
[15:55] *** Axius left
[16:00] *** Mowah left
[16:00] *** bluescreen10 joined
[16:01] *** domidumont left
[16:07] *** hercynium joined
[16:08] *** lestrrat joined
[16:08] *** lestrrat left
[16:10] *** lestrrat joined
[16:15] *** birdwindupbird left
[16:16] *** chin_up left
[16:22] *** masak joined
[16:22] <masak> saluton, zebroj!

[16:22] <phenny> masak: 28 Mar 21:39Z <moritz_> tell masak you might be interested in http://books.slashdot.org/story/11/03/28/1344224/Book-Review-Test-Driven-JavaScript-Development?from=rss&utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+Slashdot%2Fslashdot+%28Slashdot%29

[16:22] <masak> I might. will read during dinner :)

[16:23] <tadzik> masak! \o/

[16:23] <tadzik> masak: wanna read my proposal draft too? I'd very much appreciate your comments

[16:25] <masak> I sure do.

[16:25] <masak> url?

[16:26] <tadzik> https://gist.github.com/892249

[16:31] * masak reads

[16:34] *** pmichaud joined
[16:34] <masak> pmichaud! \o/

[16:34] <pmichaud> good morning, #pelr6

[16:34] <pmichaud> *#perl6

[16:34] *** cdarroch joined
[16:34] *** cdarroch left
[16:34] *** cdarroch joined
[16:37] <benabik> good morning, pmachiud!

[16:41] <colomon> \o

[16:41] <colomon> ooo, #phasers today!

[16:41] <masak> ooh!

[16:41] <masak> colomon++ # reminder

[16:41] <pmichaud> I will probably miss #phasers :-(

[16:41] <pmichaud> but I have little to report anyway.

[16:42] <masak> tadzik: the "Deliverables" section is more descriptive than I'm used to with "Deliverables" sections. it has more of the tone of a "Goals" section. "Deliverables" should IMHO be a list of things you intend to implement.

[16:43] <pmichaud> "Deliverables" is what we expect to have when the project is done.

[16:43] <pmichaud> i.e., what you promise to deliver.  it should almost be like a checklist

[16:43] <masak> right.

[16:43] *** estrabd joined
[16:43] *** Axius joined
[16:44] *** _dev0_ left
[16:44] <masak> tadzik: and there are distinct advantages for everyone in having "Deliverables" be a checklist. it'll be possible to tell if you succeeded, for one thing. :)

[16:45] <masak> so, don't be afraid to be concrete.

[16:46] <pmichaud> as a grant manager, I want deliverables to be a sequence of "yes/no" items... if everything is "yes", then I can say that the grantee gets paid.  :)

[16:46] *** _twitch left
[16:49] *** am0c joined
[16:51] <Util> pmichaud: as the R* pumpking, do you want to review the binary Darwin .dmg build before I upload it to R*'s GitHub Download section?

[16:52] <tadzik> masak, pmichaud: thanks for comments. Any other suggestions?

[16:52] *** Chillance joined
[16:53] <masak> tadzik: ss/Add a tests cases\./Add tests./

[16:53] <masak> (line 92)

[16:53] <tadzik> Fixed that. I wanted to avoid repetitions, but achieved weirdness

[16:53] <pmichaud> Util: if there's anything specific you'd like me to review, I can do that.  Otherwise I'd say just do it and we'll take patches as feedback

[16:54] <masak> tadzik: ss/what is wanted to/what is wanted/ (line 71)

[16:54] *** benabik left
[16:54] *** pmurias left
[16:54] *** benabik joined
[16:54] <pmichaud> my schedule for the next couple of days is likely to be... weird.

[16:54] *** benabik left
[16:55] *** benabik joined
[16:55] <masak> tadzik: "the specialized blocks like code, list, comment and others" -- I suggest either dropping "and others", or specifying them explicitly.

[16:55] <pmichaud> maybe "code, list, and comment blocks"

[16:55] <tadzik> well, "like" is de-generalizing it anyway

[16:55] <tadzik> but right, bespecific

[16:55] <masak> "This is also the time of modifying the Synopses if needed." -- I wouldn't limit that to a specific week if I were you! :P

[16:56] <tadzik> :) Ok

[16:56] *** dakkar left
[16:57] <PerlJam> tadzik: ooc, why aren't you using pod for your proposal?  :)

[16:57] <masak> hypocrite! :P

[16:58] <tadzik> PerlJam: for the Parser is not yet. I'll have the bootstraping problem from the very start :)

[16:58] <tadzik> Also, I wanted that to be nice and shiny, but it turns out I'll have to submit it from a webeditor in a webinterface anyway :|

[16:59] <tadzik> so I guess "etc" in one-letter blocks is also out?

[16:59] <PerlJam> tadzik: POD is very human readable.  Besides, if you did use POD6 for your proposal, you could say for one of your deliverables,  "able to succesfully parse this proposal"   :-)

[16:59] <tadzik> (:

[17:02] <masak> PerlJam++

[17:02] * masak wonders if that qualifies as an autopun, or if it was just a self-reference

[17:04] <tadzik> rakudo: use Perl6::Grammar

[17:04] <p6eval> rakudo 405afa: OUTPUT«===SORRY!===␤Unable to find module 'Perl6::Grammar' in the @*INC directories.␤(@*INC contains:␤  lib␤  /home/p6eval/.perl6/lib␤  /home/p6eval//p2/lib/parrot/3.2.0-devel/languages/perl6/lib␤  .)␤»

[17:05] <tadzik> is that possible, or likely to be possible until the GSoC? I think that would be a prerequisite to reuse the parser in the Perl 6 modules

[17:05] <Util> pmichaud: nothing specific, so I will be uploading later this week.

[17:06] <Util> thanks

[17:06] *** Axius left
[17:07] <masak> rakudo: say Perl6::Grammar.WHAT

[17:07] <p6eval> rakudo 405afa: OUTPUT«Perl6::Grammar()␤»

[17:07] <masak> tadzik: it's there -- you don't need to 'use' it.

[17:07] <tadzik> oh cool

[17:07] <masak> tadzik: but I'd be interested to know what kind of reuse you have in mind.

[17:08] <masak> tadzik: I wanted to reuse <identifier> the other day, and found I couldn't really.

[17:08] <pmichaud> overload the pod_comment rules, perhaps?  

[17:08] <tadzik> rakudo: say Perl6::Grammar.parse("sub sub foo!") or die "nope"

[17:08] <p6eval> rakudo 405afa: OUTPUT«Confused at line 1, near "sub sub fo"␤  in main program body at line 288␤»

[17:08] <tadzik> rakudo: say Perl6::Grammar.parse("sub foo {}").ast or die "nope"

[17:08] <p6eval> rakudo 405afa: OUTPUT«␤»

[17:08] <masak> pmichaud: why not just specify them in-place? what is it that needs inheritance/overloading?

[17:09] <masak> tadzik: you're parsing without actions.

[17:09] <pmichaud> masak: for development, it might be easier to inherit/overload

[17:09] <benabik> tadzik: The "or die" doesn't really do much, since Perl6::Grammar is loaded with it's own die calls. 

[17:09] <pmichaud> once everything is the way you want it, then put them into the original grammar (and STD)

[17:10] <masak> pmichaud: hm. I think I'd just copy/paste everything into a file and do development outside of the Rakudo make flow.

[17:10] <pmichaud> masak: that could work, yes.

[17:10] <PerlJam> oddly, I was thinking  this would be a perfect application for roles.

[17:10] <pmichaud> j

[17:10] <pmichaud> ww

[17:10] <masak> YMMV.

[17:10] <tadzik> masak: the Podparser module is likely to use the Perl 6 parser

[17:11] *** st-14258 joined
[17:11] <tadzik> rakudo: say Perl6::Grammar.parse("sub foo {}", :actions(Perl6::Actions.new)).ast

[17:11] <p6eval> rakudo 405afa: OUTPUT«Contextual %*COMPILING not found␤  in main program body at line 77␤»

[17:11] <tadzik> oh there we go

[17:12] <tadzik> rakudo: my %*COMPILING = "wild guess"; say Perl6::Grammar.parse("sub foo {}", :actions(Perl6::Actions.new)).ast

[17:12] <p6eval> rakudo 405afa: OUTPUT«Odd number of elements found where hash expected␤  in '!STORE' at line 5304:CORE.setting␤  in main program body at line 22:/tmp/KD7eCI0oMy␤»

[17:13] <tadzik> ideas?

[17:14] <pmichaud> in Perl 6 it's not really possible to detangle parsing from compiling, I think (more)

[17:15] <pmichaud> but if you're doing pod, then you really want to be parsing just the pod and not an entire Perl 6 program, perhaps.

[17:15] <pmichaud> so perhaps you could do  :rule<pod_comment>  or similar

[17:15] *** awoodland joined
[17:16] <pmichaud> rakudo:  say Perl6::Grammar.parse("hello", :rule<identifier>);

[17:16] <p6eval> rakudo 405afa: OUTPUT«hello␤»

[17:16] <tadzik> looks good

[17:16] <pmichaud> rakudo:  say Perl6::Grammar.parse("hello", :rule<identifier>).perl;

[17:16] <p6eval> rakudo 405afa: OUTPUT«Method 'perl' not found for invocant of class 'Regex;Match'␤  in main program body at line 22:/tmp/3FZiq0SfOq␤»

[17:16] <pmichaud> rakudo:  _dumper(Perl6::Grammar.parse("hello", :rule<identifier>))

[17:16] <p6eval> rakudo 405afa: OUTPUT«Could not find sub &_dumper␤  in main program body at line 22:/tmp/zJigGiLLgu␤»

[17:17] <pmichaud> hmmm

[17:17] <pmichaud> it's giving back an NQP Match instead of a Rakudo Match

[17:17] <pmichaud> anyway, it's there :-)

[17:17] <tadzik> so there could be a proto token Pod, and the Parser module would use that one only

[17:18] <pmichaud> rakudo:  say Perl6::Grammar.parse("123_456_789 any street", :rule<integer>);

[17:18] <p6eval> rakudo 405afa: OUTPUT«123_456_789␤»

[17:18] <tadzik> but I'm still not sure if that'll be entirely possible. There's DOC INIT {} and stuff, so the code has to be compiled somehow

[17:20] <pmichaud> agreed

[17:21] *** icwiener left
[17:22] *** icwiener joined
[17:22] <tadzik> should that be doable, given the current state of Rakudo?

[17:22] <tadzik> I don't want to have it as a GSoC Goal if it turns out to be impossible :)

[17:23] <pmichaud> it's not at all impossible

[17:23] <pmichaud> so yes, it's doable

[17:23] <tadzik> I don't mind it being tricky :)

[17:23] <pmichaud> it may mean refactoring rakudo's compiling guts a bit... but that probably needs to be done anyway

[17:24] <pmichaud> I think the key is to think of pod as being "another language within the compiler" and not necessarily "a separate language from the compiler"

[17:24] <tadzik> finding the temporary impossibilities is one of the goals for the first week

[17:24] <pmichaud> I think it's also useful to think of two forms of pod documentation

[17:24] <pmichaud> one that doesn't require the Perl 6 compiler  (i.e., no DOC INIT { })

[17:24] <pmichaud> and one that does

[17:25] <pmichaud> i.e., it might be useful to develop a version of pod that can standalone, and then figure out how to integrate it with a perl 6 compiler

[17:25] <pmichaud> (full disclosure:  I haven't read the proposal(s) yet)

[17:25] <PerlJam> pmichaud: https://gist.github.com/892249

[17:26] <tadzik> what about =begin code :allow<B>? That one will surely need a Perl 6 parser too. But maybe it will just do with the single rule for this kind of syntax

[17:26] <PerlJam> " What makes my project different is that it's not a separate parser module, but a significant part of the Rakudo compiler itself"

[17:26] <moritz_> tadzik: no, it does not

[17:26] <PerlJam> tadzik: btw, I don't like that part I just quoted.  :)  you're drawing the wrong distinction IMHO

[17:26] <pmichaud> you can certainly inherit/borrow specific parsing rules from the Perl 6 grammar

[17:27] <[Coke]> pmichaud: ~~!

[17:27] <pmichaud> just avoid the rules that have side effects

[17:27] <pmichaud> Coke:  ~~

[17:27] <moritz_> tadzik: it means "verbatim text, except for B<...>, which is parsed"

[17:27] <moritz_> tadzik: not "Perl 6 code + B<...>"

[17:27] <tadzik> moritz_: yes. But it's not only :allo... oh, I see your point

[17:28] <pmichaud> anyway, I'm seriously distracted here so I should probably stop lobbing peanuts

[17:29] <tadzik> or not. Hmm. That'd be something like { =begin <pod_identifier> <pair_syntax_or_something> }

[17:29] <tadzik> while <pair_syntax_or_something> is a Perl 6 code and I need it parsed

[17:29] <tadzik> but as pmichaud said, it that one has no side effects it's ok, otherwise I might write my own one or something

[17:30] <pmichaud> rakudo:  say Perl6::Grammar.parse(":allow<B>", :rule<colonpair>)

[17:30] <p6eval> rakudo 405afa: OUTPUT«:allow<B>␤»

[17:30] <pmichaud> seems pretty straightforward :-)

[17:30] <tadzik> oh cool, thanks :)

[17:30] <pmichaud> it gets nastier if the colonpair has curlies or something like that, but for the basic :name<value> syntax it ought to be fine

[17:31] <tadzik> I'm wondering whether that as a whole would make it bad to keep for the last week of work. I guess I'll just silently try it as I implement the rest of things, to know of potential difficulties before

[17:32] <tadzik> well, the 'key => {a=>1, b=>2}' syntax should also be possible

[17:32] <tadzik> OTOH, I don't think I stated the 100% S26 compatibility anywhere. Even the project description on the ideas page says "or the subset of Pod"

[17:32] <pmichaud> rakudo:  say Perl6::Grammar.parse("key => 'value'", :rule<fatarrow>);  # testing

[17:33] <p6eval> rakudo 405afa: OUTPUT«Contextual $*QSIGIL not found␤  in main program body at line 1586␤»

[17:33] <pmichaud> yeah, fatarrow is nasty

[17:33] <pmichaud> just having anything to start with would be helpful

[17:33] <PerlJam> tadzik: IMHO, a pod parser that can stand alone and can be integrated into rakudo (or some other implementation) is much more valuable that one that is only integrated into Rakudo.

[17:33] <tadzik> I just have to make sure I don't include in the proposal something I don't plan to do

[17:34] <pmichaud> I agree with PJ, fwiw

[17:34] <benabik> +1, FWIW

[17:35] <tadzik> hmm

[17:35] <pmichaud> at this stage I'd prefer a standalone pod that omits some of the dynamic features of POD

[17:35] <tadzik> wouldn't that be a problem for the Rakudo compiler to load a module?

[17:36] <pmichaud> tadzik: no, we can precompile it in

[17:36] <pmichaud> same as we do for the rest of the core settings :-)

[17:36] <tadzik> hah :)

[17:37] <tadzik> so Perl6::Grammar will include some Pod::rules, and Perl6::Actions will inclu... that pretty much makes Pod a role which Perl6::Grammar will do, doesn't it?

[17:37] <pmichaud> it can be, yes

[17:37] <PerlJam> tadzik: That's what I think

[17:38] <masak> rakudo: my $*QSIGIL = 42; say Perl6::Grammar.parse("key => 'value'", :rule<fatarrow>)

[17:38] <p6eval> rakudo 405afa: OUTPUT«␤»

[17:38] <tadzik> so that looks a bit different now: A Pod Parser is a separate thingy, and it later gets included into Rakudo, opening the way to the in-compiler features, --doc, .WHY etc

[17:39] *** jferrero joined
[17:40] <masak> I haven't been following along closely. what's the advantage of starting separate/outside?

[17:41] * moritz_ disagrees

[17:41] <pmichaud> reusability with other compilers

[17:41] <tadzik> Justin Case, what if, in the middle of the project, my work reveals some subtle bug which makes half of the deliverables underiverable, and I'm unable to fix this. What happens to my task then?

[17:41] <moritz_> Pod allows references into code

[17:41] <moritz_> for obtaining method signatures, for example

[17:41] <PerlJam> tadzik: you won't be penalized for not being able to predict the future.

[17:41] <moritz_> this will be *much* harder in a separate module

[17:41] <PerlJam> tadzik: you and your mentor will work out an alternate plan at that poitn

[17:42] <tadzik> sounds good for me

[17:42] <moritz_> and .WHY and friends is speccec as core - why have it separately?

[17:42] <pmichaud> that's why I think it needs to be viewed in two stages

[17:43] <pmichaud> one that looks at pod-as-pod, and another that looks at pod-as-perl6-with-references

[17:43] <pmichaud> and dynamic stuff and th elike

[17:43] <pmichaud> but I can see the value of the other approach as well

[17:43] <pmichaud> (i.e., integrating it with the compiler directly)

[17:44] <pmichaud> I just think the bigger win would be to make a clean API somewhere/somehow.  Perhaps that's just not possible with pod6

[17:44] <pmichaud> in which case we end up with "Only Perl 6 can parse Pod6" which I think would be disappointing somehow.

[17:44] <moritz_> for one, we don't even yet have the syntax to call a rule from another grammar in from within a rule

[17:44] <tadzik> regarding the GSoC again: if I make a suprising discovery in the early stage of a project, not fatal, can I ask my mentor "that will be harder than expected, can I modify my schedule a bit?" Not neceserilly the deliverables, but if those too, is that possible?

[17:44] <PerlJam> moritz_: that's a mere matter of editing the spec ;)

[17:44] <moritz_> (which is a TODO since the alpha switchover)

[17:44] <tadzik> oh right, we can edit the spec :)

[17:45] <moritz_> PerlJam: no, it needs implementing

[17:45] <moritz_> tadzik: yes, possible

[17:46] *** ab5tract left
[17:46] <tadzik> ok cool. Bbl

[17:47] <PerlJam> moritz_: why do we need to call a rule from another grammar?

[17:48] <moritz_> PerlJam: because that's what you do when you integrate one language with another

[17:48] <pmichaud> one *can* call a rule from another grammar

[17:48] <PerlJam> moritz_: if the POD6 parser is a role, it's in the same grammar.

[17:48] <pmichaud> we just don't have a standard syntax for it

[17:48] <masak> :lang(OtherGrammar) ?

[17:49] <moritz_> PerlJam: do we have pre-parse-time role composition yet?

[17:49] <pmichaud> anyway, Rakudo's grammar makes calls to other grammars (regex, etc) all the time

[17:50] <PerlJam> moritz_: do you mean "does anyone have it?"

[17:50] *** tyatpi_ left
[17:50] <moritz_> PerlJam: no

[17:50] <pmichaud> we have roles in the setting, yes.

[17:51] <moritz_> PerlJam: I mean "can we use it now for the GSOC thing?"

[17:51] <pmichaud> I don't know if that qualifies as pre-parse-time role composition... but it seems like it should

[17:51] <moritz_> pmichaud: but we can't compose them into Perl6::Grammar yet, can we?

[17:51] <pmichaud> no, because Perl6::Grammar isn't yet a Rakudo grammar

[17:51] <pmichaud> it's still an NQP one

[17:52] <moritz_> PerlJam: so, integrating the Pod parser into rakudo via role isn't an option right now

[17:52] <pmichaud> well... it might work, but it's not something I could commit to yet

[17:52] *** am0c left
[17:54] <PerlJam> okay so perhaps tightly coupling is fine for now and we leave it to the future to decide how to tease them apart (if ever)

[17:54] *** jevin left
[17:57] <masak> I'd say it's a lot more than "fine fore now". it's only in conjunction with the rest of Perl 6 that Pod 6 will really be Pod 6.

[17:57] <masak> we seem to fall on a spectrum in how much we believe that to be true/important, though.

[17:58] <pmichaud> it's something of a question about the value of pod6 as markup, I think (more)

[17:58] <pmichaud> pod6 as "Perl 6 program documentation" makes sense to have tight integration with compiler

[17:58] <pmichaud> pod6 as "Generic document language" might want to not be so tightly coupled with a perl 6 compiler

[17:59] <pmichaud> but perhaps pod6 will never be used as a generic document language

[17:59] * moritz_ was thinking of "Perl 6 program documentation", because that's what S26 describes, and that's what tadzik++'s proposal references

[18:00] <pmichaud> put another way, if the only way to process a pod6 document is to run it through a Perl 6 compiler... that's a coupling that we might have cause to regret someday

[18:00] <pmichaud> anyway, if the focus is on the perl6 source documentation aspect, I totally agree that compiler integration makes more sense as the first step

[18:01] <masak> pmichaud: mberends++ has at times been making the exact same points you are right now.

[18:01] <masak> pmichaud: problem is, there *is* no Perl 6-independent Pod 6.

[18:01] <masak> not in the spec, anyway.

[18:01] <masak> it's *deeply* intertwined.

[18:01] <pmichaud> masak: this is what I get for being absent then, and mberends++  

[18:01] <masak> he's mostly been making them AFK, FWIW.

[18:02] <pmichaud> masak: istr that at one time there was discussion that we might want a version of pod6 that doesn't have the deep intertwining

[18:02] <masak> one could argue that there's a need for a "staged" Pod 6 spec, one stage which is... right.

[18:02] <moritz_> ... and then we ran into limitations which made us deviate from that course

[18:02] <masak> but we don't have that today.

[18:02] <pmichaud> right... "staged" is what I've been aiming at.  

[18:03] <masak> all we have is the full Pod 6.

[18:03] <moritz_> as far as I remember the process, at least

[18:03] <pmichaud> similar to the way we "staged" the regex grammar and the compiler

[18:03] <pmichaud> having a separate regex/grammar engine is a huge plus

[18:03] <pmichaud> at least in the nqp/parrot world it is

[18:03] <masak> I also suggest that we might learn more from integrating with Rakudo, since that hasn't been done yet.

[18:03] <pmichaud> and I think a similar case can be made for pod6

[18:04] <pmichaud> regardless of which approach is taken, I think we will learn a ton (and end up with a very useful product)

[18:04] <pmichaud> I don't see that either approach is a dead end

[18:05] <pmichaud> so I'd recommend that tadzik++ take whatever approach is -Ofun for him and go with that

[18:05] <masak> well, the standalone pod6 approach has been tried at least three times.

[18:05] <pmichaud> also, if there's a separate pod6 documentation project for parrot, perhaps that should be the "uncoupled" pod6 track and tadzik++ can work on the "tightly integerated" track

[18:06] <pmichaud> masak: it has?

[18:06] * masak thought it was a separate pod5 project for Parrot

[18:06] <pmichaud> maybe it's pod5 for parrot

[18:06] <[Coke]> I'm not sure parrot needs an independent pod6 parser.

[18:06] <masak> pmichaud: yes, both my draft and tadzik's proposal mentions that.

[18:06] <pmichaud> sorry, I haven't read the drafts.

[18:07] <masak> pmichaud: TheDamian's CPAN module, mberends's parser, and there's another CPAN module by a Russian guy.

[18:07] <masak> pmichaud: four if you count lue++'s early-stages project.

[18:07] <PerlJam> After thinking about how POD5 has been used, I think a deeply integrated POD6 will be fine.   (POD5 is used as a general purpose markup for various things, but all of the tools that parse it (AFAIK) are written in Perl so we need to "run it through perl" anyway.  This would be no different for pod6)

[18:08] <masak> the places where Pod 6 shines over Pod 5 are mostly in deeper integration, IMHO.

[18:08] <PerlJam> I also think that moritz_ would make the perfect mentor for this project :)

[18:08] <PerlJam> masak: yes, agreed.

[18:09] *** icwiener left
[18:09] <pmichaud> masak: okay.  I was familiar with the CPAN modules, but not the others

[18:09] <pmichaud> I suspect that CPAN / Perl 5 really isn't a good match for pod6.  Also it depends on what level of pod6 they were attempting to parse

[18:10] <pmichaud> anyway, I'll defer here to others' wisdom.

[18:11] <masak> pmichaud: I agree that there are... issues around parsing Pod 6 outside of a Perl 6 compiler.

[18:11] <pmichaud> Perl 6 compiler or Perl 6 grammar?

[18:11] <masak> a compiler.

[18:12] <pmichaud> okay.  I'll have to re-read S26 and see if I agree.

[18:12] <masak> those have to be resolved at some point. I suggest running headlong into these issues to discover them :)

[18:12] <pmichaud> except that writing Pod that relies on a compiler would seem to avoid the issues as opposed to running into them :)

[18:13] <pmichaud> i.e., if we assume a compiler, then we don't really discover the issues that arise from not having one :)

[18:13] <benabik> masak: To find walls, just run forward at top speed?

[18:15] <masak> benabik: that's what I usually do.

[18:15] <masak> are you questioning my methods? :P

[18:16] <benabik> Just trying to learn from the masters.  Although I think I'll wear a helmet if I try that one.  ;-)

[18:16] <masak> :)

[18:17] <masak> pmichaud: oh, I meant partly the issues related to not having a compiler handy, and partly the issues related to having one.

[18:17] <PerlJam> It would help if someone came up with a good use-case for no-compiler

[18:18] <masak> PerlJam: CPAN or similar.

[18:18] *** GinoMan left
[18:18] <masak> I don't remember if the security-related Pod issues brought up on p6l were ever addressed entirely.

[18:18] <masak> I think S26 mumbles something about 'compile-time constants' or some such.

[18:19] <masak> anyway, it's *those* issues that I think are next up for exploration.

[18:19] <masak> not the outside-a-compiler, separate-module issues. that's been done a few times.

[18:19] <masak> and experience tells us that those projects have a tendency to fall by the wayside and bitrot rather than become *the* Pod 6 parser.

[18:20] <PerlJam> well correlation is not causation as they say

[18:21] <masak> true. nevertheless, that kind of project has been tried.

[18:22] <masak> I'd say that TheDamian's module on CPAN is still the authoritative one. it's lagging just a little on S26, but it's still very feature-complete. if I were to write a standalone Pod 6 parser from scratch, I'd probably start by copying that one.

[18:23] *** leprevost left
[18:24] <pmichaud> afk, lunch

[18:25] <PerlJam> re tadzik's proposal ...  I still think that the fewer rakudo-specific features he has, the better and that he shouldn't highlight that it's tightly integrated into *rakudo* so much as integrated into STD or Perl 6 or something that indicates that it could be used for multiple implementations.

[18:26] <PerlJam> but at the end of the day he has to pick an implementation to use for his development environment and rakudo is a good choice  :)

[18:27] <masak> it would be excellent if (say) Niecza followed along in the development of the Pod features. but it might be a bit much for one GSoC-er to implement Pod in two implementations.

[18:28] <masak> when's #phasers, btw?

[18:28] <diakopter> 32

[18:28] <masak> dz

[18:28] <diakopter> dz?

[18:28] <masak> phenny: "dziekuje"?

[18:28] <phenny> masak: "Thank you" (pl to en, translate.google.com)

[18:28] <diakopter> ahah

[18:28] *** st-14258 left
[18:28] <diakopter> pl?

[18:29] *** plobsing left
[18:29] <masak> I picked up a few bad habits on a board game forum many years ago :)

[18:29] <sjohnson> polish

[18:29] <masak> phenny: "zamiana kolorew?"?

[18:29] <phenny> masak: "kolorew replacement?" (pl to en, translate.google.com)

[18:30] *** jevin joined
[18:30] <masak> huh. maybe "kolorew" never was a real word... :)

[18:30] <sjohnson> masak: what is your first language?

[18:30] <masak> sjohnson: Swedish.

[18:30] <masak> phenny: "ostatnia raz"?

[18:30] <phenny> masak: "last time" (pl to en, translate.google.com)

[18:30] <sjohnson> masak: cool

[18:30] *** kaare_ joined
[18:32] *** mberends joined
[18:33] <masak> phenny: "Kiedyś nie mogłem zaklęcia "lingrist", a teraz są jednym!"?

[18:33] <phenny> masak: "Once I could not spell "lingrist" and now are one!" (pl to en, translate.google.com)

[18:33] *** s1n left
[18:33] <masak> GIGO :)

[18:35] *** zby_home joined
[18:40] *** icwiener joined
[18:51] *** _buno_ joined
[18:52] *** _buno_ left
[19:07] *** jaldhar left
[19:08] *** jaldhar joined
[19:28] *** ymasory left
[19:35] *** ymasory joined
[19:35] <tadzik> masak: kolorów

[19:36] <tadzik> also, ostatnI raz

[19:36] <tadzik> and I have no idea what are you trying to say with the last one :)

[19:36] <tadzik> am I late for #phasers btw?

[19:36] <masak> aye

[19:37] <masak> tadzik: the context is online board games. people don't want to stop playing, but sometimes they have to go because the world intrudes.

[19:37] *** ymasory left
[19:38] <tadzik> masak: how does it relate to the lingrist spell?

[19:38] <tadzik> Also, sorry for being late, but I have nothing to report anyway

[19:40] <masak> tadzik: it doesn't relate. that was just a TimToady quote from a couple days ago.

[19:40] <tadzik> oic

[19:40] <masak> tadzik: we were discussing GSoC a bit. you might want to backlog #phasers.

[19:40] <tadzik> I surely will

[19:53] <moritz_> http://www.perlmonks.org/?node_id=896262 connect-4 with the regex engine :-)

[19:56] <masak> is that the Fox from p6cc?

[19:57] <moritz_> might be

[19:57] <moritz_> I don't know

[20:00] <tadzik> my proposal got FixedAgain, if anyone still wants to check that out :)

[20:01] *** bacek joined
[20:05] *** ronoreck left
[20:05] *** ronoreck joined
[20:15] *** Rotwang joined
[20:21] *** ymasory joined
[20:28] *** plobsing joined
[20:32] *** tyatpi_ joined
[20:41] *** Holy_Cow left
[20:43] *** pothos left
[20:44] *** y3llow left
[20:44] *** plainhao left
[20:45] *** y3llow joined
[20:45] *** pothos joined
[20:48] *** pothos left
[20:48] *** pothos joined
[20:56] *** kaare_ left
[20:57] *** donaldh joined
[21:24] *** ymasory left
[21:27] *** ymasory joined
[21:46] *** ilogger2 joined
[21:46] *** ChanServ sets mode: +v ilogger2

[21:48] <donaldh> rakudo: sub test($x is rw) { $x = 'Hello' }; sub indirect(|$args) { test(|$args) }; my $salutation; indirect($salutation); say $salutation;

[21:48] <p6eval> rakudo 405afa: OUTPUT«Hello␤»

[21:49] <donaldh> my $salutation; my $capture = \($salutation); $capture.list.values[0] = 'Hello'; say $salutation;

[21:49] <donaldh> rakudo: my $salutation; my $capture = \($salutation); $capture.list.values[0] = 'Hello'; say $salutation;

[21:49] <p6eval> rakudo 405afa: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/qflPi6hyqf␤»

[21:51] <donaldh> Is there any way to 'cast' a capture reference to be rw ?

[21:52] <donaldh> rakudo: my $x; my $capture = \($x is rw);

[21:52] <p6eval> rakudo 405afa: OUTPUT«===SORRY!===␤You can't backslash that at line 22, near "($x is rw)"␤»

[21:58] <donaldh> Do captures have to be readonly references in rakudo?

[21:59] <masak> rakudo: my $signature = :($x is rw); say $signature.^methods

[21:59] <p6eval> rakudo 405afa:

[21:59] <p6eval> ..OUTPUT«aritycountparamsACCEPTSperlNumericRealIntRatNumabsconjugateexploglog10sqrtrootsto-radiansfrom-radiansfloorceilingroundtruncatesigncisunpolarchrchrsrandsincostanseccoseccotansinhcoshtanhsechcosechcotanhasinacosatanatan2asecacosecacotanasinhacoshatanhasechacosechacotanhbytescapitaliz…

[21:59] <masak> rakudo: my $signature = :($x is rw); say $signature.params

[21:59] <p6eval> rakudo 405afa: OUTPUT«Parameter()<0x2d9b320>␤»

[21:59] <masak> rakudo: my $signature = :($x is rw); say $signature.params[0].name

[21:59] <p6eval> rakudo 405afa: OUTPUT«$x␤»

[22:00] <masak> rakudo: my $signature = :($x is rw); say $signature.params[0].^methods

[22:00] <p6eval> rakudo 405afa:

[22:00] <p6eval> ..OUTPUT«readonlynametypeconstraintsrwrefparcelcapturecopynamednamed_namesslurpyoptionaldefaultinvocantmulti_invocanttype_capturessignaturecanisadoeslistACCEPTSStrNumericSeqallanyonenonejoinelemsflatmapsortrotatefirstgrepreverseendminmaxminmaxpickrollclassifyreduceuniqkvkeysvaluespairspostc…

[22:00] <masak> rakudo: my $signature = :($x is rw); say $signature.params[0].readonly

[22:00] <p6eval> rakudo 405afa: OUTPUT«Bool::False␤»

[22:00] <masak> donaldh: I generally associate readonliness with signatures, not captures.

[22:01] <donaldh> masak: yep, but captures are readonly.

[22:01] <donaldh> masak: signatures can declare rwness but captures cannot.

[22:02] <masak> captures can't be *all* readonly, since they take part both in calling stuff and binding stuff.

[22:02] <donaldh> This makes it difficult / impossible to write a generic implementation sub.

[22:02] <masak> not sure I see what you mean.

[22:02] <masak> 'night, #perl6.

[22:04] <donaldh> zavolaj binds a generic impl to a sub ($x is rw) is native { ... }

[22:07] <donaldh> I can't find a way to use a capture to write to params that are defined is rw in the signature.

[22:20] *** st-16473 joined
[22:20] *** st-16473 left
[22:21] <donaldh> niecza: my $salutation; my $capture = \($salutation); $capture.list.values[0] = 'Hello'; say $salutation;

[22:21] <p6eval> niecza v4: OUTPUT«Unhandled exception: Unable to resolve method values in class List␤  at /tmp/V2fjkudTug line 1 (MAIN mainline @ 4)␤  at /home/p6eval/niecza/lib/CORE.setting line 1264 (CORE C525_ANON @ 2)␤  at /home/p6eval/niecza/lib/CORE.setting line 1265 (CORE module-CORE @ 39)␤  at

[22:21] <p6eval> ../home/p6eval/…

[22:22] <donaldh> std: my $salutation; my $capture = \($salutation); $capture.list.values[0] = 'Hello'; say $salutation;

[22:22] <p6eval> std 4608239: OUTPUT«ok 00:01 122m␤»

[22:33] <donaldh> rakudo: my $x; my $capture = \($x); $capture[0] = 'Hello'; say $x;

[22:33] <p6eval> rakudo 405afa: OUTPUT«Hello␤»

[22:37] *** icwiener_ joined
[22:42] *** plobsing joined
[22:48] *** st-16714 joined
[22:55] *** icwiener_ left
[22:57] *** st-16714 left
[22:57] *** nymacro joined
[22:58] *** flatwhatson joined
[23:02] *** plobsing left
[23:14] *** st-16890 joined
[23:29] *** icwiener joined
[23:51] *** st-16890 left
[23:54] *** st-17178 joined
[23:55] *** st-17178 left
[23:56] *** whiteknight joined
[23:59] *** [particle] joined
