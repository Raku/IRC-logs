[00:00] *** jerbraun is now known as jtbraun

[00:07] <dalek> niecza: 8840f61 | sorear++ | / (7 files):

[00:07] <dalek> niecza: Eliminate the lexical/let punning horror

[00:07] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8840f61dd5

[00:08] *** V15170R joined
[00:08] *** jtbraun left
[00:08] *** sftp left
[00:09] *** sftp joined
[00:11] *** jtbraun joined
[00:13] *** jtbraun left
[00:14] *** jtbraun joined
[00:14] *** x19290 joined
[00:19] *** x19290 left
[00:20] <V15170R> hi... a question: what do you use for testing perl6 modules?

[00:20] <masak> Test.pm

[00:20] <masak> it comes with Rakudo.

[00:20] * masak is using it right now

[00:21] *** risou joined
[00:22] *** x19290 joined
[00:23] *** perimosocordiae joined
[00:23] <masak> I tell you, Z=> and X=> are indeed very useful.

[00:24] *** stifynsemons left
[00:25] <masak> rakudo: sub foo(:$bar) { say $bar }; my @bar = 1, 2, 3; my %bar = baz => "OH HAI"; foo(:@bar, :%bar)

[00:25] <p6eval> rakudo 6f9116: OUTPUT«duplicate named argument in call␤  in main program body at line 22:/tmp/F05mEZMh3E␤»

[00:25] <masak> \o/

[00:26] <masak> which means it's not a good idea to have two attributes differing only in sigil, because then I can't pass both to a .new method.

[00:27] * jnthn wonders if that is warning-worthy.

[00:28] <jnthn> If you make them both with an accessor, it's probably error-worthy.

[00:29] *** V15170R left
[00:31] <sorear> Even if you don't ...

[00:31] <phenny> sorear: 18 Feb 22:18Z <moritz_> tell sorear please see branch p6_spectests on moritz/niecza -- t/run-spectests.pl should work as soon as you implement run() (tested with s/run/say/)

[00:32] <sorear> I'm fairly sure @!foo means @(self!foo) up to optimization

[00:32] <sorear> it makes no sense to have @!foo and $!foo; they'd necessarily alias

[00:33] <sorear> moritz_: um.  I'm amazed that works

[00:33] <jnthn> I'm fairly sure it doesn't mean that.

[00:33] <sorear> niecza wasn't designed to be reentrant D:

[00:34] <jnthn> @!foo is the name the attribute is stored under

[00:34] <jnthn> @!foo and $!foo live in separate slots.

[00:36] *** risou left
[00:37] *** takadonet left
[00:43] *** x19290 left
[00:49] *** s1n left
[00:52] *** takadonet joined
[00:58] *** jtbraun left
[01:01] *** Rotwang joined
[01:03] *** s1n joined
[01:04] *** JodaZ left
[01:05] *** lamstyle left
[01:09] *** jtbraun joined
[01:10] *** risou joined
[01:12] *** lamstyle joined
[01:15] <jnthn> sleep &

[01:15] <masak> wow, I'm staying up later than jnthn for once :P

[01:17] *** redicaps joined
[01:21] *** jaldhar joined
[01:32] *** coldhead joined
[01:42] *** risou left
[01:42] *** vmspb left
[01:53] <masak> 'night, #perl6

[01:53] <dalek> roast: 86cf1d1 | sorear++ | S04-statements/repeat.t:

[01:53] <dalek> roast: Fudge S04/repeat.t for Niecza

[01:53] <dalek> roast: review: https://github.com/perl6/roast/commit/86cf1d1071

[01:53] *** masak left
[01:54] <dalek> niecza: ac5d754 | sorear++ | / (3 files):

[01:54] <dalek> niecza: Initial implementations of unless and loop

[01:54] <dalek> niecza: review: https://github.com/sorear/niecza/commit/ac5d7547bc

[01:54] <dalek> niecza: 7b248ac | sorear++ | / (2 files):

[01:54] <dalek> niecza: Finish implementation of "loop"

[01:54] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7b248acedd

[01:54] <dalek> niecza: 2426a6c | sorear++ | / (2 files):

[01:54] <dalek> niecza: Implement 'repeat'

[01:54] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2426a6c8eb

[01:54] *** hudnix left
[01:54] *** hudnix joined
[01:57] *** nymacro joined
[02:04] *** noganex left
[02:04] *** risou joined
[02:06] *** noganex joined
[02:07] <dalek> niecza: a54d5d2 | sorear++ | src/niecza:

[02:07] <dalek> niecza: Support parsing 1.5e2 syntax

[02:07] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a54d5d2bf7

[02:11] *** whiteknight left
[02:18] *** Rotwang left
[02:29] <dalek> niecza: 39ac6c4 | diakopter++ | README.pod:

[02:29] <dalek> niecza: update on-windows runtime/build rqmts

[02:29] <dalek> niecza: review: https://github.com/sorear/niecza/commit/39ac6c4e96

[02:29] <dalek> niecza: 0c9ee16 | diakopter++ | src/niecza:

[02:29] <dalek> niecza: Merge branch 'master' of github.com:sorear/niecza

[02:29] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0c9ee16049

[02:36] *** redicaps left
[02:39] <diakopter> niecza: say 332.52.WHAT

[02:39] <p6eval> niecza v2-86-ga54d5d2: OUTPUT«Unhandled exception: System.InvalidCastException: Cannot cast from source type to destination type.␤  at Niecza.CtxStrNativeNum2Str.Get (Niecza.Variable obj) [0x00000] in <filename unknown>:0 ␤  at SAFE.C262_List_2Ejoin (Niecza.Frame ) [0x00000] in <filename unknown>:0

[02:39] <p6eval> ..␤  at Niecza…

[02:41] *** woosley joined
[02:48] *** jdhore left
[02:48] *** jdhore joined
[02:57] *** karupanerura joined
[03:04] *** stifynsemons joined
[03:12] <dalek> sprixel: f5ae65d | diakopter++ | sprixel/src/ (2 files):

[03:12] <dalek> sprixel: fix eval to match new EvalString sig

[03:12] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/f5ae65da17

[03:16] <dalek> niecza: 4de9ec8 | sorear++ | src/ (4 files):

[03:16] <dalek> niecza: Mergeback

[03:16] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4de9ec8aae

[03:16] <dalek> niecza: 7caeccd | sorear++ | TODO:

[03:16] <dalek> niecza: Remove decimal literals from TODO

[03:16] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7caeccd945

[03:20] *** stifynsemons left
[03:26] *** cls_bsd left
[03:31] *** cls_bsd joined
[03:33] *** jaldhar left
[03:33] *** jaldhar joined
[03:35] *** stifynsemons joined
[03:43] <dalek> sprixel: 76e661d | diakopter++ | sprixel/ (5 files):

[03:43] <dalek> sprixel: fixup the grammar a bit for class attributes

[03:43] <dalek> sprixel: separate out Functions into some "setting" files

[03:43] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/76e661db3c

[03:54] *** nsh_ joined
[03:58] *** [sbp] joined
[04:00] *** sbp left
[04:00] *** nsh left
[04:00] *** phenny left
[04:00] *** phenny joined
[04:07] *** kfo_ joined
[04:11] *** kfo left
[04:19] *** woosley left
[04:20] *** karupanerura left
[04:21] *** perimosocordiae left
[04:23] *** Su-Shee_ joined
[04:26] *** Su-Shee left
[04:34] *** phenny left
[04:34] *** plobsing left
[04:38] *** stifynsemons left
[04:39] *** phenny joined
[04:39] <dalek> sprixel: 2670f5d | diakopter++ | / (4 files):

[04:39] <dalek> sprixel: cleanup FrameGen.create wrt subName and constructor mode.. preparing for constructors

[04:39] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/2670f5d1ba

[04:45] *** woosley joined
[04:46] *** phenny left
[04:46] *** kfo_ left
[04:47] *** phenny joined
[04:47] *** kfo joined
[04:51] *** cdarroch left
[04:56] <dalek> sprixel: e743d50 | diakopter++ | sprixel/src/compiler/EmitterPass.cs:

[04:56] <dalek> sprixel: fix to evaluate all expression statements

[04:56] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/e743d505bb

[05:00] *** benabik left
[05:05] *** envi joined
[05:16] *** HarryS left
[05:41] *** woosley1 joined
[05:44] *** woosley left
[05:48] <dalek> niecza: 4333201 | sorear++ | / (2 files):

[05:48] <dalek> niecza: Implement m// and rx//

[05:48] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4333201894

[06:04] *** nymacro left
[06:09] *** benabik joined
[06:10] *** nymacro joined
[06:17] *** woosley1 left
[06:40] *** bacek left
[06:49] *** justatheory left
[06:50] *** justatheory joined
[06:53] *** bacek joined
[06:54] *** justatheory left
[06:56] <dalek> niecza: 407c528 | sorear++ | / (2 files):

[06:56] <dalek> niecza: Implement <&foo> call syntax

[06:56] <dalek> niecza: review: https://github.com/sorear/niecza/commit/407c52892f

[07:08] *** telegraphs joined
[07:10] <dalek> roast: e109c74 | sorear++ | S0 (2 files):

[07:10] <dalek> roast: Remove plans from S03/reduce and S04/for

[07:10] <dalek> roast: 

[07:10] <dalek> roast: These test files are too complicated for fudge to properly count the

[07:10] <dalek> roast: tests, so the plans become wrong if fudging is done.

[07:10] <dalek> roast: review: https://github.com/perl6/roast/commit/e109c74f5b

[07:10] <dalek> niecza: 4ef84b6 | sorear++ | t/ (2 files):

[07:10] <dalek> niecza: Switch to data-driven spectest driver (moritz)

[07:10] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4ef84b60b1

[07:14] *** telegraphs left
[07:19] * sorear out

[07:22] *** kaare_ joined
[07:49] <dalek> sprixel: 9460638 | diakopter++ | sprixel/src/ (3 files):

[07:49] <dalek> sprixel: finish Map & Capture, and realize that I already did constructors & class inheritance, but forgot about it.....!

[07:49] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/9460638bed

[08:05] *** risou_ joined
[08:07] <moritz_> good morning

[08:09] *** risou left
[08:10] *** redicaps joined
[08:13] *** redicaps left
[08:13] <tadzik> good morning

[08:14] *** woosley joined
[08:22] <jdhore> 'mornin

[08:34] <tadzik> o/

[09:09] <moritz_> niecza: say ?'0'

[09:09] <p6eval> niecza v2-93-g4ef84b6: OUTPUT«Bool::True␤»

[09:10] * moritz_ submits nieczabug

[09:10] <moritz_> niecza: say ?0

[09:10] <p6eval> niecza v2-93-g4ef84b6: OUTPUT«Bool::False␤»

[09:10] *** mtk left
[09:15] <moritz_> niecza: say 'ab-c'.split(/<.ws>/).perl

[09:15] <p6eval> niecza v2-93-g4ef84b6: OUTPUT«(timeout)»

[09:15] <moritz_> niecza: say 'ab-c'.split(/<.ws>/).perl

[09:16] <dalek> roast: 70fb660 | moritz++ | S32-str/bool.t:

[09:16] <dalek> roast: [S32] fudge str/bool.t for niecza (issue 38)

[09:16] <dalek> roast: review: https://github.com/perl6/roast/commit/70fb660d38

[09:16] <p6eval> niecza v2-93-g4ef84b6: OUTPUT«(timeout)»

[09:17] <moritz_> rakudo: say 'abc'.split(/^/).perl

[09:17] <p6eval> rakudo 6f9116: OUTPUT«("", "abc")␤»

[09:19] *** mtk joined
[09:21] *** Axius joined
[09:25] *** neroxx joined
[09:26] *** HarryS joined
[09:26] <dalek> roast: 91a8a1c | moritz++ | S03-metaops/not.t:

[09:26] <dalek> roast: fudge S03-metaops/not.t for niecza

[09:26] <dalek> roast: review: https://github.com/perl6/roast/commit/91a8a1cda1

[09:44] *** Su-Shee_ is now known as Su-Shee

[09:56] *** araujo left
[09:58] *** kst left
[09:59] *** kst joined
[10:01] *** envi left
[10:14] *** neroxx left
[10:14] *** neroxx joined
[10:28] *** neroxx left
[10:36] *** zenog joined
[10:41] *** Axius left
[10:53] *** kjeldahl_ joined
[10:54] *** rob_ joined
[10:55] *** coldhead left
[11:01] *** neroxx joined
[11:05] *** neroxx left
[11:09] <moritz_> rakudo: say 3.4 div 3.1

[11:09] <p6eval> rakudo 6f9116: OUTPUT«No applicable candidates found to dispatch to for 'infix:<div>'. Available candidates are:␤:(Int $a, Int $b)␤␤  in main program body at line 22:/tmp/7HHJORFZIv␤»

[11:09] <moritz_> should that coerce both arguments to Int first?

[11:09] *** rob_ left
[11:11] <moritz_> from http://stackoverflow.com/questions/5050210/perl6-rakudo-how-can-i-change-the-data-type-of-a-variable/5050447#5050447

[11:18] *** neroxx joined
[11:27] *** neroxx left
[11:33] <moritz_> rakudo: sub foo() { my @b = () }; foo( my @x = 1, 2 )

[11:33] <p6eval> rakudo 6f9116: OUTPUT«===SORRY!===␤Redeclaration of symbol @x at line 22, near " = 1, 2 )"␤»

[11:33] <moritz_> that's one of the weirdest rakudobugs I've seen in ages

[11:35] *** fhelmberger joined
[11:36] <dalek> roast: 632ffb7 | moritz++ | S0 (3 files):

[11:36] <dalek> roast: get rid of some unused (and partially wrong) lexicals; fudge for-scope.t for rakudo

[11:36] <dalek> roast: review: https://github.com/perl6/roast/commit/632ffb7e3c

[11:39] <dalek> roast: 7b46bb8 | moritz++ | S02-builtin_data_types/autovivification.t:

[11:39] <dalek> roast: [autovivification.t] get rid of unused variable warning; rakudo unfudges

[11:39] <dalek> roast: review: https://github.com/perl6/roast/commit/7b46bb818e

[11:44] *** masak joined
[11:44] <masak> ahojte, zebras.

[11:44] <dalek> roast: 4fb546e | moritz++ | S02-builtin_data_types/autovivification.t:

[11:44] <dalek> roast: use more previously unused variables

[11:44] <dalek> roast: review: https://github.com/perl6/roast/commit/4fb546e894

[11:44] <moritz_> \o masak

[11:44] <moritz_> rakudo: '10' div 5

[11:44] <dalek> rakudo: 2fc617f | moritz++ | t/spectest.data:

[11:44] <dalek> rakudo: run two more test files

[11:44] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/2fc617f8bf

[11:44] <p6eval> rakudo 6f9116: OUTPUT«No applicable candidates found to dispatch to for 'infix:<div>'. Available candidates are:␤:(Int $a, Int $b)␤␤  in main program body at line 22:/tmp/XtptbFV71w␤»

[11:45] *** whiteknight joined
[11:45] <moritz_> masak: would you think that should run (and coerce to int first)?

[11:45] <masak> moritz_: difficult one. div is sensitive to the actual types of the operands.

[11:45] <moritz_> masak: is it?

[11:46] <masak> yes, that's the point of it, IIRC.

[11:46] <moritz_> I thought it just operated on integers

[11:46] <masak> no, it used to do that.

[11:46] <moritz_> rakudo: say 5 div 2

[11:46] <p6eval> rakudo 6f9116: OUTPUT«2␤»

[11:46] <masak> then it got generalized to type-specific division.

[11:46] <masak> IIRC.

[11:46] <moritz_> C<< infix:<div> >>, integer division

[11:46] <moritz_> $numerator div $denominator

[11:46] <moritz_> Dispatches to the C<< infix:<div> >> multi most appropriate to the

[11:46] <moritz_> operand types, returning a value of the same type.

[11:46] <moritz_> Not coercive, so fails on differing types.

[11:47] <moritz_> you're right

[11:47] <masak> I think your #84438 might be another manifestation of my #77710.

[11:47] <moritz_> indeed, looks quite similar

[11:48] <moritz_> I'll merge

[11:49] <moritz_> I thought we mostly left such weird bugs behind us

[11:50] <masak> moritz_++

[11:50] <masak> yes, it's one of the strange holdouts.

[11:50] <masak> bet it'll be a blast to debug, as well :)

[11:50] <moritz_> niecza is fun right now

[11:50] <masak> oh?

[11:51] <moritz_> I found about 30 test files that it passed right out of the box

[11:51] <moritz_> and two or three that needed only minor fudging

[11:51] <moritz_> and two nieczabugs in the course

[11:51] <masak> wow!

[11:51] <masak> moritz_++

[11:51] <moritz_> all by running an adapted rakudo test mangling/running tools

[11:52] <masak> \o/

[11:54] <moritz_> so in summary, it seems that niecza is in LHF mode

[11:54] <moritz_> rakudo: say ?'00'

[11:54] <p6eval> rakudo 6f9116: OUTPUT«Bool::True␤»

[11:54] <moritz_> rakudo: say ?'0'

[11:54] <p6eval> rakudo 6f9116: OUTPUT«Bool::False␤»

[11:56] <masak> I wouldn't mind both being False.

[11:56] * moritz_ neither

[11:57] *** araujo joined
[11:57] <masak> for example, say, by first numifying the string and then boolifying it.

[11:57] <masak> conceptually.

[11:57] <moritz_> ?"foo"

[11:57] <masak> ah, no :0

[11:57] <masak> :)

[11:58] <moritz_> only if it parses as a string

[11:58] <moritz_> but that would be much more expensive than the current thing

[11:58] <jnthn> afternoon o/

[11:58] <moritz_> \o

[11:59] *** hudnix left
[12:00] *** hudnix joined
[12:01] <masak> o/

[12:02] <jnthn> Sunny day \o/

[12:03] *** araujo left
[12:07] *** araujo joined
[12:14] <masak> I had a wonderful hacking session last night. hoping to pick up where I left off today. :)

[12:15] <masak> I'm exploring Druid algorithms. writing a Dijkstras algorithm that uses two metrics alongside each other.

[12:16] <masak> all in Perl 6, of course.

[12:16] <jnthn> I had a wonderful sleeping session last night. Had a dream about Icelandic hot springs.

[12:17] <jnthn> I seem to have woken up with a bit of a cold though. :/

[12:17] *** Mowah joined
[12:18] <masak> well, you need to be careful when getting out of those hot springs...

[12:22] *** Rotwang joined
[12:32] <flussence> rakudo: my @actions = Mu, &note, &say, &return, &warn, &die; my $http-code = 404; @actions[$http-code div 100].name;

[12:32] <p6eval> rakudo 6f9116:  ( no output )

[12:32] <flussence> (oh duh, forgot .say again)

[12:33] <flussence> rakudo: (Mu, &note, &say, &return, &warn, &die)[404 div 100].name.say

[12:33] <p6eval> rakudo 6f9116: OUTPUT«&warn␤»

[12:33] *** takadonet left
[12:38] <flussence> (hmm, I think sep.t and sep2.t may be identical...)

[12:39] <masak> there's nothing to separate them? :P

[12:39] <flussence> if I'm reading this right, the only difference is one sets $Text::wrap::separator and one doesn't...

[12:40] <flussence> no, that can't be right

[12:40] <flussence> wrap.t doesn't set the separator

[12:42] *** masak` joined
[12:44] *** V15170R joined
[12:46] *** masak left
[12:46] *** masak` is now known as masak

[12:47] *** maja left
[12:47] *** maja joined
[12:47] <flussence> oh, the second one sets $Text::Wrap::separator2. That's a horrible variable name.

[12:49] <masak> variables from that naming scheme usually are :)

[12:50] <masak> a telltale sign is if there's no corresponding variable ending in '1'...

[12:51] <masak> 'x1, y1, x2, y2' is ok, but 'left, top, right, bottom' is usually better. :)

[12:52] <flussence> my understanding is that setting $separator makes it remove the input's newlines, while $separator2 leaves them there

[12:52] <flussence> I think it'd be much better with an $input-delimiter and $output-delimiter instead.

[12:52] <masak> +1

[13:00] *** kjeldahl left
[13:04] *** V15170R left
[13:08] *** Tene_ joined
[13:08] *** Tene_ left
[13:08] *** Tene_ joined
[13:08] *** wolv joined
[13:08] *** awwaiid_ joined
[13:08] *** risou joined
[13:09] *** jnthn_ joined
[13:09] *** __rnddim__ joined
[13:09] *** xinming_ joined
[13:09] *** gfldex_ joined
[13:10] *** solarion_ joined
[13:11] *** larsen_ joined
[13:13] *** benabik left
[13:13] *** risou_ left
[13:13] *** xinming left
[13:13] *** wolverian left
[13:13] *** awwaiid left
[13:13] *** solarion left
[13:13] *** Tene left
[13:13] *** lue left
[13:13] *** gfldex left
[13:13] *** arthur-_ left
[13:13] *** jnthn left
[13:13] *** flatwhatson left
[13:13] *** larsen left
[13:13] *** arthur-_ joined
[13:14] *** flatwhatson joined
[13:16] <masak> it's stormy on IRC today.

[13:17] *** jaldhar left
[13:17] *** jaldhar joined
[13:19] *** jnthn_ is now known as jnthn

[13:19] *** plobsing joined
[13:19] <moritz_> rakudo: subset A of Int { }; say A; say A.perl

[13:19] <p6eval> rakudo 6f9116: OUTPUT«===SORRY!===␤Confused at line 22, near "subset A o"␤»

[13:20] <moritz_> rakudo: subset A of Int where *; say A; say A.perl

[13:20] <p6eval> rakudo 6f9116: OUTPUT«Int()␤Int␤»

[13:20] <colomon> rakudo: subset A of Int where * > 10; say A; say A.perl

[13:20] <p6eval> rakudo 6f9116: OUTPUT«Int()␤Int␤»

[13:21] <jnthn> Those probably want to say A() and A

[13:21] <jnthn> That'll be an easy fix in the nom branch, but it's hard to do now.

[13:22] <colomon> I was just justifying to myself why they should say Int.  :)

[13:23] <colomon> nom++

[13:27] <moritz_> I'm trying to include actual and constraint types in the "Type check failed for assignment" error message

[13:27] <moritz_> that will be confusing for subsets for now

[13:27] *** wolv is now known as wolverian

[13:32] <moritz_> $ ./perl6 -e 'my Str $x = 34'

[13:32] <moritz_> Type check failed for assignment Container type: Str got: Int

[13:33] *** [sbp] is now known as sbp

[13:33] <masak> jnthn++ nom++

[13:33] <masak> subtypes will have their own metaclasses, right?

[13:33] <moritz_> sounds right

[13:33] <masak> what about enums?

[13:34] <jnthn> yeah, though I prefer the term "meta-object", since talking about something that's not a class having a metaclass feels odd ;)

[13:34] <masak> oops, indeed.

[13:34] <masak> meta-thingies.

[13:34] *** gfldex_ is now known as gfldex

[13:34] <jnthn> enums - didn't think too hard about them yet, but would make sense for them to

[13:35] <jnthn> How low-level they are is...kinda interesting to think about.

[13:35] <jnthn> I mean, if Bool is an enum...it needs to be declared pretty early on.

[13:35] <moritz_> we could even say that Int is an infinite enum :-)

[13:37] <jnthn> Well, seen that way it's as if enums are just a kind of instantiable subset types or something.

[13:38] <moritz_> jnthn: should &infix:<=> have a 'invizble_frame' annotation?

[13:39] <masak> I suspect 'infinite enum' is near to an oxymoron.

[13:39] <masak> and in contrast to Bool, the values of Int are literals, not identifiers.

[13:39] <moritz_> the error message already says "in assignment", so I don't see much value in having it appear in the stack traces

[13:39] <jnthn> masak: You can enumerate an infinite set, it just takes a while. :)

[13:40] <jnthn> moritz_: If you feel we get a win on the error messages by doing so, feel free. That's the only reason it exists.

[13:40] <masak> right, but the Perl 6 concept of 'enum' doesn't just mean 'enumerable'.

[13:40] <jnthn> masak: I know, I know. :)

[13:40] <jnthn> masak: Note that literals can sometimes sit in type slots, though.

[13:40] <jnthn> multi fact(0) { 1 }

[13:40] <masak> yeah, that's my fault :P

[13:41] <jnthn> Just blame ML. :P

[13:41] * masak is happy that change went through

[13:41] * jnthn too

[13:41] <masak> everyone else seems happy about it as well.

[13:41] <jnthn> I writed cute examples of multi-dispatch thanks to it :)

[13:42] <moritz_> jnthn: does 0 actually sit in the type slot, or is it sugar for  Int $ where 0  ?

[13:43] <jnthn> moritz_: Sugar.

[13:43] <jnthn> moritz_: We infer the type of the constant.

[13:43] *** jdhore left
[13:43] <moritz_> right, we just call .WHAT at compile time

[13:43] <jnthn> Pretty much.

[13:43] <masak> jnthn: what type would you infer from Inf? :P

[13:43] <moritz_> rakudo: say Inf.WHAT

[13:43] <p6eval> rakudo 6f9116: OUTPUT«Num()␤»

[13:44] <moritz_> maybe it should cheat and say Real instead :-)

[13:44] <masak> rakudo: say 5 ~~ 3..Inf

[13:44] <p6eval> rakudo 6f9116: OUTPUT«Bool::True␤»

[13:44] <masak> moritz_: I think it should.

[13:44] <jnthn> moritz_: Not sure, apparently Inf is menat to go in Int slots too

[13:44] <masak> moritz_: but it's worse than that. Inf needs to be an Int and a Num.

[13:44] <jnthn> moritz_: Though that feels...magical... :/

[13:44] <masak> that's the "problem" with Inf.

[13:44] <masak> it's two types at once.

[13:45] <jnthn> So I'll mostly hope somebody else figures out how that really works.

[13:45] <masak> three, if you count Str.

[13:45] <moritz_> just like <1 2>

[13:45] <masak> oh wait, maybe we use * for Str.

[13:45] <moritz_> which is also Int and Str

[13:45] <jnthn> Well, what bothers me is how it interacts with assignment.

[13:45] <jnthn> And if we end up with a check every assignment or something

[13:46] <masak> why does that bother you?

[13:46] <jnthn> Performance?

[13:47] <masak> well, testing for two types seems it'd only be twice as slow as testing for one type.

[13:47] <masak> and there are probably ways to make it hurt less.

[13:47] <jnthn> Perhaps.

[13:47] <jnthn> I just get nervous when stuff wants to play fast and loose with the type system.

[13:57] <plobsing> why is something being two types at once problematic? isn't that what multiple inheritance is for?

[13:59] <jnthn> .oO( You have a problem. You solve it with multiple inheritance. Now you have two problems. )

[14:00] <jnthn> plobsing: It may actually work though. :)

[14:00] *** woosley left
[14:00] <jnthn> We end up with a type that has an int slot and a num slot...hm. :)

[14:00] <plobsing> Now you have N problems. FTFY

[14:03] *** woosley joined
[14:03] *** woosley left
[14:05] *** risou_ joined
[14:09] *** kfo left
[14:09] *** risou left
[14:16] <masak> I'm not really married to any specific solution with Inf.

[14:16] <masak> I'm hoping it won't come to IntInf and NumInf :)

[14:16] <jnthn> I'd have a fling with the multiple inheritance solution, but I'd certainly not marry it.

[14:17] <jnthn> No, IntInf and NumInf are...ugly.

[14:17] <masak> yeah.

[14:17] <masak> maybe Inf desugars to different things depending on context? that'd be one way to avoid MI.

[14:17] <masak> it'd be a different ugliness, though.

[14:17] <jnthn> Yeah

[14:18] <masak> the trick is to push at the humps until the waterbed looks smooth :P

[14:18] *** arthur-_ left
[14:24] *** plobsing left
[14:30] *** plobsing joined
[14:34] *** plobsing left
[14:55] *** Axius joined
[14:55] *** plobsing joined
[14:56] *** Chillance joined
[14:57] *** zby_home joined
[15:00] *** plobsing left
[15:06] *** Axius left
[15:13] <masak> rakudo: my @a = 4 ?? 1, 2, 3 !! 7, 8, 9; say ~@a

[15:13] <p6eval> rakudo 6f9116: OUTPUT«===SORRY!===␤Confused at line 22, near "my @a = 4 "␤»

[15:14] <masak> std: my @a = 4 ?? 1, 2, 3 !! 7, 8, 9; say ~@a

[15:14] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Precedence of , is too loose to use between ?? and !!; please use parens around inner expression at /tmp/mMU9JrquHO line 1:␤------> my @a = 4 ?? 1,⏏ 2, 3 !! 7, 8, 9; say ~@a␤Parse failed␤FAILED 00:01 121m␤»

[15:14] <masak> rakudo: my @a = 4 ?? (1, 2, 3) !! 7, 8, 9; say ~@a

[15:14] <p6eval> rakudo 6f9116: OUTPUT«1 2 3 8 9␤»

[15:14] <masak> rakudo: my @a = 4 ?? (1, 2, 3) !! (7, 8, 9); say ~@a

[15:14] <p6eval> rakudo 6f9116: OUTPUT«1 2 3␤»

[15:16] <masak> "on the other hand, if you're doing fancy stuff with lists, maybe it's time to migrate from ?? !! to something more structured? like, an if statement?" :)

[15:35] *** neroxx joined
[15:37] *** HarryS left
[15:45] *** kjeldahl joined
[15:49] <dalek> rakudo: 14319fc | moritz++ | / (2 files):

[15:49] <dalek> rakudo: make assignment type check errors more informative

[15:49] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/14319fca88

[15:49] <masak> \o/

[15:53] <colomon> moritz_++

[15:53] <flussence> is that what I think it is? :D

[15:54] <moritz_> flussence: depends on what you think of

[15:55] <moritz_> somehow rebuilding is borked on p6eval server

[15:55] <moritz_> rakudo: say 1

[15:55] <p6eval> rakudo 6f9116: OUTPUT«1␤»

[15:56] <moritz_> this is like... so old

[15:57] <flussence> Feb 14th?!

[15:57] <moritz_> valentine's day

[15:57] <flussence> oh, that reminded me, I'm going to try and get try.rakudo on something up to date.

[15:57] <moritz_> \o/

[15:58] <moritz_> std: 1

[15:58] <p6eval> std 625303c: OUTPUT«ok 00:01 117m␤»

[15:59] <moritz_> that is... ancient

[15:59] <moritz_> Date:   Thu Dec 16 08:36:53 2010 -0800

[16:00] <colomon> woah

[16:01] * colomon was not impressed with valentine's day as "so old", but December 16th is definitely ancient.

[16:02] <moritz_> turns out we don't have a rebuild script for std

[16:03] <flussence> I think this beats them by a long shot:

[16:03] <flussence> → say $*PERL␤name    rakudo␤version    2010.09-3-ga820a44

[16:04] <dalek> evalbot: d055ab5 | moritz++ | build-scripts/rebuild-std.sh:

[16:04] <dalek> evalbot: build script for STD

[16:04] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/d055ab5f17

[16:05] *** zenog left
[16:06] *** zenog joined
[16:09] <tadzik> o/

[16:13] *** zenog left
[16:13] *** zenog joined
[16:15] <moritz_> rakudo: my Int $x = "foo";

[16:15] <p6eval> rakudo : OUTPUT«Type check failed for assignment␤    Container type: Int␤               Got: Str␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/g2udax_ZWT␤»

[16:15] *** jdhore joined
[16:16] *** Patterner left
[16:16] <moritz_> std: 1

[16:16] <p6eval> std 4608239: OUTPUT«ok 00:01 118m␤»

[16:18] *** stifynsemons joined
[16:18] *** Psyche^ joined
[16:18] *** Psyche^ is now known as Patterner

[16:19] *** cognominal left
[16:19] *** cognominal joined
[16:21] <moritz_> rakudo: my $x = 3; say <<$x>>

[16:21] <p6eval> rakudo : OUTPUT«$x␤»

[16:21] <flussence> rakudo: say $*PERL

[16:21] <p6eval> rakudo : OUTPUT«name    rakudo␤version  2011.02-4-g14319fc␤␤»

[16:25] *** zenog left
[16:26] *** zenog joined
[16:30] *** orafu left
[16:30] *** zenog left
[16:39] *** ggoebel left
[16:40] *** ggoebel joined
[16:52] *** ggoebel left
[16:58] *** mtk left
[16:59] *** eternaleye left
[16:59] *** eternaleye joined
[17:02] *** ymasory joined
[17:07] *** mtk joined
[17:09] <flussence> → say $*PERL␤name    rakudo␤version 2011.02-4-g14319fc␤

[17:09] <flussence> \o/

[17:10] <tadzik> (:

[17:12] *** s1n left
[17:14] <masak> rakudo: say $*PERL.WHAT

[17:14] <p6eval> rakudo : OUTPUT«Hash()␤»

[17:15] <masak> S28 has this as Application.

[17:15] <masak> should be LHF for anyone wanting to fix.

[17:16] <masak> also, the entry for $?PERL says 'Which Perl am I compiled for?'

[17:16] <masak> I would have expected 'compiled *by*' there, but I'm not 100% sure that 'compiled for' is wrong, either.

[17:17] *** HarryS joined
[17:18] <masak> I think S28:97 is a fossil: $?GRAMMAR

[17:18] <masak> isn't that handled by slangs nowadays?

[17:19] <masak> also, what's the difference between $*EXECUTABLE_NAME and $*PROGRAM_NAME ?

[17:20] <masak> ah, %?LANG seems to be what replaces $?GRAMMAR nowadays.

[17:22] *** kjeldahl left
[17:24] <masak> $?SCOPE, for keeping track of the current lexical scope, has a comment '(XXX unnecessary?)'. that, in my opinion, is the wrong way to add features. :) I motion for immediate removal.

[17:24] <masak> s/motion/move/

[17:25] <masak> lastly, $?XVM, "which virtual machine am I cross-compiling for", seems to me completely over the top.

[17:28] *** s1n joined
[17:31] <masak> hm, or maybe not... :)

[17:33] *** s1n left
[17:37] *** justatheory joined
[17:37] *** justatheory left
[17:40] *** literal left
[17:42] *** literal joined
[17:42] *** MayDaniel joined
[17:59] <allbery_b> but $?TARGET or similar?

[18:13] *** Kovensky left
[18:16] *** Kovensky joined
[18:18] <masak> the name is fine, I was just wondering whether something like that'd ever find a use.

[18:18] <masak> I guess in a world with several stable VMs for Perl 6, it might well.

[18:20] <tadzik> hugme: hug me

[18:20] * hugme hugs tadzik

[18:20] <tadzik> hugme: thanks

[18:26] *** s1n joined
[18:27] *** justatheory joined
[18:28] *** justatheory left
[18:28] *** justatheory joined
[18:40] <sorear> good * #perl6

[18:40] <moritz_> good morning sorear 

[18:42] <sorear> moritz_: right now every niecza process assumes exclusive access to obj/MAIN.exe; I am very nervous of solutions that involve multiple concurrent such processes

[18:43] <sorear> even if Mono handles the case of obj/MAIN.exe being overwritten while it is being run fine, other CLRs might now

[18:43] <sorear> not

[18:43] *** jferrero joined
[18:44] <sorear> (this will be fixed after the v3 release; I have a new backend interface that doesn't rely quite so much on files, but it needs to wait for a bootstrap cycle)

[18:45] <moritz_> sorear: the last two or three pull requests should only invoke one Niecza instance at a time

[18:46] <sorear> jnthn: Hi!  I'd like to talk about subsets.

[18:47] *** perimosocordiae joined
[18:48] <tadzik> niecza: my $a; $a += 5; say $a

[18:48] <p6eval> niecza v2-93-g4ef84b6: OUTPUT«Unhandled exception: Unable to resolve method Numeric in class Any␤  at  line 0 (ExitRunloop @ 0)␤  at /tmp/t4L7nNbBE8 line 1 (MAIN mainline @ 1)␤  at /home/p6eval/niecza/lib/SAFE.setting line 1189 (SAFE C492_ANON @ 2)␤  at /home/p6eval/niecza/lib/SAFE.setting line

[18:48] <p6eval> ..1190 (SAFE modul…

[18:48] <tadzik> bug or not?

[18:49] <sorear> it's a bug

[18:49] <sorear> I don't have a good general answer for how identities should work though

[18:49] <moritz_> rakudo: my $a; $a *= 5; say $a

[18:49] <p6eval> rakudo : OUTPUT«5␤»

[18:50] <moritz_> sorear: multi infix:<*>() { 1 } provides the default if the LHS is not .defined

[18:50] *** s1n left
[18:51] <moritz_> niecza: say [+]()

[18:51] <p6eval> niecza v2-93-g4ef84b6: OUTPUT«0␤»

[18:51] <moritz_> niecza: say [*]()

[18:51] <p6eval> niecza v2-93-g4ef84b6: OUTPUT«0␤»

[18:51] <moritz_> should be 1

[18:51] <moritz_> rakudo: say [*]()

[18:51] <p6eval> rakudo : OUTPUT«1␤»

[18:51] <moritz_> sorear: do you want a bug report for that one?

[18:53] <sorear> no

[18:53] <sorear> it's not an isolated bug

[18:53] <sorear> it's part of the "MMD" todo item

[18:54] <moritz_> is MMD mostly NYI?

[18:54] <sorear> yes

[18:55] <masak> good *, sorear.

[18:56] <masak> moritz_: is there a rakudobug filed for [*]() ?

[18:57] *** s1n joined
[18:58] <moritz_> masak: what's wrong about it?

[18:59] <sorear> jnthn: What makes class { } tractable while BEGIN { } is not?

[19:15] <dalek> niecza: c7b8bcf | moritz++ | lib/Kernel.cs:

[19:15] <dalek> niecza: fix issue 38, boolification of Str

[19:15] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c7b8bcffcb

[19:15] <dalek> niecza: f565da2 | sorear++ | t/spectest.data:

[19:15] <dalek> niecza: Tiny whitespace fix

[19:15] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f565da2e34

[19:15] <dalek> niecza: 079b5d7 | sorear++ | lib/SAFE.setting:

[19:15] <dalek> niecza: Remove methods from SAFE.setting that conflict with Kernel

[19:15] <dalek> niecza: review: https://github.com/sorear/niecza/commit/079b5d79ba

[19:18] *** bacek left
[19:23] *** TiMBuS left
[19:23] *** TiMBuS joined
[19:24] <masak> moritz_: oh! nothing. my brain saw 'rakudo:' where it really said 'niecza:'

[19:25] <dalek> niecza: acab388 | moritz++ | t/update_passing_test_data.pl:

[19:25] <dalek> niecza: script for finding passing spectest files

[19:25] <dalek> niecza: 

[19:25] <dalek> niecza: Imported and adapted from Rakudo.

[19:25] <dalek> niecza: review: https://github.com/sorear/niecza/commit/acab388003

[19:25] <dalek> niecza: 1e36fcc | sorear++ | t/spectest.data:

[19:25] <dalek> niecza: Merge remote branch 'moritz/more-spectests'

[19:25] <dalek> niecza: review: https://github.com/sorear/niecza/commit/1e36fcc761

[19:25] * sorear has been playing games with git-rebase and git-cherry-pick

[19:32] *** kjeldahl joined
[19:32] *** bacek joined
[19:32] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[19:49] *** justatheory left
[19:52] *** ymasory_ joined
[19:59] *** dju_ joined
[20:03] *** dju left
[20:08] *** risou_ left
[20:10] *** risou joined
[20:38] *** plobsing joined
[20:51] <donri_> "unlike Perl 5 you always get a copy of the right side data assigned to the left"  isn't that expensive?

[20:52] <moritz_> context?

[20:53] <donri_> assignment with =

[20:54] *** fhelmberger left
[20:55] <moritz_> copy != deep copy

[20:55] *** neroxx left
[20:55] <moritz_> often only a reference is copied

[20:56] <donri_> http://www.perlfoundation.org/perl6/index.cgi?perl_6_variable_tablet#binding

[20:56] <donri_> "no matter how nested the data structure was (lists of lists eg)"

[20:56] <donri_> "You never get in Perl 6 a reference with =."

[20:57] <moritz_> donri_: don't believe eevrything that lichtkind writes :/

[20:58] <donri_> I don't know who that is

[20:58] <moritz_> the author of the perl 6 tablets

[20:58] *** bemjb left
[20:58] <donri_> Are those bad then?

[21:00] <moritz_> I haven't reviewed them yet; but the statement that = does a deep clone is simply wrong.

[21:03] *** gdey joined
[21:04] <flussence> "eval $struct.perl" on the other hand, usually will

[21:04] <flussence> (even if it is slow)

[21:05] <masak> "You never get in Perl 6 a reference with =." -- the level of English in that short snippet begs for editing.

[21:05] <moritz_> that's another problem with lichtkind

[21:05] <masak> yes.

[21:06] <moritz_> but I often don't understand his German either :/

[21:06] <[Coke]> feedback to lichtkind on those tablets is appreciated.

[21:07] <masak> what he lacks in language and insight into Perl 6 he makes up, one hopes, in enthusiasm.

[21:07] <masak> and others can provide the language and insight.

[21:07] <masak> 'enthusiasm' meaning 'time', 'tuits', 'energy' and so on.

[21:08] *** shlomo_z joined
[21:14] *** kaare_ left
[21:22] *** icwiener joined
[21:23] *** justatheory joined
[21:23] *** whiteknight left
[21:27] *** coldhead joined
[21:30] *** shlomo_z left
[21:33] *** cogno joined
[21:35] *** jmmills_ left
[21:38] *** hudnix left
[21:47] *** risou left
[21:51] *** cogno left
[22:23] <masak> rakudo: say "2-b4" - 1

[22:23] <p6eval> rakudo : OUTPUT«1␤»

[22:24] *** zby_home left
[22:26] <sorear> niecza: say "2-b4" - 1 # broken?

[22:26] <p6eval> niecza v2-99-g1e36fcc: OUTPUT«Unhandled exception: System.FormatException: Unknown char: -␤  at System.Double.Parse (System.String s, NumberStyles style, IFormatProvider provider) [0x00000] in <filename unknown>:0 ␤  at System.Double.Parse (System.String s) [0x00000] in <filename unknown>:0 ␤  at

[22:26] <p6eval> ..SAFE.C92_Str_2…

[22:29] <diakopter> perlesque: say(Double.Parse('2-b4'))

[22:29] <p6eval> perlesque: OUTPUT«␤Unhandled Exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.FormatException: Unknown char: -␤  at System.Double.Parse (System.String s, NumberStyles style, IFormatProvider provider) [0x00000] in <filename

[22:29] <p6eval> ..…

[22:29] *** masonkramer joined
[22:31] <sorear> reflection, diakopter?

[22:32] <diakopter> I guess that's the System.Activator Run wrapper

[22:32] <diakopter> I could have it catch exceptions there and throw the inner one

[22:33] <diakopter> (unwrap it one level)

[22:40] *** kjeldahl_ left
[22:43] <dalek> sprixel: d7c5167 | diakopter++ | sprixel/src/ (3 files):

[22:43] <dalek> sprixel: unwrap exceptions one level sorear++

[22:44] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/d7c5167d59

[22:46] *** rdesfo joined
[22:48] *** gdey left
[22:49] *** hudnix joined
[22:49] <dalek> sprixel: fd633c2 | diakopter++ | sprixel/src/perlesque/setting/Cursor.pl6:

[22:49] <dalek> sprixel: actually add setting/Cursor.pl6

[22:49] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/fd633c2ab0

[22:50] <diakopter> there we go:

[22:50] <diakopter> perlesque: Double.Parse('2-b4')

[22:50] <p6eval> perlesque: OUTPUT«␤Unhandled Exception: System.FormatException: Unknown char: -␤  at System.Double.Parse (System.String s, NumberStyles style, IFormatProvider provider) [0x00000] in <filename unknown>:0 ␤  at System.Double.Parse (System.String s) [0x00000] in <filename unknown>:0 ␤  at

[22:50] <p6eval> ..top_level_fra…

[22:51] <diakopter> moritz_: what do you think about stderr output being in a different color :)

[22:51] *** masak left
[22:51] <diakopter> that sent masak running... ;)

[22:53] *** masak joined
[22:53] <moritz_> diakopter: what kind of color codes would you use? IRC colors?

[22:54] <moritz_> and how would that interact with STD's ANSI color codes?

[22:55] *** fhelmberger joined
[22:55] *** fhelmberger left
[22:55] <diakopter> moritz_: I don't know; what would you suggest if someone were imagining such color distinction

[22:56] *** fhelmberger joined
[22:56] <moritz_> diakopter: I don't really know enough about IRC colors

[22:56] <moritz_> diakopter: usually I find them annoying

[22:57] <diakopter> ansi colors then? folks don't seem to mind them in std

[22:59] <diakopter> perhaps since non-errors are by far the exception, respones that did not have any output on stderr could get a colored marker prefixed.. (such as maybe the OUTPUT marker could be green?)

[23:00] *** masak left
[23:01] *** masak joined
[23:04] <diakopter> evalbot control restart

[23:04] *** p6eval left
[23:04] *** p6eval joined
[23:04] *** ChanServ sets mode: +v p6eval

[23:04] <masak> rakudo: say ("15" - 1).WHAT

[23:04] <p6eval> rakudo : OUTPUT«Num()␤»

[23:04] * masak expected Int

[23:04] <dalek> evalbot: 5548f2a | (Perl 6 Evalbot)++ | evalbot.pl:

[23:04] <dalek> evalbot: make p6eval perlesque use --gc=sgen with mono 2.8.2

[23:04] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/5548f2ad97

[23:04] <dalek> evalbot: 3b08081 | (Perl 6 Evalbot)++ | build-scripts/rebuild-std.sh:

[23:04] <dalek> evalbot: Merge branch 'master' of github.com:perl6/evalbot

[23:04] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/3b08081237

[23:05] <masak> but I guess this is another manifestation of prefix:<=> not being specific enough.

[23:05] <diakopter> sigh; my fault (merge branch master)

[23:05] <masak> s'ok. we all accidentally merge sometimes ;)

[23:06] <moritz_> diakopter: did anybody have a problem wrt not being able to distinguish STD{OUT,ERR}? If not, it's probably overengineering

[23:08] <diakopter> no; ok :)

[23:11] <masak> I have a bug inside a large-ish class whose only explanation seems to be lexpad corruption. :/

[23:12] <masak> not sure where to even start minimizing this one.

[23:13] <masak> the signature binding fails inside a map block. the variable $row fails to bind -- an Int is expected, but a Node is found in $row instead. (Node is a class defined in the script)

[23:13] <masak> now, $row is simply the loop variable of the map block, and the map block loops over ^$size, which is an Int.

[23:13] <masak> so, in short, this shouldn't happen.

[23:14] *** amkrankruleuen left
[23:15] *** amkrankruleuen joined
[23:16] <moritz_> 00:12 < masak> not sure where to even start minimizing this one.

[23:16] <moritz_> delete as much code as you can while keeping the code running

[23:16] <masak> :)

[23:16] <moritz_> and after each deletion, test again

[23:16] <moritz_> standard procedure :-)

[23:17] <diakopter> evalbot control restart

[23:17] *** p6eval left
[23:17] *** p6eval joined
[23:17] <masak> yes, that's not the part I'm unsure about...

[23:17] *** ChanServ sets mode: +v p6eval

[23:17] * masak starts by trying to run the failing test in isolation

[23:19] <masak> yes, it does. oh joy. we're in business.

[23:22] *** starcoder left
[23:24] *** starcoder joined
[23:32] <dalek> sprixel: eab4005 | diakopter++ | sprixel/ (2 files):

[23:32] <dalek> sprixel: tweaks for p6eval & mono

[23:32] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/eab4005868

[23:33] <masak> ok, bug found. it was in me, not in Rakudo. rakudo++ masak--

[23:33] <dalek> sprixel: c63c345 | diakopter++ | sprixel/Program.cs:

[23:33] <dalek> sprixel: remove debug code; sigh

[23:33] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/c63c345442

[23:33] <cognominal> masak++  autoflagelation--

[23:34] <masak> also, moritz_ for encouraging the minimization.

[23:34] <cognominal> autoflagellation--

[23:34] <masak> moritz_++

[23:35] <masak> actually, publicly dissecting bugs tends to lower one's tendency to cry wolf like this :)

[23:35] <dalek> sprixel: c9d6038 | diakopter++ | sprixel/src/compiler/PerlesqueEval.cs:

[23:35] <dalek> sprixel: another tweak

[23:35] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/c9d60384e7

[23:35] <diakopter> sorry for the dalek noise :(

[23:36] <jdhore> parrot++, they merged GenGC :D

[23:36] <masak> \o/

[23:36] <masak> parrot++

[23:36] <masak> bacek++

[23:37] * diakopter waits for a build, rakudo make test

[23:37] <diakopter> (not me, I mean)

[23:38] <jdhore> Didn't someone "relevant" say that GenGC made Rakudo 20-30% faster?

[23:41] <diakopter> relevant how?

[23:42] <jdhore> Someone who wasn't trolling/trying to be stupid.

[23:43] <jdhore> (I can't remember who i heard that from so I don't know...)

[23:43] <diakopter> (if you thought I was trolling/trying to be stupid, I wasn't.. fyi) :)

[23:49] <colomon> Is there already a Rakudo branch with the changes needed to support GenGC?

[23:49] <masak> no, but I've been successfully building Rakudo with a certain commit.

[23:49] <masak> hold on.

[23:50] <masak> 76cd24a

[23:50] <colomon> That's a Parrot commit?

[23:50] <masak> no, a Rakudo commit.

[23:50] <masak> since it hasn't been reverted, my guess is that Rakudo runs fine with the merged GenGC in Parrot.

[23:51] <masak> the only reason I couldn't build with newer Rakudos was that they required newer Parrots.

[23:52] <colomon> So in theory, all we need to do is bump PARROT_REVISION and we're good to go?!!

[23:53] <masak> at a guess, yes.

[23:53] <masak> the write barriers have already been added in.

[23:53] <colomon> moritz_, are you thinking what I'm thinking?  ;)

[23:54] <masak> unless moritz_ is sleeping...

[23:54] <colomon> (probably not, because what I'm thinking is "How the heck do you bump PARROT_REVISION now?"

[23:54] <colomon> )

[23:54] <masak> :P

[23:55] <colomon> afk # need to rearrange toddler room instead of applying amazing patch to Rakudo.  :(

[23:55] <masak> 'night, #perl6

[23:55] <colomon> o\

[23:56] *** masak left
