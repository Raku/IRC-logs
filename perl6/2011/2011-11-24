[00:01] *** am0c left
[00:01] *** oluoluo joined
[00:01] *** oluoluo left
[00:03] *** am0c joined
[00:07] *** Moukeddar left
[00:18] *** replore joined
[00:35] *** wolfman2000 joined
[01:13] *** whiteknight joined
[01:21] *** alvis left
[01:22] *** hundskatt left
[01:22] *** alvis joined
[01:23] *** whiteknight is now known as Guest26113

[01:32] *** bonsaikitten joined
[01:40] *** lestrrat left
[01:41] *** lestrrat joined
[01:45] *** wolfman2000 left
[01:50] *** lutok joined
[01:57] *** lutok left
[02:02] *** packetknife joined
[02:05] *** daniel__ joined
[02:05] *** daniel__ left
[02:06] *** daniel__ joined
[02:22] <djanatyn> juts submitted my first google code-in task :)

[02:23] <djanatyn> *just

[02:29] *** drbean left
[02:36] *** drbean joined
[02:37] *** Guest26113 left
[02:37] *** whiteknight joined
[02:37] *** whiteknight is now known as Guest5111

[02:38] *** wolfman2000 joined
[02:40] *** daniel__ left
[02:44] *** Guest5111 left
[02:45] *** cognominal left
[02:47] *** skangas joined
[02:58] *** packetknife left
[03:00] *** satyavvd joined
[03:25] *** jaldhar joined
[03:29] *** benabik left
[03:48] <diakopter> you're a sparticle

[03:59] *** abercrombie left
[04:00] *** abercrombie joined
[04:07] *** abercrombie left
[04:16] *** birdwindupbird joined
[04:16] *** abercrombie joined
[04:47] *** Chillance joined
[05:12] *** sftp left
[05:18] *** drbean left
[05:24] *** envi_ joined
[05:25] *** drbean joined
[05:59] *** worr left
[05:59] *** worr joined
[06:00] *** localhost left
[06:01] *** localhost joined
[06:03] *** kaleem joined
[06:05] *** mkramer joined
[06:23] *** mkramer left
[06:24] *** mkramer joined
[06:45] *** hundskatt joined
[07:03] *** wtw joined
[07:06] *** koban joined
[07:10] *** Sarten-X left
[07:18] *** Sarten-X joined
[07:29] *** mkramer left
[07:32] *** am0c left
[08:02] *** birdwindupbird left
[08:09] *** replore left
[08:23] *** mj41 joined
[08:36] *** hundskatt left
[08:36] *** mkramer joined
[08:44] *** sayu joined
[08:47] *** mkramer left
[08:47] *** mkramer1 joined
[08:56] *** mkramer1 left
[08:56] *** mkramer joined
[09:06] *** mkramer left
[09:15] *** am0c joined
[09:17] *** Mowah_ joined
[09:20] *** mkramer joined
[09:31] *** mj41 left
[09:32] *** molaf joined
[09:36] *** molaf left
[09:38] *** mkramer left
[09:39] *** mkramer joined
[09:40] *** dakkar joined
[09:42] <jnthn> morning

[09:43] <moritz> \o

[09:45] *** mj41 joined
[09:45] <jnthn> Quiet here today!

[09:45] *** am0c left
[09:45] *** mkramer left
[09:46] <moritz> I'm trying to make my way through the dyncall build system

[09:47] <moritz> it uses a lot of includes

[09:48] *** tzhs joined
[09:51] <jnthn> moritz: yeah...it seems to be trying to do the Right Thing for lots of different platforms. Though not sure how well that actaully works out ;)

[09:51] <jnthn> My hope was that we can mostly just delegate to it.

[09:51] <moritz> jnthn: seems there's an easy-ish fix for my build problem

[09:51] <jnthn> yay :)

[09:51] <moritz> we can just pass BUILD_DIR to make

[09:52] <jnthn> aha

[09:54] *** fridim_ joined
[09:56] *** sayu left
[10:12] *** wk joined
[10:14] *** worr left
[10:17] *** mkramer joined
[10:32] *** wk left
[10:37] *** mkramer left
[10:42] *** daxim joined
[10:50] <dalek> nqp/nci: 329046c | moritz++ | Configure.pl:

[10:50] <dalek> nqp/nci: Fix the build on Linux amd64/gcc

[10:50] <dalek> nqp/nci: 

[10:50] <dalek> nqp/nci: Without this fix, "make" in the dyncall-0.6 directory would copy the .a

[10:50] <dalek> nqp/nci: files into a build_out/*/ dir, and thus the nqp ops compilation failed.

[10:50] <dalek> nqp/nci: 

[10:50] <dalek> nqp/nci: I hope this doesn't break the build on other platforms.

[10:50] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/329046ce79

[10:51] <jnthn> yay!

[10:52] <moritz> if it does break the build on other platforms, we might try   make BUILD_DIR=.  or so

[10:53] *** araujo left
[10:53] *** araujo joined
[10:55] <jnthn> Still works fine for me :)

[10:56] <moritz> do you use nmake?

[10:56] <jnthn> yes

[10:57] <jnthn> ...oh, and you didn't change that branch :)

[10:57] <jnthn> (branch of the if statement)

[10:57] <moritz> that's special-cased in Configure.pl, right

[11:09] *** donri joined
[11:10] *** whiteknight joined
[11:10] *** whiteknight is now known as Guest50859

[11:15] *** mkramer joined
[11:28] *** envi_ left
[11:36] *** bacek left
[11:37] *** bacek joined
[11:38] *** satyavvd left
[11:46] *** Moukeddar joined
[11:53] *** Moukeddar left
[11:59] <dalek> rakudo/nci: 1340fa6 | jnthn++ | src/core/Parameter.pm:

[11:59] <dalek> rakudo/nci: Parameter.type should return the type, not its name.

[11:59] <dalek> rakudo/nci: review: https://github.com/rakudo/rakudo/commit/1340fa68ba

[11:59] <dalek> nqp/nci: e11c46a | jnthn++ | src/ops/nqp_dyncall.ops:

[11:59] <dalek> nqp/nci: Decontainerize passed arguments.

[11:59] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/e11c46a7bc

[11:59] *** bacek left
[12:01] <jnthn> use NativeCall;

[12:01] <jnthn> sub GotValues(int, num32, Str) is native('foo.dll') { * }

[12:01] <jnthn> GotValues(42, 1.23e0, 'oh hai');

[12:01] *** mkramer left
[12:01] <jnthn> works \o/

[12:01] *** mkramer joined
[12:08] <moritz> \o/

[12:12] *** Psyche^ joined
[12:16] <moritz> do return values work too?

[12:16] *** Patterner left
[12:16] *** Psyche^ is now known as Patterner

[12:17] *** mkramer left
[12:17] <jnthn> moritz: Yes, for integers and floats only so far.

[12:17] *** koban left
[12:17] *** mkramer joined
[12:20] *** mkramer left
[12:22] *** mkramer joined
[12:22] *** mkramer left
[12:43] <tadzik> mood gorning #perl6

[12:46] <jnthn> o/ tadzik 

[13:05] *** Moukeddar joined
[13:06] *** arauko joined
[13:07] *** arauko left
[13:22] *** JimmyZ joined
[13:35] *** mj41 left
[13:36] *** kaleem left
[13:37] *** mkramer joined
[13:37] *** leprevost joined
[13:40] *** mkramer1 joined
[13:40] *** mkramer left
[13:44] <dalek> mu: a3341b7 | duff++ | misc/perl6advent-2011/topic-brainstorming:

[13:44] <dalek> mu: Add jnthn's topics

[13:44] <dalek> mu: review: https://github.com/perl6/mu/commit/a3341b73a6

[13:46] *** mkramer1 left
[13:50] *** mj41 joined
[13:52] *** Moukeddar left
[13:53] *** mkramer joined
[13:55] *** wk joined
[13:57] *** mkramer left
[13:57] *** mkramer joined
[13:58] <dalek> mu: ce5b7c9 | jimmy++ | misc/perl6advent-2011/topic-brainstorming:

[13:58] <dalek> mu: add nci to topic branstorming

[13:58] <dalek> mu: review: https://github.com/perl6/mu/commit/ce5b7c922b

[14:00] *** Guest50859 left
[14:00] <moritz> should I remove rakudo 2011.07 from the feature matrix?

[14:00] <moritz> there's not too much left that it does that nom doesn't

[14:02] <moritz> niecza: die "foo"; CATCH { default { say "ex: $_" } }

[14:02] <p6eval> niecza v11-27-gdaa9117: OUTPUT«ex: foo␤»

[14:02] <moritz> nom: do { ENTER { say "foo" } } 

[14:02] <p6eval> nom e3246e: OUTPUT«===SORRY!===␤ENTER phaser not yet implemented at line 1, near " }"␤»

[14:03] <dalek> features: 154e986 | moritz++ | features.json:

[14:03] <dalek> features: update entries for Temporal and CATCH

[14:03] <dalek> features: review: https://github.com/perl6/features/commit/154e9869d1

[14:03] <tadzik> moritz: let's wait for nom maybe?

[14:03] <tadzik> erm, start

[14:03] <tadzik> grr

[14:03] <tadzik> star on nom

[14:04] <moritz> tadzik: ok

[14:05] *** mkramer left
[14:05] *** mkramer joined
[14:12] <tadzik> nom: class A { method foo { say self.WHAT } }; A.new.foo

[14:12] <p6eval> nom e3246e: OUTPUT«A()␤»

[14:12] *** mkramer left
[14:12] <tadzik> nom: class A { method foo { say "{self.WHAT}" } }; A.new.foo

[14:12] <p6eval> nom e3246e: OUTPUT«Use of uninitialized value in string context␤␤»

[14:14] <tadzik> ^ bug

[14:15] <jnthn> Not a bug.

[14:16] <jnthn> The first .gists it. The second .Strs it.

[14:16] <tadzik> mhm

[14:17] <tadzik> anyone, HTTP::Server::Simple now works on nom

[14:17] <tadzik> it could use some tests though, I can only guess what the examples were meant to do

[14:17] <tadzik> ie should the 4th one just fail with "app missing"

[14:19] *** envi_ joined
[14:20] <tadzik> nom: say so'/my-name' ~~ / '/' (.+) '-' (.+)/

[14:20] <p6eval> nom e3246e: OUTPUT«Bool::False␤»

[14:20] <tadzik> anyway, bailador magically works too

[14:23] * tadzik feels a temptation to clear the ecosystem of modules that he have never seen working

[14:24] * tadzik shop &

[14:24] *** nightlord joined
[14:28] *** nightlord left
[14:32] *** sftp joined
[14:47] *** am0c joined
[14:48] *** tzhs left
[14:49] *** wtw left
[15:01] *** kranius joined
[15:11] *** JimmyZ left
[15:22] *** mvam joined
[15:28] *** mvam left
[16:00] <gfldex> rakudo gives me an error without a line number what makes me a little sad

[16:00] <gfldex> https://gist.github.com/1391681

[16:02] <jnthn> gfldex: That looks like a crash inside the compiler

[16:02] <tadzik> gfldex: that's because it's a compiler error

[16:02] <jnthn> (which just shouldn't happen)

[16:02] *** amkrankruleuen left
[16:02] *** amkrankruleuen joined
[16:03] <jnthn> Whoa. It actually crashes inside the optimizer.

[16:03] <jnthn> That's...rare.

[16:04] *** am0c left
[16:04] <jnthn> gfldex: Run it with --optimize=off to avoid the issue; I'll track it down later. Filing a ticket would be helpful so it doesn't get lost :)

[16:05] <tadzik> that's probably due to operator defining magic

[16:05] <tadzik> multi method postcircumfix:<( )>() {}

[16:05] <jnthn> That'd seem like an odd thing to confuse the optimizer.

[16:05] <jnthn> I mean, it's just a method.

[16:07] <jnthn> nom: my $foo; $foo>>.()

[16:07] <p6eval> nom e3246e: OUTPUT«===SORRY!===␤Method 'isa' not found for invocant of class 'Undef'␤»

[16:07] <jnthn> Golfed.

[16:07] <jnthn> nom: $_>>.()

[16:07] <p6eval> nom e3246e: OUTPUT«===SORRY!===␤Method 'isa' not found for invocant of class 'Undef'␤»

[16:07] <jnthn> Even further golfed.

[16:07] <jnthn> nom: $_>>.(1)

[16:07] <p6eval> nom e3246e: OUTPUT«Too many positional parameters passed; got 3 but expected 2␤  in sub METAOP_HYPER_POSTFIX at src/gen/CORE.setting:8093␤  in block <anon> at /tmp/eJvWJPFQHn:1␤  in <anon> at /tmp/eJvWJPFQHn:1␤»

[16:08] <jnthn> ah

[16:08] <jnthn> And that looks like a mis-compile

[16:31] *** cosimo left
[16:42] *** vmspb joined
[16:49] *** Ingis left
[16:50] *** Guest2721 joined
[16:52] *** bluescreen10 joined
[16:53] <TimToady> Util: my Num() $n = 0; is specced to allow coercion to Num, but nobody implements coercion types yet

[16:55] <felher> Any thoughts on https://gist.github.com/1391784 ? Otherwise i put it on Rosetta Code, which has no tic-tac-toe-game in Perl6 (or Perl). There is quite a bit of Perl6 stuff in that few lines. Lazy lists, hyper- and reduce-operators, junctions, placeholder-variables, 3-arity-map... 

[16:57] <dalek> nqp/nci: 3587326 | jnthn++ | src/ops/nqp_dyncall.ops:

[16:57] <dalek> nqp/nci: Fix string passing memory leak.

[16:57] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/358732619e

[16:57] <dalek> nqp/nci: 497c48b | jnthn++ | src/ (3 files):

[16:57] <dalek> nqp/nci: Support user-chosen calling conventions (or at least a few extra ones).

[16:57] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/497c48b6a9

[17:02] *** hundskatt joined
[17:10] *** thou joined
[17:12] <jnthn> There's a v2 branch in the Zavolaj repository where I've put what I got done so far of the new NativeCall.pm6.

[17:13] <moritz> jnthn: could you please add http://host04.appflux.net:5000/dalek?t=freenode,perl6 as a post-commit hook to the zavolaj repo?

[17:13] <moritz> I think we all want to know what's going on in there :-)

[17:14] <jnthn> added :)

[17:14] <jnthn> Though it missed the initial commits :)

[17:15] <jnthn> https://github.com/jnthn/zavolaj/blob/v2/lib/NativeCall.pm6 # the only really interesting thing

[17:20] *** MayDaniel joined
[17:20] <dalek> nqp/nci: 896015d | jnthn++ | src/ops/nqp_dyncall.ops:

[17:20] <dalek> nqp/nci: Make it so passing a string type object will lead to a null being passed.

[17:20] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/896015d2ff

[17:21] <jnthn> There's one thing previous zavolaj never did... :)

[17:23] <flussence> yay!

[17:23] <jnthn> OK, basic struct support next, I guess... :)

[17:27] <vmspb> Hi

[17:27] <vmspb> How to determine when a minus sign before the number (without whitespaces) is part of the definition of a negative number, and when it is a unary operator?

[17:27] <vmspb> perl6: sub prefix:<-> ($i) {return 10 * $i}; say -3 + 0; say (-3) + 0; say "-3" + 0; say <<-3>> + 0; say «-3» + 0;

[17:27] <p6eval> rakudo e3246e, niecza v11-27-gdaa9117: OUTPUT«30␤30␤-3␤-3␤-3␤»

[17:27] <p6eval> ..pugs b927740: OUTPUT«decodeUTF8': bad data: '\171'␤decodeUTF8': bad data: '\187'␤30␤30␤-3␤-3␤-3␤»

[17:27] <daxim> jnthn, pythonistas discover Class::Struct   http://news.ycombinator.com/item?id=3273812

[17:36] *** thou left
[17:36] <moritz> vmspb: what kind of answer do you expect?

[17:39] <vmspb> As defined in the standard?

[17:44] <moritz> then the answer is probably "by reading the spec, and augmenting it where incomplete"

[17:45] *** leprevost left
[17:47] <vmspb> ok

[17:47] *** mj41 left
[17:51] *** MayDaniel left
[17:55] *** cosimo joined
[18:01] <flussence> I'm trying to get panda to work... it bootstrap.sh's fine, then complains because ext/Shell/Command.pm isn't installed along with it.

[18:01] <tadzik> bootstrap.sh is fine? News

[18:01] <flussence> yep, there's stuff in .perl6/lib and all.

[18:01] <tadzik> so tests for Test::Mock and JSON::Tiny pass these days?

[18:03] <flussence> hm... it ran the panda tests with no test failures, I didn't see it run those though. I'll go check manually first...

[18:04] <flussence> apart from a few uninitialised string warnings JSON::Tiny passes

[18:05] <flussence> (with 1 todo!)

[18:05] *** dakkar left
[18:06] <flussence> oh, Test::Mock barfed.

[18:07] <flussence> https://gist.github.com/1391945

[18:07] <sorear> trip&

[18:13] <tadzik> flussence: yes, that's expected

[18:14] <tadzik> flussence: does everything work if you install panda with ufo?

[18:16] <flussence> nope. `ufo && make` dies while looknig for Shell::Command

[18:16] <flussence> s/ni/in

[18:19] <tadzik> hm

[18:20] <tadzik> oh, correct

[18:20] <tadzik> you'll have to ' PERL6LIB=ext make  'or so

[18:22] *** icwiener joined
[18:22] *** kaleem joined
[18:23] *** kaleem left
[18:23] *** birdwindupbird joined
[18:23] *** birdwindupbird left
[18:23] <flussence> aha, that worked. Still no Shell::Command installed though

[18:26] <tadzik> yeah, you'll have to manually install everything in ext/ :/

[18:26] <tadzik> panda should do that in bootstrap, but bootstrap doesn't work because test-mock and json tests fail

[18:28] <flussence> interesting... "Incorrect pre-compiled version of lib/JSON/Tiny.pm loaded"

[18:28] <flussence> rm'ed *.pir, almost works...

[18:29] <tadzik> yeah, I know that one

[18:29] <tadzik> free beer for anyone who fixes that

[18:30] <flussence> aaaand... another error after all that. oh well :(

[18:30] <flussence> oh wait, I'm being dumb

[18:31] <flussence> (it's "panda list", not "--list"...)

[18:31] <flussence> that works \o/

[18:32] <tadzik> :)

[18:39] *** swarles joined
[18:47] *** envi_ left
[18:51] *** mj41 joined
[18:52] *** vmspb left
[18:57] *** Trashlord left
[18:57] <tadzik> any ideas how to make HTTP::Server::Simple a little bit non-blocking to be able to test it?

[19:11] *** IngisKahn joined
[19:15] <moritz> IME "a little bit non-blocking" usually doesn't work

[19:15] <moritz> for non-blocking you need quite a different API

[19:16] <tadzik> well, any testability is fine

[19:22] <gfldex> is there a nom web repl?

[19:25] *** daxim left
[19:25] <jnthn> Not unless try.rakudo.org runs nom.

[19:28] <jnthn> afk for a little bit

[19:31] <gfldex> An error has occured on the server. Error Message:

[19:31] <gfldex> Timeout, operation took too long.

[19:31] <gfldex> that's for An error has occured on the server. Error Message:

[19:31] <gfldex> that's for http://try.rakudo.org/

[19:47] <moritz> nom: say True.gist

[19:48] <p6eval> nom e3246e: OUTPUT«Bool::True␤»

[19:52] <moritz> nom: say True.perl

[19:52] <p6eval> nom e3246e: OUTPUT«Bool.new()␤»

[19:53] <dalek> rakudo/nom: d5d5a3f | moritz++ | src/core/ (2 files):

[19:53] <dalek> rakudo/nom: Merge pull request #42 from lumimies/nom

[19:53] <dalek> rakudo/nom: 

[19:53] <dalek> rakudo/nom: Fix gist/perl for Junction and Bool

[19:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d5d5a3f454

[20:09] *** y3llow_ joined
[20:10] *** y3llow left
[20:10] *** y3llow_ is now known as y3llow

[20:16] * jnthn back

[20:17] <jnthn> Time to make a cup of tea, and hack on structs some.

[20:18] *** Moukeddar joined
[20:22] <japhb> hacking++

[20:23] <moritz> https://gist.github.com/0e91e92c32570e8fb15c # that's the current spectest summary (of nom branch)

[20:23] <moritz> any idea where the various failures come from?

[20:24] <jnthn> t/spec/S04-blocks-and-statements/pointy.rakudo # mls++ pointed out that the test is wrong...

[20:25] <moritz> nom: say ('100.B' .. '102.B').Str

[20:25] <p6eval> nom e3246e: OUTPUT«No applicable candidates found to dispatch to for 'Numeric'. Available candidates are:␤:(Mu, Mu %_)␤␤  in method Numeric at src/gen/CORE.setting:621␤  in sub infix:<==> at src/gen/CORE.setting:2031␤  in sub infix:<==> at src/gen/CORE.setting:2031␤  in method infinite …

[20:25] <japhb> I discovered (roughly) why my Str.Numeric changes broke 'my @a = "a".."c";' and I'm still working out the least invasive way to make it work again.  But let me just say, the amount of work that gets done for that statement compared to 'my @a = 1..3;' is just crazy.

[20:25] <jnthn> japhb: ah, is that the above bug?

[20:26] <japhb> Um ... my changes are unpushed; that error is not from me.  However, I think that

[20:26] <jnthn> moritz: The S12 ones are new on me.

[20:26] <jnthn> japhb: ah, ok

[20:26] <jnthn> I have the range one here...

[20:26] <jnthn> Or at least, it's in nci branch

[20:26] <japhb> the error moritz is seeing is just a more subtle version of the same problem.

[20:26] <jnthn> ah, ok

[20:26] <japhb> (My changes make the problem more obvious, because they fail() rather than 'return 0' more often.)

[20:27] <jnthn> moritz: The two S12 ones pass here

[20:27] <moritz> $ ./perl6 t/spec/S10-packages/use-with-class.t

[20:27] <moritz> ===SORRY!===

[20:27] <moritz> Incorrect pre-compiled version of src/gen/Metamodel.pm loaded

[20:27] <moritz> I've seen that one before

[20:27] <jnthn> oh hm

[20:27] <moritz> I think it goes away if I clean and recompile everything

[20:27] <moritz> still it shouldn't happen

[20:28] <jnthn> Would really appreciate instructions on reproducing taht one.

[20:28] <moritz> I've run Configure.pl before building my nom

[20:29] *** cognominal joined
[20:30] <moritz> oh!

[20:30] <moritz> I've had a totally unrelated Foo.pir lying in my rakudo home

[20:30] <moritz> (from checking the precompilation of fat Rats)

[20:30] <tadzik> the .pir stuff is quite broken

[20:30] <moritz> deleting that makes the error from use-with-class go away

[20:30] <tadzik> flussence observed that today as well

[20:31] <moritz> ... and then fails after test 7 with

[20:31] <moritz> You cannot create an instance of this type

[20:31] <moritz> ah, that mmight be the Foo.pm

[20:32] <jnthn> We really need a --trace-load or something that gets it to dump what modules i'ts actually loading, and from where, etc.

[20:33] <moritz> and we need to get rid of . in the module loading path

[20:33] <jnthn> Very much so.

[20:33] <jnthn> And probably lib too

[20:33] <moritz> aye

[20:33] <jnthn> We do need a way to tell the test suite to use a local Test.pm over any installed one.

[20:33] <jnthn> Well, a general way to say "take a local one over an installed one"

[20:34] <jnthn> Trying to run the test suite with an installed Test.pir will, of course, fail epicly.

[20:34] <jnthn> We *can* loosen this a bit, if we can start naming serialization contexts after a hash of the source.

[20:35] <jnthn> Rather than a timestamp of when the compilation happened.

[20:36] <dalek> roast: aed8452 | moritz++ | S04- (2 files):

[20:36] <dalek> roast: fix a test, rakudo unfudges

[20:36] <dalek> roast: review: https://github.com/perl6/roast/commit/aed84527ee

[20:37] *** ksi joined
[20:40] <japhb> How would I dump a stack trace from within the code I'm debugging?

[20:40] <japhb> Basically, I'm trying to figure out what the call chain was that led to something being called bogusly.

[20:42] <moritz> an easy hack is try { die }; print $!.backtrace

[20:42] <moritz> nom: try { die }; print $!.backtrace

[20:42] <p6eval> nom d5d5a3: OUTPUT«  in block <anon> at /tmp/riwobDpo2g:1␤  in block <anon> at /tmp/riwobDpo2g:1␤  in <anon> at /tmp/riwobDpo2g:1␤»

[20:43] <jnthn> moritz: could Backtrace.new() just me made to give you one from the current position?

[20:43] <japhb> moritz: thanks for the idea!

[20:44] <moritz> jnthn: yes, it can be made

[20:44] <moritz> just needs some fiddling, I guess

[20:45] <moritz> nom: say pir::getinterp__P().backtrace

[20:45] <p6eval> nom d5d5a3: OUTPUT«Method 'backtrace' not found for invocant of class 'ParrotInterpreter'␤  in block <anon> at /tmp/homoBgBpqC:1␤  in <anon> at /tmp/homoBgBpqC:1␤»

[20:45] <moritz> I just need to remember how to make parrot emit one :-)

[20:46] *** Moukeddar left
[20:48] <moritz> ah, I can just use the cheat that I told japhb about

[20:48] <moritz> it won't be very efficient, but I don't think it's a very common operation either

[20:49] *** fridim_ left
[20:50] <japhb> One hopes not ...

[20:52] <moritz> I have a small patch that makes Backtrace.new() DWIM, just need to check that it actually compiles :-)

[21:01] <dalek> rakudo/nom: de3997a | moritz++ | src/core/Backtrace.pm:

[21:01] <dalek> rakudo/nom: make Backtrace.new() DWIM

[21:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/de3997a736

[21:05] *** thou joined
[21:07] *** thou left
[21:10] <dalek> nqp/nci: 5899327 | jnthn++ | / (3 files):

[21:10] <dalek> nqp/nci: Start to stub in a CStruct REPR.

[21:10] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/58993275cd

[21:10] <dalek> nqp/nci: 9f0fc01 | jnthn++ | tools/build/Makefile.in:

[21:10] <dalek> nqp/nci: Add some missing makefile deps.

[21:10] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/9f0fc01af1

[21:10] <dalek> nqp/nci: c7250db | jnthn++ | src/6model/reprs/CStruct.h:

[21:10] <dalek> nqp/nci: Sketch out more of how CStruct probably needs to end up looking once it supports the bits it'll need to.

[21:10] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/c7250dba21

[21:10] <dalek> nqp/nci: fabd74f | jnthn++ | src/ops/nqp_dyncall.ops:

[21:10] <dalek> nqp/nci: An (untested) shot at getting the native call handling side of passing a CStruct in place.

[21:10] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/fabd74f00e

[21:23] <felher> http://rosettacode.org/wiki/Tic-tac-toe#Perl_6

[21:27] *** PacoLinux left
[21:28] *** PacoLinux joined
[21:34] *** donri left
[21:41] <japhb> Hah!  I think I found the problem:  https://github.com/rakudo/rakudo/blob/nom/src/core/Range.pm#L31

[21:42] <japhb> That == ends up coercing both sides to Numeric, and if the coercion of $.max results in Failure, then boom.

[21:42] <jnthn> oh!

[21:42] <jnthn> good find

[21:42] <jnthn> japhb++

[21:42] <japhb> thanks.  :-)

[21:43] <japhb> What's the most performant fix?

[21:43] <jnthn> most performant?

[21:44] <jnthn> bind $.max into a lexical, then nqp::istype($max, Numeric) && $max == $Inf

[21:44] <japhb> Will cause the least loss of performance.

[21:44] <jnthn> well, that's probably fastest.

[21:44] <jnthn> It saves calling .max twice

[21:44] <jnthn> and nqp::istype is the fastest way to do type checks

[21:45] <japhb> What about replacing == with something that checks identity (I'm fuzzy on those ... === or =:= ?)

[21:46] <jnthn> Sounds a little risky

[21:46] <japhb> Why?  (I have a feeling the answer to that will Teach Me Something Important.)

[21:47] <japhb> Oh wait,

[21:47] *** molaf joined
[21:47] <jnthn> === will need to return an ObjAt at some point

[21:47] <japhb> You could have gotten an Inf from some other way than assignment to $Inf, right?

[21:47] <japhb> And it would not be the same object.

[21:47] <jnthn> And even what it does today is probably no cheaper than the ==

[21:47] <jnthn> But more important is...yes, that. :)

[21:47] <japhb> ah, OK.

[21:48] * japhb had the singleton-ness of $Inf locked in his brain, and forgot that it was merely one possible way to get an infinite value.

[21:52] *** Khisanth joined
[22:00] *** Guest2721 left
[22:09] *** colomon_Droid joined
[22:09] <colomon_Droid> o/

[22:09] <jnthn> o/ colomon_Droid 

[22:09] <colomon_Droid> happy Thanksgiving!

[22:10] *** thou joined
[22:11] <jnthn> To you too :)

[22:11] *** swarles left
[22:12] <colomon_Droid> sorear: ping

[22:13] <jnthn> colomon_Droid: sorear mentioned he was leaving for a trip earlier; I got the impression he's away a couple of days

[22:13] <colomon_Droid> Darn

[22:13] <colomon_Droid> jnthn++

[22:14] <colomon_Droid> Anyone out there know how to create a System.Byte in niecza?

[22:15] *** sayu joined
[22:15] <colomon_Droid> Doing this sort of development without a proper internet connection is a real pain

[22:18] <masak> dear #perl6, hello.

[22:19] <colomon_Droid> o/

[22:20] <Tene> hi masak

[22:20] <masak> I'm having the busiest week of the year this week. that's why I've been a bit absent lately.

[22:21] *** ksi left
[22:21] <jnthn> masak's doing all the work at $dayjob while I'm just bumming about at home hacking on NCI :P

[22:22] <masak> yeah; slacker :P

[22:27] <Tene> I had my busiest week of the year two weeks ago; I was on-call during switch upgrades in the cluster that went poorly (ran into a bug causing repeated switch failures).

[22:28] <arnsholt> OTOH, we all heart jnthn for making NCI =D

[22:32] <masak> ♥

[22:33] * jnthn didn't really heart reading through a disassembly of generated in-memory assembly code trying to work out why his Win32 API calls blew up

[22:33] <jnthn> Turns out they fixed the Win64 call conv alignment bug in SVN, so I just need to grab us the latest at some point :)

[22:34] *** sayu left
[22:37] *** colomon_Droid left
[22:39] *** thou left
[22:40] <dalek> nqp/nci: 02dca35 | jnthn++ | src/6model/reprs/CStruct. (2 files):

[22:40] <dalek> nqp/nci: Steal some bits from P6opaque and twiddle with them to start getting things into a more CStruct-ish shape.

[22:40] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/02dca35e84

[22:40] <dalek> nqp/nci: 878aafe | jnthn++ | src/6model/reprs/CStruct. (2 files):

[22:40] <dalek> nqp/nci: Get allocationy bits of CStruct in place, or at least for the basic cases.

[22:40] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/878aafe59b

[23:05] <masak> perl6: my %h = foo => 0, bar => 42; say so %h{ 'foo' | 'bar' }

[23:05] <p6eval> rakudo de3997, niecza v11-27-gdaa9117: OUTPUT«Bool::True␤»

[23:05] <p6eval> ..pugs b927740: OUTPUT«*** No such subroutine: "&so"␤    at /tmp/PXzZmjvt_A line 1, column 34 - line 2, column 1␤»

[23:05] <masak> perl6: my %h = foo => 0, bar => 42; say %h{ 'foo' | 'bar' }.perl

[23:05] <p6eval> rakudo de3997, niecza v11-27-gdaa9117: OUTPUT«any(0, 42)␤»

[23:05] <p6eval> ..pugs b927740: OUTPUT«\undef␤»

[23:05] <jnthn> ooh, basic struct passing nearly worked

[23:09] *** kranius left
[23:09] *** skangas left
[23:09] *** alester left
[23:09] *** jevin_ left
[23:09] *** robins left
[23:09] *** stepnem left
[23:09] *** snarkyboojum left
[23:09] *** Mowah_ left
[23:09] *** wooden left
[23:09] *** Lothar left
[23:09] *** icwiener left
[23:09] *** localhost left
[23:09] *** Juerd left
[23:09] *** uniejo left
[23:09] *** amkrankruleuen left
[23:09] *** zostay left
[23:09] *** aloha left
[23:09] *** Khisanth left
[23:09] *** cosimo left
[23:09] *** abercrombie left
[23:09] *** kfo left
[23:09] *** xinming_ left
[23:09] *** estrabd_afk left
[23:09] *** araujo left
[23:09] *** s1n left
[23:09] *** overrosy left
[23:09] *** mdxi left
[23:09] *** rafl left
[23:09] *** hundskatt left
[23:09] *** alvis left
[23:09] *** arlinius left
[23:09] *** simcop2387 left
[23:09] *** buubot_backup left
[23:09] *** Woodi left
[23:09] *** miso2217__ left
[23:09] *** c9s left
[23:09] *** sftp left
[23:09] *** drbean left
[23:09] *** bonsaikitten left
[23:09] *** tadzik left
[23:09] *** domidumont left
[23:09] <japhb> jnthn, would there be any performance advantage to binding 'self

[23:09] <japhb>  erg

[23:10] <japhb> jnthn, would there be any performance advantage to binding 'self' to a lexical and using $self instead for an expression that involves several uses of self?

[23:10] <jnthn> japhb: No

[23:10] <jnthn> japhb: self *is* stored as a lexical :)

[23:10] <japhb> jnthn, ah, good.

[23:10] <jnthn> japhb: And looked up as one :)

[23:11] <jnthn> So you'd just have another variable and spend time doing a binding, and win nothing ;)

[23:11] <japhb> I suspected so, but as my machine is currently recompiling Rakudo, I couldn't check directly.  :-)

[23:11] <japhb> nodnod

[23:11] <jnthn> yeah, mine too

[23:11] * jnthn thinks he founds his off-by-16-bytes error

[23:13] *** Khisanth joined
[23:13] *** icwiener joined
[23:13] *** cosimo joined
[23:13] *** hundskatt joined
[23:13] *** sftp joined
[23:13] *** araujo joined
[23:13] *** localhost joined
[23:13] *** drbean joined
[23:13] *** abercrombie joined
[23:13] *** bonsaikitten joined
[23:13] *** alvis joined
[23:13] *** arlinius joined
[23:13] *** Lothar joined
[23:13] *** tadzik joined
[23:13] *** Juerd joined
[23:13] *** kfo joined
[23:13] *** uniejo joined
[23:13] *** s1n joined
[23:13] *** xinming_ joined
[23:13] *** overrosy joined
[23:13] *** simcop2387 joined
[23:13] *** c9s joined
[23:13] *** buubot_backup joined
[23:13] *** Woodi joined
[23:13] *** amkrankruleuen joined
[23:13] *** estrabd_afk joined
[23:13] *** zostay joined
[23:13] *** rafl joined
[23:13] *** aloha joined
[23:13] *** domidumont joined
[23:13] *** miso2217__ joined
[23:13] *** mdxi joined
[23:13] *** awwaiid joined
[23:13] *** revdiablo joined
[23:13] *** hillu joined
[23:13] *** yath joined
[23:13] *** ashleydev joined
[23:13] *** wolverian joined
[23:13] *** prammer joined
[23:13] *** sivoais joined
[23:13] *** kst joined
[23:13] *** twinshadow joined
[23:13] *** silug joined
[23:13] *** felher joined
[23:13] *** integral joined
[23:13] *** slavik1 joined
[23:13] *** ascent__ joined
[23:13] *** jjore_ joined
[23:13] *** krakan joined
[23:13] *** clkao joined
[23:13] *** jasonmay joined
[23:13] *** jtpalmer joined
[23:13] *** athomason_ joined
[23:13] *** ranguard joined
[23:13] *** ruz joined
[23:13] *** __sri joined
[23:13] *** pnu joined
[23:13] *** TimToady joined
[23:13] *** szabgab joined
[23:13] *** ingy joined
[23:13] *** apejens joined
[23:13] *** baest joined
[23:13] *** arnsholt joined
[23:13] *** Lorn joined
[23:13] *** nsh joined
[23:13] *** _ilbot joined
[23:13] *** phenny joined
[23:13] *** Timbus joined
[23:13] *** saaki joined
[23:15] *** Mowah_ joined
[23:15] *** wooden joined
[23:15] *** zb joined
[23:15] *** kcwu joined
[23:15] *** flussence joined
[23:15] *** charsbar__ joined
[23:15] *** Bucciarati joined
[23:15] *** Gothmog_ joined
[23:15] *** jfried joined
[23:15] *** moritz joined
[23:15] *** ruoso joined
[23:15] *** jerome_ joined
[23:15] *** betterworld joined
[23:15] *** Helios joined
[23:15] <japhb> Bah.  I hate it when I find a bug, but have to go AFK and can't fix it immediately.  :-(

[23:15] *** kranius joined
[23:15] *** skangas joined
[23:15] *** alester joined
[23:15] *** robins joined
[23:15] *** jevin_ joined
[23:15] *** stepnem joined
[23:15] *** snarkyboojum joined
[23:15] *** sjn joined
[23:15] *** diakopter joined
[23:15] *** Grrrr joined
[23:15] *** PerlJam joined
[23:15] *** [Coke] joined
[23:15] *** felipe joined
[23:15] *** tomaw joined
[23:15] *** literal joined
[23:15] <dalek> nqp/nci: c14163d | jnthn++ | src/ops/nqp_dyncall.ops:

[23:15] <dalek> nqp/nci: Handle cstruct as one of the types we now recognize.

[23:15] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/c14163d7aa

[23:15] <dalek> nqp/nci: ceaf986 | jnthn++ | src/6model/reprs/CStruct.c:

[23:15] <dalek> nqp/nci: Fix struct offset computation; add the attribute lookup bits we need for the basic int/num attributes we support thus far.

[23:15] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/ceaf986558

[23:16] *** stepnem left
[23:16] <jnthn> OK, here's the state of NCI now: https://gist.github.com/1392493

[23:16] *** icwiener left
[23:16] *** HarryS left
[23:16] *** icwiener joined
[23:16] <jnthn> Still loads to do on this struct stuff, but it's easier to hack towards something that works more when there's something that basically works :)

[23:17] *** Mowah_ left
[23:17] *** HarryS joined
[23:18] <jnthn> The top file is C, which I compile to a DLL. The second thing is the Perl 6 binding to it. Note the "is repr('CStruct')" on the class. It's a normal class, but it builds a C structure underneath. Quite limited so far; in the end it'll do the struct of sturct thing, etc.

[23:18] <tadzik> supercool :)

[23:18] <tadzik> jnthn++

[23:19] *** stepnem joined
[23:28] *** Chillance left
[23:32] <masak> good night, #perl6

[23:34] <jnthn> Updated https://gist.github.com/1392493 to show one thing that wasn't clear before

[23:39] <felher> yeah, jnthn++

[23:45] *** s1n left
[23:45] *** envi_ joined
[23:45] *** s1n joined
[23:50] <jnthn> sleep time &

[23:51] *** mj41 left
