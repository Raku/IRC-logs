[00:08] *** replore_ joined
[00:15] *** dukeleto joined
[00:26] *** jevin left
[00:27] *** am0c joined
[00:30] *** jevin joined
[00:51] *** jevin left
[00:54] *** jevin joined
[01:08] *** benabik joined
[01:19] *** woosley joined
[01:19] *** woosley left
[01:23] *** packetknife left
[01:27] *** wolfman2000 joined
[01:28] *** bluescreen10 joined
[01:47] *** whiteknight left
[01:49] *** aindilis left
[01:49] *** aindilis joined
[01:55] *** abercrombie left
[01:59] *** soh_cah_toa left
[01:59] *** woosley joined
[02:01] *** frhodes left
[02:01] *** frhodes joined
[02:06] *** pernatiy left
[02:10] *** pernatiy joined
[02:34] *** satyavvd joined
[02:51] *** bluescreen10 left
[02:58] <sorear> good * #perl6

[03:09] <sorear> jnthn: what is SAFE.setting?

[03:17] <TimToady> nom: unlink 'perl6'

[03:17] <p6eval> nom cca116: OUTPUT«unlink is disallowed in safe mode␤  in sub restricted at src/SAFE.setting:2␤  in sub unlink at src/SAFE.setting:6␤  in <anon> at /tmp/vt6IPO16ma:1␤  in <anon> at /tmp/vt6IPO16ma:1␤␤»

[03:18] <TimToady> nom: CORE::unlink 'foo'

[03:18] <p6eval> nom cca116: OUTPUT«Could not find symbol 'CORE::&unlink'␤  in <anon> at /tmp/xIhYMNPJZE:1␤  in <anon> at /tmp/xIhYMNPJZE:1␤␤»

[03:18] <benabik> nom: CORE::say 'foo'

[03:18] <p6eval> nom cca116: OUTPUT«Could not find symbol 'CORE::&say'␤  in <anon> at /tmp/1_a1LaEcFb:1␤  in <anon> at /tmp/1_a1LaEcFb:1␤␤»

[03:19] <TimToady> nom: &CORE::say('foo')

[03:19] <p6eval> nom cca116: OUTPUT«Method 'postcircumfix:<( )>' not found for invocant of class 'Any'␤  in <anon> at src/gen/Metamodel.pm:3023␤  in <anon> at /tmp/b04uTOjcgT:1␤  in <anon> at /tmp/b04uTOjcgT:1␤  in <anon> at /tmp/b04uTOjcgT:1␤␤»

[03:19] <TimToady> nom: CORE::{'&say'}('foo')

[03:19] <p6eval> nom cca116: OUTPUT«Could not find sub &CORE␤  in <anon> at /tmp/9KUhwoBz1X:1␤  in <anon> at /tmp/9KUhwoBz1X:1␤␤»

[03:20] <benabik> CORE NYI

[03:20] <TimToady> good thing, in this case ;)

[03:22] <TimToady> niecza: only infix:<+>(Numeric $a, Numeric $b) { CORE::{'&infix:<+>'}($a,$b) }; say 1 + 1; say '1' + 1

[03:22] <p6eval> niecza v9-23-g1a8efca: OUTPUT«2␤Unhandled exception: Nominal type check failed in binding Numeric $a in MAIN infix:<+>; got Str, needed Numeric␤  at /tmp/Sv5upAAz9h line 0 (MAIN infix:<+> @ 0) ␤  at /tmp/Sv5upAAz9h line 1 (MAIN mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting li…

[03:24] <TimToady> perl6: multi infix:<+>($a,$b) { die "Can't coerce" }; say 1 + 1; say '1' + 1

[03:24] <p6eval> rakudo cca116: OUTPUT«2␤Ambiguous dispatch to multi 'infix:<+>'. Ambiguous candidates had signatures:␤:(Any $a, Any $b)␤:(Any $a, Any $b)␤␤  in sub infix:<+> at src/gen/CORE.setting:1865␤  in <anon> at /tmp/sOSYpoFYeO:1␤  in <anon> at /tmp/sOSYpoFYeO:1␤␤»

[03:24] <p6eval> ..pugs: OUTPUT«2␤*** Can't coerce␤    at /tmp/f_rBZGmeWp line 1, column 63 - line 2, column 1␤       /tmp/f_rBZGmeWp line 1, column 26-45␤»

[03:24] <p6eval> ..niecza v9-23-g1a8efca: OUTPUT«Potential difficulties:␤  $a is declared but not used at /tmp/BEEYkiR9fw line 1:␤------> multi infix:<+>(⏏$a,$b) { die "Can't coerce" }; say 1 + 1␤  $b is declared but not used at /tmp/BEEYkiR9fw line 1:␤------> multi infix:<+>($a,[…

[03:24] <TimToady> perl6: multi infix:<+>($,$) { die "Can't coerce" }; say 1 + 1; say '1' + 1

[03:24] <p6eval> rakudo cca116: OUTPUT«2␤Ambiguous dispatch to multi 'infix:<+>'. Ambiguous candidates had signatures:␤:(Any $a, Any $b)␤:(Any, Any)␤␤  in sub infix:<+> at src/gen/CORE.setting:1865␤  in <anon> at /tmp/A0PYjkFNCI:1␤  in <anon> at /tmp/A0PYjkFNCI:1␤␤»

[03:24] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "$,$)"␤    expecting formal parameter or ")"␤    at /tmp/iJwJvS3NaG line 1, column 17␤»

[03:24] <p6eval> ..niecza v9-23-g1a8efca: OUTPUT«Unhandled exception: Can't coerce␤  at /home/p6eval/niecza/lib/CORE.setting line 742 (CORE die @ 2) ␤  at /tmp/lndK_tGOaL line 1 (MAIN infix:<+> @ 2) ␤  at /tmp/lndK_tGOaL line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2046 (CORE…

[03:25] *** supernovus left
[03:31] <TimToady> looks like pugs does the best, as long as you name your params

[03:32] *** envi_laptop joined
[03:32] <TimToady> looks like niecza is calling a less specific inner multi in preference to a more specific outer multi

[03:33] <sorear> TimToady: actually the issue is that niecza's CORE::infix:<+> is currently an only sub

[03:33] <TimToady> ah

[03:36] <TimToady> rakudo's behavior makes me want to add a tiebreaking rule where otherwise ambiguous dispatch prefers an inner lexical scope to an outer

[03:40] <TimToady> then we don't have to calculate whether two sigs are identical to do multi shadowing

[03:41] <TimToady> they only have to come out tied

[03:41] <TimToady> jnthn: thoughts on ^^

[03:41] <diakopter> math question for the channel: what's the length of the shortest string that contains all words of length Y from an alphabet of size X

[03:44] <sorear> diakopter: for X=2, 2^Y-1 if you make the string circular

[03:44] <diakopter> can't be circular

[03:44] <sorear> and the solution takes the form of a maximal-length LFSR

[03:45] <sorear> then I guess 2^Y+Y-1

[03:45] <diakopter> X^Y+Y-1 ?

[03:46] *** shinobicl_ joined
[03:46] *** abercrombie joined
[03:48] <PerlJam> Does that take into account overlapping words?

[03:48] <diakopter> I don't know whether your guess is correct; 2nd question: how many unique strings satisfy those conditions?

[03:48] <sorear> PerlJam: yes

[03:48] <sorear> I have very little clue about the X != 2 case

[03:49] <sorear> I'm using a result from coding theory, and those people don't consider non-binary much

[03:50] <diakopter> 3rd task: write a program to generate those strings :)

[03:50] <diakopter> this came about because of my garage door opener keypad, btw

[03:51] <PerlJam> diakopter: are you trying to be the first person to cause #perl6 to say "go do your own homework!"  ;)

[03:51] <diakopter> (it ignores extraneous presses before the correct code)

[03:51] <diakopter> PerlJam: lol

[03:51] <diakopter> no seriously, my garage door opener works this way

[03:52] <diakopter> so I was trying to think of the minimum number of presses someone would have to press to guarantee opening the door

[03:53] <shinobicl_> hi... In 'nom', how do i define a constraint for a variable without using a subset?

[03:54] <cotto> diakopter, what if you trigger the undocumented self-destruct function?

[03:54] <diakopter> heh

[03:55] <cotto> You laugh now.

[03:55] <diakopter> oh, the secret Y^2 length code that always works 

[03:56] <diakopter> that's definitely a possibility

[03:57] <PerlJam> all 9s, all 0s, etc.

[03:57] *** packetknife joined
[03:58] <sorear> diakopter: I can guararntee you that the minimum length string is *at least* X^Y+Y-1

[03:58] <sorear> actually that's wrong

[03:58] <diakopter> at least as small as, or at least as big as

[03:58] <sorear> but not be enough to matter

[03:58] <sorear> diakopter: at least as big as

[03:59] <sorear> diakopter: a string of length X^Y+Y-1 has X^Y length-Y substrings

[03:59] <sorear> diakopter: if it were any shorter, it would need to miss a word

[04:00] <diakopter> I'll buy that for a dollar

[04:01] <diakopter> maybe I'll submit the string generation part as a Rosetta Code entry

[04:01] <cotto> Is this one of those nasty encrypted garage door openers whose manufacturers like using the DMCA to prevent interoperability?

[04:02] <cotto> or is it just a matter of figuring out a fixed sequence

[04:02] <diakopter> it's just like a normal push-button remote except it requires entering a preprogrammed code to send its signal to the opener

[04:03] <diakopter> the opener has to be taught to trust it with the learning button

[04:03] <sorear> My interpretation of diakopter's request is that he wants to know how vulnerable his house is to a brute-force attack.

[04:03] <diakopter> just like any other remote you'd buy at Home Depot or Lowe's

[04:03] <sorear> .oO( they could just drive through the garage door, if they're doing brute force hacking )

[04:03] <diakopter> :D

[04:04] <cotto> cars are an effective attack vector

[04:04] <cotto> easy to detect though

[04:04] <cotto> lots of side-effects

[04:04] *** molaf_ left
[04:04] *** envi_laptop left
[04:06] *** birdwindupbird joined
[04:12] *** abercrombie left
[04:16] *** packetknife left
[04:25] *** daniel-s joined
[04:37] *** packetknife joined
[04:41] <dalek> niecza: a279320 | sorear++ | lib/CORE.setting:

[04:41] <dalek> niecza: Add mising at_pos/at_key methods to several classes with postcircumfix:*

[04:41] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a279320590

[04:45] * sorear is trying to decide how much more nqp/nom-like niecza's bootstrap should become

[04:52] *** am0c left
[04:59] *** Patterner left
[04:59] *** jferrero left
[04:59] *** Maddingue left
[04:59] <diakopter> netsplit?

[04:59] *** birdwindupbird left
[05:01] *** dju joined
[05:03] <sorear> rakudo: sub foo(@x?) { say @x.perl }; foo

[05:03] <sorear> p6eval: help

[05:04] *** benabik left
[05:04] *** dukeleto left
[05:04] *** kshannon left
[05:04] *** araujo left
[05:04] *** ZapZ left
[05:04] *** HarryS left
[05:04] *** uasi left
[05:04] *** daxim left
[05:04] *** localhost left
[05:04] *** packetknife left
[05:04] *** replore_ left
[05:04] *** lestrrat left
[05:04] *** y3llow left
[05:04] *** pernatiy left
[05:04] *** woosley left
[05:04] *** Trashlord left
[05:04] *** sftp left
[05:04] *** orafu left
[05:04] *** Sarten-X left
[05:04] *** stepnem left
[05:04] *** daniel-s left
[05:04] *** shinobicl_ left
[05:04] *** aindilis left
[05:04] *** wolfman2000 left
[05:04] *** mattp_ left
[05:04] *** JodaZ left
[05:04] *** eternaleye left
[05:04] *** mjreed left
[05:04] *** colomon left
[05:04] *** dalek left
[05:04] *** satyavvd left
[05:04] *** skangas left
[05:04] *** alvis left
[05:04] *** Alias_ left
[05:04] *** ranguard left
[05:04] *** pjcj left
[05:06] *** jferrero joined
[05:06] *** mls_ joined
[05:06] *** ruz_ joined
[05:06] *** birdwind1pbird joined
[05:06] *** mux_ joined
[05:06] *** buubot_backup joined
[05:06] *** apejens joined
[05:06] *** Patterner joined
[05:06] *** plobsing_ joined
[05:06] *** Maddingu1 joined
[05:06] *** Russell_ joined
[05:06] *** packetknife joined
[05:06] *** daniel-s joined
[05:06] *** satyavvd joined
[05:06] *** pernatiy joined
[05:06] *** woosley joined
[05:06] *** aindilis joined
[05:06] *** wolfman2000 joined
[05:06] *** benabik joined
[05:06] *** dukeleto joined
[05:06] *** replore_ joined
[05:06] *** mattp_ joined
[05:06] *** skangas joined
[05:06] *** uasi joined
[05:06] *** kshannon joined
[05:06] *** araujo joined
[05:06] *** mjreed joined
[05:06] *** daxim joined
[05:06] *** JodaZ joined
[05:06] *** localhost joined
[05:06] *** alvis joined
[05:06] *** eternaleye joined
[05:06] *** Trashlord joined
[05:06] *** sftp joined
[05:06] *** colomon joined
[05:06] *** dalek joined
[05:06] *** Alias_ joined
[05:06] *** orafu joined
[05:06] *** ranguard joined
[05:06] *** pjcj joined
[05:06] *** Sarten-X joined
[05:06] *** lestrrat joined
[05:06] *** ZapZ joined
[05:06] *** HarryS joined
[05:06] *** y3llow joined
[05:06] *** stepnem joined
[05:06] *** Helios joined
[05:06] *** wolfe.freenode.net sets mode: +v dalek

[05:06] *** jdhore joined
[05:06] *** arthur-_ joined
[05:06] *** sahadev joined
[05:06] *** Bucciarati joined
[05:06] *** gfldex joined
[05:06] *** moritz joined
[05:06] *** yath joined
[05:06] *** Grrrr joined
[05:06] *** lucs joined
[05:06] *** PacoLinux_ joined
[05:06] *** _jaldhar joined
[05:06] *** sbp joined
[05:06] *** [Coke] joined
[05:06] *** bbkr joined
[05:06] *** itz_ joined
[05:06] *** Vlavv joined
[05:06] *** [particle] joined
[05:06] *** yahooooo joined
[05:06] *** erez joined
[05:06] *** Reaganomicon joined
[05:06] *** wooden joined
[05:06] *** Yappoko___ joined
[05:06] *** Tene joined
[05:06] *** hugme joined
[05:06] *** robinsmidsrod joined
[05:06] *** lue joined
[05:06] *** DarthGandalf joined
[05:06] *** cotto joined
[05:06] *** p6eval joined
[05:06] *** ponbiki joined
[05:06] *** yves_ joined
[05:06] *** tomaw joined
[05:06] *** jrockway_ joined
[05:06] *** hillu joined
[05:06] *** tty234 joined
[05:06] *** TimToady joined
[05:06] *** BinGOs joined
[05:06] *** sjn joined
[05:06] *** literal joined
[05:06] *** wolfe.freenode.net sets mode: +vv hugme p6eval

[05:06] *** packetknife left
[05:06] *** mdxi left
[05:06] *** mdxi_ joined
[05:07] <dalek> rakudo/nom: 9d6d7dd | moritz++ | src/Perl6/Metamodel/ (2 files):

[05:07] <dalek> rakudo/nom: MRO optimizations by mls++

[05:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9d6d7dd582

[05:07] <sorear> rakudo: sub foo(@x?) { say @x.perl }; foo

[05:07] <p6eval> rakudo cca116: OUTPUT«Array.new()␤»

[05:07] *** jql left
[05:07] *** jql joined
[05:07] *** _ilbot joined
[05:07] <sorear> rakudo: say [].perl

[05:07] <p6eval> rakudo cca116: OUTPUT«[]␤»

[05:08] <sorear> rakudo: say Array.perl

[05:08] <p6eval> rakudo cca116: OUTPUT«Array␤»

[05:08] *** y3llow left
[05:08] *** y3llow joined
[05:08] *** risou_awy joined
[05:08] *** Woodi joined
[05:08] *** Lorn joined
[05:10] *** diakopter left
[05:11] *** revdiablo left
[05:11] *** diakopter joined
[05:12] <cotto> tell jnthn Give win64-workaround another run whenever you get a chance.

[05:12] <cotto> phenny tell jnthn Give win64-workaround another run whenever you get a chance.

[05:12] <cotto> phenny, help

[05:12] <phenny> cotto: Hi, I'm a bot. Say ".commands" to me in private for a list of my commands, or see http://inamidst.com/phenny/ for more general details. My owner is sbp.

[05:12] <sorear> phenny: msg cotto This is how it's done

[05:13] <sorear> phenny: tell cotto This is how it's done

[05:13] <phenny> sorear: I'll pass that on when cotto is around.

[05:13] <cotto> phenny: tell jnthn Give win64-workaround another run whenever you get a chance.

[05:13] <phenny> cotto: I'll pass that on when jnthn is around.

[05:13] <phenny> cotto: 05:13Z <sorear> tell cotto This is how it's done

[05:13] *** packetknife joined
[05:13] *** revdiablo joined
[05:13] <cotto> stupid bots, only doing exactly what they're programmed to

[05:13] *** revdiablo left
[05:13] *** revdiablo joined
[05:14] <sorear> hehee.  we can't have our messaging bot gaining sentience now...

[05:14] <sorear> rakudo: sub foo(@x?) { say @x.WHAT }; foo

[05:14] <p6eval> rakudo cca116: OUTPUT«Array()␤»

[05:14] <cotto> phenny: test the win64-workaround branch

[05:15] <sorear> rakudo: sub foo(@x?) { say @x.defined }; foo

[05:15] <p6eval> rakudo cca116: OUTPUT«Bool::True␤»

[05:15] <sorear> rakudo: sub foo(@x?) { say @x.perl }; foo

[05:15] <p6eval> rakudo cca116: OUTPUT«Array.new()␤»

[05:15] <sorear> rakudo: sub foo(@x?) { say @x.perl; my @y; say @y.perl }; foo

[05:15] <p6eval> rakudo cca116: OUTPUT«Array.new()␤Array.new()␤»

[05:15] <sorear> hrmf

[05:16] *** nsh left
[05:20] *** nsh- joined
[05:21] *** SHODAN joined
[05:26] *** tokuhirom left
[05:28] *** tokuhirom joined
[05:40] *** packetknife left
[05:41] *** revdiablo left
[05:42] *** revdiablo joined
[05:42] *** revdiablo left
[05:42] *** revdiablo joined
[05:58] *** wolfman2000 left
[06:00] *** Util left
[06:00] *** ingy left
[06:00] *** ingy joined
[06:01] *** Util joined
[06:02] *** envi_laptop joined
[06:03] *** envi_laptop left
[06:05] *** orafu left
[06:05] *** orafu joined
[06:07] *** envi_laptop joined
[06:12] <sorear> I have a BEGIN model that I think may be workable

[06:16] <mberends> good. morning, sorear

[06:19] <mberends> sorear: is there a part of RunMain (CLRBackend.cs) that I should concentrate on documenting, or just all of it?  I just arrived there, and it seems to reach out to so many other things.

[06:21] *** donri joined
[06:24] <sorear> mberends: the logical subdivisions of CLRBackend are 1. the constant pool generator 2. the JSON parser 3. the ClrOp layer (an AST for CIL) 4. the CpsOp layer (a CPS-aware AST) 5. the JSON-to-CpsOp converter in NamProcessor 6. the downcall handler

[06:24] <sorear> mberends: but there's a significant amount of code that doesn't logically belong to any of the divisions

[06:25] <sorear> mberends: RunMain is mostly part of #6

[06:26] <sorear> mberends: will sleep& in 5min unless interrupted

[06:26] <mberends> sorear: thanks, interesting, so much more to explore

[06:26] <mberends> sorear: good night

[06:27] *** REPLeffect left
[06:29] * sorear out

[06:31] *** Alias_ left
[06:33] *** mkramer joined
[06:35] *** koban` joined
[06:35] *** koban` left
[06:40] *** wtw joined
[06:40] *** REPLeffect joined
[06:41] *** jevin left
[06:46] *** jevin joined
[06:49] *** mberends left
[06:59] *** masak joined
[06:59] <masak> goot mornink, #perl6.

[06:59] <masak> phenny: tell diakopter http://www.hakank.org/comb/debruijn.cgi http://en.wikipedia.org/wiki/De_Bruijn_sequence http://www.theory.csc.uvic.ca/~cos/inf/neck/NecklaceInfo.html

[06:59] <phenny> masak: I'll pass that on when diakopter is around.

[07:01] <masak> before hakank provided me with all the theory, I had already gotten around to writing a brute-force solution, which seems to be doing fairly well: https://gist.github.com/1216010

[07:02] <eiro> wesh comment ca va bien ?^H^H

[07:02] <eiro> masak, i missed your line yesterday 

[07:02] <masak> eiro: :)

[07:03] <eiro> i have to admit i'm not sure about the meaning of it 

[07:03] <eiro> what did you mean by "ont été la prise sur le channel"

[07:05] <masak> "have taken over the channel".

[07:06] <masak> this was the best that I and Google Translate could come up with together.

[07:06] *** envi_laptop left
[07:06] <masak> I veto'ed GT's translation "canale", because that sounded weird. but maybe that's actually correct.

[07:07] <masak> the translation did roundtrip, which is a good sign, if not a perfect guarantee of correctness. :)

[07:08] <eiro> haha: that's a word by word translation. "les polonais et finlandais (ont pris le controle du cannal|sont en surnombre)". 

[07:09] <eiro> canale ? is it the real spell ?

[07:09] * eiro verify

[07:09] <eiro> actually it's canal

[07:09] <masak> ah; double fail :)

[07:09] <eiro> yep :)

[07:10] <masak> I can't even correctly remember the spelling I wrongly rejected :P

[07:10] <eiro> :-)

[07:12] <masak> well, it seems I meant "sont en surnombre" more than "ont pris le controle".

[07:13] <eiro> it seem canal and channel have the same means (even the watercourse)

[07:15] <eiro> vous avez "envahi le canal" 

[07:15] <eiro> je pense qu'un francais aurais dis ca.

[07:16] <masak> "envahi"! beautiful!

[07:17] <eiro> :)

[07:17] <masak> Latin vādere, "to go, rush".

[07:18] <eiro> btw: good for you: if you took over the chan, that's because you have lot of perl6 hackers :)

[07:18] *** thou left
[07:18] <masak> that's the idea :) hence the name.

[07:18] <eiro> oh? where did you find ethimology of the world ? 

[07:19] <eiro> grmbl ... go back to code ... in perl5 :/

[07:19] <eiro> some days i'm so borring by perl5 ...

[07:20] <cotto> eiro, it could be php

[07:23] <eiro> cotto, or python ... 

[07:23] <eiro> so yes: it could be way worse

[07:24] <cotto> then again, you can write good and bad code in any language commonly used in production environments

[07:25] <eiro> sure! that's not the pb.

[07:25] <cotto> you with with what you've got

[07:25] * moritz wouldn't know how to write good code in most languages

[07:26] *** mj41 joined
[07:26] <moritz> actually i'm not sure I know how to write good code in *any* language

[07:26] <cotto> moritz, step 1 is to write bad code.  Step 2 is to come back to it 18 months later.

[07:27] <moritz> I do have some code from 2007 which I recently modified

[07:27] <cotto> I've heard of easier ways.

[07:27] <eiro> the thing is i'm "fed up to unroll @_" (i don't know who gave this talk) 

[07:27] <moritz> and while it didn't look pretty, it was understandable and hackable

[07:28] <eiro> :)

[07:29] <masak> eiro: I mostly look on dictionary.com

[07:31] <eiro> ok

[07:32] *** lucs left
[07:32] <masak> moritz: may I recommend "The Practice of Programming" by Kernighan and Pike -- most of it may not be news to you, but it's the best no-nonsense capture of good programming principles that I've seen to date. I have it here on the desk right next to me. :)

[07:33] *** lucs joined
[07:33] <cotto> I like that book.

[07:34] <cotto> I took it a little too dogmatically when I first read it, but it's great if you don't look at its recommendations as being hard laws.

[07:34] <jnthn> mornin'

[07:34] <phenny> jnthn: 05:13Z <cotto> tell jnthn Give win64-workaround another run whenever you get a chance.

[07:35] <cotto> ohai.  I was just about to goto bed

[07:36] *** mux_ is now known as mux

[07:36] <jnthn> cotto: At $dayjob with no Rakudo build env anyway...

[07:36] <jnthn> Will check it this evening

[07:36] <eiro> oh yes! Pike is one of my idols 

[07:36] <jnthn> moritz++ # applying mls++ patch

[07:37] <jnthn> If supernovus++'s patches on socket didn't yet get merged, +1 from me on those too.

[07:37] <eiro> (read "the good, the bad and the ulgy" about unix history and plan9: it's very interesting!) 

[07:37] <jnthn> Otherwise I do it this evening.

[07:40] *** erez left
[07:40] *** erez joined
[07:43] *** daniel-s left
[07:45] <jnthn> TimToady: I was expecting to tie-break on lexical scope depth; I just hadn't gotten around to actually implementing it yet.

[08:04] *** Maddingu1 is now known as Maddingue

[08:05] <masak> sorear: sometimes when some MyGrammar.parse fails in a certain way, I get "Unable to cast object of type 'Niecza.P6opaque' to type 'Cursor'." seems to me that should never happen. if it helps you, I could find out more about the exact nature of those circumstances.

[08:08] *** daniel-s joined
[08:08] *** alvis left
[08:21] * moritz tests supernovus++'s patch right now

[08:22] <moritz> where by "test" I mean "see if it compiles" :-)

[08:22] *** alvis joined
[08:31] <dalek> rakudo/nom: f2857b7 | (Timothy Totten)++ | src/core/IO/Socket/INET.pm:

[08:31] <dalek> rakudo/nom: IO::Socket::INET.accepts now returns the connected socket

[08:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f2857b7fc9

[08:34] *** wamba joined
[08:35] *** alvis left
[08:39] *** senobmeht left
[08:42] *** senobmeht joined
[08:43] *** wamba left
[09:00] *** dakkar joined
[09:00] *** wamba joined
[09:03] *** satyavvd left
[09:08] *** dakkar left
[09:09] *** dakkar joined
[09:12] *** satyavvd joined
[09:16] *** daxim_ joined
[09:22] *** nebuchadnezzar joined
[09:27] *** skangas left
[09:27] <tadzik> good morning morning

[09:28] <masak> tadzik: good good, morning.

[09:28] <masak> quick poll: in http://en.wikipedia.org/wiki/Newcomb%27s_paradox , would you go for both boxes, or just B?

[09:31] <tadzik> B probably

[09:31] *** skangas joined
[09:32] <moritz> does 'running a fair random generator to determine my choice' count?

[09:32] <masak> sure!

[09:33] <masak> (though it feels a bit reckless)

[09:33] *** replore_ left
[09:34] *** satyavvd left
[09:34] *** satyavvd joined
[09:34] <moritz> (note that this was before reading the full analysis

[09:35] <moritz> )

[09:36] <dalek> nqp: 8ba6001 | moritz++ | src/how/NQPClassHOW.pm:

[09:36] <dalek> nqp: MRO calculation optimization by mls++

[09:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8ba60015ce

[09:36] <masak> it's interesting to see what the precense of a Predictor does to one's willingness to think about one's choices rationally. :)

[09:37] <moritz> thought just B sounds more sensible, once I think more about it

[09:38] *** satyavvd left
[09:38] *** satyavvd_ joined
[09:38] <masak> LessWrong has a fascinating analysis of this. he's a two-boxer.

[09:38] <masak> his central argument should sound familiar to HPMoR readers: "Rational agents should WIN."

[09:38] <masak> http://lesswrong.com/lw/nc/newcombs_problem_and_regret_of_rationality/

[09:38] <moritz> but when he publishes his analysis, the predictor knows, no? :-)

[09:39] <masak> most likely, yes.

[09:40] *** satyavvd joined
[09:41] <tadzik> the choice depends on a trust you put in the Predictor

[09:41] <masak> let's assume that the Predictor is the real deal.

[09:42] <masak> otherwise the problem sort of collapses into something much more mundane.

[09:42] <tadzik> if he's never wrong, I'll take B

[09:42] <tadzik> if he's a real deal, I assume his predictions are always exactly my choicnes

[09:42] <tadzik> which makes the answer quite obvious, I suppose

[09:43] *** satyavvd_ left
[09:43] <tadzik> picking both could feel a bit like cheating the system :)

[09:44] <moritz> tadzik: since Omega knows you well enough to have understood that you'd arrive at that conclusion, you have now won 1Mio USD

[09:44] <tadzik> I suppose the longish description of the Predictor in both texts is supposed to make you trust him a bit less, and to think more about the choice

[09:44] <tadzik> moritz: true

[09:44] <moritz> tadzik: spend them quickly before the exchange rate drops

[09:45] <tadzik> and what is 1 M + 1 T compared to 1 M? It's almost nothing

[09:45] <masak> that's irrelevant.

[09:45] <moritz> it's a month of interest :-)

[09:45] <masak> it's more money.

[09:45] <tadzik> exactly

[09:45] <moritz> well, less than a month, most likely

[09:45] <tadzik> maybe there's a problem for the greedy :) I want moar, moar, moar :P

[09:45] <masak> I want the 1,001,000 USD.

[09:45] * moritz would probably just take box B, too

[09:45] <masak> that's clearly the winning condition here ;)

[09:45] <tadzik> I like good-enough choices

[09:46] * moritz too, as long as they are as awesome as Perl 6

[09:46] <masak> Perl 6 is all about both boxes :P

[09:46] <tadzik> I like the saying "I don't have to be the best, I can be very good"

[09:46] *** envi_laptop joined
[09:46] <tadzik> masak: ng took both, nom tries to take only one :)

[09:47] <moritz> without having read all of Elizer's analysis, I'd approach the problem like this:

[09:47] <moritz> suppose the probabilty that you can outsmart Omega is p

[09:47] <moritz> if you take both boxes, your expected value is 1001000 * p + 1000 (1-p)

[09:48] <moritz> if you take box B, your expected value is 1mio

[09:48] <moritz> now you set both sides equal, and see what p is

[09:51] <moritz> so if you think you can outsmart Omega with a certainty of 99.9%, you take both boxes, and just B otherwise

[09:51] <moritz> my hubris doesn't go that far.

[09:53] <tadzik> moritz++ # rational analysis

[10:04] <masak> I like the analysis :)

[10:05] <masak> even though I'm not sure if outsmarting Omega comes down to a probability.

[10:06] *** wamba left
[10:16] *** pmurias joined
[10:23] *** woosley left
[10:42] *** satyavvd left
[10:43] *** tokuhirom left
[11:01] <tadzik> make spectest  1265.52s user 92.35s system 99% cpu 22:48.75 total

[11:01] <tadzik> nom: say (1398.19 - 1265.52) / 1398.19

[11:01] <p6eval> nom f2857b: OUTPUT«0.094886960999578␤»

[11:02] <tadzik> not bad

[11:02] <tadzik> that is mostly mls++' patch I suppose

[11:02] <tadzik> the previous result is from 2011-09-09 00:13:36

[11:02] <jnthn> mls++

[11:02] * tadzik afks

[11:02] <jnthn> 10% spectest time win is nice

[11:03] *** HarryS left
[11:03] <jnthn> .oO( wonder if my box does it in 200s now... )

[11:04] *** mj41 left
[11:06] *** HarryS joined
[11:08] *** odoacre left
[11:08] *** odoacre joined
[11:13] *** wamba joined
[11:16] *** replore_ joined
[11:20] *** uasi left
[11:20] *** mj41 joined
[11:21] *** arthur-_ left
[11:28] *** satyavvd joined
[11:29] *** arthur-_ joined
[11:30] *** djanatyn joined
[11:31] *** HarryS left
[11:35] *** Psyche^ joined
[11:36] *** daxim left
[11:38] *** pmurias left
[11:39] *** Patterner left
[11:39] *** Psyche^ is now known as Patterner

[11:41] *** pernatiy left
[11:42] <moritz> spectest in 200s?

[11:42] <moritz> how many cores?

[11:43] <jnthn> moritz: I got it to 220 yesterday by running it with --jobs=8

[11:43] <jnthn> moritz: 4 cores, but I guess then there's HT, and it can win something by being able to beat IO-bound things.

[11:43] *** wamba left
[11:44] <jnthn> mls++ seems to have got us a ~10% reduction, so that could bring me to the 200ish mark :)

[11:48] *** lichtkind joined
[11:49] <bbkr> 200s? challenge accepted :)

[11:51] <jnthn> Well, getting Rakudo improved to the point where it's more like 100s is a more interesting challenge :P

[11:53] <moritz> hey, we could give mls_ a commit bit for nqp, iirc we don't require CLAs for that

[11:53] <jnthn> +1

[11:56] *** renormalist|work joined
[11:59] <moritz> done

[12:03] * daxim_ beckons jnthn

[12:03] <daxim_> http://conferences.yapceurope.org/tcpw2011/newtalk

[12:06] *** HarryS joined
[12:08] *** wamba joined
[12:08] *** satyavvd left
[12:09] <jnthn> daxim_: Yes, I read the message on the ba.pm list this morning ;)

[12:09] <jnthn> daxim_: Planujem prist. :)

[12:10] *** Bzek joined
[12:12] *** plobsing_ left
[12:14] *** benabik left
[12:17] <donri> is the artistic lisence most similar to bsd or gpl?

[12:19] <daxim_> similarity under which aspect?

[12:19] *** f00li5h left
[12:19] <moritz> in length of text, it's more similar to the GPL :-)

[12:19] <moritz> it's also compatible to GPL

[12:20] <daxim_> copyleft: gpl yes, bsd no, artistic no    (afaik)

[12:20] <moritz> but AL is more permissive than the GPL

[12:20] <donri> aka is it permissive or copyleft

[12:20] <donri> ok thanks

[12:20] *** f00li5h joined
[12:21] <moritz> donri: in case of modifications, it requires a rename OR publishing of the modifications (if redistributed)

[12:22] <lichtkind> daxim_: your rt and the mail was broken, wrote domm yesterday about it

[12:22] <daxim_> damn, really?  we tested it when it was set up

[12:22] <lichtkind> jnthn: you will come to vienna?

[12:23] <lichtkind> daxim_: i got a No permission to create tickets in the queue 'TwinCity2011'

[12:23] *** pernatiy joined
[12:30] *** clairvy joined
[12:38] *** abercrombie joined
[12:39] <jnthn> lichtkind: Ano :)

[12:40] <lichtkind> jnthn: than i pull back my p6 talk :)

[12:40] *** benabik joined
[12:40] <jnthn> lichtkind: I wasn't in Bratislava since I used to live there :)

[12:40] <jnthn> lichtkind: And I really miss it. :)

[12:40] <lichtkind> yes understand it

[12:41] *** REPLeffect left
[12:41] <jnthn> lichtkind: Hey, you can talk about Perl 6 too :P

[12:41] <jnthn> lichtkind: What's your topic?

[12:42] <lichtkind> jnthn: still improving this arrays and hashes talk

[12:42] <jnthn> lichtkind: OK, that's probably quite different from what I'd talk about.

[12:42] <lichtkind> you do signatures or the metamodel?

[12:46] *** uasi joined
[12:46] <moritz> Perl 6: all the cool features in just 5 minutes, explained in depth!

[12:47] <lichtkind> stay away from moritz, he is a snake oils salesman

[12:47] *** wamba left
[12:48] <moritz> I merely proposed a title for a talk :-)

[12:53] <lichtkind> sounds like amn electronic noise experiment, to play a 20h talk in 5 min :)

[12:54] <benabik> It's just a 5 minute talk delivered from depth... say 60' underwater?

[12:54] <lichtkind> hahah

[12:55] <moritz> good be a talk advertising a book or so :-)

[12:56] <jnthn> lichtkind: Was pondering doing one on "Optimizing Rakudo" or "Optimizing Perl 6" or some such.

[12:56] <lichtkind> yes

[12:56] <jnthn> lichtkind: By November I shoulda done a bunch of work on optimizers, and have the BS stuff in place, or mostly in place. So should have plenty of things to say :)

[12:58] <moritz> "Perlis of inlining - what can go wrong goes wrong"

[12:58] <moritz> *Perils

[12:58] <jnthn> ;)

[12:58] <jnthn> Interesting typo :)

[12:58] <jnthn> "Perils of Perl Inlining" :)

[13:04] *** im2ee joined
[13:05] *** Alias joined
[13:05] *** donri left
[13:05] *** donri joined
[13:09] *** Holy_Cow joined
[13:10] *** Holy_Cow left
[13:11] *** mtk joined
[13:17] <mikemol> TimToady: Nice answer. I'll be interested to watch what happens as Paddy gets more interested in P6.

[13:23] <bbkr> has anybody experienced "my $i = now;" hanging forever? it happens on one of my machines on latest NOM, but I don't know what causes that.

[13:24] <moritz> bbkr: it's Num.Rat on 32 bit systems

[13:25] <moritz> bbkr: problem is that timestamp is a 10-digit number, and if you add a few decimals to that, it just doesn't fit into a Rat that's made of two 32 bit ints

[13:27] <bbkr> moritz: thanks for explanation

[13:30] <bbkr> that ends my attempt to crunch spectest under 200 seconds :)

[13:30] *** replore_ left
[13:31] *** replore_ joined
[13:32] *** benabik_ joined
[13:37] *** benabik left
[13:37] *** benabik_ is now known as benabik

[13:38] *** wamba joined
[13:38] <flussence> (it'd be nice if prove had a thing to auto-kill a test after some length of time...)

[13:38] <moritz> prove --exec='perl tools/perl6-limited.pl' ...

[13:38] *** renormalist|work left
[13:39] <sorear> masak: That error message would happen if you somehow produced a subclass of Cursor or Match using Mu.new

[13:39] <sorear> masak: you *might* also be able to trip it by using undef in an unhandled way

[13:39] <flussence> well that was simple enough :)

[13:40] <moritz> sorear: what's this 'undef' you are talking about?

[13:44] <masak> sorear: as far as I can see, all I did was grammar-match in a les-than-successful way.

[13:47] *** abercrombie left
[13:47] *** SHODAN left
[13:47] *** _jaldhar left
[13:55] <im2ee> Hello:)

[13:56] <masak> im2ee: cz!

[14:02] <sorear> moritz: 'Match' or 'Cursor'

[14:03] <sorear> masak: maybe you're doing something with $/ after a failed match that I never expected anyone to do with the Match type object.  I can be very shortsighted sometimes.

[14:04] <sorear> TimToady: +1 to tiebreaking on lexical scope depth

[14:04] <sorear> I planned to do it in Niecza too

[14:04] <jnthn> yay :)

[14:04] <masak> sorear: on the line where it blows up, I'm doing $/.ast

[14:04] <sorear> niecza: multi foo(Int $x) { "a" } ;  { multi foo(Int $x) { "b" }; say  foo(5) } # I can't remember if I implemented it yet

[14:04] <p6eval> niecza v9-24-ga279320: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/rJfxOl78Bp line 1:␤------> multi foo(Int ⏏$x) { "a" } ;  { multi foo(Int $x) { "b"␤  &foo is declared but not used at /tmp/rJfxOl78Bp line 1:␤------> multi foo⏏(…

[14:05] <sorear> niecza: multi foo(Int $x) { "a" } ;  { multi foo(Int $x) { "b" }; say  foo(5) } #OK # I can't remember if I implemented it yet

[14:05] <p6eval> niecza v9-24-ga279320: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/CtGPVSP1Kq line 1:␤------> multi foo(Int ⏏$x) { "a" } ;  { multi foo(Int $x) { "b"␤  &foo is declared but not used at /tmp/CtGPVSP1Kq line 1:␤------> multi foo⏏(…

[14:05] <sorear> niecza: multi foo(Int $x) { "a" } ;  { multi foo(Int $x) { "b" }; say  foo(5) } #OK

[14:05] <p6eval> niecza v9-24-ga279320: OUTPUT«b␤»

[14:06] *** im2ee left
[14:07] <sorear> \o/

[14:07] *** molaf joined
[14:11] *** mjreed left
[14:12] *** packetknife joined
[14:12] <mls_> good evening!

[14:13] *** wtw left
[14:14] *** alvis joined
[14:15] <mls_> jnthn: NQPClassHOW.pm's "methods" method ignores the :$local flag. Is that intentional?

[14:15] <moritz> \o

[14:16] <masak> mls_! \o/

[14:16] <moritz> mls_: I've given you commit access to nqp, in case you want to do more patches

[14:16] <moritz> (nqp commit bit policy is rather liberal)

[14:16] <mls_> Yes, I got an emial notification. Thanks!

[14:16] <moritz> niecza: 'a' ~~ /b/; say $<foo>

[14:16] <p6eval> niecza v9-24-ga279320: OUTPUT«Any()␤»

[14:16] <moritz> niecza: 'a' ~~ /b/; say $<foo>[0]

[14:16] <p6eval> niecza v9-24-ga279320: OUTPUT«Any()␤»

[14:17] <moritz> doesn't seem to be that simple

[14:18] <moritz> niecza: 'a' ~~ /b/; say $/.to

[14:18] <p6eval> niecza v9-24-ga279320: OUTPUT«Unhandled exception: System.InvalidCastException: Cannot cast from source type to destination type.␤  at CORE.C684_Match_2Eto (Niecza.Frame ) [0x00000] in <filename unknown>:0 ␤  at Niecza.Kernel.RunCore (Niecza.Frame& cur) [0x00000] in <filename unknown>:0…

[14:18] <moritz> there you go

[14:19] <jnthn> mls_: Is it not :$local! ?

[14:19] <mls_> yes.

[14:19] <jnthn> mls_: So it's mandatory

[14:19] <moritz> I'd expect that to throw an error like 'Cannot access attribute of a type object' or so

[14:19] <jnthn> e.g. it doesn't know how to handle the non-local case.

[14:20] <mls_> It only handles the local case, I think

[14:20] <moritz> that's what jnthn said, except that he used double negation

[14:21] <moritz> :-)

[14:21] <mls_> yes, sorry ;)

[14:21] <moritz> and not avoiding double negation makes it easy to non-misunderstand

[14:21] <moritz> or something :-)

[14:22] <mls_> but shouldn't it also handle the non-local case?

[14:23] <jnthn> mls_: It can be made to :)

[14:23] *** mkramer left
[14:23] <jnthn> mls_: There's not an NQP spec really, so much of what it's meta-objects do has come about on a "what do they need to do" basis.

[14:24] <jnthn> mls_: Whereas S12 lays out what full-blown Perl 6 should do.

[14:24] <jnthn> mls_: I've no objections if somebody wants to extend them a bit though.

[14:25] <mls_> ok

[14:26] <mls_> my goal was to speed up has_method in RoleToClassApplier a bit, which uses methods() to get all methods and then compares the name with each element of the array

[14:27] <mls_> so I wondered if I could use method_table() instead, but that only has the local methods

[14:28] <jnthn> mls_: yeah

[14:28] <jnthn> mls_: You could build a hash of names once though

[14:28] <jnthn> as in, once in the applier

[14:29] <jnthn> mls_: Or walk the mro and look in each method table.

[14:29] *** uasi_ joined
[14:30] <mls_> yes

[14:31] <mls_> "can" seems to already do that

[14:32] <jnthn> Not sure I'd fancy relying on can here though

[14:32] <jnthn> Given we're still uncomposed.

[14:32] *** uasi left
[14:33] <mls_> so no @!meo?

[14:33] <mls_> @!mro?

[14:33] <jnthn> well, that, but also .^can may want to delegate to the method cache or something...

[14:33] *** tokuhirom joined
[14:33] *** clairvy left
[14:34] *** clairvy joined
[14:34] <jnthn> Mostly it's just a case of trying to think ahead about what other people's meta-objects might do/look like.

[14:36] <mls_> btw, what does the 'methods' method return?

[14:36] <mls_> an array of code objects, right?

[14:37] *** im2ee joined
[14:38] <mls_> so is it ok for has_method to compare with a name?

[14:39] <dalek> roast: 698a5e1 | Coke++ | S03-smartmatch/any-array.t:

[14:39] <dalek> roast: nom fudging

[14:39] <dalek> roast: review: https://github.com/perl6/roast/commit/698a5e1e55

[14:42] <jnthn> mls_: code objects, but it's the names that matter in role composition

[14:42] *** kaare_ joined
[14:43] <jnthn> Apart from non-collision, where sameness is interesting.

[14:45] <mls_> so code objects stringify to the name?

[14:46] <jnthn> Yes

[14:46] <jnthn> Stringification is safer than calling .name (more)

[14:46] <jnthn> NQP doesn't (yet?) wrap up Parrot subs in code objects

[14:47] <mls_> ah, ok. makes sense.

[14:47] <jnthn> Though it irks me more and more that it doesn't and the performance overhead of doing so is very minimal these days.

[14:47] <mls_> so you better don't all add_method with the wrong name ;)

[14:47] <jnthn> ;)

[14:48] <mls_> (cause add_method takes both a name and a code object as arguments)

[14:48] <jnthn> yeah

[14:48] <jnthn> Looking at the method table's keys is "safer" in a sense.

[14:49] <jnthn> Probably should move towards doing that.

[14:51] <mls_> hmm, perl6's RoleToClassApplier::has_method ignores $local and uses the method_table.

[14:51] <jnthn> ah :)

[14:51] <jnthn> Well, I guess I learned something between NQP and Perl 6 then :P

[14:52] <jnthn> Generally, if Perl 6's meta-objects do things in a way that seems better than NQP's, then it probably makes sense to update the NQP ones accordingly.

[14:52] <mls_> ok, will do ;)

[14:52] <jnthn> I need to re-visit the NQP roles implementation at some point to apply the lessons from the Perl 6 one too.

[14:52] <jnthn> er, the parametricity bits of it.

[14:54] <mls_> perl6 calls has_method() with local=0 when composing the methods. Is this a bug?

[14:54] <mls_> (either that local is ignored or that it is called with local=0)

[14:55] <jnthn> Depends where.

[14:55] <jnthn> Potentially a thinko.

[14:55] <jnthn> nom: class A { method m() { say 'a' } }; role R { method m { say 'r' } }; class C does R { }; C.m

[14:55] <p6eval> nom f2857b: OUTPUT«r␤»

[14:55] <jnthn> hm, it gets that right :)

[14:56] <mls_> cause it ignores the local=0 ?

[14:56] <jnthn> nqp: class A { method m() { say('a') } }; role R { method m() { say('r') } }; class C does R { }; C.m

[14:56] <p6eval> nqp: OUTPUT«r␤»

[14:56] <jnthn> mls_: ah :)

[14:56] <jnthn> mls_: Maybe. I need to decommute in a moment...can look more once I'm home

[14:56] <mls_> ok. till later...

[14:57] <jnthn> But think is, Rakudo classes don't ignore the :local(0)

[14:57] <jnthn> *thing

[14:57] <mls_> but Rakudo's RoleToClassApplier::has_method ignores it ;)

[14:58] <jnthn> mls_: Oh.

[14:58] <jnthn> mls_: ahh...thinking about it...

[14:59] <jnthn> I've yet to implemented the "required method" thingy roles do

[14:59] <sorear> masak: also, it's not clear what the correct behavior of #49 is

[14:59] <jnthn> Which is the place I'd need :local(0)

[14:59] <jnthn> mls_: but if the composition check passes 0...yeah, sounds like thinko.

[15:01] *** thou joined
[15:03] <jnthn> decommute &

[15:04] *** saaki joined
[15:05] <masak> sorear: huh? @a.elems should be 0, where's the unclarity?

[15:05] <moritz> masak: did you see my example that triggered the System.InvalidCastException?

[15:05] *** clairvy left
[15:06] *** clairvy joined
[15:06] <sorear> masak: what is the nature of @a?

[15:06] <moritz> maybe that can be golfed further

[15:07] <moritz> niecza: $/.to

[15:07] <p6eval> niecza v9-24-ga279320: OUTPUT«Unhandled exception: Unable to resolve method to in class Any␤  at /tmp/qAZGUBmGMo line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2060 (CORE C968_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2061 (CORE module-CORE @ …

[15:07] <sorear> masak: is it equivalent to [], creating a new array?

[15:07] <moritz> niecza: Match.to

[15:07] <p6eval> niecza v9-24-ga279320: OUTPUT«Unhandled exception: System.InvalidCastException: Cannot cast from source type to destination type.␤  at CORE.C684_Match_2Eto (Niecza.Frame ) [0x00000] in <filename unknown>:0 ␤  at Niecza.Kernel.RunCore (Niecza.Frame& cur) [0x00000] in <filename unknown>:0…

[15:07] <moritz> niecza: say Num.sqrt

[15:07] <p6eval> niecza v9-24-ga279320: OUTPUT«0+0i␤»

[15:07] <sorear> masak: and why Array?  The implicit type constraint is Positional or maybe Positional[Any]

[15:08] <dalek> niecza: bc5cf9d | sorear++ | lib/Builtins.cs:

[15:08] <dalek> niecza: Zero sqrt does not need to promote

[15:08] <dalek> niecza: review: https://github.com/sorear/niecza/commit/bc5cf9d5fa

[15:09] <masak> sorear: for the same reason 'my @a' gets an empty Array, I guess.

[15:10] <sorear> Hmm.  I guess that rationale works.

[15:10] <masak> Array is the "default" Positional.

[15:28] <masak> perl6: say Num.sqrt

[15:28] <p6eval> niecza v9-24-ga279320: OUTPUT«Rebuild in progress␤»

[15:28] <p6eval> ..rakudo f2857b: OUTPUT«No applicable candidates found to dispatch to for 'sqrt'. Available candidates are:␤:(Num, Mu %_)␤␤  in method sqrt at src/gen/CORE.setting:2364␤  in <anon> at /tmp/NA3sSYdnM3:1␤  in <anon> at /tmp/NA3sSYdnM3:1␤␤»

[15:28] <p6eval> ..pugs: OUTPUT«0␤»

[15:31] <sorear> #phasers in 119? :D

[15:32] <tadzik> mebbe :)

[15:32] <moritz> next week, I think

[15:32] <tadzik> maybe I should do something to have a report

[15:32] <dalek> nqp: f3b8f73 | (Michael Schroeder)++ | src/how/RoleToClassApplier.pm:

[15:32] <dalek> nqp: copy has_method implementation over from perl6

[15:32] <dalek> nqp: 

[15:32] <dalek> nqp: The perl6 implementation uses the method_table instead

[15:32] <dalek> nqp: of iterating over all methods. It ignores $local for now,

[15:32] <dalek> nqp: this may need to be fixed in the future.

[15:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f3b8f73e40

[15:32] <mls_> heh, my first commit ;)

[15:32] <moritz> tadzik: #phasers-driven development

[15:32] <masak> mls_++

[15:32] <tadzik> nice one

[15:33] <tadzik> moritz: or motivation-driven. Or even expectation-driven.

[15:33] <tadzik> It's when someone gives you a commit bit, and you feel obliged to commit :P

[15:33] <masak> mls_: is your last name "Schroeder" or "Schröder"?

[15:33] <masak> just curious.

[15:33] <mls_> Schr􏿽xF6der, actually

[15:34] <masak> ooh, a Latin-1 client ;)

[15:34] *** uasi_ left
[15:34] <mls_> yes, parrot also doesn't like that. I always need to change LC_CTYPE to stop parrot from complaining ;)

[15:34] * tadzik mumbles something about every package delivered to some So&#347;nierz guy

[15:35] <sorear> can't the world just standardize on utf-8 already?

[15:35] <mls_> ;)

[15:35] <tadzik> ups--

[15:35] <sorear> maybe utf-16 for the East Asians

[15:36] <dalek> niecza: 0173980 | sorear++ | / (2 files):

[15:36] <dalek> niecza: Optional @/% defaults to empty Array/Hash (masak) (fixes #49)

[15:36] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0173980691

[15:38] <masak> mls_: UTF-8 is your *frieeeeend*! :D

[15:38] <mls_> yes. It's just lazyness...

[15:38] <masak> »ö«

[15:39] <masak> oh wait, that's all Latin-1 too :P

[15:39] <sorear> tadzik: have you seen? http://en.wikipedia.org/wiki/File:Letter_to_Russia_with_krokozyabry.jpg

[15:40] * masak admires that post office

[15:41] <moritz> sounds like they employ a geek :-)

[15:41] <tadzik> oh wow

[15:42] *** benabik left
[15:46] <moritz> a wrongly encoded address is just the riddle you want to solve if you have to repair horrible hand writing all day :-)

[15:47] *** tokuhirom left
[15:49] <masak> no Ch. 78 of HPMoR yet :/

[15:51] <moritz> masak: but Ch. 20 of the podcast

[15:52] <masak> I'm thinking of listening to it... but it'll take a year for it to catch up to where the text version is *now*...

[15:52] *** risou_awy is now known as risou

[15:54] <moritz> I find it very nice for the commute time

[15:54] <moritz> reading on the bike is LTA :-)

[15:54] * moritz -> commute :-)

[16:01] * jnthn home

[16:01] *** sayu joined
[16:01] * masak decommutes

[16:02] *** masak left
[16:04] <dalek> roast: d09d566 | sorear++ | S06-signature/optional.t:

[16:04] <dalek> roast: Add tests for Niecza #49

[16:04] <dalek> roast: review: https://github.com/perl6/roast/commit/d09d566c46

[16:04] *** SHODAN joined
[16:04] <sorear> o/ jnthn

[16:04] <jnthn> hi sorear 

[16:06] *** dukeleto left
[16:06] *** dukeleto joined
[16:11] <sorear> oh wow, github++

[16:11] <sorear> I went to close #49 but apparently it saw my commit and closed itself

[16:12] * sorear hunts for documentation of this feature

[16:12] *** uasi joined
[16:13] *** aindilis left
[16:20] *** clairvy left
[16:24] <sorear> yay, found it

[16:27] <dalek> specs: ac6eea7 | larry++ | S12-objects.pod:

[16:27] <dalek> specs: add scoping in as multi dispatch tiebreaker

[16:27] <dalek> specs: review: https://github.com/perl6/specs/commit/ac6eea7387

[16:28] *** mberends joined
[16:30] <sorear> o/ mberends

[16:31] <mberends> o/ sorear.  I have about 12 hours of backlogging to do.

[16:32] * moritz wonders how many days worth of IRC conversation one can backlog in 12 hours

[16:34] <sorear> in early Wikipedia days there was a joke about classifying people by the number of hours they spent to study one hour of RecentCHanges

[16:34] <sorear> or maybe that was TvTropes

[16:35] *** mj41 left
[16:35] *** uasi left
[16:36] *** birdwind1pbird left
[16:37] <dalek> rakudo/nom: f8301da | Coke++ | t/spectest.data:

[16:37] <dalek> rakudo/nom: track failures, run fudges.

[16:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f8301da74b

[16:41] * sorear has found a new horrible hack which is less horrible than the old horrible hack, for ferrying data between compiler-space and run-space

[16:41] <TimToady> sounds convergent, or at least less divergent :)

[16:46] <jnthn> mls++ # my spectest run is down 193s! :)

[16:47] <sorear> nice

[16:47] <sorear> what's the mimimum memory these days?

[16:48] <jnthn> sorear: for?

[16:48] <jnthn> sorear: Build?

[16:48] <sorear> jnthn: build/spectest

[16:49] <flussence> my netbook can survive it with only 1GB (no swap)

[16:49] <jnthn> Not sure, but I suspect higher than ng

[16:49] <flussence> I think it's closer to 700MB now

[16:49] <jnthn> flussence: 32-bit or 64-bit?

[16:49] <sorear> so probably no hope just yet of a .25 build.  ok.

[16:49] <flussence> 32, I have to manually kill that one test that hangs...

[16:50] <jnthn> sorear: No, it probably still needs some reigning in :(

[16:51] <jnthn> sorear: Though the amount of PAST nodes we build probably drops by half once the serialization stuff lands.

[16:54] <sorear> pre-\o/

[16:55] <tadzik> sorear: how come I hear of no such problems in niecza? Is it that CLR is superior in this sense, or you just got the hard stuff silently done?

[16:57] <sorear> tadzik: you haven't heard of this because I haven't started tackling it

[16:57] <tadzik> oh, I see

[16:58] <tadzik> so you handle the compiletime-runtime boundary differently somehow?

[16:58] <sorear> tadzik: also, AST nodes have always been real objects in Niecza

[16:58] <jnthn> "real objects"?

[16:58] <sorear> PCT nodes are Captures

[16:58] <jnthn> Oh, as opposed to the capture thingy...right.

[16:59] <sorear> I guess because PCT started in Parrot's infancy

[16:59] <jnthn> aye

[17:00] <sorear> tadzik: the compiletime-runtime boundary is handled very differently in niecza.  I actually think jnthn++ has done a very good job considering the redesign for nom, and while I think niecza's way is better than what b did, I'm going to steal a *lot* from nom...

[17:07] *** envi_laptop left
[17:08] <jnthn> cotto: Tried the branch. It doesn't give any warnings during Configure now. :)

[17:09] *** localhost left
[17:10] *** localhost joined
[17:11] *** dakkar left
[17:11] <jnthn> cotto: The bad news is that it now blows up like:

[17:11] <jnthn> .\miniparrot.exe -Iruntime/parrot/include -o frontend/parrot2/prt0.pbc frontend/parrot2/prt0.pir

[17:11] <jnthn> PackFile_pack segment 'DIRECTORY' used size 2316 but reported 2596

[17:12] *** mj41 joined
[17:14] * jnthn git clean -xdf's just in case

[17:15] <jnthn> no luck :(

[17:21] <cotto> jnthn, dang

[17:21] <cotto> I wish I had a 64-bit windows box so I could fiddle with it myself

[17:23] *** packetkn_ joined
[17:25] <TimToady> that looks like the kind of ratio you get when there's a CRLF vs LF foulup

[17:26] <TimToady> if the lines average about 20 chars...

[17:26] <TimToady> er, 10 chars

[17:26] *** packetknife left
[17:27] <TimToady> perl6: say (2596-2316)/2316

[17:27] <p6eval> rakudo f8301d: OUTPUT«0.120898100172712␤»

[17:27] <p6eval> ..pugs: OUTPUT«0.1208981001727115716753022452504317789292␤»

[17:27] <p6eval> ..niecza v9-26-g0173980: OUTPUT«70/579␤»

[17:28] *** masak joined
[17:28] <masak> evening! \o/

[17:28] <frettled> Indeed it is!

[17:28] <TimToady> more like 8 chars

[17:31] <sorear> o/ masak

[17:32] <sorear> incidentally, I think pugs' output is a tad excessive.

[17:32] *** daniel-s left
[17:32] <[Coke]> sorear: they're just showing off.

[17:32] <tadzik> those haskellers

[17:38] * moritz compiles and tests a fix for http://www.perlmonks.org/?node_id=925931

[17:39] <jnthn> moritz++

[17:39] *** Chillance joined
[17:56] *** packetkn_ left
[17:58] <colomon> did we decide not to have #phasers today?

[17:59] <tadzik> I think so

[17:59] *** benabik joined
[18:01] *** risou is now known as risou_awy

[18:03] <masak> yeah, we can't have status meetings every day. :)

[18:03] <masak> at least not yet.

[18:03] <jnthn> But I want to do scrum! :P

[18:05] <dalek> rakudo/nom: 6c9731a | moritz++ | src/Perl6/Grammar.pm:

[18:05] <dalek> rakudo/nom: die on use of match variable in declaration

[18:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6c9731a031

[18:05] <moritz> .oO( a scrumateur )

[18:08] *** pernatiy left
[18:10] <dalek> niecza: b85eeeb | sorear++ | / (5 files):

[18:10] <dalek> niecza: Redesign to cross-domain communication system

[18:10] <dalek> niecza: 

[18:10] <dalek> niecza: Instead of using a custom interface which is compiled once and shared

[18:10] <dalek> niecza: between versions of Kernel.dll, a system which proved fragile and

[18:10] <dalek> niecza: inflexible, we now coopt System.Collections.IDictionary.

[18:10] <dalek> niecza: 

[18:10] <dalek> niecza: Also adds a C# code module to the compiler, finally allowing all

[18:10] <dalek> niecza: aspects of the compiler/compilee interface to be controlled by current

[18:10] <dalek> niecza: code.

[18:10] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b85eeeba94

[18:14] *** im2ee left
[18:14] *** im2ee joined
[18:19] * sorear out

[18:21] <TimToady> perl6: my $::("-O'Malley's") = 42; say $::("-O'Malley's");

[18:21] <p6eval> rakudo f8301d: OUTPUT«===SORRY!===␤Variable variable names not allowed in declarations at line 1, near " = 42; say"␤»

[18:21] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "$::(\"-"␤    expecting "=", formal parameter, context, ":" or "("␤    at /tmp/YbA4nL6sIe line 1, column 4␤»

[18:21] <p6eval> ..niecza v9-26-g0173980: OUTPUT«Any()␤»

[18:21] <TimToady> I think that should be made to work eventually

[18:22] <jnthn> ew :)

[18:22] <jnthn> But yes.

[18:22] <TimToady> given the string can be recognized as static

[18:22] <jnthn> rajt

[18:22] <jnthn> huh

[18:22] <jnthn> *right

[18:22] <jnthn> :)

[18:22] <TimToady> rajt isn't right but it works :)

[18:23] * TimToady isn't sure, actually, what niecza thinks it's doing with it

[18:25] *** birdwindupbird joined
[18:31] *** xinming joined
[18:37] <masak> rakudo: role A { multi method foo { say "A" } }; role B { multi method foo { say "B" } }; class C does A does B {}; C.new.+foo

[18:37] <p6eval> rakudo f8301d: OUTPUT«Ambiguous dispatch to multi 'foo'. Ambiguous candidates had signatures:␤:(C, Mu %_)␤:(C, Mu %_)␤␤  in method foo at src/gen/CORE.setting:246␤  in method dispatch:<.*> at src/gen/CORE.setting:681␤  in method dispatch:<.+> at src/gen/CORE.setting:669␤  in <anon> at /…

[18:38] <jnthn> That's awkward.

[18:38] <jnthn> I'm not quite sure how to fix that one yet.

[18:38] <jnthn> It was easy in ng because we had a much flatter view of dispatch.

[18:39] *** alvis left
[18:39] <jnthn> Now we have nested dispatchers and it's not obvious that the method dispatcher, which handles the .+/.*, should descend into a nested dispatcher too.

[18:39] <jnthn> (And the method dispatcher's view is that there's one method to call. It just happens that one method is a proto.)

[18:41] <benabik> rakudo: role A { method foo { say "A" } }; role B { method foo { say "B" } }; class C does A does B {}; my $_ = C.new; .foo; .+foo

[18:41] <p6eval> rakudo f8301d: OUTPUT«===SORRY!===␤Method 'foo' must be resolved by class C because it exists in multiple roles (B, A)␤»

[18:41] <masak> that one's correct.

[18:42] <benabik> Not sure why that's different when multi is added.  It's still ambiguous.

[18:42] <TimToady> I see an ambiguous dispatch there too

[18:42] <masak> even with .+ ?

[18:43] <TimToady> .+ applies to method dispatch, not multi dispatch

[18:43] <TimToady> there's only one proto, and .+ finds it

[18:43] <masak> ah.

[18:43] <benabik> Doesn't it have to be resolved at class composition time?  A has a method foo, B has a method foo…  Does it matter if they're multis?

[18:43] <jnthn> TimToady: oh, wow. I expected you to wave your hands and tell me to just make it work :)

[18:43] *** molaf left
[18:43] <jnthn> benabik: It's undecidable in the general case whether a multi is ambiguous.

[18:44] <TimToady> which is part of why we just added a scoping tiebreaker, which doesn't help in this case

[18:44] *** poerschke joined
[18:44] <benabik> Hm.  multi dispatch is probably turing complete…  :-

[18:44] <benabik> :-/

[18:44] <jnthn> benabik: Sure, as soon as you add where clauses.

[18:44] <masak> with where clauses, sure.

[18:44] <jnthn> benabik: Thankfully the common cases are not

[18:44] <TimToady> however, if you mixed in role B after role A, then B would be more derived, and preferred

[18:45] <jnthn> TimToady: Right, but this is composition, not mixins.

[18:45] <TimToady> which is why it's ambiguous

[18:45] <jnthn> Seems we're agreeing ;)

[18:45] <TimToady> I'm trying to be as disagreeable as possible :)

[18:45] <benabik> I would think that adding roles or classes with overlapping multis should be noted somewhere.  Seems ripe for error.

[18:46] <jnthn> TimToady: :P

[18:46] <masak> benabik: sure, but it'd be a compilte-time boon.

[18:46] <TimToady> if it can be determined that a dispatch will be ambiguous, it's probably worth a warning at least

[18:47] <jnthn> Well, if we know that .+ and .* won't descend into multi dispatch, then we can do a compile time error.

[18:47] <TimToady> in this case, the signatures appear to be close enough for such a warning

[18:47] <jnthn> Like we planned for subs.

[18:47] *** szabgab joined
[18:47] <jnthn> I thought we agreed the sub case was an error, anyway...

[18:48] <jnthn> The only reason I argued against that for methods was because I'd forgotten that .+ and .* would work differently now.

[18:49] *** wallberg joined
[18:49] * jnthn remembers that he should eat something for dinner

[18:49] <benabik> food++

[18:49] <masak> the staticker, the better.

[18:50] <moritz> TimToady: http://www.perlmonks.org/?node_id=925973 -- are you serious? why would anybody want that to work?

[18:50] <benabik> I had that problem too.  Difficult to concentrate on class when my brain is going "when's lunch" every few minutes.

[18:51] <masak> moritz: I guess one could argue language interop or sump'n.

[18:53] <jnthn> hm, something to eat seems to require me to go and buy something to stick inside my sandwich...bbs :)

[18:55] <TimToady> moritz: because there's no reason to prohibit it

[18:56] <moritz> TimToady: I think it's dangerous, because it depends on the degree in which one can constant-fold, which is probably quite implementation dependent

[18:57] <moritz> so I fear it's easy to accidentally create compiler dependent behavior

[18:58] <masak> moritz: then don't use the feature :)

[18:58] <masak> same way you wouldn't use Q:PIR in a compiler-agnostic setting.

[18:58] <moritz> masak: except that Q:PIR is *obviously* compiler specific

[18:59] <masak> sure, and $::("-O'Malley's") will be right there in perl6doc perl6port

[18:59] *** sayu left
[19:02] <benabik> Constant folding isn't quite the right term…  There's no folding, just changing code gen based on the presence of a literal.  It's the difference between recognizing :16<deadbeef> as a literal and :16<$const> as a literal

[19:02] *** alvis joined
[19:03] <moritz> std: :16<$const>

[19:03] <p6eval> std bb4f150: OUTPUT«===SORRY!===␤Malformed radix number at /tmp/6f6fppCMaE line 1:␤------> :16<⏏$const>␤    expecting number in radix notation␤Parse failed␤FAILED 00:01 117m␤»

[19:04] <masak> benabik: TimToady has a broad definition of constant folding, is all.

[19:06] <benabik> masak: From an academic viewpoint, constant folding is an occasionally tricky optimization.  What TimToady's asking for is far simpler.  And since I'm sitting in a uni right now, I'm probably going to be a little more pedantic.  ;-)

[19:06] <masak> benabik: I haven't learned about constant folding at uni. would you be so kind as to define it for me?

[19:07] <masak> specifically, why's it tricky?

[19:07] <benabik> masak: Constant folding is turning "1 + 1" into "2" at compile time.

[19:07] <masak> that seems a very narrow definition. :P

[19:07] <benabik> masak: Tricky part is recognizing what operations are and are not possible to do that with.

[19:07] <masak> but given it I'm not surprised you disagree with TimToady's :P

[19:07] <benabik> masak: That was an example.  :-D

[19:07] <masak> oh, then I misunderstood the word "is" :P

[19:08] <jnthn> .oO( Masak Clinton )

[19:08] <benabik> masak: Constant folding is taking operations that operate on constants and replacing them with the result of the operation.

[19:08] <masak> benabik: but that's exactly what TimToady's snippet would require!

[19:08] <benabik> It's fair enough.  This is a result of me being somewhat pedantic.

[19:08] *** replore_ left
[19:09] <jnthn> The thing is that in Perl 6 we're starting to get to the point where we sometimes say that things working depends on constant folding, rather than it being an optimization (and thus optionalish)

[19:09] <masak> nod.

[19:09] <PerlJam> as long as constant-folding is specced  :)

[19:10] <benabik> masak: The difference (to me) is that you can express the difference in a fairly simple bit of syntax.  $::(<literal string>) is fairly obviously different than $::(<string expression>)

[19:10] *** daxim_ left
[19:11] <benabik> It's a type difference, not performing operations on constant.

[19:12] *** Kivutarrr joined
[19:13] <jnthn> I'd hope the type of a string operation is string :P

[19:13] <PerlJam> jnthn: yeah, but mutable or immutable?  :)

[19:14] <benabik> jnthn: literal string is a type of string expression, but the more specific type can be noticed very quickly in parsing.

[19:15] <TimToady> well, 'my $::()' doesn't actually require constant folding, since it should just recognize that the name has to be evaluated at compile time anyway

[19:16] <benabik> Which is, more or less, what I'm trying to say.

[19:16] <benabik> I'm just being verbose about it.  :-/

[19:17] <TimToady> but we did add explicit constant declarations for a Reason, and that reason is to make it clearer to the compiler when something that looks like a variable isn't

[19:18] <TimToady> (and to force the initialization of said to constant to compile time, of course)

[19:18] <TimToady> s/to //

[19:21] <masak> "the 'constant' keyword just helps the constant folding along"

[19:34] *** Kivutarrr left
[19:37] *** pernatiy joined
[19:40] *** thou left
[19:53] <masak> rakudo: my @a = a => 1, b => 2; for @a -> Pair $p ( $key, $value ) { say $key }

[19:53] <p6eval> rakudo 6c9731: OUTPUT«Not enough positional parameters passed; got 0 but expected 2 in sub-signature of parameter $p␤  in block <anon> at /tmp/PoamncmwwV:1␤  in method reify at src/gen/CORE.setting:3649␤  in method reify at src/gen/CORE.setting:3554␤  in method reify at src/gen/CORE.set…

[19:56] <jnthn> rakudo: my @a = a => 1, b => 2; for @a -> Pair $p ( :$key, :$value) { say $key }

[19:56] <p6eval> rakudo 6c9731: OUTPUT«Mu()␤Mu()␤»

[19:57] <jnthn> hmm

[19:57] <[Coke]> (not have status meetings every day) I need you to take over this project I have at work. :P

[19:57] <jnthn> rakudo: (a => 1).Capture.say

[19:57] <p6eval> rakudo 6c9731: OUTPUT«␤»

[19:57] <jnthn> rakudo: (a => 1).Capture.perl.say

[19:57] <p6eval> rakudo 6c9731: OUTPUT«␤»

[19:57] <jnthn> rakudo: (a => 1).^attributes>>.name>>.say

[19:57] <p6eval> rakudo 6c9731: OUTPUT«$!key␤$!value␤»

[19:57] <jnthn> rakudo: (a => 1).^attributes>>.has_accessor>>.say

[19:58] <p6eval> rakudo 6c9731: OUTPUT«Bool::False␤Bool::False␤»

[19:58] <jnthn> ah.

[19:58] *** MayDaniel joined
[19:58] <masak> [Coke]: :)

[19:59] *** flussence joined
[19:59] <jnthn> masak: Are you going to masakbug the above?

[20:00] <jnthn> masak: I'm compiling a patch now but it deserves a test.

[20:00] <jnthn> masak: And getting you to submit a bug report is the laziest way I can make sure it gets tested :P

[20:01] <jnthn> > my @a = a => 1, b => 2; for @a -> Pair $p ( :$key, :$value) { say $key }

[20:01] <jnthn> a

[20:01] <jnthn> b

[20:01] <jnthn> \o/

[20:01] *** mikemol joined
[20:02] <benabik> jnthn: Your code appears to print an extra "\o/".  You should figure out where that's coming from.  ;-)

[20:02] *** mikemol left
[20:02] *** jql left
[20:02] *** localhost left
[20:02] *** jevin left
[20:02] *** frhodes left
[20:02] *** aloha left
[20:02] *** bbkr1 left
[20:02] *** kcwu left
[20:02] *** krakan left
[20:02] *** charsbar__ left
[20:02] *** birdwindupbird left
[20:02] *** mberends left
[20:02] *** Alias left
[20:02] *** arthur-_ left
[20:02] *** y3llow left
[20:02] *** dju left
[20:02] *** kfo_ left
[20:02] *** cognominal_ left
[20:02] *** pnu left
[20:02] *** pothos left
[20:02] *** arnsholt left
[20:02] *** sjohnson left
[20:02] *** jesk left
[20:02] *** wallberg left
[20:02] *** dukeleto left
[20:02] *** SHODAN left
[20:02] *** djanatyn left
[20:02] *** lucs left
[20:02] *** simcop2387 left
[20:02] *** mathw left
[20:02] *** spacebat left
[20:03] * masak submits rakudobug, on request

[20:03] <masak> jnthn: I'm sorry, I woulda done it sooner. I was sure that one had an RT ticket already.

[20:03] *** mikemol joined
[20:03] *** wallberg joined
[20:03] *** birdwindupbird joined
[20:03] *** localhost joined
[20:03] *** mberends joined
[20:03] *** dukeleto joined
[20:03] *** SHODAN joined
[20:03] *** Alias joined
[20:03] *** djanatyn joined
[20:03] *** arthur-_ joined
[20:03] *** lucs joined
[20:03] *** jevin joined
[20:03] *** y3llow joined
[20:03] *** jql joined
[20:03] *** dju joined
[20:03] *** frhodes joined
[20:03] *** aloha joined
[20:03] *** bbkr1 joined
[20:03] *** kfo_ joined
[20:03] *** simcop2387 joined
[20:03] *** cognominal_ joined
[20:03] *** pnu joined
[20:03] *** pothos joined
[20:03] *** geekosaur joined
[20:03] *** Gothmog_ joined
[20:03] *** jnthn joined
[20:03] *** awwaiid joined
[20:03] *** jjore joined
[20:03] *** domidumont joined
[20:03] *** sivoais joined
[20:03] *** cotto_work joined
[20:03] *** jasonmay joined
[20:03] *** Exodist joined
[20:03] *** Khisanth joined
[20:03] *** prammer joined
[20:03] *** slavik1 joined
[20:03] *** jerome_ joined
[20:03] *** jfried joined
[20:03] *** baest joined
[20:03] *** tadzik joined
[20:03] *** TiMBuS joined
[20:03] *** domm joined
[20:03] *** silug joined
[20:03] *** zamolxes joined
[20:03] *** chitragupt joined
[20:03] *** clkao joined
[20:03] *** PerlJam joined
[20:03] *** _sri joined
[20:03] *** ribasushi joined
[20:03] *** amkrankruleuen joined
[20:03] *** avar joined
[20:03] *** mathw joined
[20:03] *** krakan joined
[20:03] *** kcwu joined
[20:03] *** arnsholt joined
[20:03] *** sjohnson joined
[20:03] *** spacebat joined
[20:03] *** charsbar__ joined
[20:03] *** jesk joined
[20:03] *** donri left
[20:04] <masak> I mean, how could it not? it's been known for ages.

[20:04] *** donri joined
[20:04] *** donri left
[20:04] *** donri joined
[20:04] *** localhost left
[20:04] * jnthn gets out the debugger... :P

[20:04] *** y3llow left
[20:05] *** y3llow joined
[20:05] *** localhost joined
[20:05] <masak> seems there isn't one, so here goes.

[20:06] * jnthn wonders what me missed by being on the wrong side of the netsplit

[20:06] <tadzik> yeah

[20:06] *** pothos left
[20:07] *** y3llow left
[20:07] *** pothos_ joined
[20:07] <dalek> rakudo/nom: 16bb82c | jnthn++ | src/core/Enum.pm:

[20:07] <dalek> rakudo/nom: key and value should declare themselves as public attributes in Enum.

[20:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/16bb82c184

[20:07] *** y3llow joined
[20:07] *** pothos_ is now known as pothos

[20:07] <jnthn> There's the patch :)

[20:09] <masak> jnthn: https://rt.perl.org/rt3/Ticket/Display.html?id=99134

[20:10] *** HarryS left
[20:13] <masak> jnthn: feel free to mark it as "take for tests".

[20:15] *** skangas left
[20:15] *** eiro left
[20:15] *** \patch joined
[20:15] *** nine joined
[20:15] *** LoRe_ joined
[20:15] *** ruoso joined
[20:15] *** zostay joined
[20:15] *** tewk joined
[20:15] *** cosimo joined
[20:15] *** rhr joined
[20:15] *** athomason joined
[20:15] *** phenny joined
[20:16] *** ggoebel joined
[20:16] *** birdwindupbird left
[20:19] *** ilogger2 joined
[20:19] *** ChanServ sets mode: +v ilogger2

[20:20] *** skangas joined
[20:20] *** Grimnir_ joined
[20:20] *** jlaire_ joined
[20:21] *** jlaire_ is now known as jlaire

[20:22] *** daemon joined
[20:23] *** eiro joined
[20:23] *** betterworld joined
[20:24] *** itz joined
[20:24] *** im2ee joined
[20:26] <jnthn> masak: tagged

[20:28] <masak> jnthn++

[20:30] <jnthn> OK, so I have one spectest that says that a nextsame should die if there's nothing to defer to

[20:30] <jnthn> And another that says it shouldn't.

[20:30] <jnthn> Which is right?

[20:30] *** felipe joined
[20:30] *** donri joined
[20:31] <masak> I was wondering the same thing the other day.

[20:31] <masak> feels like 'nextsame' falling off the edge of the world isn't such a big deal.

[20:32] <masak> 'nextwith' maybe, but probably not even that.

[20:32] <masak> if the candidates've run out, they've run out. doesn't feel like an error condition.

[20:32] <cotto_work> you'd expect it to happen eventually

[20:33] <masak> this is assuming some kind of "candidates are independent links in a chain" model of things.

[20:34] <jnthn> Death does seem a little harsh.

[20:35] <tadzik> jnthn: so, do you run windows 8 yet?

[20:35] <tadzik> there is one on http://msdn.microsoft.com/en-us/windows/apps/br229516 makes me maybe even a bit curious :)

[20:36] <jlaire> is the internal version number 6.2 this time? :)

[20:36] <tadzik> if it's less annoying than 7, I could possibly try it on virtualbox

[20:37] <benabik> masak: OTOH, doesn't "no candidates" mean "we can't do what you asked"?

[20:37] <benabik> Depends on why you're calling next same, I guess.

[20:37] <benabik> lion-- # no, really, I meant nextsame

[20:38] <masak> benabik: when you go 'next' in the last iteration of a loop, what do you expect to happen?

[20:38] <benabik> masak: Is function dispatch really like looping?

[20:38] <masak> 'nextsame' and 'nextwith' used to be spelled 'next'. which was a fairly bad idea, so it got fixed. but the semantics is basically the same.

[20:39] <masak> benabik: yes, this kind of function dispatch is very much like looping.

[20:40] <jnthn> tadzik: Haven't tried 8 yet :)

[20:40] <benabik> masak: When is next same supposed to be used?  I would expect it to be "Oh, I can't handle this, try the next one"

[20:41] <masak> benabik: I don't put that much semantics into it. some routines simply want to defer to the next one in the chain for whatever reason.

[20:42] <masak> rakudo: class A { method foo { say "I'm a proud parent!"; nextsame } }; class B is A { method foo { say "I'm a responsible child!"; nextsame } }; B.new.foo

[20:42] <p6eval> rakudo 6c9731: OUTPUT«I'm a responsible child!␤I'm a proud parent!␤»

[20:42] <masak> jnthn: no, 'nextsame' shouldn't die just because there are no more candidates.

[20:42] *** bbkr1 joined
[20:43] <masak> it shouldn't warn either.

[20:45] <masak> niecza: die

[20:45] <p6eval> niecza v9-27-gb85eeeb: OUTPUT«Unhandled exception: No value for parameter $msg in CORE die␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (CORE die @ 0) ␤  at /tmp/_Xawqb5QBu line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2060 (CORE C968_ANON @ 2) ␤  at /ho…

[20:45] * masak submits nieczabug

[20:46] *** jevin joined
[20:47] * jnthn tags #57788 as closable after tests arranged

[20:49] <masak> sorear++ # niecza

[20:51] <jnthn> #61500 is testneeded too :)

[20:51] <colomon> masak: context?  not that I disagree....

[20:51] <im2ee> Good night! :)

[20:51] <tadzik> gnight!

[20:52] <masak> colomon: I'm using it for the first time in a while, and while it's a different kind of experience that Rakudo and I feel a little out of place, I also recognize that it's very usable and powerful.

[20:52] *** im2ee left
[20:52] <masak> colomon: it's definitely underused considering what it can do.

[20:53] <masak> and fast!

[20:53] <masak> there's a perceptible compilation delay, but once it gets going...!

[20:54] <masak> im2ee: dobranoc! (a bit too late)

[20:58] *** pmurias joined
[20:58] <pmurias> masak: did you succed with running the gtk example under niecza?

[20:59] *** mkramer1 joined
[21:01] *** araujo joined
[21:01] *** araujo left
[21:01] *** araujo joined
[21:02] <masak> pmurias: no, not yet. didn't follow up on mberends' last tip yet, though.

[21:02] * masak does so

[21:02] <[Coke]> (netsplit) man, do I hate IRC. ;)

[21:04] <masak> the trick is to end up on the side of the split with all the nice people :P

[21:04] <jnthn> If somebody fancies some test munging, I just tagged 5 RT tickets as "testneeded"

[21:04] <jnthn> And that was just a cursory glance for the first couple of pages in RT.

[21:04] <masak> mberends: hm, I already had libgtk2.0-cil installed, it seems. still doesn't work.

[21:05] *** mkramer1 left
[21:06] <tadzik> I may take a look at that, now having a proper amount of ram

[21:07] <tadzik> I haven't wrote and p6 in a while

[21:07] <mberends> masak: I'll search for more clues

[21:08] <masak> thank you.

[21:08] <masak> ++tadzik # today's test hero

[21:09] <tadzik> (;

[21:11] <masak> sorear: grr. that cast exception again. tomorrow I'm going to track down and golf it for you.

[21:11] * jnthn rejects an invalid test

[21:11] <tadzik> wow, use Test is _really_ slow

[21:12] <jnthn> tadzik: Ticket for you: https://rt.perl.org/rt3/Ticket/Display.html?id=67662

[21:12] <tadzik> like >6 times slower on startup

[21:12] <jnthn> tadzik: Really?

[21:12] <tadzik> really-really

[21:12] <tadzik> perl6 -e 1  0.72s user 0.13s system 99% cpu 0.852 total

[21:12] <tadzik> perl6 -e 'use Test'  5.95s user 0.17s system 99% cpu 6.123 total

[21:12] <jnthn> tadzik: huh...is it somehow missing the pre-compiled version?

[21:12] <tadzik> jnthn: could be

[21:12] <masak> probably.

[21:13] <jnthn> tadzik: Or is it hitting an installed Test.pm?

[21:13] <tadzik> you having your blazingly fast machine don't even notice small people's problems! :P

[21:13] <jnthn> Which of course has invalid PIR...

[21:13] <tadzik> jnthn: don't think so, I'm in /tmp

[21:13] <jnthn> tadzik: er, but there's no measurable difference here with those two :)

[21:13] <tadzik> jnthn: I don't think the feature from this bug is even specced

[21:14] <jnthn> tadzik: Feel free to reject ;)

[21:14] <tadzik> I'll re-check

[21:14] <flussence> hey, we were talking about this a few days ago in here... http://redd.it/kfr32

[21:14] * jnthn really wants to cut this RT queue down to size

[21:14] * masak will be there to build it up again, don't worry

[21:15] <masak> 'night, channel

[21:16] *** thou joined
[21:16] <sbp> 'night masak

[21:17] <tadzik> Ticket 67662: Permission Denied

[21:17] <tadzik> damnit RT, why u so stubborn

[21:18] <tadzik> could someone reject https://rt.perl.org/rt3/Ticket/Display.html?id=67662 for me?

[21:19] <jnthn> tadzik: done

[21:19] <tadzik> thanks-o

[21:19] <tadzik> nom: eval "sub bar {}"; say $!.perl;

[21:19] <p6eval> nom 16bb82: OUTPUT«Malformed block at line 1, near ""␤»

[21:22] <jnthn> tadzik: ''

[21:22] <jnthn> tadzik: the {} is an interpolated block

[21:22] <tadzik> ooh, right

[21:23] <jnthn> http://rakudo.org/testneeded links to an empty list :(

[21:24] <jnthn> pmichaud: ^^ if it's you who maintains that.

[21:26] <jnthn> (Looks like double-encoding of ' or some such)

[21:30] <flussence> wfm

[21:31] <tadzik> https://rt.perl.org/rt3/Ticket/Display.html?id=61126 not really fixed

[21:31] <tadzik> nom: sub foo { map { return 1 }, 1; return 2 }; say foo;

[21:31] <p6eval> nom 16bb82: OUTPUT«2␤»

[21:31] <tadzik> eek, wait

[21:32] <tadzik> nom: sub bar($code) { $code() }; sub foo { bar { return 1 }; return 2; }; say foo;

[21:32] <p6eval> nom 16bb82: OUTPUT«1␤»

[21:32] <tadzik> this one

[21:32] <tadzik> oh, right. So the first one is broken :)

[21:39] <jnthn> tadzik: Not returns' fault, though...

[21:39] <dalek> roast: 78945cc | tadzik++ | S12-attributes/inheritance.t:

[21:39] <jnthn> nom: sub foo { eager map { return 1 }, 1; return 2 }; say foo;

[21:39] <dalek> roast: Tests for RT #61500

[21:39] <dalek> roast: review: https://github.com/perl6/roast/commit/78945cc460

[21:39] <dalek> roast: 1138a24 | tadzik++ | S06-advanced_subroutine_features/return.t:

[21:39] <dalek> roast: Tests for RT #61126

[21:39] <dalek> roast: review: https://github.com/perl6/roast/commit/1138a24f6f

[21:39] <p6eval> nom 16bb82: OUTPUT«1␤»

[21:40] <tadzik> oh, so testfail. Fixing

[21:41] <dalek> roast: 2d28aa2 | tadzik++ | S06-advanced_subroutine_features/return.t:

[21:41] <dalek> roast: Fix tests for RT #61126, jnthn++

[21:41] <dalek> roast: review: https://github.com/perl6/roast/commit/2d28aa2de6

[21:41] <tadzik> https://rt.perl.org/rt3/Ticket/Display.html?id=61500 closable

[21:42] <tadzik> https://rt.perl.org/rt3/Ticket/Display.html?id=61126 closable

[21:43] <jnthn> tadzik: both done

[21:43] <jnthn> tadzik++

[21:44] <jnthn> That one masak++ filed earlier today could get tests easily and be closed too :)

[21:44] <diakopter> .

[21:44] <phenny> diakopter: 06:59Z <masak> tell diakopter http://www.hakank.org/comb/debruijn.cgi http://en.wikipedia.org/wiki/De_Bruijn_sequence http://www.theory.csc.uvic.ca/~cos/inf/neck/NecklaceInfo.html

[21:44] <diakopter> phenny: tell masak cool

[21:44] <phenny> diakopter: I'll pass that on when masak is around.

[21:47] <dalek> Heuristic branch merge: pushed 85 commits to rakudo/optimizer by jnthn

[21:48] <tadzik> ho ho

[21:49] <jnthn> Just bringing it up to date with master :)

[21:49] <jnthn> er

[21:49] <jnthn> with nom

[21:49] <jnthn> :)

[21:50] <dalek> roast: e42db46 | tadzik++ | S02-names_and_variables/contextual.t:

[21:50] <dalek> roast: Test for RT #63226

[21:50] <dalek> roast: review: https://github.com/perl6/roast/commit/e42db46331

[21:50] <tadzik> https://rt.perl.org/rt3/Ticket/Display.html?id=63226 closable

[21:51] <jnthn> done

[21:52] <tadzik> huh, this throws an exception but does not die

[21:52] <tadzik> nom: eval 'sub foo($n) { if $n { callsame() } }; foo(1)'; say $!.WHAT

[21:52] <p6eval> nom 16bb82: OUTPUT«Exception()␤»

[21:53] <tadzik> nom: use Test; eval_dies_ok 'sub foo($n) { if $n { callsame() } }; foo(1)'

[21:53] <p6eval> nom 16bb82: OUTPUT«(timeout)»

[21:53] <tadzik> oh great

[21:53] <tadzik> not ok 1 - locally

[21:53] <tadzik> nom: use Test; eval_dies_ok 'sub foo($n) { if $n { callsame() } }; foo(1)'

[21:53] <p6eval> nom 16bb82: OUTPUT«(timeout)»

[21:53] <tadzik> teehee

[21:53] <jnthn> tadzik: I thought the discussion earlier settled on that living, not dying?

[21:54] <tadzik> oh, my bad

[21:54] <tadzik> anyway, this has a test it seems

[21:54] <tadzik> https://rt.perl.org/rt3/Ticket/Display.html?id=69314#txn-705770

[21:55] <tadzik> but it fails, it seems

[21:55] <tadzik> because the test's broken :) Ok, I see it now

[21:55] <jnthn> :)

[21:57] <tadzik> and the test is not ran anyway

[21:59] <dalek> roast: 328f005 | tadzik++ | S06-advanced_subroutine_features/callsame.t:

[21:59] <dalek> roast: Fix a test for RT 69314, fudge S06-advanced_subroutine_features/callsame.t for Rakudo

[21:59] <dalek> roast: review: https://github.com/perl6/roast/commit/328f005ffe

[22:00] <dalek> Heuristic branch merge: pushed 40 commits to rakudo/nom-buf by tadzik

[22:00] <dalek> rakudo/nom: ed8f4ad | tadzik++ | t/spectest.data:

[22:00] <dalek> rakudo/nom: Run S06-advanced_subroutine_features/callsame.t

[22:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ed8f4ad131

[22:00] <tadzik> https://rt.perl.org/rt3/Ticket/Display.html?id=69314 closable now

[22:01] *** meraxes joined
[22:04] <jnthn> meh, I put in undeclared routine detection and now the setting fails to compile...

[22:04] <tadzik> :P

[22:05] <tadzik> meh, I added a test to a file but nom does not run it yet

[22:05] <jnthn> nom: warn('!')

[22:05] <p6eval> nom 16bb82: OUTPUT«Could not find sub &warn␤  in <anon> at /tmp/z6i90_Tqzc:1␤  in <anon> at /tmp/z6i90_Tqzc:1␤␤»

[22:05] <jnthn> oh, well, it's not entirely wrong ;)

[22:05] <jnthn> tadzik: That callsame one?

[22:06] <tadzik> jnthn: nope, protos

[22:06] <jnthn> ah, yeah

[22:06] <tadzik> t/spec/S06-multi/proto.t

[22:06] <dalek> roast: b8d66dd | tadzik++ | S06-multi/proto.t:

[22:06] <dalek> roast: Tests for RT #68242

[22:06] <dalek> roast: review: https://github.com/perl6/roast/commit/b8d66dd49e

[22:06] <tadzik> ...whatever :)

[22:06] <jnthn> Still some work to do to make that one run but it may also be out of date.

[22:06] <sorear> good * #perl6

[22:06] <jnthn> tadzik: Anyway, best to leave the ticket open for now.

[22:07] <tadzik> okay

[22:07] <tadzik> sorear: hi

[22:08] <diakopter> sorear: I'm curious to see an example of accessing the compiler from p6 code

[22:08] <sorear> diakopter: eval("2 + 2")

[22:09] <diakopter> I must've misunderstood your commit message

[22:09] <sorear> the compiler and the user code are both p6, but they are compartmentalized and cannot directly share data

[22:11] <dalek> roast: bb87d97 | tadzik++ | S04-statement-modifiers/for.t:

[22:11] <dalek> roast: Tests for RT #66606

[22:11] <dalek> roast: review: https://github.com/perl6/roast/commit/bb87d9718f

[22:11] <tadzik> https://rt.perl.org/rt3/Ticket/Display.html?id=66606 closable

[22:13] <tadzik> https://rt.perl.org/rt3/Ticket/Display.html?id=65482 not-really-testneeded

[22:14] *** dalek joined
[22:14] <jnthn> 66606...the ticket of the beast?!...closed

[22:14] *** ChanServ sets mode: +v dalek

[22:15] <jnthn> tadzik: 65482 can be left until we run the test file

[22:16] <tadzik> I think so

[22:18] <dalek> roast: f695da8 | tadzik++ | S (2 files):

[22:18] <dalek> roast: Tests for #57788

[22:19] <dalek> roast: review: https://github.com/perl6/roast/commit/f695da8e07

[22:19] <tadzik> https://rt.perl.org/rt3/Ticket/Display.html?id=57788 testsnotran

[22:20] <tadzik> rakudo: (a => 1).^attributes>>.has_accessor>>.say

[22:20] <p6eval> rakudo 16bb82: OUTPUT«Bool::True␤Bool::True␤»

[22:21] <tadzik> rakudo: my @a = a => 1, b => 2; for @a -> Pair $p ( :$key, :$value) { say $key }

[22:21] <p6eval> rakudo 16bb82: OUTPUT«a␤b␤»

[22:22] <jnthn> tadzik: Think test for that one wants to go in the unpacking tests

[22:22] <jnthn> Somewhere in S06

[22:22] <jnthn> Check that Pair is unpackable

[22:22] <tadzik> I'll look at it tomorrow :]

[22:22] <jnthn> ok :)

[22:22] <tadzik> I'll get some sleep for now

[22:22] <jnthn> good plan ;)

[22:23] <tadzik> plan 'good'

[22:23] * jnthn will be doing Perl 6 stuff tomorrow

[22:23] <tadzik> good plan :)

[22:23] <jnthn> :)

[22:23] <jnthn> dobranoc o/

[22:23] <dalek> niecza: df880f1 | sorear++ | lib/CORE.setting:

[22:23] <dalek> niecza: Add a default message to &die, closes #51

[22:23] <dalek> niecza: review: https://github.com/sorear/niecza/commit/df880f1174

[22:23] <tadzik> 'branoc :)

[22:25] <lichtkind> my slides are now on http://www.slideshare.net/lichtkind/perl-6-data-structures

[22:26] *** replore_ joined
[22:26] <jnthn> nom: 1 %% 60 or say 'hi'

[22:26] <p6eval> nom 16bb82: OUTPUT«hi␤»

[22:26] <jnthn> nom: 0 %% 60 or say 'hi'

[22:26] <p6eval> nom 16bb82:  ( no output )

[22:30] <diakopter> time for some std fuzzing

[22:32] <diakopter> niecza: &Int**^&Int

[22:32] <p6eval> niecza v9-28-gdf880f1: OUTPUT«Unhandled exception: System.Exception: Unable to find lexical &Int in mainline␤  at Niecza.CLRBackend.NamProcessor.ResolveLex (System.String name, Boolean upf, System.Int32& uplevel, Boolean core) [0x00000] in <filename unknown>:0 ␤  at Niecza.CLRBackend.Na…

[22:33] <sorear> diakopter: std fuzzing?

[22:33] <diakopter> er, niecza fuzzing

[22:34] <sorear> diakopter: I think niecza is right to fail that, although it should fail earlier

[22:35] <diakopter> niecza: say &1**&1

[22:35] <p6eval> niecza v9-28-gdf880f1: OUTPUT«1␤»

[22:35] <sorear> &1**&1 means $/[1] ** $/[1]

[22:35] <sorear> Any ** Any is interpreted as 0 ** 0

[22:36] <diakopter> niecza: say 2^^3 # should this fail earlier too?

[22:37] <p6eval> niecza v9-28-gdf880f1: OUTPUT«Unhandled exception: System.Exception: Unable to find lexical &infix:<^^> in mainline␤  at Niecza.CLRBackend.NamProcessor.ResolveLex (System.String name, Boolean upf, System.Int32& uplevel, Boolean core) [0x00000] in <filename unknown>:0 ␤  at Niecza.CLRBac…

[22:37] *** thou left
[22:39] <diakopter> std: say 2^^^3 # should this fail?

[22:39] <p6eval> std bb4f150: OUTPUT«ok 00:01 120m␤»

[22:41] <dalek> rakudo/nom: 867ebd6 | jnthn++ | src/core/control.pm:

[22:41] <dalek> rakudo/nom: Add a cheating &warn to avoid meta-errors.

[22:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/867ebd6473

[22:41] <dalek> rakudo/nom: 12b860d | jnthn++ | src/core/Temporal.pm:

[22:41] <dalek> rakudo/nom: A doubled 'or' caught by work in the optimizer branch.

[22:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/12b860df69

[22:42] <Tene> jnthn: I'm curious why you're cheating like that.

[22:42] <diakopter> niecza: say 2 ^ ^ 3

[22:42] <p6eval> niecza v9-28-gdf880f1: OUTPUT«one(2, 0, 1, 2)␤»

[22:43] <jnthn> Tene: No especially good reason.

[22:43] <Tene> 'k

[22:43] <jnthn> Tene: I didn't really mean to fix that.

[22:43] <diakopter> sorear: should that junction have duplicates?

[22:43] <jnthn> Tene: I'm working on optimizer branch, which also catches various "that could never work" things. It started catching a missing &warn in the setting and then I couldn't compile the setting in that branch any more :)

[22:44] <sorear> wait, how is that even parsing

[22:44] <diakopter> :) fuzzing is fun

[22:45] <sorear> diakopter: for :36 - that's actually a NYI

[22:45] <dalek> rakudo/optimizer: ed8f4ad | tadzik++ | t/spectest.data:

[22:45] <dalek> rakudo/optimizer: Run S06-advanced_subroutine_features/callsame.t

[22:45] <dalek> rakudo/optimizer: review: https://github.com/rakudo/rakudo/commit/ed8f4ad131

[22:45] <dalek> rakudo/optimizer: 1088154 | jnthn++ | src/Perl6/Optimizer.pm:

[22:45] <dalek> rakudo/optimizer: Stub in some check-time failure/warning infrastructure. First cut of detecting undeclared routines; fails on building CORE.setting.

[22:45] <dalek> rakudo/optimizer: review: https://github.com/rakudo/rakudo/commit/108815461c

[22:45] <dalek> rakudo/optimizer: e98e205 | jnthn++ | src/Perl6/Optimizer.pm:

[22:45] <dalek> rakudo/optimizer: Don't complain about calling routines that we get passed as &foo style parameters.

[22:45] <dalek> rakudo/optimizer: review: https://github.com/rakudo/rakudo/commit/e98e205735

[22:45] <dalek> rakudo/optimizer: 867ebd6 | jnthn++ | src/core/control.pm:

[22:45] <dalek> rakudo/optimizer: Add a cheating &warn to avoid meta-errors.

[22:45] <dalek> rakudo/optimizer: review: https://github.com/rakudo/rakudo/commit/867ebd6473

[22:45] <dalek> rakudo/optimizer: 12b860d | jnthn++ | src/core/Temporal.pm:

[22:45] <dalek> rakudo/optimizer: A doubled 'or' caught by work in the optimizer branch.

[22:45] <dalek> rakudo/optimizer: review: https://github.com/rakudo/rakudo/commit/12b860df69

[22:45] <dalek> rakudo/optimizer: 6bb0357 | jnthn++ | / (3 files):

[22:45] <dalek> rakudo/optimizer: Merge branch 'nom' into optimizer

[22:45] <dalek> rakudo/optimizer: review: https://github.com/rakudo/rakudo/commit/6bb0357811

[22:45] <diakopter> sorear: oh

[22:45] <sorear> niecza: say ^ 3

[22:45] <p6eval> niecza v9-28-gdf880f1: OUTPUT«0..^3␤»

[22:45] <jnthn> Oops, that was a bit noisy...

[22:45] <sorear> niecza: say [ ^ 3 ]

[22:45] <p6eval> niecza v9-28-gdf880f1: OUTPUT«0 1 2␤»

[22:45] <sorear> niecza: say 2 ^ ^ 3

[22:46] <p6eval> niecza v9-28-gdf880f1: OUTPUT«one(2, 0, 1, 2)␤»

[22:46] <sorear> I think you're actually looking at a display bug

[22:46] <sorear> niecza: say (2 ^ ^ 3).WHAT

[22:46] <p6eval> niecza v9-28-gdf880f1: OUTPUT«Junction()␤»

[22:46] <sorear> niecza: say (2 ^ ^ 3).FALLBACK("perl")

[22:46] <p6eval> niecza v9-28-gdf880f1: OUTPUT«one("2", "0..^3")␤»

[22:46] <sorear> yeah

[22:47] <sorear> Junction.perl is putting the context in list context when it shouldn't

[22:47] <sorear> but as for your other question - diakopter - Niecza's Junctions deliberately do no duplicate elimination

[22:50] <diakopter> oh

[22:52] <diakopter> niecza: say %7238957928356.WHAT # eh

[22:52] <p6eval> niecza v9-28-gdf880f1: OUTPUT«Any()␤»

[22:53] *** replore_ left
[22:53] *** pmurias left
[22:53] *** whiteknight joined
[22:56] <dalek> niecza: eefe939 | sorear++ | lib/CORE.setting:

[22:56] <dalek> niecza: Fix Junction-containing-list stringification (diakopter)

[22:56] <dalek> niecza: review: https://github.com/sorear/niecza/commit/eefe939dc2

[23:00] <diakopter> niecza: say [][][0].WHAT # sry

[23:00] <p6eval> niecza v9-28-gdf880f1: OUTPUT«Unhandled exception: No value for parameter $index in CORE postcircumfix:<[ ]>␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (CORE postcircumfix:<[ ]> @ 0) ␤  at /tmp/UYKnnyfA7h line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2…

[23:05] *** dorlamm joined
[23:06] <diakopter> perl6: say [][]

[23:06] <p6eval> niecza v9-28-gdf880f1: OUTPUT«Unhandled exception: No value for parameter $index in CORE postcircumfix:<[ ]>␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (CORE postcircumfix:<[ ]> @ 0) ␤  at /tmp/pWDi1Vq7Mz line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2…

[23:06] <p6eval> ..pugs, rakudo 12b860: OUTPUT«␤»

[23:08] <dalek> rakudo/optimizer: bfcf87a | jnthn++ | src/Perl6/Compiler.nqp:

[23:08] <dalek> rakudo/optimizer: While in the optimizer branch, turn optimizer on by default, for easier testing.

[23:08] <dalek> rakudo/optimizer: review: https://github.com/rakudo/rakudo/commit/bfcf87a507

[23:08] <dalek> rakudo/optimizer: 4cba402 | jnthn++ | src/Perl6/Optimizer.pm:

[23:08] <dalek> rakudo/optimizer: Avoid some inlines when we might screw up the workings of control exception handlers (like with given/when). This fixes the spectest regressions that we got from the immediate block inlining optimization. (We now fail some tests, but it's because the tests have undeclared routines, which the optimizer complains about at CHECK time; these tests need fixing.)

[23:08] <dalek> rakudo/optimizer: review: https://github.com/rakudo/rakudo/commit/4cba402000

[23:08] <sorear> diakopter: zen slices nyi

[23:09] *** thou joined
[23:09] <sorear> jnthn: \o/  I want those routines fixed

[23:09] <sorear> er, tests

[23:09] <diakopter> niecza: say ()()

[23:09] <p6eval> niecza v9-28-gdf880f1: OUTPUT«Unhandled exception: Unable to resolve method postcircumfix:<( )> in class Parcel␤  at /tmp/0j0OVfLy4B line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2060 (CORE C969_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2061 …

[23:09] <jnthn> sorear: Hopefully somebody will take the bait... ;)

[23:09] <diakopter> I suppose that one's expected

[23:09] <jnthn> sorear: Otherwise I'll get to it when I want to merge the optimizer branch.

[23:10] <jnthn> diakopter: That one looks reasonable to me.

[23:14] *** plobsing joined
[23:15] <diakopter> add Parcels to the list of things I don't understand: Parcels, Captures, containers, variables, values, binding/assignment :/ I'm so behind.

[23:19] <diakopter> niecza: say 2*****3

[23:19] <p6eval> niecza v9-28-gdf880f1: OUTPUT«Unhandled exception: System.Exception: Unable to find lexical &term:<**> in mainline␤  at Niecza.CLRBackend.NamProcessor.ResolveLex (System.String name, Boolean upf, System.Int32& uplevel, Boolean core) [0x00000] in <filename unknown>:0 ␤  at Niecza.CLRBack…

[23:19] <diakopter> that confuses me

[23:22] <diakopter> why would it think ** is a term

[23:23] <sorear> HyperWhatever

[23:23] <diakopter> oh

[23:24] <diakopter> niecza: say %3.WHAT # what does %3 mean

[23:24] <p6eval> niecza v9-28-gdf880f1: OUTPUT«Any()␤»

[23:25] <jnthn>  niecza: say % 3.WHAT

[23:25] <p6eval> niecza v9-28-gdf880f1: OUTPUT«===SORRY!===␤␤Non-declarative sigil is missing its name at /tmp/4QDqKwVJK8 line 1:␤------> say ⏏% 3.WHAT␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 685 (CORE die @ 2) ␤  at /h…

[23:25] *** am0c joined
[23:25] <jnthn> not that :)

[23:25] <jnthn> Suspect it's aliased to $3

[23:25] <diakopter> nom: say %3.WHAT

[23:25] <p6eval> nom 12b860: OUTPUT«Nil␤»

[23:25] <jnthn> nom: "abcde" /(.)(.)(.)(.)(.)/; say %3

[23:25] <p6eval> nom 12b860: OUTPUT«===SORRY!===␤Confused at line 1, near "\"abcde\" /("␤»

[23:26] <jnthn> nom: "abcde" ~~ /(.)(.)(.)(.)(.)/; say %3

[23:26] <p6eval> nom 12b860: OUTPUT«d␤»

[23:26] <jnthn> yeah.

[23:26] <jnthn> niecza: "abcde" ~~ /(.)(.)(.)(.)(.)/; say %3

[23:26] <p6eval> niecza v9-28-gdf880f1: OUTPUT«#<match from(3) to(4) text(d) pos([].list) named({}.hash)>␤»

[23:26] <diakopter> eh. why is it d and not c; sorry I'm so ignorant

[23:27] <jnthn> diakopter: 0-based in Perl 6.

[23:27] <jnthn> niecza: "abcde" ~~ /(.)(.)(.)(.)(.)/; say %0

[23:27] <p6eval> niecza v9-28-gdf880f1: OUTPUT«#<match from(0) to(1) text(a) pos([].list) named({}.hash)>␤»

[23:27] <diakopter> oh

[23:28] * jnthn wonders if anybody can remember the C function pointer syntax, or if everyone has to look it up everytime they want it... :)

[23:28] <sorear> I can remember it

[23:29] <jnthn> sorear: Somehow it doesn't stick in my brane. :(

[23:29] <jnthn> Then every time I look it up I'm like "oh, yeah, of course, silly me..."

[23:30] <sorear> the trick is it's rather irregular

[23:30] * sorear had occassion to write a pointer to a function which takes two function pointer arguments earlier this year

[23:30] <sorear> er, three

[23:30] *** tokuhirom joined
[23:31] <jnthn> I bet it looked...beautiful. :)

[23:34] *** uasi joined
[23:40] <diakopter> niecza: no CORE

[23:40] <p6eval> niecza v9-29-geefe939: OUTPUT«===SORRY!===␤␤Action method statement_control:no not yet implemented at /tmp/utCE_cWWU4 line 1 (EOF):␤------> no CORE⏏<EOL>␤␤Unhandled exception: Unable to resolve method statement_level in class Str␤  at /home/p6eval/ni…

[23:42] <diakopter> nom: require CORE # jnthn ?

[23:42] <p6eval> nom 12b860: OUTPUT«Null PMC access in find_method('need')␤  in <anon> at /tmp/Xp5nfvbiEb:1␤  in <anon> at /tmp/Xp5nfvbiEb:1␤␤»

[23:42] *** uasi left
[23:42] <jnthn> diakopter: ugh

[23:42] <jnthn> diakopter: oh, nobody re-visited require in nom yet, probably

[23:43] <jnthn> So probably it's relying on disappeared compiler guts or something.

[23:43] <TimToady> trying to use a setting should probably fail

[23:44] <TimToady> that isn't their interface

[23:44] <TimToady> likewise no should fail

[23:44] <jnthn> makes sense

[23:44] <jnthn> nom: use CORE; # curious *how* it fails...

[23:44] <p6eval> nom 12b860: OUTPUT«===SORRY!===␤Could not find CORE in any of: lib, /home/p6eval/.perl6/lib, /home/p6eval/nom-inst2/lib/parrot/3.7.0-devel/languages/perl6/lib, .␤»

[23:44] <jnthn> oh

[23:44] <jnthn> It doesn't look for things with the .setting extension :)

[23:45] <TimToady> settings don't work by importation, hopefully

[23:45] <jnthn> Problem averteD!

[23:45] <TimToady> so you can't unimport 'em either

[23:45] <diakopter> niecza: use CORE.setting

[23:45] *** dorlamm left
[23:45] <p6eval> niecza v9-29-geefe939: OUTPUT«Unhandled exception: Cannot use a lexical psuedopackage as a compile time package reference␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 685 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/Metamodel.pm6 line 572 (Metamodel StaticSub._lexy_ref @ 2) ␤  at…

[23:46] <diakopter> misspelled pseudo

[23:46] <TimToady> ooh, a bug!

[23:46] <jnthn> std: use CORE.setting

[23:46] <p6eval> std bb4f150: OUTPUT«===SORRY!===␤Confused at /tmp/2Ob_1nmgJh line 1:␤------> use CORE⏏.setting␤    expecting statement_control␤Parse failed␤FAILED 00:01 122m␤»

[23:46] <jnthn> nom: use CORE.setting

[23:46] <p6eval> nom 12b860: OUTPUT«===SORRY!===␤Could not find CORE in any of: lib, /home/p6eval/.perl6/lib, /home/p6eval/nom-inst2/lib/parrot/3.7.0-devel/languages/perl6/lib, .␤»

[23:46] <jnthn> hm

[23:47] <diakopter> TimToady: should %1 be aliased to $1 ?

[23:47] <TimToady> mebbe, mebbe naught

[23:47] <TimToady> niecza: use CORE is this even parsed?

[23:47] <p6eval> niecza v9-29-geefe939: OUTPUT«===SORRY!===␤␤Undeclared routines:␤     'even' used at line 1␤  'is' used at line 1␤    'parsed' used at line 1␤        'this' used at line 1␤␤'use' with arguments NYI at /tmp/xrUn1gjDVw line 1:␤------> use CORE is this even

[23:47] <p6eval> ..parsed⏏?␤␤…

[23:48] <TimToady> niecza: use CORE + 1;

[23:48] <p6eval> niecza v9-29-geefe939: OUTPUT«===SORRY!===␤␤'use' with arguments NYI at /tmp/oq8SluBQuK line 1:␤------> use CORE + 1⏏;␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 685 (CORE die @ 2) ␤  at /home/p6eval/niecz…

[23:48] <TimToady> hmm

[23:48] <TimToady> niecza: use CORE++;

[23:48] <p6eval> niecza v9-29-geefe939: OUTPUT«Unhandled exception: Cannot use a lexical psuedopackage as a compile time package reference␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 685 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/Metamodel.pm6 line 572 (Metamodel StaticSub._lexy_ref @ 2) ␤  at…

[23:49] <TimToady> niecza: use ++CORE;

[23:49] <p6eval> niecza v9-29-geefe939: OUTPUT«===SORRY!===␤␤Undeclared routine:␤      'use' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 685 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1136 (STD P6.comp_unit @ 36) ␤  a…

[23:49] <TimToady> ah well

[23:50] *** thou left
[23:50] *** ponbiki joined
[23:52] <dalek> niecza: 2b3ba1c | diakopter++ | / (2 files):

[23:52] <dalek> niecza: fix pseudospellos

[23:52] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2b3ba1c14c

[23:52] *** thou joined
[23:53] <diakopter> .oO( I added myself to pseudoers today )

[23:55] <diakopter> nom: anon package foo { }

[23:55] <p6eval> nom 12b860: OUTPUT«===SORRY!===␤Cannot use anon scope with package at line 1, near "{ }"␤»

[23:55] <diakopter> niecza: anon package foo { }

[23:55] <p6eval> niecza v9-29-geefe939:  ( no output )

[23:56] <TimToady> niecza: (anon package foo { }).WHAT.say

[23:56] <p6eval> niecza v9-29-geefe939: OUTPUT«Unhandled exception: Unable to resolve method say in class foo␤  at /tmp/2WePzoJSRH line 1 (MAIN mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2060 (CORE C968_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2061 (CORE module-CORE @…

[23:56] <TimToady> niecza: (anon package foo { }).WHAT.gist.say

[23:56] <p6eval> niecza v9-29-geefe939: OUTPUT«Unhandled exception: Unable to resolve method gist in class foo␤  at /tmp/qhyD7TSq3Y line 1 (MAIN mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2060 (CORE C968_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2061 (CORE module-CORE …

[23:56] <TimToady> *class* foo?

[23:57] <TimToady> decommuting &

[23:58] <diakopter> niecza: slang P6 { } # sorear NYI?

[23:58] <p6eval> niecza v9-29-geefe939: OUTPUT«===SORRY!===␤␤Unable to resolve method xref in class Any at /tmp/xbLF74gq4Y line 1:␤------> slang P6 ⏏{ } # sorear NYI?␤␤Nominal type check failed for scalar store; got Any, needed Str or subtype at /tmp/xbLF74gq4Y line …

