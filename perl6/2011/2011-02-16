[00:02] *** donaldh joined
[00:03] *** pjcj_ is now known as pjcj

[00:04] *** donaldh left
[00:08] *** felliott left
[00:10] *** felliott joined
[00:11] *** felliott_ joined
[00:11] *** felliott left
[00:11] *** felliott_ is now known as felliott

[00:11] *** phenny joined
[00:14] *** sji left
[00:15] *** felliott left
[00:17] *** donri joined
[00:18] <donri> why does ([+]0,1...*)[10] hang?

[00:19] <benabik> donri: Because ([+]0,1...*) asks for the sum of all numbers between 0 and infinity.

[00:19] <donri> well i get why but is that per spec or just rakudo not fully lazy?

[00:19] *** cosimo_ joined
[00:19] *** cosimo_ left
[00:20] <jnthn> You're asking it to add up the numbers to infinity.

[00:20] <jnthn> It's not a bug - it's just doing what you asked. ;)

[00:20] <benabik> Did you mean ([\+]0,1...*)[10] ?

[00:20] <jnthn> The index is kinda useless there

[00:20] <jnthn> As what you get back is a single item, not a list.

[00:20] <jnthn> Did you mean what benabik said, or maybe [+] (0,1...*)[10]

[00:20] <donri> benabik: yes, but i didn't know that syntax :)

[00:21] <donri> what's that mean

[00:22] *** felliott joined
[00:22] <jnthn> [\+] is trinagle operator - produces all the intermediate arrays

[00:22] <benabik> Produces an array of intermediate values.

[00:23] <donri> also [+](0,1...*)[0...10]

[00:23] <benabik> rakudo: ([\+]0,1...*)[0..10]

[00:23] <p6eval> rakudo 6f9116:  ( no output )

[00:23] <jnthn> ah, yes, that's more useful :)

[00:23] <jnthn> rakudo: (([\+]0,1...*)[0..10]).perl.say

[00:23] <p6eval> rakudo 6f9116: OUTPUT«(0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55)␤»

[00:24] <donri> rakudo: (0,1,&infix:<+>..*)[10]

[00:24] <p6eval> rakudo 6f9116: OUTPUT«Method 'succ' not found for invocant of class 'Perl6MultiSub'␤  in 'RangeIter::reify' at line 4926:CORE.setting␤  in 'List::at_pos' at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1790:CORE.setting␤  in 'Parcel::at_pos' at line 1␤  in 'Any::postcircumfix:<[ ]>' at line

[00:24] <p6eval> ..1790:CORE.…

[00:24] <donri> rakudo: (0,1,&infix:<+>...*)[10]

[00:24] <p6eval> rakudo 6f9116:  ( no output )

[00:25] <donri> rakudo: (0,1,&infix:<+>...*)[10].say

[00:25] <p6eval> rakudo 6f9116: OUTPUT«55␤»

[00:25] <benabik> I always forget that p6eval isn't a REPL.

[00:25] <jnthn> We did have it auto-print once, but I think it causes some other issues

[00:28] <benabik> Would be handy if it had something like ruby's p: sub p($_) { .perl.say }

[00:29] *** whiteknight joined
[00:30] <benabik> Or some other low precedence way of adding .perl.say

[00:32] *** stifynsemons left
[00:32] <dalek> nqp/match-nom: 94e55ed | jonathan++ | src/pmc/rakudoobject.pmc:

[00:32] <dalek> nqp/match-nom: Work around Parrot's nuts keys implementation. This means the getting/setting keys in the capture bit now seems to work well, which gets us to the next error, which is just that NQPCapture needs some more implementation effort (exists). Also will need to make those v-tables overridable.

[00:32] <dalek> nqp/match-nom: review: https://github.com/perl6/nqp/commit/94e55ed4d8

[00:35] <jnthn> OK, enough for me tonight. 

[00:35] <jnthn> Gotta drag myself into $office at a reasonable time in the morning.

[00:35] <jnthn> sleep &

[00:39] <donri> rakudo: [\+]0,1...*

[00:39] <p6eval> rakudo 6f9116:  ( no output )

[00:39] <donri> rakudo: say [\+]0,1...*

[00:40] <p6eval> rakudo 6f9116:

[00:40] <p6eval> ..OUTPUT«(timeout)128364555667891105120136153171190210231253276300325351378406435465496528561595630666703741780820861903946990103510811128117612251275132613781431148515401596165317111770183018911953201620802145221122782346241524852556262827012775285029263003308131603240332134033486357036553…

[00:40] <donri> lol

[00:44] *** donri left
[00:45] *** Limbic_Region joined
[00:48] *** vmspb left
[01:03] *** saaki left
[01:09] *** Rotwang left
[01:29] <sorear> good * #perl6

[01:30] *** _jaldhar_ joined
[01:34] *** stkowski left
[01:38] *** _jaldhar_ is now known as jaldhar

[01:48] *** plobsing joined
[01:49] *** shortcircuit joined
[01:52] *** jasonmay joined
[01:57] *** cosimo left
[02:05] *** noganex left
[02:05] *** noganex joined
[02:07] *** cdarroch left
[02:07] *** am0c joined
[02:07] *** florz left
[02:09] *** satyavvd joined
[02:17] *** stifynsemons joined
[02:29] *** kst` is now known as kst

[02:36] *** stifynsemons left
[02:37] *** whiteknight left
[02:42] *** Guest40998 joined
[02:43] *** Guest40998 left
[02:55] *** lateau joined
[02:55] <diakopter> *

[02:55] <phenny> diakopter: 15 Feb 09:55Z <moritz_> tell diakopter that I "git stash"ed some changes to evalbot, because I needed to pull and didn't know what to do with them - fell free to 'git stash apply' + commit, or let them rot

[03:04] *** satyavvd left
[03:04] *** cosimo joined
[03:06] <sorear> hi diakopter

[03:10] *** benabik left
[03:13] *** cosimo left
[03:13] *** Limbic_Region left
[03:13] *** cosimo joined
[03:14] *** stifynsemons joined
[03:25] *** lakshman left
[03:26] *** shabble_ left
[03:29] *** shabble joined
[03:29] *** shabble left
[03:29] *** shabble joined
[03:33] *** woosley joined
[03:40] *** agentzh joined
[04:01] *** benabik joined
[04:16] *** satyavvd joined
[04:19] *** mtk left
[04:22] *** colomon joined
[04:23] *** Su-Shee_ joined
[04:26] *** mberends joined
[04:27] *** Su-Shee left
[04:27] *** drbean left
[04:28] *** drbean joined
[04:33] *** stepnem left
[04:35] *** satyavvd left
[04:36] *** meraxes left
[04:37] *** stepnem joined
[04:43] *** nadim__ left
[04:44] *** nadim__ joined
[04:44] *** mberends left
[04:46] *** mberends joined
[04:52] *** _twitch joined
[04:59] *** felliott left
[05:00] *** felliott joined
[05:02] *** felliott left
[05:12] *** cosimo left
[05:21] *** colomon_ joined
[05:21] *** colomon left
[05:21] *** colomon_ is now known as colomon

[05:23] <sorear> Why are so many spectest files so long and complicated? :/

[05:26] *** gimix joined
[05:28] <dalek> roast: d88e9eb | sorear++ | S03-operators/binding-scalars.t:

[05:28] <dalek> roast: Fudge S03/binding-scalars for niecza

[05:28] <dalek> roast: review: https://github.com/perl6/roast/commit/d88e9ebbad

[05:28] <dalek> roast: 8b6f98d | sorear++ | S03-operators/bit.t:

[05:28] <dalek> roast: Fudge S03/bit for niecza

[05:28] <dalek> roast: review: https://github.com/perl6/roast/commit/8b6f98d253

[05:28] <dalek> roast: 39ead4f | sorear++ | S03-smartmatch/any-str.t:

[05:28] <dalek> roast: Fudge S03-smartmatch/any-str for niecza

[05:28] <dalek> roast: review: https://github.com/perl6/roast/commit/39ead4ffd6

[05:29] *** colomon left
[05:31] *** lue left
[05:32] *** lue joined
[05:34] <[Coke]> sorear: I had similar trouble dealing with tcl's official test suite, and I didn't have the luxury of fudging. I feel your pain.

[05:36] *** simcop2387 left
[05:38] *** woosley1 joined
[05:39] *** woosley left
[05:41] *** mberends left
[05:41] <sorear> [Coke]: the worst part is that they incidentally test other things

[05:42] <[Coke]> aye.

[05:42] <sorear> quite a few tests assume a working numerics hierarchy

[05:42] <[Coke]> making it so that you have to run most everything to test anything. sucks.

[05:43] <sorear> in niecza it currently flattens to Num

[05:50] *** simcop2387 joined
[06:05] *** sftp left
[06:07] *** simcop2387 left
[06:12] *** simcop2387 joined
[06:17] *** justatheory left
[06:25] *** kaare_ joined
[06:25] *** lue left
[06:26] *** shi joined
[06:29] *** Khisanth left
[06:30] *** Khisanth joined
[06:35] *** gbacon_ left
[06:37] *** gbacon_ joined
[06:44] <dalek> roast: 5d02383 | sorear++ | S04-declarations/state.t:

[06:44] <dalek> roast: Fudge S04-declarations/state for niecza

[06:44] <dalek> roast: review: https://github.com/perl6/roast/commit/5d02383553

[06:44] <dalek> roast: 2c2bce7 | sorear++ | S04-statement-modifiers/ (2 files):

[06:44] <dalek> roast: Fudge S04/for and given for niecza

[06:44] <dalek> roast: review: https://github.com/perl6/roast/commit/2c2bce7455

[06:44] <dalek> roast: b349634 | sorear++ | S04-statement-modifiers/if.t:

[06:44] <dalek> roast: Fudge postfix if for niecza

[06:44] <dalek> roast: review: https://github.com/perl6/roast/commit/b3496345e0

[06:45] <dalek> niecza: 3e24c39 | sorear++ | / (2 files):

[06:45] <dalek> niecza: Add new test files and TODOs for today

[06:45] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3e24c39974

[06:45] * sorear -> sleep

[06:47] *** zostay left
[06:49] *** stifynsemons left
[06:55] *** Mowah joined
[06:57] *** wtw joined
[07:03] *** envi joined
[07:04] *** cjk101010 joined
[07:24] *** mfollett joined
[07:25] <mfollett> What's the easiest way for me to make a GET web request in Rakudo * 2011-01?

[07:29] *** mfollett left
[07:37] *** mberends_ joined
[07:37] *** mberends joined
[07:38] *** mberends left
[07:38] *** mberends_ left
[07:38] *** mberends joined
[07:38] *** mberends_ joined
[07:38] *** mberends_ left
[07:49] *** Su-Shee_ is now known as Su-Shee

[07:50] *** daxim joined
[08:01] *** fith left
[08:08] *** fith joined
[08:13] *** Layla_91 joined
[08:16] *** stepnem left
[08:21] <diakopter> phenny: tell TimToady maybe Perl 6 can make it into Vol5 of TAoCP (Scanning/Parsing) ;) he says done by 2020

[08:21] <phenny> diakopter: I'll pass that on when TimToady is around.

[08:24] *** vampirelove_294 joined
[08:24] <jnthn> morning, #perl6

[08:25] *** woosley1 left
[08:25] <Layla_91> jnthn: yaw! =)

[08:25] <jnthn> Layla_91! \o/

[08:25] <vampirelove_294> sup 

[08:26] <jnthn> Privet! # Don't have Russian mapped on this keyboard :)

[08:26] *** vampirelove_294 left
[08:27] <Layla_91> jnthn: prevet! I don't have one too.. but my english is getting better though :D

[08:27] *** bacek left
[08:28] <jnthn> Layla_91: Your English seems quite nice. :)

[08:29] <Layla_91> jnthn: erm.. I still can't say "w" properly.. comes out like v... I was told so :(

[08:29] <jnthn> Aww...

[08:31] * jnthn has had trouble with various sounds in other languages

[08:31] <jnthn> When I was in Spain, I couldn't pronounce the "r" correctly.

[08:32] <Layla_91> I fixed the r thing when I was at school =) 

[08:32] *** K-LineMeAssholes joined
[08:33] <K-LineMeAssholes> +aloha +dalek +ilogger2 +IRSeekBot +p6eval 16WAAGL8K _ilbot _sri _twitch aesop agentzh aindilis Alias allbery_b am0c amkrankr1leuen apejens araujo arlinius arnsholt arthur-_ ascent_ ashleydev avuserow awwaiid bacek_at_work baest barika bartolin bbkr benabik betterworld BinGOs breinbaas broquaint Bucciarati c1sung_ charsbr__ chitragupt cibs cjk101010 cjk101012 clkao cls_bsd cognominal coldhead cookys_ cotto cotto_work cschimm1

[08:33] <am0c> it's a kicktime

[08:33] <Layla_91> what was that?

[08:34] <K-LineMeAssholes> KLINE TIME

[08:34] *** ChanServ sets mode: +o moritz_

[08:34] <K-LineMeAssholes> k-line please

[08:34] *** moritz_ sets mode: +b *!*46b3bb15@*.70.179.187.21

[08:34] *** K-LineMeAssholes was kicked by moritz_ (K-LineMeAssholes))
[08:34] <jnthn> ...wow, some people do the most pointless things...

[08:35] <Layla_91> :-\

[08:35] <Layla_91> moritz_ saved the day! ^_^

[08:35] <jnthn> Layla_91: I suspect you'll pick the w up more if you hear it enough

[08:35] *** moritz_ sets mode: -o moritz_

[08:36] *** charsbr__ left
[08:37] *** fhelmberger joined
[08:37] <Layla_91> jnthn: mm.. the problem in my opinion is that the languages are so different.. Like a client I have from China.. she sent me a video about the alphabet.. it was so long! I thought russian alphabet was the longest! :S

[08:39] *** knewt2 joined
[08:40] *** bhwu joined
[08:42] *** charsbr__ joined
[08:48] <jnthn> Layla_91: Russian alphabet is quite OK to learn...especially because uppercase and lowercase letters tend to be identical (apart from size difference of course :-)).

[08:54] * daxim gives jnthn a cockchafer ж

[08:56] <jnthn> .u ж

[08:56] <phenny> U+0436 CYRILLIC SMALL LETTER ZHE (ж)

[08:56] <jnthn> :)

[08:59] <Layla_91> jnthn: yes it is so easy, also spiritual and romantic language.. you must learn it~ :-|

[08:59] <Layla_91> jnthn: :D

[09:00] <coldhead> to read dostoevsky in russian would be nice

[09:00] <dalek> nqp/match-nom: 3a80453 | moritz++ | src/ (2 files):

[09:00] <dalek> nqp/match-nom: try to implement exists_keyed* vtable overrides by adopted copy & paste

[09:00] <dalek> nqp/match-nom: review: https://github.com/perl6/nqp/commit/3a80453155

[09:01] <Layla_91> coldhead: I started with Chekhov when I was in school.. I liked his style..

[09:02] <jnthn> Layla_91: Yes, I'm learning. I love it. :)

[09:02] <jnthn> Layla_91: But still...long way to go.

[09:03] <jnthn> I spent 2 years studying Slovak when I lived there and still wasn't very good by the time I left.

[09:04] *** stepnem joined
[09:07] <daxim> you recognise this: пиво

[09:07] <jnthn> Of course :)

[09:08] <jnthn> Important word!

[09:08] <daxim> this is a good place for a sixer to attach a comment to the question how perl6 currently handles multi-line comments, perhaps with a link to the appropriate standards document:  http://stackoverflow.com/q/5012838

[09:09] <Layla_91> jnthn: пиво... mmm.. you must have russian roots in family to like it that much.. it is so common like water in Russia :D

[09:10] <Layla_91> Lunch time! bye! o/

[09:11] <jnthn> The Russian supermarkets are great. They have a section for пиво, a section for вино...and then one for alcohol ;)

[09:11] <jnthn> Layla_91: Enjoy! bye! o/

[09:12] *** Layla_91 left
[09:13] <tadzik> phenny: "пиво"?

[09:13] <phenny> tadzik: "beer" (mk to en, translate.google.com)

[09:13] <tadzik> phenny: "вино"?

[09:13] <phenny> tadzik: "wine" (bg to en, translate.google.com)

[09:14] <tadzik> nubo, Buho :)

[09:19] <jdhore> I just realized something interesting...I'm rather surprised that Larry wasn't in (or even mentioned in) Revolution OS.

[09:20] *** jonnie left
[09:21] *** neroxx joined
[09:22] <moritz_> jnthn: upon further reflection, I noticed that I don't quite understand object creation/initialization

[09:22] <moritz_> .bless takes a hash of attributes

[09:23] <moritz_> does it try to recursively initialize that in self and base classes?

[09:23] <moritz_> or does it call .BUILDALL, which does that?

[09:31] *** bacek joined
[09:32] *** f00li5h joined
[09:36] <jnthn> It calls BUILDALL, which calls each BUILD method in trun.

[09:36] <jnthn> *turn

[09:36] <moritz_> but which step does the actual attribute initialization?

[09:37] <jnthn> BUILD is the only thing that actually touches the attributes

[09:39] <moritz_> but... BUILD is a submethod, and there's not a BUILD submethod automatically in each class

[09:39] <jnthn> Yes, the Mu.BUILD is...special.

[09:40] <jnthn> I fear more special than we've been treating it in Rakudo so far

[09:40] * jnthn realizes that we may have been getting away with a few things...

[09:41] <moritz_> so...

[09:41] <moritz_> BUILDALL looks into each class for the presence of a BUILD submethod

[09:41] <moritz_> if it's there, it calls it

[09:42] <moritz_> if not, it calls Mu.BUILD with some magic pretending to be in the current class, not in Mu?

[09:43] <jnthn> Yes, it's that "magic" that is confusing me at the moment.

[09:43] <jnthn> I think the Rakudo version depends on attribute access being "broken" and not needing to be qualified with a class name

[09:45] <jnthn> moritz_: I need to think about it a little more, but I need to do some $dayjob bits at the moment.

[09:47] *** wtw left
[09:48] <moritz_> ok

[09:48] *** dakkar joined
[09:51] *** wtw joined
[09:58] *** am0c^ joined
[09:58] *** am0c left
[10:02] <dalek> nqp: 99575b9 | moritz++ | / (2 files):

[10:02] <dalek> nqp: implement NQPMu.{new,BUILDALL,MAGIC_BUILD}. Tests.

[10:02] <dalek> nqp: 

[10:02] <dalek> nqp: The latter is a hack to get attribute initialization working in classes that

[10:02] <dalek> nqp: don't define their own BUILD submethod.

[10:02] <dalek> nqp: 

[10:02] <dalek> nqp: Lack automatic BUILD calling.

[10:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/99575b9e03

[10:13] *** mkramer joined
[10:39] <moritz_> nqp: my @a; say(@a[0])

[10:39] <p6eval> nqp: OUTPUT«␤»

[10:39] <moritz_> nqp: my @a; say(pir::typeof(@a[0]))

[10:39] <p6eval> nqp: OUTPUT«Undef␤»

[10:48] *** icwiener joined
[10:48] *** masak joined
[10:55] <masak> good noon, #perl6

[10:56] <moritz_> oh hai masak

[11:03] <mberends> o/

[11:05] <masak> Layla_91: A video about the Chinese alphabet? were you joking, or was your client joking? Chinese doesn't really have an alphabet as such. not in the sense of "totally ordered set of symbols approximately on the level of phonemes", at least.

[11:05] *** lateau left
[11:08] *** coldhead left
[11:08] *** am0c^ left
[11:08] <masak> moritz_, jnthn: I'm interested in object creation/initialization too. is downcasting on the table? that would be nice.

[11:09] <moritz_> masak: did you see my last nqp commit?

[11:09] <masak> no; looking.

[11:10] <moritz_> it's a bit hacky, and n downcasting happens

[11:10] <masak> MAGIC_BUILD...

[11:10] *** dju joined
[11:10] *** dju left
[11:10] *** dju joined
[11:11] <masak> I guess it's easier to *talk* about downcasting now that jnthn has evolved the thinking about reprs.

[11:11] <masak> when we downcast, we probably need to switch out the repr, right?

[11:12] <moritz_> right

[11:12] <masak> that's how I see it working, anyway: in downcasting from A to B: the object $a first gets a new repr with the B attributes, than B.BUILD is run on it.

[11:14] <masak> generalizing for a chain of several children, the repr only needs to be swapped out once at the beginning to the intended type.

[11:16] <moritz_> sounds right

[11:17] <masak> ah, .BUILD_MAGIC is the method prying open Pandora's box. ;)

[11:17] <masak> does nqp not have submethods yet?

[11:23] <moritz_> don't think so

[11:23] <moritz_> which is why I didn't implement BUILD support

[11:25] <diakopter> ooooo it's bedtime

[11:26] <masak> 'night, kopter.

[11:26] <jnthn> Casting isn't really about changing the object. It's just about changing the way you look at it.

[11:26] <jnthn> diakopter: sleep well o/

[11:27] <masak> jnthn: are you implying that downcasting shouldn't work if the object isn't already "really" a B?

[11:28] <jnthn> Well, we don't really do casting at all in Perl 6, in the sense you do it in Java

[11:28] <jnthn> I think you're talking about re-blessing.

[11:28] <masak> right. I am.

[11:28] <masak> downblessing :)

[11:28] <jnthn> C/Java/C# all confuse things a bit by using the same syntax for casts and coercions.

[11:29] <jnthn> (float)some_int # coercion, actual representation change...though not in-place

[11:29] <jnthn> (Child)SomethingWeOnlyKnowAsTheParent # cast - doesn't change the object, just checks it really is a Child

[11:34] <moritz_> is tha why C++ has dynamic_cast?

[11:36] *** shi left
[11:39] *** shi joined
[11:47] *** am0c joined
[11:48] *** colomon joined
[11:50] <jnthn> moritz_: I don't know C++ well enough to say

[11:52] <masak> http://www.parashift.com/c++-faq-lite/smalltalk.html#faq-30.3

[11:53] <colomon> dynamic_cast is "we have a child, cast to it."

[11:53] <colomon> or I guess, "if you have a child, cast to it."

[11:55] <colomon> or as you say, "just checks it really is a Child"

[11:55] *** agentzh left
[11:55] <colomon> it's the one the OO fanatics say you should never use, but in practice is really freaking useful.  :)

[12:27] <dalek> roast: 7bfcd8e | (Solomon Foster)++ | S32-num/gcd.t:

[12:27] <dalek> roast: Add simple tests for gcd.

[12:27] <dalek> roast: review: https://github.com/perl6/roast/commit/7bfcd8efe6

[12:32] *** Chat8951 joined
[12:33] *** Chat8951 left
[12:43] <masak> I'm listening to http://www.infoq.com/presentations/TDD-in-a-DbC-World-Greg-Young -- it's quite related to PRE/POST and similar things. Greg just mentioned a special type of block that (dynamically) lifts the PRE/POST invariants.

[12:43] <masak> this would solve an issue that moritz_++ raised once -- that there must conceivably be some situations where we can't fulfill all the per-class pre/postconditions.

[12:46] *** ymasory joined
[12:46] *** ymasory left
[12:48] *** colomon_ joined
[12:48] *** colomon left
[12:48] *** colomon_ is now known as colomon

[12:54] <takadonet> morning all

[12:54] <colomon> o/

[12:55] <masak> \o

[12:56] <jnthn> o/

[12:56] * jnthn eated too much lunch and is sleepy now

[12:57] *** mtk joined
[13:02] <arnsholt> ETOOMANYNOMS

[13:02] <arnsholt> =)

[13:04] <masak> POST { @.nom <= $NOM_LIMIT }

[13:17] <dalek> rakudo: b076174 | colomon++ | src/core/Rat.pm:

[13:17] <dalek> rakudo: Switch calls to pir::gcd_iii to just gcd.

[13:17] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/b076174099

[13:17] <dalek> rakudo: 67dfab4 | colomon++ | src/core/Int.pm:

[13:17] <dalek> rakudo: Add Int.gcd and a proto for a sub version.

[13:17] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/67dfab4d34

[13:17] <dalek> rakudo: 4f5299c | colomon++ | t/spectest.data:

[13:17] <dalek> rakudo: Add S-32num/gcd.t.

[13:17] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/4f5299c677

[13:18] * jnthn wonders how much trouble our protos are going to get us into during the nom branch :)

[13:19] <colomon> I need to get into nom and lend a hand.

[13:19] <masak> jnthn: are we going to run into the "have to declare a proto everywhere there's a multi" restriction?

[13:20] <jnthn> masak: We'll declare them all in the setting.

[13:20] <jnthn> masak: I'm planning to implement the auto-generation before we merge the branch though.

[13:20] <masak> oh, ok.

[13:20] <masak> that's for the subroutines case, I presume.

[13:20] <colomon> auto-generation in the sense that users don't have to declare protos?

[13:21] <jnthn> colomon: Right, as per spec

[13:21] <colomon> \o/

[13:21] *** MayDaniel joined
[13:21] <jnthn> masak: Yeah. The method case is easier.

[13:21] <masak> ooh, as per spec?

[13:21] * masak didn't know that

[13:21] <jnthn> The spec talks about proto gen, I think.

[13:21] <masak> the method case is... easier? I thought MI made it kinda tricky.

[13:21] <jnthn> I'm sure that went in during the multi changes from earlier.

[13:22] <masak> I'd like a reference to that part of the spec at some point.

[13:22] <masak> not necessarily now :)

[13:22] <jnthn> S06

[13:22] <colomon> I'm very happy about that.  :)

[13:22] <jnthn> :P

[13:22] <jnthn> MI is not a problem for the meta-model implementor. 

[13:22] <jnthn> But users can get themselves in a tangle with it

[13:22] <jnthn> But it's no worse than the "usual" tangle multiple inheritance gets you into.

[13:22] <colomon> masak: I have such weird mixed feelings about p4.

[13:23] <masak> colomon: let's hear it.

[13:24] <masak> jnthn: C is A is B, D is A is B. C and D both define multi .foo: where does the proto go?

[13:25] <colomon> masak: It's an uneasy blend between pride at having one of the best performers and shame that I didn't notice any of the better ways of doing things that were staring me in the face.

[13:26] <masak> colomon: oh, nothing worse than that? then I'm not too worried.

[13:26] <jnthn> masak: C will get a proto auto-generated in it. D will get a proto auto-generated in it.

[13:26] <masak> colomon: that basically just means that my cunning plan worked for p4 :)

[13:26] <jnthn> masak: If you declare a multi in a class and there's no proto in the MRO matching that name, the proto gets created in that class.

[13:27] <jnthn> The meta-object doesn't go monkey-patching others.

[13:27] <masak> colomon: in some sense working code is what counts here. recall that the *only* contestant who got p4 right got so involved in it that he (1) missed the deadline, and (2) didn't complete all of the other tasks.

[13:28] <masak> colomon: the contest is explicitly set up to reward people who can manage the constraints enought to produce five good-enough solutions, not 1..5 perfect solutions.

[13:28] <masak> jnthn: oh, good.

[13:28] <masak> jnthn: that's very sane.

[13:28] * masak is happi

[13:29] <colomon> masak: like not noticing that two runs of the same length cancelled each other out.  I mean, a bunch of the stuff I wrote more or less assumed that, but I never formally thought it out and generalized it.  Applying the insight would have been a five-minute patch that would have noticeably strengthened my code.

[13:29] <masak> colomon: yes, I wouldn't say your code is too strong on the theoretical side... but it gets the job done, for large values of $N.

[13:30] <colomon> masak: I was using the code to develop the theory, rather than the other way around.  :)

[13:31] * colomon never imagined 56 would be considered a large value of $N; just assumed that would be in the 100s.

[13:32] <masak> no, 56 isn't a particularly large value of $N. I just stopped looking when I had found some flaw in all of the submitted algorithms.

[13:36] *** MayDaniel left
[13:38] <masak> as I write in the blog post, the interesting thing is analyzing the p4 submissions from the point of view that they all miss the theory-based solution.

[13:39] <masak> there are traces of similar "traps" in the other problems. for example, p1-fox misses the fact that a greedy algorithm doesn't always find the best answer.

[13:47] *** awoodland joined
[13:47] *** colomon left
[13:49] *** _sri left
[13:49] *** _sri joined
[13:52] <moritz_> ... which you mentioned in the problem description, iirc

[13:58] *** slavik1 joined
[14:02] <daxim> http://stackoverflow.com/questions/5017095/how-to-get-the-terminalsize-with-perl6-rakudo

[14:03] * takadonet looks at masak and moritz_

[14:03] <masak> moritz_: I don't think I did. I did hint at it being cumbersome to iterate through the whole permutation space, though.

[14:03] *** Nehru joined
[14:04] <masak> getting the terminal size? that would have to be something specific to the window manager, I suppose.

[14:04] <masak> or specific to something.

[14:04] *** Nehru left
[14:05] <masak> looking at CPAN's Term::ReadKey, it seems it's iterating over a number of common platforms, doing platform-specific things for each.

[14:09] <Tene> masak: window manager doesn't have anything to do with it... many terminals don't have an associated window manager at all.

[14:09] <Tene> running over ssh, running on the linux VT, etc.

[14:10] <masak> true. I was speaking out of a state of confusion... :)

[14:10] <masak> I meant "environment".

[14:11] <Tene> 'k

[14:11] * Tene finally goes to bed, six hours late.

[14:18] <flussence> That p5 ReadKey code looks... scary.

[14:19] *** plainhao joined
[14:24] *** ab5tract joined
[14:29] *** kaare_ left
[14:30] <takadonet> flussence: don't look at Text-Tabs-Wraps code

[14:30] *** donri joined
[14:30] <flussence> haha :)

[14:31] <donri> What's the colon in grep:block etc?

[14:31] <flussence> grep:* means the same thing as grep(*)

[14:32] *** colomon joined
[14:32] <donri> doesn't grep * too

[14:34] *** colomon left
[14:35] <flussence> actually I'm slightly wrong

[14:35] <flussence> from reading the spec, it seems like a colon does the same as p5's indirect object syntax

[14:36] <donri> i don't speak perl5 :$

[14:38] <flussence> basically it works for that example above but it has evil side effects

[14:38] <donri> what example?

[14:38] <flussence> grep:*

[14:38] <donri> i just joined

[14:39] <donri> but why and when is : needed?

[14:39] <flussence> see http://perlcabal.org/syn/S03.html#Comma_operator_precedence

[14:39] <donri> i did, not much wiser ;)

[14:40] *** tzhs joined
[14:41] <flussence> well, take the "push @array: 1,2,3" from there -

[14:41] <PerlJam> donri: do you understand OOP and what "invocant" means?

[14:41] <flussence> that's the same as writing [email@hidden.address] 1,2,3"

[14:41] <masak> no.

[14:42] <masak> @array.push 1,2,3 is a TTIAR error.

[14:42] <masak> has to be @array.push: 1,2,3

[14:42] <flussence> right.

[14:42] <masak> the way I see it, the colon actually fills two different purposes here.

[14:42] <masak> one is the indirect object notation a la Perl 5: push @array: 1,2,3'

[14:42] <flussence> (the more I read this the more it confuses me)

[14:43] <masak> the other is the "the rest of the expression is arguments" use: @array.push: 1,2,3

[14:43] <huf> what else could it be?

[14:43] <huf> or is this as an alternative to 9)?

[14:43] <huf> ()

[14:43] <masak> yes.

[14:44] <donri> So like Haskell $

[14:44] <donri> PerlJam: Not sure about invocant

[14:45] *** ymasory joined
[14:45] *** xinming left
[14:45] <flussence> donri: do you know javascript? it's the same as func.apply(invocant) there

[14:46] <flussence> lets you change the value of "self"

[14:47] <donri> Why is that needed for grep and whatnot?

[14:47] <flussence> it's not

[14:47] *** TH14 joined
[14:47] <flussence> it's just there if you want to write it that way

[14:47] *** xinming joined
[14:48] <masak> donri: the invocant in a method is the object that gets bound to the 'self' keyword.

[14:48] <TH14> hi

[14:48] <masak> TH14: hi!

[14:49] <masak> TH14: welcome to our humble adobe :)

[14:49] <PerlJam> adobe?

[14:49] <PerlJam> I assume that was intentional, but you never can tell around here.

[14:49] <masak> a brick building.

[14:49] <TH14> thanks - heavy stuff, what?

[14:49] <masak> TH14: Perl 6? you bet.

[14:50] <TH14> need further education for this place......

[14:50] <PerlJam> Perl 6 is heavy so that your code can be light

[14:50] <masak> Perl 6 is heavy because we build it out of sun-dried bricks.

[14:51] <TH14> great

[14:51] <masak> TH14: how did you find #perl6?

[14:52] <TH14> just searched - it was top of the list

[14:52] <donri> an example of grep with and without :?

[14:52] <moritz_> \o/ our search engine optimization seems to work, at least partly :-)

[14:52] <masak> we're top-of-the-list? \o/

[14:52] <moritz_> rakudo: say <a b c>.grep: 'b'

[14:52] <p6eval> rakudo 6f9116: OUTPUT«b␤»

[14:53] <moritz_> rakudo: say <a b c>.grep('b')

[14:53] <PerlJam> donri: @numbers.grep(* > 3)

[14:53] <p6eval> rakudo 6f9116: OUTPUT«b␤»

[14:53] <donri> ok but an example that differs because of the use-or-not of :?

[14:53] <donri> rakudo: say <a b c>.grep 'b'

[14:53] <p6eval> rakudo 6f9116: OUTPUT«===SORRY!===␤Confused at line 22, near "say <a b c"␤»

[14:54] <masak> donri: Two Terms In A Row.

[14:54] <donri> rakudo: say <a b c>.grep * eq 'b'

[14:54] <p6eval> rakudo 6f9116: OUTPUT«No candidates found to invoke for method 'grep' on object of type 'Parcel'; available candidates have signatures:␤:(Mu : Mu $test;; *%_)␤␤  in main program body at line 22:/tmp/hGf1bC2f8y␤»

[14:54] *** TH14 left
[14:54] <masak> std: say <a b c>.grep 'b'

[14:54] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row (method call requires colon or parens to take arguments) at /tmp/Gv50IrCgog line 1:␤------> [32msay <a b c>.grep [33m⏏[31m'b'[0m␤    expecting any of:␤       bracketed infix␤        infix or meta-infix␤    statement modifier

[14:54] <p6eval> ..loop␤Parse failed␤F…

[14:54] <donri> so it's just a disambiguation thing

[14:54] <masak> in a sense, yes.

[14:54] <moritz_> it's just syntax.

[14:54] <flussence> or an ambiguation thing :)

[14:54] <masak> TTIAR goes quite deep in Perl 6.

[14:54] <donri> ok :)

[14:54] <donri> ttiar?

[14:55] <masak> donri: Two Terms In A Row.

[14:55] <masak> it makes the parser sane in a certain way that's good for error messages. :)

[14:57] <donri> \o/

[14:58] <donri> and humans, perhaps

[14:58] <masak> once you get used to the idea, yes.

[14:59] *** meraxes joined
[15:04] *** mfollett joined
[15:05] <masak> customers like TH14 interest me. he seemed to want something, but we never found out what.

[15:14] *** kaare_ joined
[15:18] *** dakkar left
[15:20] *** dakkar joined
[15:29] *** dakkar left
[15:32] *** dakkar joined
[15:33] *** wtw left
[15:37] *** fhelmberger left
[15:38] *** mberends left
[15:45] *** mfollett left
[15:45] *** mfollett joined
[15:49] *** dakkar left
[15:50] *** dakkar joined
[15:50] *** cjk101010 left
[15:54] *** am0c left
[15:57] <sorear> good * #perl6

[16:02] <moritz_> \o

[16:04] *** neroxx left
[16:08] *** justatheory joined
[16:11] *** MayDaniel joined
[16:16] *** risou joined
[16:27] *** tzhs left
[16:30] *** ab5tract left
[16:35] *** kjeldahl joined
[16:39] *** dakkar left
[16:44] *** perlpilot joined
[16:45] *** neroxx joined
[16:53] <mfollett> So, what's the easiest way for me to make a GET request at the moment, there isn't anything like LWP::Simple, is there?

[16:54] <masak> mfollett: well, there's IO::Socket.

[16:56] *** risou_ joined
[16:57] <moritz_> mfollett: there's an LWP::Simple

[16:57] <moritz_> mfollett: see modules.perl6.org

[16:58] <sorear> hi masak

[16:58] <mfollett> moritz_:Thanks, that'll be what I go with, I was just checking if there was anything closer atm.

[16:58] <sorear> so if I add new test files to roast, will I break rakudo?

[16:59] <masak> hi sorear.

[16:59] <moritz_> sorear: nope; rakudo whitelists

[16:59] *** risou left
[16:59] <perlpilot> if you break rakudo, that's indicative of a problem  :)

[16:59] <moritz_> sorear: btw I saw your recent remark that many test files are big and complicated... feel free to split them up if you find a good classification by topic

[16:59] <dalek> roast: 821cdb0 | sorear++ | S04-statements/ (2 files):

[16:59] <dalek> roast: Fudge for_with_only_one_item, gather for niecza

[16:59] <dalek> roast: review: https://github.com/perl6/roast/commit/821cdb01b0

[16:59] <dalek> roast: b877a11 | sorear++ | S04-statements/next.t:

[16:59] <dalek> roast: Fudge S04/next for niecza

[16:59] <dalek> roast: review: https://github.com/perl6/roast/commit/b877a11e81

[16:59] <dalek> roast: 6ca5980 | sorear++ | S04-statements/no-implicit-block.t:

[16:59] <dalek> roast: Fudge S04/no-implicit-block for niecza

[16:59] <dalek> roast: review: https://github.com/perl6/roast/commit/6ca5980c4b

[16:59] <dalek> roast: 15b1f27 | sorear++ | S04-statements/while.t:

[16:59] <dalek> roast: Fudge S04/while for niecza

[16:59] <dalek> roast: review: https://github.com/perl6/roast/commit/15b1f27d52

[17:00] <masak> also, reducing test files' dependence on more advanced features can only be a good thing.

[17:01] <sorear> niecza is now running >1/2 of 31 test files in S02-S04

[17:01] <masak> wow!

[17:01] <sorear> time for S05.  I hope there are lots of LTM tests ;)

[17:01] *** sftp joined
[17:01] <moritz_> sorear: notreally. I tried to write some, but it's hard when you can't run them (that was before niecza came along)

[17:02] <moritz_> t/spec/S05-metasyntax/longest-alternative.t

[17:02] *** mtk left
[17:02] * sorear looks S05-capture/alias.t line 17 and sighs

[17:02] *** alester joined
[17:03] *** dakkar joined
[17:04] <sorear> I guess I could collapse it onto one line then add a #?niecza emit #

[17:04] <moritz_> sorear: such relicts from pre-fudge times can safely be removed

[17:04] <sorear> oh.\

[17:06] <dalek> roast: c2b89fe | moritz++ | S05- (4 files):

[17:06] <dalek> roast: [S05] remove some pre-fudge relicts noted by sorear++

[17:06] <dalek> roast: review: https://github.com/perl6/roast/commit/c2b89fe799

[17:08] <moritz_> sorear: also roast probably reflects the old thinking rw (foo)? captures being arrays... feel free to change that

[17:09] <moritz_> if you break rakudo along the way, I'll just fudge it

[17:09] <masak> sorear++ # targetting the spectests

[17:10] <sorear> masak: I've decided that they're a good proxy for darkpan code support

[17:10] <sorear> hehehe.  alias.t uses "regex two {..}" at top level :/

[17:10] *** cotto left
[17:10] <dalek> roast: ecfd67a | moritz++ | S05- (6 files):

[17:10] <dalek> roast: remove more pre-fudge cruft

[17:10] <dalek> roast: review: https://github.com/perl6/roast/commit/ecfd67ad33

[17:11] *** mtk joined
[17:14] <masak> sorear: maybe Rakudo doesn't spectest.data it, then.

[17:14] <masak> because Rakudo doesn't support that anymore either.

[17:15] <moritz_> karma sorear 

[17:15] <aloha> sorear has karma of 809.

[17:15] <sorear> I suspect I'll be turning a lot of the Niecza LTM tests into spectests later

[17:15] <masak> sounds great.

[17:15] <moritz_> sorear: that would be greatly appreciated

[17:16] <moritz_> sorear: also note for later that IO tests assume that the relative path to them is t/spec/S\d\d-whatever/testfile.t

[17:16] <moritz_> so the current approach with ../roast/S\d\d-whatever/testfile.t will reach its limit at some point

[17:17] <dalek> roast: 0a53d82 | sorear++ | S05-grammar/protoregex.t:

[17:17] <dalek> roast: Fudge S05-grammar/protoregex.t for niecza

[17:17] <dalek> roast: review: https://github.com/perl6/roast/commit/0a53d82046

[17:17] <sorear> stupid restrictions niecza has that the spectests don't bother to work around, like '::' not being allowed in class names ...

[17:19] <moritz_> sorear: I remember explicitly adding class names containing ::, because they were so unreliable in rakudo that I felt I needed to them along the way

[17:19] <moritz_> which, in hindsight, is stupid

[17:19] <moritz_> i should just have written separate tests for them

[17:19] <moritz_> but I was lazy :-

[17:22] * flussence recalls having to rewrite a bunch of code because X::Y::Z and X::Y::Z2 clashed in rakudo...

[17:22] <jnthn> o/

[17:24] <sorear> the problem with the spectests is that we don't really know yet what the "least common denominator" of Perl 6 is

[17:24] <sorear> it's probably close to NQP though

[17:24] <moritz_> \o jnthn 

[17:24] <moritz_> sorear: agreed

[17:26] * sorear wonders about adding tests that only work semi-by-accident

[17:27] <dalek> niecza: a5f68a0 | sorear++ | / (2 files):

[17:27] <dalek> niecza: Update whitelist and TODO

[17:27] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a5f68a0c21

[17:27] * sorear out

[17:27] <jnthn> moritz_: I saw you patched nqp some more...didn't peek yet :)

[17:29] <moritz_> jnthn: no visible progress in the match-nom branch... but I did add .bless and BUILDALL in master... it's a bit hacky

[17:29] <moritz_> see for yourself when you have time :-)

[17:30] <jnthn> moritz_: OK, should ahve some later on today :)

[17:34] *** leprevost joined
[17:34] <moritz_> and if it appears wrong to you... feel free to rip it out, I'm not very attached to the code

[17:34] *** leprevost_ joined
[17:34] *** leprevost left
[17:34] *** leprevost_ left
[17:34] *** leprevost joined
[17:34] *** noganex_ joined
[17:35] *** leprevost left
[17:35] *** leprevost_ joined
[17:36] *** leprevost_ left
[17:36] *** leprevost joined
[17:36] *** MayDaniel_ joined
[17:37] <bbkr> MiniDBI returns "Null PMC access in get_string()" in line 106 of NativeCall.pm6 on 2011.01 star release. is it known bug?

[17:38] *** cdarroch joined
[17:38] *** cdarroch left
[17:38] *** cdarroch joined
[17:38] *** noganex left
[17:39] <jnthn> bbkr: First time I've heard it.

[17:39] *** MayDaniel left
[17:39] *** noganex joined
[17:40] *** noganex_ left
[17:42] *** daxim left
[17:55] <donri> I don't get it, is Sprixel supposed to be fully Perl 6 or not?

[17:58] <donri> diakopter?

[17:59] * [Coke] wonders if he can test partcl-nqp against nom.

[18:01] *** Lorn_ left
[18:02] *** shi left
[18:03] <donri> sorear?

[18:03] *** dakkar left
[18:04] <[Coke]> Dr. Scott?

[18:06] *** shi joined
[18:10] <flussence> rakudo: use Test; plan 1; eval_lives_ok { 1 }

[18:10] <p6eval> rakudo 6f9116: OUTPUT«1..1␤get_attr_str() not implemented in class 'Sub'␤  in main program body at line 7461␤»

[18:10] <flussence> :(

[18:14] <tadzik> o/

[18:22] <dalek> nqp: 15ba2db | moritz++ | src/NQP/Grammar.pm:

[18:22] <dalek> nqp: allow <*> in proto regex body

[18:22] <dalek> nqp: review: https://github.com/perl6/nqp/commit/15ba2dbca9

[18:27] *** mfollett left
[18:28] *** mfollett joined
[18:31] *** mberends joined
[18:31] *** awoodland left
[18:37] *** mberends left
[18:38] *** leprevost left
[18:38] *** frodwith left
[18:39] *** frodwith joined
[18:40] *** Su-Shee_ joined
[18:43] *** Su-Shee left
[18:43] *** cjk101010 joined
[18:44] *** Su-Shee_ is now known as Su-Shee

[18:47] *** fhelmberger joined
[18:50] <masak> rakudo: use Test; plan 1; eval_lives_ok { 1 }; "42"

[18:50] <p6eval> rakudo 6f9116: OUTPUT«1..1␤get_attr_str() not implemented in class 'Sub'␤  in main program body at line 7461␤»

[18:50] *** colomon joined
[18:50] <jnthn> ...huh?

[18:51] <jnthn> rakudo: use Test; plan 1; eval_lives_ok { 1 };

[18:51] <p6eval> rakudo 6f9116: OUTPUT«1..1␤get_attr_str() not implemented in class 'Sub'␤  in main program body at line 7461␤»

[18:51] <jnthn> rakudo: use Test; eval_lives_ok { 1 };

[18:51] <p6eval> rakudo 6f9116: OUTPUT«get_attr_str() not implemented in class 'Sub'␤  in main program body at line 7461␤»

[18:51] <masak> flussence++ exposed this error a while back.

[18:51] <jnthn> ah, ok

[18:51] <masak> haven't seen it before.

[18:51] <jnthn> masak files rakudobug

[18:51] <jnthn> ;)

[18:53] * masak tries locally first

[18:55] <masak> whoa. failed Parrot assertion.

[18:55] <masak> bacek_at_work: seems we're not quite finished yet... :)

[18:55] * masak gets a more orthodox build

[18:59] <flussence> found that while I was trying to fix up a few commented out T-T-W tests... took me a while to figure out what was wrong :)

[19:02] <masak> how come it hasn't been found earlier? there has to be a number of those in the spectest suite.

[19:06] *** risou_ left
[19:07] <flussence> I'm not getting any more failures than usual either... http://smolder.parrot.org/app/projects/report_details/9752

[19:08] <flussence> the only commits since then have been the gcd changes, that shouldn't affect anything like this

[19:08] <masak> that's why I want to try it locally before I submit a rakudobug.

[19:09] <masak> it seems very unlikely that this happens outside of p6eval.

[19:09] <flussence> eval_lives_ok with a *string* works.

[19:09] <masak> o.O

[19:10] <flussence> and apparently, roast doesn't have *any* of the other type...

[19:10] <masak> ok, yo me interested now.

[19:10] *** vmspb joined
[19:10] <masak> s/yo/you've got/

[19:10] *** donaldh joined
[19:10] <flussence> (Test.pm needs more tests!)

[19:10] <masak> this is getting to sound like a rakudobug after all.

[19:19] *** cjk101010 left
[19:21] *** masak left
[19:21] *** masak joined
[19:22] *** mfollett left
[19:23] *** plobsing left
[19:26] * flussence cheats and uses git-bisect on it

[19:28] <donri> How is that cheating :D

[19:28] *** mfollett joined
[19:28] *** mfollett left
[19:28] <flussence> makes it look like I'm doing work, when I'm not :)

[19:28] *** mfollett joined
[19:31] *** donaldh left
[19:31] *** spq joined
[19:32] <donri> flussence: isn't that the holy grail of computing?

[19:33] <bacek> ~~

[19:33] <bacek> masak, can you try bleeding edge gen_gc2? I shaved few more yaks.

[19:34] <masak> bacek: ok.

[19:38] *** jasonmay left
[19:39] <flussence> well, this is awkward...

[19:39] <flussence> I'm going backwards through the monthly releases and even 2010.11 has this error

[19:39] *** ymasory left
[19:40] <flussence> oh. I'm an idiot.

[19:40] <flussence> I should be using lives_ok for a closure.

[19:40] *** jasonmay joined
[19:41] <jnthn> flussence: Do you know it's a regression?

[19:41] <jnthn> It's possible was just done wrong in the first place.

[19:42] <flussence> eval_lives_ok only has Str signatures, lives_ok has Callables 

[19:42] <jnthn> Yes, but eval_lives_ok shoudln't die with that particular error.

[19:42] <jnthn> Even if it is passed a closure

[19:43] <flussence> rakudo: sub a(Str $b) { return }; a({ 1 });

[19:43] <p6eval> rakudo 6f9116: OUTPUT«Nominal type check failed for parameter '$b'; expected Str but got Block instead␤  in 'a' at line 1:/tmp/kbAjjf5Arb␤  in main program body at line 22:/tmp/kbAjjf5Arb␤»

[19:43] <flussence> rakudo: multi sub a(Str $b) { return }; a({ 1 });

[19:43] <tadzik> isn't that a matter of adding a type check to a signature?

[19:43] <p6eval> rakudo 6f9116: OUTPUT«No applicable candidates found to dispatch to for 'a'. Available candidates are:␤:(Str $b)␤␤  in main program body at line 22:/tmp/uaSHZI9Bd4␤»

[19:44] <flussence> rakudo: multi sub a(Str $b) { return }; a { 1 };

[19:44] <p6eval> rakudo 6f9116: OUTPUT«No applicable candidates found to dispatch to for 'a'. Available candidates are:␤:(Str $b)␤␤  in main program body at line 22:/tmp/USDUX5UIDH␤»

[19:44] <flussence> hmm

[19:45] <jnthn> tadzik: I think eval is still implemented in PIR

[19:45] <flussence> rakudo: multi sub a(Str $b) { return }; a { 'string' };

[19:45] *** Mowah left
[19:45] <p6eval> rakudo 6f9116: OUTPUT«No applicable candidates found to dispatch to for 'a'. Available candidates are:␤:(Str $b)␤␤  in main program body at line 22:/tmp/Z04ByfzRp2␤»

[19:45] <flussence> can't imagine what the difference between that and the code in Test.pm is...

[19:45] <jnthn> flussence: It may be eval's fault

[19:45] <jnthn> rakudo: eval { 1 }

[19:46] <p6eval> rakudo 6f9116: OUTPUT«Nominal type check failed for parameter '$code'; expected Str but got Block instead␤  in 'eval' at line 1192:CORE.setting␤  in main program body at line 22:/tmp/fzZuNuYzY0␤»

[19:46] <jnthn> Oh, maybe not.

[19:46] <jnthn> rakudo: eval ~({ 1 })

[19:46] <p6eval> rakudo 6f9116:  ( no output )

[19:46] <jnthn> HM

[19:46] <jnthn> Oddness.

[19:47] <[Coke]> rakudo: say eval ~({ 1 })

[19:47] <p6eval> rakudo 6f9116:  ( no output )

[19:47] <masak> rakudo: say ~{ 1 }

[19:47] <p6eval> rakudo 6f9116: OUTPUT«_block124␤»

[19:47] <masak> that's what you're eval-ing.

[19:48] <masak> not a valid Perl 6 snippet.

[19:50] <bacek> masak, sorry, can you pull gen_gc2 again. I committed it with limitation of heap to 1 MB :)

[19:51] <masak> ok.

[19:55] *** jasonmay left
[19:55] *** fith left
[19:55] *** TiMBuS left
[20:01] <flussence> ok, I got something possibly useful -

[20:01] <flussence> module A; multi sub explode(Str $a) is export {};

[20:01] <flussence> that has the get_attr_str error

[20:02] <masak> flussence++

[20:02] <flussence> without the "multi" it gives a correct error

[20:02] <jnthn> oh

[20:02] <jnthn> is export is maybe to blaim then

[20:02] <jnthn> *blame

[20:02] <masak> blejn.

[20:02] <tadzik> blejm

[20:03] <tadzik> phenny: "winić"?

[20:03] <phenny> tadzik: "blame" (pl to en, translate.google.com)

[20:03] <masak> phenny: "skylla"?

[20:03] <phenny> masak: "blame" (sv to en, translate.google.com)

[20:03] <tadzik> also, "to wine" (verb)

[20:03] <masak> tadzik: heh :)

[20:03] *** leprevost joined
[20:03] <jnthn> ...whine? :)

[20:03] <masak> tadzik: looking at the verb, I can see why... :)

[20:03] <tadzik> that's after too much wine

[20:03] <jnthn> or...actually too wine? :)

[20:03] <jnthn> :)

[20:03] <jnthn> *to

[20:04] <tadzik> yes, too wine :)

[20:04] <masak> in vino whinitas.

[20:05] <tadzik> seen mberends

[20:05] <aloha> mberends was last seen in #perl6 1 hours 33 mins ago joining the channel.

[20:05] <tadzik> I'm curious about this NLPW talk of his

[20:05] <jnthn> Me too. :)

[20:05] * masak three

[20:05] <tadzik> especially since no talks are accepted yet :)

[20:05] <jnthn> Then I know what not to submit :)

[20:06] <masak> ooh, is there a deadline?

[20:06] <jnthn> Don't remember seeing one :)

[20:06] <jnthn> But in reality, probably. :)

[20:06] <jnthn> It's all short talks.

[20:06] <jnthn> 15 mins or 5 mins.

[20:07] <tadzik> 13 submitted, 0 accepted. That'll be a BOARING party :)

[20:07] * jnthn will submit some

[20:07] <jnthn> :)

[20:07] <masak> URL?

[20:08] <tadzik> http://www.perlworkshop.nl/nlpw2011/talks

[20:08] <masak> dziekuje

[20:08] <tadzik> proszę

[20:08] <tadzik> :]

[20:09] <masak> [:

[20:10] <tadzik> Tack -- is it spelled as if it was english?

[20:10] <jnthn> Yes

[20:10] <tadzik> phenny: "Cam ôn"?

[20:10] <phenny> tadzik: "Thank you" (vi to en, translate.google.com)

[20:10] <masak> tadzik: yes, but the 'a' is darker.

[20:11] <tadzik> oh, Cam on!

[20:11] <tadzik> masak: darker?

[20:11] <masak> tadzik: more like 'ah' than 'ei'.

[20:11] <jnthn> Yeah, 'cus they don't have much sun in Sweden

[20:11] <masak> that's why.

[20:11] <tadzik> tack as in tackle?

[20:11] <jnthn> Yeah

[20:12] <tadzik> it's like a polish "yes"

[20:12] <jnthn> *nod*

[20:12] <jnthn> Spelt "tak"?

[20:12] <masak> even the 'a' in 'tackle' is too open/light.

[20:13] <tadzik> jnthn: tak :)

[20:13] <masak> the 'aaaa' you make at the dentist when he tells you to open wide. that's the vowel we have in Sweden.

[20:13] <jnthn> masak: I suspect if we're approximating based on English words, it's as close as we'll get. :)

[20:13] <jnthn> masak: But I agree it's actually a bit different. :)

[20:13] <donri> Are you all Perl fivers as well?

[20:13] <masak> the Swedish 'a' is actually fairly close to the Hungarian 'a'. but not identical.

[20:14] <masak> donri: I'm more of a fiver wannabe than a real fiver. many here have at least some experience with Perl 5. some, a lot.

[20:14] <jnthn> tadzik: Does it mean "so" in Polish also?

[20:14] <masak> jnthn: I believe so.

[20:14] <tadzik> jnthn: what kind of so? Like „so, whatcha doing tonight”?

[20:14] <masak> jnthn: kak <-> tak?

[20:14] <tadzik> that'd be "więc"

[20:14] *** fith joined
[20:14] *** TiMBuS joined
[20:14] *** jasonmay joined
[20:14] <masak> oh.

[20:15] * masak newie :)

[20:16] <masak> wow, that works both in Polish and English. kinda.

[20:17] *** kjeldahl left
[20:18] <jnthn> masak: Wait, kak as in? Russian "как"?

[20:18] <masak> jnthn: yes, I thought that was the parallel you were asking about.

[20:18] <jnthn> masak: No, was thinking of "tak" in Slovak.

[20:18] <masak> oh, ok.

[20:19] <jnthn> ru как => sk ako, generally, I think.

[20:19] <donri> masak: I guess I'm wondering how uncommon serious interest in Perl 6 is among people with little interest in 5

[20:19] <donri> Like myself

[20:20] <Tene> donri: certainly not unusual.

[20:20] <perlpilot> donri: why do you have little interest in Perl 5 yet some interest in Perl 6?

[20:20] <masak> donri: difficult to say. I think it's easier for Perl 5 people to appreciate the potential of Perl 6. but that doesn't mean that there are exclusively fivers here either.

[20:21] <masak> donri: speaking for myself, my interest in Perl 5 has been growing steadily along with my involvement in Perl 6.

[20:21] <donri> perlpilot: Not sure I can give you a good answer, to me, Perl 5 feels "wrong" and 6 "right"

[20:22] <donri> Elegance or something

[20:22] <perlpilot> masak: do you make heavy use of the 6isms that have made it into perl 5?

[20:22] <masak> perlpilot: not really, no.

[20:22] <masak> perlpilot: I use 'say'.

[20:22] <masak> perlpilot: I don't lean heavily on 'given'/'when', smartmatching, or // in Perl 5.

[20:22] <perlpilot> interesting

[20:22] <donri> Not to bash Perl 5, it's not crap just not something that interests me much

[20:23] <Tene> perlpilot: we make heavy use of 6isms in new Perl 5 code produced at my office.

[20:23] <Tene> Along with MooseX::Declare, etc.

[20:23] <masak> donri: I use Perl 5 when I need a combination of ease, stability, and speed that Perl 6 doesn't provide yet.

[20:23] *** coldhead joined
[20:24] <perlpilot> masak: I didn't use the 6isms much (except say) until recently. Now I find that I think to use them more in my Perl 5 code all the time 

[20:24] <tadzik> masak: have you seen perl5i?

[20:24] <masak> oh, I use Moose. not Moose::Declare so much.

[20:24] <masak> tadzik: yes. not a lot, but I've seen it.

[20:24] <masak> tadzik: I'd like to do something like that myself one day, but direct the codebase more towards Perl 6.

[20:24] <perlpilot> (Tene's office)++  :)

[20:25] <donri> Python is my primary language at the moment

[20:25] <tadzik> I've recently written some baby python :)

[20:25] <masak> donri: interested question? how does Perl 6 "feel" as compared to Python, from your perspective?

[20:26] <masak> s/\?/:/

[20:26] <perlpilot> donri: python is nice.  I tend to get the feeling that I *have* to type too much sometimes though.

[20:26] <donri> More "Pythonic" than Perl 5 if that's what you mean

[20:26] <perlpilot> Not as much as when I try coding in Java thuogh

[20:26] <perlpilot> er, though

[20:26] <donri> Python is somewhat a "boring" language, which at times is its strength

[20:26] <donri> but it's not as theoretically interesting as Perl 6

[20:27] <masak> donri: I think I know what you mean.

[20:27] <Tene> perlpilot: We're hiring.

[20:27] <tadzik> I don't really like the "exceptions everywhere" approach. Like, no such key in hash? Exception. And so on

[20:28] <donri> perlpilot: entering code is easy, reading code less so, and code size and readability doesn't always or fully correlate

[20:28] *** kjeldahl joined
[20:29] <donri> But so far the Perl 6 sugars are sensible and readable to me

[20:29] <perlpilot>  donri readability and understandability don't correlate all the time either :)

[20:29] <donri> tadzik: dict.get()

[20:30] <donri> lets you fallback on a default too

[20:30] <tadzik> donri: what'd be: $foo = $bar<baz> // "no data";?

[20:30] <donri> don't know what that does

[20:30] *** fhelmberger left
[20:30] <masak> donri: // is the 'default' operator.

[20:31] <masak> donri: if the lhs is undefined, it picks the rhs.

[20:31] <donri> foo = bar.get('baz', 'no data')

[20:31] <tadzik> not bad

[20:31] * masak prefers the Perl 6 solution, which solves a broader problem

[20:31] <tadzik> https://github.com/tadzik/mpdclient/blob/master/contents/code/main.py -- my stupid python. Everywhere I felt like "there must be a Python way for this"

[20:32] <perlpilot> yikes

[20:32] <donri> I fear that all these undefineds might be a pain for debugging etc

[20:32] <donri> but use fatal; or something turns them into exceptions?

[20:32] <masak> something like that.

[20:33] <masak> donri: generally, Perl 6 is a bit stricter already than Perl 5.

[20:33] <masak> Perl 5 is famously laissez-faire.

[20:34] <donri> dict.get() defaults to None for missing keys BTW

[20:34] <donri> so you could do it more perlesque: foo = bar.get('baz') or 'no data'

[20:35] <masak> nice.

[20:35] <masak> rakudo: my %h; say %h<not_there>.WHAT

[20:35] <p6eval> rakudo 6f9116: OUTPUT«Any()␤»

[20:35] <masak> I'm guessing that 'Any' value is the value type of the hash.

[20:35] <donri> What's an Any() and why not undefined?

[20:35] <masak> Any is undefined.

[20:36] <masak> in Perl 6 'undefined' is a property on objects, not an object in itself.

[20:36] *** molecules joined
[20:36] <masak> bacek_at_work: nah, we're back at failing on Test.pm now.

[20:36] <donri> how meta

[20:36] <masak> bacek_at_work: want me to submit a Parrotbug?

[20:37] <masak> donri: it was one of those things that just evolved out of other concerns.

[20:37] *** MayDaniel_ left
[20:37] <masak> donri: in a typed system with type objects as in Perl 6, there's no real room for an 'undefined' object. just use the type objects.

[20:37] <masak> rakudo: class Dog {}; say Dog.defined; my Dog $d .= new; say $d.defined

[20:37] <p6eval> rakudo 6f9116: OUTPUT«Bool::False␤Bool::True␤»

[20:38] * perlpilot wonders why Guido didn't make dict[key] work like dict.get(key) WRT defaulting to None

[20:39] <perlpilot> donri: Is monkey patching possible in python (I haven't programmed in it since the 1.5 days or so)?  If it is possible, does it happen with wild abandon as in ruby-land?

[20:40] <masak> I think even the Rubyists are coming around to the perils of monkey patching nowadays.

[20:40] <perlpilot> masak: yes ... slowly.

[20:41] <perlpilot> It's hard to correct cultural mistakes

[20:41] <masak> *nod*

[20:41] <tadzik> heh. Now compiling PyQt.  -Dprotected=public looks funny :)

[20:42] <molecules> rakudo: my $string=''; my $fh = open \$string;

[20:42] <p6eval> rakudo 6f9116: OUTPUT«Operation not permitted in safe mode␤  in 'Safe::forbidden' at line 2:/tmp/EjBG8xSS2S␤  in main program body at line 22:/tmp/EjBG8xSS2S␤»

[20:42] <donri> perlpilot: possible but not with builtins, and mostly avoided. you can make your own dict type though. also there's defaultdict which returns the result of a callable for missing keys

[20:42] <perlpilot> molecules: I guess you want to know if you can do IO on scalars like in Perl 5 ?

[20:42] <molecules> Yes.

[20:42] <perlpilot> molecules: Doubtful. 

[20:43] <Tene> I'm very pleased by the look of ruby's new lexically-scoped class augmentation.

[20:43] <molecules> Doubtful ever or simply doubtful now?

[20:43] <perlpilot> molecules: just now.  IO still needs some work.

[20:43] <molecules> perlpilot: Thanks!

[20:43] <Tene> It whould be fairly easy to implement as a lexical augmentation to the dispatcher in Perl 6, but I'd still like to see something like that specced for Perl 6.

[20:44] <masak> I'd love to see overridable dispatchers.

[20:46] <tadzik> at this moment, jnthn should jump out of the box and say "fixed in 6model!"

[20:46] <perlpilot> heh

[20:46] <donri> how complete is pynie?

[20:46] <masak> good question.

[20:46] <perlpilot> donri: that's a parrot project.  Nothing to do with Perl 6

[20:46] <tadzik> incomplete. Compiles, doesn't work

[20:46] <tadzik> donri: poke lucian on #parrot@irc.perl.org

[20:46] <donri> perlpilot: other than parrot having much to do with perl 6? ;)

[20:47] <jnthn> 6MODEL WILL EVEN BRING WORLD PEACE!!!11!!

[20:47] <perlpilot> jnthn++

[20:47] <jnthn> er, it actually is a big step towards custom dispatchers. :)

[20:47] <masak> \o/

[20:47] <jnthn> Especially given that it doesn't have any notion of a non-custom dispatcher... :)

[20:48] <masak> screw world peace -- I want to override my default dispatcher.

[20:48] <donri> 6model?

[20:48] <masak> donri: the Next Big Thing around here.

[20:48] <jnthn> BEGIN { %*HOW<class> := MyMetaClassWithCustomDispatcher; } # there, done

[20:48] <masak> well, except for Niecza.

[20:49] <masak> jnthn: neat!

[20:49] <tadzik> yeah, this is the reason everyone sits doing nothing, for "6model will fix everything anyway" :)

[20:49] <donri> what's it for/do?

[20:49] <tadzik> donri: it's the new metamodel for Rakudo, and possibly anything else

[20:49] <masak> jnthn: what about class hierarchies with heterogenous metaclasses/dispatchers?

[20:49] <jnthn> masak: It's close anyway. :) But I guess we'll also want a non-escape-hatch way.

[20:49] <masak> yeah.

[20:50] <jnthn> masak: Normal subclassing and composition rules apply.

[20:50] <Tene> jnthn: could I insert my own method dispatcher for a given lexical block?

[20:50] <jnthn> If your subclass of another meta-class implements its own find_method and publish_method_cache, then you just win by inheritance.

[20:50] <jnthn> Tene: Erm.

[20:51] <jnthn> Tene: That's...less trivial.

[20:51] *** rdesfo joined
[20:52] <Tene> jnthn: When I asked TimToady about lexically-scoped class augmentation, his answer was that libraries to provide that should be implemented by users through lexically-scoped wrapping of the method dispatcher.

[20:52] <Tene> That's the context I'm asking about, at least.

[20:53] <jnthn> Tene: The main issue is that wrappers aren't lexically scoped...at least, .wrap ones ain't.

[20:53] <Tene> I don't know that he actually said "wrap"

[20:53] <jnthn> Ah, OK

[20:54] <Tene> He just indicated that a lexical block should be able to have a different method dispatcher, and that that dispatcher certainly could redispatch to the outer dispatcher if it wanted to.

[20:55] <Tene> a more-trivial example than augmentation would be a dispatcher that logged all method calls, for example.

[20:55] <Tene> Not that that would be very useful, just that would be sufficient to implement the other.

[20:56] <jnthn> Thinking about it, I suspect this kind of thing is much easier at a macro-ish level than a runtime-ish level.

[20:56] <dalek> nqp-rx: 3090e41 | moritz++ | src/NQP/Grammar.pm:

[20:56] <dalek> nqp-rx: allow <*> as proto regex body

[20:56] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/3090e41170

[20:57] <Tene> Could be.

[21:05] <masak> bacek, bacek_at_work: https://gist.github.com/830206

[21:06] <bacek_at_work> masak, sigh... Is it bleeding edge gen_gc2?

[21:07] <bacek_at_work> masak, (hm. no. You can't have this assert if you didn't configure it with -DPARROT_GC_VALIDATE)

[21:07] *** plobsing joined
[21:07] <jnthn> Parrot_Perl6MultiSub_mark is near the top of the bt

[21:07] <bacek_at_work> masak, what git describe --tags says?

[21:07] <masak> bacek_at_work: I pulled the latest gen_gc2 and built Parrot, then Rakudo.

[21:08] <bacek_at_work> mmm...

[21:08] <masak> RELEASE_3_0_0-985-ga133c63

[21:08] <masak> two commits behind, apparently.

[21:09] <bacek_at_work> Unlikely that these 2 functions are invoked from rakudo.

[21:09] <tadzik> Rakudo builds longer than bacek needs to commit :)

[21:10] *** plainhao left
[21:10] *** jferrero joined
[21:10] <bacek_at_work> masak, ah-ha...

[21:10] <masak> ah-ha?

[21:11] <bacek_at_work> no. I've got write barrier in this place. False alarm

[21:12] <bacek_at_work> Did moritz_ committed my latest patch?

[21:12] *** yarp joined
[21:13] <moritz_> bacek_at_work: yes, as commit 76cd24a19f533346c25f8ff9d0c52f28cf02fe98

[21:13] <bacek_at_work> moritz_, yes, found it.

[21:14] <moritz_> at least that's the latest I know of

[21:14] <bacek_at_work> moritz_, that's the one

[21:14] <jdhore> yahooooo, A Hot Fuzz fan, eh?

[21:21] <bacek_at_work> masak, is it debug or optimized build?

[21:22] <bacek_at_work> masak, nm. I did reproduce it.

[21:22] <masak> debug.

[21:22] <masak> I don't do optimized builds.

[21:23] <tadzik> masak is waiting for Parrot to be fast w/o cheating :)

[21:26] <masak> not sure I think --optimize is necessarily cheating.

[21:26] <masak> but I value lack of segfaults more than I value speed.

[21:26] <tadzik> nah, just joking around

[21:27] *** icwiener left
[21:27] <masak> yes, I understand. :)

[21:27] <tadzik> ;)

[21:32] *** kjeldahl left
[21:34] *** jaldhar left
[21:34] *** jaldhar joined
[21:38] *** molecules left
[21:38] *** yarp left
[21:39] *** pigdude joined
[21:42] <mfollett> What would cause IO::Socket::INET to fail with "IO::Socket::INET Couldn't create socket."?  I tried to open a socket with $socket.open('127.0.0.1', 8000); with netcat listening on 8000 and I keep getting that failure.  For sanity I tested and can connect to 127.0.0.1:80 with telnet.

[21:42] <mfollett> Using January's Rakudo * on OS X

[21:44] <mfollett> I'm guessing it might have something to do with this PIR "sock = root_new ['parrot';'Socket']", but I'm not familiar enough to know what's going on.

[21:55] *** mfollett left
[21:56] <bacek_at_work> masak, can you try again?

[21:56] <bacek_at_work> masak, bleeding edge of course :)

[21:56] <perlpilot> blah

[21:57] * perlpilot really wishes mfollett hadn't just left :(

[21:57] <jnthn> heh, I was just trying to find out where the error came from

[21:57] <jnthn> Not from INET.pm itself, it seems

[21:57] *** donaldh joined
[21:58] <masak> bacek_at_work: ok.

[22:00] <dukeleto> questions about Parrot sockets?

[22:00] * dukeleto hacked on that stuff recently

[22:01] *** mfollett joined
[22:02] *** mrg_ joined
[22:02] <mrg_> hi

[22:02] *** mrg_ is now known as zenog

[22:03] *** stkowski joined
[22:03] <perlpilot> mfollett: See https://github.com/rakudo/rakudo/commit/ef3f3fa12b62bedd840cece030c6b531984fdc5d

[22:03] <dalek> rakudo: ef3f3fa | perlpilot++ | src/core/IO/Socket/INET.pm:

[22:03] <dalek> rakudo: Set the default protocol family to be INET

[22:03] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/ef3f3fa12b

[22:04] <perlpilot> dalek: you're too slow!

[22:08] *** rdesfo_ joined
[22:10] *** rdesfo left
[22:14] *** woosley joined
[22:19] *** saaki joined
[22:20] *** shi left
[22:21] <zenog> colomon: I now have a PDL port of my IO and computation intensive Perl 6 benchmark: about 2 minutes vs. 1 hour

[22:22] *** shi joined
[22:22] <jnthn> zenog: Willing to share the Perl 6 code (if you didn't already)?

[22:22] <jnthn> zenog: I'm working on a bunch of stuff that may make PDL-ish situations a bunch more optimal.

[22:23] *** mfollett left
[22:23] <zenog> jnthn: I have an update of the code (may still not be optimal)

[22:23] <zenog> jnthn: Shall I just put it on nopaste, or do you want to have it somewhere in a repository?

[22:25] <jnthn> zenog: nopaste is fine

[22:25] <zenog> jnthn: What I forgot to say: The ~1 hour was only for reading in the data, no computation yet.

[22:25] <zenog> jnthn: So there is room for improvement.

[22:26] <jnthn> zenog: Oh.

[22:26] <jnthn> zenog: And the 2 minutes included IO and computation?

[22:26] <zenog> jnthn: Yes. In C#/Java the same stuff takes about 5 sec.

[22:26] <zenog> jnthn: Just for perspective, of course I do not expect such a performance from a dynamic language.

[22:27] <jnthn> zenog: Yeah, but Rakudo really needs to do better. :)

[22:27] <zenog> jnthn: Perl 6 version here http://nopaste.info/4acc6ff2ad.html

[22:28] <zenog> jnthn: Perl 5/PDL version here http://nopaste.info/b51fcdeae2.html

[22:28] <zenog> The Perl 5 version converges, which is nice.

[22:29] <zenog> The Perl 6 version is still buggy when it comes to the result of the computation. I am not sure whether it is a Rakudo bug, some strange numerical effects, or my bad understanding of Perl 6 that cause the bugs ;-)

[22:30] *** pigdude left
[22:30] <zenog> But you can use it for IO benchmarking anyway, no matter whether the computation is correct ;-)

[22:31] <jnthn> OK :)

[22:32] *** perlpilot left
[22:33] <zenog> I started with this stuff during FOSDEM, just out of curiosity, then annoyed some people on the channel with it who showed me some obvious mistakes, e.g. colomon++; then chromatic's blog post made me come back to the channel: http://www.modernperlbooks.com/mt/2011/02/want-better-perl-6-sooner-write-rakudo-benchmarks.html

[22:34] *** mrg_ joined
[22:35] *** mrg_ is now known as zenog_

[22:37] <masak> chromatic++

[22:37] *** zenog left
[22:37] *** woosley left
[22:41] *** TH14 joined
[22:42] <masak> TH14: welcome back.

[22:42] <TH14> hey thanks for that

[22:44] <masak> you're welcome. at #perl6, we value our customers, and hope that you will have a pleasant stay.

[22:44] <masak> if there's anything you're wondering about, please don't hesitate to contact our corteous and professional staff.

[22:44] *** TH14 left
[22:44] <masak> ...or not.

[22:45] <Tene> masak: you didn't mention in here if your test against parrot branch after bacek updates was successful or not.

[22:45] <sbp> he was disappointed that you misspelled courteous

[22:45] <masak> Tene: still building gen/core

[22:45] <Tene> o.O

[22:45] <masak> sbp: I thought it looked wonky.

[22:45] <Tene> slooooooow

[22:45] <masak> Tene: my VM doesn't have very much RAM.

[22:46] <Tene> it's been almost an hour!

[22:46] <Tene> :(

[22:46] <masak> yeah, I haven't been too quick about it, either.

[22:46] <jnthn> Isn't this a build that's augmented with a bunch of debug/trace stuff? 

[22:46] <donaldh> Tene: rakudo build with gms_gc ?

[22:46] <Tene> donaldh: that's what he's doing, yeah

[22:47] <donaldh> I have a failed build after bacek's last commit

[22:47] <donaldh> took a while mind.

[22:47] <Tene> donaldh: reported to bacek?

[22:47] <donaldh> only just finished

[22:47] <donaldh> How does bacek like his reports?

[22:47] *** plobsing left
[22:48] <jnthn> Well done, with a side of fries

[22:48] <Tene> donaldh: dunno; I've never noticed him mentioning a preference

[22:48] <Tene> donaldh: you could certainly start with posting the output in a pastebin and sending him a message here or in #parrot

[22:48] <donaldh> :D

[22:48] <masak> I think both gists and parrot/trac tickets work.

[22:48] <Tene> donaldh: email probably wouldn't be bad either.

[22:48] <jnthn> afk for a bit

[22:48] <masak> bonus points for doing gdb on the thing that blows up.

[22:49] <donaldh> It's a failed assertion !PObj_on_free_list_TEST

[22:50] <donaldh> So gdb won't be much help :-/

[22:50] <masak> oh, ok :/

[22:50] *** zenog_ left
[22:50] <donaldh> I imagine the damage is done some time earlier.

[22:51] *** starcoder left
[22:56] *** starcoder joined
[22:58] <masak> rakudo: use Test; plan 1; eval_lives_ok { 1 }

[22:58] <p6eval> rakudo 6f9116: OUTPUT«1..1␤get_attr_str() not implemented in class 'Sub'␤  in main program body at line 7461␤»

[22:58] <masak> now confirmed locally, too.

[22:58] * masak submits rakudobug

[22:58] <masak> bacek_at_work: things work much better now. closing parrot trac ticket.

[23:01] *** alester left
[23:05] <bacek_at_work> masak, good. I still have feelings that there is some yaks to shave.

[23:05] <masak> bacek_at_work: you're not alone in that feeling :P

[23:05] <masak> bacek_at_work: running spectests now to see if something falls out.

[23:07] <bacek_at_work> masak, S02-builtin_data_types/instants-and-durations.t can fail due floating point rounding.

[23:08] <bacek_at_work> masak, same as with parrot master

[23:08] <bacek_at_work> masak, can you also try configure parrot with --optimize --ccflags="-DPARROT_GC_VALIDATE"? It can reveal more yaks.

[23:09] *** stkowski left
[23:09] <masak> bacek_at_work: may I ask to postpone this task until tomorrow? building takes some time here, and it is getting near my bedtime. :)

[23:10] *** shi left
[23:10] <bacek_at_work> masak, of course :)

[23:10] <masak> I shan't forget you :)

[23:15] *** jasonmay left
[23:18] *** ponpon left
[23:20] *** ponbiki joined
[23:20] *** plobsing joined
[23:22] *** whiteknight joined
[23:24] *** jasonmay joined
[23:30] *** envi left
[23:34] *** pmurias joined
[23:34] <pmurias> sorear: hi

[23:36] <dalek> niecza: 1d616cd | pmurias++ | cl-backend/ (2 files):

[23:36] <dalek> niecza: [cl-backend] foreign stash entries are for now filled in with dummy

[23:36] <dalek> niecza: symbols

[23:36] <dalek> niecza: review: https://github.com/sorear/niecza/commit/1d616cd8f6

[23:36] <dalek> niecza: e8b62fe | pmurias++ | / (2 files):

[23:36] <dalek> niecza: [cl-backend] support sub foo($) {...}

[23:36] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e8b62fe937

[23:36] <dalek> niecza: 58cb2b5 | pmurias++ | / (2 files):

[23:36] <dalek> niecza: [cl-backend] implemented indirect method calls - $foo."$bar"(...) works

[23:36] <dalek> niecza: review: https://github.com/sorear/niecza/commit/58cb2b5c83

[23:40] *** chitragupt left
[23:41] *** chitragupt joined
[23:44] *** pmurias left
[23:52] <colomon> phenny: tell zenog I certainly wasn't annoyed with his program.  I just ran out of tuits to look at the longer version....

[23:52] <phenny> colomon: I'll pass that on when zenog is around.

[23:54] *** mfollett joined
