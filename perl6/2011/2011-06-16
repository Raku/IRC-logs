[00:02] *** molaf_ joined
[00:02] *** daniel-s joined
[00:02] *** mberends joined
[00:02] *** gbacon_ joined
[00:02] *** y3llow joined
[00:02] *** ascent_ joined
[00:02] *** avar joined
[00:02] *** Holy_Cow joined
[00:02] *** Tene joined
[00:02] *** stepnem joined
[00:02] *** whiteknight joined
[00:02] *** Tedd1 joined
[00:02] *** dju joined
[00:02] *** Patterner joined
[00:02] *** cooper joined
[00:02] *** uniejo joined
[00:02] *** buubot_backup joined
[00:02] *** rafl joined
[00:02] *** cognominal_ joined
[00:02] *** spq1 joined
[00:02] *** jdv79 joined
[00:02] *** aloha joined
[00:02] *** mtk joined
[00:02] *** Trashlord joined
[00:02] *** estrabd joined
[00:02] *** araujo joined
[00:02] *** Woodi joined
[00:02] *** silug joined
[00:02] *** sftp joined
[00:02] *** pothos joined
[00:02] *** PZt joined
[00:02] *** lichtkind joined
[00:02] *** icwiener joined
[00:02] *** TiMBuS joined
[00:02] *** jedai joined
[00:02] *** ingy joined
[00:02] *** scottp joined
[00:02] *** cotto joined
[00:02] *** Su-Shee joined
[00:02] *** Eevee joined
[00:02] *** [particle] joined
[00:02] *** takadonet joined
[00:02] *** clkao joined
[00:02] *** s1n joined
[00:02] *** noganex joined
[00:02] *** betterworld joined
[00:02] *** jlaire joined
[00:02] *** _sri joined
[00:02] *** pnu joined
[00:02] *** mikemol joined
[00:02] *** _ilbot joined
[00:02] *** ruoso joined
[00:02] *** amkrankruleuen joined
[00:02] *** skangas joined
[00:02] *** colomon joined
[00:02] *** gabiruh joined
[00:02] *** Guest87668 joined
[00:02] *** tomize joined
[00:02] *** breinbaas joined
[00:02] *** meteorjay joined
[00:02] *** kfo joined
[00:02] *** xinming joined
[00:02] *** PacoLinux joined
[00:02] *** HarryS joined
[00:02] *** jerome joined
[00:02] *** benabik joined
[00:02] *** f00li5h joined
[00:02] *** pmichaud joined
[00:02] *** c1sung joined
[00:02] *** starcoder joined
[00:02] *** kcwu joined
[00:02] *** kst joined
[00:02] *** krunen joined
[00:02] *** spinclad joined
[00:02] *** bs338 joined
[00:02] *** revdiablo joined
[00:02] *** rhr joined
[00:02] *** mattp_ joined
[00:02] *** gfldex joined
[00:02] *** ggoebel joined
[00:02] *** diakopter joined
[00:02] *** kolibrie_ joined
[00:02] *** felipe joined
[00:02] *** awwaiid joined
[00:02] *** tomaw joined
[00:02] *** sjohnson joined
[00:02] *** moritz joined
[00:02] *** yath joined
[00:02] *** Katibe joined
[00:02] *** drbean joined
[00:02] *** apejens joined
[00:02] *** PerlJam joined
[00:02] *** szabgab joined
[00:02] *** zamolxes joined
[00:02] *** cotto_work joined
[00:02] *** barika joined
[00:02] *** starcoder2 joined
[00:02] *** Util joined
[00:02] *** BinGOs joined
[00:02] *** sorear joined
[00:02] *** pyrimidine joined
[00:02] *** miso2217 joined
[00:02] *** cxreg joined
[00:02] *** hatseflats joined
[00:02] *** shachaf joined
[00:02] *** risou joined
[00:02] *** tty234 joined
[00:02] *** zb joined
[00:02] *** frodwith joined
[00:02] *** broquaint joined
[00:02] *** renormalist joined
[00:02] *** sjn joined
[00:02] *** estrai_ joined
[00:02] *** baest joined
[00:02] *** nebuchadnezzar joined
[00:02] *** Woody2143 joined
[00:02] *** cookys joined
[00:02] *** slavik joined
[00:02] *** Krunch joined
[00:02] *** Pathin joined
[00:02] *** hillu joined
[00:02] *** Bucciarati joined
[00:02] *** felher joined
[00:02] *** prammer joined
[00:02] *** mdxi joined
[00:02] *** wolverian joined
[00:02] *** krakan joined
[00:02] *** llabthgie joined
[00:02] *** athomason joined
[00:02] *** JodaZ joined
[00:02] *** mux joined
[00:02] *** nsh| joined
[00:02] *** Raynes joined
[00:02] *** jdhore1 joined
[00:02] *** snarkyboojum joined
[00:02] *** eternaleye joined
[00:02] *** ashleydev joined
[00:02] *** LoRe joined
[00:02] *** beppu joined
[00:02] *** jesk joined
[00:02] *** cschimm1_ joined
[00:02] *** robinsmidsrod joined
[00:02] *** Yappoko__ joined
[00:02] *** foomator joined
[00:02] *** Grrrr joined
[00:02] *** nrr joined
[00:02] *** Helios joined
[00:02] *** ribasushi joined
[00:02] *** jql joined
[00:02] *** bbkr_ joined
[00:02] *** jasonmay joined
[00:02] *** geekosaur joined
[00:02] *** pochi joined
[00:02] *** yves joined
[00:02] *** jnthn joined
[00:02] *** simcop2387 joined
[00:02] *** jtpalmer joined
[00:02] *** domidumont joined
[00:02] *** sivoais joined
[00:02] *** REPLeffect joined
[00:02] *** frettled joined
[00:02] *** lue joined
[00:02] *** ChrisDennis joined
[00:02] *** alyx joined
[00:02] *** _patch joined
[00:02] *** Vlavv joined
[00:02] *** TimToady joined
[00:02] *** Maddingue joined
[00:02] *** lestrrat joined
[00:02] *** tylercur1is joined
[00:02] *** larks joined
[00:02] *** szbalint joined
[00:02] *** sunnavy joined
[00:02] *** tadzik joined
[00:02] *** takesako joined
[00:02] *** mathw joined
[00:02] *** jjore joined
[00:02] *** flussence joined
[00:02] *** Lorn joined
[00:02] *** wooden joined
[00:02] *** arnsholt joined
[00:02] *** sbp joined
[00:02] *** huf joined
[00:02] *** slavik1 joined
[00:02] *** yahooooo joined
[00:02] *** Gothmog_ joined
[00:02] *** literal joined
[00:02] *** perplexa joined
[00:02] *** chitragupt left
[00:02] *** ChanServ sets mode: +v p6eval

[00:02] *** dalek left
[00:03] *** mtk left
[00:03] *** dalek joined
[00:04] *** hugme left
[00:04] *** ChanServ sets mode: +v dalek

[00:04] *** daemon left
[00:04] *** chitragupt joined
[00:05] *** p6eval left
[00:08] *** daemon joined
[00:11] *** buubot_backup left
[00:12] *** buubot_backup joined
[00:15] *** p6eval joined
[00:15] *** ChanServ sets mode: +v p6eval

[00:22] <lichtkind> soroar allright :)

[00:25] <daniel-s> perl6: my $a = "hello"; $a.length.say;

[00:25] <p6eval> pugs: OUTPUT«*** No such method in class Str: "&length"␤    at /tmp/ZOMkiW9LNz line 1, column 18-31␤»

[00:25] <p6eval> ..niecza v6-157-ga94e021: OUTPUT«Unhandled exception: Unable to resolve method length in class Str␤  at /tmp/TIQrTIxksV line 1 (MAIN mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1769 (CORE C837_ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1770 (CORE module-CORE @ 57) ␤

[00:25] <p6eval> .. at /home/p6eva…

[00:25] <sorear> lichtkind: #2?

[00:25] <p6eval> ..rakudo 248244: OUTPUT«Method 'length' not found for invocant of class 'Str'␤  in main program body at line 22:/tmp/xNznjFx8ng␤»

[00:25] <daniel-s> perl6: my $a = "hello"; $a.bytes.say;

[00:25] <p6eval> pugs, rakudo 248244: OUTPUT«5␤»

[00:25] <p6eval> ..niecza v6-157-ga94e021: OUTPUT«10␤»

[00:26] <daniel-s> perl6: my $a = "Селекторот"; $a.bytes.say;

[00:26] <p6eval> rakudo 248244, niecza v6-157-ga94e021: OUTPUT«20␤»

[00:26] <p6eval> ..pugs: OUTPUT«decodeUTF8': bad data: '\1057'␤decodeUTF8': bad data: '\1077'␤decodeUTF8': bad data: '\1083'␤decodeUTF8': bad data: '\1077'␤decodeUTF8': bad data: '\1082'␤decodeUTF8': bad data: '\1090'␤decodeUTF8': bad data: '\1086'␤decodeUTF8': bad data: '\1088'␤decodeUTF8': bad data: '\1086'␤dec…

[00:26] <daniel-s> what's the proper way to get the length of a string

[00:26] <sorear> .chars

[00:26] <daniel-s> because .bytes is not it

[00:26] <daniel-s> perl6: my $a = "Селекторот"; $a.chars.say;

[00:26] <p6eval> rakudo 248244, niecza v6-157-ga94e021: OUTPUT«10␤»

[00:26] <p6eval> ..pugs: OUTPUT«decodeUTF8': bad data: '\1057'␤decodeUTF8': bad data: '\1077'␤decodeUTF8': bad data: '\1083'␤decodeUTF8': bad data: '\1077'␤decodeUTF8': bad data: '\1082'␤decodeUTF8': bad data: '\1090'␤decodeUTF8': bad data: '\1086'␤decodeUTF8': bad data: '\1088'␤decodeUTF8': bad data: '\1086'␤dec…

[00:27] <daniel-s> pugs doesn't like UTF

[00:32] <sorear> probably something is getting double decoded

[00:32] *** tokuhirom joined
[00:34] *** icwiener left
[00:35] * sorear wonders what selektorot is

[00:37] *** daniel-s left
[00:39] <sorear> lichtkind: you said you had more questions

[00:46] *** renormalist left
[00:46] *** renormalist joined
[00:46] *** frodwith left
[00:47] *** PZt left
[00:47] *** baest_ joined
[00:47] *** cooper left
[00:47] *** slavik left
[00:48] *** frodwith joined
[00:48] *** sjn left
[00:48] *** sjn joined
[00:48] *** skangas left
[00:48] *** zb left
[00:48] <lichtkind> sorear: yes but time is approaching and had to fix here a small script, i would like to ask tommorow if you dont bother

[00:48] *** zb joined
[00:48] *** slavik joined
[00:48] *** baest left
[00:49] *** PZt joined
[00:51] *** envi_laptop joined
[00:51] *** skangas joined
[00:53] <sorear> lichtkind: no, it's fine by me.

[00:53] <lichtkind> :), good night

[00:53] <lichtkind> to all here

[00:53] <sorear> good night.

[00:55] *** lichtkind left
[01:01] *** noganex_ joined
[01:05] *** noganex left
[01:06] *** hudnix joined
[01:07] *** Holy_Cow left
[01:13] *** mberends left
[01:19] *** _jaldhar left
[01:19] *** _jaldhar joined
[01:28] *** saaki joined
[01:31] *** whiteknight left
[01:46] <dalek> niecza: 042c7c2 | sorear++ | src/ (3 files):

[01:46] <dalek> niecza: Improve detection of when names are actually used

[01:46] <dalek> niecza: review: https://github.com/sorear/niecza/commit/042c7c2a2d

[01:46] <sorear> \o/ make test passes without warnings now

[01:48] <colomon> \o/

[02:06] *** cooper joined
[02:15] *** dju_ joined
[02:15] *** dju_ left
[02:15] *** dju_ joined
[02:19] *** dju left
[02:21] *** cooper left
[02:25] *** cooper joined
[02:25] *** cooper left
[02:25] *** cooper joined
[02:36] <sorear> std: "{ my $x }"

[02:36] <p6eval> std 37a0cdd: OUTPUT«ok 00:01 119m␤»

[02:37] <dalek> niecza: c0de568 | sorear++ | / (3 files):

[02:37] <dalek> niecza: Refactor to enable more detection of unused variables

[02:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c0de5681c0

[02:44] *** araujo left
[02:46] *** Holy_Cow joined
[02:49] <dalek> niecza: f958d2d | sorear++ | src/niecza:

[02:49] <dalek> niecza: Allow catching unused variables in the mainline block

[02:49] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f958d2d734

[02:55] *** pjcj joined
[03:11] *** Holy_Cow left
[03:18] <dalek> niecza: e8230ae | sorear++ | src/ (3 files):

[03:18] <dalek> niecza: Fix declared but not used checking for subs

[03:18] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e8230aed06

[03:22] *** kai__ joined
[03:22] *** kai__ left
[03:23] *** am0c^ joined
[03:23] *** kai__ joined
[03:24] *** Su-Shee_ joined
[03:24] *** Su-Shee left
[03:27] *** kai__ left
[03:27] *** kai__ joined
[03:28] <kai__> whois clkao

[03:28] *** kai__ left
[03:29] <sorear> Su-Shee_: ping

[03:29] *** kai__ joined
[03:30] *** kai__ left
[03:33] *** KKK joined
[03:34] <KKK> Is there any detailed documentation for perl6 module?

[03:37] *** kevin_ joined
[03:37] *** kevin_ left
[03:40] *** KKK left
[03:43] *** zhang joined
[03:43] *** mberends joined
[03:48] *** am0c^ left
[03:49] <zhang> How could I get the length of a array?

[03:49] <sorear> use the array as a number

[03:49] <sorear> @array > 3

[03:50] <sorear> if you don't need to use the value right away, use unary +

[03:50] <sorear> my $len = +@array

[03:50] <zhang> sorear Thank you.

[03:52] <tylercur1is> Or @array.elems

[03:53] *** tylercur1is is now known as tylercurtis

[03:53] <zhang> This one looks more natural.

[03:54] *** zhang left
[03:55] *** am0c^ joined
[04:17] *** araujo joined
[04:17] *** araujo left
[04:17] *** araujo joined
[04:20] <sorear> o/ araujo

[04:20] <araujo> hi sorear 

[04:20] <sorear> oh wow, I didn't break any spectests

[04:21] <tadzik> good morning #perl6

[04:21] <sorear> hello tadzik 

[04:21] <tadzik> sorear: what's so bad about IRC?

[04:22] <sorear> where do I begin?

[04:22] <tadzik> I wonder

[04:22] <sorear> enforced tree topology makes redundant connections impossible

[04:22] <sorear> no way for clients to transparently resume after a connection drop

[04:22] <sorear> 510-character limit by truncation brain damage

[04:23] <sorear> lack of character encoding awareness

[04:23] <sorear> inadequate handling of presense data

[04:23] <sorear> no remote echo

[04:24] <sorear> "standard" that NO server follows anymore

[04:24] <sorear> ad-hoc extensions with no discovery protocol

[04:25] <sorear> basically, the protocol is set up at every level to make it impossible to write a better client than irssi

[04:25] <tadzik> I see your point

[04:25] <sorear> I learned most of this when I got fed up with irssi and tried to do exactly that

[04:25] <Eevee> time for a new protocol

[04:26] <tadzik> or for wider adoption

[04:26] *** am0c^ left
[04:28] *** wamba joined
[04:28] *** satyavvd joined
[04:32] *** thou joined
[04:36] *** kai__ joined
[04:38] *** am0c joined
[04:40] *** thou left
[04:41] *** skangas_ joined
[04:42] *** thou joined
[04:43] *** skangas left
[04:43] *** skangas_ is now known as skangas

[04:44] *** diakopter left
[04:44] *** rhr left
[04:44] *** mattp_ left
[04:45] *** diakopter joined
[04:45] *** kai__ left
[04:45] *** rhr joined
[04:46] *** mattp_ joined
[04:57] *** thou left
[04:58] <dalek> niecza: fa38b18 | sorear++ | / (4 files):

[04:58] <dalek> niecza: Fix explain_mystery/inlining misinteraction

[04:58] <dalek> niecza: review: https://github.com/sorear/niecza/commit/fa38b18d9c

[04:58] <dalek> niecza: 174da63 | sorear++ | src/Metamodel.pm6:

[04:58] <dalek> niecza: Re-add use before declaration suppressing nonusage warning

[04:58] <dalek> niecza: review: https://github.com/sorear/niecza/commit/174da63af1

[05:13] *** Bzek joined
[05:24] *** wamba left
[05:26] *** mberends left
[05:33] <TimToady> phenny: tell masak oh, and in the same paragraph, "short-curcuiting"

[05:34] <TimToady> ENOPHENNY

[05:34] <tadzik> /o\

[05:34] <tadzik> that explains the lack of breakfast

[05:35] <sorear> o/ TimToady 

[05:35] <TimToady> yo

[05:36] <TimToady> looks like yer making good progress on the symtab stuff

[05:36] <dalek> niecza: 3332d84 | sorear++ | src/niecza:

[05:36] <dalek> niecza: &foo adds to %*MYSTERY

[05:36] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3332d8467c

[05:37] <sorear> yeah, it's basically done except for the "defined but not used" warnings, which keep bouncing between oversensitive and undersensitive

[05:37] <TimToady> I gave niecza more visibility on the http://rosettacode.org/wiki/Category:Perl_6 page today

[05:39] <tadzik> examtime &

[05:40] <TimToady> have the appropriate amount of fun

[05:42] <sorear> it'

[05:42] <sorear> it's not regressed on spectests at this point (though I haven't reviewed warnings yet), also can compile itself again

[05:46] *** wamba joined
[05:48] <sorear> I'm thinking of changing source position in backtraces to a range of positions

[05:50] <sorear> if we have A(B), then there are 3 possible points for an exception - in eval(A), in eval(B), or in apply()

[05:50] *** jdv79 left
[05:50] <sorear> the other trick is that sometimes niecza doesn't exactly know when an exception came in, due to a bit of CLR brain damage

[05:51] <sorear> so sometimes niecza might know "either in eval(A) or eval(B), but definitely not in apply"

[05:51] <sorear> I wonder how best to present that to the user

[05:51] *** jdv79 joined
[05:52] <TimToady> better to be too general than to be wrong

[05:59] *** frodwith left
[06:00] *** wtw joined
[06:04] <moritz> good mroning

[06:05] <sorear> hi moritz

[06:05] <moritz> too early to write properly, it seems

[06:05] <TimToady> you should blame the german keyboard :)

[06:05] *** Bzek left
[06:05] <moritz> only a poor blameman works his tools

[06:05] <moritz> erm...

[06:05] *** Bzek joined
[06:06] <TimToady> that almost blames...er...works

[06:07] *** frodwith joined
[06:08] <sorear> hmm... no spectests for tighter/looser it seems

[06:08] * sorear writes up a battery of tests

[06:09] <TimToady> be sure to keep + and - terminals straight...oh wait, you said a battery of tests, not a test of batteries...

[06:09] <TimToady> permutational humor is humorously permutational, except when permutationally humurous or prohibited by law...

[06:11] <sorear> for many years while growing up I thought "voidware" was a noun-type legal concept

[06:11] <Su-Shee_> sorear: yes pong?

[06:11] <sorear> then I decided to ask what it was one day...

[06:11] *** Su-Shee_ is now known as Su-Shee

[06:11] *** koban joined
[06:11] <sorear> Su-Shee: you said you wanted an article.  What information?

[06:12] <TimToady> I kinda like "the", it's very definitive.

[06:12] <Su-Shee> sorear: what I asked yesterday. why did you choose c#, how does .net come into play (does it even?) what were your experiences etc

[06:21] <sorear> ah...

[06:23] <sorear> niecza: sub infix:<@a> { "a({@_})" }; say 1 @a 2

[06:23] <p6eval> niecza v6-163-g174da63: OUTPUT«===SORRY!===␤␤Placeholder variable @_ may not be used here because the surrounding block takes no signature at /tmp/NnXRyPsTvd line 1:␤------> sub infix:<@a> { "a({⏏@_})" }; say 1 @a 2␤␤Unhandled exception: Check failed␤␤  at

[06:23] <p6eval> ../home/p6eval/niecza…

[06:23] <sorear> ...eheheh

[06:24] <sorear> niecza: sub infix:<@a> { "a(@_.item())" }; say 1 @a 2

[06:24] <p6eval> niecza v6-163-g174da63: OUTPUT«a(1 2)␤»

[06:25] <moritz> niecza: sub infix:<@a> { "a(@_.item())" }; my @a = 3; say @a @a @a

[06:25] <p6eval> niecza v6-163-g174da63: OUTPUT«a(3 3)␤»

[06:26] <sorear> clearly, starry 2.0 is warranted

[06:27] <moritz> niecza: sub infix:<@a> { "a(@_.item())" }; my @a = 3; say (* @a *).(@a, @a)

[06:27] <p6eval> niecza v6-163-g174da63: OUTPUT«a(3 3)␤»

[06:29] *** fhelmberger joined
[06:29] <sorear> TimToady: given infix:<@a> is tighter<|>; infix:<@b> is looser<&>  what is the precedence relationship between @a and @b?

[06:30] *** woosley joined
[06:30] <sorear> TimToady: I'm planning to make tigher subst('=','>=') and looser subst('=','<=') so the original op will always trump refinement.  But you might've had a different plan

[06:33] *** s1n left
[06:33] *** Woodi left
[06:34] <sorear> std: sub foo is export('PIE') { }

[06:34] <p6eval> std 37a0cdd: OUTPUT«ok 00:01 119m␤»

[06:34] <sorear> std: sub foo is export ('PIE') { }

[06:34] <p6eval> std 37a0cdd: OUTPUT«ok 00:01 121m␤»

[06:34] *** s1n joined
[06:35] <sorear> std: sub foo is export ($fie) { }

[06:35] <p6eval> std 37a0cdd: OUTPUT«Potential difficulties:␤  $fie is declared but not used at /tmp/Pu9tXl0oUP line 1:␤------> sub foo is export (⏏$fie) { }␤ok 00:01 120m␤»

[06:35] <sorear> std: sub foo is export($fie) { }

[06:35] <p6eval> std 37a0cdd: OUTPUT«===SORRY!===␤Variable $fie is not predeclared at /tmp/U7ZjedO07M line 1:␤------> sub foo is export($fie⏏) { }␤Check failed␤FAILED 00:01 119m␤»

[06:35] <sorear> ok then

[06:41] *** Woodi joined
[06:42] *** birdwindupbird joined
[06:43] <TimToady> a tighter based on a looser op is always looser than the looser based on the tigher op; such precedence levels never overlap, so tighter/looser are only tiebreakers if the original precedence would be ambig

[06:43] *** Aridai joined
[06:44] <TimToady> if if there is a between of the original precedence levels, it's between all the looser-tighters and all the tighter-loosers, as it were

[06:44] <sorear> between exists?

[06:45] <sorear> or do you just mean like + relative to tighter(=) and looser(*) ?

[06:45] <TimToady> it was speculated at least

[06:45] <TimToady> tighters and loosers are only infinitesimally far away from their base prec

[06:46] <TimToady> though you can always fit more in

[06:46] <TimToady> if we have between, it has to interpolate though

[06:47] <TimToady> interpolating between loosers and tighters looks to be fraught with peril, though :)

[06:47] <sorear> pugs: sub infix:<@>($x,$y) { $x * $y }; say 2 + 4 @ 4; # 24

[06:47] <p6eval> pugs: OUTPUT«24␤»

[06:47] <TimToady> so feel free to ignore between for now

[06:48] <sorear> pugs: sub infix:<@>($x,$y) is tighter<+> { $x * $y }; say 2 + 4 @ 4; # does pugs support this? (18)

[06:48] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "<+>"␤    expecting trait or block␤    at /tmp/StONe8U86z line 1, column 32␤»

[06:48] <sorear> pugs: sub infix:<@>($x,$y) is tighter(&infix:<+>) { $x * $y }; say 2 + 4 @ 4; # does pugs support this? (18)

[06:48] <p6eval> pugs: OUTPUT«24␤»

[06:48] <sorear> pugs: sub infix:<@>($x,$y) is equiv(&infix:<*>) { $x * $y }; say 2 + 4 @ 4; # does pugs support this? (18)

[06:48] <p6eval> pugs: OUTPUT«24␤»

[06:48] <TimToady> I don't think pugs does anything with tighter/looser

[06:48] <sorear> doesn't look like it

[06:48] <sorear> so probably niecza will be the first implementation to do infinite precedence \o/

[06:49] <TimToady> well, till you run out of memory :)

[06:50] *** cooper left
[06:50] *** cooper joined
[06:50] <TimToady> similarly a tighter(looser(+)) is still looser than +

[06:50] *** sanc joined
[06:51] <sorear> I could make between work, using infinitesimal calculus, but it would be a pain to test and it would probably slow down EXPR

[06:51] <sorear> since it wouldn't be able to use lt/gt anymore

[06:52] <sorear> plus I'm not really sure "0.5 of the way between the arguments precedence" is really _useful_

[06:52] <TimToady> you'd just have to figure out some way to generate an intermediate string

[06:52] *** cooper left
[06:52] <TimToady> me either

[06:52] *** cooper joined
[06:52] <TimToady> so consider it conjectural

[06:52] <sorear> if we wanted to go that far I'd rather see topological sorting stuff

[06:53] <sorear> where you give X > Y constraints, and then the system decides if operators are <, >, =, incomparable by the transitive closure

[06:53] <TimToady> oh, I think we decided to replace 'is between' with 'is tighter is looser'

[06:53] <TimToady> and let the two traits fight it out :)

[06:53] <sorear> I think I proposed that system for Haskell' back when I was 10 or so...

[06:54] <sorear> hmm

[06:54] <TimToady> in any case, don't need new syntax for it

[06:54] <sorear> ah, Haskell' was 2010, not 2000

[06:55] <sorear> that's more consistent with my timeline... I didn't think I was playing with Haskell until after I was on Linux, which required post-13

[06:55] *** natureboy joined
[06:56] *** cooper left
[06:58] <TimToady> useful topological prec likely requires you to name both upper and lower bounds, which is problematic from an extensibility point of view

[06:58] *** kai__ joined
[06:59] <TimToady> the between stuff more more useful for bootstrapping your initial levels, I suspect

[06:59] <sorear> I was supposing just is Niecza::absprec<k= right> for that

[07:00] <TimToady> so you can get the moral equivalen of the a..z levels without going all Church numerally

[07:00] <sorear> between needs at least 2 prec levels to bootstrap

[07:00] <TimToady> yes, but you can see how you could bootstrap between a..z with a split-the-difference thing

[07:01] <sorear> and I'd rather have a system that allows users to see at a glance that is absprec<i= right> is related to constant $item_assignment_prec = 'i=';

[07:02] <TimToady> yes, I prefer to hardwire the initial levels

[07:02] <TimToady> it's an example of "Give them all the rope they want to be flexible, but then give them enough options that the don't want to extend it." :)

[07:02] <TimToady> *they

[07:03] <TimToady> that's easier with precedence levels than with operators, of course

[07:03] <TimToady> but we'll probabl never add factorial as a built-in op simply because it's such an amusing operator to add :)

[07:04] <sorear> "show me the use case"

[07:04] <sorear> factorial... well it's a great builtin operator in Maxima

[07:04] <sorear> but Perl 6 has no delusions of being a CAS

[07:05] <TimToady> we've got plenty of delusions already, thank you...

[07:05] *** frettled left
[07:06] *** frettled joined
[07:07] *** sanc_ joined
[07:08] *** natureboy left
[07:09] *** am0c left
[07:10] *** sanc left
[07:11] *** sanc_ is now known as sanc

[07:11] *** baest_ is now known as baest

[07:12] *** donri joined
[07:17] <dalek> niecza: dff3b35 | sorear++ | / (2 files):

[07:17] <dalek> niecza: 36 new tests for tighter/looser/equiv.  tighter+looser is not tested, as semantics uncertain

[07:17] <dalek> niecza: review: https://github.com/sorear/niecza/commit/dff3b35c11

[07:18] <sorear> (warning: not my most readable code)

[07:20] *** mj41 joined
[07:24] *** kai__ left
[07:28] * TimToady wanders off to see how interesting the inside of his eyelids will be tonight...

[07:29] <frettled> I'm sure they will be most fascinating.

[07:38] *** Aridai left
[07:52] <TiMBuS> https://twitter.com/#!/MICROSOFTWORD97

[07:52] <TiMBuS> ahahah

[07:57] <frettled> heh

[08:00] *** Holy_Cow joined
[08:07] <dalek> niecza: f6d94cc | sorear++ | / (2 files):

[08:07] <dalek> niecza: Fix stubbing qualified packages

[08:07] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f6d94ccca8

[08:08] * mathw snorts milk out of his nose

[08:09] *** agentzh joined
[08:22] * sorear -> sleep

[08:22] <dalek> niecza: 6cff873 | sorear++ | src/niecza:

[08:22] <dalek> niecza: 'subset' and 'enum' default to our scope

[08:22] <dalek> niecza: review: https://github.com/sorear/niecza/commit/6cff873d1c

[08:30] *** Woodi left
[08:31] *** Woodi joined
[08:53] *** nymacro joined
[08:58] *** tzhs joined
[08:58] *** daxim joined
[09:03] *** noganex_ is now known as noganex

[09:10] *** Mowah joined
[09:14] *** sanc_ joined
[09:17] *** sanc left
[09:22] <tadzik> o/

[09:27] *** MayDaniel joined
[09:32] *** daniel-s joined
[09:32] <jnthn> o/

[09:34] *** woosley left
[09:34] <moritz> o|

[09:45] *** _twitch joined
[09:47] *** alyx left
[09:48] *** alyx joined
[09:48] *** alyx is now known as Guest65000

[09:50] *** molaf_ left
[09:59] *** tzhs left
[10:05] *** wamba left
[10:08] *** Holy_Cow left
[10:11] *** wamba joined
[10:14] *** birdwindupbird left
[10:22] *** DBot1 joined
[10:22] <daniel-s> !wave

[10:22] <DBot1> o/

[10:22] <DBot1> o|

[10:22] <DBot1> o/

[10:22] *** DBot1 left
[10:25] *** phenny joined
[10:25] <moritz> daniel-s: could you please compress that to one line? verbose bots are a bit annoying

[10:26] *** hugme joined
[10:26] *** ChanServ sets mode: +v hugme

[10:34] *** MayDaniel left
[10:38] *** wamba left
[10:44] *** kanishka joined
[10:55] *** Tedd1 left
[11:01] *** _twitch left
[11:02] *** kanishka left
[11:13] *** koban left
[11:14] *** koban joined
[11:15] *** _twitch joined
[11:25] *** DansBot joined
[11:26] <daniel-s> !wave at moritz

[11:26] <DansBot> Hai moritz o/ o| o/

[11:26] <moritz> \o  |o /o

[11:26] <moritz> daniel-s++

[11:33] *** icwiener joined
[11:48] *** satyavvd left
[11:55] *** tzhs joined
[11:57] *** koban left
[12:07] <colomon> niecza: say [*] 1..20;

[12:07] <p6eval> niecza v6-167-g6cff873: OUTPUT«2432902008176640000␤»

[12:07] *** scottp left
[12:10] *** leprevost joined
[12:10] <takadonet> morning all

[12:10] <colomon> niecza: say [*] 2, 3, 5, 7, 11, 13, 17, 19

[12:10] <p6eval> niecza v6-167-g6cff873: OUTPUT«9699690␤»

[12:16] <moritz> sorear: 'make test' fails in current niecza: Undeclared routine: 'testx:sym<<foo bar>>' used at line 815

[12:21] *** xinming_ joined
[12:21] <daniel-s> perl6: say [*] 1..20;

[12:21] <p6eval> rakudo 248244: OUTPUT«2.43290200817664e+18␤»

[12:21] <p6eval> ..pugs, niecza v6-167-g6cff873: OUTPUT«2432902008176640000␤»

[12:21] *** scottp joined
[12:22] <daniel-s> perl6: say [*] 1..5; say 1*2*3*4*5;

[12:22] <p6eval> pugs, rakudo 248244, niecza v6-167-g6cff873: OUTPUT«120␤120␤»

[12:24] *** xinming left
[12:32] *** nymacro left
[12:33] <daniel-s> rakudo: [-] 6 5;

[12:33] <p6eval> rakudo 248244: OUTPUT«===SORRY!===␤Confused at line 22, near "[-] 6 5;"␤»

[12:33] <daniel-s> rakudo: [-] 6, 5;

[12:33] <p6eval> rakudo 248244:  ( no output )

[12:33] <daniel-s> rakudo: [+] 6, 5;

[12:33] <p6eval> rakudo 248244:  ( no output )

[12:33] <daniel-s> rakudo: [*] 6, 5;

[12:33] <p6eval> rakudo 248244:  ( no output )

[12:33] <daniel-s> rakudo: say [*] 6, 5;

[12:33] <p6eval> rakudo 248244: OUTPUT«30␤»

[12:33] <daniel-s> rakudo: say [-] 6, 5;

[12:33] *** bluescreen10 joined
[12:33] <p6eval> rakudo 248244: OUTPUT«1␤»

[12:34] <daniel-s> rakudo: say [%] 6, 5;

[12:34] <p6eval> rakudo 248244: OUTPUT«1␤»

[12:36] *** jt_ joined
[12:37] <moritz> rakudo: say [**] 1..10

[12:37] <p6eval> rakudo 248244: OUTPUT«1␤»

[12:37] *** cosimo joined
[12:39] <daniel-s> that seems not right

[12:40] <daniel-s> say [%] 6,4;

[12:40] <daniel-s> rakudo: say [%] 6,4;

[12:40] <p6eval> rakudo 248244: OUTPUT«2␤»

[12:40] <daniel-s> rakudo: say [**] 1..3;

[12:40] <p6eval> rakudo 248244: OUTPUT«1␤»

[12:40] <daniel-s> rakudo: say [**] 2..3;

[12:40] <p6eval> rakudo 248244: OUTPUT«8␤»

[12:41] <daniel-s> oh yea, it starts at 1

[12:44] *** kai__ joined
[12:47] *** satyavvd joined
[12:49] *** cosimo left
[12:56] *** benabik left
[13:00] *** mtk joined
[13:04] *** Holy_Cow joined
[13:06] *** kai__ left
[13:07] *** agentzh left
[13:07] *** Holy_Cow left
[13:08] *** Holy_Cow joined
[13:11] *** DansBot left
[13:18] <colomon> niecza: say 10 !%% 3

[13:18] <p6eval> niecza v6-167-g6cff873: OUTPUT«Bool::True␤»

[13:18] <colomon> niecza: say 10 !%% 2

[13:18] <p6eval> niecza v6-167-g6cff873: OUTPUT«Bool::False␤»

[13:24] <daniel-s> rakudo: say 10%3;

[13:24] <p6eval> rakudo 248244: OUTPUT«1␤»

[13:24] <daniel-s> rakudo: say 10%%3;

[13:24] <p6eval> rakudo 248244: OUTPUT«Bool::False␤»

[13:24] <daniel-s> what is %%?

[13:24] *** orafu joined
[13:25] <daniel-s> and why does the first one get ignored in IRC

[13:25] <moritz> the "divisible by" operator

[13:25] <moritz> which one is ignored?

[13:25] <daniel-s> oh, so if 10%2 is zero, 10%2 == true

[13:25] <daniel-s> oh, so if 10%2 is zero, 10%%2 == true

[13:25] <moritz> right

[13:26] <daniel-s> %

[13:26] <daniel-s> %%

[13:26] <daniel-s> if I type %% only one % comes up

[13:26] <moritz> daniel-s: that's a feature of your IRC client. Works fine in mine

[13:30] <daniel-s> rakudo: say !10%%3.5;

[13:30] <p6eval> rakudo 248244: OUTPUT«Bool::True␤»

[13:30] <daniel-s> rakudo: say 10%%3.5;

[13:30] <p6eval> rakudo 248244: OUTPUT«Bool::False␤»

[13:30] *** mtk left
[13:30] <daniel-s> rakudo: say !10;

[13:30] <p6eval> rakudo 248244: OUTPUT«Bool::False␤»

[13:30] <daniel-s> rakudo: say !"hello";

[13:30] <p6eval> rakudo 248244: OUTPUT«Bool::False␤»

[13:31] <daniel-s> rakudo: say !"0";

[13:31] <p6eval> rakudo 248244: OUTPUT«Bool::True␤»

[13:34] *** woosley joined
[13:37] *** mtk joined
[13:38] <colomon> hmmm.... we have grep and first.  do we have an exists?  (ie, like first but returns True if the condition matches something in the list, False otherwise.)

[13:38] <colomon> I guess ?@a.grep should do that, in theory....

[13:38] <moritz> and with lazy lists it does that well

[13:39] *** Holy_Cow left
[13:40] <tadzik> http://blogs.perl.org/users/andrew_shitov/2011/06/perl-6-influence-talk-wanted-at-yapceurope.html

[13:40] <colomon> Obviously !@a.grep could be that efficient as well.  Wonder if it is.

[13:41] <colomon> rakudo: my @a := 1, -> $n { say ++$n } ... 20; @a.grep(* %% 13)

[13:41] <p6eval> rakudo 248244:  ( no output )

[13:41] <colomon> rakudo: my @a := 1, -> $n { say ++$n } ... 20; say ?@a.grep(* %% 13)

[13:41] <p6eval> rakudo 248244: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in <anon> at line 22:/tmp/alerlUeyQd␤  in <anon> at line 872:CORE.setting␤  in 'List::Bool' at line 1␤  in <anon> at line 888:CORE.setting␤  in <anon> at line 1␤  in 'List::Bool' at line 1␤  in 'prefix:<?>' at line

[13:41] <p6eval> ..497:CORE…

[13:41] <colomon> rakudo: my @a := 1, -> $n is copy { say ++$n } ... 20; say ?@a.grep(* %% 13)

[13:41] <p6eval> rakudo 248244:

[13:41] <p6eval> ..OUTPUT«(timeout)rue␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool::True␤Bool:…

[13:42] <colomon> doh!

[13:42] <colomon> rakudo: my @a := 1, -> $n is copy { say ++$n; $n; } ... 20; say ?@a.grep(* %% 13)

[13:42] <p6eval> rakudo 248244: OUTPUT«2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤Bool::True␤»

[13:42] <colomon> rakudo: my @a := 1, -> $n is copy { say ++$n; $n; } ... 20; say !@a.grep(* %% 13)

[13:42] <p6eval> rakudo 248244: OUTPUT«2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤Bool::False␤»

[13:43] <colomon> so, not smart now, but an easy fix

[13:43] <moritz> you have to check how often the grep block is executed

[13:43] <moritz> not how often the generating code block is executed

[13:43] <moritz> you see that it only goes up to 13 in the generating block

[13:43] <moritz> so you know that it stopped after it found the first match

[13:44] <colomon> right, that's because !@a.grep translators to !?@a.grep

[13:44] <colomon> errr, hmmm.

[13:44] <colomon> that's right, actually, isn't it?

[13:45] <moritz> well, both end up calling List.Bool

[13:45] * moritz doesn't see anything wrong

[13:45] <PerlJam> greetings fellow perl6ers

[13:46] <colomon> rakudo: my @a := 1, -> $n is copy { say ++$n; $n; } ... 20; say !@a.grep(* !%% 13)

[13:46] <p6eval> rakudo 248244: OUTPUT«Bool::False␤»

[13:46] *** Woodi left
[13:46] *** geekosaur left
[13:47] * colomon needs to stop fiddling around with p6 and get back to work

[13:47] <colomon> niecza: my @a := 1, -> $n is copy { say ++$n; $n; } ... 20; say ?@a.grep(* %% 13)

[13:47] <p6eval> niecza v6-167-g6cff873: OUTPUT«Unhandled exception: Nominal type check failed in binding $v is rw in CORE prefix:<++>; got Mu, needed Any␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (CORE prefix:<++> @ 0) ␤  at /tmp/LsEbplSSHe line 1 (MAIN C1_ANON @ 1) ␤  at

[13:47] <p6eval> ../home/p6eval/niecza/lib/CORE.setting line 1537 (C…

[13:48] <colomon> niecza: my @a := 1, -> $n { say $n + 1; $n + 1; } ... 20; say ?@a.grep(* %% 13)

[13:48] <p6eval> niecza v6-167-g6cff873: OUTPUT«2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤Bool::True␤»

[13:49] *** geekosaur joined
[13:53] *** Woodi joined
[13:53] *** koban joined
[14:01] <PerlJam> I just compiled nom again and I'm really having a hard time getting used to it being so fast  :-)

[14:01] *** benabik joined
[14:01] <PerlJam> It surprises me every time.

[14:02] *** llabthgie left
[14:02] <tadzik> :)

[14:03] *** llabthgie joined
[14:03] <moritz> PerlJam: I can volunteer to implement a --with-breaks option that eases the transition for you :-)

[14:03] <PerlJam> heh

[14:04] *** Tedd1 joined
[14:08] <jnthn> lol :)

[14:08] <jnthn> Happy it's a better experience. :)

[14:16] *** kaare_ joined
[14:16] *** sivoais left
[14:19] *** scottp left
[14:21] <PerlJam> I'm looking forward to the day when I'm *not* surprised by how fast rakudo compiles  :)

[14:22] <moritz> oh well, it will slow down again when we add more stuff to the setting :-)

[14:25] <arnsholt> I tried compiling Perl 5 the other day. Definitely took longer =)

[14:25] <tadzik> ha! :P

[14:26] <moritz> arnsholt: I'm a bit surprised... if you include the time for parrot and nqp in the rakudo build

[14:26] <moritz> (and don't count the tests in both cases)

[14:26] *** lichtkind joined
[14:26] <moritz> might also depends on the number of parallel compilation processes

[14:26] <PerlJam> I don't know ... perl 5 does a lot of things to make sure execution is faster

[14:26] <lichtkind> TimToady: you got mail :)

[14:27] <arnsholt> moritz: Yeah, I didn't include parrot, that's true

[14:28] <moritz> though parallelized parrot rebuild with ccache isn't slow either

[14:28] <moritz> but then you have to consider ccache for perl 5 too

[14:28] * jnthn wonders how well the Rakudo build parallelizes.

[14:29] <moritz> not well at all

[14:29] <moritz> the dynpmcs do

[14:29] <moritz> but the rest mostly not

[14:29] <moritz> maybe building the blib/Perl6/*.pbc things

[14:29] <moritz> setting compilation: not at all

[14:32] *** betterworld left
[14:33] <jnthn> Setting compilation kinda can't.

[14:33] <PerlJam> I just helped our very staid accountant do something on a system I don't use in a language I don't know and it worked :-) and the accountant actually shouted "yay!".  It's the largest expression of emotion I've ever seen from her.

[14:34] <moritz> configuring and building perl 5 (blead) from scratch: 6 minutes

[14:35] <moritz> now trying rakudo + nqp + parrot

[14:36] *** hercynium joined
[14:37] *** daniel-s left
[14:38] <moritz> parrot build finished, now on to nqp...

[14:38] * PerlJam idly wonders where "blead" actually originated.

[14:38] <moritz> "bleading edge" - like leading edge, but sometimes a bit painful

[14:39] <PerlJam> Aye, I know what it means, but where was it first used?

[14:39] <PerlJam> who first came up with it?

[14:39] <moritz> probably any < damian TimToady tchrist > on p5p :-) (just guessing)

[14:40] *** thou joined
[14:40] <PerlJam> as much as its usage pervades hackerdom, it could be one of those things perl culture borrowed for all I know

[14:41] *** koban left
[14:44] *** mkramer1 joined
[14:46] *** colomon_ joined
[14:46] *** colomon left
[14:46] *** colomon_ is now known as colomon

[14:47] *** llabthgi1 joined
[14:48] *** llabthgi1 left
[14:48] <PerlJam> moritz: doesn't building perl also compile a bunch of modules?  For it to be a fair timing comparision, you'd have to discount those too

[14:48] *** llabthgie left
[14:48] <moritz> nom + nqp + parrot: 7m41

[14:48] *** llabthgie joined
[14:48] <moritz> PerlJam: well, I don't want to spend much more time on that

[14:50] *** betterworld joined
[14:56] *** wtw left
[14:58] *** betterworld left
[15:02] *** Kaedenn joined
[15:03] <Kaedenn> So, um, I see the following line in Perl6: my $*endsym = "null";

[15:03] <Kaedenn> What does the * do in that context, if anything?

[15:03] <PerlJam> deja vu

[15:03] <PerlJam> (I just saw that on #perl :)

[15:03] <moritz> Kaedenn: dynamic variable

[15:03] <Kaedenn> Um.

[15:03] <PerlJam> Kaedenn: See S02

[15:03] * Kaedenn smiles and nods

[15:03] <Kaedenn> Okay.

[15:04] <Kaedenn> Which section?

[15:04] *** wamba joined
[15:04] <PerlJam> Kaedenn: um ... search for "twigil"

[15:05] *** silug left
[15:05] <Kaedenn> Aha!

[15:05] <Kaedenn> Okay, that's what I was looking for. Thanks.

[15:06] *** betterworld joined
[15:07] *** JimmyZ joined
[15:07] <Kaedenn> God this is making my head hurt.

[15:07] *** Kaedenn left
[15:07] <moritz> just one new dimension

[15:09] <JimmyZ> good evening, #perl6

[15:10] <slavik> JimmyZ: wrong timezone :P

[15:11] *** tzhs left
[15:11] <JimmyZ> slavik: then s/evening/*/ ;)

[15:11] <slavik> ^^

[15:11] <slavik> damn straight

[15:11] *** betterworld left
[15:11] *** am0c joined
[15:12] <slavik> JimmyZ: you be from nearby mother country :D

[15:12] <benabik> I say "Good morning" to people in my own timezone well into the PM, so I don't really care what greeting people use on IRC.  :-D

[15:13] *** betterworld joined
[15:13] <JimmyZ> well, maybe I'm from the future

[15:14] <huf> the perl6 greeting is * *, * anyway

[15:14] <huf> i learned that from TimToady 

[15:14] <moritz> though 'good *, *' is also acceptable

[15:15] <slavik> well, he is a linguist, which would make him more qualified than any/most of us in that regard

[15:15] <huf> slavik: * * * * * * :)

[15:15] <slavik> exactly!

[15:15] <slavik> http://bash.org/?244321

[15:15] <slavik> reminds me of that

[15:17] <PerlJam> All of the *s remind me of crontabs

[15:18] <benabik> A crontab entry of * * * * * means someone needs to have login privs revoked.

[15:19] <moritz> benabik: depends on what the job does

[15:19] <huf> removes login privileges :D

[15:19] <JimmyZ> I didn't recall crontabs, most Perl 6

[15:19] <moritz> benabik: once per minute isn't too bad if what it does is reliably < 1s

[15:20] <benabik> moritz: Still, uhg.  I'd rather something like that just be a daemon than forcing crond to wake every minute and spawn a process.

[15:20] <benabik> moritz: But I guess I see your point.

[15:21] *** mkramer1 left
[15:21] *** mkramer joined
[15:23] *** icwiener left
[15:25] *** mkramer left
[15:25] *** gottreu joined
[15:30] *** mkramer joined
[15:32] *** mkramer left
[15:36] <TimToady> it's hard to know how best to do it in Japanese--since the word boundaries are not very distinct from morpheme boundaries, you could justify anything from ** to *****

[15:36] *** birdwindupbird joined
[15:36] <TimToady> o hayou go zai masu

[15:37] <TimToady> oh, and that's without the minna san on the end :)

[15:37] <TimToady> so make it *******

[15:38] <TimToady> but * *, * works too :)

[15:39] <TimToady> I guess that'd really have to be ＊＊，＊

[15:39] *** cooper joined
[15:39] <TimToady> .u ＊

[15:39] <phenny> U+FF0A FULLWIDTH ASTERISK (＊)

[15:39] <TimToady> or more likely ＊＊、＊

[15:41] <TimToady> .u ，

[15:41] <phenny> U+FF0C FULLWIDTH COMMA (，)

[15:41] <TimToady> .u 、

[15:41] <phenny> U+3001 IDEOGRAPHIC COMMA (、)

[15:44] <TimToady> so how come there's an IDEOGRAPHIC SPACE but no FULLWIDTH SPACE?  :)

[15:47] *** mj41 left
[15:49] *** woosley left
[15:51] <pmichaud> maybe it's ideotic.

[15:51] *** satyavvd left
[15:57] *** _twitch left
[16:00] *** kai__ joined
[16:02] *** kai__ left
[16:03] <Eevee> 「なにか」

[16:03] *** icwiener joined
[16:06] <TimToady> or 何か, since Japanese is rather TMTOWTDI :)

[16:07] *** wamba left
[16:09] <Eevee> yes, I've seen many a comparison drawn to Perl

[16:09] <Eevee> I wouldn't be surprised to find $_ aliased to $は someday  :P

[16:11] *** _twitch joined
[16:20] *** wamba joined
[16:22] <icwiener> Hi, small question: What kind of regexpes does the smart match operator expect?

[16:24] <PerlJam> what kind?

[16:25] <PerlJam> icwiener: what do you mean?

[16:26] <icwiener> PerlJam: Well, I use a regular expression that works fine with plain grep but Perl6 gives me a syntax error there. if $line ~~ /^\#.*20[01][0-9]\.$/ {

[16:26] <icwiener> So I thought Perl6 might use a different style of regular expressions.

[16:26] <PerlJam> oh!

[16:26] <PerlJam> perl 6 expects Perl 6 regex  :)

[16:27] *** dju_ left
[16:27] *** mj41 joined
[16:27] <PerlJam> icwiener: Perl 6 has refactored regex syntax somewhat so, for instance, character classes are now <[0..9]> instead of [0-9]

[16:27] <icwiener> Hmm,, the ones I saw pretty much looked the same as the usual extended regexp I used to use in Perl 5.

[16:28] <icwiener> Oh!

[16:28] <PerlJam> but maybe you want to use \d instead ?

[16:28] <icwiener> That explains a bit. :)

[16:29] <icwiener> Is there something to read about the new syntax?

[16:29] <PerlJam> icwiener: well, there's https://github.com/perlpilot/perl6-docs/blob/master/intro/p6-regex-intro.pod

[16:30] *** MayDaniel joined
[16:30] <PerlJam> icwiener: and there's https://github.com/perl6/specs/blob/master/S05-regex.pod

[16:30] <PerlJam> icwiener: and there's http://szabgab.com/blog/2009/07/perl-6-regexes.html

[16:33] <icwiener> Thanks a lot. I just read http://strangelyconsistent.org/blog/june-13-regexes and felt confident enought to try it. :D

[16:33] <PerlJam> masak++

[16:34] <icwiener> Yep, great series of articles.

[16:39] *** birdwindupbird left
[16:43] <TimToady> niecza: /^\#.*20[01][0-9]\.$/

[16:44] <p6eval> niecza v6-167-g6cff873: OUTPUT«===SORRY!===␤␤Any()No unspace allowed in regex; if you meant to match the literal character, please enclose in single quotes ('#') or use a backslashed form like \xXX at /tmp/t1jJyKgLUM line 1:␤------> /^\⏏#.*20[01][0-9]\.$/␤␤Parse

[16:44] <p6eval> ..failed␤␤»

[16:44] <TimToady> std: /^\#.*20[01][0-9]\.$/

[16:44] <p6eval> std 37a0cdd: OUTPUT«Invalid conversion in sprintf: "%M" at /usr/local/share/perl/5.10.1/STD.pm line 57286.␤===SORRY!===␤No unspace allowed in regex; if you meant to match the literal character, please enclose in single quotes ('#') or use a backslashed form like \x%M->{02}x at

[16:44] <p6eval> ../tmp/7…

[16:44] <TimToady> interesting

[16:44] <PerlJam> and LTA  :)

[16:44] <TimToady> std: /^'#'.*20[01][0-9]\.$/

[16:44] <p6eval> std 37a0cdd: OUTPUT«===SORRY!===␤Invalid regex metacharacter (must be quoted to match literally) at /tmp/unXX94pgrf line 1:␤------> /^'#'.*20[01][0-⏏9]\.$/␤Potential difficulties:␤  [01] appears to be an old-school character class; please use <[01]> if you␤   

[16:44] <p6eval> ..mean…

[16:45] <TimToady> std: /^'#'.*20<[01]>[0-9]\.$/

[16:45] <p6eval> std 37a0cdd: OUTPUT«===SORRY!===␤Invalid regex metacharacter (must be quoted to match literally) at /tmp/h3xU4Nl4Fz line 1:␤------> /^'#'.*20<[01]>[0-⏏9]\.$/␤Potential difficulties:␤  [0-9] appears to be an old-school character class; digits should be matched

[16:45] <p6eval> ..with …

[16:45] <TimToady> std: /^'#'.*20<[01]>\d\.$/

[16:45] <p6eval> std 37a0cdd: OUTPUT«ok 00:01 121m␤»

[16:45] <TimToady> std: / ^ '#' .* 20 <[01]> \d \. $ /

[16:45] <p6eval> std 37a0cdd: OUTPUT«ok 00:01 121m␤»

[16:46] <TimToady> happyspace!

[16:46] *** TBA2 joined
[16:46] *** kaare_ left
[16:49] *** MayDaniel left
[16:53] *** thou left
[16:53] *** Tanktalus joined
[17:02] *** silug joined
[17:09] *** thou joined
[17:10] <thou> thanks, i'm getting back online now

[17:10] <thou> for some reason my wireless stopped transmitting

[17:10] <thou> erm, sorry, wrong channel

[17:11] <TimToady> it's pretty hard to be offtopic here :)

[17:11] <benabik> thou: welcome back anyway.  :-D

[17:12] <thou> lol

[17:12] <thou> thanks

[17:12] <TimToady> since Perl 6 will solve all the problems of the world including wireless dropouts

[17:13] <TimToady> so I guess only death and taxes are offtopic here...

[17:14] <thou> maybe perl6 could help with the *fear* of death

[17:14] <thou> which is, i imagine, worse than the real thing

[17:14] <slavik> perl6 will also solve the world hunger problem?

[17:14] <TimToady> of course

[17:15] <slavik> and global warming and energy crisis?

[17:15] <TimToady> it will make everyone into sedentary programmers

[17:15] <TimToady> so they'll need less energy

[17:15] <slavik> nice

[17:15] <slavik> I am already fat :(

[17:15] *** cdarroch joined
[17:15] *** cdarroch left
[17:15] *** cdarroch joined
[17:16] <TimToady> yes, but then everyone else will be fat too, and we will redefine the norm

[17:17] *** thou left
[17:17] <flussence> somewhat on-topic: I've read a story about one compiler from the 80s/90s, where a single bugfix saved all the devs a few thousand kWh in electricity bills in the long run...

[17:17] *** thou joined
[17:17] <flussence> (it was pretty similar to the ld -> gold thing going on today, actually)

[17:29] *** thou left
[17:30] *** JimmyZ left
[17:31] *** masak joined
[17:31] *** thou joined
[17:31] <masak> bom tarde, #perl6

[17:31] <phenny> masak: 15 Jun 23:04Z <TimToady> tell masak methinks you said "right side" when you meant "left side"

[17:31] <masak> probably. I do that a lot...

[17:32] * jnthn boms the tarde

[17:32] <TimToady> colomon: you should add your solution to http://rosettacode.org/wiki/Pi someday

[17:32] *** benabik left
[17:32] <TimToady> and there's a misspelling in the same paragraph, but phenny was down when I noticed it

[17:32] <masak> TimToady: thanks, twice. fixing.

[17:33] <colomon> TimToady: Probably.  :)

[17:33] <masak> it's slightly doubtful I'll have time to blog today. but I'll try my best.

[17:34] <tadzik> hello masak

[17:35] <masak> czesc tadzik 

[17:35] <tadzik> hej

[17:35] <masak> ;)

[17:35] *** Chillance joined
[17:42] <masak> the difference between left and right bothers me. there's nothing *a priori* to tell them apart.

[17:42] <pmichaud> jnthn: ping

[17:44] <jnthn> pmichaud: pong

[17:44] <masak> just as we might have picked -i as the imaginary base, and no-one would be able to tell the difference. (may that's what happened!) :P

[17:46] <pmichaud> jnthn: never mind, I figured out what was going on.  I couldn't see why I was getting an error on binding to an attribute (it was an operator precedence problem)

[17:46] <jnthn> pmichaud: ah, k :)

[17:47] <pmichaud> oh, imcc, how do I hate thee?  Let me count the ways......

[17:47] *** koushi joined
[17:47] *** koushi left
[17:47] *** koushi joined
[17:47] *** koushi left
[17:48] * moritz guesses that pmichaud is aware of the utter lack of methods in Parcel, and works on related stuff anyway

[17:48] <pmichaud> yes, I'm aware.

[17:48] <pmichaud> I'm redoing Parcel/List/Array at the moment anyway.

[17:48] <pmichaud> vi l5

[17:48] <pmichaud> ww

[17:51] <TimToady> masak: your premise is arguably incorrect, since there's http://en.wikipedia.org/wiki/CP_violation you'd have to argue that you can't tell forward from backward in time

[17:52] <colomon> pmichaud: redoing them in nom?  Is that in the sense of fixing up nom's versions, or actual improvements over master?

[17:53] <pmichaud> actual improvements over master

[17:53] <pmichaud> I'm even working on equivalent new versions in master

[17:53] <pmichaud> don't know if they'll result in any significant performance improvements (they should), but they'll certainly be cleaner than what master has now

[17:55] <colomon> \o/

[17:55] <masak> TimToady: while I appreciate the logic of that, my heart tells me otherwise... :)

[17:55] * colomon is switching from one frustrating task for $work (still completely non-functioning) to a different frustrating task for $work

[17:55] * moritz guesses that pmichaud will stumble over some list/iterator issus in the meta ops while doing things more correctly

[17:56] *** koushi joined
[17:56] *** koushi left
[17:56] * colomon is listening to a Fleet Foxes concert, on the bright side

[17:56] *** thou left
[17:58] <TimToady> masak: your heart is also not completely left-right symmetrical

[18:00] <masak> :P

[18:01] <masak> augh, there's no axiomatic basis anywhere!

[18:02] <PerlJam> masak: There's a mathematician who has some interesting things to say about axiomatic systems; you should read him some time  ;-)

[18:03] <TimToady> "no axiomantic basis" is a rather axiomatic assertion...

[18:03] <masak> TimToady: well, it depends... I've been going back and forth on that one.

[18:03] <TimToady> perhaps we can build up Church axioms from that  :P

[18:04] <TimToady> though we'd have to prove that the next axiom is both derived from and could not possibly be derived from the previous axiom...

[18:05] <TimToady> that's where I go back and forth :)

[18:05] <pmichaud> moritz: stumble in master, you mean?

[18:06] <moritz> pmichaud: yes

[18:06] <pmichaud> perhaps.  it was actually in the role stuff that I got blocked yesterday.

[18:06] <pmichaud> but that's actually fortunate, as it forced me to go back and rethink things yet again :)

[18:06] <masak> "there are no universal truths" is a pretty self-defeating statement. the problem with slaying logic in the first blow is a bit similar to destroying the boat after just setting out from the shore.

[18:07] *** mj41 left
[18:07] <masak> it doesn't get you very far. :)

[18:07] <TimToady> well, but if it's all relative than you can't quantify "very far" very well :)

[18:07] <TimToady> *then

[18:08] <masak> :P

[18:08] <pmichaud> never argue with a linguist.  :)

[18:08] <masak> so the consolation is that I won't know how much I've failed? :P

[18:08] <masak> I think I'll head back to utter certainty now... :)

[18:15] <masak> on the other hand, a postmodernist theorem prover should be a breeze to implement.

[18:16] <PerlJam> Does "utter certainty" even exist?

[18:16] <masak> oh, I'm sure it does.

[18:17] <PerlJam> yeah, but I think many cultures call that "God" or something

[18:17] *** Guest65000 is now known as alyx

[18:17] *** alyx left
[18:17] *** alyx joined
[18:20] <PerlJam> chromatic is funny

[18:24] <masak> he is.

[18:26] <masak> anything in particular? http://www.modernperlbooks.com/mt/2011/06/meaning-mechanism-type-tyranny.html , perhaps?

[18:29] <PerlJam> yes, the parenthetical bit near the beginning gives some insight into his how his brain works  ;)

[18:30] <moritz> somehow I don't understand the point

[18:30] <moritz> having the option to write custom arrays that use the built-in syntax seem to solve the big problem he mentions

[18:31] <moritz> so to me it looks like a problem specific to perl 5, not dynamic languages and their types in general

[18:31] <moritz> there could be a deeper point I'm missing, though

[18:31] <masak> I always get the feeling chromatic has something important and noteworthy to express. I'm not always convinced biting sarcasm helps get the point across in the best way possible. but it's usually enjoyable to read.

[18:34] *** Tedd1^ joined
[18:34] *** Tedd1 left
[18:35] <masak> first link in paragraph "Then I read..." looks broken.

[18:35] <masak> I meant to tell chromatic, but I can't find him on IRC.

[18:35] <masak> maybe Twitter will serve.

[18:35] *** Woodi left
[18:37] *** Woodi joined
[18:40] *** benabik joined
[18:41] *** Tedd1 joined
[18:42] *** Tedd1^ left
[18:42] <sorear> good * #perl6

[18:43] <masak> sorear! \o/

[18:48] <sorear> masak: down to 18 lines of changes in yapsi/niecza, some of which I think are worth merging to master

[18:48] <sorear> like yapsi/master uses $obj1 eq $obj2 in a few places

[18:49] <sorear> I think this is a bug waiting to happen... what if $obj1 === $obj2, but the first call triggers a garbage collection which changes the object's address?

[18:57] *** _jaldhar left
[19:02] *** fhelmberger left
[19:03] *** wamba left
[19:03] <masak> sorear: agreed.

[19:03] <masak> sorear: I've been meaning to look at the diff and perhaps blog about it.

[19:04] <masak> it will be a few days before I have that kind of time; probably sometime early next week.

[19:08] *** hercynium left
[19:08] *** Moukeddar joined
[19:08] *** hercynium joined
[19:11] *** bluescreen10 left
[19:12] *** Moukeddar_ joined
[19:13] *** am0c left
[19:16] *** Moukeddar left
[19:17] * colomon is having one of those "nothing is working" days

[19:18] *** alester joined
[19:19] <colomon> ack.

[19:19] <PerlJam> colomon: that's okay, I'm having one of those "can't get motivated to do anything productive" days

[19:19] *** hudnix left
[19:19] <colomon> PerlJam: not really sure which is worse

[19:19] *** birdwindupbird joined
[19:20] *** cooper left
[19:20] <colomon> so, MAIN(Int $n) doesn't work?

[19:20] <PerlJam> I think it's mainly because I have these ideas of things I want to work on for $work, but I have to put together a narrative for a proposal by tomorrow and that's more important but less fun.

[19:21] <masak> moritz: today, researching Perl 5's pseudo-package SUPER, I realized that it actually does handle MRO and MI. I'm not advocating putting it back into Perl 6 (because nextsame et al are just fine), but I no longer see a conceptual problem with having it there.

[19:24] <moritz> masak: but it is otherwise completely insane

[19:24] <masak> right, exactly.

[19:24] <PerlJam> heh

[19:24] <moritz> ie it's not tied to an invocant, but to the current package

[19:25] <masak> it just struck me that the "won't work with MI" objection wasn't very strong, since it does work with MI in Perl 5.

[19:25] <moritz> but does it work *well* with MI in Perl 5?

[19:25] <masak> I didn't say that. :)

[19:25] *** bluescreen10 joined
[19:25] <colomon> what I'm seeing (this is in master): MAIN(Int $n) doesn't work.  MAIN($n) works, but then hides MAIN("test") (ie if the command-line argument is "test", MAIN($n) is called.  Help?

[19:26] <masak> I don't plan to use MI much in Perl 5. Perl 5 has Moose, and Moose has roles.

[19:26] <masak> colomon: the former is well-known. the latter sounds weird and new.

[19:26] <masak> colomon: are those really multis?

[19:27] <masak> rakudo: sub MAIN("test") {}; sub MAIN($n) {}

[19:27] <p6eval> rakudo 248244: OUTPUT«===SORRY!===␤Cannot re-declare sub &MAIN without declaring it multi at line 22, near ""␤»

[19:27] <masak> guess so :)

[19:27] *** cotto left
[19:28] <colomon> masak: https://gist.github.com/1030030

[19:28] <moritz> colomon: re-order the mutlis

[19:28] <masak> huh, what?

[19:28] <moritz> colomon: thing is, the main helper doesn't do a proper multi dispatch (yet)

[19:28] <masak> ah.

[19:29] * masak didn't know that

[19:29] <masak> is that filed?

[19:29] <colomon> moritz++

[19:29] <moritz> but it just iterates over the candidates, and invokes the first one it finds

[19:29] <moritz> erm, the first one it can bind to

[19:29] * masak submits rakudobug

[19:30] *** Bzek left
[19:31] <Moukeddar_> Hi guys , hope you're all fine

[19:32] <masak> Moukeddar_: hi Moukeddar_ of the abundant whitespace ;)

[19:32] <tadzik> hello Moukeddar_ 

[19:32] <Moukeddar_> you noticed that ?

[19:33] <Moukeddar_> what's cooking in the labs?

[19:34] <masak> well, jnthn++ is working on nom, sorear++ is hacking away on Niecza, and the rest of as are (to a first approximation) awestruck by their productivity. :)

[19:34] <moritz> masak: btw I'm working on https://github.com/moritz/WebService-Libris right now

[19:34] <masak> us*

[19:34] <masak> moritz: ooh

[19:36] <moritz> it has neither tests nor documentation right now :/

[19:38] *** leprevost left
[19:39] <Moukeddar_> so you think you can code ?

[19:39] <Moukeddar_> that's a show :)

[19:40] <masak> Moukeddar_: sorry, what do you mean?

[19:40] <Moukeddar_> you know the TV shows , Dance with the stars , America got talent , so you think you can dance etc...

[19:41] <masak> ah.

[19:41] <Moukeddar_> please please , overlook the spaces:)

[19:41] <masak> in this case, quotes would've helped more :P

[19:41] *** Aridai joined
[19:41] <Moukeddar_> yes, certainly

[19:41] <masak> it's the ol' use-mention distinction. some of us are very into that one.

[19:41] *** daxim left
[19:42] <Moukeddar_> i can  tell

[19:43] <masak> Moukeddar is 185 cm tall, but "Moukeddar" is 8 characters wide :)

[19:43] <Moukeddar_> lol

[19:43] <Moukeddar_> middle value is always the best

[19:43] <masak> well, those two units aren't fungible.

[19:44] <flussence> rakudo: say "Moukeddar".split.uniq.join.chars

[19:44] <p6eval> rakudo 248244: OUTPUT«No applicable candidates found to dispatch to for 'split'. Available candidates are:␤:(Mu : Regex $matcher, Any $limit = { ... }, Any :all($all);; *%_)␤:(Mu : Any $delimiter, Any $limit = { ... }, Any :all($all);; *%_)␤␤  in main program body at line 22:/tmp/w3g5q22gG0␤»

[19:44] <moritz> flussence: try .comb

[19:44] <flussence> I seem to have misplaced my clue today :)

[19:44] <masak> btw, uniq isn't spec'd. maybe someone should spec it.

[19:44] <flussence> rakudo: say "Moukeddar".comb.uniq.join.chars

[19:44] <p6eval> rakudo 248244: OUTPUT«8␤»

[19:44] <masak> I'm curious how the spec for uniq would read.

[19:44] <Moukeddar_> the one and the five?N

[19:45] <Moukeddar_> do you guys use mocking?

[19:45] <tadzik> yes

[19:45] <masak> oops, sorry. 9 characters wide. :)

[19:45] <masak> Moukeddar_: I used it today at work.

[19:46] <Moukeddar_> pretty useful, but all the web is teaching you how to use existing libs , what if you wanted to make your own ?

[19:46] <masak> Moukeddar_: I didn't use a lib. I just wrote the code I needed.

[19:46] <moritz> Moukeddar_: http://www.youtube.com/watch?v=aAb7hSCtvGw

[19:47] <Moukeddar_> i as a try, i created a  FakeRepository which implemented the IRepository , i guess that's the principle , right?

[19:48] <masak> aye, sounds like a good start.

[19:48] <Moukeddar_> moritz, kisses and hugs to you

[19:48] <lue> hello zebras o/

[19:48] <Moukeddar_> and the FakeRepository would return specific items/values i hard-coded

[19:48] <moritz> Moukeddar_: that's a bit... over-enthusiastic

[19:49] <Moukeddar_> it's completely normal

[19:49] <moritz> depends on the culture

[19:49] <Moukeddar_> i guess

[19:50] <masak> lue: hello little panda

[19:51] <tadzik> lue: o/

[19:51] <masak> yes, we don't have a kissbot ;)

[19:51] <Moukeddar_> you should have one

[19:51] <masak> I'm not so sure...

[19:52] <masak> we're pretty radical with the hugs already, compared to other channels.

[19:52] <tadzik> i prefer hugs, especially when it comes to the male population

[19:52] <moritz> same here

[19:52] <Moukeddar_> homophobic?

[19:52] <moritz> a bit, yes

[19:52] <masak> well, it's mostly a cultural thing.

[19:53] <Moukeddar_> lol

[19:53] <tadzik> no, but heterosexual. I don't mind anyone doing anything, I'm speaking for myself

[19:53] <Moukeddar_> there's nothing wrong with hugs and kisses

[19:53] <tadzik> I didn't say there is

[19:53] <moritz> I don't mind either as long as no man tries to kiss me

[19:54] <masak> "to kiss someone" is quite a wide phenomenon in English. could be anything from a peck to making out.

[19:54] <Moukeddar_> i kiss you = i love/like/respect you

[19:54] <masak> or I'm the godfather.

[19:55] <lue> masak: for some reason I thought your June 15 post would be about &chomp :)

[19:55] <Moukeddar_> hehe , you might

[19:55] <Moukeddar_> if you were they'd kiss your forehead

[19:55] <masak> lue: oh! I didn't make the connection, even :P

[19:55] <wolverian> I've been totally out of the loop when it comes to (#)perl6 for six months or so. anyone want to summarize what's happened? :>

[19:56] <tadzik> ho ho ho :

[19:56] <tadzik> :)

[19:56] <tadzik> the new object model is almost there

[19:56] <tadzik> the new module manager came around

[19:56] <masak> wolverian! \o/

[19:58] *** envi_laptop left
[19:58] <wolverian> nom nom

[20:00] <sorear> as opposed to the Spanish-speaking world, where "to kiss" doesn't necessarily have any romantic overtones

[20:01] <sorear> wolverian: the toy Perl 6 compiler I've been working on is starting to make waves

[20:01] <moritz> niecza: say '~' x 10

[20:01] <p6eval> niecza v6-167-g6cff873: OUTPUT«~~~~~~~~~~␤»

[20:01] <moritz> ~\o/~

[20:01] *** Moukeddar_ left
[20:02] <masak> niecza++

[20:02] *** Moukeddar joined
[20:02] <wolverian> I haven't thought of niecza as a toy :)

[20:02] <colomon> rakudo: say prime ... 10

[20:02] <p6eval> rakudo 248244:  ( no output )

[20:03] <colomon> yeah, that.  where's the error?

[20:03] <colomon> niecza: say prime ... 10

[20:03] <p6eval> niecza v6-167-g6cff873: OUTPUT«===SORRY!===␤␤Undeclared routine:␤     'prime' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 469 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/niecza line 185 (MAIN P6.comp_unit @ 30) ␤  at

[20:03] <p6eval> ../home/p6eval/niecza/sr…

[20:03] <sorear> colomon: ( no output ) usually means segfault

[20:04] <colomon> sorear: it's not segfaulting locally, rakudo just silently dies

[20:04] *** Moukeddar left
[20:04] *** birdwindupbird left
[20:04] <colomon> and of course, that's totally not something that should make it segfault

[20:06] *** Vlavv left
[20:06] *** Vlavv joined
[20:07] <sorear> Why does p6eval use a temporary file for output, moritz?

[20:09] <moritz> sorear: because that seemed like the easiest way back then when I implemented it

[20:09] <moritz> sorear: no SIGPIPE, no deadlocks

[20:09] * moritz is pretty clueless about IPC

[20:13] *** cooper joined
[20:15] *** Vlavv_ joined
[20:15] *** Vlavv left
[20:20] <wolverian> huh. nom passes tests.

[20:21] <moritz> yes, a few of them

[20:26] *** benabik left
[20:27] <wolverian> right, I was running just "make test"

[20:27] <lichtkind> wolverian: cool to see you again 

[20:27] <wolverian> thanks! 

[20:28] <masak> wolverian: yeah, nice to have you back. hope things are good with you, too.

[20:29] <tadzik> what, make test passes something on nom?

[20:30] <wolverian> my local nom branch was accidentally tracking master. :)

[20:31] *** M_o_C joined
[20:31] <masak> that's cheating :)

[20:31] *** thou joined
[20:31] <tadzik> :)

[20:31] <wolverian> masak: nice to be back. I have a full-time perl job now.

[20:32] <masak> wolverian: congratulations! hope it's satisfying, too.

[20:32] *** bluescreen10 left
[20:33] *** thou left
[20:33] <wolverian> it has been. 

[20:40] <wolverian> real nom passes some tests, yes. not all. :)

[20:44] *** Aridai left
[20:46] *** thou joined
[21:00] *** ab5tract joined
[21:01] *** jevin joined
[21:11] *** ab5tract left
[21:35] *** hercynium left
[21:41] *** scottp joined
[21:42] *** Psyche^ joined
[21:45] *** Patterner left
[21:45] *** Psyche^ is now known as Patterner

[21:46] *** jjore left
[21:51] *** molaf joined
[21:51] *** donri left
[21:51] *** donri joined
[21:53] *** molaf left
[21:53] *** Mowah left
[21:59] *** Mowah joined
[22:00] *** M_o_C left
[22:03] *** spq1 left
[22:16] *** Mowah left
[22:36] * sorear wanders back

[22:36] <sorear> wolverian: not a toy eh? :D

[22:41] *** whiteknight joined
[22:44] *** alester left
[23:00] <masak> blog post! http://strangelyconsistent.org/blog/june-16-2011-subroutines

[23:00] * masak sleeps

[23:00] <masak> 'night, #perl6

[23:01] *** whiteknight left
[23:01] *** daniel-s joined
[23:03] *** masak left
[23:07] *** jt_ left
[23:07] *** cdarroch left
[23:09] *** jjore joined
[23:11] *** whiteknight joined
[23:16] <Krunch> perl6: say (2, 3, 1)>>.&sleep

[23:16] <p6eval> pugs: OUTPUT«<Error><Error><Error>␤»

[23:16] <p6eval> ..niecza v6-167-g6cff873: OUTPUT«===SORRY!===␤␤Undeclared routine:␤     'sleep' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 469 (CORE die @ 2) ␤  at /home/p6eval/niecza/src/niecza line 185 (MAIN P6.comp_unit @ 30) ␤  at

[23:16] <p6eval> ../home/p6eval/niecza/sr…

[23:16] <p6eval> ..rakudo 248244: OUTPUT«231␤»

[23:24] <TimToady> given that no guarantees are made about threading hyperops, the best you can say is that it'll sleep from 3 to 6 seconds

[23:26] <TimToady> and given that hyper specifically declares you don't care about side effect interactions, you won't get a better promise than that from Perl 6

[23:27] <TimToady> hyper *does* guarantee to return the results in the original order though

[23:27] <Krunch> i wasn't really hoping for more :)

[23:27] <TimToady> so rakudo is correct there

[23:27] <TimToady> the other failures were amusing :)

[23:28] <Krunch> in p5 i ended up with perl -ne'fork&&sleep$_,print,last'

[23:28] <Krunch> this is from http://dis.4chan.org/read/prog/1295544154 for people who didn't follow

[23:29] <sorear> the niecza error is because somebody put token prefix:sleep { <sym> <O(%named_unary) } in the parser :)

[23:29] *** am0c joined
[23:29] <sorear> so... you want .&prefix:<sleep>

[23:30] <Krunch> ah, thanks

[23:30] <TimToady> perl6: say sleep«(2,3,1)

[23:30] <p6eval> rakudo 248244: OUTPUT«===SORRY!===␤Confused at line 22, near "say sleep\x{ab}"␤»

[23:30] <p6eval> ..niecza v6-167-g6cff873: OUTPUT«Unhandled exception: Asynchronous programming NYI␤  at /home/p6eval/niecza/lib/CORE.setting line 570 (CORE die @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1631 (CORE prefix:<sleep> @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1407 (CORE hyperunary @

[23:30] <p6eval> ..56) ␤  at /home…

[23:30] <p6eval> ..pugs: OUTPUT«decodeUTF8': bad data: '\171'␤*** No such subroutine: "&sleep\194\171"␤    at /tmp/rDvwrLkrAz line 1, column 5 - line 2, column 1␤»

[23:31] <TimToady> also amusing :)

[23:31] <TimToady> perl6: say sleep<<(2,3,1)

[23:31] <p6eval> rakudo 248244: OUTPUT«===SORRY!===␤Confused at line 22, near "say sleep<"␤»

[23:31] <p6eval> ..niecza v6-167-g6cff873: OUTPUT«Unhandled exception: Asynchronous programming NYI␤  at /home/p6eval/niecza/lib/CORE.setting line 570 (CORE die @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1631 (CORE prefix:<sleep> @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1407 (CORE hyperunary @

[23:31] <p6eval> ..56) ␤  at /home…

[23:31] <p6eval> ..pugs: OUTPUT«*** No such subroutine: "&sleep<<"␤    at /tmp/Yor66GwhT2 line 1, column 5 - line 2, column 1␤»

[23:32] <sorear> oops

[23:33] <TimToady> pretty nice traceback though

[23:35] <TimToady> would be interesting to see a Haskell backend for niecza someday...

[23:35] *** rafiot joined
[23:35] <sorear> why?

[23:36] <TimToady> we could have an up-to-date(r) pugs

[23:37] <TimToady> and Haskell will be glad to tell us exactly why it's impossible :)

[23:42] <lichtkind> TimToady: thanks for reacting and dont worry johan cleans up the latex mess after you :)

[23:43] * sorear is rewriting add_categorical to allow for is tigther

[23:44] <lichtkind> cheers sorear 

[23:51] *** donri left
[23:53] <daniel-s> about modules and packages

[23:53] <daniel-s> what I get now is that there is a definite hierarchy

[23:53] <daniel-s> it goes packages -> modules -> class

[23:54] <daniel-s> where the lower down you go, the more functionality you have, but it covers a narrower part of the code

[23:55] <daniel-s> ...well, nobody has corrected me, so I must be correct, :)

[23:56] *** rafiot left
[23:57] *** Pathin left
