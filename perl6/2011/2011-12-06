[00:00] *** jimmy1980 joined
[00:00] <lichtkind> Type check failed in assignment to '$!geschwindigkeit'; expected 'Num' but got 'Rat' : bug or corect?

[00:01] <jnthn> ...how can we know without seeing your code? :)

[00:01] *** fridim_ left
[00:02] <jnthn> But if you're doing: has Num $!ichwillbier = 1.5 

[00:02] <jnthn> Or some such, then yes, correct

[00:02] <jnthn> 1.5 is a Rat.

[00:03] <dalek> rakudo/nom: fdba160 | jnthn++ | src/core/Numeric.pm:

[00:03] <dalek> rakudo/nom: Add round sub, so rounders.t at least compiles. It hangs, though, so this only half fixes RT#105272.

[00:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fdba160317

[00:03] <raiph> mberends++ for game code, advent calendar post, and posting early

[00:04] <jnthn> colomon: Dunno if you've any idea why .round hangs?

[00:05] <jnthn> Anyway, my hacking time's up for today

[00:06] *** jimmy1980 left
[00:06] <lichtkind> good night

[00:06] <jnthn> 'night, #perl6

[00:06] <diakopter> o/

[00:07] <lichtkind> \o

[00:11] *** jimmy1980 joined
[00:17] <sorear> good * #perl6

[00:20] <felher> o/

[00:23] *** Ingis left
[00:25] <lichtkind> \o

[00:25] *** lichtkind left
[00:30] *** Ingis joined
[01:11] *** kcwu joined
[01:15] *** whiteknight joined
[01:15] *** whiteknight is now known as Guest32833

[01:18] *** Sarten-X left
[01:26] *** Radvendii joined
[01:26] *** Sarten-X joined
[01:26] *** Radvendii left
[01:29] *** stepnem left
[01:34] *** stepnem joined
[01:36] *** Radvendii joined
[01:37] <Radvendii> +j #conlang

[01:37] <Radvendii> damn

[01:37] <Radvendii> how do i add a channel to this irc client?

[01:38] <donri> That quite depends on which particular IRC client it might be that you are using. :)

[01:38] <sorear> donri: 185b3293@gateway/web/freenode/ip.24.91.50.147 is a dead giveaway

[01:39] <sorear> Radvendii: it's /j #conlang in that client

[01:39] <Radvendii> webchat.freenode.net

[01:39] <Radvendii> bam! thanks ;-)

[01:39] <Radvendii> is there a command line version of irc?

[01:40] <sorear> hundreds

[01:40] <sorear> I am not exaggerating... writing command line irc clients is a rite of passage for hackers

[01:40] <sorear> irssi is one of the most popular

[01:40] <sorear> I'm using that

[01:40] <Radvendii> ooh… then maybe i'll make on in perl 6 :-P

[01:41] <Radvendii> does anyone have a tutorial to suggest for writing one? i have no idea where to begin.

[01:42] <donri> sorear: ironically, my irc client does not show hostnames :)

[01:48] <Radvendii> it seems there is a module Net::IRC for perl5 does such a module exist for perl6 as well?

[01:48] <sorear> Radvendii: I never said it was a good idea :p

[01:49] <Radvendii> ah.

[01:50] <donri> but if you're feeling brave, you should look into grammars and network io

[01:50] <donri> if you're feeling brave but lazy, you might be able to link to an existing library via blitzkost-what's-its-name, nativecall or niecza's clr support

[01:51] <sorear> I think you mean "if you're feeling brave and have 5 years to burn"

[01:51] <Radvendii> haha. what if im suuuper lazy and just look for one online. Irssi seems good.

[01:52] <donri> beware that irssi sucks though

[01:52] <donri> but don't tell anyone i said so

[01:52] <Radvendii> oh?

[01:52] <Radvendii> damn. what should i use?

[01:52] <sorear> irssi sucks, the rest suck more

[01:52] <donri> graphics in the terminal is an ugly hack

[01:52] <Radvendii> damn!

[01:52] <Radvendii> i dont want graphics

[01:52] <Radvendii> i want vim-style

[01:52] <sorear> my copy of irssi doesn't do graphics

[01:52] <donri> the command line is great as a command line

[01:52] <sorear> it's vim-style

[01:53] <donri> graphical toolkits are greater as graphical toolkits

[01:53] <donri> sorear: vim is graphical

[01:53] <Radvendii> i mean command line vim

[01:53] <Radvendii> not gvim

[01:53] <donri> command line vim is graphical

[01:54] <donri> http://www.gnu.org/s/freetalk/ is an example of a non-graphical terminal chat client

[01:54] <sorear> bad donri.  please don't get into semantic nitpicking with the newbies

[01:54] <Radvendii> how are you defining graphical?

[01:54] <donri> ed is an example of a non-graphical editor

[01:54] <Radvendii> haha. oh. why do you say graphics in command line is ugly?

[01:55] <donri> because it's a hack

[01:55] <donri> and i repeatedly see that biting people

[01:55] <donri> particularly with mispastes to irc

[01:55] <Radvendii> i dont understand...

[01:55] <sorear> Radvendii: if you want a vim-style irc client and don't fancy spending 5 years debugging one of your own, use irssi, it's the least bad of them

[01:56] <donri> ncurses-like interfaces remove most of the benefits of the command-line, yet only providing half-assed graphics

[01:56] <donri> weechat is arguably better than irssi

[01:56] <donri> if you're into that sort of thing

[01:56] <sorear> Radvendii: since you like vim, you don't care what donri has to say

[01:56] <donri> :)

[01:56] <Radvendii> awesome. ill try out irssi

[01:56] * donri loves gvim FWIW

[01:56] <Radvendii> worst comes to worst, i'll stop using it ;-P

[01:57] <sorear> Radvendii: donri is arguing against vim-style interfaces in general, not irssi in the specific

[01:57] <Radvendii> ah

[01:57] <donri> not vim-style in general, ncurses-style

[01:57] <Radvendii> what's the difference?

[01:57] <donri> well, vim in the terminal is ncurses-like

[01:57] <Radvendii> gah! where do i get GILB?

[01:57] <donri> but vim in itself is more than that

[01:58] <sorear> Radvendii: donri defines vim to include gvim

[01:58] <Radvendii> oh wait

[01:58] <Radvendii> it tells me

[01:58] <Radvendii> i see

[01:58] <sorear> Radvendii: dunno, I just did sudo apt-get install irssi and angels sung for me

[01:58] <donri> sorear: it could also be interpreted as my arguing against the modal editing of vim or something such

[01:58] <Radvendii> i dont even have gvim. it's not compiled that way by default on mac.

[01:58] <donri> quite oppositelike i think that part is genious

[01:58] <donri> Radvendii: macvim?

[01:59] <Radvendii> aw damn. sometimes i wish i used linux. but then again... i tried it. it didn't work out for me too well.

[01:59] <donri> why not?

[01:59] <Radvendii> but there is a version of apt-get for mac...

[01:59] <donri> macports, homebrew and all those

[01:59] <Radvendii> i dont remember. it was really buggy, especially with the mac trackpad

[02:00] * donri does not really know mac

[02:01] <donri> hardware might in deed suck with linux-on-a-mac

[02:01] <donri> i've heard it working out well but might depend on the mac or how long ago you tried it

[02:01] <sorear> FreeBSD also has a respectable package manager, sudo pkg_add -r irssi

[02:01] *** s1n1 joined
[02:02] <sorear> sadly, you still can't expect to run Linux on arbitrary hardware and have it completely work

[02:02] <Radvendii> it might also have hurt that for a while i tried arch linux

[02:02] <Radvendii> you have to build that one up from the ground

[02:02] <sorear> I actually hear arch linux is quite good

[02:02] <donri> oh dear god don't use arch linux

[02:02] <Radvendii> i struggled through getting x11 isntalled.

[02:03] *** stepnem left
[02:03] <sorear> if you can adjust to a real Unix environment :p

[02:06] *** jeffreykegler joined
[02:07] <benabik> I would not recommend fink for the mac at this point.  It's a bit outdated and clunky.  It uses apt-get but more or less forces you to build from scratch.  Homebrew is much better.  And MacVim is the way to go for vim.

[02:07] * benabik re-lurks.

[02:14] *** woosley joined
[02:16] *** stepnem joined
[02:20] <djanatyn> say ~(1, 2, * + * ... *)[^10] # this piece of code still confuses me.

[02:21] *** clkao left
[02:23] <donri> rakudo: say ~(1, 2, * + * ... *)[^10]

[02:23] <p6eval> rakudo fdba16: OUTPUT«1 2 3 5 8 13 21 34 55 89␤»

[02:23] <donri> djanatyn: any particular part of it?

[02:23] <djanatyn> donri: I dunno. I think I get it.

[02:23] *** orafu left
[02:23] <Radvendii> what is the [^10] up to 10?

[02:23] <djanatyn> it's just, is there a difference between the * before the "..." and the * after the "..."?

[02:24] <donri> yes and no

[02:24] *** orafu joined
[02:24] <djanatyn> Radvendii: pretty sure it takes the first ten elements and returns them as a new array

[02:24] <djanatyn> since it's an infinite list, it only grabs ten

[02:24] <donri> ^10 is a range of 0 to 9 or 10 not sure

[02:24] <donri> djanatyn: * is "Whatever" and its meaning depends on the context / how/where it is used

[02:24] <Radvendii> that's kind of weird. we already have the .. operator

[02:25] *** woosley left
[02:25] <donri> Radvendii: it's just a shortcut

[02:25] <donri> for one you get away with less parenthesis

[02:25] <Radvendii> mkay. what about ...? what is tha operator?

[02:25] <donri> forgot what it's called but it's like .. ranges but more magical

[02:26] <donri> ... * means infinite, never-ending range

[02:26] <Radvendii> hahaha

[02:26] <Radvendii> so how is *+*...* evaluated?

[02:26] <donri> 1, 2 ... * means to continue the sequence 1,2...

[02:26] <Radvendii> oh

[02:26] <Radvendii> that's brilliant

[02:26] <donri> *+* is plus as a function

[02:27] *** odoacre joined
[02:27] <Radvendii> and it just knows that by * we mean the last element?

[02:27] <donri> 1, 2, some-function ... * uses the previous items in the sequence as arguments to some-function and the result is the next item

[02:27] <donri> based on the arity of the function

[02:27] <Radvendii> ah. so it's a very specific notation

[02:28] <djanatyn> that seems very magical >_>

[02:28] <donri> it's multiple notations working together

[02:28] <djanatyn> i guess not when you think about it. I didn't really get it before

[02:28] <donri> rakudo: (* + 2)(3)

[02:28] <p6eval> rakudo fdba16:  ( no output )

[02:28] <donri> rakudo: (* + 2)(3).say

[02:28] <p6eval> rakudo fdba16: OUTPUT«5␤»

[02:28] <donri> if you use an operator on "Whatever" it produces a function that takes that place as an argument

[02:29] <donri> so (* + 2) is the same as -> $x { $x + 2 }

[02:29] <Radvendii> but 1, 2, (sub) ... * is very specific

[02:29] <donri> (* + *) is the same as -> $x, $y { $x + $y }

[02:29] <donri> Radvendii: how do you mean?

[02:30] <Radvendii> what if i did 1, 2, *+*, 4, 5, *+*, ... *?

[02:30] <Radvendii> what would it do?

[02:30] <djanatyn> donri: ...is that kind of like haskell partial function application?

[02:30] <djanatyn> like...in a weird twisted list sort of way?

[02:30] <djanatyn> except

[02:30] <donri> rakudo: say (1, 2, *+* ... *<100)

[02:30] <p6eval> rakudo fdba16: OUTPUT«1␤»

[02:30] <djanatyn> never mind, then, I guess not

[02:30] <donri> rakudo: say ~(1, 2, *+* ... *<100)

[02:30] <p6eval> rakudo fdba16: OUTPUT«1␤»

[02:30] <donri> mhm

[02:31] <djanatyn> (...) reminds me of (loop) in common lisp

[02:31] <djanatyn> donri: wait, it is?

[02:31] <sorear> djanatyn: in a weird twisted way, yes

[02:31] <donri> djanatyn: kinda yes

[02:31] <Radvendii> i guess my question is this: what does putting a lambda in a list do?

[02:31] <djanatyn> Yeah, I think you get what i mean.

[02:31] <sorear> it's just an object, it gets put in the list

[02:31] <Radvendii> but when you apply "say" to it, it evaluates?

[02:31] <djanatyn> Is there a perl debugger so I could step through that expression or somethig?

[02:32] <djanatyn> okay.

[02:32] <djanatyn> well. I think I've got this now :D

[02:32] <donri> rakudo: say ~(1, 2, *+* ... *>100)

[02:32] <p6eval> rakudo fdba16: OUTPUT«1 2 3 5 8 13 21 34 55 89 144␤»

[02:32] <djanatyn> > say ~(1, 1, &[+] ... *)[^10]

[02:32] <donri> instead of * for infinite you can also have a function that tells the end

[02:32] <djanatyn> rakudo: say ~(1, 1, &[+] ... *)[^10]

[02:32] <donri> *>100 is the predicate for "is more than 100"

[02:32] <p6eval> rakudo fdba16: OUTPUT«1 1 2 3 5 8 13 21 34 55␤»

[02:33] <djanatyn> rakudo: say ~(1,1 ... *)[^10]

[02:33] <p6eval> rakudo fdba16: OUTPUT«1 1 1 1 1 1 1 1 1 1␤»

[02:33] <djanatyn> ...oh! okay, got it

[02:33] <djanatyn> so where should I put this test case, and more importantly, what kind of test case should I write?

[02:34] <donri> from what i understood what you're really testing is &[+] as *+*

[02:34] <djanatyn> ...actually, I should figure that out myself

[02:34] <donri> i've never seen that syntax though so i can't really help

[02:34] <djanatyn> yeah, that's what I'm testing

[02:34] <djanatyn> it is the same

[02:34] <donri> I only know it to be &infix:<+>

[02:34] <Radvendii> rakudo: say ~(*+* ... *)[^10]

[02:34] <p6eval> rakudo fdba16: OUTPUT«Not enough positional parameters passed; got 0 but expected 2␤  in whatevercode <anon> at /tmp/NqC40TOaKh:1␤  in sub coro at src/gen/CORE.setting:4423␤  in method reify at src/gen/CORE.setting:4398␤  in method reify at src/gen/CORE.setting:4183␤  in method reify at…

[02:34] *** obra joined
[02:35] <donri> perl6: say (&[+]).WHAT

[02:35] <p6eval> niecza v12-3-g193ca57: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared name:␤ '[+]' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 880 (die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1139 (P6.comp_unit @ 32) ␤  at /home/p6ev…

[02:35] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected "[+])."␤    expecting "::"␤    at /tmp/cOXelIqpdh line 1, column 7␤»

[02:35] <p6eval> ..rakudo fdba16: OUTPUT«Sub()␤»

[02:35] <donri> looks like it does work in rakudo?

[02:35] *** obra left
[02:35] <djanatyn>  ~(1, 2, &[+] ... *)[^10] == ~(1,2, *+* ... *)[^10] # I'm testing to make sure this is true

[02:35] <djanatyn> donri: yeah, the bug got fixed

[02:36] <djanatyn> ...but then it says "my $foo = &prefix:<!>;say $foo.signature;"

[02:36] <djanatyn> that's just confusing - what does that have to do with this bug?

[02:36] <Radvendii> rakudo: say ~(1, 1*+* ... *)[^10]

[02:36] <p6eval> rakudo fdba16: OUTPUT«1 1 1 1 1 1 1 1 1 1␤»

[02:36] <djanatyn> I should look at another bug report and the tests submitted

[02:36] *** Guest32833 left
[02:36] <Radvendii> rakudo: say ~(1, 1, *+* ... *)[^10]

[02:36] <p6eval> rakudo fdba16: OUTPUT«1 1 2 3 5 8 13 21 34 55␤»

[02:37] *** plutoid joined
[02:37] <donri> rakudo: &[+] === &infix:<+>

[02:37] <p6eval> rakudo fdba16:  ( no output )

[02:37] <donri> rakudo: say (&[+] === &infix:<+>)

[02:37] <p6eval> rakudo fdba16: OUTPUT«Bool::True␤»

[02:37] <donri> djanatyn: all you need should be: ok (&[+] === &infix:<+>)

[02:37] <Radvendii> i dont understand. when you evaluate a lambda in a list, it takes the previous elements and uses them as arguments?

[02:39] <Radvendii> is that right?

[02:40] <donri> Radvendii: well it's particular to ..., not lists

[02:41] <Radvendii> so what is the overarching rule?

[02:41] <donri> http://perl6advent.wordpress.com/2010/12/04/the-sequence-operator/

[02:43] <donri> sleepy time for me

[02:43] <donri> the rule is very liberal as all things perl

[02:44] <donri> there's no single one way to use "..."

[02:44] <donri> hope the link helps, gotta sleep

[02:45] *** donri left
[02:46] *** Rafael_Arcangel joined
[02:46] *** Rafael_Arcangel left
[02:48] <Radvendii> ... is briliant

[02:48] <Radvendii> thanks!

[02:49] *** japhb_ left
[02:57] <colomon> jnthn: no idea why round hangs.  I barely had time to report the bug someone else found.  :)

[02:59] *** wolfman2_ left
[03:12] <sorear> I blame multiple dispatch

[03:19] *** Lothar left
[03:19] *** Lothar joined
[03:25] *** wolfman2000 joined
[03:29] *** envi_ joined
[03:32] *** s1n1 left
[03:36] *** jimmy1980 left
[03:39] <djanatyn> moritz / tadzik: *poke*

[03:40] *** bluescreen10 left
[03:43] *** jimmy1980 joined
[03:44] *** jeffreykegler left
[03:46] *** Radvendi1 joined
[03:46] *** Radvendi1 left
[03:46] <sjn> Question... Are there any good grammar tutorials online atm?

[03:53] *** jimmy1980 left
[04:01] *** jimmy1980 joined
[04:01] *** Radvendii left
[04:04] *** Radvendii joined
[04:08] *** toebu joined
[04:17] <djanatyn> /home/djanatyn/roast/S03-sequence/basic.rakudo .. ok       

[04:17] <djanatyn> All tests successful.

[04:17] <djanatyn> \o/

[04:18] *** Radvendii left
[04:18] <djanatyn> okay, I'm almost certain this won't be accepted, but I'm going to submit it anyway, because it's at the very least progress!

[04:20] *** Radvendii joined
[04:34] *** jimmy1980 left
[04:35] *** jimmy1980 joined
[04:35] *** f00li5h joined
[04:37] <djanatyn> https://github.com/perl6/roast/pull/9

[04:38] *** toebu left
[04:42] *** jaldhar joined
[04:58] *** worr joined
[05:07] *** jimmy1980 left
[05:13] *** clkao joined
[05:13] *** jimmy1980 joined
[05:22] *** cooper left
[05:25] *** packetknife left
[05:30] *** koban joined
[05:36] *** colomon left
[05:41] *** cognominal_ left
[05:45] *** odoacre left
[05:47] *** odoacre joined
[06:03] *** Radvendii left
[06:05] *** kaleem joined
[06:07] *** lestrrat left
[06:07] *** jimmy1980 left
[06:08] *** jimmy1980 joined
[06:08] *** lestrrat joined
[06:13] <Woodi> hallo today

[06:14] <Woodi> how to write class with fields not available for methods in that class except that field accesor ?

[06:14] <sorear> You can't, sorry.

[06:24] <Woodi> in Perl5 there was a way - using clousures

[06:25] <Woodi> k, I will test clousures in v6

[06:28] <sorear> uhm

[06:28] <sorear> I do not think I understand you

[06:29] <sorear> tadzik: ping

[06:30] <moritz> djanatyn: *backpoke*

[06:32] <moritz> sjn: "Using Perl 6" has an introduction to regexes and grammars

[06:32] <dalek> roast: 5d94616 | Jonathan++ | S03-sequence/basic.t:

[06:32] <dalek> roast: RT #76046: &[+] in infix:<...>

[06:32] <dalek> roast: review: https://github.com/perl6/roast/commit/5d94616007

[06:32] <dalek> roast: fcb6304 | moritz++ | S03-sequence/basic.t:

[06:32] <dalek> roast: Merge pull request #9 from djanatyn/master

[06:32] <dalek> roast: 

[06:32] <dalek> roast: GCI - RT #76046

[06:32] <dalek> roast: review: https://github.com/perl6/roast/commit/fcb6304856

[06:33] <moritz> djanatyn++

[06:33] <aloha> Karma for djanatyn is now 7

[06:35] <dalek> book: 84489ff | moritz++ | src/ (2 files):

[06:35] <dalek> book: fix a thinko and a grammaro, Entonian++

[06:35] <dalek> book: review: https://github.com/perl6/book/commit/84489ffedc

[06:40] <moritz> mberends++ # advent post

[06:40] <aloha> Karma for mberends is now 159

[06:41] <mberends> \o/ gm moritz

[06:46] *** molaf joined
[06:46] *** daxim joined
[06:59] *** raiph left
[07:01] *** wtw joined
[07:09] *** mberends left
[07:16] <tadzik> sorear: pong

[07:16] <tadzik> djanatyn: pong

[07:26] *** molaf left
[07:33] *** wk joined
[07:39] *** lue left
[07:41] * moritz just had a small relevation

[07:42] <moritz> you know, method lookup and sub lookup are similar, excpt that sub lookup consults the outer lexpads, and method lookup the "outer" classes (ie the ones we inherit from)

[07:43] <moritz> and in this picture, role application is just like importing subs into a lexical scope

[07:54] <awwaiid> or a lookup overlay

[07:55] <awwaiid> er, yeah I see what you mean. scopes overlay scopes

[07:56] *** jerome__ left
[07:57] *** alim joined
[07:59] *** jerome__ joined
[08:01] *** toebu joined
[08:02] *** PZt left
[08:03] *** mj41 joined
[08:04] *** PZt joined
[08:15] <odoacre> what was the name of that cool program that was like grep -r but had syntax hilighting and skipped over SCM files ?

[08:15] *** fsergot left
[08:16] *** GlitchMr joined
[08:17] *** alim left
[08:21] <moritz> odoacre: ack

[08:21] <moritz> https://gist.github.com/1434231

[08:21] <odoacre> moritz: right, thanks

[08:22] <moritz> erm, wrong paste

[08:22] <moritz> http://betterthangrep.com/

[08:22] <odoacre> yeah i have it i just could not remember the name

[08:31] <moritz> nom: say 123.round

[08:31] <p6eval> nom fdba16: OUTPUT«(timeout)»

[08:33] *** mj41 left
[08:36] *** fsergot joined
[08:39] *** toebu left
[08:47] <moritz> I'm fixing the rounders now

[08:48] <jnthn> moritz: great, thanks :)

[08:48] * jnthn is getting stuff sorted out for Stockholm trip

[08:50] *** mj41 joined
[08:54] <moritz> is there a *fast* way to check if a num is one of Inf, -Inf, or NaN?

[09:05] *** cognominal joined
[09:13] *** hundskatt left
[09:16] *** fsergot left
[09:21] <dalek> roast: d413b87 | moritz++ | S (2 files):

[09:21] <dalek> roast: rakudo fudges

[09:21] <dalek> roast: review: https://github.com/perl6/roast/commit/d413b879c9

[09:22] *** tzhs joined
[09:32] *** alim joined
[09:35] *** alim_ joined
[09:36] *** fsergot joined
[09:37] *** alim left
[09:37] *** alim_ is now known as alim

[09:39] *** jimmy1980 left
[09:42] *** fsergot left
[09:43] *** plutoid left
[09:44] *** jimmy1980 joined
[09:46] *** [particle] left
[09:48] *** [particle] joined
[10:07] *** alim_ joined
[10:08] *** alim left
[10:08] *** alim_ is now known as alim

[10:08] *** fsergot joined
[10:11] *** ezito joined
[10:15] *** fsergot left
[10:30] <GlitchMr> perl6: print .chr for 0x20..0x7E

[10:30] <p6eval> niecza v12-3-g193ca57: OUTPUT«Unhandled exception: Unable to resolve method chr in class Int␤  at /tmp/sbvxchzAq4 line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2224 (ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2225 (module-CORE @ 58) ␤  at /home/p6e…

[10:30] <p6eval> ..pugs b927740, rakudo fdba16: OUTPUT« !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~»

[10:30] <GlitchMr> :)

[10:32] <GlitchMr> perl6: print 2.2~400

[10:32] <p6eval> niecza v12-3-g193ca57: OUTPUT«11/5400»

[10:32] <p6eval> ..pugs b927740, rakudo fdba16: OUTPUT«2.2400»

[10:41] <GlitchMr> perl6: print {2+2}.eval.perl # probably invalid, but whatever...

[10:41] <p6eval> rakudo fdba16: OUTPUT«Method 'eval' not found for invocant of class 'Block'␤  in block <anon> at /tmp/QQXVbDGWzA:1␤  in <anon> at /tmp/QQXVbDGWzA:1␤»

[10:41] <p6eval> ..pugs b927740: OUTPUT«<SubBlock(<anon>)>»

[10:41] <p6eval> ..niecza v12-3-g193ca57: OUTPUT«Unhandled exception: Unable to resolve method eval in class Block␤  at /tmp/N3JkUaPwpt line 1 (mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2224 (ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2225 (module-CORE @ 58) ␤  at /home/…

[10:41] *** dakkar joined
[10:43] *** colomon joined
[10:48] *** jimmy1980 left
[10:51] *** jimmy1980 joined
[11:05] *** alim left
[11:20] *** jimmy1980 left
[11:25] <djanatyn> moritz: :D

[11:25] <djanatyn> what's my next task?

[11:26] *** ezito left
[11:26] *** jimmy1980 joined
[11:36] *** abercrombie left
[11:37] *** abercrombie joined
[11:51] <moritz> djanatyn: there's another test writing tickets

[11:51] <moritz> djanatyn: search for me as a mentor, shouldn't be too hard to find then

[11:51] *** araujo left
[11:52] <djanatyn> I don't think I can

[11:52] <djanatyn> I can only search by title or organization

[11:53] <djanatyn> ...by the way, are there any tests involving bailador?

[11:54] <djanatyn> I was going to wait a little while before I accepted my next task, as our school is having a programming competition this week I'm participating in.

[11:55] <djanatyn> But, if I could use Bailador in that, I'd love to :)

[11:57] <moritz> djanatyn: we can publish new tasks on Dec 18th, I think

[11:57] <djanatyn> Oh, fun.

[11:57] <djanatyn> Well, it's over on friday ;)

[11:58] <moritz> djanatyn: best contact tadzik about it, he knows bailador much better then me, and he's also a GCI mentor

[11:58] <djanatyn> so I'll accept that new ticket task this weekend, then.

[11:59] <djanatyn> maybe. I might just use Dancer2 or a python web framework, still not sure

[11:59] <moritz> djanatyn: http://www.google-melange.com/gci/task/view/google/gci2011/7174240

[11:59] <djanatyn> but if bailador is usable and not terribly slow that would be fun

[12:00] <moritz> aye

[12:05] <jnthn> travel to stockholm - probably back this evening &

[12:13] *** fridim_ joined
[12:13] *** Psyche^ joined
[12:15] *** benabik left
[12:16] *** Patterner left
[12:16] *** Psyche^ is now known as Patterner

[12:23] *** araujo joined
[12:28] *** fridim_ left
[12:39] <colomon> nom: say 23.542323.round

[12:39] <p6eval> nom fdba16: OUTPUT«(timeout)»

[12:40] <colomon> nom: say "hello"

[12:40] <p6eval> nom fdba16: OUTPUT«hello␤»

[12:40] <colomon> nom: say 23.542323.round

[12:40] <p6eval> nom fdba16: OUTPUT«(timeout)»

[12:42] *** mkramer joined
[12:49] *** toebu joined
[12:51] *** odoacre left
[12:51] *** odoacre joined
[12:53] <moritz> erm, did I forget to push?

[12:54] *** mkramer left
[12:54] <dalek> rakudo/nom: f5c1975 | moritz++ | / (4 files):

[12:54] <dalek> rakudo/nom: fix rounders

[12:54] <dalek> rakudo/nom: 

[12:54] <dalek> rakudo/nom: Does not handle big ints properly, but this is as good as old master ever got

[12:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f5c197569d

[12:55] <colomon> moritz++

[12:55] <aloha> Karma for moritz is now 2843

[12:56] *** mkramer joined
[12:56] *** mkramer left
[12:57] *** bluescreen10 joined
[12:58] *** benabik joined
[13:02] <colomon> nom: say 23.542323.round

[13:02] <p6eval> nom fdba16: OUTPUT«(timeout)»

[13:03] *** toebu left
[13:04] <moritz> evalbot rebuild nom

[13:04] <p6eval> OK (started asynchronously)

[13:16] *** tzhs left
[13:19] *** risou_awy is now known as risou

[13:22] *** GlitchMr left
[13:25] *** wk left
[13:29] *** simcop2387 left
[13:30] *** simcop2387 joined
[13:36] <moritz> nom: say 23.542323.round

[13:36] <p6eval> nom f5c197: OUTPUT«24␤»

[13:40] <colomon> \o/

[13:49] *** shinobicl left
[13:54] <awwaiid> idea: define (at runtime) a new operator, say \\, which takes a list on the left and right, passing the list on the left as STDIN to shell execution to the list on the right, returning a list.

[13:54] <awwaiid> the idea being to add a simple op that would make the REPL good for doing some shell manipulations

[13:55] <awwaiid> hm. but that's not quite right.

[13:55] *** jimmy1980 left
[13:57] <awwaiid> I'll noodle

[14:00] *** jimmy1980 joined
[14:01] *** shinobicl joined
[14:01] <tadzik> djanatyn: what do you need about bailador?

[14:02] *** serk17 joined
[14:04] *** pothos joined
[14:05] *** jimmy1980 left
[14:07] *** jimmy1980 joined
[14:08] *** toebu joined
[14:08] *** carlin left
[14:11] *** meraxes joined
[14:15] <djanatyn> tadzik: How...complete is it?

[14:15] <djanatyn> and how fast is it?

[14:16] <djanatyn> and, is it possible to get it running on windows?

[14:16] <tadzik> it's not complete at all :)

[14:16] <tadzik> it should be running on windows just fine, but I can't tell, I have no windows

[14:17] <djanatyn> ah. :)

[14:18] <djanatyn> well, is it possible to hack up a simple little website?

[14:19] <tadzik> Requests per second:    11.97 [#/sec] (mean)

[14:19] <tadzik> not bad for Rakudo :)

[14:19] <tadzik> (that's a hello world app)

[14:20] <djanatyn> okay :)

[14:20] <djanatyn> it seems very minimal. do I need any important modules to install it?

[14:20] <djanatyn> and, if so, how should I go about doing that? with panda?

[14:20] <tadzik> HTTP::Server::Simple

[14:20] <tadzik> panda should be able to install it, but there's no bailador in its DB

[14:20] <tadzik> adding it may be a nice GCI task too

[14:21] <tadzik> oh wait, isn't today a deadline for new projects?

[14:21] *** kaleem left
[14:21] <tadzik> oh, nope, 16th

[14:21] <djanatyn> the deadline is december 18th, I think

[14:22] <PerlJam> I thought it was the 16th

[14:22] <djanatyn> oh, 16th, then :)

[14:22] *** jimmy1980 left
[14:22] *** wk joined
[14:29] *** wk left
[14:29] *** mj41 left
[14:29] *** envi_ left
[14:29] *** Trashlord left
[14:31] *** jimmy1980 joined
[14:31] *** wk joined
[14:31] *** mj41 joined
[14:31] *** envi_ joined
[14:31] *** Trashlord joined
[14:33] * [Coke] yawns over coffee.

[14:34] <flussence> Tests=20054

[14:34] <flussence> wow

[14:36] <tadzik> yeah, superawesome

[14:44] *** serk17 left
[14:51] *** wk left
[14:55] *** jimmy1980 left
[15:02] *** jimmy1980 joined
[15:09] *** koban left
[15:10] *** icwiener joined
[15:12] *** envi_ left
[15:17] *** wtw left
[15:19] *** icwiener left
[15:19] *** icwiener joined
[15:20] *** icwiener left
[15:20] *** icwiener joined
[15:29] *** toebu left
[15:30] <colomon> \o/

[15:36] <dalek> rakudo/nom: e1cd4c5 | coke++ | t/spectest.data:

[15:36] <dalek> rakudo/nom: track failure modes

[15:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e1cd4c54fe

[15:36] *** wk joined
[15:37] *** jimmy1980 left
[15:44] *** jimmy1980 joined
[15:50] <sorear> good * #perl6

[15:51] <colomon> \o

[15:55] *** am0c left
[15:55] *** am0c joined
[16:00] *** icwiener left
[16:01] *** icwiener joined
[16:25] *** serk17 joined
[16:27] *** raiph joined
[16:31] *** daxim left
[16:32] <[Coke]> sorear: ho.

[16:35] <raiph> 'hi','hallo','salut', &greets ... *

[16:35] <colomon> ho.

[16:35] <colomon> ho.

[16:35] <raiph> yesterday's advent cal entry was flipflop

[16:36] <raiph> Gernot Says: Nice, but flipflop operators are not yet implemented in Rakudo Nom :-(

[16:36] <colomon> nom: say 4 ff 5

[16:36] <p6eval> nom e1cd4c: OUTPUT«===SORRY!===␤Flip flop operators are not yet implemented at line 1, near " 5"␤»

[16:37] <colomon> niecza: say 4 ff 5

[16:37] <p6eval> niecza v12-3-g193ca57: OUTPUT«1␤»

[16:37] <colomon> b: say 4 ff 5

[16:37] <p6eval> b 1b7dd1: OUTPUT«===SORRY!===␤Flip flip operators are not yet implemented at line 22, near " 5"␤»

[16:37] <colomon> Looks like they are implemented in niecza

[16:38] <raiph> right

[16:38] <TimToady> .oO("How the Irish Saved Civilization")

[16:38] *** kaare_ joined
[16:39] <[Coke]> not everything is going to be available in every impl. I would recommend somehow tagging the articles to show which perl6 you should be trying these on.

[16:40] <TimToady> .oO(Civilization is unevenly distributed...)

[16:40] <[Coke]> Huh. only one advent post from 2010 made it in as a test?

[16:40] <[Coke]> I thought we did that last year, not 2 years ago. woof.

[16:41] <raiph> I didn't mean to say anything was wrong, or make work

[16:45] <[Coke]> ugh, getting a lot of failures in niecza's spectest.

[16:49] <[Coke]> niecza: (2 + 3i) > (2 + 2i)

[16:49] <p6eval> niecza v12-3-g193ca57:  ( no output )

[16:49] <[Coke]> nom: (2 + 3i) > (2 + 2i)

[16:49] <p6eval> nom e1cd4c: OUTPUT«No applicable candidates found to dispatch to for 'Real'. Available candidates are:␤:(Mu, Mu %_)␤␤  in method Real at src/gen/CORE.setting:643␤  in sub infix:<>> at src/gen/CORE.setting:2194␤  in sub infix:<>> at src/gen/CORE.setting:2194␤  in block <anon> at /tmp/CP9…

[16:49] *** hundskatt joined
[16:49] <[Coke]> std: (2 + 3i) > (2 + 2i)

[16:49] <p6eval> std be1f10e: OUTPUT«ok 00:01 121m␤»

[16:51] <[Coke]> sorear: https://github.com/sorear/niecza/issues/78 was accidentally closed. keyboard shortcuts suck if you're not aware you're using them, sorry

[16:52] <raiph> What from a layered architectural pov is the common layers of existing/main P6 impls?

[16:52] <raiph> something like backend, nqp*, grammar, core settings, non-core ?

[16:52] <[Coke]> there are no common layers, I think. the STD grammar is probably the only thing they have in common.

[16:52] <raiph> do impl copy/paste from each other at the higher layers?

[16:53] <[Coke]> parts of the setting are shareable, yes. not sure if anyone IS sharing them.

[16:53] *** am0c left
[16:53] <raiph> could ff from niecza be copied to rakudo, and vice versa?

[16:53] *** jeffreykegler joined
[16:54] <benabik> ff might be able to be copied from b

[16:54] <raiph> seems like an ff impl would be all higher level code reusing lower level stuff that might be common across impl

[16:54] *** xinming left
[16:54] <[Coke]> what is the github way to write an issue number? "issue #79" ?

[16:55] <benabik> Either #79 or gh-79

[16:55] <benabik> (IIRC)

[16:55] <[Coke]> raiph: find the ff impl from niecza and see. ;)

[16:55] <PerlJam> raiph: depends on what you mean by "copied"  :-)

[16:55] <PerlJam> raiph: If you're just talking about conceptually, the answer is yes.

[16:55] *** serk17 left
[16:56] <PerlJam> raiph: if you mean to cut-n-paste code, that won't work at all

[16:57] <raiph> coke: i'd already taken that on by dint of commenting. ;)

[16:57] <raiph> PerlJam: why not?

[16:58] <benabik> niecza's ff impl is based on niecza's internals.  https://github.com/sorear/niecza/blob/master/src/Operator.pm6#L136

[16:58] <benabik> Things like ::GLOBAL::NieczaActions.gensym is unlikely to exist in Rakudo.

[16:58] <PerlJam> raiph: as benabik says

[16:59] <raiph> PerlJam: it can't be that way in general, of course, but for higher level stuff, implemented purely in terms of existing stuff, if that existing stuff is common to impls...

[16:59] <colomon> doesn't ff have to be pretty low-level?  it's got per-usage state, that's not normal for operators

[16:59] <raiph> benabik, PerlJam: ok

[16:59] *** pat_js joined
[16:59] <colomon> alpha: say 4 ff 5

[16:59] <p6eval> alpha : OUTPUT«Confused at line 10, near "ff 5"␤in Main (file <unknown>, line <unknown>)␤»

[17:00] <colomon> pugs: say 4 ff 5

[17:00] <p6eval> pugs b927740: OUTPUT«*** No such subroutine: "&infix:ff"␤    at /tmp/B9D8uwvNdU line 1, column 5 - line 2, column 1␤»

[17:00] <benabik> b: say 4 ff 5

[17:00] <p6eval> b 1b7dd1: OUTPUT«===SORRY!===␤Flip flip operators are not yet implemented at line 22, near " 5"␤»

[17:00] <benabik> I thought ff existed in b.  :-/

[17:00] <colomon> Niecza's the only implementation, it appears.

[17:00] <PerlJam> yep

[17:00] <[Coke]> argh, niecza checks out an unpushable copy of spec.

[17:00] <raiph> colomon: that might not be normal, but, unless an impl makes non-spec assumptions, why would that affect things?  

[17:01] <[Coke]> raiph: implementations might cheat for speed, or because they don't implement enough perl6 to not use the lower levels.

[17:02] <[Coke]> so, yes, as said: in theory, that sharing is possible. It just may not be practicable.

[17:03] <colomon> ralph: I don't think you can implement ff in Perl 6 without macros, which no one supports yet.

[17:03] <raiph> coke: right. but by doing that they ultimately slow things down. that's why it makes sense ff is not yet implemented; i'm pretty sure it ought to be done in terms of lower level p6 that should be the same across most p6 impls 

[17:04] <colomon> how else do you write a function which behaves different at every point it is called?

[17:04] <raiph> colomon: gotcha.

[17:06] <raiph> colomon: must not only carry state, but state per appearance in code. even generated code.

[17:09] <[Coke]> raiph: how are you sure of this? ;)

[17:09] *** MayDaniel joined
[17:10] <[Coke]> (obviously, having experience with one of the perl 6 implementations would lend some weight to the theory.)

[17:10] <raiph> coke: oops, dropped a must. must remember not to do that

[17:11] <raiph> coke: have a nanonats worth of experience from couple years ago

[17:11] <raiph> *nanognats

[17:12] <dalek> roast: 4b1a35c | coke++ | S32-num/complex.t:

[17:12] <dalek> roast: niecza fudge

[17:12] <dalek> roast: review: https://github.com/perl6/roast/commit/4b1a35cf4d

[17:13] *** colomon left
[17:13] *** wolfman2000 left
[17:15] <[Coke]> ugh. what is the correct way to git remote add a readwrite github so git shuts up when I try to do a rebase?

[17:16] <[Coke]> *github remote

[17:16] <raiph> i thought i saw something about niecza dropping "official" support for mono for now; was that right?

[17:16] *** molaf joined
[17:16] *** Ingis-Kahn joined
[17:17] <[Coke]> https://github.com/sorear/niecza/blob/master/docs/announce.v12 doesn't seem to agree with that.

[17:17] *** colomon joined
[17:19] <raiph> coke: i recall some comment since then. will go try find.

[17:19] *** fridim_ joined
[17:19] <TimToady> sorear++ regularly panics about the CLR startup overhead, and thinks about other backends, but I don't see that mono is going away any time soon, given that it's still the most performant implementation once it gets going

[17:19] <aloha> Karma for sorear is now 2038

[17:20] <[Coke]> (that auto-announce was fixed in #parrot, btw. pinging bacek about this copy of aloha.)

[17:21] <jasonmay> that is a lot of karma

[17:21] <TimToady> well deserved

[17:21] <jasonmay> I also read it as "karma for sorear is the new 2038" at first, with overflow in mind :)

[17:22] *** kaare__ joined
[17:23] *** Ingis left
[17:23] *** shinobicl left
[17:23] *** kaare_ left
[17:23] <colomon> [Coke]: unless there's been some sort of change since the last time I looked, (2 + 3i) > (2 + 2i) should not fail, but what it does is not firmly defined (but it should be consistent).

[17:24] <raiph> TimToady: thanks.

[17:24] *** mj41 left
[17:35] <[Coke]> colomon: there is a spec test saying it should die.

[17:35] *** aindilis left
[17:35] <colomon> [Coke]: how new is it?

[17:35] <[Coke]> so feel free to update the ticket, the spec, the nieczabug, and create a rakudo bug. ;)

[17:36] <[Coke]> colomon: what should it do? it's nonsensical, at best.

[17:36] <colomon> not crash and be consistent

[17:37] <PerlJam> colomon: that's crazy talk!

[17:37] <[Coke]> not crash is axiomatic, yes? or do you mean not throw an exception? (or not fail?)

[17:37] <[Coke]> and if "consistent"... with what?

[17:37] <colomon> consistent with itself

[17:38] <colomon> not throw an exception, or return Fail or something

[17:38] *** aindilis joined
[17:38] <[Coke]> ok, it should always return false?

[17:38] <colomon> that's probably less than ideal, but I think it would be legal as I understand the state of things.

[17:39] <colomon> The idea is that we don't want numerical comparison blowing up because a Complex number snuck in.

[17:39] <[Coke]> Anyway, there's a committed test. I'm just trying to clean things up. If you need it cleaner, by all means. ;)

[17:39] *** donri joined
[17:48] *** zamolxes_ left
[17:49] *** zamolxes joined
[17:51] *** icwiener left
[17:52] *** icwiener joined
[17:59] *** hundskatt left
[17:59] <tadzik> hello

[18:07] <raiph> tadzik: hi

[18:21] *** hundskatt joined
[18:23] *** dakkar left
[18:29] *** birdwindupbird joined
[18:29] *** birdwindupbird left
[18:34] *** GlitchMr joined
[18:35] *** envi_ joined
[18:39] *** jeffreykegler left
[18:41] *** kaleem joined
[18:42] <colomon> do we have any plans for tomorrow's advent calendar?

[18:43] *** envi_ left
[18:46] <PerlJam> colomon: I could probably finish my little write-up on Grammar::Profiler

[18:46] <colomon> PerlJam++

[18:46] <aloha> Karma for perljam is now 56

[18:48] *** Chillance joined
[18:48] <tadzik> Grammar::Profiler? Wow, looking forward to that

[18:48] <PerlJam> eh, it's not that big of a deal.

[18:51] *** jeffreykegler joined
[18:54] *** Trashlord left
[18:55] *** GlitchMr left
[18:59] *** kaleem left
[19:12] *** molaf left
[19:34] *** jeffreykegler left
[19:38] *** Chillance left
[19:40] *** Chillance joined
[19:45] *** shinobicl joined
[19:49] *** Chillance left
[19:50] *** Chillance joined
[19:51] *** jeffreykegler joined
[19:51] *** ageis joined
[19:51] *** jeffreykegler left
[19:56] <[Coke]> niecza: say ~('foo,bar,baz,' ~~ m/[<alpha>+]+ %  ','/

[19:56] <p6eval> niecza v12-3-g193ca57: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unable to parse parenthesized expression at /tmp/wY1tfiUhoX line 1:␤------> [32msay ~([33m⏏[31m'foo,bar,baz,' ~~ m/[<alpha>+]+ %  ','/[0m␤Couldn't find final ')'; gave up at /tmp/wY1tfiUhoX line 1 (EOF):␤------> [32m('fo…

[19:56] <[Coke]> niecza: say 'foo,bar,baz,' ~~ m/[<alpha>+]+ %  ','/

[19:56] <p6eval> niecza v12-3-g193ca57: OUTPUT«#<match from(0) to(11) text(foo,bar,baz) pos([].list) named({"alpha" => (#<match from(0) to(1) text(f) pos([].list) named({}.hash)>, #<match from(1) to(2) text(o) pos([].list) named({}.hash)>, #<match from(2) to(3) text(o) pos([].list) named({}.hash)>, #<ma…

[19:56] <[Coke]> niecza: print 'foo,bar,baz,' ~~ m/[<alpha>+]+ %  ','/

[19:57] <p6eval> niecza v12-3-g193ca57: OUTPUT«#<match from(0) to(11) text(foo,bar,baz) pos([].list) named({"alpha" => (#<match from(0) to(1) text(f) pos([].list) named({}.hash)>, #<match from(1) to(2) text(o) pos([].list) named({}.hash)>, #<match from(2) to(3) text(o) pos([].list) named({}.hash)>, #<ma…

[19:57] <[Coke]> niecza: say 'foo,bar,baz,' ~~ m/[<alpha>+]+ %%  ','/

[19:57] <p6eval> niecza v12-3-g193ca57: OUTPUT«#<match from(0) to(11) text(foo,bar,baz) pos([].list) named({"alpha" => (#<match from(0) to(1) text(f) pos([].list) named({}.hash)>, #<match from(1) to(2) text(o) pos([].list) named({}.hash)>, #<match from(2) to(3) text(o) pos([].list) named({}.hash)>, #<ma…

[20:00] <dalek> roast: 751e709 | coke++ | S05-m (2 files):

[20:00] <dalek> roast: niecza un/fudge

[20:00] <dalek> roast: review: https://github.com/perl6/roast/commit/751e709a9e

[20:05] <jnthn> evenin' from Stockholm 

[20:05] <tadzik> hello jnthn 

[20:07] *** ksi joined
[20:11] <jnthn> o/ tadzik 

[20:13] <tadzik> how are things?

[20:14] <colomon> \o

[20:14] <jnthn> tadzik: Pretty good. My journey here ran very smoothly, I'm enjoying it being properly cold, and this week's course is pretty low stress to deliver.

[20:15] <jnthn> tadzik: How's things there? Keeping busy? ;)

[20:17] <tadzik> like hell

[20:17] <tadzik> project, exam, project, exam, 3 projects, and then finally weekend :)

[20:18] *** jaldhar left
[20:18] <tadzik> the only joy being 'make spectest' and seeing the numbers grow :)

[20:18] <jnthn> tadzik: Ouch! :/ Good luck with it all.

[20:19] *** estrabd is now known as estrabd_afk

[20:19] <tadzik> at least I don't get to implement semaphores for Minix :)

[20:19] <tadzik> a friend has it as his OS project for tomorrow, and he just saw that it was a GSoC project in 2009

[20:22] *** jaldhar joined
[20:25] *** cooper joined
[20:27] *** GlitchMr joined
[20:35] *** donri left
[20:36] *** localhost left
[20:37] *** localhost joined
[21:03] <PerlJam> someone go look at  http://perl6advent.wordpress.com/2011/12/04/grammarprofiler and give me a little feedback and it could tomorrow's post

[21:03] <PerlJam> (you have to be logged in to see it since it's a draft)

[21:09] *** GlitchMr left
[21:10] *** bluescreen10 left
[21:12] <jnthn> PerlJam: taking a look while I wait for a compile :)

[21:13] <jnthn> "From the outside looking in, the basic technique is to replace the normal grammar mechanism with a custom grammar that intercepts method lookup"

[21:13] <jnthn> What you're really doing is replacing the normal grammar *meta-object*, which is the thing that defines how grammar packages work.

[21:14] <jnthn> Put another way, it's not so much a custom grammar as a custom implementation of what "grammar" means as a keyword.

[21:14] <PerlJam> aye.  I understand that, I just suck at writing :)

[21:14] <PerlJam> editing now :)

[21:14] <jnthn> "so it looks like I need to add “WHAT” and “perl” to that list of methods to pass through unscathed."

[21:15] <jnthn> Note tht WHAT is a macro, not a method

[21:15] <jnthn> So you don't need to worry about that one.

[21:15] <PerlJam> yeah, I wasn't sure 

[21:19] <dalek> rakudo/nom: e7e343b | jonathan++ | src/ (4 files):

[21:19] <dalek> rakudo/nom: First cut implementation of ff, ^ff, ff^ and ^ff^. Runs at least enough for the advent post.

[21:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e7e343bd43

[21:20] <PerlJam> jnthn++ nice

[21:20] <aloha> Karma for jnthn is now 2465

[21:20] *** Trashlord joined
[21:20] <PerlJam> jnthn: re-look at my advent post?

[21:21] *** pothos left
[21:22] *** y3llow joined
[21:22] *** pothos joined
[21:22] <PerlJam> er, potential post on grammar profiling that is

[21:23] <jnthn> PerlJam: I think you'll win "longest sentence in this year's advent calendar" award, but it's more accurate now :)

[21:23] <PerlJam> heh

[21:23] <jnthn> Note you could do .^name rather than .WHAT.perl by the way :)

[21:24] <PerlJam> d'oh!  I *knew* there was something simple I was forgetting!

[21:24] <jnthn> heh, I forgot on my first read-through :)

[21:25] <[Coke]> niecza: my class Foo { multi method gist(Foo:D:) { "gisted"; } }

[21:25] <p6eval> niecza v12-3-g193ca57: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤In parameter declaration, typename 'Foo:D' must be predeclared (or marked as declarative with :: prefix) at /tmp/NGSE9EFSJ7 line 1:␤------> [32mmy class Foo { multi method gist(Foo:D[33m⏏[31m:) { "gisted"; } }[0m␤␤Parse f…

[21:26] <[Coke]> "niecza can't refer to a class while it's being defined" ?

[21:26] <PerlJam> jnthn: I'll leave it the way it is and you can comment on the post to give the readers something to try  :)

[21:30] <PerlJam> [Coke]: I looks like it's trying to use "Foo:D" as the name instead of just "Foo".  Lookss like niezca buglet to me at the moment.

[21:30] <PerlJam> std: my class Foo { multi method gist(Foo:D:) { "gisted"; } }

[21:30] <p6eval> std be1f10e: OUTPUT«ok 00:01 123m␤»

[21:30] *** tokuhirom joined
[21:30] <PerlJam> rakudo: my class Foo { multi method gist(Foo:D:) { "gisted"; } }

[21:30] <p6eval> rakudo e7e343:  ( no output )

[21:31] <PerlJam> Hmm.  I just scheduled my post to publish on Dec 7 at 0000 and it updated the permalink.  I never noticed that before.

[21:32] *** icwiener left
[21:32] <[Coke]> PerlJam++

[21:32] <aloha> Karma for perljam is now 57

[21:33] <dalek> rakudo/nom: f70f20a | jonathan++ | docs/ChangeLog:

[21:33] <dalek> rakudo/nom: Some ChangeLog entries.

[21:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f70f20abef

[21:35] <dalek> zavolaj: 898c645 | jnthn++ | lib/NativeCall.pm6:

[21:35] <dalek> zavolaj: Add first cut of version 2 of Zavolaj. Doesn't do any pointer/array stuff just yet; that's coming soon.

[21:35] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/898c6457f1

[21:35] <dalek> zavolaj: a7ae5ba | jnthn++ | README:

[21:35] <dalek> zavolaj: Update README a little bit. We need much better docs really.

[21:35] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/a7ae5bac6f

[21:35] <dalek> zavolaj: e293ff0 | jnthn++ | lib/NativeCall.pm6:

[21:35] <dalek> zavolaj: Add CStruct passing support. Improve error message when trying to pass a class or other object not based on CStruct.

[21:35] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/e293ff0a05

[21:35] <dalek> zavolaj: d22dd75 | jnthn++ | lib/NativeCall.pm6:

[21:35] <dalek> zavolaj: Better string support, including multiple encodings.

[21:35] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/d22dd75a7f

[21:35] <dalek> zavolaj: 4561a4f | jnthn++ | lib/NativeCall.pm6:

[21:35] <dalek> zavolaj: Support opaque pointers in NativeCall.

[21:35] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/4561a4f4c8

[21:35] <jnthn> Zavolaj's nom update is now in its master branch. 

[21:36] <tadzik> \o/

[21:36] <tadzik> does it pass its tests

[21:36] <tadzik> ?

[21:36] <[Coke]> jnthn++

[21:36] <aloha> Karma for jnthn is now 2466

[21:37] <dalek> zavolaj: b082d38 | jonathan++ | examples/win32-api-call.p6:

[21:37] <dalek> zavolaj: Update Win32 API example.

[21:37] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/b082d385f8

[21:38] <jnthn> tadzik: I didn't figure out how to even run the tests on Windows yet. :(

[21:38] <tadzik> ah

[21:38] <tadzik> I'll check it out

[21:38] <jnthn> tadzik: nmake test gives me a syntax error in the makefile :(

[21:38] <PerlJam> jnthn: What is the $c parameter in the pblock returned by find_method() in Grammar::Debugger?

[21:38] <tadzik> can you show me?

[21:38] <[Coke]> jnthn: ah, I might be able to help with that if I can stop attending winter concerts.

[21:39] <tadzik> I don't have to work hard on me birthday :P

[21:39] *** jimmy1980 left
[21:39] <jnthn> tadzik: show you the error?

[21:39] <[Coke]> tadzik++ # old fart

[21:39] <aloha> Karma for tadzik is now 841

[21:39] <jnthn> tadzik: makefile(14) : fatal error U1000: syntax error : ')' missing in macro invocation

[21:40] <jnthn> PerlJam: short for $cursor"

[21:40] <PerlJam> gotcha.

[21:41] <jnthn> PerlJam: Though I'm not sure right now why we actually pull it out explicitly from the rest of the args.

[21:41] <tadzik> jnthn: long-ish paste: https://gist.github.com/1440125

[21:41] <tadzik> [Coke]: thanks :)

[21:42] <jnthn> tadzik: Seems the tests will want some updating... :)

[21:42] <jnthn> tadzik: oh, I see what's up

[21:43] <jnthn> tadzik: I'm guessing you used to be able to do "is native()" in order to load from the current executable

[21:43] <jnthn> tadzik: Apart from I'm not especially sure that trick actually works on Windows...

[21:44] *** jimmy1980 joined
[21:47] <dalek> zavolaj: b0bedfa | jonathan++ | TODO:

[21:47] <dalek> zavolaj: The things that used to be in the TODO are now possible. Add a bunch of other things that do, however, need doing.

[21:47] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/b0bedfa747

[21:47] *** MayDaniel left
[21:48] <dalek> mu: 12c29dc | duff++ | misc/perl6advent-2011/ (2 files):

[21:48] <dalek> mu: [p6advent] "officially" claim Dec 7 :)

[21:48] <dalek> mu: review: https://github.com/perl6/mu/commit/12c29dcc37

[21:49] <dalek> roast: 36085c3 | coke++ | S04-statements/for.t:

[21:49] <dalek> roast: niecza fudge

[21:49] <dalek> roast: review: https://github.com/perl6/roast/commit/36085c33f9

[21:50] <dalek> niecza: 8c09133 | coke++ | t/spectest.data:

[21:50] <dalek> niecza: remove dead spectest file, skip broken one

[21:50] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8c09133116

[21:51] <[Coke]> phenny: tell sorear that "make spectest" should be green again; all failures that were blocking it now have tickets.

[21:51] <phenny> [Coke]: I'll pass that on when sorear is around.

[21:55] *** y3llow left
[21:55] *** pothos left
[21:56] *** pothos joined
[21:57] *** y3llow joined
[21:58] *** y3llow left
[21:59] *** y3llow joined
[22:01] *** Chillance left
[22:04] *** jimmy1980 left
[22:04] *** kaare__ left
[22:05] *** jimmy1980 joined
[22:07] *** donri joined
[22:16] <jnthn> early night &

[22:40] *** jimmy1980 left
[22:46] *** jimmy1980 joined
[22:51] *** wk left
[22:58] *** jimmy1980 left
[23:00] *** jimmy1980 joined
[23:02] *** aloha left
[23:03] *** aloha joined
[23:07] *** envi_ joined
[23:12] *** hundskatt left
[23:15] *** Sarten-X left
[23:20] *** hundskatt joined
[23:25] *** benabik left
[23:26] *** envi_ left
[23:26] *** Sarten-X joined
[23:28] *** cooper left
[23:29] *** cooper joined
[23:48] *** alester left
[23:51] *** envi_ joined
