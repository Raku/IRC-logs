[00:01] <tadzik> [Coke]: what time tomorrow?

[00:02] *** stepnem left
[00:06] *** thou left
[00:07] <[Coke]> tadzik: I don't know when the extension is good until.

[00:07] <[Coke]> checking dukeleto's email...

[00:07] <tadzik> istr "Monday"

[00:08] *** stepnem joined
[00:08] <tadzik> well, it's Monday 1AM

[00:09] <[Coke]>  Monday, November 28th at 8:00 UTC

[00:09] <tadzik> okay

[00:10] <[Coke]> colomon: looking at colomon/ABC on github; a "here's how you run it" would be very helpful.

[00:11] <diakopter> sorear: all the ones supported by libicu I guess..?

[00:12] <diakopter> hm, nqp doesn't seem to support "\c[UNICODE CHAR NAME]"

[00:25] * diakopter looks into adding it

[00:26] *** thou joined
[00:28] *** replore joined
[00:31] *** wolfman2000 joined
[00:35] *** cooper joined
[00:36] *** thou left
[00:38] *** snearch left
[00:44] *** alvis left
[00:45] *** imarcusthis left
[00:46] <colomon> [Coke]: apologies!  I've had "proper readme for ABC" on my todo list for about three months now...

[00:46] *** alvis joined
[00:48] *** rsimoes1 left
[00:48] *** rsimoes1 joined
[00:50] *** imarcusthis joined
[00:55] *** wolfman2000 left
[01:00] <diakopter> sorear: why

[01:01] *** arlinius left
[01:01] *** am0c joined
[01:14] <diakopter> std: /<-:!InArrows>/

[01:15] <p6eval> std be1f10e: OUTPUT«ok 00:01 120m␤»

[01:17] *** imarcusthis left
[01:19] <sorear> diakopter: I didn't think Parrot supported very many char props

[01:19] <diakopter> oh

[01:20] *** imarcusthis joined
[01:20] <diakopter> oh hm, I was wrong about nqp not supporting \c[]

[01:21] *** silug joined
[01:28] <dalek> roast: f199800 | diakopter++ | S05-mass/properties- (4 files):

[01:28] <dalek> roast: change properties rx to the new syntax

[01:28] <dalek> roast: review: https://github.com/perl6/roast/commit/f199800df6

[01:31] <diakopter> who knows what I just broke

[01:34] *** hypolin joined
[01:39] *** ethndbst left
[01:51] *** wolfman2000 joined
[02:35] *** Guest86525 left
[02:37] *** donri left
[02:37] *** orafu left
[02:37] *** orafu joined
[03:14] * tadzik adds some new GCI tasks

[03:15] *** icwiener left
[03:17] <djanatyn> tadzik: :D

[03:17] <djanatyn> Where's the GCI task listing page, again?

[03:17] <tadzik> djanatyn: some are already on :)

[03:17] <djanatyn> :O

[03:18] <djanatyn> what should I search for, "perl 6"?

[03:18] <tadzik> I... am not sure :)

[03:18] <tadzik> yeah, the ones I added are all tagged "perl6"

[03:19] <djanatyn> hmm, I guess they all got snatched up

[03:19] <djanatyn> GCI doesn't have a very nice search feature, IMO

[03:19] <tadzik> to say it gently

[03:20] <djanatyn> I'll check back again tommorow morning, in ...let's see

[03:20] <djanatyn> 7 hours

[03:20] <djanatyn> Do you think there will be a bunch of perl6 tasks avaiable by then?

[03:20] <tadzik> moritz: I'm adding you as a mentor to all tasks, I hope you don't mind :)

[03:21] <tadzik> djanatyn: they are available now :)

[03:21] *** satyavvd joined
[03:21] <tadzik> like http://www.google-melange.com/gci/task/edit/google/gci2011/7185260

[03:21] <tadzik> this one could be tough

[03:25] <djanatyn> hmm, it says that I can't edit it

[03:25] <tadzik> oh

[03:26] <djanatyn> I tried replacing s/task/view in the url, and it said that the page was inactive at this time

[03:26] <tadzik> well, I'm not suprised :)

[03:26] <tadzik> how about http://www.google-melange.com/gci/task/view/google/gci2011/7195397 ?>

[03:27] <tadzik> http://www.google-melange.com/gci/task/view/google/gci2011/7185260 should be ok too

[03:27] <tadzik> ok, time for me to get some sleep

[03:29] <djanatyn> Both of those say "This page is inactive at this time"

[03:29] <djanatyn> but, don't worry about it, I'll figure it out tommorow

[03:29] <djanatyn> g'night

[03:29] <diakopter> o/

[03:29] <colomon> \o

[03:37] *** envi_ joined
[03:41] *** lestrrat left
[03:42] *** lestrrat joined
[03:45] *** Chillance joined
[03:54] *** packetknife left
[04:04] *** envi_ left
[04:12] *** Chillance left
[04:24] *** wolfman2000 left
[04:53] *** Chillance joined
[05:20] *** woosley joined
[05:21] *** orafu left
[05:47] *** agentzh joined
[05:53] *** packetknife joined
[06:00] *** localhost left
[06:02] *** localhost joined
[06:02] *** kaleem joined
[06:43] <moritz> djanatyn: it looks like the tasks need to be approved by an admin first

[06:46] *** packetknife left
[06:46] <diakopter> moritz: could you review the last commit to roast?

[06:48] <moritz> diakopter: I believe that some of them are wrong

[06:48] *** hundskatt joined
[06:48] <moritz> -ok("\x[8340]"  ~~ m/^<!isInArabicPresentationFormsA>.$/

[06:48] <moritz> +ok("\x[8340]"  ~~ m/^<:!InArabicPresentationFormsA>.$/,

[06:48] <moritz> diakopter: <!...> is zero-width, but I don't think <:!...> is

[06:48] <moritz> or is it?

[06:49] <sorear> <:!foo> means <-:foo>

[06:49] <diakopter> ! there wasn't zero-width

[06:49] <moritz> then why is tehre a dot after it?

[06:49] <sorear> <!foo> is zero width, <-foo> is not

[06:49] <diakopter> oh, hm

[06:50] <diakopter> I guess all the :! should be !: then?

[06:51] <moritz> no

[06:51] <moritz> just remove the dots

[06:52] <diakopter> how would that keep the meaning (sorry it's taking me so long to understand)

[06:52] <moritz> well

[06:53] <moritz> previously it was <zero-width>.

[06:53] <moritz> then it's <one-character>

[06:54] <diakopter> I still don't understand; I'm sorry

[06:54] <moritz> the old tests did not test negative character classes

[06:54] <moritz> but zero-width assertions, followed by a dot

[06:54] <moritz> that combination emulated a negative character class

[06:55] <Woodi> hi, functional programming arive some time ago, maybe time for something new ? games programing ! :) http://chessprogramming.wikispaces.com/Parallel+Search

[06:55] <moritz> diakopter: are you with me so far?

[06:55] <diakopter> moritz: no; the zero-width assertion followed by a dot doesn't seem to me it would emulate a negative character class

[06:56] <moritz> diakopter: but it does

[06:56] <moritz> it says "match if the next character is not isInArabicPresentationFormsA. Match one character"

[06:57] <diakopter> oh; that's what ! means.  I see now

[06:57] <moritz> that's the same as says "match the next character if it is not isInArabicPresentationFormsA"

[06:57] <diakopter> I forgot ! meant negated.

[06:57] <moritz> aye, <!foo> is short for <!before <foo>>

[06:58] *** koban joined
[07:01] *** satyavvd left
[07:01] <dalek> roast: 7ea256e | diakopter++ | S05-mass/properties- (4 files):

[07:01] <dalek> roast: braino

[07:01] <dalek> roast: review: https://github.com/perl6/roast/commit/7ea256e4e6

[07:04] <diakopter> I haven't found any tests for things like <+ :HexDigit - :Upper >

[07:05] <diakopter> and for &|^ combos and for parens grouping

[07:05] <diakopter> seems kinda hard to implement anyway

[07:09] <diakopter> nqp: say(1^^0)

[07:09] <p6eval> nqp: OUTPUT«Confused at line 1, near "say(1^^0)"␤current instr.: 'nqp;HLL;Grammar;panic' pc 23429 (src/stage2/gen/NQPHLL.pir:6732) (src/stage2/gen/NQPHLL.pm:329)␤»

[07:17] <moritz> diakopter: those features are relatively new

[07:17] <moritz> and thus not tested yet

[07:18] <moritz> maybe they are tested  as  <+alpha-hexdigit> or so somewhere

[07:20] <sorear> &|^ combos are _extremely_ new

[07:20] <diakopter> oh :)

[07:21] <sorear> nobody implements them yet; I know how but lack the tuits atm

[07:21] <sorear> they will very likely be in niecza v13

[07:23] <diakopter> std: /<:a -:b>/

[07:23] <p6eval> std be1f10e: OUTPUT«ok 00:01 120m␤»

[07:26] <diakopter> nom: say "a" ~~ /<[ab] | [b]>/

[07:26] <p6eval> nom 2154eb: OUTPUT«===SORRY!===␤regex assertion not terminated by angle bracket at line 1, near "| [b]>/"␤»

[07:27] <diakopter> nom: say "a" ~~ /<[ab] + [b]>/

[07:27] <p6eval> nom 2154eb: OUTPUT«=> <a>␤␤»

[07:55] *** replore left
[07:57] *** satyavvd joined
[08:21] *** skangas joined
[08:30] <jnthn> mornin'

[08:31] *** koban left
[08:39] *** skangas left
[08:42] <moritz> \o

[08:43] *** satyavvd left
[08:47] *** mj41 joined
[08:57] <sorear> o/

[08:58] *** alvis left
[09:05] <snarkyboojum> o_

[09:06] <moritz> )o.

[09:12] *** alvis joined
[09:16] <masak> o-

[09:28] *** woosley left
[09:38] *** dakkar joined
[09:39] *** skangas joined
[09:47] <moritz> http://www.perlmonks.org/?node_id=940242 might interest you... or not. I kinda think I'm wasting my time

[09:49] <masak> moritz: typo: ss/most of use/most of us/

[09:50] <moritz> masak: thanks, fixed

[09:51] <masak> oh, it's a discussion with chromatic.

[09:51] * masak stops reading out of self-preservation

[09:51] <moritz> it didn't start as one.

[09:51] *** envi_ joined
[09:52] <masak> I think I know the terrain of opinion that chromatic maps out. I've read it many times, I've understood it, and reading it again doesn't give me anything.

[09:52] <masak> it can lower morale unnecessarily, though.

[09:53] <masak> I believe we are addressing his concerns as fast as we can with our resources, and have been all the time.

[09:54] <masak> ...and I do sympathise. my code has often been the canary for breakages.

[09:54] *** agentzh left
[09:55] <masak> that is, after all, what it's like being an early adopter. things break when whole subsystems (in Rakudo or Parrot) get replaced.

[09:57] <gfldex> i noticed :->

[09:58] <masak> what I feel is unfair and silly in chromatic's comments is the "rewrites cause things to break, and take too long! I told you so!" component.

[09:58] <masak> as if we're doing the rewrites just for the heck of it to see things get worse.

[09:58] <gfldex> at the other head, it's christmas every time something starts to works again

[09:58] <moritz> well, he does emphasize that he doesn't tell developers what to do...

[09:58] <moritz> probably because he doesn't have a plan of action either that both works and avoids breakage

[09:59] <jnthn> "There's also still no new Rakudo Star release." - OK, so let's get this straight. He complains about lack of stability/continuity/stuff keeping working, then complains about the fact that we didn't put out a new star release? The point of the Star ones is to provide something more stable. If that's his interest, why is he even looking at the compiler releases?

[09:59] <masak> he does reserve the right to produce bad press, though, or the equivalent of it.

[09:59] <moritz> ah well, a waste of time.

[09:59] <jnthn> That we haven't rushed out a star relesae with tons of regressions is a *strength*.

[09:59] <masak> :(

[10:00] <masak> I'm starting to see why it's important to identify and isolate panics in individuals.

[10:03] *** hypolin left
[10:03] *** Trashlord joined
[10:04] * masak wishes pmichaud were here

[10:04] <snarkyboojum> there's always the good ol' line "the show must go on" :D

[10:05] <masak> snarkyboojum: absolutely. let's continue delivering Perl 6 to the world. :)

[10:08] <snarkyboojum> masak: I have nothing but respect and awe for perl6 hackers, and yes I agree :D

[10:10] <masak> and while we're at it, let's think a bit more about chromatic's definition of "product". the Star releases are pointing in that direction, I believe, but surely we can do more, with our limited but nonzero resources.

[10:15] *** mkramer joined
[10:24] <moritz> nom: say $*VM

[10:24] <p6eval> nom 2154eb: OUTPUT«("name" => "parrot", "config" => {"git_describe" => "RELEASE_3_10_0-30-ga8cb7da", "sha1" => "a8cb7da75c1c7e1db08a6d50330044b831347fe1", "a" => ".a", "ar" => "ar", "ar_extra" => "", "ar_out" => "", "archname" => "x86_64-linux-gnu-thread-multi", "arflags" => "cr", "as" …

[10:24] <moritz> nom: say %*VM

[10:24] <p6eval> nom 2154eb: OUTPUT«Failure.new()␤»

[10:26] <moritz> std: my @a; $@a

[10:26] <p6eval> std be1f10e: OUTPUT«[31m===[0mSORRY![31m===[0m␤Invalid hard reference syntax at /tmp/quWOLnzCf7 line 1:␤------> [32mmy @a; $[33m⏏[31m@a[0m␤    expecting any of:␤       desigilname␤    twigil␤Parse failed␤FAILED 00:01 120m␤»

[10:26] <moritz> why is that forbidden?

[10:26] <moritz> why not make it the equivalent of $(@a) ?

[10:27] <masak> sounds good to me, but I wouldn't be surprised if there's a reason not to that I don't see right now.

[10:27] <masak> what does $(@a) mean, exactly? 'item @a'?

[10:27] <moritz> yes

[10:28] <moritz> (modulo precdence)

[10:28] <masak> is there a difference between 'item @a' and [email@hidden.address] there is for .list

[10:31] <moritz> if you override .item, yes

[10:31] <moritz> but what's the difference for .list?

[10:32] <masak> hold on, I'll get the relevant backlog.

[10:35] <masak> http://irclog.perlgeek.de/perl6/2011-11-18#i_4726855

[10:41] <moritz> nom: class X::Foo { ... }; class X::Foo { }

[10:41] <p6eval> nom 2154eb: OUTPUT«===SORRY!===␤The following packages were stubbed but not defined:␤    X::Foo␤␤»

[10:42] <moritz> jnthn: ^^ that one is blocking me on the exceptions stuff

[10:43] * moritz RTs it

[10:43] <masak> moritz++

[10:43] <masak> was just gonna ask :)

[10:45] <tadzik> good morning

[10:45] <mls> morning!

[10:45] *** daxim_ joined
[10:45] <phenny> mls: 26 Nov 20:01Z <jnthn> tell mls it seems that any infinite recursion in Rakudo generates a hang when trying to find an exception handler

[10:45] <jnthn> nom: class Y::Foo { ... }; class Y::Foo { }

[10:45] <p6eval> nom 2154eb:  ( no output )

[10:45] <jnthn> er. :)

[10:45] <moritz> there's a 'my package X { }' in the setting

[10:46] <moritz> but if I put Foo into that package, the error stays the same

[10:46] <jnthn> nom: package Y { }; class Y::Foo { ... }; class Y::Foo { }

[10:46] <p6eval> nom 2154eb:  ( no output )

[10:46] <jnthn> nom: my package Y { }; class Y::Foo { ... }; class Y::Foo { }

[10:46] <p6eval> nom 2154eb:  ( no output )

[10:47] <sorear> niecza: class X::Foo { ... }; class X::Foo { } # curious

[10:47] <p6eval> niecza v11-27-gdaa9117:  ( no output )

[10:47] * sorear out

[10:47] *** daxim left
[10:47] <jnthn> moritz: Oddness. Guess you didn't golf it beyond having the setting involved?

[10:47] <moritz> nom: class Y::Foo { ... }; my package Y { }; class Y::Foo { }

[10:47] <p6eval> nom 2154eb: OUTPUT«===SORRY!===␤The following packages were stubbed but not defined:␤    Y::Foo␤␤»

[10:48] <moritz> jnthn: I just did :-)

[10:48] <jnthn> oh

[10:48] <jnthn> ...do we actually do that?

[10:48] <jnthn> (put the Y::Foo before the my package Y)?

[10:48] <moritz> yes

[10:48] <moritz> erm

[10:48] <masak> that happens, yes.

[10:48] <moritz> I don't know how else to do it

[10:48] <masak> it's a legitimate use case.

[10:49] <moritz> both X and X::Foo are defined in Exceptions.pm

[10:49] <jnthn> nom: my class Y::Foo { ... }; my package Y { }; my class Y::Foo { }

[10:49] <p6eval> nom 2154eb: OUTPUT«===SORRY!===␤The following packages were stubbed but not defined:␤    Y::Foo␤␤»

[10:49] <moritz> and I need to throw typed exceptions earlier than that

[10:49] <jnthn> moritz: Is there a reason for the "my package Y { }"?

[10:49] <jnthn> Are you actually putting something in it?

[10:50] <jnthn> It's a bug though for sure.

[10:50] <moritz> jnthn: well, it's there because nested packages didn't work when I wrote the code

[10:50] <moritz> erm

[10:50] <moritz> x::foo package didn't work

[10:50] <jnthn> moritz: Yeah, I thought I fixed that bit up :)

[10:51] <moritz> jnthn: I'll try to change that

[10:51] <jnthn> The whole notion of "my x::foo { }" is kinda weird though. The my only applies to the x.

[10:53] <jnthn> What bothers me more is that if the setting does my X::Foo { }, and somebody in their programs creates a class X::Bar { }, then it's going and adding an extra entry into X.WHO

[10:54] <moritz> erm

[10:54] <moritz> that's... ugly

[10:54] <jnthn> Indeed

[10:54] <moritz> can't we just store X::Foo in the lexpad, and lookup X::Foo in the lexpad first

[10:54] <moritz> and only look into X:: if we don't find it in the lexpad?

[10:54] <jnthn> You mean, store the thing with the colons in the lexpad?

[10:55] <moritz> ye

[10:55] <moritz> s

[10:55] <jnthn> eek :)

[10:55] <jnthn> That will mean that

[10:55] <jnthn> X::Foo

[10:55] <jnthn> X.WHO.<Foo>

[10:55] <jnthn> Would give different results

[10:55] <moritz> aye

[10:55] <jnthn> No, I don't think that'll fly.

[10:56] <jnthn> What may work is that we create a new package in the lexpad and copy the .WHO

[10:56] <jnthn> Just like a multi copies its outer's candidate list and then adds its own stuff

[10:56] <moritz> hmmm

[10:56] * jnthn isn't really happy with a lot of package-y stuff at the moment, tbh.

[10:57] <jnthn> It's ended up pretty complex to try and get things to fall out correctly. I feel I'm missing some clean realization of package nested that does the things we want.

[10:58] * moritz kinda thinks that sorear will agree there

[11:00] <masak> :)

[11:02] <jnthn> Maybe we want too much. :)

[11:05] <moritz> Perl 6 -- Maybe we want too much.

[11:06] <masak> ^_^

[11:07] <jnthn> Well, I think part of it is that many, many things have become far more lexically oriented. So packages - in terms of their namespacing role - have become far less prominent.

[11:07] <jnthn> sub dispatch doesn't even looking in the package any more, for example.

[11:08] <jnthn> Exportation is package-ish, but actually relies on a lexically scoped EXPORT package in the UNIT of the module doing the exporting. And so forth.

[11:09] <jnthn> I think the only thing that's packaged scoped by default is...packages. :)

[11:09] <moritz> and our-variables :-)

[11:10] <moritz> and enums, iirc (but they are pseudo packages, no?)

[11:11] <jnthn> nom: enum Foo <a b c>; $Foo::x = 42; say $Foo::x

[11:11] <p6eval> nom 2154eb: OUTPUT«42␤»

[11:11] <jnthn> Seems so :)

[11:12] <jnthn> Probably EnumHOW does Stashing or some such :)

[11:12] <moritz> :-)

[11:12] <djanatyn> Hmm, still can't find any perl6 tasks. :\

[11:13] * tadzik asks on #gci

[11:14] <moritz> std: my class Y::A::B { ... }; class Y::Z { }; class Y::A::B { }

[11:14] <p6eval> std be1f10e: OUTPUT«ok 00:01 119m␤»

[11:15] <moritz> nom: my class Y::A::B { ... }; class Y::Z { }; class Y::A::B { }

[11:15] <p6eval> nom 2154eb:  ( no output )

[11:16] <djanatyn> tadzik: \o/

[11:16] <djanatyn> thank you.

[11:16] <moritz> djanatyn: http://www.google-melange.com/gci/task/view/google/gci2011/7177376

[11:18] <djanatyn> Oh, sweet!

[11:18] <djanatyn> Okay, I can see that task.

[11:19] <moritz> http://www.google-melange.com/gci/task/view/google/gci2011/7184225

[11:19] <moritz> djanatyn: just search for 'Moritz Lenz' as a mentor

[11:20] <moritz> though it seems only 3 are approved

[11:21] <djanatyn> Okay, I claimed the "Style for perl6.org" task :)

[11:21] <moritz> \o/

[11:21] <djanatyn> I can do a bit of webdesign, and I really like the perl6.org site

[11:21] <djanatyn> I've wanted to steal something from it a long time :)

[11:22] <djanatyn> although I'll probably try to make it look like the perl6 module directory

[11:22] <moritz> if you want, you can link to stylesheets on those pages directly

[11:22] <djanatyn> Ah, that sounds like a good idea

[11:22] <moritz> and add custom box stuff in the custom css

[11:23] <djanatyn> okay, well, thank you for helping me :)

[11:23] <djanatyn> I've gotta get ready for school, see ya.

[11:23] <moritz> have the appropriate amount of fun :-)

[11:34] *** fridim_ joined
[11:36] *** daxim_ is now known as daxim

[11:43] *** donri joined
[12:13] *** Psyche^ joined
[12:16] *** Patterner left
[12:16] *** Psyche^ is now known as Patterner

[12:18] *** wk left
[12:25] *** replore_ joined
[12:42] *** mkramer left
[12:43] *** mkramer joined
[12:43] *** Trashlord left
[12:45] *** Trashlord joined
[13:09] *** bacek joined
[13:10] *** JimmyZ joined
[13:17] *** molaf joined
[13:26] *** wk joined
[13:30] *** mtk joined
[13:32] <Woodi> hmm, I logged in but in other tab. but not want to be anonymous, http://www.perlmonks.org/?node_id=940401

[13:33] *** wk left
[13:33] *** wk joined
[13:34] <masak> hm. for a post about how yelling does not help, I'm not sure that post helped either. :/

[13:36] <daxim> I'm barely involved.  Woodi, I read your post/it mostly comes across to me as "I need to vent my frustrations"

[13:36] <masak> yeah.

[13:37] <[Coke]> I am bemused that chromatic is venting on perlmonks, which is clearly too slow to be usable for any practical purpose. ;)

[13:37] <masak> I'm frustrated at chromatic too, but... not publicly, in posts.

[13:38] <masak> [Coke]: chromatic visits #perl6 quite seldom. he's done it three times in 2011, every time after he wrote a blog post about Perl 6 and the #perl6 regulars misconstrued it in some way or other.

[13:39] <colomon> I dunno, I think I'm kind of feeling the pain chromatic is describing.

[13:39] <[Coke]> I felt all that pain just using parrot.

[13:39] <colomon> I mean, nom is pretty awesome, but we're still struggling to get back functionality we had a year and a half ago in b

[13:40] <JimmyZ> most by a wonderful vision.  

[13:40] <[Coke]> I cannot tell you how many times I had to re-write partcl, for example. (not including the most recent 'try to rewrite it in nqp' which is now already obsolete since nqp is no longer the newest/best thing)

[13:41] <[Coke]> so, to be using something that is using parrot, and going through its own rewrite cycles, is no doubt frustrating. I am unsure who his target audience is, though.

[13:41] <colomon> [Coke]: yeah, I surely don't think all the blame lies with the Rakudo developers!

[13:41] <[Coke]> not the early adopters. we already know about the issues; Is it the people who are waiting for perl6 ? because they were already waiting, either in anticipation or uncaringly.

[13:42] <daxim> James Russell is the target audience

[13:42] <colomon> but I do kind of think that maybe in retrospect, nom was made the master branch about six months too early.

[13:42] <[Coke]> the developers are just trying to make a decent product with limited tuits.

[13:42] <masak> colomon: I'm not saying chromatic is *wrong*. it does feel like he's overstating facts he should know the causes of, though. but he's probably colored by recent disillusionment.

[13:42] <[Coke]> colomon: if no one was working on master... what problem would keeping master master have solved?

[13:43] <[Coke]> anyway, sunk costs, they is us: are we heading in the right direction from where we are now?

[13:44] <masak> the ng refactor and the nom refactor were both quite big, and followed each other fairly quickly. but they've both led to more features and more stability. I'd argue they were inevitable.

[13:44] <colomon> [Coke]: it certainly feels like we're moving in the right direction, just frustratingly slowly.

[13:45] <masak> because the alternative would've been the sitution in 2008: tight Parrot coupling, partial features, no-where to develop Rakudo, instability.

[13:45] <colomon> masak: on chromatic, if nothing else dismissing niecza out of hand is pretty crazy.

[13:45] <masak> it's easy to forget that those refactors were made for sound architectural reasons.

[13:46] * JimmyZ is -1 to Hague Grant Application: PL/Perl6 Infrastructure and Improvements

[13:46] <masak> colomon: I cannot judge that. I don't live in the US, where patent fights seem a real threat.

[13:46] <jnthn> I find it mostly depressing that people think we go through painful rewrites for the fun of it. 

[13:46] <dalek> mu: d445465 | duff++ | misc/perl6advent-2011/topic-brainstorming:

[13:46] <dalek> mu: Add R* topic

[13:46] <dalek> mu: review: https://github.com/perl6/mu/commit/d4454657f8

[13:46] <jnthn> It's NOT FUN.

[13:46] <masak> the nom one is meant to be the last big one.

[13:47] <jnthn> Certainly for my tenure in Rakudo development, nom is the last big one.

[13:47] <daxim> I don't believe it

[13:47] <[Coke]> masak: you so funny.

[13:47] <masak> [Coke]: no, really. we don't have more switchings out of grammar engine and object model on the horizon.

[13:47] <masak> I'm not saying there won't be more refactors. of course there will be.

[13:47] <jnthn> Sure there will be.

[13:48] <masak> but they will be much smaller in scope and duration.

[13:48] * [Coke] apologizes for doing pretty much nothing perl 6 related over his most recent break.

[13:48] <jnthn> The thing with ng, in hindsight, was that it dealt with some architectural issues, but left others unresolved.

[13:48] <[Coke]> does feel a lot less stressed, though. :)

[13:49] <Woodi> hmm, then, again :) , maybe set points to achive in implementing spec parts - to avoid frustration. points defining is trick in busting morale i hear :)

[13:49] *** molaf left
[13:49] <Woodi> so mark few features somehow...

[13:49] <Woodi> becouse horisont is far far away....

[13:50] <JimmyZ> rakudo is going very well, imo

[13:51] <JimmyZ> but parrot ....

[13:51] <Woodi> how many developers in parrot atm ?

[13:52] <masak> ooh, misc/perl6advent-2011/topic-brainstorming! I had missed that until now.

[13:53] <PerlJam> I sometimes think that chromatic purposely makes bold? loud? controversial? claims on various forums just to goad certain people into making things better or proving him wrong.

[13:53] <daxim> I call it the reverse troll

[13:53] <Woodi> sometimes it work

[13:53] <daxim> yes

[13:54] <PerlJam> but it's one of those things that can only be viewed in hindsight.  It's a the superposition of a rant and a "I meant to do that"

[13:54] <daxim> I love a good rant.

[13:55] <dalek> mu: b43b813 | colomon++ | misc/perl6advent-2011/schedule:

[13:55] <dalek> mu: Claim a couple of days.

[13:55] <dalek> mu: review: https://github.com/perl6/mu/commit/b43b813420

[13:56] *** benabik left
[13:56] <colomon> darn, I love editing right on github.  :)

[13:57] *** takadonet joined
[13:58] <PerlJam> The most useful an disturbing item of note in that perlmonks thread is that most people seem to talk about perl 6 in the future tense.  :-(

[13:58] <PerlJam> s/an/and/

[13:59] <PerlJam> moritz++ for fighting the good fight

[14:00] <masak> PerlJam: outsiders always seem to talk about Perl 6 in the future tense. "Perl 6 will do <something desired>", even in the cases when it already has the feature or does that thing.

[14:00] <masak> PerlJam: what they mean is maybe "When I start using Perl 6, it'll do <something desired> for me."

[14:01] <PerlJam> "Perl 6 Now!"  sounds like a good article for someone to write.  :)

[14:01] <masak> sounds like a good button to wear, too.

[14:01] <PerlJam> oh, there's scrottie's book called "Perl 6 Now" but that's about Perl 5 stuff 

[14:02] <colomon> except "Perl 6 Now!" sounds a little bit like you're demanding it rather than proclaiming it.

[14:02] *** envi_ left
[14:02] <masak> colomon: who's saying we're not? :)

[14:02] <PerlJam> :-)

[14:03] <donri> Perl 6 In Our Lifetime!

[14:03] * jnthn imagines a bunch of protesters with "Perl 6 Now!" placards

[14:03] <jnthn> .oO( Occupy Perl 6! )

[14:03] <PerlJam> colomon: How about "Perl 6 in the Present Tense" ?  doesn't quite have a ring to it ;)

[14:03] <colomon> PerlJam: I was thinking "Perl 6 is now" but that's not quite right either.

[14:04] <masak> "Using Perl 6, and It's Great"

[14:04] <PerlJam> jnthn: occupy <places where programming languages are popular>

[14:04] <donri> occupy freenode

[14:04] <JimmyZ> Is there any dynamic language's nci better than perl6's, which jnthn++ writes ?

[14:05] <daxim> you're not focusing.  in terms of jwz, how can perl 6 get me laid?

[14:09] <PerlJam> In any case, chromatic is entirely correct about one thing: people *are* waiting for "Perl 6 the Product"

[14:09] <colomon> and he's correct it's not here yet, either, IMO.

[14:09] <PerlJam> yep

[14:10] <colomon> On the other hand, trying to use it now is one of the single most useful things you can do to help get it to where it is going.

[14:10] <jnthn> Yes, but abrasive posts that irritate and suck up the time of people working on it will most certainly NOT help get "Perl 6 the Product" to be here.

[14:11] <PerlJam> really ... it's all Perl 5's fault.  If it hadn't set the bar so high, we'd already be there ;)

[14:11] <masak> no-one complained about chromatic's prolixity when he was on our side :P

[14:12] <PerlJam> masak: do you mean to say that he's no longer "on our side"? 

[14:13] <masak> PerlJam: for all I know, he's moved to a monastery with excellent wireless, and picked up COBOL.

[14:13] <daxim> you're all individuals!

[14:13] <colomon> daxim: I'm not

[14:13] <masak> :P

[14:18] <colomon> is sorear back from vacation yet?

[14:18] *** kaleem left
[14:18] <jnthn> colomon: Believe so...saw him this morning

[14:18] <colomon> \o/

[14:18] <colomon> I need to talk to him about optimizing mandelbrot in niecza.  :)

[14:21] <masak> best way to optimize mandelbrot in general, at least according to the Fractint school of thought, is to do it all with integer math.

[14:22] <colomon> masak: I'd be surprised if that were true in a p6 context

[14:23] <colomon> actually, I'd be a little bit surprised if it were even true on modern x86 platforms

[14:23] <colomon> it certainly was awesomely true in the "good ole days"

[14:24] <masak> aye.

[14:24] <colomon> basically, what seemed screamingly fast in niecza for writing mandelbrot to a file seems painfully slow when you're waiting for a window to draw.

[14:24] <PerlJam> colomon: For Dec 1, a godo retro-post would include how to get pugs ;)

[14:24] <PerlJam> s/godo/good/

[14:25] <PerlJam> (how does that happen?)

[14:25] <colomon> PerlJam: brains -- they are untrustworthy things

[14:25] <masak> finger un-sync?

[14:26] <PerlJam> anyway ... time for the day-of-endless-meetings for me

[14:26] * PerlJam &

[14:26] <JimmyZ> how about NativeCall to be core setting? hehe

[14:27] <jnthn> JimmyZ: It should need a "use" directive

[14:27] <jnthn> JimmyZ: We'll include it in R*

[14:27] <jnthn> Doesn't need/want to be in the compiler itself, imo.

[14:27] <JimmyZ> core lib is fine too...

[14:30] *** robins is now known as robinsmidsrod

[14:30] <JimmyZ> or https://github.com/quietfanatic/link-c , which can parse *.h files 

[14:31] *** colomon left
[14:35] *** colomon joined
[14:44] *** uniejo joined
[14:45] *** uniejo left
[14:50] *** LittlePanic72 joined
[14:56] *** LittlePanic72 left
[14:56] *** PacoLinux joined
[14:57] *** mishin joined
[14:59] *** Trashlord left
[15:06] <Woodi> code like: ... method ping() { $!sock.send( "$4\r\nPING\r\n" ) or return False; my Str $resp = $!sock.get() or return False; return True if $resp eq '+PONG'; return False }; ... }; for ^10000 { $r.ping() }

[15:06] <Woodi> takes 1.2s on nom atm. on Perl5 0.4s. who to blame ? parrot or rakudo ?

[15:07] <masak> that question is age-old, and unanswerable.

[15:07] <masak> it's like asking "nature or nurture?"

[15:07] <Woodi> you like unanswerable questions :)

[15:07] <masak> the architectures of Parrot and Rakudo mesh into each other.

[15:09] <jnthn> Woodi: Am I reading that right? Just a factor of 3 different from Perl 5?

[15:10] <Woodi> just tested. will check 

[15:10] <tadzik> oddness :)

[15:10] <jnthn> We...normally have a bigger gap ;)

[15:10] <[Coke]> jnthn: a factor of 3 and he's complaining! ;)

[15:11] <Woodi> 1.26s, will extract to separate script and test

[15:12] <masak> how much of that is startup time?

[15:13] <Woodi> $s = now; after startup

[15:13] <Woodi> count just code time

[15:14] <Woodi> must test, maybe i mess something

[15:14] <masak> rakudo: my $s1 = now; my $s2 = now; say $s2 - $s1

[15:14] <p6eval> rakudo 2154eb: OUTPUT«0.0161627759174326␤»

[15:15] <masak> well, a "now" call takes ~0.016 seconds :P

[15:17] <jnthn> That seems excessive...

[15:17] <Woodi> sending 10k pings one by one takes now 1.15s but all script execution 6.14s real and 5.78s user 

[15:19] <Woodi> problem is that redis optimization - pipelining - should work better but work few time longer... probably my code is to nested :)

[15:20] <jnthn> Woodi: Well, best way to find out where it spends time is profiling :)

[15:21] <mls> jnthn: please pull https://github.com/rakudo/rakudo/pull/43

[15:21] <Woodi> Pure Perl5: 0.35s; XS: 0.2s and pipelined: 0.018082857131958s  total

[15:22] <Woodi> jnthn: it is what you asked before and it is I want to ask how to do this :)

[15:22] <Woodi> C lvl or Parrot or Rakudo ?

[15:23] <jnthn> Woodi: C level and Rakudo/NQP level are both interesting in general.

[15:23] <jnthn> mls: done

[15:23] <Woodi> any manual ?

[15:23] <jnthn> mls: Does this fix the infinite recursion thing?

[15:23] <Woodi> blogpost ?

[15:23] <dalek> rakudo/nom: bd2f8df | mls++ | / (2 files):

[15:23] <dalek> rakudo/nom: invoke_catchhandler: tweak call chain after the invoke call, so that the recursion_limit is set correctly

[15:23] <dalek> rakudo/nom: 

[15:23] <dalek> rakudo/nom: Also added myself to CREDITS ;)

[15:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bd2f8dfa4c

[15:23] <dalek> rakudo/nom: f4ee614 | jonathan++ | / (2 files):

[15:23] <dalek> rakudo/nom: Merge pull request #43 from mlschroe/newexcept

[15:23] <dalek> rakudo/nom: 

[15:23] <dalek> rakudo/nom: invoke_catchhandler: tweak call chain after the invoke call, so that the...

[15:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f4ee614451

[15:24] <mls> jnthn: yes

[15:24] <jnthn> mls: Is there a guide to invoking the sub profiler? :)

[15:24] * jnthn just memorized the command by now... :)

[15:24] <Woodi> --invokeSubProfiler ? :)

[15:24] <mls> as perl6 doesn't support a "--profile" option yet, you need to do 'parrot -R subprof perl.pbc ...'

[15:25] <jnthn> mls: Yes, like that. How hard would it be to add a --profile?

[15:25] <mls> I think parrot supports switching runcores somehow, letme check the sources...

[15:26] <jnthn> Woodi: It's basically the incantation mls++ just wrote out

[15:26] <Woodi> ok

[15:26] <Woodi> now how to compile to pbc ? :)

[15:27] <jnthn> Woodi: It's already built

[15:27] <jnthn> Woodi: Did you "make install" or are you running Rakudo from build directory?

[15:27] <Woodi> installed to /opt/perl6

[15:27] <jnthn> Woodi: OK...there should be a perl6.pbc installed in there somewhere :)

[15:28] <Woodi> ok

[15:29] <mls> hmm, I didn't find a way. I'll talk to the parrot guys.

[15:33] *** wolverian left
[15:37] <Woodi> no perl.pbc in /opt/perl6/bin

[15:38] <Woodi> some flag during configure is needed for that ?

[15:38] <jnthn> Woodi: May be in /opt/perl6/lib or some such iirc

[15:39] <Woodi> found

[15:41] <Woodi> got PackFile_Header_validate: This Parrot cannot read bytecode files with version 12.0.

[15:42] <jnthn> Is it the correct Parrot?

[15:42] <Woodi> I removed Debian Star two day ago

[15:42] <Woodi> should be

[15:42] <jnthn> (the one in /opt/perl6/bin)?

[15:45] <Woodi> hang and memory 350mb+, ok ?

[15:46] <Woodi> maybe 10k loop iteration is not needed for trace ?

[15:47] <jnthn> oddness, it normally executes only a little slower than normal for me.

[15:47] <jnthn> That sounds....unusual.

[15:48] <mls> it should only be 10% slower

[15:48] <jnthn> yeah, that's what I've tended to observe

[15:48] <Woodi> want 4.7Gb file ?

[15:48] <Woodi> parrot.pprof.5457

[15:49] <mls> pprof?

[15:49] <mls> that's the wrong one

[15:49] <jnthn> Woodi: Did you do -R subprof, or something else? :)

[15:49] <mls> Do not use -R profile, but -R subprof

[15:50] <Woodi> -R profile

[15:51] *** JimmyZ left
[15:51] <Woodi> -R profiling - was in parrot manual :)

[15:52] <mls> yes, that's the old profile. It writes a line for every executed op.

[15:52] <mls> not really useful for a HLL like perl6

[15:53] <Woodi> ok, doing subprof

[15:53] <Woodi> it realy want to put result on screen, stderr

[15:54] <jnthn> Woodi: 2> callgrind.foo

[15:55] <dalek> rakudo/nom: 04a1158 | coke++ | t/spectest.data:

[15:55] <dalek> rakudo/nom: Track failure modes

[15:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/04a1158770

[15:58] *** mkramer left
[15:58] <Woodi> put that file somewhere ?

[15:59] <jnthn> Woodi: It's viewable with kcachegrind

[15:59] <jnthn> Woodi: If you want to take a look at it

[15:59] <jnthn> Otherwise, you can put it somewhere and I can take a look later on :)

[16:00] <Woodi> apt-get install kcachegrind eta: 3min

[16:01] <arnsholt> Be warned: kcachegrind is awesome

[16:01] <arnsholt> You're gonna want it for all your profiling from now on =)

[16:01] <jnthn> arnsholt: I know! I've spent some hours in that thing :)

[16:02] <arnsholt> I've not even used it that much! =D

[16:02] <Woodi> i'm on putty yet. ^c it ?

[16:03] <arnsholt> But for my research (dang, it's weird to say that!) I'm working on some code in Common Lisp, and the profile output not being trivially inputtable to kcachegrind does annoy me a bit

[16:03] <Woodi> eta 18s

[16:05] <Woodi> ok, eta job in 30 mins, witt see that visualizations :) 

[16:10] *** thou joined
[16:14] *** mkramer joined
[16:19] *** cooper left
[16:19] *** patch_ joined
[16:20] *** patch_ is now known as `patch`

[16:25] *** ethndbst joined
[16:33] *** mkramer left
[16:38] * TimToady is home again, fwiw, which ain't much...

[16:39] <jnthn> o/, TimToady :)

[16:39] <jnthn> Hope you had a nice trip, wherever it was :)

[16:39] <TimToady> ate some turkey

[16:40] * jnthn still has another month to wait until he gets turkey :)

[16:41] <Woodi> subprof file is in http://lunski.pl/~sylwek/perl/  mainly Grammar.pm and Cursor.pir shows up

[16:41] <[Coke]> jiggity jig.

[16:41] <TimToady> on the negative side, been battling a shingles flareup on my tongue, and the parts of my brane connected to it, so am rather out of sorts still

[16:41] <jnthn> Woodi: oh...hm

[16:41] <jnthn> Woodi: I fear that the benchmark is being rather skewed by compilation time.

[16:41] <jnthn> TimToady: Ouch. Doesn't sound like fun. :( Hope it clears up soon.

[16:42] <TimToady> it's on the mend, but it just takes time

[16:43] <masak> TimToady! \o/

[16:43] <TimToady> on the positive side, having my trigeminal nerve fried by herpes zoster means my migraines are relatively painless, but I still get all the other effects...

[16:44] <masak> :/

[16:44] *** alester joined
[16:44] <TimToady> and I have a job interview, sort of, this afternoon

[16:45] <takadonet> TimToady: good luck!

[16:45] * TimToady is kinda looking around to see if now is a good time to switch to a different Perl 6 vendor :)

[16:46] *** Guest2721 joined
[16:47] <TimToady> or who will support at least one full-time Perl 6 dude :)

[16:47] <masak> we're hiring :)

[16:47] * TimToady also doesn't want to move to Sweden :)

[16:47] <masak> dang. well, worth a shot.

[16:48] <[Coke]> TimToady: good luck.

[16:48] <TimToady> there are several possibilities in Sili Convalley

[16:49] <TimToady> partly it's just that my current company got acquired, and I have no sense of whether I'll have a place in the new scheme of things

[16:52] <Woodi> jnthn: Str is heavy red, maybe just becouse I use string protocol...

[16:52] <TimToady> sigh, only five days of backlogging to do...

[16:52] <jnthn> TimToady: It was quietish here on some of them, as I remember it.

[16:53] * TimToady blames turkeys

[16:54] * masak decommutes

[17:03] * jnthn ponders how on earth SJ has ended up selling first class tickets for cheaper than standard class ones on a normally rather busy Friday evening train...

[17:04] <jnthn> ...sales optimization algorithms clearly do interesting things.

[17:04] *** fsergot left
[17:05] <cognominal_> When going to the Bruxelles peerl workshop with Thalys, first class was cheaper than second class. I suppose they don't want to waste food.

[17:07] <japhb> TimToady, if you have enough working brane, I could really use a ruling on http://irclog.perlgeek.de/perl6/2011-11-25#i_4755358 and the continuation at http://irclog.perlgeek.de/perl6/2011-11-25#i_4756773 and http://irclog.perlgeek.de/perl6/2011-11-25#i_4757166 ... would you mind taking a look?

[17:07] <cognominal_> there was wifi too but not connected to the larger world. Better check that kind of detail if want to upgrade for wifi.

[17:07] <jnthn> cognominal_: huh, there was wifi but only between people on the train? :)

[17:08] *** mkramer joined
[17:14] <Woodi> jnthn: maked one milion calls in 111s + 11s profilling. file available on net. looks chomp takes a lot of time

[17:15] *** cognominal joined
[17:15] <jnthn> Woodi: ooh

[17:15] <jnthn> Woodi: file URL?

[17:16] <jnthn> Woodi: oh, I see it

[17:16] *** tokuhirom joined
[17:17] *** cognominal_ left
[17:18] <TimToady> japhb: my brane isn't talking to me this morning, at least not on that subject...maybe later today I can think about it

[17:18] <jnthn> Woodi: yeah, that is a lot of time in chomp

[17:18] <japhb> TimToady, roger that, thanks 

[17:18] <jnthn> Woodi: I improved it a bit before, but seems it needs some more.

[17:18] <TimToady> and as masak said, it might need a community design if I can't come up with a Gordian sword

[17:19] <TimToady> but I rather suspect I'll have an opinion after I think about it enough

[17:20] *** mkramer left
[17:21] <TimToady> if anyone wants to do some thinking for me, they could consider what downsides there might be to putting Failure outside of Any

[17:21] *** mkramer joined
[17:23] *** envi_ joined
[17:24] <PerlJam> .oO( Failure is not an Any!)

[17:24] *** mkramer left
[17:25] <jnthn> Possibly that using Mu to suppress junction auto-threading now also means you can get passed Failure. But if we consider that stuff outside of Any is meant to be a general place for special things, maybe having at lesat two of them will be better anyway.

[17:25] *** wolverian joined
[17:25] *** mkramer joined
[17:27] <TimToady> I think of the outside of Any as "concept" space, so this might be the right direction, but an off-kilter brane doesn't weigh things accurately

[17:27] *** fsergot joined
[17:27] <jnthn> I have an easier time thinking of upsides than downsides on this one.

[17:28] <jnthn> One is performance...junctions are basically zero impact on the non-junction case because they're just a binding failover.

[17:29] <TimToady> could get the same benefit from .foo.bar.baz not having to worry about dispatching Failure

[17:29] <jnthn> That said, it means that my $x = foo(); really wants to keep meaning that $x has a type constraint of Mu (we've sometimes pondered that it should be Any) since it's good to be able to assign then test in many cases.

[17:30] <TimToady> yes, Any is the default, not the constraint

[17:30] <jnthn> my $x = foo(); if $x { ... } # guess we want this to end up OK, if foo() returned a failure

[17:30] <TimToady> defaults make even more sense on arrays and hashes

[17:30] <jnthn> TimToady: It is now; I've had trouble sensing whether we see that as 100% decided or not. :) I do prefer it with Mu the constraint, Any the default. Just flagging up that putting Failure outside of Any probably ties us more.

[17:31] *** mkramer left
[17:32] <jnthn> (ties us more to that decision)

[17:32] <TimToady> I think I'm comfy with distinguishing constraint from default now, because of KeyHashes wanting to delete their default value, which might well be a value, not a type

[17:32] <jnthn> aha :)

[17:33] <jnthn> Yeah, that fits in well.

[17:33] *** mkramer joined
[17:33] *** kaleem joined
[17:33] <TimToady> well also have the postulated Each concept outside of Any

[17:38] *** MayDaniel joined
[17:42] *** mj41 left
[17:45] <jnthn> dinner time...got plenty of $dayjob done, so should have some 6 tuits this evening :)

[17:45] <jnthn> bbiab

[17:46] <dalek> nqp: bf55068 | mls++ | src/ (2 files):

[17:46] <dalek> nqp: add experimental support for --profile and --profile-compile

[17:46] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bf55068c6b

[17:53] <TimToady> sorear: I am as yet undecided on whether STM can be mandated across all implementations without being too fiddly for some implementations to do efficiently

[17:53] <TimToady> so I'm staying one remove from that, much like continuations

[17:54] <TimToady> doubtless some wag will point out that continuations and STM are isomorphic...

[17:54] *** tty234 left
[17:56] <mkramer> g, e

[17:57] *** mkramer left
[17:58] *** dakkar left
[18:11] *** ksi joined
[18:12] *** wk left
[18:16] *** hoelzro joined
[18:22] <dalek> nqp/unirx: 1f5883b | diakopter++ | src/QRegex/P6Regex/ (2 files):

[18:22] <dalek> nqp/unirx: support ! inverted Unicode properties. Only supports the simple cases, no +/-/&/|/^/(/) combos yet.

[18:22] <dalek> nqp/unirx: review: https://github.com/perl6/nqp/commit/1f5883b112

[18:22] <diakopter> but it's enough for a thousand tests or so for rakudo

[18:22] <jnthn> yay

[18:22] <jnthn> diakopter++

[18:23] <wolverian> nice work

[18:23] <diakopter> heh, I just ported Pm's work from rakudo to nqp

[18:24] <moritz> diakopter++

[18:24] <jnthn> ...and implemented the new syntax, etc :)

[18:24] <diakopter> o_O I wonder how much of rakudo will end up being ported to nqp.

[18:24] <jnthn> diakopter: Probably not much. This just felt like something that belonged with the other regex engine stuff.

[18:24] <diakopter> hm, now how to merge this branch.

[18:25] <jnthn> git checkout master

[18:25] <jnthn> git merge unirx

[18:25] <diakopter> augh. merge conflict

[18:26] <diakopter> src/ops/nqp.ops

[18:26] * diakopter has no clue how to proceed.

[18:26] <diakopter> as usual, I'm helpless

[18:26] <moritz> diakopter: lemme check

[18:27] <moritz> diakopter: I think just both branches add ops

[18:27] <diakopter> ergh, I should've pulled before I merged.

[18:29] <diakopter> so, I see these ======= and >>>>>>> in the file

[18:30] * diakopter googles

[18:31] <moritz> diakopter: if the file is changed in two branches in different ways, the merge adds those markers

[18:31] <moritz> and the different changes between <<<<<< and ====== the part from one branch

[18:32] <moritz> and the part from the other branch between ====== and >>>>>

[18:32] <moritz> and you just edit that whole seciton, make it look like it should, and then   git add src/ops/nqp.op

[18:32] <moritz> s

[18:32] <moritz> git commit

[18:32] <moritz> diakopter: I've successfully resolved that conflict here locally, should I push it?

[18:32] <worr> how much still needs to be done for rakudo?

[18:33] <worr> I haven't really followed development since before nom

[18:33] <diakopter> moritz: sure; then I get to figure out (I mean, ask :) how to reset my local checkout to your master once you push :)

[18:34] <moritz> worr: that's hard to answer. There's still a whole lot to be done before it implements full perl 6, but much less before it is well usable

[18:34] <moritz> worr: http://perl6.org/compilers/features gives a short overview over what is implemented, and what not

[18:35] <dalek> nqp: 1f5883b | diakopter++ | src/QRegex/P6Regex/ (2 files):

[18:35] <dalek> nqp: support ! inverted Unicode properties. Only supports the simple cases, no +/-/&/|/^/(/) combos yet.

[18:35] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1f5883b112

[18:35] <dalek> nqp: 3e87ffd | moritz++ | src/ (4 files):

[18:35] <dalek> nqp: Merge remote branch 'origin/unirx'

[18:35] <dalek> nqp: 

[18:35] <dalek> nqp: Conflicts:

[18:35] <dalek> nqp: 	src/ops/nqp.ops

[18:35] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3e87ffd04a

[18:35] <moritz> diakopter: if you are on branch:   git fetch; git reset --hard origin/master

[18:36] *** tokuhirom left
[18:37] <diakopter> moritz: thanks for all your help

[18:37] *** cognominal_ joined
[18:37] <moritz> diakopter: you're welcome

[18:38] <worr> moritz: thanks! I'd love to get involved in development again :)

[18:38] <worr> I've been away for far too long

[18:38] <lumi_> Is qx{} supposed to capture stderr?

[18:39] <moritz> lumi_: don't think so. It's not specced that way, and perl 5 doesn't do it

[18:39] <worr> is there a bug tracker? rt.perl.org seems to be kind of old

[18:39] <TimToady> generally not, unless you've got a 2>&1 inside and a shell to do it

[18:39] <moritz> worr: rt.perl.org tracks rakudo's bug. Other projects have other bug trackers

[18:39] <lumi_> moritz: Thought so. Then I think it's broken

[18:40] <TimToady> but the fact that $*ERR is a dynamic var means we nearly have the necessary semantics for IO redirection within Perl 6

[18:40] <TimToady> my $*ERR = $*OUT; qx{}; or some such

[18:40] *** cognominal left
[18:41] <TimToady> assuming we make fork/exec track that

[18:41] <TimToady> which is kind of a big assumption

[18:42] *** benabik joined
[18:43] <diakopter> moritz: I'm curious to see whether rakudo with latest nqp can pass roast/S05-mass/properties*

[18:43] <diakopter> oh, hm

[18:44] <diakopter> I still need to remove a bunch of "is" prefixes from those tests

[18:44] <diakopter> from the test output I mean

[18:45] *** wk joined
[18:46] <diakopter> oh, found another problem with my previous patches to those tests

[18:46] *** tty234 joined
[18:47] *** Exodist joined
[18:48] <TimToady> lumi_: but the basic idea is that qx is for pulling in well-formed data, and interspersing error messages does not contribute to well-formedness

[18:48] *** cognominal___ joined
[18:48] <dalek> roast: 0b6c46d | diakopter++ | S05-mass/properties- (4 files):

[18:48] <dalek> roast: remove "is" from test output

[18:48] <dalek> roast: review: https://github.com/perl6/roast/commit/0b6c46d445

[18:49] <TimToady> we might contemplate a form of qx that can harvest out-of-band messages and make them available somehow

[18:49] <TimToady> but dumping them to the terminal is a reasonable default, if there is a terminal...

[18:49] <moritz> I'd like to propose a different approve

[18:49] <moritz> I'd rather have qx (as an operator) simple

[18:50] <moritz> rather have shell() and run() some :capture options

[18:50] <TimToady> sure, I was using "qx" generically

[18:50] <sorear> good * #perl6

[18:51] <moritz> and we can have them return objects that hold all the important information

[18:51] <lumi_> How do I open a rakudobug for it?

[18:51] <moritz> like .out, .err, .status

[18:51] <moritz> lumi_: email to [email@hidden.address]
[18:51] *** cognominal_ left
[18:51] <colomon> \o/ sorear!

[18:51] <sorear> niecza: my class A::B { } # for jnthn

[18:51] <p6eval> niecza v11-27-gdaa9117: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Pathed definitions require our scope at /tmp/UQ24fKCXvd line 1:␤------> [32mmy class A::B [33m⏏[31m{ } # for jnthn[0m␤␤␤Unhandled Exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 880 (die @ 2)…

[18:53] <jnthn> sorear: Then how do we declare X::Base in the setting?

[18:53] <jnthn> (I forbade it initially too, fwiw)

[18:53] <sorear> colomon: (on chromatic and patents) I can sort of see where he's coming from, although I think it's a red herring and he's undermined his own argument for reasons I can explain if you want.  OTOH I am planning a niecza/C.

[18:54] *** thou left
[18:54] <colomon> sorear: I'm curious to hear how you think he's undermined his own argument, if you don't mind.

[18:54] <colomon> sorear: niecza/C  !?!!

[18:56] <sorear> colomon: [Mandelbrot/gtk] I rather suspect (without seeing a profile) that the problem is the overhead of repeated marshalling calls.

[18:56] <moritz> diakopter: S05-mass/properties-block.t passes now \o/

[18:56] <colomon> sorear: I was hoping that when you get a chance, you could provide optimization suggestions for the core loops (in ExposeEvent and mandel) in https://github.com/colomon/mandelbrot/blob/master/bin/gtk-mandelbrot.pl  .... and you're ahead of me here.  :)

[18:57] *** wk left
[18:58] <colomon> sorear: I did a bunch of timings with various changes to the code.  I think mandel is still taking the most time at this point.  (I've already done a bunch of optimizations to the Gtk calls to get to where it is today.)

[18:58] <colomon> sorear: anyway, no rush at all on that, just hoping for some advice, because I'd really love it to be 5-10x faster.  :)

[18:59] * colomon is in the middle of his yearly billing session for $work

[18:59] <diakopter> moritz: try the latest patches to the other properties tests

[18:59] <sorear> jnthn: X::Base is a member of a package, so it only makes sense to be declared 'our'.

[19:00] <sorear> colomon: I'll have to help a bit later ...

[19:00] <moritz> properties-scripts also passes

[19:01] <sorear> colomon: you saw "Microsoft sues TomTom" right?  if you actually read the link, you'll see that Microsoft has a bunch of random patents "dashboard-mounted computer" etc

[19:02] <sorear> colomon: I think it's a safe bet that both Parrot and Mono infringe a large number of Microsoft patents, since Microsoft has written several VMs and HALs over the years and has probably patented a lot of the territory

[19:02] <sorear> colomon: TomTom makes money, Parrot and Mono don't, which is probably why they picked TomTom

[19:03] <moritz> and it also likely that both sue lots of patents by IBM, Google and any other big software patent holder

[19:03] *** tty234 left
[19:03] <moritz> s/sue/infringe/

[19:03] <moritz> because so many trivialities are patented

[19:03] <sorear> colomon: now, if you compare Parrot and Mono, there's one difference that stands out - Microsoft has explicitly (albeit not as a binding contract) granted a usage license to all patents required for a third-party implementation of the CLR

[19:04] <diakopter> sorear: I fervently agree with "I think it's a safe bet that both Parrot and Mono infringe a large number of Microsoft patents"

[19:04] <colomon> sorear: oh.  so you're saying that (at least in theory) Parrot is more vulnerable than Mono, not less?

[19:04] <sorear> colomon: yes.

[19:04] <sorear> IANAL, of course.

[19:05] <colomon> dang

[19:07] <diakopter> sorear: have you thought about what GC scheme Niecza/C might use?

[19:08] <diakopter> generational concurrent :)

[19:09] <sorear> diakopter: I am a huge fan of generational garbage collectors with copying nursery eviction.  I'll probably implement one of those first

[19:09] <sorear> Dunno about concurrent though.  Majorly annoying locking issues there.

[19:11] <sorear> I say "implement" not "use" because I'll almost surely start with Boehm-Demers-Weiser

[19:12] *** molaf joined
[19:12] <colomon> sorear++

[19:12] <[Coke]> .u ���

[19:12] <phenny> U+FFFD REPLACEMENT CHARACTER (�)

[19:13] *** molaf left
[19:14] * sorear really likes thinking about GCs, but they're too time intensive to play with as much as ey'd like

[19:16] <sorear> any Windows users (jnthn, diakopter) available and willing to take a look at v12 for me?

[19:16] <diakopter> moritz: if you bump the NQP_REVISION, you can greenify Unicode properties on the feature matrix

[19:16] <diakopter> sure

[19:17] *** sivoais left
[19:17] <sorear> diakopter: http://feather.perl6.nl/~sorear/n12draft.zip is what will be the v12 binary release

[19:17] <sorear> diakopter: the last time you helped me, you ran into the problem that niecza chokes on CRLF

[19:18] <sorear> diakopter: I still haven't fixed that.  But I want to know if it works, if you use _Unix_ line endings in your source code and CORE.setting

[19:18] <sorear> I'd rather have "works with major proviso" than "doesn't work"

[19:18] <dalek> rakudo/nom: 9d79fef | moritz++ | src/core/Exceptions.pm:

[19:18] <dalek> rakudo/nom: get rid of nested packages X packages in Exceptions.pm

[19:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9d79feff03

[19:18] <dalek> rakudo/nom: a8dfd47 | moritz++ | tools/build/NQP_REVISION:

[19:18] <dalek> rakudo/nom: bump NQP revision to get Unicode propertiy fixes by diakopter++

[19:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a8dfd47838

[19:18] <[Coke]> I have a windows box. what do you need?

[19:19] <sorear> [Coke]: 1. unzip linked file 2. make sure lib\CORE.setting contains \n and not \r\n 3. run\Niecza.exe; say 2 + 2

[19:20] <[Coke]> 1 and 3 work fine.

[19:21] <moritz> phenny: tell jnthn that with http://moritz.faui2k3.org/tmp/x-buf-as-str.patch setting compilation still fails with "The following packages were stubbed but not defined: X::Buf::AsStr"

[19:21] <phenny> moritz: I'll pass that on when jnthn is around.

[19:22] <[Coke]> if I gvim -b the file on windows, no extraneous ^Ms.

[19:22] <jnthn> sorear: just tried it; it works

[19:22] <phenny> jnthn: 19:21Z <moritz> tell jnthn that with http://moritz.faui2k3.org/tmp/x-buf-as-str.patch setting compilation still fails with "The following packages were stubbed but not defined: X::Buf::AsStr"

[19:22] <moritz> jnthn: I haven't been able to golf that one to non-setting code (note that the 'package X { }) is now gone

[19:22] <sorear> awesome

[19:22] <moritz> )

[19:23] <sorear> how about run\Niecza.exe -c -e 'say "Hello world"'; obj\MAIN.exe ?

[19:24] * sorear leaves for a bit

[19:24] <[Coke]> http://nopaste.snit.ch/97024 --parsefail

[19:25] <jnthn> sorear: Run.MAIN.exe works

[19:25] *** jaldhar left
[19:25] <diakopter> [Coke]: try this instead

[19:25] *** mishin left
[19:26] <diakopter> run\Niecza.exe -c -e "say ""Hello world"""

[19:26] <diakopter> run\Niecza.exe -c -e "say 'Hello world'"

[19:26] <diakopter> windows doesn't take single quotes as quoters

[19:26] <[Coke]> first one gives "unsupported use of bare say"

[19:26] <[Coke]> second one works.

[19:27] <diakopter> hm, maybe it's three " to make it work

[19:27] <jnthn> diakopter: heh, I did that automatically without noticing I had :)

[19:27] <[Coke]> diakopter: doh, didn't even think to check that, I assumed he was cut and pasting from something that was expected to work. ;)

[19:27] <dalek> nqp/nci: 6e9d75d | jnthn++ | / (4 files):

[19:27] <dalek> nqp/nci: Add CPointer REPR, which represents a raw pointer that we don't attempt to manage at all.

[19:27] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/6e9d75df2a

[19:27] <dalek> nqp/nci: a52b468 | jnthn++ | src/ops/nqp_dyncall.ops:

[19:27] <dalek> nqp/nci: Implement CPointer handling in native caller.

[19:27] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/a52b4681ef

[19:30] *** wk joined
[19:33] <masak> TimToady: the sword is Alexandrian, not Gordian. if they'd had the idea about the sword in Gordium, they wouldn't still have a knot. :P

[19:34] <TimToady> it was a Gordian sword afterwards

[19:34] <TimToady> regardless of whether Alexander took it away from there

[19:35] *** hoelzro left
[19:36] <TimToady> and the flying mugs now belong to Perl 6, even if they originally belonged to the hotel

[19:44] <masak> ;)

[19:53] <dalek> rakudo/nci: 61db3e8 | jnthn++ | src/core/traits.pm:

[19:53] <dalek> rakudo/nci: Implement exporting of types.

[19:53] <dalek> rakudo/nci: review: https://github.com/rakudo/rakudo/commit/61db3e8447

[19:54] <dalek> zavolaj/v2: 4561a4f | jnthn++ | lib/NativeCall.pm6:

[19:54] <dalek> zavolaj/v2: Support opaque pointers in NativeCall.

[19:54] <dalek> zavolaj/v2: review: https://github.com/jnthn/zavolaj/commit/4561a4f4c8

[19:55] <jnthn> OK, only thing that new Zavolaj doesn't support that old one did is passing arrays. And the way it was done before was one of the most disgusting hacks I ever did...

[19:56] <colomon> hack!  hack!  hack!

[19:56] *** daxim left
[19:56] <colomon> jnthn++

[19:56] <jnthn> colomon: I may wonder to the sofa and actually *design* it this time before I hack. ;)

[19:56] <colomon> designed hack!  

[19:57] <jnthn> :)

[19:57] <diakopter> talk about an armchair expert

[19:57] <diakopter> er, sofa

[19:57] <diakopter> er, nm

[20:00] <dalek> nqp/nci: 8c94248 | jnthn++ | .gitignore:

[20:00] <dalek> nqp/nci: Update .gitignore.

[20:00] <dalek> nqp/nci: review: https://github.com/perl6/nqp/commit/8c94248c61

[20:00] <masak> also, it's a sofa you "wonder" to :P

[20:00] <masak> not a regular sofa, then.

[20:00] *** tty234 joined
[20:01] *** kaleem left
[20:13] *** vmspb joined
[20:13] <diakopter> pmichaud: ping

[20:17] *** tokuhirom joined
[20:18] *** tokuhirom left
[20:21] *** ethndbst left
[20:24] *** takadonet left
[20:40] *** cooper joined
[20:49] *** cooper left
[20:50] *** cooper joined
[20:50] *** cooper left
[20:50] *** cooper joined
[21:03] *** envi_ left
[21:03] *** aindilis` left
[21:04] *** aindilis` joined
[21:05] <dalek> roast: feb17e7 | moritz++ | S05-mass/properties-general.t:

[21:05] <dalek> roast: fix a thinko in S05-mass/properties-general.t; rakudo refudges

[21:05] <dalek> roast: review: https://github.com/perl6/roast/commit/feb17e7502

[21:09] *** envi_ joined
[21:10] *** ethndbst joined
[21:10] *** ethndbst left
[21:10] *** ethndbst joined
[21:11] <dalek> roast: b05364c | moritz++ | S05-mass/properties-general.t:

[21:11] <dalek> roast: more thinkos

[21:11] <dalek> roast: review: https://github.com/perl6/roast/commit/b05364cb61

[21:12] *** simcop2387 left
[21:13] *** simcop2387 joined
[21:14] *** rdesfo joined
[21:14] *** vmspb left
[21:15] *** donri left
[21:21] *** thou joined
[21:22] *** benabik left
[21:33] <tadzik> 'evening

[21:35] *** tokuhirom joined
[21:35] *** aindilis` left
[21:35] *** tokuhirom left
[21:36] *** aindilis joined
[21:37] *** Guest2721 left
[21:37] *** tokuhirom joined
[21:39] *** tokuhirom left
[21:40] *** pmurias joined
[21:42] *** dorlamm joined
[21:44] *** Eth4n joined
[21:47] *** ethndbst left
[21:55] <jnthn> o/ tadzik 

[21:56] *** PacoLinux left
[21:57] *** rgrau` joined
[21:59] *** PacoLinux joined
[22:07] <masak> tadzik! \o/

[22:17] *** am0c left
[22:18] *** am0c joined
[22:18] <[Coke]> moritz: are working on adding those to t/spectest.data also?

[22:18] *** mj41 joined
[22:19] <[Coke]> *you

[22:20] <[Coke]> (if not, I'll get to them sometime tonight, probably)

[22:37] *** ksi left
[22:38] *** replore_ left
[22:43] *** tokuhirom joined
[22:44] *** tokuhirom left
[22:46] *** rdesfo left
[22:51] * sorear returns

[22:54] *** Eth4n left
[22:55] *** whiteknight joined
[22:55] *** whiteknight is now known as Guest46100

[22:57] *** dorlamm left
[22:57] *** lestrrat left
[22:58] *** lestrrat joined
[23:10] *** alester left
[23:12] *** thou left
[23:22] *** jferrero joined
[23:25] *** mj41 left
[23:28] *** sivoais joined
[23:33] *** envi_ left
[23:37] *** wolfman2000 joined
[23:42] *** tokuhirom joined
[23:43] <masak> 'night, #perl6

[23:45] <colomon> \o

[23:47] *** tokuhirom left
[23:48] *** slavik1 left
[23:48] *** tokuhirom joined
[23:49] *** MayDaniel left
[23:49] *** tokuhirom left
[23:50] *** tokuhirom joined
[23:51] *** tokuhirom left
[23:52] *** tokuhirom joined
[23:54] *** tokuhirom left
