[00:14] <dalek> nqp-jvm-prep: 4337905 | jnthn++ | src/org/perl6/nqp/runtime/Ops.java:

[00:14] <dalek> nqp-jvm-prep: Fix to character class handling.

[00:14] <dalek> nqp-jvm-prep: 

[00:14] <dalek> nqp-jvm-prep: With this, NQP self-hosted on JVM can do tests 1..20 from t/nqp with

[00:14] <dalek> nqp-jvm-prep: only two failures.

[00:14] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/4337905842

[00:14] <jnthn> We get the odd ones from beyond there too...didn't look too hard.

[00:25] *** ikrs joined
[00:29] *** cognominal joined
[00:29] *** fgomez left
[00:33] <japhb> jnthn, this commit seems strange to me: https://github.com/jnthn/nqp-jvm-prep/commit/9a5e5a5e1f ... since you're doing ternaries all over the place, why negate the predicate in each case, instead of just switching the branches of the ternary?  Or does NQP optimize that away automatically?

[00:34] *** Exodist joined
[00:34] <jnthn> japhb: 'cus I wrote it the wrong way round first time and then wanted to fix it quickly... :)

[00:35] <jnthn> I need to reconcile the diffs here with the NQP repo anyway, so I'll take care of it then

[00:37] *** pmurias left
[00:38] <japhb> Makes sense.

[00:53] <colomon> jnthn++

[00:57] *** araujo joined
[00:57] *** araujo left
[00:57] *** araujo joined
[01:04] *** anuby joined
[01:10] <dalek> nqp-jvm-prep: e58bbdb | jnthn++ | src/org/perl6/nqp/runtime/Ops.java:

[01:10] <dalek> nqp-jvm-prep: Fix nqp::defined(...) bug.

[01:10] <dalek> nqp-jvm-prep: 

[01:10] <dalek> nqp-jvm-prep: Wins a few more tests.

[01:10] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/e58bbdb6e9

[01:10] <dalek> nqp-jvm-prep: 1ca4a94 | jnthn++ | nqp-src/QASTNodes.nqp:

[01:10] <dalek> nqp-jvm-prep: Some QASTNode updates I missed earlier.

[01:10] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/1ca4a94048

[01:10] <dalek> nqp-jvm-prep: 4b14a9f | jnthn++ | src/org/perl6/nqp/sixmodel/reprs/VMArrayInstance (4 files):

[01:10] <dalek> nqp-jvm-prep: Fix an array cloning bug.

[01:10] *** cognominal left
[01:10] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/4b14a9f84d

[01:10] <dalek> nqp-jvm-prep: 3e0363c | jnthn++ | nqp-src/NQP.pm:

[01:10] <dalek> nqp-jvm-prep: Start loading the regex library.

[01:10] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/3e0363c32f

[01:15] *** skids joined
[01:15] *** cognominal joined
[01:16] *** hypolin joined
[01:21] <colomon> rn: say "/params/bar" ~~ m{/params/(<-[\/\.]>+)}

[01:21] <p6eval> niecza v24-24-gbdc3343: OUTPUT«===SORRY!===␤␤Unrecognized regex metacharacter / (must be quoted to match literally) at /tmp/pY2LY7fXlu line 1:␤------> say "/params/bar" ~~ m{/⏏params/(<-[\/\.]>+)}␤␤Unhandled exception: Unable to resolve method ast in…

[01:21] <p6eval> ..rakudo f4e96b: OUTPUT«===SORRY!===␤Unrecognized regex metacharacter / (must be quoted to match literally)␤at /tmp/J4gEP8fUjE:1␤------> say "/params/bar" ~~ m{⏏/params/(<-[\/\.]>+)}␤Regex not terminated␤at /tmp/J4gEP8fUjE:1␤------> say "/params/b…

[01:23] <colomon> rn: say "/params/bar" ~~ m{"/params/"(<-[\/\.]>+)}

[01:23] <p6eval> rakudo f4e96b, niecza v24-24-gbdc3343: OUTPUT«｢/params/bar｣␤ 0 => ｢bar｣␤␤»

[01:26] *** cognominal__ joined
[01:27] *** cognominal left
[01:31] <jnthn> Grr. There's some mixin bug that hoses any test that involves named parameters in some way. Not having much look finding it...probably a combination of it being 2:30am and the 15% beer... :)

[01:32] <jnthn> Anyways, I think the self-hosted passes at least half of the tests that the cross-compiled does.

[01:33] <colomon> \o/

[01:33] <colomon> how many is the cross-compiled passing now?

[01:33] <jnthn> 57

[01:33] <colomon> of?

[01:34] *** cognominal__ left
[01:34] <jnthn> There's 65 in t/nqp in the NQP repo, but 3 are Parrot specific, so 62 is the goal I guess.

[01:34] <colomon> sweet

[01:34] *** cognominal__ joined
[01:35] <jnthn> The best clue I have on the mixins bug is that it only happens once we hit the mixin cache.

[01:36] <diakopter> jnthn: *wow* it's late

[01:36] <jnthn> diakopter: Yeah :)

[01:36] <jnthn> But you don't rush a beer this good ;)

[01:38] <jnthn> (Stout Aged in Isle of Arran Whisky Barrels ;))

[01:43] *** Entonian joined
[01:46] <jnthn> Yeah, I ain't gonna find this bug tonight... Eh, well...there's tomorrow. :)

[01:46] <jnthn> 'night o/

[01:46] <uvtc> \o

[01:48] *** Entonian left
[01:51] *** Entonian joined
[01:53] *** Entonian left
[01:54] <colomon> r: my $a = "'/'params'/'(<-[\/\.]>+)"; say $a;

[01:55] <p6eval> rakudo f4e96b: OUTPUT«'/'params'/'(<-[/.]>+)␤»

[01:55] <colomon> r: my $a = "'/'params'/'(<-[\/\.]>+)"; my $m = / ^ <_capture=$a> $ /; say "/params/bar" ~~ $m

[01:55] <p6eval> rakudo f4e96b: OUTPUT«｢/params/bar｣␤ _capture => ｢/params/bar｣␤␤»

[01:56] <colomon> r: my $a = "'/'params'/'(<-[\/\.]>+)"; my $m = / ^ $a $ /; say "/params/bar" ~~ $m

[01:56] <p6eval> rakudo f4e96b: OUTPUT«#<failed match>␤»

[01:56] <colomon> r: my $a = "'/'params'/'(<-[\/\.]>+)"; my $m = / ^ <$a> $ /; say "/params/bar" ~~ $m

[01:56] <p6eval> rakudo f4e96b: OUTPUT«｢/params/bar｣␤␤»

[01:56] <colomon> r: my $a = "'/'params'/'(<-[\/\.]>+)"; my $m = / ^ < $a > $ /; say "/params/bar" ~~ $m

[01:56] <p6eval> rakudo f4e96b: OUTPUT«#<failed match>␤»

[01:56] <TimToady> http://rosettacode.org/wiki/Old_lady_swallowed_a_fly#Perl_6

[01:56] <colomon> r: my $a = "'/'params'/'(<-[\/\.]>+)"; my $m = / ^ <$a> $ /; say "/params/bar" ~~ $m

[01:56] <p6eval> rakudo f4e96b: OUTPUT«｢/params/bar｣␤␤»

[01:56] <colomon> n: my $a = "'/'params'/'(<-[\/\.]>+)"; my $m = / ^ <$a> $ /; say "/params/bar" ~~ $m

[01:56] <p6eval> niecza v24-24-gbdc3343: OUTPUT«｢/params/bar｣␤␤»

[01:56] <colomon> argh

[02:01] <skids> What's next, "there's a hole in the bucket Elvira"?

[02:02] <TimToady> feel free to add it to RC :)

[02:02] <TimToady> and it's Dear Liza

[02:03] <colomon> dear Liza, dear Liza

[02:03] <skids> Oh right.  Probably would make a good gag for comments in circular saw code.

[02:03] *** cognominal__ left
[02:03] *** cognominal joined
[02:03] <TimToady> though it's actually fairly boring compared to the old lady

[02:04] * colomon doesn't remember why he knows that at all, doesn't think he learned it as a child

[02:04] <perigrin> you listen to a lot of Spearchucker?

[02:04] <colomon> nooo......

[02:04] <perigrin> oh ... cause there's a great hip hop song that uses it as a refrain 

[02:05] <perigrin> :)

[02:05] <colomon> TimToady: In that last example up there, is the match suppose to capture the bit in parentheses?

[02:06] <colomon> About the only hip-hop I have ever listened to intentionally is "A Night at The Hip-Hopera"

[02:08] *** cognominal left
[02:09] *** cognominal joined
[02:17] *** census left
[02:21] <perigrin> colomon: http://youtu.be/DRfr4LAqi18 is the song ... and it was Spearhead not spearchucker ... must have confused it with M.A.S.H.

[02:21] *** cognominal left
[02:22] <perigrin> wait that's not the right song ... sounds similar at the beginning

[02:22] *** Chillance joined
[02:22] <colomon> rn: my $a = "'/'params'/'<foo=<-[\/\.]>+>)"; my $m = / ^ <$a> $ /; say "/params/bar" ~~ $m

[02:22] <p6eval> rakudo f4e96b: OUTPUT«===SORRY!===␤regex assertion not terminated by angle bracket␤at eval_0:1␤------> my $x = anon regex { ^'/'params'/'<foo=⏏<-[/.]>+>) }␤    expecting any of:␤        scoped declarator␤        new name to be defined␤        single …

[02:22] <p6eval> ..niecza v24-24-gbdc3343: OUTPUT«Unhandled exception: Unrecognized regex assertion at (eval) line 1:␤------> regex {'/'params'/'<foo=⏏<-[/.]>+>)}␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1443 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 line 5597 (STD.pan…

[02:23] *** cognominal joined
[02:24] *** mjreed joined
[02:24] <perigrin> colomon: here we go http://youtu.be/U2LnplyZlYI

[02:24] <perigrin> sorry about that

[02:29] <colomon> no worries

[02:29] *** lustlife joined
[02:30] <colomon> and thank you.

[02:39] <colomon> rn: my $r1 = m/ (\d+) /; my $r2 = m/ (\w+) /; say "123ada" ~~ / <$r1> <$r2> /;

[02:39] <p6eval> rakudo f4e96b: OUTPUT«No such method 'match' for invocant of type 'Any'␤  in block  at /tmp/wydZvC5PuO:1␤␤»

[02:39] <p6eval> ..niecza v24-24-gbdc3343: OUTPUT«Unhandled exception: Unable to resolve method match in type Any␤  at /tmp/BX_p179HBn line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4233 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4234 (module-CORE @ 580) ␤  at /home/…

[02:39] <colomon> rn: my $r1 = / (\d+) /; my $r2 = / (\w+) /; say "123ada" ~~ / <$r1> <$r2> /;

[02:39] <p6eval> rakudo f4e96b, niecza v24-24-gbdc3343: OUTPUT«｢123ada｣␤␤»

[02:40] <colomon> rn: my $r1 = / (\d+) /; my $r2 = / (\w+) /; say "123ada" ~~ / <1=$r1> <2=$r2> /;

[02:40] <p6eval> niecza v24-24-gbdc3343: OUTPUT«===SORRY!===␤␤Unrecognized regex assertion at /tmp/VijFhpIp1k line 1:␤------>  my $r2 = / (\w+) /; say "123ada" ~~ / <⏏1=$r1> <2=$r2> /;␤␤Parse failed␤␤»

[02:40] <p6eval> ..rakudo f4e96b: OUTPUT«===SORRY!===␤Unrecognized regex metacharacter < (must be quoted to match literally)␤at /tmp/tsZcf41fhT:1␤------>  my $r2 = / (\w+) /; say "123ada" ~~ / <⏏1=$r1> <2=$r2> /;␤Unable to parse regex; couldn't find final '/'␤at /tmp/t…

[02:40] <colomon> rn: my $r1 = / (\d+) /; my $r2 = / (\w+) /; say "123ada" ~~ / <a1=$r1> <a2=$r2> /;

[02:40] <p6eval> rakudo f4e96b, niecza v24-24-gbdc3343: OUTPUT«｢123ada｣␤ a1 => ｢123｣␤  0 => ｢123｣␤ a2 => ｢ada｣␤  0 => ｢ada｣␤␤»

[02:42] *** lustlife1 joined
[02:43] *** lustlife left
[02:43] <colomon> rn: my $a = "'/'params'/'<foo=<-[\/\.]>+>)"; say eval('"/params/bar" ~~ / <$m> /')

[02:43] <p6eval> niecza v24-24-gbdc3343: OUTPUT«Potential difficulties:␤  $a is declared but not used at /tmp/oA6iiiEU8J line 1:␤------> my ⏏$a = "'/'params'/'<foo=<-[\/\.]>+>)"; sa␤␤Unhandled exception: Variable $m is not predeclared␤  at /home/p6eval/niecza/boot/lib/CORE.setting lin…

[02:43] <p6eval> ..rakudo f4e96b: OUTPUT«Nominal type check failed for parameter '$var'; expected Any but got Mu instead␤  in method INTERPOLATE at src/gen/CORE.setting:10698␤  in regex  at eval_0:1␤  in method ACCEPTS at src/gen/CORE.setting:10804␤  in block  at eval_0:1␤  in  at eval_0:1␤  in sub eval a…

[02:43] *** lustlife1 left
[02:44] <colomon> rn: my $a = "'/'params'/'<foo=<-[\/\.]>+>)"; say eval(qq["/params/bar" ~~ / <$a> /])

[02:44] <p6eval> rakudo f4e96b: OUTPUT«===SORRY!===␤Unrecognized regex metacharacter < (must be quoted to match literally)␤at eval_0:1␤------> "/params/bar" ~~ / <⏏'/'params'/'<foo=<-[/.]>+>)> /␤Unable to parse regex; couldn't find final '/'␤at eval_0:1␤------> …

[02:44] <p6eval> ..niecza v24-24-gbdc3343: OUTPUT«Unhandled exception: Unrecognized regex assertion at (eval) line 1:␤------> "/params/bar" ~~ / <⏏'/'params'/'<foo=<-[/.]>+>)> /␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1443 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 lin…

[02:44] <colomon> rn: my $a = "'/'params'/'<foo=<-[\/\.]>+>)"; say eval(q["/params/bar" ~~ / <$a> /])

[02:44] <p6eval> rakudo f4e96b: OUTPUT«===SORRY!===␤regex assertion not terminated by angle bracket␤at eval_1:1␤------> my $x = anon regex { ^'/'params'/'<foo=⏏<-[/.]>+>) }␤    expecting any of:␤        scoped declarator␤        new name to be defined␤        single …

[02:44] <p6eval> ..niecza v24-24-gbdc3343: OUTPUT«Potential difficulties:␤  $a is declared but not used at /tmp/8W9BLG7WBv line 1:␤------> my ⏏$a = "'/'params'/'<foo=<-[\/\.]>+>)"; sa␤␤Unhandled exception: Unrecognized regex assertion at (eval) line 1:␤------> regex {'/'params'/'<f…

[02:45] <colomon> rn: my $a = "'/'params'/'<foo=<-[\/\.]>+>)"; say eval(qq["/params/bar" ~~ / <$a> /])

[02:45] <p6eval> rakudo f4e96b: OUTPUT«===SORRY!===␤Unrecognized regex metacharacter < (must be quoted to match literally)␤at eval_0:1␤------> "/params/bar" ~~ / <⏏'/'params'/'<foo=<-[/.]>+>)> /␤Unable to parse regex; couldn't find final '/'␤at eval_0:1␤------> …

[02:45] <p6eval> ..niecza v24-24-gbdc3343: OUTPUT«Unhandled exception: Unrecognized regex assertion at (eval) line 1:␤------> "/params/bar" ~~ / <⏏'/'params'/'<foo=<-[/.]>+>)> /␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1443 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 lin…

[02:47] *** lustlife joined
[03:14] <colomon> so is there a way to compose regexes?

[03:15] <sorear> what?

[03:16] *** mjreed left
[03:16] <sorear> I can't parse what you're trying to do

[03:16] <colomon> sorear: I'm looking at the broken code in Bailador

[03:17] <sorear> so what are you trying to do?

[03:17] <colomon> it takes a string like /params/:foo and tries to build a regex which compares the full string and captures the :foo bit

[03:18] *** anuby_ joined
[03:18] *** anuby left
[03:19] <colomon> it's doing this right now:

[03:19] <colomon> n: my $a = "'/'params'/'(<-[\/\.]>+)"; my $m = / ^ <$a> $ /; say "/params/bar" ~~ $m

[03:19] <p6eval> niecza v24-24-gbdc3343: OUTPUT«｢/params/bar｣␤␤»

[03:20] <colomon> apparently that used to capture the "bar" in Rakudo, but they've changed it to match Niecza's behavior.

[03:20] <colomon> so I'm trying to figure out how to get the effect it used to have.

[03:22] *** orafu left
[03:23] *** orafu joined
[03:25] *** uvtc left
[03:28] *** fgomez joined
[03:32] *** cognominal left
[03:38] *** cognominal joined
[03:52] *** _jaldhar joined
[03:58] <colomon> n: my $a = "'/'params'/'(<-[\/\.]>+)"; my $m = "/ ^ $a $ /".eval; say "/params/bar" ~~ $m

[03:58] <p6eval> niecza v24-24-gbdc3343: OUTPUT«===SORRY!===␤␤Non-variable $ must be backslashed at /tmp/FSTWRgfKCh line 1:␤------> params'/'(<-[\/\.]>+)"; my $m = "/ ^ $a ⏏$ /".eval; say "/params/bar" ~~ $m␤␤Parse failed␤␤»

[03:58] <colomon> n: my $a = "'/'params'/'(<-[\/\.]>+)"; my $m = "/ ^ $a \$ /".eval; say "/params/bar" ~~ $m

[03:58] <p6eval> niecza v24-24-gbdc3343: OUTPUT«｢/params/bar｣␤ 0 => ｢bar｣␤␤»

[03:58] <colomon> oh, that does it nicely in niecza

[03:58] <colomon> r: my $a = "'/'params'/'(<-[\/\.]>+)"; my $m = "/ ^ $a \$ /".eval; say "/params/bar" ~~ $m

[03:58] <p6eval> rakudo f4e96b: OUTPUT«｢/params/bar｣␤ 0 => ｢bar｣␤␤»

[03:58] <colomon> and rakudo.  

[04:17] *** ilogger2 joined
[04:17] *** ChanServ sets mode: +v ilogger2

[04:18] *** Gothmog_ joined
[04:37] *** preflex_ joined
[04:38] *** preflex_ is now known as preflex

[04:38] *** benabik joined
[04:41] *** SamuraiJack joined
[04:43] <TimToady> http://rosettacode.org/wiki/Synchronous_concurrency#Perl_6

[05:22] <TimToady> http://rosettacode.org/wiki/Truncate_a_file#Perl_6

[05:23] <TimToady> we have now passed Mathmatica; next victim is Ada :)

[05:26] <sorear> How many languages are ahead of us?

[05:26] <TimToady> we are currently #10 :)

[05:26] <sorear> Do you have a ranked list?

[05:27] <TimToady> you can run http://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity#Perl_6 for the current standings

[05:28] <TimToady> note, this is not really popularity, but more a measure of contributor madness

[05:29] <sorear> you're so MAD

[05:30] <TimToady> tough job, but someone has to do it

[05:38] <diakopter> TimToady: <bump> STDP5

[05:40] <diakopter> std: use v6; { use v1; }

[05:40] <p6eval> std 52fe6d2: OUTPUT«===SORRY!===␤Cannot locate module v1 at /tmp/6_ZNDk1ly_ line 1:␤------> use v6; { use v1⏏; }␤Check failed␤FAILED 00:00 42m␤»

[05:40] <diakopter> aww

[05:40] <TimToady> that would be ossum :)

[05:42] <TimToady> STD_P5 is one of the many things that have to be done first next :)

[05:42] <diakopter> std: use v999999999999999999999999999999999999999999999999

[05:42] <p6eval> std 52fe6d2: OUTPUT«===SORRY!===␤Cannot locate module v999999999999999999999999999999999999999999999999 at /tmp/Ed8W16i_ou line 1 (EOF):␤------> 9999999999999999999999999999999999999999⏏<EOL>␤Check failed␤FAILED 00:00 41m␤»

[05:42] <TimToady> I wouldn't mind if someone else championed it for a while

[05:43] <diakopter> std: use v6.0

[05:43] <p6eval> std 52fe6d2: OUTPUT«===SORRY!===␤Confused at /tmp/CZCypyT512 line 1:␤------> use v6.0⏏<EOL>␤Parse failed␤FAILED 00:00 40m␤»

[05:44] <diakopter> D:

[05:45] <TimToady> the semi is not optional

[05:46] <diakopter> std: use v6.0;

[05:46] <p6eval> std 52fe6d2: OUTPUT«ok 00:00 40m␤»

[05:47] <diakopter> .. he was hit by a semi

[05:50] <diakopter> .. and his colon fell out

[05:52] <sorear> why is the semi not optional?

[05:53] <diakopter> cuz following stuff might be considered params?

[05:53] <diakopter> <I once knew the justification; I've forgotten it>

[05:59] *** quester joined
[06:00] *** rindolf joined
[06:10] <TimToady> because it's really switching to a new block in midblock, so the ; is a bit like a { when there really is a block

[06:12] <TimToady> probably means we should only allow use v5; at the front like classes and modules, and require a block elsewhere

[06:14] <diakopter> std: package Foo { }; use Foo;

[06:14] <p6eval> std 52fe6d2: OUTPUT«===SORRY!===␤Cannot locate module Foo at /tmp/miC5Alm5v5 line 1:␤------> package Foo { }; use Foo⏏;␤Check failed␤FAILED 00:00 42m␤»

[06:18] <TimToady> well, any use can modify the current language for the rest of the block, so I guess 'use v5' isn't so different

[06:19] <TimToady> s/use/declaration/

[06:19] <diakopter> nr: use Test { eval 'use Test;' }();

[06:19] <p6eval> niecza v24-24-gbdc3343: OUTPUT«===SORRY!===␤␤'use' with arguments NYI at /tmp/57VhOBzyHG line 1:␤------> use Test { eval 'use Test;' }()⏏;␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1443 (die @ 5) ␤  at /h…

[06:19] <p6eval> ..rakudo f4e96b: OUTPUT«===SORRY!===␤Null PMC access in get_bool()␤»

[06:19] <diakopter> \o/

[06:20] <TimToady> who's getting a bool?

[06:20] <TimToady> is someone expecting modules to still return 1?

[06:22] <diakopter> r: use Test { try eval 'say 66; use Test;'; CATCH { say 55 } }();

[06:22] <p6eval> rakudo f4e96b: OUTPUT«===SORRY!===␤Null PMC access in get_bool()␤»

[06:22] <diakopter> r: use Test { try eval 'BEGIN { say 66; }; use Test;'; CATCH { say 55 } }();

[06:22] <p6eval> rakudo f4e96b: OUTPUT«===SORRY!===␤Null PMC access in get_bool()␤»

[06:23] <diakopter> r: use Test { try eval 'BEGIN { say 66; }; eval \'use Test;\''; CATCH { say 55 } }();

[06:23] <p6eval> rakudo f4e96b: OUTPUT«===SORRY!===␤Null PMC access in get_bool()␤»

[06:23] <diakopter> o_O

[06:25] <TimToady> try for 1..10 { .say; die "dead" when 5 }

[06:25] <TimToady> r: try for 1..10 { .say; die "dead" when 5 }

[06:25] <p6eval> rakudo f4e96b: OUTPUT«1␤2␤3␤4␤5␤dead␤current instr.: 'throw' pc 333455 (src/gen/CORE.setting.pir:149679) (src/gen/CORE.setting:9303)␤called from Sub 'die' pc 35346 (src/gen/CORE.setting.pir:14008) (src/gen/CORE.setting:578)␤called from Sub '' pc 260 ((file unknown):189751590) (/tmp/jMUs…

[06:25] <TimToady> so, why isn't the try trapping the die?

[06:26] <TimToady> r: try eager for 1..10 { .say; die "dead" when 5 }

[06:26] <p6eval> rakudo f4e96b: OUTPUT«===SORRY!===␤Two terms in a row␤at /tmp/JX1Z2IrRkO:1␤------> try eager for 1..10 ⏏{ .say; die "dead" when 5 }␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infix stopper␤        statement end␤        …

[06:26] <TimToady> r: try eager do for 1..10 { .say; die "dead" when 5 }

[06:26] <p6eval> rakudo f4e96b: OUTPUT«1␤2␤3␤4␤5␤»

[06:26] <moritz> TimToady: because for is lazy

[06:27] <TimToady> try should be propagating its sink inward then

[06:27] <TimToady> as should other statement prefixes

[06:28] <TimToady> I think try should perhaps force an eager in any case?

[06:29] <diakopter> r: try .harder

[06:29] <p6eval> rakudo f4e96b:  ( no output )

[06:29] <diakopter> r: try .again

[06:29] <p6eval> rakudo f4e96b:  ( no output )

[06:30] <TimToady> much like gather forces a sink on the inside

[06:30] <diakopter> r: try .there.is.no

[06:30] <p6eval> rakudo f4e96b:  ( no output )

[06:34] <tadzik> good morning #perl6

[06:36] <diakopter> r: try { ... }

[06:36] <p6eval> rakudo f4e96b: OUTPUT«Stub code executed␤current instr.: 'throw' pc 333455 (src/gen/CORE.setting.pir:149679) (src/gen/CORE.setting:9303)␤called from Sub 'sink' pc 365352 (src/gen/CORE.setting.pir:162408) (src/gen/CORE.setting:10525)␤called from Sub 'MAIN' pc 381 (src/gen/perl6.pir:146) …

[06:36] <diakopter> r: try eager { ... }

[06:36] <p6eval> rakudo f4e96b:  ( no output )

[06:37] <diakopter> r: try eager { beaver }

[06:37] <p6eval> rakudo f4e96b: OUTPUT«===SORRY!===␤Undeclared routine:␤    beaver used at line 1. Did you mean '&eager'?␤␤»

[06:37] <diakopter> erm

[06:37] *** preflex left
[06:38] *** sqirrel joined
[06:39] <tadzik> phenny: tell colomon thanks for the pull request! I'll merge it as soon as I get the opportunity to run tests

[06:39] <phenny> tadzik: I'll pass that on when colomon is around.

[06:40] *** preflex joined
[06:40] * TimToady wonders if eager, sink, hyper, etc should also be statement prefixes

[06:46] <diakopter> rn: my \a=300; eval ('{'x a)~('}'x a)

[06:46] <p6eval> rakudo f4e96b: OUTPUT«(timeout)»

[06:46] <p6eval> ..niecza v24-24-gbdc3343:  ( no output )

[06:47] <diakopter> rakudo-parrot--

[06:48] <tadzik> hah, cpanm can install modules from git, given the url

[06:48] <tadzik> as neutro did ;)

[06:49] *** genehack left
[06:50] *** genehack joined
[06:50] <diakopter> eval `cpanm v6`

[06:52] <diakopter> nqp-jvm: .self-host

[07:02] *** wk joined
[07:04] *** rindolf left
[07:05] *** rindolf joined
[07:14] <dalek> specs: 7d6ac4c | larry++ | S04-control.pod:

[07:14] <dalek> specs: make try an eager (or sink) contextualizer

[07:14] <dalek> specs: review: https://github.com/perl6/specs/commit/7d6ac4c459

[07:14] *** rindolf left
[07:14] *** rindolf joined
[07:18] *** FROGGS joined
[07:27] *** rindolf left
[07:27] *** rindolf joined
[07:33] *** kaleem joined
[07:34] *** wk left
[07:34] *** wk joined
[07:35] *** replore_ joined
[07:48] *** rindolf left
[07:48] *** replore_ left
[07:49] *** rindolf joined
[07:54] <diakopter> awesome! all I have to do to view/render a .ps file is upload it to my Google Drive

[07:54] <diakopter> nice find, self!

[07:55] <nwc10> jnthn: nqptest still passes (except for the ICU one)

[07:55] *** brrt joined
[07:56] * FROGGS renames nwc10 to github-smoke-servicehook

[07:56] <FROGGS> nwc10++

[08:01] <diakopter> ..that's over 12 unary orders of magnitude faster

[08:01] <nwc10> FROGGS: I don't have any other useful way to contribute

[08:02] *** Liz_ joined
[08:02] <sorear> nwc10++ useful indeed

[08:03] *** wk left
[08:03] *** Tedd1^ joined
[08:07] *** Liz_ is now known as lizmat

[08:08] <FROGGS> nwc10: I know what you mean :o)

[08:09] *** ivan`` joined
[08:09] <FROGGS> btw, I would be possible and not that hard to automate it... you just need a powerful machine that can rebuild rakudo within a few minutes, and then you can register it at github

[08:10] <FROGGS> this thing could paste the PASS/FAILED here right after someone committed to nqp and/or rakudo

[08:10] <DrEeevil> that sounds quite easy

[08:11] *** daxim joined
[08:13] *** robinsmidsrod joined
[08:13] *** rindolf left
[08:14] *** wk joined
[08:15] *** domidumont joined
[08:15] *** jtpalmer joined
[08:17] *** quester left
[08:29] *** ObseLeTe joined
[08:30] *** rindolf joined
[08:31] *** wk left
[08:33] *** domidumont left
[08:33] *** domidumont joined
[08:44] *** fhelmberger joined
[08:52] *** Tedd1^ left
[08:52] *** Tedd1 joined
[09:00] *** mj41 joined
[09:06] *** ObseLeTe left
[09:23] *** wk joined
[09:25] *** spider-mario joined
[09:26] <dalek> rakudo/vmarray: c54039f | (Arne Skjærholt)++ | / (8 files):

[09:26] <dalek> rakudo/vmarray: Start VMArrayHOW, expose it in the grammar.

[09:26] <dalek> rakudo/vmarray: review: https://github.com/rakudo/rakudo/commit/c54039faa5

[09:28] <dalek> nqp: 3dd264f | (Arne Skjærholt)++ | src/6model/reprs/VMArray. (2 files):

[09:28] <dalek> nqp: First implementation of compose() for VMArray.

[09:28] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3dd264f322

[09:29] *** fuad joined
[09:30] *** fuad left
[09:34] *** Exodist joined
[09:35] *** dakkar joined
[09:38] *** lizmat left
[09:38] <jnthn> morning, #perl6

[09:41] <arnsholt> o/

[09:41] * arnsholt sets out to clean up some NQP C warnings

[09:42] <sorear> morning jnthn

[09:50] <nwc10> $ time java -cp 3rdparty/bcel/bcel-5.2.jar:.:bin NQPJVM -e "say(26 ** 6)"

[09:50] <nwc10> 308915776

[09:51] <nwc10> jnthn++

[09:51] <nwc10> mmm, perhaps that should be 7. It relates to this:

[09:51] <nwc10> qr/(|B|BB|C|D|DD|G|GG|H|J|JJ|K|M|N|P|R|S|SS|T)(A|AE|E|EO|EU|I|O|OE|U|WA|WAE|WE|WEO|WI|YA|YAE|YE|YEO|YI|YO|YU)(B|BS|C|D|G|GG|GS|H|J|K|L|LB|LG|LH|LM|LP|LS|LT|M|N|NG|NH|NJ|P|S|SS|T)?/

[09:51] <nwc10> # Computed re that splits up a Hangul name into LVT or LV syllables

[09:52] <nwc10> which is one of the fun bits if you want to convert Unicode character names to code points

[09:55] <nwc10> jnthn: how big is that brute-force hash that NQP-JVM currently makes for charnames?

[09:55] <sorear> niecza uses algorithmic conversion for hangul

[09:56] <nwc10> And does it have all of /^HANGUL SYLLABLE .*/, qr/^CJK UNIFIED IDEOGRAPH-.*/ and qr/^CJK COMPATIBILITY IDEOGRAPH-.*/

[09:56] <nwc10> Perl 5 does too

[09:56] <sorear> Yes.

[09:56] <nwc10> that regex

[09:56] <moritz> fwiw the nqp-jvm-prep tests all fail here

[09:56] <moritz> t/qast/qast_variable.t ....... 1/9 Exception in thread "main" java.lang.RuntimeException: Wrong number of arguments passed; expected 0..0, but got 1

[09:56] <nwc10> That was more for jnthn - does his hack have those in?

[09:56] <nwc10> moritz: here too

[09:58] *** kaleem left
[10:05] *** jerome joined
[10:07] <jnthn> nwc10: Not sure, didn't check. I didn't really expect the hack to be the Real Solution...

[10:08] <nwc10> it's a reasonable hack. :-)

[10:08] <jnthn> aye....but a hack

[10:08] <jnthn> moritz: make nqptest works though ;)

[10:08] <nwc10> my rough estimate is that loading charnames on Perl 5 chews about 12M

[10:08] <sorear> how many megs does it permanently add to the git repo tho

[10:09] <jnthn> sorear: How many megs does what add?

[10:09] <nwc10> or was it 10M? Anyway, it's about 20M total, but it loads in a bunch of things

[10:09] <nwc10> sorear: not much - the hack is to loop over the API that does exist, and hash it for an inverse lookup

[10:09] <jnthn> sorear: The 10 lines of Java that build the hash? :)

[10:09] <jnthn> yes, what's weird is that it knows how to turn codes into names, just not vice versa...

[10:09] <nwc10> anyway, I think I can see a way to build a trie+stuff which gets it down to under 2M

[10:09] <sorear> jnthn: I was thinking you committed a copy of the character db

[10:10] <jnthn> sorear: No :)

[10:10] <nwc10> 2M of const static data. Good for shared pages in OSes :-)

[10:10] <nwc10> and demand loading

[10:11] <nwc10> what's the correct way to access @ARGV in NQP? And does NQPJVM support it yet?

[10:12] <nwc10> can we have it for eval bot? I want to spam the channel with backtraces :-)

[10:14] <jnthn> nwc10: sub MAIN(*@ARGV) { ... } is how NQPJVM itself does it

[10:19] *** not_gerd joined
[10:19] <not_gerd> o/

[10:19] <not_gerd> how was http://irclog.perlgeek.de/perl6/2013-02-24#i_6493095 resolved?

[10:19] <not_gerd> has the same issue when building latest NQP

[10:22] <moritz> works again here

[10:35] *** PacoAir joined
[10:57] <not_gerd> that build failure is weird

[10:57] <not_gerd> I'll try to track it down later

[10:57] <not_gerd> bye for now

[10:57] *** not_gerd left
[11:03] *** brrt left
[11:04] *** donaldh joined
[11:07] *** salv01 joined
[11:23] *** am0c joined
[11:30] <timotimo> good day

[11:39] *** kresike joined
[11:39] <kresike> hello all you happy perl6 people

[11:42] <dalek> perl6-most-wanted: 633bb02 | (Heiko Jansen)++ | most-wanted/bindings.md:

[11:42] <dalek> perl6-most-wanted: Bindings to libxml2/xslt for fast XML processing

[11:42] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/633bb02bdc

[11:42] <dalek> perl6-most-wanted: 2fdc6ee | (Tobias Leich)++ | most-wanted/bindings.md:

[11:42] <dalek> perl6-most-wanted: Merge pull request #1 from heikojansen/master

[11:42] <dalek> perl6-most-wanted: 

[11:42] <dalek> perl6-most-wanted: Fast XML processing

[11:42] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/2fdc6ee4d2

[11:46] *** am0c left
[11:47] *** kaleem joined
[11:47] <timotimo> today, i'll push a patch for these error messages:

[11:47] <timotimo> r: "" ~~ /m ** -1..1/;

[11:48] <p6eval> rakudo f4e96b: OUTPUT«===SORRY!===␤Quantifier quantifies nothing␤at /tmp/CLHYLEz4Wl:1␤------> "" ~~ /m ** ⏏-1..1/;␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infix stopper␤        prefix or term␤        prefix or meta-p…

[11:48] <timotimo> r: "" ~~ /m ** 1..-1/;

[11:48] <p6eval> rakudo f4e96b: OUTPUT«===SORRY!===␤Only integers or '*' allowed as range quantifier endpoint␤at /tmp/Z4_IKo7K1U:1␤------> "" ~~ /m ** 1..⏏-1/;␤»

[11:48] * timotimo spectests

[11:49] <nwc10> jnthn: 57 tests now in t/nqp/, and of the 65 in nqp, 3 are parrot specific, so that's only 5 that don't pass 100% ?

[11:51] <jnthn> nwc10: With cross-compiler, yes.

[11:52] <jnthn> nwc10: Self-hosting is probably around 25-30 passing

[11:52] <nwc10> and you're aiming at self-hosting now, before getting back to cross-compiler?

[11:53] <jnthn> Don't have a Makefile target for that yet

[11:53] <jnthn> I want to try and get the self-host up to the point where the cross-compile is

[11:53] <nwc10> aha

[11:54] <jnthn> Given that self-host is the desired solution really.

[11:54] <nwc10> <mjd-esqe>Am I allowed to say "no shit, Sherlock" on a public channel?</mjd-esqe> :-)

[11:55] <nwc10> context for that one is https://groups.google.com/group/comp.lang.perl.misc/msg/b2f911d6d9c5cef2

[11:56] * jnthn is brushing up his git skillz for next week's teaching and just discovered that git push can also operate over FTP!

[11:56] <jnthn> I almost want to set it up just for amusement :)

[11:59] <nwc10> can it pull over gopher?

[11:59] <nwc10> 31 days to patch it if it can't yet

[11:59] <jnthn> Not out of the box, but there's a hook for adding more transports... :)

[11:59] <moritz> .oO( git push over avian carriers! )

[12:00] * FROGGS .oO( it definitely should pull over on these cold days )

[12:00] <kresike> moritz, you read my thoughts :)

[12:06] *** robinsmidsrod left
[12:09] *** robinsmidsrod joined
[12:10] *** shinobicl joined
[12:10] *** robinsmidsrod left
[12:13] *** robinsmidsrod joined
[12:13] <dalek> nqp: 63b55a0 | (Timo Paulssen)++ | src/QRegex/P6Regex/Grammar.nqp:

[12:13] <dalek> nqp: complain about negatives in range quantifiers.

[12:13] <dalek> nqp: review: https://github.com/perl6/nqp/commit/63b55a0aad

[12:17] <FROGGS> timotimo: a negative range startpoint is allowed?

[12:18] <FROGGS> ohh, these dont fit the rule, nvm

[12:18] <timotimo> it is?

[12:18] <FROGGS> damn, I cant read today ó.ò

[12:18] <timotimo> is S02-magicals/perlver.t a good place to put tests that $*VM.perl works?

[12:19] <FROGGS> timotimo: line 179 is wrong

[12:19] *** mjreed joined
[12:20] <FROGGS> there is no range at this point

[12:20] <FROGGS> this throws for a negative quantifier

[12:20] *** SmokeMachine joined
[12:20] <timotimo> oh, good point.

[12:20] <timotimo> but only the error message is wrong, right?

[12:20] <timotimo> it's still a good idea to match this and complain, yes?

[12:21] <FROGGS> yes, and yes

[12:21] <timotimo> thank you :)

[12:22] <timotimo> is "negative numbers are not allowed as quantifiers" a good error?

[12:23] <moritz> yes

[12:24] *** mjreed left
[12:24] <timotimo> t/spec/S02-magicals/perlver.t  - this parsefails on (at least my) rakudo and is not fudged. i don't understand what's going on.

[12:25] <dalek> roast: ee4707d | (Timo Paulssen)++ | S02-magicals/env.t:

[12:25] <dalek> roast: make sure that %*ENV .gist and .perl work.

[12:25] <dalek> roast: review: https://github.com/perl6/roast/commit/ee4707d095

[12:25] *** mjreed joined
[12:26] *** kaare_ joined
[12:26] <moritz> timotimo: it's not in t/spectest.data

[12:26] <timotimo> oh, i see.

[12:26] <timotimo> so where can i put a test for $*VM instead?

[12:27] <moritz> S02-magicals/vm.t ?

[12:29] *** SamuraiJack_ joined
[12:30] *** mjreed left
[12:30] *** Tene_ joined
[12:31] *** cxreg2 joined
[12:35] *** SamuraiJack left
[12:43] *** PacoAir left
[12:51] <dalek> nqp: 82b7e17 | (Timo Paulssen)++ | src/QRegex/P6Regex/Grammar.nqp:

[12:51] <dalek> nqp: fix error report with negative quantifiers.

[12:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/82b7e17576

[12:52] *** mjreed joined
[12:53] *** mjreed left
[13:05] <dalek> roast: ed956b4 | (Timo Paulssen)++ | S32-exceptions/misc.t:

[13:05] <dalek> roast: properly match post declared grammars.

[13:05] <dalek> roast: review: https://github.com/perl6/roast/commit/ed956b4ac8

[13:06] *** chan_ joined
[13:18] *** PacoAir joined
[13:18] *** cognominal joined
[13:19] *** PacoAir left
[13:19] *** PacoAir joined
[13:30] *** chan_ left
[13:31] <dalek> roast: 937565b | (Timo Paulssen)++ | S02-magicals/vm.t:

[13:31] <dalek> roast: simple tests for $*VM, .gist and .perl

[13:31] <dalek> roast: review: https://github.com/perl6/roast/commit/937565b64c

[13:31] <timotimo> can someone with a commit bit add that file to spectest.data please?

[13:32] <moritz> timotimo: running the tests now, will add it if it succeeds

[13:33] <timotimo> thank you :)

[13:34] *** census joined
[13:36] <dalek> rakudo/nom: 22b3cf3 | moritz++ | t/spectest.data:

[13:36] <dalek> rakudo/nom: run S02-magicals/vm.t, timotimo++

[13:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/22b3cf3d74

[13:43] *** daxim left
[13:43] *** daxim_ joined
[13:45] <timotimo> hm, is RT down?

[13:45] <dalek> roast: 7bcdd2b | (Timo Paulssen)++ | S04-statements/for.t:

[13:45] <dalek> roast: test for RT #77460

[13:45] <dalek> roast: review: https://github.com/perl6/roast/commit/7bcdd2bf9b

[13:45] *** cognominal left
[13:47] <FROGGS> timotimo: no, rt is working here

[13:48] <timotimo> oh, wat? works in firefox, but not in chrome

[13:49] <moritz> .oO( it's too old to support chrome )

[13:51] <timotimo> nah, i get a DNS r

[13:51] <timotimo> resolve error

[13:52] *** am0c joined
[13:53] *** cognominal joined
[14:03] *** am0c left
[14:06] <dalek> roast: 4609872 | (Timo Paulssen)++ | S03-operators/assign.t:

[14:06] <dalek> roast: add a test for RT #77174 (//=, ||=)

[14:06] <dalek> roast: review: https://github.com/perl6/roast/commit/4609872a4f

[14:12] *** am0c joined
[14:18] <timotimo> https://rt.perl.org/rt3//Ticket/Display.html?id=77070 - i'm not sure if the code is actaully right. what it ends up getting is an exception "no matches"

[14:21] *** Psyche^ joined
[14:22] *** Psyche^ is now known as Patterner

[14:22] *** benabik left
[14:23] *** fgomez joined
[14:25] <census> Hi!  Is anybody familiar with java?  I have a .jar file that I'd like to translate into perl6.

[14:26] <census> (that is not a perl5 q)

[14:26] <census> (perl6 i'll take the translation into . .. perl6 might be able to handle what the code aims to do)

[14:28] *** thou joined
[14:30] *** kaleem left
[14:34] <timotimo> though barely a drop of water on a hot stone, I'm closing lots of bugs today :)

[14:35] *** Liz joined
[14:35] *** Liz is now known as Guest5300

[14:36] *** telex joined
[14:36] <FROGGS> census: why not just gist the code? so it can be translated within the gist step by step?

[14:37] <census> FROGGS: partly, because I do not even know how to access the code.  It is in a .jar format--which appears to be a zipped format--and I'm not sure how to extract the file.

[14:38] <jnthn> That's a zip of *bytecode*.

[14:38] <jnthn> Not source code.

[14:38] *** Guest5300 is now known as lizmat

[14:39] *** xinming_ joined
[14:39] <census> jnthn: Are you saying that I do not have the correct file, and I need to obtain the source code?

[14:39] <moritz> that would make things much easier

[14:40] <moritz> but why do you want to translate it to Perl 6?

[14:40] <census> because i do not know anything about java. so i'm not sure the code in java would be too helpful.  

[14:41] <FROGGS> census: but you need whatever the jar file provides?

[14:42] <census> FROGGS: in other words, you are saying that I need the source code? (as jnthn was saying, i believe)

[14:42] <FROGGS> census: depends

[14:43] *** toebu joined
[14:43] * jnthn away for a bit

[14:43] <census> depends on . . /

[14:43] <FROGGS> census: what is the jar file about?

[14:43] *** Gwyxx joined
[14:43] <geekosaur> usually you can't do much with jvm bytecode except run it. sometimes a jar is just resources (e.g. images) and you can just unpack it

[14:44] *** bluescreen10 joined
[14:44] *** grondilu joined
[14:44] <census> how would i unpack it?  i have right-clicked on it, but do not see an option to extract

[14:45] <geekosaur> guis won't know that much about jar files, but they're just renamed zip files

[14:45] <geekosaur> a jvm/jre comes with a "jar" command usually, which behaves like "tar" but processes zip files (and manages the metadata entry that should be the first item in a jar file)

[14:46] *** domidumont1 joined
[14:47] <census> geekosaur: I think I understand that, but I'm not making the next leap to what to do from there, if there is anything that I can do.

[14:48] *** domidumont left
[14:48] <geekosaur> all I can say to that is to repeat what I said earlier

[14:48] <geekosaur> [28 09:43] <geekosaur> usually you can't do much with jvm bytecode except run it. sometimes a jar is just resources (e.g. images) and you can just unpack it

[14:48] *** skids joined
[14:49] <census> Yes, and you said: "you can just unpack it."  

[14:49] <geekosaur> you might also look around for java class decompilers, but I don't really know what you would do with the output eithewr

[14:49] <geekosaur> right, but unpacking it gives you access to any images and such in the jar. I can't tell yu what to do with them afterward...

[14:49] <census> oh ok.

[14:51] *** wbook joined
[14:51] <census> thank you!

[15:03] *** wbook left
[15:03] *** Gwyxx left
[15:05] *** Gwyxx joined
[15:08] *** Gwyxx left
[15:18] <Ulti> .jar is just .zip rename the file to do some windows GUI extract

[15:18] <Ulti> then zip it back up once you've played around and rename to .jar and it will work

[15:19] <Ulti> in the same way open ebook formats are just zip archives of html files

[15:20] <Ulti> most jar files also have the .class and .java files side by side assuming its an open source project...

[15:27] <timotimo> i'm not sure the java files will even help that much. it's likely a big undertaking to translate whatever it is. it might potentially use some very advanced jav VM features or something like that, and those aren't easily ported :(

[15:31] *** am0c left
[15:31] *** drKreso joined
[15:31] <drKreso> Hi

[15:32] <drKreso> While installing Bailador with panda I have failed test : t/03-response-content.t .. 1/7 Not enough positional parameters passed; got 0 but expected 1   in sub  at t/03-response-content.t:12   

[15:32] <drKreso> I tried with --no-tests and it installs, but http server is not working properly (same error on request). So error is real. 

[15:32] <drKreso> Does anyone has any idea on what to try next?

[15:33] <FROGGS> uhh

[15:33] <FROGGS> Error while compiling, type X::::::::S::y::n::t::a::x::::::::M::i::s::s::i::n::g

[15:33] <drKreso> It  in block  at lib/Bailador.pm:84 and App.pm:14

[15:33] <FROGGS> weird

[15:33] <FROGGS> (but my fault)

[15:33] <arnsholt> jnthn: Do you have any preferences in compiler warnings? Which do you prefer of C++ compat warnings and "dereferencing type-punned pointer will break strict-aliasing rules"? =)

[15:34] <timotimo> fro	huh, did i do ^H^Hb^H^Hbreak that?

[15:34] <colomon> drKreso: I fixed that last night, but I guess tadzik hasn't pulled my fix yet.

[15:34] <phenny> colomon: 06:39Z <tadzik> tell colomon thanks for the pull request! I'll merge it as soon as I get the opportunity to run tests

[15:35] <colomon> drKreso: if you're brave, you can try https://github.com/colomon/Bailador

[15:35] *** benabik joined
[15:35] <drKreso> Hey colomon: You bet I'll try it out !

[15:36] <drKreso> Thanks

[15:36] <colomon> drKreso: no problem.  it turned out to be a very interesting, subtle bug.

[15:36] <drKreso> Can I install with panda from github ?

[15:36] <arnsholt> timotimo: You see my commits to Net::ZMQ?

[15:39] <tadzik> I'm looking at panda right now

[15:40] *** grondilu left
[15:41] *** am0c joined
[15:42] *** cognominal left
[15:44] <tadzik> colomon: merged, thanks!

[15:44] <tadzik> drKreso: should be fixed now

[15:44] <colomon> tadzik: you're welcome, I learned all sorts of things fixing it.  :)

[15:44] <tadzik> nice :)

[15:45] *** cogno joined
[15:45] <drKreso> tadzik: so I can install from panda?

[15:46] <tadzik> drKreso: it should work fine, even without --notests now :)

[15:46] <colomon> and --notests wouldn't have helped, it was definitely a real issue

[15:47] *** cognominal joined
[15:47] <drKreso> colomon, tadzik: Yes now it is installing great. Thanks

[15:47] <tadzik> yep

[15:47] <tadzik> colomon++

[15:48] <timotimo> looking at them right now, arnsholt :)

[15:48] <colomon> tadzik: I'm thinking it would be worthwhile to add some more tests of that t/03 functionality.  but I'm a little behind the eight-ball with $work atm

[15:49] <arnsholt> timotimo: Excellent!

[15:49] <drKreso> I now started perl6 app.pl in examples folder, server boots up on port 3000, but when i do curl or open page it stalls. I am not sure what is still missing from my setup.

[15:49] <timotimo> what's the next ste? i'm still stuck with my iperl6c^Hkernel thing :(

[15:50] <drKreso> eventualy i get Error 324 (net::ERR_EMPTY_RESPONSE): 

[15:51] <tadzik> yeah, it looks like this :/

[15:52] <tadzik> I wonder if it's bailador or the underlying http server

[15:53] <tadzik> it's the server :(

[15:53] <tadzik> crap

[15:53] <tadzik> it hangs on .recv() or .read() somewhere, possibly tries to read too much

[15:53] * jnthn back

[15:54] *** FROGGS left
[15:56] *** skids left
[15:56] <jnthn> arnsholt: We...get to choose between warnings?! ugh

[15:56] <arnsholt> Yeah, I know

[15:56] <jnthn> I guess 'cus we inherit our warnings flags...

[15:56] <arnsholt> Yup

[15:57] <jnthn> Well, fixing it not to whine about C++ compat has the possible benefit that it builds with a C++ compiler should somebody want to do that...

[15:57] <arnsholt> Yah

[15:59] <drKreso> tadzik: Any idea where can I look? 

[15:59] <arnsholt> What it doesn't like, if you care, is nqp_nfa_run_{proto,alt} in nqp.ops

[15:59] <jnthn> Oh...that does surprise me a bit.

[16:00] *** cogno left
[16:00] <jnthn> As in, I didn't think those did any evil...

[16:00] <arnsholt> Not really

[16:00] <arnsholt> They both have "nqp_nfa_run(interp, OBJECT_BODY($2), $3, $4, &total_fates);"

[16:01] <arnsholt> It doesn't like the second argument:  passing argument 2 of ‘nqp_nfa_run’ from incompatible pointer type (expected ‘struct NFABody *’ but argument is of type ‘void **’)

[16:01] <arnsholt> Changing it to "nqp_nfa_run(interp, (NFABody *) OBJECT_BODY($2), $3, $4, &total_fates);" gives the type-pun warning instead

[16:01] <jnthn> ah...

[16:02] <jnthn> 'cus of different level of indirection, maybe?

[16:03] <jnthn> Perhaps casting it to NFAInstance * and then passing the address of .body within that may help...or may not :)

[16:03] <jnthn> .oO( the joy of convincing compilers that you're right... )

[16:03] <arnsholt> Right, right. Different number of splats probably

[16:05] <arnsholt> Yeah, I think that'll do it

[16:06] <arnsholt> The sixmodel stooge object has "void *data" so taking & of that will be void **, but data in the NFAInstance isn't a pointer

[16:09] *** Targen joined
[16:11] <tadzik> drKreso: yes

[16:11] *** kresike left
[16:11] <tadzik> drKreso: HTTP::Easy must have a part where it reads the HTTP request, possibly until it can parse it

[16:12] <tadzik> it may be that it eats too big chunks, and somewhere it calls .read() or .recv() on a socket one time too much

[16:12] <tadzik> then it hangs

[16:12] <tadzik> you'll notice that when you terminate curl, then bailador gets the request properly

[16:12] <tadzik> for example put die() somewhere in your app code, then curl the url and ^C it

[16:13] <tadzik> so I guess that must be something related to hanging on IO

[16:13] <tadzik> (when you close the connection, the read() unblocks)

[16:14] *** SamuraiJack_ left
[16:16] *** gcole joined
[16:16] *** SamuraiJack joined
[16:23] *** SunilJoshi joined
[16:25] *** Targen left
[16:30] <colomon> tadzik: will you be looking at fixing HTTP::Easy?

[16:30] *** cogno joined
[16:32] *** thou left
[16:34] <drKreso> colomon: http-easy readme example also stalls (on port 8080)

[16:34] <drKreso> not good sign :(

[16:34] <colomon> drKreso: unfortunately I don't know anything about http-easy.  :(

[16:35] *** Targen joined
[16:37] *** lustlife joined
[16:45] *** FROGGS joined
[16:52] *** domidumont1 left
[16:52] *** Chillance joined
[16:56] *** Targen left
[16:57] *** cogno left
[17:00] *** cognominal left
[17:08] *** Targen joined
[17:11] *** PacoAir left
[17:11] *** domidumont joined
[17:13] *** PacoAir joined
[17:13] <drKreso> Hey, I am trying to debug HTTP:Easy, but when I change anything it says "Missing or wrong version of dependency 'lib/HTTP/Easy.pm6" What sort of protection is this? Hash based? What to do if I want to play with it. (Since it's not wokring for me). 

[17:15] *** PacoAir left
[17:17] <timotimo> no, just make clean && make

[17:17] *** PacoAir joined
[17:17] <timotimo> that's not a protection, it's just that the modules are precompiled and put into blib/

[17:18] *** cogno joined
[17:19] <drKreso> It's in panda lib folder?  Do I need to download lib from github? How to make my app use that downloaded version instead of panda one?

[17:20] <jnthn> -Ilib or so should do it, I think

[17:20] <jnthn> (provided you want it to look in lib)

[17:20] <timotimo> oh, right. i usually build my libraries with ufo, sometimes with panda if there's a Build.pm

[17:23] *** lizmat left
[17:27] <drKreso> timotimo: Thanks make && make install works nicely

[17:28] <drKreso> Now "only" to find problem, considering I don't know anything about perl5, perl6 and HTTP :)

[17:29] *** domidumont left
[17:29] *** domidumont joined
[17:30] *** skids joined
[17:32] *** drKreso left
[17:33] *** cogno left
[17:33] <timotimo> i don't know anything about perl5, either. but perl6 is learnable :)

[17:33] *** am0c left
[17:34] *** daxim_ left
[17:39] *** cogno joined
[17:40] <diakopter> hi

[17:41] <jnthn> o/ diakopter 

[17:46] *** am0c joined
[17:53] *** cogno left
[17:56] *** zloyrusskiy joined
[18:00] *** dakkar left
[18:00] *** zloyrusskiy left
[18:04] <tadzik> colomon: was afk; can try once I get home

[18:04] <tadzik> I don't know the code at all though

[18:05] *** SamuraiJack left
[18:07] *** cognominal joined
[18:07] *** zacts joined
[18:08] *** SamuraiJack joined
[18:11] *** donaldh left
[18:14] *** wk left
[18:17] *** cognominal left
[18:18] *** SamuraiJack left
[18:19] *** zby_home_ joined
[18:19] *** zacts left
[18:19] *** cognominal joined
[18:23] *** wk joined
[18:26] <skids> .oO(obviously the right name for NativeCall would have been ṀêŧäłCall </guitar solo>)

[18:35] *** SmokeMachine left
[18:36] *** SmokeMachine joined
[18:51] *** SunilJoshi left
[18:52] *** cognominal left
[18:57] <[Coke]> Nïce.

[19:00] *** cognominal joined
[19:04] *** census left
[19:04] <FROGGS> \m/

[19:05] *** Chillance left
[19:08] <timotimo> oh yeah \m/

[19:12] *** fhelmberger left
[19:20] <cognominal> rn: 4!

[19:20] *** japhb_ joined
[19:20] <p6eval> rakudo 22b3cf: OUTPUT«===SORRY!===␤Two terms in a row␤at /tmp/O7Ym5qNF74:1␤------> 4!⏏<EOL>␤    expecting any of:␤        infix or meta-infix␤        infix stopper␤»

[19:20] <p6eval> ..niecza v24-24-gbdc3343: OUTPUT«===SORRY!===␤␤Negation metaoperator not followed by valid infix at /tmp/8kiTEdjwdP line 1 (EOF):␤------> 4!⏏<EOL>␤␤Parse failed␤␤»

[19:21] <cognominal> I thought postfix ! was defined

[19:21] *** Targen left
[19:22] *** lichtkind_ joined
[19:22] <cognominal> nope, just a classic case of overloading as shown by S06-operator-overloading/sub.t

[19:24] <timotimo> :)

[19:24] *** shinobicl left
[19:36] *** cognominal left
[19:37] *** snearch joined
[19:37] *** snearch left
[19:38] *** snearch joined
[19:39] *** cognominal joined
[19:40] *** snearch left
[19:41] *** snearch joined
[19:42] *** snearch left
[19:44] *** snearch joined
[19:44] <[Coke]> r: sub postfix:<!>(Str $a) {$a.uc}; sub postfix:<!>(Int $a) {[*]1..$a}; say 3!, "hi"!

[19:44] <p6eval> rakudo 22b3cf: OUTPUT«===SORRY!===␤Two terms in a row␤at /tmp/itExKwfhUL:1␤------> a) {$a.uc}; sub postfix:<!>(Int $a) {[*]⏏1..$a}; say 3!, "hi"!␤    expecting any of:␤        argument list␤        postfix␤        infix or meta-infix␤        infix st…

[19:44] *** snearch left
[19:45] *** snearch joined
[19:47] *** snearch left
[19:47] <diakopter> r: multi sub postfix:<!>(Str $a) {$a.uc}; multi sub postfix:<!>(Int $a) {[*] 1..$a}; say 3!, "hi"!

[19:47] *** snearch joined
[19:47] <p6eval> rakudo 22b3cf: OUTPUT«6HI␤»

[19:48] <diakopter> [Coke]: ^^

[19:49] *** snearch left
[19:49] <[Coke]> mmm, missed a space and the multi.

[19:50] <diakopter> well, I'm not sure the space was necessary

[19:54] *** census joined
[19:59] <cognominal> Guys. That's about time. You should learn to code http://www.code.org/ says Ashton Kutcher, instead whatever you waste your time on.

[19:59] <colomon> ?

[20:00] <jasonmay> I think my career just got punk'd

[20:01] <census> well in the u.s., biology, chemistry, and physics are not all required either

[20:02] <diakopter> _._

[20:03] *** ObseLeTe joined
[20:03] <cognominal> code.org... when celebrities peddle scientism 

[20:03] <census> but are those quotes really true?  is computer programming really that fundamental?  like it will be essential for everybody in life?

[20:04] <dalek> ecosystem: e2ef125 | Dagur++ | META.list:

[20:04] <dalek> ecosystem: Added Time::Duration

[20:04] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/e2ef125b5b

[20:04] <dalek> ecosystem: cf43c40 | colomon++ | META.list:

[20:04] <dalek> ecosystem: Merge pull request #19 from dagurval/patch-2

[20:04] <nwc10> What you *really* need is more like this: http://www.bbc.co.uk/news/education-21261442

[20:04] <dalek> ecosystem: 

[20:04] <dalek> ecosystem: Added Time::Duration

[20:04] <cognominal> that's a clean job, I have heard. And not that complicated, you deals only with 0s and 1s

[20:04] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/cf43c40f1e

[20:05] <diakopter> r: my \rick.roll

[20:05] <p6eval> rakudo 22b3cf: OUTPUT«===SORRY!===␤Method 'ast' not found for invocant of class 'NQPMu'␤»

[20:05] <diakopter> erm

[20:05] <nwc10> The decision by Education Secretary Michael Gove will mean that computing will count as a science in the English Baccalaureate for secondary school league tables from January 2014 - alongside physics, chemistry, biology and pupils taking double science.

[20:07] <census> computer skills are obviously relevant to nearly everybody these days, but it is not clear to me that computer science per se is.  why not say that everybody should understand statistics because stats are everywhere?

[20:09] <census> And, why is former President Clinton there and not Current President Obama?  Nobody should be #1 before President Obama.

[20:10] <swarley> Because not everybody needs to know how to find the Poisson distribution of a normally distributed sample

[20:10] <cognominal> given the current state of technology, it's like saying everyone should learn to count using roman numerals. There is a sweet spot for a technology being taught to the masses and I don't think we are there yet.

[20:11] <jnthn> .oO( The poisson distributed always seemed like a really fishy bit of statistics to me... )

[20:11] *** rindolf left
[20:11] <dalek> nqp-jvm-prep: b972587 | jnthn++ | src/org/perl6/nqp/ (2 files):

[20:11] <dalek> nqp-jvm-prep: A couple of cloning-related fixes.

[20:11] <dalek> nqp-jvm-prep: 

[20:11] <dalek> nqp-jvm-prep: Fix the mixins bug that affected various tests with the self-host.

[20:11] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/b9725875a6

[20:12] *** breinbaas joined
[20:12] *** dvj joined
[20:12] <census> It is a very nice idea to have programming everywhere.  But I also don't think it is very feasible right now.  First, there are hardly enough quality math teachers in the U.S.  Teaching algebra is already an issue.  Second, it is not cheap to have computers and computer labs in every school.  Some school districts are not ready to afford this.

[20:13] <census> And the computer labs would not just be for every school, but more so, for every student.  So there would be a need for multiple computer labs.  Worry of potential theft and vandilism. . .

[20:15] <timotimo> it's not like you have to buy an alienware rig for each student

[20:15] <timotimo> hell, get every student a raspberry pi

[20:16] <cognominal> in some places in France, they give iPads to the students. It is blind faith like faith in TV for education 40 years ago. iPad ae nice but educational software does not exitt yet.

[20:16] <PerlJam> also, the fed would probably subsidize the purchase of computers

[20:16] <census> PerlJam: the fed in what country?

[20:16] <census> We are practically in an international recession.

[20:17] <census> and this is in developed countries.  what about poorer countries, like sub-sahrahan africa?  

[20:17] <census> these are places where just having decent textbooks are in an issue.

[20:18] <census> (I'm sorry if I've hijacked the thread with this discussion that I did not begin.)

[20:23] *** census_ joined
[20:24] <diakopter> n: my \rick.roll

[20:24] <p6eval> niecza v24-24-gbdc3343: OUTPUT«===SORRY!===␤␤Term definition requires an initializer at /tmp/N3SBgennzs line 1:␤------> my \rick⏏.roll␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1443 (die @ 5) ␤  at /home/…

[20:24] <cognominal> jnthn, in France "queue de poisson" is fishy indeed. It means fish tail,  a abrupt unwelcome ending, to cut in front (a national automobile sport)

[20:24] *** census left
[20:24] <nwc10> jnthn: the usual nqptests pass on "my" machine.

[20:25] *** census_ left
[20:25] *** census joined
[20:27] *** drKreso joined
[20:27] *** drKreso left
[20:27] *** uvtc joined
[20:27] *** drKreso joined
[20:28] *** Targen joined
[20:28] <drKreso> Hi

[20:29] <uvtc> hi, drKreso 

[20:29] *** drKreso left
[20:30] <timotimo> diakopter: i'm amused by how "ast" shows up is the \rick.roll thing :D

[20:34] <diakopter> oh LOL I didn't get that; nice

[20:34] *** bluescreen10 left
[20:34] <timotimo> recently i was wondering how hard it'd be to make a "use insults" to get insulting/demeaning exception messages. any input? i couldn't augment the exception classes to change the message method. not really sure why.

[20:38] *** cognominal left
[20:41] *** zby_home_ left
[20:41] <dalek> nqp-jvm-prep: 056d28c | jnthn++ | Makefile:

[20:41] <dalek> nqp-jvm-prep: Add "make selftest" target.

[20:41] <dalek> nqp-jvm-prep: 

[20:41] <dalek> nqp-jvm-prep: Runs t/nqp with JVM-hosted NQP. Fails 11 tests that nqptest (which uses

[20:41] <dalek> nqp-jvm-prep: cross-compilation) passes.

[20:41] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/056d28cfd3

[20:41] <dalek> nqp-jvm-prep: 5312f5c | jnthn++ | t/qast/qast_ (16 files):

[20:41] <dalek> nqp-jvm-prep: Unbust make test.

[20:41] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/5312f5c335

[20:41] <dalek> nqp-jvm-prep: 53cd449 | jnthn++ | src/org/perl6/nqp/sixmodel/KnowHOWMethods.java:

[20:41] <dalek> nqp-jvm-prep: Some missing KnowHOW introspection bits.

[20:41] <dalek> nqp-jvm-prep: 

[20:41] <dalek> nqp-jvm-prep: Gets self-host passing 53-knowhow.t.

[20:41] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/53cd4495d7

[20:42] <nwc10> hangon - now only 10 fail under selftest?

[20:42] <jnthn> yes

[20:42] <nwc10> that's pretty awesome

[20:43] <timotimo> wait what am i reading. that seems amazing!

[20:43] <PerlJam> I feel like one day soon I'm going to wonder "what happened to all of the nqp-jvm-prep commits?" because it will have all been merged into nqp

[20:45] <colomon> jnthn++

[20:46] <timotimo> but but but what when jnthn is finished? what's the next thing to be wildly excited about? :(

[20:47] <geekosaur> pypy port?

[20:48] <colomon> perl 6 being fast enough to replace perl 5 for a lot of us?

[20:50] <diakopter> timotimo: well, rakudo would need porting

[20:50] *** cognominal joined
[20:51] *** sqirrel left
[20:51] <jnthn> Indeed. In that sense, cool as porting NQP is, it's Rakudo that's the Big Goal.

[20:54] <uvtc> Maybe Rakudo on Android?

[20:56] <FROGGS> bindings to Go!

[20:58] <timotimo> so, how long can porting rakudo to jvm take when nqp is self-hosting?

[20:58] <timotimo> i would expect that'd just be a bunch of bugs that need ironing out

[20:58] <FROGGS> no, rakudo itself uses a bit pir

[20:58] <jnthn> And a bit C 

[20:58] <FROGGS> but not much I suspect

[20:59] <jnthn> And coroutines.

[20:59] <timotimo> oh, the C bit, the binding stuff, right?

[20:59] <jnthn> And multi-dispatch, and some container bits, etc.

[20:59] <timotimo> ok, that's a bit more than i thought :(

[20:59] <FROGGS> I dont think that this is a big deal

[21:00] <FROGGS> it's not that C can do some magic Java doesnt

[21:00] <nwc10> jnthn++

[21:00] <timotimo> pointer arithmetic

[21:00] <nwc10> it's acutally only 9 failing selftests

[21:00] <jnthn> nwc10: oh?

[21:00] <nwc10> on "my" machine

[21:01] <nwc10> however, i have to change the command line to this:       $(PROVE) --exec="java -cp .:bin:3rdparty/bcel/bcel-5.2.jar NQPJVM" t/nqp/*.t

[21:01] <nwc10>       $(PROVE) --exec="java -cp .:bin:3rdparty/bcel/bcel-5.2.jar NQPJVM" t/nqp/*.t

[21:01] <nwc10> and I have no idea how to write a makefile to do that portably

[21:01] <jnthn> urgh

[21:02] <nwc10> test summary: http://pasta.test-smoke.org/452

[21:02] <nwc10> no idea how to do that portably without a wrapper written in Perl

[21:02] *** drKreso joined
[21:03] <uvtc> Seems like Rust would be good for implementing a language.

[21:03] <timotimo> let's port rakudo to every single language out there. let's start with A ... anything before Ada?

[21:04] <uvtc> Sorry; just thinking out loud. Rust looks nice, but fairly low-level.

[21:11] *** kaare_ left
[21:17] <drKreso> HTTP::Easy - uses IO::Socket::INET.new listener…. then while parsing header it has line  my $line = $!connection.get.chomp; that waits forever after fetching all parts of header (last being cookie). 

[21:17] <drKreso> Anybody has any ideas?

[21:18] <FROGGS> drKreso: I believe there is a ticket for that

[21:19] <drKreso> On HTTP::Easy?

[21:19] <FROGGS> no, for rakudo

[21:19] <FROGGS> .get can block

[21:20] <FROGGS> moritz: right?

[21:20] <drKreso> FROGGS: Oh so rakudo implements Socket::INET.new?

[21:23] <FROGGS> IO::Socket::INET is in rakudo's core, yes

[21:24] <dalek> nqp-jvm-prep: 60f479a | jnthn++ | src/org/perl6/nqp/jast2bc/JASTToJVMBytecode.java:

[21:24] <dalek> nqp-jvm-prep: Fix busted string handling in assembler.

[21:24] <dalek> nqp-jvm-prep: 

[21:24] <dalek> nqp-jvm-prep: Fixes various of the remaining self-host failures.

[21:24] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/60f479a82e

[21:28] *** cognominal left
[21:30] *** cognominal joined
[21:37] <nwc10> jnthn: down to 4 selftest failures

[21:38] <nwc10> t/nqp/32-protoregex.t t/nqp/41-flat.t t/nqp/46-charspec.t t/nqp/56-role.t

[21:38] <dalek> nqp-jvm-prep: 431f8fb | jnthn++ | nqp-src/QASTNodes.nqp:

[21:38] <dalek> nqp-jvm-prep: Don't hand null strings back from QAST::Op.

[21:38] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/431f8fb729

[21:38] <jnthn> *3 :)

[21:39] <nwc10> oh, did the goalposts just move again?

[21:40] *** PacoAir left
[21:44] *** cxreg2 is now known as cxreg

[21:45] <drKreso> FROGGS: I am unable to find ticket for IO::Socket::INET problems

[21:46] *** supernovus joined
[21:46] *** cognominal left
[21:47] <drKreso> I don't know if I am searching at the right place https://rt.perl.org/rt3/Public/Search/Simple.html?q=IO%3A%3ASocket%3A%3AINET+perl6

[21:50] *** cognominal joined
[21:51] *** benabik left
[21:51] <supernovus> If the behaviour in IO::Socket::INET has changed, I may be able to work around it in HTTP::Easy to make it work for now, but ultimately the best solution is to fix the problem at its source.

[21:53] <nwc10> yes, 3

[21:54] <FROGGS> drKreso: see https://rt.perl.org/rt3/Ticket/Display.html?id=116288

[21:54] *** Tene_ is now known as Tene

[21:56] *** domidumont left
[21:59] <supernovus> It appears the final .get() that should return a blank line, just hangs. The IO::Socket::INET stuff definitely needs some work.

[22:00] <supernovus> Rebuilding rakudo to see if this issue still applies with the latest build.

[22:02] *** lustlife left
[22:03] *** SmokeMachine left
[22:03] *** cognominal left
[22:03] <drKreso> FROGGS: I tried using recv as said in that thread - no difference

[22:04] <FROGGS> is there an example that demonstrates the behaviour?

[22:05] <drKreso> FROGGS: use HTTP::Easy::PSGI;

[22:05] <drKreso>   my $http = HTTP::Easy::PSGI.new(:port(8080));

[22:05] <drKreso>   my $app = sub (%env)

[22:05] <drKreso>   {

[22:05] <drKreso>     my $name = %env<QUERY_STRING> || "World";

[22:05] <drKreso>     return [ 200, [ 'Content-Type' => 'text/plain' ], [ "Hello $name" ] ];

[22:05] <drKreso>   }

[22:05] <drKreso>   $http.handle($app);

[22:06] *** skids left
[22:06] <supernovus> FROGGS: try running the test/test.pl from HTTP::Easy's source repo with HTTP_EASY_DEBUG=1, then connect to http://localhost:8080/ in your browser. It reads the headers, gets to where there should be a blank line, and freezes.

[22:08] *** cognominal joined
[22:11] *** uvtc left
[22:14] <FROGGS> supernovus: hangs here too

[22:15] *** cognominal left
[22:17] <supernovus> FROGGS: Yeah, I just tried it with a fully reinstalled Rakudo and fresh set of modules. Same issue.

[22:18] <supernovus> Gotta run, I'll read the logs later.

[22:18] *** supernovus left
[22:18] *** cognominal joined
[22:19] <drKreso> FROGGS, supernovas: good :) At leas I am not the only one

[22:21] *** Kelder joined
[22:23] *** cognominal left
[22:28] *** cognominal joined
[22:36] *** drKreso left
[22:41] <FROGGS> the problem is the call to readline in IO/Socket/INET.pm line 98, I'll investigate tomorrow more, bedtime :/

[22:43] *** cognominal left
[22:45] *** slavik1 joined
[22:47] *** FROGGS left
[22:49] <dalek> nqp-jvm-prep: c096b92 | jnthn++ | / (3 files):

[22:49] <dalek> nqp-jvm-prep: Implement getting list of compunit coderefs.

[22:49] <dalek> nqp-jvm-prep: 

[22:49] <dalek> nqp-jvm-prep: Gets dynamic compilation unbusted, which helps towards fixing the

[22:49] <dalek> nqp-jvm-prep: roles test.

[22:49] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/c096b922b3

[22:49] <dalek> nqp-jvm-prep: f631cb7 | jnthn++ | src/org/perl6/nqp/runtime/Ops.java:

[22:49] <dalek> nqp-jvm-prep: Correct some errors.

[22:49] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/f631cb79a3

[22:49] <dalek> nqp-jvm-prep: f0e8ea9 | jnthn++ | / (3 files):

[22:49] <dalek> nqp-jvm-prep: Be explicit about what is the mainline.

[22:49] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/f0e8ea90eb

[22:49] <dalek> nqp-jvm-prep: ccb94a3 | jnthn++ | src/org/perl6/nqp/runtime/Ops.java:

[22:49] <dalek> nqp-jvm-prep: Fix outer-hunt/freshcode interaction bug.

[22:49] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/ccb94a3196

[22:49] <dalek> nqp-jvm-prep: 7d43858 | jnthn++ | nqp-src/nqp-mo.pm:

[22:49] <dalek> nqp-jvm-prep: Fix collisions handling bug in MOP code.

[22:49] <dalek> nqp-jvm-prep: 

[22:49] <dalek> nqp-jvm-prep: Caught on JVM thanks to it being a bit stricter.

[22:49] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/7d43858381

[22:49] <colomon> \o/

[22:50] <jnthn> Down to 2.

[22:56] *** sdgvf joined
[22:57] *** benabik joined
[23:11] *** labster joined
[23:15] *** ObseLeTe left
[23:20] <labster> r: say 123456789.substr(3)

[23:20] <p6eval> rakudo 22b3cf: OUTPUT«456789␤»

[23:20] <labster> r: 123456789.substr(*-3)

[23:20] <p6eval> rakudo 22b3cf: OUTPUT«Unable to coerce value for '$start' from WhateverCode to Int; no coercion method defined␤  in method substr at src/gen/CORE.setting:2275␤  in block  at /tmp/n5duuOLKwB:1␤␤»

[23:21] <labster> r: 123456789.Str.substr(*-3)

[23:21] <p6eval> rakudo 22b3cf:  ( no output )

[23:22] <labster> r: say 123456789.Str.substr(*-3)

[23:22] <p6eval> rakudo 22b3cf: OUTPUT«789␤»

[23:22] *** Liz joined
[23:23] *** Liz is now known as Guest6149

[23:23] <labster> Int.substr ( WhateverCode) seems to have a problem.

[23:24] *** Guest6149 is now known as lizmat

[23:27] <jnthn> Yes, that looks wrong.

[23:28] <jnthn> oh...

[23:28] <jnthn> I see the bug

[23:31] * cxreg ponders nqp on dalvik

[23:31] <dalek> nqp-jvm-prep: ce3ee72 | jnthn++ | lib/QAST/JASTCompiler.nqp:

[23:31] <dalek> nqp-jvm-prep: Regex compiler missed negative case of literals.

[23:31] <dalek> nqp-jvm-prep: 

[23:31] <dalek> nqp-jvm-prep: This was the root cause of the 46-charspec.t parsing bug.

[23:31] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/ce3ee72e51

[23:32] *** donaldh joined
[23:40] <dalek> rakudo/nom: 357e603 | jnthn++ | src/core/Cool.pm:

[23:40] <dalek> rakudo/nom: Remove bogus coercion from Cool.substr.

[23:40] <dalek> rakudo/nom: 

[23:40] <dalek> rakudo/nom: Found by labster++.

[23:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/357e603cae

[23:42] <dalek> roast: 87364c3 | jnthn++ | S32-str/substr.t:

[23:42] <dalek> roast: Test to cover Cool.substr(WhateverCode) case.

[23:42] <dalek> roast: review: https://github.com/perl6/roast/commit/87364c37b0

[23:46] <labster> thanks jnthn++

[23:46] *** donaldh left
[23:47] *** skids joined
