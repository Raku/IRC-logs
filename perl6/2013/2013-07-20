[00:10] <jnthn> 'night, #perl6

[00:11] <timotimo> night jnthn

[00:11] *** shachaf joined
[00:16] *** aghbas joined
[00:20] *** colomon joined
[00:24] *** ajr_ left
[00:24] *** lue left
[00:25] *** grondilu left
[00:31] *** shachaf left
[00:31] <timotimo> enh. i think i worked myself into a corner. now i don't know where my error comes from ... somewhere an NQPMu snuck in

[00:37] *** lue joined
[00:41] * timotimo finds out that serialise_array and serialize_aos are actually still needed :(

[00:44] <dalek> nqp: 173dc64 | (Solomon Foster)++ | src/ (2 files):

[00:44] <dalek> nqp: Change name sprintfAddHandler to sprintfaddargumenthandler.

[00:44] <dalek> nqp: review: https://github.com/perl6/nqp/commit/173dc64dd6

[00:44] <dalek> rakudo/nom: 492feb2 | (Solomon Foster)++ | src/core/Cool.pm:

[00:44] <dalek> rakudo/nom: Change name sprintfAddHandler to sprintfaddargumenthandler.

[00:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/492feb210f

[01:07] *** PacoAir left
[01:13] * timotimo is building all of p6doc with the new code now

[01:14] <timotimo> hardly any add_constant, mostly just $*W.find_symbol([...]).new(...)

[01:14] *** benabik left
[01:14] <timotimo> hum. i have a string in a twine that should be an object instead :|

[01:22] *** aghbas left
[01:32] <BenGoldberg> .ping

[01:33] <BenGoldberg> where is yoleaux?

[01:33] <BenGoldberg> preflex: seen yoleaux

[01:33] <preflex>  yoleaux was last seen on #perl6 1 day, 3 hours, 35 minutes and 17 seconds ago, saying: There is no ping command; nor can this be construed as a response.

[01:34] *** FROGGS_ joined
[01:36] <TimToady> then it disappeared in a puff of logic

[01:36] *** benabik joined
[01:38] *** FROGGS left
[01:38] *** PacoAir joined
[01:39] <timotimo> turns out i just verschlimmbessert the pod code

[01:41] <timotimo> hopefully i can make it all work out tomorrow

[01:41] <timotimo> gm.

[01:41] <timotimo> hm*

[01:42] <timotimo> can full pod blocks be attached to things oin perl code? or just pod strings with formatting codes?

[01:45] <BenGoldberg> r: my @a = 1..*; say @a.infinite, @a.uniq.infinite, @a.squish.infinite, (map { -$_ }, @a).infinite;

[01:45] <camelia> rakudo 492feb: OUTPUT«True(Mu)(Mu)(Mu)␤»

[01:45] <timotimo> computer says no

[01:46] <timotimo> meaning only formatted strings

[01:46] <timotimo> i wonder if that will turn out to be a deficiency

[01:46] <timotimo> or if perhaps i missed another way to attach docs

[01:47] *** PacoAir left
[01:50] <timotimo> indeed the brackets would allow nested blocks so i was wrong

[01:50] <timotimo> good to know

[01:55] <timotimo> do i understand correctly that :margin allows you to put parts of text at differing columns in thevsame block?

[01:59] *** kaare__ joined
[02:07] *** colomon left
[02:22] <raiph> timotimo: "not sure i made clear to him how objectively far along rakudo is nowadays" -- how far along do you think it is?

[02:25] <timotimo> raiph: "I REALLY LOVE PLAYING WITH IT" is totally objective, no?

[02:26] *** preflex left
[02:29] <raiph> totally :)

[02:36] <timotimo> i'm willing to invest more time into pod6 because i like it a bit better than for example markdown

[02:46] *** kaare__ left
[02:49] *** orafu left
[02:49] *** OuLouFu joined
[02:50] *** OuLouFu is now known as orafu

[03:00] <sorear> o/

[03:12] <JimmyZ> \o

[03:17] *** tokuhirom joined
[03:49] *** tokuhirom left
[04:18] *** BenGoldberg left
[04:29] *** Psyche^ joined
[04:30] *** arlinius joined
[04:32] *** Psyche^_ left
[04:48] *** SamuraiJack joined
[04:50] *** FROGGS_ left
[04:52] *** raiph left
[05:04] *** jaldhar joined
[05:08] *** raiph joined
[05:08] *** raiph left
[05:12] *** raiph joined
[05:17] *** colomon joined
[05:45] *** raiph left
[05:50] *** jaldhar left
[05:52] *** jaldhar joined
[06:12] *** Bzek left
[06:19] <TimToady> jnthn: it's not clear to me why all of the stringy substrs shouldn't just be called substr, assuming that doesn't interfere badly with type inference or some such

[06:21] *** PacoAir joined
[06:34] *** SamuraiJack left
[06:58] *** benabik left
[07:01] *** iSlug joined
[07:25] *** xilo left
[07:38] *** cognominal left
[07:39] *** cognominal joined
[07:40] *** spider-mario joined
[08:03] <tadzik> good morning #perl6

[08:05] *** domidumont joined
[08:37] *** ilogger2 joined
[08:37] *** ChanServ sets mode: +v ilogger2

[08:37] *** ggoebel2 joined
[08:39] *** domidumont joined
[08:40] *** jnthn joined
[08:41] *** moritz_ joined
[08:42] *** zakalwe_ joined
[08:42] *** zakalwe_ left
[08:42] *** zakalwe_ joined
[08:42] *** Bucciarati_ joined
[08:44] *** genehack_ joined
[08:45] *** Kelder joined
[08:46] *** Bucciarati left
[08:46] *** awwaiid_ left
[08:46] *** apejens left
[08:46] *** lee_ left
[08:46] *** nwc10 left
[08:46] *** zakalwe left
[08:46] *** LordV left
[08:46] *** moritz left
[08:47] *** PerlPilot joined
[08:48] *** Juerd_ joined
[08:48] *** nyuszika7h joined
[08:49] *** apejens joined
[08:49] *** DrEeevil joined
[08:49] *** _ilbot joined
[08:49] *** nwc10 joined
[08:49] *** LordV joined
[08:50] *** sciurius_ joined
[08:54] *** Juerd_ is now known as Juerd

[08:55] *** synopsebot joined
[08:59] *** jfried left
[08:59] *** gabriel left
[08:59] *** gabriel_1 joined
[09:02] *** `patch` left
[09:03] *** apejens left
[09:03] *** DrEeevil left
[09:03] *** _ilbot left
[09:03] *** nwc10 left
[09:03] *** LordV left
[09:04] *** bonsaikitten joined
[09:06] *** Juerd left
[09:06] *** ggoebel2 left
[09:06] *** synopsebot left
[09:06] *** Kelder left
[09:06] *** jnthn left
[09:06] *** sciurius_ left
[09:06] *** genehack_ left
[09:06] *** zakalwe_ left
[09:06] *** domidumont left
[09:06] *** nyuszika7h left
[09:06] *** PerlPilot left
[09:07] *** `patch`_ joined
[09:07] *** jfried joined
[09:07] *** apejens_ joined
[09:07] *** nwc10 joined
[09:07] *** LV joined
[09:07] *** synopsebot joined
[09:07] *** sciurius_ joined
[09:07] *** nyuszika7h joined
[09:07] *** Juerd joined
[09:07] *** PerlPilot joined
[09:07] *** Kelder joined
[09:07] *** genehack_ joined
[09:07] *** zakalwe_ joined
[09:07] *** jnthn joined
[09:07] *** domidumont joined
[09:07] *** ggoebel2 joined
[09:07] *** awwaiid joined
[09:07] *** cognominal__ joined
[09:07] *** charsbar_______2 joined
[09:07] *** ivan``_ joined
[09:07] *** simcop2387 joined
[09:07] *** pmichaud_ joined
[09:07] *** Gruber joined
[09:07] *** imarcusthis- joined
[09:07] *** PacoAir joined
[09:07] *** colomon joined
[09:07] *** arlinius joined
[09:07] *** konundra joined
[09:07] *** nebuchadnezzar joined
[09:07] *** stevan_ joined
[09:07] *** pecastro joined
[09:07] *** robinsmidsrod joined
[09:07] *** [particle] joined
[09:07] *** daniel-s_ joined
[09:07] *** Khisanth joined
[09:07] *** tadzik joined
[09:07] *** [Coke] joined
[09:07] *** sergot joined
[09:07] *** camelia joined
[09:07] *** dalek joined
[09:07] *** gdey joined
[09:07] *** jferrero joined
[09:07] *** BooK joined
[09:07] *** integral joined
[09:07] *** Nom- joined
[09:07] *** Celelibi joined
[09:07] *** morgan.freenode.net sets mode: +vv camelia dalek

[09:07] *** crazedpsyc joined
[09:07] *** eternaleye joined
[09:07] *** anocelot joined
[09:07] *** avuserow joined
[09:07] *** Woodi joined
[09:07] *** sivoais joined
[09:07] *** segomos joined
[09:07] *** rafl joined
[09:07] *** Yappo__________ joined
[09:07] *** mst joined
[09:07] *** sftp joined
[09:07] *** geekosaur joined
[09:07] *** smash joined
[09:07] *** mtk joined
[09:07] *** ugexe joined
[09:07] *** broquaint joined
[09:07] *** sorear joined
[09:07] *** eiro joined
[09:07] *** patspam joined
[09:07] *** frdmn joined
[09:07] *** vaelxon joined
[09:07] *** woolfy joined
[09:07] *** lizmat joined
[09:07] *** Maddingue joined
[09:07] *** cosimo joined
[09:07] *** PZt joined
[09:07] *** labster joined
[09:07] *** drbean joined
[09:07] *** FOAD joined
[09:07] *** jlaire joined
[09:07] *** estrabd joined
[09:07] *** itz joined
[09:07] *** TimToady joined
[09:07] *** Lorn joined
[09:07] *** revdiablo joined
[09:07] *** autumn joined
[09:07] *** mattp__ joined
[09:07] *** djanatyn joined
[09:07] *** ruoso joined
[09:07] *** sjn joined
[09:07] *** betterwo1ld joined
[09:07] *** scottp_ joined
[09:07] *** sunnavy_ joined
[09:07] *** lestrrat joined
[09:07] *** odoacre joined
[09:07] *** takesako______ joined
[09:07] *** Hor|zon_ joined
[09:07] *** szbalint_ joined
[09:07] *** baest joined
[09:07] *** Timbus joined
[09:07] *** DarthGandalf joined
[09:07] *** kshannon joined
[09:07] *** gfldex joined
[09:07] *** hoelzro joined
[09:07] *** sjohnson joined
[09:07] *** mathw joined
[09:07] *** p5eval joined
[09:07] *** bakedb joined
[09:07] *** Tene joined
[09:07] *** bloonix joined
[09:07] *** obra joined
[09:07] *** Pompel_ joined
[09:07] *** rs0 joined
[09:07] *** JimmyZ joined
[09:07] *** SHODAN joined
[09:07] *** markov joined
[09:07] *** avar joined
[09:07] *** felipe joined
[09:07] *** Rix joined
[09:07] *** logie joined
[09:07] *** ponbiki joined
[09:07] *** tomaw joined
[09:07] *** ingy joined
[09:07] *** __sri joined
[09:07] *** Gothmog_ joined
[09:07] *** pnu joined
[09:07] *** wtw_ joined
[09:07] *** groky joined
[09:07] *** BinGOs joined
[09:07] *** felher joined
[09:07] *** arnsholt joined
[09:07] *** danaj joined
[09:07] *** timotimo joined
[09:07] *** silug_ joined
[09:08] *** bonsaikitten is now known as Guest96567

[09:10] *** bruges joined
[09:10] *** Exodist joined
[09:10] *** kst joined
[09:10] *** mikemol_ joined
[09:10] *** atrodo joined
[09:10] *** jercos joined
[09:10] *** diakopter joined
[09:10] *** cotto joined
[09:10] *** risou_awy joined
[09:10] *** zamolxes joined
[09:12] *** breinbaas joined
[09:12] *** fgomez_ joined
[09:13] *** _ilbot joined
[09:13] *** daniel-s_ left
[09:14] *** daniel-s_ joined
[09:14] *** drbean left
[09:17] *** bruges_ joined
[09:18] *** spider-mario_ joined
[09:18] *** DrEeevil joined
[09:18] *** moritz joined
[09:19] *** fgomez_ left
[09:19] *** spider-mario_ is now known as spider-mario

[09:20] *** jtpalmer_ joined
[09:20] *** amkrankruleuen joined
[09:24] *** rhr joined
[09:24] *** berekuk_ joined
[09:24] *** bruges left
[09:24] *** Guest96567 left
[09:24] *** moritz_ left
[09:24] *** lee_ joined
[09:24] *** Colby` joined
[09:24] *** Colby` is now known as Pleiades`

[09:26] *** hugme joined
[09:26] *** ChanServ sets mode: +v hugme

[09:37] <jnthn> o/

[09:38] <arnsholt> 'lo

[09:38] <arnsholt> jnthn: Should I have to do something to get the dyncall ops loaded in plain NQP?

[09:40] <jnthn> arnsholt: You mean, besides having mappings for them in Compiler.nqp?

[09:40] <arnsholt> Yah

[09:41] <arnsholt> I'm writing a test file (using Parrot NQP) and it seems to not recognise the op

[09:41] <arnsholt> Do I have to .loadlib something perhaps?

[09:41] <jnthn> oh...Parrot

[09:42] <jnthn> yeah, there they need to get a loadlib

[09:42] <jnthn> Passing --vm-libs=nqp_dyncall or so is one way

[09:42] <arnsholt> That'll do for now, thanks!

[09:47] <arnsholt> Hmm. Looks like --vm-libs is no more, but pir::loadlib will do for now, I guess

[09:48] <arnsholt> Cross-platform can wait

[09:48] *** Kelder is now known as Ayiko

[09:49] <arnsholt> Blah, that's not an op either

[09:49] <dalek> Perlito: f04d32c | (Flavio S. Glock)++ | / (9 files):

[09:49] <dalek> Perlito: Perlito5 - keep track of existing namespaces for indirect-object parser; namespace cleanup

[09:49] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/f04d32c3e1

[09:57] *** Rotwang joined
[10:05] <jnthn> arnsholt: oh, without the hyphen

[10:06] <jnthn> --vmlibs

[10:20] *** ztt joined
[10:28] *** kingbeast joined
[10:35] *** GlitchMr joined
[10:53] *** zakalwe_ left
[11:02] *** DrEeevil left
[11:02] *** `patch`_ left
[11:02] *** apejens_ left
[11:02] *** nwc10 left
[11:02] *** bonsaikitten joined
[11:02] *** nwc10 joined
[11:02] *** apejens joined
[11:02] *** `patch` joined
[11:20] *** zakalwe joined
[11:30] <dalek> nqp: 8f912e2 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/ (4 files):

[11:30] <dalek> nqp: VMArray should serialize its type.

[11:30] <dalek> nqp: 

[11:30] <dalek> nqp: This fixes the issue with the utf8/utf16/utf32 types in the new Buf

[11:30] <dalek> nqp: implementation.

[11:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8f912e2e8f

[11:30] <dalek> nqp: 91720fe | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/P6 (2 files):

[11:30] <dalek> nqp: Get P6int/P6num to take/keep bit size.

[11:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/91720febfb

[11:30] <dalek> nqp: 2ea09b8 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/VMArray (4 files):

[11:30] <dalek> nqp: Compact int8/int16/int32 array storage.

[11:30] <dalek> nqp: 

[11:30] <dalek> nqp: This means a buf8/utf8/blob8 will actually be a byte array in memory.

[11:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2ea09b8e6f

[11:31] <jnthn> arnsholt: 91720fe is probably helpful to your nativecall work :)

[11:39] <jnthn> afk for a bit

[11:47] *** dmol joined
[11:49] *** frdmn left
[11:54] *** daniel-s__ joined
[11:55] *** frdmn joined
[11:55] *** daniel-s_ left
[11:57] *** Bucciarati_ is now known as Bucciarati

[12:13] *** dmol1 joined
[12:14] *** dmol left
[12:36] *** ztt left
[12:46] *** dmol1 left
[13:08] *** crab2313 joined
[13:12] *** SamuraiJack joined
[13:19] *** SamuraiJack_ joined
[13:21] *** SamuraiJack left
[13:27] <arnsholt> jnthn: Oh, super! Cheers!

[13:28] *** zby_home_ joined
[13:29] <ggoebel2> An article on why javascript (and dynamic languages using GC) aren't currently up to muster on mobile devices and the performance challenges they face: http://sealedabstract.com/rants/why-mobile-web-apps-are-slow/

[13:34] *** birdwindupbird joined
[13:38] *** mtk left
[13:39] <bonsaikitten> ggoebel2: pretty much nonsense

[13:39] <bonsaikitten> "when I do stupid things the results are stupid"

[13:39] *** birdwindupbird left
[13:41] *** drbean joined
[13:44] <colomon> jnthn: speaking of weird results, I sometimes run out of memory compiling jakudo on my Mac.  8 gigs of ram, 33 gigs of hard drive space.

[13:47] <tadzik> arnsholt: ping

[13:48] *** crab2313 left
[13:50] <tadzik> arnsholt: do you feel like some beer today? :)

[13:54] <jnthn> colomon: I suspect you're not really running out of memory, just hitting a heap size limit

[13:56] <jnthn> ggoebel2, bonsaikitten: The bits on GC performance relative to how much memory it's allowed to use match what I've seen in various situations, fwiw.

[14:05] <colomon> jnthn: the thing I find scary about the situation is I then hit make again and everything works.

[14:07] <jnthn> colomon: OK, that's weird.

[14:08] <mst> tadzik: YES

[14:17] *** grondilu_ joined
[14:17] *** grondilu joined
[14:18] <grondilu> 'our $someVar is export = *' <-  is that NYI or something?

[14:19] <jnthn> correct

[14:19] <grondilu> ok

[14:19] <jnthn> constant foo is export # does work

[14:19] * grondilu tries that

[14:20] <tadzik> mst: are you in Oslo?

[14:20] <mst> tadzik: no, but I'm still going to drink beer today :)

[14:20] <tadzik> fair enough :)

[14:22] *** kingbeast left
[14:24] <arnsholt> tadzik: Beer would be cool, but sadly I'm not in Oslo today

[14:25] <arnsholt> How long are you in Oslo?

[14:31] <tadzik> arnsholt: until thursday

[14:31] <tadzik> and contrary to my initial expectations, I'll probably have plenty of time during the week as well :)

[14:33] *** grondilu_ left
[14:37] <timotimo> \o/

[14:38] <dalek> nqp: 92197db | jnthn++ | src/vm/jvm/ (2 files):

[14:38] <dalek> nqp: Add nqp::encode(...) op for encoding to a buffer.

[14:38] <dalek> nqp: review: https://github.com/perl6/nqp/commit/92197dbeeb

[14:40] <timotimo> yays! :)

[14:40] <dalek> rakudo/rebuf: 958ece3 | jnthn++ | src/core/ (4 files):

[14:40] <dalek> rakudo/rebuf: Get Str.encode working for new Buf implementation.

[14:40] <dalek> rakudo/rebuf: 

[14:40] <dalek> rakudo/rebuf: It now also returns utf8/utf16/utf32 types when appropriate, falling

[14:40] <dalek> rakudo/rebuf: back to blob8 for the rest of the cases. With this, both unpack.t and

[14:40] <dalek> rakudo/rebuf: pack.t now pass on JVM (will need some work on Parrot to get things to

[14:40] <dalek> rakudo/rebuf: work again there, though).

[14:41] <dalek> rakudo/rebuf: review: https://github.com/rakudo/rakudo/commit/958ece317b

[14:46] * jnthn guesses trying to decode a utf8/utf16/utf32 as if they were anything else should just fail

[14:46] <arnsholt> jnthn++ # nqp::encode

[14:47] <arnsholt> I agree. It should throw an exception of some kind

[14:47] <arnsholt> Trying to magically recover from badly encoded data isn't going to be fun (and will likely cause all kinds of backwards compat headaches later on)

[14:47] <jnthn> *nod*

[14:48] <jnthn> Well, this is the specy-ish Buf/Blob etc implementation attempt so far, so we get to figure out the interesting corner cases :)

[14:48] <jnthn> It's easier to explore 'em with an impl, though :)

[14:48] <arnsholt> tadzik: Cool. We should be able to get some beers during the week then. I'm back at work on monday. You at the Oslo Opera office for a bit?

[14:49] *** crab2313 joined
[14:49] *** mtk joined
[14:51] *** crab2313 left
[14:53] *** xilo joined
[14:58] *** mdxi joined
[15:02] *** rindolf joined
[15:08] *** raiph joined
[15:09] <tadzik> arnsholt: yeah, I'm sent here to work with the rest of the team

[15:20] <dalek> nqp: 3fde283 | jnthn++ | src/vm/jvm/ (2 files):

[15:20] <dalek> nqp: First pass at nqp::decode(...).

[15:20] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3fde283c28

[15:22] *** zby_home_ left
[15:22] <dalek> rakudo/rebuf: 36a3460 | jnthn++ | src/core/Buf.pm:

[15:22] <dalek> rakudo/rebuf: Add decode for new Buf implementation.

[15:22] <dalek> rakudo/rebuf: 

[15:22] <dalek> rakudo/rebuf: Again, will need some work to get this supported on Parrot too. Also

[15:22] <dalek> rakudo/rebuf: added .Str that works to utf8/utf16/utf32 types since they carry their

[15:22] <dalek> rakudo/rebuf: encoding around with them.

[15:22] <dalek> rakudo/rebuf: review: https://github.com/rakudo/rakudo/commit/36a3460b59

[15:22] *** n0den1te joined
[15:24] *** zby_home joined
[15:30] * [Coke] yawns

[15:36] *** dispareil joined
[15:38] <dispareil> Hi everyone ....i want to know about the future prospects of Perl 6

[15:47] <mst> 'pretty f*cking awesome'

[15:48] <[Coke]> msg++

[15:48] <[Coke]> ... msT++

[15:52] <mst> people are having awesome fun, exploring awesome ideas, the latest VM work shows a path to passing 'fast enough' for a bunch more problems than previously

[15:54] <[Coke]> dispareil: did you have a more specific question?

[15:55] <[Coke]> anyone here that's familiar with java's ProcessBuilder?

[15:55] <woolfy> mst++

[15:56] <mst> dispareil: it's notable that I'm a happy perl5 programmer and fairly known as being relatively skeptical of the perl6 project's chances of being -my- choice of next language to use

[15:56] <n0den1te> [Coke]: qx and backticks?

[15:57] <mst> dispareil: but really, things are looking very cool at the moment and even if I never go from 'skeptical' to 'believer' I really enjoy hanging out here and sharing ideas :)

[16:00] <[Coke]> n0den1te: I'm trying to polish off the shell() implementation, but yes.

[16:01] <n0den1te> [Coke]: cool, what did you want to know about PB? Maybe I can help there. :)

[16:03] <[Coke]> let me gist something.

[16:08] *** lizmat left
[16:08] <[Coke]> https://gist.github.com/coke/6045565

[16:08] *** lizmat joined
[16:09] <[Coke]> It seems that the env. I'm creating is not being passed along.

[16:10] <[Coke]> (apologies for the large amount of debugging output)

[16:10] <n0den1te> oldest form of debugging. :)

[16:11] <n0den1te> okay, so when you spawn the shell command you want to inherit the parent's environment? 

[16:11] <TimToady> actually, I believe the oldest form of that required tweezers

[16:12] <lizmat> magnetic ones, at that :-)

[16:12] <n0den1te> TimToady: Ah, I'm too young to remember those. :-)

[16:13] * TimToady has seen computers with vacuum tubes running for real work

[16:14] <TimToady> though I'm not old enough to have witnessed the moth incident :)

[16:15] <TimToady> n0den1te: by default, you pass on what your parent gave you, but a process also needs to be able to override part or all of it

[16:16] <[Coke]> n0den1te: yes.

[16:17] <[Coke]> well. This is perl, so I want to inherit the parent's %*ENV, not the actual java System.getEnv

[16:19] <n0den1te> [Coke]:  the XX prefixed items are where you have put entries from parent's ThreadContext. 

[16:19] <n0den1te> I don't know nqp's API well enough to say - what you got out of iter is from System.getEnv props. 

[16:19] <TimToady> also note that %*ENV, as a dynamic variable, is designed to be inherited within Perl 6 as well, so you probably want whatever %*ENV is visible at the point of whatever is spawned

[16:19] <[Coke]> the XX are testing whether or not it was impacting new entries or just old entries. no impact - they all get the old value, not the new value.

[16:20] <[Coke]> TimToady: one impossible problem at a time.

[16:20] <[Coke]> (also, I'm pretty sure we're getting that for "free" with the current setup)

[16:20] <[Coke]> (we're passing in the dynamic env when the nqp opcode is invoked.)

[16:20] <TimToady> (if a spawner wants the original ENV that our process inherited, it can always say something like: my %*ENV = %PROCESS::ENV;

[16:21] <TimToady> [Coke]: okay, good

[16:21] <n0den1te> [Coke]: well, if you *really* want to wipe environment with a new set of items, you can look into Runtime's exec family of methods. 

[16:21] <n0den1te> They all call into PB under the hood. 

[16:21] <[Coke]> n0den1te: from the docs, I should be able to get the env, clear it, and then set new values.

[16:22] *** skids joined
[16:23] *** birdwindupbird joined
[16:26] *** dispareil left
[16:29] *** pupoque joined
[16:38] *** Rotwang left
[16:38] *** skids left
[16:38] *** skids joined
[16:40] <n0den1te> [Coke]: Yes, I had that doc open here. I just wrote a small test to verify those docs were right. 

[16:43] <n0den1te> [Coke]: there's nothing that stands out to me from your gist as to the error. 

[16:44] <n0den1te> [Coke]: except maybe that you're not getting *ENV propagated back into your shell()'s context. 

[16:45] <[Coke]> I just whipped up a small example that works fine. :|

[16:46] <[Coke]> https://gist.github.com/coke/6045565 //WTF.java

[16:46] <[Coke]> (if I run that with "/usr/bin/env", I get the expected output)

[16:47] <n0den1te> [Coke]: That'd work fine (I tried that out here too). What I meant was, somehow the mehtod doesn't see that *ENV<key> was modified and the ThreadContext sees the default shell env vars. 

[16:47] *** lue joined
[16:48] <[Coke]> but it does see that it was modified - when I'm looping over the keys of $*ENV, the correct value is there.

[16:48] <[Coke]> arglebargle, no it isnt.

[16:48] <[Coke]> thank you

[16:50] <n0den1te> [Coke]: nice, we all have our days. :)

[16:50] <[Coke]> TimToady: this is how I'm invoking the op from rakudo:

[16:50] <[Coke]> $status = nqp::shell($cmd, nqp::getattr(%*ENV, EnumMap, '$!storage'));

[16:51] <[Coke]> wondering if there is a better way to spcify the ENV there, or a better way to ask for the internal java storage.

[16:53] <jnthn> [Coke]: Looks right to me at first glance

[16:53] <[Coke]> jnthn: it should, it came from you. ;)

[16:53] *** Rotwang joined
[16:54] <jnthn> ;)

[16:54] <jnthn> Well, I'm not equally smart every day :)

[16:55] * TimToady compensates by being equally smartmouthed every day :)

[16:56] * TimToady is usually not equally smart on any day, let alone every day...

[16:57] <dalek> nqp: fe29d89 | jnthn++ | src/vm/parrot/6model/reprs/VMArray.c:

[16:57] <dalek> nqp: Missing GC marking in VMArray REPR on Parrot.

[16:57] <dalek> nqp: review: https://github.com/perl6/nqp/commit/fe29d8945e

[16:57] <jnthn> *sigh* it still segfaults...

[16:59] <arnsholt> nqp/t/nativecall/01-basic.t now has one passing testcase \o/

[17:00] <arnsholt> jnthn: Would you be sad if all the tests in the NQP on Parrot were run under 'nqp --vmlibs=nqp_dyncall_ops'?

[17:01] <jnthn> arnsholt: Could live with it

[17:01] <arnsholt> tadzik: Cool. I work at the university, so we can meet up on the subway heading into the city. You have any preference for monday or wednesday?

[17:02] <arnsholt> Spiffy. 'Cause that's by far the easiest way to get the NativeCall tests running properly on Parrot

[17:03] <arnsholt> I'll see if I can come up with something more clever, but that's the dead easy way. Just make it prove --exec '$(NQP_EXE) --vmlibs=nqp_dyncall_ops' ...

[17:06] <jnthn> Ugh. Now I understand why VMArray deserialization segfaults...

[17:06] * jnthn figures he'll fix that after dinner

[17:22] *** birdwindupbird left
[17:23] *** ajr joined
[17:23] *** ajr is now known as Guest88114

[17:23] *** Guest88114 is now known as ajr_

[17:28] <diakopter> jnthn: why was it? :)

[17:43] <TimToady> it was because he hasn't yet fixed it after dinner

[17:44] * n0den1te groans

[18:18] *** n0den1te left
[18:20] <diakopter> :)

[18:22] *** rindolf left
[18:33] *** rindolf joined
[18:38] *** rindolf left
[18:52] *** rindolf joined
[18:54] *** fgomez joined
[19:05] * jnthn back

[19:05] <diakopter> wb

[19:05] *** rindolf left
[19:05] * jnthn grumbles about the warm weather

[19:17] *** skids left
[19:19] *** SamuraiJack_ left
[19:24] <tadzik> yeah, I got to Norway and all I got was warm weather too. I feel cheated :P

[19:24] <tadzik> arnsholt: I don't have plans for either so far

[19:24] <lizmat> if it's any consolation: the coming for days in NL are going tobe 30+

[19:24] <lizmat> four

[19:31] <jnthn> eek

[19:32] <arnsholt> tadzik: How about Wednesday, then? Should I pick a brew pub, or do you have some places you'd like to visit?

[19:33] *** cognominal__ left
[19:33] <dalek> roast: 0a12a9c | (Elizabeth Mattijsen)++ | integration/99problems-21-to-30.t:

[19:33] <dalek> roast: pick() is now implemented

[19:33] <dalek> roast: review: https://github.com/perl6/roast/commit/0a12a9c165

[19:36] <lizmat> r: my Any $a; say $a.list; my Hash $h; say $h.list # there is a discrepancy here that smells

[19:36] <camelia> rakudo 492feb: OUTPUT«(Any)␤Cannot look up attributes in a type object␤  in method pairs at src/gen/CORE.setting:7181␤  in method list at src/gen/CORE.setting:7175␤  in block  at /tmp/dRd2wyGXC4:1␤␤»

[19:37] <lizmat> FWIW, I think both should generate an empty list, the latter of type Hash

[19:38] <lizmat> jnthn: we figured not going to Portland would give us some cooler weather

[19:38] <lizmat> but instead of us going to Portland, the Portland weather came to us

[19:40] <tadzik> arnsholt: I've no idea for a place :)

[19:41] <jnthn> lizmat: Sounds like...

[19:44] <lizmat> jnthn: in EnumMap::pairs it says: "return unless nqp::defined($!storage);"  This bombs with "Cannot look up attributes in a type object" in nqp::defined

[19:44] <lizmat> so I guess the intent there *was* to return an empty list

[19:44] *** raiph left
[19:46] <jnthn> Isn't it the $!storage that'd bomb?

[19:46] <lizmat> you could also say that...

[19:46] *** domidumont left
[19:47] <lizmat> anyway, the test seems bombing in a way that is not intended, I would think

[19:47] <jnthn> r: say EnumMap.pairs

[19:47] <camelia> rakudo 492feb: OUTPUT«Cannot look up attributes in a type object␤  in method pairs at src/gen/CORE.setting:7181␤  in block  at /tmp/Op0nABViNL:1␤␤»

[19:48] <jnthn> Probably Paris should only be defined on EnumMap:D

[19:49] <jnthn> *paris

[19:49] <lizmat> well, from you guidance, I have refrained from turning methods into multi methods

[19:49] <jnthn> um. pairs

[19:49] <jnthn> You can :D on single dispatch too :)

[19:49] <lizmat> we'll always have pairs  :-)

[19:49] <TimToady> Pairs in the the spring.

[19:50] <lizmat> jnthn: will try that

[19:51] *** raiph joined
[19:52] <jnthn> grr, Rakudo on Parrot takes at lesat twice as long to build as Rakudo on JVM...

[19:54] <lizmat> anyway, suppose I have a list of Hashes: my Hash @l

[19:54] <dalek> nqp: c37b962 | jnthn++ | src/vm/parrot/6model/serialization.c:

[19:54] <dalek> nqp: Set type object STable earlier in deserialization.

[19:54] <dalek> nqp: 

[19:54] <dalek> nqp: Otherwise, things like typed arrays find the types they want to look

[19:54] <dalek> nqp: at the storage_spec of are not yet complete enough and explode.

[19:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c37b96227f

[19:54] <lizmat> jnthn: is that to fix the pb I found?

[19:55] <jnthn> lizmat: No, it's part of my work to get the new Buf stuff I'm doing to work on Parrot.

[19:55] <lizmat> ah, ok

[19:57] <lizmat> back to what I was saying: so you have a list of Hashes @l, you can then *not* just simply do a keys/kv/pairs on any element, because they might bomb if not properly initialized yet

[19:58] <lizmat> you would *have* to say something like "my Hash @l is default ({})" to make this work

[19:58] <lizmat> that seems counter-intuitive to me

[19:59] *** rindolf joined
[19:59] <lizmat> possibly we could make "is default ({})" the default for Hash ?

[19:59] *** cognominal joined
[19:59] <lizmat> conversely "is default([])" the default for List/Array ?

[20:05] <lizmat> jnthn: adding the EnumMap:D:, turns the error into "Parameter '' requires an instance, but a type object was passed"

[20:06] <jnthn> Yup

[20:06] <jnthn> We can probably be smarter when we know it's the invocant

[20:07] *** raiph left
[20:07] <jnthn> But it's failing to reach the method rather than failing inside of it now, at least.

[20:07] <lizmat> well, that's what I'm saying: it should return an empty something appropriate for the given method

[20:08] *** raiph joined
[20:08] <jnthn> I'm not convinced an undefined thing should magically pretend it's an empty thing...

[20:09] <lizmat> r: my Hash %h; say %h<foo>.keys

[20:09] <camelia> rakudo 492feb: OUTPUT«Cannot look up attributes in a type object␤  in method pairs at src/gen/CORE.setting:7181␤  in method keys at src/gen/CORE.setting:7177␤  in block  at /tmp/rXs2KeQu2r:1␤␤»

[20:10] <lizmat> in a similar P5 situation, this would just return an empty list

[20:10] <lizmat> p5eval: my %h; keys %{ $h{foo}}

[20:10] <p5eval> lizmat: 0

[20:10] *** sftp left
[20:11] <lizmat> p5eval: my %h; ()=keys %{ $h{foo}}

[20:11] <p5eval> lizmat: 0

[20:11] <lizmat> p5eval: my %h; print keys %{ $h{foo}}

[20:11] <p5eval> lizmat: 1

[20:11] <lizmat> grrr

[20:12] <lizmat> anyway, P5's "0" is the number of keys, not the first key as it is currently in P6

[20:12] <lizmat> p5eval: my %h; my @a= keys %{ $h{foo}}; $#a

[20:12] <p5eval> lizmat: -1

[20:13] *** sftp joined
[20:13] <lizmat> r: my %h; my @a= keys %h<foo>; say @a.end

[20:13] <camelia> rakudo 492feb: OUTPUT«0␤»

[20:13] <lizmat> r: my %h; my @a= keys %h<foo>; say @a.elems

[20:13] <camelia> rakudo 492feb: OUTPUT«1␤»

[20:14] <lizmat> p5eval: my %h; my @a= keys %{ $h{foo}}; 0+@a

[20:14] <p5eval> lizmat: 0

[20:14] <lizmat> so, in p5 we get an empty array, in perl 6 we got an array with one elemen

[20:15] <lizmat> well, that is, if we *don't* type the hash.  If we *do* type the hash, it bombs

[20:15] <lizmat> r: my Hash %h; my @a= keys %h<foo>; say @a.elems

[20:15] <camelia> rakudo 492feb: OUTPUT«Cannot look up attributes in a type object␤  in method pairs at src/gen/CORE.setting:7181␤  in method keys at src/gen/CORE.setting:7177␤  in sub keys at src/gen/CORE.setting:2122␤  in sub keys at src/gen/CORE.setting:2121␤  in block  at /tmp/ibkWfRPDXo:1␤␤»…

[20:19] <lizmat> jnthn: if the invocant is defined, ten $!storage is always set, right ?

[20:19] <jnthn> No

[20:19] <jnthn> The underlying storage is lazily allocated

[20:21] <lizmat> so guarding a method like "invert" with an EnumMap:D: will still bomb if the storage hasn't been allocated yet

[20:22] <lizmat> r: myt Hash $h=()  # somewhat related, is this a rakudobu ?

[20:22] <camelia> rakudo 492feb: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/AEi2uFGho9:1␤------> [32mmyt Hash [33m⏏[31m$h=()  # somewhat related, is this a rak[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        statement end␤      …

[20:22] <lizmat> r: my Hash $h=()  # somewhat related, is this a rakudobu ?

[20:23] <camelia> rakudo 492feb: OUTPUT«Type check failed in assignment to '$h'; expected 'Hash' but got 'Parcel'␤  in block  at /tmp/UZvBZZPVsf:1␤␤»

[20:23] <jnthn> lizmat: No, that's what the defiend check is for.

[20:24] <lizmat> you mean the "return unless nqp::defined($!storage)", right?

[20:24] <jnthn> yes

[20:26] <lizmat> r: my Hash $h={}  # guess it should be thiss

[20:26] <camelia> rakudo 492feb:  ( no output )

[20:26] <dalek> nqp: abc88b3 | jnthn++ | src/vm/parrot/6model/reprs/VMArray.c:

[20:26] <dalek> nqp: Give VMArray its missing get_elem_stable.

[20:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/abc88b37ec

[20:26] <dalek> nqp: 4c6b793 | jnthn++ | src/vm/parrot/6model/reprs/VMArray.c:

[20:26] <dalek> nqp: Fix VMArray growth logic bug.

[20:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4c6b793caf

[20:28] <lizmat> r: my EnumMap $h; say $h.hash  # shouldn't this be (Hash) ?

[20:28] <camelia> rakudo 492feb: OUTPUT«(EnumMap)␤»

[20:28] <jnthn> No. .list and .hash are "give me something listy/hashy", not expect coercions.

[20:28] <jnthn> *exact

[20:29] <lizmat> ok

[20:32] *** rindolf left
[20:32] <lizmat> TimToady: would you consider "my Hash $h is default({})" valid code?  having the default me {} rather than a simple value?

[20:32] <jnthn> The sparse case of "my Hash @foo" is probably worth a spec question if there's no answer at present, though, with regard to things like .pairs.

[20:33] <lizmat> ok, will write of a spec issue then

[20:33] <lizmat> s/of/up/

[20:37] <lizmat> n: 	 r: my Hash %h; my @a= keys %h<foo>; say @a.elems  # just curious

[20:37] <camelia> niecza v24-88-g1f87209: OUTPUT«1␤»

[20:38] <lizmat> n: my Hash %h; my @a= keys %h<foo>; say @a.elems  # just curious

[20:38] <camelia> niecza v24-88-g1f87209: OUTPUT«1␤»

[20:38] <lizmat> n: my Hash %h; my @a= keys %h<foo>; say @a # just curious

[20:38] <camelia> niecza v24-88-g1f87209: OUTPUT«0␤»

[20:39] <lizmat> that doesn't feel right either, but at least it doesn't bomb

[20:42] <dalek> nqp: 0c3febd | jnthn++ | src/vm/parrot/ (2 files):

[20:42] <dalek> nqp: A few more missing VMArray pieces Buf needs.

[20:42] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0c3febdd4b

[20:43] *** ecocode joined
[20:46] * timotimo works on a preliminary ugly-ish hack to make pod blocks get implicit indent if they are specced to.

[20:47] *** mdxi left
[20:47] *** mdxi joined
[20:49] <lizmat> jnthn: FWIW, if I remove "return unless nqp::defined($!storage);" from EnumMap::pairs(EnumMap:D:), I get massive spectest failures

[20:50] <jnthn> Yes, I'd imagine.

[20:50] <lizmat> so it would seem that at some level, the code already depends on return an empty list on lack of $!storage

[20:50] <jnthn> Yes, the point of adding the :D was to prevent the method being called on a type object, it's orthogonal to if $!storage is populated

[20:51] *** ajr_ left
[20:51] <lizmat> so how do you create a Hash that is DEFINITE but doesn't have $!storage ?

[20:51] <jnthn> Every hash starts that way, I think.

[20:52] <jnthn> r: my %h; say nqp::defined(nqp::getattr(%h, EnumMap, '$!storage'))

[20:52] <camelia> rakudo 492feb: OUTPUT«0␤»

[20:52] *** mdxi left
[20:53] <lizmat> r: my $h=Hash.new; say nqp::defined(nqp::getattr($h, EnumMap, '$!storage'))

[20:53] <camelia> rakudo 492feb: OUTPUT«Can not get attribute '$!storage' declared in class 'EnumMap' with this object␤  in block  at /tmp/S1a0WxnjDH:1␤␤»

[20:54] <jnthn> $h has a scalar container around it

[20:54] <jnthn> So you'd need nqp::decont($h) in the getattr

[20:54] <lizmat> r: my $h=Hash.new; say nqp::defined(nqp::getattr(nqp::decont($h), EnumMap, '$!storage'))

[20:54] <camelia> rakudo 492feb: OUTPUT«0␤»

[20:55] <lizmat> gotcha

[21:08] <lizmat> jnthn: the error message "Parameter '' requires an instance, but a type object was passed"

[21:08] <lizmat> wouldn't that be better as "Invocant requires an instance, but a type object was passed"

[21:09] <lizmat> or perhaps even better as "Cannot call "foo" on a type object" ?

[21:09] <jnthn> lizmat: Yes, it would be.

[21:10] <jnthn> Well, the invocant one at lesat is easy to do

[21:10] <lizmat> ok, I'll go dig

[21:17] <dalek> rakudo/nom: c5d90d6 | (Elizabeth Mattijsen)++ | src/core/EnumMap.pm:

[21:17] <dalek> rakudo/nom: Standardized error where EnumMap type objects are used as invocant when they shouldn't

[21:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c5d90d6bbd

[21:18] *** ecocode` joined
[21:19] *** bruges joined
[21:20] <lizmat> jnthn: in bind.c , if there is no param->variable_name, can I assume it is about the invocant ?

[21:20] *** ecocode left
[21:20] <lizmat> (line 478)

[21:21] *** bruges_ left
[21:23] <dalek> Perlito: 754fd76 | (Flavio S. Glock)++ | / (4 files):

[21:23] <dalek> Perlito: Perlito5 - indirect-object parser works (" new Dog -> bark ")

[21:23] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/754fd7667f

[21:24] <jnthn> lizmat: No

[21:24] <jnthn> lizmat: But param->flags has a "this is an invocant" flag in there somewhere.

[21:24] <lizmat> aha, ok

[21:25] <jnthn> (it's just a big bitmask thingy)

[21:25] <lizmat> SIG_ELEM_INVOCANT

[21:28] <jnthn> sounds like it

[21:29] <dalek> nqp: 38cee07 | jnthn++ | src/vm/parrot/ (2 files):

[21:29] <dalek> nqp: nqp::encode and nqp::decode on Parrot.

[21:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/38cee073e4

[21:31] <timotimo> cool :)

[21:31] <jnthn> Missing: the operators, getting read/write IO operations that use Buf updated.

[21:32] *** pupoque left
[21:33] *** pupoque joined
[21:36] *** spider-mario left
[21:39] <lizmat> r: Hash.pairs

[21:39] <camelia> rakudo 492feb: OUTPUT«Cannot look up attributes in a type object␤  in method pairs at src/gen/CORE.setting:7181␤  in block  at /tmp/GqyEutmyKK:1␤␤»

[21:39] <dalek> rakudo/nom: 819d371 | (Elizabeth Mattijsen)++ | src/vm/parrot/guts/bind.c:

[21:39] <dalek> rakudo/nom: Make some lower level error message more understandable

[21:39] <dalek> rakudo/nom: 

[21:39] <dalek> rakudo/nom: Hash.pairs now says

[21:39] <dalek> rakudo/nom:   "Invocant requires an instance, but a type object was passed"

[21:39] <dalek> rakudo/nom: instead of:

[21:39] <dalek> rakudo/nom:   "Parameter '' requires an instance, but a type object was passed"

[21:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/819d371660

[21:40] <lizmat> The above error (Cannot look up…) was already fixed with my previous commit

[21:41] <timotimo> cool

[21:41] <timotimo> good things are going on, i see.

[21:44] *** yoleaux joined
[21:44] *** ChanServ sets mode: +v yoleaux

[21:44] <diakopter> .

[21:47] <jnthn> TimToady: What should operators like ~, ~& and so forth do on Blob/Buf types when there are different kinds of thing on each side?

[21:54] *** zby_home left
[21:58] <lizmat> trying to interpret this error: Can not get attribute '$!infinite' declared in class 'List' with this object

[21:59] <lizmat> does that mean that it knows that List.$!infinite exists, but that the invocant is not a List ?

[21:59] <jnthn> It could mean that, yes

[22:00] <jnthn> Note that all attribute lookups are fully qualified

[22:00] <jnthn> So it just means "this attribute doesn't exist on the object you tried to look it up on"

[22:01] <lizmat> hmmm… wonder how that would be possible, I mean

[22:01] <lizmat> trying to optimize List.infinite, as it is being called a lot

[22:02] <jnthn> Probably a screw-up when using nqp::getattr

[22:02] <jnthn> OK. Note that using nqp::getattr(...) rather than writing $!infinite is not an optimization :)

[22:02] <jnthn> In fact, it's currently the opposite

[22:02] <lizmat> I mean, how can that method be called if the object is not ISA List ?

[22:03] <lizmat> this is the diff:

[22:03] <lizmat> -        self.DEFINITE && $!nextiter.defined && $!nextiter.infinite;

[22:03] <lizmat> +        $!infinite //=

[22:03] <lizmat> +          (self.DEFINITE && $!nextiter.defined && $!nextiter.infinite);

[22:03] <jnthn> I can guess better if I can see what you're trying...

[22:03] <lizmat> also: +    has Bool $!infinite;       # true: infinite list, false: not, undef: check

[22:04] <jnthn> hmm

[22:04] <lizmat> this is probably too naive, but it's failing for a reason I don't understand

[22:05] *** ecocode` left
[22:09] <lizmat> it appears to happen on a circumfix {}

[22:09] <lizmat> that in the end calls ListIter.infinite

[22:10] <lizmat> and that calls "nqp::atpos($!rest,0).infinite" and then bombs

[22:11] <lizmat> hmmm… this also explains some recursion I've seen when trying to put some debug code in infinite

[22:12] <lizmat> .oO( trying to find out why my @a=1..Inf; @a.infinite returns true, but @a.uniq.infinite doesn't

[22:14] <lizmat> I guess I forgot to mention this happens when setting is loaded 

[22:14] <timotimo> i'm almost at the point where i'd go and re-enable trimming the whitespace in pod blocks again.

[22:19] *** lue left
[22:20] <dalek> rakudo/rebuf: cb96e37 | jnthn++ | src/core/Buf.pm:

[22:20] <dalek> rakudo/rebuf: Start to get Buf ops back in place.

[22:20] <dalek> rakudo/rebuf: 

[22:20] <dalek> rakudo/rebuf: Since Buf ~~ Blob, they are now really blob ops. Done some tweaks to

[22:20] <dalek> rakudo/rebuf: try and adapt a little better to the new range of types available.

[22:20] <dalek> rakudo/rebuf: Unfortunately, the ops all seem to hit a multi-dispatch conflict.

[22:20] <dalek> rakudo/rebuf: review: https://github.com/rakudo/rakudo/commit/cb96e37651

[22:25] <lizmat> "RPA of elements remaining to be reified"  what is an RPA ?

[22:27] <lizmat> jnthn: if something is supposed to return a Bool, but can't decide on True/False, wouldn't it be better to return Bool, rather than Mu ?

[22:29] <lizmat> or maybe better a question for TimToday :-)

[22:30] <lizmat> *TimToady   :-)

[22:31] <lizmat> r: say (1..Inf).uniq.infinite  # shouldn't this be Bool rather than Mu ?

[22:31] <camelia> rakudo 819d37: OUTPUT«(Mu)␤»

[22:32] <timotimo> Resizable Parrot Array iirc

[22:32] <timotimo> actually, Resizable PMC Array

[22:33] *** lue joined
[22:34] <timotimo> one day i'll write an ikiwiki clone based off of pod6 ...

[22:34] <lizmat> timotimo: I guess that's Parrot's way of saying "my @a" 

[22:35] <dalek> specs: a0ec33f | (Elizabeth Mattijsen)++ | S99-glossary.pod:

[22:35] <dalek> specs: Add RPA

[22:35] <dalek> specs: review: https://github.com/perl6/specs/commit/a0ec33f58f

[22:35] <timotimo> yeah, pretty much

[22:35] <lizmat> afk for 30 mins or so

[22:35] <timotimo> nqp uses it internally afaict

[22:36] <timotimo> or ... it uses qrpa

[22:37] <lue> timotimo: better yet, improve november to use Pod6 :)

[22:40] <timotimo> i know nothing about november :|

[22:40] <timotimo> the only instance of it seems to be in japanese

[22:40] <timotimo> which i also know nothing about :)

[22:41] <lue> https://github.com/viklund/november/ (hasn't been touched in years, sadly)

[22:44] <timotimo> pod6 isn't entirely there yet, though

[22:44] <timotimo> especially formattingcodes in table cells are sorely missing.

[22:44] <timotimo> well ... sorely missing mostly from the S26 rendering.

[22:44] <timotimo> i'm considering implementing formattingcodes that don't span lines now and proper multiline formattingcodes later.

[22:45] <timotimo> damn it, =for output squashes everything into one line

[22:48] *** lue left
[22:49] *** cognominal left
[22:51] <jnthn> lizmat: These days, it really means "the VM's low level array-ish thing"

[22:51] <timotimo> i think pod block parsing needs to be rewritten in a more configuration-driven way. there's currently a 1:1 relationship with "is code block (and does not allow formatting codes)" and "will preserve justification and preformatting", but output and input blocks ought to be preformatted but allow all fcodes

[22:51] <jnthn> lizmat: In JVM and Moar impls it's something with VMArray REPR

[22:51] <timotimo> at the moment there's the "ALLOW_FCODES" thing i came up with which could be a short term solution, but ... enh.

[22:52] <lizmat> so, should I remove mention of RPA from the comments ?  and replace it with the more generic VMArray ?

[22:52] <lizmat> or VMArray REPR

[22:52] <lizmat> ?

[22:52] <jnthn> lizmat: Well, but that ain't true on Parrot

[22:53] <lizmat> well, this is in src/core/ListIter, so VM agnostic

[22:53] <jnthn> "low level array" or "VM's array type" maybe

[22:53] <lizmat> VM's array type sounds good to me

[22:55] <timotimo> do i need the [ ] after the || in  [ "foo" | "bar" || [ "baz" | "quux"] 

[22:55] <timotimo> ]

[22:55] <timotimo> what about before?

[22:57] <jnthn> || is looser than |

[22:58] <timotimo> thank you

[23:00] *** lue joined
[23:02] *** Khisanth left
[23:04] <lizmat> jnthn: "$type = 'RPA' if $type eq 'ResizablePMCArray';"  seems to be a parrotism, that should be surrounded bu a #if parrot, right ?

[23:04] <lizmat> by

[23:05] <lizmat> src/core/Mu:714

[23:07] *** lue left
[23:07] <jnthn> lizmat: hm, yeah

[23:09] <jnthn> Notice how $type is set is also VM specific :)

[23:10] <jnthn> 'night, #perl6

[23:10] <dalek> rakudo/nom: 9db2d52 | (Elizabeth Mattijsen)++ | src/core/ListIter.pm:

[23:10] <dalek> rakudo/nom: Make ListIter.infinite return Bool when it can't make up it's mind.

[23:10] <dalek> rakudo/nom: 

[23:10] <dalek> rakudo/nom: This at least makes (1..Inf).uniq.infinite return Bool rather than Mu

[23:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9db2d5212e

[23:10] <dalek> rakudo/nom: d1c591c | (Elizabeth Mattijsen)++ | src/core/Mu.pm:

[23:10] <dalek> rakudo/nom: Only do this parrotism when Parrot is the VM (in DUMP)

[23:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d1c591cac0

[23:10] <dalek> rakudo/nom: 4a977dc | (Elizabeth Mattijsen)++ | src/core/ (4 files):

[23:10] <dalek> rakudo/nom: In comments, Change Parrot-centric mention of RPA to more general VM's array

[23:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4a977dcd06

[23:11] <lizmat> gnight jnthn!

[23:13] <lizmat> jnthn: "Notice how $type is set is also VM specific :)" exactly :-)

[23:14] *** grondilu left
[23:17] *** Khisanth joined
[23:20] *** lue joined
[23:27] *** raiph left
[23:27] <lizmat> .oO( ooh, s/it's/its/ in commit message of 9db2d52)

[23:28] *** lue left
[23:29] <lizmat> r: say Iterable^mro

[23:29] <camelia> rakudo 819d37: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤    mro used at line 1␤␤»

[23:29] <lizmat> r: say Iterable.^mro

[23:29] <camelia> rakudo 819d37: OUTPUT«(Iterable) (Any) (Mu)␤»

[23:29] <lizmat> r: say ListIter.^mro

[23:29] <camelia> rakudo 819d37: OUTPUT«(ListIter) (Iterator) (Iterable) (Any) (Mu)␤»

[23:29] <lizmat> r: say List.^mro

[23:29] <camelia> rakudo 819d37: OUTPUT«(List) (Iterable) (Cool) (Any) (Mu)␤»

[23:30] <lizmat> hmmm

[23:32] * timotimo coded himself into a corner and can't get out

[23:33] <timotimo> there needs to be a table or something rather than rules full of special cases.

[23:33] * lizmat takes away the fourth wall

[23:33] <timotimo> output and input can contain code blocks, but are themselves to be parsed with preformatting ... but the rules that do preformatting (those are called *_raw) will never accept nested blocks ...

[23:34] <timotimo> welp ... time for a dramatic restructuring ...

[23:35] <lizmat> .tell jnthn: it feels to me that in some cases List.infinite is being called on a Iterable object

[23:35] <yoleaux> lizmat: What kind of a name is "jnthn:"?!

[23:35] <lizmat> .tell jnthn it feels to me that in some cases List.infinite is being called on a Iterable object

[23:35] <yoleaux> lizmat: I'll pass your message to jnthn.

[23:35] *** pupoque left
[23:36] <lizmat> .tell jnthn when judging by the code, it should call Iterablle.infinite

[23:36] <yoleaux> lizmat: I'll pass your message to jnthn.

[23:36] <lizmat> .tell jnthn could this have to do with the fact that Iterable.infinite returns Mu ?

[23:36] <yoleaux> lizmat: I'll pass your message to jnthn.

[23:39] *** grondilu joined
[23:40] *** lue joined
[23:42] *** fridim__ joined
[23:44] *** grondilu left
[23:45] *** BenGoldberg joined
[23:52] <lizmat> gnight #perl6!

[23:53] *** colomon left
[23:55] *** Rotwang left
[23:57] <woolfy> good night lizmat

[23:58] *** colomon joined
