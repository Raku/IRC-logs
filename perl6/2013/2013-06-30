[00:00] <[Coke]> I'll try to redo the failing gists later tonight.

[00:08] <colomon> woah, that's freaky, lots of files are failing.  :(

[00:10] <colomon> nr: say 'abc' ~~ m^b^

[00:10] <camelia> rakudo b7bbd6, niecza v24-86-g39ab531: OUTPUT«｢b｣␤␤»

[00:11] <colomon> nr: say 'abc' ~~ m?b?

[00:11] <camelia> niecza v24-86-g39ab531: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Regex not terminated at /tmp/N_OQUYyiRg line 1 (EOF):␤------> [32msay 'abc' ~~ m?b?[33m⏏[31m<EOL>[0m␤␤Parse failed␤␤»

[00:11] <camelia> ..rakudo b7bbd6: OUTPUT«｢b｣␤␤»

[00:12] <TimToady> niecza is correct

[00:12] <TimToady> nr: say 'abc' ~~ m?b??

[00:12] <colomon> TimToady: really?  that may be a roast bug, then

[00:12] <camelia> niecza v24-86-g39ab531: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Regex not terminated at /tmp/4sa920Ybsu line 1 (EOF):␤------> [32msay 'abc' ~~ m?b??[33m⏏[31m<EOL>[0m␤␤Parse failed␤␤»

[00:12] <camelia> ..rakudo b7bbd6: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/UU6Txs0IVc:1␤------> [32msay 'abc' ~~ m?b?[33m⏏[31m?[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        statement end␤        statement modifier␤        st…

[00:13] <colomon> std: say 'abc' ~~ m?b?

[00:13] <camelia> std d4cc5ab: OUTPUT«[31m===[0mSORRY![31m===[0m␤Regex not terminated at /tmp/JEt9M8qISX line 1 (EOF):␤------> [32msay 'abc' ~~ m?b?[33m⏏[31m<EOL>[0m␤Parse failed␤FAILED 00:00 43m␤»

[00:13] <colomon> std: say 'abc' ~~ m*b*

[00:13] <camelia> std d4cc5ab: OUTPUT«[31m===[0mSORRY![31m===[0m␤Regex not terminated at /tmp/n1mXeyff99 line 1 (EOF):␤------> [32msay 'abc' ~~ m*b*[33m⏏[31m<EOL>[0m␤Parse failed␤FAILED 00:00 43m␤»

[00:14] <TimToady> std: say 'abc' ~~ m* b* *

[00:14] <camelia> std d4cc5ab: OUTPUT«ok 00:00 43m␤»

[00:14] <TimToady> std: say 'abc' ~~ m? b? ?

[00:14] <camelia> std d4cc5ab: OUTPUT«ok 00:00 43m␤»

[00:14] <TimToady> n: say 'abc' ~~ m? b? ?

[00:14] <camelia> niecza v24-86-g39ab531: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Quantifier quantifies nothing at /tmp/8oX9DDI8EZ line 1:␤------> [32msay 'abc' ~~ m? b? [33m⏏[31m?[0m␤␤Regex not terminated at /tmp/8oX9DDI8EZ line 1 (EOF):␤------> [32msay 'abc' ~~ m? b? ?[33m⏏[31m<EOL>[0m␤␤Parse fa…

[00:14] <colomon> so niecza is wrong there, but rakudo is wrong to accept m?b?

[00:14] <TimToady> yes

[00:15] <TimToady> quantifiers are a sublanguage, as it were, so it's like "{""}"

[00:15] <colomon> ... all of which is quite interesting, but completely orthogonal to my exploration of why parrakudo is now failing all the tests in delimiters.t

[00:15] <TimToady> n: say "{"stuff"}"

[00:15] <camelia> niecza v24-86-g39ab531: OUTPUT«stuff␤»

[00:17] <TimToady> n: say 'abc' ~~ m+ b+ +

[00:17] <camelia> niecza v24-86-g39ab531: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Quantifier quantifies nothing at /tmp/9U6MagvOH7 line 1:␤------> [32msay 'abc' ~~ m+ b+ [33m⏏[31m+[0m␤␤Regex not terminated at /tmp/9U6MagvOH7 line 1 (EOF):␤------> [32msay 'abc' ~~ m+ b+ +[33m⏏[31m<EOL>[0m␤␤Parse fa…

[00:17] <TimToady> std: say 'abc' ~~ m+ b+ +

[00:17] <camelia> std d4cc5ab: OUTPUT«ok 00:00 43m␤»

[00:18] <TimToady> n: say 'abc' ~~ m[ [b] ]

[00:18] <camelia> niecza v24-86-g39ab531: OUTPUT«｢b｣␤␤»

[00:18] <TimToady> n: say 'abc' ~~ m? [b?] ?

[00:19] <camelia> niecza v24-86-g39ab531: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Regex not terminated at /tmp/Kds1faYcvc line 1 (EOF):␤------> [32msay 'abc' ~~ m? [b?] ?[33m⏏[31m<EOL>[0m␤␤Parse failed␤␤»

[00:19] <TimToady> std: say 'abc' ~~ m? [b?] ?

[00:19] <camelia> std d4cc5ab: OUTPUT«[31m===[0mSORRY![31m===[0m␤Regex not terminated at /tmp/A7J_WZFDeA line 1 (EOF):␤------> [32msay 'abc' ~~ m? [b?] ?[33m⏏[31m<EOL>[0m␤Parse failed␤FAILED 00:00 44m␤»

[00:19] <TimToady> weird

[00:20] <TimToady> oh, same deal

[00:20] <TimToady> std: say 'abc' ~~ m? [b?]? ?

[00:20] <camelia> std d4cc5ab: OUTPUT«ok 00:00 44m␤»

[00:21] <TimToady> std: say 'abc' ~~ m? [b?]+ ?

[00:21] <camelia> std d4cc5ab: OUTPUT«ok 00:00 44m␤»

[00:21] <TimToady> n: say 'abc' ~~ m? [b?]+ ?

[00:21] <camelia> niecza v24-86-g39ab531: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Quantifier quantifies nothing at /tmp/YpwLlhc3rx line 1:␤------> [32msay 'abc' ~~ m? [b?]+ [33m⏏[31m?[0m␤␤Regex not terminated at /tmp/YpwLlhc3rx line 1 (EOF):␤------> [32msay 'abc' ~~ m? [b?]+ ?[33m⏏[31m<EOL>[0m␤␤Pa…

[00:21] <TimToady> yeah, the terminator should take precedence on that one

[00:22] <TimToady> r: say 'abc' ~~ m? [b?]+ ?

[00:22] <camelia> rakudo b7bbd6: OUTPUT«␀␀␀[␀␀␀3␀␀␀1␀␀␀m␀␀␀=␀␀␀=␀␀␀=␀␀␀␀␀␀[␀␀␀0␀␀␀m␀␀␀S␀␀␀O␀␀␀R␀␀␀R␀␀␀Y␀␀␀!␀␀␀␀␀␀[␀␀␀3␀␀␀1␀␀␀m␀␀␀=␀␀␀=␀␀␀=␀␀␀␀␀␀[␀␀␀0␀␀␀m␀␀␀␤␀␀␀U␀␀␀n␀␀␀r␀␀␀e␀␀␀c␀␀␀o␀␀␀g␀␀␀n␀␀␀i␀␀␀z􏿽xE2

[00:22] <colomon> so.... std is wrong in some cases too?  or am I misunderstanding something there?

[00:22] <TimToady> no, it was right

[00:22] <colomon> okay

[00:22] <TimToady> the ? after the [] was quantifying the []

[00:24] <colomon> TimToady: it was the m? [b?] ? that caught my attention

[00:24] <colomon> why doesn't that work?

[00:24] <TimToady> because the ? quantifies the []

[00:24] <colomon> even with the space?

[00:25] <TimToady> r: say 'abc' ~~ m? \w + ?

[00:25] <camelia> rakudo b7bbd6: OUTPUT«｢abc｣␤␤»

[00:25] <colomon> would it make sense to ban some of these delimiters in the name of sanity?

[00:25] <TimToady> no reason to, really, it's just a DIHWIDT

[00:26] <TimToady> if we nannify everything, the executable will be twice as large as it is

[00:27] <colomon> TimToady: I'm against nannifying everything, but clearly both compilers are getting these wrong right now.  I'd be surprised if fixing matters will take less code than banning those delimiters would.

[00:28] <TimToady> nr: say 'abc' ~~ m? \w+ ?

[00:28] <camelia> rakudo b7bbd6: OUTPUT«｢abc｣␤␤»

[00:28] <camelia> ..niecza v24-86-g39ab531: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Quantifier quantifies nothing at /tmp/rH6fq0vjmM line 1:␤------> [32msay 'abc' ~~ m? \w+ [33m⏏[31m?[0m␤␤Regex not terminated at /tmp/rH6fq0vjmM line 1 (EOF):␤------> [32msay 'abc' ~~ m? \w+ ?[33m⏏[31m<EOL>[0m␤␤Parse …

[00:28] <TimToady> well, niecza already effectively bans it :)

[00:28] <TimToady> but it shouldn't

[00:29] <colomon> and rakudo gets the case where you need to use the delimiter as a quantifier wrong.

[00:30] <TimToady> it's checking for a stopper between the atom and it's quantifier, and I think that's wrongish

[00:30] <colomon> and there are a boatload of tests that need to be rewritten, too.

[00:31] <colomon> well, nothing to be done for rewriting the tests.  But I don't have time for it now.

[00:32] <TimToady> I assume some of these tests are from P5, where we search for the closing delimiter before reparsing, which is wrong on the face of it

[00:33] <TimToady> r: say 'abc' ~~ m? [b?] ** 1..1 ?

[00:33] <camelia> rakudo b7bbd6: OUTPUT«␀␀␀[␀␀␀3␀␀␀1␀␀␀m␀␀␀=␀␀␀=␀␀␀=␀␀␀␀␀␀[␀␀␀0␀␀␀m␀␀␀S␀␀␀O␀␀␀R␀␀␀R␀␀␀Y␀␀␀!␀␀␀␀␀␀[␀␀␀3␀␀␀1␀␀␀m␀␀␀=␀␀␀=␀␀␀=␀␀␀␀␀␀[␀␀␀0␀␀␀m␀␀␀␤␀␀␀U␀␀␀n␀␀␀r␀␀␀e␀␀␀c␀␀␀o␀␀␀g␀␀␀n␀␀␀i␀␀␀z􏿽xE2

[00:34] <TimToady> at least rakudo isn't doing that

[00:39] <TimToady> dunno why niecza is failing, the <!stopper> in quantified_atom should prevent it from testing the stopper as a metachar at the front

[00:42] <TimToady> probably a difference in the whitespace parsing

[00:43] <TimToady> since STD does sigspace differently

[00:48] <TimToady> nr: say 'abc' ~~ m?b???

[00:48] <camelia> niecza v24-86-g39ab531: OUTPUT«｢｣␤␤»

[00:48] <camelia> ..rakudo b7bbd6: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/mRvWd3E67R:1␤------> [32msay 'abc' ~~ m?b???[33m⏏[31m<EOL>[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        prefix or term␤        prefix or meta-prefix␤…

[00:48] <TimToady> turns out ?? is a minimal ?

[00:48] <TimToady> nr: say 'abc' ~~ m? b?? ?

[00:48] <camelia> niecza v24-86-g39ab531: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Quantifier quantifies nothing at /tmp/sDBJfH28Bk line 1:␤------> [32msay 'abc' ~~ m? b?? [33m⏏[31m?[0m␤␤Regex not terminated at /tmp/sDBJfH28Bk line 1 (EOF):␤------> [32msay 'abc' ~~ m? b?? ?[33m⏏[31m<EOL>[0m␤␤Parse …

[00:48] <camelia> ..rakudo b7bbd6: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/3SNBqrTBQN:1␤------> [32msay 'abc' ~~ m? b?[33m⏏[31m? ?[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        statement end␤        statement modifier␤       …

[00:48] <TimToady> but that's still buggy in both of them

[00:49] <TimToady> nr: say 'abc' ~~ m! b?! !

[00:49] <camelia> rakudo b7bbd6, niecza v24-86-g39ab531: OUTPUT«｢｣␤␤»

[00:50] <TimToady> er, isn't ! supposed to be greedy?

[00:50] <TimToady> nr: say 'abc' ~~ m! b? !

[00:50] <camelia> rakudo b7bbd6, niecza v24-86-g39ab531: OUTPUT«｢｣␤␤»

[00:51] <TimToady> o_O

[00:51] <TimToady> nr: $_ = 'abc'; say m! b? !

[00:51] <camelia> rakudo b7bbd6, niecza v24-86-g39ab531: OUTPUT«｢｣␤␤»

[00:52] <TimToady> nr: $_ = 'abc'; say m! b+ !

[00:52] <camelia> rakudo b7bbd6, niecza v24-86-g39ab531: OUTPUT«｢b｣␤␤»

[00:52] <TimToady> why isn't ? looking for 1 before 0?

[00:52] <TimToady> nr: $_ = 'abc'; say m! b* !

[00:52] <camelia> rakudo b7bbd6, niecza v24-86-g39ab531: OUTPUT«｢｣␤␤»

[00:53] <TimToady> oh, null string at the beginning, duh

[00:53] <TimToady> nr: $_ = 'bcd'; say m! b?! !

[00:53] <camelia> rakudo b7bbd6, niecza v24-86-g39ab531: OUTPUT«｢b｣␤␤»

[00:53] <TimToady> there we go

[00:54] <TimToady> I mean, just because jetlag makes my brain think it's 2am, that's no excuse...

[01:06] *** Guest1337 joined
[01:17] *** FROGGS left
[01:30] *** FROGGS joined
[01:49] *** thundergnat left
[01:53] *** SamuraiJack_ joined
[02:05] *** benabik joined
[02:48] *** aindilis joined
[02:50] *** JimmyZ_ joined
[02:53] <JimmyZ_> std: $_ = 'abc'; say m!b*!

[02:53] <camelia> std d4cc5ab: OUTPUT«[31m===[0mSORRY![31m===[0m␤Regex not terminated at /tmp/Z3joLEkHnl line 1 (EOF):␤------> [32m$_ = 'abc'; say m!b*![33m⏏[31m<EOL>[0m␤Parse failed␤FAILED 00:00 44m␤»

[02:53] <JimmyZ_> std: $_ = 'abc'; say m|b*|

[02:53] <camelia> std d4cc5ab: OUTPUT«ok 00:00 44m␤»

[02:54] <JimmyZ_> the former is bug?

[02:59] <TimToady> no

[03:00] <TimToady> std: $_ = 'abc'; say m! b* !

[03:00] <camelia> std d4cc5ab: OUTPUT«ok 00:00 44m␤»

[03:00] <TimToady> *! is a valid quantifier

[03:01] <TimToady> it is a * that is explicitly greedy, even if the surrounding context is ratchety

[03:01] <TimToady> std: $_ = 'abc'; say m!b*!!

[03:01] <camelia> std d4cc5ab: OUTPUT«ok 00:00 44m␤»

[03:02] <JimmyZ_> and so *?

[03:02] <TimToady> n: $_ = 'abc'; say m!b*!!

[03:02] <camelia> niecza v24-86-g39ab531: OUTPUT«｢｣␤␤»

[03:02] <TimToady> *? is explicitly frugal

[03:03] <TimToady> n: $_ = 'abc'; say m?b*??

[03:03] <camelia> niecza v24-86-g39ab531: OUTPUT«｢｣␤␤»

[03:03] <TimToady> n: $_ = 'abc'; say m?b*? ?

[03:03] <camelia> niecza v24-86-g39ab531: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Quantifier quantifies nothing at /tmp/PbIhFf2Ogi line 1:␤------> [32m$_ = 'abc'; say m?b*? [33m⏏[31m?[0m␤␤Regex not terminated at /tmp/PbIhFf2Ogi line 1 (EOF):␤------> [32m$_ = 'abc'; say m?b*? ?[33m⏏[31m<EOL>[0m␤␤Pa…

[03:03] <TimToady> niecza only has the bug after whitespace

[03:04] <JimmyZ_> good

[03:13] *** JimmyZ_ left
[03:18] *** Chillance left
[03:43] *** Guest1337 left
[03:46] *** Guest1337 joined
[03:52] *** preflex_ joined
[03:52] *** ChanServ sets mode: +v preflex_

[03:53] *** preflex left
[03:53] *** preflex_ is now known as preflex

[04:31] *** Patterner left
[04:33] *** Psyche^ joined
[04:33] *** Psyche^ is now known as Patterner

[04:44] *** BenGoldberg left
[05:14] *** SamuraiJack_ left
[05:22] *** kaare__ joined
[05:23] *** dmol left
[05:38] *** raiph left
[05:39] *** FROGGS[mobile] joined
[05:40] <FROGGS[mobile]> morning

[05:52] <FROGGS> TimToady: do I understand it right that rakudo is wrong because it cant handle the stopper-char within a regex?

[05:52] <FROGGS> TimToady: or is there something else wrong too?

[05:54] *** xenoterracide left
[05:56] * FROGGS does a git bisect to track down the commit that break so many tests...

[06:00] *** mstefanko left
[06:05] *** mstefanko joined
[06:06] <sorear> o/ FROGGS

[06:07] <FROGGS> hi sorear 

[06:08] *** xilo left
[06:11] *** crab2313 joined
[06:18] <[Coke]> sorear: I'm trying to use eval-server and client, and am getting:

[06:19] <[Coke]> ===SORRY!===

[06:19] <[Coke]> This representation can not unbox to a native str

[06:19] <[Coke]> on every invocation. any suggestions as to what I'm doing wrong?

[06:19] <[Coke]> https://gist.github.com/coke/5894087

[06:24] <sorear> [Coke]: nothing seems obvious, but passing --ll-exception will help

[06:25] <sorear> does it work if you use ./perl6 on line 16?

[06:25] <FROGGS> 412307989be6df484710ac7d46bb72d003649594 is the first bad commit

[06:25] <FROGGS> Author: jnthn [email@hidden.address]
[06:25] <FROGGS>     Add missing check for 0-count in subst.

[06:25] <FROGGS> that was my guess, it is the only related commit

[06:27] <sorear> FROGGS: commit looks very thinkoey

[06:27] <sorear> FROGGS: try with                 ?? ($replacement.count == 0 ?? $replacement() !! $replacement($m))

[06:27] <FROGGS> will do

[06:27] <sorear> a replacement Callable with no arguments needs to be called with no arguments, not stringified as Sub()<...>

[06:29] <FROGGS> yes

[06:29] <FROGGS> thanks for the hint, would have taken another cup of coffee for me to figure out...

[06:31] <sorear> (fixing this will probably bring us back down from 88...)

[06:34] <[Coke]> sorear: ah, crap. no, ./perl6 ** doesn't work in that situation. thanks for the obvious debug pointer.

[06:34] <[Coke]> sorear: only if it's a parrot only fix, right?

[06:35] *** xenoterracide joined
[06:37] <dalek> rakudo/nom: b6d197f | (Tobias Leich)++ | src/core/Str.pm:

[06:37] <dalek> rakudo/nom: invoke the callable, sorear++

[06:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b6d197f35d

[06:38] <[Coke]> sorear: huh. the cd is in the wrong spot.. but it worked before I switched to the server. weird.

[06:38] <sorear> [Coke]: the server won't see cds done after it is started

[06:39] <sorear> [Coke]: I think the fix helps parrot more

[06:39] <sorear> FROGGS: I take it it made a difference?

[06:39] <[Coke]> sorear: I think the only real effect is that the pwd was the wrong dir

[06:39] <FROGGS> sorear: yes, fixes it

[06:40] <sorear> oh, right.  uh...

[06:40] <sorear> is it working now?

[06:44] *** dmol joined
[06:45] <FROGGS> okay, will bisect the macro-test-fails then

[06:45] *** btyler left
[06:47] * sorear wonders if anyone has played with the new --archive option to test_summary

[06:48] <[Coke]> I have not.

[06:52] <FROGGS> me neither

[06:53] <sorear> multicore test summaries :D

[06:55] <FROGGS> my test_summary script for v5 does that too, though I have stripped it down much

[06:56] <FROGGS> it is made to see regressions better

[06:57] *** crab2313 left
[07:07] *** Guest1337 left
[07:18] <[Coke]> jnthn, sorear: in no particular order, https://gist.github.com/coke/5879701 is an updated list of collated jvm failures.

[07:18] <[Coke]> sorear: java.lang.ClassFormatError may be of interest to you.

[07:22] <sorear> ClassFormatError?  wha?

[07:23] <[Coke]> java.lang.ClassFormatError: Duplicate method name&signature in class file  - S05-capture/caps.rakudo.jvm

[07:24] <sorear> markdown fail: # java.lang.IllegalArgumentException: sprintf only accepts ints, nums, and strs, not class __P6opaque__62

[07:24] <sorear> (minor)

[07:25] <[Coke]> yah, hopefully these will get fixed soon enough to not matter. :)

[07:25] <[Coke]> urk? when I run that formaterror from the command line... I get... a PBC error?

[07:26] <sorear> methinks you have some contamination from parrot stuff...

[07:26] <[Coke]> oh, whew, the pbc is user error.

[07:26] <[Coke]> (cd rakudo instead of rakudo.jvm)

[07:29] <[Coke]> definitely seeing a shift in errors as some are fixed.

[07:30] <[Coke]> Dynamic variable $*CWD not found is becoming more popular, e.g.

[07:30] <sorear> jnthn wants me to add shell(), but that will just leave us with $*EXECUTABLE_NAME problems...

[07:31] <[Coke]> zzz

[07:42] *** xinming left
[07:47] *** xinming joined
[07:53] *** domidumont joined
[08:07] *** domidumont left
[08:07] *** domidumont joined
[08:15] <FROGGS> t/spec/S06-macros/quasi-blocks.t (Wstat: 256 Tests: 0 Failed: 0)  Parse errors: No plan found in TAP output

[08:15] <FROGGS> a07c211ff178c4a0badeb043b82ab12ccad6d6b4 is the first bad commit

[08:15] <FROGGS>     sorear: Generate local_lifetime hints.

[08:19] <sorear> FROGGS: so you're saying some of the fails come from that, and others came from the s/// thinko?

[08:20] <FROGGS> sorear: the s/// is fixed already, only the macro-test fails remain

[08:20] <FROGGS> so it is either your changes to the actions, or the change of the nqp_revision

[08:22] <sorear> probably my changes. grr.

[08:22] <sorear> can't investigate right now

[08:23] <FROGGS> np, I can give it a try

[08:29] *** Rotwang joined
[08:37] *** spider-mario joined
[08:40] *** _daniel-s__ is now known as daniel-s

[08:40] *** domidumont left
[08:52] <dalek> specs: 0271f65 | (Brent Laabs)++ | S99-glossary.pod:

[08:52] <dalek> specs: +blorst, clog, thinko

[08:52] <dalek> specs: Very tempted to rename this file JARGON

[08:52] <dalek> specs: review: https://github.com/perl6/specs/commit/0271f65232

[08:53] <sorear> we use blasts now

[08:53] <sorear> blorst is archaic

[09:14] <labster> ye olde perl sixe?

[09:21] *** lue left
[09:24] *** athomason left
[09:33] *** lue joined
[09:35] *** dmol left
[09:40] *** dmol joined
[09:41] *** xenoterracide left
[09:46] *** woosley1 joined
[09:51] <dalek> specs: af9af14 | moritz++ | S99-glossary.pod:

[09:51] <dalek> specs: [S99] fill out some blanks

[09:51] <dalek> specs: review: https://github.com/perl6/specs/commit/af9af14836

[10:24] <sorear> might it be useful to somehow flag tests that require a full process state because they do stuff with chdir, etc?

[10:24] <sorear> yes, we COULD virtualize the current directory for testing... but that would defeat the point, since we wouldn't be testing the nonvirtualized chdir

[10:26] <sorear> another big question on my mind: what should be $*EXECUTABLE_NAME on the jvm?

[10:26] <sorear> random observation: we have a lot of tests that do is_run when they mean is_no_extraneous_output.  we ought to have a way to trap output without launching a whole new process

[10:28] <sorear> we have three cases of is_run: calls that really require a whole process because they're doing chdiry envy stuff, calls that need a split GlobalContext but can run within the eval server, and calls that really just need to hook $*ERR

[10:36] *** woosley1 left
[10:39] *** autumn is now known as Aki-chan

[10:39] *** Aki-chan is now known as autumn

[10:51] <FROGGS> sorear: when I disallow sinking at the top of actions.nqp, all is fine

[10:52] <FROGGS> I'm not yet sure what is wrong though

[10:59] <sorear> sinking.  always blame sinking.  it's stinking.

[11:00] *** PacoAir joined
[11:10] *** xinming left
[11:12] *** xinming joined
[11:16] *** dmol left
[11:19] *** grondilu joined
[11:22] <grondilu> Hello.  I tried to compile rakudo-jvm and I got:

[11:22] <grondilu> Error occurred during initialization of VM

[11:22] *** SamuraiJack_ joined
[11:22] <grondilu> Could not reserve enough space for object heap

[11:23] <grondilu> in the README it is written I should try adding -Xms500m -Xmx2g in the nqp/nqp.bat, but I have no such file

[11:24] * grondilu realizes it's probably in nqp/nqp

[11:24] <jnthn> sorear: One "easy option" for $*EXECUTABLE_NAME is to point it at the runner bat/sh, but that means it can't use the eval client and so will be slow...though slow and working beats not working at all.

[11:31] *** crab2313 joined
[11:45] * grondilu got a java.lang.StackOverflowError at src/Perl6/Optimizer.nqp:685

[11:51] <timotimo> try --optimize=0 to see if it survives the rest of the execution

[11:52] *** crab2313 left
[11:53] <grondilu> Unknown option: optimize

[11:55] <timotimo> oh, huh

[11:55] *** araujo left
[12:14] *** Rotwang left
[12:25] *** _ilbot left
[12:25] *** moritz left
[12:27] *** _ilbot joined
[12:29] *** moritz joined
[12:31] *** snoopy left
[12:35] *** birdwindupbird joined
[12:39] <moritz> IRC logs are back with ipv6 support

[12:39] *** crab2313 joined
[12:40] <moritz> (and I happen not to pay for ipv6 traffic :-)

[12:41] <FROGGS> hmm? why?

[12:41] *** araujo joined
[12:41] *** araujo left
[12:41] *** araujo joined
[12:43] <moritz> because the core routers don't support ipv6 traffic accounting

[12:43] <FROGGS> hehe, nice

[12:46] <timotimo> that's awesome :)

[12:47] <moritz> (not that it matters much; I'm far below the 750Gb/month treshold anyway, but it still feels good that way)

[12:47] <FROGGS> and I guess there is not so much ipv6 traffic anyway

[12:47] * timotimo is on ipv6

[12:47] <moritz> and there's a debian and a cpan mirror inside the network, and only traffic leaving the network is acounted anyway

[12:48] <FROGGS> I'm not

[12:48] <moritz> I'm on ipv6 via sixxs

[12:49] <timotimo> my provider offers native ipv6. the router they ship doesn't have the little box ticked by default afaict, but i do get it

[12:49] <timotimo> in fact, i believe the ipv4 traffic that goes through my router gets tunneled through ipv6 to my provider

[12:50] <timotimo> FROGGS: get a sixxs tunnel or a henet tunnel. vote with your packets! :)

[12:50] <tadzik> does sixxs still have their crazy email policy?

[12:50] <FROGGS> just tell me for what I need ipv6 first :o)

[12:50] <timotimo> perl6 irclogs!

[12:50] <tadzik> FROGGS: chicks dig ipv6 users ;)

[12:51] <FROGGS> *g*

[12:51] <tadzik> "is that an ipv6 subnet? Yours? Whatcha doing tonight?"

[12:51] <timotimo> FROGGS: freedom from NAT is a big thing

[12:51] <FROGGS> well, my gurl doesnt know what ipv6 is...

[12:52] <tadzik> also, if we all insist that the future is now, it may eventually be...

[12:52] <tadzik> and we're all early adopters anyway

[12:52] <moritz> tadzik: what's the "crazy email policy"?

[12:52] <tadzik> moritz: they had that last time I tried applying for an ipv6 address

[12:53] <tadzik> "oh, is that gmail? No, that's no good. We don't accept free email accounts"

[12:53] <tadzik> so I asked a friend for an account on her server

[12:53] <tadzik> "no, that's not good enough either"

[12:53] <tadzik> so I gave up

[12:53] <moritz> wtf

[12:54] <tadzik> yeah

[12:54] <tadzik> basically, they wanted my ISP email at all costs

[12:55] <masak> o/

[12:55] <FROGGS> ho masak

[12:55] <masak> today I may actually get something p6-y done.

[12:55] <masak> one can hope.

[12:55] <FROGGS> \o/

[12:55] <FROGGS> and the one is moritz?

[12:56] <tadzik> hehehe

[12:56] <moritz> :-)

[12:56] * moritz always hopes that masak progresses with td reviews :-)

[12:56] <masak> moritz: yeah.

[12:57] <masak> moritz: so let's do a bit of t3 today. 's a good idea.

[12:58] <tadzik> heh, ś is too fancy for sixxs

[12:58] <tadzik> talk about the future now

[12:59] <timotimo> get hurricane electric instead?

[12:59] <tadzik> I already applied here

[12:59] <timotimo> k

[12:59] *** grondilu left
[13:00] *** grondilu joined
[13:05] <FROGGS> so, I have to say "Cha!" for now, see you in a bit

[13:11] *** woosley1 joined
[13:12] *** woosley1 left
[13:15] <jnthn> whoa, this weather is sucky

[13:19] <nwc10> code more! Ignore it!

[13:19] <nwc10> or hide under the duvet

[13:19] *** FROGGS[mobile] left
[13:19] <timotimo> both can be combined in my experience

[13:22] <jnthn> Grr. My patch to try and fix $*IMPLICIT handling up for JVM seems to regress some tests on Parrot. :(

[13:24] <timotimo> were we able to figure out what caused the big regression in cokes last run?

[13:24] <jnthn> a thinko that ws already fixed, afaict

[13:24] *** FROGGS[mobile] joined
[13:24] <timotimo> ah, great

[13:24] <timotimo> .o(still it's hard to say goodbye to the 88%. hope they'll come back around soon enough! :) )

[13:24] <timotimo> and now, i'll depart

[13:29] *** Rotwang joined
[13:34] *** kaare__ left
[13:34] *** kaare__ joined
[13:38] <dalek> specs: f0f6642 | moritz++ | S99-glossary.pod:

[13:38] <dalek> specs: more glossary entries

[13:38] <dalek> specs: review: https://github.com/perl6/specs/commit/f0f6642252

[13:39] *** kaare__ left
[13:40] *** FROGGS[mobile] left
[13:40] *** FROGGS[mobile] joined
[13:41] <dalek> specs: 5b80653 | (Elizabeth Mattijsen)++ | S99-glossary.pod:

[13:41] <dalek> specs: Tpyo

[13:41] <dalek> specs: review: https://github.com/perl6/specs/commit/5b8065337e

[13:41] <lizmat> moritz++

[13:43] <FROGGS[mobile]> jnthn: if you have some tuits, can you look at the macro+sink fails?

[13:44] <FROGGS[mobile]> I dont think I am able to fix it

[13:50] *** Chillance joined
[13:51] <lizmat> FWIW, I can confirm that failures are back to the macro/quasi fails in the spectest

[13:53] * moritz wonders if the glossary entry for "thinko" should be "thinkographic error"

[13:53] *** ajr joined
[13:54] *** ajr is now known as Guest94866

[13:54] <lizmat> not the other way around?

[13:54] *** Guest94866 is now known as ajr_

[13:55] <moritz> s/entry/explanation/

[13:58] <lizmat> ;-)   cycling&

[14:11] *** konundra joined
[14:18] <jnthn> Oh, that evaluate_unquotes thing seems to fail in the same way on Parrot and JVM backends...

[14:19] *** Danishman joined
[14:19] <jnthn> oh...I think I see why. 'twas the sorear++ locallifetime thing

[14:21] <jnthn> nqp: say(nqp::isstr('foo'))

[14:21] <camelia> nqp: OUTPUT«1␤»

[14:21] <jnthn> nqp: say(nqp::isstr(NQPMu))

[14:21] <camelia> nqp: OUTPUT«0␤»

[14:23] <jnthn> FROGGS[mobile]: Building/trying a fix now

[14:36] *** dalek left
[14:37] *** dalek joined
[14:37] *** ChanServ sets mode: +v dalek

[14:41] <dalek> nqp: 9fca92f | jnthn++ | src/QAST/Op.nqp:

[14:41] <dalek> nqp: Don't trip up over strings in QAST nodes.

[14:41] <dalek> nqp: 

[14:41] <dalek> nqp: It's locallifetime that led to the observable explosion, but handle

[14:41] <dalek> nqp: has been around and this code was vulnerable to that also. Fixes the

[14:41] <dalek> nqp: macro test regressions in Rakudo.

[14:41] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9fca92fce1

[14:41] *** rindolf joined
[14:41] <colomon> \o/

[14:41] <colomon> nqp tests to be added because of this?

[14:41] <dalek> rakudo/nom: 36f4f0b | jnthn++ | src/Perl6/Actions.nqp:

[14:41] <dalek> rakudo/nom: Fix $*IMPLICIT case handling of $_.

[14:41] <dalek> rakudo/nom: 

[14:41] <dalek> rakudo/nom: This makes sure it is registered early enough, so that JVM code-gen

[14:41] <dalek> rakudo/nom: will not find the wrong one. Should fix some things on JVM, and does

[14:41] <dalek> rakudo/nom: not seem to cause regressions under Parrot either.

[14:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/36f4f0b6df

[14:41] <dalek> rakudo/nom: 2fb22ef | jnthn++ | tools/build/NQP_REVISION:

[14:41] <dalek> rakudo/nom: Bump NQP_REVISION for macros fix.

[14:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2fb22efc86

[14:42] <colomon> \o/ \o/ \o/

[14:42] <jnthn> Hm, locallifetime busted MoarVM's nqp-cc.

[14:42] <jnthn> Should be an easy enough fix.

[14:42] *** thundergnat joined
[14:44] * jnthn is somewhat amused that Rakudo JVM runs more tests on his box than Rakudo Parrot, 'cus he's missing ICU. :)

[14:45] *** raiph joined
[14:46] <colomon> ;)

[14:46] *** btyler joined
[14:48] <tadzik> hah

[14:55] <raiph> i'm trying to make sense of fperrad's p6

[14:55] <raiph> is it more or less another nqp backend?

[14:56] <raiph> https://www.youtube.com/watch?feature=player_embedded&v=ZB1sKhtOSKI#at=160#t=22m

[14:56] <dalek> specs: 1b67957 | thundergnat++ | S99-glossary.pod:

[14:56] <dalek> specs: Move roast to alphabetically logical spot. Expanded acronym.

[14:56] <dalek> specs: review: https://github.com/perl6/specs/commit/1b67957c91

[14:56] <raiph> slides are in english, talk is in french

[14:57] <raiph> https://github.com/fperrad/p6jit/blob/master/README.md

[14:57] <moritz> https://sites.google.com/site/fperrad/YAP6I.pdf?attredirects=0 has the slides

[14:57] <raiph> moritz: thx

[15:08] *** daniel-s_ joined
[15:12] * jnthn didn't know about that project

[15:12] <FROGGS> jnthn++ # I never would have come to that conclusion

[15:13] *** kaare_ joined
[15:15] <dalek> rakudo/nom: 85a4d9a | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/Ops.java:

[15:15] <dalek> rakudo/nom: Implement p6getouterctx op.

[15:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/85a4d9a703

[15:15] <dalek> rakudo/nom: 7b04775 | jnthn++ | src/Perl6/World.nqp:

[15:15] <dalek> rakudo/nom: Eliminate a Parrotism for an nqp:: op.

[15:15] <dalek> rakudo/nom: 

[15:15] <dalek> rakudo/nom: Partly gets macro tests working on JVM backend.

[15:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7b0477579b

[15:16] <colomon> jnthn++ # changes faster than I can spectest....

[15:18] <jnthn> Seems somewhere along the line I may have regressed something, though :(

[15:19] *** xilo joined
[15:19] <FROGGS> :o(

[15:20] <jnthn> urgh

[15:20] *** rindolf left
[15:20] <jnthn> yeah, I see...gonna have to re-test this change on Parrot, though...

[15:21] <colomon> you guys know how you use test summary with jvm? (I just tried and don't have it figured out yoet.)  It seems like make spectest borders on useless when there are so many errors.  I'd be happy to run it here as often as I can while I'm working on $work....

[15:23] *** xenoterracide joined
[15:23] <thundergnat> colomon: Hey, I thought you might be tickled by http://rosettacode.org/wiki/Continued_fraction/Arithmetic/G%28matrix_NG,_Contined_Fraction_N1,_Contined_Fraction_N2%29#Perl_6 I added recently. /I/ was pleased with how it turned out.

[15:24] <colomon> thundergnat++

[15:28] <flussence> colomon: http://irclog.perlgeek.de/perl6/2013-06-29#i_7267465

[15:30] <colomon> flussence++ # don't think that's the standard way of running it, but it might be a lot *better * than the standard way...

[15:30] <colomon> ooo, lots of fail.

[15:31] <colomon> need to install TAP::Harness::Archive...

[15:32] <colomon> and set the executable bit on test_summary

[15:32] <colomon> now it seems to be doing something.

[15:41] <dalek> rakudo/nom: af39d66 | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/Binder.java:

[15:41] <dalek> rakudo/nom: Implement 'is copy' array params.

[15:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/af39d66285

[15:41] <dalek> rakudo/nom: e7ad774 | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/Binder.java:

[15:41] <dalek> rakudo/nom: Implement 'is copy' hash params.

[15:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e7ad7742a0

[15:42] *** domidumont joined
[15:43] *** FROGGS[mobile] left
[15:50] *** xilo_ left
[15:50] <colomon> I get 21861 passing tests.

[15:51] <colomon> oooo, hash is copy!  jnthn++ \o/

[15:51] * jnthn is working through the [Coke]++ list of ways we fail and picking some things off it :)

[15:54] *** SamuraiJack_ left
[15:54] *** ajr_ left
[15:54] *** ajr joined
[15:55] *** ajr is now known as Guest4981

[15:55] *** Guest4981 is now known as ajr_

[15:55] <moritz> .oO( 24 ways we fail! )

[15:56] *** rindolf joined
[15:57] <dalek> rakudo/nom: 5b5225b | jnthn++ | src/Perl6/Actions.nqp:

[15:57] <dalek> rakudo/nom: Some CATCH/CONTROL JVM fixes, after $_ changes.

[15:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5b5225b655

[16:00] *** SamuraiJack_ joined
[16:00] <masak> "24 ways we fail" sounds like an interesting advent calendar.

[16:01] <masak> or maybe it's the title of the YAPC::EU talk I should submit today.

[16:02] <jnthn> ooh, rain's stopped

[16:02] * jnthn takes a walk

[16:06] <colomon> 21925 passing tests before 5b5225b

[16:08] *** Rix left
[16:12] <colomon> just started a run...

[16:13] *** Rix joined
[16:17] *** SamuraiJack_ left
[16:22] <colomon> 22414 passing tests with 5b5225b

[16:22] <colomon> took < 10 minutes for the run

[16:22] <colomon> 8 minutes (I was looking away)

[16:26] *** pmurias joined
[16:34] <jnthn> And yesterday's coke number was 22100 :) Nice. :)

[16:36] <colomon> How did he get the extra 300 tests passing?  I must have missed something in the backlog...

[16:37] *** Rotwang left
[16:38] <jnthn> Parrakudo has gained back 100 or so too, though, so only 200 help to increase the % :)

[16:38] *** kaare_ left
[16:39] <pmurias> jnthn: is it known that nqp-jvm raises a NullPointer exception when undeclared lexicals are used?

[16:39] <pmurias> jnthn: and stays silent when they are not used

[16:40] <jnthn> pmurias: That's...meant to be caught at parse time.

[16:40] <jnthn> nqp: say($a)

[16:40] <camelia> nqp: OUTPUT«Use of undeclared variable '$a' at line 2, near ")"␤current instr.: 'panic' pc 14721 (src/stage2/gen/NQPHLL.pir:5232) (src/stage2/gen/NQPHLL.nqp:279)␤»

[16:40] <jnthn> C:\consulting\rakudo>install-jvm\nqp.bat -e "say($a)"

[16:40] <jnthn> Use of undeclared variable '$a' at line 2, near ")"

[16:41] <jnthn> pmurias: Seems to be caught there too

[16:49] *** BenGoldberg joined
[16:51] *** Rotwang joined
[17:09] *** birdwindupbird left
[17:09] <pmurias> nqp: sayx(123)

[17:09] <camelia> nqp: OUTPUT«Could not find sub &sayx␤current instr.: '' pc 46 ((file unknown):170449615) (/tmp/VVOgA4I7Oy:1)␤»

[17:10] <pmurias> jnthn: say($foo) is caught, sayx(123) give a NullPointer exception

[17:10] <pmurias> on jvm only

[17:10] <jnthn> oh...missing subs, not variables.

[17:11] * pmurias just relized subs are handled differently in QAST

[17:12] *** colomon left
[17:12] * masak .oO( at least they are QAST in a different light )

[17:15] *** colomon joined
[17:17] <colomon> What happened to IO::Capture::Simple?

[17:18] <colomon> ... answer appears to be nothing, yet my smoke tester thinks it's completely gone from the ecosystem.  :\

[17:20] <colomon> t/spec/S32-temporal/DateTime.t has another new error with the hash is copy thing fixed, but I am being commanded to play Star Wars with Legos ("you can be young Anakin!") right now.

[17:20] <pmurias> jnthn: QAST::WVal expects getobjsc != null, where is that guarantied? I'm trying to fix BEGIN

[17:22] <jnthn> pmurias: It's up to the compiler to make sure it doesn't emit a QAST::WVal for something that wasn't add_object'd (that is, placed in an SC at some point)

[17:22] *** grondilu left
[17:29] <moritz> t/spec/S02-magicals/config.t fails because 'linux' ne 'Linux'

[17:30] <moritz> but I guess there's no spec for what should actually be returned

[17:30] <moritz> any objections to making the comparison case-insensitive?

[17:35] <dalek> roast: 99263cb | moritz++ | S02-magicals/config.t:

[17:35] <dalek> roast: case-insensitive comparison of $*OS

[17:35] <dalek> roast: 

[17:35] <dalek> roast: the test assumes the p5 insanity of "linux" vs. "MSWin32", but the specs

[17:35] <dalek> roast: are silent on the exact case of the return value. (And on the exact return

[17:35] <dalek> roast: value itself, for that matter).

[17:35] <dalek> roast: review: https://github.com/perl6/roast/commit/99263cb48a

[17:35] <nwc10> no, but don't go so far as to think that qr/win/ only matches the OS from the pacific *north* west :-)

[17:36] <dalek> rakudo/nom: 8ca095c | jnthn++ | src/Perl6/Metamodel/Mixins.nqp:

[17:36] <dalek> rakudo/nom: Missing stringify, needed on JVM.

[17:36] <dalek> rakudo/nom: 

[17:36] <dalek> rakudo/nom: Fixes a couple of the enum related tests.

[17:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8ca095c67f

[17:36] <dalek> rakudo/nom: 1e07ff8 | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/Ops.java:

[17:36] <dalek> rakudo/nom: Make p6capturelex not create a busted chain.

[17:36] <dalek> rakudo/nom: 

[17:36] <dalek> rakudo/nom: It didn't care what it shoved into .outer, meaning that we could put

[17:36] <dalek> rakudo/nom: entirely wrong things in there. This tries to do a bit better, though

[17:36] <dalek> rakudo/nom: really the longer-term solution is to fix up the code-gen, hopefully

[17:36] <dalek> rakudo/nom: by leaving the QAST compiler to work it out. In the meantime, this

[17:36] <dalek> rakudo/nom: seems to fix various lexical issues.

[17:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1e07ff8890

[17:37] <jnthn> Seems we have no remaining failures in the 99-problems-* integration tests over parrakudo 

[17:37] * moritz pulls again and starts spectesting from the beginning

[17:38] *** ajr_ left
[17:38] <nwc10> jnthn++

[17:45] *** aindilis left
[17:45] *** btyler left
[17:46] *** ilbot_nextgen joined
[17:47] <dalek> rakudo/nom: b3ee5fb | jnthn++ | src/core/Num.pm:

[17:47] <dalek> rakudo/nom: Don't explode on NaN.Int.

[17:47] <dalek> rakudo/nom: 

[17:47] <dalek> rakudo/nom: Somehow "got lucky" here on Parrot; be explicit for JVM's sake.

[17:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b3ee5fbf78

[17:47] <[Coke]> safe to kick off the daily jvm run?

[17:47] <jnthn> [Coke]: ya

[17:48] * jnthn is gonna go shop/cook now anyways :)

[17:48] <jnthn> Will try and fill in a few more gaps later on this evening.

[17:49] *** crab2313 left
[17:49] <[Coke]> jnthn++ I see lots of commits in the backlog!

[17:51] <[Coke]> rakudoparrot is 100% again.

[17:57] *** dmol joined
[18:08] <jnthn> yay

[18:09] <colomon> 22465 passing now.  ;)

[18:12] *** tomyan joined
[18:16] <GlitchMr> rn: sub postfix:<km>(Real $a) { "{$a}km" }; say 40.0km

[18:16] <camelia> rakudo b3ee5f, niecza v24-86-g39ab531: OUTPUT«40km␤»

[18:16] <GlitchMr> rn: sub postfix:<km>(Real \a) { "{a}km" }; say 40.0km

[18:17] <camelia> rakudo b3ee5f, niecza v24-86-g39ab531: OUTPUT«40km␤»

[18:19] *** araujo left
[18:33] *** araujo joined
[18:33] *** araujo left
[18:33] *** araujo joined
[18:37] *** abnorman joined
[18:38] <dalek> perl6-roast-data: a105058 | coke++ | / (5 files):

[18:38] <dalek> perl6-roast-data: today (automated commit)

[18:38] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/a1050587cf

[18:40] <[Coke]> rakudo.jvm @ 89.63% - 

[18:41] <lizmat> wow!

[18:41] <[Coke]> r: say ceil(25717 * .8 - 23052)

[18:41] <camelia> rakudo b3ee5f: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤    ceil used at line 1␤␤»

[18:41] <[Coke]> r: say 25717 * .8 - 23052

[18:41] <camelia> rakudo b3ee5f: OUTPUT«-2478.4␤»

[18:41] <[Coke]> r: say 25717 * .9 - 23052

[18:41] <camelia> rakudo b3ee5f: OUTPUT«93.3␤»

[18:41] <colomon> where they hey are you getting 600 more passing tests than I am?  (on jvm.)

[18:41] <[Coke]> 94 more tests to get 90%

[18:41] <jnthn> ooh, so close to the 90%!

[18:42] <[Coke]> colomon: https://github.com/coke/perl6-roast-data/blob/master/rakudo.jvm_summary.out

[18:42] <pmurias> 90% of roast or 90% of tests passing on parrot?

[18:43] <[Coke]> the latter.

[18:43] <[Coke]> rakudo.jvm isn't going to be passing any more tests than rakudo.parrot to start.

[18:45] <nwc10> possibly stupid question - does the gather/take stuff that sorear hacked on work on Rakudo/parrot? Or just Rakudo/JVM? And is it something spec'd in roast?

[18:47] <pmurias> it doesn't work on parrot

[18:47] <pmurias> that is, the continuations opcodes don't work 

[18:48] <colomon> huh.  categorize.t is working for [Coke], failing for me.  :\

[18:49] <lizmat> colomon: strange, not real special Perl 6 code there...

[18:49] <colomon> lizmat: weird jvm bug I isolated days ago

[18:53] <labster> 89.63% of rakudo spectests passing, work on second 90% slated to begin shortly.

[18:53] <colomon> I thought jnthn++ had fixed it, so [Coke]'s build may be better than mine.  :\

[18:54] *** tomyan left
[18:56] *** xenoterracide|2 joined
[18:58] *** Chillance_ joined
[18:59] *** lelf` is now known as lelf

[18:59] *** xenoterracide left
[19:01] *** Chillance left
[19:04] <jnthn> colomon: I fixed that one only in one of my most recent commits

[19:04] <colomon> jnthn: I am pulling like every ten minutes here.  

[19:05] * colomon may be overexcited about rakudo-jvm

[19:06] *** rindolf left
[19:06] <FROGGS> *g*

[19:07] <colomon> I'm trying to do a more complete rebuild atm

[19:07] <jnthn> Confirm that categorize.t passes locally for me.

[19:08] <colomon> confirm it's still a huge fail for me.  :(

[19:08] <jnthn> ugh

[19:08] <jnthn> How's it fail

[19:08] <jnthn> ?

[19:08] <colomon> confirm I am an idiot

[19:08] <jnthn> :D

[19:09] *** tomyan joined
[19:11] <colomon> I can confirm that categorize.t works better if you don't have a "die" added after the first test.

[19:13] <jnthn> ORLY? :P

[19:14] <jnthn> Seems compared to yesterday we lost some tests...

[19:14] <jnthn> S02-names/pseudo.rakudo.jvm appears to have worsened somehow

[19:15] <jnthn> Same for our.t

[19:19] *** domidumont left
[19:20] *** abnorman left
[19:26] <colomon> that still only gets me to 22511, well short of [Coke]'s 23052  :\

[19:27] * masak is a little disappointed the categorize.t thing wasn't a deeper mystery than that...

[19:27] *** tomyan left
[19:30] *** pmichaud joined
[19:31] <colomon> https://gist.github.com/colomon/5896533 # differences between my run and [Coke]'s, broken down by area

[19:31] <colomon> 500 tests in S03, 60 more in "int"

[19:32] <jnthn> weird

[19:33] <colomon> yes

[19:33] <colomon> weird

[19:34] <jnthn> Think I've tracked down the our/pseudo regression

[19:37] <FROGGS> perl  -E 'say( (-50000 >> 8)  & 0xFF)' # 60

[19:37] <FROGGS> perl6 -e 'say( (-50000 +> 8) +& 0xFF)' # 61

[19:37] <FROGGS> where is the thinko?

[19:37] <timotimo> two's complement vs one's complement?

[19:37] <FROGGS> hmm?

[19:38] <colomon> timotimo: p6 is supposed to be two's complement

[19:39] <jnthn> Think there's an RT on that

[19:39] <FROGGS> okay, it looks like the internal storage format of Perl 5 is the answer when bitshifting negative values

[19:39] <FROGGS> ohh

[19:39] <FROGGS> will look

[19:39] <colomon> rn: say( (-50000 +>  +& 0xFF)'

[19:39] <camelia> niecza v24-86-g39ab531: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Non-declarative sigil is missing its name at /tmp/FWc7MRX6wJ line 1:␤------> [32msay( (-50000 +>  +[33m⏏[31m& 0xFF)'[0m␤␤Unhandled exception: Unable to resolve method from in type Any␤  at /home/p6eval/niecza/src/STD.pm6…

[19:39] <camelia> ..rakudo b3ee5f: OUTPUT«[31m===[0mSORRY![31m===[0m␤Non-declarative sigil is missing its name␤at /tmp/qrwoWxhetf:1␤------> [32msay( (-50000 +>  +&[33m⏏[31m 0xFF)'[0m␤    expecting any of:␤        infix noun␤»

[19:39] <colomon> rn: say( (-50000 +>  +& 0xFF)

[19:39] <camelia> niecza v24-86-g39ab531: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Non-declarative sigil is missing its name at /tmp/tmNOaBhAH3 line 1:␤------> [32msay( (-50000 +>  +[33m⏏[31m& 0xFF)[0m␤␤Unhandled exception: Unable to resolve method from in type Any␤  at /home/p6eval/niecza/src/STD.pm6 …

[19:39] <camelia> ..rakudo b3ee5f: OUTPUT«[31m===[0mSORRY![31m===[0m␤Non-declarative sigil is missing its name␤at /tmp/G86pvUuSyK:1␤------> [32msay( (-50000 +>  +&[33m⏏[31m 0xFF)[0m␤    expecting any of:␤        infix noun␤»

[19:40] <colomon> rn: say( (-50000 +>  +& 0xFF))

[19:40] <camelia> rakudo b3ee5f: OUTPUT«[31m===[0mSORRY![31m===[0m␤Non-declarative sigil is missing its name␤at /tmp/tWYD_TpRHj:1␤------> [32msay( (-50000 +>  +&[33m⏏[31m 0xFF))[0m␤    expecting any of:␤        infix noun␤»

[19:40] <camelia> ..niecza v24-86-g39ab531: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Non-declarative sigil is missing its name at /tmp/oNi2bRARmp line 1:␤------> [32msay( (-50000 +>  +[33m⏏[31m& 0xFF))[0m␤␤Unhandled exception: Unable to resolve method from in type Any␤  at /home/p6eval/niecza/src/STD.pm6…

[19:40] <jnthn> ttiar ?

[19:40] <FROGGS> rn: say( (-50000 +> 8 +& 0xFF))

[19:40] <camelia> niecza v24-86-g39ab531: OUTPUT«60␤»

[19:40] <camelia> ..rakudo b3ee5f: OUTPUT«61␤»

[19:40] <FROGGS> ahh

[19:40] <FROGGS> interesting

[19:41] <jnthn> [Coke]: Is https://gist.github.com/coke/5879701 something you generate or update manually?

[19:41] <FROGGS> jnthn: this one? #115958: bigint rshift op is 1s complement, should be 2s complement

[19:42] <jnthn> FROGGS: sounds like it, yes

[19:42] <FROGGS> k, htnkas

[19:42] <FROGGS> thanks

[19:42] <FROGGS> -.-

[19:42] <FROGGS> sorry, I run multiple threads here

[19:42] <jnthn> blem.It's no pro

[19:43] <FROGGS> rn: use Test; is (-4..-1 X+> 1..3), (-2,-1,-1,-2,-1 xx 8), "Right shift is two's complement"

[19:43] <camelia> rakudo b3ee5f: OUTPUT«not ok 1 - Right shift is two's complement␤#      got: '-2 -1 0 -1 0 0 -1 0 0 0 0 0'␤# expected: '-2 -1 -1 -2 -1 -1 -1 -1 -1 -1 -1 -1'␤»

[19:43] <camelia> ..niecza v24-86-g39ab531: OUTPUT«ok 1 - Right shift is two's complement␤»

[19:43] <FROGGS> jnthn: is it likely to be a bug in parrot?

[19:43] <colomon> rakudo-jvm$ ./perl6

[19:43] <colomon> > say( (-50000 +> 8 +& 0xFF))

[19:43] <colomon> 60

[19:44] <colomon> ;)

[19:44] <dalek> rakudo/nom: 9e85b50 | jnthn++ | src/Perl6/Grammar.nqp:

[19:44] <dalek> rakudo/nom: Prevent a $*IMPLICIT leakage.

[19:44] <dalek> rakudo/nom: 

[19:44] <dalek> rakudo/nom: Unregresses pseudo.t and our.t, which we slipped backwards on in the

[19:44] <dalek> rakudo/nom: daily roast.

[19:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9e85b502a3

[19:44] <FROGGS> that answers it

[19:44] <[Coke]> jnthn: https://gist.github.com/coke/5879701 updated. (manually. I have automated some of it, but I'm counting on you to fix things faster than I need to worry about it. :)

[19:44] <jnthn> [Coke]: Thanks, I've been finding it quite helpful.

[19:44] <jnthn> Using it as a kind of todo list... :)

[19:45] <colomon> I have a perl 6 script to make the list from the test summary

[19:45] <colomon> ;)

[19:46] <colomon> oh, never mind, that's a much more sophisticated list than I was making.  [Coke]++

[19:47] <[Coke]> jnthn: excellent.

[19:47] <[Coke]> You eliminated 2 of the sections since ysterday.

[19:47] <FROGGS> nr: say -50000 +> 8

[19:47] <camelia> niecza v24-86-g39ab531: OUTPUT«-196␤»

[19:47] <camelia> ..rakudo b3ee5f: OUTPUT«-195␤»

[19:47] <FROGGS> r: say(nqp::bitshiftr_i(-50000, 8))

[19:47] <camelia> rakudo b3ee5f: OUTPUT«-196␤»

[19:48] <jnthn> [Coke]: Well, I think I eliminated more than 2 but there are some new ones...

[19:50] *** abnorman joined
[19:50] <FROGGS> r: say(nqp::bitshiftr_I(-50000, 8, Int)) # <--- this one is faulty

[19:50] <camelia> rakudo b3ee5f: OUTPUT«-195␤»

[19:50] <dalek> rakudo/nom: e0bb438 | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/Binder.java:

[19:50] <dalek> rakudo/nom: Thinko spotted by GlitchMr++.

[19:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e0bb438210

[19:54] *** abnorman left
[20:00] *** abnorman joined
[20:02] <dalek> rakudo/nom: 60d2986 | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/Ops.java:

[20:02] <dalek> rakudo/nom: Add missing ops related to FIRST handling.

[20:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/60d298632d

[20:04] *** abnorman left
[20:10] *** lelf` joined
[20:12] *** lelf left
[20:19] <moritz> \o/ new HPMoR chapters

[20:19] <moritz> and /o\ I discovered that, and now I must go to bed :(

[20:23] <pmurias> does any one have any good ways to avoid getting distracted while nqp compiles? ;)

[20:24] <masak> \o/ HPMoR

[20:25] <tadzik> interesting. I made rakudo hang

[20:25] <masak> good. I was afraid we'd have to shoot EY.

[20:25] <tadzik> maximum recursion degth

[20:25] <moritz> pmurias: not reading HPMoR helps a lot :-)

[20:26] <masak> not a total guarantee, though.

[20:26] *** ilbot_nextgen left
[20:26] <pmurias> some kind of notification when the compilations end would be usefull

[20:27] <tadzik> make && echo -e "\a"

[20:27] <masak> make && synth-speak "Oi! It's done, mate."

[20:27] <jnthn> pmurias: Use the time to think up ways to make compilation faster. ;)

[20:31] <colomon> +1

[20:31] <colomon> ;)

[20:32] <jnthn> hmmm

[20:32] <jnthn> why does finddispatcher not find a dispatcher...

[20:33] *** spider-mario left
[20:33] <tadzik> liar

[20:33] <tadzik> "you had one job"

[20:35] <jnthn> ...'cus I was unconditionally writing a null into $*DISPATCHER

[20:36] <dalek> nqp: 2cb852a | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[20:36] <dalek> nqp: Only set dispatcher if there is one to set.

[20:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2cb852aa3b

[20:39] <dalek> rakudo/nom: 3fa1ed5 | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/Ops.java:

[20:39] <dalek> rakudo/nom: First attempt at p6finddispatcher.

[20:39] <dalek> rakudo/nom: 

[20:39] <dalek> rakudo/nom: Makes the various tests that depend on it run, though they have some

[20:39] <dalek> rakudo/nom: failures still.

[20:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3fa1ed5ed5

[20:41] *** snoopy joined
[20:48] <masak> r: sub days($n) { say "OH HAI" }; days 10

[20:48] *** xenoterracide|2 left
[20:48] <camelia> rakudo 60d298: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/FtfusZX2hJ:1␤------> [32msub days($n) { say "OH HAI" }; days [33m⏏[31m10[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        statement end␤        statement…

[20:49] *** xenoterracide joined
[20:49] <masak> is this correct by spec?

[20:49] <colomon> n: sub days($n) { say "OH HAI" }; days 10

[20:49] <camelia> niecza v24-86-g39ab531: OUTPUT«Potential difficulties:␤  $n is declared but not used at /tmp/o2m4HbdmcH line 1:␤------> [32msub days([33m⏏[31m$n) { say "OH HAI" }; days 10[0m␤␤OH HAI␤»

[20:49] <masak> should a prefix win over a listop in this case?

[20:49] <colomon> std: sub days($n) { say "OH HAI" }; days 10

[20:49] *** ggoebel left
[20:49] <camelia> std d4cc5ab: OUTPUT«Potential difficulties:␤  $n is declared but not used at /tmp/MaOYVNsyIy line 1:␤------> [32msub days([33m⏏[31m$n) { say "OH HAI" }; days 10[0m␤ok 00:00 45m␤»

[20:49] * masak submits rakudobug

[20:49] <colomon> days is an enum in datetime?

[20:50] <masak> oh!

[20:50] <masak> yes.

[20:50] <masak> dunno what I was thinking.

[20:50] <colomon> so std and niecza might not know about it?

[20:50] <masak> so it's the moral equivalent of a constant declaration.

[20:50] <masak> ok, so we make a better discriminator.

[20:50] <masak> hold on.

[20:50] <colomon> rn: sub pi($n) { say "Blue!"; }; pi 5

[20:50] <camelia> niecza v24-86-g39ab531: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Two terms in a row (listop with args requires whitespace or parens) at /tmp/eFwP8kn2Ln line 1:␤------> [32msub pi($n) { say "Blue!"; }; pi [33m⏏[31m5[0m␤Other potential difficulties:␤  $n is declared but not used at /tmp…

[20:50] <camelia> ..rakudo 60d298: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/AyZpAI2WDc:1␤------> [32msub pi($n) { say "Blue!"; }; pi [33m⏏[31m5[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        statement end␤        statement modi…

[20:51] <colomon> std: sub pi($n) { say "Blue!"; }; pi 5

[20:51] <camelia> std d4cc5ab: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row at /tmp/v_uuzZOcYG line 1:␤------> [32msub pi($n) { say "Blue!"; }; pi [33m⏏[31m5[0m␤    expecting any of:␤   feed_separator␤ infix or meta-infix␤    infixed function␤       statement modifier loop␤Other potential difficulti…

[20:51] <masak> rn: enum E <gna gne gnu>; say gnu; { sub gnu($x) { say $x }; gnu "OH HAI" }

[20:51] <camelia> niecza v24-86-g39ab531: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Two terms in a row (listop with args requires whitespace or parens) at /tmp/h3sh0Qsp6c line 1:␤------> [32m say gnu; { sub gnu($x) { say $x }; gnu [33m⏏[31m"OH HAI" }[0m␤␤Parse failed␤␤»

[20:51] <camelia> ..rakudo 60d298: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/OjxIDNG5Qk:1␤------> [32m say gnu; { sub gnu($x) { say $x }; gnu [33m⏏[31m"OH HAI" }[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        statement end␤     …

[20:51] *** ecocode joined
[20:51] <masak> std: enum E <gna gne gnu>; say gnu; { sub gnu($x) { say $x }; gnu "OH HAI" }

[20:51] <colomon> looks to me like Rakudo gets your example correct. 

[20:51] <camelia> std d4cc5ab: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row at /tmp/0XKq2S00EF line 1:␤------> [32m say gnu; { sub gnu($x) { say $x }; gnu [33m⏏[31m"OH HAI" }[0m␤    expecting any of:␤  feed_separator␤ infix or meta-infix␤    infixed function␤       statement modifier loop␤Parse fai…

[20:51] <masak> yes.

[20:51] <masak> rn: enum E <gna gne gnu>; say gnu; { sub gnu($x) { say $x }; gnu("OH HAI") }

[20:51] <camelia> niecza v24-86-g39ab531: OUTPUT«gnu␤Unhandled exception: No match␤  at /home/p6eval/niecza/lib/CORE.setting line 1531 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2198 (EnumMap._lookup @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1336 (CommonEnum.postcircumfix:<( )> …

[20:51] <camelia> ..rakudo 60d298: OUTPUT«gnu␤OH HAI␤»

[20:51] <masak> hehehe.

[20:51] <masak> rn: enum E <gna gne gnu>; say gnu; { sub gnu($x) { say $x }; &gnu("OH HAI") }

[20:51] <camelia> rakudo 60d298, niecza v24-86-g39ab531: OUTPUT«gnu␤OH HAI␤»

[20:52] <masak> ok.

[20:52] <masak> only remaining question, then:

[20:52] <masak> who's right in the gnu("OH HAI") case, Rakudo or Niecza?

[20:52] <masak> Niecza tries to make the call on the enum. Rakudo calls the sub.

[20:53] <FROGGS> I'd say it should prefer the invokable...

[20:54] <masak> why?

[20:54] <Ayiko> n: enum E <gna gne gnu>; say gnu; { sub gnu($x) { say $x }; &gnu("OH HAI") }

[20:54] <camelia> niecza v24-86-g39ab531: OUTPUT«gnu␤OH HAI␤»

[20:54] <masak> Ayiko: R and N agree on that one.

[20:54] <FROGGS> masak: because you tried to call it :P

[20:55] <masak> FROGGS: hmm. but the *real* name of the sub is &gnu

[20:55] <masak> FROGGS: whereas the real name of the enum is 'gnu'.

[20:55] <FROGGS> yes, and doing gnu( should look for a sub &gnu

[20:57] <masak> I hear what you're saying, I just don't see you providing a strong rationale for it.

[20:57] <masak> syntactically, it would make more sense for it to look for the enum. since that's the name of the enum.

[20:57] *** PacoAir left
[20:57] <FROGGS> IMO a name followed by opening parenthesis should always look for a symbol starting with an &

[20:57] <masak> I'm half playing devil's advocate here, and half actually thinking that it "makes sense" for it to find the enum.

[20:57] <FROGGS> if there are no parens it is ambitous of course

[20:58] <masak> FROGGS: not at all. we have typecasting syntax that also uses name + (

[20:58] *** PacoAir joined
[20:58] <FROGGS> hmmm, I was thinking it is name + [

[21:02] *** raiph left
[21:02] <Ayiko> r: say "I'll be back in " ~ 10*minutes # might take longer ;)

[21:02] <camelia> rakudo 60d298: OUTPUT«I'll be back in 40␤»

[21:02] <masak> x.x

[21:03] <FROGGS> hehe

[21:06] *** Timbus left
[21:06] *** Timbus joined
[21:09] *** raiph joined
[21:10] *** Danishman left
[21:13] <sorear> jnthn: so the sorear/FROGGS subst fix is sane?

[21:13] <sorear> o/

[21:14] <dalek> rakudo/nom: 718f45a | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/Ops.java:

[21:14] <dalek> rakudo/nom: Missing null check.

[21:14] <dalek> rakudo/nom: 

[21:14] <dalek> rakudo/nom: Fixes at least S32-array/delete.t.

[21:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/718f45a3c6

[21:14] <jnthn> sorear: Yes, total thinko on my part. :(

[21:19] * masak .oO( "I cultivated this, to the point of occasionally checking in bad (working, but crappily written) code on purpose, partially to give the code gnomes something to gnaw on and partly to enhance my rep as an adequate but not great coder." )

[21:20] <masak> no. on second thought, that's totally not jnthn. ;)

[21:20] <masak> jnthn++

[21:21] * jnthn can be decent one day and awful the next, though in the last month I've mostly been awful...

[21:21] <masak> fwiw, I was always distraught by that part of http://www.sidhe.org/~dan/blog/archives/000435.html -- not wanting to believe that anyone would ever want to make that tradeoff.

[21:21] <thundergnat> masak: any thoughts, observations or criticisms on my proposed Text::CSV stuff? 

[21:22] <masak> thundergnat: looking now.

[21:22] <jnthn> The thinko wasn't to give people something to gnaw on, anyway. Just getting wrong something "too easy to get wrong". :)

[21:24] *** colomon left
[21:26] <sorear> it really works much better if you clone and capturelex at the beginning of the block instead of the point of use

[21:26] <sorear> (although in niecza clone and capturelex are the same operation, the point stands)

[21:28] <jnthn> sorear: Agree, that's the model I want to move to.

[21:28] <jnthn> sorear: I suspect it may need to be the same operation for thread safety reasons.

[21:30] * sorear is now trying to make sense of the $*IMPLICIT changes

[21:30] <jnthn> sorear: The key change is what (iiuc) you suggested: $_ is always set up in finishpad.

[21:31] <jnthn> The rest is just coping with the fallout of that change.

[21:33] <sorear> what's p6takedispatcher et al for?

[21:33] <jnthn> nextsame etc.

[21:34] <masak> rn: say val($_).^name for <a 5 2/3 -0 7+i>

[21:34] <camelia> niecza v24-86-g39ab531: OUTPUT«Str␤IntStr␤RatStr␤IntStr␤Str␤»

[21:34] <camelia> ..rakudo 3fa1ed: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤    val used at line 1. Did you mean '&eval'?␤␤»

[21:34] <jnthn> If the current method is entered through a dispatcher, it makes sure to set it into $*DISPATCHER

[21:35] <masak> no I did not mean &eval, rakudo...

[21:35] <jnthn> To be fair, it did suggest the closest implemented thing :P

[21:36] <jnthn> wow, nqp::attrinited is completely busted...

[21:37] * jnthn wonders how we got away with that..

[21:38] <jnthn> lol

[21:38] <jnthn> It always returend 1. :)

[21:38] *** bruges joined
[21:38] <FROGGS> hehe

[21:39] <FROGGS> easy to test though

[21:39] <jnthn> That explains why defaults.t was failing

[21:40] <jnthn> And perhaps a good bit more of S12.

[21:40] *** bruges_ left
[21:40] <jnthn> Anything that uses has $.x = blah; didn't get the blah.

[21:40] <FROGGS> cool

[21:41] <sorear> wat.

[21:41] <jnthn> Yeah. I'm surprised we didn't catch this earlier...

[21:41] <sorear> you mean all the isinit code I tiptoed around in P6Opaque was not actually doing anything?

[21:41] <dalek> nqp: bb508c4 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/P6Opaque.java:

[21:41] <dalek> nqp: Fix nqp::attrinited.

[21:41] <dalek> nqp: 

[21:41] <dalek> nqp: Accidentally always returned true.

[21:41] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bb508c4f89

[21:42] <jnthn> sorear: Well, it apparently was all correct...apart from the "not initialized" return value was inverted...

[21:42] <jnthn> Wow. autothreading.t was failing 'cus of that, apparently...

[21:43] <sorear> Think we're over 90 now?

[21:44] <jnthn> Fairly likely. I regressed our.t and pseudo.t in that run, and I think fixing those alone shoulda got us close, if not there.

[21:44] * [Coke] does a rebuild.

[21:44] *** abnorman joined
[21:47] *** lelf`` joined
[21:49] *** lelf` left
[21:50] <pmurias> sorear: you are working on creating a persistent rakudo?

[21:51] <sorear> pmurias: ...I hope rakudo lasts a while?

[21:51] <sorear> nwc10: Did you get a satisfactory answe to your gather/take q?

[21:52] <pmurias> sorear: having one instance run the whole test suit?

[21:52] <jnthn> pmurias: That bit already works :)

[21:52] <sorear> pmurias: yeah, we already have the whole test suite running in one JVM

[21:52] <jnthn> sorear++

[21:52] <sorear> it's a bit of a hack but it's necessary to not go insane waiting

[21:53] <jnthn> We're down to 184 test files that need attention.

[21:54] <jnthn> (That is, they explode or something in them fails.)

[21:56] <jnthn> Anyway, enough Rakudo hacking for me today.

[21:56] <jnthn> Go sorear! ;)

[21:56] <lizmat> jnthn++

[21:56] <lizmat> sorear++

[21:56] <lizmat> FROGGS++

[21:56] *** logie left
[21:57] <lizmat> masak++ for filing a rakudobug, it's been a while

[21:58] <sorear> jnthn++ but I'm unlikely to do much today

[21:59] <lizmat> gnight #perl6!

[21:59] <jnthn> sorear: np :)

[22:11] <masak> lizmat: in the end, it didn't turn into a rakudobug... :)

[22:11] <masak> still something unresolved in there.

[22:11] <masak> I bet TimToady will know more.

[22:12] *** logie joined
[22:12] <masak> logie: oh hai. :)

[22:13] <sorear> welcome!

[22:13] <sorear> masak: you know em?

[22:13] <masak> nope.

[22:13] <logie> masak: hi!

[22:13] <masak> oh hello hi welcome :)

[22:13] *** colomon joined
[22:13] <masak> rn: say "it is us, the sawdust!"

[22:13] <camelia> rakudo 718f45, niecza v24-86-g39ab531: OUTPUT«it is us, the sawdust!␤»

[22:13] <sorear> o/ colomon

[22:14] <colomon> \o

[22:14] <masak> rn: enum Result <horrible excellent>; say "Well that's just {Result.pick}" # :)

[22:14] <camelia> niecza v24-86-g39ab531: OUTPUT«Well that's just horrible␤»

[22:14] <camelia> ..rakudo 718f45: OUTPUT«Well that's just excellent␤»

[22:15] <masak> :D

[22:15] *** FROGGS left
[22:15] <masak> rn: enum Imism <full empty>; say "The glass is definitely half {Imism.pick}"

[22:15] <sorear> sawdust?

[22:15] <camelia> niecza v24-86-g39ab531: OUTPUT«The glass is definitely half empty␤»

[22:15] <camelia> ..rakudo 718f45: OUTPUT«The glass is definitely half full␤»

[22:15] <masak> niecza is not in a good mood today.

[22:15] <tadzik> yay, I'm given an ipv6 address by sixxs

[22:15] <masak> sorear: http://www.amazon.com/The-Cyberiad-Stanislaw-Lem/dp/0156027593/

[22:16] <jnthn> Dammit, if they go giving out ipv6 addresses like this we're gonna run out of them, just like we did ipv4 ones! :P

[22:16] <masak> only when the sawdust starts applying individually.

[22:17] <masak> and all the sand. and various atoms and subatomic particles.

[22:17] * masak .oO( oh well. there's always ipv8, I guess )

[22:17] <sorear> tadzik: how many did you get?

[22:18] <tadzik> sorear: I'm now requesting a tunnel. Not sure

[22:18] <sorear> tadzik: you need a tunnel for ipv6?  I thought the US was the only country backward enough to not offer native ipv6 to everyone

[22:19] <tadzik> sorear: hehehe. No, I don't think so :)

[22:20] <tadzik> frankly, I've never seen native v6. Anywhere

[22:20] <tadzik> Cyberiada \o/

[22:21] <masak> yeah. it's a really nice book.

[22:21] <masak> wonderfully translated to English, too.

[22:22] <sorear> tadzik: I;ve heard that the norm for ipv6 is to give random people a huge number of addresses

[22:22] <sorear> like a /64 or so

[22:25] <tadzik> yeah, I've heard so

[22:25] <tadzik> and I have feeling similar to jnthn's about this thing

[22:26] <tadzik> they say "of course we'll never be out of ipv6 addresses"

[22:26] <tadzik> guess what ipv4 were thinking a couple dozen years ago

[22:26] <tadzik> * ipv4 folks

[22:27] <pmurias> jnthn: is there a smart way of doing QAST::Var.new(:decl('static'),:value($value)) with a $value that may not be a sixmodel object?

[22:27] <pmurias> jnthn: like an nqp number or string?

[22:27] <jnthn> pmurias: No

[22:27] <jnthn> pmurias: Though technically those are all 6model objects away from Parrot...

[22:27] <jnthn> It has to be something that can go in a WVal

[22:28] <pmurias> so they can go into a WVal on jvm?

[22:28] <jnthn> Didn't try ('cus it'd be unportable), but I don't see any reason why not.

[22:28] *** PacoAir left
[22:31] <pmurias> we could always make that portable ;)

[22:32] * [Coke] wonders how many whole class A's still exist.

[22:39] *** raiph left
[22:41] *** abnorman left
[22:43] <masak> 'night, #perl6

[22:48] *** Rotwang left
[22:53] <[Coke]> jnthn, sorear: I have a fix for cwd() on the jvm. requires java.io.File; do I need to declare in import somewhere

[22:53] <[Coke]> ? (trying now)

[22:54] <sorear> every file needs to list the classes it uses in the import list at the top

[22:55] <[Coke]> I just realized this fix needs to go into the nqp ops, not the rakudo invocation of them. if it's straight java, that's fine, I can do that.

[22:55] <sorear> we seem to be following a style of 1. ASCIIbetical import sorting 2. not using wildcard imports (java.io.*) 3. one blank line between standard library imports, nonstandard library imports (if any), and org.perl6.nqp imports

[22:55] <[Coke]> ... oh. the nqp fix is already there.

[22:56] <[Coke]> ... we're just die'ing in rakudo instead of calling it.

[22:56] <[Coke]> even easier.

[22:58] <jnthn> [Coke]++

[23:00] <[Coke]> jnthn: now I have to wait 30minutes for a build cycle. ;)

[23:02] *** FROGGS joined
[23:08] <jnthn> Yeah, but if you fix all the $*CWD hungry tests... ;)

[23:08] *** abnorman joined
[23:09] *** FROGGS left
[23:14] *** logie left
[23:14] <jnthn> 'night, #perl6

[23:18] <[Coke]> r: say $*CWD

[23:18] <camelia> rakudo 718f45: OUTPUT«IO::Path</home/p6eval>␤»

[23:19] <[Coke]> ok, cwd() works (though I need to change the java function we're calling), but $*CWD doesn't seem to be automagically set on startup.

[23:19] <[Coke]> I only see it set in src/core/IO.pm

[23:20] <[Coke]> (and then, only in chdir)

[23:21] <[Coke]> ah, found a $CWD reference. checking...

[23:25] <[Coke]> is src/core/terms.pm something that requires using low level constructs? (there's a duplication of the cwd() method in here, wondering if I can reasonably expect to use IO's cwd()

[23:26] *** yves left
[23:26] *** yves joined
[23:28] <sorear> [Coke]: check the order of files in the Makefile

[23:29] *** benabik left
[23:30] *** ecocode left
[23:31] *** benabik joined
[23:33] <[Coke]> yay, first pass works.

[23:40] <dalek> rakudo/nom: 5679414 | coke++ | src/core/ (2 files):

[23:40] <dalek> rakudo/nom: enable $*CWD & cwd() on rakudo.jvm

[23:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/567941498b

[23:44] *** jaldhar joined
[23:52] *** abnorman left
