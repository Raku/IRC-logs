[00:03] *** colomon left
[00:03] <timotimo> what's the standard answer to someone saying "perl6 destroyed perl5 because people started saying 'i'll wait for perl6 before i continue doing stuff'"?

[00:04] *** colomon joined
[00:04] <TimToady> "no, perl6 resurrected interest in perl5"

[00:05] <TimToady> the reason perl6 was started in the first place is that people *already* recognized that perl5 was stagnating

[00:06] <TimToady> that was precisely Jon Orwant's point with the mugs

[00:06] * lizmat read the backlog

[00:06] <TimToady> and that's the nice answer :)

[00:07] *** dhaivat left
[00:08] <lizmat> will see if there is a solution for %<a><b>:exists that would not need Any.exists, and which would not slow down all {} accesses

[00:08] *** dhaivat joined
[00:08] <lizmat> but not today

[00:08] <lizmat> gnigt #perl6!

[00:08] <jnthn> lizmat: For now we could constraint it to :U on the invocant

[00:08] * jnthn gets some rest also

[00:08] <jnthn> 'night o/

[00:08] <TimToady> nighty

[00:09] <lizmat> no, that doesn't work, because the U: is exactly what we need for %h<a><b>

[00:09] <lizmat> ah, me is sleepy

[00:09] <lizmat> yes, you're right: U: should do it, but then the error message gets confusing

[00:10] <lizmat> "Invocant requires a type object, but an object instance was passed" for 42.delete(42)

[00:10] <lizmat> LTA error message

[00:10] <lizmat> and oddly enough, if I add the U:, I get spectest errors with exactly that error

[00:11] <lizmat> not sure what is going on there, will check after some sleep

[00:11] <lizmat> eyes closing&

[00:12] *** Psyche^_ joined
[00:14] <raiph> TimToady: Do you still have the slides that went with Camelot #6? (p6 announcement talk in 2000)

[00:14] <TimToady> there were no slides, it was, as I recall, a demonstration of many different musical instruments

[00:16] *** Psyche^ left
[00:17] *** Rotwang left
[00:20] <raiph> oh. heh. maybe this is a later talk then. I'm reading http://www.mail-archive.com/perl6-meta@perl.org/msg00409.html

[00:21] <raiph> er, s/Camelot/Camel Lot/

[00:23] <raiph> TimToady: I mean whatever went with the talk I linked

[00:26] *** jaldhar joined
[00:28] *** btyler joined
[00:28] *** colomon left
[00:36] *** daniel-s_ left
[00:38] *** btyler left
[00:39] *** daniel-s_ joined
[00:51] <TimToady> if I have it, it's probably on an old SCSI drive sitting out in my garage :)

[01:05] *** dhaivat left
[01:08] *** FROGGS_ joined
[01:12] *** dhaivat joined
[01:12] *** FROGGS left
[01:13] *** abnorman left
[01:13] *** abnorman joined
[01:27] * Mouq files Rakudo PR #204

[01:32] * Mouq always does stuff after all the perl6ers are offline :p

[01:33] *** btyler joined
[01:42] *** garfieldnate left
[01:46] <[Coke]> not all of us.

[01:46] <yoleaux> 31 Aug 2013 08:56Z <lizmat> [Coke]: I have no idea: 114 is *all* tests.  on parakudo it says: Files=1, Tests=114,  3 wallclock secs ( 0.03 usr  0.00 sys +  2.75 cusr  0.17 csys =  2.95 CPU)

[01:49] <[Coke]> ... but that's outside of my comfort zone at the moment, sorry. 

[01:50] <Mouq> It's np. I'm happy enough you looked at it

[01:52] *** lichtkind left
[01:55] *** silug_ left
[02:03] *** dhaivat left
[02:04] *** btyler left
[02:05] *** PacoAir left
[02:07] <TimToady> Mouq: yes, some of us are even further west than you are...how was your first week of school?

[02:10] <Mouq> Excellent, thank you. Being a senior kinda rocks. I woulda' gotten this PR in sooner but I've spent most of my time not in school recovering from cross country practice

[02:11] * TimToady remembers his senior year fondly

[02:11] <TimToady> any idea what you're doing next year yet?

[02:13] <Mouq> …not particularly. ATM I'm wishfully thinking something in Engineering at UPenn

[02:14] <diakopter> that's, like, ivy league and stuff

[02:14] <TimToady> I'm sure there'd be plenty of worse choices

[02:14] <TimToady> though you get more personal attention at a smaller school--it's all tradeoffs

[02:15] <Mouq> Really? I don't think of UPenn as ivy league.

[02:15] <TimToady> yes, well, diakopter is from Texas, so you have to cut him some slack :P

[02:15] <diakopter> heh.

[02:16] <diakopter> ivy league is well-defined...

[02:16] <Mouq> I'm a PA resident, so it's a little different

[02:16] <TimToady> schools with ivy on them, I know...

[02:16] <TimToady> yeah, I figured you was in PA from the traceroute that stopped somewhere in the middle of PA

[02:16] <TimToady> but I didn't want you to think I was stalking you, so forget I mentioned that :)

[02:18] <Mouq> heh, nah, traceroute's fun

[02:18] <TimToady> mostly I just wanted to know which timezone you're in

[02:19] <TimToady> so's I could properly claim to be west of you

[02:19] <geekosaur> you're west of them, of course. just possibly less far east of them....

[02:22] <TimToady> well, even if PA is a country code, it's only Panama...

[02:22] <diakopter> Mouq: my point was, upenn is one of the hardest to get into that exists, so, "impressive.."

[02:23] *** colomon joined
[02:23] <Mouq> Oh, yeah, we'll see about that whole "actually getting in" thing

[02:31] *** dhaivat joined
[02:44] *** raiph left
[03:13] <Mouq> TimToady: is $var.:<∃> always a call to prefix ∃?

[03:14] <Mouq> err, &prefix:<∃>($var)

[03:17] <TimToady> supposed to be; don't need it for postfixes, which already know how to attach after

[03:17] *** dhaivat left
[03:18] *** dhaivat joined
[03:18] <Mouq> Okay. The spec implies as much, but I wasn't sure if it had wider applications

[03:22] <colomon> TimToady: what is bless supposed to look like now?  instead of self.bless(*, coefficients => @x); it's self.bless(coefficients => @x); ?

[03:23] <TimToady> yes, just drop the *

[03:24] <colomon> I have to make that work in niecza, and then change a lot of modules…  :)

[03:25] *** BenGoldberg left
[03:25] <TimToady> HTAAOF

[03:25] <colomon> ?

[03:26] <TimToady> have the appropriate amount of fun

[03:26] <colomon> btw, here's a quick one for you:

[03:26] <colomon> use Math::Polynomial;

[03:26] <colomon> constant x = Math::Polynomial.new(0, 1);

[03:26] <colomon> my @pf := 0, 1, -> $a, $b { $a + x * $b } ... *;

[03:26] <colomon> lazy sequence of Fibonacci polynomials.  :)

[03:27] <TimToady> kewl

[03:27] *** skids joined
[03:28] <diakopter> TimToady: heh, add a RosettaCode entry... that's how you'll surpass the others...

[03:29] <Teratogen> I still have my decoder ring

[03:32] *** mauke left
[03:32] *** mauke joined
[03:34] *** preflex_ joined
[03:34] *** ChanServ sets mode: +v preflex_

[03:35] *** preflex left
[03:35] *** preflex_ is now known as preflex

[03:40] *** daniel-s_ left
[03:40] *** daniel-s_ joined
[03:44] *** daniel-s_ left
[03:45] *** daniel-s_ joined
[03:51] *** ml joined
[03:52] <ml> Do junctive operators work with types? Like: sub f ( Int | Rat $a) {...}

[03:52] <TimToady> nope

[03:52] <TimToady> hafta do that with a subset type now

[03:53] <TimToady> subset IR where Int | Rat; sub f (IR $a) {...}

[03:53] <ml> Hmmm...mislead by Wikipedia again. Thanks!

[03:53] <TimToady> was an old idea that didn't work out

[03:54] <TimToady> in particular, it'd be terribly ambiguous now that we have |c to bind captures

[03:54] <TimToady> likewise we have &foo to bind routines, so & doesn't work either

[03:54] <TimToady> alternately, you want sub f (Real $a) {...} there

[03:55] <TimToady> since Int and Rat share that role

[03:55] <TimToady> (I believe)

[03:55] <TimToady> r: say Int ~~ Real; say Rat ~~ Real;

[03:55] <camelia> rakudo 1fca64: OUTPUT«True␤True␤»

[03:56] <ml> But Real would allow inexact numbers as the argument?

[03:57] <TimToady> well, most numbers are

[03:57] <ml> That's true :-)

[03:59] <TimToady> and even Rats won't maintain their exactness if you overflow their denominator

[03:59] <TimToady> and FatRats that do keep precision have performance issues when they keep precision

[04:00] <TimToady> (unless you keep them on a diet)

[04:00] <ml> Life is good as long as we have choices.

[04:00] <TimToady> I choose to believe that.  :)

[04:02] *** ml left
[04:10] *** dhaivat_ joined
[04:13] *** dhaivat left
[04:13] *** dhaivat_ is now known as dhaivat

[04:14] *** fridim_ left
[04:27] *** Mouq left
[04:27] *** xenoterracide_ joined
[04:29] *** lue left
[04:31] *** btyler joined
[04:32] *** xenoterracide_ left
[04:38] *** agre joined
[04:41] *** xenoterracide joined
[04:42] *** lue joined
[05:01] *** btyler left
[05:09] *** dhaivat left
[05:36] *** EvanTeitelman left
[05:42] *** kaare_ joined
[06:26] *** FROGGS_ left
[06:28] <moritz> masak: got an example where my t3 solution behaves suboptimal?

[06:35] <sorear> o/ moritz 

[06:41] *** agre left
[06:43] <moritz> \o sorear 

[06:52] <moritz> http://www.techempower.com/blog/2013/03/26/everything-about-java-8/ java 8 allows default implementations in interfaces

[06:53] <moritz> which means you can now use interfaces for code reuse too

[06:53] <moritz> which makes them kinda similar to Perl 6 roles :-)

[07:03] *** cognominal left
[07:03] *** cognominal joined
[07:03] *** FROGGS[mobile] joined
[07:09] *** agre joined
[07:43] *** agre left
[07:50] *** itz_ left
[07:53] *** itz joined
[07:56] *** domidumont joined
[08:01] *** domidumont left
[08:01] *** domidumont joined
[08:02] *** agre joined
[08:03] *** agre left
[08:06] *** berekuk joined
[08:07] <dalek> rakudo/nom: ce3ea39 | Mouq++ | src/Perl6/ (2 files):

[08:07] <dalek> rakudo/nom: Get $var.++ and $var.() working.

[08:07] <dalek> rakudo/nom: 

[08:07] <dalek> rakudo/nom: $var.:<++> etc is also parsed now, but is not functional.

[08:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ce3ea3924b

[08:07] *** berekuk left
[08:25] *** agre joined
[08:37] *** agre left
[08:38] *** spider-mario joined
[08:42] *** Rotwang joined
[08:47] *** ssutch left
[08:49] *** Rotwang left
[08:55] *** dmol joined
[08:56] *** Teratogen left
[08:59] <dalek> roast: 4318de8 | moritz++ | S02-lexical-conventions/unspace.t:

[08:59] <dalek> roast: Rakudo unfudges, Mouq++

[08:59] <dalek> roast: review: https://github.com/perl6/roast/commit/4318de8cfe

[09:05] *** Rotwang joined
[09:06] <dalek> rakudo/nom: a0d7cec | moritz++ | tools/autounfudge.pl:

[09:06] <dalek> rakudo/nom: [autounfudge] do not unfudge rakudo.parrot fudges on JVM, or vice versa

[09:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a0d7cece5f

[09:18] *** domidumont left
[09:22] <jnthn> morning o/

[09:22] <yoleaux> 02:26Z <JimmyZ> jnthn: if you get segfault with `../moarvm nqp.moarvm t/nqp/57-construction.t`, hope this will help you https://gist.github.com/zhuomingliang/6401892/raw/666e0d27126409f55489b98bb7fdd04942b28a05/gistfile1.txt

[09:22] <yoleaux> 02:41Z <JimmyZ> jnthn: and https://gist.github.com/zhuomingliang/6401892/raw/1b70efe5077064eed265f66c57633e39cae27863/gistfile1.txt

[09:22] <yoleaux> 03:14Z <JimmyZ> jnthn: ignore 666e0d27126409f55489b98bb7fdd04942b28a05 one

[09:22] <yoleaux> 03:29Z <JimmyZ> jnthn: I fixed the segfault by this patch: https://gist.github.com/zhuomingliang/6402151

[09:22] <yoleaux> 04:17Z <JimmyZ> jnthn: but the largest item->size number I got is 200

[09:22] <yoleaux> 04:50Z <JimmyZ> jnthn: I got the weird thing. with MVMuint16 size, any item->size greater than 184 will be changed to 184

[09:22] <yoleaux> 07:44Z <nwc10> jnthn: if I run `../moarvm nqp.moarvm t/nqp/53-knowhow.t` it passes (reliably) but it fails reliably (Non-zero wait status: 11) if run by the harness. To me this is suspicion, but I have no idea what it's telling me.

[09:23] <jnthn> hah, and all of those were sent on another channel...

[09:25] <moritz> good antenoon jnthn 

[09:26] *** berekuk joined
[09:32] *** kaare__ joined
[09:32] <nwc10> moritz: it's not that bad *yet*. Unless Sweden has defected to EEST

[09:32] *** berekuk left
[09:34] <masak> good almost-noon, #perl6

[09:34] <nwc10> gah. my fingers *And* my eyes have auto-correct

[09:35] *** kaare_ left
[09:35] <nwc10> "antenoon" ne "afternoon"

[09:35] * nwc10 gives up and goes back to cooking

[09:35] <masak> moritz: a few cases: https://gist.github.com/masak/c56a8607c112a9c83829

[09:40] <moritz> 9514268073 11 9

[09:40] <moritz> that's not good :-)

[09:42] <masak> moritz: I'm currently building the graph induced by all best moves, so that I can do analysis on it.

[09:42] <masak> maybe something'll fall out.

[09:49] <masak> r: say (^512)>>.fmt("%09b").grep({ $_ !~~ /11/ }).elems

[09:49] <camelia> rakudo a0d7ce: OUTPUT«89␤»

[09:49] <masak> sometimes Perl 6 is just so much more expressive than Perl 5.

[09:49] <masak> is there a nicer way to write that { $_ !~~ /11/ } ?

[09:50] <moritz> I guess that ~~ doesn't autocurry with *

[09:50] <moritz> !*.match(/11/) ?

[09:51] <masak> I initially tried { !/11/ }, but that didn't fly.

[09:57] *** agre joined
[09:57] *** berekuk joined
[10:01] *** berekuk left
[10:03] <moritz> but why not?

[10:06] <masak> r: say (^512)>>.fmt("%09b").grep({ !/11/ })

[10:06] <camelia> rakudo a0d7ce: OUTPUT«Cannot call 'match'; none of these signatures match:␤:(Cool:D : $target, *%adverbs)␤  in method match at src/gen/CORE.setting:3155␤  in method Bool at src/gen/CORE.setting:11944␤  in method Bool at src/gen/CORE.setting:805␤  in sub prefix:<!> at src/gen/CORE.settin…

[10:06] <masak> I dunno, a regression perhaps?

[10:07] <masak> r: say (^512)>>.fmt("%09b").grep({ /11/ }).elems

[10:07] <camelia> rakudo a0d7ce: OUTPUT«423␤»

[10:07] <masak> feels like if { /11/ } works, then { !/11/ } should.

[10:12] *** hummeleBop joined
[10:20] *** PacoAir joined
[10:21] <masak> r: say (^512)>>.fmt("%09b").grep({ ?/11/ }).elems

[10:21] <camelia> rakudo a0d7ce: OUTPUT«Cannot call 'match'; none of these signatures match:␤:(Cool:D : $target, *%adverbs)␤  in method match at src/gen/CORE.setting:3155␤  in method Bool at src/gen/CORE.setting:11944␤  in method Bool at src/gen/CORE.setting:805␤  in sub prefix:<?> at src/gen/CORE.settin…

[10:21] <masak> interesting.

[10:25] *** eternaleye left
[10:25] *** eternaleye joined
[10:27] *** dwarring left
[10:29] <masak> I'm not submitting a rakudobug yet on this, because I don't even know if this is supposed to work.

[10:29] <masak> I *think* it is, but I'm not sure.

[10:36] *** bruges left
[10:36] *** bruges joined
[10:37] <moritz> r: say True ~~ /11/

[10:37] <camelia> rakudo a0d7ce: OUTPUT«Nil␤»

[10:37] <moritz> that's not it then

[10:38] * moritz has the feeling that some $_ setup is wrong there

[10:38] <moritz> r: (^2).grep: { !.perl.say }

[10:38] <camelia> rakudo a0d7ce: OUTPUT«0␤1␤»

[10:39] <cognominal> I wish Perl 6 had a very low function application operator and a function composition operator à la haskell to support functionnal style in Perl 6

[10:42] <cognominal> if we used . for function composition as haskell, we could not have the unsupporte use of .

[10:43] <moritz> and we wouldn't have . for method calls

[10:43] <cognominal> But I am sure there is an haskell symbol used by mathematecian for function composition even if I don't know it

[10:43] <cognominal> nope,  that would be . with spaces around

[10:43] <moritz> eeks!

[10:45] <dalek> roast: 13f3908 | moritz++ | S03-operators/set.t:

[10:45] <dalek> roast: rakudo unfudges, lizmat++

[10:45] <dalek> roast: review: https://github.com/perl6/roast/commit/13f3908550

[10:46] <cognominal> I have even a wilder idea, but coherent with the previous one.  Binary operators with two spaces around would have lower precedence than binary operators with one space around.

[10:48] <cognominal> The name of the game is to get rid of clippred nails in the oatmeal,  I mean  to get read of spurious parentheses

[10:50] <cognominal> http://www.fileformat.info/info/unicode/char/2218/index.htm

[10:51] *** Rotwang left
[10:51] <cognominal> .U2218

[10:52] <cognominal> I forgot the syntax to ask about a unicode char

[10:53] <cognominal> .u ring

[10:53] <yoleaux> U+00C5 LATIN CAPITAL LETTER A WITH RING ABOVE [Lu] (Å)

[10:53] <yoleaux> U+00E5 LATIN SMALL LETTER A WITH RING ABOVE [Ll] (å)

[10:53] <yoleaux> U+016E LATIN CAPITAL LETTER U WITH RING ABOVE [Lu] (Ů)

[10:53] <moritz> .u 2218

[10:53] <yoleaux> U+2218 RING OPERATOR [Sm] (∘)

[10:53] <cognominal> a ∘ a

[10:54] <cognominal> looks nice

[10:55] <cognominal> this bot proves that people don't think enough about spaces

[11:12] *** PacoAir left
[11:13] *** colomon left
[11:13] *** PacoAir joined
[11:14] *** colomon joined
[11:29] *** daniel-s_ left
[11:30] <masak> r: sub infix:<∘>(&f, &g) { -> $x { f(g($x)) } }; say (&sin ∘ &log)(1.0)

[11:30] <camelia> rakudo a0d7ce: OUTPUT«0␤»

[11:30] <masak> \o/

[11:32] *** denis_boyun joined
[11:32] <masak> cognominal: I don't think the "spaces around operators" rule belongs in plain Perl 6. in a dialect, sure, but not in the default.

[11:35] <cognominal> I am porting the perl6 expression engine to js (really coffeescript) to experiment with dynamical highlighting in codemirror. I will see how it goes. 

[11:37] <masak> ooh

[11:39] <cognominal> I already some experiments with dynamical highlighting with manually created asts but that was useless if not editable. So I learned codemirror.

[11:39] *** hummeleBop left
[11:42] <masak> in other news, I'm enjoying http://pipeline.corante.com/archives/things_i_wont_work_with/ today. if you're looking for good, engaging writing about dangerous chemical compounds, this is it.

[11:42] <masak> I wish I knew how to write like that. I also wish my chemistry classes were a bit more like that.

[11:42] <cognominal> I anticipate that eventually the AST will be the reference and people will deparse them as they see fit. So everyone can have his own private language (syntax wise) without bothering the others. In a sense, that will be an answer to a Wittgenstein argument. http://en.wikipedia.org/wiki/Private_language_argument

[11:42] <masak> what better way to make a schoolchild interested in chemistry than by telling about all the horrible ways it's possible to screw things up?

[11:43] <masak> cognominal: if we ever reach the "everyone can have a slang of their own" state with Perl 6, it will be an interesting thing indeed.

[11:44] <masak> like a CPAN but on the language level.

[11:44] <masak> I'm curious about how feasible it'll be to combine/compose slangs.

[11:44] <masak> we already do that with routine and type definitions, for example.

[11:46] <cognominal> I don't think they will combime because they are very unlike haskell grammar combinators

[11:48] <cognominal> what is strange is that everyone is speaking DSL these days and I am not sure people provide tools to do that (except haskellish combinators)

[11:48] <cognominal> perl 6 will.

[11:49] <cognominal> perl6, the buzzword free language. We just do it.

[11:49] *** lizmat left
[11:50] *** lizmat joined
[11:52] <lizmat> good *, #perl6!

[11:52] <colomon> \o

[11:54] <moritz> o/

[11:54] <cognominal> \o/

[11:54] <moritz> masak++ # nice link. "The paper tells you how to make small crystals of the alpha form, which is not too bad, as long as you keep it moist and in the dark, and never, ever, do anything with it."

[11:55] <moritz> "Explosions are definitely underappreciated as a mixing technique"

[11:57] * moritz notices that he really wants to quote every second sentence from that article, but refrains

[11:58] * colomon is finding bless extremely simple to fix in Niecza.  :)

[12:02] <moritz> it was pretty easy to fix in rakudo too

[12:04] <dalek> roast: 59a518a | (Elizabeth Mattijsen)++ | S02-lexical-conventions/unspace.t:

[12:04] <dalek> roast: Unfudge 2 now passing tests: Mouq++

[12:04] <dalek> roast: review: https://github.com/perl6/roast/commit/59a518a024

[12:12] <dalek> niecza: d49208e | (Solomon Foster)++ | lib/CORE.setting:

[12:12] <dalek> niecza: Conform to the current spec for bless.

[12:12] <dalek> niecza: review: https://github.com/sorear/niecza/commit/d49208e890

[12:15] <moritz> is anybody going through the test suite to remove the * from bless?

[12:15] <moritz> if not, I can do that

[12:18] * colomon is working on ABC right now

[12:18] <masak> moritz: my favorite sentence so far:

[12:18] <masak> 'At any rate, its odor is variously described as "foul", "unpleasant", "metallic", "disagreeable", and (wait for it) "characteristic", which is an adjective that shows up often in the literature with regard to smells, and almost always makes a person want to punch whoever thought it was useful.'

[12:18] <tadzik> let me guess: mustard gas?

[12:19] <tadzik> or is that totally unrelated? :)

[12:21] <masak> tadzik: dimethylcadmium.

[12:22] <lizmat> typical

[12:24] <dalek> niecza: 3961d5d | (Solomon Foster)++ | lib/Test.pm6:

[12:24] <dalek> niecza: Fix bless in testing code.

[12:24] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3961d5d63d

[12:24] <tadzik> that doesn't tell me much :) But that reminded me of a forum post when someone posted a picture of crystals and said "here's how you do it", followed by a recipe for some deadly toxine

[12:32] *** zakharyas joined
[12:33] *** Rotwang joined
[12:35] <moritz> tadzik: most of the gases containing metal are toxic to highly toxic, fwiw

[12:39] *** xenoterracide left
[12:39] <tadzik> that sounds about right

[12:39] <dalek> roast: d2a9e62 | moritz++ | S (21 files):

[12:39] <dalek> roast: remove * from bless

[12:39] <dalek> roast: review: https://github.com/perl6/roast/commit/d2a9e62c6a

[12:47] *** domidumont joined
[12:51] <colomon> Okay, so here's weird.

[12:52] <colomon> With all the bless warnings in ABC, processing a 25-tune ABC file took 11 minutes in parrakudo, 1 minute in jakudo.

[12:54] <dalek> rakudo/nom: 39024d8 | (Elizabeth Mattijsen)++ | src/core/Any.pm:

[12:54] <dalek> rakudo/nom: Make Any.exists|delete only work on undefined values

[12:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/39024d8051

[12:54] <lizmat> colomon: creating warnings is a lot of work

[12:54] <lizmat> that's even true in Perl5

[12:55] <arnsholt> Output to screen is a real bottleneck. IIRC terminal emulators are known to mostly be a bit slow

[12:56] <moritz> arnsholt: I guess in Perl 6 the bottleneck is that warn() are resumable exceptions

[12:56] <moritz> which walk the call chain to find the handler, print, and then resume

[12:56] <arnsholt> Oh, right. That's gonna slow it down as well, yeah

[12:56] <moritz> and walking the call chain isn't the fastest, iirc

[12:57] <dalek> rakudo/nom: 9a63ead | (Elizabeth Mattijsen)++ | src/core/ (4 files):

[12:57] <dalek> rakudo/nom: Remove exist_key and delete_key: they are not specced and not used in core

[12:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9a63eade18

[12:58] *** kaare__ left
[13:01] *** domidumont left
[13:03] *** dmol left
[13:04] <colomon> With the bless calls fixed, it takes 53s in parrakudo, 32s in jakudo.

[13:04] <colomon> sorry, my second line of that comparison never showed up.  but you guys anticipated it nicely!

[13:04] *** dhaivat joined
[13:05] <colomon> so the warnings aren't just slow, they're much slower (relatively) in parrakudo.

[13:05] <moritz> so, warnins are *really* slow on parakudo?

[13:05] <colomon> seems like

[13:05] * moritz too slow

[13:05] <moritz> might also depend on the stack depth

[13:06] <colomon> BTW, same task runs in 12s on Niecza, so jakudo still has room for improvement.  :)

[13:07] <moritz> colomon: jnthn said at YAPC::EU that there aren't really any optimizations for the JVM yet, just a performance-aware approach at factoring things

[13:08] <moritz> so, I still hope for better performance :-)

[13:08] <colomon> oh, absolutely.

[13:09] <dalek> rakudo/nom: 7a71ec7 | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[13:09] <dalek> rakudo/nom: Hide Set|Bag.delete from backtrace, no point in showing exception from within

[13:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7a71ec7685

[13:09] *** Mouq joined
[13:11] *** dhaivat left
[13:11] <Mouq> r: .++; .say

[13:11] <camelia> rakudo a0d7ce: OUTPUT«1␤»

[13:12] * Mouq does a dance

[13:15] *** dhaivat joined
[13:17] <moritz> Mouq: was that your first rakudo patch?

[13:19] *** dhaivat left
[13:19] <Mouq> The first that actually did anything. I had one that gave NYI on tr/// and an open one with NYI on $str +< $num

[13:20] <moritz> let me just say "welcome to the club" :-)

[13:22] <Mouq> \o/

[13:22] <Mouq> Thank you

[13:22] <lizmat> Mouq  o/

[13:24] *** benabik left
[13:25] <Mouq> o/

[13:28] *** benabik joined
[13:28] <dalek> rakudo/nom: e7d2175 | (Elizabeth Mattijsen)++ | src/core/Key (2 files):

[13:28] <dalek> rakudo/nom: Add KeyBag|KeySet.delete, so that :delete works on KeyBag|KeySet

[13:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e7d2175028

[13:28] <dalek> rakudo/nom: 0aafe9e | (Elizabeth Mattijsen)++ | src/core/KeySet.pm:

[13:28] <dalek> rakudo/nom: Simplify KeySet.exists: if a keys exists with value 0, we have a bug!

[13:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0aafe9eef7

[13:28] <dalek> rakudo/nom: 6fb0651 | (Elizabeth Mattijsen)++ | src/core/Key (2 files):

[13:28] <dalek> rakudo/nom: Simplify KeyBag|KeySet.at_key

[13:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6fb0651848

[13:29] *** ajr joined
[13:29] <dalek> roast: 4df345b | (Elizabeth Mattijsen)++ | S02-types/key (2 files):

[13:29] <dalek> roast: Unfudge now passing KeyBag|KeySet<>:delete tests

[13:29] <dalek> roast: review: https://github.com/perl6/roast/commit/4df345b112

[13:29] *** ajr is now known as Guest95905

[13:30] *** Guest95905 is now known as ajr_

[13:31] <masak> Mouq++

[13:33] *** dhaivat joined
[13:37] *** dhaivat left
[13:43] <dalek> roast: b4ac4f3 | (Elizabeth Mattijsen)++ | S02-types/ (2 files):

[13:43] <dalek> roast: Add tests for delete failing on Set|Bag

[13:43] <dalek> roast: review: https://github.com/perl6/roast/commit/b4ac4f3588

[13:43] <diakopter> lizmat++ # shearing a hundred un-tasty yaks and running a few marathons of legwork to iron out keybag/set shtuff

[13:44] <lizmat> ;-)  if only I could put Sets in a Bag  :-)

[13:49] <masak> lizmat++ # doin' stuff

[13:50] *** abnorman left
[13:51] *** abnorman joined
[13:52] *** agre left
[13:59] *** btyler joined
[13:59] *** raiph joined
[14:02] <lizmat> r: say [==] ()

[14:02] <camelia> rakudo 9a63ea: OUTPUT«True␤»

[14:02] <lizmat> r: say [!==] ()  # by consequence, should this be False ?

[14:02] <camelia> rakudo 9a63ea: OUTPUT«Not enough positional parameters passed; got 0 but expected 2␤  in block  at src/gen/CORE.setting:15659␤  in sub  at src/gen/CORE.setting:15791␤  in block  at /tmp/OKR3d5Sol8:1␤␤»

[14:03] <jnthn> lizmat: Yes

[14:04] <Mouq> #perl6: To add some basic NQP support in github, I can add it into it's own language category, or I can put the .nqp extension under the Perl category

[14:04] <Mouq> My inclination is the latter

[14:04] <Mouq> *its

[14:05] <lizmat> what would be the advantage of having an own language category ?

[14:06] <Mouq> I believe it would then say project dd% NQP rather than dd% Perl

[14:07] <Mouq> But it would still be parsed with the Perl syntax highlighter they use.

[14:07] <lizmat> jnthn: the spectest says: is ([!==] ()), Bool::True, "[!==] () eq True";

[14:08] <jnthn> hmm

[14:09] <masak> lizmat: that is correct.

[14:09] <masak> let me explain.

[14:09] <masak> "innocent until proven guilty"

[14:09] <masak> you start by assuming all things are unequal, and then iterate until you find a case that disproves this.

[14:09] <masak> empty list; zero iterations.

[14:09] <masak> the truth holds.

[14:10] <lizmat> ok, so any bool reducing metaop with an empty list should return True

[14:10] <masak> you cannot argue "by consequence, [the opposite of [==]()] should be false" -- all [op]() where op is a comparison op are True.

[14:10] <masak> right.

[14:10] <masak> (I'm on a train -- slight lag) :)

[14:10] <lizmat> ok, just getting some clarity is good

[14:11] <masak> *nod*

[14:15] *** kaare__ joined
[14:16] *** mtk left
[14:17] *** fridim_ joined
[14:17] <dalek> roast: 817927f | (Elizabeth Mattijsen)++ | S03-operators/reduce-le1arg.t:

[14:17] <dalek> roast: Only skip the actually failing reducing metaops

[14:17] <dalek> roast: review: https://github.com/perl6/roast/commit/817927f031

[14:21] *** spider-mario left
[14:33] *** EvanTeitelman joined
[14:35] *** dhaivat joined
[14:38] *** mtk joined
[14:39] *** FROGGS joined
[14:42] <dalek> rakudo/nom: e3b73d8 | (Elizabeth Mattijsen)++ | src/core/metaops.pm:

[14:42] <dalek> rakudo/nom: Make many metaops with ! on empty lists return True

[14:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e3b73d8aed

[14:43] <dalek> roast: 9d26888 | (Elizabeth Mattijsen)++ | S03-operators/reduce-le1arg.t:

[14:43] <dalek> roast: Unfudge now passing metaops tests

[14:43] <dalek> roast: review: https://github.com/perl6/roast/commit/9d26888a4a

[14:43] *** bloonix left
[14:44] *** dhaivat_ joined
[14:44] <lizmat> r: [||] ()  # huh?

[14:44] <camelia> rakudo 6fb065:  ( no output )

[14:44] <lizmat> r: say [||] ()  # huh?

[14:44] <camelia> rakudo 6fb065: OUTPUT«False␤»

[14:44] <lizmat> shouldn't that be True?

[14:44] <masak> correct.

[14:44] <masak> no, False.

[14:44] <masak> || is not a comparison op.

[14:45] <masak> so the above rule doesn't hold.

[14:45] <masak> in the case of ||, we're looking for a True value.

[14:45] <masak> so the algorithm is "False until found True".

[14:45] <FROGGS> if [||] () would be True it could never be false

[14:46] <masak> well. "False until found truthy", to be exact.

[14:46] <lizmat> guilty until proven innocent  :-)

[14:47] <lizmat> but yeah, gotcha

[14:47] *** dhaivat left
[14:47] *** dhaivat_ is now known as dhaivat

[14:49] *** cognominal left
[14:50] *** cognominal joined
[14:54] *** denis_boyun left
[14:55] <lizmat> is && implemented in regexes ?

[14:55] *** domidumont joined
[14:55] <jnthn> I think && and & are currently synonyms

[14:56] <lizmat> trying to fix [!~~]

[14:57] <lizmat> apparently, it doesn't get an op passed

[14:57] <lizmat> : say [!~~] ()

[14:57] <lizmat> r: say [!~~] ()

[14:57] <camelia> rakudo 6fb065: OUTPUT«Nominal type check failed for parameter 'op'; expected Any but got Mu instead␤  in sub METAOP_REDUCE_CHAIN at src/gen/CORE.setting:15797␤  in block  at /tmp/ZHE_UjacTz:1␤␤»

[14:57] <lizmat> suspecting some kind of grammar issue

[14:58] *** domidumont left
[15:02] *** agre joined
[15:02] <lizmat> r: say True ~~ ()

[15:02] <camelia> rakudo 6fb065: OUTPUT«False␤»

[15:02] <lizmat> r: say () ~~ True

[15:02] <camelia> rakudo 6fb065: OUTPUT«Potential difficulties:␤    Smartmatch against True always matches; if you mean to test the topic for truthiness, use :so or *.so or ?* instead␤    at /tmp/xfL9dc1JM8:1␤    ------> say () ~~⏏ True␤True␤»

[15:03] *** PacoAir left
[15:05] <lizmat> r: try {() ~~ True; CATCH { say $! }}

[15:05] <camelia> rakudo 6fb065: OUTPUT«Potential difficulties:␤    Smartmatch against True always matches; if you mean to test the topic for truthiness, use :so or *.so or ?* instead␤    at /tmp/mEjQTvYNEV:1␤    ------> try {() ~~⏏ True; CATCH { say $! }}␤»

[15:06] *** dhaivat left
[15:10] *** PacoAir joined
[15:13] *** dhaivat joined
[15:18] <lizmat> n: say () ~~ True

[15:18] <camelia> niecza v24-92-g3961d5d: OUTPUT«True␤»

[15:18] <lizmat> r: say () ~~ True

[15:18] <camelia> rakudo e3b73d: OUTPUT«Potential difficulties:␤    Smartmatch against True always matches; if you mean to test the topic for truthiness, use :so or *.so or ?* instead␤    at /tmp/55F_Z0Jmb8:1␤    ------> say () ~~⏏ True␤True␤»

[15:18] <lizmat> It seems we not have a spectest for this case

[15:19] <lizmat> also, this behaviour does not seem to be specced

[15:20] <FROGGS> std: say () ~~ True

[15:20] <camelia> std 27326bc: OUTPUT«Potential difficulties:␤  Smartmatch against True always matches; perhaps you should use :so or *.so or ?* instead at /tmp/ynHp8z7Grq line 1:␤------> say () ~~⏏ True␤ok 00:00 44m␤»

[15:21] <lizmat> ah, yes

[15:21] <FROGGS> there is your spec *g*

[15:21] <lizmat> so I guess this should be specced then

[15:25] * jnthn thought that was in S03 somewhere...

[15:26] <dalek> specs: 3c81edd | (Elizabeth Mattijsen)++ | S05-regex.pod:

[15:26] <dalek> specs: Add paragraph about literally smartmatching True/False

[15:26] <dalek> specs: review: https://github.com/perl6/specs/commit/3c81eddad8

[15:27] <lizmat> jnthn: you mean this 

[15:27] <lizmat>     Any       True      ~~ True                 (parsewarn on literal token)

[15:27] <lizmat>     Any       False     ~~ False match          (parsewarn on literal token)

[15:27] <jnthn> Yes

[15:28] <lizmat> hmmm… that says "parsewarn" and not "parseerror"

[15:28] <jnthn> Both impls are warning?

[15:28] <jnthn> "Potential difficulties:" are warnings...note it outputs True at the end.

[15:29] <jnthn> And STD says ok

[15:29] *** ajr_ left
[15:29] <lizmat> ack

[15:30] *** ajr joined
[15:30] <dalek> specs: 7cc75e8 | (Elizabeth Mattijsen)++ | S05-regex.pod:

[15:30] <dalek> specs: Smartmatching True/False *is* mentioned in S03

[15:30] <dalek> specs: 

[15:30] <dalek> specs: This reverts commit 3c81eddad88114a5f7377d55e9685496d9b57491.

[15:30] <dalek> specs: review: https://github.com/perl6/specs/commit/7cc75e8c12

[15:30] *** ajr is now known as Guest43149

[15:30] *** PacoAir left
[15:31] *** Guest43149 is now known as ajr_

[15:31] <lizmat> hmmm…. can we test for warnings at compile time ?

[15:34] <dalek> roast: e64b224 | (Elizabeth Mattijsen)++ | S03-operators/reduce-le1arg.t:

[15:34] <dalek> roast: Missed that these metaops are passing now as well

[15:34] <dalek> roast: review: https://github.com/perl6/roast/commit/e64b224566

[15:38] <Mouq> r: 1.++()

[15:38] <camelia> rakudo e3b73d: OUTPUT«Cannot modify an immutable value␤  in sub postfix:<++> at src/gen/CORE.setting:4000␤  in sub postfix:<++> at src/gen/CORE.setting:2216␤  in block  at /tmp/Ipput8Jp1R:1␤␤»

[15:43] <lizmat> r: say my $a.++

[15:43] <camelia> rakudo e3b73d: OUTPUT«===SORRY!=== Error while compiling /tmp/DVVIqlpVEa␤Two terms in a row␤at /tmp/DVVIqlpVEa:1␤------> say my $a⏏.++␤    expecting any of:␤        scoped declarator␤        constraint␤        postfix␤        infix stopper␤        in…

[15:43] <lizmat> r: my $a; say $a.++

[15:43] <camelia> rakudo e3b73d: OUTPUT«0␤»

[15:44] <lizmat> r: my $a; say $a.++; say $a

[15:44] <camelia> rakudo e3b73d: OUTPUT«0␤1␤»

[15:45] <dalek> roast: 6f2280d | (Elizabeth Mattijsen)++ | S03-operators/reduce-le1arg.t:

[15:45] <dalek> roast: Giving up on [!~~] for now

[15:45] <dalek> roast: review: https://github.com/perl6/roast/commit/6f2280d1b3

[15:46] *** PacoAir joined
[15:48] *** thou joined
[15:50] <Mouq> r: my $a; $a.++.say

[15:50] <camelia> rakudo e3b73d: OUTPUT«0␤»

[15:51] *** denis_boyun joined
[15:52] <lizmat> still correct

[15:52] <jnthn> aye

[15:53] *** ggoebel left
[15:53] <Mouq> r: my $a; $a.:<++>.say # alas

[15:53] <camelia> rakudo e3b73d: OUTPUT«===SORRY!===␤No such method 'name' for invocant of type 'QAST::Want'␤»

[15:53] *** ggoebel joined
[15:58] <Mouq> r: my @l = ^10; @l».say; @l.».say # :(

[15:58] <camelia> rakudo e3b73d: OUTPUT«9␤7␤5␤3␤1␤8␤6␤4␤2␤0␤9␤7␤5␤3␤1␤8␤6␤4␤2␤0␤»

[15:58] <Mouq> r: my @l = ^10; @l.».say # Oh

[15:58] <camelia> rakudo e3b73d: OUTPUT«9␤7␤5␤3␤1␤8␤6␤4␤2␤0␤»

[15:59] <Mouq> Awesome

[15:59] <Mouq> r: (1, 4, 9).»++

[15:59] <camelia> rakudo e3b73d: OUTPUT«Cannot modify an immutable value␤  in sub postfix:<++> at src/gen/CORE.setting:4000␤  in sub postfix:<++> at src/gen/CORE.setting:2216␤  in sub hyper at src/gen/CORE.setting:15885␤  in sub hyper at src/gen/CORE.setting:15840␤  in sub METAOP_HYPER_POSTFIX at src/gen…

[16:00] <Mouq> r: (my @r = (1, 4, 9)).»++

[16:00] <camelia> rakudo e3b73d:  ( no output )

[16:03] <lizmat> TimToady: wrt to S06:2861: shouldn't that be "say TEMP next()' ?

[16:03] <synopsebot> Link: http://perlcabal.org/syn/S06.html#line_2861

[16:05] <lizmat> ah no, it's clear now, but still a bit confusing

[16:14] *** dhaivat left
[16:14] *** dhaivat joined
[16:21] *** kst`` joined
[16:21] *** zakharyas left
[16:23] *** PacoAir left
[16:23] *** PacoAir joined
[16:23] <dalek> rakudo/nom: 6fddda1 | (Elizabeth Mattijsen)++ | src/Perl6/Grammar.nqp:

[16:23] <dalek> rakudo/nom: Added TEMP block stub, so that we can make TEMP tests "todo" rather than "skip"

[16:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6fddda1fd2

[16:25] *** kst` left
[16:25] *** dhaivat_ joined
[16:28] *** dhaivat left
[16:28] *** dhaivat_ is now known as dhaivat

[16:29] *** denis_boyun left
[16:32] *** wtw left
[16:33] *** dhaivat left
[16:37] <felher> lizmat: regarding the rakudo/nqp internals workshop: Will there be any recordings, material, slides, ... ? I really would like to attend the workshop myself, since I'm from Germany, but my current heart condition probably doesn't allow me to travel.

[16:37] <lizmat> we're not planning on recording anything, but material and slides may come out of it

[16:37] <felher> lizmat: okay, nice. Thanks :)

[16:37] <lizmat> and hopefully, it won't be the last time the workshop is given

[16:38] <felher> lizmat: yeah, I truly hope that too :)

[16:38] <lizmat> is travel the only problem, or the intensity of 2 days in a workshop as well?

[16:38] <lizmat> if travel is the only pb, from where would you need to travel ?

[16:40] *** denisboyun joined
[16:40] <felher> lizmat: the intensity would be a problem too, yes. So even without travelling it might not be a good idea :)

[16:41] <lizmat> ok, otherwise we could have maybe fixed the travelling issue

[16:41] <felher> lizmat: thanks for trying anyway :)

[16:41] <lizmat> yw!

[16:43] <lizmat> r: my $a=42; say $$$$$$$$$$$$$$$$$$$$a   # huh?

[16:43] <camelia> rakudo e3b73d: OUTPUT«42␤»

[16:43] <masak> lizmat: generally, "huh?" does not count as a bug report, or even a call for explanation. :)

[16:43] <masak> lizmat: what do you observe, what did you expect to see?

[16:43] <lizmat> WAT?

[16:43] <lizmat> well, I'm looking at t/spec/S04-declarations/state.t

[16:44] <lizmat> where the test says it's returning a reference to a state var

[16:44] <lizmat> that in itself is weird, and seems outdated

[16:44] <lizmat> but the test also does $$a++

[16:44] <masak> o.O

[16:45] <lizmat> and doesn't complain about that at compile time

[16:45] <masak> that's Perl 5-think.

[16:45] <jnthn> $$$$$a is like $a.item.item.item.item

[16:45] <lizmat> perhaps

[16:45] <lizmat> aha…   indeed

[16:45] <lizmat> ok]

[16:45] <jnthn> And .item is just identify here I suspect :)

[16:45] *** wtw joined
[16:45] <lizmat> well, that test is suffering from Perl5 think

[16:45] <lizmat> # Return of a reference to a state() var

[16:46] <lizmat>         state $svar = 42;

[16:46] <lizmat>         \$svar;

[16:48] <lizmat> so, can you return a reference of a var out of a sub?

[16:48] <lizmat> my mind seems to have blanked out on that now

[16:49] <jnthn> Well, it'll just be a Capture I guess...

[16:50] <lizmat> starting to think all of those tests in t/spec/S04-declarations/state.t are bogus

[16:54] <dalek> roast: bf3ad8c | (Elizabeth Mattijsen)++ | S04-declarations/state.t:

[16:54] <dalek> roast: Removed bogus reference to state variable tests

[16:54] <dalek> roast: review: https://github.com/perl6/roast/commit/bf3ad8c144

[16:58] *** pmurias joined
[16:59] <pmurias> jnthn: how does nqp::callercode determin which blocks it skips?

[17:00] <pmurias> jnthn: QAST::Block's with :blocktype('immediate') are ignored by nqp::callercode?

[17:04] <jnthn> pmurias: Nope, just immediate caller.

[17:04] <jnthn> Nothing skipped

[17:14] <pmurias> jnthn: right

[17:15] <pmurias> jnthn: that means "my $caller;if 1 {$caller := nqp::callercode()}" and "if 1 {my $caller := nqp::callercode()}" work differently

[17:15] *** FROGGS[mobile] left
[17:19] <jnthn> pmurias: Right.

[17:20] <jnthn> pmurias: For the things its presently used for, it's fine with the current semantics (it's used directly in a sub)

[17:22] <pmurias> jnthn: the case I'm debugging is that it's called from !cursor_start_cur which is called from !INTERPOLATE and it's capturing the block used for an if statement

[17:23] <pmurias> all methods in NQPCursor

[17:23] *** raiph left
[17:24] *** ssutch joined
[17:25] <pmurias> jnthn: https://github.com/perl6/nqp/blob/master/src/QRegex/Cursor.nqp#L761

[17:27] <pmurias> jnthn: btw is convinient if I post github links to a particular source code line or should I use something else?

[17:29] <jnthn> That's convenient

[17:29] <jnthn> !INTERPOLATE can't be backtracked into, so I guess in the end it works out OK?

[17:30] <jnthn> It's not been an issue on other backends, at least...

[17:30] <jnthn> (will only be kinda here for the next while; cooking, but can drop by IRC a bit :))

[17:31] *** rindolf joined
[17:36] *** ajr_ left
[17:36] *** raiph joined
[17:39] <dalek> roast: 3bfca3a | (Elizabeth Mattijsen)++ | S04-phasers/in-eval.t:

[17:39] <dalek> roast: Bring tests back from bitrot since 2009

[17:39] <dalek> roast: review: https://github.com/perl6/roast/commit/3bfca3acaf

[17:40] <dalek> rakudo/nom: 53d1083 | (Elizabeth Mattijsen)++ | t/spectest.data:

[17:40] <dalek> rakudo/nom: Make t/spec/S04-phasers/in-eval.t part of the spectest

[17:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/53d1083b25

[17:42] <dalek> roast: 198b4c6 | (Elizabeth Mattijsen)++ | S0 (10 files):

[17:42] <dalek> roast: Various unfudges and skip->todo changes

[17:42] <dalek> roast: review: https://github.com/perl6/roast/commit/198b4c651d

[17:42] <lizmat> Lone Ranger&

[18:01] *** BenGoldberg joined
[18:20] *** btyler left
[18:31] <masak> amazing. not only does lizmat make all these commits all the time; when she goes offline, she's the Lone Ranger.

[18:32] *** Ulti left
[18:34] <moritz> std: trs/a/b/

[18:34] <camelia> std 27326bc: OUTPUT«===SORRY!===␤Bogus term at /tmp/JDRacHDt2j line 1 (EOF):␤------> trs/a/b/⏏<EOL>␤Undeclared routines:␤  'a' used at line 1␤     'b' used at line 1␤     'trs' used at line 1␤Parse failed␤FAILED 00:00 42m␤»

[18:34] <masak> 'trs'?

[18:35] <jnthn> .oO( translit stuff? )

[18:35] *** berekuk joined
[18:36] <geekosaur> trs/80? :p

[18:37] * masak .oO( trèz quatre-vingt )

[18:38] <GlitchMr> std: my int$num=42;my Str$str=~$num;say$str

[18:38] <camelia> std 27326bc: OUTPUT«===SORRY!===␤Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument at /tmp/f1OcXkJfim line 1:␤------> my int$num=42;my Str$str=~$num;say⏏$str␤Two terms in a row (listop w…

[18:38] <GlitchMr> Bare say? That isn't a real problem.

[18:38] *** mauke left
[18:38] <benabik> std: say(1)

[18:38] <camelia> std 27326bc: OUTPUT«ok 00:00 42m␤»

[18:38] <benabik> std: say 1

[18:38] <camelia> std 27326bc: OUTPUT«ok 00:00 42m␤»

[18:38] <GlitchMr> std: my int$num=42;my Str$str=~$num;say $str

[18:38] <masak> GlitchMr: you'll note you also got TTIAR.

[18:39] <camelia> std 27326bc: OUTPUT«ok 00:00 43m␤»

[18:39] <GlitchMr> std: my int$num=42;my Str$str;$str=~$num;say $str

[18:39] <camelia> std 27326bc: OUTPUT«===SORRY!===␤Unsupported use of =~ to do pattern matching; in Perl 6 please use ~~ at /tmp/D9Hukln_ut line 1:␤------> my int$num=42;my Str$str;$str=~⏏$num;say $str␤Parse failed␤FAILED 00:00 43m␤»

[18:39] <masak> GlitchMr: so yes, the warning is bogus, but there's also an error in there.

[18:39] <GlitchMr> So, =~ is fine with declarations, but it isn't with standard assignments.

[18:40] <masak> wfm.

[18:40] <masak> why would you ever want to pattern match on a variable you just declared?

[18:41] <GlitchMr> Good question.

[18:41] <GlitchMr> std: my $val = "abc"; $val =~= /def/

[18:41] <camelia> std 27326bc: OUTPUT«===SORRY!===␤Unsupported use of =~ to do pattern matching; in Perl 6 please use ~~ at /tmp/qTZiBQHo9Y line 1:␤------> my $val = "abc"; $val =~⏏= /def/␤Parse failed␤FAILED 00:00 43m␤»

[18:42] <GlitchMr> Perl 5 doesn't have =~= operator.

[18:42] <masak> GlitchMr: neither does Perl 6.

[18:43] <moritz> masak: the rakudo grammar for tr/// allows a trailing 's', so I wanted to see if it's in STD too

[18:43] <moritz> r: trs/a/b/

[18:43] <camelia> rakudo 53d108: OUTPUT«===SORRY!=== Error while compiling /tmp/6heUMIkMmt␤tr/// not yet implemented. Sorry. ␤at /tmp/6heUMIkMmt:1␤------> trs/a/b/⏏<EOL>␤»

[18:44] <GlitchMr> What does trs mean?

[18:45] <moritz> nothing.

[18:45] <moritz> r: say Pair.new('a', 'b')

[18:45] <camelia> rakudo 53d108: OUTPUT«Too many positional parameters passed; got 3 but expected 1␤  in method new at src/gen/CORE.setting:7965␤  in block  at /tmp/7KP2vbbTgk:1␤␤»

[18:45] <masak> moritz: any clues as to why in the commit that added 'trs'?

[18:45] *** kaare_ joined
[18:47] <moritz> masak: presumably it was cargo-culted over from s///, which does allow a ss/// form

[18:48] <moritz> I'll remove it soonish

[18:48] <moritz> (I also hope to give tr/// some semantics too)

[18:48] *** itz_ joined
[18:48] *** kaare__ left
[18:50] <masak> oh!

[18:50] <masak> cargo-culting would explain it.

[18:50] *** itz left
[18:52] <moritz> and I missed it while reviewing the pull request.

[18:55] *** shinobicl_ joined
[18:57] <dalek> perl6-roast-data: 79b1e4a | coke++ | / (5 files):

[18:57] <dalek> perl6-roast-data: today (automated commit)

[18:57] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/79b1e4a6f3

[18:57] <dalek> perl6-roast-data: 5f5f6b5 | coke++ | / (5 files):

[18:57] <dalek> perl6-roast-data: today (automated commit)

[18:57] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/5f5f6b5397

[19:02] *** zakharyas joined
[19:04] *** colomon left
[19:05] *** rindolf left
[19:07] *** dmol joined
[19:33] <masak> r: say "foo bar" ~~ ms/foo bar/

[19:33] <camelia> rakudo 53d108: OUTPUT«｢foo bar｣␤␤»

[19:38] *** zakharyas left
[19:41] *** shinobicl_ left
[19:42] *** _ilbot left
[19:44] *** _ilbot joined
[19:46] *** EvanTeitelman left
[19:48] *** adu joined
[19:49] <pmurias> jnthn: it's not something that I can't workaround (by making nqp::callercode returning null it this case), but something that seemed strange enough to ask about

[20:04] *** kaare_ left
[20:11] *** EvanTeitelman joined
[20:14] *** agre left
[20:21] <dalek> rakudo/nom: 152a539 | moritz++ | src/Perl6/ (2 files):

[20:21] <dalek> rakudo/nom: wire up tr/// to .trans

[20:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/152a5398f9

[20:21] <dalek> rakudo/nom: 5aeaca0 | moritz++ | src/Perl6/Actions.nqp:

[20:21] <dalek> rakudo/nom: NYI error for tr/// adverbs

[20:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5aeaca0c2b

[20:24] *** denisboyun left
[20:31] *** iSlug joined
[20:34] <masak> rn: for "o thanks", 3, "its so much easier to write now", 7 -> $_, $n { say .uc, "!" x $n } # http://bash.org/?835030

[20:34] <camelia> rakudo 53d108, niecza v24-92-g3961d5d: OUTPUT«O THANKS!!!␤ITS SO MUCH EASIER TO WRITE NOW!!!!!!!␤»

[20:45] *** xenoterracide joined
[20:50] *** adu left
[20:50] *** itz joined
[20:52] *** itz_ left
[20:58] *** berekuk left
[21:00] *** shinobicl_ joined
[21:00] *** berekuk joined
[21:01] *** iSlug left
[21:08] * lizmat and Tonto are back

[21:09] * woolfy is not as crazy as Tonto

[21:09] <lizmat> true

[21:13] * masak .oO( non tanto folle come Tonto )

[21:13] <masak> dammit, there are too many languages in my skull... :P

[21:14] <lizmat> ah, maar nederlands is daar gelukkig niet een van

[21:14] <masak> no, fortunately :)

[21:14] <masak> but I've been considering taking it up.

[21:15] <lizmat> what, and get a sore throat ?  :-)

[21:15] <masak> ...I live in Skåne.

[21:15] <masak> too late for such concerns.

[21:15] <timotimo> what caused the rakudo.jvm pass rate to drop to 0?

[21:15] <masak> timotimo: Oracle finally started charging for the JVM? :P

[21:17] <lizmat> on the brighter side: +62 tests passing on parakudo

[21:17] <jnthn> Probably somebody commiting lots of stuff and never testing it doesn't break JVM? :)

[21:18] * jnthn wishes we had automated smoking of each commit

[21:18] <jnthn> On all the backends

[21:18] <tadzik> you wish. You commit too fast

[21:18] <jnthn> It's the only sustainable way in the long run :)

[21:18] <jnthn> tadzik: Yes but not 24/7! :D

[21:18] <tadzik> yeah, right ;)

[21:18] *** raiph left
[21:19] <lizmat> could it be the TEMP block stub I added ?

[21:19] <jnthn> lizmat: It's hard to guess.

[21:19] <jnthn> Maybe if I read the commits I could...

[21:19] <lizmat> NQP revision bump ?

[21:19] <jnthn> But been debugging Moar stuff today, and preparing teaching...

[21:20] <lizmat> "less syntactic sugar for TypedHash/Array"

[21:21] <lizmat> ah, but that was Friday, so that would have been caught by yesterday's run

[21:23] <lizmat> t/spec/S03-binding/hashes.t failing now with HEA

[21:23] <lizmat> D

[21:25] <lizmat> weird, if I run it with perl6, it generates the correct output for all 38 tests

[21:25] <lizmat> $ make t/spec/S03-binding/hashes.t

[21:25] <lizmat> t/spec/S03-binding/hashes.t .. No subtests run 

[21:25] <lizmat> Test Summary Report

[21:25] <lizmat> -------------------

[21:25] <lizmat> t/spec/S03-binding/hashes.t (Wstat: 11 Tests: 0 Failed: 0)

[21:25] <lizmat>   Non-zero wait status: 11

[21:25] <tadzik> fudging?

[21:25] <tadzik> oh, no

[21:26] <lizmat> no rakudo fudges

[21:27] <lizmat> jnthn: "wishes we had automated smoking of each commit"  that's called Jenkins, no?

[21:29] <jnthn> lizmat: Well, could do it with that, yes.

[21:29] <jnthn> r: say :16(182)

[21:29] <camelia> rakudo 5aeaca: OUTPUT«Nominal type check failed for parameter '$str'; expected Str but got Int instead␤  in sub unbase at src/gen/CORE.setting:6179␤  in block  at /tmp/5enSo2fZ6P:1␤␤»

[21:30] <jnthn> r: say 182.base(16)

[21:30] <camelia> rakudo 5aeaca: OUTPUT«B6␤»

[21:30] <jnthn> aha

[21:31] *** bruges left
[21:33] *** bruges joined
[21:34] *** denis_boyun joined
[21:34] *** denis_boyun left
[21:37] *** fridim_ left
[21:42] <pmurias> jnthn: re smoking on all backends for every commit, something like that would be great for nqp

[21:43] <jnthn> pmurias: That also

[21:45] <jnthn> NQP is at 2 backends in the repo ATM, but with the third and forth already in sight...

[21:52] *** BenGoldberg left
[22:05] <dalek> roast: aa9255d | (Elizabeth Mattijsen)++ | S0 (6 files):

[22:05] <dalek> roast: Some more unfudges and skip->todo changes

[22:05] <dalek> roast: review: https://github.com/perl6/roast/commit/aa9255db30

[22:06] <lizmat> gnight, #perl6!

[22:06] <masak> 'night, lizmat 

[22:06] <masak> 'night, #perl6

[22:07] *** fridim_ joined
[22:09] *** xinming_ left
[22:11] *** xinming joined
[22:16] *** shinobicl_ left
[22:16] *** PacoAir left
[22:30] *** Rotwang left
[22:34] *** xenoterracide left
[22:41] <jnthn> 'night, #perl6

[22:51] *** xenoterracide joined
[22:53] *** iglee joined
[22:57] *** dmol left
[23:13] *** jferrero left
[23:13] *** sivoais left
[23:13] *** jferrero joined
[23:13] *** sivoais joined
[23:26] *** pmurias left
[23:29] *** dayangkun left
[23:38] *** iglee left
[23:45] *** xenoterracide left
[23:57] *** shinobicl_ joined
[23:58] <[Coke]> jenkins++ or something like it++

