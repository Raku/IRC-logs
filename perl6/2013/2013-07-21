[00:03] *** lue left
[00:15] *** lue joined
[00:29] <TimToady> .tell lizmat These days Nil is considered the best way to indicate "missing information"

[00:29] <yoleaux> TimToady: I'll pass your message to lizmat.

[00:30] *** raiph joined
[00:31] <dalek> perl6-roast-data: c0eca35 | coke++ | / (5 files):

[00:31] <dalek> perl6-roast-data: today (automated commit)

[00:31] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/c0eca3509f

[00:31] <[Coke]> rakudo.parrot failing 62 tests (2nd day running)

[00:33] *** SmokeMachine joined
[00:35] <[Coke]> can't get the test that's abort to abort when running it by hand

[00:35] *** zacts joined
[00:36] <zacts> can rakudo also implement scheme or haskell?

[00:36] <TimToady> .tell jnthn If the two sides are semantically different (utf8 vs buf8), it should fail; if they're merely unit-sized differently (blob8 vs blob16) ops like ~ still fail but integer-based ops like ~& are allowed ot upgrade both sides to 16 bits

[00:36] <yoleaux> TimToady: I'll pass your message to jnthn.

[00:36] <zacts> and if so, could you combine scheme/haskell with perl6?

[00:37] <[Coke]> zacts: it's plausible, sure.

[00:37] <TimToady> zacts: anything is possible, but I sincerely doubt you'll find anyone willing to implement Haskell on top of Perl 6

[00:37] <TimToady> Scheme maybe

[00:37] <[Coke]> (note that if you want to run perl6 on haskell, there's also pugs, though it's showing its age.)

[00:37] <zacts> ah, ok cool

[00:37] <[Coke]> TimToady: I got the impression he was saying it the other way 'round.

[00:37] <zacts> well, pugs is also interesting, but yeah

[00:38] <zacts> well, even scheme would be cool.

[00:38] <TimToady> there are certainly other ways of running two languages together than implementing one in terms of the other

[00:39] <zacts> TimToady: no I don't mean implementing haskell or scheme with the perl6 language

[00:39] <zacts> I guess I my understanding was that parrot could also implement other languages

[00:39] <TimToady> well, rakudo is perl6, so your first question more or less asked that

[00:39] <zacts> sorry I typed my question wrong

[00:39] <zacts> s/rakudo/parrot/

[00:40] <TimToady> ah, well, that's a bird of a different color

[00:40] <zacts> hehe punny

[00:41] <TimToady> certainly the intent was to allow the implementation of many dynamic languages on top of parrot, but the vision exceeded the reality in a number of respects

[00:43] <zacts> ok, interesting

[00:53] <TimToady> there is always this danger with bottom-up design that you will analyze the problem into the wrong abstractions for your eventual users, especially when you're not sure who your users are going to be

[00:54] <TimToady> it's a vast oversimplification to say that that is what happened with parrot, of course, but there's some truth there

[00:55] <TimToady> from the parrort perspective, it didn't help that their users didn't really know what they wanted at the beginning either :)

[00:57] *** benabik joined
[00:58] *** BenGoldberg left
[01:00] <zacts> TimToady: do you think that parrot will be successful for perl6 nonetheless?

[01:01] <TimToady> there are many definitions of "success"

[01:01] <TimToady> by some of them, it has already succeeded

[01:01] <TimToady> by others, it probably never will

[01:02] <zacts> hehe ok

[01:02] <TimToady> unless parrot can redefine itself to be the VM of choice for at least one popular language

[01:03] <perigrin> and define "popular" in a way that people agree with it

[01:03] <perigrin> well a majority of people agree with it.

[01:04] <[Coke]> Certainly it's been critical for getting rakudo to where it is today.

[01:04] <TimToady> doesn't even have to be a majority, as long as enough employers are willing to hire

[01:04] <TimToady> [Coke]: yes, in that respect it was a big success

[01:04] <zacts> so why didn't pugs evolve further?

[01:05] <zacts> was it too slow?

[01:05] <zacts> was it a prototype?

[01:05] <TimToady> no champion

[01:05] <TimToady> well, most people don't set out to write a prototype :)

[01:05] <zacts> ok

[01:05] <geekosaur> pugs was pretty much a one-person project. that person got ill and nobody else has been able to decipher the code :)

[01:05] <TimToady> but everything is a prototype for what comes after :)

[01:06] <geekosaur> (several of us have tried...)

[01:06] <zacts> I see

[01:06] <perigrin> geekosaur: if it were anybody but Audrey you were talking about I'd argue that point 

[01:07] <zacts> so in general would you say that parrot is more well designed than the internals of perl5?

[01:07] <zacts> I've heard that perl5 source code is nutty to read..

[01:07] *** BenGoldberg joined
[01:07] <TimToady> oddly, rakudo on parrot has a similar problem, but instead of things being hidden in the abstractions, they're hidden in a very large codebase, with many operations that interact mysteriously with each other

[01:08] <TimToady> zacts: s/ to read//

[01:08] * geekosaur shrugs

[01:09] <geekosaur> I don't claim to be a Haskell expert. I do well enough with xmonad, but that;s about 5% Haskell and 95% X11 and I'm fine with the latter :)

[01:09] <TimToady> zacts: the perl5 source code was successful insofar as it was the preferred VM for a popular language :)

[01:09] <perigrin> TimToady: s/ source code//; # probably fair too.

[01:09] <geekosaur> it's not difficult to confuse me with complex Haskell code

[01:10] <geekosaur> and I seem to be one of the better Haskell folks here, which leaves us kinda stuck with respect to pugs

[01:10] <perigrin> geekosaur: I do pretty well with Perl and Audrey can lose me quickly there.

[01:10] <geekosaur> every so often I trawl in #haskell to see if anyone is interested in helping out, sadly no bites as yet

[01:12] <zacts> so was the person who initially designed pugs a mad genius?

[01:12] <TimToady> well, pugs was a brilliant hack, but haskell programmers tend not to think of themselves as hackers...

[01:13] <TimToady> zacts: everyone here is a mad genius in their own way :)

[01:13] <zacts> :-)

[01:13] <zacts> TimToady: and you are a mad genius in multiple ways timtoady.

[01:14] <zacts> as your nick seems to imply

[01:14] <TimToady> yes, well, sometimes madness is its own reward...

[01:15] <zacts> :D

[01:15] <perigrin> "We're all mad here. I'm mad, you're mad ... "

[01:17] <colomon> That passage is one of my little boy's favorite passages.  He likes to play Luke Skywalker (him) and the Chessire Cat (me).

[01:18] <colomon> ack, spelling

[01:18] <[Coke]> what is the set version of this:

[01:18] <[Coke]> r: say 16 - (1|2|3|4);

[01:18] <camelia> rakudo 4a977d: OUTPUT¬´any(15, 14, 13, 12)‚ê§¬ª

[01:18] <perigrin> colomon: my daughter was (recently) reading it to my son.

[01:19] <[Coke]> r: say 16 >>-<< set<1 2 3 4>;

[01:19] <camelia> rakudo 4a977d: OUTPUT¬´Lists on both side of non-dwimmy hyperop of infix:<-> are not of the same length‚ê§left: 1 elements, right: 4 elements‚ê§  in sub hyper at src/gen/CORE.setting:14608‚ê§  in sub hyper at src/gen/CORE.setting:14596‚ê§  in block  at src/gen/CORE.setting:14587‚ê§  in block  at /‚Ä¶

[01:19] <[Coke]> r: say 16 <<-<< set<1 2 3 4>;

[01:19] <camelia> rakudo 4a977d: OUTPUT¬´16 16 16 16‚ê§¬ª

[01:19] <colomon> [Coke]: there isn't really a set version of that

[01:20] <TimToady> r: say set 16 X- 1,2,3,4;

[01:20] <camelia> rakudo 4a977d: OUTPUT¬´set(15, 14, 13, 12)‚ê§¬ª

[01:20] <TimToady> that's about as close as you can get

[01:20] <TimToady> but sets don't know how to subtract members

[01:20] <TimToady> *subtract from

[01:22] <TimToady> n: say 16 <<-<< set<1 2 3 4>;  # this may tell you more what happened here

[01:22] <camelia> niecza v24-88-g1f87209: OUTPUT¬´16 16 16 16‚ê§¬ª

[01:23] <TimToady> or not :)

[01:23] <TimToady> std: say 16 <<-<< set<1 2 3 4>;  # this may tell you more what happened here

[01:23] <camelia> std c2215f0: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§The 'set' listop may not be called without arguments (please use () or whitespace to clarify) at /tmp/LNdRh_dm6U line 1:‚ê§------> [32msay 16 <<-<< set[33m‚èè[31m<1 2 3 4>;  # this may tell you more wha[0m‚ê§Potential difficulties:‚ê§  Use ‚Ä¶

[01:23] <TimToady> r: say set<1>.WHAT

[01:23] <camelia> rakudo 4a977d: OUTPUT¬´(Bool)‚ê§¬ª

[01:24] <TimToady> r: say set<1>

[01:24] <camelia> rakudo 4a977d: OUTPUT¬´False‚ê§¬ª

[01:24] <TimToady> basically, that means set()<1>

[01:25] <TimToady> which is why std disallows it

[01:25] <TimToady> r: say 16 <<-<< set <1 2 3 4>;

[01:25] <camelia> rakudo 4a977d: OUTPUT¬´("1" => 15, "2" => 15, "3" => 15, "4" => 15).hash‚ê§¬ª

[01:26] <[Coke]> r: say (18 X- 3,5).sort.uniq.grep({*<7})

[01:26] <camelia> rakudo 4a977d: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Whitespace required before < operator‚ê§at /tmp/cLE4PGHNP0:1‚ê§------> [32msay (18 X- 3,5).sort.uniq.grep({*<7})[33m‚èè[31m<EOL>[0m‚ê§    expecting any of:‚ê§        postfix‚ê§¬ª

[01:26] <colomon> it's taking the set as a hash?

[01:26] <TimToady> there's that darn hash subscripting again :)

[01:27] <TimToady> colomon: seems like

[01:27] <[Coke]> r: say (18 X- 3,5).sort.uniq.grep: {*<7}

[01:27] <camelia> rakudo 4a977d: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Whitespace required before < operator‚ê§at /tmp/a2We8BzwMa:1‚ê§------> [32msay (18 X- 3,5).sort.uniq.grep: {*<7}[33m‚èè[31m<EOL>[0m‚ê§    expecting any of:‚ê§        postfix‚ê§¬ª

[01:27] <TimToady> when all else fails, read the error message

[01:27] <colomon> TimToady: that's quite unfortunate in this case

[01:28] <TimToady> r: say 16 <<-<< set(<1 2 3 4>).list;

[01:28] <camelia> rakudo 4a977d: OUTPUT¬´15 14 13 12‚ê§¬ª

[01:28] <TimToady> it seems unfortunate that hyper would choose the hash nature over the list nature in this case, yes

[01:29] <TimToady> seems to violate the notion that hyper is based on Iterability, and that's more of a list concept than a hash concept

[01:30] <[Coke]> rakudo.jvm's REPL gets very upset about that missing whitespace. goes into an infinite loop complaining.

[01:31] <TimToady> r: my &fromx = 16 - *; say set(<1 2 3 4>)¬ª.from16

[01:31] <camelia> rakudo 4a977d: OUTPUT¬´No such method 'from16' for invocant of type 'Bool'‚ê§  in method dispatch:<hyper> at src/gen/CORE.setting:1119‚ê§  in block  at /tmp/4z88Jv0TUQ:1‚ê§‚ê§¬ª

[01:31] <TimToady> r: my &fromx = 16 - *; say set(<1 2 3 4>)¬ª.&from16

[01:31] <camelia> rakudo 4a977d: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared name:‚ê§    &from16 used at line 1. Did you mean '&fromx'?‚ê§‚ê§¬ª

[01:31] <TimToady> r: my &from16 = 16 - *; say set(<1 2 3 4>)¬ª.&from16

[01:31] <camelia> rakudo 4a977d: OUTPUT¬´("1" => 15, "2" => 15, "3" => 15, "4" => 15).hash‚ê§¬ª

[01:31] <TimToady> still seems buggy

[01:32] <colomon> is hyper supposed to work on hash keys or values?

[01:33] <TimToady> for an ordinary hash, the values

[01:33] <colomon> until we spec a better way, that's what's happening here

[01:34] <TimToady> r: my &from16 = 16 - *; say { :a(1), :b(2), :c(3), :d(4) }¬ª.&from16

[01:34] <camelia> rakudo 4a977d: OUTPUT¬´("a" => 15, "b" => 14, "c" => 13, "d" => 12).hash‚ê§¬ª

[01:34] <TimToady> like that

[01:34] <TimToady> 16 - True, yeah

[01:34] <colomon> r: my &from16 = 16 - *; say { :a(True), :b(True), :c(True), d:(True)) }¬ª.&from16

[01:34] <camelia> rakudo 4a977d: OUTPUT¬´===SORRY!===‚ê§No such method 'has_compile_time_value' for invocant of type 'NQPMu'‚ê§¬ª

[01:35] <colomon> r: my &from16 = 16 - *; say { :a(True), :b(True), :c(True), d:(True) }¬ª.&from16

[01:35] <camelia> rakudo 4a977d: OUTPUT¬´===SORRY!===‚ê§No such method 'has_compile_time_value' for invocant of type 'NQPMu'‚ê§¬ª

[01:35] <TimToady> d:

[01:35] <TimToady> interesting failure though

[01:35] <TimToady> r: foo:(42)

[01:35] <camelia> rakudo 4a977d: OUTPUT¬´===SORRY!===‚ê§No such method 'has_compile_time_value' for invocant of type 'NQPMu'‚ê§¬ª

[01:36] <colomon> r: my &from16 = 16 - *; say { :a(True), :b(True), :c(True), :d(True) }¬ª.&from16

[01:36] <camelia> rakudo 4a977d: OUTPUT¬´("a" => 15, "b" => 15, "c" => 15, "d" => 15).hash‚ê§¬ª

[01:38] <TimToady> nr: for set(<a b c>) { .WHAT.say }

[01:38] <camelia> niecza v24-88-g1f87209: OUTPUT¬´(Set)‚ê§¬ª

[01:38] <camelia> ..rakudo 4a977d: OUTPUT¬´(Str)‚ê§(Str)‚ê§(Str)‚ê§¬ª

[01:40] <TimToady> nr: for set(<a b c>) ¬ª~¬ª 'x'{ .WHAT.say }

[01:40] <camelia> rakudo 4a977d: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Missing block‚ê§at /tmp/dP2CAaSTH0:1‚ê§------> [32mfor set(<a b c>) ¬ª~¬ª 'x'{ .WHAT.say }[33m‚èè[31m<EOL>[0m‚ê§    expecting any of:‚ê§        method arguments‚ê§        postfix‚ê§        statement end‚ê§        statement modifier‚ê§        statemen‚Ä¶

[01:40] <camelia> ..niecza v24-88-g1f87209: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Missing block at /tmp/Ku0mvx1lqR line 1 (EOF):‚ê§------> [32mfor set(<a b c>) ¬ª~¬ª 'x'{ .WHAT.say }[33m‚èè[31m<EOL>[0m‚ê§‚ê§Parse failed‚ê§‚ê§¬ª

[01:40] <TimToady> nr: for set(<a b c>) ¬ª~¬ª 'x' { .WHAT.say }

[01:40] <camelia> rakudo 4a977d: OUTPUT¬´(Pair)‚ê§(Pair)‚ê§(Pair)‚ê§¬ª

[01:40] <camelia> ..niecza v24-88-g1f87209: OUTPUT¬´(Str)‚ê§¬ª

[01:40] <TimToady> nr: for set(<a b c>) X~ 'x' { .WHAT.say }

[01:41] <camelia> niecza v24-88-g1f87209: OUTPUT¬´(Str)‚ê§¬ª

[01:41] <camelia> ..rakudo 4a977d: OUTPUT¬´(Str)‚ê§(Str)‚ê§(Str)‚ê§¬ª

[01:41] <diakopter> heh

[01:41] <TimToady> there is a bit of...variability...

[01:41] <diakopter> which magnifying glass are we focusing on camelia today

[01:42] <TimToady> the one of "what does it mean to iterate a set?"

[01:43] <TimToady> seems hypers disagree with lists on that subject, and niecza disagrees with rakudo

[01:44] <TimToady> n: say set(<a b c>) X~ 'x'

[01:44] <camelia> niecza v24-88-g1f87209: OUTPUT¬´a b cx‚ê§¬ª

[01:44] <zacts> TimToady: does pugs support tail recursion of subroutine calls?

[01:44] <TimToady> n: say set(<a b c>)[] X~ 'x'

[01:44] <camelia> niecza v24-88-g1f87209: OUTPUT¬´ax bx cx‚ê§¬ª

[01:45] <TimToady> zacts: well, of course, but I don't know if it does the corresponding optimization :)

[01:45] *** raiph left
[01:45] <zacts> yeah, I mean does it optimize?

[01:45] <zacts> so, probably not..

[01:46] <TimToady> I didn't say that...

[01:46] <TimToady> I said I dunno

[01:46] <zacts> ok

[01:46] * TimToady is not enough of a solipsist to assume that if he doesn't know something, it doesn't exist...

[01:47] <diakopter> I didn't think that existed

[01:47] <TimToady> well, there are ways to test that...

[01:48] <TimToady> though camelia may timeout before you can tell the difference

[01:48] <diakopter> the universe may cycle a few googolplex times

[01:49] <diakopter> .seen japhb

[01:49] <yoleaux> I saw japhb 13 Jun 2013 16:24Z in #perl6: <japhb> diakopter, pong

[01:49] <diakopter> !

[01:49] <TimToady> oddly, modern FP thinking is moving away from defining everything in terms of recursion over a list

[01:50] <diakopter> soon computers will have more cores than instructions any one program could ever run

[01:50] <TimToady> recursion implies sequentiality that is not desirable in parallel computations

[01:52] <TimToady> So languages that optimize for tail recursion are, as it were, barking down the wrong (branch of) the tree.

[01:52] <diakopter> "do you have the latest exacore?" "no, a prototype zottacore.."

[01:53] <diakopter> er.

[01:53] <diakopter> zetta

[01:53] <diakopter> zetta, yotta, who can tell the difference?

[01:53] <TimToady> s['of) the'] = 'of the)'

[01:54] <TimToady> yoda the diffence tell can!

[01:54] <TimToady> *difference

[01:54] <TimToady> or you could ask a Difference Engine

[01:55] <zacts> TimToady: interesting

[01:55] <zacts> so, what programming styles lend well to parallel programming?

[01:59] <TimToady> depends on the kind of parallelism

[02:00] *** skids joined
[02:00] <TimToady> pipelines, MIMD, SIMD, mapreduce...

[02:00] <zacts> so SICP stuff, but without focusing so much on recursion?

[02:00] <zacts> mapreduce makes me think *SICP* for some reason

[02:00] <zacts> I'm going to be starting that book

[02:01] *** raiph joined
[02:01] <zacts> not to start a long discussion about this..

[02:01] <TimToady> mapreduce mostly makes me think of Google :)

[02:02] <TimToady> grid parallelism is yet another style

[02:03] <TimToady> hierarchical parallel relationships...

[02:03] <zacts> interesting

[02:03] <TimToady> parallelism where everything depends on everything else (the hardest kind)

[02:03] <zacts> so is perl6 being designed a lot with parallel computing in mind?

[02:03] <TimToady> certainly, for some defininition of "in mind"

[02:04] <TimToady> ==> feeds are pipelines, hypers are SIMD, race context (we hope) can do mapreducey stuff

[02:04] <TimToady> MIMD is just basic threads

[02:05] <TimToady> everthing depending on everything else is probably a complete message-sending crossbar of some sort

[02:05] <zacts> like an async message passing system?

[02:06] <TimToady> yes

[02:06] <TimToady> that also fits better into NUMA systems

[02:06] <TimToady> hypers are good for feeding vectors through your GPU (or your Cray:)

[02:07] <zacts> Cray is the supercomputer right?

[02:07] <TimToady> gather/take is good for demand-driven pipelining

[02:08] <TimToady> yes, I'm thinking of the original Crays in terms of their built-in vector processing

[02:08] <TimToady> really just a form of pipelining, but it did speed up SIMD calculations on vectors by more than an order of magnitude

[02:09] <TimToady> 14 times, if recall

[02:09] <zacts> ah ok

[02:09] <TimToady> or maybe that was just how many stages there were in the pipeline...

[02:09] * diakopter imagines aliens using base 900, "... by more than an order of magnitude!" "ZOMG"

[02:09] <zacts> interesting stuff

[02:10] <TimToady> diakopter: that's very nearly "but what's three orders of magnitude among friends?"

[02:10] <zacts> will perl6 be easy to install even if you don't know perl? for example, I write an irc client in perl. my users don't know how to install perl modules.

[02:13] <TimToady> zacts: that also is one of our goals

[02:13] <TimToady> but then, we've got lots and lots of goals...

[02:13] <diakopter> the penalty kickoff is in its eleventyeth round

[02:13] <zacts> ok, cool. well gtg.

[02:14] <TimToady> zacts: it may well depend on which VM you want to run your irc client on...

[02:14] <TimToady> nice talkin'

[02:49] *** orafu joined
[02:52] *** benabik left
[03:10] <sorear> o/

[03:13] <TimToady> \o

[03:18] *** arlinius left
[03:30] *** BenGoldberg left
[04:02] *** arlinius joined
[04:24] *** benabik joined
[04:28] *** Psyche^_ joined
[04:43] *** Guest65022 joined
[04:44] <Guest65022> hi all

[04:45] <Guest65022> eloooooo

[04:45] <diakopter> hi

[04:45] *** Guest65022 left
[04:45] <diakopter> ima troll biscuit

[05:04] *** xilo left
[05:39] *** kaare__ joined
[05:40] *** risou_awy is now known as risou

[05:44] *** domidumont joined
[05:48] *** spider-mario joined
[05:52] *** risou is now known as risou_awy

[06:04] *** domidumont left
[06:04] *** domidumont joined
[06:05] *** zby_home joined
[06:05] <zacts> so perl6 will also be a compiled language?

[06:06] <zacts> if you want that?

[06:07] <zacts> I would love to be able to compile perl programs, and distribute binaries. mainly so perl newbies don't have to install a lot of perl stuff to run my program.

[06:14] *** fridim__ left
[06:19] <sorear> yeah, we're pretty big on supporting precompilation here

[06:23] <zacts> neato

[06:33] <sorear> admittedly it's largely out of necessity

[06:34] *** raiph left
[06:49] <avuserow> zacts: if you're interested in parallelism, have you taken a look at languages like Rust, Go, or Erlang?

[06:49] <avuserow> they certainly have some interesting ideas about what the future there might be

[06:49] *** spider-mario left
[06:50] <zacts> avuserow: no, I'll check those out. I've never heard of rust, but I have heard of go and erlang.

[06:50] <zacts> but, right now I'm focusing on perl5 and scheme

[06:50] <zacts> i'm just curious as to what is out there.. neat

[06:51] <avuserow> yeah rust is a newcomer that I'm interested in. By the mozilla folks. My take-away is that it's a C-style functional language that's good for systems and parallel programming

[06:52] <zacts> interesting

[06:54] *** spider-mario joined
[07:43] *** domidumont left
[07:46] *** zacts left
[07:56] *** risou_awy is now known as risou

[08:05] <dalek> rakudo/nom: 364e2a3 | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[08:05] <dalek> rakudo/nom: Make .infinite return Nil rather than Bool/Mu when it doesn't know

[08:05] <dalek> rakudo/nom: 

[08:05] <dalek> rakudo/nom: <TimToady> .tell lizmat These days Nil is considered the best way to indicate "missing information"

[08:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/364e2a39b8

[08:07] <lizmat> good *, #perl6!

[08:07] <yoleaux> 00:29Z <TimToady> lizmat: These days Nil is considered the best way to indicate "missing information"

[08:07] <lizmat> :-)

[08:09] *** risou is now known as risou_awy

[08:13] *** pupoque joined
[08:15] *** rindolf joined
[08:23] *** lue left
[08:37] *** lue joined
[08:47] *** berekuk_ left
[08:48] *** berekuk joined
[09:01] * lizmat wonders whether "report_innevitable_dispatch_failure" is misspelt deliberately  

[09:04] *** zacts joined
[09:23] <jnthn> lizmat: no :P

[09:23] <yoleaux> 20 Jul 2013 23:35Z <lizmat> jnthn: it feels to me that in some cases List.infinite is being called on a Iterable object

[09:23] <yoleaux> 20 Jul 2013 23:36Z <lizmat> jnthn: when judging by the code, it should call Iterablle.infinite

[09:23] <yoleaux> 20 Jul 2013 23:36Z <lizmat> jnthn: could this have to do with the fact that Iterable.infinite returns Mu ?

[09:23] <yoleaux> 00:36Z <TimToady> jnthn: If the two sides are semantically different (utf8 vs buf8), it should fail; if they're merely unit-sized differently (blob8 vs blob16) ops like ~ still fail but integer-based ops like ~& are allowed ot upgrade both sides to 16 bits

[09:24] <lizmat> jnthn: o/

[09:24] <lizmat> jnthn: my feeling was wrong

[09:26] <lizmat> apparently, List.infinite is called with an Array object 

[09:27] <lizmat> r: class A { has $!a=42; method a { $!a } }; class B is A { }; say B.new.a # which basically is this situation

[09:27] <camelia> rakudo 364e2a: OUTPUT¬´42‚ê§¬ª

[09:28] <lizmat> so I'm not sure why I'm getting "Can not get attribute '$!infinite' declared in class 'List' with this object"

[09:28] <lizmat> when apparently it is being called with an Array object

[09:28] <jnthn> Me either, there must be something more to it...

[09:28] <lizmat> ah‚Ä¶. I think I know

[09:28] <jnthn> Oh...wait a moment...

[09:29] <jnthn> Are the rest of the attributes for the class not declared in BOOTSTRAP?

[09:29] <lizmat> the attribute should be known at class compose time, so should b

[09:29] <lizmat> indeed

[09:29] <jnthn> Right

[09:29] <jnthn> Well, class compose time can happen more than once

[09:29] <jnthn> But representation compose can only ever happen once.

[09:31] <lizmat> indeed   :-)

[09:32] *** fgomez left
[09:37] <lizmat> new error!  Nominal type check failed for parameter 'lhs'; expected Any but got Mu instead  :-)

[09:38] <lizmat> ah, I see

[09:38] <lizmat> $!infinite shouldn't be Mu

[09:47] *** Rotwang joined
[09:52] *** wk joined
[09:52] *** wk is now known as Guest61163

[10:24] <lizmat> jnthn: would it be an idea to make gen-cat.pl smarter so that it wouldn't need "use" to load Perl6::BOOTSTRAP?

[10:24] <jnthn> lizmat: I don't see how that could possibly work.

[10:24] <lizmat> aka, copy some of the code currently in load_module verbatim into CORE.setting ?

[10:25] <jnthn> That's incredibly unlikely to work

[10:25] <lizmat> I mean, gen-cat.pl *knows* where Perl6/BOOTSTRAP lives

[10:25] <lizmat> but if it would work, we wouldn't need "use" in CORE.setting

[10:25] <jnthn> You don't even have *any* types or meta-objects to hand before you "use Perl6::BOOTSTRAP".

[10:26] <lizmat> so we could write it all of "use" in Perl6

[10:26] <jnthn> Want to write a string literal? Forget it, no Str yet. etc.

[10:27] <lizmat> hmmm‚Ä¶.  

[10:27] <jnthn> As I've mentioned before, we don't have to have "use" mapped to the real/ultimate module loader at this point.

[10:27] <lizmat> indeed

[10:28] <lizmat> ok, scratch that idea then  :-)

[10:28] <jnthn> But trying to eliminate the use for code is probably asking for a world of pain.

[10:28] <jnthn> I mean, Block doesn't even exist yet, so you can't write a BEGIN block! :)

[10:28] <lizmat> :-)

[10:28] <lizmat> point taken

[10:29] <jnthn> I guess an alternative is to recognize the --setting=NULL case and do something magical in comp_unit to load Perl6::BOOTSTRAP.

[10:29] <jnthn> That is, the "use" is implicit 

[10:29] <lizmat> would there be other use cases for --setting=NULL ?

[10:30] <jnthn> Writing a completely custom setting, perhaps. But that's a pretty crazy thing to do.

[10:30] <dalek> rakudo/nom: a1e237b | (Elizabeth Mattijsen)++ | src/Perl6/Optimizer.nqp:

[10:30] <dalek> rakudo/nom: Scratch misspelling OCD itch

[10:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a1e237be5e

[10:31] <lizmat> adding a --setting=BOOTSTRAP would also work, and prevent overloading =NULL usage, I guess

[10:32] <lizmat> hmmm‚Ä¶ that seems like a viable way of moving forward

[10:33] <lizmat> remove the "use Perl6::BOOTSTRAP" from traits, and make it implicit with --setting=BOOTSTRAP

[10:33] <jnthn> But Perl6::BOOTSTRAP needs to be use'd, not be a setting...

[10:33] <jnthn> I think doing it off --NULL is sensible enough.

[10:33] <lizmat> ok

[10:34] <lizmat> will mull this over in the next hours  :-)   Thanks for the fb

[10:34] *** Gruber is now known as Grrrr

[10:42] *** logie left
[10:54] *** rindolf left
[11:31] *** logie joined
[11:39] *** logie left
[12:24] *** jaldhar joined
[12:26] *** jaldhar left
[12:29] *** jaldhar joined
[12:29] *** census joined
[12:34] *** dmol joined
[12:41] *** birdwindupbird joined
[12:56] <dalek> nqp: de37343 | jnthn++ | src/vm/ (2 files):

[12:56] <dalek> nqp: Make nqp::encode take a buffer, not create it.

[12:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/de37343320

[12:57] <dalek> rakudo/rebuf: 763cfe4 | jnthn++ | src/Perl6/Grammar.nqp:

[12:57] <dalek> rakudo/rebuf: Fix multi sort so Blob ~~ String is true.

[12:57] <dalek> rakudo/rebuf: 

[12:57] <dalek> rakudo/rebuf: Fixes the ambiguity issues that kept any of the Blob operators from

[12:57] <dalek> rakudo/rebuf: being reached.

[12:57] <dalek> rakudo/rebuf: review: https://github.com/rakudo/rakudo/commit/763cfe4c79

[12:57] <dalek> rakudo/rebuf: da24001 | jnthn++ | src/Perl6/Metamodel/CurriedRoleHOW.nqp:

[12:57] <dalek> rakudo/rebuf: Fix a thinko.

[12:57] <dalek> rakudo/rebuf: review: https://github.com/rakudo/rakudo/commit/da24001d29

[12:57] <dalek> rakudo/rebuf: 4c60347 | jnthn++ | src/core/Str.pm:

[12:57] <dalek> rakudo/rebuf: encode method should do the buffer creation.

[12:57] <dalek> rakudo/rebuf: 

[12:57] <dalek> rakudo/rebuf: This is 'cus we may need to pun a role to do so, which is best done

[12:57] <dalek> rakudo/rebuf: here, not inside of some op.

[12:57] <dalek> rakudo/rebuf: review: https://github.com/rakudo/rakudo/commit/4c603471ae

[13:04] *** FOAD left
[13:05] *** FOAD joined
[13:05] *** dmol left
[13:19] *** colomon left
[13:22] *** benabik left
[13:23] *** eternaleye left
[13:23] *** colomon joined
[13:28] *** SamuraiJack_ joined
[13:28] *** eternaleye joined
[13:34] *** benabik joined
[13:35] <lizmat> jnthn: FWIW, I've given up on adding an $!infinite attribute: the overhead seems to be more than repeatedly calling multiple methods over and over again

[13:36] <lizmat> spectest typically used 1.5% more CPU with the patch

[13:38] *** BenGoldberg joined
[13:38] <jnthn> lizmat: Well, guess this is why measurement matters... :)

[13:39] <lizmat> still no solution as to why (1..Inf).uniq.infinite doesn't know it's infinite

[13:39] *** PacoAir left
[13:40] *** PacoAir joined
[13:42] <jnthn> lizmat: I think that infiniteness is generally not contaigous at the moment...

[13:42] <jnthn> lizmat: I'm not sure about the details; Pm is the right person to know about this stuff.

[13:44] *** ajr joined
[13:44] <jnthn> s/know/ask/

[13:44] *** ajr is now known as Guest28823

[13:48] *** benabik left
[13:54] *** benabik joined
[13:58] * lizmat is stupid

[13:59] <lizmat> "nqp::istype(nqp::atpos($!rest, 0), Iterable)" only fires if $!rest is Iterable, and Iterable.infinite is by definition Nil

[13:59] <lizmat> I guess in the end, this is a case of NYI

[14:02] *** Ben_Goldberg joined
[14:02] *** rindolf joined
[14:03] <lizmat> grrr  of course, ListIter is also Iterable

[14:03] *** zakalwe left
[14:04] *** BenGoldberg left
[14:04] <Ben_Goldberg> Perhaps there should be an explicit way of finding out if the length is unknown (method unknownlength, perhaps)?

[14:04] *** zakalwe joined
[14:04] *** zakalwe left
[14:04] *** zakalwe joined
[14:05] <lizmat> as opposed to infinite, you mean?

[14:05] <lizmat> the thing is, I *do* think the information is hidden on there somewhere

[14:06] <lizmat> the thing is that on @a=(1..Inf), @a's Iterrator is of type Range

[14:06] <lizmat> that apparently is a simplified version of the one that is created for @a.uniq

[14:07] <lizmat> *Iterator

[14:07] *** cognominal joined
[14:07] <Ben_Goldberg> A list made by gather might be infinite, or it might be finite... there only way to know from the outside is to solve the halting problem!

[14:10] <Ben_Goldberg> By letting each iterable type define it's own length_is_unknown method, you can avoid having to deal with it from the outside

[14:10] <Ben_Goldberg> Or, I suppose, just treat *every* list as infinite

[14:11] <lizmat> come to think of it, I guess you could argue that you can never tell

[14:13] <Ben_Goldberg> Plus, finite but very large lists, e.g., (1..1e7), should probably be treated as infinite for most purposes

[14:13] <lizmat> r: my @a := ( 1 xx Inf )  # infinite list with a finite uniq

[14:13] <camelia> rakudo a1e237: OUTPUT¬´Cannot coerce Inf or NaN to an Int‚ê§  in method Numeric at src/gen/CORE.setting:10559‚ê§  in sub infix:<==> at src/gen/CORE.setting:3333‚ê§  in sub infix:<==> at src/gen/CORE.setting:3331‚ê§  in sub infix:<xx> at src/gen/CORE.setting:6790‚ê§  in sub infix:<xx> at src/gen/CO‚Ä¶

[14:13] <lizmat> n: my @a := ( 1 xx Inf )  # infinite list with a finite uniq

[14:13] <camelia> niecza v24-88-g1f87209: OUTPUT¬´Potential difficulties:‚ê§  @a is declared but not used at /tmp/K_qw8G7ixj line 1:‚ê§------> [32mmy [33m‚èè[31m@a := ( 1 xx Inf )  # infinite list with[0m‚ê§‚ê§¬ª

[14:13] <lizmat> n: my @a := ( 1 xx Inf ); say @a  # infinite list with a finite uniq

[14:13] <camelia> niecza v24-88-g1f87209: OUTPUT¬´(timeout)¬ª

[14:14] <jnthn> But we don't statically know it's finite, in general :)

[14:15] *** ggoebel2 left
[14:16] <Ben_Goldberg> n: my @one = (1); my @inf := @one xx Inf; my @u := @inf.uniq; @u[0].say; @u[1].say

[14:16] *** Rix left
[14:16] <camelia> niecza v24-88-g1f87209: OUTPUT¬´(timeout)1‚ê§¬ª

[14:18] <Ben_Goldberg> Should @u really be considered infinite?  After all, looping forever (instead of returning a value) isn't the same thing as returning an empty list

[14:20] <Ben_Goldberg> Err... I meant, "Should @u really be considered finite?"

[14:23] *** Rix joined
[14:23] *** kaare__ left
[14:24] *** Bzek joined
[14:24] *** Bzek left
[14:25] <dalek> rakudo/rebuf: 3300512 | jnthn++ | src/core/IO.pm:

[14:25] <dalek> rakudo/rebuf: Correct a comment.

[14:25] <dalek> rakudo/rebuf: review: https://github.com/rakudo/rakudo/commit/3300512ce4

[14:25] <dalek> rakudo/rebuf: 28ebf0f | jnthn++ | src/core/IO/Socket.pm:

[14:25] <dalek> rakudo/rebuf: Update IO::Socket for updated Buf.

[14:25] <dalek> rakudo/rebuf: review: https://github.com/rakudo/rakudo/commit/28ebf0f961

[14:25] <dalek> rakudo/rebuf: 75d3e57 | jnthn++ | src/core/IO.pm:

[14:25] <dalek> rakudo/rebuf: Update IO::Handle for Buf changes.

[14:25] <dalek> rakudo/rebuf: review: https://github.com/rakudo/rakudo/commit/75d3e57b02

[14:25] <dalek> rakudo/rebuf: b1383a5 | jnthn++ | tools/build/NQP_REVISION:

[14:25] <dalek> rakudo/rebuf: Bump NQP_REVISION.

[14:25] <dalek> rakudo/rebuf: review: https://github.com/rakudo/rakudo/commit/b1383a55ec

[14:29] <dalek> roast/rebuf: e2c0079 | jnthn++ | S (5 files):

[14:29] <dalek> roast/rebuf: Various test updates for Buf changes.

[14:29] <dalek> roast/rebuf: 

[14:29] <dalek> roast/rebuf: Rakudo has become more closely aligned with the spec in various ways,

[14:29] <dalek> roast/rebuf: and these tests were caught out in the process.

[14:29] <dalek> roast/rebuf: review: https://github.com/perl6/roast/commit/e2c0079a3c

[14:32] <dalek> rakudo/rebuf: 310b13d | jnthn++ | src/core/Buf.pm:

[14:32] <dalek> rakudo/rebuf: Some exception pre-decls we need.

[14:32] <dalek> rakudo/rebuf: review: https://github.com/rakudo/rakudo/commit/310b13db07

[14:32] <GlitchMr> prn: while True { prompt '?' }

[14:32] <dalek> rakudo/rebuf: ba6da77 | (Solomon Foster)++ | src/core/Cool.pm:

[14:32] <dalek> rakudo/rebuf: Initialize sprintf argument handler when needed.

[14:32] <dalek> rakudo/rebuf: review: https://github.com/rakudo/rakudo/commit/ba6da77a74

[14:32] <dalek> rakudo/rebuf: 45d4473 | (Elizabeth Mattijsen)++ | src/core/Any.pm:

[14:32] <dalek> rakudo/rebuf: Make {@keys}:k use slighlty less CPU

[14:32] *** dalek left
[14:33] <camelia> niecza v24-88-g1f87209: OUTPUT¬´(timeout)???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????‚Ä¶

[14:33] <camelia> ..pugs: OUTPUT¬´*** No such subroutine: "&prompt"‚ê§    at /tmp/NGleTXYWWW line 1, column 14-25‚ê§¬ª

[14:33] <camelia> ..rakudo a1e237: OUTPUT¬´(timeout)????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????‚Ä¶

[14:33] <GlitchMr> Excess Flood...

[14:33] <diakopter> u killed kenny

[14:33] <jnthn> Merge heuristic fail

[14:33] *** census left
[14:33] *** dalek joined
[14:33] *** ChanServ sets mode: +v dalek

[14:34] <jnthn> lizmat, or anybody else: If you have a moment to kick it off, I'd appreciate a run of the spectests for Rakudo on Parrot in the rebuf branch, using also the rebuf branch of the spectests.

[14:36] *** pupoque left
[14:37] <jnthn> (I changed IO related things so it's good to get conf from another platform/machine :))

[14:37] *** xilo joined
[14:42] <GlitchMr> std: say "Process ID is $$."

[14:42] <camelia> std c2215f0: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unsupported use of $. variable; in Perl 6 please use the filehandle's .line method at /tmp/f1tsCYfelA line 1:‚ê§------> [32msay "Process ID is $$.[33m‚èè[31m"[0m‚ê§Parse failed‚ê§FAILED 00:00 42m‚ê§¬ª

[14:42] <GlitchMr> ok...

[14:42] <GlitchMr> std: say "Process ID is ", $$, "."

[14:42] <camelia> std c2215f0: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Non-declarative sigil is missing its name at /tmp/DJphWgw7Hk line 1:‚ê§------> [32msay "Process ID is ", $[33m‚èè[31m$, "."[0m‚ê§Use of uninitialized value $first in string eq at STD.pm line 66215.‚ê§Use of uninitialized value $first in str‚Ä¶

[14:42] <GlitchMr> I guess it cannot detect invalid use of $$ ($*PID).

[14:44] <GlitchMr> std: $>;

[14:44] <camelia> std c2215f0: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unsupported use of $> variable; in Perl 6 please use $*EUID at /tmp/PzKxvAGJTu line 1:‚ê§------> [32m$>[33m‚èè[31m;[0m‚ê§Parse failed‚ê§FAILED 00:00 41m‚ê§¬ª

[14:47] *** FROGGS[mobile] joined
[14:47] <FROGGS[mobile]> o/

[14:51] <jnthn> o/ FROGGS[mobile] 

[14:51] *** pupoque joined
[14:51] <jnthn> .oO( is the FROGGSmobile like the batmobile? )

[14:53] <colomon> better, it has irc

[14:54] *** pupoque left
[14:55] * jnthn thinks he has rebuf to the point where it makes things spec-ier overall, doesn't bust spectest on Parrot, and improves spectest on JVM.

[14:57] <FROGGS[mobile]> FROGGSmobile are the cars you've seen in Frogger

[14:59] * JimmyZ can't understand why utf8/16/32 and Buf have "is repr('VMArray')", since Blob has too ...

[15:00] *** logie joined
[15:04] <jnthn> JimmyZ: 'is repr' on a role only applies to if the role is punned.

[15:05] <jnthn> It can't really have compositional meaning, given you can compose multiple roles...

[15:06] *** pupoque joined
[15:08] *** pupoque_ joined
[15:09] *** ggoebel joined
[15:10] <jnthn> Looks like we'll get another 50 spectests on Rakudo JVM once rebuf is merged.

[15:10] *** pupoque left
[15:10] *** pupoque_ left
[15:10] <JimmyZ> nice

[15:10] *** pupoque_ joined
[15:11] <jnthn> And that's without .read and .write being implemented yet

[15:13] <jnthn> Away for a bit

[15:14] *** risou_awy is now known as risou

[15:14] *** benabik left
[15:14] *** benabik joined
[15:15] <Ulti> zacts have you tried the PAR stuff in Perl5 http://search.cpan.org/~rschupp/PAR-1.007/lib/PAR/Tutorial.pod you mentioned a lot about distribution/packaging

[15:16] <Ulti> I am looking forward to just doing --target=jar in Rakudo though :)

[15:16] *** raiph joined
[15:16] *** pupoque_ left
[15:17] <zacts> Ulti: I'll check it out thanks

[15:17] *** pupoque_ joined
[15:19] *** pupoque_ is now known as chpoque

[15:19] *** eternaleye left
[15:20] *** chpoque is now known as pupoque_

[15:20] *** logie left
[15:20] *** pupoque joined
[15:23] *** eternaleye joined
[15:30] <flussence> jnthn: Files=746, Tests=26411, 1415 wallclock secs ( 8.66 usr  0.52 sys + 5114.43 cusr 159.50 csys = 5283.11 CPU)

[15:31] <flussence> 1 fail in S16-filehandles, 5 in S32-io/socket

[15:31] <flussence> (and a bunch of fails in S05-mass/ which is normal icu screwup on my machine...)

[15:33] *** pupoque_ left
[15:34] <flussence> oh, this site's still working! http://smolder.parrot.org/app/projects/report_details/43540

[15:34] <diakopter> FROGGS[mobile]: lolz

[15:41] *** pupoque_ joined
[15:45] *** ajr joined
[15:45] *** Guest28823 left
[15:45] *** ajr is now known as Guest19079

[15:49] *** domidumont joined
[15:49] *** raiph left
[15:50] *** raiph joined
[15:52] *** Guest19079 is now known as ajr_

[15:53] *** FROGGS[mobile] left
[15:53] *** pmurias joined
[15:54] <pmurias> jnthn: how does $node<foo> or $capture<foo> work?

[15:55] <pmurias> jnthn: ahh, found it, possitional_delegate

[15:57] *** rindolf left
[15:57] <moritz> \o

[15:57] * moritz back from traveling

[15:57] <diakopter> moritz: wb

[16:01] <GlitchMr> prn: say atan2 0, -0e0

[16:01] <camelia> rakudo a1e237: OUTPUT¬´3.14159265358979‚ê§¬ª

[16:01] <camelia> ..niecza v24-88-g1f87209: OUTPUT¬´3.1415926535897931‚ê§¬ª

[16:01] <camelia> ..pugs: OUTPUT¬´*** No such subroutine: "&atan2"‚ê§    at /tmp/Foo4Gi8XZp line 1, column 5 - line 2, column 1‚ê§¬ª

[16:02] <GlitchMr> rn: say atan2 0, '-0e0'

[16:02] <camelia> niecza v24-88-g1f87209: OUTPUT¬´3.1415926535897931‚ê§¬ª

[16:02] <camelia> ..rakudo a1e237: OUTPUT¬´0‚ê§¬ª

[16:02] <timotimo> lo moritz

[16:02] *** pupoque_ left
[16:02] <GlitchMr> I wonder, which implementation is wrong in this case?

[16:02] <timotimo> what are you up to this nice and warm sunday?

[16:04] *** colomon left
[16:04] *** FROGGS[mobile] joined
[16:05] <moritz> GlitchMr: isn't atan periodic in pi?

[16:06] <moritz> GlitchMr: if so, none of them needs to be wrong

[16:06] <GlitchMr> I'm not talking about atan2 itself.

[16:06] <GlitchMr> I'm talking about '-0e0'

[16:06] <moritz> prn: say +'-0e0'

[16:06] <camelia> rakudo a1e237, niecza v24-88-g1f87209, pugs: OUTPUT¬´0‚ê§¬ª

[16:06] <GlitchMr> In niecza, atan2 sees -0.

[16:06] <GlitchMr> But in Rakudo, it sees 0.

[16:06] <GlitchMr> prn: say (+'-0e0').perl

[16:06] <camelia> rakudo a1e237, niecza v24-88-g1f87209: OUTPUT¬´0e0‚ê§¬ª

[16:06] <camelia> ..pugs: OUTPUT¬´0.0‚ê§¬ª

[16:06] <GlitchMr> 0e0... ok

[16:07] * moritz doesn't see the difference

[16:07] <GlitchMr> Yet, atan2 sees it

[16:07] <GlitchMr> rn: say atan2 0, -0e0

[16:07] <camelia> rakudo a1e237: OUTPUT¬´3.14159265358979‚ê§¬ª

[16:07] <camelia> ..niecza v24-88-g1f87209: OUTPUT¬´3.1415926535897931‚ê§¬ª

[16:07] <GlitchMr> rn: say atan2 0, 0e0

[16:07] <camelia> rakudo a1e237, niecza v24-88-g1f87209: OUTPUT¬´0‚ê§¬ª

[16:07] <GlitchMr> I'm really confused

[16:09] <GlitchMr> Rakudo numerizes that to 0e0, but Niecza numerizes that to -0e0

[16:10] <GlitchMr> rn: printf "%g %g %g\n", 0e0, -0e0, +'-0e0'

[16:10] <camelia> rakudo a1e237: OUTPUT¬´0 -0 0‚ê§¬ª

[16:10] <camelia> ..niecza v24-88-g1f87209: OUTPUT¬´0 0 0‚ê§¬ª

[16:12] *** pupoque_ joined
[16:15] <dalek> nqp: 05574c2 | (Pawel Murias)++ | t/nqp/73-delegation.t:

[16:15] <dalek> nqp: Add a test for 'is positional_delegate' and 'is associative_delegate'.

[16:15] <dalek> nqp: review: https://github.com/perl6/nqp/commit/05574c2ac9

[16:19] <GlitchMr> rn: say <->

[16:19] <camelia> niecza v24-88-g1f87209: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Malformed parameter at /tmp/cKH8ZL1FNJ line 1 (EOF):‚ê§------> [32msay <->[33m‚èè[31m<EOL>[0m‚ê§‚ê§Parse failed‚ê§‚ê§¬ª

[16:19] <camelia> ..rakudo a1e237: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Malformed parameter‚ê§at /tmp/hByY2Kw3We:1‚ê§------> [32msay <->[33m‚èè[31m<EOL>[0m‚ê§    expecting any of:‚ê§        argument list‚ê§        prefix or term‚ê§        prefix or meta-prefix‚ê§        parameterized block‚ê§¬ª

[16:20] <GlitchMr> std: say <->

[16:20] <camelia> std c2215f0: OUTPUT¬´ok 00:00 43m‚ê§¬ª

[16:21] *** Ben_Goldberg left
[16:22] *** kylecazar joined
[16:24] *** BenGoldberg joined
[16:25] <GlitchMr> std: /\(([^()]*|(?R))\)/

[16:25] <camelia> std c2215f0: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Null pattern not allowed at /tmp/R3VOcbTBs7 line 1:‚ê§------> [32m/\(([^([33m‚èè[31m)]*|(?R))\)/[0m‚ê§    expecting any of:‚ê§   quantifier‚ê§     regex atom‚ê§     sigmaybe‚ê§Parse failed‚ê§FAILED 00:00 42m‚ê§¬ª

[16:25] *** pupoque_ left
[16:25] *** pupoque is now known as pupoque_

[16:26] *** colomon joined
[16:26] *** risou is now known as risou_awy

[16:26] <colomon> rn: say atan2 0, (1/-Inf)

[16:26] <camelia> rakudo a1e237: OUTPUT¬´3.14159265358979‚ê§¬ª

[16:26] <camelia> ..niecza v24-88-g1f87209: OUTPUT¬´3.1415926535897931‚ê§¬ª

[16:27] <colomon> rn: say -0e0

[16:27] <camelia> rakudo a1e237: OUTPUT¬´-0‚ê§¬ª

[16:27] <camelia> ..niecza v24-88-g1f87209: OUTPUT¬´0‚ê§¬ª

[16:27] *** raiph left
[16:27] <colomon> ‚Ä¶. okay, that's the opposite of what I was expecting.

[16:28] <colomon> afk # off to parents'

[16:28] *** colomon left
[16:30] *** pupoque joined
[16:30] *** kaare__ joined
[16:31] *** kylecazar left
[16:34] *** pupoque left
[16:34] *** pupoque joined
[16:37] <dalek> nqp: 38e207a | (Pawel Murias)++ | t/nqp/73-delegation.t:

[16:37] <dalek> nqp: Test that positional_delegate and associative_delegate are visible through the metamodel.

[16:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/38e207a7ab

[16:37] *** Rotwang left
[16:38] *** fridim__ joined
[16:41] *** rindolf joined
[16:55] *** Rotwang joined
[16:56] *** _ilbot left
[16:57] *** ajr_ left
[16:58] *** _ilbot joined
[17:14] <jnthn> flussence: The S16 one seems unrelated; the socket one is more concerning, but passes for me, so I'm not too sure what I can do...

[17:18] *** FROGGS[mobile] left
[17:30] *** Rotwang left
[17:33] *** birdwindupbird left
[17:37] *** fgomez joined
[17:49] <pmurias> jnthn: is positional_delegate works by setting a bit in the repr?

[17:49] <pmurias> s/setting a bit/marking things up/

[18:00] *** BenGoldberg left
[18:00] *** grondilu joined
[18:01] *** domidumont left
[18:02] *** BenGoldberg joined
[18:04] *** dagurval joined
[18:14] <diakopter> moritz: even if it's periodic in pi, it requires all programmers who type atan2 to know that to interpret the result properly

[18:14] <diakopter> .. because the domain of whatever it's fed to may be bigger

[18:16] <pmurias> jnthn: sanity check, if an class has an attribute with 'is positional_delegate', the repr will have pos_del_slot set to something different then -1

[18:16] <jnthn> pmurias: Stores the slot to find the positional delegate in repr data...

[18:16] <GlitchMr> std: ().^WHAT

[18:16] <camelia> std c2215f0: OUTPUT¬´ok 00:00 42m‚ê§¬ª

[18:16] <jnthn> pmurias: Yes

[18:16] <GlitchMr> rn: ().^WHAT

[18:16] <jnthn> -1 indicates "no, there isn't one"

[18:16] <camelia> rakudo a1e237: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Cannot use .^ on a non-identifier method call‚ê§at /tmp/rLjnMJIKdZ:1‚ê§------> [32m().^WHAT[33m‚èè[31m<EOL>[0m‚ê§    expecting any of:‚ê§        method arguments‚ê§¬ª

[18:16] <camelia> ..niecza v24-88-g1f87209: OUTPUT¬´Unhandled exception: Unable to resolve method WHAT in type ClassHOW‚ê§  at /tmp/bBMlNIJUf0 line 1 (mainline @ 4) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4579 (ANON @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4580 (module-CORE @ 576) ‚ê§  at /h‚Ä¶

[18:16] <jnthn> It's configured at REPR compose time.

[18:16] <GlitchMr> What is Rakudo talking about?

[18:17] <pmurias> jnthn: and the version is serialization format is >= 3 in vaguely modern nqp, so the pos_del_slot is serialized

[18:17] <jnthn> yeah, 3 is pretty old

[18:22] <pmurias> so we should remove the if statement now?

[18:22] <pmurias> if statement = version check

[18:23] <jnthn> pmurias: Yeah, if the minimum version it claims to support in serialization.c is higher

[18:23] <jnthn> Which I think it is

[18:26] <GlitchMr> std: &infix:<+>; &infix:<&&>

[18:26] <camelia> std c2215f0: OUTPUT¬´ok 00:00 44m‚ê§¬ª

[18:26] <GlitchMr> Just wondering, how can I declare an operator that works like &&?

[18:26] <GlitchMr> (I assume macros could be helpful, but...)

[18:28] <pmurias> jnthn: the minimum version seems to be 1

[18:29] <jnthn> pmurias: Well, so long as we don't bump it past whatever is in stage0... :)

[18:30] <GlitchMr> ok, I think I managed to do it using macro infix:<!!!>($a, $b) { quasi { {{{$a || $b}}} } }

[18:32] <jnthn> GlitchMr: yeah, that looks right

[18:32] <GlitchMr> Well, it's {{{$a}}} || {{{$b}}}

[18:32] <GlitchMr> But seems to work

[18:33] *** sdo joined
[18:33] <sdo> hello

[18:33] <GlitchMr> Hello

[18:33] <sdo> I have a simple question

[18:33] <GlitchMr> Just ask

[18:35] <sdo> I went on rakudo website (official) and look to buy a TShirt. I could not find any place. Is it possible to buy a TShirt of Rakudo star?

[18:37] <grondilu> " "Saying Java is a nice programming language because it works on all platforms is like saying anal sex is niceÔªø because it works on all genders."   <-  lol

[18:38] * grondilu hope this was not too nsfw.  It was so funny I couldn't help writing it here.

[18:38] *** cognominal left
[18:38] *** zakalwe left
[18:38] *** orafu left
[18:38] *** skids left
[18:38] *** hugme left
[18:38] *** Exodist left
[18:38] *** kst left
[18:38] *** mikemol_ left
[18:38] *** atrodo left
[18:38] *** jercos left
[18:38] *** diakopter left
[18:38] *** cotto left
[18:38] *** risou_awy left
[18:38] *** zamolxes left
[18:38] <sdo> why not oral sex

[18:39] <timotimo> because in order to insult java, the author of the joke has to come up with something "icky" or "disgusting"

[18:39] <mst> sdo: because heteronormative culture hasn't made men irrationally scared of oral sex compromising their masculinity

[18:40] *** dalek left
[18:40] *** dalek joined
[18:40] *** ChanServ sets mode: +v dalek

[18:40] <GlitchMr> sdo: http://rakudo.spreadshirt.de/

[18:41] <GlitchMr> (however, it's just standard Rakudo, not Rakudo Star)

[18:41] <GlitchMr> (not that Rakudo Star has logo)

[18:42] <sdo> ok

[18:42] <sdo> thx

[18:42] *** rindolf left
[18:42] <sdo> I check

[18:47] *** zakalwe joined
[18:47] *** jercos joined
[18:47] *** Exodist joined
[18:47] *** kst joined
[18:47] *** orafu joined
[18:47] *** atrodo joined
[18:47] *** mikemol joined
[18:47] *** zakalwe left
[18:47] *** zakalwe joined
[18:47] *** orafu left
[18:47] *** orafu joined
[18:48] *** zamolxes joined
[18:48] *** hugme joined
[18:48] *** ChanServ sets mode: +v hugme

[18:48] *** diakopter joined
[18:48] *** skids joined
[18:49] *** fgomez left
[18:49] *** risou_awy joined
[18:49] *** sdo left
[18:51] *** cotto joined
[18:55] *** pupoque_ left
[18:57] *** fgomez joined
[19:10] *** lue left
[19:12] <moritz> diakopter: whoever uses a function should have at least basic familiarity with it

[19:12] *** wk joined
[19:12] *** Ben_Goldberg joined
[19:12] *** wk is now known as Guest71337

[19:13] *** pjcj_ joined
[19:13] *** jtpalmer joined
[19:14] *** jercos_ joined
[19:14] *** zby_home__ joined
[19:14] *** prammer_ joined
[19:14] *** gabriel joined
[19:15] *** Teratogen joined
[19:16] <moritz> diakopter: i'm not saying that it actualyl is correct, but the periodicity is something that needs to be taken into account when checking if one of them is actually wrong

[19:16] *** ribasushi_ joined
[19:18] *** pupoque left
[19:18] *** Util_ joined
[19:18] *** huf_ joined
[19:19] *** cooper_ joined
[19:20] *** jercos left
[19:20] *** BenGoldberg left
[19:20] *** grondilu left
[19:20] *** xilo left
[19:20] *** Guest61163 left
[19:20] *** zby_home left
[19:20] *** jtpalmer_ left
[19:20] *** gabriel_1 left
[19:20] *** Bucciarati left
[19:20] *** SamuraiJack_ left
[19:20] *** ribasushi_ is now known as ribasushi

[19:20] *** Bucciarati joined
[19:20] *** pupoque joined
[19:22] *** Vlavv joined
[19:22] *** xilo joined
[19:23] <dalek> perl6-roast-data: 332e577 | coke++ | / (4 files):

[19:23] <dalek> perl6-roast-data: today (automated commit)

[19:23] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/332e5777b9

[19:25] *** lue joined
[19:27] <moritz> r: say 26210 - 25988

[19:27] <timotimo> lost quite a few tests on rakudo.parrot

[19:27] <camelia> rakudo a1e237: OUTPUT¬´222‚ê§¬ª

[19:27] <moritz> r: say 222 / 26210

[19:27] <camelia> rakudo a1e237: OUTPUT¬´0.008470‚ê§¬ª

[19:27] <timotimo> actually, gained

[19:29] <jnthn> rebuf should give us another 50ish passing on JVM, but flussence++ tested and saw a regression on the socket tests...

[19:29] * jnthn doesn't have the regression hee

[19:29] <jnthn> *here

[19:29] <[Coke]>  there was a mystery failure a few days ago that cleared up

[19:29] <jnthn> If anybody fancies having a poke at it, please do

[19:29] <[Coke]> jnthn: want me to test a branch on the smoker?

[19:30] <jnthn> [Coke]: Yeah; rebuf branch of Rakudo with rebuf branch of spectest repo.

[19:31] <jnthn> [Coke]: On Parrot.

[19:32] <[Coke]> ... good thing you said that.

[19:32] <[Coke]> what about nqp?

[19:32] <jnthn> I updated NQP_REVISION 

[19:32] <jnthn> So no branch, just the matching one or later

[19:33] <jnthn> (though I think that currently what's in NQP_REVISION is nqp master)

[19:33] <jnthn> We don't have sockets working yet on JVM

[19:33] *** kaare__ is now known as kaare_

[19:33] <jnthn> But I'd rather not regress them on Parrot

[19:34] <jnthn> hm

[19:34] * jnthn notes that while it does work for him, it seems to take quite a while to do so...

[19:36] *** jfried_ joined
[19:37] *** colomon joined
[19:41] *** pjcj joined
[19:42] *** kaare__ joined
[19:43] *** jtpalmer_ joined
[19:43] *** jfried left
[19:43] *** jfried_ is now known as jfried

[19:43] *** cooper joined
[19:44] *** cooper left
[19:44] *** cooper joined
[19:44] *** vaelxon left
[19:44] *** risou_awy_ joined
[19:46] *** sivoais_ joined
[19:47] *** sorear_ joined
[19:48] *** anocelot_ joined
[19:49] *** Ben_Goldberg left
[19:49] *** dalek left
[19:49] *** silug joined
[19:51] *** stevan__ joined
[19:51] *** wk_ joined
[19:52] *** ribasushi_ joined
[19:52] *** yoleaux left
[19:52] *** yoleaux joined
[19:52] *** ChanServ sets mode: +v yoleaux

[19:52] *** pjcj_ left
[19:52] *** berekuk left
[19:52] *** cooper_ left
[19:52] *** kst left
[19:52] *** sivoais left
[19:52] *** kaare_ left
[19:52] *** silug_ left
[19:52] *** jtpalmer left
[19:53] *** yoleaux left
[19:53] *** colomon left
[19:53] *** ribasushi left
[19:53] *** gabriel left
[19:53] *** Guest71337 left
[19:53] *** risou_awy left
[19:53] *** orafu left
[19:53] *** dagurval left
[19:53] *** zacts left
[19:53] *** stevan_ left
[19:53] *** anocelot left
[19:53] *** sorear left
[19:53] *** eiro left
[19:53] *** Tene left
[19:53] *** timotimo left
[19:53] *** ribasushi_ is now known as ribasushi

[19:53] <gfldex> panda is endangered for me:

[19:53] <gfldex> ==> Testing File::Tools

[19:53] <gfldex> t/01-file-find.t ...... Failed 1/10 subtests

[19:54] *** pupoque left
[19:56] *** timotimo joined
[19:57] *** fgomez_ joined
[19:57] *** nwc10_ joined
[19:57] *** anocelot joined
[19:57] *** kaare joined
[19:58] *** sciurius joined
[19:58] *** kaare is now known as Guest4583

[19:58] *** FOAD left
[19:59] *** pmurias_ joined
[19:59] *** simcop2387 left
[19:59] *** sergot left
[19:59] *** sciurius_ left
[19:59] *** pmurias left
[19:59] *** breinbaas left
[19:59] *** anocelot_ left
[19:59] *** genehack_ left
[19:59] *** nwc10 left
[19:59] *** awwaiid left
[19:59] *** fgomez left
[19:59] *** kaare__ left
[19:59] *** sorear_ left
[20:01] *** nwc10_ is now known as nwc10

[20:02] *** sivoais_ is now known as sivoais

[20:02] *** sivoais left
[20:02] *** sivoais joined
[20:03] *** dalek joined
[20:03] *** ChanServ sets mode: +v dalek

[20:03] *** awwaiid joined
[20:03] *** Guest4583 left
[20:03] *** cognominal joined
[20:04] *** sorear joined
[20:04] *** breinbaas joined
[20:04] <lizmat> jnthn: will run rebuf spectest now

[20:04] <lizmat> will run while I'm getting some fresh, not too hot air whil cycling

[20:04] <lizmat> back in ~ hour&

[20:06] *** Guest4583 joined
[20:06] *** Guest4583 is now known as kaare_

[20:06] *** zacts joined
[20:06] <timotimo> tadzik: i was thinking of rewriting the pod parsing to be more "modular"; have parameters that specify if whitespace should be preserved, if margins should be removed, if formatting codes (and which) are allowed, if nested blocks should be parsed, ...

[20:07] *** dagurval joined
[20:08] *** sergot joined
[20:10] *** kaare_ left
[20:10] *** gabriel_ joined
[20:10] *** genehack joined
[20:10] <timotimo> and also: parameters that decide what would terminate the piece ofpod

[20:11] <timotimo> i'm not sure it can sensibly be made with "lots and lots of rules", given the sheer amount of combinations

[20:11] *** eiro joined
[20:12] *** berekuk joined
[20:12] *** Tene joined
[20:12] *** Tene left
[20:12] *** Tene joined
[20:13] *** simcop2387 joined
[20:15] *** orafu joined
[20:15] <pmurias_> jnthn: I found the source of my positional_dispatch problems, I was using a old copy of nqp-mo.pm which didn't pass the info to the compose method :(

[20:17] <jnthn> pmurias_: ah... :(

[20:28] <tadzik> timotimo: seems worth trying. The existing code has a lots of duplicate code

[20:31] *** vaelxon joined
[20:47] <gfldex> tadzik: does panda bootstrap for you right now?

[20:51] <timotimo> doesn't for me :(

[20:51] <timotimo> problems with file::find

[20:54] *** FOAD joined
[20:57] <gfldex> not ok 10 - found one of two files due to X::IO::Dir

[20:57] <gfldex> that's the offending test

[21:01] <timotimo> tadzik: do you have an intuition on wether i could know what exact columns the table will have after a specific line was parsed?

[21:01] *** spider-mario left
[21:08] *** pmurias_ left
[21:16] <jnthn> 'night, #perl6

[21:18] <tadzik> gfldex: tring

[21:18] <tadzik> timotimo: when you reach the separator you should have a fairly good idea, yes

[21:19] <timotimo> what about tables without a separator?

[21:19] <lizmat> gnight jnthn!

[21:20] <timotimo> two or more spaces in a row don't guarantee "a cell ends here"

[21:21] <lizmat> .tell jnthn "my Buf $a = "asdf".encode" fails with "Type check failed in assignment to '$a'; expected 'Buf' but got 'utf8'"

[21:25] <dalek> roast/rebuf: a1e23de | (Elizabeth Mattijsen)++ | S02-names-vars/perl.t:

[21:25] <dalek> roast/rebuf: Fudge failing test, although the test itself looks faulty to me

[21:25] <dalek> roast/rebuf: review: https://github.com/perl6/roast/commit/a1e23de459

[21:30] <timotimo> "expected bug" ?:)(

[21:30] <timotimo> ? :)

[21:32] <lizmat> .ping

[21:33] <lizmat> seems we lost yoleaux again

[21:33] *** colomon joined
[21:34] <lizmat> jnthn: the faliing IO tests in rebug branch: https://gist.github.com/lizmat/6050073

[21:35] *** Guest1337 joined
[21:35] *** Guest1337 left
[21:36] *** Guest1337 joined
[21:38] <lizmat> jnthn: fwiw, the same numbers happen with every test, so it does seem something systematic rather then depending on load or so

[21:41] *** PacoAir left
[21:44] *** yoleaux joined
[21:44] *** ChanServ sets mode: +v yoleaux

[21:48] <lizmat> .tell jnthn "my Buf $a = "asdf".encode" fails with "Type check failed in assignment to '$a'; expected 'Buf' but got 'utf8'"

[21:48] <yoleaux> lizmat: I'll pass your message to jnthn.

[21:48] <lizmat> .tell jnthn faliing IO tests in rebug branch: https://gist.github.com/lizmat/6050073

[21:48] <yoleaux> lizmat: I'll pass your message to jnthn.

[21:48] <lizmat> gnight #perl6!

[21:57] <colomon> o\

[22:08] *** colomon left
[22:17] *** zby_home__ left
[22:44] *** colomon joined
[22:50] *** colomon left
[23:06] *** colomon joined
[23:15] *** tokuhirom joined
[23:24] *** grondilu joined
[23:25] <grondilu> rn: constant Œ± = 1; say Œ±

[23:25] <camelia> rakudo a1e237, niecza v24-88-g1f87209: OUTPUT¬´1‚ê§¬ª

[23:26] <grondilu> for some reason I've been unable to use unicode variable names, latelly :-(

[23:27] <grondilu> yet I know my terminal uses unicode.  I mean, I failed running perl6 -e 'constant Œ± = 1;', so I ran echo 'constant Œ± = 1;' |xxd and I got:

[23:27] <grondilu> 0000000: 636f 6e73 7461 6e74 20ce b120 3d20 313b  constant .. = 1;

[23:27] <grondilu> 0000010: 0a 

[23:28] <grondilu> which tells me that Œ± is encoded in ceb1.  Isn't that unicode?

[23:28] <colomon> .u Œ±

[23:28] <yoleaux> U+03B1 GREEK SMALL LETTER ALPHA [Ll] (Œ±)

[23:29] <colomon> That's unicode alpha

[23:29] <colomon> (and I got it by cutting-n-pasting your text there

[23:29] <colomon> )

[23:30] <grondilu> ok, but according to https://en.wikipedia.org/wiki/Alpha,  CEB1 is unicode too (I confess I don't know the details about utf-8 and unicode)

[23:32] <grondilu> why doesn't it work, anyway?

[23:33] *** Guest1337 left
[23:34] *** colomon left
[23:35] <flussence>  ~ $ perl6 -e 'constant Œ± = 1; say Œ±'

[23:35] <flussence> 1

[23:35] <flussence> works for me, and the xxd is identical, so I dunno

[23:49] * grondilu upgrades its CPAN modules and after that will recompile nqp/parrot/rakudo.  Maybe this will help.

[23:58] *** raiph joined
