[00:03] <dalek> perl6-roast-data: 5a4c1a8 | coke++ | / (4 files):

[00:03] <dalek> perl6-roast-data: today (automated commit)

[00:03] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/5a4c1a8047

[00:04] <dalek> rakudo-star-daily: 94705da | coke++ | log/version.log:

[00:04] <dalek> rakudo-star-daily: today (automated commit)

[00:04] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/94705dae0b

[00:04] <dalek> rakudo-star-daily: fa17dbb | coke++ | log/version.log:

[00:04] <dalek> rakudo-star-daily: today (automated commit)

[00:04] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/fa17dbb2df

[00:04] <dalek> rakudo-star-daily: afa5f1e | coke++ | log/version.log:

[00:04] <dalek> rakudo-star-daily: today (automated commit)

[00:04] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/afa5f1ec52

[00:04] <dalek> rakudo-star-daily: bb3c188 | coke++ | log/version.log:

[00:04] <dalek> rakudo-star-daily: today (automated commit)

[00:04] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/bb3c188872

[00:18] *** Psyche^ joined
[00:25] <dalek> roast: 13e020f | coke++ | S1 (2 files):

[00:25] <dalek> roast: niecza fudge

[00:25] <dalek> roast: review: https://github.com/perl6/roast/commit/13e020f53e

[00:54] *** markov joined
[01:01] *** jnap joined
[01:06] *** Mouq joined
[01:11] <Mouq> TimToady: So in a regex, \# isn't allowed? I couldn't find anything in roast, but some of nqp's tests actually use \#

[01:12] <Mouq> … Could always check for / \\ '#' <!before \`> / or something

[01:19] <TimToady> std: /\#/

[01:19] <camelia> std 7c17586: OUTPUT«===SORRY!===␤No unspace allowed in regex; if you meant to match the literal character, please enclose in single quotes ('#') or use a backslashed form like \x23 at /tmp/Ei9lHnEE2C line 1:␤------> /\⏏#/␤Parse failed␤FAILED 00:0…»

[01:19] <Mouq> I just ask because it's genuinely useful

[01:19] <TimToady> yes, \# is not allowed, but you can always write '#'

[01:20] <Mouq> Okay. I'll just rewrite the tests

[01:21] <diakopter> Mouq: when did you mail the CLA?

[01:21] <diakopter> (I'd give it a couple weeks)

[01:22] <TimToady> btw, you don't need a CLA for the stuff under /perl6 on github; that just needs a commit bit

[01:23] <Mouq> diakopter: No, they didn't get it yet. I entrusted a person to mail it; they only did it two days ago apparently :(

[01:29] <TimToady> oh, you already have a commit bit--nevermind :)

[01:29] <TimToady> (perl6 commit bit, not rakudo)

[01:30] <Mouq> I've been bitten

[01:31] <diakopter> surely there's a German-language joke in there somewhere

[01:32] * TimToady already thought of it and decided not to make it :)

[01:34] *** btyler joined
[01:34] <diakopter> oh, "to ask, implore". heh.

[01:36] <segomos> you guys are awesome

[01:36] <dalek> nqp: 1bd3f09 | Mouq++ | src/QRegex/P6Regex/Grammar.nqp:

[01:36] <dalek> nqp: Panic on unspace in a regex

[01:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1bd3f09e6f

[01:36] <dalek> nqp: 0bf3998 | Mouq++ | t/ (3 files):

[01:36] <dalek> nqp: Change tests to reflect "no unspace in regex" rule

[01:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0bf3998899

[01:36] <diakopter> just call me Lt. Awesome

[01:39] <colomon> aye-aye, Lt. Awesome

[01:39] <diakopter> that's LTAwesome to you

[01:42] <diakopter> ;)

[01:43] <Mouq> Yes sir, GTA. Please don't hijack my car.

[01:51] <TimToady> you're too young for GTA...come to think of it, I'm too young for GTA...

[01:53] <Mouq> Perl goes shopping: http://media.giphy.com/media/10fvhcVV2XenVm/giphy.gif

[01:54] *** FROGGS_ joined
[02:04] *** PZt joined
[02:08] *** Brun0L3z joined
[02:10] <Brun0L3z> hello, I was wondering if perl can do something like this:  User is asked to enter a domain extension (ex: .au) then perl searched the web for all websites ending with that extension. Is this possible with perl?

[02:12] <lue> Mouq: that gif makes me think of the vogons from the h2g2 movie.

[02:13] <Mouq> Brun0L3z: …All of them?

[02:14] <Brun0L3z> Mouq: not really... just some because all of them willl be like a load of things

[02:15] <geekosaur> Brun0L3z, this sounds like a perl5 question, try #perl?

[02:15] <Mouq> I second geekosaur, but you probably want to find a reference of registered .au domains or something.

[02:16] <Brun0L3z> geekosaur: Thanks for that 

[02:16] <Brun0L3z> Mouq: How do I do that?

[02:16] <geekosaur> well, this is a development channel for perl 6, answers here involving code are unlikely to help you in a real context as yet.

[02:17] <Mouq> IDK, Google? :P But if you're searching for *any* domain with even a name less than 6 characters, you're already looking for over 1 million possibilites

[02:17] <geekosaur> (perl6 implementations do work, but are not commonly available in a convenient way)

[02:18] <Brun0L3z> Thanks alot guys. you did help.

[02:18] <Mouq> NP Brun0L3z

[02:18] <lue> .oO(The terrible way would be to generate random names to put in front of the TLD and then ping the website name you got out of it.)

[02:20] <Mouq> lue: maybe concatenate dictionary words?

[02:21] <Brun0L3z> Lue: you have a brilliant idea

[02:21] <lue> For starters, but doing just that stereotypes against illegible gibberish names, such as qqqqqqzzzzzzzqqqqqqasdfasdfasdfhjkl.com :)

[02:22] <lue> Mouq: ^

[02:24] <lue> Brun0L3z: it was a half-joking answer. You could of course do that (preferably pulling actual words from a dictionary, like Mouq suggested), but if there's some way to get a list of registered domain names, that would most likely be better.

[02:25] <geekosaur> whois servers do offer that access --- limited and expensive

[02:25] <Brun0L3z> Lue: what will that better way be?

[02:26] <Mouq> Brun0L3z: Are you sure you aren't trying to solve your problem in the wrong way? You haven't given a purpose

[02:29] <Mouq> (There are, btw, 2_441_240 .au domains. The place a database would be found is: http://www.auda.org.au/ but they don't give public access to it other than whois)

[02:36] <lue> I'm assuming auda is the Australian domain "manager"? (like deNIC for .de)

[02:37] <BenGoldberg> What possible use could there be for a list of all 2.4 million .au domains?

[02:37] <yoleaux> 10:15 EST <FROGGS> BenGoldberg: This issue might need to go to RT (via [email@hidden.address] https://github.com/rakudo/star/issues/31

[02:37] <Brun0L3z> Lue: the .au was just an example

[02:38] <lue> I know, I was speaking to Mouq. :)

[02:39] <Brun0L3z> ok

[02:40] <Mouq> lue: Yup

[02:55] <BenGoldberg> .tell FROGGS Ok, the over-eager 'for' bug has been rakudobugged :)

[02:55] <yoleaux> BenGoldberg: I'll pass your message to FROGGS.

[02:57] <Mouq> r: (gather { .say, .take for 1..5 }).map: { last }

[02:57] <camelia> rakudo b1d675: OUTPUT«1␤2␤3␤4␤5␤»

[02:57] <Mouq> (Yes, apparently `last` works in map too, at least in rakudo. vOv)

[02:58] <Mouq> But isn't map especially supposed to be lazy?

[02:58] <Mouq> n: (gather { .say, .take for 1..5 }).map: { last }

[02:58] <camelia> niecza v24-95-ga6d4c5f: ( no output )

[02:58] <Mouq> n: (gather { .say, .take for 1..5 }).map: { .say; last }

[02:58] <camelia> niecza v24-95-ga6d4c5f: ( no output )

[02:58] <Mouq> :?

[02:59] <BenGoldberg> rn: .say, last for gather { .say, .take for 1..2 }

[02:59] <camelia> rakudo b1d675: OUTPUT«1␤2␤1␤»

[02:59] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«1␤1␤»

[03:00] <BenGoldberg> rn: map { .say; last } gather { .say, .take for 1..2 }

[03:00] <camelia> rakudo b1d675: OUTPUT«===SORRY!=== Error while compiling /tmp/eW25W3wqp6␤Two terms in a row␤at /tmp/eW25W3wqp6:1␤------> map { .say; last } ⏏gather { .say, .take for 1..2 }␤    expecting any of:␤        argument list␤        postfix␤        state…»

[03:00] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«===SORRY!===␤␤Strange text after block (missing comma, semicolon, comment marker?) at /tmp/leEpwGTfDB line 1:␤------> map { .say; last }⏏ gather { .say, .take for 1..2 }␤␤Parse failed␤␤»

[03:00] <BenGoldberg> rn: map { .say; last }, gather { .say, .take for 1..2 }

[03:00] <camelia> niecza v24-95-ga6d4c5f: ( no output )

[03:00] <camelia> ..rakudo b1d675: OUTPUT«1␤2␤1␤»

[03:01] <Mouq> May want to include that in the report

[03:01] <BenGoldberg> rn: say map { $_ if $_ == 1 }, gather { .say, .take for 1..2 }

[03:01] <camelia> rakudo b1d675: OUTPUT«1␤2␤1␤»

[03:01] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«1␤2␤1 ␤»

[03:01] <BenGoldberg> rn: say map { $_ if $_ == 1 }, gather 1..2

[03:01] <camelia> rakudo b1d675, niecza v24-95-ga6d4c5f: OUTPUT«␤»

[03:02] <BenGoldberg> rn: say map { $_ if $_ == 1 }, 1..2

[03:02] <camelia> rakudo b1d675: OUTPUT«1␤»

[03:02] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«1 ␤»

[03:03] <BenGoldberg> The extra ' ' is a niecza bug?

[03:03] <Mouq> Yeah, that's strange. But note that in this case, it *should* print "1␤2␤1␤"

[03:04] <Mouq> AFAICT

[03:05] <BenGoldberg> Which one?

[03:06] <BenGoldberg> err, which bit of code?

[03:06] <BenGoldberg> rn: map { .say; last }, gather { .say, .take for 1..2 }

[03:06] <camelia> niecza v24-95-ga6d4c5f: ( no output )

[03:06] <camelia> ..rakudo b1d675: OUTPUT«1␤2␤1␤»

[03:06] <Mouq> BenGoldberg: Sorry, yes, that one

[03:07] <BenGoldberg> rn: map { say('<', $_, '>'); last }, gather { .say, .take for 1..2 }

[03:07] <camelia> niecza v24-95-ga6d4c5f: ( no output )

[03:07] <camelia> ..rakudo b1d675: OUTPUT«1␤2␤<1>␤»

[03:07] <Mouq> Err no

[03:07] <BenGoldberg> rn: map { say('<', $_, '>'); }, gather { .say, .take for 1..2 }

[03:07] <camelia> niecza v24-95-ga6d4c5f: ( no output )

[03:07] <camelia> ..rakudo b1d675: OUTPUT«1␤2␤<1>␤<2>␤»

[03:07] <Mouq> rn: say map { $_ if $_ == 1 }, gather { .say, .take for 1..2 } # THIS one

[03:07] <camelia> rakudo b1d675: OUTPUT«1␤2␤1␤»

[03:07] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«1␤2␤1 ␤»

[03:08] <BenGoldberg> Aside from the spurious space that niezca outputs, they're both doing it right.

[03:08] <Mouq> Well, that's the easy case ;)

[03:08] * Mouq needs to → bed

[03:09] <BenGoldberg> rn: map { say 'alive'; 1 }, gather { .take for 1..2 }

[03:09] <camelia> niecza v24-95-ga6d4c5f: ( no output )

[03:09] <camelia> ..rakudo b1d675: OUTPUT«alive␤alive␤»

[03:09] <BenGoldberg> rn: my @a := map { say 'alive'; 1 }, gather { .take for 1..2 }

[03:09] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«Potential difficulties:␤  @a is declared but not used at /tmp/FRDQUe3dSS line 1:␤------> my ⏏@a := map { say 'alive'; 1 }, gather { .␤␤»

[03:09] <camelia> ..rakudo b1d675: OUTPUT«alive␤alive␤»

[03:09] <Mouq> I lazily offer you my luck Ben, but only if you request it

[03:09] <BenGoldberg> rn: my @a = map { say 'alive'; 1 }, gather { .take for 1..2 }

[03:09] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«Potential difficulties:␤  @a is declared but not used at /tmp/Pw5gDLb4p7 line 1:␤------> my ⏏@a = map { say 'alive'; 1 }, gather { .t␤␤alive␤alive␤»

[03:09] <camelia> ..rakudo b1d675: OUTPUT«alive␤alive␤»

[03:10] <BenGoldberg> Thanks, luck might be necesary :)

[03:10] *** preflex_ joined
[03:10] *** ChanServ sets mode: +v preflex_

[03:10] <BenGoldberg> rn: my @a; @a = map { say 'alive'; 1 }, gather { .take for 1..2 };

[03:10] <camelia> rakudo b1d675, niecza v24-95-ga6d4c5f: OUTPUT«alive␤alive␤»

[03:10] <BenGoldberg> rn: my @a; map { say 'alive'; 1 }, gather { .take for 1..2 }; @a = 1;

[03:10] <camelia> niecza v24-95-ga6d4c5f: ( no output )

[03:10] <camelia> ..rakudo b1d675: OUTPUT«alive␤alive␤»

[03:10] <BenGoldberg> Aha!

[03:10] *** preflex_ is now known as preflex

[03:11] <Mouq> BenGoldberg: There is always /msg camelia ... too :)

[03:11] *** Mouq left
[03:11] <BenGoldberg> niecza sees that the map {} is in sink context, and doesn't even evaluate it, since in perl6, we're not supposed to use map for side effects.

[03:11] <BenGoldberg> I think.

[03:13] *** Ben_Goldberg joined
[03:15] <Ben_Goldberg> rn: map { say 'alive' }, 1..2;

[03:15] <camelia> niecza v24-95-ga6d4c5f: ( no output )

[03:15] <camelia> ..rakudo b1d675: OUTPUT«alive␤alive␤»

[03:20] *** tokuhirom joined
[03:43] <colomon> no, using map for side effects is allowed in p6.  (Though personally it makes me sad.)

[03:47] *** GlitchMr joined
[03:49] *** btyler left
[04:07] *** Brun0L3z left
[04:14] *** jnap left
[04:21] *** sivoais left
[04:22] *** kshannon left
[04:25] *** kshannon joined
[04:26] *** cibs joined
[04:33] *** sivoais joined
[04:41] <diakopter> r: say map &map, &map, &map, &map, &map

[04:41] <camelia> rakudo b1d675: OUTPUT«␤»

[04:46] <diakopter> r: say eval "map "~('&map'xx 1000).join(',')

[04:46] <camelia> rakudo b1d675: OUTPUT«(timeout)»

[05:10] *** Ben_Goldberg left
[05:46] *** xilo joined
[06:12] *** xilo left
[06:17] *** denysonique joined
[06:20] *** SamuraiJack_ joined
[06:26] *** skids joined
[06:53] *** dmol joined
[07:03] *** darutoko joined
[07:06] *** mberends joined
[07:09] <diakopter> higher praise? "It's a precious tech conference for me forever." http://blog.kyanny.me/entry/2013/09/22/YAPC%3A%3AAsia_2013

[07:17] <moritz> \o

[07:17] <yoleaux> 27 Sep 2013 21:45Z <Mouq> moritz: I've been around + check the IR Clogs, I'm just busy with school and cross country

[07:17] *** Rotwang joined
[07:20] *** SamuraiJack joined
[07:20] *** SamuraiJack_ left
[07:25] *** dmol left
[07:34] *** sqirrel joined
[07:39] <dalek> rakudo/nom: 9ed945d | Mouq++ | src/Perl6/Grammar.nqp:

[07:39] <dalek> rakudo/nom: Allow #`[space] in regexes (Unrelated to RT#77522)

[07:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9ed945dd6c

[07:39] <dalek> rakudo/nom: a1a722c | (Tobias Leich)++ | src/Perl6/Grammar.nqp:

[07:39] <dalek> rakudo/nom: Merge pull request #210 from Mouq/nom

[07:39] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=77522

[07:39] <dalek> rakudo/nom: 

[07:39] <dalek> rakudo/nom: Allow #`[space] in regexes (Unrelated to RT#77522)

[07:39] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=77522

[07:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a1a722cb30

[07:46] <FROGGS_> moritz: if there are no objections from jnthn about star-RC2, then you can release/upload it

[07:55] <moritz>   FROGGS_ what's the URL?

[07:58] <FROGGS_> moritz: http://froggs.de/perl6/rakudo-star-2013.09-RC2.msi

[07:59] <diakopter> is it signed?

[08:01] <moritz> uploaded as http://rakudo.org/downloads/star/rakudo-star-2013.09.msi FROGGS_++

[08:01] <moritz> or rather FROGGS++

[08:03] <FROGGS_> cool!

[08:06] <diakopter> no, not signed.. we'll have to fix that soon. I'll work it out with Dan

[08:07] <diakopter> when I see him next weekend at ppw

[08:08] <FROGGS_> diakopter: that would be cool

[08:09] <diakopter> we'll figure out which domain would be better to get a code-signing cert for..

[08:09] <diakopter> domain/business entity..

[08:09] <diakopter> might be able to get perl foundation <shrug>

[08:16] <moritz> what kind of cert does one need for code signing?

[08:23] <FROGGS_> I guess one that we don't put in git repositories :o)

[08:24] <moritz> aye :-)

[08:24] <moritz> I recently got an SSL certificate for my website (for free) signed by a CA which is included in the trust list of all major browsers

[08:24] <FROGGS_> but I guess these certs can be pretty expensive, no?

[08:25] <FROGGS_> for free?

[08:25] <moritz> aye

[08:25] <FROGGS_> CAcert?

[08:25] <moritz> no, that's not in the trust list :-)

[08:25] <FROGGS_> yeah, just in a few

[08:25] <moritz> startssl.com

[08:26] <moritz> they just validate that you can read emails to webmaster@<domain>

[08:26] <FROGGS_> ahh, one year valid, but that is okay for a webiste

[08:27] <moritz> and now, https://perlgeek.de/ works

[08:27] <moritz> but I would be surprised if code signing certs are similarly easy to obtain

[08:28] <FROGGS_> and one year would not be enough

[08:28] <FROGGS_> three years might be alright for R*

[08:29] <FROGGS_> bbl

[08:30] *** bbkr_ left
[08:37] *** bbkr joined
[08:47] *** denis_boyun joined
[08:50] *** PacoAir joined
[08:51] *** tipdbmp joined
[08:52] *** denis_boyun left
[08:53] *** denisboyun joined
[08:54] *** spider-mario joined
[09:00] <dalek> Perlito: 28f05f9 | (Flavio S. Glock)++ | / (3 files):

[09:00] <dalek> Perlito: Perlito5 - grammar - lexical subs

[09:00] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/28f05f9ba8

[09:02] *** bbkr left
[09:05] *** bbkr joined
[09:27] *** grondilu joined
[09:28] <masak> good antenoon, #perl6

[09:28] <jnthn> o/ masak

[09:34] <diakopter> o/

[09:46] *** sqirrel left
[09:47] *** SamuraiJack left
[09:55] *** bbkr left
[10:02] *** bbkr joined
[10:05] *** fhelmberger joined
[10:07] *** fhelmberger left
[10:07] <grondilu> rn:  my @a; @a[^10][0] »=» 0; say @a[5][0]

[10:07] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«===SORRY!===␤␤Cannot hyper with = because list assignment operators are too fiddly at /tmp/pkPxcVTNpM line 1:␤------> my @a; @a[^10][0] »=»⏏ 0; say @a[5][0]␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niec…»

[10:07] <camelia> ..rakudo a1a722: OUTPUT«(Any)␤»

[10:07] <grondilu> rn:  my @a; @a[^10][0] = 0; say @a[5][0]

[10:07] <camelia> rakudo a1a722, niecza v24-95-ga6d4c5f: OUTPUT«(Any)␤»

[10:08] <jnthn> @a[^10] gives back a parcel of containers and [0] indexes it

[10:08] <jnthn> rn:  my @a; @a[^10][0] = 0; say @a[0][0]

[10:08] <camelia> rakudo a1a722, niecza v24-95-ga6d4c5f: OUTPUT«0␤»

[10:09] <jnthn> rn:  my @a; @a[^10]>>.[0] = 0 xx *; say @a[5][0] # maybe, but not sure

[10:10] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«(timeout)»

[10:10] <camelia> ..rakudo a1a722: OUTPUT«No such method 'Any' for invocant of type 'Int'␤  in sub METAOP_HYPER_CALL at src/gen/CORE.setting:16206␤  in block  at /tmp/VAtV1xpo4k:1␤␤»

[10:10] <jnthn> Apparently not :)

[10:12] *** Rotwang left
[10:28] *** sqirrel joined
[10:32] <masak> if I'm doing a -n or -p thing, is there a way to get the *path name* of the currently-being-read-from filehandle?

[10:34] <masak> to my surprise, @*ARGS is empty in such a case.

[10:35] <masak> I'm not 100% sure it should be consumed by -n/-p

[10:35] <masak> (and if it *is* the path name should definitely be accessible afterwards)

[10:36] <masak> $*ARGFILES, surprisingly, is undefined. :/

[10:37] <jnthn> How are you invoking it?

[10:41] *** ribasushi joined
[10:42] <masak> perl6 -n -e '...' my-input-file

[10:50] <jnthn> hm, surprised @*ARGS is empty there

[10:50] <jnthn> Does INIT @*ARGS or BEGIN @*ARGS work out?

[10:50] <jnthn> Those may be pre-shift, if that's what is going on.

[10:52] <lizmat> good *, #perl6!

[10:52] <lizmat> jnthn, alas, empty set can't still be added:

[10:52] <lizmat> https://gist.github.com/lizmat/6740869

[10:53] <dalek> rakudo/nom: 371c4bc | (Elizabeth Mattijsen)++ | src/core/Set (2 files):

[10:53] <dalek> rakudo/nom: Move empty set symbol to right place, but alas still doesn't work

[10:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/371c4bc5c3

[10:53] <jnthn> lizmat: I realized that since it's a term, it augments the grammar.

[10:53] <jnthn> lizmat: But we don't really like doing that in the setting; it's better to just have it in Grammar.pm.

[10:53] <jnthn> lizmat: Like we do with the other setops

[10:54] <jnthn> lizmat: So I'd pondered just doing it there.

[10:54] <lizmat> ah, ok

[10:55] <masak> jnthn: yes, both BEGIN and INIT show the original arguments.

[10:56] <jnthn> OK, well, there's a way for you then :) Given both work as r-values :)

[10:57] <jnthn> systemka, bbi20

[10:58] <masak> jnthn++

[10:58] <masak> (but I still think it shouldn't shift)

[11:10] <dalek> rakudo/nom: c779e6f | (Elizabeth Mattijsen)++ | src/Perl6/Grammar.nqp:

[11:10] <dalek> rakudo/nom: Add empty set as a term.  Not sure how to go on from here, though  :-(

[11:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c779e6f6e0

[11:10] <lizmat> specifically, say ∅ now gives TTIAR

[11:13] <masak> for the life of me, I can't make &dir select files for me that contain the substring $s.

[11:13] <masak> I just want to do &dir('directory/', :test(/$s/))

[11:13] <masak> it just returns empty :(

[11:13] <masak> someone help...

[11:14] <colomon> is $s a string or starts with s?

[11:14] <masak> $s is a string.

[11:14] <masak> 'starts with'? you may be thinking of ^

[11:14] <colomon> oh, you're right.

[11:14] <colomon> does it work if you just give it some letters there?

[11:15] <masak> heh, parsing rules make it fairly unambiguous what $s is... :)

[11:15] *** cognominal joined
[11:15] <masak> anyway, it feels really, really simple. and it doesn't work.

[11:15] <masak> (as in, it returns an empty list when the corresponding `ls directory/*$s*` doesn't)

[11:16] * masak just uses .grep for the time being

[11:16] *** iSlug joined
[11:17] <dalek> roast: 8e56a29 | (Elizabeth Mattijsen)++ | S05-metasyntax/charset.t:

[11:17] <dalek> roast: Unfudge 2 passing tests, Mouq++ I suppose  :-)

[11:17] <dalek> roast: review: https://github.com/perl6/roast/commit/8e56a29aa1

[11:17] <masak> .grep doesn't work either :( :( :(

[11:17] <colomon> masak: it's working for me.

[11:18] <masak> ok, time to compare code, then.

[11:18] <colomon> masak: my $s = "o"; dir(".", :test(/$s/))

[11:18] <masak> hmmm

[11:19] <masak> it's working now that I'm trying to put together a minimal test case.

[11:19] <masak> so false alarm, I think.

[11:19] <colomon> or something really subtle

[11:20] <lizmat> weren't there other issues weth semi-bare 's" ?

[11:20] <masak> actually, the variable is called $name in my code, so that shouldn't be it.

[11:24] <masak> my minimal example works, but not my real-world code.

[11:25] <jnthn> lizmat: Not sure that one needs .end_keyword

[11:25] <masak> something is different between them, and I can't find it.

[11:25] <lizmat> jnthn: trying without

[11:26] <jnthn> lizmat: And to make it code-gen, write an action method that makes a QAST:Op call node to &set :)

[11:26] <lizmat> ah, duh  :-)

[11:27] <colomon> masak: like I said above, try taking out the variable and see what happens.

[11:28] * masak tries

[11:28] <masak> colomon: oh! then it works.

[11:28] <masak> but... why?

[11:28] <colomon> … that's not how I expected that to go, but it's some sort of clue

[11:29] <masak> yes.

[11:29] <masak> I can only reproduce it in my real-world code so far.

[11:29] <masak> maybe I should try to minimize that instead.

[11:29] <colomon> masak: that's what I'm saying.

[11:29] <colomon> we know the basic construct works now

[11:29] <colomon> so what's different with your code?

[11:31] <lizmat> jnthn: Routine declaration requires a signature  :-(

[11:32] <lizmat> the signature is added in the settings  :-(

[11:32] <jnthn> lizmat: That sounds like an NQP error, not a Perl 6 one.

[11:32] <lizmat> make QAST::Op.new( :op('call'), :name('&set'), :node($/) );

[11:32] <masak> colomon: I think... I'm an idiot who's wasting his own time. :/

[11:33] <masak> colomon: seems I've been consistently confusing 'P102' (which exists) with 'P120' (which doesn't).

[11:33] <colomon> masak: I know I'm an idiot who's wasting his own time.

[11:33] <colomon> masak: thought it might be something like that.

[11:33] <masak> thanks for your help, and I'll try to check more closely next time.

[11:33] * masak feels out of practice at golfing :)

[11:33] <jnthn> lizmat: What's your action method look like overall?

[11:34] <colomon> masak++

[11:34] <lizmat>     method term:sym<<∅>>>($/) {

[11:34] <lizmat>         make QAST::Op.new( :op('call'), :name('&set'), :node($/) );

[11:34] <lizmat>     }

[11:34] <lizmat> basically copy/pasted from "time" and "now"

[11:34] <lizmat> except that I want it to call &set, rather than whatever the term was

[11:35] <lizmat>     method term:sym<time>($/) {

[11:35] <lizmat>         make QAST::Op.new( :op('call'), :name('&term:<time>'), :node($/) );

[11:35] <lizmat>     }

[11:35] <lizmat> for comparison

[11:35] <jnthn> I wonder if NQP doesn't know what to do with double angles in a method name or something...

[11:35] <jnthn> does method term:sym<∅>($/) { ... work?

[11:35] <lizmat> trying that already

[11:36] <masak> lunch &

[11:36] <lizmat> that seems to work

[11:42] *** pmurias joined
[11:43] <lizmat> jnthn: alas:

[11:43] <lizmat> $ perl6 -e 'say ∅'

[11:43] <lizmat> ===SORRY!=== Error while compiling -e

[11:43] <lizmat> Two terms in a row

[11:47] <grondilu> http://spectrum.ieee.org/computing/software/enerj-the-language-of-goodenough-computing  #  maybe one day perl6 will have a "Approximated" trait.

[11:52] *** iSlug left
[11:53] *** sqirrel left
[11:56] <dalek> rakudo/nom: 2813ce9 | (Elizabeth Mattijsen)++ | src/Perl6/Actions.nqp:

[11:56] <dalek> rakudo/nom: Add Action for empty set

[11:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2813ce9276

[11:56] <lizmat> brb

[12:15] <dalek> roast: dad24db | (Elizabeth Mattijsen)++ | / (8 files):

[12:15] <dalek> roast: Part 1 of .exists eradication from tests

[12:15] <dalek> roast: review: https://github.com/perl6/roast/commit/dad24dbe9a

[12:15] <lizmat> afk until much later today/timorrow

[12:18] *** kay_ joined
[12:27] *** sqirrel joined
[12:29] *** SamuraiJack joined
[12:46] *** iSlug joined
[12:56] <dalek> nqp/relex: f19118f | jnthn++ | src/vm/jvm/QAST/Compiler.nqp:

[12:56] <dalek> nqp/relex: Prepare QAST -> JVM compiler for closure changes.

[12:56] <dalek> nqp/relex: 

[12:56] <dalek> nqp/relex: We'll experiment with this on MoarVM first; this just does enough to

[12:56] <dalek> nqp/relex: have QAST -> JVM not choke on some small changes to NQP.

[12:56] <dalek> nqp/relex: review: https://github.com/perl6/nqp/commit/f19118fada

[12:56] <dalek> nqp/relex: b86227e | jnthn++ | src/vm/parrot/QAST/ (2 files):

[12:56] <dalek> nqp/relex: Prepare QAST -> Parrot for closure changes.

[12:56] <dalek> nqp/relex: 

[12:56] <dalek> nqp/relex: Again, just teaching it to ignore some new blocktypes for now.

[12:56] <dalek> nqp/relex: review: https://github.com/perl6/nqp/commit/b86227e61b

[12:56] <dalek> nqp/relex: 6ae4625 | jnthn++ | src/NQP/Actions.nqp:

[12:56] <dalek> nqp/relex: Mark methods/our subs with declaration_static.

[12:56] <dalek> nqp/relex: 

[12:56] <dalek> nqp/relex: This will be used in the closure handling changes, being tried first

[12:56] <dalek> nqp/relex: in MoarVM, to eliminate prior_invocation.

[12:56] <dalek> nqp/relex: review: https://github.com/perl6/nqp/commit/6ae4625e71

[13:04] <pmurias> jnthn: closure changes?

[13:06] <jnthn> pmurias: Killing the prior_invocation hack in MoarVM and, provided it works out, will toss it from JVM too

[13:06] <jnthn> pmurias: You may already not have such a hack. :)

[13:08] <pmurias> at the very least it has a different name ;)

[13:12] *** iSlug left
[13:13] <dalek> rakudo-js: 565367f | (Pawel Murias)++ | nqp-runtime-core/hash.js:

[13:13] <dalek> rakudo-js: Make the Bool property of Hash'es writable, it's a bit of a hack, but it's needed before we clean up our object model.

[13:13] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/565367f3d5

[13:13] <dalek> rakudo-js: 8dbf13f | (Pawel Murias)++ | nqp-runtime-core/hash.js:

[13:13] <dalek> rakudo-js: Make the to_i/to_n property of Hash'es writable, it's a bit of a hack, but it's needed before we clean up our object model.

[13:13] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/8dbf13f4d7

[13:14] *** denisboyun left
[13:24] * masak .oO( priori invocati )

[13:29] *** PZt left
[13:31] *** [Sno]_ joined
[13:31] *** [Sno]_ is now known as [Sno]

[13:32] <dalek> nqp/relex: cc3d5c8 | jnthn++ | src/NQP/Actions.nqp:

[13:32] <dalek> nqp/relex: Some declaration_static marking fixes.

[13:32] <dalek> nqp/relex: review: https://github.com/perl6/nqp/commit/cc3d5c8f91

[13:37] <pmurias> priori invocati?

[13:40] <masak> pmurias: http://harrypotter.wikia.com/wiki/Prior_Incantato

[13:40] <masak> hm, turns out it was 'priori incantatem'.

[13:41] *** darutoko left
[13:42] *** darutoko joined
[13:56] *** PZt joined
[13:58] *** silug_ joined
[14:00] *** rindolf joined
[14:24] *** sqirrel left
[14:26] *** dmol joined
[14:30] *** bbkr left
[14:32] *** bbkr joined
[14:35] *** fridim_ joined
[14:35] *** denis_boyun joined
[14:39] *** xenoterracide_ joined
[14:44] *** TgMts joined
[14:45] <dalek> rakudo-js: eb22d9a | (Pawel Murias)++ | n (4 files):

[14:45] <dalek> rakudo-js: Move the P6bigint repr to nqp-runtime-node.

[14:45] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/eb22d9a4bc

[14:45] <dalek> rakudo-js: 679af5a | (Pawel Murias)++ | README.markdown:

[14:45] <dalek> rakudo-js: Update README

[14:45] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/679af5a1a2

[14:45] <pmurias> All tests in rakudo-js back to passing ;)

[14:46] <dalek> rakudo-js: 39bb10d | (Pawel Murias)++ | nqp-runtime-node/reprs/P6bigint.js:

[14:46] <dalek> rakudo-js: Add missing file.

[14:46] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/39bb10db4b

[14:47] *** Mouq joined
[14:57] *** denis_boyun_ joined
[14:58] *** denis_boyun left
[14:59] *** sqirrel joined
[15:02] *** rindolf left
[15:05] <pmurias> masak: do you have any node.js experience?

[15:10] *** kaare_ joined
[15:11] * moritz has experience reading blog posts about node.js

[15:11] <pmurias> heh

[15:13] *** clkao joined
[15:14] <masak> pmurias: not really.

[15:14] <pmurias> :/, I need someone to consult with on what's the node.js idiomatic way of doing things

[15:15] <moritz> don't they have an IRC channel themselves?

[15:15] <moritz> or does it require too much p6 background knowledge?

[15:16] <pmurias> stuff like how should I map Perl 6 module namespace to node.js requires some p6 knowledge

[15:18] *** clkao left
[15:20] *** clkao joined
[15:22] <pmurias> moritz: the answers I get from the channel seem to imply there is no idiomatic way of doing anything

[15:22] <masak> heh.

[15:24] <pmurias> "What's the recommended way of building a module?" "Only a package.json is required." ;)

[15:27] <JimmyZ> node.js 's module is something nested installed

[15:29] *** clkao left
[15:29] <pmurias> the actually caused a test failure, as the bigints created from two copies of the bigint module where not compatible ;)

[15:30] *** clkao joined
[15:33] *** zakharyas joined
[15:33] *** sqirrel left
[15:34] <pmurias> jnthn: nqp doesn't support having two disjoint compilation targets? like having a 'js' and 'node-module' target?

[15:35] <jnthn> pmurias: Well, we have classfile and jar on JVM, which kinda works out

[15:36] *** Ulti joined
[15:37] <dalek> nqp/relex: c508bbb | jnthn++ | src/NQP/Actions.nqp:

[15:37] <dalek> nqp/relex: Tweak MAIN handling to not need auto-close.

[15:37] <dalek> nqp/relex: review: https://github.com/perl6/nqp/commit/c508bbb502

[15:41] *** dmol left
[15:42] *** TgMts left
[15:42] <jnthn> away for the evening &

[15:43] *** keta1 joined
[15:43] <keta1> Hello

[15:43] <keta1> I have installed rakudo-star-2013.09.msi on Windows 8. I also have the git commandline client that came with GitHub for Windows (git version 1.8.3.msysgit.0).

[15:43] <keta1> When I try to install something with Panda (e.g. XML::Writer) it fetches and starts to build the thing but then fails while trying to remove a .pack file in the .work\...\.git\... folder. That file is indeed write protected.

[15:43] <keta1> The full output is here: https://gist.github.com/schroeer/6743158

[15:44] <keta1> Any suggestions?

[15:44] <JimmyZ> FROGGS_: ^^

[15:44] <masak> I know Windows Git can be troublesome with permissions.

[15:45] <masak> but that's not a full analysis of the problem, mind.

[15:47] *** rindolf joined
[15:50] *** keta1 left
[15:51] *** keta1 joined
[15:53] *** ajr joined
[15:53] *** bbkr_ joined
[15:53] *** bbkr left
[15:53] *** ajr is now known as Guest18992

[15:54] *** Guest18992 is now known as ajr_

[15:54] <FROGGS_> keta1: I had that problem too, but I did not check for write permissions... Can you file a panda issue? ( https://github.com/tadzik/panda/issues )

[15:55] <FROGGS_> keta1: or you fix panda, and create a pull request :o)

[15:57] *** Rotwang joined
[15:58] <keta1> In Panda.pm:113 it does 'rm_rf'. Maybe it could emphasize that f a bit more.

[16:00] <FROGGS_> maybe do a "try chmod ..." before deleting a single file or directory?

[16:01] <FROGGS_> "try" because it might fail on other OSes

[16:01] *** bbkr_ left
[16:01] <FROGGS_> keta1: I can test on windows xp, windows 7 and linux then

[16:03] <keta1> This is not to be fixed in Panda in my opinion. It is the sub rm_rf in Shell/Command.pm that does not do what it promises.

[16:05] <keta1> That sub uses unlink() which appears to be a Rakudo built-in. Is there a way to make unlink() force-delete write protected files?

[16:05] *** bbkr joined
[16:06] <moritz> no

[16:06] <keta1> The sub should not be called rm_rf then.

[16:08] <FROGGS_> keta1: if Shell::Commands sub is called rm_rf, this this one should force the f

[16:09] <keta1> Yes. So the chmod should possibly be in there.

[16:10] <FROGGS_> yeah, that is what I think

[16:10] <FROGGS_> keta1: you can try first to remove the write-protection flag on that file with a one-liner first

[16:11] <FROGGS_> before putting that piece of code in rm_rf()

[16:16] *** clkao left
[16:16] *** clkao joined
[16:22] <keta1> I have only just now noticed that the desired module is already there as part of Rakudo Star. So the problem with Panda has lost some relevance for me. I'll see what I can do later anyway.

[16:24] <moritz> ++keta1

[16:26] *** bbkr_ joined
[16:26] *** avar left
[16:26] *** bbkr left
[16:27] *** avar joined
[16:31] *** camelo joined
[16:31] <camelo> hi

[16:31] <moritz> hi camelo 

[16:32] *** groky joined
[16:35] *** logie joined
[16:46] *** pmurias left
[16:48] *** diakopter joined
[16:48] <diakopter> .tell [Coke] looks like too many open files is killing my irssi

[16:48] <yoleaux> diakopter: I'll pass your message to [Coke].

[16:48] <diakopter> chtop

[16:48] *** diakopter left
[16:49] *** diakopter joined
[16:51] <diakopter> TimToady: is your irssi+screen being killed?

[16:51] *** bbkr joined
[16:51] *** TgMts joined
[16:52] *** bbkr_ left
[16:55] *** rindolf left
[16:59] *** denis_boyun_ left
[17:00] *** cognominal left
[17:00] *** cognominal joined
[17:01] *** japhb_ joined
[17:02] *** zakharyas left
[17:03] *** FROGGS_ is now known as FROGGS

[17:04] *** logie left
[17:05] *** mtk joined
[17:09] <keta1> moritz, FROGGS

[17:09] <FROGGS> keta1: yes?

[17:09] <keta1> moritz, FROGGS: Failed to set the mode of '...' to'0o666': chmod not implemented on Win32

[17:09] <FROGGS> hmmm

[17:10] <FROGGS> then it is time to implement it... (or find the right thing we need to do)

[17:14] <FROGGS> damn, that exception is thrown from parrot

[17:22] <FROGGS> okay, it looks like we need to call SetFileAttributes (from C), but we need to translate the flags first... I believe libapr has such a translation as a macro

[17:22] <FROGGS> I'll investigate after dinner

[17:52] <keta1> Here is something that works for me: https://gist.github.com/schroeer/6744615

[17:52] <keta1> I know that it is ugly

[17:54] <FROGGS> keta1: that is not too bad... I still think the chmod/shell call should be protected by prefixing with 'try'

[17:55] <FROGGS> moritz: what do you think... should we release a hotfix for 2013.09?

[17:56] <FROGGS> maybe with this patch, or a chmod working on windows

[17:58] <keta1> What is it supposed to do if try { chmod | ATTRIB } fails? It is then going to fail at the unlink() anyway.

[18:00] *** mtk left
[18:01] *** mtk joined
[18:10] <moritz> uh oh

[18:10] <moritz> there's a race condition with security implications in that thing

[18:11] <diakopter> oh?

[18:11] <moritz> it first sets the *read* permissions more permissive than they might have been before

[18:11] <moritz> and then deletes

[18:11] <moritz> and in between, an attacker might delete the file

[18:11] <moritz> erm

[18:11] <moritz> read the file

[18:11] <moritz> or modify

[18:13] <diakopter> attrib -r ?

[18:13] <moritz> I don't think you can modify the permissions of a file unless you're the owner

[18:13] <dalek> roast: 290d6f4 | coke++ | S02-types/array_extending.t:

[18:13] <dalek> roast: pugs fudge

[18:13] <dalek> roast: review: https://github.com/perl6/roast/commit/290d6f49d3

[18:13] <moritz> so there's not much point in changing any permissions except that of the owner

[18:14] <diakopter> also "ATTRIB -R $f" is not safe because it's not quoting/escaping the filename

[18:14] <moritz> oh, good point

[18:15] <diakopter> and if you're going to shell to attrib, you might as well just shell to del /q instead

[18:15] <keta1> It's only a draft, eh

[18:15] * moritz has gone through the RaNIW notes, and learned a lot from day 2

[18:15] <diakopter> but really, the built-in unlink shouldn't need the attrib -r, so it's a bug if it does

[18:16] <moritz> keta1: sure, and I don't mean any offense, it's just good to note such things as early as possible, IMHO

[18:16] <diakopter> keta1: are you able to push to the perl6 org? moritz or I can add you if you'd like to push to all those repos (spec, test suite, nqp)

[18:17] <diakopter> (but my memory's so poor, for all I know you've been pushing for years... :)

[18:19] <FROGGS> btw, this is from Perl5's unlink for win32:

[18:19] <FROGGS>     if (attrs & FILE_ATTRIBUTE_READONLY) {

[18:19] <FROGGS>         (void)SetFileAttributesA(filename, attrs & ~FILE_ATTRIBUTE_READONLY);

[18:19] <FROGGS>         ret = unlink(filename);

[18:19] <FROGGS>         if (ret == -1)

[18:19] <FROGGS>             (void)SetFileAttributesA(filename, attrs);

[18:21] <FROGGS> so it deletes these files by default

[18:24] *** zacts joined
[18:25] <keta1> I cannot commit to any of these and really don't plan to do so. I'd prefer if someone uses my problem report and proposal and makes something out of it. I am not a programmer.

[18:26] <FROGGS> yeah, we'll care about that

[18:34] <FROGGS> moritz: how do you think about Perl5's behaviour?

[18:36] *** darutoko left
[18:40] *** zacts left
[18:41] <FROGGS> is here somebody who likes do (re-)implement nqp::spawn aka run() for unixes?

[18:42] <moritz> FROGGS: p5's unlink sounds sane

[18:43] <FROGGS> k

[18:46] <FROGGS> hmmm, again stuff we either need to fix in parrot or move to nqp

[18:46] <FROGGS> should we infiltrate parrot and make it how we want it to be?

[18:47] <diakopter> nah; nqp is fine

[18:47] <diakopter> easier to copy to moarvm from there

[18:48] <FROGGS> true

[18:48] <FROGGS> well, for this I would steak from nqp first I guess :o)

[18:48] <FROGGS> err, moarvm

[18:48] <keta1> I am not so sure that unlink() should delete write protected files by default. Some people set that flag for a reason.

[18:49] <FROGGS> keta1: well, if you can remove it, you sorta have write permissions

[18:49] <diakopter> well, the practical question is how would you provide a "force" or "override" option

[18:49] <diakopter> if you wanted to respect the write protection

[18:49] <FROGGS> diakopter: unlink() has no such option

[18:49] <diakopter> right

[18:50] <diakopter> it was a rhetorical question :P

[18:50] <diakopter> keta1: the main thing is that since p5 has done that for decades, it's best to follow its behavior

[18:51] <FROGGS> if you want to make a wrapper that has a force-option, then you would want to call chmod first, which is NYI

[18:56] <keta1> I'll know who to sue when I accidentally delete my $$$ project

[18:56] <diakopter> :P

[18:56] <FROGGS> *g*

[18:56] *** TgMts left
[18:57] <diakopter> keta1: you'd sue Perl 5? :)

[19:01] *** zacts joined
[19:04] <keta1> diakopter: lwall and YOU

[19:05] <diakopter> heh.

[19:06] <diakopter> somehow I think you'd run into the "no warranty" warning you agree to when you use the software..

[19:07] <diakopter> "Your honor, I told my computer to delete a file, but I was lying, I didn't really want it to delete the file; the software should've known how to read my mind."  "Umm, yeah..."

[19:07] *** Mouq left
[19:12] <keta1> The software should have respected the DO_NOT_MODIFY_OR_DELETE sticker that I have put onto that file

[19:12] <keta1> But  really don't care much

[19:12] <keta1> I

[19:14] <keta1> I am surprised though that Perl5 behaves that way.

[19:15] <keta1> Both rm and Windows DEL have special 'force delete' switches. Why not unlink()?

[19:16] <diakopter> b/c it's a unix thing

[19:16] <diakopter> er, 

[19:17] <moritz> keta1: both rm and windows are high-level things, unlink() is a low-level thing

[19:17] *** mtk left
[19:17] <moritz> keta1: the real question is "why don't we have the high-level thing in Perl 6?"

[19:19] <lue> hello world o/

[19:32] *** ivanshmakov joined
[19:33] *** mtk joined
[19:34] <GlitchMr> rn: say 4.sin(fail => 84)

[19:34] <camelia> rakudo 2813ce: OUTPUT«-0.756802495307928␤»

[19:34] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«Unhandled exception: Excess arguments to Cool.sin, unused named fail␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (Cool.sin @ 1) ␤  at /tmp/esit1Ipoa1 line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4583 (ANON @ 3) ␤  at /home…»

[19:35] <GlitchMr> In my opinion, it's Rakudobug.

[19:35] <moritz> the spec says it's a nieczabug

[19:35] <GlitchMr> huh?

[19:35] <moritz> S12, section "interface consistency" or so

[19:35] <GlitchMr> But, Rakudo Perl behavior adds bugs.

[19:36] <GlitchMr> This is really unexpected.

[19:36] *** japhb_ left
[19:36] <GlitchMr> Seriously, what?

[19:37] <GlitchMr> Implicit *%_. Why?

[19:38] <GlitchMr> >>> [].sort(fail=84)

[19:38] <GlitchMr> TypeError: 'fail' is an invalid keyword argument for this function

[19:38] <GlitchMr> This sounds like a feature to add bugs, not something helpful.

[19:39] <moritz> GlitchMr: you are repeating yourself

[19:40] <GlitchMr> I guess it makes sense if you use inheritance.

[19:41] <GlitchMr> But, only if you use nextsame.

[19:41] <GlitchMr> Couldn't nextsame be implemented as a macro that modifies method signature to have *%_?

[19:42] <lue> I like the phrasing of that section: "will get an implicit *%_ parameter declared for them whether they like it or not." :)

[19:43] <GlitchMr> Still, is there a reason for such behavior other than nextsame?

[19:47] <GlitchMr> Or perhaps some syntax to call method ignoring unspecified named arguments?

[19:48] <lue> you can mark method-holding classes as hidden, it would seem.

[19:48] *** japhb_ joined
[19:49] <timotimo> php is going to eat perl6's cake with 'Hack'.

[19:49] <GlitchMr> <?php $hack = new Hack();

[19:50] * diakopter dares to ask what i Hack

[19:50] <timotimo> no, you have to use <?hh instead

[19:50] <lue> moritz: how difficult is it to turn an only sub into a multi-candidate? (e.g. use Foo::Bar has an only sub Baz, and after importing Foo::Bar I want to write make Baz multi and write a new candidate) [more]

[19:50] <diakopter> *is

[19:50] <GlitchMr> <?hh; $hack = new Hack();

[19:50] <GlitchMr> Works too.

[19:50] <timotimo> preferably you'd use <?hh //strict, though

[19:50] <diakopter> timotimo: wuts hack

[19:50] <lue> Wait. that S12 section you referenced, does it only apply to methods, or all kind of subs?

[19:51] <timotimo> diakopter: it seems like the hiphop people came up with it. gradual typing with type inference for php.

[19:51] <grondilu> rn: proto f($) { gather {*} }; multi f(Int $n) { take $n }; say f(7);

[19:51] <camelia> rakudo 2813ce, niecza v24-95-ga6d4c5f: OUTPUT«␤»

[19:53] <moritz> lue: only methods have an implicit *%_

[19:53] <GlitchMr> glitchmr@feather ~> echo '<?hh; $hack = new Hack();' | php

[19:53] <GlitchMr> PHP Fatal error:  Class 'Hack' not found in - on line 1

[19:53] <GlitchMr> Except it doesn't work.

[19:53] <GlitchMr> I need to declare Hack.

[19:54] <moritz> lue: proto Baz(|) { * }; multi Baz($original_signature_from_FOO_BAR_Baz) { Foo::Bar::Baz(|args) }; multi <your own candidate here>

[19:54] <lue> OK, so ignore where my mind was going :) . I agree with the implicit *%_, but what about an implicit *@_? Or is there some existing guarantee that you'll never need to force a *@ parameter.

[19:54] * lue makes note of the only-to-multi code for future reference.

[19:56] <timotimo> GlitchMr: why would you expect Hack to be in your distro's supplied php version?

[19:56] <GlitchMr> It's not my distro.

[19:56] <GlitchMr> It's feather.

[19:56] <timotimo> ah, right. so why expect to have it there?

[19:56] <diakopter> you have your own distro?

[20:04] <GlitchMr> No

[20:04] <dalek> nqp/nqp_delete_f: 401ed62 | (Tobias Leich)++ | src/vm/parrot/ (2 files):

[20:04] <dalek> nqp/nqp_delete_f: added our own nqp::unlink() op

[20:04] <dalek> nqp/nqp_delete_f: 

[20:04] <dalek> nqp/nqp_delete_f: Which might be able to delete write-protected files on windows.

[20:04] <dalek> nqp/nqp_delete_f: review: https://github.com/perl6/nqp/commit/401ed62382

[20:04] *** SmokeMachine joined
[20:07] <dalek> perl6-roast-data: dcaf34a | coke++ | / (5 files):

[20:07] <dalek> perl6-roast-data: today (automated commit)

[20:07] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/dcaf34a7d8

[20:13] <FROGGS> :o(

[20:13] <timotimo> what's the trick to make such a report with rakudo.jvm?

[20:13] <timotimo> i'd like to try it myself

[20:15] <FROGGS> t/test_summary?

[20:15] * timotimo is building a fresh parakudo at the moment

[20:16] * FROGGS is doing the same on good old windows xp

[20:24] *** zacts left
[20:24] *** bruges joined
[20:26] *** keta2 joined
[20:26] *** bbkr left
[20:27] *** keta1 left
[20:28] *** Mouq joined
[20:29] <FROGGS> keta2: seems like that unlink() works now... (at least like we decided how it should like :o)

[20:32] *** Mouq left
[20:38] *** rhr joined
[20:44] *** Mouq joined
[20:46] *** zakharyas joined
[20:47] <keta2> FROGGS: bravo

[20:48] *** keta2 is now known as keta1

[20:50] *** ajr_ left
[20:57] <timotimo> i'm running an old checkout of t/spec >_<

[20:57] <FROGGS> :/

[20:57] * timotimo restarts

[21:03] <dalek> nqp: 401ed62 | (Tobias Leich)++ | src/vm/parrot/ (2 files):

[21:03] <dalek> nqp: added our own nqp::unlink() op

[21:03] <dalek> nqp: 

[21:03] <dalek> nqp: Which might be able to delete write-protected files on windows.

[21:03] <dalek> nqp: review: https://github.com/perl6/nqp/commit/401ed62382

[21:04] <dalek> rakudo/nom: d3c8d57 | (Tobias Leich)++ | tools/build/NQP_REVISION:

[21:04] <dalek> rakudo/nom: use nqp's unlink, rather than parrot's

[21:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d3c8d575d7

[21:17] *** eternaleye joined
[21:21] <lue> .oO(Those edument slides are wonderful in making you feel like you *can* do work with/on NQP)

[21:21] *** benabik joined
[21:22] *** grondilu left
[21:22] <keta1> Another thing: I have an empty file "A.pm" and a file "B.pm" in the same folder. B.pm only contains the line "use A;". Running "perl6 B.pm" gives: "===SORRY!=== Invalid operation on binary string"

[21:23] <keta1> Same behaviour with more complex files of course.

[21:23] <FROGGS> hmmm

[21:24] <keta1> 'use'ing files stored at ...\rakudo\lib\parrot\5.5.0\languages\perl6\lib works though.

[21:24] *** btyler joined
[21:25] <FROGGS> PERL6LIB=. perl6 B.pm works for me

[21:25] <FROGGS> trying windows linefeeds now

[21:25] <FROGGS> no, still works

[21:26] <FROGGS> keta1: what is your PERL6LIB set to?

[21:28] <keta1> FROGGS: Thank you. PERL6LIB did the trick. Helpful error message.

[21:28] <FROGGS> keta1: so it contained garbage?

[21:28] <keta1> It was not set at all

[21:28] <FROGGS> hmmm

[21:29] <FROGGS> okay, I'll try to get this error too, to be able to improve that message

[21:30] <lue> Huh, I ran nqp's make test just for fun, and I got this: "t/nqp/19-file-ops.t ................... 1/40 src/io/utilities.c:370: failed assertion 'byte_length > 0'" is this known?

[21:30] <timotimo> already back up to S05 ...

[21:31] <FROGGS> lue: I believed this was already fixed by arnsholt++

[21:31] <FROGGS> lue: nqp/HEAD passes on linux

[21:32] <lue> not for me it seems. I'm pretty sure I still have latest parrot checkout compiled and installed.

[21:32] <lue> (because git pull in parrot a short time ago said "up-to-date")

[21:33] <lue> I think I'll be able to live with it, at least for now. I just ran make test for the fun of it.

[21:35] <FROGGS> lue: what is your nqp --version ?

[21:35] <lue> This is nqp version 2013.09-40-g401ed62 built on parrot 5.7.0 revision RELEASE_5_7_0-8-g918f0da (compiling rakudo atm, so you know)

[21:36] <FROGGS> yeah, that is HEAD

[21:36] <FROGGS> weird

[21:38] <Mouq> FROGGS: That test was failing for me too last night, Mac OS X

[21:39] <FROGGS> so something triggers it... but what?

[21:39] <lue> I'm on linux amd64 using gcc 4.8.1, if you'd like such additional info :)

[21:39] <FROGGS> linux amd64 gcc 4.7.3 with icu

[21:39] <Mouq> "not ok 15 - nqp::readallfh end of file"

[21:40] <lue> I can put the error as it appeared in a gist if you want to see the trace.

[21:40] *** PacoAir left
[21:40] <FROGGS> lue: or you make an issue

[21:41] <lue> ah yes, that would be better :)

[21:41] <FROGGS> https://github.com/perl6/nqp/issues/133

[21:41] <FROGGS> -.-

[21:41] <FROGGS> my brain does not seem to be in a fit state

[21:42] <lue> hey, I got twenty-*three* stack frames, so that's different :) .

[21:43] <lue> (I feel I should try that remove install/ tip before commenting on the issue...)

[21:43] <FROGGS> IIRC he who had the problem I filed, had gcc-4.8 too

[21:44] <lue> My processor is kinda like the original issue too, only an Athlon Dual Core instead.

[21:45] *** spider-mario left
[21:45] <lue> I'm using gentoo too! ō.o

[21:46] * lue investigates the difference between "3.11.0-gentoo" "3.10.7-gentoo"

[21:47] <lue> oh, the kernel. :)

[21:48] *** zakharyas left
[21:48] <FROGGS> gnight

[21:48] <lue> good ♞ FROGGS o/

[21:53] <timotimo> reached S26, yay

[21:54] <lue> timotimo: If I may ask, what are you doing?

[21:54] <timotimo> running a full test_summary on rakudo.jvm in the hopes of getting more percentage out of it than coke did on his last runs

[21:57] <lue> Ah, that explains the "reaching Sxx" announcements :) .

[21:57] <timotimo> yes. this process takes a long time due to being single-threaded and apparently not using the evalserver?

[21:59] <lue> .oO(On a related note, I just remembered how nice it is to have a computer that can compile rakudo in a reasonable amount of time.)

[22:05] <diakopter> lue: let alone a rakudo vm/backend that's fast enough

[22:05] <diakopter> we all want a 60 Ghz computer

[22:07] <Mouq> lue: I just upgraded my parrot to 5.7.0, and it now dies in the same way on Mac

[22:07] <Mouq> *the test

[22:08] <lue> diakopter: Anything is an improvement from a 500 MHz processor and 384 MiB of ram :)

[22:08] <lue> Mouq: you might want to add a note to the issue FROGGS mentioned earlier, that it fails with 5.7.0 on OS X as well.

[22:13] <Mouq> lue: Ok, did so

[22:13] *** porkman joined
[22:14] <porkman> d

[22:14] *** porkman left
[22:16] <lue> .oO(We've been porkman'd!)

[22:17] *** xinming_ joined
[22:24] <timotimo> my result is "total",     27349,    10,   665,  1469, 29493, 27113

[22:25] <timotimo>              "Synopsis", "pass","fail","todo","skip","plan","spec"

[22:25] <timotimo> on cokes run it was 16728,  7795,   532,  1140, 26195, 26899

[22:25] <timotimo> on parrot it is 27370,    10,   663,  1446, 29489, 27113

[22:26] <timotimo> so pretty darn close.

[22:26] <diakopter> heh.

[22:26] <timotimo> r: say 27349/27370

[22:26] <camelia> rakudo d3c8d5: OUTPUT«0.999233␤»

[22:27] *** btyler left
[22:29] <timotimo> the 10 fails are in S02: S02-magicals/env.rakudo.jvm........................Unexpected named parameter 'exists' passed

[22:30] <timotimo> potential fallout from turning exists into exists_key and exists_pos?

[22:31] <timotimo> https://gist.github.com/timo/46d8bc1822e94c4abb03 here's the file

[22:32] <Mouq> Did you get the latest roast?

[22:32] <timotimo> yes, 1 hour 30 minutes ago

[22:32] <timotimo> it's still up to date as of now

[22:33] *** BenGoldberg joined
[22:33] *** mberends left
[22:34] <timotimo> well, jnthn++ recently did a whole bunch of work on those tests for jvm =)

[22:34] <timotimo> turns out it worked well

[22:35] <timotimo> sleep &

[22:35] <BenGoldberg> rn: map { say 'alive' }, 1..2;

[22:35] <camelia> niecza v24-95-ga6d4c5f: ( no output )

[22:35] <camelia> ..rakudo d3c8d5: OUTPUT«alive␤alive␤»

[22:35] <Mouq> timotimo++ gnight

[22:36] <BenGoldberg> If 'map

[22:37] <BenGoldberg> If 'map' is done in sink context, can a perl6 implementation legally choose not to execute it?

[22:38] <Mouq> I don't know, but S02 says: "The sink statement prefix will eagerly evaluate any block or statement, throw away the results, and instead return the empty Parcel value, ()"

[22:38] <Mouq> Which implies that things should be executed in sink context

[22:39] <BenGoldberg> rn: sink: map { say 'alive' }, 1..2;

[22:39] <camelia> niecza v24-95-ga6d4c5f: ( no output )

[22:39] <camelia> ..rakudo d3c8d5: OUTPUT«alive␤alive␤»

[22:40] <BenGoldberg> rn: say join 'x', map { say 'alive' }, 1..2;

[22:40] <camelia> rakudo d3c8d5, niecza v24-95-ga6d4c5f: OUTPUT«alive␤alive␤TruexTrue␤»

[22:40] <BenGoldberg> rn: map { say 'alive' }, 1..2; say 'after';

[22:40] <camelia> rakudo d3c8d5: OUTPUT«alive␤alive␤after␤»

[22:40] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«after␤»

[22:42] <Mouq> n: sink map { say 'alive' }, 1..2

[22:43] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«===SORRY!===␤␤Action method statement_prefix:sink not yet implemented at /tmp/6SO7KRkCXH line 1 (EOF):␤------> sink map { say 'alive' }, 1..2⏏<EOL>␤␤Unhandled exception: Unable to resolve method statement_level in t…»

[22:43] * BenGoldberg blinks.

[22:43] <Mouq> n: eager map { say 'alive' }, 1..2

[22:43] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«===SORRY!===␤␤Undeclared routine:␤     'eager' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1502 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 36) ␤  at…»

[22:43] <BenGoldberg> Oh, so when I wrote 'sink:' it was treated as a label

[22:44] <Mouq> r: sink map { say 'alive' }, 1..2

[22:44] <camelia> rakudo d3c8d5: OUTPUT«alive␤alive␤»

[22:45] <Mouq> But yeah, looks like Niecza is being too lazy.

[22:45] <Mouq> r: lazy map { say 'alive' }, 1..2

[22:45] <camelia> rakudo d3c8d5: OUTPUT«===SORRY!=== Error while compiling /tmp/Gq_qY73cO0␤Undeclared routine:␤    lazy used at line 1␤␤»

[22:45] <BenGoldberg> rn: my @a; @a = map { say 'alive' }, 1..2;

[22:45] <camelia> rakudo d3c8d5, niecza v24-95-ga6d4c5f: OUTPUT«alive␤alive␤»

[22:47] <Mouq> S04:848

[22:47] <synopsebot> Link: http://perlcabal.org/syn/S04.html#line_848

[22:48] <Mouq> std: lazy map { say 'alive' }, 1..2

[22:48] <camelia> std 7c17586: OUTPUT«ok 00:00 45m␤»

[22:49] <Mouq> rn: my @a; @a := map { say 'alive' }, 1..2;

[22:49] <camelia> niecza v24-95-ga6d4c5f: ( no output )

[22:49] <camelia> ..rakudo d3c8d5: OUTPUT«alive␤alive␤»

[22:49] <Mouq> And I think there rakudo is being over-eager

[22:51] <Mouq> Oh, actually: S04:1392

[22:51] <synopsebot> Link: http://perlcabal.org/syn/S04.html#line_1392

[22:55] <Mouq> rnp: eval "say '$_: ';"~$_~' {say "ok"}' for <do once gather lift lazy sink try quietly contend async>

[22:55] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«do: ␤ok␤Unhandled exception: Undeclared routine:␤        'once' used at line 1␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1502 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 line 5651 (STD.sorry @ 6) ␤  at /home/p6eval/niecza/src/STD.pm6 line 5429 …»

[22:55] <camelia> ..rakudo d3c8d5: OUTPUT«do: ␤ok␤once: ␤ok␤gather: ␤===SORRY!=== Error while compiling eval_3␤Undeclared routine:␤    lift used at line 1. Did you mean '&list'?␤␤»

[22:55] <camelia> ..pugs: OUTPUT«do: ␤ok␤once: ␤gather: ␤ok␤lift: ␤lazy: ␤sink: ␤try: ␤ok␤quietly: ␤contend: ␤async: ␤ok␤»

[22:55] <Mouq> rnp: try eval "print '$_: ';"~$_~' {say "ok"}' for <do once gather lift lazy sink try quietly contend async>

[22:55] <camelia> pugs: OUTPUT«do: ok␤*** Cannot cast from VBool True to VCode (VCode)␤    at /tmp/lf5N3URAP0 line 1, column 1-43␤»

[22:55] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«do: ok␤»

[22:55] <camelia> ..rakudo d3c8d5: OUTPUT«do: ok␤once: ok␤gather: »

[22:56] *** silug_ is now known as silug

[22:56] <Mouq> rnp: try {eval "print '$_: ';"~$_~' {say "ok"}'} for <do once gather lift lazy sink try quietly contend async>

[22:56] <camelia> pugs: OUTPUT«pugs: Missing required parameters: $_␤»

[22:56] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«do: ok␤gather: try: ok␤»

[22:56] <camelia> ..rakudo d3c8d5: OUTPUT«: ok␤: ok␤: ok␤: ok␤: ok␤: ok␤: ok␤: ok␤: ok␤: ok␤»

[23:06] *** keta1 left
[23:23] <BenGoldberg> rnp: try { say $_ } for 1..5

[23:23] <camelia> pugs: OUTPUT«pugs: Missing required parameters: $_␤»

[23:23] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«1␤2␤3␤4␤5␤»

[23:23] <camelia> ..rakudo d3c8d5: OUTPUT«Nil␤Nil␤Nil␤Nil␤Nil␤»

[23:24] *** kaare_ left
[23:24] <Mouq> rnp: do { say $_ } for 1..5

[23:24] <camelia> rakudo d3c8d5: OUTPUT«===SORRY!=== Error while compiling /tmp/a2YUafY9GD␤Unsupported use of do...for; in Perl 6 please use repeat...while or repeat...until␤at /tmp/a2YUafY9GD:1␤------> do { say $_ } for 1..5⏏<EOL>␤    expecting any of:␤        po…»

[23:24] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«===SORRY!===␤␤Unsupported use of do...for; in Perl 6 please use repeat...for at /tmp/MLOuxbmeDY line 1 (EOF):␤------> do { say $_ } for 1..5⏏<EOL>␤␤Parse failed␤␤»

[23:24] <camelia> ..pugs: OUTPUT«*** ␤    Unexpected end of input␤    expecting operator␤    at /tmp/sE2wrJlBKl line 2, column 1␤»

[23:24] <Mouq> :p

[23:25] <Mouq> rnp: (do { say $_ }) for 1..5

[23:25] <camelia> pugs: OUTPUT«␤␤␤␤␤»

[23:25] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«1␤2␤3␤4␤5␤»

[23:25] <camelia> ..rakudo d3c8d5: OUTPUT«Nil␤Nil␤Nil␤Nil␤Nil␤»

[23:25] <BenGoldberg> rakudobug?

[23:26] <Mouq> vOv

[23:26] <Mouq> I would assume

[23:27] <Mouq> rnp: (my $b = { say $_ }, do $b) for 1..5 # ?

[23:27] <camelia> rakudo d3c8d5, niecza v24-95-ga6d4c5f, pugs: ( no output )

[23:27] <Mouq> rnp: ((my $b = { say $_ }), do $b) for 1..5 # ?

[23:27] <camelia> rakudo d3c8d5, niecza v24-95-ga6d4c5f, pugs: ( no output )

[23:28] <Mouq> Yeah, I'm being dumb

[23:30] *** sizz joined
[23:30] *** Rotwang left
[23:39] <BenGoldberg> rnp: for <do once gather sink try quietly contend async lift lazy > -> $a { print "$a: "; try { eval $a ~ ' {say "3ok1"}'; CATCH { say '4NOT ok1' } } }

[23:39] <camelia> pugs: OUTPUT«do: 3ok1␤once: gather: 3ok1␤sink: try: 3ok1␤quietly: contend: async: 3ok1␤lift: lazy: »

[23:39] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«do: 3ok1␤once: 4NOT ok1␤gather: sink: 4NOT ok1␤try: 3ok1␤quietly: 4NOT ok1␤contend: 4NOT ok1␤async: 4NOT ok1␤lift: 4NOT ok1␤lazy: 4NOT ok1␤»

[23:39] <camelia> ..rakudo d3c8d5: OUTPUT«do: 3ok1␤once: 3ok1␤gather: 3ok1␤sink: 3ok1␤try: 3ok1␤quietly: 4NOT ok1␤===SORRY!=== Error while compiling eval_5␤Undeclared routine:␤    quietly used at line 1␤␤»

[23:40] <BenGoldberg> in spite of the try/CATCH, the error propogates upward... dunno why.

[23:40] *** camelo left
[23:41] <BenGoldberg> I probably have to put soething inside of the CATCH to tell perl that the exception has been handled

[23:48] <lue> BenGoldberg: how'd you do the bolding and coloring? Just some normal ANSI escapes?

[23:48] <Mouq> rnp: for <do once gather sink try quietly contend async lift lazy > -> $a { print "$a: "; try { eval $a ~ ' {say "ok"}'; CATCH { say 'NOT ok'; last } } }

[23:48] <camelia> rakudo d3c8d5: OUTPUT«do: ok␤once: ok␤gather: ok␤sink: ok␤try: ok␤quietly: NOT ok␤NOT ok␤»

[23:48] <camelia> ..pugs: OUTPUT«do: ok␤once: gather: ok␤sink: try: ok␤quietly: contend: async: ok␤lift: lazy: »

[23:48] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«do: ok␤once: NOT ok␤gather: sink: NOT ok␤try: ok␤quietly: NOT ok␤contend: NOT ok␤async: NOT ok␤lift: NOT ok␤lazy: NOT ok␤»

[23:50] <BenGoldberg> Actually, normal IRC escapes :)

[23:51] <BenGoldberg> Bold is turned on and off with control-b, green is control-k 3, and black is control-k 1.

[23:52] <BenGoldberg> 4Red is control-k 4.

[23:52] <diakopter> 4

[23:52] <diakopter> didn't work

[23:52] <BenGoldberg> No space between them.

[23:52] <diakopter>  4

[23:52] <BenGoldberg> Hmm.

[23:52] <diakopter> didn't work

[23:52] <Mouq> diakopter: do you mean ^V+^K

[23:52] <BenGoldberg> Check your irc client manual, then.

[23:53] <Mouq> 4

[23:53] <Mouq> Nope

[23:53] <Mouq> Well

[23:54] <Mouq> 4test

[23:55] <Mouq> Irssi uses ^c

[23:59] <BenGoldberg> rn: printf '%d,%dX', $_ % 16, $_ / 16 for (0..255).pick(*)

[23:59] <camelia> rakudo d3c8d5: OUTPUT«2,7X11,8X15,6X8,15X10,3X5,7X14,4X15,0X15,15X13,2X9,10X7,0X12,6X1,0X5,9X5,13X6,6X9,5X15,13X2,10X2,0X8,7X12,15X0,6X5,12X11,1X2,2X13,6X4,15X6,14X0,1X8,8X6,4X1,6X3,8X14,15X6,15X5,1X3,9X9,12X14,3X8,3X14,2X4,10X11,14X2,5X…»

[23:59] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«13,3X6,2X2,15X7,0X10,1X9,3X8,15X7,11X4,6X2,3X1,4X12,5X0,4X6,15X14,4X14,11X11,3X6,0X8,3X15,1X2,14X9,2X2,4X15,15X3,5X9,6X15,9X10,5X13,13X7,15X12,14X7,1X12,7X4,10X8,2X12,9X0,10X14,12X3,6X10,3X12,2X4,15X14,2X0,12…»

[23:59] *** Maddingue left
[23:59] *** Maddingu1 joined
[23:59] *** Grrrr joined
