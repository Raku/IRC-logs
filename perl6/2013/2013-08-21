[00:10] *** abnorman left
[00:11] *** abnorman joined
[00:11] *** ajr_ left
[00:13] *** census left
[00:30] *** zwut00 left
[00:30] *** Targen left
[01:18] *** cooper_ is now known as cooper

[01:18] *** cooper left
[01:18] *** cooper joined
[01:26] *** aindilis joined
[01:30] *** FROGGS_ joined
[01:30] *** fridim__ joined
[01:34] *** FROGGS left
[01:41] *** FROGGS_ left
[01:46] *** dayangkun joined
[01:49] *** araujo left
[01:49] *** araujo joined
[02:01] *** dayangkun left
[02:06] *** abnorman left
[02:11] *** BenGoldberg left
[02:16] *** FROGGS joined
[02:19] *** EvanTeitelman left
[02:20] *** abnorman joined
[02:58] *** sorear joined
[03:24] *** preflex_ joined
[03:24] *** ChanServ sets mode: +v preflex_

[03:24] *** preflex left
[03:24] *** preflex_ is now known as preflex

[04:08] *** raiph left
[04:08] *** raiph joined
[04:09] *** EvanTeitelman joined
[04:13] *** raiph left
[04:26] *** Targen joined
[04:27] *** Mouq joined
[04:31] *** EvanTeitelman left
[04:46] *** daniel-s__ joined
[04:54] *** fridim__ left
[05:04] *** atroxaper joined
[05:05] *** Mouq left
[05:08] *** jeff_s1 left
[05:08] *** jeff_s1 joined
[05:11] *** xilo left
[05:36] *** SamuraiJack joined
[05:52] *** FROGGS left
[05:53] *** xenoterracide left
[05:57] *** hummeleBop joined
[05:57] *** xenoterracide joined
[06:00] <moritz> \o

[06:05] *** FROGGS joined
[06:11] *** jercos joined
[06:19] *** denisboyun joined
[06:23] <[Coke]> moritz: just coming online?

[06:25] <lizmat> good *, #perl5!

[06:25] <moritz> [Coke]: yes

[06:26] <dalek> perl6-roast-data: 7754068 | coke++ | / (5 files):

[06:26] <dalek> perl6-roast-data: today (automated commit)

[06:26] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/77540687a1

[06:26] <dalek> perl6-roast-data: b7e1698 | coke++ | perl6_pass_rates:

[06:26] <dalek> perl6-roast-data: Fix date - running after midnight somewhere...

[06:26] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/b7e1698f49

[06:26] <moritz> was there any parrot release yesterday?

[06:27] * [Coke] ... there, now I can go to sleep.

[06:27] * nwc10 was wondering exactly that

[06:27] <labster> my email says there was parrot release.

[06:27] <lizmat> moritz: there is an announcement

[06:27] <moritz> oh right

[06:27] <nwc10> e-mail as of 6 minutes ago?

[06:28] <[Coke]> #parrot claims so

[06:28] <tadzik> this emails also informs of pmurias++ passing GSoC! \o/

[06:28] <moritz> my mixture of mail rules means that the announcement is sorted into my p6l folder, where I didn't actively look for it

[06:28] <labster> fixed one bug?

[06:28] <moritz> tadzik: midterms

[06:28] <tadzik> oh?

[06:28] <nwc10> I think that the e-mail only arrived 7 minutes ago

[06:28] <moritz> All three of our GSoC students passed their midterms, and are on track to complete their Parrot and Perl 6 projects on time.

[06:29] <tadzik> oh, misread

[06:29] <moritz> tadzik: even better, we can expect more awesomeness from pmurias++

[06:29] <tadzik> so gsoc is a lot longe these days

[06:29] <tadzik> of course :)

[06:29] <nwc10> labster: the news is consistent with the recent commit history: https://github.com/parrot/parrot/commits/master

[06:31] <labster> Well, no rush on upgrading then, we don't even use PCRE, right?

[06:32] <moritz> labster: we don't. But if it fixes build issues with PCRE, then we won't have to pass --without-pcre to parrot's Configure.pl anymore :-)

[06:36] <lizmat> r: say $^N  # note it doesn't catch the Perl5 special var check

[06:36] <camelia> rakudo bda446: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/dDEbHNRo8p␤Cannot use placeholder parameter $^N in the mainline␤at /tmp/dDEbHNRo8p:1␤------> [32msay $^N[33m⏏[31m  # note it doesn't catch the Perl5 spec[0m␤»

[06:37] <lizmat> so I guess all of the $^letter handling wrt to Perl 5 variables, can be removed

[06:37] <lizmat> I guess that predates the invention of placeholder variables

[06:37] <lizmat> TimToady: do you agree ?

[06:37] <moritz> std: / $^N /

[06:37] <camelia> std 06636e4: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of $^N variable; in Perl 6 please use $/[*-1] at /tmp/TY1D63p4b0 line 1:␤------> [32m/ $^N [33m⏏[31m/[0m␤Parse failed␤FAILED 00:00 42m␤»

[06:38] <moritz> r: / $^N /

[06:38] <camelia> rakudo bda446: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/xPVsSpkA_6␤Cannot use placeholder parameter $^N in the mainline␤at /tmp/xPVsSpkA_6:1␤------> [32m/ $^N[33m⏏[31m /[0m␤»

[06:39] <lizmat> r: sub a { say $^N }; a("foo")

[06:39] <camelia> rakudo bda446: OUTPUT«foo␤»

[06:39] <FROGGS> lizmat: is it about just stripping this? rakudo/src/Perl6/Grammar.nqp:1590:    # TODO: $^X and other "caret" variables

[06:39] <lizmat> std: sub a { say $^N }; a("foo")

[06:39] <camelia> std 06636e4: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of $^N variable; in Perl 6 please use $/[*-1] at /tmp/nRsKMy8Pzf line 1:␤------> [32msub a { say $^N [33m⏏[31m}; a("foo")[0m␤Parse failed␤FAILED 00:00 43m␤»

[06:39] <lizmat> I think std is wrong here

[06:40] <lizmat> it's about stripping the entire special_variable token

[06:40] <lizmat> 200+ lines

[06:41] <lizmat> since that can now be handled by X::Syntax::Perl5Var

[06:43] <FROGGS> 'now' means it is already in nom?

[06:43] <TimToady> see S06:1966

[06:43] <synopsebot> Link: http://perlcabal.org/syn/S06.html#line_1966

[06:43] *** kaleem joined
[06:44] <lizmat> aha, so nom is wrong  in that respect

[06:45] <lizmat> but otherwise, TimToady, would you agree it is a good thing to move special_variable handling to P6 user space?

[06:45] <lizmat> instead of in the grammar ?

[06:46] <TimToady> I dunno, it relies on LTM currently with lots of special lookahead dwimmery

[06:46] <lizmat> well, it currently doesn't work

[06:46] <lizmat> r: say $*

[06:46] <camelia> rakudo bda446: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/lgIvcHUKBG␤Non-declarative sigil is missing its name␤at /tmp/lgIvcHUKBG:1␤------> [32msay [33m⏏[31m$*[0m␤    expecting any of:␤        argument list␤        prefix or term␤        prefix or meta-prefix␤»…

[06:46] <diakopter> where is the parrot announcement

[06:47] <lizmat> r: say $"

[06:47] <labster> diakopter: in my email box.

[06:47] <camelia> rakudo bda446: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/AnOGdUUcY6␤Non-declarative sigil is missing its name␤at /tmp/AnOGdUUcY6:1␤------> [32msay [33m⏏[31m$"[0m␤    expecting any of:␤        argument list␤        prefix or term␤        prefix or meta-prefix␤»…

[06:47] <lizmat> r: say $'

[06:47] <camelia> rakudo bda446: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/bjdlifmvql␤Non-declarative sigil is missing its name␤at /tmp/bjdlifmvql:1␤------> [32msay [33m⏏[31m$'[0m␤    expecting any of:␤        argument list␤        prefix or term␤        prefix or meta-prefix␤»…

[06:47] <moritz> it was sent to perl6-announce too, so it'll eventually appear on planetsix too

[06:47] <lizmat> I was appropriating that error into Perl5Var and then turn it into what STD gives

[06:48] <labster> diakopter: this is the relevant bit of the changes, though. https://github.com/parrot/parrot/commit/2eb1a37d43b9cef4d4466e7ffb32bb764180f363

[06:48] <lizmat> $ perl6 -e 'say $"'

[06:48] <lizmat> ===SORRY!=== Error while compiling -e

[06:48] <lizmat> Unsupported use of $" variable; in Perl 6 please use .join() method

[06:48] <diakopter> okay, I thought you were saying there was some non-standard announcement

[06:50] *** crab2313 joined
[06:50] <TimToady> and not all of it can be based on triggering by an error

[06:50] <TimToady> std: $/ = "\n";

[06:50] <camelia> std 06636e4: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of $/ variable as input record separator; in Perl 6 please use the filehandle's :irs attribute at /tmp/jYCxINWN1p line 1:␤------> [32m$/[33m⏏[31m = "\n";[0m␤Parse failed␤FAILED 00:00 41m␤»

[06:50] <TimToady> that's actually legal P6

[06:51] <[Coke]> r: say [Coke]

[06:51] <camelia> rakudo bda446: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/AEzTR4o_jp␤Undeclared name:␤    Coke used at line 1. Did you mean 'Code'?␤␤»

[06:52] <lizmat> r: $/ = "\n"

[06:52] <camelia> rakudo bda446:  ( no output )

[06:52] <lizmat> TimToady: so you're saying that rakudo has it wrong, or std ?

[06:52] <TimToady> rakudo

[06:53] <lizmat> as in, you cannot assign to $/, and if you do, you're assuming it is a P5 variable

[06:53] <TimToady> yes

[06:54] <TimToady> unfortunately assignment to $/ is a common idiom in P5

[06:54] <lizmat> and preferablly at compile time of course

[06:54] <TimToady> that's what STD does

[06:56] <TimToady> std: $/ [=] "\n";

[06:56] <camelia> std 06636e4: OUTPUT«Potential difficulties:␤  Useless use of [] around infix op at /tmp/7eozoLelWC line 1:␤------> [32m$/ [33m⏏[31m[=] "\n";[0m␤ok 00:00 43m␤»

[06:56] <TimToady> snerk

[06:56] <TimToady> std: ($/) = "\n";

[06:56] <camelia> std 06636e4: OUTPUT«ok 00:00 44m␤»

[06:56] <TimToady> std: $/ := "\n";

[06:56] <camelia> std 06636e4: OUTPUT«ok 00:00 43m␤»

[06:57] <TimToady> I think P6 $/ typically uses binding semantics underneath anyway

[06:57] <lizmat> do you have an opinion on keeping special_variable token in the grammar otherwise

[06:59] <lizmat> removing that and put all the specific feedback info in the X::Syntax::Perl5Var class ?

[06:59] <TimToady> it would probably be possible to move most of the special variable detection into error analysis, but some of them would have eaten a twigil without a \w, and others that aren't followed by a twigil would have to look ahead to see if there was something P5ish

[06:59] <lizmat> brb

[07:00] *** brrt joined
[07:00] <TimToady> I guess it would be easier to turn off the P5ism detection if it weren't in the grammar

[07:00] <TimToady> might cut down on lexer size a little too

[07:01] <FROGGS> masak: I think https://github.com/perl6/roast/blob/master/integration/advent2009-day02.t#L23 is against http://perlcabal.org/syn/S02.html#The_.fmt_method

[07:02] <FROGGS> TimToady: do you agree that the directive count of .fmt/sprintf must match the argument count passed?

[07:03] <TimToady> well, the use case for the allowing them to disagree is marginal at best

[07:04] <TimToady> and one can always trim or extend a list of arguments to suit

[07:06] <TimToady> also, depends on how you count "argument", since some formats are applied repeatedly to arrays/hashes by .fmt

[07:06] <TimToady> nr: say <1 2 3>.fmt("%5.2f")

[07:07] <camelia> rakudo bda446, niecza v24-88-g1f87209: OUTPUT« 1.00  2.00  3.00␤»

[07:07] <TimToady> like that

[07:07] *** abnorman left
[07:10] <dalek> perl6-bench: 7dac837 | (Timo Paulssen)++ | comp (2 files):

[07:10] <dalek> perl6-bench: add rakudo-jvm to the components

[07:10] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/7dac8371fa

[07:10] <dalek> perl6-bench: 3191de6 | (Geoffrey Broadwell)++ | comp (2 files):

[07:10] <dalek> perl6-bench: Fix compiler naming to be more VM-neutral

[07:10] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/3191de6562

[07:10] <dalek> perl6-bench: 06d0b53 | (Geoffrey Broadwell)++ | components.json:

[07:10] <dalek> perl6-bench: Update rakudo-jvm build steps to current procedure as of 2013-08-18

[07:10] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/06d0b534a0

[07:10] <dalek> perl6-bench: 61c4213 | (Geoffrey Broadwell)++ | components.json:

[07:10] <dalek> perl6-bench: nqp repo renames must be reflected in build instructions for things that use nqp

[07:10] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/61c421313f

[07:10] <dalek> perl6-bench: a48bb92 | (Geoffrey Broadwell)++ | perl6/rc-forest-fire:

[07:10] <dalek> perl6-bench: Type checking of array contents in new Rakudo catches type bug in rc-forest-fire; to make it fair across all perl6en, just de-constrain the array

[07:10] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/a48bb920a7

[07:10] <FROGGS> TimToady: I am talking about the call to sprintf

[07:10] <TimToady> well, you mentioned .fmt

[07:11] <FROGGS> TimToady: so this is invalid when we use nqp::sprintf, because only the key is used: https://github.com/perl6/roast/blob/master/integration/advent2009-day02.t#L24

[07:11] <TimToady> but yes, sprintf should probably enforce agreement, at compile time if it can

[07:12] <lizmat> TimToady: ok, clear, need to run errands now, bbl &

[07:13] <FROGGS> TimToady: and we are thinking that if you use directives like %$3s, the rule is more like "every arg has to be used"

[07:14] *** crab2313 left
[07:15] <TimToady> nr: say { :a(1), :b(2) }.fmt('%s:%0.0s', ' -- ')

[07:15] <camelia> niecza v24-88-g1f87209: OUTPUT«a:1 -- b:2␤»

[07:15] <camelia> ..rakudo bda446: OUTPUT«a: -- b:␤»

[07:15] <TimToady> it's possible to print something with 0 width, I guess

[07:15] <TimToady> well, except in niecza :)

[07:16] *** crab2313 joined
[07:17] <TimToady> given we can do 0 width, it's more reasonable to enforce the need for both a key and a value field, but I'm not sure this use of .fmt rises to the same level of error-proneness as an sprintf with the wrong number of args

[07:18] <FROGGS> nqp-jvm: say(sprintf("%0.0s", ["test test, can you 'ear me?"]))

[07:18] <camelia> nqp-jvm: OUTPUT«Lexical '&sprintf' not found␤  in <anon>␤  in <anon>␤  in eval␤  in evalfiles␤  in command_eval␤  in command_line␤  in MAIN␤  in <anon>␤  in <anon>»

[07:18] <TimToady> nr: say { :a(1), :b(2) }.fmt('%s:', ' -- ')

[07:18] <camelia> rakudo bda446, niecza v24-88-g1f87209: OUTPUT«a: -- b:␤»

[07:18] <FROGGS> nqp-jvm: say(nqp::sprintf("%0.0s", ["test test, can you 'ear me?"]))

[07:18] <camelia> nqp-jvm: OUTPUT«No registered operation handler for 'sprintf'␤  in compile_op␤  in as_jast␤  in as_jast␤  in <anon>␤  in process_args␤  in <anon>␤  in <anon>␤  in compile_op␤  in as_jast␤  in as_jast␤  in <anon>␤  in compile_all_the_stmts␤  in as_jast␤  in as_jast␤  in <anon>␤  in compi…

[07:18] <FROGGS> huh?

[07:18] <TimToady> neither niecza nor rakudo has trouble with a short .fmt on a key/value pair

[07:19] <FROGGS> TimToady: that works locally using nqp::sprintf

[07:19] <TimToady> and there are probably lots of times you're interested in only the key, so we could support that as a special case

[07:19] <FROGGS> (it prints nothing

[07:19] <FROGGS> )

[07:19] <TimToady> why are you trying to print an array?

[07:20] <FROGGS> TimToady: well, parrot's sprintf doesnt care about too many args, nqp::sprintf does

[07:20] <FROGGS> TimToady: nqp's op is like that

[07:20] <TimToady> right, no variadics

[07:21] <FROGGS> hmmm, maybe rakudo can let nqp parse the directives, return the argument count, and the decide only to pass the key

[07:22] <FROGGS> the would make Hash.fmt("%s") work

[07:22] <FROGGS> but not sprintf( "%s", Hash ) I think

[07:22] *** abnorman joined
[07:23] <TimToady> well, not if Hash flattens into an argument list

[07:23] <TimToady> sprintf( "%s", $hash ) would work

[07:23] *** _daniel-s__ joined
[07:23] <TimToady> fsdo work

[07:24] *** cognominal joined
[07:24] <TimToady> arguably, Array.fmt("%s %s") could figure out it should do .kv

[07:25] <FROGGS> hmmm

[07:25] <TimToady> well, more likely "%d: %s\n" or some such

[07:25] <FROGGS> what if you have several directives and a mix of hashes and arrays? It can't decide to only pass keys or not

[07:26] <TimToady> .fmt never has a mix

[07:26] <FROGGS> but sprintf("", .... )

[07:26] <TimToady> and sprintf is 1 for 1

[07:26] *** daniel-s__ left
[07:26] <FROGGS> 1 for 1?

[07:26] <TimToady> 1 % for each arg

[07:27] <TimToady> sprintf doesn't dwim like .fmt does

[07:27] <FROGGS> ahh, because the args dont flatten

[07:28] <TimToady> if you say sprintf("%s", $array), the array stringifies before %s has its way with it

[07:28] <TimToady> likewise $hash

[07:28] *** cognominal left
[07:28] <FROGGS> yeah

[07:29] <FROGGS> so it will work out nicely

[07:29] <TimToady> we have to stay close to C semantics with sprintf, but .fmt can be dwimmier

[07:29] *** pernatiy left
[07:29] *** zakharyas joined
[07:29] <FROGGS> I know now how to fix this fwiw: perl6 -e 'say Int.fmt("%d")'

[07:29] <FROGGS> 0

[07:29] <FROGGS> err

[07:29] <FROGGS> perl6 -e 'say Inf.fmt("%d")'

[07:29] <FROGGS> get_boxed_ref could not unbox for the given representation

[07:29] <FROGGS> this ^^

[07:30] <TimToady> there's no integer representation of Inf

[07:30] <TimToady> unlike floaters

[07:30] <FROGGS> true, thinko

[07:31] <FROGGS> and %s already works

[07:31] <jnthn> morning

[07:31] <FROGGS> jnthn: morning

[07:31] <TimToady> so we'd have to treat that specially if we wanted %d to be able to do Inf

[07:31] <TimToady> jnthn: o/

[07:31] <FROGGS> r: say Inf.fmt('%s')

[07:31] <camelia> rakudo bda446: OUTPUT«Inf␤»

[07:31] <FROGGS> TimToady: and this is where the sprintf argument handler comes in handy

[07:33] <TimToady> eval: printf("%d\n", inf)

[07:33] <TimToady> or however you invoke P5 here...

[07:33] <TimToady> prints -1

[07:33] <TimToady> :)

[07:33] *** cognominal joined
[07:35] <moritz> p5eval: printf("%d\n", inf)

[07:35] <p5eval> moritz: -11

[07:35] <moritz> p5eval: sprintf("%d\n", inf)

[07:35] <p5eval> moritz: -1

[07:36] <TimToady> not sayin' we should follow p5's behavior here...

[07:36] * jnthn yawns

[07:36] * TimToady yawns, but for the opposite reason

[07:36] <jnthn> :)

[07:36] * FROGGS gets c[#]

[07:37] * diakopter yawns for monkey reasons

[07:40] *** fhelmberger joined
[07:41] *** fhelmberger left
[07:41] *** fhelmberger joined
[07:48] *** ssutch left
[07:48] <TimToady> zzz &

[08:03] *** crab2313 left
[08:12] *** ilogger2 joined
[08:12] *** ChanServ sets mode: +v ilogger2

[08:13] *** Pleiades` joined
[08:13] <masak> antenoon, '6

[08:13] *** _ilbot joined
[08:14] *** eiro joined
[08:14] *** Rix joined
[08:14] *** popl joined
[08:15] <moritz> \o masak

[08:15] *** popl left
[08:16] <masak> moritz: "You don't have permission to access /perl6/2013-08-20 on this server" for http://irclog.perlgeek.de/perl6/2013-08-20

[08:16] <masak> yesterday is "Forbidden", apparently.

[08:16] <lizmat> not for me ?

[08:16] * masak .oO( now, if you had said that about tomorrow, I wouldn't have batted an eye )

[08:17] *** cosimo joined
[08:17] <masak> hey, now it works again.

[08:17] *** itz joined
[08:17] *** Kiralexis joined
[08:17] <masak> never mind.

[08:17] <masak> anyway, it failed twice.

[08:17] <moritz> masak: might be a temporary problem with rate limiting

[08:17] <moritz> I'll have to find a better balance between not bothing users and limiting for bots

[08:18] <lizmat> surely, yesterday is just a static file ?

[08:18] *** Nei joined
[08:19] <Nei> certainly looks fine to me here ;)

[08:19] <moritz> lizmat: it's not; I should make it one, eventually

[08:20] <moritz> having it all dynamic was perfect when I still did heavy hacking on the markup

[08:21] *** popl joined
[08:21] *** popl left
[08:21] *** fhelmberger joined
[08:21] *** fhelmberger left
[08:21] *** fhelmberger joined
[08:22] *** dmol joined
[08:24] *** jeff_s1 joined
[08:26] *** pernatiy joined
[08:31] *** popl joined
[08:32] <popl> sorry for the joining and parting. I am troubleshooting an encoding issue with my terminal. :)

[08:32] *** popl left
[08:34] *** popl joined
[08:35] *** popl left
[08:38] *** sqirrel joined
[08:39] <moritz> .tell popl a good test for a UTF-8 terminal is   perl -Mcharnames=:full -CS -wle 'print "\N{EURO SIGN}"'

[08:39] * moritz notices he doesn't know anymore how to use the message bot de jour

[08:39] *** dakkar joined
[08:40] <jnthn> I fear yoleaux may have been appropriately named...

[08:41] * nwc10 was trying to remember enough French. I think it's "ajourd hui, comment s'appel le message bot du jour?"

[08:41] <nwc10> grammar and spelling likely to be a lot worse than my German

[08:42] <jnthn> .oO( "le bot message" at least *sounds* frencher... )

[08:43] *** popl joined
[08:43] <moritz> nwc10: I dimly recall that in French you do it in reverse order. If it's "message bot" in DE or EN, it's "bot de message" in FR

[08:43] *** popl left
[08:43] * masak .oO( the French. they do it backwards. )

[08:45] <masak> also, probably a bit tautological with both "ajourd'hui" and "du jour" :)

[08:46] *** dmol left
[08:46] <masak> (I don't remember how to spell French either, by the way)

[08:46] *** dmol joined
[08:46] <jnthn> masak: F-r-e-n-c-h

[08:47] <jnthn> You actually got it right :P

[08:47] <masak> thank you! you're a big help.

[08:47] <nwc10> For some reason this makes me think of

[08:47] <jnthn> yay, I did something useful today \o/

[08:47] <nwc10> My dog has no nose | How does he smell? | Terrible

[08:47] <tadzik> :D

[08:48] <tadzik> How does a duck look? | With its eyes, duh

[08:48] <tadzik> it's less wrong in Polish

[08:49] * masak somehow is reminded of http://bash.org/?25464

[08:49] <diakopter> if it looks like a duck, walks like a duck, quacks like a duck ... the duck's probably not cooked enough yet

[08:51] <masak> I wonder how many type theorists have learned about duck typing and gone "what... what are you... wh... noooooooooo"

[08:51] <jnthn> Ducks that glance at you are the tastiest. Om nom. Peeking duck.

[08:51] <masak> dåligt.

[08:52] <arnsholt> =D

[08:52] <masak> at least the peeking duck is less annoying than the pecking duck.

[08:54] <diakopter> or the pekid duck

[08:55] *** jeff_s1 left
[08:55] <jnthn> I think the animal pun in the MoarVM talk at YAPC is still my worst, though. :)

[08:55] <diakopter> jnthn: I was the only one who laughed I think

[08:55] <diakopter> I didn't mind being the only one

[08:56] *** pecastro joined
[08:56] <masak> what animal pun?

[08:56] <diakopter> mwahaha

[08:56] <jnthn> masak: The penguin in the GC slides...

[08:56] <masak> amazingly, Peking duck is made from a type of duck called Pekin duck. https://en.wikipedia.org/wiki/American_Pekin_Duck

[08:56] <masak> diakopter: I laffed, but I was forewarned :)

[08:56] <diakopter> wait, I'm thinking of another pun in the slides

[08:57] <jnthn> There was another? :)

[08:57] <diakopter> where I truly was the only one who laughed

[08:57] <diakopter> oh dear..

[08:57] *** djanatyn left
[08:58] <diakopter> I could've sworn...

[08:58] *** Tene joined
[08:58] *** ponbiki joined
[08:58] <masak> didn't pdcawley shout "what are you doing to the children, you sick bastard!?" :P

[08:58] <masak> (turning them into gentoo penguins)

[08:58] *** ponbiki is now known as Guest59420

[08:58] <jnthn> haha

[08:58] <jnthn> Probably :)

[08:58] *** djanatyn joined
[08:59] <JimmyZ> masak: http://www.oreillynet.com/etel/blog/2004/02/there_are_10_kinds_of_people_e.html

[08:59] <JimmyZ> extend

[09:00] *** gdey joined
[09:00] <JimmyZ> oh, this http://www.thinkgeek.com/product/5aa9/

[09:00] *** jeff_s1 joined
[09:01] <masak> the first comment in that first link, "There are 2 kinds of people -- those who divide people into kinds, and those who don't." -- is one of the few autopuns that I don't consider very funny. too "constructed".

[09:02] <diakopter> yeah; it's not tongue-in-cheek enough in its devastating criticism

[09:03] <diakopter> "there are 2 kinds of people -- those who write comments on this blog"

[09:03] <masak> :)

[09:03] <masak> the thinkgeek comments made me depressed. why oh why did I read the comments? :( don't read the comments.

[09:04] * diakopter doesn't see thinkgeek comments

[09:05] <masak> good.

[09:05] <brrt> slight, non-perl6-related-rant: why does everybody think that, if its over http, and somewhere json is used, and it isn't SOAP or JSON-RPC or something, its' automatically REST?

[09:05] <diakopter> "2 in base 10 is

[09:05] <diakopter> 10 in base 2"

[09:05] <diakopter> how many other pairs of those are there

[09:06] <brrt> 'cause REST means a really specific thing, and 9-out-of-10 times people who call their system REST do not try to achieve that specfic thing at all

[09:06] <masak> diakopter: "n in base 10 is 10 in base n"

[09:06] <masak> diakopter: for any n. that's what "10" means.

[09:07] <jnthn> brrt: I know. You're like "hypermedia constraint" and they're like "wtf is that" :)

[09:07] <brrt> exactly 

[09:08] <masak> "A RESTful API is only truly RESTful if it uses hypermedia to tell us about all the actions that can be performed on the curent resource, allowing us to traverse the API from a single entry point."

[09:08] <masak> I talked about this to my participants yesterday.

[09:08] <masak> a SOAP guy in the audience was not impressed.

[09:08] <jnthn> I'm never quite sure whether to treat the richardson maturity model as "it's OK to call it REST if you're on the way there" or "you shouldn't call it REST unless you're at level 3"

[09:08] <masak> he: "you still need to spec all your resources and the verbs on them!" me: "well, yeah..."

[09:09] <brrt> i'll be the first to admit that not everybody wants or needs the full flexibility of a REST model

[09:09] <jnthn> brrt: Oh, for sure.

[09:09] * masak .oO( if we don't do our REST properly they will all HATEOAS )

[09:09] <diakopter> jnthn: but I have unique urls for everything.

[09:09] <jnthn> brrt: I think when a lot of people say REST they really want to say "HTTP-based API"

[09:10] <jnthn> diakopter: That's level 1 of the maturity model. :)

[09:10] <brrt> which is exactly the situation i'm in jnthn :-)

[09:10] <masak> jnthn: that's like, so immature!

[09:10] <jnthn> masak: SOAP is level 0 :P

[09:10] <brrt> and i keep saying, no, thats not REST, because we don't have unique urls, no form of redirection or whatever, and GET and POST are equivalent

[09:11] <jnthn> Thing is, I suspect if you fed the average consumer of a HTTP API a truly RESTful one, they'd not really know how to consume it properly anyway...

[09:11] <diakopter> masak: so how many other bases work there in place of 10

[09:11] <jnthn> That is, they'd go couple to all the URLs anyways...

[09:12] *** denis_boyun joined
[09:12] <diakopter> "but my web server only understands TRACE method

[09:12] <diakopter> "

[09:14] <diakopter> jnthn: what does TRACE mean in REST

[09:14] <diakopter> because it HAS to mean SOMETHING

[09:14] <brrt> we (n the vaguest sense) perhaps should launch some sort of education offensive

[09:14] *** rindolf joined
[09:15] *** Nei left
[09:16] <diakopter> moritz: can you query your clogs to find out the person whose comments cause the most people to part the channel (not quit) soon after?

[09:18] <moritz> diakopter: I don't think parts are logged reliably

[09:19] <lizmat> is it sane to throw another exception from within the message method of an exception ?

[09:20] <lizmat> specifically, throw an X::Syntax::SigilWithoutName from with a X::Syntax::Perl5Var

[09:20] <lizmat> if the strange var name is not one of the ones existing in Perl 5 ?

[09:20] <moritz> NO

[09:20] <lizmat> figured  :-)

[09:20] <diakopter> only if the message is "turtles"

[09:20] <moritz> having .message die gives the worst possible user experience

[09:21] <moritz> lizmat: seems like you want a kind of static function that decides for you which exception to construct

[09:21] <diakopter> endless loop is worse

[09:22] <moritz> deleting all your files is also worse :-)

[09:22] <lizmat> I'm a slow mail reader

[09:23] <lizmat> I tend not to read mail real fast

[09:23] * diakopter dubs thee "outlook"

[09:23] * diakopter dubbeth thee "outlook"

[09:23] <jnthn> .oO( "outlook not so good" )

[09:25] <diakopter> masak: did you think of any other bases than 10? :)

[09:26] <moritz> diakopter: all bases are base 10 :-)

[09:30] *** denis_boyun left
[09:36] *** fhelmberger left
[09:37] *** fhelmberger joined
[09:39] *** daxim joined
[09:40] <masak> diakopter: no :)

[09:43] <diakopter> must mean base 10 is magical

[09:44] <masak> I don't know how you conclude that.

[09:45] <lizmat> if you think about it, 10 is really yin/yang

[09:47] <masak> define "is really".

[09:50] <diakopter> masak: the joke is that the "base 10" and "base 2" are both expressed in base 10

[09:51] <diakopter> so there's really 3 variables there

[09:51] <masak> diakopter: I suspected you were after something like that.

[09:51] <JimmyZ> multi trait_mod:<is>(Routine $rl, :$really!) { ... }

[09:52] <masak> diakopter: in any discussion about bases that purports to be serious, I usually agree on some convention with the other party, to keep things non-confused.

[09:52] <masak> JimmyZ: :P

[09:53] <JimmyZ> s/Routine $rl/Int $i/

[09:53] <JimmyZ> ;)

[09:54] *** kaleem joined
[09:56] <diakopter> "in what base was that number you just said?" "okay, in what base was that number?" "okay, in what base was THAT number?"

[09:58] <moritz> base specs are always decimal.

[09:58] <moritz> problem solved.

[10:00] <diakopter> my measure of Perl 6's readiness: how long it takes me to come up with a new WEIRD bug when I sporadically try to

[10:03] <masak> waitwait... is the readiness directly proportional to the time it takes, or inversely? :P

[10:04] <diakopter> depends on oyur definition of bug

[10:06] <jnthn> Could go either way. I mean, we make it run faster and diakopter can find bugs faster. We make it less buggy and diakopter can find bugs slower. We make it faster and less buggy and it retains its current readiness :P

[10:07] <masak> depends if it gets less buggy faster or faster faster :P

[10:11] <nwc10> by this metric, how ready is Perl 5?

[10:22] <masak> oh, I thought you removed the last bug from Perl 5 a couple of years ago... :P

[10:23] <diakopter> nwc10: that one's trickier, because it's so difficult to nail down what is a bug

[10:25] <diakopter> I could discover a thousand behaviors that seem bizarre and unexpected to me.. but which others will tell me, "oh, no, that's how it's supposed to work"

[10:25] <masak> which makes backwards compatibility so much more... interesting.

[10:25] <masak> because it's kind of a moving target, or at least not a fully-known target.

[10:26] <diakopter> and it's not like I'll ever find the test for that particular case in the test suite, if it's there

[10:27] <diakopter> s/test/RT/g

[10:28] <diakopter> Failed language names:  Morass.  Tarpit.  Boondoggle.  Tarbaby.  Sepulchre.

[10:29] <diakopter> er, failed names of languages, I meant

[10:29] <diakopter> not Names for failed languages

[10:31] <diakopter> marketing department: "I really don't think we can sell your language if it's named deathtrap"

[10:36] <diakopter> "your choice of AllSoftwareSucks for the name of your Operating System is curious"

[10:40] <dalek> rakudo/nom: a24bf6f | (Elizabeth Mattijsen)++ | src/ (2 files):

[10:40] <dalek> rakudo/nom: Catch a few more special P5 variable names

[10:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a24bf6f4e7

[10:41] *** rindolf left
[10:41] *** ribasushi joined
[10:46] <lizmat> what is the best way in NQP to see if a character is in A..Z ?

[10:47] <lizmat> ge A && le Z ?

[10:47] <jnthn> r: my $chr := 'G'; say('A' le $chr le 'Z')

[10:47] <camelia> rakudo bda446: OUTPUT«True␤»

[10:47] <jnthn> r: my $chr := 'g'; say('A' le $chr le 'Z')

[10:47] <camelia> rakudo bda446: OUTPUT«False␤»

[10:47] <jnthn> oops

[10:47] <jnthn> nqp: my $chr := 'g'; say('A' le $chr le 'Z')

[10:47] <camelia> nqp: OUTPUT«1␤»

[10:47] <lizmat> in NQP  

[10:48] <jnthn> nqp: my $chr := 'G'; say('A' le $chr le 'Z')

[10:48] <camelia> nqp: OUTPUT«1␤»

[10:48] <lizmat> cool!

[10:48] <jnthn> um...no, it got it wrong!

[10:48] <jnthn> wtf

[10:49] <jnthn> Of course, you can always $chr ~~ /^<[A..Z]>$/ :)

[10:49] <jnthn> Anyway, you can write it with ge && le too

[10:49] *** fhelmberger left
[10:49] <lizmat> $chr ~~ works in nqp ?

[10:50] <jnthn> r: my $chr := 'G'; say($chr ~~ /^<[A..Z]>$/)

[10:50] <camelia> rakudo bda446: OUTPUT«｢G｣␤␤»

[10:50] *** fhelmberger joined
[10:50] <jnthn> r: my $chr := 'g'; say($chr ~~ /^<[A..Z]>$/)

[10:50] <jnthn> dammit, nqp

[10:50] <jnthn> nqp: my $chr := 'g'; say($chr ~~ /^<[A..Z]>$/)

[10:50] <jnthn> nqp: my $chr := 'G'; say($chr ~~ /^<[A..Z]>$/)

[10:50] <camelia> rakudo bda446: OUTPUT«Nil␤»

[10:50] <camelia> nqp: OUTPUT«␤»

[10:50] <camelia> nqp: OUTPUT«G␤»

[10:50] <jnthn> anyway, yes :)

[10:50] <lizmat> cool

[10:50] <lizmat> thanks!

[10:51] * jnthn is happy to see that this is already mentioned in the Rakudo and NQP internals course :)

[10:51] <lizmat> :-)

[10:51] <masak> \o/

[10:58] <lizmat> r: { say $^X }("foo")

[10:58] <camelia> rakudo bda446: OUTPUT«foo␤»

[10:58] <lizmat> $ perl6 -e '{ say $^X }("foo")'

[10:58] <lizmat> ===SORRY!=== Error while compiling -e

[10:58] <lizmat> Unsupported use of $^X variable; in Perl 6 please use $*EXECUTABLE_NAME

[10:58] <lizmat> spectesting now

[11:02] <moritz> std: { say $^X }("foo")

[11:02] *** denis_boyun joined
[11:02] <camelia> std 06636e4: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of $^X variable; in Perl 6 please use $*EXECUTABLE_NAME at /tmp/iQS4nIgiEM line 1:␤------> [32m{ say $^X [33m⏏[31m}("foo")[0m␤Parse failed␤FAILED 00:00 43m␤»

[11:02] <moritz> but isn't $^X valid Perl 6 also?

[11:05] <grondilu> rn:  say { $_ < 2 ?? 1 !! $_*&?BLOCK($_-1) }(4);

[11:05] <camelia> niecza v24-88-g1f87209: OUTPUT«24␤»

[11:05] <camelia> ..rakudo bda446: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/IjPPeU4UcH␤Undeclared name:␤    &?BLOCK used at line 1␤␤»

[11:05] <lizmat> moritz: no

[11:06] <lizmat> http://perlcabal.org/syn/S06.html#line_1968

[11:06] <masak> somehow this article made me think of #perl6 in general and jnthn in particular: http://tvtropes.org/pmwiki/pmwiki.php/Main/PungeonMaster

[11:07] <dalek> rakudo/nom: 8e617d5 | (Elizabeth Mattijsen)++ | src/Perl6/Actions.nqp:

[11:07] <dalek> rakudo/nom: Disallow $^A..Z as perl S06:1968

[11:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8e617d5881

[11:07] <synopsebot> Link: http://perlcabal.org/syn/S06.html#line_1968

[11:08] <moritz> masak: I propose to change our standard expletive to "WTP", "What The Pun" :-)

[11:09] <moritz> (and if you don't immediately like this proposal, punder it a bit :-)

[11:09] <lizmat> What The Poo ?

[11:09] <masak> moritz: :P

[11:09] <lizmat> Winnie!

[11:09] <masak> moritz: I will take it punder consideration.

[11:09] <masak> lunch &

[11:10] <lizmat> or just Winnie The Poo

[11:10] *** kaleem left
[11:10] *** kaleem joined
[11:10] * masak .oO( Winnie The Unicode Pile of Poo )

[11:15] *** pmurias joined
[11:17] <dalek> rakudo-js: 1df3259 | (Pawel Murias)++ | src/QAST/Compiler/JavaScript.nqp:

[11:17] <dalek> rakudo-js: While emitting JavaScript correctly quote string containing \.

[11:17] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/1df3259783

[11:17] <dalek> rakudo-js: 336fb9b | (Pawel Murias)++ | src/QAST/Compiler/JavaScript.nqp:

[11:17] <dalek> rakudo-js: Implement \s in regexes.

[11:17] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/336fb9b5f9

[11:17] <dalek> rakudo-js: 63954ec | (Pawel Murias)++ | runtime/serialization.js:

[11:17] <dalek> rakudo-js: Correctly deserialize hashes of variants containing the key "deserialize".

[11:17] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/63954ec4e0

[11:17] <dalek> rakudo-js: cb76b7f | (Pawel Murias)++ | runtime.js:

[11:17] <dalek> rakudo-js: Make nqp::join stringify it's arguments properly.

[11:17] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/cb76b7f619

[11:17] <dalek> rakudo-js: 4b63f88 | (Pawel Murias)++ | runtime.js:

[11:17] <dalek> rakudo-js: Implement nqp::printfh.

[11:17] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/4b63f880a7

[11:17] <dalek> rakudo-js: 614cc21 | (Pawel Murias)++ | / (2 files):

[11:17] <dalek> rakudo-js: Implement nqp::shell.

[11:17] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/614cc21aa7

[11:19] <dalek> rakudo-js: 5ba0bda | (Pawel Murias)++ | runtime.js:

[11:19] <dalek> rakudo-js: A slightly hackish implementation of nqp::where for P6opaque objects.

[11:19] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/5ba0bda3e1

[11:19] <dalek> rakudo/nom: 149bd0f | (Elizabeth Mattijsen)++ | docs/ChangeLog:

[11:19] <dalek> rakudo/nom: Mention that $^A..$^Z are no longer allowed

[11:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/149bd0fcd0

[11:32] *** sqirrel left
[11:40] *** fhelmberger_ joined
[11:44] *** fhelmberger left
[11:44] <dalek> rakudo/nom: 4c26636 | (Elizabeth Mattijsen)++ | src/core/Exception.pm:

[11:44] <dalek> rakudo/nom: Move message of SigilWithoutName to Perl5Var, eradicate SigilWithoutName

[11:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4c26636ab8

[11:45] <dalek> roast: 70940e2 | (Elizabeth Mattijsen)++ | S32-exceptions/misc.t:

[11:45] <dalek> roast: SigilWithoutName is now Perl5Var

[11:45] <dalek> roast: review: https://github.com/perl6/roast/commit/70940e25e4

[11:46] *** fhelmberger joined
[11:46] *** fhelmberger_ left
[11:57] <dalek> rakudo/nom: e84ddaf | (Elizabeth Mattijsen)++ | src/Perl6/Actions.nqp:

[11:57] <dalek> rakudo/nom: Make sure we do the $^A..Z check before the mainline check

[11:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e84ddafbf4

[12:05] *** kbaker joined
[12:07] <dalek> roast: 449915a | (Elizabeth Mattijsen)++ | S32-exceptions/misc.t:

[12:07] <dalek> roast: Add some more Perl5Var exception tests

[12:07] <dalek> roast: review: https://github.com/perl6/roast/commit/449915acd3

[12:08] <lizmat> this concludes mo foray into Grammar and Actions wrt to Perl5 variables in Perl 6 for nw

[12:08] <lizmat> *my

[12:15] <lizmat> need to get more experience with grammars before touching <special_variable> again

[12:20] *** benabik joined
[12:20] *** denis_boyun left
[12:26] <lizmat> r: .say for < $< $> >  # rakudobug ?

[12:26] <camelia> rakudo e84dda: OUTPUT«$<$>␤»

[12:28] <moritz> std: .say for < $< $> >

[12:28] <camelia> std 06636e4: OUTPUT«ok 00:00 42m␤»

[12:29] <moritz> seems STD agrees

[12:29] <lizmat> agrees that the space between $< and $> disappears ?

[12:29] <lizmat> and it becomes a single string ?

[12:29] <benabik> Yeah.  I would have expected "$<\n$>\n"

[12:30] <benabik> r: < $< $> >.perl.say

[12:30] <camelia> rakudo e84dda: OUTPUT«("\$<\$>",).list␤»

[12:30] <jnthn> It didn't become a single string

[12:31] <jnthn> oh, or did it...

[12:31] <jnthn> Hm

[12:31] <jnthn> Hm, that should probably have become quote words...

[12:31] <benabik> Well, it became a list with a single string, technically.  :-D

[12:31] <jnthn> Yeah. Odd

[12:31] * masak submits rakudobug

[12:33] <dalek> roast: 1055f06 | (Elizabeth Mattijsen)++ | S32-exceptions/misc.t:

[12:33] <dalek> roast: Why not check exhaustive for all of the Perl5Var cases

[12:33] <dalek> roast: review: https://github.com/perl6/roast/commit/1055f06249

[12:34] <dalek> roast: a528442 | (Elizabeth Mattijsen)++ | S32-exceptions/misc.t:

[12:34] <dalek> roast: Don't need to check for '$*' twice

[12:34] <dalek> roast: review: https://github.com/perl6/roast/commit/a5284426f3

[12:35] <tadzik> better check twice, to be sure :)

[12:35] *** nyuszika7h left
[12:36] *** nyuszika7h joined
[12:37] <dalek> roast: c1d1a44 | (Elizabeth Mattijsen)++ | S32-exceptions/misc.t:

[12:37] <dalek> roast: Grrr you can't "todo" throws_like tests (almost certain you get TODO's passed)

[12:37] <dalek> roast: review: https://github.com/perl6/roast/commit/c1d1a44f4e

[12:38] <lizmat> time for a break, cycling&

[12:46] *** rindolf joined
[12:48] <clkao> win 22

[12:48] <timotimo> is that the anti-version of catch 22?

[12:48] <clkao> lol

[12:48] <masak> no, it's Windows from the future.

[12:49] <JimmyZ> is windows 98 from the future?

[12:50] <JimmyZ> and windows 7 from the past

[12:50] <timotimo> JimmyZ: that's the biggest y2k bug ever right there :)

[12:51] <timotimo> in 80 years, windows 95 will make a big comebacks onto quantum computers solar-system wide.

[12:51] <JimmyZ> ;)

[12:52] <masak> JimmyZ: Windows 22 (also known as "win22") was released on November 2024.

[12:52] <masak> ;)

[12:52] <JimmyZ> and windows 2003?

[12:52] <masak> March 201023.

[12:52] <JimmyZ> ;)

[12:53] *** kamen44 joined
[13:00] * masak still chuckles at #python's "NO LOL | NO PROJECT EULER" /topic

[13:00] <timotimo> hehe

[13:00] *** kamen44 left
[13:00] <masak> it's like in Malmö central station, we had a sign "no balloons".

[13:00] <masak> someone tweeted "what is this, East Germany?"

[13:02] *** yoleaux joined
[13:02] *** ChanServ sets mode: +v yoleaux

[13:13] *** sidus joined
[13:14] <masak> sidus: greetings.

[13:15] <FROGGS> timotimo: from 13.09. to 16.09. a night in hotel acasa is 99€, because there is the Automobilmesse >.<

[13:15] *** ajr joined
[13:15] *** ajr is now known as Guest80712

[13:15] <timotimo> bleh.

[13:16] <timotimo> that's very expensive.

[13:16] <FROGGS> it is

[13:16] *** Guest80712 is now known as ajr_

[13:21] *** PacoAir joined
[13:23] *** PacoAir left
[13:23] *** PacoAir joined
[13:25] *** kaare_ joined
[13:28] *** denis_boyun joined
[13:33] *** rindolf left
[13:37] *** skids joined
[13:41] *** fridim__ joined
[13:45] *** iSlug joined
[13:46] *** fridim__ left
[13:48] *** fhelmberger_ joined
[13:48] *** rindolf joined
[13:49] *** Guest59420 is now known as ponbiki

[13:51] *** fhelmberger left
[13:56] *** Targen_ joined
[14:08] *** bluescreen10 joined
[14:08] * masak .oO( hotel acausal )

[14:10] *** thou joined
[14:17] *** pernatiy left
[14:19] *** pernatiy joined
[14:29] *** denis_boyun left
[14:32] *** gdey left
[14:35] *** iSlug left
[14:39] *** Psyche^_ joined
[14:43] *** FROGGS joined
[14:45] *** wingfold joined
[14:55] *** jnap joined
[14:56] *** pmurias left
[14:57] *** kbaker left
[15:04] *** kbaker joined
[15:15] *** fgomez joined
[15:15] *** gdey joined
[15:15] *** gdey left
[15:16] *** gdey joined
[15:16] *** berekuk joined
[15:24] *** lowpro30_ joined
[15:25] *** Targen_ left
[15:35] <TimToady> nqp: my $chr := 'G'; say($chr.ord ~~ 'A'.ord .. 'Z'.ord)

[15:35] <camelia> nqp: OUTPUT«Confused at line 2, near "say($chr.o"␤current instr.: 'panic' pc 14721 (src/stage2/gen/NQPHLL.pir:5232) (src/stage2/gen/NQPHLL.nqp:279)␤»

[15:36] <jnthn> Double fail. No ranges, and no methods on strings. :)

[15:36] <TimToady> nqp: my $chr := 'G'; say(ord($chr) ~~ ord('A') .. ord('Z'))

[15:36] <camelia> nqp: OUTPUT«Confused at line 2, near "say(ord($c"␤current instr.: 'panic' pc 14721 (src/stage2/gen/NQPHLL.pir:5232) (src/stage2/gen/NQPHLL.nqp:279)␤»

[15:37] <TimToady> ah well

[15:37] <[Coke]> (REST) I call my crappy apis RESTful. they're RESTy. RESTlike. RESTalicious. (but not usually really REST)

[15:37] <[Coke]> (backscrollin, across the universe..)

[15:37] <TimToady> RESTiferous, most of 'em are

[15:38] <timotimo> "well RESTed"

[15:39] <geekosaur> resting gently among the perls

[15:40] * TimToady tries to avoid picturing geekosaur on the half shell

[15:40] *** xinming joined
[15:45] <TimToady> npr: .say for < $< $> >

[15:45] <camelia> niecza v24-88-g1f87209, pugs: OUTPUT«$<␤$>␤»

[15:45] <camelia> ..rakudo e84dda: OUTPUT«$<$>␤»

[15:45] <[Coke]> ah, shit. :(

[15:45] <TimToady> looks like rakudo is odd-person-out

[15:46] <jnthn> I blame the guy who messed around loads with quoting last :P

[15:48] *** ajr_ left
[15:51] <daxim> brrt is my man!

[15:51] <daxim> let me chime in, 8 hours too late

[15:52] <daxim> fielding on his blog made it clear that the maturity model does not apply - if there's no hypermedia, it isn't rest. basta

[15:53] <jnthn> Fair enough.

[15:53] <jnthn> Given they're *constraints* I guess you'd expect it to be that way.

[15:54] <daxim> exactly! … but it's a complicated topic  :(

[15:54] <jnthn> *nod*

[15:55] <daxim> I'm doing my part by educating the local developer scene, touring meetup

[15:55] *** crab2313 joined
[15:55] <daxim> learning from examples works best

[15:56] <perigrin> [Coke]: RESTifarian?

[15:58] *** MilkmanDan joined
[15:59] *** kaleem left
[15:59] <geekosaur> the RESTaurant

[16:01] <[Coke]> perigrin: giveitaREST

[16:02] *** daxim left
[16:02] <jnap> RESTinpeace?

[16:02] <perigrin> [Coke]: when it comes to web interactions I find it hard to RESTrain myself.

[16:02] <diakopter> seems everyone's a terroREST nowadays

[16:03] <MilkmanDan> Oh lawd, what did I walk into...

[16:03] <jnthn> #perl6

[16:03] <geekosaur> shoulda RESTed first?

[16:03] <perigrin> what jnthn said

[16:05] <diakopter> jnthn: which web scheme is fairest of them all

[16:06] <jnthn> diakopter: your mom's scheme, of course...

[16:07] * diakopter arrests you

[16:13] <TimToady> MilkmanDan: er, welcome!

[16:13] *** locsmif joined
[16:15] <TimToady> pay not attention to the rest of these jokers...er...oops

[16:15] <TimToady> *no

[16:16] *** cognominal joined
[16:16] <TimToady> MilkmanDan: we do, occasionally, have on-topic conversations here...

[16:16] <perigrin> the REST of the time ... 

[16:17] <TimToady> it's just that, since Perl 6 is designed to interface with everything else in the world, we often end up talking about...everything else...

[16:21] <TimToady> MilkmanDan: did you have any questions about Perl 6?

[16:21] *** cognominal left
[16:22] *** cognominal joined
[16:22] <MilkmanDan> TimToady: Just wondering the state of the new onion, really.

[16:22] <MilkmanDan> But I think I've gotten a good enough idea from http://www.modernperlbooks.com/mt/2012/12/the-implementation-of-perl-5-versus-perl-6.html

[16:24] <TimToady> um

[16:25] <TimToady> a lot has changed since December

[16:25] <TimToady> not all of it with the approval of chromatic++ :)

[16:25] <FROGGS> hehe

[16:26] <FROGGS> >.<

[16:26] <MilkmanDan> heh

[16:26] <MilkmanDan> Fair enough.

[16:26] <MilkmanDan> I got there via http://www.perlmonks.org/?node_id=1047676 though.

[16:27] <MilkmanDan> My original question was "I wonder why there are no mentions of perl6 at http://benchmarksgame.alioth.debian.org/ "

[16:28] <MilkmanDan> I had assumed that it had gotten along a lot farther since last I looked, and you know what that means....

[16:28] <TimToady> well, the JVM port isn't really expected to be all that performant initially, though it's encouraging that in at least one case it was faster

[16:29] <TimToady> moarvm is expected to be performant, but it's not quite self-hosted yet

[16:29] <TimToady> so I expect you'll see a lot more benchmarking in the coming year

[16:32] <MilkmanDan> nod

[16:34] <MilkmanDan> Parrot doesn't seem to be ready for production either, from what I gather.  Not so?

[16:39] <TimToady> Parrot...was not a success story...

[16:40] <MilkmanDan> So I gathered.

[16:40] <TimToady> except in the Edisonian sense of finding out ways not to invent the lightbulb

[16:41] <TimToady> well, this is overstated a hair, since we're still using it to bootstrap other implementations

[16:41] <MilkmanDan> Also there doesn't seem to be a Learning Perl for 6, unless the git project that hasn't been touched in 9 months is already complete.

[16:41] <MilkmanDan> er, complete and intended to serve.

[16:41] *** spider-mario joined
[16:42] <TimToady> a "new camel" is in the works, but it'll take a while

[16:42] <MilkmanDan> I'd be more at the llama stage. :)

[16:42] * diakopter is more at the pupa stage

[16:43] <pmichaud> morning, #perl6

[16:43] <moritz> \o *

[16:43] <TimToady> o/

[16:43] *** Rix left
[16:44] <FROGGS> o/

[16:44] <FROGGS> TimToady: who is writing it?

[16:44] <grondilu> MilkmanDan: the synopsyses are not too bad a way to learn Perl 6, imho.  They are decently well written.

[16:44] <jnthn> o/

[16:45] <TimToady> FROGGS: TheDamian is my co-author.

[16:45] <FROGGS> cool

[16:45] <TimToady> still mostly at the outline stage though

[16:46] <FROGGS> jnthn: I'm in frankfurt from friday evening (20:30) to monday morning... when do you plan to arrive/depart?

[16:47] <FROGGS> TimToady: yeah, if I would intend to write a book it will most likely only reach that stage

[16:47] <TimToady> takes a bit of OCD to successfuly write a book

[16:48] <FROGGS> OCD?

[16:48] <TimToady> obsessive compulsive disorder

[16:48] <jnthn> FROGGS: I don't (can't) know about arrival yet

[16:48] <FROGGS> I know LSD fwiw, but these are not the 70s

[16:48] <TimToady> since my OCD has to fit in with all my other syndromes, I have to work on emphasizing that aspect when I flip into writing mode

[16:48] *** SamuraiJack joined
[16:49] <jnthn> FROGGS: I'll arrive on Friday at some point. It depends whether I end up teaching on the Friday, and where I'd be coming from.

[16:49] <FROGGS> yeah

[16:49] <jnthn> FROGGS: Probably I depart Monday.

[16:50] <FROGGS> it took like 5 months to write an article for the german $foo magazine, it would take ages to write a book, and it wouldn't easy to read I fear

[16:51] <FROGGS> brb

[16:52] <TimToady> at the moment I'm OCDing more on my CJK character database, but I only have 818 characters left to do, out of roughly 70,000, so I can (I hope) let that go soon.

[16:53] *** pernatiy left
[16:54] <TimToady> well, right now I'd better obsess about getting my poor kitty some catfood...

[16:55] *** dakkar left
[17:01] *** gdey_ joined
[17:03] *** Targen joined
[17:05] <jnthn> back in a couple of hours

[17:05] <jnthn> &

[17:05] <MilkmanDan> grondilu: Not bad, for a beginner?  Or not bad for someone who is already working in p5?

[17:06] *** gdey left
[17:13] *** djanatyn left
[17:14] <grondilu> MilkmanDan: I'm not sure what you mean by "beginner".  I meant that it's not bad for someone who has a good culure in programming.

[17:14] *** djanatyn joined
[17:15] <grondilu> the synopsys are a good way to learn perl6 for anyone who is already used to read perl5 doc, that what I meant.

[17:15] <colomon> nqp: my $chr := 'g'; say('A' le $chr le 'Z')

[17:15] <camelia> nqp: OUTPUT«1␤»

[17:16] <colomon> nqp: my $chr := 'g'; say('A' le $chr && $chr le 'Z')

[17:16] <camelia> nqp: OUTPUT«0␤»

[17:16] <colomon> nqp: my $chr := 'G'; say('A' le $chr && $chr le 'Z')

[17:16] <camelia> nqp: OUTPUT«1␤»

[17:16] <MilkmanDan> grondilu: Ok.  So, closer to the camel book than the llama.

[17:16] * colomon doesn't know if someone else pointed that out along the way, ETOOMUCHBACKLOG

[17:16] * colomon is also suffering from ETOOMUCHISETHEBY

[17:17] *** timotimo joined
[17:19] <benabik> colomon: I don't think the comparisons are supposed to chain in NQP.

[17:19] <benabik> src/NQP/Grammar.pm:691: NQP::Grammar.O(':prec<m=>, :assoc<left>',  '%relational');

[17:21] <grondilu> nqp: my $chr := 'g'; say(0 le 'Z')

[17:21] <camelia> nqp: OUTPUT«1␤»

[17:21] <grondilu> nqp: my $chr := 'g'; say('A' le $chr))

[17:21] <camelia> nqp: OUTPUT«Confused at line 2, near "say('A' le"␤current instr.: 'panic' pc 14721 (src/stage2/gen/NQPHLL.pir:5232) (src/stage2/gen/NQPHLL.nqp:279)␤»

[17:21] <grondilu> nqp: my $chr := 'g'; say('A' le $chr)

[17:21] <camelia> nqp: OUTPUT«1␤»

[17:21] <grondilu> nqp: my $chr := 'g'; say(1 le 'Z')

[17:21] <camelia> nqp: OUTPUT«1␤»

[17:22] <benabik> grondilu: Exactly.  'A' le $chr le 'Z' is ('A' le $chr) le 'Z', which is probably not what you meant.

[17:22] *** crab2313 left
[17:23] <benabik> Perhaps the relationals should be nonassoc rather than left.

[17:23] *** abnorman joined
[17:23] <benabik> (Alternatively, chaining, which is more convenient.)

[17:24] <grondilu> indeed, order relations are *never* associative, are they?

[17:24] * grondilu kind of remember this from his maths course, long ago

[17:25] <benabik> It's a type problem.  < : 'a -> 'a -> Bool.  So unless you're trying to order booleans, it's naturally non-associative.

[17:26] * lizmat is back

[17:26] <grondilu> an order relation is:  reflexive, antisymetric and transitive.  But *not* associative.

[17:26] <grondilu> https://en.wikipedia.org/wiki/Order_theory

[17:26] <grondilu> so yeah, it should be non-associative.

[17:27] <benabik> Or chaining, which is a non-standard associativity.  (a < b < c --> a < b && b < c, but evals b once)

[17:29] <grondilu> yeah but that's different.  we were discussing about the fact that < was defined as :assoc<left>, which is wrong as I understand it.

[17:30] <grondilu> when you write a < b < c, you actually use a ternary operator, don't you?

[17:30] <grondilu> I mean it's not the same operator at all.

[17:34] <grondilu> (because < as a binary operator is not associative, so a < b < c can not be defined.  You must define a ternary operator that uses the same symbol)

[17:34] <TimToady> well, it's really a variadic higher-order function that alternates comparands with comparators

[17:35] *** abnorman left
[17:35] <grondilu> How does one define a ternary infix in Perl 6?

[17:36] <TimToady> by cheating

[17:36] <grondilu> sub infix:<a b>($x, $y, $z) {...}  # like that?

[17:36] *** MilkmanDan left
[17:36] <grondilu> std: sub infix:<a b>($x, $y, $z) {...}  # like that?

[17:36] <camelia> std 06636e4: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/HHqisw6VMp line 1:␤------> [32msub infix:<a b>([33m⏏[31m$x, $y, $z) {...}  # like that?[0m␤  $y is declared but not used at /tmp/HHqisw6VMp line 1:␤------> [32msub infix:<a b>($x, [33m⏏[31m$y, $z) {…

[17:36] <benabik> ?? !! is implemented as token infix:<?? !!> { '??' <O(prec)> '!!' }

[17:36] <TimToady> I suppose that could be supported, if we were interested in encouraging ternary operators :)

[17:36] <benabik> I think you'd have to use `is parsed`.

[17:37] <grondilu> TimToady: I think it's the most logical way to define a < b < c

[17:37] <TimToady> I don't; I already said what I think it is above.

[17:37] <benabik> grondilu: But then what happens when you try a < b < c < d

[17:37] <diakopter> chained comparison needs the same compiler trick as chained ||

[17:37] <grondilu> benabik: oh yeah, good point.

[17:37] *** Rix joined
[17:39] <TimToady> diakopter: except || degenerates gracefully to binops, while < doesn't

[17:39] <TimToady> the chain ops differ from list associative ops in allowing the operators to differ

[17:40] <TimToady> a || b ^^ c is not list associative

[17:40] *** abnorman joined
[17:40] <TimToady> but a < b != c is chaining

[17:41] <TimToady> catfoodr &

[17:43] <grondilu> so yeah that's the higher order function stuff.  TimToady's right I guess, which is not too surprising :)

[17:43] * benabik makes sure that changing it to non-associative doesn't break things.

[17:43] <colomon> benabik: I agree, but someone up-log was trying to chain them.

[17:44] <benabik> colomon: Well, I'm not sure what magic is needed to make them chain, but I can at least break the code in a useful way.  :-)

[17:46] *** rindolf left
[17:47] *** gdey_ left
[17:47] <lizmat> Seems it's going to be hard to get a hotel room in Frankfurt around 13/16 September

[17:48] <lizmat> so I booked 4 extra 2xsingle rooms at the http://www.booking.com/hotel/de/arena.en-gb.html

[17:48] <lizmat> which is around the corner from the venue

[17:49] *** bluescreen10 left
[17:50] <lizmat> so the first 10 attendees of the Rakudo and NQP Internals Workshop will have a place to stay and need not book anything

[17:50] <lizmat> unless they want to arrive before the 13th or leave after the 16th

[17:52] <timotimo> ooooooh

[17:52] <benabik> lizmat++

[17:52] <timotimo> i booked a hotel already

[17:52] *** wingfold left
[17:52] <timotimo> in the "hotel tourist"

[17:53] <lizmat> can you cancel it still ?

[17:53] <timotimo> yes, but it'll cost me full price

[17:53] <lizmat> I mean without paying anything ?

[17:53] <lizmat> ah, then you can't cancel  :-)

[17:53] <timotimo> nope

[17:53] <lizmat> is it far from the venue ?

[17:54] <benabik> nqp passes self-tests with non-assoc relationals.  Now building Rakudo.

[17:54] *** gdey joined
[17:56] *** lowpro30 joined
[17:56] *** gdey left
[17:57] *** gdey joined
[17:57] <lizmat> timotimo: looks like 4 stops with the S-Bahn, that is, if it goes into Hbf

[17:58] <lizmat> Let's see how the number of attendees works out

[17:59] <lizmat> if there is room in the Arena Hotel, then you can decide whether to stay there or go to Hotel Tourist after all

[17:59] *** lowpro30_ left
[18:01] <FROGGS> how much is a night in Hotel Arena?

[18:02] *** Mouq joined
[18:02] *** berekuk left
[18:02] <FROGGS> I pay 80 eur in Hotel Tourist, and it is the cheapest I could find (in case you dont want to share your toilet with others...)

[18:03] *** fhelmberger_ left
[18:04] *** pecastro left
[18:06] *** pernatiy joined
[18:06] *** berekuk joined
[18:12] *** wingfold joined
[18:14] <lizmat> FROGGS: did you book also already ?

[18:14] <FROGGS> yes

[18:14] <lizmat> shite  (excusez le mot)

[18:14] <lizmat> at Tourist ?

[18:14] <FROGGS> right

[18:14] <lizmat> non-refundable, I assume

[18:15] <lizmat> Arena would come to ~ 75 euro if you share with someone

[18:16] <FROGGS> Alle Stornierungen werden mit dem Gesamtbetrag berechnet.Änderungen, die bis zu 30 Tage vor Anreisedatum erfolgen, sind kostenfrei.Änderungen, die verspätet erfolgen, sowie Nichtanreisen werden mit dem Gesamtbetrag berechnet.

[18:16] <FROGGS> :o(

[18:16] *** thou left
[18:16] <Mouq> What is $*W?

[18:16] <lizmat> ok, I guess you will be hotelmates with timotimo 

[18:16] <FROGGS> Mouq: the World

[18:17] <lizmat> src/Perl6/World.nqp

[18:17] <Mouq> Ahh, cool. Thank you

[18:17] <FROGGS> lizmat: yeah, but we have separate rooms

[18:18] *** abnorman left
[18:18] *** thou joined
[18:19] <lizmat> well, I hope that nobody else has booked yet...

[18:20] <lizmat> if so, we should have ample rooms

[18:21] <lizmat> in any case, I've just decided that the hotel will be on my bill anyway

[18:21] <lizmat> so I'll refund you and timotimo for the stay in Tourist

[18:22] <lizmat> so that we are all equal in that respect at the RaNIW

[18:22] <FROGGS> O.o

[18:22] <FROGGS> wow

[18:22] <lizmat> is that a plan?

[18:23] <lizmat> I'd rather invest in the Perl community this way, then giving TPF money  :-)

[18:23] <FROGGS> that is an awesome offer, but I have no problem paying my room, really

[18:23] <FROGGS> why that?

[18:23] <lizmat> well, in that case, I won't refund you  :-)

[18:23] <FROGGS> *g*

[18:24] *** wingfold left
[18:24] *** ssutch joined
[18:24] <lizmat> because I feel it is very important to have a smooth / cosy / intense / workshop / social / hackathon

[18:25] <lizmat> hopefully, everybody at the workshop will in the future contribute to Rakudo / NQP

[18:25] <lizmat> knowing each other better helps a lot, in that respect

[18:25] <FROGGS> true

[18:25] <lizmat> I just didn't expect hotels to be so scarce already

[18:26] <lizmat> brb

[18:26] <FROGGS> that is why I already come on friday at half past eight in the evening, and leave monday at nine

[18:26] <FROGGS> lizmat: there is a car show at that time, hotel prizes are almost twice as much as usual

[18:29] *** fhelmberger joined
[18:32] *** abnorman joined
[18:32] <dalek> nqp: 0c91ec7 | benabik++ | src/NQP/Grammar.nqp:

[18:32] <dalek> nqp: Relational operators are non-associative

[18:32] <dalek> nqp: 

[18:32] <dalek> nqp: As colomon++ pointed out, 'A' le 'g' le 'Z' evaluates to true because

[18:32] <dalek> nqp: infix:<le> is left associative and 1 le 'Z'.  While the appropriate

[18:32] <dalek> nqp: chaining behavior a la full perl 6 would be more helpful, marking the

[18:32] <dalek> nqp: relationals as non-associative at least prevents your code from doing

[18:32] <dalek> nqp: the wrong thing.

[18:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0c91ec73b8

[18:34] *** fhelmberger left
[18:35] <dalek> specs: 33d795b | larry++ | S05-regex.pod:

[18:35] <dalek> specs: disallow direct assignment to $/

[18:35] <dalek> specs: review: https://github.com/perl6/specs/commit/33d795b829

[18:36] <timotimo> lizmat: wow, that offer is very generous; you are going to pay for my cancellation *as well as* the hotel room close to the venue?

[18:36] <lizmat> well, if there is no more room for you in the Arena Hotel, I'm going to ask you to use your room at the Tourist

[18:36] <lizmat> so don't cancel

[18:36] <timotimo> okay

[18:36] <lizmat> there is no point

[18:37] <timotimo> right. if i don't cancel, it's no difference for money, but a negative impact on flexibility

[18:37] <lizmat> indeed

[18:38] <timotimo> that's crazy cool :) thanks a lot

[18:38] <timotimo> i'll gladly accept that offer

[18:38] <lizmat> you're welcome  :-)

[18:38] <benabik> .oO( Now I just need someone to pay for a trans-Atlantic flight, and I'm set.  ;-) )

[18:39] <FROGGS> *g*

[18:39] *** SamuraiJack left
[18:39] <lizmat> TimToady: as I understand <special_variable>, this should already happen

[18:40] <lizmat> but it doesn't: is that related to LTM not working at the moment?

[18:40] <benabik> Where's YAPC::NA 2014?

[18:40] <lizmat> Sofia, Bulgaria

[18:40] <FROGGS> that is EU

[18:40] <lizmat> oops, YAPC::EI

[18:41] <lizmat> NA is in Orland, FL

[18:41] <lizmat> Orlando

[18:41] <benabik> It's not easy for me to attend ::NA, so ::EU seems extremely unlikely.  :)

[18:42] <TimToady> lizmat: you mean the $/ = test?  beats me...I just write the spec

[18:42] <TimToady> was just catching the spec up to what std already does

[18:44] <lizmat> indeed  :-)

[18:58] * jnthn back

[18:59] <lizmat> jnthn: fyi, I've already booked a hotel in Frankfurt from Fri/Mon

[19:00] <jnthn> lizmat: For mig?

[19:00] <jnthn> *me

[19:00] <lizmat> yes

[19:00] <jnthn> \o/

[19:00] <jnthn> Cool

[19:00] <lizmat> well, if you want it

[19:00] <lizmat> :-)

[19:00] <jnthn> Sure :)

[19:00] <lizmat> the hotel is around the corner from the venue

[19:01] <jnthn> The Monday end of it is easy. The Friday is more likely to be free for me too so I can arrive in time for some dinner rather than flying in on the evening.

[19:01] <jnthn> Though don't know for a bit.

[19:02] * jnthn ticks "be on a podcast" off on his list of accomplishments

[19:02] <timotimo> \o/

[19:02] <FROGGS> podcast? where?

[19:06] <jnthn> FROGGS: Hm, not sure where, I shoulda asked that :)

[19:06] <jnthn> Nothing about Perl stuff, though. More about what I do at $dayjob :)

[19:07] <FROGGS> still... :o)

[19:07] <FROGGS> are they google-able? do they have a name?

[19:09] <jnthn> It should be up on Monday, I'll probably tweet it or something... :)

[19:10] <FROGGS> hmmm, if you are going to post that on facebook than I have to get my wife to stalk you

[19:11] * FROGGS has no facebook account

[19:11] * lizmat neither, but woolfy does

[19:11] <lizmat> .oO( one in the family is enough for the NSA to follow us)

[19:12] <timotimo> lizmat: is there a list i need to put my name into to be officially "in" the workshop?

[19:12] <lizmat> you're on the list :-)

[19:14] <lizmat> the list for now: jnthn, lizmat (woolfy),timotimo,FROGGS,moritz,[Coke],Roland Schmitz

[19:14] <lizmat> did I forget anybody already ?

[19:15] <FROGGS> dunno

[19:15] <jnthn> yay, I'm on the list \o/

[19:15] <woolfy> jnthn++

[19:15] <FROGGS> hi woolfy 

[19:15] <jnthn> woolfy! \o/

[19:16] <woolfy> no, there's no woolfy here, just a bleak and sweaty shadow with food poisoning and pneumonia!  :-)

[19:16] <jnthn> whoa!

[19:17] <jnthn> Hope you're better soon. That sounds like a nasty combo...

[19:17] *** cognominal left
[19:17] * lizmat was only sick for ~ 48 hours coming back from Kiev

[19:17] <woolfy> so nasty that cognominal left the room...  :-)

[19:17] <FROGGS> ohh ó.ò

[19:17] <FROGGS> hehe

[19:18] <woolfy> Hey, positive thing: I lost 5,5 kg in 5 days!  Dieticiens

[19:18] <woolfy> s dream

[19:18] <woolfy> hmm

[19:18] <lizmat> tadzik expressed interested in attending, afaik

[19:18] * jnthn managed to escape getting sick from Kiev

[19:18] <lizmat> tadzik ?

[19:19] * lizmat wonders if the sick people were the ones who went to basement in Mafia the last night

[19:20] <lizmat> not all of the people there got sick, but all the sick people were there, afaik

[19:20] <woolfy> All the sick people were there: lizmat, woolfy, sno (and his wife), markov, leont

[19:20] <woolfy> Not sick was riba

[19:22] *** zwut00 joined
[19:25] <tadzik> lizmat: oh yes, I am interested :)

[19:25] <lizmat> so, should I add you to the list ?

[19:25] <timotimo> wow, get better soon, woolfy!

[19:26] <tadzik> of course

[19:26] <tadzik> what dates are those, again?

[19:26] <lizmat> consider yourself added

[19:26] <tadzik> I should probably make travel arrangements

[19:26] <lizmat> 14/15 sep

[19:26] <lizmat> better arrive on 13, leave on 16 I guess

[19:26] <tadzik> yeah

[19:26] <lizmat> rooms already booked (if you don't mind sharing)

[19:27] <tadzik> oooh!

[19:27] <moritz> lizmat: I'm not sure if leont expressed interest

[19:27] <tadzik> Thank you! I never mind sharing :)

[19:27] * timotimo is cool with sharing, doesn't snore and is friendly to people and animals

[19:27] <woolfy> timotimo: thanks (on medication now, will get better soon)

[19:27] <lizmat> I'll check with leont

[19:27] *** fhelmberger joined
[19:28] <moritz> lizmat: and maybe sno

[19:28] <moritz> (he wanted to hack on nativecall or an XS replacement)

[19:28] <tadzik> fwiw, I was not in mafia and I was not sick :)

[19:29] * moritz was not in the mafia, and now has a bad cough, but I also had a cough before I went to Kiev

[19:29] <lizmat> I will ask sno this weekend at the FrosCON

[19:29] *** fhelmberger left
[19:29] *** fhelmberger_ joined
[19:30] <lizmat> pmichaud: all our strength wished to you in this difficult time

[19:31] *** lowpro30_ joined
[19:31] <woolfy> pmichaud: my thoughts are with you

[19:32] <woolfy> Can we help?

[19:34] <FROGGS> ohh

[19:34] <FROGGS> pmichaud: my sincerest condolences

[19:35] *** lowpro30 left
[19:36] <FROGGS> :/

[19:40] *** jnap1 joined
[19:41] *** jnap left
[19:45] <timotimo> pmichaud: i'm sorry for your loss :(

[19:46] <colomon> pmichaud: like woolfy said, if there's anything we can do to help, just let us know.  :(

[19:51] *** gdey left
[19:55] <Tene> pmichaud: My condolences for your loss.

[19:57] <colomon> lizmat++

[20:03] *** pjcj_ joined
[20:05] *** fhelmberger_ left
[20:05] *** pjcj_ left
[20:10] <pmichaud> thanks, all.  

[20:11] <dalek> rakudo/nom: c772e72 | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp:

[20:11] <dalek> rakudo/nom: Only need to check on variables longer than *2* characters

[20:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c772e726aa

[20:11] <lizmat> hugme hug pmichaud 

[20:11] * hugme hugs pmichaud

[20:12] <dalek> nqp: 92e2858 | (Tobias Leich)++ | / (3 files):

[20:12] <dalek> nqp: use nqp::sprintf for parrot backend also

[20:12] <dalek> nqp: 

[20:12] <dalek> nqp: We used it for JVM only, but by adding nqp::sprintfdirectives, which parses

[20:12] <dalek> nqp: a format string to return the directive count, it is ready to use.

[20:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/92e2858b54

[20:12] <timotimo> FROGGS: another piece of good news for the changelog

[20:12] *** lowpro30_ left
[20:13] <FROGGS> true

[20:13] <jnthn> FROGGS: We get no regressions from that?

[20:13] <FROGGS> no

[20:14] *** Mouq left
[20:15] <dalek> rakudo/nom: 083e3f2 | (Tobias Leich)++ | / (3 files):

[20:15] <dalek> rakudo/nom: use nqp::sprintf, Hash.fmt needed special-casing though

[20:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/083e3f2d66

[20:15] <jnthn> FROGGS: yay

[20:15] <FROGGS> :o)

[20:16] *** hummeleBop joined
[20:16] * tadzik hugs pmichaud

[20:20] *** kaare_ left
[20:25] <moritz> FROGGS: does that mean that parakudo now handles bigints in %d formats?

[20:25] <FROGGS> moritz: yes

[20:25] <moritz> \o/

[20:25] <jnthn> \o/

[20:26] <FROGGS> I'm currently rebuilding all in order to strip #?rakudo.parrot todo's

[20:26] <moritz> r: printf '%d', 2**65

[20:26] <camelia> rakudo e84dda: OUTPUT«0»

[20:26] <moritz> not yet rebuilt

[20:26] <colomon> FROGGS++

[20:26] <FROGGS> :o)

[20:26] <jnthn> convergence++

[20:26] <jnthn> Better still, we can use the same sprintf impl on MoarVM :)

[20:27] <FROGGS> jnthn: yeah, an old copy of it is already in there

[20:27] <timotimo> all our visions of cross-platforminity are coming true!

[20:27] <FROGGS> as seen by the bt from yesterday

[20:27] <FROGGS> *g*

[20:28] <FROGGS> and guess why I do all this?

[20:28] <FROGGS> I need it for v5 :P

[20:28] <lizmat> :-)

[20:28] <moritz> :-)

[20:28] <lizmat> No registered operation handler for 'sprintfaddargumenthandler'

[20:28] <lizmat> :-(

[20:28] <moritz> lizmat: did you update nqp?

[20:29] <FROGGS> and reconfigure

[20:29] <lizmat> shouldn't that happen automatically when I do a perl Configure.pl --gen-parrot ?

[20:29] <lizmat> ok, i'll nuke nqp dir and do it again

[20:29] <tadzik> rakudobrew build all \o/

[20:30] <jnthn> Was NQP_REVISION bumped?

[20:30] <tadzik> ^C \o/

[20:30] <moritz> yes

[20:30] <lizmat> Note: checking out '2013.07-98-g92e2858'.

[20:31] <lizmat> HEAD is now at 92e2858

[20:31] <lizmat> seems ok

[20:31] <tadzik> fun fact: two first characters of the revisions are the same

[20:31] <tadzik> 2013.07-87-g9706494 vs 2013.07-98-g92e2858

[20:31] <jnthn> g is no revision char :P

[20:32] <tadzik> really? :(

[20:32] <jnthn> It means git, I think

[20:32] <moritz> I think it stands for 'git#

[20:32] <moritz> s/#/'/

[20:32] <jnthn> I mean, the sha-1 is in hex... :)

[20:32] <tadzik> oh well, it's a little bit more than hex can handle :)

[20:32] <jnthn> g is a bit big for hex :)

[20:32] <lizmat> .oO( we need BIGhex )

[20:32] *** donaldh joined
[20:33] <lizmat> bigint just doesn't cut it anymore in the modern world  :-)

[20:33] <dalek> roast: 165aab2 | (Tobias Leich)++ | / (2 files):

[20:33] <dalek> roast: unfudge sprintf tests

[20:33] <dalek> roast: review: https://github.com/perl6/roast/commit/165aab2d34

[20:34] <lizmat> there goes JVM below 99% again  :-)

[20:34] <moritz> :(

[20:35] <moritz> oh, but that's because parakudo goes up, right?

[20:35] <FROGGS> right

[20:35] <dalek> rakudo/nom: 44ba8ad | (Elizabeth Mattijsen)++ | docs/ChangeLog:

[20:35] <dalek> rakudo/nom: printf %d for bigints works on parakudo

[20:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/44ba8ad0a4

[20:35] * FROGGS runs spectest again just because he is paranoid

[20:35] <lizmat> No registered operation handler for 'sprintfaddargumenthandler

[20:35] <lizmat> again  :-(

[20:36] <lizmat> guess I'll nuke the install dir to be sure

[20:37] <FROGGS> can somebody else try?

[20:37] * tadzik tries

[20:37] <moritz> I'm building on jvm right now

[20:37] <tadzik> parakudo's still building

[20:37] <FROGGS> there is nothing unpushed related to sprintf

[20:38] <donaldh> hai o/

[20:38] <FROGGS> hi donaldh 

[20:38] <donaldh> try ?  latest commits ?

[20:38] <FROGGS> yeah

[20:38] <donaldh> nqp is looking good for me, just building rakudo

[20:39] *** hummeleBop left
[20:40] * moritz tries too

[20:41] <masak> moritz: got another "Forbidden" from irclog.

[20:42] <masak> FROGGS: just saw http://irclog.perlgeek.de/perl6/2013-08-21#i_7479324

[20:42] <masak> FROGGS: I agree that's not useful, and should always be two args for hashes.

[20:42] <masak> FROGGS: feel free to enforce that.

[20:43] <FROGGS> masak: later there was a discussion with TimToady, and we agreed to pass the key only if there is just one sprintf directive

[20:45] <FROGGS> masak: here, http://irclog.perlgeek.de/perl6/2013-08-21#i_7479412

[20:45] <moritz> masak: are you behind a large NAT?

[20:45] <lizmat> seems to get past stage pir now

[20:45] * FROGGS crosses fingers

[20:45] <lizmat> $ perl6 -e 'printf "%d\n", 2**65'

[20:45] <lizmat> 36893488147419103232

[20:46] <lizmat> yeah!

[20:46] <FROGGS> \o/

[20:46] <lizmat> running spectest now

[20:46] <donaldh> is there an eval bot for jvm rakudo ?

[20:46] <FROGGS> donaldh: not that I know

[20:46] <FROGGS> camelia: help

[20:46] <camelia> FROGGS: Usage: <(nqp-jvm|star|pugs|nqp|std|niecza|rakudo|b|nom|npr|n|r|perl6|prn|rn|p|rnp|nrp|pnr|rpn|p6|nr)(?^::\s) $perl6_program>

[20:46] <FROGGS> no

[20:47] <timotimo> hm, it seems to me we got rid of the last blockers recently, no?

[20:47] <moritz> lizmat: I get the same error on JVM

[20:47] <FROGGS> timotimo: what blockers?

[20:47] <timotimo> for getting a jvm evalbot

[20:48] <lizmat> moritz: seems that nuking the install dir made it work for me

[20:48] <FROGGS> lizmat: I had that once too, but I dunno what enforces that

[20:48] <lizmat> I guess at some point it tries to use the old nqp?

[20:50] <FROGGS> hmmm, next time we could check if something still has an old mtime

[20:50] <FROGGS> t/spec/S32-io/IO-Socket-INET.t                                (Wstat: 0 Tests: 41 Failed: 7)

[20:50] <FROGGS>   Failed tests:  2, 4, 6, 20, 33, 39, 41

[20:50] <FROGGS> the rest is fine on my box

[20:51] <masak> moritz: possibly. I am in a hotel.

[20:52] <masak> FROGGS: at first glance, that feels like a bad idea.

[20:52] <masak> FROGGS: for the simple reason that that's not how sprintf rolls, so neither should .fmt

[20:52] <lizmat> FROGGS: that is a long standing pb

[20:52] <lizmat> those tests take 20 seconds when they shouldn't

[20:52] <masak> FROGGS: if we let .fmt do that, then .fmt shoulders some of the logic of sprintf (which is bad), having to parse the directives itself.

[20:53] <FROGGS> masak: it does not parse 'em

[20:53] <lizmat> it indicates a problem in the socket code, or a problem in the test

[20:53] <FROGGS> masak: but true, in this case Hash decides what it is going to pass to sprintf in case of a .fmt call

[20:54] *** jnap1 left
[20:54] <lizmat> intriguing, after the rebuild all of my ico related errors are gone

[20:55] <FROGGS> lizmat: you're welcome :P

[20:55] <lizmat> so, spectest clean

[20:55] <FROGGS> awesome

[20:55] <lizmat> *icu

[20:55] *** xenoterracide joined
[20:55] <FROGGS> the IO-Socket-INET tests are clean too?

[20:55] <lizmat> no

[20:55] <FROGGS> k

[20:55] <lizmat> the same 7 failures

[20:56] <FROGGS> I'd try to fix them if it wasn't that late already

[20:57] <lizmat> ok, maybe the 5 second boundary is too small

[20:57] <donaldh> MacOS, JVM, No registered operation handler for 'sprintfdirectives'

[20:58] <donaldh> Just cleaning everything, nuking install dirs, etc.

[20:58] <FROGGS> rm -rf install && cd parrot && make install && perl ConfigureJVM.pl && make install

[20:59] <donaldh> jvm :-)

[20:59] <FROGGS> ahh, ehh, yeah *g*

[20:59] <dalek> roast: e95d9dd | (Elizabeth Mattijsen)++ | S32-io/IO-Socket-INET.t:

[20:59] <dalek> roast: Give 10 seconds time instead of 5

[20:59] <dalek> roast: review: https://github.com/perl6/roast/commit/e95d9ddeb0

[20:59] <lizmat> with this change, INET passes when run by itself for me

[21:00] <lizmat> running it as part of the spectest now

[21:01] <lizmat> maybe I should increase the time some more if run in a parallel spectest

[21:01] <FROGGS> lizmat++

[21:01] <FROGGS> same on my box

[21:01] *** skids left
[21:01] *** jnap joined
[21:01] <FROGGS> we have a clean test suite \o/

[21:02] <lizmat> not sure if it is clean with TEST_JOBS=8

[21:02] <FROGGS> meh

[21:02] <FROGGS> only 4 here :o(

[21:02] <FROGGS> but hey, it is still an awesome laptop :o9

[21:02] <FROGGS> :o)

[21:04] * timotimo has 2 cores in his laptop and trying to compile a rakudo will invariably get the temperature up to 90degC and the cores underclocked to not melt

[21:05] <moritz> setting compilation still fails here

[21:05] <moritz> after 'git clean -xdf' in both rakudo and nqp

[21:05] <lizmat> moritz: did you nuke the install dir ?

[21:05] <timotimo> it's really annoying that "auto" will only go up to "fullspeed", which is about half as fast as "disengaged"

[21:06] *** grondilu left
[21:07] <donaldh> r: %*ENV<AAAAA> = 'aaaaa'; say(%*ENV.keys)

[21:07] <camelia> rakudo e84dda: OUTPUT«MANPATH PERLBREW_VERSION PERLBREW_PERL SHELL TERM USER LS_COLORS PERLBREW_BASHRC_VERSION PERLBREW_ROOT MANPATH_WITHOUT_PERLBREW MAIL PATH PWD LANG PERLBREW_HOME PATH_WITHOUT_PERLBREW SHLVL HOME PERLBREW_MANPATH PERLBREW_PATH LOGNAME _ OLDPWD␤»

[21:08] <donaldh> r: %*ENV<AAAAA> = 'aaaaa'; say(%*ENV<AAAAA>)

[21:08] <camelia> rakudo e84dda: OUTPUT«aaaaa␤»

[21:08] <donaldh> weird huh?

[21:08] <lizmat> %*ENV is special, check src/core/terms

[21:08] <lizmat> I wouldn't be surprised that keys is not updated

[21:08] <donaldh> Why special. Broken special?

[21:08] <lizmat> it's also not VM agnostic, so could be a pb on one VM only

[21:09] <donaldh> I get same on JVM.

[21:09] <moritz> r: %*ENV<AAAAA> = 'aaaaa'; say(%*ENV.keys.sort)

[21:09] <lizmat> FROGGS: parallel spectest now also clean for me

[21:09] <camelia> rakudo e84dda: OUTPUT«HOME LANG LOGNAME LS_COLORS MAIL MANPATH MANPATH_WITHOUT_PERLBREW OLDPWD PATH PATH_WITHOUT_PERLBREW PERLBREW_BASHRC_VERSION PERLBREW_HOME PERLBREW_MANPATH PERLBREW_PATH PERLBREW_PERL PERLBREW_ROOT PERLBREW_VERSION PWD SHELL SHLVL TERM USER _␤»

[21:09] <FROGGS> lizmat: that is pretty cool

[21:09] <donaldh> Also, no point in specialness on JVM.

[21:09] <FROGGS> I'm eager to see the module smoke results

[21:09] <donaldh> I assume it's special because it's maintaining parrot's env ?

[21:09] <donaldh> or other reasons?

[21:10] <lizmat> for one, it only installs proxies for the keys addad after the env is read

[21:11] <lizmat> jnthn would probably know more

[21:12] <lizmat> but it looks like the enviter is not updated by the proxy

[21:12] <lizmat> otoh, I could be talking out of the side of my neck

[21:13] <jnthn> The Env thing on Parrot is actually not a normal Hash, but rather an Env PMC. Shoving stuff in it should update the environment.

[21:13] <jnthn> I think that's why the proxy. To update that.

[21:15] <lizmat> r: say %*ENV<HOME>; %*ENV.delete("HOME"); say %*ENV<HOME>; say %*ENV.keys.grep( { m/HOME/ } )

[21:15] <camelia> rakudo e84dda: OUTPUT«/home/p6eval␤(Any)␤PERLBREW_HOME HOME␤»

[21:15] <lizmat> delete also doesn't remove it from keys

[21:15] <TimToady> doesn't seem like the right strategy for JVM, if JVM considers env immutable; we'd need something more like our own %*ENV that gets passed to exec at the last moment

[21:16] <lizmat> so apparently changes to %*ENV are not propagates to .keys / .values on %*ENV

[21:16] <lizmat> although the changes *are* carried out

[21:17] <TimToady> in any case, "my %*ENV" is a different variable, and making all these variables proxy to PROCESS::<%ENV> is gonna go terribly wrong

[21:18] * lizmat is tired and sad, sleep&

[21:18] <FROGGS> lizmat: sleep well

[21:21] <timotimo> Stage parse      : 653.470

[21:21] <timotimo> time for sleep :|

[21:21] <FROGGS> gnight

[21:27] <dalek> v5: 9d6ae74 | (Tobias Leich)++ | STATUS.md:

[21:27] <dalek> v5: status update (new nqp+rakudo revision)

[21:27] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/9d6ae74b16

[21:27] <dalek> v5: 9e01b03 | (Tobias Leich)++ | / (2 files):

[21:27] <dalek> v5: status update after nqp/rakudo update

[21:27] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/9e01b033ed

[21:28] *** abnorman left
[21:28] <FROGGS> gnight @all

[21:31] <donaldh> No registered operation handler for 'sprintfdirectives'

[21:31] <donaldh> we don't seem to have a sprintfdirectives on JVM

[21:31] <FROGGS> ohh

[21:31] <FROGGS> true

[21:31] <FROGGS> hold on

[21:34] <dalek> nqp: 0e552b1 | (Tobias Leich)++ | src/vm/jvm/QAST/Compiler.nqp:

[21:34] <dalek> nqp: added nqp::sprintfdirectives for jvm backend, donaldh++

[21:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0e552b1025

[21:35] <donaldh> thx FROGGS++

[21:35] <dalek> rakudo/nom: 9fcbf53 | (Tobias Leich)++ | tools/build/NQP_REVISION:

[21:35] <dalek> rakudo/nom: update nqp revision

[21:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9fcbf53d13

[21:38] *** kbaker left
[21:42] <donaldh> for %*ENV.keys -> $x { %*ENV.delete($x) }; say +%*ENV; say +%*ENV.keys; say +%*ENV.values

[21:42] <donaldh> r: for %*ENV.keys -> $x { %*ENV.delete($x) }; say +%*ENV; say +%*ENV.keys; say +%*ENV.values

[21:42] <camelia> rakudo 44ba8a: OUTPUT«23␤23␤23␤»

[21:43] *** abnorman joined
[21:45] <donaldh> r: for %*ENV.keys -> $x { %*ENV.delete($x) }; for %*ENV.keys -> $x { say %*ENV<$x> }

[21:45] <camelia> rakudo 44ba8a: OUTPUT«(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤(Any)␤»

[21:51] * TimToady thinks in the P6 model, PROCESS::<%*ENV> should be considere immutable, and you set "temp %*ENV" to have a local environment that your children (dynamic and exec) will inherit

[21:52] <TimToady> PROCESS<%*ENV> can be shared by different interpreters with different GLOBAL packages, so at minimum, to preserve sanity in something like an apache setup, we should copy PROCESS::<%*ENV> to GLOBAL::<%*ENV> before we modify it

[21:53] <TimToady> but "temp %*ENV" already makes a dynamically scoped copy, so that's probably good enough

[21:54] <TimToady> so I suspect PROCESS::<%*ENV> should throw an exception if you try to modify it in place

[21:56] <TimToady> note that S02:3010 allows implementations to provide writeable PROCESS variables, but I don't think %*ENV should be one of them

[21:56] <synopsebot> Link: http://perlcabal.org/syn/S02.html#line_3010

[21:57] <TimToady> $*PID isn't writeable either...

[21:58] <TimToady> donaldh: does this make sense to you?

[21:59] *** araujo joined
[21:59] <donaldh> TimToady: yes. immutable++

[21:59] <TimToady> at least, the top one

[22:00] <TimToady> dynamic %*ENV can be mutable, maybe

[22:00] <TimToady> but those will be invisible to calls into Java, unless the interface allows passing a new env

[22:01] <TimToady> s/Java/JVM/

[22:03] <donaldh> > { temp %*ENV = (); shell('env') }

[22:04] <donaldh> PWD=/Users/donaldh/git/rakudo

[22:04] <donaldh> SHLVL=1

[22:04] <donaldh> _=/usr/bin/env

[22:04] <TimToady> masak: calls to .fmt are self-clocking, and don't have to maintain lockstep the way sprintf does; therefore a little more dwimmery is appropriate there, and it is a rather trivial piece of dwimmery at that, with very little wat

[22:04] <TimToady> donaldh: yeah, that should propagate the new env down to shell()

[22:05] <donaldh> TimToady: it does, on my branch ;-)

[22:05] <TimToady> \o/; this is probably the only sane way to do business on some VMs such as the JVM

[22:06] <donaldh> I think it's the sane way to do business on parrot too, IMHO.

[22:06] <masak> TimToady: hm. I don't think I can see the playing field clearly. need to mull over it.

[22:06] *** zwut00 left
[22:07] <TimToady> I was originally of your opinion, and changed my mind, if that helps at all :)

[22:08] * TimToady hates it when people say that, to be fair... :)

[22:08] *** denis_boyun joined
[22:08] *** FROGGS left
[22:08] <donaldh> :)

[22:10] *** bbkr__ joined
[22:13] *** spider-mario left
[22:17] <masak> TimToady: hehe.

[22:17] *** FROGGS joined
[22:17] *** jnap left
[22:17] <masak> TimToady: well, I don't have time to change my opinion right now, because I'mma sleep.

[22:17] <masak> 'night, #perl6

[22:17] <donaldh> 'night masak o/

[22:18] *** dmol left
[22:18] <TimToady> o/

[22:18] *** jnap joined
[22:23] *** cbk joined
[22:25] <dalek> nqp/shell-rework: f437682 | (Donald Hunter)++ | src/vm/jvm/ (3 files):

[22:25] <dalek> nqp/shell-rework: Add nqp::shell3 that takes  and %env. Remove previous attempt at env.

[22:25] <dalek> nqp/shell-rework: review: https://github.com/perl6/nqp/commit/f437682f48

[22:25] <dalek> nqp/shell-rework: e3ef857 | (Donald Hunter)++ | / (5 files):

[22:25] <dalek> nqp/shell-rework: Merge branch 'master' of github.com:perl6/nqp into shell-rework

[22:25] <dalek> nqp/shell-rework: review: https://github.com/perl6/nqp/commit/e3ef857339

[22:25] <dalek> nqp/shell-rework: 6aea459 | (Donald Hunter)++ | src/vm/jvm/QAST/Compiler.nqp:

[22:25] <dalek> nqp/shell-rework: Merge branch 'master' of github.com:perl6/nqp into shell-rework

[22:25] <dalek> nqp/shell-rework: review: https://github.com/perl6/nqp/commit/6aea4596e4

[22:26] *** denis_boyun left
[22:28] *** FROGGS left
[22:28] *** benabik left
[22:30] <donaldh> Okay to merge https://github.com/perl6/nqp/pull/112  ?

[22:31] <jnthn> donaldh: +1

[22:31] <jnthn> Provided it builds ;)

[22:31] *** PacoAir left
[22:34] <donaldh> jnthn: I am experimenting with removing the %*ENV specialness on JVM. Everything seems saner.

[22:34] <jnthn> \o/

[22:35] <donaldh> did you see that TimToady is leaning towards immutability of PROCESS::<%*ENV>

[22:36] <dalek> nqp: f437682 | (Donald Hunter)++ | src/vm/jvm/ (3 files):

[22:36] <dalek> nqp: Add nqp::shell3 that takes  and %env. Remove previous attempt at env.

[22:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f437682f48

[22:36] <dalek> nqp: e3ef857 | (Donald Hunter)++ | / (5 files):

[22:36] <dalek> nqp: Merge branch 'master' of github.com:perl6/nqp into shell-rework

[22:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e3ef857339

[22:36] <dalek> nqp: 6aea459 | (Donald Hunter)++ | src/vm/jvm/QAST/Compiler.nqp:

[22:36] <dalek> nqp: Merge branch 'master' of github.com:perl6/nqp into shell-rework

[22:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6aea4596e4

[22:36] <dalek> nqp: 4a311ef | (Donald Hunter)++ | src/vm/jvm/ (3 files):

[22:36] <dalek> nqp: Merge pull request #112 from perl6/shell-rework

[22:36] <dalek> nqp: 

[22:36] <dalek> nqp: Add nqp::shell($cmd, $dir, %env) op and support existing nqp::shell($cmd) until rakudo catches up

[22:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4a311ef1aa

[22:44] <donaldh> > { temp $*CWD = '/'; shell('pwd'); }; shell('pwd')

[22:48] <TimToady> otoh, see recently specced chdir/visitdir functions

[22:49] <TimToady> though visitdir might be a macro that desugars to temp $*CWD

[22:50] <TimToady> Fry's &

[22:50] *** Mouq joined
[22:55] *** Mouq left
[22:59] <donaldh> https://github.com/rakudo/rakudo/pull/196

[23:03] <donaldh> sleep&

[23:04] *** donaldh left
[23:07] * avuserow thinks donaldh++'s "immutable++" seems like an autopun

[23:15] *** BenGoldberg joined
[23:15] <BenGoldberg> Good evening

[23:18] <jnthn> 'night, #perl6

[23:28] *** lichtkind joined
[23:29] *** lichtkind_ joined
[23:29] *** lichtkind_ is now known as licjtkind

[23:30] <licjtkind> TimToady: you where involved into what jonathan presentd in kiev?

[23:35] *** FROGGS joined
[23:38] *** sidus left
[23:39] *** cognominal joined
[23:46] *** sidus joined
[23:47] *** pochi left
[23:47] *** pochi_ joined
[23:50] *** thou left
[23:53] *** berekuk left
[23:53] *** sidus left
