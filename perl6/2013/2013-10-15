[00:00] *** dmol left
[00:01] *** pecastro left
[00:12] *** xenoterracide_ left
[00:14] *** kurahaupo left
[00:31] *** xenoterracide joined
[00:41] *** RangerMauve joined
[00:47] <RangerMauve> Hey, what do sockets inherit from? I see here in an example that I can read from a socket using $mysocket.recv.

[00:47] <RangerMauve> Also, is there a way to onlt read from a socket if it has data buffered?

[00:49] <diakopter> RangerMauve: sounds like a Perl 5 question... (this is the Perl 6 channel)

[00:50] <diakopter> (I'd help you with your question if I knew the answer, however)

[00:50] <RangerMauve> diakopter: Would there be a difference?

[00:50] <diakopter> the languages are extremely different; very few similarities in fact

[00:50] <RangerMauve> I'm making my program with Perl6 so I'd probably need to know the Perl6 way of doing things.

[00:50] <diakopter> oh?

[00:50] <diakopter> which Perl 6 implementation..

[00:51] <RangerMauve> Rakudo, I think it was called

[00:51] <diakopter> do you know how recent/new it is?

[00:51] <diakopter> perl6 --version

[00:52] *** cognominal left
[00:52] <RangerMauve> Lemme see

[00:52] <diakopter> hm, I don't see sockets on http://doc.perl6.org/

[00:52] <RangerMauve> version 2012.10 built on parrot 4.6.0 revision 0

[00:52] <diakopter> oh, it's very old

[00:52] <RangerMauve> diakopter: This is what I was looking at: 

[00:53] <RangerMauve> http://perldoc.perl.org/IO/Socket.html

[00:53] <diakopter> that's the documentation for Perl 5; it's not applicable to Rakudo

[00:53] <RangerMauve> An echo server I made seemed to work. But I guess that was just a coincidence

[00:54] <diakopter> I think in that (year-old) version of Rakudo the APIs were similar

[00:54] <RangerMauve> HMM

[00:54] <diakopter> (yours is Oct 2012)

[00:54] <RangerMauve> Yeah, I'm using windoze and just used an MSI that I found

[00:55] <diakopter> there's a more recent .msi here http://rakudo.org/downloads/star/

[00:56] <RangerMauve> Cool, I'll try that out then

[00:58] <diakopter> I can't promise it'll work better or even identically

[00:58] <diakopter> however, we'll be much more likely to reproduce crashes/bugs you encounter

[00:59] <RangerMauve> Well, I guess I'll just have to figure out how it'd work. Thanks for the help by the way.

[00:59] <RangerMauve> So how would I go about networking with Perl6, then?

[01:01] <diakopter> rj: say Socket

[01:01] <camelia> rakudo-jvm e22ac2: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/C6D_Lr7tIH␤Undeclared name:␤    Socket used at line 1␤␤»

[01:01] <diakopter> rj: say IO

[01:01] <camelia> rakudo-jvm e22ac2: OUTPUT«(IO)␤»

[01:01] <diakopter> rp: say IO

[01:02] <diakopter> r: say IO

[01:02] <camelia> rakudo e22ac2: OUTPUT«(IO)␤»

[01:02] <diakopter> RangerMauve: I don't know what the current state of sockets is

[01:02] <RangerMauve> Heh, fair enough

[01:03] <diakopter> you might go poling through here http://feather.perl6.nl/syn/

[01:03] <diakopter> er, plking

[01:03] <diakopter> er, poking

[01:03] <RangerMauve> The echo server I had set up works just fine

[01:04] <diakopter> RangerMauve: colomon pointed me to the source here; it could be helpful: https://github.com/rakudo/rakudo/blob/nom/src/core/IO/Socket.pm

[01:04] <RangerMauve> diakopter: THis is what I was using. http://pastebin.com/F03xfs6Y

[01:05] <colomon> RangerMauve: I'm trying to figure out who has been working on that code.

[01:06] <diakopter> .oO( the blind leading the blind, by pointing.. )

[01:06] <diakopter> <- blind

[01:06] <RangerMauve> Heh

[01:08] <colomon> looks like jnthn, FROGGS, donaldh, moritz have been the ones hacking IO::Socket.pm

[01:08] <diakopter> lizmat too

[01:08] <diakopter> in IO anyway

[01:08] <diakopter> also labster

[01:08] <colomon> most of those are European, hence probably asleep now.

[01:09] <RangerMauve> Well I guess I can just lurk. I'm a night dweller so it might be morning for them soon enough. :D

[01:13] <RangerMauve> So how is perl in terms of asynchronous stuff? Is multithreading a thing?

[01:16] <diakopter> perl 5 can do threads, but not the direct-memory-sharing kind, if it was compiled with that configured. Only rakudo with the JVM backend can effectively use threads in Perl 6 right now

[01:17] <RangerMauve> Hmm

[01:17] <RangerMauve> I guess I could set up my own event loop.

[01:17] <diakopter> there are plenty of nifty things for Perl 5 that help with that

[01:18] <diakopter> but as far as firing async operations such that you can return to your event loop, only rakudo-jvm can do that well right now

[01:18] <diakopter> (it has its own worker threadpool with event loops, ish)

[01:19] <RangerMauve> Hmm, I've been using Javascript with Node.js a lot lately so I've gotten myself stuck in a Node.js mindset. :P

[01:19] <lee_> in that case you may like AnyEvent on perl 5

[01:19] <diakopter> if you don't want to use the JVM backend of Rakudo, I'd recommend exploring the myriad possiblities with Perl 5 right now

[01:20] <diakopter> yes, look into AnyEvent

[01:20] <RangerMauve> I guess I could do that, then.

[01:20] *** FROGGS_ joined
[01:21] *** c1sung left
[01:24] *** FROGGS left
[01:27] *** c1sung joined
[01:30] <jnap> RangerMauve: not sure what you want to do with evented code, but in the last stable release of Catalyst webframework we added provisional support for eventloops (anyevent and others).  If you are trying to learn it, I'd be happy to do my best if I can get some help with more code examples, shake it out a bit, etc

[01:32] <RangerMauve> jnap: My project for learning perl6 is going to be making some sort of multiplayer game, and I was planning on using newline delimited JSON to send data between clients and the server.

[01:33] <RangerMauve> So, so far I'm thinking I'll have a game update loop that looks like: read JSON messages from sockets, update game state, send messages to clients about new game state.

[01:36] <jnap> Sounds like fun, I'm into game myself.  If you decide to try this on the Perl5 side I would say Mojolicious probably has the most baked support for doing websockets and so forth, for this kind of app, if you plan on server to browser client.  But if you want to get involved, as I said I'd love for someone to beat on the support for this in Catalyst, see if we can improve it!

[01:36] <jnap> I also hang out on irc.perl.org#catalyst

[01:37] <jnap> not that I want to take you from P6, I too am excited to see async coming to Perl in a baked in manner.

[01:37] <RangerMauve> Oh, this wouldn't be web based. The game is going to be command-line based. :D

[01:37] *** c1sung left
[01:37] <jnap> is onew reason I started to lurk here :)

[01:37] <jnap> oh, interesting

[01:37] <RangerMauve> I'll check it out though

[01:38] <jnap> anyevent, io-async and POE are the more popular event loop thingies

[01:38] <jnap> I would say, on the P5 side

[01:40] <RangerMauve> I'll take a look at those, too

[01:44] *** c1sung joined
[01:51] *** grondilu left
[01:57] *** c1sung left
[02:02] *** c1sung joined
[02:40] *** jnap left
[02:43] *** jnap joined
[02:43] <labster> oh, hi all.  No, I'm not working on IO::Socket, even if I should be.

[02:44] *** jnap left
[02:45] <labster> colomon: can you tell me what is causing File::Find::Duplicates to fail tests?  I started working on getting rid of the bitrot yesterday.

[02:45] <colomon> labster: I don't know?  ARe you not seeing failures locally?

[02:46] <colomon> Looking at the smoker report… looks like it wasn't finding File::Tools until today?

[02:46] <labster> no failures, just warnings.

[02:47] *** Mouq joined
[02:47] <labster> Yeah, that was the main thing, because File::Tools got split.

[02:48] <colomon> I'm trying it now.

[02:48] <retupmoca> awww, moarvm doesn't support 'make DESTDIR="/my/path/here/" install' :(

[02:49] <colomon> t/00-basic.t (Wstat: 0 Tests: 7 Failed: 6)

[02:49] <colomon>   Failed tests:  1-4, 6-7

[02:49] <colomon> labster: ^^

[02:51] <colomon> labster: hmmm

[02:51] <colomon> not ok 1 - Basic functionality

[02:51] <colomon> #      got: 't/test-files/foobar.txt t/test-files/foobar-2.txt t/test-files/empty2 t/test-files/empty1'

[02:51] <colomon> # expected: 't/test-files/foobar-2.txt t/test-files/foobar.txt t/test-files/empty1 t/test-files/empty2'

[02:51] <colomon> ordering issues?

[02:52] <labster> maybe

[02:56] <colomon> that's totally it

[02:56] <colomon> you generate @duplicates starting with a hash

[02:57] * labster thinks about how to sort an array in an array

[02:58] <retupmoca> oh - nqp-jvm doesn't support DESTDIR correctly either

[03:20] *** logie left
[03:45] *** preflex left
[03:47] *** preflex joined
[03:47] *** ChanServ sets mode: +v preflex

[03:53] <dalek> nqp: 4904f02 | dwarring++ | examples/rubyish/ (4 files):

[03:53] <dalek> nqp: added loose 'or', 'and'. line continuation on method signatures and calls

[03:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4904f027de

[03:53] <dalek> nqp: 150e52a | dwarring++ | examples/rubyish/README.md:

[03:53] <dalek> nqp: README updates

[03:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/150e52aa48

[04:06] *** bbkr_ left
[04:10] *** bbkr joined
[04:13] *** RangerMauve left
[04:23] *** RangerMauve joined
[04:28] *** RangerMauve left
[04:34] *** prevost joined
[04:39] *** prevost left
[04:41] <lue> r: say lcm(2,3,4,5); # I feel like this should be a thing.

[04:41] <camelia> rakudo e22ac2: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/uZtnDt91ah␤Undeclared routine:␤    lcm used at line 1. Did you mean '&lc'?␤␤»

[04:46] <moritz> lue: [lcm] exists

[04:47] <lue> derp. :)

[04:51] *** daniel-s_ joined
[04:53] *** BenGoldberg left
[04:55] *** daniel-s left
[04:59] *** kaleem joined
[05:41] *** SamuraiJack_ joined
[05:44] <moritz> lue: it's a common fallacy to get so attached to language features that you want to solve everything with language features, instead of actually programming :-)

[05:45] <moritz> s/fallacy/pitfall/

[05:50] <TimToady> well, one can fall off that wall on the reductionist side as well, and many have... :)

[05:50] *** wsri left
[06:13] *** kurahaupo joined
[06:30] *** kurahaupo left
[06:35] <Mouq> S17: "TODO: how you can access thread attributes inside a thread

[06:36] <Mouq> "async {say "my tid is ", +self;}"

[06:36] <Mouq> Just as a suggestion, would &?BLOCK be a bad place to potentially put this information?

[06:37] <Mouq> Although maybe it should be &*BLOCK or something since the tid really isn't going to be determined at compile time :p

[06:39] <JimmyZ> &*TID

[06:41] *** darutoko joined
[06:41] <Mouq> &*THREAD

[06:42] <Mouq> Or maybe we could have named asyncs :p

[06:45] *** kurahaupo joined
[06:51] *** FROGGS_ left
[07:03] <Mouq> n: my @a = ([^10],[^10 >>+>> 10]); @a[||(0;2),||(1;3)].say

[07:03] <camelia> niecza v24-98-g473bd20: OUTPUT«Unhandled exception: Slicels NYI␤  at /home/p6eval/niecza/lib/CORE.setting line 1536 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3554 (prefix:<||> @ 4) ␤  at /tmp/DLDXWyovrl line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE…»

[07:23] *** [Sno] left
[07:24] *** FROGGS joined
[07:43] *** xenoterracide left
[07:44] *** kaleem left
[07:48] *** go|dfish left
[07:50] *** Maddingue left
[07:50] *** kaleem joined
[07:53] *** fhelmberger joined
[07:53] *** go|dfish joined
[07:56] *** sqirrel joined
[07:56] *** Maddingue joined
[08:00] *** Maddingue left
[08:01] *** Maddingue joined
[08:07] <hoelzro> доброе утро, #perl6!

[08:09] *** darutoko left
[08:23] <timotimo> γuτεν μοργεν, #περλ6

[08:36] *** darutoko joined
[08:43] *** dmol joined
[08:44] *** denis_boyun joined
[08:45] *** dansamo joined
[08:47] *** zamolxes left
[08:48] *** zamolxes joined
[08:50] *** denis_boyun left
[08:51] <jnthn> Mouq: S17 needs some work to try and bring it in line with current reality. I'd not trust it too much... :)

[08:51] *** dakkar joined
[08:52] *** [Sno] joined
[08:58] *** wsri joined
[09:07] <dalek> Perlito: bd84de4 | (Flavio S. Glock)++ | / (3 files):

[09:07] <dalek> Perlito: Perlito - perl6 - tree grammar modules

[09:07] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/bd84de4f05

[09:08] *** dayangkun_ joined
[09:10] *** denisboyun joined
[09:11] *** dayangkun left
[09:21] <dalek> Perlito: b60f756 | (Flavio S. Glock)++ | / (3 files):

[09:21] <dalek> Perlito: Perlito5 - perl6 - apply subroutine refactoring

[09:21] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/b60f756e2a

[09:29] <dalek> Perlito: 66a0327 | (Flavio S. Glock)++ | / (2 files):

[09:29] <dalek> Perlito: Perlito5 - perl6 - __PACKAGE__

[09:29] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/66a0327525

[09:29] *** fglock joined
[09:31] *** FROGGS_ joined
[09:32] <fglock> p56: sub mysub { my $x = shift; my $y = shift; $x + $y } 

[09:32] <camelia> p5-to-p6 : OUTPUT«sub main::mysub {␤    my $x = shift(@_);␤    my $y = shift(@_);␤    $x + $y␤}␤»

[09:32] <fglock> not updated yet

[09:32] *** FROGGS left
[09:35] *** daxim joined
[09:35] <dalek> Perlito: c3c420e | (Flavio S. Glock)++ | / (2 files):

[09:35] <dalek> Perlito: Perlito5 - perl6 - sub cleanup

[09:35] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/c3c420e162

[09:36] <fglock> p56: sub mysub { my $x = shift; my $y = shift; $x + $y } 

[09:36] <camelia> p5-to-p6 : OUTPUT«sub main::mysub ($x?, $y?, *@_) {␤    $x + $y␤}␤»

[09:36] <fglock> yay

[09:37] <FROGGS_> cool

[09:38] *** xorp left
[09:38] *** kaleem left
[09:38] <JimmyZ> hot

[09:39] *** kaleem joined
[09:39] *** xorp joined
[09:40] *** grondilu joined
[09:40] *** grondilu left
[09:40] *** grondilu joined
[09:42] <moritz> fglock++

[09:42] <fglock> the refactoring is implemented here: https://github.com/fglock/Perlito/blob/master/src5/lib/Perlito5/Perl6/TreeGrammar.pm

[09:43] <moritz> p56: sub mysub { my ($x, $y, @rest) = @_; }

[09:43] <camelia> p5-to-p6 : OUTPUT«sub main::mysub {␤    my($x, $y, @rest) = @_␤}␤»

[09:44] <fglock> that one is more complicated, because it needs to scan the sub for other uses of @_

[09:44] <moritz> yes, thought so

[09:44] <fglock> I'll try to do it later

[09:44] *** sqirrel left
[09:45] <jnthn> p56: package Foo { sub bar { my $x = shift; $x } }

[09:45] <camelia> p5-to-p6 : OUTPUT«{␤    class Foo;␤    sub Foo::bar ($x?, *@_) {␤        $x␤    }␤}␤»

[09:46] <jnthn> Instead of main::bar or Foo::bar, it may be cleaner to just emit "our sub bar ..."

[09:46] <fglock> yes, that was the last commit - not live yet

[09:46] <jnthn> ah, cool

[09:47] <fglock> does it need 'our'?

[09:47] <jnthn> fglock++

[09:47] <moritz> fglock: yes

[09:47] <moritz> subs are lexical by default in p6

[09:47] <fglock> ok - adding

[09:47] <jnthn> Yeah, if it's gonna be an accurate translation it wants it, I think

[09:47] <FROGGS_> why don't you just have an *@_ signature? always?

[09:47] <jnthn> However, lexical subs from Perl 5 can have their "my" stripped as it's the default :)

[09:47] * moritz git pulls on p6eval@host07:~/Perlito

[09:48] <jnthn> r: sub foo { say @_ }; foo(1,2)

[09:48] <camelia> rakudo e22ac2: OUTPUT«1 2␤»

[09:48] <jnthn> FROGGS_: Mentioning @_ in a signatureless sub implies a *@_

[09:49] <FROGGS_> hmmm, interesting

[09:49] <FROGGS_> jnthn: I thought I made that explicitly for v5

[09:51] <dalek> Perlito: a2918cb | (Flavio S. Glock)++ | / (2 files):

[09:51] <dalek> Perlito: Perlito5 - perl6 - our sub

[09:51] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/a2918cbf48

[09:51] <jnthn> FROGGS_: For v5 I guess you need it whether or not the @_ is mentioned, though?

[09:51] <JimmyZ> r: sub foo { say shift @_ }; foo(1,2)

[09:51] <camelia> rakudo e22ac2: OUTPUT«1␤»

[09:52] <jnthn> r: sub foo { }; foo 1

[09:52] <camelia> rakudo e22ac2: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'foo' will never work with argument types (int) (lines 1, 1)␤    Expected: :()␤»

[09:52] <jnthn> perl: sub foo { }; foo 1

[09:52] <jnthn> perl5: sub foo { }; foo 1

[09:52] <jnthn> oh, I thought we had an evalbot for Perl 5...

[09:52] <jnthn> p5eval: sub foo { }; foo 1

[09:52] <p5eval> jnthn: No output

[09:52] <jnthn> Anyway, that's not an error in Perl 5.

[09:53] <jnthn> But it is in 6

[09:53] <fglock> maybe I should add *@_ always

[09:53] <jnthn> So you'd need to compile different in v5 :)

[09:53] <jnthn> fglock: You could, maybe

[09:54] <jnthn> fglock: I guess it gives people a signature to edit... :)

[09:54] <jnthn> And it's more accurate in the "sub that doesn't mention @_" case, which I guess is unusual (in so far as a sub that just throws away any arguments it gets is an oddity)

[09:56] <fglock> it is common to have methods that get $_[0] but don't use it

[09:57] <dalek> Perlito: 68a48a3 | (Flavio S. Glock)++ | / (2 files):

[09:57] <dalek> Perlito: Perlito5 - perl6 - sub has *@_ signature by default

[09:57] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/68a48a3a78

[09:58] <FROGGS_> jnthn: ahh, now I got it, yes

[09:59] <FROGGS_> jnthn: since "shift" implies using @_, I have to always install *@_

[09:59] <jnthn> fglock: Probably too common ;-) But yeah, agree.

[09:59] <jnthn> FROGGS_: oh yeah, I forgot implicit :)

[10:03] *** kurahaupo_ joined
[10:05] *** denisboyun left
[10:07] *** kurahaupo left
[10:08] *** atroxaper joined
[10:08] <atroxaper> Hello #perl6 !

[10:10] <atroxaper> Is it going to release jvm-R* this month?

[10:12] <moritz> probably not, still too much missing (for example NativeCall)

[10:14] <atroxaper> Ok. Thank you moritz for answer. And for you work!)

[10:15] <moritz> you're welcome.

[10:16] <dalek> Perlito: 890d83b | (Flavio S. Glock)++ | / (2 files):

[10:16] <dalek> Perlito: Perlito5 - perl6 - my sub

[10:16] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/890d83b462

[10:17] <jnthn> Yeah, we haven't get NativeCall so far along as we probably want for an R* release. Did get the debugger mostly fixed up for JVM, at least...plus some other spectest fixes.

[10:18] *** kurahaupo_ left
[10:19] *** kurahaupo joined
[10:19] <atroxaper> jnthn, cool!

[10:22] *** kurahaupo_ joined
[10:22] *** kurahaupo left
[10:23] *** kurahaupo joined
[10:23] *** kurahaupo_ left
[10:25] <jnthn> Today's "I'm glad I proofread this" moment: "...pooping from a stack"

[10:26] <daxim> insert freud trollface here

[10:26] *** kurahaupo left
[10:27] *** kurahaupo joined
[10:35] *** kaleem left
[10:36] *** kurahaupo_ joined
[10:36] *** kurahaupo left
[10:38] *** pernatiy left
[10:38] *** kurahaupo joined
[10:39] *** kurahaupo__ joined
[10:39] *** kurahaupo left
[10:40] *** kurahaupo_ left
[10:44] *** kurahaupo joined
[10:44] *** kurahaupo__ left
[10:58] *** kurahaupo_ joined
[10:58] *** kurahaupo left
[10:58] *** kurahaupo_ left
[10:58] *** kurahaupo joined
[10:59] *** Mouq left
[11:07] *** kurahaupo left
[11:07] *** kurahaupo_ joined
[11:09] <dalek> Perlito: a3b2e64 | (Flavio S. Glock)++ | / (4 files):

[11:09] <dalek> Perlito: Perlito5 - js - exists with array index

[11:09] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/a3b2e64ea0

[11:10] *** daniel-s_ left
[11:11] *** daniel-s_ joined
[11:12] *** atroxaper left
[11:12] *** kurahaupo_ left
[11:12] *** kurahaupo joined
[11:24] *** FROGGS_ left
[11:30] *** pecastro joined
[11:31] *** pecastro_ left
[11:41] *** kurahaupo_ joined
[11:41] *** kurahaupo left
[11:48] *** denis_boyun joined
[11:57] *** zakharyas joined
[12:01] *** cognominal joined
[12:07] <dalek> Perlito: 9863afb | (Flavio S. Glock)++ | / (2 files):

[12:07] <dalek> Perlito: Perlito5 - perl6 - sub refactoring - check args fix

[12:07] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/9863afb961

[12:15] <dalek> Perlito: 8dbed68 | (Flavio S. Glock)++ | TODO-perlito5:

[12:15] <dalek> Perlito: Perlito5 - perl6 - TODO list

[12:15] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/8dbed6826c

[12:20] *** skids left
[12:20] *** denis_boyun left
[12:25] *** FROGGS joined
[12:28] <mathw> jnthn: haha. Great one to leave on a slide at an important conference, that...

[12:31] *** pernatiy joined
[12:31] *** kurahaupo joined
[12:31] *** kurahaupo_ left
[12:32] *** kurahaupo left
[12:33] *** kurahaupo joined
[12:33] *** gshank left
[12:37] <FROGGS> r: my $num = 123.456789; say $num.round(1e-5)

[12:37] <camelia> rakudo e22ac2: OUTPUT«123.45679␤»

[12:37] <FROGGS> j: my $num = 123.456789; say $num.round(1e-5)

[12:37] <camelia> rakudo-jvm e22ac2: OUTPUT«123.45679000000001␤»

[12:37] <FROGGS> k, still existent

[12:38] <FROGGS> j: my $num = 123.456789; say $num.round(1e-4)

[12:38] <camelia> rakudo-jvm e22ac2: OUTPUT«123.4568␤»

[12:46] <dalek> Perlito: 2120983 | (Flavio S. Glock)++ | / (3 files):

[12:46] <dalek> Perlito: Perlito5 - perl6 - TODO list; special variables fix

[12:46] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/2120983e21

[12:46] *** PacoAir joined
[12:48] *** ajr joined
[12:48] *** ajr is now known as Guest29033

[13:00] *** kurahaupo_ joined
[13:00] *** kurahaupo left
[13:06] *** kurahaupo_ left
[13:06] *** kurahaupo joined
[13:07] *** kurahaupo_ joined
[13:07] *** kurahaupo left
[13:15] *** kurahaupo_ left
[13:15] *** kurahaupo joined
[13:18] *** lowpro30 joined
[13:20] *** denis_boyun joined
[13:22] *** kurahaupo left
[13:22] *** kurahaupo_ joined
[13:25] *** kurahaupo joined
[13:25] *** kurahaupo_ left
[13:27] *** lowpro30 left
[13:27] *** kurahaupo left
[13:28] *** kurahaupo_ joined
[13:29] *** gshank joined
[13:31] *** CharellKing joined
[13:35] *** kurahaupo_ left
[13:36] *** kurahaupo joined
[13:37] *** cognominal left
[13:39] *** lowpor03 joined
[13:49] *** lowpro30_ joined
[13:51] *** lowpor03 left
[13:52] *** bluescreen10 joined
[13:55] *** skids joined
[14:03] *** logie joined
[14:04] <japhb__> How relocatable are rakudo-parrot and rakudo-jvm once I have done 'make install'?

[14:05] <japhb__> I want to do builds in a separate dir from final location, and then only after I've got all the panda modules installed and so on, swizzle a symlink to the ready-to-go tree.

[14:06] <japhb__> But I'm curious how well that works (or doesn't).

[14:06] <jnthn> Is that not just having two side-by-side installs?

[14:06] <jnthn> --prefix=rakudo/install/parrot vs --prefix=rakudo/install/jvm ?

[14:07] <jnthn> You can't just copy the binaries to a new location, though...they end up with paths embedded.

[14:07] <diakopter> well if you know where it will be relocated to... just mimic the dir structure

[14:08] <jnthn> The JVM one is closer to relocatable in so far as you can hack the perl6.sh, but I think it still embeds some paths somewhere

[14:08] <moritz> rakudo on parrot's relocatibility is 0.

[14:10] <FROGGS> +0 or -0 ?

[14:10] <moritz> yes

[14:11] <jnthn> What a point to float :P

[14:11] <japhb__> jnthn: well, I don't want there to be a long window of time where everything is half-built; I want to still be able to go about my daily routine (using Perl 6 programs normally) while the new version builds, installs modules, and so on.  So prefix alone won't do it, I think.

[14:12] <FROGGS> one problem that possibly never vanishes is that %*CUSTOM_LIB has the paths when (pre)compiling a module, same for %*ENV and others...

[14:12] <japhb__> >.<

[14:13] <FROGGS> unless it would serialize relative paths

[14:14] <jnthn> japhb__: Have it do it while you sleep? ;-)

[14:14] <japhb__> FROGGS: relative paths would definitely help, yes.

[14:14] <jnthn> japhb__: Or, do it in a VM and rsync the output :)

[14:14] <jnthn> (to the same paths)

[14:14] <jnthn> :)

[14:14] <japhb__> Oh hmmm, that's an interesting idea.

[14:14] <japhb__> Kindof a heavy hammer.

[14:14] <jnthn> Yeah

[14:15] *** kurahaupo left
[14:15] *** kurahaupo_ joined
[14:15] <tadzik> japhb__: what's your use-case?

[14:15] <tadzik> did you consider building a new version of rakudo in rakudobrew and then switching it?

[14:16] *** kaare_ joined
[14:16] <japhb__> tadzik: I have two: one I mentioned above, and one of wanting to share a common build that I curate with other people who don't want to think about building Rakudo and panda and all the right modules -- they just want to use my scripts.

[14:17] <tadzik> ah

[14:17] <tadzik> well, rakudobrew covers the first one

[14:18] <diakopter> japhb__: why can't you fake up the dirs beforehand like I said

[14:19] <jnthn> japhb__: You could also always just build the new on in rakudo-parrot-abc123

[14:19] <japhb__> heading for bus &  # But will respond to above when I get there.

[14:19] <jnthn> japhb__: And then delete the previous one after twizzling the symlink

[14:20] <diakopter> japhb__: okay, here's a better alternative

[14:20] <diakopter> fake up the directories in a place *where* you know you will have control/access to

[14:20] <diakopter> install to there

[14:20] <diakopter> tar up and copy to destination

[14:20] <diakopter> then symlink them from their ultimate destination

[14:20] *** kurahaupo_ left
[14:20] <tadzik> or run sed -i on all binaries and replace the paths inside. What can go wrong :)

[14:20] *** kurahaupo joined
[14:21] <tadzik> I used to do that with chrome

[14:22] *** kurahaupo_ joined
[14:22] *** kurahaupo left
[14:22] <diakopter> <.>

[14:24] *** bluescreen10 left
[14:26] *** bluescreen10 joined
[14:26] <jnthn> oh wow, I might just have done my slides and will actually get some Perl 6 tuits today... :)

[14:33] <colomon> jnthn++

[14:33] *** donaldh joined
[14:33] <japhb__> bak  # Ah, that sad day when the morning sunshine no longer quite makes it to the bus stop ...

[14:34] *** bluescreen10 left
[14:35] *** benabik left
[14:37] <japhb__> A variant of jnthn's idea was my first one ... build in .../rakudo-`git describe`/ and do all my panda installs into that, and then when I'm done update .../rakudo-parrot/ and .../rakudo-jvm/ symlinks.

[14:37] *** donaldh left
[14:37] <jnthn> japhb__: Morning sunshine? I live in Scandinavia... :P

[14:38] <japhb__> jnthn: You still get it.  Only for less of the year, probably.  :-)

[14:38] <jnthn> Yeah, and I'm not actually far enough north for it to be too extreme. :)

[14:38] <japhb__> Well, assuming your stop isn't on the north side of a hill.

[14:38] <jnthn> Getting to the bit of the year where I'll most likely walk to teaching work in darkness and leave it in darkness, however...

[14:39] <japhb__> bleah.  That time will come soon enough for me, too.

[14:39] <jnthn> The worst bit is when you then have the immense misfortune to get put in a classroom with no windows... 

[14:40] <jnthn> Thankfully, there are few of those.

[14:42] <japhb__> Yeah, no non-artificial light all day can be a serious bummer.

[14:51] *** Guest29033 left
[14:52] *** zakharyas left
[15:03] *** kurahaupo joined
[15:03] *** kurahaupo_ left
[15:04] *** ajr joined
[15:04] *** ajr is now known as Guest13015

[15:04] *** Guest13015 is now known as ajr_

[15:12] *** kurahaupo left
[15:12] *** kurahaupo_ joined
[15:13] <dalek> Perlito: 3ce38e5 | (Flavio S. Glock)++ | / (2 files):

[15:13] <dalek> Perlito: Perlito5 - perl6 - while; <>

[15:13] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/3ce38e59d4

[15:14] *** lowpro30_ left
[15:16] *** benabik joined
[15:16] *** lowpro30 joined
[15:17] *** araujo left
[15:18] *** araujo joined
[15:20] *** kurahaupo joined
[15:20] *** kurahaupo_ left
[15:20] *** CharellKing left
[15:25] *** kurahaupo left
[15:26] *** [Sno] left
[15:28] *** dayangkun_ left
[15:31] <diakopter> japhb__: well, Reveal bulbs are pretty close!

[15:31] <diakopter> I like 'em anyway

[15:36] *** kurahaupo joined
[15:37] *** kurahaupo left
[15:40] *** kurahaupo joined
[15:42] *** dayangkun_ joined
[15:44] *** leo2007 joined
[15:45] *** leo2007 left
[15:49] *** larks_ is now known as larks

[15:49] *** larks left
[15:49] *** larks joined
[15:49] <pmichaud> Reveal++

[15:56] *** jnap joined
[15:59] *** fhelmberger left
[16:06] *** kurahaupo left
[16:06] *** kurahaupo joined
[16:06] <japhb__> Yeah, Reveal does help a lot.  Still not the same as the big light bulb in that big blue room.

[16:10] <pmichaud> today the big blue room is pretty gray though.  and someone left the sprinklers on.

[16:13] <japhb__> .oO( Stop playing frisbee in the big blue room!  You're going to hit the sprinklers again! )

[16:13] *** dakkar left
[16:32] *** kurahaupo_ joined
[16:32] *** kurahaupo left
[16:33] *** xenoterracide joined
[16:36] *** fhelmberger joined
[16:37] *** dayangkun__ joined
[16:41] *** dayangkun_ left
[16:42] *** kurahaupo_ left
[16:42] *** kurahaupo joined
[16:43] *** [Sno] joined
[16:49] *** kurahaupo_ joined
[16:49] *** kurahaupo left
[16:53] *** hexcoder joined
[16:58] *** ajr_ left
[16:58] <hexcoder> r: " #`{ comment }"

[16:58] <camelia> rakudo e22ac2: OUTPUT«===SORRY!===␤no ICU lib loaded␤»

[16:59] <hexcoder> n: " #`{ comment }"

[16:59] <camelia> niecza v24-98-g473bd20: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤     'comment' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1502 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.com…»

[16:59] <hexcoder> std: " #`{ comment }"

[17:00] <camelia> std a0bcfb1: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤ 'comment' used at line 1␤Check failed␤FAILED 00:01 121m␤»

[17:00] *** fglock left
[17:00] <TimToady> weird

[17:02] <TimToady> doesn't do that with my local STD

[17:02] <hexcoder> its from the comments.t test file from rakudo star

[17:03] <TimToady> oh, wait, double quotes

[17:03] <jnthn> j: " #`{ comment }"

[17:03] <camelia> rakudo-jvm e22ac2: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/1S3gaMvZsa␤Undeclared routine:␤    comment used at line 1␤␤»

[17:03] *** ajr joined
[17:03] <hexcoder> but there its commented out, not even marked as todo

[17:03] <TimToady> there aren't comments inside double quotes

[17:03] <jnthn> Aye, the error is right

[17:03] <jnthn> rj gets it right, it seems

[17:03] <jnthn> No clue what rp is doing there

[17:03] *** ajr is now known as Guest44261

[17:03] <hexcoder> ok, thanks.

[17:04] <TimToady> jnthn: maybe it thinks ` is outside of ASCII :)

[17:04] <TimToady> .u  

[17:04] <yoleaux> Search for a Unicode character by codepoint, name, or raw character

[17:05] <hexcoder> this is from the comments.t file:     # TODO:     # ok eval(" #`{ comment }") fails with an error as it tries to execute     # comment() before seeing that I meant #`{ comment within this string.

[17:06] <jnthn> Bogus test, at a guess...

[17:06] <jnthn> oh...

[17:06] <jnthn> Probably OK test but wants single quotes there

[17:06] * [Coke] appreciates the shout out to his company's industrial side earlier in the day. :)

[17:06] <jnthn> Not double

[17:06] <hexcoder> i will try

[17:07] <hexcoder> ack, thats it

[17:08] *** Guest44261 left
[17:09] *** kurahaupo_ left
[17:09] *** kurahaupo joined
[17:13] <[Coke]> rp failed again today.

[17:13] <[Coke]> (daily spec run)

[17:14] <hexcoder> :r " #`\{ comment \}"

[17:14] <TimToady> you coded the hex wrong :)

[17:15] <hexcoder> oops.

[17:15] <hexcoder> r: " #`\{ comment \}"

[17:15] <camelia> rakudo e22ac2: ( no output )

[17:15] <hexcoder> better

[17:19] <grondilu> r: say #`\{ comment \} "Hello"

[17:19] <camelia> rakudo e22ac2: OUTPUT«␤»

[17:19] <grondilu> r: say #`\{ comment } "Hello"

[17:19] <camelia> rakudo e22ac2: OUTPUT«␤»

[17:19] <grondilu> r: say #`{ comment } "Hello"

[17:19] <camelia> rakudo e22ac2: OUTPUT«Hello␤»

[17:21] *** zby_home_ joined
[17:21] <hexcoder> r: say "Hello#`\{which means hello in plain english\}"

[17:21] <camelia> rakudo e22ac2: OUTPUT«Hello#`{which means hello in plain english}␤»

[17:22] <grondilu> does not work in a string litteral

[17:22] <hexcoder> hmm, that is no real comment

[17:22] <hexcoder> ok, by design?

[17:22] <grondilu> r: say "Hello{#`{which means hello in plain english}}"

[17:22] <camelia> rakudo e22ac2: OUTPUT«Hello␤»

[17:23] *** kurahaupo_ joined
[17:23] *** kurahaupo left
[17:23] <hexcoder> ah, ++

[17:23] <grondilu> also, notice that you don't need the backslashes

[17:24] <hexcoder> yep

[17:24] <grondilu> backslashes are for unspaces, which are an other story.

[17:24] <hexcoder> yes, I see

[17:36] *** pernatiy left
[17:36] <hexcoder> sometimes I get 'SORRY ... no ICU lib loaded' as the only output. Does that mean, parsing has succeeded? Is this a compile time error, or a run time error?

[17:37] <hexcoder> I know this is a unicode lib...

[17:37] <grondilu> you run rakudo star?

[17:37] <hexcoder> yes

[17:37] <grondilu> do you have libicu-dev?

[17:37] <grondilu> which OS anyway?

[17:37] <hexcoder> I have to look...

[17:38] <hexcoder> not installed seperately...

[17:38] <hexcoder> Should I install it?

[17:38] <grondilu> yes

[17:38] *** ajr_ joined
[17:38] <hexcoder> Ubuntu

[17:39] <grondilu> apt-cache search libicu

[17:39] <moritz> no ICU loaded can be both compile time and run time

[17:39] <hexcoder> thanks! ++

[17:40] <hexcoder> libicu-dev is listed by apt-cache...

[17:43] *** kurahaupo_ left
[17:43] *** kurahaupo joined
[17:53] *** spider-mario joined
[17:57] *** iSlug joined
[17:58] *** fhelmberger left
[18:00] *** daxim left
[18:01] *** rurban left
[18:03] *** rurban joined
[18:03] <rurban> there's a known issue with latest icu, https://github.com/parrot/parrot/issues/1014

[18:05] <jdv79_> jnthn++ # blog post

[18:14] *** dansamo left
[18:17] *** kurahaupo left
[18:19] *** darutoko left
[18:23] *** xinming left
[18:24] *** xinming joined
[18:32] <nwc10> "Ruby is a dying language." says http://rubini.us/2013/10/15/introducing-rubinius-x/

[18:32] <nwc10> This is news to me.

[18:32] <diakopter> I suspected it..

[18:33] <diakopter> only 1,645 jobs with Ruby in the title on indeed.com ...

[18:34] <diakopter> 13,570 for Java

[18:34] <diakopter> 340 for Perl

[18:35] <diakopter> 454 for VB.NET

[18:35] <diakopter> 3,585 for C#

[18:35] <diakopter> 1,191 for Python

[18:36] <diakopter> 4,271 for PHP

[18:36] <diakopter> 3,129 for C++

[18:37] <diakopter> 2,189 for JavaScript or JS

[18:39] <diakopter> 2,743 for HTML or CSS

[18:39] <diakopter> 335 for JQuery

[18:40] *** SamuraiJack_ left
[18:41] *** fhelmberger joined
[18:45] <diakopter> 2,496 for iOS; 2,415 for Android

[18:48] *** spider-mario left
[18:50] <diakopter> 2 for lisp

[18:51] *** spider-mario joined
[18:55] <[Coke]> GAH.

[18:56] <diakopter> 24 for MUMPS

[18:56] *** iSlug left
[18:57] <[Coke]> Please gist those.

[18:57] <[Coke]> (if you still want to collect them. I'm done. ;)

[18:58] <diakopter> ok. from the rubinius x post: "In general, anything inspired by Perl should be removed.."

[19:00] *** fhelmberger left
[19:02] <diakopter> stevan_: you're a TRAIL

[19:03] <stevan_> "a" or "on"

[19:03] <nwc10> I am not familiar with Ruby, but I've been told someone who is, whose judgement I trust on this, that a problem with Ruby is that it takes many of the magic global variables from Perl, but *has no local* to enable code to safely protect itself from global modifications of them.

[19:04] <stevan_> nwc10: it also has no strict mode

[19:04] <nwc10> likewise, the new refinements feature (or "feature") seems to have way to much global

[19:04] <nwc10> lexical is tractable to read. Global is not.

[19:05] <stevan_> and object attributes magically appear when you first use them, instead of making you declare them, ... which i really dont like

[19:05] <diakopter> stevan_: my absurd joke pointing out your typo isn't cute anymore when you pretend it's spelled correctly

[19:05] <timotimo> rubinius x is basically Ruby6, right?

[19:05] <lue> hello, world! o/

[19:05] <nwc10> stevan_: is there a fundamental reason for not having strict? (I believe I understand the reason why it's a "feature" of Python that Python can't have strict)

[19:06] <nwc10> timotimo: I'm not sure. I'm not sure what to make of it

[19:06] <stevan_> nwc10: no idea

[19:06] <stevan_> diakopter: I am just quoting the Changes file, which also has the typo

[19:06] <stevan_> as was said in #p5mop "wouldn't be a stevan release without one"

[19:06] <diakopter> AOH

[19:12] <diakopter> stevan_: hey what irc network is that; some tor one?

[19:21] <timotimo> ruby is a bit late to the party of "purging perl"

[19:22] <tadzik> maybe it's because it's dying, so they're trying to come up with something cool

[19:22] <timotimo> ah

[19:22] <tadzik> like mimicking python :P

[19:23] <timotimo> python is dying?

[19:23] <tadzik> no, python is hosting the purging perl party

[19:23] <timotimo> ah

[19:25] <stevan_> diakopter: irc.perl.org

[19:25] <jnthn> It's curious $$ and $1 are mentioned. $$ is quite clearly mis-hufmanized... $1 probably ain't, unless you are discouraging regex use heavily :)

[19:25] <diakopter> stevan_: erm #p5mop ??

[19:25] <stevan_> diakopter: yes

[19:25] <stevan_> oh, #p5-mop, sorry

[19:25] <diakopter> *cry*

[19:28] <diakopter> stevan_: so, uh, how does one install this

[19:28] <diakopter> <- kindof stupid

[19:28] <stevan_> cpanm --dev mop

[19:28] <stevan_> you know, I should tweet that

[19:28] *** araujo left
[19:28] <diakopter> <- now slightly less stupid

[19:29] *** araujo joined
[19:30] <diakopter> erm, it's ppm installing MinGW64

[19:30] <stevan_> uhm

[19:30] <stevan_> that might be an issue

[19:30] <stevan_> ask rafl in #p5-mop about windows support on twigils

[19:30] <diakopter> C:\Perl64\bin\perl.exe -x C:\Perl64\bin/ppm.bat install MinGW64

[19:31] <diakopter> is what cpanm launched

[19:31] <stevan_> no idea, I don't use windows

[19:32] *** hexcoder left
[19:34] *** SamuraiJack_ joined
[19:34] <pmichaud> good afternoon, #perl6

[19:34] <jnthn> o/ pmichaud 

[19:34] <moritz> \o

[19:36] <Util> o/

[19:37] <Util> (and, #ps now)

[19:37] * pmichaud does /join #parrotsketch 

[19:37] <pmichaud> oh! and I can even report that I did something!

[19:37] *** denis_boyun left
[19:38] <jnthn> pmichaud++

[19:38] * lue wonders what purpose pmichaud had for announcing his joining of a channel...

[19:42] *** SamuraiJack_ left
[19:43] *** prevost joined
[19:44] *** prevost left
[19:59] <Util> lue: I had just said "#ps now", which meant that the weekly meeting in #parrotsketch had started, so he was replying to me, in a way.

[20:00] <lue> Util: oh, okay.

[20:02] *** pernatiy joined
[20:02] * Ulti wonders if a lot of rosetta code stuff should be available via modules.perl6.org

[20:04] *** denis_boyun joined
[20:05] <Ulti> I guess most of the more useful tasks like Runge-Kutta are already modules

[20:05] <Util> Ulti: My Math::Quaternion module came from my Quaternion rosettacode post, by request (of Colomon, I think).

[20:07] <Util> Ulti: If you made a list of RC tasks whose Perl 6 solutions should be modules, it would start the conversation about who wants to tackle which piece.

[20:07] <colomon> Util++

[20:09] <timotimo> sounds like wikipedia article list of lists of lists

[20:10] <timotimo> http://en.wikipedia.org/wiki/List_of_lists_of_lists

[20:11] *** denis_boyun_ joined
[20:12] *** denis_boyun left
[20:13] <Ulti> Util sounds like a plan

[20:13] <Util> Ulti++

[20:13] <timotimo> wow, nickcolor.pl doesn't see a reason to give ulti and util different colors

[20:13] *** bluescreen10 joined
[20:13] <Ulti> http://rosettacode.org/wiki/LZW_compression#Perl_6  for example could be good if it was bufs instead of strings

[20:14] <jnthn> Yes, I was just like, "why is that guy talking to himself" :P

[20:14] <Ulti> :]

[20:14] <timotimo> that would also make the code on rosettacode automatically tested (by proxy)

[20:14] <timotimo> even better would be rosettacode download support for panda :P

[20:15] <Ulti> thats doable

[20:15] <Ulti> just magic a module that exports all the subs

[20:16] <Util> Ulti and timotimo: Be advised that Ingy has made inroads towards some of that. Full download and extract of all RC code for all tasks for all languages.

[20:16] <Util> https://github.com/acmeism/RosettaCodeData

[20:16] <Ulti> not sure all of the rosetta examples stand alone or only have code in the code blocks though

[20:16] <timotimo> except the code in rosettacode isn't fit to be re.... yes

[20:16] <Ulti> Util: cool

[20:16] *** denis_boyun_ left
[20:16] <Ulti> I'll watch that repo

[20:18] <Ulti> Util: have you seen the language colour bar on that repo! :D

[20:19] <lue> timotimo: same for me with Ulti/Util coloring :/

[20:19] <timotimo> it doesn't fit and i can't scroll it :(

[20:19] <Util> Ulti: I had not noticed. *Pretty*   Thanks!

[20:26] *** ajr_ left
[20:29] <Ulti> wow ok so Ingy has solved the extracting part o__O

[20:44] *** kaare_ left
[20:49] *** benabik left
[20:49] *** zby_home_ left
[20:50] *** benabik joined
[20:53] <Util> Ulti and timotimo: See Ingy talk about it here: 

[20:53] <Util> http://www.youtube.com/watch?v=WwtyQh4IfbA&feature=c4-overview-vl&list=PLA9_Hq3zhoFy0zej1j4QZtz5awFKXunZX

[20:53] <Util> (YAPC::NA::2013 Lightning Talks Day 2)

[20:53] <Util> RC is discussed from 50:25 to 51:10, but you should really watch from 45:45 - 51:10 for maximum hilarity.

[20:55] <Ulti> thanks a lot, watching now :)

[20:58] *** bluescreen100 joined
[20:58] *** spider-mario left
[21:01] *** bluescreen10 left
[21:09] *** skids left
[21:35] *** lowpro30 left
[21:39] *** hexcoder joined
[21:43] *** DarthGandalf left
[21:45] *** PacoAir left
[21:45] *** DarthGandalf joined
[22:06] *** benabik left
[22:09] *** benabik joined
[22:10] *** bluescreen100 left
[22:17] <dalek> nqp: 8ca5f43 | dwarring++ | examples/rubyish/ (4 files):

[22:17] <dalek> nqp: added rubyish fractal tree example

[22:17] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8ca5f437e9

[22:32] *** colomon left
[22:33] *** benabik left
[22:34] *** colomon joined
[22:48] *** Mouq joined
[22:49] *** dmol left
[23:23] *** hexcoder left
[23:24] <dalek> perl6-roast-data: 147d4cf | coke++ | / (2 files):

[23:24] <dalek> perl6-roast-data: today (automated commit)

[23:24] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/147d4cfd96

[23:26] *** fgomez joined
[23:41] <[Coke]> nqp: say(nqp::concat("hi","hi")); say (nqp::concat_s("hi","hi"));

[23:41] <camelia> nqp: OUTPUT«Confused at line 2, near "say (nqp::"␤current instr.: 'panic' pc 14748 (src/stage2/gen/NQPHLL.pir:5229) (src/stage2/gen/NQPHLL.nqp:279)␤»

[23:41] <[Coke]> nqp: say(nqp::concat("hi","hi")); say(nqp::concat_s("hi","hi"));

[23:41] <camelia> nqp: OUTPUT«hihi␤hihi␤»

[23:41] <[Coke]> ... why do we have 2 concat opcodes in nqp-p?

[23:42] <diakopter> one used to modify the original input register I think, on parrot

[23:43] <[Coke]> not now, though.

[23:43] <diakopter> maybe stil does

[23:43] <[Coke]> they're both registered the same way, now.

[23:43] <[Coke]> QAST::Operations.add_core_pirop_mapping('concat', 'concat', 'Sss', :inlinable(1));

[23:43] <diakopter> ok; probably the _s is a fossil then

[23:43] <[Coke]> QAST::Operations.add_core_pirop_mapping('concat_s', 'concat', 'Sss', :inlinable(1));

[23:44] *** fgomez left
[23:45] <diakopter> [Coke]: if I had to guess, I'd guess that they needed the _s around for bootstrap purposes

[23:45] <diakopter> for a while, or something.

[23:46] <[Coke]> likely.

[23:46] <[Coke]> https://github.com/perl6/nqp/issues/138

[23:49] *** BenGoldberg joined
[23:50] <[Coke]> looks like it doesn't appear anywhere in rakudo/nqp

[23:53] *** xenoterracide left
[23:57] <[Coke]> why does moar have "iscoderef" in addition to "isinvokable" ?

