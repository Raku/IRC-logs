[00:00] <timotimo> i think the spectests are clean so far and will stay clean until the end

[00:01] *** rurban1 joined
[00:02] <japhb> r: my $r = 1.969; $r.fmt("%.{$_}f").say for 0..3

[00:02] <camelia> rakudo-jvm 7142b7: OUTPUT«1.␤1.␤1.␤1.␤»

[00:02] <camelia> ..rakudo-parrot 7142b7: OUTPUT«1.␤1.0␤1.97␤1.969␤»

[00:03] <colomon> :(\

[00:03] <japhb> Three bugs there, I think.

[00:03] <colomon> three?

[00:03] <colomon> oh

[00:03] <colomon> yow

[00:04] * colomon hopes they are not his fault

[00:04] <colomon> \

[00:04] <japhb> rakudo-jvm always wrong, r-p wrong for .1f, and failure to drop trailing . when no remaining after-. digits

[00:05] <japhb> Free karma to the person who turns that into spec tests, double if they actually fix at least the r-p .1f bug, triple if they fix all of them.  I'm feeling expansive tonight.  ;-)

[00:05] <colomon> shouldn't first one be 2?

[00:05] <japhb> Yeah, that's four bugs.

[00:05] <japhb> Sheesh.

[00:06] <colomon> basically, it's just complete fail

[00:06] <japhb> Sadly, yes, I think so.

[00:06] <japhb> :-(

[00:06] <colomon> does sprintf fo the same thing

[00:07] <japhb> Hadn't tried it.  Just had golfed a fail in a larger problem down to that.

[00:07] <japhb> s/problem/program/;  Well, I guess that depends on how you look at it.

[00:07] <colomon> oh

[00:07] <colomon> Niecza's results:

[00:07] <colomon> 1.969000

[00:07] <colomon> 2.0

[00:07] <colomon> 1.97

[00:07] <colomon> 1.969

[00:07] *** pjcj left
[00:07] <japhb> Interesting.  And much better.

[00:08] <colomon> not sure if that's a niecza bug on the first or not.

[00:08] <japhb> Though that first one is indeed odd, at least it's not complete fail.

[00:08] <japhb> I would think .0 should mean no decimals just like in sprintf, though.

[00:09] <japhb> r: my $r = 1.969; $r.sprintf("%.{$_}f").say for 0..3

[00:09] <camelia> rakudo-parrot 7142b7: OUTPUT«Too few directives: found 0, fewer than the 1 arguments after the format string␤  in any TOP at gen/parrot/stage2/NQPHLL.nqp:2102␤  in any !reduce at gen/parrot/stage2/QRegex.nqp:724␤  in any !cursor_pass at gen/parrot/stage2/QRegex.nqp:686␤  in …»

[00:09] <camelia> ..rakudo-jvm 7142b7: OUTPUT«Too few directives: found 0, fewer than the 1 arguments after the format string␤  in any TOP at gen/jvm/stage2/NQPHLL.nqp:2056␤  in any !reduce at gen/jvm/stage2/QRegex.nqp:724␤  in any !cursor_pass at gen/jvm/stage2/QRegex.nqp:686␤  in any parse at…»

[00:09] <japhb> r: my $r = 1.969; sprintf("%.{$_}f", $r).say for 0..3

[00:10] <camelia> rakudo-jvm 7142b7: OUTPUT«1.␤1.␤1.␤1.␤»

[00:10] <camelia> ..rakudo-parrot 7142b7: OUTPUT«1.␤1.0␤1.97␤1.969␤»

[00:10] <japhb> That was a way LTA error message, BTW.

[00:10] <japhb> I pretty much solved it with a WAG.

[00:10] <japhb> Looks like rakudo does the same thing with .fmt and with &sprintf

[00:10] <colomon> probably .fmt just calls sprintf

[00:12] <colomon> okay, I'm going to add sprintf tests

[00:13] <japhb_> Thank you, colomon++!

[00:13] <colomon> you're not out of this yet, you need to help me figure out what the correct answers are.

[00:17] <japhb_> Without any irony, "whatever perl5 says".

[00:17] <japhb_> Going AFK for a bit

[00:18] <lue> r: my $a = 4; say 32.fmt("%0{$a}X")

[00:19] <camelia> rakudo-jvm 7142b7: OUTPUT«use of uninitialized value of type Any in string context␤Too few directives: found 0, fewer than the 1 arguments after the format string␤  in any TOP at gen/jvm/stage2/NQPHLL.nqp:2056␤  in any !reduce at gen/jvm/stage2/QRegex.nqp:724␤  in any !curso…»

[00:19] <camelia> ..rakudo-parrot 7142b7: OUTPUT«use of uninitialized value of type Any in string context  in block  at /tmp/fHut4SfDu3:1␤␤Too few directives: found 0, fewer than the 1 arguments after the format string␤  in any TOP at gen/parrot/stage2/NQPHLL.nqp:2102␤  in any !reduce at gen/pa…»

[00:19] <lue> fmt has a general problem with interpolation.

[00:19] *** BenGoldberg left
[00:23] <dalek> roast: 49d91df | (Solomon Foster)++ | S32-str/sprintf.t:

[00:23] <dalek> roast: sprintf tests on rounding numbers like 1.969.

[00:23] <dalek> roast: 

[00:23] <dalek> roast: Tests issues found by japhb.

[00:23] <dalek> roast: review: https://github.com/perl6/roast/commit/49d91dfd22

[00:23] *** BenGoldberg joined
[00:24] <colomon> afk # time to make up a bedtime story for the 5yo

[00:33] <dalek> roast: af65b62 | (Geoffrey Broadwell)++ | S32-str/sprintf.t:

[00:33] <dalek> roast: Fix description copy pasta in new sprintf tests

[00:33] <dalek> roast: review: https://github.com/perl6/roast/commit/af65b62c52

[00:34] *** pjcj joined
[00:37] <BenGoldberg> Copy pasta?

[00:40] <BenGoldberg> Is that served with copy pesto?

[00:42] * BenGoldberg clearly needs to eat, as his noodle is generating too many thoughts of food.

[00:42] <geekosaur> usually spaghetti code :p

[00:43] <geekosaur> ^part of

[00:46] *** gfldex left
[00:51] *** jeff_s1 left
[00:52] *** jeff_s1 joined
[00:59] *** gfldex joined
[01:03] *** btyler joined
[01:05] <timotimo> okay so i've run the spectests, but for jvm i got only "no subtests run" after a bunch of tests

[01:05] <preflex>  timotimo: you have 1 new message. '/msg preflex messages' to read it.

[01:10] <dalek> rakudo/chained_whatevercode: dfeff62 | (Timo Paulssen)++ | src/Perl6/Actions.nqp:

[01:10] <dalek> rakudo/chained_whatevercode: fix whatever currying for chain ops

[01:10] <dalek> rakudo/chained_whatevercode: 

[01:10] <dalek> rakudo/chained_whatevercode: When a WhateverCode gets created from a chain op, it'll be annotated

[01:10] <dalek> rakudo/chained_whatevercode: with its original arguments and when a WhateverCode with a chain op ends

[01:10] <dalek> rakudo/chained_whatevercode: up calling a WhateverCode that also had a chain in it, it will "flatten

[01:10] <dalek> rakudo/chained_whatevercode: out" the arguments of that WhateverCode, creating a proper chain.

[01:10] <dalek> rakudo/chained_whatevercode: review: https://github.com/rakudo/rakudo/commit/dfeff624a4

[01:10] <timotimo> i would appreciate spectesting this and other testings

[01:13] *** hummeleB1 joined
[01:14] *** thou left
[01:18] <colomon> mmmm, pesto

[01:22] <dalek> p6-pb: 13a19c0 | (Geoffrey Broadwell)++ | lib/PB/Binary/Reader.pm:

[01:22] <dalek> p6-pb: Continue work on PB::Binary::Reader

[01:22] <dalek> p6-pb: 

[01:22] <dalek> p6-pb: Getting closer, but still a bit more to go before it's testable.

[01:22] <dalek> p6-pb: review: https://github.com/samuraisam/p6-pb/commit/13a19c0799

[01:23] <colomon> peanut butter binary reader?

[01:26] *** btyler left
[01:26] <lue> colomon: I keep thinking PowerBook when I see PB in allcaps, for some reason.

[01:53] *** tgt left
[01:54] <timotimo> r: say sub { 5 }()

[01:54] <camelia> rakudo-parrot 455fbc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/W1bbYGrU9C␤Two terms in a row␤at /tmp/W1bbYGrU9C:1␤------> [32msay sub { 5 }[33m⏏[31m()[0m␤    expecting any of:␤        postfix␤        statement end␤        statement modifie…»

[01:54] <camelia> ..rakudo-jvm 455fbc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/KhRVNfW1kz␤Two terms in a row␤at /tmp/KhRVNfW1kz:1␤------> [32msay sub { 5 }[33m⏏[31m()[0m␤    expecting any of:␤        postfix␤        statement end␤        statement modifier…»

[01:55] <timotimo> r: .say for < $< $> >

[01:55] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«$<$>␤»

[01:55] <timotimo> i'm not exactly sure how that's supposed to work anyway o_O

[01:57] <BenGoldberg> r: .say < $foo >

[01:57] <TimToady> it's counting brackets, but I don't know why it's not splitting into two words

[01:57] <camelia> rakudo-parrot 455fbc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/ikwHnG_wtt␤Variable '$foo' is not declared␤at /tmp/ikwHnG_wtt:1␤------> [32m.say < $foo[33m⏏[31m >[0m␤    expecting any of:␤        postfix␤»

[01:57] <camelia> ..rakudo-jvm 455fbc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/O4mw2Goi7G␤Variable '$foo' is not declared␤at /tmp/O4mw2Goi7G:1␤------> [32m.say < $foo[33m⏏[31m >[0m␤    expecting any of:␤        postfix␤»

[01:57] <BenGoldberg> r: .say < $< >

[01:57] <camelia> rakudo-parrot 455fbc: OUTPUT«Nil␤use of uninitialized value of type Nil in numeric context  in block  at /tmp/duhm53AajH:1␤␤»

[01:57] <camelia> ..rakudo-jvm 455fbc: OUTPUT«Nil␤use of uninitialized value of type Nil in numeric context␤»

[01:57] <BenGoldberg> r: .say < $> >

[01:57] <camelia> rakudo-jvm 455fbc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/rTAD3C9adx␤Unsupported use of $> variable; in Perl 6 please use $*EUID␤at /tmp/rTAD3C9adx:1␤------> [32m.say < $>[33m⏏[31m >[0m␤»

[01:57] <camelia> ..rakudo-parrot 455fbc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/_fhYVsyPGL␤Unsupported use of $> variable; in Perl 6 please use $*EUID␤at /tmp/_fhYVsyPGL:1␤------> [32m.say < $>[33m⏏[31m >[0m␤»

[01:58] <TimToady> .say doesn't take arguments

[01:58] <BenGoldberg> r: say < $< >

[01:58] <camelia> rakudo-jvm 455fbc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Z8_xiMDE1l␤Unable to parse expression in quote words; couldn't find final '>'␤        ␤at /tmp/Z8_xiMDE1l:1␤------> [32msay < $< >[33m⏏[31m<EOL>[0m␤    expecting any of:␤        arg…»

[01:58] <camelia> ..rakudo-parrot 455fbc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/rE9vxqS7ZM␤Unable to parse expression in quote words; couldn't find final '>'␤        ␤at /tmp/rE9vxqS7ZM:1␤------> [32msay < $< >[33m⏏[31m<EOL>[0m␤    expecting any of:␤        …»

[01:58] <TimToady> r: say < $< $> >.elems

[01:58] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«1␤»

[01:59] <TimToady> r: say < < > >.elems

[01:59] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«1␤»

[01:59] <TimToady> r: say < < > >.[0]

[01:59] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«<>␤»

[01:59] <TimToady> r: say < < > >.[0].SHAT

[01:59] <camelia> rakudo-jvm 455fbc: OUTPUT«No such method 'SHAT' for invocant of type 'Str'␤  in block  at /tmp/5b9FMqrvzb:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1086␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1292␤  in any command_eval at gen/jvm/stage2/NQPHLL.nqp:1196␤  in any…»

[01:59] <camelia> ..rakudo-parrot 455fbc: OUTPUT«No such method 'SHAT' for invocant of type 'Str'␤  in block  at /tmp/yVxpzCfuJC:1␤  in any  at /tmp/yVxpzCfuJC:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.nqp:1133␤  in any evalfiles at gen/parrot/…»

[01:59] <TimToady> r: say < < > >.[0].WHAT

[01:59] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«(Str)␤»

[02:00] <TimToady> I don't see any rational for turning < < > > into '<>'

[02:00] <timotimo> r: my $foo = set <a b c d>; $foo (|)= (set <b c d e>); say $foo;

[02:00] <camelia> rakudo-jvm 455fbc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/LqJHQYijeq␤Two terms in a row␤at /tmp/LqJHQYijeq:1␤------> [32mmy $foo = set <a b c d>; $foo [33m⏏[31m(|)= (set <b c d e>); say $foo;[0m␤    expecting any of:␤        postfix␤      …»

[02:01] <camelia> ..rakudo-parrot 455fbc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/ByhJwEmQii␤Two terms in a row␤at /tmp/ByhJwEmQii:1␤------> [32mmy $foo = set <a b c d>; $foo [33m⏏[31m(|)= (set <b c d e>); say $foo;[0m␤    expecting any of:␤        postfix␤   …»

[02:01] <timotimo> weird.

[02:01] *** sunnavy left
[02:02] *** thou joined
[02:06] <colomon> timotimo: works in Niecza.  ;)

[02:11] <TimToady> r: my $foo = set <a b c d>; $foo ∪= set <b c d e>; say $foo

[02:11] <camelia> rakudo-jvm 455fbc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/vPyKQfqLHP␤Two terms in a row␤at /tmp/vPyKQfqLHP:1␤------> [32mmy $foo = set <a b c d>; $foo [33m⏏[31m∪= set <b c d e>; say $foo[0m␤    expecting any of:␤        postfix␤        i…»

[02:11] <camelia> ..rakudo-parrot 455fbc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/o6D4gdD4BV␤Two terms in a row␤at /tmp/o6D4gdD4BV:1␤------> [32mmy $foo = set <a b c d>; $foo [33m⏏[31m∪= set <b c d e>; say $foo[0m␤    expecting any of:␤        postfix␤      …»

[02:14] <TimToady> that should be working

[02:14] <TimToady> ./src/core/set_operators.pm:	only sub infix:<<"\x222A">>(|p) {

[02:14] <dalek> nqp: 529c7b3 | (Solomon Foster)++ | t/hll/06-sprintf.t:

[02:14] <dalek> nqp: More tests based on bug found by japhb.

[02:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/529c7b3631

[02:15] <colomon> r: my $foo = set <a b c d>; $foo = $foo ∪ set <b c d e>; say $foo

[02:15] <camelia> rakudo-jvm 455fbc: OUTPUT«set(b, a, d, c, e)␤»

[02:15] <camelia> ..rakudo-parrot 455fbc: OUTPUT«set(a, b, c, d, e)␤»

[02:15] <TimToady> interesting

[02:15] <colomon> TimToady: it's just using op= that breaks it

[02:16] <TimToady> why should op= care whether op is unicode?

[02:16] <colomon> it doesn't, (|)= doesn't work either

[02:16] <TimToady> (well, it's all unicode, but non-ascii)

[02:16] <TimToady> is rakudo not implement op= as a meta-operator?

[02:16] <TimToady> *menting

[02:17] <TimToady> or is this more "not quite" damage?

[02:17] <colomon> TimToady: it should be, I think it's just wigging out on this

[02:17] <timotimo> Result: PASS

[02:17] <timotimo> t/spec/S02-types/whatever.rakudo.parrot                       (Wstat: 0 Tests: 83 Failed: 0) TODO passed:   79-80

[02:18] <timotimo> so i just need someone to spectest chained_whatevercode on jvm. lizmat perhaps?

[02:18] <colomon> r: sub infix:<XMAS>($a, $b) { $a * $b; }; my $r = 10; $r XMAS= 5; say $r;

[02:18] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«50␤»

[02:18] <colomon> TimToady: wonder if the problem has something to do with it being a list op?

[02:19] <timotimo> bedtimes!

[02:19] <TimToady> r: sub infix:<💩>($a,$b) { $a * $b }; my $r = 10; $r 💩= 5; say $r

[02:19] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«50␤»

[02:19] <colomon> what the heck is that?

[02:19] <colomon> .u 💩

[02:21] <colomon> 128169, eh?

[02:21] <colomon> oh

[02:21] <colomon> My font is not showing that very clearly.

[02:22] <colomon> http://www.fileformat.info/info/unicode/char/1F4A9/index.htm

[02:22] <TimToady> just as well :)

[02:26] <TimToady> r: my @a = <a b c>; @a Z~= 1,2,3; say @a

[02:26] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«a b c␤»

[02:26] <TimToady> r: my @a = <a b c>; @a [Z~]= 1,2,3; say @a

[02:26] <camelia> rakudo-jvm 455fbc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/WaQAHFKoEq␤Preceding context expects a term, but found infix = instead␤at /tmp/WaQAHFKoEq:1␤------> [32mmy @a = <a b c>; @a [Z~]=[33m⏏[31m 1,2,3; say @a[0m␤»

[02:26] <camelia> ..rakudo-parrot 455fbc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/of9Ftw8Pnn␤Preceding context expects a term, but found infix = instead␤at /tmp/of9Ftw8Pnn:1␤------> [32mmy @a = <a b c>; @a [Z~]=[33m⏏[31m 1,2,3; say @a[0m␤»

[02:26] <TimToady> r: my @a = <a b c>; @a Z= 1,2,3; say @a

[02:26] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«a b c␤»

[02:26] <TimToady> r: my @a = <a b c>; @a Z[~=] 1,2,3; say @a

[02:26] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«a b c␤»

[02:44] *** _ilbot left
[02:46] *** _ilbot joined
[02:48] *** gfldex left
[02:50] *** gfldex joined
[03:13] *** gfldex left
[03:15] *** gfldex joined
[03:18] *** fridim_ joined
[03:19] *** fridim_ left
[03:34] *** araujo left
[03:34] *** xinming_ joined
[03:36] *** fridim_ joined
[03:37] *** xinming left
[03:39] *** hummeleB1 left
[03:43] * lue wonders if he should push S15 tests to a branch initially, since he's only got rakudo on-hand to fudge things from the start.

[03:44] <colomon> warning to nqp folks, I added tests that fail in the NQP sprintf tests.  I'd hoped to have them fixed tonight, but I'm giving up and going to bed.

[03:47] <lue> niecza: say "hello! o/"

[03:47] <camelia> niecza v24-108-g17d73e4: OUTPUT«(timeout)[auto-compiling setting]␤»

[03:47] <lue> ♞ colomon o/

[04:02] *** xinming joined
[04:04] *** xinming_ left
[04:07] *** preflex_ joined
[04:07] *** ChanServ sets mode: +v preflex_

[04:07] *** preflex left
[04:08] *** preflex_ is now known as preflex

[04:12] *** lumimies left
[04:13] *** lumimies joined
[04:14] *** ivanshmakov left
[04:14] *** geekosaur left
[04:14] *** ivanshma` joined
[04:17] *** flussence joined
[04:19] *** atrodo joined
[04:19] <dalek> roast: 361d850 | lue++ | S15-strings/ (3 files):

[04:19] <dalek> roast: Add the first S15 tests.

[04:19] <dalek> roast: 

[04:19] <dalek> roast: Not nearly enough, but hopefully serves as a start for others to chip

[04:19] <dalek> roast: in. At the very least, I expect those more versed in test writing to fix

[04:19] <dalek> roast: my blunders :) .

[04:19] <dalek> roast: review: https://github.com/perl6/roast/commit/361d850337

[04:19] *** geekosaur joined
[04:20] <lue> I have to say, what I wrote wasn't at all impressive, but I already felt the power of Moar Unicode in Perl 6 :)

[04:21] <TimToady> :)

[04:23] <lue> TimToady: would it make sense for chr and chrs to return Uni objects, seeing as there's no telling what NF the numbers are in? Or would auto-conversion to NFG actually be appreciated?

[04:26] <lue> (my thinking is that people with a specific list of codepoints would like to preserve that, even after conversion to a string-like object.)

[04:27] <japhb> lue: FWIW, that thinking makes sense to me

[04:29] <lue> It has a bonus of discouraging people from trying to feed a Str-making function negative numbers, because it won't be generating a Str in the first place.

[04:35] *** atroxaper joined
[04:35] * TimToady can't see anything wrong with doing it that way offhand

[04:38] <dalek> specs: db99244 | lue++ | S15-unicode.pod:

[04:38] <dalek> specs: [S15] Change .chr(s) to return Uni, not Str.

[04:38] <dalek> specs: 

[04:38] <dalek> specs: This is because Uni is the only string type that won't convert strings

[04:38] <dalek> specs: given to it, which for people who are playing with numeric arrays of

[04:38] <dalek> specs: codepoints is probably important.

[04:38] <dalek> specs: review: https://github.com/perl6/specs/commit/db9924434c

[04:43] * lue gets the sense that he'll find himself reading the Unicode standard, the whole thing, in the near future :) .

[04:46] <lue> I also wouldn't be surprised if, in the next couple of months, I finally send in the CLA and end up doing most of the implementation work on S15 :) .

[04:48] <japhb> The whole Unicode standard?  That's ... a lot.

[04:51] <lue> japhb: I didn't say I'd read it *quickly* :) .

[04:51] *** xenoterracide left
[04:51] <japhb> lue: Well, you have to read it faster than they produce more of it, or you'll never get done.  :-)

[04:53] <lue> japhb: The Standard is good about not making drastic or previous-knowledge-deprecating changes most of the time. So at least that.

[04:54] <lue> .oO(Unicode 6.3 is technically a just a list of changes since 6.2, since IIRC they didn't bother reprinting the whole deal for 6.3 . Next version will be 7.0 judging by the available UCD files.)

[05:10] <BenGoldberg> r: sub infix:<OTFLOL> ($a, $b) { $a, $b }; say [OTFLOL] 1..4; say [ROTFLOL] 1..4;

[05:10] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«1 2 3 4␤4 3 2 1␤»

[05:14] <BenGoldberg> r: sub infix:<OTFLOL> ($a, $b) { $a, $b }; .say for [ROTFLOL] 1..4;

[05:14] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«4␤3 2 1␤»

[05:14] * BenGoldberg is confused.

[05:14] <BenGoldberg> What is the 4 seperate from 3 2 1?

[05:17] *** xenoterracide joined
[05:24] *** Pleiades` left
[05:29] *** Pleiades` joined
[05:32] *** jeff_s1 left
[05:33] *** xenoterracide left
[05:33] *** jeff_s1 joined
[05:37] *** xinming_ joined
[05:39] *** xinming left
[05:43] *** xinming joined
[05:43] *** xinming_ left
[06:37] *** BenGoldberg left
[06:40] *** atroxaper left
[06:41] *** atroxaper joined
[06:46] *** darutoko joined
[06:48] <lue> .oO(Fun Fact: despite what you might initially believe, mu/util/podhtm.pl only generates one HTML file in the synopses conversion process.)

[06:58] *** kaare__ joined
[06:59] *** Tene left
[06:59] *** djanatyn left
[07:00] *** djanatyn joined
[07:00] *** Tene joined
[07:07] <lue> moritz: for the synopses, would you prefer that the new HTML generation toolchain be outside of mu much as possible? If so, I assume using panda to obtain the stuff is preferred?

[07:07] <lue> ♘ all o/

[07:09] *** rurban1 left
[07:14] *** atroxaper left
[07:15] *** atroxaper joined
[07:21] <moritz> lue: I don't care much where the stuff is

[07:23] <moritz> lue: though come to think of it, I'd prefer a repo in the perl6 organization

[07:24] <moritz> though I can fork repos into that org if necessary

[07:26] *** atroxaper left
[07:27] *** atroxaper joined
[07:29] *** SamuraiJack_ joined
[07:31] *** araujo joined
[07:33] *** araujo left
[07:33] <TimToady> r: sub infix:<OTFLOL> (\a, \b) { a, b }; .perl.say for [ROTFLOL] 1..4;

[07:33] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«4␤3␤2␤1␤»

[07:33] *** araujo joined
[07:33] *** araujo left
[07:33] *** araujo joined
[07:34] *** slavik left
[07:36] <TimToady> r: sub infix:<OTFLOL> (*@a) { @a }; .say for [ROTFLOL] 1..4;

[07:36] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«4␤3␤2␤1␤»

[07:36] <TimToady> or that

[07:36] <TimToady> zzz &

[07:42] *** camelia left
[07:46] *** camelia joined
[07:48] *** ChanServ sets mode: +v camelia

[08:01] *** thou left
[08:02] *** camelia left
[08:03] *** raydiak_ left
[08:10] *** rurban1 joined
[08:14] *** nnunley left
[08:14] *** rurban1 left
[08:19] *** camelia joined
[08:19] *** raydiak_ joined
[08:20] *** ChanServ sets mode: +v camelia

[08:28] *** atroxaper left
[08:45] <timotimo> r: (say [X] ($(1, 2, 3) xx $_)) for 1..4;

[08:45] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«1 2 3␤1 1 1 2 1 3 2 1 2 2 2 3 3 1 3 2 3 3␤1 1 1 1 1 2 1 1 3 1 2 1 1 2 2 1 2 3 1 3 1 1 3 2 1 3 3 2 1 1 2 1 2 2 1 3 2 2 1 2 2 2 2 2 3 2 3 1 2 3 2 2 3 3 3 1 1 3 1 2 3 1 3 3 2 1 3 2 2 3 2 3 3 3 1 3 3 2 3 3 3␤1 1 1 1 1 1 1 2 1 1 1 3 1…»

[08:46] <timotimo> r: (say ([X] ($(1, 2, 3) xx $_)).perl) for 1..4;

[08:46] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«((1,), (2,), (3,)).list␤((1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)).list␤((1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 1), (1, 3, 2), (1, 3, 3), (2, 1, 1), (2, 1, 2), (2, 1, …»

[08:46] <timotimo> that's pretty darn nifty.

[08:46] <timotimo> although i think i have to force all these operators into awkward precedence :D

[08:47] <timotimo> r: say ([X] ($(1, 2, 3) xx $_)).perl for 1..4;

[08:47] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«((1,), (2,), (3,)).list␤((1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)).list␤((1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 1), (1, 3, 2), (1, 3, 3), (2, 1, 1), (2, 1, 2), (2, 1, …»

[08:47] <timotimo> r: say ([X] $(1, 2, 3) xx $_).perl for 1..4;

[08:47] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«((1,), (2,), (3,)).list␤((1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)).list␤((1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 1), (1, 3, 2), (1, 3, 3), (2, 1, 1), (2, 1, 2), (2, 1, …»

[08:47] <timotimo> actually i don't. huh, pretty cool!

[08:50] <timotimo> r: for ([X] $(1, 2) xx 4).tree -> \foo { say foo };

[08:50] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«1 1 1 1␤1 1 1 2␤1 1 2 1␤1 1 2 2␤1 2 1 1␤1 2 1 2␤1 2 2 1␤1 2 2 2␤2 1 1 1␤2 1 1 2␤2 1 2 1␤2 1 2 2␤2 2 1 1␤2 2 1 2␤2 2 2 1␤2 2 2 2␤»

[08:50] <timotimo> r: for ([X] $(1, 2) xx 4) -> \foo { say foo };

[08:50] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«1␤1␤1␤1␤1␤1␤1␤2␤1␤1␤2␤1␤1␤1␤2␤2␤1␤2␤1␤1␤1␤2␤1␤2␤1␤2␤2␤1␤1␤2␤2␤2␤2␤1␤1␤1␤2␤1␤1␤2␤2␤1␤2␤1␤2␤1␤2␤2␤2␤2␤1␤1␤2␤2␤1␤2␤2␤2␤2…»

[08:53] *** rindolf joined
[08:54] <timotimo> r: eval '{ 1 < $^a < 3 }'

[08:54] <camelia> rakudo-jvm 455fbc: OUTPUT«Not enough positional parameters passed; got 0 but expected 1␤  in block  at eval_0:1␤  in sub eval at gen/jvm/CORE.setting:684␤  in block  at /tmp/1iFwqQEbXC:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1086␤  in any evalfiles at gen/jvm/stage2/N…»

[08:54] <camelia> ..rakudo-parrot 455fbc: OUTPUT«Not enough positional parameters passed; got 0 but expected 1␤  in block  at eval_0:1␤  in any  at eval_0:1␤  in sub eval at gen/parrot/CORE.setting:692␤  in sub eval at gen/parrot/CORE.setting:683␤  in block  at /tmp/SenabOqL7H:1␤  in any  a…»

[08:55] <timotimo> r: eval '-> { 1 < $^a < 3 }'

[08:55] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling eval_0␤Placeholder variable '$^a' cannot override existing signature␤at eval_0:1␤------> [32m-> { 1 < $^a < 3 }[33m⏏[31m<EOL>[0m␤    expecting any of:␤        postfix…»

[08:55] <timotimo> ... how do i ...

[08:55] <timotimo> r: eval 'sub { 1 < $^a < 3 }'

[08:55] <camelia> rakudo-parrot 455fbc, rakudo-jvm 455fbc: ( no output )

[08:55] <timotimo> ah!

[08:55] <moritz> or simply without the ->

[08:57] <timotimo> no, see above

[08:58] <timotimo> turns out my chained_whatevercode branch still has issues

[08:58] *** kivutar joined
[08:58] <timotimo> brought to light by a "test suite" that automatically turns code like 1 < $^a < $^b < 10 into 1 < * < * <10 and such

[09:01] <timotimo> hm, now it would be super helpful if i could a) tell eval directly to dump the ast or b) have --target=ast that doesn't stop after the first ast stage

[09:01] <timotimo> i guess i can still nqp::getcomp, though

[09:10] *** rindolf left
[09:12] *** fridim_ left
[09:22] *** [Sno] left
[09:31] *** atroxaper joined
[09:45] *** bakedb left
[09:46] *** bakedb joined
[09:47] *** atroxaper left
[09:48] *** spider-mario joined
[09:48] *** spider-mario left
[09:49] *** kivutar left
[09:50] *** spider-mario joined
[09:57] * timotimo suspects something messing with a qast node that's shared, and so distributes some nqp::clone calls throughout the code ... >_<

[09:58] <diakopter> QASHARED

[09:59] <timotimo> QASH? :)

[09:59] <timotimo> is pm working on a more efficient hash implementation perchance?

[10:00] <diakopter> he's otherwise occupied for the time being still

[10:00] <diakopter> afk&

[10:03] <lizmat> good *, #perl6

[10:08] <dalek> mu: 3311b3d | (Elizabeth Mattijsen)++ | misc/perl6advent-2013/schedule:

[10:08] <dalek> mu: 20: Defaulting to Nililism & other variable traits

[10:08] <dalek> mu: review: https://github.com/perl6/mu/commit/3311b3dfb0

[10:09] <lizmat> need to go out just about now: if I get back tonight and there is still no advent blog post, I'll move mine up to today

[10:12] *** bloonix joined
[10:20] <jnthn> Morning-ish, #perl6

[10:20] <preflex>  jnthn: you have 1 new message. '/msg preflex messages' to read it.

[10:20] <jnthn> japhb: Looks so...will update it...

[10:21] <jnthn> lizmat: It's my turn today. I'll be working on it shortly. :)

[10:22] * jnthn maybe should sign up for the day *after* the one he'll have time to write posts, just to prevent panic. ;)

[10:23] <timotimo> if it's acceptable to deliver the blog post for a day *on* the day of the post, i won't have to ask for mine to be moved a day back! :)

[10:24] <timotimo> bleeeeh, where is that "Unknown QAST node type NQPMu" coming from >:(

[10:25] <timotimo> something where $thing.HOW.name($thing) returns NQPMu, but ... what?!

[10:25] * timotimo hopes for a better error message on jvm

[10:26] <FROGGS> hi jnthn 

[10:26] <jnthn> timotimo: Well, I suspect the answer may be to make NQP's error detection more robust...dunno how hard that'll be. :)

[10:26] <jnthn> o/ FROGGS 

[10:28] *** Piers_ left
[10:28] <timotimo> No such method 'jast' for invocant of type 'NQPMu'   d'ohpe

[10:30] <jnthn> Does looking at the --target=ast output not show something up

[10:30] <jnthn> ?

[10:33] *** gfldex left
[10:36] <timotimo> no :(

[10:36] <timotimo> let me paste you a bit

[10:37] <FROGGS> someone wanna port a core module? :o) https://github.com/rakudo-p5/v5/blob/master/TODO_core_modules.md

[10:37] <timotimo> https://gist.github.com/timo/fac77c791de77a5dab79

[10:38] <timotimo> port? are these written in C?

[10:39] <FROGGS> timotimo: don't think so

[10:40] <FROGGS> at least, the majority should be written in perl

[10:40] <timotimo> can't you just compile them with v5 then?

[10:40] <FROGGS> timotimo: btw, is your gist complete?

[10:40] <timotimo> that's all the output there is

[10:40] *** rindolf joined
[10:40] <FROGGS> timotimo: I just need to provide their api, how I/someone does that is up to that someone

[10:40] <timotimo> ah, ok

[10:42] <jnthn> timotimo: The chain at 65 looks suspect

[10:42] <jnthn> It only has one child

[10:42] <jnthn> But a chain needs two

[10:42] <timotimo> oh!

[10:42] <timotimo> how did i overlook that? >_>

[10:42] <timotimo> thanks

[10:42] <jnthn> Well, maybe let's improve the error too :)

[10:42] <FROGGS> yeah, that probably is it

[10:43] <timotimo> sure, the op "chain" needs to complain if the number of arguments is <= 1

[10:43] <timotimo> right?

[10:43] <FROGGS> I think the weird "cannot call .jast" might be fixed

[10:44] <FROGGS> because sometimes it takes ages to figure out what is wrong

[10:45] <FROGGS> jnthn: btw, have you seen the msg in #moarvm? could this one be related to our exploding frame?

[10:46] *** SamuraiJack_ left
[10:47] <jnthn> FROGGS: Maybe.

[10:48] *** denisboyun joined
[10:49] *** ivanshma` left
[10:50] *** ivanshma` joined
[10:54] <felher> Somebody here from rumania?

[10:54] <jnthn> .oO( The country where they drink a lot of rum? )

[10:56] <felher> :D

[10:57] <felher> yeah, romania I meant :)

[10:57] <FROGGS> felher: not that far from romania, but no :o)

[10:58] <FROGGS> lunch &

[11:01] <arnsholt> timotimo: We could very well resume work on the ZMQ stuff

[11:01] <arnsholt> You starting to look into your ipython stuff again?

[11:05] <timotimo> not sure

[11:05] <timotimo> with JVM NativeCall around the corner, i could try

[11:05] <timotimo> the problematic thing was the heartbeat that was supposed to run in parallel

[11:05] <timotimo> for now, the blasted chained_whatevercall work is keeping me sufficiently busy :P

[11:07] <arnsholt> Yeah, I remember the heartbeat being a problem

[11:07] <timotimo> (which is funny, because i recently saw a cardiologist about my own heartbeat)

[11:08] <timotimo> (the thing i went there about was completely harmless, though)

[11:14] *** djanatyn left
[11:16] *** Tene left
[11:17] *** gfldex joined
[11:17] *** Tene joined
[11:18] *** djanatyn joined
[11:29] *** gfldex left
[11:33] *** rurban1 joined
[11:35] *** xenoterracide joined
[11:35] <timotimo> oh yeah! my code is proper now! :)

[11:36] <dalek> rakudo/chained_whatevercode: a3ccefb | (Timo Paulssen)++ | src/Perl6/Actions.nqp:

[11:36] <dalek> rakudo/chained_whatevercode: fix remaining problems with whatever_curry and chain ops

[11:36] <dalek> rakudo/chained_whatevercode: review: https://github.com/rakudo/rakudo/commit/a3ccefbbbe

[11:37] <dalek> rakudo/nom: dfeff62 | (Timo Paulssen)++ | src/Perl6/Actions.nqp:

[11:37] <dalek> rakudo/nom: fix whatever currying for chain ops

[11:37] <dalek> rakudo/nom: 

[11:37] <dalek> rakudo/nom: When a WhateverCode gets created from a chain op, it'll be annotated

[11:37] <dalek> rakudo/nom: with its original arguments and when a WhateverCode with a chain op ends

[11:37] <dalek> rakudo/nom: up calling a WhateverCode that also had a chain in it, it will "flatten

[11:37] <dalek> rakudo/nom: out" the arguments of that WhateverCode, creating a proper chain.

[11:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dfeff624a4

[11:37] <dalek> rakudo/nom: a3ccefb | (Timo Paulssen)++ | src/Perl6/Actions.nqp:

[11:37] <dalek> rakudo/nom: fix remaining problems with whatever_curry and chain ops

[11:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a3ccefbbbe

[11:37] <dalek> rakudo/nom: 40c8114 | (Timo Paulssen)++ | src/Perl6/Actions.nqp:

[11:37] <dalek> rakudo/nom: Merge branch 'chained_whatevercode' into nom

[11:37] <dalek> rakudo/nom: 

[11:37] <dalek> rakudo/nom: This fixes WhateverCode generation when chain ops are involved.

[11:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/40c8114f89

[11:41] * timotimo does a little dance to celebrate

[11:44] <jnthn> timotimo: Can you give me a quick summary of what you just fixed? :)

[11:44] <timotimo> what was wrong or how i fixed it?

[11:44] <jnthn> What was wrong

[11:44] <timotimo> sure

[11:45] <timotimo> Whatever currying would find, that the "* < 5" part of "1 < * < 5" was a WhateverCode and would emit a call to the code object

[11:45] <timotimo> however, for chain to properly function, it had to be inlined

[11:46] <timotimo> so i had to turn -> $outer { 1 < (-> $inner { $inner < 5 })($outer) }

[11:46] <timotimo> into            -> $outer { 1 < $outer < 5 }

[11:47] <timotimo> (actually, i think the comparison operators are left-assoc)

[11:47] <timotimo> (but you get the idea)

[11:47] <timotimo> i think this warrants an entry into the changelog? :)

[11:50] <timotimo> wowza. this dumb benchmark i made for the benefits of inlining WhateverCode into ifs (like when 10 < * < 20) would give a speed improvement of 2x

[11:50] *** rurban1 left
[11:50] <timotimo> i should find out how inline_info works

[11:53] <jnthn> timotimo: Yes, worth a mention

[11:53] <jnthn> timotimo: And glad this is fixed. :)

[11:53] <timotimo> wow, add_inlining_info_if_possible is pretty useful for this! :)

[11:54] <timotimo> it will even help in all other cases, not just when a chain is involved

[11:54] <jnthn> Well, something needs to make use of the info too

[11:54] <jnthn> So we're careful where we put it. :)

[11:54] <timotimo> the optimizer already tries to

[11:54] <timotimo> at least i hope so.

[11:54] <jnthn> Oh :)

[11:54] <jnthn> Then it's worth it :)

[11:54] <jnthn> Well, don't assume...check :)

[11:54] <timotimo> i'll see if it makes a difference and if not i'll look into why the optimizer doesn't

[11:55] <timotimo> i'll be afk for a bit first.

[11:55] <timotimo> (and let the test run in the background)

[11:55] <jnthn> For example, inlining methods isn't something we can do at compile time, and so best left to runtime.

[11:55] <jnthn> So no point sticking inline info onto those.

[12:01] *** tgt joined
[12:04] *** gfldex joined
[12:04] <colomon> timotimo++

[12:07] *** denisboyun left
[12:12] *** gfldex left
[12:14] <timotimo> Null PMC access in find_method('add_inlining_info_if_possible')   ... ?!?!

[12:14] <timotimo> oooh!

[12:14] <timotimo> whatever_curry is a sub

[12:18] *** gfldex joined
[12:19] <timotimo> i wonder how close it'll get to the $_-based solution after inlining

[12:22] *** denis_boyun joined
[12:23] <timotimo> apparently the inlining info wasn't used

[12:25] <timotimo> maybe it's because i'm operating on the result of block_closure(reference_to_code_object($code, $block)), whereas i should be working on... maybe just the inner part?

[12:28] *** atroxaper joined
[12:30] *** ivanshma` left
[12:38] *** denis_boyun__ joined
[12:39] *** denis_boyun left
[12:40] <timotimo> maybe it's something for jnthn to look at. he should know how that's supposed to work :P

[12:46] * timotimo adds lots of debug prints :D

[12:47] *** denis_boyun__ left
[12:47] *** denis_boyun joined
[12:53] *** rurban1 joined
[12:53] *** denis_boyun left
[12:53] *** PacoAir joined
[12:55] *** ivanshmakov joined
[12:57] *** hummeleB1 joined
[12:58] *** denis_boyun joined
[13:06] *** denis_boyun_ joined
[13:06] *** denis_boyun left
[13:06] <colomon> r: my $r = 1.969; say $r.fmt("%.0f"); say $r.fmt("%.1f"); say $r.fmt("%.2f"); say $r.fmt("%.3f");

[13:06] <camelia> rakudo-parrot 40c811, rakudo-jvm 40c811: OUTPUT«1.␤1.0␤1.97␤1.969␤»

[13:07] <timotimo> oh, when did that happen!

[13:07] <colomon> timotimo: that's still broken

[13:08] *** rindolf left
[13:08] <colomon> should be 2 2.0 1.97 1.969

[13:08] <timotimo> oh, whoops

[13:08] <colomon> that seems to happen on both parrot and jvm

[13:08] <jnthn> Well, they share a sprintf implementation, afaik :)

[13:08] <colomon> there is also a second bug involving $_ that japhb found on jvm only.

[13:09] *** rurban1 left
[13:09] <colomon> r: say "$_" for 0..3

[13:09] <camelia> rakudo-parrot 40c811, rakudo-jvm 40c811: OUTPUT«0␤1␤2␤3␤»

[13:09] <colomon> r: my $r=1.969; say $r.fmt("%.{$_}f") for 0..3

[13:09] <camelia> rakudo-jvm 40c811: OUTPUT«1.␤1.␤1.␤1.␤»

[13:09] <camelia> ..rakudo-parrot 40c811: OUTPUT«1.␤1.0␤1.97␤1.969␤»

[13:10] <colomon> r: say "{$_}" for 0..3

[13:10] <camelia> rakudo-parrot 40c811: OUTPUT«0␤1␤2␤3␤»

[13:10] <camelia> ..rakudo-jvm 40c811: OUTPUT«␤␤␤␤»

[13:10] <colomon> binog

[13:10] <colomon> bingo

[13:11] <colomon> oh, Time::Duration started failing tests overnight,  dagurval 

[13:13] <timotimo> ah, ok, is inlinable is only defined for Routine

[13:13] <timotimo> r: say WhateverCode ~~ Routine

[13:13] <camelia> rakudo-parrot 40c811, rakudo-jvm 40c811: OUTPUT«False␤»

[13:14] *** denis_boyun__ joined
[13:14] *** denis_boyun_ left
[13:18] *** denis_boyun_ joined
[13:19] *** denis_boyun__ left
[13:23] *** FROGGS left
[13:27] *** Mouq joined
[13:37] *** ivanshmakov left
[13:39] <jnthn> Advent post is done. :)

[13:44] *** ivanshmakov joined
[13:46] *** FROGGS joined
[13:47] <moritz> \o/

[13:47] *** denis_boyun__ joined
[13:47] *** denis_boyun_ left
[13:47] *** dmol joined
[13:53] *** denis_boyun joined
[13:53] *** Mouq left
[13:54] *** denis_boyun__ left
[14:07] *** jnap joined
[14:07] <timotimo> r: say WhateverCode.^mro

[14:07] <camelia> rakudo-parrot 40c811, rakudo-jvm 40c811: OUTPUT«===SORRY!===␤No such method 'arity' for invocant of type 'QAST::WVal'␤»

[14:07] *** SamuraiJack_ joined
[14:08] <timotimo> er ...

[14:09] <jnthn> star: say WhateverCode.^mro

[14:09] <camelia> star 2013-09: OUTPUT«WhateverCode.new()␤»

[14:10] *** jnap left
[14:10] <jnthn> That ain't right either...

[14:10] *** rurban1 joined
[14:10] *** jnap joined
[14:13] <timotimo> yeah, we are whatever_currying that it seems

[14:13] <timotimo> m)

[14:13] *** kivutar joined
[14:14] *** ivanshmakov left
[14:20] *** Mouq joined
[14:21] *** rurban1 left
[14:21] <colomon> whatever_currying is when you can't decide between red or green, right?

[14:31] <timotimo> i think that's actually junctions

[14:31] <timotimo> i can't seem to get the inlining info to work properly so far

[14:33] <arnsholt> Whatever code is what you get when a whatever is part of a larger expression

[14:33] <jnthn> timotimo: What are you trying to inline?

[14:34] * moritz tries to inline the inliner

[14:36] <timotimo> i'm trying to add inlining info to all WhateverCode objects

[14:36] *** ivanshmakov joined
[14:36] *** ivanshmakov left
[14:38] <timotimo> (by first providing an anonymous role that provides an inline_info sub to the WhateverCode and then calling add_inlining_info_if_possible from whatever_curry

[14:38] *** ivanshmakov joined
[14:38] *** rurban1 joined
[14:38] <jnthn> Yes, but why do you want to do that?

[14:38] <jnthn> When will we ever have opportunity to use that info?

[14:39] <timotimo> given $foo { when 10 < * < 20 { ... } }

[14:39] <timotimo> (hopefully)

[14:39] <jnthn> OK, but you don't need inline info for that.

[14:40] <timotimo> right; but that mechanism was already in place :)

[14:40] <timotimo> well, mostly

[14:40] <timotimo> but i just found a flaw in my benchmark, i think

[14:40] <jnthn> inline_info mostly exists to enable cross-compilation unit inlining.

[14:40] <timotimo> oh?

[14:40] <jnthn> It's overkill for such local things.

[14:40] <timotimo> i did not know that

[14:41] <jnthn> Yeah, it's there so we can have operators declared in the setting inlined, for example.

[14:41] <timotimo> so, is there a simpler method of doing what i want to achieve, except for using the info i already use to inline WhateverCode inside WhateverCode?

[14:41] <jnthn> Well, all inline_info does is persist AST

[14:42] <jnthn> And you already have the AST to hand...

[14:42] <timotimo> mhm

[14:42] <timotimo> say, could it be that we don't have to have a block_closure for our whatever_curry?

[14:43] <jnthn> Typically you need it to be a closure.

[14:43] <timotimo> i'm guessing block_closure does the Op( clone, BVal )

[14:43] <timotimo> okay

[14:43] <jnthn> @x.map: $a + *

[14:43] <jnthn> It matters which $a 

[14:43] <timotimo> right

[14:44] <timotimo> i don't know exactly how to make that work properly with inlining, then

[14:45] <jnthn> Needs analysis

[14:45] * timotimo writes a changelog entry for the feature

[14:45] <jnthn> It's probably not easy to do at the moment

[14:46] <timotimo> that's fine then

[14:49] <timotimo> huh, not that many interesting commits to rakudo/nom this month so far

[14:49] *** dmol left
[14:49] *** dmol joined
[14:49] <timotimo> should the indy-work be mentioned in the changelog?

[14:50] <timotimo> i think so; but left out of the rakudo start short changelog

[14:51] <jnthn> Yeah, it got us a win

[14:51] *** jeff_s2 joined
[14:52] <dalek> rakudo/nom: b11daf9 | (Timo Paulssen)++ | docs/ChangeLog:

[14:52] <dalek> rakudo/nom: A few changelog entries for this month

[14:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b11daf985c

[14:54] *** jeff_s1 left
[15:06] <timotimo> jnthn: you get a $p = promise, then a $v = $p.vow and call break/keep on the original $p then?

[15:06] <timotimo> or is that a typo?

[15:07] <jnthn> typo

[15:08] <jnthn> Fixed, thanks

[15:08] <timotimo> yw

[15:10] <timotimo> is there a reason you're not showing AsyncFile.slurp here?

[15:10] <timotimo> well, i guess it makes 0 difference here

[15:12] *** Rotwang joined
[15:12] *** Rotwang left
[15:12] <jnthn> timotimo: Well, article wasn't menat to be an exhaustive guide :)

[15:12] *** Rotwang joined
[15:12] <timotimo> right :)

[15:15] *** nebuchadnezzar left
[15:15] *** jeckyhl joined
[15:17] *** nebuchadnezzar joined
[15:21] *** ggoebel115 joined
[15:21] *** rindolf joined
[15:22] <jeckyhl> hi, had anybody experienced problems building rakudo / jvm on Windows ? I've got an error when running tools\build\create-jvm-runner.pl : on line 32, $install_to happends to be "\C:\Dev\perl6\rakudo\install\bin\perl6-j.bat" (with a backslash on the beginning) which make the next instruction fail

[15:23] *** jnap left
[15:24] *** jnap joined
[15:24] *** ggoebel114 left
[15:24] *** xinming_ joined
[15:26] *** xinming left
[15:28] *** jnap left
[15:30] *** denis_boyun_ joined
[15:31] *** denis_boyun left
[15:34] *** nnunley joined
[15:35] *** jeff_s1 joined
[15:37] *** jeff_s2 left
[15:40] *** denis_boyun joined
[15:41] *** denis_boyun_ left
[15:41] <timotimo> FROGGS: do you have an overview what exactly is missing for loop labels to work in nqp and then rakudo?

[15:41] <jnthn> I think me reviewing the branch so far was one of the things... :)

[15:46] <FROGGS> timotimo: there is nothing missing for using them in nqp :o)

[15:46] <timotimo> even for jvm and moar?

[15:46] <FROGGS> timotimo: ahh, no

[15:46] <FROGGS> that was parrot only

[15:46] <timotimo> oke

[15:47] <timotimo> i'm just a bit bummed out by the small amount of things i could write in the changelog for this month so far

[15:47] <FROGGS> don't wanted to continue when the approach was maybe wrong or so (even when I don't believe I took the wrong one)

[15:47] <FROGGS> timotimo: btw, there is a sized-arrays branch that would need reviewing and merging

[15:48] <FROGGS> but I was unable to squish the 20+ commits into one, so it would be reviewable at all

[15:49] <timotimo> oh?

[15:49] <timotimo> i didn't know that's an operation that can fail :)

[15:52] <FROGGS> was the first and only time I did that

[15:52] <FROGGS> (or tried to)

[15:54] <timotimo> in the worst case, you can git diff the branch against its fork-off-point, write the diff to a file, check out the fork-off-point and apply the resulting patch with "patch -p1"

[16:02] *** jeckyhl left
[16:03] <FROGGS> timotimo: and how do I preserve the author?

[16:04] <jnthn> Note that if we're doing this just to make it easier to review, it's easy to read the diff to review it and then apply the original commits... :)

[16:04] *** Rotwang left
[16:04] <jnthn> So long as the branch is up to date with latest nom

[16:07] <FROGGS> yeah, that'd work too

[16:08] <FROGGS> jnthn: I can do that in a few hours if you will have time to review this night or tomorrow

[16:13] <jnthn> FROGGS: Yeah, I can find time to do that.

[16:13] <FROGGS> k

[16:17] <timotimo> FROGGS: git commit will accept --author and --commiter iirc

[16:18] *** Rotwang joined
[16:19] *** ico joined
[16:20] *** ico left
[16:24] *** rurban1 left
[16:29] *** zakharyas joined
[16:43] *** kivutar left
[16:54] *** rurban1 joined
[16:58] *** fridim_ joined
[17:00] *** pmurias joined
[17:08] *** grondilu joined
[17:10] *** rurban2 joined
[17:11] *** rurban1 left
[17:14] *** rurban2 left
[17:14] *** denis_boyun_ joined
[17:14] *** denis_boyun left
[17:22] *** Timbus left
[17:23] * TimToady is supposed to be singing tenor in our Christmas musical tomorrow, and will probably be singing basso profundo instead, sigh...

[17:23] *** Timbus joined
[17:25] *** atroxaper left
[17:29] *** ivanshmakov left
[17:29] *** denisboyun joined
[17:30] *** denis_boyun_ left
[17:40] *** kaare__ is now known as kaare_

[17:42] <TimToady> jnthn: asyncrhonously

[17:42] <jnthn> TimToady: ? :)

[17:43] <TimToady> s/rh/hr/

[17:44] <jnthn> oh...

[17:44] <jnthn> Stared at it trying to spot the spello for a whole minute :/

[17:44] <jnthn> fixed

[17:45] *** gdey joined
[17:47] *** isBEKaml joined
[17:48] <moritz> succeeded in gdb

[17:48] <timotimo> jnthn: i'm silly. i figured out why it didn't inline the WhateverCodes for "when"; because when makes a .ACCEPTS($_) rather than a normal call

[17:48] <moritz> erm, wc

[17:49] <timotimo> thus, i can teach the optimizer to look at the invocant of ACCEPTS($_) if it's a WhateverCode that's annotated with the information from the whatever_curry thingie and then inline it

[17:50] *** dronmbb joined
[17:50] *** dronmbb left
[17:50] <timotimo> but i'm not entirely sure what i have to analyse to make sure i don't break closures that are necessary for correct functioning

[17:50] <timotimo> maybe if the only vars that are inside are the arguments (the only argument) to the whatevercode object

[17:56] *** xenoterracide left
[17:57] <timotimo> jnthn: ^^ does that sound like the necessary analysis?

[17:58] <jnthn> timotimo: Kinda, but we really need much more general analysis of these things

[17:58] <timotimo> OK, it'll wait until much later then

[17:58] <jnthn> And putting in optimizations like this that special-case it will only make it harder later.

[17:58] <jnthn> The optimizer is already harder to maintain than I'd like.

[17:59] <timotimo> oh no! what did i do! ;_;

[17:59] <jnthn> Just added more things into a less-than-sustainable design. :)

[18:00] <jnthn> It needs to grow and do more, but I think it'll need a bit of restructuring first to keep things sane.

[18:00] <jnthn> In general, it needs a bunch of changes to start being able to track variables and their usage.

[18:01] *** gdey left
[18:01] *** isBEKaml left
[18:02] <timotimo> right

[18:02] <timotimo> i once had "a" design based on hashes and stuff

[18:02] *** nnunley_ joined
[18:03] *** [particle]1 joined
[18:04] * TimToady knows from personal experience that it's really easy to get stuck at the wrong abstraction level

[18:04] <jnthn> I'm also a little wary of special-casing something that I'm not sure comes up a load, or at least, I wonder if this special case actually falls out of two things

[18:05] <jnthn> That is, ACCEPTs on a known code object with a single arg in a boolean context can be first reduced to just a call.

[18:05] <jnthn> And then an inline falls out more naturally.

[18:05] *** itz_ joined
[18:05] *** _ilbot left
[18:05] *** PacoAir left
[18:05] *** nnunley left
[18:05] *** atrodo left
[18:05] *** itz left
[18:05] *** estrabd_ joined
[18:05] *** estrabd left
[18:05] *** rurban left
[18:05] *** Fatalnix left
[18:05] *** Pleiades` left
[18:05] *** [particle] left
[18:05] *** japhb_ left
[18:05] *** Juerd left
[18:05] *** dylanwh left
[18:05] *** hoelzro left
[18:05] *** Juerd joined
[18:06] *** dylanwh joined
[18:06] *** rurban joined
[18:06] *** Fatalnix joined
[18:06] *** hoelzro joined
[18:06] *** atrodo joined
[18:06] *** Pleiades` joined
[18:06] *** japhb_ joined
[18:06] *** Pleiades` left
[18:07] *** Pleiades` joined
[18:07] *** _ilbot joined
[18:07] * TimToady welcomes everyone back, including _ilbot

[18:11] <TimToady> jnthn: you have $dest.last(); but I believe the current speci is $dest.close

[18:11] *** rurban1 joined
[18:13] *** SamuraiJack_ left
[18:14] *** gdey joined
[18:16] *** rurban1 left
[18:16] <TimToady> and we don't seem to have a specced $dest.fail, which should probably be $dest.quit anyway, for consistency with supplies

[18:22] <TimToady> I see that the current implementation has .close and .fail

[18:22] <TimToady> so the .done is definitely fossilic

[18:22] <TimToady> er, .last

[18:23] <timotimo> i should finally get my simplify_before branch ready for merging

[18:23] <timotimo> and write my advent calendar post

[18:23] <timotimo> also, i think i need about 6 naps right now

[18:23] <moritz> sleep faster! :-)

[18:24] <TimToady> do them concurrently!

[18:24] <timotimo> i should employ a few people to sleep fo rme

[18:25] <moritz> SaaS, Sleep as a Service

[18:25] <moritz> Cloud Sleeping!

[18:32] *** darutoko left
[18:33] *** ajr_ joined
[18:34] *** ivanshmakov joined
[18:35] * moritz kinda enjoyed http://www.nosql-vs-sql.com/

[18:35] <timotimo> yeah

[18:38] *** spider-mario left
[18:39] *** jeff_s1 left
[18:40] *** jeff_s1 joined
[18:41] *** Rotwang left
[18:41] *** snoopy_ joined
[18:41] *** snoopy_ left
[18:42] *** dwarring joined
[18:43] *** Rotwang joined
[18:48] <dalek> rakudo/nom: a05e24d | moritz++ | docs/ChangeLog:

[18:48] <dalek> rakudo/nom: two more changelog entries

[18:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a05e24da75

[18:59] *** SamuraiJack_ joined
[19:01] * dwarring yawns

[19:01] <preflex>  dwarring: you have 1 new message. '/msg preflex messages' to read it.

[19:02] * dwarring aha thanks raiph

[19:02] <colomon> dwarring: PDF::Grammar failing in my smoke tests.

[19:03] *** lizmat left
[19:03] *** lizmat joined
[19:06] <dwarring> colomon: will check it out

[19:06] <colomon> dwarring++

[19:08] <masak> evenin', #perl6

[19:08] *** culture joined
[19:08] *** culture left
[19:09] <moritz> it's a masak!

[19:12] <masak> \o/

[19:13] *** telex left
[19:13] *** grondilu left
[19:15] *** rurban1 joined
[19:16] *** telex joined
[19:17] *** sftp_ joined
[19:18] *** PZt left
[19:18] *** sftp left
[19:18] *** aindilis left
[19:19] <raydiak_> this typo was too amusing not to share: "tmux attack"

[19:19] *** rurban1 left
[19:19] *** raydiak_ is now known as raydiak

[19:19] <timotimo> :D

[19:20] <colomon> masak!  \o/

[19:23] <moritz> raydiak: the attach of the clone warriors :-)

[19:23] *** kivutar joined
[19:27] *** djanatyn left
[19:28] *** Tene left
[19:29] <dalek> Heuristic branch merge: pushed 22 commits to rakudo/sized-arrays by FROGGS

[19:30] *** Maddingu1 joined
[19:30] *** gdey left
[19:30] *** betterwo1ld joined
[19:31] <lue> hello world o/

[19:31] <FROGGS> jnthn: here is the diff https://gist.github.com/FROGGS/50d58158001696e89327

[19:31] <FROGGS> (for sized-arrays)

[19:32] *** betterworld left
[19:32] *** Maddingue left
[19:35] <FROGGS> jnthn: btw, this should be done in rakudo too: https://github.com/rakudo-p5/v5/commit/3105451

[19:39] <raydiak> moritz: I haven't seen that one...can you mail it to me as an attackment? :)

[19:39] <preflex>  raydiak: you have 1 new message. '/msg preflex messages' to read it.

[19:39] <raydiak> morning lue \o

[19:47] <mathw> off-topic-ish: good real-world-ish example of a simple class for introducing someone to OOP?

[19:47] <timotimo> what a huge ass-diff

[19:52] <TimToady> FROGGS: looks like a chain thing snuck in there

[19:52] *** Tene joined
[19:52] *** Tene left
[19:52] *** Tene joined
[19:53] <FROGGS> hmmm

[19:53] *** djanatyn joined
[19:54] <FROGGS> I just merged nom into sized-arrays branch, and made a diff

[19:54] <FROGGS> but yeah, that does not belong there

[19:54] <FROGGS> ohh well

[19:55] <moritz> mathw: maybe the Task example from the OO chapter of the p6 book?

[19:55] <FROGGS> maybe I really fake a diff like `git am` produces?

[19:55] <FROGGS> so I could just strip that stuff

[19:56] <timotimo> huh, why are the spectests clean?

[19:56] <timotimo> weren't they nonclean on my simplify_before branch recently?

[19:56] <timotimo> well, that's cool i guess o_O

[19:56] <moritz> FROGGS: did you try  git diff nom...origin/sized-arrays  (note the three dots)

[19:56] * TimToady doesn't see offhand where multi-dimensional shapes are handled

[19:56] <FROGGS> moritz: no

[19:57] <FROGGS> moritz: that seems to be identical

[19:57] <moritz> ok

[19:58] <moritz> might be simpler than doing the merge locally

[19:59] <moritz> timotimo: do we have any spectests for the chained *-curry thing?

[19:59] <jnthn> TimToady: https://gist.github.com/FROGGS/50d58158001696e89327#file-sized-arrays-diff-L26 explicitly says it doesn't yet

[20:00] <jnthn> FROGGS: Do you understand the map thingy that's going on in https://gist.github.com/FROGGS/50d58158001696e89327#file-sized-arrays-diff-L17 ?

[20:01] <FROGGS> jnthn: ummm, no

[20:01] <jnthn> oh, maybe it's to handle my @seasons[4, :map( * % 4 )];

[20:02] <FROGGS> ahh, my nom missed two commits.... the chainy stuff is gone now

[20:02] <jnthn> It looks like a fragile way to do that...

[20:02] <FROGGS> wth is that even O.o?

[20:02] <timotimo> moritz: yes, two todos that now pass

[20:03] <timotimo> moritz: but this spectest run was for simplify_before, which does regex optimizations

[20:03] <jnthn> FROGGS: See S09 for what it is, but I can see that code being at risk of exploding in various ways...

[20:03] <FROGGS> k

[20:05] <jnthn> It doesn't look for there being a Pair and then look if the first key is map, it just assumes...

[20:05] <jnthn> I can see that going horribly wrong somehow

[20:06] <jnthn> I don't understand what https://gist.github.com/FROGGS/50d58158001696e89327#file-sized-arrays-diff-L61 is trying to achieve either

[20:09] <jnthn> https://gist.github.com/FROGGS/50d58158001696e89327#file-sized-arrays-diff-L288 probably makes some wrong assumptions about flattening

[20:10] <timotimo> moritz: http://questhub.io/realm/perl/quest/52a5f3c79f567a5a02000055/comment/52ac43609f567ade150000f1 - does this seem like something that could go into the spectests?

[20:10] <FROGGS> jnthn: the commit does not explain either https://github.com/rakudo/rakudo/commit/a987a5bced1b1598ebfa5bcb99651514aa5700d3

[20:10] <moritz> timotimo: yes

[20:11] <moritz> with some say() replace by ok/is calls, of course :-)

[20:11] <jnthn> Also, this patch will slow things down, since it makes every array pay for the :map feature when relatively few will do that.

[20:15] <timotimo> can someone do spectests on jvm for me? :(

[20:16] <timotimo> once for simplify_before/regex_optimizer and once for master/nom?

[20:17] <moritz> timotimo: I think I can, but only with a single process

[20:17] <timotimo> so, only if you have time then :)

[20:17] <timotimo> deprecations / isDEPRECATED still has known failures?

[20:17] <timotimo> why don't we fudge those?

[20:18] <timotimo> (i can do it if it's okay with all of you)

[20:18] <moritz> ask lizmat

[20:21] <timotimo> my spectest run of simplify_before/regex_optimizer got to S05 now

[20:22] * lue is a bit alarmed at the irregularity between L<Syn/Section/"Text fragment"> and L<Syn/Section/Text Fragment> and L<Syn/"Section"/Text Fragment> and ...

[20:22] <dalek> roast: e34f95c | moritz++ | S02-types/whatever.t:

[20:22] <dalek> roast: unfudge  whatever-chain tests, timotimo++

[20:22] <dalek> roast: review: https://github.com/perl6/roast/commit/e34f95c155

[20:22] * moritz has just fnished compiling j-all

[20:23] <jnthn> FROGGS: Anyway, those are my comments. I'm a bit uncomfortable about merging something that will slow down every array access.

[20:23] <moritz> daugher sleeps, now I can take my laptop to the living room again, where it has a power supply :-)

[20:23] <moritz> *daughter

[20:23] <jnthn> FROGGS: And doubly so when it contains code I know is fragile.

[20:23] <moritz> though it says it still has more than an hour to live

[20:23] <FROGGS> jnthn: of course... I'll msg Arcterus a link to to this here

[20:24] * dwarring  promises & channels advent post - jnthn++

[20:25] *** Juerd left
[20:25] <jnthn> FROGGS: The mixin approach taken by typed ones may be better.

[20:26] * lue briefly ponders replacing the L<> stuff in roast with M<> during his making of the Pod6 toolchain, so as to not confuse the point of L<>

[20:26] *** Juerd joined
[20:27] *** SamuraiJack_ left
[20:28] * moritz can't decide if that's scope creep or not

[20:29] *** zakharyas left
[20:31] <dalek> star: 8d120c2 | moritz++ | modules/ (2 files):

[20:31] <dalek> star: update two modules

[20:31] <dalek> star: review: https://github.com/rakudo/star/commit/8d120c25c5

[20:31] <timotimo> already preparing for the star release? :)

[20:32] <lue> moritz: I definitely wouldn't do any theoretical L<> -> M<> change until the very end. It was just me wondering if calling it a "L"ink is exactly correct. (fwiw, it feels like it's better describe as a *reverse* link, but there's no RL<>)

[20:36] <moritz> lue: it's actually a link, the tools just use it as a reverse link

[20:36] *** wooden left
[20:37] *** djanatyn left
[20:37] *** wooden joined
[20:37] *** Tene left
[20:37] <lue> Fair enough. Still feels a bit of a stretch to call it a link, maybe because I'd feel better with L<syn:S02/Sect/"fragm"> (protocols are important!) :D

[20:38] *** rindolf left
[20:41] <dalek> star: 7d731a0 | moritz++ | README:

[20:41] <dalek> star: update README. Closes #15

[20:41] <dalek> star: review: https://github.com/rakudo/star/commit/7d731a0c1d

[20:42] <lue> My worry over the use of "" in the links earlier was because I forgot that /Section/ doesn't care about hierarchies. (i.e. to reach a =head4 it doesn't do /head1/head2/head3/head4 but rather /head4/)

[20:45] <timotimo> lue: use ˥<...> instead

[20:45] <lue> .oO(λ<>)

[20:46] <timotimo> t/spec/S06-other/main-eval.rakudo.jvm ........................ No subtests run

[20:46] <timotimo> is the first one that fails like that when i do TEST_JOBS=2

[20:47] * lue &

[20:48] <dalek> star: 42daf9f | moritz++ | tools/star/release-guide.pod:

[20:48] <dalek> star: Update release guide to avoid out-of-date submodules

[20:48] <dalek> star: review: https://github.com/rakudo/star/commit/42daf9f298

[20:56] *** Tene joined
[20:56] *** Tene left
[20:56] *** Tene joined
[20:57] *** djanatyn joined
[20:58] *** ajr_ left
[20:59] *** ajr joined
[20:59] *** ajr is now known as Guest49853

[20:59] *** Guest49853 is now known as ajr_

[21:08] <masak> so...

[21:09] <masak> Rakudo release on Thursday, and no-one signed up as release manager, huh?

[21:09] <masak> here, I'll make you a deal.

[21:09] <masak> someone either grap Thursday and I'll grab January, or someone grab some other month and I'll grab Thursday.

[21:10] <moritz> masak: I'll do Thursday

[21:10] <masak> moritz++

[21:11] <dalek> rakudo/nom: 1069590 | moritz++ | docs/release_guide.pod:

[21:11] <dalek> rakudo/nom: split December and January releases between masak++ and me

[21:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1069590ec0

[21:11] <moritz> it would be awesome to have a volunteer for the star release too

[21:11] <colomon> moritz++ masak++

[21:11] <masak> grab*

[21:11] <masak> man, why feather so slow again? :/

[21:12] <moritz> low load average

[21:13] <moritz> low CPU usage

[21:13] <moritz> low ping times

[21:15] * moritz has no idea

[21:15] <moritz> maybe cross-talk from another VM? IO?

[21:16] <timotimo> yeah, VMs are problematic that way

[21:17] <timotimo> isn't there some standardised protocol to tell VMs how much load their host has?

[21:17] <moritz> though it's not usually that bad :-)

[21:17] <timotimo> moritz: were you able to start the spectest run yet?

[21:17] <moritz> timotimo: the nom one is t/spec/integration/error-reporting.rakudo.jvm right now

[21:18] <moritz> timotimo: I'll start the second one before going to bed

[21:18] <timotimo> thanks!

[21:18] <timotimo> i'll try a one-job-in-parallel run now, too

[21:18] <timotimo> though today is feuerzangenbowle in my hackspace, so ... :)

[21:18] <timotimo> %)

[21:20] <timotimo> at least it does get past the S05 tests just fine

[21:20] <masak>   

[21:20] <timotimo>  

[21:20] <lizmat> timotimo: those deprecations tests failing on jvm, is because backtraces fail, afaik

[21:20] <lizmat> and that seems pretty important to me

[21:20] <timotimo> can we todo them so that they don't show up as "not ok" on comparison runs for branches and features and stuff?

[21:20] <masak> moritz: I remember having this issue a few weeks back, and no-one else having it then either.

[21:20] <masak> moritz: maybe this laptop is simply giving up the ghost.

[21:21] <moritz> timotimo: https://gist.github.com/moritz/2375e30d8c3bf35bcf04 master/nom result

[21:21] <moritz> masak: no, it's slow for me too

[21:21] <timotimo> i thought fudging is for "we know this is bad and we should fix it, but don't worry, it's not *your* particular fault"

[21:21] *** rurban1 joined
[21:21] <lizmat> timotimo: ok, mark them as todo (or skip, I think, because they die)

[21:21] <timotimo> perl.rakudo.jvm fails for me, too

[21:23] <timotimo> er, it doesn't have a failure when i call it on its own. great.

[21:26] <masak> moritz: oh!

[21:29] *** rurban1 left
[21:32] *** denisboyun left
[21:35] *** jeff_s1 left
[21:36] *** jeff_s1 joined
[21:37] <dalek> roast: 1f062e9 | (Timo Paulssen)++ | S02-types/ (2 files):

[21:37] <dalek> roast: fudge jvm problems with deprecation tracebacks

[21:37] <dalek> roast: review: https://github.com/perl6/roast/commit/1f062e9ada

[21:38] <dalek> rakudo-star-daily: 0321033 | coke++ | log/ (5 files):

[21:38] <dalek> rakudo-star-daily: today (automated commit)

[21:38] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/03210332fa

[21:38] <dalek> rakudo-star-daily: 16bd544 | coke++ | log/ (5 files):

[21:38] <dalek> rakudo-star-daily: today (automated commit)

[21:38] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/16bd544e3b

[21:38] <dalek> rakudo-star-daily: b1ab6d4 | coke++ | log/ (5 files):

[21:38] <dalek> rakudo-star-daily: today (automated commit)

[21:38] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/b1ab6d42d6

[21:38] <dalek> rakudo-star-daily: cb0ce3f | coke++ | log/ (5 files):

[21:38] <dalek> rakudo-star-daily: today (automated commit)

[21:38] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/cb0ce3f115

[21:38] <dalek> perl6-roast-data: 8ce3a8a | coke++ | p (2 files):

[21:38] <dalek> perl6-roast-data: today (automated commit)

[21:38] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/8ce3a8adca

[21:38] <dalek> perl6-roast-data: ba57761 | coke++ | p (2 files):

[21:38] <dalek> perl6-roast-data: today (automated commit)

[21:38] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/ba57761c54

[21:38] <dalek> perl6-roast-data: 348552e | coke++ | p (2 files):

[21:38] <dalek> perl6-roast-data: today (automated commit)

[21:38] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/348552e3e4

[21:38] <timotimo> moritz: i don't get the failure in S32-test/roll.t

[21:39] <timotimo> and "no subtests run" again

[21:46] *** kaare_ left
[21:53] *** ajr_ left
[21:54] <dwarring> colomon: have fixed PDF::Grammar

[21:54] <colomon> \o/

[21:54] <colomon> dwarring++

[21:55] *** PZt joined
[22:09] <dalek> rakudo/moar-support: 20cf1d2 | jnthn++ | src/vm/moar/ops/container.c:

[22:09] <dalek> rakudo/moar-support: Fix RakudoScalar as having non-invoking fetch.

[22:09] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/20cf1d2c34

[22:09] <dalek> rakudo/moar-support: 2a7cd2f | jnthn++ | src/core/List.pm:

[22:09] <dalek> rakudo/moar-support: Optimization that avoids a Rakudo Moar bug.

[22:09] <dalek> rakudo/moar-support: 

[22:09] <dalek> rakudo/moar-support: Doing $some_int == Inf ends up coercing $some_int and re-dispatching,

[22:09] <dalek> rakudo/moar-support: which we can avoid much more quickly with a type check for the very

[22:09] <dalek> rakudo/moar-support: common case of passing an integer to gimme. This helps all backends,

[22:09] <dalek> rakudo/moar-support: but also avoids a Moar bug; hopefully sanity tests will show it up in

[22:09] <dalek> rakudo/moar-support: a clearer way.

[22:09] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/2a7cd2f4da

[22:28] *** Pleiades` left
[22:29] *** colomon left
[22:29] *** colomon joined
[22:33] *** Pleiades` joined
[22:34] *** rurban1 joined
[22:36] <dalek> rakudo/moar-support: df50def | jnthn++ | src/core/Version.pm:

[22:36] <dalek> rakudo/moar-support: Disable version object construction on Moar.

[22:36] <dalek> rakudo/moar-support: 

[22:36] <dalek> rakudo/moar-support: Gets in the way of running any sanity tests. Can get it back in place

[22:36] <dalek> rakudo/moar-support: later.

[22:36] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/df50def045

[22:36] *** [Sno] joined
[22:38] *** xenoterracide joined
[22:54] <pmurias> PDF::Grammar is a grammar for pdfs?

[22:55] *** rurban1 left
[22:55] <woolfy> jnthn++ for nice perl 6 advent blog.

[22:56] <woolfy> Looking forward to the Day 15 Perl 6  Advent Blog (which I hope will appear any moment now)

[22:56] <masak> oh, seems it's my turn tomorrow...

[22:57] <woolfy> I thought it would be every day around 23:00...  which was 56 minutes ago...

[22:59] *** webchat_masak joined
[23:00] * webchat_masak grumbles over feather's non-responsiveness

[23:00] <webchat_masak> woolfy: I would have had a post ready by now, but I missed that I'm on for tomorrow, and not Monday...

[23:00] <lue> hello webchat_masak o/

[23:00] <webchat_masak> I'll draft a post now, go to bed, and then publish it first thing in the morning.

[23:01] <woolfy> masak...  :-)   (was I subtle enough to get you to work?)

[23:01] <webchat_masak> yeah, writing it now.

[23:01] <woolfy> masak++

[23:01] <webchat_masak> though I actually independently checked the schedule, curious who was on for tomorrow...

[23:02] <woolfy> resulting in?

[23:02] <webchat_masak> mild surprise, and a decision not to go to bed yet.

[23:02] <woolfy> hehe

[23:03] <woolfy> lizmat tried me to write a blog for the advent, and I really have not enough Perl 6 knowledge to do so.  It would be a social thing, like something about Tuits, or Fosdem, or how I enjoyed seeing Perl 6 people perform at a hackathon, a workshop or a YAPC.

[23:04] <woolfy> And I am so not going to write something egotistical like that!

[23:05] <webchat_masak> woolfy: maybe you should write a few Perl 6 programs ;)

[23:05] <woolfy> masak: Maybe. Probably not a good idea. Would be bad for the reputation of Perl 6. :-)

[23:08] *** laidback_01 joined
[23:10] <raydiak> apparently I dodged a bullet...I almost wrote my advent post about something social :)

[23:10] <webchat_masak> woolfy: you keep underselling yourself :)

[23:11] <webchat_masak> woolfy: I for one would love to see some woolfy Perl 6 code.

[23:11] <colomon> woolfy!  woolfy!  woolfy!

[23:11] * dwarring have my stocking filler ready

[23:12] <woolfy> webchat_masak: indeed. But I know myself as a programmer. I did nice scripts in the 90's, but mostly worked as a manager, marketeer, project manager, account manager, human resource manager...  I hired people that really were good programmers and tought them Perl.  Perl 5.

[23:13] <webchat_masak> woolfy: sounds good enough to me.

[23:13] <webchat_masak> woolfy: I would also have been a recovering Perl 5 programmer, if only I had discovered Perl 6 later and Perl 5 sooner :P

[23:15] * lue only picked P6 because trying to use a Qt module without knowing P5's classes discourages you :)

[23:16] <woolfy> Let me do the tuits, the leaflets and the other simple marketing stuff and I leave the programming to you, lizmat, jnthn, TimToady, pmichaud, colomon, timotimo, moritz, lue, FROGGS, sorear, tadzik, and everybody else that does real programming.

[23:17] <woolfy> oO(was not meant to exclude people, you all are heroes!)

[23:17] * dwarring didn't pick Perl6 - just started doing advent exercises last year and hasn't stopped yet

[23:17] <woolfy> dwarring++

[23:17] <webchat_masak> dwarring++

[23:17] <webchat_masak> I didn't even know we had advent exercises :)

[23:18] *** beastd joined
[23:19] * dwarring neither did I - just started playing with the code

[23:19] <dwarring> then tired something on my own own on day 25

[23:21] <dwarring> I followed previous calendars

[23:22] <dwarring> diference last year was I kept going afterwards

[23:23] <woolfy> again, dwarring++

[23:23] <woolfy> By the way, this advent of yesterday http://perl6advent.wordpress.com/2013/12/13/day-13-roasting-rakudo-star/  is very useful for marketing purposes. 

[23:24] <woolfy> It's one of the most asked questions / snide remarks given...  when is it christmas / is Perl 6 ready yet.  This blog is helpful in answering those.

[23:24] <woolfy> Coke++

[23:24] <lue> .oO(JSON::Tiny's roundtrip test has a nasty habit of slowing my computer to a near-halt.)

[23:27] * dwarring Perl 6 is ready at Christmas - its just that the Christmases are unevenly distributed

[23:33] <lue> does anyone else get this, or should I upgrade my r-p? "build stage failed for panda: Failed building lib/Panda/Project.pm"

[23:35] <lue> tadzik: any ideas what could be causing this? ^^^

[23:36] <FROGGS> lue: did you pass the --prefix to rakudo like ./something?

[23:37] <lue> no...? It's been a while since I played with installing r-p, and it always goes straight to /usr/local

[23:38] *** MikeFair__ joined
[23:38] * lue even cleared out his ~/.perl6 to make sure panda wasn't borking on old directories there.

[23:39] *** MikeFair left
[23:40] <lue> (everything else builds fine, it's just panda. Running rebootstrap, IIRC, makes it so File::Find won't build. Somehow.

[23:40] <lue> )

[23:42] <lue> FROGGS: are you suggesting running sudo bootstrap or install the r-p toolchain into a non-sudo-required place would work? Because I'm not sure what makes ~/.perl6 broken.

[23:42] <FROGGS> I dont know what to suggest :/

[23:51] <lue> I just ran the build command (after reading through panda's code), and it seemed to run fine. I've no clue why it errors then :/

[23:51] *** rurban1 joined
[23:56] *** xinming_ left
[23:59] *** xinming joined
