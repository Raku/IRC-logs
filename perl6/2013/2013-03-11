[00:04] <timotimo> ... now how does it interact with nameds? :|

[00:05] *** Chillance left
[00:20] * timotimo spectests

[00:25] <timotimo> uuuh, i have some test failures in the spectest suite that i don't think are mine

[00:25] <timotimo> oops, old rakudo

[00:30] *** lustlife joined
[00:33] <timotimo> lots and lots of spectest failures :(

[00:36] *** nebuchad` joined
[00:36] *** Maddingu1 joined
[00:37] *** census_ left
[00:38] *** FROGGS_ joined
[00:39] *** TimToady_ joined
[00:43] *** drbean_ joined
[00:44] *** _ilbot left
[00:44] *** jaldhar_ left
[00:44] *** FROGGS left
[00:44] *** nebuchadnezzar left
[00:44] *** TimToady left
[00:44] *** drbean_ is now known as drbean

[00:47] *** am0c joined
[00:52] <timotimo> hm. my change doesn't break, but doesn't make the test pass either >_>

[00:54] <dalek> perl6-roast-data: fbaeeea | coke++ | / (4 files):

[00:54] <dalek> perl6-roast-data: today (automated commit)

[00:54] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/fbaeeea7e0

[00:55] *** bowtie left
[01:00] *** _ilbot joined
[01:10] <timotimo> i think i may have broken something :(

[01:13] <timotimo> well, at least the mistake was pretty obvious

[01:14] *** anuby joined
[01:19] <dalek> roast: 7d2ac00 | (Timo Paulssen)++ | S03-junctions/autothreading.t:

[01:19] <dalek> roast: fix a typo.

[01:19] <dalek> roast: review: https://github.com/perl6/roast/commit/7d2ac006f7

[01:20] <timotimo> great, it seems i made it work! :)

[01:24] <timotimo> er, i think i accidentally made a different todo patch

[01:24] <timotimo> is that good or bad?

[01:26] <timotimo> oh, cool. it actually is!

[01:28] *** hypolin joined
[01:33] <timotimo> rn: my tn($:a, $:b) { say "$a, $b" }; tn(:a(1&2), :b(10&20)); tn(:b(10&20), :a(1&2))

[01:33] <p6eval> rakudo 8d510e: OUTPUT«[31m===[0mSORRY![31m===[0m␤Type 'tn' is not declared␤at /tmp/EuvO5bcDJV:1␤------> [32mmy tn[33m⏏[31m($:a, $:b) { say "$a, $b" }; tn(:a(1&2),[0m␤Malformed my␤at /tmp/EuvO5bcDJV:1␤------> [32mmy [33m⏏[31mtn($:a, $:b) { say "$a, $b" }; tn(:a(1&2[0m␤    exp…

[01:33] <p6eval> ..niecza v24-33-gfc6d5fd: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Malformed my at /tmp/S1r5iEgz_u line 1:␤------> [32mmy[33m⏏[31m tn($:a, $:b) { say "$a, $b" }; tn(:a(1&[0m␤␤Parse failed␤␤»

[01:33] <timotimo> rn: sub tn($:a, $:b) { say "$a, $b" }; tn(:a(1&2), :b(10&20)); tn(:b(10&20), :a(1&2))

[01:33] <p6eval> niecza v24-33-gfc6d5fd: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤You may not use the : twigil in a signature at /tmp/WsLp3olwLk line 1:␤------> [32msub tn([33m⏏[31m$:a, $:b) { say "$a, $b" }; tn(:a(1&2), [0m␤␤Parse failed␤␤»

[01:33] <p6eval> ..rakudo 8d510e: OUTPUT«[31m===[0mSORRY![31m===[0m␤In signature parameter, placeholder variables like $:a are illegal␤you probably meant a named parameter: ':$a'␤at /tmp/JfYt6m9VMD:1␤------> [32msub tn($:a[33m⏏[31m, $:b) { say "$a, $b" }; tn(:a(1&2), :b([0m␤In signature parameter,…

[01:33] <timotimo> rn: sub tn(:$a, :$b) { say "$a, $b" }; tn(:a(1&2), :b(10&20)); tn(:b(10&20), :a(1&2))

[01:33] <p6eval> rakudo 8d510e: OUTPUT«1, 10␤1, 20␤2, 10␤2, 20␤1, 10␤2, 10␤1, 20␤2, 20␤»

[01:33] <p6eval> ..niecza v24-33-gfc6d5fd: OUTPUT«1, 10␤1, 20␤2, 10␤2, 20␤1, 10␤1, 20␤2, 10␤2, 20␤»

[01:34] <timotimo> seems like they do it differently

[01:34] <timotimo> rn: sub tn(:$a, :$b) { say "$a, $b" }; my Mu $res = tn(:a(1&2), :b(10&20)); tn(:b(10&20), :a(1&2)); say $res.Str;

[01:34] <p6eval> rakudo 8d510e: OUTPUT«1, 10␤1, 20␤2, 10␤2, 20␤1, 10␤2, 10␤1, 20␤2, 20␤all(all(Bool::True, Bool::True), all(Bool::True, Bool::True))␤»

[01:34] <p6eval> ..niecza v24-33-gfc6d5fd: OUTPUT«1, 10␤1, 20␤2, 10␤2, 20␤1, 10␤1, 20␤2, 10␤2, 20␤all(all(Bool::True, Bool::True), all(Bool::True, Bool::True))␤»

[01:34] <timotimo> er, whoops

[01:34] <timotimo> rn: sub tn(:$a, :$b) { "$a, $b" }; my Mu $res = tn(:a(1&2), :b(10&20)); tn(:b(10&20), :a(1&2)); say $res.Str;

[01:34] <p6eval> rakudo 8d510e, niecza v24-33-gfc6d5fd: OUTPUT«all(all("1, 10", "1, 20"), all("2, 10", "2, 20"))␤»

[01:35] <timotimo> the ordering differs very slightly between rakudo and niecza there, but the structure of the resulting junctions is the same ... huh?

[01:35] <timotimo> oh well, that shouldn't be a problem at all.

[01:36] *** adu joined
[01:50] <timotimo> the ordering of calls only, mind you.

[01:51] *** grondilu left
[01:53] *** xinming left
[01:53] *** adu left
[01:55] *** xinming joined
[02:07] *** adu joined
[02:10] *** FROGGS__ joined
[02:14] *** FROGGS_ left
[02:16] *** lichtkind_ is now known as lichtkind

[03:10] *** orafu left
[03:18] *** adu left
[03:22] *** orafu joined
[03:29] *** adu joined
[04:19] *** stevan_ joined
[04:38] *** dayangkun left
[04:47] *** skids left
[04:51] *** preflex_ joined
[04:52] *** preflex left
[04:52] *** preflex_ is now known as preflex

[05:04] *** stevan_ left
[05:18] *** kst` is now known as kst

[05:45] *** rindolf joined
[05:46] *** kaleem joined
[05:51] <diakopter> .

[05:52] *** crab2313 joined
[06:09] *** am0c left
[06:14] *** stevan_ joined
[06:19] *** stevan_ left
[06:34] *** hypolin left
[06:36] *** Targen joined
[06:41] *** adu left
[06:49] *** Heather joined
[06:49] <Heather> hi

[06:49] <Heather> tadzik ping

[06:50] *** hypolin joined
[06:50] <Heather> how to specify prefix (or destdir) in panda's bootstrap.pl

[06:51] <tadzik> Heather: pong

[06:51] <tadzik> DESTDIR should work

[06:52] <Heather> tadzik DESTDIR=${D}/usr perl6 bootstrap.pl ?

[06:52] <tadzik> Heather: yeah, should work

[06:53] <Heather> trying

[06:53] <Heather> tadzik because my sandbox don't like when scripts do autoinstalls

[06:53] <tadzik> Heather: I see

[06:54] <tadzik> yeah, you're not the first one to note that, I should take a closer look at this issue

[06:54] <Heather> this way it works ok

[06:54] <tadzik> oh, great

[06:54] <Heather> but let me see where will it be installed )

[06:54] <tadzik> should talk to sjn++ about this again

[06:55] <Heather> install process is beauty :3

[06:55] <Heather> I can install it everyday =_='

[06:57] <tadzik> I'm glad to hear that :)

[06:57] <tadzik> bad news is, if you want to stay up-to-date with Rakudo, you _will_ need to install it every day :P

[06:58] <tadzik> precompiled modules work only on the version on which they were precompiled

[06:58] <Heather> tadzik strange no install for me

[06:59] <tadzik> huh

[06:59] <tadzik> where did it install?

[06:59] <tadzik> (if known)

[07:01] <Heather> tadzik I don't get it ) let me check some more

[07:02] <tadzik> Heather: so, DESTDIR does nothing? Installs to the default location? Doesn't install anywhere?

[07:03] <bonsaikitten> Heather: equery f to the rescue? :)

[07:03] <tadzik> Heather: it worked over here

[07:04] <Heather> bonsaikitten default src_install must just take D files and put in on it's way, right?

[07:04] <tadzik> Heather: https://gist.github.com/tadzik/5132411

[07:06] <Heather> bonsaikitten image is filled

[07:06] <Heather> maybe... I must put this stuff to src_install so it will not override image

[07:06] <Heather> bonsaikitten ^

[07:06] <Heather> ?

[07:07] <Heather> that's logical bit

[07:07] <Heather> I will try

[07:08] <Heather> https://gist.github.com/Cynede/5132425

[07:09] <bonsaikitten> Heather: sense, you make little ;)

[07:09] <Heather> bonsaikitten do you think so?

[07:10] <Heather> bonsaikitten I think portage thinks that when I install stuff in compile process it's not install and just my temp files I put over dist dir

[07:10] <Heather> bonsaikitten am I wrong?

[07:11] <bonsaikitten> quite likely

[07:11] *** xiaoyafeng joined
[07:12] <Heather> yes

[07:12] <Heather> bonsaikitten I am right, above snippet is working

[07:12] <Heather> but it install all the mess

[07:12] *** rindolf left
[07:13] <Heather> tadzik do we really need to have src installed to distdir?

[07:13] <tadzik> Heather: no, you can remove that

[07:13] <Heather> tadzik -_-'

[07:14] <tadzik> actually, just looking at my gist there made me think "I should make it clean up src"

[07:14] <Heather> tadzik yep :)

[07:14] <tadzik> it needs it for building, but it can safely remove it afterwards

[07:14] <Heather> that will fix my ebuild without my actions

[07:14] <tadzik> hmm, you should be able to do that easily

[07:15] <tadzik> rm -rf ${D}/src, or something

[07:15] <Heather> tadzik I can but I prefer keep it wrong before better solution

[07:15] <tadzik> hm

[07:16] <Heather> tadzik I can install it to temp dir in src_install then move stuff to /usr/bin by myself - that will be better

[07:17] <Heather> but I'm lazy to do it for now, knowing that your will change install structure one day

[07:17] <tadzik> hm

[07:17] <bonsaikitten> Heather: better to use makefile install function and then prune unneeded stuff

[07:18] *** xiaoyafeng left
[07:18] <Heather> bonsaikitten why

[07:19] <tadzik> Heather: can you open me a github ticket for that?

[07:19] <tadzik> (getting rid of src, especially during bootstrap)

[07:19] <Heather> tadzik sure

[07:19] <tadzik> (it makes little sense in general, but absolutely zero sense in bootstrap)

[07:19] <tadzik> thanks

[07:20] <bonsaikitten> Heather: if upstream changes the install stuff you don't mess up

[07:20] <bonsaikitten> and once upstream fixes it you just remove one line and tadaah!

[07:21] <Heather> bonsaikitten so you're right here, mostly it's right but I don't feel it right when project is installing it's sources :)

[07:21] <bonsaikitten> Heather: yeah, so prune it

[07:22] <Heather> bonsaikitten wrong

[07:22] <Heather> bonsaikitten better fix it upstream

[07:22] <bonsaikitten> that's the second step

[07:22] <Heather> (if possible) :)

[07:22] <Heather> bonsaikitten so if you like to do useless job then yes :D

[07:23] <bonsaikitten> Heather: so fix it in the makefile, then send patch upstream

[07:23] <Heather> bonsaikitten good way

[07:23] <Heather> agreed

[07:23] <GlitchMr> Just wondering, does Perl 6 have anything like Java generics?

[07:24] *** isomorphisms left
[07:25] <GlitchMr> rn: my Array of Str $what = ['b', 'a'];

[07:25] <p6eval> rakudo 8d510e: OUTPUT«Type check failed in assignment to '$what'; expected 'Array+{TypedArray}' but got 'Array'␤  in block  at /tmp/WskH9opZPU:1␤␤»

[07:25] <p6eval> ..niecza v24-33-gfc6d5fd: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Coercive declarations NYI at /tmp/q0SMYwOrAN line 1:␤------> [32mmy Array of Str[33m⏏[31m $what = ['b', 'a'];[0m␤␤Potential difficulties:␤  $what is declared but not used at /tmp/q0SMYwOrAN line 1:␤------> [32mmy Array …

[07:25] <Heather> tadzik https://github.com/tadzik/panda/issues/35

[07:25] <Ulti> GlitchMr you can have typed arrays http://perlcabal.org/syn/S09.html#Typed_arrays

[07:25] *** rindolf joined
[07:25] *** jaldhar_ joined
[07:26] <GlitchMr> I know I can with @.

[07:26] <GlitchMr> But can I with $?

[07:26] <GlitchMr> Or can I have array of array of str.

[07:26] *** rindolf left
[07:26] <Ulti> you mean can you define the nested type like ArrayList<ArrayList<String>>

[07:26] *** rindolf joined
[07:26] <GlitchMr> > my @arr of Array of Str = ['a', 'b'], ['c', 'd']

[07:26] <GlitchMr> a b c d

[07:27] <GlitchMr> Looks like it sort of works

[07:27] <Ulti> the real question is why would you want to ;)

[07:32] <Heather> bonsaikitten 07<slyfox^w> 01(23:10:20) slyfox: Heather: sorry for a delay. had some silly stuff to do at work. i'll fill a 'new dev' request right now01 \o/

[07:32] <Ulti> in Java that all stemmed from things being stored as Object and having to cast, items keep their type in Perl6 so if you go through a list with say @list>>.^name you get all the types

[07:33] <bonsaikitten> Heather: ah good :)

[07:33] <Ulti> r: my @list = 1, "two", 3; say @list>>.^name;

[07:33] <Heather> tadzik though main trouble is not src install to /usr

[07:33] <p6eval> rakudo 8d510e: OUTPUT«Int Str Int␤»

[07:33] <Heather> tadzik lib is installed in incorrect place

[07:34] <tadzik> oh, hm

[07:35] <tadzik> yeah, /usr/lib/Module-name looks quite imperfect

[07:37] <Ulti> rn: say -1.0.^name

[07:37] <p6eval> niecza v24-33-gfc6d5fd: OUTPUT«Unhandled exception: Cannot parse number: Rat␤  at /home/p6eval/niecza/lib/CORE.setting line 1490 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3606 (ANON @ 10) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3608 (NumSyntax.str2num @ 5) ␤  at …

[07:37] <p6eval> ..rakudo 8d510e: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏Rat' (indicated by ⏏)␤  in method Numeric at src/gen/CORE.setting:10516␤  in sub prefix:<-> at src/gen/CORE.setting:2696␤  in sub prefix:<-> at src/gen/CORE.setting:2696␤  in b…

[07:37] <Ulti> rn: say 1.0.^name

[07:37] <Heather> tadzik no it's just incorrect because it's not searching for them there

[07:37] <p6eval> rakudo 8d510e, niecza v24-33-gfc6d5fd: OUTPUT«Rat␤»

[07:39] <tadzik> Heather: oh, it won't be

[07:39] <tadzik> r: say %*CUSTOM_LIB.perl

[07:39] <p6eval> rakudo 8d510e: OUTPUT«("perl" => "/home/p6eval/nom-inst/lib/parrot/4.10.0-devel/languages/perl6", "vendor" => "/home/p6eval/nom-inst/lib/parrot/4.10.0-devel/languages/perl6/vendor", "site" => "/home/p6eval/nom-inst/lib/parrot/4.10.0-devel/languages/perl6/site", "home" => "/home/p6eval/.…

[07:39] <tadzik> if it's not anywhere in CUSTOM_LIB, rakudo will not find them

[07:39] <Heather> tadzik ?

[07:39] <tadzik> you need to adjust PERL6LIB for that

[07:40] <Heather> tadzik why not put lib to some default place?

[07:40] <Ulti> rn: -1.0.perl

[07:40] <p6eval> rakudo 8d510e, niecza v24-33-gfc6d5fd:  ( no output )

[07:40] <Ulti> rn: say -1.0.perl

[07:40] <p6eval> rakudo 8d510e, niecza v24-33-gfc6d5fd: OUTPUT«-1␤»

[07:40] <Heather> usr/lib/parrot/5.1.0/languages/perl6/site/lib, /usr/lib/parrot/5.1.0/languages/perl6/vendor/lib, /usr/lib/parrot/5.1.0/languages/perl6/lib, /home/nen/.perl6/2013.02/lib

[07:40] *** rindolf left
[07:40] <tadzik> Heather: default like what?

[07:40] <Ulti> wont that give you an Int not a Rat when you exec...

[07:40] <Heather> tadzik above

[07:40] *** nebuchad` is now known as nebuchadnezzar

[07:40] *** rindolf joined
[07:41] <tadzik> Heather: well, of course you can put it there :)

[07:41] <Ulti> rn: say 1.0.perl

[07:41] <p6eval> rakudo 8d510e, niecza v24-33-gfc6d5fd: OUTPUT«1.0␤»

[07:41] <tadzik> bootstrap.pl will try that by default

[07:41] <Ulti> that is weird!!!

[07:41] <Heather> tadzik I think 01usr/lib/parrot/5.1.0/languages/perl6/site/lib, 01 is good location to put :)

[07:42] <tadzik> Heather: that's probably one of the defaults, if not the default :)

[07:42] <Ulti> surely different behaviour for negative and positive numbers is a bug?

[07:42] *** census joined
[07:45] <Heather> tadzik another way is adding /usr/lib to defaults...

[07:46] <Heather> tadzik but I think separating perl libs to another place will be better

[07:48] <tadzik> Heather: maybe it makes sense to install it along with Rakudo

[07:48] <tadzik> to /usr/lib/parrot/somewhere

[07:48] <tadzik> you will need to reinstall it after updating rakudo anyway

[07:49] <moritz> \0

[07:49] <Heather> I see

[07:49] *** rindolf left
[07:50] *** rindolf joined
[07:51] <tadzik> hey moritz 

[07:51] <Heather> tadzik so... and there are to ways. making some wrapper with PERL6LIB=.... panda $@ or adding some path to defaults, personally I like second way more

[07:53] <Heather> another thing... Failed to create directory '/usr/lib/parrot/5.1.0/languages/perl6/site/panda/' with mode '0o777': mkdir failed: Permission denied

[07:54] <masak> morning, #perl6!

[07:54] <tadzik> emerge says that?

[07:54] <tadzik> morning, masak!

[07:54] <Heather> tadzik, not panda says that

[07:54] * masak is teaching Perl 5 today! :)

[07:54] <Heather> masak teach me

[07:54] <masak> Heather: later; these people are paying me. :P

[07:54] <tadzik> Heather: I'd say 1) install to rakudo-recognized location, 2) install it wherever your OS suggests and add PERL6LIB thing to /etc/profile somewhere

[07:54] <tadzik> *G*

[07:56] <tadzik> also: look how Perl 5 does that

[07:56] <tadzik> if you install e.g. Moose on gentoo, it'll end up in /usr/lib/perl5/5.16.2/bla/bla/bla

[07:57] <tadzik> and after you update Perl, there's a perl-updater thing which will rebuild all modules, is that right?

[07:59] <Heather> tadzik never used perl-updater, there is no such thing ) I know only haskell-updater

[07:59] <masak> seriously though; if there were enough interest here on IRC, I would totally do a 1-day Perl 5 IRC workshop, pro bono.

[08:00] <masak> ditto a one-day Perl 6 IRC workshop.

[08:00] <tadzik> Heather: I may be wrong, I didn't use gentoo for some time now

[08:00] *** donaldh left
[08:01] <Heather> tadzik I may be wrong too, I didn't used perl )

[08:01] <vaelxon> (Perl 6 IRC workshop)++

[08:01] *** donaldh joined
[08:01] *** bbkr left
[08:02] <masak> it'd be very awesome, I promise. I'd need some time to prepare. but then we can grab a channel and basically party/learn for a day together.

[08:04] *** rindolf left
[08:04] *** daxim joined
[08:05] *** rindolf joined
[08:06] <vaelxon> it'd be a good way to drum up interest too...e.g. I've not actually written anything in Perl 6 myself, but I lurk here and track its progress over the years...something like an irc workshop might catalyze people like me to start an actual project in perl 6

[08:08] <masak> I'll leave the idea floating in here for a while to see if there's enough interest.

[08:08] <masak> if there is, we can start thinking about a date and more precise contents.

[08:09] <tadzik> I'll attend in that, probably :)

[08:10] <masak> tadzik: I'd have you on the channel, but in the role of amanuensis :)

[08:10] *** brrt joined
[08:11] <tadzik> hum, what will I do? :)

[08:12] *** Ovid joined
[08:12] *** Ovid is now known as Guest63472

[08:13] * masak .oO( what an amanuensis always does: not much ) :P

[08:13] <masak> I dunno, help people with questions sometimes.

[08:13] <tadzik> sure

[08:14] <arnsholt> Amanuensis means something along the lines of assistant, in case you wondered =)

[08:14] <masak> awesome -- we don't know if it'll happen yet, and I already have an amanuensis. :P

[08:14] <masak> tadzik: sign here, here, and... here. :)

[08:15] <tadzik> :P

[08:15] <tadzik> google translate told me that it's "sekretarz"

[08:15] <tadzik> so "the guy who notes down stuff that happened"

[08:15] <masak> arnsholt: sounds like it has something to do with hands.

[08:15] <masak> tadzik: basically, you'll be our log bot.

[08:16] <masak> :P

[08:16] <tadzik> ha :)

[08:17] <arnsholt> Hmm, indeed it does

[08:18] <arnsholt> And a dictionary search confirms it. ab-manus, so from-hand or something like that

[08:18] *** wk left
[08:22] *** rindolf left
[08:22] <daxim> \N{PERSON RAISING BOTH HANDS IN CELEBRATION} is the new \o/

[08:22] *** rindolf joined
[08:44] *** labster left
[08:52] *** SamuraiJack joined
[08:57] *** hoelzro|away is now known as hoelzro

[09:00] <timotimo> good day!

[09:02] *** salv0 joined
[09:02] *** hypolin left
[09:03] *** Maddingu1 is now known as Maddingue

[09:08] <timotimo> it's a good feeling to have done a pull request

[09:09] *** fhelmberger joined
[09:12] <FROGGS__> hi timotimo 

[09:12] <timotimo> FROGGS__: heya. feel like reviewing? ∑:3

[09:14] *** hypolin joined
[09:14] <FROGGS__> hmmm, I could run the spectest, but I cant judge about the part you you are hacking

[09:15] <timotimo> hm, i already ran the spectests, though

[09:15] <FROGGS__> ya, I know that :o)

[09:15] <FROGGS__> so I wont be of any help

[09:16] <timotimo> then feel free to be of other help :P

[09:16] <FROGGS__> *g*

[09:16] <FROGGS__> I am, I'm almost at the point to commit something...

[09:16] <timotimo> i was recently idly thinking about wrapping opengl with zavolaj. shouldn't be terribly hard to expose all the functions just like they are there for C, right?

[09:17] <FROGGS__> timotimo: should be pretty easy (just much to write)

[09:17] <arnsholt> It's been a while since I dealt with OpenGL (and even then it was only briefly), but it should be possible, yeah

[09:17] <timotimo> macros and metaprogramming :)

[09:17] <timotimo> but then i haven't spent any time on learning anything >= 3.0

[09:19] *** dayangkun joined
[09:19] *** donaldh left
[09:19] <timotimo> hm. there no longer is a select function in IO? how do i select an active socket from a list of sockets?

[09:20] <tadzik> you don't. It never worked too well

[09:20] <tadzik> you can try IO::Select

[09:21] <timotimo> i will not end up implementing rc/Chat Server today then :P

[09:21] <masak> arnsholt++ # etymologiensis

[09:21] <tadzik> timotimo: try MuEvent :)

[09:21] *** donaldh joined
[09:21] <timotimo> is that sufficiently acceptable for rosettacode?

[09:22] <tadzik> hmm

[09:24] <moritz> rosettacode examples can use modules, yes

[09:24] *** M_o_C joined
[09:25] * tadzik wonders if it's good to recommend MuEvent to anyone not wearing an adventurer's hat

[09:26] <timotimo> :D

[09:40] <hoelzro> ahoy #perl6

[09:40] *** SamuraiJack left
[09:41] *** SamuraiJack joined
[09:41] *** census left
[09:44] *** grondilu joined
[09:44] <grondilu> rn: say 0 * my Num $x;

[09:44] <p6eval> rakudo 8d510e: OUTPUT«Parameter '' requires an instance, but a type object was passed␤  in method Bridge at src/gen/CORE.setting:3387␤  in sub infix:<*> at src/gen/CORE.setting:3034␤  in block  at /tmp/0BAMQqUFZl:1␤␤»

[09:44] <p6eval> ..niecza v24-33-gfc6d5fd: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/0Pdo5kSlC2 line 1:␤------> [32msay 0 * my Num [33m⏏[31m$x;[0m␤␤0␤»

[09:46] <grondilu> shouldn't 0 * Any return 0 all the time? 

[09:47] <FROGGS__> rn: say my Num $x

[09:47] <p6eval> rakudo 8d510e: OUTPUT«(Num)␤»

[09:47] <p6eval> ..niecza v24-33-gfc6d5fd: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/tkWBENc_QF line 1:␤------> [32msay my Num [33m⏏[31m$x[0m␤␤Num()␤»

[09:47] <FROGGS__> rn: say 0 * Num();

[09:47] <p6eval> niecza v24-33-gfc6d5fd: OUTPUT«Unhandled exception: Unable to resolve method postcircumfix:<( )> in type Num␤  at /tmp/MIQoJmy9DZ line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4285 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4286 (module-CORE @ 581…

[09:47] <p6eval> ..rakudo 8d510e: OUTPUT«0␤»

[09:48] <grondilu> rn: say 0 * my Num $;

[09:48] <p6eval> rakudo 8d510e: OUTPUT«Parameter '' requires an instance, but a type object was passed␤  in method Bridge at src/gen/CORE.setting:3387␤  in sub infix:<*> at src/gen/CORE.setting:3034␤  in block  at /tmp/Mv6Tap8T94:1␤␤»

[09:48] <p6eval> ..niecza v24-33-gfc6d5fd: OUTPUT«0␤»

[09:48] <grondilu> rn: say 0 * Num;

[09:48] <p6eval> niecza v24-33-gfc6d5fd: OUTPUT«0␤»

[09:48] <p6eval> ..rakudo 8d510e: OUTPUT«Parameter '' requires an instance, but a type object was passed␤  in method Bridge at src/gen/CORE.setting:3387␤  in sub infix:<*> at src/gen/CORE.setting:3034␤  in block  at /tmp/Iw4b6L1Yrg:1␤␤»

[09:49] <grondilu> so it does return 0, at least according to Niecza

[09:49] <grondilu> rn: say 0 * Any

[09:49] <p6eval> niecza v24-33-gfc6d5fd: OUTPUT«Use of uninitialized value in numeric context␤  at /home/p6eval/niecza/lib/CORE.setting line 1342 (warn @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 294 (Any.Numeric @ 8) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/JiJVZIykve line 1 (mainli…

[09:49] <p6eval> ..rakudo 8d510e: OUTPUT«use of uninitialized value of type Any in numeric context  in block  at /tmp/XC2MFStrvS:1␤␤0␤»

[09:50] * grondilu needs to read about what 'Any' is exactly

[09:51] <moritz> a type object.

[09:51] <moritz> http://doc.perl6.org/type/Any

[09:52] *** kresike joined
[09:52] <kresike> hello all you happy and/or unhappy perl6 people

[09:53] *** dakkar joined
[09:53] <brrt> hi kresike :-)

[09:53] <brrt> always good to see you

[09:53] <kresike> brrt, o/

[09:54] <kresike> it's nice to lurk here ☺

[09:55] <kresike> one can learn a lot of useful things

[09:55] * brrt thinks #perl6 is usually very educative

[09:56] *** Heather left
[09:57] <hoelzro> so I spent some time over the weekend trying to figure out how bracketing characters are parsed in Rakudo

[09:57] <hoelzro> with limited success =/

[10:01] <hoelzro> I understand that NQP has a giant string with the openers/closers

[10:01] <hoelzro> and rakudo has an opener token

[10:01] <hoelzro> but I'm not clear how Rakudo figured out the closer for its special opener token

[10:03] <timotimo> did you see Grammar.pm:3543ff

[10:03] <timotimo> ?

[10:03] <hoelzro> timotimo: is that HLL::Grammar or Perl6::Grammar?

[10:03] <timotimo> Perl6

[10:03] <timotimo> this "unbalanced" function seems like the ticket

[10:04] <timotimo> er, hold on.

[10:04] <timotimo> that's not helpful!

[10:06] <timotimo> oh, maybe the babble tokes would be helpful

[10:06] *** wk joined
[10:06] <hoelzro> I saw babble, but I'm still trying to parse it out

[10:06] *** felipe joined
[10:06] <timotimo> there's a "peek_delimiters" method on the cursor that seems to return the start and stop thingies

[10:06] <FROGGS__> r: sub circumfix:<{ ]>($contents) { say "$contents!" }; { "OH HAI" ]

[10:06] <p6eval> rakudo 8d510e: OUTPUT«OH HAI!␤»

[10:07] <FROGGS__> hoelzro: I believe it doesnt know about closers to a given opener

[10:07] <hoelzro> FROGGS__: how then does it figure it out?

[10:07] *** hypolin left
[10:07] <FROGGS__> it just takes what you provide when defining withing sym<...>

[10:08] <FROGGS__> within <...>, there is no sym in my example

[10:09] <hoelzro> hmm

[10:09] <timotimo> ah, i found it

[10:09] <hoelzro> so I see token opener { ... } in Rakudo's source

[10:09] <hoelzro> how does that get transformed into sym rules?

[10:09] <timotimo> in NQPHLL the peek_delimiters method is defined

[10:09] <timotimo> it does look at that long list of openers + closers

[10:10] <hoelzro> right, but that's only NQP's list

[10:10] <timotimo> so i think babble is responsible, because it uses that method

[10:10] <timotimo> hm.

[10:11] <FROGGS__> hoelzro: Perl6::Grammar inherits from HLL::Grammar, so the stuff which isnt overwritten is still available in Perl6::Grammar

[10:12] <hoelzro> so NQP's list of bracket chars defines 66 pairings

[10:13] <FROGGS__> hoelzro: and you wanna expand that list?

[10:13] <hoelzro> FROGGS__: well, I noticed that Rakudo has more characters in its openers

[10:13] <hoelzro> so I want to know how the heck it finds the closers!

[10:14] <hoelzro> I'm trying to make the bracket characters that pygments recognizes as legal reflect what's actually legal

[10:14] <FROGGS__> ahh right

[10:15] <FROGGS__> timotimo: do you get spectest failes too?

[10:15] <hoelzro> ok, so I wrote a quick test script; only 66 pairings are legal according to Rakudo

[10:15] <hoelzro> so it seems (at the moment) that token opener { ... } is ignored wrt string bracketing chars?

[10:18] <FROGGS__> hoelzro: to me it looks like token opener is only used for block comments

[10:18] <hoelzro> ah ha

[10:19] <FROGGS__> right, nothing else is using this token (nothing in nqp and nothing in rakudo)

[10:19] <FROGGS__> I just grepped for 'opener'

[10:23] <timotimo> FROGGS__: yeah, a few. environment and configuration and such

[10:23] <timotimo> but they are there on nom, too

[10:23] <timotimo> so i didn't worry about it

[10:24] *** dayangkun left
[10:26] <FROGGS__> timotimo: okay, so not my fault :o)

[10:26] *** anuby left
[10:26] <FROGGS__> but they need to get fixed anyway...

[10:33] <FROGGS__> nr: %*ENV<abc> = 'def'; say %*ENV

[10:33] <p6eval> rakudo 8d510e: OUTPUT«("PERLBREW_VERSION" => "0.42", "MAIL" => "/var/mail/p6eval", "USER" => "p6eval", "SHLVL" => "1", "HOME" => "/home/p6eval", "OLDPWD" => "/home/p6eval", "PERLBREW_ROOT" => "/home/p6eval/perl5/perlbrew", "PERLBREW_MANPATH" => "/home/p6eval/perl5/perlbrew/perls/perl-5.…

[10:33] <p6eval> ..niecza v24-33-gfc6d5fd: OUTPUT«{"HOME" => "/home/p6eval", "LANG" => "en_US.UTF-8", "LD_LIBRARY_PATH" => "/usr/local/mono-2.10.1/lib", "LOGNAME" => "p6eval", "LS_COLORS" => "rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=3…

[10:33] <FROGGS__> nr: %*ENV<abc> = 'def'; say %*ENV.gist ~~ /abc/

[10:33] <p6eval> niecza v24-33-gfc6d5fd: OUTPUT«Use of Nil as a string␤  at /home/p6eval/niecza/lib/CORE.setting line 1342 (warn @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 449 (Nil.Str @ 4) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2870 (Match.gis…

[10:33] <p6eval> ..rakudo 8d510e: OUTPUT«#<failed match>␤»

[10:33] <FROGGS__> nr: %*ENV<abc> = 'def'; say %*ENV.perl ~~ /abc/

[10:33] <p6eval> niecza v24-33-gfc6d5fd: OUTPUT«Use of Nil as a string␤  at /home/p6eval/niecza/lib/CORE.setting line 1342 (warn @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 449 (Nil.Str @ 4) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2870 (Match.gis…

[10:33] <p6eval> ..rakudo 8d510e: OUTPUT«#<failed match>␤»

[10:34] <FROGGS__> nr: %*ENV<abc> = 'def'; say %*ENV<abc>

[10:34] *** donaldh left
[10:34] <p6eval> rakudo 8d510e, niecza v24-33-gfc6d5fd: OUTPUT«def␤»

[10:34] <FROGGS__> hmmm

[10:36] *** xinming left
[10:37] *** xinming joined
[10:39] <FROGGS__> p: %*ENV<abc> = 'def'; say %*ENV.perl ~~ /abc/

[10:39] <p6eval> pugs: OUTPUT«*** Can't modify constant item: VUndef␤    at /tmp/sYwqCYylSn line 1, column 1-19␤       /tmp/sYwqCYylSn line 1, column 1-19␤»

[10:40] <FROGGS__> p: %*ENV<abc> = 'def'; say %*ENV.gist ~~ /abc/

[10:40] <p6eval> pugs: OUTPUT«*** Can't modify constant item: VUndef␤    at /tmp/JfxU3lNEpu line 1, column 1-19␤       /tmp/JfxU3lNEpu line 1, column 1-19␤»

[10:41] <dalek> roast: 9abc448 | (Tobias Leich)++ | S02-magicals/env.t:

[10:41] <dalek> roast: fudge failing tests

[10:41] <dalek> roast: review: https://github.com/perl6/roast/commit/9abc448174

[10:49] <timotimo> hm, can named parameters and positional parameters be mixed in a call signature?

[10:51] <timotimo> why don't i just try?

[10:51] <moritz> why indeed?

[10:51] <colomon> rn: sub f($a, :$b) { say $a + $b; }; f(:b(2), 23)

[10:51] <FROGGS__> timotimo: I think this is working for methods

[10:51] <p6eval> rakudo 8d510e, niecza v24-33-gfc6d5fd: OUTPUT«25␤»

[10:51] <Ulti> how do I create a rakudo ticket? rt.perl.org I can only search by the looks of it

[10:51] <timotimo> Ulti: you can log in with your bitcard account

[10:52] <Ulti> I did

[10:52] <FROGGS__> Ulti: mail to [email@hidden.address]
[10:52] <Ulti> k

[10:52] <timotimo> maybe you've somehow ended up in the read-only view version of rt

[10:52] <Ulti> at least I assume this is a bug..

[10:52] <Ulti> r: say 1.0.perl; say -1.0.perl; say 1.0.^name; say -1.0.^name;

[10:52] <p6eval> rakudo 8d510e: OUTPUT«1.0␤-1␤Rat␤Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏Rat' (indicated by ⏏)␤  in method Numeric at src/gen/CORE.setting:10516␤  in sub prefix:<-> at src/gen/CORE.setting:2696␤  in sub prefix:<-> at src/gen/CORE.setting:…

[10:52] <timotimo> moritz: i'm asking because of the way in junctions the leftmost & would be autothreaded before the leftmost | junction would

[10:53] <moritz> yes, there's a spec ticket for that

[10:53] <timotimo> the current code doesn't prefer & junctions from the named at all.

[10:53] <Ulti> k

[10:53] <moritz> Ulti: not a bug

[10:53] <moritz> it parses as  - (1.0.^name)

[10:53] <moritz> Ulti: so it's the same as  -"Rat"

[10:53] <moritz> r: say -"Rat"

[10:53] <p6eval> rakudo 8d510e: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏Rat' (indicated by ⏏)␤  in method Numeric at src/gen/CORE.setting:10516␤  in sub prefix:<-> at src/gen/CORE.setting:2696␤  in sub prefix:<-> at src/gen/CORE.setting:2696␤  in b…

[10:54] <Ulti> yeah but -1.0.perl is an integer whereas 1.0.perl is a rational too which I'm not sure is quite the same

[10:54] <moritz> 1.0.perl is a Str

[10:54] <moritz> and it happens to be a Str which can convert back to a number

[10:55] <moritz> which is why -1.0.perl "works"

[10:55] <moritz> kinda by accident

[10:55] <Ulti> yeah but the .perl is meant to give you the string which will give you the original value right?

[10:55] <Ulti> for 1.0.perl you get 1/1 for -1.0/perl you dont get -1/1

[10:55] <Ulti> or -(1/1) or whatever it should be

[10:56] <moritz> well, if you want the perl from -1.0, you have to write it as (-1.0).perl

[10:56] <moritz> method calls bind tighter than prefixes

[10:56] <Ulti> right

[10:58] <colomon> rn: say (1.0).perl

[10:58] <p6eval> rakudo 8d510e, niecza v24-33-gfc6d5fd: OUTPUT«1.0␤»

[10:58] <colomon> rn: say (-1.0).perl

[10:58] <p6eval> rakudo 8d510e, niecza v24-33-gfc6d5fd: OUTPUT«-1.0␤»

[11:00] <Ulti> I guess it's a bit of an edge case someone doing that on a literal anyway

[11:00] <Ulti> well apart from I learnt the - isnt part of the literal :)

[11:02] <colomon> it still will happen if you say -$rat.perl

[11:03] <colomon> er.... wait a minute

[11:03] <colomon> rn: say 1.0.perl, -1.0.perl

[11:03] <p6eval> rakudo 8d510e, niecza v24-33-gfc6d5fd: OUTPUT«1.0-1␤»

[11:03] <colomon> rn: say 1.5.perl, -1.5.perl

[11:03] <p6eval> rakudo 8d510e, niecza v24-33-gfc6d5fd: OUTPUT«1.5-1.5␤»

[11:04] <colomon> The problem with getting old is I don't remember why +"1.0" is Int and not Rat

[11:05] <colomon> rn: say (+"1.0").WHAT

[11:05] <p6eval> rakudo 8d510e, niecza v24-33-gfc6d5fd: OUTPUT«(Rat)␤»

[11:05] <colomon> and the answer is it *is* a Rat

[11:05] <colomon> rn: say (-1.0.perl).WHAT

[11:05] <p6eval> rakudo 8d510e, niecza v24-33-gfc6d5fd: OUTPUT«(Rat)␤»

[11:06] <colomon> rn: say -1.0

[11:06] <p6eval> rakudo 8d510e, niecza v24-33-gfc6d5fd: OUTPUT«-1␤»

[11:06] <timotimo> doesn't mean you're not getting old though :)

[11:06] <colomon> Ulti: so the real answer here is that -1.0.perl already does exactly what you want

[11:07] <Ulti> no it really doesnt

[11:07] <Ulti> if you are serialising something you will get back the wrong type

[11:07] <timotimo> oh, you would like 1.0 to perl not as 1 but as 1.0?

[11:07] <Ulti> yeah

[11:08] <moritz> r: say 1.0.perl

[11:08] <p6eval> rakudo 8d510e: OUTPUT«1.0␤»

[11:08] <moritz> looks right to me

[11:08] * moritz still doesn't understand what the problem is

[11:08] <Ulti> if 1.0 goes to 1/1 why does -1.0 go to -1 is what I was a bit shocked about not anything else

[11:08] <moritz> r: say (-1.0).perl

[11:08] <p6eval> rakudo 8d510e: OUTPUT«-1.0␤»

[11:08] <Ulti> I understand why its happening, but its not exactly ideal that it does

[11:08] <colomon> ah, I see.

[11:08] <moritz> Ulti: your only problem is that you expect a difference precedence than you actually get

[11:09] <colomon> again, the problem is that you're asking for -(1.0.perl)

[11:09] <Ulti> its only literals though

[11:09] <moritz> Ulti: precedence, not literals

[11:09] <Ulti> like $var.perl which holds -1.0 will give you -1/1

[11:09] <colomon> -$x.perl will do the same thing

[11:09] <Ulti> moritz: and that the - is an operator at all

[11:09] <colomon> Ulti: no it won't.  it will give you -1.0

[11:10] <colomon> rn: my $x = -1.0; say $x.perl

[11:10] <p6eval> rakudo 8d510e, niecza v24-33-gfc6d5fd: OUTPUT«-1.0␤»

[11:10] <Ulti> colomon: you stringafied that though

[11:10] <colomon> no, .perl stringified it

[11:10] <Ulti> ok this must be me in the repl then

[11:11] <Ulti> there is different behaviour from say and from letting the repl print something

[11:11] <colomon> Ulti: possibly you have an older Rakudo?  

[11:11] <Ulti> well its this months R* so yeah its old by this channels standards :D

[11:11] <timotimo> :)

[11:12] <Ulti> anyway you guys know what I'm talking about, which was all I was worried about

[11:12] <colomon> Ulti: yes, applying prefix:<-> to a string will not give you a string back.

[11:12] <Ulti> I'm the drivelling idiot just telling you the morons perspective, but we are legion!

[11:13] <colomon> Ulti: last month's R* is probably old enough to get it wrong

[11:23] *** crab2313 left
[11:23] *** PerlPilot joined
[11:23] *** robinsmidsrod left
[11:25] <FROGGS__> git bisect is cool, btw

[11:27] <Juerd> It is.

[11:29] <Ulti> thanks for the protip, "git bisect run" looks very helpful

[11:30] <hoelzro> "constant %open2close"

[11:30] <hoelzro> yay!

[11:30] <FROGGS__> I'm currently trying to hunt a spectest fail down this way...

[11:30] <FROGGS__> hoelzro: ?

[11:30] *** FROGGS__ is now known as FROGGS

[11:30] *** robinsmidsrod joined
[11:30] <hoelzro> I found what STD uses for opener/closer parsing

[11:32] <hoelzro> did I mention that STD accepts a *lot* more bracketing chars than Rakudo?

[11:33] <hoelzro> if I'm figuring this correctly, nothing in token opener (in Rakudo) is accepted as a string opener

[11:33] <hoelzro> lunch &

[11:33] <FROGGS> hmmm, we might should adopt STD's way

[11:38] *** brrt left
[11:42] <FROGGS> phenny: tell jnthn that https://github.com/rakudo/rakudo/commit/4e84ff715da0306299c1937d37fd00aa3adc71ad is breaking t/spec/S26-documentation/09-configuration.t

[11:42] <FROGGS> damn

[11:45] <moritz> ENOphenny

[11:45] <rindolf> Hi all.

[11:45] <rindolf> FROGGS , moritz , hoelzro , Juerd : hello! What's new?

[11:46] <moritz> everything with a new enough timestamp

[11:48] <FROGGS> rindolf: nothing

[11:49] <rindolf> moritz: heh.

[11:49] <FROGGS> I assume rindolf doesnt meant -Inf :o)

[11:49] <timotimo> moritz: feel like reviewing/merging https://github.com/rakudo/rakudo/pull/113 ? froggs and me both spectested it :)

[11:50] * rindolf unleashes his inner Sarah Michelle Gellar to kiss moritz for his inventive avoidance of saying what he is up to.

[11:50] <FROGGS> timotimo: err no, I said I could spectest it ó.ò

[11:50] <moritz> timotimo: sorry, I don't feel like doing anything right now, except making snarky comments on IRC

[11:50] <rindolf> FROGGS: I'm old enough to remember the invention of the Camel.

[11:50] *** birdwindupbird joined
[11:50] <FROGGS> rindolf: well, if you want to know what we are up to you may ask that

[11:50] <timotimo> moritz: that's quite all right :P

[11:51] <rindolf> FROGGS: “When I was your age, Jennifer Lawrence was called Sara Behranrt”

[11:51] <timotimo> FROGGS: oops. :)

[11:51] <FROGGS> I'm still working of my NFA-patch for interpolation of vars in regexes for example

[11:51] <rindolf> FROGGS: moritz will always find a way to avoid it.

[11:51] <tadzik> FROGGS: oh, I may know why it does break tests

[11:51] <rindolf> FROGGS: unless threatened.

[11:51] *** xinming left
[11:51] <rindolf> FROGGS: or sweet talked.

[11:52] <tadzik> I think Pod configuration is digging in <colonpair> internals, which changed

[11:52] <FROGGS> and today is my first day off, and on wednessday starts the german perl workshop, so still stuff to prepare

[11:52] <rindolf> FROGGS: nice.

[11:52] <rindolf> FROGGS: prepare hard! Enjoy hard! Rest hard!

[11:53] <FROGGS> tadzik: ahh cool, do you think you have time to look at that? otherwise you might supply enough information to let others fix it :o)

[11:53] <rindolf> Step 4: profit hard!

[11:53] *** xinming joined
[11:53] <rindolf> Step 5: retire hard!

[11:53] <timotimo> Step 6: die hard!

[11:53] <rindolf> timotimo: LOL.

[11:53] <masak> Step 3: ??? hard!

[11:53] <tadzik> FROGGS: I should be able to fix that today

[11:54] <rindolf> timotimo: did you see Die Hard 5 yet?

[11:54] <timotimo> no, but i have also missed the one with the hacker

[11:54] <timotimo> i mean to see both some time in the not too distant future

[11:55] <tadzik> the one with the hacker was a bit weak, imo

[11:55] <rindolf> tadzik: so I was told.

[11:55] <rindolf> I saw the first three Die Hards.

[11:55] <tadzik> it's feels a bit like Transformers

[11:55] <rindolf> Good stuff.

[11:55] <tadzik> young nerdy superhero, pretty girl

[11:55] <tadzik> cars flying, even

[11:55] <rindolf> Ah.

[11:56] <timotimo> well, i just recently watched Far Cry and Doom with a friend of mine for fun, so i guess i can get into the right mindset to enjoy Die Hard 4.0

[11:56] <rindolf> OK, if you don't fail, you don't succeed either.

[11:56] <rindolf> 4.0 here.

[11:56] <tadzik> I thought you play Doom and Far Cry

[11:56] <rindolf> 4.1

[11:56] <rindolf> 4.0 heh.

[11:56] <timotimo> tadzik: Uwe Boll decided, that playing Far Cry isn't enough and told Til Schweiger to play it, too.

[11:56] <tadzik> Doom had pretty good soundtrack

[11:56] <rindolf> tadzik: Doom the movie?

[11:56] <tadzik> Doom the game

[11:56] <rindolf> tadzik: ah.

[11:57] <tadzik> it's the first time I hear of the movie

[11:57] <rindolf> tadzik: the original?

[11:57] <rindolf> tadzik: didn't know there was a movie.

[11:57] <timotimo> doom the movie also has doom-ish music going on, which i liked.

[11:57] <timotimo> doom the movie also has color coded door frames and the BFG and mars

[11:57] *** Heather joined
[11:57] <Heather> tadzik https://github.com/tadzik/perl6-File-Tools/issues/6

[11:57] <rindolf> timotimo: OK.

[11:57] <tadzik> https://www.youtube.com/watch?feature=player_detailpage&v=cixW6rogZ48#t=1792s is even my ringtone :)

[11:58] <rindolf> http://www.youtube.com/watch?v=LHY8NKj3RKs - Minesweeper the Movie.

[11:58] <tadzik> half of that soundtrack is inspired by old heavy metal

[11:58] <rindolf> Just a trailer, though.

[11:58] <timotimo> if you get a decent soundfont, it also sounds like heavy metal.

[11:58] <timotimo> (or so i'm told)

[11:58] <rindolf> I wonder what Freecell the movie will be like.

[11:59] <tadzik> Heather: I don't get it

[11:59] <timotimo> didn't you hear about Battleships the movie?

[11:59] <tadzik> there's no code, there's no directory tree to test it on

[11:59] *** xinming left
[11:59] <rindolf> Heather: maybe try creating a more meaningful example.

[12:00] <timotimo> is ".map({ .Str })" and ">>.Str" functionally the same?

[12:00] <Heather> rindolf ok

[12:01] <rindolf> Heather: I mean somethign simple and self-contained. A test case.

[12:01] *** xinming joined
[12:01] * rindolf conditions Heather to fear and respect the escalator.

[12:02] <tadzik> timotimo: I don't think » guarantees ordering

[12:02] <timotimo> ah, that's good to know.

[12:03] <timotimo> ah, but .each.Str would guarantee ordering

[12:03] <timotimo> r: <foo bar baz quux dog cat horse>.each.uc.say

[12:03] <p6eval> rakudo 8d510e: OUTPUT«No such method 'each' for invocant of type 'Parcel'␤  in block  at /tmp/ELAzx24gg3:1␤␤»

[12:03] <timotimo> well, seems like each is NYI

[12:04] <timotimo> i suppose that's what "conjectural" means

[12:05] *** brrt joined
[12:07] *** birdwindupbird left
[12:08] <dalek> perl6-examples: c78caa8 | (L. Grondin)++ | rosalind/fibd-grondilu.pl:

[12:08] <dalek> perl6-examples: [rosalind] FIBD

[12:08] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/c78caa80f0

[12:10] *** M_o_C left
[12:10] <hoelzro> I'm guessing token opener was just lifted from STD.pm?

[12:10] <hoelzro> (to Rakudo)

[12:14] *** SmokeMachine joined
[12:15] <Heather> tadzik https://github.com/tadzik/perl6-File-Tools/issues/6

[12:15] *** kaleem left
[12:15] <tadzik> Heather: ooh, now I see it. Good catch

[12:15] <Heather> wow...

[12:16] <Heather> I were speaking about it for 2 days :D

[12:16] <tadzik> and demonstrating it in the way I did not understand ;)

[12:16] <tadzik> so, how would you fix it? :)

[12:18] <Heather> tadzik with File:Basename ?

[12:18] <Heather> tadzik http://cpansearch.perl.org/src/AUTRIJUS/Perl6-Pugs-6.0.13/modules/File-Basename/lib/File/Basename.pm

[12:18] <Heather> tadzik but I don't know if there could be easier ways

[12:19] <moritz> if $path.path.d { for find ... } else { unlink $path }

[12:21] <Heather> moritz else rm_f will be better

[12:21] <tadzik> Heather: so, you can now update the pull request with the fix for the test :)

[12:22] <tadzik> ++Heather :)

[12:22] <tadzik> but yeah, as moritz++ says, .path.d will do

[12:23] <Heather> spaces in this file, right? -_-'

[12:23] <Heather> I'm asking because another one is tabs )

[12:24] <tadzik> hmm

[12:24] <tadzik> spaces, no matter what :)

[12:24] <tadzik> they should both be spaces anyway

[12:25] <hoelzro> so...shouldn't Rakudo override peek_delimiters to use its own notion of delimiters?

[12:25] <Heather> my emacs setup mode for editing perl set up on tabs -_-' another todo stuff

[12:25] * hoelzro thinks this may actually be something he could help with

[12:29] <FROGGS> if the set of delims is different for nqp and rakudo, rakudo should override it, yes

[12:30] <Heather> tadzik https://github.com/Cynede/perl6-File-Tools/commit/2ea32e4d2bc4e82e72955bd592ca6101c9224c60

[12:30] <Heather> https://github.com/tadzik/perl6-File-Tools/pull/7

[12:31] <tadzik> Heather: so, why not rm_f rather than unlink? :)

[12:31] <tadzik> well, it's the same thing anyway

[12:31] <Heather> tadzik no

[12:31] <Heather> tadzik there is list in rm_f

[12:31] <Heather> in input

[12:31] <tadzik> oh, it's a slurpy list

[12:31] <Heather> sub rm_f(*@files)

[12:32] <tadzik> r: sub slurpy(*@a) { say @a.perl }; slurpy 'hey'; slurpy 'hey', 'ho';

[12:32] <p6eval> rakudo 8d510e: OUTPUT«Array.new("hey")␤Array.new("hey", "ho")␤»

[12:34] <tadzik> Heather: thanks, I'll merge that soonish :)

[12:34] <Heather> thanks.

[12:34] *** mavcunha left
[12:34] <Heather> tadzik but that doesn't fix my personal trouble :S

[12:35] <tadzik> which is?

[12:35] <Heather> tadzik I need to get fullpath into find

[12:35] <Heather> want to...

[12:35] <Heather> maybe I just don't need it ...

[12:37] *** LlamaRider joined
[12:47] *** Heather left
[12:55] <masak> surely there must be a way to get the full path from find?

[12:55] <masak> what does it give now? a relative path?

[12:55] <tadzik> nope

[12:56] <tadzik> star: use File::Find; find(.)[0].perl.say

[12:56] <FROGGS> an exception on success? :P

[12:56] <p6eval> star 2013.02: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of . to concatenate strings; in Perl 6 please use ~␤at /tmp/meEncyKbF2:1␤------> [32muse File::Find; find(.)[33m⏏[31m[0].perl.say[0m␤»

[12:56] <tadzik> oops

[12:56] *** Rix left
[12:56] <tadzik> star: use File::Find; find('.')[0].perl.say

[12:56] <FROGGS> haha

[12:56] <p6eval> star 2013.02: OUTPUT«Required named parameter 'dir' not passed␤  in sub find at /home/p6eval/star/lib/parrot/4.10.0/languages/perl6/lib/File/Find.pm:47␤  in block  at /tmp/SWTEqcLTL3:1␤␤»

[12:56] <tadzik> star: use File::Find; find(dir => '.')[0].perl.say

[12:56] <p6eval> star 2013.02: OUTPUT«File::Find::Result.new(dir => ".", name => "src")␤»

[12:56] <tadzik> yep, this

[12:56] <tadzik> stringified it returns a full path

[12:57] <FROGGS> star: use File::Find; say ~find(dir => '.')[0]

[12:57] <p6eval> star 2013.02: OUTPUT«./src␤»

[12:57] <FROGGS> relative

[12:57] *** crab2313 joined
[12:57] <masak> only because we passed in a relative path.

[12:57] <masak> that sounds fair to me.

[12:57] <tadzik> sure

[12:58] <masak> GIGO. feature, not bug. NEXT!

[12:58] <masak> :P

[12:58] <FROGGS> star: use File::Find; use File::Spec; say rel2abs( ~find(dir => '.')[0] )

[12:58] <p6eval> star 2013.02: OUTPUT«===SORRY!===␤Could not find File::Spec in any of: /home/p6eval/star/lib/parrot/4.10.0/languages/perl6/site/lib, /home/p6eval/star/lib/parrot/4.10.0/languages/perl6/vendor/lib, /home/p6eval/star/lib/parrot/4.10.0/languages/perl6/lib, /home/p6eval/.perl6/2013.02.1/lib…

[12:58] <FROGGS> aww

[12:59] <FROGGS> star: use File::Find; use File::Spec; say File::Spec.rel2abs( ~find(dir => '.')[0] ) # this should work IMO

[12:59] <p6eval> star 2013.02: OUTPUT«===SORRY!===␤Could not find File::Spec in any of: /home/p6eval/star/lib/parrot/4.10.0/languages/perl6/site/lib, /home/p6eval/star/lib/parrot/4.10.0/languages/perl6/vendor/lib, /home/p6eval/star/lib/parrot/4.10.0/languages/perl6/lib, /home/p6eval/.perl6/2013.02.1/lib…

[12:59] <FROGGS> locally

[12:59] * FROGGS draws a sign "File::Spec into R*!"

[13:02] <FROGGS> and we need module tests...

[13:05] <masak> +1

[13:13] *** mavcunha joined
[13:16] *** SamuraiJack left
[13:19] *** REPLeffect left
[13:19] *** araujo left
[13:28] *** araujo joined
[13:28] *** bluescreen10 joined
[13:31] *** renormalist joined
[13:39] *** stevan_ joined
[13:42] *** Targen left
[13:44] *** odoacre left
[13:45] *** skids joined
[13:51] *** PerlPilot is now known as PerlJam

[13:56] *** census joined
[14:01] *** odoacre joined
[14:01] *** isomorphisms joined
[14:04] *** Targen joined
[14:09] *** yoleaux left
[14:09] *** yoleaux joined
[14:14] *** tokuhiro_ joined
[14:17] * masak drops a well-tuned pin

[14:19] * moritz puts the pin into a rail gun and accelerates it to mach 5

[14:20] *** Rix joined
[14:20] <masak> o.O

[14:20] <masak> that was *my pin*! :P

[14:21] <arnsholt> moritz: What about rail gun fired ravioli? =D

[14:21] <moritz> masak: you can have it back... if you can catch it :-)

[14:21] <moritz> arnsholt: those don't conduct well enough for my equipment

[14:22] <arnsholt> Probably. There's a neat newsgroup post on the subject though: http://www.mit.edu/people/daveg/Humor/ravioli_as_gas

[14:22] *** Psyche^ joined
[14:23] *** PacoAir joined
[14:24] *** stevan_ left
[14:24] *** PacoAir left
[14:24] *** PacoAir joined
[14:26] *** Patterner left
[14:26] *** Psyche^ is now known as Patterner

[14:29] *** colomon joined
[14:29] *** stevan_ joined
[14:30] <Ulti> so I just tried using the HTML::Strip module, it takes it like five minutes and several hundred MB of RAM to strip out the HTML, this takes less than a second $html.subst(/\<<-[>]>+\>/, :g, '') what's the huge penalty of a full grammar/action over a regex?

[14:31] *** ilogger2 joined
[14:31] *** ChanServ sets mode: +v ilogger2

[14:31] *** djanatyn joined
[14:32] *** ivan`` joined
[14:35] <moritz> Ulti: well yes, parsing everythinig is much slower than searching for tiny bits, and removing them

[14:42] <Ulti> but in theory is the regex syntax still firing up similar machinery as a grammar behind the scenes? Or is the actual implementation quite different?

[14:43] <moritz> it's the same

[14:44] *** eiro left
[14:44] <arnsholt> Subrules involve method calls though, so we might get screwed by Parrots invocation overhead

[14:44] <Ulti> k k, might be I can look at this grammar and speed it up then... since I want a reason to try out the grammar debugger :D

[14:44] <arnsholt> Might be worth trying to get a Perl-level profile and check it out with kcachegrind

[14:48] <dalek> rakudo/nom: d24caa0 | (Tobias Leich)++ | src/core/Cursor.pm:

[14:48] <dalek> rakudo/nom: use an NFA to sort out listy things

[14:48] <dalek> rakudo/nom: 

[14:48] <dalek> rakudo/nom: This also fixes RT #117091, so :ignorecase is respected in assertions too.

[14:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d24caa0146

[14:53] <moritz> FROGGS++ # IN UR REGEX ENGINE, MATCHING OUR STRINGS

[14:53] *** kaare__ joined
[14:57] *** FROGGS[mobile] joined
[14:58] <hoelzro> is rakudo.org's source available anywhere?

[14:58] <hoelzro> I see a reference to http://github.com/rakudo/rakudo/downloads, but I'm pretty sure that's invalid now

[14:59] <moritz> it's a wordpress site

[15:00] <arnsholt> jnthn: There's a snag with the new sized int stuff and how we've said Zavolaj should work

[15:01] <hoelzro> could someone change the download link on http://rakudo.org/how-to-get-rakudo/, then?

[15:01] <hoelzro> 2013 tarballs for Rakudo are not available via the GH link

[15:01] <arnsholt> An int with no size specification should correspond to the C int, but in P6int no size means it gets sizeof(INTVAL), which is 8 bytes on x64 at least while int is 4

[15:01] <arnsholt> Any thoughts on how to best cope?

[15:03] <arnsholt> We could set it to sizeof(int) if nothing else is specified, but that means also silently truncating all bare native ints to 32 bits, which feels a bit yucky (and possibly not what the spec mandates)

[15:05] <diakopter> malloc(sizeof(yourmom)); // EOUTOFMEMORY

[15:05] <moritz> hoelzro: I've tried to fix http://rakudo.org/how-to-get-rakudo/

[15:05] <moritz> though the instructions for the snapshots might still be out of date

[15:06] <hoelzro> I'll try it out later

[15:06] <hoelzro> thanks for fixing it!

[15:06] <pmichaud> good morning, #perl6

[15:07] <moritz> good am, pm

[15:08] <colomon> \o

[15:15] <diakopter> can anyone recommend or disrecommend digitalocean?

[15:16] <pmichaud> re:  d24caa0    ...   what is meant by "This also fixes RT #117091"?   I rejected that ticket last night as being incorrect.

[15:18] *** cognominal joined
[15:24] <raiph> hi #perl6. would it be reasonable to say that the rakudo compiler understands no syntax; the Perl 6 grammar defines a base syntax; setting(s) may (and to a small degree do) expand that; modules may expand that; and the user may expand that?

[15:24] <pmichaud> raiph: I don't tend to think "compiler understands no syntax", no.

[15:25] <pmichaud> the compiler knows a fair bit about syntax.

[15:25] *** domidumont joined
[15:25] <moritz> raiph: the grammar is part of the compiler

[15:25] <pmichaud> r: say 'hello'

[15:25] <p6eval> rakudo d24caa: OUTPUT«hello␤»

[15:26] <moritz> it's a bit like saying "humans don't understand math" because it's the human's brain that understand math

[15:26] <moritz> and not the human directly

[15:26] <pmichaud> r:  my $rex = 'rex';  say 'Rex' ~~ m:i/ <$rex> /;

[15:26] <p6eval> rakudo d24caa: OUTPUT«｢Rex｣␤␤»

[15:26] <pmichaud> That's a bug, as I read S05.

[15:26] <raiph> thx for answers. gotta run for a few minutes. will backlog.

[15:27] <moritz> r: my $rex = 'r.x';  say 'Rex' ~~ m:i/ <$rex> /;

[15:27] <p6eval> rakudo d24caa: OUTPUT«｢Rex｣␤␤»

[15:27] <[Coke]> rakudo has 3 days of failures in a row; next run kicking off in about 30m.

[15:27] <moritz> how would I make it compile a regex case-insensitively if not like this?

[15:28] <pmichaud> moritz: I don't know.  But S05 says that subrule calls don't inherit the case-insensitivity of the dynamic scope.

[15:28] <pmichaud> one could always do:

[15:28] <pmichaud> r: my $rex =':i r.x';  say 'Rex' ~~ m/ <$rex> /;

[15:28] <p6eval> rakudo d24caa: OUTPUT«｢Rex｣␤␤»

[15:29] <moritz> pmichaud: well, I'd expect it to to be a feature of compiling $rex in case-insenstive lexical scope

[15:29] <moritz> not of calling it

[15:30] *** happydude joined
[15:31] <colomon> n: my $rex ='r.x';  say 'Rex' ~~ m/ <$rex> /;

[15:31] <p6eval> niecza v24-33-gfc6d5fd: OUTPUT«False␤»

[15:31] <colomon> n: my $rex ='r.x';  say 'Rex' ~~ m:i/ <$rex> /;

[15:31] <p6eval> niecza v24-33-gfc6d5fd: OUTPUT«False␤»

[15:31] <pmichaud> S05:677  In general, a modifier that affects the compilation of a regex (like C<:i>)

[15:31] <pmichaud> must be known at compile time.

[15:31] <pmichaud> I suppose that could be interpreted either way.

[15:31] <diakopter> pmichaud: ok, but since it's compiled (I see it as eval("")) in that scope it makes sense to inherit it, to me

[15:33] <pmichaud> S05:1303 clarifies it.

[15:33] <pmichaud> and thus yes, the current interpretation is correct.

[15:33] <pmichaud> S05:1303:  All string values pay attention to the current C<:ignorecase>

[15:33] <pmichaud> and C<:ignoremark> settings, while C<Regex> values use their own

[15:33] <pmichaud> C<:ignorecase> and C<:ignoremark> settings.

[15:33] <pmichaud> since $rex is a string value, I think it's okay to say it pays attention to :i

[15:34] <pmichaud> r: my $x = 'rex';  say 'Rex' ~~ /:i <$rex> /

[15:34] <p6eval> rakudo d24caa: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable '$rex' is not declared␤at /tmp/QOjkMUQhXh:1␤------> [32my $x = 'rex';  say 'Rex' ~~ /:i <$rex> /[33m⏏[31m<EOL>[0m␤    expecting any of:␤        postfix␤»

[15:34] <pmichaud> r: my $x = 'rex';  say 'Rex' ~~ /:i <$x> /

[15:34] <p6eval> rakudo d24caa: OUTPUT«｢Rex｣␤␤»

[15:35] *** SunilJoshi joined
[15:35] <pmichaud> r: my $x = 'x';  my $rex = 'r e $x'; say 'Rex' ~~ /:i <$rex> /

[15:35] <p6eval> rakudo d24caa: OUTPUT«#<failed match>␤»

[15:36] <pmichaud> r: my $y = 'x';  my $rex = 'r e $y'; say 'Rex' ~~ /:i <$rex> /

[15:36] <p6eval> rakudo d24caa: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable '$y' is not declared␤at eval_0:1␤------> [32mmy $x = anon regex {:i ^r e $y[33m⏏[31m }[0m␤»

[15:36] <pmichaud> That's two bugs.

[15:36] <diakopter> heh

[15:37] <diakopter> nice finds

[15:37] <pmichaud> it's the cost of trying to use eval() here.

[15:37] <pmichaud> and not doing it as an anonymous regex.

[15:38] <pmichaud> FROGGS, masak: ^^^^

[15:38] <diakopter> r: my $rex = '{die}'; say 'Rex' ~~ /:i <$rex> /

[15:38] <p6eval> rakudo d24caa: OUTPUT«␤  in regex  at eval_0:1␤  in method ACCEPTS at src/gen/CORE.setting:10862␤  in block  at src/gen/CORE.setting:10774␤  in method reify at src/gen/CORE.setting:5591␤  in method reify at src/gen/CORE.setting:5492␤  in method gimme at src/gen/CORE.setting:5882␤  in me…

[15:39] <diakopter> I can't decide whether that should be caught

[15:41] *** domidumont left
[15:42] *** domidumont joined
[15:42] <hoelzro> interesting: error:imcc:loadlib directive could not find library `nqp_group'

[15:43] <hoelzro> (trying to build NQP on my VPS)

[15:43] *** cognominal left
[15:45] *** woolfy joined
[15:50] *** cognominal joined
[15:52] <FROGGS> pmichaud: will check it in a bit...

[15:59] *** eiro joined
[16:07] <kresike> bye folks

[16:08] *** TimToady joined
[16:13] *** FROGGS joined
[16:18] *** domidumont left
[16:19] *** telex joined
[16:22] *** FROGGS[mobile] left
[16:26] *** arlinius joined
[16:28] <FROGGS> pmichaud: btw, I havn't seen that you rejected the ticket, because I have the tab open for days :/

[16:28] <FROGGS> and I got no mail, even if I was the owner... might be configured to not do that

[16:30] <FROGGS> pmichaud: I believe I fixed it... I'm running spectest right now and will push then, would be cool if you have time to review

[16:34] <hoelzro> ah, I think I figured it out.

[16:35] <hoelzro> got it!

[16:35] <FROGGS> \o/

[16:36] <hoelzro> nqp doesn't like being built on a noexec-mounted FS =)

[16:36] <FROGGS> hehe

[16:36] <hoelzro> nor does Parrot, for that matter

[16:36] <hoelzro> but the error was *much* more obvious on Parrot

[16:38] * FROGGS .oO( cigarette? )

[16:40] *** SamuraiJack joined
[16:40] *** diakopter joined
[16:42] *** am0c joined
[16:43] *** am0c left
[16:44] *** am0c joined
[16:52] *** Chillance joined
[16:59] <jnthn> evening o/

[17:00] <moritz> \o

[17:03] <colomon> o/

[17:12] *** eiro left
[17:13] *** am0c left
[17:14] *** am0c joined
[17:22] <hoelzro> damn, it seems my VPS runs out of memory trying to build Rakudo =(

[17:25] *** ElDiabolo joined
[17:26] <geekosaur> I think compilingt he setting is known to take a lot of memory? (Are we still working around a gc issue in parrot?)

[17:27] *** bluescreen100 joined
[17:30] *** ElDiabolo left
[17:30] <tadzik> Heather++ # active contributor

[17:36] *** ElDiabolo joined
[17:37] *** toebu joined
[17:41] *** stevan_ joined
[17:44] <dalek> panda: deb3354 | tadzik++ | bootstrap.pl:

[17:44] <dalek> panda: Remove src after bootstraping, it's of no use

[17:44] <dalek> panda: review: https://github.com/tadzik/panda/commit/deb3354b97

[17:54] *** FROGGS left
[17:55] *** FROGGS joined
[17:57] <[Coke]> urk. I did a git push in the roast data repository, but might have ^c'd the push. now it shows modified files and no commit to have pushed.

[17:58] <moritz> sounds more like you interrupted the commit, not the push

[17:58] <moritz> or you did a git reset afterwards

[17:59] <[Coke]> not intentionally... but now I see that the thing that would have generated the automated commit is still running... I will chalk this up to "I was confused before I started typing" and come back later. ;)

[18:01] * moritz wonders if 'git reset' and a few other commands need a "think before you type" warning a la sudo

[18:01] *** colomon joined
[18:12] <timotimo> moritz: i think they should do "'git add' and 'save away hashes' before delete"

[18:12] <timotimo> so, essentially, stash before reset

[18:13] <jnthn> It's only reset --hard that is especially dangerous.

[18:13] <timotimo> reset --hard is basically the only reset i ever use :D

[18:17] <moritz> alias 'screw that'='git reset --hard origin/master'

[18:19] <jnthn> :D

[18:21] * moritz doesn't think that shell aliases may contain whitespace

[18:21] <timotimo> alias 'scratch that'='git stash'?

[18:21] <moritz> bash: alias: `screw that': invalid alias name

[18:21] <timotimo> zsh does it

[18:22] <timotimo> but it then says "screw: command not found" when i try to invoke it without quotes or anything

[18:22] <timotimo> doesn't work with quotes either? strange.

[18:23] <timotimo> how impolite is it to passively mention a pull request you'd like to have merged if you're pretty sure it's all right to be merged, like this one: https://github.com/rakudo/rakudo/pull/113 ?

[18:24] *** spider-mario joined
[18:24] *** fgomez joined
[18:27] <tadzik> it's not

[18:27] <tadzik> nag conpentent people until they review it

[18:28] * [Coke] finds a petition on whitehouse.gov to eliminate DST. (or, more specifically, the changes. Pick one or 'tother.)

[18:28] <tadzik> I can say that, because I'm not competent :P

[18:28] <timotimo> :D

[18:28] <timotimo> i'm barely competent enough to even do pull requests! ;)

[18:33] <jnthn> What is a pull request? :D

[18:33] *** bluescreen100 left
[18:39] <dalek> rakudo/nom: d4e55d0 | (Timo Paulssen)++ | src/core/Junction.pm:

[18:39] <dalek> rakudo/nom: autothread all or none before any or one.

[18:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d4e55d0b52

[18:39] <dalek> rakudo/nom: 77335dc | jonathan++ | src/core/Junction.pm:

[18:39] <dalek> rakudo/nom: Merge pull request #113 from timo/autothread_order

[18:39] <dalek> rakudo/nom: 

[18:39] <dalek> rakudo/nom: autothread all or none before any or one.

[18:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/77335dc005

[18:40] <arnsholt> jnthn: Did you see the latest Zavolaj-bug?

[18:40] <arnsholt> I think that's a legitimate NQP issue, really

[18:41] <jnthn> This is "what does int mean"?

[18:41] <arnsholt> Yeah

[18:42] <arnsholt> In the Zavolaj docs we claim it means C int, but when a P6int REPR doesn't get a size specified we sort of want it to be INTVAL

[18:42] <arnsholt> Which isn't the same as int =/

[18:43] <timotimo> oh yay :D

[18:44] <jnthn> arnsholt: Indeed...

[18:45] <arnsholt> And the way P6int works now, we'll silently truncate to 32-bit ints if we make it default to int size

[18:45] <jnthn> We maybe shouldn't make such claims in Zavolaj's docs... :)

[18:46] <arnsholt> Well, that's one way to solve it

[18:46] <jnthn> The main thing is we have *a* way to specify sizes, and a way to be ambivalent.

[18:46] <jnthn> I'd lean towards making Zavolaj give type names their Perl 6 meanings, not C ones...

[18:47] <jnthn> Which suggests in wants to mean what it means in Perl 6

[18:47] <jnthn> And if you mean 32-bit, say int32

[18:47] <arnsholt> Yeah

[18:47] <arnsholt> But many libs simply have their sigs as "int", with no explicit size info

[18:47] <arnsholt> I think we want to allow a NativeCall binding to capture that kind of ambivalence as well

[18:48] <diakopter> arnsholt: but we should be able to detect the size of the system C's int

[18:48] <arnsholt> Yeah, that's not really the problem

[18:48] <jnthn> int is spec'd as at least 16 bits in size

[18:49] <arnsholt> Right, so we could actually let it be sizeof(int) and get away with it

[18:49] <jnthn> But I'm not sure whether we currently run anywhere where int ain't 32 bits...maybe I'm wrong and maybe we should provide a way to be 16/32 ambivalent for int.

[18:50] <arnsholt> For the time being, I must admit I don't really care all that much for platforms that aren't x86/x64

[18:50] *** fgomez left
[18:50] <arnsholt> s/care for/care abobut/

[18:51] <timotimo> arm is totally booming right now, though

[18:52] * skids tries to concieve of an instance where one would need to call into two different types of dllib with two different ideas of sizeof(int).

[18:52] <timotimo> (but i don't think the int sizings are that different from x86/64)

[18:52] *** SunilJoshi left
[18:52] *** cognominal left
[18:52] <jnthn> skids: It's more that you want to write a binding that will work on different platforms.

[18:52] <arnsholt> skids: Same Perl code, different platforms

[18:52] <arnsholt> Yeah, what jnthn said =)

[18:52] <skids> No, that I understand I mean from the same interpreter.

[18:53] <arnsholt> Well, Rakudo compiled for $plaform-a and $platform-b

[18:53] <skids> I mean from the same runtime environment.

[18:53] <arnsholt> Not the very same interpreter instance, sure

[18:53] <skids> yes.

[18:54] <skids> Like two differently compiled libs with different calling conventions.

[18:54] <arnsholt> Well, say platform A has int as 32-bit and platform B has int as 64-bit

[18:55] <arnsholt> Then a library that has void foo(int arg)

[18:55] <arnsholt> Then we want to write a Perl binding that expresses that foo takes a machine int

[18:55] <arnsholt> Right now, that's not quite possible

[18:55] <arnsholt> (Actually, for functions I think it still works, but it won't work properly for struct { int; int; })

[18:56] <skids> Right, machine as in what the compiler that generated the DLL thought was machine at that time.  Recall some CPUs have different run modes e.g. arm/thumb.

[18:57] <arnsholt> That doesn't matter. All that matters is the Perl code

[18:57] <arnsholt> If you decide to write foo(int32 $arg) you're screwed on platforms where int is 64-bit, and if foo(int64 $arg) you're screwed on the 32-bit int platform

[18:58] *** cognominal joined
[18:59] <jnthn> arnsholt: I'm not sure if "int" is every 64-bit fwiw.

[18:59] <skids> What I'm saying really is that the idea of an unqualified int's size may not be something that can be set at rakudo/Zavolaj compile time, if you have a multiarch setup that allows you to "natively" run DLLs of various flavors.  It may depend on the DLL.

[18:59] <jnthn> *ever

[19:00] <jnthn> arnsholt: Hm, but the spec doesn't precldue it

[19:00] <jnthn> ugh, it's messy

[19:00] <arnsholt> skids: Oh, right. That's even messier, yeah

[19:00] *** wk joined
[19:02] *** fgomez joined
[19:03] <skids> .oO(after the merge with "use", having a Package::int type per "use")

[19:05] *** not_gerd joined
[19:06] <jnthn> I guess there's always the option of supplying types like cint (a C int on the platform we're on)

[19:06] <skids> All that said, I haven't been around enough to know if that is purely a hypothetical, or such a thing really exists.

[19:06] <not_gerd> jnthn, arnsholt: if you want to allow writing portable bindings, you'll need to add types for ptrdiff_t, size_t,... as well

[19:06] <arnsholt> jnthn: Yeah, that could work

[19:07] <jnthn> Plus what not_gerd said :)

[19:07] <arnsholt> Well, true. But that's down the line a bit, I think

[19:07] <arnsholt> not_gerd: Feel free to submit a Zavolaj-bug outlining it though =)

[19:07] <skids> size_t is fairly pernicious.

[19:08] <arnsholt> Or, not sure if ptrdiff_t is needed ATM. We don't allow pointer arithmetic at the Perl level

[19:09] *** SamuraiJack left
[19:10] <not_gerd> I don't think there's anything in the C standard lib that returns or takes a ptrdiff_t, so it's not really necessary for binding

[19:10] <not_gerd> size_t, on the other hand...

[19:11] <arnsholt> Yeah, size_t is definitely important

[19:12] * not_gerd throws http://pubs.opengroup.org/onlinepubs/009695299/basedefs/sys/types.h.html into the mix

[19:13] <arnsholt> Heh. Probably not going to spec all of those in NativeCall proper

[19:13] <arnsholt> But platform-specific additions might be an idea

[19:14] <not_gerd> is it possible to alias native types?

[19:14] <arnsholt> I think they should be aliasable just like normal types

[19:14] <arnsholt> They're not really magic, just have a different HOW and REPR

[19:15] *** bluescreen10 joined
[19:16] <jnthn> Yeah, there's nothing special about them

[19:16] <not_gerd> then just add cint, cshort, clong... to core and provide POSIX-compatible aliases in a module

[19:16] <not_gerd> the mapping between POSIX and C types could even be computed

[19:16] <arnsholt> Actually, we make Int into long

[19:17] <arnsholt> Or, Int == long for subs. Not supported in structs

[19:17] <not_gerd> arnsholt: not INTVAL?

[19:18] *** cognominal left
[19:18] <arnsholt> Nope. Subs and structs are handled quite differently internally

[19:19] *** cognominal joined
[19:19] <arnsholt> Subs are marshalled into libdyncall signatures almost directly, while structs rely more on info from the Perl side

[19:27] *** cognominal left
[19:30] *** domidumont joined
[19:31] *** PacoAir_ joined
[19:31] *** PacoAir_ is now known as PacoAir

[19:32] *** ElDiabolo left
[19:33] <timotimo> hm. what may be the next low hanging fruit?

[19:36] <jnthn> timotimo: Could always look at some RT tickets.

[19:38] <timotimo> sure. i'll do the RC implementations first, though

[19:38] <timotimo> and some commuting to start the day (somewhat late)

[19:38] *** cognominal joined
[19:46] *** jaldhar joined
[19:47] <jnthn> RT#116417 may be an LHF one, RT#116643 may not be too hard to hunt down.

[19:48] *** telex left
[19:48] <jnthn> Oh, and RT#112988 wants a fix in NQP land but shouldn't be too bad.

[19:49] *** cognominal left
[19:49] *** cognominal joined
[19:50] *** PacoAir left
[19:50] *** domidumont left
[19:50] *** telex joined
[19:52] <diakopter> seen cognominal 

[19:52] <diakopter> heard cognominal

[19:53] <diakopter> !seen cognominal 

[19:53] <diakopter> blargh

[19:56] *** fgomez left
[19:57] *** domidumont joined
[19:57] <cognominal> diakopter?

[19:58] *** PacoAir joined
[19:59] <cognominal> jnthn, when executing a nqp program, one gets an error like "Null PMC access", how to correlate with the nqp instruction that provoked it?

[19:59] <cognominal> is there a way to print the stack?

[19:59] *** jaldhar left
[19:59] *** not_gerd left
[20:00] <jnthn> cognominal: huh, errors typically come with a stack trace

[20:01] <jnthn> cognominal: What are you running that doesn't give you one?

[20:02] *** arlinius left
[20:03] *** fgomez joined
[20:07] *** ggoebel_ joined
[20:07] <cognominal> jnthn, sorry I am confused. Will ask again when my mind gets clearer.

[20:09] *** FROGGS left
[20:09] *** happydude left
[20:20] *** domidumont left
[20:33] *** cognominal left
[20:39] *** Kelder joined
[20:39] *** Kelder is now known as Ayiko

[20:40] *** cognominal joined
[20:40] *** patspam_ joined
[20:40] *** sjn_ joined
[20:41] *** pmichaud_ joined
[20:41] *** mj41_ joined
[20:41] *** s0rear joined
[20:43] *** rom1504_ joined
[20:46] *** timotimo_ joined
[20:47] *** Pleiades` left
[20:47] *** rom1504 left
[20:48] *** Pleiades` joined
[20:48] *** stevan_ left
[20:52] *** PacoAir left
[20:54] *** PacoAir joined
[20:55] *** mikess joined
[21:06] *** wk left
[21:19] *** am0c left
[21:28] *** kaare__ left
[21:33] *** colomon left
[21:35] *** stevan_ joined
[21:36] * diakopter finds http://web.archive.org/web/20000815230706/http://www.primenet.com/~kirbyh/perl6 and giggles

[21:39] * masak giggles, too

[21:40] <dalek> nqp-jvm-prep: 17ea3ad | jnthn++ | / (3 files):

[21:40] <dalek> nqp-jvm-prep: Implement nqp::rethrow.

[21:40] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/17ea3ad0ce

[21:40] <dalek> nqp-jvm-prep: 2d3c027 | jnthn++ | src/org/perl6/nqp/runtime/ (2 files):

[21:40] <dalek> nqp-jvm-prep: Current handler shouldn't catch its own exceptions

[21:40] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/2d3c02723f

[21:40] *** cognominal left
[21:44] *** cognominal joined
[21:47] *** colomon joined
[21:49] *** japhb_ joined
[21:53] *** spider-mario left
[22:05] <masak> std: if 42 {} else if 5 {}

[22:05] <p6eval> std 86b102f: OUTPUT«[31m===[0mSORRY![31m===[0m␤Please use 'elsif' at /tmp/SdwpDl7BbB line 1:␤------> [32mif 42 {} else if [33m⏏[31m5 {}[0m␤Confused at /tmp/SdwpDl7BbB line 1:␤------> [32mif 42 {} else if [33m⏏[31m5 {}[0m␤    expecting statement_control␤Parse failed␤FAILED 00…

[22:05] <masak> r: if 42 {} else if 5 {}

[22:05] <p6eval> rakudo 77335d: OUTPUT«[31m===[0mSORRY![31m===[0m␤Missing block␤at /tmp/DmfU1MCwPG:1␤------> [32mif 42 {} else [33m⏏[31mif 5 {}[0m␤    expecting any of:␤        statement list␤        horizontal whitespace␤        parameterized block␤»

[22:05] * masak submits rakudobug

[22:14] *** cognominal left
[22:16] *** bluescreen10 left
[22:17] *** s0rear is now known as sorear

[22:19] <dalek> rakudo/nom: af61c17 | jnthn++ | src/Perl6/Grammar.pm:

[22:19] <dalek> rakudo/nom: Add STD message for 'else if'.

[22:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/af61c178cf

[22:19] <jnthn> masak: Can tag it testneeded. ;)

[22:20] <timotimo_> masak: i'll try to build that... oh

[22:20] <timotimo_> jnthn was a bit faster :|

[22:21] <jnthn> timotimo_: You could turn it into a typed exception and/or write a test :)

[22:21] <timotimo_> totally can.

[22:21] <jnthn> timotimo_: I noted some RTs that may be quite accessible earlier too, in case you missed them and are looking for things to do. :)

[22:22] <timotimo_> yes, i looked at them and didn't know what to look at next :(

[22:23] <jnthn> Well, the huge error on file not found is a case of patching HLL::Compiler in the NQP repo to note the file doesn't exist in a gentle way and then nqp::exit(1) rather than giving the backtrace.

[22:23] *** PacoAir left
[22:25] <timotimo_> would oh, right

[22:26] <timotimo_> nqp::exit(1), that's the tip that would help me - although i wanted to ask about how to properly figure out what kind of exception was catched

[22:26] <timotimo_> so that i only say "file not found" if the file actually was not found

[22:27] <timotimo_> X::Syntax::ThatsNotPerl6? :)

[22:28] <jnthn> Well, or you can stat the file first, or just put the open in a try/catch

[22:28] <jnthn> Guess the first is technically a rance cond...

[22:28] <jnthn> *race

[22:28] <timotimo_> yes, it would be

[22:28] <timotimo_> i'll go with the smaller try block

[22:29] <timotimo_> nested try blocks work fine, right?

[22:29] <jnthn> yeah

[22:29] *** PacoAir joined
[22:29] <jnthn> it's throwing things inside a catch that can hang in NQP

[22:29] <jnthn> Well, in NQP on Parrot. I fixed that one on NQP-JVM tonight... :)

[22:29] <timotimo_> oooh!

[22:29] <timotimo_> that's cool

[22:30] <timotimo_> i thought about using X::Syntax::Malformed, but i can't attach a "use elsif instead" to it properly :(

[22:30] *** skids joined
[22:31] <jnthn> Well, you could do an X::Syntax::Malformed::ElseIf :)

[22:33] <nwc10> jnthn: "works" on "my" machine

[22:33] <timotimo_> ah, that makes more sense

[22:34] <timotimo_> but then i'll go with Malformed::Elsif instead

[22:34] <jnthn> nwc10: yay

[22:35] <timotimo_> hm, what test folder/file would i put a test for that in? :| S32-exceptions/misc.t?

[22:35] <jnthn> Yes

[22:36] <jnthn> Seems t/nqp has 59 files in

[22:36] <jnthn> (in nqp-jvm)

[22:37] <jnthn> 3 to go to reach 62, which is the 65 - 3 parrot specific ones.

[22:37] <jnthn> 44-try-catch.t passes 5 out of 8 locally

[22:38] <timotimo_> awesome :)

[22:38] <timotimo_> and then we can start making more and more tests to ensure that running the test suite == able to compile rakudo (is that a sensible idea?)

[22:38] <jnthn> Well, the bigger deal is that Rakudo needs some portability work.

[22:38] <colomon> \o/

[22:38] <jnthn> I've started one of the big pieces.

[22:39] <jnthn> Which is getting a bunch of the multi-dispatch stuff translated into NQP from C.

[22:39] <timotimo_> indeed

[22:39] <jnthn> Will continue with that soon.

[22:39] * masak .oO( works on my abacus )

[22:40] * colomon is having a hard time getting panda working with his new Linux box.

[22:41] * colomon 's new Linux box runs his $work test suite at least twice as fast as the old box did, though!

[22:41] *** sjn_ is now known as sjn

[22:41] *** PacoAir left
[22:48] <timotimo_> ok 526 - 'if 10 > 5 { say "maths works!" } else if 10 == 5 { say "identity is weird" } else { say "math is weird" }' died  /  ok 527 - right exception type (X::Syntax::Malformed::Elsif)

[22:50] <jnthn> nice :)

[22:50] <jnthn> Sleep time here...

[22:50] <jnthn> 'night

[22:50] <dalek> rakudo/nom: 8104125 | jnthn++ | docs/ChangeLog:

[22:50] <dalek> rakudo/nom: Some ChangeLog for March release work so far.

[22:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8104125303

[22:51] <dalek> roast: afcb23f | (Timo Paulssen)++ | S32-exceptions/misc.t:

[22:51] <dalek> roast: test X::Syntax::Malformed::Elsif

[22:51] <dalek> roast: review: https://github.com/perl6/roast/commit/afcb23f799

[22:51] <timotimo_> jnthn: but my pull request just got there! :(

[22:56] <masak> 'night, #perl6

[23:23] *** Chillance left
[23:46] *** woolfy left
[23:52] *** fgomez left
