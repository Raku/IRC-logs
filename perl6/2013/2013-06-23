[00:04] <timotimo> now i finally understand what ¬ª√∂¬´ is %)

[00:04] <sorear> LD

[00:04] <sorear> :D

[00:06] <timotimo> holy hell, the camelia.svg is *weird*

[00:06] *** moritz joined
[00:06] <timotimo> every line seems to be made up of rectangles

[00:07] <timotimo> and they are aligned to create lines; except in inkscape i can see little slits between the rectangles

[00:07] *** moritz left
[00:08] *** telex joined
[00:08] <diakopter> well, building nqp-jvm from scratch took 6 minutes; 6.5 minutes for rakudo-jvm

[00:08] *** _ilbot joined
[00:09] *** _ilbot left
[00:09] *** telex left
[00:10] *** telex joined
[00:11] <timotimo> oh, even *weirder*, there is little pie-slices between the rectangles even

[00:12] *** telex left
[00:14] *** telex joined
[00:15] <sorear> timotimo: i think that if you make a svg that looks approximately like the current one but is neater it would be gladly accepted

[00:16] <timotimo> i have a wacom tablet at home, i could surely invest a few minutes

[00:17] *** _ilbot joined
[00:17] *** _ilbot left
[00:25] *** telex left
[00:26] *** araujo joined
[00:26] *** ugexe left
[00:26] <sorear> ugh. nqpclasshow assumes nqp::where values are unique

[00:26] *** telex joined
[00:26] <sorear> in addition to the multi cache

[00:26] *** ugexe joined
[00:27] *** raiph joined
[00:28] <labster> Int.round($base) is failing because Int defines a method round () {self; }.  What I don't know is if making a multi in Real.pm is worth the Int.round() optimization.

[00:29] *** ugexe left
[00:30] *** moritz joined
[00:30] *** moritz left
[00:31] *** Chillance left
[00:31] *** ugexe joined
[00:33] <colomon> 496 even, 504 odd

[00:33] <colomon> 1000 good versus 0 bad

[00:33] <colomon> jnthn++

[00:35] *** Rotwang left
[00:37] *** pdurbin joined
[00:37] <diakopter> Files=713, Tests=19638, 1905 wallclock secs ( 4.58 usr  1.32 sys + 22.96 cusr  7.30 csys = 36.16 CPU)

[00:38] <diakopter> (only 2 cores)

[00:38] <pdurbin> off topic but... something is amiss with http://irclog.perlgeek.de/perl6 it seems...

[00:39] <sorear> 13:06 < moritz_bck> two short announcements regarding the IRC logs: 1) the network connection to the logging host suffers from massive packet loss; don't be surprised if it's slow/unresponsive

[00:39] <diakopter> hrm

[00:39] <sorear> pdurbin: i think moritz is painfully aware at the moment of how much his connection is sucking

[00:40] <labster> Yeah.  ilbot is not here at present, please leave a message with yoleaux if you need to get through to someone.

[00:40] *** Guest1337 left
[00:41] <pdurbin> ah. thanks for the info. I'll check for updates at http://colabti.org/irclogger/irclogger_log/perl6

[00:41] *** moritz joined
[00:41] *** moritz left
[00:42] <labster> ^^ see, there goes moritz' spotty connection again.

[00:42] <diakopter> sorear: heh, that test run left an eval-server running

[00:43] <pdurbin> poor guy

[00:44] <sorear> diakopter: see why I'm keen to fix it? :)

[00:44] <pdurbin> he's been making a ton of commits at https://github.com/moritz/ilbot lately too

[00:48] *** census left
[00:49] <timotimo> what html templating engine and what web app is currently the closest to "usable"?

[00:49] <timotimo> i'm guessing bailador?

[00:49] <timotimo> and what is sensible for templating?

[00:53] *** moritz joined
[00:53] *** moritz left
[00:53] <tadzik> I like Template::Mojo

[00:53] <tadzik> but I wrote it, so I'm biased :P

[00:56] <timotimo> can you comment on the completeness?

[00:58] <timotimo> ok $err ~~ /Failed\sto\sparse\sthe\stemplate/, 'Bad template exception';  -  this makes me sad :(

[01:00] <[Coke]> trying to get ghc up and running on a new box for pugs testing. it's complaining about the install of stringtable-atom - any suggestions?

[01:02] <sorear> seems it's possible to run perl6 without -Xbootclasspath

[01:02] *** ugexe left
[01:02] *** ugexe joined
[01:02] <sorear> and . should probably be removed in any event, I think that's the root cause of the calss problems

[01:02] *** BenGoldberg joined
[01:03] *** pdurbin left
[01:04] *** moritz joined
[01:04] *** moritz left
[01:07] <labster> dumb question, but how do you specify that a multi method takes exactly zero arguments?

[01:08] <sorear> multi foo() { ... }

[01:09] *** moritz joined
[01:09] <ssutch> r: sub protofile($fn) { say $filename; }; module Mod is protofile('hello.proto');

[01:09] <camelia> rakudo 51f4eb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Variable '$filename' is not declared‚ê§at /tmp/cqovE4tFar:1‚ê§------> [32msub protofile($fn) { say $filename[33m‚èè[31m; }; module Mod is protofile('hello.prot[0m‚ê§    expecting any of:‚ê§        postfix‚ê§¬ª

[01:09] *** moritz left
[01:09] <ssutch> r: sub protofile($fn) { say $fn; }; module Mod is protofile('hello.proto');

[01:09] <camelia> rakudo 51f4eb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§'Mod' cannot inherit from 'protofile' because it is unknown.‚ê§at /tmp/r1uQoGL77S:1‚ê§------> ‚ê§¬ª

[01:09] <[Coke]> here are the 2 cabal install failures I get: any help appreciated.

[01:09] <[Coke]> https://gist.github.com/coke/5843322

[01:11] <labster> sorear: multi method round(Int:D:) { self }  gives me: ambiguous call ... :(Int:D : Mu *%_) in rakudo

[01:12] <colomon> 19638 tests now?

[01:12] <labster> is that a bug, then?

[01:13] <sorear> labster: what other candidates do you have?

[01:13] <labster> :(Int : $scale = { ... }, Mu *%_)

[01:14] <labster> The Mu *%_ is automatically generated on both, it seems.

[01:14] *** moritz joined
[01:14] *** _ilbot joined
[01:14] *** _ilbot left
[01:14] *** moritz left
[01:15] <labster> I guess that's an issue of no arguments not being more specific than an optional argument.

[01:15] <sorear> labster: oh, NAMED arguments

[01:15] <sorear> labster: well, when you declare round(Int:D:) you do get a method which takes zero positional arguments

[01:16] <sorear> Mu *%_ only matches named arguments

[01:16] <sorear> it's specced that methods ignore unknown named arguments

[01:21] <timotimo> chtop

[01:21] <timotimo> ...

[01:23] <labster> I√¢ ftaghn

[01:23] <labster> Round is specced to return Int, but is there any real reason why this shouldn't work?

[01:23] <labster> r: say 10.35.round(0.5)

[01:23] <camelia> rakudo 51f4eb: OUTPUT¬´10.5‚ê§¬ª

[01:24] * colomon is starting to suspect that throws_like does not work on rakudo jvm

[01:24] *** ugexe left
[01:24] *** ugexe joined
[01:24] *** moritz joined
[01:25] *** moritz left
[01:25] <colomon> ===SORRY!===

[01:25] <colomon> Wrong number of arguments passed; expected 1..1, but got 0

[01:25] *** konundra joined
[01:26] *** konundra_ joined
[01:27] *** FROGGS_ joined
[01:31] *** moritz joined
[01:31] *** moritz left
[01:31] *** FROGGS left
[01:33] *** _ilbot joined
[01:34] *** _ilbot left
[01:34] *** JimmyZ joined
[01:36] *** moritz joined
[01:36] *** moritz left
[01:39] <ssutch> how can i make a trait that will run like this: "module Foo is bar('abcdef');"

[01:39] <ssutch> for instance, this: https://github.com/perl6/roast/blob/master/S14-traits/package.t#L8 doesn't seem to work

[01:40] <ssutch> rakudo complains: Method 'declares_method' not found for invocant of class 'NQPClassHOW'

[01:41] *** ugexe left
[01:41] *** ugexe joined
[01:41] *** moritz joined
[01:41] *** moritz left
[01:42] <ssutch> r: https://gist.github.com/samuraisam/5843391

[01:42] <camelia> rakudo 51f4eb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Method 'declares_method' not found for invocant of class 'NQPClassHOW'‚ê§at /tmp/3SiVVFUH5Y:15‚ê§------> ‚ê§¬ª

[01:42] *** _ilbot joined
[01:42] *** ugexe left
[01:43] *** _ilbot left
[01:43] <[Coke]> diakopter++

[01:46] *** ugexe joined
[01:46] <timotimo> itym is(thing, :$described!

[01:48] <sorear> [Coke]: hey, you're TPF aren't you?

[01:50] *** _ilbot joined
[01:50] *** ugexe left
[01:50] <[Coke]> sorear: I'm on the grants committee. Pretty much as little TPF as one could be. What's up?

[01:50] *** _ilbot left
[01:51] *** ldthien0 joined
[01:51] *** ugexe joined
[01:52] <sorear> [Coke]: oh, I just mailed a CLA on the 18th and waiting impatiently for any indication that it was successfully delivered

[01:56] <JimmyZ> ssutch: this test is not passed in rakudo

[01:56] <[Coke]> what was the zip on the delivery?

[01:56] <ssutch> ah i see

[01:56] <ssutch> how does nativecall do it then

[01:56] <[Coke]> ... actually, nevermind. doesn't matter, I'd never see it. :)

[01:57] <[Coke]> ... let me see if I have a google doc or something.

[01:59] <JimmyZ> ssutch: it does role[]

[01:59] <JimmyZ> ssutch: not  role()

[01:59] <[Coke]> sorear: I have access to to a google doc you're not on yet.

[01:59] <[Coke]> you'll probably hear about it before I notice.

[01:59] <[Coke]> good luck! ;)

[02:02] <sorear> Thanks :D

[02:03] *** _ilbot joined
[02:03] *** _ilbot left
[02:07] <sorear> um.  is it just me, or is there no getopt-equivalent in the java standard library?

[02:08] <sorear> for something this *big* getopt would be a pretty glaring omission...

[02:08] <benabik> Java doesn't like command line arguments.

[02:08] <benabik> There is gnu.getopt

[02:09] <benabik> Or commons CLI

[02:09] <benabik> Or, or, or...  But, yes, it's all third pary.

[02:10] *** _ilbot joined
[02:10] *** _ilbot left
[02:11] <ssutch> r: https://gist.github.com/samuraisam/5843391

[02:11] <camelia> rakudo 51f4eb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Cannot call 'trait_mod:<is>'; none of these signatures match:‚ê§:(Mu:U $child, Mu:U $parent)‚ê§:(Mu:U $type, :rw(:$rw)!)‚ê§:(Mu:U $type, :nativesize(:$nativesize)!)‚ê§:(Mu:U $type, :hidden(:$hidden)!)‚ê§:(Mu:U $type, *%fail)‚ê§:(Attribute:D $attr‚Ä¶

[02:12] <ssutch> hm, the the signature should match

[02:13] <timotimo> https://github.com/jnthn/zavolaj/blob/master/lib/NativeCall.pm6#L240 - they should look live that

[02:14] <timotimo> well, okay, those are all Routines

[02:16] <dalek> rakudo/nom: 077875a | (Brent Laabs)++ | src/core/Int.pm:

[02:16] <dalek> rakudo/nom: add Int.round with arguments to fix RT#118545

[02:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/077875a341

[02:19] <ssutch> even if i change the type to 'Any' it still won't find it

[02:20] <JimmyZ> ssutch: should be role description[Str $description]

[02:20] *** _ilbot joined
[02:20] *** _ilbot left
[02:24] <ssutch> r: https://gist.github.com/samuraisam/5843391

[02:24] <camelia> rakudo 51f4eb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Cannot call 'trait_mod:<is>'; none of these signatures match:‚ê§:(Mu:U $child, Mu:U $parent)‚ê§:(Mu:U $type, :rw(:$rw)!)‚ê§:(Mu:U $type, :nativesize(:$nativesize)!)‚ê§:(Mu:U $type, :hidden(:$hidden)!)‚ê§:(Mu:U $type, *%fail)‚ê§:(Attribute:D $attr‚Ä¶

[02:25] *** fgomez joined
[02:26] <ssutch> blarb!

[02:27] <diakopter> barble!

[02:27] <timotimo> i think ufo got b0rked

[02:28] <timotimo> and i still can't build rakudo::debugger; i'm slowly getting pretty mad at this whole deal

[02:34] <ssutch> is there something you use instead of 'does' on type objects?

[02:34] <colomon> ssutch: what are you trying to do?

[02:34] <ssutch> apply a trait to a Class object

[02:34] <ssutch> or a Module object

[02:34] <diakopter> "but"

[02:35] <colomon> you apply a role using does

[02:37] <colomon> I'm not sure why you'd use "is" to apply a role to a class?

[02:37] <ssutch> doing something funky‚Ä¶ for my protocol buffer library

[02:38] * ssutch to use it, you say use PB; module MyIDL is proto('path/to/file.proro');

[02:38] *** moritz joined
[02:38] *** moritz left
[02:38] <JimmyZ> r: role protobuf[Str $file] {has $.file is rw;}; class Monkey does protobuf['hello'] { }

[02:38] <camelia> rakudo 51f4eb:  ( no output )

[02:39] <ssutch> then all of the stuff defined in your proto is available

[02:40] <ssutch> huh, maybe that isn't possible: Method 'mixin' not found for invocant of class 'Perl6::Metamodel::ModuleHOW'

[02:40] <JimmyZ> r: role protobuf[Str $file] {has $.file is rw = $file;}; class Monkey does protobuf['hello'] { }; Monkey.new.file.say

[02:40] <camelia> rakudo 51f4eb: OUTPUT¬´hello‚ê§¬ª

[02:43] *** moritz joined
[02:43] *** moritz left
[02:44] *** ldthien0 left
[02:46] *** ldthien0 joined
[02:48] *** moritz joined
[02:49] *** moritz left
[02:54] *** ssutch left
[02:56] *** _ilbot joined
[02:57] *** _ilbot left
[02:58] *** SamuraiJack joined
[02:58] *** ldthien0 left
[02:59] *** moritz joined
[02:59] *** moritz left
[03:00] <colomon> Seems like throws_like is dying somewhere in the throw / catch process.

[03:01] <labster> it's somewhere in the throes of dying.

[03:01] <colomon> ;)

[03:01] <diakopter> heh.

[03:01] <diakopter> the Game of Throes

[03:05] *** _ilbot joined
[03:05] *** _ilbot left
[03:14] *** potatogim left
[03:14] *** potatogim joined
[03:15] *** potatogim left
[03:20] *** raiph left
[03:21] <dalek> Pugs.hs: 0d18b5d | coke++ | Pugs/src/Pugs/AST/Eval.hs:

[03:21] <dalek> Pugs.hs: track changes needed for latest ghc

[03:21] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/0d18b5dc92

[03:23] *** moritz joined
[03:23] *** moritz left
[03:24] *** dmol joined
[03:28] *** moritz joined
[03:28] *** moritz left
[03:30] *** FOAD left
[03:30] *** FOAD joined
[03:33] *** preflex left
[03:33] *** preflex_ joined
[03:33] *** ChanServ sets mode: +v preflex_

[03:34] *** preflex_ is now known as preflex

[03:41] * [Coke] wonders how sad people will be if pugs daily runs fall off the map.

[03:42] * [Coke] is getting several thousand failures on the new build box.

[03:42] <diakopter> [Coke]: hrm.

[03:42] *** Ben_Goldberg joined
[03:43] <diakopter> seems legit [not]

[03:43] <sorear> [Coke]: i would not care

[03:43] <[Coke]> I attempted a patch to get by the compilation error tripped on the new box. *boom*

[03:43] *** BenGoldberg left
[03:43] <sorear> [Coke]: there's no point continuously integrating an implementation that's not changing

[03:44] <diakopter> (you're just tracking how much the spec changes at that point) :)

[03:44] *** moritz joined
[03:45] *** moritz left
[03:45] *** woosley1 joined
[03:45] <[Coke]> hey person-who-just-updated-haskellage for pugs. If you can fix it, I'll keep testing it.

[03:46] * diakopter has a guess..

[03:46] <diakopter> avuserow1: hi

[03:47] <[Coke]> something _sj2? doesn't look like they're here.

[03:48] <[Coke]> zzz.

[03:48] *** _ilbot joined
[03:48] *** _ilbot left
[03:48] <diakopter> jeff shaw?

[03:52] *** dmol left
[03:52] *** raiph joined
[03:53] *** _ilbot joined
[03:53] *** _ilbot left
[03:55] *** _ilbot joined
[03:55] *** _ilbot left
[04:06] *** moritz joined
[04:06] *** moritz left
[04:11] *** atroxaper joined
[04:14] *** flaviusb joined
[04:21] *** _ilbot joined
[04:21] *** _ilbot left
[04:27] *** Psyche^ joined
[04:30] *** _ilbot joined
[04:31] *** Patterner left
[04:31] *** Psyche^ is now known as Patterner

[04:31] *** _ilbot left
[04:38] *** _ilbot joined
[04:38] *** _ilbot left
[04:44] *** woosley1 left
[04:48] *** kaare__ joined
[05:15] *** moritz joined
[05:15] *** moritz left
[05:16] *** arlinius left
[05:18] *** moritz joined
[05:23] *** _ilbot joined
[05:26] *** moritz left
[05:29] *** moritz joined
[05:30] *** moritz left
[05:30] *** _ilbot left
[05:41] *** konundra_ left
[05:41] *** _ilbot joined
[05:41] *** _ilbot left
[05:42] *** cognominal left
[05:42] *** konundra left
[05:43] *** arlinius joined
[05:44] *** preflex left
[05:46] *** preflex joined
[05:46] *** ChanServ sets mode: +v preflex

[05:47] *** panchiniak_ left
[05:50] *** JimmyZ left
[05:53] *** JimmyZ joined
[05:58] *** JimmyZ_ joined
[06:02] *** JimmyZ left
[06:02] *** JimmyZ_ is now known as JimmyZ

[06:09] *** moritz joined
[06:09] *** moritz left
[06:13] *** _ilbot joined
[06:13] *** _ilbot left
[06:17] *** _ilbot joined
[06:18] *** _ilbot left
[06:25] *** renormalist left
[06:31] *** moritz joined
[06:37] *** berekuk joined
[06:37] *** moritz left
[06:38] *** renormalist joined
[06:40] *** _ilbot joined
[06:40] *** _ilbot left
[06:41] *** berekuk left
[06:45] *** jaldhar joined
[06:51] *** berekuk joined
[06:52] *** FROGGS[mobile] joined
[06:53] <FROGGS[mobile]> o/

[06:53] <sorear> o/

[06:55] *** moritz joined
[06:55] *** moritz left
[06:57] *** kaare__ is now known as kaare_

[06:58] *** _ilbot joined
[06:58] *** _ilbot left
[07:04] *** potatogim joined
[07:04] *** domidumont joined
[07:05] *** atroxaper left
[07:06] *** _ilbot joined
[07:07] *** _ilbot left
[07:11] <labster> o/

[07:11] *** logie joined
[07:13] *** _ilbot joined
[07:13] *** _ilbot left
[07:16] *** domidumont left
[07:16] *** logie left
[07:17] *** domidumont joined
[07:17] *** moritz joined
[07:19] *** moritz left
[07:24] <labster> r: round(3i)

[07:24] <camelia> rakudo 077875: OUTPUT¬´(timeout)¬ª

[07:26] <labster> r: floor( 2i )

[07:26] <camelia> rakudo 077875: OUTPUT¬´maximum recursion depth exceeded‚ê§current instr.: 'print_exception' pc 104724 (src/gen/CORE.setting.pir:46812) (src/gen/CORE.setting:9243)‚ê§called from Sub 'Numeric' pc 224422 (src/gen/CORE.setting.pir:98010) (src/gen/CORE.setting:2992)‚ê§called from Sub 'Numeric' pc 1‚Ä¶

[07:27] *** moritz joined
[07:27] *** moritz left
[07:29] <labster> r: (3i).floor

[07:29] <camelia> rakudo 077875: OUTPUT¬´maximum recursion depth exceeded‚ê§current instr.: 'print_exception' pc 104724 (src/gen/CORE.setting.pir:46812) (src/gen/CORE.setting:9243)‚ê§called from Sub 'Numeric' pc 224422 (src/gen/CORE.setting.pir:98010) (src/gen/CORE.setting:2992)‚ê§called from Sub 'Numeric' pc 1‚Ä¶

[07:30] *** _ilbot joined
[07:31] *** raiph left
[07:31] *** _ilbot left
[07:32] <sorear> nqp-jvm: sub foo() { foo; }; foo;

[07:32] *** dukeleto joined
[07:32] <camelia> nqp-jvm:  ( no output )

[07:33] <sorear> \o/ StackOverflowError works in rakudo-jvm

[07:33] <labster> good work sir

[07:34] *** raiph joined
[07:34] <dukeleto> sorear: are you interested in hacking on a real-time GC for parrot with me? The same algorithms should be useful for any VM, if we document them well

[07:35] * dukeleto utilizes the appropriate channel

[07:35] *** _ilbot joined
[07:36] *** _ilbot left
[07:36] <labster> n: round(3i)

[07:36] <camelia> niecza v24-81-g6672fa2: OUTPUT¬´Unhandled exception: floor is only defined for Reals, you have a Complex()‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 3442 (floor @ 4) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 3445 (round @ 4) ‚ê§  at /tmp/NNh1sqRgZq line 1 (mainline @ 3) ‚ê§  at /h‚Ä¶

[07:36] <labster> niecza++

[07:37] <JimmyZ> known bug?

[07:38] <labster> dukeleto++ for planning good documentation.  I was just complaining about the lack there of (in Perl 6) earlier today.

[07:38] <dukeleto> labster: :)

[07:38] <dukeleto> JimmyZ: floor() is not commonly defined on reals, but I would say that floor(a+b*i) should be floor(a)+floor(b)*i

[07:39] <dukeleto> because floor() is a linear function

[07:39] <dukeleto> s/on reals/on complexes/

[07:40] <sorear> linear in what sense

[07:41] <JimmyZ> or LTA

[07:41] <JimmyZ> LTA bug, maybe

[07:41] <labster> Well, infinite loops are definitely LTA.

[07:41] *** benabik left
[07:41] <JimmyZ> afk

[07:42] <labster> I think complex floor/ceiling/round are certainly possible, it's just -- I can't think of a situation where it would be what you want mathematically.  sorear?  anyone with significant maths?

[07:43] <sorear> labster: i cannot think of a single way in which floor is linear, or a good use case for complex floor

[07:44] <sorear> and since there's no obviously best definition of complex floor, I'd prefer calling it undefined and letting the user define their needed definition

[07:49] *** arlinius left
[07:50] *** moritz joined
[07:50] *** moritz left
[07:50] <dukeleto> sorear: floor(a*b+c)=floor(a)*floor(b)+floor(c) or am I mistaken?

[07:50] <dukeleto> sorear: that would seemingly make it linear

[07:50] <dukeleto> sorear: but i understand wanting to leave floor(a+b*i) undefined

[07:54] <labster> according to google, the use case seems to be mostly in formatting output.  Mathematica defines Floor on complex values.

[07:55] *** _ilbot joined
[07:55] *** moritz joined
[07:55] *** _ilbot left
[07:55] *** moritz left
[07:57] *** _ilbot joined
[07:57] *** _ilbot left
[07:59] <sorear> dukeleto: you are mistaken.  consider a=1, b=c=0.6

[08:00] *** JimmyZ left
[08:01] *** _ilbot joined
[08:01] *** _ilbot left
[08:03] *** Ben_Goldberg left
[08:06] *** GlitchMr left
[08:06] *** sisar joined
[08:06] <sisar> o/

[08:08] <sisar> how do i make the prompt ">" in the rakudo REPL colored ?

[08:08] *** GlitchMr joined
[08:10] <FROGGS[mobile]> sisar: there is a term::ansicolor module

[08:12] <sisar> FROGGS[mobile]: i thought that was for printing color output, not for controlling the REPL's color

[08:12] <FROGGS[mobile]> ahh now I understand

[08:12] <sisar> :)

[08:12] <sorear> modify your rakudo to include escape sequences in the prompt

[08:13] <FROGGS[mobile]> dunno where the repl code is though

[08:13] <sisar> sorear: how do i do that ? Need more pointers

[08:15] <sorear> https://github.com/perl6/nqp/blob/master/src/HLL/Compiler.nqp#L184

[08:16] <FROGGS[mobile]> and you can steal the escape sequences from term::ansicolor

[08:16] <sorear> could add an override to src/Perl6/Compiler

[08:16] <sorear> man console_codes is always a good bet too

[08:16] *** _ilbot joined
[08:16] <sisar> FROGGS[mobile], sorear: ok, makes sense now. I'll give it a try. Thanks.

[08:16] *** _ilbot left
[08:18] *** moritz joined
[08:18] *** moritz left
[08:23] *** arlinius joined
[08:23] *** moritz joined
[08:23] *** _ilbot joined
[08:23] *** _ilbot left
[08:23] *** moritz left
[08:25] *** _ilbot joined
[08:25] *** _ilbot left
[08:26] *** tomyan joined
[08:32] *** tomyan left
[08:35] *** flaviusb left
[08:37] *** berekuk left
[08:37] *** _ilbot joined
[08:37] *** _ilbot left
[08:38] *** berekuk joined
[08:40] *** FROGGS[mobile] left
[08:40] *** moritz joined
[08:42] *** _ilbot joined
[08:42] *** _ilbot left
[08:42] *** moritz left
[08:43] *** berekuk left
[08:44] *** domidumont left
[08:48] <masak> good antenoon, #perl6

[08:49] *** _ilbot joined
[08:49] *** _ilbot left
[08:50] *** berekuk joined
[08:51] <FROGGS_> hi masak 

[08:52] *** _ilbot joined
[08:52] *** _ilbot left
[08:53] *** berekuk left
[08:56] *** _ilbot joined
[08:57] *** _ilbot left
[08:58] <sorear> 'night, #perl6 

[08:59] <FROGGS_> night sorear 

[09:04] *** _ilbot joined
[09:05] *** Guest1337 joined
[09:17] *** xlat joined
[09:17] *** _ilbot left
[09:19] <masak> good night, sorear

[09:21] <FROGGS_> masak: what do you think about passing the match (as $/) to the *_directions as the first (and only arg in most cases) ?

[09:22] <FROGGS_> I think I'll show you later how I'd do it

[09:23] <masak> I think I'd have to see it to be sure.

[09:26] <masak> hm, dagurval++ brings up a good point: should %u wrap values around some 2**N limit?

[09:26] <FROGGS_> yeah, that is what I think too

[09:26] <masak> I definitely think we should support %u. question is how.

[09:27] <FROGGS_> hmmm, dunno if should be limited

[09:28] <FROGGS_> feels strange to have bigints in core and then no way to printf it

[09:32] *** moritz joined
[09:32] *** moritz left
[09:34] <masak> I think the guiding principle should be that we want to have great bigint support.

[09:34] <masak> rn: say sprintf '%u', -5

[09:35] <camelia> rakudo 077875: OUTPUT¬´4294967291‚ê§¬ª

[09:35] <camelia> ..niecza v24-81-g6672fa2: OUTPUT¬´-5‚ê§¬ª

[09:35] <dukeleto> +1 to great bigint support :)

[09:35] <masak> hm. maybe follow Parrot/Rakudo here for once. Niecza's is saner but sort of defeats the purpose of %u.

[09:35] *** _ilbot joined
[09:35] *** _ilbot left
[09:36] *** JimmyZ joined
[09:37] *** spider-mario joined
[09:37] *** moritz joined
[09:37] *** moritz left
[09:38] <FROGGS_> what about %.64u, %.32u, %.*u, where the default is what perl5/C does ?

[09:39] <masak> sounds good.

[09:39] <masak> do C and perl5 really have a single default?

[09:40] <FROGGS_> no idea

[09:40] *** _ilbot joined
[09:40] *** _ilbot left
[09:40] <JimmyZ> what's it? sprintf?

[09:40] <masak> I have a feeling this is one of those "defaults" that went through a 16, 32, 64 evolution over the years.

[09:41] <masak> JimmyZ: yes, sprintf and %u.

[09:42] <JimmyZ> well, I see %lld and %ld in APR, which one will be used depends on platform/compiler

[09:42] <JimmyZ> %lld can't be used in MSVC

[09:43] <masak> *sigh* this is tricky.

[09:44] <JimmyZ> well ,%lld cant be used in virtual studio 2012, said MSDN. But actually, it only can be used in printf, not sprintf.

[09:45] <JimmyZ> s/cant/can/

[09:48] <masak> I think it will be hard to do this without introducing "yet another standard".

[09:49] <masak> which is why it's useful to do it from first principles as much as possible.

[09:51] <masak> "sprintf: an axiomatic approach" :)

[09:56] *** _ilbot joined
[09:56] *** _ilbot left
[10:01] *** _ilbot joined
[10:01] *** _ilbot left
[10:07] *** kaare_ left
[10:12] *** GlitchMr left
[10:13] *** GlitchMr joined
[10:15] *** _ilbot joined
[10:16] *** _ilbot left
[10:16] *** rindolf joined
[10:17] *** moritz joined
[10:17] *** moritz left
[10:20] *** skids left
[10:22] *** dukeleto left
[10:23] *** flaviusb joined
[10:31] *** xlat left
[10:32] *** xlat-home joined
[10:35] *** berekuk joined
[10:36] <timotimo> genius idea of the day: compile the JVM with emscripten, so that the user doesn't have to allow a pesky java applett to run!

[10:37] <JimmyZ> where is the JVM source???

[10:39] *** Rotwang joined
[10:40] *** _ilbot joined
[10:40] *** _ilbot left
[10:40] *** berekuk left
[10:42] *** berekuk joined
[10:44] *** Chillance joined
[10:44] *** berekuk left
[10:45] *** learnmeperl joined
[10:46] *** learnmeperl left
[10:48] *** _ilbot joined
[10:49] *** _ilbot left
[10:50] *** moritz joined
[10:50] *** moritz left
[10:54] *** _ilbot joined
[10:54] *** _ilbot left
[10:56] *** _ilbot joined
[10:56] *** _ilbot left
[10:57] *** berekuk joined
[10:58] <masak> hm, is this worth replying to? https://twitter.com/marcusramberg/status/348703648932573184

[10:58] <colomon> no

[10:58] <masak> I believe the three settings "harmed", "helped", and "not affected" are all true in some sensible mixture.

[10:59] <masak> but tweets are not long enough.

[10:59] <JimmyZ> nope

[10:59] <masak> ok, will proceed to not reply, then.

[11:00] *** atroxaper joined
[11:00] <colomon> '"harmed", "helped", and "not affected" are all true in some sensible mixture.': exactly

[11:00] *** ggoebel2 joined
[11:01] <JimmyZ> time will explain it :P

[11:01] *** ggoebel left
[11:01] <colomon> I mean, for sure taking 13+ years to do the next major version has harmed Perl.  It's a no-brainer.

[11:01] <colomon> But, at the same time, it's not really relevant to anything, either.

[11:02] <masak> there's always been a complex give-and-take between p5 and p6. the two communities are not independent and isolated.

[11:02] *** GlitchMr left
[11:02] <masak> so saying "p6 has harmed p5" is a bit like saying "the spleen has harmed the liver".

[11:03] <masak> also, it's possible/easy to forget that the relative sizes of the two communities are ridiculously different.

[11:03] <masak> if you think in terms of deployed code and active users.

[11:03] <colomon> it seems to me very fair to say the early years of the p6 project were badly borked

[11:03] <colomon> but that doesn't really tell you anything about what p6 is today.

[11:04] *** fgomez left
[11:04] *** fgomez joined
[11:04] <masak> it took a while for the p6 project to actually grow a development cycle that worked.

[11:04] <colomon> it might tell you something meaningful about how to approach perl 6

[11:04] <colomon> sorry, approach perl 7

[11:05] <masak> colomon: you do know that there won't be a Perl 7, right? :)

[11:05] <jnthn> Right, the spec says we converge on 6.6.6, iirc? :P

[11:06] <masak> jnthn: no, that's the "if we're unlucky" scenario :)

[11:06] *** moritz joined
[11:06] <masak> "In fact, we probably wouldn't end up converging on a version number of 2*PI as the RFC suggests, but rather on 6.6.6, which would be rather unfortunate." http://www.perl6.org/archive/doc/design/apo/A01.html

[11:06] *** berekuk left
[11:08] <flaviusb> Also seems fair to note the Perl Renaissance, Modern Perl etc as being influenced by learnings from the p6 endeavour, in case people wonder about the "helped" bit.

[11:08] <colomon> certainly, perl 6 has both hurt and helped p5.

[11:09] *** GlitchMr joined
[11:09] *** tomyan joined
[11:09] <masak> and not affected it at all.

[11:09] *** _ilbot joined
[11:10] *** _ilbot left
[11:10] * moritz is back-ish from behind a network line with massive package loss

[11:10] <moritz> sadly the clogs aren't back :/

[11:11] <masak> but rather than focus on crap like what people say at Ruby conferences, I'd find it much more useful to focus on Perl conferences, and the fruitful cross-pollinations and collaborations that happen there.

[11:11] <masak> that looks to me like a thriving bicameral community, not a limping one.

[11:11] * jnthn read that as "bicaramel"

[11:11] <masak> n-thly, it's not a zero-sum game.

[11:12] <masak> lots of people are involved in Perl 6 who would not have been similarly involved in Perl 5.

[11:12] <masak> I'm one.

[11:12] * moritz too

[11:12] <jnthn> Same.

[11:12] <moritz> I never went beyond doc patches and pure p5 module patches in p5 core

[11:12] <colomon> Here's the thing: the right way to say it is the Perl community as a whole bungled the next generation project.  It's not a like a small group of perl 6 programmers came in and messed things up for perl 5.  And acting like it is is grotesquely unfair to the current perl 6 developers, none of whom were even around the first 4 years.

[11:13] <moritz> and I don't think that would have changed

[11:14] <masak> colomon: I think that "bungled" is too strong. it's ongoing, it's a healthy project. people on the outside have difficulties seeing why it takes so long.

[11:15] <colomon> I meant that as "bungled the early stages", sorry

[11:15] *** pdurbin joined
[11:15] <masak> even that is risky to put in a press release :P

[11:17] <colomon> A more sensible process probably would have had a much less ambitious perl 6 that was finished a decade ago.

[11:18] <JimmyZ> will PHP6 hurts PHP5.x ? :P

[11:19] <timotimo> there will be nothing left to hurt when people see the brilliance and elegance of running your web apps as java applets directly in the user's browser

[11:20] <colomon> But the thing is... that was 10-13 years ago.  Back then they made the super ambitious choice.  Complaining about that when the team (formed since then) is finally getting close is beyond pointless.

[11:20] *** raiph left
[11:20] <masak> colomon: Perl 6 started out as less ambitious. then people sent in 361 RFCs.

[11:21] <masak> turns out people liked Perl so much they wanted to improve it all kinds of ways. :)

[11:21] <JimmyZ> I think "will Perl6 hurt perl5" is the same as "will C hurt perl5?"

[11:21] <masak> also, a smaller and more conservative change would have resulted in a Python 3 kind of situation.

[11:21] *** xlat-home left
[11:22] <masak> (still took quite some time, but now there's little momentum and even less reason to upgrade, despite the whole community pointing to p3k and nodding meaningfully)

[11:22] <pdurbin> I have a ton of respect for the ambition of Perl 6. For work I'm getting more into Java and it's clear to me that tons and tons of people are working on the language. Far more, I'd say, that work on Perl

[11:23] <pdurbin> s/that/than/

[11:28] *** xlat joined
[11:30] *** crab2313 joined
[11:31] *** daniel-s__ is now known as daniel-s

[11:32] <masak> well, marcusramberg sees the p5 part of the community, but not necessarily the p6 part of it.

[11:32] <masak> I guess that partially explains his view.

[11:32] <timotimo> but the p6 part isn't even that big ;)

[11:32] <masak> right -- it's hard to miss :)

[11:33] <masak> er, it's easy to miss.

[11:33] * masak switches brain back on

[11:33] <masak> train &

[11:34] <pdurbin> the thing I always think of is that Ruby was a reaction to Perl 4. of course it's better than Perl 4

[11:34] <pdurbin> I guess I'm just reacting to some of the replies to that tweet

[11:36] *** _ilbot joined
[11:36] *** _ilbot left
[11:38] <moritz> I have a new search backend for the IR clogs that you can all test at http://tina.perlgeek.de/perl6/search

[11:38] <moritz> feedback welcome :-)

[11:39] <jnthn> moritz: I seem to have trouble connecting to it

[11:39] <jnthn> ah, now it worked

[11:39] *** jeckyhl joined
[11:39] <moritz> jnthn: yes, lots of packet loss at the moment :(

[11:39] <moritz> which is also why the logging doesn't work

[11:41] <jnthn> moritz: yes, when I glanced the log on my phone this morning I was like "whee, quiet night...not much backlog to catch up on"

[11:41] <pdurbin> moritz: yes! I saw you mention it at http://irclog.perlgeek.de/ilbot/2013-06-22 ... great news!

[11:41] <jnthn> :P

[11:41] *** moritz_ joined
[11:42] <moritz> jnthn: I've put up a notice

[11:42] *** moritz_ left
[11:43] <jeckyhl> Hi, I'm trying to build Rakudo/JVM on Windows. Something went wrong on "Stage jar", i've got java.lang.UnsupportedOperationException: 'posix:permissions' not supported as initial attribute. Did someone alreay experienced this ?

[11:44] * JimmyZ can't connect tina

[11:45] <jnthn> jeckyhl: I've seen that but only when trying to run the tests...

[11:45] <jnthn> jeckyhl: Can you gist/nopaste me the output?

[11:46] <jnthn> moritz++

[11:46] <jeckyhl> @jnthn i was runing nmake test indeed

[11:47] <jnthn> jeckyhl: Yeah. The test/spectest targets have been set up to use an eval client/server thing for startup performance. Unfortunately, it doesn't work out on Windows yet.

[11:47] <JimmyZ> http://tina.perlgeek.de/perl6/search works now? 

[11:47] <jnthn> jeckyhl: I didn't get to trying to fix it yet.

[11:47] <jnthn> jeckyhl: The good news is that the perl6 you get out will, standalone, work.

[11:48] <jnthn> Or should, at least...

[11:48] <jeckyhl> @jntnn great !

[11:50] <jeckyhl> rakudo>nmake install gives " NMAKE : fatal error U1073: cannot get 'install'

[11:50] <timotimo> is someone here familiar with java applets? it seems like i can easily invoke code in the applet from javascript, but i can't seem to find out how to signal something to the outside html/js world from within the applet

[11:51] *** raiph joined
[11:51] <jnthn> jeckyhl: Yes, that's still todo. Be aware that the JVM support is still very, very much a work in progress.

[11:51] <moritz> I think that's by (security) design

[11:51] <moritz> (that was for timotimo)

[11:51] <jnthn> jeckyhl: We're moving pretty fast on it, though. ;)

[11:52] <timotimo> moritz: so, how do i put a Java Applet version of the rakudo evalserver into a website, push code in from JS and get the result back out when it's finished?

[11:52] <timotimo> would i have to poll an attribute of the applet?

[11:52] <jeckyhl> @jnthn It's worth waiting ! I will test again soon. 

[11:57] <moritz> timotimo: no idea, sorry

[11:59] *** sriliam joined
[11:59] <sriliam> hi

[11:59] <moritz> hello sriliam 

[12:00] <sriliam> New to perl6 and a kind of dubitative : does this project is sustained by larry wall or anyone else from other perl 

[12:00] <sriliam> ?

[12:04] <jnthn> sisar: Larry is Perl 6 language designer.

[12:04] <jnthn> oops

[12:04] <jnthn> sriliam: ^^

[12:04] <sriliam> Thanks jnthn

[12:04] <sriliam> OK, so what about compatibility ?

[12:05] <sriliam> There were object reference which had been a different when transition from perl4 to perl5.

[12:06] <sriliam> When perl6 test passed : is there is a transition on the road, or does Perl6 will be used both with Perl5 ?

[12:07] <jnthn> sriliam: Not backwards compatible; Perl 5 will continue to be developed/maintained a *long* way into the future too. :)

[12:08] <jnthn> sriliam: We're working on various kinds of interop between the two so you don't have to ditch existing Perl 5 code in order to start writing Perl 6 code too.

[12:09] <hoelzro> timotimo: I could, but I really did the pygments thing because I wanted GH support for Perl6

[12:09] <jeckyhl> jnthn: Rakudo-JVM buid sucessfully (with nmake v11 / Java JRE1.7 64 bits)

[12:09] <hoelzro> and I'm much more keen on Python than JS =)

[12:09] *** moritz_ joined
[12:09] *** moritz_ left
[12:09] <sriliam> "Not backwards compatible" ??? What about XS code with perl5 ?

[12:10] <sriliam> ^^ In perl6, of course : what about xs code in perl6 ?

[12:11] *** _ilbot joined
[12:11] *** _ilbot left
[12:12] <sriliam> "e're working on various kinds of interop between [...] start writing Perl 6 code too" : ok, understood.

[12:12] <sriliam> I'm always worring about "we will done all for you ..." !!

[12:12] <sriliam> :)

[12:13] *** _ilbot joined
[12:14] *** _ilbot left
[12:14] *** birdwindupbird joined
[12:14] <timotimo> hoelzro: well, codemirror is used in gist and the github on-line editor ;)

[12:14] <timotimo> there's of course no obligation for you to do it

[12:14] *** moritz_ joined
[12:15] *** moritz_ left
[12:15] <timotimo> sriliam: Perl5-XS is kind of hard to interop with. currently there's a module in the works called "rakudo-v5", which will let you write perl5 code in side perl6 and the other way around when you're using rakudo, but that won't give you XS

[12:16] *** _ilbot joined
[12:16] *** SunilJoshi joined
[12:16] <hoelzro> grr

[12:16] <hoelzro> timotimo: it's the only highlighter used for gists?

[12:16] *** _ilbot left
[12:16] <timotimo> oh, wait, gist doesn't have codemirror, does it?

[12:16] <timotimo> sriliam: MoarVM, on the other hand, which will become a rakudo backend, is going to use libperl, so there will be some degree of using XS in perl5 code together with perl6

[12:17] <timotimo> hoelzro: you get as-you-type highlighting on gists if you turn on the "ACE editor" i suppose

[12:17] *** jeckyhl left
[12:17] <timotimo> but it's nod codemirror, it seems!?

[12:17] <jnthn> A bunch of the things you might do with XS in Perl 5, you can do with NativeCall in Perl 6.

[12:17] <timotimo> it's apparently thi: #lives_ok { eager $req.params<hello> }, 'Request data parses without dying';

[12:18] <timotimo> #is ~$resp.content, $data,   'POST data string roundtrips correctly';

[12:18] <timotimo> ... wat.

[12:18] <timotimo> #is $req.params<a>, '1;b=2', 'application/x-www-form-urlencoded POST data should only split on &';

[12:18] <timotimo> it's apparently this: http://ace.ajax.org/#nav=about (for real this time)

[12:18] *** _ilbot joined
[12:18] <sriliam> ok timotimo : read you carefully : MoarVM the second answer is more interresting. Thanks

[12:18] *** _ilbot left
[12:19] <timotimo> oh, i forgot XS was used for legitimate purposes, too. in that case, you can use NativeCall on perl6

[12:19] <timotimo> i thought XS was only for doing crazy/dirty stuff with the internal state of perl5

[12:19] *** moritz_ joined
[12:19] *** moritz_ left
[12:20] <timotimo> http://ace.ajax.org/tool/mode_creator.html - this seems like a pretty darn cool tool

[12:20] <sriliam> No timotimo : the most XS deal is efficiency !!! NativeCall talks to me.

[12:20] <sriliam> :)

[12:20] * timotimo has never used perl5, to be honest

[12:21] <sriliam> lol

[12:21] <sriliam> And even perl4 ... XS are very old.

[12:21] <timotimo> i should be more precise: perl6 is the only perl i've ever tried

[12:22] *** ztt_ joined
[12:23] <hoelzro> I'm hoping that having "regular" syntax highlighting on GH will inspire someone else to port my efforts to CodeMirror 

[12:23] <sriliam> timotimo : Ok, you lost nothing with other versions will be a bad joke. Really.

[12:23] <hoelzro> =)

[12:24] *** moritz_ joined
[12:25] *** moritz_ left
[12:25] <timotimo> i was wrong, github uses ACE everywhere, not codemirror

[12:25] <sriliam> Ok, another question for you hackers ... Does recursive programming works with perl6. It does with perl5 but very pool experiments results.

[12:26] <timotimo> you can recurse, but the compiler will not (yet?) do things like tail-call optimization, if you mean that

[12:28] <sriliam> Read you timotimo : need to go. Thanks for you all !!!! Perl[1-6] are the best languages !!!!!

[12:29] <timotimo> have a good time! :)

[12:29] *** sriliam left
[12:29] <timotimo> now that's what i call enthusiasm :)

[12:30] <timotimo> hoelzro: this ACE mode creator editor tool thingie looks super nice, i think i'll spend at least a few minutes toying around with it! :)

[12:30] <hoelzro> cool =)

[12:35] <timotimo> from the example i'm looking at, it seems pretty limited, though; as in flat

[12:35] <timotimo> oh, no, i was wrong

[12:35] <dalek> nqp: f3cab58 | jnthn++ | src/vm/ (3 files):

[12:35] <dalek> nqp: Add nqp::getpid for both JVM and Parrot.

[12:35] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f3cab58fb7

[12:40] <xlat>  is Grammar::Debugger working on W7?

[12:40] <jnthn> xlat: I know Grammar::Tracer will work at least, *but* it emits ANSI color codes, so needs something like ansicon

[12:40] *** moritz_ joined
[12:41] <xlat> ok, I install ansicon, and I see colors with Tracer which works

[12:41] *** moritz_ left
[12:41] <timotimo> maybe Term::ANSIColor should check at compile-time what OS it's being run on and give stub methods that do nothing on windows?

[12:41] <timotimo> or look for an environment variable i guess

[12:42] <jnthn> timotimo: Well, I'd pondered a Term::WinColor and then around the two a Term::PortaColor at some point :)

[12:42] <xlat> jnthn: but when I use Debugger, as soon as I try to single-step it throws an exception

[12:42] <jnthn> xlat: That may not be Windows specific :(

[12:43] <jnthn> xlat: Did you try using the perl6-debug that is included with Rakudo *? It also knows how to do grammar single-stepping and should be working.

[12:44] <xlat> jnthn: I'll try now...

[12:44] <jnthn> Sorry 'bout the grammar::debugger bug. That's almost certainly my fault... :/

[12:45] <xlat> jnthn: the error msg: http://pastebin.com/DRQitCje

[12:45] *** cognominal joined
[12:45] <jnthn> ugh

[12:47] <jnthn> xlat: Filed it in issue tracker

[12:48] <dalek> nqp: 7fa12e2 | jnthn++ | src/vm/parrot/QAST/Operations.nqp:

[12:48] <dalek> nqp: Fix nqp::getpid on Parrot.

[12:48] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7fa12e2b59

[12:51] <dalek> rakudo/nom: c050747 | jnthn++ | src/core/Range.pm:

[12:51] <dalek> rakudo/nom: Port Range reify fast-path.

[12:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c050747edb

[12:51] <dalek> rakudo/nom: 7f0af9b | jnthn++ | / (2 files):

[12:51] <dalek> rakudo/nom: Use new nqp::getpid() op for $*PID.

[12:51] <dalek> rakudo/nom: 

[12:51] <dalek> rakudo/nom: Means $*PID is now available on JVM backend also.

[12:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7f0af9bca5

[12:53] *** pdurbin left
[12:56] *** raiph left
[13:00] <timotimo> it doesn't seem like ACE allows capturing in the tokens, so heredocs will practically be impossible

[13:02] <xlat> jnthn: debugger's coloration is impressive!

[13:05] *** _ilbot joined
[13:05] *** _ilbot left
[13:08] *** flaviusb left
[13:08] *** raiph joined
[13:11] <xlat> jnthn: tryed perl6-debug but still got the same error, my script: https://gist.github.com/xlat/5be8c961d21b6350a2eb

[13:13] *** tomyan_ joined
[13:15] *** kaare_ joined
[13:15] <jnthn> xlat: Wait, the debugger tells you the same error? Does it tell you which line?

[13:15] *** tomyan left
[13:16] <jnthn> xlat: You did remove the "use Grammar::Debugger" from your script before running it under perl6-debug?

[13:16] *** dayangkun joined
[13:16] <jnthn> If not then you're debugging Grammar::Debugger... ;)

[13:16] *** SunilJoshi left
[13:22] *** xlat left
[13:23] <dalek> nqp: cf6cfb3 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[13:23] <dalek> nqp: Implement accepts_type handling.

[13:23] <dalek> nqp: 

[13:23] <dalek> nqp: This is the primitive that makes things like subset types work.

[13:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/cf6cfb3f00

[13:26] *** JimmyZ left
[13:29] *** ztt_ left
[13:31] *** atroxaper left
[13:31] *** JimmyZ joined
[13:35] *** woosley1 joined
[13:36] *** xlat joined
[13:43] <xlat> jnthn: u were right, I was debugging Grammar::Debugger ^^

[13:44] <jnthn> .oO( yo dawg... )

[13:51] <masak> yo debawg.

[13:54] *** woosley1 left
[13:55] *** konundra joined
[13:55] <timotimo> how confident can one be in the restricted setting?

[13:56] <timotimo> r: say dir();

[13:56] <camelia> rakudo 7f0af9: OUTPUT¬´IO::Path<star> IO::Path<src> IO::Path<.subversion> IO::Path<.bashrc> IO::Path<nom-inst1> IO::Path<toqast> IO::Path<test3.pl> IO::Path<.profile> IO::Path<t> IO::Path<nom-inst2> IO::Path<nom-inst> IO::Path<toqast-inst> IO::Path<toqast-inst2> IO::Path<examples> IO::Pa‚Ä¶

[13:56] <timotimo> r: slurp("test3.pl")

[13:56] <camelia> rakudo 7f0af9:  ( no output )

[13:56] <timotimo> r: slurp("test3.pl").say

[13:56] <camelia> rakudo 7f0af9: OUTPUT¬´use Test;‚ê§‚ê§{‚ê§    "fooxbar" ~~ /x/;‚ê§    is $/.prematch, "foo", ".prematch works";‚ê§    is $/.postmatch, "bar", ".postmatch works";‚ê§‚ê§    is ("foo" ~~ /(f)/).kv.join("|"), '0|f', '.kv sees positional';‚ê§    is ("foo" ~~ /$<x>=[f]/).kv.join("|"), 'x|f', '.kv sees names';‚Ä¶

[13:56] *** _ilbot joined
[13:57] <timotimo> r: dir("/etc").say

[13:57] *** _ilbot left
[13:57] <camelia> rakudo 7f0af9: OUTPUT¬´IO::Path</etc/terminfo> IO::Path</etc/issue.net> IO::Path</etc/login.defs> IO::Path</etc/issue> IO::Path</etc/rcS.d> IO::Path</etc/shells> IO::Path</etc/logcheck> IO::Path</etc/sysctl.d> IO::Path</etc/python> IO::Path</etc/resolv.conf> IO::Path</etc/locale.gen> IO:‚Ä¶

[13:57] <timotimo> huh.

[13:57] <timotimo> r: rename("foo", "bar")

[13:57] <camelia> rakudo 7f0af9: OUTPUT¬´rename is disallowed in restricted setting‚ê§  in sub restricted at src/RESTRICTED.setting:2‚ê§  in sub rename at src/RESTRICTED.setting:12‚ê§  in block  at /tmp/IRYbZjk3oE:1‚ê§‚ê§¬ª

[13:58] <timotimo> righto.

[13:58] *** ajr joined
[13:58] <timotimo> so only the things that are supposed to write or modify are blocked

[13:58] *** ajr is now known as Guest29689

[13:58] *** Guest29689 is now known as ajr_

[13:59] <timotimo> r: qx{echo hello}.say

[13:59] <camelia> rakudo 7f0af9: OUTPUT¬´qx, qqx is disallowed in restricted setting‚ê§  in sub restricted at src/RESTRICTED.setting:2‚ê§  in sub QX at src/RESTRICTED.setting:9‚ê§  in block  at /tmp/MuJlWm3Ybh:1‚ê§‚ê§¬ª

[13:59] *** konundra_ joined
[14:00] <timotimo> r: my Mu $pio := nqp::open(nqp::unbox_s("echo 'exploit' > harmless_testfile.txt"), "rp"); $pio.close;

[14:00] <camelia> rakudo 7f0af9:  ( no output )

[14:00] <timotimo> r: slurp("harmless_testfile.txt").say

[14:00] <camelia> rakudo 7f0af9: OUTPUT¬´exploit‚ê§‚ê§¬ª

[14:00] <timotimo> :(

[14:01] <masak> Perl 6 is exploit-complete. a restricted setting is just a guideline, not a real protection. nor can it ever be.

[14:02] <timotimo> so for a try.perl6.org one would want a java applet or a pure-js interpreter.

[14:03] <masak> yes, definitely.

[14:04] * timotimo shudders at the thought of using swing

[14:05] *** moritz_ joined
[14:05] *** moritz_ left
[14:08] *** _ilbot joined
[14:09] *** _ilbot left
[14:13] *** benabik joined
[14:13] *** atroxaper joined
[14:14] <timotimo> how can Task::Star fail its tests?

[14:16] <timotimo> dunno if i asked that on this channel already: does compiling MoarVM with emscripten sound sensible?

[14:17] *** logie joined
[14:18] *** moritz_ joined
[14:18] *** moritz_ left
[14:21] <timotimo> r: dir("t")

[14:21] <camelia> rakudo 7f0af9:  ( no output )

[14:21] <timotimo> r: dir("t").say

[14:21] <camelia> rakudo 7f0af9: OUTPUT¬´IO::Path<t/fileops.t> IO::Path<t/ImportTest.pm6> IO::Path<t/jsync.data> IO::Path<t/frontend-std.t> IO::Path<t/run_spectests_p5> IO::Path<t/update_passing_test_data.pl> IO::Path<t/jsync.t> IO::Path<t/spectest_p5.data> IO::Path<t/clr.t> IO::Path<t/fudgeandrun> IO::Pa‚Ä¶

[14:22] <timotimo> r: dir("t").grep(*.Str eq "t")

[14:22] <camelia> rakudo 7f0af9:  ( no output )

[14:22] <timotimo> r: dir("t").grep($_ eq "t")

[14:22] <camelia> rakudo 7f0af9: OUTPUT¬´use of uninitialized value of type Any in string context  in block  at /tmp/nhuxRjNb_L:1‚ê§‚ê§¬ª

[14:22] <FROGGS_> masak: https://gist.github.com/FROGGS/5845176

[14:22] *** colomon left
[14:22] <timotimo> the dirwalk in ufo is recursing into itself endlessly, because apparently dir("foo", :test(*)) is returning foo now, too

[14:23] <FROGGS_> masak: I think it is easier to maintain when the directives differ more (like they would do for binary for example)

[14:23] <timotimo> r: dir("t", :test(*)).say

[14:23] <camelia> rakudo 7f0af9: OUTPUT¬´IO::Path<t/..> IO::Path<t/fileops.t> IO::Path<t/ImportTest.pm6> IO::Path<t/jsync.data> IO::Path<t/frontend-std.t> IO::Path<t/run_spectests_p5> IO::Path<t/update_passing_test_data.pl> IO::Path<t/jsync.t> IO::Path<t/spectest_p5.data> IO::Path<t/clr.t> IO::Path<t/fudg‚Ä¶

[14:23] <timotimo> even worse, .. is contained in there!

[14:24] <jnthn> Everything matches whatever, I guess

[14:25] <timotimo> yeah. it must have changed some time in the past, though

[14:26] *** cognominal left
[14:27] <timotimo> r: dir("t", :test(*))[0].cleanup.say

[14:27] <camelia> rakudo 7f0af9: OUTPUT¬´IO::Path<t/..>‚ê§¬ª

[14:28] *** cognominal joined
[14:28] *** moritz_ joined
[14:30] *** moritz_ left
[14:30] <masak> FROGGS_: looking.

[14:30] <FROGGS_> (20 lines more in total)

[14:32] *** _ilbot joined
[14:32] *** _ilbot left
[14:33] *** moritz_ joined
[14:33] *** moritz_ left
[14:34] <masak> FROGGS_: nice. it looks good, overall.

[14:35] <masak> FROGGS_: suggestion: 'sprintf', not 'SprintF'.

[14:35] <masak> FROGGS_: also, would it be possible to move the args checks from the TOP rule to the TOP action method?

[14:35] <FROGGS_> masak: that should work, yes

[14:37] <masak> I don't see immediately why $*PADDING is needed, rather than just something like $<size><padding>

[14:37] <masak> er, $<size><padding>.ast

[14:38] <timotimo> masak: https://gist.github.com/timo/a7f69bb57820a9e5ce88 <- opinions?

[14:38] <FROGGS_> masak: well, $*PADDING defines the default padding (for example if there is no size)

[14:39] <FROGGS_> masak: I updated the gist btw

[14:40] <FROGGS_> timotimo: I would use File::Spec.updir instead of '/..', because it can be something else on other systems

[14:40] <masak> timotimo: looks good.

[14:40] *** Rotwang left
[14:41] <masak> modulo what FROGGS_ just said :)

[14:41] <masak> FROGGS_: I'm not too fond of dynamicals where something else works just as well, is all.

[14:43] <FROGGS_> true

[14:44] <cognominal> hi, is there a way to huffmanize this action :       make $/{$/.keys[0]}.ast 

[14:45] *** xlat-home joined
[14:45] <jnthn> cognominal: I'm...not sure that makes sense? "look up a randomish key in the match object"?

[14:45] <jnthn> Hashes aren't ordered in any way, so .keys[0] could give any of the keys

[14:46] <cognominal> if the rule is something like :   A | B | C | D

[14:46] <cognominal> ...it does make sense

[14:46] <cognominal> oops, I forgot the <>

[14:47] <cognominal> replay: if the rule is something like :   <A> | <B> | <C> | C<D>

[14:47] <cognominal> arf

[14:47] <timotimo> FROGGS_: good point. masak do you have a moment to do that change yourself or should i make an updated patch? because i'll be afk for a bit now.

[14:47] <cognominal>    <A> | <B> | <C> | <D>

[14:48] <timotimo> well, bbl.

[14:48] *** xlat left
[14:49] <JimmyZ> cognominal: https://gist.github.com/FROGGS/5845176#file-sprintf-pl-L138 like this?

[14:51] <cognominal> Jimmyz, that's exactly the natural form of what I want to huffmanize. I should have started by showing something like that.

[14:52] <cognominal> doing  make $<rule>.ast  for each rule is exactely what I want to avoid.

[14:52] <FROGGS_> bbl, masak you can apply my patch from the gist if you want...

[14:52] <cognominal> also because I need to modify the action each time I had a rule to the alternation.

[14:53] <JimmyZ> cognominal: you may want ```for my $key (keys $/) { make $<$key>.ast; }```

[14:53] <cognominal> on the other hand, like jnthn said, but with other words      make $/{$/.keys[0]}.ast    is cryptic

[14:54] <JimmyZ> or something

[14:55] <cognominal>  that sort of code come over and over. Probably some syntactic sugar could be invented.

[14:56] <cognominal> not that I think of one out of hand.

[14:57] *** crab2313 left
[14:58] *** crab2313 joined
[14:58] <cognominal> make $|/.ast   # probably, that's what  I would like to write

[15:00] *** crab2313 left
[15:00] <cognominal> but probably such huffmanization should address rules with quantifiers as well  like  <A> | <B>+ | <C>*

[15:00] <cognominal> may be I just need some routine.

[15:00] <cognominal> * need to write

[15:00] *** raiph left
[15:06] *** _ilbot joined
[15:07] *** _ilbot left
[15:08] *** raiph joined
[15:10] *** cognominal left
[15:14] *** panchiniak_ joined
[15:15] *** FROGGS[mobile] joined
[15:22] *** tomyan_ left
[15:22] <masak> timotimo: I leave it to you to make the patch. I don't feel involved enough in the issue at hand.

[15:26] *** konundra_ left
[15:26] *** konundra left
[15:29] <timotimo> OK

[15:32] *** _ilbot joined
[15:32] *** _ilbot left
[15:34] *** dmol joined
[15:39] *** tomyan joined
[15:42] *** tomyan left
[15:49] *** cognominal joined
[15:52] *** crab2313 joined
[15:52] *** skyheights joined
[15:53] *** konundra joined
[15:53] *** _ilbot joined
[15:53] *** konundra_ joined
[15:53] *** _ilbot left
[15:56] *** JimmyZ left
[15:58] *** ajr joined
[15:58] *** ajr_ left
[15:58] *** ajr is now known as Guest42649

[15:58] *** Guest42649 is now known as ajr_

[15:59] <Ulti> sorear I'm only using IO::Pty::HalfDuplex because it's part of try.rakudo.org I'll try and work out what's happening, the tests hang and eventually fail on the first spawn()

[16:00] *** _ilbot joined
[16:01] *** _ilbot left
[16:06] *** _ilbot joined
[16:07] *** _ilbot left
[16:10] *** dmol left
[16:10] *** dmol joined
[16:11] *** tomyan joined
[16:21] *** _ilbot joined
[16:21] *** _ilbot left
[16:21] *** moritz_ joined
[16:21] *** moritz_ left
[16:22] *** colomon joined
[16:26] *** moritz_ joined
[16:26] *** moritz_ left
[16:28] *** domidumont joined
[16:28] *** yoleaux left
[16:29] <[Coke]> ok, the last pugs change I made didn't break everything on the original testing box, that's good.

[16:30] *** domidumont left
[16:31] *** moritz_ joined
[16:31] *** moritz_ left
[16:36] *** moritz_ joined
[16:36] *** moritz_ left
[16:37] *** _ilbot joined
[16:37] *** _ilbot left
[16:41] *** moritz_ joined
[16:42] *** moritz_ left
[16:48] <pmichaud> cognominal: ( <A> | <B> | <C> | <D> )   there are several ways around it

[16:48] <pmichaud> one is to use protoregexes

[16:48] <pmichaud> another is to use aliases

[16:48] <pmichaud> for example

[16:49] <pmichaud>    <X=A> | <X=B> | <X=C> | <X=D>    and then   make $<X>.ast

[16:49] <cognominal> that's nice, I like it.

[16:50] <cognominal> pmichaud: what's about protoregex(es)? And what is the plural of regex btw?

[16:51] *** _ilbot joined
[16:52] *** _ilbot left
[16:52] <pmichaud> proto regex foo {...};  proto regex foo:sym<A> { <A> };  protoregex foo:sym<B> { <B> }; ...    then each foo: candidate can have its own action method (and you know what the matching subrule is)

[16:53] <cognominal> nice to know. But pretty verbose in my case

[16:53] <cognominal> pmichaud++ 

[16:55] <cognominal> or <X = <A> | <B> | <C> | <D> >   I suppose

[16:56] <pmichaud> I don't think that works

[16:57] <cognominal> oh, that should be      $<X> = [ <A> | <B> | <C> | <D> ]

[17:00] *** rindolf left
[17:00] <pmichaud> that doesn't give you $<X>.ast, though.

[17:00] <pmichaud> $<X> simply matches whatever text is matched by whatever is in the brackets.

[17:01] *** xilo joined
[17:01] <pmichaud> s/matches/contains/

[17:02] <cognominal> indeed

[17:06] *** atroxaper left
[17:06] <cognominal> so should I interpret you answer as "I think it should work" or "I think it should not work". With my syntax interpreted as some inline rule as opposed to mere capturing.

[17:06] <pmichaud> which answer?

[17:07] <cognominal> [18:56]  <pmichaud> I don't think that works

[17:07] <pmichaud> I know that   <X=A> | <X=B> | <X=C> | <X=D>   will work, with  $<X>.ast containing the .ast of whichever subrule matched

[17:07] <pmichaud> <X = <A> | <B> | <C> | <D> >   isn't valid syntax afaik

[17:08] *** konundra left
[17:08] *** konundra_ left
[17:09] *** yoleaux joined
[17:09] *** ChanServ sets mode: +v yoleaux

[17:09] <pmichaud> I'm afk again

[17:10] <cognominal> that's gives:  Quote words construct too complex to use in a regex

[17:10] *** moritz_ joined
[17:11] <jnthn> Did you accidentally a space after a "<"?

[17:12] *** moritz_ left
[17:13] *** birdwindupbird left
[17:15] *** moritz_ joined
[17:16] <cognominal> jnthn, what do you want to say?

[17:16] *** moritz_ left
[17:18] *** fgomez left
[17:18] *** fgomez joined
[17:19] <jnthn> cognominal: The erorr you reported.

[17:20] *** gdey left
[17:20] *** _ilbot joined
[17:20] <jnthn> cognominal: I think you may have typed < foo=bar> or so, not <foo=bar>. The space after the < turns it into quote words.

[17:20] *** _ilbot left
[17:21] <cognominal> jnthn, no that's expected. I just said to pmichaud what was the error message for the example I gave that pmichaud said it would not work.

[17:22] *** _ilbot joined
[17:22] <diakopter> what do you people think about being 1/8 done with this century?

[17:22] *** _ilbot left
[17:23] *** ajr_ left
[17:33] *** moritz_ joined
[17:33] *** moritz_ left
[17:36] *** raiph left
[17:37] *** _ilbot joined
[17:37] *** _ilbot left
[17:37] <jnthn> Seems I've got a talk accepted at YAPC::EU :)

[17:38] <masak> \o/

[17:39] <masak> diakopter: I am disappointed at the rate of human colonization across our galaxy.

[17:41] *** domidumont joined
[17:42] <cognominal> masak: I am  afraid that people think that's an alternative to fixing our problems in our home planet.

[17:44] <masak> it's not an either-or thing, IMHO. both are highly important.

[17:44] *** moritz_ joined
[17:45] *** moritz_ left
[17:46] *** xilo left
[17:46] *** xilo joined
[17:47] *** _ilbot joined
[17:47] *** _ilbot left
[17:48] <cognominal> well, I shoud reformulate in "fixing our problems in our culture". colonization, extra-terrestrial or not does not fix these problems

[17:50] *** benabik left
[17:53] *** crab2313 left
[17:53] *** Guest1337 left
[17:54] *** SamuraiJack left
[17:55] *** moritz_ joined
[17:55] <lue> .oO(Having another planet to overpopulate would give us more time. Alternatively, underwater colonies)

[17:55] *** moritz_ left
[17:58] <masak> overpopulation in general becomes a slightly smaller problem when there's more than one planet to choose from.

[18:00] <FROGGS_> UFP WTF!

[18:00] *** panchiniak_ left
[18:01] <FROGGS_> masak: any objections left about sprintf::Grammar?

[18:01] *** ugexe left
[18:02] *** ugexe joined
[18:05] <sorear> JimmyZ: http://hg.openjdk.java.net/

[18:05] *** moritz_ joined
[18:05] *** moritz_ left
[18:06] <sorear> timotimo: https://jdk6.java.net/plugin2/liveconnect/#JAVA_TO_JS

[18:10] <sorear> timotimo: the design I'm planning to implement is to have an invisible applet that responds to evaluation methods, and implement the repl in html/js

[18:10] <sorear> that way you get all the nice browser features like right click, copy for free

[18:13] *** benabik joined
[18:15] *** _ilbot joined
[18:15] *** _ilbot left
[18:19] *** BenGoldberg joined
[18:22] *** moritz_ joined
[18:22] *** moritz_ left
[18:27] *** moritz_ joined
[18:27] *** moritz_ left
[18:29] *** raiph joined
[18:39] *** moritz_ joined
[18:39] *** moritz_ left
[18:40] *** Rotwang joined
[18:46] *** _ilbot joined
[18:46] *** _ilbot left
[18:47] *** lizmat joined
[18:49] <lizmat> good *, #perl6!

[18:49] <cognominal> r:  grammar A { token TOP { <a> || <b> } ; token a { '[' ~ ']' <[ab]> }; token b { '[b-]' } }; A.parse: '[b-]'

[18:49] <camelia> rakudo 7f0af9: OUTPUT¬´Unable to parse expression in a; couldn't find final ']'‚ê§  in any FAILGOAL at src/stage2/QRegex.nqp:1037‚ê§  in regex a at /tmp/zMlANBrRlX:1‚ê§  in regex TOP at /tmp/zMlANBrRlX:1‚ê§  in method parse at src/gen/CORE.setting:10697‚ê§  in block  at /tmp/zMlANBrRlX:1‚ê§‚ê§¬ª‚Ä¶

[18:49] <cognominal> r:  grammar A { token TOP { <a> || <b> } ; token a { '[' ~ ']' <[ab]> }; token b { '[b]' } }; A.parse: '[b]'

[18:49] <camelia> rakudo 7f0af9:  ( no output )

[18:50] <cognominal> r:  grammar A { token TOP { <a> || <b> } ; token a { '[' ~ ']' <[ab]> }; token b { '[b]' } }; say A.parse: '[b]'

[18:50] <camelia> rakudo 7f0af9: OUTPUT¬´ÔΩ¢[b]ÔΩ£‚ê§ a => ÔΩ¢[b]ÔΩ£‚ê§‚ê§¬ª

[18:51] <sorear> o/ cognominal, lizmat !

[18:51] <lizmat> o/ sorear!

[18:52] <cognominal> o/ everyone

[18:52] <cognominal> with xlat-home, I wonder why the first parse fails and the second succeeds

[18:52] <lizmat> o/ cognominal!

[18:52] <cognominal> o/ lizmat, sorear

[18:54] <colomon> \o

[18:54] <lizmat> so how are we on the percentage of spectests passing on the JVM?

[18:54] *** raiph left
[18:54] <lizmat> colomon!

[18:55] <[Coke]> lizmat: https://github.com/coke/perl6-roast-data/blob/master/perl6_pass_rates 66.62% as of yesterday.

[18:55] <[Coke]> today's run isn't done yet.

[18:56] <lizmat> wow‚Ä¶  2/3 passes, wow!

[18:56] <[Coke]> (that's 2/3 of the parrot impl.)

[18:57] * jnthn eagerly awaits today's run

[18:58] <xlat-home> r: grammar A { token TOP { <a> || <b> } ; token a { '[' ~ ']' <[a]> }; token b { '[b-]' } }; A.parse: '[b-]'

[18:58] <camelia> rakudo 7f0af9:  ( no output )

[18:58] *** raiph joined
[18:58] <xlat-home> grammar A { token TOP { <a> || <b> } ; token a { '[' ~ ']' <[ab]> }; token b { '[b-]' } }; A.parse: '[b-]'

[18:59] <xlat-home> r: grammar A { token TOP { <a> || <b> } ; token a { '[' ~ ']' <[ab]> }; token b { '[b-]' } }; A.parse: '[b-]'

[18:59] <camelia> rakudo 7f0af9: OUTPUT¬´Unable to parse expression in a; couldn't find final ']'‚ê§  in any FAILGOAL at src/stage2/QRegex.nqp:1037‚ê§  in regex a at /tmp/nZD3WlU1i2:1‚ê§  in regex TOP at /tmp/nZD3WlU1i2:1‚ê§  in method parse at src/gen/CORE.setting:10697‚ê§  in block  at /tmp/nZD3WlU1i2:1‚ê§‚ê§¬ª‚Ä¶

[18:59] <colomon> for those who remember me mentioning that my wife had just bought $450 worth of bookshelves while I was at YAPC::NA, we've just started assembling them.  :)

[18:59] <xlat-home> just changing <[ab]> -> <[a]> make it works, but:

[19:00] <xlat-home> r: grammar A { token TOP { <a> || <b> } ; token a { '[' <[ab]> ']' }; token b { '[b-]' } }; A.parse: '[b-]'

[19:00] <camelia> rakudo 7f0af9:  ( no output )

[19:00] <xlat-home> changing A ~B C syntax to a A C B make it works, why ?

[19:00] <lizmat> colomon: if your wife did that, I would assume there is a good reason to get the shelves  :-)

[19:02] <cognominal> afk& # need some walk to think clearly

[19:02] <lizmat> .oO{ you can only live inbetween piles of books for so long}

[19:03] <lizmat> cognominal: walk clearly, think some!

[19:04] <pmichaud> xlat-home: the ~ construct adds a "fail the match" component

[19:04] <colomon> lizmat: you can only live so many years without unboxing all your books from the last move...

[19:05] <lizmat> true: in our case, it's about 12 years now‚Ä¶(that some of our books have been in boxes, and still are  :-(

[19:05] *** ugexe left
[19:05] <colomon> lizmat: scary thing is these are only intended to be a stop gap measure until we can afford cover an entire wall of the living room with IKEA bookshelves.  ;)

[19:05] <xlat-home> pmichaud: thank u, that sounds ok, my bad.

[19:05] *** ugexe joined
[19:05] <colomon> *afford to

[19:06] <lizmat> is IKEA that expensive in the US then?

[19:06] <colomon> if you buy an entire wall's worth of bookshelves with glass doors, yes.

[19:07] <lizmat> glass doors?   for bookshelves?  

[19:07] <Juerd> Books are supposed to have dust covering the top.

[19:07] <Juerd> That's how you gauge how long they've been there. Without it, how would you know?

[19:07] <lizmat> ok, yes, then I can see they can run into some paper‚Ä¶  our IKEA bookshelves are all without doors (Billy)

[19:08] *** fgomez left
[19:08] <diakopter> our IKEA bookshelves fell apart while moving

[19:08] <geekosaur> but glass doors keep the cats from using the books as convenient claw sharpeners

[19:08] *** fgomez joined
[19:08] <lizmat> eh‚Ä¶. you should at least take the shelves out

[19:09] <diakopter> yes, it was an extremely poor moving van packing job

[19:09] <lizmat> our Perl library lives in Ikea shelves, and has moved many a time to a conference or workshop

[19:09] <diakopter> like, miserably

[19:09] <lizmat> :-(

[19:09] <lizmat> geekosaur: get educated cats  :-)

[19:10] <colomon> lizmat: Billy is what we were looking at, I think.  Also, corner units at each end of the wall to be covered by bookshelves.

[19:10] <geekosaur> maggie had trouble remembering from week to week not to try to eat candle flames; book learning was just a bit beyond her :p

[19:13] *** _ilbot joined
[19:13] *** _ilbot left
[19:18] <sorear> fun, nqp-runtime.jar now contains a compile-time reference to sun.*

[19:18] <jnthn> sorear: I figured the only way to know how that would fly was to do it.

[19:21] <dalek> nqp: 1792c64 | sorear++ | src/vm/parrot/QAST/Operations.nqp:

[19:21] <dalek> nqp: tweak error message in nqp::getpid

[19:21] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1792c6493d

[19:22] <jnthn> sorear++ # good catch

[19:31] <dalek> perl6-roast-data: 6755e3d | (Will "Coke" Coleda)++ | / (4 files):

[19:31] <dalek> perl6-roast-data: today (automated commit)

[19:31] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/6755e3deca

[19:31] <[Coke]> that brings us up over 70% !

[19:32] <sorear> !

[19:32] *** moritz_ joined
[19:32] *** moritz_ left
[19:33] <masak> FROGGS_: <?{ $*PADDING := ~$<padding> if nqp::chars($<padding>); 1 }>

[19:34] <masak> better written as { $*PADDING := ~$<padding> if nqp::chars($<padding>) }

[19:34] <masak> (and I still suspect $*PADDING could be replaced by some simpler mechanism)

[19:34] <FROGGS_> masak: that stops LTM

[19:35] <masak> <?{}> doesn't stop LTM!?

[19:35] <sorear> <?{}> does stop LTM

[19:35] <FROGGS_> no, the block form

[19:35] <sorear> if you don't want to stop LTM, you need to use <!!{}>

[19:35] <masak> sorear: oh phew

[19:35] <FROGGS_> hmmm

[19:35] <masak> wait what

[19:36] <masak> where's the logic in all of that?

[19:36] *** domidumont left
[19:36] <[Coke]> sorear++ jnthn++

[19:37] <masak> FROGGS_: also, I now see we really need to abstract out infix_x($padding, $size - $length) anyway.

[19:37] <FROGGS_> about the padding, we could make a sub like sub padding { $<size><padding> || ' ' }...

[19:37] <masak> FROGGS_: it keeps cropping up everywhere with insignificant variations.

[19:37] <masak> FROGGS_: yes. FROGGS_++

[19:37] <masak> that's much better than a dynamical.

[19:37] <sorear> the contents of a <!before > are invisible to LTM

[19:38] <sorear> <?before > is special to LTM: the contents of the <?before > replaces the continuation, essentially, since we assume it's more specific than what follows

[19:38] <sorear> foo <?before bar> \w+ is LTMed like 'foobar {}'

[19:39] <sorear> foo <!!before bar> \w+ is LTMed like 'foo \w+'

[19:40] <jnthn> Wow, 70%!

[19:40] <woolfy> 70%++

[19:41] <sorear> jnthn++

[19:41] <sorear> jnthn: now beat niecza, I know you can do it

[19:41] <jnthn> sorear: Feel free to chip it a few commits towards it, if you fancy a little bug-hunting ;)

[19:42] <jnthn> sorear: Are you working on the interop stuff?

[19:42] *** tomyan left
[19:42] <lizmat> the 2 failing rakudo tests are in t/spec/S12-attributes/clone.t

[19:42] * lizmat is checking

[19:42] <sorear> jnthn: yes, interop mostly atm

[19:43] <jnthn> sorear++

[19:43] <sorear> lizmat: yes, ssutch deliberately committed TODO tests to that file

[19:43] <sorear> lizmat: probably should have been #?rakudo todo'd or so

[19:43] <timotimo> yeah, think so, oo

[19:43] <lizmat> Ah, but they aren't marked as todo

[19:43] <lizmat> will mark them as todo

[19:44] <timotimo> where do i find File::Spec.updir? is File::Spec a module? and if so, should it become a dependency of ufo? i thought ufo was meant to be dependencyless so that you can install things with it without installing anything before

[19:45] *** konundra joined
[19:45] <dalek> roast: 894a692 | (Elizabeth Mattijsen)++ | S12-attributes/clone.t:

[19:45] <dalek> roast: Clone tests should be marked as todo for the time being

[19:45] <dalek> roast: review: https://github.com/perl6/roast/commit/894a692191

[19:46] <jnthn> Hm, seems like fixing throws_like would be another big win.

[19:46] *** konundra_ joined
[19:47] <dalek> roast: 0bdad76 | (Elizabeth Mattijsen)++ | .gitignore:

[19:47] <dalek> roast: Make sure we ignore any generated rakudo.parrot files

[19:47] <dalek> roast: review: https://github.com/perl6/roast/commit/0bdad76f3c

[19:48] <lizmat> seems one can now rm t/spec/*/*.rakudo

[19:50] <timotimo> indeed, rakudo.parrot and rakudo.jvm are the new files

[19:51] <[Coke]> colomon++ noticed that was borked earlier.

[19:51] <[Coke]> (throws_like)

[19:52] *** colomon left
[19:52] *** berekuk joined
[19:52] <jnthn> Of course, the interesting question is, "why"...

[19:52] *** colomon joined
[19:53] <sorear> I might also do applet stuff later.

[19:53] * colomon just blew up his IRC program trying to figure out who else is talking about throws_like

[19:53] <sorear> and dukeleto wants me to do a real-time GC (for Parrot), which sounds fun

[19:54] <jnthn> aha, S04-exception-handlers/catch.t fails with the same error. It's probably easier to track it down from there...

[19:54] *** moritz_ joined
[19:55] <diakopter> sorear: do you mean precisely real-time, or actually wait-free

[19:55] *** ugexe left
[19:57] <sorear> diakopter: hard real time.  there is a fixed bound on the number of cycles allocate is allowed to spend before returning, and a guarantee that allocate will never fail as long as total retained objects remains below a prespecified fraction of the heap size

[19:58] <colomon> jnthn: if you're talking about the "Wrong number of arguments passed; expected 1..1, but got 0", loads of files are doing that -- I suspect every one that calls throws_like.  Possibly every one with exception handling at all?

[19:58] <sorear> I don't care whether locks are used, as long as we can prove that the waits are limited

[19:58] *** moritz_ left
[19:59] *** pjcj joined
[19:59] *** moritz_ joined
[19:59] <jnthn> colomon: well, turns out CATCH itself is busted!

[19:59] *** moritz_ left
[20:00] <jnthn> How the heck do we pass 70% of the tests with a busted CATCH... :)

[20:00] <colomon> jnthn: I'm thinking if you fix it, the results are going to be stupendous.  ;)

[20:00] *** ugexe joined
[20:00] <jnthn> Plenty else is busted :P

[20:01] <sorear> jnthn: rakudo catch, nqp catch, or both?

[20:01] <jnthn> sorear: Rakudo only

[20:01] <colomon> jnthn: I'm not surprised by CATCH being broken; as nearly as I could tell by adding say statements, the problem had to be happening somewhere between try and CATCH, inclusive.

[20:01] <sorear> jnthn: note that there's a bit of a semantic change(?) with nqp catch

[20:02] <sorear> jnthn: you may have noticed that in the REPL all exceptions resume

[20:03] <jnthn> sorear: Oh, I was wondering when that got regressed...

[20:04] <sorear> hmm, I can't reproduce the REPL exceptions bug right now.  maybe jnthn++ fixed that?

[20:04] <sorear> > say 1; nqp::null().gist; say 3

[20:04] <sorear> 1

[20:04] <sorear> Can not call method 'gist' on a null object

[20:04] <sorear> >

[20:04] *** moritz_ joined
[20:04] *** moritz_ left
[20:05] *** kaare_ left
[20:05] <jnthn> sorear: I saw it in Rakudo's REPL today

[20:06] <jnthn> heh...anybody want to fix a typo in roast? :)

[20:06] <jnthn> S04-phasers/begin.rakudo.jvm.......................   8    0    0    1    9

[20:06] <jnthn> 1 skipped: cannot assing to non-container

[20:07] <jnthn> ...well, that's a pain in the butt :P

[20:07] <lizmat> jnthn: will fix

[20:07] <sorear> jnthn: another thing you may be aware of

[20:07] <sorear> Stefans-MacBook-Air:nqp-jvm sorear$ ./nqp -e 'sub bob() { nqp::null().foo }; { bob(); say("hi"); CATCH { nqp::resume($!) } }'

[20:07] <sorear> hi

[20:07] <sorear> the doc comment for ExceptionHandling.throwInternal says it's not resumable, but this is manifestly wrong.

[20:07] *** ugexe left
[20:08] <jnthn> sorear: um, interesting :)

[20:08] *** ugexe joined
[20:10] <dalek> roast: 056fe4e | (Elizabeth Mattijsen)++ | S04-phasers/begin.t:

[20:10] <dalek> roast: Only the rakudo on the JVM can't do these tests

[20:10] <dalek> roast: 

[20:10] <dalek> roast: spotted by jnthn++

[20:10] <dalek> roast: review: https://github.com/perl6/roast/commit/056fe4ed71

[20:10] * timotimo is measuring the time between jnthn complaining about a busted CATCH and jnthn pushing the commit to fix it

[20:11] <dalek> rakudo/nom: 38173e7 | jnthn++ | src/Perl6/Actions.nqp:

[20:11] <dalek> rakudo/nom: Initial fix to CATCH.

[20:11] <dalek> rakudo/nom: 

[20:11] <dalek> rakudo/nom: Now it at least *sometimes* works.

[20:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/38173e77a9

[20:11] *** moritz_ joined
[20:11] <jnthn> lizmat: uh, no, that needs to be fudged for Rakudo in general

[20:11] <jnthn> lizmat: I just meant the typo in the word assign :P

[20:11] <sorear> Stefans-MacBook-Air:nqp-jvm sorear$ ./nqp -e 'sub bob() { nqp::null().foo }; { bob(); CATCH { say("Ex: "~$!); nqp::resume($!) } }'

[20:11] *** moritz_ left
[20:11] <sorear> Ex: Can not call method 'foo' on a null object

[20:11] <sorear> more fun ^

[20:11] <sorear> Ex: java.lang.RuntimeException: Stooge exception leaked

[20:11] <sorear> Stefans-MacBook-Air:nqp-jvm sorear$

[20:12] <lue> timotimo: 12m for a partial fix :)

[20:12] <jnthn> ...OK, so the comment is right (they're not resumable if you want anything to end well). :)

[20:13] <sorear> but why is it called "stooge"?

[20:13] <dalek> roast: 07b53b5 | (Elizabeth Mattijsen)++ | S04-phasers/begin.t:

[20:13] <dalek> roast: Per request of jnthn

[20:13] <dalek> roast: review: https://github.com/perl6/roast/commit/07b53b58eb

[20:13] <sorear> and why is there only one of them? :)

[20:13] <cognominal> I have tried to explain our problem in this gist. And it made me run into another problem.  https://gist.github.com/cognominal/5846277

[20:13] *** ugexe left
[20:13] *** ugexe joined
[20:14] <jnthn> sorear: dieInternal returns an exception so we can write "throw ExceptionHandling.dieInternal(...)" and Java compiler is happily convinced we're not coming back.

[20:14] <lizmat> jnthn: hmmm‚Ä¶. seems I got it wrong again   :-)   should learn to read

[20:14] <lizmat> anyway, I got the impression the test passes

[20:14] * lizmat is doublechecking

[20:16] *** moritz_ joined
[20:16] *** moritz_ left
[20:17] <sorear> jnthn: note that, afaict, perl6_skip_handlers_in_rethrow is unneeded on jvm because ExceptioonHandling.java already contains logic to never reenter a handler

[20:17] <jnthn> sorear: Correct.

[20:17] *** logie left
[20:17] <jnthn> sorear: That's why we just do nothing on the JVM :)

[20:18] <jnthn> Somehow, at the moment, it ends up doing everything fine inside the CATCH...then the exception gets re-thrown again.

[20:19] *** dmol left
[20:23] *** sriliam joined
[20:23] <lizmat> jnthn: S04-phasers teet for our that test runs fine in rakudo, the todo/skip was unneccesary

[20:24] <lizmat> *tst

[20:24] <lizmat> *test

[20:24] <lizmat> grrrrr

[20:25] <lizmat> jnthn: so should I fudge rakudo.jvm?  or add it to the ~30% remaining  :-)

[20:25] <jnthn> lizmat: I'd rather not fudge stuff JVM-specific yet

[20:25] <lizmat> then all is fine

[20:25] <jnthn> lizmat: for now it's more helpful they fail outright so we can see what's left to do

[20:26] <lizmat> agree

[20:27] <lizmat> coming back to the keeping the capture trick with |c, I guess you cannot use that on multimethods, as it will change the signature, right?

[20:28] *** ssutch joined
[20:28] *** konundra left
[20:28] <ssutch> hello perl6!

[20:28] <lizmat> ssutch!

[20:28] <moritz> Files=713, Tests=19787, 2919 wallclock secs (12.13 usr  2.76 sys + 44.96 cusr 11.68 csys = 71.53 CPU)

[20:29] <sorear> ssutch!

[20:29] <sorear> moritz!!

[20:29] *** konundra_ left
[20:29] <ssutch> peeps!

[20:29] <sorear> I like how I can tell that it's a jvm test just by looking at the times

[20:30] <dalek> rakudo/nom: 39d29d8 | (Elizabeth Mattijsen)++ | src/core/Any.pm:

[20:30] <dalek> rakudo/nom: Remove superfluous named parameter

[20:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/39d29d8d27

[20:31] <moritz> https://gist.github.com/moritz/5846436 # complete summary

[20:31] <moritz> sorear: aborting many tests makes for a fast run, yes :-)

[20:32] <moritz> SCNR

[20:32] <labster> r: say IO::Spec.updir() # use this timotimo

[20:32] <camelia> rakudo 7f0af9: OUTPUT¬´..‚ê§¬ª

[20:33] * moritz -> sleep

[20:33] *** moritz left
[20:33] <sorear> moritz: more looking at the difference between wall and usr

[20:33] <lizmat> fwiw, the 19787 puts it at 75%+ in my book

[20:33] <jnthn> lizmat: That's attepted, not passed

[20:34] <lizmat> ah, ok  :-(

[20:37] <colomon> lizmat: no frowns, the rate of progress here is phenomenal.  Just not quite that fast.  ;)

[20:39] *** sriliam left
[20:40] <cognominal> I added a comment in my gist. As said by xlat-home the result of the first iteration does not match the behavior explained by pmichaud

[20:44] *** sftp joined
[20:46] *** FROGGS[mobile] left
[20:46] <dalek> specs: 9b6b82a | (Elizabeth Mattijsen)++ | S32-setting-library/Containers.pod:

[20:46] <dalek> specs: Spec Hash.exists and Hash.delete as internal methods

[20:46] <dalek> specs: review: https://github.com/perl6/specs/commit/9b6b82a469

[20:48] *** ugexe left
[20:48] *** ugexe joined
[20:48] <raiph> moritz

[20:48] <masak> raiph

[20:48] <sorear> raiph: ENOMORITZ

[20:49] <raiph> hi sorear: moritz's irclogs are down; anyone know an alternate irclog url?

[20:49] <lizmat> sleep&

[20:50] <sorear> .oO( file:///Users/sorear/irclogs/freenode/#perl6.log )

[20:50] <raiph> :)

[20:50] * masak .oO( we know the logs are down, see the backl... oh wait )

[20:50] <sorear> http://colabti.org/irclogger/irclogger_log/perl6?date=2013-06-23

[20:51] <raiph> i recall there being another one. it was mentioned on channel. so i could just sear .. oh wait

[20:51] <raiph> thx

[20:51] *** ChanServ sets mode: +o sorear

[20:51] <masak> losing one's logs is like losing one's glasses.

[20:52] *** sorear changes topic to: ¬ª√∂¬´ Welcome to Perl 6! | http://perl6.org/ | evalbot usage: 'perl6: say 3;' or rakudo:,  niecza:, std:, or /msg camelia perl6: ... | irclog: http://colabti.org/irclogger/irclogger_log/perl6 | UTF-8 is our friend!

[20:52] *** sorear sets mode: -o sorear

[20:52] <sorear> will change it back once deutsche telekom gets their act together

[20:54] *** PacoAir left
[20:55] *** Rotwang left
[20:59] <jnthn> yays, jsut got S04-exception-handlers/catch.t to pass in full

[21:00] <labster> jnthn++

[21:02] <sorear> jnthn: \o/

[21:02] <jnthn> And seems throws_lajk now works too :)

[21:03] <jnthn> er, like :)

[21:03] *** moritz joined
[21:03] *** moritz left
[21:04] <timotimo> i re-made most of the camelia logo

[21:04] <timotimo> there was some *weird* stuff in the svg

[21:04] * masak .oO( like a big happy butterfly )

[21:04] <sorear> .oO( jimmy hoffa's body? )

[21:07] <FROGGS_> *cough* http://usev5.wordpress.com/

[21:08] *** sftp left
[21:08] *** moritz joined
[21:08] <sorear> FROGGS_: is that an actual book?

[21:08] *** moritz left
[21:08] <lue> .oO( Hand-crafted lines you've now mercilessly tossed aside in favor of more precise ones? )

[21:08] <FROGGS_> sorear: no

[21:09] <jnthn> meh, I busted something else while fixing the exception stuff...

[21:09] <jnthn> Take 2.

[21:10] *** sftp joined
[21:10] <sorear> "You know the Inline modules? Well, it is not quiet like that"

[21:10] <sorear> .oO( I can has commitbit? )

[21:10] <TimToady> FROGGS_: ss/test suite if from/test suite is from/

[21:10] *** _ilbot joined
[21:10] *** _ilbot left
[21:10] *** xlat-home left
[21:11] <FROGGS_> jnthn: btw, my test_summary script generates a REGRESSION file, in case a test file looses passes or the plan, might be handy for you too

[21:11] <FROGGS_> TimToady: thanks, will fix

[21:11] <masak> FROGGS_: s/quiet nice/quite nice/

[21:11] <FROGGS_> sorear: to the repo? sure

[21:11] <FROGGS_> damn it *g*

[21:11] <sorear> FROGGS_: to the blog :p

[21:11] <sorear> s/quiet/quite/

[21:12] <FROGGS_> sorear: does that work?

[21:12] <masak> s/Quiet Awesome/Quite Awesome/

[21:12] <FROGGS_> meh

[21:12] *** _ilbot joined
[21:12] <sorear> quiet is the opposite of noisy.

[21:12] <sorear> you want quite.

[21:12] <masak> FROGGS_++ # quiet a nice post :)

[21:12] *** _ilbot left
[21:13] <FROGGS_> hehe

[21:13] <masak> happy to report I correctly guessed which were the 2.5 languages before seeing it at the bottom :P

[21:14] <FROGGS_> masak++ # yepp, :o)

[21:15] <masak> FROGGS_++ # v5

[21:16] <jnthn> "Not Quiet Perl" - is that a comment on its stack traces? :D

[21:16] <jnthn> FROGGS_++

[21:16] <FROGGS_> hehe

[21:16] <FROGGS_> no, fixed that too

[21:16] <FROGGS_> looks like a problem with quiet/quite

[21:17] <timotimo> my painstakingly fixed version of camelia.svg is 23kb big instead of the previous 160kb

[21:17] <timotimo> KB actually

[21:17] <timotimo> but i don't know if i can create a .odg file from it properly

[21:18] <flussence> you can only find out if you try

[21:19] *** vm joined
[21:19] <colomon> FROGGS_ blog?

[21:19] *** _ilbot joined
[21:19] *** _ilbot left
[21:20] <FROGGS_> colomon: yesh

[21:20] <colomon> link?

[21:20] <colomon> pretty please?

[21:20] <FROGGS_> http://usev5.wordpress.com/

[21:20] <colomon> I like the name.  ;)

[21:20] <colomon> FROGGS_++

[21:21] <FROGGS_> well, froggs.* and allthewaydown.* were already taken :/

[21:23] *** fridim_ left
[21:26] *** ugexe left
[21:27] *** ugexe joined
[21:27] <timotimo> i made an odg version and will now try to make a .jpg and .ico files for 32x32 and 16x16

[21:27] *** _ilbot joined
[21:28] *** _ilbot left
[21:30] <dalek> specs: 0cca600 | (Brent Laabs)++ | S32-setting-library/Numeric.pod:

[21:30] <dalek> specs: round method produces a Real, not always Int

[21:30] <dalek> specs: provided a better description of what the specced algorithm actually does

[21:30] <dalek> specs: review: https://github.com/perl6/specs/commit/0cca600925

[21:31] <timotimo> h, those ico files were hand-crafted. very good.

[21:31] <timotimo> holy hell, that .jpg file deserves to get nuked

[21:31] <timotimo> (no offense, larry)

[21:32] <sorear> um

[21:32] <sorear> that's line art

[21:32] <sorear> this is 2013

[21:32] <sorear> isn't png supported yet?

[21:33] *** _ilbot joined
[21:33] *** _ilbot left
[21:34] <jnthn> sorear: I don't suppose you have any Awesome Ideas what we might be able to do on the whole "method code too large" thing that some spectests are hitting?

[21:35] <jnthn> (Aside from "generate better code"...)

[21:35] <timotimo> sorear: i am replacing the .jpg and .pdf versions with .odf and .svg and .png

[21:37] *** moritz joined
[21:37] *** moritz left
[21:37] *** fridim_ joined
[21:38] <labster> timotimo++: camelia is no longer a decade behind

[21:38] <dalek> mu: 5af0e6c | (Timo Paulssen)++ | misc/camelia. (5 files):

[21:38] <dalek> mu: rework camelia.svg, create .png, .odg and delete .jpg, .pdf

[21:38] <dalek> mu: review: https://github.com/perl6/mu/commit/5af0e6ce44

[21:39] <timotimo> :)

[21:41] *** _ilbot joined
[21:41] *** _ilbot left
[21:42] *** moritz joined
[21:42] *** moritz left
[21:42] <labster> the new camelia is so clean, she shows off the dead pixels in my  monitor beautifully

[21:43] *** vm left
[21:44] <labster> chromatic-- for trolling

[21:44] <sorear> jnthn: I'm actually working on "generate better code"

[21:45] <jnthn> sorear: yay :)

[21:45] <sorear> jnthn: I'm not sure how much better I can make it, though, and so eventually we'll need to think about method splitting

[21:45] <sorear> I noticed you have a little hack in the post-derialization codegen :)

[21:45] <jnthn> sorear: Yeah... But we know a lot about the structure of that :)

[21:46] <jnthn> sorear: It's costing us test files like rx.t

[21:46] <sorear> How many spectests are hitting code too large?

[21:46] <sorear> I mean we compile the setting fine, how many spectests are larger than the setting?

[21:46] <jnthn> 8ish

[21:46] <sorear> the setting takes three minutes to compile on parrot, how long does rx.t take to compile on parrot?

[21:46] <jnthn> The problem is amount of code in a particular QAST::Block

[21:46] <jnthn> The setting doesn't have any crazily long methods 

[21:47] <jnthn> Test files, however, may just be one HUGE swathe of calls, all in a block.

[21:47] <sorear> yeah, the codegen changes I'm working on are directed closely at calls

[21:48] <jnthn> Case in point: https://github.com/perl6/roast/blob/master/S05-mass/rx.t

[21:48] <sorear> and the "dump everything on the stack, then immediately reload" behavior

[21:48] <jnthn> A 3000 line single block

[21:48] <jnthn> Yes, at the moment it's doing the "correct, but suboptimal" thing there.

[21:48] <TimToady> why is camelia wearing black lipstick now?

[21:48] <sorear> I think we can eliminate that in most cases by making StackState cleverer, but I haven't worked out all the details yet

[21:49] <jnthn> Yeah, when I was doing it I pondered it and the details felt...hairy... :)

[21:49] <jnthn> So I did the simple thing so I could move on.

[21:49] <labster> TimToady: she's 13, it must be a Goth phase

[21:50] <sorear> the png looks OWWW

[21:50] <sorear> https://raw.github.com/perl6/mu/5af0e6ce44e09d4df7680bfa8d7da27cac2c3b21/misc/camelia.png # look at those cracked lips

[21:50] <FROGGS_> I believe this is a bit out of date: http://www.perl6.org/archive/people.html

[21:50] <sorear> and I think the screen printing on her wings is getting ready to peel off

[21:52] *** _ilbot joined
[21:52] <TimToady> also, the .pdf is the original, so not sure you should lose it

[21:52] *** _ilbot left
[21:53] <dalek> nqp: 49eb104 | jnthn++ | src/vm/jvm/ (2 files):

[21:53] <dalek> nqp: Provide a way to force exit after unwind.

[21:53] <dalek> nqp: 

[21:53] <dalek> nqp: This is needed to support the nqp::p6return op. On the JVM, we always

[21:53] <dalek> nqp: promote exception handlers into their own blocks, unlike on Parrot.

[21:53] <dalek> nqp: While this rarely leaks out, it did in this case; this is used to

[21:53] <dalek> nqp: contain the leak.

[21:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/49eb1044ea

[21:53] <colomon> FROGGS_++

[21:54] <dalek> rakudo/nom: b9869c2 | jnthn++ | src/vm/jvm/Perl6/Ops.nqp:

[21:54] <dalek> rakudo/nom: Make p6return force exit of outer handler block.

[21:54] <dalek> rakudo/nom: 

[21:54] <dalek> rakudo/nom: This means a CATCH with a matching when or a default will now actually

[21:54] <dalek> rakudo/nom: act handled rather than always rethrowing.

[21:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b9869c2b3f

[21:54] <jnthn> Between those two we attempt (no idea about pass) ~ 600 more tests, or thereabouts...

[21:55] <jnthn> oh, some of them may be other things I did earlier...

[21:55] <jnthn> Anyway, improvement.

[21:55] <sorear> jnthn: can you explain what's going on in that nqp commit to me?

[21:55] <jnthn> sorear: Exception handlers on Parrot are generated "in line", in a single .sub

[21:55] <jnthn> sorear: That means being able to jump into a sub some way down the stack, which isn't really achievalbe on the JVM

[21:56] <jnthn> sorear: So the handler logic gets promoted to a block of its own. That's fine, but there's a place that relied on leaving from the handler meant leaving the block the handler was in. So it was "off by one" on the JVM.

[21:56] <jnthn> sorear: That plus the Rakudo commit I just pushed work around it.

[21:57] <sorear> why can't you just use UnwindException to leave the handler?

[21:58] <colomon> "a bit out of date" is a bit of an understatement -- that list predates my 2009 exposure to the project

[21:58] <sorear> niecza gets along fine without an extra bit in the callframe

[22:01] <jnthn> sorear: Probably could, I was going for the least disruptive change for now.

[22:01] <jnthn> Hm, it's not immediately clear to me how to...

[22:02] <jnthn> Can be revisited at some point, if it works out neater/cheaper another way. Which will almost certainly be the case for the exception stuff.

[22:03] <sorear> extra code in every block just makes me a little sad :)

[22:03] <jnthn> *nod*

[22:04] <jnthn> I suspect the whole exception stuff can be cleaned up somewhat.

[22:04] <jnthn> There's probably more Parrotisms in there that could go, like the "skip in rethrow" that was already done away with on JVM.

[22:05] <sorear> (finding parrotisms)++

[22:07] <jnthn> Moar's handlers are vaguely cute in so far as you can just point the handler of a next/last/redo at the right place in the loop and there's no actual handler, it just unwinds and sets teh PC and done. :)

[22:08] <sorear> niecza is the same way.

[22:08] <sorear> also, the code generator is smart and optimizes a throw in the same block as a handler into a goto

[22:09] <sorear> which combines really nicely with block inling

[22:11] *** moritz joined
[22:11] *** skids joined
[22:11] *** moritz left
[22:12] *** daniel-s left
[22:13] *** daniel-s joined
[22:15] <sorear> jnthn: I think block splitting is not impossible, but it probably has to be done at the jast2bc level, and it will have a substantial run-time perfomance penalty...

[22:16] <jnthn> sorear: I don't think any code where performance matters is likely to hit this, though. :)

[22:17] *** moritz joined
[22:21] *** _ilbot joined
[22:21] *** _ilbot left
[22:21] *** moritz left
[22:31] *** _ilbot joined
[22:31] *** _ilbot left
[22:34] *** moritz joined
[22:35] *** moritz left
[22:38] *** _ilbot joined
[22:39] *** _ilbot left
[22:41] <masak> 'night, #perl6

[22:49] *** _ilbot joined
[22:49] *** _ilbot left
[22:58] *** echoprinter joined
[23:15] <FROGGS_> .tell masak good morning! I updated the gist https://gist.github.com/FROGGS/5845176

[23:15] <yoleaux> FROGGS_: I'll pass your message to masak.

[23:16] <sorear> good morning FROGGS_

[23:17] <FROGGS_> morning sorear 

[23:18] <jnthn> wait, morning?

[23:18] <jnthn> :)

[23:19] <FROGGS_> almost O.o

[23:20] *** moritz joined
[23:20] *** moritz left
[23:23] *** gdey joined
[23:24] <ssutch> is it possible to run methods to a class?

[23:24] <diakopter> run?

[23:24] <ssutch> like Message.dostuff = sub ($obj, $stuff) { } 

[23:25] <diakopter> that's the MONKEY_PATCHING thing sorear mentioned to you the other day 

[23:25] *** moritz joined
[23:26] *** moritz left
[23:27] <sorear> (method ($stuff) { ... })($obj, $thing)

[23:27] <flussence> you can assign anonymous subs to variables, if that's what you mean.

[23:28] <ssutch> i am trying to generate classes at runtime instead of compile classes

[23:28] <jnthn> Use the MOP

[23:29] <flussence> I was going to say that... does it have any decent docs though?

[23:29] <jnthn> Maybe some in S12

[23:29] <ssutch> (not afraid to read code)

[23:29] <jnthn> Also, http://jnthn.net/papers/2012-gpw-meta-programming.pdf has examples of doing exactly that

[23:30] <ssutch> oh sweet

[23:30] <flussence> I know the things like ^add_method and ^compose_class or whatchamacallit, but I don't see those in the specs at all...

[23:31] *** logie joined
[23:31] <ssutch> jnthn is this talk online?

[23:31] <jnthn> ssutch: I'm not aware of any videos of it, sadly.

[23:33] <ssutch> shucks

[23:33] <ssutch> this helps a lot, thanks!

[23:34] *** _ilbot joined
[23:35] *** _ilbot left
[23:36] *** moritz joined
[23:36] *** moritz left
[23:37] <FROGGS_> gnight all

[23:41] *** FROGGS_ left
[23:41] *** moritz joined
[23:41] *** moritz left
[23:45] *** FOAD left
[23:46] *** FOAD joined
[23:48] *** spider-mario left
[23:52] <timotimo> TimToady: i will now restore the lipstick

[23:54] *** moritz joined
[23:54] *** moritz left
