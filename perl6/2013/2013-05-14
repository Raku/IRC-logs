[00:04] *** leprevost left
[00:08] *** Timbus joined
[00:17] *** leprevost joined
[00:23] *** rjbs joined
[00:27] *** pecastro left
[00:34] *** jaldhar_ left
[00:36] <gtodd> p5eval: use autobox ;

[00:36] <p5eval> gtodd: ERROR: Can't locate autobox.pm in @INC (@INC contains: /lib) at (eval 7) line 1.BEGIN failed--compilation aborted at (eval 7) line 1.

[00:36] <gtodd> :-)

[00:36] *** Chillance left
[00:37] *** fgomez joined
[00:38] * gtodd wonders if there's a perl5i compiler bot along with p5eval, rakudo, niecza

[00:39] *** kbenson1 left
[00:40] <diakopter> p5eval: use perl5i::2;

[00:40] <p5eval> diakopter: ERROR: Can't locate perl5i/2.pm in @INC (@INC contains: /lib) at (eval 7) line 1.BEGIN failed--compilation aborted at (eval 7) line 1.

[00:40] *** kbenson joined
[00:41] *** eternaleye joined
[00:41] *** eternaleye left
[00:41] *** eternaleye joined
[00:43] *** lizmat joined
[00:44] *** jaldhar_ joined
[00:45] *** autumn joined
[00:46] *** [bjoern] left
[00:47] <diakopter> gtodd: oh, I presume perl5i uses autobox...

[00:51] *** kbenson left
[00:52] *** kbenson joined
[00:53] *** snarkyboojum joined
[00:58] *** dayangkun joined
[00:59] *** betterworld joined
[01:05] *** anuby joined
[01:23] *** FROGGS joined
[01:24] *** kbenson left
[01:28] *** eternaleye left
[01:31] *** eternaleye joined
[01:41] *** cognominal joined
[01:46] *** berekuk joined
[01:48] *** berekuk left
[02:05] *** kurahaupo left
[02:05] *** kurahaupo joined
[02:07] *** ingy joined
[02:19] *** dayangkun left
[02:22] <dalek> perl6-bench: 75540d3 | (Geoffrey Broadwell)++ | timeall:

[02:22] <dalek> perl6-bench: Properly handle best_times() and subtract_times() for scalable tests in timeall

[02:22] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/75540d3d13

[02:22] <dalek> perl6-bench: 796439f | (Geoffrey Broadwell)++ | analyze:

[02:22] <dalek> perl6-bench: Refactor options processing in analyze

[02:22] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/796439f995

[02:22] <dalek> perl6-bench: d58e086 | (Geoffrey Broadwell)++ | analyze:

[02:22] <dalek> perl6-bench: Factor analyze_timings_files() out of analyze MAIN()

[02:22] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/d58e086f3b

[02:22] <dalek> perl6-bench: e21737c | (Geoffrey Broadwell)++ | analyze:

[02:22] <dalek> perl6-bench: Begin fixing analyze to handle new scaled timings files from timeall: handled ungrouped compiler info

[02:22] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/e21737c653

[02:24] *** japhb_ left
[02:26] *** dayangkun joined
[02:29] *** lustlife joined
[03:02] *** japhb left
[03:02] *** japhb joined
[03:03] *** senaxfz joined
[03:21] *** senaxfz left
[03:29] *** preflex_ joined
[03:29] *** preflex_ is now known as preflex

[03:45] *** japhb_ joined
[03:58] *** leprevost left
[04:09] *** cognominal left
[04:25] *** Psyche^ joined
[04:28] *** Psyche^ is now known as Patterner

[04:45] <diakopter> .tell moritz I *love* the collapsed join/part msgs; nice!

[04:45] <yoleaux> diakopter: I'll pass your message to moritz.

[05:09] *** ingy left
[05:10] *** genehack joined
[05:13] *** SamuraiJack joined
[05:13] *** kshannon joined
[05:15] *** ingy joined
[05:17] *** ruoso joined
[06:07] *** kaleem joined
[06:43] *** FROGGS left
[06:48] *** domidumont joined
[06:55] *** domidumont left
[06:56] *** domidumont joined
[06:56] *** FROGGS joined
[07:07] *** frdmn joined
[07:16] <moritz> good morning

[07:16] <yoleaux> 04:45Z <diakopter> moritz: I *love* the collapsed join/part msgs; nice!

[07:16] * moritz too

[07:16] <sorear> good morning moritz.

[07:17] <FROGGS> morning

[07:17] *** kurahaupo left
[07:39] *** cibs joined
[07:41] *** pencilk joined
[07:42] <lizmat> morning #perl6!

[07:43] <FROGGS> morning lizmat 

[07:43] <lizmat> 1 spectest failure after my :delete :exists fixes, checking now

[07:44] <dalek> v5: 15fab88 | (Tobias Leich)++ | lib/Perl5/ (2 files):

[07:44] <dalek> v5: dispatch prefix:<local> to prefix:<temp>

[07:44] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/15fab88e7a

[07:44] <sorear> morning lizmat!

[07:44] *** dmol joined
[07:45] *** daxim joined
[07:51] *** berekuk joined
[07:58] <lizmat> so what is the right way of running a single spectest test-file?

[07:58] *** fhelmberger joined
[07:58] <tadzik> ./perl6 t/spec/test/file?

[07:59] <nwc10> I thought ./perl6 -Ilib path/to/it

[07:59] <tadzik> or prove -e perl6 (...)

[07:59] <tadzik> but fudge it first

[07:59] <lizmat> you mean, run the .rakudo version?

[07:59] <tadzik> yeah

[08:00] <lizmat> the thing is, if I run this inside the spectest, I get this:

[08:00] <lizmat> t/spec/S03-feeds/basic.rakudo ............................. All 19 subtests passed 

[08:00] <lizmat> 	(less 5 skipped subtests: 14 okay)

[08:00] <lizmat> if I run it separately, I get: # Looks like you planned 19 tests, but ran 21

[08:00] <lizmat> # FUDGED!

[08:01] <FROGGS> make sometests TESTFILES=t/spec/...

[08:01] *** pencilk left
[08:01] <moritz> so, it complains about a wrong test plan, or that it ran too many tets

[08:01] <FROGGS> this will fudge too, and then  I usually run the .rakudo test directly, to get some output

[08:02] <lizmat>   Parse errors: Bad plan.  You planned 19 tests but ran 21.

[08:02] <lizmat> FROGGS++ that generates the test summary report

[08:02] <lizmat> and indeed… 2 errors

[08:03] <lizmat> seems it is getting too many "ok 15 - # SKIP double-ended feeds" now

[08:03] <lizmat> hmmm...

[08:05] <lizmat> it says that is both ok, and failed? https://gist.github.com/lizmat/5574406

[08:06] <moritz> where does it say it's ok?

[08:07] <moritz> all subtests passing is not sufficient for a test file passing

[08:07] <moritz> you also need to satisfy the test plan, and exit with a return code of 0

[08:08] <dalek> v5: 630b49f | (Tobias Leich)++ | STATUS.md:

[08:08] <dalek> v5: status update

[08:08] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/630b49f160

[08:08] <lizmat> aha… ok

[08:11] *** sqirrel joined
[08:12] <lizmat> in the section marked "#?rakudo skip 'double-ended feeds'" I only see 2 times is(), yet it generates 4 "ok N - # SKIP double-ended feeds"

[08:13] <lizmat> is that expected?

[08:13] *** berekuk left
[08:15] *** berekuk joined
[08:16] <moritz> lizmat: there are two sections that are skipped with 'double-ended feeds', and each contains two tests

[08:16] <lizmat> grrr… duh

[08:16] <lizmat> so the plan just seems to be wrong

[08:17] <moritz> $ ack '\b(is|ok|lives_ok|dies_ok)\b' S03-feeds/basic.t|wc -l

[08:17] <moritz> 24

[08:18] <moritz> that's what my manual counting also produces

[08:18] <moritz> @data ==> grep {/<[aeiouy]>/} ==> is($(*), $(@out), 'basic test for $(*)');

[08:18] <moritz> I'm pretty sure fudged won't recognize lines like these as tests

[08:20] <lizmat> grrr: Parse errors: Bad plan.  You planned 24 tests but ran 21.

[08:20] <lizmat> ok, will look at this after fitness, afk for a few hours

[08:23] <dalek> roast: bb94740 | moritz++ | S03-feeds/basic.t:

[08:23] <dalek> roast: fix test plan, rakudo fudging

[08:23] <dalek> roast: 

[08:23] <dalek> roast: also move a block to the end of the file, because

[08:23] <dalek> roast: providing a #?DOES seems to confuse fudge for the subsequent blocks

[08:23] <dalek> roast: review: https://github.com/perl6/roast/commit/bb94740cb3

[08:23] <moritz> lizmat: fixed it for you, that one was a bit tricky

[08:24] <lizmat> ok, cool, running spectest while doing fitness  :-)

[08:24] <lizmat> moritz++

[08:24] <dalek> v5: 9ef59dc | (Tobias Leich)++ | README.md:

[08:24] <dalek> v5: added installation instruction and updated description

[08:24] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/9ef59dc83d

[08:30] *** pecastro joined
[08:36] <moritz> http://perlweekly.com/archive/94.html I wonder if "punpking" is a typo, a pun, or both :-)

[08:39] <shachaf> Perhaps it's all three!

[08:39] <moritz> this is starting to be become recursively recursive

[08:40] *** pecastro_ joined
[08:42] * labster reads

[08:42] <labster> Whoa, how did I explain why companies switch to Python?

[08:44] <moritz> no

[08:44] <moritz> because they have trouble finding good perl programmers?

[08:46] *** dakkar joined
[08:47] *** hlin_ joined
[08:47] *** odoacre_ joined
[08:47] *** cognominal joined
[08:48] *** araujo_ joined
[08:48] *** odoacre_ is now known as odoacre

[08:49] *** pecastro left
[08:49] *** araujo left
[08:50] <tadzik> python is easier, there are more python programers, so using python is cheaper for them

[08:51] *** sqirrel left
[09:06] *** domidumont left
[09:11] *** AMENDEES_ joined
[09:25] *** berekuk left
[09:29] <moritz> http://terralang.org/ seems interesting

[09:29] <moritz> the front page is a bit weak

[09:30] <moritz> but it seems to be designed for code generation

[09:33] *** domidumont joined
[09:35] *** domidumont left
[09:35] *** domidumont joined
[09:38] *** dmol left
[09:40] *** domidumont left
[09:41] *** domidumont joined
[09:44] <nwc10> but which Python?

[09:45] <moritz> python 5.7 of course -- the best of 2.7 and 3.0 combined!

[09:45] *** cognominal left
[09:49] *** woosley left
[09:50] *** xinming left
[09:52] *** xinming joined
[09:58] <dalek> nqp/rak-jvm-support: cdbb9d1 | jnthn++ | src/vm/jvm/ (2 files):

[09:58] <dalek> nqp/rak-jvm-support: Avoid an apparent invokedynamic bug.

[09:58] <dalek> nqp/rak-jvm-support: 

[09:58] <dalek> nqp/rak-jvm-support: Seems that optional args to the resolver can somehow get "lost" in a

[09:58] <dalek> nqp/rak-jvm-support: sufficiently large class file. Weird.

[09:58] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/cdbb9d1896

[09:58] <dalek> nqp/rak-jvm-support: 5eac9c8 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/jast2bc/JASTToJVMBytecode.java:

[09:58] <dalek> nqp/rak-jvm-support: Correct an error.

[09:58] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/5eac9c843d

[09:59] <hoelzro> why is it that there hasn't been a * release since February? is it because the next one will be with a JVM Rakudo?

[09:59] <dalek> rakudo/jvm-support: 35d1f37 | jnthn++ | src/Perl6/World.nqp:

[09:59] <dalek> rakudo/jvm-support: A couple of portability tweaks to module loading.

[09:59] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/35d1f37fd1

[09:59] <dalek> rakudo/jvm-support: a3a2574 | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/ (2 files):

[09:59] <dalek> rakudo/jvm-support: Implement optional parameter binding.

[09:59] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/a3a2574dc3

[09:59] <nwc10> hoelzro: I believe that it's been mentioned on the list (shock, horror!)

[09:59] <jnthn> hoelzro: No, it's 'cus the relesae candidates so far have had failing module tests, iirc.

[09:59] * hoelzro looks

[09:59] <hoelzro> oh, I see

[10:00] <nwc10> because there isn't (yet) a continuious integration process to spot this earlier.

[10:00] <jnthn> *nod*

[10:00] <nwc10> or however it's spelled

[10:01] <hoelzro> alright

[10:01] <hoelzro> seems reasonable

[10:03] *** pecastro_ is now known as pecastro

[10:08] *** domidumont left
[10:15] *** domidumont joined
[10:16] *** anuby left
[10:16] *** rindolf joined
[10:19] *** cognominal joined
[10:26] *** rindolf left
[10:26] *** rindolf joined
[10:27] <lizmat> is there a way to have multiple MMD candidates share the same code block?

[10:27] <jnthn> no

[10:27] <lizmat> too bad  :-)

[10:28] <lizmat> I guess this is really an optimisation issue, to be handled by the optimiser?

[10:29] <jnthn> Well, depends what you're optimizing for.

[10:29] <lizmat> in this case memory, I would think?

[10:29] <jnthn> If it can look at the arguments it's getting to each one and do some inlining specific to each of them, you could potentially come out ahead on speed.

[10:30] <jnthn> So, it's probably a trade-off.

[10:30] <jnthn> (The optimizer already potentially can do that kind of inlining, fwiw.)

[10:31] <jnthn> (Though it can't do dupe code elimination yet.)

[10:31] <lizmat> well, if the code gets serialized, it would mean smaller bytecode files, so faster startup  :-)

[10:31] <moritz> fwiw we once had a syntax   sub f (signature 1) | (signature 2) { ... }

[10:31] <lizmat> I guess that becomes less of an issue with SSD's

[10:31] <moritz> that allowed two multi candidates to share the same code

[10:33] <lizmat> I think it would be an optimizer thing: developers may not see that the code is the same many times

[10:34] <lizmat> otoh, it would mean less maintenance (and less chance of fixing one place where it needed to be fixed in two)

[10:34] <lizmat> anyways, just making sure I'm not forgetting obvious things to do

[10:35] <lizmat> jnthn: would "multi method at_key(Any:U \SELF: $key) is rw {" not also be a candidate for adding a "Mu" type to $key ?

[10:35] <jnthn> lizmat: Hmm...I guess that's the auto-viv one...

[10:36] <jnthn> lizmat: I suppose yes.

[10:36] <lizmat> will do and test

[10:41] *** rindolf left
[10:42] *** rindolf joined
[10:42] *** AMENDEES_ left
[10:42] <Juerd> lizmat: Serialised code for faster startup? Not just with SSDs, but with even with a network filesystem that doesn't sound like a useful optimization. Anything will do at least 10 MB/s now. That's a shitload of code. If you have more than that, the startup overhead is probably the least of your worries.

[10:42] <Juerd> s/S/Smaller s/

[10:43] <Juerd> lizmat: Also, caching will take care of the 2nd and consequent runs.

[10:44] <Juerd> I've seen servers with crashed RAID arrays that continued to serve websites perfectly because everything was in cache :)

[10:49] *** rindolf left
[10:50] *** rindolf joined
[10:52] *** kresike joined
[10:52] *** denisboyun joined
[10:52] <kresike> hello all you happy perl6 people

[10:57] *** robinsmidsrod joined
[11:01] *** rindolf left
[11:03] <colomon> \o

[11:06] <dalek> nqp/rak-jvm-support: 0de5175 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/ (2 files):

[11:06] <dalek> nqp/rak-jvm-support: Initial bits of SC repossession support.

[11:06] <dalek> nqp/rak-jvm-support: 

[11:06] <dalek> nqp/rak-jvm-support: This doesn't serialize/deserialize the repossessions, but at least

[11:06] <dalek> nqp/rak-jvm-support: should mean we start to detect and record them.

[11:06] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/0de5175d23

[11:06] <dalek> nqp/rak-jvm-support: a0f9501 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/SerializationWriter.java:

[11:06] <dalek> nqp/rak-jvm-support: Serialize repossessions table.

[11:06] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/a0f9501adc

[11:11] *** robinsmidsrod left
[11:14] *** robinsmidsrod joined
[11:15] *** robinsmidsrod left
[11:19] *** rindolf joined
[11:19] *** robinsmidsrod joined
[11:25] *** jokar joined
[11:25] *** jokar left
[11:27] *** Targen left
[11:28] *** rindolf left
[11:29] *** rindolf joined
[11:34] *** domidumont left
[11:35] *** domidumont joined
[11:35] *** domidumont left
[11:36] *** domidumont joined
[11:36] *** domidumont left
[11:37] *** domidumont joined
[11:43] *** rindolf left
[11:43] *** rindolf joined
[11:44] <FROGGS> r: my $a = "abc"; say $a ~~ s/b//

[11:44] <camelia> rakudo 2a04f2: OUTPUT«True␤»

[11:47] <FROGGS> r: my $a = "abc"; say $a ~~ s/c$//

[11:47] <camelia> rakudo 2a04f2: OUTPUT«True␤»

[11:54] *** sqirrel joined
[11:54] <FROGGS> r: my $RS = 'c'; sub my_chomp(*@s is rw) { for @s -> $s is rw { say "s: $s"; if $s ~~ s/$RS$// { say $RS } } }; my $a = "abc"; my_chomp($a); say "a: $a"

[11:54] <camelia> rakudo 2a04f2: OUTPUT«s: abc␤a: ab␤»

[11:56] <FROGGS> r: sub my_chomp(*@s is rw) { for @s -> $s is rw { say "s: $s"; if $s ~~ s/c// { say "did it!" } } }; my $a = "abc"; my_chomp($a); say "a: $a"

[11:56] <camelia> rakudo 2a04f2: OUTPUT«s: abc␤a: ab␤»

[11:56] <FROGGS> RAKUDOBUG

[11:56] <FROGGS> r: sub my_chomp(*@s is rw) { for @s -> $s is rw { say "s: $s"; say $s ~~ s/c// } }; my $a = "abc"; my_chomp($a); say "a: $a"

[11:56] <camelia> rakudo 2a04f2: OUTPUT«s: abc␤False␤a: ab␤»

[11:57] *** rindolf left
[11:58] *** rindolf joined
[11:58] <FROGGS> r: my $a = "abc"; for $a -> $s is rw { say $s ~~ s/b// }; say $a

[11:58] <camelia> rakudo 2a04f2: OUTPUT«False␤ac␤»

[11:59] <FROGGS> a bit shorter

[12:00] <colomon> n: my $a = "abc"; for $a -> $s is rw { say $s ~~ s/b// }; say $a

[12:00] <camelia> niecza v24-50-gba63d9a: OUTPUT«True␤ac␤»

[12:02] <FROGGS> nr: my $a = "abc"; for $a -> $s is rw { say $s ~~ /b/; say $/ };

[12:02] <camelia> rakudo 2a04f2, niecza v24-50-gba63d9a: OUTPUT«｢b｣␤␤｢b｣␤␤»

[12:02] <FROGGS> nr: my $a = "abc"; for $a -> $s is rw { say $s ~~ s/b//; say $/ };

[12:02] <camelia> niecza v24-50-gba63d9a: OUTPUT«True␤｢b｣␤␤»

[12:02] <camelia> ..rakudo 2a04f2: OUTPUT«False␤(Any)␤»

[12:02] <FROGGS> substitution only

[12:08] *** d4l3k_ joined
[12:09] *** genehack_ joined
[12:09] *** SamuraiJack_ joined
[12:11] *** integral_ joined
[12:11] *** integral_ left
[12:11] *** integral_ joined
[12:11] *** Ulti joined
[12:11] *** ruoso_ joined
[12:12] *** x2 joined
[12:12] *** fgomez_ joined
[12:12] *** rindolf left
[12:12] *** xinming_ joined
[12:13] *** rindolf joined
[12:16] *** xinming left
[12:16] *** odoacre left
[12:16] *** ruoso left
[12:16] *** SamuraiJack left
[12:16] *** genehack left
[12:16] *** fgomez left
[12:16] *** Ulti_ left
[12:16] *** vaelxon left
[12:16] *** d4l3k_ is now known as dalek

[12:17] <dalek> nqp/rak-jvm-support: 2416ad0 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/SerializationReader.java:

[12:17] <dalek> nqp/rak-jvm-support: Basic repossession handling on deserialize.

[12:17] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/2416ad0a14

[12:17] <dalek> nqp/rak-jvm-support: a7f1e8b | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/SerializationWriter.java:

[12:17] <dalek> nqp/rak-jvm-support: Fix buffer resize fail.

[12:17] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/a7f1e8b111

[12:17] <dalek> nqp/rak-jvm-support: bf18546 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/NFA.java:

[12:17] <dalek> nqp/rak-jvm-support: Quieten NFA serialize NYI.

[12:17] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/bf18546955

[12:20] *** odoacre joined
[12:23] *** rindolf left
[12:24] *** rindolf joined
[12:32] *** rindolf left
[12:33] *** rindolf joined
[12:34] * [Coke] should add a star continuous build, eh?

[12:36] <FROGGS> r: multi sub test { say CALLER::<$_> }; $_ = "hello"; ::("&test")()

[12:36] <camelia> rakudo 2a04f2: OUTPUT«(Any)␤»

[12:37] <FROGGS> r: multi sub test { say CALLER::<$_> }; $_ = "hello"; test()

[12:37] <camelia> rakudo 2a04f2: OUTPUT«hello␤»

[12:37] <FROGGS> jnthn: do you have a hint what is going wrong there?

[12:37] * FROGGS fears that jnthn is saying "you can't do it that way"

[12:40] <jnthn> I can guess, at lesat.

[12:40] <FROGGS> \o/

[12:40] <jnthn> CALLER:: looks a frame out.

[12:40] <jnthn> When you call a multi then you are actually calling a proto which then does the multi-dispatch.

[12:41] *** denisboyun___ joined
[12:41] <jnthn> Really doing that gets costly, though, so a bunch of the time we inline that proto.

[12:41] <jnthn> An indirect call through ::(...) thwarts the optimizer, however. So you have to go via the proto.

[12:41] <jnthn> So in that case there's 2 frames there, not one.

[12:41] <FROGGS> I see

[12:42] <jnthn> Maybe try DYNAMIC:: instead of CALLER::

[12:42] <jnthn> Or CALLER::DYNAMIC::<$_>

[12:42] <FROGGS> r: multi sub test { say DYNAMIC::<$_> }; $_ = "hello"; test()

[12:42] <camelia> rakudo 2a04f2: OUTPUT«(Any)␤»

[12:42] <FROGGS> r: multi sub test { say CALLER::DYNAMIC::<$_> }; $_ = "hello"; test()

[12:42] <camelia> rakudo 2a04f2: OUTPUT«hello␤»

[12:42] <FROGGS> r: multi sub test { say CALLER::DYNAMIC::<$_> }; $_ = "hello"; ::("&test")()

[12:42] <camelia> rakudo 2a04f2: OUTPUT«hello␤»

[12:42] <FROGGS> r: multi sub test { say CALLER::DYNAMIC::<$_> }; $_ = "hello"; test() # took long

[12:42] <camelia> rakudo 2a04f2: OUTPUT«hello␤»

[12:43] <FROGGS> okay, just was a hickup

[12:43] <FROGGS> jnthn++ # thanks!

[12:43] *** integral joined
[12:43] *** integral left
[12:43] *** integral joined
[12:43] <jnthn> Hm, the setting currently loads as far as line 4445, where it ties to construct a Pair and then has a sad...

[12:43] <jnthn> Well, with local patches.

[12:44] <jnthn> Somebody may wish to look at constant folding the ~ operator, BTW.

[12:44] <jnthn> Or why the current folder doesn't manage it.

[12:44] <FROGGS> timotimo: a job for you! :P

[12:45] <FROGGS> but getting to line 4445 sounds pretty cool actually

[12:46] <[Coke]> I don't know what the rollup summary would look like, but at this point, would a daily dump of the build output from a star build be sufficient?

[12:46] <jnthn> Well, we don't run that much up to that point.

[12:46] <moritz> jnthn: prefix ~ or infix ~ ?

[12:46] <jnthn> [Coke]: Pushed to github each day like the roast ones would be awesome, then we can use diff

[12:46] <jnthn> moritz: infix

[12:46] *** rindolf left
[12:47] <jnthn> moritz: I noticed 'cus one bit of the setting does a bunch of ~s (in class Str) and it calls infix:<~> for all of them.

[12:47] *** rindolf joined
[12:47] <moritz> jnthn: iirc I had some bootstrappy issues with some few operators

[12:47] * jnthn currently has epic reams of debugging output.

[12:47] <[Coke]> jnthn: ok. I can have a shell of that done during my lunch break, and finalize it tonight.

[12:47] <jnthn> [Coke]++!

[12:47] *** integral_ left
[12:47] *** denisboyun left
[12:47] <[Coke]> jnthn: do we want the *whole* build output? just the test output?

[12:47] <jnthn> oh...it explodes when making a Pair 'cus I didn't implement named arg binding. It even tells me that :)

[12:47] <[Coke]> (split into files?)

[12:48] <jnthn> [Coke]: The test output sounds like the useful bit, though if the build fails that is also useful....

[12:48] <moritz> jnthn: iirc multiple ~ in one expression are compiled to a listop call; so if one of them isn't known at compile time, nothing is constant folded

[12:48] <[Coke]> "thanks jnthn from several days ago!"

[12:48] <jnthn> moritz: Hm. But all these ones are.

[12:48] *** woosley1 joined
[12:48] <jnthn> moritz: Maybe it's 'cus it's in the setting or maybe 'cus of the list assoc.

[12:48] * jnthn wants to focus on setting loading for now ;)

[12:49] <moritz> oh, it's not marked as 'is pure'

[12:49] <moritz> so I'll try to mark it as that, and then look if the setting still compiles :-)

[12:50] <jnthn> moritz++

[12:50] <dalek> nqp/rak-jvm-support: b546d47 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/P6Opaque.java:

[12:50] <dalek> nqp/rak-jvm-support: Add missing get_storage_spec in P6opaque.

[12:50] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/b546d47359

[12:50] <dalek> nqp/rak-jvm-support: 34dd073 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[12:50] <dalek> nqp/rak-jvm-support: Missing deconts in istype.

[12:50] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/34dd07342b

[12:50] <dalek> nqp/rak-jvm-support: b4d48e2 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[12:50] <dalek> nqp/rak-jvm-support: Revise smart_stringify a bit.

[12:50] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/b4d48e28db

[12:50] <dalek> nqp/rak-jvm-support: bb9f52a | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[12:50] <dalek> nqp/rak-jvm-support: inf/neginf/nan/isnanorinf ops.

[12:50] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/bb9f52a108

[12:51] <moritz> stage optimize finished

[12:51] <moritz> that's a good sign

[12:52] <moritz> fwiw ilbot6 on postgresql has been happily logging for a day now

[12:54] <arnsholt> \o/

[12:54] * [Coke] sees "Quieten" go by in the logs, and misreads it as "Quoten"

[12:54] <arnsholt> moritz: Have you tracked memory usage?

[12:55] * [Coke] assumes that a daily build of star should just use the versions of nqp/parrot in the repo.

[12:56] <[Coke]> (... or maybe master, but I doubt it)

[12:56] <moritz> arnsholt: it's at 695MB :/

[12:56] <moritz> arnsholt: don't know what it started with

[12:57] *** kst joined
[12:57] <FROGGS> moritz: so you can still burn it on cd! \o/

[12:57] <arnsholt> Yeah. I suspect a long-running Zavolaj process will leak memory steadily

[12:57] <arnsholt> It's an unfortunate limitation of the conservative internals we have ATM

[12:57] <moritz> arnsholt++ # making me look at htop found that I had an unnecessary memcached running on my workstation

[12:58] <arnsholt> ^_^

[12:58] * jnthn sees his face in a conf brochure and realizes he really had better figure out what to talk about there :)

[12:58] <arnsholt> =D

[12:58] <jnthn> oh, but it's in November. I've got a bit :)

[12:59] *** SamuraiJack_ left
[13:00] *** kaleem left
[13:00] *** rindolf left
[13:00] <arnsholt> Plenty of time! =)

[13:00] <lizmat> jnthn: who knows what will happen in the mean time!

[13:00] *** rindolf joined
[13:05] * [Coke] decided he's not going to YAPC::NA this year, folks. I'll trying to be online during the hackathons, though.

[13:06] <moritz> then at leastn I'm not the only one missing from the party :-)

[13:06] <[Coke]> *try to be

[13:08] *** _daniel-s__ joined
[13:09] *** PacoAir joined
[13:11] *** daxim left
[13:12] *** daxim joined
[13:13] * pmichaud is sad Coke++ won't be at yapc::na.

[13:13] <pmichaud> good morning, #perl6

[13:14] <lizmat> morning pmichaud!

[13:15] <jnthn> o/ pmichaud 

[13:15] *** rindolf left
[13:15] <FROGGS> hi pmichaud 

[13:15] *** rindolf joined
[13:16] <FROGGS> [Coke]: ó.ò

[13:16] <[Coke]> If only I could somehow use perl in my Java-only work environment...

[13:16] <[Coke]> then maybe I could justify the expense :)

[13:16] <FROGGS> moritz: we still need to find a new date for our mini hackathon :o)

[13:16] <pmichaud> [Coke]: you need to come to the conference to learn about Perl 6 on the JVM.  :)

[13:16] <jnthn> pmichaud: "might it be better to simply change the existing candidates to be :$delete where ?$delete"

[13:17] <jnthn> pmichaud: It would not because the multi-dispatcher can deal with the "required named arg is missing" path rather cheaply.

[13:17] <lizmat> jnthn: this is about my pull request?

[13:18] <pmichaud> jnthn: I'm talking about the case where the named are is present but false.

[13:18] <pmichaud> *named arg

[13:18] <jnthn> pmichaud: Yes, but you removed the !

[13:18] <jnthn> pmichaud: Was that deliberate?

[13:18] <pmichaud> yes.

[13:18] <pmichaud> I'm removing the candidate.

[13:18] <[Coke]> hurm. "make modules-tests" in star doesn't actually error out when there are errors.

[13:18] <pmichaud> I'm removing the !candidate

[13:18] <pmichaud> I'm leaving the existing candidate but making it  :$delete where ?$delete"

[13:18] <pmichaud> so that it's only called if :delete exists and is true.

[13:19] <pmichaud> otherwise, it should fall back to the case of ... oh, wait.

[13:19] <jnthn> Yes but then you force a bind check and invocation of the where block.

[13:19] *** Targen joined
[13:19] <pmichaud> aren't we doing that in the "where 0" case anyway?

[13:20] <lizmat> I was going for making the special case special

[13:20] <lizmat> and the normal case easier, hence no where for the other case

[13:20] *** leprevost joined
[13:20] <lizmat> was that a bad idea?

[13:20] <jnthn> If the multi-dispatcher sees :$delete! then it can quickly look and see if we've any matching named arg, and then just disregard the candidate.

[13:20] <pmichaud> lizmat: to me, the special case is  :delete  :-)

[13:20] <pmichaud> jnthn: I understand that part.

[13:21] <jnthn> If you make it :$delete then it's an optional named so the fast-path won't work.

[13:21] <pmichaud> okay, I meant   :$delete! where ?$delete then

[13:21] <pmichaud> I was thinking of the wrong !

[13:21] <pmichaud> (I was thinking  :$delete where !$delete)

[13:21] <pmichaud> Yes, there should be a ! after :$delete

[13:21] * pmichaud adds to ticket.

[13:21] <jnthn> phew :)

[13:22] <dalek> v5: c0120c2 | (Tobias Leich)++ | / (2 files):

[13:22] <dalek> v5: let chomped do what it is meant for

[13:22] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/c0120c2079

[13:22] <pmichaud> lizmat: I tend to think of  :!delete  or :delete(0) as being the default case (normally we aren't deleting), with :delete being the special case.

[13:23] <pmichaud> thus  :!delete  or :delete(0) should do exactly the same thing as when :delete isn't present at all.

[13:23] <lizmat> the thing is that I found out the hard way, you can't do a "where True"

[13:23] <pmichaud> right, thus ?$delete

[13:23] <lizmat> ah, good point

[13:24] <lizmat> ok, so lose the where 0 candidate, and make the other "$delete! where $delete

[13:24] <pmichaud> well, not yet :)

[13:24] <lizmat> that makes sense to me...

[13:24] *** kaleem joined
[13:24] <lizmat> ah…  :-(

[13:24] <pmichaud> there's a problem with my fallback approach in that if the other candidates don't have a named :$delete arg they'll never match (when we convert postcircumfix to be a sub instead of a method)

[13:25] <pmichaud> unless we add *%_ to all of the candidates.

[13:25] <pmichaud> (well, all of the fallback ones)

[13:25] <pmichaud> jnthn: opinion on ^^^^

[13:27] <[Coke]> https://github.com/rakudo/star/issues/21 - there's some low hanging p5 fruit.

[13:27] <jnthn> We could add a *% without hosing the inline, I *think*.

[13:27] <[Coke]> anyone wants to help get a star release out the door, there's your chance. :)

[13:27] *** rindolf left
[13:28] *** rindolf joined
[13:28] <pmichaud> [Coke]++   oooh, nice.

[13:29] <pmichaud> btw, I'm looking for my p6 tuit level to spike dramatically upward in a week.

[13:29] <[Coke]> \o

[13:29] <pmichaud> (it will be essentially zero after today, though)

[13:29] <pmichaud> lizmat: okay, I'd say go with the fallback approach for now.

[13:30] <pmichaud> as in,  lose the where 0 candidate, and make the existing ones  :$delete! where ?$delete

[13:30] <lizmat> ok, will do that

[13:31] <lizmat> this also fixes my question of sharing code blocks between candidates, btw, at least in this case

[13:32] <FROGGS> (in a week)++

[13:34] <lizmat> pmichaud: hmmm… actually, that won't work  :-(

[13:34] * pmichaud adds an "easy" label to star issue #21

[13:34] <pmichaud> lizmat: won't work because...?

[13:34] <pmichaud> (what did I overlook?  ;-)

[13:35] <lizmat> for exists: then the fall back will not revert the meaning SELF.exists

[13:35] <lizmat> so maybe just have one candidate, and handle the value inside the candidate

[13:35] <lizmat> would that make more sense then?

[13:35] <dalek> rakudo/jvm-support: 71263c6 | jnthn++ | src/core/Stash.pm:

[13:35] <dalek> rakudo/jvm-support: Thinko spotted while debugging.

[13:35] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/71263c6583

[13:35] <dalek> rakudo/jvm-support: 63e5222 | jnthn++ | src/ (2 files):

[13:35] <dalek> rakudo/jvm-support: Set up boxing to Perl 6 types.

[13:35] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/63e5222095

[13:35] <dalek> rakudo/jvm-support: f7ac11d | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/Binder.java:

[13:35] <dalek> rakudo/jvm-support: Implement named (non-slurpy) binding.

[13:35] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/f7ac11dc3e

[13:35] <dalek> rakudo/jvm-support: 89aec58 | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/Ops.java:

[13:35] <dalek> rakudo/jvm-support: Implement nqp::p6listitems.

[13:35] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/89aec58e17

[13:36] * lizmat was under the impression that having more candidates would allow more work to be done at compile time

[13:36] *** mtk joined
[13:36] <pmichaud> ah, yes... exists changes meaning here.  for :exists I'm fine with either separate candidates or a single candidate that handles it 

[13:36] <lizmat> and being able to select candidates for :delete, :exists and :!exists at dompile time

[13:36] <lizmat> *compile

[13:37] <pmichaud> while they're methods we can't do much in the way of compile-time evaluation, but when they become subs we will be able to.

[13:37] <pmichaud> at the moment it might be a slighly premature optimization to try to figure out the best way to go there, though.

[13:37] *** dmol joined
[13:38] <lizmat> ok, fair enough, I guess I assumed we were further along then we are in that respect

[13:38] <lizmat> the exists candidate now becomes: SELF.exists($key) ?^ $exists

[13:39] <lizmat> !(SELF.exists($key) ?^ $exists)

[13:39] <lizmat> actually

[13:39] <moritz> erm

[13:39] <lizmat> ?

[13:39] <moritz> shouldn't it more like $exists ? SELF.exists($key) : SELF.at_key($key)  ?

[13:39] <moritz> wait, I guess I should backlog first

[13:39] * moritz goes into hiding again

[13:40] <lizmat> no, $!exists is now specced to return true if it doesn't exist

[13:40] <lizmat> :-)

[13:40] <lizmat> :!exists rather

[13:40] <moritz> (too many bangs (for the buck) confuse everybody, right? :-)

[13:41] * PerlJam just got here and is already confused  :)

[13:41] <PerlJam> good $localtime all

[13:41] *** rindolf left
[13:41] <pmichaud> also,   can   %h{@keys}:kv($kv)   be written as   %h{@keys}:$kv ?    (just curious)

[13:41] *** rindolf joined
[13:41] <pmichaud> std:  my %h;  say %h{@keys}:$kv

[13:41] <camelia> std b33d8e0: OUTPUT«===SORRY!===␤Variable @keys is not predeclared at /tmp/3RjxgEQE0W line 1:␤------> my %h;  say %h{⏏@keys}:$kv␤Variable $kv is not predeclared at /tmp/3RjxgEQE0W line 1:␤------> my %h;  say %h{@keys}:⏏$kv␤Check fa…

[13:42] <lizmat> r: my %h; say %h<a>:!exists   # should become true

[13:42] <camelia> rakudo 2a04f2: OUTPUT«False␤»

[13:42] <pmichaud> std:  my %h; my @keys; my $kv;   say %h{@keys}:$kv

[13:42] <jnthn> std: my %h; my @keys; my $kv; say %h{@keys}:$kv

[13:42] <camelia> std b33d8e0: OUTPUT«ok 00:00 44m␤»

[13:42] <jnthn> r: my %h; my @keys; my $kv; say %h{@keys}:$kv

[13:42] <camelia> rakudo 2a04f2: OUTPUT«␤»

[13:42] <jnthn> yay, we parse it already too :)

[13:42] <lizmat> pmichaud: another good point...

[13:42] <jnthn> Darn, that adverb parsing was hard work to get right...

[13:42] <jnthn> :)

[13:42] <pmichaud> I'm fine with  :kv($kv)...   I was just curious if :$kv would work there or not.  Go with whatever is easiest to read.

[13:43] <pmichaud> I suspect that trying to figure out adverb parsing cost me about four months in 2005.

[13:43] <pmichaud> I finally made progress when I decided to not figure it out.

[13:44] <lizmat> actual, those :kv fixes were collateral "damage"

[13:44] <lizmat> in preparation on fixing :p / :k / :kv / :v

[13:44] <lizmat> once we have clarity on that

[13:45] <pmichaud> yeah, I wonder if  :p(0)  should be the same as "not present" also.

[13:45] <pmichaud> so that it can just be the  :$p! where $?p   thingy

[13:45] <lizmat> also, I do think there is a point with having :delete:p

[13:46] <lizmat> it would easy slicing out pairs from one hash to another

[13:46] <lizmat> or is there another idiom for that already?

[13:46] <pmichaud> don't know of one... and that one seems "natural"

[13:46] <jnthn> pmichaud: Ouch. It didn't take me that long, though I put it off for at least that long. ;)

[13:47] <jnthn> pmichaud: I had STD to steal from, at least. IN 2005 you didn't so...argh.

[13:47] <pmichaud> right

[13:47] <jnthn> The way it works is, um, special.

[13:47] *** sqirrel left
[13:47] <pmichaud> I finally decided I couldn't block on it anymore if we were going to get anywhere.

[13:48] *** dmol left
[13:49] *** btyler joined
[13:50] <moritz> std: my %h; %h<a b>:p:delete

[13:50] <camelia> std b33d8e0: OUTPUT«ok 00:00 43m␤»

[13:50] *** rindolf left
[13:50] <pmichaud> okay, I have to get to my other tasks... bbl

[13:50] *** rindolf joined
[13:50] <lizmat> pmichaud++

[14:03] *** rindolf left
[14:03] *** rindolf joined
[14:06] *** woosley1 left
[14:07] <dalek> rakudo/jvm-support: bf28293 | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/Ops.java:

[14:07] <dalek> rakudo/jvm-support: Implement nqp::p6arrfindtypes.

[14:07] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/bf28293169

[14:07] <dalek> rakudo/jvm-support: b7c3801 | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/Ops.java:

[14:07] <dalek> rakudo/jvm-support: Implement nqp::p6shiftpush.

[14:07] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/b7c3801323

[14:08] *** xilo left
[14:17] *** rindolf left
[14:17] *** rindolf joined
[14:17] * FROGGS .oO( nqp::p6shush / nqp::p6pift ? )

[14:19] * lizmat represses a Dr. Seuss reference

[14:24] *** donaldh joined
[14:24] <lizmat> fwiw, I had to code the :delete candidate as ":$delete! where so $delete"

[14:24] *** dmol joined
[14:24] *** fhelmberger_ joined
[14:25] <lizmat> without the "so", that candidate would also be selected with :delete(0)

[14:25] <tadzik> doesn't that make ! redundant?

[14:25] <lizmat> the where?  or the so?

[14:25] <moritz> no

[14:25] <tadzik> ah, no, ok

[14:26] <lizmat> not sure whether that is a problem in the selection logic or the smartmatching 

[14:26] <dalek> rakudo/nom: a9f3c63 | moritz++ | src/core/Stringy.pm:

[14:26] *** snarkyboojum_ joined
[14:26] <dalek> rakudo/nom: constant-fold infix:<~>

[14:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a9f3c63d3a

[14:26] <dalek> rakudo/nom: 0d3c9b0 | moritz++ | src/core/Stringy.pm:

[14:26] <dalek> rakudo/nom: potentially constant-fold more stringy operators

[14:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0d3c9b08fd

[14:27] *** FROGGS_ joined
[14:27] <moritz> git grep 'proto sub' | grep -v 'is pure' # potential gold mine for 'is pure' annotations

[14:29] * moritz wonders if &defined can be made to constant-fold

[14:30] <lizmat> I'm not sure you would have many real life situations where that would work

[14:30] * moritz neither

[14:31] *** sivoais_ joined
[14:31] <arnsholt> It'd depend on how good the rest of the constant-folding is, I suppose

[14:32] *** rindolf left
[14:32] <lizmat> so, I have a test that blows up: want to mark it as todo, but even with that, it will make the script die and this fail that file

[14:32] <moritz> #?rakudo skip 'oh noes, it dies'

[14:32] <arnsholt> But yeah, in most cases the programmer probably knows if it'll always be undef

[14:32] *** rindolf joined
[14:33] <lizmat> moritz++

[14:34] <moritz> I actually thought constant-folding &defined wouldn't easily work, because &defined is, well, defined so early

[14:34] *** baest_ joined
[14:34] <moritz> so it might not be easy to apply traits

[14:34] *** Kelder joined
[14:34] *** [particle]1 joined
[14:35] *** fhelmberger left
[14:35] *** FROGGS left
[14:35] *** snarkyboojum left
[14:37] <arnsholt> Ah, right. That I have no idea about

[14:37] <FROGGS_> std: use v5; $/ = \3; my %stuff = (1..4); say @stuff{1, 3}

[14:37] *** Tene_ joined
[14:37] *** Tene_ left
[14:37] *** Tene_ joined
[14:37] *** avarab joined
[14:37] *** avarab left
[14:37] *** avarab joined
[14:37] *** gfldex_ joined
[14:37] *** Maddingu1 joined
[14:37] *** mangala_ joined
[14:37] *** mj41 joined
[14:37] *** cxreg2 joined
[14:37] *** FROGGS_ is now known as FROGGS

[14:37] *** anocelot_ joined
[14:37] *** clkao_ joined
[14:37] *** sciurius_ joined
[14:37] *** dmol left
[14:37] *** masak_ joined
[14:38] *** ehouse_ joined
[14:38] <FROGGS> std: hello?

[14:38] *** jercos_ joined
[14:40] <lizmat> seems like a netsplit pb to me

[14:40] *** GlitchMr joined
[14:40] *** sivoais_ left
[14:40] <FROGGS> must be, yeah

[14:40] *** sivoais joined
[14:43] <lizmat> hmmm… so I've written some spectests, how do I push those (from my cloned repo?)

[14:43] *** BooK joined
[14:43] <FROGGS> git remote add ... ?

[14:43] *** xilo joined
[14:43] *** woolfy joined
[14:44] *** rindolf left
[14:44] *** PZt joined
[14:45] *** rindolf joined
[14:46] *** Maddingu1 is now known as Maddingue

[14:47] *** baest_ is now known as baest

[14:48] <lizmat> but git remote add upstream git://github.com/rakudo/rakudo.git would be the wrong repo, no?

[14:49] *** rking1 joined
[14:49] <lizmat> as t/spec doesn't live there

[14:49] *** frdmn left
[14:49] *** sivoais left
[14:49] <lizmat> perl6/roast.git I assume

[14:49] *** sivoais joined
[14:49] <PerlJam> lizmat: yes.

[14:50] <FROGGS> right

[14:53] <lizmat> so should I clone perl6/roast and submit a pull request?

[14:54] <jnthn> You should already have a commit bit for that, I think.

[14:55] <lizmat> it appears so

[14:55] *** rindolf left
[14:56] *** rindolf joined
[14:57] *** sivoais left
[14:58] <FROGGS> lizmat: you can work with pull requests but it might be handier if you just add perl6/roast as a remote and push directly to it

[14:58] *** camelia joined
[14:58] <FROGGS> camelia: \o/

[14:58] <FROGGS> std: use v5; $/ = \3; my %stuff = (1..4); say @stuff{1, 3}

[14:58] <lizmat> trying to do so, have some kind of permission issue

[14:59] *** ChanServ sets mode: +v camelia

[14:59] <camelia> std b33d8e0: OUTPUT«ok 00:01 54m␤»

[14:59] *** kaare__ joined
[15:00] <arnsholt> lizmat: Maybe your remote is set up to talk to the GitHub HTTPS part?

[15:00] *** sivoais joined
[15:00] <arnsholt> If you started out with a RO checkout you may have to twiddle that

[15:00] <lizmat> twiddling  :-)

[15:01] <dalek> roast: 5c7b4be | (Elizabeth Mattijsen)++ | S09-hashes/objecthash.t:

[15:01] <dalek> roast: Tests for %h{Mu} support

[15:01] <dalek> roast: 

[15:01] <dalek> roast: One test is dying badly still.  No idea to fix that.  Marked as "skip"

[15:01] <dalek> roast: review: https://github.com/perl6/roast/commit/5c7b4be948

[15:02] <lizmat> success!

[15:02] <lizmat> arnsholt++

[15:02] <FROGGS> lizmat++ # successfully twiddled :o)

[15:02] <FROGGS> 'oh noes, it dies' *g*

[15:05] <dalek> v5: 02ca4a1 | (Tobias Leich)++ | lib/Perl5/Terms.pm:

[15:05] <dalek> v5: fixed slurp' paragraph mode, and added todo about slurp mode

[15:05] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/02ca4a1df6

[15:05] <dalek> v5: 7ba8e2c | (Tobias Leich)++ | / (3 files):

[15:05] <dalek> v5: make qw() return an array instead of a string

[15:05] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/7ba8e2c2d4

[15:05] *** rindolf left
[15:06] *** rindolf joined
[15:06] <FROGGS> r: say (304 * 100 / 40185) ~'% v5 spectests pass'

[15:06] <camelia> rakudo 2a04f2: OUTPUT«0.756501% v5 spectests pass␤»

[15:06] <tadzik> \o/

[15:06] <FROGGS> meh, should be the other way around

[15:06] <FROGGS> (some day)

[15:07] <FROGGS> ohh, and not to forget the bunch of test file which dont have a parseable plan :/

[15:07] *** jercos_ is now known as jecos

[15:08] *** jecos is now known as jercos

[15:11] *** rindolf left
[15:11] *** kbenson joined
[15:11] *** sjn joined
[15:11] *** rindolf joined
[15:15] *** kbenson1 joined
[15:15] *** alester_ joined
[15:16] *** _jaldhar_ joined
[15:17] *** anocelot joined
[15:17] *** preflex_ joined
[15:17] *** skids_ joined
[15:18] *** leprevost left
[15:18] *** jercos_ joined
[15:18] *** japhb__ joined
[15:19] *** itz_ joined
[15:23] *** rindolf left
[15:23] *** kbenson left
[15:23] *** jercos left
[15:23] *** anocelot_ left
[15:23] *** japhb_ left
[15:23] *** preflex left
[15:23] *** dayangkun left
[15:23] *** jaldhar_ left
[15:23] *** hugme left
[15:23] *** sorear left
[15:23] *** skids left
[15:23] *** itz left
[15:23] *** alester left
[15:23] *** preflex_ is now known as preflex

[15:23] *** rindolf joined
[15:23] *** alester_ is now known as alester

[15:24] *** kresike left
[15:25] *** sorear joined
[15:26] <FROGGS> r: say &infix:<==>(1, 2)

[15:26] <camelia> rakudo 0d3c9b: OUTPUT«False␤»

[15:26] <FROGGS> r: say &infix:<==>(1, 1)

[15:26] <camelia> rakudo 0d3c9b: OUTPUT«True␤»

[15:26] <FROGGS> r: say &infix:{"=="}(1, 1)

[15:26] <camelia> rakudo 0d3c9b: OUTPUT«===SORRY!===␤You can't adverb that␤at /tmp/i_ErpzjVDp:1␤------> say &infix:{"=="}⏏(1, 1)␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        statement modifier loop␤        horizontal w…

[15:27] <FROGGS> hmmm

[15:27] *** hugme joined
[15:27] *** ChanServ sets mode: +v hugme

[15:28] <FROGGS> r: say ::("&infix:<==>")(1, 1)

[15:28] <camelia> rakudo 0d3c9b: OUTPUT«True␤»

[15:28] <FROGGS> okay

[15:30] *** dayangkun joined
[15:34] *** rindolf left
[15:35] *** rindolf joined
[15:37] *** denisboyun___ left
[15:42] *** frdmn joined
[15:43] <dalek> nqp/rak-jvm-support: b051ece | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/ (3 files):

[15:43] <dalek> nqp/rak-jvm-support: Cloning of container lexicals (state to come).

[15:43] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/b051ece0f2

[15:43] <dalek> nqp/rak-jvm-support: f8886f7 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/P6Opaque.java:

[15:43] <dalek> nqp/rak-jvm-support: Make auto-viv'd attributes stick around.

[15:43] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/f8886f73b4

[15:45] *** ggoebel joined
[15:45] *** rindolf left
[15:47] <dalek> rakudo/nom: b41219e | moritz++ | src/core/Mu.pm:

[15:47] <dalek> rakudo/nom: potentially constant-fold &defined

[15:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b41219e4f0

[15:49] *** dmol joined
[15:49] *** domidumont left
[15:51] *** jercos_ is now known as jercos

[15:54] <cognominal> what is 'is pure'? It's not specced. Does it mean sub without side effects?

[15:54] <tadzik> yeah

[15:55] <tadzik> it's not a spec thing, it's Rakudo-specific, a hint to the optimizer

[15:55] <tadzik> (or so I think)

[15:57] <cognominal> it would be nice to have it as a spec (perhaps as a fun keyword instead of sub). I like code as documentation.

[15:59] <dalek> v5: 914696f | (Tobias Leich)++ | t/test.pl:

[15:59] <dalek> v5: fixed cmp_ok

[15:59] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/914696f7cc

[15:59] <dalek> v5: 7f9a3b6 | (Tobias Leich)++ | t/test.pl:

[15:59] <dalek> v5: indentation

[15:59] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/7f9a3b665e

[15:59] <dalek> v5: d9849d7 | (Tobias Leich)++ | / (2 files):

[15:59] <dalek> v5: make shift() use @_ when no arg is supplied

[15:59] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/d9849d71b2

[15:59] <FROGGS> r: say (357 * 100 / 40185) ~'% v5 spectests pass'

[15:59] <camelia> rakudo 0d3c9b: OUTPUT«0.888391% v5 spectests pass␤»

[16:00] <FROGGS> almost one percent *g*

[16:00] <dalek> rakudo/jvm-support: 08f65ec | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/ (2 files):

[16:00] <dalek> rakudo/jvm-support: Named slurpy binding.

[16:00] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/08f65ecf93

[16:00] <dalek> rakudo/jvm-support: 3a27ac5 | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/ (2 files):

[16:00] <dalek> rakudo/jvm-support: Implement nqp::p6bindattrinvres.

[16:00] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/3a27ac5722

[16:00] <moritz> note that rakudo's notion of 'is pure' doesn't quite fit the normal one

[16:00] <moritz> in rakudo's world, a function marked as 'is pure' is still allowed to die or warn

[16:00] <FROGGS> one percent in two months, that is like 198 months to go?

[16:01] <moritz> (otherwise most string and numeric operators wouldn't be constant-foldable, because they nearly all coerce, and coercion can warn)

[16:02] *** frdmn left
[16:02] *** frdmn joined
[16:02] *** rindolf joined
[16:03] *** FROGGS[mobile] joined
[16:05] <[Coke]> lizmat: objecthash.t - pugs says:   TODO passed:   26-28

[16:06] <[Coke]> lizmat++ for thinking to pre-fudge for pugs

[16:07] *** FROGGS left
[16:07] *** thou joined
[16:08] *** rindolf left
[16:08] *** rindolf joined
[16:09] *** frdmn|afk joined
[16:10] *** dmol left
[16:12] <lizmat> [Coke]  you're welcome  :-)

[16:13] *** frdmn left
[16:13] <tadzik> FROGGS[mobile]: I think shift() should also look in @ARGV when it's not inside a sub

[16:17] *** rindolf left
[16:17] *** rindolf joined
[16:26] *** rindolf left
[16:26] <lizmat> n: my %h= <a b c> Z 1..3; say %h

[16:27] *** rindolf joined
[16:27] <camelia> niecza v24-50-gba63d9a: OUTPUT«{"a" => 1, "b" => 2, "c" => 3}␤»

[16:27] <lizmat> pugs: my %h= <a b c> Z 1..3; say %h

[16:27] <camelia> pugs: OUTPUT«*** Odd number of elements found where hash expected: VList [VStr "a",VStr "b",VStr "c"]␤    at /tmp/WFU7R9RETK line 1, column 1-22␤»

[16:27] * lizmat now understands crummy setup in hash test

[16:28] *** domidumont joined
[16:34] *** kaleem left
[16:34] *** rindolf left
[16:35] *** rindolf joined
[16:37] *** FROGGS joined
[16:39] <lizmat> n: my @a= <a b c>; say @a[1]:delete; say @a

[16:39] <camelia> niecza v24-50-gba63d9a: OUTPUT«Unhandled exception: Excess arguments to KERNEL Array.postcircumfix:<[ ]>, unused named delete␤  at <unknown> line 0 (KERNEL Array.postcircumfix:<[ ]> @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 179 (postcircumfix:<[ ]> @ 5) ␤  at /tmp/pF0PmBHJv2 …

[16:40] <lizmat> r: my @a= <a b c>; say @a[1]:delete; say @a  # rakudo is silent again, but doesn't delete

[16:40] <camelia> rakudo b41219: OUTPUT«b␤a b c␤»

[16:42] <lizmat> S32/Containers:666 reads "his adverb may be applied to any subscripting operation.  The operation returns the elements normally, but reads them out destructively."

[16:42] <lizmat> I assume that is a case of NYI in rakudo?

[16:44] *** rindolf left
[16:45] <colomon> lizmat: I'm not sure it's intended to work that way.

[16:45] *** rindolf joined
[16:45] <lizmat> "destructively"

[16:45] <lizmat> I guess that doesn't make it clear whether the result would be "a,"c" or "a",Any,"c", right?

[16:45] <colomon> lizmat: you're absolutely right.  I had no idea.

[16:46] <colomon> no one has implemented that one yet, unless Pugs did it.

[16:47] * colomon looked at the spec after his first response.

[16:47] <lizmat> S32/Containers:653 states that the element should be set to a "non-existent" state

[16:47] <lizmat> I assume the resulting list would then need to be: "a",Mu,"c"

[16:49] <colomon> lizmat: sounds right to me.  unless maybe it's Any instead of Mu

[16:50] <lizmat> rn: my @a; @a[1]=1; .say for @a

[16:50] <camelia> rakudo b41219, niecza v24-50-gba63d9a: OUTPUT«(Any)␤1␤»

[16:50] *** fhelmberger_ left
[16:54] *** grondilu joined
[16:55] <TimToady> :delete should always remove the key from a hash; the other semantics are available with something like @a<b> := Any

[16:55] <lizmat> so setting deleted array elements to Any should be enough?

[16:56] <TimToady> enough for what?

[16:56] <lizmat> to "read them out destructively"

[16:56] <TimToady> no, I just said the opposite of that...

[16:57] <lizmat> binding them to Any

[16:57] <colomon> TimToady: she

[16:57] <colomon> '

[16:57] <colomon> TimToady: she's talking about array, not hash

[16:57] <TimToady> "remove the key" is not the same as binding Any

[16:57] <TimToady> ah, 

[16:57] <TimToady> well, yes, you can't remove the key of an array :)

[16:57] <colomon> unless it's the tail of the array.

[16:57] *** rindolf left
[16:57] <TimToady> sorry, misread

[16:57] <lizmat> yes, and that's specced

[16:58] *** rindolf joined
[16:58] <TimToady> but if the array type supports sparsity, then :exists should go to false

[16:58] <lizmat> r: my @a= <a b c>; say @a[1]:delete; say @a  # expected a Any c

[16:58] <camelia> rakudo b41219: OUTPUT«b␤a b c␤»

[16:58] <TimToady> whether that's handled by poking a NULL into the pointer is an implementation detail (that's what P5 does)

[16:59] <TimToady> I'd expect a Any C there

[17:00] <lizmat> ok, then I will have a go at writing that as well, as I'm writing the spec tests for it now anyway

[17:00] <TimToady> (where Any is the default default, of course, when we get to the point where we can set other defaults)

[17:01] <lizmat> r: my @a; @a[1]=1; .say for @a   # sort of expected Mu 1

[17:01] <camelia> rakudo b41219: OUTPUT«(Any)␤1␤»

[17:01] <colomon> TimToady: BTW, I still haven't been able to figure out how to make Nil and Empty do the right thing in Niecza, but at least you should be able to use Empty in the actions now if you'd like

[17:02] <TimToady> colomon++

[17:06] <TimToady> if we said that :exists returns false when the entry is the default value, then := self.default could work for "I'm not here", I guess

[17:06] <TimToady> since it's the default, the implementation could feel free to deallocate any memory used in that case

[17:07] <lizmat> r: say Array.default  # seems we need to implement "default" for that then

[17:07] <camelia> rakudo b41219: OUTPUT«No such method 'default' for invocant of type 'Array'␤  in block  at /tmp/W5tBD8W36n:1␤␤»

[17:07] <TimToady> I wouldn't carry those semantics over to hashes, though, unless they're KeyHashes, since hashes can distinguish a key pointing to Any from a missing key

[17:08] *** dakkar left
[17:08] <TimToady> KeyHashes are supposed to be defined in terms of defaults in any case

[17:08] <lizmat> well, it would be the value return when trying to access a key that;s not in the hash

[17:08] <lizmat> returned

[17:09] <TimToady> so, for instance, a Set defaults to False

[17:09] <TimToady> so the Set only needs to track the values that are true

[17:09] <TimToady> and a mutable KeySet lets you delete things by say $keyset<foo> = False

[17:10] <TimToady> *saying

[17:10] <TimToady> likewise $keybag<marbles> = 0 would throw all the marbles out of the bag and delete the marbles key

[17:11] <lizmat> r: say Set.default  # expecting False then

[17:11] <camelia> rakudo b41219: OUTPUT«No such method 'default' for invocant of type 'Set'␤  in block  at /tmp/MSaUOPYCph:1␤␤»

[17:11] <dalek> perl6-bench: 7fb98e8 | (Geoffrey Broadwell)++ | TODO:

[17:11] <dalek> perl6-bench: Add a few more Rakudo performance-affecting commit TODOs

[17:11] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/7fb98e8d8a

[17:11] <dalek> perl6-bench: 71e806d | (Geoffrey Broadwell)++ | analyze:

[17:11] <dalek> perl6-bench: More scaled time work in analyze: compare work rates across all compilers and scales for each test

[17:11] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/71e806dbb2

[17:11] <dalek> perl6-bench: da8fda3 | (Geoffrey Broadwell)++ | microbenchmarks.pl:

[17:11] <dalek> perl6-bench: Convert most existing microbenchmarks to be auto-scaled, with a first guess at an appropriate starting scale for each

[17:11] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/da8fda3874

[17:11] <lizmat> r: say Bag.default  # expecting 0 then

[17:11] <TimToady> lizmat: correct

[17:11] <camelia> rakudo b41219: OUTPUT«No such method 'default' for invocant of type 'Bag'␤  in block  at /tmp/y432ebdvaR:1␤␤»

[17:12] <TimToady> defaults are completely NYI though

[17:12] <TimToady> and probably not sufficiently specced...

[17:13] <TimToady> well, the behavior of defaults is specced for KeyHashes, but we haven't set up a trait to set the default

[17:14] <TimToady> having a default other than Any might be a mixin/composition

[17:14] *** atrodo joined
[17:14] <lizmat> indeed: for now in the tests for :delete on arrays, I will assume Any

[17:14] <TimToady> if everything has a default default of Any, that might just be inherited from one of Mu/Any/Cool

[17:14] <colomon> are Set.default and Bag.default always False and 0, respectively?

[17:14] <TimToady> yes

[17:15] *** betterworld left
[17:15] <TimToady> so those could just have a hardwired default method

[17:16] <TimToady> most standard types would not need to store an actual Any/False/0 in the object

[17:16] <colomon> lizmat: you want to add the tests to roast?  ;)

[17:16] <lizmat> yes, working on that now

[17:17] <colomon> niecza> say Set.default; say Bag.default;

[17:17] <colomon> False

[17:17] <colomon> 0

[17:17] <TimToady> I suppose we'll need a trait that can set it on a declaration though

[17:17] <lizmat> colomon: you mean for Set.default and Bag.default ?

[17:17] <colomon> lizmat: yes

[17:17] <TimToady> my @array is default(42) or some such

[17:17] <dalek> rakudo/jvm-support: 4e29b8b | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/ (2 files):

[17:17] <dalek> rakudo/jvm-support: Implement positional slurpy params.

[17:17] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/4e29b8bb35

[17:17] <dalek> rakudo/jvm-support: a4ef060 | jnthn++ | src/core/Mu.pm:

[17:17] <dalek> rakudo/jvm-support: Fix BUILDALL to work on JVM.

[17:17] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/a4ef060390

[17:17] <dalek> rakudo/jvm-support: e4b2d65 | jnthn++ | src/core/IO.pm:

[17:17] <dalek> rakudo/jvm-support: A tiny bit of IO portability stuff.

[17:17] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/e4b2d6557e

[17:17] <dalek> rakudo/jvm-support: f889024 | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/Ops.java:

[17:17] <dalek> rakudo/jvm-support: Implement nqp::p6definite.

[17:17] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/f889024e22

[17:18] <lizmat> Well, maybe later…  I'm working on getting :delete on Array tested

[17:18] <dalek> niecza: 009f999 | (Solomon Foster)++ | lib/CORE.setting:

[17:18] <dalek> niecza: Add default method for Set, KeySet, Bag, and KeyBag.

[17:18] <dalek> niecza: review: https://github.com/sorear/niecza/commit/009f999b8e

[17:19] <lizmat> what to do with a faulty test?

[17:19] <lizmat> eval_dies_ok '$a :delete', "Can't :delete a scalar";

[17:19] <lizmat> is successful, but for the wrong reason "You can't adverb that"

[17:19] <colomon> lizmat: don't worry about it, I'm adding them now myself.

[17:20] <colomon> lizmat: (I mean the Set tests)

[17:20] <lizmat> eval_dies_ok '$a :foo', "Can't :delete a scalar";  would also succeed

[17:20] <lizmat> colomon: ok

[17:21] <TimToady> .oO(What do you do with a drunken test earlie in the morning?)

[17:21] * colomon finds p6 work intoxicating, because it's frequently so easy to make noticeable progress.  Or maybe that's the whisky talking.

[17:21] <lizmat> I'll remove the test in a separate commit

[17:21] *** _ilbot joined
[17:21] <colomon> TimToady: don't get me started on shanties...

[17:22] <[Coke]> sergot: are you actively running something on feather or is that a background job?

[17:24] <dalek> roast: 95ecaba | (Solomon Foster)++ | S02-types/ (4 files):

[17:24] <dalek> roast: Add tests for Set, Bag, etc. default method.

[17:24] <dalek> roast: review: https://github.com/perl6/roast/commit/95ecabaa1d

[17:24] <[Coke]> ... and it's gone.

[17:26] <dalek> roast: 6d719f1 | (Elizabeth Mattijsen)++ | S32-hash/delete_adverb.t:

[17:26] <dalek> roast: More or less complete tests for :delete adverb on hashes

[17:26] <dalek> roast: 

[17:26] <dalek> roast: Lot's of cases not tested before.

[17:26] <dalek> roast: review: https://github.com/perl6/roast/commit/6d719f15fd

[17:26] <dalek> roast: 99587bb | (Elizabeth Mattijsen)++ | S32-hash/delete_adverb.t:

[17:26] <dalek> roast: Removed bogus Scalar :delete test

[17:26] <dalek> roast: 

[17:26] <dalek> roast: This wasn't testing :delete at all, just the failure of adverbing a scalar

[17:26] <dalek> roast: review: https://github.com/perl6/roast/commit/99587bbdb9

[17:29] *** Chillance joined
[17:30] <lizmat> pugs: my %h=a=>1; say %h{*}:delete

[17:30] <camelia> pugs: OUTPUT«pugs: Named argument found where no matched parameter expected: (delete,Val (VBool True))␤»

[17:31] <lizmat> pugs: my %h=a=>1; say %h<a>:delete

[17:31] <camelia> pugs: OUTPUT«pugs: Named argument found where no matched parameter expected: (delete,Val (VBool True))␤»

[17:31] *** daxim left
[17:33] <dalek> roast: 82b2f2d | (Elizabeth Mattijsen)++ | S32-hash/delete_adverb.t:

[17:33] <dalek> roast: Some pugs fudging, as pugs apparently doesn't know adverbs

[17:33] <dalek> roast: review: https://github.com/perl6/roast/commit/82b2f2d424

[17:33] <lizmat> afk for 2 hours or so

[17:34] <colomon> r: my $a = set<a b c>; say $a.default

[17:34] <camelia> rakudo b41219: OUTPUT«No such method 'default' for invocant of type 'Parcel'␤  in block  at /tmp/FPAXhg2R3W:1␤␤»

[17:34] <colomon> er?

[17:34] <colomon> n: my $a = set<a b c>; say $a.default

[17:34] <camelia> niecza v24-50-gba63d9a: OUTPUT«Unhandled exception: Unable to resolve method default in type Parcel␤  at /tmp/4Oi6XOiUCb line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4327 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4328 (module-CORE @ 582) ␤  at /…

[17:34] <colomon> rn: my $a = set<a b c>; say $a.WHAT

[17:34] <camelia> rakudo b41219, niecza v24-50-gba63d9a: OUTPUT«(Parcel)␤»

[17:35] * colomon is apparently very dense this morning.

[17:42] <dalek> rakudo/nom: 1708566 | (Solomon Foster)++ | src/core/ (2 files):

[17:42] <dalek> rakudo/nom: Add default method for Set, KeySet, Bag, and KeyBag.

[17:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/17085660c9

[17:42] <masak_> oh hai, oh hai, dear #perl6

[17:42] *** masak_ is now known as masak

[17:46] <TimToady> std: my $a = set<a b c>; say $a.WHAT

[17:46] <camelia> std b33d8e0: OUTPUT«ok 00:00 43m␤»

[17:46] <TimToady> I guess that isn't one that carps about having no args

[17:47] <TimToady> since set() is just ∅

[17:48] *** _jaldhar_ left
[17:48] <TimToady> but set<a b c> is going to be a common mistake

[17:48] <colomon> rn: my $a = set(<a b c>); say $a.WHAT

[17:48] <camelia> rakudo b41219, niecza v24-50-gba63d9a: OUTPUT«(Set)␤»

[17:48] <colomon> rn: my $a = set <a b c>; say $a.WHAT

[17:48] <camelia> rakudo b41219, niecza v24-50-gba63d9a: OUTPUT«(Set)␤»

[17:48] <colomon> yeesh

[17:49] * colomon is always delighted to have TimToady explain how colomon is being dense.  :)

[17:49] <masak> labster++ # http://blog.brentlaabs.com/2013/05/porting-module-to-perl-6.html

[17:49] <TimToady> maybe I could add 'set' and 'bag' to the category of functions that require an argument, since set() defeats that warning

[17:50] <masak> "Now that I've written this, I've realized that my own project is a microcosm of the Perl 6 saga.  Making a better codebase takes a lot of time, but it ultimately seems worth the effort." -- labster++

[17:50] <TimToady> std: say<a b c>

[17:50] <camelia> std b33d8e0: OUTPUT«===SORRY!===␤Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument at /tmp/e8wl57bRHS line 1:␤------> say⏏<a b c>␤Check failed␤FAILED 00:00 41m␤»

[17:50] <TimToady> like that

[17:50] <masak> TimToady: +1

[17:50] <PerlJam> TimToady: +1

[17:50] *** moritz joined
[17:51] <TimToady> we had many of those errors in early pugs code too

[17:51] *** dmol joined
[17:54] <PerlJam> I just know that it took me a little bit to figure out what colomon was doing wrong.  Anything that minimizes the  "Huh?" factor is a good thing.  :)

[17:57] <colomon> rn: say [(|)] set <a b c>, set <a b d>, set <a d g>

[17:57] <camelia> niecza v24-50-gba63d9a: OUTPUT«Unhandled exception: No value for parameter '$b' in 'infix:<(|)>'␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (infix:<(|)> @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2658 (reduceop @ 12) ␤  at /tmp/Grdwz9eGgL line 1 (mainline @ 6) ␤  at /hom…

[17:57] <camelia> ..rakudo b41219: OUTPUT«Too many positional parameters passed; got 5 but expected 2␤  in sub infix:<(|)> at src/gen/CORE.setting:13075␤  in sub  at src/gen/CORE.setting:13910␤  in block  at /tmp/8vS6PdbMHl:1␤␤»

[17:57] <masak> lizmat: re http://irclog.perlgeek.de/perl6/2013-05-14#i_7064076 -- I unspec'd multiple signatures per routine body a year and a half ago. rationale here: https://github.com/perl6/specs/commit/9950d83ede3d1aa77a96ad83fd7549a69fc9e4a5

[17:57] *** SamuraiJack_ joined
[17:58] <PerlJam> r: sub foo(::T where *.does(R)) { ... }

[17:58] <camelia> rakudo b41219: OUTPUT«===SORRY!===␤Cannot do non-typename cases of type_constraint yet␤at /tmp/djU_uHnr55:1␤------> sub foo(::T where *.does(R)⏏) { ... }␤    expecting any of:␤        argument list␤        postfix␤»

[17:59] <masak> lizmat: in real Perl 6 code I would delegate all the different candidates to a common helper sub, and hide the helper sub as appropriate.

[17:59] <PerlJam> std: sub foo(::T where *.does(R)) { ... }

[17:59] <camelia> std b33d8e0: OUTPUT«===SORRY!===␤Undeclared name:␤    'R' used at line 1␤Check failed␤FAILED 00:00 45m␤»

[17:59] <TimToady> colomon: note that set is a listop, so each set is counting the following sets as sub-arguments

[17:59] <PerlJam> std: role R {};  sub foo(::T where *.does(R)) { ... }

[17:59] <camelia> std b33d8e0: OUTPUT«ok 00:00 45m␤»

[17:59] <colomon> TimToady: wondered about that.  but it should work either way...

[18:00] <TimToady> not if we make sets of sets work right

[18:00] <TimToady> PerlJam: why not just 'where R' ?

[18:00] <PerlJam> Just didn't think of it that way.

[18:00] <colomon> TimToady: that's not allowed by the current spec, is it?  

[18:01] <TimToady> I believe current spec doesn't allow sets to flatten in list context

[18:01] <TimToady> and the constructor should not be flattening sets either

[18:01] <colomon> TimToady: I take it back, current spec does not address this at all, at least not in S32

[18:01] *** SamuraiJack_ left
[18:01] *** Tene_ is now known as Tene

[18:02] *** SamuraiJack joined
[18:02] <colomon> TimToady: it's nothing to do with flattening.  set function absorbs the keys or values of collections, including Sets

[18:02] <TimToady> see line S32/Containers:1112

[18:03] *** dmol left
[18:03] <TimToady> but it's also the case that the constructors should be treating the incoming elements as items

[18:04] <colomon> TimToady: I assume you mean "Sets and Bags do not flatten into list context."  ?

[18:04] <TimToady> in general, items should stay items

[18:04] <TimToady> they show up as $@keys, not @keys, basically

[18:04] <colomon> that's very much not how it is implemented

[18:04] * masak .oO( what happens in Vega$ stays in Vega$ )

[18:05] <colomon> rn: say set(<a b c>, <d e f>)

[18:05] <camelia> rakudo b41219, niecza v24-51-g009f999: OUTPUT«set(a, b, c, d, e, f)␤»

[18:05] <TimToady> yes, I know, since I was one of the people who originally thought the dwimming was cute, until it wasn't

[18:05] <masak> colomon: but those are parcels, not sets and bags.

[18:05] <TimToady> yes, parcels can flatten in list context by default

[18:05] <colomon> rn: my $a = set <a b c>; my $b = set <d e f>; say set($a, $b)

[18:06] <camelia> rakudo b41219, niecza v24-51-g009f999: OUTPUT«set(a, b, c, d, e, f)␤»

[18:06] <masak> colomon: known, RT'd, deplored.

[18:06] <TimToady> likewise, if you really want to incorporate one set in another, the you can use (|) or set <a b c>, $otherset.keys

[18:06] <colomon> rn: my @a = <a b c>; my @b = <d e f>; say set(@a, @b)

[18:06] <camelia> rakudo b41219, niecza v24-51-g009f999: OUTPUT«set(a, b, c, d, e, f)␤»

[18:07] <TimToady> or ∪ if we ever arrive in the 21st century...

[18:07] *** sftp joined
[18:08] * masak .oO( ∪∩icode )

[18:09] * colomon feels like he's going insane.  

[18:11] * masak hugs colomon 

[18:11] *** frdmn|afk is now known as frdmn

[18:12] <colomon> if someone cares to explain what the rules for set / bag construction are actually meant to be (preferably in spec), I'll try to get around to fixing roast and both compilers....

[18:12] <TimToady> we've been talking about how to write sets of sets for some months now, but I will see if I can enhance the specs in that regard

[18:13] <colomon> and the production code I've written which relies on the current behavior...

[18:13] <rjbs> the spec will metasetize

[18:13] *** leprevost joined
[18:14] *** kaare_ joined
[18:15] <masak> colomon: let me try and summarize the situation. @ or % sigil? flatten. $ sigil? don't flatten. <> or () lists? flatten. [] array? don't flatten. a set or a bag, constructed in-place with 'set' or 'bag'? don't flatten.

[18:15] <masak> TimToady: hope I got that right.

[18:15] <colomon> masak: I have no idea how to write code to support that 

[18:16] <masak> colomon: well, if it turns out to be *impossible* to implement, we must do something about that.

[18:16] *** kaare__ left
[18:16] <masak> colomon: but so far it has seemed quite sane to me.

[18:16] *** sjohnson joined
[18:16] <masak> colomon: basically, some things act as flattenable lists, and others act as items. sets and bags act as items.

[18:17] <colomon> masak: how do you write a slurpy sub which can distinguish whether its arguments were $ or @/%?

[18:18] <masak> hm.

[18:20] <masak> rn: say $_ ~~ Positional for Set, Bag; say $_ ~~ Associative for Set, Bag

[18:20] <camelia> rakudo 170856, niecza v24-51-g009f999: OUTPUT«False␤False␤True␤True␤»

[18:23] <masak> colomon: I'm not at the point where I'm saying "oh gosh, you're right, this is impossible" yet -- but I do see the problem. lemme think some more.

[18:25] <masak> rn: sub foo(*@x) { say @x.elems }; my @y = 1, 2, 3; foo(@y); foo @y

[18:25] <camelia> rakudo 170856, niecza v24-51-g009f999: OUTPUT«3␤3␤»

[18:25] <jnthn> That's the **@foo vs *@foo distiction in part, no?

[18:26] <colomon> masak: also, those rules seem to ignore (possibly intentionally) the current rules for handling associative / pairs (use keys only)

[18:27] <colomon> jnthn: I thought **@foo was how you sent a variable number of lists?

[18:27] <jnthn> colomon: It means "don't flatten any of the incoming things"

[18:28] <jnthn> nqp: say(nqp::replace('abc', 'x', 0, 0))

[18:28] <camelia> nqp: OUTPUT«Error while compiling block : Error while compiling op call (source text: "nqp::replace('abc', 'x', 0, 0)"): Error while compiling op replace (source text: "nqp::replace('abc', 'x', 0, 0)"): No registered operation handler for 'replace'␤current instr.: '' pc 48591 (src/stage…

[18:28] <jnthn> oh..

[18:28] <jnthn> nqp: say(pir::replace__Sssii('abc', 'x', 0, 0))

[18:28] <camelia> nqp: OUTPUT«error:imcc:The opcode 'replace_s_sc_sc_ic_ic' (replace<5>) was not found. Check the type and number of the arguments␤       in file '(file unknown)' line 39␤»

[18:29] <jnthn> nqp: say(pir::replace__Sssii('abc', 0, 0, 'x'))

[18:29] <camelia> nqp: OUTPUT«error:imcc:The opcode 'replace_s_sc_s_ic_i' (replace<5>) was not found. Check the type and number of the arguments␤ in file '(file unknown)' line 161304349␤»

[18:29] <jnthn> nqp: say(pir::replace__Ssiis('abc', 0, 0, 'x')) # sigh

[18:29] <camelia> nqp: OUTPUT«xabc␤»

[18:29] <jnthn> nqp: say(pir::replace__Ssiis('abc', 0, 1, 'x')) # sigh

[18:29] <camelia> nqp: OUTPUT«xbc␤»

[18:29] <jnthn> nqp: say(pir::replace__Ssiis('abc', 1, 1, 'x')) # sigh

[18:29] <camelia> nqp: OUTPUT«axc␤»

[18:29] <jnthn> ah...

[18:31] <dalek> specs: 221b79f | larry++ | S32-setting-library/Containers.pod:

[18:31] <dalek> specs: sets and bags are object based, use === semantics

[18:31] <dalek> specs: review: https://github.com/perl6/specs/commit/221b79f028

[18:35] *** nyuszika7h joined
[18:39] <dalek> specs: 0380487 | larry++ | S32-setting-library/Containers.pod:

[18:39] <dalek> specs: more set/bag list clarifications

[18:39] <dalek> specs: 

[18:39] <dalek> specs: We're not trying to override explicit @ or .keys here, merely the

[18:39] <dalek> specs: implicit policy for a default of item in list context.

[18:39] <dalek> specs: 

[18:39] <dalek> specs: Also, set/bag constructors are simply slurpies, and shouldn't care at all

[18:39] <dalek> specs: what was passed as the objects in those slurpies.  Generally one should

[18:39] <dalek> specs: be using "union" to combine sets or bags anyway, not relying on implicit

[18:39] <dalek> specs: constructor semantics to do that.

[18:39] <dalek> specs: review: https://github.com/perl6/specs/commit/038048739f

[18:39] *** denisboyun joined
[18:41] *** gtodd left
[18:43] <colomon> TimToady: can you add explicit .Set .Bag etc conversion functions to the spec as well?  This change makes them much more important....

[18:46] <dalek> specs: 1e7aec4 | larry++ | S32-setting-library/Containers.pod:

[18:46] <dalek> specs: say how to turn pairs/hashes into sets/bags

[18:46] <dalek> specs: review: https://github.com/perl6/specs/commit/1e7aec467b

[18:47] <TimToady> uh, just did

[18:47] <TimToady> well, mentioned them, anyway...

[18:47] <TimToady> as the new way to deal with pairs or hashes that want to become sets/bags

[18:48] *** betterworld joined
[18:49] <colomon> TimToady: I was thinking Set.Bag and combinations like that, but it's good to have them on Hash, too.

[18:49] <colomon> though perhaps a bit vague.

[18:50] <TimToady> I usually just assume there are appropriate coercers where they make sense :)

[18:50] *** frdmn left
[18:51] <TimToady> but in this case it seems good to distinguish coercion from composition

[18:51] *** frdmn joined
[18:51] <TimToady> "this already looks kinda like a bag, so make it moreso"

[18:52] <colomon> it's important because the established way of doing it was via constructor, and you just eliminated that.  :)

[18:52] <TimToady> which is what we both realized simultaneously :)

[18:54] <colomon> the relevant spectests are now badly broken.  I should probably do some paying $work now, but will take a look at cleaning it up soon.

[18:54] <TimToady> though in the case of Set => Bag, a constructor works just as well as long as you say @set rather than $set

[18:54] <TimToady> thanks!

[18:55] <colomon> also at fixing set operators so they work right in reduce metaop

[18:55] <colomon> because that just got more important as well.

[18:55] <colomon> (indeed, ABC will have issues if I don't fix that the same time I change the constructors.)

[18:56] <TimToady> I realized several months ago when we had an RC task that wanted sets of sets that we were about to laughed out of the stadium by mathematicians if we didn't fix this...

[18:57] * TimToady wonders what kind of stadum mathematicians come in...

[18:57] <TimToady> *dium

[18:57] <colomon> bah, didn't we learn our lesson 100+ years ago?  Sets of sets are dangerous things.

[18:57] <colomon> very large football stadiums, in my case.  ;)

[18:57] <TimToady> but...we want P6 to be dangerous...

[18:58] <masak> it's not sets of sets that are dangerous. ZFC is full of them (and *nothing else*).

[18:58] * PerlJam now pictures that TimToady quote showing up on twitter out of context.

[18:58] <masak> it's non-wellfoundedness we should look out for.

[18:58] <TimToady> it's sets defined in terms of themselves that are the problem

[18:58] *** berekuk joined
[18:59] <TimToady> We want Perl 6 to be the safest dangerous language, and the most dangerous safe language.

[18:59] * colomon hopes masak  and TimToady don't spend the rest of the day trying to figure out how to implement a set that contains itself....

[19:00] <TimToady> r: my @a = <a b c>; @a[3] := @a; say @a

[19:00] <camelia> rakudo 170856: OUTPUT«(timeout)»

[19:00] <FROGGS> hehe

[19:02] <masak> r: my $s = set; multi sub infix:<(elem)>(Set $r, Set $l) { $r === $s && $l === $s ?? True !! nextsame }; say $s (elem) $s

[19:02] <camelia> rakudo 170856: OUTPUT«True␤»

[19:02] <masak> \o/

[19:03] * masak admires the horribleness of that

[19:03] <masak> in fact,

[19:03] <masak> r: my $s = set; multi sub infix:<(elem)>(Set $r, Set $l) { $r === $s && $l === $s || nextsame }; say $s (elem) $s

[19:03] <colomon> somebody else can be responsible for coming up with set of sets tests for roast....

[19:03] <camelia> rakudo 170856: OUTPUT«True␤»

[19:06] <colomon> shouldn't we be working on number theory today, considering all the interesting announcements?

[19:07] <moritz> like the prove for the weak Goldback hypothesis?

[19:07] <sorear> wait, what?

[19:08] <colomon> sorear: odd nums > 5 are the sum of 3 primes, that one

[19:09] <colomon> it's not confirmed yet, but there's supposed to be a 130 page proof.

[19:10] <colomon> also, there are an infinite number of pairs of primes within 70,000,000 of each other.

[19:10] <moritz> https://plus.google.com/u/0/114134834346472219368/posts/8qpSYNZFbzC

[19:10] <colomon> two separate proofs

[19:10] <moritz> http://arxiv.org/abs/1305.2897 is the paper for the Goldbach one

[19:10] <masak> it's a good day to be prime.

[19:11] <colomon> https://plus.google.com/u/0/114134834346472219368/posts/XESxA9bL5um talks about the other result

[19:11] <dalek> std: e2a36d8 | larry++ | STD.pm6:

[19:11] <dalek> std: disallow set<a b c>

[19:11] <dalek> std: 

[19:11] <dalek> std: A (beneficial?) side effect is that you may no longer say 'set'

[19:11] <dalek> std: to mean ∅.  You must say 'set()' instead.  Which is perhaps clearer...

[19:11] <dalek> std: review: https://github.com/perl6/std/commit/e2a36d8620

[19:12] <moritz> quick, let's do some RSA with expmod :-)

[19:12] <PerlJam> wikipedia says odd nums > 7 for the goldbach conjecture: http://en.wikipedia.org/wiki/Goldbach's_weak_conjecture

[19:12] <PerlJam> (and, as we all know, wikipedia is infallible ;)

[19:12] <colomon> PerlJam: 2 + 2 + 3 = 7

[19:14] <PerlJam> 2 is not an odd number last time I checked  :)

[19:14] <moritz> 2 is the oddest prime :-)

[19:14] <masak> PerlJam: that's not relevant.

[19:14] <TimToady> 2 is the only prime that is not the sum of 3 primes if we allow 1 to be a prime :)

[19:14] <masak> it's the sum that should be odd.

[19:14] <TimToady> well, and 1

[19:15] <dalek> perl6-bench: 53be1bb | (Geoffrey Broadwell)++ | analyze:

[19:15] <dalek> perl6-bench: Calculate peak rates per perl in analyze compare_scaled_times()

[19:15] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/53be1bb39d

[19:15] <dalek> perl6-bench: b3a904a | (Geoffrey Broadwell)++ | analyze:

[19:15] <dalek> perl6-bench: More analyze changes for scaled times: fix enabled_perls() and start fixing summarize_results_text()

[19:15] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/b3a904acc8

[19:15] <PerlJam> masak: and we're back to what wikipedia says ...  "Every odd number greater than 7 can be expressed as the sum of three odd primes."

[19:15] <colomon> TimToady: I did find it interesting that weak Goldbach seems like it is more naturally stated if 1 is prime.  :)

[19:16] <colomon> PerlJam: wikipedia is weird

[19:16] <PerlJam> I don't know that that's Goldbach's weak conjecture or not, but it's certainly different than "every odd number greater than five is the sum of three primes"

[19:16] <masak> PerlJam: well, if you require the primes to be odd, then you'd lose 7, yes.

[19:16] <PerlJam> right.

[19:16] <moritz> PerlJam: I guess there are several competing phrasings of that conjecture, all of which boil down to the same interesting question

[19:16] <masak> besides that, it's not clear to me that the claims are equivalent.

[19:17] <moritz> because it's easy to prove it for any arbitrary limit you set yourself

[19:17] <colomon> PerlJam: check out the summary to http://arxiv.org/abs/1305.2897

[19:20] <sorear> looks like this isn't the first purported proof of the WGC that's too long to quickly verify

[19:20] <sorear> and it probably won't be the last. sorry.

[19:20] <PerlJam> sorear: all the hard problems are.

[19:21] <moritz> though the good sign is that the same author previously published an accepted proof for a weaker formulation

[19:21] *** dmol joined
[19:21] <moritz> time will tell.

[19:22] *** nyuszika7h left
[19:23] *** autark joined
[19:24] <PerlJam> Remember the hubub around the proof of Fermat's Last Theorem?  Took a couple of years to work out if the proof was a proof.

[19:24] <masak> my latest "wow" moment related to mathematics was learning (on Wikipedia) that the fundamental theorem of finitely generated abelian groups is directly related to the Chinese remainder theorem.

[19:26] <masak> I have a special sweet spot for the latter, because of a program involving numbers modulo 3, 5, and 7 found in this book: http://www.amazon.com/BASIC-Computer-Games-Microcomputer-Edition/dp/0894800523/

[19:27] *** dmol left
[19:28] *** cooper joined
[19:30] *** nyuszika7h joined
[19:30] <masak> I should totally blog about that one at some point.

[19:33] *** gfldex_ is now known as gfldex

[19:35] <PerlJam> I have a book by the same author called "The Texas Instruments Home Computer Idea Book"   I gather he was prolific in BASIC books  :)

[19:41] <masak> those BASIC games meant a lot to my early growth as a programmer. not because they were of excellent design, but because they were fun, and interesting to try to reverse-engineer.

[19:41] <masak> and it's kind of rewarding when you reverse-engineer a number guessing game and find the Chinese remainder theorem. :P

[19:42] *** telex joined
[19:42] *** _ilbot left
[19:42] *** moritz left
[19:43] *** _ilbot joined
[19:43] <FROGGS> std: use v5; require v5.0.0

[19:43] <camelia> std e2a36d8: OUTPUT«===SORRY!===␤Number contains two decimal points (missing 'v' for version number?) at /tmp/XMkktheIyn line 1:␤------> use v5; require v5.0.⏏0␤Parse failed␤FAILED 00:01 52m␤»

[19:44] <masak> er.

[19:44] <masak> confused STD is confused.

[19:45] <FROGGS> ya, but we can help it out there :o)

[19:45] *** moritz joined
[19:47] <dalek> nqp/rak-jvm-support: 41e4fb0 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[19:47] <dalek> nqp/rak-jvm-support: Fix nqp::div_In.

[19:47] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/41e4fb0f43

[19:47] <dalek> nqp/rak-jvm-support: fc571c1 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[19:47] <dalek> nqp/rak-jvm-support: Implement nqp::replace op.

[19:47] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/fc571c1d94

[19:50] *** autark` joined
[19:50] *** autark left
[19:50] <dalek> std: 4dc2553 | (Tobias Leich)++ | STD_P5.pm6:

[19:50] <dalek> std: allow: require VERSION

[19:50] <dalek> std: 

[19:50] <dalek> std: Found in Perl5's testsuite in t/comp/require.t.

[19:50] <dalek> std: review: https://github.com/perl6/std/commit/4dc2553cbf

[19:54] <dalek> perl6-roast-data: 14f41d4 | coke++ | / (4 files):

[19:54] <dalek> perl6-roast-data: today (automated commit)

[19:54] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/14f41d44ed

[19:55] *** FROGGS[mobile] left
[19:56] <[Coke]> niecza has been dirty for 301 days. pugs has been clean for 1 day. rakudo has been dirty for 10 days. # yay, pugs is clean again.

[19:56] <FROGGS> ó.ò

[19:56] <FROGGS> I wish I could reproduce that rakudobug

[19:56] <[Coke]> Happy to test proposed fixes for rakudo on feather, since that's the only place it seems to be exploding on that test.

[19:56] <[Coke]> FROGGS: do you have an account on feather?

[19:56] <FROGGS> ohh, I had once

[19:57] <FROGGS> hmmm

[19:57] <TimToady> std: set<a b c>;

[19:57] <camelia> std e2a36d8: OUTPUT«===SORRY!===␤The 'set' listop may not be called without arguments (please use () or whitespace to clarify) at /tmp/PADZ4qSrTX line 1:␤------> set⏏<a b c>;␤Potential difficulties:␤  Use of non-subscript <...> where postfix is expec…

[19:58] *** frdmn_ joined
[19:58] *** frdmn left
[19:58] <TimToady> std: set;

[19:58] <camelia> std e2a36d8: OUTPUT«===SORRY!===␤The 'set' listop may not be called without arguments (please use () or whitespace to clarify) at /tmp/t3YsN5H42z line 1:␤------> set⏏;␤Check failed␤FAILED 00:00 41m␤»

[19:58] <TimToady> std: set();

[19:58] <camelia> std e2a36d8: OUTPUT«ok 00:00 41m␤»

[19:59] *** frdmn_ is now known as frdmn

[19:59] <masak> TimToady++

[19:59] *** rindolf left
[20:00] <masak> rn: set<a b c>;

[20:00] <camelia> rakudo 170856, niecza v24-51-g009f999:  ( no output )

[20:00] * masak submits rakudobug

[20:00] <masak> rn: set;

[20:00] <camelia> rakudo 170856, niecza v24-51-g009f999:  ( no output )

[20:01] <FROGGS> [Coke]: I've got a mail in my outbox about requesting an account on feather, but I cant remember if I already got one :/

[20:01] <FROGGS> moritz: can you check that somehow?

[20:02] *** gdey joined
[20:04] <[Coke]> ~froggs exists.

[20:05] <[Coke]> let me see if I can reset your password.

[20:05] <FROGGS> cool

[20:08] * [Coke] tries to figure out how to go to window 27 with an escape key in irssi.

[20:08] <moritz> FROGGS, [Coke]: did the password reset work?

[20:08] <Tene> "escape key"?

[20:09] <FROGGS> moritz: it did

[20:09] <Tene> [Coke]: /bind

[20:10] <[Coke]> tene: ESC-7:/win 7::ESC-U:/win 17::ESC-??:/win 27

[20:10] *** SamuraiJack left
[20:10] <Tene> [Coke]: yeah, just set it with /bind.  You can run /bind with no arguments to get a list of current bindings for examples.

[20:11] <Tene> I have up to 33 bound, going down the keyboard through m

[20:11] <Util> For the GSoC task "JavaScript backend for NQP (and Rakudo Perl 6)", benabik is listed as a possible mentor, but he is also listed on other tasks.

[20:12] <Util> Any Rakudo people up for being mentor (or co-mentor or backup mentor) for that task?

[20:12] <[Coke]> pmichaud had volunteered. I'm willing to if no one else does.

[20:13] <Tene> [Coke]: Just make sure to /save when you've got it how you want.

[20:15] *** DreamingInCode1 joined
[20:15] <Util> [Coke]: yes, he did, and I did not see my note about it before asking. Thanks!

[20:17] *** ajr joined
[20:18] *** ajr is now known as Guest59475

[20:19] *** Guest59475 is now known as ajr_

[20:22] <ajr_> I was just looking around the code for a place to maintain the record count $*IN.input_record_number() (rakudo/src/core/IO.pm ?) but then two thoughts occurred to me.

[20:23] <ajr_> First, this looks like a method, not a variable name.

[20:23] <FROGGS> moritz / [Coke]: I cant install parrot, it tells me the disk is full O.o

[20:24] <ajr_> Second, how to maintain the value, associated with the file - what happens if there are multiple files in/out?

[20:25] <PerlJam> ajr_: aye, it's a method.  Is that a problem?

[20:26] <ajr_> Well, the value has to be maintained somewhere.

[20:26] <masak> ajr_: the method is just a way to return the value.

[20:27] <PerlJam> ajr_: the value is kep in the object.

[20:27] <PerlJam> s/kep/kept/

[20:27] <masak> I don't know the answer to the "multiple files in/out" question. the question feels insufficiently specified.

[20:28] <ajr_> The fact it's a method may make the question redundant, though how is the method associated with a particular file?

[20:29] <[Coke]> FROGGS: whoops. I'll see how much of that I can deal with.

[20:29] <ajr_> There might be a case where you're reading two files, and want the record count for each one.

[20:29] <masak> ajr_: it's associated with a filehandle, like $*IO

[20:30] <masak> ajr_: if you've opened your own file, and stored the filehandle in a variable $fh, it'd be $fh.input_record_number()

[20:30] <masak> ajr_: I'm confused at your confusion :)

[20:30] *** domidumont left
[20:31] <PerlJam> ajr_: are you thinking of p5's automagic $ARGV switching when reading the ARGV handle?

[20:31] <ajr_> So $*IN.input_record_number() would return the count for STDIN?

[20:31] <masak> aye.

[20:32] <dalek> perl6-bench: a90094c | (Geoffrey Broadwell)++ | analyze:

[20:32] <dalek> perl6-bench: More improvements to summarize_results_text() in analyze

[20:32] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/a90094cd39

[20:32] <dalek> perl6-bench: 4a29ed0 | (Geoffrey Broadwell)++ | analyze:

[20:32] <dalek> perl6-bench: More tweaks to headers in summarize_results_text() in analyze

[20:32] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/4a29ed04f4

[20:32] * PerlJam notes that the $ARGV equivalent is to be determined in S28

[20:32] * TimToady wonders if it would make more sense to send the line number with the line in question

[20:34] <ajr_> Is the same input method used for all files, including $IN*, or are there special ones?

[20:34] <PerlJam> ajr_: "same input method"?

[20:36] *** gdey left
[20:37] <PerlJam> TimToady: would that imply that the idiom for lines() would change?

[20:37] <ajr_> PerlJam: I'm trying to find the appropriate place to maintain a record count, which is presumably where the file is read?

[20:37] <PerlJam> ajr_: the IO handle that's associated with the file seems like the right place to me.

[20:38] <PerlJam> ajr_: are you asking if there are other IO thingies that read files that aren't also IO::Handles?

[20:39] <dalek> rakudo/jvm-support: 2dc8c3a | jnthn++ | src/core/terms.pm:

[20:39] <dalek> rakudo/jvm-support: Make %*ENV setup portable (hopefully).

[20:39] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/2dc8c3a3a8

[20:39] <dalek> rakudo/jvm-support: 7a2efe3 | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/Ops.java:

[20:39] <dalek> rakudo/jvm-support: Missing null check.

[20:39] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/7a2efe32af

[20:39] <dalek> rakudo/jvm-support: 9412ca4 | jnthn++ | src/core/ (3 files):

[20:39] <dalek> rakudo/jvm-support: Mark out a few things that explode on JVM.

[20:39] <dalek> rakudo/jvm-support: 

[20:39] <dalek> rakudo/jvm-support: This gets the setting loadable, just about.

[20:39] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/9412ca41ea

[20:39] <colomon> \o/

[20:39] <ajr_> PearlJam: I think that's the question.

[20:40] <PerlJam> ajr_: you could start with solving the problem for IO::Handle and then worry about other IO thingies if they happen to show up.

[20:41] <ajr_> OK, I'll look there.

[20:43] *** kaare_ left
[20:44] *** donaldh_ joined
[20:45] *** donaldh_ left
[20:45] <[Coke]> FROGGS: you probably have enough room to build one parrot now, anyway.

[20:46] *** donaldh left
[20:46] *** donaldh joined
[20:46] <FROGGS> [Coke]: yeah, currently trying... [Coke]++

[20:52] *** denisboyun left
[20:52] <jnthn> $ perl6 -e "say 'omg something works on le jvm'"

[20:52] <jnthn> omg something works on le jvm

[20:52] <donaldh> jnthn++

[20:52] <jnthn> That's probably about all that works, but... :P

[20:53] <donaldh> heh

[20:53] <jnthn> Gee, this startup time will want a little work :)

[20:54] <[Coke]> Anyone who is using perlbrew on feather - please remove your build directories.

[20:54] *** thou left
[20:54] <FROGGS> jnthn++

[20:54] <[Coke]> (azawawi is the one I found first, but that's pretty big)

[20:55] <dalek> nqp/rak-jvm-support: 9d74404 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/P6Opaque.java:

[20:55] <dalek> nqp/rak-jvm-support: Support nqp::isattrinit properly on P6opaque.

[20:55] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/9d7440459c

[20:55] <dalek> nqp/rak-jvm-support: 9db6da9 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/SixModelObject.java:

[20:55] <dalek> nqp/rak-jvm-support: More informative errors.

[20:55] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/9db6da99ec

[20:57] <[Coke]> (I don't actually see an subcommand for perlbrew to do a cleanup. wonder if it's safe to just remove the build dir.)

[21:00] <FROGGS> [Coke]: maybe it is blowing up because of the qemu vm

[21:00] <japhb__> What module in the Perl 5 world would create the closest equivalent of (simple variable) binding in Perl 6?

[21:01] <PerlJam> someone could setup perlbrew system wide so that each version is only installed once ( that might mitigate the build dir size problem at least)

[21:01] <[Coke]> FROGGS: are you seeing the failure now

[21:01] <sorear> Data::Alias?

[21:01] <lizmat> japhb_: Data::Alias provides an "alias" function

[21:03] *** araujo_ left
[21:03] *** araujo joined
[21:03] *** araujo left
[21:03] *** araujo joined
[21:04] <dalek> rakudo/jvm-support: 33bc338 | jnthn++ | src/vm/jvm/runtime/org/perl6/rakudo/ (3 files):

[21:04] <dalek> rakudo/jvm-support: Add DEBUG_MODE flag for the reams of warnings.

[21:04] <dalek> rakudo/jvm-support: 

[21:04] <dalek> rakudo/jvm-support: Turn them off by default, so "say 'hello'" doesn't give thousands of

[21:04] <dalek> rakudo/jvm-support: lines of output.

[21:04] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/33bc3386fb

[21:04] <dalek> rakudo/jvm-support: 09ecb72 | jnthn++ | src/ (2 files):

[21:04] <dalek> rakudo/jvm-support: Small tweaks to get 'hello world' working.

[21:04] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/09ecb726c3

[21:04] <dalek> rakudo/jvm-support: 5c82398 | jnthn++ | / (2 files):

[21:04] <dalek> rakudo/jvm-support: Add CORE.setting to the build.

[21:04] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/5c8239850f

[21:04] <FROGGS> [Coke]: not yet

[21:05] *** pmurias joined
[21:05] <pmurias> Ulti: re mentors, pmichaud is mentioned in the 

[21:05] <pmurias> Ulti: "Possible Mentors" section 

[21:06] <japhb__> lizmat, sorear, thank you.

[21:11] <[Coke]> FROGGS: try the version in ~coke/sandbox/perl6pass/rakudo

[21:11] <FROGGS> k, thanks

[21:12] <FROGGS> I'm not sure my rakudo there is picking up the right nqp

[21:12] <[Coke]> the build in my dir is whatever is recommended by the the nom branch.

[21:13] <ajr_> The lines method in IO.pm maintains a line count ($count) which could be stored, but slurp doesn't. Is it reasonable to expect a line count for a slurped file?

[21:13] <FROGGS> ajr_: if you slurp a file at once, what do you need a line count for?

[21:13] <[Coke]> .tell au - so far, you have the biggest directory on feather and we're tight on space. Anything you can clean up?

[21:13] <yoleaux> [Coke]: I'll pass your message to au.

[21:14] <sorear> au doesn't irc often, you ought to send an email too

[21:15] <ajr_> FROGGS: The number of lines (records) in the file might be significant; what if that's what interests you?

[21:15] <[Coke]> If someone who knows her email addy could do that, I'd appreciate it.

[21:15] <FROGGS> [Coke]: okay, I get the coredump with my freshly built rakudo too

[21:15] <lizmat> ajr_: lines method is specced as only being applicable to lines red with "get" (S32/IO:202)

[21:16] <lizmat> read

[21:16] <[Coke]> FROGGS++

[21:16] *** bruges joined
[21:16] <ajr_> OK, then the answer for slurp is no, it's not reasonable.

[21:17] <FROGGS> r: say "abc\ndef\n".lines()

[21:17] <camelia> rakudo 170856: OUTPUT«abc def␤»

[21:17] <FROGGS> r: say "abc\ndef\n".lines().elems

[21:17] <camelia> rakudo 170856: OUTPUT«2␤»

[21:25] *** avarab is now known as avar

[21:27] *** kurahaupo joined
[21:32] <ajr_> There's a method "ins" in S32 which looks as though it's meant to be what S28 has defined as input_record_number:

[21:32] <ajr_> $. $NR              $*IN.input_record_number()

[21:32] <ajr_>  $/ $RS              $*IN.input_record_separator()

[21:32] *** kurahaupo left
[21:33] *** mtk left
[21:36] *** mtk joined
[21:36] *** thou joined
[21:38] *** ajr_ left
[21:41] *** PacoAir left
[21:44] <lizmat> is there a reason why Array.elems is not a left value ?

[21:45] <lizmat> or do I have to use .splice to set the length of an array ?

[21:45] <japhb> lizmat, diakopter++ pointed out that I should mention to you: I'm head down on my benchmarking talk, trying to give you, tadzik, FROGGS, etc. as much time as possible to hash out ecosystem thoughts, before I write my ecosystem talk.  diakopter helpfully pointed out that if I don't say it out loud, no one knows.  ;-)

[21:46] <FROGGS> japhb: k, good to know :o)

[21:46] <lizmat> which ecosystem talk?

[21:46] <lizmat> nobody tells me anything ever  :-)

[21:46] *** kurahaupo joined
[21:46] <lizmat> rn: my @a; @a.elems=3

[21:46] <FROGGS> lizmat: interesting idea 

[21:46] <camelia> niecza v24-51-g009f999: OUTPUT«Unhandled exception: Writing to readonly scalar␤  at /tmp/Zu4pfdqp6Q line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4331 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4332 (module-CORE @ 582) ␤  at /home/p6eval/niecza/li…

[21:46] <camelia> ..rakudo 170856: OUTPUT«Cannot assign to a readonly variable or a value␤  in block  at /tmp/gsA4w0QamN:1␤␤»

[21:47] <lizmat> $#array in perl 5 is also a left value, fwiw  :-)

[21:47] <FROGGS> hehe

[21:47] <FROGGS> it is somehow weird what I learn about perl 5 in this channel

[21:48] <lizmat> he, you're reimplementing it, you should pick up *something*  :-)

[21:48] <tadzik> japhb: hash out?

[21:49] <tadzik> japhb: I can find my old ecosystem talk slides if you want them

[21:49] <tadzik> japhb: the talk sucked though

[21:49] *** alester left
[21:49] <[Coke]> ah. the big space hog is in /data/var/spool

[21:50] <PerlJam> lizmat: you don't have to use splice, you can just set @array[$index]

[21:50] <lizmat> ??  you mean at initialization?

[21:51] <japhb> tadzik, hash out = brainstorm/discuss/figure out/design ...

[21:51] <[Coke]> will continue the hunt when I get home.

[21:51] <japhb> lizmat, looking for talk on yapc site, hold

[21:51] <PerlJam> r: my @array;  @array[57] = Nil; @array.elems

[21:51] <camelia> rakudo 170856:  ( no output )

[21:51] <PerlJam> r: my @array;  @array[57] = Nil; say @array.elems

[21:51] <camelia> rakudo 170856: OUTPUT«58␤»

[21:51] <japhb> lizmat: http://www.yapcna.org/yn2013/talk/4695

[21:51] <japhb> Description written by diakopter.  ;-)

[21:52] <lizmat> PerlJam: and now to make it smaller ?

[21:52] <PerlJam> lizmat: do you want to limit the size of the array, or just extend it like you can in Perl 5?

[21:52] <lizmat> I want to limit it 

[21:53] <dalek> perl6-bench: 594448e | (Geoffrey Broadwell)++ | analyze:

[21:53] <dalek> perl6-bench: analyze: comment out unused line, improve HTML output

[21:53] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/594448e3f7

[21:53] <dalek> perl6-bench: 492eed3 | (Geoffrey Broadwell)++ | / (2 files):

[21:53] <dalek> perl6-bench: Use Data::Alias to simulate binding on Perl 5; add to PREREQUISITES list in README

[21:53] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/492eed3591

[21:55] *** perlpilot joined
[21:55] <lizmat> n: my @a= (1..10); @a[*]:delete; say @a

[21:55] <camelia> niecza v24-51-g009f999: OUTPUT«Unhandled exception: Excess arguments to KERNEL Array.postcircumfix:<[ ]>, unused named delete␤  at <unknown> line 0 (KERNEL Array.postcircumfix:<[ ]> @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 179 (postcircumfix:<[ ]> @ 5) ␤  at /tmp/wvTQEKVp_w …

[21:56] <lizmat> pugs: my @a= (1..10); @a[*]:delete; say @a

[21:56] <camelia> pugs: OUTPUT«*** ␤    Unexpected ":delete"␤    expecting term postfix or operator␤    at /tmp/60aQ8LsoAm line 1, column 22␤»

[21:56] <PerlJam> oh, then   my @array[15]; # will limit the size of the array, but it's NYI (I think)

[21:56] <lizmat> yes, but that's compile time, I want runtime  :-)

[21:58] <perlpilot> [Coke]: feather is pausing bizarrely for me.  I guess this is related to the almost-full disk?

[21:59] <FROGGS> perlpilot: maybe [Coke] is running a treesize? I experience pauses too

[22:01] <lizmat> pugs: my %h=a=>1; say %h{*}:delete

[22:01] <camelia> pugs: OUTPUT«pugs: Named argument found where no matched parameter expected: (delete,Val (VBool True))␤»

[22:01] <lizmat> n: my %h=a=>1; say %h{*}:delete

[22:01] <camelia> niecza v24-51-g009f999: OUTPUT«(Any)␤»

[22:02] <sorear> o/ perlpilot 

[22:04] *** lustlife left
[22:04] <dalek> roast: 574c899 | (Elizabeth Mattijsen)++ | S32-hash/delete_adverb.t:

[22:05] <dalek> roast: Added Array:delete tests

[22:05] <dalek> roast: 

[22:05] <dalek> roast: Also made sure that fudging Niecza and Pugs is hopefully correct, so that

[22:05] <dalek> roast: syntax errors are "skip" rather than "todo"

[22:05] <dalek> roast: review: https://github.com/perl6/roast/commit/574c899510

[22:07] *** perlpilot left
[22:08] <raiph> am i right in understanding that jnthn++ has "hello world" working for rakudo on jvm?

[22:08] *** fgomez_ left
[22:08] <FROGGS> raiph: yes, look like

[22:09] * lizmat thinks it was "omg something works on le jvm", and not "hello world"  :-)

[22:09] <FROGGS> pedantic :P

[22:10] <lizmat> that's my *middle* name

[22:11] <raiph> lizmat: ??? i'm asking if he's saying that 'say "hello world"' works on his local rakudo on jvm.

[22:12] <diakopter> yes

[22:12] <diakopter> it does

[22:13] <diakopter> 21:21 < jnthn> 23:33 < jnthn> $ perl6 -e "say 'omg something works on le jvm'"

[22:13] <diakopter> 21:21 < jnthn> 23:33 < jnthn> omg something works on le jvm

[22:13] <lizmat> http://irclog.perlgeek.de/perl6/2013-05-14#i_7068276

[22:13] <diakopter> ohhh

[22:13] <diakopter> lol. 

[22:13] <diakopter> now I get it. :)

[22:14] <raiph> ohh, i missed that. just saw the later commit msg, thanks lizmat

[22:17] <lizmat> I wonder how bad it would be to have a separate "multi method postcircumfix:<[ ]>(\SELF: $pos where $pos < 0) is rw {" candidate to fail

[22:18] <lizmat> and remove the "fail if $pos < 0" from all the other candidates in Any

[22:19] <jnthn> lizmat: Suspect that way spoils the cache's day too.

[22:20] <lizmat> I guess the optimiser isn't smart enough to skip that candidate altogether when $pos is an uint ?

[22:20] <jnthn> It can't do anything when it's a method call, which it is at the moment.

[22:21] <jnthn> In the future, they'll be multi subs, and it'll be able to analyse them more, but it's likely to handle the way it is now better.

[22:21] <jnthn> Or at least do so sooner.

[22:21] <FROGGS> just to confirm: I cant export/import a variable from a module right now, or can I?

[22:21] <jnthn> FROGGS: Only constants.

[22:21] *** xilo left
[22:21] <lizmat> and I don't think you can do enums either

[22:21] <FROGGS> :/

[22:22] <FROGGS> I want to export %*ENV as %ENV to v5

[22:22] <lizmat> not unless you make your own EXPORT sub

[22:22] <lizmat> afaik

[22:22] <FROGGS> doing that would be fine too, but it didnt work yesterday when I tried

[22:23] <jnthn> You can do enums, it just doesn't export the elements.

[22:23] <jnthn> As in, you have to longname 'em.

[22:23] <lizmat> ah, yes, it exports the elements if you map $_ to "eval $_", if I remember correctly

[22:24] <FROGGS> r: module A { sub EXPORT(|) { my %ex; %ex<%ENV> := %*ENV; %ex } }; import A; say %ENV

[22:24] <camelia> rakudo 170856: OUTPUT«===SORRY!===␤Variable '%ENV' is not declared␤at /tmp/piquGLNSNU:1␤------> V> := %*ENV; %ex } }; import A; say %ENV⏏<EOL>␤    expecting any of:␤        postfix␤»

[22:24] <FROGGS> should that work? (by spec?)

[22:27] *** fgomez joined
[22:27] *** prammer_ left
[22:28] *** prammer_ joined
[22:28] <lizmat> sub EXPORT should be in UNIT

[22:29] <lizmat> (before the "module")

[22:29] * lizmat is just cargo-culting from code she made for the masakism workshop

[22:29] <donaldh> jnthn: Trying to use HLL::Compiler.lineof but QAST::CompilerJAST is not an HLL::Compiler. 

[22:29] <FROGGS> okay, so it must be a separate file

[22:30] <donaldh> jnthn: Can I get to the HLL::Compiler ?

[22:30] <lizmat> possibly, not sure

[22:30] <jnthn> UNIT implies separate file, yeah.

[22:30] <jnthn> donaldh: I suspect so.

[22:30] <FROGGS> ... because I cant import from a module I am in

[22:31] <FROGGS> k, will try that after $short-sleep

[22:31] <FROGGS> gnight all o/

[22:31] <jnthn> donaldh: You may need a "use NQPHLL" or so.

[22:31] <jnthn> 'night, FROGGS 

[22:31] <donaldh> ah. 

[22:31] <jnthn> donaldh: Which may also want a Makefile update to add the dep.

[22:31] <donaldh> jnthn: I tried a use HLL::Compiler which blew up :)

[22:31] <lizmat> 'night FROGGS

[22:32] <FROGGS> HAH!! it is working!!

[22:33] <FROGGS> I just had to move it before my "class Perl5::Terms;" declaration

[22:33] <FROGGS> lizmit++ # should be lizmit**100

[22:33] <FROGGS> \o/

[22:34] <donaldh> jnthn++ use NQPHLL works

[22:36] <donaldh> and Makefile dep appears to be there already.

[22:38] <jnthn> oh :

[22:38] <jnthn> :)

[22:45] *** fgomez left
[22:53] *** xilo joined
[22:53] <donaldh> yay, part way there. I have line numbers for the starts of blocks. 

[22:54] <jnthn> \o/

[22:54] <donaldh> The stack goes from NQPHLL.nqp -> t/nqp/01-literal.t -> NQPCORE.setting

[22:55] <donaldh> I know it _should_ do that, but it's still surreal.

[22:55] <jnthn> :)

[22:55] <jnthn> This will be a big help. :)

[22:57] <[Coke]> do we have any qmail admins here?

[22:58] <masak> jnthn++ # hello world

[22:58] * jnthn is almost done with a blog post :)

[22:58] <donaldh> It, uh, isn't that friendly in the Eclipse debug view until you click on a line https://gist.github.com/donaldh/5580373

[22:59] <[Coke]> jnthn++!

[23:00] <masak> dang, now I gotta wait until jnthn posts his blog post until I can go to bed... :P

[23:00] * lizmat can't wait for jnthn's blog post, but can't keep her eyes open so goes to sleep&

[23:01] *** pmurias left
[23:01] <masak> 'night, lizmat 

[23:01] <jnthn> o/ lizmat 

[23:01] <masak> dream about successful EXPORTs.

[23:01] *** Chillance left
[23:03] *** sjohnson left
[23:03] *** sjohnson joined
[23:13] <[Coke]> we want mail to be working on feather, yes?

[23:14] <[Coke]> I see undelivered git messages to audreyt from 2011, e.g.

[23:14] <lue> Did I read that last rakudo/jvm-support commit from a while ago correctly? (Specifically, "I can use Rakudo on JVM... kinda")

[23:15] <[Coke]> hello world works.

[23:16] *** gdey joined
[23:16] * lue goes to upgrade his icedtea then

[23:17] * donaldh needs a faster computer

[23:18] <donaldh> s/needs/wants/

[23:19] <[Coke]> .ask juerd - feather ran out of disk space today- looks like messages are piled up in /var/qmail from (ever) and need to be delivered.

[23:19] <yoleaux> [Coke]: I'll pass your message to juerd.

[23:20] <[Coke]> .ask juerd - I'm out of my depth and don't know anything about qmail.

[23:20] <yoleaux> [Coke]: I'll pass your message to juerd.

[23:20] <[Coke]> (now might be a good time to create a .forward file if you don't have one.)

[23:26] *** thou left
[23:29] <masak> 'night, #perl6

[23:30] <TimToady> o/

[23:32] <jnthn> post: http://6guts.wordpress.com/2013/05/15/rakudo-on-jvm-progress-update-and-some-questions-answered/

[23:34] <TimToady> \o/

[23:34] *** DreamingInCode1 left
[23:34] *** DreamingInCode joined
[23:35] <sorear> jnthn++

[23:35] *** DreamingInCode left
[23:36] *** DreamingInCode joined
[23:41] <donaldh> jnthn: I've sent a pull request for source annotations on rak-jvm-support

[23:41] <jnthn> donaldh: Thanks; I'll take a look tomorrow.

[23:42] <donaldh> g'night o/

[23:42] <jnthn> Should rest now...need to make some vague attempt to get my body to sleep at normal-ish times given I gotta teach Thu/Fri...

[23:42] <jnthn> 'night

[23:42] *** donaldh left
[23:51] <[Coke]> jnthn++

