[00:00] <pmurias> QAST::VM.new(:jvm(QAST::SVal.new( :value('ModuleLoader.class')) ;)

[00:01] <jnthn> Oh

[00:01] <jnthn> yeah, OK, that bit is :)

[00:01] <jnthn> s/nothing/few things/ :)

[00:02] <jnthn> Maybe I should add a :generic to mark those out.

[00:02] <jnthn> (as in, the ones that are likely generic)

[00:03] <pmurias> if something is generic we should implement it on all vms and avoid QAST::VM

[00:04] <jnthn> In the case of forceouter, yes, it should be an nqp::op implemented everywhere.

[00:04] <masak> 'night, #perl6

[00:08] <timotimo> night masak

[00:08] <timotimo> stay positive :)

[00:09] *** benabik joined
[00:18] *** kst` is now known as kst

[00:21] <jnthn> Grrr...something is still not quite right somewhere. Getting the odd serialization error.

[00:21] <jnthn> Well, enough for today... 'night &

[00:24] *** donaldh left
[00:24] <felher> 'night, jnthn 

[00:36] <dalek> rakudo-js: 669640b | (Pawe≈Ç Murias)++ | / (5 files):

[00:36] <dalek> rakudo-js: Update to work with nqp commit 3089165aa0646a334d24792cb7434051bdd4900f.

[00:36] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/669640bbee

[00:39] *** Chillance left
[00:39] *** cognominal left
[00:40] *** pmurias left
[00:44] *** cognominal joined
[00:56] *** stevan_ joined
[01:00] *** ggoebel_ joined
[01:10] *** anuby joined
[01:22] *** cognominal__ joined
[01:23] *** cognominal left
[01:44] *** ggoebel_ left
[02:12] *** cognominal__ left
[02:13] *** cognominal__ joined
[02:13] *** FROGGS_ joined
[02:15] *** dayangkun left
[02:17] *** FROGGS left
[02:20] <colomon> o/

[02:20] *** japhb_ left
[02:31] *** cognominal__ left
[02:49] <sorear> o/ colomon

[02:49] <colomon> sorear: how's it going?

[02:50] <sorear> good

[02:50] <colomon> glad to hear it!

[02:50] *** aindilis left
[02:50] <colomon> my $work has been driving me insane the last week.

[03:00] *** dayangkun joined
[03:11] *** sivoais_ joined
[03:14] *** felipe left
[03:14] *** wtw left
[03:14] *** xdbr left
[03:14] *** crazedpsyc left
[03:14] *** LoRe left
[03:14] *** sjn left
[03:14] *** telex left
[03:14] *** Patterner left
[03:14] *** xinming_ left
[03:14] *** jtpalmer_ left
[03:14] *** Pleiades` left
[03:14] *** [Coke] left
[03:14] *** tadzik left
[03:14] *** Timbus left
[03:14] *** Vlavv left
[03:14] *** simcop2387 left
[03:14] *** breinbaas left
[03:14] *** rom1504 left
[03:14] *** rafl left
[03:14] *** sweet_kid left
[03:14] *** nyuszika7h left
[03:14] *** jdv79 left
[03:14] *** krunen left
[03:14] *** eternaleye left
[03:14] *** perigrin left
[03:14] *** Yappocall_ left
[03:14] *** mehwork left
[03:14] *** kst left
[03:14] *** mathw left
[03:14] *** Juerd left
[03:14] *** colomon left
[03:14] *** Ayiko left
[03:14] *** renormalist left
[03:14] *** lue left
[03:14] *** betterwo1ld left
[03:14] *** Gothmog_ left
[03:14] *** araujo left
[03:14] *** p5eval left
[03:14] *** atrodo left
[03:14] *** diakopter left
[03:14] *** cxreg left
[03:14] *** SHODAN left
[03:14] *** Tene left
[03:14] *** cotto left
[03:14] *** amkrankruleuen left
[03:14] *** [particle] left
[03:14] *** baest left
[03:14] *** TimToady left
[03:14] *** raiph_ left
[03:14] *** groky left
[03:14] *** Bucciarati left
[03:14] *** dayangkun left
[03:14] *** FROGGS_ left
[03:14] *** anuby left
[03:14] *** stevan_ left
[03:14] *** dalek left
[03:14] *** jerome left
[03:14] *** jaldhar left
[03:14] *** mtk left
[03:14] *** p6eval left
[03:14] *** rhr left
[03:14] *** sjohnson left
[03:14] *** shachaf left
[03:14] *** japhb left
[03:14] *** chee left
[03:14] *** preflex left
[03:14] *** PerlJam left
[03:14] *** alec__ left
[03:14] *** szbalint left
[03:14] *** raiph__ left
[03:14] *** erkan left
[03:14] *** Khisanth left
[03:14] *** integral left
[03:14] *** hoelzro|away left
[03:14] *** rjbs left
[03:14] *** nebuchadnezzar left
[03:14] *** gfldex left
[03:14] *** cosimo left
[03:14] *** flussence left
[03:14] *** steven__ left
[03:14] *** marloshouse left
[03:14] *** bapa left
[03:14] *** BooK_ left
[03:14] *** Ulti left
[03:14] *** jlaire left
[03:14] *** kshannon left
[03:14] *** bakedb left
[03:14] *** mls left
[03:14] *** odoacre left
[03:14] *** sivoais left
[03:14] *** geekosaur left
[03:14] *** mikemol left
[03:14] *** xenoterracide left
[03:14] *** djanatyn left
[03:14] *** broquaint left
[03:14] *** Exodist left
[03:14] *** swarley left
[03:14] *** imarcusthis left
[03:14] *** Rix left
[03:14] *** eiro left
[03:14] *** DarthGandalf left
[03:14] *** xy left
[03:14] *** bonsaikitten left
[03:16] *** sivoais_ left
[03:24] *** perigrin joined
[03:26] *** bonsaikitten joined
[03:27] *** geekosaur joined
[03:30] *** swarley joined
[03:46] <swarley> You know you're lazy when you make an executable to add your license header to all of your source files that don't have it

[03:47] <bonsaikitten> swarley: you're not lazy enough when that executable is more than a three-line shell script ;)

[03:48] <swarley> Good point

[03:48] <swarley> https://gist.github.com/swarley/4736308 :p

[03:49] <bonsaikitten> too much work! ;)

[03:49] <swarley> Well I needed a reason to learn more Go anyway ;p

[03:49] <bonsaikitten> I haven't had a motivation yet

[03:50] <bonsaikitten> OpenDylan is distracting me enough

[03:50] <swarley> It's pretty hard to get into learning Go

[03:50] <swarley> But if you get past the top it's actually pretty interesting

[03:51] <swarley> It's compiled but it has garbage collection and polymorphism

[03:51] <rking> Go is the most meh'tastic thing I've seen in a while.

[03:51] <swarley> I'm on the fence about it in a lot of places

[03:51] <rking> There are a few others vying for that title, though. Like Dart.

[03:51] <rking> I think it's got a lot of good engineering for a lot of problems that I don't have.

[03:52] <swarley> What is PAWN doing?

[03:52] <bonsaikitten> rking: that describes most "innovation" 

[03:52] <swarley> I have no idea what the hell PAWN even is really. It looks like C to me based on the hello world

[03:52] <rking> The one I'm waiting for an excuse to learn is in the channel name.

[03:53] <rking> I still don't know how it'll fit into my "Used to use Perl5, use/like Ruby, dream of Smalltalk" world.

[03:53] <swarley> lol. I use nqp more than I use perl6 tbh

[03:53] <bonsaikitten> similar for me

[03:53] <bonsaikitten> I just think it's still an interesting experiment and package it for gentoo

[03:54] <swarley> PAWN seems like a stupid language

[03:54] <bonsaikitten> ... like OpenDylan, OpenCOBOL, J and a few others

[03:54] <swarley> like exactly the same syntax as C

[03:54] <swarley> but it's scripted..

[03:55] <swarley> I don't know, nothing I would be motivated to use

[03:55] <swarley> I'd learn lua before any other new language

[03:56] <swarley> I still have C#, Perl6 to completeness (NQP included), and Go to finish learning

[03:56] <bonsaikitten> swarley: as far as I can tell lua has some nice ideas, but is too much manual work

[03:56] <bonsaikitten> not sure if it's that useful ... but it seems to make lots of people happy

[03:56] <swarley> I like the fact that Lua is embedded easily

[03:56] <swarley> But I'm iffy on the syntax

[03:58] <bonsaikitten> yes, but it doesn't have any proper refcounting / GC as far as I remember

[03:58] <bonsaikitten> so it's very easy to get it wrong

[03:59] <swarley> Ah. That's something that drew me into Go

[03:59] <bonsaikitten> for me python covers most of that, and if I need things to be faster it's usually C

[03:59] <swarley> They have a concurrent mark-sweep GC added in with the goal of minimal overhead

[03:59] <bonsaikitten> with shell and perl5 covering the glue between things

[04:00] <swarley> Yeah, I use ruby when speed isn't an issue, C extensions for ruby when its only a desire, and C++/C when it's a necessity

[04:00] <swarley> I prefer not to do large projects in C though. It feels like the code gets unruly quickly

[04:00] <bonsaikitten> yes

[04:01] <bonsaikitten> takes lots of discipline to keep it nice

[04:01] <bonsaikitten> re: ruby, my brain can't parse it, it's just "wrong" in every aspect - plus the ecosystem is filled with bad code, bad advice and bad behaviour (who needs releases lol)

[04:02] <swarley> ?

[04:02] <swarley> Please elaborate, I'm a fairly active member of the community and we don't really try to give bad advice

[04:02] <swarley> same for rking 

[04:03] <swarley> I usually feel a lot less anxiety about asking a question in #ruby than i do in #perl

[04:03] <bonsaikitten> well, most of the documentation I tend to stumble over is random blog posts

[04:03] <geekosaur> ruby:  bastard child of perl 5 and smalltalk.  obj-c knowledge might help some...

[04:03] <swarley> Ah. Well it depends on what you're looking up.

[04:03] <swarley> If it's the standard library, that's all documented and hosted on the same server

[04:03] <bonsaikitten> swarley: there are some pretty smart people in the ruby cloud, and lots of people that found php too difficult and never figured out basic sanity checks

[04:04] <swarley> If it's a 3rd party gem, that's up to the developer

[04:04] <swarley> oh god, yes that pisses me off

[04:04] <bonsaikitten> but that's the added value, a module for everything

[04:04] <rking> "Ruby is if Smalltalk and Lisp had a love child, but left it in the care of its nanny, Perl."

[04:04] <bonsaikitten> well, at least they don't do error handling a la php - print a message to stdout *headdesk*

[04:04] <swarley> I think there is a quote of me somewhere actually telling someone to "crawl back into the hole their frightened PHP emerged from"

[04:04] <bonsaikitten> that's not how you handle errors :(

[04:05] <geekosaur> the ruby community has some very good guidelines for how to handle versioning... which are not merely ignored but actively violated by most gem developers

[04:05] <swarley> What? Module for everything?

[04:05] <swarley> I think you're confusing good ruby with common ruby ;)

[04:06] *** dwoldrich joined
[04:07] <swarley> Not to say, that I myself even write good ruby. In fact, I would say I'm about lower level advanced. So, not that special. I just keep my mouth shut when I see people coming in doing $i = 5; $i.times {|x| x += $i } and don't yell at them to at least read chapter one of any tutorial

[04:07] <swarley> brb

[04:07] *** swarley left
[04:16] <dwoldrich> Hey perl6 guys, I think Parrot was a great idea, I was hoping to see it succeed, am sad you all turned your backs on the project, and I think it's silly to target the JVM or invest man hours in it.

[04:17] <dwoldrich> Just because the JVM can execute JVM bytecode faster than Parrot byte codes TODAY, doesn't make that so in the future.  If you recall, the JVM was a sloth up until around JDK 1.5 or so.

[04:18] <dwoldrich> And Oracle is going to tank the JVM, why oh why would you board a leaky, if not sinking, ship??

[04:20] <dwoldrich> Parrot should have been your glittering jewel, not Perl6.  Parrot could have had legs, 20 year lifespan, developers and business porting AWAY from the JVM!

[04:20] <sorear> dwoldrich: I think you have never tried to use Parrot

[04:21] <dwoldrich> I am not saying that Parrot, or Perl6, were the best run or designed projects.

[04:21] <dwoldrich> But what I am saying is, the vision was right on

[04:21] <dwoldrich> If only you all could come together and be one team

[04:22] <dwoldrich> not sure why the "throw it over the wall" deal existed

[04:22] <sorear> hahahahaha

[04:23] <dwoldrich> You just never saw yourself as competition with JVM, and that saddens me, because right around the time Parrot hit 1.0, the obsolescence and design cruft was setting in on the JVM

[04:23] <dwoldrich> I watched the changelogs and was like, what the heck is the goal here?

[04:23] <bonsaikitten> dwoldrich: the JVM has a lot more manpower behind it, so it won't just disappear

[04:24] <bonsaikitten> and just because someone experiments doesn't mean that everyone abandons their current project

[04:24] <dwoldrich> you all said Parrot's dead

[04:25] <dwoldrich> I'll take you at your word

[04:25] <bonsaikitten> "all" ? pfff.

[04:25] <bonsaikitten> you must be a journalist

[04:26] <dwoldrich> no, not even a perl developer

[04:26] <dwoldrich> I'm a Java developer

[04:26] <dwoldrich> and I don't like what I'm seeing in the java community

[04:26] <dwoldrich> looking for options now

[04:26] <sorear> you sound like a regular contributor to [email@hidden.address]
[04:26] <dwoldrich> ?

[04:26] *** DarthGandalf joined
[04:26] *** eiro joined
[04:26] *** Rix joined
[04:26] *** imarcusthis joined
[04:26] *** felipe joined
[04:26] *** wtw joined
[04:27] *** mls joined
[04:27] *** kshannon joined
[04:27] *** bakedb joined
[04:27] *** BinGOs joined
[04:27] *** odoacre joined
[04:27] *** mikemol joined
[04:27] *** xenoterracide joined
[04:27] *** djanatyn joined
[04:27] *** broquaint joined
[04:27] *** Exodist joined
[04:27] *** scottp joined
[04:27] *** telex joined
[04:27] *** Patterner joined
[04:27] *** xinming_ joined
[04:27] *** jtpalmer_ joined
[04:27] *** nyuszika7h joined
[04:27] *** jdv79 joined
[04:27] *** krunen joined
[04:27] *** mehwork joined
[04:27] *** eternaleye joined
[04:27] *** Yappocall_ joined
[04:27] *** spanner joined
[04:27] *** sivoais joined
[04:27] *** xdbr joined
[04:27] *** crazedpsyc joined
[04:27] *** LoRe joined
[04:27] *** sjn joined
[04:27] *** kst joined
[04:27] *** mathw joined
[04:27] *** Juerd joined
[04:27] *** colomon joined
[04:27] *** Ayiko joined
[04:27] *** renormalist joined
[04:27] *** lue joined
[04:27] *** betterwo1ld joined
[04:27] *** Gothmog_ joined
[04:28] *** swarley joined
[04:28] *** araujo joined
[04:28] *** p5eval joined
[04:28] *** atrodo joined
[04:28] *** diakopter joined
[04:28] *** cxreg joined
[04:28] *** SHODAN joined
[04:28] *** Tene joined
[04:28] *** cotto joined
[04:28] *** amkrankruleuen joined
[04:28] *** nebuchadnezzar joined
[04:28] *** [particle] joined
[04:28] *** baest joined
[04:28] *** TimToady joined
[04:28] *** raiph_ joined
[04:28] *** groky joined
[04:28] *** Bucciarati joined
[04:28] *** mtk joined
[04:28] *** stevan_ joined
[04:28] *** dayangkun joined
[04:28] *** FROGGS_ joined
[04:28] *** anuby joined
[04:28] *** dalek joined
[04:28] *** jerome joined
[04:28] *** jaldhar joined
[04:28] *** p6eval joined
[04:28] *** rhr joined
[04:28] *** sjohnson joined
[04:28] *** shachaf joined
[04:28] *** japhb joined
[04:28] *** ponbiki joined
[04:28] *** nwc10 joined
[04:28] *** chee joined
[04:28] *** moorcock.freenode.net sets mode: +vv dalek p6eval

[04:28] *** gfldex joined
[04:28] *** cosimo joined
[04:28] *** flussence joined
[04:28] *** steven__ joined
[04:28] *** marloshouse joined
[04:28] *** bapa joined
[04:28] *** BooK_ joined
[04:28] *** Ulti joined
[04:28] *** jlaire joined
[04:28] *** Maddingue joined
[04:29] *** Pleiades` joined
[04:29] *** [Coke] joined
[04:29] *** tadzik joined
[04:29] *** Timbus joined
[04:29] *** Vlavv joined
[04:29] *** simcop2387 joined
[04:29] *** breinbaas joined
[04:29] *** rom1504 joined
[04:29] *** rafl joined
[04:29] *** sweet_kid joined
[04:29] *** integral joined
[04:29] *** preflex joined
[04:29] *** PerlJam joined
[04:29] *** alec__ joined
[04:29] *** szbalint joined
[04:29] *** raiph__ joined
[04:29] *** erkan joined
[04:29] *** Khisanth joined
[04:29] *** hoelzro|away joined
[04:29] *** rjbs joined
[04:29] *** sunnavy joined
[04:29] *** tomaw joined
[04:29] *** yves_ joined
[04:29] *** felher joined
[04:29] *** ivan`` joined
[04:29] *** salparadise joined
[04:29] *** raiph_ left
[04:29] *** bapa left
[04:29] *** sivoais left
[04:29] *** ivan`` left
[04:29] *** raiph__ left
[04:29] *** ivan`` joined
[04:30] *** bapa joined
[04:31] *** raiph_ joined
[04:31] *** raiph__ joined
[04:31] *** xy joined
[04:32] *** sivoais joined
[04:33] *** shinobicl joined
[04:35] <swarley> So what is the collective opinion on targeting Go for an nqp output? I figure.. Go has a lot of cool features going for it and it compiles very fast

[04:36] <swarley> I mean unless its not even possible I'll still have a whack at it, but id like to hear opinions

[04:38] *** rindolf joined
[04:40] <dwoldrich> What other VM's could you target that don't have a corporate overlord/owner?  Doesn't PHP have an underlying VM?

[04:41] <dwoldrich> Why do you have to go with Google or Oracle, seriously?

[04:41] <dwoldrich> ain't there good FOSS options?

[04:42] * geekosaur *eyeroll*

[04:42] *** Targen joined
[04:42] <dwoldrich> :D

[04:42] <dwoldrich> Just making the "business case" for Parrot, just sayin'.

[04:42] <geekosaur> niecza uses mono, if that's not pure enough for you then you're welcome to go digging for a *nonsucky* alternative

[04:42] <dwoldrich> yeah!!

[04:42] <dwoldrich> mono's good

[04:43] <dwoldrich> why not target that?

[04:43] <geekosaur> ...

[04:43] * geekosaur points to the first three words of what he said

[04:43] <dwoldrich> again, let me present, Parrot.

[04:43] <dwoldrich> or the Parrot that could be

[04:43] <dwoldrich> :P

[04:43] <geekosaur> and let me repeat "nonsucky"

[04:43] <dwoldrich> Make it so.

[04:43] <geekosaur> consideringt he amount of times I see rakudo having to work around the parrot internals thrashing...

[04:43] <dwoldrich> I demand a non-sucky Parrot immediately

[04:44] <rindolf> dwoldrich: a VM is any interpreter or CPU.

[04:44] <geekosaur> well, bully foryou

[04:44] <rindolf> dwoldrich: even perl 4 was a VM.

[04:44] <rindolf> dwoldrich: and Perl 5 has a VM too.

[04:44] <rindolf> dwoldrich: VM == virtual machine.

[04:44] <dwoldrich> I need a write once run anywhere byte code interpreter/JIT'er, plz

[04:44] <swarley> There is gccgo..

[04:45] <swarley> And cgo

[04:45] <rindolf> dwoldrich: Java? Mono? Parrot?

[04:45] *** benabik left
[04:46] <swarley> Go to an extent

[04:46] <swarley> If you code with portability in mind

[04:47] <swarley> Use os.FileSeparator instead of "/" etc

[04:48] <swarley> There is no VM mesiah. 

[04:50] <swarley> The reason i keep jumping around is because i realize im attempting something unwise or better left to someone else

[04:51] <swarley> Llvm: unwise .. Yarv: unwise.. CIL: i bet someone can do it infinitely  better than myself.

[04:57] *** rindolf left
[04:57] <colomon> rn: say 9.is-prime

[04:57] <p6eval> rakudo 4fb07b, niecza v24-20-g93138cc: OUTPUT¬´False‚ê§¬ª

[04:58] <sorear> dwoldrich: anyway, if you want parrot to become usable, take it to #parrot on irc.perl.net

[04:59] <sorear> *irc.perl.org

[05:00] <dwoldrich> rindolf: I like the idea of Parrot.  As I understand it, it didn't have a stable bytecode, and thus required a source language to feed it parrot assembly code, which to me makes it a non-starter.  A VM should be responsible for verifying, loading, and running bytecodes, very well-specified bytecodes.

[05:01] *** preflex_ joined
[05:01] <sorear> dwoldrich: you just replied to someone who isn't even here.

[05:01] <dwoldrich> darn

[05:02] <dwoldrich> well bring him back

[05:02] <dwoldrich> or her

[05:02] <sorear> You do it.

[05:02] *** preflex left
[05:02] <dwoldrich> Alright I will!

[05:02] *** preflex_ is now known as preflex

[05:03] <dwoldrich> sorear: I want parrot to be valued as a project first, then treasured, then used (by Perl6), and THEN made usable.  :D

[05:03] *** shinobicl left
[05:05] <colomon> rn: say (2, 3, * + 2 ... *).grep(*.is-prime)[^10]

[05:05] <p6eval> rakudo 4fb07b, niecza v24-20-g93138cc: OUTPUT¬´2 3 5 7 11 13 17 19 23 29‚ê§¬ª

[05:06] <swarley> It just doesn't seem wise to use a VM still being made stable with a language still waiting for a first full implementation 

[05:06] <swarley> Let me clarify

[05:06] <swarley> A VM with the aims of parrot

[05:06] <dwoldrich> swarley: that

[05:06] <dwoldrich> that's a good point

[05:06] <dwoldrich> But I think a byte code specification

[05:06] <dwoldrich> iron clad

[05:07] <dwoldrich> would have smoothed out a lot of wrinkles

[05:07] <colomon> rn: my @primes := (2, 3, * + 2 ... *).grep(*.is-prime); say @primes[^10]

[05:07] <p6eval> rakudo 4fb07b, niecza v24-20-g93138cc: OUTPUT¬´2 3 5 7 11 13 17 19 23 29‚ê§¬ª

[05:07] <sorear> dwoldrich: we have no influence on parrot whatsoever here.

[05:07] <sorear> they do whatever they please.

[05:07] <sorear> if you want to be part of the parrot decision process, join #parrot on irc.perl.org

[05:07] <sorear> sorry.

[05:07] <dwoldrich> Yeah, I detect your frustration

[05:09] *** SamuraiJack joined
[05:09] <dwoldrich> I think because parrot is yoked to perl6, though, your (perceived/real) abandonment of that project gives the impression that it is doomed.

[05:09] <dwoldrich> and if you're not going to do your own parrot fork

[05:10] <swarley> Parrot isn't really bound to perl6

[05:10] <dwoldrich> then, let's all hope Oracle is a nice steward of the heart that pumps the blood through our veins.  :/

[05:11] <dwoldrich> I think it is

[05:11] <swarley> Parrot is independent entirely of perl6

[05:12] <dwoldrich> It wasn't always

[05:12] <swarley> Without perl 6 parrot could still go on, its popularity is just to be determined by how well they can get it working

[05:12] <swarley> I really don't understand your logic 

[05:12] <swarley> The way I understand it

[05:12] <swarley> Parrot is an all purpose vm

[05:12] <dwoldrich> The flagship for Parrot was Perl6, it was billed as being an engine flexible enough to be a target for that language

[05:13] <dalek> ecosystem: 92886d4 | colomon++ | META.list:

[05:13] <dalek> ecosystem: Remove obsolete Math::Prime from the ecosystem.

[05:13] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/92886d4a0f

[05:13] <dwoldrich> Without the flagship, how will it know which way to sail?

[05:13] <swarley> Uh, it seems to be doing much better with jvm and cil based on benchmarks

[05:14] <sorear> dwoldrich: you seem to have heard very precious little of the news from the last five years

[05:14] <dwoldrich> this is true

[05:14] <dwoldrich> I don't soak in Perl news

[05:14] <dwoldrich> But I am interested!

[05:15] <swarley> Then you may want to start by finding out that parrot is almost completely removed from nqp i believe

[05:15] <sorear> then I should tell you that #perl6 is now a place where we care about things that work

[05:15] <dwoldrich> I just want to say that I believe the JVM, knowing what I know about the jvm byte codes and the new stuff in JDK 7, could be a fast execution engine for Perl6

[05:16] <sorear> we've banished all the people with revolutionary fantasies

[05:16] <swarley> Okay?.. that's what nqp-jvm is for

[05:17] <dwoldrich> if, at the end of the day, all objects were just hashmaps to function pointers and values, it would still work pretty fast

[05:17] <dwoldrich> right

[05:17] <dwoldrich> I'm saying, that that course is going to perform okay, so-so, maybe fast in very specific scenarios where you can do more with dynamicinvoke on JDK7

[05:18] <swarley> I think the main goal here is to have it just work

[05:18] <swarley> And then we worry about speed later after everything works

[05:18] * geekosaur thinks the chanel has been rather successfully trolled...

[05:18] <dwoldrich> Right

[05:18] <dwoldrich> Not a bad plan

[05:19] <sorear> geekosaur: do not attribute to malice that which can be explained by stupidity

[05:19] <sorear> although I would use a gentler word than stupidity

[05:19] <dwoldrich> I'm just saying Parrot, as a long term visionary, we can host the world's code thing, is a better plan

[05:19] <swarley> Lol'd

[05:19] <dwoldrich> don't be smug

[05:19] <dwoldrich> I'm trying to be helpful

[05:20] <lue> One advantage of JVM over parrot right now is that more people use JVM and JVM is (probably) more trusted, especially in business settings.

[05:20] <swarley> Parrot, as of this moment, gives rakudo a reputation of a terribly slow and unusable interpreter

[05:21] <dwoldrich> yeah, at some point someone said, this thing is unworkable, I bet

[05:21] <swarley> Not functionally, just resource and speed

[05:21] <geekosaur> you missed some of the earlier stuff

[05:21] <geekosaur> [07 23:42] <dwoldrich> I demand a non-sucky Parrot immediately

[05:21] <dwoldrich> :)

[05:21] <dwoldrich> I thought that was funny!

[05:21] <swarley> Then go bitch to them about it

[05:22] *** xinming_ left
[05:22] <dwoldrich> You don't share my vision, then?

[05:22] <lue> dwoldrich: Are you aware of the existing effort to put nqp (and as a result rakudo) on the JVM?

[05:22] <swarley> No, I think parrot is a marvelous idea.

[05:22] <dwoldrich> JVM byte codes are last century, man

[05:22] <swarley> However

[05:22] <swarley> Wasting time with it right now is pointless

[05:22] <dwoldrich> fair enough

[05:22] * geekosaur would quote more backscroll but doesn't see the point

[05:23] <dwoldrich> perhaps, when Perl 6 settles out 

[05:23] <dwoldrich> and when JVM is a good performing target

[05:23] <swarley> Perl6 isn't the problem

[05:23] <dwoldrich> we can revisit the parrot thing

[05:23] <dwoldrich> Oh, I think Perl6 is part of the problem

[05:23] *** xinming joined
[05:23] <swarley> Parrot is the problem

[05:23] <dwoldrich> your team is problematic

[05:24] <dwoldrich> design churn, rewrites, replatforming

[05:24] <dwoldrich> c'mon

[05:24] <sorear> you come in here and immediately act like you own the place

[05:24] <sorear> you _don't_

[05:24] <dwoldrich> Just trying to be helpful

[05:24] <sorear> and failing.

[05:24] <sorear> epically.

[05:24] <swarley> I would hardly call the team problematic

[05:24] <swarley> Things are done with careful consideration

[05:25] <swarley> I'm not even on the team, I'm just here because I admire them

[05:25] <lue> dwoldrich: about the rewrites: http://perlgeek.de/blog-en/perl-6/2012-stop-the-rewrites.html

[05:25] <sorear> dwoldrich treats the JVM thing as some spur-of-the-moment decision

[05:25] <dwoldrich> I don't know, can't say.  Just know by the news stories I read

[05:25] <sorear> we spent more than a year on that

[05:25] <sorear> so don't pretend you can make a difference

[05:25] <sorear> unless you want to spend a year arguing your point of view

[05:26] <au> swarley: nqp-go is a fabulous idea, I'd love to see it.

[05:26] <swarley> I think that using go routines would be a nifty optimization for certain areas

[05:26] <swarley> Concurrency without having to do anything special

[05:27] <au> *nod*

[05:27] <dwoldrich> lue: I have read that story before, is it inaccurate?

[05:27] <swarley> I started writing some type definitions for the objects, its a lot more readable than I expected it to be

[05:28] <au> yup.

[05:28] <au> ...and when an implementor learns, we all learn :)

[05:28] <swarley> I think its a plausible idea, I plan to give it some more work over the following week and see where it leads.

[05:28] <lue> no, it's right. The part I take away from it is that sometimes rewrites are necessary (and also the last three subsystem rewrites didn't break everything)

[05:28] <au> swarley++

[05:29] <swarley> And since it has its own garbage collector and all of that fun stuff, no mess in that area. So I think its a reasonable candidate 

[05:30] *** Naga joined
[05:30] <sorear> au: hey, I just noticed that you're not on the chanserv ACL since we rebuilt that.

[05:30] <sorear> want me to fix that now?

[05:31] <au> sorear: sure, thx much

[05:32] <au> swarley: there's some early work (not quite nqp, but similar) at https://github.com/fglock/Perlito/blob/master/src6/lib/Perlito6/Go/Emitter.pm which may be informative if not dircetly reusable

[05:32] *** am0c joined
[05:32] <swarley> Oh. What license is nqp/rakudo under? 

[05:32] <sorear> artistic 2, isn't it?

[05:32] <au> Artistic 2.

[05:32] <swarley> Thanks au, I'll take a read

[05:33] <sorear> OTOH we have the CLA stuff to deal with

[05:33] <sorear> we'd need to get a signed attestation from fglock that that code is usable

[05:35] <swarley> Alright,  I wanted to make sure before I added any code to my repo so that I could change my license, the one I have in there now is MPL

[05:36] <au> swarley: as long as you're the sole author you can always change the license at any point :)

[05:36] * au has bypassed this CLA & license compatibility business just by using CC0 for everything :p

[05:37] <swarley> Yup, I almost never have help on my projects. So I tend to jump around occasionally from GPL to MPL

[05:37] <moritz> \o morning

[05:37] <sorear> o/ moritzning

[05:38] <japhb> swarley, IANAL, but for the Perl 6 community, if you're not going to go au++'s route of CC0, you might consider Artistic 2.  You'll find it probably the most common Perl 6 license, and it is GPL-compatible.

[05:39] <moritz> what's CCO? Creative COmmons?

[05:39] <japhb> http://creativecommons.org/publicdomain/zero/1.0/

[05:40] <lue> Beefier public domain, IIRC

[05:40] <moritz> woah, quite permissive

[05:41] <au> ensured compatibility

[05:43] *** Naga left
[05:44] <japhb> au, are you still active in the Perl 5 community?

[05:45] <japhb> (I spend most of my "community time" here, so I've kindof lost touch with who's who on the Perl 5 side of late ...)

[05:45] <au> japhb: I still maintain some of the modules and pull reqs from time to time.

[05:45] <japhb> Fair enough.

[05:45] <swarley> I just read Artistic 2, I think I like that the most out of any so far

[05:46] <au> swarley++ # awesome

[05:46] <swarley> That's a really good licensing strategy

[05:47] <swarley> And I'm assuming that applies to your code as a whole, so no header?

[05:47] <japhb> I'm looking at building a list of modules and functionality that should be higher-priority for us to port from Perl 5, and I'm looking for good ways to figure out what people are relying on and is considered relatively state of the art.

[05:48] <sorear> what does au do these days?

[05:48] <japhb> The first thing that occurred to me was the CPAN 100: Volatile 100, which lists most-depended-on modules.

[05:48] <japhb> But that ends up being a lot of testing and low-level infrastructure.

[05:48] <sorear> .oO( Task::Weaken )

[05:48] <moritz> swarley: IANAL, but I think the common stance is that using a header file or a Perl module isn't a derivative work, so you can do it in any project

[05:50] <japhb> sorear, Oh yeah, I'd seen that one before, but forgotten about it, since I didn't happen to need it.  Annoying as heck that someone had to go and do that, though.

[05:52] <swarley> So just a COPYING and LICENSE file at the root would do?

[05:52] <au> sorear: differs from week to week. last week was mostly hacking with folks on g0v.tw ( http://g0v.tw/about.html ) to build a unicode chinese-chinese dictionary by scraping government data with legacy encoding.

[05:52] <japhb> Anyway, I'm looking for suggestions of places to investigate.  Clearly things like the Perl 5 core modules, common sense stuff like DBI, modules that are packaged under lots of Linux distros and/or Strawberry Perl ...

[05:53] <au> sorear: after a hackathon with 200ish folks, there's a longish list of repos in http://3du.tw/ with ports that covers pretty much all the mainstream development platforms, including http://moedict.tw/ :)

[05:53] <au> sorear: and it'll be something entirely different next week, likely.

[05:58] <au> japhb: modules that are in Strawberry or ActivePerl but not in Perl Core is a good list to start imvho.

[05:59] <japhb> au, thank you, good point.

[05:59] <sorear> japhb: Task::BeLike::DOY?

[05:59] <au> it's one of your points, I just highlighted that particular one :p

[06:00] <japhb> au: Nodnod, I meant, good interpretation/angle on it.  I was thinking about comparing across packaging systems, as opposed to diffing the Windows ones against core.

[06:01] <japhb> sorear, Hmmm, interesting.  Anyone else that did that whose taste you trust?

[06:02] <sorear> metacpan knows about rafl, rjbs, and sartak

[06:02] <sorear> I don't know any of the others

[06:03] <sorear> (i.e. I don't know avar very well)

[06:03] <sorear> (also note: rafl is spelled FLORA on cpahn)

[06:03] <japhb> Thank you, sorear

[06:04] <sorear> it's probably not a coincidence that this set of people overlaps strongly with the moose core team

[06:05] <japhb> Moose-ers seem to be more likely to be CPANers.  :-)

[06:09] *** jeffreykegler joined
[06:13] *** MikeFair joined
[06:33] *** FROGGS_ left
[06:34] *** dayangkun left
[06:38] *** jeffreykegler left
[06:42] *** xinming left
[06:44] *** kaleem joined
[06:50] *** Vas joined
[06:51] *** Vas left
[06:54] *** xinming joined
[06:56] *** jtpalmer_ left
[06:56] *** jtpalmer joined
[07:08] *** MikeFair left
[07:19] *** tomaw is now known as 13WAAIFYZ

[07:19] *** FROGGS joined
[07:21] <FROGGS> morning

[07:26] *** am0c left
[07:33] <sorear> o/ FROGGS 

[07:33] <FROGGS> hi sorear 

[07:35] *** swarley left
[07:36] *** swarley joined
[07:43] *** dayangkun joined
[08:01] *** rindolf joined
[08:04] <arnsholt> o/

[08:04] <phenny> arnsholt: 07 Feb 23:32Z <jnthn> tell arnsholt I think some of the offset compuation wasn't quite right after all... Gave it a tweak in 263332d.

[08:04] <arnsholt> That makes sense

[08:10] *** domidumont joined
[08:15] <FROGGS> morning arnsholt 

[08:15] <sorear> o/ arnsholt

[08:15] <masak> morning, #perl6

[08:16] <moritz> \o masak 

[08:19] *** domidumont left
[08:20] *** domidumont joined
[08:21] <FROGGS> hi masak 

[08:21] <FROGGS> hi moritz 

[08:21] <moritz> \o FROGGS, arnsholt, *

[08:30] *** hoelzro|away is now known as hoelzro

[08:35] *** daxim joined
[08:40] *** bloonix joined
[09:06] *** kivutar joined
[09:09] *** cosimo left
[09:14] *** 13WAAIFYZ is now known as tomaw

[09:35] *** fhelmberger joined
[09:37] *** dwoldrich left
[09:39] *** kst` joined
[09:40] *** dakkar joined
[09:40] *** cosimo joined
[09:41] *** kst left
[09:44] *** dayangkun left
[09:45] *** dayangkun_ joined
[09:45] *** dayangkun_ left
[09:46] *** Patterner left
[09:50] *** Psyche^ joined
[09:50] *** Psyche^ is now known as Patterner

[10:32] *** kaleem left
[10:52] *** sqirrel joined
[10:56] *** SmokeMachine joined
[10:58] <masak> I love Deferreds. http://api.jquery.com/category/deferred-object/ Does the GoF book bring them up at all? I did a quick skim through the list of patterns but didn't find anything like it.

[11:00] *** sizz left
[11:01] *** sizz joined
[11:07] *** rindolf left
[11:17] <moritz> .oO( DerfeRedHerrings? )

[11:18] <moritz> but yes, looks like quite a handy concept

[11:18] <masak> I keep seeing variants of it everywhere. it's in the air somehow.

[11:18] <masak> it goes well with all this async/eventy stuff that's also in the air these days.

[11:22] <arnsholt> Has anyone else tried to build Rakudo HEAD with NQP HEAD?

[11:23] <arnsholt> I get a compile error when compiling RESTRICTED.setting: "Serialization Error: Unimplemented object type 'ArrayIterator' passed to write_ref"

[11:25] *** PZt left
[11:30] *** pmurias joined
[11:31] <arnsholt> pmurias: jnthn++ has possibly updated some stuff in NQP that can help your problem. Do you have time to test it again?

[11:34] *** Targen left
[11:38] <pmurias> arnsholt: sure

[11:46] *** kresike joined
[11:46] <kresike> hello all you happy perl6 people

[11:47] <FROGGS> hi kresike 

[11:47] <kresike> FROGGS, o/

[11:48] <masak> kresike! \o/

[11:48] <kresike> masak, o/

[11:52] *** crab2313 joined
[12:00] *** swarley left
[12:05] *** not_gerd joined
[12:05] <not_gerd> r: ("x" x 100000) x 100000

[12:05] <p6eval> rakudo 4fb07b: OUTPUT¬´Failed allocation of 1410065440 bytes‚ê§Parrot VM: PANIC: Out of mem!‚ê§C file src/gc/alloc_memory.c, line 105‚ê§Parrot file (not available), line (not available)‚ê§‚ê§We highly suggest you notify the Parrot team if you have not been working on‚ê§Parrot.  Use parrotbug (locate‚Ä¶

[12:07] <not_gerd> see http://lists.parrot.org/pipermail/parrot-dev/2013-February/007332.html

[12:07] <pmurias> arnsholt: seems to fix the problem

[12:07] <not_gerd> with the right parameters, this gives a segfault instead of an OOM error

[12:07] <arnsholt> pmurias: Excellent!

[12:11] <not_gerd> r: "xxx" x (3 x 111)

[12:11] <p6eval> rakudo 4fb07b: OUTPUT¬´(signal SEGV)¬ª

[12:11] <not_gerd> \o/

[12:14] *** skids left
[12:22] *** odoacre left
[12:40] <nwc10> jnthn++ # multi-dispatch. And more code in a higher level language

[12:42] *** skids joined
[12:44] <masak> jnthn++

[12:48] *** dakkar left
[12:48] *** dakkar joined
[12:50] *** xy left
[12:54] *** dakkar left
[12:54] *** xy joined
[12:58] *** dakkar joined
[13:03] *** dakkar left
[13:05] *** felher left
[13:05] *** dakkar joined
[13:06] *** not_gerd left
[13:09] <pmurias> why do we test deletepos with a negative value?

[13:09] *** crab2313 left
[13:09] <tadzik> because it can happen

[13:09] <tadzik> and I'd rather if we know what happens when someone tries

[13:10] <pmurias> an exception should be thrown?

[13:10] <tadzik> existspos works for negative, for example

[13:10] <tadzik> Just Works [tm]

[13:11] <pmurias> by testing stupid usage you force all the implementations to implement it

[13:11] <pmurias> and make it seems acceptable for users to depend on it

[13:13] <tadzik> it didn't have tests before, and no one really knows how is it actually used

[13:13] <nwc10> what *is* using it? ie - if you locally change it to throw an exception, how many tests fail?

[13:13] <tadzik> so I prefered to replicate Parrot as closely as possible, and _have_ tests for that

[13:13] <masak> wait, in what way does it just work?

[13:13] <tadzik> what, existspos?

[13:13] <masak> either of them.

[13:13] <tadzik> nwc10: we'll never know until we check with Rakudo

[13:13] <masak> I agree that it's not a good idea to support negative positions out-of-the-box.

[13:13] <nwc10> that is what I mean.

[13:13] <tadzik> existspos counts from the back, like *-n

[13:13] <nwc10> change it locally, rebuild rakudo, run the spectests

[13:13] <nwc10> what fails?

[13:14] <tadzik> deletepos removes the 0th element, always

[13:14] <masak> it's internal leakage like that that causes hard-to-predict bugs up at the user level.

[13:14] <masak> yeah, I don't like it.

[13:14] <tadzik> well, feel free to change it

[13:14] <masak> I'm at $dayjob.

[13:14] <masak> but if no-one has done it by tomorrow, I will.

[13:14] <nwc10> answer that, and you get to a pretty good idea of what (if anything) in the compiler need to change to avoid it

[13:14] <tadzik> I've been reimplementing Parrot opcodes in Java, I wanted them to work alike, especially because they're not tested

[13:15] <masak> nwc10: anything that does use it should be changed, too :)

[13:15] <tadzik> well, maybe they're tested in Parrot

[13:15] <masak> it's good that we have tests for it.

[13:15] <masak> it's bad that we accept silly inputs.

[13:15] <nwc10> parrot opcodes directly? rather than something related to NQP and the JVM prototype?

[13:16] <tadzik> nwc10: nqp::opcodes. Which were directly mapped to pir::opcodes

[13:16] <nwc10> ah OK

[13:16] <nwc10> I still think the answer is to figure out whether NQP is even using the behaviour

[13:16] <pmurias> it's not used by rakudo and nqp at all (according to ack)

[13:17] <tadzik> look, maybe it's even better than they're changed. I didn't have any strong opinion, and wasn't really trying to come up with one. The task was "implement nqp::existpos and nqp::deletepos on JVM". I did. The same way that they works

[13:17] <pmurias> the opcode itself

[13:17] <tadzik> * worked

[13:17] <nwc10> oh, right. OK

[13:17] <tadzik> I found the usage in rakudo, fwiw

[13:17] <masak> jnthn says that existspos and deletepos are used in so few places, that "we don't need to worry [about the change being breaking] in this case".

[13:17] <tadzik> at least existspos

[13:17] <pmurias> tadzik: I'm not really blaming you, I just want to avoid porting crazy parrot behavior

[13:18] <tadzik> and I have mixed feelings about deletepos anyway

[13:18] <tadzik> pmurias: sure, that's reasonable

[13:18] <tadzik> I'm all for reasonable behaviour  :)

[13:18] <masak> tadzik: I'm also not blaming you. good work. :)

[13:18] <tadzik> heh, no offence taken :)

[13:18] <masak> tadzik: you'll find that when you do good work, people will have opinions ;)

[13:19] <tadzik> so, who wants to come up with sane existspos and deletepos tests? :)

[13:21] <masak> tadzik: happy path: non-negative inputs. sad path: negative inputs.

[13:21] <masak> there, done.

[13:22] <pmurias> r: my $foo = [0,1,2,3,4];say $foo.elems;$foo[3] = Mu;say $foo.elems;$foo.delete(4);say $foo.elems;

[13:22] <p6eval> rakudo 4fb07b: OUTPUT¬´5‚ê§5‚ê§3‚ê§¬ª

[13:22] <pmurias> I have found a rakudo bug

[13:25] *** araujo left
[13:28] <pmurias> how do I add an issue on github?

[13:28] <tadzik> it may be closed for Rakudo

[13:28] <tadzik> email [email@hidden.address]
[13:28] *** araujo joined
[13:29] * pmurias forgot his email password recently :(

[13:30] <pmurias> my $foo = [0,1,2,3,4];say $foo.elems;$foo[4] = Mu;$foo[3] = Mu;say $foo.elems;$foo.delete(4);say $foo.elems;

[13:30] <masak> we cannot help you there, sorry.

[13:30] <masak> r: my $foo = [0,1,2,3,4];say $foo.elems;$foo[4] = Mu;$foo[3] = Mu;say $foo.elems;$foo.delete(4);say $foo.elems

[13:30] <p6eval> rakudo 4fb07b: OUTPUT¬´5‚ê§5‚ê§3‚ê§¬ª

[13:31] * masak submits rakuodbug

[13:31] <masak> pmurias++

[13:31] <tadzik> don't know about nqp, but on JVM we keep a constant value in QRPA which says how many elements are there

[13:31] <tadzik> it probably needs to be updated when we set Mu somewhere

[13:32] *** PZt joined
[13:32] <moritz> the problem is that if you delete an element that's not the last, it set to Mu

[13:32] <moritz> because we don't have an offchannel way to store an array element as deleted

[13:32] <pmurias> no

[13:33] <moritz> no?

[13:33] <tadzik> we have to settle of something: do we count the number of defined elements in the array, or do we count "the longest streak" of elements?

[13:33] <pmurias> the problem is that if you delete the last element all the undefined elements before it get deletedf

[13:33] *** SmokeMachine left
[13:33] <moritz> r: my @a = <a b c d>; @a.delete(2); say @a.perl

[13:33] <p6eval> rakudo 4fb07b: OUTPUT¬´Array.new("a", "b", Any, "d")‚ê§¬ª

[13:33] <moritz> tadzik: or do we simply keep the count separate, and don't do any magic

[13:34] <moritz> pmurias: I'm (nearly) sure there's a spectest that requires that

[13:34] *** wk joined
[13:34] <pmurias> r: class Foo {};my $foo = [0,1,2,3,4];say $foo.elems;$foo[4] = Foo;$foo[3] = Foo;say $foo.elems;$foo.delete(4);say $foo.elems;

[13:34] <p6eval> rakudo 4fb07b: OUTPUT¬´5‚ê§5‚ê§3‚ê§¬ª

[13:34] <pmurias> moritz: it seems to be a bug in the code

[13:34] <moritz> fwiw I agree that's undesirable

[13:34] <moritz> but I can't quite imagine that it happened without any intention

[13:35] *** SmokeMachine joined
[13:35] * masak adds this to the ticket

[13:36] <pmurias> the spec seems to hold an distinction between elements that aren't in an array and those that are set to an undefined value

[13:39] <pmurias> it should be very easy to fix using nqp::deletepos

[13:39] <dalek> nqp: 55ae367 | (Pawe≈Ç Murias)++ | t/nqp/59-nqpop.t:

[13:39] <dalek> nqp: Avoid testing for negative arguments to nqp::deletepos.

[13:39] <dalek> nqp: review: https://github.com/perl6/nqp/commit/55ae3675b2

[13:39] <nwc10> did that actually get designed in? Or was it just adopted unchanged from Perl 5?

[13:40] <tadzik> pmurias++

[13:41] *** cognominal joined
[13:46] * [Coke] hurls http://xkcd.com/1171/ for masak.

[13:46] <pmurias> deletepos moves values?

[13:46] <tadzik> yes

[13:47] <masak> [Coke]: I... I think I know all the requisite memes involved to get this joke.

[13:47] <pmurias> why?

[13:47] <masak> [Coke]: but I'm not tickled by it. so maybe I'm missing something.

[13:47] <[Coke]> masak: then I feel bad for you, son.

[13:47] <masak> :P

[13:48] * [Coke] hits random, and gets this gem instead: http://xkcd.com/639/

[13:48] <tadzik> pmurias: uh, because Parrot folks wrote it that way

[13:49] <[Coke]> so, yes, copied from p5.

[13:49] <pmurias> so it's a duplicated splice, parrot--

[13:49] <masak> [Coke]: :P

[13:49] <cognominal> masak: about xkcd, may be the pop up explains it. I can't make sense of it either

[13:50] <masak> cognominal: no, the pop up didn't explain it. so maybe I am missing something.

[13:50] <tadzik> it's a mixture of 2 jokes

[13:50] <nwc10> It's not a good thing to copy. Sparse arrays should be sparse

[13:50] <nwc10> and normal arrays not

[13:50] <tadzik> 1) I have one problem. Oh, I'll use regexes, now I have two problems

[13:50] <tadzik> 2) I've got 99 problems but bitches ain't one

[13:50] <tadzik> well, "jokes"

[13:50] <[Coke]> memes.

[13:50] <tadzik> ayep

[13:50] <[Coke]> it's a mememe.

[13:50] <[Coke]> ... wow.

[13:51] <cognominal> now the jay-z makes sense  http://knowyourmeme.com/memes/i-got-99-problems-but-a-bitch-aint-one

[13:51] <arnsholt> 2) is from a song by Jay-Z

[13:51] <masak> tadzik: yes, I knew both of those.

[13:51] <nwc10> otherwise, to be consistent, popping the last element of an array should shrink the array further if the new last element does not exist

[13:51] <arnsholt> Thus the alt-text

[13:51] *** mtk left
[13:52] *** mtk joined
[13:54] <pmurias> do Perl 5 arrays have a way to check for existance of an element?

[13:54] <nwc10> yes, hangon, writing a crazy test case demonstration

[13:58] <nwc10> http://pasta.test-smoke.org/437

[14:00] *** SmokeMachine left
[14:01] *** dakkar left
[14:01] <pmurias> thanks, I forgot to scroll down the perldoc manpage ;)

[14:03] <pmurias> TimToady: is deleting elements from an Array using .delete something we want to keep, as it seems to be deprecated in Perl 5?

[14:03] *** daxim left
[14:04] <nwc10> it's useful for sparse arrays

[14:04] <nwc10> kind of necessary, really, to make them useful

[14:04] * moritz would tend to introduce a separate class for sparse arrays

[14:05] <moritz> our arrays are already resizable AND lazy

[14:05] <moritz> and making them sparse too... *shudder*

[14:05] <moritz> oh, and typable

[14:05] *** FROGGS left
[14:06] <nwc10> I *think* (but don't hold me to this) that having sparse arrays as an option is useful. But not the only thing. Or the default.

[14:11] <masak> +1

[14:11] <masak> JavaScript does sparse arrays as the default. and then all people do with JavaScript all day is handle (dense) DOM lists of child elements. d'oh.

[14:12] *** SamuraiJack left
[14:18] <arnsholt> Oooooh, Dreamfall chapters kickstarter... I might actually back my first Kickstarter now

[14:19] *** PacoAir joined
[14:20] *** dakkar joined
[14:24] *** SmokeMachine joined
[14:24] *** fhelmberger left
[14:25] *** SmokeMachine left
[14:31] <masak> arnsholt: what's Dreamfall?

[14:32] <arnsholt> The sequel to The longest journey

[14:33] <arnsholt> I really liked TLJ, and Dreamfall was intriguing (but flawed) as well

[14:34] <arnsholt> Oh, and they're computer games

[14:38] <masak> oh

[14:39] *** FROGGS[mobile] joined
[14:40] *** bluescreen10 joined
[14:45] *** stopbit joined
[14:46] *** mikemol left
[14:51] *** fgomez left
[14:56] *** mikemol joined
[15:08] *** wk left
[15:15] *** dd070 joined
[15:16] <dd070> is it ready ?

[15:16] <tadzik> my tea? Not anymore, I drank it all. What is that you're asking about? :)

[15:16] <dd070> perl6

[15:17] <tadzik> the implementations are not quite finished

[15:17] <tadzik> they're quite usable though

[15:17] <tadzik> having, what, 20 or 30 monthly releases already

[15:17] <tadzik> go on and try it

[15:17] <tadzik> r: say "Hi dd070 "

[15:17] <p6eval> rakudo 4fb07b: OUTPUT¬´Hi dd070 ‚ê§¬ª

[15:18] <dd070> cool

[15:18] <tadzik> if that's any measure, we're passing about 24 000 tests of the official test suite

[15:19] <tadzik> there are some things still missing: proper threads, proper async IO, mature module ecosystem

[15:19] <tadzik> performance too, although that's being worked on

[15:19] <tadzik> but it's suitable for playing around and writing some stuff in it

[15:20] <dd070> initially I hated implicit 'use strict' and 'use warnings'. but I would love it now.

[15:21] <dd070> its good in quick-dirty scripts too. 

[15:22] <masak> dd070: it's supposed to be off by default on the command line.

[15:22] <masak> dd070: no implementation does that yet, though.

[15:23] <masak> dd070: I'm never quite clear what people mean when they ask "is it ready". can I test a thing with you? I want to show you a document, and you can tell me if it answers your question better than just "yes" or "no".

[15:24] <masak> dd070: https://gist.github.com/masak/43f95c5ba980dfee8cee

[15:24] <masak> is that helpful?

[15:24] *** mtk left
[15:26] <dd070> yes. 

[15:26] <masak> \o/

[15:27] <masak> dd070: people have been working for years on Perl 6. quite a bit of things are there already. but it's not, you know, something I'd say "sure, you can put it into production" to people about, without lots of qualifiers.

[15:27] <masak> it goes without saying we're working towards that point. it takes a bit of time to get all of the pieces into place.

[15:28] <dalek> rakudo-js: e56716e | (Pawe≈Ç Murias)++ | / (2 files):

[15:28] <dalek> rakudo-js: Add nqp-jvm-prep as a submodule.

[15:28] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/e56716e73f

[15:28] <dalek> rakudo-js: 3f5c935 | (Pawe≈Ç Murias)++ | .gitignore:

[15:28] <dalek> rakudo-js: update .gitignore

[15:28] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/3f5c935402

[15:28] <dalek> rakudo-js: 3800636 | (Pawe≈Ç Murias)++ | run_tests:

[15:28] <dalek> rakudo-js: Add passing qast_relational.t to run_tests.

[15:28] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/38006367b2

[15:28] <dalek> rakudo-js: 0ad92a1 | (Pawe≈Ç Murias)++ | / (3 files):

[15:28] <dalek> rakudo-js: Pass an updated t/qast_string.t directly from nqp-jvm-prep.

[15:28] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/0ad92a1282

[15:28] *** am0c joined
[15:31] <dalek> rakudo-js: 1b5f733 | (Pawe≈Ç Murias)++ | / (3 files):

[15:31] <dalek> rakudo-js: Pass an updated t/qast_math.t directly from nqp-jvm-prep.

[15:31] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/1b5f733170

[15:31] *** dd070 left
[15:31] *** pupoque joined
[15:33] <masak> dd070: come back soon!

[15:34] <[Coke]> perl6: tuits welcome.

[15:34] <p6eval> niecza v24-20-g93138cc: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Confused at /tmp/3HBejTPyWT line 1:‚ê§------> [32mtuits welcome[33m‚èè[31m.[0m‚ê§‚ê§Undeclared routines:‚ê§    'tuits' used at line 1‚ê§ 'welcome' used at line 1‚ê§‚ê§Parse failed‚ê§‚ê§¬ª

[15:34] <p6eval> ..rakudo 4fb07b: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Confused‚ê§at /tmp/ffcmC7SMFl:1‚ê§------> [32mtuits welcome.[33m‚èè[31m<EOL>[0m‚ê§    expecting any of:‚ê§        dotty method or postfix‚ê§¬ª

[15:34] <[Coke]> perl6: our $marketing is bot-confusing;

[15:34] <p6eval> niecza v24-20-g93138cc: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Trait bot-confusing not available on variables at /tmp/Y0bOXea32w line 1:‚ê§------> [32mour $marketing is bot-confusing[33m‚èè[31m;[0m‚ê§‚ê§Unhandled exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 1‚Ä¶

[15:34] <p6eval> ..rakudo 4fb07b:  ( no output )

[15:34] * [Coke] snrks.

[15:36] *** cognominal left
[15:36] <masak> [Coke]: that's what you get for calling Perl 6 "perl6" :P

[15:37] *** SmokeMachine joined
[15:43] *** SmokeMachine left
[15:43] *** dakkar left
[15:43] *** SmokeMachine joined
[15:44] *** domidumont left
[15:44] <[Coke]> We have so many marketing problems, perl6 vs. Perl&nbsp;6 is the least of my worries. ;)

[15:47] *** SmokeMac_ joined
[15:47] *** SmokeMachine left
[15:47] <cxreg> jnthn seems to be tearing through that jvm nqp port

[15:47] <masak> aye.

[15:47] <[Coke]> A thought about parrot vs. perl6, btw. I'd like to see both projects succeed, but I don't think that in order for either to succeed, the other must, and I don't think it's reasonable that tuits spent on one project are fungible to the other.

[15:48] <arnsholt> The idea that tuits are fungible in general annoys me alot

[15:48] <arnsholt> s/alot/a lot/

[15:49] <[Coke]> I'm not suggesting that's the cause of any current discussion issues, but I've seen it historically. (when hacking on partcl, e.g. I often wanted to USE parrot, not figure out how to fix it.)

[15:49] <arnsholt> There are so many reasons why a person decides to spend his spare time on a particular project, most of them probably non-technical, that it's hard to see them as fungible in any sensible way I think

[15:49] <[Coke]> jvm/nqp... aye. I keep meaning to catch up and then there's 50 more commits.

[15:50] <nwc10> when hacking on PONIE, I most definately didn't want to have to hack on parrot. I'd not budgeted time for that.

[15:51] *** ggoebel_ joined
[15:51] *** FROGGS joined
[15:55] *** benabik joined
[15:57] *** kivutar left
[15:58] <atrodo> I think it's safe to say people want to use parrot, but not many people want to hack on parrot

[15:58] <benabik> Hacking on parrot is a thankless job.

[15:59] <atrodo> benabik: it really can be

[15:59] <[Coke]> agreed.

[15:59] *** SmokeMac_ left
[16:00] <[Coke]> ... ew, I just had a horrible idea.

[16:00] <kresike> bye folks

[16:00] *** kresike left
[16:00] <benabik> Have to find a new project to work on this summer.  Given the complete lack of activity, I'm not hopeful for Parrot being in GSoC.

[16:01] <nwc10> hauge grants?

[16:02] <atrodo> [Coke]: I've had a few of those past couple days too

[16:02] <pmurias> nwc10: for parrot hacking?

[16:02] <masak> atrodo: I'm curious what the context is of https://twitter.com/atrodo/status/299620421496627200 (and if there's something I/we can do to improve)

[16:03] <tadzik> I doubt that the hague grants will be granted for parrot hacking

[16:03] <[Coke]> tadzik: there are hague grants, regular GC grants...

[16:03] <tadzik> sure

[16:04] <[Coke]> PaFo has no infrastructure for getting/disbursing grants, so going through TPF is not a horrible idea.

[16:04] <[Coke]> You'd just need a good grant proposal with clear benefits to the community.

[16:04] <[Coke]> s/just//

[16:04] <benabik> [Coke]: s/ for.*/./

[16:05] <atrodo> masak: The context would be the drama that happened yesterday

[16:05] <[Coke]> Having been on the board, I would disagree with the letter of your substitution, but agree with the spirit.

[16:06] <masak> atrodo: yes, that much is clear. I don't like drama either.

[16:06] <masak> atrodo: if you just meant "drama doesn't make me want to use Perl 6", than I understand you perfectly already.

[16:08] <atrodo> masak: More or less, yes.

[16:09] <benabik> I know it's early, but is #perl6 planning on GSoC?  Really need to find something this summer to keep me occupied/fed.

[16:09] <masak> atrodo: if only there were a way to make Perl 6 without causing heat online. I wish I knew a way.

[16:09] * pmurias would like to take part of GSoC too

[16:12] <tadzik> me too, if that'd be possible

[16:12] <colomon> what's the deadline for getting that organized?  it seems like we ought to be able to find things for people to do...

[16:13] <colomon> I mean, if not core stuff, much-needed modules.

[16:13] <benabik> Last year it was announced 2/4 and org deadline was 3/9

[16:13] <colomon> so we need to get on the ball pronto.

[16:14] <benabik> Well, AFAIK the announcement hasn't happened this year.

[16:14] <benabik> (yet)

[16:14] <colomon> afk but definitely interested in this topic # time to snowblow the driveway!

[16:22] <pmurias> what's the difference between QAST::Stmts and QAST::Stmt?

[16:22] <benabik> One's plural?

[16:22] <pmurias> me found the difference in the docs

[16:22] <benabik> I think Stmt is designed to limit things like temporary generation for a single statement, while Stmts is a sequence of code.  (Someone else can probably explain better.)

[16:23] * benabik is far more familiar with PAST than QAST.  A little too familiar sometimes.

[16:24] *** cognominal joined
[16:24] *** domidumont joined
[16:26] * benabik ponders if VMKit could actually be a reasonable way to do a "custom" NQP VM.

[16:28] <benabik> Although their GC simultaneously impresses and scares me.  It uses MMTk, which is written in Java, by translating it through their VMKit-JVM into native code.

[16:33] *** hoelzro is now known as hoelzro|away

[16:34] *** benabik left
[16:38] *** benabik joined
[16:46] *** SunilJoshi joined
[16:47] <pmurias> benabik: don't we have a surplus of VMs? ;)

[16:48] <benabik> pmurias: I'm a systems researcher?

[16:49] <benabik> I'd like to play with a VM that uses 6model as its core object system.  I keep wondering if it would have the flexibility that Parrot didn't quite manage.

[16:51] *** rindolf joined
[16:51] <arnsholt> A 6model-based VM would indeed be interesting

[16:52] <PerlJam> pmurias: there's always room for one more  :)

[16:55] *** jeffreykegler joined
[16:56] <rindolf> Hi all.

[16:57] <rindolf> PerlJam: Jammin!!!

[16:57] *** SmokeMachine joined
[16:57] <FROGGS> I hate SOAP √≥.√≤

[16:58] *** tail_ joined
[16:58] <rindolf> FROGGS: join the support group - http://www.shlomifish.org/open-source/anti/SOAP/

[16:58] <tail_> hi

[16:59] <rindolf> tail_: hi.

[16:59] <tail_> I have a problem

[17:00] <tail_> 'cabal install pugs' failed on my win7

[17:01] <tail_> I found a messeage 'Perhaps you need to add `haskell98' to the build-depends in your .cabal file'

[17:01] <[Coke]> tail_: Not sure if we can help, but: what's the error message?

[17:01] <[Coke]> ah.

[17:01] <dalek> rakudo-js: 7ccf1fd | (Pawe≈Ç Murias)++ | / (4 files):

[17:01] <dalek> rakudo-js: Pass a bunch of tests directly from nqp-jvm-prep.

[17:01] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/7ccf1fd13d

[17:01] <dalek> rakudo-js: 271e02f | (Pawe≈Ç Murias)++ | runtime.js:

[17:01] <dalek> rakudo-js: Remove p6_num.

[17:01] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/271e02f0d5

[17:01] <dalek> rakudo-js: 00de30f | (Pawe≈Ç Murias)++ | / (4 files):

[17:01] <dalek> rakudo-js: Pass t/qast_conditional.t. Switch from using p6_true() to .Bool().

[17:01] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/00de30fd6d

[17:01] <dalek> rakudo-js: 581b72b | (Pawe≈Ç Murias)++ | / (2 files):

[17:01] <dalek> rakudo-js: Handle QAST::Stmt properly.

[17:01] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/581b72bdf9

[17:01] <dalek> rakudo-js: 77be5f0 | (Pawe≈Ç Murias)++ | run (2 files):

[17:01] <dalek> rakudo-js: Pass qast_terms.t

[17:01] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/77be5f05f2

[17:02] <[Coke]> and if you do that does it work?

[17:03] <tail_> see http://pastebin.com/2y2f97Fv

[17:04] <[Coke]> pastebin blocked here.

[17:04] <tail_> Oh, I'm sorry

[17:05] *** hoelzro|away left
[17:06] *** hoelzro|away joined
[17:07] *** kaleem joined
[17:09] *** felher joined
[17:09] <pmurias> if I want to use some BSD 3 licence code in nqp-js what do I have to do to meet all the licence requirements?

[17:10] *** domidumont left
[17:10] *** domidumont joined
[17:10] *** kaare_ joined
[17:11] *** hoelzro|away left
[17:12] *** hoelzro|away joined
[17:14] <pmurias> maybe using a library would be better then copy and paste ;)

[17:17] <[Coke]> easier, aye.

[17:17] <[Coke]> er, from a licensing perspective.

[17:19] *** cognominal left
[17:19] *** uvtc joined
[17:22] <FROGGS> rindolf++

[17:22] <rindolf> FROGGS: :-)

[17:22] *** Chillance joined
[17:23] *** hoelzro|away left
[17:23] *** hoelzro|away joined
[17:26] *** cognominal joined
[17:29] <stevan_> jnthn++ # http://irclog.perlgeek.de/perl6/2013-02-07#i_6423586 thank you

[17:33] *** cognominal left
[17:38] *** kivutar joined
[17:38] <dalek> Pugs.hs: d3a6617 | au++ | pugs-compat/src/Pugs/Compat/Posix.hs:

[17:38] <dalek> Pugs.hs: * Workaround #25 by disabling opendir() on Windows.

[17:38] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/d3a661779a

[17:38] <dalek> Pugs.hs: d467adb | au++ | pugs-compat/ (2 files):

[17:38] <dalek> Pugs.hs: * 0.0.6.20130209.0 as CC0.

[17:38] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/d467adb945

[17:38] <dalek> Pugs.hs: 50efb57 | au++ | / (2 files):

[17:38] <dalek> Pugs.hs: Merge branch 'master' of github.com:perl6/Pugs.hs

[17:38] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/50efb57770

[17:39] <tail_> something went wrong with pugs-compat-0.0.6.20120717.204800

[17:39] *** cognominal joined
[17:39] <au> tail_: yeah that's https://github.com/perl6/Pugs.hs/issues/25 ; please "cabal update" and retry with 0.0.6.20130209.0

[17:39] <au> released about 120 seconds ago

[17:39] <tail_> !!

[17:40] <tail_> okey, trying now

[17:40] <au> you're welcome, too :) please re-open the issue if you run into any problem and I'll check next lunar year (that is to say, less than 24 hours from now)

[17:44] <tail_> thank you. pugs-compat successfully installed

[17:45] <au> woot

[17:46] <au> tail_++ for reminding me about this :)

[17:46] <au> -> dreamland, with a happy smile &

[17:46] <tail_> au++

[17:50] <tail_> pugs-compat is ok, but it still says "Pugs-6.2.13.20120717 failed during the configure step."

[17:50] <tail_> * Missing (or bad) header file: perl5/p5embed.h

[17:50] <uvtc> Is someone working on a Perl 6 --> Javascript compiler?

[17:52] <benabik> uvtc: pmurias seems to be doing something with rakudo-js (I think still very early stages)

[17:53] <uvtc> benabik: thanks.

[17:53] <tail_> it seems EXTERN.h is missing

[17:55] *** cognominal left
[17:58] <uvtc> benabik: you mentioned some reasons on the 5th here about the difficulties with using LLVM for Perl 6.

[17:58] <uvtc> http://irclog.perlgeek.de/perl6/2013-02-05#i_6416952

[17:58] <benabik> uvtc: It's much like building something from scratch.

[17:59] <uvtc> I was going to add an Implementations FAQ to the wiki. Ok if I add in those points you mention?

[17:59] <benabik> uvtc: Sure.

[17:59] <uvtc> thanks

[18:01] <[Coke]> au++ random pugs commits!

[18:01] <uvtc> Is https://github.com/perl6/Pugs.hs the official github home of Pugs?

[18:02] *** SmokeMachine left
[18:02] <[Coke]> as official as it gets, aye.

[18:02] *** cognominal joined
[18:03] <uvtc> Is it's purpose primarily experimental at this point?

[18:03] *** SmokeMachine joined
[18:03] <uvtc> I notice that it is no longer listed in the feature comparison matrix.

[18:04] <uvtc> n/m

[18:05] <[Coke]> it was experimental years ago.

[18:05] <uvtc> understood

[18:05] <uvtc> thanks

[18:05] <uvtc> If someone wants to port Rakudo to another backend, what are the main pieces involved?

[18:06] <benabik> QAST, rules engine, and REPRs?

[18:06] <uvtc> Are those all parts of nqp?

[18:06] <[Coke]> uvtc: port nqp.

[18:06] <benabik> uvtc: Yes.

[18:06] <uvtc> Cool. Thanks.

[18:06] <PerlJam> uvtc: what other backend are you thinking about porting it to?

[18:07] *** benabik left
[18:07] <uvtc> I am not. But a few days ago someone (pmurias?) mentioned that maybe Perl 6 could use an "Implementations FAQ". So I'm quickly writing up something for the wiki, and asking questions now as I type.

[18:07] <FROGGS> nqp is the "glue language", but there are still some parrot specific thing in rakudo itself (I'm thinking of IO::Socket::INET)

[18:07] *** SamuraiJack joined
[18:08] <FROGGS> ++uvtc

[18:08] <au> tail_: try "cabal install Pugs --flags=-Perl5" to install without Perl5 bindings. it's possible your perl installation had no compatible EXTERN.h

[18:09] <au> cabal should actually retry that... not sure if Pugs.cabal can be tweaked to make that happen. pull requests welcome :)

[18:09] <au> -> zz for real &

[18:09] <uvtc> REPRs == regexes?

[18:09] <PerlJam> uvtc: no

[18:09] <uvtc> What are REPRs?

[18:10] *** SmokeMachine left
[18:10] <uvtc> Sounds like something one would catch down by the river and fry up under the stars over a campfire.

[18:10] <PerlJam> uvtc: REPRs are the "clostest to the metal" representation of things.

[18:10] *** arlinius left
[18:10] <geekosaur> cabal doesn't so much try things, in the sense of try the compile and then try it again on fail.  it's just a constraint solver and if you can't describe the constraint directly in the cabal file (as when you need to do configure search for perl5 guts) you can't have it automatically set that flag

[18:18] <tail_> It works!

[18:18] <tail_> Thank you for helpful advice au++

[18:18] <[Coke]> \o/

[18:23] <uvtc> http://wiki.perl6.org/Implementations%20Faq

[18:25] *** cognominal left
[18:25] *** cognominal joined
[18:28] <tail_> good night (3:30 here)

[18:28] *** tail_ left
[18:29] <uvtc> After using a language on the JVM (other than Java), my two general complaints are: (1) slow start-up time, and (2) contant gentle pressure to use Java-equivalents of libs that you'd really rather use instead. Hoping these aren't too big of a deal with Rakudo-on-JVM.

[18:32] <uvtc> Er, Rakudo+JVM. Rakudo‚åÅJVM

[18:32] *** kst` is now known as kst

[18:33] *** cognominal left
[18:33] *** kaleem left
[18:33] <[Coke]> .u ‚åÅ

[18:33] <phenny> U+2301 ELECTRIC ARROW (‚åÅ)

[18:33] *** fgomez joined
[18:34] <uvtc> I like that one. :)

[18:34] *** cognominal joined
[18:40] * rjbs just wanted to pop in and say how much he loves you all. ¬ªhugs¬´

[18:42] <PerlJam> hugme: hug rjbs

[18:42] * hugme hugs rjbs

[18:43] <PerlJam> hugs by proxy  :)

[18:43] <rjbs> good call.  I've been a bit sniffly, you don't want to catch anything

[18:45] *** SamuraiJack left
[18:48] * [Coke] ~~ @ rjbs!

[18:49] <rjbs> We going to see good p6 talks in Austin?

[18:53] <[Coke]> Argh. I really wish I could convince work to pay for travel. :|

[18:54] <[Coke]> jnthn will likely be there, so yes.

[19:05] *** rindolf left
[19:06] *** benabik joined
[19:08] * diakopter laughs at dwoldrich in the backlog

[19:09] <uvtc> s/dwoldrich/dwoldrich's comments/

[19:09] <uvtc> :)

[19:09] <rjbs> [Coke]: Where are you?

[19:11] *** japhb_ joined
[19:11] <[Coke]> rjbs: near Albany, NY

[19:11] <[Coke]> the whole family drove to Houston a few years back, but I doubt that will happen this year. YAPC seems to have firmly settled on dates in the school year.

[19:11] <rjbs> That's only 208 miles from here!  Coming to ABE.pm this week?

[19:11] * moritz backlogs

[19:11] <moritz> sorear++ # "then I should tell you that #perl6 is now a place where we care about things that work"

[19:12] <[Coke]> rjbs: ... chrome does not want me to search for ABE.pm in the omnibox.

[19:12] <rjbs> [Coke]: abe.pm.org in Bethlehem, PA

[19:14] <[Coke]> rjbs: not this week, but if you have a big event, sure, I can swing by.

[19:15] <rjbs> We tend to just get beers and burgers, but I'll let you know.  :-)  Peter Martini, author of the p5 work on core sub sigs, may be here this week.

[19:16] <uvtc> (Actually, it's not very nice to laugh at folks' comments either, unless they're meant to be funny. Anyhow.)

[19:17] *** thou_ is now known as thou

[19:18] *** vmspb joined
[19:18] *** Targen joined
[19:24] *** cogno joined
[19:24] <diakopter> uvtc: lol?

[19:25] <uvtc> I just meant that it seemed that maybe dwoldrich had other problems. That's all. And that I shouldn't have added that smiley above.

[19:26] *** kivutar left
[19:26] <arnsholt> Argh. Building Rakudo HEAD with NQP HEAD fails on both my work machine and laptop. Has anyone else gotten that combo to work?

[19:31] *** kivutar joined
[19:32] <nwc10> no, I meant Hauge Grants for hacking on something Perl 6 instead of GSoC for hacking on Parrot. (If that's fun)

[19:32] *** am0c left
[19:37] <uvtc> In pmichaud's "perl 6 lists and arrays" talk from June 2012 (it was actually a two-parter), he mentioned near the beginning (3:20) that Synopsis 7 & 8 are very wrong as of that date.

[19:37] <uvtc> In fact, he says "don't read them", and that they'll just confuse you.

[19:37] <uvtc> Have those issues been cleared up since then?

[19:37] <uvtc> This talk: http://www.youtube.com/watch?v=mrfK1dtyD14

[19:37] <moritz> uvtc: I don't think so

[19:38] *** Targen left
[19:38] <uvtc> Has the design been straightened out, just not the spec?

[19:38] <moritz> uvtc: pmichaud has a grant for rewriting S07, but he got distracted by lots of real-life stuff

[19:38] *** cogno left
[19:38] <uvtc> I understand about pmichaud.

[19:39] <uvtc> Has the design/implementation settled down though? (that is, is it just the spec that is still behind?)

[19:39] <TimToady> we were very clear here that we expected him to prioritize his family over Perl 6

[19:39] <uvtc> Absolutely.

[19:40] <TimToady> it's very close to right; there may be a few glitches yet in self-referential lists

[19:42] *** cognominal left
[19:42] *** FROGGS[mobile] left
[19:42] <uvtc> TimToady, at http://perl6.org/compilers/features , I see that "LoL" (list of lists, I presume) is marked yellow. Is that one of the bits still being designed?

[19:43] <uvtc> Or is it just not implemented yet?

[19:43] <TimToady> partially implemented

[19:43] *** cognominal joined
[19:43] <TimToady> binding to ** works, but lol as a verb isn't there yet, last I knew

[19:44] <TimToady> nr: say ((1..2),(3..4)).lol.perl

[19:44] <p6eval> niecza v24-20-g93138cc: OUTPUT¬´Unhandled exception: Unable to resolve method lol in type Parcel‚ê§  at /tmp/BUDGjTfIKt line 1 (mainline @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4227 (ANON @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4228 (module-CORE @ 580) ‚ê§  at /home‚Ä¶

[19:44] <p6eval> ..rakudo 4fb07b: OUTPUT¬´LoL.new(1..2, 3..4)‚ê§¬ª

[19:44] <uvtc> Sorry, right. I should've written s/not implemented/only partially implemented/ above.

[19:44] <TimToady> I guess it's there-er than I thought

[19:45] <TimToady> nr: say ((1..2),(3..4)).lol.[1].perl

[19:45] <p6eval> rakudo 4fb07b: OUTPUT¬´3..4‚ê§¬ª

[19:45] <p6eval> ..niecza v24-20-g93138cc: OUTPUT¬´Unhandled exception: Unable to resolve method lol in type Parcel‚ê§  at /tmp/I_FAHGgUoW line 1 (mainline @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4227 (ANON @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4228 (module-CORE @ 580) ‚ê§  at /home‚Ä¶

[19:45] <TimToady> nr: say ((1..2),(3..4)).lol.[1].WHAT

[19:45] <p6eval> niecza v24-20-g93138cc: OUTPUT¬´Unhandled exception: Unable to resolve method lol in type Parcel‚ê§  at /tmp/E8h7rwLnqq line 1 (mainline @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4227 (ANON @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4228 (module-CORE @ 580) ‚ê§  at /home‚Ä¶

[19:45] <p6eval> ..rakudo 4fb07b: OUTPUT¬´Range()‚ê§¬ª

[19:45] <TimToady> nr: say ((<a b c>),(<d e f>)).lol.[1].WHAT

[19:45] <p6eval> rakudo 4fb07b: OUTPUT¬´Parcel()‚ê§¬ª

[19:45] <p6eval> ..niecza v24-20-g93138cc: OUTPUT¬´Unhandled exception: Unable to resolve method lol in type Parcel‚ê§  at /tmp/R0Pmpq3fY9 line 1 (mainline @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4227 (ANON @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4228 (module-CORE @ 580) ‚ê§  at /home‚Ä¶

[19:45] *** xenoterracide left
[19:45] <TimToady> okay, enough spamm

[19:46] <TimToady> ing

[19:46] <uvtc> Where can I find the docs for `lol` at http://doc.perl6.org/ ?

[19:46] <uvtc> Didn't see them under http://doc.perl6.org/type/List .

[19:46] *** xenoterracide joined
[19:47] *** xenoterracide left
[19:47] <TimToady> S29:368, for one

[19:47] <uvtc> Thanks.

[19:47] <FROGGS> TimToady: btw, both niecza and rakudo have the same .gist for Matches

[19:47] <TimToady> but it lies slightly

[19:47] <TimToady> insofar as we don't have a Seq type

[19:48] <TimToady> FROGGS: I saw that, FROGGS++

[19:48] <FROGGS> it's awesome that one can almost copy+paste from one to the other

[19:48] <FROGGS> working on niecza is pretty nice though, since it compiles so damn fast

[19:48] *** arlinius joined
[19:49] <TimToady> sorear++ thinks it's too slow :)

[19:49] <FROGGS> thats the only thing I dont like about rakudo, it takes minutes to check changes to code when you have to recompile nqp and rakudo

[19:49] <FROGGS> heh

[19:51] <TimToady> well, the nice thing about eating one's own dogfood is that when the dogs are happier, so are you

[19:52] *** cognominal left
[19:54] <rjbs> rakudo: my $x = sub {}; say $x.^methods

[19:54] <p6eval> rakudo 4fb07b: OUTPUT¬´No such method 'gist' for invocant of type 'Sub'‚ê§  in method gist at src/gen/CORE.setting:5128‚ê§  in sub say at src/gen/CORE.setting:7595‚ê§  in block  at /tmp/u4sD3jGU1D:1‚ê§‚ê§¬ª

[19:54] *** SunilJoshi left
[19:54] * rjbs wonders where his rakudo checkout went.

[19:54] <benabik> r: my $x = sub {}; say $x.^methods.map: *.name

[19:54] <p6eval> rakudo 4fb07b: OUTPUT¬´Unmarshallable foreign language value passed for parameter '$x0'‚ê§  in block  at /tmp/GZgng_XLLx:1‚ê§‚ê§¬ª

[19:55] <FROGGS> there are rt tickets for that

[19:55] <rjbs> FROGGS: yeah, I filed it

[19:55] <rjbs> I wanted to see if it was still an issue, and I can't find a local rakudo, so I cheated and asked the bot. :)

[19:56] * rjbs is compiling in the background now.

[19:57] <FROGGS> :o)

[20:01] *** fgomez left
[20:01] *** atrodo_ joined
[20:01] *** atrodo_ left
[20:02] <tadzik> PLPW registration is now open! \o/

[20:02] <tadzik> join the fun at http://act.yapc.eu/plpw2013/

[20:03] *** cognominal joined
[20:06] *** bruges_ joined
[20:08] *** bruges left
[20:10] *** fgomez joined
[20:12] *** cognominal left
[20:14] * benabik gets segfaults compiling NQP.  :-(

[20:15] <FROGGS> tadzik too

[20:15] <FROGGS> err

[20:15] <FROGGS> arnsholt too

[20:17] *** cognominal joined
[20:18] * japhb_ pulls and tries on a 32-bit Intel Linux box

[20:21] <dalek> doc: c57c8d0 | (Gabor Szabo)++ | index.pl:

[20:21] <dalek> doc: add listing of the words

[20:21] <dalek> doc: review: https://github.com/perl6/doc/commit/c57c8d085b

[20:26] <[Coke]> hugme: hug chromatic

[20:26] * hugme hugs chromatic and blushes

[20:26] <[Coke]> ... that's odd.

[20:26] <benabik> hugme has a crush?

[20:26] <tadzik> what, you wouldn't blush?

[20:28] *** pupoque left
[20:29] *** pupoque joined
[20:29] <uvtc> hugme: hug tadzik

[20:29] * hugme hugs tadzik

[20:29] <uvtc> Hm.

[20:30] <uvtc> There is more to hugme than meets the eye.

[20:30] <tadzik> the real beaty is not screen deep

[20:30] <tadzik> * beauty

[20:30] <uvtc> Beauty is in the eye of the behugger.

[20:30] <rjbs> Hooray, I have a perl6 again.

[20:30] <FROGGS> \o/

[20:31] <[Coke]> rjbs: I challenge you to add the behugger to the monster manual.

[20:31] <rjbs> One sec.

[20:32] <japhb_> benabik, FROGGS, arnsholt: I got a successful build of NQP on 32-bit Intel Linux.  FWIW, the command I used was:  make realclean; rm -rf install; git clean -dXf; perl Configure.pl --gen-parrot; make; make test; make install

[20:32] <japhb_> AKA "Paranoia R Us"

[20:33] *** cognominal left
[20:33] <[Coke]> if you're reall paranoid, you also need "rm parrot nqp" in there with install.

[20:34] <[Coke]> since git clean doesn't do that.

[20:34] * benabik builds Parrot separately.

[20:34] <[Coke]> (ah, unless -X does when -x doesn't)

[20:34] <japhb_> [Coke], "Oh god I'm being crushed to death ... but man, it feels so fuzzy and soft and warm ....  aaaugghhzzcckkk."

[20:34] <rjbs> [Coke]: https://www.evernote.com/shard/s2/sh/e5ae1013-1fa5-419e-b361-1b14eba9729b/7a60b6ad06c2cb10d5a1709159eb3379

[20:34] <[Coke]> rjbs: (perl6 again). and don't you feel better now?

[20:35] <rjbs> [Coke]: Mostly confused. :)

[20:35] *** domidumont left
[20:35] <[Coke]> hit dice? isn't that old school?

[20:36] <[Coke]> or is it also new school? I stopped playing in '89. :(

[20:36] <rjbs> [Coke]: I play the 1981 rules.

[20:36] <rjbs> [Coke]: (I also play 4E, but with less gusto.)

[20:36] <benabik> Monsters still have hit dice.

[20:36] <rjbs> benabik: Not in 4E they don't.

[20:36] <rjbs> [Coke]: You can get the 1981 Basic rules for $5 now at dndclassics.com! :)

[20:36] <benabik> rjbs: Ah.  I went 3->3.5->Pathfinder, not to 4.  :-/

[20:37] * [Coke] wishes he had not sold his old school books for cash.

[20:37] *** cognominal joined
[20:38] <tadzik> did you learn d&d in school?

[20:38] <japhb_> Pathfinder is the first d20 game I've played since the original AD&D (and old skool D&D before that).

[20:38] *** jeffreykegler left
[20:38] <japhb_> I played a lot of GURPS in college

[20:39] <[Coke]> AD&D, paranoia, call of c'thulhu. even larped once.

[20:40] * moritz loved paranoia

[20:40] <colomon> AD&D 1 -> GURPS -> Amber Diceless

[20:42] <tadzik> http://play-perl.org/about looks cool

[20:44] *** vmspb left
[20:44] <rjbs> /win/win 77

[20:44] <rjbs> Oops.

[20:44] *** cognominal left
[20:45] *** jeffreykegler joined
[20:45] <japhb_> .oO( It's a /win/win! )

[20:47] <moritz> arnsholt: fwiw I can't compile rakudo on newest nqp either

[20:47] <moritz> also while compiling the restricted setting

[20:48] <moritz> though compiling lib/Test.pir produces the same error

[20:48] * benabik gets segfault Parrot/NQP HEAD on 'nqp src/stage2/gen/NQPP5QRegex.pm'

[20:49] <arnsholt> Right, so it's probably not something particular to my setup then

[20:49] <arnsholt> We should probably ping jnthn about it when he's around

[20:54] *** benabik left
[20:56] <FROGGS> fwiw: nqp 2013.01-95-ga0bba92 with rakudo Sonoma-109-g4fb07b1 is fine

[20:57] <jnthn> good evening o/

[20:57] <FROGGS> hi jnthn 

[20:57] <masak> jnthn! \o/

[20:57] <tadzik> jnthn!

[20:57] <jnthn> Yes, I noticed the Rakudo not building on latest NQP last night. At first I thought it was the allocation mis-calcs, but I patched that and...no pony.

[20:58] <tadzik> did you know you can sign up for PLPW already? :)

[20:59] *** fgomez left
[20:59] <jnthn> tadzik: omg omg no I didn't!

[20:59] <uvtc> hehehe

[20:59] <jnthn> tadzik: url? :)

[20:59] <tadzik> http://act.yapc.eu/plpw2013/

[21:00] <tadzik> last minute, before we run out of seats :P

[21:00] <uvtc> jnthn: be the first one. It'll put you in the ... what's the term... the "first position" in the workshop.

[21:00] <uvtc> In the ...

[21:00] <tadzik> POLE POSITION! \o/

[21:00] <uvtc> Pole Position

[21:00] <uvtc> !

[21:00] <uvtc> Oh man.

[21:00] <tadzik> uvtc: looks like I got to Pole Position first ;P

[21:00] <uvtc> hahaha

[21:00] <masak> why is it that every time au++ helps someone on the channel, she does it in such an awesome way? how can the rest of us be awesome like au?

[21:02] <TimToady> some of us are called to be LTA to make the awesome people stand out more :)

[21:03] *** cognominal joined
[21:03] <jnthn> tadzik: I signed up :)

[21:03] <tadzik> awesome! \o/

[21:03] <jnthn> Moja prezentacja bude po angielsku, though :P

[21:04] <PerlJam> masak: strength through diversity!  :)

[21:04] <tadzik> bƒôdzie :) That's cool :)

[21:04] <masak> moritz: if we were to set as a goal to play Paranoia when we next meet, would that goal be realizable? :)

[21:04] <jnthn> tadzik: heh, I guess Polish entirely from a poor recollection of Slovak :)

[21:05] <tadzik> they're close enough :)

[21:05] <masak> Moja prezentacja tiez bude po angielsku...

[21:06] <tadzik> masak: oh yes, rpg!

[21:06] <masak> jnthn: where does the adverb go?

[21:06] <jnthn> masak: There seems OK to me... :)

[21:07] <jnthn> masak: Though I'm pretty sure it coulda gone on the end too.

[21:07] <masak> so typical of a cased language. they don't really care :P

[21:08] <arnsholt> jnthn: From the error message I get compiling, it looks like Rakudo tries to serialize an object NQP doesn't like?

[21:08] <masak> Latin is worse, though. they flaunt their nonchalance of word order.

[21:08] <jnthn> Well, just means you get to use word order for nuance. :)

[21:09] <jnthn> I never got to the level of being able to do that terribly well in Slovak. Maybe I will with $slavic_language.next :)

[21:09] *** fgomez joined
[21:09] <jnthn> arnsholt: Yes, but the object it's getting passed is...bizzare.

[21:09] *** jeffreykegler left
[21:09] <arnsholt> Oh, dang

[21:09] <masak> jnthn: don't tell me... Bulgarian!? say it ain't so! :P

[21:10] <jnthn> masak: :P

[21:10] <tadzik> Bulgarian is cool :)

[21:10] <jnthn> No, but I'd like to make an effort to learn one of the languages from that sub-family.

[21:11] <masak> tadzik: it is, actually.

[21:11] <timotimo> it is basically advanced Russian, no?

[21:12] <jnthn> Russian often feels like pretty advanced Russian to me :P

[21:12] <timotimo> would evolved be a better term?

[21:12] <masak> timotimo: not really.

[21:13] <geekosaur> "like Russian, only more so"

[21:13] <timotimo> i talked to a Bulgarian and she told me Russian sounds like archaic Bulgarian to their ears

[21:13] *** pupoque left
[21:13] <[Coke]> ooh, let's learn bulgarian! I already have a starter book and some cd's. "ciao!"

[21:14] *** swarley joined
[21:14] <swarley> I cannot seem to answer this physics problem

[21:15] *** cognominal__ joined
[21:15] <[Coke]> does it involve pushing on a rope

[21:15] <[Coke]> ?

[21:15] <masak> :P

[21:15] <swarley> No :( electrostatics

[21:15] *** cognominal left
[21:16] <masak> swarley: I always get static shocks from a metal staircase in a $work building... ;)

[21:16] <masak> that's also a physics problem, I think.

[21:16] <jnthn> hah, I was thinking exactly the same :)

[21:16] <masak> jnthn: that's because you get them too! :P

[21:17] <jnthn> I think that's a problem of them using a HUGE piece of iron, then people rubbing their huge winter coats against it :)

[21:17] <jnthn> The glass stairs probably also don't help... :)

[21:17] <swarley> Two point charges, q1 and q2 are placed 0.30m apart on the x-axis, as show in the figure above. Charge q1 has a value of -3e-9 C. The net electric field at point P is zero. Calculate the magnitude and charge of q2.

[21:17] <masak> swarley: where's point P?

[21:18] <swarley> 0.1m left of point q1

[21:18] <masak> yes, then it's solvable.

[21:18] <[Coke]> hey, don't we have a community rule about not doing people's homework? ;)

[21:18] <masak> I didn't give him the solution! :P

[21:18] <tadzik> physics? Do help him :)

[21:18] <TimToady> since it's really just electromagnetism...

[21:18] <tadzik> I remember my struggle with physics

[21:18] <jnthn> -3e-9 C...that's some really cold weather.

[21:18] <swarley> I thought I got the value for q2, but in theory if I got it right then if I calculate it the electric field should be zero

[21:18] <moritz> masak: re paranoia: possible

[21:18] <swarley> but it's 0.000005

[21:19] <masak> jnthn: with wind chill, it's 20 degrees below absolute zero!

[21:19] <uvtc> swarley: figure out the field at P due to q1.

[21:19] <masak> yeah, uvtc has it. field.total = field.q1 + field.q2

[21:20] <swarley> uvtc; I started with Eq1 = Eq2 then culoumbs law, k(-3e-9)/(0.1)^2 = k(q2)/(0.4)^2

[21:20] <swarley> k cancels, simplify etc

[21:20] <swarley> I came down to 4.8e-8 nC

[21:20] <swarley> err

[21:21] <swarley> -nC

[21:21] <swarley> But if I try to prove that with the electric field equaling zero it doesn't turn out as expected

[21:21] <uvtc> Eq1 = -Eq2

[21:22] <swarley> Electric field of q1 must be equal and opposite of q2 at point P

[21:22] <swarley> since they cancel

[21:23] <swarley> Jesus, you don't need to take a standard physics class before AP physics they said, he's only a little bit of a hard teacher they said

[21:23] <uvtc> hahaha

[21:23] <swarley> Seriously, his motto is "If I make it harder than the exam, you won't have any problems"

[21:24] <masak> I like him already.

[21:24] <moritz> swarley: just remember that the electric field decreases quadratically with distance

[21:24] <swarley> I know, because of radius squared

[21:24] <swarley> Inverse proportionality

[21:24] <swarley> inverse square*

[21:24] <moritz> so you just have to square the ratio of distances to get the ratio of charges to make them cancel out

[21:24] <swarley> but that doesn't change that they cancel

[21:25] <swarley> ohh

[21:25] <masak> it feels to me that you need to plug your values into the same equation twice: the one that relates point charge, electric field, and distance.

[21:25] <masak> I would even write up a nice solution in Perl 6, if I could think of a nice way to run the same formula both backwards and forwards :)

[21:26] <masak> hrm, I guess I could just implement both directions...

[21:26] <arnsholt> Maybe we need a computer algebra system O:)

[21:27] <swarley> I have one, I really do love math, so I spoiled myself to a TI-Nspire CX CAS

[21:27] <swarley> with a*

[21:27] * moritz was good as physics as long as constant factors could be ignored :-)

[21:27] <swarley> I'm good with physics 2 weeks after the unit has finished. It's just that our teacher assumes that we have taken calculus already

[21:28] <swarley> And I'm a calculus student stuck in a trig students curriculum..

[21:29] <swarley> Oh man, seeing vectors for the first time in kinematics, that was not even a learning curve

[21:29] <swarley> That was a learning wall

[21:30] <jnthn> Seems I can go all the way back before the multi-dispatch changes and still see problems with serializatin.

[21:30] *** rking left
[21:30] <swarley> I guess it was for the best though, quick way to jam a lot of math into your brain

[21:30] <jnthn> *serialization

[21:31] *** uvtc left
[21:32] <arnsholt> Hmm. So quite possibly a bug somewhere in my branch code?

[21:33] <masak> swarley: https://gist.github.com/masak/4742101

[21:33] <masak> swarley: didn't need much math at all ;)

[21:33] <masak> r: say -3e-9 * -sqrt(2)

[21:33] <p6eval> rakudo 4fb07b: OUTPUT¬´4.24264068711929e-09‚ê§¬ª

[21:36] <masak> swarley: (was this review helpful to you? yes/no)

[21:37] *** spider-mario joined
[21:39] *** kivutar left
[21:40] *** bluescreen10 left
[21:41] *** donaldh joined
[21:41] <swarley> oh, sorry. I was finishing another one

[21:41] <swarley> Let me take a look

[21:42] <jnthn> arnsholt: I have got a case in a commit right after we merged it when Rakudo does work, but if I --target=pir on t/nqp/55-multimethod.t it explodes with exactly the same kind of error.

[21:42] <swarley> and 1/(4 pi e0) is 9e9

[21:43] <swarley> r: say 9e9

[21:43] <p6eval> rakudo 4fb07b: OUTPUT¬´9000000000‚ê§¬ª

[21:44] <masak> swarley: you don't need to know what 1/(4 pi e0) is.

[21:44] <swarley> r: say 9e9 *  ((-3e-9)/(0.1**2))

[21:44] <p6eval> rakudo 4fb07b: OUTPUT¬´-2700‚ê§¬ª

[21:44] <masak> all you're interested in is q2.

[21:44] <masak> * moritz was good as physics as long as constant factors could be ignored :-)

[21:45] <swarley> oh, i see what you're saying now

[21:45] <arnsholt> jnthn: Right. I'll provisionally blame myself, in that case

[21:45] <masak> in this case, the constant factors could be ignored. :)

[21:45] <jnthn> arnsholt: Well, doing a built of before any of the merging for now

[21:46] <jnthn> That should help answer it

[21:46] <arnsholt> Yeah, definitely

[21:46] <masak> swarley: basically all I'm using in the end is "it's an inverse square law -- if it's twice the distance, the charge needs to go up by a factor of sqrt(2)"

[21:46] <swarley> Yeah, I understand it now. I just was caught up in a slur of variables

[21:47] <jnthn> arnsholt: Hm, seems not...

[21:47] <masak> the trick to solving these problems is to abstract away the unnecessary parts :)

[21:47] <swarley> I swear I'm not bad at physics, I got one of the headers

[21:47] <swarley> errr

[21:47] <swarley> Harder ones

[21:47] <swarley> Sorry, someone asked me a question as I was typing

[21:47] <arnsholt> jnthn: No error pre-merge, or error pre-merge?

[21:47] <jnthn> arnsholt: Error pre-merge. Very odd.

[21:48] <masak> swarley: don't spend time classifying yourself. just practice the problems until they feel easy :)

[21:48] <moritz> swarley: http://perlpunks.de/paste/show/51157269.9f7.1a4 # there's the math, formally

[21:48] <swarley> I got one of the variable only ones 100% correct and I was so excited lol. Those usually have the lowest average points earned

[21:49] <masak> er, moritz is right, I'm wrong.

[21:49] <masak> the factor is -4, not -sqrt(2). of course.

[21:50] <arnsholt> jnthn: Weird, weird

[21:50] <swarley> OH! so I actually had the right answer when I rewrote it :)

[21:50] <masak> https://gist.github.com/masak/4742101 updated.

[21:50] <masak> moritz++

[21:50] <arnsholt> But bedtime now

[21:50] <swarley> I just said 'screw physics' let's treat this as a proportionality

[21:50] <arnsholt> See you guys tomorrow o/

[21:50] * arnsholt &

[21:50] <masak> arnsholt: \o

[21:50] <swarley> o/

[21:51] *** fgomez left
[21:52] <jnthn> o/ arnsholt 

[21:52] <masak> I should have checked myself somewhere along the way. the field strength is divided by 4 every time we double the distance. d'oh :)

[21:53] *** xenoterracide joined
[21:54] *** cognominal joined
[21:54] *** cognominal__ left
[21:57] * moritz wonders if there's a weird but beautiful way to solve that problem with Gauss' theorem

[21:58] <pmurias> jnthn: what do we need deletepos for?

[21:58] <jnthn> Array.delete in Perl 6.

[21:58] *** cognominal left
[21:58] <jnthn> Though I wonder if we couldn't instead use splice or something...

[21:59] <pmurias> it's not used in rakudo atm

[22:00] <pmurias> jnthn: a few people were unsure if we want to keep the current Array.delete behavior

[22:01] <pmurias> jnthn: as it's copied over deprecated perl5 behavior

[22:01] <masak> moritz: well, it looks that way. Wikipedia says that Coloumb's law and Gauss' law are equivalent.

[22:01] <moritz> masak: yes, just very different formulations

[22:02] <masak> I'm looking at the math and realizing that I've forgotten too much of this to easily take it in.

[22:02] <pmurias> jnthn: http://pasta.test-smoke.org/437 - how the current way is crazy

[22:03] *** cognominal__ joined
[22:04] <pmurias> and the way nqp::deletepos is implemented in nqp-parrot is not really suitable for implementing Array.delete as it moves the elements

[22:08] *** fgomez joined
[22:20] *** cognominal__ left
[22:21] *** cognominal joined
[22:21] *** kaare_ left
[22:22] <dalek> rakudo-js: a017f5a | (Pawe≈Ç Murias)++ | run (2 files):

[22:22] <dalek> rakudo-js: Implement nqp::sha1, pass qast_serialization.t.

[22:22] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/a017f5aaef

[22:26] <jnthn> pmurias: Sorry, very tied up debugging a weird problem here...

[22:26] <jnthn> pmurias: Anyway, if .delete's current behavior is crazy, I'm most certainly not attached to it.

[22:28] *** donaldh left
[22:29] <rurban> I'm trying to design a better perl macro system. `statements` looks better than quasi{statements} or {{{statements}}}. qx should be used instead of `` for systems commands. macro declaration arguments should be possible structures ("destructuring-bind"), scalar, lists ie. () or hashes i.e. blocks. See e.g. http://perl11.org/p2/p2-extensions.html

[22:30] <rurban> @`` for late evaluation in list-context.

[22:34] <flussence> I wouldn't complain if shell-`` went away - I can never remember what function it maps to...

[22:35] <tadzik> shell `` is gone

[22:35] <masak> rurban: by the use of 'expr' and 'block' there, are you conflating rule names with parameter names?

[22:35] <flussence> oh well, you didn't see me complain :)

[22:36] <pmurias> rurban: it would be great to be able to specify the language for quasi quotes

[22:36] <rurban> well, {block} could be matching a lexed block or a hash

[22:36] <masak> rurban: what exactly can occur within the `` ?

[22:37] <rurban> I want to be able to matcbh both, blocks or hashes (of hashes). That's where I'm currently struggling

[22:37] <rurban> (in lisp it was much easier)

[22:38] <masak> rurban: it doesn't say {block} on that page, it says '{'block'}'

[22:38] <rurban> That's why I'm thinking a macro definition should have the same definition as in the parser definition. parsed at compile-time. macro while '('expr')' '{'block'}' {...}

[22:38] <masak> rurban: I find the syntax confusing. things are not marked out as rules in any way.

[22:39] <rurban> {block} might want to match a hash key named block

[22:39] <rurban> confusing, yes

[22:40] <masak> rurban: ah, well. looks like the beginning of something, but I don't see it working as-is.

[22:40] <masak> what if you wanted a macro with two blocks in it?

[22:40] <masak> like a loop with a continue block, for example?

[22:40] <pmurias> wouldn't it make sense to optimize for clarity, and not for conciseness

[22:41] <masak> pmurias: yes. the kind of clarity that makes things stand out.

[22:41] <rurban> I'd need a public API for the lexer, so that the structural macro arguments are well defined.

[22:41] <masak> pmurias: that's why we have {{{$ast}}} currently. it stands out.

[22:41] *** sqirrel left
[22:43] *** pmichaud joined
[22:44] *** stevan__ joined
[22:44] <pmichaud> good afternoon, #perl6

[22:44] <diakopter> hi :D

[22:44] <jnthn> o/ pmichaud 

[22:45] <pmurias> hi

[22:45] <masak> pmichaud! \o/

[22:45] <pmichaud> o/ jnthn

[22:45] *** stevan_ left
[22:45] <PerlJam> pmichaud: greetings

[22:49] <pmichaud> interesting discussion taking place on #parrot; anyone have anything they want me to know/add?

[22:51] <swarley> https://gist.github.com/swarley/4742592

[22:51] <swarley> \o/

[22:52] <PerlJam> swarley: you're making a Go backend for rakudo?

[22:52] <swarley> nqp

[22:52] <swarley> but yea

[22:52] <PerlJam> swarley++ cool.

[22:53] <swarley> I need to rethink the base object

[22:53] <pmichaud> swarley++   awesome!

[22:54] <swarley> I'm not really sure how perl6 objects are, my brain wants them to be like ruby objects. I looked at nqp-jvm's SixModelObject.java but that has no real information other than the STable, and I pretty much already had that.

[22:58] *** cognominal left
[22:58] <swarley> I can't wait to see regular NQP without the parrot code in it

[22:58] <swarley> That would make it a lot easier to read without having to look back and forth between the source trees

[23:00] <jnthn> swarley: The main thing to realize about 6model is that it does representation polymorphism.

[23:00] <jnthn> swarley: There's not a single "how to represent an object"

[23:00] <jnthn> There's just an STable pointer and you follow that to the REPR.

[23:00] <swarley> Oh, I understand that. 

[23:00] <swarley> I'm not planning on restricting it, or at least if i did I didn't mean to

[23:01] <jnthn> swarley: I didn't think you were. :) I was just trying to explain it. :)

[23:02] <pmurias> swarley: have you seen nqp/docs/serialization_format.markdown?

[23:02] <swarley> Oh okay, I would love to hear an explanation or read a paper on the subject from you. I'm quite certain you know exactly what you're talking about

[23:02] <jnthn> P6opaque is perhaps the most interesting thing to look at but I'm afraid any implementation of it is quite...crazy.

[23:02] <jnthn> In C you do it by calculating a struct on the fly.

[23:02] <swarley> pmurias; I have, but right now I'm just trying to get a basic object system that I can make a test suite for to start

[23:02] <jnthn> On the JVM it's done by calculating a class on the fly...

[23:02] <jnthn> I'm not quite sure how it is in JavaScript :)

[23:02] <swarley> I think a lot of things I'm going to just end up making interfaces for.

[23:02] <swarley> What is the opaque exactly?

[23:04] <pmurias> jnthn: it maps cleanly to the javascript object system

[23:04] *** cognominal joined
[23:04] <pmurias> which is really primitive

[23:04] <jnthn> swarley: It's the representation the majority of objects in NQP and Perl 6 use

[23:05] <swarley> Oh okay, so it's a higher level object representation?

[23:05] *** LordVorp joined
[23:05] <jnthn> pmurias: Nice :)

[23:05] <jnthn> swarley: It's a representation that knows how to lay out object attributes.

[23:06] <pmurias> jnthn: for each stable I just create an object which is a prototype for it's all instances

[23:07] <swarley> Oh, okay. I'm glad you said that now. Because the lowest level object I just prototyped has an attributes array

[23:07] <swarley> err, map

[23:09] <jnthn> swarley: Yeah, the only thing that's common to everything is the STable and an SC.

[23:09] *** jferrero joined
[23:09] *** cognominal left
[23:09] <swarley> Alright. I'm omiting the sc for now, just to get basic functionality

[23:09] <jnthn> *nod*

[23:09] <swarley> To make sure everything works conceptually

[23:12] <pmurias> jnthn: the .symtable attributes of blocks is no longer important?

[23:12] <swarley> See, a really cool thing about doing this with go is the ability of using goroutines

[23:12] <jnthn> pmurias: It's still used

[23:13] <swarley> This is from http://golang.org/doc/effective_go.html

[23:13] <jnthn> pmurias: And really it's just exposing something already there

[23:13] <swarley> They're called goroutines because the existing terms‚Äîthreads, coroutines, processes, and so on‚Äîconvey inaccurate connotations. A goroutine has a simple model: it is a function executing concurrently with other goroutines in the same address space. It is lightweight, costing little more than the allocation of stack space. And the stacks start small, so they are cheap, and grow by allocating (and freeing) heap storage as required. Goroutin

[23:13] <swarley> es are multiplexed onto multiple OS threads so if one should block, such as while waiting for I/O, others continue to run. Their design hides many of the complexities of thread creation and management.

[23:13] <swarley> Oh my, I'm sorry

[23:13] <swarley> I didn't mean to copy that second line

[23:14] *** arlinius left
[23:19] <pmurias> swarley: please don't paste stuff into the channel

[23:20] <swarley> Yes, I'm sorry. I only meant to paste the first sentence. I apologize

[23:21] *** swarley-freenode joined
[23:22] *** spider-mario left
[23:25] *** xilo_ joined
[23:29] * jnthn finally tracks down at least one of the strange things going on

[23:29] <jnthn> (with the serialization stuff)

[23:36] <[Coke]> general community note, inspired by diakopter in #parrot. - when we actually have parrot people on the line to talk to, it helps to actually talk about technology and code and bugs rather than he said/she said crap. It really doesn't help either project along.

[23:36] *** stevan__ left
[23:36] <[Coke]> I know this can be very frustrating, esp. if we feel we are on the receiving end.

[23:40] <sorear> also can we please talk about code rather than mental illnesses?

[23:42] *** stopbit left
[23:44] <swarley> Okay, I've definitely finished playing around with the spec structs I believe

[23:46] *** alec__ left
[23:49] <swarley-freenode> o-O

[23:49] *** alec__ joined
[23:51] <pmichaud> [Coke]: I agree; I was seriously considering invoking the "bring in the relationship managers" rule... except afaik diakopter wasn't really speaking for Rakudo

[23:52] <[Coke]> no, nothing official, I just knew it wasn't going to end well. :(

[23:54] <diakopter> I don't see how it didn't end well

[23:54] <diakopter> or proceed well, for that matter

[23:54] *** stevan_ joined
[23:55] <[Coke]> diakopter: really? did you get an answer to your question?

[23:55] <[Coke]> are you any closer to getting an answer to your question?

[23:55] <diakopter> [Coke]: all my questions were rhetorical.

[23:56] *** benabik joined
[23:56] <[Coke]> ok. The way you approached it was unhelpful. the fact that it happened over something you didn't expect an answer to makes it even more puzzling to me.

[23:57] <[Coke]> unhelpful - in this case not in the case that it didn't further your goal, since it seems you didn't have one there, but in that it helped to sour the relationship between the two projects.

[23:57] <diakopter> I disagree completely

[23:57] <diakopter> I see no relationship soured

[23:57] <[Coke]> You keep doing that.

[23:57] <[Coke]> I'm not sure it means what you think it means.

[23:58] <pmichaud> diakopter: if you're speaking on behalf of rakudo, then I'm not sure you get to decide if it helped or lessened the relationship.  :-)

[23:59] <diakopter> but .. I wasn't doing so

[23:59] <[Coke]> diakopter: so, what was your point in the conversation then, if not to get your technical question finally answered after 2 months?

