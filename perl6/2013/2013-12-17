[00:02] *** xenoterracide joined
[00:10] *** hummeleB1 joined
[00:14] <timotimo> i'm going to bed now. if you find any more typos, feel free to directly fix them

[00:16] <lue> .oO(Help, I'm trapped in a Parrot source code factory!)

[00:19] *** Ben_Goldberg joined
[00:20] *** btyler left
[00:20] *** BenGoldberg left
[00:26] <lue> I think the reason why I only got that "Error executing" message when using qx// is because nqp uses a separate but similar fork/child process for shell, while qx uses parrot's. Parrot's has the error message.

[00:35] <lue> From what I can tell, parrot's child process thing checks for the issue, while nqp (seemingly) doesn't.

[00:42] <lue> what troubles me is that the only commonality I can see is the use of the system child process-related functions :/

[00:46] *** beastd left
[00:48] <lue> (though parrot catches the error before using any of those functions, IIRC)

[00:50] *** ajr_ left
[00:59] * lue would like to know what Proc::Status.status means/does, if only someone spec'd the class.

[01:21] *** perigrin_ left
[01:21] *** colomon left
[01:27] *** raiph joined
[01:34] <lue> Ah, so something in the process (fork() perhaps?) is throwing an ENOMEM for me :/

[01:35] *** hummeleB1 left
[01:36] <lue> Which tells me this is a problem with my system rather than parrot or nqp or rakudo or panda. This should be fun :/

[01:36] * lue &

[01:37] *** colomon joined
[01:48] *** rurban1 joined
[02:03] *** tgt left
[02:15] *** rurban1 left
[02:15] *** jnap left
[02:17] *** raiph left
[02:33] *** perigrin joined
[02:46] *** raiph joined
[02:46] *** colomon left
[02:48] *** colomon joined
[02:57] *** obra_ is now known as obra

[03:03] <japhb> How can I refer to attributes of the outer class inside methods of an inner class, as in the following (broken) code?

[03:03] <japhb> r: class Foo { has %.items; my class Bar { method find-item($name) { %!items{$name} } }; method new-bar { $!items<baz> = "quux"; Bar.new() } }; Foo.new-bar.find-item("baz").say;

[03:03] <camelia> rakudo-parrot 413650: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/j380BLimoF‚ê§Attribute %!items not declared in class Bar‚ê§at /tmp/j380BLimoF:1‚ê§------> [32mod find-item($name) { %!items{$name} } }[33m‚èè[31m; method new-bar { $!items<baz> = "quux"[0m‚ê§ ‚Ä¶¬ª

[03:03] <camelia> ..rakudo-jvm 413650: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/9LH70N75Kv‚ê§Attribute %!items not declared in class Bar‚ê§at /tmp/9LH70N75Kv:1‚ê§------> [32mod find-item($name) { %!items{$name} } }[33m‚èè[31m; method new-bar { $!items<baz> = "quux"[0m‚ê§    ‚Ä¶¬ª

[03:16] <lue> r: class Foo { has %.items; my class Bar { method find-item($name) { PARENT::items{$name} } }; method new-bar { PARENT::items<baz> = "quux"; Bar.new() } }; Foo.new-bar.find-item("baz").say;

[03:16] <camelia> rakudo-parrot 413650, rakudo-jvm 413650: OUTPUT¬´quux‚ê§¬ª

[03:16] <japhb> lue, thanks!

[03:16] <lue> japhb: ^^^ Note that this is accessing the public Foo.items method.

[03:18] <japhb> lue: Understood.  Is there no way to do it using the actual attribute, rather than the accessor?

[03:18] <japhb> After all, the inner class is lexically inside the outer one ...

[03:18] <lue> japhb: %!PARENT:: didn't work, lemme try the alternate form after I find it...

[03:19] <lue> r: class Foo { has %.items; my class Bar { method find-item($name) { PARENT::<%!items>{$name} } }; method new-bar { PARENT::<%!items><baz> = "quux"; Bar.new() } }; Foo.new-bar.find-item("baz").say;

[03:19] <camelia> rakudo-parrot 413650, rakudo-jvm 413650: OUTPUT¬´quux‚ê§¬ª

[03:20] * lue gets the sense that %!PARENT::items not working is a bug

[03:20] *** MikeFair_ joined
[03:20] <lue> japhb: ^^^ yes you can, it seems

[03:21] <japhb> That PARENT::<%!items> syntax seems a tad syntax-abusey.  But what the hey, I'll take it.

[03:21] <lue> japhb: it's perfectly valid syntax :)

[03:22] <lue> r: my $::<#$$###!#> = 5; say $::{'#$$###!#'}

[03:22] <camelia> rakudo-parrot 413650: OUTPUT¬´===SORRY!===‚ê§QRPA: index out of bounds‚ê§¬ª

[03:22] <camelia> ..rakudo-jvm 413650: OUTPUT¬´===SORRY!===‚ê§VMArray: Index out of bounds‚ê§¬ª

[03:22] <lue> r: my $::<#$$###!#> = 5; say $::<#$$###!#>

[03:22] <camelia> rakudo-parrot 413650: OUTPUT¬´===SORRY!===‚ê§QRPA: index out of bounds‚ê§¬ª

[03:23] <camelia> ..rakudo-jvm 413650: OUTPUT¬´===SORRY!===‚ê§VMArray: Index out of bounds‚ê§¬ª

[03:23] <japhb> lue: I didn't mean it wasn't to spec, I meant that in this case a package naming like syntax is use to reach something that is in a different namespace dimension.

[03:23] <japhb> *is used

[03:24] <japhb> It feels just a little YTTCN

[03:24] <lue> PARENT is specifically designed to access the parent package.

[03:25] <lue> r: my $a = 5; { say $PARENT::a }

[03:25] <camelia> rakudo-parrot 413650, rakudo-jvm 413650: OUTPUT¬´(Any)‚ê§¬ª

[03:25] <lue> r: my $a = 5; package Foo { say $PARENT::a }

[03:25] <camelia> rakudo-parrot 413650, rakudo-jvm 413650: OUTPUT¬´(Any)‚ê§¬ª

[03:34] *** raiph left
[03:35] *** raiph joined
[03:38] *** hugme left
[03:39] *** hugme joined
[03:39] *** ChanServ sets mode: +v hugme

[03:40] *** BAMbanda joined
[03:40] <BAMbanda> I'm really confused. I started reading Modern Perl and now I find out that Perl 6 and 5 are two different languages, but compatible?

[03:41] <BAMbanda> where do I start to get acquainted with the culture, philosophy, and of course proficient with coding using Perl?

[03:42] <diakopter> BAMbanda: not really compatible

[03:42] <perigrin> "which perl"

[03:42] <perigrin> diakopter: they hang out and drink together.

[03:43] <diakopter> in a bathtub of koolaid

[03:43] <BAMbanda> dangg, that speaks volumes

[03:43] <BAMbanda> :)

[03:43] <diakopter> well

[03:43] *** cognominal__ left
[03:43] <perigrin> well ... koolaid was added to the liquids in teh bathtub ... let's just go with that.

[03:44] <perigrin> .oO(a Camel is really a harry buffalo?)

[03:44] <BAMbanda> hmm, so Perl6 is for the cool hipsters

[03:44] <BAMbanda> Perl5 is for the mature people settled in their ways?

[03:44] <diakopter> I'm not sure you'll find a generalization that simple.. it's really complex.

[03:44] *** cognominal joined
[03:44] <perigrin> hipsters are into retro man, they like the polyphonic sounds of perl5 ... the perl6 people are the cutting edge

[03:44] *** cognominal left
[03:45] <perigrin> edges so sharp ocassionally you may have to implement them ... 

[03:46] <BAMbanda> so we should reconcile with a healthy mix of koolaid and other bathtub fluid?

[03:46] *** cognominal joined
[03:46] *** cognominal left
[03:46] <BAMbanda> is perlmonks 5 only?

[03:46] <perigrin> no.

[03:46] <diakopter> mostly

[03:47] <perigrin> again it's not that simple :)

[03:47] <BAMbanda> damn you all

[03:47] <BAMbanda> :)

[03:47] * diakopter feels damned

[03:47] * perigrin feels all.

[03:47] *** cognominal joined
[03:47] *** cognominal left
[03:47] <BAMbanda> georg hegel needs to put his tidbit on this matter

[03:47] * diakopter is felt by perigrin

[03:48] *** cognominal joined
[03:48] <BAMbanda> are concepts descriped in "High Order Perl" available in p6?

[03:48] * perigrin felts diakopter 

[03:48] *** cognominal left
[03:49] <perigrin> yes

[03:49] <perigrin> mostly

[03:49] <BAMbanda> alright, rakudo it is. koolaid is always refreshing

[03:49] *** cognominal joined
[03:50] <diakopter> BAMbanda: yes, recursively. Also, iteratively.

[03:50] *** cognominal left
[03:50] <perigrin> and hopefully soon concurrently

[03:50] <BAMbanda> sweet, jvm sounds fun

[03:51] <BAMbanda> clojure and perl6, what beautiful shoes for the mind

[03:51] *** cognominal joined
[03:51] *** cognominal left
[03:52] *** cognominal joined
[03:52] *** cognominal left
[03:52] *** gtxcomm left
[03:53] *** gtxcomm joined
[03:53] *** cognominal joined
[03:54] *** cognominal left
[03:55] *** cognominal joined
[03:55] *** cognominal left
[03:56] *** cognominal joined
[03:56] *** cognominal left
[03:56] * lue wonders which ulimit settings to fiddle with to discern the cause of an ENOMEM

[03:58] *** cognominal joined
[03:58] *** cognominal left
[03:59] <lue> .oO(Or maybe I can replace forks with vforks...)

[03:59] *** cognominal joined
[03:59] <perigrin> or sporks.

[03:59] *** cognominal left
[04:00] *** cognominal joined
[04:00] *** cognominal left
[04:01] *** cognominal joined
[04:02] *** cognominal left
[04:02] *** rurban1 joined
[04:03] *** cognominal joined
[04:03] *** cognominal left
[04:03] *** preflex left
[04:03] *** preflex_ joined
[04:03] *** ChanServ sets mode: +v preflex_

[04:04] *** cognominal joined
[04:04] *** preflex_ is now known as preflex

[04:04] *** cognominal left
[04:07] *** cognominal joined
[04:07] *** cognominal left
[04:08] *** cognominal joined
[04:08] *** cognominal left
[04:09] *** grep0r left
[04:09] *** cognominal joined
[04:09] *** cognominal left
[04:11] *** cognominal joined
[04:11] *** cognominal left
[04:12] *** cognominal joined
[04:12] *** cognominal left
[04:13] *** cognominal joined
[04:13] *** cognominal left
[04:14] *** cognominal joined
[04:15] *** cognominal left
[04:16] *** cognominal joined
[04:16] *** cognominal left
[04:17] *** grep0r joined
[04:18] * lue dangerously replaces occurrences of fork with vfork without other changes...

[04:18] *** cognominal joined
[04:19] *** cognominal left
[04:20] *** cognominal joined
[04:20] *** cognominal left
[04:21] *** cognominal joined
[04:21] *** cognominal left
[04:22] *** cognominal joined
[04:22] *** cognominal left
[04:24] *** cognominal joined
[04:29] *** cognominal left
[04:56] *** perigrin left
[04:56] *** perigrin joined
[05:01] *** preflex_ joined
[05:01] *** ChanServ sets mode: +v preflex_

[05:02] *** preflex left
[05:02] *** preflex_ is now known as preflex

[05:05] *** xenoterracide left
[05:19] *** MikeFair_ left
[05:21] *** raiph left
[05:25] *** [Sno] left
[05:36] *** Ben_Goldberg left
[05:39] <lue> tadzik: on panda, I found the issue to be fork() in nqp and parrot sometimes failing with an ENOMEM. Sadly I've yet to find out why or how to fix it :(

[05:39] <lue> (tadzik: not helping is JSON/Tiny.pm all of a sudden demanding I precompile previous files :/ That's probably my fault though.)

[05:43] *** dayangkun left
[05:59] <lue> tadzik, jnthn, other interested parties: I apparently have panda's bootstrap working. AFAIK the only change left sitting around is changing the fork to vfork in nqp/src/vm/parrot/ops/nqp.ops and parrot/src/platform/generic/exec.c

[05:59] <lue> I'll test it out in more detail tomorrow, see if that's really what fixed it.

[06:04] *** rurban1 left
[06:07] *** geekosaur left
[06:07] *** flussence left
[06:07] *** geekosaur joined
[06:08] *** flussence joined
[06:08] <lue> to clarify, I'm talking about the forks in the non-WIN32 Run_OS_Command function in the NQP file and the Parrot_proc_exec function in the Parrot file.

[06:09] <BAMbanda> sorry for the newb question, how can i place my /install/bin into my $PATH variable?

[06:09] <BAMbanda> please don't redirect me to #ubuntu :(

[06:10] <BAMbanda> the perl6 REPL is beautiful, i just wanna start hacking

[06:10] <BAMbanda> or should i say, parrot REPL?

[06:14] <lue> BAMbanda: "export PATH=$PATH:new/path/to/search/bin" in my ~/.bashrc seems to do the trick. (then you have to either logout/login or IIRC type `source ~/.bashrc` in each terminal you want the changes to take hold.)

[06:17] <BAMbanda> lue, thanks

[06:17] *** hugme left
[06:18] *** hugme joined
[06:18] *** ChanServ sets mode: +v hugme

[06:19] *** fridim_ left
[06:22] <tadzik> lue: interesting. Did it use to be vfork and got changed a while ago?

[06:23] <lue> tadzik: no clue. I'll go find whatever git util lets me find out :)

[06:24] <tadzik> okay :)

[06:26] <lue> for parrot at least, the entire function has been in its current state since 2011, with just a couple of not-touching-fork changes a month later and also 2012.

[06:26] *** [Sno] joined
[06:27] *** dwarring_ joined
[06:29] <lue> tadzik: parrot's fork has been around since 2009 at least, I don't think a move from vfork caused it :) .

[06:31] <tadzik> weird

[06:32] <lue> nqp's use of fork is more recent (2013); though I suspect the function is heavily inspired by similar older functions in parrot.

[06:32] *** ivan`` left
[06:32] <lue> tadzik: I should note I'm not entirely sure that vfork was the solution. I had also cleared panda of any local changes before testing the vfork addition.

[06:33] <tadzik> oh, plenty of people have problems without having local changes

[06:33] <tadzik> and I have no idea what to do about it. Extreme tuit shortage may be one of the reasons

[06:34] <lue> (as a further note, IIRC shell() ends up in the NQP file, while qx// takes its merry time in Parrotland. (in fact, qx// uses nqp::open, which is mapped straight to parrot's function.))

[06:34] <lue> tadzik: I still want to be more scientific about it before being definitive though :)

[06:35] *** thou left
[06:36] <lue> I also want to make sure my perception that panda's mem usage dropped from 40% on fork to ‚âà17% on vfork is correct. I just don't feel like recompiling parrot and nqp and rakudo tonight :P

[06:37] *** ivan`` joined
[06:40] <lue> Even if vfork is what fixes it, I can't say for sure if it won't cause different issues. I was kinda worried that vfork wouldn't even work in those functions.

[06:41] <moritz_> \o

[06:41] *** moritz_ is now known as moritz

[06:41] *** rurban1 joined
[06:45] *** darutoko joined
[06:58] *** rurban1 left
[07:06] *** SamuraiJack_ joined
[07:06] *** benabik left
[07:12] *** kaleem joined
[07:16] *** SamuraiJack_ left
[07:19] *** SamuraiJack joined
[07:21] <timotimo> o/

[07:23] *** ssutch left
[07:24] *** geekosaur left
[07:34] *** Guest40081 is now known as ponbiki

[07:40] *** bbkr joined
[07:40] *** ribasushi left
[07:50] *** denisboyun joined
[07:53] <jnthn> morining/ #operl6

[07:53] <jnthn> *morning, *#perl6 :)

[07:54] <timotimo> mhh, new language? objective perlscal6?

[07:57] *** hugme left
[07:57] <moritz> objectivist Perl 6

[07:58] *** BAMbanda left
[07:59] *** hugme joined
[08:00] *** ChanServ sets mode: +v hugme

[08:03] *** FROGGS joined
[08:03] <tadzik> hugme: hug me

[08:03] * hugme hugs tadzik

[08:03] <tadzik> :)

[08:04] * moritz also hugs tadzik 

[08:06] <timotimo> tadzik (>^_^)>

[08:07] <tadzik> (:

[08:13] <tadzik> I usually don't like when people laugh at php on perl channels, but I just _have_ to show you this: http://news.php.net/php.internals/70691

[08:13] <tadzik> it's related because it's about compilers, sort of

[08:14] *** zakharyas joined
[08:14] * timotimo fails to have wordpress publish his article on his g+ profile :\

[08:14] <moritz> tadzik: :-)

[08:14] *** nnunley left
[08:16] *** dmol joined
[08:17] <timotimo> i think i could make a habit out of writing Perl¬†6 with a non-breaking space in the future :P

[08:17] <moritz> non-breaking habit!

[08:19] * timotimo is now going to spend the rest of the day obsessively checking the view count on his article

[08:19] *** pecastro left
[08:19] <timotimo> i noticed i forgot to mention what file of perl6/roast to put the test i suggested in. i hope my readers will regard that as a puzzle/challenge instead of a roadblock

[08:20] <moritz> they can just ask in here if they feel lost

[08:25] <tadzik> WOW 50% OFF FIRST COMMITS :)

[08:26] *** denisboyun left
[08:28] *** kivutar left
[08:33] <FROGGS> \o/

[08:36] <timotimo> \o/

[08:36] *** frettled_ is now known as frettled

[08:36] <timotimo> tadzik, hoelzro, you may get a kick out of "creeper worlds 3", which is on steam greenlight at the moment

[08:37] * tadzik looks

[08:37] <timotimo> it also appears to have its own scripting language, which looks a bit strange

[08:37] <tadzik> I don't see Linux as a supported platform

[08:38] <tadzik> roman_from_gladiator_showing_a_thumb_down.png

[08:38] <frettled> tadzik++ pretty cool link

[08:38] <tadzik> oh, at least they promise one

[08:40] <timotimo> yes, it's promised

[08:40] <tadzik> timotimo: did you see Race the Sun? It has like the best promotional video I've seen

[08:40] <tadzik> http://flippfly.com/racethesun/

[08:40] <tadzik> it's already steam-available too

[08:40] <timotimo> i played the demo on wine, which worked fine except if i maximized the window in which case the UI became super super sluggish

[08:42] <timotimo> haha, cute

[08:43] <timotimo> ah, cool, it has user-created content

[08:43] <timotimo> that is very good to have

[08:45] <timotimo> hm. i can't get it through the humble widget and unlock it on steam at the same time?

[08:46] <timotimo> and no official linux support on the steam page :\

[08:47] <tadzik> yeah

[08:47] <tadzik> according to them, they had a last-minute bug with the linux release on steam

[08:47] <tadzik> so they delayed it

[08:49] <moritz> timotimo++ # advent calendar post

[08:50] <timotimo> EVERY CUSTOMER GETS A STEAM KEY

[08:50] <tadzik> timotimo: waitwhat. Buying on the widget doesn't give you a steam key?

[08:51] <timotimo> i was wrong

[08:51] <timotimo> normally it says explicitly that you get a steam key from the widget, this one doesn't

[08:51] <tadzik> *relief*

[08:51] <timotimo> but their blog does say you do get it

[08:51] <timotimo> gog.com sells it for 5 dollars at the moment

[08:51] <timotimo> and you get a steam key as well

[08:51] <timotimo> hint hint :)

[08:51] <tadzik> from gog?

[08:52] <tadzik> that's news

[08:52] <timotimo> http://www.gog.com/game/race_the_sun

[08:52] <tadzik> "Now with 30 Day Money Back Guarantee"

[08:52] <tadzik> is that ever true, or: does anyone ever try? :)

[08:53] <timotimo> hehe.

[08:53] <tadzik> but really, steam key from gog?

[08:53] <timotimo> yes.

[08:53] <tadzik> also, I don't think gog gives you a linux version, does it?

[08:53] <timotimo> "every customer gets a steam key"

[08:53] <tadzik> where does it say that?

[08:53] <timotimo> one second

[08:54] <timotimo> http://flippfly.com/news/race-the-sun-coming-to-steam-december-9th/

[08:55] <timotimo> i shot them a tweet to find out if gog will get me access to the linux version as well

[08:55] <timotimo> or rather: buying it on gog

[08:56] <tadzik> yeah, if that's possible, I'd buy it right away

[08:56] <timotimo> well, it's 3am where they are located

[08:57] <timotimo> the question is, is that offer for race the sun limited to the next 5 hours?

[08:57] <timotimo> oh well. worst case: 30 day money back guarantee

[08:58] <tadzik> hehe, let's see if that works as advertised :)

[08:58] <timotimo> 7. GRAAAAH! I'm angry! Can I get my money back right away?

[08:58] <timotimo> We always aim to provide our users with working games, so first we'll try to get your purchase working on your system. If we can't get it working, we'll get your money back. No worries. :)

[08:59] <timotimo> but also: If your game doesn't work because you misread our system specs, all we can really offer is that we're sorry for you. :(

[09:00] <tadzik> yeah, gog doesn't list linux compatibility

[09:05] <timotimo> i'll shoot gog's support team a question

[09:07] <masak> mornin', #perl6

[09:08] <tadzik> hey hey masak 

[09:08] <masak> I just wanted to report a semi-visual autopun I saw.

[09:08] <diakopter> BL INK

[09:08] <timotimo> tadzik: let's start #perl6-gaming so we don't annoy non-gamers in here :P

[09:08] <tadzik> timotimo: yeah, maybe we should :)

[09:08] <masak> a t-shirt with "I ‚ô• REALISM". but the heart is a picture of an actual anatomical heart.

[09:20] <dwarring_> masak: thanks for the pandoc instructions

[09:24] <timotimo> wow. a pacemaker that gets inserted into any vein that autonomically finds its way to the heart and hooks up to it by itself

[09:25] <tadzik> I wonder how long until someone invents something that travels to the heart and explodes

[09:26] <timotimo> well, if you get the plans from that company, you can easily develop that, but what would be the point?

[09:26] <tadzik> kickstarter? :P

[09:26] <timotimo> if you can already put a catheter into a vein of someone

[09:26] <timotimo> ... yeah right

[09:26] <tadzik> kidding

[09:26] <tadzik> but yeah, that's pretty awesome

[09:27] <tadzik> it sounds like something from a sf/horror movie, hopefully the military is not into these sort of things these days

[09:28] <dwarring_> I'll tackle wordpress after some zzz's  -  https://gist.github.com/dwarring/7848868

[09:29] <dwarring_> will need to arrange access

[09:29] <moritz> dwarring_: /msg me your email address

[09:29] <moritz> dwarring_: and I'll send you an invitation

[09:31] <dwarring_> moritiz: did you get that

[09:31] <jnthn> Probably not if you send it to moritiz :P

[09:31] <moritz> invitation sent :-)

[09:31] <dwarring_> arrgh getting late

[09:32] <moritz> dwarring_: use tab completion for nicks :-)

[09:32] <timotimo> tadzik: i think the military has no reason to bother with artery-traveling devices if they can just let a bullet travel through the arteries by aiming roughly in the right direction and holding down the trigger for a few seconds

[09:32] <tadzik> I guess so

[09:33] <dwarring_> moritz++ 

[09:33] * dwarring_ got invite zzzzz&

[09:41] *** nnunley joined
[09:41] *** ribasushi joined
[09:44] <timotimo> i may do a lightning talk at the congress this year; but i don't know what about! :(

[09:45] <timotimo> at least i'll be reachable under the vanity number PRL6 through the internal GSM & DECT network :D

[09:45] *** nnunley left
[09:46] *** ribasushi left
[09:50] <arnsholt> timotimo: If we wrap up the ZMQ stuff, ipython and Perl 6 perhaps? =)

[09:50] *** perigrin left
[09:50] *** perigrin joined
[09:52] *** fhelmberger joined
[09:53] *** xinming left
[09:57] *** xinming joined
[09:58] <timotimo> arnsholt: you do realize the congress is in 1.5 weeks? ;)

[10:00] *** pecastro joined
[10:02] *** dakkar joined
[10:34] <timotimo> i'm not quite sure what exact commit caused the stage0 to not be appropriate any more

[10:36] <timotimo> i'm also surprised. i thought i had been able to build nqp-j recently

[10:36] <timotimo> but now i really can't

[10:37] <FROGGS> (git bisect)++

[10:38] <arnsholt> timotimo: Oh. That's a tad close, I agree =D

[11:03] *** xinming_ joined
[11:03] *** xinming left
[11:06] *** sqirrel joined
[11:07] *** kaare_ joined
[11:13] * timotimo is going to supply a java bootstrap based on newest nqp/master

[11:24] *** xinming_ left
[11:24] *** xinming joined
[11:25] *** rindolf joined
[11:29] *** xinming left
[11:30] *** xinming joined
[11:37] <timotimo> there we go

[11:38] <dalek> nqp: 468bd92 | (Timo Paulssen)++ | src/vm/jvm/stage0/ (10 files):

[11:38] <dalek> nqp: get a newer JVM bootstrap in place.

[11:38] <dalek> nqp: review: https://github.com/perl6/nqp/commit/468bd92c65

[11:38] <tadzik> doom dooom doom

[11:39] *** atroxaper joined
[11:51] *** kivutar joined
[12:05] *** rurban1 joined
[12:10] *** ribasushi joined
[12:11] *** fridim_ joined
[12:11] *** tgt joined
[12:20] *** atroxaper left
[12:21] *** atroxaper joined
[12:22] *** denis_boyun joined
[12:26] <FROGGS> perl -E 'my %h = b => 3; say scalar %h'

[12:26] <FROGGS> 1/8

[12:26] <FROGGS> wth is that?

[12:26] *** denis_boyun left
[12:27] <FROGGS> ahh, number of used slots of allocated slots

[12:27] <timotimo> FROGGS: "one out of 8 buclkets"

[12:27] <timotimo> yeah

[12:27] *** fridim_ left
[12:29] *** tgt left
[12:35] *** xinming left
[12:36] *** xinming joined
[12:39] *** ivanshmakov joined
[12:44] <hoelzro> afternoon 6ers

[12:44] <hoelzro> timotimo: that game looks pretty sweet

[12:44] <timotimo> hoelzro: visit us in #perl6-gaming :)

[12:47] *** cognominal joined
[12:57] *** kaleem left
[13:04] *** breinbaa1 left
[13:05] *** breinbaas joined
[13:07] *** geekosaur joined
[13:08] *** woosley left
[13:16] *** woosley joined
[13:21] *** denis_boyun joined
[13:24] *** hummeleB1 joined
[13:36] *** kivutar left
[13:41] *** rindolf left
[13:43] *** kivutar joined
[13:46] *** denis_boyun left
[13:48] *** rurban1 left
[13:50] *** raiph joined
[13:50] *** atroxaper left
[13:50] *** atroxaper joined
[13:51] *** lue left
[13:54] *** ajr joined
[13:54] *** ajr is now known as Guest43855

[13:54] *** Guest43855 is now known as ajr_

[13:55] *** rurban1 joined
[13:57] *** kivutar left
[13:57] *** xenoterracide joined
[14:05] *** lue joined
[14:11] *** kivutar joined
[14:16] *** eternaleye left
[14:16] *** PacoAir joined
[14:25] *** Bucciarati_ is now known as Bucciarati

[14:27] *** eternaleye joined
[14:33] *** kaleem joined
[14:34] *** denis_boyun joined
[14:35] *** raiph left
[14:36] *** araujo left
[14:36] *** araujo joined
[14:49] *** btyler joined
[14:51] *** prammer joined
[14:54] *** rurban1 left
[14:57] *** xinming left
[14:58] *** xinming joined
[15:02] *** nnunley joined
[15:04] *** jnap joined
[15:04] *** rindolf joined
[15:07] *** benabik joined
[15:08] *** xinming left
[15:09] *** xinming joined
[15:11] *** johnmilton joined
[15:16] *** thou joined
[15:17] *** johnmilton left
[15:18] *** johnmilton joined
[15:19] *** dmol left
[15:20] *** johnmilton left
[15:21] *** johnmilton joined
[15:21] *** dmol joined
[15:23] *** kaleem left
[15:25] *** bluescreen10 joined
[15:26] *** tgt joined
[15:28] *** [Sno] left
[15:30] *** sqirrel left
[15:33] *** zakharyas left
[15:34] *** woolfy left
[15:38] *** lizmat_ left
[15:39] *** eternaleye left
[15:50] *** kivutar left
[15:53] *** takadonet joined
[15:58] *** Psyche^_ joined
[16:02] *** Psyche^ left
[16:05] *** fhelmberger_ joined
[16:08] *** fhelmberger left
[16:10] *** fhelmberger_ left
[16:10] *** xinming_ joined
[16:11] *** thou left
[16:12] *** sqirrel joined
[16:12] * PerlJam builds rakudo-jvm for the first time in a long while

[16:13] <PerlJam> (heck it's been a while since I built any rakudo)

[16:13] *** xinming left
[16:23] *** jeffreykegler joined
[16:23] *** xinming_ left
[16:27] *** raiph joined
[16:29] *** benabik left
[16:30] *** xinming joined
[16:35] *** jdv79 joined
[16:35] <jdv79> is planetsix.perl.org experiencing difficulties?

[16:38] <timotimo> the difficulty of being taken down, i imagine

[16:41] *** FROGGS left
[16:41] *** estrabd_ left
[16:41] <moritz> jdv79: use http://planeteria.org/perl6/ instead

[16:42] <timotimo> oh cool, thanks!

[16:42] <jdv79> that's where i got redir'd and that also seems to suffer from some ailment

[16:43] <jdv79> time heals all wounds?

[16:43] <timotimo> huh, weird, it's down for me, too

[16:46] *** ajr_ left
[16:47] <jdv79> its at least dns related

[16:50] *** denis_boyun__ joined
[16:51] *** denis_boyun left
[16:58] *** ajr joined
[16:59] *** atroxaper left
[16:59] *** ajr is now known as Guest98543

[16:59] *** Guest98543 is now known as ajr_

[17:02] *** rurban1 joined
[17:05] *** SamuraiJack left
[17:11] *** denis_boyun__ left
[17:11] *** denis_boyun joined
[17:15] * japhb trips over newly-failing tests in p6-pb functionality that hasn't changed in weeks, gets the chilling thought that perhaps it's Rakudo that changed ... time for a deep debug session.  :-/

[17:17] <timotimo> japhb_: oh noes :(

[17:21] <japhb> exactly.

[17:22] <japhb> We'll see.  Could have been seemingly unrelated changes somewhere else, not sure yet.

[17:23] *** spider-mario joined
[17:27] <timotimo> oh man. i think in my dream you wrote something like "i have lots of cool stuff, but i won't commit it now" and i only just now realized that you didn't say that in reality

[17:27] <diakopter> yeah; he's so non-committal

[17:27] <timotimo> isn't that a weird thing to dream about? >_>

[17:28] *** rurban1 left
[17:32] *** pecastro left
[17:36] *** eternaleye joined
[17:36] *** [Sno] joined
[17:38] <japhb> .oO( noncommitphobic )

[17:38] *** rurban1 joined
[17:39] <japhb> .oO( commitmentphobe-phobic )

[17:40] <arnsholt> I get two failures in t/hll/06-sprintf.t for nqp-p. Is that a known failure?

[17:41] *** ajr_ left
[17:41] * moritz doesn't "make test" too often in nqp

[17:42] *** rurban1 left
[17:42] <arnsholt> As long as you don't make many changes to NQP either, that's OK =)

[17:42] <moritz> I don't :-)

[17:43] *** rurban1 joined
[17:44] <japhb> Grammar::Tracer running a non-trivial grammar against even a medium-sized file can take a while ...

[17:46] <jnthn> Well, sure...it intercpets every single method call on the grammar ojbect

[17:46] <japhb> Watching the red and green FAIL and MATCH markers scroll by in little sine waves is like watching holiday bunting

[17:47] <jnthn> Actually I suspect having to do the output is a bigger burden than the method intercept...

[17:47] *** rurban1 left
[17:47] <jnthn> Di you try with --optimize=off by the way?

[17:48] <jnthn> I *think* the regex optimizer landed recently...

[17:48] <jnthn> that's the only recent thing I can recall that'd affect parsing.

[17:48] <japhb> Oooh, I should do that.

[17:49] <japhb> Still fails.  Hmmm.

[17:49] <japhb> Meeting prep &

[17:50] <jnthn> timotimo will be relieved it's not that :P

[17:50] <arnsholt> jnthn: Do you get sprintf failures with NQP on Parrot?

[17:51] *** dwarring left
[17:53] *** dwarring_ left
[17:55] <jnthn> Dunno, not run those tests on Parrot for a long while

[17:56] <arnsholt> 'k

[17:58] <timotimo> jnthn: phew!

[17:58] <timotimo> imagine *my* relief :)

[17:58] <timotimo> i landed the new stage0 for jvm, jnthn

[17:59] <jnthn> timotimo: nice

[17:59] <timotimo> jvmnthn :3

[17:59] <jnthn> :P

[18:02] *** cooper left
[18:04] <timotimo> i wonder who'll grab the last two free slots and then christmas

[18:05] <jnthn> Not I... :)

[18:05] <jnthn> I'll be moslty offline from Sat 

[18:11] *** thou joined
[18:11] *** dakkar left
[18:12] *** rurban1 joined
[18:15] <jnthn> phew, my post is on the 19th, not tomorrow... :)

[18:19] <timotimo> i wonder if "what exactly is slow in rakudo" would be a good post. alas, i'm not nearly close enough to knowing enough to write a post on that :|

[18:21] *** sqirrel left
[18:31] *** btyler_ joined
[18:31] *** btyler left
[18:32] *** darutoko left
[18:40] *** rindolf left
[18:42] *** eternaleye left
[18:44] *** lizmat joined
[18:51] *** eternaleye joined
[18:52] *** pecastro joined
[18:54] <lizmat> good * from Cologne

[18:56] <lizmat> at the NR.pm meeting, the question came if Perl 6 has something like the "around" functionality in Moose

[18:56] <lizmat> I'm aware of Callable.wrap

[18:57] <lizmat> but somehow I miss how you would do this with roles in Perl 6

[19:01] <PerlJam> I don't think you would do it with roles.

[19:02] <lizmat> that's my thought also, but folks here seem wildly confused about this

[19:03] <PerlJam> you might ask stevan or someone more in-the-know, but I think that Moose roles + around is more of a misfeature because of the ordering issues that can arise during composition.

[19:04] *** eternaleye left
[19:04] <stevan_> yes, yes it is

[19:05] <lizmat> hehe, the ordering issues was exactly what people wanted me to tell here: how does Perl 6 solve the ordering issues

[19:06] <jnthn> I already did in one of my talks a demo of how to implement around style stuff in a module.

[19:06] <jnthn> That's where I think it belongs.

[19:06] <lizmat> jnthn: link ?

[19:06] <ribasushi> stevan_: what about "ze mopz" ?

[19:06] <ribasushi> stevan_: does it have it / does it plan to have it

[19:06] <jnthn> The wrap primitive and all the meta-programming support are in place to do it in pure Perl 6 :)

[19:07] <ribasushi> or will Moose implment it outside of the core mop >?

[19:07] *** eternaleye joined
[19:07] <jnthn> lizmat: In http://jnthn.net/papers/2012-gpw-meta-programming.pdf I think

[19:08] *** denis_boyun left
[19:08] <stevan_> ribasushi: there is no method modifiers in the mop

[19:09] <lizmat> thank you all for instant clarity about this

[19:09] <lizmat> :-)

[19:09] <lizmat> #perl6 is the best!

[19:10] <jnthn> Note that *any* method in Perl 6 can be an "around"; it just calls callsame or callwith... :)

[19:12] <ribasushi> jnthn: so... this raises the very same question then

[19:12] <ribasushi> jnthn: basically how does "diamond" role composition works in this case?

[19:13] <PerlJam> ribasushi: are yo asking who wins?

[19:13] <ribasushi> I mean obviously it is "whatever the author of the module did"

[19:13] <ribasushi> it's more about "what is the right thing to do"

[19:13] <ribasushi> academically

[19:14] <ribasushi> DFS, C3-like, customizeable, exception...?

[19:15] <jnthn> Ambiguity = exception.

[19:15] <PerlJam> jnthn++ very succinct.

[19:15] <jnthn> The *entire point* of roles is to not do MRO-based resolution.

[19:15] <moritz> we even have a passing test for that :-)

[19:15] <jnthn> Well, an entire point... :)

[19:16] <moritz> t/spec/S12-class/mro.t

[19:20] *** FROGGS joined
[19:21] *** skids joined
[19:22] <dalek> roast: 0fed404 | moritz++ | S12-class/mro.t:

[19:22] <dalek> roast: simplify MRO test a bit

[19:22] <dalek> roast: review: https://github.com/perl6/roast/commit/0fed404b47

[19:22] <skids> r: multi sub a(:$i where { $_ > 0 } = 1) { $i.say }; a(:i(2)); a();

[19:22] <camelia> rakudo-jvm 413650: OUTPUT¬´Cannot modify an immutable value‚ê§‚ê§¬ª

[19:22] <camelia> ..rakudo-parrot 413650: OUTPUT¬´Cannot modify an immutable value‚ê§  in sub a at /tmp/RQAmDGX7yW:1‚ê§  in any  at gen/parrot/BOOTSTRAP.nqp:1075‚ê§  in any  at gen/parrot/BOOTSTRAP.nqp:1066‚ê§  in any  at gen/parrot/BOOTSTRAP.nqp:1052‚ê§  in sub a at /tmp/RQAmDGX7yW:1‚ê§  in block  at /‚Ä¶¬ª

[19:23] *** jeffreykegler_ joined
[19:23] *** dwarring joined
[19:23] <skids> r: role A [ :$i where { $_ > 0 } = 1 ] { $i.say }; class B does A[ :i(2) ] { }; B.new();

[19:23] *** jeffreykegler left
[19:23] <camelia> rakudo-parrot 413650, rakudo-jvm 413650: OUTPUT¬´===SORRY!===‚ê§None of the parametric role variants for 'A' matched the arguments supplied.‚ê§Cannot modify an immutable value‚ê§¬ª

[19:24] <moritz> seems that named and constraints don't mix in rakudo

[19:24] <moritz> n: multi sub a(:$i where { $_ > 0 } = 1) { $i.say }; a(:i(2));

[19:24] <camelia> niecza v24-108-g17d73e4: OUTPUT¬´(timeout)[auto-compiling setting]‚ê§¬ª

[19:25] <skids> Was working before. This I found making sure Sum module worked with new star.

[19:25] <skids> (which it doesn't, sigh)

[19:25] <jnthn> r: multi sub a(:$i = 1 where { $_ > 0 }) { $i.say }; a(:i(2));

[19:25] <camelia> rakudo-jvm 413650: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Yxk8W13kpx‚ê§Missing block‚ê§at /tmp/Yxk8W13kpx:1‚ê§------> [32mmulti sub a(:$i = 1 [33m‚èè[31mwhere { $_ > 0 }) { $i.say }; a(:i(2));[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        infix‚Ä¶¬ª

[19:25] <camelia> ..rakudo-parrot 413650: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/_J7zTqrteg‚ê§Missing block‚ê§at /tmp/_J7zTqrteg:1‚ê§------> [32mmulti sub a(:$i = 1 [33m‚èè[31mwhere { $_ > 0 }) { $i.say }; a(:i(2));[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        in‚Ä¶¬ª

[19:26] <jnthn> r: multi sub a(:$i where { $_ > 0 }) { $i.say }; a(:i(2));

[19:26] <camelia> rakudo-parrot 413650, rakudo-jvm 413650: OUTPUT¬´2‚ê§¬ª

[19:26] <jnthn> It's something to do with the default

[19:26] <skids> yep.

[19:26] <FROGGS> star: multi sub a(:$i where { $_ > 0 } = 1) { $i.say }; a(:i(2)); a();

[19:26] <camelia> star 2013-09: OUTPUT¬´Cannot modify an immutable value‚ê§  in sub a at /tmp/jw8VCu6Vcl:1‚ê§  in sub a at /tmp/jw8VCu6Vcl:1‚ê§  in block  at /tmp/jw8VCu6Vcl:1‚ê§‚ê§¬ª

[19:26] <jnthn> r: multi sub a(:$i where $i = 1) { $i.say }; a(:i(2));

[19:26] <camelia> rakudo-jvm 413650: OUTPUT¬´Cannot assign to a readonly variable or a value‚ê§‚ê§¬ª

[19:26] <camelia> ..rakudo-parrot 413650: OUTPUT¬´Cannot assign to a readonly variable or a value‚ê§  in sub a at /tmp/7ySvzdPvu5:1‚ê§  in any  at gen/parrot/BOOTSTRAP.nqp:1075‚ê§  in any  at gen/parrot/BOOTSTRAP.nqp:1066‚ê§  in any  at gen/parrot/BOOTSTRAP.nqp:1052‚ê§  in sub a at /tmp/7ySvzdPvu5:1‚ê§ ‚Ä¶¬ª

[19:27] <jnthn> I *think* it's actually parsing the = as an assignment operator as part of the where clause...

[19:27] <moritz> n: multi sub a(:$i where { $_ > 0 } = 1) { $i.say }; a(:i(2));

[19:28] <camelia> niecza v24-108-g17d73e4: OUTPUT¬´Unhandled exception: Writing to readonly scalar‚ê§  at /tmp/Il2QCmmfiU line 0 (ANON @ 1) ‚ê§  at <unknown> line 0 (ExitRunloop @ 0) ‚ê§  at /tmp/Il2QCmmfiU line 0 (a @ 1) ‚ê§  at <unknown> line 0 (ExitRunloop @ 0) ‚ê§  at <unknown> line 0 (&a @ 0) ‚ê§‚Ä¶¬ª

[19:28] <jnthn> Looks liek it's not the only one :)

[19:28] <jnthn> Which may well mean that STD is doing it too...

[19:28] <FROGGS> yeah, that kinda proves that the parser is faulty

[19:28] <jnthn> Well, or at least surprising :)

[19:29] <jnthn> But yeah, we may want to tweak the preclimit there.

[19:29] <skids> is there an "is" for initializers?

[19:29] *** Alina-malina left
[19:29] <skids> (as a workaround)

[19:30] <jnthn> No; best workaround is probably to declare a named subset type.

[19:30] <PerlJam> I thought we had an "is default(...)" or something.

[19:30] <FROGGS> PerlJam: not there

[19:30] <FROGGS>  is default(42)r: multi sub a(:$i is default(42) where $i) { $i.say }; a(:i(2));

[19:30] <FROGGS> r: multi sub a(:$i is default(42) where $i) { $i.say }; a(:i(2));

[19:30] <camelia> rakudo-jvm 413650: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Iw9ITmF6kg‚ê§Can't use unknown trait 'is default' in a parameter declaration.‚ê§at /tmp/Iw9ITmF6kg:1‚ê§------> ‚ê§    expecting any of:‚ê§        rw‚ê§        readonly‚ê§        copy‚ê§        requir‚Ä¶¬ª

[19:30] <camelia> ..rakudo-parrot 413650: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/anIa4hcY5z‚ê§Can't use unknown trait 'is default' in a parameter declaration.‚ê§at /tmp/anIa4hcY5z:1‚ê§------> ‚ê§    expecting any of:‚ê§        rw‚ê§        readonly‚ê§        copy‚ê§        req‚Ä¶¬ª

[19:31] <skids> thx.

[19:32] *** takadonet left
[19:37] *** jeffreykegler_ left
[19:38] <skids> Heh.  Works with a newline after the where.

[19:38] *** estrabd joined
[19:39] <lizmat> hmmm... do we have any tests for MAIN ?

[19:40] <lizmat> doesn't seem like it

[19:40] *** jeffreykegler_ joined
[19:40] <lizmat> duh, user error  :-(

[19:41] <PerlJam> lizmat: We don't have any tests for those ;)

[19:43] * jnthn shoves some tests between keyboard and chair

[19:43] *** Rotwang joined
[19:45] *** raiph left
[19:47] *** jeffreykegler_ left
[19:47] *** jeffreykegler_ joined
[19:47] *** kivutar joined
[19:49] <lue> hello world o/

[19:50] *** Alina-malina joined
[19:56] *** tgt left
[19:56] *** tgt joined
[19:57] <masak> lue! \o/

[19:57] *** denis_boyun joined
[19:59] *** fhelmberger joined
[19:59] *** rurban1 left
[20:00] *** tgt left
[20:02] *** woolfy joined
[20:03] *** zakharyas joined
[20:04] *** jeffreykegler__ joined
[20:04] *** jnap1 joined
[20:05] *** jeffreykegler_ left
[20:05] *** jnap left
[20:06] <lue> tadzik: so you know, I'm currently in the process of testing fork vs. vfork . (Most of the testing is going to be recompiling everything :/)

[20:06] *** rurban1 joined
[20:07] *** fhelmberger left
[20:09] *** xenoterracide left
[20:09] *** xenoterracide joined
[20:09] <timotimo> weird. ohloh found my contributions to ufo and druid and rakudo star and moarvm, but not to rakudo and nqp

[20:09] <jdv79> planeteria works now

[20:09] <timotimo> cool, thanks

[20:12] *** jeffreykegler__ left
[20:17] *** jeffreykegler joined
[20:20] <woolfy> lizmat and ribasushi and Sno are totally absorbing the Niederrhein Perl Mongers meeting in Cologne with a discussion about parameter passing in Perl 6. 

[20:20] <dalek> rakudo/moar-support: aa9592d | (Tobias Leich)++ | src/core/terms.pm:

[20:20] <dalek> rakudo/moar-support: provide S*OS and $*OSVER

[20:20] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/aa9592dd17

[20:21] <FROGGS> Btw, one must reconfigure more for this ---^

[20:21] <woolfy> Lots of Perl 6 code flashes over the beamer towards the big screen.  Fiery words.

[20:21] <woolfy> Way over my head.

[20:21] <timotimo> heh

[20:22] *** jeffreykegler left
[20:22] <woolfy> Somebody mentions "poost".  Parameter passing in Perl 6 should be more like it happened in poost.  I am very confused about the whole discussion.

[20:22] <lizmat> Boost

[20:23] <PerlJam> woolfy: are you sure they aren't just making stuff up?  ;)

[20:23] *** rurban1 left
[20:23] <timotimo> hahaha :)

[20:23] <FROGGS> maybe someone just said *prost* :o)

[20:23] <woolfy> Eh no, I never make things up

[20:23] <lizmat> there appears to be a C++ library called Boost

[20:24] <lizmat> and someone here suggested porting it to Perl 6 calling it Poost

[20:24] <timotimo> yeah, it's a big collection of libraries actually

[20:24] <woolfy> Oh we are doing proost as well.  I brought a bottle of wine from the city of Perl, a bottle of Belgian beer (Leffe Royal), liquorice liquor (Salmiakki), and some more stuff.  We did proost.

[20:24] <lizmat> Poo++ ?

[20:24] <woolfy> Dump your Poo in the potty.  Potty++

[20:25] <ribasushi> and if it smells right - Poo#

[20:25] <FROGGS> http://www.boost.org/doc/libs/1_37_0/libs/parameter/doc/html/index.html#named-function-parameters

[20:25] <lue> .oO(It should really be called Boost6, and hope the original Boost doesn't get to v6)

[20:25] <FROGGS> that does look very ugly

[20:25] <ribasushi> lue: that's ok they can always go to Boost7

[20:25] <PerlJam> lue: boosix?  bix?

[20:26] <ribasushi> b00bsix

[20:26] <FROGGS> hehe

[20:26] <FROGGS> ribas00shi++

[20:26] <lue> maybe we could call it not-so-much-of-a-boost-round-these-parts :)

[20:26] <woolfy> Oh oh, it is getting poornographic here

[20:26] <skids> eww that is ugly.  I bet the underscore is mandatory too.

[20:26] <[Sno]> http://www.boost.org/doc/libs/1_55_0/doc/html/program_options.html

[20:27] <FROGGS> skids: yes, I fear so

[20:27] <FROGGS> like foo_ is a named

[20:27] <FROGGS> >.<

[20:27] <FROGGS> good that we have Larry++

[20:28] <lue> The Boost6 parameter library: the functionality already exists in Perl 6.    ‚Üê /me hopes that's most of Boost's libraries when ported to Perl 6 :D

[20:28] <skids> would be funny if it ended up being like a 10 line slang to implement.

[20:29] <woolfy> Comment from another attendee: this looks like Perl-code from 15 years ago.

[20:29] <[Sno]> where does that stuff is in perl6?

[20:29] * lue assumes "this" equals "Boost code" :)

[20:29] <[Sno]> MAIN() isn't

[20:29] <woolfy> Ah, we are just teasing you, you big baby!

[20:29] <FROGGS> woolfy: that sounds about right

[20:31] <FROGGS> [Sno]: what is wrong with MAIN() ?

[20:31] <woolfy> OK, back to Perl 6, y'all!  Nothing to see here, move on, move on...

[20:31] <FROGGS> :o)

[20:31] <lizmat> given this MAIN: multi MAIN ( *@p, *%n ) { say "positional = @p, named = {%n.perl}" }

[20:31] <FROGGS> I'm spec testing, so I have a few minutes to talk :o)

[20:32] <timotimo> lizmat: @p[]

[20:32] <FROGGS> true

[20:32] <FROGGS> or {@p} to be consistent

[20:32] <lizmat> given this MAIN: multi MAIN ( *@p, *%n ) { say "positional = {@p}, named = {%n.perl}" }

[20:33] <lizmat> should there be a difference between "--x foo" and "foo --x" ? 

[20:33] <[Sno]> FROGGS: why it's meant being wong when multi MAIN() isn't equivalent to po::parse_options()

[20:34] <lizmat> foo --x

[20:34] <lizmat> positional = foo --x, named = ().hash

[20:34] <lizmat> --x foo

[20:34] <lizmat> positional = foo, named = ("x" => Bool::True).hash

[20:35] <lizmat> this feels wrong to me

[20:35] <FROGGS> [Sno]: I didn't say that, I just said that boost is ugly... might be fine enough for C though

[20:35] <timotimo> yeah, the analysis code can't tell if x is supposed to be a Str or Bool flag

[20:35] <lue> lizmat: depends on the application (`eix` is one such "order matters" program), though I personally don't think order should matter by default.

[20:35] <[Sno]> FROGGS: the code meant not be beautify in your eyes - that's never been the question

[20:36] <[Sno]> the question was whether there're comparable features in p6

[20:36] <FROGGS> lizmat: yes, feels wrong-ish

[20:37] <FROGGS> [Sno]: I can't tell that quickly

[20:37] <[Sno]> FROGGS: I discussed that with lizmat here at nr.pm

[20:38] <[Sno]> I think Liz can meanwhile tell :)

[20:38] <lizmat> from what I know of Boost (now) and MAIN, there is no match

[20:38] <FROGGS> [Sno]: but I know how powerful P6's signatures are, so I doubt these miss anything

[20:38] <lizmat> it's all possible, to make, I would think

[20:38] <[Sno]> FROGGS: that's not the question, either ;)

[20:38] <lue> from quickly glancing at the Boost link provided, I'd say they're comparable. Doesn't mean the comparison shows mostly-similar designs :)

[20:38] <lizmat> burt it doesn't match MAIN's specced or implemented capabilities

[20:38] <lizmat> *but

[20:40] <lue> lizmat: Perl 6's main requiring named parameters first feels like an unnecessary restriction in syntax. There're many times where putting the option after the positionals makes frequently editing that option easier.

[20:42] <lizmat> indeed my point, I don't think there should be difference

[20:44] <skids> There are a good many CLI that use --flags as adverbs on a subsequent ordered argument then use them again on the next.  e.g. imagemagick.  Not that that's good design. 

[20:45] <lue> skids: yeah, like the `eix` I mentioned. But IMO that tends to be something you know you're doing, not something done by default.

[20:46] <lue> (also, Perl 6 doesn't follow the "positioning of nameds matter" rule; it just ignores the misplaced ones.)

[20:47] *** eternaleye left
[20:48] * skids being informed he should hit the road before more snow falls.

[20:48] <segomos_> appropriate name is appropriate

[20:52] *** zakharyas left
[20:53] *** skids left
[20:53] <jnthn> segomos_++ # best thing I read today

[20:54] *** eternaleye joined
[20:58] <masak> :)

[21:04] *** denis_boyun__ joined
[21:05] *** denis_boyun left
[21:05] *** dmol left
[21:06] *** dmol joined
[21:07] <lue> tadzik: I... I don't know. Somehow last night I got it working again, because using parrot/nqp/rakudo with fork() works now. This issue is a lot more evil than a simple switch between fork and vfork.

[21:07] <timotimo> wow, we can fork parrot?

[21:07] <timotimo> and it doesn't explode horribly?

[21:08] <timotimo> fork is scary to me.

[21:09] <lue> timotimo: a fork happens in parrot code every time you qx// . A fork in NQP every time you shell() .

[21:09] <timotimo> ah, of course

[21:09] *** raiph joined
[21:11] <lue> switching them to vfork last night seemed to fix the problem, but apparently it actually didn't. So I have panda now (yay! \o/) but no idea what causes those random build failures.

[21:12] <FROGGS> lue: see? that is _exactly_ what happened to me

[21:13] <FROGGS> I guess some force wiped our memory after we found out that *they* are to blame...

[21:13] * FROGGS .oO( &$/¬ß=%)&% )

[21:14] <FROGGS> hi, what's up?

[21:15] <lue> .oO(curse you, non-deterministic failures!)

[21:18] *** dmol1 joined
[21:20] *** dmol left
[21:21] <lue> FROGGS: it's *so* weird, that's about all i know at this point :) .

[21:21] <FROGGS> true

[21:22] <tadzik> lue: yeah, that's what I've found :/ it's a heisenbug

[21:23] <dalek> rakudo/moar-support: 48a2a1e | jnthn++ | tools/build/Makefile-Moar.in:

[21:23] <dalek> rakudo/moar-support: Don't run t/00-parrot on Rakudo on Moar.

[21:23] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/48a2a1e6c2

[21:24] <lue> tadzik: I still suspect it's a system issue, considering I was getting ENOMEMs out of it. Which tells me that sometimes your computer just doesn't feel like being helpful :/

[21:24] *** kaare_ left
[21:24] <tadzik> seems that it happens for everybody's computers

[21:25] *** ajr joined
[21:26] *** ajr is now known as Guest39393

[21:26] *** Guest39393 is now known as ajr_

[21:28] *** xenoterracide left
[21:30] <lue> tadzik: yeah, and unless there's a C-level way to do a better fork, I don't see a solution :/ (I see only a sort of "try again if it failed, up to X times" deal atm)

[21:30] *** kolmurm joined
[21:32] * lue finally has Pod::To::HTML, after all this time :)

[21:34] *** xenoterracide joined
[21:36] *** tgt joined
[21:38] *** kolmurm left
[21:38] <lue> tadzik: would it be on the Pod parser or the Pod::To::HTML module to *not* cut off the leading spaces on implicit code blocks?

[21:41] *** tgt left
[21:43] <tadzik> I think it's specced to do that

[21:43] <tadzik> so, the former

[21:44] *** dmol1 left
[21:45] <lue> tadzik: the POD parser preserves that space, which I think looks better. S26 demonstrates the difference between explicit code blocks and implicit ones. (The implicit ones are the code blocks that are horribly aligned with normal text ‚ò∫)

[21:45] *** dmol joined
[21:45] <tadzik> lue: by POD you mean Perl 5 POD, right?

[21:45] *** denis_boyun joined
[21:45] <lue> Yes. P6's is Pod or Pod6 in my spelling :)

[21:46] <tadzik> right

[21:46] <tadzik> well, in that case implicit blocks are parsed differently than explicit ones, I'm not sure I like that

[21:46] *** denis_boyun__ left
[21:46] <lue> (That space removal thing also broke the WHY/WHEREFORE diagram in S26, though that feels more "classical bug" than "design issue")

[21:47] <raiph> http://perl6advent.wordpress.com/2013/12/14/asynchronous-programming-promises-and-channels/#comment-3478 # commenter asks what does "winner" mean? does "await" mean the opposite of its meaning in C#?

[21:47] *** dmol left
[21:48] *** thou left
[21:49] *** dmol joined
[21:49] <masak> 'night, #perl6

[21:49] <tadzik> good knight masak

[21:49] <lue> tadzik: I would go for "use CSS to create that pleasing left-side space", but the HTML output makes no distinction between explicit and implicit code blocks, so you'd end up adding too much LHS space to the explicit blocks.

[21:49] <lue> ‚ôû masak o/

[21:50] <tadzik> lue: yup

[21:50] *** tgt joined
[21:50] <tadzik> that's another reason why I don't really like it :)

[21:50] <tadzik> it'll result in renderers trying to guess what the longest leading space is, bleh

[21:50] *** colomon left
[21:51] *** colomon joined
[21:52] *** FROGGS left
[21:52] *** denis_boyun__ joined
[21:53] <lue> I personally think "indented code blocks" is a fair assumption to make on how most people want blocks of code to be output. (i.e. preserve those extra spaces from the normal text's left margin rightward)

[21:53] *** denis_boyun left
[21:53] *** Khisanth left
[21:54] <tadzik> but I think they'll also assume the explicit code blocks to be indented in the same way

[21:55] <lue> tadzik: all they have to do is not indent the =begin code line :)

[21:55] *** eternaleye left
[21:55] *** dmol left
[21:56] *** dmol joined
[21:56] <lue> I see this more as a special-handling of implicit code blocks issue, than a "make both kinds of code blocks consistent" issue.

[21:57] <lue> The other solution is for renderers to make distinctions between the kinds of blocks for formatting purposes, e.g. <pre style="implicit"> and <pre style="explicit">

[21:57] <tadzik> special handling is what I'd rather avoid

[21:58] <tadzik> this assumes that the resulting AST remembers what kind of blocks they were

[21:58] <lue> Some would say the parsing text differently based on how much space is in front is already special handling :)

[21:59] *** eternaleye joined
[22:00] *** denis_boyun joined
[22:00] *** nnunley left
[22:00] <lue> I'd say that implicit v. explicit is special enough to warrant some extra info in the AST. So long as the grammar parses their contents differently, at least.

[22:00] *** denis_boyun__ left
[22:00] *** woolfy left
[22:01] <lizmat> decommute&

[22:02] *** bibifuc left
[22:02] *** lizmat left
[22:02] *** BenGoldberg joined
[22:05] <lue> I should file a rakudobug on that WHY/WHEREFORE diagram though. From the HTML source it seems that it just interpreted the diagram as a series of consecutive implicit code blocks :) . (Seeing a new code block whenever the next line's indentation was less than the codeblock's set indentation)

[22:07] *** spider-mario left
[22:08] *** Khisanth joined
[22:09] <dwarring> here's my day 18 advent draft - https://perl6advent.wordpress.com/?p=2129&preview=true

[22:09] <dwarring> all being good, I'll publish in a couple of hours

[22:11] *** [Sno] left
[22:16] *** rurban1 joined
[22:20] *** eternaleye left
[22:20] *** FROGGS joined
[22:21] <lue> dwarring: some general points: the whole post is formatted as a blockquote (if you go into source mode there'll likely be a <quote> or something at the top), and double-check your code to make sure all the <rule> stuff isn't missing.

[22:21] <lue> (those angle brackets tend to get eaten by wordpress.)

[22:22] <FROGGS> &lt; is your friend

[22:23] <dwarring> lue: been there with the angle brackets!

[22:23] <lue> dwarring: "The deal contains of one" should be s/contains/consists/, and "please consider using on or more" on should be one :)

[22:24] <lue> That's all I noticed (think there was one more nitpick but can't find it back). dwarring++ for the post :)

[22:25] <lue> (I only noticed the missing angle brackets in the first code block, with the grammar.)

[22:25] *** ssutch joined
[22:25] <dwarring> aarrgh that would make for any interesting post

[22:26] <dwarring> lue++ FROGGS++

[22:30] *** hummeleB1 left
[22:33] *** cooper joined
[22:33] *** cooper left
[22:33] *** cooper joined
[22:35] *** rurban1 left
[22:36] <FROGGS> dwarring: how does it deal with duplicates in the first grammar?

[22:41] <dwarring> The first grammar is'n t checking for duplicates

[22:42] <dwarring> that doesn't start until actions or assetions are added

[22:42] <dwarring> i'll see if I can make that clearer

[22:43] <FROGGS> just this sentence is weird in this regard: As expected, the first cut of the grammar cheerily parses hands and deals with duplicate cards.

[22:43] <FROGGS> I'd just strip the " and deals with duplicate cards"

[22:44] *** fridim_ joined
[22:46] <dwarring> FROGGS: yeah that's wrong and confusing

[22:46] <FROGGS> and the "s" from "Disallowing Duplicates" is not bold :P

[22:52] <timotimo> now there's &lt; and &gt; inside the <pre> that show up as such

[22:53] *** jdv79 left
[22:53] <lue> Wp is kind of a moron when it comes to angle brackets :) .

[22:53] *** bluescreen10 left
[22:54] *** bbkr left
[22:57] *** [Sno] joined
[22:59] *** Rotwang left
[22:59] *** [Sno] left
[23:00] *** johnmilton left
[23:01] *** FROGGS left
[23:01] *** FROGGS joined
[23:01] *** xinming_ joined
[23:03] *** [Sno] joined
[23:03] <dwarring> timotimo: whoops, fixed

[23:04] *** xinming left
[23:05] *** dmol left
[23:06] *** dmol joined
[23:06] <timotimo> i'd call them "callees" rather than "descendants" for the dynamic variable thing

[23:07] <timotimo> and there's ‚Äô%#‚Äô but then there's '%' and '*' right after that

[23:07] <timotimo> probably "intelligent quotes" from the wysiwyg editor or something

[23:08] <timotimo> 'hey there's an extra ...' looks unpleasant, what with starting with ' and having a ' in between

[23:08] *** rurban1 joined
[23:09] *** dmol left
[23:09] <timotimo> and i'd also briefly mention the :i and .lc, just in passing

[23:10] *** dmol joined
[23:10] <timotimo> you could mention what exactly causes trouble with your code assertion when backtracking and how you can deal with it

[23:10] <timotimo> (normally, i'd say deal with it with a cascade of dynamic variables that copy their outer data, but that doesn't work in this case, because the data has to travel sideways, rather than downwards; you could, however, let the hand call down to hand again and thus have a stack to work with. doesn't seem very good for this exact case, though)

[23:11] <timotimo> it's a good post, thanks dwarring :)

[23:13] <timotimo> bedtime :)

[23:13] <dwarring> timotimo++ thanks gnite

[23:14] *** xinming_ left
[23:15] *** FROGGS left
[23:15] *** colomon left
[23:16] *** xinming joined
[23:21] *** rurban1 left
[23:27] *** colomon joined
[23:31] <dalek> specs: 2b0ef1b | lue++ | S15-unicode.pod:

[23:31] <dalek> specs: [S15] Clarify values the uniprops hash can contain

[23:31] <dalek> specs: 

[23:31] <dalek> specs: Based off the value types defined in UAX#44, ¬ß5.2, the mapping is now

[23:31] <dalek> specs: thus:

[23:31] <dalek> specs: 

[23:31] <dalek> specs:     B ‚Üí Bool

[23:31] <dalek> specs:     N ‚Üí Rat

[23:31] <dalek> specs:     C, E, S, M ‚Üí Str

[23:31] <dalek> specs: 

[23:31] <dalek> specs: Though perhaps the 'E'numeration types could actually be Enums, if the

[23:31] <dalek> specs: benefits of codifying them as enumerations is worth it.

[23:31] <dalek> specs: review: https://github.com/perl6/specs/commit/2b0ef1ba11

[23:31] <dalek> specs: 51a72a0 | lue++ | S15-unicode.pod:

[23:31] <dalek> specs: [S15] Modify "Final Considerations" on mismatching in operators.

[23:31] <dalek> specs: 

[23:31] <dalek> specs: Essentially, NFC ~ NFD -> Uni, instead of the previous "causes an error"

[23:31] <dalek> specs: definition. Note that detailing various operators and functions still

[23:31] <dalek> specs: needs doing.

[23:31] <dalek> specs: review: https://github.com/perl6/specs/commit/51a72a0ac7

[23:39] *** FROGGS joined
[23:47] *** colomon left
[23:47] *** woolfy joined
[23:48] *** grep0r left
[23:53] *** colomon joined
[23:55] *** grep0r joined
[23:58] *** denis_boyun left
