[00:06] *** woosley joined
[00:06] <cognominal__> .u 00a0

[00:06] <yoleaux> U+00A0 NO-BREAK SPACE [Zs] ( )

[00:08] <sorear> [Coke]: my @lines := 'wtf.pl'.IO.lines  ?

[00:09] <sorear> I think that's specced to be lazy.  might not be implemented, also, might interact weirdly with sink context

[00:10] <sorear> to answer your first question, while $data-file.get -> $line { take $line } or while defined my $line = $data-file.get { take $line }

[00:19] <[Coke]> sorear: danke. it seems lazy enough. now to rewrite my stupid script to work lazily.

[00:19] <[Coke]> I wouldn't have to write more elegant code if rakudo was faster. :)

[00:26] *** tgt joined
[00:40] *** tgt left
[00:43] *** PacoAir joined
[00:48] *** berekuk left
[00:58] *** risou is now known as risou_awy

[01:00] *** splitcells left
[01:20] *** PacoAir left
[01:41] *** imIKARi joined
[01:41] <sorear> my @lines = { $data-file.get } ...^ !*.defined maybe

[01:42] *** FROGGS_ joined
[01:44] *** woosley left
[01:45] *** woosley joined
[01:46] *** FROGGS left
[01:50] *** IKARi__ joined
[01:51] *** imIKARi left
[01:53] *** imIKARi joined
[01:54] *** shinobicl_ joined
[01:54] *** snearch left
[01:55] *** IKARi__ left
[02:17] *** btyler joined
[02:21] *** IKARi__ joined
[02:22] *** imIKARi left
[02:39] *** imIKARi joined
[02:42] *** IKARi__ left
[03:13] *** btyler left
[03:23] <[Coke]> I find myself wanting a NOTFIRST phaser. :P

[03:27] <diakopter> [Coke]: I've wanted that for many years

[03:27] <diakopter> srsly

[03:28] <[Coke]> ended up with FIRST my $first = True;   ... $first = False;}

[03:28] <sorear> is that called NEXT?

[03:28] <[Coke]> and then if !$first ...

[03:28] <[Coke]> no, next will fire the first time through also, I think.

[03:29] <[Coke]> r: for 1..3 { NEXT say "eek"}

[03:29] <camelia> rakudo 45ae2d: OUTPUT«eek␤eek␤eek␤»

[03:34] *** imIKARi left
[03:53] *** preflex_ joined
[03:54] *** preflex left
[03:54] *** preflex_ is now known as preflex

[03:54] <[Coke]> r: for 1..10  { my $a = 3; FIRST { say $a} } # masakbug?

[03:54] <camelia> rakudo 45ae2d: OUTPUT«(Any)␤»

[04:03] *** adu joined
[04:04] *** kshannon left
[04:05] *** kshannon joined
[04:08] <[Coke]> that makes it hard to use FIRST, I think.

[04:13] <[Coke]> opened a ticket.

[04:19] <diakopter> r: for ^5 { if FIRST { return 1} { say $_ } }

[04:19] <camelia> rakudo 45ae2d: OUTPUT«Can not get attribute '$!storage' declared in class 'Parcel' with this object␤  in method reify at src/gen/CORE.setting:5672␤  in method gimme at src/gen/CORE.setting:6101␤  in method eager at src/gen/CORE.setting:6080␤  in block  at /tmp/2MKSphEXIU:1␤␤»

[04:19] *** LordV joined
[04:20] <diakopter> hard to know whether that's in the compiler

[04:20] <diakopter> oh nm; can't be

[04:21] *** shinobicl_ left
[04:25] *** Psyche^ joined
[04:29] *** Patterner left
[04:29] *** Psyche^ is now known as Patterner

[04:30] *** imIKARi joined
[04:37] <diakopter> [Coke]: ping

[04:37] *** shinobicl_ joined
[04:38] <[Coke]> pong

[04:38] <dalek> perl6-roast-data: e395511 | coke++ | bin/days_since.pl:

[04:38] <dalek> perl6-roast-data: Speed up by 50%

[04:38] <dalek> perl6-roast-data: 

[04:38] <dalek> perl6-roast-data: Avoid processing every line in the file - only process those

[04:38] <dalek> perl6-roast-data: lines we need to find a state change.

[04:38] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/e395511114

[04:39] <diakopter> [Coke]: emulate NOTFIRST: for ^5 { (state $a)++&& say '_'; .say }

[04:39] *** adu left
[04:40] <[Coke]> nifty.

[04:40] <diakopter> r: for ^5 { (state $a)++&& say '_'; .say }

[04:40] <camelia> rakudo 45ae2d: OUTPUT«0␤_␤1␤_␤2␤_␤3␤_␤4␤»

[04:40] <diakopter> r: for ^5 { (state $a)++&& print '_'; .print }

[04:40] <camelia> rakudo 45ae2d: OUTPUT«0_1_2_3_4»

[04:41] <diakopter> r: for ^5 { (state $)++&& print '_'; .print }

[04:41] <camelia> rakudo 45ae2d: OUTPUT«0_1_2_3_4»

[04:41] <diakopter> golfed

[04:42] <[Coke]> niecza has been dirty for 312 days. pugs has been clean for 8 days. rakudo has been dirty for 21 days.

[04:44] <diakopter> r: for ^5 { (state$)++&& print '_'; .print }

[04:44] <camelia> rakudo 45ae2d: OUTPUT«0_1_2_3_4»

[04:44] <diakopter> golfed more

[04:44] <diakopter> n: for ^5 { (state$)++&& print '_'; .print }

[04:44] <camelia> niecza v24-51-g009f999: OUTPUT«0_1_2_3_4»

[04:45] <diakopter> r: for ^5 { (our$a)++&& print '_'; .print }

[04:45] <camelia> rakudo 45ae2d: OUTPUT«0_1_2_3_4»

[04:45] <diakopter> golfed more

[04:53] *** kshannon left
[04:55] *** kurahaupo joined
[04:57] *** Chillance left
[04:59] <dalek> rakudo/nom: 0e206e0 | coke++ | INSTALL.txt:

[04:59] <dalek> rakudo/nom: win32 spectest smolder prereq notes

[04:59] <dalek> rakudo/nom: 

[04:59] <dalek> rakudo/nom: RT #78152

[04:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0e206e0b03

[05:01] *** kshannon joined
[05:03] <[Coke]> nr: say lines[0]

[05:03] <camelia> rakudo 45ae2d, niecza v24-51-g009f999: OUTPUT«Land der Berge, Land am Strome,␤»

[05:05] * [Coke] wonders if TODO tickets are helpful for rakudo, or if that is better served in a doc, or a wiki page or something.

[05:08] *** risou_awy is now known as risou

[05:14] *** dmol joined
[05:20] *** IKARi__ joined
[05:23] *** imIKARi left
[05:24] *** woosley left
[05:26] *** shinobicl_ left
[05:36] *** kaare__ joined
[05:38] <diakopter> [Coke]: what if FIRST and LAST took else blocks

[05:44] *** kurahaupo left
[05:47] *** patspam joined
[05:48] *** kurahaupo joined
[05:49] *** ivan`` joined
[05:52] *** SamuraiJack_ joined
[05:52] *** IKARi__ left
[05:53] *** Juerd_ joined
[05:53] *** timotimo_ joined
[05:53] *** jtpalmer joined
[05:54] *** Juerd_ is now known as Juerd

[06:05] *** shinobicl_ joined
[06:13] *** imIKARi joined
[06:42] <[Coke]> diakopter: that would get me the functionality. not sure I like the syntax.

[06:44] *** SamuraiJack_ left
[06:47] *** kurahaupo left
[06:50] * [Coke] sighs, as FIRST just isn't specced to do the useful thing from his POV.

[06:50] * [Coke] sticks with "my $first = True; loop { ... ; $first = False}

[06:52] *** arlinius left
[06:52] * [Coke] boggles, as START means first.

[06:52] <shinobicl_> open question: do you think is still worth it to support relational databases?

[06:53] <labster> yes.

[06:53] <labster> I tell them how awesome they are when they retrieve my data.

[06:53] <[Coke]> .ask timtoady if we should switch the names of FIRST and START, maybe.

[06:53] <yoleaux> [Coke]: I'll pass your message to timtoady.

[06:54] <labster> SELECT awesome FROM TABLE win WHERE cool > 0;

[06:54] <shinobicl_> i was recently working in a java project, using orm libraries to support my objects on tables, but this looks as soooo much boilerplate. Sadly i only have experience in relational databases but now it just seems awkward

[06:54] <shinobicl_> converting objects to relational and back

[06:56] <labster> not really familiar with any of this stuff... are you trying to do something where RDBMS is not the right tool?

[06:57] <shinobicl_> no, just pointing out that you need to use huge frameworks (like Hibernate) to make the database understand your objects relations

[06:58] <labster> is it just me, or is stage parse going much faster on rakudo/parrot?

[06:59] <shinobicl_> and also, there's clearly a trend for things like NoSql and Cassandra

[07:04] <labster> Of course there is, but that's a matter of choosing the right tool.  If you want to be able to ask analytic questions, you need a RDBMS.  NoSQL and memcached are fine for things where you don't need those features, but only want to store some data.

[07:05] <[Coke]> I have never worked on a project where ORM was a better answer than having someone who knew sql.

[07:05] <[Coke]> (perhaps due to scale of the DB or the objects, Iunno)

[07:05] <diakopter> ok, work on more toy projects! :)

[07:07] * [Coke] tries to bisect RT#117957

[07:08] * [Coke] also ponders a bisect helper for rakudo, but that is too many yaks deep.

[07:08] <PerlJam> [Coke]: re swapping START and FIRST, the docs for START even say "on first ever execution"

[07:10] <[Coke]> PerlJam: are you agreeing with me about the proposed switch or suggesting that a read of the docs will set everyone straight?

[07:10] <PerlJam> [Coke]: agreeing.

[07:11] <labster> [Coke]: I think FROGGS decided 117957 had something to do with my implementation of IO::Spec::Unix.tmpdir of all things.  Not 100% sure if it was this bug or another one.

[07:11] <PerlJam> Why call something START that's then immediately described as happening "first", but then have something called FIRST that means something else.

[07:11] *** woolfy left
[07:12] *** lizmat left
[07:14] <sorear> Warning: the behavior of "state" is defined in terms of START; if changing START, please explicitly make a decision about what happens to state so that we don't have to guess

[07:16] <labster> anyway, I'm spectesting a workaround for what FROGGS_ found, spectesting now -- though the failure only seems to happen on feather.

[07:16] <sorear> let me just say that "NoSQL" literally means that.  all the popular "NoSQL" databases are functionally equivalent to RDBMSes, minus the SQL parser and query optimizer

[07:17] <diakopter> indexes aren't nearly as powerful too

[07:17] <diakopter> though I guess you can lump that in with the optimizer

[07:17] <sorear> if you look under the hood of say MySQL, you'll find that InnoDB's internal interface is a transactional key-value store

[07:17] *** saxx11 joined
[07:19] <sorear> "indexes" in an RDBMS are usually implemented as auxiliary tables with the indexed column as primary key.  the SQL layers automatically do transactional updates to keep the index updated

[07:19] <[Coke]> labster: iospec merge is in the list of remaining candidates, I think.

[07:19] <diakopter> sorear: that makes sense

[07:20] *** berekuk joined
[07:20] <sorear> disclaimer: the RDBMSes I have studied in the most detail are mysql/InnoDB and SQLite.  I don't really know how the big iron commercial SQLs work inside

[07:22] <labster> The idea was that $*TMPDIR called .tmpdir, which references on %*ENV which -- although %PROCESS::ENV was already set in the terms.pm scope -- seems to cause issues on feather.

[07:23] <masak> good morning, #perl6

[07:23] <diakopter> o/

[07:24] * masak feels very refreshed

[07:24] <diakopter> \o/

[07:24] <masak> it's amazing what a full night of sleep can do to a person :>

[07:24] <labster> \\o

[07:25] <sorear> good morning masaaaak

[07:26] * masak twinkles happily

[07:27] <masak> r: my @a=<a a a>;my @b=<b b b>;for (@a »,« @b) »,« @a -> $a, $b, $c {say "$a $b $c"}

[07:27] <camelia> rakudo 0e206e: OUTPUT«Lists on both side of non-dwimmy hyperop of infix:<,> are not of the same length␤left: 6 elements, right: 3 elements␤  in sub hyper at src/gen/CORE.setting:14054␤  in sub hyper at src/gen/CORE.setting:14042␤  in block  at src/gen/CORE.setting:14033␤  in block  at /…

[07:27] * masak adds that to https://rt.perl.org/rt3/Ticket/Display.html?id=77746

[07:32] *** SamuraiJack_ joined
[07:37] *** imIKARi left
[07:41] <masak> [Coke]: re https://rt.perl.org/rt3/Ticket/Display.html?id=118179 , I think that's a non-bug

[07:41] <masak> FIRST {...}*      at loop initialization time, before any ENTER

[07:41] <masak> if it runs befor any ENTER, it also runs before the assignment $a = 3

[07:41] <masak> so it *sees* the lexical... it's just that the lexical hasn't been assigned to yet.

[07:42] <masak> compare 'my $a = 3; BEGIN { say $a }'

[07:42] <labster> 118179 is already rejected

[07:43] <masak> oh! so it is.

[07:44] <masak> sorry about the noise.

[07:44] <masak> on an abstract level, I can agree that the semantics [Coke]++ wanted ought to be easy, too.

[07:45] <masak> &

[07:51] <FROGGS_> labster: I have some more information for you...

[07:51] *** FROGGS_ is now known as FROGGS

[07:51] <FROGGS> let me get the diff from feather

[07:51] <sergot> hi! o/

[07:51] *** lizmat joined
[07:51] *** imIKARi joined
[07:52] *** arlinius joined
[07:53] <FROGGS> labster: https://gist.github.com/FROGGS/0d1a9f4967a2c4d49606

[07:54] <FROGGS> labster: it breaks bool.t if you comment in line 10, 13 or 14

[07:54] *** SamuraiJack_ left
[07:55] <labster> huh?

[07:55] <FROGGS> yeah

[07:56] <lizmat> PerlJam: FWIW, the way I understand START, is that START runs once per closure S04:1464, and has nothing to do with loops

[07:57] *** IKARi__ joined
[07:57] *** imIKARi left
[07:58] <labster> Wait, is it the comments that are causing the error, or the regexes?

[07:58] <FROGGS> labster: good question...

[07:58] <FROGGS> I'll comment in and remove the comments

[08:00] <labster> This bug makes no sense to me.

[08:01] *** berekuk left
[08:02] *** shinobicl_ left
[08:02] <lizmat> r: sub a ( $a=Mu ) { say $a }; a  # not sure if I mentioned this before

[08:02] <camelia> rakudo 0e206e: OUTPUT«Nominal type check failed for parameter '$a'; expected Any but got Mu instead␤  in sub a at /tmp/ifvoQEy7nb:1␤  in block  at /tmp/ifvoQEy7nb:1␤␤»

[08:03] <lizmat> r: sub a ( $a=Mu ) { say $a }; a(Any)  # not sure if I mentioned this before

[08:03] <camelia> rakudo 0e206e: OUTPUT«(Any)␤»

[08:03] <labster> Yeah, isn't that the "default is Any" issue?

[08:04] <labster> sub a ( $a) implies sub a (Any $a)

[08:04] <lizmat> r: sub a ( Mu $a=Mu ) { say $a }; a  # not sure if I mentioned this before

[08:04] <camelia> rakudo 0e206e: OUTPUT«(Mu)␤»

[08:04] <lizmat> labster++

[08:04] <masak> jnthn and I are running a tad late for day 2 of the conf. we'll be sneaking in at the back at around 10:20.

[08:05] <masak> [Coke]: doesn't START do exactly what you wanted from FIRST?

[08:06] *** berekuk joined
[08:11] *** saxx11 is now known as saxxy

[08:26] <FROGGS> labster: it's not the comment, I commented in line 10 in the diff and removed the comment and it fails again

[08:26] *** berekuk left
[08:39] *** denisboyun_ joined
[08:42] *** domidumont joined
[08:44] *** dmol left
[08:49] *** woolfy joined
[08:50] <moritz> good morning everybody

[08:50] <FROGGS> morning moritz

[08:51] <tadzik> hello

[08:51] <FROGGS> o/

[08:52] <moritz> how's plpw going?

[08:52] <tadzik> better than I thought

[08:52] <tadzik> we had a little bit of technical difficulties, but almost nobody noticed :)

[08:52] <tadzik> the power went down in the entire office. Including doors

[08:53] <sorear> can your doors be opened manually or were you trapped?

[08:53] <sorear> how screwed would you have been if the building had proceeded to catch fire? :/

[08:53] <tadzik> worse. They were open. Both ways. No alarm

[08:54] <tadzik> we sorted it out, but it still makes me shiver

[08:54] <sorear> (where I live, I think most doors are required by law to be manually openable?)

[08:54] <sorear> what kind of facility is it?

[08:55] <tadzik> it's a big building with like 10 offices

[08:55] *** IKARi__ left
[08:55] <tadzik> they forgot to turn the power back on after the outage during the night

[08:56] <tadzik> fortunately it's not a problem anymore :0

[08:56] <sorear> you say "office", I imagine a room roughly 5m x 5m x 2.5m with exactly one door, one desk, and three chairs

[08:56] <tadzik> hehe, no. It's an office space for few dozens of people

[08:57] <tadzik> we now have ~40 PLPW atendees just in a ping-pong room

[08:57] <lizmat> it's pretty ok, it sounds worse then it is!

[08:57] *** dmol joined
[08:57] <tadzik> yeah. Only I know how bad it was :D

[08:58] *** markstacey joined
[08:58] *** gudahtt left
[08:58] <moritz> well, a proper table tennis room is at least 14m x 7m

[08:59] <moritz> not too bad for fitting in 40 people :-)

[08:59] <tadzik> well, it's generally a leisure space

[08:59] <tadzik> I'm bad at approximating, but it may be like, 8m*10m, or something

[09:00] *** spider-mario joined
[09:00] <tadzik> there will be pics :)

[09:01] * sorear wonders if there is actually an international standard for ceiling heights

[09:01] <lizmat> not internationally, I'm pretty sure the standards for Dutch offices are different from the ones in e.g. Portugal

[09:01] <moritz> for table tennis courts there is :-)

[09:03] <sorear> lizmat: interesting.  the hotel room I stayed in in Perl had an 8 foot +- 1% ceiling, which was...surprising

[09:03] <tadzik> is it like 2,5 meters?

[09:03] <sorear> it's the standard height in the US, which makes sense because it's a convenient round number here

[09:03] <lizmat> Ah, yes, good old German building standards  :-)

[09:03] <sorear> ...but why do they use it in Perl

[09:04] <lizmat> because it is Germany ?  with generally larger people as well ?

[09:04] <tadzik> *cough* USA *cough*

[09:07] <sorear> 2,4384 m; I can only say the hotel room ceiling was 2,44(1)

[09:07] <labster> FROGGS: try changing the regexes to s/// form or .subst form?  maybe put $path on line 15 as an explicit return value, .=subst on line 14 and see if that fixes part of the problem?

[09:07] *** domidumont left
[09:08] <FROGGS> labster: will do, but I already tried .subst(...

[09:08] *** domidumont joined
[09:09] *** berekuk joined
[09:10] <labster> Yeah, I'm not on feather, and I'm only just guessing about what it could be.

[09:11] * sorear wonders what the joke is about German building standards

[09:11] <labster> If we have to, we can just drop $*TMPDIR -- it's not specced.

[09:12] <moritz> please don't, panda uses it, iirc

[09:13] <dalek> rakudo-debugger: 857a884 | jonathan++ | lib/Debugger/UI/CommandLine.pm:

[09:13] <dalek> rakudo-debugger: Fix debugger on latest Rakudo.

[09:13] <dalek> rakudo-debugger: review: https://github.com/jnthn/rakudo-debugger/commit/857a884250

[09:14] <lizmat> sorear: German houses in general, are larger and better built then most other houses in Europe

[09:15] <lizmat> fwiw, I don't think they do that because it's cheaper, but because they have to

[09:18] <FROGGS> labster: $*TMPDIR is just too handy to be dropped

[09:19] <FROGGS> labster: you can request an account on feather though

[09:19] <FROGGS> brb

[09:26] <labster> moritz: panda doesn't use it, but probably should.  We really need a proper File::Temp.

[09:29] * masak is so happy to be at PLPW

[09:30] <moritz> labster: oh, maybe it was LWP::Simple

[09:30] <FROGGS> moritz: I think it was that, yes

[09:31] <masak> "Perl Cannot Be Parsed: A Formal Proof" is on https://news.ycombinator.com/ right now. in other news, bumblebees cannot really fly, and if the Earth really revolved around its own axis like the physicists say, we'd all be thrown off by centripetal forces.

[09:31] <FROGGS> it can easily changed to use IO::Spec.tmpdir, but I want to know why that actually fails on feather

[09:35] <labster> So far as I can see, the only thing those three lines have in common that the others do not is anchors (^$) that aren't in square brackets.  Or not in an alternation.

[09:35] <masak> r: for 1..10  { my $a = 3; START { say $a } }

[09:35] <camelia> rakudo 0e206e: OUTPUT«3␤»

[09:35] * masak adds this to #118179

[09:36] <FROGGS> masak: but this is clear, no?   whatever  / 25 ; # / ; die "this dies!";

[09:37] <FROGGS> because you'd know whatever's prototype without any code execution

[09:37] <masak> FROGGS: my point isn't whether the proof is correct or not. (it is.)

[09:37] <moritz> the correct statement would be "Perl cannot be parsed without running parts of it"

[09:39] <masak> FROGGS: my point is that saying "Perl cannot be parsed" is silly, when people are writing and running bazillions of Perl programs every day.

[09:39] <masak> if you're saying that, and the state of the world is what it is, then what you're saying needs to be revised.

[09:39] <sorear> someone should point out that you can't parse lisp without running reader macros

[09:40] <sorear> or parse C without header files

[09:40] <sorear> sleep&

[09:40] <moritz> or parse tex without running tex

[09:40] <labster> whoa, it's way too late for me to read this kind of "proof"

[09:41] <labster> I'm going to get me to a nullary^W bed.

[09:41] <masak> a nullary bed sounds kinda comfy.

[09:41] <labster> sleep &

[09:41] <sergot> n: grammar A { token TOP { <HEAD>\s+Building\s+<name> }; token HEAD { \=\=\> }; token name {.*};}; my $s = "==> Building Foo::Bar\n==> Doing something with Foo::Bar"; say A.new.parse($s);

[09:41] <camelia> niecza v24-51-g009f999: OUTPUT«｢==> Building Foo::Bar␤==> Doing something with Foo::Bar｣␤ HEAD => ｢==>｣␤ name => ｢Foo::Bar␤==> Doing something with Foo::Bar｣␤␤»

[09:41] <sergot> r: grammar A { token TOP { <HEAD>\s+Building\s+<name> }; token HEAD { \=\=\> }; token name {.*};}; my $s = "==> Building Foo::Bar\n==> Doing something with Foo::Bar"; say A.new.parse($s);

[09:41] <camelia> rakudo 0e206e: OUTPUT«｢==> Building Foo::Bar␤==> Doing something with Foo::Bar｣␤ HEAD => ｢==>｣␤ name => ｢Foo::Bar␤==> Doing something with Foo::Bar｣␤␤»

[09:41] <lizmat> at least you won't be able to sink into a nullary bed

[09:41] <masak> good night, labster. dream of parsing/Hamlet fiction.

[09:42] <sergot> How can I gen only Foo::Bar into <name>?

[09:43] <moritz> sergot: make token name more selective

[09:43] <moritz> \S+ would be a decent start

[09:43] <sergot> moritz: I was trying to add \n to TOP token after <name>, it doesnt work

[09:44] <sergot> I want everything after Building to the first appearance of \n :)

[09:45] <moritz> r:  r: grammar A { token TOP { <HEAD>\s+Building\s+<name> }; token HEAD { '==>' }; token name { \S+ }}; my $s = "==> Building Foo::Bar\nblah"; say A.new.parse($s)

[09:45] <camelia> rakudo 0e206e: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/mcFYwyeG2s:1␤------> [32mr[33m⏏[31m: grammar A { token TOP { <HEAD>\s+Build[0m␤    expecting any of:␤        argument list␤        postfix␤        infix stopper␤        infix or meta-infix␤        statem…

[09:45] <moritz> r: grammar A { token TOP { <HEAD>\s+Building\s+<name> }; token HEAD { '==>' }; token name { \S+ }}; my $s = "==> Building Foo::Bar\nblah"; say A.new.parse($s)

[09:45] <camelia> rakudo 0e206e: OUTPUT«｢==> Building Foo::Bar｣␤ HEAD => ｢==>｣␤ name => ｢Foo::Bar｣␤␤»

[09:45] <moritz> sergot: like this?

[09:45] <sergot> Oh, so what is \S+?

[09:45] <sergot> moritz++ thanks! 

[09:45] <sergot> Why does it work so?

[09:45] <moritz> \S is "anything that is not a whitespace

[09:46] <sergot> Ok, it's clear now. Thanks :)

[09:47] <sergot> moritz: one more question. If I want something after \n, Should I write in token TOP ...\n<something>... ?

[09:47] <sergot> Is it "good"? :)

[09:48] <moritz> well, you can do it with \n<something>

[09:48] <moritz> or you can split the input into lines before putting the stuff into the grammar

[09:48] *** bbkr_ joined
[09:48] <moritz> which is often easier for line-based formats

[09:49] <sergot> I'm trying to parse this: http://feather.perl6.nl/~sergot/modules/err1. To add more features to my modules list. :)

[09:49] <sergot> Ok, thank You moritz. :)

[09:49] <moritz> a grammar might be easier for that

[09:50] <moritz> because the test output is actually a multi-line format

[09:50] <diakopter> I'm looking for someone with moderate experience with CSS on mobile to do some urgent/critical volunteer work to help out yapc austin

[09:50] <sergot> moritz: so, can I call parse with a(n) array/list of lines?

[09:50] <moritz> sergot: no

[09:50] <moritz> sergot: you'd have to call A.parse for each line

[09:51] <sergot> moritz: Ok, I'll try so. thanks again. :)

[09:52] <diakopter> if you have that experience and you're a fast worker, and are willing/able to contribute 15-20 hours total over the next 6 days, contact me please

[09:59] <diakopter> anyone experienced in event/party planning want to sanity check my table layout? [please?]

[10:01] *** PacoAir joined
[10:03] <arnsholt> I'm don't really know much about table layout, but I can have a look

[10:04] <lizmat> is this about who's sitting where ?   Or something else ?

[10:05] <diakopter> positioning of tables on a floor plan

[10:05] <diakopter> arnsholt: I sent it on gtalk

[10:05] <moritz> IMHO that's best planned with paper cut proportinally to the table size :-)

[10:05] <lizmat> don't put them in front of emergency exits, more than that I don't really have to offer

[10:06] <diakopter> moritz: I did pixel-scaled onto an architect's scale drawing

[10:06] <diakopter> with a grid

[10:14] <dalek> nqp/rak-jvm-support: 113b736 | jonathan++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/NFA.java:

[10:14] <dalek> nqp/rak-jvm-support: Implement NFA serialize/deserialize.

[10:14] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/113b736708

[10:15] <diakopter> lizmat: who needs emergency exits when there are huge bay doors open to the air on a wall? :)

[10:16] <lizmat> diakopter: I can think of some situations, but generally these would involve a large zombie attack

[10:17] <diakopter> I like small zombie attacks better

[10:17] <moritz> http://podcastle.org/2010/09/01/podcastle-120-some-zombie-contingency-plans-fixed/

[10:19] *** tgt joined
[10:30] *** sqirrel joined
[10:37] *** rindolf joined
[10:44] <lizmat> r: my %h{Any}=Any=>1; say %h.exists(Any)

[10:44] <camelia> rakudo 0e206e: OUTPUT«use of uninitialized value of type Any in string context  in block  at /tmp/NTFY5txVTK:1␤␤False␤»

[10:44] <lizmat> n: my %h{Any}=Any=>1; say %h.exists(Any)

[10:44] <camelia> niecza v24-51-g009f999: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Postconstraints, and shapes on variable declarators NYI at /tmp/5v0DNvzso8 line 1:␤------> [32mmy %h{Any}[33m⏏[31m=Any=>1; say %h.exists(Any)[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.…

[10:44] <lizmat> r: my %h{Any}=Any=>1; say %h.exists(Any)  # expect True

[10:44] <camelia> rakudo 0e206e: OUTPUT«use of uninitialized value of type Any in string context  in block  at /tmp/Diq3EfjBnq:1␤␤False␤»

[10:44] * lizmat files rakudobug

[10:45] <masak> lizmat++

[10:49] *** woolfy left
[10:50] *** kurahaupo joined
[10:56] <dalek> rakudo/jvm-support: f4fe4dd | jonathan++ | src/vm/jvm/runtime/org/perl6/rakudo/Binder.java:

[10:56] <dalek> rakudo/jvm-support: Implement type captures in signature binder.

[10:56] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/f4fe4dd8b3

[10:57] *** kurahaupo left
[11:00] *** woolfy joined
[11:06] <FROGGS> .tell labster that the fail goes away if I comment out a single line of the test file >.<

[11:06] <yoleaux> FROGGS: I'll pass your message to labster.

[11:07] <FROGGS> I hate this kind of bug

[11:16] *** berekuk left
[11:23] *** espadrine joined
[11:30] *** kaare__ left
[11:31] <colomon>  Hmmm, MuEvent starting failing tests overnight.

[11:32] <FROGGS> without any changes?

[11:32] <colomon> dunno, my reports don't have any more details yet

[11:32] <colomon> without any changes to MuEvent

[11:33] <FROGGS> :/

[11:33] <colomon> presumably the changes were to Rakudo

[11:35] <colomon> huh, all the tests worked when I just ran them by hand in a different account

[11:35] <FROGGS> it picks the same perl6 binary?

[11:36] <colomon> no

[11:36] <colomon> oh, right!

[11:36] <colomon> duh

[11:36] <tadzik> colomon: maybe they're just flapping

[11:37] <colomon> tadzik: ?

[11:37] <colomon> also passes using the same account and p6 binary.  :\

[11:37] <colomon> tadzik: does MuEvent occasionally fail?

[11:38] <tadzik> colomon: not to my knowledge

[11:39] <FROGGS> r: multi term:<test> { 42 }; multi sub test($a) { $a + 1 }; say test 1;

[11:39] <camelia> rakudo 0e206e: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/nHQ4QNIHo0:1␤------> [32mmulti sub test($a) { $a + 1 }; say test [33m⏏[31m1;[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        statement end␤        state…

[11:39] <colomon> trying it with panda now

[11:40] <tadzik> yep, me too

[11:40] <colomon> that worked too

[11:40] <colomon> so I've got no clue.

[11:40] <tadzik> duh

[11:41] <FROGGS> colomon: do you capture that test output somewhere? like backtraces?

[11:42] <colomon> FROGGS: ooo, maybe, but not in a particularly orderly fashion

[11:44] <colomon> well, I've got the stderr dump for the entire smoke run, but it's not sorted (as far as I know) or tagged by module name

[11:45] <FROGGS> maybe you can search for the failing test file name?

[11:46] <colomon> don't think so

[11:53] <colomon> tadzik: I see a line         # don't waste time if it has already been installed once

[11:53] <colomon> in emmentaler.

[11:54] <colomon> does that mean smoker doesn't test modules which have already been installed?

[11:54] <tadzik> well, it's not only about wasting time

[11:54] <colomon> oh, is that already installed in this particular run?

[11:54] <tadzik> yes precisely

[11:55] <tadzik> you get a fresh state when you start emmentaler (or you should've

[11:55] <tadzik> )

[11:56] <colomon> I'm trying to figure out how to add the module being worked on to the STDERR output.  :)

[11:58] *** sqirrel left
[12:01] *** mattp_ joined
[12:03] *** a232346 joined
[12:04] <colomon> rn: $*ERR.say: "Working on blah"

[12:04] <camelia> rakudo 0e206e, niecza v24-51-g009f999: OUTPUT«Working on blah␤»

[12:04] <colomon> okay, I've tried adding that to smoker.

[12:05] <colomon> looks like it works.  :)

[12:06] <colomon> (occurred to me I could always run it by hand and see what it did.)

[12:06] *** a232346 left
[12:10] *** denisboyun_ left
[12:11] *** mtk left
[12:15] *** mtk joined
[12:17] <FROGGS> r: my $n = 3; say "a,a,a,a,a" ~~  / "a"**$n % [","] / # looks like I need that for perl5's sub calls :/

[12:17] <camelia> rakudo 0e206e: OUTPUT«[31m===[0mSORRY![31m===[0m␤Quantifier quantifies nothing␤at /tmp/s1P_ecAsTN:1␤------> [32mmy $n = 3; say "a,a,a,a,a" ~~  / "a"**[33m⏏[31m$n % [","] / # looks like I need that fo[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or…

[12:17] <moritz> FROGGS: why?

[12:18] <moritz> you shouldn't do a regex match per sub call; that's way too slow

[12:18] <FROGGS> no, when parsing things like: @a = shift || 1

[12:19] * moritz doesn't see the connection yet

[12:19] <FROGGS> you need to know the prototype of shift in order to know that it can take zero or one arg

[12:19] <moritz> oh

[12:19] <FROGGS> and things like: @a = shift @b, 2, 3; where shift only eats the @b

[12:20] <FROGGS> so I need to do: <EXPR>**$count % [','] in token <args> or so

[12:20] <FROGGS> well, basically I need to do that for all possibilities of $count

[12:24] <masak> r: say [+] ('a'..'z').pairs.map: { 1 + .key if .value ~~ any < m a t h > }

[12:24] <camelia> rakudo 0e206e: OUTPUT«42␤»

[12:25] <masak> on perl6-users, eiro asks us to make this shorter.

[12:25] <masak> I think we can do that :>

[12:25] <FROGGS> cool

[12:26] <FROGGS> r: say [+] (0,'a'..'z').pairs.map: { .value ~~ any < m a t h > and .key }

[12:26] <camelia> rakudo 0e206e: OUTPUT«42␤»

[12:26] <masak> r: say [+] ('a'..'z').grep({ any <m a t h> })>>.ord X- ord('a')

[12:26] <camelia> rakudo 0e206e: OUTPUT«325␤»

[12:27] <masak> er :)

[12:27] <colomon> close enough!

[12:27] <masak> :P

[12:27] * masak tries to figger out what he did wrong

[12:27] <masak> r: say ('a'..'z').grep({ any <m a t h> })

[12:27] <camelia> rakudo 0e206e: OUTPUT«a b c d e f g h i j k l m n o p q r s t u v w x y z␤»

[12:27] <moritz> r: say [+] 'math'.comb>>.ord X- ord('a')

[12:27] <camelia> rakudo 0e206e: OUTPUT«38␤»

[12:27] <masak> r: say ('a'..'z').grep(any <m a t h>)

[12:27] <camelia> rakudo 0e206e: OUTPUT«a h m t␤»

[12:27] <masak> ah.

[12:28] <moritz> r: say [+] 'math'.comb>>.ord X- ord('a') + 1

[12:28] <camelia> rakudo 0e206e: OUTPUT«34␤»

[12:28] <colomon> r: say [+] (0,'a'..'z').kv.map: { 1 + $^k of $^v ~~ any < m a t h > }

[12:28] <camelia> rakudo 0e206e: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/tuSC0LXXa6:1␤------> [32msay [+] (0,'a'..'z').kv.map: { 1 + $^k [33m⏏[31mof $^v ~~ any < m a t h > }[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        sta…

[12:28] <moritz> r: say [+] 'math'.comb>>.ord X- ord('a') X+ 1

[12:28] <camelia> rakudo 0e206e: OUTPUT«818␤»

[12:28] <colomon> r: say [+] (0,'a'..'z').kv.map: { 1 + $^k if $^v ~~ any < m a t h > }

[12:28] <camelia> rakudo 0e206e: OUTPUT«46␤»

[12:28] <lizmat> r: sub a ( $a is copy ) { $a=5 }; a(1)

[12:28] <moritz> r: say [+] 'math'.comb>>.ord X- (1+ord('a') )

[12:28] <camelia> rakudo 0e206e: OUTPUT«Cannot modify an immutable value␤  in block  at /tmp/Dmc8P4X3n2:1␤␤»

[12:28] <camelia> rakudo 0e206e: OUTPUT«34␤»

[12:28] * lizmat submits rakudobug

[12:28] <colomon> 46 ?!

[12:28] <masak> r: say [+] 'math'.comb>>.ord X- (ord('a') - 1)

[12:28] <camelia> rakudo 0e206e: OUTPUT«42␤»

[12:29] <colomon> oh

[12:29] <moritz> masak: right, that was what I was trying to do

[12:29] <colomon> r: say [+] ('a'..'z').kv.map: { 1 + $^k if $^v ~~ any < m a t h > }

[12:29] <camelia> rakudo 0e206e: OUTPUT«42␤»

[12:29] <moritz> r: say <m a t h>».org X- ('a'.ord - 1)

[12:29] <camelia> rakudo 0e206e: OUTPUT«No such method 'org' for invocant of type 'Str'␤  in method dispatch:<hyper> at src/gen/CORE.setting:1097␤  in block  at /tmp/B0cksZLtJo:1␤␤»

[12:29] <moritz> r: say <m a t h>».ord X- ('a'.ord - 1)

[12:29] <camelia> rakudo 0e206e: OUTPUT«13 1 20 8␤»

[12:30] <moritz> r: say [+] <m a t h>».ord X- ('a'.ord - 1)

[12:30] <camelia> rakudo 0e206e: OUTPUT«42␤»

[12:30] <FROGGS> cool

[12:30] <masak> r: sub v { ord($^l) - ord('a') + 1 }; say [+] <m a t h>.map(&v)

[12:30] <camelia> rakudo 0e206e: OUTPUT«42␤»

[12:31] <masak> oh, but moritz++' is much shorter :)

[12:31] * moritz answers on p6u

[12:31] <masak> moritz++

[12:32] *** prevost joined
[12:32] <moritz> r: say [+] <m a t h>».ord X- 'a'.pred.ord

[12:32] <camelia> rakudo 0e206e: OUTPUT«Decrement out of range␤  in method <anon> at src/gen/CORE.setting:10070␤  in any  at src/gen/Metamodel.nqp:2504␤  in any find_method_fallback at src/gen/Metamodel.nqp:2492␤  in any find_method at src/gen/Metamodel.nqp:939␤  in block  at /tmp/rKFRJbJpBF:1␤␤»…

[12:33] <moritz> r: say 'a'.ord.pred.chr

[12:33] <camelia> rakudo 0e206e: OUTPUT«`␤»

[12:33] <moritz> r: say [+] <m a t h>».ord X- '`'.ord

[12:33] <camelia> rakudo 0e206e: OUTPUT«42␤»

[12:33] * moritz would like to get rid of that -1, but doesn't have any really good ideas

[12:34] <moritz> r: say :36<a>

[12:34] <camelia> rakudo 0e206e: OUTPUT«10␤»

[12:34] <moritz> r: say ('a'..'z').grep(any 'math'.comb)

[12:34] <camelia> rakudo 0e206e: OUTPUT«a h m t␤»

[12:35] *** xinming left
[12:35] <colomon> rn: say (ord('a') - 1).char

[12:35] * colomon can never remember what the opposite of ord is

[12:35] <camelia> rakudo 0e206e: OUTPUT«No such method 'char' for invocant of type 'Int'␤  in block  at /tmp/7W5d4b6eHw:1␤␤»

[12:35] <camelia> ..niecza v24-51-g009f999: OUTPUT«Unhandled exception: Unable to resolve method char in type Int␤  at /tmp/dKGSe7uJ7S line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4331 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4332 (module-CORE @ 582) ␤  at /home/p…

[12:35] <moritz> r: say [+] ('a'..'z').grep(any 'math'.comb).map *.ord - 1

[12:35] <camelia> rakudo 0e206e: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in method map at src/gen/CORE.setting:1396␤  in block  at /tmp/a9ceOOf4kx:1␤␤»

[12:35] <colomon> rn: say 'a'.ord, '`'.ord

[12:35] <camelia> rakudo 0e206e, niecza v24-51-g009f999: OUTPUT«9796␤»

[12:35] <moritz> colomon: chr

[12:35] <moritz> r: say [+] ('a'..'z').grep(any 'math'.comb).map: *.ord - 1

[12:35] <camelia> rakudo 0e206e: OUTPUT«422␤»

[12:36] * colomon sees masak already did this...

[12:36] <moritz> r: say [+] ('a'..'z').grep(any 'math'.comb).map: *.ord - ord('a') - 1

[12:36] <camelia> rakudo 0e206e: OUTPUT«34␤»

[12:36] <moritz> r: say [+] ('a'..'z').grep(any 'math'.comb).map: *.ord - ord('a') + 1

[12:36] <camelia> rakudo 0e206e: OUTPUT«42␤»

[12:40] <colomon> r: say [+] ('a'..'z').grep(any 'math'.comb).map: *.ord - ord('`')

[12:40] <camelia> rakudo 0e206e: OUTPUT«42␤»

[12:44] *** saxxy left
[12:45] *** saxx11 joined
[12:49] <felher> r: say [+] <m a t h>».ord»-»('a'.ord -1) #me finds that a bit clearer than X- with one element on the left, but thats probably just taste.

[12:49] <camelia> rakudo 0e206e: OUTPUT«42␤»

[12:50] <felher> And its only shorter, if you use » and not >>. And even then only by one character :)

[12:50] <moritz> but only because you omit the whitespaces

[12:50] *** LoRe joined
[12:51] <moritz> you can also drop the blank after Z-

[12:52] <felher> moritz: yeah, right. It's really more of a taste thing. :)

[12:52] *** saxx12 joined
[12:52] *** saxx11 left
[12:52] <FROGGS> r: say [+] <m a t h>».ord»-»96

[12:52] <camelia> rakudo 0e206e: OUTPUT«42␤»

[12:52] <FROGGS> only "r: 42" would be shorter I guess :P

[12:52] <felher> :D

[13:08] <FROGGS> btw, <m a s a k> is closest to truthness from what I have tested

[13:18] *** Chillance joined
[13:23] <colomon> masak: pull request sent for HTML::Template.  ;)

[13:33] *** denisboyun_ joined
[13:34] *** LoRe left
[13:45] *** arlinius left
[13:49] *** fhelmberger joined
[13:50] *** dagurval joined
[13:57] *** fhelmberger left
[13:57] *** fhelmberger joined
[13:57] *** fhelmberger left
[14:06] <FROGGS> pmichaud / jnthn: if you get the chance, please have a look at https://gist.github.com/FROGGS/5652897

[14:20] *** prevost left
[14:21] *** snearch joined
[14:22] *** domidumont left
[14:28] *** arlinius joined
[14:34] *** saxx11 joined
[14:36] *** saxx12 left
[14:39] *** kaare__ joined
[14:40] *** sergot joined
[14:41] *** colomon left
[14:43] *** konundra joined
[14:43] *** estrabd left
[14:45] <pmichaud> FROGGS: what's the purpose of the 5652897 patch?

[14:48] <pmichaud> oh, I see it at the top.

[14:48] <pmichaud> my first response would be to veto the patch, unless there's a compelling use case for it.

[14:49] <pmichaud> NQP is supposed to be a lightweight version of Perl 6.

[14:49] <pmichaud> also, switching  "has int $!min"  to be "has $min" is likely a no-go.

[14:50] <pmichaud> er, "has $!min"

[14:51] <FROGGS> okay, so this should go into rakudo?

[14:51] <sergot> Is there any possibility to get the value from to a variable? https://github.com/rakudo/rakudo/blob/nom/src/core/control.pm#L187

[14:52] <pmichaud> FROGGS: that's where I'd expect it to be implemented first, yes.

[14:52] <sergot> I wrote IO::Capture::Simple, and it doesnt capture it.

[14:52] <FROGGS> pmichaud: thanks, will try

[14:52] <sergot> github.com/sergot/IO-Capture-Simple

[14:53] <sergot> Any ideas? ;)

[14:53] <pmichaud> sergot: I'm having trouble parsing your question

[14:53] <pmichaud> what are you wanting to get?

[14:53] <sergot> pmichaud: https://github.com/sergot/IO-Capture-Simple/issues/2

[14:54] <FROGGS> r: my $output_of_ls = shell("ls"); # . .. .git ...

[14:54] <camelia> rakudo 0e206e: OUTPUT«shell is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:2␤  in sub shell at src/RESTRICTED.setting:7␤  in block  at /tmp/4eUqOovEK1:1␤␤»

[14:54] <sergot> pmichaud: I'm sorry for my weird language. :)

[14:54] <pmichaud> I don't think the shell() function is supposed to return the output.

[14:56] *** kivutar joined
[14:56] <sergot> pmichaud: yes, but my module gets value from std{in,out,err} to variables. But it cant do this with e.g. shell();

[14:57] <pmichaud> maybe qx or qqx then?

[14:57] <sergot> Am I understandable? :) Im a little bit in hurry.

[14:58] <sergot> The problem is make my module to capture that.

[14:58] <sergot> Ok, have to go. I'll think about it. :)

[14:58] <pmichaud> I don't think shell/run will be the commands you need there, then.

[14:58] <pmichaud> they aren't designed to capture the output.

[14:59] <sergot> pmichaud: My module already captures $*IN $*OUT $*ERR.

[15:00] <sergot> it has problem with capturing shell output.

[15:00] <sergot> o/

[15:00] <sergot> thanks pmichaud++

[15:03] *** rindolf left
[15:20] *** xinming joined
[15:26] *** splitcells joined
[15:37] <splitcells> How do I 'use' an other script that is in the same dir as the current script?

[15:37] <moritz> you don't 'use' scripts, you 'use' modules

[15:37] <moritz> use lib '.'; use MyModule;

[15:48] <splitcells> on windows use lib '.'; ist not working

[15:49] <moritz> how is it not working?

[15:49] <splitcells> there is not . location

[15:49] *** woolfy left
[15:49] <splitcells> I am using 'C:/...'

[15:49] <timotimo_> there is always .

[15:49] <splitcells> not on my machine

[15:49] <moritz> . refers to the current directory, even on windows

[15:50] <splitcells> no

[15:50] <moritz> it may be called MyFolder, but if it's the current working directory, you can still refer to it as '.'

[15:50] <splitcells> I am using windows 8

[15:50] <moritz> if not, your windows is broken, and you should get a refund from Microsoft

[15:50] <splitcells> this does not work

[15:50] <splitcells> use v6; use lib '.'; use Cells;

[15:51] <moritz> and what's the error message?

[15:51] <splitcells> ===SORRY!=== Could not find Cells in any of: ., c:/rakudo/lib/parrot/4.10.0/languages/perl6/site/lib, c:/rakudo/lib/parrot/4.10.0/languages/perl6/vendor/lib, c:/rakudo/lib/parrot/4.10.0/languages/perl6/lib, C:\Users\splitcells/.perl6/2013.02.1/lib <<< Process finished.

[15:51] <moritz> and is there a Cells.pm or Cells.pm6 in the current working directory?

[15:52] <splitcells> yes

[15:52] <splitcells> this works

[15:52] <splitcells> use v6; use lib "X:/..."; use Cells;

[15:53] <timotimo_> do you invoke the script like perl6 Foo.p6 or perl6 X:/.../?

[15:53] <moritz> splitcells: what does  use v6; say dir('.'); say cwd;  produce?

[15:53] <splitcells> on notepad++

[15:53] <splitcells> C:\rakudo\bin\perl6.exe "$(FULL_CURRENT_PATH)"

[15:53] <splitcells> C:\rakudo\bin\perl6.exe "X:\..."

[15:54] <moritz> splitcells: then the current working directory is whatever notepad++'s current working directory is

[15:54] <moritz> splitcells: and not the directory where the script is

[15:54] <moritz> oh

[15:54] <moritz> my fault

[15:54] <moritz> you even said

[15:54] <splitcells> i have to launch it via cmd than?

[15:54] <moritz> in the same dir as current script

[15:55] <moritz> r: say cwd.path.directory

[15:55] <camelia> rakudo 0e206e: OUTPUT«/home␤»

[15:55] <splitcells> perl5 did not have such problem^^

[15:55] <moritz> splitcells: well, with p5 you have to use FindBin

[15:55] <splitcells> no

[15:55] <splitcells> notepad++ : perl "$(FULL_CURRENT_PATH)"

[15:55] <moritz> p5 doesn't automaticially search for modules in the same path as the script

[15:56] <moritz> maybe notepad++ does some magic; no idea

[15:56] <moritz> anyway

[15:56] <moritz> try

[15:56] <moritz> use lib $*PROGRAM_NAME.path.directory

[15:56] <moritz> r: say $*PROGRAM_NAME.path.directory

[15:56] <camelia> rakudo 0e206e: OUTPUT«/tmp␤»

[15:57] <moritz> r: use lib $*PROGRAM_NAME.path.directory; say @*INC[0]

[15:57] <camelia> rakudo 0e206e: OUTPUT«/tmp␤»

[15:58] <splitcells> output .

[15:59] <moritz> splitcells: what does  say $PROGRAM_NAME  report?

[16:00] <splitcells> .

[16:00] * moritz doesn't believe it

[16:00] <splitcells> that's no joke -.-

[16:00] <splitcells> use v6; use lib $*PROGRAM_NAME.path.directory; say $*PROGRAM_NAME.path.directory

[16:00] <moritz> and now I was just asking about $*PROGRAM_NAME, not the whole thing

[16:01] <splitcells>  u mean only use v6; say $*PROGRAM_NAME.path.directory?

[16:01] <moritz> no

[16:01] <moritz> I mean

[16:01] <moritz> use v6; say $*PROGRAM_NAME;

[16:01] <splitcells> X:\Semac\AlgorithmPrograms\Cells\test.pl6

[16:02] <moritz> ok, next

[16:02] <moritz> use v6; say $*PROGRAM_NAME.path.perl

[16:02] <splitcells> IO::Path.new(basename => "X:\\Semac\\AlgorithmPrograms\\Cells\\test.pl6", directory => ".")

[16:03] <moritz> oh

[16:03] <moritz> splitcells: what version of rakudo are you using?

[16:03] <splitcells> rakudo-star-2013.02.msi6 

[16:03] <moritz> that explains why .directory doesn't work yet :(

[16:04] *** ironcame1 joined
[16:04] *** Gruber joined
[16:04] <splitcells> is there a newer one?

[16:04] <moritz> there's always a newer rakudo if you build from source

[16:04] <moritz> no idea if there's a newer rakudo star msi

[16:05] *** lee__ joined
[16:05] <moritz> and I hope there'll be a new one in a few days

[16:05] <splitcells> ty

[16:05] * moritz feels he wasn't a great help :(

[16:07] <splitcells> works on cmd

[16:07] <moritz> at least something :-)

[16:07] <splitcells> even without use lib '.';

[16:09] *** Bucciarati_ joined
[16:10] *** sergot_ joined
[16:10] <moritz> that's midly surprising for me

[16:11] *** lustlife joined
[16:17] *** sergot left
[16:27] *** yoleaux joined
[16:27] *** bbkr_ left
[16:29] *** dpk joined
[16:30] *** s1n joined
[16:30] *** lizmat left
[16:32] *** yves_ joined
[16:32] *** crazedpsyc joined
[16:39] *** kivutar left
[16:50] *** colomon joined
[16:51] <colomon> do we know who gam on github is?  I just fixed his Test-Junkie module, and issued a pull request.

[17:00] *** rindolf joined
[17:05] *** splitcells left
[17:08] *** fhelmberger joined
[17:12] * moritz doesn't know

[17:14] *** lizmat joined
[17:16] *** woolfy joined
[17:20] <moritz> in the current star distro-in-git, t/custom-headers-and-content.t and t/get-unsized.t from LWP::Simple fail

[17:21] <moritz> Bailador t/03-response-content.t also fails

[17:22] *** grondilu joined
[17:22] * moritz tries to update all the modules

[17:27] *** colomon left
[17:28] *** domidumont joined
[17:34] *** risou is now known as risou_awy

[17:35] *** risou_awy is now known as risou

[17:38] *** fhelmberger left
[17:50] *** Pleiades` left
[17:53] *** risou is now known as risou_awy

[17:54] *** Pleiades` joined
[17:56] <timotimo_> jnthn++ # fixing the debugger in time for a new star release

[18:05] *** rindolf left
[18:05] *** konundra left
[18:05] *** rindolf joined
[18:07] <FROGGS> moritz: I thought I have fixed that t/get-unsized.t fail

[18:11] <FROGGS> I guess I leave that **$n up to somebody else

[18:12] <FROGGS> making that work in rakudo doesnt help me with my current problem in v5

[18:14] <FROGGS> if I only could translate (@$$$;+) directly to tokens...

[18:15] *** rindolf left
[18:16] *** saxx11 left
[18:17] *** kurahaupo joined
[18:18] *** berekuk joined
[18:19] *** rindolf joined
[18:23] <FROGGS> hmmm, I guess I can

[18:27] <Juerd> [Coke]: No

[18:31] *** SamuraiJack_ joined
[18:49] *** denisboyun_ left
[18:50] *** rindolf left
[18:52] *** rindolf joined
[18:56] *** denisboyun_ joined
[18:58] <timotimo_> huh. try require Text::Levenshtein <&distance>; distance("foo", "bar");  --> Method 'Any' not found for invocant of class 'Parcel'  ?!?!?

[18:59] <FROGGS> can you paste with --ll-exception?

[18:59] <timotimo_> sure

[19:00] <timotimo_> https://gist.github.com/timo/8b392e697679ec3696e3 - there we go

[19:00] <timotimo_> now i've got to run

[19:08] *** kurahaupo left
[19:10] <moritz> $ panda install MIME::Base64

[19:10] <moritz> (Mu)

[19:10] <moritz> No such method 'get-project' for invocant of type 'Any'

[19:10] * moritz sadpanda

[19:11] <moritz> that's a freshly bootstrapped panda on rakudo 2013.05

[19:11] <FROGGS> timotimo_: damnit, that 'try' is busting it

[19:17] *** PacoAir left
[19:17] *** PacoAir joined
[19:26] *** domidumont left
[19:29] *** SamuraiJack_ left
[19:29] *** ilbot_nextgen joined
[19:29] *** ilbot_nextgen left
[19:30] *** ilbot_nextgen joined
[19:30] *** ilbot_nextgen left
[19:31] *** ilbot_nextgen joined
[19:51] <itz__> moritz: I installed panda/rakudo 2013.05 from git yesterday and it works for me

[19:57] <timotimo_> maybe that's what it does before you've done the first update?

[20:00] *** colomon joined
[20:02] <timotimo_> but that shouldn't be.

[20:03] *** Khisanth left
[20:08] <moritz> $ panda update

[20:08] <moritz> No such method 'update' for invocant of type 'Any'

[20:10] <timotimo_> can you see in the panda binary what the value of the ecosystem is after it gets created?

[20:10] <timotimo_> that's really strange

[20:10] *** timotimo_ is now known as timotimo

[20:11] <moritz> it's Any

[20:12] <moritz> that's what the error message tells me

[20:12] <moritz> NARF

[20:12] <timotimo> but how? it gets created with Panda::Ecosystem.new and the new method isn't custom

[20:12] <moritz> I accidentally used an old version of panda, not the one I just installed

[20:12] <moritz> cruft--

[20:12] <timotimo> m)

[20:12] <moritz> moritz--

[20:13] <timotimo> that's quite all right

[20:13] * moritz is just relieved that he is broken, and not panda

[20:20] <sorear> that's not good.  we can fix panda, but who can fix moritz?

[20:22] *** Khisanth joined
[20:26] <moritz> sorear: sleep

[20:27] <labster> good postnoon, #perl6

[20:27] <yoleaux> 11:06Z <FROGGS> labster: that the fail goes away if I comment out a single line of the test file >.<

[20:27] <moritz> r: say 42

[20:27] <camelia> rakudo 0e206e: OUTPUT«42␤»

[20:27] *** kaare__ left
[20:28] <sorear> o/ labster 

[20:28] <labster> \o

[20:29] *** ilbot_nextgen left
[20:32] <labster> FROGGS: Yeah, I have no idea about that failure line -- it seems like there's nothing in common between the two parts of code that are failing.

[20:33] <FROGGS> labster: true

[20:33] <FROGGS> there is just something that messes up the GC or so

[20:42] <timotimo> r: say "Foo Bar Baz" ~~ m:P5/(...)(?:\ (...))+/

[20:42] <camelia> rakudo 0e206e: OUTPUT«｢Foo Bar Baz｣␤ 0 => ｢Foo｣␤ 1 => ｢Baz｣␤␤»

[20:42] <timotimo> is this not supposed to match Bar and Baz?

[20:43] <timotimo> perl5: $_ = "Foo Bar Baz"; /(...)(?:\ (...))+/; print $1;print $2; print $3;

[20:43] <timotimo> eval: $_ = "Foo Bar Baz"; /(...)(?:\ (...))+/; print $1;print $2; print $3;

[20:44] <timotimo> p5eval: $_ = "Foo Bar Baz"; /(...)(?:\ (...))+/; print $1;print $2; print $3;

[20:44] <p5eval> timotimo: FooBaz1

[20:44] *** tgt left
[20:44] <timotimo> oh, okay

[20:44] <moritz> timotimo: in p5, a quantified capture only records the last match

[20:44] <timotimo> pcre is so great /s     :P

[20:46] *** tgt joined
[20:48] <timotimo> what's the way to record each of the results?

[20:48] <moritz> (??{ push @array, $^N }) # or so

[20:49] <moritz> (inside the quantifier, but after the capture

[20:49] <moritz> )

[20:51] *** tgt left
[20:53] <FROGGS> r: my $p = '$'; grammar G { rule TOP { :my $s = $p; :my $n = ''; :my $i = 0; [ <?{ $n = $s.substr($i++, 1) }> <arg($n)> ]+ % ',' }; token arg($n) { \d+ } }; say G.parse( "1,2,3" )

[20:53] <camelia> rakudo 0e206e: OUTPUT«｢1｣␤ arg => ｢1｣␤␤»

[20:53] <FROGGS> r: my $p = '$$'; grammar G { rule TOP { :my $s = $p; :my $n = ''; :my $i = 0; [ <?{ $n = $s.substr($i++, 1) }> <arg($n)> ]+ % ',' }; token arg($n) { \d+ } }; say G.parse( "1,2,3" )

[20:53] <camelia> rakudo 0e206e: OUTPUT«｢1,2｣␤ arg => ｢1｣␤ arg => ｢2｣␤␤»

[20:53] <FROGGS> :o)

[20:57] <labster> FROGGS: try binding in terms.pm?  $TMPDIR := IO::Spec.tmpdir

[20:58] <jnthn> FROGGS, pmichaud: I don't think "just shove an AST into min/max" will work. It expects integer literals there, not a QAST tree. The code gen actually needs to know the exact values at present. So does the NFA stuff. I suspect it needs some kind of smarter thing, maybe a different rxtype so we don't put all the complexity into quant itself.

[20:58] <labster> either that, or tell me who I have to bug to get an account on feather :o)

[21:00] <FROGGS> labster: moritz and Juerd can give you an account I think

[21:01] <FROGGS> jnthn: thanks, will keep that in mind if/when I will work at that again

[21:01] <timotimo> moritz: yikes, that's apparently not something you're supposed to be able to do nicely in perl5 :|

[21:07] *** btyler joined
[21:10] *** dmol left
[21:25] *** Gruber is now known as Grrrr

[21:33] *** snoopy joined
[21:41] *** tgt joined
[21:42] *** spider-mario left
[21:43] *** rindolf left
[21:46] *** tgt left
[21:48] *** tgt joined
[21:51] *** bruges left
[21:51] *** PacoAir left
[21:51] *** btyler left
[21:53] *** bruges joined
[21:53] *** kurahaupo joined
[21:54] *** kurahaupo left
[21:55] *** kurahaupo joined
[21:56] *** denisboyun_ left
[22:03] *** lustlife left
[22:04] <tadzik> *whew*

[22:04] <tadzik> PLPW is over. 'twas awesome

[22:05] <sergot_> o/

[22:06] <sergot_> tadzik: thank you again for plpw

[22:06] <sergot_> !

[22:07] <tadzik> you're welcome. Thank you!

[22:07] <timotimo> tadzik: \o/

[22:07] <tadzik> You made it. I just herded cats :P

[22:08] <tadzik> it was fun :)

[22:08] <sergot_> :)

[22:08] *** sergot_ is now known as sergot

[22:09] <sergot> It must be done in next year too. :)

[22:09] <sergot> have to * :)

[22:09] <timotimo> have people been recording videos of the talks?

[22:10] <tadzik> I thought it's settled, that Poznań.pm organizes YAPC::Poland next year :)

[22:10] <sergot> timotimo: yes

[22:10] <tadzik> timotimo: yes, everything is recorded

[22:10] <tadzik> timotimo: I'll try to get the video asap, cut it into parts and put it all on YT

[22:10] <timotimo> \o/

[22:10] <tadzik> this'll require some tuits and computing power

[22:10] <timotimo> that's great

[22:11] <tadzik> yeah, and it just happened

[22:11] <sergot> tadzik: do you know when and where will be available photos and videos from the whole PLPW (made by Wendy and others?)

[22:11] <sergot> Wendy, right?

[22:11] <tadzik> one of the attendees asked "can I record this?" "yeah, sure, go ahead"

[22:11] <tadzik> sergot: oh, I have those too

[22:11] <tadzik> but it's like 7 gigabytes

[22:11] <sergot> No way, really?

[22:11] <tadzik> aye

[22:11] <tadzik> full-frame Nikon D800 :D

[22:12] <sergot> So... Could you send me this via postmail?

[22:12] <tadzik> I'll run some perl script to compress those a bit and put it somewhere for people to look at

[22:12] <tadzik> again, when I get some tuits

[22:12] <sergot> Great. :)

[22:12] <sergot> Looking forward. :)

[22:13] <sorear> postmail, eh

[22:13] <sorear> o/ sergot

[22:13] <tadzik> I'm looking through them. They're good :)

[22:14] <tadzik> jest has some pictures too, I believe

[22:15] <sergot> sorear: o/

[22:15] <sergot> sorear: did I wrote something not correctly? :P

[22:15] <sergot> write*

[22:18] <sorear> I just don't think I've heard postmail before.  It's cute

[22:19] <sergot> sorear: :)

[22:19] <sergot> It should be post or mail, shouldn't it? :)

[22:19] <tadzik> snail-mail, maybe :)

[22:19] <sergot> ok, thanks. :)

[22:27] *** chrisdev joined
[22:34] <lizmat> tadzik++ + pjotr++ + pjotr++ for PLPW!

[22:43] *** adu joined
[22:45] <dalek> perl6-bench: 2ef95b7 | (Geoffrey Broadwell)++ | TODO:

[22:45] <dalek> perl6-bench: Add a TODO sublist for known-slow tasks; add one item there for the qq:to// unindent

[22:45] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/2ef95b72cb

[22:45] <dalek> perl6-bench: a44ac08 | (Geoffrey Broadwell)++ | bench:

[22:45] <dalek> perl6-bench: Chase a Rakudo behavior change

[22:45] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/a44ac088b8

[22:47] <sergot> lizmat: o/

[22:48] <lizmat> sergot: /o

[22:55] <masak> o/

[22:55] <sorear> ō

[22:56] * lizmat hopes masak is home safe

[22:56] <masak> fsvo "home", yes :)

[22:56] <masak> (teaching tomorrow. I'm in a hotel room, feeling a bit like a character in a William Gibson novel)

[22:57] <lizmat> the life of a globe trotter  :-)

[22:57] <lizmat> see you soon in Austin, TX !

[22:57] <masak> :>

[22:57] <masak> my point exactly.

[22:58] <masak> I bet if the sky weren't night-black, it'd have the color of television, tuned to a dead channel.

[23:05] *** kurahaupo left
[23:07] <sorear> I see what you did there :P

[23:08] <masak> :)

[23:12] *** ajr joined
[23:13] *** ajr is now known as Guest42799

[23:17] *** crab2313 joined
[23:21] *** Guest42799 is now known as ajr_

[23:22] <masak> 'night, #perl6

[23:25] *** census joined
[23:28] *** PacoAir joined
[23:29] <timotimo> jnthn: i'm a bit bummed that apparently i can't work on $/ in the debugger after a match came through

[23:29] <timotimo> is that right?

[23:34] *** berekuk left
[23:38] *** PacoAir left
[23:39] *** berekuk joined
[23:42] *** btyler joined
[23:58] *** berekuk left
