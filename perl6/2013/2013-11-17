[00:06] <dalek> rakudo/moar-support: a2521ac | jnthn++ | src/ (2 files):

[00:06] <dalek> rakudo/moar-support: First pass at p6bindassert.

[00:06] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/a2521ac2dc

[00:09] *** berekuk left
[00:11] *** mtk left
[00:17] *** berekuk joined
[00:23] *** mtk joined
[00:30] *** ssutch joined
[00:30] *** dmol left
[00:34] *** ssutch left
[00:44] <dalek> nqp: b766b07 | jnthn++ | src/vm/moar/QAST/QAST (2 files):

[00:44] <dalek> nqp: Mechanism for auto-decont, and start using it.

[00:44] <dalek> nqp: 

[00:44] <dalek> nqp: Will likely have to mark some more ops up as needed, but this covers

[00:44] <dalek> nqp: the cases Rakudo setting compilation immediately hits.

[00:44] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b766b07251

[00:47] <dalek> rakudo/moar-support: 641fa0f | jnthn++ | src/core/traits.pm:

[00:47] <dalek> rakudo/moar-support: Remove debugging code.

[00:47] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/641fa0f738

[00:47] <dalek> rakudo/moar-support: d525252 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[00:47] <dalek> rakudo/moar-support: Implement type captures.

[00:47] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/d5252523c1

[00:49] *** ssutch joined
[00:49] *** ssutch left
[00:53] *** ssutch joined
[01:02] *** BenGoldberg joined
[01:05] *** Rotwang left
[01:06] <dalek> rakudo/moar-support: 5318273 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[01:06] <dalek> rakudo/moar-support: Most of optional positional arg handling.

[01:06] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/53182734b1

[01:15] *** PacoAir left
[01:16] <dalek> rakudo/moar-support: 6b33011 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[01:16] <dalek> rakudo/moar-support: Fix a couple of binder thinkos.

[01:16] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/6b3301188f

[01:20] *** wrp6 left
[01:20] *** cibs left
[01:20] *** wrp6 joined
[01:21] *** cibs joined
[01:23] *** bonsaikitten left
[01:25] *** ssutch left
[01:27] *** bonsaikitten joined
[01:28] <dalek> rakudo/moar-support: 000c8fc | jnthn++ | src/vm/moar/ops/perl6_ops.c:

[01:28] <dalek> rakudo/moar-support: Stub p6capturelex out for now.

[01:28] <dalek> rakudo/moar-support: 

[01:28] <dalek> rakudo/moar-support: Needs a re-visit at some point.

[01:28] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/000c8fc135

[01:33] *** xenoterracide left
[01:33] *** xenoterracide joined
[01:35] *** bonsaikitten left
[01:35] *** bonsaikitten joined
[01:35] *** berekuk left
[01:49] *** xenoterracide left
[01:49] *** xenoterracide joined
[01:50] *** kurahaupo left
[02:06] *** tgt left
[02:08] *** xenoterracide left
[02:16] *** raiph joined
[02:23] *** cooper left
[02:40] *** xinming left
[02:41] *** xinming joined
[02:55] *** langdon_ left
[03:07] *** xenoterracide joined
[03:08] *** MikeFair_ left
[03:11] <tadzik> I think our new Makefiles are confused

[03:12] <tadzik> https://gist.github.com/tadzik/7508585

[03:12] <tadzik> neither of those specifies what realclean is

[03:15] *** WABIHIP joined
[03:29] * moritz puts it onto his mental TODO list, but tries that "sleep" thingy first

[03:30] <tadzik> we're 8 timezones away, and both sleepy. Curious :)

[03:31] *** raiph left
[03:45] *** MikeFair_ joined
[03:45] *** xenoterracide left
[03:45] *** xenoterracide_ joined
[03:52] *** xenoterracide_ left
[03:52] *** ssutch joined
[03:53] *** xinming left
[03:54] *** cooper_ joined
[04:04] *** ssutch left
[04:07] *** kurahaupo joined
[04:14] *** preflex_ joined
[04:14] *** ChanServ sets mode: +v preflex_

[04:15] *** preflex left
[04:15] *** preflex_ is now known as preflex

[04:29] *** cooper_ left
[04:47] *** btyler left
[04:54] *** cooper_ joined
[04:58] <BenGoldberg> n: say "\x[10ffff]".succ

[04:58] <camelia> niecza v24-98-g473bd20: OUTPUT«WTF␤»

[04:59] <BenGoldberg> r: say "\x[10ffff]".succ

[04:59] <camelia> rakudo-parrot 5d2cbe: OUTPUT«===SORRY!===␤Invalid character for UTF-8 encoding␤␤»

[04:59] <camelia> ..rakudo-jvm 5d2cbe: OUTPUT«===SORRY!===␤Invalid code-point U+10FFFF␤»

[04:59] <BenGoldberg> r: say "\x[10ffff]"

[04:59] <camelia> rakudo-parrot 5d2cbe: OUTPUT«===SORRY!===␤Invalid character for UTF-8 encoding␤␤»

[04:59] <camelia> ..rakudo-jvm 5d2cbe: OUTPUT«===SORRY!===␤Invalid code-point U+10FFFF␤»

[04:59] <BenGoldberg> n: say "\x[10ffff]"

[04:59] <camelia> niecza v24-98-g473bd20: OUTPUT«\x{10FFFF}␤»

[05:02] <BenGoldberg> rn: say "\x[10FFFd]".succ.chars

[05:02] <camelia> rakudo-parrot 5d2cbe: OUTPUT«1␤»

[05:02] <camelia> ..rakudo-jvm 5d2cbe: OUTPUT«2␤»

[05:02] <camelia> ..niecza v24-98-g473bd20: OUTPUT«3␤»

[05:07] <BenGoldberg> rn: say "\x[10FFFd]".succ.comb

[05:07] <camelia> niecza v24-98-g473bd20: OUTPUT«W T F␤»

[05:07] <camelia> ..rakudo-jvm 5d2cbe: OUTPUT«java.nio.charset.MalformedInputException: Input length = 1␤  in block  at /tmp/gqosBJ4L1z:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1086␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1292␤  in any command_eval at gen/jvm/stage2/NQPHLL.nqp:1196…»

[05:07] <camelia> ..rakudo-parrot 5d2cbe: OUTPUT«􏿽␤»

[05:18] *** BenGoldberg left
[05:23] *** btyler joined
[05:25] <dalek> specs: 7e64b6c | larry++ | S17-concurrency.pod:

[05:25] <dalek> specs: make winner implicitly check a channel's done too

[05:25] <dalek> specs: 

[05:25] <dalek> specs: The concept of making a channel have a boolean operator to return the

[05:25] <dalek> specs: done promise was bad for two reasons: 1) the logic of it was backwards

[05:25] <dalek> specs: from promise booleans, and 2) making a boolean op return a non-boolean

[05:25] <dalek> specs: is just a bad idea, and the person who proposed it should be ashamed.

[05:25] <dalek> specs: review: https://github.com/perl6/specs/commit/7e64b6ca7a

[05:26] <TimToady> (boolean on a promise is still perfectly fine though)

[05:28] <TimToady> TimToady-- for proposing that :)

[05:38] <dalek> specs: 1e5230f | larry++ | S17-concurrency.pod:

[05:38] <dalek> specs: clarify why more/done distinction in winner works

[05:38] <dalek> specs: 

[05:38] <dalek> specs: more only makes sense on on channels, while done only works on promises, and

[05:38] <dalek> specs: hence will happily autocoerce a channel to its 'done' promise.

[05:38] <dalek> specs: review: https://github.com/perl6/specs/commit/1e5230f024

[05:48] *** xenoterracide_ joined
[05:50] <lue> apparently, clearing out all parrot related things in /usr/local magically worked. Must've been some change between 5.9.0-version commits.

[05:52] <lue> *sigh* nevermind, just me doing the usual simple messups. Stupid parrot... >:(

[05:52] <dalek> specs: d4ca726 | larry++ | S17-concurrency.pod:

[05:52] <dalek> specs: some typos/fossils in combine

[05:52] <dalek> specs: 

[05:52] <dalek> specs: make $:v and $:k work as they do in winner

[05:52] <dalek> specs: review: https://github.com/perl6/specs/commit/d4ca72638c

[05:53] *** fridim_ joined
[05:55] <lue> OK, the 2013.10 tagged NQP doesn't bail out on me. Is it git blame/bisect/* that lets me find the offending change?

[06:09] <lue> FROGGS, jnthn, other interested parties: according to git bisect, commit fe517a2d50e719cf949cb1d27daa4ee1bb1538c0 of NQP is where I'm no longer able to use not-gen-parrot NQP.

[06:11] *** SamuraiJack joined
[06:11] <TimToady> r: say <a b>.combinations

[06:11] <camelia> rakudo-jvm 5d2cbe: OUTPUT«No such method 'combinations' for invocant of type 'Parcel'␤  in block  at /tmp/gwclTaRYDR:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1086␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1292␤  in any command_eval at gen/jvm/stage2/NQPHLL.nqp:1196…»

[06:11] <camelia> ..rakudo-parrot 5d2cbe: OUTPUT«No such method 'combinations' for invocant of type 'Parcel'␤  in block  at /tmp/3kMfrLW1Na:1␤  in any  at /tmp/3kMfrLW1Na:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.nqp:1133␤  in any evalfiles at …»

[06:12] <TimToady> r: say <a b>.list.combinations

[06:12] <camelia> rakudo-jvm 5d2cbe: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in block  at /tmp/itBcBO7Zv_:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1086␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1292␤  in any command_eval at gen/jvm/stage2/NQPHLL.nqp:11…»

[06:12] <camelia> ..rakudo-parrot 5d2cbe: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in method combinations at gen/parrot/CORE.setting:7994␤  in block  at /tmp/2V5t_tjvcK:1␤  in any  at /tmp/2V5t_tjvcK:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval …»

[06:12] <lue> FROOGS, jnthn, o.i.p.: commenting out ASSERT_ARGS(COMPARE) in qrpa.pmc lets me go on, but I don't know the ramifications of doing this (assuming it'll finish compiling.)

[06:13] <TimToady> r: say <a b>.list.combinations(0..2)

[06:13] <camelia> rakudo-parrot 5d2cbe, rakudo-jvm 5d2cbe: OUTPUT«a b a b␤»

[06:13] <TimToady> r: say <a b>.list.combinations(0..2).perl

[06:13] <camelia> rakudo-parrot 5d2cbe, rakudo-jvm 5d2cbe: OUTPUT«((), ("a",), ("b",), ("a", "b")).list␤»

[06:14] <TimToady> as list methods, combinations and permutations probably need to be in Any

[06:14] <TimToady> r: say <a b>.list.combinations(0..*).perl

[06:14] <camelia> rakudo-parrot 5d2cbe, rakudo-jvm 5d2cbe: OUTPUT«((), ("a",), ("b",), ("a", "b")).list␤»

[06:14] <TimToady> also needs to default range to that one

[06:16] * TimToady is glad the methods are finally there though

[06:17] * lue agrees on both improvements

[06:17] <lue> r: say <a b c>.list.combinations(0..1).perl

[06:17] <camelia> rakudo-parrot 5d2cbe, rakudo-jvm 5d2cbe: OUTPUT«((), ("a",), ("b",), ("c",)).list␤»

[06:18] <TimToady> r: say <a b c d e f g h>.list.combinations(0..*)[^20].perl

[06:18] <camelia> rakudo-parrot 5d2cbe, rakudo-jvm 5d2cbe: OUTPUT«((), ("a",), ("b",), ("c",), ("d",), ("e",), ("f",), ("g",), ("h",), ("a", "b"), ("a", "c"), ("a", "d"), ("a", "e"), ("a", "f"), ("a", "g"), ("a", "h"), ("b", "c"), ("b", "d"), ("b", "e"), ("b", "f"))␤»

[06:19] <TimToady> r: say <a b c d e f g h>.list.combinations(5..*)[^20].perl

[06:19] <lue> so so the argument means "give me $x..$y elem combination lists", correct? (That's the only sensible thing I can see anyhow)

[06:19] <camelia> rakudo-parrot 5d2cbe, rakudo-jvm 5d2cbe: OUTPUT«(("a", "b", "c", "d", "e"), ("a", "b", "c", "d", "f"), ("a", "b", "c", "d", "g"), ("a", "b", "c", "d", "h"), ("a", "b", "c", "e", "f"), ("a", "b", "c", "e", "g"), ("a", "b", "c", "e", "h"), ("a", "b", "c", "f", "g"), ("a", "b", "c", "f…»

[06:19] <TimToady> yes

[06:23] <TimToady> looks like we can simplify http://rosettacode.org/wiki/Subset_sum_problem#Perl_6 now

[06:30] <TimToady> though it would appear to not work with the built-in now, perhaps due to a 'nodal' problem

[06:35] *** jac50 joined
[06:36] *** jac50 is now known as lemOn91

[06:40] <TimToady> no, more likely due to .combinations returning parcels rather than arrays

[06:40] <TimToady> there's not much point in flattening there...

[06:43] <TimToady> yeah, requires a .tree (and .lol still doesn't work, sigh), though I believe .combinations is specced to return a list of Array, or equivalent non-flattening object

[06:43] <TimToady> so returning list of Parcel is wrongish

[06:43] *** btyler left
[06:45] <lue> TimToady: I imagine S09 will/should receive S17's level of attention after S17 is done :)

[06:46] <TimToady> it'll receive more attention when someone starts implementing it :)

[06:48] <TimToady> r: <a b c>.list.combinations.lol.perl.say

[06:48] <camelia> rakudo-jvm 5d2cbe: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in block  at /tmp/psR41Ij02G:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1086␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1292␤  in any command_eval at gen/jvm/stage2/NQPHLL.nqp:11…»

[06:48] <camelia> ..rakudo-parrot 5d2cbe: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in method combinations at gen/parrot/CORE.setting:7994␤  in block  at /tmp/KKVI9ndIGc:1␤  in any  at /tmp/KKVI9ndIGc:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval …»

[06:48] <TimToady> r: <a b c>.list.combinations(*).lol.perl.say

[06:48] <camelia> rakudo-parrot 5d2cbe: OUTPUT«Cannot call 'combinations'; none of these signatures match:␤:(List : Int $of, Mu *%_)␤:(List : Range $of = { ... }, Mu *%_)␤  in any  at gen/parrot/BOOTSTRAP.nqp:1218␤  in any  at gen/parrot/BOOTSTRAP.nqp:1209␤  in method combinations at gen/pa…»

[06:48] <camelia> ..rakudo-jvm 5d2cbe: OUTPUT«Cannot call 'combinations'; none of these signatures match:␤:(List : Int $of, Mu *%_)␤:(List : Range $of = { ... }, Mu *%_)␤  in any  at gen/jvm/BOOTSTRAP.nqp:1201␤  in block  at /tmp/gxt_Fn466O:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1086␤…»

[06:48] <TimToady> r: <a b c>.list.combinations(0..*).lol.perl.say

[06:48] <camelia> rakudo-parrot 5d2cbe, rakudo-jvm 5d2cbe: OUTPUT«LoL.new(ListIter.new())␤»

[06:48] <TimToady> sigh

[06:50] *** xenoterracide_ left
[06:51] <TimToady> r: <a b c>.list.combinations(2).lol.[1].perl.say

[06:51] <camelia> rakudo-parrot 5d2cbe, rakudo-jvm 5d2cbe: OUTPUT«Any␤»

[07:15] *** xenoterracide_ joined
[07:25] *** PZt left
[07:38] *** lemOn91 left
[07:50] *** PZt joined
[07:51] *** SamuraiJack_ joined
[07:53] *** SamuraiJack left
[08:14] *** nnunley left
[08:16] <emma> hi guys. Do any of you ever make Irssi scripts?

[08:21] <FROGGS> lue: that makes of course sense...

[08:23] <FROGGS> lue: I will care about today

[08:26] *** thou left
[08:31] *** SamuraiJack__ joined
[08:33] *** SamuraiJack_ left
[08:49] <dalek> nqp: d7adc6c | (Tobias Leich)++ | src/vm/parrot/pmc/qrpa.pmc:

[08:49] <dalek> nqp: protect ASSERT_ARGS

[08:49] <dalek> nqp: 

[08:49] <dalek> nqp: These are for debugging only as it seems.

[08:49] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d7adc6c134

[08:51] <dalek> rakudo/nom: 03c08f0 | (Tobias Leich)++ | tools/build/NQP_REVISION:

[08:51] <dalek> rakudo/nom: bump nqp revision, to get ASSERT_ARGS fix

[08:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/03c08f0e09

[08:51] <FROGGS> lue: that should fix it

[08:53] * FROGGS ticks TODO item 1

[08:56] <dalek> rakudo/moar-support: 5d2cbe4 | moritz++ | src/core/Backtrace.pm:

[08:56] <dalek> rakudo/moar-support: Fix classification of errors as coming from the setting

[08:56] <dalek> rakudo/moar-support: 

[08:56] <dalek> rakudo/moar-support: the build system refactor changed the file name of the generated

[08:56] <dalek> rakudo/moar-support: CORE.setting file

[08:56] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/5d2cbe4d88

[08:56] <dalek> rakudo/moar-support: 03c08f0 | (Tobias Leich)++ | tools/build/NQP_REVISION:

[08:56] <dalek> rakudo/moar-support: bump nqp revision, to get ASSERT_ARGS fix

[08:56] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/03c08f0e09

[08:56] <dalek> rakudo/moar-support: 5f8369c | (Tobias Leich)++ | / (2 files):

[08:56] <dalek> rakudo/moar-support: Merge branch 'nom' of github.com:rakudo/rakudo into moar-support

[08:56] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/5f8369ca91

[08:58] *** Rotwang joined
[09:31] *** kivutar joined
[09:51] <dalek> rakudo/moar-support: 632b44b | (Tobias Leich)++ | Configure.pl:

[09:51] <dalek> rakudo/moar-support: display nqp+backend version info

[09:51] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/632b44bd79

[09:51] <FROGGS> Using /home/froggs/dev/nqp/install/bin/nqp-p (version 2013.10-246-gd7adc6c / Parrot 5.9.0).

[09:51] <FROGGS> Using /home/froggs/dev/rakudo/../nqp/install/bin/nqp-j (version 2013.10-246-gd7adc6c / OpenJDK 1.7.0_25).

[09:51] <FROGGS> Using /home/froggs/dev/rakudo/../nqp/install/bin/nqp-m (version 2013.10-246-gd7adc6c / MoarVM 2013.10-138-g9e56dc1).

[09:56] *** fridim_ left
[09:56] <dalek> rakudo/moar-support: 5641202 | (Tobias Leich)++ | tools/build/Makefile-Moar.in:

[09:56] <dalek> rakudo/moar-support: rules like m-install should only care about moar

[09:56] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/5641202fcc

[10:02] <moritz> should realclean delete config.status too?

[10:03] <FROGGS> I dunno

[10:04] <dalek> rakudo/moar-support: adfa55e | (Tobias Leich)++ | tools/build/Makefile-Moar.in:

[10:04] <dalek> rakudo/moar-support: add dynext/*.[o|so] files to rule m-clean

[10:04] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/adfa55e6a1

[10:05] <FROGGS> moritz: are you adding the rule `realclean` or shall I?

[10:05] <moritz> FROGGS: I'm doing it

[10:05] <FROGGS> k

[10:05] <FROGGS> I thought so :o)

[10:07] <FROGGS> btw, we should either add a \n to $outfile in fill_template_file or add another newline to every Makefile.in

[10:07] <FROGGS> because slurp seems to remove one

[10:07] <FROGGS> and the generated makefile looks weird at "j-testclean:"

[10:08] <FROGGS> k, all TODO items ticked :o)

[10:13] *** bbkr1 joined
[10:14] <moritz> I have a local patch for realclean, but I need to finish rebuilding NQP to be able to test it

[10:15] <dalek> rakudo/moar-support: 193eda0 | moritz++ | tools/build/Makefile- (4 files):

[10:15] <dalek> rakudo/moar-support: clean up realclean

[10:15] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/193eda0bfc

[10:17] <FROGGS> moritz: do you still have problems to build rakudo@moar?

[10:18] <moritz> FROGGS: haven't tried yet

[10:21] <moritz> FROGGS: same problem as before

[10:23] <FROGGS> moritz: and you made realclean in moarvm?

[10:23] <dalek> rakudo/moar-support: ab3f1a8 | moritz++ | tools/lib/NQP/Configure.pm:

[10:23] <dalek> rakudo/moar-support: [Configure] add source comments to generated Makefile

[10:23] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/ab3f1a8922

[10:24] <FROGGS> ohh, that is better

[10:24] <moritz> not yet, trying again with realclean

[10:25] <FROGGS> and I fetch a fresh rakudo, and try a --gen-nqp --gen-moar

[10:42] <timotimo> ohai o/

[10:44] <FROGGS> o/

[10:44] *** avar left
[10:45] *** kivutar left
[10:48] <timotimo> GlitchMr: your $a (+=) 1 is missing the important "cas" part on the right hand side

[10:51] *** avar joined
[10:51] *** avar left
[10:51] *** avar joined
[10:55] *** berekuk joined
[11:01] *** kivutar joined
[11:03] <dalek> nqp: 596687d | (Tobias Leich)++ | tools/build/MOAR_REVISION:

[11:03] <dalek> nqp: bump moar revision

[11:03] <dalek> nqp: review: https://github.com/perl6/nqp/commit/596687d62c

[11:05] <dalek> rakudo/moar-support: 4451f60 | (Tobias Leich)++ | tools/build/NQP_REVISION:

[11:05] <dalek> rakudo/moar-support: bump nqp rev which bumps moar rev

[11:05] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/4451f60c90

[11:24] <itz> Error while compiling op p6captureouters: No registered operation handler for 'p6captureouters' at gen/moar/stage2/QAST.nqp:4047  (/home/steve/sandbox/m0ar/MoarVM/languages/nqp/lib/QAST.moarvm:frame_name_1120:52)

[11:25] <itz> thats with moarvm of 20 min or so old and moar-support

[11:26] <timotimo> yeah, could be

[11:27] <timotimo> you could stub it if you want to :P

[11:32] <itz> I see moar seems to host nqp now how near on rakudo on moar?

[11:32] <itz> s/near on/near is

[11:33] <timotimo> jnthn is getting to like ~700 of the CORE.setting

[11:33] <timotimo> line*

[11:38] *** jaffa4 joined
[11:41] *** dmol joined
[11:45] <jaffa4> hi all

[11:45] <timotimo> hi

[11:45] <FROGGS> itz: the error you get is the thing where we are now, yes

[11:46] <itz> ok thanks just checking I hadn;t messed up!

[11:46] <FROGGS> :o)

[11:47] <timotimo> yay, i get further

[11:49] <FROGGS> \o/

[11:49] *** telex left
[11:50] <timotimo> Error while compiling op p6captureouters: No registered operation handler for 'p6captureouters'

[11:50] <timotimo> \o/

[11:50] <FROGGS> yeah baby :o)

[11:52] *** telex joined
[11:55] *** tgt joined
[12:14] * timotimo juggles lots of prefixes

[12:14] <timotimo> i should flatten out this hierarchy

[12:20] *** diakopter left
[12:20] *** diakopter joined
[12:20] *** denisboyun joined
[12:24] *** mtj_- left
[12:24] <moritz> one prefix to rule them all!

[12:24] *** mtj_ joined
[12:37] *** denisboyun left
[12:37] <jaffa4> Lexical '$*LINEPOSCACHE' not found in dynamic scope

[12:48] *** _ilbot left
[12:51] *** _ilbot joined
[12:58] <FROGGS> jaffa4: just declare it before calling .parse

[13:01] <jaffa4> ok. htanks

[13:01] <dalek> rakudo/moar-support: 0a4172e | (Tobias Leich)++ | / (2 files):

[13:01] <dalek> rakudo/moar-support: allow --gen-moar to be passed to nqp

[13:01] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/0a4172e7f9

[13:11] <dalek> rakudo/moar-support: 70290ce | (Tobias Leich)++ | / (2 files):

[13:11] <dalek> rakudo/moar-support: --gen-moar implies --backends=moar, moritz++

[13:11] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/70290ce9a0

[13:11] <FROGGS> moritz: ^^

[13:22] *** beastd joined
[13:23] *** SamuraiJack__ left
[13:26] *** darutoko joined
[13:27] *** moritz left
[13:27] *** moritz joined
[13:36] *** PacoAir joined
[13:37] *** PacoAir left
[13:38] *** denis_boyun joined
[13:50] *** PacoAir joined
[14:12] *** SamuraiJack__ joined
[14:15] *** denis_boyun left
[14:15] *** denis_boyun joined
[14:21] *** denis_boyun_ joined
[14:22] *** denis_boyun left
[14:22] *** pecastro_ joined
[14:24] *** pecastro left
[14:26] <dalek> rakudo/moar-support: 7bf18a5 | jnthn++ | src/vm/moar/ (2 files):

[14:26] <dalek> rakudo/moar-support: An attempt at p6captureouters.

[14:26] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/7bf18a5dd1

[14:27] <dalek> ecosystem: fd4e091 | jaffa4++ | META.list:

[14:27] <dalek> ecosystem: Update META.list

[14:27] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/fd4e091fe2

[14:32] *** woolfy left
[14:32] *** woolfy1 joined
[14:41] <dalek> nqp: ce7482c | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[14:41] <dalek> nqp: Scatter more auto-decont.

[14:41] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ce7482c0b6

[14:41] <dalek> rakudo/moar-support: ab46918 | (Tobias Leich)++ | Configure.pl:

[14:41] <dalek> rakudo/moar-support: --gen-moar implies --gen-nqp

[14:41] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/ab46918107

[14:41] *** woolfy1 left
[14:42] *** woolfy joined
[14:42] *** lizmat_ joined
[14:43] *** FROGGS[mobile] joined
[14:44] *** lizmat left
[14:44] <colomon> no chatter this morning, just commits, eh?

[14:45] <jnthn> Shhh! :P

[14:49] *** darutoko- joined
[14:51] *** nnunley joined
[14:52] *** darutoko left
[15:04] *** rindolf joined
[15:21] *** Woodi left
[15:21] *** ajr joined
[15:21] *** Woodi joined
[15:22] *** ajr is now known as Guest90914

[15:22] *** Guest90914 is now known as ajr_

[15:32] *** BenGoldberg joined
[15:36] *** Woodi left
[15:36] *** Woodi joined
[15:38] <BenGoldberg> rn: .say, .chars.say for "\x[10FFFD]", "\x[10FFFD]".succ;

[15:38] <camelia> niecza v24-98-g473bd20: OUTPUT«􏿽␤2␤WTF␤3␤»

[15:38] <camelia> ..rakudo-parrot 03c08f: OUTPUT«􏿽␤1␤􏿽␤1␤»

[15:38] <camelia> ..rakudo-jvm 03c08f: OUTPUT«􏿽␤2␤􏿽␤2␤»

[15:39] <BenGoldberg> rn: .comb.say for "\x[10FFFD]", "\x[10FFFD]".succ;

[15:39] <camelia> rakudo-parrot 03c08f: OUTPUT«􏿽␤􏿽␤»

[15:39] <camelia> ..niecza v24-98-g473bd20: OUTPUT«􏿽␤W T F␤»

[15:39] <camelia> ..rakudo-jvm 03c08f: OUTPUT«java.nio.charset.MalformedInputException: Input length = 1␤  in block  at gen/jvm/CORE.setting:7258␤  in block  at gen/jvm/CORE.setting:7122␤  in method gimme at gen/jvm/CORE.setting:7540␤  in block  at /tmp/NSku78nOvd:1␤  in any eval at gen/jvm/s…»

[15:40] <BenGoldberg> A little consistancy would be nice :P

[15:42] <dalek> rakudo/moar-support: 7d98d41 | jnthn++ | src/vm/moar/ (2 files):

[15:42] <dalek> rakudo/moar-support: p6box_[ins] for Moar.

[15:42] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/7d98d417ad

[15:42] <dalek> rakudo/moar-support: 1530675 | jnthn++ | src/vm/moar/Perl6/Ops.nqp:

[15:42] <dalek> rakudo/moar-support: Fix p6bindassert code-gen.

[15:42] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/15306755d7

[15:42] <dalek> rakudo/moar-support: d865340 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[15:42] <dalek> rakudo/moar-support: Named slurpy param binding.

[15:42] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/d8653408d8

[15:42] <dalek> rakudo/moar-support: 0e26597 | jnthn++ | src/vm/moar/Perl6/Ops.nqp:

[15:42] <dalek> rakudo/moar-support: Set up boxing handling.

[15:42] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/0e265975ec

[15:43] <jnthn> BenGoldberg: They consistently think yo're doing something weird :P

[15:45] <BenGoldberg> Well, I try to be consistently weird :)

[15:46] <BenGoldberg> Parrot's probably the most correct there -- it's a string of just one codepoint, no matter how many bytes it takes up.

[15:57] *** xinming joined
[16:02] *** xinming left
[16:03] *** xinming joined
[16:03] <xinming> sorry again if I just post the question to wrong channel. (network disconnection)

[16:06] *** jac50 joined
[16:07] *** jac50 is now known as lemOn91

[16:11] <dalek> rakudo/moar-support: 864b986 | jnthn++ | src/vm/moar/Perl6/Ops.nqp:

[16:11] <dalek> rakudo/moar-support: Better bind fail error reporting.

[16:11] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/864b98604b

[16:16] *** DarthGandalf left
[16:19] *** DarthGandalf joined
[16:37] *** xinming left
[16:37] *** xinming joined
[16:40] *** darutoko joined
[16:41] *** berekuk left
[16:42] *** darutoko- left
[16:47] *** FROGGS[mobile] left
[16:52] *** berekuk joined
[17:18] *** thou joined
[17:21] *** ajr joined
[17:21] *** ajr_ left
[17:21] *** ajr is now known as Guest57020

[17:21] *** Guest57020 is now known as ajr_

[17:23] *** dmol left
[17:24] *** colleen93 joined
[17:25] <colleen93> a/s/l?

[17:27] <colleen93> tadzik: thanks for inviting me here. But no one wants to cyber.

[17:27] <tadzik> :|

[17:27] *** dmol joined
[17:27] <jnthn> tadzik: You might have mis-explained what we do here... :P

[17:27] * TimToady is not familiar with "cyber" as a verb.  :)

[17:27] <tadzik> well I do :P

[17:28] <tadzik> jnthn: oh, colleen93 knows exactly what we're doing here

[17:29] <TimToady> Mostly we just cyber Perl 6 here, and anything related to it, which is pretty much everything...

[17:29] <colleen93> 'perl6: say 3;'

[17:30] <TimToady> doesn't want the quoteses

[17:30] <nwc10> r: say any('male', 'female', 'bot')

[17:30] <camelia> rakudo-parrot 03c08f, rakudo-jvm 03c08f: OUTPUT«any(male, female, bot)␤»

[17:31] <jnthn> r: say ('male', 'female', 'bot').pick

[17:31] <camelia> rakudo-parrot 03c08f, rakudo-jvm 03c08f: OUTPUT«female␤»

[17:31] <nwc10> r: say ('male', 'female', 'bot').pick

[17:31] <camelia> rakudo-parrot 03c08f: OUTPUT«male␤»

[17:31] <camelia> ..rakudo-jvm 03c08f: OUTPUT«bot␤»

[17:31] <nwc10> good. it is at least slightly random

[17:32] <timotimo> you can't know that

[17:32] <nwc10> well, it's not identical. I guess the random number generator isn't simply returning 42

[17:33] <colleen93> timtimo: a/s/l?

[17:33] *** rindolf left
[17:34] *** rindolf joined
[17:34] *** xinming left
[17:34] *** xinming joined
[17:37] <colleen93> rakudo: niecza: std: eval

[17:37] <camelia> rakudo-parrot 03c08f, rakudo-jvm 03c08f: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling proto of 'eval' requires arguments (lines 1, 1)␤    Expected: :(, )␤»

[17:37] <timotimo> huh, that's unexpected.

[17:39] <colleen93> tadzik: brt. cu in a bit

[17:39] *** colleen93 left
[17:41] *** dmol left
[17:42] *** dmol joined
[17:45] *** huf left
[17:48] <dalek> nqp: b97cea4 | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[17:48] <dalek> nqp: Implement nqp::chain compilation.

[17:48] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b97cea48da

[17:52] <jaffa4> could anyone try to install a module?

[17:53] <jaffa4> some files are not installed when a I use a module

[17:54] * moritz successfully installed a module

[17:54] <jaffa4> try Perl6::Format

[17:54] <jaffa4> is fomat.pm installed for you?

[17:54] <jaffa4> format.pm

[17:54] *** felher left
[17:58] <dalek> rakudo/moar-support: 92a6a5f | jnthn++ | src/vm/moar/ops/perl6_ops.c:

[17:58] <dalek> rakudo/moar-support: Get p6capturelex working.

[17:58] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/92a6a5f52f

[18:01] *** stevan_ left
[18:04] *** huf joined
[18:15] <dalek> rakudo/moar-support: 9fe03f6 | jnthn++ | src/vm/moar/ (2 files):

[18:15] <dalek> rakudo/moar-support: Implement p6var.

[18:15] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/9fe03f6e6f

[18:19] *** fridim_ joined
[18:23] *** stevan_ joined
[18:24] *** stevan__ joined
[18:27] *** stevan_ left
[18:41] *** ajr_ left
[18:43] *** btyler joined
[18:46] *** kivutar left
[18:55] *** ponpon is now known as ponbiki

[18:58] *** bbkr1 left
[18:58] *** kivutar joined
[19:01] <dalek> rakudo/moar-support: 30b66f0 | jnthn++ | src/vm/moar/Perl6/Ops.nqp:

[19:01] <dalek> rakudo/moar-support: First pass at p6return.

[19:01] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/30b66f02c3

[19:01] <dalek> rakudo/moar-support: 486c40c | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[19:01] <dalek> rakudo/moar-support: Auto-boxing of native args.

[19:01] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/486c40c5d0

[19:03] *** cirnopaws joined
[19:03] <cirnopaws> Is this where I into perl 6?

[19:03] *** rurban1 joined
[19:03] <FROGGS> cirnopaws: what?

[19:04] <FROGGS> cirnopaws: you are missing a verb

[19:04] <jnthn> I think for most verbs I can think of, the answer is "yes" though :)

[19:04] <FROGGS> true

[19:04] <FROGGS> :o)

[19:04] <cirnopaws> hooray

[19:05] <FROGGS> cirnopaws: welcome :o)

[19:06] <moritz> p: say 'this is also the channel where #perl6 you, cirnopaws'

[19:06] <camelia> rakudo-parrot 03c08f: OUTPUT«this is also the channel where #perl6 you, cirnopaws␤»

[19:09] *** darutoko left
[19:11] <cirnopaws> woah did perl 5 have a repl?

[19:12] <moritz> cirnopaws: not built-in

[19:12] <moritz> but there's a popular one on CPAN, Devel::REPL iirc

[19:14] <lee_> there is another called reply https://metacpan.org/pod/release/DOY/Reply-0.34/bin/reply

[19:15] <lee_> it works out of the box, unlike Devel::REPL

[19:16] <dalek> rakudo/moar-support: f976a4a | jnthn++ | src/core/GatherIter.pm:

[19:16] <dalek> rakudo/moar-support: Make GatherIter contain something we can compile.

[19:16] <dalek> rakudo/moar-support: 

[19:16] <dalek> rakudo/moar-support: Just dies with NYI for now.

[19:16] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/f976a4a261

[19:18] <cirnopaws> I'm on windows for whatever reason. I installed rakudo-star, do I have to fix any path variables to use modules and what-not?

[19:19] <moritz> probably include C:\Rakudo\bin in PATH

[19:20] <cirnopaws> ty

[19:20] <dalek> rakudo/moar-support: c502b75 | (Tobias Leich)++ | src/core/ (2 files):

[19:20] <dalek> rakudo/moar-support: moar behaves like jvm here

[19:20] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/c502b753df

[19:26] *** denis_boyun_ left
[19:30] *** rurban1 left
[19:31] *** rindolf left
[19:36] *** MikeFair_ left
[19:37] *** kivutar_ joined
[19:42] *** Rotwang left
[19:44] *** sqirrel joined
[19:46] *** MikeFair_ joined
[19:53] <cirnopaws> who has a good joke

[19:55] <FROGGS> probably the CIA

[19:55] <FROGGS> (the hear much, you see)

[19:58] *** Rotwang joined
[19:59] *** xinming_ joined
[19:59] *** cooper_ left
[20:02] *** xinming left
[20:02] <japhb_> "Type check failed in assignment to '$!a'; expected 'Int' but got 'Int'" -- Now what the heck does *that* mean?

[20:02] *** denis_boyun joined
[20:03] <moritz> japhb_: are you using any foreign call stuff, or custom REPRs or so?

[20:03] * japhb_ wonders if somehow the meaning of Int changed between BEGIN time and run time

[20:03] <japhb_> No custom REPRs, no foreign call.  But I am using the metamodel to build the class in question.

[20:04] <flussence> maybe you used a "but" somewhere?

[20:04] <flussence> or some subtype clause...

[20:04] <moritz> r: sub f(Int $x) { say 42 }; { my constant Int = Str; f(Int) }

[20:04] <camelia> rakudo-parrot 03c08f, rakudo-jvm 03c08f: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'f' will never work with argument types (Str) (lines 1, 1)␤    Expected: :(Int $x)␤»

[20:04] <flussence> I've had that problem before though I don't remember how I caused it

[20:04] <timotimo> hehehe

[20:04] <moritz> r: sub f(Int $x) { say 42 }; { my class Int { } f(Int) }

[20:04] <camelia> rakudo-parrot 03c08f: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/xhfqRafKRo␤Two terms in a row␤at /tmp/xhfqRafKRo:1␤------> [32m(Int $x) { say 42 }; { my class Int { } [33m⏏[31mf(Int) }[0m␤    expecting any of:␤        statement list␤        h…»

[20:04] <camelia> ..rakudo-jvm 03c08f: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/bNhHXVvUcz␤Two terms in a row␤at /tmp/bNhHXVvUcz:1␤------> [32m(Int $x) { say 42 }; { my class Int { } [33m⏏[31mf(Int) }[0m␤    expecting any of:␤        statement list␤        hori…»

[20:05] <japhb_> flussence: No 'but's

[20:05] <FROGGS> r: sub f(Int $x) { say 42 }; { my class Int { }; f(Int) }

[20:05] <moritz> well, 'but' is also just implemented with the MOP

[20:05] <camelia> rakudo-parrot 03c08f, rakudo-jvm 03c08f: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'f' will never work with argument types (Int) (lines 1, 1)␤    Expected: :(Int $x)␤»

[20:06] <japhb_> But I'm not redefining Int ...

[20:06] <moritz> that's what they all say :-)

[20:06] <japhb_> Here, give me a sec, I'll push

[20:06] <moritz> often such bad error messages are related to parameterized types or mixins

[20:07] <jaffa4> cirnopaws: you need that , especially if you use panda.

[20:09] <dalek> p6-pb: c75a77e | (Geoffrey Broadwell)++ | lib/PB/Model/Generator.pm:

[20:09] <dalek> p6-pb: WIP: Continuing work on PB::Model::Generator

[20:09] <dalek> p6-pb: review: https://github.com/samuraisam/p6-pb/commit/c75a77e561

[20:11] <japhb_> moritz: https://github.com/samuraisam/p6-pb/blob/master/lib/PB/Model/Generator.pm#L37 and following

[20:12] <japhb_> Things actually get interesting around line 76, when the fields are converted to attributes.

[20:16] <moritz> japhb_: try to bind to $type rather than assigning

[20:17] <moritz> japhb_: otherwise you pass a container to as a the type constraint

[20:17] *** SamuraiJack__ left
[20:17] * japhb_ smacks his forehead

[20:17] <japhb_> I bet that's exactly it

[20:18] <japhb_> gah

[20:18] <jnthn> Then file a ticket so we can add the appropriate nqp::decont into the MOP code :)

[20:18] *** xinming_ left
[20:18] <moritz> japhb_: but printing a container actually prints the contents, which is why it it says "expected Int" instead of "expected Scalar"

[20:19] *** xinming joined
[20:20] <japhb_> moritz: Yeah, and annoyingly, .WHERE sees through the container as well, so I couldn't tell I had different Ints. :-(

[20:21] <japhb_> My test program gets much farther now, THANK YOU.

[20:21] <japhb_> (I should use DUMP more often)

[20:21] <moritz> japhb_: you're welcome

[20:27] * moritz tries to find out how Attribute initializes $!type

[20:27] *** zakharyas joined
[20:29] <moritz> ah, there's a .new method added in BOOTSTRAP.nqp

[20:29] <dalek> p6-pb: 7a984ac | (Geoffrey Broadwell)++ | lib/PB/Model/Generator.pm:

[20:29] <dalek> p6-pb: Fix tricky PB::Model::Generator bugs; moritz++

[20:29] <dalek> p6-pb: review: https://github.com/samuraisam/p6-pb/commit/7a984ac4a0

[20:29] <jnthn> yeah, that's the place to look

[20:31] <moritz> spectesting the patch...

[20:32] <jnthn> moritz++

[20:33] <dalek> p6-pb: 487caad | (Geoffrey Broadwell)++ | lib/PB/Binary/Writer.pm:

[20:33] <dalek> p6-pb: Easy parts of PB::Binary::Writer::write-message()

[20:33] <dalek> p6-pb: 

[20:33] <dalek> p6-pb: Only handles the very simplest cases, but it's a start.

[20:33] <dalek> p6-pb: review: https://github.com/samuraisam/p6-pb/commit/487caada1a

[20:33] *** stevan__ left
[20:35] <dalek> nqp: dbe228b | (Tobias Leich)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[20:35] <dalek> nqp: mapped nqp::readfh

[20:35] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dbe228b6b7

[20:43] <moritz> bah, rakudo on parrot doesn't build anymore with a ulimit of 1.5GB RAM

[20:43] <moritz> and 2GB doesn't prevent the spectests from freezing

[20:43] <cirnopaws> try 16

[20:44] <moritz> ENO16GB

[20:45] <flussence> throw swapfiles at it until it stops complaining? that's usually how I deal with it on my netbook...

[20:45] <moritz> flussence: then it won't stop the laptop from freezing :-)

[20:45] <timotimo> use zram :P

[20:46] <timotimo> (last time i tried zram to get rakudo to compile better without swap, it froze my whole system)

[20:47] <cirnopaws> download more ram

[20:47] <moritz> compile without ulimit, spectest with ulimit

[20:48] <moritz> ok, my patch compiles, that's a good first step

[20:48] <jnthn> Just don't do anything with usmile...

[20:49] *** kurahaupo left
[20:49] <dalek> specs: d318f70 | (Geoffrey Broadwell)++ | S13-overloading.pod:

[20:49] <dalek> specs: Fix 'is exported' typo in S13

[20:49] <dalek> specs: review: https://github.com/perl6/specs/commit/d318f709c4

[20:49] *** kurahaupo joined
[20:52] *** stevan_ joined
[20:52] *** stevan_ left
[20:53] <dalek> nqp: a91bdb0 | (Tobias Leich)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[20:53] <dalek> nqp: mapped nqp::writefh

[20:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a91bdb09bc

[20:53] *** stevan_ joined
[20:53] *** denis_boyun left
[20:54] <dalek> rakudo/moar-support: 9c2ae9b | (Tobias Leich)++ | src/core/IO.pm:

[20:54] <dalek> rakudo/moar-support: use readfh/tellfh/writefh on moar too

[20:54] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/9c2ae9bcb8

[20:55] * japhb_ is very happy to see the virtual hackathon going on today

[20:59] <dalek> rakudo/moar-support: e5bf94a | jnthn++ | src/vm/moar/Perl6/Ops.nqp:

[20:59] <dalek> rakudo/moar-support: Implement p6argvmarray.

[20:59] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/e5bf94a017

[21:00] *** ssutch joined
[21:06] <moritz> t/spec/S32-io/other.t aborts after 34 tests on rakudo-parrot for me

[21:07] <moritz> anybody else seen that?

[21:08] <dalek> rakudo/nom: 087165f | moritz++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[21:08] <dalek> rakudo/nom: decontainerize type constraints in Attribute.new

[21:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/087165fc3f

[21:08] <moritz> japhb_: that should make your recent commit unnecessary

[21:17] <japhb_> Thanks, moritz.

[21:18] <lue> .oO(Hm. How *does* rakudo know where the setting is by default?)

[21:19] <FROGGS> moritz: all 60 tests pass here

[21:19] <jaffa4> FROGGS:  what tests?

[21:19] <FROGGS> <moritz> t/spec/S32-io/other.t aborts after 34 tests on rakudo-parrot for me

[21:21] *** jaffa4 left
[21:29] *** jeff_s1 joined
[21:33] <dalek> rakudo/moar-support: c9ff211 | jnthn++ | src/vm/moar/ (2 files):

[21:33] <dalek> rakudo/moar-support: Implement p6list.

[21:33] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/c9ff211e47

[21:33] *** _sri left
[21:33] *** geekosaur left
[21:33] *** Celelibi left
[21:33] *** Bucciarati left
[21:33] *** japhb_ left
[21:34] *** japhb_ joined
[21:34] *** ribasushi left
[21:35] *** _sri joined
[21:35] *** ribasushi joined
[21:36] *** Bucciarati joined
[21:38] *** geekosaur joined
[21:38] <japhb_> What's the shorter way to say 'use Foo::Bar; constant Quux = Foo::Bar::Baz; # Now use Quux::Beer instead of Foo::Bar::Baz::Quux::Beer'?  And is it implemented yet?

[21:39] *** dwoldrich joined
[21:39] *** MikeFair_ left
[21:39] <FROGGS> japhb: use Foo::Bar:name<Quux>, which is NYI

[21:39] <FROGGS> well, sort of

[21:40] <FROGGS> I dunno if you could alias a symbol what you are currently immporting...

[21:42] <dalek> rakudo/moar-support: 5f60529 | jnthn++ | src/vm/moar/Perl6/Ops.nqp:

[21:42] <dalek> rakudo/moar-support: Implement p6bindattrinvres.

[21:42] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/5f605290e3

[21:44] <FROGGS> japhb: can't find it in S11

[21:44] *** Celelibi joined
[21:44] <FROGGS> japhb: use Foo::Bar:name<Quux> would just alias Foo::Bar to Quux, you could access Quux::Baz::Beer then

[21:46] *** MikeFair_ joined
[21:52] *** lemOn91 left
[21:59] *** zakharyas left
[22:09] *** berekuk left
[22:11] <japhb_> Nothing like asking a question, and immediately being pulled away from the computer ...

[22:11] *** fridim_ left
[22:12] <japhb_> FROGGS: Roger that

[22:13] <FROGGS> :o)

[22:13] <FROGGS> and fwiw, it should be doable to implement that kind of aliasing

[22:14] *** sqirrel left
[22:17] <dalek> rakudo/moar-support: 6820ab7 | jnthn++ | src/vm/moar/ (2 files):

[22:17] <dalek> rakudo/moar-support: Partial p6scalarfromdesc implementation.

[22:17] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/6820ab7be9

[22:17] <dalek> rakudo/moar-support: f870efd | jnthn++ | src/vm/moar/Perl6/Ops.nqp:

[22:17] <dalek> rakudo/moar-support: Fix thinkos in p6bindattrinvres.

[22:17] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/f870efd0a2

[22:17] <dalek> rakudo/moar-support: 1613c7f | jnthn++ | src/vm/moar/Perl6/Ops.nqp:

[22:17] <dalek> rakudo/moar-support: Implement p6definite.

[22:17] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/1613c7f20a

[22:18] <FROGGS> O.o

[22:25] *** PacoAir left
[22:29] *** kivutar_ left
[22:31] *** berekuk joined
[22:31] *** Rotwang left
[22:33] *** dmol left
[22:34] *** kivutar left
[22:35] <lizmat_> reading S11:391, I wonder whether "later" shouldn't be called "idle"

[22:35] <synopsebot> Link: http://perlcabal.org/syn/S11.html#line_391

[22:37] *** cirnopaws left
[22:38] <FROGGS> you mean S17:391

[22:38] <synopsebot> Link: http://perlcabal.org/syn/S17.html#line_391

[22:38] <FROGGS> funny thing is that S11 has an "later" near that place :o)

[22:39] <lizmat_> oops, yeah, you're right  :-)

[22:39] <jnthn> Wonder if I can find tuits to try and get the new syntax in before the NPW talk...

[22:40] <jnthn> lizmat_: BTW, on NPW - I'll be teaching on the Friday, but am free on the evening to do any pre-conf meetup.

[22:40] <lue> lizmat_: s/later/⌛/ clearly. :)

[22:41] <jnthn> lizmat_: On Sunday I gotta travel to Stockholm...

[22:41] <jnthn> lizmat_: Dunno when you're planning on coming/going.

[22:41] *** lizmat_ is now known as lizmat

[22:41] <lizmat> we're planning on getting in Copenhagen on Wed evening

[22:41] <jnthn> Oh wow...

[22:41] <lizmat> see some sights

[22:41] <jnthn> That's way early :)

[22:41] <jnthn> Yeah ;)

[22:41] <lizmat> hope the weather will cooperate

[22:42] <jnthn> It's not bad here.

[22:42] <lizmat> and on Thu I need to do the Rakudo release

[22:42] <jnthn> ook

[22:43] *** pippo joined
[22:43] <pippo> o/ #perl6

[22:44] <lizmat> jnthn: wrt to Channel.peek: how about it really doing a .poll, but keeping the result in the object until *the same thread* calls .poll ?

[22:45] <pippo> lizmat: Hello. Finally I reach you again.

[22:45] <jnthn> lizmat: That feels risky to me...

[22:45] <lizmat> sorry, distracted by a number of things

[22:45] <jnthn> lizmat: I think it's one of those semantics we'd look back on and think, "wtf..." 

[22:45] <lizmat> yeah, the moment I wrote it, my hair on the back of my neck went up

[22:46] <lizmat> maybe we need to get rid of .peek altogether

[22:46] <jnthn> Well, using it is kinda asking for trouble

[22:46] <jnthn> I can think of the odd legit use

[22:47] <pippo> lizmat: I found the problem on (^20_000).join(',').split(','). I.e. why on your machine is fast and on mine is slow.

[22:47] *** sftp left
[22:49] <lizmat> ok, what was it ?

[22:50] <pippo> lizmat: I think that the problem lies on the fact that map is lazy. If you ask to calculate last element of the array (i.e. (^20_000).join(',').split(',')[19_999]) you'll see what I mean ;-)

[22:50] <lizmat> ahhh..... good point

[22:50] *** sftp joined
[22:53] <lizmat> hmmm...   still "fastish" here:

[22:53] <lizmat> $ time perl6 -e 'say (^20_000).join(",").split(",")[19_999]' 

[22:53] <lizmat> 19999

[22:53] <lizmat> real	0m12.825s

[22:54] <lizmat> $ time perl6-p -e 'say (^20_000).join(",").split(",")[19_999]'

[22:54] <lizmat> 19999

[22:54] <lizmat> real	0m17.934s

[22:54] <pippo> what if you try this sintax: (^20_000).join(',').split(',')[*-1]

[22:54] <pippo> what if you try this syntax: (^20_000).join(',').split(',')[*-1]

[22:57] <lizmat> $ time perl6-p -e 'say (^20_000).join(",").split(",")[*-1]'

[22:57] <lizmat> 19999

[22:57] <lizmat> real	1m0.156s

[22:58] <pippo> And if you ask to print the entire array? 

[22:58] <lizmat> that will simply take longer again because of either the joining or the writing

[22:59] <lizmat> $ time perl6 -e 'say (^20_000).join(",").split(",")[*-1]'

[22:59] <lizmat> Unhandled exception: java.lang.OutOfMemoryError: Java heap space

[22:59] <lizmat> that's the jakudo versin

[22:59] <jnthn> Hm, that wants profiling...

[23:00] <lizmat> gather/take on jakudo, jnthn

[23:00] <lizmat> we know it has problems, no?

[23:00] <jnthn> Yeah, it stack overflows...

[23:00] <jnthn> And maybe other things...

[23:01] <jnthn> It's a quite horrible bug.

[23:01] <jnthn> If it's me who's going to fix it, I'll look at it when I do gather/take on MoarVM.

[23:01] <jnthn> I gotta understand the stuff in depth then anyway.

[23:02] <lizmat> indeed

[23:02] <jnthn> Thing that bothers me is the error is about *heap* space, not stack...

[23:02] <lizmat> that single line of code too 4G of RAM

[23:02] <jnthn> If it was about stack space I could comfortably attribute it to the bug I know.

[23:02] <jnthn> But the fact it's heap makes me think there's more to it.

[23:04] <lizmat> FWIW, on parakudo, that code eats up to 8G of RAM

[23:05] <jnthn> eek

[23:06] <jnthn> OK, so it's nothing backend specific

[23:06] <dalek> specs: 73baf14 | (Elizabeth Mattijsen)++ | S17-concurrency.pod:

[23:06] <dalek> specs: Some close/done fiddling, plus the -> a sender

[23:06] <dalek> specs: 

[23:06] <dalek> specs: Which makes we wonder, whether we shouldn't have a "keeper" for channels as

[23:06] <dalek> specs: well.

[23:06] <dalek> specs: review: https://github.com/perl6/specs/commit/73baf14124

[23:06] <jnthn> That want ssome good in-depth analysis to work out what's going on.

[23:07] <lizmat> I can't help but wonder whether it is some list reification issue

[23:07] <jnthn> I think so.

[23:08] <dalek> p6-pb: adb9120 | (Geoffrey Broadwell)++ | lib/PB/ (3 files):

[23:08] <dalek> p6-pb: Factor out RepeatClass enum to its own module

[23:08] <dalek> p6-pb: review: https://github.com/samuraisam/p6-pb/commit/adb91209b8

[23:08] <dalek> p6-pb: e1838b5 | (Geoffrey Broadwell)++ | lib/PB/Model/Generator.pm:

[23:08] <dalek> p6-pb: Quiet debug output; add reminder comment

[23:08] <dalek> p6-pb: 

[23:08] <dalek> p6-pb: Comment out the debug say's in PB::Model::Generator, and add a reminder

[23:08] <dalek> p6-pb: comment to deal with redefining existing message classes.

[23:08] <dalek> p6-pb: review: https://github.com/samuraisam/p6-pb/commit/e1838b5879

[23:08] <dalek> p6-pb: 87d6d28 | (Geoffrey Broadwell)++ | lib/PB/Binary/Writer.pm:

[23:08] <dalek> p6-pb: Handle submessages in PB::Binary::Writer::write-message()

[23:08] <dalek> p6-pb: review: https://github.com/samuraisam/p6-pb/commit/87d6d28c62

[23:08] <pippo> jhnthn: when you'll look at this pb on Moar do not forghet also this one:  my %h; for ^20_000 {%h.push($_ => $_)}

[23:08] <pippo> jhntn: which gives ... java.lang.OutOfMemoryError: Java heap space

[23:08] <dalek> specs: 2b89a45 | (Elizabeth Mattijsen)++ | S17-concurrency.pod:

[23:08] <dalek> specs: Remove Channel.peek, it is too dangerous

[23:08] <dalek> specs: 

[23:08] <dalek> specs: And a remnant from Thread times.

[23:08] <dalek> specs: review: https://github.com/perl6/specs/commit/2b89a45c0d

[23:10] <pippo> jnthn: when you'll look at this pb on Moar do not forghet also this one:  my %h; for ^20_000 {%h.push($_ => $_)}

[23:10] <pippo> jnthn: which gives ... java.lang.OutOfMemoryError: Java heap space

[23:10] <lizmat> and on that note, I bid you all a good night!

[23:10] <jnthn> 'night, lizmat 

[23:10] <FROGGS> gnight lizmat 

[23:10] <pippo> o/ gnight

[23:23] *** beastd left
[23:30] *** xenoterracide_ left
[23:38] *** logie joined
[23:42] *** berekuk left
[23:43] *** berekuk joined
[23:46] <pippo> good night #perl6

[23:46] *** pippo left
[23:46] <timotimo> jnthn: if you can give me a bit of guidance, i can try to make the new syntax for winner work

[23:47] <timotimo> i'm just not sure what exactly it needs to spit out

[23:48] <jnthn> timotimo: Ah, cool. I think the best way is to write a WINNER that takes arguments. Maybe just thing, block, thing, block, and default (I think "later"?) as a named maybe.

[23:48] <jnthn> timotimo: And just emit a call to that.

[23:49] <timotimo> do i have to treat "more" and "done" differently?

[23:50] <timotimo> i'm thinking i may have to write kind, thing, block, kind, thing, block instead for the arguments

[23:50] <jnthn> oh, huh...

[23:50] <jnthn> lemme check the latest spec

[23:50] <timotimo> iirc "more" fires if a channel has an item ready and "done" for a channel will fire if the channel's closed?

[23:51] *** xinming left
[23:51] <jnthn> oh wow

[23:51] <jnthn> that's changed more than I realized...

[23:52] <timotimo> when is that talk?

[23:52] <jnthn> Saturday :)

[23:52] *** xinming joined
[23:52] <timotimo> i could make that

[23:52] <jnthn> :)

[23:53] *** berekuk left
[23:53] <jnthn> Yeah, agree on the "kind" thingy

[23:54] *** benabik joined
[23:54] <jnthn> Or at least that we need to distinguish them somehow to the primtive.

[23:54] <timotimo> should that be an integer or a string?

[23:54] <jnthn> The operative sentence is "This works because more only ever works on channels, while done only ever works on promises, so it knows to check the promise of channel $c rather than $c itself."

[23:54] <timotimo> ah, done only works on promises, that's good to know.

[23:54] *** benabik left
[23:55] <jnthn> Yeah, but it means you need to grab the appropriate promise from the channel

[23:55] *** berekuk joined
[23:55] <timotimo> winner $p1, $p2 { done $p1 { ... }; done $p2 { ... } } # do we need the redundancy for $p1 and $p2 here?

[23:55] <jnthn> That's what I'm kinda wondering...

[23:56] <jnthn> I was a little surprised to see that

[23:56] <timotimo> i guess it's useful for the "done * { ... }" case

[23:56] <timotimo> but in the other cases it seems purely redundant

[23:56] <jnthn> I wonder if we can say you only have to mention such things if you're gonna use the *

[23:57] <jnthn> And even then you can mention others in the done/more clauses.

[23:57] <jnthn> Something still feels a tiny bit off with that...

[23:58] <timotimo> so the arguments to winner will be fed to any (well, "the one") block with a *, and any additional "done" blocks can fire as well. huh.

