[00:05] *** leprevost left
[00:07] *** btyler joined
[00:19] *** leprevost joined
[00:23] *** btyler left
[00:35] *** berekuk left
[00:35] *** preflex left
[00:36] *** berekuk joined
[00:44] *** adu joined
[00:53] *** LoRe_ joined
[00:55] *** btyler joined
[00:57] *** berekuk left
[00:58] *** preflex joined
[00:59] *** japhb_ left
[01:05] *** xilo joined
[01:06] *** FROGGS left
[01:11] *** bbkr joined
[01:13] *** kurahaupo left
[01:13] *** anuby joined
[01:17] *** adu left
[01:19] *** FROGGS joined
[01:21] *** kurahaupo joined
[01:22] *** mikemol left
[01:23] *** xilo left
[01:25] *** xilo joined
[01:34] *** adu joined
[01:42] *** thou left
[01:44] *** census left
[01:46] *** leprevost left
[01:48] *** prevost joined
[02:03] *** bonsaikitten left
[02:04] *** DreamingInCode1 left
[02:06] *** DreamingInCode joined
[02:09] *** bonsaikitten joined
[02:13] *** lustlife joined
[02:47] <diakopter> google+, y u completely different from 3 hours ago

[02:48] *** adu left
[02:49] <Pleiades`> imitating facebook?

[03:05] *** lizmat_ joined
[03:05] *** census joined
[03:08] *** smash_ joined
[03:08] *** dagurval joined
[03:09] *** ivan``_ joined
[03:10] *** odoacre_ joined
[03:10] *** nyuszika7h left
[03:10] *** szbalint_ joined
[03:10] *** atrodo_ joined
[03:10] *** nebuchad` joined
[03:11] *** rhr_ joined
[03:11] *** nyuszika7h joined
[03:12] *** mls joined
[03:12] *** [Coke]_ joined
[03:12] *** jlaire_ joined
[03:13] *** lizmat left
[03:13] *** atrodo left
[03:13] *** odoacre left
[03:13] *** atrodo_ is now known as atrodo

[03:14] *** pmichaud joined
[03:14] *** Rix joined
[03:27] <labster> rn: enum Toggle <MAGIC MORE_MAGIC>;  multi infix:<=> (Toggle $a, Toggle $b) { say "$a | $b"; nextsame; };  my Toggle $a = MAGIC; $a = MAGIC;

[03:27] <camelia> niecza v24-51-g009f999: OUTPUT«Toggle() | MAGIC␤Unhandled exception: Illegal control operator: nextsame/nextwith␤  at /home/p6eval/niecza/lib/CORE.setting line 1533 (nextsame @ 4) ␤  at /tmp/fqiMJQEnPN line 1 (infix:<=> @ 6) ␤  at /tmp/fqiMJQEnPN line 1 (mainline @ 5) ␤  at /home/p6eval…

[03:27] <camelia> ..rakudo 570d1d:  ( no output )

[03:28] <labster> .oO ( Maybe this work work if I set it to MORE_MAGIC? )

[03:31] *** bpalmer joined
[03:35] *** census left
[03:55] *** rindolf joined
[03:58] *** adu joined
[04:05] *** djanatyn joined
[04:12] *** adu left
[04:20] *** adu joined
[04:23] *** btyler left
[04:24] <lue> labster: here's the sub line for = in src/core/operators.pm:  sub infix:<=>(Mu \a, Mu \b) is rw {

[04:25] *** Psyche^ joined
[04:26] <lue> (It's not a multi in the core, so I doubt that would work)

[04:26] *** Patterner left
[04:26] *** Psyche^ is now known as Patterner

[04:37] *** dagurval left
[04:45] *** kurahaupo left
[04:45] *** kurahaupo joined
[04:49] *** anuby_ joined
[04:49] *** fhelmberger joined
[04:50] *** fhelmberger left
[04:51] *** konundra joined
[04:52] *** anuby left
[05:00] *** thou joined
[05:03] *** dmol joined
[05:12] *** erkan joined
[05:12] *** erkan left
[05:12] *** erkan joined
[05:23] *** rindolf left
[05:23] *** rindolf joined
[05:30] *** rindolf left
[05:30] *** rindolf joined
[05:37] *** rindolf left
[05:38] *** rindolf joined
[05:48] *** rindolf left
[05:48] *** rindolf joined
[05:54] *** kurahaupo left
[05:56] *** fhelmberger joined
[05:57] *** rindolf left
[05:58] *** SamuraiJack joined
[05:58] *** rindolf joined
[06:02] *** rindolf left
[06:03] *** rindolf joined
[06:08] *** rindolf left
[06:11] *** prevost left
[06:17] *** dmol left
[06:26] *** FROGGS left
[06:31] *** _jaldhar_ left
[06:45] *** nebuchad` is now known as nebuchadnezzar

[06:47] <lizmat_> good *, #perl6!

[06:48] <sorear> lizmat_!

[06:53] *** kaleem joined
[07:05] * jnthn yawns

[07:05] <moritz> \o *

[07:06] <jnthn> Teaching today, so only occasionally about.

[07:07] *** domidumont joined
[07:11] *** bpalmer left
[07:13] *** brrt joined
[07:17] *** DreamingInCode left
[07:31] *** jlaire_ is now known as jlaire

[07:40] *** FROGGS joined
[07:41] *** domidumont left
[07:42] *** domidumont joined
[07:48] *** sqirrel joined
[07:53] *** kaleem left
[07:58] *** berekuk joined
[07:58] *** kivutar joined
[07:59] *** snoopy left
[08:02] <labster> good morning

[08:03] <sorear> o/ labster 

[08:04] <brrt> hi #perl6

[08:07] *** lizmat_ is now known as lizmat

[08:07] *** kaleem joined
[08:09] *** domidumont left
[08:10] *** thou left
[08:13] *** Tene left
[08:13] *** djanatyn left
[08:24] *** djanatyn joined
[08:26] *** Tene joined
[08:26] *** Tene left
[08:26] *** Tene joined
[08:41] *** dakkar joined
[08:50] *** sqirrel left
[09:04] *** donaldh joined
[09:05] *** daxim joined
[09:14] *** domidumont joined
[09:22] *** xinming left
[09:23] <labster> \o sorear

[09:23] *** cognominal__ joined
[09:23] <labster> delayed reaction there

[09:24] *** xinming joined
[09:25] *** cognominal left
[09:41] *** berekuk left
[09:44] <donaldh> Argh, Java classpath separator on Windows is ; but classpaths require quoting for this to work on Cygwin

[09:44] <donaldh> Do we want to support nqp / jvm on Cygwin?

[09:45] <labster> I'm pretty sure that someone here is using cygwin.

[09:46] <donaldh> Yeah, I was just trying it in the absence of a Windows compiler toolchain.

[09:46] <donaldh> But realize it really behaves like a third platform.

[09:46] <labster> Also, I feel your pain on multiple platform weirdness.

[09:47] <tadzik> donaldh: are you working on rakudo/jvm runner?

[09:47] <donaldh> tadzik: yeah

[09:47] <tadzik> donaldh: perhaps something could be stolen from nqp? It has a runner too, maybe the problem is solved there

[09:48] <donaldh> I've queued a pull request already. It's not tested on Windows because I don't have a toolchain

[09:48] <donaldh> And yes, it's largely stolen from nqp.

[09:49] *** xinming left
[10:02] *** xinming joined
[10:02] *** brrt left
[10:09] *** anuby_ left
[10:38] *** breinbaas joined
[10:39] *** rking1 left
[10:48] *** sqirrel joined
[10:49] *** xinming left
[10:51] *** xinming joined
[11:10] *** census joined
[11:11] *** rking1 joined
[11:44] <FROGGS> std: use v5; say $]

[11:44] <camelia> std 9906f18: OUTPUT«ok 00:01 53m␤»

[11:53] *** _jaldhar_ joined
[11:54] *** gudahtt joined
[12:04] *** kivutar left
[12:08] <lizmat> r: my %h=a=>1; for %h.keys { say "{$_.WHAT}" }    # me thinks this is a rakudo bug

[12:08] <camelia> rakudo 570d1d: OUTPUT«use of uninitialized value of type Str in string context  in block  at /tmp/PdHofbm1Cl:1␤␤␤»

[12:08] *** skids left
[12:08] <lizmat> r: my %h=a=>1; for %h.keys { say $_.WHAT }    # this works

[12:08] <camelia> rakudo 570d1d: OUTPUT«(Str)␤»

[12:09] <FROGGS> r: my %h=a=>1; for %h.keys { say "{$_}" }    # me thinks this is a rakudo bug

[12:09] <camelia> rakudo 570d1d: OUTPUT«a␤»

[12:09] <lizmat> r: my %h=a=>1; for %h.keys { say "{$_}" }    # so does this

[12:09] <camelia> rakudo 570d1d: OUTPUT«a␤»

[12:09] <FROGGS> r: my %h=a=>1; for %h.keys { say "{$_.Str}" }    # me thinks this is a rakudo bug

[12:09] <camelia> rakudo 570d1d: OUTPUT«a␤»

[12:09] <moritz> lizmat: afaict it works according to the specs (more)

[12:10] <moritz> lizmat: your confusion stems from the fact that .WHAT returns a type object, which say() turns into (Type), but stringification leads to empty string + warning

[12:10] <moritz> (say uses .gist instead of .Str for conversion)

[12:11] <moritz> if you want to get the name of a type as a string, use $obj.^name

[12:11] <FROGGS> r: my %h=a=>1; for %h.keys { say "{$_.WHAT.gist}" }

[12:11] <camelia> rakudo 570d1d: OUTPUT«(Str)␤»

[12:11] *** adu left
[12:11] <lizmat> ok, I now understand why it does this

[12:12] <lizmat> still it feels incorrect...

[12:13] <FROGGS> r: say ~Str

[12:13] <camelia> rakudo 570d1d: OUTPUT«use of uninitialized value of type Str in string context  in block  at /tmp/qVjEuegmaR:1␤␤␤»

[12:13] <FROGGS> then this must feel the same

[12:13] <lizmat> indeed…

[12:14] <lizmat> guess it's one of those things to get used to, as having to put a comma behind the block in grep

[12:14] <FROGGS> yeah

[12:15] <lizmat> moritz++, FROGGS++ for the clarification

[12:19] *** ivan``_ left
[12:20] *** rindolf joined
[12:21] *** adu joined
[12:24] *** adu left
[12:26] <lizmat> r: my %h=a=>1; for %h.kv -> $k,$v is rw { $v=3 }; say %h  # is this NYI ?

[12:26] <camelia> rakudo 570d1d: OUTPUT«("a" => 1).hash␤»

[12:26] <lizmat> expected a => 3

[12:26] <FROGGS> n: my %h=a=>1; for %h.kv -> $k,$v is rw { $v=3 }; say %h  # is this NYI ?

[12:26] <camelia> niecza v24-51-g009f999: OUTPUT«Potential difficulties:␤  $k is declared but not used at /tmp/EgQU4BuOmk line 1:␤------> [32mmy %h=a=>1; for %h.kv -> [33m⏏[31m$k,$v is rw { $v=3 }; say %h  # is this [0m␤␤{"a" => 3}␤»

[12:27] *** ivan`` joined
[12:27] <FROGGS> looks like

[12:27] *** btyler joined
[12:27] <lizmat> r: my %h=a=>1; for %h.values -> $v is rw { $v=3 }; say %h  # same for .values

[12:27] <camelia> rakudo 570d1d: OUTPUT«("a" => 1).hash␤»

[12:28] <lizmat> n: my %h=a=>1; for %h.keys -> $k is rw { $k="b" }; say %h

[12:28] <camelia> niecza v24-51-g009f999: OUTPUT«Unhandled exception: Writing to readonly scalar␤  at /tmp/gy03ZaGbp_ line 1 (mainline @ 8) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4331 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4332 (module-CORE @ 582) ␤  at /home/p6eval/niecza/li…

[12:29] <lizmat> r: my %h=a=>1; for %h.keys -> $k is rw { $k="b" }; say %h  # not expecting this to work, but also not silently fail

[12:29] <camelia> rakudo 570d1d: OUTPUT«("a" => 1).hash␤»

[12:34] *** konundra left
[12:36] *** konundra joined
[12:39] <colomon> lizmat: it's not silently failing.

[12:40] <colomon> you're changing the list of keys you created, not the original hash

[12:40] <lizmat> r: my %h=a=>1; for %h.values -> $v is rw { $v=3 }; say FAIL if %h<a> != 3

[12:40] <camelia> rakudo 570d1d: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared name:␤    FAIL used at line 1␤␤»

[12:40] <lizmat> r: my %h=a=>1; for %h.values -> $v is rw { $v=3 }; say "FAIL" if %h<a> != 3

[12:40] <camelia> rakudo 570d1d: OUTPUT«FAIL␤»

[12:41] <lizmat> colomon: nothing with keys in this one

[12:41] <colomon> nr: my %h = a => 1; my @a := %h.keys; @a[0].key = "boo!"; say @a.perl; say %h.perl

[12:41] <camelia> niecza v24-51-g009f999: OUTPUT«Unhandled exception: Unable to resolve method key in type Str␤  at /tmp/anEbtj0Pz1 line 1 (mainline @ 6) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4331 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4332 (module-CORE @ 582) ␤  at /home/p6…

[12:41] <camelia> ..rakudo 570d1d: OUTPUT«No such method 'key' for invocant of type 'Str'␤  in block  at /tmp/cYDvt8gVWv:1␤␤»

[12:41] <colomon> lizmat: yes, that one is values

[12:41] <colomon> same difference

[12:42] <colomon> nr: my %h = a => 1; my @a := %h.keys; @a[0] = "boo!"; say @a.perl; say %h.perl

[12:42] <camelia> niecza v24-51-g009f999: OUTPUT«Unhandled exception: Writing to readonly scalar␤  at /tmp/rWdVgUQand line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4331 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4332 (module-CORE @ 582) ␤  at /home/p6eval/niecza/li…

[12:42] <camelia> ..rakudo 570d1d: OUTPUT«("boo!",).list␤("a" => 1).hash␤»

[12:42] <colomon> okay, that's interesting.

[12:43] <colomon> (and you'd already gotten it above)

[12:43] <lizmat> p5eval: my %h=(a=>1); for $v (values %h) { $v=3 }; say "OK" if $h{a} == 3  # is what I expected

[12:43] <p5eval> lizmat: OK1

[12:45] <[Coke]_> p5eval: 1;

[12:45] <p5eval> [Coke]_: 1

[12:45] <moritz> (the 1 in OK1 is the return value from say())

[12:45] <[Coke]_> wonder if we should make that ignore the return value, like p6eval.

[12:46] <lizmat> p5eval: my %h=(a=>1); for $v (values %h) { $v=3 }; "OK" if $h{a} == 3  # just testing p5eval

[12:46] <p5eval> lizmat: OK

[12:46] <colomon> lizmat: presumably one of those is an error, but I don't have any notion which one it is.

[12:47] <lizmat> I think it's more a matter of NYI, let's wait for jnthn/masak/pmichaud to become available

[12:47] <lizmat> afk for a bit

[12:48] *** btyler left
[13:01] * moritz wonders if he should write an apache module that bans IPs that requests URLs ending in signup.php

[13:02] *** kaare_ joined
[13:08] <hoelzro> moritz: just use fail2ban =)

[13:08] <hoelzro> that's what I do

[13:08] <arnsholt> Sounds like a good idea to me =)

[13:09] <moritz> hoelzro: isn't fail2ban on the ssh level?

[13:09] <hoelzro> moritz: it analyses any log file and takes actions based on patterns

[13:09] <hoelzro> so I have a series of patterns for my web server log

[13:10] <hoelzro> and an iptables rule is added for addresses that match

[13:10] <hoelzro> I use it for all of my external-facing services

[13:11] *** kivutar joined
[13:13] <moritz> I am now experimenting with mod_evasive for http://irclog.perlgeek.de/

[13:13] <moritz> the problem is that now and then, a crawler discovers the site, and follows all links, and causes immense load

[13:14] *** mikemol joined
[13:15] <moritz> but there is also a legitimate use case of causing many requests: the front page loads a .png for every channel

[13:16] <arnsholt> Do you cache the images?

[13:17] *** SmokeMachine left
[13:17] <moritz> arnsholt: they are static files

[13:17] <moritz> but mod_evasive can't count request for only-dynamic files

[13:18] <arnsholt> That counts. Just checking in case they were on-demand

[13:20] <moritz> I'm not that crazy :-)

[13:20] <arnsholt> Good, good =)

[13:20] <moritz> I've now set the limit to 50 requests in 15 seconds

[13:21] <moritz> that allows loading the front page and then a bit of browsing

[13:21] *** bluescreen10 joined
[13:21] <moritz> if you get many 403s on the irclog page, please tell me :-)

[13:22] <moritz> we'll see if it actually prevents accidental crawler DOS

[13:23] <LoRe_> moritz: did bing make a visit to you?

[13:23] *** SmokeMachine joined
[13:23] <moritz> LoRe_: bing *and* msn

[13:23] <moritz> LoRe_: I've added bing's /16 net to my blacklist

[13:25] <LoRe_> i've created a robots.txt: http://pb.rbfh.de/cRxXLL6pkubA that helped :)

[13:26] *** btyler joined
[13:26] <moritz> LoRe_: the problem is that once it starts hammering the site, it's too late to install a robots.txt

[13:26] *** prevost joined
[13:27] <moritz> because it has already fetched the robots.txt, and doesn't feel the need to re-fetch

[13:27] <LoRe_> yeah, for the current run i blocked them too und unblocked them 24h later, since then it works :)

[13:39] *** skids joined
[13:48] <lizmat> r: my %h{Any}; %h<a><b>=1  # could it be that the auto-vivication of object hashes is NYI ?

[13:48] <camelia> rakudo 570d1d: OUTPUT«No such method 'postcircumfix:<{ }>' for invocant of type 'Mu'␤  in block  at /tmp/59VwgIfXOm:1␤␤»

[13:49] <lizmat> r: my %h{Str}; %h<a><b>=1  # could it be that the auto-vivication of object hashes is NYI ?

[13:49] <camelia> rakudo 570d1d: OUTPUT«No such method 'postcircumfix:<{ }>' for invocant of type 'Mu'␤  in block  at /tmp/6x0kSaQ9W0:1␤␤»

[13:49] <moritz> looks like

[13:50] <lizmat> any place in the code I could look at for this?

[13:50] *** clkao_ is now known as clkao

[13:51] *** PacoAir joined
[13:51] <moritz> src/core/Hash.pm search for TypedHash

[13:52] <lizmat> thanks, will have a stab at it

[13:55] *** alester left
[14:01] <arnsholt> "Saying Perl is hard to use because of its symbols is like saying Greek is hard to learn because it has a different alphabet." =D

[14:06] *** arlinius left
[14:11] *** sxw joined
[14:12] *** xilo left
[14:15] <lizmat> afk for a few hours

[14:17] <geekosaur> txt proves people find language hard to use because of all the letters and punctuation. (u agree?)      :p

[14:28] * TimToady always thought it was the phonology, morphology, semantics, and pragmatics that made it hard...

[14:28] <TimToady> oh, and syntax

[14:28] *** sxw left
[14:30] <colomon> nah, it's just the speling

[14:30] *** spider-mario joined
[14:31] <TimToady> just have to learn speliology then

[14:31] *** xilo joined
[14:36] *** mtk left
[14:37] *** census left
[14:37] *** mtk joined
[14:39] <nwc10> these days decent version control makes speliology a lot less painful

[14:40] <TimToady> I suspect that visitor-y methods like .values should be allowed to return containers if that's the fastest way to return things that already have containers

[14:40] <TimToady> it's the later binding that tends to be readonly or rw

[14:40] <TimToady> however, for arrays of native types, we can't require that .values return containers, since that would be a lot of extra overhead

[14:41] <TimToady> in that case, there should probably be a .values-rw that forces containerization

[14:42] <TimToady> afk &

[14:52] *** smash_ is now known as smash

[14:58] *** mucker joined
[14:58] *** patspam joined
[14:59] *** patspam left
[15:03] *** mucker left
[15:04] *** arlinius joined
[15:08] *** kbenson joined
[15:16] <jnthn> evening, #perl6 o/

[15:16] <colomon> \o

[15:16] <PerlJam> jnthn: greetings!

[15:18] <FROGGS> o/

[15:22] *** btyler left
[15:23] *** patspam joined
[15:38] *** btyler joined
[15:47] *** cognominal__ left
[15:49] *** bluescreen100 joined
[15:52] *** bluescreen10 left
[15:53] *** kivutar left
[15:55] *** cognominal joined
[15:56] *** denisboyun joined
[15:59] <gtodd> hmm long ago when IRC was young there was regexp creation race channel 

[16:00] <gtodd> if I recall .... 

[16:00] <gtodd> I guess mad regexp skills are so pre y2k ...

[16:02] *** kaleem left
[16:02] *** domidumont left
[16:06] *** denisboyun left
[16:11] *** FROGGS[mobile] joined
[16:17] *** FROGGS left
[16:23] *** SmokeMachine left
[16:23] *** SmokeMachine joined
[16:27] <daxim> rakudo: say Set.WHAT

[16:27] <camelia> rakudo 570d1d: OUTPUT«(Set)␤»

[16:28] <daxim> rakudo: say Set.methods

[16:28] <camelia> rakudo 570d1d: OUTPUT«No such method 'methods' for invocant of type 'Set'␤  in block  at /tmp/8yAiPFQ8jD:1␤␤»

[16:28] <daxim> rakudo: say Set.methods()

[16:28] <camelia> rakudo 570d1d: OUTPUT«No such method 'methods' for invocant of type 'Set'␤  in block  at /tmp/FqfWSr9GdJ:1␤␤»

[16:28] <daxim> rakudo: say Set.^methods

[16:28] <camelia> rakudo 570d1d: OUTPUT«default keys values elems exists Bool Numeric Real hash at_key exists_key new BUILD postcircumfix:<( )> iterator list pick roll of Str gist perl elems infinite item fmt Int Num chrs Numeric Str␤»

[16:32] <dalek> rakudo/jvm-support: 8e54191 | jonathan++ | src/core/ (2 files):

[16:32] <dalek> rakudo/jvm-support: Unbust the Parrot build after JVM tweaks.

[16:32] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/8e54191b3c

[16:34] *** SmokeMachine left
[16:35] <dalek> rakudo/jvm-support: c8d0895 | (Donald Hunter)++ | / (3 files):

[16:35] <dalek> rakudo/jvm-support: Added a simple perl6 runner on JVM.

[16:35] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/c8d0895bb1

[16:35] <dalek> rakudo/jvm-support: 7e1b46d | (Donald Hunter)++ | tools/build/Makefile-JVM.in:

[16:35] <dalek> rakudo/jvm-support: Add perl6.class to clean.

[16:35] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/7e1b46d154

[16:35] <dalek> rakudo/jvm-support: aaea644 | jonathan++ | / (3 files):

[16:35] <dalek> rakudo/jvm-support: Merge pull request #140 from donaldh/jvm-support

[16:35] <dalek> rakudo/jvm-support: 

[16:35] <dalek> rakudo/jvm-support: Added a simple perl6 runner on JVM.

[16:35] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/aaea644367

[16:37] *** mucker joined
[16:38] <daxim> where's the documentation for the Test module?

[16:42] *** AndChat|356841 joined
[16:43] *** FROGGS joined
[16:43] *** domidumont joined
[16:44] *** AndChat|356841 left
[16:46] <[Coke]_> daxim: http://perlcabal.org/syn/S24.html is the closest I see.

[16:46] *** [Coke]_ is now known as [Coke]

[16:46] *** FROGGS[mobile] left
[16:46] <daxim> that suffices, thanks

[16:47] <[Coke]> (probably out of date compared to rakudo's Test.pm - https://github.com/rakudo/rakudo/blob/nom/lib/Test.pm

[16:48] <mucker> perl6: sub ∑ { return @_ }; ∑(1,2,3);

[16:48] <camelia> niecza v24-51-g009f999: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Malformed block at /tmp/bvyxHxRmmz line 1:␤------> [32msub [33m⏏[31m∑ { return @_ }; ∑(1,2,3);[0m␤␤Parse failed␤␤»

[16:48] <camelia> ..rakudo 570d1d: OUTPUT«[31m===[0mSORRY![31m===[0m␤Missing block␤at /tmp/N3WMiDs_Lh:1␤------> [32msub [33m⏏[31m∑ { return @_ }; ∑(1,2,3);[0m␤    expecting any of:␤        statement list␤        prefix or term␤        prefix or meta-prefix␤        new name to be defined␤»…

[16:49] <donaldh> jnthn: did you test the runner on Windows?

[16:52] * [Coke] wonders if anyone would like a hangout in place of a #phaser occasionally.

[16:52] <donaldh> as in G+ ?

[16:53] <jnthn> donaldh: Not yet, got a build running of the JVM stuff now

[16:53] <donaldh> :)

[16:53] <jnthn> Was just unbusting the Parrot build first.

[16:53] <jnthn> But feeling hungry, so may go and hunt down some curry and test it after :)

[16:53] <donaldh> good call

[16:54] <[Coke]> donaldh: they just revamped hangouts, so "yes, sort of"

[16:54] <donaldh> jnthn: what would be most useful to work on next?

[16:55] *** lichtkind joined
[16:56] <jnthn> donaldh: In 08b9fff I stubbed some nqp:: ops that are not yet implemented in Ops.java. Same for 029e3ad5.

[16:56] <jnthn> (sha1s both in nqp repo)

[16:57] <jnthn> Alternatively, could work on getting the file/line info incorporated into the backtrace printed by the ExceptionHandling class.

[16:58] <jnthn> It's probably a little fun as it needs correlating frames from the Java stack trace with the caller chain of CallFrame.

[16:58] <donaldh> yikes

[16:58] <jnthn> ;)

[16:59] *** dakkar left
[16:59] <jnthn> Well, we have the MethodHandle reachable from each CallFrame, which should help.

[16:59] <jnthn> The other thing that would be a startup time improvement would be to look at the code-gen in P6opaque and see when backing classes could be shared.

[16:59] <jnthn> Though not sure how often that will be...

[16:59] <jnthn> The alternative is generating them on first instantiation I guess.

[17:00] <donaldh> Have you thought about generating more readable class and method names?

[17:00] <donaldh> On the java side.

[17:01] <jnthn> We could but (a) each compilation unit is a single Java class, so it's hard to know what to call it and we need to make sure they end up unique, and (b) the method names would need mangling 'cus there's various chars you may not have in a Java method name.

[17:01] <jnthn> Not to mention the uniqueness thing.

[17:01] <jnthn> Is there no annotation for "name to show in the debugger", ooc?

[17:01] <[Coke]> pony6code

[17:01] <donaldh> Sure, was just thinking about incorporating aspects of the compunit filename and method names to aid reading java stack traces.

[17:02] <donaldh> I'll investigate. 

[17:02] <jnthn> Yeah. There's a reason ExceptionHandling tries to do something better than the Java stack trace :)

[17:02] <jnthn> But I guess for folks wanting to use tools, that ain't such a good story.

[17:03] <jnthn> It'd be nice if the Indy frames and similar could be hidden also. I dunno what the options are there.

[17:03] <donaldh> I suspect it requires a debugger extension to munge the stacktrace view. Also require an Eclipse extension for source file breakpoints.

[17:04] <jnthn> Mmmm...an Eclipse Perl 6 extension... :)

[17:04] <donaldh> Might be something that can be added to E.P.I.C.

[17:05] <jnthn> That'd be an E.P.I.C. win...

[17:05] <donaldh> Anyhoo, time to go and 'relax' at a rock climbing wall.

[17:05] <jnthn> Have fun

[17:05] <donaldh> Might have some hacking calories later.

[17:05] * jnthn too

[17:05] <donaldh> bye o/

[17:05] <jnthn> o/

[17:05] <jnthn> dinner &

[17:05] *** donaldh left
[17:08] <dalek> v5: e966f41 | (Tobias Leich)++ | Makefile:

[17:08] <dalek> v5: add the source files as a dep for their target

[17:08] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/e966f412b8

[17:08] <dalek> v5: a8aff27 | (Tobias Leich)++ | lib/Perl5/ (3 files):

[17:08] <dalek> v5: treat $] like a normal variable, so we can export it from Perl5::Terms

[17:08] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/a8aff2756e

[17:08] <dalek> v5: fc0825f | (Tobias Leich)++ | lib/Perl5/ (2 files):

[17:08] <dalek> v5: make qr// and m// work

[17:08] <dalek> v5: 

[17:08] <dalek> v5: The modifiers are not handled yet.

[17:08] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/fc0825f401

[17:08] <dalek> v5: 6545f9d | (Tobias Leich)++ | lib/Perl5/ (4 files):

[17:10] *** fgomez left
[17:16] <daxim> I have a module under development.  it sits in lib, tests in t.  I run prove -e perl6 for TDD.  it does not find the module in lib.  what do I have to do?  prove -l does not help, obviously

[17:18] <daxim> man perl6 doesn't say anything about include dirs

[17:20] <arnsholt> PERL6LIB=lib prove

[17:20] <arnsholt> Or use ufo and make test =)

[17:22] <daxim> tell me more about ufo

[17:24] <daxim> I found its readme.  do NOT tell me more about ufo

[17:25] <arnsholt> It's a weird README

[17:25] <daxim> I'm going to be the poopyhead now and say that playfulness in the documentation is over the top for my taste

[17:25] <arnsholt> But it autocreates the Makefile for you

[17:27] <daxim> pfffff    Failed to get the directory contents of 'Subdir': readdir failed: No such file or directory

[17:30] *** dmol joined
[17:34] *** SamuraiJack left
[17:35] <daxim> rakudo:  method Int::is-perfect { say 'fnord' }; 6.is-perfect;

[17:35] <camelia> rakudo 570d1d: OUTPUT«Useless declaration of a has-scoped method in mainline␤No such method 'is-perfect' for invocant of type 'Int'␤  in block  at /tmp/ZJka2Du4Ou:1␤␤»

[17:36] <daxim> how do I add a method to an existing class?

[17:37] <moritz> r: use MONKEY_TYPING; augment class Int { method foolish() { 42 } }; say Int.foolish

[17:37] <camelia> rakudo 570d1d: OUTPUT«42␤»

[17:37] *** kaleem joined
[17:38] *** kaleem left
[17:40] *** SamuraiJack joined
[17:40] <daxim> rakudo:  use MONKEY_TYPING; augment class Set { method have-some-more(Str $foo) { say $foo } };  set <fnord quux>.have-some-more('stuff');

[17:40] <camelia> rakudo 570d1d: OUTPUT«===SORRY!===␤Class 'Set' already has a Parrot v-table override for 'invoke'␤»

[17:40] <daxim> this error message lacks a remedy

[17:42] *** fhelmberger left
[17:44] <moritz> and it looks weird

[17:44] <moritz> you didn't try to override invoke

[17:47] *** SamuraiJack_ joined
[17:48] *** SamuraiJack left
[17:49] <pmichaud> good morning, #perl6

[17:51] <pmichaud> also, it seems to me that .have-some-more('stuff') would end up working on the list ("fnord", "quux") and not the Set.

[17:51] <pmichaud> rakudo: <fnord quux>.have-some-more('stuff');

[17:51] <camelia> rakudo 570d1d: OUTPUT«No such method 'have-some-more' for invocant of type 'Parcel'␤  in block  at /tmp/eF8EbJ8OQH:1␤␤»

[17:51] <pmichaud> rakudo: set <fnord quux>.have-some-more('stuff');

[17:51] <camelia> rakudo 570d1d: OUTPUT«No such method 'have-some-more' for invocant of type 'Parcel'␤  in block  at /tmp/dZiKI59Efs:1␤␤»

[17:52] <pmichaud> ...but I guess it never even got that far.

[17:57] *** Chillance joined
[17:59] *** berekuk joined
[18:00] *** btyler left
[18:01] <dalek> perl6-roast-data: a6c04d7 | coke++ | / (4 files):

[18:01] <dalek> perl6-roast-data: today (automated commit)

[18:01] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/a6c04d70ee

[18:03] *** daxim left
[18:04] <[Coke]> niecza has been dirty for 303 days. pugs has been clean for 3 days. rakudo has been dirty for 12 days.

[18:05] <rjbs> What do dirty and clean mean, here?  Passing believed-to-pass tests?

[18:05] <[Coke]> running against roast.

[18:05] <[Coke]> so rakudo has been failing roast spec tests for 12 days in a row. (but, as noted by FROGGS, et al., only on feather, it seems)

[18:06] <[Coke]> I would be happy to use better words than dirty/clean if someone can suggest them. ;)

[18:07] *** btyler joined
[18:07] <pmichaud> "dirty" sounds about right to me.

[18:07] <pmichaud> it's definitely not clean.  :)

[18:07] <pmichaud> are the feather failures logged somewhere?

[18:09] <[Coke]> https://raw.github.com/coke/perl6-roast-data/master/rakudo_summary.out is the daily log. there's an RT for this particular failure.

[18:09] <[Coke]> https://rt.perl.org/rt3/Ticket/Display.html?id=117957

[18:10] <[Coke]> that first URL looks wrong. https://raw.github.com/coke/perl6-roast-data/master/rakudo_summary.out

[18:10] <[Coke]> second is the ticket for that failure with more details.

[18:11] <[Coke]> ah. and that failure has masked other failures. rakudo is now failing 37 tests, up from 36 yesterday, up from 7, up from the 3 I knew about.

[18:12] <[Coke]> S32-hash/delete-adverb.rakudo S29-os/system.t S09-hashes/objecthash.rakudo

[18:13] *** on joined
[18:13] *** on is now known as Guest85417

[18:14] <pmichaud> those are useful links... I'll want to review them when I have p6-tuits again.

[18:14] <gtodd> p5eval:  perl -E 'foreach (keys %ENV) { say  if /PERL*/ } ' 

[18:14] <p5eval> gtodd: ERROR: syntax error at (eval 7) line 1, near "E 'foreach (keys %ENV) { say  if /PERL*/ } '"

[18:14] <[Coke]> pmichaud: also just added this one:

[18:14] <pmichaud> loos like lots of lhf in the summary output

[18:14] <pmichaud> *looks

[18:15] <[Coke]> https://github.com/coke/rakudo-star-daily

[18:15] <pmichaud> \o/  Coke++

[18:15] <[Coke]> (more helpfully: https://github.com/coke/rakudo-star-daily/blob/master/log/test-modules.log_

[18:15] <[Coke]> (more helpfully: https://github.com/coke/rakudo-star-daily/blob/master/log/test-modules.log)

[18:15] <pmichaud> "Rakudo Star Daily" sounds like a news service.  :)

[18:15] <[Coke]> once I have a few days worth of data, I'll see about whipping up a summary file.

[18:15] <[Coke]> heh!

[18:16] <pmichaud> I guess I should wander towards my gate so as not to miss my flight.

[18:16] <pmichaud> bbl

[18:16] <gtodd> arrgh sorry bout hat

[18:17] <lizmat> [Coke]: S32-hash/delete-adverb.rakudo would be mine, probably

[18:18] <Ulti> http://mmb.pcb.ub.es/~carlesfe/funnypapers/#PerlComparison

[18:20] <[Coke]> lizmat: is the test failing for you?

[18:20] *** gdey joined
[18:20] <lizmat> no, it's not

[18:21] <[Coke]> let me do a run of just that test using the last built version.

[18:21] <lizmat> apart from the warnings, is there something failing there?

[18:22] *** mucker left
[18:22] <[Coke]> http://feather.perl6.nl/~coke/lizmat.out

[18:22] <[Coke]> Yes.

[18:22] <[Coke]> You sure you pushed everything?

[18:23] <lizmat> some of my stuff is still in a pull request  :-(

[18:23] <[Coke]> my copy of roast is shown here: https://github.com/coke/perl6-roast-data/blob/master/perl6_pass_rates#L2  f039dde

[18:24] <[Coke]> lizmat: you should be able to commit directly to roast, no?

[18:24] <lizmat> I guess I forgot to mark some of these tests as todo

[18:24] <lizmat> yes

[18:24] <[Coke]> I thought rakudo proper was the only thing that we needed CLAs for.

[18:24] *** Guest85417 left
[18:26] <lizmat> afaik, that's true, I already have a commit bit for e.g. nqp

[18:27] <moritz> lizmat: you even committed to roast before :-)

[18:27] <moritz> roast eq t/spec/

[18:30] <dalek> roast: e3e2560 | (Elizabeth Mattijsen)++ | S32-hash/delete-adverb.t:

[18:30] <dalek> roast: Fudging in delete-adverb tests needed until my pull request is merged

[18:30] <dalek> roast: 

[18:30] <dalek> roast: Spotted by [Coke]++

[18:30] <dalek> roast: review: https://github.com/perl6/roast/commit/e3e2560f94

[18:30] <lizmat> moritz: yes, and quite a few already  :-)

[18:30] *** SmokeMachine joined
[18:30] <lizmat> that's what's caused some of the smoke ;-(

[18:31] <lizmat> [Coke]: I *think* it is fine now

[18:31] <lizmat> grrrs…  hold it

[18:32] <[Coke]> ooooh, I thought you meant a pull request to ROAST was holding things up. 

[18:32] <[Coke]> still six failures.

[18:34] <dalek> roast: f83718b | (Elizabeth Mattijsen)++ | S32-hash/delete-adverb.t:

[18:34] <dalek> roast: Further fudging of delete-adverb tests

[18:34] <dalek> roast: review: https://github.com/perl6/roast/commit/f83718bc92

[18:35] <[Coke]> lizmat++

[18:36] <lizmat> [Coke]: no, it is a pull request in nom:  I hope pmichaud finds the time soon to have a look at it

[18:36] <[Coke]> S09-hashes/objecthash.t - dies after test 25

[18:36] <[Coke]> might need a skip for new tests?

[18:37] <lizmat> I don't think I touched that

[18:37] <lizmat> fwiw, that doesn't fail for me

[18:37] <[Coke]> checking.

[18:38] <[Coke]> 5c7b4be9 (Elizabeth Mattijsen 2013-05-14 16:40:50 +0200 75)

[18:38] <lizmat> hmmm.. I changed the plan?

[18:38] <lizmat> good thing there is git blame

[18:38] <lizmat> I'll fudge them

[18:41] <lizmat> is the number in the fudge the number of lines, or the number of tests?

[18:41] <jnthn> tests

[18:42] <lizmat> no, it's not, it's lines

[18:42] <jnthn> Oh?

[18:42] <jnthn> I've always treated it as tests :P

[18:42] <lizmat> uncommented lines, actually

[18:43] <lizmat> the test dies on "my %h{Mu};"

[18:43] <jnthn> r: my %h{Mu}

[18:43] <camelia> rakudo 570d1d:  ( no output )

[18:44] <lizmat> hmmm….

[18:44] <jnthn> .tell donaldh the runner seems to work fine on Windows

[18:44] <yoleaux> jnthn: I'll pass your message to donaldh.

[18:46] <lizmat> r: my %h{Mu}; %h{Mu}=2

[18:46] <camelia> rakudo 570d1d: OUTPUT«Cannot call 'postcircumfix:<{ }>'; none of these signatures match:␤:(: Mu *%_)␤:(: :p(:$p)!, Mu *%_)␤:(: :k(:$k)!, Mu *%_)␤:(: :kv(:$kv)!, Mu *%_)␤:(: :v(:$v)!, Mu *%_)␤:(: :BIND(:$BIND)!, Mu *%_)␤:(\SELF: $key, Mu *%_)␤:(\SELF: $key, Mu \$BIND, Mu *%_)␤:(\SELF: $k…

[18:46] <lizmat> r: my %h{Mu}; say %h{*}

[18:46] <camelia> rakudo 570d1d: OUTPUT«␤»

[18:47] <lizmat> r: my %h{Mu}; %h<a>=1; say %h{*}

[18:47] <camelia> rakudo 570d1d: OUTPUT«1␤»

[18:49] <dalek> roast: e53a16e | (Elizabeth Mattijsen)++ | S09-hashes/objecthash.t:

[18:49] <dalek> roast: Still need to fudge %h{Mu} related tests

[18:49] <dalek> roast: 

[18:49] <dalek> roast: Also pending my pull request to nom.  [Coke]++ for spotting

[18:49] <dalek> roast: review: https://github.com/perl6/roast/commit/e53a16e882

[18:50] <lizmat> [Coke]: good chance it is ok now

[18:53] <[Coke]> lizmat++

[18:54] <lizmat> sorry for the smoke.   Please blame this on getting the workflow going

[18:55] <[Coke]> no worries.

[18:55] <[Coke]> more concerned about the one that's been failing for 2 weeks. :|

[18:59] <lizmat> fwiw, S02-types/bool.t succeeds with me

[19:00] <lizmat> also S29-os/system.t

[19:02] *** SamuraiJack_ left
[19:03] *** rindolf left
[19:09] *** Guest12382 joined
[19:10] *** sqirrel left
[19:12] <lizmat> r: my %h{Mu}; say %h.WHAT   # how am I supposed to find out that "Mu" is what the hash was typed with?

[19:12] <camelia> rakudo 570d1d: OUTPUT«(Hash+{TypedHash})␤»

[19:14] <jnthn> Good question. For the value you use the .of method on the hash.

[19:14] <jnthn> er, value type that is.

[19:15] <lizmat> hmm… that's in Cool or higher, as I can't find it in ^methods

[19:15] <lizmat> unless I use my eyes of course, duh  :-(

[19:16] <lizmat> thanks, jnthn++

[19:16] <lizmat> r: my %h of Mu; say %h.of   # makes it much clearer

[19:17] <camelia> rakudo 570d1d: OUTPUT«(Mu)␤»

[19:17] *** zby_home_ joined
[19:19] <lizmat> r: my %h1 of Mu; my %h2{%h1.of}  # how to create a hash with the same type as another hash

[19:19] <camelia> rakudo 570d1d: OUTPUT«===SORRY!===␤Invalid hash shape; type expected␤»

[19:19] <PerlJam> lizmat++ (asking the question I've been wondering about but never got around to asking)

[19:19] <lizmat> r: my %h1 of Mu; my %h2 of %h1.of

[19:19] <camelia> rakudo 570d1d: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused␤at /tmp/7u7AETCHfg:1␤------> [32mmy %h1 of Mu; my %h2 of [33m⏏[31m%h1.of[0m␤    expecting any of:␤        scoped declarator␤»

[19:20] <lizmat> std: my %h1 of Mu; my %h2 of %h1.of

[19:20] <camelia> std 9906f18: OUTPUT«[31m===[0mSORRY![31m===[0m␤Invalid type name at /tmp/o9paKfWPNN line 1:␤------> [32mmy %h1 of Mu; my %h2 of [33m⏏[31m%h1.of[0m␤    expecting typename␤Parse failed␤FAILED 00:00 42m␤»

[19:20] <dalek> rakudo/jvm-support: 67feb5a | jonathan++ | src/ (2 files):

[19:20] <dalek> rakudo/jvm-support: Fix 'say 42' (and probably loads more).

[19:20] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/67feb5a042

[19:22] * masak waves tiredly in greeting

[19:22] <lizmat> masak!

[19:22] <tadzik> hey masak!

[19:23] <labster> masak o/

[19:23] * lizmat congratulates jnthn++ and masak++ for bringing home the bacon for yet another day!

[19:23] <jnthn> o⁄ masak

[19:24] <labster> mmm bacon

[19:24] <masak> hey, thanks.

[19:24] <masak> yeah, today felt good.

[19:24] <masak> teaching JavaScript is weirdly satisfactory.

[19:25] *** zby_home_ left
[19:25] <FROGGS> I want bacon, naow

[19:25] <FROGGS> and eggs

[19:25] <FROGGS> :/

[19:25] <jnthn> FROGGS: So grab the frying pan? :)

[19:25] *** bloonix joined
[19:25] *** on joined
[19:25] <FROGGS> I dont have bacon ó.ò

[19:25] *** on is now known as Guest54409

[19:25] <nwc10> oooh, numbers

[19:26] * FROGGS takes a walk to the kitchen

[19:26] <lizmat> you're *that* skinny ?

[19:26] <masak> if I backlog #perl6, will I find discussion about the schwern thing?

[19:26] <lizmat> no

[19:26] <jnthn> The Schwern thing?

[19:26] <PerlJam> masak: I hope now.  Mostly that's been on #yapc

[19:26] <PerlJam> s/now/not

[19:26] <lizmat> this was the first mention, afaik

[19:27] <flussence> for some reason that name rings a bell, but not from here

[19:27] <lizmat> and I hope this will be the last: schwern thing

[19:27] *** domidumont left
[19:28] <flussence> but it sounds like something I don't want to be reminded of anyway

[19:28] <masak> the schwern thing: http://blog.schwern.net/2013/05/15/yapcna-2013-withdrawal/

[19:28] <lizmat> *sigh*

[19:28] <gtodd> perl -E 'foreach (keys %ENV) { say if /PERL/ }'    

[19:29] <gtodd> sigh  

[19:29] <flussence> oh, I must've been thinking of a different name.

[19:29] <tadzik> oh ffs

[19:29] <masak> tadzik: that's about the size of it.

[19:29] <gtodd> EMOUSECUTSEL

[19:30] <tadzik> well, I'm still going to go there and be nice to everyone, CoC or not

[19:30] <sorear> let's not have a spillover

[19:31] <skids> What's wrong with Corrosion of Conformity :-)

[19:31] <lizmat> tadzik: that's an autopun?

[19:31] *** jac50 joined
[19:32] <masak> I'm sorry. spillover was the last thing I wanted.

[19:32] <tadzik> lizmat: if it is, I didn't notice :)

[19:32] <masak> I just think that matters of community maintenance are automatically on-topic here.

[19:32] * skids wonders if TLA saturation follows moore's law.

[19:32] <masak> (since it's one of the reasons Perl 6 was created.)

[19:33] * lizmat is repressing the urge to comment

[19:34] *** domidumont joined
[19:34] <lizmat> r: my %h of Mu; %h.of ~~ m/\w+/; say ~$/  # instead point out some more NYI's / bugs / nags

[19:34] <camelia> rakudo 570d1d: OUTPUT«No such method 'match' for invocant of type 'Mu'␤  in block  at /tmp/_RaQdyyO__:1␤␤»

[19:36] <lizmat> r: my %h of Mu; say ~%h.of

[19:36] <camelia> rakudo 570d1d: OUTPUT«Nominal type check failed for parameter ''; expected Any but got Mu instead␤  in sub prefix:<~> at src/gen/CORE.setting:1271␤  in block  at /tmp/rR0sj51D6R:1␤␤»

[19:37] * lizmat is trying to figure out a way to create a hash with the same type as another *reliably*

[19:38] <lizmat> r: my %h{Int}; say %h.of

[19:38] <camelia> rakudo 570d1d: OUTPUT«(Mu)␤»

[19:38] * lizmat giving up for now

[19:39] <flussence> just to be clear: are you looking for type constraints on the keys or the values?

[19:39] <masak> lizmat: .clone ?

[19:39] <moritz> lizmat: %h{Int} types the keys, .of gives the type constraint of the values

[19:39] <flussence> (because "of" doesn't seem to do anything on my end...)

[19:40] <moritz> TypedHash doesn't seem to expose the types

[19:40] <lizmat> moritz: aha!

[19:41] *** domidumont left
[19:41] <lizmat> masak: .clone also copies the contents

[19:41] * lizmat has a look at the clone code

[19:42] <masak> ah, troo.

[19:43] <masak> I definitely agree that getting a new container with the same .of seems a reasonable thing to do.

[19:43] <masak> even before I have a concrete use case.

[19:46] <nwc10> jnthn: for Rakudo on the JVM, in the ./perl6 for *nix, you need "" round $@, ie exec java ... perl6 "$@"

[19:47] <nwc10> and I have to admit that I prefer the startup speed of NQP

[19:47] <jnthn> .new should do it. If it doesn't, that'd be a bug.

[19:47] <nwc10> I couldn't work out where that ./perl6 comes from

[19:47] <jnthn> nwc10: The startup speed of both of them on the JVM sucks at the moment.

[19:48] <nwc10> parrot has to be an order of magniture better for somethign :-)

[19:48] *** Guest54409 left
[19:50] <masak> lizmat: what jnthn++ said. I shoulda thought of that.

[19:50] <dalek> rakudo/jvm-support: c52bedd | jonathan++ | tools/build/create-jvm-runner.pl:

[19:50] <dalek> rakudo/jvm-support: Fix runner for *nix; nwc10++.

[19:50] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/c52bedd7cf

[19:51] <lizmat> r: my %h{Mu}; say %h.WHAT; my %h2=%h.new; say %h2.WHAT;

[19:51] <camelia> rakudo 570d1d: OUTPUT«(Hash+{TypedHash})␤(Hash)␤»

[19:51] <lizmat> the .new loses the Type information  :-(

[19:52] <lizmat> seems it is using the one from Hash: method new(*@args) { @args.hash }

[19:52] <jnthn> lizmat: Yeah, so I notice...

[19:53] *** fgomez joined
[19:53] <lizmat> simply putting a method new in the TypedHash would not solve the pb, I think, as it probably lies deeper, no?

[19:53] <jnthn> Probably we need to look at the way Hash.new works.

[19:54] <lizmat> so what *is* the way to get at the Type?  ".of" is about constraining the values, as moritz pointed out

[19:55] <jnthn> lizmat: there isn't one implemented. S09 may have one spec'd, but I don't recall it.

[19:56] <nwc10> Bother:

[19:56] <nwc10> nick@raspberrypi:~/test$ ./perl6 -e 'say "Hello portable world"'

[19:56] <nwc10> Unhandled exception: java.lang.BootstrapMethodError: call site initialization exception in <anon> in <anon>

[19:56] <nwc10> so much for Java bytecode being portable

[19:57] <jnthn> Oddnes.

[19:58] <nwc10> yes.

[19:58] <jnthn> What does java -version show?

[19:58] <nwc10> Although IIRC that was the exception thrown when I tried to build nqp-jvm on the raspberry pi

[19:58] <nwc10> java version "1.7.0_03"

[19:58] <nwc10> OpenJDK Runtime Environment (IcedTea7 2.1.7) (7u3-2.1.7-1)

[19:58] <nwc10> OpenJDK Zero VM (build 22.0-b10, mixed mode)

[19:59] <nwc10> it was built by this Java:

[19:59] <nwc10> java version "1.7.0_19"

[19:59] <nwc10> OpenJDK Runtime Environment (rhel-2.3.9.1.el6_4-x86_64)

[19:59] <nwc10> OpenJDK 64-Bit Server VM (build 23.7-b01, mixed mode)

[19:59] <jnthn> I actually managed to get the nqp-jvm build to segfault one of the earlier ones in the 7 serious.

[19:59] <jnthn> *series

[19:59] <nwc10> pwnage!

[19:59] <jnthn> Segfaulting the JVM felt like an, uh, achievement...

[19:59] <jnthn> But it was already fixed in a later version.

[20:00] <nwc10> Sadly the properly sarcastic headline isn't in the URL: http://www.theregister.co.uk/2013/05/15/oracle_new_versioning_scheme/ -- "Oracle updates Java versioning to allow more security fixes"

[20:00] *** breinbaas left
[20:01] <jnthn> heh :)

[20:06] *** breinbaas joined
[20:08] *** gdey left
[20:16] *** dorlamm joined
[20:21] *** estrabd joined
[20:21] *** kaare_ left
[20:35] *** jac50 left
[20:38] *** dmol left
[20:38] *** spider-mario_ joined
[20:39] *** betterwo1ld joined
[20:40] <lizmat> r: https://gist.github.com/lizmat/5594924

[20:40] <camelia> rakudo 570d1d: OUTPUT«("Foo::Bar" => {"perl6" => {}}).hash␤Nominal type check failed for parameter 'lhs'; expected Any but got Mu instead␤  in sub METAOP_TEST_ASSIGN:<//> at src/gen/CORE.setting:13798␤  in sub module2stash at /tmp/_BTgCQ8SZ_:15␤  in block  at /tmp/_BTgCQ8SZ_:22␤␤»…

[20:40] <lizmat> I'm stumped, haven't been able to simplify this down further  :-(

[20:40] <masak> '= Any' better written '?'

[20:41] <lizmat> that changes things

[20:42] <masak> ah.

[20:42] <lizmat> no it doesn't  :-(   must put quotes around ?

[20:42] *** Timbus|Away joined
[20:42] <lizmat> ah, ok, gotcha now

[20:42] *** spider-mario left
[20:42] *** betterworld left
[20:42] <lizmat> no changes

[20:43] *** Timbus left
[20:43] *** Timbus|Away is now known as Timbus

[20:44] <dalek> v5: 5980153 | (Tobias Leich)++ | lib/Perl5/Grammar.nqp:

[20:44] <dalek> v5: support ${foo} variable name syntax

[20:44] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/59801533b8

[20:44] <dalek> v5: 5f94a6c | (Tobias Leich)++ | / (4 files):

[20:44] <dalek> v5: move undef to Perl5::Terms

[20:44] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/5f94a6cf4a

[20:44] <lizmat> the lines with return Proxy:new can be removed, it still creates the same error

[20:46] <masak> is the sub necessary?

[20:47] <lizmat> masak: do you see anything else wrong with the code ?

[20:47] <lizmat> the sub?

[20:47] <masak> I mean, does the failing code have to be in a sub?

[20:47] <masak> or can you just set the parameters as variables?

[20:47] <lizmat> for testing, yes...

[20:47] <lizmat> ultimately it has to become a sub

[20:47] <FROGGS> r: say "abc" ~~ m?a?g

[20:48] <camelia> rakudo 570d1d: OUTPUT«[31m===[0mSORRY![31m===[0m␤Regex not terminated␤at /tmp/9hP6aNAAnu:1␤------> [32msay "abc" ~~ m?a?g[33m⏏[31m<EOL>[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        prefix or term␤        prefix or meta-prefix…

[20:48] <masak> lizmat: for the purposes of golfing.

[20:50] <lizmat> r: https://gist.github.com/lizmat/5594924   # golfed

[20:50] <camelia> rakudo 570d1d: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/W2J319ZHpe:1␤------> [32mhttps[33m⏏[31m://gist.github.com/lizmat/5594924   # go[0m␤    expecting any of:␤        argument list␤        postfix␤        infix stopper␤        infix or meta-infix␤        st…

[20:50] *** [Coke] left
[20:50] *** yakshavr left
[20:50] *** clkao left
[20:50] *** yakshavr joined
[20:51] <lizmat> r: https://gist.github.com/lizmat/5594924 

[20:51] <camelia> rakudo 570d1d: OUTPUT«("Foo::Bar" => {"perl6" => {}}).hash␤Nominal type check failed for parameter 'lhs'; expected Any but got Mu instead␤  in sub METAOP_TEST_ASSIGN:<//> at src/gen/CORE.setting:13798␤  in block  at /tmp/FVbfGg38LX:11␤␤»

[20:51] <lizmat> grrsss…  when using a URL, you can't comment 

[20:52] <lizmat> so: no sub

[20:54] <lizmat> masak: you agree that this *should* work?

[20:58] *** [Coke] joined
[20:59] *** clkao joined
[20:59] *** spider-mario_ is now known as spider-mario

[21:00] <masak> lizmat: yes, definitely.

[21:00] <lizmat> I'll try to golf it further down

[21:01] <masak> r: my $auths = do { my %h{Any} of Hash;  %h }; my $versions = $auths{Any}; say "alive"

[21:01] <camelia> rakudo 570d1d: OUTPUT«alive␤»

[21:01] <masak> hm.

[21:04] <lizmat> down to 5 lines, it is related to %h{Any} being stored as a value in a hash

[21:07] <masak> r: (my %h{Any} of Hash){Any} //= my %

[21:07] <camelia> rakudo 570d1d: OUTPUT«Nominal type check failed for parameter 'lhs'; expected Any but got Mu instead␤  in sub METAOP_TEST_ASSIGN:<//> at src/gen/CORE.setting:13798␤  in block  at /tmp/QD7khTjRjR:1␤␤»

[21:07] <masak> this is as golf'd as I can get it.

[21:08] <lizmat> r: my $froms= do { my %h{Any} of Hash;  %h }; $froms<a> //= do { my %h{Any} of Hash;  %h };  # my golf

[21:08] <camelia> rakudo 570d1d: OUTPUT«Nominal type check failed for parameter 'lhs'; expected Any but got Mu instead␤  in sub METAOP_TEST_ASSIGN:<//> at src/gen/CORE.setting:13798␤  in block  at /tmp/773hQw7_T5:1␤␤»

[21:08] <masak> I think that makes it fairly clear that something is Wrong, at least.

[21:08] * jnthn is a little surprised to discover that "use v6;" actually depends on *a gather block*!

[21:08] <jnthn> o.O

[21:09] <lizmat> why would this involve a META op ?

[21:09] <jnthn> The foo= form is a meta-op

[21:09] <timotimo> will we be getting a jakudo evalbot thingie for the channel?

[21:10] <jnthn> timotimo: Probably, when it's worth having :)

[21:10] <lizmat> ah, of course, yes

[21:11] *** spider-mario left
[21:11] <dalek> nqp/rak-jvm-support: 0440860 | jonathan++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[21:11] <dalek> nqp/rak-jvm-support: Implement nqp::getlexcaller.

[21:11] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/04408607fe

[21:11] <dalek> nqp/rak-jvm-support: 1baee5d | jonathan++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[21:11] <dalek> nqp/rak-jvm-support: Some more decont, tweaks.

[21:11] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/1baee5dc61

[21:12] <lizmat> seems to me the code generated isn't getting the left hand side passed to it if the destination is a non-existent hash value on the left

[21:13] <lizmat> r: my $froms= do { my %h{Any} of Hash;  %h }; $froms<a>=Any; $froms<a> //= do { my %h{Any} of Hash;  %h }; say $froms;  # works

[21:13] <camelia> rakudo 570d1d: OUTPUT«("a" => {}).hash␤»

[21:14] <lizmat> adding a $h<key>=Any apparently creates a container that //= can find

[21:16] <lizmat> r: my %h{Any}; %h<a> //= "a"   #golfed shortest

[21:16] <camelia> rakudo 570d1d: OUTPUT«Nominal type check failed for parameter 'lhs'; expected Any but got Mu instead␤  in sub METAOP_TEST_ASSIGN:<//> at src/gen/CORE.setting:13798␤  in block  at /tmp/Q3e_ebVOMA:1␤␤»

[21:16] <lizmat> r: my %h{Any}; %h<a>=Any; %h<a> //= "a"   #golfed shortest

[21:16] <camelia> rakudo 570d1d:  ( no output )

[21:16] <dalek> rakudo/jvm-support: b47f7a3 | jonathan++ | src/vm/jvm/runtime/org/perl6/rakudo/Ops.java:

[21:16] <dalek> rakudo/jvm-support: Implement nqp::p6recont_ro.

[21:16] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/b47f7a3c5f

[21:16] <lizmat> masak: rakudobug?

[21:17] * masak submits

[21:18] <lizmat> masak++

[21:18] <lizmat> BTW, same goes for ||= and &&=

[21:19] <lizmat> also note that there is no problem if the hash is not typed

[21:19] <jnthn> Possible patch (please somebody else try it) for the lizmat++ bug: https://gist.github.com/jnthn/5595193

[21:20] <[Coke]> jnthn: is there anyone aside from you who can wrangle GC bugs that pass through sixmodel's PMC's destroy() vtable?

[21:20] <lizmat> jnthn: I'll try that

[21:21] <jnthn> [Coke]: Somewhere in the world, probably... :)

[21:21] *** adu joined
[21:21] <jnthn> [Coke]: is it a double free happening inside there?

[21:21] <adu> hi jnthn 

[21:21] <jnthn> o/ adu 

[21:22] <adu> how goes?

[21:22] <[Coke]> jnthn: aye.

[21:22] <jnthn> Tiredly...

[21:22] <[Coke]> er... at one point it presented as a double free, anyway.

[21:22] <jnthn> [Coke]: A while back I tried and failed to hunt one of those. I got it down to being related to mixins and bigints interacting interestingly.

[21:22] <adu> o right, Europe time

[21:23] <[Coke]> current error was: *** glibc detected *** ./perl6: free(): invalid next size (fast):

[21:23] *** skids left
[21:23] <jnthn> [Coke]: As in, those seemed to be the ingredients. I never managed to get down to the exact issue.

[21:23] <[Coke]> https://rt.perl.org/rt3/Ticket/Display.html?id=117957 is the ticket if, you know, you have spare time. :)

[21:23] <jnthn> ;)

[21:24] <[Coke]> I don't think there are any bigints near this one.

[21:26] <[Coke]> ~~

[21:33] *** kurahaupo joined
[21:35] *** gdey joined
[21:36] *** PacoAir left
[21:37] *** sdo joined
[21:37] <sdo> hello

[21:37] <lizmat> hi sdo!

[21:38] <kurahaupo> sdo: hi

[21:38] <sdo> lizmat: hi kurahaupo: I am reading at this time UsingPerl6

[21:38] <masak> hi, sdo.

[21:38] <sdo> hi masak:

[21:40] <lizmat> jnthn: alas, no change

[21:40] <sdo> and I was wondering is Perl6 can be considered as a program that can allow constraint programing as can do ada the NG?

[21:40] <sorear> .oO( solar observation spacecraft studying perl 6 )

[21:40] <sdo> NG: Next Generation

[21:40] <jnthn> lizmat: Hmm...OK, then it's not that I thought it was. That patch feels needed even if not sufficient, mind...

[21:42] <lizmat> ok

[21:42] <sdo> the book UsingPerl6 is good but hard to assimilate

[21:42] <adu> sdo: Ada95?

[21:42] <sdo> no ADA 2012 

[21:42] <adu> I'm not familiar with that

[21:43] <sdo> as far as I know Ada 95 is full object

[21:44] <adu> sdo: what do you mean constraint programing?

[21:44] <lizmat> jnthn: did you catch me saying that this happens if the key is not in the hash yet?  If you do %h<key>=Any first, it doesn't happen

[21:44] <sdo> sub circle-radius-from-area(Real $area where { $area >= 0 }) {($area / pi).sqrt} say circle-radius-from-area(3); # OK

[21:45] <lizmat> fwiw: now that I know what the problem is, I can work around it

[21:45] <jnthn> lizmat: Yes, which led me to suspect busted auto-viv things, which I thought the patch I suggested may fix. But it seems not.

[21:45] <sdo> I mean to certify that an object respect constraint

[21:45] <lizmat> jnthn: but doesn't at_key return Mu if the key doesn't exist?

[21:46] <jnthn> lizmat: It should return a con...oh...wait a moment...

[21:46] <FROGGS> sdo: I believe you can do that with perl6

[21:46] *** btyler left
[21:46] <sdo> that's perl 6

[21:46] <FROGGS> jnthn: dary?

[21:46] <adu> sdo:  there is something called "as"

[21:46] <lizmat> r: my %h{Mu}; say %h.at_key("a")   # typed hash returns Mu, not Any

[21:46] <camelia> rakudo 570d1d: OUTPUT«(Mu)␤»

[21:46] <FROGGS> what is a condary?

[21:47] <jnthn> lizmat: no, I though it may be missing "is rw" on those at_pos methods...but it ain't...

[21:48] <adu> sdo: wait, apparently there is a "where" also

[21:48] <jnthn> FROGGS: What?

[21:48] <sdo> I don't know about as because I am at page 42

[21:48] <FROGGS> jnthn: just a joke (legen... dary)

[21:48] <FROGGS> r: sub a ( Int $a where $a > 5 ) { say $a }; a( 42 )

[21:48] <lizmat> r: my %h; say %h.at_key("a")   # untyped hash returns Any

[21:48] <camelia> rakudo 570d1d: OUTPUT«42␤»

[21:48] <camelia> rakudo 570d1d: OUTPUT«(Any)␤»

[21:48] <FROGGS> r: sub a ( Int $a where $a > 5 ) { say $a }; a( 2 )

[21:48] <camelia> rakudo 570d1d: OUTPUT«Constraint type check failed for parameter '$a'␤  in sub a at /tmp/rhXNBbSHrO:1␤  in block  at /tmp/rhXNBbSHrO:1␤␤»

[21:48] <jnthn> r: my %h{Mu}; say %h.at_key("a")

[21:48] <camelia> rakudo 570d1d: OUTPUT«(Mu)␤»

[21:48] <jnthn> r: my %h; say %h.at_key("a")

[21:48] <camelia> rakudo 570d1d: OUTPUT«(Any)␤»

[21:49] <FROGGS> sdo: see? works

[21:49] <jnthn> lizmat: ah...sorry, I'm really slow tonight :)

[21:49] <lizmat> I'm very glad that you're here at all!  :-)   jnthn++

[21:49] <jnthn> r: my %h{Mu} of Any; say %h.at_key("a")

[21:49] <camelia> rakudo 570d1d: OUTPUT«(Mu)␤»

[21:49] *** pecastro left
[21:49] <jnthn> r: my Any %h{Mu}; say %h.at_key("a")

[21:49] <camelia> rakudo 570d1d: OUTPUT«(Any)␤»

[21:49] <jnthn> ahya

[21:49] <jnthn> hmmmm.

[21:50] <jnthn> lizmat: Take two: https://gist.github.com/jnthn/5595395

[21:51] <masak> 'night, #perl6

[21:51] <adu> omg, this syntax just blew up my mind: $obj = { pair 1, 2, 3, 4, 5, 6 }

[21:51] <lizmat> night masak! 

[21:51] <FROGGS> I think I've got a fix for: "abc" ~~ m?abc?

[21:51] <lizmat> jnthn: testing

[21:52] <lizmat> r: my $obj = { pair 1, 2, 3, 4, 5, 6 }; say $obj

[21:52] <camelia> rakudo 570d1d: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤    pair used at line 1. Did you mean '&pairs'?␤␤»

[21:53] <dalek> perl6-bench: 00d48f6 | (Geoffrey Broadwell)++ | analyze:

[21:53] <dalek> perl6-bench: Untabify analyze

[21:53] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/00d48f6701

[21:53] <dalek> perl6-bench: 3d439fb | (Geoffrey Broadwell)++ | analyze:

[21:53] <dalek> perl6-bench: Allow individual Perls to be clicked on and off using legend in plots

[21:53] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/3d439fb14c

[21:53] <dalek> perl6-bench: 77647e8 | (Geoffrey Broadwell)++ | README:

[21:53] <dalek> perl6-bench: Update dates in README a bit

[21:53] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/77647e8aa8

[21:53] <dalek> perl6-bench: 323bde2 | (Geoffrey Broadwell)++ | README:

[21:53] <dalek> perl6-bench: Small tweaks to README to make it work better as Markdown using: `pandoc -s --toc -f markdown -o README.html README`

[21:53] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/323bde2697

[21:57] *** dorlamm left
[21:57] *** sdo left
[21:59] <labster> If I have a statement like `my Cool $foo = 3;`, how do I get the container type from $foo (i.e. Cool instead of Int)?

[21:59] *** konundra left
[22:00] <FROGGS> r: my Cool $foo = 3; say $foo.^WHAT

[22:00] <camelia> rakudo 570d1d: OUTPUT«[31m===[0mSORRY![31m===[0m␤Cannot use .^ on a non-identifier method call␤at /tmp/j0QRyDKbzc:1␤------> [32mmy Cool $foo = 3; say $foo.^WHAT[33m⏏[31m<EOL>[0m␤    expecting any of:␤        method arguments␤»

[22:00] <FROGGS> r: my Cool $foo = 3; say $foo.WHAT

[22:00] <camelia> rakudo 570d1d: OUTPUT«(Int)␤»

[22:00] <jnthn> r: my Cool $foo = 3; say $foo.VAR.of

[22:00] <camelia> rakudo 570d1d: OUTPUT«No such method 'of' for invocant of type 'Scalar'␤  in block  at /tmp/MObM9NlnUX:1␤␤»

[22:00] <jnthn> r: my Cool $foo = 3; say $foo.VAR.type

[22:00] <camelia> rakudo 570d1d: OUTPUT«No such method 'type' for invocant of type 'Scalar'␤  in block  at /tmp/BEGDxZB9oO:1␤␤»

[22:00] <jnthn> hmm :)

[22:00] <FROGGS> r: my Cool $foo = 3; say $foo.VAR.^methods

[22:00] <camelia> rakudo 570d1d: OUTPUT«Int Num Rat FatRat abs Bridge chr sqrt base expmod is-prime floor round ceiling sign conj rand sin asin cos acos tan atan atan2 sec asec cosec acosec cotan acotan sinh asinh cosh acosh tanh atanh sech asech cosech acosech cotanh acotanh unpolar cis Complex log exp …

[22:00] <FROGGS> r: my Cool $foo = 3; say $foo.VAR.^attr

[22:00] <camelia> rakudo 570d1d: OUTPUT«No such method 'attr' for invocant of type 'Perl6::Metamodel::ClassHOW'␤  in block  at /tmp/DYucNTlMtc:1␤␤»

[22:00] <jnthn> r: my Cool $foo = 3; say $foo.VAR.name

[22:01] <camelia> rakudo 570d1d: OUTPUT«$foo␤»

[22:01] <jnthn> well, that's something... :)

[22:01] <FROGGS> hehe

[22:01] *** chayin_ joined
[22:01] <FROGGS> r: my Cool $foo = 3; say $foo.VAR.^attributes

[22:01] <camelia> rakudo 570d1d: OUTPUT«No such method 'gist' for invocant of type 'BOOTSTRAPATTR'␤  in method gist at src/gen/CORE.setting:5259␤  in method gist at src/gen/CORE.setting:893␤  in sub say at src/gen/CORE.setting:10920␤  in block  at /tmp/4GXaMOXpbC:1␤␤»

[22:01] <FROGGS> sad

[22:02] <lizmat> Success, jnthn++

[22:02] <FROGGS> r: my Cool $foo = 3; print $foo.VAR.^attributes

[22:02] <camelia> rakudo 570d1d: OUTPUT«Nominal type check failed for parameter '$got'; expected Any but got BOOTSTRAPATTR instead␤  in method REIFY at src/gen/CORE.setting:6571␤  in method reify at src/gen/CORE.setting:5650␤  in method gimme at src/gen/CORE.setting:6058␤  in method print at src/gen/CORE…

[22:02] <labster> This is related to fixing RT#93980 , assigning Nil to that would set it to Cool

[22:02] *** chayin left
[22:02] <lizmat> jnthn: will run a spectest now to see if it doesn't break anything

[22:02] <lizmat> will let you know tomorrow, ok?

[22:03] <jnthn> lizmat: ok

[22:03] <jnthn> FROGGS, labster: https://gist.github.com/jnthn/5595470

[22:03] <jnthn> Sleep time for me... 'night

[22:03] <lizmat> night jnthn, sleep tight!

[22:03] <jnthn> hope so :)

[22:03] <jnthn> o/

[22:03] <labster> night, thanks

[22:04] *** lustlife left
[22:05] * lizmat also calling it a night, cu all tomorrow!

[22:08] *** donaldh joined
[22:24] *** donaldh left
[22:27] *** bluescreen100 left
[22:31] *** konundra joined
[22:34] *** v5DsX joined
[22:36] *** v5DsX left
[22:38] <adu> omg Ada2012 has a video

[22:38] <adu> we should make a video for Perl6

[22:39] <adu> just have a bunch of people send me interviews with themselves, then I could splice it together and add soundtrack

[22:41] *** gudahtt left
[22:41] <timotimo> ... interviews? why not ... space stations and guitars?

[22:41] <FROGGS> I sold my guitar ages ago :/

[22:41] <timotimo> a friend of mine recently introduced me to the erlang movie and its "sequel"

[22:43] *** gdey left
[22:43] <flussence> if you want to impress lots of people with a programming language, give them something made in it that runs at 60fps.

[22:46] <timotimo> i don't quite see that happen with perl6 soon :|

[22:46] <flussence> probably not, but it's something to aim for

[22:46] <FROGGS> not at 60fps, no

[22:46] <flussence> (took a while before Javascript could do that, too)

[22:47] <timotimo> and now there's asm.js and we have unreal engine stuff running in browsers, that's pretty crazy

[22:48] *** avuserow joined
[22:49] <avuserow> good *, #perl6 :)

[22:49] <adu> timotimo: have you seen this? http://bellard.org/jslinux/

[22:49] <labster> hello avuserow 

[22:51] <avuserow> hey labster, how's it going?

[22:52] <labster> pretty good: jnthn++ gave me some code I needed to solve a problem, and I'm going to YAPC:NA.  How about you?

[22:54] <avuserow> not much here, wrapping up $dayjob soon. I've been enjoying watching jnthn++'s progress on the JVM port too.

[22:54] <avuserow> and I am planning on going to YAPC::NA. Unfortunately I have to leave wednesday evening but I'll be around starting on Saturday, assuming I get my hotel plans figured out

[22:56] *** UTrGm joined
[22:57] <adu> flussence: you mean a first person shooter? or frames per second?

[22:57] *** skids joined
[22:58] <adu> flussence: also, it depends on the setup, because povray is a very nice language, but it usually runs at around 0.00000000001 fps

[22:59] <FROGGS> frames per seconds I think

[23:00] <adu> FROGGS: I think first person shooter would also fit the theme of the statement

[23:00] *** UTrGm left
[23:06] <adu> is moritz here?

[23:06] <FROGGS> adu: already sleeping I suppose

[23:07] *** jerome__ joined
[23:23] *** xilo left
[23:25] <labster> what does 'is pure' mean in rakudo?

[23:32] <FROGGS> I believe "having no side effects"

[23:39] *** DNQcj joined
[23:41] *** xilo joined
[23:43] *** DNQcj left
[23:45] *** gdey joined
[23:58] *** berekuk left
