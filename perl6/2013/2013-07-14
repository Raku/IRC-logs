[00:13] <sorear> we really should never ever ever call serialize_sc more than once on the same sc

[00:13] <sorear> instead of caching the result, we should cache a flag and croak if someone tries to call it again

[00:13] <jnthn> That's why I used two separate processees to cross-comp :P

[00:16] *** jaldhar_ left
[00:18] <pmurias> sorear: so I should cache the serialization on the QAST::CompUnit level?

[00:18] *** daudibaldr joined
[00:18] <pmurias> sorear: when cross compiling I need to have the serialized sc in both backends

[00:19] <jnthn> pmurias: Why not do the two-process approach like every previous port? ;)

[00:19] <pmurias> every previous = jvm,moarvm?

[00:20] <pmurias> jnthn: I could hack around it that way, but I think cross compiling is important enought to do it properly

[00:21] <jnthn> pmurias: yes ;)

[00:22] <pmurias> r: my $foo = BEGIN {(1..10).pick(1)};say($foo)

[00:22] <camelia> rakudo 6c80bf: OUTPUT«6␤»

[00:22] <timotimo> jnthn: https://github.com/timo/rakudo/tree/nodal/ - if you'd like to implement the derivation logic for "is nodal", here's code that should, in theory, work properly for every case you throw at it

[00:23] *** census_ left
[00:30] *** berekuk left
[00:31] *** berekuk joined
[00:32] <pmurias> g'night

[00:32] <jnthn> 'night

[00:32] <jnthn> timotimo: OK, I look in the morning :)

[00:32] *** berekuk left
[00:33] *** pmurias left
[00:34] <timotimo> good night jnthn :)

[00:38] <jnthn> o/

[00:39] *** benabik left
[00:47] *** FOAD joined
[00:48] *** grondilu left
[00:49] *** btyler joined
[01:20] *** daudibaldr left
[02:04] *** jaldhar_ joined
[02:12] *** raiph joined
[02:21] *** konundra left
[02:37] <[Coke]> are we sure that titlecase of ßß is Ssß ?

[02:37] <[Coke]> (and can we find a URL to back that up for the roast test?)

[02:47] <timotimo> there is no ß at the beginning of words in german at least

[02:49] <timotimo> but i also don't know of any words that start with ss.

[02:50] *** [particle]1 joined
[02:52] *** [particle] left
[03:07] *** jaldhar_ left
[03:07] *** _jaldhar_ joined
[03:16] <labster> my dictionary helpfully suggested: http://en.wikipedia.org/wiki/Ssam

[03:17] <labster> although http://de.wikipedia.org/wiki/Koreanische_K%C3%BCche spells it 'ssam'/'Ssam'

[03:19] <sorear> Sssssss!

[03:19] <sorear> Ssh!

[03:20] <sorear> oh, that's more usually Shh!

[03:27] *** s1n joined
[03:32] <lue> [Coke]: the titlecase of ßß is clearly ẞß :)

[03:35] *** benabik joined
[03:42] *** dmol joined
[03:45] *** avuserow joined
[03:46] <avuserow> rn: say 1_000_000

[03:46] <camelia> rakudo 6c80bf, niecza v24-86-g39ab531: OUTPUT«1000000␤»

[03:46] * avuserow is glad that's still a thing

[03:50] *** dmol left
[03:55] *** preflex_ joined
[03:55] *** ChanServ sets mode: +v preflex_

[03:57] *** preflex left
[03:57] *** preflex_ is now known as preflex

[04:11] <diakopter> avuserow: hey

[04:11] <avuserow> hey diakopter, how goes?

[04:12] <diakopter> ok

[04:28] *** jeffreykegler joined
[04:42] *** jeffreykegler left
[04:44] *** daniel-s_ left
[04:50] *** mtk left
[04:59] *** slayer101_ joined
[05:02] *** mtk joined
[05:03] *** konundra joined
[05:11] *** kingbeast left
[05:13] *** slayer101_ left
[05:56] *** kaare_ joined
[06:14] *** zby_home_ joined
[06:41] *** dukeleto joined
[06:41] <dukeleto> o/

[06:43] <sorear> o/

[06:43] *** PacoAir left
[06:44] *** PacoAir joined
[06:49] *** btyler left
[06:58] *** btyler joined
[07:05] *** btyler left
[07:08] *** slayer101_ joined
[07:17] *** Psyche^ joined
[07:19] *** Psyche^ left
[07:23] *** slayer101_ is now known as For-Odin

[07:24] *** Psyche^ joined
[07:25] *** For-Odin left
[07:25] *** Psyche^ left
[07:26] *** Psyche^ joined
[07:27] *** For-Odin joined
[07:30] *** konundra left
[08:00] *** domidumont joined
[08:01] *** domidumont left
[08:02] *** FROGGS joined
[08:03] <FROGGS> o/

[08:05] <sorear> o/

[08:10] <labster> o/

[08:11] *** raiph left
[08:16] *** hugme left
[08:16] *** tadzik left
[08:16] *** [Coke] left
[08:16] *** masak left
[08:17] *** Juerd left
[08:17] *** Util left
[08:18] *** synopsebot left
[08:18] *** dalek left
[08:18] *** PerlJam left
[08:19] *** Rotwang1 joined
[08:19] *** camelia left
[08:20] *** dukeleto left
[08:23] *** Juerd joined
[08:23] *** [Coke] joined
[08:23] *** masak joined
[08:23] *** Util joined
[08:24] *** camelia joined
[08:24] *** tadzik joined
[08:24] *** dalek joined
[08:24] *** ChanServ sets mode: +v dalek

[08:24] *** synopsebot joined
[08:24] *** hugme joined
[08:24] *** ChanServ sets mode: +v hugme

[08:25] *** PerlJam joined
[08:25] *** ChanServ sets mode: +v camelia

[08:37] *** patspam left
[08:49] *** patspam joined
[08:52] *** domidumont joined
[08:57] *** For-Odin left
[09:16] *** spider-mario joined
[09:18] *** domidumont left
[09:19] *** domidumont joined
[09:29] <moritz> u ẞ

[09:29] <moritz> .u ẞ

[09:29] <yoleaux> U+1E9E LATIN CAPITAL LETTER SHARP S [Lu] (ẞ)

[09:37] *** woolfy joined
[09:42] *** berekuk joined
[09:43] *** berekuk left
[10:05] * jnthn ponders nodal a little

[10:07] <dalek> nqp/cached-serialization: a1783a1 | (Pawel Murias)++ | src/ (2 files):

[10:07] <dalek> nqp/cached-serialization: Add a QAST::CompUnit.serialize_sc, which serializes the sc on the first use, and subsequently returns that value.

[10:07] <dalek> nqp/cached-serialization: review: https://github.com/perl6/nqp/commit/a1783a18a1

[10:07] *** pmurias joined
[10:07] *** xyf joined
[10:08] <pmurias> jnthn: ^^ that branch solves my problem

[10:14] <jnthn> TimToady: We could allow "is nodal" on a class as a kind of class-wide defualt, a bit like we allow 'is rw' on a class to imply it on all attributes.

[10:14] <jnthn> TimToady: That'd save making Iterable special :)

[10:16] <jnthn> I think we want it so that all relevant methods end up with a "nodal" marker.

[10:16] <jnthn> Rather than hard-coding looking at types

[10:17] <jnthn> I suspect we have enough bits already

[10:17] *** ecocode joined
[10:18] <pmurias> jnthn: so do you we want to merge the cached-serialization branch?

[10:18] <jnthn> (to store it without making sub any bigger)

[10:19] <jnthn> pmurias: Something feels wrong, but I can't put my finger on what just yet...

[10:19] *** SamuraiJack joined
[10:21] <pmurias> jnthn: maybe I should split the method up into has_serialized_sc,serialize_sc,serialized_sc?

[10:22] *** domidumont left
[10:24] <pmurias> jnthn: or do you mean in a does something crazy way, rather then it being a matter of style

[10:25] <pmurias> food&

[10:33] *** ggoebel left
[10:34] <dalek> nqp: 655b7da | (Solomon Foster)++ | src/HLL/sprintf.nqp:

[10:34] <dalek> nqp: Refactor a tad.

[10:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/655b7da2f6

[10:35] *** colomon joined
[10:35] <colomon> \o

[10:38] <dalek> roast: 1260840 | (Solomon Foster)++ | S02-types/ (2 files):

[10:38] <dalek> roast: Refudge and tweak typed Bag/KeyBag tests.

[10:38] <dalek> roast: review: https://github.com/perl6/roast/commit/12608404ac

[10:46] *** berekuk joined
[11:02] <arnsholt> o/ colomon 

[11:03] <colomon> \o

[11:28] *** colomon left
[11:34] *** SamuraiJack_ joined
[11:37] *** SamuraiJack left
[11:38] *** berekuk left
[11:44] *** SamuraiJack_ left
[11:44] *** SamuraiJack_ joined
[11:45] <pmurias> jnthn: does have_we_serialized_sc/serialize_sc/sc_string_heap (sc_sh) seem better?

[11:59] <jnthn> QAST nodes are meant to be, well, nodes. 

[12:00] <jnthn> This patch puts a method on it

[12:00] <jnthn> That does compilation stuff

[12:00] <jnthn> The exact details of how we serialize should really be left to the backend.

[12:08] <pmurias> jnthn: the problem is that currently QAST::Compiler gets damaged by the backend

[12:08] <pmurias> * QAST::CompUnit

[12:08] <pmurias> jnthn: as we can only extract the info from the sc once

[12:09] <jnthn> Yes, you're only meant to do it once, but you decided to do things differntly. :/

[12:09] <jnthn> How about you subclass the Parrot QAST::Compiler?

[12:10] <jnthn> And override a method somewhere to keep things around as you wish

[12:10] <jnthn> Then once things self-host on JavaScript it can be thrown away.

[12:16] <dalek> nqp/cached-serialization: 2bb2232 | (Pawel Murias)++ | src/ (2 files):

[12:16] <dalek> nqp/cached-serialization: Serialize the sc only when explicitly told to.

[12:16] <dalek> nqp/cached-serialization: review: https://github.com/perl6/nqp/commit/2bb2232b9c

[12:21] <pmurias> jnthn: if we treat this as a temporary solution, I could just monkey path QAST::Compiler or use a branch

[12:22] <pmurias> jnthn: what I'm concerned is that it might be usefull to keep the ability to cross compile even after the bootstrap

[12:24] <pmurias> if for example the parsing on one the jvm is significantly faster then on js

[12:26] <pmurias> jnthn: or if we are compling to something like ARM

[12:33] *** berekuk joined
[12:34] *** domidumont joined
[12:36] *** birdwindupbird joined
[12:37] *** lelf left
[12:40] <dalek> rakudo/nom: ebb29be | jonathan++ | src/vm/jvm/runtime/org/perl6/rakudo/RakOps.java:

[12:40] <dalek> rakudo/nom: Implement type checking return values.

[12:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ebb29bed98

[12:44] *** berekuk left
[12:45] <pmurias> jnthn: instead of adding methods to a QAST node we could store things like $comp_unit<sc_sh> := ... 

[12:45] <jnthn> No, I don't think it should be stored in the node.

[12:45] *** ecocode left
[12:46] <jnthn> pmurias: Maybe some contextual that, if there, can be used.

[12:46] *** domidumont left
[12:54] <pmurias> jnthn: we could mixin a role, if you are concered about tangling up concerns in the code

[12:55] <pmurias> jnthn: if you are concerned that the data doesn't belong in the node, it's already there (in the $!sc), just in a form that's annoying to use

[12:57] <pmurias> jnthn: and currently the only way to extract stuff from the sc is to serialize it so we aren't making any choice for the backend

[12:58] <dalek> nqp: 754bc44 | jonathan++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[12:58] <dalek> nqp: Tweak nqp::backtrace() to give VM coderef back.

[12:58] <dalek> nqp: 

[12:58] <dalek> nqp: This is what the usage of it in Rakudo expects. Gets us passing a

[12:58] <dalek> nqp: good bit more of S32-exceptions/misc.t.

[12:58] <dalek> nqp: review: https://github.com/perl6/nqp/commit/754bc4426e

[13:00] *** census__ joined
[13:03] <jnthn> pmurias: Well, I got the impression something a bit more interesting must be going on over on the jVM port, given it ends up packing the serialized output into a JAR. Not quite sure how that looks...

[13:03] * pmurias looks ;)

[13:04] *** mtk left
[13:05] *** berekuk joined
[13:09] *** Rotwang1 left
[13:10] *** mtk joined
[13:11] <pmurias> jnthn: it's extracted the same way like on parrot and js: https://github.com/perl6/nqp/blob/master/src/vm/jvm/QAST/Compiler.nqp#L3055

[13:15] <timotimo> o/

[13:15] <tadzik> so, can someone give me a hand with making 'perl6' shell script run outside rakudo directory?

[13:16] <pmurias> jnthn: I'll use a branch for now, and we can see how things workout, maybe sorear will have some insight like he did on adding caching to nqp::serialize

[13:16] <tadzik> Replacing all '.' with absolute paths and adding stuff to classpath doesn't seem to help

[13:16] *** sergot joined
[13:17] <sergot> hi!

[13:17] <sergot> o/

[13:17] <pmurias> hi

[13:17] <tadzik> hi hi

[13:17] <moritz> \o tadzik, pmurias, sergot, *

[13:18] <jnthn> ok

[13:18] <jnthn> Hopefully the last couple of commits get us closer to 98% in the tests :)

[13:19] <jnthn> bbl &

[13:25] *** xyf left
[13:36] *** rindolf joined
[13:38] *** lelf joined
[13:40] * timotimo is not absolutely sure how the nodality of Hash's or Associative's methods should be handled

[13:44] *** BenGoldberg joined
[13:55] <dalek> rakudo-js: 381555f | (Pawel Murias)++ | / (3 files):

[13:55] <dalek> rakudo-js: Use the cached-serialization branch. We can compile th whole of QASTNode.nqp

[13:55] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/381555fd87

[13:56] *** lizmat_ left
[13:58] *** grondilu joined
[13:59] <grondilu> rn: say "A" ~~ /<ident-[A..Z]>/

[13:59] <camelia> niecza v24-86-g39ab531: OUTPUT«===SORRY!===␤␤Unrecognized regex metacharacter - (must be quoted to match literally) at /tmp/DLSmcpTWGm line 1:␤------> say "A" ~~ /<ident-⏏[A..Z]>/␤␤Unhandled exception: Unable to resolve method ast in type Any␤  at /h…

[13:59] <camelia> ..rakudo ebb29b: OUTPUT«===SORRY!===␤regex assertion not terminated by angle bracket␤at /tmp/2uwlu_hJeN:1␤------> say "A" ~~ /<ident⏏-[A..Z]>/␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        prefix or ter…

[13:59] <grondilu> rn: say "A" ~~ /<ident>/

[13:59] <camelia> rakudo ebb29b, niecza v24-86-g39ab531: OUTPUT«｢A｣␤ ident => ｢A｣␤␤»

[14:00] *** lelf` joined
[14:00] <grondilu> rn: say "A" ~~ /<ident-[A..Z] >/

[14:00] <camelia> rakudo ebb29b: OUTPUT«===SORRY!===␤regex assertion not terminated by angle bracket␤at /tmp/kUPZnxCfgj:1␤------> say "A" ~~ /<ident⏏-[A..Z] >/␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        prefix or te…

[14:00] <camelia> ..niecza v24-86-g39ab531: OUTPUT«===SORRY!===␤␤Unrecognized regex metacharacter - (must be quoted to match literally) at /tmp/3Xkro5ICB1 line 1:␤------> say "A" ~~ /<ident-⏏[A..Z] >/␤␤Unhandled exception: Unable to resolve method ast in type Any␤  at /…

[14:01] *** Rotwang1 joined
[14:02] <grondilu> rn: say "A" ~~ /<+ident-[A..Z]>/

[14:02] <camelia> rakudo ebb29b, niecza v24-86-g39ab531: OUTPUT«Nil␤»

[14:03] *** lelf left
[14:04] *** SamuraiJack_ left
[14:39] *** btyler joined
[14:42] *** SmokeMac_ joined
[14:43] *** konundra joined
[14:48] *** ajr joined
[14:48] *** ajr is now known as Guest76911

[14:48] *** Guest76911 is now known as ajr_

[14:49] *** rindolf left
[15:06] *** lelf` is now known as lelf

[15:06] <moritz> r: say (100, 155, * % * ... 0)[*-2]

[15:07] <camelia> rakudo ebb29b: OUTPUT«5␤»

[15:07] *** REPLeffect joined
[15:09] <timotimo> what is that sequence for? o_O

[15:09] <moritz> GCD

[15:09] <moritz> r: say 100 gcd 155

[15:09] <camelia> rakudo ebb29b: OUTPUT«5␤»

[15:10] <timotimo> oh!

[15:24] *** lelf left
[15:25] <timotimo> moritz: personally i'd've gone with ...^ 0 and then just [*-1]

[15:39] *** btyler left
[15:42] <moritz> timotimo: I think that little snippet comes from the times before ...^

[15:42] <timotimo> ah

[15:50] <moritz> back in the days when the sequence operator was new, I looked for cool uses of it

[15:50] <moritz> and euler's algorithm happens to be one that just needed the last two intermediate resutls

[15:51] *** SamuraiJack_ joined
[15:51] *** rindolf joined
[15:52] <moritz> r: say (100, 155, * % * ... 0)

[15:52] <camelia> rakudo ebb29b: OUTPUT«100 155 100 55 45 10 5 0␤»

[15:53] *** Rotwang1 left
[15:55] *** SamuraiJack__ joined
[15:58] *** SamuraiJack_ left
[16:04] *** ggoebel joined
[16:06] *** pecastro_ left
[16:08] *** Rotwang1 joined
[16:16] *** dukeleto joined
[16:16] <dukeleto> o/

[16:19] <tadzik> hi dukeleto 

[16:20] <dukeleto> tadzik: wazzup

[16:21] <tadzik> dukeleto: I was thinkikng about Seasons of Code today

[16:21] <tadzik> any news on that?

[16:23] <dukeleto> tadzik: i am still going to pursue that, but I have not had a wink of free-time outside of brewpony

[16:23] <dukeleto> tadzik: but i just shipped out coffee for the month, so I have time to hack on stuff a bit :)

[16:23] <tadzik> cool :)

[16:24] <dukeleto> tadzik: my plan is to talk to the appropriate TPF committee (I have chatted with them already) and make a plan and get funding for Perl Seasons of Code

[16:25] <dukeleto> tadzik: then I would create and document "the process" that I can hand over to somebody the following year. The last thing I want is to be another single-point-of-failure

[16:25] <tadzik> right

[16:25] <dukeleto> tadzik: "the process" of herding herds of herds of cats, that is :)

[16:25] <tadzik> ;)

[16:26] <dukeleto> tadzik: my hope is that seasons of code will not have as strict rules about age as gsoc

[16:26] <dukeleto> I think we have to require >=13 years old, for stupid US legal reasons

[16:26] <dukeleto> but otherwise, that might be the only requirement, other than being awesome

[16:27] <FROGGS> a SoC would be pretty awesome, and I think this will work out pretty well

[16:29] <tadzik> yeah, age rules are LTA

[16:29] <tadzik> on both sides :)

[16:29] <dukeleto> tadzik: it protects kids against child labor, which i think is good

[16:30] *** raiph joined
[16:30] <dukeleto> I met an 11 year old selling lemonade at a lemonade stand yesterday. He said he already knew Bash, Python, C++ and Java. So I gave him my business card.

[16:30] <dukeleto> What an odd place Portland is.

[16:30] <FROGGS> well, then maybe a kid <13 years might just get no money, but is still allowed to participate

[16:30] <dukeleto> FROGGS: yes

[16:30] <tadzik> I see

[16:30] <FROGGS> hehe

[16:30] <dukeleto> FROGGS: money makes all the laws kick in

[16:31] <tadzik> the opportunity to work on a Big Deal and have help of experienced people and gain experience yourself is not a small thing

[16:32] * diakopter wonders what Big Deals are left

[16:32] <dukeleto> tadzik: indeed. That is why GCI students were actually more motivated than GSoC students

[16:33] <dukeleto> diakopter: your perspective is wonky :)

[16:33] <diakopter> your perspective is wonky

[16:33] <dukeleto> diakopter: i prefer my wonkiness to your wonkiness :)

[16:34] <tadzik> one's weekend project is another one's Big Deal

[16:34] <pmurias> jnthn: what do you think if instead of putting the serialized serialization context, the sc would keep that after serialization?

[16:34] <diakopter> dukeleto: I couldn't possibly care any less which one you prefer, and I can't imagine anyone else caring either

[16:36] <pmurias> that is we would have a nqp::serialization($sc) op that we are only allowed to call once, a nqp::sc_is_serialized($sc), nqp::sc_get_sh($sc) and nqp::sc_get_data($sc)?

[16:36] <dukeleto> diakopter: well, maybe you should not spread your weariness and lack of -Ofun

[16:36] <dukeleto> These kids are amazed at the chance to help something as cool as Perl 6.

[16:36] <diakopter> dukeleto: maybe you shouldn't tell your critics to kill themselves

[16:36] <dukeleto> diakopter: perhaps

[16:36] <dukeleto> diakopter: I don't think I said that to you, but whatevs, dude.

[16:37] <pmurias> ...things escalated pretty quickly ;)

[16:37] <diakopter> why would it matter who you said it to?

[16:37] <dukeleto> these kids have never heard the "perl is dead" meme and don't know that node is cooler than ruby now

[16:37] <dukeleto> diakopter: seems like you are having a bad day. Maybe go for a walk and do something happy?

[16:37] <dukeleto> diakopter: i am your buddy, not whatever you are thinking in your head.

[16:38] <diakopter> I am quite sure that you think that

[16:38] <dukeleto> diakopter: yep.

[16:38] <dukeleto> diakopter: i said hello to you at YAPC::NA and tried to talk. That was me being friendly.

[16:39] <dukeleto> diakopter: but i saw that you didn't want to interact with me. Fair enough. But you don't get to be mean in #perl6

[16:39] <diakopter> I didn't?

[16:39] <dukeleto> diakopter: i will ask TimToady to eject you.

[16:39] * dukeleto goes to his happy place

[16:39] *** dukeleto left
[16:39] <diakopter> why did you think I didn't want to interact with you?

[16:40] <geekosaur> that person has... issues

[16:40] <FROGGS> but w/e, SoC++

[16:41] <pmurias> jnthn: with better op names

[16:41] <diakopter> I'm pretty sure I wasn't being "mean" compared to him telling my friend "And possibly eat a tasty ice pick with a side of sand to wash it down."

[16:42] <FROGGS> diakopter: we all know that you are the rude guy of #perl6 *g*

[16:42] <diakopter> lolololol

[16:43] * diakopter commutes

[16:47] * timotimo wonders, but at the same time doesn't think he wants to know

[16:47] *** ajr_ left
[16:48] *** ajr joined
[16:48] *** ajr is now known as Guest4396

[16:48] *** Guest4396 is now known as ajr_

[16:49] *** drbean left
[16:49] *** drbean joined
[16:52] <pmurias> jnthn: example of what I'm proposing http://pastie.org/8140268

[16:55] <census__> diakopter has been super nice to me :)

[17:08] *** birdwindupbird left
[17:30] *** pecastro joined
[17:46] <diakopter> FROGGS: it's funny b/c it's sometimes true

[17:48] <FROGGS> diakopter: hmmmm, I've never seen you rude here

[17:48] <moritz> somtimes curt, but not rude

[17:49] <diakopter> heh. usually it's not on purpose. bad assumptions by me.

[17:49] <moritz> the usual problem with IRC being a medium with small bandwidth

[17:56] *** cognominal left
[17:58] <sorear> good * #perl6

[17:58] <sorear> pmurias: I'm not sure what you're doing, but if it requires caching serialize it sounds *less* correct than the two-process solution

[18:07] *** rindolf left
[18:08] *** raiph left
[18:15] *** SamuraiJack joined
[18:15] *** SamuraiJack__ left
[18:17] <pmurias> sorear: hi

[18:18] *** labster joined
[18:18] <pmurias> sorear: I'm compiling one QAST::CompUnit on two backends, first on parrot then on javascript

[18:18] *** kaare__ joined
[18:19] <pmurias> sorear: you have seen the example?

[18:19] <pmurias> sorear: http://pastie.org/8140268

[18:21] <pmurias> sorear: when compiling the same compunit on the second backend I want to be able to check if the serialization context is serialized and just use it

[18:21] <pmurias> s/it/the stuff it's already serialized too

[18:21] *** kaare_ left
[18:21] *** s1n left
[18:22] <pmurias> sorear: calling the serialize opcode on the same context twice will throw an exception

[18:26] *** SamuraiJack left
[18:39] *** s1n joined
[18:39] <sorear> pmurias: why are you doing parrot if the goal is javascript?

[18:48] *** SamuraiJack joined
[18:48] *** ajr_ left
[18:48] *** ajr joined
[18:49] *** ajr is now known as Guest73800

[18:49] *** Guest73800 is now known as ajr_

[18:50] *** cognominal joined
[18:51] *** lelf joined
[18:52] *** ajr_ left
[18:53] <arnsholt> jnthn: Should result() in QAST::Compiler (line 106) for JVM perhaps check that $type != $RT_VOID?

[18:58] <pmurias> sorear: nqp-js currently can't bootstrap, so I'm running on top of parrot

[18:59] <pmurias> sorear: when I load a module it must be available a both a .pbc so I can load it at compile time, and as a .js file so I can load it at runtime

[19:03] <pmurias> sorear: I could switch to using jvm instead of parrot ;)

[19:04] <diakopter> pmurias: I was consideing doing that for moarvm.. 

[19:04] <diakopter> *considering

[19:04] <diakopter> but it would be more than several hours

[19:04] <diakopter> (for me)

[19:09] <pmurias> diakopter: what else would be necessary other than changing Makefiles?

[19:10] <diakopter> for moarvm, lots, since nqp isn't bootstrapped there, and the bytecode compiler isn't re-macro'd (including support code) to be bound in that

[19:11] <sorear> pmurias: why do you need compile-time loading?

[19:12] *** Maddingue joined
[19:12] <pmurias> when I'm loading something like QAST::Node

[19:13] <census> diakopter++

[19:13] <census> portland--

[19:14] *** raiph joined
[19:14] <diakopter> census: :(

[19:15] *** arifmelik joined
[19:16] <census> what's wrong diakopter? :(

[19:16] *** Maddingue left
[19:17] <pmurias> sorear: re compile-time loading, nqp imports a lot of stuff at compile time from the setting

[19:18] *** arifmelik left
[19:19] <pmurias> sorear: so a lot of the QAST::WVal's contains things from other compilation units, and they need to be loaded

[19:26] <arnsholt> yoleaux: tell jnthn Should result() in QAST::Compiler (line 106) for JVM perhaps check that $type != $RT_VOID? Or maybe set_core_op_result_type (l 347) is missing a case?

[19:27] <arnsholt> Hmm, that seems to be wrong. How is this supposed to work again?

[19:28] *** benabik left
[19:29] *** benabik joined
[19:31] *** lizmat joined
[19:33] *** raiph left
[19:37] *** sciurius joined
[19:37] *** Maddingue joined
[19:39] *** domidumont joined
[19:42] *** Maddingue left
[19:42] *** census__ left
[19:45] <dalek> rakudo-js: efc1168 | (Pawel Murias)++ | src/QAST/Compiler/JavaScript.nqp:

[19:45] <dalek> rakudo-js: Implement nqp::const::*.

[19:45] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/efc11681dc

[19:48] <jnthn> pmurias: I keep telling you to couple something as loosely as possible and you keep trying to shove it even deeper in. :/

[19:50] <mst> jnthn: eventually the process'll receive SIGPROLAPSE and he'll figure out why it was a bad idea

[19:50] <yoleaux> 11 Jul 2013 19:20Z <raiph> mst: http://perlcabal.org/syn/S02.html#Slangs

[19:51] <jnthn> pmurias: I really don't see why it can't be a %*SAVE_SC declared in the cross-comp's MAIN, and a check for if that exists and saving the serialized stuff in there if so.

[19:51] <jnthn> mst: :)

[19:55] <arnsholt> jnthn: I think I'm running into a QAST/JVM bug when $stack_out is $RT_VOID. Sound plausible?

[19:57] <sorear> arnsholt: you're declaring a classlib op that returns void?

[19:57] <jnthn> arnsholt: maybe...iirc you still need to obtain the thing...

[19:57] <sorear> (what is arnsholt's project?)

[19:57] <arnsholt> sorear: Yep, it's called purely for its side effects (setting up the internals of a thing)

[19:57] <arnsholt> jnthn: Obtain the thing?

[19:58] <jnthn> $*STACK.obtain(...)

[19:59] <arnsholt> I have no idea what that means. I add the ops with QAST::OperationsJAST.map_classlib_core_op, so I'm not doing much in the way of internals setup

[19:59] <arnsholt> sorear: This is for NativeCall/JVM

[19:59] <timotimo> tadzik: did you notice the file tools tests are failing? ;)

[20:00] <jnthn> arnsholt: Well, what sorear said. Did you declare ops void?

[20:00] <tadzik> timotimo: no, I did not :)

[20:00] <jnthn> Don't do that... :)

[20:00] <timotimo> only one, though

[20:00] <arnsholt> The op is public static void, yeah

[20:00] <arnsholt> That's wrong?

[20:00] <timotimo> not ok 10 - found one of two files due to X::IO::Dir - got 2 expected 1

[20:01] <jnthn> arnsholt: Can cause issues.

[20:01] <timotimo> in the test file, tabs and spaces are mixed ;_;

[20:01] <arnsholt> Oh, didn't know that. Why is that?

[20:02] *** SamuraiJack left
[20:02] <jnthn> arnsholt: 'cus if you use the op in any not-void-expecting context (like, last in a block) then it causes issues.

[20:03] <arnsholt> Oooooh, right

[20:03] <arnsholt> Unconditionally return 1 it is then =)

[20:07] *** domidumont left
[20:14] <sorear> timotimo: probably lots of end-of-line spaces, too?

[20:17] <timotimo> end-of-line tabs ;)

[20:26] *** kaare__ left
[20:28] *** Maddingue joined
[20:32] *** Maddingue left
[20:34] *** PacoAir left
[20:35] *** zby_home_ left
[21:03] *** mtk left
[21:06] *** mtk joined
[21:11] <timotimo> ufo still doesn't properly exclude . and .. from dirwalk in upstream :|

[21:11] <timotimo> and masak is now on holiday

[21:12] *** sivoais joined
[21:13] *** Maddingue joined
[21:15] *** Pleiades` joined
[21:16] *** ecocode` joined
[21:17] *** Maddingue left
[21:21] *** sivoais left
[21:26] <timotimo> .o(and of course building rakudo::debugger is as impossible as it's been for ages now)

[21:26] <timotimo> is anybody able to install that? on linux?

[21:38] *** raiph joined
[21:39] <dalek> perl6-roast-data: 72865ed | coke++ | / (5 files):

[21:39] <dalek> perl6-roast-data: today (automated commit)

[21:39] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/72865edd1d

[21:43] *** lizmat left
[21:45] <[Coke]> rakudo.jvm @ 98.17%

[21:46] <sorear> wa?

[21:48] <[Coke]> what wa?

[21:49] <sorear> seems a large jump relative to what's been done in the last 24h

[21:50] <[Coke]> I fudged a test so it didn't abort and lose passes.

[21:51] <[Coke]> r: say 371-313

[21:51] <camelia> rakudo ebb29b: OUTPUT«58␤»

[21:51] <[Coke]> 58 more passes since yesterday

[21:58] *** Maddingue joined
[22:02] *** Maddingue left
[22:04] *** spider-mario left
[22:05] *** Rotwang1 left
[22:09] *** BenGoldberg left
[22:13] *** PZt joined
[22:26] *** raiph left
[22:43] *** lelf left
[22:43] *** Maddingue joined
[22:48] *** Maddingue left
[23:14] *** raiph joined
[23:20] *** raiph left
[23:22] *** lizmat joined
[23:26] *** raiph joined
[23:27] *** lue left
[23:29] *** Maddingue joined
[23:30] *** sivoais joined
[23:30] *** sivoais left
[23:33] *** Maddingue left
[23:39] *** lue joined
[23:48] *** ecocode` left
[23:50] *** raiph left
[23:51] *** raiph joined
[23:52] *** jferrero joined
[23:52] *** grondilu left
