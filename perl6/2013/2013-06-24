[00:00] <dalek> mu: fd763ab | (Timo Paulssen)++ | misc/camelia. (2 files):

[00:00] <dalek> mu: reinstate camelia's lipstick

[00:00] <dalek> mu: review: https://github.com/perl6/mu/commit/fd763ab850

[00:00] <timotimo> TimToady: the pdf looks strange when zoomed in

[00:03] <timotimo> facepalm.

[00:03] <sorear> um

[00:04] <sorear> the new camelia sure looks different

[00:05] <timotimo> yes, inkscape helpfully selected "selection" for export

[00:05] <dalek> mu: a92daa4 | (Timo Paulssen)++ | misc/camelia. (2 files):

[00:05] <dalek> mu: reinstate camelia's lipstick

[00:05] <dalek> mu: review: https://github.com/perl6/mu/commit/a92daa4d1c

[00:05] <timotimo> i hope you don't mind my diverged force-commit

[00:06] <timotimo> maybe i'll do it again and make it the same size as before, too ...

[00:07] <sorear> ah, and you dealt with her cracked lips too

[00:07] <timotimo> cracked *everything*

[00:07] <dalek> mu: 3faf5b7 | (Timo Paulssen)++ | misc/camelia. (2 files):

[00:07] <dalek> mu: reinstate camelia's lipstick

[00:07] <dalek> mu: review: https://github.com/perl6/mu/commit/3faf5b71d3

[00:11] <timotimo> i'm not sure why i added a pngfile in the previous commit that had cracked everything, too

[00:11] <timotimo> i must have confused my paths

[00:13] <sorear> it's, um, still not the same size

[00:14] <timotimo> oh?

[00:14] <timotimo> excuse my incessant failing

[00:15] <timotimo> i'll nuke the previous commit along with this one then.

[00:16] *** moritz joined
[00:16] <dalek> mu: a055286 | (Timo Paulssen)++ | misc/camelia. (5 files):

[00:16] <dalek> mu: rework camelia.svg, create .png, .odg and delete .jpg, .pdf

[00:16] <dalek> mu: review: https://github.com/perl6/mu/commit/a05528693f

[00:16] <timotimo> please be correct, please be correct, please be correct ...

[00:16] *** skyheights left
[00:22] <flussence> okay, the PNG is a clear improvement over the jpg now.

[00:22] *** moritz left
[00:22] *** moritz joined
[00:22] <flussence> (it's also convenient that page up/down on that diff page places them in exactly the same position on my screen...)

[00:23] <timotimo> :D

[00:23] *** moritz left
[00:25] *** benabik left
[00:25] *** benabik joined
[00:27] *** gdey left
[00:33] *** xinming left
[00:35] *** moritz joined
[00:35] *** moritz left
[00:36] *** _ilbot joined
[00:36] *** _ilbot left
[00:37] *** xinming joined
[00:38] *** _ilbot joined
[00:39] *** _ilbot left
[00:45] *** moritz joined
[00:45] *** moritz left
[00:55] <timotimo> i'm discussing with a friend: ways to make an io-incapable evalserver for secure running of stuffs

[00:56] <flussence> libseccomp if you're on linux - blocks operations at the syscall level

[00:58] <timotimo> can i threads with that?

[00:58] <timotimo> or do i have to fork?

[00:58] <timotimo> i don't think i can even fork on the jvm

[00:59] <flussence> IIRC it applies to whatever process it's initially used in and anything that spawns

[01:00] *** _ilbot joined
[01:00] <timotimo> apparently i can turn on the classloader to make all java.io and java.nio loaded classes dumb stubs

[01:00] *** _ilbot left
[01:01] <flussence> that might work, seccomp would work better if you're really paranoid though since it's an in-kernel thing :)

[01:01] <flussence> the java way is probably far less effort to actually get working though...

[01:07] *** _ilbot joined
[01:07] *** _ilbot left
[01:08] *** snoopy joined
[01:08] <timotimo> may very well be

[01:08] <timotimo> especially since i'd want to let clients connect while the server is running

[01:09] <timotimo> and not start a fresh eval worker for each client

[01:12] <sorear> why not eval on the client?

[01:13] <timotimo> because 1) java applets apparently need to die in a fire and 2) i want to offer something like try.rakudo.org which would hopefully work without "installing" anything

[01:13] <timotimo> and we don't have rakudo-js or moarvm-to-emscripten yet

[01:14] *** _ilbot joined
[01:14] *** moritz joined
[01:14] *** _ilbot left
[01:14] *** moritz left
[01:15] <sorear> java applets work without install

[01:16] <timotimo> that is true, however there's an additional hurdle

[01:17] <benabik> At this point many people have (had) disabled the Java applet plugin.

[01:17] <timotimo> it's apparently possible to call functions inside the applet from javascript

[01:17] <timotimo> but it's not possible to call into js from the applet

[01:17] <sorear> that's wrong

[01:17] <timotimo> so the applet could receive code from a code editor, but not push the result back?

[01:17] <timotimo> oh, pleaes enlighten me!

[01:18] <sorear> 11:06 < sorear> timotimo: https://jdk6.java.net/plugin2/liveconnect/#JAVA_TO_JS

[01:18] <sorear> 11:10 < sorear> timotimo: the design I'm planning to implement is to have an invisible applet that responds to evaluation methods, and implement the repl in html/js

[01:18] <sorear> 11:10 < sorear> that way you get all the nice browser features like right click, copy for free

[01:18] *** _ilbot joined
[01:18] <timotimo> oh!

[01:18] <timotimo> wait, you were going to implement something like that?

[01:18] *** _ilbot left
[01:18] <sorear> yes

[01:18] <sorear> next week

[01:18] <timotimo> awesome!

[01:19] <sorear> unless you want to take over?

[01:19] <timotimo> no, i really don't :D

[01:19] <timotimo> .o(but i do have some non-ripe ideas about a website to go around such an eval thingie)

[01:19] <sorear> I haven't tested the #JAVA_TO_JS stuff, it might not work at all :p

[01:20] <timotimo> could you please keep in mind an api that would allow me to 1) send code from multiple different code editors and receive them in different places, 2) add test case code, perhaps to the end but hopefully externally, 3) allow for multiple sources-of-code to act like different files for modules?

[01:21] <timotimo> no need to make that all straight away, but it would be cool if that would be possible to implement from the beginning

[01:25] *** echoprinter left
[01:32] *** dayangkun left
[01:33] *** xinming_ joined
[01:35] *** raiph left
[01:35] *** gdey joined
[01:36] *** xinming left
[01:43] *** raiph joined
[01:43] <jercos> hrm, something's shady here...

[01:43] <jercos> r: 4.unpolar(pi).Int

[01:43] <camelia> rakudo b9869c: OUTPUT«Can not convert -4+4.89842541528951e-16i to Int: imaginary part not zero␤  in method Int at src/gen/CORE.setting:10358␤  in method Int at src/gen/CORE.setting:8521␤  in block  at /tmp/X4FCY25gwk:1␤␤»

[01:44] <jercos> r: 4.unpolar(pi*2).Int

[01:44] <camelia> rakudo b9869c: OUTPUT«Can not convert 4-9.79685083057902e-16i to Int: imaginary part not zero␤  in method Int at src/gen/CORE.setting:10358␤  in method Int at src/gen/CORE.setting:8521␤  in block  at /tmp/wW75k_RXWR:1␤␤»

[01:44] <sorear> looks right to me

[01:54] *** Chillance left
[01:55] *** ssutch left
[01:58] *** ssutch joined
[02:03] <timotimo> e-16, that's no tmuch, perhaps pi is just not precise enough?

[02:03] <timotimo> (perhaps just ~15 digits?)

[02:06] *** ggoebel2 left
[02:09] <colomon> floating point math is not precise enough

[02:09] <timotimo> that makes sense.

[02:09] <timotimo> at this point, wouldn't .abs work?

[02:16] <colomon> approximately, sure.

[02:16] <colomon> r: 4.unpolar(pi).abs

[02:16] <camelia> rakudo b9869c:  ( no output )

[02:17] <colomon> r: say 4.unpolar(pi).abs

[02:17] <camelia> rakudo b9869c: OUTPUT«4␤»

[02:18] <timotimo> if you expect the imaginary part to be almost 0 but not quite, i think abs is kind of sort of good enough

[02:18] <colomon> well, you lose the sign of the real part that way

[02:18] <timotimo> except if you actually want to continue with the value, because of course errors reproduce and grow

[02:18] <timotimo> oh!

[02:18] <timotimo> good point, thanks

[02:18] <timotimo> in that case .real?

[02:18] <colomon> but hell, if you expect imaginary part to be essentially zero, you might a well call .re

[02:19] <colomon> r: say 4.unpolar(pi).re

[02:19] <camelia> rakudo b9869c: OUTPUT«-4␤»

[02:19] <timotimo> ah, .re

[02:22] <timotimo> decommute&

[02:27] *** woosley joined
[02:32] *** anuby joined
[02:40] *** jaldhar left
[02:42] *** jaldhar joined
[02:47] *** _ilbot joined
[02:47] *** _ilbot left
[02:50] *** _ilbot joined
[02:50] *** _ilbot left
[02:51] *** SamuraiJack joined
[02:55] *** raiph left
[02:56] *** moritz joined
[02:57] *** moritz left
[02:59] *** atroxaper joined
[03:02] *** moritz joined
[03:02] *** moritz left
[03:03] *** SamuraiJack left
[03:04] <dalek> niecza: a7a94cf | (Solomon Foster)++ | lib/CORE.setting:

[03:04] <dalek> niecza: Rewrite infix:<∖> to take any number of arguments and return Bag if the first argument is Baggy.

[03:04] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a7a94cfc33

[03:08] <dalek> roast: 8160e4b | (Solomon Foster)++ | S03-operators/set.t:

[03:08] <dalek> roast: Fix up tests for new set difference.

[03:08] <dalek> roast: 

[03:08] <dalek> roast: More changes needed.

[03:08] <dalek> roast: review: https://github.com/perl6/roast/commit/8160e4be20

[03:13] *** _ilbot joined
[03:14] *** _ilbot left
[03:29] *** bonsaikitten joined
[03:32] *** preflex_ joined
[03:32] *** ChanServ sets mode: +v preflex_

[03:32] *** preflex left
[03:32] *** preflex_ is now known as preflex

[03:42] *** fgomez left
[03:44] *** _ilbot joined
[03:44] *** moritz joined
[03:44] *** moritz left
[03:44] *** _ilbot left
[03:47] *** dayangkun joined
[03:50] *** fgomez joined
[03:56] *** anuby left
[04:01] <colomon> hmmm.  how the heck do you do setSeed in Java?  It's like the function is there but it isn't implemented?

[04:02] * colomon has written his first nqp method, but it doesn't actually work.  :\

[04:02] *** anuby joined
[04:03] *** _ilbot joined
[04:04] *** xinming_ left
[04:04] <sorear> that depends on what random number generator you're using

[04:05] *** _ilbot left
[04:05] *** xinming joined
[04:06] *** anuby left
[04:07] *** logie left
[04:07] *** moritz joined
[04:07] *** moritz left
[04:08] *** anuby joined
[04:08] *** dayangkun left
[04:09] *** anuby left
[04:10] *** _ilbot joined
[04:11] *** _ilbot left
[04:12] *** moritz joined
[04:13] *** moritz left
[04:13] *** gdey_ joined
[04:13] *** gdey left
[04:18] * lue wonders how useful perl6 ++FOOBAR ... ++/FOOBAR actually is, and if it simply must be implemented for him to see it.

[04:30] *** Patterner left
[04:32] *** Psyche^ joined
[04:32] *** Psyche^ is now known as Patterner

[04:33] *** _ilbot joined
[04:33] *** _ilbot left
[04:33] *** BenGoldberg left
[04:35] *** _ilbot joined
[04:35] *** _ilbot left
[04:42] *** xinming left
[04:43] *** moritz joined
[04:43] *** moritz left
[04:43] *** xinming joined
[04:48] *** SamuraiJack joined
[04:50] <ssutch> is it possible to inject names into a module from another module? eg 'use PB; module Hello; BEGIN PB::gen-module('file');' # where Hello would then contain classes that were generated in PB::gen-module?

[04:51] <labster> My guess is that you need to use an 'our' there.

[04:51] <ssutch> how do you mean?

[04:52] <labster> sub foo is export makes &foo in the lexical scope when you use ...

[04:52] <labster> our sub foo; in module PB makes PB::foo() available.

[04:53] *** birdwindupbird joined
[04:53] *** fgomez left
[04:53] <labster> I'm sure there's someone out there who could explain this better.

[04:53] *** fgomez joined
[04:54] <ssutch> this is probably better at explaining what im trying to accomplish: https://gist.github.com/samuraisam/5847807

[04:59] <labster> Okay, I'm a little lost (mainly due to my own lack of knowledge), but it looks like you're importing PB which runs its EXPORT stuff, then calling it's gen-module sub, which adds things to the EXPORT later.

[04:59] *** _ilbot joined
[04:59] *** _ilbot left
[05:00] <labster> what I'm not sure is if that EXPORT::DEFAULT ever gets moved into Hello.pm's lexical scope.

[05:01] <labster> sorry I'm useless, I just code here

[05:01] *** skids left
[05:04] <ssutch> it's all good :)

[05:06] *** _ilbot joined
[05:06] *** _ilbot left
[05:08] *** _ilbot joined
[05:08] *** _ilbot left
[05:09] *** logie joined
[05:09] *** logie left
[05:11] *** moritz joined
[05:11] *** moritz left
[05:22] <sorear> ssutch: what does PB stand for?

[05:22] <ssutch> protocol buffers

[05:22] <sorear> in theory, at BEGIN time there's nothing stopping you from modifying the caller's lexical scope

[05:23] <sorear> in practice, doing it is currently nonportable and undocumented

[05:23] <ssutch> ah, shucks

[05:23] <sorear> you should talk to masak++ about declarations in macros

[05:24] <ssutch> is there any way to accomplish something *like* this, that i can revise in the future

[05:24] <sorear> generating a _class_ at runtime is going to be easier

[05:24] <sorear> and portable*

[05:24] <ssutch> how would it be accessed then, from the calling package?

[05:24] <sorear> *I haven't gotten around to implementing the 6model MOP in niecza

[05:25] <sorear> #`( Module ) class Foo; use PB (Foo, 'file');  #`( User ) use Foo; Foo.method(bar);

[05:26] <sorear> actually, you could have PB copy objects into the CALLER's EXPORT::DEFAULT

[05:26] <ssutch> that could work

[05:26] <sorear> it's adding stuff to the _lexical_ scope that's tricky

[05:27] <sorear> but adding to a module's export list and adding to a class are both more or less settled APIs

[05:27] <ssutch> how is that accomplished?

[05:27] <sorear> which?

[05:27] <ssutch> export list

[05:27] <sorear> EXPORT::DEFAULT:: is a hash-like object

[05:28] <sorear> in the module, pass EXPORT::DEFAULT:: as an argument to gen-module

[05:28] <sorear> in PB itself, stuff subs into the hash

[05:28] <ssutch> ahhh, right

[05:28] <sorear> (with properly sigilled names)

[05:28] <sorear> you might need to pass EXPORT:: instead and do the DEFAULT creation on demand

[05:28] *** berekuk left
[05:30] *** _ilbot joined
[05:30] *** _ilbot left
[05:31] <sorear> calling EXPORT_SYMBOL might be a good idea

[05:31] <ssutch> sorear: something like this? https://gist.github.com/samuraisam/5847807

[05:32] <sorear> something like that, but the syntax is wrong in every single way

[05:32] <ssutch> haha

[05:33] <ssutch> im just guessing, putting together bits ive gathered here and there, so that's not surprising

[05:33] <sorear> $pkg::DEFAULT means GLOBAL.WHO.{'pkg'}.WHO.{'$DEFAULT'}

[05:35] <ssutch> not at all what i want

[05:35] <sorear> in perl 6, every type has an associated hash which can be accessed with the WHO method-macro

[05:35] <sorear> packages and modules are degenerate types that have a name, a WHO, and not much else

[05:35] <sorear> GLOBAL is the root package

[05:36] <sorear> to access a global named foo, you do GLOBAL.WHO.{"foo"}

[05:36] <ssutch> so i want $pkg.WHO{'DEFAULT'} = package MyPkg { };

[05:36] <sorear> that's better, but not perfect

[05:36] <sorear> well, the left side is good

[05:37] <sorear> but the middle is dubious (the setting uses :=, = might work but I'm not sure)

[05:37] <sorear> and the right side is wrong (when you say "package" in source code, that creates a package once at compile time and at runtime always returns the same value)

[05:37] <ssutch> i see

[05:37] <ssutch> soo

[05:38] <sorear> have a look at https://github.com/rakudo/rakudo/blob/nom/src/core/traits.pm#L151

[05:38] <ssutch> $pkg.WHO{'DEFAULT'} = Perl6::Metamodel::PackageHOW.new('MyPkg');

[05:39] <sorear> actually, you may want to call EXPORT_SYMBOL directly.

[05:39] *** _ilbot joined
[05:40] *** _ilbot left
[05:41] <ssutch> what might that look like?

[05:41] <sorear> take a look at the next sub down

[05:42] <sorear> EXPORT_SYMBOL('&foo', [<ALL DEFAULT>], sub { whatever }) maybe

[05:44] <ssutch> trying it out

[05:44] <sorear> note that if you provide an 'our sub EXPORT(*@args) {}' in your module, then the user doesn't need an explicit BEGIN

[05:45] *** dmol joined
[05:46] <ssutch> why not?

[05:47] <sorear> because there's an implicit call at begin time at the site of the use statement, passing any positional arugment from the use statement

[05:47] <ssutch> r: EXPORT_SYMBOL('&Thingy', [<ALL DEFAULT>], sub { say "hello" }); Thingy()

[05:47] <camelia> rakudo b9869c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared name:␤    Thingy used at line 1␤␤»

[05:47] <sorear> use Foo (1,2) -> BEGIN Foo::EXPORT(1,2)

[05:48] <ssutch> oh, that's clever

[05:48] <sorear> r: my module Foo { BEGIN EXPORT_SYMBOL('&thingy', [<ALL DEFAULT>], sub { say "hello" }) }; import Foo; thingy;

[05:48] <camelia> rakudo b9869c: OUTPUT«hello␤»

[05:49] *** odoacre joined
[05:49] *** kaleem joined
[05:49] <sorear> r: my module Bar { our sub EXPORT($name) { EXPORT_SYMBOL('&'~$name, [<ALL DEFAULT>], sub { say "hello" }) } }; my module Foo { import Bar "thingy" }; import Foo; thingy;

[05:49] <camelia> rakudo b9869c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤    thingy used at line 1␤␤»

[05:50] <sorear> r: my module Bar { sub pie is export {}; our sub EXPORT($name) { EXPORT_SYMBOL('&'~$name, [<ALL DEFAULT>], sub { say "hello" }) } }; my module Foo { import Bar "thingy" }; import Foo; thingy;

[05:50] <camelia> rakudo b9869c: OUTPUT«===SORRY!===␤&EXPORT sub did not return an EnumMap␤»

[05:50] <sorear> r: my module Bar { sub pie is export {}; our sub EXPORT($name) { EXPORT_SYMBOL('&'~$name, [<ALL DEFAULT>], sub { say "hello" }); return {} } }; my module Foo { import Bar "thingy" }; import Foo; thingy;

[05:50] <camelia> rakudo b9869c: OUTPUT«hello␤»

[05:50] <sorear> is that a known rakudobug?

[05:50] <ssutch> the EnumMap thing?

[05:51] <sorear> no, the sub pie thing

[05:51] <sorear> sub EXPORT is ignored unless there is at least one exported symbol

[05:51] <sorear> appears to be an incorrect order of tests in the core

[05:51] *** kaleem_ joined
[05:51] <sorear> ...I have a commit bit now

[05:52] * sorear gets to fixing that

[05:55] *** moritz joined
[05:55] *** _ilbot joined
[05:55] *** _ilbot left
[05:55] *** moritz left
[05:55] <ssutch> am i getting closer? https://gist.github.com/samuraisam/5847807

[05:56] *** PacoAir joined
[05:56] <sorear> apparently we have no tests at all for EXPORT

[05:57] <sorear> ssutch: Just say thingy() in caller.pm

[05:58] <ssutch> ok

[05:58] <sorear> and you may need to add a dummy exported sub to PB.pm

[05:59] <ssutch> im getting: Error while importing from 'PB': no EXPORT sub, but you provided positional argument in the 'use' statement

[06:00] <ssutch> i have a few other our subs in the PB.pm file

[06:01] <sorear> they have to be exported, not our

[06:03] <sorear> ssutch: could you commit or gist your actual PB.pm file?

[06:05] <ssutch> sorear: https://gist.github.com/samuraisam/5847807

[06:06] <lue> question: was C<isa> an old spelling of C<is> ? I just found a line containing it in S29, and I'm not sure if it's meant to be a valid Perl 6 snippet, as opposed to some kind of pseudocode (S29:87 and S29:882)

[06:07] <lue> (now that I found :882, I suspect this is the case)

[06:07] <sorear> ssutch: That code should work if I'm reading the code correctly

[06:07] *** PacoAir left
[06:07] <ssutch> yeah it seems it should

[06:07] <ssutch> but it's complaining Error while importing from 'PB': no EXPORT sub, but you provided positional argument in the 'use' statement

[06:07] *** kaleem_ left
[06:07] <sorear> lue: Those are method names.

[06:07] <sorear> r: say 4.^isa(Int)

[06:07] <camelia> rakudo b9869c: OUTPUT«1␤»

[06:07] <sorear> r: say 4.^does(Numeric)

[06:07] *** kaleem left
[06:07] <camelia> rakudo b9869c: OUTPUT«True␤»

[06:08] <sorear> r: say 4.^can("sqrt")

[06:08] <camelia> rakudo b9869c: OUTPUT«sqrt sqrt␤»

[06:09] <lue> OK. It was the :87 line that I initially spotted and it looks suspiciously like an old spelling of C<class Foo is Bar>

[06:11] *** FROGGS joined
[06:12] <sorear> o/ FROGGS 

[06:12] <FROGGS> o/ sorear 

[06:13] <FROGGS> gah, mondays -.-

[06:14] *** xinming left
[06:15] *** xilo left
[06:18] *** xlat joined
[06:19] *** _ilbot joined
[06:19] *** _ilbot left
[06:28] *** moritz joined
[06:28] *** moritz left
[06:30] *** dmol left
[06:42] *** _ilbot joined
[06:42] *** _ilbot left
[06:42] *** gdey_ left
[06:44] *** ssutch left
[06:45] *** moritz joined
[06:46] *** _ilbot joined
[06:47] *** _ilbot left
[06:47] *** moritz left
[06:52] *** bonsaikitten left
[06:56] *** moritz joined
[06:58] *** moritz left
[07:01] *** domidumont joined
[07:01] *** dagurval left
[07:01] *** sjn left
[07:06] *** kaleem joined
[07:08] *** domidumont left
[07:08] *** bonsaikitten joined
[07:09] *** domidumont joined
[07:09] *** domidumont left
[07:10] *** domidumont joined
[07:10] *** _ilbot joined
[07:10] *** _ilbot left
[07:12] *** _ilbot joined
[07:12] *** _ilbot left
[07:13] *** bonsaikitten left
[07:18] *** ssutch joined
[07:19] *** popl joined
[07:20] *** popl left
[07:21] *** phpdude joined
[07:24] *** fridim_ left
[07:29] *** _ilbot joined
[07:29] *** _ilbot left
[07:36] *** moritz joined
[07:38] *** bonsaikitten joined
[07:40] *** moritz left
[07:44] *** bonsaikitten left
[07:51] *** moritz joined
[07:51] *** moritz left
[07:52] *** _ilbot joined
[07:52] *** _ilbot left
[07:56] *** moritz joined
[07:56] *** moritz left
[07:57] *** dagurval joined
[08:04] *** bonsaikitten joined
[08:05] *** sjn joined
[08:07] *** moritz joined
[08:07] *** moritz left
[08:08] *** bonsaikitten left
[08:11] *** _ilbot joined
[08:12] *** _ilbot left
[08:14] *** Jimmy__ joined
[08:18] *** ozmq joined
[08:19] *** JimmyZ joined
[08:19] *** Jimmy__ left
[08:20] *** bonsaikitten joined
[08:22] <FROGGS> sorear: it takes 22minutes to compiler one of my scripts... (the one with several infix declarations) :/

[08:25] *** dakkar joined
[08:25] *** bonsaikitten left
[08:25] <jnthn> morning, #perl6

[08:26] <Ulti> morning, just got rakudo on jvm running on my Mac :)

[08:26] <jnthn> :)

[08:27] <Ulti> it would help if I stop using \q to get out of the REPL... to much SQL clearly

[08:27] *** ssutch left
[08:31] <TimToady> timotimo: the Camelia's are both wrong now

[08:31] <TimToady> the P6 is supposed to have varying line width, made with two lines, and you've only got one of the two lines

[08:32] <TimToady> probably the export selection problem again

[08:32] <FROGGS> jnthn: the redesign sorear mentioned... do you have a timeline for that?

[08:32] <jnthn> FROGGS: What redesign?

[08:33] <FROGGS> about the mixins, that always a full copy of %?LANG goes into the .pir file

[08:35] *** _ilbot joined
[08:35] <Ulti> with the REPL I am I incurring the startup costs with every line with the JVM implementation?

[08:35] *** _ilbot left
[08:35] <jnthn> Ulti: Shouldn't be

[08:35] <jnthn> Ulti: The first line, yes

[08:35] <Ulti> ahh

[08:35] <jnthn> Ulti: Because it doesn't load the setting until then

[08:35] <Ulti> that might be it

[08:35] <jnthn> After that it's loaded, cached

[08:36] <jnthn> FROGGS: I may be able to alleviate the pain a bit without having to re-design it...

[08:36] <Ulti> haha yeah that's it

[08:36] <Ulti> *few*

[08:36] <Ulti> 1+1 taking ten seconds was scary, it's not perceivable after the first line

[08:37] <jnthn> FROGGS: I don't know what a redesign would look like anyway, and it's hard to give a timescale for something I don't know the end goal of :)

[08:38] <jnthn> FROGGS: I need to focus on $dayjob for a bit, but please feel free to try this patch: https://gist.github.com/jnthn/5848604

[08:41] *** dag joined
[08:42] *** bonsaikitten joined
[08:43] *** _ilbot joined
[08:43] *** _ilbot left
[08:43] *** fhelmberger joined
[08:49] *** bonsaikitten left
[08:50] <sorear> jnthn: I didn't mean a redesign-from-scratch, just some design changes are probably needed to alleviate the flaw

[08:51] <sorear> jnthn: I of course proposed the niecza approach (don't serialize NFAs, lazily recompute them when needed)

[08:51] <sorear> sleep&

[08:51] <jnthn> sorear: The was a somewhat notable startup time win from serializing them rather than recreating them.

[08:52] <jnthn> sorear: So I'm a little cautious to drop it. :)

[08:52] <jnthn> 'night, sorear++

[08:53] *** _ilbot joined
[08:54] <TimToady> *Camelias, ENOCAFFEINEYET

[08:55] <jnthn> ooh, caffeine is a good idea..

[08:55] <jnthn> .oO( Why didn't I think of that? Hm, bootstrapping problem... )

[08:55] *** _ilbot left
[08:58] <JimmyZ> :-)

[08:58] <TimToady> timotimo: and the current .odg is completely hosed

[08:59] *** _ilbot joined
[08:59] *** _ilbot left
[08:59] <TimToady> black lipstick, line-de-doubling, and missing the ellipses on the ends of the lines as well

[09:00] <FROGGS> jnthn: I can try that patch, though I already tested that

[09:00] <mls> Hi guys,

[09:00] <JimmyZ> hi mls

[09:02] <mls> jnthn: about that "ExceptionHandling.java makes sure that a handler doesn't catch catch twice": does that work with recursion? There was a reason why parrot exceptions were done like that. Just making sure that you thought about recursion.

[09:02] <mls> I.e. The exception handler recursivly calls the function that contains the handler.

[09:03] *** _ilbot joined
[09:03] <mls> cause in that case it has to catch the exception that is thrown

[09:03] *** _ilbot left
[09:04] *** moritz_ joined
[09:04] *** kresike joined
[09:04] *** moritz_ left
[09:04] <kresike> hello all you happy perl6 people

[09:05] <jnthn> > sub foo($x) { die 'foo' if $x; CATCH { default { foo($x - 1) } } }; foo(1)

[09:05] <jnthn> Nil

[09:05] <jnthn> > sub foo($x) { die 'foo' if $x; CATCH { default { foo($x - 1) } } }; foo(2)

[09:05] <jnthn> foo

[09:05] <FROGGS> hi kresike 

[09:05] <jnthn> Those look right to me.

[09:06] <jnthn> rn: sub foo($x) { die 'foo' if $x; CATCH { default { foo($x - 1) } } }; foo(2)

[09:06] <camelia> rakudo b9869c, niecza v24-82-ga7a94cf:  ( no output )

[09:06] <kresike> FROGGS, o/

[09:06] <jnthn> Oh. :/

[09:06] <jnthn> Hmmm.

[09:07] <jnthn> Guess there's some static/dynamic confusion there...

[09:08] *** daxim joined
[09:08] * jnthn wonders if we have spectests for that :)

[09:08] <mls> probably not ;)

[09:08] <jnthn> Well. Then I'm not going to worry about it in a hurry. :)

[09:08] <jnthn> It should be fixable, anyway.

[09:09] *** moritz_ joined
[09:09] *** moritz_ left
[09:09] <jnthn> And should get a spectest, of course...

[09:10] <jnthn> .oO( where's masak to file rakudo-jvm bug :P )

[09:10] <FROGGS> jnthn: that patch does not help... I think if you once installed %?LANG, and you mixin more things, %?LANG grows and so does the installed symbol because it is bound

[09:10] <mls> Yes, thanks!

[09:10] <FROGGS> jnthn: does make make sense?

[09:11] <jnthn> FROGGS: "The %?LANG grows" is odd as it's just a hash. I think what's happening is that each mixin level keeps its cached, computed NFAs.

[09:11] <jnthn> So the entries in %?LANG don't increase, but the object it ends up pointing to is a long mixin chain.

[09:12] <Ulti> naaaww finally found a NYI in the JVM rakduo :) "run is NYI on JVM backend". Playing for an hour and that's all I found after trying to be cheeky and install panda

[09:12] <tadzik> now you know what to implement :)

[09:12] <Ulti> heh

[09:12] <jnthn> It took you an hour to break it? o.O :)

[09:13] <jnthn> Not bad! :)

[09:13] <Ulti> yup, looking good :)

[09:14] <Ulti> I was mostly playing with lists though

[09:15] <TimToady> fg

[09:15] <TimToady> afk & # have to change hotel rumes

[09:16] *** bonsaikitten joined
[09:17] <Ulti> wow just managed a proper explosion, I forgot 'my': @list = 1..4 goes into an infinite loop of woe

[09:18] <jnthn> yes, the REPL needs love...

[09:18] *** _ilbot joined
[09:18] <Ulti> I was trying just then though :)

[09:18] *** _ilbot left
[09:18] <Ulti> really cool stuff, I better get off to work though!

[09:21] <FROGGS> jnthn: about that cache of computed nfas, do you have a keyword by hand that let me find some related code?

[09:22] <Ulti> tadzik: is there a doc somewhere on getting started with the internals? explaining roughly what is going on where?

[09:23] <Ulti> or is it just use the sauce

[09:23] <FROGGS> jnthn: nvm, I think I found it

[09:23] <jnthn> FROGGS: precompute_nfas in QRegex.nqp probably

[09:23] <jnthn> uh, or that's related anyway

[09:23] <FROGGS> jnthn++ # thank you

[09:25] <jnthn> FROGGS: If we added a flush_cache method in NQPClassHOW, and we know there's already a %?LANG, we could always flush the cache of the thing we know we're replacing (and so its cache would be useless)

[09:27] *** salv0 joined
[09:29] <FROGGS> jnthn: sounds like a plan

[09:30] *** spider-mario joined
[09:31] <tadzik> Ulti: not quite. But you can keep asking me until stuff makes sense :)

[09:35] *** bruges joined
[09:36] *** _ilbot joined
[09:36] *** _ilbot left
[09:49] *** sqirrel joined
[09:55] *** markov left
[09:59] *** JimmyZ left
[10:00] *** dayangkun joined
[10:04] *** moritz joined
[10:04] *** markov joined
[10:05] *** moritz left
[10:06] <FROGGS> Missing or wrong version of dependency 'src/stage1/gen/nqp-mo.nqp' :/

[10:08] *** berekuk joined
[10:12] *** berekuk left
[10:15] *** moritz joined
[10:16] *** kaleem_ joined
[10:17] *** _ilbot joined
[10:18] *** berekuk joined
[10:20] <lizmat> is there a basic difference between BEGIN { eval slurp "file.pm" } and "use file" ?

[10:21] *** kaleem left
[10:21] * lizmat thinks not, but may be missing something essential

[10:21] <tadzik> use does BEGIN require and import

[10:21] <tadzik> which is need, import, iirc

[10:22] <lizmat> ok, "use file ()" then

[10:22] <lizmat> forget about the import business  :-)

[10:22] <lizmat> I know there is some subtle difference in Perl 5

[10:23] *** moritz left
[10:23] *** _ilbot left
[10:23] <jnthn> Yes, the first is in the lexical context of the place you do the BEGIN/eval, a "use" is in the lexical context of the setting.

[10:24] *** moritz joined
[10:24] *** moritz left
[10:24] *** Chillance joined
[10:25] <lizmat> jnthn: but that's the only difference ?

[10:27] * lizmat assume "probably"  :-)

[10:27] <lizmat> *assumes

[10:33] * timotimo looks at the camelia files again

[10:34] <jnthn> lizmat: Well, it's more like "need" than "use"

[10:34] <jnthn> lizmat: I suspect those are the main differences.

[10:34] <jnthn> I mean, ModuleLoader and eval both call into the compiler, if the module was not pre-compiled.

[10:35] <lizmat> argh, yes, need to remember we have pre-compiled compilation units in Perl 6

[10:35] <timotimo> indeed, loading the svg file in libreoffice draw makes the strange rectangles + pie slices appear again

[10:36] <lizmat> jnthn: I mean, if you say "module was pre-compiled", then you really mean "file was pre-compiled" or "compilation unit was pre-compiled", right?

[10:37] <jnthn> lizmat: yes

[10:37] * lizmat is giving a stab at unslushing S11

[10:37] <jnthn> lizmat: Sorry, the imprecise terminology is fairly ingrained. :)

[10:37] <jnthn> lizmat: I don't know we can fix that culturally but we can try to do better in the impl/spec for our own sanity :)

[10:38] <lizmat> indeed..  

[10:38] <timotimo> i made a new .pdf, but i cannot open it in libreoffice draw (it gives me a text document with the bare contents of the .pdf file as text instead of a picture)

[10:39] *** _ilbot joined
[10:39] <timotimo> hrmpf.

[10:39] *** _ilbot left
[10:39] * timotimo starts from scratch

[10:41] *** berekuk left
[10:41] *** kaleem_ left
[10:42] *** kaleem joined
[10:44] *** _ilbot joined
[10:45] *** moritz joined
[10:45] *** _ilbot left
[10:45] *** moritz left
[10:47] *** _ilbot joined
[10:48] *** _ilbot left
[10:53] *** _ilbot joined
[10:53] *** _ilbot left
[10:55] *** moritz joined
[10:57] *** moritz left
[11:00] *** flaviusb joined
[11:07] *** crab2313 joined
[11:10] *** ozmq left
[11:10] *** rindolf joined
[11:11] <timotimo> neither inkscape's "save as .odg" nor libreoffice "load svg" work ...

[11:12] *** moritz joined
[11:12] *** moritz left
[11:17] *** ggoebel joined
[11:18] <colomon> The problem I'm having with srand in JVM is the ThreadLocalRandom we're using doesn't allow you to set seeds.  Ever.  As far as I can tell.

[11:19] <timotimo> indeed, "ThreadLocalRandom is initialized with an internally generated seed that may not otherwise be modified"

[11:19] *** atroxaper left
[11:20] <timotimo> http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadLocalRandom.html - this shows no constructor, does that mean it gets a constructor with a seed value form its parent?

[11:22] <jnthn> The Random class has a working setSeed, but we'd have to do our own one per ThreadContext to get it thread safe

[11:22] <jnthn> Or put it on GlobalContext and do locking

[11:23] *** moritz joined
[11:25] *** moritz left
[11:26] *** crab2313 left
[11:27] *** ozmq joined
[11:29] *** sisar left
[11:32] <colomon> isn't p6's srand by its nature global rather than threaded?  I mean, not that it necessarily should be, mind you....

[11:32] <dalek> mu: be21e24 | (Timo Paulssen)++ | misc/camelia. (3 files):

[11:32] <dalek> mu: uncrack lines, remove invisible objects, simplify shapes

[11:32] <dalek> mu: review: https://github.com/perl6/mu/commit/be21e241b9

[11:32] <timotimo> this should be rather satisfactory (i hope you'll excuse the branch overwrite)

[11:33] <timotimo> i kept the .pdf and .odg files as they were, as the pdf is the original and i couldn't create an .odg from the svg or pdf without it being completely hosed

[11:33] <timotimo> the .png file is new and the .jpg file comes from the new svg

[11:36] <lizmat> colomon: S32/Numeric:295 doesn't state anything about the scope of srand

[11:37] <lizmat> although I could see a use for srand being lexically scoped

[11:37] <lizmat> and therefore thread scoped, I guess

[11:37] <colomon> I have a vague memory that we punted making a decision on that until we had working threads...

[11:38] *** JimmyZ joined
[11:39] *** _ilbot joined
[11:39] *** _ilbot left
[11:40] <daxim> re http://justrakudoit.wordpress.com/2013/06/21/set-operations/ - why are there so many multi subs?  what's the Any, Baggy distinction for?

[11:40] <lizmat> suppose $*RAND would contain the seed, srand(foo) could then be a macro for "temp $*SRAND=foo" ?

[11:45] <jnthn> It's generally better to lean towards thread locality. With time and cores, the cost of synchronizing global things is most likely only going to increase relative to the cost of thread local things.

[11:45] <jnthn> So unless there's a strong semantic reason...

[11:46] <colomon> daxim: the version with all the multis is the old version; they are being replaced with a single sub

[11:46] *** dmol1 joined
[11:48] <daxim> cool, please reblog when you're done

[11:49] <colomon> daxim: the new version *is* blogged already, same post

[11:49] *** araujo left
[11:49] <daxim> ooooh

[11:49] <colomon> daxim: first code block is the old version, second the new

[11:49] <lizmat> jnthn: I think the seed should be at least process global: we don't want each thread to start with the same random number sequence ?

[11:52] <lizmat> so unless the seed is lexicalized specifically, it should always work on, and adapt, the process global seed

[11:52] *** root____1 joined
[11:52] <lizmat> I'm not even sure srand should be lexotic

[11:55] <lizmat> FROGGS++ # http://usev5.wordpress.com

[11:55] <colomon> lizmat: I'm not sure what you mean by that, exactly.  But it seems to me we should strongly prefer that each thread have its own random number generator.  so how does a a global seed fit with that?

[11:55] *** moritz joined
[11:56] *** moritz left
[11:56] <lizmat> colomon: with "random number generator" I assume you mean "random number seed", right

[11:56] <lizmat> ?

[11:59] *** berekuk joined
[11:59] <colomon> lizmat: ... dang, it's hard to formulate this coherently.  (For me, anyway.)

[11:59] <jnthn> I think if we're discussing threads and programmer expectations on random number sequences, it's worth keeping in mind that OS threads are *not* the granularity we expect a lot of paralle/concurrent problems to be solved at.

[12:00] <jnthn> *parallel

[12:00] *** domidumont left
[12:01] <lizmat> I was thinking for use cases where you would want to use a deterministic random number sequence over a set of threads

[12:01] *** domidumont joined
[12:01] <lizmat> so far, I can only think test-suites

[12:02] <lizmat> as a way to reduce the degree of variability when debugging thread related issues

[12:03] <colomon> the *same* deterministic random number sequence spread across a set of threads?  I can't think of any reason for that, not even test suites

[12:03] <lizmat> but I guess this can be handled by a .wrap when needed

[12:04] <lizmat> colomon: did you ever stress-tested a threaded application, and have it fail only once in a while?

[12:04] <lizmat> a stress test that uses randomly generated data ?

[12:05] <lizmat> anyways, it can be handled by a .wrap around rand() when needed

[12:08] *** ozmq left
[12:10] *** kivutar joined
[12:11] <colomon> lizmat: I can understand why you might want to have two identical random number sequences running on two threads, or be able to have the sequence repeated between runs of a program.  I can't see the point in two threads each taking numbers from the same sequence, because the order they take them in will be ... errr ... random.

[12:14] <lizmat> good point, maybe I should leave my 2000-2003 thread-debugging nightmares behind me   :-)

[12:15] *** raiph joined
[12:18] <FROGGS> jnthn: okay, so it deletes now the alt_nfa's, result is: filesize 4.5MB (before it was 9MB), pir->pbc in 12s rather than 49s

[12:18] <FROGGS> jnthn: I play with it a bit

[12:18] <jnthn> FROGGS: You can delete the protos too

[12:19] <FROGGS> jnthn: "!protoregex_table" ?

[12:21] <FROGGS> or "!protoregex_nfa" ?

[12:21] <FROGGS> I guess the latter

[12:22] <jnthn> The latter

[12:22] <FROGGS> k

[12:24] *** atroxaper joined
[12:31] *** dayangkun left
[12:31] *** dayangkun_ joined
[12:31] *** _ilbot joined
[12:31] *** _ilbot left
[12:32] *** xinming joined
[12:34] *** araujo joined
[12:34] *** araujo left
[12:34] *** araujo joined
[12:39] *** moritz joined
[12:40] *** moritz left
[12:40] *** dayangkun_ left
[12:48] *** konundra joined
[12:49] *** kaleem_ joined
[12:50] <lizmat> seems moritz++ is still having net problems  :-(

[12:51] *** kaleem left
[12:52] *** kaare_ joined
[12:53] *** domidumont left
[12:55] *** MrMeek joined
[13:01] *** berekuk left
[13:01] *** moritz joined
[13:02] *** moritz left
[13:03] <lizmat> r: say (use Test); ok 1

[13:03] <camelia> rakudo b9869c: OUTPUT«Nil␤ok 1 - ␤»

[13:04] *** berekuk joined
[13:04] <lizmat> wondering whether it would make sense for -use- to return the top level package statement objects from a file

[13:09] <FROGGS> (use Test)>>.import ?

[13:09] <jnthn> You already *did* import if you did a "use"

[13:10] <FROGGS> true

[13:10] <FROGGS> bah

[13:10] <jnthn> Would need to be extremely careful here to avoid confusing runtime and compile time.

[13:10] <FROGGS> (need Test)>>.import ? # :P

[13:10] <jnthn> That's still a confusion of compile time and runtime. 

[13:11] <FROGGS> (use Test)>>.^name.say ? # what about that?

[13:11] *** bibifuc joined
[13:11] <FROGGS> the list of top level namespaces would be evaluated at compile time...

[13:11] *** PacoAir joined
[13:11] <jnthn> It's fine, my point is just that the effect of the "use" is compile time and the dispatch you then do on the result is runtime

[13:12] <FROGGS> yeah

[13:12] <jnthn> r: say 'there'; (BEGIN { say 'here'; 1..10 })>>.say

[13:12] <camelia> rakudo b9869c: OUTPUT«here␤there␤10␤8␤6␤4␤2␤9␤7␤5␤3␤1␤»

[13:14] <FROGGS> jnthn: btw, there was no such key as 'protoregex_nfa'

[13:14] <jnthn> oh...

[13:14] <jnthn> ok, I dunno how it works :P

[13:14] *** p5eval left
[13:14] <jnthn> It's not like I wro...oh, wait... :P

[13:15] <jnthn> Maybe they are stored in the cache under the method names.

[13:15] <FROGGS> jnthn: right now, my patch resets the whole hash, so my filesize is 1.2MB (instead of 9MB), and parrot just takes 1s instead of 49s

[13:15] <jnthn> oh, resetting the whole hash seems fine.

[13:15] <jnthn> That sounds MUCH better :)

[13:15] <FROGGS> yepp

[13:15] <jnthn> We're only storing the single copy of the NFAs now.

[13:15] *** benabik left
[13:15] <jnthn> Not loads of useless ones along the path.

[13:16] <jnthn> You are being careful to not throw away those of Perl6::Grammar itself, I guess?

[13:16] *** p5eval joined
[13:16] <FROGGS> there are also thing like 'term' and 'statement' in the hash, these are sweeped away too

[13:16] <jnthn> Oh. Those wil be the protoregex NFAs

[13:17] *** kaleem_ left
[13:17] <FROGGS> jnthn: that is the patch: https://gist.github.com/FROGGS/5e28f5da70ada8db5e8e

[13:18] <FROGGS> I'm not sure about Perl6::Grammar beeing affected...

[13:18] <FROGGS> that self.flush_cache happens in method mixin

[13:19] <jnthn> yeah, that's a little too aggresive I suspect.

[13:19] <FROGGS> maybe it should be invoked in other methods too, but I dont know where

[13:19] <jnthn> { sub infix:<!>($n) {[*] 1..$n }; say 5! }; say 1 + 2

[13:19] <jnthn> You threw away what it needed when exiting that block to parse the 1 + 2

[13:20] <jnthn> It probably wants to check the thing it's flushing the cache of is itself a mixin.

[13:20] *** bluescreen10 joined
[13:20] *** raiph left
[13:20] <FROGGS> I see

[13:21] <FROGGS> weird that the tests are passing so far, but maybe there are no mixins yet

[13:21] *** benabik joined
[13:21] *** bruges left
[13:22] *** bruges joined
[13:22] <FROGGS> jnthn: does it really matter if it is a mixin or not? the question is more: is it still used or not, no?

[13:23] *** raiph joined
[13:23] *** pecastro_ joined
[13:23] *** raiph left
[13:23] <FROGGS> $ perl6 -e '{ sub postfix:<!>($n) {[*] 1..$n }; say 5! }; say 1 + 2'

[13:23] <FROGGS> 120

[13:23] <FROGGS> 3

[13:23] <FROGGS> hmmm

[13:24] *** domidumont joined
[13:24] *** _ilbot joined
[13:24] <jnthn> FROGGS: It will *work*. You just force a load of re-compuation.

[13:24] <jnthn> *re-computation

[13:25] <FROGGS> ahh, good

[13:25] <jnthn> By throwing away the NFAs of the base Perl 6 language.

[13:25] <jnthn> Perl 6's ClassHOW tracks if a given class is derived as the result of a mixin.

[13:26] <jnthn> Having similar tracking in NQPClassHOW should be a several line addition.

[13:26] <jnthn> Take the same naming as Perl 6's ClassHOW uses.

[13:27] *** _ilbot left
[13:28] *** kaare_ left
[13:28] *** kaare_ joined
[13:30] *** _ilbot joined
[13:30] *** _ilbot left
[13:35] *** skyheights joined
[13:37] *** skyheights left
[13:42] <xlat> r: 'should, it, match' ~~ m/^ [\w+] ** [\,\s*] $/

[13:42] <camelia> rakudo b9869c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Quantifier quantifies nothing␤at /tmp/Ibo4THSm_o:1␤------> [32m'should, it, match' ~~ m/^ [\w+] ** [33m⏏[31m[\,\s*] $/[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        prefix or te…

[13:43] *** xilo joined
[13:43] *** skids joined
[13:44] <jnthn> r: 'should, it, match' ~~ m/^ [\w+]+ % [\,\s*] $/

[13:44] <camelia> rakudo b9869c:  ( no output )

[13:44] <jnthn> r: say 'should, it, match' ~~ m/^ [\w+]+ % [\,\s*] $/

[13:44] *** kaleem joined
[13:44] <camelia> rakudo b9869c: OUTPUT«｢should, it, match｣␤␤»

[13:45] <xlat> jnthn: thnks I was missing "+" before %

[13:45] <FROGGS> n: 'should, it, match' ~~ m/^ [\w+] ** [\,\s*] $/ # niecza++ has the better error message here

[13:45] <camelia> niecza v24-82-ga7a94cf: OUTPUT«Potential difficulties:␤  Unsupported use of atom ** [\,\s*] as separator; nowadays please use atom+ % [\,\s*] at /tmp/_olVNKzq2R line 1:␤------> [32mould, it, match' ~~ m/^ [\w+] ** [\,\s*][33m⏏[31m $/ # niecza++ has the better error mess[0m␤␤»…

[13:46] *** berekuk left
[13:46] <xlat> niecza++

[13:48] *** benabik left
[13:49] *** bluescreen10 left
[13:53] <FROGGS> Null PMC access in get_bool() -.-

[13:53] *** btyler joined
[13:55] *** gdey joined
[13:56] *** kivutar left
[13:58] *** _ilbot joined
[13:58] *** _ilbot left
[14:00] *** logie joined
[14:01] <JimmyZ> :D

[14:03] <cognominal> what is the invocation to invite camelia in a channel?

[14:03] <tadzik> "camelia camelia camelia", in front of a mirror ;)

[14:03] <lizmat> "/msg camelia" ?

[14:04] <lizmat> in any gui like IRC client, usually double click on "camelia" in the list of logged in users?

[14:04] <cognominal> nope, I really want to invite her, not to msg her

[14:04] <FROGGS> camelia doesnt follow invitations IIRC

[14:07] *** root____1 is now known as JimmyZ_away

[14:07] <FROGGS> cognominal: it would be: /invite camelia #channel

[14:07] <FROGGS> you need to be op in that channel as it seems

[14:09] *** konundra left
[14:10] *** _ilbot joined
[14:10] *** _ilbot left
[14:14] *** Stygia joined
[14:19] *** konundra joined
[14:20] <cognominal> is still camelia Moritz evalbot?

[14:21] <lizmat> perhaps, but it runs on feather

[14:21] <lizmat> unlike irclog.perlgeek.de

[14:22] *** bbkr joined
[14:24] *** JimmyZ_ joined
[14:25] *** JimmyZ left
[14:25] *** JimmyZ_ is now known as JimmyZ

[14:27] <bbkr> hi. is it possible to get raw Num bytes (IEEE 754 format)? maybe through some NQP tricks because unpack does not have required pattern currently.

[14:32] <hoelzro> hmm

[14:32] <hoelzro> if I have my %hash in Perl 6

[14:32] <hoelzro> and I do { use v5; ... }

[14:32] <hoelzro> would I use $hash{$key} in that v5 block to access %hash?

[14:33] <FROGGS> hoelzro: yes

[14:33] <hoelzro> what about hash %!hash?

[14:33] <hoelzro> er, has %!hash

[14:33] <FROGGS> hmmm

[14:34] <FROGGS> if the grammar works right you could do: $!hash{key}

[14:35] <hoelzro> so the Perl used in v5 blocks is a superset of regular Perl 5?

[14:35] <FROGGS> not yet, no

[14:35] <FROGGS> but if things make sense and dont break the rules... why not?

[14:36] * hoelzro shrugs

[14:36] <FROGGS> you wont be able do declare something like %!hash though

[14:36] <hoelzro> right

[14:36] *** JimmyZ is now known as JimmyZ_

[14:36] <FROGGS> but we are talking about things that are too far away in future

[14:36] *** JimmyZ_away is now known as JimmyZ

[14:37] <lizmat> "so the Perl used in v5 blocks is a superset of regular Perl 5?"  this would imply yet another Perl dialect

[14:37] <hoelzro> o_O

[14:37] <hoelzro> Perl 5.5? ;)

[14:37] <FROGGS> and that is not what I want, I dont want another p2 for example

[14:37] <lizmat> I mean, the idea of v5, is to be able to load modules from the Perl 5 world as is

[14:38] <FROGGS> or just to reuse old code snippets

[14:38] <lizmat> If someone would like to introduce some Perl6isms into Perl 5 code, it would probably make more sense to migrate the whole module

[14:38] <FROGGS> so that the migration to perl6 goes well, I dont want to improve Perl 5 on that way, that would break the idea

[14:38] *** raiph joined
[14:38] <lizmat> FROGGS++

[14:39] *** JimmyZ left
[14:39] <bbkr> r: try { my $x = $x / 0; }

[14:39] <camelia> rakudo b9869c: OUTPUT«use of uninitialized value of type Any in numeric context  in block  at /tmp/K1PE8jPfmh:1␤␤»

[14:39] <lizmat> so I think you could say, that v5 provides a subset of Perl 5, rather than a superset

[14:39] <lizmat> as it will not be able to run *all* Perl 5 code, like ever?

[14:39] <FROGGS> dont get me wrong, I appreciate what rurban does, but these "improve P5 projects" always feel a bit second-system-effectish to me

[14:40] *** kaleem left
[14:40] <hoelzro> that makes sense

[14:40] *** root____1 joined
[14:40] *** root____1 is now known as JimmyZ

[14:40] <FROGGS> lizmat: right, at least <+[Perl5]-[XS]> :o)

[14:40] *** Guest1337 joined
[14:41] <FROGGS> but back to $!hash{key}, if it works nicely and improves the P5->P6 migraten, then this still might be an option

[14:41] <FROGGS> migration*

[14:41] <lizmat> good thing that Perl 6 is more third-system-ish  :-)

[14:41] <FROGGS> I dont think so :o)

[14:42] <FROGGS> it finally grows out of the second system it was

[14:44] *** _ilbot joined
[14:44] *** _ilbot left
[14:44] <PerlJam> I thought Perl 6 was more sixth-system-ish  ;)

[14:44] * hoelzro hears a rimshot

[14:45] <lizmat> some interesting historical context, almost 18.5 years ago: http://stuff.mit.edu/afs/athena/contrib/perl/doc/FAQ.1

[14:51] *** raiph left
[14:52] *** JimmyZ left
[14:52] <perigrin> lizmat: How does Perl6 compare with REXX?

[14:53] <lizmat> snarky!

[14:55] *** jeff_s1 joined
[14:56] *** SamuraiJack left
[14:56] *** raiph joined
[14:58] <cognominal> Will the Gsoc project target javascript or asm.js ?  http://asmjs.org/spec/latest/

[14:58] *** raiph left
[14:59] *** rindolf left
[14:59] <lizmat> pmurias should know, right?

[15:00] *** _ilbot joined
[15:00] *** _ilbot left
[15:01] <kresike> bye folks

[15:01] *** kresike left
[15:02] *** JimmyZ joined
[15:06] <lizmat> by kresike!

[15:06] <lizmat> *bye

[15:06] <lizmat> std: class Dog:ver<2> excludes Fox:ver<1> {}

[15:06] <camelia> std d4cc5ab: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse class definition at /tmp/5J9eCAVknJ line 1:␤------> [32mclass Dog:ver<2> [33m⏏[31mexcludes Fox:ver<1> {}[0m␤    expecting trait␤Parse failed␤FAILED 00:00 41m␤»

[15:06] <lizmat> std: class Dog:ver<2> emulates Fox:ver<1> {}

[15:06] <camelia> std d4cc5ab: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse class definition at /tmp/RCtQwzIU0l line 1:␤------> [32mclass Dog:ver<2> [33m⏏[31memulates Fox:ver<1> {}[0m␤    expecting trait␤Parse failed␤FAILED 00:00 41m␤»

[15:06] *** xlat left
[15:07] <lizmat> :-(

[15:08] <PerlJam> Are there todo tests for those?

[15:09] <FROGGS> no, dont think so

[15:09] *** _ilbot joined
[15:09] *** moritz joined
[15:09] *** moritz left
[15:09] *** _ilbot left
[15:10] *** birdwindupbird left
[15:11] *** yoleaux left
[15:12] <JimmyZ_> evening..

[15:12] <FROGGS> hi JimmyZ_ 

[15:12] <JimmyZ_> hi

[15:13] <diakopter> http://pragprog.com/magazines/2013-06/programming-elixir

[15:13] <diakopter> language enthusiasts: sorry if you're already familiar

[15:15] <FROGGS> jnthn: the patch seems to work fine now, my Perl5::Terms.pm took 22 minutes before to compile to pbc, now it takes 7 seconds!!

[15:15] <lizmat> wow! 

[15:16] <jnthn> FROGGS: Well. That's an improvement. :)

[15:16] <FROGGS> jnthn: it is :o)

[15:16] <FROGGS> spectesting now, and tonight I'll benchmark it a bit

[15:18] *** domidumont left
[15:18] *** ajr joined
[15:19] *** ajr is now known as Guest59337

[15:19] * diakopter is excited to backlog this

[15:19] *** Guest59337 is now known as ajr_

[15:20] *** moritz joined
[15:20] *** moritz left
[15:24] *** rindolf joined
[15:29] *** FROGGS left
[15:29] *** FROGGS[mobile] joined
[15:35] <[Coke]> holy cow. (is this something that will improve other pbc builds also?)

[15:36] <FROGGS[mobile]> if they mixin stuff, yes

[15:36] <FROGGS[mobile]> like custom infixes

[15:37] *** _ilbot joined
[15:37] *** pecastro_ left
[15:37] *** _ilbot left
[15:37] <FROGGS[mobile]> 10 infixes needed 49s on my box, now it needs 0.8s

[15:37] <lizmat> aren't all things coming from roles, infixes ?

[15:37] *** alester joined
[15:38] <lizmat> *mixins?

[15:38] <lizmat> or does this only apply to custom infixes mixed in?

[15:38] <FROGGS[mobile]> hmmm, not sure, but dont think so

[15:38] <lizmat> too bad

[15:38] * lizmat wonders whether it would be feasible to have a default MAIN sub be called when loading a module with -M

[15:39] <perigrin> if I understand mixins properly they're just differnet from standard role composition 

[15:39] <lizmat> and *only* with -M

[15:39] <perigrin> (I could very likely be understanding them entirely wrong)

[15:39] <FROGGS[mobile]> lizmat: what about sub EXPORT?

[15:39] *** benabik joined
[15:40] <lizmat> this is about an easy way to install a new compunit (module)

[15:40] <lizmat> I was thinking: if one would do "perl6 -MFoo" and Foo.pm was not installed yet, that would install it by running a default MAIN

[15:41] <lizmat> that would Do The Right Thing

[15:41] <FROGGS[mobile]> ahh

[15:42] <FROGGS[mobile]> cool

[15:42] <lizmat> or even "perl6 Foo.pm"

[15:42] <lizmat> that would probably make even more sense  :-)

[15:42] <benabik> Well, perl6 Foo.pm should run Foo.pm.

[15:42] <benabik> IIRC, it's allowed for modules to have a MAIN.  Useful for apps and testing.

[15:43] <lizmat> the ides is if that compunit would not have a MAIN, it could run a default MAIN

[15:43] <lizmat> that would check if the module was "installed" already, and if not, install it in whatever cached compunit directory file we will have

[15:44] <benabik> What would the default MAIN do?  I would expect perl6 -MFoo to start a REPL, myself.

[15:45] <jnthn> It does

[15:45] *** _ilbot joined
[15:45] <lizmat> no, it doesn't currently

[15:45] *** _ilbot left
[15:45] <jnthn> It also does in perl6-debug, which is nice 'cus then you can write a call into the module and start debugging it.

[15:45] <lizmat> ah

[15:45] *** phpdude left
[15:45] <lizmat> yes, -MFoo does, "perl6 Foo.pm" does not

[15:45] <jnthn> lizmat: huh, I thought it did...

[15:45] <jnthn> Right :)

[15:46] *** phpdude joined
[15:48] <lizmat> so, I would like to have perl6 Foo.pm do something special if it doesn't have a MAIN

[15:48] <benabik> That feels hazardout.

[15:48] <benabik> *hazardous.

[15:49] <[Coke]> r: say 'asdf"asdfasdf"asdf2' ~~ / '"' <-["]>+ '"'/

[15:49] <camelia> rakudo b9869c: OUTPUT«｢"asdfasdf"｣␤␤»

[15:49] <benabik> If I accidentally write sub MAI {}, for example...

[15:49] <flussence> erm... wouldn't it better to have something separate like «sub MODULE» for use with -M?

[15:49] <[Coke]> r: say 'asdf"asdfasdf"asdf2' ~~ / '"' (<-["]>+) '"'/

[15:49] <lizmat> maybe my idea needs another special sub for installing the compunit

[15:50] <camelia> rakudo b9869c: OUTPUT«｢"asdfasdf"｣␤ 0 => ｢asdfasdf｣␤␤»

[15:50] <benabik> Installing the comp unit?  As in copying the module to a library directory?  I propose we write a new utility for that other than perl6.  We can name it after a cute animal, like a panda.

[15:50] <lizmat> something like 'perl6 Foo.pm' would call a method INSTALL

[15:51] <lizmat> sorry, but we want to be able to support multiple installers for Perl6, so this logic needs to be part of an API

[15:51] <lizmat> an API that can be overridden if necessary

[15:51] *** JimmyZ_ left
[15:52] <lizmat> and a cutely named utility can then use this API, as an other less cutely named API like cpanm  :-)

[15:52] <benabik> Getting an install when I asked for the program to run it is broken.

[15:53] <lizmat> this is intended for developers

[15:53] *** moritz joined
[15:53] <lizmat> in Perl6, most likely compunits need to be installed in some way before they can be -use-d

[15:53] <benabik> This is true in nearly every language.

[15:54] <lizmat> not so in Perl 5: it just needs to exist

[15:54] <lizmat> and breaking away from that is hard for the mind of the Perl developer

[15:54] <benabik> What installation are you talking about?

[15:55] <lizmat> in Perl 6, -use- is specced to also accept from/auth/ver parameters

[15:55] *** moritz left
[15:55] <lizmat> this allows different versions of the same longnamed module to co-exist in the same @INC entry

[15:56] *** crab2313 joined
[15:56] <lizmat> also, this is all case-sensitive and unicode,

[15:56] * benabik is fairly familiar with the spec, thank you.

[15:56] <lizmat> and needs to be able to run on a case-insensitive, non-unicode FS

[15:57] <lizmat> this implies we need some way of mangling the compunit name given to a file on the filesystem

[15:57] <benabik> Yes.  So there needs to be an API for this.  Fine.  I'm saying that making this the default behavior on running a module is terribly broken and please don't do that.

[15:58] <benabik> perl6 * runs *'s MAIN.  perl6 -MFoo uses Foo and gives me a REPL.

[15:58] <benabik> Maybe perl6 --install-this-for-me Foo.pm can do it.

[15:59] <lizmat> indeed: I was just exploring of huffmann coding this to something shorter

[15:59] <perigrin> lizmat: you mean build in something like https://metacpan.org/release/lib-xi?

[15:59] <lizmat> no

[16:00] <lizmat> this is only about making a local file known to the local installation, so -use- can find it

[16:00] *** fridim_ joined
[16:00] <benabik> But, also, I think that the auth,yadda,yadda isn't supposed to make it impossible to have a .pm in the current directory and just `use lib '.'`

[16:01] <lizmat> well, that is the question

[16:01] <lizmat> allowing that would make searching for a module a lot more intensive

[16:01] *** _ilbot joined
[16:01] <benabik> It might not find the auth, etc.

[16:01] *** _ilbot left
[16:02] *** gdey left
[16:02] <lizmat> as it would force to check each @INC dir for existence of the file, if it is not found in the cached compunit information

[16:02] *** gdey joined
[16:03] <lizmat> and it would probably only work for -use Foo- *without* any from/auth/ver information

[16:03] <lizmat> so, the :auth(Any):ver(Any) case

[16:03] *** moritz joined
[16:03] *** moritz left
[16:04] * lizmat feels for moritz

[16:05] <benabik> I think you're trying to Huffmanize this wrong.  Installing new modules isn't the common case, running files is.  It's perfectly appropriate to have a separate utility for installation.

[16:05] *** daxim left
[16:05] <benabik> I don't see perl6 being any different than perl5 (cpan), Python (pip), or Ruby (ruby gem) here.

[16:05] <lizmat> also as a developer?

[16:06] <benabik> If you specify :auth<cpan:FOO>, I would really expect that that module was installed by cpan.

[16:06] <benabik> Or something similar.

[16:06] <lizmat> that's the big difference: as a developer, you need to make your own file known to your installation before it is able to find it

[16:07] <lizmat> that's a consequence of not going to the filesystem to check for existence of files, but instead use the cached compunit info when doing a -use-

[16:07] <jnthn> I'd really hope that this looks like -I. or -Ilib

[16:07] <benabik> If I'm trying to run my own code why would I be using the auth stuff instead of use lib?

[16:08] <lizmat> use lib will only add a directory to @INC

[16:08] <lizmat> and allow the cached compunit info in that dir to be seen by the system

[16:08] <lizmat> in my vision, it would *not* find your new file just like that

[16:08] <benabik> A _cache_ shouldn't be considered authoritative.

[16:09] <benabik> If I muck with @INC, I rather expect it to go looking in those directories for my files.

[16:10] <lizmat> well, each @INC directory will have its own cache

[16:10] <jnthn> lizmat: I think that hurts whipuptitude a little too much. Developing small things locally shouldn't be painful.

[16:10] <lizmat> that's what I'm trying to do: to make this as painless as possible

[16:10] <jnthn> lizmat: We don't have to have the same cache policy for every directory in @INC, though.

[16:11] <benabik> Having to register every single module via external utility before use is not "as painless as possible"

[16:11] <lizmat> jnthn: something like having .perl6_search_fs in a dir

[16:12] <jnthn> If I can't just write a Foo.pm then do 'perl6 -I. -e "use Foo.pm; blah"' I'll probably be sad...

[16:12] <lizmat> would prohibit from creating a cache in that dir, and only use filesystem lookup there?

[16:12] <jnthn> lizmat: Well, we may want to say that's the policy for anything you add with -I.

[16:12] <lizmat> ah, to make it a runtime override

[16:12] <benabik> Or via use lib.  Or via directly mucking with @INC.

[16:13] <lizmat> that's an idea… 

[16:13] <jnthn> It's places we expect an installer only to place stuff where we can say "OK, treat the cache as stable"

[16:13] <benabik> I'm somewhat expecting that @INC actually includes interesting objects to do module lookups instead of just paths.

[16:13] <benabik> And if it encounters a path, well, then it just has to go look.

[16:13] <jnthn> Which in production is probably going to be all the places in @INC

[16:14] <lizmat> ok, I'm going to mull over this afk in the coming hours

[16:15] *** moritz joined
[16:15] *** moritz left
[16:15] <lizmat> just for the record: I'm trying to unslush S11 into something that can be implemented soon  :-)

[16:16] *** kaleem joined
[16:16] <jnthn> lizmat++

[16:16] <jnthn> I'm really happy somebody is doing that. 

[16:18] *** Stygia left
[16:18] <benabik> Actually I kind of like the objects in @INC idea.  That way you can `use CPAN-Alternative; @INC.unshift CPAN-Alternative.new('/path/to/libs'); use Foo:auth<funny-stuff-here>

[16:20] *** phpdude left
[16:20] *** phpdude joined
[16:22] *** fhelmberger left
[16:25] *** ssutch joined
[16:27] *** kingbeast joined
[16:28] *** berekuk joined
[16:28] *** gdey left
[16:30] *** FROGGS joined
[16:31] *** moritz joined
[16:31] *** moritz left
[16:33] *** raiph joined
[16:34] *** kaleem left
[16:34] *** BenGoldberg joined
[16:36] *** phpdude left
[16:37] *** phpdude joined
[16:37] <FROGGS> <benabik> But, also, I think that the auth,yadda,yadda isn't supposed to make it impossible to have a .pm in the current directory and just `use lib '.'`

[16:37] <FROGGS> my S11 proposal has a solution for this btw

[16:38] <FROGGS> https://github.com/FROGGS/p6-S11Versioning#searching-for-distributions

[16:41] *** _ilbot joined
[16:41] <FROGGS> @*INC is for in-development-modules and for I-dont-care-what -version-it-has--take-it-!, %*CUSTOM_LIB is for proper installed modules with auth/ver

[16:42] *** _ilbot left
[16:42] <benabik> FROGGS++

[16:42] <FROGGS> \o/

[16:43] <FROGGS> I should just implement it over night *g*

[16:43] <FROGGS> the problem is: night is not at the same time everywhere :/

[16:44] *** _ilbot joined
[16:44] *** _ilbot left
[16:47] <mls> hmm, how do I update the jvm stage0 bootstrap directory?

[16:47] *** dag left
[16:47] <mls> 'make bootstrap-files' copies jar files into directory

[16:47] <mls> instead of .class files

[16:49] <FROGGS> maybe the makefile is borken? I dunno

[16:49] <jnthn> mls: sorear++ did the class => jar transition and would probably know

[16:49] <benabik> I think sorear++ made it generate jars instead of classes now.  No idea if it's stable enough to bootstrap.

[16:50] <mls> seems like bootstrap needs more love ;)

[16:50] *** dakkar left
[16:52] *** kaleem joined
[16:53] <timotimo> .ask sorear to ping me when he gets a few free minutes and headspace for the try.perl6.org + java applet thingie

[16:53] <timotimo> camelia: .ask sorear to ping me when he gets a few free minutes and headspace for the try.perl6.org + java applet thingie

[16:53] *** moritz joined
[16:53] *** moritz left
[16:53] <timotimo> ... i suppose he'll find that in the backlog.

[16:53] <benabik> No yoleux?

[16:53] <timotimo> oh, of course.

[16:53] <timotimo> yoleaux: .ask sorear to ping me when he gets a few free minutes and headspace for the try.perl6.org + java applet thingie

[16:54] <benabik> timotimo: I mean "yoleaux doesn't seem to be in the channel"

[16:54] <benabik> Was that another of moritz's bots?

[16:54] <timotimo> er... yes you are right

[16:56] <FROGGS>   .tell, not .ask

[16:57] <timotimo> show, don't tell

[16:58] *** shinobicl left
[16:58] *** moritz joined
[16:58] *** moritz left
[16:58] <PerlJam> moritz! o/

[16:58] <PerlJam> oh, well.  Need to be quicker next time.

[16:59] *** atroxaper left
[17:01] <benabik> ilbot2 has been jumping in and out of #parrot like that for, I dunno, days?

[17:07] *** yoleaux joined
[17:07] *** ChanServ sets mode: +v yoleaux

[17:11] <pmichaud> don't .ask, do .tell

[17:12] *** ajr_ left
[17:14] <benabik> Well, now you can .tell.

[17:14] <benabik> wb yoleaux 

[17:14] <diakopter> .seen diakopter

[17:14] <yoleaux> You're right there.

[17:14] <diakopter> .seen .seen

[17:14] <yoleaux> I haven't seen .seen around.

[17:15] <diakopter> .seen \

[17:15] <yoleaux> I haven't seen \ around.

[17:15] <benabik> Looks like .ask, .tell, and .to all work. (judging from the .help)

[17:17] <BenGoldberg> .seen yoleaux

[17:17] <yoleaux> I'm right here.

[17:19] <BenGoldberg> In perl5, if you unshift a blessed ref into @INC, then require something, the ->INC method of that object will get called.  Anyone have any idea if something like that will be available in perl6?

[17:20] <geekosaur> that was being discussed earlier

[17:22] <flussence> wouldn't that just be .Str here?

[17:23] <BenGoldberg> Well, the name of the method isn't that important...

[17:24] <BenGoldberg> Just that the method gets called on a (possibly stateful) object, and that a file handle gets returned.

[17:25] *** moritz joined
[17:25] *** moritz left
[17:26] <PerlJam> BenGoldberg: you mean "something that can act like a file handle" surely?

[17:26] *** athomason left
[17:26] <TimToady> also, P5 assumes it's going to be compiling whatever is there, which doesn't necessarily follow in P6

[17:27] *** _ilbot joined
[17:27] *** _ilbot left
[17:27] * TimToady just has a feeling that there may be a better way to achieve the inversion of control that this mechanism is a poor substitute for

[17:29] <TimToady> if we can't think of it, then maybe the low-wattage hack is okay, but usually we've come up with a better way to generalize the low-wattage hacks of P5

[17:29] *** _ilbot joined
[17:29] <diakopter> in Soviet Russia, your programs invert your control. oh wait..

[17:29] *** _ilbot left
[17:30] *** moritz joined
[17:30] *** moritz left
[17:32] *** fhelmberger joined
[17:33] <PerlJam> Is there any prior art in other languages (besides Perl 5)?

[17:33] *** _ilbot joined
[17:33] *** _ilbot left
[17:35] *** moritz joined
[17:35] *** athomason joined
[17:36] *** moritz left
[17:36] *** kaleem left
[17:37] *** fhelmberger left
[17:45] <TimToady> PerlJam: Well, sure, but that's partly why S11 says what it says already  :P

[17:46] *** kingbeast left
[17:48] <TimToady> I think the main point of S11 should be read as "We need to see these things from the viewpoint of someone managing a large system of interacting modules at a large company, not just from the viewpoint of the person writing a tricksy little script."

[17:49] <masak> o/, #perl6

[17:49] <yoleaux> 23 Jun 2013 23:15Z <FROGGS_> masak: good morning! I updated the gist https://gist.github.com/FROGGS/5845176

[17:51] <masak> FROGGS: verra nice. if it were a pull request, I'd accept it :)

[17:51] <masak> (and if it were a commit, I wouldn't revert it.)

[17:51] *** mikemol left
[17:51] <TimToady> and doctoring @*INC with active objects is more in the category of "tricksy"

[17:51] *** moritz joined
[17:51] *** moritz left
[17:52] *** tomyan joined
[17:53] * masak .oO( the category Tri of tricksy semigroups )

[17:54] <masak> where homomorphisms are all functions that preserve associativity and... tricksiness.

[17:54] *** _ilbot joined
[17:54] *** _ilbot left
[17:56] *** berekuk left
[17:58] *** tomyan left
[17:59] * [Coke] wonders if jnthn is still waiting for the daily jvm run!

[17:59] <[Coke]> (alllmost at S03)

[18:00] * [Coke] wonders why running a single spec test using test_summary shows 11 child processes all the same(?) (but with different PIDs)

[18:02] <masak> sorear: have you seen http://homotopytypetheory.org/book/ ?

[18:02] *** flaviusb left
[18:06] *** xlat-home joined
[18:07] *** Guest1337 left
[18:08] *** domidumont joined
[18:12] <[Coke]> ugh, I lied, still not at S03. So sllooow.

[18:16] <timotimo> [Coke]: wow, how few runners is that? >_<

[18:16] *** tomyan joined
[18:18] <[Coke]> timotimo: I'm using t/spec/test_summary - SFAIK, there are no runners.

[18:19] <[Coke]> each test is, I think, invoking "./perl6 t/spec/xx/yy.t"

[18:20] <timotimo> oh, yikes!

[18:20] <timotimo> the startup times must be horrible

[18:21] *** rindolf left
[18:21] <timotimo> hoelzro: it seems like ACE can generate language definitions from .tmlanguage files, which is the format sublimetext uses. that may be interesting to do; write one highlighter for a popular code editor, get another for github's and gist's (and other website's) editors

[18:21] <[Coke]> timotimo: yes. yes it is. :)

[18:21] *** raiph left
[18:23] <[Coke]> are there docs on perl6-eval-server and friends?

[18:23] *** _ilbot joined
[18:24] *** _ilbot left
[18:24] <tadzik> [Coke]: try TEST_JOBS=n make spectest

[18:24] <tadzik> n being number of cpu cores

[18:25] <[Coke]> tadzik: I can't do that. I need test_summary

[18:25] <tadzik> ah

[18:25] *** _ilbot joined
[18:25] *** _ilbot left
[18:26] <diakopter> [Coke]: if you're looking in htop, it's b/c it's showing threads

[18:26] <diakopter> erm.

[18:26] <diakopter> maybe not.

[18:26] <[Coke]> I would also probably jsut use TEST_JOBS=1 here (but still want the eval server)

[18:26] <[Coke]> diakopter: they all have different PIDs.

[18:26] <[Coke]> which I thought would indicated different processes.

[18:26] <[Coke]> *indicate

[18:28] <diakopter> oh, those are definitely threads

[18:28] <diakopter> userland threads

[18:29] <geekosaur> [Coke], older linux did threads with processes. (it ... didn't work very well. there's real threads in modern linux kernels)

[18:29] <diakopter> that's not necessarily relevant to his question

[18:29] *** moritz joined
[18:30] *** _ilbot joined
[18:30] *** moritz left
[18:30] *** _ilbot left
[18:31] *** ajr joined
[18:32] <flussence> htop has an option to show threads in a different colour...

[18:32] *** ajr is now known as Guest36255

[18:32] *** Guest36255 is now known as ajr_

[18:32] <diakopter> http://i.imgur.com/sO9CF98.png those are threads

[18:33] <diakopter> (see they have the same memory stats)

[18:35] <diakopter> (and the process says it's using 143% cpu)

[18:37] <diakopter> (93% + 21% + 26% + 1% ish)

[18:37] *** rindolf joined
[18:37] *** raiph joined
[18:38] <[Coke]> S05!

[18:38] <[Coke]> zzzzz

[18:42] * [Coke] offers sorear a bounty for making the eval server work with test_summary.

[18:42] <[Coke]> s/sorear// , but I figure sorear++ could do it faster than anyone else.

[18:43] *** cognominal left
[18:44] *** cognominal joined
[18:45] *** moritz joined
[18:45] *** dmol1 left
[18:45] *** moritz left
[18:47] *** dmol joined
[18:50] *** rindolf left
[18:53] *** xlat-home left
[18:56] *** raiph left
[18:57] *** _ilbot joined
[18:57] *** _ilbot left
[18:58] *** vk_ joined
[18:58] *** tomyan left
[18:58] *** raiph joined
[19:04] *** Rotwang joined
[19:05] <lizmat> TimToady: oddly enough, @*INC seems not to have been specced, at least not much

[19:05] <lizmat> S19:447 refers to S11, but S11 doesn't provide any more insight

[19:05] *** Guest1337 joined
[19:06] <lizmat> so one could argue, that we could potentially live without it  (thinking outside the box now)

[19:07] *** berekuk joined
[19:08] <diakopter> :)

[19:08] <diakopter> you're forgetting the S01 catch-all

[19:09] * masak .oO( Perl 6's @*INC will work exactly like Perl 5's @*INC )

[19:09] <diakopter> lizmat: [feel free to clarify said catch-all.. ;) ]

[19:10] *** _ilbot joined
[19:10] *** sqirrel left
[19:10] *** _ilbot left
[19:12] *** berekuk left
[19:12] *** xlat joined
[19:13] <flussence> the biggest difficulty here is trying to predict the future while aeffecting it...

[19:14] *** berekuk joined
[19:14] <lizmat> masak: I assume you mean Perl 5's @INC ?

[19:15] <masak> lizmat: no, I was just being tongue-in-cheek.

[19:15] <masak> flussence: if it's difficult, that suggests you're doing too much predicting and too little affecting :P

[19:15] <timotimo> masak: with all that tongue-in-cheek-ness, do you have to make sure you balance left and right cheek, so that one doesn't get dented out more than the other?

[19:15] <lizmat> Anyway, I think it makes sense

[19:15] <timotimo> afk&

[19:16] <jnthn> .oO( :-b )

[19:16] <flussence> .oO( wouldn't that be :þ ? )

[19:17] <geekosaur> ...a thorn in your side...

[19:17] <flussence> .oO( U+00FE MOUTH WITH IMPROPERLY USED CURLY STRAW )

[19:18] *** jlaire left
[19:19] *** berekuk left
[19:21] <lizmat> but seriously, I think the idea makes sense

[19:21] <lizmat> r: say @*INC.of

[19:21] <camelia> rakudo b9869c: OUTPUT«(Mu)␤»

[19:23] *** jlaire joined
[19:24] <lizmat> r: class Foo {}; BEGIN {@*INC.unshift(Foo.new)}; use Test; ok 1  # adding objects to @*INC seems to not break anything

[19:24] <camelia> rakudo b9869c: OUTPUT«ok 1 - ␤»

[19:26] <lizmat> so I assume we won't be breaking any existing Perl 6 code if we allow addition of objects to @*INC

[19:26] <lizmat> I guess the above works because the stringification of Foo.new yields a non-existing directory

[19:27] *** rindolf joined
[19:29] *** itz joined
[19:35] *** SmokeMac_ left
[19:35] *** Timbus left
[19:36] *** moritz joined
[19:37] *** moritz left
[19:37] *** Timbus joined
[19:40] *** Timbus|Away joined
[19:41] *** Timbus left
[19:41] *** Timbus|Away is now known as Timbus

[19:44] *** raiph left
[19:45] *** tomyan joined
[19:47] * flussence has a DSL idea

[19:48] <flussence> «$foo but right-aligned(20)» --> «$foo.fmt('%20s')»

[19:50] *** _ilbot joined
[19:51] *** _ilbot left
[19:53] *** _ilbot joined
[19:53] *** _ilbot left
[19:54] *** domidumont left
[19:57] *** perigrin left
[19:58] *** perigrin joined
[19:58] *** zby_home_ joined
[20:07] * avuserow relurks :)

[20:12] <diakopter> !!

[20:12] <dalek> perl6-roast-data: 1c39fca | coke++ | / (5 files):

[20:12] <dalek> perl6-roast-data: today (automated commit)

[20:12] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/1c39fca860

[20:12] <diakopter> avuserow: did you mean delurks?

[20:12] <lizmat> 70.47%

[20:13] <lizmat> still more than 70.02%  :-)

[20:15] <timotimo> holy hell. that's pretty darn good

[20:15] <FROGGS> what

[20:15] <FROGGS> rakudo .jvm is at >70% ??

[20:16] <tadzik> http://www.quickmeme.com/meme/3uyw62/

[20:16] <FROGGS> that is pretty awesome

[20:17] <FROGGS> I remembered to hear jnthn say that the jvm-backend will land in september or so...

[20:18] <FROGGS> tadzik: yeah :o)

[20:18] <tadzik> do we have jop:: opcodes, or so?

[20:18] <tadzik> I guess I'll have to dig into nqp

[20:18] *** census joined
[20:18] <benabik> I think there are only nqp:: ops in nqp-jvm.  I think there are some unique ops though.  :-/

[20:19] <timotimo> "2 todo PASSED: no parametrization" :)

[20:19] * benabik wonders if we need a JavaCall for JVM.

[20:20] *** tomyan left
[20:21] <timotimo> +   395 tests more than planned were run

[20:21] <timotimo> does this enter the calculation at all?

[20:23] <FROGGS> timotimo: usually yes

[20:23] <timotimo> in a bad way?

[20:24] <FROGGS> It can be bad, yes, and I think the tests are not fudged for rakudo.jvm

[20:25] <FROGGS> so it maybe loops more that it should, or something like that

[20:27] *** kaare_ left
[20:28] <timotimo> that was from an exception-related thingie, so probably crazy control flow jumpyness?

[20:29] <FROGGS> I had the problem in v5 that it printed both 1 - ok and 1 - not ok... but I guess that wont happen with Test.pm :o)

[20:29] <[Coke]> In general, do not yet fudge for rakudo.jvm

[20:29] <timotimo> whoops :)

[20:29] <FROGGS> [Coke]: yeah, it makes sense when it settled down

[20:31] *** census left
[20:35] *** benabik left
[20:40] *** _ilbot joined
[20:40] *** _ilbot left
[20:40] *** ssutch left
[20:41] *** konundra left
[20:49] *** moritz joined
[20:50] *** moritz left
[20:50] <FROGGS> .tell masak here is binary support, left justify, 0B-prefixing and precision for binaries: https://gist.github.com/FROGGS/5845176

[20:50] <yoleaux> FROGGS: I'll pass your message to masak.

[20:53] *** imarcusthis- joined
[20:54] *** xlat left
[20:57] *** xlat joined
[21:07] *** smash left
[21:07] *** cosimo left
[21:07] *** Timbus left
[21:07] *** Timbus joined
[21:07] *** Juerd joined
[21:09] *** xlat left
[21:09] *** skids left
[21:10] *** _ilbot joined
[21:10] *** smash joined
[21:10] *** _ilbot left
[21:11] *** cosimo joined
[21:14] *** Rotwang left
[21:15] *** _ilbot joined
[21:15] *** PacoAir left
[21:15] *** _ilbot left
[21:15] *** semahawk joined
[21:16] <lue> hello world o/

[21:16] <timotimo> ohai lue

[21:23] *** _ilbot joined
[21:23] *** _ilbot left
[21:25] *** _ilbot joined
[21:25] *** _ilbot left
[21:30] *** arlinius left
[21:30] *** Gothmog_ joined
[21:30] *** rindolf left
[21:31] <masak> FROGGS: thanks, but why are you sending me gists for review instead of github branches? :)

[21:31] <yoleaux> 20:50Z <FROGGS> masak: here is binary support, left justify, 0B-prefixing and precision for binaries: https://gist.github.com/FROGGS/5845176

[21:31] <masak> it leaves me unsure of what next action to take...

[21:32] <FROGGS> masak: ohh, just wanted to hear your opionen... I can make branches for this I'm unsure to push directly...

[21:33] *** jeffreykegler joined
[21:34] <FROGGS> done

[21:35] <masak> url?

[21:36] <FROGGS> your repo branch binary

[21:36] <FROGGS> https://github.com/masak/sprintf/commit/8eabd63d910c5622ad64b21c314c546ad07baecd

[21:36] * masak looks

[21:37] *** _ilbot joined
[21:37] *** _ilbot left
[21:37] *** zby_home_ left
[21:38] <masak> pushed :)

[21:38] <masak> (to master)

[21:39] <FROGGS> k

[21:39] <masak> FROGGS++

[21:40] <FROGGS> ohh, thanks

[21:40] <masak> I think grokking the git model is the best knowledge investment I made in the past year.

[21:40] <FROGGS> yes, it is a pretty useful tool

[21:41] <FROGGS> ... which improves code quality a lot

[21:41] <FROGGS> gnight

[21:41] <masak> to review/push your commit I did the following: git pull; git log ..origin/binary; git merge origin/binary; git push; git push origin :binary

[21:41] <masak> so simple!

[21:42] <FROGGS> hmm, I had checkout that branch, and cherry picked it I guess

[21:45] <masak> had you cherry-picked it, you would have created an additional commit object.

[21:45] <masak> with a different committer.

[21:45] <masak> otherywise, yeah, not much difference.

[21:48] *** phpdude left
[21:48] *** FROGGS[mobile] left
[21:48] *** phpdude joined
[21:55] *** moritz joined
[21:55] *** phpdude left
[21:55] *** moritz left
[21:56] <lue> Are AnyChar and Char the same thing? S29's description of both are basically identical.

[21:56] *** arlinius joined
[21:57] <timotimo> when "inventing" a new op to be used to make dir() work (nqp::readline, anyone?), is it mandatory to immediately implement nqp::readline for parrot also?

[21:57] *** dukeleto joined
[21:57] *** phpdude joined
[21:57] <dukeleto> o/

[21:57] <timotimo> hm, actually, that's not such a difficult thing, i can totally do that.

[21:58] <masak> S29 is full of slush.

[22:00] *** moritz joined
[22:00] *** _ilbot joined
[22:00] *** semahawk left
[22:01] <lue> masak: that's not surprising :)

[22:01] *** moritz left
[22:01] *** _ilbot left
[22:01] <masak> lue: it's that kind of well-meaning spec'age that never quite connects with reality. the "oh, *I* know!" kind.

[22:02] <masak> as opposed to "it's been like this for ages, let's take the rough consensus and working code and formalize it".

[22:02] *** ozmq joined
[22:02] *** spider-mario left
[22:02] <lue> Is there a use for something like (Any)Char anyway? /me suspects not

[22:03] <timotimo> huh. i don't know how to make an jvm-nqp-op that can lazily do things :|

[22:06] <lizmat> lue: it feels more like a conceptual spec, than something that would need to be implemented

[22:07] *** moritz joined
[22:07] *** moritz left
[22:07] <lizmat> otoh, I could see Str.shift return a Char

[22:08] <lue> Yeah. I'm just wondering how useful AnyChar would really be (a one character string at the highest abstraction level currently possible).

[22:08] <lizmat> and Str.list return a List of Char

[22:08] <lizmat> rather than returning a List of itself, as is the case now

[22:09] <lizmat> s/List of Char/lazy List of Char/

[22:09] <lizmat> a bit like Str.coomb does now

[22:10] <lizmat> *comb

[22:10] *** tomyan joined
[22:10] <lue> .oO(I can see the spec now: "A Char is essentially a one-character Str, typically at the highest possible view of what a character is. Unlike C-like languages, a Char is not a fancy Int8")

[22:11] <masak> lizmat: I don't feel a need for both Str.comb and a Str.list

[22:11] <lizmat> me neither. come to think of it

[22:11] *** salv0 left
[22:11] *** raiph joined
[22:12] *** Vlavv left
[22:13] <lizmat> have we specced how to get unicode properties from a codepoint already?

[22:13] <lue> Str definitely needs some way to view/modify its current unicode abstraction levels, unless I missed that part.

[22:15] *** raiph left
[22:15] *** raiph joined
[22:16] <lizmat> one may wonder whether that needs to be Str or something lower

[22:17] *** Vlavv joined
[22:18] <pmichaud> S02 talks about unicode abstraction levels

[22:18] <lue> ( It would also be nice to have the opposite of "\c[ASTERISK]", like "\x2A", "\o52", and "\c42" have chr("*") )

[22:18] <pmichaud> lue: that confuses me :-)

[22:18] <timotimo> i've wanted a codepoint-to-name lookup, too

[22:18] <timotimo> (plus: lookup of attributes and such)

[22:18] <pmichaud> r: say chr('*')

[22:18] <camelia> rakudo b9869c: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏*' (indicated by ⏏)␤  in method Int at src/gen/CORE.setting:10358␤  in method Int at src/gen/CORE.setting:4257␤  in sub chr at src/gen/CORE.setting:3685␤  in sub chr at src/gen…

[22:18] <lizmat> .u want this in Perl 6

[22:19] <yoleaux> No characters found

[22:19] <lizmat> :-(

[22:19] <pmichaud> but yes, having a way to look up unicode information sounds good

[22:19] <pmichaud> otoh, perhaps that's better as a module than core

[22:19] <lue> s/chr/ord/ then

[22:20] <timotimo> doesn't core already handle that information? it needs to check the database for regexes, for instance

[22:21] <lue> e.g. codepoint("Ä") returns "CAPITAL LETTER A WITH DIARESIS"

[22:21] <timotimo> anyway, i'll go to sleep now :)

[22:21] <timotimo> (i'd even go so far as to create a CodepointInfo class or something)

[22:22] <lue> .oO(It also already has the names of unicode codepoints for interpreting \c)

[22:23] *** _ilbot joined
[22:23] *** _ilbot left
[22:24] *** dmol left
[22:27] *** salv0 joined
[22:29] <flussence> if this Char object were to exist, it should probably be called Grapheme to make it clear

[22:30] * lizmat will continue working on S11 tomorrow

[22:30] <lizmat> but for now: sleep&

[22:30] <lue> flussence: I was going of S29's definition of Char (and AnyChar), which is "the current highest possible Unicode abstraction level"

[22:30] <lue> good ♞ lizmat o/

[22:30] <lue> s/of/off/

[22:30] <pmichaud> having a database that can go from names to numbers doesn't automatically imply the inverse :)

[22:30] <pmichaud> besides, if it's not a common operation, it might be better as a module than as something that gets loaded on every execution

[22:31] <masak> +1

[22:31] <pmichaud> (as an example... libicu has a way to go from names to numbers, but I haven't found a reliable way to do the inverse in libicu... and libicu is pretty big.)

[22:32] * masak .oO( a very reliable way would just be to try all the names in some order until you find your number ) :P

[22:33] <flussence> (@names Z=> @names».resolve).hash.invert

[22:33] <lue> I was just thinking it'd be suboptimal if a module has to come with a second copy of a names--numbers hash (but if core would have to make such a second table too, then it's just the module author's grumbling at having to recreate ≈0x11_000 entries)

[22:34] <flussence> (may take a few hundred of MB RAM to run that line though.)

[22:35] <masak> flussence: why not just (@names».resolve Z=> @names) in that case? :)

[22:36] *** aindilis left
[22:37] <lue> I want the opposite of \c[NAME] not only because there are times where I want to know the name of a character, and Perl 6 through the shell is fastest, but also symmetry (like I said, \x and friends have their inverse, but \c[NAME] doesn't)

[22:38] <flussence> masak: now that you mention it, @codepoints[@names».resolve] = @names may be more efficient :)

[22:40] * lue just found codepoints.net, for those interested

[22:41] *** mtk left
[22:41] *** ajr_ left
[22:41] <pmichaud> lue: suboptimal for who?

[22:42] *** mtk joined
[22:42] <pmichaud> suboptimal for the person that has to write the module (once), or suboptimal for the programs that get to run without loading a full character database into core on every execution ?

[22:42] <lue> I guess I just don't like the idea of having two copies of the same table once you `use name-from-char', one in core and one in the module.

[22:43] <pmichaud> sure, it seems redundant.  but sometimes redundancy can be more efficient

[22:43] <pmichaud> and certainly a vm or implementation of Perl 6 could make it easier to provide such a module.

[22:43] <pmichaud> I'm not sure it's wise to say that every P6 implementation has to have that capability in its core.

[22:43] * flussence wonders where gucharmap pulls all its data from... ldd shows it depend on icu so maybe that does have something for it

[22:44] <pmichaud> flussence: it's possible that icu has a codepoint-to-name mapping... I just couldn't find an interface that looked straightforward for it

[22:44] <pmichaud> afk, dinner

[22:48] *** jeffreykegler left
[22:48] *** phpdude left
[22:49] <masak> redundance and efficiency are almost opposites.

[22:49] *** phpdude joined
[22:49] <masak> that's what the whole DRY-vs-views insight is all about.

[22:49] <masak> redundancy*

[22:50] * lue thinks Perl 6 in general should allow you to look up various Unicode properties, at least to a certain extent.

[22:51] *** moritz joined
[22:51] *** moritz left
[22:53] <flussence> ew, ew, EW

[22:53] <flussence> found how gucharmap does it

[22:53] <flussence> $ wc -l gucharmap/unicode-names.h

[22:53] <flussence> 48826

[22:54] *** _ilbot joined
[22:54] *** _ilbot left
[22:55] <flussence> it's basically *exactly* that @codepoints line I used above, but as a static C array.

[22:56] *** moritz joined
[22:58] *** moritz left
[22:58] <flussence> (and the irony is, they use a p5 script to create it :)

[23:02] <lue> I just realized. We also don't have a non-string-interpolation version of "\c[NAME]", while \x and friends do. That should be easy to solve though: say chr("LATIN CAPITAL LETTER A")

[23:05] *** _ilbot joined
[23:06] <masak> lue: I... feel uneasy about such an addition.

[23:06] *** _ilbot left
[23:06] <masak> it feels like a change without a use case.

[23:07] <flussence> this stuff is definitely sounding like module territory

[23:09] <lue> I should've included the asterisk on easy to solve (* except doing only->multi would likely not be well-accepted)

[23:09] *** tomyan left
[23:10] <lue> Can a module force a previously only sub to be part one candidate of a multi? I don't recall ever be able to do this, which means a C-style chr_name()

[23:10] <masak> lue: all builtins should be multi, if you ask me.

[23:10] <lue> s/part one/a/

[23:10] <masak> precisely for this reason, that they should encourage extension. (in modules)

[23:10] <lue> The sub is, but not Int.chr it seems.

[23:11] <lue> (duh, I wouldn't need to change that in this case)

[23:22] <lue> .oO(It's incredibly difficult to find a simple text-based list of codepoints and names)

[23:23] *** moritz joined
[23:23] *** moritz left
[23:32] <labster> r: 3i.floor # I've spent quite a while thinking about this bug.

[23:32] <camelia> rakudo b9869c: OUTPUT«maximum recursion depth exceeded␤current instr.: 'print_exception' pc 104724 (src/gen/CORE.setting.pir:46812) (src/gen/CORE.setting:9242)␤called from Sub 'Numeric' pc 224376 (src/gen/CORE.setting.pir:97988) (src/gen/CORE.setting:2991)␤called from Sub 'Numeric' pc 1…

[23:33] <labster> Basically Complex delegates to Cool, which sees it, calls Numeric on it, sees another Complex and delegates to Cool.

[23:35] <labster> I'm having trouble seeing how to break this in a way that would be easily expandable by modules.

[23:37] <masak> why does Complex delegate to Cool? that's the step that I don't find intuitive.

[23:38] <labster> because it doesn't have floor, nor does Numeric.  it's in Real.

[23:38] *** _ilbot joined
[23:38] *** _ilbot left
[23:38] <labster> Maybe something like this in Numeric would work?  method floor { die "floor not available for {self.WHAT}" }

[23:39] <masak> yeah.

[23:40] <labster> I'd like someone with a module to be able to do augment class Complex { multi method floor { ... } } and have it Just Work.

[23:40] *** moritz joined
[23:40] *** moritz left
[23:41] <labster> assuming they typed use MONKEY_TYPING; which I always forget to do :o)

[23:49] <lue> .oO(Is flooring a complex number more, uh, complex than I would think? Or do you plan on writing Complex.floor too?)

[23:50] <[Coke]> r: use MONKEY_TYPING; augment class Complex { method floor() { return NaN} }; say 3i.floor;

[23:50] <camelia> rakudo b9869c: OUTPUT«NaN␤»

[23:50] *** moritz joined
[23:52] *** moritz left
[23:52] <labster> Well, I could write one.  It seems people do use it formatting output.  It's just that I'm not sure it should be in core, because the behavior is not obvious.

[23:54] * lue thinks of floor as being "get rid of the decim^W radix point and all the numbers that came after it", thus (-4.2+πi).floor would be -4+3i

[23:54] *** btyler left
