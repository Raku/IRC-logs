[00:01] *** Chillance left
[00:02] *** sivoais joined
[00:03] <lue> timotimo: Notice how S26 cheats this by putting four spaces in front of every line in its explicit code blocks, and its implicit code blocks (the .WHY/.WHEREFORE diagram S26/Declarator Blocks is an example) are not indented

[00:03] <timotimo> ah, whoops :)

[00:04] <lue> That's been a problem for a while, not your fault :)

[00:04] <lue> (I'm looking at perlcabal.org's S26 btw)

[00:05] <lue> I just noticed, thanks to that diagram, that Pod6's HTML converter appears to strip *all* leading whitespace. Huh.

[00:06] <timotimo> hm.

[00:08] <lue> Just from implicit code blocks though. The explicit code blocks have their indentation preserved.

[00:09] <timotimo> that's kind of outside my headspace right now, sorry

[00:09] <lue> I think that WHY/WHEREFORE diagram actually gives a good look at how the indentation gets messed up (I'll post a gist to explain)

[00:09] <timotimo> i'll test :allow<...> configuration parsing now and then i'll see if i can get formatting codes inside code blocks working

[00:09] <lue> timotimo: that's fine. I should describe the problem for everyone interested anyway :)

[00:09] <timotimo> sounds good

[00:12] *** btyler joined
[00:18] <timotimo> does it seem like a terrible and disgusting hack to set a dynamic variable that's in the grammar from a function inside Perl6/Pod.nqp?

[00:20] *** arlinius joined
[00:22] <lue> https://gist.github.com/lue/5872996    How it seems Pod::To::HTML messes up [ I'll present this to #perl6 again tomorrow when there's more of a crowd :) ]

[00:24] * lue &

[00:25] <timotimo> okay :)

[00:34] <timotimo> not sure where B<=begin pod> is matching so that it would cause it to trip up in a block with :allow

[00:35] <timotimo> oh, of course! <pod_string> will not match newlines!

[00:36] <timotimo> i feel like it still needs to set $*VMARGIN before it'll work though

[01:03] <BenGoldberg> I have a very silly question.  Considering that perl6 is very unicode capable, is there any chance that Rat could make use of the unicode fraction symbols, when there is an appropriate one?

[01:03] <BenGoldberg> For example:

[01:03] <BenGoldberg> r: .chr.say for 188..190, 8528..8542

[01:03] <camelia> rakudo 5c0dae: OUTPUT«¼␤½␤¾␤⅐␤⅑␤⅒␤⅓␤⅔␤⅕␤⅖␤⅗␤⅘␤⅙␤⅚␤⅛␤⅜␤⅝␤⅞␤»

[01:03] *** xenoterracide left
[01:03] *** snearch left
[01:05] <timotimo> you can prototype that in pure perl6 code :)

[01:05] <timotimo> r: my class Rat { method new($a, $b) { say "oooohverride!" } }; say <1/2>; say 1/2;

[01:05] <camelia> rakudo 5c0dae: OUTPUT«1/2␤0.5␤»

[01:05] <timotimo> hm, can't override it like that, eh?

[01:06] <timotimo> r: class Rat { method new($a, $b) { say "oooohverride!" } }; say <1/2>; say 1/2;

[01:06] <camelia> rakudo 5c0dae: OUTPUT«1/2␤0.5␤»

[01:06] <timotimo> which is strange

[01:06] <timotimo> oh, no it's not

[01:06] <timotimo> infix:</> will just have the regular Rat in its scope

[01:08] <timotimo> i'm surprised both pod_textcontent tokens have a <pod_newline> in them, but they are joined with <pod_newline>+ in the pod_content:sym<text> token, too

[01:08] <timotimo> doesn't that mean it requires there to be two newlines after each one?

[01:19] *** thundergnat left
[01:19] *** FROGGS__ joined
[01:20] <BenGoldberg> (Temporarily) ignoring output, how hard would it be so that the 1/2 character will always act as a hardcoded Rat.new(1,2)?

[01:23] *** FROGGS_ left
[01:24] <timotimo> macro it?

[01:24] <timotimo> gotta run now

[01:27] *** drin_m joined
[01:32] <dalek> perl6-roast-data: a420f1c | coke++ | / (4 files):

[01:32] <dalek> perl6-roast-data: today (automated commit)

[01:32] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/a420f1c0b0

[01:33] *** xinming left
[01:33] <timotimo> i was hoping i could get my debugging results faster with only make perl6, but i can't run my tiny test case with the resulting binary :(

[01:34] <timotimo> probably need to pass an empty setting ror something

[01:34] <[Coke]> ^^ the rakudo.jvm gain there is illusory - rakudo.parrot is failing tests.

[01:34] *** xinming joined
[01:35] <timotimo> indeed

[01:36] <dalek> rakudo-star-daily: fd88b6c | coke++ | log/ (5 files):

[01:36] <dalek> rakudo-star-daily: today (automated commit)

[01:36] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/fd88b6c743

[01:36] <dalek> rakudo-star-daily: 61c9e6b | coke++ | log/ (5 files):

[01:36] <dalek> rakudo-star-daily: today (automated commit)

[01:36] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/61c9e6bed1

[01:36] <dalek> rakudo-star-daily: 0a70dd4 | coke++ | log/ (5 files):

[01:36] <dalek> rakudo-star-daily: today (automated commit)

[01:36] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/0a70dd493a

[01:36] <dalek> rakudo-star-daily: e9ff3c7 | coke++ | log/ (5 files):

[01:36] <dalek> rakudo-star-daily: today (automated commit)

[01:36] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/e9ff3c788b

[01:37] <timotimo> do you KBOw how you can type with two fingers on GHthe android portrait keyboard?

[01:37] <timotimo> it really amazes me ow hthat works

[01:40] <[Coke]> whoops.

[01:42] <timotimo> i shall there is no shame in force pushing

[01:45] <[Coke]> that last rakudo.jvm was the wrong one. the right one had a huge # of failures, presumably because I tried TEST_JOBS=2. rerunning

[01:46] <[Coke]> (and I'll probably force push today's commit once it's right.

[01:51] *** cognominal left
[01:52] *** cognominal joined
[01:54] *** xilo joined
[01:54] <sorear> think I'll patch test_summary tonight

[02:01] <[Coke]> sorear++

[02:09] *** fridim_ left
[02:22] <timotimo> i don't understand why pod_textcontent:sym<regular> requires strictly more spaces than the VMARGIN

[02:25] <timotimo> i think i'd be better off not trying to use <pod_textcontent> in blocks where :allow is activated

[02:25] <timotimo> that seems to stretch it a wee bit far.

[02:26] <[Coke]> uhoh. seeing lots of aborts on the rakudo.jvm run. wondering if the last run count was right.

[02:27] <sorear> I may be in the process of breaking other tests while fixing rx.t

[02:28] *** abnorman left
[02:34] *** fgomez joined
[02:35] *** konundra joined
[02:45] <[Coke]> ... a lot of them, aye.

[02:46] <[Coke]> up to S32-str, hopefully can post this before sleep

[02:46] *** lue joined
[02:53] *** atroxaper joined
[02:53] *** kaare_ joined
[02:53] <dalek> perl6-roast-data: 1c3e8d8 | coke++ | / (5 files):

[02:53] <dalek> perl6-roast-data: today (automated commit)

[02:53] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/1c3e8d8b68

[02:54] <[Coke]> ok, that rewrote history.

[02:54] <[Coke]> rakudo.jvm down to 4.48%. :(

[02:55] <colomon> wtf?

[02:56] <colomon> are those numbers broken?  I mean, I'm looking at a single file right now with 100 passing tests.  Surely that cannot be 9% of the total passes for R-JVM.

[02:57] <[Coke]> There is insufficient memory for the Java Runtime Environment to continue.

[02:57] <colomon> likewise cos.t has 154 passing tests.

[02:57] <colomon> ah

[03:01] <[Coke]> colomon: you could try the ulimited p6 I'm using to see if that's what it is.

[03:02] <colomon> [Coke]: it's time for me to go to bed, but I'd be happy to give it a try in the morning.

[03:03] *** xilo left
[03:06] *** xilo joined
[03:08] <colomon> r: say 1R/2**256

[03:08] <camelia> rakudo 5c0dae: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused␤at /tmp/1xhmfMZBUd:1␤------> [32msay 1[33m⏏[31mR/2**256[0m␤    expecting any of:␤        whitespace␤»

[03:09] <colomon> r: say 1.FatRat/2**256

[03:09] <camelia> rakudo 5c0dae: OUTPUT«0.0000000000000000000000000000000000000000000000000000000000000000000000000000086␤»

[03:09] <colomon> r: say (1.FatRat/2**256).Num

[03:09] <camelia> rakudo 5c0dae: OUTPUT«8.63616855509444e-78␤»

[03:09] <colomon> r: say 1/ (1.FatRat/2**256).Num

[03:09] <camelia> rakudo 5c0dae: OUTPUT«1.15792089237316e+77␤»

[03:09] *** xinming left
[03:11] *** xinming joined
[03:18] *** hypolin left
[03:19] *** hypolin joined
[03:28] *** preflex left
[03:29] *** SamuraiJack joined
[03:30] *** preflex joined
[03:30] *** ChanServ sets mode: +v preflex

[03:54] *** xenoterracide joined
[03:55] *** drin_m left
[04:04] *** cognominal left
[04:30] *** Patterner left
[04:32] <dalek> mu: 8449f0d | lue++ | docs/feather/syn_index.html:

[04:32] <dalek> mu: [docs/feather] Add S99 to syn_index.html

[04:32] <dalek> mu: 

[04:32] <dalek> mu: It's already available if you type the URL directly, this just makes it

[04:32] <dalek> mu: accessible from the index.

[04:32] <dalek> mu: review: https://github.com/perl6/mu/commit/8449f0d06c

[04:33] *** Psyche^ joined
[04:33] *** Psyche^ is now known as Patterner

[04:38] *** cognominal joined
[04:49] *** birdwindupbird joined
[04:57] *** BenGoldberg left
[05:10] *** bibifuc joined
[05:14] *** ecocode joined
[05:14] <dalek> specs: c7e59ef | lue++ | S99-glossary.pod:

[05:14] <dalek> specs: [S99] Add definitions, fix links

[05:14] <dalek> specs: 

[05:14] <dalek> specs: Adds a number of terms and definitions to the glossary. Also fixes links

[05:14] <dalek> specs: so they point to parts of this page instead of other (nonexistent)

[05:14] <dalek> specs: pages.

[05:14] <dalek> specs: review: https://github.com/perl6/specs/commit/c7e59efdfd

[05:19] *** potatogim left
[05:26] *** hypolin left
[05:27] *** hypolin joined
[05:27] *** btyler left
[05:42] *** ecocode left
[05:42] *** kaare_ left
[05:43] <dalek> specs: 0af5ba1 | (Brent Laabs)++ | S32-setting-library/IO.pod:

[05:43] <dalek> specs: document IO::Path.succ and .pred, clarify path creation

[05:43] <dalek> specs: review: https://github.com/perl6/specs/commit/0af5ba1ae0

[05:43] <dalek> specs: 78487b0 | (Brent Laabs)++ | S32-setting-library/IO.pod:

[05:43] <dalek> specs: specify :parent option in IO::Path.cleanup

[05:43] <dalek> specs: review: https://github.com/perl6/specs/commit/78487b0e5e

[05:43] <dalek> specs: f95923d | (Brent Laabs)++ | S99-glossary.pod:

[05:43] <dalek> specs: Merge branch 'master' of github.com:perl6/specs

[05:43] <dalek> specs: review: https://github.com/perl6/specs/commit/f95923d042

[05:45] *** xilo left
[05:48] *** ecocode joined
[05:54] *** xlat joined
[05:54] *** dmol joined
[05:55] *** xenoterracide left
[05:56] *** hypolin left
[05:57] *** hypolin joined
[06:08] *** PacoAir joined
[06:08] *** FROGGS__ left
[06:14] *** PacoAir left
[06:22] *** kaleem joined
[06:31] *** dmol left
[06:37] <diakopter> .tell masak did you see http://www.youtube.com/watch?v=oo-gA9Z9SaA

[06:37] <yoleaux> diakopter: I'll pass your message to masak.

[06:37] <diakopter> wait, that's not the oo talk

[06:37] <diakopter> .tell sorear your voice is there

[06:37] <yoleaux> diakopter: I'll pass your message to sorear.

[06:39] *** hypolin left
[06:39] *** hypolin joined
[06:41] *** fridim_ joined
[06:42] *** domidumont joined
[06:49] <sorear> diakopter: woohoo the videoproject is not dead

[06:49] <yoleaux> 06:37Z <diakopter> sorear: your voice is there

[06:49] *** ecocode left
[06:50] *** ecocode joined
[06:55] *** nqr left
[07:12] *** domidumont left
[07:13] *** domidumont joined
[07:14] *** flaviusb joined
[07:14] *** flaviusb left
[07:17] *** FROGGS__ joined
[07:17] *** FROGGS__ left
[07:18] *** FROGGS joined
[07:18] <FROGGS> morning

[07:21] *** flaviusb joined
[07:23] <sorear> o/ FROGGS 

[07:35] *** tomaw left
[07:35] *** drbean left
[07:35] *** lee_ left
[07:35] *** arlinius left
[07:35] *** ecocode left
[07:35] *** SamuraiJack left
[07:35] *** konundra left
[07:35] *** ggoebel left
[07:35] *** berekuk left
[07:35] *** felher left
[07:35] *** p5eval left
[07:35] *** cosimo left
[07:35] *** cooper left
[07:35] *** domidumont left
[07:35] *** hypolin left
[07:35] *** skids left
[07:35] *** flaviusb left
[07:35] *** FROGGS left
[07:35] *** cognominal left
[07:35] *** segomos left
[07:35] *** avuserow left
[07:35] *** pecastro left
[07:35] *** silug_ left
[07:35] *** bbkr left
[07:35] *** eternaleye left
[07:35] *** yves left
[07:35] *** rafl left
[07:35] *** lue left
[07:35] *** bruges_ left
[07:35] *** ssutch left
[07:35] *** patspam left
[07:35] *** masak left
[07:35] *** BooK left
[07:35] *** __sri left
[07:35] *** szbalint left
[07:35] *** bakedb left
[07:35] *** ingy left
[07:35] *** wtw left
[07:35] *** kst`` left
[07:35] *** baest left
[07:35] *** fridim_ left
[07:35] *** kaleem left
[07:35] *** pochi left
[07:35] *** stevan_ left
[07:35] *** mikemol left
[07:35] *** mattp__ left
[07:35] *** felipe left
[07:35] *** charsbar_______2 left
[07:35] *** birdwindupbird left
[07:35] *** atroxaper left
[07:35] *** fgomez left
[07:35] *** BinGOs left
[07:35] *** Grrrr left
[07:35] *** mls left
[07:35] *** xlat left
[07:35] *** sivoais left
[07:35] *** bluescreen10 left
[07:35] *** logie left
[07:35] *** Tene left
[07:36] *** Timbus left
[07:36] *** djanatyn left
[07:36] *** takesako______ left
[07:36] *** mathw left
[07:36] *** nebuchadnezzar left
[07:36] *** pnu_ left
[07:36] *** Bucciarati left
[07:36] *** TimToady left
[07:36] *** rs0_ left
[07:36] *** rjbs left
[07:36] *** nwc10 left
[07:36] *** rom1504 left
[07:36] *** hugme left
[07:36] *** gfldex left
[07:36] *** anocelot left
[07:36] *** lestrrat left
[07:36] *** Yappo_________ left
[07:36] *** revdiablo left
[07:36] *** flussence left
[07:36] *** bibifuc left
[07:36] *** abnorman joined
[07:37] *** bruges joined
[07:38] *** shachaf joined
[07:38] *** lue joined
[07:38] *** rhr joined
[07:38] *** awwaiid joined
[07:38] *** Hor|zon_ joined
[07:38] *** Juerd joined
[07:38] *** patspam joined
[07:38] *** szbalint joined
[07:38] *** masak joined
[07:38] *** moritz joined
[07:38] *** bakedb_ joined
[07:38] *** WAANAC9 joined
[07:38] *** domidumont joined
[07:38] *** flaviusb joined
[07:38] *** FROGGS joined
[07:38] *** ecocode joined
[07:38] *** fridim_ joined
[07:38] *** hypolin joined
[07:38] *** kaleem joined
[07:38] *** xlat joined
[07:38] *** birdwindupbird joined
[07:38] *** cognominal joined
[07:38] *** SamuraiJack joined
[07:38] *** atroxaper joined
[07:38] *** konundra joined
[07:38] *** arlinius joined
[07:38] *** sivoais joined
[07:38] *** pochi joined
[07:38] *** skids joined
[07:38] *** ggoebel joined
[07:38] *** stevan_ joined
[07:38] *** berekuk joined
[07:38] *** felher joined
[07:38] *** Timbus joined
[07:38] *** bluescreen10 joined
[07:38] *** mikemol joined
[07:38] *** logie joined
[07:38] *** bbkr joined
[07:38] *** p5eval joined
[07:38] *** pecastro joined
[07:38] *** kst`` joined
[07:38] *** Tene joined
[07:38] *** djanatyn joined
[07:38] *** cosimo joined
[07:38] *** drbean joined
[07:38] *** eternaleye joined
[07:38] *** rs0_ joined
[07:38] *** silug_ joined
[07:38] *** yves joined
[07:38] *** cooper joined
[07:38] *** lee_ joined
[07:38] *** segomos joined
[07:38] *** PerlJam joined
[07:38] *** mtk joined
[07:38] *** betterworld joined
[07:38] *** amkrankruleuen joined
[07:38] *** athomason_ joined
[07:38] *** smash_ joined
[07:38] *** zakalwe joined
[07:38] *** ponbiki joined
[07:38] *** Woodi joined
[07:38] *** Celelibi joined
[07:38] *** sftp joined
[07:38] *** chayin_ joined
[07:38] *** Util joined
[07:38] *** telex joined
[07:38] *** prammer joined
[07:38] *** DrEeevil joined
[07:38] *** kshannon joined
[07:38] *** FOAD joined
[07:38] *** woolfy1 joined
[07:38] *** breinbaas joined
[07:38] *** Lorn_ joined
[07:38] *** Maddingue joined
[07:38] *** BinGOs joined
[07:38] *** rjbs joined
[07:38] *** dalek joined
[07:38] *** jercos joined
[07:38] *** snarkyboojum joined
[07:38] *** dayangkun joined
[07:38] *** _ilbot joined
[07:38] *** bloonix joined
[07:38] *** sitaktif joined
[07:38] *** daniel-s joined
[07:38] *** Gothmog_ joined
[07:38] *** imarcusthis- joined
[07:38] *** perigrin joined
[07:38] *** jlaire joined
[07:38] *** yoleaux joined
[07:38] *** JimmyZ joined
[07:38] *** markov joined
[07:38] *** sjn joined
[07:38] *** odoacre joined
[07:38] *** verne.freenode.net sets mode: +vv dalek yoleaux

[07:38] *** pjcj joined
[07:38] *** lizmat joined
[07:38] *** sciurius joined
[07:38] *** Rix joined
[07:38] *** broquaint joined
[07:38] *** sorear joined
[07:38] *** sunnavy joined
[07:38] *** amoe joined
[07:38] *** [particle] joined
[07:38] *** genehack joined
[07:38] *** hoelzro joined
[07:38] *** camelia joined
[07:38] *** eiro joined
[07:38] *** mj41 joined
[07:38] *** mangala joined
[07:38] *** mst joined
[07:38] *** jnthn joined
[07:38] *** clkao joined
[07:38] *** crazedpsyc joined
[07:38] *** integral joined
[07:38] *** sjohnson joined
[07:38] *** tokuhirom joined
[07:38] *** frettled joined
[07:38] *** Pleiades` joined
[07:38] *** timotimo joined
[07:38] *** ruoso_ joined
[07:38] *** jfried joined
[07:38] *** PZt joined
[07:38] *** JoaquinFerrero joined
[07:38] *** DarthGandalf joined
[07:38] *** robinsmidsrod joined
[07:38] *** nyuszika7h joined
[07:38] *** Ulti joined
[07:38] *** Khisanth joined
[07:38] *** frdmn joined
[07:38] *** huf joined
[07:38] *** ivan``_ joined
[07:38] *** dylanwh joined
[07:38] *** Teratogen joined
[07:38] *** sergot joined
[07:38] *** danaj joined
[07:38] *** jtpalmer joined
[07:38] *** atrodo joined
[07:38] *** Nom- joined
[07:38] *** [Coke] joined
[07:38] *** labster joined
[07:38] *** geekosaur joined
[07:38] *** cibs joined
[07:38] *** verne.freenode.net sets mode: +v camelia

[07:38] *** mls joined
[07:38] *** baest joined
[07:38] *** BooK joined
[07:38] *** takesako______ joined
[07:38] *** avuserow joined
[07:38] *** __sri joined
[07:38] *** rafl joined
[07:38] *** nwc10 joined
[07:38] *** ingy joined
[07:38] *** rom1504 joined
[07:38] *** tomaw joined
[07:38] *** wtw joined
[07:38] *** Grrrr joined
[07:38] *** mattp__ joined
[07:38] *** charsbar_______2 joined
[07:38] *** hugme joined
[07:38] *** gfldex joined
[07:38] *** anocelot joined
[07:38] *** pnu_ joined
[07:38] *** lestrrat joined
[07:38] *** Yappo_________ joined
[07:38] *** revdiablo joined
[07:38] *** flussence joined
[07:38] *** mathw joined
[07:38] *** nebuchadnezzar joined
[07:38] *** Bucciarati joined
[07:38] *** TimToady joined
[07:38] <FROGGS> ohh damnit, GlitchMr splintered /o\

[07:39] *** autumn joined
[07:40] *** xinming left
[07:40] *** abnorman left
[07:42] <lizmat> lue++ for fixing stuff in S99 and teaching me the correct way of doing intra document links

[07:42] *** Teratogen left
[07:42] *** Teratogen joined
[07:43] *** xinming joined
[07:44] *** preflex left
[07:46] *** preflex joined
[07:46] *** ChanServ sets mode: +v preflex

[07:49] *** xinming left
[07:49] *** fhelmberger joined
[07:50] *** xinming joined
[07:55] *** Bucciarati left
[08:00] * lizmat is wondering whether we should write S99 in pod6 and use the =defn markers  

[08:01] <dalek> nqp: f63cafa | sorear++ | src/vm/jvm/runtime/org/perl6/nqp/jast2bc/AutosplitMethodWriter.java:

[08:01] <dalek> nqp: Break switches with more than 256 cases into bite-sized pieces to make them more palatable to the list splitter

[08:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f63cafaa67

[08:01] <lizmat> it would give timotimo something else to test his work on

[08:03] <sorear> heehee

[08:05] *** Bucciarati joined
[08:16] *** autumn left
[08:17] *** sivoais left
[08:18] *** sivoais joined
[08:19] *** autumn joined
[08:20] <dalek> specs: 9b12b4c | (Elizabeth Mattijsen)++ | S99-glossary.pod:

[08:20] <dalek> specs: Some more additions / refinements / explanations

[08:20] <dalek> specs: review: https://github.com/perl6/specs/commit/9b12b4c82b

[08:20] *** nwc10 left
[08:20] *** nwc10 joined
[08:20] <dalek> nqp: 4da2c35 | sorear++ | src/vm/jvm/runtime/org/perl6/nqp/jast2bc/AutosplitMethodWriter.java:

[08:20] <dalek> nqp: transfer try/catch and line number info to the fragments

[08:20] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4da2c3501f

[08:33] *** dayangkun left
[08:37] *** dayangkun joined
[08:42] <jnthn> morning, #perl6

[08:45] <sorear> morning jnthn

[08:45] <FROGGS> morning

[08:45] <sorear> jnthn: [Coke] saw the pass rate fall off a cliff yesterday.  Might it be something I did?

[08:45] <FROGGS> jnthn: you might be interested in my comment at the bottom: https://rt.perl.org/rt3/Ticket/Display.html?id=116613

[08:45] <jnthn> sorear: Well, I've been practically useless for the last couple of days...

[08:46] <jnthn> sorear: Which means it's possible I've committed next to nothing or something stupid... :)

[08:46] <sorear> 19:54 < [Coke]> rakudo.jvm down to 4.48%. :(

[08:46] <jnthn> sorear: Looks like my last commit was on the 23rd.

[08:47] <jnthn> So I'm guessing falling off a cliff yesterday isn't anything I did.

[08:48] <jnthn> FROGGS: augmenting the subtype causes method cache recomputation, which is the thing that needs to happen.

[08:48] <FROGGS> jnthn: that is what I thought :o)

[08:49] <jnthn> I didn't forget the issue, it just didn't make it too close to the top of my todo list yet.

[08:50] <sorear> Whose bright idea was it for the type argument to anewarray to be the *component* type, while the type argument to multianewarray is the *finished array* type and the argument to newarray is something COMPLETELY DIFFERENT?

[08:51] <jnthn> Strangely *inconsistent*.

[08:51] *** fridim_ left
[08:51] * jnthn tripped over that at least once.

[08:51] <TimToady> A foolish inconsistency is the hobgoblin of large minds.  :)

[08:52] <jnthn> mmmm...hobgoblin!

[08:52] <jnthn> ...but not at this time of day :)

[08:53] <sorear> ?

[08:53] *** SamuraiJack left
[08:53] <TimToady> do they make beer from hobgoblins now? :)

[08:54] <sorear> .oO( do they make beer from animals, period? )

[08:54] *** SamuraiJack joined
[08:54] <jnthn> http://en.wikipedia.org/wiki/Hobgoblin_(beer)#Hobgoblin :)

[08:55] *** dakkar joined
[08:56] *** spider-mario joined
[08:56] <sorear> i see.

[08:57] <FROGGS> jnthn: that was not really a reminder for that issue, I just wanted to hear you thoughts... like "yes, that could be the fix, or: no, there is some underlying issue"...

[08:57] <jnthn> FROGGS: Well, the deep issue is it needs some kind of weak reference-y thing.

[08:57] <FROGGS> ahh, k

[08:57] <jnthn> FROGGS: Otherwise, anonymous subclasses would accidentally live forever.

[08:58] <sorear> how hard would it be to add weak references to nqp?

[08:59] <jnthn> sorear: Well, I was pondering a special-cased publish/subscribe mechanism for the MOP to convey things like this, and hiding the details of how it achieves weakness, rather than actually doing real weak references.

[08:59] <jnthn> sorear: We could look at doing weak refs generally, though.

[09:00] <sorear> I think that weak refs are a pretty important language feature, I'd be +1 to doing them generally if it's not infeasible on Parrot

[09:00] <jnthn> Well, that's kinda what put me off ;)

[09:01] <jnthn> JVM has 'em though. I didn't put 'em in Moar yet, but only 'cus I haven't needed them so far.

[09:01] <sorear> how would you do pubsub without weakrefs??

[09:04] <jnthn> sorear: "great evil"

[09:05] <jnthn> sorear: There is a hook in Parrot for when something is being freed. My idea was that when an STable gets freed, it goes and unsubscribes stuff first.

[09:07] *** arlinius left
[09:12] *** dayangkun_ joined
[09:13] *** dayangkun_ left
[09:14] <sorear> jnthn: does parrot guarantee non-movement?

[09:15] <sorear> oh wait, the STable isn't garbage collected

[09:16] *** dayangkun left
[09:17] <sorear> jnthn: the p5way is to mix a role (ok, MAGIC type) into backref targets that 1. maintains a list of unmanaged backrefs 2. clears them on free

[09:22] <jnthn> sorear: yes, it doesn't move

[09:22] <jnthn> sorear: STables are GC'd too

[09:23] <jnthn> There's no global type registry

[09:24] <sorear> jnthn: I mean they're malloced, not PMCs

[09:24] <sorear> s/mean/meant/

[09:24] <jnthn> sorear: oh

[09:24] <jnthn> yes

[09:24] <jnthn> Well, they're wrapped in a PMC

[09:24] <timotimo> good * #perl6

[09:24] <jnthn> o/ timotimo 

[09:26] <jnthn> sorear: I'm not a Rakudo JVM spectest run here

[09:27] <jnthn> uh

[09:27] <jnthn> I'm *doing* a ...

[09:29] <jnthn> It's failing to look especially bad.

[09:36] *** daxim joined
[09:37] <dalek> nqp: a468f3d | sorear++ | src/vm/jvm/runtime/org/perl6/nqp/jast2bc/AutosplitMethodWriter.java:

[09:37] <dalek> nqp: Generate wrapper code

[09:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a468f3da90

[09:37] * sorear is now at the point to start trying to run fragmented code

[09:37] <sorear> surprise, surprise!  VerifyError!

[09:38] <jnthn>  /o\

[09:38] *** atroxaper left
[09:43] *** kingbeast joined
[09:43] * timotimo does a very simple first attempt at making table cells be parsed with format codes

[09:44] <timotimo> also missing for more greatness: allowing =config C<> :allow<...>

[09:45] *** ecocode left
[09:45] <jnthn> sorear: The spectest here on my machine doesn't have epic fail like in the nightly run.

[09:46] <FROGGS> unpushed code?

[09:47] <jnthn> nothing here

[09:48] <FROGGS> sad there is no error message in the test summary

[09:49] <sorear> jnthn: Unhandled exception: Can not call method 'load_setting' on a null object

[09:49] <sorear> know anything about that?

[09:51] <sorear> oh, huh

[09:51] <sorear> apparently if you do --target=jast it doesn't serialize

[09:51] <sorear> so if you jast2bc manually, you wind up with useless classes

[09:52] *** arlinius joined
[09:53] <jnthn> I think --target=jast dumps the JAST text

[09:57] <jnthn> yeah, spectest finished here. Actually ran 200 more tests since the last run I did.

[09:59] <masak> good noon, #perl6

[09:59] <yoleaux> 06:37Z <diakopter> masak: did you see http://www.youtube.com/watch?v=oo-gA9Z9SaA

[10:00] <timotimo> did he see it?!

[10:02] <masak> he had not. thanks, diakopter++ :)

[10:03] <timotimo> not from that viewpoint at least

[10:04] <timotimo> in my dream last night i held a spontaneous talk about something probably perl6 related and i made many many thinkos and when i saw the recording directly afterwards the video and audio quality was as bad as if it were recorded on VHS in the early 90s and played back today >_> (there is no point to this)

[10:07] <sorear> o/ masak

[10:07] <masak> \o

[10:07] <sorear> masak: have you seen https://en.wikipedia.org/w/index.php?title=MoarVM&action=history ?

[10:08] <masak> yes, I have.

[10:09] * jnthn tries to discern something useful from it

[10:10] <jnthn> "yet another"? :)

[10:10] <masak> yes, that doesn't sound filly NPoV :)

[10:10] <masak> fully*

[10:10] <timotimo> hum. i have a question.

[10:11] <timotimo> shouldn't i be able to just use %*LANG inside src/Perl6/Pod.nqp?

[10:11] <FROGGS> jnthn: c'mon, it is just another backend :P

[10:11] <timotimo> return %*LANG<main>.parse($t, :rule<pod_string>).ast <- shouldn't this work?

[10:12] <moritz> nothing will set the .ast unless you specify actions

[10:12] <timotimo> oooooh

[10:12] <timotimo> of course

[10:13] <timotimo> MAIN-actions should do, right?

[10:13] <timotimo> and it seems like main is wrong and should be MAIN instead

[10:13] <FROGGS> should probalby be MAIN, yes

[10:13] <FROGGS> but if you invoke it like this, it doesnt know about its actions

[10:14] <timotimo> yes, i passed :actions(%*LANG<MAIN-actions>) now

[10:14] <timotimo> i hope that's the actual instance in use, not the class

[10:15] <FROGGS> I'd try $*ACTIONS

[10:16] <sorear> $(NQP_PREIX) not work so well

[10:16] <timotimo> i see %*LANG<MAIN-actions> := $*ACTIONS.HOW.mixin... a few times

[10:17] <FROGGS> and then it is bound again to $*ACTIONS in token statement

[10:17] <sorear> ===SORRY!===

[10:17] <sorear> java.lang.RuntimeException: java.lang.RuntimeException

[10:17] <FROGGS> so maybe there is no difference

[10:18] <jnthn> sorear: I think there was a runtime exception?

[10:18] <jnthn> ;)

[10:18] <FROGGS> sorear: well, that explains it

[10:18] <sorear> i have heard, probably apocryphally, that there are prolog implementations which output "No." on any syntax error

[10:19] <FROGGS> I have heard niecza saying "WTF" :o)

[10:20] <sorear> that one's a special case in succ/pred

[10:20] <FROGGS> I see *g*

[10:20] *** Stygia joined
[10:21] <sorear> Oh hey a new one

[10:21] <sorear> ===SORRY!===

[10:21] <sorear> java.lang.ClassFormatError: Illegal class name "Ljava/lang/Object;" in class file 18A8CCE068DABA0E352F805EC10407D0764CC67F

[10:21] <sorear> slightly more useful

[10:22] <timotimo> .o(at least it's not crashing)

[10:24] <masak> is that because of the semicolon at the end?

[10:24] <sorear> masak: it's because the java virtual machine has at least four incompatible syntaxes for class names and I used the wrong one for the context

[10:24] * moritz thought that should be java.long.Object

[10:24] <moritz> *lang

[10:25] <jnthn> sorear: Argh, that is teh annoying...

[10:25] <sorear> It's actually supposed to be java/lang/Object there

[10:25] * jnthn still can't remember which syntax is wanted in various places :/

[10:26] <masak> moritz: notice the 'L' in the beginning.

[10:26] <masak> moritz: this is some kind of internal VM representation.

[10:29] <moritz> oh

[10:31] <timotimo> oh that's why it doesn't finish

[10:31] <timotimo> should always increment the index when in while loops.

[10:39] <timotimo> ah, darn

[10:39] <timotimo> i messed up the serialization somehow and am getting Cannot assign a non-Perl 6 value to a Perl 6 container

[10:39] <timotimo> turns out, serialize_aoaos isn't the right thing to use when you don't have strings, who would have known?

[10:42] <sorear> oops.  the verifier has decided that Lorg/perl6/nqp/runtime/CallFrame; and Lorg/perl6/nqp/runtime/CallFrame; can only be merged as Ljava/lang/Object;

[10:46] <sorear> oh, do I need to mention that we're now successfully creating a classfile from rx.rakudo?

[10:46] <timotimo> \o/

[10:46] <timotimo> 80% here we come.

[10:47] <masak> sorear++

[10:48] <sorear> ne'er said it *ran*. :D

[10:48] <timotimo> if it exists, it almost runs, dunnit? :)

[10:49] <timotimo> took only a couple of millenia for single-celled organism to learn to walk on land after all

[10:49] <sorear> if I could stop getting quite so many VerifyErrors, then sure :D

[10:49] <sorear> um

[10:49] <sorear> java.lang.VerifyError: Expecting a stack map frame in method 912E823799037398A506061657F7E304613B5EB4.qb_1$f4(I[Ljava/lang/Object;)I at offset 38677

[10:50] <sorear> but I'm using COMPUTE_FRAMES...

[10:52] <sorear> oh, because it's dead code

[10:53] *** Kelder is now known as Ayiko

[11:03] <jnthn> sorear++ # getting us towards rx.t

[11:04] *** pecastro left
[11:09] *** fgomez joined
[11:10] <dalek> nqp: b8d3b40 | sorear++ | / (3 files):

[11:10] <dalek> nqp: Refactor to remove asm-commons dep; install asm-tree

[11:10] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b8d3b401f0

[11:10] <sorear> Files=1, Tests=739,  1 wallclock secs ( 0.20 usr +  0.00 sys =  0.20 CPU)

[11:10] <sorear> Result: PASS

[11:11] *** pecastro joined
[11:12] <dalek> nqp: 7b14f69 | sorear++ | src/vm/jvm/runtime/org/perl6/nqp/jast2bc/AutosplitMethodWriter.java:

[11:12] <dalek> nqp: Assorted bugfixes

[11:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7b14f6937b

[11:12] <dalek> nqp: cd1ee20 | sorear++ | src/vm/jvm/runtime/org/perl6/nqp/ (2 files):

[11:12] <dalek> nqp: Automatically use method splitter if needed

[11:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/cd1ee200f2

[11:12] <dalek> rakudo/nom: d8a0e12 | sorear++ | tools/build/Makefile-JVM.in:

[11:12] <dalek> rakudo/nom: List asm-tree as a 3rdparty jar

[11:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d8a0e1236d

[11:13] <sorear> only 739?

[11:14] <sorear> jnthn: curious if it's robust enough to work on someone else's system...:D

[11:16] *** kaare_ joined
[11:17] <sorear> [Coke]: did not get around to test_summary hacking.  oopsies.

[11:17] * sorear -> sleep

[11:17] * sorear looks forward to hearing how many tests he broke

[11:17] <lizmat> gnight sorear!

[11:18] <sorear> (we're passing rx.t, after all)

[11:18] <lizmat> before you can have any eggs, you need to break some omelette!

[11:21] <jnthn> sorear: Will pull and try it :)

[11:21] <jnthn> sorear++ # this is awesome!

[11:22] <daxim> tell daxim we both, present and future self, are here

[11:22] <daxim> where's the message bot?

[11:22] <jnthn> Also...rx.t passed right off without us having to fix the regex engine anywhere?! :)

[11:23] <FROGGS> daxim: use .tell

[11:23] <daxim> .tell daxim ho hum.

[11:23] <yoleaux> daxim: Talking to yourself is the first sign of madness.

[11:23] <colomon> rn: say (1.FatRat/2**256).Num

[11:24] <camelia> rakudo 5c0dae: OUTPUT«8.63616855509444e-78␤»

[11:24] <camelia> ..niecza v24-86-g39ab531: OUTPUT«8.6361685550944446E-78␤»

[11:24] <daxim> .tell raiph learn to write better copy - http://www.useit.com/articles/inverted-pyramids-in-cyberspace/ - in long texts, put the conclusions first

[11:24] <yoleaux> daxim: I'll pass your message to raiph.

[11:24] <colomon> jvm> (1.FatRat/2**256).Num

[11:24] <colomon> 0

[11:24] * timotimo is not making progress :|

[11:25] <jnthn> .tell jntһn this is madness too

[11:25] <yoleaux> jnthn: What kind of a name is "jntһn"?!

[11:25] <jnthn> aww!

[11:26] <lizmat> .tell this is madness as well

[11:26] <yoleaux> lizmat: I'll pass your message to this.

[11:26] <tadzik> what kind of rapping name is steve

[11:26] <lizmat> who's this?

[11:27] *** xinming left
[11:27] <timotimo> tadzik: is it because you're a water-dwelling mammal?

[11:27] <timotimo> tadzik: i'm glad you're back; do you have a couple of minutes for poor ol' me?

[11:28] <tadzik> timotimo: oh, sure

[11:28] <timotimo> i've invented (haha) a function for src/Perl6/Pod.nqp called "parse_formatcode_in_text" and i'm calling it from inside table, so that each cell would theoretically have their formatting codes parsed

[11:29] <timotimo> but i've run into all sorts of errors while blindly trying to come up with something, anything that would work

[11:29] <tadzik> ah, yes

[11:29] <timotimo> the newest, strangest error is this one here: https://gist.github.com/timo/543f7b8b791cbd617b71

[11:30] <tadzik> my understanding was always that either formattingcodes should be entirely post-processed (which would help code blocks as well), or that table parser will need to call back to the grammar at some point

[11:30] <timotimo> i've tried parsing the pod_string rule before, that didn't work (that's where i copied that merge_twines + serialize_array call from)

[11:30] <timotimo> except formatting codes allow newlines where they may otherwise not be, so a little part of it needs to be in the non-post part

[11:31] <tadzik> *nod*

[11:32] *** xinming joined
[11:32] <timotimo> if this code starts working, maybe the preprocessing can be slimmed down and formattingcode generation can indeed be made post-processing

[11:33] <timotimo> that would certainly make things easier; the code blocks thing you've mentioned had me busy for quite a while with very little results

[11:33] *** btyler joined
[11:34] <timotimo> also, it seems like the code i had before that gave me this output for a simple table with cells with and without formattingcodes: Array.new(Pod::Block::Table.new(caption => Any, headers => Array.new(), config => ().hash, content => Array.new(["", "", ""], ["", "", ""], ["", "", ""])))

[11:34] <tadzik> :|

[11:35] <timotimo> it seems like i'm forgetting to reset the @newrow contents in the nested loop below, fwiw

[11:36] <colomon> sorear: with your changes, rx.t works fine on my system.  however, there's a turn of debugging output you left live in there.  :)

[11:36] <colomon> Ljava/lang/RuntimeException; : 1

[11:36] <colomon> calcSize: 0-1 : centry(69) uentry(11) base(1) uexit(14) cexit(39) total(134)

[11:36] <colomon> etc

[11:36] * colomon doesn't know if rx.t worked before or not; his Linux box has a *lot* of memory

[11:38] <timotimo> it didn't work before because the jvm aborted compilation

[11:38] <timotimo> can you make out how many tests in that suite succeed?

[11:39] <dalek> specs: f553b6c | (Elizabeth Mattijsen)++ | S99-glossary.pod:

[11:39] <dalek> specs: Some more additions and explanations

[11:39] <dalek> specs: review: https://github.com/perl6/specs/commit/f553b6c76c

[11:42] <colomon> timotimo: "in that suite"?  in roast, or some subset?

[11:42] <timotimo> sorry; rx.t

[11:42] <colomon> timotimo: 100%

[11:42] <colomon> All tests successful.

[11:42] <colomon> Files=1, Tests=739, 22 wallclock secs ( 0.08 usr  0.01 sys +  0.05 cusr  0.04 csys =  0.18 CPU)

[11:42] <colomon> Result: PASS

[11:43] <timotimo> wow, that's pretty cool :)

[11:44] <timotimo> takes us up to only 74% of rakudo, though :(

[11:46] <timotimo> can you run it on parrokudo and measure the time there as well?

[11:46] *** Teratogen left
[11:46] *** Teratogen joined
[11:47] <lizmat> parrokudo ?

[11:47] <lizmat> :-)

[11:48] *** SmokeMachine joined
[11:49] <colomon> Files=713, Tests=20529, 589 wallclock secs ( 3.64 usr  0.91 sys + 19.53 cusr  3.89 csys = 27.97 CPU)

[11:50] <colomon> that's not a significant change from the last results I got, I think

[11:50] <colomon> maybe more passing tests?  can't really tell from that.

[11:50] <timotimo> that's a massive time difference between parrot and jvm

[11:50] <timotimo> oh

[11:50] <timotimo> you were running *all* files

[11:50] * timotimo fails communication today

[11:51] <lizmat> Files=1, Tests=739, 56 wallclock secs ( 0.20 usr  0.03 sys + 54.62 cusr  1.05 csys = 55.90 CPU)  # MacBook Pro i5/Parrot

[11:52] <lizmat> 54.62 cusr compared to 0.05 cusr?  WTF ?

[11:52] <timotimo> tadzik: fwiw, my changes to the pod stuff are in timo/rakuo on the pod6-improvements branch if you want to check it locally

[11:52] <timotimo> is that "cumulative user time" or something?

[11:52] <colomon> lizmat: as I understand it, it has something to do with sorear++'s java harness for the test

[11:53] <timotimo> colomon: but it says "parrot" at the end of that line

[11:53] <lizmat> still, 22 wallclock vs 56 wallclock, that's a factor of 2.5

[11:53] <colomon> oh.

[11:53] <timotimo> you have the same computer specs as colomon?

[11:54] * colomon is going to upgrade his MBP to 10.8.x sometime this weekend, he thinks...

[11:54] <colomon> timotimo: surely not

[11:54] <timotimo> in that case the 2.5 number isn't to be trusted

[11:54] <colomon> I'm running the tests on my big linux box

[11:55] <colomon> I'm rebuilding parakudo right now

[11:59] <lizmat> parakudo ?  :-)

[12:00] * lizmat is watching the evolvement of a new term

[12:01] *** xinming left
[12:03] *** xinming joined
[12:07] *** ggoebel left
[12:08] *** snearch joined
[12:11] <daxim> http://perlmonks.org/?node_id=1040324   # commit stats

[12:11] *** Stygia left
[12:15] * timotimo will hopefully manage a non-spiky contribution pattern

[12:15] <timotimo> non-spiky as in: not falling off to nothing for very long periods of time, possibly forever

[12:17] *** bluescreen10 left
[12:20] <colomon> notice that I have made 400+ p6 commits in the last year, just mostly not to the projects he looked at in that post.

[12:20] *** ggoebel joined
[12:21] <lizmat> it doesn't matter..  it's all lies, damn lies and statistics anyway

[12:22] <colomon> Files=1, Tests=739, 22 wallclock secs ( 0.07 usr  0.00 sys + 21.04 cusr  0.33 csys = 21.44 CPU) # parrakudo

[12:22] <timotimo> although ... a tool could be devised to tally up the commits and stuff over all projects in the ecosystem

[12:22] <timotimo> there's already a "fetch all the git repos" script for the smoker

[12:22] <timotimo> so pretty much exactly the same time?

[12:23] *** atroxaper joined
[12:23] *** atroxaper left
[12:23] <timotimo> out of curiosity, can you run the rx.rakudo-jvm.t with just ./perl6 on the jvm?

[12:23] <timotimo> it'll probably turn out slower in that case :(

[12:23] <colomon> Files=1, Tests=739, 22 wallclock secs ( 0.10 usr  0.01 sys +  0.07 cusr  0.03 csys =  0.21 CPU) # rakudo jvm

[12:23] <timotimo> (again: slow startup + warmup time for the jit + many different pieces of code will not let the jit warm up properly)

[12:24] <colomon> note that neither test seems to be accurately reporting the wallclock secs

[12:24] <timotimo> that definitely went through the evalserver

[12:26] <colomon> > time ./perl6 -Ilib t/spec/S05-mass/rx.rakudo.jvm

[12:26] <colomon> real	0m21.091s

[12:26] <colomon> user	0m45.127s

[12:26] <colomon> sys	0m0.644s

[12:27] <colomon> lizmat: yes, true.  I love how he uses committers over time to see how the "live" the repos are, without looking at "

[12:27] <timotimo> that makes more sense. parallel gc and all

[12:27] <colomon> commits over time at all, which is the actual interesting thing.

[12:28] <timotimo> then again, a "commit" can be small or big, but still be just one commit

[12:28] <colomon> I think git makes it pretty easy to count the lines in a commit

[12:29] <timotimo> right, and github also shows that cumulated

[12:29] <timotimo> https://github.com/perl6/nqp/graphs/contributors?from=2009-10-04&to=2013-06-23&type=a

[12:29] <JimmyZ> Don't care about these details :P

[12:29] <colomon> the fact that we've added two entire new backends in the last year suggests that we are not fading into nothingingness!

[12:29] <JimmyZ> I did commit almost nothing

[12:30] <timotimo> very true

[12:31] <JimmyZ> and I'm not nqp/rakudo committer either

[12:38] <JimmyZ> colomon: Is there a rx.rakudo.parrot time?

[12:38] *** ggoebel left
[12:39] <lizmat> JimmyZ: I posted one a little while ago:

[12:39] <lizmat> Files=1, Tests=739, 56 wallclock secs ( 0.20 usr  0.03 sys + 54.62 cusr  1.05 csys = 55.90 CPU)  # MacBook Pro i5/Parrot

[12:40] <colomon> time ./perl6 -Ilib t/spec/S05-mass/rx.rakudo.parrot

[12:40] <colomon> real	0m20.628s

[12:40] <colomon> user	0m20.165s

[12:40] <colomon> sys	0m0.400s

[12:40] *** ggoebel joined
[12:40] <FROGGS> r: sprintf('%s') # masak, is that known? dunno if it matters thought because your sprintf will handle it right

[12:40] <JimmyZ> thanks :P

[12:40] <camelia> rakudo d8a0e1: OUTPUT«Null PMC access in get_string()␤  in sub sprintf at src/gen/CORE.setting:2769␤  in block  at /tmp/pgObleiXIk:1␤␤»

[12:41] <FROGGS> though*

[12:44] <Ulti> that perlmonks commit stat post is a bit uppety :/ why dont people bothered about perl5 version number just pull a Java and use a number not related to the version, or even just start saying Perl.18, Perl.20 with each release of Perl5

[12:46] <Ulti> Java 2 aka 1.2 that's where they got the 2 from afaik?

[12:46] <lizmat> I wonder what the git stats on Perl 5 indicate  ;-)  if you really want to compare these silly things

[12:46] *** konundra left
[12:49] *** mathw left
[12:49] *** ggoebel2 joined
[12:50] *** Timbus left
[12:50] *** ggoebel left
[12:50] *** jercos left
[12:50] *** lizmat left
[12:50] <Ulti> oh I forgot Java did the version number thing twice, with 1.5 just becoming 5.0 instead

[12:51] <Ulti> but its still Java2 even with the bigger version number :S how's that not more confusing than Perl

[12:51] *** Timbus joined
[12:51] <Ulti> though I guess its the api version rather than language

[12:52] *** lizmat joined
[12:52] *** pnu_ left
[12:53] *** mathw joined
[12:53] <colomon> lizmat: I'm pondering writing a response to that post on my blog

[12:53] *** kingbeast left
[12:53] *** pnu joined
[12:53] *** jercos joined
[12:54] <JimmyZ> https://github.com/mirrors/perl/graphs/contributors

[12:54] <JimmyZ> :D

[12:57] <lizmat> JimmyZ++

[12:57] *** konundra joined
[12:58] <timotimo>  commute^Wbikeride&

[12:59] *** xinming left
[13:00] *** ggoebel joined
[13:00] <JimmyZ> https://github.com/mirrors/perl/commits?author=TimToady

[13:00] <JimmyZ> 1988 ....

[13:01] *** xinming joined
[13:01] <lizmat> now you know why Perl 5 has been so stable  :-)

[13:01] *** ggoebel2 left
[13:04] *** Stygia joined
[13:04] <JimmyZ> limzat: I see you there too :{

[13:04] <JimmyZ> :P

[13:05] <lizmat> me?  in Perl 5 ?  I don't (want to) remember :-)

[13:07] *** xinming left
[13:09] *** xinming joined
[13:12] *** btyler left
[13:36] <timotimo> tadzik: fwiw, i think https://github.com/perl6/Pod-To-HTML/pull/2 can be merged. i *think* i have a commitbit, but i'd like someone else to look over it first. would you be so kind? :)

[13:36] <tadzik> timotimo: yes, by all means :)

[13:36] <tadzik> timotimo: but I'm at work now

[13:37] <tadzik> I give you my blessing to go ahead and merge it :)

[13:38] *** btyler joined
[13:38] <timotimo> thank you :)

[13:39] <tadzik> I've seen the results it produces, it looks cute

[13:40] <timotimo> parts of it come from my rakudo changes as well

[13:40] <timotimo> i'll just make one last run over the code to make sure i didn't break things that were okay before

[13:43] <Nom-> Evening

[13:44] <lizmat> Afternoon!

[13:44] <moritz> morning!

[13:45] <colomon> morning!

[13:45] <lizmat> :q

[13:45] * hugme hugs lizmat, good vi(m) user!

[13:45] <lizmat> thank you, but but but  :-)

[13:46] * lizmat starts wondering whether she left an i in somewhere

[13:48] <Nom-> Would discussions relating to Moe be in here or somewhere else?  Been playing with it, and it looks rather interesting :)

[13:49] <tadzik> Nom-: #moe is probably more appropriate :)

[13:49] <Nom-> I looked earlier and it seemed empty :P

[13:49] <tadzik> maybe it's on irc.perl.org then, I dunno

[13:49] <Nom-> Yeah, looks like there's one here but it's empty... i'll check in irc.perl :P

[13:51] <lizmat> rn: my Int $h; say $h.of  # is this a case of NYI, or is there a reason for this omission ?

[13:51] <camelia> niecza v24-86-g39ab531: OUTPUT«Unhandled exception: Unable to resolve method of in type Int␤  at /tmp/DC_9U2SBQO line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4579 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4580 (module-CORE @ 576) ␤  at /home/p6e…

[13:51] <camelia> ..rakudo d8a0e1: OUTPUT«No such method 'of' for invocant of type 'Int'␤  in block  at /tmp/Okl97IVzja:1␤␤»

[13:52] <lizmat> rn: my Int %h; say %h.of  # works fine for hashes and arrays

[13:52] <camelia> niecza v24-86-g39ab531: OUTPUT«Unhandled exception: Unable to resolve method of in type Hash␤  at /tmp/4Z8XlFIkN0 line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4579 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4580 (module-CORE @ 576) ␤  at /home/p6…

[13:52] <camelia> ..rakudo d8a0e1: OUTPUT«(Int)␤»

[13:52] <lizmat> well, in the rakudo case, then  :-)

[13:59] <dalek> v5: 444b94e | (Tobias Leich)++ | / (3 files):

[13:59] <dalek> v5: dispatch postcircumfix:[] to :P5[] and allow negative values

[13:59] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/444b94ecb7

[13:59] <dalek> v5: 4b18516 | (Tobias Leich)++ | lib/Perl5/Terms.pm:

[13:59] <dalek> v5: have method P5do in Any only

[13:59] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/4b185162e7

[13:59] <dalek> v5: e9abe60 | (Tobias Leich)++ | / (4 files):

[13:59] <dalek> v5: support unpack

[13:59] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/e9abe60d6e

[14:01] <lizmat> support unpack, ooo wow!

[14:02] <FROGGS> lizmat: stolen from Buf, though I added directive U

[14:02] <FROGGS> there might be a better (faster) way to do that, but this worx, so I'm fine with it for now

[14:03] <colomon> \o/

[14:07] *** bluescreen10 joined
[14:08] *** xilo joined
[14:11] *** betterworld left
[14:13] <timotimo> FROGGS: kind of surprising how few test cases that makes pass :(

[14:13] <lizmat> I thought the pack/unpack tests in p5 ran in the thousands ?

[14:14] <FROGGS> lizmat: pack has >14k

[14:14] <FROGGS> I'm working on that right now

[14:14] <FROGGS> timotimo: yeah, sometimes you get no extra pass when fixing fundamentally things :/

[14:14] <JimmyZ> FROGGS: multi method P5unpack(Str:D:), I guess you lost someting

[14:14] *** Chillance joined
[14:15] <FROGGS> for example because the tests fail because 'use version' fails

[14:15] <colomon> FROGGS: isn't that the worst?

[14:15] *** felipe joined
[14:15] *** bbkr left
[14:15] <FROGGS> JimmyZ: nope, that P5unpack gets invoked on the template, and the to-unpack string is optional (and defaults to $_)

[14:16] <FROGGS> colomon: what is the worst?

[14:16] <FROGGS> (there are many worse things)

[14:16] <colomon> FROGGS: making a significant change which doesn't register in test runs

[14:16] <colomon> "worst" is perhaps hyperbole.  ;)

[14:17] <FROGGS> well, there are things that suck more...

[14:17] <JimmyZ> shouldn't be self.p5unpack(CALLER::DYNAMIC::<$_>) ?

[14:17] *** atroxaper joined
[14:18] <FROGGS> yesterday I broke split(//,...) on the way of fixing something else, and my test_summary told me I'm going to pass 80 tests more, which was a false positive :o(

[14:18] * JimmyZ knows nothing about it, just a guess.

[14:18] <FROGGS> JimmyZ: right you are!

[14:19] * FROGGS runs spectest

[14:24] *** PacoAir joined
[14:25] *** bbkr joined
[14:26] <colomon> FROGGS: I've had situations where I spent a week or two tracking down and fixing a $work issue which seemed like it should have significant impact, only to run it against my full test suite of files and discover that, out of millions of faces, the only one it fixed was the one I was working on.  Or worse, it actually broke more things than it fixed.  :(

[14:26] *** fridim_ joined
[14:28] <FROGGS> :/

[14:28] <colomon> It's not actually worse than having your family murdered by pirates, but it still sucks.

[14:28] <FROGGS> that happens here often sadly

[14:28] <FROGGS> right

[14:29] <tadzik> ....what happens here often? Getting your family murdered by pirates?

[14:29] <[Coke]> sorear: could you changes have made rakudo.jvm consume more memory?

[14:29] <[Coke]> *your

[14:30] <FROGGS> tadzik: no :P

[14:31] <[Coke]> When I run the suite, I run it under: ulimit -t 300; ulimit -v 2048576

[14:32] *** atroxaper left
[14:32] <colomon> like this?  ulimit -t 300; ulimit -v 2048576; make spectest

[14:37] <[Coke]> no; I'm using test_summary.

[14:37] <[Coke]> here:

[14:37] *** bluescreen10 left
[14:37] <[Coke]> https://github.com/coke/perl6-roast-data/blob/master/bin/rakudo.jvm.sh

[14:38] <dalek> v5: 16d0c3a | (Tobias Leich)++ | lib/Perl5/Terms.pm:

[14:38] <dalek> v5: dispatch .P5unpack() to .P5unpack($_), spotted by JimmyZ++

[14:38] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/16d0c3a19d

[14:40] <timotimo> no results for the tests?

[14:41] *** dmol1 joined
[14:42] <timotimo> aaw

[14:42] <FROGGS> timotimo: no relevant changes

[14:45] <Ulti> is there a standard POD notation you are meant to follow for your perl6 classes? so that docs can be auto generated/introspected?

[14:46] *** xenoterracide joined
[14:46] <timotimo> just put #| and #= based pod comments everywhere, no?

[14:46] <flussence> =NAME, =AUTHOR, =VERSION

[14:47] *** snearch left
[14:47] <Ulti> I meant more something to document methods and that sort of thing, so you have a description of what they are and for

[14:47] *** benabik left
[14:47] <flussence> that would be the #= thing

[14:47] <Ulti> k

[14:48] <PerlJam> Ulti: See S26:284 for an example

[14:49] <PerlJam> .oO( Does S26 render properly yet? )

[14:49] *** benabik joined
[14:50] <tadzik> properlier, thanks to timotimo++

[14:50] <timotimo> PerlJam: http://t.h8.lv/S26-documentation.pod.html <- more or less

[14:51] <PerlJam> timotimo++ nice

[14:51] *** Rix left
[14:51] *** bluescreen10 joined
[14:52] <Ulti> PerlJam: thanks, I was reading that as you posted ;)

[14:52] <timotimo> tadzik: can you make a bit of time to help me get rid of the wrongness with the table cell serialisation? i really don't think i understand what's involved and what needs to be different

[14:52] <Ulti> the fact I was reading the POD about POD made it a bit confusing :S

[14:53] <timotimo> yeah, it looks like chaos in the source, but once you slog through the grammar (or the properly rendered version) it all starts making sense

[14:53] <timotimo> another thing is that i implemented proper support for different formatting code delimiters, with multiple < or sinlge «

[14:54] <timotimo> that should allow the pod source to become much nicer to look at

[14:54] <tadzik> timotimo: sure, if I'll be able to :)

[14:54] *** flaviusb left
[14:55] <timotimo> i'll wait for your ping

[14:55] <tadzik> okay

[14:55] <tadzik> it may be tomorrow :(

[14:56] <timotimo> i'll just have to be strong and keep my fingers off for a day ;)

[14:56] <JimmyZ> timotimo++, It's nicer

[14:56] <timotimo> maybe i'll find something else in perl6 that needs fixing/implementing?

[14:57] <JimmyZ> parse pod6 completely?

[14:57] <tadzik> that way lies madness

[14:57] *** xlat left
[14:58] <tadzik> timotimo: typed arrays? :}

[14:58] <timotimo> that way lies madness, too

[14:58] <PerlJam> shaped arrays!  :)

[14:58] <JimmyZ> S09 :D

[14:58] <timotimo> madness has many franchises all over the semantic territory nowadays

[14:58] <tadzik> hm

[14:58] <timotimo> they even offer drive-in service

[14:58] <timotimo> "madness in passing"

[14:59] <tadzik> I know, I know, oh-oh-oh

[14:59] <tadzik> look into select()/poll() on JVM :)

[14:59] *** fridim_ left
[14:59] <timotimo> i think i may need to test my [..;..;..] changes a bit further.

[15:00] *** Rix joined
[15:22] *** birdwindupbird left
[15:41] *** census joined
[15:43] *** betterworld joined
[15:45] <timotimo> r: my $aref1 = (1, 2, 3); my $aref2 = [4, 5, 6]; my $multi2 = [ $aref1, $aref2 ]; say $multi2[0] ~~ Parcel; say $multi2[0] ~~ List; # why should this be wrong?

[15:45] <camelia> rakudo d8a0e1: OUTPUT«True␤False␤»

[15:45] <timotimo> the tests seem to require the result to be a List rather than a Parcel and it's tagged as a nom regression

[15:45] <timotimo> that doesn't make sense to me.

[15:48] *** sergot left
[15:48] *** kst`` left
[15:48] *** kst`` joined
[15:49] <dalek> rakudo/nom: 9880c7b | (Elizabeth Mattijsen)++ | src/core/Any.pm:

[15:49] <dalek> rakudo/nom: Small optimisation in creating pairs

[15:49] <dalek> rakudo/nom: 

[15:49] <dalek> rakudo/nom: No reason to copy things if we can alias them.

[15:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9880c7b2d8

[15:49] *** domidumont left
[15:52] *** kaleem left
[15:52] *** sergot joined
[15:53] *** PacoLinux joined
[15:57] <timotimo> my @a = <foo bar baz quux>; say @a[*];

[15:57] <timotimo> r: my @a = <foo bar baz quux>; say @a[*];

[15:57] <camelia> rakudo d8a0e1: OUTPUT«foo bar baz quux␤»

[15:58] <timotimo> r: my @a = <foo bar baz> <qx qux quux>; say @a[*][0];

[15:58] <camelia> rakudo d8a0e1: OUTPUT«[31m===[0mSORRY![31m===[0m␤Alphanumeric character is not allowed as a delimiter␤at /tmp/MP0ynTIixZ:1␤------> [32mmy @a = <foo bar baz> <qx [33m⏏[31mqux quux>; say @a[*][0];[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta…

[15:58] <timotimo> r: my @a = <foo bar baz>, <qx qux quux>; say @a[*][0];

[15:58] <camelia> rakudo d8a0e1: OUTPUT«foo␤»

[15:58] <timotimo> r: my @a = <foo bar baz>, <qx qux quux>; say @a[][0];

[15:58] <camelia> rakudo d8a0e1: OUTPUT«foo␤»

[15:58] <timotimo> r: my @a = <foo bar baz>, <qx qux quux>; say @a[0,1][0];

[15:58] <camelia> rakudo d8a0e1: OUTPUT«foo␤»

[15:58] <timotimo> hm.

[15:59] <timotimo> locally, my @a = <foo bar baz>, <qx qux quux>; say @a[0,1;0]  # -> foo bar

[15:59] <timotimo> should @a[*;0] behave just like 0,1 in this case?

[16:00] *** FROGGS left
[16:01] <timotimo> i find the specs on this matter insufficiently slushed out, but i won't dare just tread onto pm's territory

[16:05] <dalek> specs: 9e0e656 | (Elizabeth Mattijsen)++ | S99-glossary.pod:

[16:05] <dalek> specs: Added lemma for "gimme"

[16:05] <dalek> specs: review: https://github.com/perl6/specs/commit/9e0e656627

[16:06] <lizmat> which somebody could enlighten me on that, as the word "gimme" is not in the spec

[16:06] <lizmat> specifically, what does gimme(*) mean?

[16:06] <[Coke]> lemma?

[16:06] <timotimo> "reify as many elements as you find sensible right now"?

[16:07] <lizmat> [Coke]: http://en.wikipedia.org/wiki/Headword

[16:08] <lizmat> timotimo: but, would it make sense then to later do gimme(pos+1) ?

[16:09] <timotimo> that question i cannot anscer

[16:09] <timotimo> i thought gimme(n) was "please reify at least n more elements" rather than "please reify up to the elements up to the index n"

[16:09] <timotimo> but i am absolutely not sure

[16:15] *** FROGGS joined
[16:16] <masak> o/, #perl6

[16:17] <Ulti> if I have several "multi method new" defined do they all use the same BUILD submethod?

[16:17] <Ulti> I'm having a hard time just having a different constructor for no params and a single positional parameter

[16:18] <Ulti> do I need   multi method new (Nil)  ?

[16:19] *** SamuraiJack left
[16:19] <colomon> multi method new ()

[16:19] * Ulti notices ALL of his troubles go away when he doesn't specify int32

[16:19] <colomon> dunno if you need it or not

[16:20] <colomon> but you don't need or want the Nil, as far as I know.

[16:20] *** abnorman joined
[16:20] <Ulti> colomon the root problem is just the int32, are the native types immutable?

[16:20] <masak> no, they're mutable.

[16:20] <Ulti> hmmm

[16:20] <lizmat> masak!

[16:20] <masak> lizmat! \o/

[16:21] <masak> r: my int $i = 0; say $i; $i = 32; say $i

[16:21] <camelia> rakudo 9880c7: OUTPUT«0␤32␤»

[16:21] <masak> mutable.

[16:21] *** PacoLinux left
[16:25] <Ulti> Cannot modify an immutable value Mt.pm:23 in block MT.pm:36  <-- only thing that changed was I gave   has int32 $.seed   instead of has   $.seed  https://gist.github.com/MattOates/5877912

[16:25] <Ulti> I think I'm just being super dense

[16:26] <Ulti> if I use $!seed things start to work out

[16:26] *** Stygia left
[16:28] <Ulti> also using 2013.05  R*

[16:30] <jnthn> Well, $.foo means a readonly accessor

[16:31] <lizmat> r: say $Inf

[16:31] <camelia> rakudo 9880c7: OUTPUT«Inf␤»

[16:32] *** eternaleye left
[16:32] <Ulti> jnthn and because of that you would expect that code to work by changing int32 to Int? 

[16:32] <Ulti> because it does :S

[16:33] * lizmat thinks $Inf is some kind of implementation leakage

[16:33] <jnthn> Ulti: It'd need an "is rw". That doesn't owrk on natively typed attributes yet.

[16:34] <daxim> http://enwp.org/Role_(computer_science)  http://enwp.org/Trait_(computer_programming)   what's the exact difference?

[16:35] <masak> lizmat: yes. I guess it falls out of lexical scoping.

[16:35] <masak> lizmat: ISTR '$Inf' was some temporary hack.

[16:35] <lizmat> intentionally so, it seems

[16:36] *** eternaleye joined
[16:36] <lizmat> :# XXX: Temporary definition of $Inf and $NaN until we have constants ava

[16:37] <masak> we do have constants ava

[16:37] <masak> rn: say Inf.^name

[16:37] <camelia> rakudo 9880c7, niecza v24-86-g39ab531: OUTPUT«Num␤»

[16:38] <lizmat> r: constant Inf = nqp::p6box_n(nqp::inf()); say Inf

[16:38] <camelia> rakudo 9880c7: OUTPUT«Inf␤»

[16:38] <lizmat> r: constant Inf = nqp::p6box_n(nqp::inf()); say Inf.WHAT

[16:38] <camelia> rakudo 9880c7: OUTPUT«(Num)␤»

[16:39] <lizmat> so I guess I could fix that

[16:39] *** pecastro left
[16:40] *** pecastro joined
[16:40] <lizmat> r: constant Inf := nqp::p6box_n(nqp::inf()); say Inf  # does binding make a difference?

[16:40] <camelia> rakudo 9880c7: OUTPUT«Inf␤»

[16:42] *** konundra left
[16:42] *** dmol1 left
[16:42] *** dmol joined
[16:48] *** crab2313 joined
[16:50] * [Coke] will do the daily rakudo.jvm run today with no memory ulimit and see what happens.

[16:53] <masak> lizmat: the 'constant' declaration is essentially always a binding, IIUC. even if you use assignment in the syntax.

[16:53] <lizmat> ok

[16:55] *** fhelmberger left
[16:55] <nwc10> do we have enough points yet to make pretty graphs?

[16:55] <masak> probably.

[16:56] *** dakkar left
[17:03] <dalek> specs: 2f382ff | (Elizabeth Mattijsen)++ | S99-glossary.pod:

[17:03] <dalek> specs: Add IIUC lemma

[17:03] <dalek> specs: review: https://github.com/perl6/specs/commit/2f382ff945

[17:03] <dalek> specs: a17b887 | (Elizabeth Mattijsen)++ | S99-glossary.pod:

[17:03] <dalek> specs: Add ISTR lemma

[17:03] <dalek> specs: review: https://github.com/perl6/specs/commit/a17b88705e

[17:05] *** xinming left
[17:05] <masak> hehe.

[17:05] <masak> AFAIK, DIHWIDT. :)

[17:06] *** kaleem joined
[17:07] *** xinming joined
[17:07] <lizmat> DIHWIDT ??

[17:08] *** Timbus left
[17:10] <masak> "doctor, it hurts when I do this"

[17:10] <daxim> DDG.GG ??

[17:10] <masak> LMGTFY.

[17:11] <daxim> bbq

[17:11] <lizmat> sigh

[17:11] <daxim> I got warnocked with my question about traits and roles

[17:11] *** Timbus joined
[17:12] <masak> daxim: roles in Perl 6 correspond more or less exactly to traits in Smalltalk.

[17:12] <masak> the former is based on the latter.

[17:12] <daxim> that doesn't help explain the distinction enwp makes

[17:12] <daxim> is that in error?

[17:12] <masak> the reason they were not called "traits" in Perl 6 is that that term was already taken for something else.

[17:13] <daxim> aha

[17:13] <masak> daxim: hold on, I'll skim the enwp links.

[17:14] <masak> daxim: to be honest, I'm not 100% sure Perl 6 embodies a "role-oriented programming" paradigm.

[17:14] <masak> at the very least, that's something someone would have to prove by listing what ROOP requires, and point-by-point what Perl 6 provides.

[17:15] <masak> does that answer your question? :)

[17:15] <daxim> hmmm

[17:16] <daxim> the table in lemma Role_(computer_science) implies ROP is a subset of OOP

[17:17] <daxim> I'm almost satisfied.  what are perl6 traits, then?

[17:17] <masak> ...which was either never clearly defined, or defined too many times by too many people. :)

[17:17] <masak> (OOP, that is)

[17:17] <masak> daxim: Perl 6 traits are the things where you go 'is awesome' on some declaration, fsvo 'awesome'.

[17:17] <masak> r: class A { has $.x is rw }; say "that 'is rw' is a trait"

[17:17] <camelia> rakudo 9880c7: OUTPUT«that 'is rw' is a trait␤»

[17:18] <daxim> is that the thing where you attach classnames to object instances?

[17:18] <daxim> ah, to attributes

[17:19] <masak> for example.

[17:19] <masak> there's also 'is export' on subroutine declarations.

[17:19] <masak> and 'is copy' on parameters.

[17:19] <masak> and so on et cetera

[17:20] <daxim> I'm intrigued and wish to subscribe to your newsletter

[17:20] <masak> :)

[17:23] *** konundra joined
[17:25] <dalek> specs: 5300d63 | (Elizabeth Mattijsen)++ | S99-glossary.pod:

[17:25] <dalek> specs: Add DIHWIDT, LMGTFY and warnocked

[17:25] <dalek> specs: review: https://github.com/perl6/specs/commit/5300d63a82

[17:28] * lizmat is sad:

[17:28] <lizmat> Stage optimize   :  31.366

[17:28] <lizmat> Code ref 'Numeric' does not exist in serialization context

[17:32] <lizmat> this is the diff and the error: https://gist.github.com/lizmat/5878505

[17:32] <lizmat> suggestions anyone?

[17:33] *** crab2313 left
[17:36] <timotimo> it would seem your comparisons with == would cause that, no?

[17:36] <timotimo> is there === in nqp?

[17:36] <timotimo> r: say(1 === 1)

[17:36] <camelia> rakudo 9880c7: OUTPUT«True␤»

[17:36] <timotimo> maybe that'll work?

[17:38] <lizmat> I actually changed a lot from === to ==, as I don't see why that in this case would make a difference

[17:39] <timotimo> probably because it tries to coerce? :)

[17:41] *** vk joined
[17:46] * timotimo makes postcircumfix:<[ ]> aware of empty cells inside semilists

[17:50] <lizmat> working on a patch

[17:54] <timotimo> does it seem sensible for postcircumfix:<[ ]>(\SELF, LoL $foo) to get a Nil for empty cells?

[17:55] <timotimo> it's not distinguishable from writing an actual literal Nil into the LoL

[17:58] *** berekuk left
[18:00] <lizmat> alas, replacing all == with === just gives another error, giving up for now

[18:01] <timotimo> aaw :(

[18:02] <timotimo> do you have intuition for the [ ] issue?

[18:02] *** abnorman left
[18:03] <timotimo> one: should @a[*;1] give a list of [@a[0, 1], @a[1, 1] ... @a[+@a, 1]]?

[18:03] <timotimo> two: should @a[*][1] give that same result?

[18:04] *** daxim left
[18:04] <timotimo> thr: should @a[;1] behave like the proposed solution for @a[*;1] above?

[18:05] *** berekuk joined
[18:07] <dalek> rakudo/nom: 6eab1e9 | (Elizabeth Mattijsen)++ | src/core/control.pm:

[18:07] <dalek> rakudo/nom: Some error message corrections

[18:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6eab1e9f48

[18:07] <dalek> rakudo/nom: 55025c5 | (Elizabeth Mattijsen)++ | src/core/control.pm:

[18:07] <dalek> rakudo/nom: Leave note for other people trying to use Inf/NaN as constants

[18:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/55025c51be

[18:07] <lizmat> timotimo: I have no idea

[18:13] *** kaleem left
[18:15] *** rindolf joined
[18:16] *** abnorman joined
[18:16] *** ssutch joined
[18:17] <ssutch> hallo #perl6

[18:18] *** lelf joined
[18:19] <timotimo> hey ssutch

[18:20] <ssutch> hallo timotimo 

[18:20] <timotimo> http://irclog.perlgeek.de/perl6/2013-06-27#i_7259945 - may i ask you to provide an opinion?

[18:21] *** kaleem joined
[18:22] <ssutch> yikes

[18:22] *** btyler left
[18:22] <ssutch> [@a[0, 1], @a[1, 1] ... @a[+@a, 1]] 

[18:22] *** kaleem left
[18:22] <dalek> specs: a8ed7cf | (Elizabeth Mattijsen)++ | S29-functions.pod:

[18:22] <dalek> specs: Specify "interval" function

[18:22] <dalek> specs: review: https://github.com/perl6/specs/commit/a8ed7cf730

[18:22] <timotimo> For all multidimensional array types, it is expected that cascaded subscripts: [...] will either fail or produce the same results as the equivalent semicolon subscripts: [...]

[18:23] <ssutch> ^ does that mean a list composed of elements 0, 1 from @a?

[18:23] <colomon> ssutch: not in perl 6...

[18:24] <[Coke]> rakudo.pvm still failing 29 tests.

[18:25] <[Coke]> S06-macros/opaque-ast.rakudo ; S06-macros/quasi-blocks.t ; S06-macros/unquoting.t

[18:25] <ssutch> timotimo, unfortunately i dont know

[18:25] <timotimo> er, i mistyped pretty horribly

[18:25] <timotimo> apologies

[18:26] <ssutch> not sure what a cascaded subscript or a semicolon subscript is

[18:26] <timotimo> it was meant to read [@a[0][1], @a[1][1] ... @a[+@a][1]]

[18:26] <ssutch> ahh

[18:26] <timotimo> cascaded subscript is like what i wrote one line up ^

[18:26] <timotimo> semicolon subscript is the same with ][ replaced by ;

[18:26] <ssutch> ok, simple enough

[18:27] <ssutch> in that case, what you propose seems reasonable

[18:27] <ssutch> i especially like the 2nd syntax @a[*][1] - seems pretty obvious whta you're trying to do

[18:28] <timotimo> good

[18:28] <ssutch> and so does @a[*;1] - now that i know what a semicolon subscript is

[18:28] <timotimo> because that's what i just implemented

[18:28] <timotimo> how do you feel about @a[;1]? the specs say @a[1] is the same as @a[1;]

[18:28] <timotimo> so it would only make sense that @a[;1] is also the same as @a[*;1]

[18:28] <ssutch> what is @a[1;] ?

[18:28] *** pecastro_ joined
[18:29] <ssutch> @a[1;*]?

[18:29] *** Stygia joined
[18:29] *** Stygia left
[18:29] <ssutch> if so, that makes sense enough

[18:29] *** Stygia joined
[18:29] <ssutch> what ever happened to your pod parsing for rakudo?

[18:30] *** groky joined
[18:31] * colomon is engaging in therapeutic p6 coding

[18:31] <ssutch> FROGGS, pmichaud, moritz: anyone have a quick tuit to merge this PR or request changes: https://github.com/rakudo/rakudo/pull/170

[18:31] *** pecastro left
[18:32] *** pullphing joined
[18:32] <FROGGS> ssutch: I'm not the right guy for that, sorry

[18:32] <ssutch> FROGGS: no problem :)

[18:37] *** dmol left
[18:37] *** dmol1 joined
[18:37] <lizmat> ssutch: I'm afraid I can't oversee the consequences either

[18:38] <ssutch> that's cool

[18:39] <timotimo> ssutch: i'm waiting for tadzik to help me with a tremendously hairy (at least to me) issue and then we may end up getting formatting codes in cells parsed

[18:39] *** athomason_ left
[18:39] *** athomason joined
[18:49] *** kst`` is now known as kst

[18:49] <timotimo> and if that works, we may even end up with working :allow for code blocks

[18:49] *** xilo left
[18:51] <FROGGS> timotimo: I mentioned that the quote language does the same? :P

[18:52] <timotimo> yes, and i didn't really figure out how to translate that knowledg over

[18:52] <FROGGS> :/

[18:53] <FROGGS> well, have you spotted the 'tweak' methods?

[18:53] <timotimo> no, don't think so

[18:54] <timotimo> tadzik suggested to stub out the formatting code parsing in the grammar and parse them "in post"

[18:55] *** pullphing left
[18:55] <FROGGS> I think I would make tokens for the things to allow/disallow, like for C<...>

[18:55] <FROGGS> then I would put these tokens in a role

[18:55] <timotimo> i don't think that'll fly

[18:55] <FROGGS> and if it sees a :allow rule, it would mix the right roles in

[18:56] <timotimo> there's also =config C<> :allow

[18:56] <FROGGS> hmmm, I dont know much about pod6...

[18:56] <timotimo> ;)

[18:56] <timotimo> it's easy to allow/disallow single formatting codes with a bitfield

[18:57] <timotimo> so i don't think i need to create complicated roles, especially if they end up making combinations of classes+roles at run-time and thet could be slow

[18:57] <FROGGS> from seeing your pastes it looks like you are doing too much in a single token...

[18:57] <FROGGS> that is not runtime

[18:58] <timotimo> not slow as in "i want to prematurely optimize this!" but as in "prohibitively slow"

[18:58] <FROGGS> maybe, yeah

[19:00] <timotimo> https://github.com/timo/rakudo/compare/pod6-improvements

[19:02] *** yoleaux left
[19:02] *** yoleaux joined
[19:02] *** ChanServ sets mode: +v yoleaux

[19:04] <timotimo> it looks like much, but it's only a few things :|

[19:04] <FROGGS> yeah, not too bad

[19:04] <colomon> rn: my $a = (a => 4, b => 12).Bag; my $b = (a => 1, c => 2).Bag; $a (+)= $b; say $a

[19:04] <camelia> niecza v24-86-g39ab531: OUTPUT«bag("a" => 5, "b" => 12, "c" => 2)␤»

[19:04] <camelia> ..rakudo 55025c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/gvCwivAvgU:1␤------> [32m).Bag; my $b = (a => 1, c => 2).Bag; $a [33m⏏[31m(+)= $b; say $a[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        statement end␤…

[19:04] <colomon> rn: my $a = (a => 4, b => 12).Bag; my $b = (a => 1, c => 2).Bag; $a = $a (+) $b; say $a 

[19:04] <camelia> rakudo 55025c, niecza v24-86-g39ab531: OUTPUT«bag("a" => 5, "b" => 12, "c" => 2)␤»

[19:04] <colomon> rakudobug

[19:04] <timotimo> what really blows up is when i try to come up with a way to allow code text blocks to contain formatting codes

[19:05] * colomon wonders if the masak bot is around.  ;)

[19:05] <timotimo> also, strange weirdness hapens when i try to call back from src/Perl6/Pod.nqp to the grammar

[19:06] <FROGGS> timotimo: what do you mean by "call back to the grammar"

[19:06] <FROGGS> ?

[19:06] <lizmat> alas, the masak bot seems to be absent :-)

[19:07] <timotimo> https://gist.github.com/timo/543f7b8b791cbd617b71 like that, FROGGS 

[19:07] *** yoleaux left
[19:07] *** yoleaux joined
[19:07] *** ChanServ sets mode: +v yoleaux

[19:10] *** pecastro_ is now known as pecastro

[19:11] <FROGGS> sounds like you have to box something, but I dont know what

[19:11] *** xenoterracide left
[19:11] <timotimo> box or perhaps serialize?

[19:11] <timotimo> weird thing is: nothing i put there is different from when the rule is entered normally

[19:12] <timotimo> i just give it a string to be parsed

[19:12] <dalek> perl6-roast-data: ea81904 | coke++ | / (4 files):

[19:12] <dalek> perl6-roast-data: today (automated commit)

[19:12] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/ea81904ae8

[19:12] <FROGGS> box I guess

[19:13] <[Coke]> the memory limit seems to be the issue. I left in a time limit so we don't completely go out into the weeds.

[19:13] <[Coke]> (rakudo.jvm)

[19:13] <[Coke]> # 06/27/2013 d770a94 rakudo++ (25969); niecza (82.09%); pugs (36.6%); rakudo.jvm (78.13%)

[19:13] *** Vlavv_ joined
[19:13] <timotimo> oooooooh yeah!

[19:13] <timotimo> (did rakudo regress even further? :P)

[19:14] <[Coke]> no, rakudo is holding steady at 29 failures.

[19:14] <timotimo> that's a mazing

[19:14] <[Coke]> 508 more passes for rakudo.jvm to hit 80%, assuming rakudo.pvm recovers.

[19:15] <dalek> ecosystem: 988e978 | segomos++ | META.list:

[19:15] <dalek> ecosystem: Update META.list

[19:15] <dalek> ecosystem: 

[19:15] <dalek> ecosystem: changed CSV::Parser to github repo instead of shitbucket

[19:15] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/988e9783cb

[19:15] <timotimo> the diff is too big to be displayed on github. sounds good to me :)

[19:16] <timotimo> shitbucket? wow, that's kind of harsh

[19:16] <timotimo> huh, it seems like you added a header for the latest change, but no details?

[19:17] <timotimo> oh, the diff is only so huge because of the gigantig regression in between

[19:17] <[Coke]> you can manually compare to the revision before that

[19:19] * PerlJam wonders what people have against bitbucket

[19:19] <timotimo> i've done that

[19:19] <timotimo> interesting, lots of regex tests files cancel too early because java chokes on unknown unicode stuff

[19:20] <timotimo> +java.util.regex.PatternSyntaxException: Unknown character property name {Arabic} near index 9

[19:23] *** konundra left
[19:24] *** konundra joined
[19:25] *** benabik left
[19:29] <colomon> Does DateTime parse things like this? Sun Jun 9 23:10:56 2013 -0400

[19:30] <lizmat> in p5 or p6 ?

[19:30] <colomon> p6

[19:30] <masak> no.

[19:30] <masak> nor should it, IMO.

[19:30] <colomon> why not?

[19:30] <masak> that's ecosystem stuff.

[19:31] <masak> it's culturally dependent enough not to be a core concern.

[19:31] <[Coke]> sorear++ #moar jvm passes

[19:31] <[Coke]> I could see core dates having to be iso dates, even.

[19:31] <masak> *nod*

[19:31] <masak> that's basically what we have.

[19:32] <masak> DateTime proper parses ISO 8601 datetimes.

[19:32] <segomos> PerlJam: i like bitbucket but my module isn't getting added to the list

[19:33] <PerlJam> segomos: It might be because the parser is biased towards github.

[19:33] <colomon> grumble, grumble, I can parse it myself, I suppose.

[19:33] <[Coke]> colomon: ... and put it in a module! ;)

[19:34] <colomon> [Coke]: it's one line that doesn't do anything useful other than let me extract the year.

[19:34] *** bluescreen10 left
[19:35] <segomos> PerlJam: yea that's what i was thinking too so i added github repo to my list of where to push to and i'm testing that theory

[19:36] <sorear> o/

[19:37] <colomon> \o

[19:37] <lizmat> sorear!   78%+

[19:37] <[Coke]> r: "axe bat cat".wordcase.say

[19:37] <camelia> rakudo 55025c: OUTPUT«Axe Bat Cat␤»

[19:37] <[Coke]> on the jvm, that outputs the original string.

[19:42] <sorear> something cheap we could do to get a lot more JVM passes:

[19:42] <PerlJam> segomos: start reading at https://github.com/perl6/modules.perl6.org/blob/master/web/lib/P6Project/Info.pm#L47  

[19:42] <PerlJam> :-)

[19:42] <dalek> rakudo/nom: 437d5e2 | (Elizabeth Mattijsen)++ | src/core/List.pm:

[19:42] <dalek> rakudo/nom: Simplify .elems, we have $Inf!

[19:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/437d5e2b57

[19:43] <PerlJam> where does the output of build-project-list.pl go when it runs? A page with the latest output might help people (like segomos) diagnose problems.

[19:44] <[Coke]> https://gist.github.com/coke/5879701 - top "this test file won't run" for rakudo.jvm

[19:44] <dalek> rakudo/nom: 2b77d6d | sorear++ | t/harness:

[19:44] <dalek> rakudo/nom: JVM does not need ICU for any tests

[19:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2b77d6dcd0

[19:45] <[Coke]> ah, that'll at least try to run more of them. nice.

[19:45] <segomos> PerlJam: nice find !

[19:46] <segomos> what's going on with github right now..i keep getting an angry unicorn

[19:47] <[Coke]> r: print 28690-27844

[19:47] <camelia> rakudo 55025c: OUTPUT«846»

[19:47] <[Coke]> so, that'll try that many more tests max.

[19:48] <[Coke]> sorear: I don't think that impacts test_summary.

[19:48] <lizmat> r: my @a= 0,[1,2],3; my @b=<a b c d>; say @b[@a] # not sure what to expect

[19:48] <camelia> rakudo 55025c: OUTPUT«a c d␤»

[19:48] <[Coke]> hurm, it might.

[19:49] <lizmat> r: my @a= 0,[1,2,1],3; my @b=<a b c d>; say @b[@a] # not sure what to expect

[19:49] <camelia> rakudo 55025c: OUTPUT«a d d␤»

[19:49] <timotimo> sorear: java hardfails if it doesn't find a unicode class thingie it seems

[19:49] <lizmat> r: my @a= 0,[1,2,1],3; say @a.flat

[19:49] <camelia> rakudo 55025c: OUTPUT«0 1 2 1 3␤»

[19:49] <masak> lizmat: that rhymes with what I expect, fwiw.

[19:50] <masak> lizmat: Array != LoL

[19:50] <colomon> masak!  \o/

[19:50] <timotimo> +java.util.regex.PatternSyntaxException: Unknown character block name {ArabicPresentationFormsA} near index 29

[19:50] <masak> colomon! \o/

[19:50] <timotimo> and then it says +   660 tests aborted (missing ok/not ok)

[19:50] <xilo_> compiling rakudo froze my VM :(

[19:50] <lizmat> the thing is that postcircumfix[] is doing a .flat on the positions passed

[19:50] <masak> xilo_: how much memory does your VM have available?

[19:50] <xilo_> 1.5gb

[19:51] <lizmat> r: my @a= 0,[1,2,1],3; my $a = @a.flat; say $a.map( { $_ } ).eager.Parcel

[19:51] <camelia> rakudo 55025c: OUTPUT«0 1 2 1 3␤»

[19:52] <lizmat> hmmm

[19:53] <[Coke]> timotimo: looks like java 7 should support unicode 6.0 - is ArabicPresentationFormsA newer?

[19:53] <jnthn> Which tests is tht, ooc?

[19:54] * jnthn guesses one of the S05-mass prop ones

[19:54] <[Coke]> S05-mass/properties-block.t

[19:55] <[Coke]> does perl6 have a way to say which version of unicode it's currently supporting?

[19:56] <[Coke]> because that would be awesome for properly fudging tests.

[19:57] <masak> [Coke]: I don't know about any such mechanism.

[19:58] <[Coke]> seems like it would be nice, no?

[19:58] * jnthn tries to take a look at it

[19:58] <timotimo> r: my @a = <foo bar baz>, <qx qux quux>; say @a[*][0];  #  should this be what it is?

[19:58] <camelia> rakudo 55025c: OUTPUT«foo␤»

[19:58] <[Coke]> jnthn++

[19:59] <timotimo> and if so, should @a[*;0] be the same thing?

[19:59] <[Coke]> my suspicion is that we're testing something that doesn't exist in the jvm's version of unicode.

[20:00] <masak> timotimo: it should return <foo qx>, for sure.

[20:01] <PerlJam> timotimo: and @a[*;0] should be the same as @a[*][0] according to my mental model of things

[20:01] <timotimo> the second one, for sure. the first one, though?

[20:02] <timotimo> i mean i know why [*][0] does what it does

[20:03] <timotimo> and i don't know how to make it work properly without internally parsing multiple postcircumfix:<[ ]> as a single [] with a semilist inside

[20:03] <timotimo> (in that case i suppose you can still use [*].[0] if you want the "old" behaviour)

[20:05] <sorear> [Coke]: I wonder if it might work better to edit perl6 and add -Xmx400m or something

[20:05] <[Coke]> sorear: sure, probably. the ulimit stuff was a straight ripoff of how pugs did it

[20:06] <[Coke]> anyone wants to tackle that, I'd love a pull request.

[20:06] <sorear> pull request to what?  I don't see a ulimit in test_summary

[20:06] <timotimo> maybe it's in the perl6 "script"?

[20:08] <timotimo> it could be that that only works if you declare a shaped array? ("that" being making @a[...][...][...] behave exactly like [...;...;...])

[20:08] *** arlinius left
[20:08] <dalek> nqp: b20fe7e | sorear++ | src/vm/jvm/runtime/org/perl6/nqp/jast2bc/AutosplitMethodWriter.java:

[20:08] <dalek> nqp: Turn off autosplit debug output, colomon++

[20:08] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b20fe7e9d4

[20:11] <jnthn> Seems it's a canonicalization issue

[20:12] <[Coke]> sorear: https://github.com/coke/perl6-roast-data/blob/master/bin/rakudo.jvm.sh

[20:17] *** dmol1 left
[20:18] * sorear is hopeful we'll pass 80% today

[20:18] <nwc10> and start on the second 80%? :-)

[20:19] <timotimo> at this pace, it could totally be doable in another week or two

[20:19] <nwc10> anyway, progess is awesome. Thanks for all your hard work (and jnthn's too, and everyone else)

[20:21] <[Coke]> sorear: today already ran. tomorrow. :)

[20:21] <[Coke]> oh, right, not the official one, nevermind.

[20:22] <[Coke]> s/official/github/

[20:23] * colomon thinks there's a 100 ripe for the plucking in fatrat.t...

[20:24] *** rindolf left
[20:26] <[Coke]> colomon: doooo it.

[20:27] <colomon> [Coke]: gotta $work and take care of my family.  

[20:31] <dalek> nqp: 3cfa6c3 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[20:31] <dalek> nqp: Canonicalize property names for Java regex \p{...}

[20:31] <dalek> nqp: 

[20:31] <dalek> nqp: This is enough to get S05-mass/properties-block.t running.

[20:31] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3cfa6c384a

[20:31] <jnthn> That takes that file from 10 tests before exploding to getting through all 670.

[20:31] <nwc10> awesone

[20:31] <nwc10> er, awesome

[20:31] <timotimo> 660 more attempted tests!

[20:32] <jnthn> Passing, even :)

[20:32] <timotimo> and they all work?

[20:32] <timotimo> amazing!

[20:32] <jnthn> There's one skip in there

[20:32] <jnthn> Dunno if JVM needs it

[20:34] <[Coke]> jnthn: that's probably actually 4 test files.

[20:34] <timotimo> that puts us just above 80%

[20:35] <nwc10> quick, somebody write more (spec)tests

[20:35] <timotimo> (even if rakudo unregresses)

[20:35] <[Coke]> timotimo: try s05-mass/properties-{block,derived,general,script}

[20:35] <jnthn> [Coke]: No, derived/genera/script still explode

[20:36] <timotimo> [Coke]: will do

[20:36] <lue> hello world o/

[20:36] <lizmat> lue!

[20:36] <timotimo> oh, sad to hear that

[20:36] <timotimo> but it's all still pretty awesome!

[20:36] <xilo_> has anyone got rakudo installed on arch? i've tried the aur package but it fails with some error while building. i tried editing the package to gen-parrot and gen-nqp so i can use git version, but get weird ass permission errors

[20:37] <timotimo> "you don't have ass permissions"

[20:37] *** arlinius joined
[20:38] <xilo_> <_<

[20:40] <xilo_> seriously

[20:42] *** konundra left
[20:43] *** preflex left
[20:47] <sorear> timotimo: "at this pace"?  looks like we just passed 80 a few minutes ago :D

[20:47] <colomon> sorear++

[20:47] *** xilo joined
[20:47] <colomon> jnthn++

[20:50] *** preflex joined
[20:50] *** ChanServ sets mode: +v preflex

[20:51] <flussence> .oO( at this rate we'll be passing 150% of the spectests by august )

[20:52] <timotimo> sorear: yes, we've passed 80%, even if the rakudo regression is fixed

[20:53] *** ssutch left
[20:54] <sorear> flussence: I made that joke last week

[20:55] <jnthn> .oO( at this rate we'll have made 150% of the jokes by September )

[20:55] <sorear> and probably sometime in july we'll need to think  about JStart

[20:55] <sorear> JStar

[20:58] <flussence> side question: will JVM/Moar do anything to change the thing now where I have to remember to update $PATH every time there's a parrot version change to keep panda working?

[20:58] <timotimo> oh, my. java.lang.IllegalArgumentException: sprintf only accepts ints, nums, and strs, not class __P6opaque__62 - missing some unboxing somewhere?

[20:58] <jnthn> timotimo: No, missing a proper sprintf implementation, but masak++ has been working on that

[20:59] <timotimo> ah, we've been using the one provided by parrot or something?

[20:59] <jnthn> yeah

[20:59] <timotimo> that makes a whole lot of sense

[21:01] <flussence> that annoyed me early on, when I tried to use a format string with '%1$s' in it and ended up digging in the code to see why it wouldn't work... the parrot one never did get fixed

[21:02] <timotimo> Method 'submethod_table' not found - does that sound like LHF?

[21:03] *** kaare_ left
[21:04] *** autumn left
[21:04] <dalek> nqp: 48d9276 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[21:04] <dalek> nqp: Handle Unicode script properties.

[21:04] <dalek> nqp: 

[21:04] <dalek> nqp: Gets S05-mass/properties-script.t to pass to the same degree as on

[21:04] <dalek> nqp: Rakudo Parrot.

[21:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/48d9276b13

[21:04] <jnthn> timotimo: It sounds...weird

[21:04] <jnthn> > 300 or so more passes there

[21:04] *** berekuk left
[21:05] <timotimo> t/spec/S04-declarations/my.rakudo.jvm - this is where it happens, but it' sonly worth 11 more attempted tests in this file.

[21:05] *** autumn joined
[21:05] <dalek> specs: 2eb828a | (Elizabeth Mattijsen)++ | S99-glossary.pod:

[21:05] <dalek> specs: Add lemma LHF

[21:05] <dalek> specs: review: https://github.com/perl6/specs/commit/2eb828a6dd

[21:06] *** berekuk joined
[21:07] *** bruges_ joined
[21:07] *** bruges left
[21:12] <masak> oh, there's no definition of "lexotic"? that's a shame, it's fairly well-defined in S04.

[21:12] <masak> in short: "a dynamic operation with a lexically scoped target".

[21:13] <masak> for example, "return" is lexotic. why? because it has a dynamic effect (it peels back the stack), but the thing it's returning *from* (the surrounding routine) is a lexically delimited thing.

[21:14] <timotimo> i think this is the first time i understand lexotic.

[21:14] <masak> the loop controllers like 'next' and 'last' are also lexotic.

[21:14] <masak> timotimo: \o/

[21:14] <timotimo> i didn't understand it when someone told me about lexotic take

[21:14] <lizmat> masak: patches welcome!

[21:17] <dalek> specs: b24e94b | masak++ | S99-glossary.pod:

[21:17] <dalek> specs: [S99] explain lexotic

[21:17] <dalek> specs: review: https://github.com/perl6/specs/commit/b24e94b745

[21:17] <dalek> v5: 9b30933 | (Tobias Leich)++ | lib/Perl5/warnings.pm:

[21:17] <dalek> v5: added FATAL

[21:17] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/9b30933b44

[21:17] <dalek> v5: c2a8429 | (Tobias Leich)++ | lib/Perl5/Terms.pm:

[21:17] <dalek> v5: added .P5[ ](int), I hope that it gains speed

[21:17] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/c2a8429ec7

[21:17] <dalek> v5: 0e3b756 | (Tobias Leich)++ | / (3 files):

[21:17] <dalek> v5: support ${x}-variables and fix for-loop var declaration

[21:17] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/0e3b7562d7

[21:22] <sorear> FROGGS: have you tried using multi subs instead of methods for the P5stuff?  Seems advantageous to not pollute the global namespace

[21:23] *** snoopy joined
[21:23] <FROGGS> sorear: but I would directly pollute nested perl6 blocks when I'd use subs

[21:24] <sorear> also, compile time multi dispatch with the optimizer

[21:26] *** BenGoldberg joined
[21:26] <masak> philosophical question: isn't the idea of "methods" -- attaching behavior to (classes of) data -- fairly weird?

[21:26] <FROGGS> I think it more likely that someone would call a sub by accident, then a method starting with P5 on classes like Any

[21:27] <FROGGS> masak: hmm, no?

[21:27] <[Coke]> masak: not after this many years of OO programming, no.

[21:27] <FROGGS> attaching behaviour to things it pretty nice, not weird

[21:28] <masak> Google Go presents an interesting alternative, if you ask me.

[21:28] <masak> it doesn't really have methods. it just makes it look like it does.

[21:28] <flussence> s/presents/stole from p5/ :P

[21:28] <FROGGS> can you explain?

[21:29] <masak> FROGGS: best I can do is probably link to some tutorial somewhere that explains it.

[21:29] <FROGGS> hmmm, okay, I can google that by myself :o)

[21:30] <masak> FROGGS: here: http://golang.org/ref/spec#Method_expressions

[21:30] <masak> note how the methods are outside of the struct.

[21:30] <tadzik> because they are not "struct" things

[21:30] <tadzik> you can define methods on any type

[21:31] <flussence> hm, I think D works in a similar way...

[21:31] <masak> right. they are not data.

[21:31] <tadzik> like, function types

[21:31] <masak> which means that methods are added extensively, like an open set. and so they are in fact more like functions, even if golang calls them methods.

[21:32] <masak> I... I think I like it.

[21:32] <tadzik> I really like Go. And I have the wicked satisfaction, that their module system is light years behind Perl 6

[21:32] <tadzik> maybe I expect too much of it

[21:33] <masak> in what sense is it lightyears behind?

[21:34] <tadzik> it has a list of github repos, nothing else

[21:34] <timotimo> we have a list of github repos and nothing else, too :P

[21:34] <tadzik> you're looking for a library? Which one to pick? Well, good luck looking

[21:34] <timotimo> they probably even have 100x as many as us? :)

[21:34] <tadzik> it's like googling for java libraries, pretty much

[21:34] <tadzik> timotimo: about 10x :)

[21:34] <timotimo> oh, you mean panda

[21:35] <tadzik> but we have smoketests

[21:35] <tadzik> badges

[21:35] <timotimo> indeed we do

[21:35] <tadzik> you know what to expect

[21:36] *** Timbus left
[21:36] *** Timbus joined
[21:41] <dalek> rakudo/nom: 3e58687 | (Elizabeth Mattijsen)++ | src/core/Any.pm:

[21:41] <dalek> rakudo/nom: Make []:(kv|p|k|v) work according to spec

[21:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3e586874ab

[21:43] * lue likes Perl 6 for not having "use Math;"

[21:44] * lizmat has done enough commits for today, sleep&

[21:45] <FROGGS> gnight lizmat 

[21:45] <timotimo> lue: agreed. math is way too useful to push it into some weird namespace

[21:45] <lue> good ♞ lizmat o/

[21:45] <timotimo> although it would be neat if the compiler could throw away unused things or something

[21:45] <timotimo> if that even makes sense in the architecture of rakudo

[21:46] <lue> .oO(Strangely, Go also has "use fmt;")

[21:46] <lue> timotimo: but how can else can I rely on eval(prompt("Enter a Perl 6 command: ")) ‽

[21:47] <timotimo> lue: eval would of course throw that out

[21:48] <lue> .oO( fine then.    qqx"perl6 -e '{prompt("Enter a Perl 6 comand: ")}'" )

[21:48] <timotimo> qqx is eval, too.

[21:49] <FROGGS> nope

[21:49] <FROGGS> that is shell execute

[21:50] <dalek> nqp: 4bcbdc6 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[21:50] <dalek> nqp: More canonicalizations.

[21:50] <dalek> nqp: 

[21:50] <dalek> nqp: Gets us most of S05-mass/properties-general.t (runs all that Rakudo

[21:50] <dalek> nqp: Parrot does, but 4 fail).

[21:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4bcbdc6b71

[21:50] <jnthn> Another > 500.

[21:50] <timotimo> whoa.

[21:50] <FROGGS> cool!

[21:50] *** PacoAir left
[21:57] <dalek> v5: 3698c7b | (Tobias Leich)++ | / (2 files):

[21:57] <dalek> v5: let +@array return the number of elements

[21:57] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/3698c7b981

[21:57] <FROGGS> r: say (97700 / 40515) ~ '%'

[21:57] <camelia> rakudo 2b77d6: OUTPUT«2.411453%␤»

[22:08] *** benabik joined
[22:10] <timotimo> http://pythex.org/ - such a tool for perl6 should be very doable, no?

[22:10] <timotimo> (once we get the js backend, even easier!)

[22:10] <[Coke]> jnthn: RAWR

[22:12] *** Guest1337 joined
[22:12] *** shachaf left
[22:12] *** shachaf_ joined
[22:12] *** shachaf_ left
[22:12] *** shachaf_ joined
[22:12] *** shachaf_ is now known as shachaf

[22:15] <jnthn> Unfortunately, the remaining one - for derived properties - is kinda harder.

[22:22] <lue> timotimo: emacs comes with one for elisp too (which there is *very* helpful)

[22:23] <timotimo> the coolest way to do such a thing surely is Rakudo::Debugger anyway :)

[22:24] <lue> .oO(There'd be a lot more modifier buttons under the P6 regex input)

[22:26] <timotimo> no, there would be not. there would be an input field before the /.

[22:26] <dalek> perl6-roast-data: 91a30ed | coke++ | bin/rakudo.jvm.sh:

[22:26] <dalek> perl6-roast-data: ignore memory limits for now

[22:26] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/91a30ed527

[22:31] *** Chillance left
[22:33] *** Chillance joined
[22:33] <sorear> jnthn: howso?

[22:33] <masak> 'night, #perl6

[22:34] <jnthn> sorear: They don't appear to be represented directly in any of the built-ins.

[22:35] <timotimo> i'm supposed to be programming something entirely different, but my head is generating lots of ideas for a web frontend to perl6 grammars :|

[22:35] <timotimo> hey, how good is perlito6's grammar support?

[22:39] <timotimo> apparently ... zero

[22:40] <timotimo> that's pretty weak if it's supposed to be "finished" :(

[22:42] <sorear> timotimo: pmurias is gsoccing a rakudo-js backend

[22:42] <sorear> if he fails, I'll do it

[22:43] <[Coke]> I don't think perlito6 is "finished". where did you see that?

[22:44] *** Stygia left
[22:45] <jnthn> .oO( what *won't* sorear++ do?! :D )

[22:45] <timotimo> i think i saw it in lizmats talk about the perl6 diaspora?

[22:45] <[Coke]> timotimo: I think if perlito6 was finished, I'd be spectesting it.

[22:45] * jnthn heard the same as timotimo somewhere

[22:45] <jnthn> It's possible we heard it from the same source ;)

[22:47] <sorear> [Coke]: do you still spectest pugs? :p

[22:48] <timotimo> i think it was supposed to only cover a limited subset of perl6 and perl5 respectively

[22:48] <timotimo> and it reached that

[22:51] *** spider-mario left
[22:52] <timotimo> I'll be bumping to latest pygments very soon, so we'll see this in shortly.

[22:52] <timotimo> YYYYYYYEEEEEEAAAAAHHHH

[22:53] <timotimo> \m/ pÿgṁëṅtṡ.ṙḃ \m/

[22:54] <sorear> ṗẏġṁėṅṫṡ.ṙḃ?

[22:55] <flussence> .oO( shouldn't that be :ṙḃ? )

[22:59] <timotimo> (heavy metal umlauts everywhere!)

[23:02] <[Coke]> sorear: yes.

[23:02] <[Coke]> I'm trying to get all 4 tests running on the same box.

[23:03] <[Coke]> (pugs, niecza, rakudo, rakudo.jvm)

[23:10] <colomon> Files=739, Tests=24123, 697 wallclock secs ( 4.22 usr  0.80 sys + 20.09 cusr  4.14 csys = 29.25 CPU)

[23:10] <colomon> !!!!!!!

[23:12] *** vk left
[23:12] *** ssutch joined
[23:13] <timotimo> wait. what. how?

[23:13] <timotimo> that's 93%!?!

[23:14] <[Coke]> that's tests run, not passed.

[23:15] <[Coke]> no?

[23:16] <[Coke]> ah, that's after all jnthn++'s updates?

[23:17] <[Coke]> r: print 24123-20291 - 

[23:17] <camelia> rakudo 3e5868: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/8wu2z_AqRf:1␤------> [32mprint 24123-20291 -[33m⏏[31m<EOL>[0m␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤»

[23:17] <[Coke]> r: print 24123-20291 

[23:17] <camelia> rakudo 3e5868: OUTPUT«3832»

[23:17] <[Coke]> has to be more than that, I think - that's a 3.8K difference in passing tests vs. the run earlier today.

[23:21] *** Guest1337 left
[23:26] <timotimo> 3.8K more tests passed?

[23:29] <[Coke]> Based soley on colomon's send above. no clue.

[23:30] *** Guest1337 joined
[23:31] <flussence> heh... I just did `make spectest` and it freaked out because I didn't have File::Slurp:from<perl5> installed

[23:40] <sorear> could change that to use only core modules I guess

[23:40] * sorear uses File::Slurp in everything he writes pretty much

[23:40] <timotimo> what's so special about that compared to regular slurp from perl6

[23:40] <flussence> ...it runs in perl5?

[23:41] <flussence> sorear: don't worry about it - I found it more odd that I *didn't* already have it installed

[23:42] *** daniel-s__ joined
[23:42] <timotimo> er.

[23:42] <timotimo> i meant regular slurp from perl5

[23:43] <timotimo> are they not the same?

[23:43] <flussence> the main difference is File::Slurp exists and slurp doesn't

[23:44] <sorear> timotimo: p5 doesn't *have* a slurp builtin

[23:45] <timotimo> it ... it does not?

[23:45] <sorear> timotimo: you can either use File::Slurp, or you can do the open, $/=undef, readline, close || die $! dance

[23:45] *** daniel-s left
[23:45] <sorear> no, it doesn't.

[23:49] <timotimo> :o

[23:49] <timotimo> perl6 is a nice place.

[23:51] <flussence> and yeah, those are definitely "tests run" and not "tests passed" - I'm watching a few hundred fails scroll by

[23:53] <flussence> Files=739, Tests=21324, 1317 wallclock secs ( 7.35 usr  0.46 sys + 29.14 cusr  3.25 csys = 40.20 CPU)

[23:54] <timotimo> that's a couple less

[23:54] <timotimo> ah, that's the mysterious 3k

[23:55] <flussence> my nqp was using whatever commit the parrot build was on, that's probably why

[23:55] * flussence updates

[23:57] <timotimo> maybe

[23:59] <sorear> yeah, there's an nqp fix that allows it to compile very 'long' subs

[23:59] <sorear> it still has issues with subs that have more than about 3,000 local variables

