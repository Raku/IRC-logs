[00:03] <timotimo> that was exhausting, i feel kind of drained >_<

[00:21] *** b1rkh0ff left
[00:24] *** Bucciarati joined
[00:25] *** dayangkun joined
[00:34] *** b1rkh0ff joined
[00:36] *** thou_ left
[00:41] *** stevan__ left
[00:49] *** pjcj left
[00:55] *** jaldhar joined
[00:56] *** pjcj joined
[01:07] *** For-Odin joined
[01:09] *** thou joined
[01:12] *** b1rkh0ff left
[01:12] *** anuby joined
[01:16] *** dayangkun left
[01:20] *** hypolin joined
[01:22] *** xilo_ joined
[01:46] *** Nom- left
[01:46] *** Nom- joined
[01:49] *** jaldhar left
[01:52] *** jaldhar joined
[01:55] *** bbkr_ joined
[01:55] *** bbkr left
[02:00] *** xilo_ left
[02:17] *** benabik left
[02:17] *** For-Odin left
[02:17] *** benabik joined
[02:20] *** dayangkun joined
[02:21] *** For-Odin joined
[02:39] *** For-Odin left
[02:43] *** sivoais left
[02:45] *** bluescreen100 left
[03:16] *** Pleiades` left
[03:19] *** lue left
[03:22] *** Pleiades` joined
[03:36] <timotimo> To compile on the JVM backend, QAST::VM must have an alternative 'jvm'  -  does not compute

[03:36] *** sivoais joined
[03:37] *** orafu left
[03:38] *** orafu joined
[04:05] *** lue joined
[04:15] *** For-Odin joined
[04:22] *** preflex left
[04:22] *** preflex_ joined
[04:23] *** preflex_ is now known as preflex

[04:28] *** For-Odin left
[04:29] *** noxgirl joined
[04:32] *** noxgirl is now known as autumn

[04:40] *** For-Odin joined
[04:41] *** jaldhar left
[04:46] *** Pleiades` left
[04:51] *** jaldhar joined
[04:53] *** Pleiades` joined
[04:58] *** swarles joined
[04:58] <swarles> r: "foobar" ~~ /foo<.after bar>/

[04:58] <p6eval> rakudo 35b2a9:  ( no output )

[04:58] <swarles> r: say "foobar" ~~ /foo<.after bar>/

[04:58] <p6eval> rakudo 35b2a9: OUTPUT¬´#<failed match>‚ê§¬ª

[04:59] <swarles> oh. These moments are why I dislike booting into windows

[04:59] <sorear> swarles: Are you deliberately running a regex that can never ever match?

[04:59] <swarles> I was wondering if <after> was a directive

[04:59] <swarles> since there is <before>

[04:59] <sorear> It is

[05:00] <sorear> r: say "bxr foobar" ~~ /b.r<.after foo>/

[05:00] <p6eval> rakudo 35b2a9: OUTPUT¬´#<failed match>‚ê§¬ª

[05:00] <sorear> r: say "bxr foobar" ~~ /b.r<?after foo>/

[05:00] <p6eval> rakudo 35b2a9: OUTPUT¬´#<failed match>‚ê§¬ª

[05:00] <sorear> n: say "bxr foobar" ~~ /b.r<?after foo>/

[05:00] <p6eval> niecza v24-18-gaf64300: OUTPUT¬´Match()‚ê§¬ª

[05:00] <sorear> n: say "bxr foobar" ~~ /b.r<?after foo...>/

[05:00] <sorear> r: say "bxr foobar" ~~ /b.r<?after foo...>/

[05:00] <p6eval> niecza v24-18-gaf64300: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Unsuppored elements in after list at /tmp/XOmDccn2XF line 1:‚ê§------> [32msay "bxr foobar" ~~ /b.r<?after foo...[33m‚èè[31m>/[0m‚ê§‚ê§Unhandled exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 1443 (‚Ä¶

[05:00] <p6eval> rakudo 35b2a9: OUTPUT¬´ÔΩ¢barÔΩ£‚ê§‚ê§¬ª

[05:01] <swarles> o-o

[05:04] *** rurban1 joined
[05:06] *** Exodist joined
[05:09] <lue> .oO(Wait, where did "bar" come from?)

[05:09] *** dalek left
[05:09] <lue> ah, I see.

[05:09] *** dalek joined
[05:09] *** ChanServ sets mode: +v dalek

[05:10] <lue> r: say "bxr foobar" ~~ /b.r \s b.r<?after foo>/

[05:10] <p6eval> rakudo 35b2a9: OUTPUT¬´#<failed match>‚ê§¬ª

[05:26] *** telex left
[05:27] *** telex joined
[05:37] *** telex left
[05:38] *** telex joined
[05:41] *** anuby_ joined
[05:42] *** anuby left
[05:49] *** am0c joined
[05:58] *** kaleem joined
[05:58] *** SamuraiJack joined
[06:02] *** sevin left
[06:08] *** b1rkh0ff joined
[06:09] *** vividsnow joined
[06:26] *** rurban1 left
[06:29] *** daniel-s_ joined
[06:35] *** daniel-s left
[06:35] *** cibs left
[06:36] *** vividsnow left
[06:51] *** Patterner left
[06:52] *** kaleem left
[06:55] *** Psyche^ joined
[06:55] *** Psyche^ is now known as Patterner

[07:01] *** am0c left
[07:35] *** swarles left
[07:38] *** rindolf joined
[07:43] *** rindolf left
[07:44] *** am0c joined
[07:47] *** kaleem joined
[07:51] *** kaleem left
[07:56] *** kaleem joined
[07:57] *** Timbus joined
[08:03] *** Xedus129 joined
[08:07] *** cibs joined
[08:10] *** FROGGS joined
[08:10] <FROGGS> morning

[08:11] <arnsholt> o/

[08:13] <arnsholt> jnthn: I won't break all the things if I make the natives use a different compose protocol, right?

[08:14] *** Xedus129 left
[08:15] *** thou left
[08:21] *** alec__ left
[08:29] *** brrt joined
[08:35] *** alec__ joined
[08:42] *** For-Odin left
[08:46] *** alec__ left
[08:47] <Su-Shee> good morning everyone.

[08:47] <FROGGS> good morning Su-Shee 

[08:50] *** hoelzro|away is now known as hoelzro

[08:52] *** hoelzro is now known as hoelzro|away

[08:55] *** sqirrel joined
[08:59] *** alec__ joined
[09:02] *** fgomez left
[09:03] *** fgomez joined
[09:04] <jnthn> arnsholt: For the attribute compose protocol, you can safely update CStruct to use it. For the various native types, yes, you can make them use a different compose protocol.

[09:05] <jnthn> arnsholt: Given they don't use one at all yet

[09:05] *** rindolf joined
[09:06] <arnsholt> Excellent

[09:07] <arnsholt> 'Cause then the native type compose protocol can be "pass the number of bits I'm supposed to be"

[09:09] <jnthn> arnsholt: I was thinking more a hash of stuff

[09:09] <jnthn> arnsholt: A key of which can be "bits"

[09:10] <jnthn> arnsholt: Because we may need to pass unsigned too

[09:10] <arnsholt> That's probably more future-proof, yeah

[09:11] *** dayangkun left
[09:22] *** fhelmberger joined
[09:36] *** sivoais_ joined
[09:37] *** dakkar joined
[09:42] *** brrt left
[09:43] *** Psyche^ joined
[09:47] *** Patterner left
[09:47] *** Psyche^ is now known as Patterner

[10:03] <masak> good forenoon, #perl6

[10:04] <jlaire> what's up in Perl 6 land?

[10:05] <sorear> good afternoon masak

[10:05] *** hypolin left
[10:05] * masak .oO( we may be bonkers, but we do have the same definition of "up" as everyone else ) :P

[10:05] <diakopter> masak: howdy

[10:06] <jlaire> mmkey

[10:06] <sorear> masak: my up is your sideways.

[10:06] <sorear> You're gravitationally stuck to the side of the Earth.  It's so funny.

[10:06] <diakopter> jlaire: be more specific? :)

[10:07] *** anuby_ left
[10:07] <jlaire> diakopter: I haven't followed Perl 6 in a little over a year, what have I missed? :)

[10:07] <moritz> lots of fun

[10:07] <moritz> improved error speed, error messages, cool features, modules, doc.perl6.org

[10:07] <jnthn> debugger ;)

[10:08] <moritz> a perl 6 coding contest, an advent calendar

[10:08] <nwc10> most recent fun is that jnthn has started on getting NQP to also target the JVM

[10:08] <jnthn> moritz: we...give errors more speedily? ;)

[10:08] <moritz> much sanity and much insanity :-)

[10:08] <moritz> r: class A is Ing { }

[10:08] <p6eval> rakudo 35b2a9: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§'A' cannot inherit from 'Ing' because it is unknown.‚ê§Did you mean 'Int'?‚ê§‚ê§at /tmp/3NdcQfaXhJ:1‚ê§------> ‚ê§¬ª

[10:08] <jlaire> niiice

[10:09] <nwc10> aye. Is nice.

[10:09] <moritz> see? we even have spelling correction for class names

[10:09] <FROGGS> r: class A is Ant { }

[10:09] <moritz> timotimo++ did it

[10:09] <p6eval> rakudo 35b2a9: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§'A' cannot inherit from 'Ant' because it is unknown.‚ê§Did you mean one of these?‚ê§    'Any'‚ê§    'Int'‚ê§    'int'‚ê§‚ê§at /tmp/e0Rb5FQ5IP:1‚ê§------> ‚ê§¬ª

[10:09] <nwc10> https://github.com/jnthn/nqp-jvm-prep/blob/master/docs/LHF.md

[10:09] <jlaire> nwc10: that's very interesting, too

[10:09] <FROGGS> r: say "abc".subt(0,2)

[10:09] <p6eval> rakudo 35b2a9: OUTPUT¬´No such method 'subt' for invocant of type 'Str'‚ê§  in block  at /tmp/HT_7grMRkH:1‚ê§‚ê§¬ª

[10:09] <FROGGS> hmmm

[10:10] <FROGGS> it doesnt handle methods yet

[10:10] <moritz> and it can't easily

[10:10] <FROGGS> it cant? ohh, sad

[10:10] <moritz> because at the time the error is translated into a typed exception, we only know the name of the class, we don't have the class itself

[10:11] <masak> why is that? why do we lose the class itself?

[10:11] <moritz> and since types can be lexical, we might find the wrong type, or none at all, if we try to look it up

[10:11] <moritz> masak: because parrot only thorws error strings, with no payload attached

[10:11] <moritz> well, it throws a number and string

[10:11] <masak> oh hahahah Parrot

[10:11] *** xinming_ left
[10:12] <masak> suffice it to say that our goals and ideals today differ from those ten years ago... ;)

[10:12] *** hoelzro|away is now known as hoelzro

[10:13] *** xinming joined
[10:14] *** odoacre joined
[10:17] <arnsholt> The disadvantage of coming back to a project after a long time: "Your branch and 'origin/dyncall-sized-num' have diverged, and have 2 and 509 different commit(s) each, respectively."

[10:18] <moritz> so, you merge

[10:18] <arnsholt> Yeah. I'm just not sure what those 2 commits I hadn't pushed are supposed to do

[10:18] <arnsholt> Or why I didn't push them

[10:23] <masak> moritz: I read arnsholt's thing and thought "so, you rebase". :)

[10:27] *** SmokeMachine joined
[10:30] *** SmokeMachine left
[10:36] <FROGGS> arnsholt: you could push to another repo/branch to see these commits, before merging

[10:36] <FROGGS> dont know if one can look at commits locally

[10:38] <moritz> sure one can :-)

[10:38] <FROGGS> the question is: how?

[10:38] <moritz> you can do almost anything locallz

[10:38] <moritz> s/z/y/

[10:38] <FROGGS> git is a bit to powerful for my HEAD

[10:38] <moritz> FROGGS: gitk for example

[10:39] <FROGGS> some sort of kde frontend?

[10:39] <jnthn> tk, I think

[10:40] <moritz> right

[10:40] <moritz> tk, despite the name

[10:40] <moritz> the kde thing would be kgit :-)

[10:40] <moritz> (no idea if that exists)

[10:40] <FROGGS> nope

[10:40] <FROGGS> doesnt exist

[11:09] *** Su-Shee left
[11:11] *** Su-Shee joined
[11:22] *** kaleem left
[11:48] *** wk left
[12:17] *** brrt joined
[12:34] *** vividsnow joined
[12:37] *** rindolf left
[12:37] *** rindolf joined
[12:39] *** dayangkun joined
[12:53] <arnsholt> ARGH! Python, why U no understand how Unicode works?

[12:53] <arnsholt> </vent>

[12:53] *** kivutar joined
[12:55] <hoelzro> arnsholt: what did it do wrong?

[12:55] <arnsholt> hoelzro: String literals are still ASCII even if you specify coding=utf-8 =)

[12:55] * hoelzro maintains a Python file named grievances.py for this purpose

[12:55] <arnsholt> Just had to vent

[12:55] <hoelzro> oh

[12:55] <arnsholt> =D#

[12:56] <hoelzro> arnsholt: Python 2, though?

[12:59] <arnsholt> Yah

[12:59] <hoelzro> well, at least they fixed *that* in Python 3

[13:01] <Su-Shee> now they just have to port everything to python 3 ;)

[13:01] <hoelzro> heh

[13:01] <hoelzro> I'm pretty sure that the 2-3 split is in my file ;)

[13:01] <Su-Shee> I still simply have no need for python..

[13:02] <Su-Shee> not even with my open data stuff, because there's R.

[13:02] <arnsholt> Yeah, I'm 1) a slave to my university's IT department for this, and 2) IIRC NLTK is still Python 2 only

[13:02] <hoelzro> Su-Shee: the only Python I've written lately is the Perl 6 lexer for pygments

[13:02] <arnsholt> *sigh* I really need to learn me some R

[13:02] <Su-Shee> arnsholt: like more or less every other library/framework

[13:02] <hoelzro> writing Python was ok, but it kinda gets on my nerves

[13:02] <Su-Shee> arnsholt: it's a-ma-zing. seriously.

[13:03] *** wk joined
[13:03] <Su-Shee> arnsholt: also, "learn"? you just _use_ it, it's wonderful.

[13:04] <Su-Shee> the only thing I

[13:04] <Su-Shee> hey! enter key1

[13:04] <arnsholt> PCRS =)

[13:04] <Su-Shee> the only thing I'm going to use python for will probably the NLTK.

[13:04] <brrt> Su-Shee: agreed with the R thing

[13:05] <Su-Shee> (which should have been perl a long time ago)

[13:05] <brrt> R is awesome

[13:05] <brrt> (and what is NLTK)

[13:05] <Su-Shee> brrt: have you tried shiny? the web framework?

[13:05] <Su-Shee> brrt: natural language toolkit

[13:05] <arnsholt> I'm a PhD student in a field that at least pretends to care about quantitative analysis, so R is definitely something I should invest in ^_^

[13:05] <brrt> oh, yes, that thing, is pretty nice

[13:05] <brrt> and, no

[13:05] <Su-Shee> arnsholt: we're telling you it's a matter of a weekend. :)

[13:06] <arnsholt> Excellent

[13:06] <Su-Shee> brrt: try the examples and marvel :) http://www.rstudio.com/shiny/

[13:06] <arnsholt> I'll try to get around to it at some point, then

[13:06] <arnsholt> Probably some time around May =)

[13:06] <brrt> oh, that is fr'king awesome indeed

[13:06] <brrt> you have any idea what pain it has been to statistics in a web context?

[13:07] <brrt> probably you do

[13:07] <Su-Shee> brrt: I've just started with R and had within two days a) a shiny example based on stupid simple open data and b) three charts :)

[13:07] <arnsholt> Oh, neat!

[13:07] <brrt> ive used R mostly for offline analysis

[13:07] <Su-Shee> brrt: I know web very well so I know why shiny is cool.

[13:08] <arnsholt> That is pretty much what it says on the tin. Shiny, shiny!

[13:08] <brrt> for what its worth, p6 can easily do what R does

[13:08] <Su-Shee> brrt: then all it's need is a smoothly to use framework ;)

[13:08] <Su-Shee> brrt: I like the ease of R.

[13:08] <brrt> at my university we thought some very non-programmer folks R

[13:09] <brrt> and it went pretty well

[13:09] <Su-Shee> yes, I had to look up some weird list handling/merging/greping stuff but that's all

[13:09] <Su-Shee> brrt: I totally see why. 

[13:09] *** SamuraiJack left
[13:10] <Su-Shee> brrt: the R book I have: "programming R"? happens on maybe 20 pages of 400. the rest: "just use this and that"

[13:10] <brrt> we used 'statistics using R'

[13:10] <Su-Shee> brrt: also, I'm a political scientist by education, so I see programming still from a "humanities department" point of view sometimes :)

[13:11] <Su-Shee> brrt: I have the R cookbook and R in action

[13:11] <Su-Shee> brrt: I did some chart stuff for a comparison in D3.js - which is as nice as a js lib can get - and it's still at least double the amount of code...

[13:12] <Su-Shee> arnsholt: also, in case you're interested.. R defines "lots of data, large dataset" in the tb range ;)

[13:13] <arnsholt> Always good to know

[13:13] <arnsholt> I'm in NLP, so datasets can occasionally be kinda silly in size

[13:13] <arnsholt> (Even though that's rarely a problem for me personally)

[13:13] <brrt> you know what is really, really, really a shame

[13:13] <brrt> that we can't call python code from perl

[13:14] <brrt> (i.e., NLTK code)

[13:14] <Su-Shee> brrt: no, you know what really the shame is? that python guys went and wrote those kinds of frameworks and we perl folk didn't... 

[13:14] <Su-Shee> and nltk is old.

[13:14] <Su-Shee> I've toyed with it end of the 90ies already.

[13:15] <brrt> well, most people were busy writing advertisement delivery software i guess

[13:16] <Su-Shee> still.. we had a decade to deliver.. 

[13:16] <brrt> true

[13:23] *** vividsnow left
[13:28] <arnsholt> Sigh. This return to Python reminds me of my semester of fighting Emacs =)

[13:30] <Su-Shee> I pulled the modem cable to close emacs. then I heard of vi.

[13:32] * masak .oO( because closing vi is famously simple ) :P

[13:36] *** sqirrel left
[13:36] <Su-Shee> by then I had a tutorial :)

[13:37] <Su-Shee> so I was well equipped to deal with a real unix. I knew ls, rm, mv and vi. ;)

[13:42] *** cedrvint left
[13:42] *** cedrvint joined
[13:46] *** zoomby left
[13:55] *** cedrvint left
[13:55] *** cedrvint joined
[13:56] *** cedrvint left
[14:00] *** vividsnow joined
[14:04] <hoelzro> is it possible to add arbitrary adverbs for strings?

[14:05] <hoelzro> in the style of Q:exec{...}

[14:10] *** bluescreen10 joined
[14:11] <tadzik> hello #perl6

[14:12] <hoelzro> ahoy tadzik 

[14:12] <FROGGS> hi tadzik 

[14:12] <tadzik> what a day

[14:13] *** skids left
[14:15] <timotimo> good *

[14:16] <FROGGS> hi timotimo 

[14:16] *** PacoAir joined
[14:36] *** SunilJoshi joined
[14:36] <timotimo> calling nqp nqp-jvm-cc.nqp --setting=NULL -e "nqp::say('hi from JVM')"  gives me "To compile on the JVM backend, QAST::VM must have an alternative 'jvm'". all tests pass, though. what am i doing wrong?

[14:37] <jnthn> timotimo: Using a too-old NQP

[14:37] <nwc10> oh, he beat me :-)

[14:37] <jnthn> The cross-compiler tracks NQP master very closely at the moment.

[14:37] <timotimo> OK

[14:38] *** spider-mario joined
[14:40] * jnthn digs back into $dayjob after a walk

[14:45] <arnsholt> Oh, now I see. Finally figured out my diverging histories

[14:46] <timotimo> github has a nice view for that, btw

[14:47] <arnsholt> Oh?

[14:47] <arnsholt> I didn't really want to push stuff onto github when I didn't know what kind of shape the code was in =)

[14:51] *** matija joined
[14:53] <timotimo> right, but you could have deleted it immediately ;)

[14:54] <FROGGS> is there an nqp op that tells me if a variable is readonly?

[14:54] *** SunilJoshi left
[14:56] <arnsholt> Heh. make -j 4 test install had unintended consequences (durr)

[14:56] <FROGGS> I got told not to use -j4 for install

[14:56] <FROGGS> was*

[14:59] <arnsholt> Don't know about install, but being test install, it used one job to run the tests and the remaining three to install =D

[15:03] *** kaare_ joined
[15:07] *** spider-mario left
[15:08] *** SunilJoshi joined
[15:11] *** kivutar left
[15:11] *** spider-mario joined
[15:11] * arnsholt adds printf statements to the NQP C code

[15:14] <timotimo> hum. i'm blindly copying the MAIN from rakudo-debugger, but i have no idea what most of it means. what are the command line options for, for instance? can't find all of them in man perl6 or parrot --help :|

[15:14] <moritz> there's also docs/running.pod in rakudo

[15:15] <timotimo> not helpful :(

[15:15] <timotimo> https://github.com/jnthn/rakudo-debugger/blob/master/bin/perl6-debug.nqp#L445 - talking about those

[15:16] *** stevan_ joined
[15:16] <moritz> setting is for providing a setting explicitly

[15:16] <PerlJam> timotimo: -c is compile only, -s is for an alternate setting, -I is to add to the module include path, -M is to load a module

[15:16] <moritz> I: add to include path

[15:16] <PerlJam> timotimo: (at a guess)

[15:16] <PerlJam> :-)

[15:16] <moritz> M is for loading modules

[15:17] <moritz> and -c... what PerlJam++ said

[15:17] <timotimo> and what is this mysterious "s"?

[15:17] <PerlJam> timotimo: s == string

[15:17] <timotimo> huh!

[15:17] <moritz> timotimo: and docs/running.pod does talk about -c

[15:17] <moritz> the =s is a left-over from getopts

[15:17] <timotimo> i see. never used that

[15:18] <timotimo> now it makes sense, though

[15:18] <timotimo> i thought that part was to make the compiler load a setting called "s"

[15:18] <PerlJam> timotimo: it's very similar to Perl 5's Getopt::Long

[15:18] <timotimo> never used perl5 either :P

[15:18] <PerlJam> aye, but the docs for that are readily available.

[15:19] <timotimo> good point. thanks!

[15:19] *** brrt left
[15:20] <arnsholt> jnthn: prod?

[15:28] *** rurban1 joined
[15:31] *** vividsnow left
[15:35] *** magoo joined
[15:36] *** magoo left
[15:50] <dalek> rakudo/nom: 14c1a6f | (Tobias Leich)++ | src/core/Str.pm:

[15:50] <dalek> rakudo/nom: RT #116224, Str.match and Str.subst set $/

[15:50] <dalek> rakudo/nom: 

[15:50] <dalek> rakudo/nom: In case the pattern is a regex match() and subst() will set $/.

[15:50] <dalek> rakudo/nom: If it cant match, $/ will be a #<failed_match>.

[15:50] <dalek> rakudo/nom: Setting $/ is protected by "try" because it might be readonly.

[15:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/14c1a6f58a

[15:50] *** sqirrel joined
[15:51] *** stevan_ left
[15:51] *** xenoterracide left
[15:53] <dalek> roast: 7c6bc80 | (Tobias Leich)++ | S05-substitution/subst.t:

[15:53] <dalek> roast: RT #116224 test for $/

[15:53] <dalek> roast: review: https://github.com/perl6/roast/commit/7c6bc80ae0

[15:53] *** xenoterracide joined
[15:53] *** skids joined
[15:53] *** am0c left
[15:56] *** vividsnow joined
[15:56] <dalek> roast: 0c9b948 | (Tobias Leich)++ | S05-substitution/subst.t:

[15:56] <dalek> roast: unskipping working tests

[15:56] <dalek> roast: review: https://github.com/perl6/roast/commit/0c9b9489f3

[16:02] *** rindolf left
[16:04] *** awwaiid joined
[16:05] *** Juerd left
[16:07] *** Util left
[16:07] *** hugme left
[16:08] *** dalek left
[16:08] *** PerlJam left
[16:08] *** [Coke] left
[16:09] *** p6eval left
[16:09] *** pmichaud left
[16:09] *** sergot left
[16:09] *** tadzik left
[16:10] *** Juerd joined
[16:10] *** pmichaud joined
[16:10] *** dalek joined
[16:10] *** ChanServ sets mode: +v dalek

[16:11] *** sergot joined
[16:13] *** PerlJam joined
[16:14] *** Util joined
[16:14] *** hugme joined
[16:14] *** ChanServ sets mode: +v hugme

[16:15] *** [Coke] joined
[16:15] <dalek> perl6-roast-data: 07ef9a8 | coke++ | / (4 files):

[16:15] <dalek> perl6-roast-data: today (automated commit)

[16:15] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/07ef9a8420

[16:17] *** p6eval joined
[16:17] *** ChanServ sets mode: +v p6eval

[16:17] <FROGGS> r: $/ = 42; say "abc".subst(/(.)/, {$0 x 2}); say $/

[16:18] <p6eval> rakudo 35b2a9: OUTPUT¬´4242bc‚ê§42‚ê§¬ª

[16:18] *** hash_table joined
[16:18] <FROGGS> what?

[16:18] *** stevan_ joined
[16:18] <FROGGS> r: $/ = 42; say "abc".subst(/(\w)/, {$0 x 2}); say $/

[16:18] <p6eval> rakudo 35b2a9: OUTPUT¬´4242bc‚ê§42‚ê§¬ª

[16:18] <moritz> r: $/ = 42; say "abc".subst(/(\w)/, -> $/ {$0 x 2}); say $/

[16:18] <FROGGS> r: $/ = 42; say "abc".subst(/(\w)/, {$0 xx 2}); say $/

[16:18] <p6eval> rakudo 35b2a9: OUTPUT¬´42 42bc‚ê§42‚ê§¬ª

[16:18] <p6eval> rakudo 35b2a9: OUTPUT¬´aabc‚ê§42‚ê§¬ª

[16:20] <FROGGS> r: $/ = 42; say "abc".subst(/(\w)/, {$0 x 2}, :g); say $/

[16:20] <p6eval> rakudo 35b2a9: OUTPUT¬´424242424242‚ê§42‚ê§¬ª

[16:20] <FROGGS> hmmm

[16:20] <jnthn> arnsholt: pong

[16:20] <FROGGS> r: $_ = 'a b c'; s:g[ (\w) ] = $0 x 2; say $_

[16:20] <p6eval> rakudo 35b2a9: OUTPUT¬´aa bb cc‚ê§¬ª

[16:21] <FROGGS> r: $_ = 'a b c'; s:g[ (\w) ] = $0 x 2; say $/

[16:21] <p6eval> rakudo 35b2a9: OUTPUT¬´ÔΩ¢cÔΩ£‚ê§ 0 => ÔΩ¢cÔΩ£‚ê§‚ê§¬ª

[16:21] *** sivoais left
[16:22] <FROGGS> n: say "a b c".subst(/(\w)/, {$() x 2}, :g);

[16:22] <p6eval> niecza v24-18-gaf64300: OUTPUT¬´aa bb cc‚ê§¬ª

[16:23] *** sivoais_ left
[16:23] *** sivoais joined
[16:23] <FROGGS> r: say 'a'.subst(/(.)/,{$0~$0})

[16:23] <p6eval> rakudo 35b2a9: OUTPUT¬´use of uninitialized value of type Any in string context  in block  at /tmp/vNqlx_Om0m:1‚ê§‚ê§use of uninitialized value of type Any in string context  in block  at /tmp/vNqlx_Om0m:1‚ê§‚ê§‚ê§¬ª

[16:25] <FROGGS> rakudo didnt get recompiled

[16:25] <FROGGS> :/

[16:25] <moritz> 35b2a9 looks pretty recent to me

[16:26] <FROGGS> but it works locally

[16:26] <timotimo> different nqp perhaps? ;)

[16:27] <FROGGS> I checked out NQP_REVISION

[16:27] <moritz> bah, feather is SLOOW

[16:27] <FROGGS> not my fault?

[16:27] <FROGGS> I hope

[16:27] <moritz> I have no idea, I haven't had a chance to run any diagnostics yet

[16:27] <FROGGS> 35b2a9 is from before my commit

[16:28] <moritz> load average: 13.41, 8.26, 3.92

[16:28] <FROGGS> uhhh

[16:28] *** SamuraiJack joined
[16:29] <timotimo> swappy death?

[16:29] <moritz> yes

[16:29] <moritz> it's a pugs process

[16:29] <FROGGS> \o/ not my fault \o/

[16:29] <moritz> which consumes a lot of memory on a $veryBigRange.pick test

[16:30] * moritz killed it

[16:30] <FROGGS> ... with fire

[16:30] <[Coke]> that was me, trying to figure out a failure from yesterday's run.

[16:30] <moritz> [Coke]: and my fault

[16:31] <moritz> [Coke]: in 53c8fe6a824937a1769cc7eeadb4409cde0d17eb I accidentally deleted a pugs fudge

[16:31] <moritz> along with the rakudo fudge

[16:32] <dalek> roast: 44c5f4d | moritz++ | S32-list/pick.t:

[16:32] <dalek> roast: restore pugs fudge

[16:32] <dalek> roast: review: https://github.com/perl6/roast/commit/44c5f4d622

[16:33] * moritz triggers a fresh pugs rebuild

[16:34] *** tadzik joined
[16:40] *** SunilJoshi left
[16:41] *** SunilJoshi joined
[16:41] <FROGGS> r: $/ = 42; say "abc".subst(/(\w)/, {$0 x 2}); say $/

[16:41] <p6eval> rakudo 14c1a6: OUTPUT¬´aabc‚ê§ÔΩ¢aÔΩ£‚ê§ 0 => ÔΩ¢aÔΩ£‚ê§‚ê§¬ª

[16:41] <FROGGS> r: $/ = 42; say "abc".subst(/(\w)/, {$0 x 2}, :g); say $/

[16:41] <p6eval> rakudo 14c1a6: OUTPUT¬´aabbcc‚ê§ÔΩ¢cÔΩ£‚ê§ 0 => ÔΩ¢cÔΩ£‚ê§‚ê§¬ª

[16:41] <masak> there's something oddly eerie about how removing a line of fudge can slow down the server many of us are running screen/irssi on.

[16:41] <FROGGS> yay

[16:41] <masak> it feels like a violation of the levels of reality somehow.

[16:42] <moritz> a well-placed ulimit would have prevented that

[16:43] * FROGGS .oO( and then when moritz repairs it you see the cat walking twice from right to left ... )

[16:43] <[Coke]> moritz: I wasn't running the test under ulimit by hand. the daily spec does, however.

[16:44] <moritz> [Coke]: that's a good first step

[16:45] *** rurban1 left
[16:46] *** SunilJoshi left
[16:46] *** thou joined
[16:47] *** SunilJoshi joined
[16:47] <[Coke]> let me know if there's something else that needs adding to the daily runs.

[16:48] <moritz> I'd just like to encourage users to put a ulimit of maybe 1.5G into their .bashrc or whatever

[16:48] <moritz> because it's usually the process you don't expect to blow up that kills you

[16:49] <moritz> and when does a legitimate process on feather need > 1.5G anyway?

[16:49] *** FROGGS left
[16:51] <timotimo> 1.5G should be enough for everybody!

[16:52] <moritz> on feather, yes :-)

[16:57] *** awwaiid left
[16:58] *** stevan_ left
[17:12] *** SunilJoshi left
[17:16] *** fgomez left
[17:16] *** sizz_ left
[17:16] *** fgomez joined
[17:18] *** hash_table left
[17:18] *** Chillance joined
[17:19] *** MayDaniel joined
[17:22] *** hash_table joined
[17:22] *** sizz joined
[17:24] *** FROGGS joined
[17:33] <FROGGS> r: my $s = "abc"; say $s ~~ s[d] = "e"; say $s

[17:33] <p6eval> rakudo 14c1a6: OUTPUT¬´True‚ê§abc‚ê§¬ª

[17:34] <FROGGS> n: my $s = "abc"; say $s ~~ s[d] = "e"; say $s

[17:34] <p6eval> niecza v24-18-gaf64300: OUTPUT¬´False‚ê§abc‚ê§¬ª

[17:34] <FROGGS> I have no idea how to fix that

[17:37] <FROGGS> ... since that wrong True comes from

[17:37] <FROGGS> r: my $s = "abc"; say $s.ACCEPTS( "abc" )

[17:37] <p6eval> rakudo 14c1a6: OUTPUT¬´True‚ê§¬ª

[17:38] *** hoelzro left
[17:38] *** rafl left
[17:42] *** rafl joined
[17:52] *** SamuraiJack left
[17:55] *** integral joined
[17:55] *** integral left
[17:55] *** integral joined
[17:57] *** vividsnow left
[17:57] *** hoelzro joined
[17:58] *** dakkar left
[17:59] *** hoelzro left
[17:59] *** integral left
[17:59] *** jlaire left
[17:59] *** sjn left
[18:00] *** jlaire joined
[18:04] *** Nom- left
[18:05] *** sjn joined
[18:06] <masak> FROGGS: yeah, that's kinda the problem.

[18:09] *** stevan_ joined
[18:12] *** kaleem joined
[18:12] *** Nom- joined
[18:13] *** wk left
[18:13] *** stevan_ left
[18:14] *** hoelzro joined
[18:15] *** vividsnow joined
[18:15] *** integral joined
[18:15] *** integral left
[18:15] *** integral joined
[18:17] *** kaleem left
[18:21] *** rindolf joined
[18:22] <rindolf> Hi all.

[18:23] <FROGGS> hi rindolf 

[18:23] <rindolf> FROGGS: what's up?

[18:23] <rindolf> Elections tomorrow.

[18:24] *** kaleem joined
[18:25] <FROGGS> rindolf: need to lull my kids to sleep in a bit, and thinking about an rakudo internal problem

[18:26] <FROGGS> masak: here the modified string is stored: https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Actions.pm#L5008

[18:26] <FROGGS> masak: using a special variable it might be solvable... is there a better way?

[18:26] <FROGGS> brb

[18:27] <masak> FROGGS: I might have misunderstood the issue -- but to me it feels less about "how to implement this" and more about "how to make the semantics consistent between ~~ and s[]"

[18:31] *** kaleem left
[18:39] *** fhelmberger left
[18:48] <tadzik> moritz: did you, by any chance, see the Death Star PR videos?

[18:50] *** Timbus left
[18:50] *** autumn left
[18:51] *** sivoais left
[18:51] *** MikeFair_ left
[18:52] *** MikeFair_ joined
[18:54] <arnsholt> jnthn: I've made a first attempt at implementing compose in P6int.c. From the looks of it, the function gets passed a list like the rest of the REPRs expect

[18:54] <arnsholt> Is that expected or unexpected?

[19:08] <jnthn> arnsholt: What's passing it the list, ooc?

[19:08] <jnthn> dinner, bbs

[19:08] <jnthn> feel free to gist me a patch...

[19:08] <jnthn> I need to spec these compose things a bit more...

[19:13] *** rindolf left
[19:24] <arnsholt> jnthn: I haven't gotten farther than seeing the problem, really

[19:25] <arnsholt> Had to do $dayjobby stuff =)

[19:33] <masak> 'Unknown variable $dayjobby. Did you mean: $dayjob?' :P

[19:34] *** rindolf joined
[19:34] *** japhb_ joined
[19:34] <arnsholt> =D

[19:36] *** lacx joined
[19:36] <lacx> ello perl peeps X)

[19:37] <masak> y0 lacx 

[19:38] <masak> welcome to our little cave ^^

[19:38] *** rindolf left
[19:38] *** vividsnow left
[19:38] * masak .oO( we've heard rumors that there are things beyond these shadows on the wall. can you confirm or deny this? )

[19:39] <lacx> hey masak X)

[19:39] <lacx> can neither confirm nor deny..

[19:39] <masak> dang.

[19:39] <lacx> were living in the Matrix anyway!

[19:39] <lacx> X)

[19:40] *** rindolf joined
[19:40] <lacx> I reckon If I say too much Agent Smith might come looking for me.. 

[19:40] * masak .oO( "Mr. Lacxerson..." )

[19:40] <lacx> hehe X)

[19:41] <masak> lacx: how may I serve you? you're here for Perl 6, I presume.

[19:42] <lacx> yea hehe, I actually came in with a serious question.. one you guys have heard a lot no doubt..

[19:42] <lacx> is there an ETA for an official (stable) release of Perl6?

[19:43] <masak> well, you're in the right place.

[19:43] <masak> please specify the length (in minutes) of the answer.

[19:44] <lacx> Ive got all day/night X)

[19:44] <masak> excellent. complete story it is.

[19:44] <lacx> lolzz cheers X)

[19:44] <masak> by Christmas.

[19:44] <masak> BAM!

[19:44] <masak> :P

[19:45] <masak> srsly though, it might be a while.

[19:46] <masak> of course, I'm assuming you know that we have releases going on monthly of two compilers, and have been for the past four-five years.

[19:46] <masak> so clearly *that's* not what we mean by "official (stable) release" here.

[19:46] <lacx> yea I know that X)

[19:46] <masak> right.

[19:46] <masak> so, what *do* we mean? :)

[19:46] <masak> any suggestions?

[19:46] <masak> (yes, this is an interactive story. feel free to chip in.)

[19:47] <lacx> im looking into it from the perspective of a rather llarge company/corporate client..

[19:47] <masak> right.

[19:47] <lacx> i.e. heavy use of Perl (5) right now..

[19:47] <lacx> trying to take the decision whether to start a rather large project in Perl 5, or wait for Perl 6..

[19:47] <masak> so, essentially, you want something that is as trustworthy of Perl 5, and with the same amount of features, and preferably not *much* slower.

[19:48] <diakopter> that's about 3 years away, imho

[19:48] <masak> lacx: from your last sentence, I would suggest Perl 5 immediately.

[19:48] <diakopter> (with current levels of resources)

[19:48] <lacx> yea stability and trust is key

[19:48] <masak> lacx: not because I don't like Perl 6 -- I do -- but because I think you would conserve resources right now sticking with Perl 5.

[19:49] <lacx> fair enough X)

[19:49] <lacx> cheers for your help btw all

[19:49] <masak> lacx: that said, you might want to keep an eye on Perl 6. let's say diakopter estimates right, and we're three years away. then you can spend three years learning about Perl 6.

[19:49] <masak> that will help you when we finally officially make our release by Christmas 2016 :D

[19:50] <masak> (again, assuming that's when it will happen)

[19:50] <lacx> hehe, I was also interested about what happens to Perl 5 when Perl 6 is out..

[19:50] <diakopter> "we're not just usable; we're LTLTA"

[19:50] <lacx> are they developed/supported equally?

[19:50] <masak> when Perl 6 is finally out, all Perl 5 software will spontaneously stop and refuse to ever run again. :P

[19:50] <diakopter> heh; Perl 5 has hundreds of times more resources

[19:50] <lacx> will there be an EOL/time when Perl5 is just obsolete?

[19:51] <masak> lacx: Perl 5 isn't going away anytime soon.

[19:51] <lacx> hehe ;)

[19:51] <lacx> ok thts good to know X)

[19:51] <masak> lacx: I count on being able to get Perl 5 jobs until I retire if I want.

[19:51] <masak> and I'm not that old.

[19:51] <diakopter> masak: you're old!

[19:51] <masak> :P

[19:51] <lacx> hehe oops [agewar]

[19:52] <lacx> lol X)

[19:52] <lacx> thanks for the reassurance masak X)

[19:52] <masak> no worries.

[19:52] <masak> stick around a bit, though.

[19:52] <masak> I want to demo some cool stuff for you.

[19:52] <lacx> ok cool X)

[19:53] <lacx> cheers

[19:53] <masak> r: say "Introducing... $*PERL<name>!"

[19:53] <p6eval> rakudo 14c1a6: OUTPUT¬´Introducing... rakudo!‚ê§¬ª

[19:53] <masak> r: say "hi, lacx!"

[19:53] <p6eval> rakudo 14c1a6: OUTPUT¬´hi, lacx!‚ê§¬ª

[19:54] *** eternaleye_ is now known as eternaleye

[19:54] <masak> r: sub postfix:<!>($n) { [*] 1..$n }; say 5!

[19:54] <p6eval> rakudo 14c1a6: OUTPUT¬´120‚ê§¬ª

[19:54] <masak> r: say 5! # look ma, no cheating

[19:54] <p6eval> rakudo 14c1a6: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Two terms in a row‚ê§at /tmp/58bieX4dn5:1‚ê§------> [32msay 5![33m‚èè[31m # look ma, no cheating[0m‚ê§    expecting any of:‚ê§        infix or meta-infix‚ê§        infix stopper‚ê§¬ª

[19:54] <masak> hm.

[19:55] <masak> std: say 5!

[19:55] <p6eval> std 7deb9d7: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Negation metaoperator not followed by valid infix at /tmp/DyXdT_OBxE line 1:‚ê§------> [32msay 5![33m‚èè[31m<EOL>[0m‚ê§    expecting infix or meta-infix‚ê§Parse failed‚ê§FAILED 00:00 42m‚ê§¬ª

[19:55] <masak> jnthn: rakudobuggable?

[19:55] <masak> lacx: you know about floating-point numbers, right?

[19:55] <lacx> hehe nice X)

[19:55] <lacx> yea

[19:56] <masak> lacx: and how sometimes you divide 1 by 3 and then multiply by 3 and you get something like 0.999998437

[19:56] <diakopter> I'll float your point

[19:56] *** vividsnow joined
[19:56] <lacx> yeaa

[19:56] <masak> lacx: well, Perl 6 fixes that.

[19:56] <masak> r: .say for 0, 0.1 ... 1.0

[19:56] <p6eval> rakudo 14c1a6: OUTPUT¬´0‚ê§0.1‚ê§0.2‚ê§0.3‚ê§0.4‚ê§0.5‚ê§0.6‚ê§0.7‚ê§0.8‚ê§0.9‚ê§1‚ê§¬ª

[19:57] <masak> it's *exact*.

[19:57] <lacx> wickedd

[19:57] <diakopter> taylor series would get a bit.. .unwieldy

[19:57] <masak> :P

[19:57] <masak> diakopter: you can always opt out of the exactness.

[19:58] <lacx> i do like the inclusion of strict typing X)

[19:58] <diakopter> pragma preserve_not_all_the_informations;

[19:58] <masak> lacx: oh, let's show a bit of strict typing.

[19:59] <masak> r: subset Positive of Real where { $_ > 0 }; sub f(Positive $p) { say "yay!" }; f(10)

[19:59] <p6eval> rakudo 14c1a6: OUTPUT¬´yay!‚ê§¬ª

[19:59] <masak> r: subset Positive of Real where { $_ > 0 }; sub f(Positive $p) { say "yay!" }; f(-5)

[19:59] <p6eval> rakudo 14c1a6: OUTPUT¬´Constraint type check failed for parameter '$p'‚ê§  in sub f at /tmp/Tjhmgtj2Rj:1‚ê§  in block  at /tmp/Tjhmgtj2Rj:1‚ê§‚ê§¬ª

[20:00] <lacx> niceee X)

[20:00] <lacx> must be a huge rehaul..?

[20:00] <masak> r: role Woofing { method woof { say "woof!" } }; role Barking { method bark { say "BARK!" } }; class Dog does Woofing does Barking {}; given Dog.new { .woof; .bark }

[20:00] <p6eval> rakudo 14c1a6: OUTPUT¬´woof!‚ê§BARK!‚ê§¬ª

[20:00] <masak> lacx: Perl 6 is *the* large rehaul.

[20:01] <masak> when people think of Second-System Syndrome nowadays, they think of us and shiver. :D

[20:01] <masak> except when they think about Duke Nukem Forever, but I hear that shipped...

[20:01] <lacx> hehe it could have been so good!

[20:03] <lacx> so OOP is built into the core now?

[20:03] <masak> yeah, it's very central.

[20:03] <masak> in fact, I would venture to say that we advance the state-of-the art on MOPs a bit.

[20:04] <masak> (a MOP is an OO API to the OO system)

[20:04] <nwc10> The thing that I'm most curious about, is how gradual typing is going to pan out

[20:05] <masak> nwc10: you mean performance-wise?

[20:05] <nwc10> yes

[20:05] <masak> I'd certainly spend more time putting types in my Perl 6 code if I knew there was a performance win to be had from it :)

[20:05] <jnthn> Error wise is also interesting.

[20:05] <nwc10> is it going to be "have your cake and eat it", in terms of flexibility between dynamic language, and static speed

[20:06] <jnthn> r: sub foo(Int $x) { }; foo('lol')

[20:06] <p6eval> rakudo 14c1a6: OUTPUT¬´===SORRY!===‚ê§CHECK FAILED:‚ê§Calling 'foo' will never work with argument types (str) (lines 1, 1)‚ê§    Expected: :(Int $x)‚ê§¬ª

[20:06] <jnthn> That's a compile time error.

[20:06] <masak> \o/

[20:06] <masak> lacx: have you heard about multi subs?

[20:06] <benabik> I think it's working out reasonably well performance-wise based on the usages of things like int, num, and str in Rakudo's setting.

[20:07] <benabik> (Yes, I know some of it is circularity sawing.)

[20:07] <masak> r: multi sub fib(0) { 0 }; multi sub fib(1) { 1 }; multi sub fib($n where { $n > 1 }) { fib($n-1) + fib($n-2) }; say fib(5)

[20:07] <p6eval> rakudo 14c1a6: OUTPUT¬´5‚ê§¬ª

[20:08] <masak> heh.

[20:08] <lacx> masak: no I dont X)

[20:08] <masak> r: multi sub fib(0) { 0 }; multi sub fib(1) { 1 }; multi sub fib($n where { $n > 1 }) { fib($n-1) + fib($n-2) }; say fib(8)

[20:08] <jnthn> A lot of use of natives is for performance and memory reasons.

[20:08] <p6eval> rakudo 14c1a6: OUTPUT¬´21‚ê§¬ª

[20:08] *** Vlavv_ joined
[20:08] <masak> lacx: basically, you can re-use the same name for a sub, but with different parameter lists. Perl 6 will call the right one.

[20:08] <masak> (see above)

[20:08] <masak> it gives a very Haskell feel to the language sometimes.

[20:09] <lacx> Oh yu mean Polymorphism? X)

[20:09] <lacx> cool

[20:09] <masak> polymorphism is when objects can be of different types.

[20:09] <masak> but yeah, the idea is sort of same-ish.

[20:09] <tadzik> I can never remember the meaning of "polymorphism"

[20:09] <tadzik> it always feel like something completely natural, I can't even think of a counterexample to it

[20:09] <masak> tadzik: apples and pears both going into a bowl of fruit. that's polymorphism.

[20:10] <masak> tadzik: or when you call a method on an AST node without knowing exactly what type the AST node is, just that all types have the method.

[20:10] <tadzik> yeah. Because they're like, common descendants of something

[20:10] * masak .oO( condescent of man )

[20:11] <masak> tadzik: yes. but with roles, it's no longer restricted to the inheritance hierarchy.

[20:12] <masak> r: role Fruit {}; class Apple does Fruit {}; class Pear does Fruit {}; my Fruit @bowl = Apple.new, Apple.new, Pear.new; say @bowl

[20:12] <p6eval> rakudo 14c1a6: OUTPUT¬´Apple<918830095> Apple<918853156> Pear<918865463>‚ê§¬ª

[20:12] <lacx> Ooops im thinking of overloading I think masak 

[20:12] <flussence> polymorphism is when you have a bunch of different stuff, and then you do OOP code to it and it all feels very enterprisey and vague

[20:12] <masak> lacx: yeah. multis do overloading.

[20:12] <lacx> cool X)

[20:12] <masak> lacx: in Java or C# there's no special keyword for it. in Perl 6, you have to do 'multi [sub]' or 'multi method'.

[20:13] <arnsholt> Also, in Java (and I think C#), overloaded methods are resolved at compile time. Perl 6 multis are resolved at run-time

[20:13] <masak> flussence: polymorphism is replacing switch statements by method dispatch.

[20:13] <jnthn> r: multi infix:<+>('bear', 'deer') { 'beer' }; say 1 + 1; say 'bear' + 'deer'

[20:13] <p6eval> rakudo 14c1a6: OUTPUT¬´2‚ê§beer‚ê§¬ª

[20:13] <flussence> that's a better definition :)

[20:13] <lacx> yea I know Java X)

[20:13] <masak> arnsholt: surely in some sense even in Java, methods are bound at runtime.

[20:14] <masak> arnsholt: and in C# they can be made to, if you do some crap with 'virtual'.

[20:14] <lacx> well they can be, using Reflection I think..?

[20:14] <masak> no no, not reflection.

[20:14] <masak> by default.

[20:14] <masak> dang, we should have a Java eval bot in here. :)

[20:14] <arnsholt> The type-signature bit is resolved at compile-time in Java

[20:14] <masak> (but it'd be quite some one-liners)

[20:14] <arnsholt> Which can have hilarious and confusing consequences

[20:15] <masak> :<

[20:15] <masak> well, it's 2013. it's fine to ridicule Java, I guess...

[20:15] <tadzik> kekekeke

[20:15] <tadzik> a bad example of a language shipped with this nice JVM thing, eh? ;)

[20:15] <tadzik> I still prefer it to C++

[20:15] <arnsholt> So if you have meth(A a) and meth(B b), where A is a superclass of B, which variant is called depends on the type used in your code on the variables, not the run-time type of the argument

[20:16] <tadzik> blergh

[20:16] <lacx> will you be able to use Reflection with Perl 6?!

[20:16] <tadzik> I really like how Go does this

[20:16] <felher> Not to forget about type erasure :) <3 Java ...

[20:16] <tadzik> it feels nice

[20:16] <tadzik> is Reflection another buzzword I don't get which describes stuff I know? :)

[20:16] <arnsholt> lacx: You can do all kinds of crazy stuff via the MOP, yeah

[20:17] <tadzik> it sounds similar to introspection

[20:17] <flussence> and we can certainly do that: https://github.com/flussence/perl6-XMMS2/blob/master/bin/p6xmms2#L7

[20:17] <jnthn> tadzik: it is :)

[20:17] * tadzik shakes fist at buzzwords

[20:17] <masak> lacx: the MOP is what allows you to do reflection.

[20:17] <lacx> awesome X)

[20:17] <tadzik> occam's buzzwords

[20:17] <masak> r: class Dog { method woof {} }; say Dog.^methods

[20:17] <p6eval> rakudo 14c1a6: OUTPUT¬´woof‚ê§¬ª

[20:17] <lacx> tadzik: http://en.wikipedia.org/wiki/Reflection_(computer_programming)

[20:18] <masak> lacx: see that '^'? it means "I want to do reflection now".

[20:18] <lacx> its a very powerful principle

[20:18] <tadzik> flussence: whoa, that's cool :)

[20:18] <tadzik> hm, so it's more than introspection

[20:18] <masak> flussence: heh, nice. I did something very similar in crypt.

[20:19] <flussence> .oO( that bit of code seems ripe for making into a role )

[20:19] <lacx> good for frameworks/modular systems tadzik 

[20:19] <tadzik> well, it's something that's begging to be abused

[20:19] *** sqirrel left
[20:19] <jnthn> tadzik: But it's tasty, tasty abuse. Like Grammar::Tracer. :)

[20:19] <tadzik> :D

[20:19] <tadzik> yeah :)

[20:20] <tadzik> G::Tracer is supercool

[20:21] <felher> arnsholt: @method(A a)... : If this would use the runtime types, there is no need for such beautiful patterns like the visitor pattern... Wouldn't that be awkward ;)

[20:21] <lacx> anything and everything is open for abuse really..

[20:21] <masak> that's the spirit!

[20:21] <masak> lacx: I gave a talk about that on the last YAPC:EU.

[20:22] *** Rotwang joined
[20:22] <lacx> masak: will have to give it a go X)

[20:22] <masak> you can download Perl 6 from here: http://perl6.org

[20:22] <arnsholt> felher: Yeah, that'd be a real shame! ^_^

[20:22] <lacx> how are you going to promote Perl 6 usage? or just gonna let it be organic..?

[20:23] <masak> lacx: well, we have to finish it first... :)

[20:23] <jnthn> imho, the best promotion is people building nice things and getting stuff done in it :)

[20:24] *** bruges joined
[20:24] <lacx> masak: I mean, a lot of ppl might be dependent on Perl5 code and might be unwilling to make the switch?

[20:24] <Rotwang> hi

[20:24] <masak> lacx: they don't have to.

[20:24] <masak> Rotwang: oh hai

[20:25] <Rotwang> I have a question about building rakudo, what is the appropriate channel for that?

[20:25] <masak> lacx: especially people with lots of existing code I have lots of sympathy for.

[20:25] <arnsholt> This is a good place for all things Rakudo

[20:25] <masak> lacx: maybe they would be happier just interfacing with newer Perl 6 code in some way.

[20:25] <nwc10> End Of Life on anything open source is semi-meaningless. It's not like anyone can forbid you from supporting it yourself, or paying someone *else* to support it for you

[20:25] <lacx> for sure jnthn 

[20:25] *** bruges_ left
[20:26] <nwc10> not like closed source, where you don't get those choices - support is only from the original vendor

[20:28] <Rotwang> rakudo version: 2012.12, parrot version: 4.10.0, nqp version: 2012.12, 64 bit linux, build hangs on: 

[20:28] <Rotwang> ./perl6 --setting=NULL --optimize=3 --target=pir --stagestats --output=src/gen/CORE.setting.pir src/gen/CORE.setting

[20:28] <Rotwang> Stage start      :   0.000

[20:28] <Rotwang> how can I debug it?

[20:28] <nwc10> is it swapping?

[20:28] <nwc10> IIRC it needs about 1G

[20:28] <Rotwang> yes!

[20:29] <lacx> masak: my company has lotss!

[20:29] <Rotwang> nwc10: that was brilliant [;

[20:29] <Rotwang> so how much ram do I need to build rakudo?

[20:29] <nwc10> Rotwang: it might be obvious, but that question has been asked before

[20:30] <nwc10> for a 64 bit system, last I measured, I think it peaks about 1G

[20:30] <masak> lacx: yes, and so do many other companies. it's not self-evident at all that all that Perl 5 code should be re-written.

[20:30] <lacx> Rotwang: perms?

[20:30] <jnthn> 64-bit builds will happily swallow around 1GB.

[20:30] <nwc10> for 32 bit, the peak is something like .5G

[20:30] <jnthn> And...yes, that.

[20:30] <Rotwang> lacx: perms?

[20:30] <arnsholt> I think 1G to 1.2G on my OS X last time I checked

[20:30] <nwc10> if you don't have that much, then the build will swap

[20:30] <arnsholt> Rotwang: How long did you leave it for?

[20:30] <nwc10> it does complete, given time. Maybe a *lot* of time.

[20:31] <arnsholt> It can easily take two minutes

[20:31] <masak> om nom nom swap

[20:31] <tadzik> hehe, two minutes

[20:31] <nwc10> good point

[20:31] <Rotwang> arnsholt: a few hours

[20:31] <tadzik> you guys have fast machines

[20:31] <nwc10> it can take a couple of minutes *without* swapping.

[20:31] <tadzik> true that

[20:31] * arnsholt blushes

[20:31] <tadzik> Rotwang: is that the freshest build around?

[20:31] <tadzik> I mean, git HEAD and all that

[20:31] <arnsholt> Right, at the hours mark, you're probably swapping

[20:32] <Rotwang> tadzik: no, rakudo version: 2012.12, parrot version: 4.10.0, nqp version: 2012.12

[20:32] *** bluescreen100 joined
[20:32] <Rotwang> ok it took ~900MB of memory

[20:33] <Rotwang> thanks guys, now I see what is going on

[20:33] <Rotwang> actually I feel a bit ashamed that I didn't check memory consumption

[20:33] <Rotwang> at first

[20:33] <arnsholt> It's an easy thing to overlook

[20:34] <arnsholt> Rakudo is really greedy when it comes to memory

[20:34] <jnthn> It's less greedy than it used to be. At least the trend is in the right direction. :)

[20:34] <arnsholt> Yeah, the trend is definitely good

[20:34] <jnthn> But yeah, needs more dieting :)

[20:35] <arnsholt> And compiling compilers is pretty resource-intensive. As anyone who's built GCC from source knows

[20:36] *** bluescreen10 left
[20:36] <felher> indeed.

[20:41] *** kaare_ left
[20:44] <tadzik> heh, I extended my laptop's RAM from 2 to 4 GBs for Rakudo's sake :)

[20:44] <tadzik> it's a lot better these days

[20:45] <tadzik> when nom was in the early days I was actually shutting down all the other programs to prevent it from swapping that never ended

[20:45] <flussence> mine can do it (just about) in 1GB

[20:47] *** xenoterracide left
[20:47] *** bluescreen__ joined
[20:50] *** bluescreen100 left
[20:53] *** vividsnow left
[20:55] *** rindolf left
[20:55] *** rindolf joined
[20:59] *** snearch joined
[21:00] *** MikeFair_ left
[21:02] *** Rotwang left
[21:09] <lue> hello o/

[21:11] <masak> lue! \o/

[21:14] *** awwaiid joined
[21:15] <lue> ooc, has any more discussion occurred on S32::Temporal that I missed?

[21:15] *** kivutar joined
[21:17] <masak> not from my quick scan of the backlog.

[21:17] *** Rotwang joined
[21:17] <masak> lue: re plugging in custom calendars -- I'm not too hot on the idea. it sounds like overgeneralization to me.

[21:18] <masak> at some point, you gain exactly nothing from plugging into the existing DateTime framework.

[21:18] <masak> I believe that point comes already when you start talking about lunar calendars or hexadecimal calendars or Klingon calendars.

[21:19] <lue> Yeah. I can't recall what exactly I meant by that. But I agree that plugging in custom calendars is not something we need to worry about.

[21:20] <moritz> we could rephrase the quetion

[21:20] <moritz> if you want to plugin in a different calendar, what would the framework do for you?

[21:21] <sorear> what about lunisolar calendars?

[21:21] <lue> .oO(DateTime::Mayan)

[21:21] <moritz> what about them?

[21:21] <sorear> can we please put slightly more effort into supporting the Hebrew calendar than the Klingon calendar? :p

[21:22] <moritz> you mean, none and nearly none?

[21:22] <sorear> I was hoping for the other way around

[21:23] <moritz> nearly none and none?

[21:23] <sorear> yes

[21:23] *** vividsnow joined
[21:24] <flussence> .oO( supporting the Hebrew calendar is easy... just fork a PHP process )

[21:24] <moritz> does adding a sentence about a calendar not being supported as "slightly more work"?

[21:25] *** xenoterracide joined
[21:26] <masak> it's nice to see that temporal bikeshedding is still alive and well ;)

[21:27] <masak> anyway, I plan to add something like a .delta method into the spec when I find the tuits.

[21:27] <masak> and then I might as well go and implement it, too :)

[21:27] <japhb_> sorear, I was going to make a joke that we may want to support Klingon calendars first because "Jews won't attack you with a bat'leth if you don't comply", until I remembered that the only person I know who speaks fluent Klingon is Jewish.  There went that theory.  :-)

[21:28] <flussence> (oh wait, I misremembered that part of PHP - they have core functions for Hebrew *strings*, not *dates*...)

[21:28] * lue also votes for a more useful Duration object (i.e. one I can use to represent arbitrary lengths of time and use in arithmetic operations with DateTimes)

[21:29] * masak .oO( mmm, Hebrew dates )

[21:29] <masak> lue: yes, Duration is part of CPAN's DateTime.

[21:30] <masak> lue: part of the reason the temporal spec doesn't have it yet is that civic time is so messy, and I'm not even sure Durations can be made to follow standard mathematical laws.

[21:30] <masak> maybe they can, to the point where you can say "things either behave sanely, or throw an exception".

[21:31] <japhb_> masak, if by "standard mathematical laws" you mean associativity and suchlike, I'm pretty sure the answer is no.

[21:32] <japhb_> (Once upon a time, /me tried to write an app that had Correct Time Behavior.  OMG what a rat's nest.)

[21:32] <masak> right.

[21:32] <masak> it's fun to query old Perl hands about horror stories about time. they always have a few.

[21:32] <flussence> rn: say now R- now

[21:32] <p6eval> rakudo 14c1a6: OUTPUT¬´0.0215852‚ê§¬ª

[21:32] <p6eval> ..niecza v24-18-gaf64300: OUTPUT¬´0.00015306472778320313‚ê§¬ª

[21:33] <moritz> rn: say 0.0215852 / 0.00015306472778320313

[21:33] <p6eval> niecza v24-18-gaf64300: OUTPUT¬´141.02007897320871‚ê§¬ª

[21:33] <p6eval> ..rakudo 14c1a6: OUTPUT¬´141.020078973208718135‚ê§¬ª

[21:33] <japhb_> rn: say now - INIT now

[21:33] <p6eval> niecza v24-18-gaf64300: OUTPUT¬´Unhandled exception: Cannot use value like Instant as a number‚ê§  at <unknown> line 0 (ExitRunloop @ 0) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 293 (Any.Numeric @ 6) ‚ê§  at <unknown> line 0 (ExitRunloop @ 0) ‚ê§  at /tmp/nsvCTMTS9z line 1 (mainline @ 3‚Ä¶

[21:33] <p6eval> ..rakudo 14c1a6: OUTPUT¬´0.020357‚ê§¬ª

[21:33] <moritz> nr: say now - BEGIN now

[21:33] <p6eval> rakudo 14c1a6: OUTPUT¬´0.0414784‚ê§¬ª

[21:33] <p6eval> ..niecza v24-18-gaf64300: OUTPUT¬´0.053300857543945313‚ê§¬ª

[21:34] <flussence> REPL doesn't seem to like that version

[21:34] <japhb_> interesting Niecza bug there

[22:01] <lue> Huh. Can I not use supersede with classes?

[22:01] *** donaldh joined
[22:04] <masak> 'night, #perl6

[22:04] <sorear> night masak.

[22:04] <felher> o/ masak 

[22:04] <lue> o/ masak

[22:04] *** Rotwang left
[22:05] *** skids left
[22:06] <lue> how can I supersede a class? Rakudo doesn't seem to let me.

[22:09] <sorear> You can't.  It doesn't make sense.

[22:11] <lue> according to S12, I can, so it seems to me a rakudobug.

[22:13] <lue> (under Open vs Closed Classes)

[22:15] *** japhb_ left
[22:15] *** japhb_ joined
[22:18] <japhb_> moritz, was there a reason that the irclogs don't show the colors produced by p6eval error messages, or is it simply a matter of lacking tuits?

[22:25] <sorear> I thought they did/used to !?

[22:27] <japhb_> Hmmm, not looking like it to me.  Maybe because I have JS off, if it's a client-side post-processing?

[22:29] <FROGGS> I see colors

[22:31] <lue> irclog colors work for me (even when I turned off JS for perlgeek.de)

[22:31] <japhb_> FROGGS, within the error messages, as in: http://irclog.perlgeek.de/perl6/2013-01-21#i_6357210 ?

[22:31] *** vividsnow left
[22:32] <FROGGS> japhb: no, there are no colors, just here: http://irclog.perlgeek.de/perl6/2013-01-21#i_6356683

[22:32] <flussence> I see lots of mojibake

[22:34] <japhb_> FROGGS, oh interesting.  I wonder if Rakudo isn't producing colors in exactly the same way as niecza, and thus not getting correct irclog treatment.  (I'm guessing this because Rakudo's colored error support is much newer.)

[22:34] <FROGGS> japhb: looks like the colored text is the one after the --------> and at the time you posted there is no such text

[22:34] <lue> Huh. Yeah, I don't see *rakudo's* colors.

[22:34] <FROGGS> http://irclog.perlgeek.de/perl6/2013-01-21#i_6359196

[22:35] <FROGGS> here

[22:35] <flussence> .oO( now look what you've done! the ircbot's gone off sulking )

[22:35] *** _ilbot joined
[22:35] <japhb_> Yeah, looks like the long arrow was a trigger of some sort.

[22:36] <japhb_> flussence: and yes, it would be nice to correct the mojibake as well.

[22:37] <lue> That seems to be iso-8859-1 encoded text put through UTF-8 (I can't be sure though, because firefox won't let me switch to ISO-8859-1 on perlgeek :/)

[22:38] *** hash_table left
[22:39] <japhb_> Why would iso-8859-1 text be coming out of error messages?  We're using Unicode characters for things like the eject marker, so encoding at any point in iso-8859-1 makes little sense.

[22:39] *** xinming left
[22:39] <benabik> Looks much worse to me in iso-8859-1

[22:39] <FROGGS> shel escapes for the colors?

[22:39] <FROGGS> shell*

[22:40] <lue> well, I'm thinking UTF-8 ==> ISO ==> UTF-8, irc to storage to browser

[22:40] <jnthn> Maybe it's the ANSI escape stuff

[22:40] *** rindolf left
[22:40] *** xinming joined
[22:41] <FROGGS> lue: then these carets wouldnt be there: http://irclog.perlgeek.de/perl6/2013-01-21#i_6358267

[22:41] *** aindilis left
[22:42] <lue> that's true. jnthn's idea seems more right then.

[22:42] *** aindilis joined
[22:42] <lue> std's not getting all its colors either: http://irclog.perlgeek.de/perl6/2013-01-21#i_6359200

[22:43] <FROGGS> WE WANT ALL COLORS!

[22:43] * FROGGS draws signs now

[22:44] <donaldh> jnthn: I'm exploring nqp-jvm-prep

[22:45] <donaldh> trying an nqp loop I get 'No support for result child yet'

[22:45] <lue> r: say "\x[c3,82]"

[22:45] <p6eval> rakudo 14c1a6: OUTPUT¬´√É¬Ç‚ê§¬ª

[22:45] <lue> r: say [c3,82].decode

[22:45] <p6eval> rakudo 14c1a6: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared routine:‚ê§    c3 used at line 1‚ê§‚ê§¬ª

[22:45] <lue> r: say [0xc3,0x82].decode

[22:45] <p6eval> rakudo 14c1a6: OUTPUT¬´No such method 'decode' for invocant of type 'Array'‚ê§  in block  at /tmp/9l3R3bJDSh:1‚ê§‚ê§¬ª

[22:46] <donaldh> jnthn: Is that something it would be worth me trying to hack on?

[22:46] <japhb_> BTW, are people with terminal-based IRC clients seeing the ANSI colors in their chat window?  I'm sortof wondering if p6eval should convert ANSI ==> mIRC, then have the irclogs understand mIRC codes coming from p6eval.  That way we should see the correct look everywhere.

[22:47] <flussence> I get them

[22:47] <flussence> (in irssi)

[22:47] * FROGGS is using XChat, so, no colors

[22:47] <tadzik> no colours in weechat either

[22:47] * japhb_ is using xchat as well.

[22:47] <lue> FROGGS: I use XChat too, and I recently got a perl script for colors

[22:47] <lue> (ANSI, that is)

[22:47] <jnthn> donaldh: That one is probably quite easy to add a test for and not too bad to hack on.

[22:47] <japhb_> lue, ah, now that would be useful.

[22:47] <japhb_> Standard plugin?

[22:48] <donaldh> jnthn: tests are QAST fragments, right?

[22:48] <jnthn> donaldh: yeah

[22:48] <lue> I believe I got it from here: http://lwsitu.com/xchat/ansi_color.pl

[22:48] <jnthn> donaldh: You'd need to allocate a temporary to store the result in and the get it on the stack at the end.

[22:48] <jnthn> It's probably a 5-10 line of code fix tops.

[22:49] *** snearch left
[22:49] *** matija left
[22:49] <jnthn> donaldh: What code did you try, out of curiosity?

[22:49] <donaldh> jnthn: once I figure out the opcodes :-)

[22:49] <donaldh> nqp/examples/loops.nqp

[22:49] <FROGGS> r: huh

[22:50] <p6eval> rakudo 14c1a6: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared routine:‚ê§    huh used at line 1‚ê§‚ê§¬ª

[22:50] <FROGGS> cool

[22:50] * FROGGS haz colors now

[22:51] *** xinming left
[22:51] *** xinming joined
[22:53] <jnthn> donaldh: There's a helper fresh that can do the temporary allocation and load_ins/store_ins. They all take a type, and do the appropraite thing :)

[22:53] <donaldh> jnthn: thanks

[22:54] *** Pleiades` left
[22:56] *** Pleiades` joined
[23:01] <japhb_> r: test

[23:01] <p6eval> rakudo 14c1a6: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared routine:‚ê§    test used at line 1‚ê§‚ê§¬ª

[23:03] <dalek> nqp-jvm-prep: 65301a3 | (Jonathan Stafford)++ | / (5 files):

[23:03] <dalek> nqp-jvm-prep: implements stat

[23:03] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/65301a38bd

[23:03] <dalek> nqp-jvm-prep: 9e4a767 | jonathan++ | / (5 files):

[23:03] <dalek> nqp-jvm-prep: Merge pull request #9 from thecabinet/stat

[23:03] <dalek> nqp-jvm-prep: 

[23:03] <dalek> nqp-jvm-prep: implements stat

[23:03] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/9e4a76758e

[23:18] *** zby_home_ joined
[23:18] <japhb_> r: test

[23:18] <p6eval> rakudo 14c1a6: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared routine:‚ê§    test used at line 1‚ê§‚ê§¬ª

[23:21] *** spider-mario left
[23:22] <donaldh> ‚Äú‚Äù

[23:24] <jnthn> 'night, #perl6

[23:24] <sorear> night jnthn

[23:25] *** MayDaniel left
[23:25] *** zby_home_ left
[23:32] *** Chillance left
[23:39] *** donaldh left
[23:41] <japhb_> r: test

[23:41] <p6eval> rakudo 14c1a6: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared routine:‚ê§    test used at line 1‚ê§‚ê§¬ª

[23:43] *** Timbus joined
[23:45] <japhb_> Patch to ansi_color.pl xchat script so that it works when you're highlighted and when you're PM'ing with p6eval:  https://gist.github.com/4590650

[23:47] *** autumn joined
[23:50] *** b1rkh0ff left
[23:53] *** benabik left
[23:55] *** benabik joined
[23:55] *** sivoais joined
[23:59] <lue> japhb_: thanks

