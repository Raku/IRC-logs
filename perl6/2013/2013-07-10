[00:11] *** PZt joined
[00:19] *** cooper joined
[00:39] *** abnorman joined
[00:47] *** btyler joined
[01:15] *** cognominal joined
[01:20] *** kingbeast joined
[01:28] *** prevost joined
[01:30] *** kingbeast left
[01:31] *** kingbeast joined
[01:41] *** haiferry joined
[01:52] *** lee_ joined
[01:54] *** sqirrel_ joined
[02:27] *** cooper left
[02:59] <TimToady> http://irclog.perlgeek.de/perl6/2013-07-10 is really boring so far...

[02:59] *** jeffreykegler joined
[03:01] *** Targen joined
[03:01] <jeffreykegler> Gee and I joined looking for the excitement

[03:25] <sorear> good * #perl6

[03:25] <sorear> timotimo: I do not think is pure means what you think it means

[03:27] *** jeffreykegler left
[03:30] *** abnorman left
[03:34] *** haiferry left
[03:54] <moritz> good morning

[03:55] <sorear> o/

[03:55] *** preflex_ joined
[03:55] *** ChanServ sets mode: +v preflex_

[03:56] *** preflex_ is now known as preflex

[04:01] *** prevost left
[04:35] *** cooper joined
[04:35] *** cooper left
[04:35] *** cooper joined
[04:43] *** hugme left
[04:44] *** birdwindupbird joined
[04:46] *** hugme joined
[04:46] *** ChanServ sets mode: +v hugme

[04:47] *** Targen left
[04:56] *** kingbeast left
[04:57] *** Targen joined
[05:04] *** ruoso joined
[05:28] *** Juerd joined
[05:31] *** dalek joined
[05:31] *** ChanServ sets mode: +v dalek

[05:43] *** hugme left
[05:45] *** Juerd left
[05:45] *** Util_ left
[05:45] *** dalek left
[05:49] *** Targen left
[05:51] *** SamuraiJack joined
[05:52] *** crab2313 joined
[05:52] *** SamuraiJack left
[06:02] *** hugme joined
[06:02] *** ChanServ sets mode: +v hugme

[06:07] *** odoacre joined
[06:12] *** btyler left
[06:12] *** Juerd joined
[06:14] <Juerd> re feather: underlying box had kernel panic after broken IO and was forcefully rebooted.

[06:14] <Juerd> Seems to work just fine now.

[06:14] *** kingbeast joined
[06:15] <sorear> broken IO?

[06:16] <sorear> .oO( kernel doesn't like src/core/IO.pm breakage )

[06:27] *** domidumont joined
[06:36] *** odoacre left
[06:39] *** Dior joined
[06:40] *** domidumont left
[06:40] <Dior> Hi

[06:40] <Dior> :/

[06:41] *** Dior left
[06:41] *** domidumont joined
[06:51] *** domidumont left
[06:51] *** breinbaas joined
[06:54] *** kaleem joined
[07:00] *** dmol joined
[07:13] *** domidumont joined
[07:26] *** odoacre_ joined
[07:27] *** PZt left
[07:36] <lizmat> good *, #perl6!

[07:37] <lizmat> .oO( if the backlog is boring, maybe we should restart the S11 discussion )

[07:38] *** FROGGS joined
[07:41] *** ztt joined
[07:41] <labster> go for it lizmat

[07:42] <labster> I haven't had so much perl6 time lately, due to starting my new $dayjob.

[07:42] <FROGGS> S11++

[07:43] * FROGGS .oO( lets just call it S12 and all is fine )

[07:43] <FROGGS> er even S13

[07:44] <lizmat> maybe we should just boldly go where no version has gone before, and call it S111  :-)

[07:44] <FROGGS> *g*

[07:44] <FROGGS> hehe

[07:44] <FROGGS> I like it

[08:11] *** tadzik joined
[08:19] *** fhelmberger joined
[08:29] <timotimo> sorear: could very well be; i thought it meant "can be compile-time evaluated", but i realize now that the metaops probably needs to do things like closure cloning or something, so that won't be helpful?

[08:30] *** arlinius joined
[08:45] <jnthn> morning, #perl6

[08:45] <timotimo> hello jnthn

[08:45] <timotimo> i think i understand now why you want the optimizer to be clever about the metapos

[08:46] <timotimo> rather than my misguided attempts to just stick an "is pure" to each %)

[08:46] <FROGGS> hi jnthn 

[08:47] <timotimo> ... what was the significance of QAST::Node.named again?

[08:47] <FROGGS> a named param

[08:47] <timotimo> oh, that's it?

[08:47] *** dakkar joined
[08:47] <FROGGS> QAST::Var.new( :named<bin>, :value(...) )

[08:48] <moritz> yes, that's it

[08:48] <timotimo> that's simpler than i thought it would be :)

[08:48] <FROGGS> whoeverwhomadeqast++ # :P

[08:50] <moritz> jnthn++ made QAST, and pmichaud++ made PAST, by which it was heavily inspired

[08:50] <timotimo> that's interesting; the compile-time evaluator seems to skip any calls that have named parameters in them

[08:50] <timotimo> i wonder if that's a limitation that cannot be broken; i don't see why it would be, to be honest

[08:51] <timotimo> also, i'm surprised why it has to check every child of the op for istype QAST::Node; shouldn't that be basic sanity?

[08:52] <moritz> no, there are cases where integers appear in the QAST tree

[08:52] <FROGGS> or things like a 'v', right?

[08:52] <moritz> right (in QAST::Want)

[08:54] <timotimo> but not if the $optype == 'call' ;)

[08:54] <timotimo> er, eq 'call' of course

[08:55] <moritz> I'm pretty sure that if you remove the istype checks and try to spectest (or even build the setting), it'll blow up

[08:55] <moritz> (unless much has changed since I wrote that code)

[08:55] <timotimo> oh, that was you! i just randomly assumed it was jnthns doing ;)

[08:56] <timotimo> i think i'll try, because it really interests me to see what on earth causes that to blow up

[08:56] <moritz> note that constant-folding stuff with .named arguments is quite possible, just has to be done

[08:56] <timotimo> right, i was just about to ask

[08:56] <moritz> but I didn't thought it was worth it when I did it, because mostly operators were inlined

[08:56] <timotimo> i have no intuition on how many places that will optimize, though

[08:57] <moritz> simply add an   nqp::say('skipped inlining due to named arguments') to the place where the .named is check (if checked successfully)

[08:57] <moritz> and then compile the setting, and see if anything shows up

[08:57] <timotimo> i'll need a tiny bit more than that

[09:02] <timotimo> no skips in the setting :(

[09:15] <timotimo> moritz: fwiw, removing the istype check doesn't make any tests fail

[09:15] <timotimo> it also doesn't change the optimizer run time

[09:21] * jnthn wonders which istype...

[09:22] <jnthn> The optimizer is often careful for subtle reasons...

[09:22] <timotimo> when checking a call node for compile-time-evaluability, it will go through all the childs of the call node

[09:22] <timotimo> and it requires each to be derived from QAST::Node

[09:22] <jnthn> *nod*

[09:23] <timotimo> in my limited experience with qast, i only ever see that happened in Want nodes

[09:23] <jnthn> handle also

[09:23] <jnthn> I think somewhere in the regex stuff too

[09:23] <timotimo> okay. but still not in call ops?

[09:24] <timotimo> either way, it doesn't seem to have an impact at all

[09:25] *** man joined
[09:27] <man> ?

[09:27] *** man left
[09:32] <FROGGS> !

[09:33] <FROGGS> ohh, and we have *, ^ and = too

[09:39] <timotimo> not to mention ~ and -

[09:39] <FROGGS> - as a twigil?

[09:42] <timotimo> oh!

[09:42] <timotimo> i didn't think of twigils

[09:42] <jnthn> tbh, ?, !, *, ^ and = all show up as ops too :P

[09:42] <jnthn> *tbf

[09:42] <FROGGS> jnthn: tbh, averything shows up as an op nowadays :P

[09:42] <FROGGS> everything*

[09:47] *** crab2313 left
[09:50] *** Shozan joined
[09:52] *** broquain1 joined
[09:52] *** JimmyZ_ joined
[09:52] *** szbalint joined
[09:52] *** perigrin_ joined
[09:52] *** awwaiid joined
[09:53] *** apejens_ joined
[09:53] <jnthn> time to go ride some cool trains &

[09:54] <FROGGS> have fun

[09:55] *** simcop2387_ joined
[09:55] *** yoleaux_ joined
[09:56] *** crazed- joined
[09:56] *** yoleaux_ is now known as yoleaux

[09:56] *** yoleaux left
[09:57] *** yoleaux joined
[09:57] *** ChanServ sets mode: +v yoleaux

[09:58] *** simcop2387_ is now known as simcop2387

[09:58] *** crazed- is now known as crazedpsyc

[10:04] *** sitaktif joined
[10:19] *** mstefanko joined
[10:46] <timotimo> trains with AC are the only good kind for traveling during summertime i find.

[10:52] <FROGGS> yeah, AC-power is pretty useful :o)

[10:52] <timotimo> .o(alternating climate?)

[10:53] <FROGGS> cold/warm/cold/warm...

[10:56] *** PZt joined
[11:03] *** FROGGS left
[11:06] *** brrt joined
[11:06] *** arlinius left
[11:07] *** masak joined
[11:07] <masak> good afternoon, #Perl6

[11:07] <masak> p*

[11:07] <masak> feather crashed during the night?

[11:07] <moritz> yes

[11:09] <brrt> hi masak, moritz

[11:09] <moritz> hi brrt 

[11:09] <brrt> how has the perl6 land been these days? long time no see

[11:10] <masak> welcome back, brrt.

[11:11] <moritz> brrt: rakudo-jvm now passes over 90% of the tests that rakudo-parrot passes

[11:11] <brrt> oooh

[11:11] <brrt> nice

[11:11] <masak> over 90%? over 97%!

[11:11] <masak> I would tell you how we're doing, but I just lost all my irssi windows, and will need to spend some time reconstructing them... :)

[11:11] <moritz> masak: 97% is over 90% :-)

[11:12] <lizmat> but 97% is so much closer to 100%  :-)

[11:12] <masak> in other news, the temperature is over 30 Kelvin outside.

[11:12] <brrt> it usually is, on earth at least

[11:13] <brrt> you should totally get the outside world to know

[11:29] *** rindolf joined
[11:31] *** eternaleye left
[11:32] *** eternaleye joined
[11:32] *** arlinius joined
[11:34] *** rindolf left
[11:38] <timotimo> masak: have you seen /layout save?

[11:45] *** Shozan is now known as SHODAN

[11:46] <BinGOs> and /channel add

[11:49] <masak> ooh

[12:05] *** JimmyZ_ is now known as JimmyZ

[12:26] *** synopsebot joined
[12:33] *** btyler joined
[12:46] *** btyler left
[12:48] *** arlinius left
[12:51] *** sqirrel_ left
[12:51] *** konundra joined
[12:52] *** FROGGS joined
[12:58] *** pmurias joined
[13:20] *** _daniel-s__ joined
[13:20] *** arlinius joined
[13:21] *** Timbus|Away joined
[13:22] *** rafl_ joined
[13:22] *** flussence_ joined
[13:22] *** atrodo_ joined
[13:23] *** bluescreen10 joined
[13:23] *** daxim_ joined
[13:23] *** jlaire_ joined
[13:23] *** nebuchadnezzar joined
[13:24] *** rs0 joined
[13:24] *** orevdiabl joined
[13:24] *** anocelot_ joined
[13:25] *** rom1504_ joined
[13:25] *** hoelzro_ joined
[13:25] *** Lorn_ joined
[13:25] *** mikemol_ joined
[13:25] *** smash__ joined
[13:29] *** rjbs left
[13:29] *** hoelzro left
[13:29] *** ivan`` left
[13:29] *** dylanwh left
[13:29] *** atrodo left
[13:29] *** rom1504 left
[13:29] *** gfldex left
[13:29] *** anocelot left
[13:29] *** Yappo_________ left
[13:29] *** revdiablo left
[13:29] *** flussence left
[13:29] *** Timbus|Away is now known as Timbus

[13:29] *** rafl_ is now known as rafl

[13:29] *** atrodo_ is now known as atrodo

[13:30] *** Yappo_________ joined
[13:30] *** dylanwh joined
[13:30] *** frdmn joined
[13:31] *** Celelibi joined
[13:31] *** ivan`` joined
[13:31] *** ztt left
[13:32] *** jlaire_ is now known as jlaire

[13:32] *** [Coke] joined
[13:35] *** Util joined
[13:41] *** frdmn left
[13:42] *** SmokeMachine joined
[13:42] *** skids joined
[13:42] *** frdmn joined
[13:43] <pmurias> jnthn: are there any known circumstances where a "No code ref at index 107" could happen when loading a module?

[13:43] *** SamuraiJack joined
[13:44] *** kst` joined
[13:45] *** kaleem_ joined
[13:46] *** FROGGS_ joined
[13:46] *** jtpalmer joined
[13:47] *** awwaiid_ joined
[13:47] *** sjn_ joined
[13:47] *** rindolf joined
[13:47] *** nyuszika7h_ joined
[13:47] *** daxim__ joined
[13:47] *** jnthn_ joined
[13:47] <lizmat> jnthn is travelling at the moment

[13:47] <lizmat> but maybe he just came online?

[13:48] *** Util_ joined
[13:48] *** telex_ joined
[13:49] *** btyler joined
[13:49] <lizmat> I guess not…   :-(

[13:49] <lizmat> Wifi on a high speed train can be flaky

[13:50] <lizmat> pmurias: fwiw, I've never seen that

[13:53] *** eternaleye_ joined
[13:54] *** Celelibi_ joined
[13:56] *** Targen joined
[13:57] *** rafl left
[13:57] *** Util left
[13:57] *** Celelibi left
[13:57] *** daxim_ left
[13:57] *** FROGGS left
[13:57] *** synopsebot left
[13:57] *** eternaleye left
[13:57] *** awwaiid left
[13:57] *** kaleem left
[13:57] *** hugme left
[13:57] *** jnthn left
[13:57] *** eternaleye_ is now known as eternaleye

[13:57] *** rafl joined
[13:58] *** synopsebot joined
[13:58] *** Celelibi_ is now known as Celelibi

[13:58] *** hugme joined
[13:58] *** mtk0 joined
[14:00] *** Util_ is now known as Util

[14:01] *** thou joined
[14:02] *** itz joined
[14:03] *** mtk0 left
[14:06] *** mtk joined
[14:08] *** rindolf left
[14:08] *** [particle]1 joined
[14:08] *** PerlJam joined
[14:08] *** ggoebel joined
[14:10] *** DrEeevil joined
[14:10] *** Pompel_ joined
[14:10] *** itz_ joined
[14:11] *** segomos_ joined
[14:11] *** p5eval joined
[14:11] *** pjcj joined
[14:11] *** Yappo__________ joined
[14:12] *** mls_ joined
[14:12] *** eiro_ joined
[14:12] *** obra_ joined
[14:16] *** drbean_ joined
[14:17] *** Bucciarati_ joined
[14:17] *** itz left
[14:17] *** Yappo_________ left
[14:17] *** FROGGS_ left
[14:17] *** bloonix joined
[14:18] *** kaleem_ left
[14:18] *** crab2313 joined
[14:19] *** SamuraiJack left
[14:19] *** SamuraiJack_ joined
[14:20] *** benabik joined
[14:22] *** ajr joined
[14:24] *** alester joined
[14:24] *** alester left
[14:25] *** alester joined
[14:31] *** brrt left
[14:32] *** brrt joined
[14:41] *** FROGGS joined
[14:41] *** kaare_ joined
[14:48] *** hoelzro_ is now known as hoelzro

[14:54] <lizmat> off to Niederrhein.pm meeting&

[15:04] *** drbean_ is now known as drbean

[15:04] *** DrEeevil is now known as Guest64136

[15:04] *** ajr is now known as Guest50225

[15:04] *** nyuszika7h_ left
[15:04] *** nyuszika7h_ joined
[15:04] *** nyuszika7h_ is now known as nyuszika7h

[15:04] *** Guest50225 is now known as ajr_

[15:06] *** vxe1313 joined
[15:06] *** vxe1313 left
[15:06] *** brrt left
[15:08] *** birdwindupbird left
[15:09] <[Coke]> S32-str/sprintf.rakudo aborted 63 test(s)

[15:10] <[Coke]> be nice if someone could patch that up in the next 30m or so.

[15:16] <FROGGS> O.o

[15:18] <[Coke]> I'm assuming it's just new tests that java passes that parrot doesn't.

[15:18] *** eiro_ is now known as eiro

[15:19] *** Targen left
[15:27] *** fhelmberger left
[15:28] <FROGGS> [Coke]: only the TODOs fail here

[15:29] *** segomos_ is now known as segomos

[15:29] <FROGGS> but I'm using NQP HEAD, lemme switch to NQP_REVISION

[15:32] <timotimo> FROGGS: you don't have much time left! =o

[15:32] <FROGGS> yeah ó.ò

[15:32] <FROGGS> I'll already stalking some CPUs on ebay, but this wont help here

[15:36] *** konundra left
[15:36] <timotimo> still haven't attached the tuit to my rucksack

[15:39] <[Coke]> no worries if it doesn't hit. the rakudo.jvm run will be delayed today, though the others will start at noonish.

[15:39] <[Coke]> (eastern)

[15:42] <FROGGS> [Coke]: even with NQP_REV it doesnt fail

[15:43] <FROGGS> ohh, hold on

[15:44] <FROGGS> hmm, no, still everything alright

[15:51] *** obra_ is now known as obra

[15:52] <timotimo> [Coke]: shouldn't that read "S32-str/sprintf.rakudo.something"?

[15:53] <pmurias> is there a way to remove '.' from the nqp search path?

[15:53] <flussence_> cd .. ?

[15:57] *** rindolf joined
[15:59] <FROGGS> pmurias: when loading modules? no, that is hardcoded

[15:59] *** adu joined
[15:59] <FROGGS> timotimo: with backend parrot it is still called .rakudo

[16:01] <timotimo> ah, ok

[16:03] *** daxim__ left
[16:09] *** orevdiabl left
[16:09] *** revdiablo joined
[16:10] *** SamuraiJack_ left
[16:10] *** abnorman joined
[16:14] <pmurias> FROGGS: looking at the source it seems to be

[16:17] *** vk joined
[16:18] *** SamuraiJack_ joined
[16:19] *** ajr_ left
[16:20] *** ajr joined
[16:22] *** revdiablo left
[16:22] *** revdiablo joined
[16:33] <timotimo> btw, i'm still not able to make sub EXPORT work properly :|

[16:33] <timotimo> https://github.com/timo/ADT/blob/EXPORT_sub/lib/ADT.pm6#L176 - is there something obviously wrong about this?

[16:33] <timotimo> or is it just that returning classes from EXPORT is NYI or something?

[16:38] *** [particle]1 is now known as [particle]

[16:38] <timotimo> ah, the wrongness isn't that they don't properly get returned from the export sub

[16:39] <timotimo> it's the dreaded "Type check failed in assignment to '$a'; expected 'Maybe' but got 'Maybe'" error that i now remember

[16:39] *** domidumont left
[16:42] <timotimo> i think that's highly unfortunate :(

[16:42] <FROGGS> hmmm, your linky is 404

[16:42] <timotimo> yes, i merged into master and deleted EXPORT_sub

[16:42] <timotimo> https://github.com/timo/ADT/blob/master/lib/ADT.pm6#L176

[16:43] <timotimo> the tests succeed, but they fail if you add proper type restrictions

[16:44] <timotimo> like my Tree $a .= new-leaf(...)

[16:46] *** ssutch joined
[16:46] <FROGGS> timotimo: these types are created on demand?

[16:47] <timotimo> yes indeed :)

[16:47] <FROGGS> well, how should that work?

[16:47] <FROGGS> types are not compared by their name

[16:47] <timotimo> er

[16:47] <FROGGS> if you check their .WHICH it will be different

[16:47] <timotimo> they are created at import time

[16:48] <FROGGS> if you have a Tree, will it be created only once and reused then?

[16:49] *** domidumont joined
[16:49] <timotimo> yes

[16:49] <FROGGS> hmmm

[16:49] <FROGGS> can you check their .WHICH?

[16:49] <timotimo> the EXPORT sub gets called when the user implements use ADT 'Tree = ...'

[16:49] <timotimo> i suppose i can?

[16:50] <FROGGS> I guess it wont be equal

[16:51] <timotimo> Tree|2611048203208949061

[16:51] <timotimo> Tree|2611048201061319506

[16:51] <timotimo> you are right

[16:51] <timotimo> but where does the difference come from? i don't understand.

[16:51] <timotimo> i only create one tree ever

[16:52] <FROGGS> ohh, .WHICH is about an object...

[16:52] <timotimo> well, that would explain it?

[16:52] <FROGGS> how to check a type object?

[16:52] <timotimo> would also explain why i got only "Tree" when i did .WHAT.WHICH

[16:52] <timotimo> with === perhaps?

[16:52] <timotimo> but that'll only say False

[16:53] <FROGGS> maybe .WHERE would do

[16:53] <timotimo> yeah, they are different, too

[16:54] <timotimo> -143857636322818261 vs -143857636735524802

[16:54] <FROGGS> hmm, I'm not sure

[16:55] <timotimo> but they are supposed to be the same >:(

[16:55] <FROGGS> what if you would create a Tree class in your unit, and make it the parent class for the trees you create later on?

[16:56] <FROGGS> so you have a Tree that isnt created by some magic

[16:56] <timotimo> wait what?

[16:56] <timotimo> i only call ClassHOW.new_type once

[16:57] <timotimo> the second Tree has no right to exist

[16:57] <timotimo> or maybe the first one. hard to tell when they are both actually the same, but not actually

[16:58] <FROGGS> I would add print statements for every call to new_type

[16:59] *** dakkar left
[16:59] <FROGGS> bbl

[16:59] *** ajr left
[17:00] <timotimo> just one mention of it :(

[17:02] *** abnorman left
[17:02] *** stevan_ joined
[17:03] <timotimo> i do create three different classes, Tree, Branch and Leaf

[17:03] <timotimo> but i only create Tree once

[17:05] *** konundra joined
[17:07] *** vk left
[17:07] *** vk joined
[17:18] *** Khisanth joined
[17:23] *** crab2313 left
[17:24] <benabik> I wonder if the class is getting created at compile and at runtime...

[17:51] * diakopter is hoping there are several omfgduh flaws in nqp/rakudo that we're able to find once we get awesome profiling tools that when fixed achieve orders of magnitude speedups.

[17:51] <diakopter> otherwise I'll remain despondent about the regex engine speed dearth

[17:52] <diakopter> sorry, [OT] ish

[17:54] *** rindolf left
[17:58] *** benabik left
[18:01] *** abnorman joined
[18:03] <masak> well, you're not the only one who's curious about how grammars could be sped up.

[18:06] <diakopter> well, if we can somehow designate (or infer) that we don't need the super-slow features...

[18:09] <diakopter> for instance, certain matches can be compiled to much faster cpu-code/JIT'd automata just for pre-matching to see if it will match at all, then run the full thing to see which one's longest for the case of LTM

[18:10] <diakopter> .. but that of course degenerates into caching all sorts of stuff, like breaking those compilations at rule/token boundaries and caching fates like std/niecza

[18:10] <flussence_> sometimes, all I want is to be able to tell the language "this is all opaque iso-8859-1 input, be fast and stupid like PHP"

[18:11] <diakopter> P6'll have that. in our planning for moarvm, TimToady and I talked about having current default decoding/encoding pipelines set up

[18:11] <diakopter> but that's a ways...

[18:11] *** flussence_ is now known as flussence

[18:14] <flussence> I guess we can go the JS route of being slow by default and having lexical speed hacks like asm.js

[18:14] <flussence> that might be a bit nicer than being wrong by default :)

[18:14] <moritz> which type will provide the fast iso-8859-1 view on strings?

[18:14] <diakopter> seemed ok to me to hook them into IO methods

[18:15] <flussence> well, the spec does say regexes should be able to operate on bufs...

[18:15] <moritz> flussence: but regexes aren't the only string operation

[18:15] <moritz> flussence: there's concatenation, substr, numification, case folding...

[18:16] <moritz> oh, and will a regex match on a buf yield bufs inside the Match object?

[18:16] <diakopter> so, you'd set "default" or "current settings" of various encoders/decoders and destination types on the IO object

[18:16] <diakopter> (so you can read directly to a buf, or a Str, if you want)

[18:16] <flussence> hmm... isn't that what the "global unicode semantics level" (graphs/codes/bytes) was supposed to be for?

[18:17] <diakopter> it's better to provide those low-level because the detection of codepoint/character breaks can be integrated with a single level of buffering

[18:17] <flussence> (or whatever it's called...)

[18:17] <diakopter> that's a start

[18:18] <diakopter> but it needs bunches more fleshing out, in my assessment

[18:18] <diakopter> .ask TimToady Uni? plz?

[18:18] <yoleaux> diakopter: I'll pass your message to TimToady.

[18:22] <diakopter> flussence: the overengineerer in my wants something like:

[18:25] <diakopter> eh.

[18:25] <diakopter> don't have time to write it properly

[18:25] <diakopter> moritz: good question about the regex matching on bufs

[18:26] <diakopter> configurable! ;)

[18:28] *** SamuraiJack_ left
[18:29] <flussence> I'd lean toward "yes" for that one, I can't think up a sane way to have it returning Strs...

[18:29] <moritz> so $/.Str would return a Buf?

[18:31] <flussence> that wouldn't make any sense

[18:31] <diakopter> why?

[18:31] <diakopter> (moritz)

[18:31] <moritz> I find the whole idea quite absurd. First we introduce separate types so that we can distinguish bytes from text, and then we let Buf creep in everywhere that a Str can be?

[18:32] <moritz> IMHO the only sane way to deal with binary-data-but-viewable-as-a-string is decoding the buffer as Latin-1

[18:32] <moritz> then you have a proper Str, and can regex match, case fold and whatnot

[18:32] <diakopter> on the other hand, what I find absurd is the lack of (or is it there?) Str.codepoint_at(idx)

[18:33] <moritz> $str.substr($idx, 1).ord

[18:33] <diakopter> ... without allocating a string.

[18:33] <diakopter> (crazy)

[18:35] <skids> .oO(Zed-TeRminated string... Ztr... prettier than "CString")

[18:35] <diakopter> *sigh* maybe I should put NFG into rakudo-jvm first.. er, actually, ooooo wouldn't be difficult at all to compile the unicode database the same way to java... 

[18:35] <diakopter> (same was as it is on moarvm)

[18:35] <Teratogen> I am not a big fan of camelcase, coming from a Multics environment

[18:36] *** grondilu joined
[18:36] * diakopter doesn't see the camelcase

[18:38] <moritz> TeraTogen

[18:38] <diakopter> maybe he meant Zed-TeRminated

[18:38] <diakopter> yeah, I guess so

[18:39] <Teratogen> we used _

[18:39] <Teratogen> this_is_a_variable

[18:39] <diakopter> *facepalm*

[18:40] <diakopter> oh, you mean for non-camelcase..

[18:41] * diakopter gives up trying to figure out the context of that .. contribution

[18:41] <Teratogen> I find it much more aesthetically pleasing

[18:41] <Teratogen> diakopter, just a stray thought

[18:41] <diakopter> okay, I still don't see what camelcase you were referring to

[18:41] <diakopter> *which camelcase

[18:42] <[Coke]> r: my $tetatogen-code-style = "nonperlish";

[18:42] <diakopter> eh

[18:42] <diakopter> bye bye camelia?

[18:42] <[Coke]> probably didn't survive feather crashing.

[18:42] <diakopter> feather crashed?

[18:42] <[Coke]> oh. I broke the rakudo tests with my rakudo.parrot fuding.

[18:43] <diakopter> is it returning?

[18:43] <[Coke]> *fudgin*

[18:43] <[Coke]> diakopter: like, 14 hours ago.

[18:43] <diakopter> Juerd seems online

[18:43] <[Coke]> yes?

[18:44] <[Coke]> it came back, like 14 hours ago.

[18:44] <diakopter> oh.

[18:44] <[Coke]> so, camelia just needs to be restarted, I'd guess.

[18:45] *** konundra left
[18:45] <skids> BTW tera_togen is called "snake_case".  FWIW.

[18:46] <diakopter> seems feather3 isn't up

[18:46] <diakopter> Juerd: is feather3 returning?

[18:47] *** Croms joined
[18:52] *** konundra joined
[18:57] *** kingbeast left
[19:20] *** gfldex joined
[19:23] <diakopter> sorear: ping

[19:26] <diakopter> no dalek either I guess

[19:30] *** ajr joined
[19:36] *** colomon joined
[19:36] <diakopter> colomon: hi

[19:37] <colomon> o/

[19:37] <colomon> what's the word on #p6?

[19:37] <diakopter> ?

[19:37] * masak sees no word on it

[19:37] <diakopter> WORD

[19:38] <masak> oh, there it is.

[19:38] <colomon> just checking for news, I'm only getting online for about 15 minutes a day this week

[19:38] <colomon> Word!

[19:43] <colomon> Y'all didn't start another VM while I wasn't looking?

[19:43] *** pecastro joined
[19:44] <skids> Yeah how long until MOASTVM? :-)

[19:44] <skids> or MOARBETTERVM?

[19:45] <diakopter> YAVM was taken, I think

[19:45] <skids> .oO(you know a product space is saturated when...)

[19:49] <colomon> just in case anyone wonders, the NQP tests and code I just pushed have one test failure.  I know exactly what is going wrong, but am having trouble finding even a mildly elegant solution to the problem.  :\

[19:59] *** grondilu is now known as Guest91981

[19:59] *** ajr is now known as Guest2682

[20:00] *** Khisanth is now known as Guest88966

[20:00] *** Guest2682 is now known as ajr_

[20:00] <[Coke]> dalek also dead. whoops.

[20:00] <[Coke]> # 07/10/2013 839c3c3 rakudo++ (26132); niecza (81.48%); pugs (36.36%); rakudo.jvm (97.61%)

[20:01] <[Coke]> r: 25510 / (26132+72) # if rakudo.parrot passes all failing tests

[20:01] <[Coke]> r: say 25510 / (26132+72) # if rakudo.parrot passes all failing tests

[20:01] <[Coke]> 0.9735

[20:03] *** snoopy joined
[20:03] *** revdiablo left
[20:03] *** revdiablo joined
[20:05] <[Coke]> Is anyone planning on looking into Buf on the jvm?

[20:05] <[Coke]> (I may poke at that tonight)

[20:07] <colomon> [Coke]: I've been pondering what to tackle next.  But I don't have a good feel for what other people are working on?

[20:07] *** Bucciarati_ is now known as Bucciarati

[20:08] <[Coke]> colomon: I'm looking at: https://gist.github.com/coke/5879701

[20:08] <diakopter> well if you'd like to hurry nfg to rakudo-jvm, you could port my ucd2c.pl script in moarvm to emit java instead

[20:08] <colomon> [Coke]++

[20:09] <diakopter> instead/as well

[20:09] <[Coke]> looks like some dispatch issue, Buf, encode, a chdir bug, q:x, missing methods of various types, phasers..... there's some number stuff for you.

[20:10] <[Coke]> colomon: S32-num/power.rakudo.jvm,  S32-trig/cosech.t, S32-num/int.t, S32-num/rounders.t

[20:10] *** Croms left
[20:10] <colomon> aha!  those look like natural choices.  :)

[20:10] <colomon> [Coke]++

[20:10] <[Coke]> look for fails or rakudo.jvm todos

[20:11] <[Coke]> (or skips)

[20:11] <[Coke]> colomon++ doing the actual work. :)

[20:11] * [Coke] feels like the flight attendant, pointing at the obviously located exits.

[20:11] *** Guest88966 is now known as Khisanth

[20:17] <masak> r: sub powerset(@e) { (^(2 ** @e)).map({ [.fmt("%0" ~ +@e ~ "b").comb.pairs.grep(*.value).map({ @e[.key] })] }) }; say .perl for powerset(<a b c>)

[20:17] <masak> ENOCAMELIA :/

[20:17] *** stevan_ left
[20:17] <colomon> \o # gotta get back to the cabin….

[20:17] *** nyuszika7h left
[20:17] <masak> anyway, I'm curious if anyone can do "better" than the above :)

[20:18] *** pecastro left
[20:18] <masak> (the above pulls out all the supersets from all binary expansions 000 001 010 ... 111)

[20:18] *** colomon left
[20:18] <PerlJam> .oO( /me does better by having masak do all the work  ;)

[20:18] *** nyuszika7h joined
[20:19] <masak> heh

[20:19] *** [Coke] left
[20:19] *** breinbaas left
[20:19] *** breinbaas joined
[20:19] *** [Coke] joined
[20:19] *** PZt left
[20:26] *** thou left
[20:30] <timotimo> r: for Bool { say $_ }

[20:31] <timotimo> evalbot is offline

[20:31] <masak> aye.

[20:31] <timotimo> this used to say True\nFalse some time ago, now it just says (Bool)

[20:31] <timotimo> is that wrong? am i misremembering?

[20:32] <masak> seems right to me.

[20:32] <masak> you're probably misremembering.

[20:33] <masak> why would an enumeration type object automatically listify to its constituent enums? that feels a bit too magical to me.

[20:33] * Guest91981 agrees

[20:33] <Guest91981> maybe for Bool[] { say $_ }

[20:33] <PerlJam> timotimo: masak just said exactly what I was thinking too

[20:34] *** Guest91981 is now known as grondilu

[20:34] <FROGGS> $ perl6 -e 'for Bool:: { say $_ }'

[20:34] <FROGGS> "False" => Bool::False

[20:34] <FROGGS> "True" => Bool::True

[20:34] <FROGGS> :o)

[20:34] <masak> FROGGS++

[20:34] <masak> that reads very well.

[20:34] <grondilu> where is that documented?

[20:34] <masak> "for the things in the Bool namespace"

[20:34] <masak> grondilu: probably in S12 if anywhere.

[20:37] *** grondilu is now known as Guest88047

[20:39] *** konundra left
[20:40] <timotimo> ((^10) <<div>> (-3...3)).grep: { * !~~ Failure } - why does this sink the failure? :(

[20:45] *** stevan_ joined
[20:47] *** Tene_ joined
[20:47] *** kaare__ joined
[20:49] *** bakedb joined
[20:49] <flussence> ooh, that's a neat trick

[20:49] <flussence> r: say IO::.keys

[20:49] <flussence> (well, you get the idea)

[20:49] *** patspam_ joined
[20:50] *** segomos_ joined
[20:50] *** p5eval_ joined
[20:50] *** domidumont left
[20:51] *** mathw_ joined
[20:52] <flussence> ~ $ perl -MData::Dumper -wE 'say ::Dumper IO::'

[20:52] <flussence> $VAR1 = 'IO';

[20:52] <flussence> aww...

[20:52] *** jnthn joined
[20:52] *** vk left
[20:53] *** SmokeMac_ joined
[20:53] *** Guest88047 left
[20:53] *** kaare_ left
[20:53] *** drbean left
[20:53] *** segomos left
[20:53] *** p5eval left
[20:53] *** hugme left
[20:53] *** jnthn_ left
[20:53] *** SmokeMachine left
[20:55] *** drbean joined
[20:55] *** Tene_ left
[20:55] *** Tene_ joined
[20:55] *** Tene_ is now known as Tene

[20:56] *** bluescreen10 left
[20:57] *** bluescreen10 joined
[21:00] *** sjohnson joined
[21:01] *** skids left
[21:03] *** hugme joined
[21:03] *** ChanServ sets mode: +v hugme

[21:04] *** kaare__ left
[21:05] *** sjohnson1 joined
[21:06] *** nyuszika7h_ joined
[21:06] *** PZt joined
[21:08] *** hoelzro_ joined
[21:08] *** sjohnson left
[21:08] *** nyuszika7h left
[21:08] *** hoelzro left
[21:16] *** gfldex_ joined
[21:16] *** kshannon_ joined
[21:17] *** mikemol joined
[21:17] *** gfldex left
[21:17] *** mikemol_ left
[21:23] *** DarthGandalf joined
[21:25] *** vk_ joined
[21:27] *** Timbus left
[21:28] *** adu left
[21:28] *** labster joined
[21:31] *** vk_ left
[21:36] *** pmurias left
[21:40] *** alester left
[21:52] *** autumn joined
[21:52] *** Timbus joined
[22:02] *** vk_ joined
[22:05] *** lizmat joined
[22:05] *** FROGGS left
[22:06] *** pecastro joined
[22:10] <jnthn> evening, #perl6

[22:10] <yoleaux> 14:16Z <FROGGS_> jnthn: is that better? https://gist.github.com/FROGGS/5964614

[22:13] *** bluescreen10 left
[22:14] <lizmat> jnthn!

[22:15] *** BenGoldberg joined
[22:15] *** sivoais joined
[22:15] <timotimo> hey jnthn :)

[22:16] <timotimo> how was your cool-train-rides

[22:16] <timotimo> ?

[22:18] <jnthn> timotimo: Straightforward. Only the last one had a small delay :)

[22:18] <jnthn> I did some hacking :)

[22:18] *** vk_ left
[22:25] <lizmat> does anybody know whether Juerd knows that feather is down?

[22:25] <diakopter> feather1,2 are up; feather3 is down

[22:26] <masak> lizmat: Juerd rebooted feather last night.

[22:26] *** vk_ joined
[22:26] <masak> beyond that, I don't know what he knows.

[22:26] <lizmat> ok, I'll try to text him

[22:26] *** dmol left
[22:26] <diakopter> just ask about feather3

[22:27] <timotimo> jnthn: looking forward to seeing your hackings :)

[22:27] *** kingbeast joined
[22:27] <jnthn> But there's no feather to report it :P

[22:28] <timotimo> :(

[22:28] <timotimo> have you pushed it already? *looks*

[22:28] <jnthn> no...

[22:29] <diakopter> feather1 is up

[22:29] <diakopter> feather3 isn't

[22:29] <diakopter> er, now it is

[22:29] <lizmat> it is ?

[22:30] <diakopter> yes, attempting to start dalek and camelia

[22:30] <timotimo> thank you! :)

[22:30] <masak> diakopter++

[22:30] <jnthn> yay

[22:30] <lizmat> guess my text message worked  :-)

[22:31] <diakopter> uptime says 39 min

[22:32] <lizmat> ah, then it didn't

[22:38] <jnthn> diakopter: no luck?

[22:38] *** ajr_ left
[22:39] <diakopter> oh hm

[22:43] *** vk_ left
[22:46] *** camelia joined
[22:46] <diakopter> well, there's that one

[22:46] <diakopter> r: ;

[22:47] *** ChanServ sets mode: +v camelia

[22:47] <camelia> rakudo 29a248:  ( no output )

[22:47] <diakopter> r: ;

[22:47] <camelia> rakudo 29a248:  ( no output )

[22:48] *** dalek joined
[22:48] *** ChanServ sets mode: +v dalek

[22:49] <diakopter> heh.

[22:49] <lizmat> r: say "I'm back!"

[22:49] <camelia> rakudo 29a248: OUTPUT«I'm back!␤»

[22:50] <diakopter> there, the magnet dalek is up too now

[22:50] <lizmat> diakopter++

[22:51] <lizmat> .oO( should be some commit soon now )

[22:51] <diakopter> I'm not sure the psgi listener sorear wrote is running

[22:53] <jnthn> I just pushed an nqp one...no sign

[22:56] <diakopter> hm, this seems right

[22:56] <diakopter> somebody push something :)

[22:57] *** mattp__ joined
[22:57] <diakopter> (it likely won't get the ones github tried to send it while the listener wasn't running)

[22:57] <jnthn> here goes...

[22:58] <jnthn> aww

[22:58] <diakopter> give it a bit

[22:58] <diakopter> github might be backoffing

[23:00] <dalek> nqp: 90d0998 | jonathan++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/BootJavaInterop.java:

[23:00] <dalek> nqp: Enable interop to use untyped Java collections.

[23:00] <dalek> nqp: 

[23:00] <dalek> nqp: This provides a way to treat some 6model object as a plain old Java

[23:00] <dalek> nqp: object for a while, then later on recover the underlying 6model

[23:00] <dalek> nqp: object once again. This is useful when wanting to use some of the

[23:00] <dalek> nqp: built-in Java collection classes.

[23:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/90d09986a6

[23:00] <jnthn> ooh, there's the first

[23:00] <jnthn> So the second? :)

[23:00] <dalek> rakudo/nom: b19f72b | jonathan++ | / (2 files):

[23:00] <dalek> rakudo/nom: Provide basic threads and promises on JVM.

[23:00] <dalek> rakudo/nom: 

[23:00] <dalek> rakudo/nom: This builds upon the interop primitives and threading example by

[23:00] <dalek> rakudo/nom: sorear++ to provide a minimal Thread class, along with a thread pool

[23:00] <dalek> rakudo/nom: on which code can be scheduled to run. This in turn is used for a

[23:00] <dalek> rakudo/nom: basic implementation of promises/futures, with an async sub that

[23:00] <dalek> rakudo/nom: takes a code block and returns a Promise.

[23:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b19f72b298

[23:00] <masak> \o/

[23:01] <masak> those look like train commits :)

[23:01] <masak> NICE

[23:02] * lue can't wait to collect Promises that do IOU :)

[23:08] *** skids joined
[23:11] <Juerd> feather3 should be back now

[23:12] <Juerd> (I'm on a vacation and am not online very often.)

[23:13] <lizmat> Juerd++

[23:13] <jnthn> Juerd++

[23:13] <masak> Juerd++

[23:15] <jnthn> Here's some examples of what we can do with what I just commat: https://gist.github.com/jnthn/5971100

[23:16] <masak> nice! jnthn++

[23:17] <masak> 'night, #perl6

[23:18] <lizmat> night masak!

[23:20] <lizmat> also calling it a day, sleep&

[23:21] *** gfldex_ is now known as gfldex

[23:32] <tadzik> holy batman

[23:32] <tadzik> them commits

[23:36] *** arlinius left
[23:40] <gfldex> jnthn++ put threads into your perl6 so you can perl6 while you perl6

[23:49] <timotimo> jnthn: can you introspect if something is a promise?

[23:54] <snoopy> r: say ("!".."~").grep({/<punct>/})

[23:54] <camelia> rakudo b19f72: OUTPUT«! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~␤»

[23:54] <jnthn> ~~ Promise

[23:55] <snoopy> ..on jakudo I get: ! " # % & ' ( ) * , - . / : ; ? @ [ \ ] _ { }

[23:55] <timotimo> r: say +(("!".."~").grep(/<punct>/)) == +("!".."~")

[23:55] <camelia> rakudo b19f72: OUTPUT«False␤»

[23:59] *** btyler left
