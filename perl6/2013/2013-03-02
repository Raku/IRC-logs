[00:05] *** xenoterracide left
[00:06] *** xenoterracide joined
[00:26] *** Targen joined
[00:26] *** donaldh left
[00:27] *** thou joined
[00:27] *** labster joined
[00:29] *** fgomez joined
[00:30] *** donaldh joined
[00:31] *** donaldh left
[00:33] *** fgomez left
[00:33] *** fgomez joined
[00:35] * japhb_ finally gets a working self-hosted build of nqp-on-jvm ... and fib.nqp reports it's over 3.4x faster o/

[00:36] <japhb_> Even with startup time included, it's still 1.9x faster

[00:51] *** benabik joined
[00:55] *** Eddward joined
[01:04] <colomon> japhb_: faster than what?

[01:10] *** spider-mario left
[01:24] <Eddward> Is there any way that reads of or jumps based on uninitialized values wouldn't be bad in perl6?

[01:25] <swarley> I'm excited, the university near my house apparently has one of the 8 existing quantum computers in the united states now

[01:25] <Eddward> Looking at 116933, I get interesting results (I think) in valgrind with valgrind ./perl6 -e '(0 but Bool::True) and print qq{$_ } for 1..100;'

[01:26] <japhb_> colomon, faster than nqp-on-parrot

[01:27] *** japhb_ left
[01:40] *** grondilu left
[01:43] *** woosley joined
[01:46] *** bowtie left
[01:54] *** PacoAir left
[02:04] *** thou left
[02:14] *** benabik left
[02:23] *** Chillance left
[02:27] *** grr joined
[02:28] *** sqirrel_ joined
[02:28] *** FROGGS_ joined
[02:31] <grr> http://perlcabal.org/syn/S17.html says "Coroutines are covered in S07" but S07 is for "Lists and Iteration" and does not mention them in any way that I could recognise.

[02:32] *** sqirrel left
[02:33] *** FROGGS left
[02:33] *** benabik joined
[02:33] <diakopter> grr: gather/take utilizes coroutines

[02:40] *** fgomez left
[03:08] <lue> (to be fair, the word "coroutine" only occurs in S17 (twice), and never anywhere else in the specs)

[03:09] *** araujo left
[03:19] *** fgomez joined
[03:20] *** orafu left
[03:22] *** CharellKing joined
[03:24] *** orafu joined
[03:37] *** Khisanth joined
[03:48] *** ikrs left
[03:52] *** ikrs joined
[04:11] *** rindolf joined
[04:12] *** grr left
[04:19] *** raiph left
[04:34] *** preflex_ joined
[04:35] *** preflex left
[04:35] *** preflex_ is now known as preflex

[04:41] *** rindolf left
[04:46] *** sftp joined
[04:53] *** sunnavy joined
[05:11] *** woosley left
[05:17] *** sunnavy left
[05:17] *** sunnavy joined
[05:24] *** gcole__ left
[05:24] *** skids joined
[05:36] *** benabik_ joined
[05:36] *** benabik left
[05:36] *** benabik_ is now known as benabik

[05:39] *** sunnavy left
[05:39] *** sunnavy joined
[05:40] *** raiph joined
[05:45] *** sunnavy left
[05:46] *** sunnavy joined
[05:54] *** gcole joined
[05:57] *** Eddward left
[05:59] *** gcole left
[06:13] *** kaare__ joined
[06:26] *** gcole joined
[06:31] *** fgomez left
[06:31] *** skids left
[06:36] *** gcole left
[06:40] *** toddr_ joined
[06:40] *** am0c left
[06:53] *** benabik left
[07:02] *** kaare__ left
[07:02] *** gcole joined
[07:09] *** drKreso left
[07:12] *** drKreso joined
[07:12] *** drKreso left
[07:13] *** gcole left
[07:13] *** am0c joined
[07:30] *** araujo joined
[07:39] *** gcole joined
[07:42] *** drKreso joined
[07:45] *** ikrs left
[07:46] <moritz> \o

[07:46] <diakopter> hi

[07:47] <diakopter> moritz: the p6eval nqp-jvm dir and rebuild script are ready; I just need to add the p6eval target..

[07:47] <diakopter> but you can start setting up the rsync anytime you like

[07:48] <moritz> diakopter: or you can

[07:48] <diakopter> true... :)

[07:48] *** am0c left
[07:48] <drKreso> Hi

[07:49] <diakopter> hi

[07:49] <moritz> diakopter: build.pl runs the build-scripts/rebuild-$target.{sh,pl} script first, then sync.pl $target

[07:49] <moritz> hello drKreso 

[07:49] <drKreso> moritz: Hii, I get Cannot locate native library 'libmysqlclient.bundle' while panda installing MiniDBI on OSX

[07:50] *** gcole left
[07:50] <moritz> drKreso: do you have libmysqlclient installed?

[07:50] <moritz> drKreso: if yes, that's a bug in NativeCall, not MiniDBI

[07:50] <drKreso> I did install mysql libs for ruby?

[07:50] <moritz> (and I maintain DBIish, not MiniDBI)

[07:51] <drKreso> Yes definitely NativeCall - been compiling it since yesterday (big hurdle for me was that it doesn't detect darwin)

[07:52] <drKreso> moritz: So DBIish is in better shape? I thought you ported both (on github)

[07:54] <drKreso> DBIish installs fine - when invoking I get same message Cannot locate native library 'libmysqlclient.bundle'

[08:03] *** quester left
[08:16] *** gcole joined
[08:17] *** mattp_ joined
[08:19] <drKreso> NativeCall message: Cannot locate native library 'libmysqlclient.bundle'  When trying to talk to MySQL

[08:22] <FROGGS_> morning

[08:22] *** FROGGS_ is now known as FROGGS

[08:22] <drKreso> morning

[08:22] <sorear> o/ FROGGS

[08:23] <FROGGS> hi sorear, hi drKreso 

[08:23] <drKreso> FROGGS: I have many problems :) Good that you showed up

[08:24] *** grondilu joined
[08:24] <dalek> perl6-examples: bbdecbd | (L. Grondin)++ | rosalind/pmch-grondilu.pl:

[08:24] <dalek> perl6-examples: [rosaling] PMCH

[08:24] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/bbdecbdd23

[08:24] <FROGGS> ohh well

[08:24] <FROGGS> :o)

[08:26] <drKreso> FROGGS: I've been messing with NativeCall since yesterday. It turned out that it was misconfigured fro 64bit darwin… now I finally managed to set it straight, and on the next step I get Cannot locate native library 'libmysqlclient.bundle'  (DBIish call to mysql). Do you have any ideas?

[08:26] <grondilu> rosalind's PMCH this one was a nasty trap  :/

[08:26] <FROGGS> phenny: ask jnthn if it might be helpful to have a libp6cre.so/dll that does NFA? would this be useful for the JVM port or for rakudo@parrot? Btw, I have no idea (yet) what libpcre does, but I'll investigate...

[08:26] <phenny> FROGGS: I'll pass that on when jnthn is around.

[08:26] *** gcole left
[08:27] <FROGGS> drKreso: do you know where that library is on your disk?

[08:27] <FROGGS> is it called .bundle? there can be a .dylib too, so maybe nativecall is searching for the wrong file

[08:28] <drKreso> FROGGS: /usr/local/mysql/lib

[08:29] <FROGGS> so I guess it is either the library search path or wrong file extension

[08:29] <drKreso> it's .dylib

[08:29] <FROGGS> see

[08:29] <drKreso> I tried DYLD_LIBRARY_PATH="/usr/local/mysql/lib:$DYLD_LIBRARY_PATH" but no progress

[08:30] <FROGGS> drKreso: perl 5 asks gcc for the possible file extension on the current system, and gcc usually reports only one

[08:30] <drKreso> FROGGS - how can I test ?

[08:31] <FROGGS> i guess nativecall does the same trick, se there should be a hack in nativecall that tweaks these file-exts a bit

[08:31] <drKreso> oh - ok

[08:31] <FROGGS> lets have a look at its source

[08:32] <drKreso> I have a feeling NativeCall is not OSX guy, and that is source of my suffering :)

[08:32] <drKreso> jnthn that is

[08:32] <FROGGS> see this for example: https://github.com/jnthn/zavolaj/blob/master/lib/NativeCall.pm6#L117

[08:33] <FROGGS> OSX is a always a corner case when it comes to port things to it, they say it is just a BSD but that a lie

[08:34] <FROGGS> (thinking of fat libs for example)

[08:35] <drKreso> Ok so *VM is ENV variable right? Where is <config> and <load_ext> set?

[08:35] <FROGGS> drKreso: btw, you should be able to specify the full name to the "is native" trait

[08:35] <drKreso> ?

[08:35] <FROGGS> no, *VM is the virtual machine rakudo is running on, currently parrot

[08:36] <FROGGS> can you gist the code that is failing?

[08:37] <drKreso> https://gist.github.com/drKreso/5070183

[08:39] <FROGGS> ahh, so you/we have to patch DBIish

[08:40] <drKreso> FROGGS: ?

[08:40] <FROGGS> hold on

[08:41] <FROGGS> see https://github.com/perl6/DBIish/blob/master/lib/DBDish/mysql.pm6#L12

[08:41] <FROGGS> this line tells NativeCall to load libmysqlclient

[08:42] <FROGGS> NativeCall will append the file extension then, using the one given by parrot (which is the same gcc tells you)

[08:44] <FROGGS> drKreso: can you try that? perl6 -MNativeCall -e ' sub a is native("libmysqlclient") { * }; a() '

[08:44] <FROGGS> this should give you the same error message

[08:45] <drKreso> Wow, what? I mean it does, but I have no idea on what are you doing there?

[08:47] *** ObseLeTe joined
[08:47] <FROGGS> this line loads NativeCall, and tells it to load the mysqlclient library

[08:47] *** domidumont joined
[08:47] <FROGGS> and now try: perl6 -MNativeCall -e ' sub a is native("libmysqlclient.dylib") { * }; a() '

[08:49] *** domidumont left
[08:49] <drKreso> what is tho is native? a = load lib?

[08:49] <drKreso> Cannot locate symbol 'a' in native library 'libmysqlclient.dylib'

[08:50] <drKreso> but lib is found

[08:51] <FROGGS> "is native" after the subroutine name is called a trait

[08:52] <FROGGS> this trait for example applies some behaviour to the sub

[08:52] <FROGGS> like doing extra things when the sub is getting called

[08:52] <FROGGS> so, we found the lib, but there is no symbol a in it, but thats ok, just was a test

[08:53] *** gcole joined
[08:53] <FROGGS> I dont expected it to have that symbol :o)

[08:53] <FROGGS> so, I'd say we try to fix NativeCall to check for .dylibs too, okay?

[08:55] <drKreso> FROGGS: Got it, and how would I proceed on checking .dylibs?

[08:55] <drKreso> Oh , after first call, try second and than fail

[08:56] <FROGGS> at this point the libmysqlclient.bundle is expected: https://github.com/jnthn/zavolaj/blob/master/lib/NativeCall.pm6#L119

[08:56] <FROGGS> I'll have a look at that nqp:: sub

[09:00] <FROGGS> drKreso: I'm not sure, this might be a good place to do that: https://github.com/perl6/nqp/blob/master/src/ops/nqp_dyncall.ops#L851-L858

[09:01] <FROGGS> but I'll have to ask jnthn, because this is out of control for NativeCall then...

[09:02] <FROGGS> phenny: ask jnthn if he can scroll back to 10 a.m. please? :o)

[09:02] <phenny> FROGGS: I'll pass that on when jnthn is around.

[09:02] <drKreso> FROGGS: It looks like a good place

[09:03] <drKreso> FROSSS: I'll play with it for a bit :)

[09:03] *** gcole left
[09:05] *** toddr_ left
[09:06] <drKreso> FROGGS: One more question, now when I change code, what is fastest way to rebuild. I have a feeling mine is suboptimal

[09:06] <drKreso> At least for nqp

[09:06] <FROGGS> how many cores do you have?

[09:07] <FROGGS> (cpu cores)

[09:07] <drKreso> 4

[09:07] <FROGGS> good

[09:08] <FROGGS> so, after changing that C file within the nqp folder do: make -j4 && make install

[09:08] <FROGGS> then in the rakudo dir: make realclean && make -j4 && make install

[09:08] <FROGGS> takes about 3 to 4 minutes on my laptop

[09:12] <drKreso> FROGGS: Brilliant. BTW I think you guys are completely MAD (In a good way).

[09:12] <FROGGS> *g*

[09:12] <FROGGS> thanks

[09:14] *** X-Scale joined
[09:14] <drKreso> FROGGS: I get this in rakudo folder : make: *** No targets specified and no makefile found.  Stop.

[09:15] <FROGGS> that is weird

[09:15] <drKreso> Configure again?

[09:15] <FROGGS> well, then you have to say that it should use the given nqp, and not clone it again

[09:16] <drKreso> i runned configure and it was done instantly - no cloning

[09:17] <FROGGS> ohh

[09:17] <drKreso> CPU is sweating :) All 4 cores :)

[09:17] <FROGGS> that is my command after make realclean: perl Configure.pl --with-parrot ~/dev/rakudo/nqp/parrot/parrot --with-nqp=~/dev/nqp/nqp && make -j4 && make install

[09:17] <FROGGS> (I have a batch file for rebuilding)

[09:18] <FROGGS> all 4 cores, -j4 does that

[09:18] <drKreso> I think I will just steal it :0

[09:19] *** PacoAir joined
[09:22] <FROGGS> that's how software development works

[09:25] <drKreso> FROGGS :) I guess. One question - I do need to delete site, and reinstall panda, and modules?

[09:26] <FROGGS> there is a rebootstrap script, you need to run that

[09:26] <FROGGS> ask tadzik for help if this doesnt work :o)

[09:27] <FROGGS> it's in pandas directory somewhere

[09:30] *** gcole joined
[09:31] <FROGGS> drKreso: I'm afk for a while, enjoying the sun with kids

[09:31] <FROGGS> see ya

[09:32] <drKreso> FROGGS: By, thanks

[09:40] *** gcole left
[09:54] *** PacoAir left
[09:54] *** PacoAir joined
[10:00] <drKreso> I am in nqp_dyncall.ops (As far as I can tell this is C). I get     char *lib_name    = Parrot_str_to_cstring(interp, $2); and in that lib_name I would like to replace ".bundle" with ".dylib". But since I am rusty in C, and I can't find any documentation on Parrot_str_replace I don't know how to make it happen.

[10:00] *** jac50 joined
[10:00] <FROGGS> jnthn: t/spec/S32-str/substr.rakudo                            (Wstat: 256 Tests: 91 Failed: 0)

[10:00] <FROGGS>   Non-zero exit status: 1

[10:00] <FROGGS>   Parse errors: Bad plan.  You planned 92 tests but ran 91.

[10:02] *** ObseLeTe left
[10:05] *** Chillance joined
[10:07] *** gcole joined
[10:17] *** gcole left
[10:19] *** preflex left
[10:21] *** preflex joined
[10:24] *** isomorphisms joined
[10:25] *** saeidw joined
[10:25] *** saeidw left
[10:26] <drKreso> My try at replacing ".budnle" with ".dylib" https://gist.github.com/anonymous/5070416#L16-L23 it segfaults, and I need 10 minutes to rebuild. Can anybody see what I am doing wrong (problem is I don't remember C anymore, and don't know anything about parrot library)

[10:30] *** preflex left
[10:30] *** preflex joined
[10:43] *** kivutar joined
[10:43] <jnthn> drKreso: You probably need to Parrot_str_new that ".dylib"

[10:43] <phenny> jnthn: 08:26Z <FROGGS> ask jnthn if it might be helpful to have a libp6cre.so/dll that does NFA? would this be useful for the JVM port or for rakudo@parrot? Btw, I have no idea (yet) what libpcre does, but I'll investigate...

[10:43] <phenny> jnthn: 09:02Z <FROGGS> ask jnthn if he can scroll back to 10 a.m. please? :o)

[10:44] *** gcole joined
[10:44] <nwc10> jnthn: all tests sucessful (apart from the ICU one)

[10:44] <jnthn> nwc10: And that test passes for you with selftest, I guess? :)

[10:44] *** rindolf joined
[10:44] <nwc10> yes.

[10:44] <jnthn> drKreso: On line 18, the argument to Parrot_str_replace

[10:45] <jnthn> FROGGS: I think the substr thing just means you need to pull

[10:45] <jnthn> (Rakudo)

[10:45] <jnthn> The test covers a bug I fixed a day or so ago.

[10:45] <drKreso> jnthn:       STRING  * lib_name_alternative = Parrot_str_replace(interp, $2, pos, 6, Parrot_str_new(interp, ".dylib", 0)));

[10:47] <jnthn> Wait, what's the 6 argument?

[10:47] <drKreso> jnthn: I have no idea :)

[10:48] <drKreso> What needs fro be there? Number of chars in repl string?

[10:48] <jnthn> ah, it's the number of characters you want to replace

[10:48] <drKreso> So is it zero based? 5 or 6?

[10:49] <jnthn> r: say '.bundle'.chars

[10:49] <p6eval> rakudo 40069f: OUTPUT«7␤»

[10:49] <jnthn> That number

[10:49] <jnthn> No, it's not an offset, it's a number of chars.

[10:50] <drKreso> So it means start at pos, remove x(7) and put string

[10:50] <jnthn> yeah

[10:50] <drKreso> makes sense now that you say it

[10:51] <jnthn> FROGGS: On the NFA thing, the NFA evaluator is actually not all that much code, but also its purpose is to calculate a ranking of longest tokens, so it's quite specialized at that.

[10:52] *** preflex left
[10:52] <jnthn> bbi15

[10:53] *** preflex joined
[10:54] *** pmurias joined
[10:54] *** gcole left
[10:56] *** CharellKing left
[10:59] *** preflex left
[10:59] *** preflex_ joined
[10:59] *** preflex_ is now known as preflex

[11:06] <drKreso> jnthn: https://gist.github.com/drKreso/5070534 Now I get Illegal instruction: 4

[11:08] *** PacoAir left
[11:10] <moritz> PSA: the server on which the IRC logs are hosted id going down for reboot (and extra backup space) today

[11:10] <nwc10> so there will be a gap in the logging?

[11:10] <moritz> yes

[11:11] <nwc10> and we can all say nasty things about Perl 4 without fear of repercussion?

[11:12] <sorear> um

[11:12] <sorear> I can't remember if preflex has log functionality

[11:13] <diakopter> moritz: maybe you could reserve a few hundred gaps in your autoincrement key for each channel so you can go in and fixup the gap in logs </tongue-in-cheeck>

[11:13] <diakopter> *cheek

[11:16] <moritz> there's lots of stuff I could do, but in the end it's not worth the effort IMHO

[11:16] <moritz> it's not a credit card processing audit log; it's just some more-or-less random conversation that's being logged

[11:17] <diakopter> right, I was kidding, hence the </tongue-in-cheek>

[11:17] <moritz> I know, but I also know that others aren't kidding bout this topic

[11:17] <huf> just patch in something from frogs

[11:17] <huf> worked for jurassic park

[11:18] <nwc10> is one of the most useful out-sourceable tasks currently to figure out how to chip away at the PIR and pir:: bits of Rakudo?

[11:18] *** spider-mario joined
[11:19] <moritz> yes

[11:19] <moritz> huf: maybe FROGGS would mind :-)

[11:20] <huf> :)

[11:21] *** gcole joined
[11:26] *** pmurias left
[11:28] *** PacoAir joined
[11:31] *** gcole left
[11:38] <jnthn> drKreso: Oh, I missed something... :(

[11:38] <jnthn> *lib_name_2 = Parrot_str_to_cstring(interp, lib_name_alternative);

[11:38] <jnthn> That * should not be there

[11:39] <jnthn> Also I'd put in a check after it tries to locate the thing with the second name.

[11:39] <jnthn> To check it isn't coming back with null there.

[11:39] *** James_ joined
[11:39] <diakopter> I'm in your pointers dereferencing all the things

[11:39] *** James_ is now known as Guest93749

[11:40] <drKreso> jnthn so if there is no "bundle" pos == NULL ?

[11:41] <drKreso> https://gist.github.com/drKreso/5070628

[11:41] *** jac50 left
[11:42] <jnthn> drKreso: pos is an integer, so just check pos < 0

[11:42] <jnthn> er, if pos < 0 it wasn't found, that is

[11:42] <drKreso> thanks

[11:42] *** jevin_ joined
[11:43] *** gcole joined
[11:47] *** gcole left
[11:48] *** pmurias joined
[11:48] *** drKreso left
[11:48] *** drKreso joined
[11:55] <drKreso> jnthn: great success :) DBD::mysql connection failed: Unknown database 'zavolaj' - DBIish is working

[11:55] *** drKreso left
[11:55] <jnthn> \o/

[11:56] <moritz> now create that database :-)

[11:56] <moritz> or connect to a different one

[12:00] *** mberends left
[12:04] <moritz> r: say (1, 2, 3).Array.[0] = 42

[12:04] <p6eval> rakudo 40069f: OUTPUT«42␤»

[12:06] <FROGGS> jnthn: I thought I pulled before that, sorry for the accusation :o)

[12:08] <jnthn> FROGGS: np :)

[12:09] *** kaare__ joined
[12:12] *** moritz joined
[12:13] *** kivutar left
[12:15] <moritz> https://gist.github.com/moritz/5070740 # my first summary of the container/assignment/binding stuff we discussed three days ago

[12:16] <moritz> feedback welcome

[12:17] <moritz> I left out the detour about closures, because it doesn't add much to this topic

[12:23] *** PacoAir left
[12:24] *** PacoAir joined
[12:25] <moritz> nr: my @a = 1, 2, 3; @a[0] := my $x; $x = 23; say @a

[12:25] <p6eval> rakudo 40069f, niecza v24-24-gbdc3343: OUTPUT«23 2 3␤»

[12:25] *** SamuraiJack joined
[12:26] <FROGGS> moritz: will read it after lunch

[12:29] *** pmurias left
[12:34] <Ulti> moritz it reads well

[12:39] *** denisboyun_ joined
[12:42] *** pmurias joined
[12:47] <diakopter> moritz++

[12:47] <dalek> rakudo/nom: ec1c81a | jnthn++ | src/ (2 files):

[12:47] <dalek> rakudo/nom: Toss dead code.

[12:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ec1c81ae2d

[12:49] <colomon> rn: grammar A { token this-is-a-test { "hello" }; }; 

[12:49] <p6eval> rakudo 40069f, niecza v24-24-gbdc3343:  ( no output )

[12:51] *** gcole joined
[12:52] <colomon> rn: grammar A { token this-is-a-test { "hello" }; }; say A.parse("hello", A)

[12:52] <p6eval> rakudo 40069f: OUTPUT«Too many positional parameters passed; got 3 but expected 2␤  in method parse at src/gen/CORE.setting:10788␤  in block  at /tmp/6Xb_Q6rzon:1␤␤»

[12:52] <p6eval> ..niecza v24-24-gbdc3343: OUTPUT«Unhandled exception: Excess arguments to Grammar.parse, used 2 of 3 positionals␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (Grammar.parse @ 1) ␤  at /tmp/feIbmftmoS line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4233 (ANON @ 3)…

[12:52] <colomon> rn: grammar A { token this-is-a-test { "hello" }; }; say A.parse("hello", :rule<A>)

[12:52] <p6eval> niecza v24-24-gbdc3343: OUTPUT«Unhandled exception: Unable to resolve method A in type A␤  at /home/p6eval/niecza/lib/CORE.setting line 2924 (Grammar.parse @ 5) ␤  at /tmp/WHrpX46a7Y line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4233 (ANON @ 3) ␤  at /home/p6eval…

[12:52] <p6eval> ..rakudo 40069f: OUTPUT«No such method 'A' for invocant of type 'A'␤  in method parse at src/gen/CORE.setting:10791␤  in block  at /tmp/0YBPgVBwub:1␤␤»

[12:52] <colomon> rn: grammar A { token this-is-a-test { "hello" }; }; say A.parse("hello", :rule<this-is-a-test>)

[12:52] <p6eval> rakudo 40069f, niecza v24-24-gbdc3343: OUTPUT«｢hello｣␤␤»

[12:53] * colomon wonders how long he has been unnecessarily using underscores instead of dashes in grammars

[12:56] <FROGGS> t/spec/S05-metasyntax/charset.rakudo                    (Wstat: 0 Tests: 36 Failed: 0)

[12:56] <FROGGS>   TODO passed:   10

[12:56] <FROGGS> Files=724, Tests=26827, 625 wallclock secs ( 8.91 usr  1.41 sys + 2089.19 cusr 135.13 csys = 2234.64 CPU)

[12:56] <FROGGS> Result: PASS

[12:56] <FROGGS> \o/

[12:56] <FROGGS> my patch is working, finally

[13:00] *** gcole left
[13:00] *** ObseLeTe joined
[13:03] <jnthn> FROGGS: yay...is that the cclass one?

[13:08] <pmurias> jnthn: bootint in qast_6model.t taking a :named('type') is an error?

[13:08] <pmurias> s/error/mistake/

[13:10] <jnthn> pmurias: It just means it's being passed as a named parameter type to the surrounding call, iirc

[13:14] *** PacoAir left
[13:14] *** PacoAir joined
[13:25] *** moritz left
[13:25] <FROGGS> jnthn: it is

[13:27] *** gcole joined
[13:27] <dalek> nqp-jvm-prep: ccb441b | jnthn++ | src/org/perl6/nqp/runtime/ (2 files):

[13:27] <dalek> nqp-jvm-prep: Further gutting of invokeInternal.

[13:27] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/ccb441bb89

[13:27] <dalek> nqp-jvm-prep: f000cc7 | jnthn++ | / (4 files):

[13:27] <dalek> nqp-jvm-prep: Move unwind logic out of invokeInternal.

[13:27] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/f000cc7c1d

[13:33] *** moritz joined
[13:33] <diakopter> I wish gist.github had a "turn on word wrap" option

[13:34] *** drKreso joined
[13:34] *** arnsholt joined
[13:34] <diakopter> that, if edited by the gist owner would set the default for anyone else to view it, but then others can toggle it too if they want for themselves.  </wish>

[13:37] *** gcole left
[13:38] * timotimo builds nqp-jvm-prep to have a look-see what's new

[13:39] <jnthn> diakopter: If it's just text, then set the filename to be foo.md or so

[13:39] <jnthn> diakopter: And it will treat it as markdown and wrap paragraphs etc.

[13:39] <timotimo> is there a make target to create a full nqp as a jvm thingie yet?

[13:40] *** drKreso_ joined
[13:40] <timotimo> oh, it seems like it's already doing that

[13:40] *** drKreso_ left
[13:41] <timotimo> oh, so many files

[13:45] <timotimo> hm, can't make selftest: Error: Could not find or load main class NQPJVM  -  what make target gives that? seems like that's missing from the dependencies of the selftest target

[13:45] <jnthn> timotimo: In the Makefile try editing selftest and turning the : in there into ;

[13:45] <jnthn> in the -cp argument

[13:45] <timotimo> i'll try

[13:46] <timotimo> ah, that works

[13:46] <timotimo> it's the portability thing i read about recently?

[13:47] *** bowtie joined
[13:48] *** cogno joined
[13:51] <timotimo> well, the tests all do succeed. pretty cool :)

[13:51] *** moritz left
[13:53] *** am0c joined
[13:57] *** ggoebel_ joined
[13:59] <drKreso> Hi, is there a postgres DBIish adapter?

[13:59] <ggoebel_> perlgeek.de appears to be down... perl6 irc logs down with it

[14:03] <jnthn> ggoebel_: Planned maint.

[14:04] *** gcole joined
[14:04] <ggoebel_> thx

[14:05] *** cognominal joined
[14:09] *** Eddward joined
[14:10] <drKreso> Oh there is, 'Pg' … sorry

[14:10] *** cogno left
[14:12] *** grondilu left
[14:13] *** moritz joined
[14:15] *** gcole left
[14:15] *** PacoAir left
[14:15] *** PacoAir joined
[14:19] *** cogno joined
[14:21] *** Psyche^ joined
[14:25] *** Patterner left
[14:25] *** Psyche^ is now known as Patterner

[14:30] *** LylePerl joined
[14:31] *** census joined
[14:37] *** cogno left
[14:38] *** xinming left
[14:41] *** gcole joined
[14:41] *** denisboyun__ joined
[14:42] *** denisboyun_ left
[14:44] *** raiph_ joined
[14:49] *** moritz left
[14:50] <drKreso> moritz: I got MySQL working with DBIish… Now when I try Pg, i Get No such method 'execute' for invocant of type 'Nil' on line  lib/DBDish/Pg.pm6:379 (https://gist.github.com/drKreso/5071340)

[14:51] *** gcole left
[14:55] *** cognominal left
[15:00] <FROGGS> execute is called on the return value of prepare, right?

[15:00] <FROGGS> drKreso: what if prepare failed?

[15:01] <drKreso> Yes it says prepared failed when i set raise error

[15:01] <drKreso> But why?

[15:01] <drKreso>  in method prepare at lib/DBDish/Pg.pm6:357 shell returned 1

[15:01] *** raiph_ left
[15:02] *** raiph left
[15:02] *** raiph joined
[15:03] *** cognominal joined
[15:05] <FROGGS> because your sql statement is wrong somehow?

[15:06] <drKreso> Nope i double checked, when it's wrong the error is different.  even "select 1" fails the same way

[15:06] <FROGGS> like not enough bind variables or so

[15:06] <FROGGS> hmm

[15:07] <drKreso> For example: ERROR:  syntax error at or near "form"  LINE 1: SELECT * form korisnici

[15:07] <FROGGS> ya

[15:07] <FROGGS> no idea

[15:08] *** Em_ joined
[15:08] *** Em_ left
[15:14] *** cognominal left
[15:18] *** gcole joined
[15:18] *** SamuraiJack_ joined
[15:19] *** cognominal joined
[15:19] *** SamuraiJack left
[15:25] <nwc10> jnthn: the usual.

[15:25] *** xinming joined
[15:27] <dalek> nqp-jvm-prep: da4616f | jnthn++ | / (3 files):

[15:27] <dalek> nqp-jvm-prep: Prepare for handling callsite as arg, not field.

[15:27] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/da4616f902

[15:27] <dalek> nqp-jvm-prep: 0408144 | jnthn++ | src/org/perl6/nqp/jast2bc/JASTToJVMBytecode.java:

[15:27] <dalek> nqp-jvm-prep: Better handling of arg names in assembler.

[15:27] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/0408144222

[15:27] <dalek> nqp-jvm-prep: 2159682 | jnthn++ | / (5 files):

[15:27] <dalek> nqp-jvm-prep: Eliminate callsite field in CallFrame.

[15:27] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/21596828fb

[15:28] *** gcole left
[15:29] <jnthn> nwc10: hah, timing win :)

[15:30] <nwc10> bother. yes. *that* usual also :-)

[15:34] *** SunilJoshi joined
[15:36] *** grondilu joined
[15:43] *** drKreso left
[15:44] <nwc10> jnthn: yes, that one *also* passes everything (except that one ICU test, when using parrot)

[15:44] <nwc10> cue dalek...

[15:44] * jnthn goes for a walk before it gets dark :)

[15:44] <jnthn> bbiab

[15:46] *** cognominal left
[15:48] *** thou joined
[15:51] *** X-Scale left
[15:52] *** thou left
[15:53] *** thou joined
[15:55] *** gcole joined
[16:07] *** gcole left
[16:09] *** fgomez joined
[16:13] *** PacoAir left
[16:15] *** ObseLeTe left
[16:32] *** gcole joined
[16:41] *** mtk left
[16:41] *** thou left
[16:43] *** gcole left
[16:45] *** mtk joined
[16:47] *** denisboyun joined
[16:47] *** denisboyun__ left
[16:48] *** SunilJoshi left
[16:56] *** denisboyun left
[16:59] *** PacoAir joined
[17:01] *** stevan_ joined
[17:09] <nwc10> jnthn: currently NQPJVM is about a factor of 10 faster than nqp at running that levenstein test code. Not to be sniffed at.

[17:09] *** gcole joined
[17:12] <japhb> Is the irclog down?

[17:12] <jnthn> japhb: Yes, for planned maint.

[17:13] *** gcole__ joined
[17:13] *** gcole left
[17:13] <nwc10> og yes

[17:13] <nwc10> Perl 4 - you're just Perl 3 with lipstick :-)

[17:13] <japhb> jnthn, ah, thank you

[17:14] * japhb backlogs the old fashioned way -- with the scrollbar.

[17:17] *** gcole__ left
[17:23] *** uvtc joined
[17:23] *** ObseLeTe joined
[17:23] <FROGGS> arrr! hunting a bug within my nqp-patch wich is a typo in a test file >.<

[17:23] <FROGGS> 3 hours

[17:23] * FROGGS cries

[17:24] <uvtc> Hm. Unable to reach irc logs.

[17:24] <FROGGS> uvtc: moritz does some maintenance

[17:24] <geekosaur> [02 12:12] <japhb> Is the irclog down?

[17:24] <geekosaur> [02 12:12] <jnthn> japhb: Yes, for planned maint.

[17:26] <uvtc> Sorry. I'm probably the nth person to log on and bring it up. :)

[17:26] <jnthn> We should just refer people to the l...oh, wait...

[17:26] <jnthn> FROGGS: argh!

[17:26] *** arnsholt left
[17:26] <FROGGS> my own typo of course

[17:27] <FROGGS> commented out a test: is...

[17:27] <FROGGS> commented it in, deleted the i by accident, the other tests are "ok" tests

[17:27] <dalek> rakudo/nom: 0087ce6 | jnthn++ | src/Perl6/Ops.pm:

[17:27] <dalek> rakudo/nom: Remove redundant op mappings.

[17:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0087ce60c0

[17:27] <dalek> rakudo/nom: 7de7725 | jnthn++ | src/ops/perl6.ops:

[17:27] <dalek> rakudo/nom: Toss two dead ops.

[17:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7de7725ed0

[17:27] <FROGGS> so typed o instead

[17:28] <FROGGS> took a while to see that there is "os"

[17:28] <jnthn> r: os

[17:28] <p6eval> rakudo ec1c81: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤    os used at line 1␤␤»

[17:28] <jnthn> Did it not tell you what?

[17:28] <jnthn> *that

[17:29] <FROGGS> no

[17:29] <FROGGS> t/spec/S05-modifier/perl5_5.rakudo (Wstat: 256 Tests: 0 Failed: 0)

[17:29] <FROGGS>   Non-zero exit status: 1

[17:29] <FROGGS>   Parse errors: No plan found in TAP output

[17:29] <japhb> (from backlog)  nwc10: I think jnthn is beginning to use your success reports as a reminder to push the next batch.  :-)

[17:30] <FROGGS> then I was running the test line itself and got the msg

[17:30] <japhb> At least with all the people asking why the irclog is down, moritz can feel good that it is in heavy use.  :-)

[17:32] *** uvtc left
[17:33] *** uvtc joined
[17:51] <grondilu> how can I have NativeCall look for a library in the current directory?

[17:51] <jnthn> It just passes whatever you write on to dlsym, adding an extension. So is native('./libmonkey') or so may work

[17:52] <jnthn> er, not dlsym. dlload

[17:54] <grondilu> worked!  this module is amazing

[17:55] <dalek> nqp-jvm-prep: d0c8319 | jnthn++ | / (3 files):

[17:55] <dalek> nqp-jvm-prep: Start passing along CodeRef.

[17:55] <dalek> nqp-jvm-prep: 

[17:55] <dalek> nqp-jvm-prep: This is in preparation for moving CallFrame creation out of invoke.

[17:55] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/d0c8319d88

[17:55] <dalek> nqp-jvm-prep: 1359b26 | jnthn++ | / (3 files):

[17:55] <dalek> nqp-jvm-prep: Move CallFrame creation inside invokee.

[17:55] <dalek> nqp-jvm-prep: 

[17:55] <dalek> nqp-jvm-prep: This gets invokeInternal down to doing nothing once it settles on a

[17:55] <dalek> nqp-jvm-prep: method handle to invoke; everything else is inside the method.

[17:55] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/1359b260e9

[17:55] <dalek> perl6-examples: 04215ab | (L. Grondin)++ | rosalind/lcs. (4 files):

[17:55] <dalek> perl6-examples: adding C module for longuest common subsequence

[17:55] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/04215ab609

[18:01] *** am0c left
[18:02] *** am0c joined
[18:03] *** wk left
[18:10] <grondilu> jnthn: I get a "Malformed UTF-8 string" with this code:  http://paste.siduction.org/20130302180856

[18:10] <grondilu> yet the code works with shorter strings

[18:10] <grondilu> the C code is from rosettacode:  http://rosettacode.org/wiki/Longest_common_subsequence

[18:10] <FROGGS> can you gist the code of that library?

[18:11] <grondilu> no ned for a gist, it's really the exact same as in RC:  http://rosettacode.org/wiki/Longest_common_subsequence#C

[18:14] <grondilu> compiled with: $ gcc -o lcs.o -fPIC -c lcs.c; gcc -shared -s -o lcs.so lcs.o

[18:18] *** gcole joined
[18:18] <jnthn> grondilu: Odd. Does it happen when handling the return value? That is, does it make it into the C code?

[18:18] <TimToady> does NativeCall have any access to the bitsizes of the actual C types of the calls its making, like off_t, size_t, or time_t?  or is it just guessing?

[18:19] <FROGGS> TimToady: you have to specify it in perl

[18:19] <grondilu> jnthn: I guess compilation is fine since it ran well with shorter strings.

[18:19] <TimToady> which means it will be wrong on a different machine...

[18:20] <FROGGS> grondilu: there is a char bufr[40]

[18:20] <TimToady> would be nice to have at least the level of portability provided by C itself...

[18:20] <jnthn> int means "machine's native integer", so that one is already covered

[18:20] <FROGGS> grondilu: maybe that not enough?

[18:21] <jnthn> Yes, having a size_t available would be good too.

[18:21] <TimToady> well, but if we don't know what type off_t maps to, we're kinda hosed

[18:21] <uvtc> Oooh. Would be nice if the repl could remember what I typed in previous sessions, so I could up-arrow to reach longer passages without needing to re-type them.

[18:21] * colomon has started using the github app to track what jnthn++ is doing on nqp-jvm when colomon is away from IRC

[18:21] <TimToady> seems that info has to be out there somewhere

[18:21] <TimToady> or debuggers wouldn't work

[18:22] <grondilu> FROGGS: of course that's not enough.  What's the point of using a C library if it's not for tough jobs

[18:22] <grondilu> ?

[18:23] <TimToady> the basic problem is that using a C library is only half the solution; using /usr/include is the other half

[18:23] * grondilu really wonders where this 40 comes from. 

[18:24] <geekosaur> you can get it from the symbol table, but only to a point: you get the size, but not e.g. signed-ness unless it has debug symbold

[18:24] <nwc10> jnthn: A: "works" on "my" machine

[18:24] <nwc10> B: Time for that levenstein code was: time        = 195.74100017547607

[18:24] <geekosaur> and then you have to know how to parse the various kinds of debug symbols out there...

[18:24] <nwc10> is now: time        = 181.15300011634827

[18:25] <TimToady> well, we can get signedness from the Perl end, if we can get the size from the C end

[18:25] <nwc10> rn: say 181.15300011634827/ 195.74100017547607

[18:25] <p6eval> rakudo 7de772: OUTPUT«0.925472946158188190␤»

[18:25] <p6eval> ..niecza v24-24-gbdc3343: OUTPUT«0.9254729461581882␤»

[18:25] <nwc10> 7.5% win!

[18:25] <TimToady> now do that 100 more times :)

[18:26] <TimToady> n: say 0.9254729461581882 ** 100

[18:26] <p6eval> niecza v24-24-gbdc3343: OUTPUT«0.00043288524025064125␤»

[18:26] <TimToady> yah, that's about right :)

[18:27] <grondilu> FROGGS: oops sorry I hadn't realize the 40 was in lcs.c!  silly of me.

[18:27] <uvtc> Is there a built-in Perl 6 pretty-printer? Something to show larger data structures with things lined up a bit?

[18:27] <grondilu> (I thought it was in NativeCall.  I feel stupid now)

[18:28] <FROGGS> uvtc: "say" that structure?

[18:29] <FROGGS> uvtc: this calls .gist on it which should do the job (that is the one you can improve on you own classes)

[18:29] <uvtc> FROGGS: Yes, that's that I'm currently doing. Works pretty well, though for nested data structures it would be nice to see things lined up vertically.

[18:30] <uvtc> FROGGS: Thanks.

[18:30] <FROGGS> uvts: than we should patch its .gist method

[18:30] *** uvtc left
[18:32] <TimToady> uvtc: I think gist should do a better job of prettying up long things

[18:32] <FROGGS> he has left

[18:32] <FROGGS> I wanted to ask him to provide a sample structure and the output he would like to have

[18:34] <FROGGS> since tweaking .gist should be fun

[18:35] <dalek> perl6-examples: 52eed22 | (L. Grondin)++ | rosalind/lcsq-grondilu.pl:

[18:35] <dalek> perl6-examples: LCSQ with NativeCall

[18:35] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/52eed22762

[18:36] *** avi_ joined
[18:38] <dalek> perl6-examples: c3a73c8 | (L. Grondin)++ | rosalind/lcs (6 files):

[18:38] <dalek> perl6-examples: renaming C functions

[18:38] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/c3a73c894a

[18:39] *** ObseLeTe left
[18:44] *** Liz joined
[18:45] *** Liz is now known as lizmat

[18:46] *** SamuraiJack_ left
[18:47] *** Luketheduke_ joined
[18:50] <dalek> nqp: 8fba6d4 | (Tobias Leich)++ | / (5 files):

[18:50] <dalek> nqp: use node name instead of subtube to identify cclass codes

[18:50] <dalek> nqp: 

[18:50] <dalek> nqp: This allows us to set zerowidth on character classes. This patch

[18:50] <dalek> nqp: build the AST of cclass substractions in a way that make <[\w]-[\d]>

[18:50] <dalek> nqp: work.

[18:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8fba6d4d60

[18:51] *** Luketheduke_ left
[18:53] <dalek> rakudo/nom: 82de32e | (Tobias Leich)++ | tools/build/NQP_REVISION:

[18:53] <dalek> rakudo/nom: bump nqp rev for cclass subtractions

[18:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/82de32e159

[18:54] <jnthn> -        %cclass_code<nl> := '.CCLASS_NEWLINE';

[18:54] <jnthn> Was that bit needed?

[18:55] <jnthn> It seems before n vs. nl was literal vs magical newline handling.

[18:55] <FROGGS> but \n was always translated to nl

[18:56] <FROGGS> nqp: say("\r\n" ~~ /\n/)

[18:56] <p6eval> nqp: OUTPUT«

[18:56] <FROGGS> r: say("\r\n" ~~ /\n/)

[18:56] <p6eval> rakudo 7de772: OUTPUT«｢

[18:57] <jnthn> Also, it looks like the codegen isn't actually looking for zerowidth?

[18:58] <FROGGS> jnthn: how can you say that you want literal or magical handling?

[18:58] <jnthn> FROGGS: Hm, maybe there's not a way...I just suspect Pm had a reason for the distinction. 

[19:03] * jnthn away for dinner

[19:05] <FROGGS> <jnthn> Also, it looks like the codegen isn't actually looking for zerowidth? <-- what do you mean?

[19:09] *** ObseLeTe joined
[19:09] <FROGGS> jnthn: about \n, I'd say I open an issue with my commit attached, and ask pmichaud for guidance

[19:10] <dalek> perl6-examples: 8eea355 | (L. Grondin)++ | rosalind/lcsq. (2 files):

[19:10] <dalek> perl6-examples: removing binaries

[19:10] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/8eea355b16

[19:20] *** gcole left
[19:20] *** gcole joined
[19:22] *** thundergnat joined
[19:28] <colomon> "given" a match, is there a handy way to "when" on a subrule?

[19:29] <colomon> so given something like token mode { <major> | <mixolydian> }, I'd like to say given $/<mode> { when .<major> { do something major } when .<mixolydian> { do something mixolydian } } .  That syntax seems to compile but not actually work.

[19:30] <jnthn> Remember that when does smartmatching.

[19:31] <colomon> jnthn: yes, I remember.

[19:31] <jnthn> So you're doing $_ ~~ $_<major>

[19:31] <TimToady> try :major

[19:31] <TimToady> no wait, that's a method call

[19:31] <jnthn> that...yeah.

[19:31] <colomon> pity, it looked so elegant

[19:32] <TimToady> so, why not just use an 'if' instead?

[19:32] <colomon> TimToady: there are actually nine different modes.  above is vastly simplified

[19:33] <TimToady> when so .<major>

[19:33] <jnthn> ooh, that one should work...

[19:33] <TimToady> though a Match is supposed to be like a Bool, by recent spec

[19:33] <colomon> \o/

[19:33] <TimToady> so when .<major> should work

[19:33] <colomon> TimToady++

[19:34] <TimToady> so 'when .<major>' should work

[19:35] <TimToady> (just to be clear)

[19:35] <colomon> understood the first time

[19:39] <colomon> is there something wrong with this syntax?  <accidental=["#" | "b"]>?

[19:39] <colomon> it's parsing, but it doesn't seem to be working the way I expected it to.

[19:40] * jnthn soulda expected $<accidental>=["#" | "b"]

[19:40] <jnthn> *woulda

[19:40] <jnthn> <[...]> is a char class

[19:43] *** kivutar joined
[19:53] <nwc10> nqp-jvm doesn't work with nqp HEAD (8fba6d4d60b0795ec926a9384cb31cd8c75b917e)

[19:54] <nwc10> nqp nqp-jvm-cc.nqp --no-regex-lib --target=classfile --output=NQPHLLJVM.class nqp-src/NQPHLL.pm

[19:54] <nwc10> Method 'panic' not found for invocant of class 'QAST::CompilerJAST'

[19:54] * nwc10 snips 2 screenfuls of Java backtrace

[19:54] <nwc10> it must get paid by the line. Enterprise!

[19:55] <jnthn> oh

[19:55] <jnthn> yeah, 'cus FROGGS just changed QAST...

[19:56] <nwc10> yes, I see the string "panic" in his commit

[19:56] *** ObseLeTe left
[19:58] *** stevan__ joined
[20:01] *** stevan_ left
[20:09] *** uvtc joined
[20:09] <FROGGS> what did I do? ó.ò

[20:10] <FROGGS> ahh

[20:10] <FROGGS> is it a big problem?

[20:11] <FROGGS> nr: say "\r" ~~ /\n+/

[20:11] <p6eval> rakudo 82de32, niecza v24-24-gbdc3343: OUTPUT«｢

[20:11] <FROGGS> weird :o)

[20:13] <TimToady> thundergnat: I took the liberty of Unicodifying your bells :)

[20:13] <thundergnat> :)

[20:13] <thundergnat> Feel free

[20:14] <jnthn> FROGGS: No, just means that the cross-comp needs syncing with the changes

[20:16] <diakopter> you're a cross-comp

[20:19] <FROGGS> nr: say "abc123def" ~~ /<[w]-[\d]>/

[20:19] <p6eval> rakudo 82de32, niecza v24-24-gbdc3343: OUTPUT«#<failed match>␤»

[20:19] <FROGGS> nr: say "abc123def" ~~ /<[\w]-[\d]>/ # -.-

[20:19] <p6eval> rakudo 82de32, niecza v24-24-gbdc3343: OUTPUT«｢a｣␤␤»

[20:19] <FROGGS> nr: say "abc123def" ~~ /<[\w]-[\d]>+/

[20:19] <p6eval> rakudo 82de32, niecza v24-24-gbdc3343: OUTPUT«｢abc｣␤␤»

[20:19] <FROGGS> nr: say "abc123def" ~~ /<[\w]-[a\d]>+/

[20:20] <p6eval> niecza v24-24-gbdc3343: OUTPUT«｢bc｣␤␤»

[20:20] <p6eval> ..rakudo 82de32: OUTPUT«｢abc123def｣␤␤»

[20:20] <FROGGS> ?

[20:20] <FROGGS> nqp: say("abc123def" ~~ /<[\w]-[a\d]>+/)

[20:20] <p6eval> nqp: OUTPUT«abc123def␤»

[20:23] *** sevin joined
[20:24] <FROGGS> it was working, I'm going nuts

[20:30] <dalek> nqp: 4b23ff4 | (Tobias Leich)++ | src/QRegex/P6Regex/Actions.nqp:

[20:30] <dalek> nqp: fix for the previous patch

[20:30] <dalek> nqp: 

[20:30] <dalek> nqp: Now character class subtraction do work.

[20:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4b23ff42b4

[20:30] <diakopter> as soon as I get the nqp-jvm p6eval target up, I predict there will be around a googol**googol microbenchmark comparisons with nqp-parrot

[20:31] <diakopter> (I'm not complaining, btw)

[20:37] <pmurias> jnthn:  how does box_s, work on an object with a KnowHOW repr?

[20:37] *** kivutar left
[20:37] *** mtk0 joined
[20:38] <jnthn> pmurias: It doesn't

[20:38] *** mtk0 left
[20:41] <dalek> rakudo/nom: 7a41b98 | (Tobias Leich)++ | tools/build/NQP_REVISION:

[20:41] <dalek> rakudo/nom: bump nqp revision

[20:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7a41b980a1

[20:42] <pmurias> jnthn: so how does the Boolification test in qast_6model.t work?

[20:42] <dalek> roast: 5fd6f98 | (Tobias Leich)++ | S05-metasyntax/charset.t:

[20:42] <dalek> roast: tests for subtraction of mixed cclasses

[20:42] <dalek> roast: review: https://github.com/perl6/roast/commit/5fd6f982ba

[20:43] <pmurias> it's seems to be an object with a P6opaque repr but it also seems to inherit a dummy set_str?

[20:49] <jnthn> P6opaque knows what to do with set_str provided there is a box_target set on a native string attribute.

[20:49] <jnthn> And yes, in that test the REPR of the type is P6opaque. The meta-object is a KnowHOW, with KnowHOWREPR. That REPR is purely for bootstrapping, though...it's useless for anything more than that.

[20:50] <jnthn> Note that if you're looking at nqp-jvm, you won't see the set_str method in question 'cus it's generated.

[20:52] <dalek> roast: 234af25 | (Tobias Leich)++ | S05-metasyntax/charset.t:

[20:52] <dalek> roast: unfudge now passing test

[20:52] <dalek> roast: review: https://github.com/perl6/roast/commit/234af25842

[20:54] <pmurias> jnthn: that make sense, I found the place where the boxing methods are generated

[20:56] *** gcole__ joined
[20:57] *** gcole__ left
[20:57] *** gcole__ joined
[21:00] *** gcole left
[21:03] *** gcole joined
[21:05] *** moritz joined
[21:06] *** gcole__ left
[21:12] *** gcole left
[21:15] <uvtc> Does Perl 6 have a "pass" statement (analogous to Python's `pass`)?

[21:16] <FROGGS> uvtc: in test files?

[21:16] <geekosaur> ython's pass is a null statement

[21:16] <uvtc> I mean a "do nothing" statement.

[21:16] <tadzik> ;?

[21:16] <uvtc> Right.

[21:16] <tadzik> where would you need that?

[21:16] <uvtc> if $test { pass } elsif {do this}

[21:16] <tadzik> just leave it empty :)

[21:17] <uvtc> Oh. That would work. :)

[21:18] <diakopter> or you can put a semi if yoh want

[21:18] <uvtc> Wait though. I think I recall p6 having some sort of "haven't gotten to this yet" stub-like statement...

[21:18] <uvtc> Maybe `...`?

[21:18] <diakopter> yes

[21:19] <diakopter> thkugh that dies. ISTR a softer failure version

[21:19] <geekosaur> doesn'tt hat throw a delayed exception?

[21:19] <geekosaur> and I thought that was the soft one (the others being ??? and !!! for more severe kinds of failures)

[21:19] <diakopter> oh...

[21:20] <jnthn> ... fails, ??? warnings, !!! dies

[21:20] <diakopter> r: say { ...}()

[21:20] <p6eval> rakudo 82de32: OUTPUT«Stub code executed␤current instr.: 'throw' pc 333479 (src/gen/CORE.setting.pir:149685) (src/gen/CORE.setting:9303)␤called from Sub 'sink' pc 365376 (src/gen/CORE.setting.pir:162414) (src/gen/CORE.setting:10525)␤called from Sub 'MAIN' pc 381 (src/gen/perl6.pir:146) …

[21:20] <diakopter> r:  { ...}()

[21:21] <p6eval> rakudo 82de32: OUTPUT«Stub code executed␤current instr.: 'throw' pc 333479 (src/gen/CORE.setting.pir:149685) (src/gen/CORE.setting:9303)␤called from Sub 'sink' pc 365376 (src/gen/CORE.setting.pir:162414) (src/gen/CORE.setting:10525)␤called from Sub 'MAIN' pc 381 (src/gen/perl6.pir:146) …

[21:21] <diakopter> r:  { ...}

[21:21] <p6eval> rakudo 82de32: OUTPUT«Stub code executed␤current instr.: 'throw' pc 333479 (src/gen/CORE.setting.pir:149685) (src/gen/CORE.setting:9303)␤called from Sub 'sink' pc 365376 (src/gen/CORE.setting.pir:162414) (src/gen/CORE.setting:10525)␤called from Sub 'MAIN' pc 381 (src/gen/perl6.pir:146) …

[21:21] <diakopter> r:  try { ...}

[21:21] <p6eval> rakudo 82de32: OUTPUT«Stub code executed␤current instr.: 'throw' pc 333479 (src/gen/CORE.setting.pir:149685) (src/gen/CORE.setting:9303)␤called from Sub 'sink' pc 365376 (src/gen/CORE.setting.pir:162414) (src/gen/CORE.setting:10525)␤called from Sub 'MAIN' pc 381 (src/gen/perl6.pir:146) …

[21:22] <jnthn> It's returning a Failure, and then that's ending up in sink context.

[21:22] <diakopter> I'll sink ykur MAIN

[21:22] <uvtc> Argh maties!

[21:22] <diakopter> commute for realz&

[21:23] <uvtc> jnthn: thanks for the extra info (??? !!!)

[21:25] *** cognominal joined
[21:30] <FROGGS> nr: say "abc123def" ~~ /<[\w]-[a\d]>+/

[21:30] <p6eval> rakudo 7a41b9, niecza v24-24-gbdc3343: OUTPUT«｢bc｣␤␤»

[21:30] <FROGGS> yay

[21:30] <FROGGS> nr: say "abc123def" ~~ /<[\w]-[a\D]>+/

[21:30] <p6eval> rakudo 7a41b9, niecza v24-24-gbdc3343: OUTPUT«｢123｣␤␤»

[21:30] <FROGGS> nr: say "abc123def" ~~ /<[\w]-[\D]>+/

[21:30] <p6eval> rakudo 7a41b9, niecza v24-24-gbdc3343: OUTPUT«｢123｣␤␤»

[21:31] <FROGGS> nr: say "abc123def" ~~ /<[\w]-[\D\n]>+/

[21:31] <p6eval> niecza v24-24-gbdc3343: OUTPUT«｢c123｣␤␤»

[21:31] <p6eval> ..rakudo 7a41b9: OUTPUT«｢123｣␤␤»

[21:31] <FROGGS> ha!!

[21:31] <FROGGS> we beat niecza on regexes!

[21:32] <FROGGS> I've never dreamed that this will happen

[21:32] <FROGGS> nr: say "abc123def" ~~ /<[\w]-[\D\n\h]>+/

[21:32] <p6eval> niecza v24-24-gbdc3343: OUTPUT«｢c123｣␤␤»

[21:32] <p6eval> ..rakudo 7a41b9: OUTPUT«#<failed match>␤»

[21:32] <FROGGS> uhh

[21:32] <FROGGS> nr: say "abc123def" ~~ /<[\w]-[\D\h]>+/

[21:32] <p6eval> niecza v24-24-gbdc3343: OUTPUT«｢123｣␤␤»

[21:32] <p6eval> ..rakudo 7a41b9: OUTPUT«#<failed match>␤»

[21:32] <FROGGS> nr: say "abc123def" ~~ /<[\w]-[\h]>+/

[21:33] <p6eval> rakudo 7a41b9, niecza v24-24-gbdc3343: OUTPUT«｢abc123def｣␤␤»

[21:37] <uvtc> Hm. Can a given/when be used as an expression? As in, `my $x = given $something { when "foo" { 1 } when "bar" { 2 } when "baz" { 3 } };`? My experiments say "no"... If that's the case (no pun intended), why is that?

[21:38] <moritz> just a parsing problem, easly circumvented with my $x = do given ...;

[21:38] <uvtc> Oh, right. `do`. Thanks!

[21:40] <FROGGS> nr: say "abc123def" ~~ /<[\w]-[\D\t]>+/

[21:40] <p6eval> niecza v24-24-gbdc3343: OUTPUT«｢123｣␤␤»

[21:40] <p6eval> ..rakudo 7a41b9: OUTPUT«#<failed match>␤»

[21:40] <FROGGS> ó.ò

[21:44] <uvtc> Has there been any recent work on a Perl 6 mode for Emacs? The one linked to from perl6.org (jrockway/cperl-mode) looks like it hasn't been touched in a while.

[21:46] <tadzik> maybe it's perfect :P

[21:47] <FROGGS> hehe

[21:47] <FROGGS> good one

[21:47] <FROGGS> *g*

[21:48] <uvtc> Would be nice to have a dedicated p6 mode, even if only simple comments and strings were highlighted.

[21:49] <geekosaur> I don't think perl6 syntax has undergone any radical changes recently?

[21:49] *** Chillance left
[21:50] <uvtc> So, that cperl mode is supposed to do double duty as p5 and p6?

[21:52] <Juerd> geekosaur: Nah, I'm afraid to propose swapping infix : and => around.

[21:52] *** rindolf left
[21:53] <geekosaur> point was more that I don't think an existing perl6 editor mode would have bitrotted much

[21:57] <uvtc> geekosaur: right. Thanks.

[21:57] *** rindolf joined
[22:00] *** drKreso joined
[22:10] *** kivutar joined
[22:11] *** rindolf left
[22:12] *** kivutar left
[22:14] *** drKreso left
[22:15] *** drKreso joined
[22:17] <TimToady> r: Nil;

[22:17] <p6eval> rakudo 7a41b9:  ( no output )

[22:17] <TimToady> ouif 0 { Nilyou could put that for "pass"

[22:18] <TimToady> er...

[22:18] <lue> I should really start creating my own P6 mode for emacs. I hate cperl.

[22:21] *** stevan__ left
[22:25] *** drKreso left
[22:25] *** drKreso joined
[22:36] *** cognominal left
[22:37] *** cognominal joined
[22:43] *** cognominal left
[22:49] <drKreso> phenny, tell moritz "Any special reason why this example of traits is not working (fibonacci memorisation) http://perl6advent.wordpress.com/2011/12/04/traits-meta-data-with-character/?"

[22:49] <phenny> drKreso: I'll pass that on when moritz is around.

[22:49] *** drKreso left
[22:49] *** cognominal joined
[23:02] <dalek> nqp-jvm-prep: 1d30e11 | jnthn++ | src/org/perl6/nqp/ (3 files):

[23:02] <dalek> nqp-jvm-prep: Start passing arg list as a parameter.

[23:02] <dalek> nqp-jvm-prep: 

[23:02] <dalek> nqp-jvm-prep: This is first step in getting rid of the field for passing this.

[23:02] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/1d30e11c45

[23:02] <dalek> nqp-jvm-prep: 02001c7 | jnthn++ | / (7 files):

[23:02] <dalek> nqp-jvm-prep: Eliminate callframe args field.

[23:02] <dalek> nqp-jvm-prep: 

[23:02] <dalek> nqp-jvm-prep: This completes the refactors to argument passing that get things in a

[23:02] <dalek> nqp-jvm-prep: state where, once code-gen can provide it, we can start to make use of

[23:02] <dalek> nqp-jvm-prep: invokedynamic.

[23:02] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/02001c70b4

[23:03] *** pmurias left
[23:03] *** Eddward left
[23:19] <lue> S02:744 shouldn't that be Rational[int128,uint64] ? (uint64 instead of what it says, int64)

[23:24] <TimToady> yeah, probably

[23:25] <lue> I'll fix it then. (I thought maybe there was a reason for the switch)

[23:25] <TimToady> no point to storing the sign in two bits

[23:25] <TimToady> though I'm sure the JVM would be happier with signed types, sigh

[23:28] <lue> Mathematically, you'd have to xor the high bits (-3/-5 = 3/5, not -3/5)

[23:30] *** Guest93749 left
[23:33] <dalek> specs: 2a706be | lue++ | S02-bits.pod:

[23:33] <dalek> specs: [S02] equivalent Rational for rat64 should have unsigned denominator.

[23:33] <dalek> specs: 

[23:33] <dalek> specs: Just like every other Rat and rat in Perl 6.

[23:33] <dalek> specs: review: https://github.com/perl6/specs/commit/2a706bec05

[23:34] <jnthn> 'night, #perl6

[23:35] <colomon> jnthn++ # good night!

[23:36] <colomon> phenny: tell member:drKreso Seems like I had that working just a few months ago.  Can you tell me more about how it's failing?

[23:36] <phenny> colomon: I'll pass that on when member:drKreso is around.

[23:37] <FROGGS> colomon: will that work with "member:" ?

[23:39] <colomon> FROGGS: probably not, good catch.  

[23:39] <colomon> phenny: tell drKreso Seems like I had that working just a few months ago.  Can you tell me more about how it's failing?

[23:39] <phenny> colomon: I'll pass that on when drKreso is around.

[23:41] *** cognominal__ joined
[23:43] *** cognominal left
[23:45] *** quester joined
[23:47] <dalek> rakudo/nom: 123dfa3 | (Tobias Leich)++ | src/Perl6/Grammar.pm:

[23:47] <dalek> rakudo/nom: RT #116979 check for variable in regex assertions

[23:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/123dfa3d4a

[23:48] <sjn> GlitchMr: "I would put a description, but who seriously cares?" >> I care, FWIW.

[23:52] *** cognominal joined
[23:53] *** cognominal__ left
