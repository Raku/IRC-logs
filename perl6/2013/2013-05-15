[00:05] *** Targen left
[00:05] <__sri> jnthn++

[00:09] * lue likes jnthn++ 's wording of the goal of an optimizer :)

[00:12] *** chayin joined
[00:18] *** grondilu_ joined
[00:21] *** grondilu left
[00:26] <Juerd> [Coke]: Ah, qmail isn't running. I guess since nobody has ever noticed, nobody's still using feather for email at all :)

[00:26] <yoleaux> 14 May 2013 23:19Z <[Coke]> Juerd: - feather ran out of disk space today- looks like messages are piled up in /var/qmail from (ever) and need to be delivered.

[00:26] <yoleaux> 14 May 2013 23:20Z <[Coke]> Juerd: - I'm out of my depth and don't know anything about qmail.

[00:26] <Juerd> [Coke]: I'll delete everything from over 30 days ago to begin with :)

[00:30] *** Targen joined
[00:39] *** kurahaupo left
[00:44] <[Coke]> defintiely some old stuff in there.

[00:47] *** berekuk left
[00:54] *** anuby joined
[01:02] <[Coke]> building star on feather is crazy slow.

[01:02] *** grondilu_ left
[01:04] *** FROGGS_ joined
[01:08] *** FROGGS left
[01:16] *** autark` left
[01:23] *** gdey_ joined
[01:27] *** gdey left
[01:43] * [Coke] hurls https://github.com/coke/rakudo-star-daily - I'll do a push with today's build once it (*&#$ finishes.

[01:43] <[Coke]> (and then I'll setup a cron job starting tomorrow)

[01:45] *** yakshavr joined
[01:53] *** gdey_ left
[01:53] *** gdey joined
[01:54] *** gdey left
[01:55] *** kbenson1 left
[02:05] *** bonsaikitten joined
[02:06] *** _jaldhar_ joined
[02:14] *** fgomez joined
[02:21] *** lustlife joined
[02:22] *** _jaldhar_ left
[02:24] *** _jaldhar_ joined
[02:28] <Juerd> I've just killed a bunch of perl6 processes on feather, which caused a load average of 10.

[02:29] <Juerd> (sergot's and coke's)

[02:30] *** LordBrain joined
[02:58] <[Coke]> aaargh, maybe.

[02:58] <[Coke]> I've been running a rakudo star build for what feels like hours. :|

[03:02] <[Coke]> that seems to have just killed a long running (but not in the weeds) spec test.

[03:03] <diakopter> oops.

[03:03] <[Coke]> Testing modules/Pod-To-HTML...

[03:03] <[Coke]> ...no t/ directory found.

[03:03] <[Coke]> (should we include modules in star that have no tests?)

[03:04] *** x2 left
[03:12] <[Coke]> something is slowing feather down right now that doesn't seem to be cpu or memory. Guessing it's disk io on the mail cleanup?

[03:26] *** LordBrain left
[03:27] *** preflex_ joined
[03:28] *** preflex left
[03:28] *** adu joined
[03:29] *** preflex_ is now known as preflex

[03:37] <[Coke]> ok, https://github.com/coke/rakudo-star-daily/tree/master/log is committed.

[03:38] <[Coke]> Hopefully the next run won't take hours. :)

[03:38] <TimToady> [Coke]++

[03:38] <[Coke]> so, https://github.com/coke/rakudo-star-daily/blob/master/log/test-modules.log - that needs to be clean before we can cut a star releae.

[03:38] <[Coke]> *release

[03:43] <[Coke]> failing modules: zavolaj, perl6-lwp-simple

[03:46] <[Coke]> ~~zzz

[03:48] *** btyler left
[04:25] *** Psyche^ joined
[04:28] *** Patterner left
[04:28] *** Psyche^ is now known as Patterner

[04:46] *** Targen left
[04:58] *** SamuraiJack joined
[05:00] *** xilo left
[05:00] *** chayin left
[05:00] *** ruoso_ left
[05:00] *** Ulti left
[05:00] *** dalek left
[05:00] *** cognominal left
[05:00] *** lue left
[05:00] *** Vlavv left
[05:03] *** chayin joined
[05:03] *** xilo joined
[05:03] *** ruoso_ joined
[05:03] *** Ulti joined
[05:03] *** dalek joined
[05:03] *** cognominal joined
[05:03] *** lue joined
[05:03] *** Vlavv joined
[05:03] *** xenoterracide_ joined
[05:03] *** Pleiades` joined
[05:03] *** Gothmog_ joined
[05:03] *** Hor|zon joined
[05:03] *** geekosaur joined
[05:03] *** Celelibi joined
[05:03] *** jnthn joined
[05:03] *** scottp_ joined
[05:03] *** broquaint joined
[05:17] <moritz> good morning

[05:17] *** FROGGS_ left
[05:19] *** mikemol joined
[05:19] <sorear> morn

[05:21] *** leprevost left
[05:28] *** FROGGS_ joined
[05:38] *** FROGGS_ is now known as FROGGS

[05:40] *** ruoso_ left
[05:45] *** Heather joined
[05:45] <Heather> hello...

[05:48] <FROGGS> jnthn++ # le blog post

[05:48] <FROGGS> hi Heather 

[05:49] <sorear> hi Heather.

[05:55] <Heather> where does panda get packages? git?

[05:56] <FROGGS> yes

[05:56] <FROGGS> Heather: from this list: https://github.com/perl6/ecosystem/blob/master/META.list

[05:56] <Heather> strange...

[05:56] <FROGGS> why?

[05:57] <Heather> FROGGS it seems like it get outdated package

[05:58] <FROGGS> I had to remove once a already cloned repo from my disk so it fetches it anew

[05:59] *** sqirrel joined
[06:01] <Heather> FROGGS hm... let me try

[06:01] *** domidumont joined
[06:02] *** root9 joined
[06:03] *** kaleem joined
[06:05] <Heather> seems like same....

[06:06] <FROGGS> :/

[06:07] *** dmol joined
[06:09] <Heather> ahh....

[06:09] <Heather> I get it

[06:09] <Heather> https://github.com/tadzik/panda/tree/master/ext

[06:09] <Heather> those ones...

[06:09] <Heather> tadzik hello, what about submodules for them?

[06:11] *** dmol left
[06:13] *** domidumont left
[06:14] *** domidumont joined
[06:18] *** raiph joined
[06:20] *** Anarch joined
[06:20] *** adu left
[06:20] <Anarch> perl6: say 1 < 2 < 3;

[06:21] <camelia> rakudo 170856, niecza v24-51-g009f999: OUTPUT«True␤»

[06:35] *** domidumont left
[06:36] *** domidumont joined
[06:42] *** xinming_ left
[06:44] *** xinming joined
[07:01] <dalek> perl6-bench: 06c0b5a | (Geoffrey Broadwell)++ | analyze:

[07:01] <dalek> perl6-bench: First cut of html_plot formatter, using JavaScript to plot rate scaling

[07:01] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/06c0b5a94a

[07:01] <dalek> perl6-bench: 344c2b5 | (Geoffrey Broadwell)++ | microbenchmarks.pl:

[07:01] <dalek> perl6-bench: Tune starting scale of microbenchmarks to show more useful info in html_plot output

[07:01] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/344c2b54b2

[07:02] *** nwc10 joined
[07:02] <moritz> jnthn: I've just given donald hunter an nqp commit bit

[07:02] <moritz> seems there are a lot of good patches forthcoming from him

[07:04] <FROGGS> ++donaldh

[07:10] *** brrt joined
[07:12] <Heather> tadzik: https://github.com/tadzik/panda/pull/44

[07:13] <brrt> hi #perl6

[07:13] <brrt> hows the land

[07:15] <moritz> green, with lots of gentle slopes

[07:15] <brrt> good to know

[07:16] <brrt> moritz, your site is back online :-)

[07:16] <moritz> brrt: I noticed :-)

[07:16] <brrt> i didn't, until now :-)

[07:16] <brrt> yay

[07:16] <moritz> and ilbot6 has been logging for two days now without interruption (though only into a test database)

[07:17] <FROGGS> Heather: so you suggest that panda should install its dependencies via git?

[07:17] <moritz> seems to work with both postgres and mysql

[07:17] <Heather> FROGGS well it does it by default...

[07:18] <Heather> FROGGS but it's using some packages for bootstrap itself, I suggest to use them as submodules

[07:18] <FROGGS> Heather: how can panda work if its deps are missing on a clean system?

[07:18] <brrt> nice

[07:19] <Heather> FROGGS what do you mean?

[07:19] <Heather> FROGGS why will they be missing?

[07:20] *** berekuk joined
[07:21] *** census joined
[07:22] *** berekuk left
[07:26] <FROGGS> Heather: if you install rakudo and then clone panda, then it has no deps, and it cant install them because it doesnt know how to parse the META.info of a module that should be installed

[07:27] <Heather> FROGGS it has deps as submodules :)

[07:27] *** skids_ left
[07:27] <Heather> FROGGS here is good example of submodules usage https://github.com/mozilla/servo/tree/master/src

[07:27] *** skids_ joined
[07:28] <FROGGS> Heather: so when cloning the repo these get automatically cloned too?

[07:28] <Heather> FROGGS with --recursive

[07:29] <Heather> FROGGS or after clone you do git submodule init & git submodule update

[07:29] <FROGGS> I see

[07:29] <Heather> FROGGS there is possible trick to add init & update to bootstrap

[07:30] <bonsaikitten> Heather: be aware that tarballs from github won't work with submodules

[07:31] *** renormalist joined
[07:33] <Heather> bonsaikitten yes I used to fail with it processing mono tarballs

[07:33] <bonsaikitten> I learned that through OpenDylan. So annoyinhg

[07:33] *** kivutar joined
[07:34] <Heather> bonsaikitten mono is using submodule init & update on configure

[07:35] <bonsaikitten> *twitch*

[07:35] <bonsaikitten> BAD

[07:36] <bonsaikitten> that means the downloaded stuff is not stable and might randomly change, which breaks all kind of ass-umptions about packaging software

[07:37] <Heather> bonsaikitten source is not package...

[07:37] <Heather> bonsaikitten they don't expect someone want to install stuff by automate source compilation

[07:37] <bonsaikitten> Heather: try building stuff that randomly auto-updates

[07:37] <bonsaikitten> you can't reproduce your results -> invalid

[07:38] <Heather> bonsaikitten it's easier to develop with such structure

[07:38] *** skids_ left
[07:38] <Heather> bonsaikitten by the way you must know that submodules DOES NOT AUTO UPDATES

[07:38] <bonsaikitten> no, it's not

[07:38] <Heather> bonsaikitten only developers can bump submodule commit point

[07:40] *** daxim joined
[07:40] <Heather> bonsaikitten try building stuff without knowing how your version control system works...

[07:41] *** skids_ joined
[07:41] <bonsaikitten> Heather: ignorance seems to be a prerequisite ;)

[07:42] <Heather> bonsaikitten ignorance ?

[07:42] <bonsaikitten> yes, I'm in a grumpy mood today

[07:43] <brrt> hug bonsaikitten

[07:43] <brrt> (how does hugme work, anyway)

[07:44] <flussence> hugme: hug *

[07:44] * hugme hugs *

[07:44] <flussence> there you go

[07:44] <brrt> hugme: hug bonsaikitten

[07:44] * hugme hugs bonsaikitten

[07:44] <brrt> :-)

[07:45] <bonsaikitten> :D

[07:45] <moritz> hugme: hug me

[07:45] * hugme hugs moritz

[07:45] <Heather> test hugme *

[07:45] <bonsaikitten> people hacking build systems on MacOS are not good for my mood

[07:46] <Heather> bonsaikitten eh? do you use macos?

[07:46] <brrt> MacOS (X) isn't at all good for my mood

[07:47] <bonsaikitten> Heather: no, but people hacking up random stuff do

[07:47] <bonsaikitten> and then I get to decipher what they intended the build system to do

[07:47] <bonsaikitten> just because it accidentally works on macos doesn't mean much

[07:48] <Heather> yes I usually hate when people use a lot of posix stuff, it's hard for me to use it on windows :(

[07:48] <bonsaikitten> for me the problem is "why are you calling ar directly ??!? lern2ld"

[07:48] <Heather> bonsaikitten objc?

[07:48] <bonsaikitten> Heather: no, Makefile

[07:50] <Heather> let share hates...

[07:50] * Heather hates Fedora and even banned on #fedora

[07:50] <moritz> hugme: hug Heather

[07:50] * hugme hugs Heather

[07:50] * brrt likes fedora :-)

[07:51] <arnsholt> Heather: My work computer has Red Hat Enterprise Linux =)

[07:51] <arnsholt> But at least they've managed to upgrade Perl to 5.10 in the one we have now

[07:52] <Heather> arnsholt I'm fine with rhel ) I like rhel, I'm not banned on #rhel and rhel enterprise support are mannered and friednly

[07:52] <Heather> arnsholt there is epel...

[07:52] <labster> I'm not so hating the Mac OS X as annoyed that it's randomly not working after running about 15 minutes on one of my machines.  Any time `ls /` produces no output, you know you got a problem.

[07:52] <bonsaikitten> CentOS is a funny game

[07:53] <arnsholt> I don't have privileges to install packages on my own machine =(

[07:53] <labster> Hi Heather o/

[07:53] <brrt> oh, that hurts

[07:53] <bonsaikitten> arnsholt: that's sad

[07:53] <arnsholt> (At work)

[07:53] <Heather> labster hi

[07:53] <brrt> can you install into a 'local' directory?

[07:53] <bonsaikitten> luckily I am root

[07:53] <arnsholt> Yeah. So my $HOME is slowly accreting stuff I need/want

[07:53] <labster> glad to see you around again.

[07:53] <bonsaikitten> it's a lot easier that way :)

[07:53] <brrt> arnsholt, i do that on all computers

[07:53] <brrt> much easier in installation / uninstallation

[07:54] <Heather> brrt I doubt

[07:54] <arnsholt> But sometimes the old^Wmature versions RHEL ship are impractical beacuse they're not always compatible with the versions I get on my laptop (which has Ubuntu)

[07:54] <Heather> brrt I have no user instead of root on most of my machines

[07:55] <brrt> hmm

[07:55] * Heather dinner time

[07:55] <arnsholt> Just yesterday it turns out I can't compile the Haskell code I wrote at work on my laptop, because they've changed the module layout between GHC 7.0.4 and whatever version Ubuntu has

[07:55] <brrt> thats not really either ubuntu's or fedora's fault

[07:56] <arnsholt> Well, my annoyance is that the RH packages are a bit too old for my tastes

[07:56] <arnsholt> Perl 5.10 for example is about 4 years old

[07:58] *** berekuk joined
[08:02] *** skids_ left
[08:03] *** skids joined
[08:08] *** skids left
[08:09] *** skids joined
[08:12] <hoelzro> jnthn++ # JVM progress

[08:13] <timotimo> jnthn++ # seconded.

[08:13] *** berekuk left
[08:14] <brrt> jnthn is basically carrying it all by himself

[08:14] <brrt> maybe

[08:14] <brrt> i should help out

[08:15] *** berekuk joined
[08:15] <nwc10> brrt: he made a short list of suggestions on how to help in the blog post

[08:16] <nwc10> help would be wonderful

[08:16] <brrt> :-)

[08:16] <brrt> i can see what i can do

[08:16] <Heather> arnsholt they even have no xmobar for my xmonad :(

[08:18] <arnsholt> The value printed by which xmobar on my work desktop: ~/sw/bin/xmobar =)

[08:18] <arnsholt> Do you use yeganesh, BTW?

[08:19] <Heather> arnsholt yesganesh?

[08:20] <arnsholt> It's a wrapper around dmenu: http://dmwit.com/yeganesh/

[08:20] <arnsholt> Keeps track of which commands you run most frequently and puts those first. Pretty neat

[08:20] <Heather> arnsholt I don't use dmenu

[08:20] <arnsholt> No need for yeganesh then =)

[08:20] <sorear> dmwit, eh

[08:21] *** census left
[08:21] <Heather> arnsholt I don't need an button to write some command...

[08:21] *** skids left
[08:22] <Heather> arnsholt but how you got xmobar? what repo?

[08:24] <arnsholt> I installed it with cabal I think

[08:24] <arnsholt> Or possibly just from source. Can't remember off-hand

[08:25] <Heather> arnsholt I see...

[08:25] <Heather> arnsholt I don't like that way...

[08:26] *** berekuk left
[08:27] <arnsholt> That I can agree with. But since I'm only a lowly peon, what can you do? =)

[08:28] <Heather> arnsholt package!

[08:34] *** dakkar joined
[08:44] <jnthn> morning, #perl6

[08:44] <hoelzro> morning jnthn 

[08:44] <hoelzro> jnthn++ # waking up

[08:45] <jnthn> Yeah...slept pretty badly :(

[08:45] <Heather> aloha jnthn

[08:45] <jnthn> Привет, Heather 

[08:45] <lizmat> morning #perl6!

[08:46] <lizmat> jnthn++ # for blog post

[08:46] <hoelzro> мы говорим по-русски!

[08:46] <hoelzro> lizmat: morning

[08:46] <jnthn> hoelzro: In my case, rather badly...especially before I had any coffee :)

[08:47] <hoelzro> jnthn: heh

[08:47] <hoelzro> I myself just started learning, so you'd be hard-pressed to beat in lack of quality Russian ;)

[08:49] <arnsholt> Heather: Well, then I have the problem that I have no idea to do non-system-wide installs via yum or whatever the proper tool on Red Hat is for that stuff =)

[08:49] <arnsholt> So just doing it by hand is less work =)

[08:49] <Heather> I see

[08:50] <Heather> jnthn hoelzro well in English I fail really often...

[08:50] <Heather> even on such things: James while John had had had had had had had had had had had a better effect on the teacher

[08:50] <hoelzro> heh

[08:50] <hoelzro> I'm a native speaker and I can't parse that =)

[08:51] <jnthn> I...what? :)

[08:51] * jnthn has seen that one before somewhere... :)

[08:51] <Heather> hoelzro really?

[08:51] <hoelzro> mhmm

[08:51] <Heather> jnthn it's popular sentance

[08:52] <Heather> *sentence

[08:52] <dalek> roast: f8ae426 | (Elizabeth Mattijsen)++ | S32-hash/exists_adverb.t:

[08:52] <dalek> roast: New file for testing :exists adverbs

[08:52] <dalek> roast: 

[08:52] <dalek> roast: Copied from delete_adverb.t

[08:52] <dalek> roast: review: https://github.com/perl6/roast/commit/f8ae426b74

[08:52] <jnthn> hoelzro: If you add sufficient punctuation it becomes much easier to parse :)

[08:52] <Heather> jnthn wiki said

[08:52] <hoelzro> true =)

[08:55] <lizmat> n: my @a=(1); say @a[0]:exists

[08:55] <camelia> niecza v24-51-g009f999: OUTPUT«Unhandled exception: Excess arguments to KERNEL Array.postcircumfix:<[ ]>, unused named exists␤  at <unknown> line 0 (KERNEL Array.postcircumfix:<[ ]> @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 179 (postcircumfix:<[ ]> @ 5) ␤  at /tmp/upLHgzFieO …

[08:55] <moritz> lizmat: please use - instead of _ in new test file names

[08:55] <lizmat> pugs: my @a=(1); say @a[0]:exists

[08:55] <camelia> pugs: OUTPUT«pugs: Named argument found where no matched parameter expected: (exists,Val (VBool True))␤»

[08:56] <lizmat> moritz: shall I rename delete_adverb.t then as well?

[08:57] <lizmat> n: my %a=a=>1; say %a<a>:exists

[08:57] <camelia> niecza v24-51-g009f999: OUTPUT«True␤»

[08:58] <lizmat> n: my %a=a=>1; say %a<a>:!exists

[08:58] <camelia> niecza v24-51-g009f999: OUTPUT«True␤»

[08:58] <lizmat> p: my %a=a=>1; say %a<a>:exists

[08:58] <camelia> pugs: OUTPUT«pugs: Named argument found where no matched parameter expected: (exists,Val (VBool True))␤»

[08:59] * lizmat just realizes she should do these tests in a /msg to camelia

[09:05] <Heather> camelia hi

[09:11] *** rindolf joined
[09:18] *** rindolf left
[09:19] *** rindolf joined
[09:21] <moritz> lizmat: yes, please

[09:25] <lizmat> will do

[09:28] <dalek> v5: a88e1a0 | (Tobias Leich)++ | lib/Perl5.nqp:

[09:28] <dalek> v5: add a default to @INC

[09:28] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/a88e1a097f

[09:28] <dalek> v5: 3355a22 | (Tobias Leich)++ | / (6 files):

[09:28] <dalek> v5: move token @INC into EXPORT sub of Perl5::Terms

[09:28] <dalek> v5: 

[09:28] <dalek> v5: We bind special variables to the hash which gets exported, and

[09:28] <dalek> v5: do the same technique for the English and Config module.

[09:28] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/3355a221dd

[09:29] *** donaldh joined
[09:32] *** rindolf left
[09:32] *** cognominal left
[09:32] *** rindolf joined
[09:41] *** daxim left
[09:44] <masak> morning, #perl6

[09:44] <masak> hi, Heather!

[09:45] <brrt> hi masak

[09:45] <hoelzro> ahoy mask

[09:45] <hoelzro> *masak

[09:47] <Heather> masak hi

[09:47] <masak> Heather: you missed #masakism on May 1 :(

[09:48] <masak> Heather: which is kind of ironic, since you're one of the new people who made me decide to go ahead and arrange one in the first place...

[09:48] <Heather> masak I'm sorry

[09:48] <masak> oh, don't apologise.

[09:49] <masak> I just regret that you weren't there.

[09:49] <FROGGS> NAOW!

[09:50] <FROGGS> o/ masak 

[09:50] <brrt> omg mac os x top is /weird/

[09:50] <hoelzro> brrt: isn't it?!

[09:50] <hoelzro> it drives me nuts

[09:50] <brrt> yes, it is

[09:50] <brrt> much more difficult to read, to

[09:51] <brrt> too

[09:51] <lizmat> Activity Monitor is maybe what you want

[09:51] <lizmat> in Utilities, usually

[09:51] <hoelzro> I think apple cripples their command line utils to force you to use their GUI ones =/

[09:51] <lizmat> could be

[09:52] *** rindolf left
[09:52] <FROGGS> brrt: maybe you like this: http://github.com/AndyA/htop-osx/tree/osx

[09:52] <hoelzro> hey, I wasn't aware someone had ported htop

[09:53] <dalek> roast: 6812407 | (Elizabeth Mattijsen)++ | S32-hash/exists_adverb.t:

[09:53] <dalek> roast: Transmogrified tests for %h:delete to  %h:exists

[09:53] <dalek> roast: review: https://github.com/perl6/roast/commit/68124074e2

[09:53] <brrt> ooh, ill check

[09:53] <FROGGS> brrt: there is a screenshot if you scroll down a bit, though the site is in german: http://macfidelity.de/2009/07/06/mac-apps-htop-port-for-mac-os-x/index.html

[09:53] <brrt> better, yes

[09:55] <dalek> roast: 7d2d74c | (Elizabeth Mattijsen)++ | S32-hash/ (4 files):

[09:55] <dalek> roast: Rename test files, as per moritz' request

[09:55] <dalek> roast: review: https://github.com/perl6/roast/commit/7d2d74ce8c

[09:56] <brrt> much, much, much nicer

[09:56] <brrt> thanks

[09:56] *** fhelmberger joined
[09:58] *** rindolf joined
[09:59] <masak> jnthn++ # blog post, oh wow

[10:00] *** root9 left
[10:07] *** kivutar left
[10:08] *** kivutar joined
[10:12] <Ulti> I think pmurias might have meant to say something to Util? < pmurias> Ulti: re mentors, pmichaud is mentioned in the < pmurias> Ulti: "Possible Mentors" section

[10:14] <masak> Ulti: indeed.

[10:15] <Ulti> *sigh* sorry about the nick clash I'd change mine if I hadn't been using it for more than a decade

[10:17] <masak> Ulti: it's not your fault.

[10:17] <masak> (nor Util's, of course)

[10:18] <Ulti> I dunno lets blame Util :D that nick clashes with a module name too ;P

[10:18] <masak> Ulti: there's 13 of us in here with an m* nick. that also confuses things sometimes.

[10:18] <lizmat> I'm pretty sure Util has been using his for quite some time as well  :-)

[10:18] <masak> yeah.

[10:19] *** rindolf left
[10:20] <Ulti> just read jnthn's blogpost, exciting times...

[10:21] <dalek> roast: 1b950fe | (Elizabeth Mattijsen)++ | S32-hash/exists-adverb.t:

[10:21] <dalek> roast: Transmogrified the @a[]:delete tests to @a[]:exists

[10:21] <dalek> roast: review: https://github.com/perl6/roast/commit/1b950fe102

[10:22] <Ulti> is there somewhere to watch v5 too other than the github commits?

[10:23] *** pmurias joined
[10:24] *** anuby left
[10:25] <hoelzro> jnthn: when the JVM work is "complete", will NativeCall only work with Java libraries? or are there plans so that it still works with external shared libraries?

[10:25] <jnthn> hoelzro: The plan is that NativeCall will continue to do "native".

[10:25] <jnthn> hoelzro: We'll call the Java interop something else

[10:26] <hoelzro> oh, ok

[10:26] <hoelzro> JavaCall? ;)

[10:26] <jnthn> heh :)

[10:26] * hoelzro thinks on puns involving coffee

[10:26] <hoelzro> 'use OvercaffinatedCamel;'

[10:26] <jnthn> Well, or maybe we can figure out "use java::lang::Thingy:from<java>" or so :)

[10:26] <hoelzro> ah

[10:27] <hoelzro> that makes the most sense

[10:29] *** brrt left
[10:33] <Ulti> what about DrunkenCall

[10:33] <Ulti> PrankCall

[10:34] <jnthn> DrunkenCall? What kind of coffee do you drink? :)

[10:38] <dalek> v5: b4c7a54 | (Tobias Leich)++ | / (4 files):

[10:38] <dalek> v5: precompile modules

[10:38] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/b4c7a54855

[10:39] <Ulti> jnthn: Irish ;P

[10:40] <arnsholt> hoelzro: My plan is to work on NativeCall at the YAPC::NA hackathon, and I'd like to get started on JVM NativeCall there

[10:40] <arnsholt> And yeah, it'll still be C library NativeCall

[10:40] <arnsholt> CamelCall is my suggestion for a name =)

[10:40] <jnthn> arnsholt: yay :)

[10:40] <arnsholt> (For the Java calling stuff)

[10:41] <lizmat> would it make sense to generalise this to VMCall, or are the VM's too different for this?

[10:43] <jnthn> I suspect we'll discover that by seeing what can be re-used when implementing a similar thing for a second VM :)

[10:44] <lizmat> says the person who has the most experience with this  :-)

[10:46] *** itz_ left
[10:46] <moritz> jnthn++ # blog post, rakudo-on-jvm work

[10:47] <Ulti> is the ++ tracked by anything if so jnthn++

[10:47] <lizmat> we all track the ++

[10:47] <moritz> Ulti: not at the moment, but I plan to extract them from the logs eventually

[10:47] <donaldh> JNA might be a good lib to use for C library calling from JVM: https://github.com/twall/jna

[10:47] <Ulti> moritz: I've never seen a -- on here though :)

[10:48] <moritz> Ulti: there are some, occasionally. But very seldom.

[10:48] <moritz> we try to be encouraging

[10:48] <donaldh> JNA has Apache license.

[10:48] <lizmat> #perl6 only uses uints for karma  :-)

[10:48] <Ulti> that leads to karma inflation

[10:48] <Ulti> and karma bubbles

[10:48] <moritz> and karma day trading

[10:49] <moritz> and short selling

[10:49] <Ulti> wow we solved it economies just need negative currency

[10:51] <pmurias> lizmat: re generalising to VMCall, a large part of NativeCall is specifing the signature of the functions and a lot of that will be made unnessary when calling Java code etc.

[10:51] <lizmat> because that can be introspected automatically, is what you're saying ?

[10:52] <pmurias> yes

[10:52] <jnthn> pmurias: Oh, I interpreted the question as "what if we have .Net support some day and want to call that stuff" :)

[10:52] <jnthn> I didn't realize it was trying to bring native calling into the thing too

[10:52] <dalek> roast: bb3e673 | (Elizabeth Mattijsen)++ | S32-hash/exists-adverb.t:

[10:52] <dalek> roast: Fix some garbage that was hidden because of rakudo skip

[10:52] <dalek> roast: review: https://github.com/perl6/roast/commit/bb3e6738dc

[10:52] <jnthn> That's not really a vm call, that's an out-of-the-vm call ;)

[10:52] <pmurias> jnthn: I interpreted the question the same as you

[10:53] *** eiro joined
[10:53] <jnthn> pmurias: Ah, OK :)

[10:53] <eiro> hello camelia addicts 

[10:53] <pmurias> jnthn: but we should be able to introspect the arguments the .Net method needs

[10:53] <jnthn> pmurias: Right. Same as we can on JVM.

[10:53] <jnthn> pmurias: I'm a little suspicious the way to be efficient on each of them may vary, though. :)

[10:54] <eiro> http://journeesperl.fr/fpw2013/ < someone will join ? 

[10:54] <lizmat> did anybody notice that the Eurovision Songfestival is using Camelia as a theme for bridges between items ?

[10:54] <jnthn> .oO( Who is nancy? )

[10:54] <lizmat> eiro: already signed up  :-)

[10:54] <jnthn> eiro: I have a schedule clash, unfortunately. :(

[10:54] <pmurias> jnthn: efficient as in runs fast or is the easiest/best way to use them

[10:55] <lizmat> Nancy lives not too far from Perl, actually

[10:55] <eiro> lizmat: \o/ awesome! 

[10:55] <jnthn> pmurias: Runs fast

[10:55] <arnsholt> donaldh: Thanks for the JNA pointer!

[10:55] <eiro> right ... but it seems nicer.

[10:55] <pmurias> if the reflection happens once at starup/compile time it shouldn't be much slower than parsing programmer specified signatures

[10:56] <arnsholt> My current plan was to do what had to be done on the C level with dyncall/JNI more or less like on Parrot, but this is potentially a lot cleaner

[10:56] *** Heather left
[10:57] <jnthn> arnsholt: I think the key thing is to get the NativeCall module API consistent. What's inside of NativeCall can happily vary.

[10:57] <arnsholt> Definitely

[10:58] <arnsholt> The only way to do this on several platforms and escape with my sanity intact is to expose a consistent nqp::op API on all the platforms

[10:59] <jnthn> Yeah. Whether the current one is sane is the question :)

[10:59] <arnsholt> That's definitely open for discussion

[10:59] <arnsholt> But if we're comparing sanity, I'm more anxious to twiddle the Perl 6 API than the NQP API, to be honest

[10:59] <donaldh> arnsholt: yeah, JNA + JNAerator = awesome.

[11:00] <arnsholt> Oooh, neat

[11:00] <arnsholt> I've been wanting to write something like JNAerator, but I've been spending all my tuits on NativeCall/NQP so far

[11:01] *** sqirrel left
[11:06] *** brrt joined
[11:09] *** itz_ joined
[11:10] *** colomon joined
[11:14] <pmurias> re 

[11:14] <pmurias> I wonder if JNAerator could be modified to spit out NativeCall declarations ;)

[11:15] <arnsholt> Probably =)

[11:15] *** mtk left
[11:17] <lizmat> how can I commit to my forked rakudo repo and not have that commit be added to my last pull request?

[11:18] <lizmat> or can someone else commit these changes to t/spectest_data:

[11:18] <lizmat> -S32-hash/delete_adverb.t

[11:18] <lizmat> +S32-hash/delete-adverb.t

[11:18] <lizmat>  S32-hash/exists.t

[11:18] <lizmat> +S32-hash/exists-adverb.t

[11:19] *** mtk joined
[11:22] * masak tries

[11:24] <dalek> rakudo/nom: 570d1d6 | masak++ | t/spectest.data:

[11:24] <dalek> rakudo/nom: [t/spectest.data] chase rename/addition of test files

[11:24] <dalek> rakudo/nom: 

[11:24] <dalek> rakudo/nom: For lizmat, as per http://irclog.perlgeek.de/perl6/2013-05-15#i_7070799

[11:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/570d1d6cb4

[11:24] <lizmat> masak++

[11:25] *** daxim joined
[11:35] *** Util joined
[11:35] *** PerlJam joined
[11:39] *** gdey joined
[11:39] <FROGGS> lizmat: if you dont want to add commits to a given pull request, you need to commit to a new branch AFAIK

[11:39] <lizmat> aha, ok… 

[11:40] <FROGGS> I thought there is a text like "you can add commits to this pull request by pushing to the branch XYZ" here: https://github.com/rakudo/rakudo/pull/138

[11:41] <FROGGS> maybe just you will see it

[11:44] <lizmat> but I wanted a commit *not* to be part of that pull request

[11:44] <lizmat> fortunately, masak already committed the necessary change

[11:44] <FROGGS> yeah, so you have to commit to another branch

[11:45] <lizmat> clear

[11:45] <FROGGS> so you cant use your branch nom until the pull request got merged

[11:45] <lizmat> yup, got it

[11:46] <FROGGS> if you are unsure if it will ever happen, that it might be better to use new branches for pull requests explicitly

[11:46] *** lichtkind joined
[11:52] *** Vlavv left
[12:04] <dalek> v5: 0be338a | (Tobias Leich)++ | / (2 files):

[12:04] <dalek> v5: added sub skip_all_if_miniperl

[12:04] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/0be338a062

[12:05] *** Vlavv joined
[12:06] <timotimo> oh weird. i wanted to git clone rakudo jakudo and it complains "fatal: attempt to fetch/clone from a shallow repository" - but it's definitely a full-featured repository

[12:06] <timotimo> has anyone seen that kind of behavior before?

[12:08] <FROGGS> timotimo: is there a .git/shallow file?

[12:09] <timotimo> oh, indeed

[12:09] <FROGGS> http://stackoverflow.com/questions/4770532/error-when-cloning-git-shallow-repository

[12:10] <timotimo> i must have used a shallow clone at some point and filled up the history afterwards perhaps?

[12:10] <FROGGS> no idea, first time I see this

[12:10] <timotimo> right. i'll just cp -r it ;)

[12:16] *** _jaldhar_ left
[12:23] <lizmat> Is this a bug in "Test::is" ?

[12:23] <lizmat> r: use Test; my %h=a=>1; say (%h<a>:exists) ~~ Bool; is %h<a>:exists, Bool, "huh?"

[12:23] <camelia> rakudo 170856: OUTPUT«True␤use of uninitialized value of type Bool in string context  in sub is at lib/Test.pm:81␤␤not ok 1 - huh?␤#      got: 'True'␤use of uninitialized value of type Bool in string context  in sub is at lib/Test.pm:85␤␤# expected: ''␤»

[12:23] <timotimo> is tests for value, not for type

[12:23] <lizmat> that explains  :-)

[12:24] <lizmat> I assumed is was just doing a smartmatch

[12:24] <timotimo> nah, i guess you'd have to fall back to 'ok'

[12:25] <lizmat> isa_ok

[12:25] <timotimo> oh, even better

[12:28] <timotimo> can the classfiles that fall out of nqp --target=classfile be used easily somehow from java? or is there a buttload of work involved if one wanted to manually use nqp code from java?

[12:29] <[Coke]> (htop on os x - it's available in macports, also)

[12:32] *** domidumont left
[12:34] <timotimo> i have a perl6.class, but how do i run it?

[12:35] <masak> timotimo: 'java perl6' ?

[12:35] <timotimo> Exception in thread "main" java.lang.NoClassDefFoundError: org/perl6/nqp/runtime/CompilationUnit

[12:37] <arnsholt> You'll probably have to add the NQP jar/class-dir to the classpath

[12:37] <timotimo> classpath >_>

[12:38] <timotimo> java -classpath nqp/bin:bin:. perl6 -> Unhandled exception: ModuleLoader.class (No such file or directory)

[12:40] <[Coke]> timotimo: I don't think you can run an arbitrary classfile.

[12:40] <[Coke]> it has to have a main, among other things.

[12:41] <[Coke]> also, check the nqp runtime helper to see what else it's stuffing into the classpath.

[12:41] <timotimo> well, i cannot java -jar rakudo_runtime.jar either, because it lacks a manifest or something

[12:41] <[Coke]> the runtime isn't mean to be run as main.

[12:41] <[Coke]> *meant

[12:42] <timotimo> thought so

[12:44] <arnsholt> timotimo: Try adding the runtime jar to the classpath

[12:50] *** SamuraiJack left
[12:53] <timotimo> will do

[12:56] <timotimo> strange. i have nqp/ in the classpath and in there there's a ModuleLoader.class in there, but it still says it can't be found

[12:56] <timotimo> oh, i got it now

[12:57] <timotimo> oh, whoops :D

[12:57] <timotimo> when i say "hello world" twice, i get a "SC already exists"

[12:57] *** kaare_ joined
[12:57] <timotimo> whoa, lots of NPEs :D

[12:58] <timotimo> neato, (-> $_ { say $_ })("foo") works

[12:58] <timotimo> but sub foo() { say "yoink" } explodes with a violent outburst of endless NPEs

[13:00] *** huf joined
[13:00] * lizmat thinks it's a good thing that Virtual Machines don't explode in real life

[13:00] *** mangala_ is now known as mangala

[13:00] <timotimo> oh yes

[13:01] * [Coke] now kind of wishes parrot vomited up some ascii art of a bug when it exploded.

[13:03] *** domidumont joined
[13:03] *** domidumont left
[13:05] *** ajr joined
[13:05] *** ajr is now known as Guest75832

[13:06] *** Guest75832 is now known as ajr_

[13:09] <dalek> roast: f039dde | (Elizabeth Mattijsen)++ | S32-hash/ (2 files):

[13:09] <dalek> roast: Properly use "isa_ok" and "is_deeply"

[13:09] <dalek> roast: 

[13:09] <dalek> roast: For some reason, I thought that "is" was using smartmatch to do the check,

[13:09] <dalek> roast: whereas it only does an "eq"

[13:09] <dalek> roast: review: https://github.com/perl6/roast/commit/f039ddea3a

[13:11] *** cognominal joined
[13:16] *** domidumont joined
[13:19] <lizmat> r: my %h=a=>2; say %h<a>:kv; say %h<a>.kv; say 2.kv  # this had me stumped for a bit

[13:19] <camelia> rakudo 570d1d: OUTPUT«a 2␤0 2␤0 2␤»

[13:20] * lizmat wonders whether (Int|Str).kv should not simply fail

[13:21] *** xinming left
[13:24] <timotimo> r: 1.list.perl.say;

[13:24] <camelia> rakudo 570d1d: OUTPUT«(1,).list␤»

[13:24] *** brrt left
[13:27] <timotimo> it makes sense that it works, at least to me

[13:28] <timotimo> i like that it's Cool.

[13:29] <lizmat> I'm more worried about the subtle difference between %h<a b c>:kv and %h<a b c>.kv

[13:29] <timotimo> oh, that's a good point

[13:31] <timotimo> but how should .kv on lists work then?

[13:32] <lizmat> well, I guess in the case of lists, there is not a lot you can do about it...

[13:32] <lizmat> by the time %h<a b c>  reaches the .kv, it already has become a list

[13:32] <timotimo> yes, indeed

[13:32] <lizmat> but in the case of a scalar, I think .kv makes no sense at all

[13:32] *** FROGGS[mobile] joined
[13:33] <lizmat> or does a single element list revert to a scalar?

[13:33] <timotimo> no, don't think so

[13:33] <lizmat> r: my @a=(1); say @a.kv.WHAT  #indeed

[13:33] <camelia> rakudo 570d1d: OUTPUT«(List)␤»

[13:34] <lizmat> r: my %h=a=>2,b=>3; say %h<a>.WHAT

[13:34] <camelia> rakudo 570d1d: OUTPUT«(Int)␤»

[13:35] <lizmat> a single key returns a scalar, and doing .kv on a scalar doesn't make sense to me

[13:35] <lizmat> I guess it's still hard to introspect where a scalar comes from

[13:36] <lizmat> otherwise, you could construct a fail message like "using .kv on a scalar, didn't you mean :kv?"

[13:36] <lizmat> only if it was a value from a hash

[13:38] <lizmat> r: my @a=(1..10); say @a[9]:kv; say @a[9].kv   # similar issue with arrays

[13:38] <camelia> rakudo 570d1d: OUTPUT«9 10␤0 10␤»

[13:38] *** FROGGS left
[13:40] <timotimo> oof

[13:47] <dalek> panda: 8113795 | Heather++ | / (33 files):

[13:47] <dalek> panda: replace exts with git submodules

[13:47] <dalek> panda: review: https://github.com/tadzik/panda/commit/81137959dc

[13:47] <dalek> panda: 8995125 | Heather++ | README.md:

[13:47] <dalek> panda: readme update for submodules

[13:47] <dalek> panda: review: https://github.com/tadzik/panda/commit/8995125846

[13:47] <dalek> panda: 94ee0e5 | tadzik++ | bootstrap.pl:

[13:48] <dalek> panda: Update submodules in bootstrap

[13:48] <dalek> panda: review: https://github.com/tadzik/panda/commit/94ee0e5e6e

[13:48] <timotimo> r: my @a = 1, 2, 3; my @b = 10, 11, 12, 13, 14, 15; say @b{@a

[13:48] <camelia> rakudo 570d1d: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse expression in subscript; couldn't find final '}'␤at /tmp/KZoTEsCpAm:1␤------> [32my @b = 10, 11, 12, 13, 14, 15; say @b{@a[33m⏏[31m<EOL>[0m␤    expecting any of:␤        postfix␤        statement end␤        statem…

[13:48] <timotimo> oops

[13:48] <timotimo> r: my @a = 1, 2, 3; my @b = 10, 11, 12, 13, 14, 15; say @b{@a}.kv; my @c = 2; say @b{@c}.kv

[13:48] <camelia> rakudo 570d1d: OUTPUT«postcircumfix:<{ }> not defined for type Array␤  in method Str at src/gen/CORE.setting:10021␤  in method Str at src/gen/CORE.setting:876␤  in method Stringy at src/gen/CORE.setting:885␤  in method join at src/gen/CORE.setting:1375␤  in method Str at src/gen/CORE.se…

[13:48] <tadzik> yay, feather is back

[13:48] <timotimo> oh?

[13:48] <lizmat> timotimo: []  ?

[13:49] <timotimo> er, yes

[13:49] <timotimo> thanks

[13:49] *** btyler joined
[13:49] <timotimo> r: my @a = 1, 2, 3; my @b = 10, 11, 12, 13, 14, 15; say @b[@a].kv; my @c = 2; say @b[@c].kv

[13:49] <camelia> rakudo 570d1d: OUTPUT«0 11 1 12 2 13␤0 12␤»

[13:49] <timotimo> i like that that works no matter how big @a and @c are

[13:50] *** leprevost joined
[14:04] *** kaleem left
[14:08] *** domidumont left
[14:10] *** xilo left
[14:10] *** cognominal left
[14:10] *** cognominal joined
[14:11] *** gtodd joined
[14:11] <gtodd> masak: like the extra oneliner tasks you added ... convert oneliner into full maintainable application 

[14:12] *** domidumont joined
[14:13] *** FROGGS joined
[14:13] * lizmat getting some fresh air, hopefully not too moist

[14:13] <gtodd> masak: once someone completes all the tasks mapped out on http://www.freespectrum.info/workshop-map-links.svg  they should be awarded a "PCSE" :-P

[14:14] *** btyler left
[14:15] <gtodd> or maybe a YAPH_CSE 

[14:15] *** _daniel-s__ left
[14:15] *** _daniel-s__ joined
[14:17] *** btyler joined
[14:18] <[Coke]> .tell au we found the real disk hog, no rush to clean up.

[14:18] <yoleaux> [Coke]: I'll pass your message to au.

[14:23] <FROGGS> [Coke]: was is it in spool?

[14:23] * [Coke] sets up a crontab entry for star's daily build.

[14:23] <FROGGS> [Coke]++

[14:23] <[Coke]> yes. qmail has been accepting mail for years but not delivering it.

[14:24] <PerlJam> qmail--

[14:24] <PerlJam> [Coke]++ for tracking it down.

[14:24] <[Coke]> if anyone wants to write a script to summarize what will be daily updates to https://github.com/coke/rakudo-star-daily 's log/ dir, suggestions welcome.

[14:26] <[Coke]> (also, should I bother logging rakudo's configure process?)

[14:27] <[Coke]> oh, crud, I am logging it, never mind. ;(

[14:27] <[Coke]> er, ;)

[14:28] *** xilo joined
[14:29] *** xinming joined
[14:31] *** FROGGS[mobile] left
[14:35] <FROGGS> [Coke]: for the daily log: I'd just do it like the perl6_pass_rates, treat the modules like synopsis and have a summary on top

[14:41] *** gudahtt joined
[14:42] *** konundra joined
[14:44] <timotimo> it seems like getting rid of "Capture param binding NYI" will make a big difference?

[14:55] <pmurias> to implement NativeCall on the JVM I would need to implement nqp::{buildnativecall,nativecall,nativecallrefresh}?

[14:56] *** gdey left
[14:56] <arnsholt> From memory, that should do it, yeah

[14:57] <arnsholt> Oh, and the REPRs

[14:58] *** konundra left
[14:59] *** crab2313 joined
[15:03] *** konundra joined
[15:06] <[Coke]> I didn't see any followup to an earlier comment: should we allow star modules that don't have tests? (I assume we grandfather in the existing ones, but any new ones should probably have tests)

[15:06] *** leprevost left
[15:06] <FROGGS> [Coke]: sounds good

[15:07] <PerlJam> [Coke]: which don't have tests?

[15:07] <arnsholt> pmurias: You going to YAPC::NA?

[15:07] <PerlJam> [Coke]: (I agree that star modules should have tests btw :)

[15:07] <nwc10> harness the infinite supply of volunteers to write tests?

[15:07] <nwc10> or at least, "hackathon"

[15:09] <[Coke]> PerlJam: https://github.com/coke/rakudo-star-daily/blob/master/log/test-modules.log - modules/Grammar-Profiler-Simple modules/perl6-http-easy modules/Pod-To-HTML modules/rakudo-debugger 

[15:10] *** leprevost joined
[15:11] <pmurias> arnsholt: no

[15:12] <arnsholt> 'k. In that case, I'd love to hear about it if you start on something

[15:12] <arnsholt> I'm not at all opposed to more people working on NativeCall stuff =)

[15:13] <pmurias> arnsholt: if you want to work on NativeCall for JVM, I could implement it for JavaScript ;)

[15:13] *** btyler left
[15:13] <arnsholt> Or that =)

[15:14] <arnsholt> I left off my NQP hacking in the middle of something of a yak shave, so if you want to hack on JVM NativeCall, feel free

[15:14] *** thou joined
[15:14] <arnsholt> There're other things that need to be done for NativeCall as well, so you wouldn't put me out of business, as it were =)

[15:19] *** xinming left
[15:19] *** frdmn left
[15:24] *** frdmn joined
[15:26] *** btyler joined
[15:27] *** census joined
[15:28] *** crab2313 left
[15:28] *** census_ joined
[15:30] *** konundra left
[15:30] *** konundra joined
[15:31] *** census left
[15:31] *** Anarch left
[15:35] *** daxim left
[15:35] *** census_ is now known as census

[15:41] *** bluescreen10 joined
[15:41] *** xinming joined
[15:43] <PerlJam> Is there some way to get END phasers to run in the appropriate order when I do   END { ... } use Module-with-END;  END { ... }   ?   right now, it seems that the module's END phaser always executes last.

[15:43] <PerlJam> (in rakudo)

[15:49] *** arlinius joined
[15:49] <PerlJam> https://gist.github.com/perlpilot/5584994   # an example of what I'm seeing.

[15:49] *** vaelxon joined
[15:56] <dalek> specs: 14e9ce6 | larry++ | S04-control.pod:

[15:56] <dalek> specs: define INIT/END order across modules

[15:56] <dalek> specs: review: https://github.com/perl6/specs/commit/14e9ce6c8a

[15:58] <TimToady> obviously rakudo is not following the spec there  :D

[15:58] <PerlJam> TimToady++  :-)

[15:59] <TimToady> now to decide whether what I said actually makes any sense...

[16:00] <arnsholt> Hehe

[16:01] <arnsholt> What if several modules import the same module?

[16:02] <TimToady> thing is, if these phasers only run once, then you can't depend on the order anyway

[16:02] <arnsholt> Yup

[16:02] <PerlJam> It works for Perl 5  ;)

[16:03] <TimToady> well, Perl 5 one-ups Perl 6 by distinguishing CHECK from UNITCHECK.  currently we confuse those concepts, I think

[16:04] *** domidumont left
[16:09] <TimToady> maybe they should be called CHECK and DOUBLECHECK :)

[16:09] <masak> gtodd: I'm having second thoughts about the ONELINER exercise -- https://github.com/masak/workshop/issues/19 -- I think there's something in there can be done better.

[16:09] *** census left
[16:10] <PerlJam> DOUBLECHECK is too long, how about RECHECK?

[16:10] <TimToady> well, or use a different word entirely

[16:10] <masak> CONTROL :P

[16:10] <TimToady> app-level check is when we start making big assumptions about what can be optimized

[16:12] <TimToady> POPQUIZ and FINAL :)

[16:13] <TimToady> FINAL would be when you finalize your classes...

[16:13] <PerlJam> FINAL has some nice appeal to it 

[16:14] <PerlJam> (I actually thought we already had a phaser called FINAL though)

[16:14] <TimToady> a bit of confusion with what other languages mean by "final", but maybe that's okay

[16:15] *** SmokeMachine joined
[16:16] <gtodd> masak: the issue identifies a valid problem for oneliners ... move the expansions to a new node/excercise and call it  ... errm maintenableness or something 

[16:16] *** pmurias left
[16:16] *** kivutar left
[16:16] <gtodd> masak: of course putting the oneliner in a shell script and adding comments trying to explain what it does would be cheating :)

[16:17] <TimToady> the other minor problem is the confusion of changing UNITCHECK/CHECK to CHECK/FINAL, but we're already pretty heavily confused in that area...

[16:19] <PerlJam> maybe do something similar to "DOC INIT" and have "UNIT INIT" and "UNIT END" instead?  (doesn't help with FINAL though)

[16:20] <PerlJam> those at least would be a little more self documenting

[16:21] *** kaleem joined
[16:21] <TimToady> and we never did define a COMPOSE phaser for roles...

[16:22] <TimToady> is that still desirable?

[16:22] <PerlJam> I think so.

[16:22] <masak> gtodd: well, the purpose of the exercise was to send a message like "ooh, look how oneliners and full-fledged scripts are simply different modes of expression, suitable in different situations". but I suspect there is a more effective way to convey that.

[16:22] <masak> TimToady: yes, I think so.

[16:23] <TimToady> what about a DECOMPOSE phaser? :D

[16:24] * masak .oO( I told you we should have left the design to someone younger... ) :P

[16:25] <PerlJam> As soon as we have the need to explode classes into their constituent roles, a DECOMPOSE phaser will come in handy   :)

[16:25] <tadzik> oh, btw

[16:25] <tadzik> "What is mozart doing right now?"

[16:25] <tadzik> "Decomposing"

[16:25] <PerlJam> tadzik: cute

[16:25] *** grondilu joined
[16:25] <tadzik> well, I tend to find such jokes hilarous. Sorry

[16:26] <grondilu> rn: say DayTime.new("2013/5/31")

[16:26] <camelia> niecza v24-51-g009f999: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared name:␤        'DayTime' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1502 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 36) ␤  at /hom…

[16:26] <camelia> ..rakudo 570d1d: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared name:␤    DayTime used at line 1. Did you mean 'DateTime'?␤␤»

[16:26] <grondilu> rn: say DateTime.new("2013/5/31")

[16:26] <camelia> niecza v24-51-g009f999: OUTPUT«DateTime.new(...)␤»

[16:26] <camelia> ..rakudo 570d1d: OUTPUT«Invalid DateTime string '2013/5/31'; use an ISO 8601 timestamp (yyyy-mm-ddThh::mm::ssZ or yyyy-mm-ddThh::mm::ss+0100) instead␤  in method new at src/gen/CORE.setting:12519␤  in method new at src/gen/CORE.setting:726␤  in block  at /tmp/NBxezZpnSP:1␤␤»

[16:26] <PerlJam> that edit-distance guessing of what was meant still makes me giddy inside  :)

[16:27] * grondilu looks at the dictionary what "giddy" means

[16:27] <colomon> tadzik: http://www.youtube.com/watch?v=sjWPXybVjYE

[16:28] <TimToady> we don't really have a decent date/time parser specced yet

[16:28] <masak> grondilu: "bubbling with happiness" -- something like that.

[16:29] <TimToady> n: say DateTime.new("2013/5/31").year

[16:29] <camelia> niecza v24-51-g009f999: OUTPUT«Unhandled exception: Unable to resolve method year in type DateTime␤  at /tmp/hzpFp0URhD line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4331 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4332 (module-CORE @ 582) ␤  at /h…

[16:29] <masak> TimToady: if you ask me that sounds like A Good Case For A Module. outside of the spec.

[16:29] <TimToady> which don't have one o' yet

[16:30] <masak> TimToady: just like I don't want to support Klingon Hexadecimal Discordian time in core, I don't want to parse lots of cultures' crazy backwards time formats in core ;)

[16:30] * grondilu is fine with it not being in core.

[16:30] <masak> ISO 8601 has already won, it's just not evenly distributed yet.

[16:30] *** kaleem left
[16:30] <masak> I'm totally fine with the core DateTime constructor detecting the type of craziness and recommending a module ;)

[16:30] <TimToady> sure, but it'd be nice to be able to handle http://rosettacode.org/wiki/Date_manipulation without writing a grammar

[16:30] <PerlJam> masak: though DateTime could parse certain substrings of ISO8601 

[16:31] <masak> but that needn't be spec'd either.

[16:31] <masak> PerlJam: only to the extent ISO-8601 thinks that's a *good idea*, though.

[16:31] *** gdey joined
[16:31] <masak> PerlJam: it's a really good spec. I haven't found any reason to deviate from it.

[16:31] <TimToady> whoever put the T in middle needs to be sent off to charm school

[16:31] <masak> heh.

[16:32] <tadzik> colomon: haha

[16:33] <TimToady> a + would have been a lot prettier, and nearly meaningful

[16:33] <PerlJam> but ... but ... T is mnemonic for time!

[16:33] <PerlJam> ;)

[16:34] <TimToady> + looks like t

[16:34] <FROGGS> but there is already a 

[16:34] <FROGGS> +  before timezone offset

[16:35] * masak thinks he woulda preferred a x20 space

[16:35] <PerlJam> I can see why they wouldn't want to use a space though

[16:36] <TimToady> .u  

[16:36] <yoleaux> U+00A0 NO-BREAK SPACE [Zs] ( )

[16:37] *** ajr_ left
[16:37] <TimToady> underline would be way better than T, visually speaking

[16:37] *** dmol joined
[16:37] *** xinming left
[16:38] <PerlJam> http://xkcd.com/1179/  (xkcd++  ... always timely and relevant ;)

[16:38] <TimToady> but standards people tend to have a tin eye

[16:39] <TimToady> PerlJam: love the mouseover

[16:39] <sjohnson> what does a "tin eye" mean?

[16:40] <TimToady> same as a "tin ear", only different

[16:40] <sjohnson> heh

[16:40] <sjohnson> ah, interesting.

[16:40] * sjohnson learns

[16:40] <TimToady> well, that's what I'm making it mean now; you probably won't find it much in popular culture...

[16:41] <TimToady> but I never let things like that stop me from saying what I want :)

[16:41] <PerlJam> I think the phrase "tin ear" came from the rather unmelodic sound tin makes when struck.  Somehow I don't think that quite translates to vision

[16:42] <TimToady> you're overanalyzing it :)

[16:42] <rjbs> Ever strike somebody in the eye?

[16:42] <PerlJam> rjbs++

[16:42] <TimToady> and I think it probably referred to an ear horn

[16:42] <PerlJam> oh, that makes sense too  "tone deaf" and all

[16:44] <PerlJam> http://lists.maddoc.net/pipermail/in-bloomington-uhs-l/2008-April/022600.html

[16:44] *** donaldh left
[16:53] *** dakkar left
[16:54] *** frd|afk joined
[16:54] *** frd|afk left
[17:01] *** alester joined
[17:01] *** xinming joined
[17:06] *** ajr joined
[17:06] *** ajr is now known as Guest96242

[17:08] *** DreamingInCode1 joined
[17:10] *** DreamingInCode left
[17:11] *** Guest96242 is now known as ajr_

[17:20] *** fhelmberger left
[17:20] <lizmat> <nag mode="on">http://irclog.perlgeek.de/perl6/2013-05-15#i_7071271  :-)

[17:22] <lizmat> r: my %h=a=>2; say %h<a>:kv; say %h<a>.kv; say 2.kv

[17:22] <camelia> rakudo 570d1d: OUTPUT«a 2␤0 2␤0 2␤»

[17:22] <lizmat> r: my @a=(1..10); say @a[9]:kv; say @a[9].kv   # similar issue with arrays

[17:22] <camelia> rakudo 570d1d: OUTPUT«9 10␤0 10␤»

[17:25] <PerlJam> lizmat: btw, you know you don't need parens there, right?

[17:25] <lizmat> in the 1..10 you mean, yes

[17:26] *** japhb__ left
[17:26] *** SamuraiJack joined
[17:32] <dalek> specs: a7444d8 | larry++ | S (6 files):

[17:32] <dalek> specs: distinguish FINAL phase from CHECK phase

[17:32] <dalek> specs: 

[17:32] <dalek> specs: CHECK phase is always after the parsing of the current compilation

[17:32] <dalek> specs: unit.  FINAL phase is after the main application's CHECK phase,

[17:32] <dalek> specs: when the application as a whole commits to optimization policies.

[17:32] <dalek> specs: In other words, a FINAL block defined in a module is not run when the

[17:32] <dalek> specs: module is compiled (that would be a CHECK instead), but rather when the

[17:32] <dalek> specs: application using the module is completing its compilation and linking.

[17:32] <dalek> specs: review: https://github.com/perl6/specs/commit/a7444d895a

[17:35] <TimToady> p5's UNITCHECK/CHECK are now p6's CHECK/FINAL

[17:35] <sjohnson> TimToady: :)  The reason why I thought it might be an idiom is cause of the reverse image search engine at http://www.tineye.com/

[17:35] <TimToady> oh, and I snuck in a COMPOSE phaser

[17:37] *** SmokeMachine left
[17:37] <TimToady> almost added a USED phaser, but would you buy a USED phaser from this salesman?

[17:37] <lizmat> std: FINAL { }

[17:37] <camelia> std 4dc2553: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared name:␤    'FINAL' used at line 1␤Check failed␤FAILED 00:00 42m␤»

[17:37] <lizmat> :-)

[17:37] <TimToady> ohh, STDbug :)

[17:37] * PerlJam notes that lizmat never turned nag mode off  :)

[17:37] <lizmat> </nag>

[17:38] *** SmokeMachine joined
[17:41] <diakopter> TimToady: but has it been overloaded?  sometimes it's filled with sawdust which masks that.

[17:43] <dalek> std: 9906f18 | larry++ | STD.pm6:

[17:43] <dalek> std: add FINAL and COMPOSE, just for lizmat++

[17:43] <dalek> std: review: https://github.com/perl6/std/commit/9906f18ffb

[17:43] <diakopter> TimToady: can you point me to the latest vector blackonwhite camelia you want on the shirt? I forgot to send it last time

[17:44] <lizmat> *blush*

[17:44] <PerlJam> TimToady: that "declared at C<use> time" paragraph could maybe have a note that says something like "since these phasers only fire once, they are only installed the first time they are encountered."

[17:44] <PerlJam> (but with better words :)

[17:45] <TimToady> diakopter: http://wall.org/~larry/c2.eps

[17:49] <PerlJam> diakopter: These are the shirts we're getting as part of YAPC?  or some other shirt?

[17:50] *** DarthGandalf joined
[17:50] <[Coke]> (put in an order for me for a camelia, if it works that way)

[17:51] <TimToady> recent webinar spam to me: Learn the art of trading Butterflies with Rob Roy

[17:51] <diakopter> yes yapc austin

[17:52] <diakopter> [Coke]: heh; there's only 1 shirt, with all (most?) of the logos on the site sidebar

[17:52] <diakopter> they're small.

[17:52] <TimToady> I think the subtext was: Does that mean you're gonna make the rabid p5ers wear a butterfly?

[17:53] <TimToady> or do you get a choice?

[17:53] <diakopter> well they can sharpie it out if they really want

[17:53] <lizmat> not too dissimilar to rabid p6ers having to wear a T-shirt with "Perl 5" in big letters on the back (like last year in Frankfurt)

[17:53] <diakopter> but it's just as likely they won't know what the butterfly means

[17:54] <lizmat> Good thing pmichaud++ organised shirts with "Perl 6", and one with "Perl *" for Larry

[17:54] *** xinming left
[17:54] <diakopter> "hey what's this drunk moth on my shirt"

[17:55] <TimToady> That's a drunk butterfly, you insensitive clod!

[17:57] *** xinming joined
[17:58] *** fgomez left
[18:00] *** japhb_ joined
[18:01] <rjbs> I thought she was a parasprite. http://mlp.wikia.com/wiki/Parasprite

[18:02] <flussence> .oO( parabitmap? )

[18:02] <PerlJam> .oO( parablt? )

[18:02] <PerlJam> rjbs: The image at the top of that page could be camelia's cousin

[18:03] <dalek> perl6-roast-data: b399e8b | coke++ | / (4 files):

[18:03] <dalek> perl6-roast-data: today (automated commit)

[18:03] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/b399e8bbb4

[18:03] *** kaleem joined
[18:10] * moritz wants a shirt with Perl <[56]>

[18:10] <dalek> specs: 8fca4e7 | larry++ | S04-control.pod:

[18:10] <dalek> specs: "first time" tweak from PerlJam++

[18:10] <dalek> specs: review: https://github.com/perl6/specs/commit/8fca4e78d4

[18:17] <[Coke]> bah. crontab entry failed. sans mailer, no idea what failed.

[18:18] *** SamuraiJack left
[18:19] *** SamuraiJack joined
[18:23] <[Coke]> ah, stackoverflow++ for a nice cron debug trick.

[18:24] <rjbs> [Coke]: http://advent.rjbs.manxome.org/2009/2009-12-07.html

[18:25] <[Coke]> rjbs: if only mail was being delivered on feather. :)

[18:26] <[Coke]> (that does look nifty)

[18:31] <[Coke]> something during the build is trying to checkout a RW github copy of PSGI.

[18:36] <[Coke]> ack2-a--

[18:38] <dalek> star: c3bed5e | (Will Coleda)++ | .gitmodules:

[18:38] <dalek> star: use RO github URL

[18:38] <dalek> star: review: https://github.com/rakudo/star/commit/c3bed5e475

[18:55] <nwc10> [Coke]++ # grinding away the rough points on star 

[18:56] *** cxreg2 is now known as cxreg

[19:01] <[Coke]> soooo slow on feather..

[19:01] <[Coke]> (not that feather is slow today - building star ain't fast)

[19:04] <lizmat> jnthn: while trying to grok load_module (Perl6/ModuleLoader.nqp), I found that "locate_candidates" is doing *4* stat()s for each file on each %INC dir

[19:05] <lizmat> when in the case of .pm6, you would only need 1 stat(), and in the case of .pm only 2.

[19:07] <lizmat> also I think there is a bug there: if in one %INC dir a .pm6 file has been seen, it will never check for .pm files anymore

[19:07] *** berekuk joined
[19:09] <lizmat> hmmm… 3 in case of a .pm file, 2 in case of a .pm6 file

[19:10] <FROGGS> lizmat: well, atm it prefers .pm6-files, yeah

[19:10] <lizmat> yeah, that's fine

[19:10] <FROGGS> later it has to choose the best one (highest version) that fits our search criteria

[19:11] <PerlJam> It's too bad there isn't some sort of single file index it could look at.

[19:11] <lizmat> it's just that suppose we search for a A in ./a and ./b, if it has seen a ./a/A.pm6, it will not check ./b/A.pm6 for existence

[19:11] <lizmat> FROGGS: so you're saying this is intentional?

[19:12] <FROGGS> yes

[19:12] <FROGGS> lizmat: what should it do when it finds more than one candidate? it cant tell which one is better

[19:13] <lizmat> well, locate_candidates appears not to short-circuit when it finds one

[19:13] <FROGGS> but load_module always will use @candidate[0]

[19:14] <lizmat> indeed…  isn't that silly though?  that's a *lot* of unneeded stat()s then

[19:14] <FROGGS> true

[19:14] *** xenoterracide_ left
[19:15] *** xenoterracide joined
[19:16] *** yoleaux left
[19:16] * lizmat puts in some "last"s and runs a spectest

[19:16] *** yoleaux joined
[19:16] <lizmat> yoleaux: good to see you're back!

[19:17] *** yoleaux left
[19:17] *** yoleaux joined
[19:19] <sorear> good * #perl6

[19:19] <FROGGS> o/ sorear 

[19:19] <lizmat> morning sorear!

[19:20] <lizmat> hmmm….. afternoon sorear!

[19:21] <geekosaur> $ugt

[19:25] *** bluescreen10 left
[19:25] *** kaleem left
[19:27] <masak> sorear! \o/

[19:27] <masak> &

[19:30] <lizmat> wrt load_module: it appears that it is searching all @INC directories even if the module already has been loaded

[19:31] <FROGGS> hmmm, that is not very clever

[19:32] <lizmat> it needs to do that because locate_candidates generates hashes with the fully qualified filename

[19:32] <lizmat> and that's what load_module uses as a key for %modules_loaded

[19:33] <FROGGS> hmmm, can't it use the module-name?

[19:33] <lizmat> I guess it could, but it doesn't

[19:34] <FROGGS> well, I guess it takes a while till we have full S11 support, so maybe it makes sense to optimize it a bit

[19:35] <FROGGS> or maybe this time should better be invested for S11 research :/

[19:37] <lizmat> well, looking at ModuleLoader.nqp, I think I can make an alternate version that would live next to this one

[19:37] *** fgomez joined
[19:38] <lizmat> still written in NQP, and hook that in with e.g. an "enjoy" exportable sub instead of "use" 

[19:38] <dalek> v5: d4f845c | (Tobias Leich)++ | / (2 files):

[19:38] <dalek> v5: updated pragmas

[19:38] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/d4f845c1ff

[19:38] <dalek> v5: 87e7b65 | (Tobias Leich)++ | t/test.pl:

[19:38] <dalek> v5: added skip_all_without_perlio

[19:38] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/87e7b659ef

[19:38] <dalek> v5: bda5246 | (Tobias Leich)++ | lib/Perl5/Grammar.nqp:

[19:38] *** census joined
[19:38] <dalek> v5: make statement_control:use beautiful

[19:38] <dalek> v5: 

[19:38] <dalek> v5: This will help us set and retrieve pragmas.

[19:38] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/bda52463cd

[19:42] <FROGGS> pssst, hey rakudo, you could steal that statement_control:use from v5, it is nice :P

[19:43] <lizmat> FROGGS: pssst, say what?

[19:43] <FROGGS> what?

[19:43] <lizmat> *sigh*

[19:44] *** SamuraiJack left
[19:44] *** SamuraiJack_ joined
[19:45] <FROGGS> TimToady++ p6's grammars are just awesome

[19:46] * FROGGS .oO( "a homo habilis discovering his opposable thumb says what?" - "what?" )

[19:46] <moritz> I think dconway++ and pmichaud++ (and a few others) also deserve praise for making p6 grammars awesome

[19:46] <FROGGS> dconway++

[19:47] <FROGGS> pmichaud++

[19:47] <FROGGS> (a few others)++

[19:47] <FROGGS> moritz: I'm just too new here to know that :o)

[19:47] <moritz> http://perlcabal.org/syn/S05.html#AUTHORS

[19:49] <FROGGS> R-)

[19:49] <FROGGS> yeah, you are right

[19:49] <FROGGS> moritz++ and al++ # too

[19:50] *** araujo left
[19:50] <moritz> it was probably presumptuous to put my name in

[19:50] <moritz> I just made 10 commits to it, most not huge

[19:50] <PerlJam> FROGGS: TimToady did most of the awesome though  :)

[19:51] <masak> moritz: not presumptuous, IMO.

[19:51] <lizmat> having me at the top of http://perlcabal.org/syn/S17.html#AUTHORS, now that is presumptuous

[19:51] <FROGGS> moritz: quality goes before amount of changed lines :o)

[19:51] <lizmat> although I'm trying to make up for it

[19:52] <moritz> oh, and there are a few commits by me from the SVN times which my first search didn't count

[19:56] <dalek> rakudo-star-daily: dd19953 | coke++ | doit (2 files):

[19:56] <dalek> rakudo-star-daily: chmod +x

[19:56] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/dd19953c9e

[19:56] <dalek> rakudo-star-daily: bf96413 | coke++ | doit:

[19:56] <dalek> rakudo-star-daily: auto commit a workday

[19:56] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/bf96413400

[19:56] <dalek> rakudo-star-daily: fd8b792 | coke++ | bin/star.sh:

[19:56] <dalek> rakudo-star-daily: use readonly star checkout

[19:56] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/fd8b7920c5

[19:56] <dalek> rakudo-star-daily: dbab211 | coke++ | bin/star.sh:

[19:56] <dalek> rakudo-star-daily: Track more potential failure modes

[19:56] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/dbab211106

[19:56] <dalek> rakudo-star-daily: fd90611 | coke++ | log/ (5 files):

[19:56] <dalek> rakudo-star-daily: today (automated commit)

[19:57] <lizmat> [Coke]++ indeed!

[19:57] <[Coke]> minor updates to the testing out since it's running from cron. future updates should highlight changes more directly.

[19:59] <[Coke]> (first run committed had tests times and TEST_JOBS.

[20:04] *** _jaldhar_ joined
[20:05] <lizmat> first spectest run with "last" in "locate_candidates" seems to have run ~2% faster, doing another one now

[20:08] *** eternaleye left
[20:08] *** eternaleye joined
[20:16] <dalek> v5: b957340 | (Tobias Leich)++ | / (2 files):

[20:16] <dalek> v5: added skip_all_without_dynamic_extension

[20:16] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/b957340aea

[20:17] *** _jaldhar_ left
[20:18] *** btyler left
[20:20] *** _jaldhar_ joined
[20:21] *** SamuraiJack_ left
[20:38] *** konundra left
[20:38] <dalek> specs: 1bc6fed | (Elizabeth Mattijsen)++ | S11-modules.pod:

[20:38] <dalek> specs: Added some periods

[20:38] <dalek> specs: review: https://github.com/perl6/specs/commit/1bc6fed1bf

[20:39] <dalek> nqp/rak-jvm-support: de8c590 | (Donald Hunter)++ | src/vm/jvm/ (3 files):

[20:39] <dalek> nqp/rak-jvm-support: First pass at adding filename and linenumber annotations to generated bytecode.

[20:39] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/de8c5908e3

[20:39] <dalek> nqp/rak-jvm-support: 40b1b76 | (Donald Hunter)++ | src/vm/jvm/QAST/Compiler.nqp:

[20:39] <dalek> nqp/rak-jvm-support: Get the code right place for per statement line numbers.

[20:39] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/40b1b76a86

[20:39] <dalek> nqp/rak-jvm-support: b677b4c | (Donald Hunter)++ | src/vm/jvm/ (3 files):

[20:39] <dalek> nqp/rak-jvm-support: Merge pull request #99 from donaldh/jvm-debug

[20:39] <dalek> nqp/rak-jvm-support: 

[20:39] <dalek> nqp/rak-jvm-support: Source file and line number annotations in generated .class files

[20:39] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/b677b4cd83

[20:40] *** fhelmberger joined
[20:41] *** fhelmberger left
[20:42] *** kaare_ left
[20:50] <lizmat> just finished another spectest run: down to 2385 wallclock seconds from 2430, which is 1.9% faster

[20:51] <FROGGS> that's pretty cool

[20:51] <lizmat> https://gist.github.com/lizmat/5587268

[20:51] <lizmat> if anybody is interested in committing this

[20:55] *** skids joined
[20:56] <jnthn> (4 hour train delay)-- :/

[20:56] <lizmat> jnthn!

[20:57] <[Coke]> jnthn: ugh.

[20:57] * lizmat is running a spectest without the "last" modification to "ModuleLoader" to doubly verify it takes longer

[20:58] <jnthn> lizmat: It searches all the candidates so it could then go on to filter them by version. If you think we'll end up doing things a good bit different for ver/auth, feel free to do the planned opt.

[20:58] <FROGGS> 4 hours? that's ridiculous

[20:58] <jnthn> Shorter spectest runs are always nice

[20:58] <jnthn> FROGGS: Yes, especially when the journey length is meant to be about 4 hours. 

[20:58] <FROGGS> :/

[20:59] <FROGGS> do they build the trains JIT?

[20:59] <lizmat> I think it will be a lot different, yes

[20:59] <lizmat> I've been stupid enough to start a pull request from nom

[20:59] <jnthn> btw, I left a comment on the earlier spec commit: https://github.com/perl6/specs/commit/a7444d895a3641df8ee44311f3613c1612c4de33#commitcomment-3220267

[21:00] <jnthn> TimToady: ^^ 

[21:04] *** donaldh joined
[21:04] <[Coke]> ugh, I just used ~ for stringconcat in CF.

[21:05] *** skids left
[21:06] <lizmat> so I can't start a new pull request without including all changes of the initial pull request

[21:06] * lizmat is learning new git fu every day

[21:07] *** ajr_ left
[21:09] <FROGGS> what is the best way to let  -"10foo" become  -10  or v5?

[21:09] <FROGGS> r: -"10foo"

[21:09] <camelia> rakudo 570d1d: OUTPUT«Cannot convert string to number: trailing characters after number in '10⏏foo' (indicated by ⏏)␤  in method Numeric at src/gen/CORE.setting:10020␤  in sub prefix:<-> at src/gen/CORE.setting:2818␤  in sub prefix:<-> at src/gen/CORE.setting:2817␤  in sub prefix:<-> at…

[21:10] <FROGGS> that is happening in Str.Numeric

[21:10] *** thou left
[21:10] <jnthn> FROGGS: You'll probably run into lots of these things so long as you try to re-use the Perl 6 CORE types as your Perl 5 ones...

[21:11] <FROGGS> yeah, I'd like to have a P5Str... or wait, I could mix in a P5Str role, can I?

[21:12] <FROGGS> (and maybe remove it again when switching to perl6)

[21:12] <lizmat> r: my %h{Any}; %h<a><b>=1; say %h

[21:12] <camelia> rakudo 570d1d: OUTPUT«No such method 'postcircumfix:<{ }>' for invocant of type 'Mu'␤  in block  at /tmp/Y_iRXO785u:1␤␤»

[21:13] <lizmat> r: my %h; %h<a><b>=1; say %h

[21:13] <camelia> rakudo 570d1d: OUTPUT«("a" => {"b" => 1}).hash␤»

[21:13] <lizmat> r: my %h{Any}; %h<a><b>=1; say %h   # rakudo bug?

[21:13] <camelia> rakudo 570d1d: OUTPUT«No such method 'postcircumfix:<{ }>' for invocant of type 'Mu'␤  in block  at /tmp/zSCg5yXsh8:1␤␤»

[21:16] <FROGGS> jnthn: maybe I should just make a Str.pm which would be use-d, but this leads to a huge code duplication...

[21:16] <lizmat> wouldn't a Stringy.pm type approach work?

[21:16] <jnthn> FROGGS: I didn't think Perl 5 had any methods on stuff like strings?

[21:17] <lizmat> STDERR->print ?

[21:17] <FROGGS> STDERR is not a string

[21:18] <FROGGS> jnthn: it has no methods, but it does things like .Numeric if prefixed with -

[21:18] <lizmat> p5eval: "STDERR"->print("Foo")

[21:18] <p5eval> lizmat: ERROR: Can't locate object method "print" via package "IO::File" at (eval 7) line 1.

[21:18] <lizmat> that's odd: $ perl -e '"STDERR"->print("Foo\n")'

[21:18] <lizmat> Foo

[21:19] <FROGGS> lizmat: not sure if Stringy.pm would do the trick, but I guess not

[21:21] <lizmat> I was just proposing an idea, no idea whether it can work or not

[21:24] <colomon> lizmat: what do you mean by a Stringy.pm type approach?

[21:25] *** araujo joined
[21:25] *** araujo left
[21:25] *** araujo joined
[21:25] <lizmat> my class Str does Stringy

[21:25] <lizmat> to prevent code duplication

[21:26] <FROGGS> the problem is, class Str does a lot of work (some parts I need to change though)

[21:26] *** dmol left
[21:26] <FROGGS> and in the AST, there is a callmethod Stringy, which I suppose is Mu.Stringy, which calls self.Str

[21:27] <colomon> ah.  I think that's a bit backwards ... at least, I'd expect things like conversion to Int to be implemented in Stringy, not Str.  And that means you'd get the p6 behavior.

[21:27] <colomon> and miss functionality you need.  

[21:27] <FROGGS> so I am currently trying to supply my own Str class which overrides the current in the given scope

[21:27] <FROGGS> colomon: looks like this conversion is living in Str

[21:28] <colomon> FROGGS: that's probably a "bug", though.

[21:28] <FROGGS> Representation must be composed before it can be allocate

[21:28] <FROGGS> -.-

[21:29] <colomon> at least, I would certainly expect other Stringy classes to handle things like conversion to Int the same way Str does.

[21:29] <colomon> I'd think your P5Str mixin role is a solid idea.

[21:29] <colomon> Or a P5Str class which is implemented in terms of standard Str.

[21:30] <FROGGS> there is no other class that does role Stringy

[21:30] <lizmat> but there must have been a reason to do it like this?

[21:30] <FROGGS> but I cant replace an existing method by mixing in my role?

[21:31] <FROGGS> role Stringy is empty, but its file has defines infixes...

[21:31] <FROGGS> s/has defines/defines some/

[21:33] <masak> today's autopun spotting: https://i.chzbgr.com/maxW500/7446167552/hB00363D2/

[21:34] <masak> (that one has to be deliberate, though)

[21:34] *** kurahaupo joined
[21:34] * FROGGS .oO( “I went to the theatre, it looked a bit suspicious. I reckon the whole thing was staged.” - http://www.punoftheday.com/ )

[21:34] <masak> :P

[21:35] *** arlinius left
[21:35] <masak> you don't have to step very far from the literal meaning of something to be able to turn around and make a pun out of it, it seems.

[21:35] <colomon> FROGGS: one of the canonical examples of something else that should be Stringy is the NYI lazy string type Cat.

[21:35] *** kurahaupo left
[21:36] <lizmat> ooohhh, yes

[21:36] <FROGGS> I see

[21:36] *** kurahaupo joined
[21:36] <masak> even tadzik's "decomposing" today ultimately relies on the ability of English to muddle transitive/intransitive.

[21:36] <colomon> FROGGS: and what you'd expect with that is a type which is pretty much just like Str, except its storage representation is different.

[21:37] <masak> (i.e. "composing [a masterpiece]" vs "decomposing [bodily]")

[21:39] *** ironcamel left
[21:40] <lue> I haven't had much luck in running Rakudo on JVM yet :/ (compilation is fine, so far as I can tell, but I can't seem to run the result. `java perl6` throws a bunch of errors)

[21:40] <donaldh> lue: there's no runner as such.

[21:40] <donaldh> I'm working on one just now.

[21:40] <lizmat> masak: given "my %h; %h<Foo::Bar><perl5><Any><Any>= 1; my @a= <Foo::Bar perl5 Any Any>;"

[21:41] <lue> .oO(Then how did jnthn run it?)

[21:41] <lizmat> is there a way to (naively) do @a ~~ %h ?

[21:41] <lizmat> and get a match?

[21:41] <lizmat> aka, descend into the hash and try to match a lower key for the next element in the array?

[21:42] <donaldh> lue: you need a variant of the RUN_PERL6 value from the Makefile

[21:42] <lue> OK

[21:42] *** thou joined
[21:42] <donaldh> lue: for me it is java -Xbootclasspath/a:.:../nqp/install/nqp-runtime.jar:../nqp/install/asm-4.1.jar:../nqp/install/jline-1.0.jar:rakudo-runtime.jar -cp ../nqp/install perl6

[21:43] <masak> lizmat: not that I know -- not as part of the language proper.

[21:43] <lizmat> ah, too bad

[21:43] <masak> lizmat: I'm sure a subroutine could be written that did that -- but that's not what you're asking, methinks.

[21:43] <FROGGS> r: my %h; %h<Foo::Bar><perl5><Any><Any>= 1; my @a= <Foo::Bar perl5 Any Any 1>; say so ~%h.split(/\s+/).join(' ') eq ~@a

[21:43] <camelia> rakudo 570d1d: OUTPUT«True␤»

[21:43] <FROGGS> >.<

[21:43] <lue> works for me. thanks donaldh :)

[21:44] *** kurahaupo left
[21:44] <donaldh> :D

[21:44] <lizmat> masak: I seem to recall you doing something like at FOSDEM at your impromptu presentation

[21:44] <lizmat> *that

[21:45] *** konundra joined
[21:45] <lizmat> FROGGS: I'm not sure that is what I mean

[21:45] <FROGGS> :o)

[21:45] <lizmat> r: my %h; %h<Foo::Bar><perl5><Any><Any>= 1; my @a= <Foo::Bar perl6 Any Any 1>; say so ~%h.split(/\s+/).join(' ') eq ~@a

[21:45] <camelia> rakudo 570d1d: OUTPUT«False␤»

[21:46] <lizmat> hmmm, researching further

[21:46] <lue> .oO( say 1i; in the REPL is a baaad idea (it's a more sane error from perl6 -e))

[21:48] <lizmat> FROGGS: that only works if there is only 1 key in the hash

[21:50] *** ironcamel joined
[21:50] <lizmat> alas, spectest without "last" fix, is now only .5% slower then with the "last" fix

[21:51] <lizmat> guess I would have to try this on a freshly unmounted/mounted disk

[21:51] <FROGGS> r: my %h; %h<Foo::Bar><perl5><Any><Any>= 1; my @a= <Foo::Bar perl5 Any Any>; say %h{ @a }

[21:51] <camelia> rakudo 570d1d: OUTPUT«("perl5" => {"Any" => {"Any" => 1}}).hash (Any) (Any) (Any)␤»

[21:51] <FROGGS> hmm, sad

[21:52] <lizmat> also, I want to throw ranges in the mix

[21:52] *** kurahaupo joined
[21:53] <lizmat> r: my $a=1..10; my %h{Any}; %h{$a}=1; say %h

[21:53] <camelia> rakudo 570d1d: OUTPUT«(1..10 => 1).hash␤»

[21:53] <FROGGS> r: my %h; %h<Foo::Bar><perl5><Any><Any>= 1; my @a= <Foo::Bar perl5 Any Any>; say %h.exists( @a )

[21:53] <camelia> rakudo 570d1d: OUTPUT«False␤»

[21:53] <FROGGS> :/

[21:55] <masak> lizmat: hm.

[21:55] <masak> lizmat: I don't recall that ;)

[21:55] <lizmat> too bad, it looked brilliant: the battleship game, remember?

[21:56] <masak> minesweeper, yes.

[21:56] <lizmat> indeed

[21:57] *** pochi joined
[21:57] <masak> I remember doing a for loop like this: 'for [-1, -1], [-1, 0], [-1, +1], [0, -1],          [0, +1], [+1, -1], [+1, 0], [+1, +1] -> [$dr, $dc] { ... }'

[21:58] <masak> (but with newlines, so that the small arrays formed a grid)

[21:58] <masak> that's the closest I can think of.

[21:58] <FROGGS> r: my role fivy{ }; Str but fivy; say Str ~~ fivy

[21:58] <camelia> rakudo 570d1d: OUTPUT«False␤»

[21:58] <lizmat> and somehow you descended into that that

[21:58] <masak> lizmat: oh, and I used >> here and there, I believe.

[21:58] <FROGGS> hmmm, I should read how to do that...

[21:59] <masak> lizmat: maybe that's what you remember.

[21:59] <lizmat> yes, >> was involved

[21:59] <lizmat> >> is something you cannot "ack" on in the spec

[21:59] <masak> r: my @x = <foo bar baz>; say @x>>.uc.perl

[21:59] <camelia> rakudo 570d1d: OUTPUT«("FOO", "BAR", "BAZ")␤»

[21:59] <masak> lizmat: I don't remember what I did with it, but probably a >>.subst or something.

[22:00] <lizmat> not sure either: you were getting to the good parts when the time slot ended   :-(

[22:00] *** pochi left
[22:01] <masak> lizmat: >> is described in, hm, S12 I think.

[22:01] <masak> lizmat: see "Parallel dispatch".

[22:01] <lizmat> thanks!

[22:02] <timotimo> masak: do you think it would be any cleaner to do -1..1 Z -1..1 -> [$dr, $dc] { next if $dc == $dr == 0 }; ?

[22:02] <lizmat> hmmm… not what I was looking for…  I guess I'll write a sub  :-)

[22:02] <FROGGS> r: my $s = "10foo"; my role fivy{ method NUMERIC { 10 } }; $s does fivy; say $s ~~ fivy; say $s.NUMERIC; say -$s

[22:02] <camelia> rakudo 570d1d: OUTPUT«True␤10␤Cannot convert string to number: trailing characters after number in '10⏏foo' (indicated by ⏏)␤  in method Numeric at src/gen/CORE.setting:10020␤  in sub prefix:<-> at src/gen/CORE.setting:2818␤  in sub prefix:<-> at src/gen/CORE.setting:2817␤  in sub prefi…

[22:03] <FROGGS> r: my $s = "10foo"; my role fivy{ method Numeric { 10 } }; $s does fivy; say $s ~~ fivy; say $s.Numeric; say -$s

[22:03] <camelia> rakudo 570d1d: OUTPUT«True␤10␤-10␤»

[22:03] <masak> timotimo: I don't think that works as written.

[22:03] <FROGGS> uhh

[22:03] <timotimo> er, yes, needs to be X actually

[22:03] <FROGGS> that was easy

[22:03] <masak> timotimo: even so, doesn't create arrays.

[22:03] <timotimo> oh, ok

[22:03] <masak> timotimo: but, I was really going for the visual aspect of the code. it really looked 2-dimensional, which I consider a feature.

[22:03] <jnthn>  really needs a runner thingy set up, like nqp has

[22:04] <jnthn> oops

[22:04] *** lustlife left
[22:04] <jnthn> Rakudo on JVM really needs ...

[22:04] <timotimo> well, it works if you remove the [ ]

[22:04] <masak> timotimo: in the sense that the coordinate pairs are located on the screen according to what they are.

[22:04] <jnthn> I'll get to it in the next couple of days, but I'm happy to be beaten to that one. :)

[22:04] <timotimo> mhm

[22:04] *** arlinius joined
[22:04] <masak> timotimo: it's hard to beat that in terms of readability. :)

[22:05] <timotimo> true that

[22:05] *** pochi joined
[22:15] *** btyler joined
[22:16] <donaldh> jnthn: working on it :)

[22:16] <jnthn> \o/

[22:16] *** robinsmidsrod left
[22:16] <jnthn> OK, sleep, so my students don't get a sleep-deprived me... :)

[22:16] <donaldh> Trying to be too clever, which is slowing be down.

[22:16] <jnthn> 'night, #perl6

[22:16] <donaldh> *me

[22:16] <lizmat> 'night jnthn, #perl6!

[22:16] *** robinsmidsrod joined
[22:20] *** btyler left
[22:21] <masak> 'najt lizmat, jnthn, #perl6

[22:23] *** lichtkind left
[22:39] *** kurahaupo left
[22:44] *** lkjhgfdsa joined
[22:45] *** lkjhgfdsa left
[22:48] *** kurahaupo joined
[22:50] *** thou left
[22:55] *** cognominal left
[22:55] *** cognominal joined
[22:59] *** skids joined
[23:09] <diakopter> where's all the -Opain projects?

[23:18] <timotimo> if you're interested, you could try making ipython+perl6 work :)

[23:18] <timotimo> github.com/timo/iperl6kernel or something

[23:19] *** snoopy joined
[23:19] *** gudahtt left
[23:23] *** kurahaupo left
[23:29] *** xilo left
[23:29] *** donaldh left
[23:39] *** kurahaupo joined
[23:46] *** gdey left
[23:51] *** thou joined
[23:52] <raiph> diakopter: mebbe some tasks on http://questhub.io/perl/explore/latest/tag/perl6 ?

[23:54] *** konundra left
