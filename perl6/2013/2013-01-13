[00:04] <jnthn> diakopter++

[00:09] *** s1n joined
[00:09] *** s1n left
[00:09] <dalek> nqp-jvm-prep: 2de6909 | jnthn++ | nqp-jvm-cc.nqp:

[00:09] <dalek> nqp-jvm-prep: Sketch a frontend.

[00:09] <dalek> nqp-jvm-prep: 

[00:09] <dalek> nqp-jvm-prep: Doesn't do anything useful yet, since it can't handle the stuff that

[00:09] <dalek> nqp-jvm-prep: NQP puts into every QAST tree it makes. Once that stuff is sorted out,

[00:09] <dalek> nqp-jvm-prep: this should enable us to start to cross-compile/run snippts of NQP on

[00:09] <dalek> nqp-jvm-prep: the JVM.

[00:09] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/2de6909a54

[00:09] <dalek> nqp-jvm-prep: c3b1376 | jnthn++ | docs/ROADMAP:

[00:09] <dalek> nqp-jvm-prep: Remove completed.

[00:09] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/c3b13769fc

[00:09] <jnthn> 'night, #perl6

[00:10] <japhb> o/

[00:10] <tadzik> o/

[00:21] *** stevan_ joined
[00:22] *** stevan_ left
[00:23] *** cognominal left
[00:29] *** cognominal joined
[00:30] *** Celelibi left
[00:34] *** thou joined
[00:41] *** aindilis joined
[00:59] <colomon> rn: say Int === Real

[00:59] <p6eval> rakudo c3f565, niecza v24-17-gd343a2a: OUTPUT«False␤»

[00:59] <colomon> rn: say Int === Nil

[00:59] <p6eval> rakudo c3f565: OUTPUT«False␤»

[00:59] <p6eval> ..niecza v24-17-gd343a2a: OUTPUT«Unhandled exception: No value for parameter '$r' in 'infix:<===>'␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (infix:<===> @ 1) ␤  at /tmp/CuEdkqkzIX line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4218 (ANON @ 3) ␤  at /home/p6e…

[01:02] <colomon> rn: say Nil.perl

[01:02] <p6eval> rakudo c3f565, niecza v24-17-gd343a2a: OUTPUT«Nil␤»

[01:03] <timotimo> maybe niecza has something like :D in there?

[01:03] <colomon> try.t is doing blah === Nil, any objections to my changing that to blah.perl eq "Nil"

[01:03] <colomon> ?

[01:03] <timotimo> in the signature of infix:<===> i meant

[01:03] <colomon> timotimo: it doesn't, I already checked.  :)

[01:03] <colomon> rn: say 1 + Nil

[01:04] <p6eval> niecza v24-17-gd343a2a: OUTPUT«1␤»

[01:04] <p6eval> ..rakudo c3f565: OUTPUT«use of uninitialized value of type Nil in numeric context  in block  at /tmp/h8ZkdQ0IVp:1␤␤1␤»

[01:04] *** bitonic left
[01:04] <colomon> rn: say Nil.WHICH

[01:04] <p6eval> rakudo c3f565: OUTPUT«Nil␤»

[01:04] <p6eval> ..niecza v24-17-gd343a2a: OUTPUT«Nil[A414780]␤»

[01:06] <colomon> rn: say Int == Nil

[01:06] <p6eval> rakudo c3f565: OUTPUT«use of uninitialized value of type Int in numeric context  in block  at /tmp/KMq53smHNH:1␤␤use of uninitialized value of type Nil in numeric context  in block  at /tmp/KMq53smHNH:1␤␤True␤»

[01:06] <p6eval> ..niecza v24-17-gd343a2a: OUTPUT«True␤»

[01:06] <colomon> though I admit I don't understand why Niecza doesn't work here.

[01:15] *** Celelibi joined
[01:16] <colomon> rn: say infix:<===>(Int, Nil)

[01:16] <p6eval> rakudo c3f565: OUTPUT«False␤»

[01:16] <p6eval> ..niecza v24-17-gd343a2a: OUTPUT«Unhandled exception: No value for parameter '$r' in 'infix:<===>'␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (infix:<===> @ 1) ␤  at /tmp/jYxCoRL7W9 line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4218 (ANON @ 3) ␤  at /home/p6e…

[01:16] <colomon> rn: say infix:<===>(Nil, Nil)

[01:16] <p6eval> niecza v24-17-gd343a2a: OUTPUT«Unhandled exception: No value for parameter '$l' in 'infix:<===>'␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (infix:<===> @ 1) ␤  at /tmp/ytmMeisID2 line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4218 (ANON @ 3) ␤  at /home/p6e…

[01:16] <p6eval> ..rakudo c3f565: OUTPUT«True␤»

[01:17] <colomon> hurmph.  don't understand how rakudo works.  don't understand why niecza doesn't.

[01:17] *** PacoAir left
[01:37] <dalek> roast: a03dd1a | (Solomon Foster)++ | / (7 files):

[01:37] <dalek> roast: Fudge for Niecza.

[01:37] <dalek> roast: review: https://github.com/perl6/roast/commit/a03dd1a999

[02:13] *** FROGGS_ joined
[02:16] *** FROGGS left
[02:26] *** slayer101_ joined
[02:32] * _sri wishes TimToady would return to perl5 for a bit and turn things around before everything goes up in flames https://speakerdeck.com/stevan_little/perl-is-not-dead-it-is-a-dead-end

[02:41] * timotimo opens the git repo. sees no t/ folder. closes it again

[02:41] <timotimo> may be ready in 30 years.

[02:55] <slayer101_> perl6 is available right?

[02:57] *** slayer101_ left
[02:58] *** slayer101_ joined
[02:58] *** slayer101_ left
[02:58] *** slayer101_ joined
[03:13] <tadzik> whoa

[03:15] <tadzik> timotimo: actually, there's src/test

[03:15] <tadzik> it seems to be scala's way of doing things

[03:19] *** cognominal left
[03:27] *** countley joined
[03:40] *** Pleiades` left
[03:41] *** rxrxrx joined
[03:43] *** rxrxrx left
[03:46] *** Pleiades` joined
[04:01] *** MikeFair_ left
[04:02] *** MikeFair_ joined
[04:03] *** juiko joined
[04:07] <xenoterracide> _sri ok I think I hate stevan right now

[04:08] <xenoterracide> too much timtowtdi.. too much fragmentation

[04:10] <_sri> stevan is right though, perl5-porters is in a terrible state, volunteers working on cool features get totally destroyed

[04:10] <xenoterracide> _sri yeah I agree with the state of perl5, and even perl6

[04:11] <xenoterracide> but I'm not sure that perhaps trying to port nqp to a better vm wouldn't be a better use of time

[04:12] <_sri> i don't agree about the premise of the new language though, it is bound to fail, like stevan said himself, perl6 is the future, you can't get people excited for an interim language

[04:12] <xenoterracide> I feel like some people are simply constantly restarting the same damn things and abandoning the old.. Moose -> Moo -> mo (oh for the love of $)(*@#)

[04:13] <_sri> then again, perl6 is changing too much, perl5 too little, maybe there is a need for a language in between

[04:14] <xenoterracide> perl6 might slow down if we could get it to a useable state

[04:14] <xenoterracide> just my thought

[04:15] <_sri> i would port all my code to perl6 in a heartbeat if it was anywhere near production ready, but realistically, stevan is not too far off with his 10 years

[04:17] <xenoterracide> _sri do you think it'd be another 10 years if all the people complaining actually started working on it?

[04:17] <_sri> not everyone is a language designer

[04:18] <_sri> once at least the primitives are there we can talk

[04:18] <xenoterracide> that's true... I guess I'm not thinking about language design as much as making useful shit so people can do work... and perhaps porting nqp to a decent vm (since I keep hearing parrot sucks, 3rd hand info though)

[04:20] <xenoterracide> I guess I don't really know what's really going  on with most of this

[04:22] * xenoterracide also wonders why niecza isn't just nqp ported to the CLR, seriously fragmentation everywhere

[04:26] <xenoterracide> I just feel like I could name 10 people going 10 different ways so it's going to take 10 years because they're all going there own way. obviously adding people ! = faster in all cases, but perhaps it could. I am probably completely wrong

[04:28] <flussence> I tried making useful stuff. Having to fix other people's modules to get there is fine with me. Fighting bugs that it turns out don't exist, for weeks/months, because the *runtime* is broken is not fun.

[04:30] <xenoterracide> flussence yeah, I understand, and I understand not everyone can do it. but it seems those that can are all interested in working on competing ones

[04:31] * xenoterracide wonders if perl 6 could be reduced to an achievable goal

[04:32] <xenoterracide> so that some of it's features could be deferred until 6.2 and 6.4

[04:32] *** preflex left
[04:32] *** preflex_ joined
[04:32] *** preflex_ is now known as preflex

[04:36] <flussence> One thing worries me: panda was broken due to bugs in rakudo for most of the advent calendar and up until about a week ago. During that time I can count the number of new people I saw complaining about it on one hand. That's maybe four people taking an active interest in the language. The silent majority just see it's broken and uninstall it.

[04:36] <TimToady> I see the pessimists are out in force tonight :)

[04:38] * skids thinks the fact that development has proceeded in the face of such pessimism for so long is reason for optimism :-)

[04:38] <xenoterracide> flussence yeah I've been rather burned out for the last ~1-2 months, so I stopped coding on personal time

[04:42] <xenoterracide> skids++

[04:43] *** am0c joined
[04:48] <TimToady> Of course, just because the naysayers are wrong doesn't necessarily mean that the yeahsayers are right.  :)

[04:48] <TimToady> Usually everyone turns out to be wrong.  :)

[04:48] * _sri wants to be an optimist :(

[04:48] <skids> Initially I was discouraged that things "as basic" as concurrency and native types were NYI.  I just had to adjust to the fact that under a different paradigm, these things are not so "basic"

[04:48] *** slayer101_ left
[04:48] <xenoterracide> I prefer to think of myself as a realist. unfortunately I don't talk about the positives because I don't see them as needing fixing

[04:49] <TimToady> I prefer to think of myself as the unreasonable man upon whom all progress depends. :)

[04:50] <xenoterracide> on the positive note I am in #perl6 talking about perl6 having written some very basic perl6 code, wishing I could write perl6 for work. So something is write about it, because I'm not in #python #node or #ruby

[04:51] <TimToady> well, there is that :)

[04:54] * TimToady can't help being optimistic even when depressed :)

[04:59] <flussence> I'm very good at waiting, if nothing else

[05:07] <skids> A true pessimist/considers their predictions/as optimistic

[05:07] <xenoterracide> keeps thinking that the most worthwhile thing would be too build cpan6 (and not whatever Overmeer was thinking ), with a jenkins ci system

[05:12] * skids notices you can't paste into a github gist.  WTH?!?

[05:13] *** countley left
[05:13] * grondilu watches the presentation "perl is a dead end"

[05:14] <flussence> skids: they seem to expect you to use ctrl+c/v style pasting now

[05:15] <flussence> I've just stopped using it entirely

[05:22] <flussence> .oO( I'm sure they'd know about it through their bug tracker... if they had one. )

[05:33] <skids> https://gist.github.com/4522473

[05:35] *** am0c left
[05:48] *** Pleiades` left
[05:50] <lue> The fact that nqp can be ported to the JVM makes me optimistic (even though, on my system, Parrot < JVM ≪ AMD64 in terms of speed (IIRC, haven't used JVM in a while))

[05:53] *** werwerwer joined
[05:54] *** Pleiades` joined
[06:00] *** juiko left
[06:06] *** kaare_ joined
[07:00] <moritz> \o

[07:01] *** quester joined
[07:07] *** Chillance joined
[07:09] *** sundar left
[07:13] *** sundar joined
[07:14] *** Pleiades` left
[07:16] *** sundar left
[07:16] *** sundar joined
[07:18] *** Pleiades` joined
[07:19] *** sundar left
[07:37] *** Pleiades` left
[07:39] *** Pleiades` joined
[08:08] <diakopter> moritz: o/

[08:09] *** SamuraiJack joined
[08:13] <quester> r: macro postfix:<!> ($n) { quasi { [*] 1..{{{$n}}} }; }; for 3..5 { say $_! };

[08:14] <p6eval> rakudo c3f565: OUTPUT«6␤24␤120␤»

[08:14] <quester> r: macro postfix:<!> ($n) { quasi { [*] 1..{{{$n}}} }; }; say $_! for 3..5;

[08:14] <p6eval> rakudo c3f565: OUTPUT«use of uninitialized variable $max of type Any in numeric context␤1␤use of uninitialized variable $max of type Any in numeric context␤1␤use of uninitialized variable $max of type Any in numeric context␤1␤»

[08:15] * quester idly wonders who this $max guy is and why he doesn't like macros...

[08:15] <grondilu> I'm not sure macros can be implemented as operators yet

[08:16] <sorear> why are you using a macro for this anyway

[08:16] <sorear> a sub would work just as well

[08:16] <grondilu> rn: sub postfix:<!> { [*] 1 .. $^n } ; say 6!

[08:16] <p6eval> rakudo c3f565, niecza v24-17-gd343a2a: OUTPUT«720␤»

[08:18] <quester> True, I was playing with macros and not trying to do anything really useful.  It's just that I'm... puzzled... by the fact that that the macro works in "for 3..5 { say $_! };" and fails in "say $_! for 3..5;". 

[08:18] <grondilu> weird indeed

[08:19] <quester> Defining it as an operator (or sub if you think of it that way) works both ways.

[08:20] <grondilu> rn: sub postfix:<!> { [*] 1 .. $^n } ; say $_! for 3..5;

[08:20] <p6eval> rakudo c3f565, niecza v24-17-gd343a2a: OUTPUT«6␤24␤120␤»

[08:20] *** Pleiades` left
[08:20] <grondilu> rn: macro postfix:<!> { "foo" } ; say $_! for 3..5;

[08:20] <p6eval> niecza v24-17-gd343a2a: OUTPUT«===SORRY!===␤␤Action method macro_def not yet implemented at /tmp/e7VKKmOhep line 1:␤------> macro postfix:<!> { "foo" } ⏏; say $_! for 3..5;␤␤Action method routine_declarator:macro not yet implemented at /tmp/e7VKKmOhe…

[08:20] <p6eval> ..rakudo c3f565: OUTPUT«===SORRY!===␤Too many positional parameters passed; got 1 but expected 0␤at /tmp/vPkDA16w6J:1␤------> ␤»

[08:21] <grondilu> rn: macro postfix:<!> { quasi { "foo" } } ; say $_! for 3..5;

[08:21] <p6eval> rakudo c3f565: OUTPUT«===SORRY!===␤Too many positional parameters passed; got 1 but expected 0␤at /tmp/IM3NDCGFWv:1␤------> ␤»

[08:21] <p6eval> ..niecza v24-17-gd343a2a: OUTPUT«===SORRY!===␤␤Action method quasiquibble not yet implemented at /tmp/_B5uH03hbZ line 1:␤------> macro postfix:<!> { quasi { "foo" }⏏ } ; say $_! for 3..5;␤␤Action method quote:quasi not yet implemented at /tmp/_B5uH03hb…

[08:21] <grondilu> rn: macro postfix:<!>($) { quasi { "foo" } } ; say $_! for 3..5;

[08:21] <p6eval> niecza v24-17-gd343a2a: OUTPUT«===SORRY!===␤␤Action method quasiquibble not yet implemented at /tmp/p0RSqquNyI line 1:␤------> macro postfix:<!>($) { quasi { "foo" }⏏ } ; say $_! for 3..5;␤␤Action method quote:quasi not yet implemented at /tmp/p0RSqq…

[08:21] <p6eval> ..rakudo c3f565: OUTPUT«foo␤foo␤foo␤»

[08:22] <grondilu> rn: macro postfix:<!>($n) { quasi { $n+1 } } ; say $_! for 3..5;

[08:22] <p6eval> niecza v24-17-gd343a2a: OUTPUT«===SORRY!===␤␤Action method quasiquibble not yet implemented at /tmp/w9qhdjb0WB line 1:␤------> macro postfix:<!>($n) { quasi { $n+1 }⏏ } ; say $_! for 3..5;␤␤Action method quote:quasi not yet implemented at /tmp/w9qhdj…

[08:22] <p6eval> ..rakudo c3f565: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \v: Mu *%_)␤␤current instr.: 'Numeric' pc 147844 (src/gen/CORE.setting.pir:67331) (src/gen/CORE.setting:844)␤called from Sub 'infix:<+>' pc 54603 (src/gen/CORE.setting.pir:25394) (src/gen/CORE.setting:28…

[08:23] * grondilu stops spamming the channel now

[08:23] <quester> rn: macro postfix:<!>($n) { quasi { {{{$n}}}+1 } } ; say $_! for 3..5;

[08:23] <p6eval> niecza v24-17-gd343a2a: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1295 (warn @ 5) ␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 266 (Mu.Str @ 15) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/boot/…

[08:23] <p6eval> ..rakudo c3f565: OUTPUT«use of uninitialized variable $_ of type Any in numeric context␤1␤use of uninitialized variable $_ of type Any in numeric context␤1␤use of uninitialized variable $_ of type Any in numeric context␤1␤»

[08:24] <quester> rn: macro postfix:<!>($n) { quasi { {{{$n}}}+1 } } ; for 3..5 {say $_!};

[08:24] <p6eval> rakudo c3f565: OUTPUT«4␤5␤6␤»

[08:24] <p6eval> ..niecza v24-17-gd343a2a: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1295 (warn @ 5) ␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 266 (Mu.Str @ 15) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/boot/…

[08:26] * quester agrees that this is enough spam, but idly wonders if this is a rakudo bug

[08:26] *** Pleiades` joined
[08:32] *** FROGGS_ is now known as FROGGS

[08:33] <FROGGS> r: say "a" ~~ /<[abc]-[\W]>/ # trying to fix this these days

[08:33] <p6eval> rakudo c3f565: OUTPUT«｢a｣␤␤»

[08:33] <FROGGS> r: say "a" ~~ /<[abc]-[\w]>/ # trying to fix this these days

[08:33] <p6eval> rakudo c3f565: OUTPUT«===SORRY!===␤Error while compiling block : Error while compiling op call: Error while compiling block : Error while compiling block : Unrecognized subtype 'zerowidth' in QAST::Regex cclass␤»

[08:33] <FROGGS> n: say "a" ~~ /<[abc]-[\w]>/ # check

[08:33] <p6eval> niecza v24-17-gd343a2a: OUTPUT«Match()␤»

[08:34] <FROGGS> n: say "a" ~~ /<[abc]-[\W]>/ # check

[08:34] <p6eval> niecza v24-17-gd343a2a: OUTPUT«#<match from(0) to(1) text(a) pos([].list) named({}.hash)>␤»

[08:34] <FROGGS> r: say "a" ~~ /<[abc]-[\D]>/ # wrong too

[08:34] <p6eval> rakudo c3f565: OUTPUT«｢a｣␤␤»

[08:34] <FROGGS> n: say "a" ~~ /<[abc]-[\D]>/ # check

[08:34] <p6eval> niecza v24-17-gd343a2a: OUTPUT«Match()␤»

[08:34] <FROGGS> niecza++

[08:48] <dalek> perl6-examples: 1ea55bc | (L. Grondin)++ | rosalind/aspc-grondilu.pl:

[08:48] <dalek> perl6-examples: style

[08:48] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/1ea55bcbb5

[09:06] *** thou left
[09:08] *** crazedpsyc joined
[09:19] *** bitonic joined
[09:24] *** quester left
[09:30] *** PacoAir joined
[09:39] *** PacoAir left
[09:46] *** Patterner left
[09:48] *** Psyche^ joined
[09:48] *** Psyche^ is now known as Patterner

[10:06] <jnthn> FROGGS: That'll be an issue somewhere inside src/QRegex/P6Regex/Actions.pm (in the NQP repo)

[10:34] *** snearch joined
[10:44] <masak> good forenoon, #perl6

[10:44] <FROGGS> jnthn: I'm already there ;o)

[10:45] <FROGGS> but thanks anyway # guiding new ppl is important

[10:45] <FROGGS> and well appreciated

[10:45] <jnthn> It's setting zerowidth on a cclass. It probably should not do taht ;)

[10:45] <jnthn> Since subtype says what type of char to match :)

[10:46] <masak> quester: yes, that looks like a rakudobug.

[10:46] * masak submits

[10:46] <FROGGS> I've added int .zerotype to QAST::Regex, so there are no compiling issues, but /<[abc]-[\w]>/ still matches "a"

[10:47] <jnthn> No, we don't need to add anything to fix this.

[10:47] <jnthn> Just need to fix cclass_elem or so

[10:47] <jnthn> Adding something to QAST to fix a bug will be the wrong answer in 99% of cases :)

[10:48] *** am0c joined
[10:48] <FROGGS> hmmm, okay

[10:49] <masak> grondilu, quester: if you're wanting to spam the channel a bit less next time, don't keep using 'rn' when testing macros and Niecza doesn't even implement them. ;)

[10:52] <jnthn> FROGGS: I think the problem is maybe where the zerowidth is being set in assertion:sym<[>

[10:52] *** rindolf joined
[10:52] *** spider-mario joined
[10:52] <nwc10> when I see 'rn' I think of http://en.wikipedia.org/wiki/Rn_%28newsreader%29 (even though I never used it)

[10:53] <masak> nr: say "What do you think about when you see 'nr'?" # :)

[10:53] <p6eval> rakudo c3f565, niecza v24-17-gd343a2a: OUTPUT«What do you think about when you see 'nr'?␤»

[10:54] <nwc10> OK, so is it possible to write a line that acts as a quine?

[10:54] * nwc10 isn't proposing to play that one

[10:54] <nwc10> actually, also, not proposing that as an invitation to everyone to spam the channel

[10:55] <jnthn> r: say 'a' ~~ /<[\w]-[a]>/

[10:55] <p6eval> rakudo c3f565: OUTPUT«#<failed match>␤»

[10:56] <jnthn> r: say 'b' ~~ /<[\w]-[a]>/

[10:56] <p6eval> rakudo c3f565: OUTPUT«｢b｣␤␤»

[10:56] <jnthn> r: say 'b' ~~ /<[\w]-[\d]>/

[10:56] <p6eval> rakudo c3f565: OUTPUT«===SORRY!===␤Error while compiling block : Error while compiling op call: Error while compiling block : Error while compiling block : Unrecognized subtype 'zerowidth' in QAST::Regex cclass␤»

[10:56] <sorear> n: say $?ORIG

[10:56] <p6eval> niecza v24-17-gd343a2a: OUTPUT«say $?ORIG␤»

[10:56] <jnthn> r: say 'b' ~~ /<[\w]+[\d]>/

[10:56] <p6eval> rakudo c3f565: OUTPUT«｢b｣␤␤»

[10:56] <jnthn> r: say 'b' ~~ /<[\w]+[-]>/

[10:56] <p6eval> rakudo c3f565: OUTPUT«｢b｣␤␤»

[10:56] <jnthn> r: say '-' ~~ /<[\w]+[-]>/

[10:56] <p6eval> rakudo c3f565: OUTPUT«｢-｣␤␤»

[10:56] <tadzik> hello #perl6

[10:57] <masak> nwc10: it's been done.

[10:57] <masak> nwc10: I'll find the relevant backlog for you.

[10:57] <masak> tadzik! \o/

[10:57] <tadzik> masak! \o/

[10:57] <jnthn> r: say 'b' ~~ /<[\w]-[\dz]>/

[10:57] <p6eval> rakudo c3f565: OUTPUT«｢b｣␤␤»

[10:57] <tadzik> what a day

[10:57] <jnthn> r: say '1' ~~ /<[\w]-[\dz]>/

[10:57] <p6eval> rakudo c3f565: OUTPUT«｢1｣␤␤»

[10:57] <jnthn> r: say 'z' ~~ /<[\w]-[\dz]>/

[10:57] <p6eval> rakudo c3f565: OUTPUT«｢z｣␤␤»

[10:57] <jnthn> Hah! That's wrong.

[10:58] <jnthn> hi tadzik 

[10:58] <masak> nwc10: http://irclog.perlgeek.de/perl6/2012-12-03#i_6208750 http://irclog.perlgeek.de/perl6/2012-12-03#i_6208799

[11:00] <jnthn> FROGGS: Untested, but https://gist.github.com/4523527 may do it

[11:01] <nwc10> thanks

[11:04] <masak> oh, but I misattributed the discovery, which was due to TimToady++: http://irclog.perlgeek.de/perl6/2012-12-03#i_6208783

[11:06] *** PacoAir joined
[11:10] <FROGGS> jnthn: will test it

[11:11] *** PacoAir left
[11:12] <au> std: OUTPUT«===SORRY!===␤Undeclared name:␤    'OUTPUT' used at line 1␤Check failed␤FAILED 00:00 41m␤»

[11:12] <p6eval> std 7deb9d7: OUTPUT«===SORRY!===␤Undeclared name:␤    'OUTPUT' used at line 1␤Check failed␤FAILED 00:00 41m␤»

[11:12] <masak> ;)

[11:12] <masak> that one's been done before too, but usually through the 'ok' variant.

[11:13] <au> yeah, that was obvious :)

[11:13] <masak> std: print 'OUTPUT«ok 00:00 41m␤»'

[11:13] <p6eval> std 7deb9d7: OUTPUT«ok 00:00 42m␤»

[11:13] <masak> dang :)

[11:13] <au> lol

[11:13] <masak> std: print 'OUTPUT«ok 00:00 42m␤»'

[11:13] <p6eval> std 7deb9d7: OUTPUT«ok 00:00 42m␤»

[11:14] <au> although, it's not a quine, as it has no print.

[11:14] <masak> troo

[11:14] <au> #pedantry

[11:14] <tadzik> well

[11:14] <tadzik> std: OUTPUT«ok 00:00 41m␤»

[11:14] <p6eval> std 7deb9d7: OUTPUT«===SORRY!===␤Undeclared name:␤    'OUTPUT' used at line 1␤Check failed␤FAILED 00:00 41m␤»

[11:14] * tadzik shakes fist

[11:14] <masak> still need the quotes.

[11:14] <masak> std: 'OUTPUT«ok 00:00 42m␤»'

[11:14] <p6eval> std 7deb9d7: OUTPUT«ok 00:00 41m␤»

[11:14] <masak> dang :)

[11:15] <masak> std: 'OUTPUT«ok 00:00 41m␤»'

[11:15] <p6eval> std 7deb9d7: OUTPUT«ok 00:00 41m␤»

[11:15] <masak> apparently, 'print' takes one extra megabyte to parse.

[11:16] <au> or maybe, in an one-in-a-million chance, it just takes an extra byte to parse.

[11:16] <tadzik> well, it can't be worse than GNU grep *snicker*

[11:22] *** araujo joined
[11:22] *** araujo left
[11:22] *** araujo joined
[11:27] *** Pleiades` left
[11:32] *** Pleiades` joined
[11:42] *** PacoAir joined
[11:42] *** PacoAir left
[11:43] *** PacoAir joined
[11:47] *** MayDaniel joined
[12:10] *** tokuhiro_ joined
[12:13] *** Pleiades` left
[12:15] *** Pleiades` joined
[12:18] *** SamuraiJack_ joined
[12:18] *** SamuraiJack_ left
[12:20] *** SamuraiJack left
[12:33] *** SunilJoshi joined
[12:37] *** Targen left
[12:38] *** tokuhiro_ left
[12:47] <dalek> nqp: 49e0360 | jnthn++ | src/NQP/Actions.pm:

[12:47] <dalek> nqp: Toss commented out code.

[12:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/49e0360c45

[12:47] <dalek> nqp: dae5553 | jnthn++ | src/NQP/Actions.pm:

[12:47] <dalek> nqp: Start removing a seemingly now-unrequired hack.

[12:47] <dalek> nqp: 

[12:47] <dalek> nqp: Exactly what this was solving seems lost in the mists of time; no NQP

[12:47] <dalek> nqp: tests fail upon removing it, nor do any Rakudo ones. Tossing it gets

[12:47] <dalek> nqp: rid of some odd code and some QAST::VM usages.

[12:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dae555322e

[12:47] <dalek> nqp: 2a53485 | jnthn++ | src/stage0/ (9 files):

[12:47] <dalek> nqp: Update bootstrap to allow full hack removal.

[12:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2a53485786

[12:47] <dalek> nqp: dd550fc | jnthn++ | src/ModuleLoader.pm:

[12:47] <dalek> nqp: Finish removing set_mainline_module.

[12:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dd550fc422

[12:48] <masak> right. having good test coverage means never having to say you're sorry. just toss untested code; obviously it wasn't important enough to merit a test :)

[12:49] <jnthn> I think it could well have been working around a problem that no longer exists.

[12:50] <masak> ah.

[12:50] <moritz> in such cases I usually use git blame to find the commits where it was installed

[12:50] <moritz> and look at its commit message

[12:51] <masak> yes, but this time it was "lost in the mists of time" :P

[12:51] <masak> which I took to mean un-git-blameable.

[12:52] <moritz> the code was last touched in the PAST -> QAST switchover

[12:53] <moritz> but seems to have existed previously too

[12:53] <moritz> so yes, not easy to git-blame

[12:53] <moritz> ie, would take more effort

[12:53] *** rindolf left
[12:54] <masak> does that mean that the history spans several repositories?

[12:54] <moritz> no

[12:54] <masak> or just that you have to blame, checkout, blame, checkout... ?

[12:54] <moritz> yes

[12:54] <masak> I do that now and then.

[12:54] * nwc10 tends to like the gitweb interface to blame

[12:55] <masak> I don't consider that as "lost in the mists of time", fwiw :P

[12:55] <jnthn> You can probably uncover it with enough effort :)

[12:55] * masak .oO( "If I have seen far, it's becuse I can use git blame on other things than HEAD" )

[12:55] <moritz> "history became legend, legend became myth"

[12:56] <jnthn> I was biased 'cus I wanted to kill the stupid code though :P

[12:56] * masak .oO( "If I have seen far, it's becuse I have been standing on the shoulders of other commits" )

[12:56] <masak> jnthn++ # kills stupid code

[12:56] <masak> jnthn the stupid code-killer! oh wait.

[12:57] <moritz> masak: fwiw you can do   git blame <revision> <file>

[12:57] <moritz> no need to checkout

[12:57] <masak> oh, even better.

[12:57] * jnthn feels happy calling it stupid 'cus he wrote it in the first place ;)

[12:58] <jnthn> Now to try and make NQP less insane in the MAIN...

[12:58] <moritz> commit 105839b24b014cc76e813e551e73f9c53a16d2af

[12:58] <masak> jnthn: well, no-one is as stupid as oneself enough time-units ago.

[12:58] <masak> moritz++ # archaeologist

[12:58] <moritz> https://github.com/perl6/nqp/commit/105839b24b014cc76e813e551e73f9c53a16d2af

[12:59] <jnthn> Um.

[12:59] *** SunilJoshi left
[13:00] <jnthn> Well, that already doesn't work today for other reasons, so... :)

[13:00] <masak> seems I was involved somehow also :P

[13:00] <jnthn> The correcter way to fix that is to structure it like Rakudo

[13:00] <masak> this issue: https://github.com/perl6/nqp/issues/9

[13:01] <masak> huh, I never did start toying around with language extensions like I wanted back then... :/

[13:01] <masak> so much to do, so little time...

[13:01] <jnthn> masak: These days there's little reason to toy around with them in NQP when you can do what perl6-debug does and do them on full-blown Perl 6 :)

[13:02] <masak> hm, maybe.

[13:02] <masak> I think I meant syntactical extensions, though. sublanguages.

[13:03] <FROGGS> jnthn: btw, after patching the P6Regex/Actions.nqp it get stuck on compiling NQPP5QRegex.pm

[13:03] <FROGGS> I see that it calls .add_edge in NFA at the end, but I dont see why it hangs

[13:06] <jnthn> FROGGS: Hmm

[13:09] *** SunilJoshi joined
[13:30] *** tokuhiro_ joined
[13:36] <dalek> nqp: b276aab | jnthn++ | src/NQP/Actions.pm:

[13:36] <dalek> nqp: Handle main using CompUnit :main(...).

[13:36] <dalek> nqp: 

[13:36] <dalek> nqp: This feature was in QAST pretty much from the start, but NQP never

[13:36] <dalek> nqp: adopted it, since it could get away with Parrot auto-invoking the

[13:36] <dalek> nqp: first sub as the mainline. That's not very portable, though, so now

[13:36] <dalek> nqp: NQP uses :main(...) properly.

[13:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b276aab3eb

[13:37] *** SunilJoshi left
[14:03] *** SunilJoshi joined
[14:04] *** not_gerd joined
[14:04] <not_gerd> hello, #perl6

[14:05] <not_gerd> r: /<![\s]> ./

[14:05] <p6eval> rakudo c3f565: OUTPUT«===SORRY!===␤Error while compiling block : Error while compiling op call: Error while compiling block : Error while compiling block : Unrecognized subtype 'zerowidth' in QAST::Regex cclass␤»

[14:05] <FROGGS> r: /<-[\s]> ./

[14:05] <p6eval> rakudo c3f565:  ( no output )

[14:05] <FROGGS> hmmm

[14:06] <FROGGS> r: /<![\S]> ./

[14:06] <p6eval> rakudo c3f565: OUTPUT«===SORRY!===␤Error while compiling block : Error while compiling op call: Error while compiling block : Error while compiling block : Unrecognized subtype 'zerowidth' in QAST::Regex cclass␤»

[14:13] *** _jaldhar joined
[14:25] *** erkan left
[14:26] *** _jaldhar left
[14:27] <not_gerd> r: (grammar { token TOP { <print> } }).parse("").say

[14:27] <p6eval> rakudo c3f565: OUTPUT«<anon><-1693268129>Can not get attribute '$!pos' declared in class 'Cursor' with this object␤  in regex TOP at /tmp/477bz1xPZF:1␤  in method parse at src/gen/CORE.setting:10624␤  in block  at /tmp/477bz1xPZF:1␤␤»

[14:27] *** marloshouse left
[14:28] *** _jaldhar joined
[14:29] <dalek> nqp-jvm-prep: 73e6c6e | jnthn++ | t/qast_variable.t:

[14:29] <dalek> nqp-jvm-prep: Add test for dynamic scoped lookup/binding.

[14:29] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/73e6c6eda0

[14:29] <dalek> nqp-jvm-prep: 52cf4ce | jnthn++ | lib/QAST/JASTCompiler.nqp:

[14:29] <dalek> nqp-jvm-prep: Fix bug that could lead to lack of wanting.

[14:29] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/52cf4ce023

[14:29] <dalek> nqp-jvm-prep: aa48e53 | jnthn++ | / (2 files):

[14:29] <dalek> nqp-jvm-prep: Implement contextual variable lookup and binding.

[14:29] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/aa48e536fb

[14:29] <dalek> nqp-jvm-prep: 6da3aa6 | jnthn++ | src/org/perl6/nqp/runtime/StaticCodeInfo.java:

[14:29] <dalek> nqp-jvm-prep: Add missing null checks.

[14:29] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/6da3aa6706

[14:34] * not_gerd sent bug report for the 2nd error

[14:36] *** marloshouse joined
[14:39] <not_gerd> ENOAUTOREPLY - something wrong with the bug tracker?

[14:39] *** erkan joined
[14:39] *** erkan left
[14:39] *** erkan joined
[14:42] <dalek> nqp-jvm-prep: 5e37b80 | jnthn++ | t/qast_6model.t:

[14:42] <dalek> nqp-jvm-prep: Add test for isnull/isnull_s.

[14:42] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/5e37b80e2e

[14:42] <dalek> nqp-jvm-prep: eed37bf | jnthn++ | / (2 files):

[14:42] <dalek> nqp-jvm-prep: Implement isnull/isnull_s.

[14:42] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/eed37bf550

[14:42] <dalek> nqp-jvm-prep: c471c4e | jnthn++ | docs/ (2 files):

[14:42] <dalek> nqp-jvm-prep: ROADMAP and LHF updates.

[14:42] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/c471c4ed66

[14:43] *** SunilJoshi left
[14:43] *** SunilJoshi1 joined
[14:52] *** fgomez left
[14:53] *** not_gerd left
[14:54] *** consus joined
[14:55] *** not_gerd joined
[14:56] <not_gerd> bye, #perl6

[14:57] *** not_gerd left
[15:06] <dalek> nqp-jvm-prep: fbf9671 | jnthn++ | src/org/perl6/nqp/runtime/Ops.java:

[15:06] <dalek> nqp-jvm-prep: Move misplaced code.

[15:06] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/fbf9671d0d

[15:06] <dalek> nqp-jvm-prep: 5e79517 | jnthn++ | lib/QAST/JASTCompiler.nqp:

[15:06] <dalek> nqp-jvm-prep: Fall back to generic box/unbox.

[15:06] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/5e79517890

[15:06] <dalek> nqp-jvm-prep: a127b46 | jnthn++ | lib/QAST/JASTCompiler.nqp:

[15:06] <dalek> nqp-jvm-prep: QAST::VM handling.

[15:06] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/a127b4609c

[15:06] <dalek> nqp-jvm-prep: 4bcdfeb | jnthn++ | / (3 files):

[15:06] <dalek> nqp-jvm-prep: Implement/test nqp::can(...).

[15:06] <dalek> nqp-jvm-prep: 

[15:06] <dalek> nqp-jvm-prep: To the extent we implement method dispatch, anyway.

[15:06] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/4bcdfebdac

[15:10] *** consus left
[15:10] *** consus joined
[15:13] *** rindolf joined
[15:13] *** SunilJoshi joined
[15:14] *** SunilJoshi1 left
[15:16] *** SunilJoshi left
[15:19] *** SunilJoshi joined
[15:24] *** consus left
[15:25] *** consus joined
[15:27] <masak> time to do some more sprintf hacking :)

[15:37] <masak> does nqp allow you to initialize a hash when you declare it? I find nothing in 18-associative.t to suggest it does.

[15:37] *** SunilJoshi1 joined
[15:37] *** SunilJoshi left
[15:37] <jnthn> my %h := nqp::hash('key', 'value', 'key', 'value');

[15:38] <masak> ooh.

[15:38] <masak> thank you.

[15:43] <moritz> nqp: my @a := nqp::list('a', 'b', 'c); say(@a)

[15:43] <p6eval> nqp: OUTPUT«Confused at line 2, near "my @a := n"␤current instr.: 'panic' pc 13231 (src/stage2/gen/NQPHLL.pir:4687) (src/stage2/gen/NQPHLL.pm:328)␤»

[15:43] <moritz> nqp: my @a := nqp::list('a', 'b', 'c'); say(@a)

[15:43] <p6eval> nqp: OUTPUT«3␤»

[15:44] *** spider-mario left
[15:49] <masak> nqp: my @a := nqp::list('a', 'b', 'c'); say(@a[2])

[15:49] <p6eval> nqp: OUTPUT«c␤»

[15:50] *** b1rkh0ff joined
[15:50] <dalek> nqp-jvm-prep: f7b919c | jnthn++ | lib/QAST/JASTCompiler.nqp:

[15:50] <dalek> nqp-jvm-prep: Support parameters being bound into lexicals.

[15:50] <dalek> nqp-jvm-prep: 

[15:50] <dalek> nqp-jvm-prep: Somehow, got this far with them just going into locals!

[15:50] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/f7b919c85f

[15:50] <dalek> nqp-jvm-prep: 93693b2 | jnthn++ | t/qast_arguments.t:

[15:50] <dalek> nqp-jvm-prep: Test for parameters bound into lexicals also.

[15:50] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/93693b2171

[15:50] <dalek> nqp-jvm-prep: 79ffc64 | jnthn++ | lib/QAST/JASTCompiler.nqp:

[15:50] <dalek> nqp-jvm-prep: Add a way to disable SC compilation for now.

[15:50] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/79ffc649e6

[15:50] <dalek> nqp-jvm-prep: d7ddb25 | jnthn++ | lib/QAST/JASTCompiler.nqp:

[15:50] <dalek> nqp-jvm-prep: Do something sensible with :load in CompUnit.

[15:50] <dalek> nqp-jvm-prep: 

[15:50] <dalek> nqp-jvm-prep: As much as we can do until we actually support some kind of module

[15:50] <dalek> nqp-jvm-prep: loading, anyway.

[15:50] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/d7ddb25d1d

[15:50] <dalek> nqp-jvm-prep: 0b67cd7 | jnthn++ | lib/QAST/JASTCompiler.nqp:

[15:50] <dalek> nqp-jvm-prep: Better error for unhandled node types.

[15:50] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/0b67cd765e

[15:51] *** QK joined
[15:52] *** QK left
[15:52] *** consus left
[15:57] <masak> what's a nice nqp version of %h.exists($elem) ?

[15:57] *** b1rkh0ff left
[15:57] *** b1rkh0ff joined
[16:00] * masak toys with the idea of iterating through the hash, looking for the right key, loaded-uzi-style

[16:01] <Ultali> r: sub test() {return "hi";} say test();

[16:01] <p6eval> rakudo c3f565: OUTPUT«===SORRY!===␤Two terms in a row␤at /tmp/4DpGXL469f:1␤------> sub test() {return "hi";} ⏏say test();␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infix stopper␤        statement end␤        statement …

[16:01] <Ultali> r: sub test() {return "hi";}; say test();

[16:01] <p6eval> rakudo c3f565: OUTPUT«hi␤»

[16:01] <masak> ah, nqp::defined(%h<elem>)

[16:01] <masak> it works, because I don't store any undefined values in %h

[16:02] <Ultali> what's up with that extra semicolon?

[16:02] <jnthn> nqp::existskey(%h, 'elem')

[16:02] <masak> ah, gracias.

[16:02] <masak> Ultali: it's not "extra". it separates two statements.

[16:03] <jnthn> Ultali: A } is only a statement terminator if it's the last thing (modulo whitespace) on a line.

[16:03] <masak> Ultali: Perl 5 has taught you bad habits. time to unlearn.

[16:03] <Ultali> it's not just perl5 though... I only noticed because I was doing perl6 -e 'blah..'

[16:03] <Ultali> it makes the -e kind of lame

[16:04] <masak> no, it's not just Perl 5. that's true.

[16:04] <masak> but I disgree about it making -e lame.

[16:04] <Ultali> well it means I have to write more semicolons

[16:04] <masak> it makes the language much more consistent.

[16:04] <masak> yes.

[16:05] <moritz> but if you are into golfing, you'll love meta operators :-)

[16:05] <masak> and in general, Perl 6 requires you to write a bit more than Perl 5 to make one-liners.

[16:05] <jnthn> you already wrote one semicolon more than you needed :)

[16:05] <masak> oh, that too.

[16:05] <jnthn> r: sub test() {return "hi"}; say test();

[16:05] <p6eval> rakudo c3f565: OUTPUT«hi␤»

[16:05] <jnthn> :)

[16:05] <Ultali> jnthn: yeah thats because I was playing with how many I needed :)

[16:05] <masak> and those two pairs of parens are totally unnecessary.

[16:05] <Ultali> pasted the max semicolons version

[16:06] <masak> r: sub test {return "hi"}; say test

[16:06] <p6eval> rakudo c3f565: OUTPUT«hi␤»

[16:06] <flussence> r: say { 'hi' }.()

[16:06] <p6eval> rakudo c3f565: OUTPUT«hi␤»

[16:06] <masak> and why are you doing an explicit return?

[16:06] <Ultali> if I was trying to be minimal   say "hi"

[16:07] <masak> Ultali: point being, if you want golfing, semicolons weren't your biggest concern ;)

[16:07] <Ultali> yeah I know, its just something I noticed

[16:07] <Ultali> and wondered if it was part of the spec

[16:07] <masak> it is.

[16:07] <Ultali> k k

[16:07] <masak> see S02.

[16:07] <Ultali> frankly its a good idea, semicolon magic in javascript has bitten me more than once

[16:10] <masak> yes, but the semicolon magic in JavaScript is especially bonkers.

[16:11] <masak> it's disturbed in a way you can only achieve if you try to be helpful as a language designer, but don't know how.

[16:11] <dalek> nqp-jvm-prep: e3cf74b | jnthn++ | lib/QAST/JASTCompiler.nqp:

[16:11] <dalek> nqp-jvm-prep: Fix a code-gen thinko.

[16:11] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/e3cf74b815

[16:11] <dalek> nqp-jvm-prep: cd6695e | jnthn++ | / (2 files):

[16:11] <dalek> nqp-jvm-prep: A couple of fixes to nqp-jvm-cc frontend.

[16:11] <dalek> nqp-jvm-prep: 

[16:11] <dalek> nqp-jvm-prep: Can be run as:

[16:11] <dalek> nqp-jvm-prep: 

[16:11] <dalek> nqp-jvm-prep:     nqp nqp-jvm-cc.nqp --setting=NULL -e "nqp::say('omg jvm!')"

[16:11] <dalek> nqp-jvm-prep: 

[16:11] <dalek> nqp-jvm-prep: It cross-compiles the NQP code to JVM bytecode, then runs the class

[16:11] <dalek> nqp-jvm-prep: file that is produced. Note, no setting or MOP yet, so it won't do

[16:11] <dalek> nqp-jvm-prep: much at all.

[16:11] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/cd6695ee1f

[16:12] <masak> \o/

[16:12] <masak> jnthn++

[16:13] <tadzik> oh oh

[16:13] <masak> I know, I know, oh oh oh!

[16:13] *** SamuraiJack joined
[16:13] <tadzik> :D

[16:15] <tadzik> I met an Imperial Unit today in a shopping mall, with a couple of stormtroopers, a jawa and an an officer

[16:15] <tadzik> They denied being a historical reenactment group. I find their lack of faith disturbing

[16:17] <masak> heh.

[16:20] <masak> ?eval sprintf "%10%"

[16:20] <masak> (locally, gives '         %')

[16:20] <masak> r: say sprintf "%10%"

[16:21] <p6eval> rakudo c3f565: OUTPUT«'%' is not valid in sprintf format sequence '%10%'␤  in sub sprintf at src/gen/CORE.setting:2414␤  in block  at /tmp/TQgr3KaM4Z:1␤␤»

[16:21] <masak> n: say sprintf "%10%"

[16:21] <p6eval> niecza v24-17-gd343a2a: OUTPUT«%␤»

[16:21] <masak> sorear: likely a Nieczabug.

[16:21] *** SamuraiJack_ joined
[16:21] <masak> if someone feels so inclined, I'd be happy to learn what C does with '%10%' :)

[16:22] *** SamuraiJack left
[16:22] * masak is aiming for a Ph.D. in sprintf

[16:24] *** SamuraiJack_ left
[16:24] <flussence> rn: say sprintf '%2$s %1$s', 'a', 'b'

[16:24] <p6eval> niecza v24-17-gd343a2a: OUTPUT«b a␤»

[16:24] <p6eval> ..rakudo c3f565: OUTPUT«'$' is not valid in sprintf format sequence '%2$'␤  in sub sprintf at src/gen/CORE.setting:2414␤  in block  at /tmp/ylmrNnNq8H:1␤␤»

[16:24] <flussence> eval say sprintf '%2$s %1$s', 'a', 'b'

[16:24] <flussence> eval: say sprintf '%2$s %1$s', 'a', 'b'

[16:24] *** SamuraiJack joined
[16:24] <flussence> no p5bot?

[16:26] <masak> apparently not.

[16:27] <masak> (yes, I intend to do %2$s et al. I'm not in a big hurry to do so. there's more fun fruit to pick before that) :)

[16:28] * masak peruses 'perldoc -f sprintf' and 'man 3 sprintf'

[16:29] *** lincolnthree joined
[16:31] <nwc10> surely an nqp-jvm bot would be more interesting than a p5bot. I've got /usr/bin/perl already :-)

[16:32] <tadzik> the nqp-jvm frontend doesn't quite work for me

[16:32] <tadzik> "load_bytecode" couldn't find file 'helper.pbc'

[16:32] <jnthn> tadzik: make helper.pbc :)

[16:32] <nwc10> I hit that. I suspect that the makefile targets are not quite right

[16:32] <tadzik> I'm disappointed in the lack of 'make cake' ;P

[16:32] <nwc10> I can't figure out what CLASSPATH should be on my mac

[16:32] <jnthn> yeah, was about to fix that, then got distrcated by a code-gen bug :)

[16:32] <tadzik> now To compile on the JVM backend, QAST::VM must have an alternative 'jvm'

[16:33] <jnthn> tadzik: you need bleeding edge NQP also

[16:33] <tadzik> oh, update time :) Ok, thanks

[16:35] *** SamuraiJack_ joined
[16:35] *** SamuraiJack left
[16:47] *** lincolnthree left
[16:48] *** am0c left
[17:04] <moritz> if anybody is looking for a low-hanging fruit and wants to write a few lines of Perl 6 code: write a test for https://rt.perl.org/rt3/Ticket/Display.html?id=114202

[17:07] *** SunilJoshi1 left
[17:07] <diakopter> jnthn: test 6 of qast_variable.t NoSuchMethodError: org.perl6.nqp.runtime.Ops.getdynlex(Ljava/lang/String;Lorg/perl6/nqp/runtime/ThreadContext;)Lorg/perl6/nqp/sixmodel/SixModelObject;

[17:08] *** SunilJoshi joined
[17:08] <jnthn> diakopter: Sounds like some out-of-date .class file

[17:08] *** xy joined
[17:09] *** xy left
[17:09] <diakopter> why wouldn't the makefile fix that

[17:09] <jnthn> diakopter: Because the makefile doesn't yet compile the Java bits

[17:11] <diakopter> so.. how to fix :)

[17:12] <jnthn> Open Eclipse, and hope it does the right thing? ;)

[17:12] <diakopter> oh yeahs

[17:13] <dalek> nqp-jvm-prep: 92d7fa2 | jnthn++ | lib/QAST/JASTCompiler.nqp:

[17:13] <dalek> nqp-jvm-prep: A couple of statements code-gen fixes.

[17:13] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/92d7fa2dad

[17:13] <dalek> nqp-jvm-prep: e785da0 | jnthn++ | Makefile:

[17:13] <dalek> nqp-jvm-prep: Should compile helper.pbc by default.

[17:13] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/e785da0f72

[17:13] <dalek> nqp-jvm-prep: a1cb50f | jnthn++ | lib/QAST/JASTCompiler.nqp:

[17:13] <dalek> nqp-jvm-prep: Fix busted void handling.

[17:13] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/a1cb50f382

[17:13] <diakopter> yeah, had to hit F5

[17:25] <timotimo> moritz: seems like rt.perl.org is down at the moment :|

[17:28] <moritz> timotimo: the bug was over-sharing of anon variables in the same scope

[17:29] <moritz> r: my @ = 1, 2, 3; say my @

[17:29] <p6eval> rakudo c3f565: OUTPUT«␤»

[17:29] <moritz> that used to produce 1 2 3

[17:31] <masak> oh ouch.

[17:31] * masak .oO( highlander anonymous variables :P )

[17:35] <timotimo> does that example code already provide a good test case?

[17:36] <masak> yes.

[17:36] <masak> oho, I think I found Perl 5's implementation of sprintf: https://github.com/mirrors/perl/blob/3041a168eaf8027c9e376a53450bcb825f527da8/sv.c#L10244

[17:36] <timotimo> in that case, i can totally do that right now :)

[17:36] <masak> might come in handy.

[17:38] <masak> rnp: say 11391 - 10244

[17:38] <p6eval> rakudo c3f565, niecza v24-17-gd343a2a, pugs: OUTPUT«1147␤»

[17:38] <masak> 1kLOC. not so bad given what it does.

[17:38] <nwc10> masak: oh, I wasn't aware that you didn't know where it was. I could have told you easily :-)

[17:38] <nwc10> or :-(

[17:39] <masak> nwc10: no no, let the new kid figure it out by himself ;)

[17:39] <masak> (but thanks. I'll keep that in mind.)

[17:40] <nwc10> jnthn: firstly, I seem to need to do s/import com.sun.org.apache.bcel.internal.Constants/import org.apache.bcel.Constants/ to get stuff to compile

[17:40] * timotimo builds a fresh rakudo first

[17:40] <nwc10> for reasons I don't understand, this at the top level seems to build stuff:

[17:40] <nwc10> gcj -C -I src -I 3rdparty/bcel/bcel-5.2.jar src/org/perl6/nqp/jast2bc/JASTToJVMBytecode.java

[17:40] <masak> Rule #1 of sublanguage design: a space makes your term look like *two* visual pills, not one.

[17:41] <masak> (I'm looking at you, '% d')

[17:41] <nwc10> secondly, this seems to get *close* to running the tests

[17:41] <nwc10> CLASSPATH=`pwd`/src:`pwd`/3rdparty/bcel/bcel-5.2.jar:. make test

[17:41] <jnthn> nwc10: The test runner invokes the JVM with -cp already

[17:42] <nwc10> oh, bother. I meant, that gcj invocaiton above, and this too: gcj -C -I src -I 3rdparty/bcel/bcel-5.2.jar src/org/perl6/nqp/jast2bc/JASTToJVMBytecode.java

[17:42] <nwc10> but I get errors Exception in thread "main" java.lang.NoClassDefFoundError: RunTest

[17:43] <nwc10> OK. make test has that error too

[17:43] <nwc10> (without the CLASSPATH bodge)

[17:43] <jnthn> Hm.

[17:43] <nwc10> please note that I do not know what I am doing here

[17:43] *** stevan_ joined
[17:44] <jnthn> nqp t/jast.t gives that error also?

[17:44] <jnthn> nwc10: oooh...

[17:44] <nwc10> yes, snap

[17:45] <jnthn> nwc10: t/helper.nqp hardcodes the name javac as the compiler it looks for

[17:45] <nwc10> (this is on x86_64 debian. I don't seem to have a working gjc on my mac)

[17:45] <nwc10> er, gcj

[17:46] <nwc10> if I don't have a working Java, that's even better. Harder to be pwned.

[17:46] <masak> rn: say sprintf '<%*s>', 6, "a"

[17:46] <p6eval> rakudo c3f565: OUTPUT«<     a>␤»

[17:46] <p6eval> ..niecza v24-17-gd343a2a: OUTPUT«Unhandled exception: invalid format specifier␤  at /home/p6eval/niecza/lib/CORE.setting line 1301 (sprintf @ 4) ␤  at /tmp/c3g1_apnzJ line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4218 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.s…

[17:46] <tadzik> there's RunTest.java somewhere

[17:46] <masak> rakudo++

[17:46] <masak> sorear: would you like me to collect sprintf bugs into an issue?

[17:47] <nwc10> tadzik: but there isn't a JASTTest, that it needs

[17:48] <tadzik> oh, I see

[17:49] <jnthn> need to done some dinner stuff, back in a bit

[17:49] <jnthn> *do

[17:49] <nwc10> enjoy

[17:49] <nwc10> not sure when I'll be gone, and after that, when I'll be back

[17:50] <masak> nothing is certain.

[17:57] * masak .oO( "sprintf. You will never find a more wretched hive of exceptions and special cases. We must be cautious." )

[17:59] <nwc10> yes. that roughly sums it up

[18:00] *** snearch_ joined
[18:01] <masak> and yet, this feels like a smaller and more contained project than pack/unpack, which I never really got anywhere with.

[18:02] <masak> perhaps after I finish sprintf I'll have a second look at pack/unpack.

[18:12] *** marloshouse left
[18:16] *** marloshouse joined
[18:18] *** SunilJoshi left
[18:22] *** Su-Shee joined
[18:22] <Su-Shee> good evening everyone..

[18:24] <tadzik> hey Su-Shee 

[18:25] *** b1rkh0ff left
[18:25] <masak> Su-Shee! \o/

[18:29] <Su-Shee> everybody seen the nice "perl is a dead end" talk already? :) that was funny.

[18:29] <tadzik> seen the slides, yeah

[18:29] <aloha> the slides, yeah was last seen in  15718 days 18 hours ago .

[18:29] <tadzik> go home aloha. You're drunk

[18:30] <Su-Shee> the slides I meant, yes.

[18:30] <tadzik> actually, I'm most interested in why isn't p5-mop happening

[18:30] <tadzik> I'm not in position to buy stevan_++ a beer tho :)

[18:30] <Su-Shee> tadzik: I just love a good rant and a friendly kick :)

[18:31] <dalek> roast: b905097 | (Timo Paulssen)++ | S04-declarations/my.t:

[18:31] <dalek> roast: a small test for RT #114202: oversharing my @; %

[18:31] <dalek> roast: review: https://github.com/perl6/roast/commit/b905097229

[18:38] *** b1rkh0ff joined
[18:49] *** rindolf left
[18:58] *** snearch_ left
[18:58] *** spider-mario joined
[19:18] *** ilogger2 joined
[19:18] *** ChanServ sets mode: +v ilogger2

[19:25] <tadzik> ah, I see

[19:27] <tadzik> stevan_: what is it, ooc?

[19:28] <stevan_> occ?

[19:28] <tadzik> out of curiosity

[19:28] <tadzik> as in: I'm probably not able to help anyway :)

[19:29] <stevan_> tadzik: you will have to ask doy or rafl

[19:30] <tadzik> ok

[19:31] <Su-Shee> stevan_: how was the resonance in live about your talk?

[19:31] <tadzik> I regret not seing the faces of the audience when you revealed scala

[19:32] <tadzik> watching the slides I was like "oh, yeah, not this, not that, just say already that it's going to be C...... oh."

[19:34] <Su-Shee> well so far I've read mostly a bunch of tired "meh, won't work anyways" comments here and there (set aside vti and sawyerx :)

[19:37] <colomon> quick summary for those of us unable to read the slides at the moment?  

[19:38] <diakopter> Perl 5 has problems; Perl 6 is the future; I'm reimplementing Perl 5 and improving it

[19:38] <colomon> reimplementing Perl 5 in scala?

[19:38] <tadzik> aye

[19:38] <tadzik> github.com/stevan/moe

[19:38] <colomon> awesome

[19:38] <tadzik> real AST, concurrency, and SUBROUTINE SIGNATURES damnit

[19:38] <tadzik> or so I hope:)

[19:42] <Su-Shee> just click through the slides, they're pretty funny, too :)

[19:42] <Su-Shee> well at least on my scale of techie humor..

[19:43] <colomon> I don't know why, but CHrome has been an absolute pig on my machine the last couple of days -- routine 100% CPU utilization, etc.  So I'm running without any sort of browser at all at the moment so the machine runs fast enough for me to try to work.

[19:43] <colomon> $work, I mean.

[19:44] <stevan_> Su-Shee: the audience responded pretty well actually

[19:44] <stevan_> tadzik: Scala was met with a meh

[19:44] <stevan_> but they can try and write it in Java if they want

[19:44] <stevan_> my opinion on C is that it is premature optimization now

[19:44] <Su-Shee> \o/ Jerl! ;)

[19:44] <doy> it also misses the point

[19:44] <stevan_> this is an experiment

[19:44] <stevan_> this is Pugs for Perl 5

[19:45] <stevan_> this is not Parrot for Perl 5

[19:45] <colomon> stevan_++ # Pugs5

[19:45] <doy> having the base implementation in c misses out on the entire opportunity to move off of the single backend sort of vm

[19:45] <Su-Shee> stevan_: you made that pretty clear in the slides..

[19:46] <stevan_> yeah though I am not sure that has been communicated outwards effectively 

[19:46] * stevan_ really needs to write an F.A.Q. 

[19:46] <Su-Shee> well I read some motivating butt kicking in it too, but that might just be me. what's the english word.. envigorating? 

[19:47] <Su-Shee> invigorating.

[19:50] <masak> aww, stevan_ just quit.

[19:50] <masak> I just finished his slide deck and I wanted to karma him so much.

[19:50] <masak> ah well, not too late, I guess.

[19:50] <doy> yeah, he just left for his flight

[19:51] <masak> do I karma 'stevan' or 'stevan_'? :)

[19:51] <masak> karma stevan

[19:51] <aloha> stevan has karma of 2.

[19:51] <masak> karma stevan_

[19:51] <aloha> stevan_ has karma of 1.

[19:51] <masak> stevan++ stevan++ stevan++ stevan++ stevan++ stevan++ stevan++ stevan++ stevan++ stevan++ stevan++ stevan++ stevan++ stevan++ stevan++ stevan++

[19:51] <masak> karma stevan

[19:51] <aloha> stevan has karma of 3.

[19:51] <masak> heh.

[19:51] <diakopter> :)

[19:51] <colomon> stevan++

[19:52] <colomon> since I karma'd the wrong one earlier

[19:53] <nwc10> phenny: tell jnthn ~/bin/javac as a shell script to invoke gcj plus first hunk of this gets t/jast.t passing. All others fail. Error is "Could not find the main class: QAST2JASTOutput.  Program will exit." strace reveals that QAST2JASTOutput.class is being opened and read.

[19:53] <phenny> nwc10: I'll pass that on when jnthn is around.

[19:53] <timotimo> r: use Test; is (my &), Any;

[19:53] <p6eval> rakudo c3f565: OUTPUT«use of uninitialized value of type Any in string context  in sub is at lib/Test.pm:81␤␤use of uninitialized value of type Any in string context  in sub is at lib/Test.pm:81␤␤ok 1 - ␤»

[19:53] <timotimo> how do i best get rid of this error?

[19:53] <Su-Shee> masak: so I take it you like the idea? ;)

[19:53] <timotimo> r: use Test; ok (my &) == Any;

[19:53] <p6eval> rakudo c3f565: OUTPUT«use of uninitialized variable anon of type Any in numeric context  in block  at /tmp/jlV6YOQ6IR:1␤␤use of uninitialized value of type Any in numeric context  in block  at /tmp/jlV6YOQ6IR:1␤␤ok 1 - ␤»

[19:54] <timotimo> r: use Test; ok (my &) eqv Any;

[19:54] <p6eval> rakudo c3f565: OUTPUT«ok 1 - ␤»

[19:54] <timotimo> is that a good way to do it?

[19:55] <masak> Su-Shee: this idea has been floating around for at least two years in discussions and stuff. I'm glad someone is doing something about it. if anyone has a chance of success, it's stevan++.

[19:56] <colomon> what's the big picture on what he's trying to do?

[19:56] <masak> Su-Shee: in my mind, it had gotten the label "Perl 5 and a half", because it is a cleanup of Perl 5 that aims to get closer to Perl 6.

[19:56] <masak> colomon: reimplementation of Perl 5.

[19:57] <masak> colomon: but with sanity.

[19:57] <colomon> masak: understood that, but just to be an implementation of Perl 5?  or is there a larger plan?

[19:58] <masak> it's not clear to me that any implementation of Perl 6 will ever be able to talk to perl (the Perl 5 runtime) very successfully. there is a much larger chance of Perl 6 and Perl 5-and-a-half interoperating.

[19:58] <colomon> yeah, I was just wondering if Niecza and scala on .net could work together...

[19:59] <masak> you'll have to ask sorear about that.

[19:59] <colomon> sorry, I meant p5.5 on scala on .net.  :)

[20:00] <masak> heh, I read you that way :)

[20:00] <colomon> I'm pretty sure niecza can work with anything on .net in theory.

[20:03] <_sri> scala does seem a lot less annoying than java

[20:03] <doy> i keep hearing good things about it

[20:05] * colomon had a remarkably positive response to hearing it mentioned in this context, dunno why.

[20:05] <masak> $dayjob wants me to give courses in it. which means that there is interest.

[20:11] <Su-Shee> I see it quite a bit in startup jobs..

[20:14] <masak> yeah.

[20:15] <Su-Shee> masak: how does "perl" in general look in sweden, btw?

[20:16] <jnthn> nwc10: Does javap produce anything sensible on that file? That is, does it actually contain stuff?

[20:16] <phenny> jnthn: 19:52Z <nwc10> tell jnthn ~/bin/javac as a shell script to invoke gcj plus first hunk of this gets t/jast.t passing. All others fail. Error is "Could not find the main class: QAST2JASTOutput.  Program will exit." strace reveals that QAST2JASTOutput.class is being opened and read.

[20:17] <masak> Su-Shee: .pm groups are quite inactive. the only live one I know of is Stockholm.pm, really. a handful of big companies still use Perl. I've been teaching it some in the past year.

[20:17] <Su-Shee> masak: and job-wise?

[20:17] <masak> Su-Shee: so, not dead but not impressively alive either.

[20:18] <masak> Su-Shee: I've been doing consulting work with Perl. there are openings for this, especially because good Perl developers seem few and far between.

[20:18] <Su-Shee> masak: I'm always a little taken aback by us/uk postings about "perl is alive and kicking" in terms of jobs and cpan growth..

[20:18] <Su-Shee> masak: yes, because many abandoned it and are doing something else...

[20:18] <masak> right.

[20:18] <Su-Shee> masak: set aside my last job I haven't done perl in years before..

[20:21] <masak> I've been doing Perl in most of my jobs.

[20:22] <masak> but it might be because I like it, and had free-enough hands to choose my tools.

[20:23] <Su-Shee> masak: in private I used it a lot and then I wanted a perl job again, but sadly it usally means "cleaning up horrible perl code" and not "doing shiny new things in a shiny startup with interesting ideas"

[20:25] <masak> I've been in both sorts of job. they are very different.

[20:26] <masak> but I suspect I have a higher tolerance for cleaning up legacy code than most do.

[20:26] <masak> I enjoy writing tests after the fact. :)

[20:26] <Su-Shee> oh I don't mind it per se, but it's not really a thing to showcase your language..

[20:26] <Su-Shee> I like cleaning up in general, because it's so satisfying afterwards ;)

[20:28] <doy> the trick is to find people willing to pay you for cleaning up code

[20:28] <moritz> no, the trick is to find people willing to let you write new code

[20:28] <moritz> much more fun :-)

[20:28] <colomon> :)

[20:29] * colomon would be happy if people would stop finding bugs in his old code for six months or so...

[20:29] <doy> that depends a huge amount on what the existing code looks like

[20:29] <doy> (:

[20:29] <Su-Shee> I don't mind fixing bugs, too :)

[20:30] <moritz> depends on the bugs :-)

[20:30] <moritz> an application at $work has its own custom (and horrible, I might add) error handling module

[20:30] <colomon> Su-Shee: I don't mind fixing sane bugs. 

[20:31] <moritz> and on newish perls it complains that goto into a construct is deprecated

[20:31] <moritz> that will be so much "fun" to fix

[20:31] *** MayDaniel joined
[20:33] <colomon> The bug I'm looking at right now was first reported back in, oh, August or so.  Only every reported by one customer.  (At least it's completely reproducible with his data.)

[20:33] <Su-Shee> colomon: I gues it's a streak of classical housewife and maid in me - cleaning up after the guys... ;)

[20:33] *** bluescreen10 joined
[20:33] <colomon> Rakudo got noticeable optimizations months ago attempting to get one of the programs I wrote to analyze the data that doesn't work running.

[20:33] <colomon> Never actually worked for this file, alas.

[20:34] <colomon> The big problem here is the incredibly awful STEP standard for CAD.

[20:34] <masak> Su-Shee: I got a sudden impulse to ask you not to be so sexist... :P

[20:34] <moritz> (the error handling system consists of "return problem($string)", and &problem stores the error message somewhere, and returns undef; then you have to call report_error($numeric_flags) to actually spit them out)

[20:35] *** stevan_ joined
[20:35] <masak> stevan_++! \o/

[20:35] <stevan_> masak: ahoy

[20:35] *** slayer101_ joined
[20:35] <Su-Shee> masak: haha, you realize that reality still says I'm not even really joking? ;)

[20:36] *** Targen joined
[20:37] <moritz> reality is sexist too, occasionally

[20:37] <masak> reality has a clearly sexist bias.

[20:37] <Su-Shee> "occasionally.." :)

[20:38] <masak> stevan_: sir, I approve of you wholeheartedly tonight. I will buy you at least one beer next time we meet. :)

[20:38] <masak> stevan_: best of luck on your admittedly insane venture. :D

[20:38] <stevan_> masak: thank you :)

[20:39] <masak> and don't listen to the people saying Scala was a bad choice. Scala is alright.

[20:39] <masak> it even has a bit of that Perl 6 feel to it.

[20:41] <Su-Shee> "that Perl 6 feel".. aha :)

[20:41] <nwc10> jnthn: 2512 bytes, file says that it's compiled Java class data, version 49.3

[20:42] <jnthn> nwc10: That's...really odd.

[20:42] <jnthn> nwc10: (that it doesn't load...the file seems legit)

[20:48] <stevan_> masak: yes, thats how i feel about it too

[20:48] <stevan_> I remember looking at it a lot with Audrey back in the Pugs days

[20:48] <stevan_> there is even a Class::MOP test that implements scala style traits

[20:48] <masak> stevan_: I'm very glad someone is investigating the "clean up Perl 5" road.

[20:49] <stevan_> masak: I just got sick of talking to people about this (and I have been talking to people about this for YEARS!)

[20:49] <masak> aye.

[20:49] <masak> stevan_++

[20:52] <nwc10> jnthn: other think that makes little sense is this:

[20:52] <nwc10> nqp nqp-jvm-cc.nqp --setting=NULL -e "nqp::say('omg jvm')"

[20:52] <nwc10> To compile on the JVM backend, QAST::VM must have an alternative 'jvm'

[20:52] <nwc10> current instr.: 'as_jast' pc 45158 (QASTJASTCompiler.pir:15069) (lib/QAST/JASTCompiler.nqp:2003)

[20:52] <nwc10> ...

[20:53] <nwc10> whereas `nqp t/jast.t` works.

[20:53] <jnthn> nwc10: That just means your NQP is too old

[20:53] <nwc10> it's the *same* NQP

[20:53] <colomon> jnthn++ # improved rakudo error messages (at least, I think that was him)

[20:53] <Su-Shee> explain a laysperson how difficult it is to write a perl in <whatever> language if it's "just" about writing the same language with some improvements?

[20:53] <aloha> positive: nothing; negative: nothing; overall: 0.

[20:55] <nwc10> oh, crap, hanon

[20:55] <jnthn> nwc10: Yes, but the changes that went into NQP today to make the QAST trees it produces be suitable for turning into JVM code are needed by the cross-compiler, but not by the stuff t/jast.t does (which isn't using NQP as a frontend, just to drive tests)

[20:55] <nwc10> aha

[20:55] <moritz> Su-Shee: suppose you have a hospital where the staff has 25 years of experience running it. Now you fire all people at once. How difficult can it be to achieve the previous performance, plus some improvements?

[20:55] <moritz> Su-Shee: same for reimplementing perl :-)

[20:58] * colomon is debugging by adding printfs to his C++ code, then writing a p6 script to analyze the output from the printfs.  ;)

[20:58] <Su-Shee> moritz: well as you're hiring new people who actually already worked in other hospitals - probably comparatively seemless.. also it's a bad example because I know how emegencies etc work, I worked in one for two years. :)

[20:58] <masak> could we just disconnect aloha? she's drunk, as tadzik pointed out.

[20:58] <Su-Shee> moritz: seamless.

[20:59] <moritz> Su-Shee: ok. The better analogy is probably building an entire new hospital

[20:59] *** MayDaniel left
[20:59] <moritz> from ground, and with just one or two persons

[20:59] *** slayer101_ left
[20:59] <Su-Shee> moritz: no, stop the metaphor, it really doesn't work :)

[21:00] <stevan_> burning the entire hospital to the ground, then reassembling it from the ashes

[21:00] <Su-Shee> moritz: ok, then compare it to the other rubies and pythons.. they're all new complete implementations on another stack, if I remember correctly.. they came to life pretty fast and gotten stable?

[21:00] <stevan_> and no photographic record to work from

[21:02] <moritz> Su-Shee: always depends on the complexity of the building and prcoesses (languages/compilers) you're trying to build

[21:02] <Su-Shee> moritz: I'm deliberately not using schemes and lisps and smalltalks as an example.

[21:02] <moritz> some aren't too hard to do, some are more like Elbphilharmonie or BER

[21:03] <Su-Shee> moritz: yes, moritz, I figured as much ;) 

[21:06] <nwc10> jnthn: OK. yes. PEBCAK. If I rebuild nqp as master (d'oh! - how many times did you have to say that)

[21:07] <nwc10> then nqp nqp-jvm-cc.nqp --setting=NULL -e "nqp::say('omg jvm')"

[21:07] <nwc10> goes boom like the tests:

[21:07] <nwc10> oh.

[21:07] <moritz> stevan_: one piece of advice from Perl 6 land: don't call it "Perl" if it's not backwards compatible to Perl 5 :-)

[21:08] <moritz> it's way too late to change the name of Perl 6, but many people wish it hadn't been called Perl

[21:08] <nwc10> it does after I fix it to add `src` to the classpath

[21:09] <moritz> or call it "<mumble> Perl", so people can just call it "<mumble>" eventually :-)

[21:09] <jnthn> nwc10: bin should be in classpath, not src

[21:09] <nwc10> what goes in bin?

[21:09] <masak> moritz++ # "<mumble> Perl" advice

[21:09] <jnthn> nwc10: The results of compiling the stuff in src

[21:10] <masak> that's worked very well with Rakudo Perl.

[21:10] <nwc10> aha.

[21:10] <jnthn> nwc10: Where did gcj put the .class it made?

[21:10] <nwc10> gcj was dumping foo.class as a file next to foo.java

[21:10] <jnthn> Ah

[21:10] <nwc10> aye. aha

[21:10] <Su-Shee> name it after what language is used to implement it.. Jerl, Scerl, Lerl, Cerl.. ;)

[21:10] <nwc10> I told you that I don't know what I am doing :-)

[21:10] <stevan_> moritz: thats why it is called Moe

[21:10] <jnthn> nwc10: Did you get all the things in src?

[21:10] <moritz> stevan_: oh right :-)

[21:10] <nwc10> I believe so

[21:10] <jnthn> nwc10: Oh, oculd it be that the class path is missing .

[21:10] <jnthn> ?

[21:11] <jnthn> Maybe it's not looking in the current directory...which is where the file is.

[21:11] <stevan_> jnthn: just a warning, doy and I will be picking your brain a lot :)

[21:11] <moritz> do steal from 6model :-)

[21:11] * colomon is wondering if the CAMERA_IMAGE objects are messing up his STEP translator.

[21:12] <stevan_> moritz: we will be stealing from p5-mop, whcih stole from 6model,... so yeah

[21:12] *** aindilis joined
[21:13] <nwc10> jnthn: it's something like that. Seem to have it running

[21:13] <nwc10> going to try to work back to the mininmal needed edits

[21:15] <nwc10> OK. It says 3All tests successful.

[21:15] <jnthn> In green, even!

[21:16] <moritz> .oO( Green IT: all tests pass! )

[21:16] <jnthn> ffs

[21:16] <masak> time to write more tests.

[21:16] <jnthn> my $dayjob got me a new printer.

[21:16] <jnthn> I'm too stupid to install the cartridges.

[21:16] <jnthn> Really, how the heck do they go in...

[21:16] <nwc10> with a hammer? Oh, you mean, go in *and work*? :-)

[21:16] <moritz> there's usually a manual coming with the printer

[21:16] <masak> this is why you buy a printer with cartridges already in them.

[21:17] <masak> and when they run dry, you throw the printer away and buy a new one.

[21:18] <moritz> speaking of green IT -- that is not!

[21:19] <jnthn> moritz: Yes, the manual tells me all about the printers built in web server (wtf...) but not how to stick the ink in :P

[21:19] <nwc10> jnthn: OK. So, if I `ln -s src bin`, I can remove all the hacks, apart from the s/import com.sun.org.apache.bcel.internal.Constants/import org.apache.bcel.Constants/

[21:20] <nwc10> and the other hack of a ~/bin/javac

[21:20] <moritz> jnthn: well, ipp (the printing-over-IP protocal) basically runs over HTTP

[21:20] <moritz> so a web server in there isn't quite surprising

[21:20] <nwc10> $ nqp nqp-jvm-cc.nqp --setting=NULL -e "nqp::say('This is shorter than Hello World written in Java. Yay')"

[21:20] <nwc10> This is shorter than Hello World written in Java. Yay

[21:24] <colomon> completely off topic, but look at my current debugging assistant: https://plus.google.com/105195123179018346850/posts/VkC5Sv5qYmM

[21:25] <jnthn> $ nqp nqp-jvm-cc.nqp --setting=NULL -e "my $a := -> { nqp::say('And it has closures') }; $a()"

[21:25] <jnthn> And it has closures

[21:25] <jnthn> \o/

[21:25] <nwc10> No registered operation handler for 'associative_bind'

[21:25] <colomon> \o/

[21:25] <nwc10> your nqp is from the future?

[21:25] <nwc10> oh. no.

[21:25] <arnsholt> Probably =D

[21:25] <nwc10> your shell is Win32

[21:26] <jnthn> nwc10: Closures already work :)

[21:26] <jnthn> (in what's checked in)

[21:26] <nwc10> yes. does for me when I transpose " and '

[21:26] <jnthn> associative_bind...hm, hashes need some work I guess :)

[21:26] <nwc10> jnthn++ # creating even more inefficient ways to print hello world

[21:27] <nwc10> strace recorded 11471 system calls for the hello world

[21:27] <jnthn> nwc10: Well, given that doing so invokes the JVM twice... :)

[21:32] <lue> Does "To compile on the JVM backend, QAST::VM must have an alternative 'jvm'" mean I need to enable icedtea support somewhere?

[21:33] <jnthn> lue: No, it means your NQP needs updating to latest

[21:34] <lue> Ah. Makes sense (but that would require updating rakudo as well, which I'm going to wait to do)

[21:36] <colomon> lue!  \o/

[21:36] <lue> o/

[21:37] *** stevan_ left
[21:39] <nwc10> gah. Lexical lookup by name NYI

[21:40] <nwc10> you evil evil person. You've made something that tempts me to hack on it. Bad jnthn. No cookie^Wbeer

[21:40] <nwc10> :-)

[21:42] <jnthn> oh, that task is in the LHF file too :)

[21:47] <nwc10> jnthn++ # a frontend, making it possible to feed it programs, not just syntax trees

[21:48] <jnthn> It's darn distracting though. :)

[21:48] * jnthn has an almost fully commented out nqp-mo.pm that he's now started to move through

[21:49] <nwc10> sleep is for the weak :-)

[21:50] <jnthn> OK, OK, I'll at least do attribute scope in QAST::Var :P

[21:53] * lue hopes the future JVM nqp (and therefore JVM rakudo) is at least a little faster than Parrot on his machine

[21:54] <masak> lue! \o/

[21:54] <lue> o/

[21:56] *** pmurias joined
[21:58] <masak> 'night, #perl6

[22:00] <lue> g'knight masak o/

[22:02] <dalek> rakudo-js: 8fbe88e | (Paweł Murias)++ | runtime.js:

[22:02] <dalek> rakudo-js: Deserialize knowhows and knowhow attributes.

[22:02] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/8fbe88e3f8

[22:02] <dalek> rakudo-js: d36e172 | (Paweł Murias)++ | run (2 files):

[22:02] <dalek> rakudo-js: Deserialize non flattend P6opaque attributs, pass test 28.

[22:02] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/d36e172c5d

[22:02] <dalek> rakudo-js: 4529261 | (Paweł Murias)++ | run_tests:

[22:02] <dalek> rakudo-js: Add more passing tests to run_tests.

[22:02] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/4529261ac2

[22:02] <dalek> rakudo-js: 08974cd | (Paweł Murias)++ | src/QAST/Compiler/JavaScript.nqp:

[22:02] <dalek> rakudo-js: Delete no longer used serialization code.

[22:02] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/08974cd928

[22:02] <dalek> rakudo-js: 0b0b138 | (Paweł Murias)++ | src/QAST/Compiler/JavaScript.nqp:

[22:02] <dalek> rakudo-js: Remove more unused code.

[22:02] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/0b0b138c64

[22:02] <dalek> rakudo-js: 213c59d | (Paweł Murias)++ | / (5 files):

[22:02] <dalek> rakudo-js: Add NQPCapture and NQPMatch, pass test 29.

[22:02] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/213c59d92f

[22:02] <dalek> rakudo-js: 582dc79 | (Paweł Murias)++ | src/ (2 files):

[22:02] <dalek> rakudo-js: set grammar in EXPORTHOW

[22:02] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/582dc79eec

[22:02] <dalek> rakudo-js: dc040b5 | (Paweł Murias)++ | run_tests:

[22:02] <dalek> rakudo-js: Add passing tests to run_tests.

[22:02] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/dc040b5daf

[22:09] <dalek> nqp-jvm-prep: c073be5 | jnthn++ | t/qast_6model.t:

[22:09] <dalek> nqp-jvm-prep: Tests for QAST::Var with attribute scope.

[22:09] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/c073be56d2

[22:09] <dalek> nqp-jvm-prep: fcbe1f0 | jnthn++ | lib/QAST/JASTCompiler.nqp:

[22:09] <dalek> nqp-jvm-prep: Implement QAST::Var attribute scope.

[22:09] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/fcbe1f06dc

[22:10] *** slayer101_ joined
[22:13] *** xinming_ joined
[22:15] *** slayer101_ left
[22:24] *** cognominal joined
[22:29] <dalek> nqp: 4344610 | jnthn++ | src/QAST/Operations.nqp:

[22:29] <dalek> nqp: Add nqp::decont; maps to pir::nqp_decontainerize.

[22:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/43446107f9

[22:29] <dalek> nqp: 12e4c66 | jnthn++ | src/stage0/ (9 files):

[22:29] <dalek> nqp: Update bootstrap.

[22:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/12e4c663ec

[22:29] <dalek> nqp: 33a8ea0 | jnthn++ | src/NQP/Actions.pm:

[22:29] <dalek> nqp: Switch some QAST::VM uses to new nqp::decont.

[22:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/33a8ea0956

[22:30] *** spider-mario joined
[22:31] <Ayiko> rn: CATCH { default { say 'ok' } }; die 'BAD'; # no CATCH in mainline?

[22:31] <p6eval> rakudo c3f565: OUTPUT«BAD␤  in block  at /tmp/qgNmSyJuaj:1␤␤»

[22:31] <p6eval> ..niecza v24-17-gd343a2a: OUTPUT«ok␤»

[22:32] <jnthn> Ayiko: Apparently not...

[22:32] <jnthn> Ayiko: Probably should be.

[22:37] <tadzik> r: { CATCH { default { say 'ok' } }; die 'BAD'; }

[22:37] <p6eval> rakudo c3f565: OUTPUT«ok␤»

[22:37] <tadzik> odd, I thought YOU_ARE_HERE is blockified somewhat

[22:40] <dalek> nqp-jvm-prep: c5db4ec | jnthn++ | / (2 files):

[22:40] <dalek> nqp-jvm-prep: Implement iscont, stub decont.

[22:40] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/c5db4ecf60

[22:40] <dalek> nqp-jvm-prep: 91924a7 | jnthn++ | docs/ROADMAP:

[22:40] <dalek> nqp-jvm-prep: Remove completed item.

[22:40] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/91924a78cd

[22:40] <dalek> nqp-jvm-prep: 5c3611d | jnthn++ | lib/QAST/JASTCompiler.nqp:

[22:40] <dalek> nqp-jvm-prep: Label uniqueness fix.

[22:40] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/5c3611d90d

[22:43] *** slayer101_ joined
[22:57] <dalek> nqp: 26d8805 | jnthn++ | src/how/NQPCurriedRoleHOW.pm:

[22:57] <dalek> nqp: One more pir => nqp in nqp-mo.

[22:57] <dalek> nqp: review: https://github.com/perl6/nqp/commit/26d88051ac

[23:07] <jnthn> 'night, #perl6

[23:07] <tadzik> good knight

[23:08] *** cognominal left
[23:09] <pmurias> jnthn: 'night

[23:13] *** cognominal joined
[23:16] *** cognominal left
[23:30] *** noam_ joined
[23:36] *** pmurias left
[23:38] *** Khisanth joined
[23:47] *** benabik joined
[23:59] *** slayer101_ left
