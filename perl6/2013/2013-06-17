[00:24] *** tgt left
[00:25] *** pmurias left
[00:28] <masak> 'night, #perl6

[00:30] *** tgt joined
[00:32] <sorear> oh hey, "return" isn't implemented.

[00:35] *** benabik left
[00:39] *** benabik joined
[00:47] *** benabik left
[00:50] <sorear> now it is! :D

[00:52] <mst> :D

[00:53] *** benabik joined
[00:54] *** woosley joined
[00:55] <sorear> o/ mst

[01:02] *** FROGGS_ left
[01:09] *** anuby joined
[01:15] *** FROGGS_ joined
[01:16] *** hypolin left
[01:16] *** hypolin joined
[01:32] * colomon sees no sign of a recent push....   ;)

[01:49] *** lustlife` joined
[01:58] *** FROGGS__ joined
[02:02] *** FROGGS_ left
[02:02] *** bonsaikitten left
[02:03] *** bonsaikitten joined
[02:03] <labster> c'mon dalek, show us some commits!

[02:04] *** Khisanth left
[02:06] <sorear> colomon: i has no commit bit

[02:07] <colomon> sorear: right.  :(

[02:07] <labster> All you have to do is send a letter 50 miles north, sorear.

[02:08] <labster> I can merge pull requests, to rakudo anyway.

[02:08] <colomon> as can I.

[02:14] <labster> r: say "„ÅÇ".succ   # expected output: „ÅÑ

[02:14] <camelia> rakudo b2072f: OUTPUT¬´„ÅÇ‚ê§¬ª

[02:16] <labster> r: say "œÄ".succ

[02:16] <camelia> rakudo b2072f: OUTPUT¬´œÅ‚ê§¬ª

[02:18] *** Khisanth joined
[02:20] * colomon has somehow wandered from getting ready to add more Set operator tests to reading about bicameralism.

[02:21] * labster read that as 'bicamelism'

[02:23] <labster> how do you feel about mkdir returning a path object rather than True?

[02:23] <colomon> one camel is enough, thank you

[02:24] <colomon> would it just return the path you just asked it to make?

[02:24] <labster> yeah

[02:24] <colomon> there's a certainl logic to that

[02:24] <colomon> "t/spec".path.mkdir.chdir

[02:25] <colomon> return Failure if it doesn't work?

[02:25] <labster> exactly

[02:25] <colomon> +1

[02:26] <labster> currently a thrown failure until we get the "use fatal"  in try blocks thing.  I'm not in a mood to break panda.

[02:27] *** benabik left
[02:29] *** ldthien0 joined
[02:30] <colomon> it's still somewhat broken anyway, I think...

[02:32] *** Chillance joined
[02:37] <labster> yeah, but that's more of a language design brokenness, I think

[02:38] *** aindilis left
[02:38] *** aindilis joined
[02:39] <labster> Personally, I like the idea of soft failure, because it's somewhere between checking for return codes, and stopping the program in the middle.

[02:39] <colomon> labster: no, I mean panda is somewhat broken

[02:39] <colomon> at least, I'm routinely getting weird results from it

[02:40] <labster> It does that... yeah.

[02:40] *** atroxaper joined
[02:47] *** nitestryker joined
[02:51] *** BenGoldberg left
[02:56] *** ldthien0 left
[02:56] *** ldthien0 joined
[02:56] *** nitestryker left
[03:05] <colomon> Don't suppose TimToady is out there somewhere?

[03:10] *** BenGoldberg joined
[03:12] <labster> I believe he's in Europe now, so not at this time of day

[03:15] <colomon> ah

[03:15] <colomon> I am soldiering on, making weird but apparently working changes to Set

[03:20] <colomon> well, the first one worked, anyway

[03:33] *** tgt left
[03:34] *** preflex left
[03:34] *** preflex_ joined
[03:34] *** ChanServ sets mode: +v preflex_

[03:34] *** preflex_ is now known as preflex

[03:53] * colomon has [‚à™] and [‚à©] working in Niecza, but is going to bed without checking them in.  :)

[03:53] <colomon> o/

[03:53] <sorear> o/ colomon

[04:07] *** census joined
[04:13] *** konundra left
[04:13] *** lustlife` left
[04:19] *** snarkyboojum joined
[04:27] *** Psyche^ joined
[04:30] *** Patterner left
[04:30] *** Psyche^ is now known as Patterner

[04:41] *** nitestryker joined
[04:49] *** birdwindupbird joined
[04:51] *** BenGoldberg left
[04:54] *** zby_home_ joined
[04:55] *** FROGGS__ left
[04:56] *** odoacre joined
[05:01] *** snarkyboojum left
[05:01] * sorear is starting on a long-term project to replace p6eval with something more robust

[05:02] <ssutch> :)

[05:11] <lue> more robust how?

[05:21] *** census left
[05:27] *** amoe joined
[05:29] <moritz> sorear: something dogfooding?

[05:30] <sorear> no.

[05:30] *** amoe_ left
[05:31] *** dmol joined
[05:31] <sorear> I may just get a bigger VPS and move all of p6eval there

[05:31] <sorear> getting rid of the 1/3 split would probably help

[05:38] *** FROGGS joined
[05:43] <bonsaikitten> if y'all need some hosting help, I might have some spare capacity

[05:46] <Teratogen> I have an amazon ec2 vps!

[05:46] <Teratogen> it's free!

[05:46] <Teratogen> (for a year)

[05:52] *** dmol left
[05:57] *** zby_home_ left
[06:01] *** bluescreen10 left
[06:01] *** bluescreen10 joined
[06:02] <sorear> bonsaikitten: baseline memory usage is going to be lowesh, but it needs to tolerate spikes up to 2-3G without thrashing; disk requirements are probably dominated by the jdk1.7

[06:03] <bonsaikitten> sorear: sounds tolerable

[06:03] <bonsaikitten> if you can live with a hard cap at, say, 3GB

[06:06] *** zby_home joined
[06:10] * sorear is trying to get CATCH working in rakudo now

[06:12] <FROGGS> ++sorear

[06:15] *** zby_home left
[06:33] * sorear savors the irony that rakudo-jvm currently has working multiprompt delimited continuations but mostly not exceptions

[06:34] <FROGGS> :P

[06:38] *** kaleem joined
[06:40] <sorear> nqp: try die()

[06:40] <camelia> nqp:  ( no output )

[06:46] <sorear> die("foo") works correctly.  try { nqp::die("foo") } works correctly.  try { die("foo") } doesn't catch the exception

[06:47] <FROGGS> O.o

[06:55] <sorear> oh, I see, (I think)... p6 exception objects are getting thrown as control exceptions with an invalid type, so they can't be caught at all

[07:01] *** ldthien0 left
[07:02] <dalek> nqp: f16d02d | sorear++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/VMExceptionInstance.java:

[07:02] <dalek> nqp: Default new exceptions to EX_CAT_CATCH

[07:02] <dalek> nqp: 

[07:02] <dalek> nqp: I don't know if this is right, but it's less wrong than defaulting them to an

[07:02] <dalek> nqp: invalid (0) category that is impossible to catch.

[07:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f16d02dc28

[07:02] <timotimo_> early morning coding: first attempt at making @foo.>>.uc work

[07:05] * sorear would like to get to a state where you don't need --ll-exception all the time

[07:05] <FROGGS> that would be cool, yes

[07:06] <FROGGS> timotimo_: what is your motivation? is it specced that way?

[07:06] <FROGGS> r: my @foo = 'A' .. 'F'; say @foo>>.uc

[07:06] <camelia> rakudo b2072f: OUTPUT¬´A B C D E F‚ê§¬ª

[07:08] <timotimo_> it is specced that that's allowed

[07:08] <timotimo_> std: <foo bar baz quux>.>>.uc

[07:08] <camelia> std d4cc5ab: OUTPUT¬´ok 00:00 41m‚ê§¬ª

[07:08] <timotimo_> std: (1, 2, 3, 4, 5).>>++

[07:08] <camelia> std d4cc5ab: OUTPUT¬´ok 00:00 44m‚ê§¬ª

[07:08] <timotimo_> r: <foo bar baz quux>.>>.uc

[07:08] <camelia> rakudo b2072f: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Confused‚ê§at /tmp/KSnFk4vbPj:1‚ê§------> [32m<foo bar baz quux>.[33m‚èè[31m>>.uc[0m‚ê§    expecting any of:‚ê§        dotty method or postfix‚ê§¬ª

[07:08] <timotimo_> r: <foo bar baz quux>>>.uc.perl.say

[07:08] <camelia> rakudo b2072f: OUTPUT¬´("FOO", "BAR", "BAZ", "QUUX")‚ê§¬ª

[07:08] <timotimo_> i think >.>>. looks a bit nicer than >>>.

[07:08] <sorear> n: <aa bb cc>.>>.uc.perl.say

[07:09] <camelia> niecza v24-76-g3e65d84: OUTPUT¬´["AA", "BB", "CC"].list‚ê§¬ª

[07:09] <timotimo_> also, std allows unspace there

[07:09] <timotimo_> std: <foo bar baz quux>\    .>>\    .uc.perl.say

[07:09] <camelia> std d4cc5ab: OUTPUT¬´ok 00:00 41m‚ê§¬ª

[07:09] *** domidumont joined
[07:11] <timotimo_> well, it works locally now.

[07:11] <timotimo_> just need to run spectests now

[07:11] <FROGGS> cool

[07:11] <timotimo_> was pretty darn easy, too :)

[07:11] <FROGGS> timotimo_: btw, I fixed the &&= / .= bug

[07:11] <FROGGS> (in v5)

[07:12] <timotimo_> is the commit up already? i'd like to see what you had to change

[07:12] <FROGGS> no, not yet

[07:12] *** domidumont left
[07:12] <FROGGS> the infix:<.=> must return a variable and needs to be rw

[07:12] <timotimo_> ah, an is rw was missing

[07:12] <timotimo_> i was *so* close :)

[07:12] *** domidumont joined
[07:13] <FROGGS> yeah, and .= (concat_op in actions) made a bind, I changed it to p6store

[07:14] <sorear> looks like it's currently failing because printing a backtrace ultimately involves iterating over a range, and RangeIter is not happy

[07:14] <timotimo_> sorear, that's pretty cool!

[07:14] <FROGGS> ahh, hehe

[07:14] <sorear> ...because cmp doesn't work...

[07:16] <timotimo_> sorear: is that the only reason? :)

[07:16] <sorear> timotimo_: no, there are other reasons hidig behind it I'm sure

[07:17] * timotimo_ expects 0 failed tests and a few todo passes

[07:18] <sorear> i'm not even trying to run tests at this point

[07:19] <timotimo_> (my changes, not yours ;) )

[07:19] <FROGGS> meh, and I thought sorear is crosscompiling to timotimo_  *g*

[07:22] <moritz> maybe we should deactive pretty backtraces in rakudo-jvm for now

[07:22] <moritz> *deactivate

[07:24] <timotimo_> oh, i probably don't get the todo passes because they were hard-skipped for rakudo

[07:28] <timotimo_> (my @r = (1, 4, 9))¬ª.++;  -  Method 'postcircumfix:<( )>' not found for invocant of class 'Int'  -  er?!

[07:28] <timotimo_> r: say (1, 2, 3)>>.++;

[07:28] <camelia> rakudo b2072f: OUTPUT¬´No such method 'postcircumfix:<( )>' for invocant of type 'Int'‚ê§  in sub METAOP_HYPER_CALL at src/gen/CORE.setting:14143‚ê§  in block  at /tmp/AdFckmwzgW:1‚ê§‚ê§¬ª

[07:28] <timotimo_> there were tests for this, but they didn't fail because the whole block was skipped due to the .>> form missing

[07:29] * sorear peels back another layer

[07:29] <sorear> cmp is failing because Order.(1) doesn't work

[07:31] <timotimo_> i think the qast that gets generated from that is wrong

[07:31] *** salv0 left
[07:32] <timotimo_> https://gist.github.com/anonymous/a60e3321e57046edaa39 - seems to not mention the ++ operator at all

[07:34] <FROGGS> timotimo_: maybe the dump is incomplete

[07:34] <timotimo_> that would be a possibility for sure :(

[07:34] <FROGGS> because it calls a &METAOP_HYPER_CALL

[07:35] <FROGGS> timotimo_: you could dump the @a>>++ form to compare

[07:35] <sorear> r: say Order ~~ Enumeration

[07:35] <camelia> rakudo b2072f: OUTPUT¬´False‚ê§¬ª

[07:35] <timotimo_> that calls QAST::Op(call &METAOP_HYPER_POSTFIX) with the list and then QAST::Var(lexical &postfix:<++>)

[07:36] <sorear> r: say Order.^roles

[07:36] <camelia> rakudo b2072f: OUTPUT¬´No such method 'roles' for invocant of type 'Perl6::Metamodel::EnumHOW'‚ê§  in block  at /tmp/aY78vovQzl:1‚ê§‚ê§¬ª

[07:36] <timotimo_> it would still be a net win if i unskip the block, re-skip the >>.++ forms and put that up?

[07:37] *** fhelmberger joined
[07:38] <moritz> yes

[07:39] <sorear> > Order.^methods(:local)

[07:39] <sorear> postcircumfix:<( )> perl roll pair kv pick Int enums Str Numeric gist <anon> <anon>

[07:39] <sorear> > Order.(2)

[07:39] <sorear> Method 'postcircumfix:<( )>' not found

[07:39] <sorear> umm

[07:39] *** SmokeMac_ left
[07:40] <timotimo_> i don't think i understand skipping

[07:40] <timotimo_> don't i put a #?rakudo skip 'explanation' newline { newline code newline };?

[07:42] <moritz> should work, and skip the block

[07:42] <timotimo_> does it only work on top-level blocks?

[07:42] <timotimo_> https://gist.github.com/anonymous/17fbd409820a3da23724 - looks like this currently

[07:42] *** pr_ joined
[07:42] *** SmokeMachine joined
[07:43] <timotimo_> the skip seems to generate its own braces around only the first line in the block or something?

[07:43] <timotimo_> do i need the #?DOES 3 thing?

[07:44] <timotimo_> nope, don't

[07:44] *** sqirrel joined
[07:44] <moritz> it might only work with top-level blocks

[07:44] <moritz> I remember some fudge strangeness with that

[07:44] <sorear> I also need to do something about the rakudo-jvm startup time

[07:44] <timotimo_> right. i'll cut out the non-working parts temporarily

[07:45] <moritz> sorear: port it to moarvm? :-)

[07:45] <sorear> real    0m7.348s

[07:45] <sorear> user    0m13.399s

[07:45] <sorear> "on the plus side, it seems to be automatically using both my cores"

[07:45] *** domidumont left
[07:46] *** flaviusb joined
[07:46] <timotimo_> :D

[07:46] *** domidumont joined
[07:47] <pr_> Hello, when I read lines from a DOS Ansi-Latin-1 file with Rakudo Perl 2013.05, I get a "malformed utf-8 error" on following block: for $fh.lines -> $line { say $line; }. Any help would be much appreciated. pr

[07:48] <moritz> pr_: pass :encoding<Latin-1> to the open() call

[07:49] <pr_> That did it. Thanks. Any documentation on this anywhere?

[07:49] <nwc10> sorear: This is the JVM? I observed this. Hypothesis is that it's one core for real work, and one core for the GC

[07:50] <nwc10> sorear: also, jnthn might have some thoughts on JVM startup time.

[07:50] <nwc10> Parrot has to be better for something :-)

[07:50] <timotimo_> sadly, dotty postfix ops seems to be much more complicated

[07:50] <nwc10> (Although right now, lets not forget, Parrot is still most complete platform for Rakudo)

[07:50] *** flaviusb left
[07:51] <moritz> pr_: http://perlcabal.org/syn/S32/IO.html#Functions

[07:51] *** hoelzro_ is now known as hoelzro

[07:53] <pr_> "method encoding": found it. merci.

[07:54] <moritz> and the           Str  :$enc = "Unicode",

[07:54] <moritz> argument to open()

[07:54] <moritz> I guess we allow :encoding as a synonym for :enc

[07:54] *** woolfy joined
[07:57] <timotimo_> i don't understand the reasoning behind dotty:sym<.*> adding a dispatch:<.> to the dottyop that is created from, for instance ++ in $foo.++

[07:58] <timotimo_> (especially when dispatch:<.> doesn't seem to exist)

[07:58] <timotimo_> er, no, postfix:<.> is the one that doesn't exist

[07:59] <timotimo_> hm.

[08:03] *** SamuraiJack left
[08:06] *** flaviusb joined
[08:08] *** SamuraiJack joined
[08:09] <sorear> Wrong number of arguments passed; expected 1..-1, but got 0

[08:10] *** flaviusb left
[08:11] *** flaviusb joined
[08:13] <diakopter> sorear: *giggle*

[08:15] *** flaviusb left
[08:18] <sorear> apparently nqp-jvm is systematically failing to pass the invokee as an argument to nonstandard invoke routines

[08:19] <sorear> so Order.(1) is getting mangled into 1()

[08:19] *** ldthien0 joined
[08:19] *** ldthien0 left
[08:20] *** pr_ left
[08:21] <diakopter> sorear: maybe it's interpreting -1 as Inf

[08:21] <diakopter> (I just realized)

[08:22] <dalek> roast: 5a7f157 | (Elizabeth Mattijsen)++ | S32-list/categorize.t:

[08:22] <dalek> roast: First batch of additional categorize tests

[08:22] <dalek> roast: review: https://github.com/perl6/roast/commit/5a7f157922

[08:22] <lizmat> good morning #perl6 from Nancy, France

[08:22] <lizmat> about to decommute  :)

[08:22] *** rindolf joined
[08:23] <FROGGS> hi lizmat 

[08:27] *** flaviusb joined
[08:31] *** flaviusb left
[08:33] <sorear> o/

[08:35] *** woolfy left
[08:37] <lizmat> on our way back home, with some sightseeing on the way‚Ä¶  see you all in ~6 hours&

[08:37] *** lizmat left
[08:41] *** dakkar joined
[08:41] <dalek> nqp: 932e096 | sorear++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/ (3 files):

[08:41] <dalek> nqp: Add invokee as first argument to invocation handlers for Parrot consistency and basic sanity

[08:41] <dalek> nqp: review: https://github.com/perl6/nqp/commit/932e0968a2

[08:45] <timotimo_> sorear: suddenly everything up the chain works, too?

[08:45] *** raiph left
[08:46] *** flaviusb joined
[08:51] *** dmol1 joined
[08:53] *** dmol1 left
[08:53] <masak> good antenoon, #perl6

[08:53] <diakopter> hi masak

[08:54] * TimToady is glad to see that sorear++ and diakopter++ now know each other well enough that the occasional snippiness at each other's abbreviated style no longer jeopardizes the friendship :)

[08:54] <timotimo_> \o/

[08:55] <TimToady> (backlogging, as you might surmise :)

[08:57] <sorear> timotimo_: no, I get an inch futher

[08:57] <sorear>     method postcircumfix:<( )>($ ($x)) {

[08:57] <sorear>         $x ~~ ::?CLASS ?? $x !! self.^enum_from_value($x)

[08:57] <sorear>     }

[08:57] <sorear> the good news is we can now properly call postcircumfix:<( )>

[08:58] <sorear> ACCEPTS is blowing up.

[08:58] * TimToady finds the pun on unacceptable to be unacceptable...

[08:59] * timotimo_ heads towards uni

[08:59] <timotimo_> on a bike

[08:59] <timotimo_> in 30 degC :(

[08:59] <TimToady> don't get run over

[08:59] <diakopter> brrrrr

[08:59] <sorear> no wifi on the bike, eh

[08:59] <diakopter> oh wait

[08:59] <timotimo_> there's bike lanes all the way to the uni, except for a few meters all in all :)

[08:59] <sorear> i hear they have it on trains and planes now

[09:00] <TimToady> diakopter: you were thinking Kelvin :P

[09:00] <timotimo_> oh, you probably meant actual humans *running* me over, like on foot

[09:00] <timotimo_> yeah, that could happen

[09:00] <timotimo_> i'll be careful, thanks!

[09:00] *** pr_ joined
[09:00] <sorear> timotimo_: try not to catch fire either

[09:00] <TimToady> (when you halt)

[09:01] <sorear> good antenoon masak

[09:02] * diakopter comes upon a way to determine if a non-gmail.com address is actually a gmail address

[09:02] <diakopter> xmpp leaks

[09:05] <pr_> Hi, in Perl6, is it possible to conditionally create variables? eg, let's say I am reading a bunch of csv files and generating sql files to insert the data into a database. Each csv file has a different structure: whereas file 1 has 10 columns, file 2 has 12,etc. Is there a way to shorten/lengthen the number of declared variables based on the file name? eg, my ($v1,$v2) = split("\t"... in the case of file 1, my ($v1,$v2,$v3) in case the sc

[09:06] <TimToady> generally that means you want an array or hash instead

[09:07] <TimToady> and no, you can't change the number of lexically declared variables without something like an eval

[09:07] <pr_>  Could a macro do this?

[09:07] <diakopter> not at runtime

[09:07] <diakopter> ... if you read in the file at macro time........ zugh

[09:08] <sorear> ok, I'm getting my current problem because subsignatures are busted.   sub bob($ ($x)) { say nqp::isnull($x) }; bob(\5)'  # 1

[09:08] <sorear> exactly how many perl 6 features does "1..5" use?

[09:09] <diakopter> about avogadro's number

[09:09] <TimToady> at least one, which is itself

[09:09] <TimToady> since a 1..5 returns 2..5 when iterated

[09:13] <FROGGS> is it right that this behaviour is now against the spec?

[09:13] <FROGGS> r: say 1 for Nil

[09:13] <camelia> rakudo b2072f:  ( no output )

[09:13] <sorear> ah, I'm running into a NYI in the binder

[09:14] *** ssutch left
[09:14] <TimToady> FROGGS: yes, that should say 1 once now, not assume that Nil means ()

[09:14] <FROGGS> great, thanks

[09:15] <FROGGS> TimToady: do we still need all of these? Nil, Any, Mu, Whatever? I have problems remembering what to take when :/

[09:15] <TimToady> they all mean different things

[09:17] <TimToady> mus√©e &

[09:18] *** kaleem left
[09:19] <FROGGS> fair enough

[09:19] *** kaleem joined
[09:29] *** domidumont left
[09:30] <pr_> Hi, I am having an issue with long heredocs in p6 2013.5. Is this the right place to mention it?

[09:31] <timotimo_> didn't catch fire on the way :)

[09:31] <timotimo_> even got here on time

[09:31] <moritz> pr_: yes, feel free to ask

[09:31] <sorear> so why is it that the rakudo C code is free of line-end whitespace but the Java code is absolutely dripping with the stuff?

[09:32] <pr_> How do I post 10 lines of code here?

[09:32] <sorear> pastebin-type site

[09:32] <nwc10> is there a test that fails if you add whitespace to the C code? And no such test for the Java code?

[09:32] <moritz> pr_: use a paste bin, gist.github.com if you don't prefer something else

[09:32] * sorear constantly has to resist doing a find | xargs perl -ipe

[09:33] <moritz> nwc10: there used to be a test, when rakudo was part of parrot

[09:33] <sorear> nwc10: would jnthn kill me if I added such a test?

[09:33] <pr_> What's a "paste bin"?

[09:33] <nwc10> sorear: I don't know. To make it pass you'd have to remove all the current whitespace

[09:33] <moritz> pr_: a website where you can enter your 10 lines of code, and give us the URL where we can view it

[09:33] <nwc10> It wouldn't be terrible on git blame

[09:33] <nwc10> but I'd ask him first

[09:34] <moritz> sorear: experience shows that he'll just commit his changes with tests failing :-)

[09:34] <nwc10> (you can blame without whitespace, but not on the gitweb interface)

[09:34] <nwc10> we need to put a lock on his beer fridge which only releases when all tests pass

[09:34] <sorear> pre-commit hook?

[09:34] <sorear> nwc10: heh

[09:35] <moritz> is it actualy worth the effort?

[09:36] <sorear> moritz: the { and } commands in vim don't work if you have whitespace on your blank lines, and fixing vim seems like more effort :p

[09:36] <nwc10> I think that having a test is worth it. Otherwise ugliness gradually slips in

[09:36] <sorear> also I have my vimrc set up to highlight EOL whitespace

[09:36] <nwc10> and then the git blame history gets messed up with "tidy up whitespace" type commits

[09:37] <nwc10> which 10 years from now will be hateful

[09:37] *** daxim joined
[09:38] <pr_> I have just pasted the code here: https://gist.github.com/anonymous/5795786

[09:39] <masak> pr_: looks like a function call...

[09:39] <masak> r: my $foo = "foo"; say "$foo(1, 2, 3)"

[09:39] <camelia> rakudo b2072f: OUTPUT¬´No such method 'postcircumfix:<( )>' for invocant of type 'Str'‚ê§  in block  at /tmp/zeZyjquCVc:1‚ê§‚ê§¬ª

[09:39] <masak> pr_: is this the error you get?

[09:39] <masak> r: my $foo = "foo"; say "$foo\(1, 2, 3)"

[09:39] <camelia> rakudo b2072f: OUTPUT¬´foo(1, 2, 3)‚ê§¬ª

[09:39] <masak> pr_: try it like that.

[09:40] <moritz> or try    qq :s :heredoc 'EOT';

[09:40] <moritz> then only scalars should be interpolated, no function call syntax

[09:41] <pr_> moritz: :s does not make any difference

[09:41] <sorear> .ask jnthn Would it be insane for me to rename org.perl6.rakudo.Ops to RakOps or something so we don't have to fully qualify all the time?

[09:41] <yoleaux> sorear: I'll pass your message to jnthn.

[09:41] * diakopter stumbles across this in the clogs  http://irclog.perlgeek.de/perl6/2009-11-27#i_1775684

[09:42] <pr_> companyname is not a function call. It's just a database column name in a long heredoc.

[09:42] <masak> diakopter: heh :)

[09:43] <masak> pr_: if you write "$var(...)" in a string, even a heredoc, Perl 6 will read that as a function call.

[09:43] <masak> pr_: you haven't said that's the problem, but I'm currently assuming it is.

[09:43] <moritz> r: my $x = 'foo'; say "$x()"

[09:43] <camelia> rakudo b2072f: OUTPUT¬´No such method 'postcircumfix:<( )>' for invocant of type 'Str'‚ê§  in block  at /tmp/zHsI5B0hVc:1‚ê§‚ê§¬ª

[09:43] <moritz> r: my $x = 'foo'; say q:s"$x()"

[09:43] <camelia> rakudo b2072f: OUTPUT¬´No such method 'postcircumfix:<( )>' for invocant of type 'Str'‚ê§  in block  at /tmp/csCxmndlcT:1‚ê§‚ê§¬ª

[09:43] <diakopter> masak: when do comedies of errors become tragedies?

[09:44] <masak> diakopter: depends on one's disposition, I should think.

[09:44] *** chayin_ joined
[09:44] *** chayin left
[09:48] <pr_> masak: putting a backslash before the left parens next to $csv_file did the trick. thx.

[09:50] *** pr_ left
[09:55] <sorear> sleep&

[09:59] *** anuby left
[10:13] <timotimo_> interesting, i got to a point in debugging where $_.++ will generate a dottyop with an NQPMu as its .ast

[10:13] <timotimo_> is that due to backtracking fixing it later or is the grammar in that case faulty?

[10:14] <FROGGS> I'd say the grammar doesnt fit the actions (or vice-versa)

[10:16] *** rindolf left
[10:19] <timotimo_> i may be barking up the wrong tree entirely and there should be something more in the grammar than just dottyop:sym<.> and :sym<.*>

[10:22] <FROGGS> can you paste a diff?

[10:25] <timotimo_> the only additions i made are some nqp::say's spread over dotty and dottyop

[10:25] <timotimo_> i'll need to relocate in a few minutes

[10:25] <FROGGS> hmmm, okay

[10:38] *** kresike joined
[10:38] <kresike> hello all you happy perl6 people

[10:41] <FROGGS> hi kresike 

[10:44] <kresike> FROGGS, o/

[10:46] *** domidumont joined
[10:48] <cognominal> nr: my $i = 1; 'a' ~~ / 'a' ** $i /

[10:48] <camelia> niecza v24-76-g3e65d84: OUTPUT¬´Potential difficulties:‚ê§  Unsupported use of atom ** $i as separator; nowadays please use atom+ % $i at /tmp/CZeVkCIWmS line 1:‚ê§------> [32mmy $i = 1; 'a' ~~ / 'a' ** $i[33m‚èè[31m /[0m‚ê§‚ê§¬ª

[10:48] <camelia> ..rakudo b2072f: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Quantifier quantifies nothing‚ê§at /tmp/gbCq9vjr6B:1‚ê§------> [32mmy $i = 1; 'a' ~~ / 'a' ** [33m‚èè[31m$i /[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        infix stopper‚ê§        infix or meta-infix‚ê§        prefix or term‚ê§        pref‚Ä¶

[10:49] <FROGGS> cognominal: NYI, I already tried to do that without luck

[10:49] <cognominal> FROGGS, thx

[10:50] * cognominal searches for a workaround

[10:51] <masak> cognominal: match with * or +, then check the number of matches in a <?{ ... }>

[10:51] *** odoacre left
[10:51] <FROGGS> nr: regex atom { 'a' }; my $i = 1; 'a' ~~ / [<?{ $i--; } <atom>]* /

[10:51] <camelia> niecza v24-76-g3e65d84: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Methods must be used in some kind of package at /tmp/sMvKsVIfg4 line 1:‚ê§------> [32mregex atom [33m‚èè[31m{ 'a' }; my $i = 1; 'a' ~~ / [<?{ $i--; [0m‚ê§‚ê§Unable to parse metachar:sym<< >> at /tmp/sMvKsVIfg4 line 1:‚ê§------> [‚Ä¶

[10:51] <camelia> ..rakudo b2072f: OUTPUT¬´Useless declaration of a has-scoped method in mainline‚ê§[31m===[0mSORRY![31m===[0m‚ê§regex assertion not terminated by angle bracket‚ê§at /tmp/gE5kjN8bTs:1‚ê§------> [32m 'a' }; my $i = 1; 'a' ~~ / [<?{ $i--; }[33m‚èè[31m <atom>]* /[0m‚ê§    expecting any of:‚ê§        ‚Ä¶

[10:51] <cognominal> masak: indeed

[10:52] *** odoacre joined
[10:52] <FROGGS> nr: my regex atom { 'a' }; my $i = 1; say 'aaa' ~~ / [<?{ $i-- }> <atom>]* /

[10:52] <cognominal> ‚Ä¶using a non greedy qunatifier to avoid to much backtracking.

[10:52] <camelia> rakudo b2072f, niecza v24-76-g3e65d84: OUTPUT¬´ÔΩ¢aÔΩ£‚ê§ atom => ÔΩ¢aÔΩ£‚ê§‚ê§¬ª

[10:52] <FROGGS> nr: my regex atom { 'a' }; my $i = 7; say 'aaa' ~~ / [<?{ $i-- }> <atom>]* / # it is almost good :o)

[10:52] <camelia> rakudo b2072f, niecza v24-76-g3e65d84: OUTPUT¬´ÔΩ¢aaaÔΩ£‚ê§ atom => ÔΩ¢aÔΩ£‚ê§ atom => ÔΩ¢aÔΩ£‚ê§ atom => ÔΩ¢aÔΩ£‚ê§‚ê§¬ª

[10:53] *** ecocode joined
[10:53] <FROGGS> well, you could make it fail when $i is nonzero

[10:53] <FROGGS> nr: my regex atom { 'a' }; my $i = 7; say 'aaa' ~~ / [<?{ $i-- }> <atom>]* <!{ $i }>/ # test

[10:54] <camelia> rakudo b2072f, niecza v24-76-g3e65d84: OUTPUT¬´ÔΩ¢aaÔΩ£‚ê§ atom => ÔΩ¢aÔΩ£‚ê§ atom => ÔΩ¢aÔΩ£‚ê§‚ê§¬ª

[10:54] <FROGGS> hmmm

[10:54] <masak> FROGGS: that doesn't seem very compatible with backtracking.

[10:54] <FROGGS> true

[10:56] <FROGGS> masak: I run into something similar: I did something about heredocs, which added the stopper twice to a list because of a <?term>

[11:06] <masak> oh! day after tomorrow is #masakism again! \o/

[11:06] <masak> an evening of great group hacking and discussion.

[11:07] <masak> it seems that the core group of attendees will be smaller this time. maybe there will be more time for discussion and looking at individual solutions.

[11:10] *** JimmyZ joined
[11:16] *** atroxaper left
[11:29] *** flaviusb left
[11:31] <cognominal> by the way, should we say "forwardtracking" for non greedy quantifiers?  :)

[11:32] <moritz> "forthtracking"

[11:35] <cognominal> I like FORTH, the language, but everytime the word is uttered, this zardozian image pops up in my mind :http://koti.mbnet.fi/manki1/mainoksia/Atari_forth.jpg

[11:36] <masak> no, "backtracking" is fine, because the direction "back" pertains to regex-space, not to string-space.

[11:38] <cognominal> yes, until non greedy qantifiers, backtracking applied to the two spaces.

[11:38] * moritz just spent two hours debugging a problem which turned out to be stale caches, proving the proverb about the two hardest problems in CS

[11:39] <cognominal> moritz, what is the second hardest?

[11:39] <moritz> cognominal: the proverb goes like this: The two hardest problems in CS are naming, cache invalidation and off-by-one errors

[11:41] <masak> moritz: jnthn has started saying that the two hardest problems in CS are cache invalidation and cache invalidation :)

[11:41] <timotimo_> i declare making $_.++ work too hard for now.

[11:42] <masak> moritz: (which is sufficiently autopunny for my taste)

[11:44] <timotimo_> https://github.com/rakudo/rakudo/pull/164 - pr'd my work so far :)

[11:45] *** woosley left
[11:47] *** census joined
[11:48] *** rindolf joined
[12:03] <JimmyZ> $_.++ works in alpha, for some reason, it lost in nom :P

[12:03] *** Ulti left
[12:04] <timotimo_> :)

[12:07] *** pmurias joined
[12:08] <pmurias> one annoying thing about --target=ast is that for large files the source code for a given AST node takes a lot of screen space

[12:08] <pmurias> any ideas how to fix that?

[12:08] <timotimo_> send it through a perl one-liner? :))

[12:08] <timotimo_> open it in a pager that won't do word wrapping?

[12:09] <moritz> pmurias: AST simply isn't a terse, human-readable representation

[12:10] <timotimo_> moritz: the trouble is that each AST node will print the source code it was made from after itself

[12:10] <moritz> but limited to max. 50 chars or so, no?

[12:11] <timotimo_> not sure

[12:11] <timotimo_> nope, it's full

[12:11] <moritz> that's something that should be fixed, then

[12:12] <timotimo_> i can totally do that

[12:12] <pmurias> my other idea is to spit out html+js so that things could be expanded on a click or something like that

[12:13] <timotimo_> if i put in the trimming in QAST::Node.dump, that won't be possible any more

[12:15] <pmurias> timotimo_: emitting an interactive page directly from QAST::Node seems a better idea then parsing the textual output from --target=ast

[12:15] <pmurias> so I wouldn't worry about that

[12:16] <timotimo_> you are suggesting an extra --target perhaps?

[12:16] <timotimo_> so that the content of the .dump method doesn't matter to you?

[12:17] <pmurias> for an richer output I suggest an extra --target

[12:18] <moritz> or an environment variable

[12:19] *** skids left
[12:21] *** Ulti joined
[12:24] *** pmurias left
[12:24] *** zakalwe left
[12:24] *** zakalwe joined
[12:25] *** pmurias joined
[12:26] <timotimo_> https://gist.github.com/timo/3cf2ef1bdd0b0dedd0d7 - my suggestion for autopun of the day

[12:27] <tadzik> hehe

[12:28] <timotimo_> well, ./perl6-jvm -> use Test gives an error, so maybe that's the exception that flew?

[12:29] <timotimo_> (when trying to run the tests in t/01-sanity/

[12:29] <timotimo_> and failing to get any running at all)

[12:29] *** potatogim joined
[12:31] <FROGGS> hehe

[12:31] *** potatogim left
[12:31] <FROGGS> timotimo_++

[12:33] *** timotimo_ is now known as timotimo

[12:37] *** bluescreen10 left
[12:40] <timotimo> still amazed by the rote speed of jakudo parsing

[12:40] <timotimo> Stage parse      :  91.597 <- parrot | jvm -> Stage parse      :  37.542

[12:40] <moritz> last I looked, 'use v6;' blew up on rakudo-jvm

[12:40] <timotimo> ah, indeed

[12:41] <timotimo> does "use v6;" do anything at all? i thought it was just a little nothing in the grammar or something

[12:43] <moritz> it seems to do just a wee bit more

[12:43] * masak .oO( they whispered sweet nothings to each other -- mostly just no-op pragrams )

[12:44] <moritz> are "pragrams" a mixture of "pragmas" and "programs"?

[12:46] *** dayangkun joined
[12:47] *** ecocode left
[12:49] <FROGGS> use v6 is a noop in rakudo currently

[12:50] <FROGGS> moritz: about the blew-up, jnthn said something about that issue a week ago or so

[12:52] <[Coke]> it's the main blocker at the moment to running the test suite.

[12:53] <[Coke]> (internal one, not spec.)

[12:53] <masak> moritz: no, just a typo :)

[12:53] *** snearch joined
[12:57] *** daxim_ joined
[12:57] *** daxim left
[12:58] <[Coke]> another day of this channel being the only perl6 news on google alerts.

[12:59] <timotimo> :(

[13:02] <masak> r: my @stuff = 1, 2, 3, 4, 5; my @old = 1, 2, 3; say @stuff (-) @old

[13:02] <camelia> rakudo b2072f: OUTPUT¬´set(4, 5)‚ê§¬ª

[13:03] <moritz> r: my @stuff = 1..4; say @stuff (-) 0..3;

[13:03] <camelia> rakudo b2072f: OUTPUT¬´set("1", "2", "3", "4")..3‚ê§¬ª

[13:03] <timotimo> let in the new, throw out the old.

[13:03] <moritz> r: my @stuff = 1..4; say @stuff (-) (0..3);

[13:03] <camelia> rakudo b2072f: OUTPUT¬´set(4)‚ê§¬ª

[13:03] <timotimo> haha :)

[13:09] *** ajr joined
[13:09] *** ajr is now known as Guest3673

[13:10] *** Guest3673 is now known as ajr_

[13:11] *** atroxaper joined
[13:17] *** tgt joined
[13:18] *** tgt left
[13:21] *** bonsaikitten left
[13:21] *** PacoAir joined
[13:22] *** bonsaikitten joined
[13:24] *** konundra joined
[13:24] *** tgt joined
[13:25] <timotimo> fwiw, the error experienced by use v6 comes from my $v := $*W.find_symbol(["Version"]).new(~$<vfoo>);

[13:25] <timotimo> and also, my $v = Version.new("v6"); will give a NPE

[13:26] <timotimo> > my @parts = "v6".comb(/:r '*' || \d+ || <.alpha>+/);

[13:26] <timotimo> java.lang.NullPointerException

[13:27] <timotimo> it would appear .comb is broken and that causes version objects to not be creatable

[13:27] <timotimo> does it sound terrible to add a #?jvm block that special-cases "v6"?

[13:28] <dalek> roast: e924fe3 | (Solomon Foster)++ | S03-operators/set.t:

[13:28] <dalek> roast: Tests for reduce on set union and intersection

[13:28] <dalek> roast: 

[13:28] <dalek> roast: Add a first few simple tests for reduce meta-op on union and intersection.

[13:28] <dalek> roast: review: https://github.com/perl6/roast/commit/e924fe3388

[13:28] <colomon> not at all surprised comb is broken... I imagine it relies on gather / take, and that's not there yet.

[13:29] <timotimo> could be

[13:29] <timotimo> i'm testing my ugly hack that checks if the string is "v6" ;)

[13:29] <colomon> a temporary hack to make "use v6" work seems like a Very Good Thing.

[13:31] *** salv0 joined
[13:34] <timotimo> didn't get me much closer to the finish line it seems

[13:35] <timotimo> weird, the find symbol + new thing still fails?

[13:38] <timotimo> (probably because i misunderstood what text gets passed to the constructor)

[13:39] *** FROGGS left
[13:40] *** benabik joined
[13:43] *** kaleem left
[13:46] *** sqirrel left
[13:49] *** kaare_ joined
[13:49] <colomon> rn: say (set <a b c>) (|) (set <1 2 3>) (|) (set <z y x>)

[13:49] <camelia> rakudo b2072f: OUTPUT¬´Too many positional parameters passed; got 3 but expected 2‚ê§  in sub infix:<(|)> at src/gen/CORE.setting:13260‚ê§  in block  at /tmp/k4xPGuWPGG:1‚ê§‚ê§¬ª

[13:49] <camelia> ..niecza v24-76-g3e65d84: OUTPUT¬´Unhandled exception: Excess arguments to infix:<(|)>, used 2 of 3 positionals‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 0 (infix:<(|)> @ 1) ‚ê§  at /tmp/Ld1DNnVEs6 line 1 (mainline @ 6) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4530 (ANON @ 3) ‚ê§  ‚Ä¶

[13:50] *** panchiniak_ joined
[13:50] <dalek> niecza: 2b14288 | (Solomon Foster)++ | lib/CORE.setting:

[13:50] <dalek> niecza: Change set union and intersection to be proper list operators.

[13:50] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2b14288459

[13:50] <colomon> clearly still need more set op tests!

[13:51] *** skids joined
[13:52] *** FROGGS joined
[13:53] * colomon thinks he has fixed that one in Niecza...

[14:00] <masak> colomon++ # somebody set up us the tests

[14:00] <masak> s/set up/set op/

[14:00] <masak> :)

[14:02] <colomon> After that test above, I now suspect the new reduce on union and intersection tests I pushed will fail on Rakudo

[14:02] <colomon> When I did them, I assumed they would work.

[14:02] *** kaleem joined
[14:07] *** snearch left
[14:11] <dalek> perl6-roast-data: 67df23f | coke++ | / (4 files):

[14:11] <dalek> perl6-roast-data: today (automated commit)

[14:11] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/67df23f6db

[14:11] <dalek> perl6-roast-data: 1339dce | coke++ | / (3 files):

[14:11] <dalek> perl6-roast-data: today (automated commit)

[14:11] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/1339dce0df

[14:12] <[Coke]> niecza has been dirty for 334 days. pugs has been clean for 5 days. rakudo has been clean for 2 days.

[14:12] <dalek> rakudo-star-daily: 9a83b7d | coke++ | log/ (5 files):

[14:12] <dalek> rakudo-star-daily: today (automated commit)

[14:12] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/9a83b7d80e

[14:12] <dalek> rakudo-star-daily: 7455ddb | coke++ | log/ (5 files):

[14:12] <dalek> rakudo-star-daily: today (automated commit)

[14:12] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/7455ddbc4c

[14:13] *** panchiniak_ left
[14:17] <timotimo> java.lang.NoSuchMethodError: org.perl6.rakudo.Ops.p6routinereturn(Lorg/perl6/nqp/sixmodel/SixModelObject;Lorg/perl6/nqp/runtime/ThreadContext;)Lorg/perl6/nqp/sixmodel/SixModelObject;

[14:17] <timotimo> my fault or known error?

[14:20] * timotimo runs the sanity test suite now

[14:21] *** benabik left
[14:23] <FROGGS> timotimo: FYI: the bind=>p6store wasnt needed for the v5-issue

[14:26] *** benabik joined
[14:28] <timotimo> i'll issue a pullrequest for the "use v6" fix now after a bit of testing

[14:29] <[Coke]> timotimo++

[14:31] *** BenGoldberg joined
[14:31] *** spider-mario joined
[14:32] <timotimo> failing a couple, a few of the test files run through completely, though

[14:32] <[Coke]> that's about what I saw when I just commented out 'use v6;' earlier.

[14:32] <timotimo> mhm

[14:32] <[Coke]> timotimo++

[14:32] <dalek> v5: 4a5c04a | (Tobias Leich)++ | lib/Perl5/Actions.nqp:

[14:32] <dalek> v5: dispatch operators to overload-able subs

[14:32] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/4a5c04aea7

[14:32] <dalek> v5: 00becb9 | (Tobias Leich)++ | lib/Perl5/Terms.pm:

[14:32] <dalek> v5: added method P5Numeric

[14:32] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/00becb9cce

[14:32] <dalek> v5: b141e6f | (Tobias Leich)++ | lib/Perl5/overload.pm:

[14:32] <dalek> v5: added more operators, and fallbacks based on <=>

[14:32] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/b141e6f8cb

[14:32] <dalek> v5: 15fec8a | (Tobias Leich)++ | STATUS.md:

[14:32] <dalek> v5: update after Str.P5Numeric and overload.pm update

[14:32] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/15fec8a2c7

[14:41] *** benabik left
[14:47] *** benabik joined
[14:47] <dalek> rakudo-js: ea49f2f | (Pawel Murias)++ | src/QAST/Compiler/JavaScript.nqp:

[14:47] <dalek> rakudo-js: Handle QAST::Var's with 'static' as decl.

[14:47] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/ea49f2ff9d

[14:48] <dalek> nqp: 1729750 | (Pawel Murias)++ | src/QAST/Var.nqp:

[14:48] <dalek> nqp: Make --target=ast print out the value of decl on QAST::Var.

[14:48] <dalek> nqp: review: https://github.com/perl6/nqp/commit/172975058d

[14:48] <FROGGS> it is awesome what is happening these days^^

[14:50] <[Coke]> can all nqp opcodes be run both directly with nqp:: and via QAST::Op ?

[14:50] <dalek> nqp: c2eba21 | (Timo Paulssen)++ | src/QAST/Node.nqp:

[14:50] <dalek> nqp: if the code part of a node is too long, truncate it.

[14:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c2eba219ef

[14:50] <timotimo> here's that fix i forgot to actually push

[14:51] <[Coke]> nqp::say() is invokable 3 ways, it seems: nqp::say, say, and via QAST. wondering if all opcodes are similarly functional.

[14:54] <[Coke]> while, on the other hand, looks like it has the builtin and the :op, is probably not invokable with nqp::while. 

[14:54] <[Coke]> (well, it is invokable, but not in a hepful way. can someone write an example where it works?)

[14:55] *** aindilis left
[14:57] <pmurias> [Coke]: via QAST?

[14:58] <pmurias> [Coke]: the difference between say and nqp::say is that say can handle multiple arguments

[14:58] <pmurias> nqp: say("Hello","[Coke]");

[14:58] <camelia> nqp: OUTPUT¬´Hello[Coke]‚ê§¬ª

[14:58] <pmurias> what would be a good site for a GSoC project blog?

[14:59] <FROGGS> blogs.perl.org?

[15:01] <masak> +1

[15:02] *** kaleem left
[15:03] <[Coke]> nqp: nqp::say("thing", "2");

[15:03] <camelia> nqp: OUTPUT¬´Error while compiling block : Error while compiling op say (source text: "nqp::say(\"thing\", \"2\")"): Operation 'say' requires 1 operands, but got 2‚ê§current instr.: '' pc 48612 (src/stage2/QAST.pir:17766) (src/stage2/QAST.nqp:2981)‚ê§¬ª

[15:03] <[Coke]> pmurias: no, I'm wondering if you can write an example that shows a functioning while loop with nqp::while

[15:04] <[Coke]> nqp: nqp::while();

[15:04] <camelia> nqp: OUTPUT¬´Error while compiling block : Error while compiling op while (source text: "nqp::while()"): Method 'fresh_' not found for invocant of class 'RegAlloc'‚ê§current instr.: '' pc 48612 (src/stage2/QAST.pir:17766) (src/stage2/QAST.nqp:2981)‚ê§¬ª

[15:04] <[Coke]> (or if I should just abandon that, and assume that everything in docs/nqp-opcodes.txt is for QAST usage.

[15:07] *** ajr joined
[15:07] *** ajr_ left
[15:08] *** ajr is now known as Guest33115

[15:10] *** tgt left
[15:12] <pmurias> [Coke]: why do you want to write a while in such a way?

[15:12] *** birdwindupbird left
[15:13] *** SmokeMac_ joined
[15:15] <pmurias> [Coke]: my $i:=3;nqp::while($i,say($i),$i--)

[15:15] *** SmokeMachine left
[15:15] <pmurias> nqp: my $i:=3;nqp::while($i,say($i),$i--)

[15:15] <camelia> nqp: OUTPUT¬´3‚ê§2‚ê§1‚ê§¬ª

[15:16] <kresike> bye folks

[15:16] *** kresike left
[15:16] <pmurias> http://blogs.perl.org/users/pawel_murias/2013/06/first-inchstone.html

[15:17] *** domidumont left
[15:19] *** BenGoldberg left
[15:23] <masak> pmurias++

[15:26] <pmurias> just relised that I need to fix an updated test case to full pass the inchstone ;/

[15:27] *** BenGoldberg joined
[15:30] *** bluescreen10 joined
[15:32] *** Ulti left
[15:36] *** kbenson left
[15:40] <[Coke]> pmurias: I don't, particularly. Trying to come up with some prose for the leadin of new nqp opcode docs.

[15:40] <[Coke]> wondering why your invocation of nqp::while there has 3 args when it's "documented" as taking only 2

[15:45] *** Guest33115 is now known as ajr_

[15:47] *** JimmyZ left
[15:50] *** Ulti joined
[15:54] *** bbkr_ left
[15:56] <pmurias> [Coke]: the third argument is the 3rd argument in for (;;...) {}

[15:56] <pmurias> [Coke]: I myself avoid looking at the current nqp opcode docs

[15:58] <[Coke]> pmurias: if we're trying to get more people to use nqp, I'd rather fix the docs then tell people to avoid them.

[15:58] <[Coke]> *than*

[15:59] *** fhelmberger left
[15:59] <[Coke]> looks like i will have to avoid the existing ones when generating new ones, though.

[16:00] <pmurias> having better docs would be great

[16:09] <pmurias> [Coke]: I had to rewrite a lot of things in nqp-js as I had to figure a lot of things by trial and error rather then by having good docs avalible

[16:10] <dalek> rakudo-js: ce87e59 | (Pawel Murias)++ | nqp:

[16:10] <dalek> rakudo-js: Update the npq submodule.

[16:10] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/ce87e59990

[16:10] <dalek> rakudo-js: 5e1cd98 | (Pawel Murias)++ | runtime.js:

[16:10] <dalek> rakudo-js: Enable stringification of exceptions. Fix failing test 44.

[16:10] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/5e1cd98a3f

[16:10] *** atroxaper left
[16:13] *** konundra left
[16:14] <TimToady> pmurias++ # "inchstone"  :)

[16:20] <diakopter> [Coke]++ awesome error of the month  Method 'fresh_' not found for invocant of class 'RegAlloc'

[16:21] *** pjcj left
[16:23] *** daxim_ left
[16:28] <sorear> timotimo-- duplicating my work

[16:28] <[Coke]> which work? making 'use v6' work?

[16:29] *** pjcj joined
[16:29] <sorear> timotimo: if you pull sorear/rakudo, you'll find that p6routinereturn exists, as does gather/take

[16:29] <sorear> [Coke]: yes

[16:32] <[Coke]> ah. I also had no idea you were tackling that issue.

[16:32] *** tgt joined
[16:33] *** SamuraiJack left
[16:36] *** ajr_ left
[16:39] <timotimo> yays! :)

[16:40] <timotimo> sorear: does  use v6;  work in that repo?

[16:40] <timotimo> also: sorry :(

[16:42] *** REPLeffect left
[16:42] *** tgt left
[16:43] <sorear> not quiiiite

[16:45] <sorear> comb works, though. :)

[16:45] <timotimo> yays :)

[16:45] <timotimo> what part doesn't work?

[16:46] <sorear> eq.

[16:47] *** konundra joined
[16:48] <timotimo> ah, interesting

[16:48] <timotimo> in the selftests, == with "0" and "0" doesn't work either

[16:51] <colomon> sorear++

[16:51] <dalek> v5: ddc0fc6 | (Tobias Leich)++ | lib/Perl5/Actions.nqp:

[16:51] <dalek> v5: added overload-able op /

[16:51] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/ddc0fc6fe9

[16:51] <dalek> v5: 68c800e | (Tobias Leich)++ | lib/Perl5/ (2 files):

[16:51] <dalek> v5: call .P5Numeric for numeric operations

[16:51] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/68c800ec7f

[16:51] <dalek> v5: 5c6edcf | (Tobias Leich)++ | STATUS.md:

[16:51] <dalek> v5: call .P5Numeric for numeric operations

[16:51] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/5c6edcfa8c

[16:57] *** lizmat joined
[16:58] *** tgt joined
[16:58] *** abnorman joined
[16:59] *** vk joined
[16:59] <lizmat> good *, #perl6!  

[17:00] *** vaelxon left
[17:00] <masak> lizmat! \o/

[17:00] <lizmat> back in Echt, really!

[17:02] *** sivoais is now known as dr-faustus

[17:04] *** dr-faustus is now known as sivoais

[17:04] *** ajr joined
[17:04] *** ajr is now known as Guest50214

[17:09] *** tgt left
[17:10] <masak> O ECHT?

[17:10] <lizmat> jah!

[17:11] <perigrin> Crums DM, Oh Echt, Oh Crikey -- Penfold.

[17:11] <lizmat> perigrin!

[17:18] *** dakkar left
[17:20] *** fgomez left
[17:20] *** woolfy joined
[17:23] <perigrin> lizmat!

[17:24] *** tgt joined
[17:24] <lizmat> glad to see you're not just lurking on #perl6 :-)

[17:24] <perigrin> no no no I make the occasional random and mildly snarky comment too!

[17:24] <lizmat> community building++ 

[17:25] <perigrin> :D

[17:26] *** konundra left
[17:26] *** census left
[17:28] <masak> it's true. I checked the backlog.

[17:30] <colomon> This is the perigrin who had dinner with us that first Saturday night at YAPC::NA?  o/

[17:30] <masak> I believe so.

[17:30] <dalek> roast: f66aba6 | (Elizabeth Mattijsen)++ | S32-list/classify.t:

[17:30] <dalek> roast: Added named sub test, just like with categorize

[17:30] <dalek> roast: review: https://github.com/perl6/roast/commit/f66aba6c44

[17:33] <timotimo> sorear: well, $x == $x where $x is the string "0" won't work because Method 'Bridge' not found

[17:34] <lizmat> colomon, masak: perigrin is also one of the YAPC::NA 2014 organizers  :-)

[17:34] <lizmat> we found out tonight is the last night ST Into Darkness is showing in our local service cinema

[17:34] *** twigel left
[17:34] <masak> perigrin: if YAPC::NA 2014 is anything like YAPC::NA 2013, then well done! :P

[17:34] <colomon> lizmat: I knew that the perigrin we had dinner with was.  :)  Just wasn't 100% sure that was how he spelled his nick, if you know what I mean.

[17:34] *** tgt left
[17:35] <lizmat> so, we're off for some 3D spectacle(s), double baileys and 1 set of chicken nuggets and 1 set of cheese sticks

[17:35] <benabik> Has a location for ::NA '14 been announced?

[17:35] <colomon> timotimo: that's probably something to do with roles, I'm guessing?  

[17:35] <colomon> benabik: Orlando

[17:36] <lizmat> off to see some James Tiberius Kirk, reimagined

[17:36] *** tgt joined
[17:37] <colomon> lizmat: yay!  I'm looking forward to seeing that someday...

[17:42] <timotimo> colomon: but i'm able to "0".Numeric with no problem and it should dispatch through that, no?

[17:43] <colomon> .... dunno. 

[17:45] *** tomyan joined
[17:45] *** BenGoldberg left
[17:46] <timotimo> well, it works with "0" == "0" but not with $x == $x

[17:46] <timotimo> i don't know how to figure out if the role isn't added properly

[17:46] <timotimo> $x.^methods is unfortunately empty

[17:48] *** dmol joined
[17:50] *** tgt left
[17:50] <pmichaud> good morning, #perl6

[17:50] <yoleaux> 14 Jun 2013 16:13Z <lizmat> pmichaud: Maybe it is an idea to have a 2nd optional parameter to .classify|.categorize to indicate the hash to classify/categorize into?

[17:50] <moritz> timotimo: with does?

[17:51] <timotimo> my $x = "0";?

[17:52] *** panchiniak joined
[17:52] *** shinobicl joined
[17:53] *** konundra joined
[17:53] *** fgomez joined
[17:57] *** panchiniak left
[18:00] <colomon> timotimo: I'll try to take a look at it

[18:01] <dalek> perl6-roast-data: c6291af | coke++ | / (4 files):

[18:01] <dalek> perl6-roast-data: today (automated commit)

[18:01] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/c6291af9a6

[18:01] *** BenGoldberg joined
[18:04] *** btyler joined
[18:08] *** tgt joined
[18:09] *** p5eval left
[18:11] *** p5eval joined
[18:14] *** tgt left
[18:15] *** tomyan left
[18:21] <colomon> timotimo: I'm not able to do "0".Numeric.  :(

[18:21] <colomon> \

[18:21] <colomon> > "0".Numeric

[18:21] <colomon> java.lang.NoSuchMethodError: org.perl6.rakudo.Ops.p6routinereturn(Lorg/perl6/nqp/sixmodel/SixModelObject;Lorg/perl6/nqp/runtime/ThreadContext;)Lorg/perl6/nqp/sixmodel/SixModelObject;

[18:21] <timotimo> you need sorear's code for that to work

[18:22] <timotimo> sorear/rakudo

[18:22] <colomon> ah.

[18:22] <timotimo> i don't have access to my desktop right now (busted v6)

[18:22] <timotimo> so i can't really work on that any more :|

[18:24] *** minibota joined
[18:26] <colomon> timotimo: Ah, I see it now.

[18:26] <colomon> > "0".Numeric

[18:26] <colomon> 0

[18:27] <timotimo> yes, but curiously, my $x = "0"; $x.Numeric may not work?

[18:27] *** zby_home_ joined
[18:27] *** tomyan joined
[18:29] *** tomyan left
[18:30] <colomon> timotimo: actually that works fine for me.

[18:30] <colomon> > my $x = "0"; $x.Numeric

[18:30] <colomon> 0

[18:30] <timotimo> oh?

[18:30] <timotimo> try $x == $x

[18:31] <colomon> $x == 0 works

[18:31] <colomon> but

[18:31] <colomon> > $x == $x

[18:31] <colomon> Method 'Bridge' not found

[18:32] <colomon> that's actually a very odd error

[18:32] <pmichaud> seems like an indication that a multimethod is missing somewhere.

[18:33] <colomon> JVM is just using the normal setting, right?  I'm not looking at the wrong code here?

[18:34] <perigrin> masak: I hope it will be. I hope it will be better actually :)

[18:35] <timotimo> it does, yes

[18:36] <colomon> > class A { method Numeric { say "Called Numeric;" 14; }; };

[18:36] <colomon> VMArray representation does not implement at_pos_boxed

[18:36] <colomon> VMArray representation does not implement at_pos_boxed

[18:36] <colomon> .....

[18:36] <colomon> looks like an endless loop of that error message

[18:37] <colomon> typo on my part, but weird error!

[18:38] <colomon> Fixed version works, and calls numeric correctly, but...

[18:38] <colomon> > A.new == 0

[18:38] <colomon> Called Numeric

[18:38] <colomon> False

[18:38] <colomon> > A.new == 14

[18:38] <colomon> Called Numeric

[18:38] <colomon> True

[18:38] <colomon> > A.new == $x

[18:38] <colomon> VMArray representation does not implement at_pos_boxed

[18:38] <colomon> VMArray representation does not implement at_pos_boxed

[18:38] <colomon> ....

[18:38] <colomon> so this is quite bizarre

[18:38] <colomon> ah, don't think I'd defined $x that time.

[18:40] <colomon> pmichaud: what's weird with this is works for many, many cases.  It's only the specific case of $x == $x which triggers the Method 'Bridge' not found message.

[18:40] <colomon> *it works

[18:43] *** tomyan joined
[18:43] *** domidumont joined
[18:44] * colomon is guessing the rakudo debugger doesn't work in JVM yet?

[18:47] <colomon> > "0" == "0"

[18:47] <colomon> True

[18:47] <colomon> > my $x = "0"; $x == $x

[18:47] <colomon> Method 'Bridge' not found

[18:51] <colomon> oh, the debugger doesn't step through core anyway, does it?  Hmm.

[18:53] *** tgt joined
[18:54] *** tgt left
[18:54] *** cognominal left
[18:55] *** cognominal joined
[18:55] *** tgt joined
[18:56] *** nyuszika7h left
[18:57] *** groky left
[18:57] *** bonsaikitten left
[18:58] *** bonsaikitten joined
[18:59] *** avar left
[19:00] *** avar joined
[19:00] *** avar left
[19:00] *** avar joined
[19:00] *** Gothmog_ left
[19:01] *** Gothmog_ joined
[19:01] *** nyuszika7h_ joined
[19:04] *** broquaint left
[19:04] *** broquaint joined
[19:05] *** nyuszika7h_ is now known as nyuszika7h

[19:05] *** groky joined
[19:08] *** tomyan left
[19:11] *** jercos left
[19:11] <sorear> good * #perl6

[19:11] <sorear> pmichaud: !!!

[19:12] <masak> sorear! \o/

[19:12] *** diakopter left
[19:13] *** tomyan joined
[19:14] <sorear> pmichaud: hi

[19:15] *** jercos joined
[19:16] *** diakopter joined
[19:17] *** tgt left
[19:17] <sorear> diakopter: got your mail

[19:17] *** tomyan left
[19:17] <sorear> FYI

[19:18] <colomon> o/

[19:19] <diakopter> sorear: ok thx :)

[19:20] <sorear> pmichaud: i would like to talk to you (or another rakudo org admin) about CLA procedures

[19:20] <sorear> to confirm that http://www.perlfoundation.org/contributor_license_agreement is correct, and get an elaboration on the email procedure you mentioned

[19:21] *** minibota left
[19:21] *** ixxvil joined
[19:21] <pmichaud> sorear: it's correct.

[19:21] <ixxvil> so did you guys get a logo for that compiler?

[19:21] <ixxvil> or whatever it was called then

[19:21] <ixxvil> it had a funny name to it that began with an s

[19:22] <sorear> there's http://rakudoperl.org/wp/wp-content/uploads/2011/04/rakudo-1001.png

[19:22] <pmichaud> sorear: better is probably http://www.perlfoundation.org/attachment/legal/cla3.pdf

[19:22] <sorear> oh, that's a logo for a compiler that starts with an s

[19:22] <sorear> oh, that's a logo for a compiler that starts with an r

[19:22] <TimToady> do we have one that starts with s?

[19:22] <sorear> sprixel I guess

[19:23] <diakopter> --

[19:23] <ixxvil> na not rakudo

[19:23] <TimToady> ixxvil: why do you want to know?

[19:24] <ixxvil> well if they still need one

[19:24] * diakopter tries to make your nick to a roman numeral

[19:24] <TimToady> there are very few conserved needs here :)

[19:24] <sorear> ixxvil: i'm not sure who they is... I can't think of a proper p6 compiler whose name starts with an s

[19:24] <TimToady> either the needs get filled, or they go away...

[19:25] <diakopter> sorear: if you haven't deleted it, would you mind forwarding the mail to me?

[19:25] <sorear> perlito, mildew, pugs, niecza, rakudo

[19:25] <ixxvil> niecza

[19:25] <ixxvil> :D

[19:25] <pmichaud> http://perl6.org/compilers/  # list of compilers

[19:25] <benabik> 'n' neq 's'

[19:25] <sorear> done

[19:25] <ixxvil> i remember TimToady talking about kerning and things then

[19:25] <ixxvil> but i left half way through, life got busy

[19:25] <pmichaud> maybe it's really "sniecza"  :-P

[19:26] <ixxvil> so did niecza get one?

[19:26] <pmichaud> or it could be   ('n' | 's') ~ "iecza"  

[19:26] <sorear> maybe ixxvil is thinking of "sorear" :D

[19:26] *** pmurias left
[19:26] <pmichaud> I'm afk for a bit

[19:26] <ixxvil> yeha i think the head dev for that was some guy who had a nick that began with an s

[19:26] * TimToady has no opinion on compiler logos, only language logos :)

[19:27] <sorear> pmichaud: nothing on email procedures

[19:27] <benabik> pmichaud: 'sniecza' makes me want to reply gesundheit

[19:27] <ixxvil> you need help with a language logo?

[19:27] <pmichaud> oh, I don't know that there are official "email" procedures.

[19:27] <sorear> ixxvil: gee, I wonder who that could be

[19:27] <ixxvil> i thought perl6 was all good to go

[19:27] <TimToady> ixxvil: no, not at the moment :)

[19:27] <sorear> :)

[19:27] * pmichaud checks.

[19:27] <ixxvil> alright!

[19:28] <sorear> pmichaud: ah, I was wondering because I thought you mentioned them but I didn't see anything about it on the site

[19:28] <ixxvil> TimToady: you know i gotta thank you though

[19:28] <pmichaud> we've accepted email copies as provisional until the originals arrive in the mail.

[19:28] <pmichaud> but we still end up needing originals.

[19:28] <TimToady> ixxvil: no you don't, but I don't mind if you do :)

[19:28] <sorear> ok

[19:28] <ixxvil> i dont know if you helped then or not but the important of kerning and things like that play a ajor role in the work i do now

[19:28] <pmichaud> as I said a few days ago, I'll gladly send you a CLA and pre-addressed-stamped envelope :)

[19:28] <ixxvil> i didnt see it then but 2 yrs since yeah

[19:28] <ixxvil> importance

[19:28] <sorear> how long does the mail generally take?

[19:29] <pmichaud> well, 3-5 days.

[19:29] <sorear> pmichaud: it'll go faster if I use my own printer and stamps

[19:29] <sorear> but thanks for the offer

[19:29] <colomon> sorear++

[19:29] <pmichaud> but we'll grant the commitbit as soon as you let us know "it's mailed"  :)

[19:29] <ixxvil> i remember vaguely you mentionig about my kerning being off and i kinda ignored your comment then

[19:29] <ixxvil> :D

[19:29] <TimToady> ixxvil: well, I learned about kerning from my wife--it's one of those things you start to notice, and then can't ever quit

[19:29] <ixxvil> right

[19:29] <ixxvil> thats all i do now

[19:29] <sorear> pmichaud: ok, I have everything I need from you right now

[19:29] <ixxvil> lettering and tons of type

[19:29] <sorear> keming, eh

[19:29] <ixxvil> keming is part of it

[19:30] <ixxvil> os part of the game!

[19:30] <TimToady> the slides at YAPC::NA talked about Tcl at one point, and that looked pretty awful between the T and the c

[19:30] <moritz> we also trow around lots of types in Perl 6 :-)

[19:30] <pmichaud> sorear: excellent.  just let me know when it's mailed and we'll grant the commitbit :)

[19:30] <ixxvil> what kinda type

[19:30] <ixxvil> i dont do type per se as in i dont design typefaces

[19:30] <ixxvil> i could if its paid though otherwise no way hose

[19:31] <ixxvil> oh well anyways good times

[19:31] *** panchiniak joined
[19:32] <moritz> ixxvil: types, as programmers use them

[19:32] <moritz> r: say Int.^mro

[19:32] <camelia> rakudo b2072f: OUTPUT¬´(Int) (Cool) (Any) (Mu)‚ê§¬ª

[19:32] <ixxvil> you mean mono?

[19:33] <ixxvil> monospace is just ugly heh but you guys need it more than i do

[19:33] <moritz> no, as in "data type"

[19:33] * sorear always thought it was Jos√©

[19:34] <ixxvil> moritz: sorry, out of my jurisdiction

[19:34] <TimToady> that's the gardener's juristiction, hose A and hose B

[19:34] <TimToady> *diction

[19:35] <ixxvil> what does your wife do again?

[19:35] <ixxvil> grapic design?

[19:35] *** REPLeffect joined
[19:35] <TimToady> ixxvil: she's a calligrapher

[19:35] <ixxvil> REALLY?

[19:35] <TimToady> among other things

[19:35] <ixxvil> can i see some work

[19:35] <TimToady> well, she hasn't done much since college...

[19:35] <ixxvil> thats all i do now

[19:35] <[Coke]> TimToady: so your main problem with tcl is the kerning? ;)

[19:35] <ixxvil> but i dont use traditional methods besides on paper

[19:36] <ixxvil> there was an article recently about the calligraphers payscale at the whitehouse

[19:36] *** tomyan joined
[19:36] <ixxvil> it's something like 90k

[19:36] <ixxvil> but pretty darn good work

[19:37] <TimToady> [Coke]: it may have been something else beginning with T, so it's really the T's fault, not Tcl's

[19:38] *** census joined
[19:38] <ixxvil> where is this tcl you're talking about though? on their webpage?

[19:38] *** panchiniak left
[19:38] <ixxvil> Tcl Developer Xchange.... dat X

[19:40] <ixxvil> inconsistency in the weight.. that prolly needs to go but i dont think they care

[19:40] *** tgt joined
[19:42] *** tomyan left
[19:46] <dalek> rakudo-star-daily: 7eb872f | coke++ | log/ (5 files):

[19:46] <dalek> rakudo-star-daily: today (automated commit)

[19:46] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/7eb872f485

[19:46] <[Coke]> anyone want to update the modules for star for the next release?

[19:47] *** panchiniak joined
[19:47] <ixxvil> alright folks nice talking to you

[19:47] <ixxvil> later!

[19:47] *** ixxvil left
[19:48] <masak> oh, right. it's rakudo release week.

[19:49] <masak> heh, I wonder what sucker signed up for this monthly release... :P

[19:49] *** domidumont left
[19:52] <labster> isn't there some sort of online training in the near future, too?

[19:53] *** tgt left
[19:56] <masak> labster: in two days, yes :>

[19:57] <masak> looking forward to it!

[20:00] <lue> hello world o/

[20:00] <sorear> o/

[20:00] <colomon> oh, so it's the day before release day.  no worries, then.

[20:00] *** Guest50214 left
[20:00] * sorear needs to hurry up and break rakudo

[20:01] <colomon> sorear: a grand ambition.  

[20:03] <sorear> once I have my commitbit I can join the "broke the build on release day" club

[20:04] *** ssutch joined
[20:05] <labster> All I ever managed to break was Parrot's GC.

[20:06] <TimToady> All I ever managed to do was break the language...

[20:06] <ssutch> HA

[20:08] <labster> we are the king's horses and king's men in charge of putting camelia back together again.

[20:08] <timotimo> wait a second

[20:08] <TimToady> okay, I waited a second

[20:08] <labster> I'm not sure who the king actually is.  Maybe King Kong.

[20:09] <timotimo> aaw, masak, i won't be able to make it to the workshop :(

[20:09] <masak> timotimo: :(

[20:09] <TimToady> The question is, who's to be master, that's all.

[20:09] <masak> timotimo: please update https://github.com/perl6/mu/wiki/perl6-workshop-june-2013

[20:09] *** kaare_ left
[20:10] <timotimo> already done

[20:10] <masak> TimToady: or, if you're in the Rakudo repository, who's to be nom, that's all.

[20:10] <masak> timotimo++

[20:10] <sorear> andreas koenig?

[20:10] <masak> Simba?

[20:13] <TimToady> http://en.wikipedia.org/wiki/The_King

[20:14] <labster> added myself to the new masakism list

[20:14] <masak> labster++ \o/

[20:14] <masak> we're a smaller group this time around, but that means you'll each be given more attention :)

[20:16] <labster> I know, I might even be able to ask detailed questions this time

[20:17] <masak> looking forward to that :)

[20:17] *** tgt joined
[20:19] <labster> I think I have insufficient hubris as a programmer.  Does anyone care if we return path objects from mkdir(), rename(), symlink(), etc. instead of True?  (Still Failure on failure, obviously.)

[20:23] <TimToady> use case?

[20:23] <labster> "t/spec".path.mkdir.chdir

[20:24] <TimToady> I guess that one is apparent to the reader, but symlink.chdir wouldn't be so clear

[20:24] <labster> perhaps not on those.

[20:25] <labster> I think rename returning the new file would be clear enough.

[20:30] *** zby_home_ left
[20:30] <labster> Symlink takes an argument, but I haven't really determined the exact interface there.  Should it always take its argument as the destination path, or require something like .symlink(from=>"foo") or .symlink(to=>"bar")

[20:32] <ssutch> .symlink(from=>"foo") or .symlink(to=>"bar") both seem to make sense to me

[20:33] <sorear> .rmdir.chdir

[20:33] <TimToady> \o/

[20:33] <TimToady> symlink is not done so often that it needs multiple ways to do it

[20:34] <ssutch> .rm.chdir would just fail, no such path or whatever

[20:34] <TimToady> I'd stick with the POSIXy interface

[20:34] <labster> just the function then, rather than a class interface.

[20:35] <lue> .oO(does &symlink fail on Windows/other systems without the magic of symlinks?)

[20:35] <TimToady> I'd add it to the class only if we can guarantee some greater portability that way

[20:36] <TimToady> otherwise it falls into the category of a foolish consistency

[20:37] <masak> +1 on POSIXy interface.

[20:37] *** ssutch left
[20:37] <benabik> NTFS has symlinks, IIRC

[20:37] <masak> I'd much rather see cute method chaining experiments in user-provided modules.

[20:39] <sorear> now that masak has said it, I agree

[20:39] *** panchiniak left
[20:39] <TimToady> chained mutators are not very P6ish

[20:40] *** tgt left
[20:41] <TimToady> P6 likes to keep its mutators at the statement level most of the time

[20:41] *** ssutch joined
[20:41] <TimToady> expressions are more for FP stuff

[20:42] * TimToady thinks side effects should look like assembly language :)

[20:43] <labster> Well, that sounds good.  I already have a module where I put all of my crazy ideas.

[20:43] <TimToady> assignment being the notable exception...

[20:43] *** tomyan joined
[20:44] <TimToady> of course, someone coming from other backgrounds such as Ruby may have different expectations...

[20:44] <colomon> TimToady: which is exactly why .match should not set $/ 

[20:48] * TimToady wishes .subst had a way of injecting $/ into a closure...

[20:48] * masak too

[20:48] <TimToady> that's really the only reason I'd hold out for setting $/ on the method forms

[20:50] <sorear> > 1 cmp 10

[20:50] <sorear> Increase

[20:50] <sorear> \o/

[20:50] <colomon> \o/

[20:50] *** vk left
[20:50] *** xilo1 joined
[20:51] * colomon is okay with requiring subst users to make it -> $/ { ... }

[20:52] <sorear> still no [1..10]

[20:52] *** xilo1 left
[20:52] <dalek> nqp: 38a8b97 | sorear++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[20:52] <dalek> nqp: Add return value coercion support for jvm

[20:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/38a8b97d79

[20:52] <dalek> nqp: 6ba8f35 | sorear++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[20:52] <dalek> nqp: Add experimental nqp::backtrace for structured access to jvm backtraces

[20:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6ba8f3579b

[20:53] <dylanwh> NTFS symlinks have oddly specific limitations that make me sad

[20:54] <sorear> o/ dylanwh

[20:54] *** grondilu joined
[20:57] *** Juerd left
[20:57] *** tgt joined
[20:57] * lizmat wonders whether TimToady has any units on his mind

[20:58] *** betterworld left
[20:58] <sorear> the java debugger likes to put commas in line numbers.    [4] E940929BF74D90FB0CDF81E1E7A217FDFBD39661.qb_3637 (src/gen/CORE.setting:3,963)  # this really freaks me out, and I can't quite put a finger on why

[20:59] <[Coke]> why it does or why it freaks you out?

[20:59] <sorear> why it bothers me so

[20:59] *** konundra left
[20:59] <dylanwh> fwiw, NTFS supports both hardlinks and symlinks. The limitations are that symlinks have a short path, and only administrator-types can make them. 

[20:59] * lizmat suspects a European background in sorear

[21:00] <lizmat> in Europe, the comma is a decimal point

[21:00] <dylanwh> and you can only have 2**10 links to the same inode.

[21:00] <grondilu> commas are the standard 10^3 separator in English, aren't they?

[21:01] <lizmat> well, before we had computers and the American world view about decimal *points* forced upon us :-)

[21:01] *** betterworld joined
[21:01] <sorear> .oO( line 3_963 )

[21:01] *** Juerd joined
[21:02] <grondilu> maybe you want to install a "perl locale" or something :-)

[21:03] <sorear> multi postfix:<-->(Num:D \a is rw) { # New failure mode:  This is being called on an argument of type Int.  What?  Naturally, nqp::unbox_n is not happy.

[21:04] *** btyler left
[21:05] <lizmat> pmichaud: wrt extra parameter to classify|categorize: that's now moot with these methods being callable on hashes

[21:05] *** btyler joined
[21:07] *** snearch joined
[21:14] <pmichaud> lizmat: (moot)  excellent, I was hoping that would be the answer.  :-)

[21:14] <pmichaud> I like the methods-callable-on-hashes approach.

[21:14] <pmichaud> that feels much more natural than the other ones.

[21:15] *** pmurias joined
[21:15] <pmichaud> (afk again)

[21:23] <dalek> roast: b9eaf06 | (Elizabeth Mattijsen)++ | S32-list/categorize.t:

[21:23] <dalek> roast: Some more categorize test refinements

[21:23] <dalek> roast: review: https://github.com/perl6/roast/commit/b9eaf06c76

[21:28] *** skids left
[21:31] *** spider-mario left
[21:35] <dalek> specs: 70bad12 | (Elizabeth Mattijsen)++ | S32-setting-library/Containers.pod:

[21:35] <dalek> specs: Fix typo

[21:35] <dalek> specs: review: https://github.com/perl6/specs/commit/70bad127c4

[21:41] *** dmol left
[21:42] <dalek> roast: 95ba4f6 | (Elizabeth Mattijsen)++ | S32-list/classify.t:

[21:42] <dalek> roast: Added some more tests when using typed hashes

[21:42] <dalek> roast: review: https://github.com/perl6/roast/commit/95ba4f6cfa

[21:45] *** preflex left
[21:45] <TimToady> nr: say '‚ñÅ' ... '‚ñà'

[21:46] <camelia> rakudo b2072f: OUTPUT¬´(timeout)¬ª

[21:46] <camelia> ..niecza v24-77-g2b14288: OUTPUT¬´‚ñÅ ‚ñÇ ‚ñÉ ‚ñÑ ‚ñÖ ‚ñÜ ‚ñá ‚ñà‚ê§¬ª

[21:46] <TimToady> rakudobug

[21:46] * lizmat submits rakudobug

[21:46] *** tomyan left
[21:46] *** Chillance left
[21:47] *** preflex joined
[21:47] *** ChanServ sets mode: +v preflex

[21:47] <dalek> roast: 1b82ada | (Elizabeth Mattijsen)++ | S32-list/classify.t:

[21:47] <dalek> roast: Some additional tests for classify, like categorize

[21:47] <dalek> roast: review: https://github.com/perl6/roast/commit/1b82ada84e

[21:48] <masak> lizmat++

[21:49] *** PacoAir left
[21:52] *** tomyan joined
[21:56] *** tomyan left
[21:57] * lizmat is going to test the state of her own bed&

[22:01] *** pochi left
[22:01] *** pochi joined
[22:05] <sorear> ranges work in the repl, because the repl is installing an exception handler that appears to resume everything.

[22:09] *** bluescreen100 joined
[22:13] *** bluescreen10 left
[22:18] *** benabik left
[22:18] *** benabik joined
[22:20] *** bluescreen100 left
[22:20] <sorear> oh, it's not a MMD problem, rakudo-jvm just doesn't like nqp::sub_n(foo, 1) very much

[22:22] <sorear> rakudo: nqp::unbox_n(1)

[22:22] <camelia> rakudo b2072f: OUTPUT¬´This type cannot unbox to a native number‚ê§  in block  at /tmp/Njc1WlNvN9:1‚ê§‚ê§¬ª

[22:22] <sorear> rakudo: nqp::sub_n(1,2)

[22:22] <camelia> rakudo b2072f:  ( no output )

[22:23] <timotimo> r: '‚ñÅ'.succ.say

[22:23] <camelia> rakudo b2072f: OUTPUT¬´‚ñÅ‚ê§¬ª

[22:23] <timotimo> r: '‚ñÅ'.succ.succ.say

[22:23] <camelia> rakudo b2072f: OUTPUT¬´‚ñÅ‚ê§¬ª

[22:23] <timotimo> r: '‚ñÅ'.succ.succ.succ.say

[22:23] <camelia> rakudo b2072f: OUTPUT¬´‚ñÅ‚ê§¬ª

[22:24] *** rindolf left
[22:24] <timotimo> ah, that's how it works

[22:25] <sorear> should that work?  should I replace 1 with 1e0 in the setting, modify nqp::sub_n to coerce, or something else?

[22:25] <sorear> could also perhaps use Want on num literals

[22:25] <TimToady> http://rosettacode.org/wiki/Sparkline_in_unicode is the page in question, btw

[22:25] <TimToady> timotimo: it doesn't work by calling .succ on that

[22:26] <timotimo> the range reify method uses .succ

[22:26] <timotimo> succ looks into RANGEPOS to find out if it's something it should be counting up. if it isn't, it no-ops.

[22:27] <timotimo> should i make it to work just like niecza if it's not part of a carry-able range thingie?

[22:27] <TimToady> see S03:2024

[22:28] <TimToady> it's not the range operation, it's the sequence operator, to begin with

[22:28] <timotimo> oh!

[22:28] <timotimo> derp :)

[22:28] <TimToady> and the sequence operator treats single codepoints specially

[22:28] <TimToady> (or it's supposed to...)

[22:37] <sorear> > [1..10]

[22:37] <sorear> 1 2 3 4 5 6 7 8 9 10

[22:37] <sorear> >

[22:37] *** shinobicl left
[22:42] * TimToady -> bed &

[22:43] <sorear> rakudo: nqp::print(nqp::getstderr(), "moo")

[22:43] <camelia> rakudo b2072f: OUTPUT¬´===SORRY!===‚ê§Error while compiling block  (source text: "nqp::print(nqp::getstderr(), \"moo\")"): Error while compiling op call: Error while compiling block : Error while compiling op print: Operation 'print' requires 1 operands, but got 2‚ê§¬ª

[22:43] <sorear> rakudo: nqp::printfh(nqp::getstderr(), "moo")

[22:43] <camelia> rakudo b2072f: OUTPUT¬´moo¬ª

[22:48] *** census left
[22:57] *** skids joined
[22:59] <dalek> nqp: aefda07 | sorear++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[22:59] <dalek> nqp: Allow nqp::join to work on native str arrays on JVM

[22:59] <dalek> nqp: review: https://github.com/perl6/nqp/commit/aefda07e8b

[23:01] <sorear> backtrace printer is now working.  ish./

[23:01] *** abnorman left
[23:01] <sorear> working well enough to not eat the error messages

[23:01] <sorear> although it turns everything into a ===SORRY!=== and eats the backtraces

[23:01] *** abnorman joined
[23:02] <masak> sounds wonderful :P

[23:02] <benabik> ===SORRY!===  I made you an error, but I ate it.

[23:04] <sorear> sorear/rakudo/nom if anyone is interested.  will have CLA in the mail in time for tomorrow's pickup

[23:07] * timotimo suffers from a very typical computer science and programming ailment:

[23:07] <timotimo> too many layers of indigestion :(

[23:07] <masak> lasagna for dinner, eh? :)

[23:10] <timotimo> that would have been lovely; except perhaps for the fact that it was between 30 and 35 degC out today

[23:10] <timotimo> i think i shouldn't have eaten mostly ice creat today

[23:17] <timotimo> is anybody working on the "one codepoint sequence" thing right now or should i perhaps give it an actual shot?

[23:20] *** BenGoldberg left
[23:24] *** pmurias left
[23:25] *** Ayiko left
[23:25] <timotimo> oh, there's actually succ-with-carry semantics for multi-character strings

[23:26] *** btyler left
[23:30] <masak> yes, but less than there used to be, IIRC.

[23:30] <timotimo> oh, i think i have misread actually

[23:31] *** konundra joined
[23:31] <timotimo> is my new & revised reading that it'll only ever happen if both end points are single-codepoint-strings correct?

[23:35] <masak> rn: say "w".."ba"

[23:35] <camelia> rakudo b2072f, niecza v24-77-g2b14288: OUTPUT¬´"w".."ba"‚ê§¬ª

[23:35] <masak> rn: .say for "w".."ba"

[23:35] <camelia> rakudo b2072f, niecza v24-77-g2b14288:  ( no output )

[23:36] <masak> maybe :)

[23:36] <masak> rn: .say for "w".."ac"

[23:36] <camelia> rakudo b2072f, niecza v24-77-g2b14288:  ( no output )

[23:36] *** jlaire left
[23:37] <timotimo> don't you want ... instead

[23:37] <timotimo> ?

[23:37] <timotimo> rn: say "w"..."ba"

[23:37] <camelia> rakudo b2072f: OUTPUT¬´Decrement out of range‚ê§  in method Str at src/gen/CORE.setting:10160‚ê§  in method Str at src/gen/CORE.setting:876‚ê§  in method Stringy at src/gen/CORE.setting:885‚ê§  in sub infix:<eq> at src/gen/CORE.setting:1288‚ê§  in sub infix:<eq> at src/gen/CORE.setting:1286‚ê§  in m‚Ä¶

[23:37] <camelia> ..niecza v24-77-g2b14288: OUTPUT¬´Unhandled exception: Magical string decrement underflowed‚ê§  at <unknown> line 0 (KERNEL Str.pred @ 1) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 3340 (ANON @ 4) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 3374 (ANON @ 3) ‚ê§  at /home/p6eval/niecza/‚Ä¶

[23:37] <timotimo> hehe.

[23:37] *** jlaire joined
[23:39] *** snearch left
[23:41] <pmichaud> .u ‚ñÅ

[23:41] <yoleaux> U+2581 LOWER ONE EIGHTH BLOCK [So] (‚ñÅ)

[23:41] <pmichaud> .u ‚ñà

[23:41] <yoleaux> U+2588 FULL BLOCK [So] (‚ñà)

[23:42] <lue> r: say NaN.Int; say Inf.Int;

[23:42] <camelia> rakudo b2072f: OUTPUT¬´0‚ê§Cannot coerce Inf to an Int‚ê§  in method gist at src/gen/CORE.setting:10161‚ê§  in method gist at src/gen/CORE.setting:893‚ê§  in sub say at src/gen/CORE.setting:11047‚ê§  in block  at /tmp/l04qPlvnZA:1‚ê§‚ê§¬ª

[23:42] <pmichaud> say '‚ñÅ' cmp '‚ñà'

[23:42] <pmichaud> r: say '‚ñÅ' cmp '‚ñà'

[23:42] <camelia> rakudo b2072f: OUTPUT¬´Increase‚ê§¬ª

[23:42] *** nitestryker left
[23:42] <pmichaud> r: say '‚ñÅ' .. '‚ñà'

[23:42] <camelia> rakudo b2072f: OUTPUT¬´"‚ñÅ".."‚ñà"‚ê§¬ª

[23:42] <pmichaud> r: say ('‚ñÅ' .. '‚ñà').list

[23:43] <camelia> rakudo b2072f: OUTPUT¬´(timeout)¬ª

[23:43] <pmichaud> r: say ('‚ñÅ' ... *).[^5]

[23:43] <camelia> rakudo b2072f: OUTPUT¬´‚ñÅ ‚ñÅ ‚ñÅ ‚ñÅ ‚ñÅ‚ê§¬ª

[23:43] <pmichaud> r: say ('‚ñÅ'.succ)

[23:43] <camelia> rakudo b2072f: OUTPUT¬´‚ñÅ‚ê§¬ª

[23:44] <pmichaud> r: say ('‚ñÅ'.succ).ord

[23:44] <camelia> rakudo b2072f: OUTPUT¬´9601‚ê§¬ª

[23:44] <pmichaud> r: say '‚ñÅ'.ord

[23:44] <camelia> rakudo b2072f: OUTPUT¬´9601‚ê§¬ª

[23:44] <pmichaud> say "\x65".succ

[23:44] <pmichaud> r: say "\x65".succ

[23:44] <camelia> rakudo b2072f: OUTPUT¬´f‚ê§¬ª

[23:45] <pmichaud> r: say "\x2581".succ

[23:45] <camelia> rakudo b2072f: OUTPUT¬´‚ñÅ‚ê§¬ª

[23:45] <pmichaud> weird.

[23:45] <rjbs> r: say (1 cmp 2).^WHAT

[23:45] <camelia> rakudo b2072f: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Cannot use .^ on a non-identifier method call‚ê§at /tmp/z_j6wJyruS:1‚ê§------> [32msay (1 cmp 2).^WHAT[33m‚èè[31m<EOL>[0m‚ê§    expecting any of:‚ê§        method arguments‚ê§¬ª

[23:45] <rjbs> r: say (1 cmp 2).WHAT

[23:45] <camelia> rakudo b2072f: OUTPUT¬´(Order)‚ê§¬ª

[23:45] <rjbs> Huh.  I had not yet seen that type.

[23:45] <pmichaud> Order is an enumeration.... Increase, Same, Decrease

[23:45] <rjbs> Cool.

[23:45] <rjbs> <pmichaud> Yes, Order is Cool.

[23:46] <pmichaud> r: say Order ~~ Cool

[23:46] <camelia> rakudo b2072f: OUTPUT¬´True‚ê§¬ª

[23:46] <rjbs> :)

[23:47] <rjbs> Yow, my rakudo will no longer run.

[23:47] * rjbs builds a new one!

[23:47] *** BenGoldberg joined
[23:50] <lue> I'm suddenly <stunned perplexed>.all by the fact that !Num.ACCEPTS(Int) . That feels wrong (coming from the point of view of math).

[23:50] * lue guesses someone will show him why that's The Right Way‚Ñ¢ for programming

[23:51] <sorear> lue: Num reflects an implementation, not a value set

[23:52] <sorear> when I say my Num $x I'm saying "$x points to a number stored as floating-point"

[23:52] <pmichaud> r: say so Numeric.ACCEPTS(Int)

[23:52] <camelia> rakudo b2072f: OUTPUT¬´True‚ê§¬ª

[23:52] <sorear> it can't point to a number stored as integer, or decimal string

[23:53] <sorear> more practically, the multidispatch optimizer needs a representation guarantee in order to avoid coercion checks

[23:53] <timotimo> i won't finish the sequence thing today.

[23:53] <lue> OK. I think I conflated Num and Numeric then.

