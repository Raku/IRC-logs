[00:02] *** raiph joined
[00:02] <lizmat> perlpilot might know

[00:02] <lizmat> hope he'll be able to fix...

[00:02] <lizmat> catching some sleep now

[00:02] <jnthn> Same

[00:02] <jnthn> 'night

[00:02] <lizmat> so gnight, #perl6!

[00:04] *** colomon left
[00:04] *** stevan_ left
[00:05] *** FROGGS left
[00:12] *** tgt left
[00:17] *** FROGGS joined
[00:26] *** dayangkun joined
[00:29] *** zamolxes left
[00:33] *** zamolxes joined
[00:33] *** rurban1 joined
[00:35] *** Suhosin left
[00:35] *** colomon joined
[00:36] *** rurban2 joined
[00:36] *** rurban2 left
[00:37] <[Coke]> ugh. niecza's bootstrap requires both versions of Order enum to work.

[00:37] *** rurban1 left
[00:37] <[Coke]> ... but this hack might work.

[00:38] <colomon> errr…. huh?

[00:38] <colomon> what are you trying to do?

[00:40] <[Coke]> track the spec change on Order::

[00:40] <[Coke]> I was just fudging a ton of tests, but realized I might be able to fix the root.

[00:40] <TimToady> you can have dups in a definition

[00:40] <TimToady> (on the number mappings)

[00:41] <TimToady> or you can maybe declare constants

[00:41] <colomon> [Coke]: it may mean you need to fix the bootstrap.

[00:41] <TimToady> constant Increase of Order = Order::Less; or so

[00:41] <colomon> or rather, the bootstrap may need to be fixed.  I've done it once.

[00:46] <[Coke]> colomon: well, I'll see if I can get it working, then you can bootstrap, and then we can pull out the deprecated versions.

[00:46] <[Coke]> I'll leave that to you, though.

[00:46] <colomon> okay

[00:47] <colomon> might not be able to get it done tonight, I've got to run to a Christmas music rehearsal as soon as my wife gets off work.

[00:50] <colomon> I just moved the Advent calendar TOC to where it belongs.

[00:51] *** ivanshmakov left
[00:52] <lue> r: say 3 cmp 5;

[00:53] *** stevan_ joined
[00:53] <camelia> rakudo-jvm 262e60: OUTPUT«(timeout)»

[00:53] <camelia> ..rakudo-parrot 262e60: OUTPUT«Less␤»

[00:53] <[Coke]> eh. if the non-bootstrapped version works, there's no rush to update the bootstrap at all.

[00:53] <lue> p: say +(3 cmp 5;)

[00:53] <camelia> rakudo-parrot 262e60: OUTPUT«-1␤»

[00:56] <[Coke]> colomon: doesn't matter, my simple fix broke more than it fixed.

[00:58] <colomon> want me to take a look at it from scratch?

[00:59] <[Coke]> it'd unbust a lot of niecza failurs if you get it working.

[00:59] <[Coke]> -my enum Order (:Increase(-1), :Same(0), :Decrease(1));

[00:59] <[Coke]> +my enum Order (:Less(-1), :Same(0), :More(1), :Increase(-1), :Decrease(1));

[00:59] <[Coke]> that fails. ;)

[01:01] <colomon> are Increase and Decrease still in the standard, or was that just your attempt at backward compat?

[01:02] <TimToady> that's just backcompat

[01:04] <TimToady> n: my enum Order (:Less(-1), :Same(0), :More(1), :Increase(-1), :Decrease(1)); say Order(-1)

[01:04] <camelia> niecza v24-98-g473bd20: OUTPUT«Less␤»

[01:04] <TimToady> how does it fail?

[01:04] <TimToady> n: my enum Order (:Less(-1), :Same(0), :More(1), :Increase(-1), :Decrease(1)); say 3 cmp 4

[01:04] <camelia> niecza v24-98-g473bd20: OUTPUT«Increase␤»

[01:04] <TimToady> ah, I see

[01:05] *** zakharyas left
[01:09] <[Coke]> n: my enum Order (:Increase(-1), :Same(0), :Decrease(1), :Less(-1), :More(1)); say 3 cmp 4

[01:09] <camelia> niecza v24-98-g473bd20: OUTPUT«Increase␤»

[01:09] <colomon> seemed to work for me on the first try?  I didn't do anything fancy.

[01:10] <colomon> what spectests should I look to?

[01:11] <colomon> t/spec/S03-operators/cmp.t

[01:12] <colomon> spectesting

[01:13] *** raiph left
[01:13] *** mstwu00 joined
[01:23] * colomon hasn't tried bootstrapping, but seems to have everything working.  he is suspicious this is too easy.

[01:25] *** arcterus joined
[01:26] *** tipdbmp left
[01:26] *** tipdbmp joined
[01:34] *** FROGGS left
[01:36] <colomon> [Coke]: I show make spectest failing tons of tests.  Like. more than have Order in them.  Is this normal?

[01:37] *** rurban1 joined
[01:41] <dalek> niecza: 74c1bda | (Solomon Foster)++ | lib/CORE.setting:

[01:41] <dalek> niecza: Bring Order up to current spec.

[01:41] <dalek> niecza: review: https://github.com/sorear/niecza/commit/74c1bdad10

[01:41] <colomon> not sure if that's really right or not, I'm trying a spectest without it on my Linux box.

[01:42] *** rurban1 left
[01:42] *** raiph joined
[01:42] *** jnap left
[01:56] *** jnap joined
[01:56] *** pmurias left
[02:07] <TimToady> lots of failures, but none of them seem related to Order

[02:08] <TimToady> well, lots of warnings, anyway

[02:08] <timotimo> jnthn++ fulfilled a quest i had on questhub and i received all the energy points for it :P

[02:09] *** araujo left
[02:10] *** araujo joined
[02:10] *** mstwu00 left
[02:12] <TimToady> looks like it failed about 19 files

[02:12] <TimToady> seems about right

[02:25] <timotimo> :o

[02:26] <timotimo> i'd pay 71 euros for a ride to paris

[02:26] <timotimo> but it'd only take 3 hours

[02:27] <timotimo> meh.

[02:53] <TimToady> masak: you might want to reply to the 2nd comment on Day 2, which seems to think that type objects are the only "class objects" in Perl 6

[02:57] *** TimK1 joined
[02:57] *** TimK1 left
[03:02] *** tmetro joined
[03:11] <dalek> niecza: c4668c6 | (Solomon Foster)++ | t/spectest.data:

[03:11] <dalek> niecza: Remove keybag and keyset tests.

[03:11] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c4668c6d0d

[03:14] *** Vlavv` left
[03:17] *** hypolin joined
[03:17] *** hypolin left
[03:22] <dalek> niecza: e07311c | (Solomon Foster)++ | lib/CORE.setting:

[03:22] <dalek> niecza: KeySet => SetHash, KeyBag => BagHash.

[03:22] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e07311cd3a

[03:22] <dalek> niecza: 692b4e4 | (Solomon Foster)++ | t/spectest.data:

[03:22] <dalek> niecza: Turn on S02-types/sethash.t.

[03:22] <dalek> niecza: review: https://github.com/sorear/niecza/commit/692b4e430f

[03:29] *** Vlavv` joined
[03:29] <lue> rn: say ⟅1, 2, 3, 2, 2, 1⟆.WHAT # :P

[03:29] <camelia> rakudo-parrot 262e60: OUTPUT«===SORRY!=== Error while compiling /tmp/pw5eX61ia8␤Two terms in a row␤at /tmp/pw5eX61ia8:1␤------> say ⏏⟅1, 2, 3, 2, 2, 1⟆.WHAT # :P␤    expecting any of:␤        argument list␤        prefix or term…»

[03:29] <camelia> ..niecza v24-102-g74c1bda: OUTPUT«(timeout)[auto-compiling setting]␤»

[03:29] <camelia> ..rakudo-jvm 262e60: OUTPUT«===SORRY!=== Error while compiling /tmp/uiqtKOp_me␤Two terms in a row␤at /tmp/uiqtKOp_me:1␤------> say ⏏⟅1, 2, 3, 2, 2, 1⟆.WHAT # :P␤    expecting any of:␤        argument list␤        prefix or term␤…»

[03:31] *** ssutch left
[03:32] *** ssutch joined
[03:42] *** TimK1 joined
[03:44] <TimK1> Does "use ModuleName <foo>" work on the latest Rakudo release? Same question regarding "need ModuleName; ModuleName::foo"? Neither one seems to be cooperating with me at present.

[03:45] *** jnap left
[04:03] <raydiak> TimK1: I haven't tried the former personally, but afaik the latter should work as long as foo is scoped with "our"...eg "our sub foo { ... }"

[04:07] *** V_S_C joined
[04:08] <colomon> r: say  BagHash.new("a", "b", "b").pickpairs.perl

[04:09] <camelia> rakudo-parrot 262e60, rakudo-jvm 262e60: OUTPUT«("a" => 1,).list␤»

[04:10] <V_S_C> b'bye!

[04:10] *** V_S_C left
[04:16] *** jnap joined
[04:21] *** jnap left
[04:28] *** preflex left
[04:28] *** preflex_ joined
[04:28] *** ChanServ sets mode: +v preflex_

[04:29] *** preflex_ is now known as preflex

[04:37] <diakopter> EVARTHINGZ A CURSOR

[04:38] <TimK1> raydiak: Thanks for the response. The sub in question was modified with "is export"… I assumed that implied "our," because it's exported by default; but maybe I should do some more research.

[04:44] <raiph> http://www.youtube.com/watch?v=a-RAltgH8tw&feature=youtu.be&t=11m1s # "when I was a fundamentalist functional programmer ... you're using mutable state, you should not do that, use Haskell or a real language ... now ... I write code for a living, I kinda like imperative programming -- you can get stuff done!"

[05:18] *** rurban1 joined
[05:23] *** zakharyas joined
[05:26] <TimK1> So… The two modules I've been playing with each have subs declared "sub foo is export," which seems to be the standard form. But this means they've exported subs that are limited to lexical scope. Sounds like the considered best practice *ought* to be "our sub foo is export" so that a user can always "need Module; Module::foo," rather than cluttering up his namespace.

[05:33] <lue> TimK1: have you tried "sub foo is export" with "use Module" ?

[05:34] *** SamuraiJack_ joined
[05:39] <PerlJam> TimK1: unless "namespace cluttering" is considered a feature :)

[05:43] *** MikeFair left
[05:43] <PerlJam> TimK1: also, the user can "use" a module into a namespace of his choosing, thus negating the "clutter" aspect if desired.

[05:43] *** MikeFair joined
[05:46] <TimK1> lue: That works fine, but I was looking for a way to do the equivalent of P5: "use Module (); Module::foo."

[05:47] <TimK1> PerlJam: I should try that. Might be a solution to my dilemma.

[05:48] * TimK1 Turning in now. Late here.

[05:57] *** ssutch left
[06:01] <moritz> \o

[06:05] *** rurban1 left
[06:13] *** rurban1 joined
[06:16] *** zakharyas left
[06:17] *** raydiak left
[06:18] *** raydiak joined
[06:18] *** rurban1 left
[06:19] <raydiak> oh cool, my cursor keys work again...remind me not to get too adventurous with .tmux.conf :P

[06:34] *** darutoko joined
[06:41] *** TimK1 left
[06:41] *** TimK1 joined
[06:47] <moritz> raydiak: don't get adventurous with .tmux.conf :-)

[06:48] *** RolentoLCH joined
[06:49] <raydiak> moritz: now you tell me...next time remind me a couple hours ago :)

[06:53] <raiph> http://www.youtube.com/watch?v=TS1lpKBMkgg # for anyone interested in scala: make sure you know about this talk

[06:55] *** dakkar joined
[07:00] *** kaleem joined
[07:19] *** jnap joined
[07:23] *** jnap left
[07:26] *** denisboyun joined
[07:29] *** Rotwang joined
[07:29] *** Rotwang left
[07:43] *** cooper left
[07:44] *** arcterus left
[07:46] *** dwoldrich joined
[07:51] *** rindolf joined
[07:53] *** cooper joined
[07:53] *** cooper left
[07:53] *** cooper joined
[07:53] <raydiak> how can I find out what the underlying representation is of a particular class or object?

[07:56] *** denisboyun left
[08:00] *** ssutch joined
[08:16] *** FROGGS joined
[08:18] <moritz> raydiak: I don't think that's introspectable yet

[08:21] <nwc10> jnthn: current nqp-indy-whatsit breaks Rakudo setting compuilation after Stage ast:

[08:21] <nwc10> java.lang.NullPointerException  in name (gen/jvm/stage2/QASTNode.nqp:375)  in  (src/Perl6/Optimizer.nqp:856)

[08:22] <nwc10> oh, naughty terminal.

[08:29] *** dmol joined
[08:30] <raydiak> well...where can I read about the specific separate representations and what they do?  is Array a P6Array?  or does such a thing even exist?  maybe it's a P6Opaque like a lot of other things, but then...where does it store the values?  and why do I sometimes see Opaque capitalized and othertimes not?  is there some big swath of a synopsis I skipped over somewhere?

[08:32] <moritz> raydiak: the spec is pretty light on representations, since most of it is implementation detail

[08:32] <moritz> raydiak: Array's repr is P6Opaque, as far as I can tell

[08:34] <raydiak> moritz: I suppose it's a great thing that I don't really have to care, at all, which is how I'll spin it for the advent post :)

[08:34] <moritz> there aren't many core types that have a repr different from P6Opaque

[08:35] <moritz> mostly the native types, and the 'compact' array types like Blob/Buf/utf8

[08:36] <moritz> if you do a   git grep 'is repr' in rakudo, you'll see what I mean

[08:37] <raydiak> ah, I see...so it has to do with what's going on inside the VM, which most P6 programmers shouldn't have to worry about

[08:37] <moritz> yes

[08:37] <moritz> there's a notable exception though

[08:37] <moritz> nativecall

[08:38] <raydiak> and that is what I would use if I wanted to call out to C libs or somesuch?

[08:38] <moritz> yes

[08:38] <moritz> for example class Point is repr('CStruct') {

[08:38] <moritz> has num64 $.x; has num64 $.y;

[08:38] <moritz> }

[08:39] <moritz> that will correspond to a C struct with two 'double' members

[08:39] <moritz> and you can pass that directly to an 'is native' function that expects such a struct, with no copying of the contents going on

[08:39] <moritz> see https://github.com/jnthn/zavolaj (scroll down to 'Structs' in the readme, for example)

[08:40] <raydiak> it all sounds very...fast

[08:40] <moritz> well, that's the goal

[08:41] <moritz> the whole point behind reprs is that sometimes, for a particular use case (optimization, or integration with other programs) you want to store your objects in a different format than usual

[08:41] <moritz> but that shouldn't change the object's API

[08:42] <moritz> and since the spec is mostly about API, there's not much about reprs there

[08:42] <raydiak> ahhh...well that explains part of my initial confusion, then...I was wondering about details which are intentionally tucked away out of sight

[08:44] *** [particle]1 joined
[08:44] <raydiak> love the concept, though...being able to work with native types as if they were (mostly) normal P6 data

[08:46] *** [particle] left
[08:47] <raydiak> thanks moritz++, for de-confusing me yet again

[08:47] <FROGGS> do we need the method new in class Orthotope here http://rosettacode.org/wiki/K-d_tree#Perl_6 ?

[08:48] <moritz> well, you can remove it, and change the calls to .new to use named params

[08:48] <FROGGS> k, that is what I thought

[08:49] *** xenoterracide joined
[08:49] *** [particle] joined
[08:50] *** [particle]1 left
[08:52] <jnthn> nwc10: You need the opts branch of Rakudo also.

[08:52] <jnthn> p: say Array.REPR

[08:53] <camelia> rakudo-parrot 262e60: OUTPUT«P6opaque␤»

[08:53] <moritz> ok, I was wrong about the introspection part :-)

[08:53] <moritz> jnthn++

[08:53] <nwc10> aha

[08:53] <moritz> r: say Int.REPR

[08:53] <camelia> rakudo-parrot 262e60, rakudo-jvm 262e60: OUTPUT«P6opaque␤»

[08:53] <moritz> p: say uint32.REPR

[08:53] <raydiak> thanks jnthn++ :)

[08:53] <camelia> rakudo-parrot 262e60: OUTPUT«P6int␤»

[08:53] <moritz> p: say utf8.REPR

[08:53] <camelia> rakudo-parrot 262e60: OUTPUT«VMArray␤»

[08:54] <JimmyZ> p: say Mu.REPR

[08:54] <camelia> rakudo-parrot 262e60: OUTPUT«P6opaque␤»

[09:03] <raydiak> p: say $*OUT.REPR

[09:03] <camelia> rakudo-parrot 262e60: OUTPUT«P6opaque␤»

[09:04] *** preflex left
[09:05] <raydiak> p: say Hash.REPR

[09:05] <camelia> rakudo-parrot 262e60: OUTPUT«P6opaque␤»

[09:05] <nwc10> jnthn: works on "my" machine.

[09:07] <raydiak> so, when S12 says "Other possibilities are P6hash, P5hash, P5array, PyDict, Cstruct, etc.", those are all strictly theoretical at this point...

[09:08] *** preflex joined
[09:08] *** ChanServ sets mode: +v preflex

[09:08] <jnthn> Well, CStruct exists :)

[09:08] <jnthn> Note that Hash is a P6opaque that inside of it contains a lower-level VMHash

[09:09] <jnthn> Most of the built-in types are P6opaque as you're meant to be able to mix in to them.

[09:09] <raydiak> but it's opaque!  I'm not supposed to know what's inside of it!  :)

[09:09] <jnthn> Right, and you typically don't :P

[09:11] <raydiak> that is interesting to know, though...something tells me that I may end up poking at internals (much) further in the future

[09:11] <raydiak> what's in an array?  is there a VMArray?

[09:11] <FROGGS> yes, there is

[09:12] <jnthn> Well, it's a bit more involved than that due to laziness.

[09:12] <jnthn> Tehre *is* one for the reified bit, but then there's also an unreified bit too

[09:12] <raydiak> oh, I didn't think of that

[09:12] <FROGGS> hmmm, I thought this will be generated every hour? http://feather.perl6.nl:3000/projects.json

[09:13] <FROGGS> moritz: is it possible that a job isnt running since the last feather reboot?

[09:15] * JimmyZ wonders what indy branch is about

[09:16] <FROGGS> invoke dynamic

[09:16] <FROGGS> jnthn: gah!! :P

[09:16] <JimmyZ> JVM 

[09:16] <moritz> FROGGS: I thought it's dynamically generated

[09:16] <moritz> FROGGS: ask tadzik :-)

[09:17] <FROGGS> tadzik: PING!! :D

[09:17] <tadzik> :o

[09:17] <FROGGS> tadzik: how is http://feather.perl6.nl:3000/projects.json generated?

[09:17] <tadzik> hourly

[09:17] <FROGGS> aha!

[09:17] <FROGGS> a cronjob?

[09:17] <tadzik> yep

[09:17] <FROGGS> aha!

[09:17] <tadzik> I wonder if it's running :>

[09:18] <FROGGS> don't seem like

[09:18] <tadzik> 0 * * * * perl /home/tjs/modules/updatelist.pl 

[09:18] <FROGGS> I miss a module I added like 12 hours ago

[09:19] <FROGGS> umm

[09:19] <FROGGS> I am a prat

[09:20] <moritz> does it appear on modules.perl6.org?

[09:20] <moritz> if not, something might be wrong with the META.info

[09:20] <FROGGS> moritz: I borken the META.info

[09:20] <FROGGS> borked*

[09:20] <moritz> we really need a validator/linter for that

[09:20] <FROGGS> I hope it is valid now...

[09:22] <DrEeevil> mmmh, bugs ...

[09:22] <FROGGS> moritz: no, it is not on modules.perl6.org either, but I guess it will show up 

[09:22] <DrEeevil> I presume it's not desired that nqp only installs one backend after building multiple? 

[09:23] <FROGGS> no, `make install` should install all configured/built backends

[09:23] <DrEeevil> riiight

[09:23] <DrEeevil> --backends=parrot,jvm only installs nqp-p

[09:23] <DrEeevil> using 2013.11 release tarball

[09:26] <moritz> DrEeevil: uhm. Did it build perl6-j ?

[09:26] <DrEeevil> moritz: yes, it built lots of java stuff

[09:26] <DrEeevil> moritz: just trying to isolate --backend=java to see what gets installed then

[09:26] <moritz> DrEeevil: that's very weird, because it uses the installed nqp-j to build perl6-j

[09:27] <DrEeevil> ah, f'd up path

[09:27] <DrEeevil> doesn't honour DESTDIR

[09:27] <DrEeevil> this will be fun to debug!

[09:28] <moritz> it runs $(PERL) tools/build/install-jvm-runner.pl "$(DESTDIR)" $(PREFIX)

[09:28] <moritz> (nqp's j-install, that is)

[09:29] <DrEeevil> right. I wonder why that diverges from nqp-p

[09:29] <DrEeevil> (and I bet moarvm will be even more packaging fun :) )

[09:29] <moritz> because nqp-p has the paths baked in

[09:39] *** xinming left
[09:40] *** denisboyun joined
[09:41] *** RolentoLCH left
[09:42] *** xinming joined
[09:44] *** ivanshmakov joined
[09:52] <raydiak> okay, have a couple paragraphs started for my advent post, should finish it off tomorrow; then work like a madman to get Pray ready in time for a later post...but for now, bed :)

[09:52] <raydiak> g'night, #perl6 \o

[09:52] <moritz> good night

[09:53] *** denisboyun left
[09:53] <DrEeevil> Welcome to MoarVM!

[09:53] <DrEeevil> Updating submodules .................................... FAIL

[09:53] <DrEeevil>     git error: fatal: Not a git repository (or any of the parent directories): .git

[09:53] <DrEeevil> oh come on

[09:53] *** dwoldrich left
[09:53] <FROGGS> :(

[09:53] <DrEeevil> f'ing github craperony

[09:54] <DrEeevil> their tarballs are broken, known issue for over a year now

[09:54] * DrEeevil just cooks new tarballs then

[10:03] *** kivutar joined
[10:03] <moritz> any volunteers for the Saturday advent slot?

[10:04] *** segomos left
[10:04] * moritz takes a looka tht the usual suspects, and correlates with the number of claimed slots

[10:04] *** dmol left
[10:04] *** segomos joined
[10:05] <moritz> PerlJam!

[10:05] <frettled> Well volunteered!

[10:06] *** dmol joined
[10:07] <moritz> frettled!

[10:07] *** fhelmberger joined
[10:07] <moritz> also well volunteered!

[10:07] <masak> TimToady: http://perl6advent.wordpress.com/2013/12/02/day-02-the-humble-type-object/#comment-3335

[10:07] <moritz> arnsholt: want to write something for the advent calendar, maybe?

[10:08] <masak> r: class is { method foo { say "can call a class 'is'!" } }; is.new.foo

[10:08] <camelia> rakudo-parrot 262e60, rakudo-jvm 262e60: OUTPUT«can call a class 'is'!␤»

[10:08] <masak> \o/

[10:08] <masak> r: class is is Array { method foo { say "can call a class 'is'!" } }; is.new.foo

[10:09] <camelia> rakudo-parrot 262e60, rakudo-jvm 262e60: OUTPUT«can call a class 'is'!␤»

[10:09] <masak> wow, frettled and PerlJam are stepping forward? that's awfully nice of them.

[10:10] <moritz> I am stepping them forward :-)

[10:11] <masak> yes. the "volunteer" as a v.tr. :)

[10:12] *** hummeleB1 joined
[10:14] *** preflex_ joined
[10:14] *** ChanServ sets mode: +v preflex_

[10:14] *** preflex left
[10:15] *** preflex_ is now known as preflex

[10:16] *** SamuraiJack_ left
[10:18] *** SevenWolf left
[10:24] *** raiph left
[10:33] <FROGGS> tadzik / moritz: JSON::Pretty is now in projects.json! so it is all right :o)

[10:33] <moritz> \o/

[10:33] <moritz> but... is it pretty? :-)

[10:33] <tadzik> (:

[10:33] <FROGGS> it is :o)

[10:33] <moritz> is it web scale? :-)

[10:34] <frettled> masak: aw, shucks ;)

[10:34] <frettled> Regretfully, there's not enough time for that :(

[10:37] <hoelzro> morning #perl6!

[10:37] *** filly joined
[10:38] <FROGGS> ho hoelzro 

[10:39] <tadzik> ain't nobody got time for that!

[10:40] *** xenoterracide left
[10:40] <hoelzro> [...] is a non-capturing group, right?

[10:40] <tadzik> yes

[10:40] <hoelzro> so if I have [ ... <postfixish> ], does $<postfixish> exist?

[10:41] <tadzik> I think so

[10:41] <moritz> yes

[10:42] <hoelzro> mkay

[10:42] <tadzik> you can do it, it's all up to you mmmkaay

[10:42] * hoelzro is trying to understand why postfixish doesn't exist in the AST dump for 'foo.bar'

[10:44] <masak> hoelzro: yes, it exists.

[10:45] <masak> hoelzro: grouping with [] is invisible to capture groups.

[10:45] <masak> frettled: aww. that's leaving a lot of volunteering to PerlJam, you know :P

[10:45] <hoelzro> I see

[10:51] <frettled> masak: yeah, I know, but PerlJam is more than up to the task.  I'm sure he can jam two calendar entries in there!

[10:54] <masak> :)

[10:55] *** kivutar left
[10:56] *** kst` joined
[10:56] *** kst left
[10:56] *** Alina-malina left
[10:57] *** Alina-malina joined
[10:59] <hoelzro> that's his jam, after all

[10:59] *** stevan_ left
[11:03] *** vaclavstrachon joined
[11:05] *** dayangkun left
[11:16] <hoelzro> grr

[11:16] <hoelzro> how do I iterate over the key parts of $/ in NQP?

[11:16] <hoelzro> nqp::iterator($/) doesn't cut the mustard

[11:22] *** jnap joined
[11:24] <FROGGS> nqp-p: my $/ := "abc" ~~ / $<word>=\w+ /; my $i := nqp::iterator($/.hash); say(nqp::iterkey_s(nqp::shift($i)))

[11:24] <camelia> nqp-parrot: OUTPUT«word␤»

[11:24] <FROGGS> nqp-p: my $/ := "abc" ~~ / $<word>=\w+ /; my $i := nqp::iterator($/.hash); say(nqp::iterval(nqp::shift($i)))

[11:24] <camelia> nqp-parrot: OUTPUT«abc␤»

[11:24] <FROGGS> nqp-p: my $/ := "abc" ~~ / [$<word>=\w]+ /; my $i := nqp::iterator($/.hash); say(nqp::iterval(nqp::shift($i)))

[11:24] <camelia> nqp-parrot: OUTPUT«3␤»

[11:24] <hoelzro> ah, .hash

[11:24] <hoelzro> thanks FROGGS 

[11:24] <FROGGS> np

[11:25] <FROGGS> $/ keeps a .list and a .hash

[11:27] *** jnap left
[11:28] *** denisboyun joined
[11:36] *** denisboyun left
[11:37] *** denisboyun joined
[11:52] *** dayangkun joined
[11:54] *** atroxaper joined
[11:59] *** denisboyun left
[12:00] *** dayangkun left
[12:08] *** kivutar joined
[12:10] *** Khisanth left
[12:15] <timotimo> ohai

[12:18] *** PZt left
[12:21] *** Khisanth joined
[12:22] *** dayangkun joined
[12:22] <FROGGS> hi timotimo 

[12:26] *** d^_^b joined
[12:26] <timotimo> on indy-args i get NPMCA in get_bool inside QAST :(

[12:31] <FROGGS> like that?

[12:31] <FROGGS> <nwc10> java.lang.NullPointerException  in name (gen/jvm/stage2/QASTNode.nqp:375)  in  (src/Perl6/Optimizer.nqp:856)

[12:32] <nwc10> if so, check out the branch opts

[12:33] <timotimo> opts is a rakudo branch. i cannot build nqp in the first place

[12:33] <nwc10> oh, righto

[12:33] <nwc10> no, not seeing that

[12:33] <timotimo> weird. i may need to realclean or something

[12:34] <FROGGS> or remove install/

[12:36] <timotimo> then i'd have to rebuild parrot and moarvm, too :|

[12:37] <timotimo> seems like that helped? weird.

[12:37] <timotimo> no, it didn't

[12:37] * nwc10 isn't using --gen-whatever

[12:38] * moritz tries too

[12:39] <moritz> nqp built here (manualy checking out the branch, configuring with --prefix=../install --backends=jvm)

[12:43] <timotimo> weird!

[12:45] *** PZt joined
[12:51] *** p5eval joined
[12:58] <timotimo> bisecting this i have to skip lots, because parrot didn't get the callstatic op mapped until very late

[12:59] <lizmat> good *, #perl6!

[12:59] <timotimo> good good, good!

[13:00] <colomon> \o

[13:02] <lizmat> preparing for commute to patch -p1

[13:04] <colomon> patch -p1 is a thing and not just a unix command?

[13:05] <timotimo> it's a perl hackathon in paris

[13:05] <timotimo> starts tomorrow i think

[13:05] <masak> patchathon!

[13:06] <colomon> \o/

[13:06] <moritz> hackapatch

[13:06] <timotimo> patchopatch

[13:07] <masak> the silly. it goes up to 11.

[13:08] <moritz> r: say ~<patchathon hackapatch patchopatch>>>.chars

[13:08] <camelia> rakudo-parrot 262e60, rakudo-jvm 262e60: OUTPUT«10 10 11␤»

[13:08] <timotimo> the "don't make throw-away slurpies" commit broke the parrot build for me

[13:09] <hoelzro> ahoy lizmat 

[13:09] <timotimo> hoelzro: maybe today perl6 will enter linguist!

[13:09] <timotimo> what do you think? :)

[13:10] <hoelzro> I hope so!

[13:10] <masak> "enter linguist"? that sounds elaborate.

[13:11] * timotimo measures times for perl6 stage compile

[13:15] <timotimo> sweet! almost down to 100 seconds!

[13:16] <timotimo> stage optimize is also a whole bunch faster

[13:16] <FROGGS> ??

[13:16] <FROGGS> really?

[13:17] <timotimo> 100 seconds for stage parse*

[13:17] <timotimo> why do i keep writing "stage compile"?

[13:17] <hoelzro> timotimo++ # nice!

[13:17] <timotimo> that's not my work, that's all jnthn

[13:17] <FROGGS> timotimo: which branch?

[13:17] <timotimo> indy-args with HEAD~1 reverted and opts

[13:17] <FROGGS> umm, I'll wait :o)

[13:18] <masak> so, indy-args^, then :)

[13:18] <timotimo> no

[13:18] <timotimo> er ... yes

[13:18] <masak> oh, wait, HEAD~1 reverted. never mind.

[13:18] <timotimo> indy-args^ reverted

[13:18] <masak> right.

[13:19] <timotimo> i'm willing to bet that making that commit work will give another decent speedboost to get my timing below 100s

[13:20] <timotimo> it's at 101s now

[13:22] *** denisboyun joined
[13:22] * masak .oO( performance 101 )

[13:24] *** jnap joined
[13:29] *** jnap left
[13:30] <lizmat> http://patch.pm/p1

[13:30] <lizmat> commute commencing&

[13:31] *** lizmat left
[13:32] <TimK1> Has anyone built MoarVM on a Mac?

[13:32] *** TimK1 left
[13:33] *** TimK1 joined
[13:34] <tadzik> I think diakopter does that

[13:34] <moritz> TimK1: yes, I'm pretty sure, because the README mentions it explictly

[13:34] <moritz> (Or `nmake` on Windows). Currently it is known to build on Windows with MSVC,

[13:34] <moritz> with `gcc` and `clang` on Linux & MacOS X.  We're expanding this with time.

[13:34] *** hummeleB1 left
[13:35] *** woolfy left
[13:39] <TimK1> Oh yeah… Look at that. I've been having trouble… But before I go any further, I'm going to try again, following again exactly the steps in the README.

[13:40] *** kaleem left
[13:42] *** hummeleBop1 joined
[13:45] *** filly left
[13:47] *** hummeleBop1 left
[13:55] <PerlJam> frettled: :-PPP

[13:56] <timotimo> a single !nqp::isnull made nqp build again

[13:57] <timotimo> now let's see how much faster it is.

[13:57] *** denisboyun left
[13:58] <FROGGS> push push push!

[13:59] *** kaare__ joined
[14:00] *** labster_ joined
[14:01] *** labster_ is now known as labster

[14:04] *** denisboyun joined
[14:04] <masak> p: say Date.today.day-of-week

[14:04] <camelia> rakudo-parrot 262e60: OUTPUT«4␤»

[14:05] <masak> p: say Date.today.month

[14:05] <masak> I'm happy we decided not to make those two zero-based.

[14:06] <FROGGS> yeah

[14:06] <hoelzro> what is '$#array' in Perl 6?

[14:10] <FROGGS> p: say 1

[14:10] <masak> hoelzro: @array.end

[14:10] <moritz> p: $#array

[14:10] <FROGGS> it is dead :o(

[14:10] <masak> I think I killed camelia :/

[14:10] <hoelzro> ah, thanks masak

[14:11] * FROGGS .oO( You bastards! )

[14:12] <hoelzro> heh

[14:12] *** camelia left
[14:13] *** camelia joined
[14:14] <moritz> p: $#array

[14:15] *** ChanServ sets mode: +v camelia

[14:15] <camelia> rakudo-parrot 262e60: OUTPUT«===SORRY!=== Error while compiling /tmp/yNoXnF3fBy␤Unsupported use of $#variable; in Perl 6 please use @variable.end␤at /tmp/yNoXnF3fBy:1␤------> $#array⏏<EOL>␤»

[14:16] *** PacoAir joined
[14:18] <timotimo> i needed some !nqp::isnull($node.node)s, but now it should work

[14:18] <FROGGS> timotimo: there is another get_bool that explodes

[14:18] <timotimo> some more*

[14:18] <FROGGS> this one I think: nqp/src/vm/parrot/QAST/Compiler.nqp:727

[14:19] <FROGGS> compiling right now

[14:20] <timotimo> i just added all of them :P

[14:20] <timotimo> it doesn't make stage parse faster, it seems.

[14:20] *** PacoAir left
[14:21] <jnthn> timotimo: Oh? That's...surprising.

[14:21] <jnthn> It's less memory pressure, either way...

[14:21] *** PacoAir joined
[14:22] *** denisboyun left
[14:23] <timotimo> there seems to be more null pmc accesses in get_bool even after guarding all the $node.node's

[14:24] *** denis_boyun joined
[14:24] <timotimo> maybe the accessor methods should be tweaked to never return null instead

[14:24] *** jlaire left
[14:25] <timotimo> perhaps it's something about nqp::create that differs from self.CREATE?

[14:26] *** rurban1 joined
[14:28] <timotimo> i don't get it :\

[14:29] <jnthn> self.CREATE just calls nqp::crete(...)

[14:29] <jnthn> I've no idea where the nulls are coming from, given the fact that things work on JVM...

[14:31] <timotimo> oh well

[14:32] <dalek> niecza: 989dffc | (Solomon Foster)++ | / (2 files):

[14:32] <dalek> niecza: Changes needed to make baghash.t work.

[14:32] <dalek> niecza: review: https://github.com/sorear/niecza/commit/989dffc157

[14:36] *** ajr joined
[14:36] *** ajr is now known as Guest7409

[14:37] *** Guest7409 is now known as ajr_

[14:40] <timotimo> jnthn: anyway, good work on that branch :)

[14:41] <timotimo> it's a delight to see you just churn out worthwhile optimisations while i'm failing to come up with new good ones >_<

[14:46] <jnthn> I'm happy they're helping :)

[14:47] <jnthn> Reducing setting compilation time is important for our overall throughput.

[14:47] <timotimo> i agree

[14:47] <jnthn> And the benefits help suer code too

[14:47] <jnthn> *user

[14:47] *** bluescreen10 joined
[14:48] <jnthn> Wow...storm is building here.

[14:49] *** kaare__ is now known as kaare_

[14:49] * FROGGS .oO( The storm is strong in him, master! )

[14:50] <jnthn> I'll probably be able to get a train home, but there's more trains cancelled than there are leaving..

[14:52] *** hummeleB1 joined
[14:53] <Woodi> Hi :)

[14:53] <Woodi> Someone wrote: Your base class breaks encapsulation by exposing implementation details to subclasses in the form of protected members.

[14:54] <jnthn> I think it's the subclass that'd be doing the breaking, but the base class is kinda flaunting its model... :)

[14:56] <Woodi> is that some flavour of OO ? when you instantiate child class into object there is no parent class anymore! All attributess are object own, seeing it is using parrent kidney or brain is interesting vision...

[14:56] <Woodi> just do not understans :)

[14:57] <Woodi> after instantiation thinking in parrent/child class is not valid to me...

[14:58] <Woodi> except reflection but things like refactoring are not part of design...

[15:00] <jnthn> Woodi: The runtime operational view is little comfort to the maint programmer :)

[15:02] <atroxaper> Hello #perl6 !

[15:02] <Woodi> yes, that's two different jobs/times :) but where is a breaking encapsulation ?

[15:02] <Woodi> hi atroxaper :)

[15:02] <atroxaper> Woodi hi!

[15:05] <atroxaper> Does anybody know why i can't generate html from specs's pod? 16-io.pod for example. q{Two terms in a row} in line 6

[15:05] <tadzik> oh, they're POD, from Perl 5, not Pod from Perl 6

[15:05] <atroxaper> I ran perl6 /path-to-pod/S16-io.pod --doc=html

[15:06] <Ulti> r: say -Inf..Inf

[15:06] <camelia> rakudo-parrot 262e60, rakudo-jvm 262e60: OUTPUT«-Inf..Inf␤»

[15:07] <Ulti> r: my @infinity = -Inf..Inf

[15:07] <camelia> rakudo-parrot 262e60, rakudo-jvm 262e60: ( no output )

[15:07] <Ulti> is that a timeout?

[15:07] <jnthn> Woodi: If I make a field private in a class, I can refactor as I choose. If it's protected, it's part of the API that I need to maintain for subclasses. If the subclasses are out of my control, then I need to maintain that API. If the API is in terms of fields, not methods, I've little flexibility in doing so.

[15:07] <atroxaper> tadzik: Hm... Are all of Perl6 specs written in Perl5 POD?

[15:08] <jnthn> Woodi: I'm not sure I'd claim that accessing protected fields is breaking encapsulation. I guess I'll simply argue that they're not encapsulated at all. :)

[15:09] *** xenoterracide joined
[15:09] <FROGGS> Ulti: no

[15:09] <FROGGS> r: my @infinity = -Inf..Inf; say "no"

[15:09] <camelia> rakudo-parrot 262e60, rakudo-jvm 262e60: OUTPUT«no␤»

[15:09] <jnthn> atroxaper: I think except S26

[15:09] <atroxaper> tadzik: I want to improve pod2html generator. And found only one way to get Pod object: qq{eval slurp($pod_file.path) ~ "\n\$=pod";}

[15:10] <FROGGS> r: my @infinity = -Inf..Inf; say @infinity[^10] # bang?

[15:10] <camelia> rakudo-parrot 262e60, rakudo-jvm 262e60: OUTPUT«-Inf -9223372036854775808 -9223372036854775807 -9223372036854775806 -9223372036854775805 -9223372036854775804 -9223372036854775803 -9223372036854775802 -9223372036854775801 -9223372036854775800␤»

[15:10] <FROGGS> ohh

[15:10] <Ulti> hmmm why does my 2013.09 R* hang 

[15:10] <jnthn> wtf...

[15:10] <FROGGS> Ulti: are you doing that in the repl?

[15:10] <Ulti> heh I like -Infinity +1

[15:10] <dalek> niecza: 425def6 | (Solomon Foster)++ | lib/CORE.setting:

[15:10] <dalek> niecza: Copy changes to Bag as well.

[15:10] <dalek> niecza: review: https://github.com/sorear/niecza/commit/425def6617

[15:10] <Ulti> FROGGS: yeah

[15:11] <FROGGS> Ulti: the repl tries evaluate it I think

[15:11] <FROGGS> Ulti: try the same in a -e

[15:11] <Ulti> yeah I guess its always in sink context because it wants to print it

[15:11] <dalek> roast: dafcd34 | (Solomon Foster)++ | S02-types/bag (2 files):

[15:11] <dalek> roast: Niecza refudge.

[15:11] <dalek> roast: review: https://github.com/perl6/roast/commit/dafcd34d93

[15:12] <FROGGS> Ulti: yeah

[15:12] <Woodi> encapsulation in the first place is for things not being in class hierarchy, it is essence of OO. but hidding thing from subclasses is another form of hidding and maybe it is necesarry too...

[15:13] <FROGGS> p: my %x = (:a(1), :b(2) :c(3))

[15:13] <camelia> rakudo-parrot 262e60: ( no output )

[15:13] <FROGGS> p: my %x = (:a(1), :b(2) :c(3)); say %x

[15:13] <camelia> rakudo-parrot 262e60: OUTPUT«("a" => 1, "b" => 2).hash␤»

[15:13] <FROGGS> std: my %x = (:a(1), :b(2) :c(3)); say %x

[15:13] <camelia> std 3b262af: OUTPUT«ok 00:01 128m␤»

[15:13] <tadzik> atroxaper: yeah, I don't think we have a different way

[15:13] <FROGGS> hmmm

[15:13] <FROGGS> is c just an adverb to b there?

[15:14] *** jnap joined
[15:14] <atroxaper> tadzik: and S26 don't parse too :) Said =begin wihtout =end ...

[15:15] <tadzik> oh, S26 should definitely parse

[15:15] <tadzik> the HTML rendering we have is a proof that we, at least at some point, were able to parse it

[15:15] <tadzik> if we're not anymore, I'd be seriously mad :)

[15:16] <tadzik> due to the time necessary to parse it we don't have it as a test anywhere tohugh

[15:16] * FROGGS .oO( My name is hugh )

[15:16] <tadzik> :D

[15:16] <tadzik> We are Hugh

[15:16] <FROGGS> :o)

[15:16] <jnthn> .oO( Are hugh serious? )

[15:17] <FROGGS> jnthn: you have no idea!

[15:17] <tadzik> you can't say Hugh without hug

[15:17] *** btyler joined
[15:17] <Woodi> that API protecting is probably keeping Liskov in place, subclasses have some restrictions on parrent attibutes..

[15:18] <atroxaper> tadzik, it we're not anymore. Really.

[15:18] <tadzik> I'm mad >:(

[15:19] *** TimK1 left
[15:19] *** V_S_C joined
[15:19] <FROGGS> tadzik: seems like you *are* getting active this year :o)

[15:19] <tadzik> KHAAAAN

[15:19] <moritz> you can always BISECT

[15:20] <tadzik> BISEEEECT

[15:21] <atroxaper> BISECT!))

[15:21] <tadzik> and the last rendering of S26 doesn't have a timestamp

[15:21] <atroxaper> Maybe rendering is fine. I can't even eval pod file.

[15:23] <moritz> rendering uses eval :/

[15:27] <Woodi> btw. I learned a little of pre-assembler knowledge and it's kind a shock that x86 cpus have same instructions since '70s... looks 'backward uncompatibility' is just human error...

[15:27] <geekosaur> similar instructions. how they're written has changed a bit though

[15:28] <geekosaur> but yes, you can trace many of the intel opcodes back to the 4004 if you put your mind to it

[15:28] <Woodi> but looks more portable then HLLs :)

[15:31] <V_S_C> x64 succeeded rather than IA64 as it overlapped with x86 to greater extent! Someone commercial minded said the market does not always make the right choice & played along.

[15:34] <atroxaper> tadzik: i think i found!

[15:34] *** colomon left
[15:35] <atroxaper> tadzik: https://github.com/perl6/specs/commit/b7db6ebaf1a8a07a1d7eb57e8b8d9b3b9975e76e it's comment with bag

[15:35] <atroxaper> commit

[15:36] <atroxaper> tadzik: need to add q{=end defn} in 605 line

[15:37] <atroxaper> Locally it works.

[15:39] *** ajr_ left
[15:43] *** p5eval left
[15:44] *** ajr joined
[15:44] *** ajr is now known as Guest92278

[15:46] *** Guest92278 is now known as ajr_

[15:47] <tadzik> ooh!

[15:47] <tadzik> so it's not my code's fault \o/

[15:47] <tadzik> should be =para defn or something

[15:48] <tadzik> atroxaper+_+

[15:48] <tadzik> atroxaper++ even

[15:48] <atroxaper> tadzik: thank you!

[15:48] *** rurban1 left
[15:50] <atroxaper> tadzik: i think it should be add =end defn in 605 line as in other examples around

[15:51] <jnthn> attempted decommute :) &

[15:51] <FROGGS> jnthn: good lok!

[15:52] <FROGGS> ohh, that was germish

[15:52] <FROGGS> jnthn: good lök! # :o)

[15:52] <FROGGS> err

[15:56] *** FROGGS left
[15:59] *** Psyche^ joined
[16:00] *** Psyche^_ left
[16:04] <TimToady> http://rosettacode.org/wiki/Sokoban#Perl_6 <-- passed up J, now C is 34 away :)

[16:04] *** rurban1 joined
[16:09] *** vaclavstrachon left
[16:15] <V_S_C> @TimToady J? 34?

[16:16] <nwc10> TimToady: I forgot, and I couldn't find it by digging - which  is the page with the leaderboard?

[16:20] <TimToady> http://rosettacode.org/wiki/Rosetta_Code/Rank_languages_by_popularity

[16:20] <TimToady> though you have to run one of the programs to get the current results

[16:20] <TimToady> I think they updated it a couple days ago

[16:27] <TimToady> oh hey, just thought of a big advantage to turning the postcircumfix:<[ ]> method into a function; you can easily make strings be subscriptable in a lexical scope without inflicting those semantics on anyone else

[16:31] *** dakkar left
[16:33] *** spider-mario joined
[16:36] <TimToady> nwc10: btw, the p6 one of those runs considerably faster under niecza, if you're wanting to run it

[16:36] *** ajr_ left
[16:36] *** ajr joined
[16:36] *** ajr is now known as Guest98547

[16:36] *** Guest98547 is now known as ajr_

[16:38] *** V_S_C left
[16:41] *** thou joined
[16:42] *** jnap left
[16:47] * jnthn got home without much trouble

[16:47] <TimToady> it occurs to me that the Sokoban solver would parallelize nicely with a channel instead of a queue

[16:50] *** tipdbmp left
[16:53] *** jnap joined
[16:54] <TimToady> we actually put the encapsulation boundary *inside* the class, not outside of it

[16:55] <TimToady> when you say $!foo, you're inside, and when you say $.foo, you're outside

[16:55] <TimToady> that might rise to the level of an advent idea

[16:58] *** atroxaper left
[17:01] <Ulti> TimToady unfortunately Perl6 isn't on this plot http://sogrady-media.redmonk.com/sogrady/files/2012/09/language-ranking-0912.png

[17:02] *** tipdbmp joined
[17:05] <TimToady> well, of course not, that's measuring "real" popularity, not the insanity of a few RC contributors :)

[17:07] <TimToady> masak: added a comment to yours, http://perl6advent.wordpress.com/2013/12/02/day-02-the-humble-type-object/#comment-3339

[17:08] *** zakharyas joined
[17:10] *** colomon joined
[17:22] *** kaleem joined
[17:27] *** sjohnson joined
[17:28] *** sjohnson left
[17:29] *** sjohnson joined
[17:30] *** sjohnson left
[17:30] *** sjohnson joined
[17:31] <TimToady> decommuting for six hours or so &

[17:38] *** bluescreen100 joined
[17:39] *** kaleem left
[17:42] *** bluescreen10 left
[17:46] *** beastd joined
[17:51] *** FROGGS[mobile] joined
[17:53] <colomon> [Coke]: ping?

[17:55] <hoelzro> ok, nobody fix this: https://rt.perl.org/Public/Bug/Display.html?id=120704

[17:55] <hoelzro> I'm going to see if I can do it

[17:56] <diakopter> HERE, HAVE SOME STOP ENERGY.

[17:57] <diakopter> <WINK>

[17:58] <hoelzro> if I can't manage after a few days, please feel free to step in ;)

[18:02] *** stevan_ joined
[18:07] *** sftp left
[18:07] *** sftp joined
[18:08] *** Rotwang joined
[18:10] *** telex left
[18:10] <jnthn> r: my $a = (say 1; $a) = (say 2; $a)

[18:10] <camelia> rakudo-parrot 262e60, rakudo-jvm 262e60: OUTPUT«1␤2␤»

[18:10] <jnthn> hoelzro: That needs to be 2 1 I guess :)

[18:11] <jnthn> I wonder if we're not handling childorder correctly somewhere...

[18:11] <jnthn> Or something like that...

[18:11] <diakopter> erm

[18:11] <diakopter> that used to work

[18:12] *** telex joined
[18:13] <diakopter> r: my $a = (BEGIN say 1; $a) = (BEGIN say 2; $a)

[18:13] <camelia> rakudo-parrot 262e60, rakudo-jvm 262e60: OUTPUT«1␤2␤»

[18:13] <diakopter> mwahaha

[18:14] <FROGGS[mobile]> you are crazy :o)

[18:14] <diakopter> hrm

[18:15] <hoelzro> the odd thing is how commenting odd the line in push fixes things.

[18:20] *** sftp left
[18:20] *** ajr_ left
[18:23] *** sftp joined
[18:29] *** kivutar left
[18:30] *** xenoterracide left
[18:34] *** Rotwang left
[18:41] *** darutoko left
[18:44] <[Coke]> colomon: you rang?

[18:44] <[Coke]> ./scroll end

[18:45] <[Coke]> colomon: is it better than:

[18:45] <colomon> [Coke]: how many test failures are you getting in Niecza these days?  I'm getting a number of them with make spectest, but some (most?) of them appear to be some spurious problem with the make spectest harness rather than actual niecza errors.

[18:46] <[Coke]> https://github.com/coke/perl6-roast-data/blob/master/niecza_summary.out#L6065  ?

[18:47] <colomon> argh, that's far more errors than I'm getting, and not the same ones.  :\

[18:47] <colomon> what are you using to run the tests?

[18:47] <[Coke]> that is the run before you fixed order.

[18:48] <colomon> ah, maybe that helped

[18:49] <dalek> rakudo-star-daily: 90c115e | coke++ | log/ (5 files):

[18:49] <dalek> rakudo-star-daily: today (automated commit)

[18:49] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/90c115e6ed

[18:49] <dalek> perl6-roast-data: 4e9765a | coke++ | / (3 files):

[18:49] <dalek> perl6-roast-data: today (automated commit)

[18:49] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/4e9765a1d7

[18:50] <[Coke]> uh, that last commit looks wonky.

[18:52] <[Coke]> colomon: https://gist.github.com/coke/7811061

[18:52] <[Coke]> that's from today's run.

[18:52] <[Coke]> all those were already failing before your fix.

[18:52] <colomon> \o/

[18:53] <[Coke]> can you see if the test file I skipped in t/spectest.data recently passes with your fix? (hard for me to commit from $dayjob)

[18:53] <[Coke]> colomon++

[18:54] <[Coke]> (down to 56 failures in niecza, from 468)

[18:54] <colomon> I also made some tests that had never worked before in niecza work.  ;)

[18:58] <colomon> [Coke]: yes, cmp.t works now.  I'll turn it back on.

[18:59] <[Coke]> colomon++ thanks

[18:59] <dalek> niecza: 17d73e4 | (Solomon Foster)++ | t/spectest.data:

[18:59] <dalek> niecza: Turn S03-operators/cmp.t back on.

[18:59] <dalek> niecza: review: https://github.com/sorear/niecza/commit/17d73e408c

[19:01] *** raiph joined
[19:05] <dalek> roast: c8d9486 | coke++ | S03-metaops/ (2 files):

[19:05] <dalek> roast: Partially Revert "partial niecza fudge"

[19:05] <dalek> roast: 

[19:05] <dalek> roast: This partially reverts commit 6312c187880ad4e8da1cde7df665f6f17ad9f501.

[19:05] <dalek> roast: review: https://github.com/perl6/roast/commit/c8d9486091

[19:05] <[Coke]> I think that's the last of the ones I fudged the other day.

[19:06] <[Coke]> (run the tests) this script:

[19:06] <dalek> rakudo/moar-support: 5c6e780 | jnthn++ | src/vm/moar/ops/perl6_ops.c:

[19:06] <dalek> rakudo/moar-support: Cheating p6stateinit.

[19:06] <dalek> rakudo/moar-support: 

[19:06] <dalek> rakudo/moar-support: Hopefully we can actually get to Hello world! without implementing

[19:06] <dalek> rakudo/moar-support: state vars.

[19:06] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/5c6e780f62

[19:06] <dalek> rakudo/moar-support: 087641c | jnthn++ | src/vm/moar/ops/perl6_ops.c:

[19:06] <dalek> rakudo/moar-support: Implement p6staticouter.

[19:06] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/087641c91b

[19:06] <[Coke]> https://github.com/coke/perl6-roast-data/blob/master/bin/niecza.sh

[19:11] <[Coke]> colomon^^

[19:12] *** fhelmberger_ joined
[19:12] <colomon> [Coke]++ # keeping on top of things

[19:13] *** fhelmberger left
[19:14] *** jlaire joined
[19:14] *** cognominal joined
[19:14] *** cognominal__ left
[19:15] <FROGGS[mobile]> jnthn++

[19:15] <jnthn> Those don't solve the nasty closure issue, though...

[19:16] <FROGGS[mobile]> is the closure issue "my" gc bug?

[19:16] <jnthn> No

[19:16] <FROGGS[mobile]> damn

[19:16] *** fhelmberger_ left
[19:17] <jnthn> Ugh...hope the power holds with this storm...

[19:18] <FROGGS[mobile]> :/

[19:18] <FROGGS[mobile]> no storm here anymore

[19:21] <jnthn> I'm sure I had this problem when doing the JVM port...

[19:21] * jnthn looks thorugh the commit history

[19:22] *** ajr joined
[19:23] *** ajr is now known as Guest91500

[19:23] *** Guest91500 is now known as ajr_

[19:32] * jnthn finds 4b6519aba in the NQP repo and thinks that may be it. :)

[19:32] <jnthn> .oO( Clearly, I was smarter back in May... )

[19:36] *** xinming left
[19:37] *** xinming joined
[20:05] *** rindolf left
[20:11] *** FROGGS joined
[20:13] *** spider-mario left
[20:19] *** cooper left
[20:25] *** peekxc joined
[20:26] <peekxc> Hello All! I have a question related to Perl 6.0 (or Rakudo if you want) vs the current stable release, Perl 5.18; specifically in regards to the basics of opening filehandles. Is this the right channel and if so can anyone help me?

[20:26] <Juerd> Yes.

[20:27] <diakopter> japhb: fix the internet, please. kthxbai

[20:27] <Juerd> I will probably not be able to help but you've come to the right place for Perl 6 questions.

[20:27] <japhb> diakopter, Did I break it again?  Dang.

[20:27] <diakopter> japhb: my gmail says 502. make it stop.

[20:28] *** SevenWolf joined
[20:28] <diakopter> japhb: [I'm sure you love this sort of harassment.. :S]

[20:29] <diakopter> "Please try again in 30 seconds. That’s all we know. "   That's not a very strong statement of knowledge...

[20:29] <japhb> It's my favorite.  ;-)

[20:29] <peekxc> Alright, so I've done a fair bit of research and I've looked at the documentation, I'm learning Perl now from the Randal Schwartz book "Learning Pearl." They go over many different ways to open and use filehandles, however most of what they do seems to be use the syntax for 6.0, which is the triple term setup (open $file_fh, '<', 'some_location';)

[20:29] <jnthn> Apart from that's not the syntax for 6 at all :)

[20:30] <jnthn> my $file_fh = open('some_location', :r); # how that'd look in 6

[20:30] <japhb> "SORREEE, WE BROAK DA NETZ.  WE IZ WOORKING ON ITZ."

[20:30] *** cooper joined
[20:30] <peekxc> reallreally?

[20:30] <peekxc> hmmmmm

[20:30] <diakopter> peekxc: which tutorial are you reading for 6.0?

[20:30] <peekxc> "Learning Perl" by Randall Schwartz 

[20:31] <peekxc> in Chapter 5 he says, and I quote: 

[20:31] <PerlJam> peekxc: That book is for Perl 5

[20:31] <diakopter> peekxc: that's not for Perl 6

[20:31] <SevenWolf> Learning Perl is Perl 5 and you are in a Perl 6 Chat room

[20:31] <peekxc> Ahh, I see

[20:31] <PerlJam> There is no "Learning Perl 6" yet

[20:31] <peekxc> I misread 5.6 for Perl 6

[20:32] <PerlJam> peekxc: and if it's for 5.6, it's still horribly out of date :)

[20:32] <SevenWolf> well basics are still valid

[20:32] <ingy> arvo! o/

[20:32] <peekxc> Am I correct that the latest "stable" release is 5.18.1 though?

[20:33] <diakopter> peekxc: yes, but Perl 6 is on a completely different trajectory from Perl 5

[20:33] <PerlJam> SevenWolf: sure, but a book written for a 13 year old version of Perl is likely to miss a few things :)

[20:33] <BinGOs> v5.18.2 will be out in a week and a bit.

[20:33] <peekxc> As I've come to understand 

[20:33] <SevenWolf> hey peekxc if your interest is in Perl 5 channel #perl may be more suited

[20:33] *** kivutar joined
[20:33] <SevenWolf> I agree PerlJam

[20:33] <peekxc> Thank you Seven, but before I depart, let me ask you all a quick question

[20:34] * PerlJam waits for a crazy non sequitur

[20:34] <diakopter> japhb: mail plz. ok, thanks, awesome.

[20:34] <peekxc> If you were developing a program that was going to be used over a very very large database, cross-platform, and stability was key, would you use 5.18 or 6.0 ?

[20:34] <japhb> diakopter, :-D

[20:34] <SevenWolf> two languages depends on your preference

[20:34] <peekxc> I know 6.0 cbumps up the efficiency quite a bit, but my concerns lie in stability

[20:34] <diakopter> peekxc: version 5, absolutely

[20:35] <peekxc> Thanks, dia, and Seven

[20:35] <japhb> (Once in a while the sleeping deities awake, jiggle a fiber coupling, and then fall back to sleep.)

[20:35] <peekxc> I'll be taking my leave then, thanks all for the help

[20:35] <btyler> peekxc: the naming scheme is a little weird, but perl 5 and perl 6 are different languages. for something like that a recent version of perl 5 is a great choice

[20:35] <diakopter> peekxc: 6.0 bumps the efficiency up a few thousand times in the opposite direction

[20:36] <peekxc> What do you mean "in the opposite direction"?

[20:36] <diakopter> it's not up

[20:36] <peekxc> as in it's less efficient?

[20:36] <btyler> perl 6 in its current form is still rather slower than perl 5 in most (all?) cases 

[20:36] <PerlJam> diakopter: still depends on what efficiency you're talking about.   :)

[20:36] <diakopter> I'm curious who told you it was more efficient (runtime performance, startup performance)

[20:36] <SevenWolf> I enjoy Perl 5 but as soon as 6 is out there I may switch.. I will switch.. I think I will miss Sigil Variance

[20:36] <PerlJam> Perl 6 is quite a bit more expressive than Perl 5.

[20:36] <peekxc> wikipedia ;)

[20:37] <peekxc> I see

[20:37] <SevenWolf> I've also heard that as of right now Perl6 isn't as fast as Perl 5

[20:37] <jnthn> Perl 6 as a language should be more optimizable in the long run. At the moment the implementations have much optimization to go.

[20:37] <peekxc> Well this is all very useful info to me, as I'm the one needing to make the decision. Thank you. 

[20:37] <japhb> peekxc, Right now, Perl 6 compilers are generally slower than Perl 5, sometimes a lot slower.  The *design* of the language is made to ramp up significantly in efficiency, but the *implementations* are still in the "get everything working" phase, instead of the "make it blazingly fast" phase.

[20:40] <PerlJam> SevenWolf: btw, what do you mean by "out there"?  Perl 6 is "out" already.  Has been for a while.  What are your criteria to switch?

[20:41] <SevenWolf> hmm well I actually am more of a Perl 5 guy, Im very interested in Perl 6

[20:41] <SevenWolf> and from what I've read, Perl 6 has third part compilers?

[20:41] <SevenWolf> party*

[20:41] *** peekxc left
[20:42] <SevenWolf> Is Rakudo the official implementation?

[20:42] <FROGGS> SevenWolf: not really third party, but there is not a single implementation as there is for Perl 5

[20:42] <perigrin> The party is just larger so in between having punch they throw out compilers.

[20:42] <SevenWolf> lol

[20:43] <FROGGS> SevenWolf: all implementations are official which pass the test suite

[20:43] <japhb> SevenWolf, Rakudo is the most active implementation in terms of development effort.

[20:43] <FROGGS> yes, that makes rakudo the leading implementation

[20:43] <SevenWolf> is implementation of threading complete with any of the p6 compilers?

[20:44] <japhb> Complete, no.  Working nicely?  Well, I like the rakudo-jvm threading.

[20:44] <FROGGS> SevenWolf: the only implementation that support threads so far is rakudo on the jvm

[20:44] <japhb> Concurrency, really.

[20:44] <FROGGS> not complete, since the the implementation (and spec) of threads just has started

[20:44] <perigrin> you keep using these terms like "complete" and "official" ... hang out a while and you'll realize why they're not really applicable.

[20:44] <japhb> (Scheduled tasks in a thread pool)

[20:45] <FROGGS> SevenWolf: think more in terms of "useful" and "appropriate"

[20:45] <FROGGS> :o)

[20:45] <japhb> SevenWolf, see jnthn++'s talks/slide decks on Concurrency in Perl 6.

[20:45] <FROGGS> (... for the given task)

[20:45] <FROGGS> or the advent calender

[20:46] <SevenWolf> I see, I'll check that out japhb

[20:46] <PerlJam> perigrin, FROGGS: the transition from "complete/official" to "useful/appropriate" might make a good advent post  ;)

[20:46] *** kaare_ left
[20:46] <japhb> (newest is best WRT those talks, by the way; there was a syntax change recently)

[20:46] <jnthn> http://jnthn.net/papers/2013-npw-conc.pdf is the current best bet.

[20:46] <FROGGS> SevenWolf: btw, if you want to dig into Perl 6 a perfect thing to do would be to port a Perl 5 module you are interested in to Perl 6

[20:47] *** cooper left
[20:47] <FROGGS> PerlJam: well volunteered! :P

[20:47] <SevenWolf> I have Rakudo installed on linux, I most likely will.

[20:48] <PerlJam> FROGGS: There are a few slots open still, so I may write one or two, but I haven't felt up to it yet and I'm not sure I will before xmas.

[20:48] <FROGGS> I see

[20:49] <FROGGS> I plan to to start on my first post tomorrow

[20:51] <japhb> SevenWolf, you say "I have Rakudo installed on linux".  From experience, sometimes that means people used the system package manager to install it.  If so, that's almost certainly seriously out of date if you're interested in concurrency and threading.

[20:51] <japhb> Best to build from git.  (The procedure for which has also changed/improved lately.)

[20:51] <SevenWolf> ah yes, that is the case somewhat.. except I have no package manager, I just sudo apt-get install ...

[20:52] <SevenWolf> Im on kali

[20:52] <PerlJam> apt is a package manager last time I checked :)

[20:52] <SevenWolf> well

[20:52] <SevenWolf> what i meant was no graphical

[20:52] <SevenWolf> my mistake

[20:52] <FROGGS> that doesnt matter :o)

[20:52] <FROGGS> it is just that the  (debian guys)

[20:53] <FROGGS> it is just that the  (debian guys)++ dont bundle it every month

[20:53] <SevenWolf> I am aware of out of date repositories, honestly i rely on them far too much lol

[20:54] *** cooper joined
[20:55] <FROGGS> it is just dramatic what happens here within a month, and if you then see that the packaged one is a year old... well :o)

[20:57] <japhb> Yeah, it's night and day.

[20:58] <SevenWolf> Candidate: 0.1~2012.01-1

[20:58] <SevenWolf> O_o im in trouble

[20:58] <SevenWolf> lol

[20:59] <FROGGS> *g*

[20:59] <FROGGS> you are, indeed :o)

[21:00] * japhb tries to imagine how different that actually is.

[21:01] <japhb> A lot, let's understate it that way.

[21:01] <SevenWolf> lol

[21:01] <SevenWolf> building from source now

[21:01] *** zakharyas left
[21:01] *** zakharyas1 joined
[21:02] <FROGGS> SevenWolf++

[21:07] <dalek> nqp/indy-args: 31d3bce | jnthn++ | src/vm/moar/QAST/QASTCompilerMAST.nqp:

[21:07] <dalek> nqp/indy-args: Fix lexical code-gen/dyn-comp interaction.

[21:07] <dalek> nqp/indy-args: review: https://github.com/perl6/nqp/commit/31d3bceebd

[21:08] <jnthn> bah, wrong branch, but still...

[21:09] <FROGGS> you can cherry-pick it, no?

[21:09] <jnthn> Or just merge the branch soon :P

[21:10] <FROGGS> merge soon merge often :o)

[21:10] <jnthn> Yeah. I heard that my last opt in it busts Parrot build, though...didn't get to look yet

[21:10] *** cognominal left
[21:10] *** cognominal joined
[21:11] <FROGGS> a pro pos merge soon... do you have time to look at the labels branch these days?

[21:11] <FROGGS> btw, I want to squish the sized-arrays branch into a single commit so it is easier to review (for you)

[21:15] <jnthn> +1 to squish to a single commit to review

[21:15] <jnthn> Labels branch...what's current status?

[21:15] <FROGGS> k, now I have to lean how to do that :o)

[21:15] <jnthn> git rebase -i, hack the text file

[21:15] <jnthn> Labels branch...what's current status?

[21:15] <FROGGS> jnthn: there is a nqp branch that adds support for labels for all loop for nqp code

[21:15] <FROGGS> for parrot backend

[21:17] *** dayangkun left
[21:23] *** dayangkun joined
[21:26] *** bbkr joined
[21:27] *** jeffreykegler joined
[21:28] *** dayangkun left
[21:29] *** dayangkun joined
[21:31] <jeffreykegler> Hi.  I'm here to borrow ideas for Marpa (my parser project), again.

[21:31] <jeffreykegler> Currently, Marpa avoids the use of strings by making everything an integer, but it may add upper layers.

[21:32] <jeffreykegler> Is there a doc on Perl6's use/interpretation of Unicode?

[21:32] <PerlJam> jeffreykegler: care to write an advent article about what you've borrowed from Perl6?  :)

[21:32] <jeffreykegler> Things like normalization, equality testing, etc.?

[21:33] <jeffreykegler> Perljam: my own blog has been neglected for a month now

[21:34] <jeffreykegler> Perljam: sorry

[21:35] <moritz> S02 contains some bits about Unicode

[21:36] <jeffreykegler> Marpa's upper layer is now Perl5, but exactly imitating its interpretation of Unicode does not seem like a good idea

[21:37] <jeffreykegler> In particular, Perl 5 recognizes integers well outside the official Unicode range, which is great if you want to use Unicode ...

[21:37] <jeffreykegler> ... as another means of encoding large integers ...

[21:38] *** daverccr joined
[21:38] <jeffreykegler> ... but perhaps not so great in terms of standard conformance.

[21:41] <jeffreykegler> I found http://perlcabal.org/syn/S02.html#Unicode_Semantics

[21:44] <timotimo> what did i miss today?

[21:45] *** stevan_ left
[21:45] <raydiak> jeffreykegler: the first couple paragraphs of S32 might also be useful to you

[21:46] <jnthn> timotimo: A *huge* storm. :P

[21:47] <jnthn> And I did a couple of small patches.

[21:47] <jnthn> :)

[21:47] <timotimo> sounds good :)

[21:47] <timotimo> still no idea about the nulls?

[21:49] <jeffreykegler> raydiak: https://github.com/perl6/specs/blob/master/S32-setting-library/Str.pod -- the stuff about Str?

[21:50] *** BenGoldberg joined
[21:52] <jeffreykegler> Looking at stuff like this, I'm beginning to think of the EBCDIC vs. ASCII war as an age of peace and tranquility. :-)

[21:55] <raydiak> jeffreykegler: yes, sorry - S32 Str is what I meant :)  specifically the first couple paragraphs where it talks about different unicode levels

[21:55] *** TimK1 joined
[21:55] *** daverccr left
[21:57] <raydiak> though you may also get some answers by looking at the functions there, too...

[21:58] * lue is reminded to blog about his provisional S15...

[21:58] <dalek> rakudo/sized-arrays: b227e62 | jnthn++ | src/core/ListIter.pm:

[21:58] <dalek> rakudo/sized-arrays: Allocate more sensibly in ListIter.

[21:58] <dalek> rakudo/sized-arrays: review: https://github.com/rakudo/rakudo/commit/b227e6294b

[21:58] <dalek> rakudo/sized-arrays: 262e600 | (Elizabeth Mattijsen)++ | src/core/Mu.pm:

[21:58] <dalek> rakudo/sized-arrays: Properly DEPRECATE bless(*) calls

[21:58] <dalek> rakudo/sized-arrays: review: https://github.com/rakudo/rakudo/commit/262e600cbb

[21:58] <dalek> rakudo/sized-arrays: 621739b | (Tobias Leich)++ | src/core/ (2 files):

[21:58] <dalek> rakudo/sized-arrays: Merge branch 'nom' of github.com:rakudo/rakudo into sized-arrays

[21:58] <dalek> rakudo/sized-arrays: review: https://github.com/rakudo/rakudo/commit/621739b049

[22:01] <lue> FROGGS++ : for a second I had no clue who made that push :) .

[22:02] <FROGGS> lue: I just try to rebase that branch (with no luk)

[22:02] <FROGGS> luck*

[22:02] <lue> .oO(luck -> luk -> luek -> lük)

[22:04] <jnthn> Lök at that onion!

[22:05] <diakopter> use the fours, luk

[22:05] <FROGGS> jnthn: btw, that "good lok" was meant as a pun, because Lok eq train in german

[22:05] <jnthn> Oh!

[22:05] <jnthn> Yeah, same here. :) I'm not sure why I thought of onions...

[22:06] <FROGGS> same here? my dict said something about onions too :o)

[22:06] *** tgt joined
[22:07] <jnthn> ooh

[22:08] *** xenoterracide joined
[22:08] *** zakharyas1 left
[22:10] <timotimo> i'm pretty tired now, but maybe tomorrow i'll get knee-deep into debugging the jvm interop dispatcher generator stuff

[22:11] <jnthn> :)

[22:11] * jnthn wonders if he'll sleep tonight with all this wind...

[22:13] <jeffreykegler> Re Perl6 & Unicode: S02 refers to "NFG".  Searching the web, I cannot find references to NFG outside of the Parrot/Perl 6 world.

[22:14] <PerlJam> jeffreykegler: aye, that's because it originates with Perl 6.

[22:15] <PerlJam> well ... s/Perl 6/TimToady/ probably

[22:16] <lue> jeffreykegler: It's basically NFC, with non-Unicode-standard negative numbers assigned to graphemes without precomposed characters.

[22:16] <timotimo> http://www.amazon.de/review/R2X1LSQAG1SAPF/ref=cm_cr_pr_cmt?ie=UTF8&ASIN=B00GJG0Q0I&linkCode&nodeID&tag=mflp-21

[22:17] <timotimo> er, ww

[22:17] <jeffreykegler> lue: Thanks

[22:17] <lue> you're welcome :)

[22:19] * PerlJam wonders if what lue said is the same thing as "leaves no uncomposed composing characters"

[22:19] <dalek> rakudo/moar-support: c462531 | jnthn++ | src/core/ (3 files):

[22:19] <dalek> rakudo/moar-support: Skip remaining few things that break setting load.

[22:19] <dalek> rakudo/moar-support: 

[22:19] <dalek> rakudo/moar-support: With this, we can now do "Hello, world" with Rakudo on MoarVM; though

[22:19] <dalek> rakudo/moar-support: it spits out a couple of warnings for the moment too.

[22:19] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/c46253184b

[22:20] <timotimo> aaaaw yiss :3

[22:20] <timotimo> m-BOOTSTRAP still gcbugs locally

[22:20] <FROGGS> timotimo: --optimize=1 ?

[22:21] * FROGGS tries

[22:21] <lue> PerlJam: perhaps, though it likely implies that Unicode has those precompositions, instead of Perl 6 having to make it up.

[22:21] <lue> (Critical in that is that we'll never be able to look at an NFG string directly.)

[22:24] *** zakharyas joined
[22:27] <jeffreykegler> Thanks.  What I think I was looking for was a relatively, simple pat choice among the choices in the Unicode standards ...

[22:27] <jeffreykegler> ... which I could just borrow from Perl 6.  Any complaints, I could then say,

[22:27] <jeffreykegler> ... "Hey look, this is the way Larry does it."

[22:28] <jeffreykegler> ... but it looks like I am not going to be able to get away with anything like that.

[22:31] <jnthn> timotimo: Need indy-args branch fwiw

[22:31] <jnthn> I'll get that merged soon but not tonight.

[22:33] *** jlaire left
[22:35] *** dmol left
[22:37] *** jlaire joined
[22:39] *** bluescreen100 left
[22:47] <raiph> masak, jnthn, of interest to edument? http://exercism.io/ # "Exercises with crowd-sourced code reviews"

[22:49] <FROGGS[mobile]> that storm is back and it is just crazy 

[22:50] *** FROGGS left
[22:51] *** stevan_ joined
[22:52] <jnthn> raiph: Hm, interseting idea...

[22:53] <jnthn> FROGGS[mobile]: It comes and goes here :)

[23:03] *** xenoterracide left
[23:11] *** kivutar left
[23:25] *** thou left
[23:32] *** stevan_ left
[23:45] *** woolfy joined
[23:46] *** denis_boyun left
[23:50] *** woolfy left
[23:54] *** dmol joined
