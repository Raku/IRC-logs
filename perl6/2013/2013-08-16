[00:02] *** lizmat_ joined
[00:02] <BenGoldberg> While I realize that .infinite is part of the spec, it seems to me that a more perl6-ish way to identify (in)finiteness would be to have to separate roles, one called List::Finite (or perhaps finte-list) and the other called List::Infinite (or infintite-list)... to mark a gather/take as finite or infinite, one would then use 'gather ... but infinite-list'.  This would also allow multi method 

[00:02] <BenGoldberg> dispatch based on whether or not a list is finite.

[00:03] *** woolfy left
[00:03] <BenGoldberg> r: say (^Inf)[^10].infinite

[00:03] <camelia> rakudo 5f4601: OUTPUT«Nil␤»

[00:03] <BenGoldberg> r: say (^Inf).infinite

[00:03] <camelia> rakudo 5f4601: OUTPUT«True␤»

[00:04] <BenGoldberg> r: say (^10).infinite

[00:04] <camelia> rakudo 5f4601: OUTPUT«False␤»

[00:04] <BenGoldberg> n: say (^Inf)[^10].infinite

[00:04] *** lizmat left
[00:04] <camelia> niecza v24-88-g1f87209: OUTPUT«Unhandled exception: Unable to resolve method infinite in type Parcel␤  at /tmp/4g37q1oGA3 line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4579 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4580 (module-CORE @ 576) ␤  at …

[00:05] <BenGoldberg> Also... if an infinite list is sliced by a finite list, the result should be finite, not Nil/unknown

[00:08] *** bearman joined
[00:10] *** Mjbmr joined
[00:11] *** nyuszika7h left
[00:11] *** Mjbmr left
[00:12] *** nyuszika7h joined
[00:18] *** woolfy joined
[00:25] *** ajr_ left
[00:26] *** Pleiades` left
[00:30] *** Pleiades` joined
[00:49] *** bearman left
[01:04] *** kbaker joined
[01:08] *** fgomez joined
[01:11] *** aindilis joined
[01:26] *** benabik left
[01:26] *** benabik joined
[01:40] *** FROGGS_ joined
[01:44] *** Mouq joined
[01:44] *** FROGGS left
[02:12] <slavik> what does '-->' mean? (example: int --> int, CArray[int] --> int), is that the lazy iterator?

[02:14] <benabik> slavik: sub (--> int) is a sub that returns an int.

[02:14] <slavik> ahh

[02:14] <benabik> Parameters before, return type after.

[02:14] <slavik> oh, I see

[02:14] <slavik> ok

[02:14] <slavik> like haskel :D

[02:14] <slavik> ty

[02:25] <JimmyZ> or sub() returns int { }

[02:44] *** EvanTeitelman left
[02:45] *** daniel-s left
[02:52] *** EvanTeitelman joined
[02:52] *** EvanTeitelman left
[02:53] *** EvanTeitelman joined
[02:58] *** EvanTeitelman left
[03:08] * colomon is having problems building jakudo at the moment.  :\

[03:11] *** abnorman left
[03:12] *** wtw joined
[03:14] *** wtw_ left
[03:29] *** preflex_ joined
[03:29] *** ChanServ sets mode: +v preflex_

[03:30] *** preflex left
[03:31] *** preflex_ is now known as preflex

[03:40] *** xinming left
[03:43] *** xinming joined
[03:44] *** kbaker left
[04:04] *** FROGGS_ left
[04:12] *** fridim_ joined
[04:14] *** abnorman joined
[04:18] *** BenGoldberg left
[04:22] *** FROGGS joined
[04:50] *** birdwindupbird joined
[04:58] *** jaldhar joined
[04:58] <Mouq> S05 (Match Objects): “In boolean context it evaluates as true or false (i.e. did the match succeed?):

[04:58] <Mouq> if /pattern/ {...}

[04:58] <Mouq> # or:

[04:59] <Mouq> /pattern/; if $/ {...}”

[04:59] <Mouq> Shouldn't that be m/pattern/ ? I'm only reading S05 now, so I'm not sure

[05:00] <Mouq> r: $_ =  'abcd'; if /qwerty/ { say "Hi there" }

[05:00] <camelia> rakudo 144a3f:  ( no output )

[05:01] <Mouq> r: $_ =  'abcd'; if m/qwerty/ { say "Hi there" }

[05:01] <camelia> rakudo 144a3f:  ( no output )

[05:01] <Mouq> Hm

[05:01] <Mouq> n: $_ =  'abcd'; if /qwerty/ { say "Hi there" }

[05:01] <camelia> niecza v24-88-g1f87209:  ( no output )

[05:03] <Mouq> Oh! “Specifically, a /.../ matches immediately in a value context” :p

[05:05] *** SamuraiJack joined
[05:26] *** rindolf joined
[05:26] *** rindolf left
[05:30] *** thou left
[05:38] *** FROGGS left
[05:49] <moritz> good morning

[05:49] <moritz> http://tirania.org/blog/archive/2013/Aug-15.html # this reminded me about jnthn++'s talk about threads and async in Perl 6

[05:50] <moritz> (at yapc::eu)

[05:51] *** FROGGS joined
[05:51] *** bearman joined
[05:53] <lizmat_> good *, #perl6!

[05:55] <lizmat_> packing up in Kiev

[05:55] <moritz> \o lizmat_ 

[05:56] *** lizmat_ is now known as lizmat

[05:56] <moritz> .oO( don't forget to pack your underscore )

[05:56] <lizmat> my underscore just got worn out :-)

[05:57] <moritz> yesterday the flight from Kiev to Vienna got delayed by an hour

[05:57] <moritz> luckily we had enough time to catch the connection

[05:58] * lizmat is lucky to have a direct flight

[06:04] *** FROGGS left
[06:09] *** kingbeast left
[06:11] *** FROGGS joined
[06:27] *** dmol joined
[06:36] *** dmol left
[06:42] <dalek> rakudo/nom: c20be1f | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[06:42] <dalek> rakudo/nom: Reliably handle mixins with is_default and is_dynamic

[06:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c20be1f21b

[06:45] *** bearman left
[07:03] *** Mouq left
[07:05] *** SmokeMachine left
[07:21] <timotimo> o/

[07:30] <FROGGS> moin timotimo 

[07:33] *** daxim joined
[07:36] <timotimo> for some reason, riding trains across the country always makes me super excited

[07:37] <timotimo> in a mixed-good-and-bad way

[07:51] <tadzik> hello #perl6

[07:55] *** Seganku joined
[07:56] <masak> morning, #perl6

[08:00] <moritz> morning, masak | tadzik | *

[08:00] <moritz> erm, that should have been & :-)

[08:00] <masak> eww, a junction of a whatever... :P

[08:01] <timotimo> if you junction in a *, it should take every object that it can find in the running program and cram it in there

[08:03] <masak> like a black hole.

[08:03] <masak> tadzik: want to meet up for more tourism?

[08:03] <timotimo> i really need to get playing with the async stuff

[08:05] *** fhelmberger joined
[08:05] <dalek> rakudo/nom: 10b9ac4 | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[08:06] <dalek> rakudo/nom: Hmmm... seems I broke it, so reverting

[08:06] <dalek> rakudo/nom: 

[08:06] <dalek> rakudo/nom: This reverts commit c20be1f21b69c3eb61c1795fbe04ecab6cd2a0fc.

[08:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/10b9ac4c88

[08:06] <tadzik> masak: sure thing :)

[08:06] *** shachaf left
[08:06] <tadzik> I'm ready (almost) when you are

[08:06] <masak> tadzik: I suggest metro to avoid sunburn.

[08:06] <tadzik> I have to checkout within an hour or so

[08:06] *** shachaf joined
[08:06] <masak> tadzik: we're heading down to lobby now, I think. we can wait for you.

[08:07] <dalek> Perlito: 267ef7e | (Flavio S. Glock)++ | / (5 files):

[08:07] <dalek> Perlito: Perlito5 - js - fix string conversion, string increment and decrement

[08:07] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/267ef7efbc

[08:07] <tadzik> masak: ok, I will slowly progress in your direction

[08:07] <lizmat> decommuting&

[08:07] *** lizmat left
[08:07] *** crab2313 joined
[08:07] *** shachaf left
[08:07] <masak> tadzik: sounds good.

[08:09] *** woolfy left
[08:11] * timotimo dumps lots of todos for rakudo into questhub

[08:16] *** rindolf joined
[08:17] *** Seganku left
[08:21] *** crab2313 left
[08:26] *** denis_boyun joined
[08:29] *** Seganku joined
[08:31] <timotimo> i'm getting lots of errors like this:   symbol:   class LexoticInstance

[08:31] <timotimo>   location: package org.perl6.nqp.sixmodel.reprs

[08:31] <timotimo> src/vm/jvm/runtime/org/perl6/rakudo/RakOps.java:59: error: cannot find symbol

[08:31] <timotimo> what do i have to do to fix this? or does somebody have a known good jakudo commit?

[08:38] <timotimo> i wanted to play with the threading stuff :(

[08:39] <timotimo> oh, that looks like not my rakudo, but my nqp version is wrong

[08:39] *** PacoAir joined
[08:47] <timotimo> still can't get it to work :(

[08:57] *** dayangkun joined
[08:58] *** dmol joined
[08:58] *** dayangkun left
[08:58] <moritz> timotimo: are you trying with nqp/master?

[08:59] <timotimo> yes

[09:00] * moritz tries too

[09:07] *** PacoAir left
[09:09] *** dmol1 joined
[09:11] *** dmol left
[09:25] <moritz> huh, I get

[09:25] <moritz> ./perl6 --target=jar --output=blib/Test.jar lib/Test.pm

[09:25] <moritz> ===SORRY!===

[09:25] <moritz> org.perl6.nqp.runtime.UnwindException

[09:39] <mathw> o/

[09:43] *** berekuk joined
[09:44] *** bearman joined
[09:46] <timotimo> huh

[09:50] *** NIco_ joined
[09:51] *** NIco_ left
[10:06] *** homesteak joined
[10:14] *** PacoAir joined
[10:15] *** sromanov joined
[10:30] <colomon> moritz: That's what I got when I tried to build jakudo last night.

[10:31] <timotimo> in my new tablebgrammar it is allowed to have more than one space in your columns if they are below an explicit header

[10:35] *** mtk left
[10:42] *** mtk joined
[10:57] *** homesteak left
[11:09] *** abnorman left
[11:12] *** not_gerd joined
[11:14] <not_gerd> r: my %h = <a 1 b 1 c 2>; %().push(%h.invert).perl.say

[11:14] <camelia> rakudo 10b9ac: OUTPUT«("1" => ["a", "b"], "2" => "c").hash␤»

[11:14] <not_gerd> is there a less obscure way to do that?

[11:16] * moritz isn't aware of one

[11:18] *** rindolf left
[11:19] <not_gerd> perhaps classify could take an optional argument that transforms the value is stores?

[11:19] <not_gerd> %h.classify(*.value, :map(*.key))

[11:21] *** bearman left
[11:21] <moritz> is Hash.classify still specced?

[11:22] <moritz> r: say Hash.^can('classify')

[11:22] <camelia> rakudo 10b9ac: OUTPUT«classify␤»

[11:22] <moritz> hm

[11:22] <moritz> not_gerd: seems like it should be easy to map yourself before classifying

[11:22] <moritz> or after, depending on what you want

[11:23] <moritz> remember that map allows funny stuff with closures that expect multiple arguments, so that's non-trivial to replicate inside another function

[11:26] *** rhr joined
[11:30] <not_gerd> r: my %h = <a 1 b 1 c 2>; %h.classify(*.value).pairs.map({ ; .key => .value>>.key }).hash.perl.say

[11:30] <camelia> rakudo 10b9ac: OUTPUT«("1" => $("a", "b"), "2" => $("c",)).hash␤»

[11:30] <not_gerd> I wouldn't call that easy exactly

[11:30] <not_gerd> ot do I miss something obvious?

[11:31] <not_gerd> ^or

[11:31] <not_gerd> r: my %h = <a 1 b 1 c 2>; %h.classify(*.value).pairs.map({ ; .key => .value.map(*.key).item }).hash.perl.say

[11:31] <camelia> rakudo 10b9ac: OUTPUT«("1" => ().list.item, "2" => ().list.item).hash␤»

[11:31] <not_gerd> ^bug?

[11:32] <moritz> I don't know Hash.classify enough to know

[11:33] <not_gerd> moritz: I suspect it's the map within a map that causes the problem

[11:33] <not_gerd> see that it works when replacing .map(*.key) with >>.key

[11:38] <not_gerd> r: my @a = [<1 2 3>], [<4 5 6>]; @a.map({ .map(* + 1).item }).perl.say

[11:38] <camelia> rakudo 10b9ac: OUTPUT«((2, 3, 4).list.item, (5, 6, 7).list.item).list␤»

[11:38] <not_gerd> ^ works, so it might indeed be classify-related

[11:41] <moritz> r: my %h = <a 1 b 1 c 2>; %h.classify(*.value).perl.say

[11:41] <camelia> rakudo 10b9ac: OUTPUT«("1" => ["a" => "1", "b" => "1"], "2" => ["c" => "2"]).hash␤»

[11:41] *** slavius joined
[11:42] <slavius> perl6:   say "Hello slavi"

[11:42] <camelia> rakudo 10b9ac, niecza v24-88-g1f87209: OUTPUT«Hello slavi␤»

[11:42] *** bearman joined
[11:43] <slavius> perl6:   say "Nice :-)"

[11:43] <camelia> rakudo 10b9ac, niecza v24-88-g1f87209: OUTPUT«Nice :-)␤»

[11:44] *** slavius left
[11:59] *** skids left
[12:00] <not_gerd> rn: printf '%1$i', 1, 2, 3

[12:00] <camelia> rakudo 10b9ac: OUTPUT«'$' is not valid in sprintf format sequence '%1$'␤  in sub sprintf at src/gen/CORE.setting:3154␤  in sub printf at src/gen/CORE.setting:3159␤  in block  at /tmp/4N73w6DT_m:1␤␤»

[12:00] <camelia> ..niecza v24-88-g1f87209: OUTPUT«1»

[12:02] *** iSlug joined
[12:04] <FROGGS> not_ge[12:35] *** ilogger2 joined perl6

[12:35] *** ChanServ sets mode: +v ilogger2

[12:37] <FROGGS> grondilu: did you mean 'once' ?

[12:37] <FROGGS> rn: for <a b c> { .print; once { print '!' } }

[12:37] <camelia> niecza v24-88-g1f87209: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤     'once' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1502 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 36) ␤  at /hom…

[12:37] <camelia> ..rakudo 10b9ac: OUTPUT«a!bc»

[12:38] <grondilu> FROGGS: I did not know this one.  (I guess I need to read S04 again)

[12:38] <grondilu> ty

[12:39] <FROGGS> you're welcome

[12:39] <grondilu> r: for <3 1 4 1 5> { .print; once print '.' }

[12:39] <camelia> rakudo 10b9ac: OUTPUT«3.1415»

[12:39] * grondilu was just checking if he had to use {}

[12:40] <FROGGS> yeah

[12:49] <colomon> has anyone gotten jakudo to build today, or is it just me and moritz having issues?

[12:52] <FROGGS> I can try...

[12:58] *** bluescreen10 joined
[13:01] <FROGGS> I get the following when making rakudo: src/vm/jvm/runtime/org/perl6/rakudo/Binder.java:5: error: package org.perl6.nqp.runtime does not exist

[13:02] *** denis_boyun joined
[13:07] *** kbaker joined
[13:09] *** ajr joined
[13:10] *** ajr is now known as Guest10032

[13:10] *** Guest10032 is now known as ajr_

[13:27] *** skids joined
[13:27] *** denis_boyun left
[13:29] <FROGGS> nqp-jvm: say("1.01".WHAT)

[13:29] <camelia> nqp-jvm: OUTPUT«␤»

[13:29] <masak> oh hai from l'airport!

[13:30] <FROGGS> hi masak 

[13:30] <TimToady> oh hai from l'ome

[13:30] <FROGGS> o/

[13:30] <TimToady> or would that be oh 'ai? :)

[13:31] * TimToady was never particularly noted for consistency though...

[13:31] <masak> moritz: I think Hash.classify got un-spec'd, but it may not have got un-impl'd.

[13:32] <FROGGS> o' 'ai froḿ l'ome

[13:34] <TimToady> when I try to make rakudo/jvm, I get: make: *** No rule to make target `src/Perl6/ConstantFolder.nqp', needed by `blib/Perl6/ConstantFolder.jar'.  Stop.

[13:34] <huf> accent on an 'm'?! that's going too far!

[13:36] <FROGGS> :o)  I just wanted to "say" it nasal

[13:36] <FROGGS> is "nasal" the right word?

[13:36] <TimToady> well, English speakers should probably not be making fun of other people's orthographic systems, glass houses and all that...

[13:36] <huf> m is already pretty nasal :)

[13:36] <TimToady> yes, "nasal" is a perfectly good linguistics word :)

[13:36] <FROGGS> k

[13:37] <huf> TimToady: i found interspel the other week. it's pretty clever and would let english speakers throw those glass houses around

[13:37] <TimToady> that 'ouses to you :P

[13:37] <huf> you mean "huss", surely

[13:37] <[Coke]> TimToady: when you say rakudo/jvm do you mean the jvm branch?

[13:38] *** sqirrel joined
[13:38] <TimToady> yes

[13:38] <[Coke]> (should be using nom)

[13:38] <[Coke]> it's all nom these days.

[13:38] <TimToady> my nom has defaulted to jvm for a few weeks now

[13:38] <TimToady> but maybe that came unstuck somehow

[13:39] <TimToady> attempting to reconf nqp to see if it helps

[13:44] <masak> was just gonna suggest that.

[13:44] <FROGGS> my nqp/head+rakudo/nom is broken too

[13:45] <FROGGS> err, nqp/master... both HEAD

[13:45] <FROGGS> I might clean up nqp just to maske sure

[13:45] <TimToady> nqp rebuilt fine, now for rakudo

[13:49] <FROGGS> no, mine still dies with: src/vm/jvm/runtime/org/perl6/rakudo/Binder.java:5: error: package org.perl6.nqp.runtime does not exist

[13:51] <TimToady> now compiling lib/Test.pm I get: org.perl6.nqp.runtime.UnwindException

[13:51] <TimToady> did you re-install the nqp?

[13:51] <FROGGS> I did

[13:51] <TimToady> and reconfig rakudo with that nqp?

[13:52] <FROGGS> hmmm, no, I did that before reinstalling...

[13:52] <TimToady> did yours die before or after compiling the setting?  mine was after

[13:52] <FROGGS> k, did git clean -dxf, configured, made, but it explodes the same

[13:53] <FROGGS> mine earlier

[13:53] <FROGGS> perl -MExtUtils::Command -e mkpath bin

[13:53] <FROGGS> javac -source 1.7 -cp /nqp-runtime.jar:/asm-4.1.jar:/asm-tree-4.1.jar:/jline-1.0.jar -g -d bin src/vm/jvm/runtime/org/perl6/rakudo/*.java

[13:53] <FROGGS> src/vm/jvm/runtime/org/perl6/rakudo/Binder.java:5: error: package org.perl6.nqp.runtime does not exist

[13:53] <FROGGS> pretty early actually

[13:53] <TimToady> yeah, mine got further for some reason

[13:53] <TimToady> 32 or 64-bit?

[13:53] <TimToady> mine's 64

[13:54] <FROGGS> mine too (ubuntu)

[13:54] <TimToady> did pull right before too, so we should have the same codebase

[13:54] <FROGGS> Today

[13:54] <FROGGS> 13:51 UTC We are currently investigating problems with GitHub.com. We'll provide an update once we have more information.

[13:54] <FROGGS> -.-

[13:54] * TimToady never did the clean though

[13:55] <TimToady> so maybe something got cleaned out too much

[13:55] <FROGGS> yeah, and I wanted to have a look at the latest commits, because I think grondilu said he has problems for two days now

[13:56] * TimToady tries again with 'make clean'

[13:56] *** jeff_s1 joined
[13:56] <tadzik> wow, Borispol has a working free wifi

[13:57] <TimToady> FROGGS: are you up-to-date on your java version?

[13:58] <TimToady> javac 1.7.0_25

[13:58] <FROGGS> java version "1.7.0_25"

[13:58] <FROGGS> OpenJDK Runtime Environment (IcedTea 2.3.10) (7u25-2.3.10-1ubuntu0.13.04.2)

[13:58] <FROGGS> OpenJDK 64-Bit Server VM (build 23.7-b01, mixed mode)

[13:58] <FROGGS> yeah

[13:59] <TimToady> 4gig memory here, if it makes a difference

[14:00] <masak> there's some trouble building rakudo-jvm in the backlog. not exactly the same as yours, but build problems.

[14:00] <masak> the solution there was rebuilding the nqp dependency, I think.

[14:00] <TimToady> strange, the parse went from 83 to 98 seconds

[14:01] <TimToady> masak: we both rebuilt our nqp

[14:01] <FROGGS> I've got 8gig

[14:01] <TimToady> same failure in Test.pm for me

[14:01] <masak> ok, then I think we're in bisect land.

[14:03] *** thou joined
[14:04] <FROGGS> masak: how do I get a gommit id from a week ago?

[14:04] <FROGGS> (without a working github website)

[14:05] <masak> FROGGS: git show master@{one week ago}

[14:05] <FROGGS> that sounds a bit like a joke, problem is, I trust you

[14:06] <FROGGS> fatal: ambiguous argument 'master@{one': unknown revision or path not in the working tree.

[14:06] <masak> FROGGS: is that Rakudo? then it's nom, not master

[14:06] <FROGGS> nqp

[14:07] <FROGGS> I'm on master fwiw

[14:07] <masak> ah, I needed to do `git show 'master@{one week ago}'`

[14:07] <FROGGS> awesome # masak++

[14:10] <tadzik> bah, I can't confinve NQP::Configure to like my --gen-nqp on JVM

[14:10] <tadzik> convince, even

[14:11] *** rindolf joined
[14:11] <TimToady> did you mean --gen-parrot?

[14:11] <TimToady> oh, nm

[14:11] <TimToady> if you mean on nom, I use --with-nqp

[14:12] <FROGGS> yeah, --with-nqp ~/dev/nqp-jvm/install/nqp  # or so

[14:12] * TimToady goes to get more coffee, at this point more a necessity than a luxury...

[14:12] <FROGGS> yeah, --with-nqp=~/dev/nqp-jvm/install/nqp  # <---

[14:12] <tadzik> yeah, I wanted it to DTRT for --gen-nqp

[14:12] <tadzik> but it seems to hang on git-fetch somehow

[14:12] <tadzik> I eventually gave up ;)

[14:12] <tadzik> I blame airport wifi

[14:12] <FROGGS> tadzik: github has problems

[14:12] <tadzik> ah

[14:13] <tadzik> maybe I shouldn't have git checkout -f'd my changes

[14:15] <FROGGS> AHHHHHHHHHH

[14:16] <FROGGS> it fails so early when I do: perl ConfigureJVM.pl --with-nqp=~/..., I really have to supply an absolute path

[14:18] <FROGGS> stage parse 56s, I love it

[14:18] <FROGGS> (that is both nqp and rakudo from a week ago)

[14:19] *** sqirrel left
[14:20] *** sqirrel joined
[14:27] *** ivanoff joined
[14:32] <alexghacker> [Coke]: yesterday you said that NFG / graphemes are not currently the default (which is viewed as a bug, or at least a missing feature), but it occurs to me that maybe there is a way to get NFG semantics if I ask perl6 nicely

[14:38] <[Coke]> if by that you mean "write your own code", sure.

[14:39] <[Coke]> but SFAIK, there's nothing baked into the language at this point, in any impl.

[14:39] *** Psyche^_ joined
[14:41] *** colomon joined
[14:41] <TimToady> FROGGS: so, did your build get past Test.pm?

[14:42] <FROGGS> TimToady: yes, the versions from a week ago made and installed fine

[14:42] *** nyuszika7h joined
[14:42] <FROGGS> but bisecting is hard because ops got added

[14:43] <TimToady> ah, you were doing from a week ago

[14:44] <FROGGS> now I am on nqp HEAD, and try to bisect rakudo, starting at HEAD

[14:44] * TimToady doesn't know whether to hope it fails :)

[14:45] <FROGGS> well, I hope rakudo/HEAD fails here :o)

[14:45] <TimToady> FROGGS++ for bisecting this

[14:46] <FROGGS> np

[14:46] <TimToady> or at least monosecting it so far :)

[14:46] <FROGGS> hehe

[14:46] *** benabik joined
[14:46] <FROGGS> monosecting sounds more like niecza

[14:46] * TimToady looked through the git logs, but didn't see anything obvious

[14:48] <FROGGS> ./perl6 --target=jar --output=blib/Test.jar lib/Test.pm

[14:48] <FROGGS> ===SORRY!===

[14:48] <FROGGS> org.perl6.nqp.runtime.UnwindException

[14:48] <FROGGS> so far so good

[14:50] <TimToady> that looks familiar :)

[14:57] * TimToady is looking at the palindrom detector containing .flip eq $_ and thinking, wouldn't it be nice if we could write that .flip eq ._ or some such

[14:58] <TimToady> just to keep the parallelism

[14:58] <TimToady> *literary parallelism

[14:59] <FROGGS> what about .flip eq .Str ?

[14:59] <geekosaur> ._ looks kinda off conceptually, though. seems like * would be a better fit somehow?

[14:59] <geekosaur> hm, .id

[14:59] <TimToady> well, it's the identi...yeah

[14:59] <geekosaur> or maybe that's what ._ is

[15:00] <TimToady> and ._ would basically just a different name for $_ :)

[15:00] <TimToady> as a term

[15:01] <TimToady> I dunno if it's really an improvement, but we should probably have an identity method in any case

[15:01] <rjbs> Another day answering encoding questions on p5p, another day longing for Buf.

[15:01] <TimToady> nodnod

[15:03] <TimToady> or maybe even nodnodnod

[15:04] <rjbs> The good part is that I felt really really good about my answer and providing it has improved my day already.

[15:04] <TimToady> rjbs++

[15:04] <rjbs> I may reward myself by turning my ZSCII p6 library into a proper module and putting it in the ecosystem.

[15:05] <rjbs> You know, for all those p6 Z-Machine emulators we're expecting.

[15:05] <TimToady> now where have I heard this before...

[15:06] <rjbs> Yow, looks like I haven't backported 90% of ZMachine::ZSCII to my write-z5.p6 code.  So there are two parts to do.

[15:06] <FROGGS> what is a Z-Machine?

[15:06] <rjbs> perl6++ # hyphen-minus in identifiers!

[15:07] <rjbs> FROGGS: It's the VM from the mid-80's on which Zork and friends ran.

[15:07] <TimToady> geekosaur: but we can't afford to use up the .id method, since that's too useful in userland

[15:07] <rjbs> FROGGS: ZSCII is its bizarre charset and encoding.

[15:07] <rjbs> ("pronounced to rhyme with xyzzy")

[15:07] <FROGGS> rjbs: I've heard about a Z80 chip... is it that one?

[15:07] <rjbs> No, totally unrelated.

[15:07] <FROGGS> ahh, okay

[15:07] <rjbs> The Z-Machine is more like the JVM. :-)

[15:07] <FROGGS> ahh, I see

[15:07] *** kbaker left
[15:07] <rjbs> It's actually a fun little machine, read the spec someday if you're bored.

[15:08] <FROGGS> ahh, now I read the VM bit.... :o)

[15:08] <FROGGS> rjbs: I have two kids, sooo........ :P

[15:08] <TimToady> you are in a maze of twisty little adventure games, all the same...

[15:08] *** ajr_ left
[15:08] <rjbs> FROGGS: So you'll need to show them Zork anyway... :)

[15:08] <FROGGS> *g*

[15:08] <FROGGS> someday, yes

[15:08] <TimToady> well, first adventure, since that predated everything else :)

[15:08] <rjbs> TimToady: Ovid has just written a p5 'terp for the Scott Adams games, too...

[15:09] <TimToady> .oO(That adventure game, it's so derivative. :)

[15:09] *** ajr joined
[15:09] <rjbs> At OSCON, I tried to sit at any of the "topic tables" that weren't what I do.

[15:09] <TimToady> I have a radio in my brain!

[15:09] *** ajr is now known as Guest24973

[15:10] <rjbs> So I sat down with the "UX Designers" table and found out the guy next to me was trying to learn programming and had just written a text adventure in Python (or was it Ruby?).

[15:10] <rjbs> I totally geeked out and showed him the state of the art for writing them.  Fun!

[15:10] <dalek> Perlito: b3566a1 | (Flavio S. Glock)++ | / (3 files):

[15:10] <dalek> Perlito: Perlito5 - grammar - simplify the grammar compiler

[15:10] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/b3566a10ab

[15:11] <rjbs> TimToady: Um... I hope that is an allusion that was lost on me!

[15:11] <TimToady> well, then there was DDL "Dungeon Definition Language", which was kind of a Lisp variant, as I recall

[15:11] <TimToady> "You're in the COSMIC ALL!  How did you get here?!?"

[15:11] <TimToady> (sez the room contain all the other rooms)

[15:11] *** Guest24973 is now known as ajr_

[15:11] <TimToady> *taining

[15:13] <FROGGS> when rakudo gets a bit faster this year I'm going to port my games to Perl 6 too (because I really don't wanna write Perl 5 anymore for some reason)

[15:13] <rjbs> Right, I know a little about DDL.

[15:13] <rjbs> It was an MDL variant, of course.

[15:14] <rjbs> Later it became ZIL, the Zork Implementation Language, which is mostly lost to time, but we have some fragments.

[15:14] <TimToady> the allusion was to Bureaucracy, btw

[15:14] <rjbs> Ah!

[15:14] <rjbs> I have not played that one yet.

[15:14] <TimToady> it was an Amiga game

[15:14] <rjbs> About a year ago I promised myself I would play through all of them in order.

[15:14] <rjbs> Amiga was an Infocom game, so it plays on any Z-Machine!

[15:14] <rjbs> Including the one that will be written for p6. :)

[15:14] <rjbs> Er, s/Amiga/Bureaucracy

[15:15] <TimToady> it was a Douglas Adams game

[15:15] <rjbs> Yeah.  I've heard it stank. :(

[15:16] <TimToady> I never solved it, so maybe it did. :)

[15:16] <rjbs> http://rjbs.manxome.org/rubric/~rjbs/int-fiction <-- haven't made progress on "The Great Infocom Replay" since February!

[15:16] <rjbs> I'll surely make some on the flights to/from YAPC::Asia, anyway.

[15:29] <FROGGS> TimToady: this one is the bad commit: https://github.com/rakudo/rakudo/commit/144a3f87f58e576159c1dea7b6a8854f2bdc1e86

[15:29] <FROGGS> lizmat reverted a commit, but it looks like she reverted the wrong one

[15:29] <FROGGS> so, this one is the last that is okay: https://github.com/rakudo/rakudo/commit/5f460187c89ec42b98925dccebe1962b5efdbc60

[15:31] <FROGGS> but btw, my changes to nqp::sprintf seems to work (specifying parameter index using 1$, 3$, ...)

[15:32] *** sqirrel left
[15:41] *** slavik joined
[15:48] * TimToady wonders if the right way to make p5 interoperate with NFG is to give p5 an NFG implementation in parallel with its utf8 implementation...

[15:49] <TimToady> then p6 could call into p5 without translating to utf8 and back

[15:51] <slavik> nfg?

[15:51] <TimToady> one step beyond NFC, where we synthesize codepoints for missing precomposed chars

[15:56] *** colomon left
[16:05] *** pmurias joined
[16:05] <pmurias> TimToady: re give p5 and NFG, can it be done without a slowdown?

[16:06] <pmurias> s/slowdown/paying the price of a check on every string operation/?

[16:07] *** ivanoff left
[16:08] *** wtw_ joined
[16:08] *** wtw_ left
[16:08] *** wtw joined
[16:16] *** diakopter joined
[16:16] <diakopter> r: [say $]

[16:16] <camelia> rakudo 10b9ac: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/cNQK4oKRMG␤Non-declarative sigil is missing its name␤at /tmp/cNQK4oKRMG:1␤------> [32m[say [33m⏏[31m$][0m␤    expecting any of:␤        argument list␤        prefix or term␤        prefix or meta-prefix␤…

[16:16] <diakopter> r: [say $$]

[16:16] <camelia> rakudo 10b9ac: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/VtkPbhWkNy␤Non-declarative sigil is missing its name␤at /tmp/VtkPbhWkNy:1␤------> [32m[say $[33m⏏[31m$][0m␤    expecting any of:␤        argument list␤        prefix or term␤        prefix or meta-prefix…

[16:17] <diakopter> r: [say my $]

[16:17] <camelia> rakudo 10b9ac: OUTPUT«(Any)␤»

[16:17] <diakopter> std: [say my $]

[16:17] <camelia> std c2215f0: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of $] variable; in Perl 6 please use $*PERL_VERSION at /tmp/6oNqrbC5vP line 1:␤------> [32m[say my $][33m⏏[31m<EOL>[0m␤Parse failed␤FAILED 00:00 44m␤»

[16:17] <diakopter> mwahaha

[16:18] *** colomon joined
[16:19] *** pmurias left
[16:20] *** kaare_ joined
[16:21] <gfldex> is there video evidence for jnthn's concurrency YAPC talk?

[16:23] *** dmol joined
[16:27] *** japhb joined
[16:27] <grondilu> rn: say max :by(*.elems), ().list

[16:27] <camelia> rakudo 10b9ac, niecza v24-88-g1f87209: OUTPUT«-Inf␤»

[16:28] * grondilu does not understand where that -Inf comes from :/

[16:28] *** ajr_ left
[16:28] <diakopter> probably that's the default the algorithm starts with

[16:29] <grondilu> still, it's supposed to sort by length (so ok the default is -Inf), but the result should be a member of the list, not a length.

[16:30] <grondilu> so I would have expected (), Nil or something.

[16:31] <grondilu> not a number anyway, even infintely small.

[16:32] <grondilu> in case you're wondering, I come up with this issue while trying to write code for http://rosettacode.org/wiki/Longest_increasing_subsequence

[16:36] <colomon> -Inf isn't infinitely small, it's infinitely big and negative.

[16:37] <itz> ==> Building Rakudo::Debugger

[16:37] <itz> error:imcc:loadlib directive could not find library `perl6_group' in file 'perl6-debug.pir' line 1

[16:37] <colomon> rn: say ().list.max(:by(*.elems))

[16:37] <camelia> niecza v24-88-g1f87209: OUTPUT«Unhandled exception: Excess arguments to List.max, unused named by␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (List.max @ 1) ␤  at /tmp/j9ZUzQRNqn line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4579 (ANON @ 3) ␤  at /home/p6eva…

[16:37] <camelia> ..rakudo 10b9ac: OUTPUT«-Inf␤»

[16:37] <colomon> rn: say ().list.max()

[16:37] <camelia> rakudo 10b9ac, niecza v24-88-g1f87209: OUTPUT«-Inf␤»

[16:40] <colomon> Yeah, that's just the default "nothing to see here" value

[16:41] <colomon> rn: say (().list).max()

[16:41] <camelia> rakudo 10b9ac, niecza v24-88-g1f87209: OUTPUT«-Inf␤»

[16:41] <colomon> rn: say [().list].max()

[16:41] <camelia> rakudo 10b9ac, niecza v24-88-g1f87209: OUTPUT«-Inf␤»

[16:45] *** spider-mario joined
[16:48] *** isBEKaml joined
[16:48] <TimToady> it's just the maximum of an an empty list in each case

[16:50] <TimToady> r: say [min]()

[16:50] <camelia> rakudo 10b9ac: OUTPUT«Inf␤»

[16:50] <TimToady> r: say [max]()

[16:50] <camelia> rakudo 10b9ac: OUTPUT«-Inf␤»

[16:50] <TimToady> that one

[16:51] <TimToady> you've just discovered there are many ways to write something that is a list of 0 elements :)

[16:58] *** EvanTeitelman joined
[16:58] *** colomon left
[16:58] *** isBEKaml` joined
[16:58] <dmol> r: say [+]()

[16:58] <camelia> rakudo 10b9ac: OUTPUT«0␤»

[16:58] *** isBEKaml` left
[16:59] <dmol> r: say: [=]()

[16:59] <camelia> rakudo 10b9ac: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/G9wWm1kYyh␤Two terms in a row␤at /tmp/G9wWm1kYyh:1␤------> [32msay[33m⏏[31m: [=]()[0m␤    expecting any of:␤        argument list␤        postfix␤        infix stopper␤        infix or meta-infix␤       …

[16:59] <TimToady> std: [=]()

[16:59] <camelia> std c2215f0: OUTPUT«[31m===[0mSORRY![31m===[0m␤Cannot reduce with = because list assignment operators are too fiddly at /tmp/bhaci_efat line 1:␤------> [32m[=][33m⏏[31m()[0m␤Check failed␤FAILED 00:00 42m␤»

[16:59] <TimToady> that's less LTA

[16:59] <TimToady> r: say [||]()

[16:59] <camelia> rakudo 10b9ac: OUTPUT«False␤»

[16:59] <TimToady> r: say [||]

[16:59] <camelia> rakudo 10b9ac: OUTPUT«False␤»

[17:00] <TimToady> okay, don't need the () anymore, good

[17:02] *** isBEKaml left
[17:03] *** EvanTeitelman left
[17:04] <tadzik> WAW! \o/

[17:05] *** araujo joined
[17:06] <geekosaur> ן

[17:06] *** GlitchMr joined
[17:09] *** Celelibi joined
[17:17] *** kaare_ left
[17:21] *** colomon joined
[17:23] *** xinming joined
[17:32] *** colomon left
[17:44] *** abnorman joined
[17:46] <PerlJam> when building rakudo-jvm, what's the solution to an "Could not reserve enough space for object heap"  error?

[17:46] <[Coke]> looks like the rakudo.jvm build failure is tanking the spec today.

[17:52] <[Coke]> arglebargle. my local copy of the daily run repo has a screwed up ysterday, looks like I never dealt with it.

[17:53] <diakopter> oopsie

[17:53] <[Coke]> and now removing it is a PITA because I have a valid today after it.

[17:54] *** vk_ joined
[17:55] *** crab2313 joined
[17:57] <dalek> perl6-roast-data: c4d33cd | coke++ | / (5 files):

[17:57] <dalek> perl6-roast-data: today (automated commit)

[17:57] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/c4d33cde2b

[17:57] <[Coke]> saved the summary for yesterday, pretty sure we didn't have the .out files today.

[17:57] <[Coke]> jnthn: rakudo.jvm now at 0% - update slides immediately!

[17:58] <diakopter> heh

[17:59] *** SamuraiJack joined
[17:59] <[Coke]> diakopter: now is your chance for moar's come-from-behind victory

[17:59] <diakopter> hah.

[18:09] <[Coke]> seen lizmat

[18:09] <[Coke]> .seen lizmat

[18:09] <yoleaux> I saw lizmat 08:07Z in #perl6: <lizmat> decommuting&

[18:09] <preflex>  yoleaux: you have 2 new messages. '/msg preflex messages' to read them.

[18:09] <[Coke]> .to preflex DIE DIE DIE

[18:09] <yoleaux> [Coke]: I'll pass your message to preflex.

[18:11] <geekosaur> is there actually consensus that preflex should not be here? if so I can talk to mauke about it

[18:13] <PerlJam> geekosaur: preflex only seems to pipe up when yoleaux (another bot) speaks.

[18:13] <PerlJam> geekosaur: it's annoying at the very least.

[18:14] * geekosaur has no idea who/what put messages for one bot in the other. preflex is *supposed* to be silent most of the time

[18:14] <geekosaur> but it has no idea that someone is trying to send messages to another bot via it

[18:14] <PerlJam> aye.

[18:15] <PerlJam> (I rarely notice it, but in the last few days either I've been paying better attention, or it's been happening more often)

[18:15] <geekosaur> I mean, if that's the only issue, I can ask mauke to clear those messages (but if we don't know where they came from, what prevents it happening again?P

[18:15] <geekosaur> otoh if there's no actual purpose being served by the bot, no reason for it to be here

[18:17] <[Coke]> IWBNI preflex could keep track of bots and not bother passing along things for them." clearing out those messages would be a fine start, though.

[18:18] <[Coke]> looking at the help for preflex, I see nothing in there we need that yoleaux isn't doing.

[18:18] <[Coke]> can mauke tell us who asked for it to be in here and why? that'll also help.

[18:20] <tadzik> after-landing push :)

[18:20] <dalek> nqp/jvm-sockets: a81a89a | tadzik++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[18:20] <dalek> nqp/jvm-sockets: Don't leave VMArray in a bogus state

[18:20] <dalek> nqp/jvm-sockets: review: https://github.com/perl6/nqp/commit/a81a89a831

[18:23] <[Coke]> tadzik: I'll fix star tonight - which modules are replacing file tools?

[18:23] <tadzik> [Coke]: Shell::Command and File::Find

[18:23] <tadzik> thank you, [Coke]++

[18:23] <tadzik> I can't grok submodules

[18:23] <[Coke]> me neither, but I have a night off. ;)

[18:23] <tadzik> hah :)

[18:23] <tadzik> [Coke]: S:C depends on F:F

[18:24] <tadzik> I need to read up on read() and recv() on sockets

[18:24] <tadzik> oh, not specced. I can do what I want >:>

[18:32] *** woolfy joined
[18:36] *** Mouq joined
[18:37] <dalek> nqp/jvm-sockets: 0a65414 | tadzik++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[18:37] <dalek> nqp/jvm-sockets: Fix a copy-pasto

[18:37] <dalek> nqp/jvm-sockets: review: https://github.com/perl6/nqp/commit/0a65414447

[18:43] <dalek> nqp/jvm-sockets: 46d2162 | tadzik++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[18:43] <dalek> nqp/jvm-sockets: Make nqp::accept() less wrong, and thus make it actually work

[18:43] <dalek> nqp/jvm-sockets: review: https://github.com/perl6/nqp/commit/46d2162d28

[18:58] *** donaldh joined
[18:58] <tadzik> fun fact: rakudo-jvm for $*OS returns 'Linux', which confuses roast, which expects 'linux', as Parrot does

[18:58] <tadzik> I don't see a spec on this, I'll just make roast less stric

[18:59] <labster> $*OS isn't specced, it's supposed to be $*KERNEL.

[19:01] <FROGGS> r: say $*KERNEL

[19:01] <camelia> rakudo 10b9ac: OUTPUT«Dynamic variable $*KERNEL not found␤  in method gist at src/gen/CORE.setting:11391␤  in method gist at src/gen/CORE.setting:990␤  in sub say at src/gen/CORE.setting:12287␤  in block  at /tmp/TE9yOT7gq_:1␤␤»

[19:03] <labster> Yeah, I'm well aware that no one actually implements it as $*KERNEL.  I get the feeling that changing it now would break a lot in DarkPAN6. :P

[19:11] <FROGGS> r: say " " ~~ m:P5/[ ]/

[19:11] <camelia> rakudo 10b9ac: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/rL87SVXu5v␤failed to parse character class; unescaped ']'?␤at /tmp/rL87SVXu5v:1␤------> [32msay " " ~~ m:P5/[[33m⏏[31m ]/[0m␤    expecting any of:␤        colon pair (restricted)␤»

[19:12] <FROGGS> r: say "1" ~~ m:P5/[1]/

[19:12] <camelia> rakudo 10b9ac: OUTPUT«｢1｣␤␤»

[19:12] <FROGGS> r: say "1" ~~ m:P5/[1 ]/

[19:12] <camelia> rakudo 10b9ac: OUTPUT«｢1｣␤␤»

[19:12] <FROGGS> r: say " " ~~ m:P5/[1 ]/

[19:12] <camelia> rakudo 10b9ac: OUTPUT«False␤»

[19:12] <FROGGS> I call it a bug

[19:19] <dalek> Perlito: c3449a4 | (Simon Bertrang)++ | t5-xs/ (41 files):

[19:19] <dalek> Perlito: Perlito5 - XS - organize tests a bit

[19:19] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/c3449a4001

[19:20] *** donaldh left
[19:20] *** berekuk joined
[19:21] *** SamuraiJack left
[19:21] *** benabik left
[19:24] <tadzik> oh gosh, IO-Socket-INET.t is tricky

[19:27] *** abnorman left
[19:30] *** rindolf left
[19:30] <dalek> nqp: 10db957 | (Tobias Leich)++ | src/QRegex/P5Regex/Grammar.nqp:

[19:30] <dalek> nqp: whitespace is literal in P5 regexes

[19:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/10db9576b1

[19:32] <dalek> rakudo/jvm-sockets: e727960 | tadzik++ | / (3 files):

[19:32] <dalek> rakudo/jvm-sockets: Add a crude IO::Socket(::INET) port to JVM, add to build

[19:32] <dalek> rakudo/jvm-sockets: review: https://github.com/rakudo/rakudo/commit/e727960a26

[19:32] <tadzik> hi-ha

[19:34] <FROGGS> cool :o)

[19:41] <tadzik> if someone could actually make rakudo-jvm work outside the source directory (and load modules and stuff), that'd be super awesome :)

[19:41] <tadzik> I expect that requires some CLASSPATH-fu or such

[19:42] <tadzik> for now, when testing LWP::Simple I have to copy Test.pm to its lib/, otherwise -Ilib overwrites the path to the regular Test.pm

[19:43] <PerlJam> tadzik: setting PERL6LIB doesn't work?

[19:43] <Mouq> excuse me, but when are submethods useful?

[19:45] <PerlJam> Mouq: for BUILD at least.

[19:45] <moritz> when you understand them :-)

[19:45] *** shinobicl_ joined
[19:46] <Mouq> Hm. Alright thx :)

[19:46] *** abnorman joined
[19:46] *** awwaiid joined
[19:47] <tadzik> PerlJam: hmmm, didn't try :P

[19:47] <tadzik> rebuilding now, will try in a sec

[19:47] *** crab2313 left
[19:47] *** crab2313 joined
[19:49] <TimToady> Mouq: more generally, submethods are in charge of the current class's part of the current object, and not in charge of other parts of the current object.

[19:51] <TimToady> submethods are also restricted from (easily) calling virtual attribute names, to prevent accidental interference with other class's attributes before they are initialized (or after they're destroyed)

[19:52] <TimToady> you still *can* call virtual methods, but the bare $.foo form is disallowed since it makes it too easy to initialize or finalize out of order

[19:52] <TimToady> a submethod should generally only mess directly with $!foo storage

[19:52] *** stevan_ joined
[19:54] *** kbaker joined
[20:00] <Mouq> Ahhh, okay; I begin to understand

[20:04] <TimToady> maybe Promise.break should be renamed to Promise.bust

[20:05] *** stevan_ left
[20:06] <[Coke]> only if we rename Promise to A-Move

[20:08] <dalek> rakudo/jvm-sockets: fb42021 | tadzik++ | src/vm/jvm/core/IO/Socket.pm:

[20:08] <dalek> rakudo/jvm-sockets: Unbust recv() and read(), a bit

[20:08] <dalek> rakudo/jvm-sockets: review: https://github.com/rakudo/rakudo/commit/fb4202110f

[20:09] <diakopter> [Coke]: *groan*

[20:09] <diakopter> [Coke]: what about Your-Chops

[20:10] <[Coke]> if it's any consolation, that song snippet is now on infiloop in my brain

[20:10] * TimToady wonders how this mutated into what kind of a bikeshed to put under the paint...

[20:11] <TimToady> .oO(Bustoleum Paint)

[20:11] <diakopter> I sorta wonder if the bikeshed should be hurricane and tornado proof, or at least infinitely heavy

[20:12] <TimToady> It's really hard to paint an infinitely heavy bikeshed any color other than black...

[20:13] * [Coke] wonders what color hawking radiation is.

[20:14] <geekosaur> whatever color it wants to be

[20:14] <TimToady> for anything other than a microscopic black hole, the color is still going to be very, very, very dark

[20:14] <dalek> nqp: 68ce715 | (Tobias Leich)++ | src/HLL/sprintf.nqp:

[20:14] <dalek> nqp: added precision for s and d, also parameter index option

[20:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/68ce715b92

[20:15] <TimToady> stellar-sized black holes might emit a photon a year, or less, iirc

[20:15] <geekosaur> ...and a microscopic one you still won;t be able to tell unless you're so far away you only see broad spectrum

[20:17] <diakopter> EHEATDEATH

[20:17] <TimToady> well, I bet the radiation is mostly gamma colored

[20:18] <[Coke]> ah. My marvel history tells me gamma radiation is green. awesome.

[20:19] <TimToady> glad we got that settled

[20:20] <diakopter> +1up You Gained 1Googol J/K

[20:20] <TimToady> but then, why aren't black lights green too?

[20:21] <diakopter> EATTEMPTEDFREEASSOCIATIONWITHNEGATIVEDEGREESOFFREEDOM

[20:22] <TimToady> I hate it when that doesn't happen.

[20:23] <TimToady> the nice thing about jet lag is that you can believe impossible things after breakfast as well

[20:23] <diakopter> also, for breakfast.

[20:25] <TimToady> free association is much more idealistic than open source association

[20:25] <diakopter> EDETERMINISTICRANDDETECTED

[20:26] <TimToady> EOVERUSEOFSNOWCLONEDETECTED

[20:27] <diakopter> ^autopun

[20:29] <diakopter> I'm finding it difficult to remove the image of a snowglobe from my mind

[20:29] <TimToady> that's because it's deterministically random

[20:30] <TimToady> you should have stored it in a variable instead of in a constant

[20:31] *** bluescreen10 left
[20:31] <diakopter> my gc is really lazy

[20:32] <diakopter> like, on strike.

[20:37] *** skids left
[20:37] *** BenGoldberg joined
[20:39] *** Ben_Goldberg joined
[20:39] <Ben_Goldberg> r: say (^10).infinite, (^Inf).infinite, (^Inf)[^10].infinite;

[20:39] <camelia> rakudo 10b9ac: OUTPUT«FalseTrueNil␤»

[20:41] *** BenGoldberg left
[20:44] <Ben_Goldberg> r: ((map { $_ }, ^Inf) but role { method infinite() { True } }).say

[20:44] <camelia> rakudo 10b9ac: OUTPUT«This type does not support elems␤  in method REIFY at src/gen/CORE.setting:7493␤  in method reify at src/gen/CORE.setting:6719␤  in method reify at src/gen/CORE.setting:6706␤  in method reify at src/gen/CORE.setting:6706␤  in method reify at src/gen/CORE.setting:68…

[20:44] <Ben_Goldberg> n: ((map { $_ }, ^Inf) but role { method infinite() { True } }).say

[20:44] <camelia> niecza v24-88-g1f87209: OUTPUT«(timeout)»

[20:45] <Ben_Goldberg> r: ((map { $_ }, ^Inf) but role { method infinite() { False } }).say

[20:45] <camelia> rakudo 10b9ac: OUTPUT«(timeout)»

[20:46] <Ben_Goldberg> What's the proper way to tell perl that a particular list is finite or infinite?

[20:46] <Ben_Goldberg> r: ((map { $_ }, ^Inf) but role { method infinite() { Mu } }).say

[20:47] <camelia> rakudo 10b9ac: OUTPUT«(timeout)»

[20:50] <Ben_Goldberg> r: ((map { $_ }, ^Inf)).print

[20:50] <camelia> rakudo 10b9ac: OUTPUT«(timeout)0123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121…

[20:50] <Ben_Goldberg> r: ((map { $_ }, ^Inf) but role {}).print

[20:50] <camelia> rakudo 10b9ac: OUTPUT«This type does not support elems␤  in method REIFY at src/gen/CORE.setting:7493␤  in method reify at src/gen/CORE.setting:6719␤  in method reify at src/gen/CORE.setting:6706␤  in method gimme at src/gen/CORE.setting:7139␤  in method print at src/gen/CORE.setting:12…

[20:51] <Ben_Goldberg> n: ((map { $_ }, ^Inf) but role {}).print

[20:51] <camelia> niecza v24-88-g1f87209: OUTPUT«(timeout)»

[20:52] * Ben_Goldberg is confused

[20:52] <Ben_Goldberg> Why does mixing in an empty anonymous role cause rakudo to not like the list?

[20:53] <TimToady> something relying on introspection that isn't properly heritable, maybe

[20:58] <Ben_Goldberg> Like testing whether a list's class is exactly equal to some particular class?

[20:58] <TimToady> something inspecting $!foo when it should inspect $.foo, is another way to say it

[20:58] <Ben_Goldberg> Oh

[20:58] <TimToady> anyway, it just feels like something of that nature, dunno for sure

[20:59] <Ben_Goldberg> Perl6's guts might be cleaner than perl5's, but I still don't understand them fully, yet :)

[21:07] *** donaldh joined
[21:07] *** kbaker left
[21:19] *** donaldh left
[21:20] *** EvanTeitelman joined
[21:21] *** bruges_ joined
[21:23] *** vk_ left
[21:34] *** Ben_Goldberg left
[21:36] *** iSlug joined
[21:53] *** BenGoldberg joined
[21:54] <timotimo> hi friends. what have i missed all day?

[21:55] *** spider-mario left
[22:01] *** shinobicl_ left
[22:05] *** donaldh joined
[22:06] <timotimo>  dunno if anybody answered it yet, but itz: you can make Rakudo::Compiler compile by removing "perl6_group" from the Build.pm and running panda folder_it_is_in/

[22:06] <timotimo> er, i mean panda install folder_it_is_in

[22:10] *** sivoais joined
[22:13] *** berekuk left
[22:15] <timotimo> okay, backlogged

[22:16] <timotimo> FROGGS++ # sprintf work, finding the commit that broke rakudotjvm

[22:16] <timotimo> tadzik++ for work on sockets for the jvm! :D

[22:16] <timotimo> rest++ for the inverse bikeshed painting %)

[22:16] *** donaldh left
[22:16] *** berekuk joined
[22:19] *** crab2313 left
[22:26] *** Mouq left
[22:27] *** rjt_pl joined
[22:28] *** araujo left
[22:28] *** araujo joined
[22:31] *** skids joined
[22:35] *** FROGGS joined
[22:39] * jnthn made it home safely from YAPC

[22:39] <yoleaux> 02:15Z <JimmyZ> jnthn: I didn't see which one clones allocate object ...

[22:39] <yoleaux> 02:24Z <JimmyZ> jnthn: re: dded to libuv structs probably makes teasing it apart a bit harder, it' won't be harder, just copy uv__fs_* part on *nix and fs__* part on windows to MoarVM

[22:39] <yoleaux> 02:24Z <JimmyZ> jnthn: I think I can do it

[22:39] <yoleaux> 15:28Z <JimmyZ> jnthn: I re-do libuv in libuv1 branch, without importing(patching) libuv

[22:39] <jnthn> Hm, messages ain't sorted by channel :)

[22:51] *** iSlug left
[22:52] *** rjt_pl left
[23:00] *** shinobicl_ joined
[23:05] *** shinobicl_ left
[23:13] *** census joined
[23:27] *** EvanTeitelman left
[23:29] *** berekuk left
[23:30] <[Coke]> yoleaux--

[23:32] *** berekuk joined
[23:32] <[Coke]> do we want to do a star release this month?

[23:33] <dalek> rakudo-star-daily: a0b5b81 | coke++ | log/ (5 files):

[23:33] <dalek> rakudo-star-daily: today (automated commit)

[23:33] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/a0b5b81a73

[23:34] *** cono joined
[23:48] *** berekuk left
[23:50] *** berekuk joined
[23:51] <[Coke]> do we have anyone in the house who understands submodules?

[23:59] *** cognominal joined
