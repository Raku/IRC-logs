[00:00] *** rurban1 joined
[00:04] *** rurban1 left
[00:18] *** cognominal__ joined
[00:21] *** cognominal left
[00:27] *** rafl joined
[00:32] *** rafl left
[00:34] *** rafl joined
[00:34] *** tgt left
[00:38] *** rurban1 joined
[00:40] * [Coke] waves from post-thanksgiving food coma.

[00:45] *** rafl left
[00:45] *** rafl joined
[00:47] *** rurban1 left
[00:49] *** prevost joined
[00:52] *** rafl left
[00:53] *** rafl joined
[01:00] *** hypolin joined
[01:00] *** hypolin left
[01:15] * colomon is watching end of MST3K marathon

[01:16] *** jnap left
[01:32] *** fridim__ joined
[01:41] *** jnap joined
[01:45] *** araujo left
[01:48] *** rurban1 joined
[01:50] *** araujo joined
[01:53] *** rurban1 left
[01:53] *** araujo left
[01:54] *** araujo joined
[02:06] *** raydiak left
[02:11] *** raydiak joined
[02:39] *** BenGoldberg joined
[02:52] *** prevost left
[03:11] *** colomon left
[03:13] *** colomon joined
[03:16] *** rurban1 joined
[03:44] *** benabik left
[03:55] *** Maddingu1 joined
[03:57] *** Maddingue left
[04:07] *** gfldex joined
[04:08] *** aindilis left
[04:09] *** aindilis joined
[04:15] *** colomon left
[04:16] *** colomon joined
[04:21] <cxreg> so regarding concurrency, is it the plan to take the heretical "what we did on jvm" and make that the official spec?

[04:27] *** woosley left
[04:28] *** woosley joined
[04:33] <TimToady> it already is

[04:33] <TimToady> and I've already installed at least one rosettacode entrie that relies on it :)

[04:34] <TimToady> 'entrie' sound tres chic

[04:35] *** fridim__ left
[04:36] <TimToady> cxreg: see http://rosettacode.org/wiki/Metered_concurrency#Perl_6

[04:36] <cxreg> neat.  TimToady++

[04:37] <cxreg> i really like the look of the whole thing.

[04:37] <cxreg> jnthn++

[04:37] <TimToady> dining philosophers is a bit more...problematic...

[04:37] <cxreg> it's like the good parts of node.js without the horrible parts

[04:37] <cxreg> now, we just need a complement of useful libraries.  to the batcave!

[04:39] <cxreg> we have deadlocking issues?

[04:39] <TimToady> depends on which primitives you use, and how you use them :)

[04:40] <cxreg> ok, fair enough

[04:40] <cxreg> enuf rope and such

[04:40] <TimToady> but D.P. is specifically designed to be difficult

[04:41] * TimToady is thinking of solving it by making whoever just finished dinner grab the single large lollipop, which takes two hands to hold, and keeps you from getting hungry again until someone else grabs it :)

[04:42] *** jnap left
[04:43] <TimToady> but we don't have forks or lollipops as primitives; philosophers can easily be started, however :)

[04:46] <cxreg> nci for rakudo on jvm is still zavolaj right?

[04:46] * TimToady suspects his lollipop solution is equivalent to using a "waiter"

[04:46] <TimToady> it's still in the works, as I understand it

[04:46] <cxreg> Waiter Model > Actor Model? :)

[04:47] <TimToady> using a metaphorical waiter who refuses to serve a philosopher that might cause deadlock

[04:48] <TimToady> other solutions are of the form, make some subset of the philosophers left-handed

[04:49] <TimToady> or introduce a retry on failure to get both forks

[04:51] * TimToady suspects the Pike solution can still deadlock, if we take its description at face value: this solution avoids deadlocks by adding a 20% chance that a philosopher drops the fork if he can't pick up both. 

[04:53] <TimToady> seems quite likely that all five philosophers would choose the 80% chance

[04:54] <TimToady> http://rosettacode.org/wiki/Dining_philosophers is the entry in question, btw

[04:57] *** preflex_ joined
[04:57] *** ChanServ sets mode: +v preflex_

[04:58] *** preflex left
[04:58] *** preflex_ is now known as preflex

[05:03] <lue> .oO(This situation is easily avoided by reminding the waitstaff that everyone requires two forks and really it would be simpler to just have 10 forks right there.)

[05:08] <lue> Is there no Perl 6 way for http://rosettacode.org/wiki/Mutex yet, or has our resident RosettaCode writer TimToady just not gotten to it yet? :)

[05:08] *** rurban1 left
[05:15] <TimToady> we have more than one such writer

[05:16] <TimToady> in a sense, a Mutex is just a degenerate case of the Semaphore we already used

[05:23] *** [Sno] left
[05:27] <TimToady> but S17 does define locks, which are essentially Mutexes

[05:39] *** BenGoldberg left
[05:40] *** BenGoldberg joined
[06:02] *** berekuk joined
[06:06] *** xenoterracide left
[06:11] *** ssutch joined
[06:25] *** kaleem joined
[06:29] *** [Sno] joined
[06:29] <cxreg> traits on jvm seem to cause an infinite stream of java.lang.NullPointerException

[06:29] <cxreg> roles, that is

[06:38] *** berekuk left
[06:39] <Woodi> o/ today :)

[06:42] <Woodi> I think philosophers should be gentle enough to just ask each other if they need something :) 

[06:45] <Woodi> but probably circular structures always will have some specific problems... probably hierarchical work distribution can help for teams. but if we have GC subsystem we can have transactional subsystem and others probably too... 

[06:46] <Woodi> ETOMANYPROBABILITY...

[06:51] <Woodi> about naming things: there is (probably) forgotten naming scheme used by OSI for their famous OSI network framework - tree like: root have no label, lvl1 nedes are [a-z]/, lvl2 is 100, 200, later in each branch recomendations have numbers 105, 115, etc

[06:56] *** SamuraiJack_ joined
[06:56] <Woodi> moust known example is branch 'X' with mail system recomendation X.400 used by some rich folks :) and X.500 - "The Directory": ambitious one directory for all and everything: DNS, employers list, configurations. LDAP is TCP/IP descendant of it. and our public key infrastructure is just X.509 recomendation :)

[06:57] <Woodi> maybe it can help somehow...

[07:01] *** xenoterracide joined
[07:01] *** xinming left
[07:02] *** xinming joined
[07:06] <raydiak> preflex: tell moritz [email@hidden.address] is ready to receive mail, now

[07:06] <preflex>  Consider it noted.

[07:10] *** rurban1 joined
[07:13] *** darutoko joined
[07:14] *** kaleem left
[07:14] *** rurban1 left
[07:17] *** BenGoldberg left
[07:28] *** rindolf joined
[07:28] *** rindolf left
[07:37] *** nnunley_ joined
[07:41] *** nnunley left
[07:45] *** dmol joined
[07:58] *** dakkar joined
[08:08] <TimToady> by the way, IO on jvm seems to have a lock that hangs if you try to print stuff from multiple threads

[08:08] <mathw> Oh. Well that's fun.

[08:08] <TimToady> worked around by setting up a channel for output...

[08:09] <moritz> raydiak: invitation sent.

[08:09] <preflex>  moritz: you have 1 new message. '/msg preflex messages' to read it.

[08:10] *** xinming left
[08:11] *** xinming joined
[08:13] *** nnunley_ left
[08:19] <TimToady> http://rosettacode.org/wiki/Dining_philosophers#Perl_6

[08:20] <hoelzro> TimToady++ # Perl 6 examples

[08:33] *** kaleem joined
[08:33] *** Rotwang joined
[08:37] *** Rotwang left
[08:49] <jnthn> TimToady: How'da thought that you can fix concurrency problems using a concurrency control mechanism ;)

[08:49] <jnthn> TimToady: Please file a ticket on the IO lock bug, though. It should not hang.

[08:50] <jnthn> TimToady: In fact, there's already code in there that's meant to make it safe.

[08:50] <jnthn> So something's up with it

[08:53] *** fhelmberger joined
[08:58] <TimToady> just for lue++ http://rosettacode.org/wiki/Mutex#Perl_6

[09:02] *** Maddingu1 is now known as Maddingue

[09:02] <jnthn> Short code is short :)

[09:19] *** kst` joined
[09:20] <mathw> I like that a lot

[09:21] <mathw> Good, comprehensible terminology.

[09:21] <moritz> j: Lock.new.protect: { say 42 }

[09:21] <camelia> rakudo-jvm e5fd34: OUTPUT«42␤»

[09:21] *** Ulti_ joined
[09:22] *** retupmoc1 joined
[09:22] *** japhb__ joined
[09:24] <mathw> Unfortunately after that glimpse of joy, and a couple of happy hours writing Clojure yesterday, I now have to return to wrangling SQL Server Reporting Services, for which I do at least actually get paid...

[09:25] *** cooper- joined
[09:26] *** noxgirl joined
[09:26] *** gfldex left
[09:26] *** Alina-malina left
[09:26] *** djanatyn left
[09:26] *** felher left
[09:26] *** roboticus left
[09:26] *** markov left
[09:27] *** autumn left
[09:27] *** retupmoca left
[09:27] *** Alina-malina joined
[09:27] *** cooper- is now known as cooper

[09:27] *** cooper left
[09:27] *** cooper joined
[09:27] <moritz> mathw: it sounds like you should really find another job :-)

[09:28] *** gfldex joined
[09:28] <mathw> moritz: I've got recruiters queuing up. Unfortunately it's all .NET stuff.

[09:33] *** djanatyn joined
[09:33] *** felher joined
[09:34] *** roboticus joined
[09:35] *** markov joined
[09:35] *** cxreg joined
[09:50] <nwc10> mathw: where in the world are you?

[09:51] *** FROGGS[mobile] left
[09:51] *** FROGGS left
[09:52] <mathw> nwc10: Nottingham, England

[09:53] <nwc10> ah OK. I'm aware of everyone trying to recruit for Perl jobs in London

[09:53] <mathw> There are many interesting jobs I could go for in London

[09:53] <mathw> Unfortunately that does involve moving to London

[09:53] <lizmat> TimToady: Lock.new.protect: { your-ad-here() } would be shorter

[09:54] <nwc10> it seems that there is a #nottingham.pm over on irc.perl.org, but I presume that you're aware of that and have asked them

[09:54] <lizmat> and I also wonder whether that couldn't be optimized to a special, disposable/reusable lock

[09:54] <mathw> lizmat: if nobody else can see the lock, is it worth having?

[09:54] <mathw> nwc10: yeah I know them

[09:55] <lizmat> in a single threaded program, it could become a noop

[09:55] <mathw> nwc10: my job's still better than most of theirs

[09:55] <mathw> working for a university does have its perks

[09:57] <nwc10> clearly one of these London based firms with vacant seats needs to set up a Nottingham satellite office to solve this.

[09:59] *** grondilu joined
[10:01] *** rurban1 joined
[10:01] <grondilu> TimToady: about http://rosettacode.org/wiki/Dining_philosophers#Perl_6.  Why not 'class Fork is Lock { method grab($who, $which) { remark "$who grabbing $which fork"; self.lock }' instead of 'class Fork { has $!lock = Lock.new }' ?  

[10:02] <grondilu> in a nutshell, inheritence seems more appropriate than encapsulation, here.

[10:03] <lizmat> commute to LPW continues&

[10:03] *** lizmat left
[10:03] *** woolfy left
[10:04] <mathw> nwc10: well I'm hoping that the just-approved initiative to transform the IT department here is actually going to work. But then we'll still be a Microsoft dev shop. Hmm.

[10:04] *** SevenWolf left
[10:04] * mathw wonders if he can make everyone fall in love with F#. Or at least start using C# effectively.

[10:05] <nwc10> or get working on the .NET backend for NQP? :-)

[10:05] *** rurban1 left
[10:06] <masak> antenoon, #perl6

[10:06] <moritz> an, masak

[10:07] <masak> grondilu: I don't see the significant advantage that inheritance confers in that situation.

[10:07] *** woosley left
[10:07] <moritz> is a Fork a Lock?

[10:07] <masak> grondilu: seems to me you're only shuffling the pieces a bit, and then looking in admiration at 'self.' instead of '$!lock.'

[10:08] <masak> moritz: with all respect, I think that's not the question to ask.

[10:08] <mathw> nwc10: I'd then have to convince them of the value of Perl 6, which would be no easier.

[10:08] <masak> moritz: because the answer to that depends on the model you choose, and that's what the discussion is all about.

[10:09] <masak> moritz: grondilu proposes that a Fork be a Lock instead of haz a Lock. I'm not saying it's (esthetically or morally) *wrong* for it to be so, I'm just saying it's not significantly better AFAICS.

[10:09] *** FROGGS joined
[10:10] <masak> I tend to vastly prefer composition to inheritance. but in this case, I don't see the difference.

[10:10] <masak> in fact, at some level or other, the inheritance will make a composition.

[10:10] *** ssutch left
[10:12] <grondilu> masak: the code is shorter

[10:12] <grondilu> and conceptually simpler, imho

[10:14] <masak> grondilu: and you say this, knowing full well about the recent move away from inheritance? :)

[10:14] <masak> ...not just in Perl 6 or Perl, but in the whole OO industry.

[10:14] <moritz> masak: maybe the better question to ask is: do you ever want to pass a Fork object to a routine that expects a Lock?

[10:15] <grondilu> masak: I did not know about it, actually.  Good to know.

[10:15] <moritz> maybe Lock should be a role :-)

[10:15] <masak> moritz: yes, that is a better question to ask.

[10:16] <masak> grondilu: let me see if I can find you a link.

[10:16] <grondilu> Lock as a role would make sense, imho

[10:16] <masak> grondilu: maybe start here? http://stackoverflow.com/questions/49002/prefer-composition-over-inheritance

[10:17] <grondilu> ok, thanks

[10:18] *** kivutar joined
[10:22] *** Ulti_ is now known as Ulti

[10:22] *** grondilu_ joined
[10:25] *** grondilu left
[10:35] *** [particle]1 joined
[10:39] *** xinming left
[10:40] *** xinming joined
[10:45] <mathw> the substition principle is the test I always use for inheritance. "Is it ever valid to pass a Subclass as a Superclass?" is a great question to ask when considering inheritance.

[10:46] <masak> I can honestly not think of a situation where I need to pass in a Lock, and I go "hey, I have this Fork, let's pass that in!"

[10:46] <masak> :P

[10:46] <mathw> I'm not even sure what a Fork is

[10:46] <mathw> So I can't weigh in on that one

[10:46] <masak> Fork as in Dining Philosophers...

[10:46] <mathw> ah

[10:46] <mathw> hmmm

[10:46] <mathw> I suppose you *could*, but it's a bit of a conceptual twist

[10:47] <mathw> what you're really saying is that "This Fork has an internal Lock, I'll repurpose it", surely

[10:47] <masak> again, it simply doesn't seem to confer any advantage over "a Fork haz a Lock".

[10:48] <mathw> also with inheritance: it's far less necessary if you're in a language where you can apply 'class' or 'role' or 'interface' or somesuch to types that you're not defining yourself (i.e. Haskell typeclasses, Lisp multimethods...)

[10:49] <mathw> always find it a shame when I have an object in C# that conforms to an interface I want to be able to pass around, but because its class definition doesn't say that I'm stuffed.

[10:50] <moritz> that's what golang does differently :-)

[10:52] <masak> mathw: I guess... the Adapter pattern helps you out there, though? retroactively providing something with an interface?

[10:58] <mathw> masak: yeah, but it's a cludge

[10:58] <mathw> like most patterns, it substitutes for something your language doesn't do

[10:58] <masak> r: role Foo {}; class Foo {} # most definitely LTA error message -- via lizmat++

[10:58] <camelia> rakudo-parrot e5fd34, rakudo-jvm e5fd34: OUTPUT«===SORRY!===␤No such method 'is_composed' for invocant of type 'Perl6::Metamodel::ParametricRoleGroupHOW'␤»

[10:58] * masak submits rakudobug

[10:59] <mathw> and as a Haskell programmer, not being able to just define a new typeclass and make everything I need be an instance of it pains me

[10:59] <moritz> oh, I think I know what's going on

[10:59] <moritz> because roles are multi, there's no redeclaration error

[10:59] <moritz> though there should be one, because the second defintion is not a role

[11:00] <mathw> woops

[11:00] <mathw> I rather like that error message though, it's like C++.

[11:00] <jnthn> I think it's actually detected that it's looking at a re-decl and is then trying to establish if the thing is a stub or not

[11:01] <jnthn> Since is_composed is the way to detect that

[11:01] <jnthn> But yeah, needs to check if the object *can* is_composed before actually calling it.

[11:04] *** SamuraiJack_ left
[11:05] *** SamuraiJack__ joined
[11:12] <jnthn> I suspect Lock.new.protect(...) is completely useless. :)

[11:12] <masak> yay

[11:13] <masak> I mean, "HOORAY!". http://yellow5.com/pokey/archive/

[11:13] <mathw> jnthn: unless Lock.new.protect accesses, implicitly, the global interpreter lock

[11:13] <mathw> we've got a global interpreter lock, right? All the best languages have one, I heard...

[11:13] <masak> mathw: wouldn't that be fun!

[11:13] <jnthn> wtf is a GIL :P

[11:14] <mathw> "A design decision you will later come to regret"

[11:14] <mathw> official definition

[11:14] <mathw> ask the OED

[11:15] <masak> the OED has a *TLA* for "GIL"? :P

[11:22] <jnthn> :)

[11:25] *** kaleem left
[11:31] <moritz> OED is "original equipment destroyer", right? :-)

[11:40] *** SamuraiJack__ left
[11:42] *** rindolf joined
[12:09] *** tgt joined
[12:25] <Woodi> I was trying to install nqp from R* 2013.11, backend moar, do I need to install it from somewhere or it is included in distribution tgz ?

[12:26] *** grondilu_ left
[12:26] *** grondilu joined
[12:27] *** zakharyas joined
[12:28] <moritz> Woodi: R* only supports the parrot backend at the moment.

[12:28] <moritz> Woodi: nqp's Configure.pl happens to support --gen-moar

[12:29] <moritz> (which will use git to fetch MoarVM)

[12:32] <Woodi> ok, thanx

[12:37] <jnthn> And note it doesnt' do anything useful yet :P

[12:38] <moritz> well, it does lots of things that NQP on other backends does too

[12:39] <jnthn> Oh, NQP on Moar is very capable, yes :)

[12:39] <jnthn> I more meant Rakudo on Moar.

[12:39] <Woodi> but R* should include m-clean Makefile target anyway :)

[12:40] <Woodi> yes, I was hoping for some more Perl6 on moarvm :)

[12:41] <FROGGS> Woodi: you need to wait a few hours/days :o)

[12:42] <moritz> not for a R* on moar

[12:42] <FROGGS> no, but for a perl6-m binary that can say "hello world"

[12:42] <FROGGS> R* will take some months to happen

[12:43] <Woodi> probably I do not know much (or 0 or even negative amount) about cross-compilation or what it is to bring language to live but having precompiled parts (stage0) is not ideal for me...

[12:43] <FROGGS> my guess is that it will be summer by then, but nobody can predict it

[12:44] <FROGGS> Woodi: why?

[12:45] <jnthn> Woodi: It's not a cross-comp thing, it's a bootstrapping thing.

[12:45] <dalek> rakudo/moar-support: e0d6ad3 | (Tobias Leich)++ | tools/build/Makefile-Moar.in:

[12:45] <dalek> rakudo/moar-support: put correct libpath in perl6-m runner

[12:45] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/e0d6ad32dc

[12:45] <Woodi> I usually use C code to compile thing. I *think* that compiling gcc requires just C code in tarball...

[12:45] <jnthn> Woodi: It also requires a C compiler :)

[12:46] <jnthn> NQP is written in NQP, so we need an NQP compiler. That's what stage0 is.

[12:46] <Woodi> yes, but gcc.tgz do not include it... so negative amount of knovledge ?

[12:46] <moritz> Woodi: you can't compile gcc without a C compiler if the stage0 isn't included

[12:46] <FROGGS> and stage0 is not platform dependant, so there is no problem with that

[12:47] <Woodi> so how you make first nqp compiler ? that method should be distributed, IMO...

[12:47] <FROGGS> if you already have an existing backend like parrot, and wanna spit out a stage0 for, say, moarvm, you build a cross compiler

[12:48] <jnthn> Woodi: Once long ago the first NQP compiler was written in PIR

[12:48] <FROGGS> this cross compiler goes away when nqp@moarvm can build itself

[12:48] <jnthn> Just like the first C compiler was written in something non-C.

[12:48] <jnthn> The reason gcc doesn't include a C compiler is 'cus your system already has one :)

[12:49] <FROGGS> right, the very first version must be written by hand or another compiler

[12:49] <Woodi> hmm, so you want to break with C, for good ? :)

[12:50] <Woodi> I have C compiler I trust it. I want to go from this point tp Perl6 via source code...

[12:52] <FROGGS> Woodi: what if there is nothing written in C, like for the JVM backend?

[12:52] <jnthn> Woodi: Well, your stage1 and stage2 (which is installed) NQP aer built from source you can inspect. If you are really paranoid, you can trace the whole history back to the PIR version in version control, I guess. :)

[12:52] <FROGGS> btw, if you dont trust nqp's stage0, then you don't trust nqp

[12:53] <moritz> somebody did that with Haskell some time ago

[12:53] <Woodi> you alway need to trust someone or something :) asm for first C, hardvare for asm... 

[12:53] <moritz> erm, GHC I mean

[12:53] <moritz> which is also a bootstrapped compiler

[12:54] *** SamuraiJack__ joined
[12:56] <Woodi> jnthn: I know it is possible to trace all the way to pir... but this way will be longer and longer and in case someone on the way hide something (even in few steps) then no one will want to do this (except excentric scientists or government) and trust for language will be lost...

[12:58] <Woodi> the proprer way is shortest way from hardware...

[13:00] <Woodi> how about other nqp implementations ? js for example ? it can bootstrap language on it's own ?

[13:00] <moritz> if you really thing "the proprer way is shortest way from hardware", you should program direct in native executable formats, not in high-level languages

[13:01] <Woodi> moritz: no, I should not :) thes days cpu are cheap, programmers are expensive :)

[13:02] <Woodi> but to have decent preformance you still need to be clode to hw...

[13:02] <Woodi> close*

[13:02] <jnthn> Woodi: Yes, so stop expecting the very over-busy NQP programmers to maintain a second version of their system in something other than NQP.

[13:02] <jnthn> :P

[13:03] <jnthn> And yes, afaik JS version was getting towards being able to bootstrap too, if it didn't already get there.

[13:03] <FROGGS> Woodi: I would not trust hardware btw, see hidden code in RNG or how easy it is to turn your mobile into something I can control (using the firmware of your boardband processor)

[13:04] <Woodi> jnthn: I do installing all yours code, I trust you all. just wanting perfecter world :)

[13:04] <jnthn> In a world where most people install their OS, browser, etc from bianries ratehr than building soruce, I really don't think we have to worry too much over people not wanting to use Perl 6 'cus it has a compiled stage0, like other bootstrapped langauges. :)

[13:04] <jnthn> I the end, Windows folks will tend to grab an MSI, and others will use their favorite package manager... 

[13:05] <jnthn> *In

[13:05] <moritz> and the hipsters will do a  wget -O - http://upgrade.rakudo.me | bash

[13:06] <jercos> nah man, hipsters use curl

[13:06] <moritz> jercos: you're right, but I was too lazy to look up curl's command line syntax :-)

[13:06] <jercos> oddly enough, curl defaults to STDOUT

[13:06] <jercos> :D

[13:07] * jnthn adds "know curl syntax" to list of things requierd to be a hipster

[13:07] <jercos> *Linux hipster

[13:07] <Woodi> FROGGS: I do not trust hardware :) I use it with a smile :)

[13:07] <FROGGS> hehe

[13:07] <jercos> presumably there are plenty of hipsters out there who don't know a command line from a nazi

[13:08] <jnthn> Most likely they did nazi a comamnd line before...

[13:08] <jnthn> ...um, that pun is a stretch in text. :)

[13:08] * jnthn gets back to his teaching...

[13:09] <jercos> anne frankly without the pun it's just offensive.

[13:10] <Woodi> my belief is that at the END knowledge will be finished and everything will be known :)

[13:13] <moritz> the other day I was in an ultra-hipster restaurant. It had compostable one-time cutlery made from starch flour plastic or so

[13:16] <nwc10> jnthn: I'm still suspicious that you need one of these, to properly view the callbacks: http://www.gizmag.com/kohjinsha-dual-screen-laptop-on-sale/13479/

[13:19] *** xenoterracide left
[13:37] <mathw> oh, that's why I'd use curl instead of wget. Simpler syntax for stdout!

[13:37] <mathw> also more unixy

[13:38] <moritz> also maintained

[13:38] *** zakharyas left
[13:38] <FROGGS> you don't need to maintain a software that just works :o)

[13:39] <moritz> ... until it stops working.

[13:39] <FROGGS> blasphemy!!

[13:41] <mathw> hahaha

[13:42] *** tgt left
[13:43] * raydiak wonders how much more creative he has to get with his nick until he stops running into sites where it's already taken :P

[13:45] <FROGGS> :/

[13:45] <moritz> raydiak: man pwgen # :-)

[13:45] <FROGGS> mine is always taken too

[13:45] <FROGGS> hehe

[13:45] <nwc10> there is only one schmorp :-)

[13:46] <mathw> too many people online :(

[13:47] <raydiak> hmmm...good point...several strategic EMPs might free up my name on wordpress.com...

[13:49] <FROGGS> but please save the europeans :)

[13:52] <Woodi> could we just stop making wars and do something usefull instead ? eg. [re]writing libraries of usefull code to cut down IT costs or something :)

[13:52] <Woodi> usefull functions* of course :)

[13:52] <raydiak> not interested in international conflict.  just my username.  :)

[13:53] <Woodi> ok, I go google it now :)

[14:00] <dalek> rakudo/moar-support: d01d6dc | (Tobias Leich)++ | tools/build/gen-moar-runner.pl:

[14:00] <dalek> rakudo/moar-support: correctly create maor runner on windows

[14:00] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/d01d6dc0d1

[14:02] *** kaare_ joined
[14:03] *** tgt joined
[14:06] *** tgt left
[14:06] <raydiak> I suppose it would have been more accurate to say "sickened beyond recourse"..."not interested" sounds terribly irreverent of human life when applied to international relations

[14:07] *** prevost joined
[14:13] *** PacoAir joined
[14:15] *** c1sung_ left
[14:16] *** fhelmberger_ joined
[14:20] *** fhelmberger left
[14:20] *** rurban1 joined
[14:20] *** fhelmberger_ left
[14:21] *** c1sung joined
[14:23] *** [Sno] left
[14:26] *** perl6 joined
[14:27] *** perl6 left
[14:33] *** c1sung left
[14:34] *** langdon_ joined
[14:36] *** xinming left
[14:37] <langdon_> perl6: Array[Array[Bool]].new($(Array[Bool].new))

[14:37] <camelia> rakudo-parrot e5fd34: OUTPUT«Type check failed in .new; expected 'Array[Bool]' but got 'Array[Bool]'␤  in block  at gen/parrot/CORE.setting:8300␤  in method reify at gen/parrot/CORE.setting:7244␤  in method reify at gen/parrot/CORE.setting:7139␤  in method gimme at gen/parro…»

[14:37] <camelia> ..rakudo-jvm e5fd34: OUTPUT«Type check failed in .new; expected 'Array[Bool]' but got 'Array[Bool]'␤  in block  at gen/jvm/CORE.setting:8271␤  in block  at gen/jvm/CORE.setting:7259␤  in block  at gen/jvm/CORE.setting:7123␤  in method gimme at gen/jvm/CORE.setting:7541␤  in …»

[14:37] <camelia> ..niecza v24-98-g473bd20: OUTPUT«Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object␤  at Builtins.InvokeSub (Niecza.P6any obj, Niecza.Variable[] pos) [0x00000] in <filename unknown>:0 ␤  at Niecza.Kernel.ToComposable (Niecza.ST…»

[14:38] *** xinming joined
[14:39] *** c1sung joined
[14:39] <mathw> has anybody ever done print-format document generation and not gone insane?

[14:41] *** SamuraiJack__ left
[14:41] <langdon_> expected 'Array[Bool]' but got 'Array[Bool]'

[14:41] <timotimo> oh wow :/

[14:41] *** tgt joined
[14:42] <timotimo> that's ... unhelpful ...

[14:42] <langdon_> yep

[14:42] <timotimo> the problem is that if you build $(...), it won't give a type annotation

[14:42] <timotimo> perl6: my $test = $(Array[Bool].new); $test.push: 1; say $test;

[14:42] <camelia> niecza v24-98-g473bd20: OUTPUT«Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object␤  at Builtins.InvokeSub (Niecza.P6any obj, Niecza.Variable[] pos) [0x00000] in <filename unknown>:0 ␤  at Niecza.Kernel.ToComposable (Niecza.ST…»

[14:42] <camelia> ..rakudo-jvm e5fd34: OUTPUT«Type check failed in .push; expected 'Bool' but got 'Int'␤  in block  at gen/jvm/CORE.setting:7634␤  in method push at gen/jvm/CORE.setting:7620␤  in block  at /tmp/7WuvVcCQhL:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1086␤  in any evalfiles at…»

[14:42] <camelia> ..rakudo-parrot e5fd34: OUTPUT«Type check failed in .push; expected 'Bool' but got 'Int'␤  in block  at gen/parrot/CORE.setting:7663␤  in method push at gen/parrot/CORE.setting:7646␤  in method push at gen/parrot/CORE.setting:1562␤  in block  at /tmp/7VnDjUKwOW:1␤  in any  a…»

[14:42] <timotimo> er ...

[14:43] <timotimo> that seems to have flattened.

[14:43] <timotimo> perl6: my @test = $(Array[Bool].new); @test.push: 1; say @test;

[14:43] <camelia> rakudo-parrot e5fd34, rakudo-jvm e5fd34: OUTPUT« 1␤»

[14:43] <camelia> ..niecza v24-98-g473bd20: OUTPUT«Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object␤  at Builtins.InvokeSub (Niecza.P6any obj, Niecza.Variable[] pos) [0x00000] in <filename unknown>:0 ␤  at Niecza.Kernel.ToComposable (Niecza.ST…»

[14:43] <timotimo> there we go, that's better

[14:43] <timotimo> so you see, just by making a list that has Array[Bool].new as its only item, it won't generate a container that says "only Array[Bool] may go in here!"

[14:51] <jnthn> nwc10: I think that kind of laptop is standard issue for Node.js developers :P

[14:54] *** ajr joined
[14:54] *** ajr is now known as Guest84626

[14:54] *** Guest84626 is now known as ajr_

[14:58] *** retupmoc1 is now known as retupmoca

[15:03] *** benabik joined
[15:20] *** prevost left
[15:24] <timotimo> i wonder how long until it makes sense to build an optimisation to turn big if trees or simple given/whens into things like computed jumps

[15:26] <jercos> the lack of case structures in perl 5 had me using a lot of calls to subs in hashes... which of course, brings a similar increase in speed, though perhaps not quite as potent.

[15:27] <nwc10> do profiling tools yet exist to identify hot spots?

[15:27] <timotimo> they kind of do, but ... :\

[15:28] <timotimo> as you can tell by my constant guessing instead of measuring for attempting optimisations, i can't make heads nor tails out of kcachegrind :(

[15:28] <nwc10> strikes me that part of the answer to your question is "once we can measure it"

[15:28] <timotimo> that does indeed sound sensible

[15:29] <jercos> 'twould perhaps be simpler if the language offered an explicit multiple choice statement, more caselike than if chains, but less smartmatchy than given/when.

[15:30] <timotimo> the thing is, if you just put constants into the whens, it's essentially the same :)

[15:30] *** kaleem joined
[15:30] * timotimo has an idea

[15:31] <timotimo> when * < 20 { } is currently implemented as a call to a block

[15:31] <timotimo> the optimizer doesn't inline it yet

[15:34] <TimToady> jercos: that is precisely why the semantics of the switch are governed by the 'when', not the 'given'

[15:35] <jercos> Indeed.

[15:36] <TimToady> and it was the desire for that optimization that caused us to break the symmetry of the old smartmatch

[15:36] <TimToady> Perl 4 actually did the jump optimization on switch-like structures, but I don't thing Perl 5 ever attempted it.

[15:37] <TimToady> though the opcodes for it were in there for at least a while

[15:37] <timotimo> jnthn: where do i find the code that decides wether or not to keep the ast of a block around for later in-lining? or something like that?

[15:40] <jnthn> look for inline_info in setting

[15:40] <jnthn> um

[15:40] <jnthn> look for inline_info in actions

[15:40] <timotimo> thanks :)

[15:42] <jnthn> teaching done; time to go get the train :)

[15:42] <jnthn> bbl

[15:42] <TimToady> oh, I misread jercos++, who was speaking about Perl 5 in the first place, durr

[15:42] <TimToady> o/

[15:43] <TimToady> but Perl 5 is a language, and since we do talk about linguistics here, it's not off topic  :)

[15:43] <timotimo> that was a close one, we would almost have had to kick jercos out

[15:45] *** nnunley joined
[15:46] *** kaleem left
[15:47] <hoelzro> is NativeCall able to handle foreign functions that require native callback yet?

[15:47] <tadzik> at least in parrot, yes

[15:47] <tadzik> hoelzro, hoelzro when are we playing l4d2?

[15:48] <hoelzro> hmm

[15:48] <arnsholt> hoelzro: Callbacks are supported

[15:48] <hoelzro> there has been talk of l4d2 in my home lately

[15:48] <hoelzro> but no playing of it yet

[15:48] <hoelzro> tadzik: one of the coming weekends, I think ;)

[15:48] <tadzik> hoelzro: steam id?

[15:48] <arnsholt> We don't support invoking function pointers returned from native code yet, but the other way should work fine

[15:48] * hoelzro checks

[15:48] <tadzik> there's apparently more of us on the channel :)

[15:49] <hoelzro> ah yes

[15:49] <hoelzro> my steam id

[15:49] <hoelzro> is

[15:49] <hoelzro> hoelzro.

[15:49] <hoelzro> arnsholt: so do_this_after_a_second(void (*cb)(void *)) works

[15:50] <arnsholt> If you need to be able to invoke function pointers returned from C, I think that should be relatively easy to fix too

[15:50] <hoelzro> but not void (*)(void *) heres_something_to_pass_the_time(void)?

[15:50] *** xinming left
[15:50] <hoelzro> I just need the former

[15:50] <arnsholt> Exactly

[15:50] <hoelzro> if I ever get off my butt and work on this stuff =P

[15:50] *** xinming joined
[15:50] <arnsholt> Yeah, the latter is unimplemented because I didn't see a pressing need for it

[15:50] <timotimo> hoelzro is apparently not publically findable

[15:50] <hoelzro> hmm

[15:50] <arnsholt> The other way around OTOH was kind of important =)

[15:50] <hoelzro> I'll change that when I get home tonight!

[15:51] <timotimo> :)

[15:51] <tadzik> timotimo: it is for me

[15:51] <timotimo> huh, weird

[15:51] <timotimo> well, if you have him in your friends list, i can find him via you

[15:55] *** xinming left
[15:55] *** xinming joined
[15:58] *** Psyche^_ joined
[16:00] *** xinming left
[16:01] *** xinming joined
[16:01] *** Psyche^ left
[16:01] *** araujo left
[16:02] *** araujo joined
[16:09] *** atroxaper joined
[16:12] *** xinming left
[16:13] *** xinming joined
[16:24] *** FROGGS left
[16:37] *** FROGGS joined
[16:37] <dalek> rakudo-star-daily: 6cb5be3 | coke++ | log/ (5 files):

[16:37] <dalek> rakudo-star-daily: today (automated commit)

[16:37] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/6cb5be318d

[16:37] <dalek> rakudo-star-daily: bf52277 | coke++ | log/ (5 files):

[16:37] <dalek> rakudo-star-daily: today (automated commit)

[16:37] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/bf52277069

[16:37] <dalek> rakudo-star-daily: c147794 | coke++ | log/ (5 files):

[16:37] <dalek> rakudo-star-daily: today (automated commit)

[16:37] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/c147794c4d

[16:37] <dalek> perl6-roast-data: c425356 | coke++ | / (3 files):

[16:37] <dalek> perl6-roast-data: today (automated commit)

[16:37] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/c42535681b

[16:37] <dalek> perl6-roast-data: bff7276 | coke++ | p (2 files):

[16:37] <dalek> perl6-roast-data: today (automated commit)

[16:37] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/bff72764b4

[16:39] <timotimo> wow, so many days today

[16:42] *** stevan_ left
[16:43] *** spider-mario joined
[16:44] *** spider-mario left
[16:47] *** c1sung left
[16:53] *** spider-mario joined
[16:53] *** c1sung joined
[16:54] <moritz> p: say Date.today.comb(/\d+/).join.Int.is-prime

[16:54] *** ajr_ left
[16:54] <camelia> rakudo-parrot e5fd34: OUTPUT«No such method 'comb' for invocant of type 'Date'␤  in block  at /tmp/12A4cFCpzW:1␤  in any  at /tmp/12A4cFCpzW:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.nqp:1133␤  in any evalfiles at gen/parrot…»

[16:54] <moritz> p: say Date.today.Str.comb(/\d+/).join.Int.is-prime

[16:54] <camelia> rakudo-parrot e5fd34: OUTPUT«True␤»

[16:54] <moritz> p: say 29122013.is-prime

[16:54] <camelia> rakudo-parrot e5fd34: OUTPUT«False␤»

[16:55] *** ajr joined
[16:55] <moritz> p: say 28122013.is-prime

[16:55] <camelia> rakudo-parrot e5fd34: OUTPUT«True␤»

[16:55] <moritz> p: say 12282013.is-prime

[16:55] <camelia> rakudo-parrot e5fd34: OUTPUT«False␤»

[16:55] *** ajr is now known as Guest44602

[16:55] *** Guest44602 is now known as ajr_

[16:56] <moritz> oh, it's not december yet :-)

[16:57] <moritz> p: say (11292013, 29112013, 20131129)>>.is-prime

[16:57] <camelia> rakudo-parrot e5fd34: OUTPUT«False False True␤»

[16:57] <moritz> p: say Date.today

[16:57] <camelia> rakudo-parrot e5fd34: OUTPUT«2013-11-29␤»

[16:58] <moritz>  p: say Date.today.Str.comb(/\d+/).join.Int

[16:58] <camelia> rakudo-parrot e5fd34: OUTPUT«20131129␤»

[17:00] <moritz> p: say (112913, 291113, 20131129)>>.is-prime

[17:00] <camelia> rakudo-parrot e5fd34: OUTPUT«True True True␤»

[17:02] <TimToady> p: say 1129.is-prime, 2911.is-prime

[17:02] <camelia> rakudo-parrot e5fd34: OUTPUT«TrueFalse␤»

[17:10] *** bbkr left
[17:32] <retupmoca> is github:supernovus in here?

[17:34] <timotimo> what have i done wrong?!

[17:34] <timotimo> oh, wait, i'm the wrong timo :)

[17:34] <FROGGS> retupmoca: he was, ages ago

[17:34] *** stevan_ joined
[17:36] *** atroxaper left
[17:37] <retupmoca> alright

[17:37] <retupmoca> just did a pull request, wanted to poke him about it

[17:42] *** dakkar left
[17:45] *** [Sno] joined
[17:52] *** SamuraiJack__ joined
[17:53] *** FROGGS[mobile] joined
[17:58] *** ajr_ left
[17:58] *** rurban1 left
[18:38] <timotimo> if anyone here cares about good games, spelunky is currently 75% off on steam. unfortunately there's no linux or mac port

[18:39] <timotimo> i'm hoping it'll get picked up by the humble bundle guys and ported to mac and linux in the process, but i have no evidence to support that hope at all

[18:41] *** benabik left
[18:53] *** lizmat joined
[18:54] <FROGGS>     my class Dummy {

[18:54] <FROGGS>         our proto method AUTOGEN(::T $: |) { * }

[18:54] <FROGGS>     }

[18:54] <FROGGS> wth is the $: there?

[18:54] <timotimo> it's an anonymous invocant

[18:54] <FROGGS> ahh

[18:54] <FROGGS> of course

[18:56] <timotimo> are we even looking at the right line?

[18:57] <FROGGS> seems so

[18:57] <FROGGS> I get the same msg when I just run that blok

[18:57] <FROGGS> block*

[18:57] <FROGGS> umm, stupid me

[18:59] <FROGGS> (it still stumbled in the setting, not my sript)

[18:59] <FROGGS> script*

[19:06] <jnthn> :P

[19:06] <jnthn> I'm pretty sure it's the lack of reposession stuff like I mentioned last night

[19:07] <nwc10> 

[19:08] *** woolfy joined
[19:08] <FROGGS> jnthn: if it works for you I'd like to merge hope into moarvm master

[19:08] <jnthn> FROGGS: If...what works? :)

[19:09] <FROGGS> hope :o)

[19:09] * TimToady wonders if he should have a commit bit to rakudo...

[19:10] * TimToady turned in a CLA about ten years ago...

[19:10] <jnthn> .oO( "Did you send in a CLA?" :D :D )

[19:10] <jnthn> :P

[19:10] <jnthn> TimToady: Then you can have one. :)

[19:10] *** darutoko left
[19:10] <jnthn> FROGGS: You...called a branch "hope"? :P

[19:10] <FROGGS> yeah *g*

[19:11] <jnthn> Will the next one be "glory"? :P

[19:11] <jnthn> git checkout hope # ...

[19:11] <FROGGS> since... I spent already four or five days with that thing a few months back, and now another one... so... that was its last chance to get fixed by me

[19:12] <FROGGS> I hope there are no such beasts anymore

[19:12] * jnthn is make installing

[19:12] <FROGGS> jnthn: I fixed the runner in rakudo btw

[19:12] <FROGGS> nqp is left untouhed

[19:12] <jnthn> yay

[19:12] <FROGGS> untouched*

[19:12] <jnthn> Should I try building NQP anyway?

[19:12] <FROGGS> hmmm, would be nice, yeah

[19:13] <jnthn> ok, set it off

[19:13] <jnthn> Trying builds is easy thing to do on the train.

[19:13] <FROGGS> can you remember if you had problems using the debugger last time I closed handles?

[19:13] * jnthn is surfing "med full fart!" again :)

[19:13] <FROGGS> *g*

[19:14] <jnthn> I don't think I had that problem...

[19:14] * FROGGS imagines jnthn++ sitting in a train with his laptop on his knees blowing in the wind...

[19:14] <FROGGS> k

[19:15] <FROGGS> I dont think there will be problems since std filehandles won't be closed, only common filehandles will

[19:16] <jnthn> NQP build, Rakudo build is underway

[19:16] <FROGGS> cool

[19:16] <FROGGS> I'll enjoy a Malzbier if that works out

[19:17] <jnthn> I hope it won't Malzfunction, then...

[19:17] <FROGGS> >.<

[19:17] <jnthn> Reached CORE.setting

[19:17] <FROGGS> damn, your machine is fast

[19:17] <jnthn> And this is my slower one :P

[19:17] <FROGGS> gah!

[19:18] <FROGGS> you still need to tune it :o)

[19:18] <lue> TimToady: Is it just me, or does Mutex not have a Perl 6 section?

[19:18] <FROGGS> no excuses!

[19:18] <jnthn> Not by much, though...

[19:18] <TimToady> it's just you :)

[19:18] <jnthn> lue: Didn't for me at first, then I refrash and it was there...

[19:18] <jnthn> Caching I guess.

[19:18] <lue> Huh. Hitting F5 helped. So yeah, I blame caching.

[19:20] <FROGGS> that is how the interwebs work :o)

[19:20] *** SamuraiJack__ left
[19:20] <FROGGS> if I comment out the curront blow-ups in the setting, I get:

[19:20] <FROGGS> Type check failed in bind; expected Callable but got Block

[19:20] <FROGGS>    at src/vm/moar/Perl6/Ops.nqp:197  (blib/Perl6/Ops.moarvm:bind_error:42)

[19:20] <FROGGS>  from src/gen/m-CORE.setting:701  (./CORE.setting.moarvm:frame_name_1647:6931)

[19:21] <FROGGS> dunno if that will be the next or if it is related

[19:21] <FROGGS> current*

[19:21] <jnthn> It's related, I suspect

[19:22] <jnthn> I mean, I can directly attribute a way that could happen to the lack of reposession too

[19:22] <FROGGS> jnthn: btw, we'd need to either gc_free objects when panicking in moarvm or need to walk the handles explicitly to hide libuv's nice message when we crash

[19:22] <FROGGS> k

[19:23] <FROGGS> I don't care about that atm though

[19:25] <jnthn> I don't see any problem with hope.

[19:27] <jnthn> As in, I get to the same point as I did without it

[19:27] <FROGGS> \o/

[19:27] <jnthn> perl6-m.bat gives me a different error than before though

[19:28] <FROGGS> O.op

[19:28] <FROGGS> -p

[19:29] <jnthn> Ahl, it passes --lib-path as '.'

[19:29] <FROGGS> you need to pull in rakudo then

[19:29] <woolfy> It's dark in London. Tomorrow is LPW.  I'm hungry.  None of this is related to Perl 6.

[19:30] <TimToady> how do you know?

[19:30] <FROGGS> woolfy: there is no such thing as off topic :o)

[19:30] <woolfy> Hehe...

[19:31] <TimToady> OT is just one of those vagrancy laws we use to chase off people we don't like for other reasons...

[19:31] *** nnunley left
[19:31] <FROGGS> *g*

[19:31] <jnthn> FROGGS: I did, ut should I reconfigure?

[19:31] <FROGGS> I, I think so

[19:32] <FROGGS> jnthn: yes, you need

[19:32] <FROGGS> need to

[19:32] <FROGGS> because I patched the Makefile.in to pass the libpath

[19:32] <jnthn> k

[19:33] <jnthn> woolfy: I heard that London hsa food!

[19:33] * FROGGS wishes he was in scotland again :/

[19:34] *** xinming left
[19:34] <jnthn> I wishky I was too...

[19:34] *** xinming joined
[19:34] *** xenoterracide joined
[19:36] <moritz> Land of my high endeavor, land of the shining river, land of my heart forever, Scotland the brave!

[19:36] <TimToady> maybe each backend should have its own national anthem on STDIN

[19:37] <FROGGS> where was moarvm founded?

[19:37] <moritz> p: say for lines

[19:37] <camelia> rakudo-parrot e5fd34: OUTPUT«␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤␤»

[19:37] <moritz> ugh.

[19:37] <FROGGS> :/

[19:37] <moritz> .say for lines

[19:37] <TimToady> yipes

[19:37] <moritz> p: .say for lines

[19:37] <camelia> rakudo-parrot e5fd34: OUTPUT«Stille Nacht! Heilige Nacht!␤Alles schläft; einsam wacht␤Nur das traute heilige Paar.␤Holder Knab im lockigten Haar,␤Schlafe in himmlischer Ruh!␤Schlafe in himmlischer Ruh!␤␤Stille Nacht! Heilige Nacht!␤Gottes Sohn! O wie lacht␤Lieb´ …»

[19:37] <moritz> it should complain about say without arguments, no? :-)

[19:37] <TimToady> hah

[19:37] <FROGGS> lockigten

[19:38] <dalek> evalbot: 80b9f0d | moritz++ | stdin:

[19:38] <dalek> evalbot: typo, FROGGS++

[19:38] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/80b9f0d97d

[19:38] * moritz just copied and pasted it from somewhere

[19:39] <FROGGS> eww

[19:39] <TimToady> hmm, I learned it "Nur das traute hochheilige Paar"

[19:39] <moritz> TimToady: that's the more common version, yes

[19:39] <FROGGS> moritz: that might be even the original text an not a typo

[19:40] <FROGGS> I only can find this version

[19:40] *** xinming left
[19:40] * moritz shrugs

[19:40] *** xinming joined
[19:40] <colomon> hoch is high?

[19:41] <FROGGS> yes

[19:41] <TimToady> ja

[19:43] <colomon> moritz++ for changing the default text to something seasonal.

[19:43] *** ssutch joined
[19:43] <woolfy> It seems lizmat and diakopter are going to take care of my hunger.  It seems the hunger will be killed by Indian food.  Maybe some whisky too.

[19:43] <colomon> whisky++

[19:44] <jnthn> \o/

[19:44] <lue> .oO(Aber es ist nicht noch Dezember, ja?)

[19:44] <moritz> "ja ist denn heut' schon weihnachten?"

[19:45] <dalek> evalbot: 42b3b4c | moritz++ | evalbot.pl:

[19:45] <dalek> evalbot: another control command (because I am lazy)

[19:45] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/42b3b4cd96

[19:45] *** stevan_ left
[19:45] <moritz> evalbot control restart

[19:46] *** camelia left
[19:46] *** camelia joined
[19:46] <colomon> lue: as far as I'm concerned it's open season for Christmas music as of today.  Already listened to the new Bellowhead Christmas single about six times.  (To be fair, half of that was "Play it again!" from my son.)

[19:47] *** ChanServ sets mode: +v camelia

[19:47] <moritz> also with small children you have to start a bit earlier, otherwise they don't have a chance to learn the lyrics :-)

[19:47] *** benabik joined
[19:48] *** kivutar left
[19:48] <lue> colomon: Yeah, I was just pointing it out for fun, considering December's only a couple days away :)

[19:48] <colomon> actually Henry requested Jingle Bells a month ago already.  But he was satisfied listening to it three or four times in a row.

[19:49] <lizmat> fwiw, all hotels / pubs / restaurants we've seen the past days, had christmas decorations or were in the process of putting them on

[19:49] <colomon> we've got just enough snow here to make everything white, too.

[19:50] <jnthn> My hotel in Stockholm decorated for it while I was there.

[19:50] <jnthn> And today the fridge at the teaching place suddenly had jul must.

[19:50] <lizmat> a must have, jul!

[19:51] <TimToady> jnthn: sure, but that just means putting up some of those ⋀ lights in the window :)

[19:51] <woolfy> oO(hunger will be vanquished) <- (diakopter is on way to our hotel) -> (ow, we must go downstairs now) -> bye

[19:51] <TimToady> or has Sweden graduated to greater glories in the last decade?

[19:52] <lizmat> dinner&

[19:53] <lue> December's the time for building ☃ and watching that ☄ shower that happens every year abouts.

[19:53] <jnthn> Well, it wsa mostly greenery and even more candles that I saw... :)

[20:00] *** zakharyas joined
[20:04] <dalek> rakudo/moar-support: 95eae40 | (Tobias Leich)++ | tools/lib/NQP/Configure.pm:

[20:04] <dalek> rakudo/moar-support: fix --gen-moar=OPTION

[20:04] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/95eae40ffd

[20:04] <FROGGS> sorry TimToady, that was a stupid thinko of me :(

[20:06] *** spider-mario left
[20:07] <dalek> rakudo/moar-support: eb24cea | (Tobias Leich)++ | Configure.pl:

[20:07] <dalek> rakudo/moar-support: respect --gen-nqp if it was passed

[20:07] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/eb24ceab00

[20:10] * FROGGS .oO( already used the to be specced ¿¿ ¡¡ syntax )

[20:12] *** berekuk joined
[20:14] <TimToady> ˙°O(¡sdoo)

[20:15] <lue> FROGGS: what is that meant to do? :)

[20:15] <TimToady> (¡sdoo)O°˙

[20:16] <FROGGS> lue: see the fix and judge yourself :o)  https://github.com/rakudo/rakudo/commit/95eae40ffd

[20:16] <jnthn> There will be modules... :P

[20:17] <FROGGS> with a single line in it, where other languages need hundreds :o)

[20:18] <lue> FROGGS: I was referring to your ¿¿¡¡ comment

[20:18] *** hummeleB1 joined
[20:19] <FROGGS> lue: it is about the same, I mixed up the "if" and the "else" part...

[20:20] <FROGGS> like ¿¿¡¡ would do the opposite of ??!!

[20:20] * lue thinks again of    why { do_stuff; } because ( $x ~~ False )

[20:20] *** cognominal__ left
[20:21] <FROGGS> why { $x + $y } because ( $y < 10 )

[20:22] <FROGGS> "why { $x + $y }" does not feel right

[20:22] <FROGGS> why starts a question, but $x + $y is not part of it

[20:23] <FROGGS> do { $x + $y } because ( $y < 10 )

[20:23] <FROGGS> that feels righter to me

[20:23] * FROGGS .oO( but then I took an ➴ to the knee )

[20:26] <TimToady> Q: What's worse than bootstrapping a compiler?

[20:26] <TimToady> A: Bootstrapping two compilers!

[20:26] <TimToady> Q: What's worse than that?

[20:26] <nwc10> "Bootstrapping three compilers!" I guess

[20:26] <nwc10> and, how could we make it even better?

[20:27] *** hummeleB1 left
[20:27] <TimToady> um, target .NET, .js, golang, etc....

[20:28] <TimToady> half-hour later, the *Configure* is done...

[20:29] <FROGGS> :/

[20:29] <nwc10> what did it build?

[20:29] <TimToady> on the bright side, it seems to have configured

[20:30] <jnthn> half an hour?!

[20:30] <TimToady> well, it bootstrapped nqp on parrot, jvm, and moar

[20:30] <jnthn> Does --gen-moar pass --optimize to Moar? :)

[20:30] <TimToady> beats me

[20:31] <jnthn> Was more asking FROGGS++ :)

[20:31] <FROGGS> jnthn: it does not currently

[20:31] *** stevan_ joined
[20:32] <jnthn> I guess other option is make it the default in Moar's configure.

[20:32] <TimToady> maybe that would be premature, if you want good debugging for now

[20:32] <jnthn> You only really want a debug build if you're developing...

[20:33] <FROGGS> ahh, it does

[20:33] <FROGGS> nqp does it

[20:33] <jnthn> FROGGS: ok :)

[20:33] <preflex>  jnthn: you have 3 new messages. '/msg preflex messages' to read them.

[20:33] <TimToady> that would explain why my gdb trace was...terse...

[20:33] <FROGGS> it passes --optimize in sub gen_moar

[20:33] <FROGGS> >.<

[20:34] <FROGGS> TimToady: the good thing is that you dont need to recompiler anything when reconfiguring/installing moarvm without --optimize

[20:34] <TimToady> or is this an optimize flag aimed higher than C

[20:35] <lue> FROGGS: it can change to why { $x + $y }? because ( $y < 10 ) if you like :)

[20:35] <FROGGS> recompile*

[20:35] <FROGGS> hehe

[20:36] <jnthn> TimToady: No, --optimize in Moar is all about C

[20:36] <TimToady> ooh, got past m-BOOTSTRAP!!!

[20:36] <TimToady> now in stage parse

[20:36] <FROGGS> \o/

[20:36] <colomon> \o/

[20:36] <FROGGS> that is the time where you want to make tee

[20:36] <TimToady> 'course, it decided to do moar before parrot, so I'll probably end up sans parrot...

[20:36] <FROGGS> (to drink it in stage mbc)

[20:36] <TimToady> er, sans perl6-p

[20:37] <FROGGS> make p-install is your friend

[20:37] <lue> I get past stage mbc before it fails. Is that good?

[20:38] <FROGGS> yes

[20:38] <FROGGS> how does it fail ooc?

[20:41] <lue> moar: 3rdparty/libuv/src/unix/loop.c:150: uv__loop_delete: Assertion `!((((*(&(loop)->active_reqs))[0]) == (&(loop)->active_reqs)) == 0)' failed.

[20:41] *** tgt left
[20:41] <lue> (this was last night, so perhaps it's changed since.)

[20:41] <FROGGS> lue: no, there must be an error message earlier

[20:41] *** tgt joined
[20:41] <FROGGS> it should have changed, yes

[20:42] <lue> I would've given you the preceding error if there was one :) It goes  Stage mbc        :   8.069

[20:42] <lue> moar: 3rdparty/libuv/src/unix/loop.c:150:

[20:42] * lue will run the process again now, see what changes.

[20:43] <FROGGS> I hope there is something else

[20:43] <jnthn> 8.069?! Wow. It is like 0.554 here :)

[20:43] <lue> jnthn: I think I was running other things on my computer at the time, it would've contributed to a slowdown.

[20:43] <TimToady> yeah, well, my stage parse is 288 :/

[20:44] <FROGGS> 184.777s here

[20:44] <lue> TimToady: Mine was in the 1000's. Again, other stuff running.

[20:44] <lue> (Incidentally I'm sure I'm running the same 'other stuff' now...)

[20:45] *** telex left
[20:48] *** zakharyas left
[20:48] *** telex joined
[20:48] <TimToady> and stage mast takes 343

[20:48] <TimToady> and, of course, it couldn't compile Test

[20:48] <FROGGS> 220, and then "Cannot invoke null object"

[20:49] <TimToady> my mbc was only .955  :)

[20:49] <FROGGS> TimToady: it is unable to load the setting

[20:49] *** ssutch left
[20:49] <FROGGS> and only that strangely farting guy can fix that :P

[20:49] <TimToady> yes, it's about where I'd expected it to fail from the reports

[20:50] <FROGGS> I'd love to profile it, but when using goodle-pprof moar complains about invalid utf8

[20:50] <TimToady> it was running in just under a gig, but makes me wonder whether it'd run faster with more memory

[20:51] <FROGGS> don't think so, jnthn and timotimo both said it would take 950MB peak

[20:51] * TimToady got up to 990 or so

[20:51] <jnthn> detrain &

[20:52] <FROGGS> my times are on a "Intel(R) Core(TM) i5-3320M CPU @ 2.60GHz" with turbo stuff enabled

[20:53] <TimToady> anyway, for the record, succeeded with: perl Configure.pl --prefix="/home/larry/nom/install" --backends='jvm,parrot,moar' --gen-nqp=master --gen-moar=master --gen-parrot

[20:53] <TimToady> eventually...

[20:53] <FROGGS> that is nice that it works now

[20:54] <TimToady> FROGGS++

[20:54] <FROGGS> :o)

[20:54] <sjohnson> heh

[20:54] <sjohnson> that emoticon is cute.

[20:55] <FROGGS> so am I *g*

[20:55] <FROGGS> (according to my wife)

[20:55] <lue> Once rakudo successfully compiles on moar, I'll start pestering MoarVM to default install to /usr/local, like every other project ever (even parrot!) . :)

[21:02] *** xinming left
[21:02] *** xinming joined
[21:15] *** cognominal joined
[21:26] *** xenoterracide left
[21:27] *** grondilu left
[21:36] *** rindolf left
[21:50] *** kaare_ left
[22:02] <lue> FROGGS: I got a more sensible "Cannot invoke null object" error now.

[22:02] <FROGGS> lue: that is what I wanted to hear!

[22:02] <FROGGS> :o)

[22:02] <lue> (and no libuv assertion either!)

[22:03] <FROGGS> hmmm, there should be one... but it doesn't hurt if it does not show up :o)

[22:04] *** dalek left
[22:04] *** masak left
[22:06] *** djanatyn left
[22:06] *** Tene left
[22:14] *** rurban1 joined
[22:18] *** xinming left
[22:18] *** xinming joined
[22:21] <FROGGS> rp: say "abc" ~~ / <ident> { make 42 } /; say $<ident>

[22:21] <camelia> rakudo-parrot e5fd34: OUTPUT«｢abc｣␤ ident => ｢abc｣␤␤｢abc｣␤␤»

[22:21] <FROGGS> rp: say "abc" ~~ / <ident> { make 42 } /; say $/.ast

[22:21] <camelia> rakudo-parrot e5fd34: OUTPUT«｢abc｣␤ ident => ｢abc｣␤␤42␤»

[22:21] *** ajr joined
[22:21] *** ajr is now known as ajr_

[22:27] *** c1sung left
[22:33] *** preflex left
[22:35] *** preflex joined
[22:35] *** ChanServ sets mode: +v preflex

[22:37] <FROGGS> rp: sub a (:*@b) { }

[22:37] <camelia> rakudo-parrot e5fd34: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/YAMqae4Oxr␤Malformed parameter␤at /tmp/YAMqae4Oxr:1␤------> [32msub a ([33m⏏[31m:*@b) { }[0m␤    expecting any of:␤        statement list␤        prefix or term␤        prefix …»

[22:37] <FROGGS> rp: class C { method a (:*@b) { } }

[22:37] <camelia> rakudo-parrot e5fd34: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Kf9dOiwIx0␤Malformed parameter␤at /tmp/Kf9dOiwIx0:1␤------> [32mclass C { method a ([33m⏏[31m:*@b) { } }[0m␤    expecting any of:␤        statement list␤        prefix or term␤…»

[22:37] <FROGGS> rp: class C { method a (:%h; :*@b) { } }

[22:37] <camelia> rakudo-parrot e5fd34: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/ER9vSyZifz␤Malformed parameter␤at /tmp/ER9vSyZifz:1␤------> [32mclass C { method a (:%h; [33m⏏[31m:*@b) { } }[0m␤    expecting any of:␤        statement list␤        prefix or te…»

[22:38] *** xinming left
[22:38] *** xinming joined
[22:39] *** c1sung joined
[22:43] *** yeltzooo6 joined
[22:43] *** yeltzooo6 left
[22:46] *** yeltzooo3 joined
[22:47] <FROGGS> rp: my $x = "abc"; $x.=subst(m/a/, 'x')

[22:47] <camelia> rakudo-parrot e5fd34: OUTPUT«Cannot call 'match'; none of these signatures match:␤:(Cool:D : $target, *%adverbs)␤  in any  at gen/parrot/BOOTSTRAP.nqp:1218␤  in any  at gen/parrot/BOOTSTRAP.nqp:1209␤  in method match at gen/parrot/CORE.setting:3435␤  in block  at /tmp/h32r…»

[22:47] <FROGGS> rp: my $x = "abc"; $x.=subst(/a/, 'x')

[22:47] <camelia> rakudo-parrot e5fd34: ( no output )

[22:49] *** berekuk left
[23:02] <FROGGS> if [&&] @provides>>.ACCEPTS($file) -> $/ { # I love it

[23:02] *** kivutar joined
[23:02] *** yeltzooo3 left
[23:03] *** yeltzooo joined
[23:06] *** hugme joined
[23:06] *** ChanServ sets mode: +v hugme

[23:10] *** ssutch joined
[23:10] *** tadzik joined
[23:11] *** c1sung left
[23:12] *** PacoAir left
[23:13] *** Juerd joined
[23:14] <timotimo> [&&] passes through the rightmost match?

[23:14] <Juerd> feather1 and 2 are back

[23:14] <Juerd> 3 is still booting.

[23:14] <FROGGS> timotimo: yeah

[23:16] <FROGGS> timotimo: there is only one match anyway, which comes back as a parcel

[23:16] <FROGGS> somehow .flat doesnt work, but fortunately [&&] does

[23:17] *** c1sung joined
[23:19] <FROGGS> hmmm, I better use [||]

[23:21] *** sricloud left
[23:23] *** sricloud joined
[23:25] *** BenGoldberg joined
[23:27] *** fridim__ joined
[23:31] *** rurban1 left
[23:33] *** kivutar left
[23:38] *** ssutch left
