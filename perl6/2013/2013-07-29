[00:11] *** ecocode joined
[00:12] *** ecocode left
[00:14] *** ecocode joined
[00:19] *** pupoque_ left
[00:44] *** dayangkun joined
[00:45] *** ppq_ left
[01:02] *** xinming left
[01:03] *** xinming joined
[01:04] <TimToady> Gloria sez: "WAT has to be the opposite of DWIM, so if that is Do What I Mean, the other must be What Actually Transpires."

[01:04] <colomon> Gloria++

[01:07] <colomon> or should it be Wat Actually Transpires?

[01:10] *** ecocode left
[01:13] <skids> I thought it was "Weapon Aimed at Toe"

[01:20] <timotimo> that's cool :D

[01:20] <timotimo> but more like WAAT :3

[01:21] <mst> TimToady: but but Wat is a small operative lisp in the style of kernel invented by Manuel Simoni, which now has javascript, perl and python interpreters

[01:21] <skids> "Weapon Aimed Toe-ward"?

[01:21] <mst> TimToady: I should know, I wrote the perl one :)

[01:21] <mst> (yes, you can write javascript in perl :)

[01:22] <mst> of course, it being an operative lisp with delimited continuations, 'weapon aimed at toe' isn't a bad description of it if you aren't careful

[01:22] <mst> runtime macros + continuations -> you too can write code that's dead slow -and- impossible to debug

[01:24] <TimToady> we want to make that possible in Perl 6 too :)

[01:24] <TimToady> though perhaps not likely

[01:26] <mst> operatives are -really- interesting though

[01:27] <mst> being able to get your arguments as unevaluated expressions makes a lot of things possible

[01:27] <timotimo> is that like what we were thinking "is thunk" would be like?

[01:30] <timotimo> i have a "use case" for introspecting the code "* %% 10" in "sub foo($a where * %% 10)" - will perl6 let me do that at some point in the future?

[01:35] *** ecocode joined
[01:49] <TimToady> well, in some sense, everything's a macro at some point, just most things degenerate to "normal" evaluation

[01:53] * colomon is watching Dune for the first time, and Duke Leto was just mentioned.  ;)

[01:54] *** kurahaupo left
[01:55] *** bluescreen__ joined
[01:56] *** bluescreen100 left
[01:56] *** woosley joined
[01:57] *** bluescreen10 left
[01:57] *** bluescreen100 joined
[01:57] <colomon> "Wow, this just got really weird."  -- Jen, also watching Dune for the first time

[02:02] *** dayangkun left
[02:05] *** bluescreen100 left
[02:05] *** bluescreen__ left
[02:06] *** bluescreen100 joined
[02:06] *** bluescreen__ joined
[02:10] *** raiph joined
[02:18] <TimToady> if this is the movie, you should also watch the miniseries, which is...differently better

[02:19] <skids> one of SyFy's better endeavors, yes.

[02:19] <TimToady> and overall better than the movie, in many people's estimations

[02:19] <colomon> movie, yes

[02:20] <colomon> I've never read the book, either… started one of the later books in the series, was not impressed and quit.

[02:20] <TimToady> ah, well, the earlier books are much better

[02:20] <TimToady> unfortunately, starts going downhill at about the end of the third book

[02:21] <colomon> might just have not understood what was going on… those were the days when books were hard to come by.  :)

[02:21] <skids> Back when I read something other than tech manuals, read most of that series.  Very enjoyable.

[02:21] <geekosaur> first time I read it, I skipped the second book entirely. (being 9, and _Dune Messiah_ being mostly Imperial politics, I was somewhat less than interested)

[02:21] <TimToady> well, that's maybe not as bad as I did, reading the 5th book of the Amber series first O_O

[02:21] <[Coke]> what would the advantage of "is readonly" be over a constant? 

[02:22] * colomon remembers trying to interlibrary loan the Elric books, and getting some other random Moorcock book from them instead.

[02:22] <TimToady> the first Dune is well worth reading

[02:22] <colomon> TimToady: I think I read Amber in the order 1 (long pause) 5 (long pause) 1..5 quickly.  

[02:22] <[Coke]> TimToady++ the frist one is quite good.

[02:23] <colomon> Got me very confused about the fate of the different family members.

[02:24] <geekosaur> (I would recommend just pretending everything after the third Dune book doesn't exist)

[02:25] <TimToady> me 2

[02:31] <dalek> perl6-roast-data: 05fed6c | coke++ | / (5 files):

[02:31] <dalek> perl6-roast-data: today (automated commit)

[02:31] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/05fed6c313

[02:42] *** raiph left
[03:03] <timotimo> is javac version 1.7.0_25 too old to build nqp-jvm?

[03:03] <colomon> I'm using 1.7.0_04

[03:04] <colomon> (which I'm presuming is older)

[03:04] <timotimo> huh. strange.

[03:04] <timotimo> first i'm getting warnings about _ perhaps going away in a future release

[03:04] <timotimo> then i get Exception in thread "main" java.lang.UnsupportedClassVersionError: org/perl6/nqp/runtime/CompilationUnit : Unsupported major.minor version 52.0

[03:04] <timotimo> could that be because i copied the whole folder over? but i did make clean ..

[03:05] <timotimo> git clean -xf didn't get rid of the problem i fear

[03:14] *** raiph joined
[03:27] *** colomon left
[03:29] *** aindilis joined
[03:30] *** jreut joined
[03:35] *** BenGoldberg left
[03:40] *** jreut left
[04:04] *** ecocode left
[04:28] *** ecocode joined
[04:31] *** fhelmberger joined
[04:32] *** raiph left
[04:47] *** raiph joined
[04:48] *** birdwindupbird joined
[04:48] <TimToady> masak: re http://irclog.perlgeek.de/perl6/2013-07-28#i_7379060 STD has already pulled feeds back out from the precedence table into a feed_separator category

[04:51] *** btyler left
[04:59] *** odoacre joined
[05:00] *** ecocode left
[05:08] <TimToady> diakopter: I dunno where you're getting your definition of 'thunk' from, but mine comes from the original Algol definition as an implementation strategy for call-by-name

[05:09] <TimToady> looks like the term has since been "modernized" to fit into several other schemes as well :)

[05:11] <TimToady> the business of it being a parasite on its original lexical scope only matters because we allow declarations inside of expressions; otherwise it's simply an argumentless closure

[05:11] <lizmat> good *, #perl6!

[05:11] <TimToady> so that by necessity any bindings refer to that outer lexical scope just as they would in a normal closure

[05:12] *** bluescreen__ left
[05:12] *** bluescreen100 left
[05:22] <dalek> rakudo/nom: 1f026d9 | (Elizabeth Mattijsen)++ | src/core/Exception.pm:

[05:22] <dalek> rakudo/nom: Match trait error message to already existing spectest

[05:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1f026d9a5f

[05:22] *** fridim_ left
[05:26] *** fridim_ joined
[05:30] *** danaj joined
[05:32] <TimToady> regarding 'is readonly', we replaced that with '::=' binding

[05:33] <TimToady> lizmat: ^^

[05:33] <lizmat> :-)

[05:33] <TimToady> meaning bind it readonly just as we do paramters

[05:34] *** fridim_ left
[05:34] <lizmat> r: my $a =42; my $b ::= $a; $b = 3; say $a # except that is not implemented yet

[05:34] <camelia> rakudo d5523b: OUTPUT«3␤»

[05:34] <lizmat> :-(

[05:35] <TimToady> oh, it's implement, just wrong :)

[05:35] <TimToady> *mented

[05:37] *** SamuraiJack__ joined
[05:39] <lue> .oO(my $a = 42; my $b is rw ::= $a; $b = 3; say $a)

[05:41] <TimToady> lizmat: http://irclog.perlgeek.de/perl6/2013-07-28#i_7381240 does not look like a rakudobug to me; the initial assignment to the my happens at run time despite the useless use of BEGIN; you'd have to say 'BEGIN my $a = 5;' to get it assigned at compile time

[05:41] <TimToady> this is also why 'state' is defined as 'once my $x =' rather than 'my $x = once'

[05:42] <TimToady> phasers are not retroactive :)

[05:43] *** SamuraiJack__ left
[05:44] *** fgomez left
[05:44] <lizmat> TimToday: I guess that was a small WAT for a big DWIM  :-)

[05:45] <lizmat> lue: "is rw" on variables is gone too

[05:45] <diakopter> WHEW

[05:45] <lue> But... how else am I supposed to make a variable bound with ::= writeable‽‽‽

[05:46] <TimToady> [Coke]: readonly variables can be set each time through to something different, just as "readonly" parameters can represent something different each time; a constant can't change after compilation

[05:52] <lue> .oO(It's not like there's a rw version of ::= or anything.)

[05:54] *** wtw joined
[05:55] <lizmat> hmmm… it appears that the Routine:D, |c fallback trait is shadowing the Mu:D, :$docs trait

[05:56] <lizmat> in the case of "sub a is docs"

[05:58] *** ecocode joined
[05:59] *** raiph left
[06:15] <dalek> rakudo/nom: c810036 | (Elizabeth Mattijsen)++ | src/core/traits.pm:

[06:15] <dalek> rakudo/nom: Hopefully temporary fix for Mu:D :docs caught by Routine:D |c snafu

[06:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c810036333

[06:19] * ingy waves o/

[06:19] <lizmat> o/ ingy!

[06:19] <ingy> :)

[06:20] *** SamuraiJack__ joined
[06:25] <dalek> roast: 8462413 | (Elizabeth Mattijsen)++ | S06-traits/misc.t:

[06:25] <dalek> roast: Unfudge now passing trait mod test

[06:25] <dalek> roast: review: https://github.com/perl6/roast/commit/8462413311

[06:25] <dalek> roast: 0650e78 | (Elizabeth Mattijsen)++ | S14-traits/routines.t:

[06:25] <dalek> roast: Fudge now failing test, correct another for current error message format

[06:25] <dalek> roast: review: https://github.com/perl6/roast/commit/0650e78c93

[06:36] <dalek> roast: 8922597 | (Elizabeth Mattijsen)++ | S14-traits/routines.t:

[06:36] <dalek> roast: Fix test by limiting to Routine, rather than anything

[06:36] <dalek> roast: review: https://github.com/perl6/roast/commit/892259789f

[06:39] *** daxim joined
[06:41] <lizmat> breakfast&

[06:46] *** dmol joined
[06:56] *** abnorman left
[06:56] *** abnorman joined
[07:17] <masak> mornin', #perl6

[07:18] <lizmat> morning masak!

[07:18] <masak> Gloria++ # What Actually Transpires

[07:18] <masak> ...and you can say that with a '!?' inflection, and it'll be an excellent expansion of the normal usage of WAT as an interjection :P

[07:23] <lizmat> WAT!?

[07:23] <lizmat> :-)

[07:24] *** wk joined
[07:24] *** daxim left
[07:24] *** wk is now known as Guest51798

[07:24] *** daxim joined
[07:26] *** rafl joined
[07:26] *** Celelibi joined
[07:26] <masak> [backlog] TimToady: re http://irclog.perlgeek.de/perl6/2013-07-29#i_7382191 -- well, I'm thinking about this a lot, because macros/D3 talks about allowing exactly that for macro arguments (through COMPILER:: and other means). i.e. turning a macro argument from a closure into a thunk, which can leak variables back and forth.

[07:27] <masak> (by which I mean to say that "we allow declarations inside of expressions" might have been the only reason the parasite-hood of thunks matters. but it stops being the only reason once one considers macro arguments.)

[07:34] *** FROGGS joined
[07:34] <TimToady> troo

[07:36] <FROGGS> morning o/

[07:37] <lizmat> morning FROGGS!

[07:38] <lizmat> Q: what is the opposite of nqp::p6list ?

[07:38] * FROGGS needs to recover a bit from $weekend at $work

[07:38] <lizmat> aka, get the underlying RPA from an Array

[07:38] *** daxim left
[07:39] *** rafl left
[07:39] *** daxim joined
[07:39] * FROGGS has no idea

[07:39] *** Timbus joined
[07:39] *** Celelibi left
[07:39] <lizmat> too bad  :-(

[07:40] *** sqirrel joined
[07:40] *** Celelibi joined
[07:40] *** rafl joined
[07:43] *** Guest51798 left
[07:45] *** arcterus joined
[07:47] <arcterus> lizmat: how about nqp::getattr($list, List, '$!items')

[07:53] <lizmat> (testing, looking good so far)

[07:56] *** xinming left
[07:57] *** xinming joined
[08:11] <mathw> o/

[08:12] <lizmat> r: my @a; push @a, [1,2]; my $b := nqp::getattr( nqp::decont(@a), List, '$!items'); nqp::push( $b, [5,6] ); say @a.perl # works if there is something in @a

[08:12] <camelia> rakudo c81003: OUTPUT«Array.new([1, 2], [5, 6])␤»

[08:13] *** ecocode` joined
[08:14] *** iSlug joined
[08:14] *** ecocode left
[08:16] *** kaleem joined
[08:19] *** ecocode`` joined
[08:20] *** ecocode` left
[08:23] *** kivutar joined
[08:30] *** abnorman left
[08:30] *** abnorman joined
[08:44] *** crab2313 joined
[08:48] *** jercos joined
[08:53] *** jercos left
[08:54] *** kivutar left
[08:55] *** kivutar joined
[08:56] *** jercos joined
[08:56] *** arcterus left
[09:16] <crab2313> cd /moa

[09:16] <yoleaux> 25 Jul 2013 11:33Z <FROGGS> crab2313: this might fix your issue: https://github.com/MoarVM/MoarVM/commit/351339dfdc

[09:17] <crab2313> sorry.

[09:17] <crab2313> typo

[09:17] <FROGGS> np, :o)

[09:17] <crab2313> jnthn++

[09:27] *** pmurias joined
[09:27] <pmurias>  /connect irc.perl.org

[09:35] *** xinming left
[09:36] *** dakkar joined
[09:37] *** xinming joined
[09:49] *** abnorman left
[10:26] *** colomon joined
[10:27] *** yoleaux joined
[10:27] *** ChanServ sets mode: +v yoleaux

[10:27] <colomon> pandabrew broke overnight?

[10:30] <tadzik> did it work before? :|

[10:31] <colomon> I've been using it as part of my smoke tester since a bit before YAPC::NA.  Last night was the first time it didn't work.

[10:33] <lizmat> how did it break?  Did I break it?

[10:48] <lizmat> r: my Int @a; @a.push: "a"; say @a   # rakudobug

[10:48] <camelia> rakudo c81003: OUTPUT«a␤»

[10:48] <lizmat> r: my Int @a; @a[@a.end] ="a"; say @a

[10:48] <camelia> rakudo c81003: OUTPUT«Cannot use negative index -1 on Array+{TypedArray}␤  in method <anon> at src/gen/CORE.setting:11058␤  in any  at src/gen/Metamodel.nqp:2663␤  in any find_method_fallback at src/gen/Metamodel.nqp:2651␤  in any find_method at src/gen/Metamodel.nqp:946␤  in block  at …

[10:48] <lizmat> r: my Int @a; @a[@a.eelems] ="a"; say @a

[10:49] <camelia> rakudo c81003: OUTPUT«No such method 'eelems' for invocant of type 'Array+{TypedArray}'␤  in block  at /tmp/fBBdywBRLX:1␤␤»

[10:49] <lizmat> r: my Int @a; @a[@a.elems] ="a"; say @a

[10:49] <camelia> rakudo c81003: OUTPUT«Type check failed in assignment to '$v'; expected 'Int' but got 'Str'␤  in block  at /tmp/6VsTyW_b_X:1␤␤»

[10:49] <lizmat> apparently .push is not doing a typecheck

[10:49] <lizmat> r: my Int @a; @a.unshift: "a"; say @a   # rakudobug

[10:49] <camelia> rakudo c81003: OUTPUT«a␤»

[10:49] <lizmat> and nor is unshift

[10:50] * lizmat submits rakudonug

[10:52] <sjn> should shifting/pushing/etc. really do type checking?

[10:53] <lizmat> and why not?

[10:53] <moritz> it needs to, otherwise one can never be sure that an Array[Blah] only holds Blah objects

[10:53] <yoleaux> 28 Jul 2013 22:52Z <lizmat> moritz: wrt to $*W and $/ in Perl6 world: maybe we should add $*W and $/ to the trait mod signature?

[10:54] <lizmat> indeed

[10:54] <moritz> and then the whole point becomes moot

[10:54] <moritz> "we give you a typed array, but beware that under some conditions it can contain objects of other types". WAT?

[10:55] <lizmat> well, I guess we have a case of WAT on our hands now

[10:56] * lizmat adds some TODO tests

[10:57] <colomon> lizmat, tadzik: https://gist.github.com/colomon/6103588 # sorry for slow response, pandabrew error message

[10:58] <lizmat> ok, I fixed that one early this morning with  https://github.com/rakudo/rakudo/commit/c810036333

[10:58] *** iSlug left
[10:58] <lizmat> sorry for the noise

[11:00] <colomon> okay, smoke_test relaunched by hand.  

[11:00] <colomon> lizmat++

[11:04] *** pmurias left
[11:05] *** rafl left
[11:06] <dalek> roast: 08e6adb | (Elizabeth Mattijsen)++ | S32-array/ (2 files):

[11:06] <dalek> roast: Add type check TODO tests for .push and .unshift

[11:06] <dalek> roast: review: https://github.com/perl6/roast/commit/08e6adbdb2

[11:07] *** cognominal joined
[11:08] *** Celelibi left
[11:08] *** daxim left
[11:09] <tadzik> uh. wat

[11:09] <lizmat> no: uh, WAT!?

[11:09] <masak> W.A.T.

[11:09] *** rafl joined
[11:09] *** daxim_ joined
[11:09] *** Celelibi joined
[11:10] <lizmat> .oO( still waiting in anxiety for tadzik's WAT )

[11:11] <tadzik> WAT

[11:11] * tadzik bows

[11:12] <tadzik> lizmat: re the new ticket, I don't think we handle typed arrays atm at all

[11:12] <tadzik> that was a blocker on JSON::Unmarshal too

[11:12] <jercos> So I can't have array of Sunlight?

[11:13] <lizmat> r: my Int @a; @a[0]="a"

[11:13] <camelia> rakudo c81003: OUTPUT«Type check failed in assignment to '$v'; expected 'Int' but got 'Str'␤  in block  at /tmp/nHUK3t43Yc:1␤␤»

[11:13] <tadzik> oh

[11:13] <lizmat> tadzik: that's handling it, no?

[11:13] <tadzik> :>

[11:13] <tadzik> it is

[11:13] <tadzik> r: my Int @a; say @a.WHAT

[11:13] <camelia> rakudo c81003: OUTPUT«(Array+{TypedArray})␤»

[11:13] <tadzik> r: my Int @a; say @a.of

[11:13] <camelia> rakudo c81003: OUTPUT«(Int)␤»

[11:13] <lizmat> r: my Int @a; say @a.perl

[11:13] <camelia> rakudo c81003: OUTPUT«Array[Int].new()␤»

[11:13] <tadzik> :o

[11:13] <tadzik> is that new?

[11:14] <tadzik> or am I that old

[11:14] <lizmat> did that the past weeks or so

[11:14] <tadzik> ah, that explains it :)

[11:14] <tadzik> lizmat++

[11:14] <lizmat> I mean, the .perl on the typed array

[11:14] <tadzik> I can now make JSON::Unmarshal make sense

[11:14] <lizmat> the underlying functionality was there already

[11:15] <lizmat> my Int $a is default(42); say $a; $a=23; say $a; $a=Nil; say $a  # also works

[11:15] <lizmat> r: my Int $a is default(42); say $a; $a=23; say $a; $a=Nil; say $a  # also works

[11:15] <camelia> rakudo c81003: OUTPUT«42␤23␤42␤»

[11:15] <lizmat> lunch&

[11:23] *** colomon left
[11:26] <masak> r: subset OddInt of Int where { +$_ % 2 }; my OddInt $o; say +$o

[11:26] <camelia> rakudo c81003: OUTPUT«use of uninitialized value of type OddInt in numeric context  in block  at /tmp/vE3ReslfmC:1␤␤0␤»

[11:26] <masak> r: subset OddInt of Int is default(1) where { +$_ % 2 }

[11:26] <camelia> rakudo c81003: OUTPUT«===SORRY!===␤'OddInt' cannot inherit from 'default' because it is unknown.␤at /tmp/yPM29CGDlW:1␤------> ␤»

[11:26] * masak thinks it'd be nice if that worked (and were spec'd)

[11:26] *** kaleem left
[11:28] *** colomon joined
[11:29] *** kivutar left
[11:45] *** colomon left
[11:45] <lizmat> masak: but that would be a special case of "is" on a class, right ?

[11:45] <lizmat> r: subset OddInt of Int where { +$_ % 2 }; my OddInt $o is default(1); say $o

[11:45] <camelia> rakudo c81003: OUTPUT«1␤»

[11:46] <lizmat> is default only works on variables (at the moment, anyway)

[11:47] *** colomon joined
[11:47] <lizmat> r: my Int $a is default("foo"); say $a

[11:47] <camelia> rakudo c81003: OUTPUT«===SORRY!===␤Type check failed in assignment to '$a'; expected 'Int' but got 'Str'␤at /tmp/8RnV7MvDBr:1␤------> ␤»

[11:47] <lizmat> *phew*

[11:48] <lizmat> I guess we could improve on that message

[11:53] <dalek> rakudo/nom: f8e970b | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[11:53] <dalek> rakudo/nom: Reimplement List.push using nqp::push()

[11:53] <dalek> rakudo/nom: 

[11:53] <dalek> rakudo/nom: The old way was most definitely not thread safe: this way, we have one less

[11:53] <dalek> rakudo/nom: place to look out for thread safety.

[11:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f8e970b1b9

[11:54] <lizmat> .tell jnthn spectests are clean on https://github.com/rakudo/rakudo/commit/f8e970b1b9 , I can hardly believe it

[11:54] <yoleaux> lizmat: I'll pass your message to jnthn.

[11:54] *** stevan_ joined
[11:57] *** stevan__ joined
[11:57] *** rindolf joined
[11:58] *** zakalwe left
[11:59] *** stevan_ left
[12:00] *** zakalwe joined
[12:03] *** crab2313 left
[12:05] <moritz> lizmat: can you please run   my @a; @a.push: 1; @a[0] = 42; say @a   after this patch?

[12:06] <lizmat> $ perl6 -e ' my @a; @a.push: 1; @a[0] = 42; say @a '

[12:06] <lizmat> 42

[12:07] *** fhelmberger left
[12:07] <dalek> Perlito: d378d10 | (Flavio S. Glock)++ | / (4 files):

[12:07] <dalek> Perlito: Perlito5 - code cleanup

[12:07] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/d378d10971

[12:07] *** crab2313 joined
[12:08] <lizmat> moritz: are you suspecting a problem that wasn't caught by the spectests?

[12:10] *** SamuraiJack joined
[12:10] *** SamuraiJack__ left
[12:12] <moritz> lizmat: yes. I don't understand where your patch takes care that it's always containers that are pushed with Array.push

[12:12] <lizmat> I assume it's nqp::push doing that

[12:13] <lizmat> like nqp::unshift apparently also does (as .unshift was already implemented in terms of nqp::unshift)

[12:13] <moritz> that would be very odd

[12:13] <moritz> maybe it's .shift

[12:13] *** yoleaux left
[12:14] <lizmat> now that I have you on the horn: what is "nqp::p6listitems(self);" supposed to do?

[12:15] <moritz> it returns a low-level array with all the items in self, I think

[12:15] *** crab2313 left
[12:15] <lizmat> it's not equivalent to "nqp::bindattr( self, List, '$!items', nqp::list() ) if $elems == 0;" ?

[12:15] *** crab2313 joined
[12:17] *** woosley1 joined
[12:20] <moritz> certainly not

[12:20] *** woosley1 left
[12:20] <moritz> it reads from self, it doesn't write to it

[12:21] <lizmat> what use is then calliing it in sink context ?

[12:22] <lizmat> (which is what List.unshift does)

[12:23] *** kaleem joined
[12:26] *** crab2313 left
[12:26] *** crab2313 joined
[12:31] *** nyuszika7h joined
[12:31] *** nyuszika7h left
[12:31] *** colomon left
[12:31] *** nyuszika7h joined
[12:31] *** nyuszika7h left
[12:31] *** nyuszika7h joined
[12:31] *** nyuszika7h left
[12:31] *** nyuszika7h joined
[12:31] *** nyuszika7h left
[12:32] *** nyuszika7h joined
[12:32] *** nyuszika7h left
[12:32] *** nyuszika7h joined
[12:32] *** nyuszika7h left
[12:32] *** colomon joined
[12:32] *** autumn joined
[12:32] *** nyuszika7h joined
[12:32] *** nyuszika7h left
[12:33] <lizmat> moritz: fwiw, nqp::p6listitems(self) seems to be exactly what I need to have it create the storage for an empty list

[12:33] *** nyuszika7h joined
[12:33] *** nyuszika7h left
[12:34] *** nyuszika7h joined
[12:34] <dalek> rakudo/nom: 34131db | (Elizabeth Mattijsen)++ | src/core/List.pm:

[12:34] <dalek> rakudo/nom: Tweaks in List.unshift / List.push

[12:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/34131dbf67

[12:35] *** orafu joined
[12:37] <dalek> rakudo/nom: 923fe34 | (Elizabeth Mattijsen)++ | src/core/List.pm:

[12:37] <dalek> rakudo/nom: Moved List.(un)shift so that similar functionality is closer in the source

[12:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/923fe34a3a

[12:41] *** btyler joined
[12:41] *** sqirrel left
[12:45] *** matthias__ joined
[12:46] *** ecocode`` left
[12:46] *** ecocode`` joined
[12:48] *** yoleaux joined
[12:48] *** ChanServ sets mode: +v yoleaux

[12:53] *** btyler left
[12:57] *** benabik left
[12:58] <[Coke]> LHF: Someone could go through https://github.com/coke/rakudo-star-daily/blob/master/log/test-modules.log and open bug reports (or pull requests) for the various failing modules.

[12:59] <lizmat> r: my Int @a=<foo bar>; say @a  # yikes!

[12:59] <camelia> rakudo f8e970: OUTPUT«foo bar␤»

[13:02] * masak submits rakudobug

[13:04] <masak> compile-time checks and constant folding seem very tangled together in cases such as these.

[13:04] <moritz> I'm pretty sure you get the same error without the opimizier

[13:04] <masak> one is "is this even possible to do (and is it possible to find out statically?", the other is "let's just do this statically"

[13:05] <moritz> constant folding calls the same code as would be called at run time

[13:05] <moritz> the problem is different here, IMHO

[13:05] <masak> moritz: what error? there wasn't an error.

[13:05] <masak> that's the bug... :)

[13:05] <moritz> erm, same non-error

[13:05] <masak> oh, fershure.

[13:06] <masak> I was just reflecting in general about the closeness of the two processes.

[13:06] <masak> it interests me that they are tangled. it seems to be an essential neg-separation.

[13:07] <masak> r: my Int @a; @a = <foo bar>; say @a

[13:07] <camelia> rakudo f8e970: OUTPUT«foo bar␤»

[13:07] <masak> r: my Int @a; @a = Nil; @a.push: $_ for <foo bar>; say @a

[13:07] <camelia> rakudo f8e970: OUTPUT«foo bar␤»

[13:08] <moritz> masak: the real problem here is that typed arrays don't replace some low-level store operation that all high-level writing operations use

[13:08] *** PacoAir joined
[13:08] <moritz> masak: but instead it aims to re-implement all high-level writing operations, and several of them were forgotton, it seems

[13:08] <lizmat> r: my @a = <foo bar baz>; my Int @b= @a; say @b # more forgetfulness

[13:08] <camelia> rakudo f8e970: OUTPUT«foo bar baz␤»

[13:08] <lizmat> r: my Int $a="foo"

[13:08] <camelia> rakudo f8e970: OUTPUT«Type check failed in assignment to '$a'; expected 'Int' but got 'Str'␤  in block  at /tmp/I_tdNQav7C:1␤␤»

[13:09] <lizmat> *phew*

[13:09] <masak> moritz: from my viewpoint as an architect, it feels like we've neglected to put in an "invariant check" early on, and now it's coming back to bite us repeatedly.

[13:09] <masak> "or right, we totally forgot about that code path, too!"

[13:10] <masak> oh*

[13:17] *** SamuraiJack left
[13:18] *** pnu joined
[13:18] *** zamolxes joined
[13:19] *** colomon left
[13:20] *** ribasushi joined
[13:32] <dalek> rakudo/nom: 72b1b02 | (Elizabeth Mattijsen)++ | src/core/List.pm:

[13:32] <dalek> rakudo/nom: Add type checks for List.push and List.unshift

[13:32] <dalek> rakudo/nom: 

[13:32] <dalek> rakudo/nom: These should probably be done at a lower level, but for now we're at least

[13:32] <dalek> rakudo/nom: according to spec.

[13:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/72b1b028a4

[13:36] <matthias__> hi, I am curious if something like «{ my $OUTER::x = 2 }; say $x» is going to work?

[13:36] <moritz> masak: a huge problem is that lists and arrays really, really need to be fast, so we don't want another layer of indirection anywhere

[13:36] <moritz> matthias__: no, you won't be able to declare variables for an outer scope. That's a feature.

[13:36] <matthias__> ok thank you moritz

[13:37] <diakopter> moritz: well, it could be argued that they're going to be really slow no matter what until an awesome optimizer appears

[13:37] <yoleaux> 08:36Z <FROGGS> diakopter: can you fix it please? I'm not so sure what to do: http://irclog.perlgeek.de/moarvm/2013-07-28#i_7378950  and  http://irclog.perlgeek.de/moarvm/2013-07-28#i_7378959

[13:37] <yoleaux> 08:58Z <FROGGS> diakopter: nvm, everything is good :o)

[13:37] <diakopter> FROGGS: fix it yourself!

[13:37] <diakopter> FROGGS: oh wait, you did.. ;)(

[13:37] <diakopter> ;)

[13:37] <FROGGS> hehe

[13:37] <FROGGS> well, yes and no

[13:37] <FROGGS> brb

[13:38] <diakopter> I really should merge these two branches just to get the makefile fixes, once they work on gmake too

[13:39] <diakopter> before they diverge even more

[13:39] *** btyler joined
[13:39] <moritz> diakopter: that's not a good argument for making them even slower right now

[13:39] <dalek> roast: 03df203 | (Elizabeth Mattijsen)++ | S (4 files):

[13:39] <dalek> roast: Unfudge now passing TODO tests, because of type checks on .push and .unshift

[13:39] <dalek> roast: review: https://github.com/perl6/roast/commit/03df2032a7

[13:40] *** shinobicl joined
[13:40] <lizmat> FWIW, for Mu arrays, there is only 1 extra check compared to before

[13:40] <lizmat> self.of =:= Mu

[13:40] <diakopter> moritz: I know; I'm mostly teasing.  mostly.

[13:42] <diakopter> moritz: http://irclog.perlgeek.de/moarvm/2013-07-29 has a link at the bottom to the next day

[13:42] <timotimo> r: my @a; say @a.of;

[13:42] <camelia> rakudo 923fe3: OUTPUT«(Mu)␤»

[13:43] <timotimo> oh, that's interesting, i suspected they would be of Any by default

[13:43] *** dayangkun joined
[13:44] <moritz> most (all?) built-in container types default to Mu

[13:45] <moritz> mostly because there's no good explanation of what happens when assignment autothreads

[13:46] *** sqirrel joined
[13:46] <timotimo> that's fair.

[13:47] <timotimo> hm; in theory the optimizer could complain at compile-time when arrays of non-matching types are somehow mingled

[13:47] *** dayangkun left
[13:47] <lizmat> r: my Int @a; my Str @b=@a

[13:48] <camelia> rakudo 923fe3:  ( no output )

[13:48] <lizmat> I guess that could be caught at compile time

[13:48] <timotimo> i'm a bit unhappy about having the type checks inside these operations like shift/push/assign, because if they were somehow separate and visible to the optimizer, the optimizer could just say "this operation is wrapped in a typecheck-op, in this case it seems like i can do the typecheck-op at compile-time!" and leave the rest be

[13:48] <moritz> technically that's valid for empty arrays

[13:48] <timotimo> this way it'd need to either inline all those methods or know about each one, i guess?

[13:49] <lizmat> timotimo: I agree with you, and I'll be the first to rip out that code when we have another solution

[13:49] <timotimo> i wish i had a good solution, though

[13:49] <lizmat> the solution lies in the guts at C-level, most likely

[13:49] <lizmat> where things like Nil assigments will need to be checked as well

[13:49] <timotimo> i don't like hearing that

[13:49] <arnsholt> diakopter: If you need someone to test and debug with gmake I can pitch in

[13:50] <timotimo> hey, how's about the typed arrays get their arguments for push etc typeconstrained? is that doable with the roles we have?

[13:50] <diakopter> I thought that type check array assignment bug was already in rt

[13:51] *** skids joined
[13:51] <lizmat> r: my Int $a="foo" # checked in rakudo_scalar_store in src/vm/parrot/guts/container.c

[13:52] <camelia> rakudo 923fe3: OUTPUT«Type check failed in assignment to '$a'; expected 'Int' but got 'Str'␤  in block  at /tmp/90MxMuKhYX:1␤␤»

[13:52] <timotimo> that's the easiest case; that can very well be done by the optimizer at compile-time.

[13:52] <timotimo> actually, maybe that's already the case?

[13:52] <timotimo> r: say "alive"; my Int $a = "foo";

[13:52] <camelia> rakudo 923fe3: OUTPUT«alive␤Type check failed in assignment to '$a'; expected 'Int' but got 'Str'␤  in block  at /tmp/LC_VeIi071:1␤␤»

[13:52] <timotimo> nope, sadly not

[13:54] <JimmyZ> lizmat: re 72b1b028a4, runtime check is not about right :)

[13:55] <lizmat> JimmyZ: seems to work, but I'm easily corrected  :-)

[13:55] <timotimo> hm. if the optimizer learns to do the type checking for assignments and push etc, it'd still need a way to do a non-runtime-checked assignment/push/...

[13:55] <lizmat> indeed, runtime will always be needed

[13:56] <lizmat> especially if coming from an Any container assigning to a typed container

[13:56] <JimmyZ> I would rather not do check if it only slow things and throw exception in runtime

[13:57] <timotimo> of course; what i mean is: if i have an Int array and an Int array and i unshift + push from one to the other or something like that ... the optimizer can recognize that it's safe, but it has no way to push into the other array without executing *another* check at runtime

[13:57] <timotimo> shift+push is what i meant to write.

[13:57] <lizmat> indeed

[13:57] <JimmyZ> it doesn't make things better, but worse

[13:58] *** BenGoldberg joined
[13:58] <lizmat> JimmyZ: why? if you don't want typed containers, and the associated tests, don't use them  :-)

[13:59] <lizmat> let me check if I can MMD to the work

[13:59] <moritz> well

[13:59] <moritz> yes, MMD is what I wanted to mention

[14:00] * PerlJam wonders if Perl 6 will grow a type inferencer like Haskell has

[14:00] <moritz> maybe, maybe we can give Array[Int].shift a signature with return type Int

[14:00] <moritz> and an Array[Int].push candidate that accepts a single Int

[14:01] <lizmat> moritz: I was working on that, but turned out to be more complex than I thought

[14:01] <timotimo> moritz: i would love that; can it be done just with roles and type captures?

[14:02] <timotimo> PerlJam: obviously type-infering everything will be hard unless we sprinkle the core setting with many, many more type annotations

[14:02] <timotimo> currently there are very, very few

[14:02] <timotimo> or maybe you mean that those would be type-infered automatically if possible?

[14:03] *** bluescreen10 joined
[14:04] <[Coke]> r: for 1..10 -> { constant ha := $_ ; say ha }

[14:04] <camelia> rakudo 923fe3: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in block  at /tmp/VASTQKo5lA:1␤␤»

[14:04] *** logie joined
[14:04] <skids> .oO(.push(more,than,one,thing,in,lazy,list) is bothersome -- how you MMD on that without breaking laziness to find the types.)

[14:05] <[Coke]> r: for 1..10 -> $a { constant ha := $ ; say ha }

[14:05] <camelia> rakudo 923fe3: OUTPUT«===SORRY!===␤Non-declarative sigil is missing its name␤at /tmp/wnEroWoVGZ:1␤------> for 1..10 -> $a { constant ha := ⏏$ ; say ha }␤    expecting any of:␤        colon pair␤        prefix or term␤        prefix or meta-prefix␤»…

[14:05] <[Coke]> r: for 1..10 -> $a { constant ha := $a ; say ha }

[14:05] <camelia> rakudo 923fe3: OUTPUT«(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤(Mu)␤»

[14:05] <moritz> timotimo: I have no idea

[14:05] *** xilo joined
[14:05] <lizmat> see TimToady's comments earlier today

[14:05] <timotimo> skids: that'll require runtime checks apart from the MMD i fear :(

[14:06] <moritz> r: role R[T] { multi method x(T $x ) returns T { $x * 2 } }; say R[Int].x(42)

[14:06] <camelia> rakudo 923fe3: OUTPUT«===SORRY!===␤Invalid typename 'T' in parameter declaration.␤at /tmp/Ek_Cg1DFUz:1␤------> role R[T⏏] { multi method x(T $x ) returns T { $x␤»

[14:06] <moritz> r: role R[::T] { multi method x(T $x ) returns T { $x * 2 } }; say R[Int].x(42)

[14:06] <camelia> rakudo 923fe3: OUTPUT«Cannot type check against type variable T␤  in any type_check at src/gen/Metamodel.nqp:305␤  in method x at /tmp/QJv1xfUiIQ:1␤  in method x at src/gen/CORE.setting:510␤  in any  at src/gen/Metamodel.nqp:1461␤  in block  at /tmp/QJv1xfUiIQ:1␤␤»

[14:06] <moritz> timotimo: seems you can't, with current roles implementation

[14:07] <lizmat> moritz: this should be a right signature, no: multi method push(List:D: *@values where .of =:= Mu) {

[14:07] <moritz> lizmat: that's not what I meant

[14:08] <moritz> lizmat: I meant a candidate    multi method push(List:D: Int $just_one_value) is default { }

[14:08] <moritz> lizmat: which needs to be generated at specialization type

[14:08] <moritz> lizmat: the problem is that @values.of is always Mu

[14:08] <lizmat> ah, but I meant it to work on self

[14:08] *** ecocode`` left
[14:09] <moritz> but the .of is called on @values

[14:09] <lizmat> so how do I specify the check to be performed on the object ?

[14:09] <skids> timotimo: unless push was specced to have the same effect as a recursive MMD on each argument, even if not implemented that way internally.

[14:11] <moritz> maybe the real answer is to give the optimizer more meta data

[14:14] <timotimo> moritz: "with current roles implementation" seems good. that means it's possible to do in spec ;)

[14:14] <moritz> no

[14:14] <moritz> just because it's impossible with current implementation doesn't mean it's possible by spec

[14:15] <timotimo> aaw

[14:15] <moritz> in fact I'm not sure what exactly the spec says on this issue, if anything at all

[14:15] <timotimo> +perhaps, then

[14:15] <moritz> perhaps, yes

[14:15] <timotimo> sounds like a candidate for a spec ticket

[14:15] <moritz> sounds a candidate for reading up on the specs

[14:16] <moritz> and if it's unclear, maybe a spec ticket

[14:16] <moritz> because I don't have perfect by-heart knowledge of the specs, sad as it is :-)

[14:17] <skids> moritz++ I was biting my tongue trying not to say "maybe we should do  <already specced thing> instead of what's in the spec".

[14:17] <timotimo> skids: i'm not sure i understand you, but it seems like you're conflating .push and .plan?

[14:19] <masak> 'management: "get your ducks in a row". chaordic management: self-organizing ducks" -- https://speakerdeck.com/lauraxt/minimum-viable-bureaucracy

[14:20] <masak> s/" /' /

[14:20] <masak> seems apt for #perl6.

[14:20] * lizmat ducks

[14:21] <lizmat> and goes of to look at something else

[14:21] <lizmat> off

[14:21] <skids> timotimo: not conflating just saying maybe Array[Type].push should proceed to push until a typecheck fails, instead of plumbing the entire arglist before trying to push. 

[14:22] *** benabik joined
[14:23] <skids> Effectively working as though it were implemented as push(blah,...) { push(blah), push(...) } 

[14:23] <timotimo> ah. interesting point indeed

[14:24] <timotimo> because a type check exception can be caught and you'd want to know if the stuff before that would have been pushed before or not.

[14:24] <lizmat> skids, timotimo: but that's what the current implementation does ?

[14:24] <[Coke]> "Don't commit to estimates for unknown tasks. Just say no." (from that deck. ++)

[14:24] <timotimo> lizmat: in that case, a clarification in the spec may be appropriate

[14:24] <skids> lizmat: yay! :-)

[14:25] <masak> I really like the sound of the last slide: "mastery, autonomy, purpose". those are three words I value.

[14:26] <lizmat> map has always been very powerful, albeit lazy

[14:31] *** crab2313 left
[14:34] *** crab2313 joined
[14:34] *** arcterus joined
[14:35] *** colomon joined
[14:36] <masak> :)

[14:36] <jercos> (:

[14:37] *** matthias__ left
[14:37] *** Psyche^_ joined
[14:38] * moritz turns his head the other way to follow the smiley

[14:38] <jercos> ☃

[14:40] <masak> ☄!

[14:40] *** arcterus left
[14:40] <masak> sheesh, we still don't have the Snowman::Comet module yet...

[14:40] *** telex joined
[14:40] <masak> hurry up and future already!

[14:41] <jercos> use Acme::TimeTravel

[14:41] *** Psyche^ left
[14:43] <timotimo> i ... don't even ...

[14:43] <timotimo> what would that even do?

[14:44] <timotimo> the snowman::comet module i mean

[14:47] <masak> timotimo: you must be new here. :D

[14:47] *** yangyong joined
[14:47] <masak> sorry, I don't mean to be snide, but that's part of our cultural heritage, and you simply must know it :P

[14:48] <masak> hold on, let me get the RT ticket for ya.

[14:48] <Ulti> 💩

[14:48] <masak> https://rt.perl.org/rt3/Ticket/Display.html?id=66498

[14:48] <masak> Ulti: your client doesn't seem to utf8 properly.

[14:48] <Ulti> orly I can see it :/

[14:49] <timotimo> :)

[14:49] <masak> timotimo: first use was prolly here: http://irclog.perlgeek.de/perl6/2009-06-10#i_1229012

[14:50] <masak> timotimo: short story: the bug got fixed, but *of course* now there's no way we *can't* implement snowman-comet quoting as a (language-altering) module.

[14:50] <masak> should be pretty trivial, once we have slangs.

[14:50] <timotimo> haha, i've seen that test some time ago i think

[14:50] <timotimo> but i never knew it had any cultural 'weight' to it :)

[14:52] <[Coke]> google searching the logs for ☃ gives several false positives, it seems. (even with intext:☃)

[14:53] <masak> you can't stop people from making snowmen.

[14:53] *** kaare_ joined
[14:53] *** pupoque_ joined
[14:54] <lizmat> I Am The Sun  :-)

[14:55] <masak> ☀

[14:56] *** pmurias joined
[14:57] *** Pleiades` joined
[14:58] <masak> I'd love to see someone blog how the Perl 5 and Perl 6 communities view the bullet points in http://www.python.org/dev/peps/pep-0020/

[14:59] *** yangyong left
[14:59] <masak> for example, "In the face of ambiguity, refuse the temptation to guess." seems to be a very anti-DWIM stance.

[15:00] <masak> as such, Perl 5 should take a rather contrary position, and Perl 6 perhaps a less contrary one, but still not full agreement.

[15:00] <masak> just as an example.

[15:00] <masak> also, that list is from 2004 -- I wonder if the modern Python community is distancing itself from one or more of those?

[15:02] <flussence> "practicality beats purity" maybe... they're still struggling with the py2 to 3 transition even though it's meant to be a straight upgrade.

[15:02] <masak> well, let's not be mean about that upgrade. our challenge is greater.

[15:03] <masak> it shouldn't fill us with glee that others are facing similar hurdles.

[15:03] * lizmat mumbles something about our own strength and not taking issue with what other people think

[15:03] <masak> I think in many ways, it is a straight upgrade. the problem is the ecosystem, which is largely py2.

[15:04] *** bluescreen10 left
[15:05] <masak> ecosystem matters. it may block the path to worthwhile upgrades/transitions. in a way, it's a "problem of success".

[15:05] <nwc10> Yes. I think that that's a key part of it

[15:06] <nwc10> and I see nothing nice about being unpleasant or unhelpful about that upgrade

[15:07] <nwc10> but I suspect that there are things to learn from it, and problems to avoid repeating

[15:07] <arnsholt> masak: I think the most important point of disagreement between Perl and Python (in terms of your link) is on "there should be only one obvious way"

[15:07] <dalek> rakudo/nom: 5628e68 | (Elizabeth Mattijsen)++ | src/core/Hash.pm:

[15:07] <dalek> rakudo/nom: Reimplement Hash.classify/categorize using nqp primitives

[15:07] <dalek> rakudo/nom: 

[15:07] <dalek> rakudo/nom: This makes for about a 40% reduction in CPU

[15:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5628e68d23

[15:07] <flussence> those bullet points seem to have worked either way, the GNOME world pretty much runs on python everywhere.

[15:07] <masak> arnsholt: aye -- that is *the* difference, if you ask me.

[15:08] <masak> arnsholt: it's a kind of mental monoculture versus mental liberalism.

[15:08] <timotimo> 40%! \o/

[15:08] <lizmat> .tell colomon I've reimplement classify/categorize and wonder how your code would be faring with these versions

[15:08] <yoleaux> lizmat: I'll pass your message to colomon.

[15:08] <arnsholt> Yeah. There are differences on the others as well, but there it's mostly over what qualifies as what

[15:08] <masak> arnsholt: though of course no Pythonista would ever put it that way :P

[15:08] <Ulti> arnsholt: I dunno I think thats a good tennant for Perl too, the obvious way doesnt need to be the only way though

[15:08] <Ulti> having one obvious good practice style of doing something is a strength

[15:09] *** bluescreen10 joined
[15:09] <colomon> lizmat: noted

[15:09] <yoleaux> 15:08Z <lizmat> colomon: I've reimplement classify/categorize and wonder how your code would be faring with these versions

[15:10] <arnsholt> masak: Different ideals, yeah =)

[15:12] * colomon just noticed the ABC module has been failing tests for nearly a week.  way to overlook the mote in your own eye, dude.

[15:12] <lizmat> ABC ?

[15:14] <colomon> http://abcnotation.com/  https://github.com/colomon/ABC

[15:15] <lizmat> ooooo  wow…   dus MusicMatic ring a bell with you?

[15:15] <lizmat> MusiMatic rather

[15:16] <timotimo> arnsholt: have you been able to look into the failures in zavolaj that coke has found with his daily star runs?

[15:16] <colomon> lizmat: sorry, no?

[15:17] <lizmat> http://www.43things.com/entries/view/1232086  references it

[15:17] <lizmat> "The Symphony of Psalms is fabulous too. I’ll never forget a friend of mine carefully encoding it into “MusiMatic” – a music playing program on PLATO when I was in college (billions of years ago). It totally worked."

[15:17] <lizmat> PLATO also had locking super/subscript

[15:18] <lizmat> you could use this to indicate to an octave higher / lower

[15:18] <lizmat> You entered music with MusiMatic as text, and it would play it, with max 4 voices if I remember correctly

[15:19] <lizmat> this was the late 70s  :-)

[15:19] <colomon> lizmat: cool!

[15:19] <daxim_> plato also had <http://enwp.org/Avatar_(PLATO_system_video_game)>, an influential game

[15:20] <arnsholt> timotimo: Some traits that are no longer valid, apparently. Should be pretty straightforward to fix I think

[15:20] <lizmat> empire on PLATO was multiplayer StarTrek universe

[15:20] <daxim_> its spiritual descendants are mordor for windows 3, and demise for win9x

[15:20] <colomon> I think I started messing around with computer music in 1982 or so.

[15:20] <lizmat> arnsholt: yes, I removed a few in the past days

[15:20] <lizmat> all according to spec, I might add  :-)

[15:21] <arnsholt> Well, that's what happens when you remove them from the spec, isn't it? =p

[15:21] <colomon> One of the very first programs I wrote was a music program, actually.  Cobbled together with not particularly compatible hints at how to do it from different programming magazines.

[15:21] <lizmat> :-)

[15:23] <colomon> lizmat: anyway, I actually use the p6 ABC module for sheet music pretty regularly, so having it broken is a Big Deal as far as I am concerned.

[15:23] <lizmat> daxim: ah, the memories: Moria!  around the same time I was working on yet another Moria successor called Angmar  :-)

[15:23] <lizmat> colomon: I hope the breakage is easy to fix

[15:23] <colomon> lizmat: me too!

[15:24] * [Coke] opens tickets for the 3 failing star modules.

[15:24] <daxim_> you'll like my lightning talk  http://act.yapc.eu/ye2013/talk/4952

[15:24] <lizmat> indeed!

[15:24] <masak> Ulti: psst! "tennant" is the 10th Doctor. if you mean "underpinning principle", "tenet" is what you want. :)

[15:26] <daxim_> Telo, sisne, tenet? Non tenet ensis, olet.

[15:28] *** kaleem left
[15:28] * [Coke] opens issues for the 3 modules included in * with no tests.

[15:28] <huf> google translate bleeds to death on that 

[15:28] <huf> daxim_: what does it mean?

[15:29] <daxim_> set input lang to latin

[15:29] <huf> i got _that_ far :)

[15:30] <lizmat> it means the same backwards, that's for sure :-)

[15:30] <[Coke]> tadzik: pod-to-html is one with no tests.

[15:35] *** daxim_ left
[15:38] <masak> the Web seems to suggest it's the last line of a "Sotadic Elegiac poem".

[15:38] <masak> of which every line, it looks like, is a palindrome.

[15:39] <masak> it's in here: http://www.gutenberg.org/files/42792/42792-h/42792-h.htm

[15:39] <masak> that's as far as I get right now.

[15:39] *** birdwindupbird left
[16:01] *** DarthGandalf joined
[16:04] *** arcterus joined
[16:07] <TimToady> re: my $x (42); this is parsing as a subsignature, so it doesn't catch the TTIAR error

[16:07] <TimToady> it's not clear to me before coffee whether anything can be done about that...

[16:07] <TimToady> might not be clear after either :)

[16:09] <TimToady> rn: my $x (1+2);

[16:09] <camelia> rakudo 5628e6: OUTPUT«===SORRY!===␤Unable to parse expression in constraint; couldn't find final ')'␤at /tmp/qWKPnStLbw:1␤------> my $x (1⏏+2);␤    expecting any of:␤        scoped declarator␤        constraint␤»

[16:09] <camelia> ..niecza v24-88-g1f87209: OUTPUT«===SORRY!===␤␤Unable to parse constraint at /tmp/cQpiXKCqcb line 1:␤------> my $x (⏏1+2);␤Couldn't find final ')'; gave up at /tmp/cQpiXKCqcb line 1:␤------> my $x (1⏏+2);␤␤Parse failed␤␤»…

[16:09] <TimToady> at least some things are illegal in a sig

[16:09] <masak> surely a thing like '(42)' in that position could simply be disallowed?

[16:09] <masak> even if that counted as an "exception", I mean.

[16:10] <lizmat> r: my $a is default (42)   # specifically for these typos

[16:10] <camelia> rakudo 5628e6:  ( no output )

[16:10] <Ulti> masak: heh thanks

[16:10] <TimToady> dunno if a subsig ought to apply to a subsequent bind; arguably it should apply to a $x ::= $stuff

[16:10] <lizmat> r: my $a is default (42); say $a

[16:10] <camelia> rakudo 5628e6: OUTPUT«True␤»

[16:10] *** rindolf left
[16:10] <moritz> compare:  sub ($x (:$a, :$b)) { }

[16:11] <TimToady> we could usefully disallow constants on non multi sigs, I suppose

[16:11] <Ulti> masak: all things are reducible to David Tennant Dr Who quotes is a tenet of Perl too though right?

[16:13] <TimToady> we have a big tenet tent

[16:13] <TimToady> r: my $x (42); $x ::= 43; say $x; # arguably should fail

[16:13] <camelia> rakudo 5628e6: OUTPUT«43␤»

[16:14] <TimToady> since the corresponding parameter binding would fail

[16:15] <masak> Ulti: :)

[16:17] <Ulti> I am really bad for that kind of word confusion :S the most embarrassing to date was confusing affluence and effluence

[16:17] <TimToady> :D

[16:17] <Ulti> protip for Perl6 design ^ dont have efflience operators

[16:17] <Ulti> *effluence

[16:18] <Ulti> 'effluence control' would be a great bit of word salad for programming

[16:19] <TimToady> you can't control effluence, it just happens :)

[16:19] <TimToady> there is no guarantee of affluence, however, sigh...

[16:20] <Ulti> you do need to manage both though

[16:20] * TimToady will settle for a little influence now and then

[16:20] * colomon is wondering how one debugs C++ when the debugger gets completely lost...

[16:20] <Ulti> I imagine aff and eff word starts are the most commonly confused in English though, affect/effect

[16:21] <Ulti> too many accents have aff and eff sounding the same

[16:22] *** rindolf joined
[16:23] * TimToady tries to feel effection for everyone...

[16:25] * lizmat feels very effective now

[16:25] <lizmat> or is it effectivated?

[16:26] <TimToady> depends on which affect you are trying to effect

[16:26] <dalek> rakudo/nom: 9dd34f3 | (Elizabeth Mattijsen)++ | src/core/Hash.pm:

[16:26] <dalek> rakudo/nom: Allow multi-level classifications, as per spec

[16:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9dd34f39ba

[16:28] <lizmat> cycling + dinner&

[16:28] *** orafu left
[16:29] *** FROGGS[mobile] joined
[16:32] *** crab2313 left
[16:33] *** FROGGS left
[16:38] <moritz> colomon: strategically placed cout << statements

[16:39] <colomon> moritz: that's what I'm afraid of

[16:40] <colomon> moritz: not sure they're paying me enough for this

[16:42] *** spider-mario joined
[16:45] <colomon> "lemma-encrusted shoulders of giants" http://www.scottaaronson.com/blog/?p=304

[16:46] *** arcterus left
[16:48] *** FROGGS joined
[16:48] *** FROGGS[mobile] left
[16:48] * TimToady suspects the solution to the typed lazy slurpy problem involves being a little bit smarter about static typing of parcel tails

[16:48] <TimToady> such that if you have a typed slurpy, it must be provable at bind time that the tail of the parcel is compatible

[16:49] <TimToady> and the act of putting a type on a slurpy requires the caller to supply that compatibility, either statically via known/inferred types, or by putting a coercer that is known to produce the correct type of list

[16:50] <moritz> the other alternative is a typecheck-as-you-reify approach

[16:50] <TimToady> a guaranteed-slow approach

[16:50] <moritz> (rather than coerce-as-you-reify)

[16:51] <TimToady> coerce as you reifiy would be a declaration like Int() *@slurpy

[16:51] <TimToady> but the important observation is that the static type system can infer things about the tail of a parcel, I think

[16:52] <TimToady> if you have a parcel (1.1, 2.2, 3, 4, 5), and you bind it to ($a, $b, Int *@c), then the compiler should be able to know that starting at the 3rd argument, the parcel is compatible with Int

[16:53] <TimToady> likewise my Int @ints; (1.1, 2.2, @ints)

[16:54] <TimToady> and I'm sayin' we could bend the language in the direction of requiring the caller to take more type responsibility in binding to such a signature

[16:54] <TimToady> how much more depends on how much tail inferencing we do

[16:54] * moritz is always scared when TimToady muses about what static analysis should be able to recognize

[16:55] <TimToady> well, gradual typing sits somewhere between static and dynamic, but we're still rather prejudiced toward the dynamic end

[16:55] <TimToady> the static typers would think we are still way out on the dynamic end

[16:55] <TimToady> certainly in Haskell, you'd know the type of the things in your lazy list very accurately

[16:56] <arnsholt> If nothing else, relying/allowing on static analysis here means different compilers most likely will differ in what code they accept and don't, since they won't have the exact same inference capabilities

[16:56] * TimToady is just wondering how far we can move that direction (in the case of a typed slurpy) without turning into a brain-pretzel language like Haskell

[16:56] <diakopter> is it better to be effable or affable?

[16:57] <TimToady> diakopter: I'll have a little of each, please :)

[16:57] <diakopter> remind me which one is the influenza operator

[16:57] *** pecastro joined
[16:58] <TimToady> arnsholt: mostly the differences would show up as what could be detected at compile time vs run time

[16:58] *** abnorman joined
[16:58] <arnsholt> timotimo: Correction. The bug seems to be more complicated than I thought. Are you blocking on it ATM?

[16:58] *** abnorman left
[16:59] *** abnorman joined
[17:00] <TimToady> but it seems completely obvious to me that the only way to have efficient typed laziness is through static knowledge of the types

[17:01] <arnsholt> jnthn: Could you have a quick look at the recent Zavolaj-fail? I suspect it's due to something changing within Str in Rakudo, which means that I can't mix into a Str with does anymore

[17:01] <TimToady> and that we should not preclude using this knowledge when it is available

[17:01] *** bluescreen10 left
[17:02] <diakopter> arnsholt: jnthn's out for a week

[17:02] <arnsholt> Oh. Right.

[17:02] <TimToady> the other thing that is obvious to me is that when we have to check at runtime, we should only do it once

[17:03] <TimToady> requiring the caller to install a statically typed coercer in some cases is not too onerous, I think, if it prevents the binder from having to do duplicate type checks

[17:04] <TimToady> s/prevents/relieves/ maybe

[17:06] <TimToady> and for any such calls known at compile time to be compatible, the type checking can be thrown away entirely

[17:06] <TimToady> which would apply to lexical functions, as well as an finalizable methods

[17:07] <TimToady> and for non-finalizable methods, it comes down to a single run-time check for the tail of the parcel at the current binding position, and fail if the tail is not known to be compatible

[17:08] <TimToady> then there's never any need to typecheck an entire list from the standpoint of the binder

[17:09] <TimToady> the binder may, however, require the caller to find some way of asserting the correct type, either through an explicit coercer/checker, or via additional type annotations on the incoming data

[17:09] <TimToady> (or via inferencing, to the extent we do it)

[17:10] <TimToady> this feels like a better balance point on the gradual typing spectrum than just assuming that slurpies have to be dynamically checked always

[17:10] *** dakkar left
[17:11] <TimToady> doubtless there will also be some kind of I-know-what-I'm-doing cast that asserts a type without "proving" it

[17:13] <arnsholt> Are there any non-jnthn Rakudo-core hackers who might be able to shed light on the Zavolaj failure?

[17:13] <TimToady> I guess another way of saying it is that type checking the tail of a small parcel is much easier than type checking the tail of the list that might be produced by the parcel

[17:14] <arnsholt> It complains that "Cannot create rw-accessors for natively typed attribute '$!cstr'", but by all rights that thing shouldn't be natively typed (I think)

[17:15] <[Coke]> arnsholt: is there a issue opened on zavolaj?

[17:15] *** colomon left
[17:15] <[Coke]> is it the same as https://github.com/jnthn/zavolaj/issues/28 ?

[17:16] <arnsholt> Yeah, that's the one

[17:16] <[Coke]> I can take a poke after $dayjob, but don't expect much from me. :)

[17:17] <arnsholt> Any help I can get =)

[17:18] <arnsholt> Hmm. Apparently the is rw trait is dead

[17:18] <arnsholt> Wonder what happens if I just remove that...

[17:19] <arnsholt> Nope.

[17:19] *** SamuraiJack joined
[17:19] <masak> TimToady: an I-know-what-I'm-doing cast would also be useful for people who have a (non-Int-typed) array full of Ints, and want to pass it to a routine with a signature with 'Int @x'.

[17:20] <arnsholt> lizmat: Since you're the one who removed this thing, what's the spec-licenced way to mark an attribute as rw? They're ro by default, no?

[17:20] <masak> str: constant I-know-what-I'm-doing = "not really"; # :)

[17:20] <masak> std: constant I-know-what-I'm-doing = "not really"; # :)

[17:20] <camelia> std c2215f0: OUTPUT«ok 00:00 42m␤»

[17:20] <masak> the fact that I typo'd that one would be a case of... Muphry's law, I guess.

[17:22] <moritz> wait what, rw on attributes is gone?

[17:23] <moritz> I thought it was only gone on variables

[17:23] *** bluescreen10 joined
[17:23] <moritz> r: class A { has $.x is rw }; given A.new { .x = 42; say .x }

[17:23] <camelia> rakudo 9dd34f: OUTPUT«42␤»

[17:24] *** konundra joined
[17:26] <arnsholt> Ah, I misread the commit message then

[17:26] <arnsholt> lizmat: Never mind. I fail at reading

[17:28] *** colomon joined
[17:31] <TimToady> Muphry's Law++

[17:31] <moritz> https://github.com/mwilliamson/whack # anybody want to try if whack can build a relocatable parrot?

[17:32] *** cognominal left
[17:32] * TimToady strongly expects difficulties in mixing in anything read-writey to an immutable value type

[17:32] <arnsholt> moritz: You happen to know of any changes to natives/attributes lately?

[17:33] <diakopter> watching #p5p is scary

[17:33] <arnsholt> TimToady: The thought did occur to me =)

[17:33] <arnsholt> But it's been working for a long time

[17:33] <masak> diakopter: I thought that was a long-established fact. :)

[17:33] * diakopter didn't know

[17:33] <arnsholt> (Although that particular functionality is on the chopping block, as soon as I get the tuits to refactor stuff)

[17:34] <masak> diakopter: or maybe s/#p5p/all but a handful of IRC channels/

[17:34] <moritz> arnsholt: no, but I don't follow the low-level stuff closely these days :/

[17:35] <diakopter> masak: that's true.

[17:35] <moritz> .oO( There are two types of IRC channels: Scary ones, and those that nobody uses )

[17:35] <TimToady> certainly the p5p mailing list has been scary from time to time for about twenty years now...

[17:35] <TimToady> so it would not be surprising if #p5p tracked the mailing list in that regard

[17:36] <masak> the p5p mailing list was explicitly one of the cultural bits the Perl 6 rewrite set out to improve upon.

[17:36] * masak .oO( "and look, here we are", he stated humbly ) :P

[17:37] <TimToady> well, there are always scaling issues for any community, so let's not kid ourselves too much

[17:37] <TimToady> we have a good start, but that's about all it is

[17:37] <timotimo> arnsholt: i'm not blocking on the bug, no

[17:37] *** DarthGandalf left
[17:38] <nwc10> I might need a fanantical loyalty to the pope

[17:38] <TimToady> Eternal troll hugging is the price of letting people across the bridge.

[17:38] <nwc10> but tensions on the p5p list seem to be caused by

[17:38] <nwc10> 1) desire for backwards compatibility to keep working code working, versus awesome* new features

[17:38] <nwc10> * in the eye of the proposer

[17:38] <masak> TimToady: troll hugging will be the first casualty of scaling.

[17:39] *** DarthGandalf joined
[17:39] <nwc10> 2) many people who talk but don't actually contribute**

[17:39] <PerlJam> nwc10: itym ego, ego, oh, and ego

[17:39] <TimToady> masak: unless we can define it recursively somehow

[17:39] <nwc10> ** or contribute anything else

[17:39] <arnsholt> timotimo: Well, that's good at least

[17:39] <moritz> nwc10: 2) is actually common in here too

[17:39] <masak> TimToady: delegating troll hugging. yes, sure.

[17:39] <nwc10> PerlJam: no I *don't*. Once you take the egos out, those two problems remain

[17:39] <masak> TimToady: hugging leutenants! :)

[17:39] <nwc10> (1) is probably mostly solved by the ability to redefine things lexically

[17:40] <masak> TimToady: but as it grows, it'll also get cracks where non-hugging gets in and festers.

[17:40] <diakopter> nwc10: oh I didn't mean the list

[17:40] <diakopter> just the irc channel

[17:40] <PerlJam> nwc10: okay, I'll agree with that.  But you still have to get past the egos  :)

[17:40] <masak> TimToady: basically, the complex system will get parasites in the Doctorow sense. and the parasites won't want to hug.

[17:40] <TimToady> masak: another thing that helps is ways to split single rooms into multiple rooms with more focused concerns and more localized trolling

[17:40] *** FROGGS left
[17:40] <masak> aye.

[17:41] <masak> we've had surprisingly little trolling on #masakism.

[17:41] *** FROGGS joined
[17:41] <masak> someone came in and said they'd been sent there by some Python people -- that's basically it. :)

[17:41] <PerlJam> .oO( somewhere a troll is thinking .oO( challenge accepted ) )

[17:41] <TimToady> really, the only way to ever have an effective large organization is to really have an organization of small organizations

[17:42] <nwc10> the problem of (2) might be partly reduced by being (far far more) self-hosting

[17:42] <nwc10> but compilers are still complex beasts to think about, even if the implementation language is familar and powerful

[17:42] <TimToady> well, Apple solves (2) by giving you nothing to say, and nowhere to say it. :)

[17:42] <masak> TimToady: ...which works fine as long as it's not essential that the small organizations interoperate somehow.

[17:43] *** sqirrel left
[17:43] <TimToady> masak: depends greatly on whether the interaction is via messaging or via shared storage :)

[17:44] <masak> haha

[17:44] <diakopter> nwc10: I just meant the topics discussed are weighty and seem momentous

[17:44] <diakopter> not anyh other kind of scary; I've been in there less than a dayh

[17:44] <TimToady> but really, it is the same problem in disguise, multithreading vs resource contention

[17:44] <masak> TimToady: even if it's via messaging, it may lead to problems. say if the objective is building a monolithic thing, like a compiler.

[17:45] * moritz idly wonders if diakopter's "h"s are silent

[17:45] *** rindolf left
[17:45] <masak> TimToady: possible problems are responsibility shirking ("the people on the other side of the interface boundary will fix this, surely!") and the opposite, duplicated work.

[17:47] <TimToady> as always, the main problem is to distinguish the actual domain problems from the problems induced by your configuration

[17:47] <masak> TimToady: though I believe seeding is really important. cf "Matz is nice so we are nice"

[17:47] *** sqirrel joined
[17:48] <TimToady> sure, works for me :)

[17:48] <masak> seeding is probably the biggest identified action one can take in advance of the scaling problems.

[17:48] <TimToady> except when it doesn't...

[17:49] <diakopter> perl is undead so we are undead

[17:49] * masak .oO( welcome to TimToady's own little "Rakudo-on-Earth"... ) :P

[17:50] <[Coke]> masak: haven't we historically done a horrible job of managing those interface boundaries, even when we knew they were there and probably not working?

[17:50] * PerlJam wonder about the non-earth presence of rakudos

[17:50] <masak> PerlJam: all the more reason, then. :)

[17:51] <masak> [Coke]: I don't know what you're thinking of when you say that, but my thoughts immediately go to Rakudo<->Parrot.

[17:51] <masak> [Coke]: in which case, yeah, kinda. despite the best of intentions, kinda.

[17:52] <TimToady> not even Jesus was able to build a happy little utopia of smiling robots, but he did manage to seed something relatively enduring, one is forced to admit

[17:52] <[Coke]> masak: that's what I was thinking of, aye.

[17:53] <diakopter> variegating if not enduring

[17:53] <dalek> perl6-roast-data: f1145f1 | coke++ | / (5 files):

[17:53] <dalek> perl6-roast-data: today (automated commit)

[17:53] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/f1145f1ddb

[17:55] <timotimo> is there already someone who's providing RPMs of rakudo star releases for fedora?

[17:59] *** benabik left
[18:00] <diakopter> what's the p5 evalbot?

[18:00] * [Coke] has trouble understanding why someone would do that.

[18:00] <[Coke]> p5eval: print "WOT?" #?

[18:01] <diakopter> eval: ;

[18:01] <diakopter> eval ;

[18:01] *** benabik joined
[18:01] <diakopter> p5: ;

[18:01] <diakopter> perl: ;

[18:01] <timotimo> [Coke]: that == RPMs for fedora?

[18:02] *** FieldsaBB joined
[18:04] <spider-mario> I do that for arch so it’s not impossible that someone does it for fedora.

[18:08] <[Coke]> RPMs of star, specifically.

[18:18] *** zby_home_ joined
[18:21] <dalek> specs: 98267bb | larry++ | S04-control.pod:

[18:21] <dalek> specs: the 'will' form excludes CATCH and CONTROL

[18:21] <dalek> specs: review: https://github.com/perl6/specs/commit/98267bbe64

[18:22] *** FieldsaBB left
[18:23] *** FieldsaBB joined
[18:25] <TimToady> moritz: is there any way for the 'Look for new lines' button to ungrab the focus after you click it?  I like to page forward with spacebar, and if the focus stays on the button, all it does is repush the button

[18:28] <TimToady> or maybe there's some way to trap an attempt to page beyond the end and look for more without an explicit button?

[18:34] <timotimo> many websites do that automatic reloading while scrolling

[18:34] <FROGGS> you could have a checkbox, which does a auto-reload when checked

[18:42] <benabik> if ( scrolling_past_bottom() && now() - last_load > threshold ) load_more_lines()

[18:42] * TimToady realizes he's violating the maxim: "Do not look a gift horse in the mouth." :)

[18:43] <colomon> gift horses++

[18:50] * masak .oO( do not page a gift horse in the spacebar )

[18:50] <colomon> giant wooden gift horses--

[18:51] <geekosaur> they're a bit troying

[18:51] <moritz> feature requests are fine, as long as they come in the form of suggestions and demands

[18:51] <arnsholt> Beware Geeks bearing gifts?

[18:51] <moritz> and of course TimToady++ has been kind enough to do it that way

[18:52] <masak> "oh look, the enemy sent us this huge, possibly hollow gift! let's put it in the yard and go to sleep, unsuspecting."

[18:52] <moritz> masak: in restrospect, all great ideas are simple :-)

[18:53] <moritz> and most attacks work far better if you've never been warned about them

[18:53] <masak> moritz: yes, that's a possible counter.

[18:53] <masak> but it seems to me that even *before* retrospect, the Troyans were carrying the Idiot Ball.

[18:54] <moritz> is the Troyan horse actually a historically established fact? (or "just" legend/prose"

[18:54] <masak> when is it *ever* a good idea to accept gifts from your siegers?

[18:54] <moritz> )

[18:54] <masak> moritz: good question. probably the latter.

[18:54] <masak> moritz: but even works of fiction can be analyzed for idiocy.

[18:55] <masak> s/probably/almost certainly/

[18:58] <colomon> I'm not sure there's any generally accepted hard evidence for the siege of troy ever happening...

[18:59] <colomon> http://en.wikipedia.org/wiki/Trojan_War#Historical_basis

[18:59] <moritz> TimToady: the button now loses focus after the reload happened (you might need to reload with Ctrl+shift+R to actually get the updated JS)

[19:00] <colomon> moritz++

[19:01] *** FieldsaBB left
[19:03] <TimToady> \o/

[19:04] <moritz> TimToady: I don't know if that acutally allows you to forward-page with space bar though

[19:04] <moritz> I just unfocus the button -- no idea where the focus goes :-)

[19:04] <moritz> seems to work in firefox though

[19:05] <TimToady> yes, works for me, moritz++

[19:05] * moritz loves jquery for progressive enhancement thingies

[19:05] * masak .oO( did we just make TimToady more unfocused? ) :P

[19:05] <moritz> it seems to have the simplest API that could possibly work, and it works really well

[19:06] <FROGGS> moritz: works on my box (firefox too)

[19:06] <moritz> https://github.com/moritz/ilbot/commit/cda7f273edde20345d384c54970320b1e29bce12 # that's the patch :-)

[19:06] <masak> moritz: after spending over a year with JavaScript and jQuery, I feel that jQuery is what the DOM API should have been if time machines etc.

[19:07] <masak> .blur()++

[19:07] *** benabik left
[19:07] * moritz is all for progressively enhancing time machines

[19:07] <moritz> as a means to conquer technical debt :-)

[19:07] <masak> also, jQuery is decidedly JavaScript-aware in its design.

[19:07] *** benabik joined
[19:08] <masak> the DOM API just makes well-intentioned but ultimately committee-bumbling and useless motions toward a language-independent ideal of "object orientation".

[19:16] <moritz> on a mostly unrelated note, a few small js-based UI improvements to our internally (and heavily used) ticket system have received overwhelmingly positive reactions, whereas most changes receive no feedback at all

[19:17] <FROGGS> that is why I spend so much time for UIs, and for most projects I do the UI design first

[19:19] <moritz> (the other feature that some people got really excited about was initiating phone calls from the command line. We have a kind of CRM on the command line, and when you're in the context of a person, you can type 'call', and your phone intiates a connection

[19:20] *** SamuraiJack left
[19:20] <FROGGS> ohh nice

[19:20] <moritz> most of my software-hacking was pretty isolated from non-computer hardware, so it was kinda scary for me at first to have the phone ring as soon as you type something in that program)

[19:21] <FROGGS> moritz: what telephone system model do you have there?

[19:21] <masak> moritz: when I worked as a webmaster in 2003, I noticed that a web site skin change generated huge acclaim, whereas a much-needed backend long-planned refactor was met by mostly silence. devs and users have different perspectives. :)

[19:22] <FROGGS> because our telephone system is an older siemens hipath, and the pc client is winxp+office 2003 specific

[19:22] <moritz> FROGGS: Snom 370 VoIP Phones, connected to a Starface server

[19:22] <FROGGS> moritz: ahh, mkay

[19:23] <FROGGS> masak: the first-day-feedback I usually get is: "the old design was better", even when it wasn't (especially when it was not)

[19:24] <benabik> "The old design is better" usually means "I have a pile of habits to avoid the bad parts of the old design"

[19:24] <moritz> FROGGS: not in the price range you were looking for?

[19:24] <FROGGS> like we had a hover-menu on a internal website back in 2006, and when you accidentially move the mouse outside the menu, it collapsed at once

[19:24] <benabik> And people hate changing habits.

[19:24] <moritz> benabik: yes, exactly

[19:25] <FROGGS> was a bit like path finding

[19:25] <FROGGS> benabik: true

[19:25] <moritz> FROGGS: we had that too, plus a 2px wide gap. You had to move the mouse fast enough over the gap, otherwise it would collapse the menu :-)

[19:25] <moritz> at least I removed the gap.

[19:26] <FROGGS> the menu after that was a click menu, so the menu stayed visible as long as you dont click somewhere else

[19:26] <FROGGS> moritz: hehe >.<

[19:26] <dalek> rakudo-star-daily: a528ee2 | coke++ | log/ (4 files):

[19:26] <dalek> rakudo-star-daily: today (automated commit)

[19:26] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/a528ee208a

[19:28] <moritz> my most popular UI fix was to enhance a 100+ entry multi select box with select2

[19:28] <masak> moritz, FROGGS, benabik: did you see http://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown ?

[19:30] <moritz> masak: yes. I was tempted to re-implement that, or import an existing implementation :-)

[19:30] <benabik> masak: I was just searching for that.  Apple does the same thing on submenus.  ISTR a page discussing the difference between typical web, MS, and Apple's submenus.

[19:30] <FROGGS> masak: nice!

[19:31] <benabik> Maybe it wasn't MS.  But there was at least one implementation that did a simple "if you move more horizontal than vertical, leave it open".

[19:31] *** pecastro left
[19:32] *** _jaldhar joined
[19:32] <masak> mhm.

[19:33] <masak> "within the blue triangle" seems to be a better heuristic than that.

[19:33] *** mtk left
[19:33] <benabik> Especially for large submenus.

[19:33] <masak> yeah.

[19:33] *** Celelibi left
[19:34] <moritz> I've just tried it on https://rawgithub.com/kamens/jQuery-menu-aim/master/example/example.html

[19:34] <moritz> it's amazing at how intuitively it works

[19:35] <benabik> When I was looking for it, I found (basically) "hover menus considered harmful".  Should be renamed to "badly implemented hover menus are harmful"

[19:36] <masak> yeah.

[19:36] <FROGGS> when seeing this UI stuff I must always think of the current SAP client... "click on the binocular if you mean next", and if another form you have to click that little truck-icon to get the same functionality>.<

[19:36] <masak> I wonder how often that's the case, of basically blaming a feature or idea for flaws inherent in a bad implementation of it...

[19:36] <[Coke]> FROGGS: "the old design was better" == "you moved my cheese"

[19:36] <[Coke]> we get that all the time here.

[19:37] <FROGGS> [Coke]: I discipline my peeps, so it gets better and better :o)

[19:38] <masak> ooh, https://en.wikipedia.org/wiki/Who_Moved_My_Cheese%3F

[19:38] *** Celelibi joined
[19:38] <masak> Celelibi: aloha.

[19:38] *** prevost joined
[19:39] <[Coke]> masak: yes, I'm pretty sure that's the origin.

[19:39] <benabik> Hadn't heard that one before.  Love it.

[19:41] <TimToady> there's a bit of Hem and Haw in the pre-mug viewpoint that P5's supply of mindshare couldn't possibly be going down, some "surely this will last forever" thinking...

[19:41] * colomon remembers Jennifer complaining bitterly that the local Methodist preacher thought Who Moved My Cheese was an appropriate topic for a sermon.

[19:42] * lizmat is back

[19:42] <masak> "They Keep Moving The Cheese" -- this is awesome! :)

[19:42] <lizmat> arnsholt: the only "is rw" trait I removed, was from Variable, not from Attributes or Parameters or Routine

[19:43] <lizmat> ah, you saw it already  :-)

[19:44] <masak> the "Criticism" section of that article is interesting, too.

[19:44] <masak> maybe every useful management technique has an equal and opposite misuse :)

[19:44] <TimToady> yup

[19:45] <TimToady> You Can Throw Cheese As A Weapon!

[19:45] <TimToady> if you're really good, you can throw the lack of cheese as a weapon...

[19:45] <moritz> Anticheese!

[19:45] * colomon should just publish a book called "No One Moved It.  I Ate Your Cheese.  Could You Please Go Buy More?  I'm Hungry"

[19:46] <benabik> 1 page: no really, I'm starving, go to the store

[19:46] <TimToady> Learn How To Make Cheese, Duh!

[19:46] *** mtk joined
[19:46] <moritz> and a special edition for the US, "The War on Chesse Movers"

[19:46] * colomon really did finish off a block of cheese just twenty minutes ago

[19:47] <arnsholt> lizmat: Yeah, I officially have no idea what's going on =)

[19:48] <colomon> benabik++

[19:50] <masak> "Sometimes We Move Your Cheese Just To Mess With You."

[19:51] <colomon> "In Soviet Russia, The Cheese Moves You"

[19:55] <masak> 'night, #perl6

[19:56] <FROGGS> Cha' masak!

[19:56] *** zby_home_ left
[19:56] <dalek> rakudo/nom: 54c9984 | (Elizabeth Mattijsen)++ | src/core/Variable.pm:

[19:56] <dalek> rakudo/nom: Remove support for "will catch" and "will control", as per recent spec

[19:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/54c9984763

[19:56] <moritz> good UGT night, masak

[19:58] *** kaare_ left
[19:59] *** ecocode joined
[20:03] <colomon> Joking about cheese aside, I am currently lamenting Google replacing the beautifully functional Android Navigation app interface with some slick-looking thing which is an order of magnitude harder to use.

[20:06] *** sqirrel left
[20:11] <colomon> Update: and the app no longer seems to actually work; it just spins its wheels without ever returning a result.

[20:13] <FROGGS> well, I can do that too fwiw

[20:13] <colomon> me too

[20:14] <colomon> sometimes feel like I'm making a career out of that, actaully

[20:15] <colomon> huh.  now who changed that #define?

[20:16] * colomon finally got working navigation by firing it up in Google Maps.

[20:22] *** konundra left
[20:22] *** vmspb joined
[20:23] <spider-mario> they’ve also made it mandatory to have a G+ account to comment on apps in the Play Store…

[20:23] <spider-mario> it even prevents me from editting a comment I had already written before the change

[20:23] <spider-mario> :/

[20:27] <moritz> require a not-so-anonymous login is not a bad idea in general, because it reduced trolling significantly

[20:29] <geekosaur> afaict they're just unifying everything into a single Google Account

[20:29] <geekosaur> and I can see the point of that from their side

[20:32] <dalek> v5: 02c6984 | (Tobias Leich)++ | p5:

[20:32] <dalek> v5: add "use v5;", since what it is about

[20:32] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/02c6984ee6

[20:32] <dalek> v5: 37facef | (Tobias Leich)++ | / (4 files):

[20:32] <dalek> v5: try to catch up with rakudo

[20:32] <dalek> v5: 

[20:32] <dalek> v5: Applied https://github.com/rakudo/rakudo/commit/11b5dae and started to follow

[20:32] <dalek> v5: the Buf refactor. Atm we loose 255 passing tests.

[20:32] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/37facef181

[20:41] *** FieldsaBB joined
[20:43] <benabik> On the note of LLVM JIT: http://blog.llvm.org/2013/07/kaleidoscope-performance-with-mcjit.html

[20:43] *** FieldsaBB left
[20:49] *** abnorman left
[20:49] <Tene> The "name-shaped names" or "common names" or whatever they're calling it these days is... unfortunate and misguided.

[20:54] *** abnorman joined
[20:54] *** BenGoldberg left
[20:55] *** benabik left
[20:59] *** benabik joined
[21:05] *** benabik left
[21:06] *** skids left
[21:09] *** cognominal joined
[21:19] *** rom1504 left
[21:20] *** masak left
[21:20] *** rom1504 joined
[21:20] *** [Coke] joined
[21:20] *** masak joined
[21:21] <timotimo> Tene: what is the "name-shaped names" thing you're talking about?

[21:21] <timotimo> oh, google (and probably also apple)

[21:22] <Tene> timotimo: G+

[21:29] *** spider-mario left
[21:29] *** aindilis left
[21:30] *** bruges joined
[21:41] *** Pleiades` left
[21:42] *** PacoAir left
[21:43] <dalek> v5: 782c00b | (Tobias Leich)++ | / (2 files):

[21:43] <dalek> v5: fix unpack signatures (utf8 => Blob)

[21:43] <dalek> v5: 

[21:43] <dalek> v5: We are still 47 tests behind.

[21:43] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/782c00baf4

[21:44] <dalek> rakudo/nom: 708051d | (Elizabeth Mattijsen)++ | src/ (2 files):

[21:44] <dalek> rakudo/nom: We don't need to expose $*W in Perl6 space, it is already exposed!

[21:44] <dalek> rakudo/nom: 

[21:44] <dalek> rakudo/nom: Now, it would be great if we could do this with $/ as well.  It would allow

[21:44] <dalek> rakudo/nom: easy improvement of all compile time errors found in Perl6 space.

[21:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/708051d049

[21:45] <lizmat> .tell moritz 50% of the $*W & $/ problem solved

[21:45] <yoleaux> lizmat: I'll pass your message to moritz.

[21:45] <preflex>  yoleaux: you have 1 new message. '/msg preflex messages' to read it.

[21:45] <[Coke]> who owns preflex?

[21:46] *** prevost left
[21:48] *** Pleiades` joined
[21:49] <lizmat> gnight #perl6!

[21:49] *** dmol left
[21:49] <FROGGS> gnight lizmat 

[21:58] *** FROGGS left
[22:01] *** FROGGS joined
[22:01] <Tene> preflex: preflex

[22:02] <Tene> preflex: owner

[22:06] <timotimo> i couldn't compile nqp.jvm because i had an openjdk 1.7 and jre 1.8

[22:06] <timotimo> er, other way around

[22:06] *** rafl left
[22:06] *** rafl joined
[22:09] <diakopter> timotimo: heh.

[22:10] <timotimo> also, the output of -showversion is incompatible with the ConfigureJVM.pl script. i'll upload a patch soon

[22:21] *** bluescreen10 left
[22:21] *** ecocode left
[22:23] *** FROGGS left
[22:30] *** benabik joined
[22:32] *** abnorman left
[22:32] *** abnorman joined
[22:32] *** skids joined
[22:36] *** FROGGS joined
[22:37] *** colomon left
[22:38] *** FROGGS left
[22:42] *** pupoque_ left
[22:46] *** colomon joined
[22:48] *** zwut00 joined
[22:53] *** zwut00 left
[22:55] *** gfldex left
[22:59] *** pmurias left
[23:11] *** mstwu00 joined
[23:16] *** btyler left
[23:19] *** btyler joined
[23:31] *** BenGoldberg joined
[23:36] *** BenGoldberg left
[23:43] *** fridim_ joined
[23:48] *** mstwu00 left
[23:58] *** Tene joined
[23:58] *** djanatyn joined
