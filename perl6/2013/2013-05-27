[00:01] *** berekuk joined
[00:06] *** berekuk left
[00:08] *** chrisdev left
[00:18] *** Chillance left
[00:21] *** btyler left
[00:37] *** census left
[00:40] *** japhb_ left
[00:55] *** snearch left
[00:57] *** tgt left
[00:58] <pmichaud> FROGGS, jnthn:  I agree with jnthn++ .  The handling of dynamically quantified expressions has always been meant to be handled outside of the standard quantifier node type.

[00:59] <pmichaud> especially since the thing that follows ** is to be a closure.

[01:01] <pmichaud> if it's possible to cleanly make the range dynamic via the existing rxtype node, I'll be okay with that, but more likely it wants a specialized node type.

[01:02] <pmichaud> the other reason for making it a specialized node type is to more cleanly distinguish declarative versus procedural quantifiers.

[01:05] <pmichaud> the other other reason for making it a specialized node type is so that one can smart-match the number of repetitions against the value returned from the closure.  Although p6 only allows Int and Range to be returned from a closure now, at one time it was allowed to be lists, and we might want that capability again someday  (e.g.,   \d ** { @primes } )

[01:06] *** lizmat left
[01:07] *** woolfy left
[01:10] *** anuby joined
[01:13] *** chrisdev joined
[01:15] *** pochi joined
[01:21] *** chrisdev_ joined
[01:24] *** chrisdev left
[01:29] *** chrisdev_ left
[01:30] *** ajr_ left
[01:37] *** silug joined
[01:37] *** kingbeast joined
[01:40] *** FROGGS_ joined
[01:42] *** btyler joined
[01:44] *** FROGGS left
[01:45] <timotimo> is there a way to figure out if there's a character ready for reading in $*IN without blocking?

[01:47] <dalek> perl6-roast-data: 62cd9c7 | coke++ | / (4 files):

[01:47] <dalek> perl6-roast-data: today (automated commit)

[01:47] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/62cd9c767e

[01:47] <sorear> not reliably

[01:47] <timotimo> okay, how about "sort-of-kind-of"? how would i do that? in rakudo?

[01:47] <sorear> select and FIONREAD provide advisory notification of data, but you're supposed to set file descriptors to nonblocking in case of false alarm

[01:48] <timotimo> can i even do that to $*IN etcetc?

[01:52] <dalek> rakudo-star-daily: a665867 | coke++ | log/ (5 files):

[01:52] <dalek> rakudo-star-daily: today (automated commit)

[01:52] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/a6658678f9

[01:53] *** lustlife joined
[01:56] * [Coke] wonders if there is any need for ^^ with colomon's new thing.

[01:59] *** hypolin left
[02:01] *** btyler left
[02:01] *** hypolin joined
[02:16] <[Coke]> the rakudo failures on feather in S02-bool.t are a result of the iospec merge.

[02:16] <[Coke]> er, S02-types/bool.t

[02:17] <labster> Yeah, we know.

[02:18] <[Coke]> ... ok. if someone already did a bisect, putting that on the ticket would have saved me several hours.

[02:18] <labster> But what FROGGS and I are trying to figure out is why these two lines in canonpath cause the failure: https://gist.github.com/FROGGS/0d1a9f4967a2c4d49606

[02:19] <dalek> perl6-bench: 8dad53a | (Geoffrey Broadwell)++ | bench:

[02:19] <dalek> perl6-bench: Several miscellaneous bugfixes in bench

[02:19] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/8dad53a82e

[02:20] <[Coke]> thanks for trying to track it down.

[02:20] <[Coke]> https://rt.perl.org/rt3/Ticket/Display.html?id=117957 if you figure it out.

[02:22] <labster> Sorry, I fell asleep last night while we were talking about it.

[02:29] <[Coke]> heh. I fell asleep in the middle of my bisect and just got back from a trip across 3 states to finish it up. ;)

[02:34] *** kingbeast left
[02:36] *** s1n left
[02:40] <pmichaud> which two lines in canonpath ?

[02:42] <labster> They're two regex substitutions, triggered when $*TMPDIR is created.  They're the two lines he's commented out in the gist above, 9 and 12

[02:44] <pmichaud> I'm not sure those lines are the actual cause of the failure.

[02:44] <pmichaud> maybe I should read prior backlog on the topic, though.

[02:45] <labster> You should ask FROGGS, as he was the one doing the bisect.

[02:45] * labster still doesn't have a feather account.

[02:46] * pmichaud reads backlog

[02:46] <labster> start here: http://irclog.perlgeek.de/perl6/2013-05-26#i_7116874

[02:48] <pmichaud> this bug feels like a GC or pointer problem of some sort, and commenting out those lines changes things just enough to cause the bug to appear somewhere else.

[02:49] <pmichaud> (or disappear)

[02:49] <pmichaud> i.e., a heisenbug

[02:49] *** btyler joined
[02:52] <pmichaud> however, just looking at the code....

[02:52] <pmichaud>         $path ~~ s:g { '/'+ }              = '/';     # xx////xx  -> xx/xx

[02:52] <pmichaud> seems horribly inefficient.

[02:58] <timotimo> i made an amazing console program that will, given a time in minutes, fill up one line of the terminal using eigths of blocks from the unicode "block elements" chart

[03:02] *** xinming left
[03:04] *** xinming joined
[03:14] <timotimo> apparently i can only get the terminal width via %*ENV on gnome-terminal, which b0rks if i have only one line :(

[03:17] *** s1n joined
[03:29] *** fgomez joined
[03:33] <labster> oh, that is inefficient.  It's a port of File::Spec, so blame perl 5 :o)

[03:36] <labster> maybe the problem will disappear on the JVM ... and I just use System.getProperty("io.tmpdir") instead

[03:37] <labster> timotimo: just put a 1; at the end of your modules

[03:37] <timotimo> labster: huh?

[03:38] <dalek> rakudo/nom: 25a0b3f | pmichaud++ | src/core/IO/Spec/Unix.pm:

[03:38] <dalek> rakudo/nom: Make IO::Spec::Unix.canonpath more efficient.

[03:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/25a0b3f3d9

[03:38] <labster> it sounds like a oneliner program is not working, so add a "1;" on it like perl 5 modules (as a joke)?

[03:39] <timotimo> oh, that's funny

[03:39] <timotimo> sorry, i don't know any perl5

[03:40] <labster> Yeah, that was a misfeature of Perl 5, where a module had to return true to load correctly, so everyone puts a 1; at the bottom of the file.

[03:51] *** adu left
[03:52] *** adu joined
[03:52] *** preflex left
[03:52] *** preflex_ joined
[03:53] *** preflex_ is now known as preflex

[04:05] *** xinming left
[04:05] *** kurahaupo joined
[04:06] <timotimo> whoa. that was a BAD idea.

[04:07] <timotimo> r: for 1, 2, 3, 4 { when * > 3 { say "a" }; when * <= 3 { say "b" }; KEEP { say "oh my" } }

[04:07] <camelia> rakudo 0e206e: OUTPUT«b␤oh my␤b␤oh my␤b␤oh my␤a␤oh my␤»

[04:07] <timotimo> on my machine similar code caused a major meltdown

[04:07] <timotimo> r: for 1, 2, 3, 4 -> $_ { when * > 3 { say "a" }; when * <= 3 { say "b" }; KEEP { say "oh my" } }

[04:07] <camelia> rakudo 0e206e: OUTPUT«b␤oh my␤b␤oh my␤b␤oh my␤a␤oh my␤»

[04:07] *** xinming joined
[04:07] <timotimo> r: for 1, 2, 3, 4 -> $_ { when * > 3 { say "a" }; default { say "b" }; KEEP { say "oh my" } }

[04:07] <camelia> rakudo 0e206e: OUTPUT«b␤oh my␤b␤oh my␤b␤oh my␤a␤oh my␤»

[04:07] <timotimo> huh.

[04:12] <pmichaud> ...feather only has 1.2GB memory?

[04:12] <pmichaud> or am I reading top(1) and free(1) incorrectly?

[04:13] *** adu left
[04:15] <pmichaud> and something is causing p6eval to churn on feather right now.

[04:15] <pmichaud> (maybe it always does that, but it's currently eating up a lot of CPU)

[04:17] *** woosley joined
[04:21] *** cognominal__ left
[04:25] *** Psyche^ joined
[04:26] <timotimo> what do i have to write into my Foo module so that anyone who has use Foo will get the same result is if they also said "use Term::ANSIColor"?

[04:27] *** crab2313 left
[04:28] *** Patterner left
[04:28] *** Psyche^ is now known as Patterner

[04:35] *** cognominal joined
[04:38] <[Coke]> fwiw, pmichaud's last commit doesn't fix RT #117957 (not that it was meant to)

[04:41] *** dmol joined
[04:41] <[Coke]> once a branch is removed from rakudo/rakudo, can we get it back?

[04:41] <diakopter> if someone still has it locally I suppose it could be re-pushed

[04:42] <[Coke]> git-- svn++

[04:42] <timotimo> [Coke]: hg can do it, too, because branches are versioned along with the code (which i find SUPER weird)

[04:43] *** btyler left
[04:54] <colomon> [Coke]: I'm not testing anything to do with roast, just testing how the modules work.

[04:55] <colomon> [Coke]: might be able to extend it to roast, I dunno.  Same sort of idea, but not identical.

[05:10] <pmichaud> timotimo: I suspect it's NYI in Rakudo, but S11 says that   "use Term::ANSIColor :EXPORT;"  will both import Term::ANSIColor and export its symbols

[05:10] <pmichaud> http://perlcabal.org/syn/S11.html#Compile-time_Importation

[05:11] <timotimo> cool, thanks

[05:11] <timotimo> yeah, Error while importing from 'Term::ANSIColor': no such tag 'EXPORT'

[05:12] <pmichaud> feel free to file a ticket :)

[05:12] <timotimo> enh, it's not that important really

[05:12] <pmichaud> or write a test case for it :)

[05:12] <pmichaud> or both :)

[05:12] <pmichaud> time for bed here; bbl

[05:13] <timotimo> i'm staying up to give my sleep-arythm a kick in the bum

[05:13] <moritz> \o

[05:20] <timotimo> how would people like Term::Xterm256Color?

[05:33] *** FROGGS_ left
[05:45] *** FROGGS_ joined
[05:47] *** SamuraiJack_ joined
[05:48] <timotimo> hm, nowadays, can i match individual thingies from the % operator?

[05:48] <timotimo> r: say "foo,bar.baz!" ~~ /(...) % (.)/;

[05:48] <camelia> rakudo 25a0b3: OUTPUT«===SORRY!===␤Unrecognized regex metacharacter % (must be quoted to match literally)␤at /tmp/vHXk9rDWvz:1␤------> say "foo,bar.baz!" ~~ /(...) ⏏% (.)/;␤Unable to parse regex; couldn't find final '/'␤at /tmp/vHXk9rDWvz:1␤------> …

[05:48] <timotimo> r: say "foo,bar.baz!" ~~ /(...)+ % (.)/;

[05:48] <camelia> rakudo 25a0b3: OUTPUT«｢foo,bar.baz｣␤ 0 => ｢foo｣␤ 1 => ｢,｣␤ 0 => ｢bar｣␤ 1 => ｢.｣␤ 0 => ｢baz｣␤␤»

[05:48] <timotimo> ooooh, that's excellent! :)

[05:48] <timotimo> hm, now i realise i don't even need that >_<

[05:50] <FROGGS_> *g*

[06:00] <timotimo> i may just be too tired, but i'm failing to make a simple bracket and comma coloring thingie with grammars

[06:01] *** SamuraiJack_ left
[06:15] *** domidumont joined
[06:19] *** domidumont left
[06:19] *** domidumont joined
[06:21] *** odoacre left
[06:23] *** odoacre joined
[06:26] *** dmol left
[06:29] <dalek> perl6-bench: a3e6fb9 | (Geoffrey Broadwell)++ | analyze:

[06:29] <dalek> perl6-bench: html_plot improvements: fix title; improve plot highlight contents to include series name and improve readability a bit

[06:29] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/a3e6fb966e

[06:31] *** mrlo left
[06:32] *** kaleem joined
[06:39] *** SamuraiJack_ joined
[06:40] *** mrlo joined
[06:42] *** SamuraiJack_ left
[06:44] *** SamuraiJack_ joined
[06:55] *** yoleaux left
[07:00] *** dpk left
[07:10] *** dpk joined
[07:10] *** daxim joined
[07:13] *** domidumont left
[07:15] *** yoleaux joined
[07:21] *** jerome__ left
[07:27] *** denisboyun_ joined
[07:34] *** imIKARi joined
[07:36] *** jerome__ joined
[07:37] *** sqirrel joined
[07:45] <tadzik> good morning #perl6

[07:47] *** kurahaupo left
[07:48] *** cognominal left
[07:49] *** cognominal joined
[08:03] <timotimo> ===SORRY!===

[08:03] <timotimo> Null PMC access in find_method('Stringy')

[08:03] <timotimo> i'm good at this! :)

[08:11] <labster> good work timo

[08:12] <timotimo> i think it came from creating a character class from braces, brackets and all other types of parenthesizing characters

[08:12] <timotimo> is there a cleverer way to .comb alternating chunks of many non-brace-characters and single brace characters?

[08:13] <timotimo> than to do <-[,(<[{}]>)]>*||<[,(<[{}]>)]> ?

[08:17] <timotimo> nope, actually it's this

[08:18] <timotimo> constant @twofiddy is export := "\e[38;5;{$_}m" for ^256;

[08:18] <timotimo> (missing some paranthesis)

[08:18] <moritz> use = not :=

[08:19] <moritz> and maybe precedence is wrong

[08:19] <moritz> is export = ("\e[38;5;{$_}m" for ^256).eager;

[08:20] *** rindolf joined
[08:22] <timotimo> but do i want to do it eagerly?

[08:22] <timotimo> i'm likely to only access the first 5

[08:24] <moritz> maybe not eager

[08:24] <moritz> but you'll still need the parens

[08:28] *** leontopod joined
[08:28] <leontopod> is Perl 6 1.0 out yet?

[08:29] <tadzik> we have 2013.05 out

[08:29] <itz__> leontopod: at Christmas

[08:30] <FROGGS_> leontopod: the specification has no '1.0' yet so there is not implementation with the version '1.0'

[08:33] *** fhelmberger joined
[08:34] *** fhelmberger left
[08:35] *** fhelmberger joined
[08:38] *** domidumont joined
[08:40] * moritz wonders if people also constantly ask if java 9 1.0 is out

[08:41] <leontopod> I'm just trolling =)

[08:41] <leontopod> how is everyone?

[08:41] *** leontopod is now known as Teratogen

[08:42] <tadzik> heh

[08:42] *** ChanServ sets mode: +o moritz

[08:42] *** moritz sets mode: +b *!*leontopod@intertwingled.net

[08:42] *** Teratogen was kicked by moritz (Teratogen))
[08:42] *** moritz sets mode: -o moritz

[08:43] <moritz> I'm just trolling =)

[08:43] <tadzik> I think I've seen him before, maybe he really was just kidding?

[08:43] *** japhb_ joined
[08:43] <moritz> yes, I've seen him before, and it was never funny before, and never productive

[08:44] <arnsholt> Yeah, Teratogen is a name I've seen before I think

[08:45] *** daggeur joined
[08:46] <sorear> but which logs?

[08:46] <sorear> .privacy

[08:46] <yoleaux> sorear: This channel is public. When I am asked when I last saw you, I may repeat things you say and what time it was when you said them.

[08:46] <sorear> .help

[08:46] <yoleaux> sorear: I'm yoleaux. Type .commands to see what I can do, or see http://dpk.io/yoleaux for a quick guide.

[08:47] <moritz> sorear: I know that irclog.perlgeek.de and collabti respect [off] lines; I know it's not 100% private

[08:47] <arnsholt> sorear: The ones linked in the /topic, obviously

[08:47] <sorear> I thought yoleaux logged as well as keeping .seen

[08:48] <tadzik> you only log once

[08:48] <moritz> sorear: but probably not everything, just last line + timestamp per nick

[08:48] <sorear> .private-prefix [off]

[08:48] <yoleaux> sorear: Sorry, this command is admin-only.

[08:49] <moritz> .private-prefix

[08:49] <yoleaux> moritz: Sorry, this command is admin-only.

[08:55] *** Bucciarati_ is now known as Bucciarati

[08:55] *** ChanServ sets mode: +o moritz

[08:55] *** moritz sets mode: -b *!*leontopod@intertwingled.net

[08:57] *** SamuraiJack_ left
[08:57] *** SamuraiJack joined
[09:04] *** moritz sets mode: -o moritz

[09:09] <timotimo> oh damn. i can no longer use the debugger, because the first thing it does is generate all 256 xterm-256colors before it does anything else

[09:13] *** kurahaupo joined
[09:21] *** kurahaupo left
[09:24] <bbkr> good morning

[09:33] *** Teratogen joined
[09:35] *** rindolf left
[09:37] <moritz> Teratogen: you are correct.

[09:37] <moritz> Teratogen: just look through http://irclog.perlgeek.de/search.pl?channel=perl6&nick=Teratogen&q= and ask yourself how much you actually contribute to on-topic, useful discussions

[09:37] <moritz> and how much is only trolling and noise

[09:38] <moritz> we're not averse to a bit fun now and then, but if you only contribute noise, we will ban you permantently

[09:38] <moritz> or more precisely, I will ban you permanently.

[09:45] *** kurahaupo joined
[09:49] *** berekuk joined
[09:51] *** berekuk left
[09:52] *** berekuk joined
[09:53] <itz__> r: say slurp.WHO

[09:53] <camelia> rakudo 25a0b3: OUTPUT«().hash␤»

[09:53] *** fgomez left
[09:57] *** imIKARi left
[10:10] <timotimo> moritz: can you tell why constant @twofiddy is export := ("\e[38;5;{$_}m" for ^256); is eagerly evaluated at startup time?

[10:11] <moritz> timotimo: is it? how can you tell?

[10:12] *** berekuk left
[10:12] <timotimo> it may be wrong; just what rakudo-debugger shows

[10:12] <moritz> well, maybe rakudo-debugger tries to show the list

[10:12] <moritz> and thus triggers eager evaluation

[10:12] <moritz> r: constant @twofiddy is export :=(say "\e[38;5;{$_}m" for ^256); say 42

[10:12] <camelia> rakudo 25a0b3: OUTPUT«[38;5;0m␤[38;5;1m␤[38;5;2m␤[38;5;3m␤[38;5;4m␤[38;5;5m␤[38;5;6m␤[38;5;7m␤[38;5;8m␤[38;5;9m␤[38;5;10m␤[38;5;11m␤[38;5;12m␤[38;5;13m␤[38;5;14m␤[38;5;15m␤[38;5;16m␤[38;5;17m␤[38;5;18m␤[38;5;19m␤[38;5;20m␤[38;5;21m␤[38;5;22m␤[38;5;23m␤[38;5;24m␤…

[10:12] <moritz> :-)

[10:13] <moritz> ok, it's not just the debugger

[10:16] *** tgt joined
[10:16] <masak> oh hai, #perl6

[10:17] *** sciurius joined
[10:18] <tadzik> hai masak

[10:23] * masak is teaching JavaScript! o/

[10:23] <tadzik> :)

[10:24] <nwc10> does JavaScript want to be taught?

[10:24] <masak> oh, very much.

[10:24] <masak> it's one of our most taught courses. :)

[10:24] * masak realizes too late that nwc10 was probably aiming for a misunderstanding of some kind

[10:25] <nwc10> yes.

[10:26] *** berekuk joined
[10:26] <Teratogen> javascript is a pretty good language

[10:26] <Teratogen> java, on the other hand, is horrible.

[10:28] *** anuby left
[10:28] *** Timbus left
[10:29] <Teratogen> those two must be java lovers

[10:31] *** Timbus joined
[10:33] <FROGGS_> $ perl6 -e 'use v5; sub test($) { scalar @_ }; say test "a", "b"'  # gives: 1b

[10:33] <FROGGS_> $ perl6 -e 'use v5; sub test($$) { scalar @_ }; say test "a", "b"' # gives: 2

[10:33] <FROGGS_> \o/

[10:33] <tadzik> 1b?

[10:33] <tadzik> oh!

[10:34] <FROGGS_> :o)

[10:34] <tadzik> awesome, FROGGS_!

[10:34] <FROGGS_> it just can do $ and @ though, and I need to stash that prototype somewhere...

[10:35] <FROGGS_> and I believe it wont work if the sub is declared after the sub-call is parsed :/

[10:35] <tadzik> Isn't that the same as in Perl 5?

[10:36] <tadzik> iirc in p5 you can't omit () in subcall if the sub is not declared yet

[10:36] <FROGGS_> perl 5 says that the prototype must be known at compile time

[10:36] <tadzik> ah

[10:36] <FROGGS_> so I guess it will work if you declare that sub right after its call within the file

[10:38] <FROGGS_> $ perl -E 'use v5; say test "a", "b"; sub test { scalar @_ };' # nothing

[10:38] <FROGGS_> $ perl -E 'use v5; sub test { scalar @_ }; say test "a", "b"'  # 2

[10:38] <FROGGS_> huh

[10:38] <FROGGS_> cool

[10:38] <tadzik> hm

[10:39] <tadzik> the first says nothing?

[10:39] <FROGGS_> yepp

[10:39] <tadzik> oh

[10:39] <tadzik> I see

[10:39] <FROGGS_> same with a $$ prototype

[10:39] <tadzik> I'd be surprised :)

[10:39] *** konnjuta joined
[10:39] <FROGGS_> so I don't have to worry about that

[10:40] <tadzik> indeed

[10:40] <FROGGS_> but it can't be the other way, since the knowledge of the prototype changes the parsing

[10:41] <FROGGS_> and even p5 doesnt parse again when it hits a prototype to a previously used sub

[10:42] <konnjuta> hi guys I posted a question on perlmonks regarding a perl 6 implemtation of a perl 5 code snippet: any help would be appreciated! http://www.perlmonks.org/?node_id=1035374

[10:42] <FROGGS_> but now, where do I stash the signature? in $*W in class Longname?

[10:47] *** SamuraiJack left
[11:07] <masak> Teratogen: hi. long time no see.

[11:08] <Teratogen> masak! =)

[11:13] *** aborazmeh joined
[11:15] <moritz> http://www.perlmonks.org/?node_id=1035374

[11:16] <masak> ooh, nice.

[11:16] <masak> moritz: did you also consider showing off pipes? ;)

[11:16] <masak> I think Perl 5 programmers might enjoy that...

[11:17] <moritz> masak: I considered it, but then forgot about it

[11:21] <masak> moritz: I have pipes on my mind right now :P

[11:21] <masak> (PLPW participants will know why)

[11:22] <timotimo> oh, so you can override the Lines class lexically and the lines method will use that class?

[11:22] <bbkr> "~.words.reverse" without brackets looks so automagical :)

[11:23] *** snearch joined
[11:24] <tadzik> heh, it's raining in Warsaw again :)

[11:24] <Teratogen> will most perl 5 code run without modification under perl 6?

[11:26] <moritz> masak: I've added a version with feesd

[11:26] <moritz> *feeds

[11:29] <FROGGS_> Teratogen: basically "no", even when I am working on a perl5 slang for rakudo

[11:30] <FROGGS_> Teratogen: but there is a "maybe" at the horizon

[11:31] *** SamuraiJack joined
[11:32] *** imIKARi joined
[11:34] *** denisboyun_ left
[11:36] <masak> moritz++

[11:36] <nwc10> OK, why is IO::Spec::Unix a port of File::Spec::Unix from before Nov 2006?

[11:37] <FROGGS_> nwc10: how do you come to that conclusion?

[11:38] <nwc10> http://perl5.git.perl.org/perl.git/blobdiff/d6a9eb89513c8810816fb51d1ad3f1e7f7ad29ff..e9475de8c2ea6600ed3517594b1793ffd3a89f27:/lib/File/Spec/Unix.pm

[11:38] <nwc10> That commit changed //+ to /{2,}

[11:38] <nwc10> er, /+

[11:38] <nwc10> so the thing that pmichaud committed last night mirrors a fix made to File::Spec::Unix in Nov 2006

[11:40] <FROGGS_> nwc10: that was the initial commit for that piece of code: https://github.com/FROGGS/p6-File-Spec/commit/8606562c1bab5ec929c19f46e7c32da65b447a90

[11:41] <FROGGS_> and I guess that is just my handwriting and not an old copy one F::S::U

[11:43] *** estrabd joined
[11:44] *** phil_ joined
[11:56] *** SamuraiJack_ joined
[11:57] *** SamuraiJack left
[11:57] <timotimo> r: my %f = '()<>[]{}'.comb; say "()" ~~ /@(%f.keys,%f.values)**2/

[11:57] <camelia> rakudo 25a0b3: OUTPUT«｢()｣␤␤»

[11:58] <timotimo> how can i match "anything that's not in that list"?

[11:58] <bbkr> tadzik: thanks for help with Curl on hackatons. I found later that CURLOPT_WRITEFUNCTION callback is not meant to be used for capturing data directly but rather to pass-through data between pointers. It needs also CURLOPT_WRITEDATA which is actual output buffer and lack of this one might have caused freeing issues. The simplest C flow is here: http://stackoverflow.com/questions/2376824/libcurl-http-request-to-save-respond-into-variable-c

[11:59] <bbkr> I'll try to hack it today

[12:00] <FROGGS_> timotimo: using a cclass like <-[ ... ]> ?

[12:00] <konnjuta> moritz: thanks for the reply to http://www.perlmonks.org/?node_id=1035374

[12:00] *** konnjuta left
[12:00] <timotimo> i'd like to try that. can i just interpolate inside that?

[12:01] <timotimo> <-[ @(%f.keys, %f.values) ]>?

[12:01] <FROGGS_> I think so, yes

[12:02] <timotimo> something's gone horribly wrong :)

[12:02] <FROGGS_> r: my @a = "c"; say "abc" ~~ /<-[@a]>+/

[12:02] <tadzik> oh, d'oh. Will take alook soonish, thanks

[12:02] <camelia> rakudo 25a0b3: OUTPUT«｢bc｣␤␤»

[12:02] <FROGGS_> hmmm

[12:02] <timotimo> oops :)

[12:02] <FROGGS_> r: my @a = "c"; say "abc" ~~ /<-[@(@a)]>+/

[12:02] <camelia> rakudo 25a0b3: OUTPUT«｢bc｣␤␤»

[12:03] <FROGGS_> r: my @a = "c"; say "abc" ~~ /<{@a}>+/

[12:03] <camelia> rakudo 25a0b3: OUTPUT«｢c｣␤␤»

[12:03] <FROGGS_> r: my @a = "c"; say "abc" ~~ /<-{@a}>+/ # just NYI ?

[12:03] <camelia> rakudo 25a0b3: OUTPUT«===SORRY!===␤Unrecognized regex metacharacter < (must be quoted to match literally)␤at /tmp/ZIlKhoCqMv:1␤------> my @a = "c"; say "abc" ~~ /<-⏏{@a}>+/ # just NYI ?␤Unrecognized regex metacharacter - (must be quoted to match lite…

[12:03] <timotimo> ask std?

[12:03] <FROGGS_> std: my @a = "c"; say "abc" ~~ /<-{@a}>+/ # just NYI ?

[12:03] <camelia> std 0336087: OUTPUT«===SORRY!===␤Unrecognized regex metacharacter < (must be quoted to match literally) at /tmp/MOR1NwSnkK line 1:␤------> my @a = "c"; say "abc" ~~ /<⏏-{@a}>+/ # just NYI ?␤Can't call method "from" on unblessed reference at STD.pm li…

[12:04] <FROGGS_> ó.ò

[12:04] <masak> this is a regular reminder to sign up for the next #masakism, June 19: https://github.com/perl6/mu/wiki/perl6-workshop-june-2013

[12:04] <masak> I guess as the date approaches, we'll advertise a bit more through blogs and reddit, like last time.

[12:04] <masak> until then, be one of the exclusive first members to sign up! :D

[12:05] <FROGGS_> :o)

[12:09] *** kurahaupo left
[12:13] <Teratogen> masak, is it in Tempe, Arizona?

[12:13] <Teratogen> =D

[12:19] <tadzik> yes, it is

[12:21] <tadzik> it's on the irc, so it's going to be everywhere

[12:23] <timotimo> only where people are, i'm afraid :(

[12:23] <timotimo> (and sentient bots, but i call those 'people', too, because they deserve respect, too.)

[12:24] <moritz> you mean you discriminate against non-sentient bots? sentientist!

[12:25] <timotimo> they don't feel it like sentiens do

[12:25] <Teratogen> I have a megahal bot I could bring in here =)

[12:27] *** ajr joined
[12:27] *** ajr is now known as Guest78264

[12:30] *** Guest78264 is now known as ajr_

[12:30] *** telex left
[12:32] *** telex joined
[12:33] <grondilu> rn: say <foo bar>.all.substr(0, 1)

[12:33] <camelia> niecza v24-51-g009f999: OUTPUT«all("f", "b")␤»

[12:33] <camelia> ..rakudo 25a0b3: OUTPUT«all(f, b)␤»

[12:33] <masak> Teratogen: better not. ;)

[12:33] <Teratogen> yeah, I would get permabanned =(

[12:33] <grondilu> rn: say <foo bar>.all.substr(0, 1) == one(*=

[12:33] <camelia> rakudo 25a0b3: OUTPUT«===SORRY!===␤Unable to parse expression in argument list; couldn't find final ')'␤at /tmp/XOHTmmn4tK:1␤------> say <foo bar>.all.substr(0, 1) == one(*=⏏<EOL>␤    expecting any of:␤        postfix␤        infix stopper␤        in…

[12:33] <camelia> ..niecza v24-51-g009f999: OUTPUT«===SORRY!===␤␤Bogus term at /tmp/Io2ELNiYEo line 1 (EOF):␤------> say <foo bar>.all.substr(0, 1) == one(*=⏏<EOL>␤␤Parse failed␤␤»

[12:34] <grondilu> rn: say <foo bar>.all.substr(0, 1) == one(*)

[12:34] <camelia> niecza v24-51-g009f999: OUTPUT«Unhandled exception: Cannot parse number: f␤  at /home/p6eval/niecza/lib/CORE.setting line 1502 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3652 (ANON @ 10) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3654 (NumSyntax.str2num @ 5) ␤  at /h…

[12:34] <camelia> ..rakudo 25a0b3: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \v: Mu *%_)␤  in method Numeric at src/gen/CORE.setting:865␤  in sub infix:<==> at src/gen/CORE.setting:3031␤  in sub infix:<==> at src/gen/CORE.setting:3029␤  in sub thread_junction at src/gen/CORE.sett…

[12:34] <grondilu> rn: say <foo bar>.all.substr(0, 1) eq one(*)

[12:34] <camelia> niecza v24-51-g009f999: OUTPUT«all(one(Bool::False, ), one(Bool::False, ))␤»

[12:34] <camelia> ..rakudo 25a0b3: OUTPUT«all(one(False), one(False))␤»

[12:34] <masak> Teratogen: no, but we would have a grown-up talk with you, in all likelihood.

[12:34] <masak> looks interesting: http://nikic.github.io/2012/06/15/The-true-power-of-regular-expressions.html

[12:34] <Teratogen> I have a dutch-hating bot

[12:34] <Teratogen> =)

[12:34] <masak> Teratogen: ok, *then* I would permaban you. :)

[12:35] <masak> Teratogen: in here, we are very thankful for our Dutch. :D

[12:35] * masak .oO( both the Dutch and the Duchesses )

[12:38] *** bbkr left
[12:42] *** SmokeMachine joined
[12:46] *** dayangkun joined
[12:47] *** markstacey is now known as gudahtt

[12:47] <grondilu> rn: say so <foo bar>.all.substr(0, 1) eq one(*)

[12:47] <camelia> rakudo 25a0b3, niecza v24-51-g009f999: OUTPUT«False␤»

[12:47] <grondilu> rn: say so <foo far>.all.substr(0, 1) eq one(*)

[12:47] <camelia> rakudo 25a0b3, niecza v24-51-g009f999: OUTPUT«False␤»

[12:48] * grondilu was trying a junctive way to write: "all strings start with the same character"

[12:49] <timotimo> no, that won't do

[12:49] <timotimo> try it with a bag

[12:49] <timotimo> <foo bar>>>.substr(0, 1).bag.elems

[12:49] <timotimo> r: <foo bar>>>.substr(0, 1).bag.elems.say

[12:49] <grondilu> oh yeah, bags.  I always forget about them.

[12:49] <camelia> rakudo 25a0b3: OUTPUT«2␤»

[12:49] *** PacoAir joined
[12:49] <timotimo> do i gets a cookie? :D

[12:50] <grondilu> timotimo++

[12:51] <grondilu> though I could have used .uniq as well.  But I thought a junctive way would be cool

[12:51] <timotimo> junctions are uber slow, though ;)

[12:51] <timotimo> also, the >>.substr is kind of like .all.substr i think

[12:52] <grondilu> I don't think so.  .substr autothreads

[12:52] <grondilu> rn: say <foo bar>.all.substr(1).WHAT

[12:52] <camelia> rakudo 25a0b3, niecza v24-51-g009f999: OUTPUT«(Junction)␤»

[12:53] <timotimo> kind of like, meaning it serves a sufficiently similar function

[12:53] <grondilu> ah ok

[12:53] <FROGGS_> rn: say [eq] <foo bar>>>.substr(0,1)

[12:53] <camelia> rakudo 25a0b3, niecza v24-51-g009f999: OUTPUT«False␤»

[12:54] <timotimo> not bad either

[12:54] <grondilu> yes I ended up using [eq].  But really I was curious if a junctive form could be used

[12:54] <timotimo> that could short-circuit even

[12:55] <grondilu> rn: say so <foo far>».substr(0, 1) eq one(*)

[12:55] <camelia> rakudo 25a0b3, niecza v24-51-g009f999: OUTPUT«False␤»

[12:55] <timotimo> perl6 is not prolog

[12:55] <grondilu> rn: say so <foo far>».substr(0, 1) eq all(*)

[12:55] <camelia> rakudo 25a0b3, niecza v24-51-g009f999: OUTPUT«False␤»

[12:56] <grondilu> could be

[12:56] <grondilu> isn't perl6 supposed to be able to do whatever other languages do?

[12:58] <colomon> errr... no?

[13:00] <moritz> no.

[13:00] *** imIKARi left
[13:00] * grondilu was not serious and should have added a smiley

[13:04] <FROGGS_> sad that goto isnt implemented yet, you could add it otherwise :/

[13:06] <timotimo> now that i've fleshed out my presentation framework as far as i can think, i believe i'll have to come up with some darn slides :(

[13:07] *** denisboyun joined
[13:12] <parrot_Util> timotimo: What is the title of your talk? (/me can't find you by handle on yapcna.org)

[13:13] <timotimo> i don't go to yapcna, sorry

[13:13] <timotimo> it's kind of about 2000 euros outside of my budget

[13:13] <timotimo> plus minus 50%

[13:13] <timotimo> https://entropia.de/GPN13:Fahrplan#Samstag.2C_01.06.2013 - 18:00 o'clock

[13:15] <Util> timotimo: Thanks, and good luck!

[13:15] <timotimo> i've got colors, it'll be good

[13:17] <timotimo> since i won't be having too much horizontal space, i made a coloriser for gists and similar things: http://t.h8.lv/demonstration_colors.png

[13:17] <Util> Google translates your title as "A squirrel-guided tour of Perl 6". Is that an accurate translation?

[13:18] <timotimo> it is

[13:18] *** gudahtt left
[13:18] <timotimo> since i only have 1 hour and i want to get as many neat features and things in, it'll seem like i'm constantly getting distracted by shiny things, much like a squirrel would

[13:19] <Util> Delightful!

[13:19] <timotimo> i hope it will be equally as delightful to other people; especially those that have never seen perl6

[13:19] <FROGGS_> I guess they will be impressed :o)

[13:20] <timotimo> that's an euphemism, no? :)

[13:20] <timotimo> i think i'll present my presentation framework in a lightning talk 1.5h earlier

[13:21] *** denisboyun left
[13:23] <FROGGS_> if they know a bit about hacking they will enjoy it, but if they dont know a bit about hacking they'll probably just raise an eyebrow

[13:24] <timotimo> as long as they don't raise their rotten fruit and vegetables at me ... ;)

[13:24] <FROGGS_> *g*

[13:24] <FROGGS_> yeah, they can throw raw meat though

[13:25] <timotimo> yeah, i don't mind that

[13:26] <timotimo> say Timo.WHY;  <- last line on my first slide. best line in my whole presentation (so far) :D

[13:26] <FROGGS_> hehe

[13:32] <moritz> r: say Timo.WHY

[13:32] <camelia> rakudo 25a0b3: OUTPUT«===SORRY!===␤Undeclared name:␤    Timo used at line 1␤␤»

[13:32] <timotimo> just says where i study; is a boring bit of text

[13:35] *** lichtkind joined
[13:40] *** SamuraiJack__ joined
[13:40] *** SamuraiJack_ left
[13:47] *** kaleem left
[13:56] *** lichtkind left
[14:03] *** rindolf joined
[14:10] *** pecastro left
[14:11] *** FROGGS_ left
[14:12] *** pecastro joined
[14:26] *** ajr joined
[14:26] *** ajr_ left
[14:26] *** ajr is now known as Guest82885

[14:28] *** kaare__ joined
[14:29] *** SmokeMachine left
[14:30] *** pecastro left
[14:31] *** gudahtt joined
[14:31] *** pecastro joined
[14:32] *** dayangkun left
[14:36] *** SmokeMachine joined
[14:42] *** FROGGS joined
[14:43] *** mtk left
[14:43] *** phil_ left
[14:44] *** SamuraiJack__ left
[14:47] *** mtk joined
[14:51] <masak> r: <foo bar>>>.substr(0, 1).bag.elems.say

[14:51] <camelia> rakudo 25a0b3: OUTPUT«2␤»

[14:51] <masak> r: <foo bar>>>.substr(0, 1).Bag.elems.say

[14:51] <camelia> rakudo 25a0b3: OUTPUT«2␤»

[14:52] <masak> waitwait... so we have *both* .Bag and .bag?

[14:52] <moritz> r: <boo far>».substr(0,1).uniq.elems

[14:52] <camelia> rakudo 25a0b3:  ( no output )

[14:52] <moritz> r: say <boo far>».substr(0,1).uniq.elems

[14:52] <camelia> rakudo 25a0b3: OUTPUT«2␤»

[14:53] * masak decommutes

[14:55] <colomon> .bag is supposed to go away.

[14:56] <colomon> I originally named it .bag, but was convinced .Bag is better.

[14:56] <colomon> I think I need to finish up working on my set/bag branch of roast and get it to masak...

[14:57] *** brrt joined
[15:03] *** arlinius left
[15:05] <[Coke]> colomon: I wasn't referring to roast. I was referring to this: https://github.com/coke/rakudo-star-daily, which is testing whether or not star's module choices work. I suspect you're testing git-HEAD of everything, so I think there's room for a little duplication here.

[15:10] *** gudahtt left
[15:13] *** colomon left
[15:22] <timotimo> r: <foo bar>\ >>.substr(0, 1).say;

[15:22] <camelia> rakudo 25a0b3: OUTPUT«f b␤»

[15:22] <timotimo> unspace is cool.

[15:24] *** domidumont left
[15:30] <timotimo> dude, i'm so tired right now

[15:30] <timotimo> i'm in no shape to be making slides >_<

[15:31] *** brrt left
[15:32] <moritz> excuses!

[15:32] <timotimo> i even meant to post this in a channel where that kind of talk and emoticon use is more common, but i accidentally wrote it here! still on topic, though

[15:35] *** daxim left
[15:35] <moritz> btw #git has 913 nicks at the moment, but I still have the feeling that the overall activity is lower than in here

[15:46] *** arlinius joined
[15:51] *** gudahtt joined
[15:58] *** fhelmberger left
[16:15] *** denisboyun_ joined
[16:16] *** Khisanth left
[16:24] *** chrisdev joined
[16:27] *** Guest82885 left
[16:29] *** chrisdev_ joined
[16:32] *** chrisdev left
[16:33] *** Khisanth joined
[16:34] *** SamuraiJack__ joined
[16:44] *** aborazmeh left
[16:44] *** chrisdev_ left
[16:57] *** btyler joined
[17:13] *** btyler left
[17:20] *** SamuraiJack__ left
[17:21] *** Teratogen left
[17:21] *** Teratogen joined
[17:25] *** Chillance joined
[17:27] *** btyler joined
[17:30] <[Coke]> the fact that rt word wraps code is really nasty for people trying to test tickets.

[17:31] <FROGGS> yepp

[17:33] *** domidumont joined
[17:37] *** fgomez joined
[17:39] *** btyler left
[17:53] *** dmol joined
[17:57] <dagurval> r: "hello world" ~~ /(hello)/; say $/[0];

[17:57] <camelia> rakudo 25a0b3: OUTPUT«｢hello｣␤␤»

[17:57] <dagurval> what's with the ｢ and ｣ in the output?

[17:57] <jnthn> That's how Match objects gist.

[17:58] <dagurval> ah, ok, so I have to explicitly Str it

[17:58] <moritz> right

[17:58] <moritz> or print it instead of say it

[17:58] <moritz> which .Str's for you

[17:59] <jnthn> Or ~ it

[17:59] <moritz> or join it

[18:16] *** dmol1 joined
[18:16] *** dmol left
[18:17] *** rindolf left
[18:20] <FROGGS> or quote it

[18:21] *** rindolf joined
[18:28] <arnsholt> jnthn: Do you know off-hand if setting Parrot's random seed to a fixed value might make the layout of objects the same between two runs (of the same program, obv)?

[18:30] <jnthn> arnsholt: As in, where they get allocated?

[18:30] *** kurahaupo joined
[18:30] <jnthn> I don't think that's a Parrot doing; that's more likely to be the OS' address space randomization.

[18:32] <dagurval> r: "asdf" ~~ s:g/s/d/;

[18:32] <camelia> rakudo 25a0b3: OUTPUT«Cannot modify an immutable value␤  in sub infix:<=> at src/gen/CORE.setting:13499␤  in block  at /tmp/znfJoKQkxz:1␤␤»

[18:33] <dagurval> is that the same as the sub($a) { $a = 5 } optimize-bug in RT?

[18:33] <arnsholt> jnthn: Right, that's probably right. To the Google-mobile, I guess

[18:34] <FROGGS> dagurval: no, in this case you are trying to modify an string

[18:35] <FROGGS> dagurval: the bug you are talking about is missing a containerization afaik

[18:35] *** ajr joined
[18:35] *** prevost joined
[18:35] *** SamuraiJack__ joined
[18:36] *** ajr is now known as Guest69011

[18:40] *** btyler joined
[18:48] <grondilu> rn:  say (my % = "foo bar" => 7)<foo bar>

[18:48] <camelia> rakudo 25a0b3, niecza v24-51-g009f999: OUTPUT«(Any) (Any)␤»

[18:48] <grondilu> rn:  say (my % = "foo bar" => 7){"foo bar"}

[18:48] <camelia> rakudo 25a0b3, niecza v24-51-g009f999: OUTPUT«7␤»

[18:49] * grondilu wishes he could write %h"foo bar"

[18:55] <jnthn> %h<<'foo bar'>>

[19:00] *** Guest69011 is now known as ajr_

[19:01] *** SamuraiJack__ left
[19:01] *** SamuraiJack joined
[19:02] *** kurahaupo left
[19:05] *** census joined
[19:17] *** gudahtt left
[19:21] <dalek> rakudo/jvm-support: a31ce41 | jnthn++ | src/Perl6/World.nqp:

[19:21] <dalek> rakudo/jvm-support: Mark dyncomp boundaries.

[19:21] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/a31ce419d2

[19:21] <dalek> nqp/rak-jvm-support: 4b6519a | jnthn++ | src/vm/jvm/QAST/Compiler.nqp:

[19:21] <dalek> nqp/rak-jvm-support: Fix lexical lookups over dyncomp boundaries.

[19:21] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/4b6519abac

[19:21] <dalek> nqp/rak-jvm-support: 9ab48a0 | jnthn++ | src/vm/jvm/ (2 files):

[19:21] <dalek> nqp/rak-jvm-support: Implement nqp::throw.

[19:21] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/9ab48a08fa

[19:31] *** btyler left
[19:38] *** snoopy left
[19:40] *** SamuraiJack_ joined
[19:41] *** SamuraiJack left
[19:43] *** yakshavr left
[19:43] *** yakshavr joined
[19:47] *** btyler joined
[19:52] *** sqirrel left
[19:58] *** domidumont left
[19:58] <dagurval> r: class A { has $!foo; method new { self.bless(*, foo => "bar") }; method b { say $!foo } }; A.new.b

[19:58] <camelia> rakudo 25a0b3: OUTPUT«(Any)␤»

[19:58] <dagurval> Why isn't foo "bar"?

[19:59] *** lizmat joined
[19:59] <moritz> dagurval: because public constructors can't set private attributes by defautl

[19:59] <moritz> *default

[19:59] <moritz> that goes against the idea of "private" :-)

[20:00] <dagurval> who is supposed to set private attributes, if not the constructor? o_O

[20:00] <dagurval> that makes no sense to me, coming from C++

[20:01] <dagurval> s/set/initialize

[20:01] <jnthn> That's what a BUILD submethod is for

[20:01] <jnthn> submethod BUILD() { $!foo = "bar" }

[20:01] <jnthn> But you could have written has $!foo = 'bar'; in that case.

[20:03] <moritz> I also don't understand why folks write private attributes, and then want to give the user of the object direct write access to that attribute (but not read access; it's private after all)

[20:03] <dagurval> r: class A { has $!foo; method BUILD($f) { $!foo = $f }; method b { say $!foo } }; A.new("BAR").b()

[20:03] <camelia> rakudo 25a0b3: OUTPUT«Default constructor for 'A' only takes named arguments␤  in method new at src/gen/CORE.setting:731␤  in method new at src/gen/CORE.setting:726␤  in block  at /tmp/AbEfx9_TC2:1␤␤»

[20:04] <moritz> dagurval: http://doc.perl6.org/language/classtut#Constructors

[20:04] <moritz> http://perlgeek.de/blog-en/perl-6/object-construction-and-initialization.html

[20:05] <dagurval> ah, ok, BUILD doesn't like position parameters

[20:08] <tadzik> BUILD is confusing :)

[20:08] <dagurval> so I have to choose between public attribute or forced naming parameter to constructor

[20:08] *** lizmat left
[20:08] <moritz> not at all.

[20:09] <dagurval> I guess I should rtfm then :)

[20:09] <moritz> method new controls how the constructor receives arguments

[20:09] <moritz> method BUILD controls which ones are set

[20:11] *** btyler left
[20:12] <dagurval> r: class A { has $!foo; submethod BUILD(:$!foo) { }; method new($p) { self.bless(*, foo => $p) };  method b { say $!foo } }; A.new("BAR").b()

[20:12] <camelia> rakudo 25a0b3: OUTPUT«BAR␤»

[20:12] <dagurval> got it!

[20:14] *** lizmat joined
[20:19] *** census left
[20:22] *** yakshavr left
[20:23] *** lizmat left
[20:23] <timotimo> i'm having a really hard time getting the japanese delimiters for matches working with urxvt. what font on linux would have that character? i can't seem to find that out

[20:24] *** btyler joined
[20:24] *** yakshavr joined
[20:25] *** domidumont joined
[20:25] <timotimo> 9x15bold seems to have it! great

[20:25] *** SamuraiJack_ left
[20:25] *** lizmat joined
[20:27] <timotimo> aaaand i messed it up again

[20:28] <timotimo> turning autohinting, or hinting really, on breaks it immediately

[20:32] *** lizmat left
[20:32] *** btyler left
[20:34] *** zby_home_ joined
[20:34] *** lizmat joined
[20:34] *** SmokeMachine left
[20:34] <geekosaur> meaning it's in the bitmap font but not the ttf version, probably

[20:36] *** kaare__ is now known as kaare_

[20:38] <timotimo> weird.

[20:38] *** btyler joined
[20:41] *** yakshavr left
[20:41] *** lizmat left
[20:42] *** SmokeMachine joined
[20:42] *** yakshavr joined
[20:43] *** lizmat joined
[20:44] *** xilo left
[20:48] *** lizmat left
[20:49] *** domidumont left
[20:53] *** kaare_ left
[20:57] *** btyler left
[20:57] *** btyler joined
[20:58] *** zby_home_ left
[20:59] *** pmurias joined
[20:59] * pmurias got accepted into GSoC ;)

[20:59] <jnthn> \o/

[20:59] <jnthn> pmurias++

[21:00] <tadzik> \o/

[21:00] <tadzik> awesome!

[21:00] <jnthn> .oO( pmurias QASTs JavaScript backend charm )

[21:02] <masak> \o/

[21:02] <masak> pmurias++

[21:02] <masak> I for one welcome our new Perl 6 browser overlords.

[21:03] <tadzik> :)

[21:08] *** xilo joined
[21:19] *** prevost left
[21:20] *** btyler left
[21:32] *** SmokeMachine left
[21:33] *** PacoAir left
[21:33] *** splitcells joined
[21:34] <splitcells> why an our variable cannont have an type constraint in a package?

[21:35] <masak> because a type constraint is not compatible with the way multiple sites can define and redefine 'our' variables.

[21:36] <splitcells> ah

[21:36] <splitcells> ty

[21:40] <masak> pzh

[21:42] <sorear> there's no reason in principle it couldn't be allowed, but we'd have to enforce a type-compatibility rule for mergers

[21:42] <sorear> nontrivial and low priority, sorry D:

[21:43] <masak> aye.

[21:44] <masak> 'night, #perl6

[21:56] *** btyler joined
[22:01] *** rindolf left
[22:01] <grondilu> pmurias: what will you work on?  r u going to talk about it in a blog or something?

[22:03] *** lustlife left
[22:04] *** kurahaupo joined
[22:04] *** kurahaupo left
[22:05] *** kurahaupo joined
[22:05] * grondilu looks in the GSoC home page and looks for perl

[22:05] * grondilu finds this:

[22:05] <grondilu> Rewrite the testing environment for Wget in Python. This is required since although Perl is a powerful language, it's syntax is quite non-intuitive to the C Programmers who write code for Wget.

[22:06] <grondilu> https://www.google-melange.com/gsoc/project/google/gsoc2013/darnir/5001

[22:06] <grondilu> :/

[22:06] <diakopter> heh heh.

[22:06] <grondilu> Yet I think perl is much more C-like than python :/

[22:06] <diakopter> chromatic would enjoy writing a blog post about that quote "Python is more intuitive syntax to C programmers than Perl"

[22:07] <diakopter> I'd enjoy reading it

[22:08] <grondilu> It's actually possible to translate C-code into some perl code that VERY much look like the original C code. 

[22:08] *** lizmat joined
[22:09] <grondilu> I mean come on, isn't that obvious?

[22:12] *** ajr_ left
[22:13] <pmurias> grondilu: a javascript backend for Perl 6 (nqp but hopefull rakudo in the future)

[22:14] <btyler> cool! asm.js for bonus points :)

[22:14] <grondilu> oh ok I see you project in the list now, pmurias 

[22:17] <espadrine> btyler: you can't really transpile perl 6 to asm.js. Asm.js doesn't have strings.

[22:24] *** splitcells left
[22:27] <pmichaud> pmurias++  # gsoc

[22:28] <pmichaud> I'm so happy to see that funded.

[22:29] <dalek> perl6-roast-data: c851c90 | coke++ | / (4 files):

[22:29] <dalek> perl6-roast-data: today (automated commit)

[22:29] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/c851c90238

[22:29] <dalek> rakudo-star-daily: 6b047df | coke++ | log/ (5 files):

[22:29] <dalek> rakudo-star-daily: today (automated commit)

[22:29] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/6b047df13c

[22:41] *** denisboyun_ left
[22:43] *** woolfy joined
[22:45] <dalek> specs: 415f998 | labster++ | S32-setting-library/IO.pod:

[22:45] <dalek> specs: Add IO::Handle methods encoding and open (really!), cleanup slurp

[22:45] <dalek> specs: Minor cleanup in IO::Spec.  TODO: Pipes

[22:45] <dalek> specs: review: https://github.com/perl6/specs/commit/415f998968

[22:47] *** raiph joined
[22:48] * lizmat is back home and ready to get some shuteye

[22:49] <sorear> cheers

[22:49] *** colomon joined
[22:50] *** adu joined
[22:54] <labster> Aww, I was hoping pmichaud++'s patch would fix that heisenbug.

[23:06] *** tgt left
[23:10] <pmichaud> well, so was I.  Sort of.

[23:19] *** pmurias left
[23:40] *** raiph left
