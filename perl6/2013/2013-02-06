[00:00] <jnthn> moritz: hmmm. I'm too tired to know if that's a hack or a great idea ;)

[00:00] <jnthn> Lemme sleep on it :)

[00:00] <timotimo> "that hack is a great idea!"

[00:00] <moritz> jnthn: sure

[00:01] <jnthn> timotimo: it's sometimes like that too :D

[00:02] <jnthn> OK, I guess I should rest. Even though getting up in time to get to $client today was pointless 'cus the subway had epic delays...

[00:03] * moritz would love to go to bed, but $daughter keeps him awake

[00:22] *** fgomez joined
[00:23] <japhb> I would sing Ronja a lullaby, but I doubt she'd hear it.  :-)

[00:24] <moritz> if it were that easy... :-)

[00:25] <swarley> Am I the only one that wants to make a perl6 parser that isn't in perl6 just to be insane? ;)

[00:25] <japhb> I found Dire Straights remarkably effective with my eldest daughter.  Somehow Mark Knopfler can just chill a kid right out.

[00:25] *** viewview joined
[00:26] *** pmurias left
[00:26] <moritz> heh, Dire Straits work fine for me :-)

[00:27] <japhb> Wow, I saw something wrong with my spelling, but my brain was in such a different space, I couldn't figure out what it was.

[00:27] <moritz> but the problem right now is that Ronja slept for a few hours this afternoon, and now can't sleep at night. No amount of music can change that

[00:27] *** Chillance left
[00:27] <japhb> Oh, that one sucks.

[00:28] <moritz> and she's recovering from a bronchitis, so we were reluctant to wake her

[00:28] <moritz> tried twice without success, and then gave up

[00:28] <moritz> turns out to be a mistake, as I kinda expected

[00:28] <moritz> by the way, I've seen Mark Knopfler live in concert. Really awesome!

[00:29] <japhb> OK, I'm officially jealous.

[00:29] <moritz> it was an open air concert, but with a sound quality comparable to studio CDs

[00:31] <swarley> So, how can p6 extend its grammar?

[00:32] <japhb> I thought we covered this ...?

[00:33] <swarley> No I know that it is possible now, but not by what means

[00:33] <swarley> A reference to the standard that covers it would be sufficient

[00:33] <moritz> by defining types, constants, custom operators and macros

[00:33] <moritz> S02 and S06

[00:34] <swarley> k

[00:34] *** thundergnat left
[00:35] <swarley> If I'm going to be crazy, I may as well do it properly

[00:36] <japhb> swarley: Start by spending a few hours in a Dali exhibit.  Then once your brain is in the right shape ...

[00:38] <swarley> \\\\\o//////

[00:48] *** PZt joined
[00:55] *** arlinius joined
[01:02] *** cognominal left
[01:02] *** atrodo left
[01:08] *** hypolin joined
[01:10] * timotimo digs around in old tickets

[01:14] <TimToady> timotimo: moreinput was always just kind of a placeholder for a feature

[01:14] <TimToady> I would be astounded if it actually worked without a bit of redesign

[01:23] <timotimo> i'd like to try to implement tr///, but i can't find the implementation of s/// to compare in the grammar

[01:27] <TimToady> those are tribble and sibble in STD

[01:27] <TimToady> there's a bit different because tr doesn't have the s[foo] = 'bar' form

[01:27] <TimToady> *they're

[01:30] <timotimo> tribble and sibble? >_<

[01:30] <timotimo> that's crazy talk!

[01:31] <timotimo> and nibble has nothing to do wih sibble and tribble?

[01:33] <TimToady> tribble has to nibble twice, once for each side

[01:33] * mst reads scrollback and wibbles

[01:33] <timotimo> why does STD babble?

[01:34] <timotimo> or rather: what does babble do?

[01:34] <diakopter> b/c it's a brooken

[01:34] <mst> because cupid's disease causes brain damage eventually

[01:34] <timotimo> >_<

[01:35] <TimToady> babble parsed any adverbs and looks for the delimiters

[01:35] <timotimo> babble does some kind of matching terminator finding?

[01:36] <TimToady> *parses

[01:37] <TimToady> it doesn't actually look for the terminator, it only determines what the terminator is supposed to be

[01:37] <TimToady> in between you have to parse some other language, with that terminator mixed in

[01:37] *** colomon joined
[01:38] <timotimo> oh, ok

[01:38] <TimToady> quibble is used by normal choose-your-own-quote constructs like rx// and m//

[01:38] <timotimo> that's why tribble quibbles with "$lang2"

[01:38] <TimToady> and qq// and q//

[01:39] <timotimo> and if the delimiters are the same, like in //, it apparently uses $lang2.unbalanced($stop), that's the part where it mixes in that terminator, yes?

[01:39] <TimToady> nodnod

[01:39] <TimToady> balanced would be q[] and such

[01:39] <timotimo> interestingly in rakudo the grammar part of the implementation of s/// is much much shorter

[01:40] <timotimo> probably most of i's implemented in the quote proto

[01:40] <timotimo> oh, actually there's a huge sibble method above it that i just now saw

[01:43] <timotimo> hm, i haven't seen this before, why does it say ">>" in this line? https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Grammar.pm#L2751

[01:44] <timotimo> ah, i's just a word boundary

[01:48] <timotimo> here's me, again biting off more than i can chew. eventually my jaw will be super flexible

[01:50] <timotimo> maybe i should have looked into the specs for tr/ firs to see if it even allows any regular kind of regex

[01:53] <timotimo> std: "FooBar" ~~ tr/A..Z/a..z/;

[01:53] <p6eval> std 7551b8f: OUTPUT«ok 00:00 42m␤»

[01:53] <timotimo> std: "FooBar" ~~ tr/.*/a..z/;

[01:53] <p6eval> std 7551b8f: OUTPUT«ok 00:00 42m␤»

[02:02] <TimToady> that would translate . to a and * to b

[02:02] <TimToady> so yes, the tr language has nothing to do with regex

[02:03] <TimToady> it's closer to character classes

[02:05] *** Vlavv joined
[02:05] <diakopter> std: tr///

[02:05] <p6eval> std 7551b8f: OUTPUT«ok 00:00 41m␤»

[02:07] *** flussence joined
[02:07] <TimToady> std: s///

[02:07] <p6eval> std 7551b8f: OUTPUT«[31m===[0mSORRY![31m===[0m␤Null pattern not allowed at /tmp/X_aaXPcvUY line 1:␤------> [32ms/[33m⏏[31m//[0m␤    expecting any of:␤  statement end␤  statement list␤Parse failed␤FAILED 00:00 41m␤»

[02:07] <TimToady> that shows the difference right there

[02:08] *** Vlavv_ left
[02:08] <timotimo> now to try to understand how that comes to be in STD

[02:13] *** flussence left
[02:15] *** flussence joined
[02:17] *** sqirrel_ joined
[02:20] *** sqirrel left
[02:32] *** anuby joined
[02:32] *** hugme left
[02:35] *** hugme joined
[02:35] *** ChanServ sets mode: +v hugme

[02:35] <diakopter> std: say "foo" ~~ tr//tr//tr//tr//tr//tr//tr//tr/

[02:35] <p6eval> std 7551b8f: OUTPUT«ok 00:00 43m␤»

[02:36] <timotimo> haha, what? :

[02:36] <timotimo> :)

[02:42] <timotimo> i think rather than grabbing at things randomly i should ask some of the experts what they consider managable tasks

[02:43] <diakopter> what kind of tasks

[02:44] <diakopter> to contribute to what?

[02:44] <timotimo> i would like to contribute to rakudo

[02:47] <diakopter> how good are you with optimizers?

[02:47] <diakopter> expert? eager to learn? 

[02:57] *** dayangkun left
[02:58] <diakopter> Pho &

[02:58] <timotimo> diakopter: i've recently done some baby steps with QAST, but other than that i'm very inexperienced

[03:06] *** jdv79 left
[03:07] *** jdv79 joined
[03:08] *** anuby_ joined
[03:09] *** anuby left
[03:10] *** dayangkun joined
[03:43] *** hulu joined
[03:43] <hulu> helo

[03:43] <hulu> masak: helo

[03:44] <hulu> au: helo

[03:44] <colomon> \o

[03:46] <hulu> sub accum ($n is copy) { sub { $n += $^x } }

[04:04] *** preflex left
[04:05] *** preflex_ joined
[04:06] *** preflex_ is now known as preflex

[04:50] *** dayangkun left
[05:03] *** preflex left
[05:03] *** preflex_ joined
[05:04] *** preflex_ is now known as preflex

[05:10] *** Targen joined
[05:11] *** baest left
[05:11] *** baest joined
[05:16] *** SamuraiJack joined
[05:18] *** xinming_ joined
[05:21] *** xinming left
[06:07] *** dayangkun joined
[06:11] *** robinsmidsrod joined
[06:30] *** kaleem joined
[06:47] <diakopter> r: $()

[06:47] <p6eval> rakudo 0dda4c: OUTPUT«No such method 'ast' for invocant of type 'Any'␤  in block  at /tmp/TdbB9mgQOP:1␤␤»

[06:48] <arnsholt> 'lo

[06:48] <phenny> arnsholt: 05 Feb 23:20Z <jnthn> tell arnsholt I'll look at it once I'm home tomorrow, or maybe on Thursday when I don't have to care about anything other than Perl 6 stuff :0

[06:48] <diakopter> masak: istr you submitting this one ^^ but I'm not certain

[07:02] * jnthn yawns

[07:02] <jnthn> Last day of $assignment here...tomorrow will be free for Perl 6 things. :)

[07:11] <diakopter> hi

[07:14] <jnthn> o/

[07:14] * jnthn packs stuff

[07:15] <jnthn> OK, time to go play with the subway... :) &

[07:17] *** arlinius left
[07:29] *** Woodi left
[07:47] *** jasonmay left
[07:47] *** jasonmay joined
[07:57] *** FROGGS joined
[07:57] <FROGGS> morning

[07:59] <sorear> o/

[08:03] <FROGGS> nr: my $x = "abcdef"; say "abc" ~~ / $( $x.substr( 0, 3) ) /

[08:03] <p6eval> rakudo 0dda4c: OUTPUT«｢abc｣␤␤»

[08:03] <p6eval> ..niecza v24-18-gaf64300: OUTPUT«#<match from(0) to(3) text(abc) pos([].list) named({}.hash)>␤»

[08:03] *** am0c joined
[08:03] <FROGGS> nr: my $x = "abcdef"; say "abc" ~~ / $( $x.substr( 1, 3) ) /

[08:03] <p6eval> niecza v24-18-gaf64300: OUTPUT«Match()␤»

[08:03] <p6eval> ..rakudo 0dda4c: OUTPUT«#<failed match>␤»

[08:03] <FROGGS> nr: my $x = "abcdef"; say "abc" ~~ / $( $x.substr( 1, 2) ) /

[08:03] <p6eval> niecza v24-18-gaf64300: OUTPUT«#<match from(1) to(3) text(bc) pos([].list) named({}.hash)>␤»

[08:03] <p6eval> ..rakudo 0dda4c: OUTPUT«｢bc｣␤␤»

[08:03] *** am0c left
[08:06] *** fgomez left
[08:06] <FROGGS> \o/

[08:13] *** drbean left
[08:14] *** fgomez joined
[08:15] <FROGGS> sorear: are there plans to output matches in niecza like rakudo does it?

[08:15] <FROGGS> so that the match object stringifies to ｢bc｣

[08:17] <sorear> FROGGS: I'm not personally going to do it, but I wouldn't object to a patch.  do you have a commit bit yet?

[08:18] <FROGGS> sorear: not yet

[08:18] <sorear> would you use one?  if so what's your github id

[08:18] <FROGGS> will supply the patch in exchange for the bit :o)

[08:18] <FROGGS> FROGGS

[08:19] <sorear> done

[08:28] <FROGGS> thanks

[08:31] *** domidumont joined
[08:31] *** domidumont left
[08:31] *** domidumont joined
[08:32] *** fgomez left
[08:34] *** brrt joined
[08:34] *** fgomez joined
[08:41] *** jtpalmer left
[08:41] *** jtpalmer_ joined
[08:41] *** am0c joined
[08:53] *** daxim joined
[08:57] *** hoelzro|away is now known as hoelzro

[09:04] *** fhelmberger joined
[09:18] <GlitchMr-> https://twitter.com/GlitchMr

[09:18] <GlitchMr-> Just testing

[09:20] <GlitchMr-> Perhaps if I would make it half transparent...

[09:21] <GlitchMr-> Doesn't look good

[09:33] *** dakkar joined
[09:35] *** kivutar joined
[09:41] *** SamuraiJack_ joined
[09:45] *** SamuraiJack left
[09:46] *** SamuraiJack__ joined
[09:48] <masak> good forenoon, #perl6

[09:48] *** Patterner left
[09:48] *** SamuraiJack_ left
[09:49] <moritz> \o masak

[09:49] *** Psyche^ joined
[09:49] *** Psyche^ is now known as Patterner

[09:59] <masak> I got a teeny tiny bit of the way yesterday with p6cc2012/t1. will continue this evening.

[10:00] <moritz> \o/

[10:01] *** xinming_ left
[10:02] *** fgomez left
[10:04] <hulu> how to install rakudo on ubuntu 12.04

[10:05] <brrt> sudo apt-get install rakudo-star afaik hulu :-)

[10:05] *** SamuraiJack__ left
[10:05] <brrt> or: git clone git://github.com/perl6/rakudo.git; cd rakudo; ./configure —gen-nqp —gen-parrot; make; sudo make install

[10:06] <hulu> brrt: apt-get will install out of date,and git will error

[10:07] <brrt> how serious is the out-of-dateness for you?

[10:07] <brrt> and what is the error with git

[10:07] *** hypolin left
[10:07] <hoelzro> I should really get moving on that rakudo star packaging thing

[10:08] <hoelzro> what's stopping me at the moment is that Arch has a rakudo package (which is up to date), and I'd rather not install another Rakudo just to install the star modules

[10:08] <hoelzro> or maybe I should just make the packages conflict?

[10:09] *** SamuraiJack joined
[10:10] <moritz> https://gist.github.com/anonymous/db9465c84b37e631ddd3 # required attributes

[10:11] <moritz> masak: you might like that ^^

[10:13] *** anuby_ left
[10:18] <masak> oooooooooh

[10:19] <masak> now give me one good argument for not making that part of the spec and the implementations.

[10:20] <masak> r: multi trait_mod:<is>(Attribute:D $attr, :$required!) { $attr.set_build: sub ($invocant, $) { die "Attribute { $attr.name } required while constructing object of class {$invocant.^name}!" } }; class A { has $.x is requires }; A.new

[10:20] <p6eval> rakudo 0dda4c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Cannot call 'trait_mod:<is>'; none of these signatures match:␤:(Mu:U $child, Mu:U $parent)␤:(Attribute:D $attr, :rw(:$rw)!)␤:(Attribute:D $attr, :readonly(:$readonly)!)␤:(Attribute:D $attr, :box_target(:$box_target)!)␤:(Routine:D $r, …

[10:20] <masak> :/

[10:20] <masak> uh.

[10:20] <masak> r: multi trait_mod:<is>(Attribute:D $attr, :$required!) { $attr.set_build: sub ($invocant, $) { die "Attribute { $attr.name } required while constructing object of class {$invocant.^name}!" } }; class A { has $.x is required }; A.new

[10:20] <p6eval> rakudo 0dda4c: OUTPUT«Attribute $!x required while constructing object of class A!␤  in sub  at /tmp/s8_iS7TJ3O:1␤  in block  at src/gen/CORE.setting:797␤  in method BUILDALL at src/gen/CORE.setting:752␤  in method bless at src/gen/CORE.setting:742␤  in method new at src/gen/CORE.settin…

[10:20] *** SamuraiJack_ joined
[10:21] <masak> r: multi trait_mod:<is>(Attribute:D $attr, :$required!) { $attr.set_build: sub ($invocant, $) { die "Attribute { $attr.name } required while constructing object of class {$invocant.^name}!" } }; class A { has $.x is required }; class B is A {}; B.new

[10:21] <p6eval> rakudo 0dda4c: OUTPUT«Attribute $!x required while constructing object of class B!␤  in sub  at /tmp/dWVyg8Qodw:1␤  in block  at src/gen/CORE.setting:797␤  in method BUILDALL at src/gen/CORE.setting:752␤  in method bless at src/gen/CORE.setting:742␤  in method new at src/gen/CORE.settin…

[10:21] <masak> moritz: not sure whether the "object of class B" there is a feature or a bug... :)

[10:21] <masak> the attribute is still required becuase of class A.

[10:21] <moritz> yes, but you're creating an object of class B :-)

[10:22] *** Himanshu_ joined
[10:22] <moritz> I wonder if an attribute contains a reference back to the class it's attached to

[10:22] *** Himanshu_ left
[10:22] <moritz> ah, .type

[10:23] <moritz> no, that's the type constraint of the attribute

[10:23] <masak> Suggestion: "Attribute $!x (of class A) required while constructing object of class B" :)

[10:24] <masak> with the parentheses only showing if A !== B

[10:24] *** SamuraiJack left
[10:24] <hulu> r: my $line = "1 2 3";my @words = $line.split(' ');for 0 .. ^ @words -> $a { say $a;} what does '0 .. ^ @words' mean?

[10:24] <p6eval> rakudo 0dda4c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/K0vfcxFuUJ:1␤------> [32m' ');for 0 .. ^ @words -> $a { say $a;} [33m⏏[31mwhat does '0 .. ^ @words' mean?[0m␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infix stopper␤      …

[10:24] <hulu> r: my $line = "1 2 3";my @words = $line.split(' ');for 0 .. ^ @words -> $a { say $a;}

[10:24] <p6eval> rakudo 0dda4c: OUTPUT«0␤1␤2␤3␤»

[10:24] <hulu> what does '0 .. ^ @words' mean?

[10:24] <masak> hulu: you should write it as ..^ , not .. ^

[10:25] <masak> it's one single operator: ..^

[10:25] <moritz> ..^ is a range that excludes its endpoint

[10:25] <masak> right, so 1..^4 is 1, 2, 3

[10:25] <moritz> though I prefer to write  0 ..^ @words  as @words.keys

[10:25] <masak> that's clearer, yes.

[10:25] <masak> I think I tend to write it as ^@words often as not.

[10:26] <masak> but I agree @works.keys conveys it better.

[10:26] <hulu> masak: .. ^  can run

[10:26] <masak> hulu: yes, but it doesn't mean anything sensible.

[10:26] <masak> hulu: we try to dissuade people from writing code that is obviously wrong, even if it runs.

[10:27] <moritz> well, that's interpreted as  0 ... (^@words)

[10:27] <moritz> and ^@words numifies its argument

[10:27] <moritz> so it becomes 0 .. ( 0 ..^ @words.elems )

[10:28] <moritz> and the outer range numifies its endpoint again

[10:28] <moritz> so we have 0 .. @words.elems in the end

[10:29] <moritz> which you could have written as   0 .. @words  if you really meant it, but you probably didn't

[10:29] <masak> right.

[10:30] <hulu> thx

[10:30] <masak> it's as if someone came in and asked "what does 'if $a == 1 { fn(1) } elsif $a == 2 { fn(2) } elsif $a == 3 { fn(3) } elsif $a == 4 { fn(4) } elsif $a == 5 { fn(5) }' mean?" :)

[10:31] <masak> it'd be almost criminal of us not to suggest that they just write it as 'fn($a)'

[10:31] <masak> at the very least, we could be considered accomplices to the crime...

[10:36] *** rindolf joined
[10:36] <rindolf> Hi all.

[10:37] <masak> greetings rindolf.

[10:37] <hulu> masak: 0 .. ^ @words 中 ^ @words 为什么被数字化

[10:37] <rindolf> masak: hi.

[10:37] <rindolf> masak: what's up?

[10:37] <hulu> masak: 是自动的么？

[10:37] <masak> rindolf: I... I don't know. :/

[10:38] <masak> hulu: it tends to numify things, yes.

[10:38] <rindolf> masak: OK, then what are you doing now?

[10:38] <rindolf> masak: did you watch the Superbowl?

[10:38] <masak> rindolf: heh. :)

[10:38] <masak> rindolf: no, that's a thing on TV, right?

[10:38] <rindolf> I don't even know who was against who and who won.

[10:38] <rindolf> masak: yes, a big American celebration.

[10:39] <masak> hulu: so @words will be treated as +@words

[10:39] <masak> rindolf: from what I gather of it, it's a celebration of quality advertisement.

[10:39] <rindolf> masak: the final football match of their American football league.

[10:39] <diakopter> the Raven Baltimores defeated the 49ers San Franciscos

[10:39] <masak> rindolf: that's good. we need more quality advertisement.

[10:39] <rindolf> masak: yes, that's what I understood too.

[10:39] <rindolf> masak: heh, yes.

[10:39] <masak> hulu: you can also do 'a'..'c' -- then things don't numify.

[10:39] <masak> hulu: but if the left side is a number, the right side will tend to want to numify.

[10:40] <masak> rn: .say for 'a' .. 5

[10:40] <p6eval> rakudo 0dda4c, niecza v24-18-gaf64300:  ( no output )

[10:40] <masak> rn: .say for 5 .. 'a'

[10:40] <p6eval> niecza v24-18-gaf64300: OUTPUT«Unhandled exception: Cannot parse number: a␤  at /home/p6eval/niecza/lib/CORE.setting line 1435 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3539 (ANON @ 10) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3541 (NumSyntax.str2num @ 5) ␤  at /h…

[10:40] <p6eval> ..rakudo 0dda4c: OUTPUT«Cannot call 'Real'; none of these signatures match:␤:(Mu:U \v: Mu *%_)␤␤  in method Real at src/gen/CORE.setting:872␤  in method Real at src/gen/CORE.setting:2391␤  in method new at src/gen/CORE.setting:5255␤  in sub infix:<..> at src/gen/CORE.setting:5436␤  in blo…

[10:40] <rindolf> masak: I enjoyed the IBM commercial about (GNU/)Linux as a child who gets taught.

[10:40] <hulu>  masak : + @words 相当与  @words.elems

[10:40] <rindolf> masak: that was a while back.

[10:41] <masak> hulu: 对

[10:42] *** xinming joined
[10:44] *** am0c left
[10:47] <dalek> roast: 82f5bc3 | moritz++ | S05-metasyntax/litvar.t:

[10:47] <dalek> roast: unfudge some now-passing tests for rakudo

[10:47] <dalek> roast: review: https://github.com/perl6/roast/commit/82f5bc305d

[10:47] <hulu> r: sub infix:<lf> ($a,$b) { next unless try $a.substr(*-1,1) eq $b.substr(0,1); "$a $b"; } multi dethunk(Callable $x) { try take $x() } multi dethunk(     Any $x) {     take $x   } sub amb (*@c) { gather @c».&dethunk } say first *, do amb(<the that a>, { die 'oops'}) Xlf amb('frog',{'elephant'},'thing') Xlf amb(<walked treaded grows>)      Xlf amb { die 'poison dart' }, {'slowly'}, {'quickly'}, { die 'fire' };

[10:47] <p6eval> rakudo 0dda4c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/tdztv3tpKL:1␤------> [32mtr(*-1,1) eq $b.substr(0,1); "$a $b"; } [33m⏏[31mmulti dethunk(Callable $x) { try take $x[0m␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infix stopp…

[10:48] <moritz> hulu: when you remove a newline after a }, you need to add a ; instead

[10:49] <hulu> moritz: thx

[10:49] <hulu> r: sub infix:<lf> ($a,$b) { next unless try $a.substr(*-1,1) eq $b.substr(0,1); "$a $b"; } multi dethunk(Callable $x) { try take $x() }; multi dethunk(     Any $x) {     take $x   }; sub amb (*@c) { gather @c».&dethunk }; say first *, do amb(<the that a>, { die 'oops'}) Xlf amb('frog',{'elephant'},'thing') Xlf amb(<walked treaded grows>)      Xlf amb { die 'poison dart' }, {'slowly'}, {'quickly'}, { die 'fire' };

[10:49] <p6eval> rakudo 0dda4c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/UG7D3jOfng:1␤------> [32mtr(*-1,1) eq $b.substr(0,1); "$a $b"; } [33m⏏[31mmulti dethunk(Callable $x) { try take $x[0m␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infix stopp…

[10:49] <hulu> moritz: still wrong

[10:51] <moritz> hulu: and it even tells you where it's still wrong

[10:51] <moritz> where the error message inserts a ⏏, that's where the semicolon is missing

[10:53] <hulu> r: sub infix:<lf> ($a,$b) {     next unless try $a.substr(*-1,1) eq $b.substr(0,1);     "$a $b"; };   multi dethunk(Callable $x) { try take $x() } multi dethunk(     Any $x) {     take $x   }   sub amb (*@c) { gather @c».&dethunk }   say first *, do     amb(<the that a>, { die 'oops'}) Xlf     amb('frog',{'elephant'},'thing') Xlf     amb(<walked treaded grows>)      Xlf     amb { die 'poison dart' },         {'slowly'},         {'quick

[10:53] <p6eval> rakudo 0dda4c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/OYt1956sqx:1␤------> [32m dethunk(Callable $x) { try take $x() } [33m⏏[31mmulti dethunk(     Any $x) {     take $x[0m␤    expecting any of:␤        postfix␤        argument list␤        infix or meta-inf…

[10:54] <hulu> r: sub infix:<lf> ($a,$b) {     next unless try $a.substr(*-1,1) eq $b.substr(0,1);     "$a $b"; };   multi dethunk(Callable $x) { try take $x() }; multi dethunk(     Any $x) {     take $x   };   sub amb (*@c) { gather @c».&dethunk }   say first *, do     amb(<the that a>, { die 'oops'}) Xlf     amb('frog',{'elephant'},'thing') Xlf     amb(<walked treaded grows>)      Xlf     amb { die 'poison dart' },         {'slowly'},         {'qui

[10:54] <p6eval> rakudo 0dda4c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/eHFzrM8J7g:1␤------> [32msub amb (*@c) { gather @c».&dethunk }   [33m⏏[31msay first *, do     amb(<the that a>, { [0m␤    expecting any of:␤        method arguments␤        postfix␤        infix or meta-…

[10:55] <hulu> r: sub infix:<lf> ($a,$b) { next unless try $a.substr(*-1,1) eq $b.substr(0,1); "$a $b"; }; multi dethunk(Callable $x) { try take $x() }; multi dethunk(     Any $x) {     take $x   }; sub amb (*@c) { gather @c».&dethunk }; say first *, do amb(<the that a>, { die 'oops'}) Xlf amb('frog',{'elephant'},'thing') Xlf amb(<walked treaded grows>)      Xlf amb { die 'poison dart' }, {'slowly'}, {'quickly'}, { die 'fire' };

[10:55] <p6eval> rakudo 0dda4c: OUTPUT«that thing grows slowly␤»

[10:57] *** SmokeMachine joined
[10:59] <hulu> r: sub infix:<lf> ($a,$b) { next unless try $a.substr(*-1,1) eq $b.substr(0,1); "$a $b"; }; say 'kkk' lf 'ttt';

[10:59] <p6eval> rakudo 0dda4c: OUTPUT«next without loop construct␤  in block  at src/gen/CORE.setting:451␤  in block  at src/gen/CORE.setting:515␤  in sub infix:<lf> at /tmp/tJs4pZ9qLf:1␤  in block  at /tmp/tJs4pZ9qLf:1␤␤»

[11:00] <hulu> r: sub infix:<lf> ($a,$b) { next unless try $a.substr(*-1,1) eq $b.substr(0,1); "$a $b"; }; say lf 'kkk' 'ttt';

[11:00] <p6eval> rakudo 0dda4c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/QSXSe6ENQI:1␤------> [32mb.substr(0,1); "$a $b"; }; say lf 'kkk' [33m⏏[31m'ttt';[0m␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infix stopper␤        statement end␤        s…

[11:00] <hulu> r: sub infix:<lf> ($a,$b) { next unless try $a.substr(*-1,1) eq $b.substr(0,1); "$a $b"; }; say lf 'kkk','ttt';

[11:00] <p6eval> rakudo 0dda4c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤    lf used at line 1. Did you mean '&lc'?␤␤»

[11:01] <hulu> moritz: say  'kkk' lf 'ttt; why not run?

[11:02] <moritz> hulu: you've declared lf as an infix, so you must use it as an infix, not as a normal subroutine

[11:02] <moritz> oh, and the other one: it told you in the error message what was wrong

[11:03] <hulu> r: sub infix:<lf> ($a,$b) { next unless try $a.substr(*-1,1) eq $b.substr(0,1); "$a $b"; }; 'kkk' lf 'ttt';

[11:03] <p6eval> rakudo 0dda4c: OUTPUT«next without loop construct␤  in block  at src/gen/CORE.setting:451␤  in block  at src/gen/CORE.setting:515␤  in sub infix:<lf> at /tmp/tUzHZxcy7n:1␤  in block  at /tmp/tUzHZxcy7n:1␤␤»

[11:03] <moritz> hulu: did you read the error message?

[11:04] <hulu> moritz: my english is poor

[11:04] <hulu> r: sub infix:<lf> ($a,$b) { "$a $b"; }; 'kkk' lf 'ttt';

[11:04] <p6eval> rakudo 0dda4c:  ( no output )

[11:04] <hulu> r: sub infix:<lf> ($a,$b) { "$a $b"; }; say 'kkk' lf 'ttt';

[11:04] <p6eval> rakudo 0dda4c: OUTPUT«kkk ttt␤»

[11:04] <moritz> hulu: yes, I known. But did you read the error message?

[11:05] <hulu> moritz: read a little

[11:05] *** b1rkh0ff left
[11:06] *** b1rkh0ff joined
[11:07] *** b1rkh0ff left
[11:07] <masak> hulu: 'next without loop construct'. 'next' can only occur inside a loop.

[11:07] <masak> hulu: maybe you meant 'return'?

[11:07] <hulu> r: my $a = 'hello'; $a.substr(*-1,1);

[11:07] <p6eval> rakudo 0dda4c:  ( no output )

[11:08] <hulu> r: my $a = 'hello';say  $a.substr(*-1,1);

[11:08] <p6eval> rakudo 0dda4c: OUTPUT«o␤»

[11:08] <masak> \o/

[11:08] <hulu> r: my $a = 'hello';say  $a.substr(0,1);

[11:08] <p6eval> rakudo 0dda4c: OUTPUT«h␤»

[11:08] <hulu> r: my $a = 'hello';say  $a.substr(*-2,1);

[11:08] <p6eval> rakudo 0dda4c: OUTPUT«l␤»

[11:09] *** dayangkun left
[11:09] <hulu> r: my $a = 'hello';say  $a.substr(0,1);

[11:09] <p6eval> rakudo 0dda4c: OUTPUT«h␤»

[11:09] <hulu> r: my $a = 'hello';say  $a.substr(*-2,1);

[11:09] <p6eval> rakudo 0dda4c: OUTPUT«l␤»

[11:12] <arnsholt> Where are good places to start to see how Rakudo's high water mark stuff works?

[11:13] <hulu> r: version

[11:13] <p6eval> rakudo 0dda4c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤    version used at line 1␤␤»

[11:13] <moritz> arnsholt: in the code? or in generated errors?

[11:13] <moritz> hulu: the 0dda4c in 'rakudo 0dda4c: OUTPUT' is the version string from git

[11:14] <moritz> hulu: it is rebuilt once per hour or so, to be always the latest development version

[11:14] <moritz> arnsholt: if code, git log -p 40681316098717e5ca59295d38f814604b28dd45

[11:14] <hulu> moritz: how to install development version on ubuntu 12.04

[11:15] <moritz> hulu: that's documented here: http://rakudo.org/how-to-get-rakudo/ under the section "Building the compiler from source"

[11:16] <masak> r: say $*PERL<compiler><ver>

[11:16] <p6eval> rakudo 0dda4c: OUTPUT«2013.01-100-g0dda4c8␤»

[11:16] <masak> ugh, premature optimization there with 'ver' :(

[11:16] <moritz> aye

[11:17] <masak> that's not even a common abbreviation of 'version'.

[11:17] <masak> is it spec?

[11:17] <masak> S28 mentions $*PERL, but not its structure AFAICS.

[11:19] <FROGGS> S11 Versioning tells about :ver<1.2.3> when "use"-ing modules

[11:19] *** Liz_ joined
[11:19] *** Liz_ is now known as lizmat

[11:21] <masak> yeah, I guess...

[11:22] <masak> and we do abbreviate :auth, too, for ambiguous goodness.

[11:22] * masak drops the case

[11:25] *** [particle]1 joined
[11:27] *** [particle] left
[11:27] <arnsholt> moritz: Cheers! I was looking for the code, yeah

[11:27] <arnsholt> (Want it for one of my own grammars)

[11:28] <moritz> oooh

[11:29] * moritz wonders if JSON::Tiny will grow into JSON::Small

[11:30] <masak> clearly, it's already bloated, since it outputs things as '{ "foo": 42 }', not '{"foo":42}'

[11:30] <masak> :P

[11:31] <moritz> hey, it's not called JSON::Compact :-)

[11:32] * masak wonders how little code he could get away with, writing a mixin to turn JSON::Tiny into JSON::Compact...

[11:33] <hulu> moritz: compile rakudo on ubuntu 12.04 wrong with 'error:imcc:No such file or directory 'interpinfo.pasm' 	in file 'runtime/parrot/library/parrotlib.pir' line 194 make: *** [runtime/parrot/include/parrotlib.pbc] 错误 1 Command failed (status 512): make install-dev'

[11:33] <moritz> hulu: which command did you run to get that output?

[11:34] <hulu> moritz: perl Configure.pl --gen-parrot --gen-nqp

[11:35] <moritz> hulu: and was that the first error message you got?

[11:35] <hulu> moritz: yes

[11:36] *** SamuraiJack__ joined
[11:37] <moritz> hulu: can you please paste the complete output to a nopaste site, and give us the link to it?

[11:38] <masak> hulu: https://gist.github.com/ is a fine choice if you're unsure.

[11:39] <hulu> moritz: https://gist.github.com/anonymous/4722076

[11:39] <hulu> masak: thx

[11:39] *** SamuraiJack_ left
[11:40] *** rindolf left
[11:40] <moritz> hulu: that's not the complete output

[11:40] <moritz> lunch&

[11:44] <masak> hanzi in the path... inneresting.

[11:45] <hulu> moritz: https://gist.github.com/anonymous/4722099

[11:46] <masak> hanzi in the path, and the error message is "No such file or directory"... :)

[11:46] <masak> not implying anything, but mayhaps suggesting that's where to start looking.

[11:48] <masak> hulu: do you think you could try this in a path that isn't /home/Data/Host/下载/rakudo.build/parrot/blib/lib and that doesn't have characters like 下载 in it?

[11:48] <hulu> masak: let me try

[11:49] *** odoacre left
[12:01] *** hulu left
[12:02] *** kresike joined
[12:02] <kresike> hello all you happy perl6 people

[12:07] *** mtymula joined
[12:08] <mtymula> Hi one quck ( I guess) question. Which module is better and more reliable to use DBIish or MiniDBI to hook up mysql to my web app 

[12:08] <mtymula> ??

[12:10] <mtymula> anyone??

[12:11] <moritz> DBIish is maintained

[12:12] <moritz> MiniDBI not

[12:13] *** bruges left
[12:14] *** bruges joined
[12:18] *** nebuchadnezzar left
[12:20] *** nebuchadnezzar joined
[12:23] <masak> mtymula: I'd go with DBIish.

[12:24] <masak> (I'd also avoid mysql, but that's another matter) ;)

[12:25] *** JimmyZ_ joined
[12:26] <JimmyZ_> 晚上好

[12:26] * kresike .oO( are there a lot of people here who try to avoid mysql ? )

[12:27] <masak> 晚上好, JimmyZ_! \o/

[12:28] *** jerome joined
[12:29] <JimmyZ_> 麦高 下午好

[12:30] <masak> ;)

[12:30] * masak .oO( 你的晚上好是我的下午好 )

[12:31] <moritz> mtymula: the postgres driver for DBIish works better than the mysql driver :-)

[12:32] <masak> s/driver (\w+ \w+)?//g # :P

[12:32] *** hulu joined
[12:35] *** cognominal joined
[12:39] *** hulu left
[12:44] <grondilu> Is there a free hosting service that would provide Perl6 CGI?

[12:44] <moritz> feather

[12:47] *** JimmyZ__ joined
[12:50] *** JimmyZ_ left
[12:50] <masak> today for lunch I've been reading http://javascript.crockford.com/tdop/tdop.html with interest.

[12:51] * moritz had pizza for lunch

[12:51] <masak> it feels like the parsing analogue of the Lisp metacircular evaluator.

[12:51] <masak> this one isn't half a page, but it's still pretty impressive, and very readable.

[12:52] <masak> the paragraph that caught my eye, though, was the one that starts "We need a policy for reserved words."

[12:52] <masak> it outlines an idea I've never encountered before for reserved words and forward-compatibility.

[12:53] *** shinobicl left
[12:53] <masak> I'm simultaneously thinking "ooh, that's pretty neat" and "there's *got* to be a catch here somewhere, making the future horrible in some way for a language that does this"

[12:54] <masak> thought I'd query this channel for whether my pessimism is justified. :)

[12:55] *** JimmyZ__ left
[12:57] <moritz> " For example, we can say that in any function, any name may be used as a structure word or as a variable, but not as both. We will reserve words locally only after they are used as reserved words."

[12:57] <moritz> that's what you're referring to, right?

[12:57] <masak> that's what I'm referring to, right.

[12:57] <masak> so, in essence, future keywords will stay out of functions where there are lexicals with that name.

[12:57] <moritz> which would mean that  function myf() { var if = 42; if ( # syntax error 

[12:58] <masak> yes, it would.

[12:58] <masak> you cannot both declare the variable and use the keyword.

[12:58] <moritz> it has a certain appeal

[12:58] <masak> exactly :)

[12:58] <moritz> though it makes it harder to refactor by cut'n'paste

[12:58] <masak> troo

[12:59] <moritz> but I don't think that's too valid an argument

[12:59] *** SmokeMac_ joined
[12:59] <masak> the design decisions has somewhat the same "structure" as "let's make semicolons optional so that people shouldn't have to care".

[12:59] <moritz> I mean, if you cut'n'paste-refator perl code, you also have to take care that the right imports are in the paste scope

[12:59] <masak> decision*

[13:00] *** SmokeMachine left
[13:01] <moritz> in some sense it violates the principle of lexical overridability

[13:01] <moritz> you can declare a lexical of the same name in an inner scope

[13:01] <moritz> but you cannot use it as a keyword in an inner scope

[13:02] <masak> hm, doesn't it simply imply that the keywords come from a "setting", as it were?

[13:02] <masak> I mean, you cannot un-override lexicals from the setting, either.

[13:02] <moritz> again, not sure how much of a practical problem it is, but it feels like it taints the beauty of the concept

[13:02] <moritz> don't we have 'hides' and such stuff?

[13:03] <masak> have it where?

[13:03] <moritz> in Perl 6

[13:03] <moritz> r: constant uc = 'FOO'; say uc 'bar';

[13:03] <p6eval> rakudo 0dda4c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/g2veDL428H:1␤------> [32mconstant uc = 'FOO'; say uc [33m⏏[31m'bar';[0m␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infix stopper␤        statement end␤        statement mod…

[13:04] <moritz> a lexical constant (which is like a mini-keyword) can still override an outer lexical sub of the same name

[13:04] <moritz> your language would need a similar syntax for re-enabling the keyword usage of a symbol in an inner scope to do the same

[13:07] *** cognominal left
[13:13] *** shinobicl joined
[13:14] *** cognominal joined
[13:16] <masak> I don't see why.

[13:16] *** SamuraiJack__ left
[13:17] <masak> once you declare a lexical variable, you forfeit all claims in that scope to the underlying keyword.

[13:18] <masak> to me, it doesn't violate lexical overridability, it just makes keywords adhere to the same rule.

[13:18] <masak> it's like the 'if' keyword says, "an 'if' variable? well, then you clearly don't need me in this scope! hmpf!"

[13:19] <masak> what is that if not lexical overridability?

[13:19] <masak> if you consider the use of if-the-keyword as a kind of declaration, too, then... oh. I see your counterargument now. :)

[13:20] <masak> yes. that's the bad part.

[13:20] *** cognominal left
[13:23] *** viewview left
[13:25] <moritz> well, you could allow 'keyword if;' in analogy to 'var if;'

[13:26] <masak> yes, but that still doesn't make scopes/routines easily movable across the source.

[13:27] <masak> the bad case happens when you move a block that uses the keyword into a block that declares the variable.

[13:28] *** cognominal joined
[13:30] <moritz> well, then you'd need 'keyword if;' at the start of the block

[13:31] <masak> right. and you didn't before the refactor.

[13:32] <masak> so in short, the reserved words policy makes it harder to do such refactors of code.

[13:32] <moritz> well yes. Just like you might have an outer variable declared that you need to move/copy along with the code

[13:32] *** cognominal__ joined
[13:33] *** cognominal left
[13:34] *** cognominal__ left
[13:34] *** cognominal joined
[13:35] *** dayangkun joined
[13:44] <masak> I guess.

[13:44] <masak> I also guess a refactoring tool could DTRT and insert the 'keyword if;' statement for you.

[13:44] <masak> in conclusion, idea not dead yet! :)

[13:45] *** shinobicl left
[13:45] <moritz> no, not dead at all

[13:45] <moritz> but it's not flawless

[13:48] <masak> right.

[13:48] <masak> errand &

[13:50] *** shinobicl joined
[13:53] <FROGGS> nr: print "a" ~~ /./

[13:53] <p6eval> niecza v24-18-gaf64300:  ( no output )

[13:53] <p6eval> ..rakudo 0dda4c: OUTPUT«a»

[13:54] *** dayangkun left
[13:55] <FROGGS> sorear: thats my patch, it is a 1:1 copy&pasto from rakudo: https://gist.github.com/FROGGS/0a6f8e2d4053fb0ba5d0

[13:56] <FROGGS> running the spectest right now, but I'm not sure if gist's signature is right for niecza, since I dont see anything similar

[13:56] *** kaleem left
[13:57] *** colomon left
[14:00] *** [particle] joined
[14:01] *** rindolf joined
[14:03] *** [particle]1 left
[14:06] *** dayangkun joined
[14:11] <moritz> http://lwn.net/SubscriberLink/534758/bcb45583bc25268d/ # whoa, hardware support for transactional memory, and a patch for gnu libc to use it

[14:12] *** FROGGS left
[14:12] <diakopter> cool

[14:13] <diakopter> I wonder whose subscriber link that is ;)

[14:13] *** PacoAir joined
[14:13] <moritz> dunno, was posted on hackernews

[14:14] <rindolf> Hi all.

[14:14] <rindolf> TimToady: here?

[14:14] <moritz> but lwn is explicitly fine with sharing such links

[14:14] *** cosimo left
[14:14] <diakopter> rindolf: it's 6:15 a.m. in California

[14:14] *** cosimo joined
[14:14] <rindolf> diakopter: ah, I see.

[14:14] <rindolf> diakopter: well, I shall wait.

[14:15] <diakopter> you have a question?

[14:15] <rindolf> diakopter: I may be able to meet some friends for some food and drink and chat in downtown Tel Aviv in 18:00.

[14:15] <diakopter> _._.

[14:16] * diakopter laughs a little and wonders what that means

[14:16] <rindolf> diakopter: it's about philology, so I want Mr. Wall who has studied it.

[14:17] * diakopter decides to presume you meant "chat" as "chat with TimToady online"

[14:18] *** cognominal left
[14:18] <rindolf> Other people here may be able to help too, but it's off-topic here.

[14:18] <rindolf> And pretty insane.

[14:18] <rindolf> diakopter: well, chat with some friends in real life.

[14:19] <rindolf> diakopter: but orthogonally I want to chat with TimToady 

[14:19] <rindolf> diakopter: the people on #linguistics are a nasty lot.

[14:19] <diakopter> interesting

[14:19] *** pmurias joined
[14:20] <diakopter> maybe they're not people

[14:22] *** atrodo joined
[14:22] <pmurias> swarley: re loading of yarv bytecode, I skimmed through the ruby code which loads the instructions, and I should be able to create a C extension for ruby which creates it from a more compact format (bytecode of some sort)

[14:22] <rindolf> diakopter: they are not bots.

[14:23] <rindolf> diakopter: but they are obscene.

[14:23] <rindolf> diakopter: and they kicked me out of it.

[14:23] <pmurias> swarley: but I don't think it's worth doing that till you can compile a lot of QAST into yarv bytecode, as I doubt it will be the bottleneck

[14:23] *** cognominal joined
[14:23] <rindolf> diakopter: they think they are superior to me.

[14:23] <moritz> rindolf: but I'm sure they didn't kick you out just because they were obscene

[14:24] <moritz> sometimes when I don't get along well with people, it's not because they are nasty, but because we have an impedance mismatch

[14:25] <PerlJam> There's *always* an impedance mismatch ... you just have to diddle with the magnitude until you get a local minimum.

[14:25] <masak> also, in many cases when someone comes in saying "I couldn't get what I wanted on channel Y, could someone here on channel X help me", the topic is definitely off-topic and better handled in privmsg :)

[14:26] <moritz> PerlJam: sure, I should have said "because the impedance mismatch is too large"

[14:26] <moritz> happend with jaffa4 and me for a few times, for example

[14:27] <PerlJam> masak: you know that #perl often gets "you guys are the smartest people I know, help me with <X>"  where <X> is often regex, but also other things not-perl.

[14:27] *** kaare_ joined
[14:27] <PerlJam> ergo #perl is permanently off-topic ;)

[14:28] <masak> oh, that kind of request somehow feels more OK.

[14:28] <masak> because then there isn't necessarily another channel where the discussion should've been held.

[14:29] <Juerd> Interesting: http://blogs.perl.org/users/ovid/2013/02/perl-7.html

[14:30] <PerlJam> Juerd: crazy :)

[14:30] *** colomon joined
[14:32] *** dayangkun left
[14:32] *** dayangkun joined
[14:33] <arnsholt> rindolf: What kind of philology? (I'm not a real philologer, but I pretend to be one at times)

[14:33] <masak> ah, Juerd++ beat me to it. :)

[14:33] <nwc10> I haven't yet worked out what (if any) substantive differences there are between what people *say* they want, and Perl 6. In as much as, a shipping Perl 6 would seem to satisfy all the desired things, unless the desire is that "It's not called 'Perl 6'"

[14:34] <nwc10> desired feature list is usually pretty close to what Rakudo already mostly does.

[14:34] <arnsholt> I think a desideratum is "lacks the painful backstory of Perl 6"

[14:34] <nwc10> yes

[14:34] <arnsholt> Or whatever word you think is better than painful

[14:34] <nwc10> but the problem is if you start from here

[14:34] <nwc10> pretty much any approach you take has massive parallels to how Perl 6 started

[14:34] <nwc10> and it's not clear how it's going to turn out differently.

[14:35] <masak> I almost replied to https://twitter.com/OvidPerl/status/299146841407242243 asking "The problem of there only being a finite number of positive integers for the minor version?", but decided that was too sarcastic to be posted on Twitter.

[14:35] *** Targen left
[14:35] <nwc10> including (*key*) not taking a long time

[14:36] <nwc10> if you're starting from "no implementation" *and* "no design" you've got a large amount of work ahead of you.

[14:36] <arnsholt> masak: That'd be a pretty amusing reply, actually =)

[14:37] * PerlJam notes that none of the comments thus far actually address Ovid's question

[14:37] <nwc10> possibly the absence of comments can be used to infer an answer

[14:37] <masak> arnsholt: nah, better not :)

[14:38] <diakopter> v20 makes it sound old, like Chrome

[14:39] <masak> whereas 7 is young? :P

[14:39] <nwc10> none of this actually makes the language any better, or the internals any easier to curate.

[14:39] <nwc10> unlike Perl 6

[14:39] <diakopter> Microsoft (R) C/C++ Optimizing Compiler Version 16.00.40219.01 for x64

[14:40] *** benabik joined
[14:40] *** stopbit joined
[14:42] <arnsholt> masak: Yeah, it might start a massive flamewar ;)

[14:43] *** skids left
[14:43] <perigrin> Perl5 *is* old though.

[14:43] <arnsholt> That it is

[14:43] <perigrin> Older than Chrome (which is on v24 currently)

[14:44] <diakopter> .....

[14:45] *** bluescreen10 joined
[14:45] <diakopter> in many circles, newer is better.  In other many circles, older is better.

[14:46] <diakopter> (not always of course, just generally not knowing anything else)

[14:47] <arnsholt> There's a sweet spot (different for different applications) I think

[14:48] <diakopter> of course, once you actually learn about the product instead of just knowing its version number or age

[14:51] <rindolf> arnsholt: hi.

[14:51] <rindolf> arnsholt: sorry for the late response - well, it's a general question.

[14:51] *** gfldex left
[14:52] <rindolf> arnsholt: <rindolf>       I have a question about philology: is it a commo

[14:52] <rindolf> nly accepted theory that various artworks (such as the Bible, the Greek Mytholog

[14:52] <rindolf> y, Vampire stories, comic books, etc.) were used as conduits for passing message

[14:52] <rindolf> s between the intellectual elite of the world? (Like: Semites -> Jews -> Vampire

[14:52] <rindolf> s -> Filmmakers -> Hackers -> Geeks)

[14:53] *** gfldex joined
[14:53] <arnsholt> I think classing mythology like the Bible and the Greco-Roman pantheon as elite phenomena is incorrect

[14:54] <rindolf> arnsholt: OK, but in general?

[14:54] <diakopter> omg

[14:54] <arnsholt> Not sure, really

[14:54] <rindolf> arnsholt: ah.

[14:54] <arnsholt> Depends a bit on what you mean with the passing of messages between elites

[14:54] <rindolf> arnsholt: I heard something like that about http://en.wikipedia.org/wiki/The_Protocols_of_the_Elders_of_Zion

[14:54] <rindolf> arnsholt: well, maybe see http://www.shlomifish.org/humour/Star-Trek/We-the-Living-Dead/ .

[14:54] <clkao> w/win 31

[14:55] <rindolf> clkao: hi, what's new?

[14:55] <diakopter> when were Semites, Jews, Vampires, Filmmakers, Hackers, or Geeks the intellectual elite?

[14:55] <rindolf> clkao: long itme.

[14:55] <clkao> apparently, my keyboard!

[14:55] <clkao> is now

[14:55] <clkao> is new

[14:55] <arnsholt> Heh. clkao has lots of windows open =)

[14:55] <rindolf> diakopter: well, they disobeyed the rules and challenged them. Compromised on quality of delivery, while making the quality of the content better.

[14:56] <diakopter> Wat.

[14:57] <rindolf> diakopter: I mean like using E-mail or Usenet instead of, say, typesetting. Or even the print instead of hand-written books.

[14:57] <rindolf> diakopter: now the Roman Catholic pope has a twitter account. :-D

[14:58] <rindolf> diakopter: Gutenberg's print invention ended up producing lesser quality than hand-written sheets.

[14:58] <rindolf> diakopter: and was met with contempt.

[14:59] <rindolf> diakopter: but it enabled the protestant revolution.

[14:59] *** aindilis left
[14:59] <diakopter> rindolf: was this your question in #linguistics? 

[14:59] <rindolf> diakopter: I flooded it.

[14:59] <rindolf> diakopter: yes, that was my question.

[14:59] *** aindilis joined
[14:59] <masak> and they kicked you? outrageous.

[14:59] <rindolf> diakopter: Ayn Rand held Mickey Mouse and Walt Disney in contempt in The Fountainhead.

[14:59] <rindolf> masak: well, after asking me obscene questions.

[15:00] <diakopter> your question is obscene

[15:00] <rindolf> diakopter: because it was easier to create animations than it was to produce live actor films.

[15:00] <masak> I don't know what the question is. it just looks very confused.

[15:00] <diakopter> "is it a commonly held theory...?"

[15:00] <rindolf> masak: OK, maybe read http://www.shlomifish.org/humour/Star-Trek/We-the-Living-Dead/ .

[15:00] <diakopter> in other words, "I'm proponing this"

[15:01] <masak> proposing*

[15:01] <arnsholt> rindolf: To say that "the terran alphabet" (Latin script, I assume) was invented for Hebrew isn't very right =)

[15:01] <diakopter> proponing?

[15:01] <rindolf> arnsholt: well, back then Hebrew was the same as Phoenician.

[15:01] <masak> diakopter: "proponent", "proposing", "proposition".

[15:02] <brrt> rindolf, also, it is not really a commonly held theory

[15:02] <rindolf> arnsholt: I call it collectively the Hebrew language.

[15:02] <rindolf> brrt: ah.

[15:02] <arnsholt> Still, Latin script is very far removed from both Hebrew and Phoenician

[15:02] *** cognominal left
[15:02] <rindolf> brrt: more like a grand unified conspiracy theory that people think is silly?

[15:03] <masak> rindolf: I'm not being obscene to you because of your question. neither is anyone else here. that doesn't mean I am capable of -- or interested in -- taking the question seriously.

[15:03] <brrt> well, yes, and one that is popular in the more extremist circles for that

[15:04] <rindolf> brrt: OK, thanks.

[15:04] <rindolf> masak: they were obscene from different reasons.

[15:04] <rindolf> brrt: OK, thanks.

[15:04] <rindolf> brrt: well, perhaps it was an advancement of memes.

[15:05] <[Coke]> This all seems very offtopic to me.

[15:05] <arnsholt> But no, I don't think anyone seriously believes that expressions of culture/art are conciously used to pass ideas between culturally distinct groups

[15:05] <masak> huh. http://dictionary.reference.com/browse/propone exists. diakopter++

[15:05] <masak> apparently it's Scottish.

[15:05] *** benabik left
[15:05] <arnsholt> But this is more properly a question of sociology or social anthropology I think, rather than philology

[15:06] <PerlJam> [Coke]: Ever hear the expression "herding cats"?  :-)

[15:06] <arnsholt> [Coke]: That would be because it's off topic =)

[15:06] <brrt> well, if you want to discuss perl6, better finish that compiler then, me boys ;-)

[15:06] <diakopter> arnsholt: it's more properly a question of psychiatry

[15:06] <rindolf> Like “The Gods help them that help themselves” -> “Trust in God, but tie your camel” -> “Reality to be conquered must be obeyed” -> “If you mountain does not come to Muhammad…” -> “God helps them that help God help them.”

[15:06] <masak> [Coke]: I agree. but more importantly, it's a silly/boring topic.

[15:06] <rindolf> People building on each other's work.

[15:06] <rindolf> Like open source. :-)

[15:06] *** [Coke] left
[15:07] *** atrodo left
[15:07] <rindolf> Well, such hacktivity existed in the Jewish Midrash (= "study") too.

[15:07] * diakopter requests a respite from the [OT]

[15:07] <masak> +1

[15:07] <rindolf> OK,

[15:07] <rindolf> No more offtopic.

[15:08] * masak didn't want to be the first to propone it :)

[15:08] <rindolf> So Perl 6?

[15:08] <rindolf> masak: :-)

[15:08] <brrt> this language, yeah

[15:08] <rindolf> What is it?

[15:08] <masak> yes ktxplz

[15:08] <PerlJam> Perl 6 is awesome!

[15:08] <rindolf> Is it dead?

[15:08] *** cognominal joined
[15:08] <brrt> perl6 is not dead

[15:08] <masak> rindolf: what are you, a troll?

[15:08] <brrt> it is an idea

[15:08] <brrt> it cannot die

[15:08] <rindolf> Perl 6 makes the sun shine and the birds sing.

[15:08] <rindolf> masak: sorry, I'll shut up.

[15:08] <diakopter> masak: some trolls don't know they're trolls

[15:08] <rindolf> masak: it was a reference to "Perl is Dead".

[15:08] <masak> rindolf: until you have something nice to say :)

[15:08] <rindolf> masak: sure.

[15:09] <brrt> or not nice, but it had better be a bug report then

[15:09] <diakopter> masak: I can say that, having been one unknowingly myself at least several times

[15:09] <nwc10> Oooh, FROGGS has a pretty github avatar: https://github.com/rakudo/rakudo/commits/nom

[15:09] <masak> diakopter: oh man, what was the name of that guy a couple years ago? :)

[15:09] <masak> diakopter: yes, you're completely right.

[15:09] <PerlJam> Did you guys see Ovid's comment on his own post?  ``I just got back from FOSDEM and heard, again, for the umpteenth time, that since Perl had 4 "major" releases (1,2,3,4) in its first few years and hasn't had a major release since Perl 5 about 20 years ago, it's clearly "dead".''

[15:09] <diakopter> trying to remember

[15:10] <PerlJam> That's actually the first time I've heard quite that spin on it.

[15:10] <masak> diakopter: k23z__

[15:10] <diakopter> that's, like, the by far predominant viewpoint in industry, afaict

[15:10] <masak> diakopter: http://irclog.perlgeek.de/perl6/2010-03-06#i_2071605

[15:10] <brrt> as in, the version of perl is asymptotically approaching six

[15:10] <diakopter> no, it's just viewed as in maintenance mode only

[15:11] <PerlJam> because the major version number isn't changing?

[15:11] <diakopter> definitely

[15:11] <PerlJam> that's bizarre.

[15:11] <diakopter> not bizarre at all

[15:11] <masak> PerlJam: to me it just shows that you can spin anything any which way.

[15:12] <masak> "we do releases" -- "yeahbut I mean *real* Scotsman releases!"

[15:12] <masak> "Perl 5 keeps evolving" -- "yeahbut I mean major versions!"

[15:12] <nwc10> Ruby is dead too?

[15:12] <brrt> nwc10 beat me to it

[15:12] <diakopter> ruby is still the new hotness

[15:12] <brrt> python as well, since nobody uses 3

[15:12] <brrt> ruby was so the new hotness 5 years ago

[15:12] <brrt> nobody cares today

[15:12] <brrt> (or maybe i'm just bored easily)

[15:12] <nwc10> they're going to care again pretty soon if their Rails app gets pwned.

[15:13] <brrt> if anything, i'd say scala was the new hotness

[15:13] <nwc10> Scala is taking the crown from Node.js?

[15:13] <brrt> node.js is a dangerous tool

[15:13] <diakopter> node is also the new hotness

[15:13] <brrt> a fantastically fun powerful tool

[15:13] <brrt> but not a really good tool for most developers

[15:14] <nwc10> an event loop - is it single threaded?

[15:14] <diakopter> yes.

[15:14] <brrt> scala has all the java enterprise aura arround it

[15:14] <nwc10> cool. So you have to do co-operative multi tasking. Or you block. Ace.

[15:14] <brrt> nwc10, and what is more, where is your catch block?

[15:14] <diakopter> nwc10: yup.

[15:15] <nwc10> Wasn't pre-emptive one of the selling points of Win95 over Win 3.1?

[15:15] <diakopter> well you don't block, you spin in your event loop waiting for IO or whatever

[15:15] *** [Coke] joined
[15:15] <brrt> now, multiprocessing node.js, that could be made to work

[15:15] <brrt> (and it is , in fact)

[15:15] <diakopter> not with shared memory

[15:16] <brrt> true

[15:16] <diakopter> which is the crucial bit

[15:16] <nwc10> I remember Win95 when it was new. This is troubling :-)

[15:16] <nwc10> although it would be more troubling if I couldn't remember it :-)

[15:16] <brrt> diakopter, how is it the crucial bit? php doesn't share memory and it is pretty popular

[15:17] <diakopter> I don't recall reading about anyone doing big data or web *servers* in php

[15:17] <PerlJam> or biophp

[15:17] <diakopter> but of course Java excels at those

[15:17] <brrt> PerlJam…. you have ruined my dreams

[15:18] <pmurias> diakopter: there's bioperl and the perl 4 threading model isn't something to be particularly proud of 

[15:18] <pmurias> * perl 6

[15:18] <PerlJam> brrt: dream about NumPHP (similar to NumPy) instead.

[15:18] <pmurias> sorry 

[15:18] <pmurias> * perl 5

[15:18] <brrt> fortunately it still seems pretty small

[15:18] <diakopter> pmurias: I'm pretty sure I was talking about php

[15:19] <brrt> anyway, threading is not important

[15:19] <PerlJam> brrt: except that everyone wants it (or thinks they do)

[15:19] <diakopter> they want it.

[15:20] <timotimo> i want to think i do!

[15:20] <diakopter> just because it's not best for every application it will be used for doesn't mean it shouldn't be massively robust

[15:21] <brrt> anyway, when people have burned their hands on node.js, they will move onto the next hot thing

[15:22] <brrt> my guess is that next hot thing is going to be scala

[15:22] <timotimo> depend on wether or not rakudo runs on the jvm by that time :P

[15:23] <brrt> i'm not optimistic that the typical perl6 will gain a enterprise aura anytime soon :-)

[15:23] <brrt> which is ok

[15:24] <timotimo> ;)

[15:26] <masak> I don't much care. I'll be a happy to be massively useful and expressive, and serving a slowly growing community of happy enthusiasts.

[15:26] <nwc10> if one has the Perl 6 version of B::Deparse::Scala, does it matter?

[15:26] <nwc10> just decompile the Perl 6 code into whatever is politically acceptable, and ship that

[15:28] *** rindolf left
[15:29] <GlitchMr-> For me, Perl 6 is innovative, just like Smalltalk.

[15:29] <PerlJam> that was Parrots "killer-app"  ... the promise of multiple languages interacting smoothly.

[15:29] <GlitchMr-> Junctions are awesome, and I really would like to see them in other programming languages.

[15:29] <brrt> PerlJam, we can still make that work :-)

[15:30] <PerlJam> brrt: indeed, I hope so.

[15:31] <brrt> my personal hope would be to consolidate the openbio communities

[15:32] <GlitchMr-> > my $ab = /ab/ & /a.?b/

[15:32] <GlitchMr-> all(, )

[15:32] <GlitchMr-> Close enough

[15:34] <GlitchMr-> rn: my $ab = /ab/ & /abc/; ('abc' ~~ /($ab)/).perl.say; $/.gist.say;

[15:34] <p6eval> rakudo 0dda4c: OUTPUT«Can not get attribute '$!pos' declared in class 'Cursor' with this object␤  in regex  at /tmp/2WuHVVopPN:1␤  in regex  at /tmp/2WuHVVopPN:1␤  in method ACCEPTS at src/gen/CORE.setting:10743␤  in block  at /tmp/2WuHVVopPN:1␤␤»

[15:34] <p6eval> ..niecza v24-18-gaf64300: OUTPUT«Match␤Match()␤»

[15:34] <GlitchMr-> rn: my $ab = /ab/ & /ab/; ('abc' ~~ /($ab)/).perl.say; $/.gist.say;

[15:34] <p6eval> rakudo 0dda4c: OUTPUT«Can not get attribute '$!pos' declared in class 'Cursor' with this object␤  in regex  at /tmp/QYqcsyT1rW:1␤  in regex  at /tmp/QYqcsyT1rW:1␤  in method ACCEPTS at src/gen/CORE.setting:10743␤  in block  at /tmp/QYqcsyT1rW:1␤␤»

[15:34] <p6eval> ..niecza v24-18-gaf64300: OUTPUT«Match␤Match()␤»

[15:35] <GlitchMr-> How should this work?

[15:39] <diakopter> masak: that nuclear blackmail day is interesting to backlog

[15:39] <masak> diakopter: yes.

[15:39] <masak> diakopter: I was in a hotel room with jnthn and pmichaud.

[15:39] <masak> I remember the scene vividly.

[15:43] *** b1rkh0ff joined
[15:56] *** jeffreykegler joined
[16:00] *** kaleem joined
[16:00] <masak> 'We are the Perl 6 community. We have a collective neurosis about "production ready" and the exact relation to Perl 5. if you can navigate that, you'll find we're a nice bunch.' :)

[16:02] <nwc10> well, how much infrastructure is actually running on Perl 6 yet?

[16:02] <diakopter> out of what set of infrastructure?

[16:03] *** kaleem left
[16:03] <masak> Rakudo is running on mostly Perl 6 and nqp.

[16:03] <masak> there are some custom parts written in C, IIRC.

[16:03] <nwc10> well, I mean thinks like the logger on this channel isn't Perl 6

[16:03] <nwc10> things.

[16:03] <nwc10> and yes, I keep commenting on that as an exaple

[16:03] <nwc10> I still can't type, can I?

[16:04] <masak> that is a good example.

[16:04] <nwc10> the evalbot itself is Perl 5?

[16:04] <diakopter> yes

[16:04] <masak> I didn't say we're production ready -- I said we have a neurosis about "production ready" :)

[16:05] <masak> but as far as I can see, it's getting increasingly possible/realistic to replace various bits of Perl 5 infrastructure with Perl 6.

[16:05] <diakopter> github.com isn't using Perl 6

[16:05] <masak> it'd do us good, too, because it'd catch more ecosystem regressions early.

[16:05] <diakopter> freenode isn't using Perl 6

[16:05] <masak> diakopter: neither are they using Perl 5, AFAIK.

[16:06] <masak> I don't think I see your point.

[16:07] <diakopter> well, I was exploring the bounds of the set of infrastructure, while also pointing out that those will never run Perl 6

[16:07] <nwc10> agree

[16:08] <masak> and that's fine, of course.

[16:08] <nwc10> but the useful niche that Perl 6 certainly seeks to fill is that currently occupied by Perl 5

[16:08] <diakopter> I'm not sure I agree

[16:08] <nwc10> so at least the local infrastructure currently written in Perl 5 really ought to be switched to dogfood

[16:08] <nwc10> OK, the niche that Perl 5 competes in?

[16:09] <diakopter> no, I've begun to suspect their current/prospective niches don't overlap very much

[16:10] *** cognominal left
[16:10] <diakopter> note: the evalbot ran on pugs for a long time

[16:11] <masak> it certainly wouldn't hurt to have evalbot/irc logs in Perl 6.

[16:11] <masak> there's still the small matter of porting them, of course :)

[16:11] <masak> perhaps a good topic for a hackathon?

[16:11] <nwc10> why wait that long?

[16:11] <diakopter> none of the implementations can support it without extensive C hacking, due to the signal catching/sending

[16:12] <nwc10> aha, interesting. thanks

[16:12] <diakopter> pugs' evalbot didn't have a timeout killer, I seem to recall

[16:13] <diakopter> which is definitely necessary nowadays

[16:13] <diakopter> things run forever.. forever

[16:14] *** fgomez joined
[16:14] <diakopter> perl 5 supports signals, and magical wonderful abilities to interact with child processes

[16:15] <diakopter> nwc10: (I'm not attempting to inform, there ;)

[16:15] <nwc10> no, but that's interesting. In that, if you start trying to use Rakudo for something other than "building Rakudo", you discover holes.

[16:18] <PerlJam> nwc10: that's why we need more people using Rakudo to do ... stuff.

[16:18] <masak> nwc10: I agree.

[16:19] <diakopter> there are plenty of holes; I believe the constraints and uncertainties of parrot have been making it uncomfortable to contribute to fill those holes

[16:21] <diakopter> also, extreme dearth of human resources

[16:22] <diakopter> and the -Ofun prioritization of actually implementing all of Perl 6 syntax and semantics before its native library/functions

[16:23] <diakopter> (in general)

[16:26] <masak> well, the first step to fixing that is to put a collective focus on it.

[16:26] <masak> signals -- I hadn't thought of that before. of course we need those.

[16:30] <brrt> masak, the problem with that, again is the 'collective' part

[16:32] *** skids joined
[16:32] <masak> yes and no. surely we can collectively set goals.

[16:32] <masak> the best example of which, I believe, is Rakudo Star.

[16:32] *** kivutar left
[16:33] * diakopter reads the docs on signals/io on parrot.org and snippets of Perl 6 and Parrot Essentials, and find massive contradiction with the current codebase

[16:34] <diakopter> (importantly, the parrot.org docs)

[16:35] <brrt> that doesn't surprise me in the least

[16:35] <brrt> organising people arround a goal that is vague now is hard

[16:35] <brrt> especially as the parrot codebase is painful at times

[16:35] <diakopter> Perl 6 and Parrot Essentials says all IO is async in parrot. The docs say there is both synchr and async IO apis. The codebase reflects only the synchronous

[16:36] *** SunilJoshi joined
[16:37] <kresike> bye folks

[16:37] *** kresike left
[16:38] <masak> diakopter: dan was a big proponent of async IO, and pushed Parrot in that direction in the early days: http://www.sidhe.org/~dan/blog/archives/000441.html

[16:39] <masak> diakopter: the only thing async IO in Parrot ever gave me were output and error messages being out of order in the early days of Rakudo :/

[16:39] <masak> in her FOSDEM talk, lizmat said "at this point, I think it's safe to call Parrot an 'Edsel'"

[16:44] <diakopter> there's not even a way to invoke a child process without waiting for it to end

[16:48] <brrt> masak, what is an edsel?

[16:49] <masak> brrt: Wikipedia has a good article.

[16:49] <diakopter> http://lmgtfy.com/?q=Edsel  :)

[16:53] *** SamuraiJack__ joined
[16:56] *** hoelzro is now known as hoelzro|away

[16:58] * brrt had assumed it was some kind of word and had fed into translate :-)

[16:59] <geekosaur> no, just a reference to a bit of US-based marketing infamy

[17:00] <colomon> http://docs.topazruby.com/en/latest/blog/announcing-topaz/

[17:00] <PerlJam> wow.

[17:01] <brrt> interesting

[17:01] *** brrt left
[17:02] <colomon> that makes it sound like RPython might already be close to what Parrot was/is trying to achieve?

[17:06] <diakopter> "By separating concerns in this way, we intend for our implementation of Python - and other dynamic languages - to become robust against almost all implementation decisions, including target platform, memory and threading models, optimizations applied, up to to the point of being able to automatically generate Just-in-Time compilers for dynamic languages.

[17:06] <diakopter> "

[17:07] <pmurias> diakopter: ping

[17:07] <diakopter> pong in pm

[17:09] *** atrodo joined
[17:14] *** am0c joined
[17:17] *** zby_home joined
[17:19] <[Coke]> (perl6 and parrot essentials) that book is super old. I wouldn't trust it.

[17:19] <diakopter> I wasn't attempting to trust it, just to point out how the goals have changed

[17:21] *** SunilJoshi left
[17:28] *** SunilJoshi joined
[17:40] *** benabik joined
[17:41] <masak> Topaz! \o/

[17:43] <arnsholt> Wasn't that the name of a Perl reboot effort as well?

[17:43] *** Chillance joined
[17:45] <masak> yes.

[17:45] <masak> chip's.

[17:45] <masak> http://www.perl.com/pub/1999/09/topaz.html

[17:45] <masak> I guess the name is semi-obvious :)

[17:50] <diakopter> the ruby topaz was originally named rupypy

[17:52] *** SunilJoshi left
[17:52] *** SunilJoshi joined
[17:54] <geekosaur> shoulda been rucoco

[17:54] <diakopter> I don't see how topaz can support threads (on its TODO feature list) when rpython doesn't support OS threads

[17:55] <TimToady> .oO(rakuku)

[17:58] <TimToady> 楽区 I guess "pleasure district"  :)

[18:00] <TimToady> regarding keyword policy, p6 has several stories to tell

[18:00] <TimToady> first of all, if you cut a passage from one language and insert in a passage of a different language, you ought to get what you deserve

[18:00] <TimToady> it's like inserting some Swahili into a passage of German...

[18:00] <masak> *nod*

[18:00] <TimToady> second, we have sigils

[18:01] <TimToady> on our nouns, which helps

[18:01] <TimToady> third, our statement-level keywords tend to require whitespace after them

[18:01] <TimToady> fourth, we give special meaning to if()

[18:02] <TimToady> the main place I see this cut-and-paste difficulty, actually, is when people change a multi-line to a single line for IRC, and always forget the semicolons

[18:02] <pmurias> diakopter: https://us.pycon.org/2013/schedule/presentation/37/

[18:03] <diakopter> not OS threads

[18:03] *** daxim left
[18:03] <TimToady> we really need threads that don't block each other on IO, such as Go provides

[18:03] <diakopter> it uses STM emulation on top of OS threads

[18:05] <diakopter> also, elsewhere it says *that* version of pypy is several times slower at everything than normal pypy

[18:05] <TimToady> but for copy-paste, it would be nice if there were a way to annotate a snippet with the pedigree of the language it is using, and diff it with the pedigree of where you're pasting

[18:05] *** dakkar left
[18:06] <TimToady> or, failing that, run it through a translator, like when you paste the Swahili into the German it automatically translates it for you

[18:06] <TimToady> diakopter: does rpython still use a GIL?

[18:07] <diakopter> there is a version that doesn't, the much slower one that implements STM

[18:07] <timotimo> TimToady: the GIL that's used for pypy-python is written in rpython, not forced by the rpyhon architecture itself

[18:08] <timotimo> it is, in fact, a variable in he pypy-python source code that says "python-gil.wait()" and such.

[18:08] <TimToady> so that is one of the things they've "parameterized"...  that seems goodish

[18:09] <timotimo> i agree. i'm a big fan of the pypy project

[18:09] <TimToady> I'm sure porting NQP to it would discover some ways they've failed to parameterize it :)

[18:10] *** kivutar joined
[18:10] <timotimo> feel free to try. did you read what fijal had to say when he came over?

[18:10] <TimToady> er, that's not my job :)

[18:11] <TimToady> and yes, I did

[18:12] <TimToady> I'm actually keeping up with the current backlog currently, and even starting to catch up with my old backlogging from December these days

[18:12] <timotimo> the thought of having to implement 6model, qregex, grammars, ... kind of keeps me from trying.

[18:12] <diakopter> you don't need to implement grammars

[18:12] <diakopter> but 6model and a regex compiler, yes

[18:14] <diakopter> I'm really confused as to how fijal can claim that implementing nqp in rpython would be easier and run faster than on the JVM

[18:15] <timotimo> i can see how it could maybe run faster, because you can make the semantics match 100% if you write your own VM, but still ...

[18:16] <diakopter> can rpython declare new classes with compact storage at runtime? 6model (p6opaque) needs that

[18:16] <diakopter> JVM can do it

[18:16] <pmurias> it's optional

[18:17] <diakopter> what's optional?

[18:17] <pmurias> you can implement 6model without compact storage

[18:18] <timotimo> i see no reason why it shouldn't be able to. pypy-pythons classes are implemented in rpython, too. as is the foreign function interface. rpython just compiles down to C, i believe you can store stuff compactly without too much trouble.

[18:18] <diakopter> it compiles down to C at runtime?

[18:18] <pmurias> it's jited

[18:19] <timotimo> no, it's not

[18:19] <timotimo> you may misunderstand or be confused by the different layers

[18:19] <pmurias> sorry

[18:19] <timotimo> so, you write your interpreter, compiler, virtual machine all in rpython

[18:19] <diakopter> (that was a rhetorical question)

[18:20] <timotimo> then that gets translated to C code, a GC and JIT compiler will be plugged in for you made specifically for the stuff you wrote in rpython

[18:20] <timotimo> at that point, all you have is a program that's GC'd and jitted for you. you may as well write a compiler that translates stuff into C, but that's not the point

[18:20] <timotimo> the point is that the jit is created with the full knowledge of your rpython source, so it can trace the whole program for you, given a few hints

[18:21] <timotimo> i hope that made some sense?

[18:22] *** uvtc joined
[18:22] *** pupoque joined
[18:22] <diakopter> NQP needs control exceptions; can rpython provide that? (obviously CLR, JVM, JS can)

[18:23] <timotimo> it would not be a thing for rpython to provide, you would implement that concept using rpython

[18:23] <timotimo> it does allow throwing exceptions around, though, like regular python

[18:23] <diakopter> ok

[18:24] <timotimo> i think the way it's supposed to be is to implement "something like the JVM" in rpython and have that supply things like control exceptions and compact storage classes

[18:24] <TimToady> but does it allow separation of stack unwind from the throw?

[18:24] <TimToady> in p6 we can throw and then decide not to

[18:25] <TimToady> not to unwind

[18:25] <TimToady> depending on what the handlers say

[18:25] <diakopter> well, that's implemented on top of the VMs since contexts and frames are heaped

[18:26] <timotimo> you have reached the end of my knowledge, i'm afraid. i think fijal would be happy to answer a few more questions, though

[18:27] <timotimo> i must admit that the amount of layers and the interactions between them throws me off quite often

[18:28] <pmurias> TimToady: the way I seperate the stack unwind from the throw in nqp-js is that I keep my own exception handler stack in a function argument and use the javascript exceptions just for unwinding

[18:29] <TimToady> makes sense

[18:30] <timotimo> i would *think* that the app-level stack would be something that's an object that's manually managed by the interpreter-level code (the code written in rpython), so it should be able to do stack unwinding easily

[18:30] <timotimo> as an additional data point, pypy has a stackless transformation, which does trampolining and moving parts of the stack onto the heap and doing re-transplantations and i don't really understand most of it

[18:31] <timotimo> it used to be able to produce a "stackless python" compatbile python interpreter. it now does so by default

[18:31] <TimToady> stackless is good for interop

[18:34] <uvtc> masak: saw your "where's my flying car" slides from a link posted here (in the logs). Glad to find it, thanks. Nice examples in there.

[18:35] <masak> thanks.

[18:35] *** SamuraiJack__ left
[18:35] <masak> I'm thinking of uploading it on Slideshare.

[18:35] *** benabik left
[18:40] *** Targen joined
[18:40] <uvtc> masak: Ah, was trying to remember where stevan_ put his recent presentation. It was speakerdeck.

[18:42] <stevan_> uvtc: https://speakerdeck.com/stevan_little/perl-is-not-dead-it-is-a-dead-end

[18:43] <stevan_> speakerdeck gt slideshare # imo anyway

[18:43] <uvtc> stevan_: right, that's the one. I like that the speakerdeck site is pretty uncluttered. I'm guessing both sd and slideshare allow you to upload your slides as a pdf.

[18:43] <stevan_> yup

[18:43] <stevan_> it seems to them break it up into some kind of html5 thing

[18:43] <stevan_> each page is an individual image

[18:44] *** SunilJoshi left
[18:45] *** benabik joined
[18:45] *** mtymula left
[18:45] <PerlJam> stevan_: planning any moe hackathons?

[18:46] <stevan_> PerlJam: not at this point, no

[18:47] <uvtc> Oh, what's the name for when a new version is announced (but not yet released) and it causes folks to stop using the current (available) version...

[18:47] <uvtc> gah

[18:47] <PerlJam> uvtc: stupidity? :)

[18:48] <diakopter> not actually needing the software?

[18:49] *** fhelmberger left
[18:49] <TimToady> what's the word for when new versions are released continuously but everyone keeps saying it's "not released yet"

[18:49] <PerlJam> uvtc: whatever that is, if it has a name, is isomorphic with designing (and implementing) features that you think you might need in the future.

[18:49] <diakopter> TimToady: different definitions of released

[18:49] <uvtc> Agh, sorry, don't mean to use this channel as my personal spoken language reference. I was thinking in terms of: "Was going to try Rakudo, but now will wait for it to come out on the JVM!"

[18:50] <TimToady> why not get a head start? :)

[18:50] <tadzik> it's like waiting for Steam on Linux :P

[18:50] <tadzik> except that you can help :)

[18:50] <masak> ok, trying speakerdeck.

[18:51] <uvtc> Has there been any movement on a current official Perl 6 tutorial?

[18:51] *** alec left
[18:51] <masak> stevan_: oh, was gonna ask you.

[18:51] <PerlJam> TimToady: I think you can "help" the "not released" problem.   Just make a public announcement that you bless Rakudo, Niecza, etc. as Perl 6 and therefore Perl 6 is hereby "released"   :)

[18:51] <masak> stevan_: if Moe is the Pugs of Perl 5... where's the IRC channel? and how come we're not all on it?

[18:52] <stevan_> masak: #moe over on irc.perl.org, and everyone is welcome :)

[18:52] <masak> \o/

[18:52] <PerlJam> uvtc: There's an official tutorial?

[18:52] <stevan_> already is a few 6ixers in there

[18:52] <diakopter> "not released yet" means running-stable and API-stable not released yet. imho, things users who are selecting software for real uses worry about

[18:52] <raiph__> uvtc: imo jonathan seems pretty hopeful that rakudo on jvm will be mostly working by yapcna (june 3)

[18:52] <uvtc> PerlJam: I'm asking if there's been any movement on writing one.

[18:52] <stevan_> lambdacamels, Defenders of the Mu, or whatever you crazy kids call yourself these days

[18:54] <masak> diakopter: see also my recent gist.

[18:54] <diakopter> yes.

[18:54] <masak> stevan_: lambdacamels has a real 2005 ring to it now. :)

[18:54] <masak> stevan_: I think "sixers" has semi-established itself.

[18:55] <tadzik> uvtc: I'd be interested in knowing this too :)

[18:55] <tadzik> maybe we should start one

[18:55] <tadzik> who's with me?

[18:55] * uvtc is sorta looking in TimToady's direction, trying not to *look* like he's looking in that direction.

[18:55] <diakopter> lots of folks have talked about tutorials over the years

[18:56] <PerlJam> some of us have written some things too.

[18:56] *** fgomez left
[18:56] <diakopter> the best sources are in all the blog posts

[18:56] * TimToady is hoping to have a camel book equivalent out this year

[18:56] <diakopter> now, if there were a big list of all of those...

[18:56] <TimToady> but that's not exactly a tutorial

[18:56] <PerlJam> The problem is one of critical mass I think.   We don't have enough people pulling in the same direction at the same time to get it finished.

[18:56] <uvtc> !!

[18:56] <raiph__> .oO ( If the Perl 5 community went with a rename to not be 5 but some other number (eg Perl 2013), Perl 6 would best have a suitable spot to land if Perl 6 is to retain a suitable relationship to the Perl brand. Perl Labs anyone? )

[18:56] <masak> TimToady: whoa.

[18:56] <uvtc> !o!

[18:56] <tadzik> \o/

[18:57] <masak> TimToady: that's... endorsement ;)

[18:57] <masak> now we're talking.

[18:57] <arnsholt> A six-camel would indeed be awesome

[18:57] <diakopter> raiph__: at that point Perl 6 would just start itself Perl

[18:57] <diakopter> *calling

[18:57] <diakopter> (still keeping the v6 version)

[18:57] <PerlJam> TimToady: a "Learning Perl 6" would go a long way towards helping adoption too.  But last time I asked merlyn about it, he said he didn't see a business model that would work (or something like that)

[18:58] <masak> TimToady: will you put http://alma.ch/blogs/bahut/images/p6_cover.gif on the cover? :D :D :D

[18:58] <raiph__> diakopter: right. that would work.

[18:58] <TimToady> masak: I've been tempted

[18:58] <masak> *lol*

[18:58] <masak> people would go "I knew it! wait, he did WHAT?"

[18:59] <diakopter> 33rd should be bumped a bit

[18:59] <masak> :P

[18:59] <masak> we should add all the version numbers of the syposes.

[18:59] <diakopter> multiply

[18:59] <masak> that's why we keep updating them, right? :P

[18:59] <TimToady> we presumably had one new version for each of the RFCs

[19:00] <TimToady> so maybe we're up to 400 or so by now

[19:00] * masak .oO( and they're proposing to name Perl 5 "Perl 2013". sheesh. ) :P

[19:01] <uvtc> Request: regarding the Rosetta Code Perl 6 examples: try to offer at least 2 for each task/item: a pedagogical/tutorial example of how to do it in Perl 6, and then the one you wrote because it was elegant or shows off neat Perl 6 features.

[19:01] *** alec__ joined
[19:01] <masak> +1

[19:01] <uvtc> The RC examples seem to be the most up-to-date available.

[19:02] <masak> I still think the R/ in http://rosettacode.org/wiki/Average_loop_length#Perl_6 hurts readability more than it helps it :/

[19:03] <TimToady> many of the example do provide those two, though perhaps with not enough verbiage around the "standard" solution

[19:03] <masak> http://rosettacode.org/wiki/Last_Friday_of_Each_Month#Perl_6 has one procedural and one FP variant. I like that, too.

[19:04] <masak> (and I really like .classify)

[19:04] <TimToady> R/ is pronounced "goes into"  :)

[19:05] <TimToady> 3 goes into 12 a total of 4 times

[19:06] <PerlJam> besides, a reduce on the LHS of / looks awkward.

[19:06] <[Coke]> I thought %% was goes into!

[19:08] <TimToady> no, that's 'is divisible by'

[19:08] <uvtc> Having commented "baby-Perl" versions of RC examples would help mitigate the impression of Perl 6 being too "from the future" / "space age" / tricksy whatever.

[19:08] <TimToady> 'goesinto' has always been reversed division, at least on the west coast of the U.S.

[19:08] <TimToady> and I suspect most of the rest of the country too

[19:09] <PerlJam> uvtc: But ... but ... Perl 6 *is* from the future  :)

[19:09] <nwc10> even Texas? :-)

[19:10] <TimToady> Texas is not from the future...

[19:10] <TimToady> it's more of a parallel universe

[19:11] <uvtc> PerlJam: Right. But having a baby-Perl6 example first puts folks at ease. "Oh, I see. This seems a lot like Perl 5 but nicer.". After that you hit them with "Pretty cool. But not cool enough. Here's another solution using ...".

[19:11] <geekosaur> gazinna gazotta

[19:12] <TimToady> we are in violent agreement, please feel free to bifurcate some of the as-yet unbifurcated entries

[19:12] <arnsholt> It's been too long since I worked with grammars. Will Grammar.parse implicitly anchor to the beginning of the string?

[19:13] <TimToady> but let's not do what the python folks do and try to show off the repl, which is really ugly and offputting

[19:13] <moritz> r: grammar A { method TOP { a } }; say A.parse('back')

[19:13] <p6eval> rakudo 0dda4c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤    a used at line 1␤␤»

[19:13] <moritz> r: grammar A { token TOP { a } }; say A.parse('back')

[19:13] <p6eval> rakudo 0dda4c: OUTPUT«#<failed match>␤»

[19:14] <uvtc> (Heh. Just realized I stole that "Pretty cool, but not cool enough" quote from Learning Perl p. 96 :) )

[19:14] *** autumn left
[19:15] <uvtc> TimToady: Agreed about the repl. Replified examples are more difficult to read, and more difficult to copy/paste.

[19:16] <uvtc> Also, I now own the trademark and all residuals on the term "replified" in perpetuity, ad infinitum, quid demonstatum. Gesundheit.

[19:16] *** sivoais left
[19:16] <TimToady> one could put a tutorial wrapper page around RC and supply a visitation order, plus extra handholding that might be inappropriate for RC itself

[19:16] *** Timbus left
[19:16] <TimToady> you left out 'ad godwinum'

[19:17] <uvtc> tee hehehe.

[19:17] <TimToady> actually, I think I heard it originally as 'ad hitlerum'

[19:18] <arnsholt> moritz: Durr. I could've done that, true.

[19:19] *** Pleiades` left
[19:22] *** masak left
[19:22] *** tadzik left
[19:22] *** Juerd left
[19:22] *** [Coke] left
[19:22] *** sergot left
[19:22] *** Util left
[19:22] *** pmichaud left
[19:22] *** PerlJam left
[19:22] <diakopter> bye feather

[19:23] *** sivoais joined
[19:23] *** Pleiades` joined
[19:23] *** Timbus joined
[19:23] *** autumn joined
[19:24] *** masak joined
[19:24] <masak> omg I just shutdown feather, accidentally :/

[19:24] <felher> oO?

[19:24] <diakopter> oops

[19:24] *** PerlJam joined
[19:24] <masak> Juerd: halp

[19:24] <moritz> erm, what?

[19:24] <diakopter> you booted Juerd :)

[19:24] *** mtk joined
[19:25] <moritz> I have a shell open on feather

[19:25] <moritz> what's your problem?

[19:25] <masak> oh phew

[19:25] <moritz> moritz@feather:~$ uptime 20:24:04 up 2 min,  3 users,  load average: 1.19, 1.07, 0.44

[19:25] <masak> "up 2 min".

[19:26] <masak> does that mean it just rebooted?

[19:26] <moritz> yes

[19:26] <masak> :/

[19:26] *** tadzik joined
[19:26] <masak> sorry.

[19:26] <moritz> so you rebooted, not shut down

[19:26] <masak> well, that's something, I guess.

[19:26] <PerlJam> So  .... it's all masak's fault?

[19:26] <TimToady> isn't it usually?

[19:26] <uvtc> Perl 5, rebooted.

[19:27] <moritz> everything. Including the crisis in Mali.

[19:27] <masak> I was one ssh too deep, wondering why I had to do /usr/bin/shutdown all of a sudden, not just shutdown... not stopping to think.

[19:27] <masak> yeah. that was me, too.

[19:28] *** masak left
[19:28] <uvtc> masak, come back! Now see what you've done?

[19:29] *** masak joined
[19:29] <TimToady> back from Mali already?

[19:29] <masak> back in screen, as opposed to panic-webchat.

[19:30] <TimToady> or was it Texas this time?

[19:31] *** jeffreykegler left
[19:31] *** sivoais left
[19:32] *** sivoais joined
[19:34] *** alester joined
[19:34] <TimToady> masak: I think about signals every time I read http://rosettacode.org/wiki/Reports:Tasks_not_implemented_in_Perl_6 and see "Handle a signal" as one of the tasks

[19:35] <TimToady> in fact, that page is a gold mine for things you can't do in Perl 6 yet

[19:35] * diakopter falls into the mine

[19:36] <TimToady> note, there's also a lot of rocks in there around the gold

[19:36] <moritz> that's the case with all gold mines :-)

[19:36] <TimToady> just wanted to be clear about how accurate the analogy was :)

[19:40] *** sivoais left
[19:40] *** sivoais joined
[19:41] *** jeffreykegler joined
[19:43] <masak> orz

[19:43] <masak> gomen

[19:44] <moritz> masak: a friend of mine used to shut down his computer with 'halt', and after accidentally powering down a remote server installed an alias halt="You don't want to do that remotely'

[19:45] <moritz> (and he could still shutdown -h if he really wanted to, or with fully qualified paths)

[19:46] <masak> heh.

[19:46] <masak> I promise I won't shut down feather again tonight.

[19:46] <arnsholt> Smart, smart =)

[19:47] *** [Coke] joined
[19:49] <[Coke]> masak--

[19:49] <masak> :(

[19:49] <swarley> hello

[19:49] <[Coke]> # doesn't matter since aloha is gone.

[19:49] *** benabik left
[19:50] *** sivoais left
[19:50] *** sivoais joined
[19:50] *** Juerd joined
[19:50] * [Coke] concentrates his aggression on require.js

[19:51] <swarley> I read a paper on how to make classes and objects work with llvm :)

[19:51] <swarley> yay for college papers

[19:53] <uvtc> What is the Perlish term for making the commonly-used things easier to reach? That's some variation of huffman-coding, correct?

[19:54] <Juerd> What happened with feather?

[19:54] <TimToady> huffman coding, or Easy things should be easy, hard things should be possible.

[19:54] <uvtc> TimToady: thanks

[19:54] <TimToady> it's our interpretation of huffman coding, not the industry meaning of it

[19:55] <uvtc> Right.

[19:55] <TimToady> Juerd: masak got confused about his ssh depth

[19:55] <uvtc> Juerd: someone forced masak out of his chair, rebooted feather, then ran off.

[19:55] *** brrt joined
[19:56] <TimToady> it was getting shoved out of the chair that confused him about his depth

[19:57] <TimToady> as for the admissions in the backlog, I think masak++ is trying to cover for whoever really did it

[19:57] <masak> Juerd: I accidentally feather. :/

[19:57] <TimToady> and is still covering for him or her... :)

[19:57] <Juerd> Oh, okay. So nothing that still needs fixing. That's good. 

[19:58] <Juerd> This is exactly why feather originally had a coloured prompt!

[19:58] *** jeffreykegler left
[19:58] <Juerd> I should restore that :P

[19:58] <PerlJam> blinking red?

[19:58] *** fgomez joined
[19:58] *** sivoais left
[19:58] <Juerd> No, not red. I have that on other boxes already :P

[19:58] <Juerd> (Core routers!)

[19:58] *** sivoais joined
[19:59] <Juerd> Feather had white on blue I believe

[19:59] <uvtc> The trouble with colored prompts/backgrounds is that they eventually end up totally convincing me of what machine I'm on regardless of reality.

[19:59] <Juerd> uvtc: As long as you don't have root, that's okay with me :P

[19:59] <PerlJam> if feather always had a unicode-y camelia prepended to the prompt, that would be distinctive  :)

[20:00] <Juerd> . /etc/bash_prompt

[20:00] <Juerd> It's still there :)

[20:00] <Juerd> Now to reinstate it in /etc/bash.bashrc

[20:00] <Juerd> Done!

[20:00] <swarley> export PS1="$PS1»ö« "

[20:00] <swarley> \o/

[20:01] <masak> ;)

[20:01] <swarley> I should make a zsh plugin for that in perl6 like repos..

[20:06] <uvtc> All the recent talk about language implementations (Moe (Perl 5 on JVM), Topaz (Ruby on PyPy), nqp-jvm), I'm waiting to hear of someone writing a Perl 6 implementation in Rust. (note: I am not that someone.)

[20:06] <TimToady> o􏿽xCC􏿽xAF􏿽xCC􏿽xAF􏿽xCC􏿽x86􏿽xCC􏿽x86:

[20:07] <TimToady> .u o􏿽xCC􏿽xAF􏿽xCC􏿽xAF􏿽xCC􏿽x86􏿽xCC􏿽x86:

[20:07] <phenny> TimToady: U+006F U+032F U+032F U+0306 U+0306 U+003A

[20:07] <diakopter> 🐛

[20:08] <uvtc> Er, not *waiting* per se, just sorta half-expecting.

[20:09] <nwc10> I'll believe it when it's good enough to run its own install target

[20:09] *** Util joined
[20:09] <nwc10> (Perl 5's installer script is written in Perl 5)

[20:10] <uvtc> nwc10: are you referring to Rust's installer script?

[20:10] <nwc10> I don't know about Rust's installer script.

[20:10] <nwc10> But I do know about Parrot, Rakudo, Moe and NQP-JVM

[20:10] <uvtc> nwc10: ok. Didn't understand your "install target" comment.

[20:10] <nwc10> dogfood

[20:11] <nwc10> Parrot is 10 years old, yet its installer script is still written in Perl 5. Doesn't run on the Parrot that was just built

[20:11] <uvtc> I only mention Rust because I've heard good things about it, and it looks somewhat similar to C, Perl (and a little Ruby), and b/c it seems like it would be at about the right level of abstraction.

[20:13] *** sivoais left
[20:13] *** sivoais joined
[20:18] <uvtc> And because discussions of "perl 6 on llvm" have come up in the past, and Rust is built on llvm. And because it's free software. Anyhow.

[20:19] <swarley> i'm actually working on 6model on llvm right now

[20:21] *** domidumont left
[20:22] <uvtc> I saw some comments regarding that in the backlog. In the backwash. In the jet-wash of this channel. :) I'm way out of my ssh depth discussing language implementation details.

[20:24] <uvtc> I can see why Moe chose Scala though, since stevan_ was explicit about wanting stable mature tech to build upon.

[20:24] <diakopter> Rust's memory model is .. complex

[20:24] <diakopter> (as I've just learned)

[20:25] <uvtc> Hm. I think I noticed in the tut that it offers a wide variety of pointer types to choose from.

[20:27] <uvtc> Maybe comes with the territory of having the sort of low-level control Rust offers. Dunno.

[20:27] <diakopter> no shared-memory threads, notably

[20:28] <nwc10> shared-memory threads have to Go

[20:28] <uvtc> diakopter: Ah, right. Saw a recent link about its "intimidation factor": https://mail.mozilla.org/pipermail/rust-dev/2013-January/002917.html

[20:28] <uvtc> Argh. And so must I. o/

[20:29] *** uvtc left
[20:29] <diakopter> nwc10: I disagree. they're necessarily practical for implementing implicit parallelism or other concurrency models on top of OS threads

[20:29] <pmurias> swarley: is the slow loading of yarv bytecode the only reason you switched to llvm?

[20:29] <nwc10> it was a Go pun

[20:30] <nwc10> and yes, I can see why they are useful

[20:30] <nwc10> it's one reason ithreads isn't useful

[20:30] *** benabik joined
[20:30] *** am0c left
[20:30] <nwc10> you can't divide a task by spinning up a few threads, each of which gets sole ownership of some partition of the objects involved

[20:31] <nwc10> as in "ithreads prevents this"

[20:31] <diakopter> right, if each of them needs access to a shared queue, e.g.

[20:32] <nwc10> http://static.rust-lang.org/doc/tutorial.html -- To build from source you will also need the following prerequisite packages: ... python 2.6 or later (but not 3.x)

[20:32] <nwc10> (Sorry Guido)

[20:34] <skids> parallelism without shared mem is about as useful as FP without monads.

[20:35] <Ulti> possibly of interest to peeps in here http://page.mi.fu-berlin.de/prechelt/Biblio/jccpprtTR.pdf

[20:36] <swarley> pmurias; partially, but also because llvm is JIT compiled, and allows for a lower level or representation

[20:37] *** am0c joined
[20:45] *** am0c left
[20:47] *** zby_home left
[20:48] <pmurias> swarley: JIT? isn't it compiled ahead of time?

[20:49] <pmurias> swarley: you should be aware that you are basically writing your own custom VM when targeting llvm

[20:49] <swarley> No, LLVM uses a JIT compiler

[20:49] <diakopter> no

[20:49] <diakopter> it contains a compiler you can use to JIT

[20:50] <swarley> Oh, I thought JIT was default

[20:50] <diakopter> default for what?

[20:50] <diakopter> not any of the textual inputs to the compiler, commandline

[20:50] <swarley> When compiling llvm, that it uses JIT

[20:50] <diakopter> no

[20:51] <diakopter> swarley: pmurias is correct, you would need to create a VM, including garbage collector and object system

[20:52] <moritz> LLVM is, as the name says, low-level

[20:52] <swarley> I know that.

[20:52] <swarley> The garbage collection is what I'm worried about

[20:52] <pmurias> it's very similiar to targeting C

[20:54] <pmurias> the most significant difference is that you avoid spending time compiling C code

[20:54] *** SmokeMac_ left
[20:54] <swarley> nqp: say(nqp::join(", ", < making sure this is an array in nqp >))

[20:54] <p6eval> nqp: OUTPUT«making, sure, this, is, an, array, in, nqp␤»

[20:57] *** fgomez left
[20:57] <skids> llvm is essentially an abstraction over assembly language instruction sets, plus some useful... eh... proteins.  All very basic building blocks.

[20:57] <masak> everything the body needs.

[20:58] *** am0c joined
[21:00] <bbkr__> if I write "class A{ }" which classes does it inherits from? Only Mu and Any ?

[21:00] <masak> rn: class A {}; .say for A.^mro

[21:00] <p6eval> niecza v24-18-gaf64300: OUTPUT«Unhandled exception: Unable to resolve method mro in type ClassHOW␤  at /tmp/7Tug434Z8z line 1 (mainline @ 6) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4218 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4219 (module-CORE @ 580) ␤  at /ho…

[21:00] <p6eval> ..rakudo 0dda4c: OUTPUT«A()␤Any()␤Mu()␤»

[21:00] *** kivutar left
[21:01] <masak> bbkr__: yes.

[21:01] <bbkr__> masak++ # I didn't know ^mro trick

[21:01] <bbkr__> thanks

[21:01] <masak> it stands for "method resolution order".

[21:01] <benabik> rn: class A is Mu {}; .say for A.^mro

[21:01] <p6eval> niecza v24-18-gaf64300: OUTPUT«Unhandled exception: Unable to resolve method mro in type ClassHOW␤  at /tmp/OYf7QN7__j line 1 (mainline @ 6) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4218 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4219 (module-CORE @ 580) ␤  at /ho…

[21:01] <p6eval> ..rakudo 0dda4c: OUTPUT«A()␤Mu()␤»

[21:02] <masak> so if you're doing MI, it tells you in which order methods are looked for, too.

[21:02] <masak> how do I declare a class that doesn't inherit from Mu?

[21:02] <timotimo> what does that even mean?

[21:03] <moritz> masak: you don't

[21:05] <moritz> "how do I create a type that cannot be expressed in terms of the type system?"

[21:05] *** kaare_ left
[21:05] <skids> You wait until the class is sleeping and then sneak up beside it and tip it over.

[21:05] <swarley> magic

[21:05] <masak> yes, I guess the MOP could help me with that...

[21:05] <masak> moritz: the question is not as silly as it may sound. we already know that "foreign objects" might not inherit from Mu.

[21:06] <swarley> masak; https://dl.dropbox.com/u/36785145/4398156%2B_1d5703846260e1b19090a1dd101f70fb.gif

[21:06] <masak> or is that superseded information? is that solved entirely with reprs these days?

[21:06] <masak> swarley: ok...

[21:07] <moritz> masak: foreign objects behave as though they conform to Mu

[21:07] <swarley> Sorry, I've been waiting for an excuse to show that picture to anyone at all for days

[21:07] <diakopter> masak: well, if the VM exposes instructions/opcodes to bypass the HLL and do that kind of stuff, then yeah you can do it

[21:09] <diakopter> r: macro marco(AST $foo) { say $foo.evaluate_unquotes([]).dump }; marco(&marco)

[21:09] <p6eval> rakudo 0dda4c: OUTPUT«- QAST::Op(call)␤  - QAST::WVal(Code)␤␤===SORRY!===␤too few positional arguments: 2 passed, 3 (or more) expected␤»

[21:09] <masak> o.O

[21:09] <masak> my, that's *evil*. :)

[21:10] <diakopter> r: macro marco(AST $foo) { say $foo.evaluate_unquotes([$foo]).dump }; marco(&marco)

[21:10] <p6eval> rakudo 0dda4c: OUTPUT«- QAST::Op(call)␤  - QAST::WVal(Code)␤␤===SORRY!===␤too few positional arguments: 2 passed, 3 (or more) expected␤»

[21:10] <masak> and for the love of borsht, stop calling your macros 'marco'!

[21:10] *** fgomez joined
[21:10] <diakopter> I'll WVal you

[21:10] <benabik> .oO( Macro Polo? )

[21:11] <dalek> rakudo/nom: cc7e3d3 | moritz++ | src/core/Range.pm:

[21:11] <dalek> rakudo/nom: constant-fold some range operators

[21:11] <dalek> rakudo/nom: 

[21:11] <dalek> rakudo/nom: the others cause the setting compilation to fail when constant-folded. Not sure yet why.

[21:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cc7e3d3b4f

[21:11] <skids> It's like golfing, but with macros.

[21:11] <skids> and horses.

[21:15] <diakopter> swarley: the big problem with using llvm for Perl 6 is that it really wants a stackless design, and that's the kind of stuff that totally obviates most of the optimizations llvm can do...

[21:15] <nwc10> "it" - Perl 6 wants a stackless design?

[21:16] <swarley> Well, llvm is working on a new project, I don't know if it would be any help in this situation

[21:16] <diakopter> yeah

[21:16] <brrt> whats the deal with stackless anyway

[21:16] <swarley> http://polly.llvm.org/

[21:16] <diakopter> TimToady mentioned earlier today it's better for ffi

[21:17] <brrt> why?

[21:17] <brrt> and ehm.. are we talking c-stackless? or stackless-at-all

[21:17] <diakopter> stackless for the language's invocations

[21:18] <brrt> hmm, maybe i'm to tired to understand this now

[21:18] <diakopter> the runtime library into which it calls will still use the C stack

[21:18] <diakopter> also, because it enables control exceptions with delayed call-chain unrolling

[21:18] <diakopter> *unwinding

[21:18] <nwc10> and, I believe, continuations

[21:20] <swarley> So, what is the bare minimum that a 6model object does.

[21:20] <brrt> swarley, check out the nqp repo :-)

[21:20] <swarley> I'm reading it now

[21:20] <swarley> I'm guessing PMC is a parrot specific struct

[21:20] <brrt> basically, constructing objects (representations), types, and 'classes' / roles

[21:21] <diakopter> a representation can implement any of the predefined operations

[21:21] <brrt> yes, it stands for polymorphic container / parrot magic cookie

[21:22] <swarley> Polymorphic container?

[21:22] <diakopter> it's similar to 6model

[21:22] <swarley> I'm just going to assume it's an object base4

[21:22] <swarley> -4

[21:22] <brrt> its basically what parrot understands to be an object

[21:22] <brrt> PMC is a bit of a simplistic object system

[21:22] <pmurias> diakopter: re better for ffi - it's better for interop with other runtimes as you avoid having runloops recurse into each other

[21:23] <brrt> and of pmcs, there are still two more types, namely raw (native) pmcs, writteen in C, and object pmcs which are written in pir / winxed

[21:24] <brrt> they are not really different, but still different enough to consider them differently

[21:24] <brrt> a pmc may be a hash table, or a resizable array or a fixed array

[21:24] <brrt> recently parrot added the very useful and long awaited fixedfloatarray

[21:25] <masak> I don't get it. Aldebaran Robotics were at FOSDEM. they say they're Open Source. but I don't see anything downloadable on their site.

[21:25] <masak> shouldn't there be, like, a link at http://www.aldebaran-robotics.com/en/Discover-NAO/Key-Features/open-source.html ?

[21:26] <masak> "we're open source... and here's the source!"

[21:26] <swarley> Suggestions on where I should start with 6model? I'm assuming that I should start by trying to get all of the functionality of sixmodelobject.c

[21:26] <arnsholt> I think sixmodelobject.h is a good place to start

[21:26] <arnsholt> That's where the all the interesting typedefs are

[21:26] <swarley> Yeah, I'm reading it now

[21:27] <arnsholt> masak: One of my colleagues works with a Nao. I can ask him how OSS they are tomorrow =)

[21:27] <pmurias> swarley: have you read nqp/docs/6model/overview.markdown?

[21:27] <masak> arnsholt: would be nice.

[21:28] *** FROGGS joined
[21:28] <FROGGS> olá!

[21:28] <arnsholt> Hmm. Cargoculting Rakudo's highwater stuff turns out to be harder than expected

[21:29] <masak> FROGGS! \o/

[21:29] <swarley> Ah, no I have not. I'll take a gander

[21:29] <masak> arnsholt: well, the thing about cargoculting is that it doesn't make more airplanes come.

[21:30] <arnsholt> Indeed

[21:30] <arnsholt> For some reason you have to actually figure out what's going on =)

[21:31] * masak .oO( actually figuring out what's going on is hard, let's go cargocult )

[21:32] <arnsholt> Quite

[21:32] * masak .oO( exact quotations are hard, let's go paraphrasing )

[21:33] * masak .oO( autopuns are hard, let's go snowcloning )

[21:36] <[Coke]> ovid commented on the 7 suggestion on FB. Followed by a storm of comments. I threw in a small note about 5 vs. 7 vs. 6;

[21:37] <nwc10> the code's at git://perl5.git.perl.org/perl.git if he wants to fork it.

[21:38] <nwc10> no-one ever seems to take up this offer.

[21:38] <timotimo> [Coke]: is that facebook discussion publically visible?

[21:41] <[Coke]> timotimo: are you friends with ovid?

[21:41] <diakopter> nwc10: how long ago did kephra fork

[21:41] <timotimo> i'm not no facebook

[21:41] <[Coke]> timotimo: Then I don't feel comfortable duplicating it outside of FB.

[21:42] <timotimo> blergh, i need to do something, anything to this keyboard, it's driving me mad :|

[21:42] <timotimo> that's no problem

[21:42] <benabik> timotimo: Hammer?

[21:42] <[Coke]> nwc10: if ovid wants to fork it?

[21:42] <[Coke]> This isn't a code issue, though, it's a marketing issue.

[21:42] <timotimo> benabik: i was thinking more along the lines of "vacuum cleaner", but i'm already missing one key (my tab key, RIP) and one gets loose every time i use the trackpoint mouse ...

[21:42] <swarley> Okay, so is there any reason why I shouldn't do this 6model in C++ or Objective C?

[21:43] <brrt> swarley, not really, but objective-c requires a full runtime and should not be superportable

[21:43] <swarley> I wouldn't actually use objective c

[21:43] <swarley> Im not sure why I threw it in

[21:44] <brrt> :-)

[21:44] <brrt> you're free to experiment as much as you like

[21:44] <brrt> if you know c++ well, go for it

[21:44] <swarley> And it requires a full run time even without using special libraries?

[21:44] <brrt> always

[21:44] <swarley> I know that if you use *Step it does.. but i didnt know it did without them

[21:44] <brrt> objective-c is uses a lot of introspection thingies

[21:44] *** benabik left
[21:45] <swarley> Or maybe pascal;)

[21:47] <brrt> whatever floats your boat

[21:48] <brrt> the full runtime is on the scale of things a small library,  of course, but that doesn't make it less true

[21:48] <brrt> (of objective-c)

[21:51] *** spider-mario joined
[21:55] *** benabik joined
[21:59] *** donaldh joined
[22:03] *** skids left
[22:07] *** Targen left
[22:19] *** sqirrel_ left
[22:23] <FROGGS> phenny: tell sorear that I updated the patch: https://gist.github.com/FROGGS/0a6f8e2d4053fb0ba5d0

[22:23] <phenny> FROGGS: I'll pass that on when sorear is around.

[22:24] <FROGGS> phenny: tell sorear ... but rerunning the spectest always gives different failing tests, is that normal? nothing related to my patch though

[22:24] <phenny> FROGGS: I'll pass that on when sorear is around.

[22:24] <swarley> so what is happening with the .NET 6model?

[22:24] <diakopter> swarley: wait until tomorrow morning to ask jnthn

[22:25] <brrt> swarley, mostly nothing

[22:25] <swarley> alright

[22:25] <brrt> the original 6model repo was a testing ground

[22:25] <brrt> i believe a recent blog post had jnthn explicitly stating that the CLR wasn't suitable

[22:25] <diakopter> heh, no

[22:26] <diakopter> he said he would do the implementation differently now

[22:26] *** pupoque left
[22:26] <diakopter> the CLR is just as suitable as the JVM

[22:27] <brrt> well, it seems i misread

[22:27] <diakopter> I'll verify

[22:28] <diakopter> yes

[22:28] <brrt> what is explicitly stated that what is done now fits better into jvm than what was done to the clr

[22:28] <brrt> i understood that to mean 'somehow the clr wasn't suitable'

[22:31] <jnthn> Good evening.

[22:31] <jnthn> brrt: diakopter has read it the way I intended.

[22:32] <diakopter> jnthn: you know those days when the backlog is, like, less than a screen?

[22:32] <diakopter> good luck finishing today's before going to bed...

[22:33] <brrt> jnthn, good evening :-)

[22:33] <jnthn> diakopter: Oh, I was following it from the irclog on the train wifi.

[22:35] <diakopter> oh ha

[22:35] <brrt> jnthn, why choose jvm rather than clr, then? completely arbitrary?

[22:36] <diakopter> more people would adopt it at first :)

[22:36] <jnthn> brrt: There's already a Perl 6 implementation on the CLR for one. :)

[22:36] <brrt> good point

[22:36] <brrt> how is niecza going

[22:37] *** PacoAir left
[22:37] <diakopter> sorear has gotten busy it seems

[22:37] <jnthn> It's crazy commit rate has sure slowed

[22:37] <jnthn> (as in, crazily productive)

[22:38] <masak> jnthn! \o/

[22:39] <jnthn> o/ masak

[22:39] <jnthn> Glad to see you're still here...thought you mighta decided to shutdown for the night...

[22:39] <jnthn> </tease> :)

[22:40] <masak> *sigh* I shut down one little server, and see what happens... :P

[22:40] <diakopter> a few people lose their open irc windows

[22:40] <diakopter> and miss out on logs

[22:41] <jnthn> Could happen to anybody. :)

[22:42] *** alester left
[22:44] *** screencast joined
[22:46] <screencast> can you help me to got a man's facebook

[22:46] <brrt> jnthn, whats stable

[22:46] <brrt> and screencast, not me

[22:47] <brrt> i mean s-table

[22:47] <screencast> not me????

[22:47] <brrt> i cannot help you :-)

[22:47] <screencast> why

[22:47] <diakopter> screencast: this is a chat channel for a programming language

[22:47] <[Coke]> screencast: is this a trick question? go to www.facebook.com - search for the person.

[22:48] <screencast> no

[22:48] <screencast> get the password only

[22:49] *** ChanServ sets mode: +o diakopter

[22:49] *** screencast was kicked by diakopter (screencast))
[22:49] <brrt> diakopter++

[22:50] <jnthn> brrt: Does the document in nqp/docs/6model somewhere not say that...

[22:50] <diakopter> lamers. they happen.

[22:50] <jnthn> Or read sixmodelobject.h

[22:51] <diakopter> brrt: s is short for shredd

[22:51] <diakopter> um. shared

[22:52] <brrt> i'm reading them as we speak

[22:52] <jnthn> :)

[22:52] * jnthn shoulda called it don't-read-this-if-you-want-to-understand-6model.md :)

[22:53] <jnthn> (And yes, I always read IGNOREME files, then get disappoint when they don't contain something funny...)

[22:59] <brrt> does lolsql actually work?

[22:59] *** benabik left
[23:00] <masak> tias

[23:00] <jnthn> I kinda doubt it. I wrote it as a quick hack for laughs years ago.

[23:00] <jnthn> We probably fixed something it relies on :)

[23:01] <brrt> it is pretty funny though

[23:02] <jnthn> yes, I wanted an example thing to write a grammar for to show off grammars and it seemed a decent mix of amusing but actually somewhat interesting to parse.

[23:02] <lue> hello o/

[23:02] * jnthn did more recently have a partial Perl 6 grammar that parsed a subset of real SQL for a past $dayjob task

[23:03] <brrt> hi lue

[23:03] <jnthn> hellue

[23:03] <masak> lue! \o/

[23:03] <masak> 'night, #perl6

[23:03] <lue> ♞ masak o/

[23:08] <brrt> yes, night too

[23:08] *** brrt left
[23:09] *** jeffreykegler joined
[23:16] *** spider-mario left
[23:17] *** p5eval left
[23:21] *** cognominal joined
[23:25] <lue> huh. Any idea why the PIR code in Panda::Ecosystem suddenly won't work? The specific error I get is "connect failed: Connection refused"

[23:27] *** b1rkh0ff left
[23:30] *** bluescreen10 left
[23:30] <donaldh> how do I get the length of an array in nap ?

[23:30] <donaldh> nqp even

[23:30] *** stopbit left
[23:30] <jnthn> nqp::elems(@array)

[23:30] <jnthn> lue: Maybe the thing it's trying to connect to really is down...

[23:30] <donaldh> jnthn: thx

[23:30] *** p5eval joined
[23:33] <lue> Ah, it's trying to load a file from feather (and skimming the backlog, it seems some things happened there today)

[23:33] <diakopter> oh, httpd2 might need started

[23:34] *** diakopter sets mode: -o diakopter

[23:34] <lue> (specifically, it's trying http://feather.perl6.nl:3000/projects.json)

[23:34] <diakopter> oh, that's not apache I think

[23:34] *** skids joined
[23:34] <diakopter> I think that's something tadzik runs

[23:35] <pmurias> swarley: how would using c++ help you?

[23:36] *** shinobicl left
[23:38] *** xilo_ joined
[23:39] <donaldh> jnthn: The nqp-jvm ROADMAP says 'remaining string ops' in the QAST to JAST compiler section

[23:40] *** b1rkh0ff joined
[23:40] <donaldh> jnthn: is that just nqp ops ?

[23:40] <donaldh> jnthn: or is there more to it?

[23:40] <jnthn> donaldh: yeah, but...I think it may be largely done

[23:40] <swarley> pmurias; I'm not really sure. I guess just using a basic class where structs are used in some cases

[23:41] <donaldh> jnthn: split was missing so I have done that so far.

[23:41] <jnthn> donaldh: Thing that's not done that will be needed at some point is checking char class membership

[23:42] <jnthn> nqp::iscclass and friends, iirc

[23:42] <swarley> Also, std:: container classes

[23:42] <jnthn> Will need those for the regex engine at some point in the hopefully near future. :)

[23:43] <donaldh> Okay, hopefully I have learned how to do this with nqp::split

[23:43] <donaldh> I have a diff.

[23:43] <swarley> I know it's not feasible to make the llvm port, but i still want to, just to show that I can. But I really don't want to rewrite parts of parrot >.< I suppose I'll have to read through the code and get it's intended meaning

[23:45] <jnthn> fwiw, the JVM version of the 6model code is maybe cleaner in so far as it's not tied up with Parrot. OTOH, it is tied up with the JVM.

[23:45] <jnthn> donaldh: That, or pull request...

[23:45] * jnthn is gonna sleep, will backlog in the morning

[23:45] <donaldh> Well I've never created a pull request before, but I need to learn sometime :-)

[23:46] <jnthn> Or a pull request leads to an email so I surely won't lose it that way ;)

[23:46] <jnthn> OK, 'night

[23:46] <TimToady> o/

[23:46] <donaldh> 'night jnthn 

[23:47] <pmurias> swarley: it's hard to write a efficient llvm port as it's basically rewriting parts of parrot

[23:55] <lue> pmurias: do you mean Parrot code specifically or general VM functionality?

