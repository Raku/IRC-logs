[00:00] <jnthn> No, I'm not sure where hits it

[00:00] <timotimo> i'll let the branch rest for a little longer then and drive home for now

[00:00] <jnthn> Can you add a debugging .WHAT on the thing that decont gives back?

[00:00] <timotimo> can do

[00:00] *** dmol joined
[00:03] <timotimo> oh, i'm still building for two backends

[00:03] <diakopter> jnthn: won't the .WHAT box it automatically?

[00:04] <timotimo> this could take a few seconds longer ...

[00:04] <diakopter> jnthn: oh nm, I suppose that's fine :)

[00:05] <timotimo> i wrote it in the parrot block instead of the !parrot block >_>

[00:07] <jnthn> diakopter: Oh, I just meant the .WHAT to help us debug it

[00:07] <Mouq> std: say 1 Δ 2; BEGIN sub infix:<Δ>(\a, \b) { &[-](b,a) } # Should this work?

[00:07] <camelia> std 8adbc60: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row at /tmp/3Ir3SuQy3Q line 1:␤------> [32msay 1 [33m⏏[31mΔ 2; BEGIN sub infix:<Δ>(\a, \b) { &[-]([0m␤    expecting any of:␤      feed_separator␤ infix or meta-infix␤    infixed function␤       statement modif…»

[00:07] <Mouq> r-j: say 1 Δ 2; BEGIN sub infix:<Δ>(\a, \b) { &[-](b,a) } # Should this work?

[00:07] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[00:07] <Mouq> r-p: say 1 Δ 2; BEGIN sub infix:<Δ>(\a, \b) { &[-](b,a) } # Should this work?

[00:07] <camelia> rakudo-parrot 3cef56: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/UqH02Sj4s8␤Two terms in a row␤at /tmp/UqH02Sj4s8:1␤------> [32msay 1 [33m⏏[31mΔ 2; BEGIN sub infix:<Δ>(\a, \b) { &[-]([0m␤    expecting any of:␤        postfix␤        infix st…»

[00:07] <jnthn> That looks like the most pointless ues of BEGIN ever... :P

[00:07] <jnthn> It doesn't work 'cus BEGIN takes a blorst and statementlist contextualizes %*LANG, iirc

[00:08] *** raiph left
[00:08] <jnthn> oh, no, it's a statement

[00:08] <jnthn> hmm

[00:08] <jnthn> oh..

[00:08] <jnthn> But of course

[00:08] <Mouq> jnthn: I ask because it has implications for something like this:

[00:08] <jnthn> You still don't define the operator

[00:08] <Mouq> std: sub infix:["\x227c"](\a, \b) { 1 + 2 }; say 1 ≼ 2;

[00:08] <camelia> std 8adbc60: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused at /tmp/W0Jjey5g97 line 1:␤------> [32mfix:["\x227c"](\a, \b) { 1 + 2 }; say 1 [33m⏏[31m≼ 2;[0m␤    expecting any of:␤  feed_separator␤ infix or meta-infix␤    infixed function␤       statement modifier loop␤P…»

[00:08] <jnthn> I mean, the BEGIN is pointless because it's a sub declaration which is already compile time

[00:09] <jnthn> The Δ still needs to be declared so the parser knows about it

[00:09] <Mouq> I already knew it wouldn't work because of how the parser works

[00:09] <jnthn> I think the latest one you just mentioned should work, though

[00:10] <jnthn> I mean, "\x227c" is constant at compile time.

[00:10] <jnthn> I don't see how the two relate, fwiw :)

[00:10] <jnthn> The first is about one-pass parsing, the second is about what counts as constant, afaict.

[00:10] <timotimo> running into some trouble with debugging

[00:12] *** Psyche^_ joined
[00:13] <Mouq> jnthn: Alright. So then something like: sub infix:["{chr(4*2207)}"](\a, \b) { 1 + 2 }; say 1 ≼ 2; shouldn't work

[00:14] <jnthn> Mouq: I think that counts as pushing your luck... :)

[00:14] <jnthn> Mouq: but TimToady will probably come and tell us, "yeah, that should work" :P

[00:15] <Mouq> r: eval "sub infix:[{chr(4*2207)}](\a, \b) { 1 + 2 }; say 1 ≼ 2;" # :D

[00:15] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[00:15] <camelia> ..rakudo-parrot 3cef56: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling eval_0␤Preceding context expects a term, but found infix ≼ instead␤at eval_0:1␤------> [32msub infix:[≼[33m⏏[31m](, ) 3; say 1 ≼ 2;[0m␤»

[00:15] <Mouq> r: eval "sub infix:<{chr(4*2207)}>(\a, \b) { 1 + 2 }; say 1 ≼ 2;" # :D

[00:15] <Mouq> r: eval "sub infix:<{chr(4*2207)}>(\\a, \\b) { 1 + 2 }; say 1 ≼ 2;" # :D

[00:15] <Mouq> Bluh

[00:16] <Mouq> r: eval "sub infix:<{chr(4*2207)}>(\\a, \\b) \{ 1 + 2 \}; say 1 ≼ 2;" # :D

[00:16] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[00:16] <camelia> ..rakudo-parrot 3cef56: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling eval_0␤Malformed parameter␤at eval_0:1␤------> [32msub infix:<≼>([33m⏏[31m, ) 3; say 1 ≼ 2;[0m␤    expecting any of:␤        colon pair␤        quote words␤»

[00:16] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[00:16] <camelia> ..rakudo-parrot 3cef56: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling eval_0␤Missing block␤at eval_0:1␤------> [32msub infix:<≼>(\a, \b) [33m⏏[31m3; say 1 ≼ 2;[0m␤    expecting any of:␤        new term to be defined␤        constraint␤»

[00:16] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[00:16] <camelia> ..rakudo-parrot 3cef56: OUTPUT«3␤»

[00:19] * timotimo drives home now

[00:21] *** risou_awy is now known as risou

[00:26] <Mouq> Is anyone going to look at Arcterus' PR for Rakudo? https://github.com/rakudo/rakudo/pull/217 His stuff is kind of getting ignored for whatever reason

[00:28] <jnthn> Mouq: It's meant to be on my plate but my plate is overflowing as usual :/

[00:29] <jnthn> Last time I reviewed the stuff it looked overall sane

[00:30] <pippo> r: my @array; for ^10_000 {@array[$_]=$_}; say @array

[00:30] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[00:30] <camelia> ..rakudo-parrot 3cef56: OUTPUT«0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 …»

[00:31] <pippo> r: my @array; for ^10_000 {@array[$_]=$_}; say @array

[00:31] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[00:31] <camelia> ..rakudo-parrot 3cef56: OUTPUT«0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 …»

[00:35] <pippo> my @array; for ^1_000 {@array[$_]=$_}; my $file = @array.join(";"); my @array_clone=$file.split(";"); say @array_clone

[00:35] <pippo> r: my @array; for ^1_000 {@array[$_]=$_}; my $file = @array.join(";"); my @array_clone=$file.split(";"); say @array_clone

[00:35] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[00:35] <camelia> ..rakudo-parrot 3cef56: OUTPUT«0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 …»

[00:36] <pippo> r: my @array; for ^10_000 {@array[$_]=$_}; my $file = @array.join(";"); my @array_clone=$file.split(";"); say @array_clone

[00:36] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[00:36] <camelia> ..rakudo-parrot 3cef56: OUTPUT«0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 …»

[00:37] <pippo> r: my @array; for ^10_000 {@array[$_]=$_}; my $file = @array.join(";"); my @array_clone=$file.split(";"); say @array_clone

[00:38] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[00:38] <camelia> ..rakudo-parrot 3cef56: OUTPUT«0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 …»

[00:38] *** pippo left
[00:39] *** risou is now known as risou_awy

[00:42] *** dmol left
[00:48] <timotimo> i'm trying to add debug stuff to the creation of the buildplan, but that's kinda exploding

[00:49] <timotimo> nqp-j: say(nqp:isnull(nqp:null_s()));

[00:49] <camelia> nqp-jvm: OUTPUT«Confused at line 2, near "say(nqp:is"␤  in panic (gen/jvm/stage2/NQPHLL.nqp:377)␤  in comp_unit (gen/jvm/stage2/NQP.nqp:922)␤  in TOP (gen/jvm/stage2/NQP.nqp:820)␤  in parse (gen/jvm/stage2/QRegex.nqp:1247)␤  in parse (gen/jvm/stage2/NQPHLL.nqp:1376)␤  in…»

[00:50] <timotimo> nqp-j: say(nqp::isnull(nqp::null_s()));

[00:50] <camelia> nqp-jvm: OUTPUT«0␤»

[00:51] <BenGoldberg> r-p: my @a is default(42); say @a[5]

[00:51] <camelia> rakudo-parrot 3cef56: OUTPUT«42␤»

[00:51] <BenGoldberg> r-p: my @a is default (42); say @a[5]

[00:51] <camelia> rakudo-parrot 3cef56: OUTPUT«True␤»

[00:51] * BenGoldberg is confused

[00:51] <BenGoldberg> Why does that space change it to True?

[00:54] <BenGoldberg> r-j: 0

[00:54] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[00:54] <timotimo> a mere say in the create buildplan gives me a null pointer exception :|

[00:55] <timotimo> ah, but an nqp::say seems to work

[00:55] <Mouq> rn: say "a"~~token a { <sym> }

[00:55] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[00:55] <camelia> ..rakudo-parrot 3cef56: OUTPUT«Useless declaration of a has-scoped method in mainline␤｢｣␤ sym => ｢｣␤␤»

[00:55] <camelia> ..niecza v24-98-g473bd20: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Methods must be used in some kind of package at /tmp/Ortg2lMSTS line 1:␤------> [32msay "a"~~token a [33m⏏[31m{ <sym> }[0m␤␤<sym> is only valid in multiregexes at /tmp/Ortg2lMSTS line 1:␤------> [32msa…»

[00:55] <BenGoldberg> r-j: my $t = token { <sym> }; say "a" ~~ $t;

[00:56] <BenGoldberg> r-p: my $t = token { <sym> }; say "a" ~~ $t;

[00:56] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[00:56] <camelia> rakudo-parrot 3cef56: OUTPUT«｢｣␤ sym => ｢｣␤␤»

[00:56] *** colomon joined
[00:56] <BenGoldberg> r-p: say "a" ~~ token { <sym> };

[00:56] <camelia> rakudo-parrot 3cef56: OUTPUT«｢｣␤ sym => ｢｣␤␤»

[00:56] <BenGoldberg> r-p: say "a" ~~ token a { <sym> };

[00:56] <camelia> rakudo-parrot 3cef56: OUTPUT«Useless declaration of a has-scoped method in mainline␤｢｣␤ sym => ｢｣␤␤»

[00:56] <Mouq> n: grammar A {token a { <sym> }}; A.parse("a")

[00:56] <camelia> niecza v24-98-g473bd20: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤<sym> is only valid in multiregexes at /tmp/JGRdZPIluw line 1:␤------> [32mgrammar A {token a { <sym[33m⏏[31m> }}; A.parse("a")[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib…»

[00:57] <Mouq> Niecza gets a cookie :)

[00:57] <BenGoldberg> n: my $t = token { <sym> }; say "a" ~~ $t;

[00:57] <camelia> niecza v24-98-g473bd20: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤<sym> is only valid in multiregexes at /tmp/0wgJbrdMmz line 1:␤------> [32mmy $t = token { <sym[33m⏏[31m> }; say "a" ~~ $t;[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/COR…»

[00:57] <BenGoldberg> n: my $t = rule { <sym> }; say "a" ~~ $t;

[00:58] <camelia> niecza v24-98-g473bd20: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤<sym> is only valid in multiregexes at /tmp/csPYjiURBm line 1:␤------> [32mmy $t = rule { <sym[33m⏏[31m> }; say "a" ~~ $t;[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE…»

[00:59] *** woosley joined
[01:00] <Mouq> std: grammar A {token a { <sym> }};

[01:00] <camelia> std 8adbc60: OUTPUT«ok 00:01 124m␤»

[01:01] <Mouq> n: grammar A {token a { <sym> }; token sym { "This shouldn't blow up" } };

[01:01] <camelia> niecza v24-98-g473bd20: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤<sym> is only valid in multiregexes at /tmp/5oK41JSCcq line 1:␤------> [32mgrammar A {token a { <sym[33m⏏[31m> }; token sym { "This shouldn't blow up[0m␤␤Unhandled exception: Check failed␤␤  at /home/…»

[01:01] <Mouq> Niecza gets half a cookie

[01:02] <Mouq> Hmm. Maybe

[01:07] <diakopter> I just realized.. the more you spam #perl6, Programming Perl 6 is delayed by 1 more second...

[01:07] <diakopter> <WINK>

[01:23] <timotimo> wtf, this makes no sense

[01:24] <timotimo> unless of course there is some kind of recursion that i'm not seeing

[01:24] <timotimo> doesn't seem to be the case

[01:25] <timotimo> i've sprinkled the whole method with debug says, and it seems to not happen inside the while loop at all, even though that's what i see in the backtrace

[01:29] <diakopter> ETOOMANYSPRINKLES

[01:33] <timotimo> so ... apparently the posat that gets the code is the culprit? but ... whaaat?

[01:37] <timotimo> so, the result of 4 + $typespec is not unboxable to a native int?

[01:37] <timotimo> r-j: say nqp::objprimspec(my int $x).WHAT;

[01:37] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[01:38] <timotimo> bluh

[01:39] <benabik> r-j: # timeout

[01:39] <timotimo> using nqp::add_i instead of + seems to fix that little bit, great! >_>

[01:39] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[01:39] <benabik> rakudo:

[01:40] <Mouq> benabik: camelia doesn't bother if you don't give it a program

[01:42] <timotimo> jnthn: Cannot unbox a type object is the result of nqp::say(nqp::decont(%attrinit{$key_name}).WHAT)

[01:42] <timotimo> oh, i may need to just-say that

[01:44] <benabik> Mouq: I was just trying to find the minimal program that times out.  I guess less than just a comment isn't going to happen.

[01:45] <Mouq> r-j: (timeout)

[01:45] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[01:45] <Mouq> rnp: say (timeout)

[01:46] <Mouq> rnp: say "(timeout)" # dummy

[01:46] <Mouq> Do we no longer have rnp mapped?

[01:46] <Mouq> rn: say "(timeout)" # dummy

[01:46] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[01:46] <camelia> ..rakudo-parrot 3cef56, niecza v24-98-g473bd20: OUTPUT«(timeout)␤»

[01:47] <timotimo> great, i got it to work on rakudo-jvm

[01:47] <timotimo> the only thing wrong with the code was the 4 + $typecode

[01:49] <benabik> Finally!  I have nqp-[pmj] and rakudo-[pj] installed.

[01:49] <Mouq> nqp: grammar A { token TOP { <a>* }; proto token a {*}; token a:!sym { <sym> } }; say(A.parse("000000")) #heh

[01:49] <camelia> nqp-moarvm, nqp-jvm, nqp-parrot: OUTPUT«000000␤»

[01:49] <timotimo> oh you silly :)

[01:51] * Mouq can't figure out where, but a:!b becomes a:b<0> and a:b becomes a:b<1> somewhere in the parse stage of NQP

[01:52] <Mouq> Or... somewhere

[01:53] <timotimo> easy

[01:53] <timotimo> method colonpair in src/NQP/Actions.nqp

[01:53] <timotimo> it takes the second branch and puts the IVal there with !$<not>

[01:54] <Mouq> Okay, but how does that value end up in %*RX<name>?

[01:54] <Mouq> Oh

[01:54] <Mouq> It actually does take the .ast

[01:54] * Mouq is dumb

[01:54] <timotimo> where in the spectests do i put tests for the buildplan?

[01:55] <timotimo> ah, easy

[01:56] <timotimo> S12-construction seems to be the place

[01:57] *** PZt joined
[02:03] *** SmokeMachine joined
[02:06] *** pmurias left
[02:08] *** SmokeMachine left
[02:09] *** SmokeMachine joined
[02:10] <timotimo> i should hit the hay and continue this tomorrow.

[02:13] *** SmokeMachine left
[02:22] *** risou_awy is now known as risou

[02:25] *** wayland-mobile joined
[02:29] <dalek> nqp: 1931744 | Mouq++ | src/ (3 files):

[02:29] <dalek> nqp: Allow multiregexes of the form category:usage

[02:29] <dalek> nqp: 

[02:29] <dalek> nqp: Before, we always had to use "category:sym<usage>" even if "usage" was

[02:29] <dalek> nqp: entirely <ident>

[02:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/193174476a

[02:34] <Mouq> nqp: grammar A { rule TOP { <fruit> + }; proto token fruit {*}; token fruit:sym<banana> { <sym> s? };}; say(A.parse("banana bananas banana"))

[02:34] <camelia> nqp-moarvm, nqp-jvm, nqp-parrot: OUTPUT«banana bananas banana␤»

[02:35] <Mouq> fruit:sym<banana> can now just be fruit:banana, is all that does. Of course, it's not bootstrapped and won't work in Rakudo Perl, so the only place you can really use it ATM is the Rakudo NQP source

[02:39] *** risou is now known as risou_awy

[03:01] <lue> I still get those failures. :(

[03:02] <lue> which means my test modifications didn't get pulled. Considering the returned value is correct, I say the spectest passed successfully, but I'd like further input before moving to modules-test

[03:04] <Mouq> lue: "[S05-mass] Fix punctuation tests."?

[03:05] <lue> yes.

[03:07] <BenGoldberg> r: print "(timeout)"

[03:07] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«(timeout)»

[03:07] *** wayland-mobile left
[03:07] <BenGoldberg> :)

[03:07] <BenGoldberg> r: 1

[03:08] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[03:08] <camelia> ..rakudo-parrot 3cef56: ( no output )

[03:24] *** dansamo joined
[03:26] <lue> Spectest has two failures, one's my fault, and the other can't be changed unless someone moves tags around in rakudo to get a rakudo that pulls the updated specs. I'll go through the rest of Step 10 and then wait for someone to respond.

[03:30] *** benabik left
[03:40] <lue> Welp, DBIish failed. (That's the only broken one by test)

[03:41] <lue> ✘ ⑩ (Release PAUSED until further notice)

[03:46] <lue> jnthn, moritz, other release pros: what should I do about https://gist.github.com/lue/7188705 (ignore the access failure, I have a noatime mount) and the failed DBIish module test? I did fix the failing charset test (¶ and § *are* punctuation), but it appears R* isn't pulling the fixed version.

[04:17] *** dansamo left
[04:22] *** risou_awy is now known as risou

[04:39] *** risou is now known as risou_awy

[04:43] *** fridim_ left
[04:46] * TimToady would like to point out to various and sundry that infix:<{...}> or infix:<xdeaf> will never interpolate inside <>

[04:46] <TimToady> we've seen that braino a couple times in the last several days now

[04:47] <lue> infix:«{...}» works though, right?

[04:48] *** BenGoldberg left
[04:48] <TimToady> BenGoldberg: re http://irclog.perlgeek.de/perl6/2013-10-28#i_7774302 a trait is just sugar for an colonpair, so without an argument defaults to True; dunno what the (42) is doing other than maybe poking a subsig pattern into the signature

[04:50] <TimToady> lue: presumably it oughta do that, unless people think it should work like {} in shell quoting

[04:50] <lue> "it" being «» or <> ?

[04:51] <TimToady> {}

[04:51] <lue> (2nd it)

[04:51] <TimToady> «» is assumed already

[04:51] <lue> assumed when? infix:<X> ? inside {}?

[04:52] <TimToady> you already assumed «» in your question!

[04:53] <TimToady> you asked if «{...}» should work

[04:53] <TimToady> r: say « a { 40 + 2 } z »

[04:54] * lue gets a hand on his caffeine before continuing... his brain must be slowing down :)

[04:54] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[04:54] <camelia> ..rakudo-parrot 3cef56: OUTPUT«a42z␤»

[04:54] <TimToady> rp++

[04:54] <lue> r-j: say "Hi TimToady o/"

[04:54] <TimToady> so it looks liek it works in rp anyhoo

[04:54] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[04:54] * lue suspects the startup time is too much for camelia

[04:55] <TimToady> rj also has problems from time to time with recursive errors, but you'd think that'd show up in the message if so

[04:55] <TimToady> j: say 42

[04:55] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[04:56] <lue> j: True

[04:56] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[04:56] <JimmyZ> j: say (timeout)

[04:56] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[04:57] <JimmyZ> look, it works

[04:57] <lue> that's not good; it doesn't even parse the syntax!

[04:57] <lue> std: say (timeout)

[04:57] <TimToady> consistency is overrated in this case

[04:57] *** preflex_ joined
[04:57] *** ChanServ sets mode: +v preflex_

[04:57] <camelia> std 8adbc60: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤ 'timeout' used at line 1␤Check failed␤FAILED 00:01 123m␤»

[04:57] <TimToady> j: 1 2

[04:57] <Mouq> rn: sub infix:«\x227c»(\a, \b) { 1 + 2 }; say 1 ≼ 2;

[04:57] *** preflex left
[04:57] *** preflex_ is now known as preflex

[04:58] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[04:58] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[04:58] <camelia> ..rakudo-parrot 3cef56, niecza v24-98-g473bd20: OUTPUT«3␤»

[04:59] <TimToady> j apparently can't even get the parser going long enough to detect a syntax error

[04:59] * TimToady wonders if it's fighting for cpu at the moment

[04:59] * lue would like CORE.setting to not b0rk up unicode parsing, so all those ugly infix:["x2A03"]'s can be transformed to infix:<⨃>

[04:59] <TimToady> the limit is wall clock time, isn't it?

[05:01] <lue> You should slow down your clock to give it a better chance then :P

[05:02] <moritz> \o

[05:02] <lue> o/

[05:04] <lue> moritz: I had some spectest failures on ⑩ earlier, if you're backlogging :)

[05:10] <moritz> lue: I am; IMHO you should proceed anyway

[05:10] <lue> did you see that DBIish failed its tests too?

[05:10] <moritz> lue: since the compiler release tested successfully for several people, we can discount the failures as platform specific for now

[05:10] <moritz> lue: no, I did not

[05:11] <moritz> lue: have a link to the failures?

[05:11] * lue updates the gist to include broken module

[05:12] <lue> https://gist.github.com/lue/7188705

[05:12] <lue> moritz: ^^^ (I know the noatime is my fault, and I personally think rakudo is correcter than the specific spectest revision it pulls on punctuation. So only the module concerns me.)

[05:13] <moritz> lue: DBIish seems to be caused by the rakudo regression regarding whatever-currying of *[0] etc

[05:13] <moritz> and work-aroundable

[05:13] <moritz> so I'll do that soon

[05:14] <moritz> but first, breakfast for $daughter

[05:15] <lue> for @family { &breakfast; POST { query "proceed to ⑪ or pause, then?" } } # :)

[05:17] *** kaleem joined
[05:21] *** [Sno] left
[05:27] <lue> (in any case, I suspect 12-15 at least will happen tomorrow)

[05:43] *** xenoterracide left
[05:45] <lue> ♘ all o/

[05:53] <dalek> DBIish: b0c5d75 | moritz++ | lib/DBDish/Pg.pm6:

[05:53] <dalek> DBIish: work around rakudo regression

[05:53] <dalek> DBIish: 

[05:53] <dalek> DBIish: lue++ for noticing it during the R* release process

[05:53] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/b0c5d75f7f

[05:53] *** dansamo joined
[05:55] <dalek> rakudo/nom: a7f7522 | benabik++ | tools/build/ (2 files):

[05:55] <dalek> rakudo/nom: Teach j-install about DESTDIR

[05:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a7f7522bde

[06:14] *** sqirrel joined
[06:16] *** FROGGS joined
[06:19] *** xenoterracide joined
[06:23] *** risou_awy is now known as risou

[06:42] *** risou is now known as risou_awy

[06:56] *** sqirrel left
[06:58] *** risou_awy is now known as risou

[07:01] *** denis_boyun joined
[07:02] *** [Sno] joined
[07:10] *** ssutch left
[07:21] *** denis_boyun left
[07:34] *** dmol joined
[08:01] *** zakharyas joined
[08:07] *** FROGGS[mobile] joined
[08:19] *** PacoAir left
[08:24] <masak> moarning, #perl6

[08:24] <moritz> \o masak

[08:25] <sjn> o/

[08:27] <tadzik> masak! asdfmovie7 is out :D

[08:29] * masak .oO( the latest instalment in the asdf franchise )

[08:29] <FROGGS[mobile]> Morning

[08:29] <masak> good morning, FROGGS in a mobile.

[08:30] * masak has a mental image of rubbing a mobile phone with a piece of cloth, and FROGGS pops out all ghost-y and grants him three wishes

[08:31] <hoelzro> tadzik: what.

[08:31] * hoelzro is off to Youtube

[08:31] <tadzik> hah hah

[08:31] <tadzik> it has colours

[08:33] <hoelzro> mwahaha

[08:33] <hoelzro> Desmond the Moon Bear reprise!

[08:34] <FROGGS[mobile]> masak: what what do I wear in your phantasy?

[08:35] <FROGGS[mobile]> how was she called, beloved ginny?

[08:40] <FROGGS[mobile]> but maybe I would be more like Myrte

[08:40] <masak> :)

[08:40] <masak> FROGGS[mobile]: you're in a long stylish bathrobe which kinda morphs into mobile phone blue smoke.

[08:41] <FROGGS[mobile]> I am fine with that

[08:42] <FROGGS[mobile]> .oO( of course the smoke is blue, it is digital smoke) 

[08:47] *** fhelmberger joined
[08:56] <masak> of course.

[09:19] <diakopter> masak: without looking at the source, I'm guessing that the current macro implementation has to do hoop-jumping to save ASTs..?

[09:22] <diakopter> masak: I'm actually thinking about wicked things like macros working in string evals after they've been declared.. .oO( does that already work,ish? )

[09:24] <dalek> rakudo/nom: 27fcd70 | (Timo Paulssen)++ | src/ (2 files):

[09:24] <dalek> rakudo/nom: WIP: creating buildplan thingies for native attrs.

[09:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/27fcd703b9

[09:24] <dalek> rakudo/nom: 2e5e1e3 | (Timo Paulssen)++ | src/core/Mu.pm:

[09:24] <dalek> rakudo/nom: WIP

[09:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2e5e1e3a60

[09:24] <dalek> rakudo/nom: 6c853ea | (Timo Paulssen)++ | src/Perl6/Metamodel/BUILDPLAN.nqp:

[09:24] <dalek> rakudo/nom: make native attribute buildplan work on jvm, too.

[09:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6c853eabd4

[09:24] <dalek> rakudo/nom: 17ecfcc | (Tobias Leich)++ | src/ (2 files):

[09:24] <dalek> rakudo/nom: Merge pull request #224 from timo/nativeattr_buildplan

[09:24] <dalek> rakudo/nom: 

[09:24] <dalek> rakudo/nom: buildplan operations for native attributes

[09:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/17ecfcc334

[09:25] *** SamuraiJack_ joined
[09:26] *** xinming left
[09:27] *** xinming joined
[09:30] <masak> diakopter: I promise to backlog yesterday properly and ask followup questions when I have the cycles to process your insight.

[09:31] <masak> diakopter: hoop-jumping -- well, a Quasi needs to save the QAST as a data structure, because it has (unquote) holes in it that need to be filled.

[09:31] <masak> diakopter: I can easily believe that you have found a better way to do that.

[09:32] <diakopter> masak: perhaps.. it's pretty tenuous/shaky/amorphous

[09:32] <diakopter> but it may be more elegant, but then again might not be

[09:35] <diakopter> the "easy" way to do it would be to create a closure for each placeholder that runs a routine generated from the expression passed as the argument, and then for each "invocation" of the macro, it creates another closure with those arguments curried in

[09:36] <diakopter> "easy" in quotes because it's not super-efficient..

[09:36] *** daxim joined
[09:36] <diakopter> (as it could be if the code were duplicated/inlined

[09:36] <diakopter> )

[09:37] <masak> diakopter: I also want to make sure we don't trade away AST introspection.

[09:37] *** sqirrel joined
[09:37] <diakopter> how is that used?

[09:38] <diakopter> the only "problem" with the way I described it is it creates intermediate frames that the user might not have imagined

[09:41] <moritz> r: class A { has $!x = 42; method get() { ::('$!x') } }; say A.new.get

[09:41] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[09:41] <camelia> ..rakudo-parrot 3cef56: OUTPUT«No such symbol '$!x'␤  in method gist at gen/parrot/CORE.setting:11916␤  in method gist at gen/parrot/CORE.setting:974␤  in sub say at gen/parrot/CORE.setting:12816␤  in block  at /tmp/RqeHydpurZ:1␤  in any  at /tmp/RqeHydpurZ:1␤  in any  at …»

[09:41] *** dakkar joined
[09:41] *** spider-mario joined
[09:41] <moritz> should that work?

[09:42] <moritz> r: class A { has $!x = 42; }; my $obj = A.new; say A.^attributes[0].get_value($obj);

[09:42] <masak> moritz: my first thought is "I don't see why it shouldn't".

[09:43] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[09:43] <camelia> ..rakudo-parrot 3cef56: OUTPUT«42␤»

[09:43] <moritz> masak: my first thought was "rakudobug"

[09:43] <moritz> j: say 1

[09:43] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[09:43] <diakopter> moritz: it's been timing out on nearly everything since you went asleep

[09:43] <masak> omg, it's powered by moritz awakitude!

[09:44] <masak> quick, moritz never go to sleep

[09:45] <masak> p: class A { has $!x = 42; method get() { ::('$!x') } }; say A.new.get

[09:45] <camelia> rakudo-parrot 3cef56: OUTPUT«No such symbol '$!x'␤  in method gist at gen/parrot/CORE.setting:11916␤  in method gist at gen/parrot/CORE.setting:974␤  in sub say at gen/parrot/CORE.setting:12816␤  in block  at /tmp/fkp8grFoPq:1␤  in any  at /tmp/fkp8grFoPq:1␤  in any  at …»

[09:46] * masak submits rakudobug

[09:48] <diakopter> masak: but what if it's not private?

[09:49] <masak> diakopter: there's always a $!x container, whether it was declared as $!x or $.x

[09:50] <masak> r: class A { has $.x; method foo { say $!x } }; A.new(:x(42)).foo

[09:50] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[09:50] <camelia> ..rakudo-parrot 3cef56: OUTPUT«42␤»

[09:50] <masak> r: class A { has $.x; method foo { say ::('$!x') } }; A.new(:x(42)).foo

[09:50] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[09:50] <camelia> ..rakudo-parrot 3cef56: OUTPUT«No such symbol '$!x'␤  in method gist at gen/parrot/CORE.setting:11916␤  in method gist at gen/parrot/CORE.setting:974␤  in sub say at gen/parrot/CORE.setting:12816␤  in method foo at /tmp/UATA_w4Lf0:1␤  in block  at /tmp/UATA_w4Lf0:1␤  in an…»

[09:50] <diakopter> hm

[09:52] <moritz> rj: 1

[09:52] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[09:52] <moritz> rj: 1

[09:52] <camelia> rakudo-jvm 882e33: OUTPUT«Error while reading '/home/p6eval_eval/p6eval-token': Permission denied at /home/p6eval/jvm-rakudo/eval-client.pl line 10.␤»

[09:52] <masak> does anyone want to field finanalyst's FAQ on p6l?

[09:53] <moritz> rj: 1

[09:53] <camelia> rakudo-jvm 882e33: ( no output )

[09:53] <moritz> \o/

[09:53] <masak> it's about the "help, I can't fit a bunch of Xs into an Array of X!" again...

[09:53] <moritz> rj: say 42

[09:53] <camelia> rakudo-jvm 882e33: OUTPUT«42␤»

[09:53] <masak> moritz++

[09:53] <moritz> masak: no, that's not the frequently asked question

[09:54] <moritz> the FAQ is why   sub bla(Int @a) { ... }; my @b = 1, 2, 3; bla(@b) doesn't work

[09:54] <moritz> but he actually declared   my Int @b = ...

[09:54] <moritz> so I don't know off-hand want's wrong

[09:55] <moritz> or did I misread the question?

[09:56] <masak> hmmm

[09:56] <masak> does it have anything to do with the gather, perchance?

[09:56] <masak> r: my Int @b = gather for 1, 2, 3 { take $_ }; say @b

[09:56] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«1 2 3␤»

[09:56] <masak> guess not.

[09:56] <moritz> ok, bug_4.p6 is exactly the FAQ

[09:57] <moritz> masak: note that the assignment doesn't bomb, but the call

[09:58] <masak> *nod*

[09:58] <dalek> nqp: 0d34a3e | (Tobias Leich)++ | / (2 files):

[09:58] <dalek> nqp: mapped getlexrelcaller

[09:58] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0d34a3e510

[09:58] <masak> if it were up to me, we should never give the error message "expected 'Array[A]' but got 'Array[A]'" :)

[09:59] <moritz> yes, the error reporting is LTA

[09:59] <moritz> no, LTA doesn't cover it

[09:59] <moritz> it sucks.

[09:59] <masak> LTA does cover it, even when it's an understatement.

[09:59] <masak> LTA was the term I was looking for.

[10:11] <arnsholt> Oh, this is the "class + mixin !~~ class + same mixin" problem, isn't it?

[10:11] <moritz> probably

[10:12] <masak> when it's described like that, I'm not sure it's bug rather than a feature.

[10:12] <masak> r: role R {}; say (Int but R) === (Int but R)

[10:12] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«True␤»

[10:12] <masak> r: role R {}; say (Int but R) ~~ (Int but R)

[10:12] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«False␤»

[10:12] <masak> hrm.

[10:13] <masak> yeah, that's weird.

[10:14] *** pdurbin left
[10:15] <arnsholt> IIRC jnthn has said it's a bug, but also that it'll be a bit complicated to fix properly

[10:18] * masak can't recall whether it's in RT already

[10:19] <FROGGS> I'd think you would have to check if A consists of the same parts as B, rather than to check if they have the same WHICH

[10:19] <masak> that sounds... risky.

[10:19] <FROGGS> hmmm, why?

[10:20] <FROGGS> the problem is that you create a new thing in a signature, so it is always a new thing and will never match others

[10:21] <masak> by "same parts", do you mean "same mixins"?

[10:21] <masak> because you also have to check the order in which they were applied, and that order *may or may not matter*.

[10:22] <FROGGS> identical mixins

[10:22] <FROGGS> hmmm

[10:22] <FROGGS> well, if the order matters it must be checked, yes :o)

[10:23] <FROGGS> basically you would have to compare how both things where composed

[10:23] <FROGGS> so, do we record that?

[10:23] <FROGGS> like the build-plan

[10:24] <FROGGS> the blueprint

[10:24] *** darutoko joined
[10:31] *** donaldh joined
[10:37] *** colomon left
[10:38] *** colomon joined
[10:41] *** wsri joined
[10:43] <moritz> the merge base for Arcterus' pull request is from July

[10:44] <moritz> no wonder I get lots of conflicts while merging

[10:46] <masak> maybe rebase it locally?

[10:47] <moritz> problem is, I don't know much about the code he is touching

[10:47] <moritz> that makes it much harder for me to resolve conflicts

[10:48] <masak> *nod*

[11:01] *** FROGGS[mobile] left
[11:08] *** denisboyun joined
[11:10] *** risou is now known as risou_awy

[11:12] *** fhelmberger left
[11:16] *** fhelmberger joined
[11:19] *** lizmat joined
[11:25] <diakopter> Beyond Less Than Awesome

[11:27] *** lue joined
[11:27] *** rindolf joined
[11:28] <masak> well, don't forget that "Less Than Awesome" was always meant as an understatement, implicitly meaning "this sucks".

[11:28] <masak> it's only because it's now become so ingrained that we feel it's not enough.

[11:31] *** pernatiy joined
[11:44] <dalek> roast: 92e4192 | (Elizabeth Mattijsen)++ | S02-types/whatever.t:

[11:44] <dalek> roast: Unfudge now passing tests, timotimo++

[11:44] <dalek> roast: review: https://github.com/perl6/roast/commit/92e419224d

[11:46] <lizmat> did we recently add § and ¶ as punctuation chars ?

[11:46] <lizmat> sorry, remove as punctuation chars ?

[11:47] <lizmat> t/spec/S05-mass/charsets.t is failing test #10 because of that, at least on parakudo

[11:49] <lizmat> or did lue forget to add a "2" to the todo

[11:53] *** pochi_ joined
[11:53] *** jnthn_ joined
[11:54] *** mathw_ joined
[11:54] *** [particle]1 joined
[11:57] <dalek> nqp: ffcebf9 | (Tobias Leich)++ | src/vm/ (24 files):

[11:57] <dalek> nqp: make nqp::backendconfig available for all backends

[11:57] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ffcebf9ef3

[11:58] *** jferrero joined
[11:59] <dalek> roast: 3e12598 | (Elizabeth Mattijsen)++ | S02-types/native.t:

[11:59] <dalek> roast: Added tests for #102416

[11:59] <dalek> roast: review: https://github.com/perl6/roast/commit/3e12598206

[11:59] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=102416

[11:59] <FROGGS> nqp: say($_.key) for nqp::backendconfig() # this should work in a few(?) minutes

[11:59] <camelia> nqp-moarvm: OUTPUT«ccoptiflags␤uvrule␤tomobjects␤ldshared␤sharule␤ccinstflags␤ldlibs␤ldimp␤shaobjects␤hasreadline␤mtclean␤ccdefflags␤obj␤ldflags␤lddir␤name␤noreturnattribute␤dllexport␤defs[0]␤defs[1]␤dcclean␤moar␤ldrpath␤dcrule␤ldusr…»

[11:59] <camelia> ..nqp-parrot: OUTPUT«Error while compiling block : Error while compiling op for (source text: "say($_.key) for nqp::backendconfig() # this should work in a few(?) minutes"): Error while compiling op backendconfig (source text: "nqp::backendconfig()"): No registered operation handler f…»

[11:59] <camelia> ..nqp-jvm: OUTPUT«No registered operation handler for 'backendconfig'␤  in compile_op (gen/jvm/stage2/QAST.nqp:231)␤  in as_jast (gen/jvm/stage2/QAST.nqp:3696)␤  in as_jast (gen/jvm/stage2/QAST.nqp:2971)␤  in  (gen/jvm/stage2/QAST.nqp:1207)␤  in  (gen/jvm/stage2/QAST.nqp:228…»

[11:59] *** denisboyun left
[12:02] <lizmat> n: my @a = 0..4; @a.=[1, 2];

[12:02] <camelia> niecza v24-98-g473bd20: ( no output )

[12:02] <lizmat> n: my @a = 0..4; @a.=[1, 2]; say @a

[12:02] <camelia> niecza v24-98-g473bd20: OUTPUT«1 2␤»

[12:02] <lizmat> n: my @a = 0..4; @a.=[1, 2]; say @a.perl

[12:02] <camelia> niecza v24-98-g473bd20: OUTPUT«[1, 2].list␤»

[12:03] <lizmat> n: my @a = 0..4; @a=[1, 2]; say @a.perl

[12:03] <camelia> niecza v24-98-g473bd20: OUTPUT«[[1, 2]].list␤»

[12:03] <lizmat> n: my @a = 0..4; @a=(1, 2); say @a.perl

[12:03] <camelia> niecza v24-98-g473bd20: OUTPUT«[1, 2].list␤»

[12:03] *** kaleem left
[12:04] <lizmat> n: my @a = 0..4; my $b=[1,2]; @a.=$b; say @a.perl

[12:04] <camelia> niecza v24-98-g473bd20: OUTPUT«Unhandled exception: Unable to resolve method postcircumfix:<( )> in type Array␤  at /tmp/L7VIX4riYw line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4583 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4584 (modul…»

[12:04] <lizmat> r: my @a = 0..4; my $b=[1,2]; @a.=$b; say @a.perl

[12:04] <camelia> rakudo-jvm 882e33: OUTPUT«No such method 'postcircumfix:<( )>' for invocant of type 'Array'␤  in any  at gen/jvm/BOOTSTRAP.nqp:1658␤  in method dispatch:<.=> at gen/jvm/CORE.setting:1129␤  in block  at /tmp/qb9GOnVq4z:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1084␤  in …»

[12:04] <camelia> ..rakudo-parrot 3cef56: OUTPUT«No such method 'postcircumfix:<( )>' for invocant of type 'Array'␤  in any  at gen/parrot/BOOTSTRAP.nqp:1687␤  in any  at gen/parrot/BOOTSTRAP.nqp:1669␤  in method dispatch:<.=> at gen/parrot/CORE.setting:1138␤  in block  at /tmp/_vg0NCwkvs:1␤ …»

[12:05] <lizmat> masak: apart from it being legal in STD, what does the .=[] syntax bring exactly?

[12:05] <FROGGS> r: my @a; my $b = 'perl'; say @a.=$b

[12:05] <camelia> rakudo-parrot 3cef56: OUTPUT«No such method 'postcircumfix:<( )>' for invocant of type 'Str'␤  in any  at gen/parrot/BOOTSTRAP.nqp:1687␤  in any  at gen/parrot/BOOTSTRAP.nqp:1669␤  in method dispatch:<.=> at gen/parrot/CORE.setting:1138␤  in block  at /tmp/eA_xRF628z:1␤  i…»

[12:05] <camelia> ..rakudo-jvm 882e33: OUTPUT«No such method 'postcircumfix:<( )>' for invocant of type 'Str'␤  in any  at gen/jvm/BOOTSTRAP.nqp:1658␤  in method dispatch:<.=> at gen/jvm/CORE.setting:1129␤  in block  at /tmp/j8PRltvuN6:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1084␤  in an…»

[12:05] <lizmat> this wrt #120383

[12:05] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120383

[12:06] <masak> lizmat: it allows me to reassign an array to a slice of that array.

[12:06] <masak> lizmat: @a.=[@slice] is a short form for @a = @a[@slice]

[12:06] <masak> lizmat: beyond that, I don't quite understand the question :)

[12:07] <lizmat> ah, ok, better use different values in examples then, as in this case the indexes where the same as the values

[12:07] <lizmat> which sort of clouds the issue  :-)

[12:07] <masak> ah; sorry, didn't mean to use a confusing example... :)

[12:07] * lizmat writes a test

[12:07] <masak> lizmat++

[12:10] <lizmat> this looks indeed as fallout from the [] {} method -> sub migration, wouldn't you say, masak ?

[12:14] <masak> that was my suspicion, but I wasn't sure.

[12:14] <masak> lunch &

[12:31] <dalek> nqp: c91640d | (Tobias Leich)++ | docs/ops.markdown:

[12:31] <dalek> nqp: document getlex_n<[inso]> and bindlex_n<[inso]>

[12:31] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c91640d748

[12:31] * [Coke] ~~ and heads off to work.

[12:35] <arnsholt> Does anyone happen to know who created most of the tags in the NQP issues queue?

[12:36] <FROGGS> arnsholt: you mean the seven labels?

[12:36] <arnsholt> Yeah

[12:36] <FROGGS> no, is that important to know?

[12:36] <arnsholt> Or more specifically, the all uppercase ones (TESTNEEDED, PARROT)

[12:37] <arnsholt> Just curious. I'd prefer them to be cased normally (and maybe even a space, "Test needed"), but I'm not sure if it's intended on jnthn's part or some such

[12:37] <FROGGS> http://irclog.perlgeek.de/perl6/2013-10-21#i_7740656

[12:37] <arnsholt> Oooh, cheers!

[12:38] <arnsholt> I suspect the all uppercase may have happened because initially we had two labels: JVM and LHF

[12:38] <FROGGS> yeah

[12:38] <FROGGS> but I'd prefer "Parrot" too

[12:39] * arnsholt renames

[12:39] <arnsholt> There

[12:44] <dalek> roast: cc153df | (Elizabeth Mattijsen)++ | S09-subscript/slice.t:

[12:44] <dalek> roast: Added tests for #120383

[12:44] <dalek> roast: review: https://github.com/perl6/roast/commit/cc153df758

[12:44] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120383

[12:49] <dalek> nqp: dcfdfe2 | (Tobias Leich)++ | docs/ops.markdown:

[12:49] <dalek> nqp: fix getlex and bindlex

[12:49] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dcfdfe22f4

[13:03] *** SamuraiJack_ left
[13:05] <tadzik> synopsebot, u so clever

[13:10] *** jnap joined
[13:10] *** risou_awy is now known as risou

[13:11] *** fhelmberger_ joined
[13:11] *** rurban joined
[13:14] *** fhelmberger left
[13:18] *** _ilbot left
[13:18] *** _ilbot joined
[13:21] *** fhelmberger joined
[13:22] *** fhelmberger_ left
[13:25] *** sqirrel left
[13:26] *** risou is now known as risou_awy

[13:29] *** rurban left
[13:34] *** colomon left
[13:38] *** colomon joined
[13:40] <dalek> nqp: 61e97a9 | (Tobias Leich)++ | docs/ops.markdown:

[13:40] <dalek> nqp: documented getlex[outer|caller|rel|reldyn|...]

[13:40] <dalek> nqp: review: https://github.com/perl6/nqp/commit/61e97a9483

[13:41] <colomon> JSON::Tiny is failing two tests?

[13:41] <colomon> the smoker is completely borked because it cannot rebuild panda right now...

[13:42] *** bluescreen10 joined
[13:42] <FROGGS> colomon: can you already paste something wrt panda?

[13:43] <colomon> ==> Testing JSON::Tiny

[13:43] <colomon> t/01-parse.t ...... Failed 2/90 subtests

[13:43] <colomon> is the relevant bit, I think

[13:43] *** benabik joined
[13:46] *** fridim_ joined
[13:46] *** ajr joined
[13:47] *** ajr is now known as Guest21062

[13:47] *** Guest21062 is now known as ajr_

[13:48] <lizmat> didn't moritz recently committed some sigwhitespace related fixes for JSON::Tiny ?

[13:48] <lizmat> *commit

[13:49] *** rurban joined
[14:10] *** denis_boyun joined
[14:15] *** PacoAir joined
[14:22] *** kaare__ joined
[14:28] *** sqirrel joined
[14:30] <masak> r: my &oct = { :8(~$_) }; my &dec = { :10(~$_) }; say (oct 31) == (dec 25)

[14:31] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«True␤»

[14:31] <masak> I couldn't get :8(~*) to work; nor do I know if it should...

[14:34] <lizmat> so does that mean Christmas is 3 days from now?

[14:36] *** fridim_ left
[14:39] <PerlJam> On #perl6, it's always Christmas  :)

[14:40] <moritz> lizmat: I did

[14:43] *** rurban_ joined
[14:43] *** denis_boyun left
[14:44] <lizmat> re: #120383, the error is generated in src/Perl6/Actions, line 3753

[14:44] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120383

[14:44] <lizmat> but I think the cause is deeper, since the past.op *not* be callmethod at all in the case of .=[]

[14:45] <lizmat> *should

[14:45] <rurban_> pointme: dalek

[14:45] <lizmat> but rather, it should be 'call'

[14:46] <masak> PerlJam: Christmas is already here, it's just unevenly distributed ;)

[14:47] <masak> rurban_: hm, 'pointme' sounds familiar -- what does/did it do?

[14:47] <masak> r: my @a = <foo bar baz>; say @a.[1]

[14:47] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«bar␤»

[14:47] <masak> r: my @a = <foo bar baz>; @a.=[1]; say @a

[14:47] <PerlJam> masak: exactly!

[14:47] <camelia> rakudo-parrot 3cef56: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/KPgpK0fADi␤Cannot use .= on a non-identifier method call␤at /tmp/KPgpK0fADi:1␤------> [32mmy @a = <foo bar baz>; @a.=[1][33m⏏[31m; say @a[0m␤»

[14:47] <camelia> ..rakudo-jvm 882e33: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/2UMo_8JCmd␤Cannot use .= on a non-identifier method call␤at /tmp/2UMo_8JCmd:1␤------> [32mmy @a = <foo bar baz>; @a.=[1][33m⏏[31m; say @a[0m␤»

[14:48] <masak> moritz: do the above two outputs differ? oh! the temp files :/

[14:48] <masak> lizmat: seems to me that whatever mechanism @a.[1] uses, @a.=[1] should use, too.

[14:51] <lizmat> moritz: I guess the tempfile names should be normalized in the comparison ?

[14:52] <rurban_> masak: It expanded the src url for the bots and more

[14:52] <rurban_> I couldn't find dalek on the web

[14:53] <FROGGS> dalek: help

[14:56] <diakopter> dalek itself just echos lines from a file # sorear++

[15:01] *** dmol left
[15:04] *** darutoko left
[15:11] *** risou_awy is now known as risou

[15:14] *** lowpor03 joined
[15:14] *** tipdbmp joined
[15:19] *** sqirrel left
[15:21] *** [Sno] left
[15:21] <dalek> rakudo/moar-support: 753af50 | (Tobias Leich)++ | src/Perl6/ (2 files):

[15:21] <dalek> rakudo/moar-support: added QAST::VM variants for moar idential to jvm

[15:21] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/753af50813

[15:23] <dalek> rakudo/moar-support: 6e556ae | (Tobias Leich)++ | src/vm/moar/ (2 files):

[15:23] <dalek> rakudo/moar-support: added p6capturelex, which really needs reviewing

[15:23] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/6e556aea4c

[15:23] <lizmat> seems the storm has died down here a bit, so we're out cycling&

[15:23] <FROGGS> lizmat: keep away from trees please :/

[15:24] <lizmat> we'll trie  :-)

[15:24] <FROGGS> :P

[15:25] <masak> we have a nice fresh wind going here too. it's rattling against the window panes.

[15:25] <TimToady> diakopter++ should also keep away from trees right now

[15:28] *** lowpor03 left
[15:28] *** risou is now known as risou_awy

[15:30] *** lowpor03 joined
[15:31] *** lowpor03 left
[15:32] <diakopter> TimToady++ should also tree away from keeps

[15:33] * TimToady might get more writing done in a keep...

[15:33] <TimToady> killing the trees comes later

[15:33] *** raiph joined
[15:33] <timotimo> moritz: you'll be glad to know, that the workaround you put into DBIish today for rakudo star can already be removed again for rakudo nom :)

[15:34] <diakopter> ..but them your knowledge of Perl 6 will become outdated.. oh wait....

[15:35] <TimToady> diakopter: maybe you should pull down one of those oxygen masks

[15:36] <diakopter> can't reach it from lying flat

[15:36] <diakopter> ..out

[15:36] <diakopter> er, *laying

[15:36] <diakopter> er

[15:36] <TimToady> either way you're hosed in English

[15:37] *** bluescreen10 left
[15:37] <TimToady> but I'm less likely to mistake you for a hen than for a liar :)

[15:37] *** bluescreen10 joined
[15:37] <TimToady> so I'd go with "laying" even if the proscriptivists proscribe it

[15:39] <dalek> roast: 9b8425a | (Timo Paulssen)++ | S12-construction/construction.t:

[15:39] <dalek> roast: tests for native attribute BUILDPLAN.

[15:39] <dalek> roast: review: https://github.com/perl6/roast/commit/9b8425a528

[15:42] *** atroxaper joined
[15:42] <atroxaper> Hello #perl6

[15:43] <diakopter> pregramming is hard; let's go scribing

[15:43] <tadzik> scrabbling

[15:44] <masak> scrobbling

[15:44] <TimToady> atroxaper: er, hello

[15:44] <atroxaper> Who can tell me how i can get something via network. Some http get request. I have tried to install LWP::Simple but panda said that tests fails.

[15:46] <FROGGS> atroxaper: I'd propose to fix LWP::Simple

[15:46] *** ajr_ left
[15:47] <FROGGS> (together)

[15:47] <tadzik> that'd be awesome

[15:47] <tadzik> as far as I remember from porting it to JVM, the chunked transfers seem to behave a bit strangely

[15:47] *** ajr joined
[15:47] <FROGGS> tadzik: is that a known issue?

[15:47] <tadzik> yes :(

[15:47] <FROGGS> :/

[15:47] <tadzik> maybe we need LWP::Simplier

[15:47] <diakopter> "patches compelled.."

[15:47] <benabik> Heh.  My terminal says: ./perl6-p CORE.setting has stages start, parse, syntaxcheck, ast, optimize, jast, classfile, jar

[15:48] *** ajr is now known as Guest17946

[15:48] <benabik> (The lovely confusion of parallel make.)

[15:48] <timotimo> %)

[15:48] <FROGGS> atroxaper: so, you are on the jvm?

[15:48] <tadzik> or look how panda fetches files over http

[15:48] <tadzik> (prepare a paperbag)

[15:49] <diakopter> .. and a caldera

[15:49] <tadzik> https://github.com/tadzik/panda/blob/master/lib/Panda/Ecosystem.pm#L54 ;)

[15:49] <atroxaper> FROGGS: no. I have win R* "This is perl6 version 2013.05 built on parrot 5.3.0 revision 0"

[15:49] <FROGGS> atrodo: ahh, a bit outdated though...

[15:50] <tadzik> I remember hacking Curl binding with bbkr++ on PLPW, but I don't remember if we got it to semi-work

[15:50] <timotimo> yeah, that's quite old

[15:50] <FROGGS> atroxaper: I think I got a 2013.09 on a windows box...

[15:50] <diakopter> FROGGS: ah well, I'll just  transliterate the parrot chain, since I can sorta tell what it does, but don't understand why

[15:50] <timotimo> windows, though ...

[15:50] <tadzik> https://github.com/bbkr/cURL may be worth a try

[15:51] * FROGGS starts his windows

[15:52] <timotimo> gentlemen, start your windows

[15:53] <atroxaper> FROGGS: i'm installing 2013.09 R* now

[15:53] <FROGGS> k

[15:56] *** Guest17946 left
[15:56] *** ajr_ joined
[15:57] *** sqirrel joined
[15:58] *** _ilbot left
[15:59] *** _ilbot joined
[15:59] <atroxaper> R* 2013.09 is even stranger... https://gist.github.com/atroxaper/7199471

[16:00] *** btyler joined
[16:01] *** bluescreen10 left
[16:02] *** Rotwang joined
[16:02] *** Rotwang left
[16:02] *** Rotwang joined
[16:02] <FROGGS> ahh, I know that one...

[16:03] <FROGGS> right after we made the 2013.09, we discovered that unlink does not delete protected files...

[16:03] <FROGGS> it was fixed a short while after the release though

[16:03] <timotimo> that seems to happen often :P

[16:03] <timotimo> that kind of thing

[16:03] <FROGGS> yeah

[16:04] <timotimo> just like all the unexpected fallout from the postcircumfix changes

[16:05] <atroxaper> FROGGS: what i should do with that?)

[16:05] <FROGGS> atroxaper: I am currently thinking about creating star 2013.10

[16:06] <FROGGS> does somebody know if lue got through it?

[16:06] <timotimo> not yet

[16:06] <atroxaper> It would be nice)

[16:06] <timotimo> 06:27 < lue> (in any case, I suspect 12-15 at least will happen tomorrow)

[16:07] <FROGGS> k

[16:08] <timotimo> did we get a fix for .=[] and such in?

[16:08] <timotimo> otherwise i could probably look at that now

[16:08] <FROGGS> timotimo: well, 2013.10 happened like more than a week ago

[16:09] <timotimo> er, i mean into nom

[16:09] <timotimo> today

[16:10] *** bluescreen10 joined
[16:11] <FROGGS> I'd still would build a star for 2013.10

[16:11] <atroxaper> FROGGS: So, should i wait 2013.10? Ans as i understand LWP:Simple is corrupted now?

[16:12] <FROGGS> atroxaper: I dont know what is wrong with LWP::Simple@rakudo-parrot

[16:12] <FROGGS> you can always build rakudo HEAD, and then fetch panda on your own

[16:13] <FROGGS> if you have git and MSVC and activeperl, and ...

[16:14] <atroxaper> FROGGS: ok. I'l try. It's will a usefull experiens i think )

[16:14] <FROGGS> atroxaper: it is definitely better than waiting a month for a fix :o)

[16:14] <FROGGS> and yes, you only an learn

[16:15] <atroxaper> Do you recomend to use Rakudo.jvm already as well?

[16:15] <FROGGS> depends

[16:15] <timotimo> kind of a sad state, but understandable because our brightest engineers are currently working on moar rather than rakudo itself

[16:15] <FROGGS> if you have long running stuff, then yes

[16:16] <FROGGS> for super-short scripts parrot is better

[16:16] *** xinming left
[16:17] *** xinming joined
[16:18] <atroxaper> FROGGS: i read that there is a way to call java statements from Rakudo.jvm now. Is there way to do vice versa stuff?

[16:19] <atroxaper> FROGGS: once we started to talk )

[16:19] <FROGGS> atroxaper: I dont think so, but my knowledge about that is rather limited

[16:20] <atroxaper> FROGGS: ok. Thank you. Have a good time

[16:20] <FROGGS> atroxaper: you might want to watch jnthn++'s talk videos about jvm interop

[16:20] <timotimo> perl6 level subs are exposed as something that implements Callable to java, so you can at least have callbacks into perl6 code

[16:20] <FROGGS> :o)

[16:21] <atroxaper> timotimo: thank you too )

[16:21] *** xinming left
[16:21] <atroxaper> FROGGS: where is the video?

[16:22] <timotimo> you can find it on youtube, i believe

[16:22] *** xinming joined
[16:23] <atroxaper> timotimo: yes. I found i think) Thank you all. Going to learn...

[16:23] <timotimo> enjoy! :)

[16:23] <timotimo> perl6 is cool as long as you can dance around the bugs that inevitably pop up everywhere :P

[16:24] * timotimo is just a bit frustrated from yesterday's experience

[16:24] <FROGGS> atroxaper: have fun! :o)

[16:24] <atroxaper> o/

[16:25] <TimToady> \o

[16:25] *** atroxaper left
[16:25] <FROGGS> timotimo: yeah :/

[16:27] <FROGGS> timotimo: but keep in mind, it is all TimToady's fault :o)

[16:27] <timotimo> at least i got a few good commits out of the experience, so that's good! :)

[16:27] *** iSlug joined
[16:33] <dalek> nqp: c119b90 | (Tobias Leich)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[16:33] <dalek> nqp: stole set_[core|hll]_op_result_type, attach_result_type from jvm

[16:33] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c119b90f08

[16:33] *** SamuraiJack_ joined
[16:37] *** spider-mario left
[16:38] *** zakharyas left
[16:40] <TimToady> Rule 1: It's all TimToady's fault.  Rule 2: Even if TimToady repents, it's still his fault for not repenting sooner.

[16:42] <FROGGS> well, you could have invented PHP and then we would not have these types of problems :o)

[16:42] <TimToady> no, I ended up with a problem of types instead

[16:44] <japhb__> That sounds like a good title: "A Problem of Types"

[16:44] <japhb__> I'm not sure if that should be a paper, a book, or an art film.

[16:45] <FROGGS> TimToady: do you have an opinion about this? http://irclog.perlgeek.de/perl6/2013-10-28#i_7775529 (10:11 to 10:24)

[16:45] * timotimo took the time to read and fill out the CLA

[16:45] <japhb__> timotimo: Did you find the source of http://irclog.perlgeek.de/perl6/2013-10-27#i_7773084 ?

[16:46] <japhb__> timotimo: Does perl6-bench need unbitrotting?

[16:47] <japhb__> (That's in regards to http://irclog.perlgeek.de/perl6/2013-10-27#i_7773538 _

[16:47] <japhb__> s/_/)/

[16:47] <timotimo> japhb__: did not find the source, sorry :(

[16:48] <japhb__> timotimo: re: http://irclog.perlgeek.de/perl6/2013-10-27#i_7773747 , there is some sample code, but no one has added it to rakudo-jvm yet, IIRC

[16:48] <timotimo> the second one: run seems to no longer give the changes to the environment to the processes it runs

[16:48] <japhb__> Gah.

[16:49] <japhb__> But shell does?

[16:49] <timotimo> i think so

[16:49] <japhb__> Rather than work around in perl6-bench, I'd like to just fix the regression in Rakudo.

[16:50] <timotimo> that would be good, yes

[16:50] <timotimo> there's one regression we hit in perl6-bench that i've fixed already =)

[16:50] <japhb__> Oh?

[16:50] <japhb__> PR?

[16:50] <timotimo> already merged

[16:50] <timotimo> into rakudo nom, that is

[16:50] <japhb__> Oh, gotcha

[16:50] <timotimo> the *.[] and *.{} thing

[16:51] <japhb__> And thank you for that.  :-)

[16:51] <masak> r: my @a = <foo bar baz>; @a.=[1]; say @a

[16:51] <camelia> rakudo-jvm 882e33: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/zDOY2XLsZ9␤Cannot use .= on a non-identifier method call␤at /tmp/zDOY2XLsZ9:1␤------> [32mmy @a = <foo bar baz>; @a.=[1][33m⏏[31m; say @a[0m␤»

[16:51] <camelia> ..rakudo-parrot 3cef56: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/OCC19FtPba␤Cannot use .= on a non-identifier method call␤at /tmp/OCC19FtPba:1␤------> [32mmy @a = <foo bar baz>; @a.=[1][33m⏏[31m; say @a[0m␤»

[16:51] <timotimo> oh wow, i scanned that PDF in super-high-res

[16:52] <masak> timotimo: you're free to look at @a.=[1], though. it's in a recent RT ticket, too.

[16:52] <masak> timotimo: lizmat looked at it in today's backlog.

[16:52] <timotimo> i seem to recall that

[16:52] <masak> moritz: how hard would it be to get camelia to use the same /tmp/* filename, so that rakudo-jvm and rakudo-parrot yield the same output when possible?

[16:52] <timotimo> she didn't attempt a fix?

[16:53] * japhb__ contemplates whether direct Rakudo hacking to fix problems, or creating a list of the top most painful Rakudo issues with hopes of others working on them, is a more effective use of my tuits today.

[16:54] * japhb__ notes that in camelia's last response, the two rakudos had different sha1s.

[16:55] *** fhelmberger left
[16:56] <timotimo> lizmat said the error comes from dotty:sym<.*>, but the error message doesn't match up with what i get from (my @a = 1, 2, 3).=[1]

[16:56] <timotimo> oh, because that still tries to find a method, righto

[16:58] <timotimo> oh, curious! there's different error cases from .=[1,2] and .=[1]

[16:58] <japhb__> timotimo: Looked through my notes.  The rp open sketch was at: https://gist.github.com/donaldh/6901992

[17:00] <[Coke]> I actually slightly preferred the all caps tags, but am fine with the change.

[17:01] <dalek> perl6-roast-data: 189a03a | coke++ | / (5 files):

[17:01] <dalek> perl6-roast-data: today (automated commit)

[17:01] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/189a03a99d

[17:01] <dalek> perl6-roast-data: 173d2ee | coke++ | p (2 files):

[17:01] <dalek> perl6-roast-data: today (automated commit)

[17:01] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/173d2ee55a

[17:02] *** kaare__ is now known as kaare_

[17:02] <timotimo> japhb__: i don't understand why from and to have the same implementation o_O

[17:02] <[Coke]> preflex: seen au?

[17:02] <preflex>  au was last seen on #perl6 246 days, 22 hours, 4 minutes and 28 seconds ago, saying: pity that Unicode terminals doesn't support strike-through very well :)

[17:02] *** [Sno] joined
[17:03] <[Coke]> https://raw.github.com/coke/perl6-roast-data/master/pugs_summary.out - well, that's disappointing.

[17:05] *** rurban left
[17:07] * masak .oO( au has been implementing strike-through in Unicode terminals for 246 days!? )

[17:07] *** kaare_ left
[17:08] <dalek> nqp: 353787c | (Tobias Leich)++ | src/vm/moar/QAST/QASTCompilerMAST.nqp:

[17:08] <dalek> nqp: added sub want, needed for coercion

[17:08] <dalek> nqp: review: https://github.com/perl6/nqp/commit/353787ce87

[17:09] *** ajr_ left
[17:09] <timotimo> Use of uninitialized value $thirdpartyjars in join or string at tools/build/create-jvm-runner.pl line 42.

[17:09] <timotimo> what's this all about?

[17:10] <timotimo> probably just need to reConfigure.pl

[17:12] *** risou_awy is now known as risou

[17:14] <[Coke]> geekosaur: hey. You're a haskell person!

[17:15] <geekosaur> I wonder if we can get away with upgrading pugs to work with modern stuff instead of complaining about all the deprecated stuff

[17:16] <geekosaur> in fact, some of it we're going to have to fix; as of the next ghc version, manual Typeable instances are forbidden

[17:16] <geekosaur> deriving (Typeable) is the only permitted way to do it

[17:16] <TimToady> someone should just write a Haskell backend for rakudo now :)

[17:16] <FROGGS> ohh noes /o\

[17:16] <TimToady> how hard can it be?

[17:17] * masak .oO( GHC-hard )

[17:17] <[Coke]> so easy, even TimToady can do it. :P

[17:17] * geekosaur might find that easier than trying to understand au++ --- clearly he is not nearly as smart...

[17:17] *** k1lldash9 joined
[17:18] <[Coke]> geekosaur: updates to pugs that don't fail more spectests always welcome.

[17:18] <[Coke]> how can I find out why https://gist.github.com/coke/7200634 has the locale error it does? is there a way to see what locales are installed on the box I'm testing?

[17:19] <geekosaur> look in /usr/share/locale usually

[17:19] <k1lldash9> locale should show you

[17:19] *** BenGoldberg joined
[17:19] <geekosaur> I was starting to say that over in #haskell when you pinged me over here :)

[17:21] * masak .oO( the peoples of #perl6 and #haskell have always had friendly relations with each other, despite their obvious evolutionary differences )

[17:21] <TimToady> .oO(whitespace as syntax?!?)

[17:22] <geekosaur> someone alredy pointed at default(42) vs. default (42) last night, and IIRC there is similar with fucntion calls; we already have whitespace as syntax

[17:22] *** jnthn_ is now known as jnthn

[17:22] <TimToady> .oO(indentation as syntax?!?)

[17:23] *** dansamo left
[17:23] <masak> TimToady: heredocs.

[17:23] <TimToady> there's a huge difference between "Whitespace, yes or no?" and "Whitespace, how much?"

[17:23] *** kaare_ joined
[17:24] <TimToady> masak: the exception that proves the rule :P

[17:24] <masak> :P

[17:24] * masak .oO( a *true* whitespace Scotsman...! )

[17:24] <BenGoldberg> I understand the difference between with-whiteapce and without-whitespace for function calls.

[17:24] <BenGoldberg> But not default(42) and default (42)

[17:25] <TimToady> again, it's the difference between :default(42) and :default (42)

[17:25] <TimToady> we don't allow ws inside colonpairs either

[17:26] <BenGoldberg> r: my @a is default (42); say @a[5]

[17:26] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«True␤»

[17:26] <BenGoldberg> r: my @a is default (42); say @a

[17:26] <TimToady> r: say :default

[17:26] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«␤»

[17:26] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«␤»

[17:26] <TimToady> r: say (:default)

[17:26] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«"default" => Bool::True␤»

[17:26] <BenGoldberg> r: my @a is default; say @a

[17:26] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«␤»

[17:27] <BenGoldberg> What is 'is default' with no argument supposed mean, anyway?

[17:27] <TimToady> exactly the same as default(True)

[17:27] <TimToady> I keep sayin'

[17:27] <BenGoldberg> Ahh, ok, I get it

[17:28] <BenGoldberg> r: my @a is default; say @a[1..5]

[17:28] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«True True True True True␤»

[17:28] <BenGoldberg> r: my @a isn't default; say @a[1..5]

[17:28] <camelia> rakudo-parrot 3cef56: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/C79jY_FJvu␤Confused␤at /tmp/C79jY_FJvu:1␤------> [32mmy @a is[33m⏏[31mn't default; say @a[1..5][0m␤    expecting any of:␤        whitespace␤»

[17:28] <camelia> ..rakudo-jvm 882e33: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/s3W1vSBvXq␤Confused␤at /tmp/s3W1vSBvXq:1␤------> [32mmy @a is[33m⏏[31mn't default; say @a[1..5][0m␤    expecting any of:␤        whitespace␤»

[17:28] <BenGoldberg> :)

[17:28] <TimToady> thing is, the parser doesn't catch the ttiar because siggies are parsed differently

[17:28] <TimToady> std: my @a is default (42);

[17:28] <camelia> std 8adbc60: OUTPUT«ok 00:01 124m␤»

[17:29] <BenGoldberg> r: say True(42)

[17:29] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&True' called (lines 1, 1)␤»

[17:29] <TimToady> r: my @a is default (42); @a = 43;

[17:29] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: ( no output )

[17:29] <BenGoldberg> Identical error messages!  A first! :)

[17:29] <TimToady> is probably just ignoring the subsig

[17:30] <BenGoldberg> r: my @a isn't default(False); say @a[1..5]

[17:30] <camelia> rakudo-parrot 3cef56: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/GAZSiNU7VK␤Confused␤at /tmp/GAZSiNU7VK:1␤------> [32mmy @a is[33m⏏[31mn't default(False); say @a[1..5][0m␤    expecting any of:␤        whitespace␤»

[17:30] <camelia> ..rakudo-jvm 882e33: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/9JdOxhsRwM␤Confused␤at /tmp/9JdOxhsRwM:1␤------> [32mmy @a is[33m⏏[31mn't default(False); say @a[1..5][0m␤    expecting any of:␤        whitespace␤»

[17:30] <BenGoldberg> r: my @a is default(False); say @a[1..5]

[17:30] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«False False False False False␤»

[17:30] <BenGoldberg> r: my @a is default(False) (42); say @a[1..5]

[17:30] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«False False False False False␤»

[17:30] *** risou is now known as risou_awy

[17:30] <TimToady> r: my @a is default ($b,$c); @a = 43;

[17:30] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: ( no output )

[17:30] <TimToady> r: my @a ($b,$c); @a = 43;

[17:30] <BenGoldberg> r: my @a is default(False) (now see here); say @a[1..5]

[17:30] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: ( no output )

[17:30] <camelia> rakudo-parrot 3cef56: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/GjuRKuV2I7␤Invalid typename 'now' in parameter declaration.␤at /tmp/GjuRKuV2I7:1␤------> [32mmy @a is default(False) (now[33m⏏[31m see here); say @a[1..5][0m␤»

[17:30] <camelia> ..rakudo-jvm 882e33: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/uV0NSK4UIg␤Invalid typename 'now' in parameter declaration.␤at /tmp/uV0NSK4UIg:1␤------> [32mmy @a is default(False) (now[33m⏏[31m see here); say @a[1..5][0m␤»

[17:31] <TimToady> r: my @a ($b,$c); @a := 43;

[17:31] <camelia> rakudo-parrot 3cef56: OUTPUT«Type check failed in binding; expected 'Positional' but got 'Int'␤  in block  at /tmp/68zqDAlxk7:1␤  in any  at /tmp/68zqDAlxk7:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.nqp:1133␤  in any evalfil…»

[17:31] <camelia> ..rakudo-jvm 882e33: OUTPUT«Type check failed in binding; expected 'Positional' but got 'Int'␤  in block  at /tmp/GrkMuoPulC:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1084␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1290␤  in any command_eval at gen/jvm/stage2/NQPHLL.nq…»

[17:31] <TimToady> r: my $a ($b,$c); @a := 43;

[17:31] <camelia> rakudo-jvm 882e33: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/cEkXHZ80_Y␤Variable '@a' is not declared. Did you mean '$a'?␤at /tmp/cEkXHZ80_Y:1␤------> [32mmy $a ($b,$c); @a[33m⏏[31m := 43;[0m␤    expecting any of:␤        postfix␤»

[17:31] <camelia> ..rakudo-parrot 3cef56: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/6xKUvOGmMM␤Variable '@a' is not declared. Did you mean '$a'?␤at /tmp/6xKUvOGmMM:1␤------> [32mmy $a ($b,$c); @a[33m⏏[31m := 43;[0m␤    expecting any of:␤        postfix␤»

[17:31] <BenGoldberg> r: my @a is default(False) ($do-i-need-to-declare-this); say @a[1..5]

[17:31] <TimToady> r: my $a ($b,$c); $a := 43;

[17:31] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«False False False False False␤»

[17:31] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: ( no output )

[17:31] <BenGoldberg> r: my @a is default(False) ($do-i-need-to-declare-this, $how-bizzarre-how-bizzarre); say @a[1..5]; # :)

[17:31] <TimToady> r: my $a ($b,$c) = 43;

[17:31] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«False False False False False␤»

[17:31] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: ( no output )

[17:32] <TimToady> yeah, seems to ignore the subsig entirely

[17:32] <TimToady> r: my $a ($b,$c); $b = 43;  say $b

[17:32] <camelia> rakudo-jvm 882e33: OUTPUT«java.lang.NullPointerException␤  in block  at /tmp/GlPGERLxuQ:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1084␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1290␤  in any command_eval at gen/jvm/stage2/NQPHLL.nqp:1194␤  in any command_eval at s…»

[17:32] <camelia> ..rakudo-parrot 3cef56: OUTPUT«(signal SEGV)»

[17:32] <TimToady> wahoo

[17:33] <arnsholt> jnthn: I've been pondering a refactor of NQP/QRegex so that HLL::Grammar.O takes actual named arguments, instead of parsing a string. Nay or yay?

[17:33] <BenGoldberg> n: my @a is default(False) ($do-i-need-to-declare-this); say @a[1..5]

[17:33] <camelia> niecza v24-98-g473bd20: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Trait default not available on variables at /tmp/2PlGtcgkDI line 1:␤------> [32mault(False) ($do-i-need-to-declare-this)[33m⏏[31m; say @a[1..5][0m␤␤Postconstraints, and shapes on variable declarators NYI …»

[17:33] <BenGoldberg> n: my $a ($b, $c); $a = 42; say $a

[17:33] <camelia> niecza v24-98-g473bd20: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Postconstraints, and shapes on variable declarators NYI at /tmp/URPGqNsiwj line 1:␤------> [32mmy $a ($b, $c)[33m⏏[31m; $a = 42; say $a[0m␤␤Potential difficulties:␤  $b is declared but not used at /tmp/…»

[17:33] <BenGoldberg> std: my $a ($b, $c); $a = 42; say $a

[17:33] <camelia> std 8adbc60: OUTPUT«ok 00:01 127m␤»

[17:34] <BenGoldberg> r: my $a ($b, $c); $b = 42; say $b

[17:34] <camelia> rakudo-parrot 3cef56: OUTPUT«(signal SEGV)»

[17:34] <camelia> ..rakudo-jvm 882e33: OUTPUT«java.lang.NullPointerException␤  in block  at /tmp/eAZa2puHK4:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1084␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1290␤  in any command_eval at gen/jvm/stage2/NQPHLL.nqp:1194␤  in any command_eval at s…»

[17:34] <masak> whoa.

[17:34] * masak submits rakudobug

[17:36] <TimToady> FROGGS: re mixin identities, structural equivalence tends to be a world of hurt for everyone involved, especially implementors, so I'm inclined to go with name equivalence here, i.e. you want the same mixin, then name it.

[17:36] *** ssutch joined
[17:36] <TimToady> that being said, if the optimizer wants to combine identical mixins to save space, we might want to rethink that a bit

[17:37] <masak> feels weird to rely on though, if it's an optimization.

[17:37] <masak> so conservatism seems to favor "no for now"

[17:37] <jnthn> What on earth does "my $a ($b, $c)" even mean? 

[17:38] * TimToady is inclined to think that, since classes are mutable, they should not automatically try to share

[17:39] <TimToady> otherwise we might end up with rubyesque difficulties

[17:39] <benabik> jnthn: $b := a[0]; $c := $a[1] # ?

[17:40] <TimToady> well, presumably the same as in sub foo ($a ($b, $c)) {...}, only different :)

[17:42] <jnthn> But it needs an extra pair of aprens if it's getting parsed as a signature, no?

[17:42] <jnthn> my ($a (4b, $c)) # doesn't surprise

[17:42] <masak> r: my $a ($b, $c); say $b

[17:42] <TimToady> 4b or not 4b, that is the question

[17:42] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«(Mu)␤»

[17:43] <masak> r: my $a ($b, $c); $b = 42

[17:43] <camelia> rakudo-jvm 882e33: OUTPUT«java.lang.NullPointerException␤  in block  at /tmp/f7mLLTPKnG:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1084␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1290␤  in any command_eval at gen/jvm/stage2/NQPHLL.nqp:1194␤  in any command_eval at s…»

[17:43] <camelia> ..rakudo-parrot 3cef56: OUTPUT«(signal SEGV)»

[17:43] <jnthn> Too much lag to spot my typos in time :P

[17:43] <jnthn> I'm surprised it even parses; I must be misremembering something in the grammar...

[17:43] <TimToady> it's just coming in as a postconstraint

[17:43] *** iSlug left
[17:44] <jnthn> oh...

[17:44] <jnthn> I suspect we don't try to handle that code path at all :)

[17:44] <jnthn> So heck knows what comes of the $b and $c... :)

[17:44] <TimToady> r: my $a where 42; $a = 43

[17:45] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: ( no output )

[17:45] <TimToady> yeah

[17:48] <TimToady> r: subset Even of Int where * %% 2;  my Even $x; $x = 3;

[17:48] <camelia> rakudo-parrot 3cef56: OUTPUT«Type check failed in assignment to '$x'; expected 'Even' but got 'Int'␤  in block  at /tmp/V229oUIPh3:1␤  in any  at /tmp/V229oUIPh3:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.nqp:1133␤  in any ev…»

[17:48] <camelia> ..rakudo-jvm 882e33: OUTPUT«Type check failed in assignment to '$x'; expected 'Even' but got 'Int'␤  in block  at /tmp/NJS1GDNiDG:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1084␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1290␤  in any command_eval at gen/jvm/stage2/NQPH…»

[17:49] <TimToady> I guess we're not splitting that test out into post_constraint space as we do in siggies

[17:49] <TimToady> r: subset Even of Int where * %% 2;  my $x where Even; $x = 3;

[17:49] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: ( no output )

[17:50] <BenGoldberg> r: subset Even of Int where * %% 2;  my Even $x; if( rand > 1 ) { $x = 3 }

[17:50] * TimToady wonders if the assignment to typed object could be simpler on the nominal end if we did split that out

[17:50] <camelia> rakudo-jvm 882e33: OUTPUT«[31m===[0mSORRY![31m===[0m␤Word 'if' interpreted as 'if()' function call; please use whitespace instead of parens␤at /tmp/d3fhiDyzel:1␤------> [32mven of Int where * %% 2;  my Even $x; if[33m⏏[31m( rand > 1 ) { $x = 3 }[0m␤Unexpected block…»

[17:50] <camelia> ..rakudo-parrot 3cef56: OUTPUT«[31m===[0mSORRY![31m===[0m␤Word 'if' interpreted as 'if()' function call; please use whitespace instead of parens␤at /tmp/qNpxAu_Av5:1␤------> [32mven of Int where * %% 2;  my Even $x; if[33m⏏[31m( rand > 1 ) { $x = 3 }[0m␤Unexpected bl…»

[17:50] <BenGoldberg> r: subset Even of Int where * %% 2;  my Even $x; if ( rand > 1 ) { $x = 3 }

[17:50] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: ( no output )

[17:51] <moritz> masak: (re camelia patch) no idea

[17:51] <BenGoldberg> r: subset Even of Int where * %% 2;  my Even $x; if ( rand > 1 ) { $x = "string" }

[17:51] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: ( no output )

[17:51] <TimToady> BenGoldberg: "instead of"  :P

[17:52] <BenGoldberg> How would I get that to die at compile time, due to "string" not being of type Even?

[17:53] <moritz> by patching the optimizer, somhow...

[17:53] <jnthn> By patching Rakudo to do such things, yeah :)

[17:53] *** sqirrel left
[17:53] <BenGoldberg> p: subset Even of Int where * %% 2;  my Even $x; if ( rand > 1 ) { $x = "string" }

[17:53] <camelia> rakudo-parrot 3cef56: ( no output )

[17:53] <BenGoldberg> P: subset Even of Int where * %% 2;  my Even $x; if ( rand > 1 ) { $x = "string" }

[17:53] <camelia> pugs: OUTPUT«*** ␤    Unexpected "% 2"␤    expecting "::"␤    at /tmp/wPVmDJINhC line 1, column 29␤»

[17:53] <TimToady> no %% op

[17:54] <BenGoldberg> P: my Int $x; if ( rand > 1 ) { $x = "string" }

[17:54] <camelia> pugs: ( no output )

[17:54] <TimToady> implement type inference?

[17:55] <TimToady> or range inference if want rand > 1 to turn into False :)

[17:55] <[Coke]> diakopter: the pugs tests really want "en_US.ISO-8859-1" available on the testing machine. Any chance we can get that?

[17:56] <[Coke]> -> $dayjob

[17:56] <TimToady> US English doesn't include Latin :P

[17:56] <BenGoldberg> In perl5 (and in Java!), an if( False ) { code } will remove { code } from the parse tree, for appropriate values of False

[17:56] <BenGoldberg> Does perl6's optimizer do that yet?

[17:57] <TimToady> yes, I know--I implement the p5 part of that

[17:57] <TimToady> *mented

[17:57] <diakopter> [Coke]: it has that, you just need to set the env vars

[17:57] <TimToady> these days should probably ISO-8859-15 or thereabouts to include the euro...

[17:58] <arnsholt> BenGoldberg: Good question. If you feel up for it, Rakudo's src/Perl6/Optimizer.nqp is the place to look. It might not be too hard to implement

[17:58] <TimToady> otoh, I would also not mind ignoring locales out of existence

[18:00] <TimToady> if False { use locale; }

[18:00] *** dakkar left
[18:01] <BenGoldberg> Shirely, even in perl6, 'use' gets performed the moment the statement it's in is fully evaluated?

[18:01] <jnthn> BenGoldberg: yes

[18:02] <BenGoldberg> So that would need to be BEGIN { if False { require locale } }, or somesuch

[18:03] <TimToady> was a joke

[18:03] <BenGoldberg> :)

[18:04] <TimToady> now, it'd be *interesting* if the compiler could figure out that the block was going away even before it was parsed, and disable any BEGIN-stuff inside it

[18:05] <TimToady> but not even p5 tries to do that

[18:05] <TimToady> (that I know of...)

[18:06] *** SamuraiJack_ left
[18:06] <BenGoldberg> That would be pretty deep magic :)

[18:10] *** sqirrel joined
[18:10] <timotimo> i can't get rid of Use of uninitialized value $thirdpartyjars in join or string at tools/build/create-jvm-runner.pl line 42.

[18:23] <dalek> nqp: 8ea4967 | dwarring++ | examples/rubyish/ (2 files):

[18:23] <dalek> nqp: general rubyish sigspace tidies. added :s<hs> for horizontal white-space

[18:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8ea496793a

[18:28] <timotimo> and also open: No such file or directory at tools/build/create-jvm-runner.pl line 35.

[18:29] <timotimo> Creating '/home/timo/build/rakudo/install/home/timo/build/rakudo/install/bin/perl6-j'

[18:29] <timotimo> well, this doesn't make sense

[18:30] <FROGGS> ohh

[18:30] <FROGGS> destdir or prefix confusion

[18:31] <timotimo> i've temporarily reverted the recent commit that seems to have touched it

[18:33] *** sqirrel left
[18:35] *** btyler left
[18:41] <timotimo> that makes it work again

[18:43] <timotimo> who here is Brian Gernhardt?

[18:46] <retupmoca> timotimo: http://irclog.perlgeek.de/perl6/2013-10-28#i_7774849 ?

[18:46] <FROGGS> timotimo: benabik 

[18:46] <timotimo> yes

[18:47] <benabik> timotimo: Hello?

[18:47] <timotimo> hi there :)

[18:47] <timotimo> can you help me with the jvm runner installer?

[18:47] <benabik> Probably.  I tried not to break it too badly.  ;-)

[18:47] <timotimo> Creating '/home/timo/build/rakudo/install/home/timo/build/rakudo/install/bin/perl6-j' - this is obviously wrong, but i'm not sure how to fix it

[18:48] <timotimo> this is using Configure.pl --backends=jvm,parrot --gen-parrot --gen-nqp=master

[18:48] <benabik> Erm

[18:48] <benabik> I think I forgot quotes in Makefile-JVM.in

[18:48] <Tene> timotimo: Try again with HOME=/home/timo/home/timo/home/tene/home/timo

[18:48] <timotimo> Tene:    :3

[18:49] <benabik> Setting DESTDIR=/ might be a workaround.

[18:49] <timotimo> i'd prefer a fix. this doesn't stop me from working, mind you :)

[18:50] <benabik> Doublequotes around $(DESTDIR) on the create-jvm-runner lines in Makefile-JVM.pl

[18:50] <benabik> I can submit a PR in a moment.

[18:50] <timotimo> ah, for some reason i thouht you had a commitbit

[18:50] * timotimo applied for one today :)

[18:51] <benabik> I have one for Moar, NQP, and Parrot but not Rakudo.

[18:53] <lue> hello world o/

[18:53] <dalek> nqp: e13e2f4 | dwarring++ | examples/rubyish/ (2 files):

[18:53] <dalek> nqp: updated rubyish README etc. nqp => nqp-p

[18:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e13e2f451c

[18:54] * benabik trying to build without DESTDIR before submitting the PR.

[18:54] <lue> so, can I move on from 10? :)

[18:56] <FROGGS> lue: only if unicode chars are involved :o)

[18:57] <lue> :) I ask if it's OK to go on with that DBIish fail and the one/two minor spectest fails. https://gist.github.com/lue/7188705

[18:58] <FROGGS> lue: no idea

[18:59] <lue> moritz: do you know if I should go ahead? (Or did you e.g. fix DBIish and I need to re-do the tarball?)

[19:00] *** ajr joined
[19:00] *** ajr is now known as Guest90674

[19:01] *** Guest90674 is now known as ajr_

[19:02] *** rindolf left
[19:03] *** sqirrel joined
[19:04] *** dmol joined
[19:04] <arnsholt> moritz++ # New build system is still awesome =)

[19:05] <FROGGS> it is, yeah

[19:05] <timotimo> moritz++ # what arnsholt said!

[19:05] <FROGGS> moritz++ # :o)

[19:05] <benabik> moritz made it awesome, I just broke it.  :-D

[19:06] *** jeffreykegler joined
[19:07] <timotimo> fwiw, i don't actually know how to fix the .=[...] stuff

[19:07] <benabik> If someone with a bit could merge https://github.com/rakudo/rakudo/pull/225 that'd be great.

[19:07] <arnsholt> I like the body of the message =D

[19:07] <benabik> :-D

[19:10] *** pecastro joined
[19:13] *** risou_awy is now known as risou

[19:14] <FROGGS> timotimo: the PR solved your problem?

[19:15] *** jaffa4 joined
[19:15] <jaffa4> hi all

[19:15] <jaffa4> I cannot see the module I added to Panda.

[19:16] <timotimo> did not try yet

[19:16] <jaffa4> Is it not approved yet?

[19:16] <lue> moritz, jnthn, other release pros: if a DBIish fix isn't there/imminent, can I continue to Step 11?

[19:18] <timotimo> DBIish did get the fix

[19:19] <timotimo> or at least a fix

[19:20] <lue> time to go back and spend a few more testing hours then :)

[19:22] *** pernatiy left
[19:25] <lue> jaffa4: I can see your Path::Util on http://modules.perl6.org/, so perhaps you just need to update your panda's module list (forget the command to do that exactly, though there should be some --help that tells you)

[19:27] <timotimo> i think it's panda update

[19:27] <jaffa4> yes, that was the problem.

[19:28] <dalek> nqp: 724a9b1 | (Arne Skjærholt)++ | src/NQP/ (2 files):

[19:28] <dalek> nqp: Make 'return' a term taking an optional argument.

[19:28] <dalek> nqp: 

[19:28] <dalek> nqp: This way, 'return;' won't be silently ignored in a function. Closes #127.

[19:28] <dalek> nqp: review: https://github.com/perl6/nqp/commit/724a9b12cb

[19:29] *** Rotwang left
[19:29] <masak> arnsholt++! \o/

[19:29] <masak> arnsholt: you are my hero tonight.

[19:29] *** risou is now known as risou_awy

[19:29] <arnsholt> Oh, yay! \o/

[19:29] <masak> arnsholt: next beer is on me :)

[19:30] <lue> ✔ ⑤ Update modules (⑥ and ⑦ still ✔)

[19:30] *** Mouq left
[19:30] <dalek> star: e5501b9 | lue++ | modules/DBIish:

[19:30] <dalek> star: Pull DBIish update.

[19:30] <dalek> star: review: https://github.com/rakudo/star/commit/e5501b9321

[19:30] <lue> ✔ ⑧ push un-pushed changes

[19:31] *** sftp joined
[19:32] <lue> ✔ ⑨ Create tarball

[19:32] *** xdbr joined
[19:32] <arnsholt> masak: Anyways, happy to be of help. It's been on my hitlist of NQP bugs for a while, but last time I tried to fix it I couldn't quite get there

[19:32] *** Shozan joined
[19:33] <arnsholt> You coming to Oslo in the near future, BTW?

[19:33] *** sqirrel left
[19:34] *** daxim left
[19:35] <masak> arnsholt: nothing on the schedule, though I had a Bergen a few days ago, and will have an Ålesund next week.

[19:36] <FROGGS> Å is pronounced like an O, right?

[19:37] <arnsholt> Right. Both are a bit far away for just a beer =)

[19:37] <arnsholt> FROGGS: Yeah

[19:39] * lue thinks of å as a "scandinavian o sound" :P

[19:39] <arnsholt> Yeah, the exact phonetic value is probably going to be different from German/English

[19:40] <arnsholt> Close enough though

[19:40] <FROGGS> cool..., we have a software at $work call Blå, which is the color blue as I remember

[19:40] <dalek> rakudo/nom: 9952073 | benabik++ | tools/build/Makefile-JVM.in:

[19:40] <dalek> rakudo/nom: Fix j-install for no DESTDIR

[19:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/99520735ea

[19:40] <lue> for some reason my mind is saying å ~~ german u ... I'll check the IPAs

[19:41] *** denis_boyun joined
[19:41] <geekosaur> front-a, isn't it?

[19:41] *** sqirrel joined
[19:41] <masak> ah, the sensual dance of the Lexical and the Dynamic.

[19:41] <moritz> lue: å is pronounce more like the German o

[19:42] <moritz> oh, FROGGS++ already said that in the backlog :-)

[19:42] <GlitchMr> perl6: .say for (('' xx 2, 'Fizz') xx * Z~ ('' xx 4, 'Buzz') xx *) Z|| 1 .. 100;

[19:42] <lue> yeah.

[19:42] <camelia> niecza v24-98-g473bd20: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤This macro cannot be used as a function at /tmp/1aB2oDIVIb line 1:␤------> [32mzz') xx * Z~ ('' xx 4, 'Buzz') xx *) Z||[33m⏏[31m 1 .. 100;[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niec…»

[19:42] <camelia> ..rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«1␤2␤Fizz␤4␤Buzz␤Fizz␤7␤8␤Fizz␤Buzz␤11␤Fizz␤13␤14␤FizzBuzz␤16␤17␤Fizz␤19␤Buzz␤Fizz␤22␤23␤Fizz␤Buzz␤26␤Fizz␤28␤29␤FizzBuzz␤31␤32␤Fizz␤34␤Buzz␤Fizz␤37␤38␤Fizz␤B…»

[19:42] <arnsholt> lue: German u is more similar to Norwegian o

[19:42] <FROGGS> my colleagues tend to say it like Blä >.<

[19:42] <masak> moritz: at least in Swedish, we screwed up the letter 'o' so that it (most of the time) has more of an /u/ sound.

[19:42] <masak> FROGGS: heh :)

[19:43] <FROGGS> masak: and in germany the e gets lost :o)

[19:43] *** Rotwang joined
[19:43] <arnsholt> Same in Norwegian. It's mostly /u/, but occasionally /o/ just to keep foreigners on their toes =)

[19:43] * lue really needs more practice in German :P

[19:43] <FROGGS> for example most ppl say 'nein' like 'nain'

[19:44] <FROGGS> so, at some point we can scratch that e

[19:44] <lue> All I had to do was say "Ostwestfälisch" to myself and I could confirm å == o :)

[19:44] <arnsholt> lue: Which is your first language?

[19:44] * FROGGS .oO( Perl )

[19:45] *** jeffreykegler left
[19:45] <lue> arnsholt: de & en, though the de part's been lacking since I was 5 :)

[19:45] <arnsholt> Ah, right

[19:45] * masak .oO( Leben, das Universum und der ganze Rest )

[19:47] * lue is pretty sure some of his ancestors are rolling in their graves because il sait français :)

[19:48] <moritz> masak, arnsholt: which means in the theory there are 4 ways to pronounce "Oslo", though in practice I have heard only three of the variants

[19:48] <moritz> :-)

[19:49] <lue> .oO[ Then again, they should know my opinions on East Prussia and Alsace-Löttrigen :) ]

[19:50] <masak> moritz: only 4? I think you're discounting both vowel length and stress. :)

[19:50] <masak> moritz: not to mention speech tone.

[19:51] <arnsholt> moritz: The inherited pronounciation is probably /ushlu/

[19:51] <moritz> masak: they all sound the same to me :-)

[19:51] <masak> count all those, and you could have 64 different pronunciations of "Oslo".

[19:51] <GlitchMr> r: .say for ('' xx 2, 'Fizz') xx * Z~ ('' xx 4, 'Buzz') xx * Z|| 1 .. 100;

[19:51] <arnsholt> And not /uslu/

[19:51] <camelia> rakudo-jvm 882e33: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/ba8RO5tbZZ␤Bogus statement␤at /tmp/ba8RO5tbZZ:1␤------> [32m Z~ ('' xx 4, 'Buzz') xx * Z|| 1 .. 100;[33m⏏[31m[0m␤    expecting any of:␤        postfix␤        prefix or term␤    …»

[19:51] <camelia> ..rakudo-parrot 3cef56: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/5G5nmaqRBw␤Bogus statement␤at /tmp/5G5nmaqRBw:1␤------> [32m Z~ ('' xx 4, 'Buzz') xx * Z|| 1 .. 100;[33m⏏[31m[0m␤    expecting any of:␤        postfix␤        prefix or term␤ …»

[19:52] <GlitchMr> r triggers both Rakudos? Why?

[19:52] <masak> ah, yes, the /s/ or /sh/ distinction is another bifurcation. so 128 :)

[19:52] <masak> GlitchMr: because... they're both rakudos?

[19:52] <moritz> GlitchMr: becase rakudo-moarvm doesn't work yet well enough

[19:52] <masak> :)

[19:52] *** Mouq joined
[19:52] <lue> .oO(Oslo -> Ahzzz-low)

[19:53] * masak slaps lue with a doormat labeled "WELCOME TO THE USA"

[19:53] <moritz> .oO( maybe 'rs' should launch all rakudos and 'r' a random rakudo )

[19:53] <masak> rakoulette!

[19:54] <FROGGS> randudo!

[19:54] <moritz> masak: sounds tasty :)

[19:54] <masak> rak-u-tell-me

[19:54] <FROGGS> o-rak-el?

[19:54] <lue> R-A-K-U-D-O-!: say "hello"

[19:54] * masak .oO( because what we need from camelia is... more indeterminism...!? )

[19:55] <moritz> and a proper source of entropy, please

[19:55] <lue> sm: -> surprise me, any compiler camelia has available could be used :)

[19:56] <moritz> bdsm: -> be a dear and surprise me :-)

[19:56] <moritz> oh sorry, we are trying to be family friendly to all time zones

[19:57] * masak .oO( we crossed a line? where? ) :P

[19:57] <moritz> we didn't? good :-)

[19:58] <masak> far as I'm concerned, unexpanded acronyms are SFW in-jokes.

[19:58] <moritz> woah, rakudo-j setting build just segfaulted the JVM

[19:59] *** BenGoldberg left
[20:00] <arnsholt> Whoops!

[20:03] * lizmat is back from cycling and was not hurt by any tree parts

[20:04] <TimToady> just whole trees?

[20:04] <lizmat> timotimo: wrt to .=[], I tried to figure out where to apply a fix, but could not find the place, nor how to fix it

[20:04] <Mouq> Uh, re: #120383: There's actually two different rules trying to handle what you're trying to do

[20:04] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120383

[20:04] <lizmat> hmmm...  isn;t a whole tree also a tree part ?

[20:04] <Mouq> r: my @a = (4,5); @a.=[1]; say @a

[20:04] <camelia> rakudo-jvm 882e33: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Jy_2TLX7ui␤Cannot use .= on a non-identifier method call␤at /tmp/Jy_2TLX7ui:1␤------> [32mmy @a = (4,5); @a.=[1][33m⏏[31m; say @a[0m␤»

[20:04] <camelia> ..rakudo-parrot 3cef56: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/UOqokADIlO␤Cannot use .= on a non-identifier method call␤at /tmp/UOqokADIlO:1␤------> [32mmy @a = (4,5); @a.=[1][33m⏏[31m; say @a[0m␤»

[20:04] <Mouq> r: my @a = (4,5); @a .= [1]; say @a

[20:04] <camelia> rakudo-jvm 882e33: OUTPUT«No such method '&postcircumfix:<[ ]>' for invocant of type 'Array'␤  in method dispatch:<.=> at gen/jvm/CORE.setting:1129␤  in block  at /tmp/gYPsuez15t:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1084␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nq…»

[20:05] <camelia> ..rakudo-parrot 3cef56: OUTPUT«No such method '&postcircumfix:<[ ]>' for invocant of type 'Array'␤  in method dispatch:<.=> at gen/parrot/CORE.setting:1138␤  in block  at /tmp/vaHxV07r4l:1␤  in any  at /tmp/vaHxV07r4l:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any…»

[20:05] <lizmat> .oO( feels a set or category theory remark coming up )

[20:05] <Mouq> :P We have an infix <.=> and a term <.*> that includes .=

[20:06] * Mouq was messing with this stuff when he made dotty postfixes work

[20:06] <timotimo> lizmat: yup, me either :|

[20:06] *** btyler joined
[20:06] <lizmat> Mouq: indeed, and that's when I started to lose track

[20:06] <timotimo> at least list and hash access are going to get faster ... i guess

[20:07] <lue> Just to clear this up ahead of time (starting spectests now): if the only failures I get are those two from the spectest (noatime and :Punctuation), can I proceed to 11?

[20:07] <masak> lizmat, Mouq: despite my example being confusing, I think it's still perfectly legitimate even after the postcircumfix method->sub refactor.

[20:07] <Mouq> masak: I agree

[20:07] <lizmat> masak: agree

[20:07] <masak> \o/

[20:07] <lizmat> it's an implementation detail

[20:08] <masak> it's little things like @a.=[@indices] that makes Perl 6 a joy to use.

[20:08] <lue> .oO(Perhaps @a[] is a sub and @a.[] is a method? :P)

[20:08] <timotimo> it's not supposed to be :|

[20:08] <masak> inner dialogue goes "should this work? it *looks* like it should work. yay, it works!"

[20:08] <masak> well, modulo all the bugs. :)

[20:08] <masak> but I'm submitting those :P

[20:09] <Mouq> I think we should "just" make postcircumfixes pretend to be methods everywhere and be done with it :P

[20:09] <timotimo> wouldn't that be a step back?

[20:09] <lue> Now that I said it, I actually like the method/sub thing I mentioned. After all, you have foo(@bar) and @bar.foo, this would be the same thing

[20:09] <TimToady> timotimo: that was a joke

[20:10] <lue> but with funny syntax for the operator's names

[20:10] <timotimo> ah, of course

[20:11] <timotimo> you fave foo(@bar) and @bar.&foo, that's a difference

[20:11] <timotimo> (er, or am i misunderstanding?)

[20:11] <masak> lue: subs and methods are different.

[20:11] <masak> r: class A { method foo { say "method" }; method bar { foo() }; sub foo { say "sub" } }; A.foo; A.bar

[20:11] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«method␤sub␤»

[20:12] <lue> sub postcircumfix:<[ ]>(@a, *@b) { @a.[@b] } is what I was thinking, like how you have sub foo($a, $b) { $a.foo($b) }

[20:12] *** iSlug joined
[20:13] <masak> lue: under the current semantics, that would probably regress infinitely :)

[20:13] <lue> :)

[20:13] <arnsholt> r: grammar Foo { token foo { :temp $foo = 3; foo } }; say "alive"

[20:13] <camelia> rakudo-jvm 882e33: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/qoyLzsr3tl␤Unrecognized regex modifier :temp␤at /tmp/qoyLzsr3tl:1␤------> [32mgrammar Foo { token foo { :temp[33m⏏[31m $foo = 3; foo } }; say "alive"[0m␤»

[20:13] <camelia> ..rakudo-parrot 3cef56: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/iZUqBPlpCW␤Unrecognized regex modifier :temp␤at /tmp/iZUqBPlpCW:1␤------> [32mgrammar Foo { token foo { :temp[33m⏏[31m $foo = 3; foo } }; say "alive"[0m␤»

[20:14] <hoelzro> ahoy perl6ers

[20:15] <timotimo> hey rob :)

[20:15] <jaffa4> panda does not work for me, it cannot delete a file.

[20:15] <timotimo> what are you up to these days?

[20:15] <timotimo> jaffa4: the new release is going to fix that, lue is preparing it at this moment

[20:15] <arnsholt> hoelzro o/

[20:15] <hoelzro> timotimo: today, converting a Perl 5 script I wrote to Perl 6

[20:16] <lue> Ooh! I got it!    sub postcircumfix:<.[ ]>(@a, *@b) { @a[@b] }    :D

[20:16] <lue> masak: ^^^

[20:16] <jaffa4> Are you sure? 

[20:16] <hoelzro> tomorrow, looking at taking advantage of the free time I'm finding in my schedule to work on stuff =)

[20:16] <Grrrr> 26

[20:17] <lue> (I can, in fact, proceed to step 11 if I get just the atime and punct fails, right?)

[20:17] <hoelzro> so I'm having an issue with grammars/actions: https://gist.github.com/hoelzro/7203812

[20:18] <hoelzro> isn't make at the TOP method supposed to determine what parse returns?

[20:18] <timotimo> you need to .ast on that

[20:18] <hoelzro> G.parse(...).ast?

[20:18] <timotimo> i think so

[20:18] <hoelzro> ah ha!

[20:18] <hoelzro> timotimo++

[20:18] <TimToady> lue: there's no bosses here; you'll have to use your judgement :)

[20:18] <hoelzro> thank you!

[20:18] <timotimo> if all things were so easy to solve :)

[20:19] <hoelzro> indeed =)

[20:19] <lue> TimToady: My judgement says yes; my inexperience says "since this is my first time releasing..." :)

[20:20] <TimToady> you could put a "known issues" into the release notes

[20:20] <lizmat> .oO( .ast should really be called .made, as it is the result of the inner make() )

[20:21] <arnsholt> Well, that makes good punny sense, but sometimes practical names make sense too =)

[20:21] <masak> lue: +1 on TimToady's "known issues"

[20:21] <lue> I could; but the atime failure is if you have a noatime drive, and the punct failure is because I can't get 2013.10 rakudo to use the newer tests (which I had fixed because I deemed the tests wrong)

[20:21] <timotimo> hoelzro: github still doesn't use the perl6 highlighter, at least not for nqp files :(

[20:21] <hoelzro> timotimo: I know =( so frustrating!

[20:22] <lue> (I will probably put a "known issues" in the announcement though.)

[20:22] <hoelzro> hmm

[20:22] <masak> lue: will users who download the new R* see test failures?

[20:22] <lizmat> arnsholt: I would think that hoelzro would have thought about a .made sooner than about an .ast

[20:22] <hoelzro> I *may* have forgotten to put it in linguist...

[20:22] <Mouq> lizmat: I may have figured it out

[20:22] <lue> If they run spectest, yes.

[20:22] <lizmat> Mouq++

[20:23] <lizmat> (for persevering)

[20:23] <timotimo> lue: if you put a known issues section there, you can include *<>, *{} and *[] not currying correctly

[20:23] <lue> The specific punct failure, by the way, is :Punctuation delivering § and ¶ (category Po in Unicode), and the old tests not having those two characters in the expected.

[20:23] * moritz submitted the JVM bug at http://icedtea.classpath.org/bugzilla/show_bug.cgi?id=1590

[20:23] * lue hopes updating the announcement doesn't require an update of the tarball

[20:24] <lue> it does :/

[20:24] <arnsholt> One more squashed NQP bug and we're down to 25 open tickets

[20:25] <moritz> arnsholt++

[20:25] <lue> Plan: finish spectest, update announcement, new tarball, go through the testing procedure again (but SKIP the spectest; that shouldn't change), 11.

[20:25] <moritz> lue: sounds fine

[20:25] <lue> (I could probably just stop the spectest know, because I don't see how I'll randomly get new failures.)

[20:25] <lue> s/know/now/

[20:28] <hoelzro> why is it that action methods must explicitly take $/ as an argument?

[20:28] <hoelzro> you'd think that would be implied

[20:28] <timotimo> nah, how would you tell an action class apart from a non-action class?

[20:28] <moritz> scoping

[20:28] <timotimo> and you can have non-action methods in an action class, too

[20:28] <hoelzro> I see

[20:28] <moritz> $/ is lexically scoped

[20:28] <lue> method action_rule($not-the-slash) { $not-the-slash<hash> }

[20:29] <lue> ^ works too

[20:29] <Mouq> Oh

[20:29] <moritz> also if you want to do a regex match, you'd better not name the argument $/ :-)

[20:29] <Mouq> ".=" in <.*> was there so that we could do @list».=meth

[20:29] <lizmat> moritz: so would $*/ not work then, as it is marked as dynamic, afaik ?

[20:30] <lizmat> I mean CALLER::$/ ?

[20:30] <lizmat> r: say $/.VAR.dynamic

[20:30] <camelia> rakudo-parrot 3cef56: OUTPUT«True␤»

[20:30] <camelia> ..rakudo-jvm 882e33: OUTPUT«Unhandled exception: java.lang.OutOfMemoryError: GC overhead limit exceeded␤  in  (gen/jvm/stage2/QAST.nqp:288)␤  in map_classlib_core_op (gen/jvm/stage2/QAST.nqp:287)␤  in  (gen/jvm/stage2/QAST.nqp:1889)␤  in  (gen/jvm/stage2/QAST.nqp)␤  in  (src…»

[20:30] <moritz> $CALLER::</> maybe

[20:31] <moritz> what, $/ is dynamic?

[20:31] <lizmat> the thing is, that $/ is usually only needed for error messages

[20:31] <lizmat> yup, as is $_ and $!

[20:31] <lizmat> r: say $_.VAR.dynamic

[20:31] * moritz 

[20:31] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«True␤»

[20:31] <lizmat> r: say $!.VAR.dynamic

[20:31] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«True␤»

[20:31] * moritz 's world view collides

[20:31] <moritz> erm, collapses

[20:31] <moritz> it collapses so hard, I can'T even type anymore

[20:32] <lizmat> sorry

[20:32] <lizmat> :-)

[20:32] * lizmat starts picking up the pieces

[20:32] <lue> r: my $::<###!@#@###!!$$> = 42;

[20:32] <camelia> rakudo-parrot 3cef56: OUTPUT«===SORRY!===␤ResizablePMCArray: index out of bounds!␤»

[20:32] <camelia> ..rakudo-jvm 882e33: OUTPUT«===SORRY!===␤VMArray: Index out of bounds␤»

[20:32] <hoelzro> hmm

[20:32] <lue> std: my $::<###!@#@###!!$$> = 42;

[20:32] <camelia> std 8adbc60: OUTPUT«ok 00:01 122m␤»

[20:32] <moritz> how to make the JVM not segfault, 101: enable core dumps

[20:33] * hoelzro feels like there *must* be shorthand for :foo($<foo>)

[20:33] <moritz> hoelzro: $/.hash<foo>:p

[20:33] <moritz> or just $<foo>:p if that works

[20:33] <hoelzro> =O

[20:33] <lue> what does the p adverb do? :P

[20:33] <moritz> if not, $/<foo>:p

[20:33] <moritz> lue: return a Pair, not just the value

[20:34] <hoelzro> bwa

[20:34] <hoelzro> blown away =)

[20:34] <masak> moritz: ISTR $_, $/, $! are "lexical if <mumble>, otherwise dynamic".

[20:35] <moritz> meh, I want intuitive semantics *and* clear, simple rules! :-)

[20:36] <moritz> and more wows than WATs

[20:37] <moritz> and an OOM killer that takes that fat, ever-growing memory eater instead of my window manager

[20:38] <raiph> http://felixge.de/2013/03/11/the-pull-request-hack.html # the wisdom of liberal commit bits

[20:39] <masak> raiph: au++ would be proud :)

[20:39] <masak> raiph: she was 8 years ahead of her time.

[20:39] <moritz> raiph: we do that for projects under the perl6/ organization

[20:39] <moritz> (at least I do)

[20:39] <moritz> for rakudo, there are some non-trivial legal aspects to consider

[20:39] <raiph> yeah, I've seen it increasingly regularly over the last 2 years

[20:40] <raiph> I've always wanted more of au's thinking applied

[20:40] <masak> and indeed, HN traces the idea back to au++: https://news.ycombinator.com/item?id=5358645

[20:40] <moritz> au++ was even more "agressive", handing out commit bits to people who might possibly want to commit

[20:40] <masak> "trust the anarchy" ♡

[20:41] <moritz> I remember seeing Guido van Rossum in the list of pugs commit bitters

[20:41] <masak> ...because he badmouthed Perl 6? :P

[20:42] * masak .oO( "I don't know who this Guido guy is, but he sounds like he wants to improve things" )

[20:42] *** Rotwang left
[20:42] <raiph> do p5 contributors have to sign a CLA?

[20:42] <hoelzro> hmm

[20:42] <hoelzro> I can do [:r ...] to lexically enable ratcheting, right?

[20:43] <moritz> hoelzro: yes

[20:43] <hoelzro> so how can I disable ratcheting lexically?

[20:43] <moritz> [:!r ... ]

[20:43] <hoelzro> ah ha

[20:43] <hoelzro> that makes sense =)

[20:43] <hoelzro> moritz++

[20:44] <moritz> don't we also have modifiers for quantifiers that enable backtracking?

[20:44] * moritz hasn't read through S05 in a long time

[20:44] <masak> moritz: yes.

[20:45] <moritz> is that the * suffix?

[20:46] <masak> the "long forms" are *! (greedy) *? (frugal) and *: (ratchet).

[20:47] <masak> and similarly for all the other quantifiers.

[20:47] <masak> depending on the context you're in, you can use just *

[20:47] <moritz> ah, !

[20:47] <masak> yeah.

[20:47] <masak> which works really well for "greedy" :)

[20:48] <masak> ISTR *+ is a p5-compatible STD-spec'd synonym for *?

[20:49] * jnthn back from dinner :)

[20:49] <masak> jnthn! \o/

[20:49] <hoelzro> moritz: I have a goal of summarizing it, someday...

[20:50] <moritz> hoelzro: I have a goal of understanding it, someday

[20:50] <hoelzro> heh

[20:51] <moritz> I think I have come pretty far, but there are still areas that scare me

[20:51] <masak> moritz: pro tip: implement a grammar engine :>

[20:52] <moritz> masak: like, one that does transitive LTM, and bactracking into the NFA?

[20:52] * moritz shudders

[20:53] <masak> moritz: well, one must start somewhere.

[20:53] <masak> moritz: those are likely the last few features one implements.

[20:54] <moritz> last, because after that you give up programming due to constant frustration :-)

[20:54] <masak> yeah, but it's *good* frustration!

[20:54] *** |newbie| joined
[20:57] <moritz>   I'm picking up good frustration ♫

[20:57] *** jaffa4 left
[20:57] *** jferrero left
[20:57] *** jferrero joined
[20:58] *** colomon left
[20:59] *** colomon joined
[21:00] <masak> moritz: now *that* should be the programmer's mantra, instead of "aaaargh don't interrupt me while I'm thinking very complicated thoughts" :)

[21:00] <masak> moritz: programming, at its very heart, is frustration.

[21:00] <jnthn> moritz: You don't "backtrack into the NFA", you just throw away cursors ;)

[21:01] <lue> mantra: I will PERSONALLY torch AMD's factories if you don't work THIS TIME!

[21:02] * FROGGS .oO( Please consider the environment before throwing away cursors! )

[21:03] <lizmat> I thought cursors were made of pure recycled electrons only ?

[21:03] <FROGGS> lizmat: used electrons... it is the same like with batteries :|

[21:04] <moritz> jnthn: so ther NFA enerates a passing cursor each time it is in an accepting state?

[21:04] <moritz> FROGGS: the grow weaker over time?

[21:04] *** Rotwang joined
[21:04] <FROGGS> yeah... positrons would grow weaker back into time though

[21:04] *** kaare_ left
[21:04] <jnthn> moritz: Not quite. In alternation mode it just queues up the branches on the bstack in reverse order and immediately backtracks to hit the first one.

[21:05] <jnthn> moritz: In protoregex mode it returns an ordering

[21:05] <jnthn> moritz: And we just call the candidate rules in that order

[21:06] <Mouq> r: say (my@=^10).=&postcircumfix:<[ ]>(2)

[21:06] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«2␤»

[21:06] <moritz> jnthn: and rakudo's bstack roughly coresponds to a list of cursors in the model advocated by S05, right?

[21:07] <FROGGS> humm, I read "parrot 3cef56" ad "parrot sketch"

[21:07] <jnthn> moritz: Yeah, the bstack is like, "Cursors ain't that cheap, let's go integering" :)

[21:08] <moritz> sounds very integer :-)

[21:10] <lue> is there a windows equivalent of "noatime" ?

[21:11] <FROGGS> lue: http://serverfault.com/questions/33932/how-do-you-disable-the-last-accessed-attribute-on-ntfs-windows

[21:11] <FROGGS> (google #1)

[21:11] <lizmat> depends on the file system no?

[21:11] <lue> :)

[21:11] <lue> [this is for the announcement's known issues section]

[21:12] <moritz> lue: then don't mention the windows stuff

[21:12] <FROGGS> yeah, I guess it is not that common to do that on windows

[21:13] <lue> Oh, I just wanted to mention the non-unix equivalent of noatime, just in case.

[21:13] *** risou_awy is now known as risou

[21:14] <lue> Should I mention the noatime issue in the first place, in case someone runs the spectest?

[21:19] <moritz> I wouldn't give the whole thing a high priority, since the test is a few months old iirc, and so far we didn't have any complaints

[21:23] <dalek> star: 344b246 | lue++ | docs/announce/2013.10.md:

[21:23] <dalek> star: Update Release Announcement

[21:23] <dalek> star: review: https://github.com/rakudo/star/commit/344b246e5f

[21:23] <Mouq> r: say (my@=^10) .= &postcircumfix:<[ ]>((2,3,4)) #fine

[21:23] <camelia> rakudo-parrot 3cef56, rakudo-jvm 882e33: OUTPUT«2 3 4␤»

[21:23] *** benabik left
[21:23] <Mouq> r: say (my@=^10) .= '&postcircumfix:<[ ]>'((2,3,4)) #less so

[21:23] <lue> I would love some review to tell me what issues should be added/removed/reworded

[21:23] <camelia> rakudo-jvm 882e33: OUTPUT«No such method '' for invocant of type 'Array'␤  in method dispatch:<.=> at gen/jvm/CORE.setting:1129␤  in block  at /tmp/ZUohq1LKAG:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1084␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1290␤  in any co…»

[21:23] <camelia> ..rakudo-parrot 3cef56: OUTPUT«No such method '' for invocant of type 'Array'␤  in method dispatch:<.=> at gen/parrot/CORE.setting:1138␤  in block  at /tmp/Ws_a7vFgTl:1␤  in any  at /tmp/Ws_a7vFgTl:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/…»

[21:23] <Mouq> Err, what am I doing?

[21:23] <Mouq> r: say (my@=^10).'&postcircumfix:<[ ]>'((2,3,4)) #less so

[21:24] <camelia> rakudo-jvm 882e33: OUTPUT«No such method '&postcircumfix:<[ ]>' for invocant of type 'Array'␤  in block  at /tmp/0qQfzZIAu9:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1084␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1290␤  in any command_eval at gen/jvm/stage2/NQPHLL.n…»

[21:24] <camelia> ..rakudo-parrot 3cef56: OUTPUT«No such method '&postcircumfix:<[ ]>' for invocant of type 'Array'␤  in block  at /tmp/YMtr9_IGhS:1␤  in any  at /tmp/YMtr9_IGhS:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.nqp:1133␤  in any evalfi…»

[21:27] <Mouq> lue: The :sigspace thing is more like "the only place whitespace will be significant is after atoms that match something"

[21:28] <Mouq> Although your description is technically correct

[21:28] <lue> Mouq: that's what it already says "leading whitespace NOT" ~~ "non-leadng whitespace IS"

[21:28] *** iSlug left
[21:29] <lue> (I didn't write that bit though; it's mostly left as-is. Although I do agree, I did have initial trouble reading it.)

[21:29] <lue> I'd like someone to tell me the notability of L81 of the announcement.

[21:30] <Mouq> Oh, I understand what it's saying now

[21:30] * lue & --until="top of the hour"

[21:30] *** risou is now known as risou_awy

[21:37] *** logie joined
[21:41] *** logie left
[21:50] *** sqirrel left
[21:51] *** donaldh_ joined
[21:52] <lue> All the modules pass, so unless anyone has anything else to say about the announcement (I'll wait a few minutes), the current version is what will come in the tarball.

[21:55] <lizmat> argh, "is deprecated" should read "is DEPRECATED"  :-(

[21:59] <lizmat> well, not so important

[21:59] <lue> lizmat: got it.

[22:01] <dalek> star: bec08fa | lue++ | docs/announce/2013.10.md:

[22:01] <dalek> star: Spelling fix in Announcement.

[22:01] <dalek> star: review: https://github.com/rakudo/star/commit/bec08facb1

[22:02] * lue will now tarball and test once more, sans spectest

[22:02] *** rurban joined
[22:03] <timotimo> Greatly reduce object creation during Regex parsing.  <-  hm, but this is only during code parsing, no? well, and anything that uses ident

[22:04] <japhb__> Which is a lot of things.

[22:04] <lue> timotimo: I assume all regexes are affected, though I could add a "especially for Perl 6 itself" or something to that effect.

[22:04] <japhb__> timotimo: Do you have local changes to perl6-bench?

[22:05] <timotimo> japhb__: i've been trying to change components.json to use the new configure.pl system

[22:05] <timotimo> and also try to get nqp-moarvm updated

[22:06] <japhb__> Are you timotimo on github?

[22:07] <timotimo> no, i'm timo

[22:07] <japhb__> Ah, OK

[22:07] <timotimo> i got in early enough to grab that short name :)

[22:08] *** rurban left
[22:08] <lue> ✔ ⑨ create tarball

[22:08] <lizmat> lue++

[22:08] <japhb__> timotimo: In honor of au++, you now have a perl6-bench commitbit.

[22:08] <lue> (I didn't add the "esp. Perl 6" though, I don't think it's necessary)

[22:08] <timotimo> \o/

[22:09] <timotimo> japhb__: i wish i could try out the changes to components.json, but i'll have to massively downgrade rakudo or something >_>

[22:11] <japhb__> If you have any ideas on dealing with components with changing build instructions, I'm all ears.  Right now, I'm imagining specifying multiple sets of instructions per component, each with a "minimum git revision" that set of instructions should apply to.

[22:11] <japhb__> Downgrade rakudo?  Why?

[22:11] <timotimo> oh

[22:11] <timotimo> to get a working "run" again

[22:11] <japhb__> Oh, right.

[22:11] <timotimo> i don't think we are at a point where we need that feature, though :)

[22:12] <japhb__> Yeah, that's more of something to care about when we're watching for regressions.

[22:12] <timotimo> yup

[22:12] <japhb__> Still, never hurts to vaguely plan ahead.  ;-)

[22:14] <japhb__> OK, run bugs I'm currently aware of: 1) JVM getting boolean value of run result wrong, 2) Run not passing on updated %*ENV, even though shell does.  Any others?

[22:14] <timotimo> calling run often will cause segfaults

[22:14] <timotimo> or "memory corruption" of any sort

[22:15] *** bluescreen10 left
[22:15] <FROGGS> on parrot only, right?

[22:15] <timotimo> yes

[22:15] <timotimo> couldn't test it on moar yet ;)

[22:15] <FROGGS> *g*

[22:15] <FROGGS> we're working on it :o)

[22:15] <FROGGS> btw, if someone would help me, we could fix run()

[22:16] <FROGGS> we only need an implementation (in C) for spawn

[22:16] *** iSlug joined
[22:16] <japhb__> OK, so segfaulting run on Parrot makes 3.

[22:16] <FROGGS> and only for linux... since the windows version is done

[22:16] <japhb__> Are there any known shell() bugs?

[22:16] *** stevan_ joined
[22:16] <FROGGS> not that I know

[22:16] <japhb__> OK, how many of the shell fixes can we steal for run?

[22:16] *** denis_boyun left
[22:17] <FROGGS> all

[22:17] <timotimo> oh, JVM doesn't have open pipe yet

[22:18] <japhb__> Does donaldh's pipe sketch work on JVM

[22:18] <japhb__> ?

[22:18] <timotimo> didn't try, my rakudo is now going to be too outdated :)

[22:19] <FROGGS> timotimo: btw, I believe we can fix issue #3 by replacing "$state but $state" by Process::State as specced

[22:20] <donaldh_> japhb_: yes :-)

[22:20] <donaldh_> timotimo: JVM has nqp::openpipe

[22:20] <FROGGS> this would return the return code, but boolifies to return_code == 0

[22:20] <japhb__> Then by gosh, let's make it happen!

[22:20] <timotimo> doesn't that require the same sort of thing that we need for IntStr and friends?

[22:21] <timotimo> like, do we have to derive it from Str and Bool?

[22:21] <japhb__> Ewww.

[22:22] <timotimo> r: class Process::State is Int is Bool { }

[22:22] <camelia> rakudo-jvm 882e33: OUTPUT«===SORRY!===␤java.lang.ClassFormatError: Duplicate method name&signature in class file __P6opaque__95␤»

[22:22] <camelia> ..rakudo-parrot 995207: OUTPUT«===SORRY!===␤Duplicate box_target for native int␤»

[22:22] *** stevan_ left
[22:22] <timotimo> not Str and Bool, fwiw

[22:22] <jnthn> I sure hope Process::State ain't gonna derive from the two of those :P

[22:22] <timotimo> r: class Process::State is Int is Bool is repr(Int) { }

[22:22] *** stevan_ joined
[22:22] <camelia> rakudo-jvm 882e33: OUTPUT«===SORRY!===␤Cannot unbox a type object␤»

[22:22] <camelia> ..rakudo-parrot 995207: OUTPUT«===SORRY!===␤Cannot unbox a type object as a native str␤»

[22:23] <jnthn> timotimo: The problem there is that Int and Bool both want to own the slot that unboxes as a native int.

[22:23] <japhb__>  class Process::State is Int { method Bool { self == 0 } }; Process::State $a = 0; say so $a; Process::State $b = 1; say so $b;

[22:23] <jnthn> japhb__: that's more like it :)

[22:23] <timotimo> yeah, and i have no idea how to specify that kind of thing

[22:23] <japhb__> r: class Process::State is Int { method Bool { self == 0 } }; Process::State $a = 0; say so $a; Process::State $b = 1; say so $b;

[22:23] <camelia> rakudo-jvm 882e33: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/FbD5VcuWGZ␤Two terms in a row␤at /tmp/FbD5VcuWGZ:1␤------> [32mod Bool { self == 0 } }; Process::State [33m⏏[31m$a = 0; say so $a; Process::State $b = 1[0m␤    expecting any of:␤     …»

[22:23] <camelia> ..rakudo-parrot 995207: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Ga62JEBT0B␤Two terms in a row␤at /tmp/Ga62JEBT0B:1␤------> [32mod Bool { self == 0 } }; Process::State [33m⏏[31m$a = 0; say so $a; Process::State $b = 1[0m␤    expecting any of:␤  …»

[22:23] <FROGGS> r: class P::S { method Numeric() { 42 }; method Bool { False } }; my $state = P::S.new; say ?$state

[22:23] <timotimo> needs a my

[22:23] <camelia> rakudo-parrot 995207, rakudo-jvm 882e33: OUTPUT«False␤»

[22:23] <FROGGS> r: class P::S { method Numeric() { 42 }; method Bool { False } }; my $state = P::S.new; say +$state

[22:23] <camelia> rakudo-parrot 995207, rakudo-jvm 882e33: OUTPUT«42␤»

[22:24] <japhb__> r: class Process::State is Int { method Bool { self == 0 } }; my Process::State $a = 0; say so $a; my Process::State $b = 1; say so $b;

[22:24] <FROGGS> r: class P::S { method Numeric() { 42 }; method Bool { False } }; my $state = P::S.new; say $state unless $state

[22:24] <japhb__> r: class Process::State is Int { method Bool { self == 0 } }; my Process::State $a = 0; say so $a; my Process::State $b = 1; say so $b;

[22:24] <camelia> rakudo-parrot 995207: OUTPUT«Type check failed in assignment to '$a'; expected 'Process::State' but got 'Int'␤  in block  at /tmp/gg2Ef2SOnK:1␤  in any  at /tmp/gg2Ef2SOnK:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.nqp:1133␤ …»

[22:24] <camelia> ..rakudo-jvm 882e33: OUTPUT«Type check failed in assignment to '$a'; expected 'Process::State' but got 'Int'␤  in block  at /tmp/yrUOSGMNhh:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1084␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1290␤  in any command_eval at gen/jvm/s…»

[22:24] <camelia> rakudo-parrot 995207, rakudo-jvm 882e33: OUTPUT«P::S.new()␤»

[22:24] <camelia> rakudo-jvm 882e33: OUTPUT«Type check failed in assignment to '$a'; expected 'Process::State' but got 'Int'␤  in block  at /tmp/cc8rDhDBg6:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1084␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1290␤  in any command_eval at gen/jvm/s…»

[22:24] <camelia> ..rakudo-parrot 995207: OUTPUT«Type check failed in assignment to '$a'; expected 'Process::State' but got 'Int'␤  in block  at /tmp/7BmIjsmxiP:1␤  in any  at /tmp/7BmIjsmxiP:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.nqp:1133␤ …»

[22:24] *** spider-mario joined
[22:25] <japhb__> r: class Process::State is Int { method Bool { self == 0 } }; my Process::State $a .= new(0); say so $a; my Process::State $b .= new(1); say so $b;

[22:25] <camelia> rakudo-jvm 882e33: OUTPUT«Default constructor for 'Process::State' only takes named arguments␤  in method dispatch:<.=> at gen/jvm/CORE.setting:1171␤  in block  at /tmp/u5rewtmoLz:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1084␤  in any evalfiles at gen/jvm/stage2/NQPHLL.n…»

[22:25] <camelia> ..rakudo-parrot 995207: OUTPUT«Default constructor for 'Process::State' only takes named arguments␤  in method new at gen/parrot/CORE.setting:809␤  in method new at gen/parrot/CORE.setting:804␤  in method dispatch:<.=> at gen/parrot/CORE.setting:1187␤  in block  at /tmp/NkyTRG…»

[22:25] <FROGGS> japhb: it is not specced as being an Int

[22:25] <timotimo> oh?

[22:25] <FROGGS> it can give you the PID too

[22:25] <FROGGS> but numifies/gistifies to state, and boolifies, well, you know

[22:26] <timotimo> does it also do the +> 8 thing?

[22:26] <FROGGS> I dont think so

[22:27] <japhb__> r: class Process::State is Int { has int $.state is box_target; has int $.pid; method Bool { self == 0 } }; my Process::State $a .= new(:state(0), :pid(42)); say so $a; my Process::State $b .= new(:state(1), :pid(23)); say so $b;

[22:27] <camelia> rakudo-jvm 882e33: OUTPUT«===SORRY!===␤java.lang.ClassFormatError: Duplicate method name&signature in class file __P6opaque__96␤»

[22:27] <camelia> ..rakudo-parrot 995207: OUTPUT«===SORRY!===␤Duplicate box_target for native int␤»

[22:27] <japhb__> r: class Process::State { has int $.state is box_target; has int $.pid; method Bool { self == 0 } }; my Process::State $a .= new(:state(0), :pid(42)); say so $a; my Process::State $b .= new(:state(1), :pid(23)); say so $b;

[22:27] <camelia> rakudo-jvm 882e33: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \v: Mu *%_)␤  in any  at gen/jvm/BOOTSTRAP.nqp:1201␤  in sub infix:<==> at gen/jvm/CORE.setting:3978␤  in method Bool at /tmp/peodoN2WvE:1␤  in block  at /tmp/peodoN2WvE:1␤  in any ev…»

[22:27] <camelia> ..rakudo-parrot 995207: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \v: Mu *%_)␤  in any  at gen/parrot/BOOTSTRAP.nqp:1218␤  in any  at gen/parrot/BOOTSTRAP.nqp:1209␤  in method Numeric at gen/parrot/CORE.setting:994␤  in sub infix:<==> at gen/parrot…»

[22:28] <japhb__> r: class Process::State is Cool { has int $.state is box_target; has int $.pid; method Bool { self == 0 } }; my Process::State $a .= new(:state(0), :pid(42)); say so $a; my Process::State $b .= new(:state(1), :pid(23)); say so $b;

[22:28] <camelia> rakudo-jvm 882e33: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \v: Mu *%_)␤  in any  at gen/jvm/BOOTSTRAP.nqp:1201␤  in sub infix:<==> at gen/jvm/CORE.setting:3978␤  in method Bool at /tmp/zJHeuS3ylq:1␤  in block  at /tmp/zJHeuS3ylq:1␤  in any ev…»

[22:28] <camelia> ..rakudo-parrot 995207: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \v: Mu *%_)␤  in any  at gen/parrot/BOOTSTRAP.nqp:1218␤  in any  at gen/parrot/BOOTSTRAP.nqp:1209␤  in method Numeric at gen/parrot/CORE.setting:994␤  in sub infix:<==> at gen/parrot…»

[22:28] <japhb__> Harumph.

[22:29] <FROGGS> ETOOMUCHMAGIC

[22:29] <japhb__> r: class Process::State is Cool { has int $.state is box_target; has int $.pid; method Bool { $.state == 0 }; method Numeric { $.state }; }; (my Process::State $a .= new(:state(0), :pid(42)); say so $a; my Process::State $b .= new(:state(1), :pid(23)); say so $b;

[22:29] <camelia> rakudo-jvm 882e33: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/_iZuWb2oFR␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at /tmp/_iZuWb2oFR:1␤------> [32m .= new(:state(1), :pid(23)); say so $b;[33m⏏[31m<EOL>[0m␤  …»

[22:29] <camelia> ..rakudo-parrot 995207: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Y3JivOpK_9␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at /tmp/Y3JivOpK_9:1␤------> [32m .= new(:state(1), :pid(23)); say so $b;[33m⏏[31m<EOL>[0m…»

[22:29] <japhb__> r: class Process::State is Cool { has int $.state is box_target; has int $.pid; method Bool { $.state == 0 }; method Numeric { $.state }; }; my Process::State $a .= new(:state(0), :pid(42)); say so $a; my Process::State $b .= new(:state(1), :pid(23)); say so $b;

[22:29] <lizmat> gnight, #perl6!

[22:29] <camelia> rakudo-parrot 995207, rakudo-jvm 882e33: OUTPUT«True␤False␤»

[22:29] <japhb__> o/ lizmat

[22:29] *** Rotwang left
[22:29] <japhb__> FINALLY.  SHEEESH.

[22:30] <japhb__> Sorry for the bot spam, folks.

[22:30] <timotimo> japhb__: did you notice how you could use a native int, but not have to make a custom BUILD? :)

[22:31] <japhb__> You made that work?

[22:31] <japhb__> timotimo++

[22:31] <|newbie|> timotimo: is it done?

[22:31] <timotimo> yes, just today :D

[22:31] <timotimo> well, between yesterday and today i guess

[22:31] <|newbie|> timotimo: is it done?

[22:32] <timotimo> is what exactly done?

[22:32] <|newbie|> the panda change

[22:32] <timotimo> i'm not sure i follow

[22:33] *** ajr_ left
[22:33] <|newbie|> panda has a bug, it cannot delete files

[22:33] <timotimo> ah, yes

[22:33] <FROGGS> |newbie|: this was fixed right after the 2013.09 release

[22:34] <|newbie|> so it is not in any relase

[22:34] <FROGGS> |newbie|: not yet, but possible today or tomorrow

[22:34] <FROGGS> well, it is in the 2013.10 compiler release fwiw

[22:35] <|newbie|> because of the new release?

[22:35] *** ajr joined
[22:35] <FROGGS> lue is working on a new star release, contain this and a lot of other things

[22:36] *** ajr is now known as Guest55742

[22:36] <lue> I suspect 12 and the rakudo.org part of 13, specifically the availability of its permission-holders, are going to be the only blockers to 2013.10 at this point.

[22:36] <FROGGS> containing*

[22:36] *** Guest55742 is now known as ajr_

[22:37] <|newbie|> what is the bug? Permission of folders, right?

[22:38] <timotimo> unlink didn't persist if permissions didn't allow deletion

[22:38] <timotimo> now it deletes files even if it's not permitted to, basically

[22:38] <timotimo> well, that's worded poorly

[22:38] <|newbie|> who is the possible? 

[22:38] <|newbie|> how

[22:40] <FROGGS> this is possible on windows :o)

[22:40] <FROGGS> so, unlink behaves now exactly like Perl 5's unlink...

[22:40] <|newbie|> what are the permissiion incorrect, anyway?

[22:40] <|newbie|> SHould not be those be fixed?

[22:40] <|newbie|> what ->why

[22:42] <FROGGS> we decided that P5's behaviour is okay, and it fixed the problem

[22:43] <|newbie|> why did you choose this way?

[22:43] <FROGGS> I said that right now

[22:44] <|newbie|> you found one solution, fixing the unlink

[22:44] <|newbie|> did you consider the other way as well?

[22:45] *** dmol left
[22:45] <FROGGS> yes, but it would be rather annoying if you had to check+change the flags of hundreds of files just to delete them afterwards

[22:45] <FROGGS> so, if you can gain control over a file, you sort of have already control over it

[22:46] <FROGGS> so it does not make much sense to forbid deleting it

[22:46] *** xinming left
[22:47] <|newbie|> ok bye

[22:47] *** |newbie| left
[22:48] *** xinming joined
[22:49] *** donaldh_ left
[22:49] <Mouq> lizmat: I need to → bed, but basically the problem is that it ends up being called as $var."&postcircumfix<[ ]>"(|whatev), which, beacuse of the quotes, will currently always call as a method. Adding a dispatch:<quote> method and using it at Actions L3863 should work, but I'm not sure if that's really the best way to do this

[22:50] <timotimo> man, rakudo's ram usage ...

[22:51] <Mouq> Maybe there could be two dispatch methods for <.=>

[22:51] * Mouq out

[22:51] <FROGGS> gnight Mouq 

[22:52] <jnthn> Wait, what's that trying to fix?

[22:53] <timotimo> the @a.=[1,2,3] thing

[22:53] <FROGGS> I believe some splice mutator thing

[22:53] <FROGGS> yeah

[22:53] <jnthn> hmmm

[22:54] <jnthn> Well, i fit's gonna work, it should be a general solution for postfixes too

[22:54] <timotimo> not all postcircumfix are subs :\

[22:55] *** Mouq left
[22:57] <jnthn> yeah, postcircumfix:<( )> is the odd one out now :(

[22:59] *** raiph left
[23:01] *** xinming left
[23:01] <lue> so, unless someone insists that I run the exact same spectest on the exact same rakudo...

[23:01] <lue> ✔ ⑩ Verify tarball

[23:02] * timotimo desists

[23:02] *** xinming joined
[23:04] *** raiph joined
[23:04] *** BenGoldberg joined
[23:04] <lue> ✔ ⑪ Tag Star "2013.10"

[23:05] <lue> Unsurprisingly, I have not the permissions for 12.

[23:06] <BenGoldberg> preflex: seen yoleaux

[23:06] <preflex>  yoleaux was last seen on #perl6 3 days, 3 hours, 44 minutes and 13 seconds ago, saying: 18:23Z <diakopter> Mouq: awesome work on stdsigspace Mouq++

[23:07] <lue> pmichaud, jnthn, masak, PerlJam, tadzik, moritz : if one of you could scp the R* tarball, that'd be great :) the md5sum of the tarball, so you can verify generation went smoothly, is ef8d1e47d11c5d5ad663405897fb4ee0.

[23:07] <lue> (if you could also put the announcement on rakudo.org that'd be super)

[23:08] <jnthn> lue: Sadly, my key for that is sat on my machine at home, which is a long way away.

[23:08] <lue> :(

[23:08] <lue> you couldn't, say... scp the key, could you? :)

[23:09] <FROGGS> win *cough* dows

[23:09] <jnthn> The machine isn't even running, given I'm away for over a week.

[23:10] <lue> you couldn't, say... scp a power-on command, could you? :P

[23:10] * lue knows moritz will be around late tonight from his POV, at least.

[23:12] <lue> "his" being me, that is.

[23:14] *** risou_awy is now known as risou

[23:17] *** raiph left
[23:32] *** risou is now known as risou_awy

[23:38] *** iSlug left
[23:39] *** rurban joined
[23:41] *** spider-mario left
[23:43] <dalek> nqp: 1161844 | dwarring++ | examples/rubyish/ (3 files):

[23:43] <dalek> nqp: rubyish - implement compound-statement/multi-line interpolation

[23:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1161844b45

[23:43] *** benabik joined
[23:45] *** Celelibi joined
[23:50] *** btyler left
