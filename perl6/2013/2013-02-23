[00:00] <mikess> tadzik: now i'm in poznan

[00:00] <tadzik> are you coming to the Polish Perl Workshop?

[00:00] <mikess> little time

[00:00] <mikess> several hours go to wrocla

[00:00] <mikess> v

[00:00] <uvtc> census: haha

[00:04] <jnthn> sleep time here; dobru noc, #perl6 o/

[00:05] <tadzik> dobranoc jnthn 

[00:06] <census> good night jnthn!!

[00:06] <census> hope you have some fun weekend plans!!  going skiing anytime soon?

[00:08] *** mtk left
[00:10] *** gdey left
[00:11] *** mtk joined
[00:18] <census> iHi!    May I ask about Xchat?  

[00:19] *** gdey joined
[00:19] <TimToady> if you question is, How can I rewrite Xchat in Perl 6, sure

[00:20] <census> unfortunately not :(

[00:20] *** am0c joined
[00:20] <TimToady> in any case, most of us know nothing about Xchat

[00:26] *** mtk left
[00:35] <Timbus> heeey. i do :[

[00:39] <census> yes and timbus was very nice to help :) 

[00:40] <census> snaps for timbus

[00:40] <TimToady> that's spelled Timbus++

[00:41] <census> like in C++ ?

[00:41] <census> when you want to update the counter? 

[00:41] <census> or in perl?

[00:41] <TimToady> it adds one to the person's karma

[00:41] *** colomon_ joined
[00:41] <TimToady> (if any karmabots are listening)

[00:41] <colomon_> karma TimToady

[00:41] <sorear> tadzik++

[00:41] <census> TimToady ++

[00:41] <sorear> !karma TimToady

[00:42] <sorear> @karma TimToady

[00:42] <TimToady> no lambdabot here

[00:42] <colomon_> o/, sorear 

[00:42] <TimToady> aloha sometimes

[00:42] <TimToady> aloha karma sorear

[00:42] <TimToady> not today, I guess

[00:43] <TimToady> speaking of aloha, aloha &  # teen quiz practice

[00:43] <census> May I ask if anybody knows about irc.perl.org ?

[00:45] *** colomon left
[00:45] *** colomon_ is now known as colomon

[00:45] <sorear> census: There are people who know about it.

[00:45] <sorear> For instance, it's not actually a Perl thing

[00:46] <sorear> it's part of the MAGnet IRC network; somebody set up a DNS alias without asking them

[00:46] <census> How would I learn what the different rooms are in irc?  

[00:46] <sorear> The MAGnet people have mostly forgiven us now, though.

[00:46] <sorear> /topic

[00:50] <census> I type /topic into the xchat browser?  

[00:51] <sorear> xchat should do it automatically (more)

[00:51] <sorear> somewhere on your screen you should see  »ö« Welcome to Perl 6! | http://perl6.org/ | evalbot usage: 'perl6 ...

[00:51] <sorear> that's the topic line

[00:52] <census> yes i see that in my internet browser

[00:52] <census> i'm on freenode in the internet browser

[00:52] <sorear> it says briefly what the current room is for, and usually also gives you a link to a page with more info

[00:52] <sorear> that's how you find out what rooms are

[00:52] <census> I wanted to know the list of rooms from which I can choose in irc

[00:52] <sorear> join them, and look at the topic line

[00:52] *** zby_home_ left
[00:52] <sorear> ah

[00:52] <census> Like what are alternatives to irc.perl.org-> #perl-help

[00:52] <sorear> I think there's a /list command

[00:53] <sorear> but there are tens of thousands of rooms, so it's not really useful

[00:53] <census> well which perl rooms do they have, for starters?

[00:54] <sorear> I don't know, and I don't think there's an easy way to find out

[00:54] <sorear> Best you can do is ask your $SEARCH-ENGINE for 'perl help irc'

[00:56] <sorear> you may also have luck looking for an irc channel corresponding to a local perl mongers group

[01:12] *** japhb_ left
[01:13] <swarley> census, http://www.irc.perl.org/faq.html

[01:21] *** lue joined
[01:25] *** alec__ joined
[01:30] *** gdey left
[01:42] *** grondilu left
[01:52] *** aindilis left
[01:52] *** alec__ left
[01:56] *** gdey joined
[01:56] *** PacoAir left
[02:05] *** gdey left
[02:08] *** leprevost joined
[02:08] *** PZt joined
[02:09] * colomon would like to know how his Mac got seemingly everything back in the restore except gcc?!?

[02:10] * TimToady blames the NRA

[02:11] <colomon> are they in favor of gnu control?

[02:12] * diakopter giggles at the pun

[02:27] <uvtc> colomon: tee he he

[02:48] *** gdey joined
[02:48] <colomon> ugh, at the current rate it's going to take an hour to download XCode from Apple's website.  Sigh.

[02:49] <geekosaur> mmm, 2+ GB downloads

[02:50] * geekosaur got to do that twice in a week because apple released 4.6 the day after he installed 4.5

[02:51] * sorear is still on 4.3

[02:53] <geekosaur> I had been on 3.x, on SL; upgraded to ML, had to reinstall xcode, then 4.6 came out and #macports wanted some people to verify it didn't break things (but I held off a bit because not my network I'm abusing...)

[02:54] * colomon is downloading 3.2.6

[02:54] * colomon is scared of lions

[03:00] *** gdey left
[03:05] <japhb> colomon, I think that shows remarkable sanity.  :-)

[03:24] *** orafu left
[03:24] *** orafu joined
[03:38] *** census left
[03:41] * TimToady is scared of anything from Cupertino, and I'm *sitting* in Cupertino

[03:43] <uvtc> TimToady: what is your development setup? (OS?)

[03:56] *** census joined
[03:57] <colomon> uvtc: I believe TimToady has a Linux laptop.  ThinkPad?

[03:58] <uvtc> Ah. Me too. Xubuntu.

[03:58] <census> me 2!

[03:58] <uvtc> Nice trim, classic desktop.

[03:58] <sorear> I know he has a Linux ThinkPad; I saw it in Perl

[03:59] <sorear> whether this is his primary dev machine is something only he can answer

[04:00] <TimToady> yes, I do most of my work on the T61

[04:00] <uvtc> TimToady: I was curious which distribution. Care to comment?

[04:00] <TimToady> normal Ubuntu, albeit not with Unity

[04:01] <uvtc> Ah.

[04:02] <uvtc> Is there a location to find other graphics besides Camelia to use for Perl 6 -related stuff?

[04:03] <uvtc> Or is she available in other sizes?

[04:03] <sorear> isn't she an SVG?

[04:03] <rking> I'm not impressed at how Github relased "Boxen" with such an OSX focus. Greasing the paths for homogenously-Apple dev teams.

[04:04] <TimToady> that's because Linus wrote git, and loves OSX...oh wait...

[04:04] <uvtc> sorear: I'm seeing camelia-logo.png and camelia-logo-small.png.

[04:04] <uvtc> Which look the same size...

[04:05] <TimToady> try mu/misc

[04:06] <sorear> and do read the terms of use

[04:06] <uvtc> Right.

[04:06] * geekosaur not sure that's the right emphasis wrt boxen... the comparison is that macs are generally considered not very properly maintainable

[04:06] <geekosaur> so it's less "we're focused on macs" as "we're making the d__n things manageable for a change"

[04:07] <geekosaur> I mean state of the art for remote management is radmind

[04:18] *** leprevost left
[04:28] *** xinming left
[04:30] *** xinming joined
[04:39] * colomon is not having any luck installing gcc and is going to bed instead.

[04:39] <sorear> night colomon

[04:42] *** preflex left
[04:42] <rking> I wonder how many nights have ended that way.  It's more than fifty.

[04:42] *** preflex_ joined
[04:43] *** preflex_ is now known as preflex

[04:43] <uvtc> phenny: tell tadzik This seems like a good start: https://github.com/uvtc/compact-perl6-tut . Feel free to fork. I can host it for now until you find a better place for it.

[04:43] <phenny> uvtc: I'll pass that on when tadzik is around.

[04:59] *** uvtc left
[05:01] *** jaldhar joined
[05:10] *** bluescreen100 left
[05:57] *** sisar joined
[06:21] *** am0c left
[06:29] *** lizmat left
[06:31] *** Liz joined
[06:31] *** Liz is now known as Guest47952

[06:40] *** Guest47952 left
[06:42] *** quester joined
[06:43] *** Liz_ joined
[06:50] *** Liz_ left
[06:51] *** gdey joined
[06:59] *** Liz_ joined
[07:04] *** census left
[07:20] *** lue left
[07:26] *** Chillance left
[07:31] <moritz> \o

[07:31] <diakopter> o/

[07:31] <sorear> |o|

[07:45] *** cparen joined
[07:46] *** FROGGS joined
[07:50] *** zby_home_ joined
[07:57] <nwc10> jnthn: tests still pass (except the one that needs ICU)

[08:01] <FROGGS> nwc10: you're expecting something to break?

[08:01] <nwc10> based on experience so far, no

[08:01] <nwc10> more likely the Makefile than the Java code

[08:02] <nwc10> but it's a different OS from jnthn

[08:02] <nwc10> but it's possible to break things in various interesting ways, such as failing to check in files

[08:04] <sorear> how much of java-rakudo exists at this point?

[08:05] <diakopter> rakudo isn't ported, but nqp is coming along

[08:06] *** quester left
[08:06] <diakopter> probably will be able to compile itself in the next week or two

[08:08] *** am0c joined
[08:09] <sorear> cool

[08:12] <FROGGS> wow

[08:15] <diakopter> well. perhaps I'm a bit optimistic; surely not more than 3 weeks, however.

[08:28] *** dolmen joined
[08:42] *** am0c left
[08:50] *** domidumont joined
[08:58] <moritz> so, what parts are missing for the bootstrap?

[08:59] *** domidumont left
[08:59] *** domidumont joined
[09:00] *** cogno joined
[09:09] *** cogno left
[09:17] *** cparen left
[09:18] <GlitchMr> https://github.com/masak/p6cc2012/blob/master/t1/review/glitchmr.md

[09:18] <GlitchMr> I have a feeling I made this too short.

[09:18] <GlitchMr> Most of my code is error checking.

[09:19] <moritz> "too short" is not a failre mode for code

[09:19] <moritz> "not readable" or "not enough features" or so are error modes for code that sometimes go along with short code

[09:20] <masak> forenoon, #perl6

[09:20] <moritz> masak++ # t1 reviews, blag

[09:20] <masak> \o/

[09:21] <sorear> If you made your code too short, Perl 6 would tell you something like "Unable to parse blockoid, could not find final }"

[09:21] <sorear> and greetings, masak.

[09:21] <GlitchMr> ;-)

[09:21] <moritz> sorear++

[09:21] <masak> I may be a perfectionist and a procrastinator, but at times I release stuff -- just not always early and often. ;)

[09:22] <masak> GlitchMr: I don't think you made your code too short.

[09:22] <GlitchMr> Yeah, for gather for was a mistake from old version of code.

[09:22] <GlitchMr> Haven't noticed it when submitted it.

[09:22] <masak> it looked like an iterational thing, yes.

[09:22] <sorear> std: say "Hello

[09:22] <p6eval> std 7551b8f: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse double quotes at /tmp/bGV39ayPwV line 1:␤------> [32msay [33m⏏[31m"Hello[0m␤Couldn't find final '"'; gave up at /tmp/bGV39ayPwV line 1 (EOF):␤------> [32msay "Hello[33m⏏[31m<EOL>[0m␤Parse failed␤FAILED 00:01 41m␤…

[09:22] <sorear> i forget the error for that

[09:22] * moritz still doesn't understand how code can be "too short"

[09:23] <moritz> oh, and "blockoid" is a terrible thing to say in an error message

[09:23] <masak> moritz: just read a few J snippets over at Rosetta Code :P

[09:23] <sorear> moritz: dropped connection in the middle of a download

[09:23] <sorear> :)

[09:23] <moritz> masak: but that's more a problem with "not readable" and not "too short"

[09:23] <masak> they are related, though.

[09:23] <GlitchMr> I'm sure that Larry has showed what "too short" means in "That Goes Without Saying (or Does It)"

[09:24] <GlitchMr> shown*

[09:30] *** kaare_ joined
[09:32] <GlitchMr> Also, just mentioning, JavaScript can figure out initial value in .reduce... provided that list isn't empty.

[09:37] <GlitchMr> Also, PostScript isn't intended to be read by humans, but by printers.

[09:40] <GlitchMr> As for too short, well, J: rms=: (+/ % #)&.:*:

[09:41] <moritz> GlitchMr: again that's a problem of readability, not shortness

[09:42] <moritz> yes, they can be related, but it's really not the shortness that's the problem

[09:42] *** labster left
[09:42] <diakopter> moritz is apparently very defensive about terse code ;)

[09:43] *** dolmen left
[09:43] <GlitchMr> Yet, Mathematica authors claim that their language makes shorter programs than Perl 6.

[09:43] <diakopter> ENOTTERSEJUSTSUCCINT

[09:43] <GlitchMr> Or rather, practically any language that isn't J.

[09:44] <GlitchMr> http://rosettacode.org/wiki/Averages/Root_mean_square#Mathematica

[09:44] <diakopter> *SUCCINCT

[09:44] <GlitchMr> I guess it's readable.

[09:44] <GlitchMr> RootMeanSquare@Range[10]

[09:44] <GlitchMr> It gives precise solution of sqrt(77/2)

[09:45] <moritz> well, it makes perfectly sense for a language specialized for math to excel at math :-)

[09:46] <GlitchMr> And "Hello, world" is practically shorter only in PHP: http://rosettacode.org/wiki/Hello_world/Text#J

[09:46] <GlitchMr> oops, wrong language

[09:47] <GlitchMr> http://rosettacode.org/wiki/Hello_world/Text#Mathematica

[09:47] <GlitchMr> Well, ok, it's longer than Perl 6.

[09:47] *** dolmen joined
[09:47] <sorear> FORTH should be pretty short for that

[09:48] <GlitchMr> But even when they don't, well...

[09:48] <GlitchMr> http://rosettacode.org/wiki/Soundex#Mathematica

[09:48] <GlitchMr> It's still short.

[09:48] <GlitchMr> And it's not math related.

[09:48] <GlitchMr> Except it's case where Perl 5 is shorter than Perl 6.

[09:49] <GlitchMr> It's also one of rare cases when PHP is short. When the feature that Rosetta Code wants is builtin.

[09:53] *** spider-mario joined
[09:53] *** spider-mario left
[09:54] *** spider-mario joined
[09:54] <moritz> Mathematica is very powerful, but sadly there's no free, feature-complete implementation

[09:55] <moritz> and it's hard to find online reasources that teach the finer/advanced points of Mathematica

[09:56] <GlitchMr> rn: say 125.base(-2)

[09:56] <p6eval> niecza v24-23-g0520c7c: OUTPUT«Unhandled exception: base must be between 2 and 36, got -2␤  at /home/p6eval/niecza/lib/CORE.setting line 1438 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 845 (Int.base @ 6) ␤  at /tmp/updtqgJPvG line 1 (mainline @ 3) ␤  at /home/p6eval/niecz…

[09:56] <p6eval> ..rakudo 483ce8: OUTPUT«base must be between 2 and 36, got -2␤  in method gist at src/gen/CORE.setting:10517␤  in sub say at src/gen/CORE.setting:7602␤  in block  at /tmp/HhMgM3UcQD:1␤␤»

[09:56] <GlitchMr> https://en.wikipedia.org/wiki/UMC_%28Computer%29

[09:57] <GlitchMr> What's wrong with base -2?

[09:57] <moritz> ENOUSECASE

[09:57] <GlitchMr> But... this old Polish computer uses negabinary.

[09:59] <moritz> then run old Polish software on it :-)

[10:02] <GlitchMr> What if I would make a patch to add support for negative bases?

[10:02] *** census joined
[10:02] <sorear> I would laugh and sigh at it

[10:03] <moritz> that'd be pretty much my reaction too

[10:03] <sorear> and then ignore it, for reasons having a lot to do with my lack of a commit bit

[10:03] <sorear> or maybe that would just be my excuse

[10:03] <moritz> sorear: it could be a niecza patch

[10:05] <sorear> troo

[10:05] <sorear> although if people send me niecza patches, I mostly would forward them to colomon++

[10:10] <GlitchMr> I guess that I should make Math::NegativeBases then.

[10:11] <GlitchMr> That actually could be a good idea.

[10:21] *** wk joined
[10:24] *** SamuraiJack joined
[10:30] *** census left
[10:35] <jnthn> .oO( Math::NegativeBases: All your base are now belong to Perl 6 )

[10:39] *** slavik1 joined
[10:52] *** ilbot6 joined
[10:53] *** ilbot6 left
[10:53] *** ilbot6 joined
[10:53] *** ilbot6 left
[10:55] *** ilbot6 joined
[10:56] *** ilbot6 left
[10:58] *** gdey left
[10:58] *** gdey_ joined
[11:02] *** ilbot6 joined
[11:03] *** ilbot6 left
[11:05] *** gdey_ left
[11:05] *** gdey joined
[11:09] *** ilbot6 joined
[11:09] *** ilbot6 left
[11:22] *** woosley left
[11:26] *** gdey left
[11:27] *** rindolf joined
[11:28] *** gdey joined
[11:31] <dalek> nqp-jvm-prep: fefebb0 | jnthn++ | / (2 files):

[11:31] <dalek> nqp-jvm-prep: Add missing string relationals (lt, gt, le, ge).

[11:31] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/fefebb0396

[11:31] <dalek> nqp-jvm-prep: 6407462 | jnthn++ | nqp-src/NQPHLL.pm:

[11:31] <dalek> nqp-jvm-prep: Uncomment most of EXPR

[11:31] <dalek> nqp-jvm-prep: 

[11:31] <dalek> nqp-jvm-prep: One remaining commented bit exposes a code-gen bug.

[11:31] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/6407462405

[11:31] <dalek> nqp-jvm-prep: 89116c8 | jnthn++ | lib/QAST/JASTCompiler.nqp:

[11:31] <dalek> nqp-jvm-prep: Fix loop non-sink context + handler code-gen bug.

[11:31] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/89116c8bf5

[11:31] <dalek> nqp-jvm-prep: 3a488bd | jnthn++ | nqp-src/NQPHLL.pm:

[11:31] <dalek> nqp-jvm-prep: Uncomment 2 remaining commented lines of EXPR.

[11:31] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/3a488bd3cf

[11:34] <colomon> \o/

[11:40] *** zby_home_ left
[11:43] <jnthn> r: say ord('\a')

[11:43] <p6eval> rakudo 483ce8: OUTPUT«92␤»

[11:43] <jnthn> r: say ord("\a")

[11:43] <p6eval> rakudo 483ce8: OUTPUT«7␤»

[11:45] <FROGGS> n: say ord("\a")

[11:45] <p6eval> niecza v24-23-g0520c7c: OUTPUT«7␤»

[11:45] <FROGGS> why that?

[11:46] <FROGGS> ahh, wait

[11:46] <jnthn> alarm

[11:46] <diakopter> r: say ord('\\')

[11:46] <p6eval> rakudo 483ce8: OUTPUT«92␤»

[11:46] <FROGGS> that's right

[11:46] <jnthn> r: say "\a"

[11:46] <p6eval> rakudo 483ce8: OUTPUT«␤»

[11:46] * jnthn hopes he didn't alarm anyone :P

[11:46] <diakopter> jnthn: see \\ is also 92

[11:46] <jnthn> diakopter: yes, in single quoted strings you don't get the escapes :)

[11:46] <diakopter> oh yeah :)

[11:47] <FROGGS> can somebody tell me if this should match? I believe its shouldn't, so there is an invalid test I can remove:

[11:47] <FROGGS> nr: my $foo = "a+b"; say "aaaaab" ~~ /"$foo"/

[11:47] <p6eval> rakudo 483ce8, niecza v24-23-g0520c7c: OUTPUT«#<failed match>␤»

[11:48] <FROGGS> nr: my $foo = "a+b"; say "aaaaab" ~~ /<"$foo">/ # this should however

[11:48] <p6eval> rakudo 483ce8: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unrecognized regex metacharacter < (must be quoted to match literally)␤at /tmp/I8pBuzVnec:1␤------> [32mmy $foo = "a+b"; say "aaaaab" ~~ /<[33m⏏[31m"$foo">/ # this should however[0m␤Unrecognized regex metacharacter " (must be quot…

[11:48] <p6eval> ..niecza v24-23-g0520c7c: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unrecognized regex assertion at /tmp/qf1dxSb_JW line 1:␤------> [32mmy $foo = "a+b"; say "aaaaab" ~~ /<[33m⏏[31m"$foo">/ # this should however[0m␤␤Parse failed␤␤»

[11:48] <jnthn> nr: my $foo = "ab"; say "aaaaab" ~~ /"$foo"/

[11:48] <p6eval> rakudo 483ce8, niecza v24-23-g0520c7c: OUTPUT«｢ab｣␤␤»

[11:48] <jnthn> nr: my $foo = "a+b"; say "aaaaab" ~~ /<$foo>/

[11:48] <p6eval> rakudo 483ce8, niecza v24-23-g0520c7c: OUTPUT«｢aaaaab｣␤␤»

[11:48] <FROGGS> this too, right

[11:48] <jnthn> FROGGS: I think the test is wrong.

[11:48] <FROGGS> thanks

[11:48] <jnthn> FROGGS: It shouldn't treat stuff in a quoted string as regex syntax.

[11:49] <FROGGS> So I'll push in a bit, some more TODOs eliminated :P

[11:50] <FROGGS> still not used NFA, I dont understand whats going on there ó.ò

[11:55] *** mberends joined
[11:59] <dalek> nqp-jvm-prep: d84d0f0 | jnthn++ | / (2 files):

[11:59] <dalek> nqp-jvm-prep: A basic nqp::escape; good enough for now.

[11:59] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/d84d0f07e4

[11:59] <dalek> nqp-jvm-prep: 7a125e7 | jnthn++ | nqp-src/ (3 files):

[11:59] <dalek> nqp-jvm-prep: Uncomment things that waited on nqp::escape.

[11:59] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/7a125e7a75

[12:01] <moritz> Timbus: https://github.com/parrot/parrot/issues/938 that's why the first channel join doesn't work in Net::IRC

[12:02] <moritz> it's a bit sad that we need Net::IRC layered on top of rakudo layered on top of parrot to find such parrot bugs

[12:02] <Timbus> oh so that issue still persists?

[12:02] <Timbus> but somehow it isnt dying anymore

[12:02] <moritz> that's the first time I've heard of that issue

[12:02] <Timbus> oh

[12:03] <moritz> when you were talking about socket issues yesterday, I thought you meant the encoding stuff

[12:03] <Timbus> nah

[12:03] <Timbus> net::irc hasnt worked since the IO cleanup merge

[12:03] <moritz> and yes, it's still dying, unless you catch it with a try

[12:03] <Timbus> well, at some point in the past  couple of months it has somehow managed to survive the seek crash

[12:07] *** not_gerd joined
[12:07] <not_gerd> Timbus: it's only triggered if your IO buffered contain unwritten/unread data

[12:07] <not_gerd> ^buffers

[12:08] *** ilbot6 joined
[12:08] <moritz> which can happen quite easily if you use read data line-wise

[12:09] <dalek> nqp-jvm-prep: 5d32417 | jnthn++ | nqp-src/NQPHLL.pm:

[12:09] <dalek> nqp-jvm-prep: We can cross-compile HLL::CommandLine first try.

[12:09] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/5d32417182

[12:10] <Timbus> i thought socket::io::inet used its own line buffer..

[12:11] <Timbus> it did at some point at least. i mean i wrote it :v

[12:12] <not_gerd> Timbus: doesn't matter what any layer above Parrot does as long as Parrot's internal IO buffering isn't disabled

[12:13] <not_gerd> (if that's even possible)

[12:13] *** jaldhar left
[12:15] * not_gerd lunch&

[12:19] <tadzik> re procrastination: release-early is a form of procrastination too: "bah, that's enough, I'll finish it later" :)

[12:19] <phenny> tadzik: 04:43Z <uvtc> tell tadzik This seems like a good start: https://github.com/uvtc/compact-perl6-tut . Feel free to fork. I can host it for now until you find a better place for it.

[12:19] <tadzik> good morning #perl6

[12:19] * colomon finally has a working gcc on his Mac again!

[12:19] <FROGGS> \o tadzik 

[12:20] *** census joined
[12:20] *** SunilJoshi joined
[12:21] <jnthn> o/ tadzik 

[12:24] *** dolmen left
[12:30] * colomon has fresh Rakudo build!

[12:31] <FROGGS> \o/

[12:31] *** cogno joined
[12:33] *** SunilJoshi left
[12:35] *** cognominal joined
[12:37] *** cogno left
[12:42] *** dolmen joined
[12:47] <FROGGS> r: $_ = 'abc'; /a./; say $/

[12:47] <p6eval> rakudo 483ce8: OUTPUT«｢ab｣␤␤»

[12:52] *** mtk joined
[12:52] *** saeidw joined
[12:53] <nwc10> jnthn: tests still pass (except the one that needs ICU) still :-)

[12:55] <arnsholt> o/

[12:55] <FROGGS> hi arnsholt 

[12:58] *** daniel-s left
[12:59] *** daniel-s joined
[13:01] *** dolmen left
[13:03] <arnsholt> Yay. Useful bash features save my bacon yet again

[13:07] *** cognominal left
[13:09] *** dolmen joined
[13:10] *** cognominal joined
[13:13] *** dolmen left
[13:19] *** am0c joined
[13:28] <timotimo> good day!

[13:28] <arnsholt> Hello there!

[13:29] <FROGGS> hi timotimo 

[13:29] <census> hello :)

[13:30] <colomon> tadzik: when panda installs binaries (well, executables in the bin directory), does it do anything with the #! line specifying the perl6 to use?

[13:32] *** grondilu joined
[13:35] <timotimo> and nw that i found out where in this house i can actually get an internet connection working, it's time to go cook :|

[13:36] *** mberends left
[13:37] <tadzik> colomon: no, it doesn't

[13:38] <tadzik> it only sets chmod, if available

[13:38] *** cognominal left
[13:40] <colomon> tadzik: is there a reason why it shouldn't?  right now it is installing executables that don't actually work because of this...

[13:41] <tadzik> colomon: well, I'd say that it is expected of the executables to have a shebang line

[13:41] <colomon> tadzik: yes, but shebang lines aren't particularly portable

[13:41] <tadzik> hm

[13:43] <colomon> or to put it a different way, assuming that each repo has the right shebang line for every possible p6 install is a bit much.

[13:43] *** cognominal joined
[13:43] <tadzik> agreed

[13:44] *** mberends joined
[13:44] * colomon is now doubting that... is #!/usr/bin/env perl6 "good enough"?

[13:48] <colomon> tadzik: Hurmph, that seems to work for me for the moment, but now I'm bumping into the issue where panda is not installing the files somewhere that Rakudo can find them.

[13:48] <colomon> (not the executables, the modules)

[13:48] <tadzik> I guess it could just always write the shebang first, then write the actual file, if you know what I mean

[13:48] <tadzik> so concat(proper_shebang, bin_file)

[13:49] <tadzik> that would work, the second shebang would just be a comment

[13:50] <colomon> yes, that would work.

[13:51] <dalek> rakudo/nom: c255f1d | (Tobias Leich)++ | src/ (2 files):

[13:51] <dalek> rakudo/nom: interpolation of e.g. regexes in arrays in regexes

[13:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c255f1d91a

[13:51] <dalek> roast: bdd2445 | (Tobias Leich)++ | S05-interpolation/regex-in-variable.t:

[13:51] <dalek> roast: unfudge now passing tests

[13:51] <dalek> roast: 

[13:51] <dalek> roast: The test "Rulish scalar match 7" is invalid and therefor inverted

[13:51] <dalek> roast: review: https://github.com/perl6/roast/commit/bdd2445b72

[13:52] *** cognominal left
[13:55] *** am0c left
[13:57] <arnsholt> timotimo: It seems Zavolaj is broken on my laptop right now, so I can't actually check your paste. Sorry :/

[13:57] *** jaldhar joined
[13:58] <colomon> r: say %*CUSTOM_LIB.perl

[13:58] <p6eval> rakudo 483ce8: OUTPUT«("perl" => "/home/p6eval/nom-inst/lib/parrot/4.10.0-devel/languages/perl6", "vendor" => "/home/p6eval/nom-inst/lib/parrot/4.10.0-devel/languages/perl6/vendor", "site" => "/home/p6eval/nom-inst/lib/parrot/4.10.0-devel/languages/perl6/site", "home" => "/home/p6eval/.…

[13:59] *** not_gerd left
[13:59] <rindolf> TimToady: hi, here?

[14:02] <colomon> tadzik: oh, I think the problem I'm having with panda is my "installed" panda is an old one, and rebootstrap.pl isn't helping with that.

[14:02] <tadzik> hmm

[14:03] <tadzik> so the PATH still points to the old one?>

[14:03] <tadzik> rebootstrap makes little sense these days, with CUSTOM_LIB and all that

[14:03] <tadzik> because it can't know anymore where were the old panda files

[14:03] <tadzik> so it finds none

[14:06] *** dolmen joined
[14:07] *** dolmen left
[14:07] *** dolmen joined
[14:08] *** dolmen left
[14:08] *** dolmen joined
[14:11] *** dolmen left
[14:12] *** am0c joined
[14:16] <FROGGS> r: my @rx = ( rx/ \w /, rx/""/ ); say "!=?kgkftzf433#" ~~ / @rx+ /

[14:16] <p6eval> rakudo c255f1: OUTPUT«｢!=?kgkftzf433｣␤␤»

[14:16] <FROGGS> r: my @rx = ( rx/ \w / ); say "!=?kgkftzf433#" ~~ / @rx+ /

[14:16] <p6eval> rakudo c255f1: OUTPUT«｢!=?kgkftzf433｣␤␤»

[14:16] <FROGGS> hmmm

[14:16] <FROGGS> it is still matching at pos 0

[14:17] <FROGGS> r: my @rx = ( rx/ (\w) / ); say "!=?kgkftzf433#" ~~ / @rx+ /

[14:17] <p6eval> rakudo c255f1: OUTPUT«｢!=?kgkftzf433｣␤␤»

[14:17] <FROGGS> r: my $rx = rx/ (\w) /; say "!=?kgkftzf433#" ~~ / $rx+ /

[14:17] <p6eval> rakudo c255f1: OUTPUT«｢kgkftzf433｣␤␤»

[14:17] <arnsholt> Oh, derp. At least I think I found the Zavolaj bug

[14:18] <moritz> there's only one? :-)

[14:19] <arnsholt> The weird one I had right now ;)

[14:19] <arnsholt> I brainoed in my comment to cotto++'s pull request

[14:19] <arnsholt> The correct action in the default case was "continue" not "Parrot_ex_throw"

[14:21] <arnsholt> I really should spend some time adding dyncall tests to NQP

[14:21] *** Psyche^ joined
[14:24] *** Patterner left
[14:24] *** Psyche^ is now known as Patterner

[14:25] *** PacoAir joined
[14:27] <moritz> does the release contain the broken thing?

[14:27] <arnsholt> Ooh, quite possibly

[14:27] <arnsholt> Which commit is the release based on?

[14:34] <moritz> moritz@lara:~/p6/rakudo/nqp>git rev-parse 2013.02

[14:34] <moritz> d3eb49f127d606f31d167830bcb59b0967ac350f

[14:36] *** cognominal joined
[14:37] <colomon> tadzik: yes, PATH still points to the old one, and rebootstrap doesn't do anything to change that.

[14:43] *** leprevost joined
[14:43] *** SunilJoshi joined
[14:44] <arnsholt> moritz: Yeah, the release has the bug

[14:51] <moritz> colomon: bootstrapping tells you which directory to include in $PATH

[14:52] <moritz> arnsholt: does it affect all NCI code? or just some rare code paths? (if yes, which?)

[14:53] *** saeidw left
[14:55] *** cbk1090 joined
[15:01] <arnsholt> Any is native function that passes arguments that aren't CArray/CStruct REPRd

[15:02] <arnsholt> So all the things, more or less

[15:02] <dalek> nqp: 21a6b2c | (Arne Skjærholt)++ | src/ops/nqp_dyncall.ops:

[15:02] <dalek> nqp: Fix braino in nqp_dyncall.ops.

[15:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/21a6b2c762

[15:03] <moritz> all the responses I can think of are not safe for family

[15:04] <arnsholt> Yeah >.<

[15:07] <arnsholt> Is making an oops-release an option?

[15:09] <arnsholt> timotimo: Oh, I see why your script doesn't work

[15:09] <arnsholt> Just say "ZMQ_PAIR" rather than "Net::ZMQ::Constants::ZMQ_PAIR"

[15:10] <moritz> arnsholt: yes, I think we should do that.

[15:10] <arnsholt> Constants.pm has them all as "my constants ZMQ_FOO" which means they're only available if you import them. Probably bad choice, come to think of it =)

[15:10] <moritz> arnsholt: have you verified that it works with your last patch?

[15:14] <arnsholt> The Zavolaj test suite passes with NQP, Rakudo and Zavolaj HEADs

[15:14] <moritz> great

[15:14] <moritz> then I'm doing a point release now

[15:15] *** gdey left
[15:15] <dalek> nqp: f03f15a | moritz++ | / (3 files):

[15:15] <dalek> nqp: bump VERSIOn to 2013.02.1

[15:15] <dalek> nqp: 

[15:15] <dalek> nqp: turns out the native call support was mostly broken in 2013.02

[15:15] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f03f15a498

[15:15] <FROGGS> n: say "foo123bar" ~~ /@(rx/\d+/)/

[15:15] <p6eval> niecza v24-23-g0520c7c: OUTPUT«｢123｣␤␤»

[15:15] *** pmurias joined
[15:18] <dalek> rakudo/nom: 952d407 | moritz++ | / (2 files):

[15:18] <dalek> rakudo/nom: bump VERSION and NQP_REVISION to 2013.02.1

[15:18] <dalek> rakudo/nom: 

[15:18] <dalek> rakudo/nom: this gets us non-broken native call suport

[15:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/952d407a0b

[15:21] <arnsholt> moritz++

[15:21] <moritz> release tarballs uploaded, laptop overheated

[15:22] <FROGGS> O.o

[15:25] <dalek> star: 63636ce | moritz++ | / (3 files):

[15:25] <dalek> star: bump some versions in preparation of 2013.02 reease

[15:25] <dalek> star: review: https://github.com/rakudo/star/commit/63636ce859

[15:26] <moritz> if somebody would write up an announcement for the star release, that would be most helpful

[15:26] <dalek> star: 744e0f8 | moritz++ | modules/ (4 files):

[15:26] <dalek> star: bump module versions

[15:26] <dalek> star: review: https://github.com/rakudo/star/commit/744e0f8d62

[15:26] * moritz has to use what might the be year's last snow to get some sledging done

[15:27] *** PacoAir_ joined
[15:28] *** PacoAir left
[15:28] *** PacoAir_ is now known as PacoAir

[15:30] * jnthn back

[15:30] *** hash_table joined
[15:30] <jnthn> moritz++ # bugfix release

[15:30] *** cbk1090 left
[15:40] *** rindolf left
[15:40] *** rindolf joined
[15:44] *** PacoAir left
[15:44] *** PacoAir joined
[15:53] *** dolmen joined
[15:55] <dalek> rakudo/nom: ff2ceee | (Tobias Leich)++ | src/core/Cursor.pm:

[15:55] <dalek> rakudo/nom: force regexes in array to match at pos 0 only

[15:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ff2ceee9de

[15:56] <dalek> roast: 99165d8 | (Tobias Leich)++ | S05-interpolation/regex-in-variable.t:

[15:56] <dalek> roast: test that regexes in arrays match correctly

[15:56] <dalek> roast: review: https://github.com/perl6/roast/commit/99165d826a

[15:56] <FROGGS> nr: say "foo123bar" ~~ /@(rx/\d+/)/

[15:56] <p6eval> rakudo c255f1: OUTPUT«｢foo｣␤␤»

[15:56] <p6eval> ..niecza v24-23-g0520c7c: OUTPUT«｢123｣␤␤»

[15:56] *** Tedd1^ joined
[16:00] *** Tedd1 left
[16:04] <FROGGS> nr: say "foo123bar" ~~ /@(rx/\d+/)/

[16:04] <p6eval> rakudo c255f1: OUTPUT«｢foo｣␤␤»

[16:04] <p6eval> ..niecza v24-23-g0520c7c: OUTPUT«｢123｣␤␤»

[16:07] * jnthn wonders why dalek didn't report his nqp commits a moment ago

[16:07] *** jac50 joined
[16:08] * FROGGS .oO( dalek made a commit to nqp? )

[16:08] <jnthn> :P

[16:08] <jnthn> No, I did 4 of them. :)

[16:18] *** cognominal left
[16:19] *** cognominal joined
[16:19] <FROGGS> nr: say "foo123bar" ~~ /@(rx/\d+/)/

[16:19] <p6eval> rakudo ff2cee, niecza v24-23-g0520c7c: OUTPUT«｢123｣␤␤»

[16:19] <FROGGS> \o/

[16:20] <jnthn> FROGGS++

[16:20] *** dolmen left
[16:20] <dalek> nqp-jvm-prep: 4ad28eb | jnthn++ | / (2 files):

[16:20] <dalek> nqp-jvm-prep: Implement nqp::radix.

[16:20] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/4ad28eb558

[16:20] <dalek> nqp-jvm-prep: ddc930c | jnthn++ | nqp-src/NQPHLL.pm:

[16:20] <dalek> nqp-jvm-prep: Add HLL::Actions; 2 methods commented out.

[16:20] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/ddc930c7e3

[16:20] *** dolmen joined
[16:21] *** dolmen left
[16:41] *** ilbot6 left
[16:42] *** ilbot6 joined
[16:42] <moritz> r: say WhateverCode ~~ Routine

[16:42] <p6eval> rakudo ff2cee: OUTPUT«False␤»

[16:42] <moritz> that's slightly annoying

[16:42] *** cognominal_ joined
[16:42] <jnthn> And correct :)

[16:43] <dalek> nqp-jvm-prep: cb186e2 | jnthn++ | / (2 files):

[16:43] <dalek> nqp-jvm-prep: Implement nqp::lexprimspec.

[16:43] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/cb186e2f78

[16:43] <dalek> nqp-jvm-prep: aee6d49 | jnthn++ | / (2 files):

[16:43] <dalek> nqp-jvm-prep: Implement nqp::codepointfromname.

[16:43] <dalek> nqp-jvm-prep: 

[16:43] <dalek> nqp-jvm-prep: With brute force. :-)

[16:43] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/aee6d49cef

[16:43] <dalek> nqp-jvm-prep: ca471ee | jnthn++ | nqp-src/NQPHLL.pm:

[16:43] <dalek> nqp-jvm-prep: Uncomment most of HLL::Actions; 3 lines to go.

[16:43] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/ca471ee48b

[16:43] <jnthn> r: say WhateverCode ~~ Code

[16:43] <p6eval> rakudo ff2cee: OUTPUT«True␤»

[16:43] <jnthn> r: say WhateverCode ~~ Block

[16:43] <p6eval> rakudo ff2cee: OUTPUT«False␤»

[16:43] <jnthn> r: say WhateverCode ~~ Callable

[16:43] <p6eval> rakudo ff2cee: OUTPUT«True␤»

[16:43] <moritz> I just pondered automatic "is pure" annotations for WhateverCode

[16:43] *** cognominal left
[16:43] <moritz> and that trait is defined for Routine right now

[16:43] <jnthn> Ah

[16:43] <moritz> ah well, maybe should go into Code

[16:44] <jnthn> Yeah...I don't think WhateverCode really wants to be a Routine.

[16:45] <cotto> arnsholt: thanks for the fix

[16:45] <moritz> otoh the benefits from purity analysis for WhateverCode seems rather small

[16:45] <moritz> it's more of an academic exercise

[16:46] <moritz> unless we can use it to optimize out some loops :-)

[16:48] <jnthn> Oh, I do have one other "thing to hack on" idea

[16:48] <jnthn> For the optimizer

[16:48] <jnthn> We do a bunch of this in the setting:

[16:48] <jnthn> multi infix:<*>(Int:D \a, Int:D \b) returns Int {

[16:48] <jnthn> 'cus we know it's more optimal than $a

[16:49] <jnthn> If we can prove the code never writes to a $a we may be able to apply is parcel automatically

[16:50] *** isomorphisms joined
[16:50] <jnthn> Could also catch sub foo($a) { $a = blah } at compile time with such an analysis

[16:52] <timotimo> hello

[16:52] <timotimo> arnsholt, i had it like that before i added the prefix. weird

[16:52] *** daniel-s_ joined
[16:52] <timotimo> in a few minutes i will have decent ternet

[16:53] *** daniel-s left
[16:54] <moritz> jnthn: interesting ideas

[16:54] <timotimo> jnthn erre you able to look into the dispatch thing? if you are busy maybe i can bash my head against it?

[16:56] <jnthn> timotimo: Around multidispatch.c:688 is the meat of the problem, I think

[16:56] <timotimo> i hope otll make sense to me

[16:56] <jnthn> timotimo: But I'm a bit wary about changing it.

[16:57] <jnthn> As in, I suspect it may have ungood consequences

[16:57] <timotimo> good thing we have a test suite then :)

[16:57] <jnthn> Here's the thing:

[16:58] <jnthn> multi foo(Int $x) { }

[16:58] <jnthn> multi foo(int $x) { }

[16:58] <jnthn> foo(0)

[16:58] <jnthn> foo($x-that-is-a-bigint)

[16:59] <jnthn> foo($x-knwon-to-be-int)

[17:00] <jnthn> At the moment, it will do the dispatch with the boxed 0. That hits the Int candidate, having rejected the int one.

[17:01] <jnthn> If we change this so that the int one will accept a boxed object and unbox it, then it would always hide the Int candidate.

[17:02] <timotimo> to me, Int seems narrower than int

[17:02] <jnthn> It isn't

[17:02] <jnthn> r: say int ~~ Int

[17:02] <p6eval> rakudo ff2cee: OUTPUT«True␤»

[17:02] <timotimo> as in: Int is int plus some stuff

[17:02] *** gdey joined
[17:02] <jnthn> Native types always sort tightest.

[17:02] <timotimo> mhm

[17:03] <jnthn> Note it's not a subclass relationship going on there really

[17:03] <timotimo> yes

[17:03] <jnthn> Instances of a native type don't actually know what kind of thing they are.

[17:03] <timotimo> hm, yes it does make sense to have natives be narrowest

[17:04] <jnthn> Anyway, I suspect we may want to consider if a non-big integer literal wants to default to being a native int when it's not contextualized in any way.

[17:05] <jnthn> So it's QAST::Want(...the IVal..., 'Pp', ...the WVal...)

[17:05] <timotimo> ithinkiprefernotbashingmyheadagainstthis

[17:05] <jnthn> But I don't know what chaos that will cause us elsewhere :)

[17:06] <jnthn> moritz++ can probably point out at least a few points where stuff would break if we did what I just suggested, I suspect. :)

[17:06] *** cognominal_ left
[17:06] <timotimo> oh i have to hit the space bar in between words

[17:06] <timotimo> i apologize

[17:06] <jnthn> ;)

[17:06] <timotimo> android...

[17:07] <moritz> jnthn: well, the stuff in the optimizer could easily adapted to that change

[17:08] <moritz> r: my int $x = 42; say $x ~~ Int

[17:08] <p6eval> rakudo ff2cee: OUTPUT«True␤»

[17:08] <moritz> might work, or might not. Hard to tell without trying

[17:08] <jnthn> Yeah

[17:08] *** cognominal_ joined
[17:08] <jnthn> I'm a bit worried about the performance impact (e.g. will we create a load more boxing)

[17:13] *** cognominal_ left
[17:16] <nwc10> jnthn: the usual for the tests.

[17:16] <moritz> doesn't it shift the default to less boxing?

[17:17] <dalek> nqp-jvm-prep: b10a518 | jnthn++ | / (3 files):

[17:17] <dalek> nqp-jvm-prep: Native keyed ops.

[17:17] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/b10a518e4f

[17:17] <dalek> nqp-jvm-prep: 2480100 | jnthn++ | src/org/perl6/nqp/sixmodel/reprs/ContextRefInstance.java:

[17:17] <dalek> nqp-jvm-prep: Implement introspective lookup of native lexicals.

[17:17] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/2480100f25

[17:17] <dalek> nqp-jvm-prep: cba6259 | jnthn++ | nqp-src/NQPHLL.pm:

[17:17] <dalek> nqp-jvm-prep: Fully uncomment HLL::Actions.

[17:17] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/cba62595c1

[17:17] <nwc10> oh, the target just moved...

[17:17] <jnthn> moritz: No, because sub foo($x) { }; foo(1) today pulls the 1 Int object from the constant table.

[17:17] *** cognominal_ joined
[17:17] <jnthn> nwc10: bwahaha :P

[17:21] <timotimo> well, in this case i don't know what to do.

[17:21] *** cognominal_ left
[17:22] *** cognominal joined
[17:30] *** Liz_ left
[17:35] *** ilbot6 left
[17:37] *** Chillance joined
[17:40] <cotto> moritz: do you have some code to reliably reproduce the socket.seek bug?

[17:40] <cotto> or unreliably

[17:40] <moritz> cotto: yes, but it needs rakudo and Net::IRC

[17:41] <cotto> Hmmm.   That's not quite minimal.

[17:41] <moritz> no, it isn't ;-)

[17:43] <cotto> It's nice to dive in and see a bunch fo whiteknight++ code.

[17:44] <cotto> *of

[17:45] *** SunilJoshi left
[17:48] *** cognominal left
[17:49] <nwc10> jnthn: the usual for the tests.

[17:50] <jnthn> :)

[17:50] *** gdey left
[17:51] <moritz> no news is good news

[17:52] <jnthn> in HLL, there's HLL::World and HLL::Compiler to go

[17:53] <moritz> where "to go" means "implement everything to make them run"?

[17:53] *** gdey joined
[17:53] <jnthn> HLL::World is that

[17:53] <jnthn> HLL::Compiler needs a rather big re-work

[17:54] <jnthn> It curently contains generic bits as well as bits that are almost certainly going to be VM-specific.

[17:54] <jnthn> Also it uses loads of I/O stuff that we don't abstract at all.

[17:54] <moritz> do you have a plan on how to restructure HLL::Compiler?

[17:54] <jnthn> I'm pondering a delegation approach.

[17:55] <jnthn> It'll have a $!backend

[17:55] <jnthn> That will be an object that can provide the backend specific bits

[17:55] <jnthn> Then we just pick and compile in the correct one.

[17:56] <jnthn> Anybody making a cross-compiler can just throw in their own object rather than doing the slightly hackier stuff nqp-jvm-cc does today

[17:56] <jnthn> So really, it's just splitting out the generic from the backend specific.

[17:57] <jnthn> I don't want to go restructuring it too heavily until pmichaud has applied the --target=pbc patches, though

[17:57] <jnthn> Otherwise I'll probably make that application a real hell.

[17:59] <jnthn> Hunger strikes! Time to cook something

[18:01] <nwc10> a mane course? :-)

[18:04] *** gdey left
[18:04] <colomon> phenny: tell tadzik I blew away the old ~/.perl6 on my machine and now panda is working well for me.

[18:04] <phenny> colomon: I'll pass that on when tadzik is around.

[18:05] *** hash_table left
[18:14] *** zby_home_ joined
[18:17] *** cparen joined
[18:18] <FROGGS> jnthn: have you done anything that make this one pass? https://rt.perl.org/rt3/Public/Bug/Display.html?id=115134

[18:23] <cotto> moritz: how much of a blocker is the socket.seek bug?  Is it something that needs to be fixed yesterday or is it fine if the fix takes a few days?

[18:24] *** rindolf left
[18:25] *** cparen left
[18:25] <moritz> cotto: can take a few days

[18:32] <FROGGS> nr: say "abc" ~~ /<[\w]-[\n]>/

[18:32] <p6eval> rakudo ff2cee: OUTPUT«===SORRY!===␤Error while compiling block : Error while compiling op call: Error while compiling block : Error while compiling block : Unrecognized subtype 'zerowidth' in QAST::Regex cclass␤»

[18:32] <p6eval> ..niecza v24-23-g0520c7c: OUTPUT«｢a｣␤␤»

[18:32] * FROGGS would like to steal things von niecza

[18:44] <TimToady> nr: say so one; say so none;

[18:44] <p6eval> rakudo ff2cee: OUTPUT«False␤True␤»

[18:44] <p6eval> ..niecza v24-23-g0520c7c: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤The 'one' listop may not be called without arguments (please use () or whitespace to clarify) at /tmp/DMBDlnmN1i line 1:␤------> [32msay so one[33m⏏[31m; say so none;[0m␤␤The 'none' listop may not be called without argum…

[18:46] <TimToady> nr: say so one(); say so none();

[18:46] <p6eval> rakudo ff2cee, niecza v24-23-g0520c7c: OUTPUT«False␤True␤»

[18:47] <TimToady> it occurs to me that when we get coercive types, our current output of Int() for a gist might be confusing

[18:50] <TimToady> so we should probably switch that notation to something else to indicate undefinedness

[18:50] <TimToady> maybe just (Int)

[18:51] <TimToady> pity that Unicode doesn't support strike-through very well

[18:52] <TimToady> or consistent overline

[18:53] <TimToady> maybe ¬Int

[18:54] <benabik> Int:U ?

[18:55] <au> S̶o̶u̶s̶ ̶r̶a̶t̶u̶r̶e̶?

[18:57] <TimToady> you missed the S :)

[18:57] <TimToady> (on my display)

[18:57] <TimToady> probably a bug in my terminal though

[18:57] <TimToady> since it got the ?

[18:58] <au> http://irclog.perlgeek.de/perl6/2013-02-23#i_6490561 looks OK

[18:58] <au> pity that Unicode terminals doesn't support strike-through very well :)

[18:59] <TimToady> emendation accepted

[19:02] <diakopter> looks ok on mine

[19:02] <diakopter> on my terminal anyway. doesn't look okay on the irclog html

[19:03] <diakopter> in the browser, they're rshifted 1

[19:03] <TimToady> 𝕀𝕟𝕥

[19:04] <TimToady> looks great in the log here :)

[19:04] <diakopter> three squares, in both terminal and browser.

[19:04] <TimToady> the terminal, not so much

[19:04] <TimToady> .u 𝕀𝕟𝕥

[19:04] <phenny> U+1D540 MATHEMATICAL DOUBLE-STRUCK CAPITAL I (𝕀)

[19:04] <phenny> U+1D55F MATHEMATICAL DOUBLE-STRUCK SMALL N (𝕟)

[19:04] <phenny> U+1D565 MATHEMATICAL DOUBLE-STRUCK SMALL T (𝕥)

[19:05] <TimToady> diakopter: obviously your browser is deficient

[19:05] <diakopter>  /o\

[19:05] <TimToady> well, probably just your fonts

[19:06] <diakopter> Consolas--

[19:07] <TimToady> did you get your computer in Texas, where "multicultural" just means "American or Spanish"? :P

[19:08] <TimToady> wait, the Spanish are Americans too, except for the ones who really are Spanish...

[19:08] <FROGGS> hehe

[19:08] * TimToady is confusing himself, a not abnormal occurrence

[19:08] <FROGGS> I "like" the US ppl which think Europe is one of the US states they dont know...

[19:09] <TimToady> .ca is obviously California, right?

[19:09] *** benabik left
[19:10] <TimToady> and .us must mean Upper Slobavia or some such

[19:13] <huf> .us vs .them, the great TLDr wars

[19:13] <jnthn> nwc10: Yes, but only a small portion...would hate to be saddled with leftovers...

[19:13] <TimToady> and .com means Communist

[19:13] <TimToady> since most .com goods come from there

[19:13] <jnthn> FROGGS: (RT ticket) yes, the changes I did to marker handling in NQP recently will be to thank for that fix.

[19:15] <diakopter> Consolas is a Microsoft thing

[19:15] <TimToady> obviously you want Prosolas instead

[19:16] <cotto> moritz: if I give you a Parrot patch, can you tell me with reasonable if it fixes the socket.seek issue?

[19:16] <diakopter> perhaps Carsolas or Cdrsolas

[19:17] <diakopter> TimToady: that's like Progress vs Congress

[19:17] <cotto> moritz: https://gist.github.com/cotto/5020729

[19:17] <diakopter> or Nilsolas..

[19:18] <diakopter> er, Nilolas

[19:18] <TimToady> ⦃Int⦄ or ⟦Int⟧

[19:19] <jnthn> Those don't render in my font... 

[19:19] * diakopter neither

[19:19] <TimToady> good grief, are we gonna have to drag everyone kicking and screaming into the 21st century?

[19:20] <jnthn> .u ⦃

[19:20] <phenny> U+2983 LEFT WHITE CURLY BRACKET (⦃)

[19:20] <TimToady> ⁅Int⁆ is lower in the Unicode range, so slightly more likely

[19:21] *** fgomez left
[19:21] <jnthn> My browser at least gets those

[19:21] <TimToady> but I really like the ones that look "empty"

[19:21] <TimToady> wish we could just use the double-struck letters, but those aren't even in the BMP

[19:23] <TimToady> well, at least (Int) has connotations of oh-by-the-way and not-really

[19:24] *** benabik joined
[19:25] <TimToady> now where is that specced...

[19:26] *** SamuraiJack left
[19:29] <dalek> specs: b50c8aa | larry++ | S12-objects.pod:

[19:29] <dalek> specs: Change Int() notation to (Int) notation

[19:29] <dalek> specs: 

[19:29] <dalek> specs: With the addition of coercive types, the gist notation is too confusing,

[19:29] <dalek> specs: so for now just move the first paren into the front fo the type name.

[19:29] <dalek> specs: review: https://github.com/perl6/specs/commit/b50c8aa478

[19:29] <TimToady> stick with good ol' American characters for now...

[19:30] <TimToady> unless someone wants to come up with a different acronym for ASCII

[19:31] *** sisar_ joined
[19:33] <diakopter> 7BITUNI

[19:34] *** sisar left
[19:34] *** sisar_ is now known as sisar

[19:34] <jnthn> All Should Code In Inglish

[19:35] <diakopter> Ask Stupid Cuestions in IRC

[19:35] <geekosaur> archaic system for constraining intelligent input

[19:36] <geekosaur> ^intelligent^intelligible

[19:38] <dalek> niecza: bdc3343 | larry++ | lib/CORE.setting:

[19:38] <dalek> niecza: change Mu.gist from Mu() to (Mu)

[19:38] <dalek> niecza: review: https://github.com/sorear/niecza/commit/bdc334340d

[19:39] <TimToady> someone with a rakudo commit bit will need to patch src/core/Mu.pm

[19:40] <TimToady> pugs: say Int

[19:40] <p6eval> pugs: OUTPUT«Int()␤»

[19:40] <dalek> nqp-jvm-prep: 6175383 | jnthn++ | nqp-src/NQPHLL.pm:

[19:40] <dalek> nqp-jvm-prep: Add HLL::World; just one line commented out.

[19:40] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/6175383f01

[19:40] <TimToady> that could use patching too

[19:42] <TimToady> still wish the Match type were only a parent type for successful and unsuccessful match types...

[19:43] <TimToady> or some such OKness fix

[19:43] * colomon just had a Linux box meltdown from running emmentaler's smoker.

[19:43] <TimToady> well, what'd you expect?

[19:43] <jnthn> colomon: I think you misunderstood smoker... ;)

[19:44] <colomon> jnthn: don't you put some cheese in the computer and then add some cedar chips to the fire?

[19:44] <jnthn> I...uh...no ::)

[19:45] <jnthn> TimToady: The parent type thing may work but...why?

[19:45] <TimToady> because it's gonna be a FAQ that (Match) isn't one

[19:45] <jnthn> It's the same in the .Net regex libraries and I've never seen that as an FAQ, fwiw...

[19:45] <jnthn> Also, you don't see the type very much

[19:46] <jnthn> r: say 'a' ~~ /b/

[19:46] <p6eval> rakudo ff2cee: OUTPUT«#<failed match>␤»

[19:46] <TimToady> I've seen the confusion here

[19:46] <TimToady> it's not so much a FAQ as a "Oh, I have to remember that (again)"

[19:46] <jnthn> n: say 'a' ~~ /b/

[19:46] <p6eval> niecza v24-23-g0520c7c: OUTPUT«#<failed match>␤»

[19:47] * colomon will be very happy when his new Linux box arrives.  32gigs RAM is enough to handle Rakudo, right?

[19:47] <jnthn> Hm, that got fixed

[19:47] <TimToady> I don't like #<failed match> for what it's worth

[19:47] <jnthn> TimToady: I know there was confusion before when it said Match()

[19:47] <TimToady> I'd rather that just fell out of the type system

[19:47] <TimToady> not be special cased

[19:48] * TimToady still wonders if it shouldn't just return Nil on a failed match

[19:49] <moritz> .oO( DHCP jokes are leased. )

[19:49] <jnthn> r: say 1 ~~ Nil

[19:49] <p6eval> rakudo ff2cee: OUTPUT«False␤»

[19:49] <jnthn> r: say 'abc' ~~ Nil

[19:49] <p6eval> rakudo ff2cee: OUTPUT«False␤»

[19:49] <jnthn> TimToady: May work...maybe...

[19:49] <TimToady> Nil would become one of the magical values like Match and Bool

[19:50] <TimToady> not quite an OKness role, but just a small list of things that are considered success/failure

[19:52] <TimToady> nr: 42 ~~ True

[19:52] <p6eval> rakudo ff2cee: OUTPUT«Potential difficulties:␤    Smartmatch against True always matches; if you mean to test the topic for truthiness, use :so or *.so or ?* instead␤    at /tmp/tl9pOOdVRo:1␤    ------> [32m42 ~~[33m⏏[31m True[0m␤»

[19:52] <p6eval> ..niecza v24-23-g0520c7c:  ( no output )

[19:52] <TimToady> and perhaps deserving of a similar warning

[19:53] <TimToady> r: Nil; 42;

[19:53] <p6eval> rakudo ff2cee:  ( no output )

[19:53] <TimToady> and is harmless in sink context already, which is good

[19:55] <TimToady> r: $_ = "foo"; /bar/; 42

[19:55] <p6eval> rakudo ff2cee:  ( no output )

[19:55] <TimToady> r: $_ = "foo"; /bar/; say $/

[19:55] <p6eval> rakudo ff2cee: OUTPUT«#<failed match>␤»

[19:55] <TimToady> can anyone think of a good reason why a failed match should not return Nil?

[19:57] <TimToady> (other than that we might have to change a few tests in roast?)

[20:00] <jnthn> It's probably a memory saving also...

[20:01] *** domidumont left
[20:03] <TimToady> yes, considering that Nil can very often be represented by deleting something, since Nil is supposed to be indistinguishable from "nothing there"

[20:04] <TimToady> it's also better from the fail-fast perspective, if you're failing a lot

[20:04] <TimToady> saves wear and tear on the GC

[20:10] <dalek> nqp-jvm-prep: e766547 | jnthn++ | / (3 files):

[20:10] <dalek> nqp-jvm-prep: Add some missing SC related ops.

[20:10] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/e7665478b5

[20:10] <dalek> nqp-jvm-prep: 2608303 | jnthn++ | nqp-src/NQPHLL.pm:

[20:10] <dalek> nqp-jvm-prep: Fully uncomment HLL::World.

[20:10] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/2608303a9a

[20:16] <nwc10> jnthn: all tests were successful, but some bugger moved the goalposts again :-)

[20:18] <jnthn> .oO( chomping at the commit bit )

[20:19] * nwc10 groans (again)

[20:19] *** ilbot6 joined
[20:19] *** ilbot6 left
[20:20] <nwc10> oooh. ilbot6

[20:20] *** ilbot6 joined
[20:20] <moritz> testing a parrot socket patch with ilbot6 :-)

[20:21] <moritz> nwc10: it now records basically the same events that _ilbot does

[20:21] <moritz> nwc10: but not yet into a database, just to STDOUT

[20:23] <nwc10> jnthn: All tests succeessful && Current branch master is up to date.

[20:38] <dalek> nqp: b752c14 | jnthn++ | src/QAST/Operations.nqp:

[20:38] <dalek> nqp: Fix thinkos.

[20:38] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b752c14d7b

[20:38] <dalek> nqp: 8d7d9be | jnthn++ | src/stage0/ (9 files):

[20:38] <dalek> nqp: Bootstrap update thanks to thinkos.

[20:38] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8d7d9be89e

[20:38] <dalek> nqp: 8d1f7f6 | jnthn++ | src/ (4 files):

[20:38] <dalek> nqp: Replace some more pir:: with nqp::.

[20:38] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8d1f7f60c7

[20:40] <nwc10> jnthn: getting all of HLL::World compiling is quite major, isn't it?

[20:42] <jnthn> nwc10: Only sorta.

[20:42] <nwc10> ah OK

[20:42] <jnthn> nwc10: Most of the tricky stuff likes in the various subclasses of it

[20:43] <dalek> specs: c8f2dcc | larry++ | S (3 files):

[20:43] <dalek> specs: Failed matches to return Nil, not (Match)

[20:43] <dalek> specs: 

[20:43] <dalek> specs: A Match now only ever represents a successful match.  A failed match is

[20:43] <dalek> specs: represented by Nil.  Also, we add Match and Nil to the list of things

[20:43] <dalek> specs: that are explicitly not allowed as literal tokens to smartmatchers due

[20:43] <dalek> specs: to their use as success/failure from .ACCEPTS methods.

[20:43] * TimToady nudges the goalposts again...

[20:43] <dalek> specs: 

[20:43] <dalek> specs: And a great sigh of relief comes from those who didn't want the OKness

[20:43] <dalek> specs: proposal to go much farther than that...  :-)

[20:43] <dalek> specs: review: https://github.com/perl6/specs/commit/c8f2dcc68c

[20:43] <GlitchMr> std: my $a; / $a<b> /

[20:43] <p6eval> std 7551b8f: OUTPUT«Potential difficulties:␤  Apparent subscript will be treated as regex at /tmp/5cXH5MA5VQ line 1:␤------> [32mmy $a; / $a[33m⏏[31m<b> /[0m␤ok 00:00 43m␤»

[20:43] <GlitchMr> std: my $a; / $a.<b> /

[20:43] <p6eval> std 7551b8f: OUTPUT«Potential difficulties:␤  Apparent subscript will be treated as regex at /tmp/IypDaT7ft7 line 1:␤------> [32mmy $a; / $a[33m⏏[31m.<b> /[0m␤ok 00:00 43m␤»

[20:44] <TimToady> std: my $a; / $( $a<b> ) /  #okay

[20:44] <p6eval> std 7551b8f: OUTPUT«ok 00:00 44m␤»

[20:46] <GlitchMr> rn: my @a = 3; ('3').gist.say;

[20:46] <p6eval> niecza v24-24-gbdc3343: OUTPUT«Potential difficulties:␤  @a is declared but not used at /tmp/aztGkBMMNK line 1:␤------> [32mmy [33m⏏[31m@a = 3; ('3').gist.say;[0m␤␤3␤»

[20:46] <p6eval> ..rakudo ff2cee: OUTPUT«3␤»

[20:46] <GlitchMr> rn: my @a = 3; ('3' ~~ / @a[0] /).gist.say;

[20:46] <p6eval> rakudo ff2cee: OUTPUT«Potential difficulties:␤    Apparent subscript will be treated as regex␤    at /tmp/xHK0MmhpAM:1␤    ------> [32mmy @a = 3; ('3' ~~ / @a[33m⏏[31m[0] /).gist.say;[0m␤#<failed match>␤»

[20:46] <p6eval> ..niecza v24-24-gbdc3343: OUTPUT«Potential difficulties:␤  Apparent subscript will be treated as regex at /tmp/T16QbN6sxV line 1:␤------> [32mmy @a = 3; ('3' ~~ / @a[33m⏏[31m[0] /).gist.say;[0m␤␤#<failed match>␤»

[20:46] <GlitchMr> rn: my @a = 3; ('3' ~~ / $(@a[0]) /).gist.say;

[20:47] <p6eval> rakudo ff2cee, niecza v24-24-gbdc3343: OUTPUT«｢3｣␤␤»

[20:47] <GlitchMr> Good

[20:48] <FROGGS> rn: my @a = 3..5; ('3' ~~ / @a /).gist.say;

[20:48] <p6eval> rakudo ff2cee, niecza v24-24-gbdc3343: OUTPUT«｢3｣␤␤»

[20:48] <FROGGS> rn: my @a = 3..5; ('4' ~~ / @a /).gist.say;

[20:48] <p6eval> rakudo ff2cee, niecza v24-24-gbdc3343: OUTPUT«｢4｣␤␤»

[20:54] <GlitchMr> rn: say Mu

[20:54] <p6eval> rakudo ff2cee: OUTPUT«Mu()␤»

[20:54] <p6eval> ..niecza v24-24-gbdc3343: OUTPUT«(Mu)␤»

[20:54] <GlitchMr> So, I guess that (Mu) is newest standard (made 1 hour ago).

[20:55] <GlitchMr> Well, I guess it makes sense, considering that Mu() doesn't work

[20:55] <GlitchMr> But Mu.perl just gives Mu.

[20:56] <dalek> nqp-jvm-prep: 81f91e3 | jnthn++ | nqp-src/ (2 files):

[20:56] <dalek> nqp-jvm-prep: s/pir::/nqp::/ in some places, and uncomment.

[20:56] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/81f91e33e6

[20:56] <dalek> nqp-jvm-prep: b1c6aa3 | jnthn++ | / (2 files):

[20:56] <dalek> nqp-jvm-prep: A couple of small cleanups.

[20:56] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/b1c6aa33c4

[20:57] *** labster joined
[20:59] <GlitchMr> rn: say Int

[20:59] <p6eval> niecza v24-24-gbdc3343: OUTPUT«(Int)␤»

[20:59] <p6eval> ..rakudo ff2cee: OUTPUT«Int()␤»

[20:59] <nwc10> "This hour in Perl 6"? :-)

[20:59] * TimToady finished his reboot (started Jan 4th) a couple days ago, and hopes nobody is regretting that fact now :)

[20:59] *** census left
[21:01] <moritz> if any built-ins generate lists of matches, there are never any failed matches in them, right?

[21:02] <TimToady> 'foo'? is the only thing that can produce a "positive" Nil

[21:02] <TimToady> and I deem that to be harmless

[21:02] <jnthn> What about my ($m1, $m2, $m3) = $match.list;

[21:03] <dalek> std: 52fe6d2 | larry++ | STD.pm6:

[21:03] <dalek> std: add warning on smartmatch of Match or Nil

[21:03] <dalek> std: review: https://github.com/perl6/std/commit/52fe6d207c

[21:03] <jnthn> with 'abc' ~~ /(.) (.)? (.)/

[21:04] <jnthn> uh, not quite tht :)

[21:04] *** benabik left
[21:04] *** zby_home_ left
[21:05] <jnthn> r: my ($m1, $m2, $m3) = ('abc' ~~ /(.) (d)? (.)/).list; .say for $m1, $m2, $m3

[21:05] <p6eval> rakudo ff2cee: OUTPUT«｢a｣␤␤｢b｣␤␤Nil␤»

[21:05] <GlitchMr> This is so fun

[21:05] <GlitchMr> I've uploaded a Perl 6 changes article, and instantly had to make a commit because of commit to STD.pm.

[21:05] <TimToady> jnthn: DIHWIDT I think

[21:06] <TimToady> either that, or we stop treating Nil like () in lists

[21:06] <TimToady> for which a good argument could be made

[21:07] <moritz> and against which a good argument could be made

[21:07] <TimToady> these days, if you want to interpolate () in a list, you should probably be using, er, ()

[21:07] <TimToady> then make it

[21:08] * jnthn suspects changing that meaning of Nil may be problematicer...

[21:08] *** benabik joined
[21:08] <TimToady> possibly, but this is about our last chance to get these things right

[21:10] <TimToady> today I would argue that Nil means "the absence of a value WHERE THERE SHOULD BE A VALUE", and therefore it should keep its place in a list

[21:12] *** lue joined
[21:12] <TimToady> this is also much more consistent with how other languages treat their null value

[21:13] <TimToady> so least surprise to at least some people

[21:14] *** PacoAir left
[21:14] <labster> Since we're on the topic of matches, and because this came up in my code: should there be a way for s/// to tell if a substitution was made?

[21:14] <labster> r: my $foo = 'foo'; $foo ~~ s/bar/baz/;

[21:14] <p6eval> rakudo ff2cee:  ( no output )

[21:15] <labster> my $foo = 'foo'; say $foo ~~ s/bar/baz/;

[21:15] <moritz> labster: that's the return value

[21:15] <moritz> r: my $foo = 'foo'; say $foo ~~ s/bar/baz/;

[21:15] <p6eval> rakudo ff2cee: OUTPUT«False␤»

[21:15] <moritz> r: my $foo = 'foobar'; say $foo ~~ s/bar/baz/;

[21:15] <p6eval> rakudo ff2cee: OUTPUT«True␤»

[21:15] <labster> there we go, that's the strange behavior

[21:15] <moritz> what's strange about it?

[21:17] <labster> getting False in the REPL... maybe I need to update.

[21:17] <jnthn> This was fixed relatively recently (not O(days) though)

[21:18] <labster> O(weeks) would be about right, I'm using star

[21:19] <TimToady> with the new definition, we can return a Match from s/// if we like to indicate success

[21:19] *** Khisanth joined
[21:20] <timotimo> weeks is a constant number, so essentially O(1)

[21:20] <timotimo> er, constant factor*

[21:21] <moritz> timotimo: we all know that, but abusing O() notation is O(fun)

[21:21] <moritz> :-)

[21:22] <timotimo> all right :)

[21:26] <dalek> rakudo/nom: cfee628 | moritz++ | src/core/Mu.pm:

[21:26] <dalek> rakudo/nom: switch type name gistification from Type() to (Type)

[21:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cfee628698

[21:27] <dalek> roast: bebc699 | moritz++ | S (4 files):

[21:27] <dalek> roast: switch from Type() to (Type) (work in progress)

[21:27] <dalek> roast: review: https://github.com/perl6/roast/commit/bebc6998c6

[21:28] *** gdey joined
[21:31] *** colomon left
[21:36] <dalek> roast: bb83c9a | moritz++ | / (13 files):

[21:36] <dalek> roast: more Type() -> (Type) moving

[21:36] <dalek> roast: review: https://github.com/perl6/roast/commit/bb83c9a296

[21:44] <dalek> nqp-jvm-prep: d51aaf1 | jnthn++ | lib/JAST/Nodes.nqp:

[21:44] <dalek> nqp-jvm-prep: Eliminate the single pir:: in JAST nodes.

[21:44] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/d51aaf1e13

[21:44] <dalek> nqp-jvm-prep: bb7a5e7 | jnthn++ | Makefile:

[21:44] <dalek> nqp-jvm-prep: Include NQPHLL and JAST nodes in the build.

[21:44] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/bb7a5e7ba1

[21:44] <dalek> nqp-jvm-prep: a142786 | jnthn++ | / (2 files):

[21:44] <dalek> nqp-jvm-prep: Library name consistency tweak.

[21:44] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/a1427862b0

[21:44] <dalek> nqp-jvm-prep: 70df04f | jnthn++ | / (2 files):

[21:44] <dalek> nqp-jvm-prep: Implement nqp::objprimspec.

[21:44] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/70df04fc84

[21:47] <arnsholt> r: my $x = 3; say $x.WHAT;

[21:47] <p6eval> rakudo ff2cee: OUTPUT«Int()␤»

[21:48] <arnsholt> r: my int $x = 3; say $x.WHAT;

[21:48] <p6eval> rakudo ff2cee: OUTPUT«Int()␤»

[21:50] *** spanner joined
[21:50] *** sorear left
[21:50] *** sorear joined
[21:52] <arnsholt> Are there any known weird limitations with natively typed constants?

[21:55] *** bruges joined
[21:56] *** spider-mario left
[21:56] *** ilbot6 left
[21:57] <arnsholt> r: https://gist.github.com/arnsholt/5021528

[21:57] <p6eval> rakudo ff2cee: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/SeupsMZKmo:1␤------> [32mhttps[33m⏏[31m://gist.github.com/arnsholt/5021528[0m␤    expecting any of:␤        argument list␤        postfix␤        infix or meta-infix␤        infix stopper␤        stateme…

[21:57] *** gdey left
[21:57] <arnsholt> Huh. Thought that worked

[21:57] *** sepegp joined
[21:57] *** bruges_ left
[22:00] <arnsholt> timotimo: I think I'm a step closer to making your script work, but I think it's also uncovered a bug/limitation in Rakudo =)

[22:01] <timotimo> \o/ and /o\

[22:04] <arnsholt> Yeah. I'll investigate further tomorrow, but I did get as far as seeing "ok 1 - " in my terminal which is very much \o/

[22:04] <arnsholt> So timotimo++ for that

[22:04] <timotimo> \o/

[22:04] <timotimo> what was the limitation, though?

[22:05] *** gdey joined
[22:06] <timotimo> i'm a bit annoyed, though, that my work is blocked not by my lazyness but by something else. so i have no choice but to not progress :(

[22:07] <arnsholt> See the gist I tried to get the evalbot to run

[22:07] *** gdey left
[22:07] <arnsholt> There's something funny with constants

[22:08] <arnsholt> I think there's a workaround though

[22:09] <arnsholt> Change all the "my constant ZMQ_FOO" to "my int $ZMQ_FOO" and similar in your script

[22:09] <arnsholt> I think that should work

[22:10] <arnsholt> If that works, feel to commit it and add your stuff as tests

[22:10] <arnsholt> But now it's bedtime for me

[22:10] * arnsholt &

[22:11] <timotimo> good night!

[22:13] *** spider-mario joined
[22:14] <timotimo> t/01-send-recv.t .. 1/? *** Error in `perl6': corrupted double-linked list: 0x0000000009f88b40 ***

[22:14] <timotimo> well, that's something!

[22:15] <timotimo> (i even get ok 2 -)

[22:17] <dalek> specs: 48958ab | larry++ | S0 (5 files):

[22:17] <dalek> specs: Simplify Nil semantics; never means () now

[22:17] <dalek> specs: review: https://github.com/perl6/specs/commit/48958abed8

[22:18] * TimToady had better take a rest before someone decides to mail him something explosive :)

[22:19] <TimToady> nap &

[22:20] *** kaare_ left
[22:21] *** colomon joined
[22:22] <lue> r: for 0x50..0x5f { say "\x[$_]"; }

[22:22] <p6eval> rakudo cfee62: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unrecognized backslash sequence: '\x'␤at /tmp/Xt0D0zJL7r:1␤------> [32mfor 0x50..0x5f { say "\x[33m⏏[31m[$_]"; }[0m␤    expecting any of:␤        argument list␤        prefix or term␤        prefix or meta-prefix␤        double qu…

[22:22] <lue> Shouldn't that be legal?

[22:25] <lue> (it seems std disagrees with me as well)

[22:26] <jnthn> no, I don't think that's meant to work

[22:26] <jnthn> try

[22:26] <jnthn> r: for 0x50..0x5f { say "{chr $_}"; }

[22:26] <p6eval> rakudo cfee62: OUTPUT«P␤Q␤R␤S␤T␤U␤V␤W␤X␤Y␤Z␤[␤\␤]␤^␤_␤»

[22:26] <lue> I just realized I could use chr.

[22:28] <lue> I'm still curious as to why that's not meant to, though. (The error message made me think it was a parsing error initially, rather than a user error)

[22:29] *** jac50 left
[22:36] <timotimo> adding a few says makes it not crash any more

[22:36] <timotimo> i love this job.

[22:38] *** census joined
[22:40] <timotimo> alternatively i can just add success strings to the "is" calls, so that masks the double-frees or corrupted linked-lists or what have you

[22:41] <timotimo> amazing.

[22:42] <timotimo> so i guess i'm no longer blocked. that means i have to work now! gosh :(

[22:43] <jnthn> :P

[22:43] * jnthn just hunted a segfault

[22:43] <timotimo> brought something to eat home for the family?

[22:44] <diakopter> segfaults aren't tasty unless cooked a few hundred hours

[22:46] <timotimo> it isn't about tasty, it's about survival! :(

[22:47] * jnthn nervously opens a belgian beer and hopes it wonon't explode everywhere

[22:47] *** PacoAir joined
[22:47] <jnthn> ah, phew

[22:48] <census> liquor before beer, nothing to fear.  beer before liquor, never been sicker . . .

[22:48] <jnthn> The trick is to drink each of them in sensible quantities :P

[22:54] <dalek> nqp: 30d5020 | jnthn++ | src/ops/nqp.ops:

[22:54] <dalek> nqp: Avoid returning a C NULL.

[22:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/30d5020a00

[22:54] <dalek> nqp: cd22fa9 | jnthn++ | src/NQP/Actions.pm:

[22:54] <dalek> nqp: Resolve a bunch of package names at compile time.

[22:54] <dalek> nqp: 

[22:54] <dalek> nqp: Cuts down on code output rather significantly in certain cases, of note

[22:54] <dalek> nqp: in QAST::Compiler.

[22:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/cd22fa9981

[22:59] <timotimo> ooooh!

[23:00] <timotimo> less code output means faster startup, no?

[23:01] <jnthn> Well, maybe that a little, but it means compilation is faster.

[23:02] <jnthn> In theory, anyway :)

[23:16] <cotto> moritz: I'm only seeing one spectest_regression failure with that parrot patch and it seems to happen with parrot master too.  I'm rebuilding to be sure, but do you see any reason not to merge if signs continue to point to no new bugs?

[23:17] <cotto> merge the smarter-io-sync branch into Parrot master, that is

[23:17] <lue> .oO(fun fact: creating a P6 one-liner to print all the unicode chars from 0..0x10000 fails at D800 with "invalid for UTF-8")

[23:21] *** spider-mario left
[23:23] *** census left
[23:26] <dalek> nqp-jvm-prep: 907fa53 | jnthn++ | src/org/perl6/nqp/runtime/Ops.java:

[23:26] <dalek> nqp-jvm-prep: Support some more keys in sethllconfig.

[23:26] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/907fa532f6

[23:26] <dalek> nqp-jvm-prep: aac1e22 | jnthn++ | / (3 files):

[23:26] <dalek> nqp-jvm-prep: Start cross-compiling QAST -> JAST.

[23:26] <dalek> nqp-jvm-prep: 

[23:26] <dalek> nqp-jvm-prep: It does successfully cross-compile, but doesn't work yet.

[23:26] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/aac1e2295d

[23:27] <timotimo> oh? will we see a nqp on jvm today? :)

[23:28] <jnthn> No :P

[23:29] <jnthn> I'm getting tired/losing concentration now. 

[23:30] <jnthn> There's a chance that tomorrow I'll get to the point of having a way to run the QAST -> JAST translator on the JVM though.

[23:30] <jnthn> Which is one important piece of the puzzle.

[23:31] <jnthn> Getting HLL::Compiler sorted out is still a fairly significant chunk of work.

[23:33] *** am0c left
[23:34] <dalek> specs: ebd9f5c | diakopter++ | S02-bits.pod:

[23:34] <dalek> specs: spelo

[23:34] <dalek> specs: review: https://github.com/perl6/specs/commit/ebd9f5cf63

[23:35] <timotimo> that's pretty cool :)

[23:35] <timotimo> a bit annoyed that panda install will read the Build.pm, but ufo won't touch it at all

[23:36] <timotimo> can i somehow manually invoke the code in it? (i've copypasted it from the rakudo debugger repo basically)

[23:37] <jnthn> Looks fairly tied to panda, but you can always grab the commands out of it and run them

[23:38] <jnthn> oh, maybe not, depending what you're trying to do

[23:38] * jnthn needs sleep

[23:38] <jnthn> o/

[23:39] <timotimo> good night jnthn!

[23:39] <timotimo> http://sprunge.us/bEbF - yeah that seems clever :P

[23:59] <timotimo> the nice trick jnthn came up with to pass objects (routines) from the interpreted code into the nqp code doesn't seem to work in my case, the value is just an nqpmu :(

[23:59] *** xenoterracide left
