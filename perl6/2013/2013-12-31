[00:00] <lue> rurban++ Maybe it wouldn't hurt to add them to the Perl_6 page too? :)

[00:00] <rurban> aah, one after another

[00:01] <lue> ? did I accidentally unleash the specter of AfD on the main Perl 6 too?

[00:01] <rurban> This is also a good one: http://www.infoworld.com/d/open-source/perl-creator-hints-imminent-release-long-awaited-perl-6-445

[00:02] <jnthn> If conference talks also count as references, I'm sure many such things can be found.

[00:02] <rurban> If major news outlets cite conference talks. yes. oscon usually

[00:04] <rurban> https://en.wikipedia.org/wiki/Perl_6#Implementations needs to fix the "As of 2009 multiple Perl 6 implementations are under development, but none of them are considered "complete""

[00:10] *** ajr_ left
[00:13] *** dmol joined
[00:13] *** dmol left
[00:16] *** BenGoldberg left
[00:17] *** BenGoldberg joined
[00:18] *** btyler left
[00:21] <japhb> jnthn: The thing that most struck me about the AfD in question was that it was submitted on *Christmas*.  Talk about a Grinch!

[00:21] <rurban> They count Keep vs Delete on this page: https://en.wikipedia.org/wiki/Wikipedia:Articles_for_deletion/Rakudo_Perl_6#Rakudo_Perl_6

[00:22] *** thou joined
[00:23] *** spider-mario left
[00:24] <rurban> https://en.wikipedia.org/wiki/Wikipedia:GNG

[00:30] <lue> japhb: what struck me the most is that it seems as though there was no period of time with the "has unreliable 1st party sources" infobox on the page, the guy just went straight for the deletion.

[00:31] <lue> His search for reliable sources may have turned up nothing, but it should have turned up a vibrant and alive community with possibly somebody who could improve the article.

[00:38] *** kurahaupo_mobile joined
[00:43] *** wooden left
[00:50] *** hoverboard left
[00:51] <segomos_> to his credit it doesn't say he searched the internet (tm)

[00:54] <lue> segomos_: "A search turns up nothing better." I realize it doesn't say "Internet", but I'm not sure what else he could have searched :)

[00:55] <segomos_> probably spun around in his chair and saw nothing in the room to remind him of perl 6 and smugly put the punctuation on that sentence, then called it a day

[00:56] <BenGoldberg> Maybe he visited his library, and looked on the shelves.

[00:57] <lue> Yeah, rurban showed us that it doesn't take that long to find something, if you're trying.

[01:00] *** immortal joined
[01:01] <lue> But I'm a follower of WP:AGF, so I get the sense that he just simply missed the usable references.

[01:01] * lue &

[01:01] <perigrin> lue: he could have searched his sock drawer, or behind the couch, or "all the lands of azeroth"

[01:02] *** erkan left
[01:04] *** abnorman left
[01:10] *** gcole joined
[01:13] *** daniel-s_ joined
[01:26] *** hoverboard joined
[01:29] *** gcole left
[01:29] *** gcole joined
[01:33] *** gcole left
[01:33] *** gcole joined
[01:43] *** kivutar left
[02:03] *** abnorman joined
[02:19] *** evgenyleg joined
[02:29] *** evgenyleg left
[02:35] <japhb> preflex: ask jnthn What is the relative priority of async sockets in your start-of-year hacking queue?

[02:35] <preflex>  Consider it noted.

[02:35] *** abnorman left
[02:35] *** Guest24869 is now known as ponbiki

[02:47] <segomos_> his user page has been vandalized 9 times

[03:00] *** finanalyst joined
[03:01] <finanalyst> r: class A { has $.a is default(2) }; my A $x.=new(); say  $x

[03:01] <camelia> rakudo-jvm a77214: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/dRDCXLRf8n␤Can't use unknown trait 'is default' in an attribute declaration.␤at /tmp/dRDCXLRf8n:1␤------> ␤    expecting any of:␤        rw␤        readonly␤        box_target␤»

[03:01] <camelia> ..rakudo-parrot a77214: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/De4jMdifW8␤Can't use unknown trait 'is default' in an attribute declaration.␤at /tmp/De4jMdifW8:1␤------> ␤    expecting any of:␤        rw␤        readonly␤        box_target␤»

[03:01] * lue wonders who Bitasc is, and why they apparently created an account just to leave an unhelpful comment.

[03:02] *** ivanshmakov left
[03:03] <finanalyst> hello anyone. I was looking at 'is default'. Tried using it in a class. Got compile error. Is this a bug or spec?

[03:03] <finanalyst> class A {has $.a is rw = 3; }

[03:04] <lue> finanalyst: is that 'rw' supposed to be 'default'?

[03:04] <finanalyst> r: class A {has $.x is default(2)}

[03:05] <camelia> rakudo-parrot a77214: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/bfqZjBm9ui␤Can't use unknown trait 'is default' in an attribute declaration.␤at /tmp/bfqZjBm9ui:1␤------> ␤    expecting any of:␤        rw␤        readonly␤        box_target␤»

[03:05] <camelia> ..rakudo-jvm a77214: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/huobjP7UBi␤Can't use unknown trait 'is default' in an attribute declaration.␤at /tmp/huobjP7UBi:1␤------> ␤    expecting any of:␤        rw␤        readonly␤        box_target␤»

[03:05] <lue> r: class A {has $!x is default(2)}

[03:05] <camelia> rakudo-parrot a77214: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tgbDnl0Bww␤Can't use unknown trait 'is default' in an attribute declaration.␤at /tmp/tgbDnl0Bww:1␤------> ␤    expecting any of:␤        rw␤        readonly␤        box_target␤»

[03:05] <camelia> ..rakudo-jvm a77214: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/QGFLmPbACJ␤Can't use unknown trait 'is default' in an attribute declaration.␤at /tmp/QGFLmPbACJ:1␤------> ␤    expecting any of:␤        rw␤        readonly␤        box_target␤»

[03:07] <finanalyst> r: class A {has $.a is rw = 2}; my A $x.=new(:a(4)); say $x; $x.a=Nil; say $x

[03:07] <camelia> rakudo-parrot a77214, rakudo-jvm a77214: OUTPUT«A.new(a => 4)␤A.new(a => Any)␤»

[03:07] <lue> r: class A {has $.a = 2}; my A $x.=new(:a(4)); say $x; $x.a=Nil; say $x

[03:07] <camelia> rakudo-parrot a77214: OUTPUT«A.new(a => 4)␤Cannot assign to a readonly variable or a value␤  in block  at /tmp/MEyZkTSipE:1␤␤»

[03:07] <camelia> ..rakudo-jvm a77214: OUTPUT«A.new(a => 4)␤Cannot assign to a readonly variable or a value␤␤»

[03:08] <finanalyst> so setting an attribute with = in a clase definition is not the same as a default because assigning Nil to the attribute does not return it to default

[03:08] <lue> Huh. I'd've thought public attrs would be rw by default. (May be I'm thinking in old-Perl-6 terms)

[03:09] <finanalyst> attr are ro by default according to spec

[03:09] <lue> finanalyst: yeah, I'm thinking is default should work there, can't recall if it's specced to do so though.

[03:09] <lue> Like I said, my mind could possibly be expecting older-spec'd behavior or something on the rw attrs front.

[03:10] <finanalyst> lue: that's why I tried assigning Nil to a rw. If spec indicates default behaviour, currently thats not happening

[03:10] <BenGoldberg> r: my $a is default 2; say $a; $a = 3; say $a; $a = Nil; say $a;

[03:10] <camelia> rakudo-jvm a77214: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Q7FvROSxlM␤Two terms in a row␤at /tmp/Q7FvROSxlM:1␤------> [32mmy $a is default [33m⏏[31m2; say $a; $a = 3; say $a; $a = Nil; say[0m␤    expecting any of:␤        scoped declarator␤…»

[03:10] <camelia> ..rakudo-parrot a77214: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tE3DsDNlh5␤Two terms in a row␤at /tmp/tE3DsDNlh5:1␤------> [32mmy $a is default [33m⏏[31m2; say $a; $a = 3; say $a; $a = Nil; say[0m␤    expecting any of:␤        scoped declarator…»

[03:10] <BenGoldberg> r: my $a is default(2); say $a; $a = 3; say $a; $a = Nil; say $a;

[03:10] <camelia> rakudo-parrot a77214, rakudo-jvm a77214: OUTPUT«2␤3␤2␤»

[03:21] <finanalyst> i just filed a rakudobug

[03:25] *** thou left
[03:51] *** btyler joined
[04:07] *** ssutch left
[04:11] *** abnorman joined
[04:22] * lue likes how some of the POD synopses have Pod6 brainos :)  [see html output of S32::IO]

[04:25] *** thou joined
[04:28] *** btyler left
[04:31] <BenGoldberg> r: say sqrt(-1.0)

[04:31] <camelia> rakudo-parrot a77214, rakudo-jvm a77214: OUTPUT«NaN␤»

[04:31] <BenGoldberg> r: say i

[04:31] <camelia> rakudo-parrot a77214, rakudo-jvm a77214: OUTPUT«0+1i␤»

[04:31] <BenGoldberg> Why does sqrt(-1) not produce i?

[04:32] <BenGoldberg> r: say sqrt(1+0i)

[04:32] <camelia> rakudo-parrot a77214, rakudo-jvm a77214: OUTPUT«1+0i␤»

[04:32] <BenGoldberg> r: say sqrt(-1+0i)

[04:32] <camelia> rakudo-jvm a77214: OUTPUT«6.123233995736766E-17+1i␤»

[04:32] <camelia> ..rakudo-parrot a77214: OUTPUT«6.12323399573677e-17+1i␤»

[04:32] <BenGoldberg> Hmm, nevermind, I think I see :)

[04:33] <BenGoldberg> r: say one(i,-i)

[04:33] <camelia> rakudo-parrot a77214, rakudo-jvm a77214: OUTPUT«one(0+1i, -0-1i)␤»

[04:35] <BenGoldberg> It would be interesting if sqrt produced a superposition of the roots... but it would probably be confusing for those who don't expect it ;)

[04:36] <BenGoldberg> r: say one(i,-1)**2

[04:36] <camelia> rakudo-parrot a77214: OUTPUT«one(-1+1.22464679914735e-16i, 1)␤»

[04:36] <camelia> ..rakudo-jvm a77214: OUTPUT«one(-1+1.2246467991473532E-16i, 1)␤»

[04:36] <BenGoldberg> r: say one(i,-i)**2

[04:36] <camelia> rakudo-jvm a77214: OUTPUT«one(-1+1.2246467991473532E-16i, -1-1.2246467991473532E-16i)␤»

[04:36] <camelia> ..rakudo-parrot a77214: OUTPUT«one(-1+1.22464679914735e-16i, -1-1.22464679914735e-16i)␤»

[04:40] <TimToady> as with FatRats, we don't let people fall accidentally into the domain of Complex arithmetic

[04:41] <lue> BenGoldberg: I think the idea is that we assume you meant +√ and not the two-answers cases of √

[04:44] *** cognominal left
[04:44] *** cognominal joined
[04:45] *** preflex left
[04:45] *** preflex_ joined
[04:45] *** ChanServ sets mode: +v preflex_

[04:45] *** preflex_ is now known as preflex

[04:47] <grondilu> If I want to augment Perl6 grammar in a program, I have to write an advanced macro (when they are implemented)?  Or is there an other way?

[04:48] *** wooden joined
[04:48] *** wooden left
[04:48] *** wooden joined
[04:57] *** davercc joined
[05:00] *** thou left
[05:01] *** hoverboard left
[05:11] *** hoverboard joined
[05:21] *** thou joined
[05:21] *** ingy1 is now known as ingy

[05:22] *** ingy left
[05:22] *** ingy joined
[05:22] *** daniel-s_ left
[05:27] *** thou left
[05:35] *** jnap left
[05:48] *** BenGoldberg left
[05:55] *** eternaleye left
[05:55] *** eternaleye joined
[05:56] *** eternaleye left
[05:56] *** eternaleye joined
[05:58] *** benabik joined
[06:05] *** jnap joined
[06:10] *** jnap left
[06:23] *** ssutch joined
[06:26] *** dayangkun left
[06:31] *** SamuraiJack_ joined
[06:36] *** ivanshmakov joined
[06:39] *** dayangkun joined
[06:40] *** darutoko joined
[07:02] *** MikeFair left
[07:06] *** jnap joined
[07:10] *** jnap left
[07:11] *** SamuraiJack_ left
[07:17] *** abnorman left
[07:23] *** kaleem joined
[07:38] *** denis_boyun joined
[07:46] *** denis_boyun left
[07:59] *** denis_boyun joined
[08:02] *** kurahaupo_mobile left
[08:07] *** jnap joined
[08:08] *** Pleiades` left
[08:11] *** jnap left
[08:13] *** Pleiades` joined
[08:17] *** xinming left
[08:18] *** xinming joined
[08:19] *** denis_boyun left
[08:34] *** denis_boyun joined
[08:44] *** denis_boyun left
[09:04] *** Pleiades` left
[09:09] *** Pleiades` joined
[09:15] *** dmol joined
[09:15] *** dmol left
[09:16] *** dmol joined
[09:16] *** PZt left
[09:19] *** davercc left
[09:21] *** SamuraiJack_ joined
[09:24] *** xinming left
[09:25] *** xinming joined
[09:31] *** hoverboard left
[09:36] <masak> good antenoon, #perl6

[09:37] <timotimo> hello masak :)

[09:37] <lizmat> good antenoon to you too, masak, timotimo 

[09:37] <masak> and a fine antenoon it is

[09:37] <FROGGS> hi all

[09:38] <masak> lue: re http://irclog.perlgeek.de/perl6/2013-12-30#i_8053985 -- yes, &eval can be misused. but so can roles, or addition, or for loops.

[09:39] <masak> I feel there's a bit of "Goto considered harmful"-style stigmatization of &eval going on, with not that much substance behind the arguments.

[09:40] <masak> that is, the GOTO instruction *was* indeed worse than the more modern structured alternatives, as indeed &eval is worse than many alternatives.

[09:40] <lizmat> I think it is a good thing, since eval in p6 is only similar to p5's eval on first look

[09:40] <masak> how so?

[09:40] <lizmat> because p5's eval has an implicit try

[09:41] <masak> well, you're not wrong.

[09:41] <lizmat> so, most p5ers would use eval to test stuff, rather than execute code in strings specifically

[09:41] <masak> still not cause for uppercasing, if you ask me.

[09:41] <masak> uppercasing yells "outside of the normal control flow!"

[09:41] <masak> &

[09:41] <FROGGS> masak: then we should lowercase MONKEY_TYPING

[10:08] *** jnap joined
[10:10] *** denis_boyun joined
[10:11] *** PZt joined
[10:13] *** jnap left
[10:15] *** denis_boyun left
[10:19] <timotimo> i'd like to have a flag for fudgeandrun to use something different than ./perl6

[10:23] *** denis_boyun joined
[10:24] <FROGGS> an environment var like PERL6_EXE?

[10:25] <FROGGS> one of these scripts already has something like that

[10:26] <timotimo> maybe

[10:29] *** denis_boyun left
[10:56] <timotimo> jnthn: if we have a callmethod on a WVal, do we have to analyze more than "is the method name constant and does the metaobject have a weird find_method"?

[10:58] *** kaleem left
[11:05] *** xenoterracide left
[11:21] *** rindolf joined
[11:25] *** kaleem joined
[11:38] *** carlin joined
[11:38] <timotimo> our optimizer would need to be cleverer to try to inline method ACCEPTS of Regex, as it uses getlexrelcaller; it'd have to turn that into ... getlex? getlexrel?

[11:39] <carlin> rakudo: my $nzst = 13 * 60 * 60; say DateTime.now().in-timezone($nzst).truncated-to(day);

[11:39] <camelia> rakudo-parrot a77214, rakudo-jvm a77214: OUTPUT«2014-01-01T00:00:00+1300␤»

[11:41] <dalek> nqp: 41debf4 | (Tobias Leich)++ | src/vm/moar/ModuleLoader.nqp:

[11:41] <dalek> nqp: add nqp language diretory to search path

[11:41] <dalek> nqp: review: https://github.com/perl6/nqp/commit/41debf4170

[11:43] *** carlin left
[11:51] *** kaleem left
[11:51] *** kaleem joined
[11:52] <FROGGS> btw, robot turtles is le awesome! we got our game a few days ago

[11:54] *** zakharyas joined
[11:55] *** SamuraiJack_ left
[12:02] <timotimo> the link to the kickstarter is already pink on my browser :)

[12:03] <dalek> rakudo/moar_libpaths: c1479ce | (Tobias Leich)++ | src/core/IO/Spec/Unix.pm:

[12:03] <dalek> rakudo/moar_libpaths: Str.match should be cheaper as Str ~~ Regex

[12:03] <dalek> rakudo/moar_libpaths: 

[12:03] <dalek> rakudo/moar_libpaths: And it has the nice sideeffet that the former works on MoarVM.

[12:03] <dalek> rakudo/moar_libpaths: review: https://github.com/rakudo/rakudo/commit/c1479ce86c

[12:03] <timotimo> s/" as "/" than "/

[12:04] <dalek> rakudo/moar_libpaths: a34b786 | (Tobias Leich)++ | src/vm/moar/ModuleLoaderVMConfig.nqp:

[12:04] <dalek> rakudo/moar_libpaths: pull in a cheat from vm/parrot

[12:04] <dalek> rakudo/moar_libpaths: review: https://github.com/rakudo/rakudo/commit/a34b786669

[12:04] <FROGGS> timotimo: yeah... braino

[12:04] <timotimo> :)

[12:06] <dalek> rakudo/moar_libpaths: 03d85d1 | (Tobias Leich)++ | tools/build/Makefile-Moar.in:

[12:06] <dalek> rakudo/moar_libpaths: install nqp modules to languages/nqp/lib

[12:06] <dalek> rakudo/moar_libpaths: review: https://github.com/rakudo/rakudo/commit/03d85d136c

[12:07] <arnsholt> timotimo: At least it was just a commit message braino and not, say, a compile-breaking braino =)

[12:07] <timotimo> yeah. i have more of the latter than of the former :P

[12:08] <arnsholt> I think I've only one compile-breaker, but that was pretty embarassing =)

[12:08] <arnsholt> (But it could be I've just repressed the memories of all my other compile-breakers =)

[12:08] <FROGGS> IMPORTANT NOTE TO EVERYONE: you need to whipe <prefix>/install/languages/perl6/lib/Perl6/*.moarvm when the moar_libpath branch gets merged

[12:08] <timotimo> i need a way to return a () from before &infix:<,> is defined >_<

[12:08] <FROGGS> hehe

[12:08] <timotimo> maybe i can just stub it really early?

[12:10] <FROGGS> if I am lucky I can run v5 stuff now

[12:10] *** jnap joined
[12:11] *** atroxaper joined
[12:15] *** jnap left
[12:16] *** kurahaupo_mobile joined
[12:23] <FROGGS> looks like I'd need p6reprname now :/

[12:24] *** kurahaupo_mobile is now known as kurahaupo_enrapt

[12:25] *** kurahaupo_enrapt is now known as kurahaupo

[12:31] <moritz> timotimo: Parcel.new ?

[12:32] <timotimo> maybe. and stub class Parcel before the first else-less if? :P

[12:34] <FROGGS> bbl &

[12:34] <timotimo> oh, but maybe Parcel is in BOOTSTRAP

[12:39] <moritz> I'm pretty sure it is

[12:52] *** pjcj_ joined
[13:00] *** PacoAir joined
[13:00] *** wooden left
[13:08] *** kaleem left
[13:11] <masak> hi from a train \o

[13:12] <masak> er, I mean "hi! from... a TRAIN!" :D

[13:15] *** spider-mario joined
[13:18] * masak attempts to build Rakudo-on-Moar

[13:20] *** immortal left
[13:20] *** erkan joined
[13:20] *** erkan left
[13:20] *** erkan joined
[13:22] <moritz> masak: and if you do python, it's "SNAKES ON A TRAIN" :-)

[13:23] <masak> :P

[13:23] <masak> no python today.

[13:24] <timotimo> will you get back to python some time?

[13:24] <masak> but I did read up on the Snake Lemma.

[13:24] <masak> timotimo: that's likely, as I teach various courses, some of them Python courses.

[13:24] <masak> when I dove into Python earlier this year, I was surprised at how similar the Perl and Python communities seem.

[13:25] <masak> any animosity between the two camps is really rather silly.

[13:25] <colomon> masak: yes, but they like snakes.

[13:25] <colomon> ;)

[13:26] <colomon> we like butterflies and camels.

[13:26] <timotimo> an empty parcel is immutable, no?

[13:26] <timotimo> i think at some point, Parcel.new() without arguments could be optimized to return a globally shared empty parcel

[13:27] <timotimo> probably not worth terribly much, especially given sink context etc.

[13:27] <timotimo> hm, i wonder ...

[13:27] <masak> colomon: Guido actually fought the association between Python-the-language and Python-the-snake for years. he squarely intended Python-the-comedy-group.

[13:27] <colomon> masak: I never knew!

[13:27] <masak> colomon: but then some O'Reilly book came out, with a big fat snake on the cover. and he kind of gave in.

[13:27] <colomon> Guido++

[13:28] <masak> nowadays the mascot/icon is even a cute stylized snake.

[13:28] <masak> so Perl 5 has camels, Perl 6 has butterflies, Python has cute snakes, and Ruby has, er, um, foxes shouting "chunky bacon!"

[13:29] <timotimo> i really like the current python logo

[13:29] <timotimo> FWIW, the o'reilly book really should have had a really big foot on its cover

[13:29] <masak> yeah.

[13:30] <timotimo> Method 'eew' not found for invocant of class 'QAST::WVal'

[13:32] <masak> ;)

[13:34] * colomon has chunky bacon cooking in the oven.

[13:35] <timotimo> Nominal type check failed for parameter '%attrinit'; expected Associative but got Hash instead

[13:36] <timotimo>    ...   not sure what i'm doing wrong?

[13:36] <timotimo> too early for Hash to be marked to be doing Associative?

[13:37] <timotimo> i suppose else-less ifs appear very early in the setting ...

[13:38] *** cognominal left
[13:40] <masak> else-less ifs? why would they participate in the circularity dance at all? :)

[13:41] <masak> they're a grammatical/actionable feature rather than a setting feature...

[13:41] <timotimo> they are supposed to return (), they currently return Nil

[13:43] *** kurahaupo left
[13:51] *** SamuraiJack_ joined
[13:52] *** ajr joined
[13:53] *** ajr is now known as Guest99097

[13:53] *** Guest99097 is now known as ajr_

[13:57] * masak .oO( we're Nilists. we don't parcel *anything* )

[13:57] * masak .oO( the Nil is not a river in Egypt )

[13:58] * masak .oO( Jack and Jane went up the Nil )

[13:58] <masak> Jill*

[14:02] <masak> hm, or "Jack and Nil went up a hill, but once there Jack found himself all alone"

[14:04] <timotimo> no, Nil no longer flattens to an empty list in list context

[14:06] <dalek> rakudo/moar-support: 2393288 | (Tobias Leich)++ | tools/build/ (2 files):

[14:06] <dalek> rakudo/moar-support: pass several --libpath options

[14:06] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/23932887ff

[14:06] <dalek> rakudo/moar-support: 3fb7165 | (Tobias Leich)++ | src/core/terms.pm:

[14:06] <dalek> rakudo/moar-support: Merge branch 'moar-support' of github.com:rakudo/rakudo into moar_libpaths

[14:06] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/3fb71655fc

[14:06] <dalek> rakudo/moar-support: c1479ce | (Tobias Leich)++ | src/core/IO/Spec/Unix.pm:

[14:06] <dalek> rakudo/moar-support: Str.match should be cheaper as Str ~~ Regex

[14:06] <dalek> rakudo/moar-support: 

[14:06] <dalek> rakudo/moar-support: And it has the nice sideeffet that the former works on MoarVM.

[14:06] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/c1479ce86c

[14:06] <dalek> rakudo/moar-support: a34b786 | (Tobias Leich)++ | src/vm/moar/ModuleLoaderVMConfig.nqp:

[14:06] <dalek> rakudo/moar-support: pull in a cheat from vm/parrot

[14:06] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/a34b786669

[14:06] <dalek> rakudo/moar-support: 03d85d1 | (Tobias Leich)++ | tools/build/Makefile-Moar.in:

[14:06] <dalek> rakudo/moar-support: install nqp modules to languages/nqp/lib

[14:06] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/03d85d136c

[14:07] <masak> timotimo: oh, ok. then there's still two of them.

[14:07] * masak .oO( Nil -- the artist formerly known as the empty list )

[14:08] <FROGGS> >.<

[14:08] * timotimo tries his luck at some grocery shopping

[14:08] *** atroxaper left
[14:08] <FROGGS> p: ::('formerly known as prince') # :P

[14:08] <camelia> rakudo-parrot a77214: OUTPUT«No such symbol 'formerly known as prince'␤current instr.: 'throw' pc 410302 (src/gen/p-CORE.setting.pir:171896) (gen/parrot/CORE.setting:10737)␤called from Sub 'sink' pc 446395 (src/gen/p-CORE.setting.pir:185119) (gen/parrot/CORE.setting:12127)␤cal…»

[14:09] *** atroxaper joined
[14:11] *** jnap joined
[14:12] *** wooden joined
[14:16] *** jnap left
[14:19] *** jnap joined
[14:20] *** atroxaper left
[14:20] *** atroxaper joined
[14:21] <masak> $ ./perl6-p -e 'say "OH HAI"'

[14:21] <masak> OH HAI

[14:21] <masak> \o/

[14:21] <masak> er, wait.

[14:21] <masak> it's perl6-m I want.

[14:21] <FROGGS> *g*

[14:21] <masak> $ ./perl6-m -e 'say "OH HAI"'

[14:21] <masak> OH HAI

[14:21] <masak> moar: 3rdparty/libuv/src/unix/loop.c:150: uv__loop_delete: Assertion `!((((*(&(loop)->active_reqs))[0]) == (&(loop)->active_reqs)) == 0)' failed.

[14:21] <masak> Aborted

[14:21] <masak> er, \o/

[14:21] <FROGGS> sort of, yeah

[14:21] <masak> and also a bit of /o\

[14:22] <FROGGS> the uv__loop... thing is due to an unclean shutdown

[14:22] <masak> eew

[14:22] <masak> anyway, 's a bit cool that it workz.

[14:22] <masak> ish.

[14:23] <FROGGS> it should be a heisenfail, it might work if you run it again

[14:25] <masak> trying again.

[14:25] <masak> worked this time \o/

[14:25] <masak> ok, here goes some spectesting.

[14:26] <masak> er, maybe 'make test' first...

[14:27] <masak> all sanity tests pass. wow.

[14:29] *** zakharyas left
[14:29] *** ivanshmakov left
[14:31] <masak> ok, so there are some spectest failures...

[14:36] *** zakharyas joined
[14:36] *** ivanshmakov joined
[14:36] <FROGGS> sure, many things are implemented just to "get further"

[14:38] *** rjbs- left
[14:38] *** rjbs- joined
[14:38] *** rjbs- is now known as rjbs

[14:42] <timotimo> i'm not sure how coercion methods are supposed to be implemented with decent performance

[14:43] *** btyler joined
[14:43] <masak> timotimo: please elaborate. what's difficult to implement performantly?

[14:44] <timotimo> subset Even of Int where * %% 2; say 100.Even;

[14:44] <timotimo> otherwise, class MyFoo { method Even { ... } }

[14:44] <timotimo> we can't know anything except handwavey hopes during compile-time about methods

[14:48] <timotimo> i *guess* it'd be implemented as a fallback?

[14:48] <masak> ugh. troo.

[14:48] <timotimo> or maybe every subset installs a role on Any? :)

[14:48] <masak> picturing the lookup as MI *and* roles are taken into account...

[14:49] <masak> yeah, that's going to have perf repercussions.

[14:49] <masak> suddenly everything is potentially a coercion.

[14:49] <timotimo> well, only things with capital initial letters

[14:49] <masak> &

[14:49] <masak> what about 'class even {}' ?

[14:49] <timotimo> nobody would create a lowercase class and except it to work with coercion methods

[14:50] <timotimo> document it with a big bright sign saying "don't you ever write your methods with capital letters"

[14:50] <timotimo> btw, the lookup is also dependent on the lexical scope

[14:50] <timotimo> so it's even more fun

[14:51] <timotimo> also, do we allow my \Foobar := Str; 123.Foobar?

[14:52] <FROGGS> perl6-m -e 'say 1.^name'

[14:52] <FROGGS> Int

[14:52] <FROGGS> \o/

[14:53] <dalek> rakudo/moar-support: da234d3 | (Tobias Leich)++ | src/vm/moar/ (2 files):

[14:53] <dalek> rakudo/moar-support: implement p6reprname

[14:53] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/da234d3872

[14:54] <FROGGS> timotimo: should be \Foobar := &Str if Str would be a sub

[14:54] <timotimo> er

[14:54] <FROGGS> can't imagine the method form would do

[14:54] <timotimo> i did mean the Str class

[14:54] <timotimo> not a sub by the same name

[14:55] <FROGGS> p: my $foo = "Str"; say 123.$foo

[14:55] <camelia> rakudo-parrot a77214: OUTPUT«No such method 'postcircumfix:<( )>' for invocant of type 'Str'␤  in any  at gen/parrot/BOOTSTRAP.nqp:1687␤  in any  at gen/parrot/BOOTSTRAP.nqp:1669␤  in block  at /tmp/bQLWDUaRBT:1␤␤»

[14:55] <FROGGS> p: my $foo = "Str"; say 123."$foo"

[14:55] <camelia> rakudo-parrot a77214: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/PoDp6ug4u4␤Quoted method name requires parenthesized arguments. If you meant to concatenate two strings, use '~'.␤at /tmp/PoDp6ug4u4:1␤------> [32mmy $foo = "Str"; say 123."$foo"[33m⏏[3…»

[14:55] <FROGGS> p: my $foo = "Str"; say 123.("$foo")

[14:55] <camelia> rakudo-parrot a77214: OUTPUT«No such method 'postcircumfix:<( )>' for invocant of type 'Int'␤  in any  at gen/parrot/BOOTSTRAP.nqp:1687␤  in any  at gen/parrot/BOOTSTRAP.nqp:1669␤  in block  at /tmp/FoUh9_7D1J:1␤␤»

[14:55] <timotimo> no, you've missed the important part of the discussion

[14:55] <FROGGS> p: my $foo = "Str"; say 123."$foo"()

[14:55] <camelia> rakudo-parrot a77214: OUTPUT«123␤»

[14:55] <timotimo> this is about coercion methods

[14:55] <FROGGS> this?

[14:55] <timotimo> this discussion

[15:03] *** btyler left
[15:08] *** btyler joined
[15:27] *** jnap left
[15:42] *** smls joined
[15:47] * smls skims through doc.perl6.org/language/operators

[15:48] <smls> What are some real-life use cases for infix:<but> ?

[15:48] *** atroxaper left
[15:49] *** manishka joined
[15:49] *** atroxaper joined
[15:51] <arnsholt> Similar to infix:<does>, but sometimes you can't alter an object directly since it may break other code's expectations

[15:52] *** ajr_ left
[15:52] *** ajr joined
[15:52] *** ajr is now known as Guest41994

[15:52] *** Guest41994 is now known as ajr_

[15:55] <smls> Is there a rosettacode example or something that uses 'but' or 'does'?

[15:56] *** Pleiades` left
[15:57] <smls> It seems cool, but I can't relate it to any concrete programming needs from my Perl 5 experience.

[16:01] *** Pleiades` joined
[16:01] *** manishka left
[16:04] <FROGGS> smls: one example is to mix in a role Cache to a variable, that computes something and stashes it... and later you check that an object does that role, and you take the cached value

[16:05] <FROGGS> we do that with regexes internally

[16:11] <smls> I see

[16:12] <FROGGS> so everywhere where you want to attach another bit of information or behaviour this is a nice approach

[16:18] *** Pleiades` left
[16:23] *** japhb_ left
[16:23] *** tokuhirom left
[16:23] *** PacoAir left
[16:24] *** tokuhirom joined
[16:27] *** Pleiades` joined
[16:27] *** rurban left
[16:28] *** jnap joined
[16:28] *** Pleiades` left
[16:28] *** Pleiades` joined
[16:28] *** rurban joined
[16:29] *** Khisanth left
[16:32] *** jnap left
[16:40] *** smls left
[16:42] *** atroxaper left
[16:42] *** atroxaper joined
[16:43] *** Khisanth joined
[16:43] *** Khisanth is now known as Guest56837

[16:48] *** atroxaper left
[17:06] *** colomon left
[17:14] *** bibifuc joined
[17:14] *** finanalyst left
[17:15] *** atroxaper joined
[17:20] *** PZt left
[17:31] *** dayangkun left
[17:36] *** xenoterracide joined
[17:46] *** PZt joined
[17:54] *** ajr_ left
[17:55] *** ajr joined
[17:55] *** ajr is now known as Guest87179

[17:55] *** Guest87179 is now known as ajr_

[18:08] *** sftp left
[18:09] *** atroxaper left
[18:16] *** sftp joined
[18:20] *** jnap joined
[18:21] *** SamuraiJack_ left
[18:23] *** Guest56837 left
[18:23] *** dalek joined
[18:23] *** ChanServ sets mode: +v dalek

[18:23] *** Khisanth joined
[18:25] *** jnap left
[18:28] *** sftp_ joined
[18:29] *** [particle] left
[18:29] *** sftp left
[18:30] *** [particle] joined
[18:30] *** stevan__ joined
[18:31] *** timotimo joined
[18:32] <TimToady> preflex: tell smls Did you ever use "0 but true" in Perl 5?  In Perl 6 you don't need to trick it; you can say 0 but True to get a numeric value of 0 that evaluates to True in boolean context

[18:32] <preflex>  Consider it noted.

[18:34] *** stevan_ left
[18:37] *** PZt left
[18:41] * masak nods politely to #perl6

[18:44] *** ivan`` joined
[18:53] <lee__> should (0 but True).perl include "but True"? currently it just shows 0

[18:53] <FROGGS> as I understand it .perl should be round trip safe

[18:56] *** abnorman joined
[18:57] <TimToady> maybe 'but' should add a .perl derived method

[18:57] <TimToady> that wraps the base method

[18:58] <TimToady> hard to know what to put in the general case, though, kinda like the problems with Routine.perl

[18:58] <TimToady> one is tempted to just wrap the original source text

[18:59] *** mtk left
[19:00] *** mtk joined
[19:00] <masak> p: sub foo {}; my $bar = &foo but role { method perl { "{callsame} but this anon role" } }; say $bar

[19:00] <camelia> rakudo-parrot a77214: OUTPUT«sub+{<anon>} foo() { ... } but this anon role␤»

[19:00] <masak> \o/

[19:06] <masak> the most profound thing I've learned in category theory so far is that the whole of relational algebra can be reduced to three functors, ∆ (DUP/DEL), Σ (UNION), and Π (JOIN/SELECT), and that ∆ is a left adjunct of Σ, and Π is a right adjunct of Σ.

[19:06] <masak> that's, like, a serious reduction of concepts into something extremely small.

[19:07] * lue should learn category theory in detail some time.

[19:09] <lue> I know it's a bunch of dots and the arrows that connect them, but that's it :)

[19:15] <TimToady> if it's that simple, they should teach it in grade school :)

[19:16] <masak> it's that simple. that's why it's so bloody hard.

[19:17] <masak> lue: in the back of my mind there are blog posts being written about category theory (with nice diagrams) being implemented in Perl 6.

[19:17] *** skids joined
[19:17] <masak> but that's gotta happen After t4 And The Rest of p6cc.

[19:18] <masak> anyway. "dots and arrows" is a nice slogan. one thing that category theory hammers in is that set theory focuses too much on the dots, but the Interesting Stuff all happens in the arrows.

[19:19] <masak> or put differently, No Dot Is An Island. a dot is defined by what other dots it knows.

[19:19] *** colomon joined
[19:20] *** jnap joined
[19:25] *** jnap left
[19:26] *** hoverboard joined
[19:28] *** xenoterracide left
[19:30] *** cooper left
[19:30] *** ajr_ left
[19:38] *** ajr joined
[19:38] *** telex left
[19:38] *** ajr is now known as Guest65184

[19:40] *** telex joined
[19:55] *** Guest65184 left
[19:56] *** ajr_ joined
[19:58] <masak> FROGGS: one of these days we're going to sit down and have an awesome talk about slangs.

[19:59] * lue reserves a chair at that figurative table

[19:59] <FROGGS> \o/

[19:59] <FROGGS> I hope to get rid of my rakudo.patch file within that time too

[20:03] <masak> FROGGS++ # http://perl6advent.wordpress.com/2013/12/16/day-16-slangs/

[20:03] <masak> FROGGS: minor nit: s/wether/whether/

[20:03] <FROGGS> fixed, thanks :o)

[20:06] *** darutoko left
[20:07] <lue> I've got a couple questions IAre my concerns about changing a grammar rule but not the actions justified?

[20:07] <lue> I've got a couple questions I'd like sorted out: Are my concerns about changing a grammar rule but not the actions justified?

[20:08] <masak> wow, seems moritz++ won the popularity contest this year, with 4961 hits to his slot-23 post. :)

[20:08] <masak> lue: what's the use case, in more detail?

[20:08] <lue> And how do we reconcile the grammar+actions way of doing things with the  grammar rule { {inline action rule} }  way of doing things in slangs?

[20:09] *** FROGGS[mobile] joined
[20:09] <lue> masak: First terrible case out of my head: where someone wants to change the rule that parses the $ sigil to use ¢ instead.

[20:10] <lue> I can't think of anything specific & likely at the moment, but I still think the general issue of desyncing the grammar and action parts hasn't been addressed, from what I've seen at least.

[20:13] <lue> The issue really is with changing  token foo { <bar> (\d+) }  to  token foo { <.bar> [\d+] }  , and how to handle the lack of a change to the method foo that presumably uses those (once-)captured things.

[20:19] <masak> lue: you're right -- discussion on slangs seems to talk about grammars, but not action classes.

[20:20] <masak> historically, action classes Came Much Later.

[20:20] <lue> masak: yes. Action classes used to be embedded { make } closures. I remember being surprised to learn from TimToady that action classes stole the make term from inlined grammar blocks.

[20:21] *** jnap joined
[20:21] <masak> clearly action methods are quite strongly tied to a particular grammar.

[20:22] <masak> not just the corresponding grammar rule, but (implicitly) the whole rest of the grammar, too.

[20:22] * lue tries to find his old slangs gist...

[20:22] *** zakharyas left
[20:22] <masak> and one grammar can surely have several action classes -- which is definitely nice -- but I struggle to see the converse happening.

[20:22] <masak> ...by anything else than fantastic coincidence.

[20:23] *** PZt joined
[20:23] <FROGGS[mobile]> our sprintf has two action classes btw

[20:23] <lue> grammar->actions is definitely one-to-one or one-to-many, and not many-to-one (unless you try *really hard* that is)

[20:23] <masak> which is wonderful, and What I Said.

[20:24] <lue> 8mo-old gist with some of these thoughts: https://gist.github.com/lue/5241230

[20:24] <lue> (the "! NOTICE: ignore the below section !" comes from when I learned of the embedded { make } blocks)

[20:25] *** jnap left
[20:27] <FROGGS[mobile]> I can imagine to have a single action class for a JSON grammar and a YAML grammar

[20:27] <lue> r: say $&say;

[20:27] <camelia> rakudo-parrot a77214, rakudo-jvm a77214: OUTPUT«sub say() { ... }␤»

[20:28] <lue> so that twigil idea is bust :)

[20:28] <FROGGS[mobile]> or other very related things, like different versions ob a grammar that should be supported at the same time

[20:31] <lue> FROGGS[mobile]: I think the main issue with many-to-one is that it'd be quite fragile, moreso than one-to-many. (Because actions are dependent on grammars, but not the other way 'round)

[20:31] <FROGGS[mobile]> true

[20:32] <lue> Not saying you can't (or shouldn't) do it, just that you have to be *really careful* if you're going to do it. :)

[20:35] <masak> that goes without saying :)

[20:36] * masak .oO( Honey, I Shrunk The Grammar )

[20:38] <lue> I think we can all agree that the Actions half of things hasn't really been considered yet, and how to factor that into the current thinking around slangs should be Very Interesting™.

[20:39] *** ajr_ left
[20:40] <FROGGS[mobile]> I'd love to see "slang" as a first class keyword but I have no (good) ideas beyond that

[20:41] <lue> And I think augment/supersede shouldn't have magically different meanings for slangs as well :)

[20:41] <FROGGS[mobile]> because to me a slang is a collection of a grammar, an action class, a moduleloader and the slang's name

[20:41] <FROGGS[mobile]> dunno how to bundle that nicely 

[20:42] * lue wonders how much of his dislike for the current speccing of augment and supersede are caused by a lack of support in rakudo.

[20:42] <lue> Well, the moduleloader isn't inherently part of a slang (cf. the quoting and regex languages)

[20:42] <masak> we know from experience that the only way to get a handle on these things is to implement them and see what works and what doesn't.

[20:42] <masak> that's why FROGGS++ is the hero here.

[20:43] <lue> FROGGS++ indeed.

[20:43] <masak> he's doing slangs in Rakudo before slangs really exist in Rakudo.

[20:43] <FROGGS[mobile]> lue: the ML is optional, yes

[20:44] <FROGGS[mobile]> :o)

[20:44] <lue> maybe treating 'slang' as a super-container of sorts, in which you place a grammar and actions, would better fit the wildly expanded role of how languages work now?

[20:45] <lue> something 'package' or 'module'-like in those respects.

[20:45] <FROGGS[mobile]> it is a fun (and never ending) task, and I dont wanna swap it... (not even for an iphone)

[20:46] <FROGGS[mobile]> it is just sad that we have nothing like such a collection... so we cant borrow ideas

[20:47] *** rindolf left
[20:47] <lue> FROGGS: that just means we get to be pioneers :D

[20:47] <lue> 2014: The year of, like, slangs or whatever, man.

[20:48] <FROGGS[mobile]> yeah, but it should feel as if it belongs to Perl :o)

[20:51] <FROGGS[mobile]> slang Foo { parser Bar { }; action Baz { } }

[20:52] <FROGGS[mobile]> what I'd like too if you could have a single thing that would be a token and an action method at the same time

[20:53] <pmichaud_> good afternoon, #perl6

[20:53] *** pmichaud_ is now known as pmichaud

[20:53] <FROGGS[mobile]> but this wont end up good I guess

[20:53] <moritz> FROGGS[mobile]: token integer { \d+ { make +$/ } }

[20:53] <FROGGS[mobile]> Hi pmichaud

[20:53] <moritz> good pm, pm

[20:54] <lue> FROGGS[mobile]: feature foo { grammar } { action }  :P

[20:54] <FROGGS[mobile]> moritz: no, that is ugly... somehow

[20:54] <FROGGS[mobile]> but maybe the sanest

[20:54] <pmichaud> Happy New Year to all :)

[20:54] <FROGGS[mobile]> Happy new year :o)

[20:55] <moritz> happy new year to everybody!

[20:55] * moritz sick

[20:55] <pmichaud> somehow "collection of grammar, action class, module loader, and name" doesn't sound like "slang" to me.  Feels more like a "culture" or "fad".  :-)

[20:56] <pmichaud> i.e., at some point it's more than just language/syntax and starts including behavior and social norms :)

[20:56] <masak> happy new year, pm/everybody! \o/

[20:56] <masak> moritz: get well soon(tm)

[20:56] <lue> :) +1 for renaming an expanded slang keyword.

[20:56] <pmichaud> Hope you get to feeling better soon, moritz...   I caught something late last week that was No Fun on Friday and Saturday.

[20:57] <lue> .oO( counterculture Foo { ... } )

[20:57] <pmichaud> alt.lang.perl6 Foo  :-)

[20:57] <FROGGS[mobile]> hehe

[20:57] <lue> Only if you want to be tied down to using the JVM :P

[20:58] <pmichaud> oh, I'm pretty sure that comp.lang.* and alt.* predate the JVM :)

[20:58] <moritz> thanks masak and pmichaud 

[20:58] <lue> I'm aware, I was making fun of JVM's domains.reversed

[20:59] <geekosaur> bring back JANet?

[21:02] <pmichaud> OMG I love http://perl6advent.wordpress.com/2013/12/24/advent-ventures/ !!   TimToady++

[21:02] <masak> it's wonderful.

[21:08] <lue> I can't help but wonder what TimToady would write if he wasn't pushed to do something :)

[21:08] <pmichaud> "Nothing."

[21:08] <moritz> puns.

[21:08] <pmichaud> Everything TimToady writes is a pun at some level.  :-P

[21:09] <masak> I hear eve 

[21:09] <masak> I hear even his nick is a pun.

[21:12] <pmichaud> Anyone know of any europe-based perl6-ish events taking place in the March 2014 timeframe?

[21:14] *** PZt left
[21:14] <colomon> TimToady++ indeed

[21:15] <masak> pmichaud: the PLPW, but it's in May. http://act.yapc.eu/plpw2014/

[21:15] <pmichaud> hmmm.  I should put that on my calendar.

[21:15] * masak will try to be there

[21:15] <pmichaud> I only did one perl event in 2013 (yapc::na) and I need more.

[21:16] *** dwarring joined
[21:16] <pmichaud> I still have yet to make it to a dutch perl workshop.  :-/

[21:17] <pmichaud> oooh, or maybe the QA Hackathon in Lyon :)

[21:17] *** btyler left
[21:18] <FROGGS> the german perl workshop will take place in march... though I think there will be just about 50 to 80 ppl

[21:19] <pmichaud> size of workshop isn't the key thing -- mainly it's whoever else might be in attendance :-)

[21:19] <FROGGS> I hope jnthn will come

[21:19] <pmichaud> yes, jnthn++ tops my list :)

[21:19] <FROGGS> he said he might be interested

[21:22] *** jeffreykegler joined
[21:22] *** jnap joined
[21:24] *** xenoterracide joined
[21:27] *** jnap left
[21:28] *** xenoterracide left
[21:30] <pmichaud> I'm afk again -- Happy (and safe!) New Year to everyone

[21:30] <masak> pmichaud: \o

[21:31] <dagurval> rp: sub a is DEPRECATED((sub { })()) { };

[21:31] <camelia> rakudo-parrot a77214: OUTPUT«===SORRY!===␤Null PMC access in get_bool()␤»

[21:31] <dagurval> found a Null PMC access \o/

[21:32] <masak> dagurval++ # \o/

[21:32] <masak> dagurval: submit it!

[21:33] <dagurval> ok! last bug of the year

[21:33] <masak> :)

[21:33] <masak> ...probably ;)

[21:33] <dagurval> hehe, fingers crossed!

[21:39] *** kurahaupo_mobile joined
[21:45] <colomon> we should have a last bug of the year contest

[21:49] * dwarring already too late here

[21:50] <dwarring> nqp build nit...

[21:52] <dwarring> nqp and parrot repos are via http (not https) - e.g. http://github.com/perl6/nqp.git

[21:52] <dwarring> see https://github.com/perl6/nqp/blob/master/tools/lib/NQP/Configure.pm

[21:52] <dwarring> this is not recommend and is sllooow see - https://github.com/blog/92-http-cloning

[21:53] <dwarring> anyone object if I change http to https?

[21:53] <FROGGS> +1

[21:54] <dwarring> works much faster when I try it locally

[21:57] <dalek> nqp: 61e4135 | (David Warring [email@hidden.address] | tools/lib/NQP/Configure.pm:

[21:57] <dalek> nqp: tweak nqp & parrot git urls (http => https)

[21:57] <dalek> nqp: review: https://github.com/perl6/nqp/commit/61e4135e3b

[21:57] * dwarring done

[21:57] *** raiph left
[22:10] *** unclefester2 joined
[22:10] *** sftp_ left
[22:14] <unclefester2> r: my Str ($s,$t); $s ~= "abc"; say $s; say $t ~ "def"; my Int ($i, $j); $i += 2; say $i; say $j +2

[22:14] <camelia> rakudo-jvm a77214: OUTPUT«abc␤use of uninitialized value of type Str in string context␤def␤2␤Cannot look up attributes in a type object␤␤»

[22:14] <camelia> ..rakudo-parrot a77214: OUTPUT«abc␤use of uninitialized value of type Str in string context  in block  at /tmp/KWPKUw9vbn:1␤␤def␤2␤Invocant requires an instance, but a type object was passed␤  in method Bridge at gen/parrot/CORE.setting:4272␤  in sub infix:<+> at gen/par…»

[22:15] <unclefester2> I have been away for a while

[22:23] *** jnap joined
[22:28] *** jnap left
[22:33] *** MikeFair_ joined
[22:36] <unclefester2> r: class Dog{ has Str $.name}; my Dog @d; @d[1] = Dog.new(name => "Fred"); @d.say; say @d[0] + 2;

[22:36] <camelia> rakudo-jvm a77214: OUTPUT«(Any) Dog.new(name => "Fred")␤use of uninitialized value of type Dog in numeric context␤2␤»

[22:36] <camelia> ..rakudo-parrot a77214: OUTPUT«(Any) Dog.new(name => "Fred")␤use of uninitialized value of type Dog in numeric context  in block  at /tmp/i1NrX3l8e_:1␤␤2␤»

[22:37] *** PacoAir joined
[22:39] <timotimo> unclefester2: i don't understand what you're trying to do :)

[22:42] <unclefester2> Well its an array of dog and when I skip an element I am surprised that I can do arithmetic with the skipped dog?

[22:42] <unclefester2> I also wonder about the skipped element having a type of "(any)"

[22:43] <timotimo> it should have a type of (Dog)

[22:43] *** jeffreykegler left
[22:44] <unclefester2> I will do a bit more research in RT.  If I don't find anything I may email in a bug report unless there are objections ...

[22:44] <timotimo> ah, yes, it shouldn't be (Any)

[22:44] *** jeffreykegler joined
[22:45] *** kurahaupo_mobile left
[22:45] <timotimo> it may just be a printing problem?

[22:45] <unclefester2> except for the addition I can do on the element later ....

[22:46] <timotimo> yeah, let me investigate ):

[22:46] <timotimo> :)

[22:46] <timotimo> r: my Str @foo; say @foo[0]; say @foo[0].WHAT;

[22:46] <camelia> rakudo-parrot a77214, rakudo-jvm a77214: OUTPUT«(Str)␤(Str)␤»

[22:47] <timotimo> r: my class Dog { has $.name; }; my Dog @foo; say @foo[0]; say @foo[0].WHAT;

[22:47] <camelia> rakudo-parrot a77214, rakudo-jvm a77214: OUTPUT«(Dog)␤(Dog)␤»

[22:47] <timotimo> r: my class Dog { has $.name; }; my Dog @foo; @foo[1] = Dog.new( :name<Poopy> ); say @foo[0]; say @foo[0].WHAT;

[22:47] <camelia> rakudo-parrot a77214, rakudo-jvm a77214: OUTPUT«(Dog)␤(Dog)␤»

[22:47] <timotimo> r: my class Dog { has $.name; }; my Dog @foo; @foo[1] = Dog.new( :name<Poopy> ); say @foo[0]; say @foo[0].WHAT; say @foo;

[22:47] <camelia> rakudo-parrot a77214, rakudo-jvm a77214: OUTPUT«(Dog)␤(Dog)␤(Any) Dog.new(name => "Poopy")␤»

[22:47] <timotimo> *interesting*!

[22:48] <FROGGS> we had that yesterday

[22:48] <FROGGS> List.at_pos give you a Dog because it returns the default

[22:49] <FROGGS> but the default value is not stored in the slots, so say @foo shows Any

[22:49] <timotimo> oh? i see

[22:51] *** BenGoldberg joined
[22:51] *** colomon left
[22:52] *** colomon joined
[22:52] <dalek> rakudo-star-daily: 00bddd4 | coke++ | log/ (5 files):

[22:52] <dalek> rakudo-star-daily: today (automated commit)

[22:52] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/00bddd49e5

[22:52] <dalek> perl6-roast-data: b7b9a56 | coke++ | / (6 files):

[22:52] <dalek> perl6-roast-data: today (automated commit)

[22:52] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/b7b9a56dab

[22:53] *** xenoterracide joined
[22:55] <unclefester2> FROGGS:  sorry - a bit new here - checked through the last two days and didn't see it - can you give link?  Also it's not just an appearance problem because you can add 2 to @d[0] ...

[22:55] <timotimo> no, that's no problem

[22:56] *** sftp_ joined
[22:56] <timotimo> r: class Dog { has $.name; }; my Dog $x; $x + 2; my Str $x; $x + 2;

[22:56] <camelia> rakudo-parrot a77214: OUTPUT«Potential difficulties:␤    Redeclaration of symbol $x␤    at /tmp/0W4ws5eIAR:1␤    ------> [32m $.name; }; my Dog $x; $x + 2; my Str $x[33m⏏[31m; $x + 2;[0m␤WARNINGS:␤Useless use of "+" in expression "$x + 2" in sink context (line 1)␤u…»

[22:56] <camelia> ..rakudo-jvm a77214: OUTPUT«Potential difficulties:␤    Redeclaration of symbol $x␤    at /tmp/TZLDGDx1Qy:1␤    ------> [32m $.name; }; my Dog $x; $x + 2; my Str $x[33m⏏[31m; $x + 2;[0m␤WARNINGS:␤Useless use of "+" in expression "$x + 2" in sink context (line 1)␤use …»

[22:56] <timotimo> oops

[22:56] <timotimo> r: class Dog { has $.name; }; my Dog $x; $x + 2; my Str $y; $y + 2;

[22:56] <camelia> rakudo-parrot a77214: OUTPUT«WARNINGS:␤Useless use of "+" in expression "$x + 2" in sink context (line 1)␤use of uninitialized value of type Dog in numeric context  in block  at /tmp/WaOMUfMF6P:1␤␤use of uninitialized value of type Str in numeric context  in block  at /tmp/W…»

[22:56] <camelia> ..rakudo-jvm a77214: OUTPUT«WARNINGS:␤Useless use of "+" in expression "$x + 2" in sink context (line 1)␤use of uninitialized value of type Dog in numeric context␤use of uninitialized value of type Str in numeric context␤»

[22:56] <timotimo> … :)

[22:57] <FROGGS> unclefester2: http://irclog.perlgeek.de/perl6/2013-12-26#i_8042741

[23:00] *** MikeFair_ left
[23:03] *** PZt joined
[23:03] <unclefester2> r: class Dog{ has Str $.name}; my Dog $d .= new(name => "Fred"); say $d + 2

[23:04] <camelia> rakudo-parrot a77214: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \v: Mu *%_)␤  in any  at gen/parrot/BOOTSTRAP.nqp:1218␤  in any  at gen/parrot/BOOTSTRAP.nqp:1209␤  in method Numeric at gen/parrot/CORE.setting:997␤  in sub infix:<+> at gen/parrot/…»

[23:04] <camelia> ..rakudo-jvm a77214: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \v: Mu *%_)␤  in any  at gen/jvm/BOOTSTRAP.nqp:1201␤␤»

[23:04] <unclefester2> I think we all agree that what I typed in is not supposed to work but in my earlier example it sort of did.

[23:05] <unclefester2> Not only did it dump (Any) it added 2 to it.

[23:06] <timotimo> a new year's eve rocket just exploded like a meter from my face %)

[23:06] <timotimo> luckily, nobody was harmed

[23:09] <FROGGS>  /o\

[23:10] <FROGGS> good that I have a reason to stay inside :o)

[23:10] <timotimo> :)

[23:10] <timotimo> we're on the 5th floor or the 6th

[23:11] *** MikeFair_ joined
[23:13] <unclefester2> FROGGS: read through the backlog and agree that initializing to the default may be solution but think I may still have good test example

[23:14] *** jeffreykegler left
[23:15] <[Coke]> \o/ - tomorrow's run should have some passing moar tests.

[23:16] <timotimo> \o/

[23:16] <FROGGS> yay \o/

[23:18] <FROGGS> [Coke]: I had about ten tests that hang during a spectest run...

[23:18] <FROGGS> but since these were not always the same tests I did not fudge any of those

[23:19] <FROGGS> [Coke]: so, maybe look from time to time and kill processes that run longer than five minutes

[23:20] <[Coke]> the daily run has a ulimit timer that takes care of that.

[23:21] <timotimo> same procedure as last year, FROGGS?

[23:21] *** daniel-s_ joined
[23:21] <FROGGS> same procedure as every year, timotimo :o)

[23:24] <[Coke]> I'm doing a one-off run now, looks like it's going to take a while.

[23:25] <timotimo> probably :)

[23:25] <[Coke]> I'll gist up the results after the new years party.

[23:25] <timotimo> at least you didn't decrease the nusresy size to 5k :)

[23:34] *** MikeFair_ is now known as MikeFair

