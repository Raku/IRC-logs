[00:03] <pmurias> general VM functionality

[00:04] <pmurias> efficiency seems to imply avoiding Parrot's design ;)

[00:04] *** Chillance left
[00:06] *** cognominal left
[00:11] *** pmurias left
[00:12] *** donaldh left
[00:29] *** jeffreykegler left
[00:36] <diakopter> oh, donaldh just left

[00:38] <diakopter> NQP doesn't use Java's regex syntax for split :)

[00:40] *** hypolin joined
[00:47] <swarley> Okay, so I need to figure out first of all what a vtable's purpose is

[00:47] * swarley opens vtables.pod

[00:51] <swarley> Oh. So it's basically just a map of the functions?

[00:53] <diakopter> phenny: tell donaldh I commented on your pull request's commit

[00:53] <phenny> diakopter: I'll pass that on when donaldh is around.

[00:58] *** xilo_ left
[01:23] *** anuby joined
[01:24] *** monktopher joined
[01:25] <raiph__> swarley: http://irclog.perlgeek.de/perl6/2013-02-03#i_6407438

[01:27] <swarley> oh, so i don't have to bother with it?

[01:34] <swarley> oh seeing a parrot free implementation would be very helpful

[01:35] <diakopter> nqp-jvm...?

[01:36] <swarley> That's a little more confusing though, because it looks so simple comparatively

[01:37] <swarley> I'm so confused by lexotic in the source tree

[01:38] <swarley> Its just a sixmodelobject, with an extra long

[01:40] <diakopter> look at line 1030 of JASTCompiler.nqp

[01:41] <diakopter> QAST::OperationsJAST.add_core_op('lexotic', -> $qastcomp, $op {

[01:41] <swarley> ah

[01:43] *** bluescreen10 joined
[01:45] *** monktopher left
[01:48] *** Targen joined
[02:04] *** dayangkun left
[02:18] *** FROGGS left
[02:22] *** dayangkun joined
[02:27] <ggoebel> A bit old, but interesting on the performance considerations for languages implement on jvm... http://blog.headius.com/2011/10/why-clojure-doesnt-need-invokedynamic.html

[02:30] *** MikeFair__ left
[02:31] *** MikeFair joined
[02:32] *** FROGGS joined
[02:40] *** dayangkun left
[03:14] *** benabik joined
[03:19] *** silug left
[03:31] *** silug joined
[03:38] *** dayangkun joined
[04:17] *** Pleiades` left
[04:19] *** fgomez left
[04:20] *** fgomez joined
[04:21] *** Pleiades` joined
[04:30] *** MikeFair__ joined
[04:31] *** MikeFair__ left
[05:01] *** preflex left
[05:02] *** preflex_ joined
[05:02] *** preflex_ is now known as preflex

[05:04] *** SamuraiJack joined
[05:18] *** xinming_ joined
[05:22] *** xinming left
[05:45] *** crazedpsyc left
[05:46] *** araujo left
[05:47] *** crazedpsyc joined
[05:50] *** araujo joined
[05:53] *** rindolf joined
[05:53] <rindolf> Hi all.

[05:53] <rindolf> TimToady: hi! So why are you (= your wife and you) not coming to Israel, eventually?

[05:56] *** FROGGS left
[05:56] *** ChanServ sets mode: +o diakopter

[06:03] <sorear> diakopter?

[06:03] <phenny> sorear: 06 Feb 22:21Z <FROGGS> tell sorear that I updated the patch: https://gist.github.com/FROGGS/0a6f8e2d4053fb0ba5d0

[06:03] <phenny> sorear: 06 Feb 22:22Z <FROGGS> tell sorear ... but rerunning the spectest always gives different failing tests, is that normal? nothing related to my patch though

[06:06] <diakopter> hunh. I wonder what would cause nondeterministic behavior on mono

[06:18] *** pupoque joined
[06:27] *** jaldhar joined
[06:28] *** FROGGS[mobile] joined
[06:34] <TimToady> rindolf: we definitely plan to come to Israel eventually; just didn't work out this time, for various reasons that are OT here

[06:35] *** kaleem joined
[06:36] <_sri> the perl5/perl6 renaming discussion is heating up http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2013-02/msg00267.html

[06:38] <bonsaikitten> I don't see the problem ... ?

[06:38] <japhb> _sri, if/when Rakudo is running on JVM, would you be willing at that point to do the Mojo porting in earnest?

[06:38] <japhb> If not, what would you still be waiting on?

[06:39] <_sri> if all the primitives i need are there, sure

[06:39] <sorear> diakopter: I was just wondering what you noticed that prompted the +o

[06:39] <japhb> IIRC you need async Socket and file IO, proper signal handling, and half-decent speed ... anything else?

[06:41] *** FROGGS joined
[06:41] <FROGGS> morning

[06:42] <sorear> morning FROGGS

[06:42] <FROGGS> hi sorear 

[06:43] <sorear> FROGGS: tbh I have no idea which tests are supposed to be passing or failing.  I'd like someone else to worry about patches

[06:43] <FROGGS> japhb: would it make sense to create an blockers.md where module authors like sri could add the things that they're missing?

[06:44] <FROGGS> sorear: but I would suspect that if I make realclean, compile and run the spectest, that always the same tests pass/fail, no?

[06:44] <FROGGS> or is niecza known to not support TEST_JOBS greater 1?

[06:45] <_sri> japhb: unicode, poll() in addition to non-blocking sockets, md5/sha1, base64, hires time, (possibly zlib, openssl)

[06:45] * FROGGS takes notes

[06:47] <moritz> we have unicode, sha1 (though I don't know how well exposed), and sub-second time already

[06:47] * japhb also taking notes

[06:48] <FROGGS> I've read something about base64 too

[06:49] <_sri> threads will be rather important too i suppose

[06:50] <_sri> no clue how small things like automatic restart could work on the jvm

[06:50] <sorear> FROGGS: it might be dicey

[06:50] <sorear> use your own judgement

[06:51] <FROGGS> sorear: k

[06:53] <japhb> _sri, I would think automatic restart is a second-tier feature (really nice to have, but not critical for first phase implementation)

[07:06] <sorear> what do we mean by automatic restart?

[07:06] <sorear> SA_RESTART?

[07:06] <rindolf> TimToady: got you - regarding Israel.

[07:10] *** MikeFair left
[07:10] *** rindolf left
[07:11] *** rindolf joined
[07:11] *** Pleiades` left
[07:13] <_sri> japhb: those second tier features matter though, i'm not interested in experiments, if i port mojolicious it's going to be the real deal :)

[07:16] *** Pleiades` joined
[07:18] <japhb> _sri, Sure, I understand that.  I wasn't talking about an experiment.  I was just saying, once the other prereqs are in place, you can start the porting work while we figure out how to support stuff like automatic restart.  I'm basically trying to figure out what the critical path is -- the stuff you need before you can even start, so that then we can work in parallel with you.

[07:21] *** rindolf left
[07:29] *** pupoque left
[07:40] *** quester joined
[07:45] <dalek> niecza: 5f89e5f | (Tobias Leich)++ | lib/CORE.setting:

[07:45] <dalek> niecza: "borrow" rakudos method Match.gist

[07:45] <dalek> niecza: review: https://github.com/sorear/niecza/commit/5f89e5f608

[07:51] <sorear> FROGGS++

[07:51] <FROGGS> thanks

[07:52] <FROGGS> my problems might be about the mono framework, I get System.TypeLoadException's on random test files, but it works well when rerunning these tests manually

[08:00] *** hulu joined
[08:03] *** nebuchadnezzar left
[08:03] <hulu> r: sub A (Int $k, Int $g) { $k+$g;}; say A(3,1);

[08:03] <p6eval> rakudo cc7e3d: OUTPUT¬´4‚ê§¬ª

[08:03] <hulu> r: sub A (Int $k, Int $g) { $k+$g;}; say A(3,1);say .chars, " digits starting with ", .substr(0,50), "..." given A(2,1);

[08:03] <p6eval> rakudo cc7e3d: OUTPUT¬´4‚ê§1 digits starting with 3...‚ê§¬ª

[08:04] <hulu> what does 'given A(2,1)' mean?

[08:04] *** quester left
[08:05] *** FROGGS[mobile] left
[08:06] <tadzik> http://sourceware.org/ml/glibc-cvs/2013-q1/msg00115.html reminds me of a test in roast I once fixed :P

[08:06] <FROGGS> nr: say "abc123def" ~~ /\w $( 11*11+2 ) \D/

[08:06] <p6eval> rakudo cc7e3d, niecza v24-19-g5f89e5f: OUTPUT¬´ÔΩ¢c123dÔΩ£‚ê§‚ê§¬ª

[08:06] <FROGGS> nr: say "abc123def" ~~ /\w ( $( 11*11+2 ) ) \D/

[08:06] <p6eval> rakudo cc7e3d, niecza v24-19-g5f89e5f: OUTPUT¬´ÔΩ¢c123dÔΩ£‚ê§ 0 => ÔΩ¢123ÔΩ£‚ê§‚ê§¬ª

[08:06] <FROGGS> nr: say "abc123def" ~~ /\h/

[08:06] <p6eval> rakudo cc7e3d, niecza v24-19-g5f89e5f: OUTPUT¬´#<failed match>‚ê§¬ª

[08:06] <FROGGS> k

[08:10] *** brrt joined
[08:19] <brrt> hi #perl6

[08:20] <FROGGS> hi brrt 

[08:20] <brrt> hi FROGGS

[08:24] *** domidumont joined
[08:24] *** domidumont left
[08:25] *** nebuchadnezzar joined
[08:25] *** domidumont joined
[08:31] *** domidumont left
[08:32] *** domidumont joined
[08:42] *** sqirrel joined
[08:43] <GlitchMr-> r: https://gist.github.com/GlitchMr/4729567

[08:43] <p6eval> rakudo cc7e3d: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Two terms in a row‚ê§at /tmp/2t8QLfKUjo:1‚ê§------> [32mhttps[33m‚èè[31m://gist.github.com/GlitchMr/4729567[0m‚ê§    expecting any of:‚ê§        argument list‚ê§        postfix‚ê§        infix or meta-infix‚ê§        infix stopper‚ê§        stateme‚Ä¶

[08:43] <GlitchMr-> r: https://gist.github.com/4729567

[08:43] <p6eval> rakudo cc7e3d: gist not found

[08:43] <GlitchMr-> Makes... uhmmm... sense

[08:46] <GlitchMr-> my $page = `curl -s $program`;

[08:46] <GlitchMr-> This is so flawed

[08:47] <GlitchMr-> I'm going to fix this

[08:48] <GlitchMr-> Would adding WWW::GitHub::Gist to evalbot be allowed?

[08:51] *** daxim joined
[08:54] *** odoacre joined
[08:55] <moritz> GlitchMr-: if there's a debian package for it, or you build one (not hard with dh-make-perl), yes

[08:56] <GlitchMr-> I guess not then

[08:57] <GlitchMr-> I have WWW::GitHub::Gist package on my system (Arch), but I couldn't find one for Debian.

[08:58] <GlitchMr-> It should be libwww-github-gist-perl, right?

[08:58] <moritz> right

[08:59] <GlitchMr-> https://aur.archlinux.org/packages/perl-www-github-gist/

[08:59] <moritz> dh-make-perl automatically makes the right package name for you

[08:59] <GlitchMr-> Oh wait, I forgot I made that package for Arch.

[09:01] <GlitchMr-> Last time I've tried to make package using dh-make-perl, I have failed.

[09:01] <GlitchMr-> But perhaps it's just because I couldn't use it properly.

[09:01] <moritz> well, on Debian lenny it was buggy as hell

[09:02] <moritz> on wheezy (testing) it worked fine for me every time

[09:02] *** hoelzro|away is now known as hoelzro

[09:04] <GlitchMr-> Well, I will try to make Debian package

[09:04] <GlitchMr-> First, I will try to install dh-make-perl on Arch.

[09:05] <GlitchMr-> ... it has so many dependencies... could be fun

[09:06] *** fhelmberger joined
[09:13] <moritz> just run it on feather

[09:13] <GlitchMr-> Makes sense

[09:14] <moritz> I wouldn't try to create arch packages on Debian either :-)

[09:16] <GlitchMr-> Some people do

[09:16] <GlitchMr-> Except Arch packages are like 20 times less complex

[09:17] <arnsholt> o/

[09:17] <GlitchMr-> wow fun

[09:17] <GlitchMr-> libperl-perl_5.17.3-1_i386.deb

[09:17] <GlitchMr-> It made wrong package

[09:18] <GlitchMr-> glitchmr@feather ~/libww> cpan2deb Some::Module

[09:18] <GlitchMr-> I can blame myself, lol

[09:20] <bonsaikitten> I think this is the point where I look down on anyone and make rude noises? ;)

[09:20] <GlitchMr-> Can't locate Moo.pm

[09:20] <GlitchMr-> Except libmoo-perl appears to exist. I guess it's simply not installed.

[09:20] * moritz installs it

[09:21] <moritz> ... except that I have to apt-get update first, because the package files are so out of date that the URLs are 404s now

[09:21] <GlitchMr-> Dependencies are so fun

[09:21] <GlitchMr-> (actually, I could install it myself, but whatever)

[09:22] <GlitchMr-> thanks

[09:22] <moritz> ...except that I first had to fix the sudo secure_path thingy

[09:22] <moritz> ... installed

[09:23] <GlitchMr-> libwww-github-gist-perl_0.17-1_all.deb

[09:23] <GlitchMr-> Sounds good

[09:23] <GlitchMr-> Except the package appears to install in /home/glitchmr

[09:23] <GlitchMr-> ...

[09:24] <moritz> heh, do you have local::lib in effect?

[09:24] <GlitchMr-> Yeah

[09:24] <GlitchMr-> https://wiki.archlinux.org/index.php/Perl_Package_Guidelines#Hardened_Example

[09:24] <GlitchMr-> That could be of help

[09:24] <GlitchMr-> To be exact export part

[09:25] <GlitchMr-> export PERL_LOCAL_LIB_ROOT="/home/glitchmr/perl5";

[09:25] <GlitchMr-> export PERL_MB_OPT="--install_base /home/glitchmr/perl5";

[09:25] <GlitchMr-> export PERL_MM_OPT="INSTALL_BASE=/home/glitchmr/perl5";

[09:25] <GlitchMr-> Sounds like local::lib

[09:25] <moritz> ~moritz/libwww-github-gist-perl_0.17-1_all.deb installs to /usr/share/perl5/

[09:26] <GlitchMr-> Well, ok, then

[09:26] <GlitchMr-> So the package already exists now

[09:27] <moritz> yes

[09:27] <GlitchMr-> Anyway, I will go away now

[09:27] *** hulu left
[09:28] <GlitchMr-> I will update evalbot later

[09:28] *** b1rkh0ff left
[09:30] * moritz upgrades some packages on feather

[09:41] *** dayangkun left
[09:45] *** Psyche^ joined
[09:49] *** Patterner left
[09:49] *** Psyche^ is now known as Patterner

[09:50] <jnthn> morning o/

[09:51] <brrt> hi jnthn

[09:54] *** dakkar joined
[09:57] <jnthn> ggoebel: Thanks for the link; I'm aware of that blog, it's full of interesting stuff :)

[09:59] <FROGGS> hi jnthn 

[10:01] <jnthn> FROGGS: Plesae undo 1fb778f. Most HLLs don't have sigils/twigils.

[10:01] <jnthn> Or at least many

[10:01] <jnthn> And it should be handled differently in NQP and Perl 6 anyway I suspect

[10:01] <jnthn> In Perl 6 they're probably meant to be a grammatical category really.

[10:02] *** mathw joined
[10:04] *** Pleiades` left
[10:07] <FROGGS> jnthn: will do

[10:08] *** Pleiades` joined
[10:09] <jnthn> Thanks

[10:09] <jnthn> FROGGS++ # fixing the $(...) handling otherwise :)

[10:09] <FROGGS> I thought HLL is just there for Perl6, totally my fault √≥.√≤

[10:11] <jnthn> FROGGS: No, it's meant to be more generic :)

[10:11] <jnthn> So...where did I get to before I went to Stockholm for $dayjob task... :)

[10:12] <FROGGS> getting old ehh? :P

[10:12] <moritz> jnthn: you wanted to think about my idea for a callback when QAST::Compiler encounters a non-Want node in void context

[10:12] <moritz> (among other things)

[10:12] <jnthn> Ah, yes.

[10:12] <jnthn> I was also playing with multiple dispatch in NQP.

[10:13] <jnthn> And then blocked on a design issue, which my notebook seems to have an answer to, figured out on some train journey.

[10:13] <arnsholt> And I failed at bootstrapping

[10:13] <jnthn> moritz: My worry is that QAST::Compiler feels quite late.

[10:14] <jnthn> But maybe that's not entirely a problem...

[10:14] <moritz> jnthn: you mean, because we might invest time in optimizing the statements, and later we discard them anyway?

[10:15] <jnthn> moritz: More that we're pushing those warnings a long way down the compilation pipeline. At the moment, the optimizer is the last thing that is meant to complain; if you manage to make QAST::Compiler complain in some way then you fed it bad QAST.

[10:16] <jnthn> moritz: Also I'm wondering if the optimizer should be tracking void context 'cus it'd be useful in general and because it probably can do so quite reliably.

[10:17] <jnthn> I mean, the entire statement list handling of void context in QAST::Compiler is fairly well encapsulated in compile_all_the_stmts.

[10:17] <jnthn> It's not so hard to steal that into visit_stmts or so.

[10:20] <jnthn> arnsholt: I should probably figure that out before I work more on NQP...

[10:21] <moritz> jnthn: reimplementing void context tracking is what I wanted to avoid. But you're right, it makes sense to do it in the optimizer already

[10:22] *** spider-mario joined
[10:22] *** hulu joined
[10:23] * jnthn merges the arnsholt branch to see how it explodes

[10:23] <arnsholt> jnthn: In hindsight, I should've done the REPR compose stuff directly on master and merged back, yeah

[10:23] <jnthn> ah, yeah...

[10:24] <arnsholt> jnthn: In the end I did manage to get it merged and update the bootstrap, but when I tried to compile Rakudo, it failed at compiling the setting...

[10:24] *** anuby left
[10:24] <jnthn> ok

[10:25] *** kivutar joined
[10:29] *** hulu left
[10:33] <jnthn> arnsholt: OK, got an NQP build with your branch merged in that passes tests. Going to try out Rakudo now.

[10:33] <arnsholt> Cool

[10:35] <jnthn> Is there a Rakudo branch I need to merge also?

[10:36] <arnsholt> Oh, right. Yes, there is. Same name as the NQP branch

[10:36] <arnsholt> (Updates to storage_spec.h and sixmodelobject.h)

[10:37] <jnthn> And to the repr compose stuff :)

[10:37] <arnsholt> Oh, durr. That's it, isn't it

[10:38] <arnsholt> Weird that it didn't crop up when I was working on my branch though

[10:39] * jnthn watches it do the setting and waits for it to fail

[10:39] * nwc10 wonders why there is no mention of people working on PHP atop PyPy, depsite the project being very active: https://bitbucket.org/fijal/hippyvm

[10:39] <jnthn> Gets quite a way in...

[10:39] <nwc10> optimist

[10:40] *** salv0 joined
[10:40] <jnthn> arnsholt: So, uh.

[10:40] <jnthn> arnsholt: The build succeeded here.

[10:40] <arnsholt> Weird...

[10:40] * jnthn runs spectest

[10:41] <timotimo> "wait. you're saying what i did works?!

[10:41] <arnsholt> Push away, I guess. How did you go about it?

[10:41] <jnthn> All I said was it didn't break the build ;-)

[10:42] <arnsholt> Less broken than my attempts, which is a definite improvement =)

[10:42] <jnthn> arnsholt: Commented out the repr_compose call in NQP, re-bootstrapped, merged your branch, re-enabled repr_compose, make test in NQP (pass), make install. Then get latest Rakudo, merge your branch there and build :)

[10:43] <arnsholt> Huh. More or less what I ended up doing as well

[10:43] <jnthn> Oddness

[10:43] <arnsholt> Or at least what I intended to do. We'll see when I look at the commits

[10:44] <arnsholt> Oh, you should probably bump NQP_REVISION since you've merged the Rakudo branch

[10:44] <arnsholt> (If you haven't already)

[10:45] <jnthn> Yes, I shall before I push :)

[10:46] <arnsholt> Good, good

[10:46] <jnthn> spectest looks good

[10:47] <arnsholt> Good, good. Odds are I did something weird, then =)

[10:47] <dalek> Heuristic branch merge: pushed 42 commits to nqp by jnthn

[10:47] <dalek> rakudo/nom: f7a5a2f | (Arne Skj√¶rholt)++ | src/ (4 files):

[10:47] <dalek> rakudo/nom: Start integrating with native size support in NQP.

[10:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f7a5a2f3b7

[10:47] <dalek> rakudo/nom: c7fe112 | (Arne Skj√¶rholt)++ | src/Perl6/Metamodel/NativeHOW.pm:

[10:47] <dalek> rakudo/nom: Fix braino. NativeHOW sent bad data to the REPR compose.

[10:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c7fe112410

[10:47] <dalek> rakudo/nom: e079812 | (Arne Skj√¶rholt)++ | / (12 files):

[10:47] <dalek> rakudo/nom: Merge branch 'nom' into dyncall-sized-num

[10:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e0798124ca

[10:47] <dalek> rakudo/nom: 3b135f5 | (Arne Skj√¶rholt)++ | src/Perl6/Metamodel/NativeHOW.pm:

[10:47] <dalek> rakudo/nom: Make NativeHOW set float as well as integer bitsize.

[10:47] <dalek> rakudo/nom: 

[10:47] <dalek> rakudo/nom: Since NativeHOW is used for all native types (int, num, str) we don't know a

[10:48] <dalek> rakudo/nom: priori whether we're setting the bitwidth of an int of a float. So we set

[10:48] <dalek> rakudo/nom: both.

[10:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3b135f58f1

[10:48] <dalek> rakudo/nom: 80dc914 | (Arne Skj√¶rholt)++ | src/binder/sixmodelobject.h:

[10:48] <dalek> rakudo/nom: Update sixmodelobject.h.

[10:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/80dc914c06

[10:48] <dalek> rakudo/nom: e59ba28 | jnthn++ | src/ (4 files):

[10:48] <dalek> rakudo/nom: Merge remote-tracking branch 'origin/dyncall-sized-num' into nom

[10:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e59ba28f35

[10:48] <dalek> rakudo/nom: fc3f0d8 | jnthn++ | tools/build/NQP_REVISION:

[10:48] <dalek> rakudo/nom: Bump NQP_REVISION for natives improvements.

[10:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fc3f0d87d4

[10:48] <timotimo> happy spam! :)

[10:49] <arnsholt> Yaaaay!

[10:49] <jnthn> arnsholt++

[10:49] <arnsholt> jnthn++ # Fixing my problems =)

[10:50] <timotimo> maybe i won't have to worry about process interop with a python shim for zmq any more :P

[10:50] <arnsholt> Well, we'll still have to wrap ZMQ

[10:50] <arnsholt> But that should be feasible now, as opposed to before

[10:50] <timotimo> indeed

[10:51] <jnthn> arnsholt: So out of this, we get properly working sized int/num attributes in P6opaque, and sized types in C structs and C arrays for NativeCall? :)

[10:52] <arnsholt> Barring any stupid bugs in my code, that's the general idea, yeah

[10:52] <jnthn> \o/

[10:53] <moritz> \o/ indeed

[10:53] <timotimo> \o/

[10:59] <dalek> nqp: a0bba92 | (Tobias Leich)++ | src/ (3 files):

[10:59] <dalek> nqp: move sigil/twigil back into place

[10:59] <dalek> nqp: 

[10:59] <dalek> nqp: Because HLL is meant for general purpose,

[10:59] <dalek> nqp: Perl 6 specifica should stay in Perl 6 world.

[10:59] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a0bba921d1

[11:01] <nwc10> yes, that merge got rid of the uninialized warnings for thingy .bits

[11:02] <jnthn> FROGGS++ # thanks

[11:03] <FROGGS> of course

[11:04] <arnsholt> nwc10: Excellent! Any of those remaining would indeed be bugs

[11:10] <masak> good afternoon, #perl6

[11:11] <FROGGS> hi masak 

[11:11] <jnthn> o/ masak

[11:13] <sorear> o/ masak

[11:17] <arnsholt> Git is nice, but I think GitHub is an important part of the killer app part of software success there

[11:17] <spider-mario> I think I prefer bitbucket

[11:18] *** SmokeMachine joined
[11:19] <arnsholt> I haven't really used BitBucket much, to bo honest

[11:19] <arnsholt> Probably should

[11:20] <masak> arnsholt: totally agree about git+github. it's like they feed each other's success. either is better with the other.

[11:20] <arnsholt> Yeah. The UX of GitHub is very good, which complements (and alleviates, in some cases) the arcaneness of plain git

[11:23] *** Pleiades` left
[11:25] <masak> git, arcane? never! :P

[11:25] <moritz> just low-level, and, hysterical raisins

[11:25] <tadzik> bitbucket is nice, as it has free private repos

[11:26] <moritz> I find myself needing them very rarely

[11:26] <moritz> for p6cc I used one (but hosted on my own server)

[11:27] <spider-mario> I use them quite much

[11:27] <spider-mario> for example for school projects

[11:27] *** Pleiades` joined
[11:29] <arnsholt> Yeah, for work and school private stuff I just put them on my work area with SSH access

[11:30] <masak> I just got my 100th repository.

[11:30] <masak> on github.

[11:30] <moritz> masak++

[11:30] <masak> I basically use it as a distributed hard drive.

[11:35] <dalek> rakudo/nom: 4fb07b1 | (Tobias Leich)++ | src/Perl6/Actions.pm:

[11:35] <dalek> rakudo/nom: remove circumfix:sym<sigil>

[11:35] <dalek> rakudo/nom: 

[11:35] <dalek> rakudo/nom: This was already moved to method variable.

[11:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4fb07b1627

[11:36] *** kivutar left
[11:36] *** brrt left
[11:42] *** jerome left
[11:43] *** jerome joined
[11:43] <masak> quote from Tom Dale of Ember (a JavaScript client-side framework): "We do a lot of magic, but it‚Äôs good magic, which means it decomposes into sane primitives."

[11:43] <masak> that's how I feel about Perl 6.

[11:44] *** hypolin left
[11:52] *** kivutar joined
[11:59] *** xdbr joined
[12:02] *** kivutar left
[12:15] *** brrt joined
[12:21] <grondilu> rn: say <1/3>.WHAT

[12:21] <p6eval> niecza v24-19-g5f89e5f: OUTPUT¬´Rat()‚ê§¬ª

[12:21] <p6eval> ..rakudo 4fb07b: OUTPUT¬´Str()‚ê§¬ª

[12:22] <dalek> nqp: 3089165 | jnthn++ | src/QAST/Operations.nqp:

[12:22] <dalek> nqp: Add some ops for capture manipulation.

[12:22] <dalek> nqp: 

[12:22] <dalek> nqp: This will enable porting of most of the multi-dispatch code to NQP.

[12:22] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3089165aa0

[12:22] <dalek> nqp: 38070ee | jnthn++ | src/stage0/ (9 files):

[12:22] <dalek> nqp: Update bootstrap for new ops.

[12:22] <dalek> nqp: review: https://github.com/perl6/nqp/commit/38070ee34c

[12:22] <dalek> nqp: 7a83b54 | jnthn++ | src/ (2 files):

[12:22] <dalek> nqp: Port multi-dispatch logic to NQP.

[12:22] <dalek> nqp: 

[12:22] <dalek> nqp: Not wired up for use in the dispatch yet, but a little testing seems to

[12:22] <dalek> nqp: show it does the right kind of thing.

[12:22] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7a83b54ded

[12:22] <grondilu> n: say <1/3 0.2>¬ª.WHAT

[12:22] <p6eval> niecza v24-19-g5f89e5f: OUTPUT¬´RatStr() RatStr()‚ê§¬ª

[12:23] <grondilu> n: say .nude for <1/3 0.2>

[12:23] <p6eval> niecza v24-19-g5f89e5f: OUTPUT¬´1 3‚ê§1 5‚ê§¬ª

[12:43] *** Pleiades` left
[12:47] *** kivutar joined
[12:48] *** Pleiades` joined
[12:48] *** spider-mario left
[12:48] *** spider-mario joined
[12:51] *** SamuraiJack_ joined
[12:53] *** Targen left
[12:53] *** spider-mario left
[12:54] *** SamuraiJack left
[12:54] *** spider-mario joined
[12:56] *** SmokeMachine left
[12:58] *** SmokeMachine joined
[13:01] *** SmokeMachine left
[13:01] *** SmokeMachine joined
[13:03] <brrt> at the risk of total flamebait, whats up with ovid's suggestion to call perl 5.20 perl7?

[13:03] <tadzik> I think it's stupid

[13:04] <tadzik> Perl 5 pretending that it's Perl 6, or the successor of it, will just make everyone disappointed as hell, and bring a lot of bad marketing

[13:04] <tadzik> like "they didn't do anything for the last 12 years and now they pretend that the old is the new!" and such

[13:05] <brrt> yeah, i kind of agree

[13:06] <tadzik> as if the problem of Perl 5 was naming

[13:06] <nwc10> put lipstick on a pig, and it's still a pig

[13:07] <nwc10> and Ruby must be dead too, as it's still on version 1

[13:07] <nwc10> it's *not* the problem.

[13:07] <jnthn> And the "didn't do anything" perception is part of the problem. A bunch of the folks who think this is a good idea are very good at noticing that getting Perl 6 done is taking a long time (though maybe not following enough to even be able to answer "what progress was made in the last couple of years" and assuming it's nothing), yet oddly blind to the fact that evolving Perl 5 core seems to be a slow and painful process too (the MOP would have been great, but sadly s

[13:07] <tadzik> that too

[13:08] <brrt> for me, the problem of perl 5 is teaching

[13:08] <brrt> suppose i could teach a total newbie programming

[13:08] <brrt> i could start with some toy language, then he or she would never get anything done

[13:09] <brrt> i could start with scheme, and that person would have a splendid understanding of the first 30 years of computer science, and still not get anything done

[13:09] <brrt> or i could start with python

[13:09] <brrt> perl 5 doesn't even enter there, because there is simply too much to know

[13:09] <nwc10> jnthn: you got truncated at "sadly s"

[13:09] <jnthn> sadly seems to have run into a bunch of problems).

[13:10] *** domidumont left
[13:10] <jnthn> (I'm not implying I don't think the MOP will happen. I'd love it to. I'm just pointing out that if that happens it'll hardly have been a case of "wow, that got done quick").

[13:12] <jnthn> Woo, I seem to have ported the multi-dispatcher to NQP. Now I just need to put back the cache fast-path so things ain't omg slow.

[13:13] <jnthn> The reason for all of this, fwiw, is so that porting multiple dispatch is a case of porting a small bunch of primitives rather than having to port the entire dispatch algorithm.

[13:14] <moritz> \o/

[13:14] *** bluescreen10 left
[13:14] <FROGGS> cool

[13:14] <FROGGS> jnthn++

[13:15] <jnthn> oh, urgh

[13:16] *** nyuszika7h left
[13:16] <jnthn> Messy interaction with serialization

[13:16] <jnthn> Well, not hard to fix.

[13:16] <jnthn> But, lunch first.

[13:18] <nwc10> cool

[13:18] * nwc10 wonders what timezone jnthn is in today

[13:19] <FROGGS> 2pm here, still lunch time

[13:19] <arnsholt> I think he's in his current home TZ in Sweden

[13:19] *** mls_ joined
[13:20] <mls_> jnthn: "captueposelems"? Is that a typo?

[13:20] <jnthn> mls_: Yes.

[13:20] <jnthn> mls_: Fixed locally.

[13:20] <jnthn> Thanks ;)

[13:21] <jnthn> uh, :) even

[13:21] *** pmurias joined
[13:21] *** telex left
[13:23] *** mls_ is now known as mls

[13:23] *** telex joined
[13:25] *** nyuszika7h joined
[13:29] *** pmurias_ joined
[13:29] *** pmurias_ left
[13:30] <pmurias> I get a segfault while building nqp

[13:30] <arnsholt> That's not good

[13:30] <arnsholt> Using --gen-parrot?

[13:31] <pmurias> yes

[13:32] <pmurias> http://pastie.org/6087088

[13:32] <arnsholt> Could you try regenning with --parrot-option='--ccflags=-g' and use gdb to get a backtrace?

[13:32] <pmurias> parrot--

[13:32] <arnsholt> Not necessarily parrot

[13:33] <arnsholt> There's a lot of C code in NQP (some of which was updated earlier to day when my branch was merged) which could very well be the culprit

[13:33] <arnsholt> What platform are you on, BTW?

[13:33] <pmurias> linux

[13:34] <pmurias> 3.2.0-1-686-pae

[13:35] <arnsholt> 64-bit?

[13:36] <pmurias> 32bit

[13:36] * [Coke] stands in the corner listening to pmurias beat up on parrot.

[13:37] *** stevan_ left
[13:37] <FROGGS> hmmm, I pulled, made realclean and it did it just fine

[13:37] <FROGGS> spectests are good too

[13:39] <arnsholt> pmurias: Right. Could be a 32-bit limitation of my branch, in that case. AFAIK it's only been tried on 64-bit

[13:39] <FROGGS> 64bit here too, yes

[13:40] *** kivutar left
[13:43] <jnthn> Oh my... http://www.modernperlbooks.com/mt/2013/02/project-facepalm.html

[13:43] <jnthn> OK, I've had enough.

[13:44] <jnthn> *sigh*

[13:45] <daxim> insert "walk out of the window" image macro here

[13:45] <nwc10> jnthn: wait, his summary is acutally excellent

[13:46] <jnthn> "Contributing adult supervision to one or another Perl 6 implementation such that it's eventually usable by regular people". Really?

[13:46] <nwc10> oh, except for tat one

[13:46] <nwc10> there he is being, well

[13:46] <nwc10> this is logged, right?

[13:46] <jnthn> "Goodness knows it's more fun to write a compiler or to port a half-finished project halfway to a new virtual machine "

[13:46] <jnthn> NO THE POINT IS THAT THERE IS NO FUCKING WAY TO FINISH PERL 6 WITHOUT LEAVING PARROT BEHIND.

[13:46] <jnthn> Yes, it's logged and now I said it and it's logged and that's awesome.

[13:47] <nwc10> which, by the way

[13:47] <nwc10> has anyone actually asked him why he quit working on parrot?

[13:47] <nwc10> is that online anywhere?

[13:47] <pmurias> jnthn: I fully agree with that

[13:47] * brrt is a sad panda about it, but agrees nonetheless

[13:47] <nwc10> I believe I know the answer, but it's hearsay, so I'm not going to screw up by pasting it here

[13:48] <brrt> frustration is my guess

[13:48] <hoelzro> jnthn: may I ask why Perl 6 can't be completed without abandoning Parrot?

[13:49] <hoelzro> I'm not trying to provoke; I'm just curious

[13:49] <nwc10> because, sadly, it's too buggy

[13:49] <brrt> hoelzro, nobody is really maintaining parrot

[13:49] <nwc10> it doesn't have useful threading

[13:49] <FROGGS> hoelzro: most ppl dont port their modules to Perl 6 because rakudo is too slow, and now it seems that JVM is much much faster, thats why I guess

[13:49] <hoelzro> that is sad =(

[13:49] <brrt> it is maintained, but not with anywhere adequate manpower

[13:49] <nwc10> and pretty much everyone hacking on it has stopped

[13:49] <jnthn> It's too buggy and it's badly designed (or not designed) in places Perl 6 needs to work out its spec.

[13:50] <jnthn> For example, threads and async IO.

[13:50] <brrt> parrot has awesome plans for fixing the poor design

[13:50] *** kaleem left
[13:50] <brrt> but no manpower /at all/

[13:50] <pmurias> brrt: move to a different vm?

[13:50] <nwc10> the contributor and commit graphs on https://www.ohloh.net/p/parrot tell a story

[13:50] <brrt> not to mention the fact that whenever big changes appear, then OMG TESTS FAIL

[13:50] <jnthn> brrt: Yes, that's a sign of fragility.

[13:51] *** benabik left
[13:51] <brrt> yes, unfortunately, you cannot really remove fragility one piece at a time

[13:51] <pmurias> arnsholt: http://pastie.org/6087201

[13:52] <daxim> okay, cool to know about what youall just said

[13:52] <brrt> nwc10, looks at the timeline of those graphs :-)

[13:53] <nwc10> look at the last year

[13:53] <jnthn> We *really* need to get our async IO and threading story sorted out. There's no way I can even try to work on those things on Parrot. A port to the JVM is quicker than trying to get Parrot to do enough of the things - assuming it was even feasible.

[13:53] <nwc10> I'm pretty confident that pretty much every piece of the parrot design is, with hindsight, roughly, wrong.

[13:54] <nwc10> that's pretty sweeping, I know

[13:54] <brrt> nwc10, not every piece

[13:54] <nwc10> there are far too many ops

[13:54] <nwc10> the ops are implemented in C, so are opaque to any analsysis or JIT

[13:54] <brrt> although there are quite a few unlucky tradeoffs

[13:54] <brrt> polymorphic ops, now that is a pain

[13:54] *** shinobicl joined
[13:55] <nwc10> there's no coherent IO/signals/events/GC/concurrency story

[13:55] <arnsholt> pmurias: Right, so a segfault in P6opaque's gc_mark. That's one of the files I've touched

[13:55] <brrt> jnthn, i wonder how threads and a mutable view of code / classes is going to work out

[13:56] <brrt> suppose i have two threads, one in a highly optimised runloop calling foo.bar();

[13:56] <[Coke]> I find the irony levels at "Handwringing over what should have been or might have been doesn't do much" nearly toxic.

[13:56] <[Coke]> jnthn++ for making rakudo move.

[13:56] <brrt> and another thread replacing foo's bar() with some other reference because monkeypatching lolz

[13:56] <nwc10> his block is toxic.

[13:56] <nwc10> gah.

[13:56] <nwc10> blog

[13:57] *** Targen joined
[13:57] <jnthn> brrt: It's mostly a cache invalidation problem.

[13:57] *** skids left
[13:58] <brrt> yes, but how do you know which caches rely on which threads?

[13:58] <brrt> if you have no threads, then you invalidate the cache next time you enter the scope

[13:58] <pmurias> can't monkeypatching just invalidate all caches

[13:58] <pmurias> ?

[13:58] <brrt> only if you know where all caches are

[13:59] <arnsholt> pmurias: Do you happen to remember roughly which NQP revision you started from that still worked?

[13:59] <brrt> some of them might be inline (you'd like them to be, anyway)

[13:59] <nwc10> if there are no Perl 6 level locks between the code in the tight loop, and the code in the other thread doing the monkeying, then the order in which they run is indeterminate

[13:59] <nwc10> so, it's not wrong for the tight loop to run to completion before "seeing" the change

[14:00] <nwc10> as long as the interpreter state remains consistent enough not to crash

[14:00] <arnsholt> pmurias: Or actually, try checking out 2c13753ac8. If that one works, git bisect and try to find which commit is bad

[14:00] <nwc10> wonky code is going to ack wonky

[14:00] <brrt> right, but that means that locking also means 'check all caches'

[14:00] <brrt> for code that is unlikely to happen anyway

[14:01] <nwc10> it might be as simple as "check a flag that says that 'something happened'"

[14:01] <nwc10> and at that point, call out to the slow code

[14:01] <brrt> hmm

[14:01] <brrt> a thread cache flag

[14:01] <brrt> fair enough actually

[14:01] <nwc10> which *does* the real work of figuring out the significance of what needs changing

[14:01] <nwc10> it's roughly how Perl 5 safe signals work

[14:01] <nwc10> there's a "whoaaah" flag

[14:01] <jnthn> It all depends on how soon the other thread needs to reflect the change also.

[14:02] <nwc10> which is all that gets checked

[14:02] <brrt> in theory, after a synchronisation point

[14:02] <brrt> which also means that if i have two threads, and one of 'm monkey-patches, the other might /never/ see the monkey-patch

[14:03] <brrt> which is fine by me, but you're going to receive bug reports about that

[14:03] <jnthn> Code that you're currenlty in the middle of executing being invalidated will always be a tricky problem.

[14:04] *** zos joined
[14:04] <jnthn> Of note, trying to decide where you were in the optimized version so you can work out the correct PC in the unoptimized version when you fall back out to it could be all kinds of fun.

[14:04] *** zos left
[14:05] <pmurias> would it be possible to setup automatic building and testing of nqp revisions?

[14:05] <jnthn> otoh, there's plenty (or at least some) literature out there on on stack replacement and so forth

[14:05] <pmurias> s/revisions/commits/

[14:05] <brrt> v8 can do it :-) so can we

[14:05] <jnthn> brrt: It's doable, just hard :)

[14:06] <jnthn> pmurias: Yes, it just needs somebody with tuits to do it...

[14:06] <nwc10> pmurias: "yes". But was that you volunteering to try?

[14:06] <brrt> the enviroment of the jvm could (should) theorethically make it somewhat easier

[14:06] <brrt> whats tuits

[14:06] <brrt> found it

[14:07] <decasm> upscale bbq? that sounds ... backwards.

[14:07] <jnthn> brrt: A terrible but great pun :)

[14:07] <pmurias> nwc10: I could to try to help with that, I'm not sure what's needed

[14:07] <arnsholt> Yeah, some kind of CI system for NQP and Rakudo would be neat

[14:07] <brrt> i like it

[14:07] *** SmokeMachine left
[14:07] <arnsholt> Or even a distributed manual one like cpantesters

[14:08] <pmurias> arnsholt: that commit worked

[14:08] <arnsholt> Awesome. Have you used git bisect before?

[14:08] <pmurias> no

[14:08] * pmurias looks at the manual

[14:09] <arnsholt> It's pretty straightforward, and the manual is useful (as opposed to other parts of git)

[14:10] <pmurias> I generally find the git manual usefull provided I roughly now what I want to do

[14:10] <arnsholt> True, true. I'm getting more used to it now

[14:14] <BooK_> tadzik: there's a better way to do a multilingual act website for plpw

[14:14] <arnsholt> git bisect is ridiculously magicsauce, anyways

[14:14] <tadzik> BooK_: 2 templates, eh?

[14:15] <tadzik> maybe someone will pick it up, I githubbed our act files recently

[14:15] <BooK_> <t><en>stuff in Engligh</en><pl>stuff in polish</pl></t>

[14:15] *** Targen left
[14:15] <tadzik> oh

[14:15] <tadzik> kewl

[14:15] <BooK_> although that assumes there's a po/pl.po file

[14:15] <tadzik> I'll wait for pl.po to show up though

[14:15] <tadzik> right

[14:16] <pmurias> tadzik: is there a website for the polish perl workshop?

[14:16] <tadzik> pmurias: aye

[14:16] <tadzik> http://act.yapc.eu/plpw2013/

[14:17] *** PacoAir joined
[14:17] <BooK_> updating the yapceurope.org web site ATM

[14:19] <jnthn> Aww, dang, I wanted to be first person to register for plpw but registration isn't turned on yet ;)

[14:23] <pmurias> jnthn: are you attending?

[14:23] <jnthn> pmurias: Yeah, I will do :)

[14:23] <[Coke]> jnthn++ # awesome beard of perl+1.

[14:24] <dalek> perl6-roast-data: b584f99 | coke++ | / (4 files):

[14:24] <dalek> perl6-roast-data: today (automated commit)

[14:24] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/b584f99e04

[14:24] <dalek> perl6-roast-data: 5d349e4 | coke++ | / (4 files):

[14:24] <dalek> perl6-roast-data: today (automated commit)

[14:24] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/5d349e400b

[14:25] *** Targen joined
[14:26] <tadzik> jnthn: it'll open as soon as we have the financial backend settled up, which would probably be friday or caturday :)

[14:26] <tadzik> I'll notify everyone, fear not ;)

[14:27] * FROGGS .oO( purr purr - its caturday! (finally) )

[14:29] *** cognominal joined
[14:29] <[Coke]> hey, no grant submittals this past time period. Be nice if we had some perl6 submittals to consider.

[14:29] <[Coke]> (for the regular process, not the hague process)

[14:33] *** domidumont joined
[14:34] <pmurias> arnsholt: I didn't do a make clean every time and bisect found nothing

[14:36] <arnsholt> Weeeird.

[14:37] <pmurias> there seem to be a lot of warnings while building

[14:37] <arnsholt> Yeah. Most of them are stuff like returning aggregates, which isn't actually problems

[14:38] <pmurias> shouldn't we turn them off then?

[14:38] <pmurias> if we ignore some of them all are useless

[14:38] <arnsholt> Most of our cflags come from Parrot

[14:40] *** arlinius joined
[14:45] <[Coke]> ... which in turn come from p5.

[14:47] <arnsholt> pmurias: But that's odd. Does checking out HEAD^ and doing a clean make work?

[14:47] <pmurias> hmm HEAD and make clean, make doesn't work

[14:48] <decasm> @blame royt

[14:49] *** decasm left
[14:50] <pmurias> arnsholt: I'm repeating the bisect wit make clean;make

[14:50] <arnsholt> Ah, even better. Thanks!

[14:50] <pmurias> waiting for all those revisions is really boring tho

[14:50] <arnsholt> Yeah

[14:51] <pmurias> what would we need to have them built automatically?

[14:52] <arnsholt> A CI server of some kind, probably

[14:53] <arnsholt> Hmm. Maybe we could be able to do something with Travis CI?

[14:53] *** xdbr left
[14:54] *** xdbr joined
[14:58] *** stopbit joined
[14:59] *** SmokeMachine joined
[14:59] <rurban> pmurias: debugging parrot?

[15:00] <rurban> Is DEBUGGING defined?

[15:02] <arnsholt> The segfault is while compiling NQP, and since we've recently merged a branch that involves a fair amount of changes to our C code (and C-side memory diddling) I suspect the bug is in my NQP changes

[15:02] *** stevan_ joined
[15:02] *** domidumont left
[15:02] <rurban> I tested it before (with asan)

[15:03] <arnsholt> It == Travis?

[15:03] *** domidumont joined
[15:03] <rurban> nqp and parrot

[15:03] *** xdbr left
[15:03] <arnsholt> Oh. I suspect the bug may be related to wordsizes or something like that

[15:03] <rurban> I'll have it soonish

[15:04] <arnsholt> I've implemented support for sized native variables in NQP, and it's probably only been tested on 64-bit machines

[15:04] <arnsholt> So I wouldn't be surprised if there's something that doesn't work right on 32-bit, which is what pmurias has

[15:04] <rurban> Oh, thats' on 32bit?

[15:04] *** SunilJoshi joined
[15:04] *** xdbr joined
[15:07] <arnsholt> Yeah, my suspicion is 32-bit/64-bit shenanigans. But it'd be wonderful if you gave it a whack

[15:07] <arnsholt> If it breaks, it disproves my theory, for one =)

[15:08] *** shinobicl left
[15:09] <pmurias> arnsholt: 38070ee34cba4257017a9bb280c592d3a1c59002

[15:11] <pmurias> maybe I should starting using a 64-bit laptop

[15:11] *** sizz_ joined
[15:11] <arnsholt> Hmm. So it looks like it's a later commit

[15:12] <arnsholt> jnthn: Any ideas what it might be?

[15:12] *** sizz left
[15:12] *** FROGGS left
[15:14] <jnthn> arnsholt: Not immediately, but maybe some bad assumption about INTVAL's size?

[15:14] <rurban> And it would be nice if you are bullshitting parrot you'll get the facts right. There are problems but not the problems you talked about

[15:16] <arnsholt> jnthn: Yeah, that's what I thought. But for some reason pmurias's bisect turns up https://github.com/perl6/nqp/commit/38070ee34cba4257017a9bb280c592d3a1c59002 which is your bootstrap update to add the new capture ops...

[15:16] <pmurias> rurban: it's not slow?

[15:16] <rurban> Calling functions is slow, yes. But threads are working fine.

[15:16] <jnthn> lol

[15:16] <rurban> Show me a better threads implementation. The best I know

[15:16] <jnthn> arnsholt: That's really odd.

[15:17] <rurban> 64bit nqp passed with asan

[15:17] <pmurias> asan?

[15:17] <arnsholt> It's definitely weird. Makes me wish I had a 32-bit machine to try

[15:17] <rurban> address-sanitizer, a 10x faster valgrind

[15:18] * arnsholt goes digging in P6opaque.c

[15:19] <jnthn> arnsholt: I'd first look for anywhere that maybe assumes INTVAL == Parrot_int8 or so.

[15:19] <jnthn> arnsholt: I may be able to get a 32-bit environment to try this on

[15:20] <jnthn> Suspect I may have to go afk for a little bit soon though

[15:20] <arnsholt> Oh, oh!

[15:20] <arnsholt> I may see it

[15:21] <arnsholt> pmurias: Open src/6model/reprs/P6opaque.c and go to line 291

[15:22] <arnsholt> Cut that whole paragraph of code out (if(unboxed_type == STORAGE_SPEC_BP_NONE) { ... }) and paste it after the paragraph that handles alignment (if(cur_size % align) { ... })

[15:22] <pmurias> arnsholt: in which revision?

[15:23] *** skids joined
[15:24] *** FROGGS[mobile] joined
[15:24] <arnsholt> Just do it in HEAD

[15:27] <pmurias> doesn't help

[15:27] <pmurias> arnsholt: you want me to switch the 2 if statements?

[15:28] <arnsholt> Yeah, that's all

[15:29] <arnsholt> The first if clause uses cur_size, which is updated in the second if

[15:29] <arnsholt> The update should happen before the use

[15:31] <pmurias> I think I'll just start using my 64bit laptop

[15:31] <arnsholt> But then you wouldn't find my bugs! ;)

[15:33] <pmurias> that's what I hope

[15:36] *** bluescreen10 joined
[15:36] <rurban> Found now a fast 32bit machine with all tools

[15:39] *** murek1 joined
[15:40] *** domidumont left
[15:40] *** domidumont joined
[15:40] <arnsholt> rurban: Oh, that's awesome!

[15:41] *** stevan_ left
[15:46] *** stevan_ joined
[15:47] *** am0c left
[15:48] *** benabik joined
[15:50] *** SunilJoshi left
[15:51] <dalek> nqp: 51d9d8d | jnthn++ | src/QAST/Operations.nqp:

[15:51] <dalek> nqp: Argh, got typo into the bootstrap. :(

[15:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/51d9d8d24d

[15:51] <dalek> nqp: 4b213cc | jnthn++ | src/ (2 files):

[15:51] <dalek> nqp: Implement nqp::invokewithcapture.

[15:51] *** dalek left
[15:51] <jnthn> fail

[15:51] *** dalek joined
[15:51] *** ChanServ sets mode: +v dalek

[15:52] <FROGGS[mobile]> epic fail?

[15:52] <arnsholt> Yeah, I think dalek handles long-ish commit messages poorly, or something like that

[15:53] *** kaleem joined
[15:53] <jnthn> Anyway, multi dispatch in NQP is now largely written in NQP 

[15:53] <jnthn> Being called away now, will clean up in a bit

[15:54] <nwc10> yay!

[15:54] *** kaare_ joined
[15:56] <FROGGS[mobile]> jnthn: can we hope to gain a bit more performance?

[15:57] *** FROGGS[mobile] left
[15:57] *** FROGGS joined
[15:58] *** dayangkun joined
[16:05] *** nyuszika7h left
[16:08] <FROGGS> nr: $_ = "foo bar"; say m/ $( $_ ) /

[16:08] <p6eval> rakudo 4fb07b, niecza v24-19-g5f89e5f: OUTPUT¬´ÔΩ¢foo barÔΩ£‚ê§‚ê§¬ª

[16:09] *** nyuszika7h joined
[16:14] <FROGGS> nr: try { say $_ } for <1 2>

[16:14] <p6eval> rakudo 4fb07b: OUTPUT¬´Any()‚ê§Any()‚ê§¬ª

[16:14] <p6eval> ..niecza v24-19-g5f89e5f: OUTPUT¬´1‚ê§2‚ê§¬ª

[16:14] <FROGGS> nr: try say $_ for <1 2>

[16:14] <p6eval> rakudo 4fb07b, niecza v24-19-g5f89e5f: OUTPUT¬´1‚ê§2‚ê§¬ª

[16:14] *** sizz joined
[16:14] <FROGGS> nr: try { say $_ } given 2

[16:14] <p6eval> niecza v24-19-g5f89e5f: OUTPUT¬´2‚ê§¬ª

[16:14] <p6eval> ..rakudo 4fb07b: OUTPUT¬´Any()‚ê§¬ª

[16:15] *** sizz_ left
[16:15] *** cognominal left
[16:15] <benabik> r: given 2 { try { say $_ } }

[16:15] <p6eval> rakudo 4fb07b: OUTPUT¬´2‚ê§¬ª

[16:15] <FROGGS> https://rt.perl.org/rt3/Ticket/Display.html?id=111704

[16:16] <FROGGS> nr: say 'aa' ~~ /(.)$1/

[16:16] <p6eval> rakudo 4fb07b: OUTPUT¬´#<failed match>‚ê§¬ª

[16:16] <p6eval> ..niecza v24-19-g5f89e5f: OUTPUT¬´Use of uninitialized value in string context‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 1287 (warn @ 5) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 266 (Mu.Str @ 15) ‚ê§  at <unknown> line 0 (ExitRunloop @ 0) ‚ê§  at /tmp/H4s4rLV8gX line 1 (ANON @ 7) ‚ê§‚Ä¶

[16:17] *** cognominal joined
[16:17] <colomon> jnthn: is there a rakudo-friendly way to do token tuplet { '('(<digit>+) {} [<t_elem>* <stem>] ** { +$0 } <slur_end>? } yet?

[16:18] *** stevan_ left
[16:20] *** stevan_ joined
[16:21] <pmurias> rurban: any luck reproducing the problem?

[16:21] <rurban> Still compiling parrot...

[16:22] *** cognominal left
[16:23] *** murek1 left
[16:24] *** murek1 joined
[16:24] <masak> today's mini-challenge: construct a proof that 1 + 1 == 2 (in Perl 6). using any kind of addition is considered begging the question.

[16:26] <[Coke]> r: use Test; is(2, 1*2)

[16:26] <p6eval> rakudo 4fb07b: OUTPUT¬´ok 1 - ‚ê§¬ª

[16:26] <rjbs> Heh.

[16:27] <nwc10> clearly not Abigail. Abigail would have used a regular expression.

[16:27] <masak> no... :)

[16:27] <masak> I could see a regex solution actually working out as a proof.

[16:27] <masak> also, sets.

[16:27] *** brrt left
[16:27] <masak> I was thinking of this on the way home. struck by how similar the *process* of addition actually seems to the >>= operator for Haskell monads.

[16:28] *** benabik_ joined
[16:28] *** benabik left
[16:28] *** benabik_ is now known as benabik

[16:30] *** domidumont left
[16:30] <FROGGS> nr: say 'aa' ~~ /(.)$0/

[16:30] <p6eval> rakudo 4fb07b, niecza v24-19-g5f89e5f: OUTPUT¬´ÔΩ¢aaÔΩ£‚ê§ 0 => ÔΩ¢aÔΩ£‚ê§‚ê§¬ª

[16:31] *** hoelzro is now known as hoelzro|away

[16:33] *** murek1 is now known as murek

[16:34] *** murek is now known as amurias

[16:34] *** kaleem_ joined
[16:35] *** kaleem left
[16:36] <masak> was more thinking of something like this:

[16:36] <masak> r: sub set_of_size($n) { set Any.new xx $n }; say elems set_of_size(1) (|) set_of_size(1)

[16:36] <p6eval> rakudo 4fb07b: OUTPUT¬´2‚ê§¬ª

[16:37] *** thou joined
[16:38] <masak> "combine two (disjoint) sets of size 1. count the elements of the resulting set."

[16:39] *** SmokeMachine left
[16:40] <pmurias> how and when did the serialization format change?

[16:42] *** SmokeMachine joined
[16:42] <timotimo> oooh that's cool, masak

[16:45] <masak> rn: sub churn_addition($_) { return ~$0 if /^(S*0) \+ 0$/; return "S$0+$1" if /^(S*0) \+ S(S*0)$/ }; say ("S0+S0", &churn_addition ... /^S*0$/)[*-1] # using peano arithmetic

[16:45] <p6eval> rakudo 4fb07b, niecza v24-19-g5f89e5f: OUTPUT¬´SS0‚ê§¬ª

[16:45] <masak> S0+S0 reduces to SS0

[16:45] <masak> more entries welcomed :)

[16:48] *** SmokeMachine left
[16:49] <skids> r: say (1+1).is-prime; say (1+1) %% 2;

[16:49] <p6eval> rakudo 4fb07b: OUTPUT¬´True‚ê§True‚ê§¬ª

[16:49] *** Targen left
[16:50] *** kaleem_ left
[16:53] <rurban> pmurias: now at nqp...

[16:53] <masak> skids: interesting.

[16:53] <masak> skids: seems a little overkill, though :)

[16:53] <masak> (in that it involves the notion of divisibility)

[16:55] *** jeffreykegler joined
[16:58] <colomon> I liike skids' approach

[17:00] <amurias> pmurias: are you there?

[17:00] * FROGGS .oO( "YOU_ARE_HERE" )

[17:00] *** kaleem_ joined
[17:00] <timotimo> you know how we can raise awareness for perl6 and how neat the new regexes are

[17:01] <timotimo> did you see the MIT mistery hunt regex "crossword" puzzle?

[17:01] <masak> colomon: it's innovative. but one could argue that it implicitly uses addition, because divisibility rests on addition.

[17:02] <colomon> I suppose it implicitly uses == as well, by that logic.

[17:02] <masak> that's fine.

[17:02] <masak> we much have equality in order to compare things.

[17:03] <colomon> in that case, the problem is that it directly uses addition, no?

[17:03] <masak> oh! yes. that, too.

[17:03] *** daxim left
[17:03] <colomon> I kind of think the problem is actually ill-formed

[17:04] <masak> it's tantamount to printing the result of 1+1 and saying "it looks like a 2" :)

[17:04] <masak> colomon: oh?

[17:04] <masak> the task is meant to encourage the discussion "what is addition?", by the way.

[17:05] <colomon> well, on the one hand 2 is defined as the successor of 1, that is to say, 1 + 1.

[17:05] <masak> I'm also forever fascinated by the fact that it took R&W 379 pages to prove this... https://en.wikipedia.org/wiki/Principia_mathematica#Quotations

[17:06] <masak> colomon: usually the successor function isn't defined in terms of addition.

[17:06] *** benabik left
[17:06] *** benabik_ joined
[17:06] <rurban> yes, repro

[17:09] <moritz> masak: me too, because I thought that the very definition of 2 is that it's the integer successor of 1

[17:10] <masak> yes, it is.

[17:10] <masak> but why are you confusing that with addition?

[17:10] <masak> addition is a separate concept from the successor function.

[17:11] <colomon> masak: it isn't defined in terms of full addition.  It is defined in terms of adding 1

[17:11] <masak> if the fact that "successor" and "+1" feel kinda similar, feel free to prove that 2+2==4 ;)

[17:11] <FROGGS> somebody like to comment on https://rt.perl.org/rt3/Ticket/Display.html?id=77616 ?

[17:11] <masak> colomon: usually the successor function is axiomatically defined, without any mention of addition.

[17:11] <moritz> well, I learned that N (the set of integers) is defined as the smallest set which contains 0, and for all n element N, it also contains n + 1

[17:11] <rurban> nqp 380b20 still fails on 32bit

[17:12] <masak> I am surprised by this mixing-up of "adding one" and "successor". in my mind they are completely separate.

[17:12] <masak> you can count using Church numerals, for example.

[17:12] <masak> ooh, there's another way to prove it... :)

[17:13] <masak> if there is something I can do to make the task less ill-defined, let me know. to me, it's already clearly defined.

[17:14] <colomon> masak: consider http://en.wikipedia.org/wiki/Successor_function ....

[17:14] <timotimo> hm, can one create a regex object from a string in perl6?

[17:14] <timotimo> well, i guess eval. but that's not "secure"

[17:14] <jnthn> timotimo: rx/<$string>/ or so

[17:15] <timotimo> oh, good point

[17:15] <jnthn> timotimo: Creating a regex object from a string is not exactly secure ;)

[17:15] *** SmokeMachine joined
[17:15] <timotimo> hm, right :)

[17:15] <timotimo> i'll write a regex that only lets secure regex through

[17:15] <timotimo> like forbid $ signs and < >

[17:16] <masak> colomon: huh. that *is* unfortunate.

[17:16] <dalek> nqp: adbccba | jnthn++ | src/core/NQPRoutine.pm:

[17:16] <dalek> nqp: Use correctly spelled ops.

[17:16] <dalek> nqp: review: https://github.com/perl6/nqp/commit/adbccba819

[17:16] <dalek> nqp: a60560e | jnthn++ | src/stage0/ (9 files):

[17:16] <dalek> nqp: Update bootstrap.

[17:16] <dalek> nqp: 

[17:16] <dalek> nqp: Means that the first stages won't be slower due to not using the

[17:16] <dalek> nqp: cache.

[17:16] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a60560e40a

[17:16] <masak> colomon: well, consider as a counterargument https://en.wikipedia.org/wiki/Peano_axioms#Addition

[17:16] <colomon> masak: on the other hand, http://en.wikipedia.org/wiki/Peano_axioms#Addition

[17:16] <dalek> nqp: 323db25 | jnthn++ | src/ (5 files):

[17:16] <dalek> nqp: Toss a mass of now-unused C code and dead ops.

[17:16] <dalek> nqp: review: https://github.com/perl6/nqp/commit/323db25a1a

[17:16] <masak> colomon: heh :)

[17:16] <masak> colomon: clearly, in order to solve the task at all, one must choose a set of definitions that are not circular.

[17:17] <masak> so it is not the task that is ill-grounded, but Wikipedia.

[17:17] <jnthn> Circular definition: see circular definition

[17:17] <colomon> masak: but then in those terms it's not really a perl 6 task

[17:18] <FROGGS> timotimo: if you just want to match the content of a var, do it like:

[17:18] <FROGGS> r: my $var = "abc"; say "abcdef" ~~ / $( $var ) /

[17:18] <p6eval> rakudo 4fb07b: OUTPUT¬´ÔΩ¢abcÔΩ£‚ê§‚ê§¬ª

[17:18] *** domidumont joined
[17:19] <[Coke]> jnthn++ deleting code, esp. C.

[17:19] <moritz> well, or just / $var /

[17:19] <FROGGS> r: my $var = "abc"; say "abcdef" ~~ / <{ $var }> / # too

[17:19] <p6eval> rakudo 4fb07b: OUTPUT¬´ÔΩ¢abcÔΩ£‚ê§‚ê§¬ª

[17:19] <timotimo> FROGGS: no, i want to handle regexes as strings, like my $charclass = "[abc]";

[17:19] <FROGGS> ahh

[17:19] <masak> colomon: no, but it's pleasant to use Perl 6 to express thoughts, even mathematical ones.

[17:19] <PerlJam> timotimo: except that's not a character class in Perl 6  ;)

[17:19] <colomon> masak: I mean, if you claim S as your root definition and then pull in the additional definition of addition, you're asking to prove a + 1 = S(a), in perl 6.  I guess you could code a peano theorem solver in p6....

[17:20] <jnthn> PerlJam: It is if you use :P5 ;)

[17:20] <timotimo> PerlJam: excuse me, i'm context switching too much to notice ;)

[17:21] <masak> rn: my $one = -> $f, $x { $f($x) }; sub plus($m, $n, $f, $x) { $m($f, $n($f, $x)) }; say plus $one, $one, "S" ~ *, "0" # using church numerals

[17:21] <p6eval> rakudo 4fb07b, niecza v24-19-g5f89e5f: OUTPUT¬´SS0‚ê§¬ª

[17:22] <arnsholt> rurban: That's extremely weird. Have you tried to apply the change I outlined to pmurias?

[17:22] <FROGGS> timotimo: think of function calls and what not

[17:22] <masak> colomon: no, I am asking to prove S0 + S0 == SS0

[17:22] <masak> colomon: ...but I don't claim S as my root definition.

[17:22] <masak> colomon: I'm fine with any definition which doesn't rest on addition.

[17:23] <jnthn> r: multi infix:<+>('S0', 'S0') { 'SS0' }; say 'S0' + 'S0'

[17:23] <p6eval> rakudo 4fb07b: OUTPUT¬´SS0‚ê§¬ª

[17:23] <masak> :P

[17:23] *** kaleem_ left
[17:23] <masak> jnthn: that... is the most *meaningless*...

[17:24] <jnthn> .oO( I guess I didn't win today's mini-challenge... )

[17:25] <rurban> arnsholt: not yet

[17:25] <colomon> masak: then it's just S0 + S0 = S(S0 + 0) = S(S0) = SS0.  But that's really awkward to express in p6

[17:25] <masak> jnthn: you're the guy in the group who, given the challenge to be the first to shout out an aquatic animal, shouts out "an aquatic animal!" :P

[17:26] <masak> colomon: I've done it three times now in the backlog ;)

[17:26] <PerlJam> masak: By careful selection of axioms, you can prove anything.  jnthn was just being efficient.  :)

[17:26] <masak> colomon: using sets, regexes, and functions.

[17:26] <masak> PerlJam: certainly more efficient that Russell and Whitehead ;)

[17:27] * arnsholt remembers being shown how to do addition with Church numerals in Prolog

[17:28] <arnsholt> Remarkably clever and a bit stupid at the same time =D

[17:29] *** spider-mario left
[17:29] <masak> arnsholt: the big "aha!" moment for me with Church numerals and Church booleans came recently when I re-read TaPL.

[17:29] <PerlJam> masak: have you read Douglas Hofstadter's "Fluid Concepts and Creative Analogies"?

[17:30] *** spider-mario joined
[17:30] <arnsholt> TaPL?

[17:30] <masak> arnsholt: they're both really small "machines" that programmatically express the intent of a number or a boolean.

[17:30] <masak> arnsholt: http://www.cis.upenn.edu/~bcpierce/tapl/

[17:30] *** stevan_ left
[17:30] <masak> PerlJam: yes, I believe I have. though it was a while ago.

[17:31] <arnsholt> Hmm. That looks like an interesting book

[17:31] <masak> maybe I should re-read it.

[17:32] *** kst` joined
[17:34] *** kst left
[17:38] <jnthn> pmurias: If you didn't get an answer on "what changed" yet, I think it was just the REPR data that P6int and P6num write out.

[17:38] *** thou_ joined
[17:38] <jnthn> (in the serialization thing)

[17:41] *** thou left
[17:42] <jnthn> FROGGS: On 77616, I know it completely makes sense from an implementation or even a "what it does" point of view but it's probably too surprising from a user point of view.

[17:42] <jnthn> Unfortunately, I don't have much idea of a good fix.

[17:43] <rurban> parrot master: --output=src/stage1/gen/nqp-mo.pir push_pmc() not implemented in class 'ByteBuffer'

[17:44] *** fgomez left
[17:44] <FROGGS> jnthn: I'd like to know what the user would expect

[17:44] <jnthn> FROGGS: Captures to happen in the order they textually appear in the source.

[17:45] <FROGGS> brb, lunch

[17:45] <jnthn> FROGGS: Well, not happen. But be numbered in the resulting Match

[17:45] *** domidumont left
[17:45] *** domidumont joined
[17:46] *** zby_home joined
[17:51] <masak> "annual programming puzzles that get broken within a few months" -- without this having really to do with me, I'm a little offended.

[17:51] <arnsholt> I'm offended by most of the references to Perl 6 in that post, to be frank

[17:52] <masak> well, jnthn's all-caps in the backlog pretty much sums it up.

[17:52] <masak> and I actually prefer chromatic when he's bitter about the Parrot thing, as opposed to just ironically lashing out at nothing.

[17:52] <colomon> masak: pointer?

[17:52] <masak> colomon: http://www.modernperlbooks.com/mt/2013/02/project-facepalm.html

[17:52] <masak> follow that link at your own blood pressure.

[17:52] <colomon> saw that, I meant to jnthn's response # masak++

[17:52] <colomon> already read it, alas

[17:53] <masak> colomon: http://irclog.perlgeek.de/perl6/2013-02-07#i_6423589

[17:54] <masak> anyway. it's 2013, and we're actually growing alternatives to Parrot. this is good.

[17:54] *** Pleiades` left
[17:54] <japhb> At the risk of sounding like I want to be in my own bubble, could we all please start ignoring the diatribes of certain embittered folk?

[17:54] <masak> oh, I was just going to write something like that.

[17:54] <colomon> chr. sort of has a valid notion -- he's not going to work in p6 until someone else proves it's great.  That's certainly his prerogative, but it's not in any way helpful.

[17:55] *** ggoebel_ joined
[17:55] <japhb> I mean, he's welcome to keep smarting from old wounds, but I'd rather just make progress and heal through solving the real problems.

[17:55] <masak> japhb: +1

[17:55] *** nebuchadnezzar left
[17:56] *** dakkar left
[17:56] <masak> I also fully agree with http://irclog.perlgeek.de/perl6/2013-02-07#i_6423648

[17:57] <masak> it's not even so much that Parrot wasn't any help at all -- it was quite useful for a number of years.

[17:57] <skids> As far as P5 branding they should just fo the "Ruby on Rails" route and bundle all the Modern Perl modules up into one use statement and/or commandline flag and/or default and call it something and market that.

[17:57] <masak> but Rakudo is outgrowing Parrot.

[17:57] <ggoebel_> phenny: tell jnthn are you also aware of http://wiki.jvmlangsummit.com/Main_Page ? -Links to presentations and slides from previous years are linked to from http://openjdk.java.net/projects/mlvm/jvmlangsummit/

[17:57] <phenny> ggoebel_: I'll pass that on when jnthn is around.

[17:58] <masak> skids: sounds like a distribution to me. like ActiveState Perl or Strawberry Perl.

[17:59] <dalek> nqp: 6b5778e | jnthn++ | src/core/NQPRoutine.pm:

[17:59] <dalek> nqp: Toss a bit of ported C that turned out unused.

[17:59] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6b5778e216

[17:59] *** Pleiades` joined
[18:01] <colomon> I figure the best response to chromatic is just to make great software in Perl 6.  That's why I started porting the ABC module back to Rakudo this morning....

[18:02] <PerlJam> colomon++

[18:03] <skids> masak: like that, but without actually needing to "use" everything in the bundle. 

[18:03] <masak> rn: multi plus(@a, []) { @a }; multi plus(@a, [$b, *@b]) { plus [@a, $b], @b }; say elems plus [i], [i] # using multis and nested sigs

[18:03] <p6eval> rakudo 4fb07b, niecza v24-19-g5f89e5f: OUTPUT¬´2‚ê§¬ª

[18:03] <masak> four solutions. I think there's a nice blog post in here.

[18:04] <arnsholt> Ooooh, JavaZone call for speakers is finally open =D

[18:04] <arnsholt> And the deadline is April 15

[18:04] <bbkr__> FROGGS: in "abc" ~~ /a ~ (c) (b)/ match order is reversed and capture order should follow this logic so $0 should be "c". I haven't found any explicit spec phrase describing this case that but TimToady said it is a bug :)

[18:04] <arnsholt> I'm definitely going to have to submit a talk

[18:05] <masak> bbkr__: definitely a bug.

[18:05] <masak> bbkr__: the parentheses are numbered by their location in the regex.

[18:05] <masak> bbkr__: not by match order.

[18:05] <PerlJam> bbkr__: and this has *always* been the case, even before Perl 6  :)

[18:06] <jnthn> Difference in Perl 6 being that they're more tree-ish than flat and some end up as an array

[18:06] <phenny> jnthn: 17:56Z <ggoebel_> tell jnthn are you also aware of http://wiki.jvmlangsummit.com/Main_Page ? -Links to presentations and slides from previous years are linked to from http://openjdk.java.net/projects/mlvm/jvmlangsummit/

[18:07] <jnthn> ggoebel_: Thanks for that link...I'm sure I read some of those before having found them separately 

[18:07] <jnthn> ggoebel_: But it's nice to have the collection of links and more to read :)

[18:09] <arnsholt> jnthn: Are there any tricks I can use to reliably trigger a Parrot GC run?

[18:13] *** nebuchadnezzar joined
[18:13] *** bbkr__ left
[18:20] *** SmokeMachine left
[18:21] *** fhelmberger left
[18:23] *** SmokeMachine joined
[18:28] <TimToady> usually the best way to do distributed cache invalidation (under shared memory, anyway) is with an incrementing generation counter

[18:28] <TimToady> that's how Perl 5 does cache invalidation

[18:30] <TimToady> though the most important thing to prevent monkeypatching is to allow classes to be closed at CHECK time unless someone requests they stay open

[18:30] *** fgomez joined
[18:31] <jnthn> arnsholt: There's a pir op that will do it...sweep, iirc

[18:31] <dalek> nqp-jvm-prep: 23756ca | jnthn++ | / (4 files):

[18:31] <dalek> nqp-jvm-prep: Chase REPR protocol and serialization changes.

[18:31] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/23756ca7ee

[18:31] <masak> rn: say chars "‰∏Ä" ~ "‰∏Ä" # arguably, this is a solution, too.

[18:31] <p6eval> rakudo 4fb07b, niecza v24-19-g5f89e5f: OUTPUT¬´2‚ê§¬ª

[18:33] <jnthn> .u ‰∏Ä

[18:33] <phenny> U+4E00 CJK UNIFIED IDEOGRAPH-4E00 (‰∏Ä)

[18:33] <jnthn> oh, it's...one.

[18:34] *** SamuraiJack_ left
[18:34] *** stevan_ joined
[18:35] <masak> ;)

[18:35] <masak> it works with other characters, too.

[18:35] <masak> rn: say chars "‚ë†" ~ "‚ë†"

[18:36] <p6eval> rakudo 4fb07b, niecza v24-19-g5f89e5f: OUTPUT¬´2‚ê§¬ª

[18:36] <jnthn> rn: say chars "Ôòπ" ~ "Ôòπ"

[18:36] <p6eval> rakudo 4fb07b, niecza v24-19-g5f89e5f: OUTPUT¬´2‚ê§¬ª

[18:37] *** japhb_ joined
[18:40] <masak> so one CAT FACE WITH TEARS OF JOY plus one CAT FACE WITH TEARS OF JOY also equals 2 ;)

[18:41] <TimToady> rn: say chars '™ö•' ~ '™ö•'

[18:41] <p6eval> niecza v24-19-g5f89e5f: OUTPUT¬´4‚ê§¬ª

[18:41] <p6eval> ..rakudo 4fb07b: OUTPUT¬´2‚ê§¬ª

[18:42] <TimToady> that should be 8, since each of those is 4 dragons

[18:42] <masak> *lol*

[18:42] <masak> I presume that is a Nieczabug grounded in the fact that .NET can't Unicode?

[18:42] <TimToady> UTF-16 damage I think

[18:42] *** Chillance joined
[18:42] <masak> right.

[18:43] <masak> Java has the same issue.

[18:43] <jnthn> Yeah, we're gonna have that on the JVM until we get NFG done.

[18:45] * TimToady wonders how much support there is in JVM for ropes of integers of various sizes

[18:45] * masak .oO( No Frivolous Garbage )

[18:45] <TimToady> s/in JVM/available with JVM/

[18:49] <dalek> nqp-jvm-prep: 1d63164 | jnthn++ | / (2 files):

[18:49] <dalek> nqp-jvm-prep: First pass at nqp::istype.

[18:49] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/1d63164bbb

[18:49] <dalek> nqp-jvm-prep: bd77eed | jnthn++ | nqp-src/NQPCORE.setting:

[18:49] <dalek> nqp-jvm-prep: Start pulling in some of the multi-dispatch code.

[18:49] <dalek> nqp-jvm-prep: 

[18:49] <dalek> nqp-jvm-prep: This isn't the dispatcher itself, just the candidate sorting code. Need

[18:49] <dalek> nqp-jvm-prep: to implement some of the extra ops before multi-dispatch will actually

[18:49] <dalek> nqp-jvm-prep: work.

[18:49] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/bd77eeda00

[18:50] * jnthn thinks he needs some dinner before he works any more... :)

[18:50] <[Coke]> Order in, bill it to the channel. :)

[18:51] <jnthn> [Coke]: Oh, I've eaten out so much in the last few days while up in Stockholm that I'm quite happy to nom something simple at home today :)

[18:57] *** MayDaniel joined
[19:02] *** MayDaniel left
[19:09] <imarcusthis> jnthn: your work is giving me actual hope of having perl6 in production.

[19:10] <imarcusthis> jnthn: any idea how big the footprint of the runtime of perl6 on top of jvm would be? Would it be feasible for Android development, for instance? 

[19:16] *** GlitchMr- left
[19:17] *** GlitchMr joined
[19:21] <rurban> slow startup, fast run-time

[19:22] <rurban> i.e. not suitable for scripts, but good for running server or long-running apps

[19:24] <imarcusthis> rurban: not suitable for mobile apps either then.

[19:24] <rurban> well, I guess on android the jvm will startup much faster

[19:24] <rurban> because it is hot

[19:25] <jnthn> My first guess was that the question was actually about memory footprint...

[19:25] <jnthn> In which case, anything I could give would be a wild guess at this point.

[19:26] <imarcusthis> yeah, the jvm does. the question is the layer on top. For instance, jruby has a rather large one, so it gets a slow startup time if you try to build an android app on it. clojure is much smaller.

[19:26] <imarcusthis> jnthn: that's understandable.

[19:26] <rurban> My guess is even bigger than jruby

[19:26] <jnthn> rurban seems happy to guess wildly though :)

[19:26] <rurban> yes :)

[19:26] <imarcusthis> yepp :)

[19:32] *** SmokeMachine left
[19:40] * TimToady wonders how much you can bring in lazily on the first eval

[19:40] <TimToady> (assuming precompilation)

[19:41] *** sftp left
[19:41] *** grondilu left
[19:41] <TimToady> we've intentionally designed p6 with very few required globals

[19:42] *** sftp joined
[19:44] * TimToady also wonders how much we can save by caching precompiled bits at a finer granularity than the file, where caching the whole file is just a degenerate case

[19:46] <TimToady> there are really only three tricky bits to that: 1) establish the identity of a piece of unique code, 2) establish the identity of each unique slang we're using, and 3) establish the relationship between those identities

[19:46] *** shinobicl joined
[19:47] <tadzik> oh, jnthn, I left you some pull requests btw

[19:47] <tadzik> at least one of them is necessary :)

[19:47] * TimToady postulates that most failure modes would come down to failure of identity somehow

[19:47] <shinobicl> hi! i'm making a presentation in my company, to introduce TDD for a big proyect we're starting. Yes it's sad many shops don't use TDD yet :(

[19:47] <shinobicl> i remember a nice graphic of the advance in the perl6 test suite

[19:48] <shinobicl> where i can find the current one?

[19:48] <shinobicl> i want to use it as an example in my presentation

[19:49] *** SmokeMachine joined
[19:50] <TimToady> you might be reduced to searching the irclogs

[19:50] <diakopter> also, those graphics have several interpretations

[19:50] *** diakopter sets mode: -o diakopter

[19:50] <shinobicl> oh well... i'm gonna use one i found from 2009

[19:51] <shinobicl> http://perlgeek.de/blog-en/perl-6/musings-on-spectest-chart.html

[19:51] <PerlJam> shinobicl: TDD isn't appropriate for every problem either :)

[19:51] <shinobicl> on, in this case it applies. There are some ancient APIs and we have to keep compatibility with them

[19:52] *** spider-mario left
[19:52] *** SmokeMachine left
[19:52] <shinobicl> s/on/oh/;

[19:52] <diakopter> note how the "spec" portion of that graph doesn't change much except at two discontinuities

[19:53] <diakopter> shinobicl: without more granularity, we can interpret that as more passing tests were added, not more of the spec was completed

[19:54] <diakopter> we still don't know how much of the original failing spec tests are now passing

[19:54] <diakopter> (or are no longer valid)

[19:55] *** zby_home left
[19:56] <shinobicl> then is a much better example. Our customers are specially fond of making more and more requirements. So having a more specs through time is a realistic view of what happens here.

[19:56] <shinobicl> well, the old graphic will do... thanks :)

[19:57] *** jeffreykegler left
[19:58] <diakopter> note: I'm not saying more of the spec wasn't completed. ;) just that we don't know about those original 3000, so you can't use that portion to show unregression

[19:59] <diakopter> I mean, I suppose someone could run current rakudo against the spectest from 2008-05

[20:02] *** atrodo_ joined
[20:02] *** atrodo_ left
[20:10] *** Chillance left
[20:10] *** Chillance joined
[20:13] * colomon is quite upset that chromatic is spreading p6 FUD on twitter.

[20:13] * tadzik is quite upset with #perldrama

[20:15] *** domidumont left
[20:16] *** SmokeMachine joined
[20:16] <tadzik> I agree on https://twitter.com/chromatic_x/status/299566125258256384 though

[20:16] *** atrodo_ joined
[20:16] *** uvtc joined
[20:16] *** atrodo_ left
[20:16] <PerlJam> colomon: what fud this time?

[20:17] *** cognominal joined
[20:17] <dalek> niecza: 93138cc | (Tobias Leich)++ | src/NieczaActions.pm6:

[20:17] <dalek> niecza: fixed typo in warning "conext" -> "context"

[20:17] <dalek> niecza: review: https://github.com/sorear/niecza/commit/93138ccca0

[20:17] <tadzik> and he even mentions panda. I'm flattered

[20:18] <colomon> PerlJam: I'm particularly thinking of https://twitter.com/chromatic_x/status/299580714180018176

[20:18] <tadzik> Well there *was* Lorito, but that was after Parrot was already doomed by Rakudo and developers were leaving. LOL

[20:18] <tadzik> doomed by rakudo, eh

[20:18] <tadzik> waste of time reading this, and yet I continue

[20:20] <uvtc> Do both Rakudo and Rakudo Star now use "YYYY.MM" for their release version strings?

[20:20] <tadzik> I think so

[20:20] <uvtc> I remember at some point regular ints were being used. As in, "release #42".

[20:21] <PerlJam> Rakudo still does "release #42" AFAIK.

[20:21] <PerlJam> (at least it did at the last release *I* did :)

[20:21] <uvtc> I mention it because: I was just looking at a Rosetta Code example. The example said, "works with Rakudo version #xx". Seems like those would be more useful if they said "works with Rakudo version 20xx.xx".

[20:22] <_sri> the jvm might start slow, but you can use hacks like drip to make it look faster https://github.com/flatland/drip

[20:23] *** jeffreykegler joined
[20:23] <uvtc> Ok. Here. So, https://github.com/rakudo/rakudo/blob/nom/docs/announce/2013.01 is a file which, inside, says "release #60 ("Sonoma")". Seems like that would be much more useful if it just plainly said "release 2013.01".

[20:24] *** jeffreykegler left
[20:24] <masak> tadzik: yes, Parrot was clearly doomed by Rakudo. it scared away all the other HLLs that it had already... um.

[20:24] *** SmokeMachine left
[20:24] <tadzik> Apparently, being a VM for everyone was more important that being the best VM for Perl 6. And so the only customer went away

[20:24] <PerlJam> tadzik: something like that.

[20:25] <atrodo> tadzik: Wasn't that the stated goal of parrot?

[20:25] <masak> note: we're not migrating *away* from Parrot. we're just targeting a good VM in addition.

[20:25] <PerlJam> It's the curse of trying to design for an imaginary future.

[20:25] <atrodo> (to be a vm for everyone)

[20:25] <tadzik> atrodo: yes, and it failed at that goal

[20:25] <tadzik> it's what Tene++ said more than once and more than twice: no one cared about maintaing language interop

[20:26] <tadzik> so the first big goal died

[20:26] <PerlJam> atrodo: sure, but the way you do that is be a really good VM for 1 lang,  then another and another until you have "everyone"   :)

[20:26] <masak> "Parrot is a foundering project on top of a wonderful vision" http://irclog.perlgeek.de/perl6/2011-08-23#i_4316480

[20:26] <Tene> I did say that more than once.  That's accurate.

[20:27] <masak> Tene++ # pioneering language interop

[20:27] <Tene> http://blogs.gurulabs.com/stephen/2009/05/cross-language-library-loading.html

[20:27] <tadzik> yeah

[20:27] <tadzik> that was thrilling

[20:27] <masak> Tene: I would like to see that goalpost hit again some day. it's just that it won't happen on Parrot, realistically.

[20:27] *** sqirrel left
[20:29] <uvtc> Dart has a little article on their site about the value of using a general-purpose VM vs. building their own custom one: http://www.dartlang.org/articles/why-not-bytecode/ . Not sure how much of that is relevant to the parrot discussion.

[20:30] <atrodo> From where I stand, it looked like Parrot gave up on language interop to focus on rakudo, then it floundered

[20:30] <masak> atrodo: that was after it decided to target "everyone" instead of Perl 6 for several years, though.

[20:30] <Tene> atrodo: There was only one person who ever worked on language interop in Parrot.

[20:31] <masak> atrodo: part of the story is that Parrot has had several leaders/architects over the years. with different goals.

[20:31] <tadzik> atrodo: precisely. And then it said "we actually want to target everyone, not rakudo"

[20:31] <uvtc> I had the same impression of Parrot as what tadzik describes above ("being a VM for everyone").

[20:31] <tadzik> and so rakudo's goals and parrot's goals diverged

[20:31] <atrodo> Tene: Which is disappointing, because that's why I got interested in parrot

[20:31] <Tene> atrodo: Me too.

[20:31] <[Coke]> atrodo: it was floundering before that.

[20:31] <tadzik> parrot didn'd do everything to keep rakudo, so rakudo started to figure out its own solutions

[20:31] <tadzik> (as I see it)

[20:31] <FROGGS> nqp: my @a := ("a", "b", "c"); say("abc" ~~ /@a+/)

[20:31] <p6eval> nqp: OUTPUT¬´abc‚ê§¬ª

[20:32] <[Coke]> because in trying to please everyone, it was not really good anything.

[20:32] *** hoelzro|away is now known as hoelzro

[20:32] <masak> tadzik: yes.

[20:32] <[Coke]> good *at*

[20:32] <FROGGS> r: my @a = ("a", "b", "c"); say("abc" ~~ /@a+/)

[20:32] <p6eval> rakudo 4fb07b: OUTPUT¬´#<failed match>‚ê§¬ª

[20:32] <FROGGS> nqp: my @a := ("a", "c", "b"); say("abc" ~~ /@a+/)

[20:32] <p6eval> nqp: OUTPUT¬´abc‚ê§¬ª

[20:32] <FROGGS> cool

[20:33] <masak> tadzik: but even given that, chromatic was and is overreacting, framing "adding another VM" as "actively migrating away".

[20:33] <atrodo> So does that mean anything that has the same goal of parrot is doomed from the beginning?

[20:33] <masak> tadzik: when he can't do that, he frames it as "write a compiler or to port a half-finished project halfway to a new virtual machine"

[20:34] <PerlJam> atrodo: not necessarily, though I'd say the probability is high.

[20:35] <masak> tadzik: which comes across to me as "I spent so many years on Parrot, and now you go and ruin it, you... meanies!"

[20:35] <PerlJam> atrodo: but, again, it depends on how they go about accomplishing the goal.

[20:35] <diakopter> masak: let's not sugar-coat it. parrot will be left behind rather quickly.

[20:35] <[Coke]> hurm. reply to chromatic on twitter, or update the README to explain why not every implementation may not pass all the tests on any given day.

[20:35] <atrodo> masak: Honestly, I think he's just as frustrated at parrot

[20:36] <PerlJam> diakopter: maybe it will spur some good development in parrot-land?

[20:36] <colomon> diakopter: but if it is left behind, it will be because it couldn't compete with JVM.

[20:36] <atrodo> PerlJam: Without a major undertaking with tuit's, even by one person, parrot's probably done

[20:36] <atrodo> Well, that's the way I feel anyways

[20:38] <colomon> diakopter: note that I'm not saying it cannot compete with JVM.  I'm just saying for sure Rakudo will not abandon Parrot if Parrot out-performs JVM.

[20:38] <masak> diakopter: I agree. Parrot will be left behind. but the *act* of *adding another VM* shouldn't cause such panic if all was right with the original VM.

[20:38] * diakopter stops breathing for a minute

[20:38] <diakopter> (re colomon)

[20:39] <masak> colomon: I...

[20:39] <masak> colomon: that comes off as "very optimistic" at this point.

[20:40] <uvtc> Are there plans for creating a separate/different Rakudo distribution for Rakudo + JVM?

[20:40] <diakopter> a VM with 50,000 man hours is going to outperform one with a million?

[20:40] <masak> I mean, not only is Parrot crap at backward-compat, I/O, GC, threads, and API documentation, it's slooooooooouuw.

[20:40] <atrodo> diakopter: So you're saying v8 can't be faster than JVM?

[20:40] <skids> well that depends what percent of those man-hours were focused on performance :-)

[20:40] <diakopter> <sigh>

[20:40] <PerlJam> uvtc: probably the default VM will just switch to be JVM with Parrot as an option.

[20:41] <diakopter> atrodo: no, it can't. at what the JVM provides.

[20:41] <diakopter> at implementing javascript, yes.

[20:41] <uvtc> PerlJam: Ah, thanks.

[20:42] <colomon> masak: I know which way I'd bet.  I'm just pointing out that if Parrot loses out here, it will be because it isn't as good for this purpose.

[20:42] <masak> exactly.

[20:43] <masak> I remember the parrotsketch when chromatic first panicked about this.

[20:43] <diakopter> as soon as someone realizes you can build nqp+rakudo in 1/8 the time on another VM, the person will flip parrot's bit.

[20:43] <masak> already at that point, I couldn't but think that he didn't *want* to find out whether a VM such as the JVM would be a better fit for Rakudo.

[20:43] <masak> as if the knowledge itself would be harmful.

[20:44] <masak> "let's not go there! it won't lead to anything good!"

[20:45] <masak> the JVM (or any other mature VM) representing some kind of dangerous knowledge that Man should never go near.

[20:45] <colomon> Let me just say, based on my Niecza experience, that having Rakudo on JVM available would be a good thing even if Parrot can somehow outperform JVM.

[20:45] <masak> s/even if (.*)//

[20:45] <masak> colomon: Parrot can't outperform the JVM.

[20:46] <masak> colomon: a cheetah cannot outperform the speed of sound.

[20:46] <diakopter> at _anything_ that can be measured.

[20:46] <uvtc> masak: <Gandalf>There are few who can.</gandalf>

[20:46] <tadzik> I'm amused how chromatic is picking out IRC lines and responding to them on twitter

[20:47] <diakopter> chromatic: your mom is a your mom joke. ;)

[20:48] <masak> tadzik: chromatic has "quit" IRC :P

[20:48] * masak waves to chromatic

[20:48] <diakopter> we need a chromatic_x twitter relay bot

[20:49] <masak> oh god no

[20:49] <jnthn> I...I'm not sure we do. :)

[20:49] <tadzik> ahaha

[20:49] <masak> "we missed him so much, we rebuild him as software"

[20:49] <colomon> masak: I'm trying not to frame this as a "Parrot sucks" discussion.  If for no other reason than I find it hard to believe there are people out there who'd prefer Rakudo to stick strictly to Parrot even though they don't think it will ever offer the same performance JVM does.

[20:49] <diakopter> I...can't believe either of you thought I was serious.

[20:49] <masak> rebuilt*

[20:50] <masak> colomon: understood. it's just that your framing doesn't pass the basic test of credibility ;)

[20:51] <masak> diakopter: any sufficiently advanced irony is indistinguishable from sincerity.

[20:51] <PerlJam> heh

[20:52] <diakopter> s/was/was or even could possibly be/

[20:53] <masak> diakopter: I've never met you in meatspace.

[20:53] <masak> diakopter: I don't hear tone of voice when I read your IRC utterances.

[20:53] <diakopter> ok. I should have ended it with a ! or ;)

[20:54] <diakopter> also, s/your mom joke/<insert your mom joke here>/ to be clear

[20:54] <masak> what's the rule called that says "you can't tell if someone on the internet is a kook or is playing one really well"?

[20:54] <tadzik> "On the internet nobody knows you're a dog"?

[20:54] <Tene> masak: Poe's Law

[20:54] <masak> right!

[20:55] <masak> "Without a winking smiley or other blatant display of humor, it is impossible to create a parody of fundamentalism that someone won't mistake for the real thing."

[20:55] <masak> like how people can't tell troll edits on ConservaPedia from honest edits ;)

[20:57] <PerlJam> masak: so ... is chromatic a kook or playing one really well?   ;>

[20:57] <skids> Wasn't there an inverse as well -- eventually a fundamentalist community will turn on its main proponents because they think they are being satired?

[20:58] * PerlJam wonders if "kook" counts for chromatic's derailing bingo card.

[20:58] *** cognominal__ joined
[20:59] *** cognominal left
[21:02] <diakopter> masak: I really don't think tone of voice would have helped. I would have said it quite sincerely/excitedly in person, for even more irony. I guess I assumed you would have to assume I'm a GDFMoron for me to actually be serious. You know, like an in-joke.

[21:02] *** kaare_ left
[21:03] *** cognominal__ left
[21:03] <swarley> I was thinking about Go as a target language

[21:03] <masak> PerlJam: I don't think chromatic is a kook. I think he's quite a good developer. he got dissatisfied with Rakudo and Parrot at some point, and he is determined to tell the world about it, even at the expense of the people in those projects.

[21:03] <uvtc> Last time I built R*, I used `perl Configure.pl --gen-parrot --prefix=/home/<you>/opt/rakudo-star-20yy.mm`. That --prefix part is no longer required (now that R* installs into its own "install" dir), correct?

[21:04] *** cognominal__ joined
[21:05] <masak> diakopter: for me, deciding whether you were serious or not didn't factor into it. my initial reaction was still "oh god no" :)

[21:05] <diakopter> masak: that's just not accurate. I can see how "trying to be helpful" is an internally-rational justification/motivation

[21:05] <uvtc> Also, is the "--gen-nqp" required for building R*? (The readme doesn't mention it, but the rakudo.org/how-to page does.)

[21:06] <diakopter> telling the world about dissatisfaction isn't the goal

[21:06] <jnthn> uvtc: It's not needed; you'll get an NQP built for you with just --gen-parrot

[21:06] <jnthn> uvtc: I think the --prefix just matters if you care where it ends up building it. Note it's not relocatable.

[21:06] <diakopter> (also, I'm not claiming the trying to be helpful is failing)

[21:06] <uvtc> jnthn: thanks. Not sure why I previously used --prefix.

[21:07] <ggoebel_> phenny: hug everyone

[21:07] <jnthn> uvtc: Well, maybe you knew where you wanted it to install ;-)

[21:08] <skids> .oO(maybe time rakudo/INSTALL.txt got a quick brushing)

[21:08] <uvtc> jnthn: I'm guessing I just wanted it installed in the simplest/easiest way possible.

[21:08] <masak> diakopter: I'm sorry. I'm just not very good at explaining chromatic's motivations.

[21:08] *** cognominal joined
[21:09] <tadzik> hugme: hug everyone

[21:09] * hugme hugs everyone

[21:09] <uvtc> Me so happy.

[21:09] <uvtc> Me want to cry.

[21:09] <diakopter> it must feel nice to be discussed at length as a third person :)

[21:09] *** cognominal__ left
[21:09] * uvtc has watched too much Seinfeld.

[21:09] <tadzik> I'm so happy I

[21:09] <tadzik> damn you, return key

[21:10] <tadzik> I'm so happy I'm renaming myself to tadzik 7

[21:10] <masak> http://pbfcomics.com/115/

[21:10] <tadzik> :D

[21:10] <skids> hugme: hug hugme

[21:10] * hugme hugs hugme

[21:11] <skids> Aw LTA

[21:11] <tadzik> hugme: are awesome

[21:11] <tadzik> hugme: hug are awesome

[21:11] * hugme hugs are

[21:11] <tadzik> pfft!

[21:11] <masak> you need to use non-breaking spaces.

[21:11] <uvtc> skids: No, I think the install doc (READM) for R* looks good. I was just confused.

[21:11] <uvtc> README*

[21:12] <tadzik> doy++

[21:12] <uvtc> http://rakudo.org/how-to-get-rakudo/ mentions --gen-nqp, but maybe that's for building Rakudo, not R*.

[21:13] <skids> It's just that rakudo/INSTALL.txt doesn't explain gen-nqp at all.

[21:14] <uvtc> skids: btw, I only see a README in there --- no INSTALL.txt file.

[21:14] <uvtc> readme contains install instructions.

[21:14] <masak> hugme: hug are¬†awesome

[21:14] <skids> Because rakudo is a subdir in the * ditsro.

[21:14] * hugme hugs are¬†awesome

[21:14] <diakopter> hugme: foo&nbsp;bar

[21:14] <diakopter> hugme: hug foo&nbsp;bar

[21:14] *** stevan_ left
[21:14] * hugme hugs foo&nbsp;bar

[21:14] <diakopter> \o/

[21:15] <masak> diakopter: "¬†" <-- non-breaking space

[21:15] <masak> diakopter: am I misreading irony again? :P

[21:15] <diakopter> I need a macro for "I can't believe you thought I was serious"

[21:15] <masak> hey, I was quicker this time in discovering it!

[21:15] <uvtc> &nbsp;'s bend like a reed in the wind.

[21:16] <skids> Emoticon early, emoticon often.

[21:17] <felher> fun with regexes: http://www.coinheist.com/rubik/a_regular_crossword/grid.pdf 

[21:19] <skids> something tells me the next p6cc will involve solving one of those.

[21:19] <jnthn> felher: Oh wow...

[21:19] <felher> jnthn: I can only recommend it. Was quite funny to solve :)

[21:22] *** Pleiades` left
[21:23] *** cognominal left
[21:24] <PerlJam> jnthn: It's from http://www.mit.edu/~puzzle/

[21:25] *** pupoque joined
[21:25] <felher> PerlJam++ #thnx, didn't know that.  :)

[21:28] *** Pleiades` joined
[21:29] <uvtc> Currently, when building R*, the "Configure" step builds both Parrot and NQP, correct?

[21:30] <skids> Yes.

[21:30] <jnthn> uvtc: Yes

[21:30] *** cognominal joined
[21:30] <uvtc> jnthn: grazie.

[21:31] <uvtc> Just finished the R* `make` step. Would be nice if it gave me a success message at the end.

[21:32] <uvtc> I got:

[21:32] <uvtc> /home/john/opt/rakudo-star-2013.01/install/bin/parrot  -o RESTRICTED.setting.pbc src/gen/RESTRICTED.setting.pir

[21:32] <uvtc> ./perl6 --target=pir --output=lib/lib.pir lib/lib.pm6

[21:32] <uvtc> ./perl6 --target=pir --output=lib/Test.pir lib/Test.pm

[21:32] <uvtc> ./perl6 --target=pir --output=lib/Pod/To/Text.pir lib/Pod/To/Text.pm

[21:32] <uvtc> make[1]: Leaving directory `/home/john/opt/rakudo-star-2013.01/rakudo'

[21:32] <FROGGS> well, make: Leaving... is success :o)

[21:33] <skids> I thought it used to.

[21:33] <uvtc> The "make[1]" makes me think it's returning with status 1 (rather than 0 == success).

[21:33] <FROGGS> but some instructions would be nice

[21:33] <skids> (used to say something like "you may now .... make install")

[21:33] <uvtc> (regardless, the `make test` reports "Result: PASS" at the end. Which is nice.)

[21:34] <skids> Note the install involves a lot of compiling of P6 code to pir.

[21:37] <geekosaur> no, "make[1]" means that the make directly under the top level one finished

[21:38] <geekosaur> that is, if one of your makefile rules does "make ..." then the sub-make will identify as "make[1]", and if that also does a "make ..." then the new one will identify as "make[2]", etc.

[21:38] <geekosaur> nesting depth

[21:38] <uvtc> geekosaur: Ah, thanks.

[21:38] <uvtc> Still would be nice to see a little, "There. That wasn't so bad. Building has completed." message. :)

[21:39] <uvtc> geekosaur: Yeah, the `make rakudo-test` ends the same way (after reporting PASS).

[21:43] *** uvtc left
[21:43] * skids notices decrease in IRC traffic after posting of rx crossword puzzle.

[21:50] <timotimo> skids: i tried it a while ago and was not very effective

[21:51] * geekosaur not even sure what it's asking, but focus is very much elsewhere atm

[21:52] <timotimo> it asks you to put in letters so that the regexes from the sides match in all intersections

[21:52] <geekosaur> ah.

[21:54] *** PacoAir left
[21:58] *** cognominal left
[22:01] *** cognominal joined
[22:02] <timotimo> god, the twiter website is godawful for following conversations

[22:03] *** benabik_ left
[22:03] *** skids left
[22:04] *** amurias left
[22:09] *** cognominal left
[22:10] *** shinobicl left
[22:14] *** cognominal joined
[22:24] *** cognominal left
[22:31] <dalek> nqp-jvm-prep: 07feece | jnthn++ | / (8 files):

[22:31] <dalek> nqp-jvm-prep: Implement capture manipulation ops.

[22:31] <dalek> nqp-jvm-prep: 

[22:31] <dalek> nqp-jvm-prep: These will be used by multiple dispatch.

[22:31] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/07feeceb0b

[22:31] <dalek> nqp-jvm-prep: c8228f6 | jnthn++ | / (2 files):

[22:31] <dalek> nqp-jvm-prep: nqp::invokewithcapture; stub multi cache ops.

[22:31] <dalek> nqp-jvm-prep: 

[22:31] <dalek> nqp-jvm-prep: The multi-dispatch cache can come later; may be a good LHF task since

[22:31] <dalek> nqp-jvm-prep: it's porting something that already exists, mostly.

[22:31] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/c8228f627e

[22:31] <dalek> nqp-jvm-prep: ac11f0c | jnthn++ | nqp-src/NQPCORE.setting:

[22:31] <dalek> nqp-jvm-prep: Pull in rest of multi-dispatch code.

[22:31] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/ac11f0c246

[22:31] <dalek> nqp-jvm-prep: 4914292 | jnthn++ | src/org/perl6/nqp/runtime/Ops.java:

[22:31] <dalek> nqp-jvm-prep: Fix a handful of thinkos.

[22:31] <dalek> nqp-jvm-prep: 

[22:31] <dalek> nqp-jvm-prep: With this, multi-dispatch just about works.

[22:31] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/4914292ec5

[22:31] <masak> jnthn++ # doing stuff

[22:31] *** hoelzro is now known as hoelzro|away

[22:32] <timotimo> sweet

[22:32] *** ggoebel_ left
[22:32] <timotimo> maybe perl6 isn't going to die after all!

[22:32] <FROGGS> hehe

[22:32] <moritz> nr: die "OH BUT I'M DYING RIGHT NOW!!!"

[22:32] <p6eval> rakudo 4fb07b: OUTPUT¬´OH BUT I'M DYING RIGHT NOW!!!‚ê§  in block  at /tmp/Spkdibx8V0:1‚ê§‚ê§¬ª

[22:32] <p6eval> ..niecza v24-20-g93138cc: OUTPUT¬´Unhandled exception: OH BUT I'M DYING RIGHT NOW!!!‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 1435 (die @ 5) ‚ê§  at /tmp/l2VdgT_9Dt line 1 (mainline @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4227 (ANON @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.‚Ä¶

[22:34] * jnthn is somewhat relieved that he can copy-paste about 250 lines of code that topo-sort multi-dispatch candidates and do the dispatch from NQP on Parrot into NQP on JVM, and have it all work pretty much right off once he gets the ops ported over correctly.

[22:34] *** cognominal joined
[22:34] <timotimo> :)

[22:36] <colomon> jnthn++  # making cool stuff is easily the best possible response to chromatic

[22:37] <jnthn> Now to figure out why it gets complicated things correct and easy things wrong...

[22:40] <timotimo> computers have very strange interpretations of what "complicated" and "easy" mean :D

[22:41] <jnthn> oh...

[22:41] <jnthn> I think I may see it.

[22:43] *** pupoque left
[22:52] <dalek> nqp-jvm-prep: 2974b29 | jnthn++ | nqp-src/NQPCORE.setting:

[22:52] <dalek> nqp-jvm-prep: Missing null check.

[22:52] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/2974b29d21

[22:52] <dalek> nqp-jvm-prep: 88dc081 | jnthn++ | t/nqp/51-multi.t:

[22:52] <dalek> nqp-jvm-prep: We now pass 51-multi.t.

[22:52] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/88dc081dfe

[22:54] <timotimo> ql

[22:54] <masak> \o/

[22:55] <colomon> \o/

[22:57] *** cognominal left
[22:58] <jnthn> To whoever had the segfault earlier: I think I just found a GC marking bug introduced into P6opaque.

[22:58] *** donaldh joined
[23:04] *** cognominal joined
[23:09] *** bluescreen10 left
[23:12] *** stopbit left
[23:14] *** cognominal left
[23:15] <colomon> jnthn: sorry to bother you with this when you are doing good work, but any thoughts on how to make { '('(<digit>+) {} [<t_elem>* <stem>] ** { +$0 } <slur_end>? } work in Rakudo?  It's the only thing stopping ABC from passing all its tests there now, so far as I know.

[23:15] *** cognominal joined
[23:15] <masak> colomon: which part of it doesn't work?

[23:15] <jnthn> ** with a closure is NYI

[23:16] <masak> oh!

[23:16] <colomon> yeah, that part

[23:16] <jnthn> I think you may be able to make it with a * and an assertion or something like that.

[23:16] <jnthn> *fake

[23:16] <masak> does it work with a variable?

[23:16] <jnthn> No, that's Equally Hard

[23:16] <masak> oh, ok.

[23:16] <masak> figures :)

[23:17] <jnthn> As in, if we implement one the other is easy ;)

[23:17] <masak> right.

[23:17] <masak> I guess both of those offset some DFA-ness of the rule.

[23:17] <jnthn> It kinda needs some kinda quantdyn subtype of QAST::Regex.

[23:17] <colomon> it's easy enough to make it work for given N, but the general case is prettier.

[23:17] <jnthn> Which, yes, is not declarative. :)

[23:19] <colomon> it's not a show stopper at all, but going back to the 3-tuplet 4-tuplet 5-tuplet version seems like a moral defeat in the context of the day.  If you know what I mean.  (ie I want it to work as well on Rakudo as it does on Niecza.)

[23:22] * masak .oO( bait deployed. will it work? ) :)

[23:22] <jnthn> r: say '2 456' ~~ /(\d+) \s (\d)*? <?{ $1 == $0 }>/

[23:22] <p6eval> rakudo 4fb07b: OUTPUT¬´ÔΩ¢2 45ÔΩ£‚ê§ 0 => ÔΩ¢2ÔΩ£‚ê§ 1 => ÔΩ¢4ÔΩ£‚ê§ 1 => ÔΩ¢5ÔΩ£‚ê§‚ê§¬ª

[23:22] <jnthn> r: say '1 456' ~~ /(\d+) \s (\d)*? <?{ $1 == $0 }>/

[23:22] <p6eval> rakudo 4fb07b: OUTPUT¬´ÔΩ¢1 4ÔΩ£‚ê§ 0 => ÔΩ¢1ÔΩ£‚ê§ 1 => ÔΩ¢4ÔΩ£‚ê§‚ê§¬ª

[23:22] <jnthn> r: say '3 456' ~~ /(\d+) \s (\d)*? <?{ $1 == $0 }>/

[23:22] <p6eval> rakudo 4fb07b: OUTPUT¬´ÔΩ¢3 456ÔΩ£‚ê§ 0 => ÔΩ¢3ÔΩ£‚ê§ 1 => ÔΩ¢4ÔΩ£‚ê§ 1 => ÔΩ¢5ÔΩ£‚ê§ 1 => ÔΩ¢6ÔΩ£‚ê§‚ê§¬ª

[23:22] * colomon is mostly hoping for a clever workaround for now

[23:22] <jnthn> Can you do something with that?

[23:23] <colomon> maybe.

[23:24] <colomon> (making nom for family)

[23:28] <colomon> this is relying on (\d)* returning a parcel, right?

[23:29] <dalek> nqp: 263332d | jnthn++ | src/6model/reprs/P6opaque.c:

[23:29] <dalek> nqp: Try and fix some offset calculations.

[23:29] <dalek> nqp: 

[23:29] <dalek> nqp: May deal with the 32-bit issue, but something still seems amiss.

[23:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/263332d381

[23:29] <jnthn> colomon: Yes, it''d be more clearly written $1.elems == $0

[23:32] *** cognominal left
[23:33] *** skids joined
[23:33] <jnthn> phenny: tell arnsholt I think some of the offset compuation wasn't quite right after all... Gave it a tweak in 263332d.

[23:33] <phenny> jnthn: I'll pass that on when arnsholt is around.

[23:36] *** sftp left
[23:37] *** sftp joined
[23:39] *** cognominal joined
[23:39] *** sftp left
[23:41] <japhb_> Re: 263332d ... man, this is just begging for a macro that just increases a size to the next increment of an alignment.

[23:42] <sorear> (x + 7) & ~7 ?

[23:43] <japhb_> sorear, assuming power-of-two alignment, sure.

[23:44] <japhb_> (Yes, I am aware that it is rare not to have that be true.)

[23:46] *** sftp joined
[23:53] <pmurias> jnthn: we do you only use forceouterctx on nqp-java?

[23:54] <pmurias> jnthn: what about nqp-js?

[23:54] * pmurias is unbitrotting it

[23:54] <jnthn> pmurias: No, it's the standard op for doing it.

[23:55] <jnthn> pmurias: Maybe I didn't get the Parrot-targetting code to use it yet, but there's no reson I can't.

[23:55] <jnthn> Actually nothing under :jvm(...) is very JVM specific.

[23:57] <pmurias> ModuleLoader.class is

[23:59] <jnthn> pmurias: I menat QAST::VM.new( :jvm(...) )

