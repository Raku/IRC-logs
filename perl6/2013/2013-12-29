[00:01] *** nebuchadnezzar left
[00:03] *** benabik left
[00:07] *** pat_js left
[00:12] *** ssutch left
[00:13] *** ssutch joined
[00:13] <jnthn> sleep; 'night o/

[00:13] *** spider-mario left
[00:17] <dalek> specs: d519b6f | larry++ | S02-bits.pod:

[00:17] <dalek> specs: Temp values default to boxed unless 'use native'

[00:17] <dalek> specs: 

[00:17] <dalek> specs: Attempt to bring some correctness (with the option for speed) to

[00:17] <dalek> specs: the use of builtin operators that might return boxed or unboxed

[00:17] <dalek> specs: values.  Also wave hands feebly about native literals.

[00:17] <dalek> specs: 

[00:17] <dalek> specs: Attempts to resolve #8.

[00:17] <dalek> specs: review: https://github.com/perl6/specs/commit/d519b6f5d8

[00:19] *** ssutch left
[00:20] *** ssutch joined
[00:23] *** benabik joined
[00:27] *** nebuchadnezzar joined
[00:27] *** dmol left
[00:29] <dalek> specs: ae7cf35 | larry++ | S32-setting-library/Numeric.pod:

[00:29] <dalek> specs: Define .narrow method to narrow numeric types

[00:29] <dalek> specs: 

[00:29] <dalek> specs: Can narrow either Rat or Num to Int, for instance.

[00:29] <dalek> specs: Resolves #47.

[00:29] <dalek> specs: review: https://github.com/perl6/specs/commit/ae7cf355db

[00:31] *** ssutch left
[00:32] *** BenGoldberg joined
[00:33] *** hoverboard joined
[00:33] *** ssutch joined
[00:38] *** ssutch left
[00:40] *** ssutch joined
[00:41] <dalek> specs: 8193f27 | larry++ | S32-setting-library/Numeric.pod:

[00:41] <dalek> specs: mention narrowing complex and native types

[00:41] <dalek> specs: review: https://github.com/perl6/specs/commit/8193f27f3c

[00:45] *** ssutch left
[00:47] *** ssutch joined
[00:49] *** colomon left
[00:49] *** colomon joined
[00:55] *** ssutch left
[00:56] *** ssutch joined
[01:04] *** BenGoldberg left
[01:10] *** ssutch left
[01:12] *** ssutch joined
[01:17] *** ssutch left
[01:20] *** ssutch joined
[01:33] *** kaare_ left
[01:33] <dalek> specs: 0b7df09 | larry++ | S (9 files):

[01:33] <dalek> specs: rename eval to EVAL to indicate specialness

[01:33] <dalek> specs: 

[01:33] <dalek> specs: EVAL must have a special relationship with the compiler, so don't

[01:33] <dalek> specs: pretend it's a normal function/method.  We aren't capitalizing it

[01:33] <dalek> specs: because it's a "come from" as most phasers are, but because it's

[01:33] <dalek> specs: an escape hatch macro that is mostly there to compensate for an

[01:33] <dalek> specs: insufficiently imaginative language designer.

[01:33] <dalek> specs: 

[01:33] <dalek> specs: Resolves #50.

[01:33] <dalek> specs: review: https://github.com/perl6/specs/commit/0b7df09ecc

[01:35] <TimToady> (also, it reduces the temptation to think of it as equivalent to P5's eval)

[01:35] <colomon> errr, how much of my code is that going to break?

[01:36] <TimToady> how much do you use eval?

[01:36] <TimToady> I suspect we'll do a deprecation cycle on this one

[01:37] * araujo looks around to see how perl6 is receiving the new year

[01:37] <TimToady> it's still trying to deal with the old year :)

[01:37] <araujo> hehe

[01:38] * TimToady has apparently been making resolutions early though...

[01:39] <colomon> TimToady: looks like once in active code in ABC, three times in tests in Math::Vector...

[01:39] * colomon wishes he had an easy way to ack just his modules

[01:40] <lue> colomon:  ack TERM `find <dir> -name *.pm`  ?

[01:40] *** mtk left
[01:41] <colomon> lue wouldn't catch .pl or .t

[01:41] <colomon> but I suppose I could do --type=perl

[01:41] <lue> colomon: then you could replace *.pm with *.{pm,pl,t} :)

[01:42] * lue &

[01:43] *** BenGoldberg joined
[01:43] * colomon is deleting a fantastic number of obsolete copies of rakudo as part of this process

[01:45] *** mtk joined
[01:45] *** ssutch left
[01:47] *** ssutch joined
[01:52] *** ssutch left
[01:53] *** ssutch joined
[01:56] <TimToady> you could just wait until we deprecate it and then see what complains :)

[01:56] <TimToady> or who :)

[01:57] <TimToady> closed: https://github.com/perl6/specs/issues/38

[01:57] *** ssutch left
[02:00] *** ssutch joined
[02:01] <colomon> Looks like about 70 uses in my modules.

[02:02] <TimToady> how many of those should be using less powerful mechanisms?

[02:02] <colomon> Certainly not reason to reverse what seems like a sensible decision, but it will be a minor pain in the neck.

[02:04] <colomon> TimToady: many (most?) are just testing that if you call .perl.eval, you get the same thing out.

[02:04] <TimToady> gotcha

[02:04] <TimToady> maybe we should have a .perl-eval method :)

[02:05] <colomon> me appears to have deleted about 15 gigs worth of old rakudos and perl-5.10s during this process, so TimToady++ lue++

[02:07] *** kurahaupo_mobile joined
[02:09] *** ssutch left
[02:12] *** ssutch joined
[02:26] *** ssutch left
[02:27] <lue> you could just s/eval/EVAL/, wouldn't be *that* painful :)

[02:27] *** ssutch joined
[02:28] *** Rotwang left
[02:29] <lue> TimToady: maybe we can make it more special by mirroring the opener for the closer:    EVAL("stuff here")LAVE    :)

[02:36] <TimToady> or EVIL...LIVE

[02:37] *** ssutch left
[02:37] <lue> TimToady: I really only suggested it for the cross-lingual punning :) evaluating -> ... -> I now wash my hands of what I've done

[02:38] *** ssutch joined
[02:46] *** ssutch left
[02:48] *** ssutch joined
[02:51] *** mtk left
[02:53] *** ssutch left
[02:54] *** ssutch joined
[02:55] *** mtk joined
[02:58] *** ssutch left
[03:00] *** ssutch joined
[03:03] *** kaare_ joined
[03:07] *** daniel-s_ left
[03:07] *** daniel-s__ joined
[03:08] <TimToady> it's not cross-language to me, who was brought up to know what a laver is

[03:11] *** jferrero joined
[03:12] *** abnorman joined
[03:12] *** cooper left
[03:14] *** abnorman left
[03:15] <TimToady> or were you thinking cross-computer-language?

[03:17] <lue> TimToady: no, I was thinking French :) "Je lave mes mains"

[03:21] * TimToady could almost persuade himself that lave and Japanese ara(w)u are etymologically related

[03:25] *** cooper joined
[03:25] *** cooper left
[03:25] *** cooper joined
[03:30] *** ssutch left
[03:30] *** Celelaptop left
[03:33] *** tokuhirom joined
[03:36] *** Celelaptop joined
[03:36] *** tokuhirom left
[03:56] *** vinian joined
[03:56] *** vinian left
[03:57] *** vinian joined
[03:57] *** vinian left
[04:05] *** tokuhirom joined
[04:08] *** tokuhirom left
[04:09] *** tokuhirom joined
[04:15] *** vinian joined
[04:15] *** vinian left
[04:25] *** vinian joined
[04:25] *** vinian left
[04:33] *** vinian joined
[04:33] *** vinian left
[04:35] *** vinian joined
[04:35] *** vinian left
[04:45] *** logie left
[04:47] *** preflex left
[04:47] *** preflex_ joined
[04:47] *** ChanServ sets mode: +v preflex_

[04:48] *** preflex_ is now known as preflex

[05:03] *** vinian joined
[05:03] *** vinian left
[05:09] *** nebuchadnezzar left
[05:10] *** nebuchadnezzar joined
[05:14] *** kurahaupo_mobile left
[05:17] *** vinian joined
[05:17] *** vinian left
[05:22] *** cognominal left
[05:22] *** cognominal joined
[05:28] *** vinian joined
[05:28] *** vinian left
[05:35] *** vinian joined
[05:35] *** vinian left
[06:13] *** finanalyst joined
[06:16] <finanalyst> p: sub a (@a) {say [~] @a RX~ 'pre' };my @x=<nat med fix>; say [~] @a Rx~ 'pre'; a(@x)

[06:16] <camelia> rakudo-parrot d7bf82: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/5aTmqfao7U␤Variable '@a' is not declared␤at /tmp/5aTmqfao7U:1␤------> [32m 'pre' };my @x=<nat med fix>; say [~] @a[33m⏏[31m Rx~ 'pre'; a(@x)[0m␤    expecting any of:␤        postfi…»

[06:17] <finanalyst> p: sub a (@a) {say [~] @a RX~ 'pre' };my @x=<nat med fix>; say [~] @x Rx~ 'pre'; a(@x)

[06:17] <camelia> rakudo-parrot d7bf82: OUTPUT«preprepre␤prenatpremedprefix␤»

[06:18] <finanalyst> p: sub a (@a) {say [~] @a RX~ 'pre' };my @x=<nat med fix>; say [~]( @x Rx~ 'pre'); a(@x)

[06:18] <camelia> rakudo-parrot d7bf82: OUTPUT«preprepre␤prenatpremedprefix␤»

[06:21] <finanalyst> p: sub a (@a) {say [~] @a RX~ 'pre' };my @x=<nat med fix>; say [~]( @x RX~ 'pre'); a(@x)

[06:21] <camelia> rakudo-parrot d7bf82: OUTPUT«prenatpremedprefix␤prenatpremedprefix␤»

[06:26] *** BenGoldberg left
[06:28] *** BenGoldberg joined
[06:29] *** SamuraiJack_ joined
[06:47] *** REPLeffect left
[06:50] *** REPLeffect joined
[06:54] *** darutoko joined
[06:57] *** REPLeffect left
[07:10] *** araujo left
[07:14] *** REPLeffect joined
[07:18] *** REPLeffect left
[07:23] *** REPLeffect joined
[07:42] *** REPLeffect left
[07:42] *** REPLeffect joined
[07:47] *** REPLeffect left
[07:59] *** REPLeffect joined
[08:33] *** SamuraiJack_ left
[08:36] *** REPLeffect left
[08:38] *** REPLeffect joined
[08:42] *** REPLeffect left
[08:42] *** REPLeffect joined
[09:00] <FROGGS> morning

[09:03] *** atroxaper joined
[09:04] *** dmol joined
[09:04] <dalek> rakudo/nom: 375aaf9 | moritz++ | / (5 files):

[09:04] <dalek> rakudo/nom: first shot at Numeric.narrow

[09:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/375aaf9738

[09:05] <FROGGS> preflex: tell Rotwang I've seen you talking about C code in the backlog... Have you considered Inline::C?

[09:05] <preflex>  Consider it noted.

[09:07] *** _ilbot joined
[09:17] *** REPLeffect left
[09:18] *** REPLeffect joined
[09:24] *** xinming_ joined
[09:25] *** REPLeffect left
[09:27] *** hoverboard left
[09:27] *** xinming left
[09:33] <dalek> roast: 27feb20 | moritz++ | S32-num/narrow.t:

[09:33] <dalek> roast: tests for Numeric.narrow

[09:33] <dalek> roast: review: https://github.com/perl6/roast/commit/27feb20a33

[09:33] <dalek> roast: 5990eca | moritz++ | S16-filehandles/filestat.t:

[09:33] <dalek> roast: comment out a file system-dependent test

[09:33] <dalek> roast: review: https://github.com/perl6/roast/commit/5990eca7b7

[09:34] <dalek> rakudo/nom: ac4e9fb | moritz++ | t/spectest.data:

[09:34] <dalek> rakudo/nom: prior.t is gone

[09:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ac4e9fb49a

[09:34] <dalek> rakudo/nom: c14a846 | moritz++ | src/core/ (2 files):

[09:34] <dalek> rakudo/nom: Instant.narrow and Duration.narrow

[09:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c14a846d49

[09:35] *** autumn joined
[09:36] *** sivoais left
[09:36] *** sivoais joined
[09:37] <moritz> TimToady++ # closing specs tickets

[09:39] *** finanalyst left
[09:44] *** isBEKaml joined
[09:57] <isBEKaml> hey guys, I have a problem in getting nqp to build on latest parrot HEAD (as of y'day). Does this look familiar to anyone here? https://gist.github.com/anonymous/8168990

[09:59] <isBEKaml> this is on cygwin (win7)

[10:00] * moritz hasn't built on parrot HEAD for some time

[10:01] <tadzik> me neither

[10:01] <isBEKaml> Oh, so I'm the only one :-)

[10:01] <tadzik> I lost track of whether parrot wants to support rakudo or every language in the world or neither

[10:03] <moritz> I lost track of whether there is a coherent parrot that can want anything

[10:05] <nwc10> As best I can tell, parrot doesn't even know the latter. In that, the discussions on the parrot list about what they do next fizzled out

[10:06] <isBEKaml> nwc10: yeah, I remember seeing something about that on parrot logs. Allison and others pitched in what seems like its "last huzzah". :(

[10:06] <tadzik> http://www.youtube.com/watch?v=npjOSLCR2hE relevant? :)

[10:08] *** BenGoldberg left
[10:08] <isBEKaml> okay, moritz, tadzik:how do you build parrakudo then? on supported releases or not at all? :)

[10:09] <tadzik> isBEKaml: I just say 'rakudobrew build parrot'

[10:09] <tadzik> not sure if it works on windows though

[10:09] <isBEKaml> tadzik: is there such a thing? (even on OSX?)

[10:09] <tadzik> if it does, it's by accident :)

[10:09] <tadzik> https://github.com/tadzik/rakudobrew

[10:10] <moritz> isBEKaml: I simply run   perl Configure.pl --gen-parrot && make

[10:10] <isBEKaml> tadzik: well, for a moment I thought - you're playing memegenerator. :)

[10:10] <FROGGS> isBEKaml: I think the removal of EvalPMC in parrot breaks building nqp, we must adapt nqp to use the new PakFile api (IIRC this was on "our" request)

[10:11] <FROGGS> PackFile*

[10:11] *** araujo joined
[10:11] <moritz> there's a new-packfile-api branch in nqp

[10:11] <FROGGS> ohh

[10:12] <isBEKaml> FROGGS: I thought that was something different? This looks like something messing up the makefile conventions. 

[10:12] <moritz> ... which updates the bootstrap, and conflicts :(

[10:12] <FROGGS> that would mean --target=pbc instead of --target=pir, which is nice :o)

[10:13] <FROGGS> moritz: sure... we even changed the parts in nqp that produced pir... these parts needs updated too in the new branch

[10:13] <FROGGS> isBEKaml: your problem might be something different, but parrot HEAD won't work after all because of what I have pointed out

[10:16] <isBEKaml> FROGGS: Oh, I remembered a long standing PR/issue on parrot git repo. I thought you were referring to that. 

[10:16] <isBEKaml> FROGGS: (on new PackFile API from whiteknight over at parrot)

[10:17] <isBEKaml> tadzik: rakudobrew - "I don't accept bugs, only pull requests." Nice touch. :)

[10:18] <tadzik> heh

[10:18] <tadzik> I wondered how that'll work. I got 0 bug reports, and 1 pull request, I think :)

[10:18] *** rindolf joined
[10:18] <tadzik> 2 pull requests, even

[10:18] * moritz considers opening a pull requests that adds a file ISSUES with bug reports :-)

[10:18] <isBEKaml> then try that everywhere? You'll maybe get a *cackling* rush of PRs. :-)

[10:19] <moritz> just for trolling sport

[10:19] <tadzik> haha

[10:19] <masak> good antenoon, #perl6

[10:19] <tadzik> well, accepting bugs definitely won't hurt rakudobrew's adoption

[10:20] <tadzik> but the bottleneck is the absolute lack of marketing anyway :)

[10:20] <isBEKaml> considering that you never intended it for adoption. 

[10:20] <tadzik> not really

[10:20] <isBEKaml> hello, masak

[10:20] <tadzik> it's something I put together to make it easier for myself to update rakudo, now that it got more backends and whatnot

[10:21] <tadzik> masak! \o/

[10:22] <nwc10> also, I believe that there hasn't been a parrot release this month, and based on last time it got this late, I suspect that there won't be

[10:23] <tadzik> the last commit was 3 months ago

[10:24] * moritz wonders if http://www.youtube.com/watch?v=HVReDiyouWs applies :-)

[10:27] <FROGGS> http://www.youtube.com/watch?v=npjOSLCR2hE :P

[10:31] *** xenoterracide left
[10:31] *** xenoterracide joined
[10:38] *** Rotwang joined
[10:40] <dalek> roast: f355189 | moritz++ | S02-magicals/pid.t:

[10:40] <dalek> roast: unfudge a passing test for the JVM

[10:40] <dalek> roast: review: https://github.com/perl6/roast/commit/f355189d50

[10:41] <moritz> this one has been passing for me for quite some time

[10:41] <moritz> if that still causes problems for anybody, please revert this commit

[10:44] <FROGGS> +1

[10:50] *** xenoterracide left
[10:51] <nwc10> last commit was actually

[10:51] <nwc10> AuthorDate: Mon Oct 7 19:40:02 2013 -0400

[10:51] <nwc10> CommitDate: Fri Dec 13 21:37:34 2013 -0500

[10:51] <nwc10> the previous commit is the tag for RELEASE_5_10_0

[10:52] <nwc10> it's really not very active these days

[11:05] <FROGGS> p: "abc" ~~ /$<test>=.+/; say (:~$<test>) # @TimToady: an we make this work? so that only the stringified version of $<test> goes into the Pair's value?

[11:05] <camelia> rakudo-parrot c14a84: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/uNA88uVSTx␤Bogus statement␤at /tmp/uNA88uVSTx:1␤------> [32m"abc" ~~ /$<test>=.+/; say ([33m⏏[31m:~$<test>) # @TimToady: an we make this [0m␤    expecting any of:␤        semicolon…»

[11:11] *** _daniel-s__ joined
[11:12] *** daniel-s__ left
[11:20] *** _daniel-s__ left
[11:23] *** _daniel-s__ joined
[11:26] *** dmol left
[11:52] *** _daniel-s__ left
[12:17] *** vinian joined
[12:17] *** vinian left
[12:18] *** spider-mario joined
[12:18] *** spider-mario left
[12:18] *** vinian joined
[12:19] *** vinian left
[12:19] *** vinian joined
[12:19] *** vinian left
[12:20] *** vinian joined
[12:20] *** spider-mario joined
[12:20] *** vinian left
[12:21] *** vinian joined
[12:21] *** vinian left
[12:22] *** vinian joined
[12:22] *** vinian left
[12:24] *** vinian joined
[12:24] *** vinian left
[12:26] *** atroxaper left
[12:26] *** vinian joined
[12:26] *** vinian left
[12:27] *** vinian joined
[12:27] *** atroxaper joined
[12:27] *** vinian left
[12:28] *** isBEKaml_ joined
[12:28] *** isBEKaml left
[12:28] *** vinian joined
[12:28] *** vinian left
[12:29] *** vinian joined
[12:30] *** vinian left
[12:30] *** isBEKaml_ is now known as isBEKaml

[12:30] *** isBEKaml left
[12:30] *** isBEKaml joined
[12:31] *** vinian joined
[12:31] *** vinian left
[12:31] *** SamuraiJack_ joined
[12:32] *** vinian joined
[12:32] *** vinian left
[12:33] *** vinian joined
[12:33] *** vinian left
[12:34] *** vinian joined
[12:34] *** vinian left
[12:35] *** ivanshmakov left
[12:35] *** vinian joined
[12:35] *** vinian left
[12:38] *** vinian joined
[12:38] *** vinian left
[12:43] *** isBEKaml left
[12:45] *** atroxaper left
[12:46] *** atroxaper joined
[12:54] *** vinian joined
[12:54] *** vinian left
[12:55] *** vinian joined
[12:55] *** vinian left
[12:56] *** vinian joined
[12:57] *** vinian left
[12:57] *** vinian joined
[12:57] *** vinian left
[12:58] *** zakharyas joined
[12:59] *** vinian joined
[12:59] *** vinian left
[13:00] *** vinian joined
[13:00] *** vinian left
[13:01] *** vinian joined
[13:01] *** vinian left
[13:19] *** vinian joined
[13:19] *** vinian left
[13:20] *** vinian joined
[13:20] *** vinian left
[13:21] <timotimo> back to workign on Nil postcircumfix handling

[13:22] *** vinian joined
[13:22] *** vinian left
[13:23] *** vinian joined
[13:23] *** vinian left
[13:24] *** vinian joined
[13:24] *** vinian left
[13:25] *** vinian joined
[13:25] *** vinian left
[13:26] *** vinian joined
[13:26] *** vinian left
[13:27] *** vinian joined
[13:27] *** vinian left
[13:28] *** isBEKaml joined
[13:28] <isBEKaml> win

[13:28] *** vinian joined
[13:28] *** vinian left
[13:29] <isBEKaml> I'm slower than autojoin :-)

[13:36] <timotimo> i'm having trouble making a sufficiently narrow sub postcircumfix:<{ }> or :<[ ]> for Nil as the first argument

[13:37] <timotimo> it seems like the other ones always win over my pretty broad one :\

[13:37] <timotimo> what was the "after this point, don't participate in multi-dispatch any more" syntax again?

[13:37] <timotimo> will that help?

[13:38] <moritz> it's ;;

[13:38] <moritz> but it generally makes candidates less specific, iiuc

[13:39] <moritz> what's wrong with (Nil, |rest) ?

[13:39] <moritz> maybe you need a second Nil:D candidate, no idea

[13:39] <timotimo> it doesn't trigger :(

[13:39] <moritz> which one is triggered instead?

[13:40] <timotimo> good question. one that returns (Any) instead of Nil.

[13:41] <timotimo> oh

[13:41] <timotimo>  i think i made it work on the last iteration

[13:41] <timotimo> wat.

[13:42] <timotimo> Nil.[1] gets (Any), Nil[1] gets Nil

[13:43] <timotimo> it seems like one of them is compile-time evaluated, the other isn't

[13:44] <timotimo> SMOP, i guess >_<

[13:46] *** vinian joined
[13:46] *** vinian left
[13:48] *** vinian joined
[13:48] *** vinian left
[13:49] <timotimo> waitwhat.

[13:49] <timotimo> when did our stage parse get down to 85 seconds?

[13:50] <nwc10> bisect it? :-)

[13:50] <timotimo> no. there were almost no changes.

[13:51] <timotimo> my laptop is now actually *faster* at stage parse than my desktop is?!

[13:51] <FROGGS> ??

[13:51] <timotimo> oh. it could have been the jvm stage parse that outputted its info in the middle of my parrot stage parse

[13:51] <timotimo> yes, that was it %)

[13:51] <FROGGS> "That is not logical"

[13:54] <timotimo> it may be much easier to give Nil an at_pos and at_key that returns Nil

[13:54] <timotimo> than to make a candidate for the postcircumfixes

[13:55] <timotimo> Nil[5] := 10

[13:55] <timotimo> r: Nil[5] := 10

[13:55] <camelia> rakudo-parrot c14a84, rakudo-jvm c14a84: OUTPUT«===SORRY!===␤Type Nil cannot accept type arguments␤»

[14:06] *** zakharyas left
[14:06] *** vinian joined
[14:06] *** vinian left
[14:08] *** vinian joined
[14:09] *** vinian left
[14:10] *** vinian joined
[14:10] *** vinian left
[14:12] *** vinian joined
[14:12] *** vinian left
[14:13] *** vinian joined
[14:14] *** vinian left
[14:14] <timotimo> wat.

[14:15] <timotimo> ah, that's what.!

[14:15] <timotimo> r: my $foo = Nil; $foo[10] := 10;

[14:15] <camelia> rakudo-parrot c14a84: OUTPUT«No such method 'bind_pos' for invocant of type 'Any'␤  in sub postcircumfix:<[ ]> at gen/parrot/CORE.setting:2341␤  in sub postcircumfix:<[ ]> at gen/parrot/CORE.setting:2301␤  in block  at /tmp/meFD36E_7p:1␤␤»

[14:15] <camelia> ..rakudo-jvm c14a84: OUTPUT«No such method 'bind_pos' for invocant of type 'Any'␤  in sub postcircumfix:<[ ]> at gen/jvm/CORE.setting:2329␤␤»

[14:24] <timotimo> i've got an implementation. just need to get some tests done :)

[14:25] <timotimo> i'm not sure how assigning to Nil should work

[14:25] <timotimo> as in, bind_pos, set_pos, set_key etc etc

[14:30] *** vinian joined
[14:30] *** vinian left
[14:31] *** ivanshmakov joined
[14:33] *** dmol joined
[14:34] *** isBEKaml left
[14:40] *** Rotwang left
[14:48] *** Celelaptop left
[14:50] *** vinian joined
[14:50] *** vinian left
[14:51] *** vinian joined
[14:51] *** vinian left
[14:52] *** vinian joined
[14:52] *** vinian left
[14:53] *** vinian joined
[14:53] *** vinian left
[14:54] *** johnmilton joined
[14:55] *** Rotwang joined
[14:55] *** vinian joined
[14:55] *** vinian left
[14:56] <colomon> https://github.com/supernovus/exemel/pull/5

[14:56] *** vinian joined
[14:56] <colomon> If anyone knows how to ping supernovus…

[14:57] *** vinian left
[14:57] *** vinian joined
[14:57] *** vinian left
[14:59] *** vinian joined
[14:59] *** vinian left
[15:00] *** vinian joined
[15:01] *** vinian left
[15:02] *** vinian joined
[15:02] *** vinian left
[15:03] *** vinian joined
[15:03] *** vinian left
[15:05] *** vinian joined
[15:05] *** vinian left
[15:06] *** ajr joined
[15:06] *** ajr is now known as Guest85050

[15:06] *** vinian joined
[15:06] *** vinian left
[15:08] *** vinian joined
[15:08] *** vinian left
[15:09] *** Guest85050 is now known as ajr_

[15:10] *** vinian joined
[15:10] *** vinian left
[15:11] *** vinian joined
[15:11] *** vinian left
[15:13] *** vinian joined
[15:13] *** vinian left
[15:13] *** vinian joined
[15:14] *** vinian left
[15:16] *** vinian joined
[15:16] *** vinian left
[15:20] *** vinian joined
[15:20] *** brother| left
[15:20] *** brother joined
[15:28] *** rjbs- joined
[15:28] *** robins joined
[15:28] *** atta joined
[15:28] *** Psyche^_ joined
[15:28] *** PerlPilot joined
[15:29] *** hoelzro_ joined
[15:30] *** [particle]1 joined
[15:30] *** ivanshma` joined
[15:33] *** vinian left
[15:33] *** ivanshmakov left
[15:33] *** [particle] left
[15:33] *** Psyche^ left
[15:33] *** hoelzro left
[15:33] *** skids left
[15:35] <FROGGS> colomon: you can still take over as a last resort...

[15:35] <colomon> FROGGS: yes, but I don't like using that power unless I have to.

[15:35] <moritz> p: my $x := Nil; say $x[1]

[15:35] <camelia> rakudo-parrot c14a84: OUTPUT«(Any)␤»

[15:35] <FROGGS> sure

[15:36] <colomon> especially since it might end up making me the one responsible for the module...

[15:36] *** dbrock left
[15:37] *** dbrock joined
[15:40] *** avuserow joined
[15:40] *** pippo joined
[15:40] <pippo> Hello #perl6!

[15:41] *** markov joined
[15:41] *** vinian joined
[15:41] *** vinian left
[15:41] <FROGGS> hi pippo 

[15:41] *** skids joined
[15:42] <pippo> Hello FROGGS :-)

[15:42] <FROGGS> :o)

[15:42] *** isBEKaml joined
[15:42] *** synopsebot joined
[15:44] <pippo> I have one question relevant to the Mix type. I have one set e.g. {a => 2.1}.MixHash and I would like to be able to add {a => 3.2}.MixHash and get {a => 5.3}. 

[15:45] <pippo> r: say {a => 2.1}.MixHash (+) {a => 3.2}.MixHash;

[15:45] <camelia> rakudo-parrot c14a84, rakudo-jvm c14a84: OUTPUT«bag(a(5))␤»

[15:46] <pippo> Why this is converted to Bag type? Like this I loose the decimals.

[15:46] <moritz> probably because (+) is a Bag (or Set?) operator

[15:47] <pippo> Why does it work then on MixHashs?

[15:48] <pippo> Why does it kind-off-work then on MixHashs?

[15:49] *** wtw joined
[15:50] <colomon> the Set and Bag operators convert their arguments to Set or Bag before processing.

[15:50] <colomon> though I agree it seems like MixHash should have its own version of (+)

[15:50] <colomon> ((+) was written before MixHash was a thing

[15:50] <colomon> )

[15:51] <pippo> OK. I'll wait until this hapens :-)) Thank you colomon.

[15:59] *** Psyche^ joined
[16:00] <pippo> colomon: any idea on how to get around this limitation and make some arithmetics with MixHashs?

[16:01] <pippo> also a push method seem non existent.

[16:01] <pippo> r: my MixHash $a; $a.^methods

[16:01] <camelia> rakudo-parrot c14a84, rakudo-jvm c14a84: ( no output )

[16:01] <pippo> r: my MixHash $a; say $a.^methods

[16:01] <camelia> rakudo-jvm c14a84: OUTPUT«at_key delete delete_key Mix MixHash Bag BagHash total grab Bool pickpairs invert of roll values categorize-list pick elems Int grabpairs ACCEPTS Num pairs hash keys BUILD Numeric list classify-list new-fp Real new default exists exists_key gist Str perl␤»

[16:01] <camelia> ..rakudo-parrot c14a84: OUTPUT«at_key delete delete_key Mix MixHash Bag BagHash default total new-fp grab pick roll BUILD keys values elems exists exists_key Bool hash invert new ACCEPTS list pairs grabpairs pickpairs classify-list categorize-list Int Num Numeric Real of gist Str perl␤»

[16:02] *** Psyche^_ left
[16:03] <colomon> pippo: set_operators.pm has the code for (+) at line 212.  Pretty trivial to copy-n-paste the code and switch it to MixHash

[16:04] <pippo> colomon: Yep! I'll try :-))

[16:04] <colomon> If lizmat++ doesn't beat me to it, I can probably fix (+) to do the right thing in the next day or two

[16:05] <pippo> ++colomon

[16:06] *** isBEKaml left
[16:07] <dalek> rakudo-star-daily: 083214e | coke++ | log/ (5 files):

[16:07] <dalek> rakudo-star-daily: today (automated commit)

[16:07] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/083214e8ca

[16:07] <dalek> perl6-roast-data: 4b7eae0 | coke++ | / (6 files):

[16:07] <dalek> perl6-roast-data: today (automated commit)

[16:07] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/4b7eae025f

[16:16] <FROGGS> p: say qq:to/EOF/ ~~ /\t/;␤\thello␤EOF␤# the tab is preserved

[16:16] <camelia> rakudo-parrot c14a84: OUTPUT«｢  ｣␤␤»

[16:17] <FROGGS> p: say qq:to/EOF/ ~~ /\t/;␤    \thello␤    EOF␤# now it is gone

[16:17] <camelia> rakudo-parrot c14a84: OUTPUT«Nil␤»

[16:17] <FROGGS> rakudobug?

[16:18] <pippo> colomon: dont know if it is good idea. Do you think SetHash, BagHash and MixHash deserve a push method? Should be trivial to implement using (+)? 

[16:20] <colomon> you can always say $bag<key> += 3 (I think)

[16:21] <colomon> r: my $mix = {a => 2.1}.MixHash; say $mix; $mix<a> += 2; say $mix

[16:21] <camelia> rakudo-parrot c14a84, rakudo-jvm c14a84: OUTPUT«MixHash.new(a(2.1))␤MixHash.new(a(4.1))␤»

[16:21] <pippo> I was thinking at {a => 3.1}MixHash.push(b => 3.3);

[16:21] <pippo> I was thinking at {a => 3.1}.MixHash.push(b => 3.3);

[16:21] <colomon> r: my $mix = {a => 2.1}.MixHash; say $mix; $mix<b> += 2; say $mix

[16:21] <camelia> rakudo-jvm c14a84: OUTPUT«MixHash.new(a(2.1))␤MixHash.new(b(2), a(2.1))␤»

[16:21] <camelia> ..rakudo-parrot c14a84: OUTPUT«MixHash.new(a(2.1))␤MixHash.new(a(2.1), b(2))␤»

[16:23] *** mtk left
[16:25] <pippo> Yes. It works. But I was thinking for consistency. Like for the Hash type where you also could do both (i.e. %h.push(b =>1) or %h<b> =1). 

[16:26] <jferrero> Rakudo Perl 6 Wikipedia Page will be deleted: "Not notable" https://en.wikipedia.org/wiki/Wikipedia:Articles_for_deletion/Rakudo_Perl_6

[16:26] *** mtk joined
[16:26] <colomon> yeah, maybe

[16:27] <Rotwang> tadzik: wouldn't it be better if the whole Build.pm thing was executed in the beginning of the build method of the Panda::Builder?

[16:27] <preflex>  Rotwang: you have 1 new message. '/msg preflex messages' to read it.

[16:29] *** arnsholt left
[16:30] <Rotwang> FROGGS: I don't think inlining is the best thing to do in my case

[16:31] *** pat_js joined
[16:33] <FROGGS> Rotwang: it compiles a C source text to a dll and makes the function(s) available to perl

[16:33] <FROGGS> Rotwang: what is your plan?

[16:34] <Rotwang> FROGGS: https://github.com/Rotwang/digest-xxhash

[16:34] <Rotwang> so I have this c source code with xxHash implementation

[16:34] <Rotwang> I'd have to copy it to a perl file, which isn't pretty imo

[16:35] <Rotwang> so I'm using NativeCall and cmake for compilation

[16:35] <Rotwang> but having some issues with Panda :C

[16:36] <FROGGS> Rotwang: what if you create a Build.pm which takes the C source and does what Inline::C does?

[16:36] *** atroxaper left
[16:36] <FROGGS> then you would map the functions

[16:36] <FROGGS> this Build.pm is picked up by panda btw

[16:37] <colomon> pippo: I'm not saying it's a terrible idea, but it's 1) not really doing the same thing as Hash.push, which is all about Hashes of arrays and 2) it's easily done the way I did it there.

[16:37] <Rotwang> FROGGS: so inline c compiles c code every time it is used

[16:38] <FROGGS> Rotwang: atm yes

[16:38] <FROGGS> atm there is no way to tell it: hey, name the created lib xyz

[16:38] <Rotwang> in my use case it is better to do that at the install time

[16:39] <FROGGS> sure

[16:40] *** laidback_01 joined
[16:40] <Rotwang> that's why all of my files to be installed are generated in Build.pm, but panda doesn't like that apparently

[16:41] <FROGGS> but it should

[16:41] <pippo> colomon: I understand. And you are right it is easily done as you showed above. So there is no need for that .push. At least for now :-) 

[16:41] <Rotwang> I agree, Build.pm is executed after Panda finds which files to install: https://github.com/tadzik/panda/blob/master/lib/Panda/Builder.pm

[16:41] <Rotwang> line 63

[16:42] <Rotwang> if it happened above my @files, everything would be fine and dandy ;]

[16:44] <FROGGS> sounds you should make a pull request :o)

[16:44] <Rotwang> FROGGS: anyway, thanks for tips

[16:55] *** kaare_ left
[17:13] *** odoacre left
[17:13] *** aindilis left
[17:13] *** ponbiki left
[17:13] *** djanatyn left
[17:15] *** wsri joined
[17:15] *** djanatyn joined
[17:16] *** aindilis joined
[17:16] *** ponbiki joined
[17:16] *** eternaleye joined
[17:16] *** ponbiki is now known as Guest41346

[17:19] *** odoacre joined
[17:21] *** krunen joined
[17:22] *** wooden left
[17:24] *** eternaleye left
[17:24] *** eternaleye joined
[17:27] *** wooden joined
[17:28] <dalek> rakudo/nom: 1747273 | (Timo Paulssen)++ | src/core/Nil.pm:

[17:28] <dalek> rakudo/nom: method calls and hash/array access on Nil gives Nil.

[17:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/174727377f

[17:29] <timotimo> pretty easy all in all; just got distracted a whole lot

[17:34] <TimToady> timotimo++

[17:36] <TimToady> FROGGS: definitely a bug on the say qq:to/EOF/ thing

[17:37] <TimToady> it's removing the tab instead of removing the four spaces

[17:37] <dalek> roast: 5ffc8ff | (Timo Paulssen)++ | S02-types/nil.t:

[17:37] <dalek> roast: tests for Nil.method/.[]/.{}/[]/{}

[17:37] <dalek> roast: review: https://github.com/perl6/roast/commit/5ffc8ff497

[17:38] <TimToady> I would argue the \t should not even have turned into a tab yet when the four spaces ought to have been removed

[17:39] <TimToady> since the latter should be an AST transformation that looks for literal nodes

[17:41] <TimToady> and \t is not a literal tab

[17:45] <TimToady> huh, STD's heredoc parsing has bitrotted on indented terminators :(

[17:46] <TimToady> I wonder what changed...

[17:47] <timotimo> :(

[17:47] <FROGGS> TimToady: I already masak'd the bug :o)

[17:48] <timotimo> didn't find any RT tickets for the Nil behavior with methods and postcircumfixes

[17:48] <timotimo> and i don't know how to get Iterator out of the mro of Nil.

[18:01] *** Gothmog_ joined
[18:14] *** BenGoldberg joined
[18:14] *** Grimnir_ joined
[18:31] *** colomon left
[18:50] *** benabik left
[18:51] *** rindolf left
[19:07] *** ajr joined
[19:07] *** ajr_ left
[19:07] *** ajr is now known as Guest98986

[19:08] <Rotwang> r: Str ~~ s/$/a/

[19:08] <camelia> rakudo-jvm 174727: OUTPUT«(timeout)»

[19:08] <camelia> ..rakudo-parrot 174727: OUTPUT«␀␀␀[␀␀␀3␀␀␀1␀␀␀m␀␀␀=␀␀␀=␀␀␀=␀␀␀␀␀␀[␀␀␀0␀␀␀m␀␀␀S␀␀␀O␀␀␀R␀␀␀R␀␀␀Y␀␀␀!␀␀␀␀␀␀[␀␀␀3␀␀␀1␀␀␀m␀␀␀=␀␀␀=␀␀␀=␀…»

[19:08] <Rotwang> "Malformed replacement part; couldn't find final /" that's what camelia is trying to say

[19:09] <Rotwang> it seems that $/ is interpreted as scalar, I guess this shouldn't happen

[19:09] *** Ben_Goldberg joined
[19:10] <Rotwang> ?

[19:12] *** BenGoldberg left
[19:13] *** BenGoldberg joined
[19:13] *** Guest98986 left
[19:14] *** ajr_ joined
[19:14] *** Ben_Goldberg left
[19:14] <japhb> What's with all the NULs?

[19:16] <FROGGS> that is a messed up four byte encoding

[19:16] <japhb> At first I assumed just direct output of 32-bit-per-codepoint encoding, but there's a missing bit: the six NULs in a row before the second left bracket.

[19:18] <japhb> Maybe a control character that doesn't get output is at that byte position, hmmm

[19:18] <FROGGS> 001B

[19:18] <japhb> Yeah, ESC.  Eaten, I guess.

[19:19] <FROGGS> not by me :o)

[19:19] <FROGGS> though it is dinner time...  hmmm

[19:19] <Rotwang> ok, so what about this issue, is this a bug, should I report it? [;

[19:21] <japhb> Yeah, it's a bug (I'd say two, in fact).  Dunno if it's been reported before.

[19:22] *** davercc joined
[19:22] *** zakharyas joined
[19:25] <lizmat> colomon: will add MixHash related operators

[19:32] *** darutoko left
[19:57] *** benabik joined
[20:04] *** abnorman joined
[20:06] *** SamuraiJack_ left
[20:10] *** colomon joined
[20:13] *** ajr_ left
[20:21] *** ssutch joined
[20:35] *** xenoterracide joined
[20:38] *** ivanshma` is now known as ivanshmakov

[20:39] *** stevan_ joined
[20:40] *** stevan_ left
[20:40] *** kivutar joined
[20:40] *** xenoterracide left
[20:40] *** stevan_ joined
[20:40] *** stevan_ left
[20:42] *** stevan_ joined
[20:44] *** hoverboard joined
[20:49] *** xenoterracide joined
[20:51] *** denisboyun joined
[21:06] *** dmol left
[21:07] *** zakharyas left
[21:20] *** kivutar left
[21:22] *** Guest41346 is now known as ponbiki

[21:25] *** kivutar joined
[21:43] *** laidback_01 left
[21:45] *** denisboyun left
[21:47] *** denis_boyun joined
[21:48] <lizmat> colomon: for consistency's sake, this would also apply to (.) and (-)

[21:48] <tadzik> Rotwang: +1

[21:48] <preflex>  tadzik: you have 1 new message. '/msg preflex messages' to read it.

[21:49] <dalek> panda: 070ffcf | (Bartlomiej Palmowski)++ | lib/Panda/Builder.pm:

[21:49] <dalek> panda: run custom build method before finding files to install

[21:49] <dalek> panda: review: https://github.com/tadzik/panda/commit/070ffcf6ec

[21:49] <dalek> panda: ce648e7 | tadzik++ | lib/Panda/Builder.pm:

[21:49] <dalek> panda: Merge pull request #65 from Rotwang/master

[21:49] <dalek> panda: 

[21:49] <dalek> panda: run custom build method before finding files to install

[21:49] <dalek> panda: review: https://github.com/tadzik/panda/commit/ce648e757b

[21:49] <tadzik> I trust that it runs; I didn't test it :)

[21:51] <lizmat> timotimo: what happened to https://github.com/perl6/specs/commit/4c9c4666e0df739c708e1bd752ad61b4c18ffabc ?

[21:53] <lizmat> sleep now&

[21:54] *** Rotwang left
[21:55] *** johnmilton left
[21:56] *** kivutar_ joined
[21:56] *** kivutar left
[22:00] *** smls joined
[22:02] <smls> Which operators, exactly, have a corresponding mutator/assignment form in Perl 6?

[22:02] <smls> Like « $foo += 5; » for the addition operator, for example

[22:05] *** kivutar_ left
[22:06] <lue> smls: anything that makes sense in that position, I believe.

[22:06] <lue> p: my $a = 3; $a = 3 & 4; say $a.perl

[22:06] <camelia> rakudo-parrot 174727: OUTPUT«all(3, 4)␤»

[22:06] <lue> p: my $a = 3; $a &= 4; say $a.perl

[22:06] <camelia> rakudo-parrot 174727: OUTPUT«all(3, 4)␤»

[22:07] <smls> I'm asking because  I think  « @foo .= sort; »  is pretty nice :)

[22:08] <smls> And I'm wondering if there are any more positive surprises like that

[22:08] <lue> the following = is a metaoperator, so there's no hardcoded list for += things.

[22:08] <lue> http://perlcabal.org/syn/S03.html#Assignment_operators

[22:09] <smls> ah

[22:18] *** smls left
[22:18] *** smls joined
[22:23] <timotimo> lizmat: i need to copypaste the operators and it would be nice if somebody told me the wordings are acceptable or not

[22:23] *** nebuchadnezzar left
[22:25] <raydiak> r: my ¢foo = (1, 2); say ¢foo.perl;

[22:25] <camelia> rakudo-jvm 174727: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/A3eodCvo96␤Malformed my␤at /tmp/A3eodCvo96:1␤------> [32mmy [33m⏏[31m¢foo = (1, 2); say ¢foo.perl;[0m␤    expecting any of:␤        scoped declarator␤»

[22:25] <camelia> ..rakudo-parrot 174727: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tyLkl2wLDJ␤Malformed my␤at /tmp/tyLkl2wLDJ:1␤------> [32mmy [33m⏏[31m¢foo = (1, 2); say ¢foo.perl;[0m␤    expecting any of:␤        scoped declarator␤»

[22:25] <raydiak> ^ NYI?

[22:25] <timotimo> r: sub infix:<hooray>($a, $b) { ($a ** 5 + $b ** 5) ** (1/5) }; say 10 hooray 20; my $a = 10; $a hooray= 20; say $a;

[22:26] <camelia> rakudo-jvm 174727: OUTPUT«20.123466170855586␤20.123466170855586␤»

[22:26] <camelia> ..rakudo-parrot 174727: OUTPUT«20.1234661708556␤20.1234661708556␤»

[22:26] *** telex left
[22:28] *** telex joined
[22:32] <lue> raydiak: sigil ¢ does not exist (unfortunately. It's a particularly awesome-looking character for a sigil ☹)

[22:33] <raydiak> lue: end of S08 says it's a Capture

[22:34] <pippo> good * #perl6 !

[22:34] <lue> The end of S08 needs updating :)

[22:34] *** pippo left
[22:34] <raydiak> lue: how *do* I create a capture? :)

[22:34] <lue> r: my Capture $a; say $a.WHAT;

[22:34] <camelia> rakudo-parrot 174727, rakudo-jvm 174727: OUTPUT«(Capture)␤»

[22:34] *** nebuchadnezzar joined
[22:35] <raydiak> heh, right... thanks lue++

[22:40] <dalek> specs: beea531 | lue++ | S08-capture.pod:

[22:40] <dalek> specs: [S08] Minimal changes to Context Deferral, needs more attention.

[22:40] <dalek> specs: 

[22:40] <dalek> specs: Removed the @%a form because that's already defined as @(%a). The ¢a

[22:40] <dalek> specs: form doesn't exist anymore, however it's temporarily left in the spec

[22:40] <dalek> specs: because I'm not clear on what context deferral exactly is, much less why

[22:40] <dalek> specs: Capture and Parcel need to be treated separately for it.

[22:40] <dalek> specs: review: https://github.com/perl6/specs/commit/beea5316cd

[22:41] *** denis_boyun left
[22:46] *** daniel-s_ joined
[22:48] <timotimo> r: say \(1, 2, :foo).perl;

[22:48] <camelia> rakudo-parrot 174727, rakudo-jvm 174727: OUTPUT«Capture.new( list => (1, 2).list, hash => EnumMap.new("foo", Bool::True, ))␤»

[22:52] <raydiak> thanks timotimo++ - the backslash is what I was missing

[22:53] <timotimo> TimToady: i'm glad you took the time to go through all the tickets of perl6/spec :)

[22:53] <timotimo> yw, raydiak 

[23:05] *** pat_js left
[23:06] *** BenGoldberg left
[23:07] *** BenGoldberg joined
[23:10] *** wtw left
[23:10] *** ggoebel118 left
[23:10] *** wtw joined
[23:10] *** wtw left
[23:11] *** ggoebel118 joined
[23:11] *** Vlavv_ left
[23:13] *** logie joined
[23:18] *** Psyche^ is now known as Psyche

[23:23] *** wtw joined
[23:23] *** Vlavv_ joined
[23:26] *** ggoebel118 left
[23:31] *** ggoebel118 joined
[23:31] <lue> r: my $,test; say "alive"

[23:31] <camelia> rakudo-parrot 174727: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/hyZ9TXUet2␤Undeclared routine:␤    test used at line 1␤␤»

[23:31] <camelia> ..rakudo-jvm 174727: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/GLpNVd4xit␤Undeclared routine:␤    test used at line 1␤␤»

[23:32] <diakopter> r: $,$

[23:32] <camelia> rakudo-jvm 174727: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/2OuZIIfaaD␤Unsupported use of $, variable; in Perl 6 please use $*OUT.output_field_separator()␤at /tmp/2OuZIIfaaD:1␤------> [32m<BOL>[33m⏏[31m$,$[0m␤    expecting any of:␤        stat…»

[23:32] <camelia> ..rakudo-parrot 174727: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/ozfbN9nUTd␤Unsupported use of $, variable; in Perl 6 please use $*OUT.output_field_separator()␤at /tmp/ozfbN9nUTd:1␤------> [32m<BOL>[33m⏏[31m$,$[0m␤    expecting any of:␤        s…»

[23:32] <diakopter> r: my $; $,$

[23:32] <camelia> rakudo-jvm 174727: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/8ygEqOEFYA␤Unsupported use of $; variable; in Perl 6 please use real multidimensional hashes␤at /tmp/8ygEqOEFYA:1␤------> [32mmy $;[33m⏏[31m $,$[0m␤»

[23:32] <camelia> ..rakudo-parrot 174727: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/3kfJYKrU_1␤Unsupported use of $; variable; in Perl 6 please use real multidimensional hashes␤at /tmp/3kfJYKrU_1:1␤------> [32mmy $;[33m⏏[31m $,$[0m␤»

[23:33] <diakopter> r: my $ ; $,$

[23:33] <camelia> rakudo-parrot 174727: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/mnjlRPeAkX␤Unsupported use of $, variable; in Perl 6 please use $*OUT.output_field_separator()␤at /tmp/mnjlRPeAkX:1␤------> [32mmy $ ; [33m⏏[31m$,$[0m␤    expecting any of:␤       …»

[23:33] <camelia> ..rakudo-jvm 174727: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/yPDAjCKc9F␤Unsupported use of $, variable; in Perl 6 please use $*OUT.output_field_separator()␤at /tmp/yPDAjCKc9F:1␤------> [32mmy $ ; [33m⏏[31m$,$[0m␤    expecting any of:␤        sc…»

[23:44] *** itz_ left
[23:45] *** daniel-s_ left
[23:46] *** daniel-s_ joined
[23:46] *** itz joined
[23:48] *** hoverboard left
[23:49] *** spider-mario left
[23:51] *** Khisanth joined
[23:52] *** logie left
