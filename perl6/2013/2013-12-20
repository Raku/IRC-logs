[00:00] <lue> r: my Array[Int] @a = 1,2,3; say @a.perl; @a[1] = Mu; say @a.perl

[00:00] <camelia> rakudo-parrot 413650: OUTPUT«Type check failed in assignment to '@a'; expected 'Array[Int]' but got 'Int'␤  in method REIFY at gen/parrot/CORE.setting:8320␤  in method reify at gen/parrot/CORE.setting:7196␤  in method reify at gen/parrot/CORE.setting:7183␤  in method reify a…»

[00:00] <camelia> ..rakudo-jvm 413650: OUTPUT«Type check failed in assignment to '@a'; expected 'Array[Int]' but got 'Int'␤  in method REIFY at gen/jvm/CORE.setting:8294␤  in block  at gen/jvm/CORE.setting:7177␤  in block  at gen/jvm/CORE.setting:7167␤  in block  at gen/jvm/CORE.setting:7267␤…»

[00:00] <lizmat> r: my @a is default(42); say @a; say @a[0]:exists; @a[0] = Nil; say @a[0]:exists

[00:00] <camelia> rakudo-parrot 413650, rakudo-jvm 413650: OUTPUT«␤False␤True␤»

[00:01] <lizmat> even without the "is default":

[00:01] <lizmat> my @a; say @a; say @a[0]:exists; @a[0] = Nil; say @a[0]:exists

[00:01] <lizmat> r: my @a; say @a; say @a[0]:exists; @a[0] = Nil; say @a[0]:exists

[00:01] <camelia> rakudo-parrot 413650, rakudo-jvm 413650: OUTPUT«␤False␤True␤»

[00:01] *** dmol left
[00:02] <lizmat> lue: or are you agreeing with me  :-)

[00:02] <lue> Would I be able to, say, assign a Mu or Any to an Array[Int] to do what Nil does now?

[00:02] <lizmat> nope, not according to spec afaik

[00:02] *** telex left
[00:03] <lue> :/  I just like how Nil lets me set a spot as a type object / default value without me caring too much about it.

[00:03] <lue> .oO(maybe a new Nada thing for old Nil behavior? ☺)

[00:03] *** telex joined
[00:04] *** Ben_Goldberg is now known as BenGoldberg

[00:04] <lue> lizmat: I don't object to the ":delete synonym" behavior of Nil by the way. I just happen to like Nil's current behavior too :)

[00:04] <lizmat> the spec actually states: If the container's contents are deleted, the value is notionally set to the provided default value; this value may or may not be physically represented in memory, depending on the implementation of the container.  You should officially not care about that (much).

[00:05] <lizmat> but it's not consistent with :delete (is my feeling)

[00:05] <lue> lizmat: I suppose I'm thinking of times where my Array should really be a Buf, in terms of what I'm caring about :D

[00:06] <timotimo> i don't want to do the code moving :(

[00:06] <lizmat> anyways, busy day coming up and relatively early rise

[00:07] <lizmat> so sleep&

[00:08] <lue> ♞ lizmat o/

[00:17] *** cognominal left
[00:17] *** cognominal joined
[00:25] *** finanalyst joined
[00:26] *** BenGoldberg is now known as Ben_Goldberg

[00:26] *** Ben_Goldberg is now known as BenGoldberg

[00:34] *** colomon left
[00:35] *** colomon joined
[00:54] *** thou left
[01:02] *** jnap left
[01:13] *** Entonian joined
[01:18] *** rurban1 left
[01:21] *** Entonian left
[01:23] *** xenoterracide left
[01:23] *** xenoterracide joined
[01:29] *** xenoterracide left
[01:33] *** risou is now known as risou_awy

[01:33] *** risou_awy is now known as risou

[01:41] <dalek> specs: 2387578 | larry++ | S07-lists.pod:

[01:41] <dalek> specs: mention that we force sink context on some loops

[01:41] <dalek> specs: review: https://github.com/perl6/specs/commit/2387578626

[01:42] *** eternaleye left
[01:45] <TimToady> moritz: thinking about tap/map, I'd say map always returns a Supply that you can put further taps on, but a tap is an endpoint, and closing a tap is done from the user end rather than the supplier end

[01:49] *** risou is now known as risou_awy

[01:59] *** tgt left
[02:03] *** jnap joined
[02:08] *** jnap left
[02:21] *** gdey left
[02:25] *** eternaleye joined
[02:34] *** hummeleBop1 left
[02:42] * timotimo has had hiccups for about 1 hour now

[02:46] <colomon> :(

[02:46] <timotimo> makes it very hard to fall asleep

[02:48] <colomon> I can imagine.

[02:48] <timotimo> drinking a big glass of water didn't help

[02:50] <colomon> rj: say sprintf("%.1f", 1.969)

[02:50] <camelia> rakudo-jvm 413650: OUTPUT«1.0␤»

[02:50] <colomon> I am having problems recompiling nqp and the rakudo.

[02:52] <colomon> I fixed that test locally, I think, but I am having one heck of time getting rakudo rebuilt with my nqp changes.

[02:53] <colomon> I did it somehow, once.  But I don't know what I did.

[03:02] *** jnap joined
[03:06] <timotimo> i shall try lying down again :\

[03:07] *** dwarring left
[03:12] *** BenGoldberg left
[03:21] *** BenGoldberg joined
[03:31] *** risou_awy is now known as risou

[03:48] *** risou is now known as risou_awy

[03:50] *** gfldex left
[03:52] *** gfldex joined
[04:16] *** BenGoldberg left
[04:19] *** gdey joined
[04:20] *** jnap left
[04:21] *** kaleem joined
[04:24] *** gdey left
[04:47] *** kaleem left
[04:55] *** cognominal left
[04:58] *** preflex_ joined
[04:58] *** ChanServ sets mode: +v preflex_

[04:59] *** preflex left
[04:59] *** preflex_ is now known as preflex

[05:04] *** finanalyst left
[05:09] *** gdey joined
[05:14] *** eternaleye left
[05:14] *** eternaleye joined
[05:15] *** finanalyst joined
[05:17] *** gdey left
[05:18] *** [Sno] left
[05:21] *** jnap joined
[05:25] *** jnap left
[05:32] *** risou_awy is now known as risou

[05:39] *** SamuraiJack joined
[05:41] *** cognominal joined
[05:42] *** rurban1 joined
[05:48] *** risou is now known as risou_awy

[06:10] *** xenoterracide joined
[06:19] *** kaleem joined
[06:21] <moritz> TimToady: ok, thanks for the explanation

[06:22] *** dayangkun left
[06:22] *** [Sno] joined
[06:28] *** xenoterracide left
[06:34] *** dayangkun joined
[06:38] *** krunen left
[06:39] *** krunen joined
[06:42] *** rurban1 left
[06:47] *** gdey joined
[06:54] *** denis_boyun joined
[06:59] *** darutoko joined
[06:59] *** xenoterracide joined
[07:01] *** rurban1 joined
[07:10] *** denis_boyun left
[07:15] <[Coke]> [A

[07:17] <diakopter> ]

[07:18] <[Coke]> "ww"

[07:33] *** risou_awy is now known as risou

[07:38] *** xenoterracide left
[07:44] *** sqirrel joined
[07:49] *** risou is now known as risou_awy

[07:53] *** pochi_ joined
[07:54] *** sqirrel left
[07:54] *** pochi left
[07:56] *** rindolf joined
[07:58] *** FROGGS joined
[08:01] *** rurban1 left
[08:04] *** dmol joined
[08:04] *** darutoko- joined
[08:06] *** darutoko left
[08:23] *** jnap joined
[08:27] *** jnap left
[08:28] *** brrt joined
[08:30] *** Tene left
[08:31] *** djanatyn left
[08:32] *** Tene joined
[08:32] *** sqirrel joined
[08:33] *** djanatyn joined
[08:33] *** Piers joined
[08:33] *** logie left
[08:54] *** brrt left
[08:56] *** gdey left
[09:07] *** finanalyst left
[09:18] *** finanalyst joined
[09:21] *** pochi_ left
[09:22] *** pochi joined
[09:33] *** finanalyst left
[09:34] *** risou_awy is now known as risou

[09:37] *** salv0 joined
[09:45] *** ssutch left
[09:51] *** risou is now known as risou_awy

[09:54] *** fhelmberger joined
[10:01] *** rurban1 joined
[10:02] *** PZt left
[10:06] *** rurban1 left
[10:09] <clkao_> win 25

[10:24] *** jnap joined
[10:29] *** jnap left
[10:36] *** tgt joined
[10:44] *** sqirrel left
[10:50] <timotimo> o/

[10:50] <FROGGS> \o

[11:05] *** gfldex left
[11:09] <masak> clkao_: you win 25 internets :)

[11:09] <masak> oh o/, Perl6

[11:09] <masak> #perl6*

[11:11] <timotimo> hiccups ... nooooo :(

[11:14] * masak .oO( #firstworldproblems )

[11:28] *** lizmat_ joined
[11:30] *** lizmat_ left
[11:34] <timotimo> you may think it's funny, but it actually quite hurts :(

[11:34] *** risou_awy is now known as risou

[11:39] *** gfldex joined
[11:46] *** atroxaper joined
[11:51] *** risou is now known as risou_awy

[11:57] *** cognominal left
[12:05] *** GlitchMr left
[12:05] *** GlitchMr joined
[12:05] *** cognominal joined
[12:07] *** raiph left
[12:07] *** daniel-s joined
[12:29] *** logie joined
[12:33] *** logie left
[12:33] *** PZt joined
[12:35] *** sqirrel joined
[12:38] *** kaleem left
[12:50] *** daniel-s left
[12:53] <timotimo> no perl6 tuits have been spent yet today?

[12:53] *** daniel-s joined
[12:54] <tadzik> because it's friday: http://www.belarr.com/bakercat/

[12:55] <tadzik> (sound obligatory)

[12:56] *** denis_boyun joined
[13:05] <timotimo> te hiccups are back :\

[13:08] *** lizmat left
[13:13] *** lizmat joined
[13:30] *** skids left
[13:30] *** salv0 left
[13:35] *** risou_awy is now known as risou

[13:37] *** finanalyst joined
[13:45] *** ajr joined
[13:46] *** ajr is now known as Guest52941

[13:47] *** Guest52941 is now known as ajr_

[13:47] *** gtxcomm left
[13:47] *** gtxcomm joined
[13:52] *** risou is now known as risou_awy

[13:53] *** gdey joined
[13:54] *** kaare__ joined
[13:57] *** PacoAir joined
[14:04] *** jnap joined
[14:05] *** tgt left
[14:05] *** araujo left
[14:05] *** tgt joined
[14:06] *** araujo joined
[14:07] *** SamuraiJack left
[14:18] *** daniel-s left
[14:25] *** lizmat_ joined
[14:26] *** lizmat_ is now known as liztormato

[14:26] *** rurban1 joined
[14:27] *** finanalyst left
[14:29] *** treehug88 joined
[14:29] *** liztormato left
[14:35] *** xenoterracide joined
[14:36] <jnap> just catching up on advent, and I have to say, http://perl6advent.wordpress.com/2013/12/16/day-16-slangs/  is very cool

[14:37] <jnap> I do wonder though if we need to support everything in Perl5 for it to be very useful.  Perhaps the subset of Perl5 we consider modern is fine?

[14:42] *** xinming left
[14:43] *** xinming joined
[14:46] *** bluescreen10 joined
[14:54] *** mtk left
[14:56] <FROGGS> jnap: my goal is that we can use Perl 5 modules, and these will tell us what v5 would need to support

[14:56] <colomon> jnap: I don't think… oh, he can speak for himself.  :)

[14:57] <FROGGS> :o)

[14:58] <colomon> FROGGS++ # nice post

[14:58] *** skids joined
[14:58] *** mtk joined
[14:58] <FROGGS> thanks

[14:58] <skids> timotimo: you know the glass-of-water is just a device to make you hold your breath.  CO2 calms the hiccup nerve.

[15:00] <jnap> FROGGS:  being able to pull in some important bits of my regular stack would really help.  DBIx::Class and Plack being the two most important things that I don't see coming to P6 anytime quickly.  But that involves DBI and so forth, so might be hard :(

[15:01] <jnap> I did see a PSGI/Plack perl6 project somewhere but not sure how evolved it was.  given how much more Perl6 has out of the box it might be worth revisting the PSGI spec and porting it to something that makes sense for Perl6

[15:04] <FROGGS> okay, then I target DBIx::Class (and its gazillion deps) when tackling the next things to do

[15:04] <moritz> XS!

[15:05] <FROGGS> O.o

[15:05] <FROGGS> ó.ò

[15:08] *** logie joined
[15:10] *** thou joined
[15:25] *** renormalist joined
[15:26] *** [Sno] left
[15:32] *** rurban1 left
[15:36] *** risou_awy is now known as risou

[15:41] *** jnap left
[15:42] *** FROGGS left
[15:45] *** ajr joined
[15:45] *** ajr_ left
[15:45] *** rurban1 joined
[15:45] *** ajr is now known as Guest28956

[15:48] *** Guest28956 is now known as ajr_

[15:50] *** hummeleB1 joined
[16:00] *** jnap joined
[16:05] *** fhelmberger left
[16:06] *** fhelmberger joined
[16:10] *** fhelmberger left
[16:20] <japhb> DBIx::Class and similar beasts are probably much more suited to implementation in Perl 6 than they were to Perl 5.  Having a strong metamodel and type system is pretty damn cool when you're creating interfaces to foreign data models.  (Speaking from Protocol Buffers experience.)

[16:20] *** FROGGS joined
[16:21] <japhb> Talking of which ...

[16:21] * japhb wonders whether to hack p6-pb, Net::IRC, or MAIN_HELPER

[16:21] <japhb> .oO( HACK ALL THE THINGS )

[16:22] <FROGGS> jnthn: are you still there?

[16:22] <japhb> FROGGS: I believe he has already begun his travels.

[16:22] <FROGGS> k

[16:22] <FROGGS> maybe somebody else can help, so I'll tell:

[16:23] <FROGGS> I try to access the symbols of an enum in sub EXPORT_SYMBOL in traits.pm, but I fail to do so... has somebody an idea?

[16:24] <japhb> p: say Enum.^mro

[16:24] <camelia> rakudo-parrot 413650: OUTPUT«(Enum) (Any) (Mu)␤»

[16:24] <japhb> say Enum.^methods

[16:24] <japhb> p: say Enum.^methods

[16:24] <camelia> rakudo-parrot 413650: OUTPUT«new BUILD invert key kv value keys values pairs fmt at_key FLATTENABLE_LIST FLATTENABLE_HASH of ACCEPTS Str perl␤»

[16:24] <FROGGS> japhb: I can't call these methods there...

[16:25] * japhb goes to look

[16:27] <japhb> Er, why can't you access those methods?

[16:27] <FROGGS> maybe they get added later?

[16:28] <japhb> Oh, hmmm.

[16:28] <FROGGS> traits.pm comes right after the prolog

[16:28] <japhb> prolog?

[16:29] <japhb> Oh, you mean, before most of the setting.

[16:30] <FROGGS> yeah

[16:30] <FROGGS> /usr/bin/perl tools/build/gen-cat.pl parrot src/core/core_prologue.pm src/core/traits.pm src/core/Positional.pm ...

[16:32] <japhb> p: enum Foo < bar baz >; say Foo.WHAT;

[16:32] <camelia> rakudo-parrot 413650: OUTPUT«(Foo)␤»

[16:32] <japhb> p: enum Foo < bar baz >; say Foo.^mro;

[16:32] <camelia> rakudo-parrot 413650: OUTPUT«(Foo) (Int) (Cool) (Any) (Mu)␤»

[16:33] <japhb> p: enum Foo < bar baz >; say bar.^mro;

[16:33] <camelia> rakudo-parrot 413650: OUTPUT«(Foo) (Int) (Cool) (Any) (Mu)␤»

[16:33] <japhb> p: enum Foo < bar baz >; say Foo.^roles;

[16:33] <camelia> rakudo-parrot 413650: OUTPUT«No such method 'roles' for invocant of type 'Perl6::Metamodel::EnumHOW'␤  in block  at /tmp/uUxmuttE_H:1␤  in any  at /tmp/uUxmuttE_H:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.nqp:1133␤  in any e…»

[16:34] <japhb> p: enum Foo < bar baz >; say Foo.HOW.WHAT

[16:34] <camelia> rakudo-parrot 413650: OUTPUT«(Perl6::Metamodel::EnumHOW)␤»

[16:34] <FROGGS> I think enum Foo results in a class Foo with bar and baz being nested classes... so I thought I can access it via .HOW

[16:34] <japhb> p: enum Foo < bar baz >; say Foo.HOW.^methods

[16:34] <camelia> rakudo-parrot 413650: OUTPUT«No such method 'gist' for invocant of type 'NQPRoutine'␤  in method gist at gen/parrot/CORE.setting:6807␤  in method gist at gen/parrot/CORE.setting:1014␤  in sub say at gen/parrot/CORE.setting:12960␤  in block  at /tmp/C2UVFjDoJ6:1␤  in any  a…»

[16:35] <japhb> p: enum Foo < bar baz >; .Str.say for Foo.HOW.^methods

[16:35] <camelia> rakudo-parrot 413650: OUTPUT«No such method 'Str' for invocant of type 'NQPRoutine'␤  in block  at /tmp/PEbTPvQXZw:1␤  in any  at /tmp/PEbTPvQXZw:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.nqp:1133␤  in any evalfiles at gen/p…»

[16:35] <FROGGS> p: enum Foo < bar baz >; say Foo.HOW

[16:35] <camelia> rakudo-parrot 413650: OUTPUT«Perl6::Metamodel::EnumHOW.new()␤»

[16:35] <japhb> p: enum Foo < bar baz >; say Foo.HOW.^methods>>.name

[16:35] <camelia> rakudo-parrot 413650: OUTPUT«archetypes new new_type add_enum_value enum_values enum_from_value enum_value_list compose set_composalizer composalize does_list set_name name set_stash_type add_stash add_attribute compose_attributes set_rw rw get_attribute_for_usage attributes add_met…»

[16:35] <FROGGS> p: enum Foo < bar baz >; say nqp::how(Foo)

[16:35] <camelia> rakudo-parrot 413650: OUTPUT«Perl6::Metamodel::EnumHOW.new()␤»

[16:36] <japhb> Ah-hah!

[16:36] <japhb> p: enum Foo < bar baz >; say Foo.^enum_values

[16:36] <camelia> rakudo-parrot 413650: OUTPUT«("bar" => 0, "baz" => 1).hash␤»

[16:37] <FROGGS> p: enum Foo < bar baz >; say Foo.HOW.enum_values(Foo) # I tried that

[16:37] <camelia> rakudo-parrot 413650: OUTPUT«("bar" => 0, "baz" => 1).hash␤»

[16:37] * japhb loves exploring around the metamodel

[16:38] * TimToady wonders how many geeks are drawn unconsciously into this by tickling the "met a model" neurons..

[16:38] <japhb> heh

[16:40] <japhb> Timbus: Did you want to do the concurrent version of Net--IRC yourself, or accept a PR for it?

[16:40] <TimToady> snowing here, which is yay in the "Californian who rarely sees snow" sense

[16:40] <japhb> TimToady: Where is "here"?

[16:40] <TimToady> Seattle

[16:41] <japhb> Ah.  Given that it's going to be in the 60's for the next week here, I'm doubting we'll get any precipitation at all, let alone snow.

[16:41] * TimToady realizes the Chicagoans are not particularly impresses by an inch or so of snow  :)

[16:41] <TimToady> *pressed

[16:42] <TimToady> well, yeah, SF is going to have the dryest calendar year on record

[16:42] <japhb> Having grown up in a snowy place, neither am I.  Sure fun to watch the rubes freak out, though.  :-)

[16:42] <TimToady> well, I also grew up here, so it's not like it's a brand new thing

[16:43] <TimToady> but having lived in LA and MV for the last, oh, 33 years, I haven't had much snow since then

[16:44] *** kaleem joined
[16:44] <TimToady> though it did, in fact, snow in the San Fernando Valley, and stuck 0.25" for the first time in living memory, just before we moved to the bay area

[16:44] <japhb> preflex: ask Timbus Did you want to do the concurrent version of Net--IRC yourself, or accept a PR for it?

[16:44] <preflex>  Consider it noted.

[16:44] <TimToady> Heidi made a snowman that was about 3 inches tall

[16:44] <japhb> heh

[16:45] <japhb> It's portable -- just not to anywhere warm.  :-)

[16:49] *** eternaleye left
[16:51] *** eternaleye joined
[16:59] *** kaleem left
[17:05] <FROGGS> japhb: `say sym.^enum_values;` results in an empty hash :o(

[17:05] *** [Sno] joined
[17:06] <FROGGS> wait

[17:07] <FROGGS> in this example, the export might even run before the enum elems are known: module Foo { enum NN is export <Abe Bay> }; import Foo

[17:07] <FROGGS> :/

[17:12] *** denis_boyun_ joined
[17:12] *** denis_boyun left
[17:15] *** atroxaper left
[17:19] *** gdey left
[17:21] *** rurban left
[17:23] *** denisboyun joined
[17:23] *** denis_boyun_ left
[17:24] *** rurban joined
[17:26] <FROGGS> damn it, that enum is created after exporting it

[17:27] <FROGGS> so I might need to store something like a call to REQUIRE_IMPORT in the ast

[17:27] <japhb> What does that do?

[17:28] *** sqirrel left
[17:30] <japhb> Ah, implements runtime import.

[17:33] *** REPLeffect joined
[17:33] *** [Sno] left
[17:39] *** denisboyun left
[17:41] <FROGGS> but... no, that would not work

[17:41] <FROGGS> I need the symbols at compile time

[17:41] *** [Sno] joined
[17:45] *** ajr joined
[17:45] *** ajr_ left
[17:46] *** ajr is now known as Guest90071

[17:46] *** Guest90071 is now known as ajr_

[17:46] *** gdey joined
[17:48] *** denisboyun joined
[17:59] *** denisboyun left
[18:00] *** denis_boyun joined
[18:01] *** treehug8_ joined
[18:01] <timotimo> is jnthn already long-time-afk?

[18:04] *** treehug88 left
[18:05] *** treehug8_ left
[18:06] *** denis_boyun left
[18:07] *** treehug88 joined
[18:09] <lizmat> timotimo: yes, he was travelling today to his family

[18:09] <preflex>  lizmat: you have 2 new messages. '/msg preflex messages' to read them.

[18:10] <lizmat> and am expecting he's spending some quality time afk

[18:12] *** ajr_ left
[18:13] *** sqirrel joined
[18:15] *** bluescreen10 left
[18:25] *** denisboyun joined
[18:27] *** kivutar joined
[18:28] *** Tedd1 joined
[18:30] <lizmat> this just in on perl6advent: ".defined is a verb (method), even though it's being used grammatically as an adjective. Yet, :delete is an adverb, but grammatically a verb. Why is .defined a verb but :exists an adverb? Those choices are a bit confusing to me"

[18:31] <lizmat> I'm not sure what to answer there, as I missed most of the discussions as to how and why

[18:32] *** denisboyun left
[18:36] *** ssutch joined
[18:42] *** darutoko- left
[18:43] *** Rotwang joined
[18:45] <timotimo> i wonder how to get the protected static inner class in my superclass

[18:45] <timotimo> i guess i'll just expose a method that does nothing but return a new instance of that class >_>

[18:45] *** ajr joined
[18:46] *** ajr is now known as Guest63742

[18:46] *** raiph joined
[18:46] *** Guest63742 is now known as ajr_

[18:46] <timotimo> oh my. i have to rebuild all of rakudo to get changes in the RakudoJavaInterop to stick :(

[18:46] <timotimo> this'll take a while :(

[18:51] <raiph> lizmat: fwiw I also thought "can I test definedness of a slice? why :exists but .defined?"

[18:58] <xenoterracide> are arrays in function parameters slurpy? can I do sub foo ( @bar, @baz ) { ... } ?

[19:07] <raiph> p: sub f(@a,*@b) {say @b}; f [1], 1,2,3 # this?

[19:07] <camelia> rakudo-parrot 413650: OUTPUT«1 2 3␤»

[19:09] *** [Sno] left
[19:09] <xenoterracide> probably, interesting

[19:10] *** FROGGS[mobile] joined
[19:24] <timotimo> i can't get nqp::jvmrakudointerop to work :(

[19:25] <timotimo> it says no such method 'jast' for invocant of type nqpmu

[19:30] *** treehug88 left
[19:31] <FROGGS[mobile]> so there is something null-ish again in your ast

[19:32] *** treehug88 joined
[19:33] *** eternaleye left
[19:33] *** eternaleye joined
[19:37] <moritz> when I run 'make m-test', all tests produce "No subtests run"

[19:37] *** ivanshmakov left
[19:37] <moritz> but when I run perl t/harness --moar t/01-sanity (which is what make m-test calls), all tests succeed

[19:39] <FROGGS[mobile]> moritz: can you change the merge=>1 to 0 and run m-test again?

[19:39] <FROGGS[mobile]> you should then see what fails

[19:39] *** sqirrel left
[19:39] <moritz> so "no subtests run"

[19:40] <FROGGS[mobile]> hmmm

[19:40] <FROGGS[mobile]> you are sure it passes --moar to t/harness?

[19:41] <moritz> yes

[19:41] <FROGGS[mobile]> weird

[19:41] <moritz> curiosuly changing the verbisoty to 1 make the tests pass to

[19:42] <moritz> except that t/01-sanity/20-defined.t fails an assetion in the end

[19:42] <moritz> moar: 3rdparty/libuv/src/unix/loop.c:150: uv__loop_delete: Assertion `!((((*(&(loop)->active_reqs))[0]) == (&(loop)->active_reqs)) == 0)' failed.

[19:42] <FROGGS[mobile]> both indicate a problem with stderr/stdout filehandles

[19:45] <FROGGS[mobile]> for one that we might need the fix that jnthn pushed as windows-only

[19:46] <FROGGS[mobile]> even when I think that a NYI thing for libuv on linux is unlikely

[19:48] <FROGGS[mobile]> a test would be to pipe both stderr and stdout to somewhere and see how reliable that is

[19:50] *** rindolf left
[19:50] <FROGGS[mobile]> if libuv gave us the same handle in both cases we were in trouble (as we are now)

[19:55] <FROGGS> moritz: that fail for you too? nqp-m -e 'nqp::say(42)' >>/dev/null 2>&1

[19:58] <timotimo> with optimize=0 and optimize=3 i don't get past Test.pm :(

[19:58] <timotimo> is that expected?

[19:59] *** treehug88 left
[19:59] <FROGGS> no, I had thought optimize=0 would work

[20:00] <moritz> FROGGS: it produces an exist status of 0

[20:00] <timotimo> should it get past Test.pm?

[20:01] <FROGGS> moritz: k, :o(

[20:01] <FROGGS> timotimo: yes

[20:01] <timotimo> :(

[20:01] <FROGGS> timotimo: what about --optimize=1 ?=

[20:02] <timotimo> i can try that

[20:02] <timotimo> and --debug?

[20:02] *** treehug88 joined
[20:02] *** ivanshmakov joined
[20:03] <FROGGS> doesn't hurt

[20:08] <FROGGS> moritz: I can't reproduce it on my box

[20:08] <moritz> FROGGS: :/

[20:10] *** bluescreen10 joined
[20:19] *** sqirrel joined
[20:20] *** Entonian joined
[20:26] *** Entonian left
[20:27] <FROGGS> is Perl 5's `goto &name` like our `nextwith &name`?

[20:28] <timotimo> should we get bindings to TkInter for perl6? so that we can has pretty UIs? :P

[20:30] *** colomon left
[20:31] *** colomon joined
[20:33] *** xenoterracide left
[20:36] <TimToady> FROGGS: no, would be more like &name.callsame

[20:37] <TimToady> well, .nextsame

[20:37] <FROGGS> k, thank you

[20:37] <TimToady> dunno if rakudo does the method form yet

[20:44] *** treehug88 left
[20:45] *** treehug88 joined
[20:49] *** Entonian joined
[20:52] *** Entonian left
[20:55] <lue> 🌲 hello world o/

[20:55] <dalek> rakudo/nom: 2b027b4 | (Tobias Leich)++ | src/core/Backtrace.pm:

[20:55] <dalek> rakudo/nom: addjust paths to new directory layout

[20:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2b027b4327

[20:56] *** autumn left
[20:57] *** Timbus left
[20:58] *** Timbus joined
[20:59] *** autumn joined
[20:59] *** sivoais_ joined
[20:59] *** sivoais left
[21:02] *** dayangkun left
[21:04] *** sivoais_ left
[21:05] *** sivoais joined
[21:11] *** rurban1 left
[21:11] <lue> TimToady: I just realized, we have a function that does "char" → Unicode properties, but no function to do properties → <list of chars> (to do things like  Foo(:Name(/:sPLAYING CARD/) for a deck of cards). I'm stuck on a name though :)

[21:11] <lue> My only good thought so far is propsuni, though that could easily get confusing.

[21:12] <FROGGS> propsuni does not sound very perlish

[21:13] <dalek> rakudo-star-daily: 3f2f537 | coke++ | log/ (5 files):

[21:13] <dalek> rakudo-star-daily: today (automated commit)

[21:13] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/3f2f537571

[21:13] <TimToady> do we need that function when we can just grep a list of chars?

[21:13] * [Coke] ponders writing his article.

[21:14] <moritz> or we can regex-search for uni props

[21:15] <lue> TimToady: I don't imagine a gather/take setup with uniprops($_.chr) for ^0x11_0000 is very efficient :/

[21:16] <lue> I just chose the :Name() property because it was the easiest one to write a valid example for. :)

[21:17] *** treehug88 left
[21:17] <TimToady> how would your function be more efficient than scanning all the entries?

[21:18] *** dayangkun joined
[21:19] <lue> TimToady: I noticed that. There's still the "a lot of people will want to do this at some point" thing in any case :)

[21:19] <TimToady> I guess the lists of chars are available for various properties, as long as it's a simple query

[21:20] <TimToady> but scanning names isn't going to be much more efficient than a grep of all chars with a regex for the uni prop

[21:20] <lue> TimToady: another idea is to add adverbs to &uniprops, to cut down on the search time.  uniprops($_, :Unicode_1_Name)  will only return Unicode_1_Name and na1 pairs in the Hash.

[21:20] <TimToady> don't over-engineer it

[21:20] <TimToady> but maybe that's okay

[21:21] *** treehug88 joined
[21:21] *** treehug88 left
[21:22] <lue> my @a; for ^0x11_0000 { @a.push(chr($_)) if uniprops(chr($_))<na1> ~~ /SIGN/ }   <-- I'm concerned over if this action will occur often enough for this snippet to be too much.

[21:22] *** sqirrel left
[21:22] <lue> (though it's easily within the realm of modules...)

[21:23] *** treehug88 joined
[21:24] <lue> If we go with an adverb in uniprops, I don't know if we'd want the adverb to return a Hash with Pairs for all the aliases for the property name, or if it's just the name you used.

[21:25] <lue> e.g. does uniprops($a, :na1) return a Hash of  Unicode_1_Name => "*", na1 => "*"  or just  na1 = "*"  ?

[21:25] <TimToady> my @a = do for ^0x11_0000 { my $c = .chr; $c if $c ~~ /:name(/SIGN>)/ }

[21:26] <TimToady> er, /<:name(/SIGN/)>/

[21:26] <TimToady> or sump'n like that

[21:27] <lue> there's that, I suppose :)

[21:27] <lue> It's just that I realized "hey waitaminute, how do I do that‽" . I see now that there are ways, and a custom-made function isn't guaranteed to fair better than the existing solutions.

[21:27] <lue> s/fair/fare/

[21:29] <lue> (Of course, limiting the area of your search helps there, e.g. for 0x10_0000..^0x11_0000 to not bother with the BMP.)

[21:32] <lue> And I'll refrain from adding adverbs to the uniprops function unless/until it's shown that uniprops("a" :Name) is much faster than uniprops("a")<Name>

[21:32] <FROGGS> TimToady: we have subscripts for arrays and hashes, can we have something like that for accessing object attributes too?

[21:33] <TimToady> how slow do you want it to run?

[21:35] <diakopter> all the slows

[21:35] *** kaare__ left
[21:36] <FROGGS> I basically want: class Foo { has $.a; has $.b }; my @a-and-b = Foo.new( :a(42), b(42) ).<<a b>> or so

[21:37] *** educated_poo joined
[21:37] <FROGGS> (a more beautiful version please :o)

[21:37] <educated_poo> Did I miss the December Rakudo release?

[21:39] <lue> FROGSS: Foo⁅bar⁆ ? :) [yeah, we'll probably have to play with Unicode to get something]

[21:39] <FROGGS> ohh, cleaning the screen doesnt help O.o

[21:40] <FROGGS> nah, would be cool if we could use < > in combination with ( )

[21:40] <lue> Even better: since you want a hash-y access for attributes (which you normally get with Foo.bar), I found a better bracket pair: Foo⦑bar⦒

[21:40] <FROGGS> .<(a b)> ? I guess that is too confusing

[21:40] <raydiak> Foo<{([| a b |])}> :)

[21:40] <FROGGS> hehe

[21:41] <FROGGS> raydiak: at least this one isnt takes yet *g*

[21:41] <FROGGS> taken*

[21:41] <TimToady> educated_poo: no, still in the works

[21:41] <lue> r: say "Foo\x[2993]bar\x[2994]"

[21:41] <camelia> rakudo-parrot 2b027b, rakudo-jvm 2b027b: OUTPUT«Foo⦓bar⦔␤»

[21:41] <lue> FROGGS: there's your < + (  ☺

[21:41] <educated_poo> Okay, thanks.

[21:42] *** educated_poo left
[21:42] <FROGGS> lue: my font does not like it :o(

[21:43] <lue> The stuff I've presented so far could have these Texas versions: [-bar-], <.bar.>, and <(bar)>

[21:43] * FROGGS .oO(  Foo:o(<a b>)  )

[21:43] <FROGGS> I like <(bar)>, but I have the urge to quote the bar there

[21:44] <lue> p: say <"bar">.perl; say «"bar"».perl

[21:44] *** jnap left
[21:44] <camelia> rakudo-parrot 2b027b: OUTPUT«"\"bar\""␤"bar"␤»

[21:45] <FROGGS> p: class Foo { has $.a; has $.b }; say Foo.^attributes

[21:45] <camelia> rakudo-parrot 2b027b: OUTPUT«Mu $!a Mu $!b␤»

[21:46] <ajr_> Overdoing the weird characters runs the risk of emulating APL and enjoying the same popularity.

[21:46] <FROGGS> p: class Foo { has $.a; has $.b }; say Foo.new( :a(42) ).^attributes(<$!a>) # I'd be happy if that does it

[21:46] <camelia> rakudo-parrot 2b027b: OUTPUT«Mu $!a Mu $!b␤»

[21:46] <lue> ajr_: we're too late. We have been since we decided to allow Unicode operators :D

[21:47] <lue> ajr_: we also have "Texas" versions of all the core Unicode-based operators.

[21:47] <FROGGS> lue: nah, important things are still ascii-ish

[21:47] <lue> ∪ is considered important in some circles :)

[21:48] <lue> (don't listen to me; I rather enjoy the look (if not feel) of APL)

[21:49] *** xenoterracide joined
[21:50] *** jnap joined
[21:51] <raydiak> I remember one of my former employers mocking Perl 6, with something like this in mind: http://upload.wikimedia.org/wikipedia/commons/9/9f/APL-keybd2.svg

[21:54] *** xenoterracide left
[21:56] <raydiak> anyway, I did have something on topic to ask: can the R* MSI install the JVM backend?

[21:57] *** rurban1 joined
[21:57] <FROGGS> raydiak: I have not seen patches which would make me think that

[21:58] <TimToady> R* does not yet support jvm, maybe next one

[22:00] * lizmat is tired and goes to bed

[22:00] <raydiak> thanks FROGGS++ and TimToady++ , all I needed to know for now...back to my spheres and cubes :)

[22:00] <FROGGS> :o)

[22:01] *** Tene left
[22:01] *** rurban1 left
[22:01] <FROGGS> if someone does the jvm+R*, I could support him/her

[22:02] *** djanatyn left
[22:03] <lue> raydiak: yeah, I don't like that keyboard. Not nearly as featureful as the Space Cadet.

[22:03] * lue &

[22:04] *** gfldex left
[22:06] *** djanatyn joined
[22:06] *** gfldex joined
[22:07] *** Tene joined
[22:10] <raydiak> lue: I've never used such a thing, but think I saw something similar in a nightmare once :)

[22:11] <raydiak> FROGGS: what does that entail, generally speaking?

[22:12] <FROGGS> build system hacking

[22:12] <FROGGS> and we would need to able to build the modules of course

[22:14] *** skids left
[22:19] <raydiak> I've been mulling over which ways I could best help, and it doesn't escape my notice that MSI releases are sporadic, and I have a windows box; where can I read about how the MSI is produced?

[22:22] <FROGGS> raydiak: here https://github.com/rakudo/star

[22:22] <FROGGS> I did the star release in august and september or so

[22:22] <treehug88> Hey TimToady : just wanted to personally thank you for perl and for making my software development life so, so much better. Thank you.

[22:23] <treehug88> ... and I know it's not JUST timtoady - so thanks to all the other players as well

[22:32] *** jeffreykegler joined
[22:42] *** raiph left
[22:48] *** xinming left
[22:49] *** xinming joined
[22:52] <raydiak> FROGGS: I'll read about it and hassle you if/when I pursue it; life is busy atm, but I would love to contribute something concrete sooner or later

[22:53] <FROGGS> raydiak: I'll be here :o)

[22:59] <raydiak> on a mostly unrelated note, there's another Pray image up, CSG is almost working, and releasing this year is still quite likely

[22:59] <FROGGS> \o/

[22:59] <FROGGS> raydiak++

[22:59] <raydiak> I hope spouting off about my own project here isn't too obnoxious...it's mostly b/c nobody around me IRL knows what any of that means :)

[23:00] <FROGGS> link?

[23:00] <raydiak> http://cyberuniverses.com/pray/#pray-image-8

[23:00] <[Coke]> editing in the wordpress editor is very annoying. I have a preformatted block. I'm trying to change the next paragraph to "paragraph" style. it changes the preformatted block also. ARGH.

[23:01] <FROGGS> raydiak: you need an environment map :o)

[23:01] <[Coke]> any pointers on how to edit stuff in wordpress ?

[23:04] *** xenoterracide joined
[23:04] <raydiak> FROGGS: what I need is much more powerful hardware...my $5/mo VPS isn't going to cut it much longer for running Pray :)

[23:04] <FROGGS> [Coke]: no idea

[23:05] <FROGGS> raydiak: how long does it take to render the last image?

[23:05] *** treehug88 left
[23:05] <[Coke]> and it loses leading spaces on preformatted code... wtf?

[23:06] <FROGGS> I remember the time when I rendered stuff using 3dsmax on a dual eleron 466MHz... most stuff took a day for a single image

[23:06] <raydiak> [Coke]: don't use the WYSIWYG editor?

[23:06] <[Coke]> raydiak: then I have to format it when I paste it in later. Just trying to save a step.

[23:06] <[Coke]> I cannot be the first advent poster to have this issue.

[23:06] <raydiak> FROGGS: it depends on a lot on the scene and there's a lot of polishing to be done, but the last image took somewhere in the 5-10 hour range, while I slept

[23:07] <FROGGS> yeah, and then you spot a glitch and you don't intent to sleep again for another 10 hours :/

[23:08] <raydiak> [Coke]: I had several issues with it, as I have with pretty much every web-based WYSIWYG HTML editor I've used in my lifetime

[23:08] <FROGGS> raydiak: do you know the brazil renderer plugin of 3dsmax?

[23:08] <raydiak> FROGGS: that's the game right now...last night's CSG render didn't come out like I was hoping either

[23:09] <raydiak> FROGGS: nope, I don't have much experience w/3dsmax

[23:09] <FROGGS> it rendered to independent buckets, and several threads an run in parallel where each renders a single bucket

[23:10] <FROGGS> so if you can render a, say, 32 by 32 pixel area in a channel on the jvm.... that might speed it up a "bit"

[23:10] <raydiak> hmmm...the p5 version of pray would SCP itself over the network and then call itself over ssh and wait for the results from each such node

[23:11] <raydiak> iow, multithreading is definitely in the works, and maybe poor man's clustering like I just described, too

[23:11] <FROGGS> ahh, so you can even run it on several machines for one image?

[23:11] <FROGGS> that is nice :o)

[23:13] <raydiak> it was out of necessity, in a way...the unofficial subtitle of the p5 version was "Pray (that you're still living by the time it's done rendering)"

[23:14] <raydiak> but that was like a decade ago, too, so hardware was slower

[23:16] *** PacoAir left
[23:22] <FROGGS> gnight

[23:22] <raydiak> \o

[23:22] *** xenoterracide left
[23:25] <lue> [Coke]: I personally type up my post in my good ol' text editor (just plain text for me, others differ), and then paste it into the non-WYSIWYG tab of editor, and do the sensitive handling of code blocks and stuff before I go back to WYSIWYG mode.

[23:25] <lue> (i.e. I keep Wp from applying destructive formatting changes until after I've protected what would be destroyed.)

[23:27] *** sftp_ joined
[23:28] *** sftp left
[23:32] *** xenoterracide joined
[23:38] *** xenoterracide left
[23:39] *** BenGoldberg joined
[23:40] *** skids joined
[23:51] *** raiph joined
[23:55] *** Entonian joined
[23:57] <japhb_> p: say 512 * 512 / (5 * 60 * 60)

[23:57] <camelia> rakudo-parrot 2b027b: OUTPUT«14.563556␤»

[23:57] *** xinming left
[23:58] <japhb_> So raydiak's latest image rendered at ~ 10 pixels per second.

[23:58] *** Entonian left
[23:58] *** BenGoldberg left
[23:58] *** xinming joined
[23:58] <japhb_> It would be fun to get an order of magnitude or two improvement there.

[23:58] *** BenGoldberg joined
