[00:18] *** berekuk left
[00:29] <sorear> adu: sure.  index and rindex are established names from V6 UNIX string.h and perl 5

[00:30] *** kurahaupo left
[00:37] *** crab2313 left
[01:04] *** sarella joined
[01:07] *** kurahaupo joined
[01:36] *** FROGGS_ joined
[02:02] <adu> sorear: I see

[02:25] *** xinming joined
[02:38] *** orafu joined
[02:51] *** kurahaupo left
[02:59] *** thou joined
[03:03] *** sarella left
[03:29] *** kurahaupo joined
[03:30] *** crab2313 joined
[03:59] *** thou left
[04:08] *** mikemol joined
[04:11] *** mikemol left
[04:13] *** xinming left
[04:14] *** xinming joined
[04:14] *** mikemol joined
[04:19] *** xinming left
[04:20] *** xinming joined
[04:24] *** Psyche^ joined
[04:25] *** xinming left
[04:27] *** xinming joined
[04:28] *** Psyche^ is now known as Patterner

[04:32] *** xinming left
[04:33] *** xinming joined
[04:44] *** xinming left
[04:46] *** xinming joined
[04:51] *** xinming left
[04:51] *** xinming joined
[04:53] *** crab2313 left
[04:58] *** xinming left
[05:03] *** xinming joined
[05:09] *** xinming left
[05:10] *** xinming joined
[05:11] *** rindolf joined
[05:30] *** rindolf left
[05:30] *** rindolf joined
[05:31] *** plobsing joined
[05:42] <dalek> rakudo/nom: abcbc47 | pmichaud++ | tools/build/NQP_REVISION:

[05:42] <dalek> rakudo/nom: Bump NQP_REVISION to get QRPA serialization capabilities.

[05:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/abcbc478eb

[05:42] *** rindolf left
[05:42] *** rindolf joined
[05:44] *** plobsing left
[05:48] *** rindolf left
[05:48] *** rindolf joined
[05:49] *** sqirrel joined
[05:50] *** lizmat joined
[05:53] *** woolfy joined
[06:00] *** rindolf left
[06:01] *** rindolf joined
[06:04] *** fhelmberger joined
[06:05] *** ingy joined
[06:10] *** SamuraiJack joined
[06:16] *** rindolf left
[06:17] *** rindolf joined
[06:19] *** FROGGS_ left
[06:22] *** frdmn joined
[06:28] *** kurahaupo left
[06:32] *** FROGGS_ joined
[06:34] <dalek> rakudo/nom: 08b6403 | pmichaud++ | src/ (2 files):

[06:34] <dalek> rakudo/nom: Speed up repeated shifts of large lists/arrays by 70%+ .

[06:34] <dalek> rakudo/nom: 

[06:34] <dalek> rakudo/nom: This commit switches to using QRPAs for most List $!items and

[06:34] <dalek> rakudo/nom: ListIter $!rest attributes, and slightly changes the algorithm to

[06:34] <dalek> rakudo/nom: more eagerly move "safe" values from a ListIter's $!rest array

[06:34] <dalek> rakudo/nom: into its "parent" List.

[06:34] <dalek> rakudo/nom: 

[06:34] <dalek> rakudo/nom: As a result, repeated shifts like

[06:34] <dalek> rakudo/nom:     @a.shift while @a;

[06:34] <dalek> rakudo/nom: now run significantly faster than previously -- on my system,

[06:34] <dalek> rakudo/nom: a 50,000 element array is processed by the above in 2.5 seconds

[06:34] <dalek> rakudo/nom: instead of 9.0 seconds (72% improvement).

[06:34] <dalek> rakudo/nom: 

[06:34] <dalek> rakudo/nom: More improvements are coming; this patch just gets a couple of

[06:34] <dalek> rakudo/nom: the current big bottlenecks out of the way.

[06:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/08b640344c

[06:41] *** rindolf left
[06:42] <FROGGS_> pmichaud: are the branches nqp/qrpa_experiment and https://github.com/timo/rakudo/qrpa_experiment worth anything?

[06:42] *** rindolf joined
[06:43] <FROGGS_> we have seen almost no speed improvement though when running the spectest suite

[06:43] <FROGGS_> (but it didn't get worse though)

[06:48] *** foop joined
[06:57] *** rindolf left
[06:58] *** rindolf joined
[07:04] <pmichaud> FROGGS_: I suspect that the commits jnthn and I made alleviate the need for the other branches.

[07:04] <pmichaud> also, I don't know that the qrpa improvements will significantly speed up the spectests.

[07:04] <pmichaud> afaik, the spectests don't contain a lot of large lists.

[07:05] <pmichaud> for smaller lists, the differences between rpa and qrpa aren't as significant.

[07:06] *** lizmat left
[07:06] *** woolfy left
[07:08] <FROGGS_> k

[07:09] <pmichaud> I probably should've checked to see the impact of the above commits on the spectests, though.  I'm also certain they didn't get slower, but they could've gotten a little faster.

[07:10] *** baest joined
[07:12] <FROGGS_> I guess 'stage parse' is as slow as usual too?

[07:12] *** FROGGS_ is now known as FROGGS

[07:13] <pmichaud> yeah, speeding that up needs some regex engine improvements.

[07:13] *** rindolf left
[07:13] <pmichaud> or some grammar improvements.

[07:14] *** rindolf joined
[07:14] *** lizmat joined
[07:14] <pmichaud> that's another place where we know of some possible improvements but just haven't had the right tuits to implement them.

[07:15] *** woolfy joined
[07:16] <pmichaud> anyway, time for sleep here -- bbl

[07:16] <FROGGS> gnight pmichaud 

[07:17] <FROGGS> pmichaud: btw: if you could write these ideas down... :o)

[07:21] <nwc10> good wee-small-hours-of-the-am, Pm

[07:21] <nwc10> oh, goodnight Pm

[07:23] <labster> good "just barely AM", nwc10 

[07:24] *** arnsholt joined
[07:27] <sorear> o/

[07:28] <FROGGS> hi you all :o)

[07:31] <moritz> \o

[07:33] <FROGGS> o/

[07:44] *** foop left
[07:48] *** rindolf left
[07:48] *** rindolf joined
[07:50] *** domidumont joined
[07:52] <FROGGS> r: say $~MAIN

[07:52] <camelia> rakudo 08b640: OUTPUT«[31m===[0mSORRY![31m===[0m␤Non-declarative sigil is missing its name␤at /tmp/uVgQSJJTzi:1␤------> [32msay $[33m⏏[31m~MAIN[0m␤    expecting any of:␤        argument list␤        prefix or term␤        prefix or meta-prefix␤»

[07:55] *** domidumont left
[07:56] *** domidumont joined
[07:58] *** woolfy left
[07:58] *** lizmat left
[07:58] *** tgt joined
[07:59] *** SamuraiJack left
[08:01] *** lizmat joined
[08:03] <labster> What's the difference between "my Type sub {...}", "my sub (--> Type) {...}", "my sub returns Type {...}", and "my sub of Type { ... }"?

[08:03] *** berekuk joined
[08:04] *** woolfy joined
[08:04] <lizmat> morning #perl6

[08:04] <FROGGS> I hope there is no difference

[08:04] <FROGGS> morning lizmat 

[08:04] <lizmat> labster: not a lot, if anything?

[08:05] *** tgt left
[08:06] <labster> The first two are introduced in S06, the last two in S02

[08:07] *** kresike joined
[08:07] <FROGGS> I think it is just like providing something for everyones taste

[08:07] <kresike> hello all you happy perl6 people

[08:07] <FROGGS> hi kresike 

[08:07] <kresike> FROGGS, o/

[08:07] <labster> TIMTOWTDI, I guess.

[08:07] <FROGGS> right

[08:08] <FROGGS> r: my $s = my sub of Int { 42 }

[08:08] <camelia> rakudo 08b640: OUTPUT«[31m===[0mSORRY![31m===[0m␤Missing block␤at /tmp/nms0nKJHSf:1␤------> [32mmy $s = my sub of [33m⏏[31mInt { 42 }[0m␤    expecting any of:␤        scoped declarator␤        new name to be defined␤»

[08:08] <FROGGS> r: my $s = my sub returns Int { 42 }

[08:08] <camelia> rakudo 08b640: OUTPUT«[31m===[0mSORRY![31m===[0m␤Missing block␤at /tmp/JprVMRdn35:1␤------> [32mmy $s = my sub returns [33m⏏[31mInt { 42 }[0m␤    expecting any of:␤        scoped declarator␤        new name to be defined␤»

[08:08] <labster> r: my $s = my sub name returns Int { 42 }

[08:08] <camelia> rakudo 08b640:  ( no output )

[08:09] <FROGGS> ahh, yeah

[08:09] <FROGGS> that clashes a bit

[08:09] <FROGGS> r: my $s = my sub name of Int { 42 }

[08:09] <camelia> rakudo 08b640:  ( no output )

[08:09] <FROGGS> okay, I knew the first three are working, but wasn't sure about the last one

[08:14] *** domidumont left
[08:15] *** domidumont joined
[08:15] *** lizmat left
[08:16] *** woolfy left
[08:17] <pmichaud> perlgeek.de is down?

[08:17] <FROGGS> since friday or so

[08:17] <moritz> pmichaud: yes, the hardware is dead-ish :(

[08:18] <labster> R.I.P., perlgeek.de server.

[08:18] *** lizmat joined
[08:18] <pmichaud> eek!  so we have no logs?

[08:19] <pmichaud> did they move somewhere?

[08:19] <moritz> http://colabti.org/irclogger/irclogger_log/perl6?date=2013-04-29 # not mine

[08:19] *** woolfy joined
[08:20] <FROGGS> ohh cool

[08:20] <moritz> they even "stole" my CSS (with permission)

[08:20] <pmichaud> hardware dead-ish ===> logs from perlgeek.de have been lost?

[08:20] <pmichaud> as in storage unit cratered?

[08:22] <moritz> pmichaud: the storage is probably OK, and I have nightly backups of the database

[08:22] *** Targen joined
[08:23] <lizmat> moritz: if there is anything that Dijkmat could do, please let me know

[08:23] <moritz> if it doesn't come up in the next few days, I'll have to look for a replacement VM

[08:23] <sorear> can it be rehosted?  is the ilogger code lost?

[08:23] <FROGGS> moritz: can you put that url in the topic?

[08:23] <moritz> sorear: no code lost, and little data (at most a day of logs)

[08:24] <pmichaud> I'd be in favor of finding/dedicating resources (e.g. money) to restoring that service.

[08:24] <FROGGS> well, this data can be recovered...

[08:24] <sorear> moritz: \o/

[08:24] <pmichaud> I use the logs... like, all of the time.

[08:24] <FROGGS> me too

[08:24] *** ChanServ sets mode: +o moritz

[08:24] *** moritz changes topic to: »ö« Welcome to Perl 6! | http://perl6.org/ | evalbot usage: 'perl6: say 3;' or rakudo:,  niecza:, std:, or /msg camelia perl6: ... | irclog: http://irc.perl6.org/ | UTF-8 is our friend! ! temporary logs at http://colabti.org/irclogger/irclogger_log/perl6

[08:24] <FROGGS> we have a pretty useful toolchain here, seems like we are used to it now :o)

[08:25] <moritz> I'll investigate how much a separate VM costs

[08:25] *** moritz sets mode: -o moritz

[08:25] <moritz> I happen to work at a hoster, and I think they have a discount for employers

[08:25] <pmichaud> Please do.  If you want to investigate putting the service onto my virtual host, we can do that, too.

[08:25] <FROGGS> moritz: we maybe even could afford an own root server

[08:26] <pmichaud> s/virtual host/virtual private server/

[08:26] <pmichaud> I'd even use it as a reason to bump up the memory capacity on my vps

[08:27] <pmichaud> anyway, keep me posted.

[08:27] <pmichaud> I'm headed back to bed... fortunately Google Cache had the logs I was looking for.  :-)

[08:28] <lizmat> gnight pmichaud!

[08:31] <jnthn> morning, #perl6

[08:31] <labster> morning, jnthn 

[08:33] <FROGGS> morning jnthn 

[08:33] <lizmat> jnthn++

[08:34] <jnthn> yay, pmichaud++ patches \o/

[08:37] <nwc10> IIRC at the moment you hacked it so that QRPA serialises as RPA. But Pm gave speedup figures that implied that his QRPAs are staying as QRPAs. When do they get serialised? (ie what previously didn't work with QRPAs?)

[08:37] *** arnsholt left
[08:37] *** crab2313 joined
[08:37] *** arnsholt joined
[08:40] <jnthn> nwc10: I guess it woulda shown up at any point you serialized a Perl 6 array/list/parcel

[08:40] <nwc10> doesn't the compiler serialise things?

[08:41] <nwc10> I fear I'm asking stupid questions here.

[08:41] <labster> Okay, I have IO::Path working on three platforms (unix/posix, win32, and cygwin).  It required that most of File::Spec be integrated, to work as a backend.  But now that it's there, is the low-level path stuff in IO::Spec something we want to go ahead and add to the spec?  Or should the extraneous stuff (like tmpdir) be refactored out of the core?

[08:46] <lizmat> seems you're getting warnocked

[08:47] <moritz> labster: what approach looks easier to you?

[08:48] <lizmat> seems to me that this functionality has proven its usefulness in Perl 5 already, so why not add it to the spec?

[08:49] <FROGGS> I'd say +1 even if I'm not entirely objective

[08:50] *** crab2313 left
[08:51] <lizmat> afk&

[08:52] <FROGGS> I mean, Datetime is in core, and so belongs the basics of file IO

[08:53] *** dakkar joined
[08:54] <nwc10> tempfile and tempdir are really useful things for building and testing.

[08:54] <moritz> aye, there are places in roast where we could really use them, and now we're doing some unsafe ad-hoc stuff instead

[08:54] <nwc10> if the standard implementations of those aren't easier to use than "rolling your own", then some people will roll their own insecure versions

[08:54] <labster> Eh, I don't have tempfile yet... Though I wouldn't mind setting $*TMPDIR or something.

[08:56] *** berekuk left
[08:57] <FROGGS> labster: https://github.com/FROGGS/p6-Inline-C/blob/master/lib/Inline/C.pm#L118

[08:57] *** JamesTaylor joined
[08:59] <labster> FROGGS: https://github.com/labster/p6-File-Spec-Case/blob/master/lib/File/Spec/Case.pm#L49  I'm just as bad.

[08:59] <FROGGS> :o)

[09:07] <FROGGS> does someone like to review/comment on that? https://gist.github.com/FROGGS/fbb4455f544a35cf265d

[09:07] <FROGGS> that is about what $~Slang should be

[09:10] *** berekuk joined
[09:12] <labster> I'd like to comment, but I fear this is a little beyond me :o)

[09:13] <FROGGS> hmmm

[09:13] <labster> some day, I will learn how to grammar.

[09:13] <FROGGS> what do you expect when seeing a slang variable? just the grammar? or grammar + actions?

[09:14] <moritz> I guess it needs both to be useful

[09:14] *** arnsholt left
[09:14] <FROGGS> for me the grammar itself is a bit useless without the actions...

[09:14] <FROGGS> ya..

[09:15] <FROGGS> I guess I test it locally, and if it makes it easier to set a slang, then it is the right way :o)

[09:16] <labster> Yeah, grammar without actions for a slang doesn't seem useful.

[09:18] <sorear> the slang variables are just the grammar.  which is useful internally

[09:18] *** arnsholt joined
[09:18] <sorear> defining new operators modifies $~MAIN, which is an exact synonym for %?LANG<MAIN>

[09:19] <FROGGS> hmmm, but if you have no actions for the added operators, it will still dont work, right?

[09:20] <sorear> right.  this is something that needs to be resolveds

[09:20] <FROGGS> in rakudo's code, after mixin in stuff, $*ACTIONS is set

[09:20] <sorear> sleep&

[09:20] <FROGGS> gnight

[09:26] *** tgt joined
[09:34] *** daxim joined
[09:36] <tadzik> heh, golang is years behind Perl 6 in terms of module ecosystem :P

[09:37] <tadzik> I just added some code of mine to it, consisted of adding a URL to the wiki page

[09:37] * FROGGS .oO( almost decades O.o )

[09:37] <tadzik> to be fair, the module installer is built-in, and is as simple as 'go get github.com/tadzik/reddit.go' or something

[09:38] <nwc10> coooooool. I'm going hack github's DNS and see who I can pwn...

[09:40] <tadzik> I'm soo porting their JSON thing to Perl 6

[09:40] <tadzik> it's a bit like XML::Rabbit for P5

[09:47] <jnthn> .oO( Will it have an easter egg? :) )

[09:48] <FROGGS> a bit late ehh?

[09:48] <FROGGS> :P

[09:53] *** tgt left
[10:03] *** sqirrel left
[10:11] *** domidumont left
[10:11] <dalek> nqp: 1d92734 | jnthn++ | src/vm/parrot/6model/serialization.c:

[10:11] <dalek> nqp: Invocation protocol serialization.

[10:11] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1d927341a9

[10:11] *** domidumont joined
[10:26] *** ibo22 joined
[10:31] *** cognominal joined
[10:32] <dalek> nqp: 5a3dfd2 | jnthn++ | src/vm/parrot/pmc/sixmodelobject.pmc:

[10:32] <dalek> nqp: Fix handler case of invocation spec.

[10:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/5a3dfd2294

[10:40] <dalek> rakudo/jvm-support: 86a475e | jnthn++ | / (6 files):

[10:40] <dalek> rakudo/jvm-support: Use VM-independent invocation protocol.

[10:40] <dalek> rakudo/jvm-support: 

[10:40] <dalek> rakudo/jvm-support: This eliminates a bunch of usages of Parrot v-table stuff in BOOTSTRAP

[10:40] <dalek> rakudo/jvm-support: and the MOP. No regressions.

[10:40] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/86a475e73d

[11:01] *** test joined
[11:07] <nwc10> the goalposts are moving faster than I can benchmark them.

[11:08] <jnthn> nwc10: Well, these aren't likely to be making much impact. They're mostly re-organizations.

[11:10] *** immortal joined
[11:15] *** immortal left
[11:38] <dalek> Heuristic branch merge: pushed 149 commits to nqp/cont by jnthn

[11:41] *** ibo22 left
[11:47] *** mmcleric joined
[11:55] <lizmat> FROGGS: not much too add wrt https://gist.github.com/FROGGS/fbb4455f544a35cf265d

[11:55] <lizmat> as I'm not grokking that part of Perl 6 enough yet

[11:55] <lizmat> still waiting for "goto" in Perl 6 so I can write a GWBASIC slang  :-)

[11:55] <lizmat> (as an excercise)

[11:57] *** woosley joined
[11:59] <FROGGS> ohh cool

[12:00] <FROGGS> we should have a proper slang-code-preset at that time

[12:02] <lizmat> still, I don't see how I can do it without having goto work in rakudo

[12:03] *** birdwindupbird joined
[12:05] <FROGGS> ya, that was what I meant by "at that time"

[12:06] <FROGGS> I believe diakopter volunteered for goto

[12:10] *** tgt joined
[12:11] *** arnsholt left
[12:15] *** bluescreen10 joined
[12:15] <timotimo> pmichaud: nice :)

[12:16] *** arnsholt joined
[12:20] *** xenoterracide joined
[12:21] *** arnsholt left
[12:21] <diakopter> FROGGS: hah.

[12:23] *** fhelmberger left
[12:33] *** ozmq joined
[12:36] *** saxx joined
[12:41] <FROGGS> diakopter: was that wrong?

[12:41] <FROGGS> my problem is that I have no idea how to GOTO into another branch of an AST

[12:42] <FROGGS> but I guess there are docs about that :/

[12:42] * colomon has been burned by Rakudo's for's unlaziness yet again.

[12:43] <FROGGS> I usually get burned by my own thinko's :/

[12:43] <colomon> FROGGS: well, the lazy stream wasn't supposed to be infinite, so you can argue that either way!

[12:46] <daxim> http://isup.me/http://irclog.perlgeek.de/

[12:49] *** AMENDEES_ joined
[12:49] <dalek> rakudo/jvm-support: f19881b | jnthn++ | src/ (31 files):

[12:49] <dalek> rakudo/jvm-support: Eliminate nqp::p6decont for plain nqp::decont.

[12:49] <dalek> rakudo/jvm-support: 

[12:49] <dalek> rakudo/jvm-support: We'll attach the Rakudo semantics/optimization directly to the type

[12:49] <dalek> rakudo/jvm-support: using the new container spec handling.

[12:49] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/f19881b1d7

[12:49] <dalek> rakudo/jvm-support: c5b3c05 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[12:49] <dalek> rakudo/jvm-support: Update nqp::setcontspec usages for new protocol.

[12:49] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/c5b3c05ca4

[12:49] <dalek> rakudo/jvm-support: c8b1e96 | jnthn++ | src/ (5 files):

[12:49] <dalek> rakudo/jvm-support: Adopt the new container spec model.

[12:49] <dalek> rakudo/jvm-support: 

[12:49] <dalek> rakudo/jvm-support: This doesn't go quite so far as the last attempt to do this. It does

[12:49] <dalek> rakudo/jvm-support: enough to get the cleaner/more extensible API and a small type safety

[12:49] <dalek> rakudo/jvm-support: (and perhaps minor performance) win, plus will be easier to implement

[12:49] <dalek> rakudo/jvm-support: on the JVM.

[12:49] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/c8b1e964e1

[12:50] <jnthn> Ah, dammit...

[12:51] <jnthn> Branch management fail.

[12:51] *** arnsholt joined
[12:51] *** saxx left
[12:51] <pmichaud> colomon: is the unlaziness burn postable?

[12:51] *** sqirrel joined
[12:52] <jnthn> OK, I'm gonna have to have a separate nqp branch to go with the Rakudo jvm-support branch.

[12:52] <jnthn> And merge 'em both down the line.

[12:52] <nwc10> jnthn: http://justinhileman.info/article/git-pretty/

[12:52] <nwc10> particularly the two questions at the bottom left. :-)

[12:53] <jnthn> nwc10: tbh, it's not such a big deal

[12:53] <jnthn> nwc10: Just that anyone wanting to build Rakudo's jvm-support branch is gonna have to build a different nqp branch than master, and I'll have to work in a different nqp branch too.

[12:53] <jnthn> Thing is, the jvm-support branch is really doing:

[12:54] <jnthn> 1) Portability related refactors

[12:54] <jnthn> 2) Adding JVM build stuff

[12:54] <jnthn> I'd kinda like to have (1) get good testing, but probably (2) should not land in nom until it actually builds something useful.

[12:55] <nwc10> yes, I see

[12:55] <nwc10> sort of feels like it would be easist if (1) keeps getting merged/cherry-picked to nom

[12:55] <nwc10> and the branch itself gets rebased atop new nom

[12:56] <nwc10> hence the question in the flowchart about lynch mobs

[12:56] *** arnsholt left
[12:56] *** arnsholt joined
[12:57] *** prammer joined
[12:57] <jnthn> nwc10: Yeah, I could easily go split it up

[12:58] <jnthn> Well, will see.

[12:58] <jnthn> Where we are in a week or so

[12:58] <jnthn> skype call, bbiab

[12:58] <pmichaud> nwc10: oh, that flowchart is wonderful.  :-)

[13:04] <pmichaud> http://justinhileman.info/article/changing-history/  is pretty nice, too.

[13:05] <pmichaud> I think I'll start pointing to it with pull requests.  Many of the pull requests I'm seeing have commits totally unrelated to the topic of the pull request.  :-/

[13:05] *** census joined
[13:12] *** erkan joined
[13:12] *** erkan left
[13:12] *** erkan joined
[13:14] *** ozmq left
[13:15] <pmichaud> in Rakudo's grammar there are often lines that look like

[13:16] <pmichaud>         $<pod_content> = <pod_textcontent>?

[13:16] <tadzik> that'd be me

[13:16] <pmichaud> is there any reason why that wasn't written <pod_content=pod_textcontent>?

[13:16] <pmichaud> or even  <pod_content=.pod_textcontent>?

[13:16] <tadzik> I may have not known that syntax 2 years ago :)

[13:16] <tadzik> so: no

[13:16] <[Coke]> https://github.com/rakudo/rakudo/commit/ca574ae23e6b172c0f2260f24ed28a0d627c17c7 seems like a non controversial commit. (though I don't particularly care for 'string' vs. "string").

[13:16] * jnthn back

[13:16] <[Coke]> er, https://github.com/rakudo/rakudo/pull/83

[13:17] <pmichaud> [Coke]: I agree... merging.

[13:18] <dalek> rakudo/nom: ca574ae | amire80++ | Configure.pl:

[13:18] <dalek> rakudo/nom: A bit of cleanup in Configure.pl

[13:18] <dalek> rakudo/nom: 

[13:18] <dalek> rakudo/nom: Cleaned up whitespace and changed quotes to make perlcritic a little happier.

[13:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ca574ae23e

[13:18] <dalek> rakudo/nom: cf97fb8 | pmichaud++ | Configure.pl:

[13:18] <dalek> rakudo/nom: Merge pull request #83 from amire80/little_Configure.pl_cleanup

[13:18] <dalek> rakudo/nom: 

[13:18] <dalek> rakudo/nom: A bit of cleanup in Configure.pl

[13:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cf97fb8632

[13:18] <pmichaud> tadzik: okay, thans

[13:18] <pmichaud> *thanks

[13:18] <pmichaud> I'll switch them over to be consistent with the others.

[13:19] <pmichaud> given something like

[13:19] <pmichaud>         $<pod_content> = <pod_textcontent>?

[13:19] <pmichaud> do you happen to know if $/<pod_content> and $/<pod_textcontent> are both used in the actions?  I.e., is it necessary to capture both?

[13:20] <tadzik> my guess is that all those blocks have a uniform interface which expects pod_content to be there

[13:20] <pmichaud> ...but not pod_textcontent?

[13:21] <pmichaud> i.e., I could change it to a non-capturing subrule?

[13:21] <tadzik> I suppose so

[13:21] <tadzik> I don't remember, sorry :(

[13:21] <tadzik> the tests will catch it in the worst case

[13:21] <pmichaud> okay, thanks.

[13:21] <tadzik> I'm 99% sure it can be non-capturing

[13:22] <pmichaud> hmm, it appears once in the actions

[13:23] <pmichaud> (reason I'm asking this is that I'm preparing to migrate to the specced form of ?-quantifier, and want to clean up the grammars a bit first :)

[13:23] <tadzik> this one appearance is parsing textcontent itself, no?

[13:23] <tadzik> oh, no

[13:23] <[Coke]> .tell rurban is https://github.com/rakudo/rakudo/pull/93 is even up for consideration at this point

[13:23] <moritz> but the one occurrence in the action looks save to me

[13:23] <yoleaux> [Coke]: I'll pass your message to rurban.

[13:23] <pmichaud> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Actions.nqp#L506  

[13:23] <tadzik> it refers to https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Grammar.nqp#L496

[13:24] <tadzik> so the rest of the usages can probably be non-capturing

[13:24] <pmichaud> yeah, that one looks safe.

[13:24] <tadzik> and this one is not assigned to pod_content anyway

[13:24] <pmichaud> so yes, they can be converted.  Excellent, thanks for the quick answers.

[13:24] * jnthn is happy to see pmichaud++ with tuits :)

[13:25] <tadzik> pmichaud++

[13:25] <pmichaud> well, they aren't large tuits, and they're recallable at a moment's notice, which is why I'm going for quick-fixes

[13:25] <dalek> rakudo/jvm-support: 7c24085 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[13:25] <dalek> rakudo/jvm-support: Only need to do dynop setup on Parrot.

[13:25] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/7c2408594c

[13:25] <dalek> rakudo/jvm-support: 7b43987 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[13:25] <dalek> rakudo/jvm-support: One more pir:: to nqp::.

[13:25] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/7b43987b14

[13:26] *** Targen left
[13:26] <PerlJam> .oO( Tuit Recall: a new movie about open source development )

[13:26] <PerlJam> good morning all 

[13:27] *** woolfy left
[13:30] *** woolfy joined
[13:31] *** FROGGS left
[13:32] *** plobsing joined
[13:35] *** woosley left
[13:46] *** bamboo joined
[13:49] <rurban> Isn't -L. -X. already in?

[13:49] <yoleaux> 13:23Z <[Coke]> rurban: is https://github.com/rakudo/rakudo/pull/93 is even up for consideration at this point

[13:52] *** tgt left
[13:52] *** PacoAir joined
[13:52] <moritz> rurban: in nqp, yes. In rakudo, now

[13:52] <moritz> *no

[13:52] <rurban> Coke: AFAIK -L. -X. is needed, but I believe it's already used in rakudo. Havn't checked yet. my light is broken

[13:53] *** bamboo is now known as bamboodragonfly

[13:55] <dalek> rakudo/jvm-support: 9c33ec1 | jnthn++ | src/ (2 files):

[13:55] <dalek> rakudo/jvm-support: Swap a rarely-called dynop for Perl 6 code.

[13:55] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/9c33ec15cc

[13:55] <dalek> rakudo/jvm-support: 29b5ab0 | jnthn++ | src/ (6 files):

[13:55] <dalek> rakudo/jvm-support: Toss a bunch of dead code.

[13:55] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/29b5ab07f5

[13:55] <jnthn> What, exactly, is the -L. -X. thing about?

[13:56] *** mangala joined
[13:57] *** thou joined
[13:58] *** plobsing left
[13:59] <rurban> we need to put . into the front of the loader path not to conflict with installed extensions

[14:00] <rurban> See https://github.com/parrot/parrot/issues/368

[14:00] <jnthn> ah

[14:01] <moritz> in fact that may explain why rakudo has seem more easily in conflict with installed stuff these last months

[14:03] <jnthn> I ran into such an issue with NQP today too, where ModuleLoader was loaded by the nqp executable from an installed one.

[14:04] *** PacoAir left
[14:05] *** PacoAir joined
[14:06] <rurban> This changed in parrot 4.12.0

[14:10] *** baest left
[14:12] *** Targen joined
[14:15] *** MrMeek joined
[14:17] *** Targen_ joined
[14:18] *** Targen left
[14:20] *** bamboo joined
[14:23] *** bamboodragonfly left
[14:26] *** FROGGS joined
[14:31] <sergot> hi ! o/

[14:33] *** xilo joined
[14:39] *** raiph joined
[14:41] <tadzik> hello sergot

[14:43] <cognominal> nqp: role A {  method a() { c() } }; class B does A { sub c() { say('c')} }; B.new.a;

[14:43] <camelia> nqp: OUTPUT«Could not find sub &c␤current instr.: 'a' pc 31 ((file unknown):163282716) (/tmp/kIQRog8oT1:1)␤»

[14:43] <cognominal> r: role A {  method a() { c() } }; class B does A { sub c() { say('c')} }; B.new.a;

[14:43] <camelia> rakudo cf97fb: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤    c used at line 1␤␤»

[14:44] *** kbenson joined
[14:44] <cognominal> is that an expected behaviour?

[14:44] <cognominal> n: role A {  method a() { c() } }; class B does A { sub c() { say('c')} }; B.new.a;

[14:44] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤     'c' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1443 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 37) ␤  at /home/p…

[14:44] *** frdmn|afk joined
[14:45] *** frdmn|afk left
[14:45] <jnthn> cognominal: Sure, sub lookup is lexical

[14:45] *** frdmn left
[14:46] <cognominal> so, the way around is to use a method .c instead of a routine &c

[14:46] *** snearch joined
[14:53] *** birdwindupbird left
[14:54] *** tgt joined
[14:56] * TimToady thinks that http://rosettacode.org/wiki/First_class_environments#Perl_6 is kinda cheating, insofar as the hashes in question never really achieve the status of symbol tables

[15:03] *** kaare_ joined
[15:06] *** test left
[15:11] <dalek> rakudo/jvm-support: 718090b | jnthn++ | src/Perl6/Metamodel/ (2 files):

[15:11] <dalek> rakudo/jvm-support: Add [positional|associative]_delegate support.

[15:11] <dalek> rakudo/jvm-support: 

[15:11] <dalek> rakudo/jvm-support: Has been in NQP for a while; now there's a use for it in Rakudo also.

[15:11] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/718090b1b2

[15:11] <dalek> rakudo/jvm-support: 40fa39f | jnthn++ | src/Perl6/ (4 files):

[15:11] <dalek> rakudo/jvm-support: Remove Stash's reliance on Parrot v-tables.

[15:11] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/40fa39ffd0

[15:16] <grondilu> rn: say (my %)<foo><bar> :exists

[15:16] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«False␤»

[15:16] <camelia> ..rakudo cf97fb: OUTPUT«No such method 'exists' for invocant of type 'Any'␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1646␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1627␤  in block  at /tmp/HOs2VBVVBW:1␤␤»

[15:17] *** skids joined
[15:17] <timotimo> oh, whoops?

[15:17] <timotimo> rn: say (my %)<foo>.DUMP

[15:17] <camelia> rakudo cf97fb: OUTPUT«Any␤»

[15:17] <camelia> ..niecza v24-37-gf9c8fc2: OUTPUT«Unhandled exception: Unable to resolve method DUMP in type Any␤  at /tmp/bWu4jDyPPP line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4299 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4300 (module-CORE @ 583) ␤  at /home/p…

[15:17] <timotimo> er, well ...

[15:18] <kresike> bye folks

[15:18] *** kresike left
[15:18] <grondilu> the :exists adverb is not "deep"

[15:18] <grondilu> ?

[15:18] <grondilu> (in rakudo that is)

[15:18] <pmichaud> until you store something in it,  (my %)<foo>  isn't a hash.

[15:18] *** domidumont left
[15:18] <pmichaud> it's the same as;

[15:19] <grondilu> pmichaud: sure, but it doesn't even exist, anyway.

[15:19] <pmichaud> r:  my $a;   say $a<bar>  :exists;

[15:19] <camelia> rakudo cf97fb: OUTPUT«No such method 'exists' for invocant of type 'Any'␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1646␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1627␤  in block  at /tmp/U6x2t6044W:1␤␤»

[15:19] <pmichaud> r: my $a; $a<bar> = 1;  say $a<bar> :exists;

[15:19] <FROGGS> rn: say (my %)<foo> :exists

[15:19] <camelia> rakudo cf97fb: OUTPUT«True␤»

[15:19] <camelia> rakudo cf97fb, niecza v24-37-gf9c8fc2: OUTPUT«False␤»

[15:20] <FROGGS> -------------------------------^ mine

[15:20] <timotimo> oh, so you can a^H vif^Hvify a hash, but not if you just :exists it?

[15:20] <pmichaud> we could .exists an Any, if really wanted to.

[15:20] <pmichaud> (i.e., add :exists to Any)

[15:21] <grondilu> well, I have a three entry cache and I tried:

[15:21] <grondilu> GACCACGGTT

[15:21] <grondilu> ACAG

[15:21] <grondilu> GT

[15:21] <grondilu> ooops

[15:21] <grondilu> sorry

[15:21] *** tgt left
[15:21] * pmichaud wipes the dna debris off his monitor.

[15:22] * skids braces for dna-on-monitor joke deluge

[15:22] <grondilu> so as I was saying:

[15:22] <grondilu> well, I have a three entry cache and I tried:

[15:22] <grondilu> return %cache{$string}{$t}{$u} if %cache{$string}{$t}{$u} :exists;

[15:22] <grondilu> ^ how could I write that, then?

[15:22] <pmichaud> I wouldn't have an issue with adding   method exists(Any:D: ...)  { False }

[15:23] <grondilu> that would be convenient

[15:23] <pmichaud> or whatever the appropriate method would be.

[15:24] <grondilu> well until then I guess I can make a single key by concatenating my three keys :/

[15:24] <pmichaud> you can always test that $cache{$string}{$t} exists.

[15:24] <pmichaud> and perhaps is a hash

[15:24] <grondilu> unlikely

[15:25] <colomon> Given %cache{$string}{$t}{$u} :exists, what is the :exists testing?

[15:25] <grondilu> the whole thing?

[15:26] <grondilu> it would not make any sense otherwise, would it?

[15:26] <pmichaud> I would think it's testing that %cache{$string}{$t} contains a key of $u

[15:26] <FROGGS> it should be true if %cache{$string}{$t} is a hash which has a key $u

[15:26] <grondilu> yes

[15:27] <grondilu> (that's what I meant by "the whole thing")

[15:27] <colomon> what if %cache{$string}{$t} does not exist?

[15:27] <FROGGS> false

[15:27] <pmichaud> that's the problem we're having now.

[15:27] <grondilu> then it's false anyway

[15:27] <pmichaud> %cache{$string}{$t} comes back as Any, which doesn't have a test for :exists

[15:28] <colomon> pmichaud: yeah, that's what I was suspecting.

[15:28] <FROGGS> colomon: thats the same like checking for truthness of %cache{$string}{$t}{$u}

[15:28] <grondilu> pmichaud's suggestion on defining :exists for any is interesting.

[15:28] <FROGGS> all or nothing

[15:28] <pmichaud> wel, the question is really... what should happen with   my $a;  say $a{'key'} :exists;

[15:28] <pmichaud> *well

[15:28] <colomon> oh!  I missed that that "exists" was defined on Any.  I was thinking Hash.exists(Any), not Any.exists(...)

[15:29] <pmichaud> "exists" isn't defined on Any, at the moment.

[15:29] <pmichaud> I'm suggesting that might be a solution to the current problem.

[15:29] <grondilu> r: say Any :exists;

[15:29] <camelia> rakudo cf97fb: OUTPUT«[31m===[0mSORRY![31m===[0m␤You can't adverb that␤at /tmp/iMH7xUWjKR:1␤------> [32msay Any :exists[33m⏏[31m;[0m␤    expecting any of:␤        pair value␤»

[15:29] <pmichaud> adverbs go on operators (verbs)

[15:29] <grondilu> yeah, sorry

[15:30] <pmichaud> r: say Any.exists('key')

[15:30] <jnthn> In this case the :exists goes as a named ot the postcircumfix call it's closest to

[15:30] <camelia> rakudo cf97fb: OUTPUT«No such method 'exists' for invocant of type 'Any'␤  in block  at /tmp/bkWsN1Wf0a:1␤␤»

[15:30] <jnthn> So you also have the option of intercepting it there

[15:30] <pmichaud> yes, the postcircumfix could test that the invocant has an exists method

[15:30] <pmichaud> so it could use   .exists?( )   instead of .exists

[15:31] <TimToady> introspection considered harmful

[15:31] <dalek> rakudo/nom: 4ee4f97 | pmichaud++ | src/Perl6/Grammar.nqp:

[15:31] <dalek> rakudo/nom: Cleanup: Switch some $<a>=<b> pod expressions to be the more common <a=.b> .

[15:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4ee4f97eb6

[15:31] <dalek> rakudo/nom: b65cc01 | pmichaud++ | src/Perl6/Grammar.nqp:

[15:31] <dalek> rakudo/nom: More cleanup: Change $<attachment>=<.quibble(%*LANG<Q>)> to <attachment=.quibble(%*LANG<Q>)>

[15:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b65cc01576

[15:32] <jnthn> pmichaud: I was more thinking that we have a candidate for a :U invocant the the exists key.

[15:32] <jnthn> *and the

[15:32] <pmichaud> that's a possibility also.

[15:32] <pmichaud> r: my $a = 1;  say $a{'key'} :exists

[15:32] <TimToady> I tend to see this as a variant of propagating failure through cascaded methods

[15:32] <camelia> rakudo cf97fb: OUTPUT«No such method 'exists' for invocant of type 'Int'␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1646␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1627␤  in block  at /tmp/CT5Fbe9ZaU:1␤␤»

[15:33] <jnthn> Hm, do we need to cover that case? That to me just looks like a program error that I'd like to fail.

[15:33] <jnthn> Whereas on a type object it feels more useful :)

[15:33] <grondilu> jnthn: then I should not use a several-entries cache?

[15:33] <pmichaud> I was just curious about what happens (should happen) on the defined instance case.

[15:34] <pmichaud> r: my $a = 1;  say $a{'key'};

[15:34] <camelia> rakudo cf97fb: OUTPUT«postcircumfix:<{ }> not defined for type Int␤  in method gist at src/gen/CORE.setting:10832␤  in method gist at src/gen/CORE.setting:893␤  in sub say at src/gen/CORE.setting:7808␤  in block  at /tmp/jqTiYdSZFa:1␤␤»

[15:34] <TimToady> the question that occurs to me is: is :exists smart enough to tell the subscripts that they shouldn't WHENCEify

[15:34] <pmichaud> well, none of the solutions proposed would cause whencification

[15:35] <moritz> and iirc read-only accesses should never autovivify anyway, right?

[15:35] <jnthn> grondilu: In the case you asked about, iiuc, the :exists is operating on an undefined thing?

[15:35] <pmichaud> jnthn: it's operating on an Any, yes.

[15:35] <pmichaud> (the type object)

[15:36] <grondilu> here is the full code I was working on when I encountered this issue:  http://paste.siduction.org/20130429153520

[15:36] *** snearch left
[15:36] <colomon> oh, I think I just found an interesting bug/feature.

[15:37] <dalek> rakudo/jvm-support: 918475f | jnthn++ | src/ (4 files):

[15:37] <dalek> rakudo/jvm-support: Eliminate another bunch of pir:: in BOOTSTRAP.

[15:37] <dalek> rakudo/jvm-support: 

[15:37] <dalek> rakudo/jvm-support: Now BOOTSTRAP should be about in shape to try and get it to build with

[15:37] <dalek> rakudo/jvm-support: NQP JVM.

[15:37] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/918475f27c

[15:37] <jnthn> grondilu: Yes, what I'm proposing-ish is that we make that work they way you want

[15:38] <TimToady> sub isbazzy (\x) { x<baz> :exists }; say so isbazzy %hash<foo><bar>

[15:38] <TimToady> will that work?

[15:38] <colomon> I used qq:to/END/ with indenting that I wanted to go away and a tab in the source file, and the tab switched to spaces when the indenting went away.

[15:38] *** any joined
[15:38] <colomon> afk # nom pickup

[15:39] *** any left
[15:39] <pmichaud> TimToady: that would work with either of the solutions suggested thus far, I think.

[15:39] <pmichaud> and not autovivify %hash<foo> 

[15:39] <pmichaud> or %hash<foo><bar>

[15:40] <TimToady> sub setbazzy (\x) { x<baz> :exists || x<baz> = 42 }; setbazzy %hash<foo><bar>

[15:40] <TimToady> what about that?

[15:40] <pmichaud> parens around the = ?

[15:40] <TimToady> yeah

[15:41] <TimToady> shoulda used 'or' instead

[15:41] <pmichaud> would set %hash<foo><bar><baz> to 42 if it didn't already exist.

[15:41] <pmichaud> (vivifying %hash<foo> and %hash<foo><bar> as needed.

[15:41] <pmichaud> r: sub setbazzy (\x) { x<baz> = 42 };  setbazzy %hash<foo><bar>;  say %hash.perl

[15:41] <camelia> rakudo cf97fb: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable '%hash' is not declared␤at /tmp/IIfc6UqOQk:1␤------> [32mx<baz> = 42 };  setbazzy %hash<foo><bar>[33m⏏[31m;  say %hash.perl[0m␤    expecting any of:␤        postfix␤»

[15:41] <pmichaud> r: sub setbazzy (\x) { x<baz> = 42 };  my %hash; setbazzy %hash<foo><bar>;  say %hash.perl

[15:41] <camelia> rakudo cf97fb: OUTPUT«("foo" => {"bar" => {"baz" => 42}}).hash␤»

[15:42] <TimToady> sub setbazzy (\x) { x<baz> :exists or x<somethingelse> = 42 }; setbazzy %hash<foo><bar>

[15:42] <TimToady> can that one autoviv foo and bar?

[15:42] <pmichaud> yes.

[15:42] <TimToady> how?

[15:43] <TimToady> does it WHENCE before the call?

[15:43] <pmichaud> r: sub setbazzy (\x) { x.exists('baz') or x<somethingelse> = 42 };  my %hash; setbazzy %hash<foo><bar>;  say %hash.perl

[15:43] <camelia> rakudo cf97fb: OUTPUT«No such method 'exists' for invocant of type 'Any'␤  in sub setbazzy at /tmp/VVX3cDvbC8:1␤  in block  at /tmp/VVX3cDvbC8:1␤␤»

[15:43] <pmichaud> it WHENCEs at the point of the assignment.

[15:44] <TimToady> but x is presumably already bound to a WHENCE or it can't work

[15:44] <pmichaud> yes, x has a WHENCE

[15:44] <pmichaud> but the WHENCE hasn't been triggered yet.

[15:44] <pmichaud> it gets triggered at the point of the assignment.

[15:44] <TimToady> so certainly a 

[15:44] <TimToady> WHENCE make :exists false, at least

[15:45] <Util> I would like to take ownership of a Rakudo RT ticket. I have privilege to change tickets, but I am not listed as a possible entry in the Owner drop-down box.

[15:45] <Util> https://rt.perl.org/rt3/Ticket/ModifyPeople.html?id=117731

[15:45] <Util> Would someone add me to the list that populates that "Owner:" drop-down, please? My RT ID is "util" (18978). TIA.

[15:46] <pmichaud> Util: I'll see if I still have that capability.

[15:46] <pmichaud> TimToady: well, I'm not sure that the WHENCE does it.  I tend to think it falls more along jnthn's suggested "because it's undefined" line

[15:46] *** FROGGS left
[15:46] <TimToady> I guess :exists is a known rvalueish context, so can optimize the WHENCES away

[15:47] * TimToady wonders if an array/hash with a default value ever fails :exists...

[15:47] * grondilu just used a single entry cache and observed that his code is wrong for other reasons anyway  :/

[15:48] <pmichaud> jnthn: in some sense, though, it feels to me like there are too many multi candidates for .{ } anyway, though.

[15:48] <pmichaud> the factorization doesn't look quite right to me... adding :D/:U would just seem to compound it.

[15:49] <jnthn> pmichaud: We need to be a bit careful how we factor those.

[15:49] <pmichaud> right, that's kinda my thinking.  it feels fragile.

[15:50] <jnthn> pmichaud: The way they are now has the property that the multi-dispatch cache can typically do something quite sane with them.

[15:50] <pmichaud> yeah, but seeing things like

[15:50] <pmichaud>     multi method postcircumfix:<{ }>(\SELF: Positional \key, :$exists!) is rw {

[15:50] <pmichaud>         nqp::iscont(key)

[15:50] <pmichaud> ... the iscont test is a smell.

[15:51] <pmichaud> and it's something that may fail when arrays/hashes become containers.

[15:51] * jnthn suspects that is there to fix a very specific issue

[15:51] <pmichaud> that test seems to be trying to detect different forms of slices

[15:52] <jnthn> yeah, it's that %h{@a.item} is not %h{@a} iirc

[15:52] <pmichaud> hmmmmmm

[15:52] <pmichaud> anyway, I'll look it over someday.

[15:52] * jnthn tries to remember which of us did that fix :)

[15:53] <pmichaud> well, it wasn't me :)

[15:53] <TimToady> we're still planning to unmethodize that, right?

[15:54] <[Coke]> Util: added you as a rakudo bugadmin

[15:54] <pmichaud> yes, I believe so.

[15:54] *** Targen_ left
[15:54] *** AMENDEES_ left
[15:54] <pmichaud> Coke++

[15:54] *** Targen joined
[15:54] <jnthn> TimToady: I'd still in favor of that.

[15:54] <jnthn> *I'm

[15:54] <pmichaud> I'm in favor of it also... but we have to fix our dotted postfix notation first

[15:54] <jnthn> The multi issue then probably becomes "what can we analyze at compile time"

[15:54] <[Coke]> Util++ now you have to close out at least 2 bugs. ;)

[15:55] <TimToady> we can probably analyze multi-dim subscripts (.[@a; @b]) at compile time

[15:55] <[Coke]> .seen robrt

[15:55] <yoleaux> I haven't seen robrt around.

[15:55] <[Coke]> .seen ask

[15:55] <yoleaux> I haven't seen ask around.

[15:56] <TimToady> .u ⏏

[15:56] <yoleaux> U+23CF EJECT SYMBOL [So] (⏏)

[15:56] <TimToady> is this the same bot?

[15:57] <[Coke]> as phenny? no, new one.

[15:57] <[Coke]> .help

[15:57] <yoleaux> [Coke]: I'm yoleaux. Type .commands to see what I can do, or see http://dpk.io/yoleaux for a quick guide.

[15:58] <TimToady> British Indian Ocean Territory, eh?

[15:59] <[Coke]> .suggest Perl 6 is

[15:59] <yoleaux> Perhaps Perl 6 is: ~dead, ~a joke, perl 6 in production, is perl 6 out, perl 6 release, is perl 6 ready, is perl 6 production ready

[16:00] <timotimo> perl6 is export.

[16:00] <huf> how about "perl 6 is" in the "i am that i am" sense?

[16:00] *** Demagog joined
[16:02] *** Targen left
[16:03] <Util> Coke++  Thanks! Will be closing one bug today for sure. Bug 2... sometime after that :)

[16:03] *** Demagog left
[16:04] *** tgt joined
[16:08] *** bamboo left
[16:08] *** Targen joined
[16:15] *** Targen left
[16:15] *** Targen_ joined
[16:20] <dalek> nqp/rak-jvm-support: 8a230e7 | jnthn++ | src/vm/jvm/ (3 files):

[16:20] <dalek> nqp/rak-jvm-support: Implement some missing capture-related ops.

[16:20] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/8a230e74d3

[16:24] *** census left
[16:26] <nwc10> rak?

[16:29] *** FROGGS joined
[16:31] <jnthn> rakudo

[16:31] <jnthn> trying to same some keystrokes :P

[16:32] *** tarnation_ joined
[16:32] *** tarnation_ left
[16:39] *** Chillance joined
[16:42] <dalek> nqp: 66ea32d | pmichaud++ | src/ (4 files):

[16:42] <dalek> nqp: "Temporarily" convert ?-quantified captures to use **0..1 instead.

[16:42] <dalek> nqp: 

[16:42] <dalek> nqp: This is in preparation for bringing the ?-quantifier in line with

[16:42] <dalek> nqp: S05, such that ? is an "item quantifier" instead of a "list quantifier".

[16:42] <dalek> nqp: review: https://github.com/perl6/nqp/commit/66ea32d3f4

[16:44] *** tangentstorm joined
[16:46] *** spider-mario joined
[17:02] *** mavcunha joined
[17:05] *** mmcleric left
[17:06] <jnthn> Well, that was fun...

[17:07] * jnthn just discovered that his invokedynamic handling could actually bind the callsite permanently to the "compile-me" thunk, which produced some rather bizzare results 

[17:08] *** tgt left
[17:09] <dalek> rakudo/nom: a174307 | pmichaud++ | src/Perl6/Grammar.nqp:

[17:09] <dalek> rakudo/nom: "Temporarily" convert ?-quantified captures to use **0..1 instead.

[17:09] <dalek> rakudo/nom: 

[17:09] <dalek> rakudo/nom: This is in preparation for bringing the ?-quantifier in line with

[17:09] <dalek> rakudo/nom: S05, such that ? is an "item quantifier" instead of a "list quantifier".

[17:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a174307a30

[17:10] <pmichaud> I need a nap before tackling the next bit... bbl

[17:10] <jnthn> nap well :)

[17:10] *** alester joined
[17:12] <dalek> nqp/rak-jvm-support: 98861e4 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/IndyBootstrap.java:

[17:12] <dalek> nqp/rak-jvm-support: Don't wire callsite to compiler thunks.

[17:12] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/98861e4e10

[17:17] <nwc10> in this font nap is confusingly close to nqp. The difference is one descender

[17:18] *** dakkar left
[17:23] <colomon> huh.  cursor controls not working in current (well, last week) Rakudo in the REPL?

[17:24] <jnthn> colomon: Normally a sign of having a Parrot that wasn't built with readline support, I guess.

[17:26] <colomon> jnthn: ah, so probably just weirdness on my new linux boxl

[17:26] <colomon> *box

[17:26] <colomon> jnthn++

[17:35] *** daxim left
[17:37] *** SmokeMachine joined
[18:12] *** djanatyn left
[18:12] *** djanatyn joined
[18:16] <dalek> nqp/rak-jvm-support: 26204e4 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/IndyBootstrap.java:

[18:16] <dalek> nqp/rak-jvm-support: Remove leftover debugging code.

[18:16] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/26204e4de7

[18:16] <dalek> nqp/rak-jvm-support: 353a1ef | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/ (2 files):

[18:16] <dalek> nqp/rak-jvm-support: Add missing find method logic (MOP fallback).

[18:16] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/353a1ef085

[18:20] *** Util left
[18:20] *** census joined
[18:21] *** Juerd left
[18:21] *** pmichaud left
[18:21] *** [Coke] joined
[18:21] *** masak joined
[18:21] *** PerlJam joined
[18:21] *** dalek joined
[18:21] *** ChanServ sets mode: +v dalek

[18:21] *** Util joined
[18:21] *** sergot joined
[18:22] *** pmichaud joined
[18:22] *** Juerd joined
[18:22] *** tadzik joined
[18:23] *** hugme joined
[18:23] *** ChanServ sets mode: +v hugme

[18:24] *** test joined
[18:24] *** camelia joined
[18:25] *** ChanServ sets mode: +v camelia

[18:28] *** mavcunha left
[18:29] *** mavcunha joined
[18:35] *** supernovus joined
[18:38] *** mavcunha left
[18:39] *** jeffreykegler joined
[18:42] <supernovus> If I want to include an array inside another array without being flattened, is there an easier way than this: my @a = 1,2,3; my $a = @a; my @b = $a;

[18:43] <PerlJam> supernovus: my @b = [1,2,3];  # ???

[18:45] *** tgt joined
[18:47] <supernovus> PerlJam: Now, given I already have @a, @b and @c, and I want an Array of Arrays, if I do my @d = @a, @b, @c; it flattens the original arrays together, which in some cases is the desired behaviour, but in the case I'm working on, it isn't. I tried throwing \ in front, i.e. @d = \@a, \@b, \@c; but that creates parcels, not a "reference" to the original array. If this is an uncommon feature I'll just stick with creating scalars point

[18:47] <supernovus> ing at the arrays/hashes to be included in the target array.

[18:47] <jnthn> @a.item

[18:47] <jnthn> $(@a)

[18:47] *** mavcunha joined
[18:47] <jnthn> r: my @a = 1,2,3; my @b = 4,5,6; my @c = lol @a, @b; say @c.perl

[18:47] <camelia> rakudo a17430: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤    lol used at line 1. Did you mean '&log'?␤␤»

[18:47] <jnthn> r: my @a = 1,2,3; my @b = 4,5,6; my @c = (@a, @b).lol; say @c.perl

[18:47] <camelia> rakudo a17430: OUTPUT«Array.new([1, 2, 3], [4, 5, 6])␤»

[18:47] <jnthn> That's another way.

[18:48] <jnthn> (lol = list of list :))

[18:48] <supernovus> I like the $(@a) method. I had tried $@a and it died with "Invalid hard reference syntax". I figured since @$var works identically to @($var) it would be the same in reverse.

[18:53] <supernovus> jnthn: Thanks. That worked perfectly.

[18:55] <supernovus> I noticed that my SCGI, FastCGI and HTTP::Easy libraries all have a lot of duplication in the code that takes PSGI responses from applications and turns them into the appropriate CGI/HTTP return value, so I'm abstracting it out into a helper library that others can use too.

[18:57] *** mtk joined
[18:57] <pmichaud> I just received a package that was mailed (USPS) to me from Florida, it apparently went to Singapore first before coming here.  :-/

[18:57] <PerlJam> supernovus++ that sounds neat.

[18:58] <PerlJam> pmichaud: the final ingredient was located in Singapore, so it had to go there first.

[18:58] *** mtk left
[18:59] *** SamuraiJack joined
[18:59] <pmichaud> somehow I doubt that.  :-)   The seller and I had been emailing back-and-forth trying to figure out where might have disappeared to.

[19:00] <jnthn> Shortest route FAIL

[19:00] *** jeffreykegler left
[19:00] * lizmat thinks it is a metaphore, and therefore glad that it finally arrived ;-)

[19:00] *** skyheights joined
[19:00] <tadzik> pmichaud: aah, that explains why I'm waiting so long for my laptop ;)

[19:01] <tadzik> it must be going through tunguska or something

[19:01] <PerlJam> pmichaud: someone at the USPS is using other people's packages to ferry drugs to Singapore

[19:01] *** mtk joined
[19:04] *** japhb_ joined
[19:04] <pmichaud> PerlJam: that's possible, given where it came from (Miami) and the size of the package.  

[19:04] <pmichaud> wonder if I should wash the contents carefully :-)

[19:06] <PerlJam> pmichaud: what was it?  Anything that might have a large chunk of lead in it (like a laptop) ?

[19:08] <pmichaud> LEGOs.  

[19:09] <pmichaud> package photos at https://plus.google.com/photos/100583333501980276903/albums/5872347445938272001?authkey=CPij8v-_zfjHxgE

[19:10] <supernovus> And with some refactoring, the tests didn't need the $(@blah) syntax after all. Ah well, good to know it is available :-)

[19:10] <dalek> nqp/rak-jvm-support: 05f6229 | jnthn++ | / (11 files):

[19:10] <dalek> nqp/rak-jvm-support: Update stage0 to latest.

[19:10] <dalek> nqp/rak-jvm-support: 

[19:10] <dalek> nqp/rak-jvm-support: The latest has various performance improvements and thus this should

[19:10] <dalek> nqp/rak-jvm-support: make the build a bit faster.

[19:10] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/05f6229935

[19:10] <dalek> nqp/rak-jvm-support: 29aa7b4 | jnthn++ | src/vm/jvm/ (2 files):

[19:10] <dalek> nqp/rak-jvm-support: Stub remaining container ops.

[19:10] <dalek> nqp/rak-jvm-support: 

[19:10] <dalek> nqp/rak-jvm-support: Still need to do a bunch of the implementation work.

[19:10] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/29aa7b4b10

[19:11] <dalek> rakudo/jvm-support: 047fa09 | jnthn++ | src/Perl6/Metamodel/ (2 files):

[19:11] <dalek> rakudo/jvm-support: Standardize on nqp::hash in MOP.

[19:11] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/047fa09b48

[19:11] <dalek> rakudo/jvm-support: 3e7d60f | jnthn++ | tools/build/Makefile-JVM.in:

[19:11] <dalek> rakudo/jvm-support: Add BOOTSTRAP to the build, now it builds.

[19:11] <dalek> rakudo/jvm-support: 

[19:11] <dalek> rakudo/jvm-support: This means the big BEGIN block in it also manages to run.

[19:11] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/3e7d60ffec

[19:13] *** sqirrel left
[19:16] <dalek> v5: 8f4b93d | (Tobias Leich)++ | lib/Perl6/P5World.pm:

[19:16] <dalek> v5: moving get_env to the actions

[19:16] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/8f4b93d30d

[19:16] <dalek> v5: 42e799e | (Tobias Leich)++ | lib/Perl5.pm:

[19:16] <dalek> v5: setting $*MAIN, which is the currently active main language

[19:16] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/42e799e679

[19:16] <dalek> v5: b8b0b8e | (Tobias Leich)++ | lib/Perl6/P5Actions.pm:

[19:16] <dalek> v5: use $V5DEBUG directly

[19:16] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/b8b0b8e63c

[19:16] <dalek> v5: b37a34a | (Tobias Leich)++ | STATUS.md:

[19:16] <dalek> v5: update STATUS after getting eval and quoting to work again

[19:16] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/b37a34a1b3

[19:16] <dalek> v5: 5aeef0c | (Tobias Leich)++ | rakudo.patch:

[19:16] <dalek> v5: add overridable $*MAIN

[19:16] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/5aeef0c95a

[19:20] *** skids left
[19:29] <dalek> ecosystem: 52ca0cb | (Timothy Totten)++ | META.list:

[19:29] <dalek> ecosystem: Added PSGI helper library.

[19:29] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/52ca0cb932

[19:33] *** tgt left
[19:42] <[Coke]> Fyi, https://github.com/rakudo-p5/v5 - I think the right idiom is "beside Perl 6", not "besides Perl 6".

[19:44] <FROGGS> [Coke]: thanks, will fix

[19:46] <dalek> v5: c1a0049 | (Tobias Leich)++ | README.md:

[19:46] <dalek> v5: fix spelling error, [Coke]++

[19:46] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/c1a0049388

[19:47] <[Coke]> (they're similar, but beside is more "side by side", and besides is more "in place of")

[19:48] <FROGGS> ahh cool, thanks, so 'beside' is what I want :o)

[19:51] <dalek> v5: 9eac1ba | (Tobias Leich)++ | / (3 files):

[19:51] <dalek> v5: fix some issues that were hidden when Perl6::Grammar's tokens were in use

[19:51] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/9eac1ba6ea

[19:54] <FROGGS> std: use v5; say 1 foreach 1

[19:54] <camelia> std 86b102f: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused at /tmp/XgX43dASJW line 1:␤------> [32muse v5; say 1 [33m⏏[31mforeach 1[0m␤    expecting any of:␤       p5infix␤        p5statement_mod_loop␤   statement modifier␤Parse failed␤FAILED 00:01 52m␤»

[19:54] <FROGGS> std: use v5; say 1 for 1

[19:54] <camelia> std 86b102f: OUTPUT«ok 00:01 52m␤»

[19:54] <FROGGS> ESTDBUG

[19:56] *** tgt joined
[20:00] *** skids joined
[20:02] <masak> FROGGS: how so?

[20:02] <masak> oh, 'foreach' should parse?

[20:02] <FROGGS> ya

[20:02] <[Coke]> so how soon until we can run p5 inside p6 inside jvm ? ;)

[20:02] <FROGGS> my local perl says yes

[20:02] <masak> FROGGS++

[20:02] <FROGGS> [Coke]: well, not too soon

[20:03] <FROGGS> the progress isnt that good actually

[20:04] <[Coke]> aww.

[20:04] <[Coke]> well, it certainly looks like progress from over here.

[20:05] <FROGGS> ya, example: you can do "require PATH" now, the importing and merging doesnt work well

[20:05] <FROGGS> that affects all

[20:06] *** rindolf left
[20:06] *** bruges joined
[20:06] <FROGGS> and, you need %Config and other core stuff to really do something

[20:06] <FROGGS> and I dont wanna think about all these pragmas :o)

[20:08] <dalek> v5: c40fe64 | (Tobias Leich)++ | / (2 files):

[20:08] <dalek> v5: fix statement mod foreach

[20:08] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/c40fe6483a

[20:14] <stevan_> r: sub id ($x) { $x.perl }; say id([10, 2])

[20:14] <camelia> rakudo a17430: OUTPUT«[10, 2]␤»

[20:14] * stevan_ wonders why that works

[20:14] <stevan_> and where I can go to read up on the details of behind it

[20:15] <tadzik> stevan_: why don't you expect it to work?

[20:15] <lizmat> that would even work in Perl 5 (almost)

[20:15] <[Coke]> $x is a thing. [10,2] is a thing.

[20:15] <stevan_> tadzik: I guess I was thinking @x would be more appropriate

[20:15] <tadzik> stevan_: you can always put an array in a scalar container

[20:16] <stevan_> lizmat: yes, but it wouldn't do what I expected :)

[20:16] <[Coke]> r: sub id ($x) { $x.perl } ; say id(10,2);

[20:16] <camelia> rakudo a17430: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'id' will never work with argument types (Int, Int) (lines 1, 1)␤    Expected: :($x)␤»

[20:16] <tadzik> to prevent it from flattening

[20:16] <arnsholt> stevan_: Perl 6 changes the semantics of the sigils

[20:16] <arnsholt> That's the extremely short version

[20:16] <tadzik> r: my @a = 1, 2, 3; my $b = @a; say $b.perl

[20:16] <camelia> rakudo a17430: OUTPUT«[1, 2, 3]␤»

[20:16] <stevan_> right

[20:16] <stevan_> hmm

[20:16] <[Coke]> r: sub id (*@x) { "array" ~ $x.perl } ; sub id($x) { "scalar" ~ $x.perl } ; say id(10,2); say id([10,2]);

[20:16] <camelia> rakudo a17430: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable '$x' is not declared␤at /tmp/qyxAwql6lA:1␤------> [32msub id (*@x) { "array" ~ $x.perl[33m⏏[31m } ; sub id($x) { "scalar" ~ $x.perl } ;[0m␤    expecting any of:␤        method arguments␤        postfix␤»

[20:17] <[Coke]> r: sub id (*@x) { "array" ~ @x.perl } ; sub id($x) { "scalar" ~ $x.perl } ; say id(10,2); say id([10,2]);

[20:17] <camelia> rakudo a17430: OUTPUT«[31m===[0mSORRY![31m===[0m␤Redeclaration of routine id␤at /tmp/uIUtN4uM4N:1␤------> [32ml } ; sub id($x) { "scalar" ~ $x.perl } [33m⏏[31m; say id(10,2); say id([10,2]);[0m␤    expecting any of:␤        method arguments␤        postfix␤        statement end␤…

[20:17] <[Coke]> r: multi sub id (*@x) { "array" ~ @x.perl } ; multi sub id($x) { "scalar" ~ $x.perl } ; say id(10,2); say id([10,2]);

[20:17] <camelia> rakudo a17430: OUTPUT«arrayArray.new(10, 2)␤scalar[10, 2]␤»

[20:17] *** kaare_ left
[20:18] <stevan_> hmm, so you can put anything in a scalar container if you want

[20:18] <masak> including references. and the references sort of fade away from view a bit.

[20:18] <stevan_> is this documented anywhere?

[20:18] <masak> I should hope so!

[20:18] <stevan_> does anyone know where :)

[20:18] <masak> check S02 is a good guess.

[20:19] <stevan_> ok

[20:19] *** supernovus left
[20:19] <arnsholt> http://perlcabal.org/syn/S02.html#Sigils is probably a good place to start

[20:19] <[Coke]> stevan_: http://perlcabal.org/syn/S02.html#Sigils

[20:19] *** tgt left
[20:19] <[Coke]> Curse my metal body, I wasn't fast enough.

[20:20] *** mavcunha left
[20:20] <arnsholt> Also http://perlcabal.org/syn/S02.html#Context

[20:20] * [Coke] guesses that $<foo>      match variable, short for $/{'foo'} should not be under "twigils"

[20:21] <[Coke]> r: my $x = "asfd"; supersede $x = "blah"; say $x;

[20:21] <camelia> rakudo a17430: OUTPUT«[31m===[0mSORRY![31m===[0m␤supersede scoped variables not yet implemented. Sorry. ␤at /tmp/XDVqPr1wet:1␤------> [32mmy $x = "asfd"; supersede $x [33m⏏[31m= "blah"; say $x;[0m␤    expecting any of:␤        scoped declarator␤        constraint␤Other potential…

[20:21] <FROGGS> [Coke]: well, one could think that < is a twigil

[20:24] *** tgt joined
[20:24] *** woolfy left
[20:30] * [Coke] wonders why supersede $x = "blah" is preferred over $x = "blah" with no modifier.

[20:30] <jnthn> [Coke]: Who prefers it? :)

[20:31] *** chee is now known as Guest

[20:32] <[Coke]> S02

[20:33] <[Coke]> s/preferred/spec'd/ , even.

[20:33] <jnthn> ah, I can imagine it being spec'd

[20:33] * [Coke] wonders if it maybe overrides readonlyness.

[20:34] <[Coke]> mentioned again in S06 for subs.

[20:34] <[Coke]> (and S12 for classes)

[20:34] * cognominal discovers http://marklodato.github.io/visual-git-guide/index-en.html, nice

[20:34] <PerlJam> maybe the thing in $x overloads assignment and supersede negates that?

[20:35] <[Coke]> Objection, speculative!

[20:36] <[Coke]> r: my $a = anon sub marine() {1}; $a(1,2,3);

[20:36] <camelia> rakudo a17430: OUTPUT«Too many positional parameters passed; got 3 but expected 0␤  in sub marine at /tmp/7jucb_nJ26:1␤  in block  at /tmp/7jucb_nJ26:1␤␤»

[20:37] <[Coke]> huh.

[20:37] *** Guest is now known as chee

[20:37] <[Coke]> "who knew that was in there"

[20:37] <FROGGS> *g*

[20:40] *** SmokeMachine left
[20:43] *** SmokeMachine joined
[20:46] <stevan_> r: my @x = 1;

[20:46] <camelia> rakudo a17430:  ( no output )

[20:46] <stevan_> r: my @x = 1; say @x.perl

[20:46] <camelia> rakudo a17430: OUTPUT«Array.new(1)␤»

[20:46] <dalek> nqp: 54a9a07 | pmichaud++ | / (2 files):

[20:46] <dalek> nqp: Start adding tests for quantified captures.

[20:46] <dalek> nqp: review: https://github.com/perl6/nqp/commit/54a9a074d1

[20:46] <stevan_> r: my %x = 1; say %x.perl

[20:46] <camelia> rakudo a17430: OUTPUT«Odd number of elements found where hash expected␤  in method STORE at src/gen/CORE.setting:6889␤  in block  at /tmp/MTRUnp_l7n:1␤␤»

[20:46] <dmol> r: say "hello"

[20:46] <camelia> rakudo a17430: OUTPUT«hello␤»

[20:48] *** bluescreen100 joined
[20:48] *** bluescreen10 left
[20:49] *** mavcunha joined
[20:56] <masak> r: my %x = 1, 42; say %x.perl

[20:56] <camelia> rakudo a17430: OUTPUT«("1" => 42).hash␤»

[21:13] *** mavcunha left
[21:18] <dalek> nqp/rak-jvm-support: 8a6eb77 | jnthn++ | src/QRegex/Cursor.nqp:

[21:18] <dalek> nqp/rak-jvm-support: Be consistent about highexpect list type.

[21:18] <dalek> nqp/rak-jvm-support: 

[21:18] <dalek> nqp/rak-jvm-support: Caught because NQP JVM is stricter, but the fix saves some boxing.

[21:18] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/8a6eb77b93

[21:18] <dalek> nqp/rak-jvm-support: 65e3eac | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[21:18] <dalek> nqp/rak-jvm-support: Don't rebless to the same type.

[21:18] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/65e3eac05f

[21:18] <dalek> nqp/rak-jvm-support: 50ed259 | jnthn++ | src/core/NQPRoutine.nqp:

[21:18] <dalek> nqp/rak-jvm-support: Add a missing .clone() call.

[21:18] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/50ed2596b4

[21:19] * masak .oO( rak shaving )

[21:21] <dalek> rakudo/jvm-support: 56d8271 | jnthn++ | / (2 files):

[21:21] <dalek> rakudo/jvm-support: Add Makefile rule to start working through CORE.

[21:21] <dalek> rakudo/jvm-support: 

[21:21] <dalek> rakudo/jvm-support: Not in 'all' yet as it, of course, explodes almost instantly.

[21:21] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/56d8271013

[21:23] *** kurahaupo joined
[21:25] *** SamuraiJack left
[21:25] *** bluescreen100 left
[21:26] <dalek> rakudo/nom: 3252c3e | pmichaud++ | src/core/Temporal.pm:

[21:26] <dalek> rakudo/nom: More ?-quantifier preparation... adjust Temporal.pm to use **0..1 instead of ? .

[21:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3252c3e3e9

[21:28] *** PacoAir left
[21:29] *** skids left
[21:29] *** test left
[21:29] <pmichaud> all:  I have a patch ready that will convert the ?-quantifier to no longer return an Array of matches, both nqp and rakudo compile and pass their spectests.  Any thoughts about when I should apply the patch (i.e., should we go ahead and do it this release)?

[21:30] *** SmokeMachine left
[21:30] <jnthn> pmichaud: We're quite a way from the next relesae.

[21:30] *** SmokeMachine joined
[21:31] <jnthn> pmichaud: I think there will be ecosystem fallout, and I think there's sufficient time to fix it.

[21:31] <masak> +1

[21:31] <FROGGS> ya, there won't be a better time

[21:31] <jnthn> We've been warning in the * release announce for ages too.

[21:32] <jnthn> So, +1 from me.

[21:32] <jnthn> pmichaud: Did some spectests need changes?

[21:33] <pmichaud> jnthn: no, sadly.

[21:33] <pmichaud> I've created some tests to add to the nqp/qregex suite that test it, though.

[21:33] <jnthn> pmichaud: That's a little surprising.

[21:34] <jnthn> Though maybe suggestive that the fallout won't be so bad as we expect.

[21:34] <pmichaud> I suspect it's just not tested adequately.

[21:34] <jnthn> Yeah

[21:35] <jnthn> I'd suggest adding a couple of the tests for the qregex suite to spectest so we have at least *some* coverage.

[21:35] <jnthn> *from the...

[21:35] <[Coke]> jnthn: java.lang.NoClassDefFoundError: org/perl6/nqp/runtime/ThreadContext

[21:35] <[Coke]> (installing nqp/rak-jvm-support)

[21:35] <jnthn> [Coke]: How'd you get that?

[21:35] <jnthn> [Coke]: Did you re-configure before the build?

[21:36] <[Coke]> Yes.

[21:36] <[Coke]> guessing missing dep

[21:36] <jnthn> Hm...I'd been careful with those.

[21:36] <jnthn> Try a clean and re-Configure

[21:36] <jnthn> I know that error came up for me before I did a makefile tweak earlier

[21:37] *** spider-mario left
[21:37] <[Coke]> hurm. ok. yah, I didn't explicitly clean.

[21:37] <jnthn> Hm, but Configure should clean...so it's still odd.

[21:38] <jnthn> Anyway, just checked I did indeed commit the thing that fixed that same error earlier this evening for me.

[21:40] <pmichaud> I need a break here, so I'll re-check and re-test my patch later tonight and apply it.

[21:40] <pmichaud> Yes, I suspect it will affect a fair bit of the ecosystem.

[21:41] <pmichaud> The short-term fix is simple enough -- replace any capturing ? with **0..1

[21:41] <pmichaud> s/fix/workaround/

[21:41] <pmichaud> I also don't yet have it putting Nil in unmatched ? slots... that's going to take a bit more effort.

[21:42] <pmichaud> anyway, i'm afk for a while

[21:42] <[Coke]> pmichaud: once you change what ? does, will you go back to some of the **0..1's and change them back to ?'s ?

[21:43] <[Coke]> jnthn: https://gist.github.com/coke/5485054

[21:45] <[Coke]> (updated to show the clean/config commands used)

[21:45] *** adu joined
[21:45] <pmichaud> [Coke]: yes, I'll go change them back to ?'s

[21:46] <[Coke]> pmichaud: cool.

[21:47] <pmichaud> but that involves eliminating a lot of [0]'s, too

[21:47] <rjbs> If I want to zip together n arrays and iterate over the generated tuples, is this the idiomatic way?

[21:47] <rjbs> for zip(@a, @b, @c).pairs -> $x { say $x.value }

[21:48] <pmichaud> for @a Z @b Z @c -> $a, $b, $c { ... }    is the one I'm familiar with

[21:48] *** thundergnat joined
[21:49] <pmichaud> I don't think .pairs is quite right there

[21:50] <jnthn> .lol maybe?

[21:50] <pmichaud> .lol might work

[21:50] <masak> and zip seems to want zip(@a; @b; @c) -- don't ask me why, but S06 seems pretty consistent on this.

[21:50] <adu> jnthn: hey

[21:50] <pmichaud> yes, it needs semilists there to be able to subdivide the lists.

[21:51] <pmichaud> I don't know if rakudo supports semilist args yet.

[21:51] <rjbs> Ah, right, Z.  I thought zip was infix, earlier, but I see I was confused.

[21:51] <pmichaud> r: my @a = 1..3;  my @b = <a b c>;  my @c = 4,6,8;  for (@a Z @b Z @c).lol -> $x { say $x }

[21:51] <camelia> rakudo a17430: OUTPUT«ListIter.new()␤»

[21:51] <pmichaud> hmmph

[21:52] <pmichaud> r: my @a = 1..3;  my @b = <a b c>;  my @c = 4,6,8;  for (@a Z @b Z @c) -> $x { say $x }

[21:52] <camelia> rakudo a17430: OUTPUT«1␤a␤4␤2␤b␤6␤3␤c␤8␤»

[21:52] <pmichaud> r: my @a = 1..3;  my @b = <a b c>;  my @c = 4,6,8;  say (@a Z @b Z @c)

[21:52] <camelia> rakudo a17430: OUTPUT«1 a 4 2 b 6 3 c 8␤»

[21:52] <pmichaud> r: my @a = 1..3;  my @b = <a b c>;  my @c = 4,6,8;  say (@a Z @b Z @c).perl

[21:52] <camelia> rakudo a17430: OUTPUT«((1, "a", 4), (2, "b", 6), (3, "c", 8)).list␤»

[21:52] <pmichaud> r: my @a = 1..3;  my @b = <a b c>;  my @c = 4,6,8;  say (@a Z @b Z @c).lol.perl

[21:52] <camelia> rakudo a17430: OUTPUT«LoL.new(ListIter.new())␤»

[21:53] <pmichaud> r: my @a = 1..3;  my @b = <a b c>;  my @c = 4,6,8;  say (@a Z @b Z @c).lol.eager.perl

[21:53] <camelia> rakudo a17430: OUTPUT«LoL.new(ListIter.new())␤»

[21:53] <pmichaud> fail.

[21:53] <pmichaud> Someone needs to fix Lists.

[21:53] <pmichaud> Someone needs to whip pmichaud-- into shape to get that fixed.

[21:53] <TimToady> pmichaud++ for self-deprecation :)

[21:54] <pmichaud> it's on my (pardon pun) List.

[21:54] <rjbs> |The thing that made the -> $a, $b, $c solution seem off to me was that when I oopsed and said ->$a,$b it didn't go by tuple, but by pairs out of the flattened list.

[21:54] <jnthn> [Coke]: What does your current ./nqp contain?

[21:54] <pmichaud> actually, -> $a, $b  means take values 2-at-a-time

[21:54] <pmichaud> for naturally flattens the parcels

[21:54] <[Coke]> exec java -cp .:nqp-runtime.jar:3rdparty/asm/asm-4.1.jar nqp "$@"

[21:54] <jnthn> oh.

[21:55] <jnthn> Yeah, then that explains things.

[21:55] <[Coke]> missing dependency on ./nqp ? ;)

[21:55] <rjbs> pmichaud: ...but if I have the count "right" then it will never cause problems?

[21:55] <rjbs> pmichaud: I can't imagine what it would cause, but I am wary. :)

[21:55] <pmichaud> if the # of args matches the number of items in the tuples, it should work out, yes.

[21:55] <adu> jnthn: did you get my message about try/catch?

[21:55] <TimToady> rjbs: to get the other semantics, you'd use: for stuff.lol -> [$a, $b, *@rest] {...}

[21:56] <[Coke]> ah, looks like.

[21:56] <dalek> nqp/rak-jvm-support: 94fe5fc | jnthn++ | tools/build/Makefile-JVM.in:

[21:56] <dalek> nqp/rak-jvm-support: Add missing cleanup; [Coke]++ for reporting.

[21:56] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/94fe5fcf8e

[21:56] *** xilo left
[21:56] <pmichaud> okay, I have to fetch dinner for a kid.  bbl

[21:56] <pmichaud> oh, wait

[21:56] <jnthn> adu: Yes, and was confused 'cus the try/catch tests pass, as you noticed. 

[21:56] <pmichaud> while TimToady++ is here....

[21:56] <jnthn> adu: Do you have a small test case?

[21:56] <adu> yes

[21:57] <adu> nqp: try { nqp::die("hello"); CATCH { say($_); } }

[21:57] <camelia> nqp: OUTPUT«hello␤»

[21:57] <adu> nqp-jvm: try { nqp::die("hello"); CATCH { say($_); } }

[21:57] <camelia> nqp-jvm: OUTPUT«Exception in thread "main" ␤Exception: java.lang.NoClassDefFoundError thrown from the UncaughtExceptionHandler in thread "main"␤»

[21:57] <jnthn> I'm...thinking that nqp-jvm target is not up to date

[21:57] <rjbs> r:  my @a = <<1 2 3>>; my @b = <<4 5 6>>; my @c = <<7 8 9>>; for (@a Z @b Z @c).lol -> [ $a, $b, *@rest ]  { say "$a $b" }

[21:57] <camelia> rakudo a17430: OUTPUT«Nominal type check failed for parameter ''; expected Positional but got ListIter instead␤  in block  at /tmp/EYaOXcd3Bq:1␤␤»

[21:57] <pmichaud> given:   'abcd' ~~ / <alpha>? xyz || ab /

[21:57] <rjbs> That error loses me.

[21:57] <rjbs> pmichaud++ # ever helpful

[21:58] <pmichaud> does $/<alpha> exist or no?

[21:58] <adu> let me see if I can convert that to .t style

[21:59] <pmichaud> by way of comparison:   'abcd' ~~ / <alpha>? abc /     # clearly $/<alpha> is Nil.

[21:59] <TimToady> well, a Nil that is really should generally be indistinguishable from a Nil that is supplied because nothing is there...

[22:00] <masak> 'night, #perl6

[22:00] <FROGGS> gnight masak 

[22:00] <jnthn> adu: If you repalce say($_) with say(nqp::getmessage($_)) it seems to work 

[22:00] <pmichaud> TimToady: I don't quite follow the meaning of that.

[22:01] <adu> interesting

[22:01] <pmichaud> I guess I'm asking about $/<alpha>:exists

[22:01] <TimToady> I'm saying it doesn't matter whether there's a slot in there for it, if the non-matching slot would return Nil in either case

[22:01] <TimToady> I'm fine with it not existing

[22:02] <pmichaud> okay, I think I follow that (more)

[22:02] <jnthn> TimToady: So iiuc you can implement this by having Match objects default to producing Nil for any non-existing element?

[22:02] <TimToady> I'm also fine with it existing if it defaults to Nil

[22:02] <pmichaud> so, in the case of   'abcd' ~~ / <alpha>? abc /     it's okay  if  $/<alpha>:exists is False

[22:03] <TimToady> That's consistent with the way matches are supposed to behave as a whole now; either a defined Match or Nil

[22:03] <pmichaud> okay

[22:03] <pmichaud> wfm

[22:03] <pmichaud> jnthn: (which answers your question in the affirmative, I believe)

[22:03] <TimToady> n: say 'foo' ~~ /bar/

[22:03] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«Nil␤»

[22:03] <jnthn> pmichaud: I'm guessing this way is a bit easier too? ;)

[22:03] <adu> jnthn: http://pastie.org/7739957

[22:03] <pmichaud> which makes my job much simpler :-)

[22:03] <grondilu> How could I do a partial match with a non-literal value?   For instance, if $x = "foobar",  I'd like to match f, foo, foob, etc.  But only using $x, not the litteral "foobar".

[22:04] <[Coke]> jnthn++ #nqp unborkage.

[22:04] <jnthn> [Coke]: *phew*

[22:05] <TimToady> r: my @a = <1 2 3>; my @b = <4 5 6>; my @c = <7 8 9>; for (@a Z @b Z @c).tree -> [ $a, $b, *@rest ]  { say "$a $b" }

[22:05] <camelia> rakudo a17430: OUTPUT«1 4␤2 5␤3 6␤»

[22:05] <TimToady> rjbs: that works, though lol should too

[22:05] <dalek> v5: ad07a61 | (Tobias Leich)++ | / (3 files):

[22:05] <dalek> v5: strip role-specifica from package_def

[22:05] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/ad07a61bff

[22:06] <pmichaud> grondilu: I wonder if some variation of <*...> would work here.

[22:06] <TimToady> in this case .tree is producing what .lol ought to, since the tree is only one deep

[22:06] <adu> o wait, that's wrong

[22:06] <[Coke]> jnthn: next borkage - can't config rakudo/jvm-support with that installed nqp

[22:06] <pmichaud> grondilu: as in, something like  <*$x> .  However, that's definitely NYI in Rakudo.

[22:06] <[Coke]> Unhandled exception: ModuleLoader.class (No such file or directory)

[22:06] <pmichaud> I need to go feed a kid, bbl

[22:06] <rjbs> TimToady++ # great, thanks!

[22:07] <[Coke]> (when trying to run the installed NQP from another directory)

[22:07] <cognominal> nqp: https://gist.github.com/cognominal/5485184

[22:07] <jnthn> [Coke]: You need to make install in the NQP directory

[22:07] <camelia> nqp: OUTPUT«Method 'O' not found for invocant of class 'NQPMu'␤current instr.: '' pc 189 ((file unknown):100) (/tmp/OHG_mUMeye:2)␤»

[22:07] <[Coke]> jnthn: yes, did that.

[22:07] <grondilu> r: my $x = 'foobar'; say "foo" ~~ / <* $x > /;

[22:07] <adu> jnthn: http://pastie.org/7739971

[22:07] <camelia> rakudo a17430: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unrecognized regex metacharacter < (must be quoted to match literally)␤at /tmp/eeYs5xsnPr:1␤------> [32mmy $x = 'foobar'; say "foo" ~~ / <[33m⏏[31m* $x > /;[0m␤Unable to parse regex; couldn't find final '/'␤at /tmp/eeYs5xsnPr:1␤--…

[22:07] <jnthn> And run the nqp in there

[22:07] <jnthn> [Coke]: Hmm...

[22:07] *** wolverian left
[22:08] <TimToady> n: my $x = 'foobar'; say "foo" ~~ / <* $x > /;

[22:08] <camelia> niecza v24-37-gf9c8fc2: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Action method assertion:sym<*> not yet implemented at /tmp/TrVskHhCmS line 1:␤------> [32mmy $x = 'foobar'; say "foo" ~~ / <* $x [33m⏏[31m> /;[0m␤␤Unhandled exception: Unable to resolve method oplift in type Any␤  at /ho…

[22:08] <[Coke]> jnthn: aye. 

[22:08] <[Coke]> wonder if I need to kill the install dir with fire and reinstall.

[22:08] <jnthn> omg

[22:08] <[Coke]> no love.

[22:08] <jnthn> no, I just need to look what I'm doing

[22:08] <[Coke]> jnthn: yessss?

[22:08] <[Coke]> ah, whew.

[22:09] <[Coke]> -> commute

[22:09] <TimToady> rakudo on jvm?

[22:09] <[Coke]> nothing to see here, TimToady!

[22:09] <adu> jnthn: what are you doing?

[22:09] <cognominal> what is the problem with this grammar?  https://gist.github.com/cognominal/5485184

[22:09] *** DET15 joined
[22:09] <cognominal> oops

[22:09] <dalek> nqp/rak-jvm-support: 0b4efcf | jnthn++ | tools/build/install-jvm-runner.pl:

[22:09] <dalek> nqp/rak-jvm-support: Fix make install on non-Windows, hopefully.

[22:09] <dalek> nqp/rak-jvm-support: 

[22:09] <dalek> nqp/rak-jvm-support: [Coke]++ again.

[22:09] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/0b4efcfa87

[22:09] <cognominal> a stray space

[22:10] *** DET15 left
[22:10] <cognominal> works now

[22:10] <jnthn> adu: Putting arguments in the wrong order in a generated shell script, apparently... :)

[22:10] <adu> :)

[22:10] <jnthn> adu: I'm guessing that explodes with something like not being able to stringify the exception?

[22:11] <adu> jnthn: something like that

[22:12] <adu> it doesn't for me because I put an extra nqp::getcodename() in stringify, to see if that would help

[22:12] <adu> for me it says "getcodename can only be used with a CodeRef"

[22:12] <jnthn> Yeah, and it's correct ;)

[22:12] <adu> lol

[22:12] <jnthn> smart_stringfiy is not so smart it turns out... :)

[22:14] <adu> I have a general question… where is nqp's main?

[22:14] <dalek> rakudo/jvm-support: eb61e56 | jnthn++ | / (3 files):

[22:14] <dalek> rakudo/jvm-support: Stub in a rakudo-runtime.jar build.

[22:14] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/eb61e56858

[22:14] <dalek> rakudo/jvm-support: ec3e2e1 | jnthn++ | src/vm/jvm/Perl6/Ops.nqp:

[22:14] <dalek> rakudo/jvm-support: Fix copy-pasto.

[22:14] <dalek> rakudo/jvm-support: review: https://github.com/rakudo/rakudo/commit/ec3e2e1093

[22:15] <jnthn> adu: MAIN is in src/NQP/Compiler.nqp

[22:17] <adu> interesting

[22:21] <dalek> nqp/rak-jvm-support: bfe3fcc | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[22:21] <dalek> nqp/rak-jvm-support: Make exceptions stringify to message.

[22:21] <dalek> nqp/rak-jvm-support: 

[22:21] <dalek> nqp/rak-jvm-support: Fixes issue discovered by adu++, and means we make it through QRegex

[22:21] <dalek> nqp/rak-jvm-support: and P5Regex tests (though with failures).

[22:21] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/bfe3fccf64

[22:24] <dalek> nqp/rak-jvm-support: 1a8fbc8 | jnthn++ | src/HLL/Grammar.nqp:

[22:24] <dalek> nqp/rak-jvm-support: Fix FAILGOAL in HLL::Grammar.

[22:24] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/1a8fbc8cbd

[22:29] <adu> oh no, my github name is different than my irc name :(

[22:29] <FROGGS> ya dude

[22:30] *** ozmq joined
[22:32] *** dean__ joined
[22:39] * lue wonders what rak-jvm-support is about

[22:42] <FROGGS> about shaving I've heard

[22:42] <sorear> lue: rak(udo) j(ava) v(irtual) m(achine) support

[22:43] <lue> OK.

[22:44] <jnthn> lue: It's a branch where I've got changes that jvm-support branch in Rakudo that is currently being worked on depends on (no, nothing exciting to play with just yet...)

[22:44] <dalek> v5: 653971c | (Tobias Leich)++ | lib/Perl6/P5Grammar.pm:

[22:44] <dalek> v5: silence exception about package def in subscope

[22:44] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/653971ce4b

[22:44] <dalek> v5: c116edb | (Tobias Leich)++ | / (2 files):

[22:44] <dalek> v5: added mro to the pragma-todo-list (which are noops yet)

[22:44] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/c116edb21e

[22:46] <lue> alright, just curious (I thought "rak" might've been some Java technology I'm unfamiliar with)

[22:47] *** Chillance left
[22:48] * FROGGS .oO( the successor of AJAX? It is so dynamic it can even make coffee! )

[22:59] *** skids joined
[23:01] <adu> jnthn: it's still broken

[23:01] *** xilo joined
[23:06] <jnthn> adu: What is?

[23:07] <FROGGS> gnight

[23:07] *** FROGGS left
[23:08] *** dean__ left
[23:10] <jnthn> adu: It certainly made some kind of difference here.

[23:13] <adu> maybe I need to make clean

[23:13] <jnthn> adu: Maybe...what are you trying that doesn't work?

[23:13] <adu> make test

[23:14] <jnthn> Oh, I know *that* explodes.

[23:14] <jnthn> I thought you meant the exception stringification thing.

[23:14] <jnthn> The regex tests get a load further now, though.

[23:15] <adu> I thought you added getmesage somewhere

[23:15] <adu> or .message I see

[23:16] <jnthn> No, I fixed it so exceptions automatically stringify to the message.

[23:19] *** tgt left
[23:20] *** tgt joined
[23:22] *** ozmq left
[23:22] <jnthn> Sleep time... 'night

[23:22] <adu> jnthn: can you see what ./nqp -e 'my $ok := "BAD"; try { nqp::die("GOOD"); CATCH { $ok := $_; }; }; say($ok)' gives you?

[23:23] <adu> it's not working for me

[23:23] <jnthn> adu: GOOD

[23:23] <adu> hmm, is there anything else other than "make clean" I should be doing?

[23:23] <jnthn> adu: Wait, I pushed that fix to origin/rak-jvm-support

[23:23] <jnthn> Not to origin/master

[23:24] <jnthn> Maybe it's just that you ain't on that branch? :)

[23:24] <adu> oh, hahaha

[23:26] <adu> thanks

[23:26] <jnthn> OK, really sleep... &

[23:26] <adu> should I commit my test case to that branch?

[23:26] <jnthn> adu: yes, plesae :)

[23:26] <adu> ok

[23:26] <adu> gnight

[23:36] <adu> hmm

[23:48] *** ozmq joined
[23:50] *** roll joined
[23:51] *** ozmq left
[23:55] *** Vlavv_ left
[23:59] *** ozmq joined
