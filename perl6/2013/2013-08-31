[00:12] *** Psyche^ joined
[00:15] *** kid51 left
[00:15] *** Psyche^_ left
[00:20] *** Rotwang1 left
[00:24] <TimToady> .pong

[00:38] *** jnap left
[00:59] *** xenoterracide left
[00:59] *** xenoterracide_ joined
[01:04] *** xenoterracide_ left
[01:05] *** Ben_Goldberg joined
[01:07] *** BenGoldberg left
[01:10] *** Ben_Goldberg left
[01:10] *** FROGGS_ joined
[01:14] *** FROGGS left
[01:20] *** berekuk left
[01:20] *** dhaivat joined
[01:23] *** berekuk joined
[01:25] *** berekuk left
[01:27] *** berekuk joined
[01:27] <[Coke]> updated https://gist.github.com/coke/5879701

[01:27] *** daniel-s_ joined
[01:29] *** berekuk left
[01:36] *** SamuraiJack_ joined
[01:44] *** EvanTeitelman left
[01:45] *** EvanTeitelman joined
[01:45] *** xinming left
[01:45] *** EvanTeitelman left
[01:47] *** xinming joined
[01:47] *** abnorman left
[01:52] *** SamuraiJack_ left
[01:53] *** danaj left
[01:56] *** xenoterracide_ joined
[01:59] *** dayangkun left
[02:07] *** xenoterracide_ left
[02:09] *** danaj joined
[02:13] *** BenGoldberg joined
[02:15] *** PacoAir left
[02:19] *** abnorman joined
[02:37] *** dhaivat left
[02:41] *** BenGoldberg left
[02:46] <[Coke]> .tell lizmat S02-names/is_default.rakudo.jvm aborted 114 test(s)

[02:46] <yoleaux> [Coke]: I'll pass your message to lizmat.

[02:48] *** thou left
[02:56] *** abnorman left
[03:09] <[Coke]> here's a rakudo-jvm bug: IO::Spec::Win32.abs2rel('/a'); - throws an error about not finding 'match'

[03:09] <[Coke]> rakudo: IO::Spec::Win32.abs2rel('/a');

[03:09] <camelia> rakudo afe36d:  ( no output )

[03:09] <[Coke]> rakudo: IO::Spec::Win32.abs2rel('/a')

[03:09] <camelia> rakudo afe36d:  ( no output )

[03:09] <[Coke]> (whoops)

[03:09] <benabik> r: IO::Spec::Win32.abs2rel('/a').say

[03:09] <camelia> rakudo afe36d: OUTPUT¬´..\..\a‚ê§¬ª

[03:17] <[Coke]> r: say "that's about {33+19} tests more..."

[03:17] <camelia> rakudo afe36d: OUTPUT¬´that's about 52 tests more...‚ê§¬ª

[03:20] <[Coke]> zzz

[03:23] *** fridim_ joined
[03:24] *** dhaivat joined
[03:27] *** jaldhar joined
[03:32] *** mauke left
[03:33] *** mauke joined
[03:33] <lue> rn: sub infix:<IFSO OTHERWISE>($a, $b, $c) { $a ?? $b !! $c }; say 1 IFSO 2 OTHERWISE 3

[03:33] <camelia> niecza v24-90-gd827fa8: OUTPUT¬´Unhandled exception: No value for parameter '$c' in 'infix:<IFSO OTHERWISE>'‚ê§  at /tmp/XXgQDasMgd line 0 (infix:<IFSO OTHERWISE> @ 1) ‚ê§  at /tmp/XXgQDasMgd line 1 (mainline @ 4) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4579 (ANON @ 3) ‚ê§  at /home/p6‚Ä¶

[03:33] <camelia> ..rakudo afe36d: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/PJVGEK_bWq‚ê§Two terms in a row‚ê§at /tmp/PJVGEK_bWq:1‚ê§------> [32m>($a, $b, $c) { $a ?? $b !! $c }; say 1 [33m‚èè[31mIFSO 2 OTHERWISE 3[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        infix stopper‚ê§        i‚Ä¶

[03:33] <lue> :/

[03:33] *** preflex left
[03:35] <benabik> Trinary isn't supported that wawy.

[03:35] *** preflex joined
[03:35] *** ChanServ sets mode: +v preflex

[03:35] <benabik> ?? !! has a custom parse in the grammar

[03:36] <lue> S02:3250 suggests differently.

[03:36] <synopsebot> Link: http://perlcabal.org/syn/S02.html#line_3250

[03:37] <lue> (although I'd instead vouch for an incircumfix category, as opposed to overloading infix with that ternary notion)

[03:38] <benabik> Erm.  That is how the _name_ is parsed.

[03:39] <benabik> But Perl6::Grammar doesn't translate that name to a trinary op.

[03:40] <lue> Not that I expected it to work, but that S02 line feels incredibly misleading.

[03:40] <benabik> Eventually you might be able to do something weird like infix:<<A B>> is parsed(/'A' <expr> 'B'/)

[03:41] <benabik> It might be better to use a (post)circumfix:<< >> as an example instead.

[03:42] <lue> circumfix would be the easiest example. I think I'll change it.

[03:45] *** abnorman joined
[03:45] *** abnorman left
[03:46] <dalek> specs: ccc6176 | lue++ | S02-bits.pod:

[03:46] <dalek> specs: [S02] Replace misleading example

[03:46] <dalek> specs: 

[03:46] <dalek> specs: Specifically, infix:<?? !!> wrongly implies that you can implement

[03:46] <dalek> specs: ternary operators in this fashion, when it reality it's much more

[03:46] <dalek> specs: complex a task. This example was thus replaced with a situation where

[03:46] <dalek> specs: multi-element operator names makes sense (circumfix:¬´<< >>¬ª).

[03:46] <dalek> specs: review: https://github.com/perl6/specs/commit/ccc6176eed

[03:46] <benabik> Hm.  I hadn't actually expected you to use circumflex:¬´<< >>¬ª, but it works.  :-D

[03:47] <benabik> lue++ # finding and removing confusion

[03:48] <lue> I was going to do circumfix:<( )> or similar but I think part of the point of that example was to demonstrate the possibility of multi-char multi-element names (thus emphasize the need for the separating space in <> form).

[03:48] <benabik> fair

[03:57] *** dhaivat left
[03:57] *** dhaivat joined
[04:09] *** jaldhar left
[04:10] *** xenoterracide_ joined
[04:11] *** jaldhar joined
[04:15] *** bluescreen10 left
[04:20] *** fridim_ left
[04:25] *** dhaivat left
[04:26] *** cooper joined
[04:26] *** cooper left
[04:26] *** cooper joined
[04:32] *** dhaivat joined
[04:41] *** telex left
[04:42] *** telex joined
[04:47] *** dhaivat left
[04:52] *** arlinius left
[04:57] <TimToady> umm, << >> is not a circumfix

[04:58] <benabik> Details.

[04:58] <TimToady> it's a quoter

[04:58] <TimToady> it's not a circumfix unless it takes an EXPR in the middle

[05:01] *** dhaivat joined
[05:09] *** skids left
[05:14] *** dhaivat left
[05:15] *** kaare_ joined
[05:21] *** arlinius joined
[05:24] *** aindilis joined
[06:16] *** berekuk joined
[06:32] <dalek> v5: 61eb362 | (Tobias Leich)++ | / (2 files):

[06:32] <dalek> v5: return subcaptures if applicable

[06:32] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/61eb3623ca

[06:34] *** berekuk left
[06:40] *** cbk left
[06:55] *** moritz_ joined
[06:58] *** LordVorp joined
[06:58] *** slavik1 joined
[06:59] *** moritz left
[07:00] *** zakalwe_ joined
[07:00] *** renormalist joined
[07:01] *** ugexe_ joined
[07:01] *** kst` joined
[07:02] *** gabriel joined
[07:02] *** kshannon_ joined
[07:04] *** logie left
[07:04] *** segomos_ joined
[07:04] *** TimToady_ joined
[07:04] *** cooper_ joined
[07:05] *** risou_awy_ joined
[07:06] *** silug_ joined
[07:11] *** cooper left
[07:11] *** risou_awy left
[07:11] *** kst left
[07:11] *** slavik left
[07:11] *** silug left
[07:11] *** cooper_ is now known as cooper

[07:11] *** cooper left
[07:11] *** cooper joined
[07:11] *** domidumont joined
[07:14] *** domidumont left
[07:17] *** Timbus joined
[07:17] *** BinGOs joined
[07:28] *** domidumont joined
[07:31] *** benabik left
[07:33] *** domidumont left
[07:33] *** domidumont joined
[07:37] *** domidumont left
[07:40] *** dmol joined
[07:41] *** FROGGS_ is now known as FROGGS

[07:43] <FROGGS> jnthn / masak: I'd like to create a (perl5-ish) nqp::pack and nqp::unpack like we did for sprintf, would that be okay?

[08:02] *** denis_boyun joined
[08:07] *** denis_boyun left
[08:07] *** dayangkun joined
[08:08] <moritz_> \o

[08:08] *** moritz_ is now known as moritz

[08:08] <FROGGS> moin moritz 

[08:23] *** denis_boyun joined
[08:42] *** PacoAir joined
[08:55] <lizmat> morning all

[08:55] <yoleaux> 02:46Z <[Coke]> lizmat: S02-names/is_default.rakudo.jvm aborted 114 test(s)

[08:56] <lizmat> .tell [Coke]: I have no idea: 114 is *all* tests.  on parakudo it says: Files=1, Tests=114,  3 wallclock secs ( 0.03 usr  0.00 sys +  2.75 cusr  0.17 csys =  2.95 CPU)

[08:56] <yoleaux> lizmat: What kind of a name is "[Coke]:"?!

[08:56] <lizmat> .tell [Coke] I have no idea: 114 is *all* tests.  on parakudo it says: Files=1, Tests=114,  3 wallclock secs ( 0.03 usr  0.00 sys +  2.75 cusr  0.17 csys =  2.95 CPU)

[08:56] <yoleaux> lizmat: I'll pass your message to [Coke].

[08:56] *** teslos joined
[09:03] *** arlinius left
[09:14] <lizmat> FROGGS: fwiw, that seems like an excellent ide

[09:14] <lizmat> a

[09:15] <FROGGS> yeah, because v5 contains an improved pack/unpack, and it should be faster when it was in nqp

[09:16] <lizmat> would v5 be able to use that as well then?

[09:17] <FROGGS> it would... btw, nqp::sprintf gave v5 about 1000 passing tests

[09:25] <masak> good antenoon, #perl6

[09:25] <lizmat> masak /o

[09:27] <masak> /o\

[09:27] *** teslos left
[09:27] <jnthn> morning, #perl6

[09:28] * masak .oO( at least I'm here before jnthn... ) :P

[09:28] * lizmat hopes jnthn got some serialize_tc inspiration...

[09:29] * jnthn took advantage of being able to sleep in, given he has to get up and teach all 5 days next week...

[09:30] <lizmat> oooh  wow

[09:34] * masak has it easy, only has to teach 4 days next week ;)

[09:34] <jnthn> It's almost like it's autumn :P

[09:35] * masak .oO( and boy do we "fall" for that, ever time ) :P

[09:35] <jnthn> *groan*

[09:35] * jnthn springs to the coffee machine

[09:36] <masak> ...and we're fresh out of season-related puns.

[09:36] <lizmat> nuts, we'll soon have nuts!

[09:36] *** berekuk joined
[09:37] <masak> no, that's a squirrel-related pun at best :P

[09:39] <arnsholt> Definitely seasonal, I'd say =p

[09:40] *** kaare_ left
[09:40] * masak .oO( fair enough. let's pick nuts, not pick nits )

[09:42] <arnsholt> We could also go nuts

[09:42] <arnsholt> But maybe not bananas

[09:43] * arnsholt ponders when bananas are actually in season

[09:43] <jnthn> .oO( bananaphobe... )

[09:44] <arnsholt> Gee, thanks. There goes that day's worth of music listening ^_^

[09:44] <jnthn> bwahaha

[09:44] <lizmat> .oO( what would a movie called "Bananarama 3D" be like )

[09:46] <arnsholt> And from that song, I remembered spotify:track:0PCyUmv2yn4h82GOZ6SKNT. Yet another hit from the early days of my internet career

[09:48] <masak> arnsholt: I have no idea how to visit that resource specifier.

[09:49] <arnsholt> Put it into your spotify client's search field (less the period, which is sentence final)

[09:50] <arnsholt> Although to be fair, the proper proper link is http://www.albinoblacksheep.com/flash/french

[09:50] *** arlinius joined
[09:50] <jnthn> .oO( Let it be Rick Astley, let it be Rick ... )

[09:50] <masak> arnsholt: oh, that one :)

[09:50] <arnsholt> Oh no, way before Rick =)

[09:50] <arnsholt> And much more hilarious (although possibly not to lizmat)

[09:52] <jnthn> :)

[09:52] <jnthn> Yes, seen that one some time ago :)

[09:53] <masak> no, listening to deformed lyrics of a song in your own language is hopeless.

[09:53] <arnsholt> Also, relistening to Bananaphone, there are some truly #perl6-worthy puns in there

[09:53] <masak> the whole thing is ruined by your brain helpfully telling you what the song is all about.

[09:53] <arnsholt> "It's no baloney, it ain't a phoney!"

[09:54] *** Rotwang1 joined
[09:54] * masak .oO( I sausage that one coming miles away )

[09:54] <lizmat> :-)

[09:56] <masak> it has a nice rhythm to it.

[09:56] <masak> (Bananaphone, not French)

[09:56] <masak> *lol* "it's a phone with appeal!"

[09:57] <masak> that one snuck up on me. and it feels like a really "pure" pun, for some reason.

[09:57] <masak> like, you'd create the entire song around it, just to get that pun in at the end.

[09:58] <lizmat> some books start with the final line being written first  :-)

[09:58] <arnsholt> It's even in there twice. At the beginning there's "I've got a feeling, so appealing" as well =D

[09:59] <masak> that one doesn't trigger it for me, even though I see the connection.

[09:59] <masak> the nice thing about the second use is that you can hear the sentence two ways.

[10:01] *** kaare_ joined
[10:03] *** hummeleBop joined
[10:04] * lizmat wonders whether she should wait for jnthn to fix the serialize_tc issue, or start on something else

[10:05] <jnthn> lizmat: Probably the latter, it will need quite some golfing...

[10:06] <lizmat> okidoki

[10:06] <lizmat> let me know if I can help you with the glof

[10:06] <lizmat> golf

[10:06] <lizmat> wave

[10:06] <lizmat> stream

[10:06] <lizmat> subconcious

[10:06] <lizmat> should

[10:06] <lizmat> stop

[10:07] <jnthn> lizmat: Well, most helpful would be to have an example of it just in terms of a role and a BEGIN-time mixin of it to some class.

[10:07] <jnthn> (If it can be done that way.)

[10:07] <lizmat> maybe strip the CORE_SOURCES list and get a smaller sample?

[10:08] <jnthn> Well, no, I think it can be reproduced just in a single file

[10:08] <lizmat> but still during building of setting, right ?

[10:08] <jnthn> Without mentioning Hash at all, just creating something with a similar structure and using a BEGIN method that does a mixin

[10:08] <jnthn> No

[10:08] <jnthn> Because we managed to reproduce it last night separately.

[10:08] <lizmat> did we?

[10:09] <jnthn> Yes, you had a short file that used a typed hash that wouldn't pre-compile...

[10:09] <jnthn> Which suggests any usage of one triggers it

[10:09] <lizmat> I just added that class to Bag.pm (which was otherwise clean)

[10:10] <jnthn> Oh...I thought you'd done it as a separate file?

[10:10] <jnthn> Outside of setting...

[10:10] <jnthn> Hmm.

[10:10] <lizmat> no, sorry

[10:10] <jnthn> Ah

[10:10] <jnthn> May still be worth checking if that explodes though...

[10:10] <jnthn> OK, then it's harder.

[10:11] <lizmat> r: class A { my Int %h{Any} }

[10:11] <camelia> rakudo afe36d:  ( no output )

[10:11] <lizmat> doesn't bomb

[10:11] <lizmat> I'm not sure what you're getting at?

[10:11] <jnthn> Yes, but that's not serializing.

[10:12] <jnthn> Would need to be in a module, then pre-compile the module

[10:13] <lizmat> perl6 --target=pir --stagestats --output=test.pir -e 'class A { my Int %h{Any} }' test   # works

[10:13] <jnthn> ah

[10:13] <jnthn> So the usage has to be within the setting...

[10:14] <jnthn> Grr

[10:17] <lizmat> the generated .pir files clearly states:

[10:17] <lizmat>     push $P5004, "!UNIT_MARKER"

[10:17] <lizmat>     push $P5004, "Hash[Int,Any]"

[10:17] <lizmat>     push $P5004, "TValue"

[10:17] <lizmat>     push $P5004, "TKey"

[10:18] <lizmat> $ perl6 -Mtest -e 1   # also works

[10:19] <lizmat> even with -I.  :-)

[10:21] <Teratogen> pirrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr

[10:21] *** ssutch left
[10:27] <masak> Teratogen: :)

[10:27] <Teratogen> masak what is up!?

[10:29] <masak> Teratogen: clouds. feather.perl6.nl. the positive y axis.

[10:29] <Teratogen> actually Buckminster Fuller made the observation that really there is no up or down, there is just in and out

[10:30] <masak> the study of the Zermelo-Fraenkel axioms has made me draw the same conclusion.

[10:30] <jnthn> But...but...I go in the elevator which goes up or down, then I got out...

[10:31] <lizmat> haw can you be sure the building didn't move down and up ?

[10:32] <jnthn> Well, some of the tallest buildings I've been in were in earthquake zones...

[10:32] <jnthn> .oO( or is that "been up" :P )

[10:36] <masak> r: say sgn(4)

[10:36] <camelia> rakudo afe36d: OUTPUT¬´[31m===[0mSORRY![31m===[0m Error while compiling /tmp/2oZ5kXrBH4‚ê§Undeclared routine:‚ê§    sgn used at line 1. Did you mean '&sign', '&sin'?‚ê§‚ê§¬ª

[10:36] <masak> r: say sign(4)

[10:36] <camelia> rakudo afe36d: OUTPUT¬´1‚ê§¬ª

[10:40] <Teratogen> jnthn, when you get into an elevator and go "up" you are actually going "out" from the earth.

[10:40] <masak> also, if you look at "up" upside-down, it says "dn"

[10:41] <jnthn> :P

[10:42] <Teratogen> well in upside down is ni, like the Knights who say Ni

[10:44] <masak> no "in" upside-down is "uƒ±"

[10:44] *** domidumont joined
[10:44] <jnthn> masak: fail, you want a COMBINING DOT BELOW on that ƒ± :P

[10:45] <Teratogen> we want... a SHRUBBERY!

[10:45] *** denysoniqeu is now known as denysonique

[10:48] <masak> jnthn: aye :)

[10:58] <lizmat> r: say ~Mu

[10:58] <camelia> rakudo afe36d: OUTPUT¬´Nominal type check failed for parameter ''; expected Any but got Mu instead‚ê§  in sub prefix:<~> at src/gen/CORE.setting:1368‚ê§  in block  at /tmp/9zUTGWsOVJ:1‚ê§‚ê§¬ª

[10:59] <lizmat> since Mu has .Stringy, and prefix ~ calls .Stringy, any objections against making prefix ~ take Mu ?

[10:59] <masak> no objections.

[11:00] <lizmat> spectesting

[11:00] <masak> though the obvious question is how it interacts with Junction

[11:00] <lizmat> maybe an extra candidate then ?

[11:01] <jnthn> -1. This feels like a slipperly slope. If we do this to ~, how many more operators will we do it to?

[11:01] <lizmat> it's just that there is a failing spectest for ~Mu

[11:01] <lizmat> so maybe the spectest should go ?

[11:02] <masak> maybe.

[11:02] <masak> why is it we have a Mu type again?

[11:02] <lizmat> to allow for more cow puns

[11:02] <lizmat> but only if you change them  :-)

[11:03] * masak .oO( bullshit puns )

[11:04] <lizmat> hmmm‚Ä¶ actually, slightly above in the test file it says:

[11:04] <lizmat> # jnthn and pmichaud believe the next test is incorrect

[11:04] <lizmat>   # is +Mu,          0, "+ context forcer works (8)";

[11:04] <masak> heh.

[11:04] <jnthn> Mu is outside of Any to allow dispatch fail-over to trigger stuff like auto-threading.

[11:04] <masak> right, also known as "we put junction semantics in the type system".

[11:04] <jnthn> Right.

[11:04] <jnthn> Or rather, use the type system to flag up the case.

[11:05] <jnthn> That's a general Perl 6 thing, though.

[11:05] <masak> troo

[11:05] <jnthn> (Pushing decision making into the type system)

[11:05] <lizmat> so: ~Mu should never work, ergo we need a spectest that it fails ?

[11:06] <lizmat> otoh, what are .Str and .Stringy doing in src/core/Mu then?

[11:06] <lizmat> shouldn;t they be in Any then ?

[11:06] <jnthn> Yes, should have a test that it fails...

[11:07] <masak> there's been a bit of back and forth about this in the backlog over the years, I recall...

[11:07] <lizmat> and what to think about methods in Mu.pm that don't have a Mu signature ?

[11:08] <masak> I think it was differences like this that led to something like .gist

[11:08] <lizmat> r: say Mu.Str

[11:08] <camelia> rakudo afe36d: OUTPUT¬´use of uninitialized value of type Mu in string context  in block  at /tmp/a6ez5MmVGq:1‚ê§‚ê§‚ê§¬ª

[11:08] <lizmat> r: say Mu.Stringy

[11:08] <camelia> rakudo afe36d: OUTPUT¬´use of uninitialized value of type Mu in string context  in block  at /tmp/f6CZNG45VI:1‚ê§‚ê§‚ê§¬ª

[11:09] <jnthn> I don't think "~ should auto-thread" automatically means "Mu shouldn't know how to .Str".

[11:09] <lizmat> ok

[11:09] <jnthn> They're at lesat somewhat orthogonal.

[11:10] <lizmat> I'll just add tests for +Mu and ~Mu failing

[11:10] <lizmat> r: say +Mu

[11:10] <camelia> rakudo afe36d: OUTPUT¬´Nominal type check failed for parameter ''; expected Any but got Mu instead‚ê§  in sub prefix:<+> at src/gen/CORE.setting:3500‚ê§  in block  at /tmp/AgVUdmylxX:1‚ê§‚ê§¬ª

[11:10] <lizmat> r: say +Any

[11:10] <camelia> rakudo afe36d: OUTPUT¬´use of uninitialized value of type Any in numeric context  in block  at /tmp/uBKOARA6P4:1‚ê§‚ê§0‚ê§¬ª

[11:11] *** Faxmachinen joined
[11:11] <Faxmachinen> Hi folks

[11:11] <Faxmachinen> Is first always eager?

[11:12] <jnthn> I guess it has to reify up until it finds the first thing that matches.

[11:12] <lizmat> first is lazy

[11:12] <lizmat> there are spectests for that

[11:13] <jnthn> r: (gather { for 1..20 { .say; take $_ } }).first(3)

[11:13] <camelia> rakudo afe36d: OUTPUT¬´1‚ê§2‚ê§3‚ê§¬ª

[11:13] <jnthn> Looks like it's behaving as I described. :)

[11:16] <Faxmachinen> r: (Date.new(1900, 1, 1) ... Date.new(10000, 1, 1)).first({ .day-of-week == 7 })

[11:16] <camelia> rakudo afe36d:  ( no output )

[11:18] <Faxmachinen> Is this a recent change maybe? On my local Rakudo Whatever that line takes like ten thousand years to evaluate

[11:19] <Faxmachinen> This is perl6 version 2013.05 built on parrot 5.3.0 revision 0

[11:19] <jnthn> Faxmachinen: I seem to recall fixes to first in the not too distant past

[11:19] <FROGGS> maybe it is doing in in real-time?

[11:20] <jnthn> ah

[11:20] <jnthn> New in 2013.07

[11:20] <jnthn> + List.first is now lazy

[11:20] <Faxmachinen> Thanks :)

[11:20] <jnthn> (from docs/ChangeLog)

[11:24] *** xenoterracide_ left
[11:27] *** denis_boyun left
[11:29] *** rindolf joined
[11:32] *** jaldhar left
[11:33] *** jaldhar joined
[11:33] *** denis_boyun joined
[11:37] <dalek> roast: 4ea3b29 | (Elizabeth Mattijsen)++ | S03- (8 files):

[11:37] <dalek> roast: Some skip/todo fudges and some new tests

[11:37] <dalek> roast: review: https://github.com/perl6/roast/commit/4ea3b29176

[11:37] <lizmat> running some errands&

[11:48] *** Rotwang1 left
[11:48] <arnsholt> Weeeeirdness

[11:49] <arnsholt> To the gdb-mobile!

[11:52] <arnsholt> Parrot Y U return 0x1????

[11:54] *** jaldhar left
[11:55] *** Rotwang1 joined
[12:00] *** Rotwang1 left
[12:01] *** jaldhar joined
[12:12] *** cognominal joined
[12:16] *** PacoAir left
[12:16] *** Rotwang1 joined
[12:34] *** xenoterracide_ joined
[12:38] *** mtk left
[12:39] *** Rotwang1 left
[12:42] *** mtk joined
[12:52] <flussence> r: say (Date.new(1900, 1, 1) ... Date.new(10000, 1, 1)).first({ .day-of-week == 7 })

[12:52] <camelia> rakudo afe36d: OUTPUT¬´1900-01-07‚ê§¬ª

[12:54] *** xenoterracide_ left
[12:54] *** Rotwang1 joined
[12:55] * lizmat just realizes today is the 5th palindrome date of the year: 31-8-13

[12:55] <masak> r: say (Date.new(1900, 1, 1) ... *).first({ .day-of-week == 7 })

[12:55] <camelia> rakudo afe36d: OUTPUT¬´1900-01-07‚ê§¬ª

[12:58] <masak> r: sub palindrome { $^s eq $s.flip }; .say when &palindrome for (Date.new(2013, 1, 1) ... Date.new(2013, 12, 31)).map({ "{.day}-{.month}-{.year.substr(2)}" })

[12:58] <camelia> rakudo afe36d: OUTPUT¬´31-1-13‚ê§31-3-13‚ê§31-5-13‚ê§31-7-13‚ê§31-8-13‚ê§¬ª

[12:58] <masak> \o/

[12:59] * masak ‚ô• Perl 6

[12:59] *** benabik joined
[13:00] <masak> of course, that .substr(2) isn't Y10K-compatible. my bad.

[13:00] <masak> r: sub palindrome { $^s eq $s.flip }; .say when &palindrome for (Date.new(2013, 1, 1) ... Date.new(2013, 12, 31)).map({ "{.day}-{.month}-{.year % 100}" })

[13:00] <camelia> rakudo afe36d: OUTPUT¬´31-1-13‚ê§31-3-13‚ê§31-5-13‚ê§31-7-13‚ê§31-8-13‚ê§¬ª

[13:02] <masak> r: say "{.day}-{.month}-{.year % 100}" if .month.chars == 1 && .day == 31 for Date.new(2013, 1, 1) ... Date.new(2013, 12, 31)

[13:02] <camelia> rakudo afe36d: OUTPUT¬´31-1-13‚ê§31-3-13‚ê§31-5-13‚ê§31-7-13‚ê§31-8-13‚ê§¬ª

[13:03] <masak> also, we won't have a palindrome date of that kind until 2021.

[13:03] <masak> so today is indeed very special.

[13:09] *** lichtkind joined
[13:12] *** berekuk left
[13:14] *** berekuk joined
[13:17] *** teslos joined
[13:32] <lizmat> woolfy came up with 4-11-14

[13:32] <colomon> woolfy++

[13:32] <colomon> just have to ignore the dashes

[13:33] <woolfy> I can come up with more: 5-11-15, 6-11-16, 7-11-17, 8-11-18, 9-11-19

[13:33] <masak> yes, ignoring the dashes produces more solutions, indeed.

[13:33] <woolfy> :-)

[13:33] <woolfy> I am happy to ignore dashes.

[13:33] <timotimo> masak++ #t3 reviews and t4 reviews in a little bit :D

[13:34] <woolfy> 02-11-20

[13:34] <masak> I've been spending parts of the day implementing t3 myself.

[13:34] <masak> to find out things about optimal solutions.

[13:34] <masak> woolfy: now you're adding zeros :)

[13:34] <lizmat> there were rulez?

[13:35] <lizmat> .oO( Miep Cijfer )

[13:35] <woolfy> To make palindromes look pretty, dashes are not necessary and zeroes can be.

[13:39] *** domidumont left
[13:42] *** zakharyas joined
[13:44] *** Rotwang1 is now known as Rotwang

[13:44] *** Rotwang left
[13:44] *** Rotwang joined
[13:44] <lizmat> r: my @one=1,2; say @one .. 3

[13:44] <camelia> rakudo afe36d: OUTPUT¬´[1, 2]..3‚ê§¬ª

[13:44] <lizmat> r: my @one=1,2; say ~(@one .. 3)

[13:44] <camelia> rakudo afe36d: OUTPUT¬´No such method 'succ' for invocant of type 'Array'‚ê§  in sub postfix:<++> at src/gen/CORE.setting:2217‚ê§  in sub postfix:<++> at src/gen/CORE.setting:2216‚ê§  in method reify at src/gen/CORE.setting:6649‚ê§  in method reify at src/gen/CORE.setting:6779‚ê§  in method reify ‚Ä¶

[13:45] <lizmat> r: my @one=1,2; .say for @one .. 3

[13:45] <camelia> rakudo afe36d: OUTPUT¬´No such method 'succ' for invocant of type 'Array'‚ê§  in sub postfix:<++> at src/gen/CORE.setting:2217‚ê§  in sub postfix:<++> at src/gen/CORE.setting:2216‚ê§  in method reify at src/gen/CORE.setting:6649‚ê§  in method reify at src/gen/CORE.setting:6779‚ê§  in method reify ‚Ä¶

[13:45] <lizmat> hmmmm...

[13:46] <lizmat> # Test that the operands are forced to scalar context

[13:46] <lizmat> ##   From pmichaud 2006-06-30:  These tests may be incorrect.

[13:46] <lizmat> ##     C<@one> in ##   item context returns an Array, not a number

[13:46] <lizmat> ##     -- use C< +@one > to get the number of elements.  So, we

[13:46] <lizmat> ##     need to either declare that there's a version of infix:<..>

[13:46] <lizmat> ##     that coerces its arguments to numeric context, or we can

[13:46] <lizmat> ##     remove these tests from the suite.

[13:46] <lizmat> # RT #58018

[13:46] <lizmat> # RT #76950

[13:46] <lizmat> Time to remove these tests ?

[13:47] <lizmat> r: my @a=1,2; say for 0 .. @a

[13:47] <camelia> rakudo afe36d: OUTPUT¬´‚ê§‚ê§‚ê§¬ª

[13:48] <lizmat> r: my @a=1,2; .say for 0 .. @a

[13:48] <camelia> rakudo afe36d: OUTPUT¬´0‚ê§1‚ê§2‚ê§¬ª

[13:49] *** fridim_ joined
[13:51] <masak> lizmat: +1 on removing.

[13:51] <lizmat> finding out that 0 .. @a works

[13:52] <lizmat> made me change perspective: if that works, @a .. 100 should also work

[13:54] <masak> I think infix:<..> favors the rhs in determining the type.

[13:54] <masak> I may misremember on that one, though.

[13:54] *** dhaivat joined
[13:54] *** PacoAir joined
[13:58] <Faxmachinen> r: sub foo(Int @a) { return [+] @a }; say foo([1,2,3]);

[13:58] <camelia> rakudo afe36d: OUTPUT¬´Nominal type check failed for parameter '@a'; expected Positional but got Array instead‚ê§  in sub foo at /tmp/7qXCh4ORUS:1‚ê§  in block  at /tmp/7qXCh4ORUS:1‚ê§‚ê§¬ª

[13:59] <lizmat> RT #58018

[13:59] <jnthn> Crappy error reporting, but it's correct to reject it..

[13:59] * lizmat was hoping for an RT bot to provide a link  :-)

[13:59] <jnthn> r: sub foo(Int @a) { return [+] @a }; say foo(Array[Int].new(1,2,3));

[13:59] <camelia> rakudo afe36d: OUTPUT¬´6‚ê§¬ª

[14:00] <Faxmachinen> Huh, forgot about the Class[Whatever] syntax

[14:00] <Faxmachinen> The error message is perhaps not ideal though

[14:01] <jnthn> Yes, agree

[14:05] *** dhaivat left
[14:08] *** dhaivat joined
[14:10] <dalek> rakudo/nom: 2d5abca | moritz++ | tools/build/NQP_REVISION:

[14:10] <dalek> rakudo/nom: bump NQP revision

[14:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2d5abcaedb

[14:17] <lizmat> running spectest with this while cycling&

[14:22] *** dhaivat left
[14:31] *** xinming left
[14:45] <FROGGS> perl6 -e 'use v5; $x = "" =~ /./; { use 6.0.0; say $x.WHAT }'

[14:45] <FROGGS> (List)

[14:45] <FROGGS> I love that way to debug things :o)

[14:45] <JimmyZ> :P

[14:48] *** cognominal__ joined
[14:49] *** dhaivat joined
[14:50] *** teslos left
[14:51] *** xinming joined
[14:52] *** cognominal left
[14:52] *** berekuk left
[14:57] *** berekuk joined
[14:58] <arnsholt> O(n!) > O(2^n), isn't it? (If you'll forgive the flagrant abuse of notation)

[14:59] *** raiph joined
[15:00] <masak> arnsholt: yeah.

[15:01] <masak> arnsholt: because the left side keeps multiplying bigger factors, as the right side keeps adding the same factor.

[15:01] <arnsholt> Right, right

[15:13] *** denis_boyun left
[15:15] *** ugexe_ is now known as ugexe

[15:25] <moritz> n! is more like N^N

[15:25] <moritz> erm, n^n

[15:26] <timotimo> n√¢n?

[15:26] *** zakharyas left
[15:26] *** TimToady_ is now known as TimToady

[15:27] <masak> cf https://en.wikipedia.org/wiki/Stirling%27s_approximation

[15:28] <moritz> tadzik: fwiw the '==> Fetching panda' step in bootstrapping panda seems awefully slow

[15:30] <timotimo> on jvm already? ;)

[15:33] *** colomon left
[15:33] <moritz> no

[15:34] <moritz> masak: I've used that a lot in statistical physics

[15:35] *** denisboyun joined
[15:36] <dalek> DBIish: 99608bb | moritz++ | t/10-mysql.t:

[15:36] <dalek> DBIish: [mysql] use the documented test crendetials

[15:36] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/99608bbbf5

[15:37] <timotimo> did arnsholt fix all the stuff needed for you to do your dbi stuff? and stuff?

[15:38] <moritz> timotimo: dbiish mostly seemed to work even with zavolaj broken-ish

[15:38] <moritz> timotimo: I'm now testing it more thoroughly though

[15:38] <timotimo> cool :)

[15:39] <moritz> postgres also works \o/

[15:39] *** ggoebel joined
[15:39] *** ggoebel2 left
[15:42] <dalek> DBIish: 51cfd5a | moritz++ | lib/DBDish/ (2 files):

[15:42] <dalek> DBIish: avoid deprecation warnings in bless

[15:42] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/51cfd5a962

[15:42] *** logie joined
[15:43] <timotimo> i wish i knew enough about plack and websockets and such so that i can build a tiny web framework on rakudo-jvm

[15:44] <timotimo> wait, not plack, PSGI

[15:45] <moritz> read up on it :-)

[15:49] *** jaldhar left
[15:49] *** EvanTeitelman joined
[15:52] *** hummeleBop left
[15:55] *** colomon joined
[15:56] <timotimo> hm, http::easy already has something for psgi, maybe it can be adpted to handle async, too?

[16:01] * lizmat is back and saw that the spectest is green after moritz++ upgrade of Parrot version

[16:03] <colomon> as of last night, we're back to NativeCall failing and all dependent modules failing with it.

[16:05] <timotimo> so it seems like there's a listen socket that speaks the psgi protocol and it accepts one connection per incoming request to the "outer" web server and speaks a specific protocol over that connection

[16:05] <lizmat> colomon: could this be Bag/Set related ???

[16:05] <timotimo> that means it should be rather simple to plop an async in there and have it work

[16:05] <colomon> lizmat: doubt that very greatly

[16:05] <timotimo> i hope :)

[16:06] <timotimo> sadly supernovus isn't idling around here

[16:06] <colomon> I'd be dumbfounded if NativeCall is using Bag or Set.

[16:06] <timotimo> intermittent failure brought to light by some environment change?

[16:09] <colomon> "

[16:09] <colomon> Cannot unbox argument to '' as a native str

[16:10] <colomon> t/02-simple-args.t

[16:11] <timotimo> i thought that was aded?

[16:11] <timotimo> bbl

[16:14] <colomon> wrong computer, bother

[16:14] *** ajr joined
[16:15] *** ajr is now known as Guest49411

[16:16] <colomon> no, that's still the error I get with an *almost* up-to-date Rakudo.  (Doesn't have moritz++'s NQP bump.)

[16:17] <colomon> next step is to try with that, I guess

[16:18] *** Faxmachinen left
[16:20] *** berekuk left
[16:23] *** berekuk joined
[16:25] *** berekuk left
[16:31] *** Rotwang left
[16:32] *** fridim_ left
[16:36] *** ssutch joined
[16:36] *** Guest49411 is now known as ajr_

[16:37] <timotimo> i read a commit today or yesterday about something unboxing to native str

[16:39] <FROGGS> I think there was a patch about Mu and Stringy

[16:40] <nwc10> colomon: are you able to use git bisect to work out which commit?

[16:41] <colomon> don't have time right now

[16:42] *** daniel-s_ left
[16:42] * colomon is cooking lunch to take to the library, then making a bassoon check stop, then heading out to pick up two months' worth of meat from a farm, and needs to get back before the football game starts.  :)

[16:42] <nwc10> mmm, meat.

[16:42] *** daniel-s_ joined
[16:47] *** pecastro_ is now known as pecastro

[16:47] *** daniel-s_ left
[16:48] *** daniel-s_ joined
[16:49] <masak> another round of horse jokes? :/

[16:49] <masak> :P

[16:49] <nwc10> I think that we've managed to reign them in

[16:50] <TimToady> it's the long tail

[16:50] <nwc10> we're no longer saddled with bad puns

[16:50] <masak> I see we're back on track

[16:50] <TimToady> still jockeying for top punster?

[16:51] <jnthn> I thought my position at the top was stable... :P

[16:51] <TimToady> you're just stalling

[16:51] *** logie left
[16:52] *** berekuk joined
[16:53] *** btyler joined
[17:09] *** denisboyun left
[17:11] *** daniel-s_ left
[17:12] <masak> whaddya take me for, a foal?

[17:12] *** daniel-s_ joined
[17:13] <geekosaur> calf-baked ideas?

[17:15] <masak> the cow puns were earlier today.

[17:15] * masak .oO( a mare cow pun will not do )

[17:18] *** garfieldnate joined
[17:19] *** pecastro left
[17:22] *** risou_awy_ is now known as risou

[17:28] *** Mouq joined
[17:29] *** Vlavv left
[17:32] *** pecastro joined
[17:42] *** btyler left
[17:43] *** Vlavv joined
[18:00] *** EvanTeitelman left
[18:00] *** EvanTeitelman joined
[18:03] *** Ulti joined
[18:04] *** Moukeddar joined
[18:05] <Moukeddar> evenin' #perl6 o/

[18:06] <GlitchMr> rn: say Rat(1, 7) # Seriously, number of elems in array?

[18:06] <camelia> niecza v24-90-gd827fa8: OUTPUT¬´Unhandled exception: Unable to resolve method postcircumfix:<( )> in type Rat‚ê§  at /tmp/UHq2VYtnDN line 1 (mainline @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4579 (ANON @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4580 (module-CORE @ 576‚Ä¶

[18:06] <camelia> ..rakudo 2d5abc: OUTPUT¬´2‚ê§¬ª

[18:06] <GlitchMr> Yep

[18:07] <GlitchMr> I'm not sure whatever this is intentional.

[18:09] *** btyler joined
[18:09] *** garfieldnate left
[18:12] *** dhaivat left
[18:17] <masak> Moukeddar: \o

[18:18] <masak> GlitchMr: the Rat type object should not be callable, IMHO.

[18:24] <GlitchMr> rn: say tc 'Ô¨Ånish'

[18:24] <camelia> rakudo 2d5abc, niecza v24-90-gd827fa8: OUTPUT¬´Finish‚ê§¬ª

[18:24] <GlitchMr> :-)

[18:26] *** risou is now known as risou_awy

[18:27] <GlitchMr> rn: say tc 'Ô¨Ånish Ô¨Çoats'

[18:27] <camelia> rakudo 2d5abc, niecza v24-90-gd827fa8: OUTPUT¬´Finish Ô¨Çoats‚ê§¬ª

[18:28] <GlitchMr> rn: my $scalar = 42; $scalar.delete(42); say $scalar;

[18:28] <camelia> niecza v24-90-gd827fa8: OUTPUT¬´Unhandled exception: Unable to resolve method delete in type Int‚ê§  at /tmp/4MHTr5P0QW line 1 (mainline @ 4) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4579 (ANON @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4580 (module-CORE @ 576) ‚ê§  at /home‚Ä¶

[18:28] <camelia> ..rakudo 2d5abc: OUTPUT¬´42‚ê§¬ª

[18:28] <GlitchMr> I've my doubt about hack at https://github.com/rakudo/rakudo/commit/789db4ff6ea69df7d9bf0c8b8a9b260035bf6896

[18:29] <GlitchMr> It hides real mistakes. $scalar.delete(42) just doesn't make sense.

[18:29] <GlitchMr> JavaScript already did that mistake (and doesn't do it anymore in strict mode).

[18:29] <FROGGS> this should fail unless it does Positional or Associative

[18:30] <FROGGS> (IMO)

[18:30] <GlitchMr> > delete 42

[18:30] <GlitchMr> true

[18:30] <GlitchMr> JavaScript

[18:32] *** btyler left
[18:32] <GlitchMr> I'm seriously wondering how adding such ambiguous methods to Any wasn't reverted.

[18:33] <jnthn> GlitchMr: It has been discussed here.

[18:33] <jnthn> GlitchMr: It's to make %h<a><b>:delete work out, but I feel we should do it a different way

[18:34] <GlitchMr> It feels too much of the hax for me.

[18:40] <GlitchMr> Hax that causes different hax.

[18:40] <GlitchMr> https://github.com/rakudo/rakudo/commit/90cfaa0c64a2959bcc70f4f3b4585bec3039e7cf

[18:40] <GlitchMr> I mean, implementing a method that doesn't exist?

[18:40] <GlitchMr> r: Bag.new.delete('cat')

[18:40] <camelia> rakudo 2d5abc: OUTPUT¬´Cannot call 'delete' on an immutable 'Bag'‚ê§  in method delete at src/gen/CORE.setting:14740‚ê§  in block  at /tmp/tQaRt7h8Yl:1‚ê§‚ê§¬ª

[18:40] <GlitchMr> r: Bag.new.delete

[18:40] <camelia> rakudo 2d5abc: OUTPUT¬´Not enough positional parameters passed; got 1 but expected 2‚ê§  in method delete at src/gen/CORE.setting:14739‚ê§  in block  at /tmp/qdtWU9dB9N:1‚ê§‚ê§¬ª

[18:41] <GlitchMr> oh, I see, it's fixed.

[18:41] <jnthn> GlitchMr: That's later updated to throw a different exception

[18:41] <jnthn> GlitchMr: But yes, I agree with you

[18:41] *** Moukeddar left
[18:43] <GlitchMr> r: 42<42>:delete

[18:43] <camelia> rakudo 2d5abc:  ( no output )

[18:43] <GlitchMr> This should be an error.

[18:43] <GlitchMr> Int is not Positional.

[18:44] <GlitchMr> n: 42<42>:delete

[18:44] <camelia> niecza v24-90-gd827fa8: OUTPUT¬´Unhandled exception: Cannot use hash access on an object of type Int‚ê§  at <unknown> line 0 (ExitRunloop @ 0) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 349 (Any.delete_key @ 9) ‚ê§  at <unknown> line 0 (ExitRunloop @ 0) ‚ê§  at /tmp/8_SWUs9dLN line 1 (mai‚Ä¶

[18:44] <jnthn> At the very least, the delete method in Any should only work on :U

[18:44] <jnthn> (so it only has any effect in an auto-viv scenario, like the at_key in Any)

[18:44] *** btyler joined
[18:45] <jnthn> afk for a bit

[18:45] <GlitchMr> Autovivication is a good argument, but 42 is defined.

[18:46] <GlitchMr> Magically changing it into dictionary sounds wrong.

[18:46] <GlitchMr> r: my $number = 42; $number<cat> = 82; say $number

[18:46] <camelia> rakudo 2d5abc: OUTPUT¬´postcircumfix:<{ }> not defined for type Int‚ê§  in method <anon> at src/gen/CORE.setting:11565‚ê§  in any  at src/gen/Metamodel.nqp:2671‚ê§  in any find_method_fallback at src/gen/Metamodel.nqp:2659‚ê§  in any find_method at src/gen/Metamodel.nqp:946‚ê§  in block  at /tmp/n‚Ä¶

[18:46] <GlitchMr> r: my %hash; %hash{42}{84} = 82; say %hash

[18:46] <camelia> rakudo 2d5abc: OUTPUT¬´("42" => {"84" => 82}).hash‚ê§¬ª

[18:51] <GlitchMr> (but then well, in Perl 5, you can actually do 'delete 42->{42}', so perhaps that's a Perl 5 compatibility code)

[18:52] <GlitchMr> Even in strict mode, somehow.

[18:52] <FROGGS> I dont think we have this kind of compatibility

[18:53] <GlitchMr> But I think it's actually Perl 5 bug. 42->{42} should make an error in strict mode, but doesn't.

[18:53] <FROGGS> that would be like being backcompat to Perl 5's Switch.pm

[19:01] *** arlinius left
[19:04] *** rindolf left
[19:04] *** dhaivat joined
[19:05] <tadzik> moritz: yes, copying is awfully slow on rakudo

[19:07] *** raiph left
[19:11] *** cognominal__ left
[19:12] *** cognominal joined
[19:13] *** dhaivat left
[19:13] *** dhaivat joined
[19:25] *** garfieldnate joined
[19:26] *** cognominal left
[19:26] *** kaare_ left
[19:26] *** cognominal joined
[19:27] *** kaare_ joined
[19:27] *** woolfy left
[19:31] *** woolfy joined
[19:32] *** arlinius joined
[19:35] <GlitchMr> https://github.com/sorear/niecza/commits/master

[19:35] <GlitchMr> Just when I expected a change in Niecza, it was reverted.

[19:35] <GlitchMr> Great.

[19:36] *** Guest1337 joined
[19:37] <GlitchMr> std: / 2 ** 03 /

[19:37] <camelia> std 27326bc: OUTPUT¬´ok 00:00 42m‚ê§¬ª

[19:37] *** EvanTeitelman left
[19:37] <GlitchMr> std: / 2 ** 09 /

[19:37] <camelia> std 27326bc: OUTPUT¬´ok 00:00 42m‚ê§¬ª

[19:37] <GlitchMr> No warnings?

[19:37] <GlitchMr> std: / 2 ** 09 .. 010 /

[19:37] <camelia> std 27326bc: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Spaces not allowed in bare range at /tmp/T9NASSg74X line 1:‚ê§------> [32m/ 2 ** 09 ..[33m‚èè[31m 010 /[0m‚ê§Parse failed‚ê§FAILED 00:00 42m‚ê§¬ª

[19:37] <TimToady> no, it calls <decint>, not <integer>

[19:37] <GlitchMr> oh, ok

[19:38] <TimToady> last week it was just \d+ after all

[19:38] <TimToady> but if I call <integer>, it'd allow 2 ** :16<43> and such

[19:38] <TimToady> and I don't think we want that

[19:39] <TimToady> I don't think the 010 failure mode is likely to occur with any great frequency there

[19:39] <TimToady> people are used to using decimal numbers in ranges

[19:40] *** EvanTeitelman joined
[19:40] *** kaare_ left
[19:41] *** cognominal left
[19:41] *** cognominal joined
[19:42] *** daniel-s_ left
[19:42] <GlitchMr> :16<43>

[19:42] <GlitchMr> I don't see issue with that.

[19:42] *** daniel-s_ joined
[19:42] <GlitchMr> What's wrong with repeating something 0x43 times?

[19:43] <masak> I think I agree it should be <decint> there.

[19:43] <TimToady> there's no point in adding functionality that people will (almost) never use

[19:43] <TimToady> all it does is make the parsing of regexen more ambiguous

[19:43] <TimToady> since : already means something

[19:43] <GlitchMr> Oh, right.

[19:44] <masak> oh, that's an excellent point.

[19:44] <masak> *especially* since **: means something.

[19:44] <GlitchMr> Oh, I understand. This commit is about 1_000.

[19:44] <GlitchMr> It took me a while to understand that.

[19:45] <TimToady> it might seem like a good generalization to parse with a more general rule, but consider the degenerate case of allowing <EXPR> after **

[19:46] <GlitchMr> / 'something' ** (2 + 2) /

[19:46] <GlitchMr> That would be too crazy.

[19:46] <TimToady> nevertheless, that's exactly why we have the ** { 2+2 } escape hatch

[19:46] <GlitchMr> std: / 'something' ** $var /

[19:46] <camelia> std 27326bc: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Variable $var is not predeclared at /tmp/c8lOVpDRwh line 1:‚ê§------> [32m/ 'something' ** [33m‚èè[31m$var /[0m‚ê§Potential difficulties:‚ê§  Unsupported use of atom ** $var  as separator; nowadays please use atom +% $var  at /tmp/c8lOVpDRw‚Ä¶

[19:46] <GlitchMr> std: my $var = 42; / 'something' ** $var /

[19:46] <camelia> std 27326bc: OUTPUT¬´Potential difficulties:‚ê§  Unsupported use of atom ** $var  as separator; nowadays please use atom +% $var  at /tmp/7lkySjv50T line 1:‚ê§------> [32mmy $var = 42; / 'something' ** $var [33m‚èè[31m/[0m‚ê§ok 00:00 44m‚ê§¬ª

[19:46] <TimToady> std: / 'something' ** { 2 + 2 } /

[19:46] <camelia> std 27326bc: OUTPUT¬´ok 00:00 43m‚ê§¬ª

[19:47] <TimToady> std: / 'something' ** { $_ } /

[19:47] <camelia> std 27326bc: OUTPUT¬´ok 00:00 43m‚ê§¬ª

[19:47] <TimToady> std assumes the bare form of $var is trying to specify the delimiter in the old form, not a repeat count

[19:47] *** Guest1337 left
[19:48] <TimToady> std: my $var = 42; / 'something' ** {$var} /;  # is fine

[19:48] <camelia> std 27326bc: OUTPUT¬´ok 00:00 44m‚ê§¬ª

[19:48] <TimToady> someday we might relax that

[19:50] <TimToady> when all the people who remember the ** $sep form die off :)

[19:50] *** cognominal left
[19:51] *** cognominal joined
[19:53] *** pecastro left
[19:58] *** abnorman joined
[20:04] <ajr_> which program in the latest rakudo star (2013.08) is the perl 6 executable? The paths seem to have changed.

[20:04] *** colomon left
[20:04] <timotimo> should be bin/perl6 or something like that

[20:05] <timotimo> may depend on how you configured it before compiling

[20:05] <ajr_> I just untarred it

[20:06] <timotimo> ah. yes, i think you have to compile it, don't you?

[20:06] *** agre joined
[20:06] <ajr_> Not *

[20:06] *** colomon joined
[20:07] <timotimo> find . -name 'perl6'

[20:07] *** Faxmachinen joined
[20:07] <moritz> ajr_: yes, you have to compile first

[20:07] <moritz> R* is still a source distribution

[20:07] <moritz> (except the occasional .msi for windows)

[20:08] <ajr_> That's new, isn't it?

[20:08] <agre> Hi all. How to correctly run PIR code produced by perl6 --target=PIR on parrot?

[20:11] <agre> Just doing "perl6 --target=pir -e 'say 1' | parrot -" does not work.

[20:11] <moritz> ajr_: it's not new; it has never been different

[20:12] <moritz> ajr_: you can't. The only thing that works is precompiling modules with --target=pir, and then use that module with 'use ModuleName' in Perl 6 code

[20:12] <moritz> erm sorry, that last line was meant for agre 

[20:12] <agre> Ok.

[20:13] <ajr_> Duh! The heat of summer must have done something to my brain.

[20:14] <colomon> for people curious about the smoke test, updating to the Rakudo with moritz's NQP version bump fixed the issue with NativeCall.

[20:15] <moritz> ... which was the reason for the bump :-)

[20:20] <jnthn> ajr_: I guess it's possible you downloaded the Windows installer, which would give you a binary...not sure if that's available yet for 2013.08...

[20:22] <agre> Maybe one can write a wrapper in PIR to run PIR generated by perl6?

[20:22] <ajr_> No, just for some reason I forgot to configure & make

[20:22] *** raiph joined
[20:22] * sorear wanders in

[20:22] <yoleaux> 29 Aug 2013 01:05Z <diakopter> sorear: find this spot in the backlog.. jvm bytecode parsing error from rakudo

[20:22] <moritz> agre: maybe. "Just" needs doing.

[20:22] <jnthn> o/ sorear 

[20:23] <agre> :)

[20:24] <sorear> o/ jnthn 

[20:24] <masak> sorear! \o/

[20:25] <masak> moritz: I've now started a script to pit your t3 solution against veky's, for 1_000 randomized inputs, to see if either one has an edge on the other.

[20:25] <masak> this is perfectly the first time in human history that a Perl 5 one-liner instruments both a Perl 6 script and a Python 3 script at the same time.

[20:25] <masak> ooh, I see differences.

[20:25] <masak> yeah, sorry. moritz lost out to veky. :(

[20:26] <masak> (and thereby the unique claim to the elegance criterion.) :/

[20:29] *** benabik left
[20:30] *** benabik joined
[20:36] *** ajr_ left
[20:37] *** ajr joined
[20:38] *** ajr is now known as Guest5659

[20:39] *** BenGoldberg joined
[20:39] *** Guest5659 is now known as ajr_

[20:40] <dalek> roast: 763e849 | (David Warring)++ | S05-capture/caps.t:

[20:40] <dalek> roast: a couple more tests + raukdo.jvm fudging

[20:40] <dalek> roast: review: https://github.com/perl6/roast/commit/763e849f81

[20:43] <BenGoldberg> Hmm...

[20:43] <BenGoldberg> r: (^Inf but role { method BUILD { say 'bar' } })[0]

[20:43] <camelia> rakudo 2d5abc: OUTPUT¬´bar‚ê§Too many positional parameters passed; got 5 but expected 1‚ê§  in method BUILD at /tmp/nLFEFA_MBM:1‚ê§  in method reify at src/gen/CORE.setting:6655‚ê§  in method reify at src/gen/CORE.setting:6779‚ê§  in method gimme at src/gen/CORE.setting:7212‚ê§  in method exists at‚Ä¶

[20:43] <BenGoldberg> r: (^Inf but role { method BUILD(@) { say 'bar' } })[0]

[20:43] <camelia> rakudo 2d5abc: OUTPUT¬´Not enough positional parameters passed; got 1 but expected 2‚ê§  in method BUILD at /tmp/TAsTrtgM3a:1‚ê§  in method BUILD_LEAST_DERIVED at src/gen/CORE.setting:912‚ê§  in sub infix:<but> at src/gen/CORE.setting:15391‚ê§  in sub infix:<but> at src/gen/CORE.setting:15386‚ê§  ‚Ä¶

[20:43] *** btyler left
[20:44] <BenGoldberg> How many args does BUILD take?

[20:46] *** btyler joined
[20:47] <masak> r: sub postfix:<!>($N) { [*] 2..$N }; say 10!

[20:47] <camelia> rakudo 2d5abc: OUTPUT¬´3628800‚ê§¬ª

[20:47] <masak> that's... not an awfully large space.

[20:48] <masak> r: sub postfix:<!>($N) { [*] 2..$N }; sub thousands($n) { $n.flip.comb(/..?.?/).join("_").flip }; say thousands 10!

[20:48] <camelia> rakudo 2d5abc: OUTPUT¬´3_628_800‚ê§¬ª

[20:48] <lue> r: sub thousands($n) { $n.flip.comb(/..?.?/).join("_").flip }; say thousands([*] 2..16)

[20:48] <camelia> rakudo 2d5abc: OUTPUT¬´20_922_789_888_000‚ê§¬ª

[20:49] <lue> hexadecimal comes with more than enough :)

[20:49] <masak> well, I'm talking about the t3 space.

[20:50] <lue> I know. Who's to say those programs can't be modified to handle A, B, C, D, E, and F?

[20:50] <masak> the t3 task description.

[20:51] <lue> I was merely suggesting hex if you *really* needed more than 3.6mn configurations to test.

[20:51] <BenGoldberg> What's the t3 task?

[20:53] <masak> BenGoldberg: https://github.com/masak/p6cc2012#readme

[20:54] <masak> http://strangelyconsistent.org/blog/the-2012-perl-6-coding-contest

[20:58] *** ajr_ left
[21:04] *** itz_ joined
[21:05] *** itz left
[21:11] <masak> 10! is still a pretty challenging space :)

[21:11] <masak> I'm *hoping* it's within the bounds of what my RAM can take.

[21:13] <jnthn> .oO( masak sheepishly looks at this ram ewesage )

[21:17] <masak> it stayed within bounds.

[21:17] <masak> using single transpositions starting from the identity permutation, it takes 45 generations to get all possible permutations.

[21:18] <masak> but I realize it's not single transpositions I'm after. it's all non-adjacent combinations of them.

[21:18] <masak> should be possible to code. tomorrow. :)

[21:19] <timotimo> are you also checking all the results are actually correct?

[21:23] *** colomon left
[21:24] <masak> I'm not sure I understand the question.

[21:24] <masak> there's a graph of all possible permutations. it's 3_628_800 nodes large.

[21:25] *** berekuk left
[21:25] <timotimo> maybe one of the permutation exposes a bug in the implementations?

[21:25] <timotimo> and since "a different solution" is interpretable sa "one implementation does it more elegantly", do you trace all lines to see if they end up in the actually correct spot on the other side?

[21:26] <masak> well, in some sense, this graph encodes "the most elegant solution" for all possible permutations.

[21:26] *** berekuk joined
[21:26] *** btyler left
[21:26] <masak> which is why I found it interesting to generate it, as it's possible to compare it against veky's solution, say.

[21:26] <timotimo> ah, ok

[21:27] <timotimo> i thought the python 3 solution looked like just a wall of text :(

[21:27] <jnthn> timotimo: I thought that but thought it may be just 'cus I ain't used to looking at Python code

[21:29] <masak> no, it's a wall of text.

[21:29] <FROGGS> *lol*

[21:29] <FROGGS> *g*

[21:29] <masak> FROGGS: NO LOL

[21:29] *** btyler joined
[21:32] <timotimo> add "NO NO LOL" to the topic?

[21:33] * masak .oO( -O LOL )

[21:37] *** colomon joined
[21:37] <FROGGS> "NO NO" describes #perl6 better

[21:38] *** raiph left
[21:42] <masak> we're so permissive, we forbid restrictions!

[21:42] *** agre_ joined
[21:43] <diakopter> give me liberty or give me permission

[21:45] *** agre left
[21:46] <masak> "Give me liberty, *for*give me permission" -- Grace Hopper

[21:46] <diakopter> orly

[21:47] <masak> not really.

[21:47] <masak> but I think she originated the "f > p" meme.

[21:51] <BenGoldberg> preflex: ordinal 2

[21:51] <preflex>  2rd

[21:59] <masak> how do you pronounce "2rd"? :)

[22:00] <TimToady> surd, as in ab

[22:01] <timotimo> twird

[22:04] *** berekuk left
[22:07] <lue> where's this py3 script, masak?

[22:09] <masak> lue: https://gist.github.com/masak/1e9d78d8deaa789880e3

[22:11] <lue> .oO(Python's forced indentation ironically didn't translate to other similar concepts, like blank lines, or spaces around operators.)

[22:12] <jnthn> nqp: nqp::substr("abc", 0, -5)

[22:12] <camelia> nqp:  ( no output )

[22:13] <jnthn> nqp: say(nqp::substr("abc", 0, -5))

[22:13] <camelia> nqp: OUTPUT¬´‚ê§¬ª

[22:14] <diakopter> nqp: say(substr("hhhhhh", 5, -5))

[22:14] <camelia> nqp: OUTPUT¬´Could not find sub &substr‚ê§current instr.: '' pc 48 ((file unknown):39) (/tmp/QcaNyAcgRa:1)‚ê§¬ª

[22:14] <diakopter> nqp: say(nqp::substr("hhhhhh", 5, -5))

[22:14] <camelia> nqp: OUTPUT¬´‚ê§¬ª

[22:14] <diakopter> meh

[22:14] <diakopter> nqp: say(nqp::substr("hhhhhhhhhhhh", 5, -5))

[22:14] <camelia> nqp: OUTPUT¬´‚ê§¬ª

[22:15] <diakopter> nqp: say(nqp::substr("hhhhhhhhhhhh", 5, -5).WHAT)

[22:15] <camelia> nqp: OUTPUT¬´Can only use get_what on a SixModelObject‚ê§current instr.: '' pc 48 ((file unknown):144969501) (/tmp/Brj7f_a6vl:1)‚ê§¬ª

[22:15] <diakopter> ha

[22:15] <diakopter> jnthn: ^

[22:15] <TimToady> wrong nqp?

[22:16] <diakopter> nqp-jvm: say(nqp::substr("hhhhhhhhhhhh", 5, -5).WHAT)

[22:16] <camelia> nqp-jvm: OUTPUT¬´java.lang.StringIndexOutOfBoundsException: String index out of range: -5‚ê§       at java.lang.String.substring(String.java:1911)‚ê§        at org.perl6.nqp.runtime.Ops.substr3(Ops.java:2096)‚ê§    at 1C1C561F7D2C1605E7AAF79F7E1C1D1159D81559.qb_10(<generated>)‚ê§ at

[22:16] <camelia> ..org.perl6.nqp.runtime.Ops.in‚Ä¶

[22:17] <diakopter> no clue what parrot's (or nqp's) trying to do there

[22:20] *** berekuk joined
[22:22] *** berekuk left
[22:24] *** berekuk joined
[22:26] *** Faxmachinen left
[22:33] *** berekuk left
[22:33] *** pecastro joined
[22:37] *** dmol left
[22:38] *** dhaivat left
[22:43] *** xinming_ joined
[22:44] *** berekuk joined
[22:45] *** xinming left
[22:48] *** dhaivat joined
[22:50] *** Rotwang joined
[22:51] *** berekuk left
[22:57] *** xenoterracide_ joined
[23:00] *** dmol joined
[23:01] <masak> 'night, #perl6

[23:01] <TimToady> o/

[23:01] <sorear> o/

[23:02] *** xenoterracide_ left
[23:03] *** agre_ left
[23:11] *** dhaivat left
[23:13] *** dhaivat joined
[23:15] *** dmol left
[23:18] <dalek> rakudo/nom: 5d09997 | (Elizabeth Mattijsen)++ | src/core/Range.pm:

[23:18] <dalek> rakudo/nom: Ranges starting with @a..  and (1,2,3).. work (right hand side already worked)

[23:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5d09997669

[23:18] *** berekuk joined
[23:20] *** dhaivat left
[23:20] *** dhaivat joined
[23:22] *** berekuk left
[23:29] *** dhaivat left
[23:30] *** dhaivat joined
[23:31] *** benabik left
[23:32] *** raiph joined
[23:40] <dalek> rakudo/nom: 1fca644 | (Elizabeth Mattijsen)++ | src/core/Range.pm:

[23:40] <dalek> rakudo/nom: Also allow Match objects as endpoints of a Range

[23:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1fca6440b9

[23:43] *** sftp_ left
[23:44] *** btyler left
[23:46] <dalek> roast: 6bae94e | (Elizabeth Mattijsen)++ | S03-operators/range.t:

[23:46] <dalek> roast: Test arrays/lists/matches as endpoints for ranges

[23:46] <dalek> roast: review: https://github.com/perl6/roast/commit/6bae94ee4d

[23:54] *** benabik joined
[23:55] *** sftp joined
[23:59] *** fridim_ joined
