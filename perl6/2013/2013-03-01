[00:16] *** benabik left
[00:17] *** census left
[00:26] <jnthn> hhm, dalek didn't report the commit I just did... :(

[00:27] <jnthn> Anyway, NQP running on the JVM now passes all the tests that the cross-compiler passed.

[00:27] <lue> \o/ jnthn++

[00:28] <japhb_> w00t!

[00:28] *** benabik joined
[00:28] <japhb_> Awesome, jnthn.

[00:28] <japhb_> If I was there, I'd buy you a beer just for that milestone.  :-)

[00:30] * lue recalls some comment about socket reading having a limit of 0xFF chars or somesuch a long while ago

[00:33] <dalek> nqp-jvm-prep: f7fc166 | jnthn++ | docs/ROADMAP:

[00:33] <dalek> nqp-jvm-prep: A ROADMAP update.

[00:33] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/f7fc16635e

[00:34] <jnthn> Enough time at the keyboard for one day. :) 

[00:34] <jnthn> 'night o/

[00:35] <japhb_> o/

[00:36] *** census joined
[00:37] <japhb_> phenny, tell jnthn You might want to tag this nqp-jvm milestone, because I would think "can compile itself, but doesn't have the other stuff needed by rakudo" would be an interesting marker for people wishing to port to other platforms.

[00:37] <phenny> japhb_: I'll pass that on when jnthn is around.

[00:41] *** lustlife joined
[00:41] *** benabik left
[00:49] *** spider-mario left
[00:49] *** Em_ joined
[00:51] *** census left
[00:52] <Em_> r: say( "Hi I'm Emily i"m 8 years old");

[00:52] <p6eval> rakudo 357e60: OUTPUT«===SORRY!===␤Unable to parse expression in argument list; couldn't find final ')'␤at /tmp/78SpRtwFAJ:1␤------> say( "Hi I'm Emily i"⏏m 8 years old");␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infi…

[00:53] <Em_> r: say( "Hi I'm Emily i'm 8 years old");

[00:53] <p6eval> rakudo 357e60: OUTPUT«Hi I'm Emily i'm 8 years old␤»

[00:54] <raiph> r: say 5 + 10

[00:54] <p6eval> rakudo 357e60: OUTPUT«15␤»

[00:55] <raiph> (showed Emily code.org and here we are... :) 

[00:58] <japhb_> raiph++

[00:58] <japhb_> Welcome, Em_

[00:58] <Em_> r: Hey 

[00:58] <p6eval> rakudo 357e60: OUTPUT«===SORRY!===␤Undeclared name:␤    Hey used at line 1␤␤»

[01:00] <Em_> Hello 

[01:00] <japhb_> Hello there.  :-)

[01:03] <Em_> I'm confuesd and raiph is siting next to me hehe

[01:03] <japhb_> Confusion is completely normally when you're getting started.

[01:04] <japhb_> Actually, it's pretty normal no matter how long you've been coding.  :-)

[01:04] <Em_> LOL

[01:04] <Em_> vut you are SOOO right

[01:05] <geekosaur> try switching between perl* and haskell, if you want confused :)

[01:05] <Em_> s/v/b/

[01:05] <japhb_> Woah, already using s///

[01:06] <Em_> well raiph is sitting next to me waching and telling 

[01:06] * japhb_ understands

[01:07] *** anuby joined
[01:08] * Em_ ya

[01:10] <Em_> raiph i now you dont have a cule what is going on butttt Me but now i know

[01:10] <Em_> hehe

[01:10] * Em_ 

[01:11] <sorear> I started at about 8 too but I didn't have IRC back then :D

[01:11] <japhb_> Oooh, you just managed to find a bug in my chat client.

[01:12] * sorear 

[01:12] <japhb_> sorear, yeah, 7-9 seems about ideal

[01:13] <geekosaur> heh, also found a bug in my unansifier script

[01:13] <Em_> what?????

[01:14] <Em_> no clue

[01:14] <japhb_> Em_, no worries, we're just amused that a few minutes after coming to visit, you already (accidentally) found bugs in our code.  :-)

[01:16] <Em_> ohhh thank you

[01:16] <lue> *That's* what those error message on my screen are :P (I though someone pasted them)

[01:16] <Em_> i have to go be right back have to have disert

[01:17] <japhb_> One surely cannot miss dessert.  ;-)

[01:17] <Em_> ya

[01:17] <geekosaur> the most amusing thing is I'm pretty sure japhb_ and I did ours independently, but apparently have the same or very similar bugs :)

[01:17] <swarley> Although currently not possible, a future implementation of the PIR language will allow you to use multiple heredocs within a single statement or directive:

[01:17] <japhb_> geekosaur, I can't even test the fix from within my chat client, because it won't let me do that.  :-)

[01:18] <swarley> ;) And with nesting of heredocs, the lexer is complete

[01:18] <japhb_> Multiple heredocs in *PIR*?

[01:19] <diakopter> swarley: hi!

[01:19] <geekosaur> huuuh. this may be an xchat bug

[01:19] <diakopter> swarley: you can pretty much ignore that pdd

[01:19] <lue> something like Perl6's    q:to/END1/, q:to/END2/; Hi END1 There END2   (forget if that comma should be a semicolon)

[01:20] <swarley> https://gist.github.com/swarley/5061726

[01:20] <raiph> japhb: not sure jnthn has gotten to the point you're thinking. he's got nqp to cross-compile but broken in several ways (failing several tests). now he's gotten nqp to self-host to the same point (still broken in the same ways). still awesome of course, and might be what you already knew

[01:21] <swarley> diakopter; why ignore it? :(

[01:21] <diakopter> swarley: wat.

[01:21] <swarley> <diakopter> swarley: you can pretty much ignore that pdd

[01:21] <Em_> Hi I'm Back it was pudding

[01:21] <diakopter> 'cuz on #parrot recently they bandied about the notion of removing PIR

[01:22] <japhb_> raiph, he says in the ROADMAP that the remaining failing tests are probably for features of NQP that aren't used by NQP itself, but rather by Rakudo.

[01:22] *** hypolin joined
[01:22] <swarley> well, good thing I saved the documentation offline. Because I'm a fan of the intermediate representation, which is why I'm making it available for use outside of parrot

[01:22] <japhb_> Em_, :-D

[01:23] <Em_> hehe

[01:23] <Em_> :-D

[01:24] *** fgomez left
[01:24] <Em_> Hi all of you i'm Emily

[01:26] <japhb_> Oooh, target audience for Camelia!

[01:26] <TimToady> speaking of finding bugs...

[01:26] <raiph> japhb: ah. thanks. then i think u're right that this is worth bringing to folk's attention.

[01:27] * lue suddenly wonders what task infix:<ö> is worthy of, just so he can use the non-dwimmy hyper form :)

[01:28] <japhb_> The Röck Döts operator?

[01:28] <Em_> raiph: Do you want some dessert???????? :-D

[01:28] <japhb_> It makes your code ROCK, of course.

[01:28] *** woosley joined
[01:29] *** Em_ left
[01:39] <lue> icuc, me testing user-selected brackets from the Ps/Pe/Pi/Pf categories: https://gist.github.com/lue/5061801

[01:40] <skids> r: my @a = 1,2,3,4,5; say @a[* «-« (1,2)]; say @a[* X- (1,2)];

[01:40] <p6eval> rakudo 357e60: OUTPUT«5 4␤Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \v: Mu *%_)␤␤  in method Numeric at src/gen/CORE.setting:865␤  in sub infix:<-> at src/gen/CORE.setting:2842␤  in block  at src/gen/CORE.setting:12899␤  in sub coro at src/gen/CORE.setting:5740␤  in …

[01:48] *** fgomez joined
[01:53] *** gcole left
[02:00] *** rking joined
[02:27] *** benabik joined
[02:31] *** rindolf joined
[02:41] *** japhb_ left
[02:59] *** gcole joined
[03:03] *** gcole left
[03:21] *** orafu joined
[03:32] * [Coke] runs a rakudo program through --profile and sees that 50% of the program is in sink.

[03:33] *** ikrs joined
[03:41] *** uvtc joined
[03:48] <uvtc> What is the reason for being able to do this: `my @a = <foo bar baz>; my $b = @a;` ? I can index into both @a and $b the same (`@a[1], $b[1]`)...

[03:48] <uvtc> Both @a.WHAT and $b.WHAT --> Array()

[03:49] <colomon> $b can be anything, and an Array is anything.

[03:49] <uvtc> One difference I see now, is:

[03:49] <uvtc> r: my @a = <foo bar baz>; my $b = @a; say @a.perl; say $b.perl

[03:49] <p6eval> rakudo 357e60: OUTPUT«Array.new("foo", "bar", "baz")␤["foo", "bar", "baz"]␤»

[03:49] <uvtc> So, $b is non-flattening...

[03:50] <geekosaur> you could think of it as $b is getting a reference to the array, while @a is getting the array itself

[03:50] <geekosaur> (it's more complex than that but supposed to look roughly like that)

[03:50] <TimToady> I prefer to think of it as a singular/plural distinction

[03:51] <TimToady> is a class one thing or a group of things?

[03:51] <geekosaur> if I look at that output with perl5 eyes I see the first as a list and the second as an arrayref

[03:51] <TimToady> is a car one object or a group of objects?

[03:52] <uvtc> r: my @a = <foo bar baz>; my $b = @a; my @d = (1, $b, 2); say @d.perl;  # I see $b doesn't flatten.

[03:52] <p6eval> rakudo 357e60: OUTPUT«Array.new(1, ["foo", "bar", "baz"], 2)␤»

[03:53] <uvtc> Ok.

[03:54] <uvtc> TimToady: Am I correct in saying that the names which go into lexpads are refererences (though, they're generally auto-deref'd for you everywhere, so you tend not to notice)?

[03:54] <uvtc> $x, @a, %h <--- names like those

[03:55] <uvtc> (moritz explained to me yesterday that lexpads are something like runtime scratchpads where lexicals are kept track of.)

[03:55] <TimToady> well, they're names associated with references by the symbol table

[03:56] <uvtc> Oh. Interesting. So the names are mapped to references, and the references may refer to containers, or maybe directly to objects (such as an Int). Is that correct?

[03:56] <skids> If you call both the link from name -> container and from container -> value "references" then it gets confusing.

[03:57] * [Coke] wonders how to get an infinite list of 10s.

[03:58] <uvtc> skids: Ok. TimToady just used the word "associated": "The name is associated with the reference". So, that language sounds fine. :)

[03:59] <colomon> r: say 10, 10, 10 ... * 

[03:59] <p6eval> rakudo 357e60: OUTPUT«10 10 10 10 ...␤»

[03:59] <colomon> [Coke]: ^

[03:59] <[Coke]> heh. I just got there, danke. (only need 2 tens.)

[03:59] <uvtc> Is "symbol table" == lexpad?

[04:00] <colomon> r: say 10, +* ... *

[04:00] <p6eval> rakudo 357e60: OUTPUT«10 10 10 10 ...␤»

[04:00] <skids> uvtc: well since we manipulate such associations with := "bind" works too.

[04:00] <sorear> uvtc: yes and no

[04:00] <geekosaur> roughly. "symbol table" ususally means something global and woth some permanence, a lexpad is like a scratchpad symbol table that exists only in the current lexical scope

[04:01] <sorear> also, lexpads are created anew each time you invoke a sub

[04:01] <[Coke]> colomon: I was hoping for something like 10,x5; ah well.

[04:01] <sorear> "lexpad" is a technical Perl 6 term

[04:02] <colomon> r: say 10 xx *

[04:02] <sorear> "symbol table" is not a specific technical term, it's a general term of compiler art

[04:02] <p6eval> rakudo 357e60: OUTPUT«10 10 10 10 ...␤»

[04:02] <[Coke]> ah, xx. Danke.

[04:02] <TimToady> symbols are just recipes, that, taken together with some structure, allow you to find the first pointer :)

[04:02] <[Coke]> it's been 10 years, hopefully I'll starting picking this language up soon. :|

[04:02] <uvtc> skids: Ok. So the terminology then, is: names are made of identifiers. Names are associated with references. References are bound to either containers or directly to other objects.

[04:03] <colomon> [Coke]++

[04:03] <skids> r: say 10 xx Inf # should this maybe work?

[04:03] <p6eval> rakudo 357e60: OUTPUT«Cannot coerce Inf to an Int␤  in method Numeric at src/gen/CORE.setting:10515␤  in sub infix:<==> at src/gen/CORE.setting:2886␤  in sub infix:<xx> at src/gen/CORE.setting:6180␤  in block  at /tmp/o5IkRw8Qps:1␤␤»

[04:03] <TimToady> in the case of lexicals, the structure in question is the current activation record or frame, that contains the actual data for this invocation

[04:03] <[Coke]> r: say Inf.Int

[04:03] <p6eval> rakudo 357e60: OUTPUT«Cannot coerce Inf to an Int␤  in method gist at src/gen/CORE.setting:10517␤  in sub say at src/gen/CORE.setting:7602␤  in block  at /tmp/3nBpfBabJc:1␤␤»

[04:03] <uvtc> TimToady: uh, oh. You just added another word that my brain needs to find another place for re. Perl 6: symbols.

[04:04] <TimToady> well, here I just mean it semiotically, not in any CS sense

[04:04] <TimToady> so, just a 'name'

[04:04] <uvtc> Phew. :)

[04:04] <uvtc> (In, for example, Clojure, symbols are something concrete.)

[04:05] <TimToady> it's just something you use to stand for something else that you would otherwise have difficulty talking about :)

[04:05] <TimToady> yes, FP languages have it as a technical term

[04:05] <TimToady> I think it's a bad technical term, but there...

[04:05] <uvtc> Are the major/common containers: Scalar, Array, and Hash?

[04:06] <uvtc> (As in, names like, "$x, @a, and %h are references to containers".)

[04:06] <TimToady> and Routine :)

[04:06] <uvtc> Nice. Ok.

[04:06] <TimToady> Routines are actually mutable, or you couldn't call .wrap on one

[04:07] <uvtc> I don't know what calling .wrap on anything would mean.

[04:07] <TimToady> it's sort of an AOP thing, don't sweat it

[04:07] <skids> uvtc: maybe I'm not up to speed but: a name is bound to either reference(s) or value(s).  In the case of $ names that's singular. References reference values.  Values can, however, be anonymous references (e.g. a Parcel).

[04:08] <uvtc> Is a Parcel a container?

[04:08] <TimToady> not in the sense of being mutable

[04:08] <uvtc> Ok.

[04:08] <TimToady> it's kinda like a Tuple in Python

[04:09] <TimToady> but more directly mapped to the structure of the program, in general

[04:09] <TimToady> if your expression, has ($a, @b, &c, %d), you have a Parcel with four items

[04:10] <TimToady> you have no idea how those will be flattened; it depends on what kind of signature you bind it to

[04:10] <TimToady> so it's where we have a lazy value that does not yet know its item vs list context

[04:11] <TimToady> if bound to ($,$,$,$) in a signature, there are just 4 arguments

[04:11] <TimToady> if bound to ($, *@), there's one positional, and the rest come in variadic (slurpy)

[04:11] <TimToady> or you could bind to (*@) and they'll all come in flattened

[04:12] <TimToady> (the way everything comes in in Perl 5, as it happens, at least without prototypes)

[04:14] <uvtc> TimToady: thanks.

[04:14] <TimToady> and we call it a Parcel because you don't know what's in it till it's unwrapped :)

[04:15] <uvtc> Hehehe. Good mnemonic. :)

[04:15] <TimToady> well, and "parenthesis cell", but it's really the commas that do it

[04:16] <uvtc> Oh, it's the commas that make the cell, not the parens. Ok.

[04:18] <TimToady> r: my \p = 1,2,3; say p.WHAT

[04:18] <p6eval> rakudo 357e60: OUTPUT«(Parcel)␤»

[04:19] <TimToady> r: my $p = 1,2,3;  # should warn

[04:19] <uvtc> r: my \p; say \p.WHAT;

[04:19] <p6eval> rakudo 357e60:  ( no output )

[04:19] <p6eval> rakudo 357e60: OUTPUT«===SORRY!===␤Method 'ast' not found for invocant of class 'NQPMu'␤»

[04:19] <uvtc> r: my \p; say \p.WHAT;

[04:19] <p6eval> rakudo 357e60: OUTPUT«===SORRY!===␤Method 'ast' not found for invocant of class 'NQPMu'␤»

[04:19] <TimToady> r: my $p = 1,2,3;  42;  # should warn

[04:19] <p6eval> rakudo 357e60: OUTPUT«WARNINGS:␤Useless use of "," in expression "my $p = 1,2,3" in sink context (line 1)␤»

[04:19] <TimToady> there we go

[04:20] <TimToady> uvtc: \ means something else on the RHS

[04:20] <uvtc> What does it mean on the LHS? "Sigilless" variable?

[04:20] <uvtc> (that always looks like "silliness" to my eyes. :) )

[04:20] <TimToady> it means bind the raw parcel without commiting to item vs list context

[04:21] <uvtc> Oh. Don't open the parcel.

[04:21] <TimToady> yes, just put another sticker on it so you can forward it :)

[04:21] <uvtc> :) Or, maybe: don't apply and context to it.

[04:21] <uvtc> ...just yet.

[04:22] <TimToady> right, keep being lazy about deciding the context

[04:22] <TimToady> p6 is all about the control of laziness

[04:22] <TimToady> yesterday I decided that try couldn't be lazy anymore (in the list sense)

[04:23] <TimToady> try should encapsulate a computation better than that

[04:23] <TimToady> you can still fake out a try, but you'd have to use "gather try ... take" for that

[04:28] <uvtc> Thanks. Have not yet gotten to `try`, `gather`, `take`, etc.

[04:29] <TimToady> someone should write a book about this...why is everyone looking at me?

[04:30] <diakopter> •.•

[04:32] <TimToady> there's a sense in which Rats are just lazy division too

[04:33] <uvtc> I see a quotable quote coming: "Perl 6 is all about controlling laziness, $something impatience, and $something-else hubris."

[04:34] <geekosaur> $something-else is surely "encouraging" :)

[04:35] <TimToady> well, controlled laziness, controlled impatience, and controlled hubris

[04:35] <geekosaur> $something may be "reducing"

[04:35] <TimToady> it depends on whether you're talking about the computer or the programmer :)

[04:35] *** preflex_ joined
[04:36] *** preflex left
[04:36] *** preflex_ is now known as preflex

[04:38] *** kaleem joined
[04:38] <uvtc> Ok. So, it sounds then like I'm probably over-thinking this, and can simply start using arrays, and then using brackets when I want them to not flatten.

[04:41] <TimToady> or $@array

[04:42] <TimToady> just as you can use @$array to go the other direction

[04:42] <uvtc> Were parens previously required to do that?

[04:42] <TimToady> yes

[04:42] *** fgomez left
[04:42] <TimToady> well, by the implementation, not by the spec

[04:43] <TimToady> at least for a period of time, the spec may have been an underspec before that :)

[04:43] <uvtc> In Perl 5, I tend to most often use the extra curlies when de-reffing, because it seems more readable to be explicit.

[04:46] <uvtc> In the cheatsheet, it says that `[ ]` is an array composer. I don't know the technical meaning of "composer", but it gave me the impression that if `[ ]` makes arrays, then maybe `( )` makes something else.

[04:46] <uvtc> Oh. Wait.

[04:47] <uvtc> It says that `(, )` is the Parcel composer. So I was wondering if there was something else to make lists.

[04:47] <TimToady> it kinda makes a parcel in the sense that it either makes a real Parcel with , or something that can stand as a parcel as a single item

[04:48] <uvtc> Ok.

[04:48] <TimToady> it's a "provisional item" of a parcelish nature

[04:49] <TimToady> an item context can't look inside a () to see if there are commas or not, in a sense

[04:49] <TimToady> but a list context can

[04:50] <uvtc> "item context" is new to me, but it sounds analogous to list (array?) context, or boolean context.

[04:50] <TimToady> which is why parens are transparent to list context, but not item context

[04:51] *** SamuraiJack joined
[04:51] <TimToady> if you call a function foo((1,2,3),(4,5,6)), it keeps the possibility of treating that as 2 arguements, 4 arguments, or 6

[04:51] <TimToady> depending on whether the signature is ($,$), ($,*@), or (*@)

[04:52] <TimToady> but the $ binding doesn't care whether there's a comma inside or not

[04:52] <TimToady> if it were foo((1+3),(4,5,6)) it'd do the same

[04:52] <uvtc> Ok.

[04:53] <uvtc> Thanks, TimToady.

[04:54] <TimToady> it most does what one expects, but sometimes it's hard to describe what people expect :)

[04:54] <TimToady> *mostly

[05:00] *** Eddward joined
[05:03] <Eddward> Are there any known bugs in rakudo-star-2013.02 in rakudo/t/spec/S02-types/bool.t

[05:04] <Eddward> It's not quite 100% but I get an error right after ok 48 - Bool.pick(*) returns two elems

[05:04] <Eddward> *** glibc detected *** ./perl6: free(): invalid next size (fast): 0x000000000293bd10 ***

[05:05] <Eddward> That's followed by a C stack trace.  I suppose it could just be my system memory.

[05:06] <Eddward> Aside from some TODOs that works I didn't see any other test failures.

[05:07] *** fgomez joined
[05:09] *** ikrs left
[05:09] *** ikrs joined
[05:11] <TimToady> huh

[05:11] <TimToady> I didn't actually run the tests here; maybe I'll fire off a run now

[05:15] <TimToady> bool.t passes here, so maybe it's something there

[05:15] <TimToady> are you on 32-bit or 64?

[05:16] <TimToady> (I'm on 64)

[05:17] <TimToady> also, is it reproducable?  coulda been a cosmic ray...

[05:20] <uvtc> Love that guy's pizza.

[05:21] <uvtc> (Cosmic Ray's Famous Pizza)

[05:21] <uvtc> Ok then! :)

[05:21] *** uvtc left
[05:24] *** bruges_ joined
[05:32] *** mtk joined
[05:40] *** raiph joined
[05:46] *** drKreso joined
[05:50] *** grondilu joined
[05:51] <grondilu> rn: my @a = [<foo bar>], [<1 2>]; say @a»[0];

[05:51] <p6eval> rakudo 357e60, niecza v24-24-gbdc3343: OUTPUT«foo bar 1 2␤»

[05:51] * grondilu was expecting "foo 1"

[05:52] <grondilu> pugs: my @a = [<foo bar>], [<1 2>]; say @a»[0];

[05:52] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "["␤    expecting term postfix␤    at /tmp/N5BRQ1gktS line 1, column 38␤»

[05:55] <drKreso> phenny, tell FROGGS This line?         my str $line = $PIO.readline(nqp::unbox_s($!input-line-separator));

[05:55] <phenny> drKreso: I'll pass that on when FROGGS is around.

[05:56] *** drKreso left
[05:56] *** grondilu left
[05:58] *** quester joined
[06:01] *** SamuraiJack left
[06:05] <Eddward> TimToady: I'm running 64bit.  It happens most of the time.  I've seen it pass 3 times.  When it fails it's always right after 48.

[06:11] <moritz> we've had occasional trouble with bool.t for quite some time now (years)

[06:12] <Eddward> If I have a good recreate, is there anything I should try to debug?

[06:13] <Eddward> I've never looked at the internals of parrot or rakudo but I can handle the debugger.

[06:13] <diakopter> Eddward++

[06:13] <quester> Eddward, TimToady, moritz:  I've also been having problems with t/spec/S02-types/bool.t.  I opened a bug report a few days ago, RT #116933.

[06:19] <Eddward> Running under valgrind I still get to test 48, but I get a different error from glib.  valgrind didn't detect any errors though.

[06:19] <moritz> Eddward: getting a backtrace would be a good first step, as well as anything that looks helpful

[06:20] <Eddward> I need to go to bed for now.  I'll pop on tomorrow to see if I can help.  Thanks.

[06:20] <moritz> ciao

[06:20] <Eddward> ok

[06:20] <moritz> valgrind and the GC don't love each other

[06:20] <Eddward> Do I need an account on rt to add to it?

[06:21] <Eddward> I assumed that if glibc detected a double free, valgrind might too.

[06:26] *** Eddward left
[06:26] <quester> r: use Test; ok (0 but Bool::True), qq{Bool::True works with "but"} for 1..25;

[06:26] <p6eval> rakudo 357e60: OUTPUT«(signal ABRT)ok 1 - Bool::True works with "but"␤ok 2 - Bool::True works with "but"␤ok 3 - Bool::True works with "but"␤ok 4 - Bool::True works with "but"␤ok 5 - Bool::True works with "but"␤ok 6 - Bool::True works with "but"␤ok 7 - Bool::True works with "but"␤ok 8 - …

[06:28] <quester> Hmm... when I try that locally, it usually says ok seven times and crashes on the eighth iteration.

[06:30] <quester> star: use Test; ok (0 but Bool::True), qq{Bool::True works with "but"} for 1..25;

[06:30] <p6eval> star 2013.02: OUTPUT«(signal ABRT)ok 1 - Bool::True works with "but"␤ok 2 - Bool::True works with "but"␤ok 3 - Bool::True works with "but"␤ok 4 - Bool::True works with "but"␤ok 5 - Bool::True works with "but"␤ok 6 - Bool::True works with "but"␤ok 7 - Bool::True works with "but"␤ok 8 - B…

[06:31] <quester> Double hmm... locally, rakudo-star 2013.02 usually runs six iterations and crashes on the seventh.

[06:31] <diakopter> I'll abrt you

[06:32] * quester wonders who is being abrt'ed and whether it is a good thing or a bad thing.

[06:34] * quester facepalms

[06:36] <diakopter> ? :)

[06:37] *** drKreso joined
[06:38] <quester> r: (0 but Bool::True) and print qq{$_ }  for 1..100;

[06:38] <p6eval> rakudo 357e60: OUTPUT«(signal ABRT)1 2 3 4 5 6 7 8 9 10 11 12 13 »

[06:38] <quester> star: (0 but Bool::True) and print qq{$_ }  for 1..100;

[06:38] <p6eval> star 2013.02: OUTPUT«(signal ABRT)1 2 3 4 5 6 7 8 9 10 11 12 13 »

[06:40] <quester> Ah.  Sigabrt after thirteen iterations... very likely the same way it dies here, with glibc aborting it ("glibc detected *** perl6: munmap_chunk(): invalid pointer: 0x000000000318a410 ***")

[06:47] *** hypolin left
[06:48] *** rindolf left
[06:48] *** rindolf joined
[06:53] <drKreso> Hi, I am playing with changing one line in INET.pm in rakudo core. After make && make install I get Missing or wrong version of dependency 'src/gen/CORE.setting' when running scripts. What did I do wrong?

[06:53] *** xinming_ left
[06:54] *** xinming joined
[06:57] *** rindolf left
[06:57] *** ikrs left
[06:57] <moritz> drKreso: there's some precompiled .pir files that you haven't regenerated after installing rakudo

[06:57] *** rindolf joined
[06:57] <drKreso> moritz: How can i do that? (Sorry for stupid questions)

[06:58] <moritz> drKreso: delete the 'site' dir in the rakudo installation dir, and then re-install all the necessary modules with panda again

[07:02] <nwc10> jnthn: all selftests succssful

[07:03] *** hypolin joined
[07:03] <drKreso> moritz: Thanks, it's working now. Is there a better way or it has to be done each time?

[07:04] <nwc10> jnthn: bother. The VMS system I have an account on only has Java 1.6.0. So I can't test it there :-(

[07:09] *** ikrs joined
[07:09] *** rindolf left
[07:10] *** rindolf joined
[07:13] *** grondilu joined
[07:14] <grondilu> rn: say all(^10) ~~ Int;

[07:14] <p6eval> rakudo 357e60, niecza v24-24-gbdc3343: OUTPUT«False␤»

[07:16] * grondilu was expecting True

[07:16] *** toebu left
[07:16] <sorear> rn: say all(^10) ~~ Range

[07:16] <p6eval> niecza v24-24-gbdc3343: OUTPUT«all(Bool::False, Bool::False, Bool::False, Bool::False, Bool::False, Bool::False, Bool::False, Bool::False, Bool::False, Bool::False)␤»

[07:16] <p6eval> ..rakudo 357e60: OUTPUT«False␤»

[07:16] * quester updated RT #116933 with additional stacktraces from different version of Rakudo, FWIW

[07:17] <sorear> rn: say map *.WHAT, ^10

[07:17] <p6eval> niecza v24-24-gbdc3343: OUTPUT«(Int) (Int) (Int) (Int) (Int) (Int) (Int) (Int) (Int) (Int)␤»

[07:17] <p6eval> ..rakudo 357e60: OUTPUT«Cannot call 'map'; none of these signatures match:␤:(&code, *@values)␤␤  in block  at /tmp/QuiSo3SrLf:1␤␤»

[07:23] * quester wishes everyone in #perl6 a very pleasant evening, or the localtime() of your choice

[07:25] *** quester left
[07:27] *** tadzik joined
[07:32] *** ikrs left
[07:35] *** ikrs joined
[07:35] *** FROGGS joined
[07:36] <FROGGS> morning

[07:36] <phenny> FROGGS: 05:55Z <drKreso> tell FROGGS This line?         my str $line = $PIO.readline(nqp::unbox_s($!input-line-separator));

[07:37] <FROGGS> drKreso: right, this one hangs if it tried to read when there is no more data

[07:37] <drKreso> FROGGS: From yesterday socket blocking problem

[07:37] *** rindolf left
[07:37] *** rindolf joined
[07:38] <FROGGS> drKreso: I have to research a bit how to fix that

[07:40] <drKreso> FROGGS: I have some sort of workaround https://github.com/rakudo/rakudo/commit/0b5899aefba8facb4feda39716f6be7db1bcc328#src/core/IO/Socket/INET.pm but I am unsure what would be right fix, or what is causing it

[07:42] <drKreso> FROGGS: Maybe using the old version + binary decoding into string before returning.

[07:44] *** kaare_ joined
[07:44] <FROGGS> drKreso: what exactly is that what you posted? is that a testserver?

[07:44] <drKreso> FROGGS: Yes, from http::easy readme

[07:46] <FROGGS> but this is not related to the blacking .readline

[07:47] <FROGGS> there is a string flying around which is binary encoded, so you could encode/decode it again, to utf8 or so

[07:47] <FROGGS> that should fix the $key .= uc 

[07:48] <drKreso> FROGGS: I don't know how to write better test, but when I curl test server it blocks on last header line (after cookie). Something in that last commit is making him block.

[07:48] *** SamuraiJack joined
[07:51] <drKreso> FROGGS: When I revert that commit, it doesn't block any more. But HTTP::Easy breaks on binary string (but thats easy enough to fix). Now I am not sure of what would be proper thing here, since I see that last commit is trying to decode binary string and return regular one. (So HTTP::Easy would just work).

[07:57] *** ikrs left
[08:02] *** ikrs joined
[08:06] *** kaleem left
[08:12] *** domidumont joined
[08:15] *** kaare__ joined
[08:17] *** kaare_ left
[08:21] <FROGGS> drKreso: I'll be afk for a few hours, but I will not forget about your problem :o)

[08:28] <moritz> one could try to explicitly pass an encoding to IO::Socket::INET.new()

[08:28] <moritz> though if .get returns Str, it should never be binary

[08:34] <arnsholt> masak: You around?

[08:35] *** domidumont left
[08:35] *** daxim joined
[08:35] *** odoacre joined
[08:36] *** ikrs left
[08:36] *** domidumont joined
[08:37] *** lizmat left
[08:38] *** fhelmberger joined
[08:40] *** ikrs joined
[08:44] *** sqirrel joined
[08:45] *** ObseLeTe joined
[08:50] *** kaare__ is now known as kaare_

[08:51] *** wk left
[08:58] *** ObseLeTe left
[08:59] *** ObseLeTe joined
[09:04] <tadzik> it should not return string, I think :|

[09:10] <moritz> .get is line orientent, and "line" is string concept

[09:10] <moritz> not a Buf concept

[09:10] <moritz> so .get, by definition, must return a Str

[09:10] <tadzik> hm, I see

[09:15] *** donaldh joined
[09:24] <jnthn> morning o/

[09:24] <phenny> jnthn: 00:37Z <japhb_> tell jnthn You might want to tag this nqp-jvm milestone, because I would think "can compile itself, but doesn't have the other stuff needed by rakudo" would be an interesting marker for people wishing to port to other platforms.

[09:24] <nwc10> \o/

[09:24] <nwc10> jnthn: I can't actually find any other machine with Java (1.)7 installed :-(

[09:26] <jnthn> .oO( Write Once, Run Any...wait... )

[09:26] <tadzik> Write once, run for your life :)

[09:28] <jnthn> nwc10: I guess time will take care of that, though.

[09:35] *** ikrs left
[09:38] *** donaldh left
[09:39] <nwc10> jnthn: is NQPJVM able to recompile itself?

[09:40] <nwc10> and is it byte-for-byte identical? (Should it be? Or does Java put timestamps into the bytecode)

[09:40] <jnthn> nwc10: Didn't get to trying that yet. :)

[09:41] <diakopter> nwc10: javac automatically randomly obfuscates

[09:41] <jnthn> byte-for-byte identical - no, because NQP itself does some naming differently each time

[09:42] <jnthn> To make sure the different layers of the bootstrap never end up ambiguous.

[09:42] <nwc10> ah OK.

[09:42] <nwc10> byte-for-byte identical is (I think) how gcc tries to test its bootstrap

[09:42] <diakopter> (kidding, of course)

[09:43] <jnthn> Not to mention that we generate Java bytecode, so javac ain't involved :P

[09:43] <diakopter> o yeah :D

[09:46] * diakopter waits for the slow cc

[09:48] *** labster left
[09:54] *** dakkar joined
[09:56] <drKreso> I broke panda :( After reinstalling rakudo when running perl6 bootstrap.pl (for panda) I get t/01-file-find.t ...... Dubious, test returned 1 (wstat 256, 0x100)

[09:56] <drKreso> No subtests run 

[09:56] <drKreso> t/02-shell-command.t .. Cannot fetch object from non-existent serialization context . Tried clean, removing site ? What else can I try?

[09:57] <diakopter> jnthn: this has to be the funniest error message I've ever seen https://gist.github.com/diakopter/28e68225461765592ee0

[09:57] <diakopter> jnthn: oh and the ; in your selftest target aren't portable

[09:58] <jnthn> current directory much? :)

[09:59] *** wk joined
[09:59] <jnthn> yes, I'm not sure what to do about that short of having the Makefile generated 

[10:00] <diakopter> it's ok; git won't mind me having an uncommitted change that I'm sure will merge ok, i guess

[10:00] *** woosley left
[10:00] <jnthn> we could just add a selftest and winselftest :)

[10:01] <jnthn> It's only temporary anyways

[10:01] <diakopter> true

[10:01] * jnthn wonders where all the ./s got added...

[10:01] <diakopter> oh, did you scroll all the way to the right?

[10:02] <diakopter> easier to see/laugh: https://gist.github.com/diakopter/28e68225461765592ee0/raw/8191fa3e85cf5f1e113dd4ddef89533231894578/gistfile1.txt

[10:02] <nwc10> jnthn: that or you spawn a perl one liner to invoke prove

[10:03] <diakopter> jnthn: there are 2035 ./ in there

[10:04] *** hypolin left
[10:04] <diakopter> unix date end?!?

[10:04] <diakopter> ...what else does 2035 mean

[10:05] <diakopter> yeah.. I don't know how to fix this.

[10:06] <diakopter> ETOOMANYPERIODS

[10:06] <huf> somehow it reminds me of the "spam spam spam spam, lovely spam" scene

[10:09] <drKreso> Huh, panda problems where my fault… forgot to update /usr/bin/perl6 

[10:14] *** anuby left
[10:16] *** kaare_ left
[10:16] *** kaare__ joined
[10:18] *** drKreso left
[10:31] *** Exodist left
[10:35] *** Exodist joined
[10:36] *** domidumont1 joined
[10:38] *** domidumont left
[10:55] *** kaleem joined
[10:58] *** ObseLeTe left
[11:00] *** toebu joined
[11:05] *** ObseLeTe joined
[11:10] *** spider-mario joined
[11:37] *** bowtie_ joined
[11:38] <bowtie_> \NICK bowtie

[11:38] *** bowtie_ left
[11:39] *** bowtie_ joined
[11:39] *** bowtie_ left
[11:40] *** bowtie_ joined
[11:41] *** bowtie_ left
[11:43] *** drKreso joined
[11:44] *** Targen left
[11:45] *** bowtie_ joined
[11:45] *** pmurias joined
[11:46] *** drKreso_ joined
[11:46] <nwc10> does the upcoming jvm version 8 add any interesting opcodes?

[11:47] <bowtie_> sorry for noise, I thought I would pop by and see whats going on, but I have had to use _ postfix as my nick is in use all ready by another

[11:47] <moritz> no problem

[11:47] *** drKreso left
[11:47] *** drKreso_ is now known as drKreso

[11:52] *** rindolf left
[11:58] *** SmokeMachine joined
[11:58] *** drKreso left
[12:00] *** drKreso joined
[12:07] *** shinobicl joined
[12:07] *** census joined
[12:17] *** drKreso left
[12:33] *** shinobicl left
[12:33] *** domidumont joined
[12:34] *** ObseLeTe left
[12:36] <dalek> perl6-roast-data: 03236a1 | coke++ | / (4 files):

[12:36] <dalek> perl6-roast-data: today (automated commit)

[12:36] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/03236a1ad2

[12:36] <dalek> perl6-roast-data: 0438d07 | coke++ | / (4 files):

[12:36] <dalek> perl6-roast-data: today (automated commit)

[12:36] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/0438d07c93

[12:36] *** domidumont1 left
[12:37] *** shinobicl joined
[12:38] <[Coke]> "It's been [15] days since someone broke the daily build"

[12:38] <[Coke]> (rakudO)

[12:39] <FROGGS> [Coke]: what do we wanna do with the guy who breaks it?

[12:43] <moritz> [Coke]: did the build break, or just some tests?

[12:53] *** ObseLeTe joined
[12:53] <nwc10> jnthn: OK, so I am root on at least one machine. And it has a java (1.)7 package available. So I installed it:

[12:54] <nwc10> nick@raspberrypi:~/Perl/nqp-jvm-prep$ time java -cp .:bin:3rdparty/bcel/bcel-5.2.jar NQPJVM -e 'nqp::say("Hello world from somewhere else")'

[12:54] <nwc10> Hello world from somewhere else

[12:54] <nwc10> real    0m33.994s

[12:54] <nwc10> user    0m32.360s

[12:54] <nwc10> sys     0m0.360s

[12:54] <nwc10> I'm running the tests now. Slowly, I suspect

[12:54] <nwc10> but yes, you can ship the build tree to a different architecture, and it WORKS

[12:54] <nwc10> (which you would expect. But I have verified this)

[12:55] <nwc10> t/nqp/01-literals.t ....... ok

[12:55] <nwc10> t/nqp/02-if.t ............. ok

[12:55] <nwc10> t/nqp/03-if-else.t ........

[12:55] <nwc10> don't hold your breath

[13:01] <jnthn> 33s?!

[13:01] <nwc10> yes. But it's not swapping

[13:01] <nwc10> also, that's a softfloat JVM on the old debian softfloat distro

[13:02] <nwc10> on a class 4 SD card

[13:02] <jnthn> ah

[13:03] <nwc10> and it's openjdk, so that's not Oracle's?

[13:03] <nwc10> I think that Oracle have been playing a lot with JVMs on ARM since then, including specifically on Raspberry Pis

[13:03] * colomon is now fighting the urge to try nqp-jvm on his phone....

[13:03] <nwc10> gawn gawn. you know you want to

[13:03] <nwc10> does your phone have >256Mb?

[13:03] <colomon> nwc10: not sure, it's a galaxy s3

[13:04] <nwc10> when the tests have passed (There's confidence)

[13:04] <nwc10> I'm going to try building current nqp

[13:04] <nwc10> and see how long it takes to run the same tests

[13:08] <nwc10> jnthn++ # giving the spinning rust a holiday

[13:09] * colomon is doing a manual binary search through his $work SVN repo trying to figure out when he broke processing this one file

[13:09] <nwc10> git-svn and bisect? :-)

[13:10] *** nyuszika7h joined
[13:10] <moritz> cpanm App::SVN::Bisect

[13:10] <moritz> by Infinoid++

[13:10] <colomon> moritz: you're kidding me.

[13:10] <pmurias> the boostraped nqp-jvm is slower than nqp-parrot?

[13:10] <moritz> unless I misremembered that nick name

[13:10] <bowtie_> can I have a heads up when perl6 threading will be using the rakudo 5.x please

[13:11] <colomon> moritz: nope, that's it.  moritz++

[13:11] *** benabik left
[13:11] *** drKreso joined
[13:11] *** skids left
[13:11] <nwc10> bowtie_: I think your version numbers are confused. Rakudo versions aren't in the 5. series

[13:11] <colomon> API METHODS: new do_something_intelligent

[13:12] <nwc10> pmurias: it was for running the NQP tests, last night, IIRC. Parrot's startup time is way better

[13:12] <nwc10> I suspect that the NQPJVM codegen will get a lot better, and start to win back

[13:12] <moritz> bowtie_: https://github.com/tadzik/Threads/ gives you parrot's threads in Rakudo today

[13:16] <pmurias> nwc10: the 33sec hello world was on a credit sized rasberry pi?

[13:17] <nwc10> yes.

[13:17] <nwc10> (there is only one size)

[13:18] <bowtie_> moritz,  silly me sorry, you are quite right i meant Parrot

[13:19] <jnthn> skype, bbiab

[13:22] * colomon now trying out svn-bisect

[13:25] *** ikrs joined
[13:27] *** gcole joined
[13:31] *** kaleem left
[13:36] *** ikrs left
[13:37] <[Coke]> moritz: I was counting build+tests as "the build", and nothing broke, it's ongoing.

[13:37] <moritz> [Coke]: ok, I misunderstood

[13:38] <[Coke]> (svn bisect) So sad that someone did my module better than I did. ;)

[13:38] <colomon> [Coke]: you're in the credits for it.  :)

[13:39] <[Coke]> infinoid++

[13:40] *** lustlife left
[13:49] * jnthn back

[13:50] <nwc10> All tests successful.

[13:50] <[Coke]> jnthn++

[13:50] <nwc10> Files=57, Tests=537, 2985 wallclock secs ( 2.79 usr  0.36 sys + 2830.67 cusr 24.37 csys = 2858.19 CPU)

[13:50] <nwc10> that's about 50 minutes

[13:50] <jnthn> o.O

[13:50] <nwc10> but, much faster than building locally

[13:50] * [Coke] finally thinks to install the git bash-completion script. mmmm

[13:58] <moritz> http://blog.regehr.org/archives/199 "Somehow, at some point in every serious programming project, it always comes down to the last option: stare at the code until you figure it out. I wish I had a better answer, but I don’t. Anyway, it builds character."

[13:59] *** odoacre left
[14:01] *** kborer joined
[14:13] *** SamuraiJack left
[14:14] *** odoacre joined
[14:16] *** PacoAir joined
[14:21] *** Psyche^ joined
[14:24] *** Patterner left
[14:24] *** Psyche^ is now known as Patterner

[14:27] *** bluescreen10 joined
[14:38] <eiro> http://boingboing.net/2013/02/11/regular-expressions-crossword.html <3

[14:39] *** skids joined
[14:41] *** odoacre_ joined
[14:42] *** PacoAir left
[14:44] *** PacoAir joined
[14:45] *** odoacre left
[14:48] <FROGGS> eiro++

[14:49] <moritz> somewhere there's a gist floating around that solves this in haskell with au++'s genex module

[14:54] *** benabik joined
[14:55] <FROGGS> hmmm, I would have done it using a pencil

[15:02] <eiro> haha :) 

[15:09] <grondilu> off topic: launch of falcon 9 in a few seconds: http://www.spacex.com/webcast/

[15:09] <nwc10> ooh. I'd forgotten that. thanks

[15:09] <nwc10> 30 seconds

[15:11] <moritz> grondilu++ # reminding me just in time for takeoff

[15:13] <moritz> http://morepypy.blogspot.de/2013/02/10-years-of-pypy.html

[15:14] <moritz> among the many gems in there: "To make it more likely to be accepted, the proposal for the EU project contained basically every feature under the sun a language could have. This proved to be annoying, because we had to actually implement all that stuff. Then we had to do a cleanup sprint where we deleted 30% of codebase and 70% of features."

[15:16] <benabik> That sounds familiar for some rason.

[15:16] <TimToady> yeah, can't quite place it...

[15:17] <nwc10> it's taken almost as long as Perl 6

[15:17] <TimToady> someone in the back room keeps asking for a cracker though

[15:17] <nwc10> and, depending on how you date it, longer than Rakudo

[15:17] <nwc10> and cost more.

[15:18] <TimToady> I wonder who they got to pay them to delete stuff?

[15:18] <benabik> Probably deleted a bunch of stuff while someone wasn't paying them.

[15:18] <benabik> Quick, nobody's looking!

[15:19] <TimToady> "You paid us to put it in; you didn't pay us to *keep* it in."

[15:19] <nwc10> yeah

[15:19] <nwc10> that's really the strategy we should be using for Perl 5 now. I've said it for a while

[15:19] <nwc10> "that's a very nice language you seem to be using there. Shame if anything happened to it"

[15:20] <nwc10> (it might seem like a joke, but the point behind it is that there isn't much significant that can be added, that you could pitch to a commerical sponsor as worth funding)

[15:21] * [Coke] wonders if he should ping the giant $dayjob intranet for Perl users.

[15:22] <[Coke]> rjbs++ # tpf/grant blog post.

[15:23] <TimToady> people are like old programs too, I guess, except that you actually have to pay someone to cut parts out of you that you don't want anymore...

[15:23] * TimToady learned yesterday that he is having his prostate out this month

[15:23] <rjbs> I'm told that all we need is someone with vision to come and attract a swarm of C coders.

[15:23] <[Coke]> Yikes. Best of luck, sir.

[15:23] <rjbs> TimToady: That sounds like no fun at all.  Good luck.

[15:24] <moritz> TimToady: Good luck!

[15:24] <TimToady> thanks, not looking for pity, but not trying to avoid the best wishes :)

[15:24] <TimToady> and prayers, for those of you who are so inclined :)

[15:25] <colomon> done.  :)

[15:25] <moritz> and $wife might get a new aortic valve later this month

[15:25] <moritz> so, fun all around

[15:25] <rjbs> moritz: My dad just did that not too long ago.  Pig, I think.

[15:25] <moritz> rjbs: the problem seems to me that Perl 5 isn't so much written in C, as in a massive abstraction layer of custom macros over C

[15:25] <rjbs> moritz: Good luck!  The worst part of it seemed to be that my dad was so anxious.  The actual work of it seemed to go just fine.

[15:25] <benabik> moritz: +1

[15:26] <[Coke]> YAY TECHNOLOGY!

[15:26] <nwc10> moritz: you get used to those. It's still a pig to maintain

[15:26] <nwc10> self hosting is a big plus point

[15:26] <moritz> rjbs: human for $wife, but with all the cells remove; the theory is that the body can repopulate it with its own cells (experimental method)

[15:26] <nwc10> your volunteer base is more likely to overlap with your skillsets needed

[15:27] <rjbs> Interesting!  Good luck to both of you.

[15:27] <TimToady> yeah, well, I've already got two bionic eye lenses, and I'm wearing someone else's cornea...

[15:27] <moritz> nwc10: aye. I found that while writing stuff for the optimizier in NQP

[15:27] <moritz> rjbs: thanks

[15:27] <nwc10> TimToady: but the mustache is real, and for life, not just Movember? :-)

[15:29] <TimToady> well, dunno about life, but I've had it since I was 18

[15:29] <TimToady> got tired of looking 12

[15:30] <TimToady> actually, hated the sensation of a shaved upper lip; probably some Aspy thing...

[15:41] *** pmurias left
[15:42] *** pmurias joined
[15:45] *** Timbus joined
[15:45] *** ponbiki joined
[15:45] *** mberends joined
[15:45] *** tipdbmp joined
[15:45] *** cosimo joined
[15:45] *** TimToady joined
[15:45] *** kcwu joined
[15:45] *** gfldex joined
[15:45] *** Juerd joined
[15:49] *** bluescreen10 left
[15:55] *** pmurias left
[16:03] *** snearch joined
[16:04] *** snearch left
[16:05] *** daxim left
[16:05] *** uvtc joined
[16:10] *** snearch joined
[16:11] *** snearch left
[16:13] *** snearch joined
[16:14] *** snearch left
[16:15] *** snearch joined
[16:17] *** domidumont left
[16:17] *** snearch left
[16:18] *** snearch joined
[16:19] *** slavik1 left
[16:20] *** snearch left
[16:21] *** snearch joined
[16:23] *** snearch left
[16:24] *** slavik1 joined
[16:36] <uvtc> Would you call this `:foo<bar>` a Pair constructor, or Pair composer?

[16:36] <uvtc> Or Pair shorthand syntax.

[16:38] *** sjohnson joined
[16:39] <timotimo> i say "colon pair syntax"

[16:40] *** fhelmberger left
[16:40] <uvtc> Oh, just realized there's also `:foo('bar')`.

[16:41] <colomon> or foo => "bar"

[16:41] <FROGGS> right, <> is autoquoting

[16:41] <uvtc> right

[16:41] <FROGGS> and : is for named arguments

[16:42] <FROGGS> my $foo = 'bar';       :$foo     # same

[16:43] <uvtc> Oh. Interesting. `:$foo` is short for `foo => $foo`

[16:43] <TimToady> both as a parameter and as an rvalue

[16:44] *** kivutar joined
[16:44] <FROGGS> ya, :$foo is pretty nice

[16:45] <TimToady> so to turn a new method with positional parameters into named, you can say 'method new($a,$b,$c) { self.bless(*, :$a, :$b, :$c) }'

[16:45] <FROGGS> since you have to name your vars like the params you later need, the code gets more clear this way too

[16:46] *** tipdbmp left
[16:46] <uvtc> Oh, Perl 6 still has `bless`? I thought that was a P5-OO-ism.

[16:47] <TimToady> it's still what makes a constructor a constructor, but it has different semantics

[16:47] *** ObseLeTe left
[16:47] <TimToady> for one, it's a method, not a function

[16:47] <TimToady> and you use it to pass the named args down to the various BUILD submethods that initialize the object

[16:48] <uvtc> Thanks. Have not gotten to that yet. :)

[16:50] * FROGGS .oO( is it dark down there at the various BUILD submethods? )

[16:51] *** tipdbmp joined
[16:54] <TimToady> actually, it's quite a bit brighter down there, being closer to pure math and/or heaven.

[16:54] <TimToady> or at least Mu...

[16:55] <TimToady> I say "down", but it's really going up the class hierarchy to Mu

[16:55] <TimToady> Metaphors We Live By

[16:56] <FROGGS> so Mu is basically a synonym for you know who?

[16:56] <FROGGS> (not voldemort this time)

[16:57] <TimToady> well, perhaps a bit of a reference to his ineffable aspects :)

[16:58] <TimToady> "that from which everything else derives its existence" :)

[16:58] <uvtc> " Be on your guard. There are older and fouler things than Orcs in the deep BUILD submethods of the world."

[16:59] <TimToady> actually, those would be the Liskov violations, I suspect

[17:00] *** PacoAir left
[17:00] <TimToady> things are supposed to get more platonic as you go up the type hierarchy

[17:00] <FROGGS> uvtc: seen that two weeks ago or so

[17:00] *** not_gerd joined
[17:00] <not_gerd> o/

[17:01] <FROGGS> hi not_gerd 

[17:01] <not_gerd> rn: grammar { token foo($n) { o ** $n } }

[17:01] <uvtc> FROGGS: Perl 6: Mining Mithril for Fun and Profit!

[17:01] <p6eval> niecza v24-24-gbdc3343: OUTPUT«Potential difficulties:␤  Unsupported use of atom ** $n as separator; nowadays please use atom+ % $n at /tmp/vHn2NOyTly line 1:␤------> grammar { token foo($n) { o ** $n⏏ } }␤␤»

[17:01] <p6eval> ..rakudo 357e60: OUTPUT«===SORRY!===␤Quantifier quantifies nothing␤at /tmp/ms1g6ZyWkb:1␤------> grammar { token foo($n) { o ** ⏏$n } }␤    expecting any of:␤        statement list␤        prefix or term␤        prefix or meta-prefix␤        new name to…

[17:01] <FROGGS> uvtc: ya, but better keep quiet

[17:01] <not_gerd> std: grammar { token foo($n) { o ** $n } }

[17:01] <p6eval> std 52fe6d2: OUTPUT«Potential difficulties:␤  Unsupported use of atom ** $n  as separator; nowadays please use atom +% $n  at /tmp/Z2oaNEsQAR line 1:␤------> grammar { token foo($n) { o ** $n ⏏} }␤ok 00:00 45m␤»

[17:02] *** ponbiki left
[17:03] <TimToady> std: grammar { token foo($n) { o ** {$n} } }

[17:03] <p6eval> std 52fe6d2: OUTPUT«ok 00:00 45m␤»

[17:03] <TimToady> that's how you're supposed to write a dynamic range

[17:04] <FROGGS> nr: grammar { token foo($n) { o ** {$n} } }

[17:04] <p6eval> rakudo 357e60: OUTPUT«===SORRY!===␤Quantifier quantifies nothing␤at /tmp/7PJnB0CEiH:1␤------> grammar { token foo($n) { o ** ⏏{$n} } }␤    expecting any of:␤        statement list␤        prefix or term␤        prefix or meta-prefix␤        new name …

[17:04] <p6eval> ..niecza v24-24-gbdc3343:  ( no output )

[17:04] <not_gerd> TimToady: thanks

[17:04] <TimToady> though NYI

[17:04] <TimToady> will, in rakudo

[17:04] <TimToady> *well

[17:04] <FROGGS> timotimo: can you check that this wasnt working before your latest patch?

[17:04] *** Chillance joined
[17:05] <not_gerd> luckily, in my case $n ~~ 1..3, so I can unroll that manually

[17:05] <TimToady> std: grammar { token foo(\n) { o ** {n} } }

[17:06] <p6eval> std 52fe6d2: OUTPUT«ok 00:00 44m␤»

[17:06] <TimToady> I'd probably write it that way to make it look like it might be a range, not an item

[17:07] <TimToady> though I suspect the eventual implementation would handle $r containing a range there

[17:08] <TimToady> $n, I meant

[17:09] <FROGGS> std: grammar { token foo(\n) { o ** {0, 5...100} } }

[17:09] <p6eval> std 52fe6d2: OUTPUT«ok 00:00 46m␤»

[17:10] <FROGGS> did I mention that I love perl6's regexes and grammars?

[17:11] *** SunilJoshi joined
[17:12] <FROGGS> n: say "aaaaabbbbbccccc" ~~ /\w ** {5,10...100}/ # sad it doesnt work

[17:12] <p6eval> niecza v24-24-gbdc3343: OUTPUT«Unhandled exception: Unable to resolve method niecza_quantifier_min in type List␤  at /tmp/cyX_qvD0Vx line 1 (ANON @ 7) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2916 (Regex.ACCEPTS @ 10) ␤  at /tmp/cyX_qvD0Vx line 1 (mainline @ 3) ␤  at /home/p6eval…

[17:12] <FROGGS> n: say "aaaaabbbbbccccc" ~~ /\w ** {1..3}/

[17:12] <p6eval> niecza v24-24-gbdc3343: OUTPUT«｢aaa｣␤␤»

[17:12] <FROGGS> weird

[17:13] <TimToady> only an Int or Range is allowed currently

[17:13] <uvtc> .u ｢

[17:13] <phenny> U+FF62 HALFWIDTH LEFT CORNER BRACKET (｢)

[17:14] <TimToady> S05:1016

[17:14] <FROGGS> ahh, okay

[17:14] <TimToady> FROGGS: the reasoning being that a lot of people will try to write ranges as 1,3 instead of 1..3

[17:14] *** drKreso left
[17:14] <TimToady> and we need to be able to catch that

[17:15] <FROGGS> right, {1,3} is really perl fivy

[17:15] <FROGGS> and hard to catch for a lifetime perl 5 hacker

[17:15] <TimToady> and one can easily do the same thing with an assertion afterwards to backtrack the ones you don't want

[17:16] <TimToady> <?{ +$<captured> %% 5 }>

[17:17] <TimToady> n: say "aaaaabbbbbccccc" ~~ /(\w) ** {1..10} <?{ +$0 %% 2 }> /

[17:17] <p6eval> niecza v24-24-gbdc3343: OUTPUT«｢aaaaabbbbb｣␤ 0 => ｢a｣␤ 0 => ｢a｣␤ 0 => ｢a｣␤ 0 => ｢a｣␤ 0 => ｢a｣␤ 0 => ｢b｣␤ 0 => ｢b｣␤ 0 => ｢b｣␤ 0 => ｢b｣␤ 0 => ｢b｣␤␤»

[17:17] <TimToady> n: say "aaaaabbbbbccccc" ~~ /(a) ** {1..10} <?{ +$0 %% 2 }> /

[17:18] <p6eval> niecza v24-24-gbdc3343: OUTPUT«｢aaaa｣␤ 0 => ｢a｣␤ 0 => ｢a｣␤ 0 => ｢a｣␤ 0 => ｢a｣␤␤»

[17:18] <TimToady> there you go

[17:18] <nwc10> Raspberry Pi, nqp-on-parrot running the same tests as NQPJVM earlier:

[17:18] <nwc10> Files=57, Tests=537, 332 wallclock secs ( 2.50 usr  0.34 sys + 300.77 cusr  6.08 csys = 309.69 CPU)

[17:18] <TimToady> so this falls into the category of difficult things that are possible :)

[17:20] <TimToady> removing things you don't want seems to be a running theme today...

[17:21] <FROGGS> ya... ó.ò

[17:24] <FROGGS> nwc10: it feels a bit strange to almost have a perl 6 running on such a little box btw :o)

[17:25] * TimToady wonders when he should start pining for the fjords...funny thing is, Glo and I have a cruise to the fjords scheduled for this summer, so I guess I'm allowed to pine for them...  :)

[17:25] <jnthn> TimToady: ooh, Norwegian ones? Or elsewhere?

[17:25] <TimToady> .no

[17:26] <tadzik> oh you

[17:26] <jnthn> Nice :)

[17:26] <jnthn> They're very pretty :)

[17:26] <tadzik> oh, only I noticed a pun? :)

[17:26] <TimToady> I noticed it when I typed it :)

[17:27] <TimToady> I don't think there are any fjords in Nice though...

[17:27] *** donaldh joined
[17:32] * TimToady wanders off to scrub and pine, not to be confused with much of California

[17:50] *** PacoAir joined
[17:51] *** not_gerd left
[18:00] <uvtc> Wrote up some notes on Perl 6 AoA, AoH, etc.: http://www.unexpected-vortices.com/perl-6/compact-tut/data-structures.html . Please let me if anything there is amiss.

[18:00] *** lichtkind_ left
[18:03] <PerlJam> uvtc: my @a = [@a1], [@a2], [@a3]; and my @a = $(@a1), $(@a2), $(@a3);  are not "the same"

[18:04] <uvtc> Hm. What's the diff between them?

[18:04] <PerlJam> uvtc: The first one makes copies of the arrays, the second one does not.

[18:04] <PerlJam> uvtc: witness ...

[18:04] <PerlJam> r: my @a = <alpha beta gamma delta>; my @b = <foo bar baz>;  my @c = [@a], [@b];  @a[0] = 'XXX'; say @c;

[18:04] <p6eval> rakudo 357e60: OUTPUT«alpha beta gamma delta foo bar baz␤»

[18:04] <PerlJam> r: my @a = <alpha beta gamma delta>; my @b = <foo bar baz>;  my @c = $(@a), $(@b);  @a[0] = 'XXX'; say @c;

[18:05] <p6eval> rakudo 357e60: OUTPUT«XXX beta gamma delta foo bar baz␤»

[18:05] *** SamuraiJack joined
[18:06] <PerlJam> n: my @a = <alpha beta gamma delta>; my @b = <foo bar baz>;  my @c = $(@a), $(@b);  @a[0] = 'XXX'; say @c;

[18:06] <p6eval> niecza v24-24-gbdc3343: OUTPUT«XXX beta gamma delta foo bar baz␤»

[18:06] <PerlJam> (just checking :)

[18:06] <uvtc> thanks, PerlJam !

[18:07] *** donaldh left
[18:07] *** FROGGS left
[18:09] *** dakkar left
[18:10] <Guest8774> support over here

[18:10] <Guest8774> en mass

[18:10] <Guest8774> derp, wrong window

[18:10] <uvtc> en masse

[18:11] <uvtc> We must strike quickly!

[18:11] <uvtc> :)

[18:13] <uvtc> PerlJam: updated. Looks better now?

[18:16] <PerlJam> uvtc: I guess.

[18:17] <uvtc> PerlJam: Heh, yeah, not sure why I asked that. :) Thanks for the help.

[18:17] <PerlJam> uvtc:  you show the syntax for declaring anonymous arrays inline for your array-of-arrays example, why not do the same for hashes?  and for the other examples?

[18:18] <uvtc> PerlJam: Good point

[18:18] <uvtc> PerlJam: No reason, except that I just wrote it down and hadn't thought of that yet. :)

[18:18] *** FROGGS[mobile] joined
[18:18] <PerlJam> okie

[18:22] <uvtc> Hm. How do I make write an AoH inline? My first guess doesn't work: `my @a = {:a<1>, :b<2>}, {:x<7>, :y<8>}`

[18:22] *** skids left
[18:23] <uvtc> Sorry. Works. PEBCAK

[18:28] *** FROGGS joined
[18:37] *** SamuraiJack left
[18:40] <[Coke]> r: rx { a [ b | c ] ( d | e ) f : g }

[18:40] <p6eval> rakudo 357e60:  ( no output )

[18:40] <[Coke]> r: rx { ( ab* ) <{ $1.size % 2 == 0 }> }

[18:40] <p6eval> rakudo 357e60:  ( no output )

[18:41] *** fgomez left
[18:46] *** rindolf joined
[18:50] *** PacoAir left
[18:51] *** PacoAir joined
[18:51] *** grondilu left
[18:51] *** SunilJoshi left
[18:56] <FROGGS> TimToady: the example about the Remainder will not work with the failed_match->Nil changed we did recently: http://perlcabal.org/syn/S05.html#Bracket_rationalization

[18:56] <FROGGS> so the test for it already fails in the branch I made, which returns Nil instead of a Match object

[18:56] <tadzik> you can now submit talks to PLPW! http://act.yapc.eu/plpw2013/news/993

[18:57] <FROGGS> \o/

[18:58] *** fgomez joined
[18:59] *** skids joined
[19:02] <dalek> nqp: e79c768 | jnthn++ | src/QAST/Operations.nqp:

[19:02] <dalek> nqp: Add nqp::backtracestrings.

[19:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e79c768f5f

[19:03] *** zby_home_ joined
[19:03] <dalek> nqp-jvm-prep: 5b7a797 | jnthn++ | / (31 files):

[19:03] <dalek> nqp-jvm-prep: Funnel most exceptions to high-level mechanism.

[19:03] <dalek> nqp-jvm-prep: 

[19:03] <dalek> nqp-jvm-prep: This is a first step towards improiving backtraces to include useful

[19:03] <dalek> nqp-jvm-prep: information, not internal information.

[19:03] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/5b7a797dab

[19:03] <dalek> nqp-jvm-prep: 3e98f7f | jnthn++ | / (4 files):

[19:03] <dalek> nqp-jvm-prep: Show backtrace on exceptions.

[19:03] <dalek> nqp-jvm-prep: 

[19:03] <dalek> nqp-jvm-prep: Just has method/sub names so far, not lines/files.

[19:03] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/3e98f7f828

[19:03] <FROGGS> jnthn++

[19:04] <FROGGS> I always hated (and still do) the mess that you get as java backtraces

[19:05] <FROGGS> 80 lines of crap to read somewhere at the top: "Socket timeout"

[19:05] <diakopter> jnthn: maybe try 32-bit oracle jvm1.7 on windows

[19:09] *** ObseLeTe joined
[19:10] *** skids left
[19:11] *** Pompel joined
[19:12] *** grondilu joined
[19:15] <dalek> nqp-jvm-prep: 917c1b0 | jnthn++ | nqp-src/QRegex.nqp:

[19:15] <dalek> nqp-jvm-prep: Get latest !INTERPOLATE method.

[19:15] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/917c1b0e9b

[19:15] <dalek> nqp-jvm-prep: 8a9009c | jnthn++ | t/nqp/66-pararole.t:

[19:15] <dalek> nqp-jvm-prep: We pass 66-pararole.t.

[19:15] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/8a9009c9d1

[19:15] <colomon> we got parole! 

[19:16] <FROGGS> and the pararole is? "we pass 66"

[19:20] *** nyuszika7h left
[19:22] *** nyuszika7h joined
[19:23] *** araujo joined
[19:23] *** araujo left
[19:23] *** araujo joined
[19:27] *** zby_home_ left
[19:36] *** bluescreen10 joined
[19:42] *** shinobicl left
[19:54] <uvtc> Is a twigil the combination of the two punctuation characters, or is it just the second punctuation char?

[19:55] <FROGGS> the second one

[19:56] <uvtc> thanks FROGGS 

[19:57] *** ObseLeTe left
[19:57] <FROGGS> np

[19:57] *** fgomez left
[19:57] *** gcole left
[19:57] *** gcole joined
[19:58] *** gcole__ joined
[19:58] *** gcole left
[20:04] <dalek> ecosystem: fddf72a | (David Warring)++ | META.list:

[20:04] <dalek> ecosystem: Adding CSS::Grammar

[20:04] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/fddf72a319

[20:04] <dalek> ecosystem: aea4edd | tadzik++ | META.list:

[20:04] <dalek> ecosystem: Merge pull request #20 from dwarring/patch-2

[20:04] <dalek> ecosystem: 

[20:04] <dalek> ecosystem: Adding CSS::Grammar

[20:04] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/aea4edddc4

[20:06] *** donaldh joined
[20:07] <jnthn> Whoa...that CSS grammar looks like a pretty big piece of work! :)

[20:07] * moritz gives the last few pull request submitters commit bits

[20:10] *** census left
[20:10] <jnthn> Big test suite too

[20:10] <jnthn> (David Warring)++

[20:10] <FROGGS> good webguys are hardcore testers

[20:14] <moritz>     token nl {"\n"|"r\n"|"\r"|"\f"}

[20:14] <moritz> that's surely meant to be \r\n, right?

[20:14] <benabik> Needed a couple more tests, I suppose.  :-/

[20:15] <jnthn> Most probably :)

[20:15] <uvtc> Why does `for 1 .. 3 { say $_ }` return "True True True" after it completes?

[20:16] <uvtc> r: for 1 .. 3 { say $_ }

[20:16] <p6eval> rakudo 357e60: OUTPUT«1␤2␤3␤»

[20:16] <moritz> r: say do for 1..3 { .say }

[20:16] <p6eval> rakudo 357e60: OUTPUT«1␤2␤3␤True True True␤»

[20:16] <colomon> uvtc: because say returns True

[20:16] <benabik> say say ''

[20:16] <benabik> r: say say ''

[20:16] <p6eval> rakudo 357e60: OUTPUT«␤True␤»

[20:16] <moritz> oh, "why does", not "does"

[20:16] <uvtc> But why is it returning three Trues?

[20:16] <benabik> uvtc: For returns a list of the returns of its iterations.

[20:16] <colomon> you called it three times

[20:16] <jnthn> Because for is sygar for map

[20:16] *** thou joined
[20:16] <jnthn> *sugar

[20:17] <uvtc> Ah. sugar for `map`. Interesting.

[20:17] *** FROGGS[mobile] left
[20:18] *** FROGGS[mobile] joined
[20:18] * moritz hopes that his laptop doesn't overheat before testing the first for CSS::Grammar :-)

[20:19] <uvtc> moritz: I don't understand your last comment.

[20:19] <uvtc> moritz: well, the one before last.

[20:20] <uvtc> moritz: though maybe it wasn't in response to mine... :)

[20:21] * benabik has always liked how Scala's for is just sugar for foreach/map/filter/flatMap

[20:24] *** quester joined
[20:24] *** FROGGS[mobile] left
[20:24] <uvtc> So is `map { say $_ }, 1 .. 3` equivalent to `for 1 .. 3 { say $_ }` ? They seem to do the same thing, though I'd expect that I'd use `map` when I wanted to keep the list returned, whereas I'd use `for` if building something up (for side-effects).

[20:25] <benabik> Does map function differently in sink context?

[20:26] <benabik> uvtc: The for loop won't bother collecting the return values if you're not going to use them.

[20:27] <uvtc> What is sink context?

[20:27] <uvtc> I've heard of a horse fly, and a fruit fly, but I've never seen a sink fly.

[20:27] <uvtc> Wait.

[20:28] <benabik> uvtc: Sink context is "we don't need these results".  It either doesn't generate or ignores the result.  You can get it by using the `sink` modifier or by just not collecting the result.  (i.e. `for () {}` vs `my @a = for () {}`)

[20:28] <jnthn> Yes, map is sensitive to sink context too

[20:29] <uvtc> thanks, benabik .

[20:30] <benabik> jnthn: Because it returns an iterator that knows what to do with .sink ?

[20:30] <moritz> right

[20:31] * benabik wonders how many sink() calls there are in a P6 script.

[20:31] <benabik> (implicity, obv)

[20:32] <moritz> benabik: one for every statement in sink context

[20:32] <benabik> moritz: Does that cause much slowdown?

[20:32] <moritz> benabik: there haven't been any reports about major slowdowns

[20:32] <benabik> Hm.  it's a .?sink call, no?

[20:33] <moritz> actually .DEFINITE && .?sink

[20:33] <jnthn> benabik: Well, a lazy list, which can .sink

[20:34] <jnthn> If you're profiling and seeing sink is hugely expensive, note that it's the same thing as "oh eager is expensive!" :)

[20:34] <jnthn> Namely, that if you have an unevaluated list and it gets sunk, it's that which causes all of the work to be done to produce the list. 

[20:34] *** toddr_ joined
[20:36] <toddr_> Hi, I'm helping organize YAPC::NA this year. I was wondering if any of you had Perl 6 talks you were thinking about giving

[20:36] <toddr_> So far we've only got 1 submission from patrick.

[20:36] <moritz> I would if I could attend :(

[20:37] <moritz> but toddr_++ for asking

[20:37] <toddr_> moritz: We're reviving send a newb to YAPC this year. have you ever been?

[20:37] <moritz> toddr_: I've been to YAPC::EU

[20:37] <jnthn> toddr_: I'm expecting to make it to YAPC::NA this year

[20:38] <perigrin> moritz: so you're a YAPC::NA Newbie!

[20:38] <perigrin> :)

[20:38] <jnthn> Will submit talks...deadline isn't for a couple of weeks yet, no? :)

[20:38] <perigrin> you don't *have* to push the deadline

[20:38] <jnthn> Yes, but I dunno what to talk about yet :P

[20:38] <perigrin> and make toddr_ go crazy with stress and worry that he'll never get enough talks

[20:39] <perigrin> jnthn: considering I've asked speakers to give talks on the sunday before ... "your point?" 

[20:39] * toddr_ wonders how many people will be pressing the submit button 14 days and 11 hours from now...

[20:39] <perigrin> toddr_: *most* of them

[20:39] <toddr_> :D

[20:40] <toddr_> I haven't accepted any talks yet cause I'm sure the good ones are still to come. 

[20:40] <toddr_> Though I probably should accept RJBS's perl5.18 talk...

[20:40] <moritz> toddr_: I don't know what patrick wants to talk about, but so far his talks have always been excellent

[20:40] <uvtc> "Manufacturing local wormholes using Perl 6 and some elbow grease"

[20:41] <perigrin> uvtc: the Java port makes the elbow grease optional.

[20:41] <perigrin> jnthn++

[20:42] <toddr_> Patrick's talk is: "Perl 6 on the JVM‎"

[20:42] <uvtc> I'm looking forward to seeing Parrot and the JVM duke it out in a no-holds-barred grudge match.

[20:42] <benabik> perigrin: Given recent news, it's more that Java lets you use other people's elbow grease.

[20:42] * benabik bets the one with more funding and developers will do very well there.

[20:46] <perigrin> benabik: the best kind of optional ... 

[20:46] <perigrin> taking the "someone else did the work" option

[20:48] <benabik> perigrin: Was thinking more the "stealing other people's work" option.

[20:49] *** bowtie_ left
[20:50] <perigrin> depends on if you're good or great.

[20:50] <benabik> :-D

[20:51] <uvtc> I wonder what other language impl's have experienced when porting to the JVM... (library-wise)

[20:51] <nwc10> jnthn: selftest remains All tests successful.

[20:53] <dalek> nqp-jvm-prep: 3f793a9 | jnthn++ | / (3 files):

[20:53] <dalek> nqp-jvm-prep: Have a crack at fixing the 32-bit problem.

[20:53] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/3f793a925b

[20:54] <nwc10> gah! He moved them again

[20:54] <jnthn> ;)

[20:54] *** am0c left
[20:54] <benabik> nwc10: What are you doing that you're trying to catch up to jnthn?

[20:55] <jnthn> Provided me with latest results ;)

[20:57] <FROGGS> some sort of cluster, ehh?

[21:00] *** kivutar left
[21:02] *** bowtie joined
[21:06] <tadzik> prove -e 'java -cp .:bin:3rdparty/bcel/bcel-5.2.jar NQPJVM' t/nqp  273.68s user 15.02s system 145% cpu 3:18.05 total

[21:06] <tadzik> looks good :)

[21:13] *** SmokeMachine left
[21:14] *** drKreso joined
[21:22] <nwc10> jnthn: selftest remains All tests successful. Do your worst!

[21:22] *** drKreso left
[21:23] *** rindolf left
[21:26] *** bruges_ left
[21:27] <sorear> jnthn: will you be talking at ::na?

[21:28] <colomon> jnthn: will you be going to ::na?

[21:28] *** bruges joined
[21:28] <colomon> sorear, o/

[21:28] <jnthn> sorear: Provided I come (very likely) I'll speak

[21:28] <dalek> rakudo/nom: a72f82d | jnthn++ | src/Perl6/Grammar.pm:

[21:28] <dalek> rakudo/nom: Eliminate a no-longer-needed hack.

[21:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a72f82dabc

[21:28] <dalek> rakudo/nom: edeeaf3 | jnthn++ | src/Perl6/Grammar.pm:

[21:28] <dalek> rakudo/nom: Eliminate pir:: usage in Perl6::Grammar.

[21:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/edeeaf3199

[21:28] <dalek> rakudo/nom: 6ce3130 | jnthn++ | src/Perl6/Actions.pm:

[21:28] <dalek> rakudo/nom: Eliminate pir:: in Perl6::Actions.

[21:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ce3130a0d

[21:28] <dalek> rakudo/nom: 680d86a | jnthn++ | src/Perl6/ (2 files):

[21:28] <dalek> rakudo/nom: Turn some QAST::VM into QAST::Op.

[21:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/680d86acab

[21:28] <sorear> jnthn: did you see toddr_ asking earlier?

[21:28] <sorear> o/ colomon

[21:29] <jnthn> I've got the time for it marked out in my schedule already, it's "just" flight, hotel, etc.

[21:29] <jnthn> sorear: Yes, I said I'd submit :)

[21:29] <colomon> \o/

[21:29] * colomon has no idea if he will be able to afford the trip this year.

[21:34] <nwc10> bother. he just did :-)

[21:37] <toddr_> FYI, we've allocated rooms for a hackathon 2 days before and after the conference. Thanks to Bruce Gray for being the squeaky wheel!

[21:38] *** thou left
[21:39] *** thou joined
[21:43] <PerlJam> toddr_: "rooms"?

[21:43] *** census joined
[21:43] <diakopter> jnthn: that fixed make test

[21:43] <toddr_> PerlJam: Well technically 1 room on each day. Probably the same room.

[21:44] <sorear> that's Util?

[21:44] <toddr_> yes

[21:44] <toddr_> oh hey he's in the channel isn't he?

[21:44] <sorear> yes

[21:45] <sorear> i'm probably going to come but not speak

[21:45] *** slavik1 left
[21:47] <sorear> TimToady: do you have any perl 6 talk proposals you haven't submitted to toddr_ yet?

[21:47] *** drKreso joined
[21:48] <toddr_> And by toddr_, that would actually be http://www.yapcna.org/yn2013/newtalk

[21:48] <jnthn> diakopter: And...anything else? :)

[21:51] <diakopter> also make nqptest All tests successful.

[21:51] *** thou left
[21:51] <diakopter> make selftest says Error: Could not find or load main class NQPJVM

[21:51] <diakopter> o wait

[21:51] <diakopter> sec

[21:52] <diakopter> there, that's better.. seems to be working

[21:53] <sorear> i suspect texas in june may be above masak's autoignition temperature

[21:53] <colomon> there will be air conditioning, right?

[21:53] *** census left
[21:54] <PerlJam> Austin isn't that bad.  Not like Houston or anywhere along the coast there the humidity is high

[21:55] <benabik> "It's a dry heat"

[21:55] <benabik> "Yeah, but it's still hot"

[21:55] <diakopter> jnthn: make selftest all passed

[21:55] *** japhb_ joined
[21:59] <jnthn> diakopter: On the machine where it was formally ./ing like mad?

[21:59] <jnthn> *previously

[21:59] <PerlJam> benabik: it's not about how hot it *is*, but how hot you *feel*  :)

[21:59] <diakopter> jnthn: yes

[22:00] <jnthn> diakopter: yay

[22:00] <diakopter> setting up p6eval now for it now..

[22:00] * jnthn doesn't really do hot weather :)

[22:00] <jnthn> But if it's air con'd indoors, I'll cope fine :)

[22:00] <colomon> ditto

[22:00] <drKreso> Hi

[22:01] <PerlJam> temps last year in Austin for early June were 70-90 degrees F each day.

[22:02] <sorear> 7,090 degrees F each day

[22:02] <drKreso> I have issues with MiniDBI (OSX) - "dyld: lazy symbol binding failed: Symbol not found: _dlLoadLibrary"

[22:03] <jnthn> r: sub proper-temps(@t) { for @t { say ($_ - 32) / 2; } }; proper-temps(70, 90)

[22:03] <p6eval> rakudo 357e60: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'proper-temps' will never work with argument types (Int, Int) (lines 1, 1)␤    Expected: :(@t)␤»

[22:03] <jnthn> r: sub proper-temps(*@t) { for @t { say ($_ - 32) / 2; } }; proper-temps(70, 90)

[22:03] <p6eval> rakudo 357e60: OUTPUT«19␤29␤»

[22:03] *** kaare__ left
[22:03] <jnthn> Ah, that's not awful...

[22:05] <sorear> or maybe that's 70-90 degrees F *per day*, as in a rate of temperature climb

[22:05] <quester> r: sub correct-temps(*@t) { for @t { say ($_ - 32) / (9/5); } }; correct-temps(70, 90)

[22:05] <p6eval> rakudo 357e60: OUTPUT«21.111111␤32.222222␤»

[22:05] <PerlJam> sorear: it doesn't get *that* hot :)

[22:06] <sorear> If you can't smelt iron on the sidewalks, it's not Texas

[22:07] <jnthn> quester: Dang, that made it worse

[22:08] <quester> Well, yes, but only slightly...

[22:08] <sorear> will have to see what the temps are like where I live come june

[22:10] <toddr_> sorear: yeah I'm hoping for cool. We've got an outdoor dinner planned for the banquet

[22:16] *** snearch joined
[22:16] *** snearch left
[22:21] *** toddr_ left
[22:33] <dalek> nqp-jvm-prep: 0ed8248 | jnthn++ | src/org/perl6/nqp/sixmodel/reprs/P6Opaque (2 files):

[22:33] <dalek> nqp-jvm-prep: Avoid some unrequired backing type generation.

[22:33] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/0ed8248789

[22:33] <dalek> nqp-jvm-prep: a463f0f | jnthn++ | / (5 files):

[22:33] <dalek> nqp-jvm-prep: Start associating MethodHandles with CodeRefs.

[22:33] <dalek> nqp-jvm-prep: 

[22:33] <dalek> nqp-jvm-prep: MethodHandles are one of the things at the center of invokedynamic, so

[22:33] <dalek> nqp-jvm-prep: this is the first tiny step towards being able to use that.

[22:33] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/a463f0f14b

[22:38] *** census joined
[22:46] <dalek> nqp-jvm-prep: a9de50b | jnthn++ | / (2 files):

[22:46] <dalek> nqp-jvm-prep: Curry the compilation unit invocant.

[22:46] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/a9de50b840

[22:46] <dalek> nqp-jvm-prep: 1572868 | jnthn++ | src/org/perl6/nqp/runtime/Ops.java:

[22:46] <dalek> nqp-jvm-prep: Start using the method handle for invocation.

[22:46] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/1572868cc3

[22:46] <dalek> nqp-jvm-prep: 03318f3 | jnthn++ | / (6 files):

[22:46] <dalek> nqp-jvm-prep: Eliminate now-unused dispatch switch table.

[22:46] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/03318f3d24

[22:46] *** am0c joined
[22:46] *** _jaldhar joined
[22:49] *** saeidw joined
[22:53] *** bluescreen100 joined
[22:53] *** uvtc left
[22:54] *** mtk left
[22:57] *** bluescreen10 left
[22:57] *** mtk joined
[22:57] *** census left
[22:58] <japhb_> jnthn, The comment on line 2391 of  lib/QAST/JASTCompiler.nqp starts with 'Also, ' ... left over from previous version of comment

[23:01] <jnthn> Thanks, fixed.

[23:01] <japhb_> np

[23:02] <jnthn> ...but the commit message vanished here. :(

[23:03] *** bluescreen100 left
[23:09] *** slavik1 joined
[23:14] <drKreso> dyncall not binding correctly - sh configure -target-x64  does not help (option does not exist). git  64bit OSX

[23:14] *** benabik left
[23:14] <jnthn> drKreso: What erorr are you getting?

[23:15] <drKreso> jnthn: azy symbol binding failed: Symbol not found: _dlLoadLibrary similar to https://github.com/jnthn/zavolaj/issues/16

[23:17] <jnthn> It looks like a - too few

[23:18] <jnthn> Try --target-x64

[23:20] <drKreso> jnthn: so in nqp/3rdparty/dyncall sh configure --target-x64 … and then what do i need to "make"? 

[23:22] <drKreso> jnthn: Now it says "guess operating system darwin" which I guess is OK. But what do I need to rebuild. Make only in this folder gives same result

[23:23] <jnthn> drKreso: Need to then rebuild the nativecall dynops lib

[23:23] <jnthn> If you do make clean in nqp directory first

[23:23] <jnthn> Then do make in dyncall, then go back to NQP directory and do make there, it should do all that is needed.

[23:24] <drKreso> make clean

[23:24] <drKreso> make: *** No rule to make target `clean'.  Stop.

[23:24] <jnthn> In the NQP directory?

[23:24] <spider-mario> hm, do you think it would be useful to have a script build rakudo periodically and graph its performances over time or something?

[23:24] <jnthn> Or in the dyncall one?

[23:24] <spider-mario> do we have anything like that currently?

[23:24] <drKreso> in nqp

[23:24] <jnthn> drKreso: Oh...do you have no Makefile there?

[23:24] <drKreso> apparently no

[23:25] <drKreso> i used that git clean i think

[23:25] <jnthn> ah

[23:25] <jnthn> But if you want to try and do this as a patch rather than as a hack...

[23:25] <jnthn> See Configure.pl

[23:25] <jnthn> Around line 119

[23:25] <jnthn> It looks at what we're building on

[23:26] <jnthn> Could add a branch for OSX

[23:26] <jnthn> If this is applicable to all OSX...

[23:26] * jnthn doesn't know much about the platform, sorry

[23:26] *** kborer left
[23:27] <jnthn> That's where we decide what flags to give dyncall's configure, anyway

[23:27] *** saeidw left
[23:27] <donaldh> drKreso: is this the same issue ? https://github.com/jnthn/zavolaj/issues/16

[23:28] * donaldh has been meaning to provide a patch for that

[23:29] <drKreso> donaldh: Yes, same issue

[23:29] <drKreso> jnthn: so how line 119 needs to look for me?

[23:32] <jnthn> drKreso: Well, I think you maybe want to add an elsif, before the else around line 127. I don't know what $^O looks like, but I guess you can perl -E 'say $^O' to find out :)

[23:34] <jnthn> donaldh: Do you know if it's specific to 64-bit, or if it's an OSX issue in general?

[23:34] *** PacoAir left
[23:34] <donaldh> jnthn: not sure. I suspect it's an OSX issue. Tries to be too clever with arch

[23:36] *** PacoAir joined
[23:37] <drKreso> donaldh: I found this is previous irc sessions : I _think_ it's because dyncall is trying to auto-detect the architecture and OS X lies., `uname -p` says i386, but `uname -m` says x86_64 Not sure if it matters?

[23:38] <donaldh> sure does

[23:38] <donaldh> $^O returns 'darwin'

[23:38] *** spider-mario left
[23:39] *** xenoterracide joined
[23:41] <donaldh> wow, parrot::arch name is set to darwin-thread-multi-2level

[23:42] <geekosaur> uname output isn't actually standardized. I think freebsd does the same interpretation of it

[23:42] <geekosaur> donaldh, that's taken from perl5, I believe

[23:43] <drKreso> donaldh: So for mine dirty purpose of making it work, can I change line 128 to  system_or_die('cd 3rdparty/dyncall && sh configure --target-x64'); and hope for the best?

[23:44] *** ikrs joined
[23:44] *** ikrs left
[23:44] <donaldh> drKreso: just checking

[23:44] *** ikrs joined
[23:45] <donaldh> drKreso: yes, that seems to work

[23:46] *** spider-mario joined
[23:49] <dalek> rakudo/nom: 2303d19 | jnthn++ | src/Perl6/World.pm:

[23:49] <dalek> rakudo/nom: Some pir:: => nqp:: in Perl6::World.

[23:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2303d1944c

[23:49] <dalek> rakudo/nom: 6f5cfc1 | jnthn++ | src/Perl6/World.pm:

[23:49] <dalek> rakudo/nom: Eliminate some property usages.

[23:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6f5cfc14eb

[23:49] <dalek> rakudo/nom: 40069f9 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[23:49] <dalek> rakudo/nom: Some pir:: => nqp:: in BOOTSTRAP.

[23:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/40069f9ae8

[23:50] <dalek> nqp-jvm-prep: 22ac999 | jnthn++ | src/org/perl6/nqp/runtime/ (2 files):

[23:50] <dalek> nqp-jvm-prep: Move much from invoke into CallFrame constructor.

[23:50] <dalek> nqp-jvm-prep: 

[23:50] <dalek> nqp-jvm-prep: No functional changes here, just a refactor.

[23:50] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/22ac999d56

[23:51] <drKreso> donaldh: I am still getting (afer configure, make, make install, deleting site, bootstrapping panda and panda install MiniDBI) - Symbol not found: _dlLoadLibrary

[23:51] <drKreso>   Referenced from: /Users/kbojcic/dev/nuke/rakudo/install/lib/parrot/4.10.0-devel/dynext/nqp_dyncall_ops.bundle

[23:52] <jnthn> Time for some sleep; 'night, #perl6

[23:52] <diakopter> wait

