[00:02] *** dansamo joined
[00:06] <japhb__> jnthn: excellent.

[00:09] *** dmol left
[00:10] *** dansamo left
[00:12] *** Psyche^ left
[00:12] *** risou_awy is now known as risou

[00:12] *** Psyche^ joined
[00:15] *** ajr_ left
[00:25] *** benabik joined
[00:30] *** risou is now known as risou_awy

[00:42] *** rurban joined
[00:44] *** benabik left
[00:45] <dalek> nqp: 183b8af | dwarring++ | examples/rubyish/ (2 files):

[00:45] <dalek> nqp: rubyish =begin .. =end multiline comments. simplify slurpy hashes

[00:45] <dalek> nqp: review: https://github.com/perl6/nqp/commit/183b8af658

[00:46] *** rurban left
[00:56] <dalek> rakudo/nom: cf0b0ca | jonathan++ | src/vm/jvm/core/Threading.pm:

[00:56] <dalek> rakudo/nom: Better enforce Exception object coercion.

[00:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cf0b0ca163

[00:56] <dalek> rakudo/nom: 3208450 | jonathan++ | src/vm/jvm/core/Threading.pm:

[00:56] <dalek> rakudo/nom: Use Promise::Keeper in Channel.

[00:56] <dalek> rakudo/nom: 

[00:56] <dalek> rakudo/nom: To be more robust.

[00:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3208450d36

[00:56] <dalek> rakudo/nom: 9d54481 | jonathan++ | src/vm/jvm/core/Threading.pm:

[00:56] <dalek> rakudo/nom: Add Subscribable, and initial publish bits.

[00:56] <dalek> rakudo/nom: 

[00:56] <dalek> rakudo/nom: This is the first piece towards enabling reactive programming with

[00:56] <dalek> rakudo/nom: push-collections, a la Rx. Many combinators to come.

[00:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9d544811ea

[00:56] <dalek> roast: b9d4b05 | jonathan++ | S17-concurrency/subscribable.t:

[00:56] <dalek> roast: Add basic Subscribable tests.

[00:56] <dalek> roast: review: https://github.com/perl6/roast/commit/b9d4b056eb

[00:59] <jnthn> 'night

[01:02] *** rurban joined
[01:11] *** benabik joined
[01:12] <dalek> p6-pb: 5f9f01b | (Geoffrey Broadwell)++ | / (2 files):

[01:12] <dalek> p6-pb: Add PB::Binary::WireTypes with tests

[01:12] <dalek> p6-pb: 

[01:12] <dalek> p6-pb: Put WireType enumeration in a common place, with tests to make sure the

[01:12] <dalek> p6-pb: values don't accidentally change (they're part of the PB standard).

[01:12] <dalek> p6-pb: review: https://github.com/samuraisam/p6-pb/commit/5f9f01bac4

[01:12] <dalek> p6-pb: ad86091 | (Geoffrey Broadwell)++ | / (4 files):

[01:12] <dalek> p6-pb: Switch to using PB::Binary::WireTypes

[01:12] <dalek> p6-pb: 

[01:12] <dalek> p6-pb: Move code and tests using either WIRE_TYPE_* or hard-coded numbers to

[01:12] <dalek> p6-pb: the WireType::* enum instead.

[01:12] <dalek> p6-pb: review: https://github.com/samuraisam/p6-pb/commit/ad860913c3

[01:17] *** PacoAir left
[01:20] *** Rotwang left
[01:21] *** PacoAir joined
[01:33] *** Vendethi_ joined
[01:38] *** Vendethi_ left
[01:39] *** dwarring joined
[01:40] *** colomon left
[01:41] <dwarring> has the module smoke server gone out? I've been using http://97.95.33.142:3001/report

[01:41] *** colomon joined
[01:41] <dwarring> no results since 25th Oct

[01:46] <colomon> panda has been broken

[02:02] <colomon> r: say "TH̘E􏿽xCD􏿽x84􏿽xCC􏿽x89􏿽xCD􏿽x96 ͠P̯͍̭O̚​N̐Y̡ H􏿽xCD􏿽xA8􏿽xCD􏿽x8A􏿽xCC􏿽xBD􏿽xCC􏿽x85􏿽xCC􏿽xBE􏿽xCC􏿽x8E􏿽xCC􏿽xA1􏿽xCC􏿽xB8􏿽xCC􏿽xAA􏿽xCC􏿽xAFE􏿽xCC􏿽xBE􏿽xCD􏿽x9B􏿽xCD􏿽xAA􏿽xCD􏿽x84􏿽xCC􏿽x80􏿽xCC􏿽x81􏿽xCC􏿽xA7􏿽xCD􏿽x98􏿽xCC􏿽xAC􏿽xCC􏿽xA9 􏿽xCD􏿽xA7􏿽xCC􏿽xBE􏿽xCD􏿽xAC􏿽xCC􏿽xA7􏿽xCC􏿽xB6􏿽xCC􏿽xA8􏿽xCC􏿽xB1􏿽xCC􏿽xB9􏿽xCC􏿽xAD􏿽xCC􏿽xAFC􏿽xCD􏿽xAD􏿽xCC􏿽x8F􏿽xCD􏿽xA5􏿽xCD􏿽xAE􏿽xCD􏿽x9F􏿽xCC􏿽xB7􏿽xCC􏿽x99􏿽xCC􏿽xB2􏿽xCC􏿽x9D􏿽xCD􏿽x96Oͮ͏̮̪̝͍M􏿽xCD􏿽x8A􏿽xCC􏿽x92􏿽xCC􏿽x9A􏿽xCD􏿽xAA􏿽xCD􏿽xA9􏿽xCD􏿽xAC􏿽xCC􏿽x9A􏿽xCD􏿽x9C􏿽xCC􏿽xB2􏿽xCC􏿽x96E􏿽xCC􏿽x91􏿽xCD􏿽xA9􏿽xCD􏿽x8C􏿽xCD􏿽x9D􏿽xCC􏿽xB4􏿽xCC􏿽x9F􏿽xCC􏿽x9F􏿽xCD􏿽x99􏿽xCC􏿽x9ES􏿽xCD􏿽xAF􏿽xCC􏿽xBF􏿽xCC􏿽x94􏿽xCC􏿽xA8􏿽xCD􏿽x80􏿽xCC􏿽xA5􏿽xCD􏿽x85􏿽xCC􏿽xAB􏿽xCD􏿽x8E􏿽xCC􏿽xAD".ords

[02:02] <camelia> rakudo-parrot 9d5448, rakudo-jvm 882e33: OUTPUT«84 72 792 69 836 777 854 32 864 80 815 845 813 79 794 8203 78 784 89 801 32 72 872 842 829 773 830 782 801 824 810 815 69 830 859 874 836 768 769 807 856 812 809 32 871 830 876 807 822 808 817 825 813 815 67 877 783 869 878 863 823 793…»

[02:02] <dwarring> heh

[02:04] <japhb__> What is with the pony, anyway?  I mean, I remember the "you can't parse HTML with regexes" rant on SO that ended with "Tony the pony he comes", but where did *that* come from?

[02:04] * colomon has no clue, but was looking for a wicked Unicode string to use as a test case for work.

[02:04] <japhb__> That qualifies.

[02:07] <japhb__> I tested PB serialization of strings with just two: an ASCII-only one, and one that contained one-, two-, and three-byte Unicode codepoint values.

[02:07] <japhb__> I figure if those both roundtrip, there's half the battle right there.

[02:07] <colomon> That's essentially what I'm looking to do here, too.

[02:08] <japhb__> Oh interesting!  When I switched screens (ctrl-A ctrl-A) to another screen and back, the rendering of your test string *changed*.

[02:08] <colomon> serialization via the STEP file format.

[02:10] * japhb__ is trying to think of a properly sixish and yet still performant and relatively space-efficient way to represent messages in decoded form in memory

[02:12] <colomon> http://insidescoopsf.sfgate.com/blog/2013/10/31/chicago-restaurant-dresses-up-as-alinea-wins-halloween-2013/

[02:13] *** risou_awy is now known as risou

[02:20] <colomon> BTW, that pony string in STEP encoding (according to my code I"m testing): TH\X2\0318\X0\E\X2\0344\X0\\X2\0309\X0\\X2\0356\X0\ \X2\0360\X0\P\X2\032F\X0\\X2\034D\X0\\X2\032D\X0\O\X2\031A\X0\\X2\200B\X0\N\X2\0310\X0\Y\X2\0321\X0\ 

[02:20] <colomon> H\X2\0368\X0\\X2\034A\X0\\X2\033D\X0\\X2\0305\X0\\X2\033E\X0\\X2\030E\X0\\X2\0321\X0\\X2\0338\X0\\X2\032A\X0\\X2\032F\X0\E\X2\033E\X0\\X2\035B\X0\\X2\036A\X0\\X2\0344\X0\\X2\0300\X0\\X2\0301\X0\\X2\0327\X0\\X2\0358\X0\\X2\032C\X0\\X2\0329\X0\ 

[02:20] <colomon> \X2\0367\X0\\X2\033E\X0\\X2\036C\X0\\X2\0327\X0\\X2\0336\X0\\X2\0328\X0\\X2\0331\X0\\X2\0339\X0\\X2\032D\X0\\X2\032F\X0\C\X2\036D\X0\\X2\030F\X0\\X2\0365\X0\\X2\036E\X0\\X2\035F\X0\\X2\0337\X0\\X2\0319\X0\\X2\0332\X0\\X2\031D\X0\\X2\0356\X0\O\X2\036E\X0\\X2\034F\X0\\X2\032E\X0\\X2\032A\X0\\X2\031D\X0\\X2\034D\X0\M\X2\034A\X0\\X2\0312\X0\\X2\031A\X0\\X2\036A\X0\\X2\0369\X0\\X2\036C\X0\\X2\031A\X0\\X2\035C\X0\\X2\0332\X0\\X2\0316\X0\E\X

[02:20] <colomon> 11\X0\\X2\0369\X0\\X2\034C\X0\\X2\035D\X0\\X2\0334\X0\\X2\031F\X0\\X2\031F\X0\\X2\0359\X0\\X2\031E\X0\S\X2\036F\X0\\X2\033F\X0\\X2\0314\X0\\X2\0328\X0\\X2\0340\X0\\X2\0325\X0\\X2\0345\X0\\X2\032B\X0\\X2\034E\X0\\X2\032D\X0\

[02:22] <colomon> kind of ugly, I guess

[02:22] <japhb__> uh, yeah.

[02:23] <colomon> The good news is, it seems to work.

[02:23] <colomon> assuming my test isn't broken.  ;)

[02:24] <japhb__> Well, there is that.

[02:26] <japhb__> r: say Nil.^mro

[02:26] <camelia> rakudo-parrot 9d5448, rakudo-jvm 882e33: OUTPUT«Nil (Iterator) (Iterable) (Cool) (Any) (Mu)␤»

[02:30] *** risou is now known as risou_awy

[02:35] *** rurban left
[02:44] <colomon> okay, scary bug.  One version of the STEP translator handled the unicode well.  The other version, instead of converting to utf32 and writing out the corresponding codes (like \X2\033D\X0\), just wrote out the utf8 bytes.  The test passed because it round-tripped perfectly, but the actual format of the STEP file it work was quite illegal.  :\

[02:45] *** fridim_ joined
[03:04] *** tobyink left
[03:14] *** SamuraiJack joined
[03:17] <japhb__> OK, I need to carry around a lot of meta information about all the attributes of each message class.  I'm not sure of the best way to do this.  One thought is to subclass ClassHOW so that I can build message classes using a subclass of Attribute that has extra storage, and then adding some trait_mod:<is> multis for the new info.

[03:17] <japhb__> I don't know if that "Just Works", however.

[03:18] <japhb__> If it does work, it feels like the most sixish way of doing it.

[03:19] <japhb__> Anyone have any better ideas, before I run off and hack some crazy prototype?

[03:22] *** johnny5_ left
[03:25] <timotimo> i'm not sure if it helps, but i've done some class generation at compile time in my ADT module

[03:28] *** rurban joined
[03:29] *** johnny5_ joined
[03:37] <dwarring> Tony the pony: http://msmvps.com/blogs/jon_skeet/archive/2009/11/02/omg-ponies-aka-humanity-epic-fail.aspx

[04:05] *** cognominal__ left
[04:06] *** cognominal__ joined
[04:14] *** risou_awy is now known as risou

[04:20] <BenGoldberg> goodnight

[04:24] *** BenGoldberg left
[04:33] *** risou is now known as risou_awy

[04:52] *** rurban left
[04:53] *** preflex_ joined
[04:53] *** ChanServ sets mode: +v preflex_

[04:53] *** preflex left
[04:54] *** preflex_ is now known as preflex

[05:02] *** odoacre joined
[05:05] *** grondilu left
[05:15] <dwarring> rn: say "Les Misérables".split("").reverse.reverse.join

[05:15] <camelia> rakudo-parrot 9d5448, rakudo-jvm 882e33, niecza v24-98-g473bd20: OUTPUT«Les Misérables␤»

[05:15] <dwarring> :)

[05:16] <dwarring> rn: say 0.3 == 3/10

[05:17] <camelia> rakudo-parrot 9d5448, rakudo-jvm 882e33, niecza v24-98-g473bd20: OUTPUT«True␤»

[05:17] <dwarring> :) :)

[05:23] *** rurban joined
[05:28] <retupmoca> rn: say "Les Misérables".comb.reverse.join

[05:28] <camelia> rakudo-parrot 9d5448, rakudo-jvm 882e33, niecza v24-98-g473bd20: OUTPUT«selbarésiM seL␤»

[05:32] *** rurban left
[05:36] *** djanatyn left
[05:37] *** Tene joined
[05:37] *** Tene left
[05:37] *** Tene joined
[05:38] *** djanatyn joined
[05:41] *** xalbo joined
[05:42] <dwarring> rn: my $s = "Mise" ~ chr(0x301) ~ "rables"; say $s; say $s.comb.reverse.join("")

[05:42] <camelia> rakudo-parrot 9d5448, rakudo-jvm 882e33, niecza v24-98-g473bd20: OUTPUT«Mise􏿽xCC􏿽x81rables␤selbar􏿽xCC􏿽x81esiM␤»

[05:43] * dwarring needs normalization I guess

[05:47] *** logie joined
[05:54] *** lue left
[05:59] <TimToady> needs NFG

[06:09] *** logie left
[06:15] *** risou_awy is now known as risou

[06:25] *** kaleem joined
[06:32] *** rurban joined
[06:33] *** risou is now known as risou_awy

[06:36] *** rurban left
[06:57] *** darutoko joined
[06:59] *** denis_boyun joined
[07:14] *** nnunley left
[07:15] *** araujo left
[07:31] *** tobyink joined
[07:33] *** rurban joined
[07:37] *** rurban left
[07:37] *** tobyink left
[07:40] <masak> mooring, #perl6

[07:49] <FROGGS> morning

[07:52] *** xinming left
[07:53] *** denis_boyun_ joined
[07:54] *** denis_boyun left
[08:02] *** tobyink joined
[08:05] *** muixirt joined
[08:05] <muixirt> good morning

[08:07] <muixirt> tried to build the recent R* package but it failed because of icu issues

[08:07] <muixirt> how do I fix that?

[08:08] <moritz> start by nopasting the error messages

[08:08] <moritz> muixirt: do you happen to use a newish Ubuntu?

[08:09] <muixirt> moritz: yes

[08:09] <moritz> muixirt: http://irclog.perlgeek.de/perl6/2013-10-25#i_7763459 describes a workaround

[08:10] *** nnunley joined
[08:14] *** nnunley left
[08:16] *** risou_awy is now known as risou

[08:16] <hoelzro> доброе утро, #perl6!

[08:17] <muixirt> thanks moritz that helped

[08:19] *** zakharyas joined
[08:20] <masak> http://www.aaronbeppu.com/blog/2013-10-30-feel-better-bot-update.html -- this reminded me of hugme. :)

[08:20] * masak hugs hugme :)

[08:20] <muixirt> first I thought parrot was the guilty part

[08:26] *** sqirrel joined
[08:27] *** lizmat joined
[08:32] *** risou is now known as risou_awy

[08:33] *** rurban joined
[08:35] *** jaffa4 joined
[08:39] *** PacoAir left
[08:40] *** PacoAir joined
[08:42] *** lizmat_ joined
[08:43] *** denis_boyun_ left
[08:44] *** lizmat left
[08:47] *** PacoAir left
[08:51] *** BooK_ joined
[08:52] *** pecastro_ joined
[08:52] *** ingyfoo joined
[08:53] *** cxreg2 joined
[08:54] *** robins joined
[08:54] *** FOAD_ joined
[08:54] *** dmol joined
[08:56] *** szbalint_ joined
[08:58] *** FOAD left
[08:58] *** pecastro left
[08:58] *** DarthGandalf left
[08:58] *** robinsmidsrod left
[08:58] *** ggoebel left
[08:58] *** tadzik left
[08:58] *** BooK left
[08:58] *** cxreg left
[08:58] *** szbalint left
[08:58] *** ingy left
[08:58] *** FOAD_ is now known as FOAD

[08:59] *** rurban left
[08:59] *** DarthGandalf joined
[09:00] *** xinming joined
[09:01] *** robins is now known as robinsmidsrod

[09:05] *** tadzik joined
[09:16] *** isBEKaml joined
[09:19] <FROGGS> moritz / muixirt: I filed a bug report at https://bugs.launchpad.net/ubuntu/+source/icu/+bug/1247024

[09:19] <isBEKaml> hey guys, I ran into an issue with error reporting today when I was building nqp jvm: https://gist.github.com/anonymous/7262942

[09:20] <isBEKaml> It's funny because I'm still building stage1, where did stage2 come from? The directory doesn't even exist!

[09:22] <FROGGS> stage2 should be in nqp/src

[09:22] <FROGGS> nvm, the path has changed

[09:25] <isBEKaml> Should it be coming from those bootstrapped jars in src/vm/jvm/stage0? If that's the case, directory reported are all wrong. 

[09:27] <FROGGS> the reported dir could be reported wrongly, because the shipped stage0 was a stage2 of somebody else

[09:28] <isBEKaml> yes, that's what I think. 

[09:28] <FROGGS> still we need to cope with the error

[09:29] <FROGGS> trying now to build an nqp@jvm

[09:30] <isBEKaml> that'll build fine if you're using the shipped Configure.pl and makefiles. I'm using ant since I was not able to install nmake last I tried. 

[09:30] *** lizmat_ is now known as lizmat

[09:30] <isBEKaml> I'm building the ant script as I poke around in nqp. :-)

[09:31] <isBEKaml> ant -> http://ant.apache.org

[09:32] <isBEKaml> the only way to reproduce this would be to make some trivial change in $(J_STAGE1)/$(CORE_SETTING_JAR) so that it fails. Then the stage0 jar will throw this error. 

[09:38] *** woolfy joined
[09:40] <FROGGS> ahh

[09:41] <FROGGS> yes, it built fine

[09:41] <FROGGS> maybe moritz an explain the changes he made to the build system better

[09:42] <FROGGS> I must go now and will be here in an hour or so

[09:44] *** lizmat_ joined
[09:44] <isBEKaml> Sure, thank you. 

[09:46] *** lizmat left
[09:46] *** woolfy left
[09:46] *** Rotwang joined
[09:51] *** tobyink left
[09:57] *** xinming_ joined
[09:57] * jnthn -> salzburg for APW

[10:01] *** xinming left
[10:02] <isBEKaml> jnthn: salty fortress? :-)

[10:05] *** tobyink joined
[10:10] * lizmat_ is off to see more Salzburg sights

[10:17] *** risou_awy is now known as risou

[10:21] *** woosley left
[10:27] *** isBEKaml left
[10:28] <masak> isBEKaml: isn't de:"burg" in this sense en:"city" rather than en:"fortress"?

[10:28] <masak> I mean, en:"citizen" is de:"burger", so...

[10:28] *** moukeddar joined
[10:30] <masak> moukeddar! \o/

[10:32] *** preflex left
[10:33] *** risou is now known as risou_awy

[10:34] *** preflex joined
[10:34] *** ChanServ sets mode: +v preflex

[10:37] *** tobyink left
[10:45] *** spider-mario joined
[10:46] *** lizmat_ left
[10:47] *** amkrankr1leuen is now known as amkrankruleuen

[10:47] *** amkrankruleuen left
[10:47] *** amkrankruleuen joined
[10:53] *** kivutar joined
[11:16] *** darutoko left
[11:17] <hoelzro> class attributes are implicitly ro, right?

[11:18] <hoelzro> oh, wait

[11:18] <hoelzro> I think I misunderstood

[11:18] <hoelzro> 'is rw' only applies to the generated methods

[11:18] * hoelzro thought he found a bug

[11:22] <masak> hoelzro: right -- the attribute slots are 'rw' by default. accessors are 'readonly' by default.

[11:23] <hoelzro> why is the ro trait named 'readonly'? why not 'ro' to be more consistent with 'rw'?

[11:23] <hoelzro> hmm

[11:24] <hoelzro> I presume that return-rw does something with containers to implements its semantics?

[11:25] * hoelzro muses on how to implement triggers when using return-rw for attribute accessors

[11:31] <masak> hoelzro: the official party line is that 'readonly' is more Huffmanly correct than 'ro'.

[11:36] <moritz> readonly is the default for attributes and parameters, so there's not much point shortening it

[11:36] <moritz> when would you even write it explicitly?

[11:37] <masak> I, personally, never use it.

[11:47] *** benabik left
[11:48] <mathw> it makes sense. read-write is the exceptional circumstance, read-only is the one you almost never need to explicitly say

[11:49] <masak> the only thing that nags me about it is that people keep asking "why isn't is written 'ro'?", and so it becomes a FAQ.

[11:49] <masak> and the only reason it's a FAQ rather than being spelled 'ro' is some stubborn notion of Huffmanliness.

[11:50] <huf> you cant have it ro! it'll upset your stomach!

[11:50] <huf> cook it first

[11:50] <mathw> personally I think it's easier to figure out what 'rw' means than 'ro'

[11:50] <mathw> 'is ro', what's ro? my brain goes

[11:50] <mathw> probably because I've watched too much Star Trek

[11:51] *** awwaiid joined
[11:53] <masak> 'is ro' also has prior art in Moose.

[11:55] *** daniel-s__ is now known as daniel-s

[11:59] *** rindolf joined
[12:13] *** Rotwang left
[12:17] *** risou_awy is now known as risou

[12:18] *** isBEKaml joined
[12:18] *** jaffa4 left
[12:18] *** kaleem left
[12:19] <isBEKaml> masak: maybe. I just picked it directly off wikipedia. Also, de:salzig means en:salty. :-)

[12:20] *** pippo joined
[12:22] <pippo> nr: my @array; for ^20_000 {@array[$_]=$_}; say @array

[12:22] <camelia> rakudo-parrot 9d5448, rakudo-jvm 882e33, niecza v24-98-g473bd20: OUTPUT«0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73…»

[12:22] <pippo> nr: my @array; for ^20_000 {@array[$_]=$_}; say @array.join(',')

[12:22] <camelia> rakudo-parrot 9d5448, rakudo-jvm 882e33, niecza v24-98-g473bd20: OUTPUT«0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73…»

[12:22] <pippo> nr: my @array; for ^20_000 {@array[$_]=$_}; say @array.join(',').split(',')

[12:23] <camelia> rakudo-parrot 9d5448, rakudo-jvm 882e33: OUTPUT«(timeout)»

[12:23] <camelia> ..niecza v24-98-g473bd20: OUTPUT«0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 8…»

[12:26] <pippo> There is something wrong with that "split" on rakudo jvm. It eats up too much memory and takes to much time 

[12:34] *** risou is now known as risou_awy

[12:38] *** moukeddar left
[12:38] <masak> isBEKaml: also, de:salz means en:salt :)

[12:39] <masak> isBEKaml: hence my pun about Säureburg and Baseburg.

[12:39] <isBEKaml> masak: yessir :-)

[12:40] <isBEKaml> sauerburg :)

[12:40] <masak> autopun-ish: https://twitter.com/schuyler/status/396167385868021761

[12:41] <isBEKaml> ehh, who is cmasak and masak on twitter? 

[12:41] <arnsholt> masak: That's awesome! =D

[12:43] <isBEKaml> ehh, I kinda vaguely get it - given that their entire vocabulary is 23 words or so. :P

[12:45] <masak> isBEKaml: no, that's not it.

[12:45] <masak> isBEKaml: maybe https://en.wikipedia.org/wiki/Snowclone will help elucidate the matter.

[12:46] <isBEKaml> masak: then I read the wikipedia page on it and the first sentence gave it away. :P

[12:46] <masak> the tweet is more of a self-referential snowclone than an autopun, actually.

[12:46] <isBEKaml> yeah, they have something like 50 words for snow. each adding to the other. 

[12:47] <isBEKaml> so it's difficult to think objectively about any one thing in Inuit/Eskimo language. 

[12:48] <isBEKaml> I was looking at this and then it fell in: https://en.wikipedia.org/wiki/Eskimo_words_for_snow

[12:48] <masak> "Snowclones are memechés, if you will: meme-ified clichés with the operative words removed, leaving spaces for you or the masses to Mad Lib their own versions."

[12:49] <masak> isBEKaml: I don't find it very well-defined to talk about "N words for <anything>" in a strongly agglutinative language.

[12:50] <masak> it's about as useful as saying "C has 93,741 ways to index the first element of an array".

[12:50] *** denis_boyun joined
[12:51] <isBEKaml> yeah, that's what I meant when I said "each adding to the other" about their words for snow. :-)

[12:52] <isBEKaml> Okay, now back to lurking mode - fiddling with nqp. :D

[12:55] *** jaffa4 joined
[12:57] <arnsholt> IIRC serious people have actually looked into how many distinct roots various Inuit languages have for snow

[12:57] <arnsholt> It varies between languages, obviously. But apparently it can be framed in a way that makes sense for the languages

[12:58] <masak> roots would be more informative. :)

[13:00] <arnsholt> Yeah. As you said, word isn't a very useful entity in polysynthetic languages =)

[13:00] <arnsholt> At least not in this context

[13:00] <arnsholt> If we're discussing the boundaries between morphology and syntax, they're very interesting indeed =D

[13:01] *** SmokeMachine joined
[13:03] *** logie joined
[13:04] <pippo> should'nt this be linear in time with the number of cycles ? "my @array; for ^20_000 {@array[$_]=$_}; say @array.join(',').split(',')"

[13:06] <masak> pippo: yes, it should.

[13:06] <masak> pippo: maybe there is a Schlemiel in there somewhere.

[13:07] <pippo> in rakudo jvm it is not. the above takes far more time than this: "my @array; for ^41 {for ^501 {@array[$_]=$_}; say @array.join(',').split(',')"}

[13:07] *** rurban joined
[13:10] <pippo> masak: what is a "Schlemiel"

[13:11] <isBEKaml> bungler

[13:11] *** rurban left
[13:13] <masak> pippo: "Who is Shlemiel? He's the guy in this joke [...]" http://www.joelonsoftware.com/articles/fog0000000319.html

[13:13] <[Coke]> lizmat++

[13:13] <[Coke]> (mixy)

[13:14] *** ajr joined
[13:14] *** ajr is now known as Guest18596

[13:15] <pippo> masak: are you referring to me?

[13:15] *** Guest18596 is now known as ajr_

[13:15] <isBEKaml> ayttm?

[13:15] <masak> pippo: no, I was referring to the very specific software mistake of introducing an O(x**2) algorithm inside of a process that need only take O(x) time.

[13:16] <masak> pippo: sorry, I was chunking that whole concept down into that word.

[13:16] <masak> but the article makes it very clear what I meant. :)

[13:17] <isBEKaml> pippo: Schlemiel means "a bungler" - a slang word 

[13:18] <dalek> perl6-roast-data: 55d18c6 | coke++ | / (5 files):

[13:18] <dalek> perl6-roast-data: today (automated commit)

[13:18] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/55d18c68c9

[13:18] <dalek> perl6-roast-data: 688234a | coke++ | doit:

[13:18] <dalek> perl6-roast-data: avoid git failures when extra .out files exist

[13:18] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/688234a872

[13:18] <pippo> masak: I am a newbie. I just like perl6 very much and I would like to use it for practical problems. But rakudo JVM cannot even read a cvs file (the rason for the split above) without crashing or taking too much time

[13:19] <[Coke]> rakudo-jvm has large startup costs relative to rakudo-parrot, btw.

[13:20] <pippo> It is not the startup that makes me unhappy. 

[13:22] *** denis_boyun left
[13:23] <jaffa4> pippo: life?

[13:23] <jaffa4> pippo: it has not crashed for me yet

[13:24] <pippo> jaffa4: what is the time of execution on your machine for this: my @array; for ^20_000 {@array[$_]=$_}; say @array.join(',').split(',')

[13:26] <jaffa4> quite fast

[13:26] <pippo> on rakudo jvm?

[13:26] <jaffa4> rakudo 10.2013

[13:26] <jaffa4> parrot based

[13:27] <pippo> I was referring to jvm?

[13:27] <pippo> I was referring to jvm!

[13:27] <jaffa4> pippo:ok

[13:28] <jaffa4> jvm: print 'hello'

[13:28] *** tobyink joined
[13:28] <[Coke]> rj: my @array; for ^20_000 {@array[$_]=$_}; say @array.join(',').split(',');

[13:29] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[13:29] <jaffa4> what is rj?

[13:29] <FROGGS> rj: my @array; for ^20_000 {@array[$_]=$_}; say @array.join(',')

[13:29] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[13:29] <FROGGS> rj: my @array; for ^20_000 {@array[$_]=$_}; say 1

[13:29] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[13:29] <FROGGS> :/

[13:29] <[Coke]> jaffa4: rakudo-jvm

[13:29] *** salv0 joined
[13:30] <jaffa4> rj: my @array; for 1..20000 {@array[$_]=$_}; say 1

[13:30] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[13:30] <jaffa4> rakudo: my @array; for 1..20000 {@array[$_]=$_}; say 1

[13:31] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[13:31] <camelia> ..rakudo-parrot 9d5448: OUTPUT«1␤»

[13:31] <masak> jaffa4: you can see it from the camelia output -- when one types 'rj', it replies 'rakudo-jvm'.

[13:31] <pippo> rj: say "Hello"

[13:31] <masak> (timeout)

[13:31] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[13:31] <masak> rj: print "(timeout)"

[13:32] <jaffa4> that is cheating

[13:32] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[13:32] <masak> rj: sleep 10; print "(timeout)"

[13:32] <moritz> it seems that the eval soerver isn't stable enough yet

[13:32] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[13:32] <masak> :)

[13:33] <moritz> j: say 'alive again'

[13:33] <camelia> rakudo-jvm 882e33: OUTPUT«alive again␤»

[13:33] <FROGGS> C:\rakudo>perl6 -e "use Shell::Command; mkpath('a\\b')"

[13:33] <FROGGS> Failed to create directory 'a\b/' with mode '0o777': mkdir failed: Das System kann den angegebenen Pfad nicht finden.

[13:34] <FROGGS> something there does not like backslashes

[13:34] <moritz> ouch

[13:34] <isBEKaml> eh, what? chmod o777?

[13:34] <moritz> windows

[13:34] <moritz> no umask set

[13:34] <moritz> or something

[13:34] <pippo> I think rj has crashed like when executing on my machine when I do "my @array; for ^20_000 {@array[$_]=$_}; say @array.join(',').split(',');"

[13:35] <isBEKaml> but it doesn't make sense to use it on windows or even display that, right? 

[13:35] * moritz shrugs

[13:36] <pippo> rj: my @array; for ^20_000 {@array[$_]=$_}; say @array.join(','); # this is safe

[13:36] <camelia> rakudo-jvm 882e33: OUTPUT«0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,…»

[13:37] <pippo> and not safe when you add the split at the end...

[13:37] *** logie left
[13:37] <[Coke]> (eval server not stable) - wonder if someone else is finally seeing the issue I had with test_summary.pl where it would eventually just stop responding.

[13:38] <isBEKaml> pippo: assign and split? 

[13:38] <pippo> this: my @array; for ^20_000 {@array[$_]=$_}; say @array.join(',').split(','); <== this split

[13:39] <moritz> [Coke]: I've had that too, with spectest

[13:39] <[Coke]> moritz: yay, it's not just me? :|

[13:39] * [Coke] commutes

[13:40] <isBEKaml> rj: my @array; for ^20_000 {@array[$_]=$_}; my @temp=@array.join(',');say @temp.split(','); # why not use this?

[13:40] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[13:40] <moritz> pippo: yes, the split consumes way too much memory on my machine too

[13:41] <pippo> moritz: this is annoying!

[13:42] <isBEKaml> moritz: do you happen to know why this nqp build malfunctions? https://gist.github.com/anonymous/7262942

[13:42] <colomon> is it just jvm?  It seemed like the parrot version also timed out in the backlog...

[13:43] <pippo> colomon: I only have jvm and niecza on my machine.

[13:45] <FROGGS> tadzik / jaffa4: see https://github.com/tadzik/Shell-Command/pull/1

[13:45] <masak> rj: say (^20_000).join(',')

[13:45] <camelia> rakudo-jvm 882e33: OUTPUT«0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,…»

[13:45] <colomon> hmmm, your 9:38 code seems to run on parrot rakudo in about 3-4 seconds

[13:45] <masak> rj: say (^20_000).join(',').split(',')

[13:46] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[13:46] *** bluescreen10 joined
[13:46] <masak> yeah, there's something rotten in the state of .split

[13:46] *** kivutar left
[13:47] *** kivutar joined
[13:48] * isBEKaml gives up on getting nqp to build

[13:49] <jaffa4> FROGGS: more about it?

[13:49] <moritz> isBEKaml: where does this invocation come from?

[13:50] <isBEKaml> moritz: I don't know - it happens when I try to build core.setting jar in stage1. 

[13:50] <FROGGS> jaffa4: this should fix the panda problem on windows, where it was unable to create a directory when installing a module

[13:51] <moritz> isBEKaml: this does not look like typical output from make

[13:51] <isBEKaml> moritz: no, that's not make. it's ant. 

[13:51] <moritz> isBEKaml: well, that's not how you build NPQ :-)

[13:52] <isBEKaml> If you look at the comments there, I have tried reproducing that from the cmd prompt. using relative and absolute paths. 

[13:52] <isBEKaml> Both failed. 

[13:52] *** pernatiy joined
[13:52] <isBEKaml> moritz: I know. I can

[13:52] <moritz> isBEKaml: thing is, the NQP build is a bit tricky

[13:52] <moritz> using stage0 to build stage1, stage1 to build stage2

[13:52] <FROGGS> jaffa4: currently I am creating a new msi, and then try to install modules

[13:52] <moritz> and all that without mixing up the stages

[13:53] <isBEKaml> moritz: I know. Last I tried, I couldn't install nmake and I'm not looking forward to downloading VS just for nmake. :-)

[13:53] *** araujo_ joined
[13:53] <isBEKaml> moritz: yes, that's exactly how I set it up. What's confusing is, it throws up saying it's from stage2!

[13:53] <moritz> isBEKaml: that's probably because stage0 is a copy from a previous stage2

[13:54] *** nnunley joined
[13:54] <moritz> isBEKaml: and the source file statements inside JVM bytecode don't change after compile time

[13:54] <isBEKaml> moritz: stage0 is from the repo. Is that why it's broken?

[13:54] <moritz> no

[13:54] <moritz> isBEKaml: what I can offer is to give you a log of a successful nqp build with make

[13:55] <moritz> isBEKaml: and then you can compare that with the commands you executed, and see where they differ

[13:55] <isBEKaml> moritz: Let me tell you what I'm doing here: I use ant, hand coding the build script. 

[13:56] <isBEKaml> moritz: and then I compare output from every stage as it happens as I build with ant. (Obviously, makefile build would fail  with some stupid error over path name conventions). I then go looking at the makefile to reproduce the same steps with ant. 

[13:56] <tadzik> FROGGS: merged

[13:56] <FROGGS> jaffa4: progress, at least: ==> Successfully installed Math::RungeKutta

[13:56] <FROGGS> Failed to remove the directory '.work\1383314078_1\lib\Math'

[13:56] <FROGGS> tadzik: thanks! :o)

[13:56] <isBEKaml> moritz: so far, I've been successful until I came to hll in stage1. Then somewhere down the path, core.setting got f'd up. :-)

[13:57] *** araujo_ left
[13:57] <moritz> isBEKaml: that's why I'm offering you a log from a reference build

[13:57] <isBEKaml> moritz: once I get this building, you can expect a PR with build.xml :-)

[13:58] <moritz> so that you can see where you instructions differ from the "offical" build

[13:58] <isBEKaml> moritz: okay, please paste the "official" log. :-)

[13:59] <timotimo> rj: say (^20_000).join(",").split(",")[20000]

[13:59] * moritz makes it

[13:59] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[13:59] <timotimo> (so not the stringification of th list...)

[14:00] <moritz> rakudo-jvm is probably borked again

[14:00] *** araujo_ joined
[14:00] *** araujo_ left
[14:00] <moritz> using timeouts of camelia's rakudo-jvm target is NOT a reliable way to gather information

[14:00] <timotimo> rj: say("is this working?")

[14:01] <timotimo> you seem to be right

[14:01] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[14:02] <pippo> timotimo: I think this " say (^20_000).join(",").split(",")[20000]" killed rj

[14:02] <moritz> since the evalserver isn't spawned off of camelia, its resource limits don't apply

[14:03] *** pmurias joined
[14:03] <pmurias> what could cause "Missing or wrong version of dependency 'src/stage2/QRegex.nqp'" after updating nqp?

[14:03] <moritz> pmurias: interference with an installed NQP

[14:04] <pmurias> with leftover parts of installed NQP perhaps?

[14:04] <moritz> isBEKaml: http://moritz.faui2k3.org/tmp/j-build.log

[14:04] <moritz> pmurias: yes

[14:04] <moritz> pmurias: or a missing dependency in the Makefile

[14:05] <isBEKaml> moritz: danke!

[14:05] <pippo> rj: say "I am back"

[14:05] <camelia> rakudo-jvm 882e33: OUTPUT«I am back␤»

[14:06] *** araujo_ joined
[14:07] <pippo> timotimo: if you think it is aproblem of stingification then why this works fine...

[14:07] <pippo> rj: say (^20_000).join(",")

[14:07] <moritz> does anybody have an idea for how to create a more robust rakudo-jvm setup for camelia

[14:07] <camelia> rakudo-jvm 882e33: OUTPUT«0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,…»

[14:07] <moritz> pippo: timotimo merely tested a hypothesis

[14:07] <timotimo> because the list version puts a [ and ] at the end? :P

[14:07] <timotimo> and beginning*

[14:14] <pmurias> ahh, the nqp executable has been renamed to nqp-p?

[14:17] <pmurias> was renaming (or aliasing) rakudo's executable to jakudo,parakudo,mokudo considered?

[14:18] *** risou_awy is now known as risou

[14:23] <pippo> bie #perl6

[14:23] *** pippo left
[14:23] *** xinming_ left
[14:24] *** araujo_ is now known as araujo

[14:25] *** araujo is now known as Guest54701

[14:25] *** Guest54701 is now known as araujo

[14:25] *** araujo left
[14:25] *** araujo joined
[14:25] *** xinming joined
[14:29] <isBEKaml> mokudo?

[14:32] *** SamuraiJack left
[14:32] <pmurias> isBEKaml: rakudo on moarvm

[14:34] <isBEKaml> ah

[14:34] <pmurias> seems much easier to type then perl6-moarvm ;)

[14:35] *** risou is now known as risou_awy

[14:35] <isBEKaml> that it is. :-)

[14:36] * isBEKaml afk - be back later.

[14:36] *** isBEKaml left
[14:38] *** kaare_ joined
[14:43] <colomon> moritz++ # building parrakudo and jakudo together now EASY!

[14:45] <colomon> hmmm, the 20,000 split thing takes 9 seconds on perl6-p, 25 on perl6-j.  That's a definite weak point for perl6-j, but it doesn't seem like a catastrophe?  

[14:45] <colomon> oh, wait!

[14:46] <colomon> perl6-j didn't finish it, it took 25 seconds to die with java.lang.StackOverflowError 

[14:46] <colomon> okay, catastrophe.

[14:46] <masak> :/

[14:46] <masak> did I submit this as a rakudobug?

[14:46] <masak> I don't remember.

[14:47] <masak> oh, I submat https://rt.perl.org/Ticket/Display.html?id=120380

[14:54] *** iSlug joined
[15:00] <diakopter> show me the split one

[15:00] <diakopter> ?

[15:01] <jaffa4> I have problem with current compiler

[15:01] <jaffa4> It gives me too short error message

[15:01] <jaffa4> Could not locate compile-time value for symbol P6

[15:01] <jaffa4> no line number, or column number

[15:01] <jaffa4> Is that normal?

[15:01] <timotimo> masak: i seem tor ecall that the performance improved ridiculously when you use [\d+] instead of (\d+), or if you didn't say the match object

[15:02] <timotimo> masak: if you only say the last submatch of $/, you get the answer almost instantaneously

[15:02] <timotimo> rj: my $file = "";

[15:02] <camelia> rakudo-jvm 882e33: ( no output )

[15:02] <timotimo> oops

[15:02] *** kivutar_ joined
[15:02] <timotimo> rj: my $file = ""; for ^20000 {$file ~= "$_;"}; say ($file ~~ /(\d+) +% ';'/)[0][20000];

[15:03] <camelia> rakudo-jvm 882e33: OUTPUT«Nil␤»

[15:03] <timotimo> rj: my $file = ""; for ^20000 {$file ~= "$_;"}; say ($file ~~ /(\d+) +% ';'/)[0][19999];

[15:03] <camelia> rakudo-jvm 882e33: OUTPUT«｢19999｣␤␤»

[15:03] <jaffa4> masak: is it a bug?

[15:03] <timotimo> there we go.

[15:03] <timotimo> rj: my $file = ""; for ^20000 {$file ~= "$_;"}; say $file ~~ /[\d+] +% ';'/);

[15:03] <camelia> rakudo-jvm 882e33: OUTPUT«===SORRY!=== Error while compiling /tmp/D56RfDAV_F␤Unexpected closing bracket␤at /tmp/D56RfDAV_F:1␤------> e ~= "$_;"}; say $file ~~ /[\d+] +% ';'/⏏);␤»

[15:03] <timotimo> rj: my $file = ""; for ^20000 {$file ~= "$_;"}; say $file ~~ /[\d+] +% ';'/;

[15:03] <camelia> rakudo-jvm 882e33: OUTPUT«｢0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38;39;40;41;42;43;44;45;46;47;48;49;50;51;52;53;54;55;56;57;58;59;60;61;62;63;64;65;66;67;68;69;70;71;72;73;74;75;76;77;78;79;80;81;82;83;84;85;86;87;…»

[15:03] <masak> jaffa4: I don't know what you did to get that error, but sounds like a possible bug, eys.

[15:04] <masak> yes*

[15:04] <timotimo> "could not locate compile-time value for symbol Foo" usually comes from the optimizer, try --optimize=0

[15:04] <colomon> diakopter: my @array; for ^20_000 {@array[$_]=$_}; say @array.join(',').split(',');

[15:04] <timotimo> or rather --optimize=off

[15:04] <jaffa4> it is easy, clone std.... then execute something like that erl6 -I D:\m\p6\perl6grammer\std\lib -I D:\m\p6\perl6grammer\std D:\m\p6\perl6grammer\std\STD.pm6

[15:04] *** kaleem joined
[15:05] <masak> jaffa4: ah. I tried to tell you yesterday, but maybe I didn't get all the way: people don't use STD like that.

[15:05] <masak> nor are you really expected to.

[15:05] *** kivutar left
[15:05] <masak> what you have to understand about STD is that it's all one big glorious hack.

[15:05] <jaffa4> masakL still what I got, is not ok

[15:05] <masak> it is in my book.

[15:06] <masak> STD is kind of using Perl 5 as a trampoline to explore Perl 6 parsing.

[15:06] *** benabik joined
[15:06] <masak> it was never meant to be included from a Rakudo script like you're trying to.

[15:06] <masak> now, granted, you may have stumbled on an interesting rakudobug nevertheless.

[15:07] <masak> but I predict it will be a big pain to golf :)

[15:07] *** kivutar joined
[15:07] <jaffa4> I would like to parse perl 6 from perl 6

[15:07] <jaffa4> Is this such a big dream>

[15:08] <pmurias> jaffa4: use the rakudo grammar

[15:08] *** kaleem left
[15:08] <jaffa4> What rakudo grammar?

[15:09] <diakopter> colomon: I'm curious how nqp-m handles an nqp version of that program

[15:09] *** risou_awy is now known as risou

[15:10] <diakopter> (I think there's a not small possibility it handles it even worse..)

[15:13] *** ajr joined
[15:13] *** ajr_ left
[15:13] <masak> jaffa4: you'll find it in the Rakudo repository, in src/Perl6/Grammar.nqp

[15:14] *** ajr is now known as Guest8772

[15:14] <colomon> diakopter: it's pippo++'s code, and I'm sure he wouldn't mind you if translated it to nqp.  ;)

[15:15] <masak> jaffa4: but I'm not 100% clear on what pmurias++ means by "use the rakudo grammar".

[15:15] <masak> jaffa4: I haven't seen anyone doing that, from start to end.

[15:15] <masak> jaffa4: it's a big dream indeed, but a rather attractive one. please keep dreaming in that way :)

[15:15] <masak> (by which I mean, I would like to see it work, too)

[15:17] *** kivutar_ left
[15:18] <pmurias> masak: I meant that to parse perl6 he should try to use Perl6::Grammar 

[15:21] <masak> pmurias: believe me, I'm with you so far.

[15:21] <masak> pmurias: do you have a Perl 6 script that uses Perl6::Grammar to parse Perl 6 code?

[15:22] <pmurias> so the problem is the Perl6/nqp distinction?

[15:22] <timotimo> isn't there some :from<nqp> adverb for use already?

[15:23] <masak> pmurias: the problem is parsing Perl 6 from (Rakudo) Perl 6.

[15:24] *** jnap joined
[15:24] *** denis_boyun joined
[15:27] <diakopter> colomon: I'm having serious trouble translating it.

[15:27] *** Guest8772 is now known as ajr_

[15:28] <FROGGS> tadzik: should the calls to rmdir shouldn't be rm_rf instead? https://github.com/tadzik/Shell-Command/blob/master/Shell/Command.pm#L29

[15:33] <kivutar> where is http://try.rakudo.org/ ? is it dead?

[15:34] <kivutar> is it something like http://tour.golang.org/#1 ?

[15:35] <moritz> kivutar: it's dead, yes :(

[15:36] <moritz> (I know a dead rakudo when I see one)

[15:39] *** sftp left
[15:39] <tadzik> FROGGS: obtw, the pull request is a bit wrong I think

[15:39] <FROGGS> (This is a stiff rakudo)

[15:39] <FROGGS> tadzik: really?

[15:39] <tadzik> it created the Shell directpyu

[15:39] <tadzik> directory

[15:39] <tadzik> this can't be right

[15:39] <tadzik> or maybe it was there before

[15:40] <FROGGS> tadzik:  I don't understand

[15:40] <tadzik> FROGGS: there?s a toplevel Shell directory in the repo noew

[15:40] <tadzik> * now

[15:41] <timotimo> pmurias: when do you have the time to continue working on rakudo-js?

[15:41] <tadzik> I'll take a closer look when I'm on a laptop

[15:42] <FROGGS> tadzik: weird, I just used githubs magic, clicked "edit" on the Command.pm, which did a fork and a PR

[15:42] <FROGGS> tadzik: it was there before

[15:43] <tadzik> maybe I screwed something up before then

[15:43] <FROGGS> tadzik: d0442646c482b6b23f0871ea874022d6435b5a35 is the bad one

[15:44] <tadzik> dang

[15:44] <tadzik> ok= I'll fix it up later today

[15:45] <tadzik> the local today, at least

[15:45] * tadzik in california

[15:45] <masak> tadzik: how's CA? :)

[15:46] <tadzik> veru US-y :)

[15:46] <FROGGS> *g*

[15:46] <FROGGS> nice :o)

[15:46] <tadzik> which is just what I wanted :)

[15:46] * masak .oO( we phase-shifted tadzik about 45 degrees west, so his local day is a bit offset right now )

[15:46] <FROGGS> have fun in the U, S and A

[15:47] <FROGGS> that is not right

[15:47] <FROGGS> that is left

[15:47] *** muixirt left
[15:50] <tadzik> "west -- it can't be right"

[15:50] <FROGGS> exactly :o)

[15:51] <FROGGS> but: "life is peaceful there"

[15:51] *** denis_boyun left
[15:53] *** nebuchadnezzar left
[15:56] <japhb__> tadzik: Where in CA are you?

[15:57] * masak .oO( slightly below the crossbar of the A )

[15:57] *** nebuchadnezzar joined
[15:58] <japhb__> FROGGS: The Shell::Command line you pointed to is correct; the line *above* it is wrong, and I already fixed it.  Maybe my fix got reverted?

[15:58] *** iSlug left
[15:58] *** kivutar left
[15:59] <FROGGS> japhb: what is wrong with the line above?

[16:00] <japhb__> The result of the map should be sorted before being reversed, so that all directory contents will be gone before the directory is rmdir'ed.

[16:00] <FROGGS> japhb__: that is in the Command.pm under lib/

[16:01] <japhb__> Gah, I wonder if my fix is not on a branch -- visible to panda, but not on Shell-Command's master.

[16:01] <FROGGS> japhb__: there are two Command.pm files, you've seem to edited the correct one

[16:03] *** p5eval left
[16:03] <japhb__> Ah, OK, at least the fix got in there.

[16:04] <japhb__> Would you mind applying my fix to the other copy (or figuring out why there even *is* another copy)?  I'm going to be AFK for much of the day.

[16:05] <tadzik> japhb__: San Mateo

[16:05] <FROGGS> japhb__: the other one will be removed... currently I'm hunting for a bug on windows

[16:06] <tadzik> staying at diakopter++'s

[16:06] <tadzik> japhb__: where are you?

[16:07] <dalek> rakudo-js: a1679de | (Pawel Murias)++ | / (7 files):

[16:07] <dalek> rakudo-js: Unbitrot to work with the newest nqp.

[16:07] <dalek> rakudo-js: 

[16:07] <dalek> rakudo-js: Adapt to nqp-p, handle QAST::Blocks with declaration_static, add bool_I op.

[16:07] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/a1679defa6

[16:07] <pmurias> timotimo: you mean when will I have the time?

[16:07] <japhb__> Idea for a useful tool for hunting down performance weirdness in Rakudo ... run a micro-benchmark over and over with sub profiling on, using increasing iteration counts, and look at the collected profiles searching for either A) counts that don't increase linearly with benchmark iterations, or B) subs that take more time *per iteration* as iterations increase.

[16:07] <japhb__> I saw something similar once for another language, but I forget where.

[16:08] <japhb__> tadzik: I'm right now in Mountain View (not too far south of you).

[16:08] <japhb__> How long are you hear?

[16:08] <FROGGS> pmurias: what is your plan to get it into nqp/ ?

[16:08] <japhb__> *here

[16:08] <tadzik> about 3 weeks, I'm getting back on like 18th

[16:08] <japhb__> W00t!  We should get the gang together!

[16:09] <pmurias> timotimo: I plan to resume work on it from now on, it's mostly a matter of managing my time correctly

[16:09] * japhb__ is almost to bus stop, but will backlog to continue meet-up discussion soon thereafter.  :-)

[16:09] *** p5eval joined
[16:10] <retupmoca> r: "asdf".index('a').Bool.say; say "asdf".index('x').Bool.say;

[16:10] <camelia> rakudo-parrot 9d5448, rakudo-jvm 882e33: OUTPUT«False␤False␤True␤»

[16:11] <retupmoca> wait, what?

[16:11] <FROGGS> *g*

[16:11] <retupmoca> r: "asdf".index('s').Bool.say

[16:11] <pmurias> FROGGS: once it fully bootstraps and I figure out how to boostrap things correctly, I think it would make sense to have my own releases on the npm repository so it's something I'll done onse ready

[16:11] <camelia> rakudo-parrot 9d5448, rakudo-jvm 882e33: OUTPUT«True␤»

[16:11] <FROGGS> r: "asdf".index('a').Bool.say; "asdf".index('x').Bool.say;

[16:11] <camelia> rakudo-parrot 9d5448, rakudo-jvm 882e33: OUTPUT«False␤False␤»

[16:11] <retupmoca> ah, extra say

[16:11] <FROGGS> retupmoca: index("a") is zero, so it it false-ish

[16:11] <retupmoca> ok

[16:12] <retupmoca> is there a good way to tell the difference between 'substring at index 0' and 'substring not found' ?

[16:12] <FROGGS> check for >= 0 to know success

[16:12] <FROGGS> r: say "asdf".index('x')

[16:12] <retupmoca> r: say "asdf".index('x') >= 0

[16:12] <camelia> rakudo-parrot 9d5448, rakudo-jvm 882e33: OUTPUT«(Int)␤»

[16:12] <camelia> rakudo-jvm 882e33: OUTPUT«Cannot look up attributes in a type object␤  in sub infix:<>=> at gen/jvm/CORE.setting:4128␤  in block  at /tmp/Salw33Ls9O:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1086␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1292␤  in any command_eval…»

[16:12] <camelia> ..rakudo-parrot 9d5448: OUTPUT«Invocant requires an instance, but a type object was passed␤  in method Bridge at gen/parrot/CORE.setting:4214␤  in sub infix:<>=> at gen/parrot/CORE.setting:4139␤  in sub infix:<>=> at gen/parrot/CORE.setting:3991␤  in block  at /tmp/PX0tcoTOvd:…»

[16:12] <FROGGS> r: say "asdf".index('a')

[16:12] <camelia> rakudo-parrot 9d5448, rakudo-jvm 882e33: OUTPUT«0␤»

[16:13] <FROGGS> ahh

[16:13] <FROGGS> it is "undef" for the not-found case

[16:13] <FROGGS> r: say "asdf".index('x').defined

[16:13] <camelia> rakudo-parrot 9d5448, rakudo-jvm 882e33: OUTPUT«False␤»

[16:13] <FROGGS> r: say "asdf".index('a').defined

[16:13] <camelia> rakudo-parrot 9d5448, rakudo-jvm 882e33: OUTPUT«True␤»

[16:13] <retupmoca> ah, there we go

[16:14] <retupmoca> .defined is what I was looking for

[16:16] <retupmoca> S32 was a little unclear on how failure is represented

[16:23] <japhb__> So tadzik, diakopter, TimToady, anyone else in the SF Bay Area next week: Care for lunch at the Googleplex?

[16:25] *** jeffreykegler joined
[16:27] *** sftp joined
[16:28] *** lizmat joined
[16:30] <FROGGS> retupmoca: improve it :o)

[16:32] *** woolfy joined
[16:32] *** jaffa4 left
[16:42] *** tobyink left
[16:45] *** ajr_ left
[16:50] <tadzik> japhb__: I don't see why not :)

[16:58] *** colomon left
[17:04] <japhb> tadzik et al., How does Monday sound?

[17:07] <tadzik> I don't have plans for monday :)

[17:07] <tadzik> so, good

[17:10] <diakopter> you don't? :)

[17:10] <diakopter> oh wait.

[17:10] <tadzik> I do? :)

[17:10] * diakopter backlogged

[17:10] <diakopter> japhb__: sure

[17:11] <japhb> Excellent, anyone else interested?

[17:19] *** kaare_ left
[17:19] *** rurban joined
[17:26] *** colomon joined
[17:29] *** colomon left
[17:30] *** ajr joined
[17:30] *** ajr is now known as Guest14420

[17:31] *** Guest14420 is now known as ajr_

[17:31] *** woolfy left
[17:32] *** lizmat left
[17:34] <FROGGS> japhb: I am, but I am still in ol' Europe

[17:35] <tadzik> quick, come here!

[17:36] <japhb> Dangit FROGGS, jump on a plane!  ;-)

[17:36] *** colomon joined
[17:36] <FROGGS> I would like to, problem is, I have to care about my kids next week (besides not having enough money)

[17:37] <japhb> yoleaux, where are you when I need you?

[17:37] *** BitPuffin left
[17:37] <colomon> tadzik: you're in California?

[17:38] <japhb> FROGGS, totally understood.  If you do end up coming this way sometime, ping me.  :-)

[17:38] <FROGGS> I will :o)

[17:39] <FROGGS> tadzik / jaffa4: btw, panda finally works now (again) on windows

[17:40] <tadzik> colomon: yes :)

[17:40] <FROGGS> tadzik: problem was, "you" opened .pm files to look up foreign module usages, but you didn't close the FH

[17:40] <colomon> tadzik: \o/   so glad you made it out to the states!

[17:40] <cxreg2> "While the JVM backend mostly implements the same features as the Parrot backend, many bits are still missing, most prominently the native call interface" # wait, is that still true?

[17:40] *** cxreg2 is now known as cxreg

[17:40] <FROGGS> tadzik: so it was unable to delete the file, and died later when trying to delete the dir

[17:40] <tadzik> ah

[17:40] <tadzik> colomon: yeah, me too :)

[17:40] <tadzik> I dramatically needed some time off

[17:44] <cxreg> i love the "Flip flops can be negated." change in the spec.  "AUTUMN casts COLD WEATHER.  Your FLIP FLOPS are NEGATED"

[17:45] <FROGGS> japhb++ # you already fixed what I recognized on windows! https://github.com/tadzik/panda/commit/d8b4f4f12dafae1ecd1bf84773a317055d3be5fb

[17:46] <FROGGS> tadzik: do we need to update panda in star?

[17:47] <tadzik> FROGGS: I don't know, do we? :P

[17:47] <FROGGS> hmmm, that is weird

[17:48] <FROGGS> tadzik: the submodule commit-id is new enough, but the star release contains an older version

[17:49] <colomon> tadzik: panda hasn't worked (on Linux) for the smoke tester in a week.

[17:50] *** rindolf left
[17:50] <tadzik> colomon: I just noticed that rakudobrew didn't build it for me, checking why

[17:52] *** rurban left
[17:52] *** rurban joined
[17:53] <colomon> huh.

[17:53] <colomon> I've been getting

[17:53] <colomon> ===SORRY!===

[17:53] <colomon> Could not find Panda in any of: /home/smoker/rakudo/install/lib/parrot/5.9.0-devel/languages/perl6/site/lib, /home/smoker/rakudo/install/lib/parrot/5.9.0-devel/languages/perl6/vendor/lib, /home/smoker/rakudo/install/lib/parrot/5.9.0-devel/languages/perl6/lib, /home/smoker/.perl6/2013.10-120-g9d54481/lib

[17:53] <colomon> but just now I got 

[17:53] <colomon> build stage failed for File::Tools: Failed building lib/File/Find.pm

[17:53] <colomon> ==> Please make sure that /home/smoker/rakudo/install/lib/parrot/5.9.0-devel/languages/perl6/site/bin is in your PATH

[17:54] <colomon> (and yes, that is in my path)

[17:54] <FROGGS> colomon: maybe you are missing this commit? https://github.com/tadzik/panda/commit/9f2591b3b0445b294db631e2d5f317b8480dd1c2

[17:54] <colomon> that does seem like a significant commit!

[17:55] <FROGGS> it does

[17:55] <colomon> I'm actually trying pandabrew rebootstrap when I get these messages.

[17:55] <colomon> which I think should mean I've got the latest panda?

[17:56] <FROGGS> I dunno how that magic works

[17:57] <colomon> oh, maybe not!

[17:57] <FROGGS> damn, the star release really contains old modules :/

[17:58] *** zakharyas left
[17:59] <colomon> crap, rebootstrap doesn't try to update panda at all

[17:59] *** rurban left
[17:59] <FROGGS> example: moritz++ did a Hash.delete fix a month ago, which is not included in the star tgz file... even when the submodule hash-ids are up-to-date

[18:00] <colomon> my pandabrew panda dated back to YAPC::NA :\

[18:01] <FROGGS> O.o

[18:03] *** benabik left
[18:07] <colomon> so, tadzik: shouldn't pandabrew rebootstrap get the latest panda?  

[18:09] *** lue joined
[18:09] <lue> hello world o/

[18:10] <japhb> o/

[18:13] *** darutoko joined
[18:14] <colomon> after updating pandabrew's panda by hand, smoke tester appears to be working again

[18:20] *** bluescreen10 left
[18:22] <FROGGS> ool

[18:22] <FROGGS> cool

[18:23] *** bluescreen10 joined
[18:24] <dalek> nqp: 149a377 | (Pawel Murias)++ | Configure.pl:

[18:24] <dalek> nqp: Make Configure.pl --help use the real list of backends.

[18:24] <dalek> nqp: review: https://github.com/perl6/nqp/commit/149a377a55

[18:28] *** dansamo joined
[18:36] <japhb> OK, so far it looks like we've got 5-6 people coming for Monday lunch at Google.  Anyone else interested?

[18:37] *** jeffreykegler left
[18:47] * moritz interested, but not anywhere near :-)

[18:47] *** eternaleye left
[18:47] <timotimo> pmurias: oh cool! i thought you had other stuff in your life from now on

[18:52] *** SamuraiJack joined
[18:56] *** bluescreen10 left
[18:57] *** bluescreen10 joined
[18:57] *** bluescreen10 left
[18:57] *** bluescreen10 joined
[19:05] *** sqirrel left
[19:10] <moritz> any p6 or nqp LHFs I could hack on tonight?

[19:11] *** SamuraiJack left
[19:12] <diakopter> moritz: might be nice to have the remaining required moar ops stubbed. would certainly be helpful.

[19:13] <FROGGS> masak++ # very entertaining: http://www.joelonsoftware.com/articles/fog0000000319.html

[19:14] <diakopter> moritz: jnthn did most of them for rakudo in the moar-support branch.. but most of them will need op entries in moarvm proper (oplist), OR in the qast->mast compiler in nqp

[19:14] * FROGGS .oO( nqp$ prove -v -e nqp-p t/docs/opcodes.t | grep "not ok" )

[19:14] <diakopter> moritz: er, the 2nd "them" there is the remaining ones for moar

[19:15] <FROGGS> moritz: and there is still RT, if you don't feel op-ish :o)

[19:16] <diakopter> moritz: these definitely need native moar ops https://gist.github.com/diakopter/7270438

[19:16] <diakopter> er, skip the nativecall ones though

[19:16] <diakopter> editing gist

[19:17] *** slava-work joined
[19:17] <diakopter> moritz: (native moar ops as opposed to ones with non-core-mappings in the qast->mast compiler)

[19:22] <slava-work> I hate silly people

[19:23] <FROGGS> good day to you too slava-work :o)

[19:23] <slava-work> :(

[19:24] <slava-work> it would be a good day if I had rakudo-moarvm to play with, *hint* *hint* *wink* *wink*, jnthn :)

[19:24] <FROGGS> hehe

[19:25] <slava-work> does p6 have the whole before/after method keywords that moose has? (wondering if they lifted it out or invented it)

[19:25] <slava-work> because that is seriously some awesome stuff

[19:26] *** risou is now known as risou_awy

[19:26] *** risou_awy is now known as risou

[19:26] <FROGGS> slava-work: if it not in "core", you could implement it (as a module) with, like, 3 lines each for before and after

[19:27] <FROGGS> because you can create a trait, that wraps the thing (sub) it is applied to, and does something before or after for example

[19:28] *** darutoko left
[19:29] <PerlJam> those would read weird as traits

[19:30] <slava-work> FROGGS: ty

[19:30] <FROGGS> PerlJam: maybe

[19:31] *** bluescreen10 left
[19:31] *** sqirrel joined
[19:31] <slava-work> I kind of realised how much that is used in lots of places of "I need this from base class, but to pre-treat the data" or something of that sort, so in java, you'd have to use composition, where inheritance makes more sense otherwise

[19:31] *** tobyink joined
[19:31] *** bluescreen10 joined
[19:32] *** colomon left
[19:32] <FROGGS> or make a role that you mix into the sub-object... that should work too 

[19:33] <slava-work> yes

[19:33] <FROGGS> in the end you wanna do this? before &sub-name, { <code goes here> }

[19:33] <slava-work> I knew I was right for liking perl and hating java :P

[19:34] <FROGGS> *g*

[19:34] <slava-work> pretty much

[19:34] <PerlJam> might as well just call .wrap

[19:34] <slava-work> I am also not a big fan of java annotations, which allow spring to automagically link things together

[19:36] *** colomon joined
[19:39] *** colomon left
[19:39] <Ulti> grrr OSX Mavericks has lost its OpenGL headers so my build is failing

[19:39] <FROGGS> rp: sub test() { say 42 }; &test.wrap: -> { say "before"; callsame }; test

[19:39] <camelia> rakudo-parrot 9d5448: OUTPUT«before␤42␤»

[19:39] <FROGGS> PerlJam++

[19:40] <FROGGS> rp: sub test() { say 42 }; &test.wrap: -> { callsame; say "after" }; test

[19:40] <camelia> rakudo-parrot 9d5448: OUTPUT«42␤after␤»

[19:40] *** colomon joined
[19:40] <FROGGS> rp: sub test() { say 42 }; &test.wrap: -> { say "before"; callsame }; &test.wrap: -> { say "even beforer"; callsame }; test

[19:40] <camelia> rakudo-parrot 9d5448: OUTPUT«even beforer␤before␤42␤»

[19:44] <FROGGS> jaffa4: please test http://froggs.de/perl6/rakudo-star-2013.10-RC1.msi (other testers welcome) 

[19:44] *** risou is now known as risou_awy

[19:50] *** sqirrel left
[19:59] *** Rotwang joined
[20:00] <Ulti> why does parrot even have a binding to OpenGL?

[20:01] <moritz> because that way, all the dozens of HLLs based on parrot can use OpenGL

[20:03] <Ulti> :/

[20:05] <lue> Ulti: don't you know about the OpenGL object in Perl 6? It's the best thing ever. :P

[20:05] <Ulti> it is kind of lame Apple randomly moved all framework headers into the XCode.app directory 

[20:06] <Ulti> lue no, but I'd prefer it was an OpenCL Promise object :P

[20:07] <Ulti> rakudo-fpga why go virtual machine when you can have hardware

[20:07] <lue> .oO(rakudo-2A03)

[20:08] <Ulti> arent 2A03 incredibly hard to acquire thanks to chiptune mayhem?

[20:10] <lue> The 2A03 specifically? Maybe, but the genericer 6502 should be incredibly easy.

[20:10] <lue> s/genericer/genericker/ # pronunciation rules

[20:10] <Ulti> :S

[20:10] <Ulti> uh oh its not just paths its the whole API has changed and the bindings are wrong win win win

[20:13] <moritz> after some more thinking and tinkering, I'm pretty sure I don't know how I would patch rakudo for "no strict"

[20:15] *** PacoAir joined
[20:16] <lue> moritz: ooc, is it just making the phrase "no strict" work, or do you have to implement its effects too?

[20:17] <moritz> lue: just the latter

[20:17] <lue> Doesn't -e already do (some of) that?

[20:17] <moritz> no

[20:17] <moritz> it should, but doesn't

[20:18] <FROGGS> shall I give it a whirl?

[20:18] <moritz> yes please

[20:19] <moritz> there's one more thing I'm trying to do, but don't wait for it

[20:23] *** dansamo left
[20:26] <diakopter> wouldn't you just auto-declare a lexical in just the same place it currently errors

[20:28] <arnsholt> My goal for the evening: Implement CStr on JVM

[20:28] <FROGGS> diakopter: that is what v5 does

[20:28] <arnsholt> And if there's time after that, CArrays of value types

[20:28] <moritz> diakopter: TimToady explictly said that's not what happens

[20:28] <moritz> rather it's a direct lookup into the symbol table

[20:29] <jnthn> slava-work: Some day in the not too distant future, you will...as for today, I need to write my talk for Austrian Perl Workshop tomorrow! ;)

[20:29] <jnthn> moritz: Anything I can give a hint on?

[20:29] <FROGGS> moritz: well, you have to declare it in order looking it up, no?

[20:29] <moritz> p5eval: $blerg = 42; { use strict; say $blerg }

[20:29] <p5eval> moritz: ERROR: Global symbol "$blerg" requires explicit package name at (eval 7) line 1.

[20:30] <FROGGS> well, this would error out this way too

[20:30] <FROGGS> hmm, no, maybe not

[20:30] <moritz> not if I'd autodeclare $blerg

[20:32] <moritz> jnthn: how would the generated code look like?

[20:32] <moritz> jnthn: an anonymous variable or container bound to the slot of the symbol table?

[20:33] <moritz> 'cause just binding into the symbol table doesn't seem to be enough (segfaults rakudo :-)

[20:33] <FROGGS> moritz: gimme 10min to try my v5 patch

[20:33] <jnthn> moritz: Hang on... :) What are the semantics you're after?

[20:34] <jnthn> our-like?

[20:34] <moritz> jnthn: an undeclared variable under 'no strict;' should not declare a user-visible variable, but point straight into the symbol table

[20:36] <jnthn> moritz: Of the current package?

[20:36] <moritz> jnthn: yes

[20:36] <moritz> basically OUR::<$x>

[20:37] <jnthn> QAST::Op.new( :op('callmethod'), :name('at_key'), QAST::WVal.new( :value($*PACKAGE) ), QAST::SVal.new( :value($varname) ) ) # and rely on auto-viv...maybe...

[20:37] <jnthn> oh, oops

[20:37] <jnthn> That WVal wantsa QAST::Op.new( :op('who'), ... ) around it

[20:37] <moritz> oh

[20:37] <moritz> good idea :-)

[20:38] <moritz> and I used :op<atkey>, which doesn't autovivify

[20:41] <diakopter> moritz: oh; I missed that

[20:42] <diakopter> well you have to declare at it least somewhere, even if every lookup/store of it is through the symbol table, right?

[20:42] <moritz> why?

[20:45] <jnthn> not afaik

[20:45] *** lowpro30 joined
[20:47] <moritz> I've managed to stop the declaration from happening, but the lookup is still for a lexical variable

[20:48] <moritz> and that segfaults, because there's no such var

[20:50] <diakopter> .oO( segfault? )

[20:50] *** denis_boyun joined
[20:50] <diakopter> should transform every occurrence in that package to Foo::<foo> or whatever?

[20:51] <moritz> yes, that's how I understand it

[20:51] *** PacoAir left
[20:54] *** lowpro30 left
[20:57] *** colomon left
[21:00] * moritz calls it a day

[21:00] <dalek> rakudo/nom: 3f92477 | jonathan++ | src/vm/jvm/core/Threading.pm:

[21:00] <dalek> rakudo/nom: Various combinators for Subscribables.

[21:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3f924771bb

[21:00] <dalek> rakudo/nom: 2a0f6c9 | jonathan++ | src/vm/jvm/core/Threading.pm:

[21:00] <dalek> rakudo/nom: Naming cleanup in Publish.for implementation.

[21:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2a0f6c9a79

[21:01] <dalek> roast: dc0b47e | jonathan++ | S17-concurrency/subscribable.t:

[21:01] <dalek> roast: Tests for some Subscribable combinators.

[21:01] <dalek> roast: review: https://github.com/perl6/roast/commit/dc0b47ed17

[21:01] <jnthn> L'hacking de tren...

[21:01] <FROGGS> froggs@TL02L-R8RXTCW-linux:~/dev/rakudo$ perl6-p -e 'use 6; $foo = 42; say $foo'

[21:01] <FROGGS> 42

[21:01] <FROGGS> froggs@TL02L-R8RXTCW-linux:~/dev/rakudo$ perl6-p -e 'use v6; $foo = 42; say $foo'

[21:01] <FROGGS> ===SORRY!=== Error while compiling -e

[21:02] <FROGGS> I guess this is a problem then:

[21:02] <FROGGS> perl6-p -e 'use 6; $foo = 42; { use v6; say $foo }'

[21:02] <FROGGS> 42

[21:03] <FROGGS> (and yes, it should be "6" rather than "use 6")

[21:09] <FROGGS> that is what I have: https://gist.github.com/FROGGS/6f8989611659551dae1f

[21:10] <FROGGS> dunno what would be needed to make 'use 6; $foo = 42; { use v6; say $foo }' throw

[21:18] *** bluescreen10 left
[21:18] *** bluescreen10 joined
[21:18] *** bluescreen10 left
[21:22] <tipdbmp> If Array extends List, how come when I: use MONKEY_TYPING; augment class List { method sum { [+] self; } }; the expression [1 .. 10].sum.say dies with 'no such method' error?

[21:23] <FROGGS> jnthn: is there already a way to check in the gramar's comp_unit if we are running as -e?

[21:24] <FROGGS> tipdbmp: that is because the method cache of Array does not get updated

[21:24] <pmurias> jnthn: if I change nqp-js to use the multi-backend-build-system should I keep it in a nqp branch or a github fork?

[21:24] <FROGGS> tipdbmp: you can work-around it by doing "augment class Array { };" after the List...

[21:25] <tipdbmp> FROGGS, so I should augment both?

[21:25] <FROGGS> tipdbmp: you have to to renew the method cache

[21:25] <tipdbmp> Oh, I see.

[21:25] <FROGGS> tipdbmp: but for Array you don't actually have to change a method

[21:25] *** colomon joined
[21:25] <FROGGS> an empty augment will do

[21:26] <tipdbmp> Yes, it worked. Thanks.

[21:26] <jnthn> FROGGS: I think (yes, ugh) that $?FILE or whatever ends up as -e :)

[21:26] <FROGGS> jnthn: ahh, yes!

[21:26] <FROGGS> rp: say "$?FILE"

[21:26] <camelia> rakudo-parrot 9d5448: OUTPUT«/tmp/XVplQXYf2S␤»

[21:26] <jnthn> pmurias: Branch is fine, that's how JVM and MoarVM happened before landing in master

[21:27] <FROGGS> err, okay... so I have to wait until my local one compiles :o)

[21:27] *** risou_awy is now known as risou

[21:30] <arnsholt> Rakudo's make j-install doesn't seem to work on my machine

[21:30] <arnsholt> Is that a known thing?

[21:31] <FROGGS> unknown to me at least

[21:33] <arnsholt> Creating '/nqp/install/bin/perl6-j'

[21:33] <arnsholt> open: No such file or directory at tools/build/create-jvm-runner.pl line 35.

[21:33] <arnsholt> moritz: You seen that happen?

[21:34] <arnsholt> My config.default is:

[21:34] <arnsholt> --backends=jvm,parrot

[21:34] <arnsholt> --prefix=../nqp/install

[21:38] <FROGGS> perl6 -e '$foo = 42; { use v6; say $foo }' # I don't see why this should throw in the strict-enabled block

[21:45] *** risou is now known as risou_awy

[22:03] *** lowpro30 joined
[22:05] *** PacoAir joined
[22:07] *** PacoAir left
[22:08] *** PacoAir joined
[22:12] *** tobyink left
[22:14] *** lowpro30 left
[22:27] *** rurban joined
[22:30] *** BenGoldberg joined
[22:31] *** colomon left
[22:38] *** xenoterracide left
[22:38] *** colomon joined
[22:41] <japhb> Ulti: Parrot has an OpenGL binding because I wrote it when I was still hoping that Parrot would build momentum and actually *have* the multiple languages interoperating that it was supposed to be for, and that moritz is teasing about.

[22:42] <japhb> But Tene and I discovered that language interop didn't get quite the support we'd both hoped.

[22:42] <Tene> Yes, unfortunately.

[22:43] <japhb> Yes! I got another person up for lunch on Monday.

[22:45] *** denis_boyun left
[22:46] <BenGoldberg> I would hate to sleep past lunch, on a Monday ;)

[22:48] <japhb> heh

[22:57] *** rurban left
[23:00] <tadzik> colomon: oh, I don't think pandabrew does that, no

[23:03] <colomon> tadzik: I don't know that rebootstrap should be the one to do that, but there definitely needs to be some way to update pandabrew's version of panda from a pandabrew command.

[23:04] <tadzik> colomon: fwiw, I'm not really maintaining pandabrew anymore

[23:04] <tadzik> the reason for it was for panda to self-update after rakudo update, and now rakudobrew autoupdates panda after each build

[23:04] <colomon> is rakudobrew ready for prime time?

[23:04] <tadzik> I thik so

[23:04] <tadzik> I use it without any problems

[23:05] <tadzik> like, I don't build rakudos outside rakudobrew anymore

[23:07] *** moartl joined
[23:07] <japhb> That's certainly a positive endorsement

[23:07] *** moartl left
[23:08] <jnthn> heh, if Moar's startup time sucked then imoartal would be a good name for an eval server..

[23:11] <diakopter> :D

[23:12] <moritz> arnsholt: what --prefix did you configure?

[23:13] <moritz> arnsholt: /nqp/install/... looks slightly wrong to me

[23:16] *** johnny5_ left
[23:17] *** spider-mario left
[23:17] *** johnny5_ joined
[23:20] *** jnap left
[23:22] *** johnny5_ left
[23:23] *** johnny5_ joined
[23:24] *** johnny5_ left
[23:25] <lue> jnthn: a sucky startup time would warrant "moaratorium", surely :)

[23:25] *** johnny5_ joined
[23:27] *** risou_awy is now known as risou

[23:28] *** labster left
[23:29] *** lizmat joined
[23:30] *** woolfy joined
[23:31] <moritz> a slow startup would moartify the authors

[23:33] <japhb> moritz: Yes, precisely: the authors would die of boredom.

[23:34] <Ulti> japhb which planned target languages have graphics tightly integrated? I've only used a couple like Icon and I guess Logo

[23:36] <japhb> There are a number of those now: PostScript, Processing, JavaScript (Canvas/WebGL), and so on.  But that wasn't actually why I did it.

[23:37] <japhb> I wanted all languages to have a good OpenGL binding available "for free" so that users of more classically textual languages could start thinking graphically.

[23:37] <FROGGS> moritz: I think that works https://gist.github.com/FROGGS/6f8989611659551dae1f

[23:37] <japhb> Just like SDL + OpenGL + OpenAL = suddenly people go "Hey, I'm going to write a game!"

[23:37] <FROGGS> moritz: at least it survived basic tests

[23:38] *** woolfy left
[23:38] <FROGGS> gnight all

[23:38] <Ulti> japhb so parrot provides an abstraction of OpenGL?

[23:39] <moritz> FROGGS: doesn't $*W.is_lexical suffice?

[23:39] <FROGGS> no, I need to stuff the <lax> somewhere

[23:39] <japhb> Ulti: The idea was that any language written on top of parrot could use any library that was bound for Parrot just once.

[23:40] <japhb> Library/API binding becomes an M+N instead of M*N problem.

[23:40] <FROGGS> moritz: and I didn't want it to loop over the blocks twice

[23:40] <japhb> That was the whole reason I worked on Parrot.

[23:41] *** ssutch_ joined
[23:41] <ssutch_> chello

[23:41] <japhb> I'm sure ingy would tell me it was some form of acmeism.  :-)

[23:41] <japhb> utf8hello

[23:43] *** risou is now known as risou_awy

[23:44] <dalek> perl6-roast-data: a8fb2b7 | coke++ | / (5 files):

[23:44] <dalek> perl6-roast-data: today (automated commit)

[23:44] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/a8fb2b7695

[23:57] *** dmol left
[23:59] *** Rotwang left
