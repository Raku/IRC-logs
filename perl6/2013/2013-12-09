[00:01] *** ikrs left
[00:12] *** balders_dod_ joined
[00:13] *** balders_dod_ left
[00:14] *** balders_dod joined
[00:15] <colomon> \o/

[00:16] *** ikrs joined
[00:21] *** Mouq joined
[00:26] *** sivoais left
[00:27] <[Coke]> colomon: ?

[00:27] <colomon> rakudo-moar added in.

[00:27] <colomon> you must think it's getting close enough to consider....

[00:27] *** SevenWolf left
[00:29] <[Coke]> pay no attention to the man behind the mirror.

[00:31] <[Coke]> I'm just hoping to catch it when it starts.

[00:37] <colomon> I apologize for not having pushed Niecza to a clean test suite. 

[00:37] <colomon> Got sidetracked trying to figure out how to fix the :sigspace issue.

[00:41] *** jnap joined
[00:42] *** kivutar left
[00:45] *** jnap left
[00:47] *** dayangkun joined
[00:47] *** wsri left
[00:50] *** wsri joined
[00:53] *** btyler joined
[01:03] *** zakharyas left
[01:03] *** Ben_Goldberg joined
[01:04] *** BenGoldberg left
[01:33] *** SevenWolf joined
[01:33] <TimToady> masak: your first two examples are missing the RHS of a =>

[01:35] *** jnap joined
[01:39] *** dayangkun left
[01:41] <lue> S03/Adverbs: "while    $a < 1 && $b == 2 :carefully    does the && carefully because && is of tighter precedence than "comma"." I'm not sure how the comma precedence level applies here.

[01:44] *** rurban1 left
[01:45] <lue> S03/Adverbs is kind of weird in general. TimToady, in the case of  $a < 1 and $b == 2  , would an adverb after that apply to 'and' instead of '==', because 'and' would be the topmost (i.e. loosest) operator in the set?

[01:48] <TimToady> no, adverbs parse tighter than item asssignment

[01:48] <lue> I don't know, "slightly tighter than item assignment" and "applies to the topmost operator" seem like opposing statements, at least by my understanding of "topmost". What doesn't help is that unexplained mention of the comma precedence level.

[01:49] <TimToady> probably a fossil

[01:49] *** sivoais joined
[01:50] <lue> I think I'm starting to see. But then I don't understand how replacing 'and' with '&&' stops applying to ==, since == is still tighter than &&. Or is that thanks to topmost meaning "loosest operator tighter than item assignment"

[01:52] <lue> Hang on. Using the precedence table at the top of S03, could I start from just above item assignment, and just keep going up the list (wrapping around if necessary), and use the first operator precedence that occurs after either ( or the start of the statement?

[01:55] *** MikeFair left
[01:56] *** MikeFair joined
[01:56] <TimToady> it's no different from how any other infix at a given precedence is parsed, except there's no right-hand argument, and no infix :)

[01:56] <lue> *rightmost op of the first op. precedence that is found after either in the statement or paren group, going through the levels like that, to be clear

[01:56] <colomon> r: say (0x28010, 0x28011, 0x28012).chrs.ords

[01:56] <camelia> rakudo-jvm 0bf3de: OUTPUT«55392 56336 55392 56337 55392 56338␤»

[01:56] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«163856 163857 163858␤»

[01:57] <colomon> bad rakudo jvm

[01:57] <lue> TimToady: OK, so is that talk of "topmost op, i.e. last-used" wrong? Because that would seemingly prefer looser over tighter.

[01:58] <TimToady> no different from an infix, which pays attention to the loosest thing to the left, but only up to a point

[01:58] <TimToady> that's how operator precedence works

[01:59] <lue> So I'll just mentally substitute :adverb with something like    ö <INVISIBLE RHS> and work through example expression that way :)

[02:00] * lue will replace the S03/Adverbs section once he's reassured his understanding. It reads like an oooold piece of writing.

[02:02] <colomon> …. seems like .ords could be fixed in jvm?

[02:03] <lue> colomon: yeah it does :) Stupid Java strings...

[02:04] *** thou joined
[02:10] <lue> TimToady: I'll also assume that adverbs don't even try to apply to terms, or alternatively try to apply to them but move on to the next token if they can't.

[02:10] <lue> Also,  N  Terms             42 3.14 "eek" qq["foo"] $x :!verbose @$array . That adverb's not supposed to be there, is it? Or are they just that weird?

[02:11] <TimToady> that is not an adverb

[02:12] <TimToady> adverbs occur only in infix position

[02:15] <lue> Ah, so calling it an adverb in foo(:!verbose) is erroneous then. Only 1 + 2 :adv and q:adv are adverbs then.

[02:15] <diakopter> infix? I thought postfix

[02:16] <lue> diakopter: infix position because preceding whitespace is OK.

[02:16] <lue> (OK for adverbs, I mean)

[02:16] <diakopter> oh

[02:19] <btyler> anyone else gotten to hello world using rakudo on moar? I noticed that rakudo's Configure.pl has entries for it, but things die in stage0, saying that the moar executable can't find libmoar, so maybe I'm adopting a little too early :)

[02:20] <btyler> doing --backends=moar --gen-moar

[02:22] <lue> Just to clarify, 1 + 2 :adv -> adverb, q:adv// -> adverb, foo(:adv) -> named param, !adverb, and adverbs skip over terms, like 2 in the  1 + 2 :adv  case.

[02:22] <diakopter> r: say :1<111>

[02:22] <camelia> rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/IyXwfD53Ua␤Radix 1 out of range (allowed: 2..36)␤at /tmp/IyXwfD53Ua:1␤------> [32msay :1<111>[33m⏏[31m<EOL>[0m␤»

[02:22] <camelia> ..rakudo-jvm 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/tWcRroqwW2␤Radix 1 out of range (allowed: 2..36)␤at /tmp/tWcRroqwW2:1␤------> [32msay :1<111>[33m⏏[31m<EOL>[0m␤»

[02:23] <diakopter> r-j: say :2<0>

[02:23] <camelia> rakudo-jvm 0bf3de: OUTPUT«0␤»

[02:23] <diakopter> why can't there be unary

[02:23] <diakopter> :1<0> is zero, :1<00> is one, :2<000> is two..

[02:24] <lue> diakopter: :1<0> would be one, methinks.

[02:24] <diakopter> but you need a zero..

[02:24] <lue> :1<> == 0 :)

[02:24] <benabik> I've usually seen Unary spelled 1, 11, 111, 1111, 11111, 111111, 11111111.

[02:25] * lue thinks there's a reason P6 doesn't support unary :P

[02:25] <diakopter> benabik: which is zero

[02:25] <lue> benabik: that may be, but math say the first digit of any number system is 0 .

[02:25] <lue> r: say "000".chars # hey look, unary!

[02:26] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«3␤»

[02:26] <benabik> lue++

[02:26] <[Coke]> btyler: I'm currently getting a segfault building nqp-moar.

[02:27] <btyler> [Coke]: ah, ok

[02:27] <[Coke]> jnthn++ had it working to the point of hello world in the past few days

[02:28] <diakopter> r: my \Fault := Failure;

[02:28] <camelia> rakudo-jvm 0bf3de: OUTPUT«Unhandled exception: Cannot look up attributes in a type object␤  in sink (gen/jvm/CORE.setting)␤  in MAIN (gen/jvm/main.nqp:47)␤  in  (gen/jvm/main.nqp:41)␤  in  (gen/jvm/main.nqp)␤␤»

[02:28] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«Cannot look up attributes in a type object␤current instr.: 'sink' pc 442380 (src/gen/p-CORE.setting.pir:183502) (gen/parrot/CORE.setting:12028)␤called from Sub 'MAIN' pc 379 (src/gen/perl6.pir:140) (gen/parrot/main.nqp:46)␤called from Sub '' pc 317…»

[02:28] <[Coke]> maybe it's just working on windows, though. Iunno

[02:28] <lue> I segfault after a couple State Vars NYI lines, during setting.

[02:28] <lue> nvm, during Test.pm

[02:29] *** thou left
[02:30] *** thou joined
[02:30] <diakopter> well, once the segfaults stop happening, there'll be no segfaults... ;)

[02:34] <benabik> Awh.  Fallbacks don't participate in MRO.  And here I thought I had a "clever" idea: Any.^add_fallback(-> $, $ {True}, -> $, $ { -> *@, *% {} }) # no more method not found errors.

[02:41] <colomon> hmmm, is there a slick way of running through a list and combining certain neighboring elements?

[02:42] <colomon> oh, hey, better solution anyway.  :)

[02:45] *** rurban1 joined
[02:49] *** rurban1 left
[02:58] *** jnap left
[03:03] *** grep0r left
[03:16] *** grep0r joined
[03:27] *** rewm left
[03:28] <colomon> btw, PDF::Grammar has failed the last two nights in the smoke test.

[03:29] *** jnap joined
[03:29] *** grep0r left
[03:32] *** grep0r joined
[03:34] *** jnap left
[03:44] *** rurban1 joined
[03:47] <colomon> huh, second issue in a night where I want to run through a list and combine certain neighboring pairs.

[03:49] *** rurban1 left
[03:50] *** raiph left
[03:51] *** raiph joined
[03:53] *** rurban1 joined
[04:05] *** ssutch joined
[04:18] *** preflex left
[04:19] *** preflex_ joined
[04:19] *** ChanServ sets mode: +v preflex_

[04:19] *** preflex_ is now known as preflex

[04:22] <lue> TimToady: would it be right to describe adverbs as skipping tokens it that can't be given an adverb? I ask because some things at Term precedence, like foo(), can take an adverb, while other things at the level, such as "string", can't.

[04:22] <lue> s:2nd/it//

[04:24] *** rewm joined
[04:25] <[Coke]> r: say "what" :the

[04:25] <camelia> rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/W1ZbcBSdWS␤You can't adverb that␤at /tmp/W1ZbcBSdWS:1␤------> [32msay "what" :the[33m⏏[31m<EOL>[0m␤    expecting any of:␤        pair value␤»

[04:25] <camelia> ..rakudo-jvm 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Uip7_P30gD␤You can't adverb that␤at /tmp/Uip7_P30gD:1␤------> [32msay "what" :the[33m⏏[31m<EOL>[0m␤    expecting any of:␤        pair value␤»

[04:27] <lue> r: say 1 + 2 :adv

[04:27] <camelia> rakudo-jvm 0bf3de: OUTPUT«Unexpected named parameter 'adv' passed␤  in block  at /tmp/GU_DbS5ljS:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1086␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1292␤  in any command_eval at gen/jvm/stage2/NQPHLL.nqp:1196␤  in any command_…»

[04:27] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«Unexpected named parameter 'adv' passed␤  in sub infix:<+> at gen/parrot/CORE.setting:3922␤  in block  at /tmp/MrOuqE2VGV:1␤  in any  at /tmp/MrOuqE2VGV:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.…»

[04:27] <lue> r: say 2 :adv

[04:27] <camelia> rakudo-jvm 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/jYqk7yxlpT␤You can't adverb that␤at /tmp/jYqk7yxlpT:1␤------> [32msay 2 :adv[33m⏏[31m<EOL>[0m␤    expecting any of:␤        pair value␤»

[04:27] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/59_1KjgAkh␤You can't adverb that␤at /tmp/59_1KjgAkh:1␤------> [32msay 2 :adv[33m⏏[31m<EOL>[0m␤    expecting any of:␤        pair value␤»

[04:28] * lue wonders which term the error triggers on: the 2 or the 'say'

[04:29] *** rewm left
[04:30] *** jnap joined
[04:31] <lue> std: 1 && 2 :adv

[04:31] <camelia> std 3b262af: OUTPUT«ok 00:01 123m␤»

[04:31] <lue> std: 1 and 2 :adv

[04:31] <camelia> std 3b262af: OUTPUT«ok 00:01 123m␤»

[04:31] <lue> rn: 1 and 2 :adv

[04:31] <camelia> rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/lvwI95zYFl␤You can't adverb that␤at /tmp/lvwI95zYFl:1␤------> [32m1 and 2 :adv[33m⏏[31m<EOL>[0m␤    expecting any of:␤        pair value␤»

[04:31] <camelia> ..rakudo-jvm 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/OyCeYOG5O_␤You can't adverb that␤at /tmp/OyCeYOG5O_:1␤------> [32m1 and 2 :adv[33m⏏[31m<EOL>[0m␤    expecting any of:␤        pair value␤»

[04:31] <camelia> ..niecza v24-108-g17d73e4: OUTPUT«(timeout)[auto-compiling setting]␤»

[04:34] *** jnap left
[04:34] <lue> Not being able to apply an adverb to things below the Adverb pseudo-level is a bug, right? Or is it?

[04:36] <benabik> I think that it's syntactically fine, but semantically bad.  I think Rakudo adverbs by passing it as a named parameter, and you can't pass things to 2.

[04:38] <lue> I think I'm starting to see how to mentally parse adverbs now though. I'm imagining that operators turn itself and its terms into a weird... thing that can accept adverbs if given. Since 'and' is below the adverb level, it doesn't get a chance to form this object before adverbs happen.

[04:41] <lue> Grrr. I'm sorely missing a well-written S03/Adverbs. I'm afraid I'll end up having to leave operators out of my Adverbs post, simply because I can't explain it myself :(

[04:42] <lue> Or perhaps it's a rakudo that's not working exactly right on the subject that's messing me up :/

[04:43] <lue> r: 1 == 2 :adv; # case in point

[04:43] <camelia> rakudo-jvm 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/EOqManUWpn␤You can't adverb that␤at /tmp/EOqManUWpn:1␤------> [32m1 == 2 :adv[33m⏏[31m; # case in point[0m␤    expecting any of:␤        pair value␤»

[04:43] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/aefBrHPmTx␤You can't adverb that␤at /tmp/aefBrHPmTx:1␤------> [32m1 == 2 :adv[33m⏏[31m; # case in point[0m␤    expecting any of:␤        pair value␤»

[04:46] <benabik> Hm...  It throws that error when attempting to attach an adverb to something that isn't a call or callmethod.

[04:47] <benabik> I'm guessing that's a parse error on Rakudo's part, attaching :adv to the 2, where you're expecting it to be on the ==

[04:48] * lue is tempted to say that adverbs should be turned into a proper metaop or something (==:adv ?), because absolutely none of this helps his understanding of how opadvs work.

[04:49] <benabik> Operator adverbs are named parameters to the infix:<> sub, supplied postfix to the operator itself.

[04:49] <benabik> OR at least that's what Rakudo is doing when it parses it correctly.

[04:49] <lue> .oO(You must correctly identify what operator the given adverb attaches to in various complex expressions. All you have to figure this out is an outdated S03/Adverbs and a buggy Rakudo.)

[04:50] <lue> benabik: my issue comes with being able to figure out 1) which operator the adverb applies to in complex expressions (i.e. more than 1 operator), and a related 2) where to put an adverb so that it goes to the right operator.

[04:51] <benabik> lue: Picture parens from the beginning of the expression to just before the adverb.  It applies to whatever operator happens last in there.

[04:51] <benabik> That's way too loose an explination.

[04:52] <lue> :)

[04:52] <benabik> Works as long as there's no operator with lower precidence.

[04:52] <lue> like 'and' ?

[04:52] *** sizz_ joined
[04:52] <benabik> Yes.  Anything in the list after adverbs.

[04:53] <benabik> I think Adverbs is at the wrong indent level in S03's TOC.

[04:53] <lue> perhaps a little bit :)

[04:53] *** sizz left
[04:53] <benabik> It's a precedence level, not the start of a new section.

[04:54] <lue> so C<1 && 2 || 3 :adv> applies to the &&, and C<1 and 2 || 3 :adv> applies to who knows under the () visualization, right?

[04:54] <benabik> Adverbs are a very loose postfix op, which is...  odd.

[04:54] <benabik> Generally postfix ops bind very tightly.

[04:55] <lue> I think I've come to the tentative conclusion that things which modify the behavior of operators should be attached directly to the operator. If only there was an existing mechanism adverbs could utilize...

[04:56] <lue> .oO(I think when I understand exactly how adverbs work with operators, I'll stop feeling an eagerness to kill it in its current form.)

[04:56] <benabik> Sorting out what :adv attaches to is no different than sorting out what order the && , ||, and and work in.

[04:57] <lue> benabik: that's what TimToady said :) . The problem is is that I'd like to play around with this, and a certain compiler has decided to be completely broken in that respect.

[04:57] <benabik> Unfortunitly EXPR is a very difficult rule to poke around in, otherwise I'd try to fix it.  :-/

[04:57] <lue> And the part of the spec that I would turn to in times like this is outdated and way-too-sparse.

[04:58] <benabik> I wonder if it would make more sense to have adverbs parse literally as a postfix operator with loose precedence.

[04:58] <benabik> Oh, whitespace.  I see.

[04:59] <lue> I vote that they should behave like metaops (metainfix?) . Makes it consistent with other operator-modifiers. Of course, my vote only counts if changing it is desired :)

[05:00] <benabik> I think the only errors in the POD are the reference to "comma" prec and the bad heading level for the section.

[05:00] <lue> Ideally, I'd like to at least be able to do    1 == :adv 2    , but that's apparently TTIAR . To rakudo and std

[05:00] *** rewm joined
[05:01] <benabik> That would be obnoxious with long adverbs.  Would lose sight of what operator is happening before getting to the second argument.

[05:02] <benabik> $x eqv :ok<$x is equivalent to $y+2> $y+2; # yuck

[05:02] <benabik> Also, in most calls you put named arguments after positional.  :-)

[05:02] <lue> benabik: another (seeming) error: "$a < 1 && $b == 2 :carefully" should still affect ==, as == is tighter than &&, no?

[05:03] <benabik> lue: It applies to the thing that is loosest, but not looser than item assignment.

[05:05] <lue> OK. That's a helpful rule. Now I'm concerned for the guy that redefines the 'or' op to be able to inclusive and exclusive or, and expects to be able to use adverbs to switch behavior :)

[05:05] *** rewm left
[05:05] <benabik> Well, you can do it for ||.  :-D

[05:06] <lue> but this hypothetical guy moved old 'or' to 'ior'. I'm not sure what to move old '||' to :D

[05:07] <lue> benabik: that helps me to explain operators for my advent post at least. (The looser part in particular explains why terms don't always take the adverb.)

[05:08] <lue> But I still contest that S03/Adverbs is poorly written for this. And yes, I've already happily volunteered to rewrite it when I understand adverbs (I will take a successful review of that part of my advent post tomorrow as proof of understanding ☺)

[05:09] <benabik> Well, I didn't say it wasn't poorly written.  Just that it had few factual errors.  :-D

[05:09] <lue> :)

[05:10] *** Mouq left
[05:10] <lue> In the case of    1 || 2 and 3 :adv    , should the adverb apply to the ||, or throw its hands up in the air because who knows anymore with that looser-than-adverbs op in there?

[05:10] <benabik> ((1 || 2) and (3 :adv))

[05:11] <benabik> And then...   `3 :adv`?  WTF, mate.

[05:11] <benabik> It won't "hop over" looser operators to find an operator to attach to.

[05:11] <lue> OK. 1 and 2 || 3 :adv would become    (1 and (2 || 3 :adv)), which makes sense. ...right?

[05:12] <benabik> Right.

[05:12] <benabik> You can do `1 || 2 :adv and 3`

[05:12] <benabik> std: 1 || 2 :adv and 3

[05:13] <camelia> std 3b262af: OUTPUT«ok 00:01 123m␤»

[05:13] <lue> I just came up with a module idea: Ofun::ParenAll --- learn operator precedence with this handy code transformer :)

[05:13] <benabik> std: 1 || 2 :adv && 3

[05:13] <camelia> std 3b262af: OUTPUT«ok 00:01 123m␤»

[05:13] <benabik> +1

[05:14] <lue> It would transform  1 and 2 || 3  into  ((1) and ((2) || (3)))  , for example. (perhaps spaces between parens though)

[05:15] <lue> ...wait. That would effectively require a reimplementation of EXPR, wouldn't it? :/ Or at least using it, and thus replicating Perl 6's specific use of EXPR.

[05:16] <benabik> It might be best to try to pretty-print the AST from Perl6::Grammar instead.

[05:17] *** carlin joined
[05:18] <lue> Yeah :) . I was thinking of a learn-me("expr") function or something though.

[05:18] *** btyler left
[05:20] <benabik> No reason learn-me couldn't call Perl6::Grammar.parse(:rule<EXPR>)  :-)

[05:20] <lue> And I assume   1 || 2 ^^ 3 :adv applies to ^^ (in case of equal level, rightmost op wins?)

[05:20] <benabik> Erm.

[05:20] <carlin> masak: "So hash entries (a key plus a value) really become more of a thing in Perl 6 than they every were in Perl 5." s/every/ever

[05:21] <benabik> Which one wins is based on associativity.

[05:21] <lue> ( ( (1) || (2) ) ^^ (3) :adv ) is how I read that.

[05:22] * lue likes the sound of Ofun::ParenAll more and more :)

[05:22] <benabik> Yes.  they're left-associative.  So ((1 || 2) ^^ 3) :adv

[05:24] <lue> and thus 1 ** 2 ** 3 :adv is ( ( (1) ** ( (2) ** (3) ) ) :adv )

[05:24] <benabik> Yes.

[05:24] *** [Sno] left
[05:25] <lue> .oO(AllParen should alternate between inter-paren space and no inter-paren space for max readability, methinks)

[05:25] * benabik has always preferred spaces around operators, but none around parens.

[05:27] <lue> O.o I just realized: if you think of the colon in an adverb as a double bond (chemistry), then adverbs are an infix that's double bonded to the LHS! :D (normal infixes are single bonded: i.e. 1 + 2 is 1 •+• 2)

[05:27] <benabik> heh

[05:30] * lue wonders what something like  ⫶?? !! would mean :)

[05:30] <benabik> That you've gone quite mad.

[05:30] *** carlin left
[05:31] *** jnap joined
[05:31] <benabik> Naively, $x ⫶?? !! would mean if $x is true return $x, otherwise return $x.  :-D

[05:32] <lue> (EXPR) ⫶??!! --> ?EXPR ?? EXPR !! !EXPR, obviously :)

[05:33] <lue> Another module idea, one that I'm not so eager to pursue:  Ofun::OpBonds --- Ever wanted to double- or triple-bond operators to arguments? Now you can!

[05:34] <benabik> sub postfix:<:+>($x) { $x * 2 }; sub postfix:<:*>($x) { $x ** 2 }

[05:35] *** jnap left
[05:35] <lue> Ideally •, :, and ⫶ would be metaops :)

[05:43] <benabik> Well, ⫶ is just a special case for ??!!.  There is no generic trinary operator category.

[05:44] <benabik> In fact ??!! itself is infix, with an is parsed that has another expression in the middle of it.  :-D

[05:48] *** thou left
[05:49] * lue imagines a incircumfix category

[05:49] <lue> *an

[05:51] *** kaleem joined
[05:55] <benabik> I don't think we want to encourage that kind of behavior.  :-D

[06:00] *** rurban1 left
[06:02] *** SamuraiJack_ joined
[06:03] <lue> Here's my Day 10 post for review, #perl6: https://gist.github.com/lue/94a97d2e8eb96e424471

[06:04] <lue> Good ♘ all o/

[06:04] <raiph> \o

[06:06] <benabik> lue: line 117: $z and $y :adverb  # applies to and.  No it doesn't.  and is looser than item assignment.  It applies to the $y, which is probably not what you meant.

[06:11] <TimToady> masak: also => is right associative, as . is in Lisp

[06:14] *** Ben_Goldberg left
[06:16] <lue> benabik: fixed (really gone now)

[06:17] <lue> (and yes, I do mean &, not &&)

[06:19] *** darutoko joined
[06:23] <raiph> r-p: sort 1, 4, 3

[06:23] <camelia> rakudo-parrot 0bf3de: ( no output )

[06:23] <raiph> r-p: say sort 1, 4, 3

[06:23] <camelia> rakudo-parrot 0bf3de: OUTPUT«1 3 4␤»

[06:24] <raiph> p5eval: say sort 1, 3, 2

[06:31] *** [Sno] joined
[06:31] *** jnap joined
[06:34] *** kaleem left
[06:36] *** jnap left
[07:02] *** rewm joined
[07:07] *** rewm left
[07:18] *** dmol joined
[07:26] *** rurban left
[07:29] *** rurban joined
[07:32] *** jnap joined
[07:36] *** jnap left
[07:38] *** Piers_ joined
[07:46] *** fhelmberger joined
[07:47] *** fhelmberger left
[07:48] *** fhelmberger joined
[07:52] *** lizmat left
[07:52] *** fhelmberger left
[08:00] *** rewm joined
[08:00] *** Piers_ left
[08:05] *** rewm left
[08:05] *** lizmat joined
[08:22] *** rindolf joined
[08:22] *** kaleem joined
[08:23] *** FROGGS joined
[08:30] *** rewm joined
[08:33] *** Piers_ joined
[08:33] *** jnap joined
[08:35] *** rewm left
[08:36] *** sqirrel joined
[08:37] *** jnap left
[08:42] *** fhelmberger joined
[08:49] *** rindolf left
[08:51] *** lizmat left
[08:54] *** SevenWolf left
[09:06] *** rewm joined
[09:12] <hoelzro> morning #perl6!

[09:16] <FROGGS> hi hoelzro 

[09:17] <sjn> good * #perl6

[09:19] <hoelzro> ahoy FROGGS, sjn

[09:20] <FROGGS> o/

[09:23] *** denis_boyun joined
[09:23] *** ikrs left
[09:34] *** jnap joined
[09:38] *** jnap left
[09:39] *** dakkar joined
[09:59] *** robinsmidsrod left
[09:59] *** tgt joined
[10:00] *** tgt left
[10:00] *** robinsmidsrod joined
[10:05] <raiph> r-p: my enum Day <<Mon Tues Wed Thur Fri Sat Sun>>; $_ = DateTime.new(now); say sort { Day(.day-of-week - 1) }, 3, 4

[10:06] *** camelia left
[10:06] <raiph> double oops (ww AND i think i killed camelia)

[10:07] <FROGGS> raiph: no, I think I did that in /privmsg a few minutes ago :/

[10:08] *** dayangkun joined
[10:10] <moritz> evalbot control restart

[10:10] *** camelia joined
[10:10] *** raydiak left
[10:11] *** ChanServ sets mode: +v camelia

[10:11] <moritz> nqp-p: say('alive') # first one will be slooow

[10:11] <camelia> nqp-parrot: OUTPUT«alive␤»

[10:12] <moritz> or not :-)

[10:12] <moritz> r: say 42

[10:12] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«42␤»

[10:13] *** sqirrel left
[10:20] *** dayangkun left
[10:21] *** raydiak joined
[10:28] *** tgt joined
[10:31] *** ssutch left
[10:34] *** jnap joined
[10:37] *** sqirrel joined
[10:38] *** sqirrel_ joined
[10:39] *** sqirrel left
[10:39] *** jnap left
[10:40] *** rindolf joined
[10:40] *** sqirrel joined
[10:43] *** sqirrel_ left
[10:50] *** sftp left
[10:52] *** sftp joined
[10:54] *** tgt left
[11:09] *** denis_boyun left
[11:11] *** denis_boyun joined
[11:13] *** dmol left
[11:17] *** rewm left
[11:26] *** rindolf left
[11:32] *** rewm joined
[11:32] *** rewm left
[11:33] *** sqirrel left
[11:36] *** SamuraiJack_ left
[11:39] *** denis_boyun left
[12:06] *** DrEeevil left
[12:07] *** bonsaikitten joined
[12:08] *** dmol joined
[12:09] *** kaare_ joined
[12:10] *** bonsaikitten left
[12:12] *** bonsaikitten joined
[12:27] *** telex left
[12:28] *** telex joined
[12:30] <FROGGS> ==> Successfully installed panda

[12:30] <FROGGS> <HANG>

[12:30] <FROGGS> ummm :/

[12:30] <tadzik> yeah

[12:30] <tadzik> to-json in a loop

[12:30] <tadzik> slooooow

[12:30] <FROGGS> tadzik: ahhh

[12:30] <FROGGS> so I'll wait :o)

[12:31] <tadzik> I guess I should make it one to-json, may turn out to be less tragic. May not

[12:31] <FROGGS> it is a modified panda btw, so I might be to blame anyway

[12:31] <tadzik> in emmentaller, it used to take a couple of minutes for this ste

[12:32] <FROGGS> done!

[12:32] <FROGGS> took about 5 minutes I think

[12:32] <FROGGS> brb

[12:32] <masak> good day, #perl6

[12:32] <tadzik> hey hey masak 

[12:33] <FROGGS[mobile]> hi masak

[12:33] *** timotimo left
[12:35] <FROGGS[mobile]> tadzik: I am almost at a point where I can run panda from my S11 - compliant installation

[12:35] <tadzik> awesome

[12:36] *** jnap joined
[12:39] <masak> carlin: re s/every/ever/ -- thank you; fixed.

[12:39] <masak> carlin++

[12:39] <FROGGS> tadzik: can you give me a commit bit for panda? I'd like to push to a branch today or tomorrow

[12:40] <masak> someone seems to have made &gt; out of > and saved my RHSes, fixing TimToady++'s bug.

[12:40] <FROGGS> tadzik: I swear I don't touch master :o)

[12:40] <hoelzro> so I've been trying to debug that stupid parser error I found last week, and I'd like to try to change the grammar without having to recompile the setting

[12:40] <FROGGS> p: say %*LANG<perl6>

[12:40] <camelia> rakudo-parrot 0bf3de: OUTPUT«postcircumfix:<{ }> not defined for type Failure␤  in method gist at gen/parrot/CORE.setting:12020␤  in method gist at gen/parrot/CORE.setting:1014␤  in sub say at gen/parrot/CORE.setting:12920␤  in block  at /tmp/JUmURjP17F:1␤  in any  at /tmp…»

[12:40] <masak> TimToady: dang! shoulda double-checked "left-associative". I did think through it, but clearly that wasn't enough :/

[12:40] <masak> fixed.

[12:41] *** jnap left
[12:41] <hoelzro> however, rakudo complains about "missing or wrong version of dependency src/Perl6/Grammar.nqp"; I'm guessing that there's some tracking of the checksum that the setting was built with or something?

[12:41] <FROGGS> hoelzro: correct

[12:41] <hoelzro> good, then my instincts are right =)

[12:41] <masak> benabik: sorry I failed to mention you in the post. I planned to but forgot :/

[12:41] <hoelzro> is there a way I can circumvent that?

[12:41] <masak> benabik: I'll add it in a comment.

[12:42] <FROGGS> hoelzro: I don't know any

[12:42] <FROGGS> hoelzro: what do you want to change btw?

[12:43] <hoelzro> well, I want to build the setting so that perl6 works, but I want to alter the parser to see if I can find the source of this odd bug

[12:43] <FROGGS> ahh

[12:43] <FROGGS> :/

[12:43] <hoelzro> because I think the alterations I want to make will cause the setting to fail to build

[12:43] <masak> lizmat: fixed -- changed to 'means the same as :blackberries($blackberries)' -- thanks

[12:44] <FROGGS> masak++ # post post fixing

[12:45] <hoelzro> well

[12:46] <hoelzro> I have a hunch about how list assignment could be messing up the pars

[12:46] <hoelzro> *parse

[12:46] <hoelzro> so I wanted to fiddle with it a bit

[12:46] <hoelzro> and see if that generated the correct AST for the scalar assignment below

[12:47] <masak> FROGGS: I should really be writing slides. I'm on a conf, and I'm on to talk for an hour day after tomorrow...

[12:47] <masak> FROGGS: haven't been able to conjure up the right level of panic yet.

[12:48] <masak> oh, speaking of which. there's a gap in the schedule on day 13. https://github.com/perl6/mu/blob/master/misc/perl6advent-2013/schedule

[12:48] <FROGGS> PANIC!!!!

[12:48] <masak> hey, calm down :P

[12:48] <FROGGS> *g*

[12:48] <FROGGS> I can't after four cups of coffee :o)

[12:49] <masak> I will be able to cover the 13th if need be -- I can probably write it on Thursday evening.

[12:49] <tadzik> FROGGS: sure :)

[12:49] <masak> but I would prefer it (as usual) if someone else jumped in.

[12:49] <FROGGS> masak: I'd like to read something from TimToady++

[12:49] *** sqirrel joined
[12:50] <tadzik> done

[12:50] <masak> FROGGS: still hoping TimToady++ decides to nab slot 24. :)

[12:51] <FROGGS> masak: that would be nice of course

[12:51] <masak> he did in 2010.

[12:52] * FROGGS looks

[12:53] <masak> he wrote about trolling :P

[12:59] *** atroxaper joined
[13:02] <FROGGS> tadzik: thank you!

[13:03] *** timotimo joined
[13:19] *** benabik left
[13:21] *** ggoebel113 joined
[13:22] *** dayangkun joined
[13:22] *** dayangkun left
[13:23] *** FOAD_ joined
[13:23] *** ggoebel112 left
[13:23] *** FOAD left
[13:23] *** FOAD_ is now known as FOAD

[13:34] *** denis_boyun joined
[13:37] *** jnap joined
[13:39] *** PZt left
[13:41] *** jnap left
[13:41] *** fhelmberger_ joined
[13:44] *** fhelmberger left
[13:49] *** dayangkun joined
[13:50] *** dayangkun left
[13:52] *** dayangkun joined
[13:52] *** dayangkun left
[13:52] *** hummeleB1 joined
[13:59] *** V_S_C joined
[14:02] *** kaleem_ joined
[14:04] *** wsri left
[14:05] *** GlacJAY joined
[14:05] <V_S_C> I'm trying Rakudo * on Windows

[14:06] <V_S_C> It says no ICU lib loaded

[14:06] *** kaleem left
[14:07] <V_S_C> I've copied the ICU bin directory to the PERL6 bin directory already

[14:07] <FROGGS> V_S_C: it is not that easy sadly

[14:07] *** kaleem joined
[14:08] *** kbaker joined
[14:08] <FROGGS> you would need to recompile parrot to get icu support

[14:08] <V_S_C> thats alright

[14:08] <V_S_C> ohh

[14:08] <FROGGS> yeah, it does some magic to detect that when configuring it

[14:08] <V_S_C> & I was thinking there might be version dependency..

[14:08] *** kaleem_ left
[14:08] <FROGGS> without it being found at that point, there is no chance to get the support for it later

[14:09] *** GlacJAY left
[14:11] *** PZt joined
[14:16] *** atroxaper left
[14:19] <V_S_C> @FROGGS That's documented http://en.wikibooks.org/wiki/Parrot_Virtual_Machine/Building_Parrot

[14:20] <V_S_C> Anything specific in the command line that I should remember?

[14:20] *** xinming_ joined
[14:20] *** jnap joined
[14:21] <FROGGS> V_S_C: you'd need a icu-config.bat to actually use this:

[14:21] <FROGGS> --icu-config 	Specify a location for the Unicode ICU library on your system.

[14:22] *** bluescreen__ joined
[14:22] <FROGGS> dunno if you get libicu for windows that has such a config program

[14:23] *** xinming left
[14:24] <V_S_C> thats alrite

[14:25] <V_S_C> I used HTTP::Easy::PSGI

[14:25] *** bluescreen100 left
[14:28] <V_S_C> Occassionally, I get recv failed: An existing connection was forcibly closed by the remote host.

[14:28] <V_S_C> Any suggestion?

[14:29] <FROGGS> no idea

[14:29] <V_S_C> k, thnx

[14:29] *** atroxaper joined
[14:29] *** PerlPilot is now known as PerlJam

[14:29] <FROGGS> last time I did something with IO::Socket::INET was like twelve months ago :/

[14:30] <V_S_C> The problems not with PERL

[14:30] <V_S_C> From inspecting it all I understood is

[14:31] <V_S_C> rarely the user's browser/system crashes or loses connectivity..

[14:31] <V_S_C> The improvement I need to make in the script

[14:31] <FROGGS> maybe use wireshark to hunt it down?

[14:31] *** wsri joined
[14:32] <V_S_C> is to bind new server socket

[14:32] <V_S_C> Right now, I manually restart..

[14:33] <V_S_C> I'll find the solution

[14:33] <FROGGS> I hope so :o)

[14:33] <V_S_C> I just asked as sometimes others have already solved..

[14:33] <FROGGS> yeah

[14:33] *** enikar joined
[14:34] <FROGGS> and it is always good that we know what is going on

[14:35] <V_S_C> :)

[14:36] *** cooper left
[14:39] *** btyler joined
[14:45] *** bbkr joined
[14:45] <bbkr> r: my $foo = 13; say :$foo

[14:46] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«␤»

[14:46] *** Ulti_ is now known as Ulti

[14:46] <bbkr> r: my $foo = 13; say (:$foo)

[14:46] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«"foo" => 13␤»

[14:47] <bbkr> should those two lines above return the same result (pair)?

[14:49] <FROGGS> I would expect that, yes

[14:49] * bbkr reports bug

[14:50] <FROGGS> bbkr++

[14:56] *** rindolf joined
[14:56] *** benabik joined
[14:58] *** sqirrel left
[15:01] *** markov left
[15:01] *** enikar left
[15:01] *** awwaiid_ left
[15:01] *** labster left
[15:01] *** kst left
[15:01] *** segomos left
[15:01] *** [particle] left
[15:01] *** sjn left
[15:01] *** ribasushi left
[15:01] *** Exodist left
[15:01] *** thou joined
[15:02] <timotimo> but that's just the result of say not taking slurpy named arguments

[15:02] <timotimo> should it?

[15:02] <FROGGS> ohh

[15:03] *** [particle] joined
[15:03] <FROGGS> p: my $bar = 42; sub foo(*@a) { say @a }; foo :$bar # it should complain then, no?

[15:03] <camelia> rakudo-parrot 0bf3de: OUTPUT«Unexpected named parameter 'bar' passed␤  in sub foo at /tmp/_x8bbPJSlN:1␤  in block  at /tmp/_x8bbPJSlN:1␤  in any  at /tmp/_x8bbPJSlN:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.nqp:1133␤  in a…»

[15:03] <FROGGS> it takes slurpy named args (silently)

[15:04] *** kst joined
[15:04] *** enikar joined
[15:05] <timotimo> that's because of the ... thingie

[15:05] <timotimo> API compatibility ... mumble mumble

[15:05] <timotimo> that makes every sub take a named slurpy if it doesn't provide one

[15:05] <timotimo> p: say &say.signature

[15:05] <camelia> rakudo-parrot 0bf3de: OUTPUT«:()␤»

[15:05] <timotimo> p: say &say

[15:05] <camelia> rakudo-parrot 0bf3de: OUTPUT«sub say() { ... }␤»

[15:05] <timotimo> er ... ok?

[15:06] *** awwaiid joined
[15:06] <timotimo> ah, yes, say takes (|)

[15:06] <FROGGS> I thought only methods swallow named slurpies

[15:06] *** V_S_C left
[15:06] <timotimo> yeah, that must be right

[15:06] <timotimo> look at the implementation of say; it takes a capture and iterates over the positionals only

[15:07] *** segomos joined
[15:07] *** sjn joined
[15:09] *** ribasushi joined
[15:10] *** Exodist joined
[15:11] *** sjn left
[15:15] *** SamuraiJack_ joined
[15:18] *** markov joined
[15:20] *** kaleem left
[15:20] *** sjn joined
[15:20] *** hummeleB1 left
[15:24] *** dmol left
[15:24] <colomon> Error while constructing error object:Could not locate compile-time value for symbol Syntax::Missing

[15:24] <colomon> Error while compiling, type X::Syntax::Missing

[15:25] <FROGGS> colomon: you did something wrong in the setting?

[15:25] <colomon> well, I'm hacking in the setting.

[15:25] <colomon> I haven't found anything obvious I did wrong yet

[15:25] <FROGGS> underneath these massages should be the attributes that would show up in the proper exception

[15:26] <FROGGS> messages*

[15:26] *** atroxaper left
[15:27] <colomon> ack, let a C++ comment slip into my p6 code

[15:29] *** salv0 left
[15:29] *** salv0 joined
[15:39] * timotimo idly stares at the EXPR code to figure out if it's easy or not to fix 10 < * < 20 code-gen

[15:42] *** ajr joined
[15:42] *** Fatalnix is now known as Chillectual

[15:42] *** ajr is now known as Guest41534

[15:42] *** Guest41534 is now known as ajr_

[15:42] *** Chillectual is now known as Fatalnix

[15:42] *** SamuraiJack_ left
[15:46] <colomon> errr… what's numeric bitwise or in p6?

[15:46] <colomon> oh!

[15:46] <colomon> never mind

[15:46] <colomon> C++ translation problems again

[15:47] *** pmichaud joined
[15:47] <pmichaud> good morning, #perl6

[15:47] <FROGGS> hi pmichaud!

[15:47] <timotimo> hello :)

[15:48] <FROGGS> pmichaud: you take #20? *cough* https://github.com/perl6/mu/blob/master/misc/perl6advent-2013/schedule

[15:48] <FROGGS> :P

[15:48] <pmichaud> Dec 20th is going to be a really busy day for me :)

[15:48] <FROGGS> :o)

[15:48] <pmichaud> plus I'm not sure what I'd write about -- I'm really rusty at the moment

[15:49] <FROGGS> I was not that serious :o)

[15:49] <pmichaud> Anyone know the magic needed to log into RT?  I don't seem to be able to do it.

[15:49] <FROGGS> my bitcard account works

[15:49] <timotimo> you're not supposed to write the 20th blogpost *on* the 20th :P

[15:49] <pmichaud> timotimo: I'm not supposed to write my presentations on the day I give them, either... but that hasn't stopped me from doing it.  :P

[15:50] <colomon> pmichaud++

[15:50] <FROGGS> "Service Temporarily Unavailable"

[15:50] <FROGGS> I lied

[15:50] <timotimo> :)

[15:50] <pmichaud> I'll just note #120735 here

[15:50] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120735

[15:50] <pmichaud> my $foo = 13;  say :$foo      # won't output anything

[15:50] <pmichaud> because :$foo is a named argument to say()

[15:51] <FROGGS> yeah, timotimo++ figured that

[15:51] <FROGGS> the question is: should say() just swallow it?

[15:51] <pmichaud> I was going to get onto RT to reject the ticket, but I can't get past bitcard

[15:52] <FROGGS> hmm, now I can log in

[15:52] <FROGGS> I clicked on "login as another user" in the ticket, and the on the bitcard thingy

[15:52] *** rurban1 joined
[15:54] *** xinming_ left
[15:54] <pmichaud> I got in now... I guess bitcard was having technical difficulties.

[15:54] <pmichaud> Okay, I posted my reply.

[15:55] <raydiak> broken webapps make the world go 'round :P

[15:55] <FROGGS> pmichaud++

[15:56] <colomon> The correct ifdef for jvm is #?if jvm     right?

[15:58] <FROGGS> yesrakudo/src/core/Array.pm:16:#?if jvm

[15:58] <FROGGS> so, yes

[15:58] <colomon> is there a #?else

[15:58] <colomon> or did I just make that up?

[15:58] *** Psyche^ joined
[15:59] <FROGGS> do: #?if !jvm

[15:59] <timotimo> what cool thing are you developing, colomon? :)

[15:59] <colomon> timotimo: I'm trying to fix .ords on JVM

[16:00] <colomon> the quick, hacky way, rather than redoing all the code to be properly utf-16

[16:01] <timotimo> that sounds helpful :)

[16:01] <colomon> well, it would help me.  :)

[16:02] *** Psyche^_ left
[16:02] <colomon> my STEP code is much faster on JVM, but I've got failing tests because .ords doesn't work right.

[16:03] *** fhelmberger_ left
[16:04] *** fhelmberger joined
[16:06] <colomon> arrrrrrrgh!

[16:07] *** ashleydev joined
[16:07] *** vaclavstrachon joined
[16:07] *** ashleydev left
[16:08] <dalek> roast: baa6ed0 | (Timo Paulssen)++ | S02-types/whatever.t:

[16:08] <dalek> roast: unskip a whatever+postcircumfix-method related test

[16:08] <dalek> roast: review: https://github.com/perl6/roast/commit/baa6ed0aab

[16:09] *** ashleydev joined
[16:11] *** xenoterracide joined
[16:13] *** ajr_ left
[16:15] *** ajr_ joined
[16:19] <timotimo> EXPR is kind of nontrivial ...

[16:20] *** [Sno] left
[16:23] <FROGGS> yay!! I can haz panda-p, panda-j, ...

[16:24] *** xinming joined
[16:28] <FROGGS> and this panda-p can be invoked like:

[16:29] <FROGGS> panda-p --auth=tadzik --ver=* install JSON::Pretty

[16:29] <FROGGS> --auth/name/ver is not passed to the real panda script, but handled by the panda-p wrapper

[16:29] *** denis_boyun left
[16:30] <FROGGS> and this wrapper lists all installed panda scripts if the auth/name/ver triple does not match any

[16:31] <timotimo> \o/

[16:31] <FROGGS> I like it :o)

[16:32] <moritz> advanced wrapper programming!

[16:33] <FROGGS> Yet Another Layer Of Indirection!

[16:33] <FROGGS> (tm)

[16:35] <moritz> at $work we have a very fun setup

[16:35] <moritz> it's a web application which allows you to create virtual machines

[16:35] <diakopter> I'll see your N+1 layers of indirection and raise you an Abstraction abstraction

[16:35] <moritz> it's a django web app, running as WSGI

[16:36] <moritz> and since forking and then killing the process isn't a good idea in that setup, it launches an external program via the 'at' daemon

[16:36] <FROGGS> hehe

[16:36] <moritz> that program is a shell script, which invokes ssh to another host

[16:36] <moritz> there a ~/.ssh/authorized_keys hook is called, which is another shell script

[16:37] <moritz> which calls a perl script, which uses some libraries to talk to a vmware SOAP API

[16:37] *** xenoterracide left
[16:37] <FROGGS> hehe

[16:37] <moritz> which in turn instructs one of the hypervisors to actually create the stupid VM

[16:37] <FROGGS> that sounds like fun :o)

[16:37] *** sqirrel joined
[16:37] <FROGGS> ohh, my wife is joining... need to hide /o\

[16:38] *** FROGGS left
[16:38] <moritz> today's mini challenge: count the number of wrappers in the setup above

[16:39] <benabik> moritz: O(n+m) where n is the maximum sane number of wrappers and m is a positive integer.

[16:39] <diakopter> moritz: sorry, 256-bit overflow when counting

[16:40] <moritz> benabik, diakopter: :-)

[16:45] <timotimo> http://questhub.io/realm/perl/quest/52a5f3c79f567a5a02000055 - feel free to give advice or just cheer me on from the sidelines

[16:46] <benabik> timotimo: rah, rah, rah

[16:48] *** sjohnson joined
[16:48] <timotimo> ooooh

[16:48] <timotimo> a perl6 port of Sereal might be a fun project

[16:49] <benabik> Sounds surreal.

[16:49] <timotimo> that could be the project's name :P

[16:51] *** zakharyas joined
[16:51] <sjohnson> Sounds sorear.

[16:51] <timotimo> turning the associativity of %chaining to right instead of left makes the whatever code generation work properly, so i *think* i know what line i have to look at more carefully

[16:52] <timotimo> (it does seem to break a whole lot of other spectests, though)

[16:59] *** kaleem joined
[17:03] *** fhelmberger_ joined
[17:06] *** fhelmberger left
[17:07] *** BenGoldberg joined
[17:10] *** denis_boyun joined
[17:16] <timotimo> oh yikes

[17:16] *** FROGGS joined
[17:17] *** hummeleB1 joined
[17:17] <timotimo> having multiple operators in a row curried into WhateverCode turns into a cascade of calls to older WhateverCode objects

[17:17] <timotimo> that can't be efficient

[17:17] <moritz> it's not :-)

[17:17] <moritz> if you can flatten that out, that would be awesome

[17:18] <timotimo> i'll have to look at that later

[17:19] <timotimo> in theory i could annotate the WhateverCode WVal node with the original QAST using the hash interface

[17:19] <timotimo> but *maybe* it's possible to re-use the existing inlining magic

[17:21] *** raiph left
[17:24] <timotimo> quest created

[17:25] *** vaclavstrachon left
[17:29] <FROGGS> lol

[17:29] <FROGGS> https://github.com/barbie/Acme-CPANAuthors-InMemoriam/blob/master/META.json#L44

[17:30] <FROGGS> the META.json has a "provides" section too, exactly like my S11 proposal :P

[17:30] <FROGGS> (and it almost has an identical structure)

[17:32] <timotimo> moritz: it turns out the performance difference isn't that big, at least in a very naive benchmark i just ran

[17:33] *** [Sno] joined
[17:33] <timotimo> the optimizer already "inlines" the inner blocks, but it does bindsig and friends each time

[17:37] <timotimo> http://questhub.io/realm/perl/quest/52a5fce49f567a5a0200005b/comment/52a6001a9f567ab87a000056

[17:44] <timotimo> i'm so used to reading the advent calendar post for the next day the evening before that i'm missing my daily advent calendar fix now :(

[17:48] *** kaleem left
[17:53] <timotimo> huh, the bug in the whatever currying of chains is different from what i thought it was o_O

[17:55] <timotimo> ooooh, duh!

[17:55] <timotimo> i'm silly

[17:56] *** dakkar left
[18:00] * nebuchadnezzar receives a SIGBEER: exit

[18:01] *** stevan__ left
[18:09] *** ajr_ left
[18:15] *** lizmat joined
[18:18] * timotimo has a prototype and disappears to a social gathering type of thing

[18:18] *** perigrin left
[18:18] *** perigrin joined
[18:19] * lizmat has finally arrive home, really

[18:19] <lizmat> *arrived

[18:21] <timotimo> the "can this be whatever-curried?" check is called pretty often. i wonder if it's worth looking at making it fail quicker in the common case

[18:21] <ashleydev> W

[18:22] *** dmol joined
[18:22] *** sqirrel left
[18:22] *** sqirrel_ joined
[18:23] *** woolfy joined
[18:32] *** zakharyas left
[18:35] *** ajr joined
[18:35] *** ajr is now known as Guest66087

[18:35] *** Guest66087 is now known as ajr_

[18:38] *** fhelmberger_ left
[18:42] *** Rotwang joined
[18:42] *** Rotwang left
[18:42] *** Rotwang joined
[18:45] <dalek> rakudo-star-daily: c37f216 | coke++ | log/ (5 files):

[18:45] <dalek> rakudo-star-daily: today (automated commit)

[18:45] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/c37f2166f2

[18:46] *** Piers_ left
[18:47] <timotimo> now that I'm out of the house i notice the somewhat obvious mistake my prototype has...

[18:47] <timotimo> oh well

[18:47] <FROGGS> that is life :o)

[18:47] *** meeeeee joined
[18:47] * FROGGS .oO( toilet++)

[18:47] *** meeeeee left
[18:48] *** Esylt joined
[18:48] <timotimo> I'll see if using my laptop at the social gathering will be acceptable

[18:51] *** Duchess left
[18:51] <timotimo> i think i kind of figured out what my code is supposed to look like now.

[18:57] *** araujo left
[18:57] *** araujo joined
[18:59] *** strich joined
[18:59] *** strich left
[19:02] *** darutoko left
[19:05] *** sqirrel joined
[19:06] *** sqirrel_ left
[19:08] *** ssutch joined
[19:10] <lue> hello world o/

[19:13] * lue re-pastes the link to his advent post draft: https://gist.github.com/lue/94a97d2e8eb96e424471

[19:14] * TimToady is in the middle of reading the old link; has it changed?

[19:14] <TimToady> well, it's the same link, but I'd still like to know if it changed :)

[19:15] <BenGoldberg> r: print :th(4)

[19:15] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: ( no output )

[19:15] *** SamuraiJack_ joined
[19:15] <BenGoldberg> r: print 1..10 :th(4)

[19:16] <TimToady> needs parens

[19:16] <camelia> rakudo-jvm 0bf3de: OUTPUT«Unexpected named parameter 'th' passed␤  in block  at /tmp/v4Rq0wMbwj:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1086␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1292␤  in any command_eval at gen/jvm/stage2/NQPHLL.nqp:1196␤  in any command_e…»

[19:16] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«Unexpected named parameter 'th' passed␤  in sub infix:<..> at gen/parrot/CORE.setting:7084␤  in block  at /tmp/VEp5DVulUz:1␤  in any  at /tmp/VEp5DVulUz:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.…»

[19:16] <BenGoldberg> r: print (1..10) :th(4)

[19:16] <camelia> rakudo-jvm 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/9A0DU207dT␤You can't adverb that␤at /tmp/9A0DU207dT:1␤------> [32mprint (1..10) :th(4)[33m⏏[31m<EOL>[0m␤»

[19:16] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/uaUC8DIVF3␤You can't adverb that␤at /tmp/uaUC8DIVF3:1␤------> [32mprint (1..10) :th(4)[33m⏏[31m<EOL>[0m␤»

[19:16] <TimToady> r: print (:4th)

[19:16] <camelia> rakudo-jvm 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/zrfSlM4Wms␤Malformed radix number␤at /tmp/zrfSlM4Wms:1␤------> [32mprint (:4[33m⏏[31mth)[0m␤    expecting any of:␤        number in radix notation␤»

[19:16] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/5gJs7Q52MB␤Malformed radix number␤at /tmp/5gJs7Q52MB:1␤------> [32mprint (:4[33m⏏[31mth)[0m␤    expecting any of:␤        number in radix notation␤»

[19:16] <BenGoldberg> r: print (:th(4))

[19:16] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«th      4»

[19:16] <TimToady> n: print (:4th)

[19:17] <camelia> niecza v24-108-g17d73e4: OUTPUT«(timeout)[auto-compiling setting]␤»

[19:17] <TimToady> heh

[19:17] <TimToady> pugs: print (:4th)

[19:17] <camelia> pugs: OUTPUT«4th        1»

[19:17] <TimToady> er, no

[19:18] <TimToady> n: print (:4th)

[19:18] <BenGoldberg> n: say 'alive'

[19:18] <camelia> niecza v24-108-g17d73e4: OUTPUT«(timeout)[auto-compiling setting]␤»

[19:18] <camelia> niecza v24-108-g17d73e4: OUTPUT«Rebuild in progress␤»

[19:18] <FROGGS> niecza is borken for days

[19:18] <timotimo> aaw :(

[19:19] <timotimo> i was considering telling TimK1 to try his code on niecza

[19:19] <TimToady> anyhoo, :4th should be equivalent to :th(4), and it looks like it isn' tin rakudo

[19:19] <moritz> it's only for regex adverbs

[19:19] <TimToady> probably an LTM failure

[19:20] <TimToady> it shouldn't do radix unless it's followed by a < or [

[19:25] <TimToady> it should be treating :4th as a complete token in <colonpair>

[19:25] <TimToady> it should try for radix only if there's no identifier after the 4

[19:27] <TimToady> looks like the colonpair is simply missing the alternative to parse :4th

[19:28] <moritz> r: say 'abcdef' ~~ m:4th/./

[19:28] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«｢d｣␤␤»

[19:28] <TimToady> obviously it's special-cased rather than being generalized

[19:29] <lue> TimToady: I only repasted in case people missed it the first time :)

[19:29] <moritz> ah, that's quotepair, not colonpair, parsing it

[19:29] <moritz> r: say 'abcdef' ~~ m:4x/./

[19:29] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«False␤»

[19:29] *** pecastro left
[19:29] <moritz> r: say 'abcdef' ~~ m:1i/A/

[19:29] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«｢a｣␤␤»

[19:29] <TimToady> it is a restricted case, since we allow only () for brackets in patterns

[19:30] <TimToady> std: :4th;  # but this has been here for ages

[19:30] <camelia> std 3b262af: OUTPUT«ok 00:01 120m␤»

[19:31] <lue> r: my $a = "ABA"; say $a ~~ s:2st/A/C/;

[19:31] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«True␤»

[19:31] <lue> r: my $a = "ABA"; $a ~~ s:2st/A/C/ say $a;

[19:31] <camelia> rakudo-jvm 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/RbA9HdB3k6␤Two terms in a row␤at /tmp/RbA9HdB3k6:1␤------> [32mmy $a = "ABA"; $a ~~ s:2st/A/C/ [33m⏏[31msay $a;[0m␤    expecting any of:␤        postfix␤        infix stopper␤    …»

[19:31] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/pUYW48d5t2␤Two terms in a row␤at /tmp/pUYW48d5t2:1␤------> [32mmy $a = "ABA"; $a ~~ s:2st/A/C/ [33m⏏[31msay $a;[0m␤    expecting any of:␤        postfix␤        infix stopper␤ …»

[19:31] <lue> r: my $a = "ABA"; $a ~~ s:2st/A/C/; say $a;

[19:31] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«ABC␤»

[19:36] <TimToady>  !($foo.bar() :adv) # applies to bar()   <-- I'd say, applies to .bar()

[19:36] <TimToady> since it's a postfix really

[19:37] <TimToady> std: 1 || 2 ^^ 3

[19:37] <camelia> std 3b262af: OUTPUT«[31m===[0mSORRY![31m===[0m␤"||" and "^^" are non-associative and require parens at /tmp/ZMLnNQlvzV line 1:␤------> [32m1 || 2 ^^ [33m⏏[31m3[0m␤Check failed␤FAILED 00:01 122m␤»

[19:37] <TimToady> r: 1 || 2 ^^ 3

[19:37] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: ( no output )

[19:37] <TimToady> that's a bug

[19:38] <TimToady> so you shouldn't use it for an example

[19:38] * lue should read the precedence table more closely it seems

[19:38] <TimToady> you probably just want something left associative there

[19:38] *** jnap left
[19:38] <TimToady> since ** is illustrating the right associative

[19:38] *** araujo left
[19:39] *** araujo joined
[19:39] <TimToady> or use a list associative with the same operator

[19:39] <TimToady> std: 1 || 2 || 3

[19:39] <camelia> std 3b262af: OUTPUT«ok 00:01 122m␤»

[19:40] <TimToady> though I'm not sure we have nailed down the semantics of that

[19:40] <TimToady> since it's really a variadic function, infix:<||>(*@args, :adverb)

[19:40] <TimToady> so it should probably be taken as applying on the list level, not the final op

[19:41] <lue> TimToady: fixed the issues in that block of examples.

[19:42] *** jnap joined
[19:43] <TimToady>  1 || 2 and 3 :adv # error, tries to apply to 'and'  <-- doesn't try to apply to the 'and' really, tries to apply to 3

[19:44] <TimToady> and we don't catch application of adverbs to terms right now

[19:44] <TimToady> std: 4 :foo

[19:44] <camelia> std 3b262af: OUTPUT«ok 00:01 122m␤»

[19:44] <TimToady> even std doesn't check that yet

[19:45] <benabik> Rakudo somewhat does.

[19:45] <benabik> r: 3 :adv

[19:45] <camelia> rakudo-jvm 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Vnlwy5uDDz␤You can't adverb that␤at /tmp/Vnlwy5uDDz:1␤------> [32m3 :adv[33m⏏[31m<EOL>[0m␤    expecting any of:␤        pair value␤»

[19:45] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/3tKROfp16h␤You can't adverb that␤at /tmp/3tKROfp16h:1␤------> [32m3 :adv[33m⏏[31m<EOL>[0m␤    expecting any of:␤        pair value␤»

[19:46] <TimToady> r: 1 || 2 and 3 :adv

[19:46] <camelia> rakudo-jvm 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/2rZbzJFJk7␤You can't adverb that␤at /tmp/2rZbzJFJk7:1␤------> [32m1 || 2 and 3 :adv[33m⏏[31m<EOL>[0m␤    expecting any of:␤        pair value␤»

[19:46] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/wzYY8wlZ8x␤You can't adverb that␤at /tmp/wzYY8wlZ8x:1␤------> [32m1 || 2 and 3 :adv[33m⏏[31m<EOL>[0m␤    expecting any of:␤        pair value␤»

[19:46] <TimToady> that's LTA unless it says what "that" is

[19:47] <benabik> Well, yes.

[19:48] <TimToady> and it should say '3', not 'and'  :)

[19:52] <lue> got it, let me know if the new comment is sufficiently descriptive.

[19:52] <TimToady> :!s doesn't interpolate scalars, and you have it as sigils

[19:53] *** zakharyas joined
[19:54] <lue> whoops, I had a feeling I'd mess that up once while writing that part :)

[19:55] <TimToady> you might explain that we restrict :nth(5) to parens because we want to be able to use any other brackets as the choose-your-own quotes

[19:56] <TimToady> s/named functions/named arguments/

[19:57] <TimToady> and I'd ss/create some named adverbs/declare some named parameters/

[20:00] <lue> Alright, got those things.

[20:01] <PerlJam> :th(4) really is :nth(4), right?  (missing the "n")

[20:01] *** Rotwang left
[20:01] <lue> r: say q:c(4)   # whoops, rakudo

[20:01] <lue> PerlJam: :nth(4) is the long way of saying :4nth :)

[20:01] <camelia> rakudo-jvm 0bf3de: OUTPUT«(timeout)»

[20:01] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«␤»

[20:01] <TimToady> Bool already works in MAIN to require a boolean value

[20:01] <moritz> PerlJam: :4th is really th => 4

[20:02] *** zakharyas left
[20:02] *** Rotwang joined
[20:02] *** zakharyas joined
[20:02] <lue> Rakudo should not let me not have delimiters right? Unless std is mistaken there :)

[20:02] <PerlJam> oh, I see.  I wasn't paying close enough attention

[20:03] *** btyler left
[20:04] <TimToady> std: say q:c(4)

[20:04] <camelia> std 3b262af: OUTPUT«[31m===[0mSORRY![31m===[0m␤No delimiter found at /tmp/fdPB8BVDEL line 1 (EOF):␤------> [32msay q:c(4)[33m⏏[31m<EOL>[0m␤Parse failed␤FAILED 00:01 124m␤»

[20:04] <TimToady> yes, STD has that right

[20:05] <lue> r: say qq

[20:05] <camelia> rakudo-jvm 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/c_1dsFEPOT␤Undeclared routine:␤    qq used at line 1␤␤»

[20:05] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/7ikldLJRyr␤Undeclared routine:␤    qq used at line 1␤␤»

[20:05] <TimToady> std: say q:c(4)  # comment

[20:05] <camelia> std 3b262af: OUTPUT«[31m===[0mSORRY![31m===[0m␤No delimiter found at /tmp/jqZ9Sf_iy9 line 1 (EOF):␤------> [32msay q:c(4)  # comment[33m⏏[31m<EOL>[0m␤Parse failed␤FAILED 00:01 124m␤»

[20:05] <lue> r: say qq:c

[20:05] <TimToady> std: say q:c(4)  # comment #

[20:05] <camelia> rakudo-jvm 0bf3de: OUTPUT«(timeout)»

[20:05] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«␤»

[20:05] <camelia> std 3b262af: OUTPUT«[31m===[0mSORRY![31m===[0m␤No delimiter found at /tmp/7pSFU45kXy line 1 (EOF):␤------> [32msay q:c(4)  # comment #[33m⏏[31m<EOL>[0m␤Parse failed␤FAILED 00:01 124m␤»

[20:05] *** beastd joined
[20:06] <TimToady> # not allowed as delims anyway

[20:08] <PerlJam> lue++  I like it, but the ending seemed weird.  The paragraph that talks about MAIN seemed to forget that it was in an article about adverbs.  Any why mention multi subs in the last paragraph?

[20:09] <lue> PerlJam: I'm terrible at conclusions :)

[20:11] * PerlJam notes not to make inferences around lue  ;)

[20:11] *** xinming left
[20:11] <lue> Why not?

[20:12] <PerlJam> Now I can't tell if that's deadpan or an honest question. :)

[20:12] <lue> If you're referencing the cookies, then it's all joke :)

[20:18] *** zakharyas left
[20:19] *** zakharyas joined
[20:21] <lue> PerlJam: replaced the conclusion

[20:22] *** zakharyas left
[20:22] <PerlJam> lue++ "joyously"!

[20:24] <lue> If there are no outstanding issues left, I'll start wordpress-ifying

[20:25] <TimToady> looks good to me

[20:27] *** zakharyas joined
[20:28] *** Mouq joined
[20:29] <japhb> jnthn: Is my floating point <-> unsigned integer reinterpretation opcode request still on your radar for soonish?  If not, I'll probably port http://blog.factual.com/the-flotsam-project-insanely-fast-floating-point-number-serialization-for-java-and-javascript , which in pure Perl 6 will be ... not insanely fast anymore.  :-)

[20:39] <japhb> It's sad that this is even necessary in so many languages, as it is literally 2 assembly language ops, but so damned few languages have true union (overlaid memory) support, even the ones that call themselves system programming languages.

[20:43] <lue> The advent's wordpress theme really needs to be one that can handle 80-char lines of monospace :/

[20:45] *** rindolf left
[20:50] *** denis_boyun__ joined
[20:51] *** denis_boyun left
[20:51] *** dwarring joined
[20:52] *** zakharyas left
[20:56] <lue> Here's the wordpress preview, for you to check: http://perl6advent.wordpress.com/?p=1987&preview=true

[20:56] * lue hopes he didn't miss an occurrence or two of the gag

[20:58] *** SamuraiJack_ left
[20:58] <moritz> lue: IMHO it's worth noting that :4th actually doesn't work in rakudo, because usually all advent calendar code runs on current rakudo

[20:58] <moritz> same for the "stacked" adverbs

[20:58] <moritz> or maybe leave 'em out

[20:59] <FROGGS> phew, here the preview of my post: http://perl6advent.wordpress.com/?p=1981&preview=true

[20:59] *** bbkr_ left
[20:59] <moritz> lue++ # advent post

[20:59] <lue> moritz: I prefer talking about the hypothetical Perfect Implementation. But I'll add those disclaimers in.

[20:59] *** xinming joined
[21:01] <lue> r: foo(:$a, :$b) { say "OK $a $b" }; foo(:a :b); foo() :a :b;

[21:01] <camelia> rakudo-jvm 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/ALqjSkgih5␤Variable '$a' is not declared␤at /tmp/ALqjSkgih5:1␤------> [32mfoo(:$a[33m⏏[31m, :$b) { say "OK $a $b" }; foo(:a :b); f[0m␤»

[21:01] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/qxhvCL_Hdr␤Variable '$a' is not declared␤at /tmp/qxhvCL_Hdr:1␤------> [32mfoo(:$a[33m⏏[31m, :$b) { say "OK $a $b" }; foo(:a :b); f[0m␤»

[21:01] <[Coke]> "alternately"

[21:01] <lue> r: sub foo(:$a, :$b) { say "OK $a $b" }; foo(:a :b); foo() :a :b;

[21:01] <camelia> rakudo-parrot 0bf3de: OUTPUT«use of uninitialized value of type Any in string context  in sub foo at /tmp/TApyABb8hh:1␤␤OK True ␤OK True True␤»

[21:01] <camelia> ..rakudo-jvm 0bf3de: OUTPUT«use of uninitialized value of type Any in string context␤OK True ␤OK True True␤»

[21:01] <moritz> lue: well, Perl 6 long had a reputation as vapourware. Talking about the hypothetical perfect implementation is part of the reason.

[21:02] <lue> moritz: Understood. I just don't want to lose descriptiveness on a feature just because "it doesn't work yet". I prefer the disclaimers over leaving it out.

[21:02] <moritz> and the best counter is 1) showing working code 2) build cool stuff in Perl 6

[21:04] <[Coke]> day 11: dristributions 

[21:05] <dalek> rakudo/eleven: 90d26ea | (Tobias Leich)++ | / (7 files):

[21:05] <dalek> rakudo/eleven: add an early form of the CompUnitRepo implementation

[21:05] <dalek> rakudo/eleven: 

[21:05] <dalek> rakudo/eleven: This is something to play with, and I expect that about

[21:05] <dalek> rakudo/eleven: 80% of this will land in nom. JVM backend and windows

[21:05] <dalek> rakudo/eleven: support deserves more love than it got.

[21:05] <dalek> rakudo/eleven: review: https://github.com/rakudo/rakudo/commit/90d26eaef3

[21:05] <[Coke]> day 11: is grafics britlish?

[21:06] <[Coke]> also: crap. if 9, 10, and 11 are already done, that means I'm late.

[21:06] <FROGGS> wut?

[21:06] <[Coke]> I'm used to "graphics"

[21:06] <FROGGS> k

[21:06] <FROGGS> will fix

[21:06] <[Coke]> but I'z American.

[21:07] * lue will feel silly if he forgot emphasize an adverb in the post, but aside from that...

[21:07] <lue> ...post scheduled!

[21:08] <[Coke]> lue: 16:01 < [Coke]> "alternately"

[21:08] <lue> I noticed that, but didn't understand what that meant.

[21:09] *** stevan_ joined
[21:09] <[Coke]> it's an adverb. in your post.

[21:10] <lue> ah, I see it now. Wow, that wasn't even a non-ly adverb, geez! :) [note that the quoted "oddly" a couple paragraphs down is purposely not emph'd, because I'm not really using it in an adverbly way.]

[21:13] *** stevan_ left
[21:14] *** stevan_ joined
[21:16] <hoelzro> how does CORE.setting go about detecting that src/Perl6/Grammar.nqp is out of date?

[21:16] <hoelzro> I'm going to try and see if I can fool it.

[21:16] <dalek> panda/eleven: 1abeae8 | (Tobias Leich)++ | META.info:

[21:16] <dalek> panda/eleven: added "provides" section

[21:16] <dalek> panda/eleven: review: https://github.com/tadzik/panda/commit/1abeae8107

[21:16] <dalek> panda/eleven: be39969 | (Tobias Leich)++ | bootstrap.pl:

[21:16] <dalek> panda/eleven: local lib dir must be in order after installed lib dir

[21:16] <dalek> panda/eleven: 

[21:16] <dalek> panda/eleven: To be compliant with older rakudo's I think we need both ways.

[21:16] <dalek> panda/eleven: review: https://github.com/tadzik/panda/commit/be39969e75

[21:16] <dalek> panda/eleven: 7a7f55f | (Tobias Leich)++ | projects.json.bootstrap:

[21:16] <dalek> panda/eleven: added "provides" section

[21:16] <dalek> panda/eleven: review: https://github.com/tadzik/panda/commit/7a7f55f1be

[21:16] <dalek> panda/eleven: b4fbf94 | (Tobias Leich)++ | lib/Panda (2 files):

[21:16] <dalek> panda/eleven: use the CompUnitRepo.install method if available

[21:16] <dalek> panda/eleven: review: https://github.com/tadzik/panda/commit/b4fbf9425e

[21:17] <lue> FROGGS: "(One glitch might be the too less windows testing from my side.)" --> I don't think you're using the right "too" there.

[21:18] <FROGGS> hoelzro: IIRC it stores timestamps or so in the pir, you should see it in CORE.setting.pir

[21:18] <hoelzro> I don't think it's timestamp-based; I'm pretty sure I tried a touch on the file and it still worked

[21:18] * hoelzro tries

[21:18] <FROGGS> lue: I guess I can just strip that "too", right?

[21:18] <hoelzro> but thanks for the input, FROGGS =)

[21:19] <FROGGS> hoelzro: can be a sha1 too

[21:19] <hoelzro> that would be my guess

[21:19] <lue> FROGGS: I'm parsing that as  (One glitch might be two, without windows testing from my side.)  so you know.

[21:20] <FROGGS> it should read as "One glitch might be not enough windows testing from my side."

[21:21] <lue> Ah, makes sense. So (One glitch might be just less windows testing from my side.)

[21:22] <FROGGS> lue:++ # thanks

[21:24] <lue> Couple more things: Perhaps title the post "Using Modules", since it's not just about versioning

[21:24] <FROGGS> hmmm, I need to install/create this libraries.cfg in the rakudo/eleven branch... I might do that tomorrow

[21:24] <FROGGS> lue: but it is like about

[21:24] <FROGGS> hmmm

[21:25] <lue> If you have your reasons for the title, by all means keep it :)

[21:26] <FROGGS> I'll muse about it :o)

[21:26] <lue> The last thing: if the eleven branches are the focus of the post (which it seems they are), then introducing the branches earlier (just before the "First Crux" header or nearby) might help give some context to the subjunctive things coming up.

[21:26] <lue> (If they're not the focus, ignore that :D)

[21:26] <lue> FROGGS++ for the post, I should say by now :)

[21:27] <FROGGS> they are if somebody wants to try stuff... (at least as long as these branches exist)

[21:27] <FROGGS> thanks :o)

[21:27] <lue> gerne.

[21:27] <FROGGS> hehe

[21:28] <lue> .oO("You're welcome" is way too wordy, esp. when someone says "Thanks" instead of "Thank you")

[21:28] <lizmat> lue++ for a chewy blogpost

[21:29] <FROGGS> "yw" would work

[21:29] <lue> :)

[21:29] <lizmat> makes me wonder whether I should elaborate on adverbs on hash/array slices in a separate blogpost

[21:30] <lue> FROGGS: only in counterpart to "ty". English hasn't a short form of "You're welcome" :/ . I can't even think of _how_ to shorten it, except borrow "gerne" from our ancestral language :)

[21:31] *** xinming_ joined
[21:31] <lue> lizmat: specific areas of adverb usage in Perl 6 are worthwhile methinks. Explaining slice adverbs would focus on the power of slicing more than the adverbs anyhow :)

[21:32] <lizmat> indeed

[21:32] *** SevenWolf joined
[21:32] *** xinming left
[21:34] <hoelzro> I should know better than to question FROGGS 

[21:34] <hoelzro> FROGGS: you were totally right; it was a timestamp

[21:34] <hoelzro> which makes my life easier, I think!

[21:34] <dalek> mu: 0cb92bd | (Elizabeth Mattijsen)++ | misc/perl6advent-2013/schedule:

[21:34] <dalek> mu: Claim Day 13 - Slicing with adverbs, the only way!

[21:34] <dalek> mu: review: https://github.com/perl6/mu/commit/0cb92bdef1

[21:35] <FROGGS> *g*

[21:37] <lue> I think the TOC needs to make noticeable now the adverbial chain of posts :)

[21:39] <hoelzro> :topic<Welcome to Perl 6!>

[21:39] <FROGGS> hoelzro: the problem is that the subs in a pir file get timestamps in their id too, and if another cu refers to that sub, it refers to it by id

[21:39] <hoelzro> (actually, I don't think that does what I think =/)

[21:39] <hoelzro> grrrr

[21:40] <FROGGS> ... which would horribly explode then when a dependency get recompiled

[21:40] <hoelzro> yeah

[21:40] <hoelzro> hmm

[21:40] <hoelzro> what if

[21:40] <FROGGS> that is what I remember from jnthn++ when he talked about bounded serialization

[21:40] <hoelzro> after I edit the file

[21:40] <hoelzro> I touch the file with the old timestamp, *then* compile

[21:40] <hoelzro> the subs should remain the same, yes?

[21:40] <FROGGS> I dunno

[21:40] <hoelzro> hehe

[21:41] <hoelzro> time for some fun >:)

[21:41] *** xinming_ left
[21:42] <lizmat> the perl6advent TOC needs to be manually updated: I've just added Carl's day 9

[21:44] <lizmat> FROGGS: I will read your post more thoroughly tomorrow

[21:44] <FROGGS> lizmat: cool :o)

[21:48] *** stevan_ left
[21:49] <FROGGS> "the only way!" lol

[21:49] <FROGGS> lizmat++

[21:49] <lizmat> well, since .exists and .delete are now deprecated  :-)

[21:54] *** bluescreen__ left
[21:55] <jercos> Do signatures have any options for duck typing on objects beyond breaking out a pair-list into named parameters? I don't have a use case, but say you wanted to functionally replicate having a Rational parameter, and accept any object at all, so long as it has .numerator and .denominator, is that supported, desired, reviled, reason to be cast down into the pit of pythonites, etc.?

[21:57] *** kaare_ left
[21:59] <jnthn> where .can(all(<numerator dominator>)) # as a constraint type

[21:59] <jercos> Oh, heh, that makes sense.

[21:59] <FROGGS> hi jnthn 

[22:00] <jercos> Thanks :)

[22:00] <dalek> mu: 51f9bcd | (Tobias Leich)++ | misc/perl6advent-2013/schedule:

[22:00] <dalek> mu: fixed title, lue++

[22:00] <dalek> mu: review: https://github.com/perl6/mu/commit/51f9bcd01b

[22:02] <jnthn> o/ FROGGS 

[22:02] <jnthn> vilnius++ is a nice place to be for a conference :)

[22:02] <hoelzro> hmm

[22:03] <hoelzro> I can't figure out how to convince CORE.setting that Grammar/Actions are fine.

[22:06] *** kbaker left
[22:15] *** dwarring left
[22:16] *** benabik left
[22:18] <lizmat> r: my %a; for %a{*}:kv -> $k, $v { }

[22:18] <dalek> rakudo/eleven: ddd3ab4 | (Tobias Leich)++ | src/core/core_epilogue.pm:

[22:18] <dalek> rakudo/eleven: create libraries.cfg if missing

[22:18] <dalek> rakudo/eleven: review: https://github.com/rakudo/rakudo/commit/ddd3ab45d3

[22:18] <camelia> rakudo-jvm 0bf3de: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in block  at gen/jvm/CORE.setting:7291␤  in block  at gen/jvm/CORE.setting:7127␤  in method gimme at gen/jvm/CORE.setting:7545␤  in block  at /tmp/gwFDkj2XZ0:1␤  in any eval at gen/jv…»

[22:18] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in block  at /tmp/Bm_BlTWiyZ:1␤  in any  at /tmp/Bm_BlTWiyZ:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.nqp:1133␤  in any evalfiles a…»

[22:19] *** PacoAir left
[22:19] <lizmat> r: my @a; for @a[*]:kv -> $k, $v { }

[22:19] <camelia> rakudo-jvm 0bf3de: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in block  at gen/jvm/CORE.setting:7291␤  in block  at gen/jvm/CORE.setting:7127␤  in method gimme at gen/jvm/CORE.setting:7545␤  in block  at /tmp/QM8ur99QOO:1␤  in any eval at gen/jv…»

[22:19] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in block  at /tmp/zj2EDMiYai:1␤  in any  at /tmp/zj2EDMiYai:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.nqp:1133␤  in any evalfiles a…»

[22:19] * lizmat submits rakudobug

[22:23] <jnthn> japhb: I've recently been quite overloaded with stuff. I'd like to sort that out for you; please don't hesitate to remind me, especially in Jan when I'll have more time again :)

[22:25] *** sqirrel left
[22:26] <lizmat> #120739 for those interested, I will look at this tomorrow

[22:26] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120739

[22:27] <FROGGS> and I will finally dig deep into v5 again the next days

[22:28] <lizmat> FROGGS++  we need options!  :-)

[22:28] *** enikar left
[22:33] <lizmat> gnight #perl6!

[22:33] <FROGGS> gnight lizmat 

[22:40] *** pecastro joined
[22:43] *** FROGGS left
[22:45] *** stevan_ joined
[22:47] *** ajr_ left
[23:00] *** cooper_ joined
[23:01] *** pochi left
[23:01] *** pochi joined
[23:04] *** araujo left
[23:05] *** araujo joined
[23:05] *** stevan_ left
[23:09] *** Rotwang left
[23:11] *** cooper_ is now known as cooper

[23:11] *** cooper left
[23:11] *** cooper joined
[23:12] *** dmol left
[23:13] <jnthn> sleep &

[23:14] *** rurban1 left
[23:17] *** denis_boyun__ left
[23:28] *** dmol joined
[23:41] *** xenoterracide joined
[23:56] *** hummeleB1 left
