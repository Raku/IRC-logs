[00:01] <grondilu> r: my @a = <a b c d e a b c>; say @a.classify({$_}).list.map( { $_.key => $_.value.elems } )

[00:01] <p6eval> rakudo 9c59a1: OUTPUT«a 2 b     2 c     2 d     1 e     1␤»

[00:01] <grondilu> r: my @a = <a b c d e a b c>; say @a.classify({$_}).list.map( { $_.key => $_.value.elems } ).hash

[00:01] <p6eval> rakudo 9c59a1: OUTPUT«("a" => 2, "b" => 2, "c" => 2, "d" => 1, "e" => 1).hash␤»

[00:01] <skids> r: my %count; ++<<%count{1,2,3,1}; %count.say # should this work?

[00:01] <p6eval> rakudo 9c59a1: OUTPUT«("1" => 1, "2" => 1, "3" => 1).hash␤»

[00:02] <spider-mario> whoa. :D

[00:02] <spider-mario> I like it.

[00:03] <spider-mario> r: <a b c d e a b c>.classify({$_}).kv.map(* => *.elems).perl.say

[00:03] <p6eval> rakudo 9c59a1: OUTPUT«("a" => 2, "b" => 2, "c" => 2, "d" => 1, "e" => 1).list␤»

[00:03] *** wk left
[00:03] <skids> r: my %count = { 1 => 3 }; ++<<%count{1,2,3,1}; %count.say # works when no autovivify

[00:03] <p6eval> rakudo 9c59a1: OUTPUT«("1" => 5, "2" => 1, "3" => 1).hash␤»

[00:03] <spider-mario> I like « more than << though.

[00:03] <skids> well, of course It was just less keystrokes.

[00:04] <spider-mario> r: constant @a = <a b c d e a b c>; my %count; ++«%count{@a}; %count.perl.say;

[00:04] <p6eval> rakudo 9c59a1: OUTPUT«("c" => 1, "a" => 1, "d" => 1, "b" => 1, "e" => 1).hash␤»

[00:04] <spider-mario> oops?

[00:04] <skids> Right it appears broken when autovivifying.

[00:05] <sorear> r: <a b c d e a b c>.classify({$_})>>.elems.perl.say

[00:06] <p6eval> rakudo 9c59a1: OUTPUT«("a" => [1, 1], "b" => [1, 1], "c" => [1, 1], "d" => [1], "e" => [1]).hash␤»

[00:06] <spider-mario> r: constant @a = <a b c d e a b c>; my %count = @a.map: * => 0; ++«%count{@a}; %count.perl.say;

[00:06] <p6eval> rakudo 9c59a1: OUTPUT«("a" => 2, "b" => 2, "c" => 2, "d" => 1, "e" => 1).hash␤»

[00:06] <skids> my %count; %count{1,2,3,1}»++; %count.say; # postfix also

[00:06] <skids> oops

[00:06] <skids> r: my %count; %count{1,2,3,1}»++; %count.say; # postfix also

[00:06] <p6eval> rakudo 9c59a1: OUTPUT«("1" => 1, "2" => 1, "3" => 1).hash␤»

[00:07] *** spider-mario left
[00:21] * grondilu just watched the J implementation of entropy on RosettaCode and is quite impressed:

[00:21] <grondilu> entropy=:  +/@:-@(* 2&^.)@(#/.~ % #)

[00:22] <grondilu> that's pretty cool

[00:22] <TimToady> looks pretty entropic to me...

[00:23] <grondilu> lol, good one

[00:27] <grondilu> shouldn't { $^x } be the default argument to classify?

[00:29] *** benabik joined
[00:30] *** pmurias left
[00:33] *** araujo left
[00:37] *** grondilu left
[00:43] *** lustlife joined
[00:46] *** jerome left
[00:56] <TimToady> phenny: tell grondilu in this case the desire for that default to classify means you want a bag instead :)

[00:57] <phenny> TimToady: I'll pass that on when grondilu is around.

[00:58] *** anuby joined
[01:00] *** jerome joined
[01:00] <sorear> n: bag(<a b b c c c>).perl.say

[01:00] <p6eval> niecza v24-23-g0520c7c: OUTPUT«Bag.new({"a" => 1, "b" => 2, "c" => 3}.hash)␤»

[01:00] <TimToady> http://rosettacode.org/wiki/Entropy#Perl_6  # new entry

[01:01] <sorear> n: bag(<a b b c c c>).hash.perl.say

[01:01] <p6eval> niecza v24-23-g0520c7c: OUTPUT«{"a" => 1, "b" => 2, "c" => 3}.hash␤»

[01:01] <TimToady> well, revised entry

[01:01] <TimToady> I used .bag.values

[01:01] <TimToady> colomon++ for the bags :)

[01:02] <TimToady> and grondilu++ for the entry

[01:03] <TimToady> there's probably a way to get rid of the other map too, but readability might suffer

[01:08] <TimToady> this solution also avoids calling .elems repeatedly

[01:18] *** hypolin joined
[01:38] *** raiph_ left
[01:38] *** raiph left
[01:40] <TimToady> pugs: async { sleep 

[01:40] <p6eval> pugs: OUTPUT«*** ␤    Unexpected end of input␤    at /tmp/46g46tIIZg line 2, column 1␤»

[01:40] <TimToady> pugs: async { sleep $_; .say } for (1..5).pick(*)

[01:40] <p6eval> pugs: OUTPUT«pugs: Missing required parameters: $_␤pugs: Missing required parameters: $_␤pugs: Missing required parameters: $_␤pugs: Missing required parameters: $_␤pugs: Missing required parameters: $_␤»

[01:41] <TimToady> pugs: for (1..5).pick(*) -> $x { async { sleep $x; $x.say } }

[01:41] <p6eval> pugs:  ( no output )

[01:41] <TimToady> pugs: for (1..5).pick(*) -> $x { async { sleep $x; $x.say } }; sleep 5

[01:41] <p6eval> pugs: OUTPUT«*** Unsafe function 'sleep' called under safe mode␤    at /tmp/Wk6IXrSBPd line 1, column 58 - line 2, column 1␤»

[01:45] *** gdey left
[01:53] *** Chillance left
[02:15] *** fgomez left
[02:23] *** fgomez joined
[02:27] *** census left
[02:31] *** araujo joined
[02:41] *** dayangkun left
[02:44] *** Chillance joined
[02:44] *** dayangkun joined
[02:44] *** dayangkun left
[02:52] *** dayangkun joined
[02:52] *** dayangkun left
[03:25] *** orafu left
[03:26] *** orafu joined
[03:28] *** raiph__ joined
[03:28] *** raiph_ joined
[03:28] *** raiph joined
[04:02] *** alec__ joined
[04:03] *** gdey joined
[04:17] *** gdey left
[04:24] *** xinming joined
[04:27] *** xinming_ left
[04:35] *** SamuraiJack joined
[04:37] *** grondilu joined
[04:37] <grondilu> What would you guys think of adding http://rosettacode.org/wiki/Entropy#Perl_6  to the best-of-rosettacode in perl6-examples?

[04:37] <phenny> grondilu: 00:56Z <TimToady> tell grondilu in this case the desire for that default to classify means you want a bag instead :)

[04:38] * grondilu needs to read about sets and bags

[04:43] *** preflex_ joined
[04:45] *** preflex left
[04:45] *** preflex_ is now known as preflex

[04:55] *** aindilis joined
[05:07] *** alec__ left
[05:30] *** raiph493 joined
[05:45] *** Chillance left
[05:46] *** alec__ joined
[05:49] *** fgomez left
[05:51] *** fgomez joined
[05:52] *** SamuraiJack left
[05:54] *** odoacre_ is now known as odoacre

[06:01] *** fgomez left
[06:02] *** fgomez joined
[06:06] <moritz> 4\o

[06:14] <timotimo> division by o error

[06:15] <moritz> "you cannot backslash that"

[06:24] <sorear> o/ moritz, or hi Ronja, whichever is appropriate :)

[06:26] <timotimo> "Ronja discovers the Keyboard. it's very effective!"

[06:33] *** Yu joined
[06:33] *** Yu left
[06:36] <timotimo> i'm not sure why the log(2) R/ entropy is outside the entropy function, to be honest

[06:36] <timotimo> (re: entropy rosettacode example)

[06:38] * TimToady was wonderin' about that as well

[06:38] *** alec__ left
[06:38] *** mberends joined
[06:45] *** alec__ joined
[06:47] *** domidumont joined
[06:48] *** quester joined
[06:48] *** FROGGS joined
[06:55] *** kaleem joined
[06:58] *** sqirrel joined
[07:06] <grondilu> timotimo: I just thought using bit as a unit was too arbitrary.  So I suggested using natural units for the function, and let the caller make the conversion outside.

[07:07] <grondilu> (natural units as in natural logarithm)

[07:10] *** baest_ is now known as baest

[07:17] <grondilu> I think it's a cool function.  We should consider adding it to core.   So we can do stuff such as:   say @a.sort: :by(*.entropy);

[07:21] *** domidumont left
[07:22] *** domidumont joined
[07:31] *** domidumont left
[07:39] *** alec__ left
[07:45] *** domidumont joined
[07:45] *** SamuraiJack joined
[07:55] <moritz> or just add a sub

[07:55] <moritz> then you can do @a.sort: &entropy

[07:56] <moritz> in fact *.entropy is one char more than &entropy :-)

[08:03] <moritz> it seems that Perl 5 has conditioned people so much to write a block after map that many people write things like map { function($_) }, @array  even in Perl 6

[08:06] <diakopter> rn: map {{{{{ say $_ }}}}}, {{{{ 5, 6 }}}}()

[08:06] <p6eval> rakudo 9c59a1, niecza v24-23-g0520c7c: OUTPUT«5␤6␤»

[08:07] <moritz> WAT

[08:07] <diakopter> what? :)

[08:09] *** quester left
[08:10] <diakopter> rn: map {{{{{ say 33; say $_ }}}}}, {{{{ 5, 6 }}}}()

[08:10] <p6eval> rakudo 9c59a1, niecza v24-23-g0520c7c: OUTPUT«33␤5␤33␤6␤»

[08:36] <timotimo> getaddrinfo failed: feather.perl6.nl: Success  -  tee hee

[08:38] <timotimo> oh yikes. need to build a new rakudo on a train to get the int64 type :|

[08:38] *** Ovidius left
[08:38] <timotimo> and panda rebootstrap, too. but i'm on a terrible connection :(

[08:40] <moritz> Timbus: I've tried Net::IRC::Bot, and it doesn't join the channels I pass to the constructor :(

[08:42] <dalek> roast: 84ac9e6 | moritz++ | S (3 files):

[08:42] <dalek> roast: unfudge some tests for rakudo

[08:42] <dalek> roast: review: https://github.com/perl6/roast/commit/84ac9e67a5

[08:43] <Timbus> helo

[08:43] <Timbus> oh is the parrot bug fixed?

[08:45] <diakopter> don't set me up for that one

[08:46] <moritz> Timbus: sockets seem to be mostly fine on rakudo again

[08:47] <Timbus> so they do

[08:48] <Timbus> I'm working on it. seems like an event isnt being fired

[08:48] <moritz> great

[08:49] <moritz> I want to get the _ilbot running on rakudo :-)

[08:50] <arnsholt> That'll involve DBIish, which will involve NativeCall, right? O:)

[08:50] *** Ovid joined
[08:50] *** Ovid is now known as Guest2304

[08:52] <timotimo> arnsholt: what do i have to do to be able to use the zmq constants?

[08:54] <timotimo> importing Net::ZMQ or Net::ZMQ::Constants won't give me ZMQ_PAIR for example

[08:55] <arnsholt> That's odd...

[08:55] <arnsholt> Importing Net::ZMQ::Constants should do it

[08:56] <Timbus> moritz, it seems the do_dispatch method is in fact.. not do-ing. it's jnthns special workaround for timtoady breaking the '*.method' syntax :/

[08:57] <Timbus> so its some black magic code I can't fix

[08:58] *** wk joined
[08:58] <Timbus> where can I find the docs for cando

[08:58] <timotimo> arnsholt: can you try it yourself?

[08:59] <arnsholt> I'm giving a lecture in 15 minutes, so I don't have time right now, but I'll give it a whirl when I'm done (a bit after 12)

[08:59] <timotimo> OK :)

[09:00] <sorear> arnsholt: oo, what do you teach

[09:01] <arnsholt> Introductory computational linguistics/NLP

[09:01] <moritz> Timbus: you can do something like

[09:01] <arnsholt> Quite possibly the hardest thing I'm doing right now

[09:02] <arnsholt> I have to forget pretty much everything I know about what I'm teaching to be able to explain it properly =)

[09:02] <moritz> Timbus: for @.modules -> { try $mod.*"$method"($event) }

[09:03] <Timbus> is that a Good Thing to do?

[09:03] <moritz> better than not working at all

[09:03] <Timbus> :I too shay

[09:03] <moritz> r: try 42.sqrt(1, 2, 3); say $!.WHAT

[09:03] <p6eval> rakudo 9c59a1: OUTPUT«X::AdHoc()␤»

[09:03] <moritz> :(

[09:04] <moritz> r: try 42.sqrt(1, 2, 3); say $!

[09:04] <p6eval> rakudo 9c59a1: OUTPUT«Too many positional parameters passed; got 4 but expected 1␤  in method sqrt at src/gen/CORE.setting:3129␤  in block  at /tmp/QOGmnBw_4D:1␤␤»

[09:04] <moritz> r: try "a".substr(Mu); say $!

[09:04] <p6eval> rakudo 9c59a1: OUTPUT«Nominal type check failed for parameter '$start'; expected Any but got Mu instead␤  in method substr at src/gen/CORE.setting:3901␤  in block  at /tmp/cLaOxfyhSd:1␤␤»

[09:04] <moritz> r: try "a".substr(Mu); say $!.perl

[09:04] <p6eval> rakudo 9c59a1: OUTPUT«X::AdHoc.new(payload => "Nominal type check failed for parameter '\$start'; expected Any but got Mu instead")␤»

[09:04] <sorear> arnsholt: very cool

[09:05] <moritz> I really need to turn those into typed exceptions

[09:10] <timotimo> oh wow. i'm running into some strange trouble

[09:11] <timotimo> r: sub foo(int $flag) { say $flag; }; foo(1);

[09:11] <p6eval> rakudo 9c59a1: OUTPUT«1␤»

[09:11] <timotimo> weird!

[09:11] *** rindolf joined
[09:13] *** sitaktif left
[09:15] <moritz> Timbus: if I /msg the bot, it receives a 'said' event

[09:15] <Timbus> does it react to said event

[09:15] <timotimo> i do $alice.send("foo", 0); and it says: Cannot call 'send'; none of these signatures match:

[09:15] <timotimo> :(Net::ZMQ::Socket : Str $message, int $flags, Mu *%_)

[09:15] <timotimo> :(Net::ZMQ::Socket : Net::ZMQ::Message $message, int $flags, Mu *%_)

[09:15] <timotimo> i am very confused. what could i be doing wrong?

[09:16] <Timbus> man i was so proud of that pun

[09:16] <moritz> Timbus: well, I have a   say $ev.perl  in method said, and says that :-)

[09:16] <timotimo> that was a good pun.

[09:17] <Timbus> oh. well alright then it just can't seem to join channels then? maybe it's not sending the right strings

[09:18] <timotimo> (interestingly, when i create a my int $flagzero = 0; and pass that, i get a huge error with a stacktrace

[09:18] <moritz> Timbus: what event should trigger the join?

[09:18] <moritz> timotimo: what happens if you declare $flags as Int, not int ?

[09:19] <timotimo> "none of these signatures match"

[09:19] <Timbus> moritz, end of motd

[09:19] <Timbus> "connected"

[09:19] <moritz> :cameron.freenode.net 376 ilbot6 :End of /MOTD command.

[09:19] <moritz> Dispatching connected

[09:19] *** donaldh left
[09:19] <moritz> Timbus: so Net::IRC::Handlers::Default should handle it?

[09:20] <Timbus> yes

[09:20] <Timbus> and um. it just worked for me. I added the autoident module to debug soemthing and now its joining the channels

[09:20] * moritz adds more debug statements

[09:20] <Timbus> augh

[09:24] *** donaldh joined
[09:24] <moritz> oh yes, when I add autoindent, it works for me too :-)

[09:24] *** sitaktif joined
[09:24] <Timbus> what even

[09:25] <Timbus> maybe um. it needs to flush.

[09:25] * moritz calls the plumber

[09:26] <diakopter> Mario and Luigi arrive

[09:26] <moritz> Could not parse the following IRC event: :ilbot6!~Clunky@p579E9305.dip.t-dialin.net JOIN #bottest

[09:26] <Timbus> heh

[09:27] <Timbus> what

[09:37] *** fhelmberger joined
[09:39] <jnthn> morning o/

[09:40] <moritz> \o jnthn 

[09:43] <nwc10> jnthn: tests still pass (except the one that needs ICU)

[09:44] <jnthn> nwc10: Nice :)

[09:45] *** rindolf left
[09:45] *** rindolf joined
[09:46] <moritz> Timbus: very weird. I've just put an event it said it couldn't parse into the parser directly, and it parsed

[09:47] <moritz> oh, trailing \r

[09:47] <Timbus> i was thinking that

[09:49] <moritz> Timbus: fwiw it seems that the $conn.get.encode.decode hack can be removed

[09:50] <moritz> ok, Net::IRC is slowly becoming usable for me :-)

[09:52] *** rindolf left
[09:52] *** rindolf joined
[09:53] <moritz> hey, I could use the ping event handler to ping my database to prevent connection timeouts

[09:54] <Timbus> lol

[09:54] <Timbus> thats actually pretty smart

[09:57] *** cogno joined
[09:57] <moritz> I have two loggers running, one for freenode, one for irc.perl.org

[09:57] <moritz> and the latter would occasionally time out its DB connection

[09:57] <moritz> but the one on freenode never did

[09:57] <moritz> because there were always joins or leaves in #perl6 :-)

[09:58] <moritz> a bit comparable to who spam is the heart beat of the email system

[09:58] <moritz> s/who/how/

[09:58] *** cognominal joined
[09:58] <sorear> moritz: park the other one in #p5p ;)

[09:58] *** hypolin left
[10:00] <moritz> sorear: they don't want logging :-)

[10:01] *** wk left
[10:02] <timotimo> i suppose i can forget about net zmq for now

[10:03] *** woolfy joined
[10:05] *** daxim joined
[10:07] *** cogno left
[10:09] <timotimo> this "cannot call" error is *so* weird to me

[10:09] <jnthn> timotimo: Link?

[10:10] <jnthn> (to something where I can see the code)

[10:10] <timotimo> oh, i can quickly upload it

[10:11] *** rindolf left
[10:11] *** rindolf joined
[10:11] <timotimo> http://sprunge.us/JFSI - put this into t/01-recv-send.t and run arnsholt/Net-ZMQ with its tests

[10:12] *** labster left
[10:14] <Timbus> so without the autoident in place, the bot totally dies after trying to send the JOIN command. I'm pretty baffled

[10:17] *** anuby left
[10:21] <timotimo> i'll be taking my leave for most of today now

[10:22] <jnthn> timotimo: OK. I'm busy with $dayjob stuff for the moment but will see if I get a moment to look a bit later

[10:24] *** rindolf left
[10:25] *** rindolf joined
[10:32] *** rindolf left
[10:35] *** spider-mario joined
[10:40] *** cogno joined
[10:46] *** rindolf joined
[10:48] *** rindolf left
[10:51] *** cogno left
[11:41] *** cognominal left
[11:47] *** cognominal joined
[11:49] *** cognominal__ joined
[11:52] *** cognominal left
[11:53] *** census joined
[11:55] *** cognominal__ left
[12:03] <moritz> http://www.reddit.com/r/programming/comments/18ygti/clownspace/c8j5dla "Cassandra (a seer at Delphi?) was cursed by the gods to (a) give perfectly reliable predictions of the future that (b) would not be believed by anyone. Sort of the reverse of being an Economist."

[12:03] <moritz> apologies to all the ecomists out there

[12:04] <arnsholt> ^_^

[12:05] <mberends> :-)

[12:05] <arnsholt> I think the economists I know would sort of agree to that as well =)

[12:06] *** SmokeMachine joined
[12:06] *** brrt joined
[12:07] *** ilbot6 joined
[12:08] <census> moritz: that is very true though!  economists cannot predict the future well.  that is why they call it the dismal science, in part

[12:10] <moritz> though to be fair, others too have troublle predicting the future

[12:10] <moritz> like pyschologists

[12:11] <mberends> and gamblers

[12:11] * moritz learns a lot about the IRC protocol

[12:11] <census> just that the stakes feel high with the economy

[12:12] <census> it is not a true science . . . people are crazy . . . and until we get inside everybody's heads . . . .

[12:13] <masak> both economy and psychology are brain-complete. which makes them very difficult indeed.

[12:14] <census> economists and psychlogists can really only study the past with some degree of certainty, and even that is not at 100%

[12:15] *** kaleem left
[12:19] *** ilbot6 left
[12:20] *** ilbot6 joined
[12:24] <moritz> fwiw ilbot6 doesn't log anything yet, except to STDOUT

[12:24] <moritz> it seems that Net::IRC needs to learn a bit out topics and stuff

[12:24] <jnthn> ilbot6: lol hi!

[12:25] <moritz> it produces output like this: http://perlpunks.de/paste/show/512763b8.220e.1e5

[12:26] <arnsholt> timotimo: So, ZMQ_PAIR works for me on my machine?

[12:26] <jnthn> moritz++ # cooking dogfood

[12:26] <arnsholt> moritz++

[12:27] <masak> moritz++

[12:27] <census> moritz+++++

[12:28] <moritz> Timbus: am I right in assuming that Net::IRC doesn't yet track the nicks per channel?

[12:29] <moritz> (I need that for mapping leave events to a channel)

[12:31] <Timbus> $ev.state<channels>

[12:31] <moritz> oh, cool

[12:31] <Timbus> should have the users in each channel

[12:31] <Timbus> .. maybe

[12:31] <moritz> :-)

[12:32] *** ilbot6 left
[12:32] *** ilbot6 joined
[12:34] <Timbus> my $ulist = $ev.state<channels>{ $ev.where };

[12:34] <Timbus> wow i don't even remember writing this

[12:35] <Timbus> so hows the ram usage :v

[12:35] <moritz> Timbus: about 470MB virtual mem

[12:35] <moritz> Timbus: will be interesting to see after a few hours

[12:35] *** ilbot6 left
[12:35] *** ilbot6 joined
[12:36] <Ulti> yay Net::IRC! easily the most fun I've had playing with IRC

[12:36] <tadzik> I still love the old, hated, deprecated Net::IRC from Perl 5

[12:36] *** cognominal joined
[12:36] *** cognominal left
[12:37] *** cognominal joined
[12:37] <Timbus> <moritz> it produces output like this: http://perlpunks.de/paste/show/512763b8.220e.1e5

[12:37] <Timbus> is um, this not correct?

[12:37] <moritz> Timbus: it's fine; that was just an illustration

[12:37] <moritz> Timbus: though the .where for the topic is a bit off

[12:38] <moritz> it sets .where to nick of the bot, not the channel name

[12:38] <Timbus> oh

[12:39] <Timbus> i'll have to special-case that

[12:40] <moritz> probably

[12:40] <moritz> Timbus: https://github.com/TiMBuS/Net--IRC/pull/4 my patches so far

[12:40] <Timbus> hmm what kind of event is it? a notice?

[12:40] <Ulti> how did I get an email about your patches :S

[12:41] <moritz>  :cameron.freenode.net 332 ilbot6 #perl6 :»ö« Welcome to Perl 6! ...

[12:41] <moritz> Ulti: you subscribe to the repo?

[12:42] <Timbus> lol moritz, I've locally added all of these (except for .gist)

[12:42] <Timbus> ah well, ill just pull yours to save a commit and push

[12:42] <Ulti> guess so

[12:43] <Ulti> I have an emotional content tracking bot written with Net::IRC so guess I must have subscribed to test

[12:43] <Timbus> also, any research into why the first .sendln after a motd event fails would be greatly appreciated

[12:44] *** fgomez left
[12:44] <Timbus> it actually kills the callback

[12:44] <Timbus> and a catch block can't even recover anything

[12:44] <moritz> Timbus: is that why I need autoident?

[12:44] <Timbus> yes

[12:45] *** ilbot6 left
[12:45] <moritz> I was wondering why the server didn't complain about wrong password :-)

[12:45] <Timbus> i added a print statement to sendln, and then made autoident send the password twice. it only tries once

[12:45] <Timbus> reeeally bizzare

[12:46] <moritz> Timbus++ # Net::IRC

[12:46] <moritz> it's not perfect by far, but very hackable

[12:46] *** ilbot6 joined
[12:47] <Timbus> it might work well with muevent now

[12:47] <Timbus> it used to stall and break after a few minutes

[12:48] <tadzik> and unbreak after another few

[12:48] <tadzik> I still don't know why was that

[12:48] <tadzik> and also, it may be that it can work with MuEvent without any code changes, like the LWP::SImple hack

[12:49] <tadzik> maybe there should be a module, Asynchronize::Me, which makes all sockets non-blocking :)_

[12:50] *** fgomez joined
[12:50] <Timbus> it was only like 5 lines of code i need to change, so that's okay.

[12:51] <Timbus> i should switch to it if it works, because i irc bots really need nonblocking IO

[12:57] <Ulti> oh dear... http://corky.net/dotan/log/images/perl6-watchmen_a.jpg

[13:00] <huf> whaa :)

[13:00] <moritz> \o/ somebody cared enough about Perl 6 to make a cartoon about it

[13:00] <tadzik> :)

[13:01] *** cognominal left
[13:06] <Ulti> moritz: lol, that's the correct response heh

[13:07] *** cognominal joined
[13:11] <masak> it's an interesting subdivision, though. those who like it just like it. those who don't are really vocal in their dislike.

[13:13] <daxim> perl6-watchmen_a.jpg:  C | N > K

[13:14] <Ulti> I like Camelia just not as the official logo, like imagine if IBM had Camelia as their logo... all the staff would have to stop wearing suits! What would happen to the wold then? :D

[13:14] <moritz> taylors would go bankrupt?

[13:19] <masak> we're not IBM.

[13:20] <dalek> nqp/new-packfile-api: a93c7c8 | (Gerhard R)++ | src/ (2 files):

[13:20] <dalek> nqp/new-packfile-api: Switch to new packfile API.

[13:20] <dalek> nqp/new-packfile-api: 

[13:20] <dalek> nqp/new-packfile-api: This splits the stage 'evalpmc' into two stages 'pbc' and 'init',

[13:20] <dalek> nqp/new-packfile-api: making --target=pbc work

[13:20] <dalek> nqp/new-packfile-api: review: https://github.com/perl6/nqp/commit/a93c7c8bbb

[13:20] <dalek> nqp/new-packfile-api: 529f351 | (Gerhard R)++ | t/qast/ (2 files):

[13:20] <dalek> nqp/new-packfile-api: Adjust tests

[13:20] <dalek> nqp/new-packfile-api: review: https://github.com/perl6/nqp/commit/529f35157b

[13:20] <dalek> nqp/new-packfile-api: c1675fc | (Gerhard R)++ | src/stage0/ (9 files):

[13:20] <dalek> nqp/new-packfile-api: Update stage0 files.

[13:20] <dalek> nqp/new-packfile-api: 

[13:20] <dalek> nqp/new-packfile-api: This is necessary as we're doing a breaking change,

[13:20] <dalek> nqp/new-packfile-api: relying on a new Parrot API

[13:20] <dalek> nqp/new-packfile-api: review: https://github.com/perl6/nqp/commit/c1675fcad8

[13:21] <timotimo> arnsholt, did you see my sprunge?

[13:23] *** skids left
[13:23] <jnthn> Oops, rebootstrapping in a branch is asking for trouble...

[13:24] <jnthn> (since merging the stage0 files is basically impossible)

[13:25] <masak> d'oh!

[13:31] *** jaldhar left
[13:31] *** daxim left
[13:38] <[Coke]> when merging generated files, I always ignore the merge and regenerate them.

[13:38] <[Coke]> (based on the merged source)

[13:38] <[Coke]> will that work here also?

[13:39] <moritz> only if the source changes after that don't depend on the features that the bootstrap brought in

[13:46] *** not_gerd joined
[13:46] <not_gerd> o/

[13:46] <not_gerd> yes, bootstrapping was tricky

[13:46] <not_gerd> phenny: tell pmichaud I resubmitted pull requests for my packfile API work ( https://github.com/parrot/parrot/pull/937 https://github.com/perl6/nqp/pull/76 https://github.com/rakudo/rakudo/pull/106 )

[13:46] <phenny> not_gerd: I'll pass that on when pmichaud is around.

[13:47] <not_gerd> phenny: tell pmichaud it *did* turn out to be a two-way breaking change, so applying them might be tricky with regard to the release policy you outlined in #parrotsketch

[13:47] <phenny> not_gerd: I'll pass that on when pmichaud is around.

[13:47] <moritz> wait... shouldn't we have had a rakudo release yesterday?

[13:47] <jnthn> uh

[13:47] <jnthn> ...yes.

[13:47] <moritz> tadzik was supposed to do it

[13:48] <moritz> tadzik: how is your release schedule? :-)

[13:48] <jnthn>   2013-02-21   Rakudo #61 tadzik

[13:48] <masak> oh! I completely forgot about the release.

[13:48] <jnthn> ;-)

[13:48] <tadzik> oh, a release

[13:48] <masak> tadzik: dude, we need this done yesterday! :P

[13:48] <tadzik> :D

[13:48] <moritz> :-)

[13:48] <tadzik> dangit, forgot completel;

[13:48] <tadzik> I'll roll it out today

[13:48] <masak> as did everyone else, it seems.

[13:49] <masak> ++tadzik

[13:49] *** cognominal left
[13:50] <moritz> any volunteers for the Star release this month?

[13:53] <dalek> rakudo/nom: a763a18 | moritz++ | docs/ChangeLog:

[13:53] <dalek> rakudo/nom: update ChangeLog

[13:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a763a18e0a

[13:54] <moritz> it's nice to see that even though jnthn++ has focused his effort on the jvm port, rakudo-on-parrot still has seen some pretty nice improvements this month

[13:55] *** cognominal joined
[13:58] <jnthn> Yes, I'm really impressed how much got done with me mostly just helping provide the odd pointer to things. :)

[14:01] <moritz> r: $_ = 'abc'; /.../; say ~$/

[14:01] <p6eval> rakudo 9c59a1: OUTPUT«abc␤»

[14:01] <moritz> r: $_ = 'abc'; rx/.../; say ~$/

[14:01] <p6eval> rakudo 9c59a1: OUTPUT«abc␤»

[14:01] *** cognominal left
[14:01] <moritz> it works here; why do my tests fail? :(

[14:02] <moritz> r: $_ = 'abc'; /.../; rx/../; say ~$/

[14:02] <p6eval> rakudo 9c59a1: OUTPUT«ab␤»

[14:02] *** bluescreen10 joined
[14:04] <moritz> ah, because I exchanged $/ and $_ in the call to is()

[14:04] *** daxim joined
[14:04] *** cognominal joined
[14:05] *** SmokeMachine left
[14:06] *** SmokeMachine joined
[14:06] <dalek> roast: 1020dfb | moritz++ | S02-literals/quoting.t:

[14:06] <dalek> roast: test // and rx// literals in sink context

[14:06] <dalek> roast: review: https://github.com/perl6/roast/commit/1020dfb232

[14:06] <moritz> jnthn: do you have some more ideas for optimizing stuff in sink context?

[14:10] *** SamuraiJack left
[14:13] *** shinobicl joined
[14:15] *** cognominal left
[14:19] *** PacoAir joined
[14:20] *** JimmyZ joined
[14:21] *** Psyche^ joined
[14:24] *** Patterner left
[14:24] *** Psyche^ is now known as Patterner

[14:26] *** FROGGS left
[14:27] <jnthn> moritz: Not right off. Though now we have sink context to avoid it, we may want to consider giving the other looping constructs the spec behavior when not in sink context

[14:53] *** skids joined
[14:56] <skids> rn: my $a; my $b; my $d; my $c; ($a,$b,$c,$a,$c,$a,$b,$c,$d)»++; ($a,$b,$c,$d).say; # vivification in hyper seems to work outside of a hash FWIW (see last night backlog)

[14:56] <p6eval> rakudo a763a1, niecza v24-23-g0520c7c: OUTPUT«3 2 3 1␤»

[14:56] *** kaare_ joined
[14:57] *** uvtc joined
[14:57] <skids> skids: my @a; @a[0,1,2,3,4,1,3]»++; @a.say; # But array keys also have trouble.

[14:57] <skids> rn: my @a; @a[0,1,2,3,4,1,3]»++; @a.say; # But array keys also have trouble.

[14:57] <p6eval> rakudo a763a1, niecza v24-23-g0520c7c: OUTPUT«1 1 1 1 1␤»

[14:57] <skids> ELOWCAFFEINE.

[14:57] <[Coke]> skids: GAH GO FIX THAT RIGHT NOW HERE'S SOME RED BULL GO GO GO GO 

[14:58] <uvtc> After all the recent hullaballoo about renaming Perl 5, it occurred to me that there's an omission on the Perl 6 homepage. It seems to me that there should be a small second paragraph (in the blue area at the top):

[14:58] <uvtc> "If you like Perl 5, we think you'll like Perl 6 even more."

[14:59] <skids> Though I wonder how the language in S03 on »+=» and unions/intersections of keys applies to unary hyperops.

[15:01] <skids> That could all be "to spec" by some twisting maze of inferences and deductions.

[15:04] <uvtc> Maybe the omission is intentional though, and I just haven't picked up on the reasons for it.

[15:05] <pmichaud> uvtc: perhaps instead of implying what we think others will like/dislike, we can phrase it as our preference.   "We like Perl 5.  We like Perl 6 even more."

[15:05] <phenny> pmichaud: 13:46Z <not_gerd> tell pmichaud I resubmitted pull requests for my packfile API work ( https://github.com/parrot/parrot/pull/937 https://github.com/perl6/nqp/pull/76 https://github.com/rakudo/rakudo/pull/106 )

[15:05] <phenny> pmichaud: 13:47Z <not_gerd> tell pmichaud it *did* turn out to be a two-way breaking change, so applying them might be tricky with regard to the release policy you outlined in #parrotsketch

[15:06] <uvtc> pmichaud++

[15:08] <census> pmichaud++++ :)

[15:09] <census> I do not worry about people using perl6 when it is ready. . . .

[15:09] <census> I, for starters, cannot wait :)

[15:11] <uvtc> census: My understanding is, if you're ok with current performance, and you're willing to ask a lot of questions, and maybe file some bug reports, there's no need to wait.

[15:16] <tadzik> early adopters, eh

[15:19] *** rindolf joined
[15:19] <uvtc> tadzik: personally, I'm waiting for beginner tutorial material. Otherwise I'd be asking way too many questions here and making a nuisance of myself. And also, a solid beginner tut would be a signal to me that says Perl 6 is ready for folks who just want to use it to make apps/websites and so on --- not just implementors/testers.

[15:21] <tadzik> hm

[15:21] <tadzik> masak wrote a nice one, and there's a book. Anything in particular that you find not good enough about htem?

[15:26] <uvtc> Last time I looked, there were too many things missing. I remember wondering about copy semantics (does assignment make me a copy, or do I get a reference to the thing?), what `:=` does, how to put arrays in arrays/hashes, the business with lists vs. arrays vs. parcels.

[15:27] *** not_gerd left
[15:28] *** adu joined
[15:28] <uvtc> And asking for details tends to either bring up terminology I don't understand (--> public yak shaving), and eventually leads to something similar to "go read the synopses" --- and those are a bit too dense for me (they seem to use lots of unfamiliar terminology/lingo, to me anyhow).

[15:29] <tadzik> hm

[15:29] <uvtc> For example, I asked something a while ago, and the answer involved know what lexpads were. I didn't want to keep asking question after question, so dropped it.

[15:30] <uvtc> s/know/knowing/

[15:30] <uvtc> (I mean, I didn't want to bug the list with question after question. I'm happy to ask them to myself. :) )

[15:30] *** adu left
[15:31] *** adu joined
[15:31] <brrt> uvtc, ask it again :-) 

[15:36] *** wk joined
[15:37] <uvtc> brrt: well, thank you for the invitation. :) But at some point, I have to surmise that if the Perl 6 community wants to bring in more users who just want to use the language to make stuff that interests them (not necessarily Perl 6 language development/implementation/tooling), they'll knuckle down for a short while and write a solid beginner tutorial so that the list doesn't need to be flooded with my sort of beginner questions. :)

[15:38] <brrt> uvtc, that is totally fair

[15:38] <brrt> there is an open source using perl 6 book

[15:38] <brrt> the examples actually ow

[15:38] <brrt> work

[15:38] <brrt> https://github.com/perl6/book

[15:39] <brrt> if that isn't enough to get you started, then either a): perl6 doesn't work as advertised or b): the book isn't good enough

[15:39] <brrt> and whichever, you're very welcome to report bugs :-)

[15:40] *** wk left
[15:45] *** hash_table joined
[15:45] <uvtc> tadzik: (or anyone else) if you're thinking of doing some writing, I created a little Perl 5 script to process and organize chapters (written in Markdown) into an easily navigable whole: http://www.unexpected-vortices.com/sw/gouda/index.html . I can't say I'm a fan of Pod, though I suspect many here are.

[15:45] <tadzik> that's very nice

[15:45] <tadzik> can we rewrite that in Perl 6? :)

[15:45] *** domidumont left
[15:46] <uvtc> Of course. Feel free. :) It shells out to Pandoc for the heavy lifting.

[15:47] <uvtc> I even made the default styling a bit higher contrast recently, just for masak.

[15:52] <masak> I'm curious what you'd think about my June 2011 blogging. search for "June 1 2011" on http://strangelyconsistent.org/blog/list-of-posts for the first post.

[15:52] <masak> (and yes, every time I do that, I realize that I should have a dedicated page for those posts)

[15:52] <masak> ooh, gists. :)

[15:52] * masak makes one

[15:55] *** fhelmberger left
[15:57] *** odoacre left
[15:57] *** odoacre joined
[15:59] <masak> uvtc: here you go: https://gist.github.com/masak/5014406

[15:59] <uvtc> masak: I think you're a skilled writer, and I like reading what you write. I think your June blog posts (I haven't read them all) are good at showing off some nice Perl 6 features. I think that, as a tutorial, they fall short in leaving out the sorts of details I mentioned above.

[16:00] <masak> oh, I haven't read the backlog carefully.

[16:00] * [Coke] is reminded to add "hacking on perl6 book" to his increasingly large list of things to do.

[16:00] <masak> ah -- seems you want more detail, yes.

[16:04] <uvtc> The Perl 6 Book is one approach. Example-driven. Another approach that I personally find more useful is the one used ... (hm... lesses, where is it used) well, the one used in the Alex Martelli's "Python in a nutshell" book. Chapter 4. It starts with the bits and pieces, and quickly moves up from there.

[16:04] *** JimmyZ_ joined
[16:06] <uvtc> The camel does this too (3rd ed, Part II: The Gory Details) but more in-depth.

[16:06] <census> uvtc: I agree that masak is an excellent writer!  He wrote some amazing perl5 tutorials

[16:07] *** JimmyZ left
[16:07] *** JimmyZ_ is now known as JimmyZ

[16:07] *** rindolf left
[16:08] <uvtc> masak: regarding your june 2011 blog posts, I added links to some of them, a while back, to http://wiki.perl6.org/Categorized%20External%20Articles .

[16:09] <masak> uvtc: nice.

[16:10] <uvtc> I'm not sure what happened to the front page of the wiki. I set it up a certain way, but it's much different now.

[16:12] <moritz> then probably some edits happened

[16:13] <moritz> the fate of wikis that don't die :-)

[16:13] <moritz> it also seems that the security question for signup is gone

[16:14] <uvtc> Just added http://wiki.perl6.org/Various%20Tutorials

[16:15] <tadzik> uvtc++

[16:15] <tadzik> and now I wonder: should we put that on perl6.org/documentation?

[16:15] <tadzik> I wanted the latter to be "you don't need to ask on the channel because everything is there"

[16:16] *** adu left
[16:16] *** adu joined
[16:16] <masak> +1

[16:19] <uvtc> Sidenote: there's already a link to that "Categorized External Articles" wiki page on the perl6.org/doc page (I added it a while ago, when I expected to be making more updates to that particular wiki page).

[16:22] <uvtc> tadzik: if you were to start a tadzik/perl6-tut github project using gouda (or a Perl 6 port of gouda), that would be ... well, let's just say, I'd have to start referring to you as "batman". If someone came up to me and said, "hey, you know that tadzik guy?", I'd say, "Oh, that cat? He's batman. That's who he is."

[16:22] <tadzik> uvtc: okay, I'm convinced now

[16:22] <tadzik> you'll have that by sunday

[16:23] <uvtc> \o/

[16:23] <moritz> do pandas eat gouda?

[16:23] <tadzik> that's just too tempting

[16:23] <jnthn> No, they can't bear it

[16:23] <tadzik> C'est ne pas una eukaliptus

[16:23] <tadzik> or however you write that

[16:23] *** JimmyZ left
[16:24] <moritz> tadzik: that's koala food

[16:24] <tadzik> oh, right

[16:24] <tadzik> uvtc: is gouda Perl 5 now?

[16:24] <uvtc> yes. It used to be Python.

[16:24] <tadzik> I wonder how far can Text::Markdown and Template::Mojo take me

[16:25] <felher> What about adding an optinal :$start-value to reduce, to turn it into a potential foldl? 

[16:25] <uvtc> It uses Pandoc because, well, see http://www.unexpected-vortices.com/sw/gouda/faq.html#why-use-pandoc-under-the-hood-why-not-my-favorite-markdown-implementation

[16:25] <felher> *optional

[16:25] <tadzik> I guess I can use pandoc as well

[16:26] <uvtc> tadzik: the wiki uses gitit, which uses Pandoc.

[16:26] <moritz> felher: nothing stops you from simply supplying the start value as the first element

[16:27] <tadzik> https://github.com/uvtc/gouda/blob/master/gouda.pl looks simple enough

[16:27] <uvtc> tadzik: yup

[16:27] <tadzik> cool

[16:27] <tadzik> ok, time to decomutee and release rakudo asap :)

[16:27] <felher> moritz: you mean like ($start-value, @list).reduce?

[16:27] * tadzik beams down

[16:28] <uvtc> Personally, I found the output as it is to be much easier to navigate than comparable Sphynx output (what Python+reST uses).

[16:28] <felher> (if i want to use the method form, of course)

[16:29] <felher> moritz: yeah, guess you are right. Fair enough :) Thnx :)

[16:40] *** brrt left
[16:52] *** Chillance joined
[16:53] *** donaldh left
[17:01] <tadzik> quick, a pm group for a release!

[17:01] <tadzik> /o\

[17:02] <lizmat> drinkers.pm?

[17:02] <tadzik> I just thought about that one

[17:02] <tadzik> great minds thing alike, eh? :)

[17:02] <tadzik> I don't see a reason why not

[17:03] * TimToady is drinking coffee

[17:03] <lizmat> :-)

[17:03] <moritz> drinkers.pm for hosting http://strangelyconsistent.org/blog/sweet-ports ?

[17:04] <TimToady> hah, made it look like lizmat++ smiled at my joke

[17:04] <moritz> TimToady: lizmat spoke before you

[17:04] *** daxim left
[17:04] <lizmat> TimToady: not on my screen  :-)

[17:04] <TimToady> only on my screen then

[17:05] <TimToady> we need a global serialization protocol...

[17:05] <masak> ah, reference frames :D

[17:05] <lizmat> strangelyinconsistent then

[17:05] <moritz> after the autopun, now the indipun: works only for one individual

[17:05] <TimToady> we need to send all our messages through the ilbot

[17:05] <moritz> TimToady: it's enough to read them all through ilbot :-)

[17:05] <lizmat> il gotten messages ?

[17:05] <masak> moritz: "it's funny from inside my cranium!" :)

[17:06] * TimToady clogs masak's cranium

[17:06] <masak> ow

[17:06] <lizmat> I hear there is a lot of cranium clogging going around

[17:07] <TimToady> ir, yeah

[17:07] <lizmat> but i hear it usually referred to as "flu"

[17:07] <TimToady> .oO(One flu over the parrot's nest...)

[17:08] <census> oh no :(

[17:08] <census> i'm very sad to hear :(

[17:09] <masak> census: chances are you're distraught over a joke... :)

[17:10] <census> oh good . . i am very happy to hear it is only a joke ;)

[17:11] <dalek> nqp: 883fd06 | tadzik++ | VERSION:

[17:11] <dalek> nqp: bump VERSION to 2013.02

[17:11] <dalek> nqp: review: https://github.com/perl6/nqp/commit/883fd06cc5

[17:12] *** ilbot6 left
[17:16] *** am0c left
[17:22] <tadzik> hmmm, does perl tools/update-tai-utc.pl src/core/tai-utc.pm work for you guys?

[17:22] <tadzik> it says Couldn't replace leap-second-dates at tools/update-tai-utc.pl line 29.

[17:35] *** zby_home_ joined
[17:38] *** SunilJoshi joined
[17:39] *** domidumont joined
[17:49] *** wk joined
[17:58] *** ilbot6 joined
[17:58] *** adu left
[17:59] *** wk left
[18:00] *** ilbot6 left
[18:00] *** ElDiabolo joined
[18:00] *** ilbot6 joined
[18:03] *** sqirrel left
[18:05] <moritz> Timbus: another Net::IRC bug: it seems to reset the .state<channels> hash for each line of nicks

[18:06] <moritz> Timbus: so for channels with lots of people in there (like #perl6), the list of nicks is incomplete

[18:07] <tadzik> moritz: does t/spec/S16-filehandles/filestat.t pass for you?

[18:07] <moritz> tadzik: yes

[18:07] <tadzik> hm, that's bad

[18:08] <tadzik> test 8 reliably fails here

[18:08] <tadzik> maybe that's because of noatime or such

[18:08] <moritz> looks like it, yes

[18:08] <moritz> maybe fudge that test

[18:08] <moritz> it's rather platform dependent

[18:09] <tadzik> ok, will do

[18:09] <dalek> rakudo/nom: 256339c | tadzik++ | tools/build/NQP_REVISION:

[18:09] <dalek> rakudo/nom: [release] bump NQP revision

[18:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/256339cac2

[18:09] <dalek> rakudo/nom: c89dd87 | tadzik++ | VERSION:

[18:09] <dalek> rakudo/nom: [release] bump VERSION

[18:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c89dd87cf7

[18:09] * moritz sometimes hates diversity

[18:12] *** ilbot6 left
[18:12] *** ilbot6 joined
[18:12] *** SamuraiJack joined
[18:14] *** ilbot6 left
[18:14] *** ilbot6 joined
[18:16] <dalek> rakudo/nom: 78d2a2a | tadzik++ | docs/announce/2013.02:

[18:16] <dalek> rakudo/nom: [release] Add a new release announcement

[18:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/78d2a2af31

[18:16] <tadzik> proofreading welcome

[18:17] <dalek> rakudo/nom: f67e101 | tadzik++ | docs/release_guide.pod:

[18:17] <dalek> rakudo/nom: Update the release guide

[18:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f67e101e49

[18:17] <uvtc> Is "drinkers" a place?

[18:18] <uvtc> Or a pm group's name?

[18:18] <lizmat> it's a state of mind

[18:18] <lizmat> just like New York  :-)

[18:22] <uvtc> Oh, lizmat, I see your suggestion in the backlog. Incidentally, I don't see Drinkers.pm listed at http://www.pm.org/groups/ . Or maybe I'm not getting the joke. :)

[18:22] <tadzik> it may be not official

[18:22] <lizmat> it's an unofficial pm group, mainly gathering in bars at larger Perl events

[18:23] <uvtc> Maybe it should be capitalized?

[18:23] <tadzik> no, I don't think so

[18:23] <tadzik> people use the lowercase name

[18:24] <uvtc> Ah

[18:24] <lizmat> I think you *can* actually select it as an affiliation in ACT

[18:24] <uvtc> "ACT"?

[18:25] <tadzik> the conference toolkit

[18:25] <lizmat> http://http://act.mongueurs.net

[18:26] <dalek> perl6-examples: cc2ca22 | (L. Grondin)++ | rosalind/ (2 files):

[18:26] <dalek> perl6-examples: [rosalind] FIB solution

[18:26] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/cc2ca2296f

[18:26] <uvtc> Emergency toolkit contains: pocket knife, camel brush, moist towellette, onion peeler, pumpkin masher...

[18:26] <lizmat> butterfly net?

[18:27] <uvtc> Oooh. Missed that one!

[18:27] <[Coke]> I don't think anyone from perl6 should be using a pumpkin masher.

[18:27] <lizmat> dinner&

[18:28] <uvtc> (to make pumpkin pie?) Ok, Pumpkin patcher? :)

[18:29] <uvtc> lizmat: thanks for the link

[18:30] <tadzik> where do I upload the release tarball now?

[18:31] *** moukeddar joined
[18:31] <uvtc> [Coke]: Yes, right. Didn't mean it in a bad way. I like the Pumpkin Pie idea, and Perl 5 in general.

[18:32] <uvtc> {sigh} s/Pumpkin Pie/Pumpkin Perl/ :)

[18:32] <masak> tadzik: to http://rakudo.org/downloads/rakudo/ somehow.

[18:32] <moritz> tadzik: have you given pmichaud your ssh key?

[18:33] <moritz> if yes: scp rakudo-2013.02.tar.gz [email@hidden.address]
[18:33] <moritz> if no, I can do it

[18:33] <moritz> or give me your ssh pubkey

[18:34] <uvtc> tadzik: re. announce doc, maybe break line 38.

[18:35] <uvtc> Are Parrot releases still being planned for the third Tuesday of every month?

[18:36] <uvtc> tadzik: Also, I like lines 50-51.

[18:36] <uvtc> tadzik: Is line 52 still applicable?

[18:37] <pmichaud> good afternoon, #perl6

[18:38] *** SunilJoshi left
[18:39] <masak> pmichaud! \o/

[18:39] <pmichaud> tadzik: I'd remove line 52

[18:39] <pmichaud> should "drinkers" be capitalized?

[18:39] <nwc10> good pm Pm

[18:39] <pmichaud> looks like maybe not

[18:40] <nwc10> oh, :-(

[18:40] <pmichaud> I meant about "drinkers.pm"  :-)

[18:40] <nwc10> oh. good

[18:40] <uvtc> Hi pmichaud o/. Just asked that myself (see backscroll). :)

[18:42] <pmichaud> drinkers.pm is available in ACT, yes.

[18:47] <pmichaud> ..."even a camel needs to have a drink"...   butterfly, perhaps?

[18:48] <pmichaud> or perhaps:   ...after drinkers.pm, a group that celebrates the raw materials which our developers turn into code.

[18:48] <uvtc> I think butterflies have a nip of nectar now and again.

[18:50] <dalek> rakudo/nom: 42f8ead | pmichaud++ | docs/announce/2013.02:

[18:50] <dalek> rakudo/nom: Some formatting updates to 2013.02 announcement.

[18:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/42f8ead6ed

[18:52] *** ilbot6 left
[18:52] *** ilbot6 joined
[18:52] <[Coke]> me has a perl6 installed, and a panda installed. "panda install Term::ANSIColor" -> Could not find Shell::Command 

[18:52] <TimToady> why does Term::ANSIColor do colored with args reversed from Perl 5?

[18:54] <moritz> [Coke]: looks like there was a problem with installing panda

[18:54] <moritz> [Coke]: that can happen by upgrading to a newer panda, and then still having the old ~/.perl6/bin dir in $PATH first

[18:55] *** ilbot6 left
[18:55] <[Coke]> ENO ~/.perl6

[18:56] <moritz> [Coke]: it doesn't install there anymore

[18:56] *** SamuraiJack left
[18:56] <moritz> [Coke]: but an old panda might still be in there, and found first in $PATH

[18:56] *** ilbot6 joined
[18:56] <[Coke]> the string .perl6 does not appear in my installed panda.

[18:57] <moritz> [Coke]: what does 'which panda' say?

[18:58] <[Coke]> /path/to/homedir/sandbox/sixdev/install/bin/panda

[18:58] <[Coke]> I'm doing a rebootstrap of panda.

[18:58] <[Coke]> (which is a symlink to site/bin/panda)

[18:59] <[Coke]> ok, that's better. now it's dying in a much more reasonable fashion (firewall)

[18:59] <PerlJam> TimToady: looks the same to me  colored($string, $color).  Though P5 has a version of colored where if you pass an array ref as the first param, the rest are strings.

[18:59] *** ilbot6 left
[19:00] *** ilbot6 joined
[19:02] <PerlJam> .oO( Perl 5 does MMD ... manual multi-method dispatch. )

[19:02] *** ilbot6 left
[19:02] *** ilbot6 joined
[19:03] *** ilbot6 left
[19:03] *** ilbot6 joined
[19:04] <ElDiabolo> Could anyone give me a pointer to a simple example for self-declared named formal parameters ?

[19:05] <moritz> r: { say $:foo }(foo => 42)

[19:05] <p6eval> rakudo a763a1: OUTPUT«42␤»

[19:05] <ElDiabolo> thx

[19:08] <ElDiabolo> moritz, Can it be that this requires a very new rakudo ?

[19:09] <[Coke]> what is panda using under the covers to download?

[19:09] <PerlJam> ElDiabolo: what version are you running?

[19:10] <moritz> ElDiabolo: no

[19:10] <ElDiabolo> PerlJam, Na, its someting else. The one liner from moritz works for me with -e

[19:11] <[Coke]> git?

[19:11] *** colomon joined
[19:11] <colomon> *

[19:11] <moritz> [Coke]: yes

[19:11] <moritz> self-declared formal params worked in rakudo in June 2010

[19:11] <moritz> s/formal/named/

[19:12] <dalek> nqp: 1cc0d94 | jnthn++ | src/NQP/Actions.pm:

[19:12] <dalek> nqp: Wrap a Parrot detail up in a QAST::VM.

[19:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1cc0d94fc8

[19:13] <[Coke]> ah. but the intial load is using parrot's LWP/UserAgent

[19:13] <[Coke]> (of the ecosystem list)

[19:13] *** japhb_ joined
[19:13] <[Coke]> wonder if it would be worth checking in the ecosystem to git so we can git pull that also.

[19:16] <PerlJam> moritz: he could have been using a *really* old rakudo  :)

[19:16] <[Coke]> tadzik: looks like LWP::UserAgent from parrot takes a proxy - any chance you can pass in ENV<http_proxy> if it's set?

[19:16] <moritz> PerlJam: you mean, prehistoric? :-)

[19:21] <colomon> o/

[19:21] <colomon> anything exciting happen in the last two days?

[19:21] * colomon is still trying to get his MBP back to working order...

[19:23] <ElDiabolo> r: { say $:foo } (foo => 42)

[19:23] <p6eval> rakudo 42f8ea: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/3rV7sWHnfi:1␤------> [32m{ say $:foo } [33m⏏[31m(foo => 42)[0m␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infix stopper␤        statement end␤        statement modifier␤   …

[19:23] <ElDiabolo> Whitespace does matter ?

[19:23] <PerlJam> yes

[19:23] <PerlJam> (in that context)

[19:23] <ElDiabolo> ouch.

[19:25] <PerlJam>  r: { say $:foo }.( foo => 42)

[19:25] <p6eval> rakudo 42f8ea: OUTPUT«42␤»

[19:25] <PerlJam> if you need a little space, you could always do that

[19:25] <GlitchMr> r: { say $:foo }(foo => 42)

[19:26] <p6eval> rakudo 42f8ea: OUTPUT«42␤»

[19:26] <GlitchMr> Perl 6 cares about whitespace more than Perl 5.

[19:26] *** wk joined
[19:26] <GlitchMr> Yes, Perl 5 cared about whitespace, but just in one specific case.

[19:26] <GlitchMr> r: say(1, 2), 3

[19:26] <p6eval> rakudo 42f8ea: OUTPUT«12␤»

[19:26] <GlitchMr> r: say (1, 2), 3

[19:26] <p6eval> rakudo 42f8ea: OUTPUT«1 23␤»

[19:26] <GlitchMr> As for Perl 5, well...

[19:27] <sorear> n: { say $:foo } (foo => 42)

[19:27] <p6eval> niecza v24-23-g0520c7c: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Strange text after block (missing comma, semicolon, comment marker?) at /tmp/9hHohtEfgG line 1:␤------> [32m{ say $:foo }[33m⏏[31m (foo => 42)[0m␤␤Parse failed␤␤»

[19:27] <sorear> n: { say $:foo }\       (foo => 42)

[19:27] <p6eval> niecza v24-23-g0520c7c: OUTPUT«42␤»

[19:27] <sorear> unspace!

[19:27] <GlitchMr> eval: my $var = 42; my %var = (foo => 42); print "$var {foo}\n";

[19:27] <PerlJam> oh, I forgot about that too

[19:27] <TimToady> PerlJam: re colored: oh, I see that now.  thanks... must do something about my illiteracy someday

[19:27] <GlitchMr> perl5: my $var = 42; my %var = (foo => 42); print "$var {foo}\n";

[19:27] <colomon> unspace!  the final frontier! 

[19:27] <GlitchMr> I'm sure we had Perl 5 eval bot once here.

[19:28] <GlitchMr> If you don't like whitespace sensitivity, use Python or something.

[19:28] <GlitchMr> Python is one of least sensitive to whitespace I've seen.

[19:28] <GlitchMr> Perl 5 is fine too.

[19:28] <PerlJam> GlitchMr: you're talking crazy about Python  ;)

[19:28] <GlitchMr> whitespace language*

[19:28] <census> yay for perl5 :)

[19:29] <GlitchMr> PerlJam, don't get me wrong, Python cares about whitespace to define block boundaries.

[19:30] <GlitchMr> Other than that, you are free to make code like please    ( func   (a +2, b=    3))

[19:30] <[Coke]> tadzik: ooh. having the module suggestions would be super awesome to help catch case problems.

[19:40] <PerlJam> So I took a stab at reimplementing HLL::Compiler::lineof in NQP (ie. without Q:PIR) and it's not working and I've decided I don't know what I'm doing.  Anyone care to help?

[19:41] <moritz> PerlJam: I can try

[19:41] <PerlJam> https://gist.github.com/perlpilot/5016011

[19:41] <PerlJam> that's the error I'm getting and the code I've written

[19:42] <PerlJam> the parts I really don't understand are nqp::getattr() and nqp::bindattr()  (I'm not sure if that's the way to set/get the classes @!linepos attr)

[19:42] <moritz> PerlJam: just use @!linepos

[19:43] <PerlJam> aye, that's what I started with I think but something led me to believe it was more complicated than that

[19:43] <jnthn> What line did you translate?

[19:43] <moritz> the whole method lineof in HLL::Compiler

[19:44] <PerlJam> I guess I'm trying to get the NQP equivalent to: setprop target, '!linepos', linepos

[19:44] <moritz> oh

[19:44] <moritz> properties != attributes

[19:45] <jnthn> properties?!

[19:45] <jnthn> urgh

[19:45] <moritz> yes, urgh

[19:45] * tadzik is back

[19:45] <PerlJam> aye, my strategy was to add a @!linepos attr to HLL::Compiler to be the cache

[19:46] <moritz> but the target isn't always the same

[19:46] <PerlJam> ah, indeed.  (this is why I decided I don't know what I'm doing anymore :)

[19:46] <moritz> so it'd need to be of form %!linepos{$target}

[19:47] <jnthn> And I'm not sure we always call it on an instance

[19:47] <jnthn> Could just have a hash

[19:47] <jnthn> er, leixcal I meant

[19:47] <moritz> (which has the disadvantage of leaving the cache alive even after the string gets GC'ed)

[19:48] <jnthn> Well, worse, it keeps the string from being GC'd...

[19:49] <moritz> because it's the hash key

[19:49] <moritz> right

[19:49] <PerlJam> Is there some way to get a unique ID for the target and use that for the hash key instead?

[19:50] <moritz> nqp::sha1 ?

[19:50] <PerlJam> s/some way/some relatively easy/

[19:50] <PerlJam> does that exist?

[19:50] <moritz> no idea how fast it is

[19:50] <PerlJam> ah

[19:51] <tadzik> release uploaded

[19:51] <jnthn> yes, it exists

[19:51] <jnthn> The number of places we use lineof is relatively small

[19:51] <jnthn> We could say "if you want it cached, you supply the hash"

[19:51] <jnthn> And update the places that are something besides error reporting.

[19:52] <TimToady> nom doesn't does 'handles *' yet, does it?

[19:52] <jnthn> TimToady: I thought it did...

[19:52] <TimToady> *doesn't do

[19:52] <jnthn> r: class A { has $.x handles * }; A.new(x => class { method omg { say 42 } }).omg

[19:52] <p6eval> rakudo 42f8ea: OUTPUT«42␤»

[19:53] <tadzik> ok, release done

[19:53] <tadzik> sorry for lateness

[19:53] <jnthn> tadzik++

[19:53] *** domidumont left
[19:53] <tadzik> now we celebrate \o/o

[19:53] <tadzik> unless I screwed up :)

[19:53] <PerlJam> tadzik++

[19:53] <PerlJam> tadzik: even if you screwed up, we still celebrate!  :)

[19:53] <tadzik> ossum :)

[19:54] <jnthn> moritz, PerlJam: For Rakudo having a $*LINE_CACHE or so as a contextual declared in comp_unit would largely do it

[19:54] <jnthn> And then PIRT.pm is the other place that'd want an update I guess

[19:55] <jnthn> That way, the cache won't live for ever.

[19:55] <TimToady> r: https://gist.github.com/TimToady/5016105

[19:55] <p6eval> rakudo 42f8ea: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/hv5hz0s5wN:1␤------> [32mhttps[33m⏏[31m://gist.github.com/TimToady/5016105[0m␤    expecting any of:␤        argument list␤        postfix␤        infix or meta-infix␤        infix stopper␤        stateme…

[19:55] <TimToady> I thought that got fixed...

[19:55] <[Coke]> my @a = <1 2 3 4 5>; say @.pick(3); say @a; # how do I "use up" my picked choices?

[19:55] <[Coke]> r: my @a = <1 2 3 4 5>; say @.pick(3); say @a; # how do I "use up" my picked choices?

[19:55] <p6eval> rakudo 42f8ea: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable @.pick used where no 'self' is available␤at /tmp/9dyeilziAo:1␤------> [32mmy @a = <1 2 3 4 5>; say @.pick(3)[33m⏏[31m; say @a; # how do I "use up" my picked [0m␤»

[19:56] <TimToady> jnthn: anyway, that can't find postcircumfix:<{ }>

[19:56] <[Coke]> r: my @a = <1 2 3 4 5>; say @a.pick(3); say @a; 

[19:56] <p6eval> rakudo 42f8ea: OUTPUT«4 2 5␤1 2 3 4 5␤»

[19:56] <TimToady> make me wonder if there's a space dependency in handling *

[19:57] * [Coke] goes for shuffle first, then pop.

[19:58] <TimToady> jnthn: (referring to my gist)

[19:58] <jnthn> TimToady: Grr, my local needs a rebuild, but I can guess it.

[19:58] <jnthn> TimToady: * works as a failover

[19:58] <jnthn> TimToady: But method dispatch finds a postcircumfix:<{ }> in Any and call shtat.

[19:58] <jnthn> *calls

[19:58] <TimToady> 'course, we're planning to unmethod that...

[19:58] <jnthn> Yeah

[19:59] <jnthn> What's the actual error? Or wait a bit and I'll have rebuilt :)

[19:59] <TimToady> postcircumfix:<{ }> not defined for type FreezeHash

[19:59] <TimToady> from the first $fh<a>

[20:00] <jnthn> Oh...

[20:01] *** ilbot6 left
[20:01] <masak> [Coke]: hm, there's something called .grab that removes stuff, but it seems to be only for Bags.

[20:01] <jnthn> Any defines at_key

[20:01] <dalek> rakudo/nom: 483ce86 | moritz++ | docs/release_guide.pod:

[20:01] <dalek> rakudo/nom: [docs] update the download step in the release guide

[20:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/483ce861d4

[20:01] <jnthn> It defines it as a multi. On an undefined thing, it's what handles auto-viv.

[20:01] <jnthn> Then it does:

[20:01] <jnthn>     multi method at_key(Any:D: $key) {

[20:01] <jnthn>         fail "postcircumfix:<\{ \}> not defined for type {self.WHAT.perl}";

[20:01] <jnthn>     }

[20:01] <jnthn> Which is the error you're getting.

[20:02] <[Coke]> masak: eh. this could be a bag, but I'm hiding it behind a class anyway.

[20:02] <jnthn> Anything that does implement at_key will override this

[20:02] <masak> r: my $x = bag 1, 1, 1, 2, 2; say $x.grab(2); say $x

[20:02] <p6eval> rakudo 42f8ea: OUTPUT«No such method 'grab' for invocant of type 'Bag'␤  in block  at /tmp/B1PdSt7irP:1␤␤»

[20:02] <masak> :/

[20:02] *** SmokeMachine left
[20:03] *** kst joined
[20:03] <jnthn> TimToady: Anyway, even if that candidate wasn't there in Any, it won't fallback because the method dispatch worked. It would be the follow-up multi-dispatch that fails.

[20:04] <[Coke]> n: my $x = bag 1, 1, 1, 2, 2; say $x.grab(2); say $x

[20:04] <p6eval> niecza v24-23-g0520c7c: OUTPUT«Unhandled exception: Unable to resolve method grab in type Bag␤  at /tmp/c16lup5CsB line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4233 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4234 (module-CORE @ 580) ␤  at /home/p…

[20:04] <jnthn> TimToady: So far as I can tell, it's working as I understand the design. Maybe I misunderstand the design. ;)

[20:06] * jnthn looks a bit further

[20:06] *** SmokeMachine joined
[20:06] <jnthn> TimToady: oh...

[20:06] <jnthn> TimToady: It's the nextsame, I think

[20:07] <jnthn> That nextsame's up to the at_key in the base class

[20:09] <jnthn> TimToady: https://gist.github.com/jnthn/5016208 wfm

[20:09] <TimToady> ah

[20:09] <TimToady> incomplete transformation from 'is Hash'

[20:10] <TimToady> thanks

[20:10] <jnthn> np

[20:10] <jnthn> I added an is rw that you probably also want, btw

[20:11] <TimToady> ah, yes

[20:11] <TimToady> for some reason thinking I wanted to leave that out, but it's for the hash element, not the hash keys

[20:12] <jnthn> Not sure the "is copy" is needed

[20:13] <jnthn> (on $key)

[20:13] <jnthn> Unless you have something else in mind :)

[20:15] <jnthn> nqp: nqp::iscclass(nqp::const::CCLASS_NUMERIC, 'foo', -1)

[20:15] <p6eval> nqp:  ( no output )

[20:16] <jnthn> nqp: nqp::iscclass(nqp::const::CCLASS_NUMERIC, 'foo', 4)

[20:16] <p6eval> nqp:  ( no output )

[20:16] <jnthn> pmichaud: Regex engine relies on this not throwing; dunno if accidental or not.

[20:16] <jnthn> (In anchor)

[20:17] <timotimo> jnthn: did you find the opportunity to look at the net::zmq thing i ran into earlier today?

[20:17] <jnthn> timotimo: ah, no...forgot about that with all the $dayjob inbetween then and now 

[20:18] <timotimo> no problem

[20:19] <tadzik> [Coke]: I suppose so (proxy and lwp-useragent)

[20:20] <[Coke]> tadzik: Or, switch to git! :)

[20:21] <[Coke]> (since we already need git support to install anything

[20:21] <[Coke]> tadzik++ #panda

[20:21] <[Coke]> tadzik++ #term ansi color

[20:22] <jnthn> Move to git could work out well in so far as it's one less dependency and it removes a Parrot-specific dependency

[20:22] <jnthn> timotimo: Got the link handy again?

[20:22] <timotimo> just a sec

[20:22] <timotimo> 10:11 

[20:22] <timotimo> timotimo

[20:22] <timotimo> http://sprunge.us/JFSI - put this into t/01-recv-send.t and run arnsholt/Net-ZMQ with its tests

[20:23] <tadzik> [Coke]: git what, the ecosystem thing?

[20:23] <dalek> nqp-jvm-prep: 0a63679 | jnthn++ | src/org/perl6/nqp/runtime/Ops.java:

[20:23] <dalek> nqp-jvm-prep: nqp::iscclass shouldn't throw on bad offset.

[20:23] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/0a63679b19

[20:23] <dalek> nqp-jvm-prep: 9b85521 | jnthn++ | lib/QAST/JASTCompiler.nqp:

[20:23] <dalek> nqp-jvm-prep: Compile regex anchors.

[20:23] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/9b85521379

[20:23] <tadzik> hm

[20:23] <jnthn> oh, I need to grab a bunch of stuff...

[20:24] <tadzik> it should be possible

[20:24] <timotimo> oh, right, libzmd and such

[20:24] <jnthn> timotimo: Can you maybe golf it to something that means I don't have to grab ZeroMQ etc?

[20:24] <timotimo> i can surely try.

[20:25] <timotimo> i think "zecromq etc" boils down to "only zeromq"

[20:25] <timotimo> got a random struct from a random library for me please?

[20:26] <timotimo> oh, i probably only need "is repr("CPointer")

[20:27] <jnthn> Try with that, yeah

[20:31] <timotimo> http://sprunge.us/LGRG 

[20:31] <timotimo> this golfs it for me

[20:32] <moritz> r: class A is repr('CPointer') { method a(Cool) { 'C' }; method a(Int) { 'I' } }; say A.a(42)

[20:32] <p6eval> rakudo 483ce8: OUTPUT«[31m===[0mSORRY![31m===[0m␤Package 'A' already has a method 'a' (did you mean to declare a multi-method?)␤at /tmp/XlyYFbLaAu:1␤------> ␤»

[20:32] <moritz> r: class A is repr('CPointer') { multi method a(Cool) { 'C' }; multi method a(Int) { 'I' } }; say A.a(42)

[20:32] <p6eval> rakudo 483ce8: OUTPUT«I␤»

[20:34] <ElDiabolo> Can I create a pair with a dynamic key?

[20:34] <jnthn> hm, this golfs quite a way...

[20:34] <tadzik> sure you can

[20:34] <tadzik> also: what happens if you try? :)

[20:34] <ElDiabolo> tadzik, How   ?

[20:35] <tadzik> er

[20:35] <tadzik> r: my $a = foo; my $b = $a => 5; say $b.perl

[20:35] <p6eval> rakudo 483ce8: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤    foo used at line 1␤␤»

[20:35] <tadzik> huh

[20:35] <tadzik> r: my $a = 'foo'; my $b = $a => 5; say $b.perl

[20:35] <p6eval> rakudo 483ce8: OUTPUT«"foo" => 5␤»

[20:35] <tadzik> seems to work

[20:36] <ElDiabolo> tadzik, Uh, it's foo, not 'foo'. I see

[20:37] <jnthn> timotimo: Seems to boils down to the "int"

[20:37] <tadzik> uvtc: around?

[20:37] <uvtc> hi, tadzik 

[20:37] <timotimo> mhm. i'll try changing the method to use Int instead and turn that into int

[20:37] <tadzik> gouda acts funny for me

[20:37] <tadzik> https://gist.github.com/tadzik/5016371

[20:38] <uvtc> Right. It's telling you that the first line of each doc/*.md should start with a Pandoc-style title header.

[20:38] <timotimo> Error in `perl6': free(): invalid next size (fast): 0x000000000b0fa3b0 ***  -  whoops :)

[20:38] <uvtc> % My Title

[20:38] <tadzik> yeah, but it looks good to me

[20:38] <tadzik> %?

[20:39] <uvtc> Right. % is for the the title block.

[20:39] <uvtc> # is for h1

[20:39] <tadzik> well, gouda says #

[20:39] <tadzik> bug?

[20:39] <ElDiabolo> r: my $foo = 'foo';

[20:39] <p6eval> rakudo 483ce8:  ( no output )

[20:39] <uvtc> tadzik: See http://johnmacfarlane.net/pandoc/README.html#title-block

[20:39] <uvtc> Oh, does it?

[20:39] <tadzik> uvtc: yeah, it's just that gouda's error message is confusing

[20:40] <uvtc> tadzik: gah. Sorry. :)

[20:40] <tadzik> https://gist.github.com/tadzik/5016371#file-gistfile1-txt-L11

[20:40] <ElDiabolo> r: my $f = 'foo'; { say $:foo }($f => 42)

[20:40] <p6eval> rakudo 483ce8: OUTPUT«Required named parameter 'foo' not passed␤  in block  at /tmp/TvNaX8A8Vs:1␤␤»

[20:40] <uvtc> tadzik: will fix. Need to be afk for a moment.

[20:40] <tadzik> oh, I can fix that :)

[20:41] <ElDiabolo> What is wrong with the above. I would expect 42.

[20:41] <moritz> ElDiabolo: you're passing a positional parameter which is a Pair

[20:42] <jnthn> It needs to be some-literal => 42

[20:42] <moritz> r: my $f = 'foo'; { say $:foo }(|($f => 42))

[20:42] <p6eval> rakudo 483ce8: OUTPUT«42␤»

[20:42] <jnthn> Otherwiwe it needs...what moritz++ showed

[20:42] <ElDiabolo> moritz, Uh, I can't do dynamic named parameters ?

[20:43] <jnthn> ElDiabolo: moritz just showed you how to do it.

[20:43] <ElDiabolo> Yeah, just saw it. Thx.

[20:43] <jnthn> :)

[20:43] <jnthn> timotimo: Just tracked it back to a code-path inside multidispatch.c that may need some review. Will look into it.

[20:44] <timotimo> thank you! i think i will take this opportunity to go to sleep

[20:44] *** mikess joined
[20:44] <timotimo> good night!

[20:44] <mikess> tadzik: :))))

[20:44] <mikess> tadzik: siema ;)

[20:45] <tadzik> witaj, mikess 

[20:46] <uvtc> tadzik: fixed, thanks

[20:46] <tadzik> but I pull requested already :)

[20:46] <tadzik> dang :)

[20:47] <uvtc> tadzik: oof, sorry! I wasn't logged into github.

[20:47] <moritz> ElDiabolo: look at the code in Math::Model, it introspects named parameters, does stuff with it and finally calls them

[20:47] * masak dives back into reviewing p6cc t1 solutions

[20:48] <ElDiabolo> moritz, I took a look at an example ith Math::Model, but it does too much other stuff. I now have a simple example, thats better.

[20:49] <raiph493> sixers, please try http://tinyurl.com/perl6now and either let me know what's weak or update the engine yourself (instructions at the engine page)

[20:50] <[Coke]> raiph493: I would recommend not giving out the account password.

[20:56] <moritz> it doesn#t work for me

[20:56] <moritz> I type in some search terms

[20:56] <moritz> and it says "Loading" in two palces

[20:56] <moritz> but doesn't seem to do anything at all

[20:56] <masak> tadzik: you forgot to update https://en.wikipedia.org/wiki/Rakudo_Perl_6 !

[20:56] <tadzik> huh

[20:56] <tadzik> I updated Rakudo

[20:57] <tadzik> ...or so I think...

[20:57] <[Coke]> works here in chrome/mac

[20:57] <masak> ...in the infobox to the right...

[20:57] <masak> says #60 "Sonoma" / January 17, 2013; 36 days ago

[20:57] <tadzik> looks good now

[20:58] <masak> tadzik++

[20:58] <masak> tadzik: "the most recent release as of January 2013, #60, is codenamed Sonoma"

[20:58] <masak> tadzik: you missed that one.

[20:58] <[Coke]> perl6 sucks -> 3 matches, perl6 rocks -> 7 matches

[20:58] <tadzik> aah

[20:58] <masak> what about perl6 rules? :P

[20:58] <raiph493> moritz: it sometimes gets stuck with the "loading" comment. please try again with "calculator"

[21:06] <moritz> no dice

[21:15] <dalek> nqp-jvm-prep: b2a7fe1 | jnthn++ | lib/QAST/JASTCompiler.nqp:

[21:15] <dalek> nqp-jvm-prep: Implement conjseq.

[21:15] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/b2a7fe1339

[21:17] *** TheVenetianMask joined
[21:17] *** kaare_ left
[21:17] *** SmokeMachine left
[21:18] <TimToady> http://rosettacode.org/wiki/Create_an_object/Native_demonstration#Perl_6   # jnthn++

[21:18] *** SmokeMachine joined
[21:18] *** jac50 joined
[21:21] *** moukeddar left
[21:22] *** SmokeMachine left
[21:25] <[Coke]> TimToady: should the rakudo version elide the day?

[21:26] <TimToady> no, because it's blead rakudo, I think

[21:26] *** benabik left
[21:26] <TimToady> well, within a day or so anyway

[21:27] <[Coke]> ah.

[21:28] <[Coke]> so we beat everyone but J for golf on that one. :)

[21:28] <masak> \o/

[21:29] <TimToady> though it works fine on the last Star

[21:29] * masak .oO( and J beats itself for anything but golf ) :P

[21:30] *** mberends left
[21:30] <colomon> Is anyone else having problems installing Simple::Email?  I can get it to pass its tests if I grab it from github and run them by hand, but "panda install Email::Simple" is failing for me.

[21:30] *** benabik joined
[21:30] <TimToady> I thought the entropy entry did a good job of getting close to the density of J without looking golfed

[21:30] <masak> ok, so I'm done reviewing t1.

[21:30] <tadzik> colomon: maybe it doesn't work when precompiled, did you check that?

[21:31] <masak> and the night is young, so I can easily sit down and write a blog post now, too.

[21:31] <TimToady> \o/

[21:31] <masak> question to people: would you prefer that I push my reviews *now*, for you to be early beta readers of them, or *later* with the blog post?

[21:32] <colomon> tadzik: oh, actually the problem seems to be "Could not find DateTime::Utils in any of: " blah.  Of course, I just installed DateTime::Utils a second ago, so this is a puzzlement.

[21:32] <nwc10> jnthn: tests still pass (except the one that needs ICU)

[21:33] * masak writes blog post

[21:33] <PerlJam> masak: would you prefer to have input from your beta readers before your blog post appears for public consumption?  :)

[21:33] <colomon> tadzik: another question for you: does emmentaler still work?  I'm starting to think we should have it automated...

[21:35] <masak> PerlJam: yes, that'd be nice.

[21:35] <masak> PerlJam: appearances notwithstanding, I am not infalliable, and errors may creep into reviews.

[21:35] <ElDiabolo> r: sub infix:<foo>($x, $y) is tighter(&infix:<+>) {$x - $y}

[21:35] <p6eval> rakudo 483ce8:  ( no output )

[21:36] <masak> (that was irony, by the way. of course I am infallible.)

[21:36] *** dolmen joined
[21:37] * TimToady 's brane infalliates explosively

[21:37] *** bluescreen10 left
[21:38] *** bluescreen10 joined
[21:39] *** bluescreen100 joined
[21:39] <masak> t1 reviews are here: https://github.com/masak/p6cc2012/tree/master/t1/review

[21:39] <masak> now to write le blog post...

[21:41] <ElDiabolo> r: sub infix:<foo>($x, $y) is tighter(&infix:<+>) is export  {$x - $y}

[21:41] <p6eval> rakudo 483ce8:  ( no output )

[21:42] *** bluescreen10 left
[21:45] <PerlJam> masak: When you say that the programs "appear correct", what does that mean?

[21:48] *** domidumont joined
[21:48] <masak> PerlJam: that I peered at them and didn't find any obvious errors.

[21:49] <masak> my language is sometimes more certain than that when the algorithm accords with my way of thinking.

[21:49] <masak> so "appears correct" has a note of "but it's also too complicated to be sure" in it.

[21:49] <masak> "correct until proven incorrect" :)

[21:49] <PerlJam> okay.

[21:50] *** shinobicl left
[21:50] <PerlJam> is that "I fiddled with it manually supplying inputs and got the outputs I expected"?

[21:52] <masak> no, the base-test file takes care of that.

[21:52] <moritz> masak++ # review

[21:52] <PerlJam> I expected something like "passes my test suite", thus my questions.

[21:53] *** ilbot6 joined
[21:53] *** moritz_ joined
[21:54] *** moritz_ left
[21:54] *** ilbot6 left
[21:54] <PerlJam> yes, masak++

[21:54] <masak> all solutions by definition pass base-test.

[21:54] <masak> but the "appears to be correct" also means that I looked at them and didn't find fault.

[21:55] <masak> someone else might, though.

[21:55] <PerlJam> aye, but I was thinking you might have some extra-special tests that you conjured up

[21:55] <PerlJam> like something that could exercise logic loops in the knights/knaves problem.

[21:56] <colomon> tadzik: I am thinking that panda is installing DateTime::Utils to /home/colomon/.perl6/lib, but Rakudo is looking for it in /home/colomon/.perl6/2013.01-142-g9c59a13/lib

[21:57] <masak> PerlJam: I'm tempted to do that now :)

[21:57] <masak> PerlJam: any suggestions?

[21:57] <PerlJam> not off the top of my head, no :)

[21:58] <PerlJam> what?  omniscience doesn't come with the infallibility?  ;)

[21:58] *** benabik left
[21:59] *** skids left
[22:00] <masak> ...or I already know, but I'm just testing you :P

[22:01] *** ilbot6 joined
[22:02] *** moritz_ joined
[22:02] *** hash_table left
[22:02] *** moritz_ left
[22:03] * [Coke] wonders if anyone else handled the case of "A and B and C are of the same type" !

[22:03] *** shinobicl joined
[22:03] *** shinobicl left
[22:04] *** lustlife left
[22:04] *** ElDiabolo left
[22:05] <[Coke]> appears to be so. I had hoped that one of masak's tests would include that extension of the described grammar.

[22:06] <[Coke]> I appear to have done much better than last year, at least on t1. \o/

[22:07] <masak> \o/

[22:08] * [Coke] is pissed he missed variable-named-same-as-argument!

[22:11] <masak> ;)

[22:11] *** ilbot6 left
[22:13] <dalek> nqp-jvm-prep: 9ded178 | jnthn++ | nqp-src/NQPHLL.pm:

[22:13] <dalek> nqp-jvm-prep: Start working towards NQPHLL cross-compilation.

[22:13] <dalek> nqp-jvm-prep: 

[22:13] <dalek> nqp-jvm-prep: This adds a HLL::Grammar with some pieces that don't yet work

[22:13] <dalek> nqp-jvm-prep: commented out.

[22:13] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/9ded178b6d

[22:13] <dalek> nqp-jvm-prep: 7760d12 | jnthn++ | / (2 files):

[22:13] <dalek> nqp-jvm-prep: Compile uniprop (for /<:L>/ style things).

[22:13] <dalek> nqp-jvm-prep: 

[22:13] <dalek> nqp-jvm-prep: May need to do some massaging of the property names, but this basically

[22:13] <dalek> nqp-jvm-prep: works.

[22:13] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/7760d126e1

[22:13] <dalek> nqp-jvm-prep: 889496e | jnthn++ | docs/ROADMAP:

[22:13] <dalek> nqp-jvm-prep: Update ROADMAP.

[22:13] <dalek> nqp-jvm-prep: 

[22:13] <dalek> nqp-jvm-prep: Of note, all features of QAST::Regex are now handled.

[22:13] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/889496e524

[22:13] <dalek> nqp-jvm-prep: 7d7c81b | jnthn++ | nqp-src/QRegex.nqp:

[22:13] <dalek> nqp-jvm-prep: Uncomment some Cursor methods that now compile.

[22:13] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/7d7c81bc60

[22:13] * [Coke] begs for extra credit on the more-than-two-person solution!

[22:14] <[Coke]> jnthn++

[22:16] *** benabik joined
[22:18] *** dolmen left
[22:18] <PerlJam> [Coke]: you probably would have had to have used macros to get extra credit   ;-)

[22:20] <jnthn> For even more credit, name it marco

[22:20] <diakopter> ++

[22:21] *** domidumont left
[22:21] *** woolfy left
[22:24] * masak runs jnthn down with a polo pony

[22:27] * [Coke] wonders if he can create a macro called marco that is just an macro macro.

[22:31] <masak> blog post written. publishing.

[22:37] *** labster joined
[22:40] <masak> lol, I blug! \o/ http://strangelyconsistent.org/blog/t1-tell-knights-from-knaves

[22:53] <tadzik> colomon: (emmentaler) afaik it's still functional, yes. sergot got a cronjob running it periodically at some point

[22:54] <tadzik> colomon: (DateTime::Utils) weird, I'll investigate in a second

[23:00] * jnthn enjoyed looking through the p6cc submissions; masak++

[23:00] *** gdey joined
[23:08] *** alester left
[23:12] *** mtk left
[23:16] *** jac50 left
[23:22] *** skids joined
[23:24] *** mtk joined
[23:31] *** spider-mario left
[23:35] *** wk left
[23:46] <census> Does anybody know how to ask mech about its cookies?

[23:46] <labster> Lingua::Number supports ordinal and decimal fractions now, in english, japanese, and spanish.

[23:48] <labster> making modules is fun.

[23:49] <masak> census: it's not cool to ask Perl 5 questions in here. you know that.

[23:50] <masak> census: if you're boring and refusing to learn, that's a good reason to kick you, incredibly nice though we may be.

[23:50] <census> i know . . .it is after hours so i thought 1 ? might be ok :(

[23:50] <jnthn> labster: nice :)

[23:50] <masak> census: it is not OK.

[23:50] <census> ok i'm sorry :(

[23:50] <geekosaur> there is no after hours on IRC

[23:50] <jnthn> IRC has...after hours? :)

[23:51] <masak> census: find a forum with Perl people who are willing to help you. people have suggested repeatedly how you may do this. forget about #perl, there are other places.

[23:51] <census> i take it all back . . .

[23:51] <geekosaur> "after hours" for you is midday for several p6 devs

[23:51] <geekosaur> or various other times of day

[23:51] <labster> it's happy hour for me

[23:52] <jnthn> 2 modules for the price of 1!

[23:53] <labster> Well, now that you mention it, I did add a way to compare multiple files to File::Compare.  Which makes File::Find::Duplicates only 90x slower than fdupes written in C.

[23:54] * labster eagerly awaits either sixparrot or JVM. jnthn++

[23:57] * masak .oO( they need to do way instain File::Find::Duplicated, who kill their performance )

[23:58] <tadzik> :D

[23:58] <masak> 'night, #perl6

[23:58] <census> good ngiht :)

[23:58] <census> dont' let the perl bugs bite

[23:59] <jnthn> 'night, masak

[23:59] <mikess> tadzik: jak tam? ;>

[23:59] <tadzik> not bad :)

[23:59] <mikess> ;)

[23:59] <mikess> sure

[23:59] <mikess> how are you?

[23:59] <mikess> where 're you now?

[23:59] <tadzik> not bad, as I said :)

[23:59] <tadzik> Warsaw, as usual

[23:59] <swarley> I was going to do something in OCaml, but now I forget what

[23:59] <mikess> tadzik: ok

