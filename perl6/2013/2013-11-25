[00:02] *** Ben_Goldberg joined
[00:02] *** BenGoldberg left
[00:02] *** Ben_Goldberg is now known as BenGoldberg

[00:03] *** denis_boyun joined
[00:04] *** arnsholt_ joined
[00:04] *** denis_boyun__ left
[00:04] *** denis_boyun left
[00:12] *** Psyche^ joined
[00:17] <timotimo> berekuk: i just ran a chrome developer tools audit thingie on questhub

[00:20] <timotimo> there's a crapton of unused CSS rules (which is probably just bootstrap being what it is), but you could let the browser cache a lot of things

[00:20] <timotimo> also interesting: Optimize the order of styles and scripts (4) To ensure CSS files are downloaded in parallel, always include external CSS before external JavaScript.

[00:21] <timotimo> and it claims that button.css and button.min.js would save about two thirds of their size by getting gzip-compressed by your web server

[00:21] <timotimo> just tiny things to make your site snappier :)

[00:21] *** dalek joined
[00:21] *** ChanServ sets mode: +v dalek

[00:22] *** bloonix joined
[00:36] *** dmol left
[00:36] <[Coke]> looks like niecza is failing a bunch of tests.

[00:37] <[Coke]> as is rakudo.jvm

[00:38] *** rurban1 left
[00:39] <[Coke]> preflex: tell moritz https://github.com/moritz/Math-Model/pull/2 is the only  deprecation warning left in the R* trial builds.

[00:39] <preflex>  Consider it noted.

[00:39] *** raiph joined
[00:45] <[Coke]> one more failing test on lwp-simple

[00:46] <[Coke]> er, one *remaining* failing test. looks like most of the failures have been fixed.

[00:48] *** dayangkun joined
[00:54] <BenGoldberg> preflex: seen yoleaux

[00:54] <preflex>  yoleaux was last seen on #perl6 30 days, 5 hours, 32 minutes and 35 seconds ago, saying: 18:23Z <diakopter> Mouq: awesome work on stdsigspace Mouq++

[01:04] *** MikeFair joined
[01:04] *** pecastro left
[01:06] *** cognominal__ joined
[01:07] *** pecastro joined
[01:07] *** salv0 joined
[01:08] *** cognominal left
[01:08] *** moritz joined
[01:09] *** rurban1 joined
[01:10] *** rurban2 joined
[01:13] *** rurban1 left
[01:15] *** rurban2 left
[01:26] *** raiph left
[01:26] <colomon> [Coke]: dang it, merged your Math::Model pull request and *then* figured out it doesn't work.  :\

[01:30] <colomon> r: class A { has %!a; method b() { %!a{"hello"}:exists; };  }; A.new.b

[01:30] <camelia> rakudo-parrot 60c8c1, rakudo-jvm 60c8c1: ( no output )

[01:30] <colomon> r: class A { has %!a; method b() { 1 || %!a{"hello"}:exists; };  }; A.new.b

[01:30] <camelia> rakudo-jvm 60c8c1: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/rqb98vBvJl␤You can't adverb that␤at /tmp/rqb98vBvJl:1␤------> [32ma; method b() { 1 || %!a{"hello"}:exists[33m⏏[31m; };  }; A.new.b[0m␤    expecting any of:␤        pair value␤»

[01:30] <camelia> ..rakudo-parrot 60c8c1: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/ftMf8XqZ2x␤You can't adverb that␤at /tmp/ftMf8XqZ2x:1␤------> [32ma; method b() { 1 || %!a{"hello"}:exists[33m⏏[31m; };  }; A.new.b[0m␤    expecting any of:␤        pair value␤»

[01:31] <colomon> rakudobug?

[01:32] <colomon> anyway, I've added parens around it in Math::Model and everything is happy again.

[01:33] <colomon> moritz: ^^

[01:38] * colomon feels good making even a tiny little commit somewhere.

[01:50] *** Entonian joined
[01:52] *** Entonian left
[02:00] *** raiph joined
[02:05] *** rurban1 joined
[02:08] *** prevost joined
[02:25] *** dayangkun left
[02:32] <[Coke]> colomon: thank you for fixing it. I think I didn't test it because it had prereqs. sorry about that

[02:32] <colomon> no worries

[02:33] <colomon> I made sure to set up panda first so the prereqs would be easy.  

[02:34] <colomon> and now I have an up-to-date rakudo and panda and whatnot

[02:35] <colomon> Actually merging the pull request was the easiest way I could figure out to test it.  I know there must be something better.

[02:44] *** btyler left
[02:48] *** kurahaupo_ joined
[02:49] *** kurahaupo_ left
[02:50] *** kurahaupo_ joined
[02:50] *** kurahaupo_ left
[02:59] *** btyler joined
[03:06] *** rurban1 left
[03:11] *** FROGGS left
[03:16] *** FROGGS joined
[03:19] *** raiph left
[03:22] *** prevost left
[03:27] <BenGoldberg> p56: say 'à';

[03:27] <camelia> p5-to-p6 : OUTPUT«say(chr(195) ~ chr(160))␤»

[03:34] <TimToady> um, no

[03:36] *** telex joined
[03:46] *** kaleem joined
[04:04] *** adu joined
[04:04] <adu> std: $*LANG

[04:05] <camelia> std 8370f3f: OUTPUT«ok 00:01 121m␤»

[04:05] *** preflex joined
[04:05] *** ChanServ sets mode: +v preflex

[04:10] *** kaleem left
[04:12] <TimToady> std: $*NONESUCH

[04:12] <camelia> std 8370f3f: OUTPUT«ok 00:01 121m␤»

[04:20] *** ssutch joined
[04:41] <raydiak> 'Foo::Bar'.eval.new; # is there a better way than eval to get a type object from a string containing a class name?

[04:42] <TimToady> ::($string) should work

[04:43] <raydiak> beautiful...thanks!

[04:53] <BenGoldberg> r: my $foo = 'Str'; say ::($foo)

[04:53] <camelia> rakudo-parrot 60c8c1, rakudo-jvm 60c8c1: OUTPUT«(Str)␤»

[04:54] <BenGoldberg> r: my $foo = 'Asdf::qwerty'; say ::($foo)

[04:54] <camelia> rakudo-jvm 60c8c1: OUTPUT«No such symbol 'Asdf::qwerty'␤  in block  at /tmp/nhZwoY8yd7:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1086␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1292␤  in any command_eval at gen/jvm/stage2/NQPHLL.nqp:1196␤  in any command_eval at sr…»

[04:54] <camelia> ..rakudo-parrot 60c8c1: OUTPUT«No such symbol 'Asdf::qwerty'␤  in method gist at gen/parrot/CORE.setting:12004␤  in method gist at gen/parrot/CORE.setting:1014␤  in sub say at gen/parrot/CORE.setting:12904␤  in block  at /tmp/Q13hx1O5Z4:1␤  in any  at /tmp/Q13hx1O5Z4:1␤  i…»

[04:56] <TimToady> r: package Asdf::qwerty {}; my $foo = 'Asdf::qwerty'; say ::($foo)

[04:56] <camelia> rakudo-parrot 60c8c1, rakudo-jvm 60c8c1: OUTPUT«(Asdf::qwerty)␤»

[05:01] *** preflex_ joined
[05:01] *** ChanServ sets mode: +v preflex_

[05:01] *** adu left
[05:02] *** preflex left
[05:02] *** preflex_ is now known as preflex

[05:04] *** adu joined
[05:12] *** FROGGS left
[05:15] *** FROGGS joined
[05:21] *** Rotwang joined
[05:22] *** Rotwang left
[05:24] *** ssutch left
[05:25] *** FROGGS left
[05:26] *** FROGGS joined
[05:26] *** ssutch joined
[05:47] *** btyler left
[05:50] *** fridim_ left
[05:56] *** BenGoldberg left
[05:58] *** SamuraiJack__ joined
[05:59] *** FROGGS left
[06:05] *** darutoko joined
[06:13] *** FROGGS joined
[06:33] *** dayangkun joined
[06:40] *** FROGGS left
[06:47] <TimToady> http://rosettacode.org/wiki/Metered_concurrency#Perl_6  <-- here's a pretty little thing

[06:50] *** FROGGS joined
[06:51] <TimToady> (though the site is very slow right now for some reason)

[06:52] <FROGGS> preflex: tell jnthn The cursor-mem-opts does not break any nqp/r-p/r-j tests but there is no performance boost visible except in moar

[06:52] <preflex>  Consider it noted.

[06:52] <FROGGS> morning

[06:53] *** kaleem joined
[06:57] *** rindolf joined
[07:02] <TimToady> jnthn: would be nice to be able to get a count of queued messages from a channel, then my Semaphor class could report its current usage

[07:04] <diakopter> well, it'd be an estimate

[07:04] <TimToady> sure, there's races

[07:04] <diakopter> an upper bound

[07:04] <diakopter> er.

[07:04] <diakopter> not a bound. :)

[07:05] <TimToady> but for my Semaphore class, $max - $.tickets.count would be the semaphor counter

[07:05] <diakopter> DO. LORD. OH DO. LORD. OH DO.

[07:07] <TimToady> hmm, my spelling isn't consistent...

[07:08] *** hummeleB1 joined
[07:10] *** brrt joined
[07:11] *** FROGGS left
[07:36] * lizmat wonders whether such a Semaphore class shouldn't be specced

[07:36] <lizmat> decommute&

[07:37] *** lizmat joined
[07:37] *** lizmat left
[07:39] *** rindolf left
[07:41] <TimToady> we don't want to encourage people to suboptimal primitives though...

[07:41] <jnthn> If we built a construct that sat in a loop continually acquiring the semaphore, we could call it semafor...

[07:42] <jnthn> uh, I mean...morning o/

[07:42] <TimToady> er, o/

[07:42] * jnthn takes the first few sips of coffee :)

[07:42] * diakopter dunks head under coffee

[07:43] <brrt> morning all

[07:44] <TimToady> well, it'll take another 15 minutes here before asteroids become likely again

[07:44] <brrt> whats so suboptimal about a semaphor :-) - early morning brain ca't find a good reason

[07:44] <TimToady> composibility?

[07:45] <jnthn> TimToady: spec what you want the method to be called

[07:45] <TimToady> *sab*

[07:45] <TimToady> leave me with the difficult bikesheds, do ya?

[07:46] <diakopter> only the underwater antigrav ones

[07:46] * TimToady is tempted to call it .backlog :

[07:46] <TimToady> :)(

[07:46] <jnthn> Well, I can say I'm not sure we should make channels numify to it :P

[07:46] <TimToady> geh, typer is broke

[07:46] <TimToady> no, it's not supposed to be used to write race conditions on purpose :)

[07:46] <TimToady> but it'd be nice to know if our channel is keeping up, at any rate

[07:47] <TimToady> and how close we are to a max buffer size, if we implement one

[07:48] *** FROGGS joined
[07:48] <jnthn> Yes, I also want to have a way to limit the buffer size.

[07:49] <jnthn> Right now it's unbouned, which gives no back-preasure...

[07:50] * TimToady hasn't really thought of anything better than .count or .elems...maybe .pending?

[07:51] <TimToady> if a channel tracked a max, then my Semaphore class wouldn't have to remeber it to return .roomleft, or whatever the .max - .pending is

[07:52] <TimToady> .elems would make sense to someone who thinks of a channel like an array that's getting pushed

[07:53] <jnthn> well, underneath a channel is just a lock-free queue...

[07:53] <TimToady> does the JVM keep track of the size of it for you?

[07:53] <jnthn> but just 'cus it *is* that doesn't mean we want people to think of it like that...

[07:53] <jnthn> TimToady: Believe so...lemme check...

[07:54] <jnthn> TimToady: yes, but with Big Warning:

[07:55] <TimToady> .oO(Don't use this to write race conditions!)

[07:56] <jnthn> "Beware that, unlike in most collections, this method is NOT a constant-time operation. Because of the asynchronous nature of these queues, determining the current number of elements requires an O(n) traversal. Additionally, if elements are added or removed during execution of this method, the returned result may be inaccurate. Thus, this method is typically not very useful in concurrent applications."

[07:56] <jnthn> sorry, some guy wandered in with a thermometer to see how warm the room was... :)

[07:56] <TimToady> oh, so it's actually going out and counting, hmm

[07:57] <jnthn> Yeah

[07:57] <jnthn> We can maintain it by keeping an atomic integer in the channel too...

[07:57] <TimToady> so if we want it, we do our out atomic ++/--, and call it .approx so we don't have to make it atomic along with the queue ops

[07:57] <jnthn> But then of course everything pays for it whether we ever want the count or not

[07:58] <TimToady> *our own

[07:58] <TimToady> right

[07:58] <jnthn> yes, the atmoic I mentioned is so ++ and -- themselves on it are not gonna lose count

[07:58] <TimToady> but we have to track it if we ever want to enforce a limit

[07:59] <jnthn> Well, the JVM provides other queue types that can be bounded

[07:59] <jnthn> BUT it needs to knwo the size up-front then.

[08:00] <jnthn> So we could implement our bounded one in those terms

[08:00] <TimToady> do Go's channels provide a count?

[08:01] <TimToady> yes, len(channel), apparently

[08:02] <jnthn> yes, and it seems they default to zero-length buffer

[08:02] <jnthn> (meaning that a send always blocks unless a receiver is already there waiting)

[08:03] <adu> o hi jnthn 

[08:03] <TimToady> oh, well, that wouldn't work for the way I use it :)

[08:03] <jnthn> well, you'd have to specify a size if you want async is all...

[08:03] <moritz> \o

[08:03] <preflex>  moritz: you have 1 new message. '/msg preflex messages' to read it.

[08:03] <jnthn> There's (perhaps wisely) no unbounded.

[08:03] <jnthn> I do wonder if unbounded is a good default

[08:03] <jnthn> bbi5

[08:03] <TimToady> but apparently they have "buffered channels" too

[08:05] <adu> TimToady: afaik, len() only works on buffered channels

[08:06] <TimToady> I think unbounded is a good default if they don't specify a bound :)

[08:07] <adu> TimToady: I'm a big fan of golang

[08:07] <TimToady> though one might want to discourage some threads in the scheduler if they're known to be feeding large channels...

[08:08] <TimToady> adu: it certainly fixes a few of the things that are notably wrong about C  :)

[08:09] <adu> like switch/case with default fallthrough and explicit break

[08:09] *** zakharyas joined
[08:10] <TimToady> well, was thinking more along the lines of distinguishing pointers from slices of arrays

[08:10] <adu> I much prefer the default break with explicit fallthrough

[08:10] <adu> oh, well, that too

[08:14] * jnthn back

[08:14] <jnthn> for a little bit at least :)

[08:14] <jnthn> o/ adu

[08:14] *** nnunley left
[08:14] <adu> jnthn: great job on jvm!

[08:15] <TimToady> adu: maybe you should write the Go backend :)

[08:15] <jnthn> adu: Well, it's not just me that's worked on it. :) But happy it's appreciated. :)

[08:15] <adu> TimToady: I wouldn't know where to start

[08:16] <adu> I know the internals of Go quite well (I tried to write a call/cc implementation using 6c, the intermediate compiler between 6g and the assembler), but I'm still quite a newbie at Perl6 internals

[08:16] *** fhelmberger joined
[08:17] <TimToady> I'm sure jnthn++ would have reams of advice on where to start; my advice comes more in the realm of where to finish.  :)

[08:18] <adu> :)

[08:19] <moritz> "start with nqp" :-)

[08:19] <adu> ok

[08:19] <moritz> it seems that most ports have started by implementing 6model in the host language

[08:19] *** dmol joined
[08:20] <moritz> then cross compilation from an existing NQP host language to the new target language

[08:21] *** fhelmberger left
[08:21] *** fhelmberger joined
[08:21] * TimToady --> zzz

[08:22] <jnthn> Yeah...

[08:22] <jnthn> Well, really for JVM I started with code-gen for the most basic QAST nodes

[08:23] <jnthn> But you need to start porting 6model pretty soon to handle anything non-trivial :)

[08:23] <adu> why soon?

[08:23] <jnthn> As in, pretty soon after you start porting anything

[08:23] <jnthn> 'cus you can't do anything with objects until you do so

[08:26] *** fhelmberger left
[08:27] <masak> mornin', #perl6

[08:28] <FROGGS> o/

[08:28] *** xinming left
[08:28] <jnthn> ok, teaching time...

[08:28] <jnthn> bbl

[08:28] *** xinming joined
[08:33] <dalek> rakudo/pr/229: 7ee27fe | Arcterus++ | / (36 files):

[08:33] <dalek> rakudo/pr/229: Merge branch 'nom' into sized-arrays

[08:33] <dalek> rakudo/pr/229: review: https://github.com/rakudo/rakudo/commit/7ee27fe222

[08:33] <dalek> rakudo/pr/229: 558080d | Arcterus++ | src/Perl6/Actions.nqp:

[08:33] <dalek> rakudo/pr/229: Fix our arrays

[08:33] <dalek> rakudo/pr/229: review: https://github.com/rakudo/rakudo/commit/558080d92a

[08:33] <dalek> rakudo/pr/229: 48ca3c6 | Arcterus++ | src/core/Array.pm:

[08:33] <dalek> rakudo/pr/229: Fixed typed array regression

[08:33] <dalek> rakudo/pr/229: review: https://github.com/rakudo/rakudo/commit/48ca3c6676

[08:33] <dalek> rakudo/pr/229: 53633ba | Arcterus++ | src/core/Array.pm:

[08:33] <dalek> rakudo/pr/229: Fix .reverse and .rotate regressions

[08:33] <dalek> rakudo/pr/229: review: https://github.com/rakudo/rakudo/commit/53633ba40c

[08:33] <dalek> rakudo/pr/229: 3baa649 | (Tobias Leich)++ | / (3 files):

[08:34] <dalek> rakudo/pr/229: Merge branch 'nom' of github.com:rakudo/rakudo into pr/229

[08:34] <dalek> rakudo/pr/229: review: https://github.com/rakudo/rakudo/commit/3baa6490e6

[08:42] *** salv0 left
[08:43] *** salv0 joined
[08:47] *** dmol left
[08:48] *** dmol joined
[08:53] *** [Sno] joined
[09:02] *** adu left
[09:22] <masak> TimToady++ # http://rosettacode.org/wiki/Metered_concurrency#Perl_6

[09:31] *** ssutch left
[09:38] *** Psyche^ left
[09:41] *** ssutch joined
[09:43] *** ssutch left
[09:49] *** daxim joined
[09:55] *** denisboyun joined
[10:00] *** aborazmeh joined
[10:15] *** lizmat joined
[10:19] *** arnsholt_ is now known as arnsholt

[10:31] *** dakkar joined
[10:40] *** tgt joined
[10:42] *** fridim_ joined
[10:46] *** lizmat left
[11:04] *** berekuk left
[11:14] *** dayangkun left
[11:32] *** brrt left
[11:36] *** rindolf joined
[11:38] *** cognominal__ left
[11:39] *** cognominal__ joined
[11:42] <masak> why do most languages return only one value, even though they accept 0 or more parameters? why does this feel completely natural?

[11:43] <timotimo> because most languages don't have parameter flattening

[11:43] <timotimo> is my first guess

[11:44] <hoelzro> I'm guessing it has to do with complexity in doing such a thing in C

[11:44] <hoelzro> and other languages following its example

[11:45] <masak> clearly we should have used Forth more as a role model, and C less ;)

[11:54] *** PacoAir joined
[11:56] *** denisboyun left
[11:58] <colomon> Forth++

[11:59] <hoelzro> oh man, I need to add rosetta code examples to my Perl 6 "TO READ" list

[12:20] <masak> p: enum Choice <Nay Aye>; say Nay ~~ Choice; say Nay ~~ Aye; say Choice ~~ Choice

[12:20] <camelia> rakudo-parrot 60c8c1: OUTPUT«True␤False␤True␤»

[12:20] <masak> \o/

[12:23] *** xenoterracide left
[12:36] *** xenoterracide joined
[12:41] *** xenoterracide left
[12:42] *** aborazmeh left
[12:47] *** dakkar left
[12:51] *** benabik joined
[12:51] *** dakkar joined
[12:55] *** colomon left
[12:56] *** denis_boyun joined
[12:56] *** SamuraiJack__ left
[12:56] *** benabik left
[13:07] *** berekuk joined
[13:16] *** fridim_ left
[13:29] *** dayangkun joined
[13:41] *** markov joined
[13:52] *** stevan_ joined
[13:54] *** raiph joined
[13:57] *** lowpro30 joined
[13:57] *** colomon joined
[13:59] *** kaare_ joined
[14:01] *** xinming left
[14:01] *** sqirrel joined
[14:02] *** xinming joined
[14:06] *** xinming left
[14:07] *** xinming joined
[14:08] *** kaare_ left
[14:10] *** lowpro30_ joined
[14:13] *** kaare_ joined
[14:14] *** lowpro30 left
[14:23] *** atroxaper joined
[14:23] *** Psyche^ joined
[14:26] *** denis_boyun__ joined
[14:27] *** ajr joined
[14:27] *** ajr is now known as Guest30386

[14:27] <atroxaper> Hello #perl6 !

[14:27] *** denis_boyun left
[14:27] <moritz> hello atroxaper, *

[14:28] <atroxaper> hello moritz

[14:28] *** Psyche^_ joined
[14:29] <nwc10> good UGT, #perl6

[14:30] <atroxaper> nwc10 o/

[14:31] *** denis_boyun joined
[14:32] *** denis_boyun__ left
[14:32] *** Psyche^ left
[14:33] *** Guest30386 is now known as ajr_

[14:33] *** Psyche^ joined
[14:34] *** dwoldrich left
[14:37] *** Psyche^_ left
[14:38] *** kaleem left
[14:38] *** Psyche^_ joined
[14:42] *** dmol left
[14:42] *** Psyche^ left
[14:44] *** raiph left
[14:46] *** Psyche^_ left
[14:47] *** colomon left
[14:48] <timotimo> o/

[14:52] *** jnap joined
[14:58] *** raiph joined
[15:01] *** nnunley joined
[15:02] *** stevan_ left
[15:08] *** mls joined
[15:10] *** sqirrel left
[15:13] *** jnap1 joined
[15:14] *** jnap left
[15:14] *** thou joined
[15:18] *** jnap1 left
[15:20] *** denis_boyun__ joined
[15:21] *** denis_boyun left
[15:25] *** Psyche^ joined
[15:28] *** jnap joined
[15:31] *** lowpro30_ left
[15:31] *** btyler joined
[15:33] *** raiph left
[15:34] *** lowpro30 joined
[15:36] *** denis_boyun__ left
[15:36] *** Psyche^ left
[15:39] *** Psyche^ joined
[15:42] <hoelzro> all(@x Xeqv @y) checks if every element of @x is equivalent the corresponding element of @y, right?

[15:43] <FROGGS> all @x to all @y

[15:43] <moritz> hoelzro: that would be Zeqv

[15:44] <hoelzro> ok, hang on

[15:44] * hoelzro is new to this metaoperator stuff

[15:44] <FROGGS> rp: say [1, 2, 3] Xeqv [1, 2, 7]

[15:44] <camelia> rakudo-parrot 60c8c1: OUTPUT«True False False False True False False False False␤»

[15:44] <FROGGS> rp: say [1, 2, 3] Zeqv [1, 2, 7]

[15:44] <hoelzro> Xeqv would check @x[0] against all of @y

[15:44] <camelia> rakudo-parrot 60c8c1: OUTPUT«True True False␤»

[15:44] <hoelzro> along with @x[1], @x[2], etc, right?

[15:44] <FROGGS> correct

[15:45] <FROGGS> see the putput

[15:45] <hoelzro> but Z would just check @x[i] eqv @x[i]

[15:45] <moritz> puput!

[15:45] <FROGGS> :o)

[15:45] <moritz> *putput

[15:45] <hoelzro> ok, I'm just trying to put it into words =)

[15:45] <FROGGS> hoelzro: right

[15:45] * moritz typo'd the typo quote

[15:45] <FROGGS> ha!

[15:45] * hoelzro picked "@x Xeqv @y" from S03

[15:45] <hoelzro> odd example

[15:45] <hoelzro> but that's a really cool feature

[15:45] <hoelzro> all(@x Zeqv @y)

[15:46] *** Psyche^_ joined
[15:46] <moritz> though note that it stops comparing at the shorter array

[15:47] <moritz> @x eqv @y  is basically @x == @y && all(@x Zeqv @y)

[15:47] <hoelzro> so if +@y < @x, it only compares the first +@y elements

[15:47] *** Psyche^ left
[15:47] <moritz> aye

[15:48] <hoelzro> good to know

[15:48] <FROGGS> like a zipper stops at the shorter side

[15:48] <FROGGS> (unless you rip it off)

[15:49] <timotimo> i have a zipper that won't start any more :(

[15:56] <FROGGS> eww :(

[15:56] *** kaare_ left
[15:57] *** raiph joined
[15:57] *** Psyche^_ left
[15:59] *** kaare_ joined
[15:59] *** Psyche^ joined
[16:16] *** jnap left
[16:16] *** jnap joined
[16:17] *** benabik joined
[16:25] *** jnap left
[16:26] *** jnap joined
[16:26] *** jnap left
[16:27] *** jnap joined
[16:27] *** ajr_ left
[16:28] *** jnap left
[16:28] *** ajr joined
[16:28] *** ajr is now known as Guest96794

[16:35] *** Guest96794 is now known as ajr_

[16:37] *** BenGoldberg joined
[16:39] *** FROGGS left
[16:39] *** FROGGS[mobile] joined
[16:41] *** zakharyas left
[16:46] *** kaleem joined
[16:47] *** jnap joined
[16:50] *** colomon joined
[16:52] <atroxaper> Is there right? https://github.com/perl6/Pod-To-HTML/blob/master/lib/Pod/To/HTML.pm#L17

[16:52] <atroxaper> I mean is it right that we need a good pod tool?

[16:53] <atroxaper> I just want to practice with Perl6. And want to do something useful.

[16:55] <moritz> yes, that's a good starting point

[16:56] <TimToady> Itch, meet Scratch.  Scratch, meet itch.

[16:57] <atroxaper> moritz: ok. I'm in! )

[16:57] <BenGoldberg> http://rosettacode.org/wiki/Reports:Tasks_not_implemented_in_Perl6

[16:58] <atroxaper> moritz: do you know where that pod2html module are used?

[17:00] <moritz> atroxaper: perl6/doc, and by perl6 --doc=html

[17:00] <atroxaper> moritz: ok. I'll see there. Thank you.

[17:03] <atroxaper> see you #perl6

[17:03] <BenGoldberg> Ignore that link I posted, it's actually http://rosettacode.org/wiki/Reports:Tasks_not_implemented_in_Perl_6

[17:04] *** atroxaper left
[17:07] *** xinming_ joined
[17:08] *** SamuraiJack__ joined
[17:10] *** xinming left
[17:16] *** benabik left
[17:19] *** [Sno] left
[17:19] *** benabik joined
[17:22] *** xenoterracide joined
[17:24] *** Rotwang joined
[17:24] *** Rotwang left
[17:24] *** Rotwang joined
[17:25] *** raiph left
[17:48] *** dmol joined
[17:50] *** kaleem left
[17:54] *** lizmat joined
[17:55] *** ajr_ left
[17:55] *** ssutch joined
[17:58] *** dakkar left
[18:00] * lizmat got to the AmsterdamX meeting in time

[18:02] *** benabik left
[18:04] *** colomon left
[18:05] *** Suhosin joined
[18:05] *** araujo_ joined
[18:06] *** lowpro30_ joined
[18:09] *** lowpro30 left
[18:09] *** lowpro30 joined
[18:10] *** slavik joined
[18:12] *** Entonian joined
[18:12] *** lowpro30_ left
[18:13] *** tgt left
[18:14] *** tgt joined
[18:14] *** Entonian left
[18:15] *** FROGGS joined
[18:18] *** colomon joined
[18:19] *** araujo_ left
[18:19] *** ajr_ joined
[18:19] *** araujo joined
[18:22] *** grep0r joined
[18:24] <TimToady> afk 6 hours or so, see ya in SoCal &

[18:24] <colomon> \o

[18:25] <masak> o/

[18:28] *** jnap left
[18:32] *** [Sno] joined
[18:33] *** SamuraiJack__ left
[18:36] *** benabik joined
[18:37] *** raiph joined
[18:47] *** Esylt joined
[18:48] *** spider-mario joined
[18:48] *** PZt joined
[18:51] *** BenGoldberg left
[18:53] *** kurahaupo joined
[18:55] *** jeffreykegler joined
[18:58] *** jnap joined
[19:00] *** Rotwang left
[19:03] *** jnap left
[19:03] *** sqirrel joined
[19:09] *** Rotwang joined
[19:11] *** BenGoldberg joined
[19:13] *** Rotwang left
[19:15] *** beastd joined
[19:16] *** grondilu joined
[19:16] <grondilu> r: say [+] rand x 5

[19:16] <camelia> rakudo-jvm 60c8c1: OUTPUT«Cannot convert string to number: trailing characters after number in '0.459950550734632540⏏.459950550734632540.459950550734632540.459950550734632540.45995055073463254' (indicated by ⏏)␤  in block  at /tmp/SoAYfjfkLa:1␤  in any eval at gen/jvm/stage2…»

[19:16] <camelia> ..rakudo-parrot 60c8c1: OUTPUT«Cannot convert string to number: trailing characters after number in '0.6182410727228390⏏.6182410727228390.6182410727228390.6182410727228390.618241072722839' (indicated by ⏏)␤  in method gist at gen/parrot/CORE.setting:12004␤  in method gist at g…»

[19:16] <grondilu> n: say [+] rand x 5

[19:16] <camelia> niecza v24-98-g473bd20: OUTPUT«0.4748114237910190.4748114237910190.4748114237910190.4748114237910190.474811423791019␤»

[19:16] *** jnap joined
[19:16] * grondilu is confused

[19:17] <timotimo> you need xx

[19:17] <grondilu> oh

[19:17] <timotimo> x is a string operator

[19:17] <BenGoldberg> rn: say [+] (rand xx 5)

[19:17] * grondilu facepalms himself

[19:17] <timotimo> r: say (rand x 5).perl

[19:17] <camelia> rakudo-jvm 60c8c1: OUTPUT«2.569878910978993␤»

[19:17] <camelia> ..niecza v24-98-g473bd20: OUTPUT«2.0931222229698312␤»

[19:17] <camelia> ..rakudo-parrot 60c8c1: OUTPUT«2.09440449332543␤»

[19:17] <camelia> rakudo-jvm 60c8c1: OUTPUT«"0.253500739322205850.253500739322205850.253500739322205850.253500739322205850.25350073932220585"␤»

[19:17] <camelia> ..rakudo-parrot 60c8c1: OUTPUT«"0.4545349572758540.4545349572758540.4545349572758540.4545349572758540.454534957275854"␤»

[19:17] <BenGoldberg> rn: say (rand xx 5).[+]

[19:17] * grondilu hasn't been writing perl6 code for a while, thus this silly mistake

[19:17] <camelia> niecza v24-98-g473bd20: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Prefix requires an argument at /tmp/BBDyNA5S49 line 1:␤------> [32msay (rand xx 5).[+[33m⏏[31m][0m␤␤Parse failed␤␤»

[19:17] <camelia> ..rakudo-jvm 60c8c1: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/ueRvz1azY3␤Preceding context expects a term, but found infix + instead␤at /tmp/ueRvz1azY3:1␤------> [32msay (rand xx 5).[+[33m⏏[31m][0m␤»

[19:17] <camelia> ..rakudo-parrot 60c8c1: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Zl02BC8a_H␤Preceding context expects a term, but found infix + instead␤at /tmp/Zl02BC8a_H:1␤------> [32msay (rand xx 5).[+[33m⏏[31m][0m␤»

[19:18] <BenGoldberg> rn: rand xx 5 >> [+] >> say

[19:18] <camelia> rakudo-jvm 60c8c1: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/MT8lifSOW0␤Unsupported use of >> to do right shift;  in Perl 6 please use +> or ~>␤at /tmp/MT8lifSOW0:1␤------> [32mrand xx 5 >>[33m⏏[31m [+] >> say[0m␤»

[19:18] <camelia> ..rakudo-parrot 60c8c1: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/sD7HpHQiRp␤Unsupported use of >> to do right shift;  in Perl 6 please use +> or ~>␤at /tmp/sD7HpHQiRp:1␤------> [32mrand xx 5 >>[33m⏏[31m [+] >> say[0m␤»

[19:18] <camelia> ..niecza v24-98-g473bd20: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unsupported use of >> to do right shift; in Perl 6 please use +> or ~> at /tmp/quxDHoTkgA line 1:␤------> [32mrand xx 5 >>[33m⏏[31m [+] >> say[0m␤␤Unsupported use of >> to do right shift; in Perl 6 please…»

[19:22] *** darutoko left
[19:23] <geekosaur> if you wanted a hyper, no spaces

[19:23] <geekosaur> >>op>>

[19:23] *** PZt left
[19:23] <colomon> but >>op>> say probably will not do what you want

[19:24] <colomon> nor will >>[op]>>, I think

[19:24] *** Rotwang joined
[19:25] <grondilu> So, MoarVM.  Any progress?

[19:26] *** btyler left
[19:27] <timotimo> today has been mostly debugging a tricky failure or gc bug or something

[19:28] <timotimo> a day ago, jnthn fixed a non-optimal memory usage pattern in the grammar engine that caused about 1/3rd of the time for stage parse in rakudo's setting to disappear

[19:28] <timotimo> FROGGS has measured the stage parse time for parrot and moarvm to be almost exactly the same with an optimized moarvm build on windows, but on linux it would crash due to the mystery bug

[19:29] <timotimo> but we do make it all the way through stage parse by now, which is really nice

[19:29] *** Rotwang left
[19:29] <timotimo> i don't know when you last checked in

[19:29] <grondilu> ok, thanks for the heads up

[19:29] <FROGGS> timotimo: stage parse using an optimized moar takes 176s on my linux, where parrot takes 120s

[19:29] * grondilu is glad to see that the team is still working hard and hasn't given up :-)

[19:29] <timotimo> oh, oops

[19:30] <timotimo> i'm not working hard :\

[19:30] <colomon> timotimo: I didn't see a noticeable improvement overnight in the parrot stage parse on my smoke test.

[19:30] <FROGGS> that is by compiling BOOSTRAP.nqp using an unoptimized moar (aka cheating)

[19:30] *** PZt joined
[19:30] <grondilu> talking about memory, today I compiled rakudo-star-2013.11 and I noticed it used much more RAM.  I had to activate swap (I have 1Go RAM).

[19:31] <FROGGS> hmmm, that is unexpected I'd say

[19:31] <slavik> \o/

[19:31] <FROGGS> the memory usage should drop

[19:31] <FROGGS> hi slavik 

[19:31] <slavik> hi all

[19:32] <slavik> yesterday was awesome ^_^

[19:32] <FROGGS> slavik: in what sense?

[19:32] <slavik> starcraft and booze :)

[19:32] *** Rotwang joined
[19:32] <FROGGS> :o)

[19:32] <slavik> I also got to meet Mike Morhaime

[19:33] <slavik> co-founder/ceo of blizzard

[19:33] <slavik> so, it was an awesome day :)

[19:33] <FROGGS> yeah

[19:33] <FROGGS> that is kinda awesome :o)

[19:33] <slavik> now, I am reading rakudo* updates, so today is going to be a very good, day, too.

[19:33] <slavik> well ... I have yet to meet TimToady :)

[19:34] <FROGGS> yes you have

[19:34] <timotimo> colomon: yeah, that improvement only helped on moar.

[19:34] <FROGGS> he's a genius (and he is a very nice person)

[19:35] <colomon> timotimo: ah

[19:35] <slavik> FROGGS, I mean in person. I have not made it out to any of the YAPC :(

[19:35] <colomon> timotimo: didn't realize moarakudo was that far along

[19:36] <FROGGS> slavik: yes, I mean in person too 

[19:36] <slavik> wait, "yes you have", was that an answer to my question?

[19:36] <slavik> or rather, statement

[19:37] <FROGGS> err, "you have to"

[19:37] <FROGGS> I mean, you need to meet him :o)

[19:38] <slavik> haha

[19:38] <slavik> agreed

[19:39] <Rotwang> hi

[19:39] <FROGGS> hi Rotwang 

[19:41] * PerlJam wakes up enough to remind everyone about the advent calendar

[19:42] * lizmat further decommutes

[19:43] *** lizmat left
[19:51] *** jeffreykegler left
[19:52] <arnsholt> The test failures on NQP/JVM, do they happen to everyone, or only a subset of people?

[19:53] <moritz> seems to be everyone

[19:53] <arnsholt> Oh, good (sort of)

[19:53] <arnsholt> In that case, any objections to marking them as TODO?

[19:58] <moritz> if you also open tickets, no problem (IMHO)

[19:59] <arnsholt> Good point

[20:02] *** rurban1 joined
[20:06] <arnsholt> jnthn: printfh on JVM returning String is just wrong, right?

[20:06] <lue> Anyone know why panda can't compile Shell::Command for me during bootstrap?

[20:07] <jnthn> arnsholt: Just about everything returns something in case it shows up in rvalue context...

[20:07] <preflex>  jnthn: you have 3 new messages. '/msg preflex messages' to read them.

[20:08] <arnsholt> jnthn: Yeah, but it looks like the tests expect an integer (number of bytes written)

[20:08] <FROGGS> nqp: my $fh := nqp::getstdout; say(nqp::printfh($fh, "olá"));

[20:08] <camelia> nqp-moarvm, nqp-parrot: OUTPUT«olá4␤»

[20:08] <camelia> ..nqp-jvm: OUTPUT«oláolá␤»

[20:08] <arnsholt> Yeah, what FROGGS said. Parrot returns bytes, whereas JVM returns the string printed

[20:09] <FROGGS> (actually bytes written)++

[20:09] <jnthn> arnsholt: Oh...

[20:09] <jnthn> The Parrot answer is probably usefuller :P

[20:09] <arnsholt> Yeah. Also, kills a failing test

[20:10] <FROGGS> ohh, nice catch

[20:10] <arnsholt> The JVM test failures mean I can't make test install

[20:10] <FROGGS> :/

[20:10] <arnsholt> And now I just had to do something about it =)

[20:11] <FROGGS> I think I owe you a beer then :o)

[20:11] <FROGGS> damn, I don't wanna hack on S11+panda :(

[20:12] <arnsholt> If it's any consolation, this is instead of NativeCall hackery =)

[20:15] *** xinming_ left
[20:15] <lue> the weird thing is, I was able to manually compile Command.pm, so it must be a problem with how panda's doing it.

[20:16] <moritz> lue: did you check the shell exit status?

[20:16] <lue> no, let me run rebootstrap again

[20:17] *** xinming joined
[20:20] <FROGGS> O.o

[20:20] <FROGGS> timotimo: that is you! http://www.youtube.com/watch?v=SMPMFfqAeS8

[20:21] <diakopter> on a plane!

[20:23] *** btyler joined
[20:23] <arnsholt> "2 TODO tests unexpectedly succeeded" =D

[20:24] <arnsholt> Looks like the return value was a problem elsewhere as well \o/

[20:25] <FROGGS> cool!

[20:25] <FROGGS> arnsholt++

[20:25] <jnthn> arnsholt++ # nice

[20:25] <lue> moritz: I get a $? of zero :/ (also, panda now refuses to compile File::Find somehow. I'll clear out the panda repo and ~/.perl6 and try again)

[20:26] <FROGGS> lue: can paste then what happens?

[20:26] <lue> FROGGS: sure, I will.

[20:27] *** jnap left
[20:27] *** jnap joined
[20:27] <moritz> lue: I surely hope ~/.perl6 isn't used anymore by contemporary panda

[20:28] <lue> moritz: that's where it installed to. I also happen to like ~/.perl6 :)

[20:28] <FROGGS> moritz: it is, but suffixed by the compiler version

[20:28] <dalek> nqp: 0713cbb | (Arne Skjærholt)++ | src/vm/jvm/ (5 files):

[20:28] <dalek> nqp: Make nqp::{write,print,say}fh on JVM return number of bytes written.

[20:28] <dalek> nqp: 

[20:28] <dalek> nqp: This brings NQP/JVM in line with the Parrot and Moar backends, and fixes three

[20:28] <dalek> nqp: failing tests in t/nqp/19-file-ops.t

[20:28] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0713cbbe11

[20:28] <FROGGS> rp: say %*CUSTOM_LIB<home>

[20:28] <camelia> rakudo-parrot 60c8c1: OUTPUT«/home/p6eval/.perl6/2013.11-15-g60c8c1a␤»

[20:28] <lue> [ and "HEAD is now at 41a73f3 Merge pull request #60 from FROGGS/master" is where I am, so it seems to be a pretty new panda :) ]

[20:28] <moritz> shouldn't install to <site> by default?

[20:28] <moritz> *it

[20:29] <FROGGS> it tries that, and falls back to home is site is not writeable

[20:29] <moritz> ah.

[20:30] *** beastd left
[20:31] <lue> And since my site is in /usr/local, I'd need to use sudo all the time to install modules.

[20:31] * moritz thinks he even implemented that, once upon a time

[20:32] *** colomon left
[20:34] <lue> And now Shell::Command went perfectly. I'm almost willing to blame rebootstrap specific shenanigans.

[20:34] <FROGGS> that might be a good bet

[20:35] <lue> (because before IIRC I would always run rebootstrap, because re- has the helpful "no need for rebootstrap, going to normal bootstrap" behavior, meaning more laziness on my part :D)

[20:36] *** eternaleye joined
[20:38] <lue> roar. Now JSON::Tiny is the failer: https://gist.github.com/lue/1522bddcd64e62669748

[20:39] <lue> moritz: is there some sort of --verbose command for (re)bootstrap that I can use to see what commands exactly are being used?

[20:39] *** kurahaupo is now known as kurahaupo_

[20:40] <FROGGS> hmmm, panda should print the command it has invoked in case it failed

[20:40] *** colomon joined
[20:41] <lue> FROGGS: nope, it just moves on. The only reason panda tries stuff again is because the next item on the list "requires" it, and thus it must be compiled. Which will fail as before.

[20:41] <FROGGS> no, that was a mumbled feature request

[20:42] <lue> ah :)

[20:44] <Rotwang> did anyone notice that make install -j<more than one> fails with 2013.11?

[20:44] <Rotwang> or is it just me

[20:46] <lue> and of course I can compile the offending JSON::Tiny file just fine. I looked, and it seems panda's running the exact same command I am. blergh :/

[20:46] <Rotwang> $ /usr/bin/perl5.16.3 -MExtUtils::Command -e cp  does_not_exist does/not/exist/as/well

[20:47] <Rotwang> $ echo $?

[20:47] <Rotwang> 0

[20:47] <Rotwang> so basically there are two problems, 1) makefile is bad, 2) ExtUtils::Command cp is proken

[20:47] <Rotwang> broken*

[20:48] *** xenoterracide left
[20:48] *** xenoterracide joined
[20:49] <Rotwang> I guess I should file a bug report then

[20:50] <lue> Rotwang: yes :) Then we'd know what specific error occurs upon use of -j

[20:51] *** raiph left
[20:51] <Rotwang> lue: so is it enough that I send email to a [email@hidden.address] ?

[20:52] <lue> Rotwang: yes.

[20:53] <Rotwang> I also get "Possible cross-site request forgery" while trying to access: http://rakudo.org/rt/open-all

[20:53] <Rotwang> just informing

[20:54] * lue doesn't know why, but he feels as though he's been unable to use panda for quite a long while now :(

[20:55] <lue> Rotwang: go to rt.perl.org instead.

[20:55] <Rotwang> lue: I know, just letting you guys know, so someone who maintains rakudo.org may fix it someday

[20:56] <lue> OK. I just wasn't sure if you knew or not.

[20:59] *** xinming left
[21:01] *** xinming joined
[21:03] *** FROGGS left
[21:04] *** FROGGS joined
[21:07] <lue> Trying again still fails JSON::Tiny :(

[21:09] <FROGGS> timotimo++ # http://www.youtube.com/watch?v=SMPMFfqAeS8

[21:09] <FROGGS> lue: so you can install it manually but not as a dep?

[21:10] <lue> FROGGS: no, whenever I say "I can compile it manually", I mean I run "perl6 --target=pir ..."

[21:10] <FROGGS> and that gives exit code 0 ?

[21:11] <lue> FROGGS: yep. Nothing I've run yet has given me anything else. (Although I have not tried a manual use of 'panda' yet, admittedly)

[21:12] * lue is running rebootstrap to see if the failure point changes

[21:13] <FROGGS> I'll install rakudo@parrot and try to install JSON::Tiny

[21:14] <lue> File::Find is what fails on rebootstrap :/

[21:14] <FROGGS> any good error message?

[21:15] <lue> FROGGS: nope. I'm going to regain a partial installation via bootstrap, and then try manually installing (via panda) JSON::Tiny

[21:15] <lue> (assuming JSON::Tiny is where it will fail this time, that is.)

[21:16] *** rindolf left
[21:21] *** colomon left
[21:21] <FROGGS> build stage failed for JSON::Tiny: Failed building lib/JSON/Tiny/Actions.pm

[21:21] <FROGGS> :o(

[21:23] <lue> FROGGS: I still say it's panda's fault though, on account of the moving failure point.

[21:26] <FROGGS> umm, using bootstrap.pl instead of reboostrap.pl did it for me

[21:27] <lue> o.o

[21:27] <FROGGS> Compiling lib/JSON/Tiny/Actions.pm to pir

[21:27] <FROGGS> Compiling lib/JSON/Tiny/Grammar.pm to pir

[21:27] <FROGGS> Compiling lib/JSON/Tiny.pm to pir

[21:27] <FROGGS> ==> Testing JSON::Tiny

[21:27] <masak> 'night, #perl6

[21:27] <FROGGS> gnight masak 

[21:28] <lue> *gurgle*

[21:30] <ajr_> Is there some reason that 2013.11 changed the name of perl6 to perl6-p? It broke my download-compile-and set-links script.

[21:31] *** stevan_ joined
[21:31] <jnthn> I think you should got a perl6 that points to it also?

[21:31] <ajr_> BTW if such a script would be useful to anyone else, I'd be happy to share it

[21:31] <lue> ajr_ it still installs as perl6 for me (in addition to perl6-p)

[21:32] <FROGGS> ajr_: if you configure for jvm and parrot, it will install the first mentioned as perl6

[21:32] <lue> buh buh buh buh buh... running bin/panda manually works! But.. but... gaaaah

[21:32] <FROGGS> (in addition to perl6-j and perl6-p)

[21:33] <lue> so now I guess I manually copy over bin/panda to the location...? (or the entirety of bin/ ?)

[21:33] <rjbs> Shouldn't perl6-p just return true if the input is perl 6?

[21:34] <FROGGS> rjbs: it should exit with zero if it executed it successfully

[21:34] <ajr_> my config line is perl Configure.pl --gen-parrot --gen-nqp

[21:34] <ajr_>   

[21:34] <lue> FROGGS: what does a newly-installed panda have in its bin directory? just panda or a bunch of other files too?

[21:34] <rjbs> FROGGS: (Lisp joke.)

[21:34] <FROGGS> ajr_: that should give you a perl6 binary... how do you invoke make?

[21:35] <FROGGS> rjbs: I am not a Lisper :o)

[21:35] <FROGGS> lue: others too

[21:35] <rjbs> FROGGS: functions ending in p are predicates

[21:35] <arnsholt> rjbs: Not sure I would've gotten that one without the Lisp joke hint, but now I'm smiling =)

[21:35] <ajr_> make on the next line, then make install after that

[21:36] <FROGGS> ajr_: that is al right

[21:36] <FROGGS> ajr_: maybe it is a problem when --backends is not passed...

[21:37] <ajr_> The same script works on 2013.10

[21:37] <lue> oh right, there's still installing Panda... :|

[21:37] <FROGGS> ajr_: I am trying it on my box...

[21:40] <FROGGS> ajr_: after configuring, does it print that it found both nqp-j and nqp-p?

[21:40] <FROGGS> ajr_: that happened on my box, and since it checks for nqp-j first, this is the implicit candidate for perl6

[21:41] <FROGGS> perl Configure.pl --gen-parrot --gen-nqp --prefix=../nqp/install

[21:41] <FROGGS> Found /home/froggs/dev/rakudo/../nqp/install/bin/nqp-j (backend jvm)

[21:41] <FROGGS> Found /home/froggs/dev/rakudo/../nqp/install/bin/nqp-p (backend parrot)

[21:41] <FROGGS> like that

[21:41] *** pecastro left
[21:43] *** pecastro joined
[21:45] *** btyler left
[21:46] <timotimo> FROGGS: did you like the talk? >_<

[21:46] <FROGGS> yes, I did :o)

[21:46] <ajr_> I don't have the output of the 2013.11 job at hand now. The script is at http://pastebin.com/180Znipd

[21:46] *** kaare_ left
[21:47] <lue> ==> Fetching panda

[21:47] <lue> Start of substr out of range. Is: 2, should be in 0..1

[21:47] *** sqirrel left
[21:48] <lue> I... I just don't know.

[21:48] <FROGGS> ajr_: you must have an nqp in path somewhere, otherwise you would get:

[21:48] <FROGGS> perl Configure.pl --gen-parrot --gen-nqp

[21:48] <FROGGS> No suitable nqp executables found! Please specify some --backends, or a --prefix that contains nqp-{p,j} executables

[21:48] <ajr_> What's the change between 2013.10 and 2013.11 that makes that necessary?

[21:49] <timotimo> FROGGS: i only finished the slides a minute before the talk started :|

[21:50] <FROGGS> timotimo: that is how it is meant to be :P

[21:50] <lue> Does anyone know why the "fetch" step failed? ... Oh, I can guess.

[21:50] <FROGGS> lue: that must be: panda/lib/Panda/Fetcher.pm:28:        my $d = $_.directory.substr($from.chars);

[21:50] <jnthn> timotimo: That means you're on the path to being a pro conf speaker! :)

[21:50] <dalek> nqp: 44d4c1d | (Arne Skjærholt)++ | t/nqp/19-file-ops.t:

[21:50] <dalek> nqp: Mark broken nqp::readlinefh tests as TODO.

[21:50] <dalek> nqp: 

[21:50] <dalek> nqp: Now t/nqp/19-file-ops.t passes cleanly through the test harness.

[21:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/44d4c1dcbd

[21:50] <FROGGS> ajr_: the multi backend refactoring

[21:51] <FROGGS> ajr_: just pass --backends=jvm,parrot or only one of the two

[21:52] <lue> FROGGS: I get the feeling what happened is that ./ is a failure, but ../panda/ isn't. I'll let you know in a minute if it helps.

[21:52] <FROGGS> arnsholt: I had thought the condition should go after the todo(), no?

[21:52] <timotimo> jnthn: i spent way more time making the framework for the presentation, though

[21:53] <FROGGS> lue: "./" sounds about right (being the thing that kills it)

[21:53] <arnsholt> FROGGS: Whoops! That's a pasto, indeed!

[21:54] <FROGGS> :o)

[21:54] <ajr_> Does that mean that http://rakudo.org/how-to-get-rakudo/ is no longer correct?

[21:55] * lue still would like to know how a fetch step takes so long with local directories

[21:55] <FROGGS> ajr_: ohh yes, that should mention the --backends option...

[21:55] <FROGGS> moritz: are you able to fix http://rakudo.org/how-to-get-rakudo/ about --bakends?

[21:57] <FROGGS> lue: it takes about six seconds on my box to parse the ecosystem's projects.json (which is 35kB)

[21:57] <lue> bah, still on the 'fetch' step. [ In case you can't tell, I'm getting a little annoyed with panda about now. I just want one stinking module... ]

[21:58] <FROGGS> :/

[21:58] <FROGGS> I'd wipe site/ at some point... and start afresh (in case you install to site)

[21:59] *** raiph joined
[21:59] <lue> .oO(One of these days, I'll go into panda, and finally stop it from being so dang awkward to use all the time...)

[22:00] <lue> FROGGS: I don't think starting this over again will help matters :)

[22:00] <dalek> nqp: 2a89f4e | (Arne Skjærholt)++ | t/jvm/02-pipes.t:

[22:00] <dalek> nqp: Relax an overly zealous string check a bit.

[22:00] <dalek> nqp: 

[22:00] <dalek> nqp: This fixes a spurious failure in t/jvm/02-pipes.t.

[22:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2a89f4ee28

[22:00] <dalek> nqp: 7f7d915 | (Arne Skjærholt)++ | t/nqp/19-file-ops.t:

[22:00] <dalek> nqp: Fix braino. FROGGS++ for spotting it.

[22:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7f7d9150cf

[22:00] <lue> >:(    ==> Fetching panda

[22:00] <lue> Start of substr out of range. Is: 9, should be in 0..8

[22:02] *** spider-mario left
[22:02] <lue> (this is getting utterly idiotic by now)

[22:02] *** benabik left
[22:03] <Rotwang> just created my first rakudobug evar \:D/

[22:04] <lue> \o/ Rotwang++ # and may there be many more you file :)

[22:04] * timotimo also watches his talk now

[22:04] <timotimo> i didn't do half bad i think

[22:04] <timotimo> except the text really isn't readable on the video recording

[22:04] <timotimo> maybe i should have recorded the screen as well and built a composite video and upload it to youtube

[22:04] <timotimo> or with youtube-doubler

[22:07] * lue will go and consider either fixing panda or building an alternative to it at some point in the future. *grumble grumble* &

[22:08] <FROGGS> ahh

[22:15] <FROGGS> rakudo$ perl6-p -MFile::Find -e 'my $dir = "tools"; say find(:$dir).list>>.directory>>.substr($dir.chars)'

[22:15] <FROGGS>                  /lib /distro /build /build /build /build /build /build /build /build /build /util /lib/NQP

[22:15] <FROGGS> rakudo$ perl6-p -MFile::Find -e 'my $dir = "./tools"; say find(:$dir).list>>.directory>>.substr($dir.chars)'

[22:15] <FROGGS> Start of substr out of range. Is: 7, should be in 0..5

[22:15] <FROGGS> lue: ^^ here is your bug

[22:16] <FROGGS> that is because listing a directory sort of normalizes their path

[22:16] <japhb> rjbs: re: http://irclog.perlgeek.de/perl6/2013-11-25#i_7913782 , I once explained Lisp predicates to a non-programmer friend of mine.  She began inviting me lunch by IM'ing 'foodp'.  My reaction pretty much amounted to \o/

[22:17] <rjbs> foodp is like classic hacker jargon, isn't it?

[22:17] <rjbs> we used to say that a lot

[22:17] <japhb> She somehow got it from first principles.

[22:17] <rjbs> proving that lisp is truly intuitive

[22:17] <japhb> Which clearly indicates her head was screwed on properly, methinks.

[22:17] <rjbs> Lisp:  You can even understand it when hungry.

[22:18] <jnthn> .oO( Lis? )

[22:18] <japhb> .oO( Logo: LISP for people who hate all the parens )

[22:18] <huf> itth not that hard to underthand 

[22:19] *** colomon joined
[22:23] <FROGGS> lue: patch: https://github.com/tadzik/panda/pull/62

[22:23] <FROGGS> tadzik: ^^

[22:25] *** rurban1 left
[22:30] <timotimo> # We need to cleanup the path, because the returned elems are too.   -  are too what?

[22:30] <timotimo> ah. are cleaned up, too

[22:30] <FROGGS> err, yes :/

[22:34] *** jnap left
[22:34] <bbkr_> has anyone used Storm - http://storm-project.net/ before? Perl 6 is mature enough to enter world of distributed computation and I'm thinking about porting IO::Storm bindings.

[22:36] *** jnap joined
[22:39] <japhb>  WRITE ALL THE BINDINGS   o/

[22:41] * japhb is working this one layer down -- writing the wire-protocol code (in my case, for protocol buffers)

[22:41] <lue> Start of substr out of range. Is: 6, should be in 0..5

[22:41] <lue> FROGGS: I assume I need your patch to make this work at all, correct?

[22:41] <lue> (that happened one dir above panda btw)

[22:42] <timotimo> ah, storm is doing protobuf? that sounds good

[22:44] <dalek> rakudo/moar-support: eb14f79 | jonathan++ | src/ (2 files):

[22:44] <dalek> rakudo/moar-support: Stub p6trialbind on Moar (always returns "unsure")

[22:44] <dalek> rakudo/moar-support: review: https://github.com/rakudo/rakudo/commit/eb14f79bc7

[22:46] *** rurban1 joined
[22:46] <Tene> japhb: What are you using protobuf for?

[22:46] <japhb> timotimo, Incorrect interpretation.  I meant that I am addressing the general "bind all the things" problem by writing wire-protocol code, while others are writing service-level code.

[22:46] <timotimo> ah

[22:46] <japhb> Tene, nothing quite yet, since I can write them a lot better than I can read them at the moment.  ;-)

[22:46] <Tene> Heh heh heh.

[22:47] * lue gives up on panda for the time being and just downloads/installs the stupid module he wanted himself.

[22:47] <Tene> capnproto looks like an appealing protobuf successor, although I've never use it yet.

[22:47] <japhb> Eventually, we should be able to integrate with anything that speaks protobuf (which is basically everything Google, and a lot of other projects that adopted it besides)

[22:49] *** rurban2 joined
[22:50] *** rurban1 left
[22:50] *** kurahaupo_ left
[22:50] <japhb> I've seen a number of protobuf "replacements".  My general view (not specific to Cap'n Proto, since this is new to me), is: 1) as much hype as substance, and 2) Generally are optimized for a subtly different problem space than protobufs.  Now mind you, this one claims to be written by the author of protobuf 2, so it ought to be interesting to read his docs.

[22:51] <japhb> FROGGS: You shouldn't need to say .IO.path (unless that's a Niecza compatibility thing)

[22:53] * lue wishes we wouldn't call them protobufs. Sounds too much like a Perl 6 thing. :)

[22:53] <japhb> You suggest instead?

[22:53] *** stevan_ left
[22:54] <rurban2> the google protobuf library?

[22:54] <japhb> rurban2: Precise, but wordy.

[22:55] <japhb> (And actually a little inaccurate, since I was speaking about the protocol itself, not the library that implements it at runtime.)

[22:56] <lue> probuf, prtbfr, protbfs, etc. Just not protobuf, because until *just now* I always thought it was some obscure low-level Perl6 type :)

[22:57] <rurban2> the protobuf serialization format

[22:57] <lue> PBSF :)

[22:58] <lue> (although it could conceivably be misconstrued as referring to rakudo's code serialization...)

[22:59] <japhb> rurban2: Definitely more accurate.  Still wordy, and lue's PBSF is too short, methinks.

[23:00] <japhb> I don't like referring to them as "Google protobufs" because that implies that they can *only* be used with Google services (a common misperception I didn't want to continue).  On the other hand, they *were* invinted here.

[23:00] <japhb> *invented

[23:00] <timotimo> spacex is apparently about to re-start the 13 minutes count-down for their geosync satellite launch if i understand correctly

[23:00] <lue> protlbufs perhaps

[23:01] *** fridim__ joined
[23:01] <japhb> heh

[23:01] <lue> or protobuf -> p6f . Oh wait, nevermind, that'll be confusing when the FORTRAN backend comes for Rakudo...

[23:02] <japhb> .oO( ".proto bufs" )

[23:03] <japhb> PBs?

[23:03] <japhb> Kinda jargony

[23:04] <timotimo> peanutbuffer and jelly?

[23:04] <lue> Come to think of it, I like how protlbufs sounds in my head...

[23:04] <japhb> .oO( It just always comes down to language, doesn't it?

[23:05] <japhb> "peanutbuffer"  :-D

[23:05] <rurban2> google is the creator, and it's hosted on code.google.com

[23:05] <japhb> Very nice, timotimo

[23:05] <japhb> rurban2: Where else would you expect them to host it?

[23:05] <timotimo> codeplex

[23:06] <japhb> :-P

[23:06] <japhb> (and LOL)

[23:07] <rurban2> well, someone else could have taken over (happened before) and then it would be hosted elsewhere. but it's still at google

[23:07] *** pecastro_ joined
[23:08] *** pecastro left
[23:09] <lue> .oO("protocolbuffer" would shorten to p14r ...)

[23:09] <japhb> Sure.  It's the public fork of an active internal project, as opposed to being tossed over the wall and "abandoned to the community".  Hence, hosted at the mothership.  Still, I get your point rurban2.  Any idea of a better way to indicate that while Google shepherds it, in actual use it's not Google-specific?

[23:10] <geekosaur> which someone will manage to typo as p1r

[23:11] *** Rotwang left
[23:11] <lue> geekosaur: i18n and l10n seem to manage :)

[23:11] <japhb> (Just in case someone is wondering, I have *no* inside knowledge of the future roadmap for Protocol Buffers; I'm specifically doing my implementation based entirely on the external docs.)

[23:12] <rurban2> they just put out libprotobuf8 this year

[23:14] <rurban2> but the format itself seems to be stable since a few years

[23:15] <lue> Net::IRC's eight-ball isn't very nice...

[23:19] *** colomon left
[23:28] *** rurban2 left
[23:29] *** grondilu left
[23:35] <ajr_> rakudo* 2013.11 is still generating perl6-p instead of perl6, even with perl Configure.pl --gen-parrot --gen-nqp --backends=parrot

[23:36] *** colomon joined
[23:36] <timotimo> doesn't it have to be --backend=parrot?

[23:36] *** prevost joined
[23:37] <ajr_> see FROGGS at 16:56:58

[23:37] <timotimo> 16:56 < FROGGS> eww :(

[23:39] *** Vlavv` left
[23:40] *** btyler joined
[23:40] *** baest joined
[23:41] *** Suhosin left
[23:41] <ajr_> SpaceX have had to halt the countdown at T-00:03:40, if anybody's following that.

[23:41] *** hummeleB1 left
[23:42] *** Suhosin joined
[23:43] *** kurahaupo_ joined
[23:44] *** lizmat joined
[23:45] * lizmat has finally decommuted, but is very tired

[23:45] <timotimo> yeah, they've stopped it for today and will continue on thursday

[23:46] <colomon> any word on what happened?

[23:47] <timotimo> flight computer didn't boot i think

[23:47] <timotimo> how do i bind an op for moarvm again? :|

[23:49] <timotimo> i know there's some tool to do it, but i forget how ...

[23:50] *** Celelaptop joined
[23:51] * timotimo has to build a perl6 first

[23:51] *** d4l3k_ joined
[23:51] * timotimo has a backup in the benchmark components

[23:51] *** Vlavv` joined
[23:52] *** dalek left
[23:52] *** masak joined
[23:52] *** d4l3k_ is now known as dalek

[23:53] * timotimo is not sure where to put the mapping from "MVM_OP_replace" to "MVM_str_replace"

[23:53] <timotimo> actually MVM_string_replace

[23:54] *** Celelaptop left
[23:54] *** pecastro_ left
[23:55] <timotimo> huh, there was a commented out op for it already

[23:55] *** Celelaptop joined
[23:56] *** woolfy joined
[23:56] *** pecastro joined
[23:58] * timotimo has a little stubby but probably working implementation

[23:59] *** rurban1 joined
[23:59] *** stevan_ joined
[23:59] * lizmat goes to get some sleep

[23:59] <timotimo> sleepwalking?

