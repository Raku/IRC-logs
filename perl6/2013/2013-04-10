[00:17] <labster> r: my $class = "IO";  class Bar  { also is $class }

[00:17] <p6eval> rakudo 00ca10: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§No valid trait found after also‚ê§at /tmp/UwAfMxNb2k:1‚ê§------> [32mmy $class = "IO";  class Bar  { also is [33m‚èè[31m$class }[0m‚ê§    expecting any of:‚ê§        statement list‚ê§        prefix or term‚ê§        prefix or meta-prefix‚ê§¬ª‚Ä¶

[00:18] <labster> how is $class not a term?

[00:21] <lue> r: class Bar { also is IO }

[00:21] <p6eval> rakudo 00ca10:  ( no output )

[00:28] <labster> of course that works. it's just a LTA error message.

[00:42] *** berekuk left
[00:44] *** berekuk joined
[00:49] *** thundergnat joined
[00:52] *** tgt left
[00:53] *** thundergnat left
[00:53] *** gcole left
[01:01] *** hoelzro joined
[01:02] *** felher left
[01:04] *** felher joined
[01:12] *** anuby joined
[01:14] *** FROGGS_ joined
[01:16] *** moritz joined
[01:17] *** FROGGS left
[01:23] *** Yappo______ left
[01:24] *** berekuk left
[01:24] <lee_> these metaops seem to get passed a Parcel, with the Range as the private storage attribute. which makes it rather hard to optimize

[01:24] <lee_> so you can't access .min or .max directly on the Range

[01:25] *** Yappo______ joined
[01:26] *** arlinius joined
[01:26] *** Patterner left
[01:28] *** Psyche^ joined
[01:28] *** Psyche^ is now known as Patterner

[02:02] *** lustlife joined
[02:15] <gtodd> r: my $class = "IO";  class Bar  { also is $class }

[02:15] <p6eval> rakudo 00ca10: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§No valid trait found after also‚ê§at /tmp/MYxf4vlZq6:1‚ê§------> [32mmy $class = "IO";  class Bar  { also is [33m‚èè[31m$class }[0m‚ê§    expecting any of:‚ê§        statement list‚ê§        prefix or term‚ê§        prefix or meta-prefix‚ê§¬ª‚Ä¶

[02:15] <gtodd> hmm

[02:20] *** Targen joined
[02:39] *** japhb_ joined
[02:39] *** japhb_ left
[02:40] *** japhb_ joined
[02:42] <japhb_> Is there a better way to make an object attribute required than this construction?

[02:42] <japhb_> r: lass Foo { has $.foo = die "Must supply a value for attribute foo to create a " ~ self.^name; }; my Foo $f .= new;

[02:42] <p6eval> rakudo 00ca10: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§You cannot declare attribute '$.foo' here; maybe you'd like a class or a role?‚ê§at /tmp/9ZXB7P7f6u:1‚ê§------> [32mlass Foo { has $.foo [33m‚èè[31m= die "Must supply a value for attribute[0m‚ê§    expecting any of:‚ê§        scoped declara‚Ä¶

[02:43] <japhb_> r: class Foo { has $.foo = die "Must supply a value for attribute foo to create a " ~ self.^name; }; my Foo $f .= new;

[02:43] <p6eval> rakudo 00ca10: OUTPUT¬´use of uninitialized value of type Mu in string context‚ê§use of uninitialized value of type Mu in string context‚ê§use of uninitialized value of type Mu in string context‚ê§use of uninitialized value of type Mu in string context‚ê§===SORRY!===‚ê§Must supply a value for attr‚Ä¶

[02:44] <japhb_> That's odd ... I don't get the uninitialized value warnings at the command line.

[02:45] <japhb_> Anyway, the point was, is there a better / cleaner way to force the caller to set certain object attributes?  I've got a couple classes with a half dozen or more required attributes, and the above construction gets boilerplate-ugly.

[02:48] *** orafu left
[02:48] *** orafu joined
[02:49] *** drbean joined
[02:50] *** Gruu_ joined
[02:51] *** preflex_ joined
[02:52] *** preflex left
[02:52] *** preflex_ is now known as preflex

[03:01] *** rindolf joined
[03:33] *** araujo left
[03:35] *** Gruu_ left
[03:39] *** araujo joined
[04:12] *** anuby left
[04:14] *** anuby joined
[04:27] *** fgomez left
[04:31] *** fhelmberger joined
[04:32] *** fhelmberger left
[04:39] *** fgomez joined
[04:45] *** sizz joined
[04:50] <japhb> .oO( Either I have gone crazy, or the IO::Socket{,::INET} implementation has. )

[04:52] <japhb> Is it just me, or is the handling of encoding, line separators, packet boundaries, and detecting end of data in IO::Socket and IO::Socket::INET very ... confused?

[04:53] * japhb decides to let his subconcious brane stew on it for a while

[04:53] <japhb> &

[04:59] *** skids left
[05:14] *** denisboyun_ joined
[05:21] *** kingbeast joined
[05:24] *** kaleem joined
[05:25] *** grondilu joined
[05:28] *** drbean left
[05:30] *** drbean joined
[05:43] <moritz> jnthn: some of the recent commits broke error reporting

[05:44] *** dmol joined
[05:44] <moritz> not ok 2 - Runtime error contains line number

[05:44] <moritz> #      got err: "use of uninitialized value of type Mu in string context\nuse of uninitialized value of type Mu in string context\nuse of uninitialized value of type Mu in string context\nuse of uninitialized value of type Mu in string cont

[05:44] <moritz> ext\n===SORRY!===\n6\n"

[05:44] <moritz> that's from t/spec/integration/error-reporting.t

[05:47] *** fhelmberger joined
[05:49] *** nwc10_ is now known as nwc10

[05:52] <moritz> a simple perl6 -e 'die 6' reproduces it

[05:52] <moritz> fwiw this is on Singapore-62-g8051900

[05:53] <moritz> oh, and lots changed since then. Maybe I should update before complaining :-)

[05:54] <timotimo> japhb: maybe you can put a type restriction with :D or what it's called in the submethod BUILD

[05:54] <timotimo> r: sub boing(Any:D $foo) { say "yay" }; boing(1); Boing(Any)

[05:54] <p6eval> rakudo 00ca10: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared name:‚ê§    Boing used at line 1‚ê§‚ê§¬ª

[05:54] <timotimo> r: sub boing(Any:D $foo) { say "yay" }; boing(1); boing(Any)

[05:54] <p6eval> rakudo 00ca10: OUTPUT¬´yay‚ê§use of uninitialized value of type Mu in string context‚ê§use of uninitialized value of type Mu in string context‚ê§use of uninitialized value of type Mu in string context‚ê§use of uninitialized value of type Mu in string context‚ê§===SORRY!===‚ê§Parameter '$foo' require‚Ä¶

[05:55] <timotimo> i wonder where that comes from. probably from the guts of rakudo?

[05:55] <diakopter> the YAPC::NA schedule is up

[05:59] <masak> good morning, #perl6

[06:00] <moritz> good am, ma<tab>

[06:00] <moritz> timotimo: yes, that's what I meant with broken error reporting

[06:00] <masak> good mo<tab>, mo<tab>

[06:01] <masak> diakopter: \o/

[06:01] *** denisboyun_ left
[06:01] <diakopter> masak: I need abstracts for your 3 Zero to Perl 6 talks.

[06:01] <diakopter> masak: also, you have 4x as many talks as everyone else.

[06:01] <timotimo> moritz: do you think a bisect would help?

[06:02] <moritz> timotimo: maybe

[06:04] *** frdmn joined
[06:04] <masak> diakopter: schedule looks good. I'll send the abstracts during the day.

[06:05] <masak> or more likely, just add them, I guess.

[06:12] <diakopter> \o/

[06:13] <tadzik> good morning #perl6

[06:13] <diakopter> masak++ for ^4

[06:13] <yoleaux> 9 Apr 2013 22:52Z <japhb> tadzik: Please take a gander at the panda enhancement idea starting at http://irclog.perlgeek.de/perl6/2013-04-09#i_6684351 and let me know what you think

[06:14] * diakopter read that as  take a gender

[06:21] *** dmol left
[06:23] <masak> &

[06:25] *** census joined
[06:26] <tadzik> japhb: well, you can always write yourself a panda with subclassed Panda::Ecocystem, which will fetch multiple projects.json and merge them afterwards

[06:29] *** drbean left
[06:30] *** drbean joined
[06:34] *** FROGGS_ left
[06:36] *** anuby left
[06:36] *** anuby joined
[06:38] *** anuby left
[06:38] *** anuby joined
[06:40] <timotimo> my bisect says 5cb7046ff is the first bad commit

[06:41] <timotimo> "add ForeignCode, to wrap foreign code objects".

[06:41] *** fgomez left
[06:42] <labster> good $local-time, #perl6

[06:42] *** SamuraiJack joined
[06:42] <timotimo> but i couldn't get nqp to downgrade just with configure.pl

[06:46] *** FROGGS_ joined
[06:48] *** SamuraiJack left
[06:52] <moritz> perl Configure.pl --gen-nqp=$(cat tools/build/NQP_REVISION) should force it rebuild the right revision

[06:54] <timotimo> ah

[06:54] <timotimo> and nqp/tools/build/PARROT_REVISION?

[07:00] *** rindolf left
[07:00] *** domidumont joined
[07:00] *** rindolf joined
[07:03] *** _daniel-s__ joined
[07:05] *** rindolf left
[07:05] <timotimo> jnthn: i hope that hint helps? "my bisect says 5cb7046ff is the first bad commit"

[07:05] *** rindolf joined
[07:06] <FROGGS_> timotimo: what's wrong?

[07:07] *** kst` joined
[07:09] *** rindolf left
[07:09] *** rindolf joined
[07:09] <timotimo> r: die 6;

[07:09] <p6eval> rakudo 00ca10: OUTPUT¬´use of uninitialized value of type Mu in string context‚ê§use of uninitialized value of type Mu in string context‚ê§use of uninitialized value of type Mu in string context‚ê§use of uninitialized value of type Mu in string context‚ê§===SORRY!===‚ê§6‚ê§¬ª

[07:09] <timotimo> this is wrong

[07:10] <labster> yes, that seems fairly wrong.

[07:11] *** fgomez joined
[07:14] <FROGGS_> hmmm

[07:15] *** brrt joined
[07:15] <moritz> it's not too surprising, because the backtrace stuff marshalls foreign objects quite a bit

[07:16] <FROGGS_> maybe we just need to hide some methods from backtrace? like src/core/ForeignCode.pm method gist/Str ?

[07:17] *** domidumont left
[07:20] *** domidumont joined
[07:22] <moritz> travel&

[07:23] <labster> FROGGS_: After reading about Moe and the history of perl 6, I've been more in a mood to break some perl 5 compatibility.  Would we lose that much by moving case_tolerant out of File::Spec and into its own module?

[07:24] <FROGGS_> labster: does it help if it would be in a separate module?

[07:24] <labster> Reasons include: it's working but it's not awesome and nothing in core really needs it.

[07:25] *** kst`` joined
[07:26] <FROGGS_> hmmm, okay

[07:26] <labster> I don't really care either way, but it just seems like an extra bit of commonly used code which is rarely used.

[07:27] <FROGGS_> what module would be the best to put it in? File::System? (maybe a bad name), which lets you peek and poke your volumes/devices?

[07:29] <labster> Actually I kind of like the name, I was thinking of File::Spec::Case or something lame like that.  Though If we had File::System, we'd probably want other stuff to go in there too.

[07:30] *** domidumont left
[07:30] *** kst` left
[07:30] *** domidumont joined
[07:32] <labster> cpan says: File::System - A virtual file system written in pure Perl.  It looks sort of like Path::Class.

[07:35] <diakopter> .u lightning

[07:35] <yoleaux> U+2607 LIGHTNING [So] (‚òá)

[07:35] <diakopter> .u bolt

[07:35] <yoleaux> U+2EAA CJK RADICAL BOLT OF CLOTH [So] (‚∫™)

[07:35] <yoleaux> U+2F66 KANGXI RADICAL BOLT OF CLOTH [So] (‚Ω¶)

[07:35] <yoleaux> U+1F529 NUT AND BOLT [So] (üî©)

[07:35] <diakopter> .u voltage

[07:35] <yoleaux> U+26A1 HIGH VOLTAGE SIGN [So] (‚ö°)

[07:35] <diakopter> .u volt

[07:36] <yoleaux> U+26A1 HIGH VOLTAGE SIGN [So] (‚ö°)

[07:36] <diakopter> .u zig

[07:36] <yoleaux> U+035B COMBINING ZIGZAG ABOVE [Mn] (‚óåÕõ)

[07:36] <yoleaux> U+1DCF COMBINING ZIGZAG BELOW [Mn] (‚óå·∑è)

[07:36] <yoleaux> U+21AF DOWNWARDS ZIGZAG ARROW [So] (‚ÜØ)

[07:39] <FROGGS_> labster: dunno what else it could be named then... but I guess we dont need this functionality right now?

[07:41] *** kresike joined
[07:41] <kresike> hello all you happy perl6 people

[07:41] <labster> hi kresike 

[07:43] *** snearch joined
[07:45] <diakopter> .u A138

[07:45] <yoleaux> U+A138 YI SYLLABLE DDI [Lo] (ÍÑ∏)

[07:45] *** toddr__ joined
[07:45] <diakopter> .u A138

[07:45] <yoleaux> U+A138 YI SYLLABLE DDI [Lo] (ÍÑ∏)

[07:48] <timotimo> ingy: are you planning on finishing YAML and TestML some time soon?

[07:48] <timotimo> i only now realize that there's no actual yaml loading code in there yet

[07:48] <kresike> labster, o/

[07:48] <labster> \o

[07:49] <hoelzro> ahoy #perl6

[07:50] *** kurahaupo left
[07:52] <diakopter> .u bulb

[07:52] <yoleaux> U+1F4A1 ELECTRIC LIGHT BULB [So] (üí°)

[07:52] <labster> FROGGS_: I can't think of any places we need to find case-tolerant in Rakudo.  Actually, it's hard to think of any applications where it's important to know -- usually you'd just test .e or match m:i//.  Let me look around and see if I can find it used in perl 5 somewhere.

[07:54] *** toddr__ left
[08:03] *** kaleem left
[08:05] *** berekuk joined
[08:08] <labster> Okay, I looked through every result for case_tolerant in google, and the only result on all 13 pages that looks like a use case (i.e. isn't documentation or a commit by me or an RT bug) is here: http://www.perlmonks.org/?node_id=796321

[08:08] *** xinming_ joined
[08:11] *** FROGGS_ left
[08:11] *** census left
[08:13] *** Guest82856 joined
[08:15] *** sizz left
[08:16] *** FROGGS joined
[08:18] <FROGGS> labster: I think we can just strip it out for now

[08:19] <labster> FROGGS, I have mostly working code.  I'll brew a module.

[08:19] *** kaleem joined
[08:20] <FROGGS> k

[08:27] *** woolfy joined
[08:31] *** Guest82856 left
[08:32] <jnthn> Hm, I'm guessing all the tests that show up the error reporting issue are marked # icu, given I had a clean spectest run here.

[08:35] *** dakkar joined
[08:36] <timotimo> jnthn: do you imagine building on your work someone would go ahead and do a rakudo.Net?

[08:37] <timotimo> is that a sensible proposition?

[08:39] * lizmat thinks that was the idea all along, to support multiple VM's, no?

[08:40] <lizmat> and good morning #perl6!

[08:41] <timotimo> sure, but someone would have to come along and actually do it

[08:41] <hoelzro> lizmat: o/

[08:41] <lizmat> hoelzro: /o

[08:42] *** berekuk left
[08:47] <FROGGS> I know that Go is not a VM but I'd love to see a nqp@Go

[08:50] <hoelzro> I thought someone was working on that?

[08:50] <jnthn> timotimo: The CLR is not all that different from the JVM, so following the same path I took with the JVM stuff would probably produce similar results - with whoever does it having the added benefit that they don't have to do a bunch of the one-off work to make NQP sufficiently portable.

[08:51] <timotimo> that's very good to hear

[08:52] * jnthn is looking into the error reporting regression

[08:52] <jnthn> I've got it down to a couple of places in the code that probably need updates.

[08:54] <moritz> lemme guess, src/core/{Exception,Backtrace}.pm

[08:54] <jnthn> Right

[08:55] <moritz> travel for real&

[08:56] *** daxim joined
[08:58] *** berekuk joined
[08:59] <lizmat> lotrrotk

[09:10] <masak> lizmat: I think you have to be more specific than that. :)

[09:11] <lizmat> just a case of ww

[09:11] * masak .oO( Lord Of The Rings Return Of The King, that took me far too long )

[09:11] <masak> it must be early still.

[09:11] * jnthn was wondering what lizmat knew about the epicness of moritz's travel :P

[09:11] <masak> but I got gardenpathed by the fact that it also looks a bit like "rotfl"

[09:12] <jnthn> Got a fix for the bustage I caused; spectesting. 

[09:13] *** tgt joined
[09:17] <timotimo> the next thing i'll try out for my brownian tree thing is how making a resizing sparse array will change the performance

[09:17] <timotimo> that shall be interesting.

[09:20] <lizmat> we live in interesting times ;-)

[09:20] <dalek> rakudo/nom: b64279b | jnthn++ | src/core/ (3 files):

[09:20] <dalek> rakudo/nom: Fix error reporting breakage.

[09:20] <dalek> rakudo/nom: 

[09:20] <dalek> rakudo/nom: Wasn't shown up by the non-"# icu" spectests, so went unnoticed in the

[09:20] <dalek> rakudo/nom: commit that introduced it.

[09:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b64279b011

[09:21] *** SamuraiJack joined
[09:23] <lizmat> nr: say cat <a b c>

[09:23] <p6eval> rakudo 00ca10: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared routine:‚ê§    cat used at line 1‚ê§‚ê§¬ª

[09:23] <p6eval> ..niecza v24-37-gf9c8fc2: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Undeclared routine:‚ê§     'cat' used at line 1‚ê§‚ê§Unhandled exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 1443 (die @ 5) ‚ê§  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 37) ‚ê§  at /home‚Ä¶

[09:23] <lizmat> I assume 'cat' is NYI ?

[09:23] <masak> correct.

[09:23] <masak> and I'll believe in lazy strings when I see them. :)

[09:23] <jnthn> Yeah. And probably a candidate for a "stuff we won't do until after 6.0.0"

[09:24] <lizmat> ack

[09:29] *** berekuk left
[09:30] *** cognominal left
[09:31] *** berekuk joined
[09:33] *** berekuk left
[09:35] *** cognominal joined
[09:48] *** cognominal left
[09:53] *** snearch left
[09:57] *** BigBear joined
[10:00] <nwc10> jnthn: that recent change breaks stuff quite badly with SEGVs in the spectest on "my" machine: http://pasta.test-smoke.org/478

[10:00] <nwc10> valgrind not happy

[10:00] <nwc10> ==8928== Conditional jump or move depends on uninitialised value(s)

[10:00] <nwc10> ==8928==    at 0x4FA099E: pop_parser_state (imcc.l:1268)

[10:01] <nwc10> OK, it's broken. Not certain if it's that change.

[10:02] <jnthn> nwc10: Odd, spectest was clean again here.

[10:03] <jnthn> And IMCC is a long, long way from what I just changed.

[10:03] <jnthn> oh, hang on...

[10:03] <jnthn> shit

[10:03] <jnthn> I need better coffee...

[10:04] <nwc10> :-)

[10:04] <nwc10> next one down is the fun bit?

[10:04] <nwc10> use of uninitialized value of type Any in string context==8928== Invalid read of size 8

[10:04] <nwc10> ==8928==    at 0xDA72638: Rakudo_cont_store (container.c:65)

[10:04] <nwc10> ==8928==    by 0xDA6AFD7: Parrot_perl6_container_store_p_p (perl6_ops.c:4827)

[10:04] <dalek> nqp: ebd44e7 | jnthn++ | src/ops/nqp.ops:

[10:04] <dalek> nqp: Avoid a NULL escaping.

[10:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ebd44e7494

[10:04] <jnthn> I needed to push that too...

[10:05] <dalek> rakudo/nom: 39cf717 | jnthn++ | tools/build/NQP_REVISION:

[10:05] <dalek> rakudo/nom: Get nqp::getcodeobj NULL fix.

[10:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/39cf717516

[10:05] <jnthn> ...and dump that.

[10:05] <jnthn> *bump

[10:05] <jnthn> fail...

[10:05] <jnthn> Those should help.

[10:06] <nwc10> step away from the keyboard, and seek help from a qualified barista? :-)

[10:06] <nwc10> (or just give up for the day and open a beer?)

[10:06] <BigBear> Guten morgen - Good morning #perl6

[10:06] * jnthn has a nice coffee machine here, but the current batch of stuff he's putting into it wasn't one of his better selections...

[10:07] <jnthn> heh, I think I'm meant to be doing $dayjob stuff today ;)

[10:08] <jnthn> I guess I could always blame the tap water, which we're curently not meant to drink without boiling here thanks to some kind of contamination...

[10:08] <jnthn> .oO( see, beer is the SAFE option! )

[10:08] *** daxim left
[10:08] <nwc10> :-)

[10:09] <kresike> jnthn, fish have sex in water ... no one should drink that stuff :)

[10:10] <FROGGS> kresike: fishes do everything in water...

[10:11] <lizmat> jnthn: historically, that was the reason beer was preferred over water as a supplier of fluids

[10:12] *** anuby left
[10:13] <BigBear> tadzik:not sure you'll see this, but I have gone and fixed panda on windows 7 pro on latest R* by removing the File::Tools files under 'site' (File/Find.pm + File/Find.pir & Shell/Command.pm + Shell/Command.pir) and leaving the install using the ones under 'lib'

[10:14] <dalek> ecosystem: 3696d0e | (Brent Laabs)++ | META.list:

[10:14] <dalek> ecosystem: add File::Directory::Tree

[10:14] <dalek> ecosystem: Port of File::Path::Tiny to Perl 6 - create and delete directory trees

[10:14] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/3696d0e04c

[10:21] <FROGGS> can somebody help me? I've got a statement block within the grammar-actions, and I want to wrap its AST within an implicit loop over one element

[10:22] <FROGGS> like: $past := $<sblock>.ast; $past := QAST::Op.new( :op<call>, :name<map>, QAST::IVal.new('1'), $past )

[10:22] <FROGGS> err, *callmethod

[10:23] *** Gruu_ joined
[10:24] <jnthn> Does this not work?

[10:24] <FROGGS> no, I'll paste the error in a sec

[10:24] <FROGGS> Too many positional parameters passed; got 1 but expected 0

[10:25] <jnthn> Wait what do you mean by a statement block?

[10:25] *** Gruu_ left
[10:25] *** labster left
[10:25] <FROGGS> code is actually: $past := $<sblock>.ast; $past := QAST::Op.new( :op<call>, :name<map>, QAST::IVal.new(:value('1')), $past )

[10:25] <FROGGS> jnthn: it is an sblock

[10:26] <jnthn> What sort of AST does it produce?

[10:26] <FROGGS> I've got a rule statement_control:sym<{ }> { <?before '{' > <sblock> }

[10:27] <FROGGS> or do you want to get the ast, produced by method sblock?

[10:27] <jnthn> yeah, 'cus I'm guessing that's where the problem may be...

[10:28] <FROGGS> method sblock returns a reference_to_code_object(...)

[10:28] <FROGGS> damn, pizza is there now :/

[10:28] <jnthn> OK, and does that code object accept an argument?

[10:29] <FROGGS> hmmm, dont think so

[10:29] <FROGGS> I see what you mean

[10:29] <FROGGS> the loop wants to give "me" the iterator, and my block doesnt take one

[10:30] <FROGGS> thanks!

[10:30] <FROGGS> lunch &

[10:30] <BigBear> tadzik: i have commented on gist showing the way the "SAME" action under win 7 breaks  but under mac os x has no effect? last commnets under https://gist.github.com/anonymous/5331694

[10:37] *** daxim joined
[10:41] *** brrt left
[10:47] *** grondilu left
[10:48] *** grondilu joined
[10:48] <tadzik> BigBear: sorry, I don't have time to look at this right now

[11:00] <FROGGS> back

[11:00] <FROGGS> jnthn: so I need to add a signature, right?

[11:02] <FROGGS> .u heart

[11:02] <yoleaux> U+2619 REVERSED ROTATED FLORAL HEART BULLET [So] (‚òô)

[11:02] <yoleaux> U+2661 WHITE HEART SUIT [So] (‚ô°)

[11:02] <yoleaux> U+2665 BLACK HEART SUIT [So] (‚ô•)

[11:02] <FROGGS> jnthn: I ‚ô• you!

[11:03] <Juerd> That's colorschemism!

[11:03] <Juerd> They're the other way around on my white-on-black terminal

[11:03] <FROGGS> should be called "filled heart suit"

[11:03] <nwc10> jnthn: All tests successful.

[11:07] <jnthn> FROGGS: Yes, and you can probably steal code to do it...make_topic_block comes to mind

[11:07] <jnthn> nwc10: phew!

[11:07] <FROGGS> well, I used <sblock(1)> which sets $*IMPLICIT, will test if that is enough

[11:08] <nwc10> you can drink the coffee again, if you want

[11:08] *** brrt joined
[11:10] *** cognominal joined
[11:10] <jnthn> FROGGS: Probably :)

[11:11] *** lizmat joined
[11:14] *** erkan left
[11:24] *** _jaldhar joined
[11:25] *** drbean left
[11:27] *** drbean joined
[11:31] *** BigBear left
[11:32] *** erkan joined
[11:33] <masak> Juerd: that's nothing: what about the new GREEN BOOK and ORANGE BOOK that tadzik found?

[11:33] <FROGGS> .u book

[11:33] <masak> the Unicode consortium has jumped the shark.

[11:33] <yoleaux> U+1F4D1 BOOKMARK TABS [So] (üìë)

[11:33] <yoleaux> U+1F4D5 CLOSED BOOK [So] (üìï)

[11:33] <yoleaux> U+1F4D6 OPEN BOOK [So] (üìñ)

[11:33] <FROGGS> .u green

[11:33] <yoleaux> U+1F005 MAHJONG TILE GREEN DRAGON [So] (üÄÖ)

[11:33] <yoleaux> U+1F34F GREEN APPLE [So] (üçè)

[11:33] <yoleaux> U+1F49A GREEN HEART [So] (üíö)

[11:34] <nwc10> .g 1F4A9

[11:34] <yoleaux> http://www.fileformat.info/info/unicode/char/1f4a9/

[11:34] <nwc10> ah

[11:34] <nwc10> .u 1F4A9

[11:35] <yoleaux> U+1F4A9 PILE OF POO [So] (üí©)

[11:35] <nwc10> that one

[11:35] <masak> memo to the Unicode consortium: "stahp!"

[11:35] <masak> "you're not helping"

[11:36] <masak> "we liked it better when you did alphabets"

[11:36] <Juerd> masak: Hahaha

[11:36] <nwc10> It's a shame that the Fake Unicode Consortium has been rather quiet currently

[11:37] <daxim> the consortium only standardises exisiting character repertoires!

[11:38] <daxim> if you don't like poo in your characters, then tell docomo to revoke

[11:41] <nwc10> Yes, Fake Unicode Consortium mentioned the apples, and that explanation came up in the comments: https://plus.google.com/109925364564856140495/posts/bZbVLhHV52n

[11:41] <nwc10> er, reasoning: Google was saying, "here is an existing character set that our users already use and want/expect to be able to search".

[11:48] *** tgt left
[11:51] *** tgt joined
[11:51] *** domidumont left
[11:54] *** domidumont joined
[11:55] *** domidumont left
[11:55] *** domidumont joined
[11:56] <FROGGS> jnthn: what do I have to do to add another block to map's body? It only accepts one positional, but how do I have to wrap it?

[11:56] <FROGGS> if I call infix:<,>, it tells me that there is no method count for parcel

[11:57] <FROGGS> which makes sense of course

[11:57] <jnthn> ...add another block?

[11:57] * jnthn doesn't understand the question...

[11:59] <FROGGS> what I want to do is to support the statement: BLOCK continue BLOCK

[11:59] <FROGGS> both block should be wrapped by the loop we had earlier

[11:59] <FROGGS> *blocks

[12:01] <jnthn> Then yeah, you'd need to wrap the two in another block that calls them in turn, if that's the semantics you want

[12:02] <jnthn> Should it only run the second one under certain conditions in that construct?

[12:02] * jnthn is a very rusty Perl 5 programmer...

[12:02] <FROGGS> the continue block should run unless you call 'last' within the main block

[12:03] <jnthn> Ah, I remembered rightish :)

[12:03] <jnthn> Anyway, doing what I suggested should work out 

[12:03] <jnthn> Oh, but what about if you call "next"?

[12:03] <FROGGS> k, thanks :o)

[12:03] <FROGGS> should call the continue block too

[12:03] <jnthn> Yeah, then what I suggested won't work for that :P

[12:03] <FROGGS> next would be actually a noop there

[12:04] <FROGGS> meh

[12:04] <FROGGS> :o)

[12:04] <jnthn> Well, not a no-op really, it leaves the block?

[12:04] <jnthn> Anyway, you could always install the continue block as a NEXT phaser ;)

[12:04] <jnthn> If you kept that bit of infrastructure in place :)

[12:04] <jnthn> Then it will probably do the Right Thing.

[12:04] <FROGGS> that's what I tried for: 'for BLOCK continue BLOCK', and I think I have more grey hair now...

[12:05] <FROGGS> it is easy if the next phaser is within the loop

[12:05] <jnthn> The phasers handling code doesn't actually care in the slightest if the continue block is outside of the other block.

[12:05] <FROGGS> hmmmm

[12:05] <jnthn> Yeah...you need both code refs around

[12:05] <jnthn> But provided you have that...you're good.

[12:06] <FROGGS> well, I came to the point where it added the phaser (according to my debug output)... but it didnt get fired

[12:07] <timotimo> FROGGS: do you have any modules in particular that you're trying to get to run first? or a few "success stories" so far? :)

[12:07] <FROGGS> errm, my success stories are that about 10 test files pass

[12:07] <FROGGS> need to provide the core modules some day

[12:08] <timotimo> oh, core modules, of course

[12:08] <timotimo> i guess some of them are implemented in C in perl5?

[12:09] <FROGGS> think so, yes

[12:09] <FROGGS> had no time yet to figure that out

[12:13] <timotimo> do you already know how to supply a bunch of modules that would only get loaded if you use v5?

[12:13] <timotimo> like if a module of the same name existed in v6 space, that would need to be overshadowed perhaps? or more probably explicitly asked for

[12:14] *** _jaldhar left
[12:16] <FROGGS> timotimo: the behavior of having modules of different auth's is specced

[12:16] <FROGGS> NYI though

[12:17] <FROGGS> but I have influence of load_module from within v5 land

[12:17] <timotimo> ah, nice.

[12:17] <timotimo> any low hanging fruit i could perhaps look at? those modules could be implemented in v6, right?

[12:18] <FROGGS> ya, if they have exactly the same api they could be in perl6

[12:18] <FROGGS> wourd work like a charm

[12:18] <timotimo> well, all those new fancy typed exceptions might be problematic?

[12:19] <FROGGS> no, they stringify, I dont think they actually hurt

[12:19] <FROGGS> I'm not sure about LHFs though :/

[12:19] <timotimo> mhm

[12:19] <timotimo> that's all right

[12:20] <FROGGS> but I would actually would like to get some help :o9

[12:20] <FROGGS> :o)

[12:21] <FROGGS> it is not really an LHF, but maybe you want to implement labels in rakudo? (for 6 and 5)

[12:22] <timotimo> not really LHF, no :(

[12:23] <FROGGS> ya, might be true

[12:24] <FROGGS> but I know one thing

[12:24] <FROGGS> you could go over the operators, and add missing dispatchers... http://perldoc.perl.org/perlop.html

[12:24] * jnthn can offer a few LHF that would help with JVM porting stuff

[12:25] <FROGGS> jnthn: make a list/doc

[12:28] <timotimo> jnthn: if they are low enough for me, i'll check them out

[12:29] <timotimo> since i have no perl5 experience whatsoever, jakudo is more interesting to me than rakudo5

[12:30] <jnthn> https://gist.github.com/jnthn/5354193

[12:30] <jnthn> There's 2, I'll add more as I have time

[12:30] <jnthn> They don't need JVM skills either, or even getting nqp-jvm-prep. Just stuff to make Rakudo itself more portable.

[12:31] <jnthn> Though adding the things mentioned in there to the JVM stuff is welcome too ;)

[12:32] *** cognominal left
[12:34] *** kaleem left
[12:43] *** sqirrel joined
[12:44] <[Coke]> rn: BEGIN CHECK INIT END START ENTER LEAVE KEEP UNDO FIRST NEXT LAST LEAVE PRE 1

[12:44] <p6eval> rakudo 39cf71:  ( no output )

[12:44] <p6eval> ..niecza v24-37-gf9c8fc2: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Action method statement_prefix:LAST not yet implemented at /tmp/h1_3uAxpuT line 1 (EOF):‚ê§------> [32mVE KEEP UNDO FIRST NEXT LAST LEAVE PRE 1[33m‚èè[31m<EOL>[0m‚ê§‚ê§Unhandled exception: Unable to resolve method statement_leve‚Ä¶

[12:44] <jnthn> Use all the phasers!

[12:45] <[Coke]> I tried, you can't!

[12:46] <jnthn> Rakudo let you :P

[12:46] <[Coke]> (not without some block magic near the end. PRE POST CONTROL CATCH get twitchy when you try to line them up. ;)

[12:46] <jnthn> oh...

[12:46] <jnthn> Yeah, those will be trickier :)

[12:47] <jnthn> rn: BEGIN CHECK INIT END START ENTER say 'omgz'

[12:47] <p6eval> rakudo 39cf71, niecza v24-37-gf9c8fc2: OUTPUT¬´omgz‚ê§¬ª

[12:47] *** mtk joined
[12:47] <jnthn> :)

[12:47] <masak> uhn.

[12:47] <masak> wait -- when does that run? :)

[12:48] <masak> rn: BEGIN CHECK INIT END START ENTER say 'omgz'; say "x"

[12:48] <jnthn> END time

[12:48] <p6eval> rakudo 39cf71, niecza v24-37-gf9c8fc2: OUTPUT¬´omgz‚ê§x‚ê§¬ª

[12:48] <masak> don't think so.

[12:48] <jnthn> oh, maybe not

[12:48] <jnthn> :)

[12:48] * masak may have found a bug! :P

[12:48] <jnthn> Oh...

[12:48] <masak> rn: BEGIN END say 'omgz'; say "x"

[12:48] <p6eval> rakudo 39cf71, niecza v24-37-gf9c8fc2: OUTPUT¬´x‚ê§omgz‚ê§¬ª

[12:49] <masak> rn: BEGIN CHECK END say 'omgz'; say "x"

[12:49] <p6eval> rakudo 39cf71, niecza v24-37-gf9c8fc2: OUTPUT¬´x‚ê§omgz‚ê§¬ª

[12:49] <jnthn> Oh...I see why

[12:49] <masak> rn: BEGIN CHECK INIT END say 'omgz'; say "x"

[12:49] <jnthn> You didn't write a block after the END

[12:49] <p6eval> rakudo 39cf71, niecza v24-37-gf9c8fc2: OUTPUT¬´x‚ê§omgz‚ê§¬ª

[12:49] <jnthn> so that ENTER attaches directly to the current block you are in.

[12:49] <jnthn> Which is correct, I think.

[12:49] <masak> rn: BEGIN CHECK INIT END { START ENTER say 'omgz' }; say "x"

[12:50] <p6eval> rakudo 39cf71, niecza v24-37-gf9c8fc2: OUTPUT¬´x‚ê§omgz‚ê§¬ª

[12:50] <masak> indeed.

[12:50] <masak> but... why does it attach?

[12:50] <masak> shouldn't that attachment run at END time?

[12:50] <jnthn> Phasers are block traits.

[12:50] <masak> ah. right.

[12:50] <masak> yes, no bug here.

[12:56] *** jtpalmer joined
[12:57] *** isBEKaml joined
[12:57] *** SamuraiJack left
[13:00] <isBEKaml> hello, #perl6!

[13:01] <hoelzro> isBEKaml: ahoy!

[13:01] *** woosley1 joined
[13:02] <colomon> o/

[13:05] <isBEKaml> colomon, hoelzro: hey! :)

[13:05] <isBEKaml> hoelzro: wow, I was just looking at your pygments-main pull req a couple of days back. Boy, that's huge.. I wonder how that maintainer keeps up with all these pull requests on the pipeline. :)

[13:05] *** BigBear joined
[13:06] <hoelzro> yeah, I know! Perl 6 was a lot of work

[13:06] <hoelzro> but it was actually easier than I expected

[13:06] <hoelzro> I had the first 95% working in like a week

[13:06] * hoelzro needs to follow up on the comments

[13:06] <isBEKaml> I feel sorry for that maintainer, it's a lot of work just to integrate things. :)

[13:07] <isBEKaml> what with every language needing work and all. 

[13:08] <hoelzro> yeah

[13:08] <colomon> does this mean github will be getting proper p6 highlighting soon?

[13:08] <isBEKaml> colomon: if that gets integrated, yeah. I won't expect it soonish, though. 

[13:09] <colomon> yay! and boo.

[13:10] *** bluescreen10 joined
[13:11] <hoelzro> I have to submit a PR to linguist as well

[13:11] <hoelzro> but that should simply be a few lines in a YAML file plus a corpus of sample p6 data

[13:11] <hoelzro> hard part's over

[13:11] <hoelzro> well, the politics of a pull request are in front of me, so maybe not =/

[13:13] <daxim> what did rakudo used to employ for ffi?  not libffi, but a different C lib?

[13:14] <jnthn> Parrot had some amount of its own ffi stuff a while back, but it was fairly limited. These days, Rakudo's ffi support (which is actually implemented as part of NQP) uses the dyncall library.

[13:16] <daxim> dyncall, that was the name, thanks

[13:16] <jnthn> Yeah, but that's not "used to". That's "now". :)

[13:16] <gtodd> hmm I play around with some of the code snippets posted in the channel and ...

[13:16] <gtodd> our token word {\w+}; ('word:arg1:arg2' ~~ / ^ <keyword=.word> [ ':' <arg=.word> ]* $ /).gist.say

[13:16] <gtodd> for example 

[13:17] <gtodd> prints out strange characters

[13:17] <daxim> aha, I take it it's an optional dep?  before asking here I looked first at the requirements of rakudo in the package manager of my distro, it's not listed there

[13:17] <jnthn> gtodd: Not sure about the strange chars, but I'm pretty sure you want <arg=&word> there. 

[13:17] <jnthn> daxim: No, we bundle it with NQP; it's built as part of the NQP build process.

[13:18] <gtodd> hehe

[13:18] <daxim> aha

[13:18] <isBEKaml> daxim: dyncall is part of nqp

[13:19] <gtodd> ok ... just finding the unicodeness font and terminal madness starting to leak into my world more frequently

[13:20] <isBEKaml> That just reminds me, nqp, parrot and rakudo are all still in the pending queue here: http://slackbuilds.org/pending/ (for slackware) 

[13:21] *** PacoAir joined
[13:22] <jnthn> A lot of the work was not just using dyncall, but getting C structs and C arrays expressable as normal Perl 6 types/objects, so you can do stuff like class Point is repr('CStruct') { has num $!x; has num $!y; .. } and it organizes the memory like a C struct would, so it can be easily passed off to C land and reflect any changes that happen thanks to the called C code.

[13:22] *** kaleem joined
[13:22] *** cognominal joined
[13:23] <nwc10> jnthn: interesting. I didn't know that.

[13:23] <gtodd> that line (i.e.  "our token word {\w+}; ('word:arg1:arg2' ~~ / ^ <keyword=.word> [ ':' <arg=&word> ]* $ /).gist.say"  ) prints out

[13:23] <gtodd> ÔΩ¢word:arg1:arg2ÔΩ£

[13:23] <gtodd>  keyword => ÔΩ¢wordÔΩ£

[13:23] <gtodd>  arg => ÔΩ¢arg1ÔΩ£

[13:23] <gtodd>  arg => ÔΩ¢arg2ÔΩ£

[13:23] <jnthn> Looks correct in my font... :)

[13:23] <gtodd> viz. --> ÔΩ¢  ÔΩ£  

[13:24] <nwc10> that follows though. "Being able to dynmically generate a call stack" isn't that useful if your C API takes anything more funky than non-aggregate value parameters

[13:24] <jnthn> .u  ÔΩ¢  ÔΩ£

[13:24] <yoleaux> U+0020 SPACE [Zs] ( )

[13:24] <yoleaux> U+FF62 HALFWIDTH LEFT CORNER BRACKET [Ps] (ÔΩ¢)

[13:24] <yoleaux> U+FF63 HALFWIDTH RIGHT CORNER BRACKET [Pe] (ÔΩ£)

[13:24] <gtodd> the little backwards  L and the upside down L 

[13:24] <jnthn> nwc10: Right.

[13:25] <jnthn> nwc10: And since we have representation polymorphism in Perl 6, we can do nice stuff in this area 

[13:25] <gtodd> jnthn: yes so those are correct  (I remember them being part of perl6 and having a meaning etc)

[13:25] <FROGGS> gtodd: matches are printed like that

[13:25] <gtodd> yes and they worked 

[13:25] <gtodd> but recently started printing square boxes :-(

[13:26] <isBEKaml> hoelzro: have you had some previous pull requests to either linguist or pygments?

[13:26] <FROGGS> keep in mind, 'say' does that, 'print' not

[13:26] <hoelzro> isBEKaml: this is my first

[13:27] <gtodd> even though my terminal and font are constant ... so ... I am wondering why :-)   possibly a change to libicu or or??

[13:27] <isBEKaml> hoelzro: ah

[13:27] <gtodd> FROGGS: hmm ok maybe when I was playing around previously I did not use say 

[13:28] <isBEKaml> .u square

[13:28] <yoleaux> U+005B LEFT SQUARE BRACKET [Ps] ([)

[13:28] <yoleaux> U+005D RIGHT SQUARE BRACKET [Pe] (])

[13:28] <yoleaux> U+033B COMBINING SQUARE BELOW [Mn] (‚óåÃª)

[13:29] <gtodd> until this point I have led a sheltered life with respect to unicode/fonts/terminals/locales/perl6  

[13:29] <gtodd> since everything "just worked" .... I felt like I was using a Mac or something

[13:30] <FROGGS> gtodd: no, I mean if you do "our token word {\w+}; ('word:arg1:arg2' ~~ / ^ <keyword=.word> [ ':' <arg=&word> ]* $ /).gist.print" you dont get the nice L's

[13:31] <gtodd> it works as expect if I stop using OTF TT fonts in my xterms 

[13:32] <gtodd> FROGGS: even .print does not work ... I've probably found some whackiness in my XTerm, the codepoints "supported" by my font etc. etc. 

[13:33] <gtodd> Too many layers to expect that it was the constantly changing perl6 that changed something ... :)

[13:35] * FROGGS calls it progress :o)

[13:36] <gtodd> hah .. what impressed me earlier (but this must have been my system being set up correctly) was that things printed/displayed correctly in my terminal/console/xterm etc

[13:37] *** frdmn|afk joined
[13:40] *** frdmn left
[13:47] *** drbean left
[13:49] *** drbean joined
[13:53] *** SmokeMachine left
[13:58] *** drbean left
[13:58] *** PerlJam joined
[13:59] *** skids joined
[14:00] *** drbean joined
[14:13] *** xilo left
[14:23] *** bluescreen100 joined
[14:26] *** kaare_ joined
[14:27] *** bluescreen10 left
[14:31] *** FROGGS left
[14:35] *** PacoAir left
[14:36] *** kaleem left
[14:42] *** lizmat left
[14:43] *** xilo joined
[14:44] *** frdmn|afk left
[14:45] *** woosley1 left
[14:51] *** woolfy left
[14:55] <cognominal> is there any  caching for Perl 6 methods equivalent of -X in Perl 5 ?

[14:57] *** crab2313 joined
[15:00] *** FROGGS joined
[15:00] *** isBEKaml left
[15:11] *** fhelmberger left
[15:13] <gtodd> FROGGS: apparently I had a framebuffer device on my console 

[15:14] <gtodd> which made  U+FF62 HALFWIDTH LEFT CORNER BRACKET [Ps] (ÔΩ¢)  etc. display correctly

[15:14] <FROGGS> ahh, interesting

[15:18] <gtodd> not sure what is happening with my xterms hah ... the fonts I'm using (dejavu) have coverage for everything ‚ô°  ‚ô•  ... but not ÔΩ¢ or ÔΩ£  :-)

[15:20] <FROGGS> hmmm, my terminal tells me it uses 'monospace 10'

[15:20] <FROGGS> whatever font that is

[15:22] <gtodd> clearly something auto updated and screwed everything up :)

[15:22] *** isBEKaml joined
[15:22] *** isBEKaml left
[15:22] *** isBEKaml joined
[15:22] <FROGGS> ya, I'm using ubuntu too *g*

[15:23] <gtodd> heh 

[15:26] <gtodd> does anyone know why my builds of rakudo (using --gen-parrot which pulls latest parrot) seem to break on building documentation for parrot/docs/ops/bits.pod ?  if I cd  parrot/docs ; make and then cd .. perl Configure.pl and build parrot and then add cd to rakudo and start over --with-parrot ... it works and builds

[15:26] <gtodd> is the parrot build expected to break on little things like that now and then?

[15:26] <pmichaud> gtodd:  No, I wouldn't expect that.

[15:27] <pmichaud> note that --gen-parrot doesn't pull latest parrot.

[15:27] * [Coke] tries to figure out what perl5 -X does - can someone point me to the appropriate perldoc?

[15:28] <pmichaud> --gen-parrot pulls a revision of Parrot that is expected to work with Rakudo.  That's not necessarily (or even usually) the "latest Parrot".

[15:28] <[Coke]> gtodd: if you are upgrading parrot in between builds, parrot is not guaranteed to build clean if you had already started a build in a previous version.

[15:28] <isBEKaml> [Coke]: perlrun, I think

[15:28] <gtodd> hmm ok it seems like everything but stuff under parrot/docs/ops builds normally and it's really only bits.pod that breaks

[15:28] <[Coke]> (I often do a (cd parrot && git clean --xdf) to avoid tht sort of (infrequent) issue.

[15:28] <pmichaud> one can do  --gen-parrot=master to be sure to pull the "latest parrot".

[15:29] <isBEKaml> [Coke]: yep, disables all warnings, it says. :)

[15:29] <[Coke]> URK. "perldoc perlrun" generates lots of ugly bold <C2>'s 

[15:29] <gtodd> it seems to be breaking when it trys to generate manual pages from pods?

[15:30] <[Coke]> cognominal: did you mean -X above?

[15:30] <gtodd> [Coke]: ok will try that

[15:30] <gtodd> pmichaud: great ... this will help me simulate a release  locally :-)  

[15:30] <FROGGS> [Coke]: I dont see a connection of -X and method caching

[15:31] <jnthn> o/ pmichaud 

[15:31] *** brrt left
[15:33] <pmichaud> o/ jnthn

[15:34] <jnthn> pmichaud: I'm fairly likely going to be looking at getting the JVM stuff into the NQP repo sometime around the weekend. If you don't beat me to it, I'll take the opportunity to rename all the files to .pm then

[15:34] <jnthn> uh

[15:34] <jnthn> to .nqp !!

[15:34] <pmichaud> I'm very unlikely to beat you to it.

[15:34] <pmichaud> +1 to moving the jvm stuff into nqp repo. btw.

[15:34] <pmichaud> (I saw your query about it yesterday)

[15:34] <jnthn> Yeah, I think now is about the time.

[15:35] <pmichaud> +1 to renaming .pm to .nqp, also.

[15:35] <jnthn> It passes just about all the non-Parrot-specific tests that the Parrot implementation does.

[15:35] <pmichaud> \o/

[15:36] <jnthn> Am gradually working towards getting Rakudo into shape for making a push towards supporting that on the JVM also. :)

[15:37] <pmichaud> excellent :)

[15:37] <pmichaud> it will hopefully be good material for my yapc::na talk :)

[15:38] <gtodd> jnthn: you might know the answer to this re: LLVM project ... what is the vmkit ?!?

[15:39] <jnthn> gtodd: A starting point for building VMs using some of the LLVM infrastructure. Still leaves you a lot of building to do, though, afaik...

[15:40] <gtodd> ah ok it seems more of a research phd dissertation project at this stage but I wondered if it is something that needs to be part of the resulting vm

[15:41] <gtodd> whether you'd be tied to llvm in someway

[15:41] <isBEKaml> gtodd: vmkit, IIRC - is LLVM's work towards the jvm (?)

[15:43] <jnthn> isBEKaml: iiuc, they're building a JVM implementation using vmkit but it could in theory be used to build some other VM too

[15:43] <jnthn> Not sure how many examples of that there are.

[15:44] <isBEKaml> jnthn: yeah, it seems pretty barren/dead ATM

[15:44] <gtodd> ok ... so it's early days or the end of time ... but basic takeaway is that vm's are cooler than vc's  :)

[15:45] <isBEKaml> jnthn: last commit into vmkit was a lone commit in Jan2013.

[15:45] <gtodd> so people are writing and porting etc.

[15:45] <isBEKaml> http://lists.cs.uiuc.edu/pipermail/vmkit-commits/2013-January/thread.html

[15:45] <isBEKaml> gtodd: VCs?

[15:46] <gtodd> venture capitalists ;-)

[15:46] <isBEKaml> and VMs? Venture Men? :-)

[15:46] <gtodd> heh

[15:47] <gtodd> hmm here are my parrot build errors  when using --gen-parrot  ....

[15:47] <gtodd> usr/local/bin/perldoc -ud packfile-c.pod ../src/packfile/api.c

[15:47] <gtodd> No documentation found for "/usr/local/bin/perldoc".

[15:47] <gtodd> No documentation found for "-ud".

[15:47] <gtodd> No documentation found for "packfile-c.pod".

[15:48] <gtodd> then it pops into a manual page and stops the build (?) if 

[15:48] <gtodd> I quit out of there it gives me another error:

[15:48] <[Coke]> are you building as root?

[15:48] <pmichaud> 15:47 <gtodd> No documentation found for "/usr/local/bin/perldoc".

[15:49] <pmichaud> That's weird.  That looks like perldoc is trying to compile itself.

[15:49] <gtodd> yeah

[15:49] <gtodd> [Coke]: I haven't had to do that in the past

[15:49] <gtodd> the second error is:

[15:49] <[Coke]> gtodd: you shouldn't build as root, no.

[15:49] <gtodd> /usr/local/bin/perl5.16.2 -MExtUtils::Command -e chmod 0644 ops/bit.pod

[15:49] <gtodd> Cannot chmod 0644 ops/bit.pod:No such file or directory at /usr/local/lib/perl5/5.16.2/ExtUtils/Command.pm line 274.

[15:49] <gtodd> gmake[1]: *** [ops/bit.pod] Error 2

[15:49] <gtodd> gmake[1]: Leaving directory `/usr/home/gtodd/development/rakudo-release/rakudo/parrot/docs'

[15:49] <gtodd> gmake: *** [docs.dummy] Error 2

[15:49] <gtodd> Command failed (status 512): gmake install-dev

[15:50] <[Coke]> (but that has been the source of weird perldoc errors in parrot build in the past.)

[15:50] <gtodd> [Coke]: ahh ok

[15:50] <gtodd> will try

[15:50] <[Coke]> no, DON'T Build as root.

[15:50] <gtodd> I can fix it with a lot of manual cd ; make ; and other dancing

[15:50] <[Coke]> building as root has been a problem in the past.

[15:51] <[Coke]> gtodd: are you passing in an options to rakudo's Configure?

[15:51] <gtodd> oh ok I was only going to test if it worked :-)

[15:51] <[Coke]> *any

[15:51] <[Coke]> I have to run, but if you are having trouble building parrot, you might want to ping #parrot on irc.perl.org

[15:51] <gtodd> perl Configure.pl --gen-nqp --gen-parrot

[15:51] <[Coke]> (which is filled with many sixers)

[15:51] <gtodd> ooops yeah duh :-)

[15:51] <gtodd> I forgot parrot is a separate thing :-)

[15:53] <PerlJam> Are both "--gen-parrot" and "--gen-nqp" needed?  Or does one imply the other?

[15:53] <pmichaud> --gen-parrot implies --gen-nqp

[15:53] <pmichaud> (if you build a new parrot, you need a new nqp also.)

[15:54] <kresike> bye folks

[15:54] *** kresike left
[15:54] <isBEKaml> bye, kresike

[15:55] <isBEKaml> .tell kresike thanks for all the "happy"s. :-)

[15:55] <yoleaux> isBEKaml: I'll pass your message to kresike.

[15:55] *** grondilu left
[15:56] *** grondilu joined
[15:58] *** grondilu left
[16:00] *** bbkr left
[16:01] *** drbean left
[16:06] *** kaleem joined
[16:08] *** drbean joined
[16:16] <isBEKaml> .u bucket

[16:16] <yoleaux> No characters found

[16:16] <isBEKaml> .u hat

[16:16] <yoleaux> U+05B1 HEBREW POINT HATAF SEGOL [Mn] (‚óå÷±)

[16:16] <BigBear> I am now out of here and go and watch G I Joe Retaliation in 3D - should be fun night #perl6 

[16:16] <yoleaux> U+05B2 HEBREW POINT HATAF PATAH [Mn] (‚óå÷≤)

[16:16] <yoleaux> U+05B3 HEBREW POINT HATAF QAMATS [Mn] (‚óå÷≥)

[16:17] *** dmol joined
[16:17] <BigBear> tadzik: no problem I understand. I am sorted for now. If you need me to do anything , further tests and such like let me know here , I will come back and read the daily logs and see if there is anything else. Happy studying.

[16:19] *** BigBear left
[16:33] *** kaleem left
[16:40] *** lizmat joined
[16:44] *** lizmat left
[16:45] *** lizmat joined
[16:49] <gtodd> .u √©

[16:49] <yoleaux> U+00E9 LATIN SMALL LETTER E WITH ACUTE [Ll] (√©)

[16:51] *** kaleem joined
[16:51] *** kaleem left
[16:54] *** SamuraiJack joined
[16:54] *** PacoAir joined
[16:55] *** frdmn joined
[16:57] *** dakkar left
[16:59] *** kst`` is now known as kst

[17:04] *** loops joined
[17:05] *** daxim left
[17:08] *** SHODAN joined
[17:11] <[Coke]> masak:  -> (12:07) From Kazrak, to random:

[17:11] <[Coke]>  - "The two top sources of error in software are concu and buffer overflow%^$#@@

[17:11] <[Coke]>  - ~rrency. And off-by-one errors.

[17:12] *** zby_home_ joined
[17:14] <huf> :D

[17:19] *** lizmat left
[17:19] *** lizmat joined
[17:36] <timotimo> i'll do the STAT const LHF for rakudo now.

[17:37] *** crab2313 left
[17:43] *** cognominal left
[17:47] *** bluescreen100 left
[17:50] <timotimo> hm, i may have started this on the wrong end

[18:01] <dalek> nqp: 445f1ac | (Timo Paulssen)++ | src/QAST/Operations.nqp:

[18:01] <dalek> nqp: add STAT_* constants to nqp::const::

[18:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/445f1ac59c

[18:01] <timotimo> spectesting my rakudo changes right now

[18:07] <PerlJam> masak: have you heard of hackfoldr.org or its ilk?  Might prove useful for the workshop (or a distributed hackathon)

[18:08] *** SamuraiJack left
[18:10] <timotimo> i have no idea what this hackfoldr thing is, it looks like a jumbled mess of different things

[18:13] *** loops left
[18:24] <timotimo> great, my changes all pass

[18:27] *** johnjohn101 joined
[18:28] <johnjohn101> so i heard perl 6 will be out on jvm this summer. is this correct?

[18:28] <timotimo> hopefully

[18:28] <timotimo> that effort is currently underway

[18:30] <lue> hello world o/

[18:30] <gtodd> ok now I want to write a test to make sure my terminals/fonts/localesettings work :)

[18:30] <gtodd>  how can I get perl6 to  give me the codepoint from character name?  like the reverse of:       say "\c[LATIN SMALL LETTER E WITH ACUTE]"

[18:30] <gtodd> or maybe print the character √©  ?

[18:31] <gtodd> the code point and the name 

[18:31] <gtodd> wait .. I want a script that does what .u does

[18:32] <gtodd> in the channel ... except I just run it with utf8_sample.txt  or big unicode text file and look at the output to see if my terminal/local/font/Xresources etc. are working

[18:32] *** isBEKaml left
[18:33] <timotimo> r: say "\c[FULL BLOCK]".ords

[18:33] <p6eval> rakudo 39cf71: OUTPUT¬´9608‚ê§¬ª

[18:33] <timotimo> r: say "\u9608"

[18:33] <p6eval> rakudo 39cf71: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unrecognized backslash sequence: '\u'‚ê§at /tmp/JDFQsFcMFw:1‚ê§------> [32msay "\[33m‚èè[31mu9608"[0m‚ê§    expecting any of:‚ê§        argument list‚ê§        prefix or term‚ê§        prefix or meta-prefix‚ê§        double quotes‚ê§¬ª‚Ä¶

[18:33] <timotimo> er, whoops

[18:33] <timotimo> r: say "\c9608"

[18:33] <p6eval> rakudo 39cf71: OUTPUT¬´‚ñà‚ê§¬ª

[18:33] <timotimo> there you go

[18:33] <gtodd> because now I'm finding lots of undisplayable characters showing up in the REPL ... (which must be due to something I've done here sigh)

[18:34] <gtodd> timotimo: oh hah thanks .. I'm going to have make a test I can run on login or something 

[18:38] <dalek> rakudo/nom: c1c25dd | (Timo Paulssen)++ | src/core/IO.pm:

[18:38] <dalek> rakudo/nom: use the new NQP STAT constants

[18:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c1c25ddd93

[18:38] <dalek> rakudo/nom: 4dc8590 | (Timo Paulssen)++ | tools/build/NQP_REVISION:

[18:38] <dalek> rakudo/nom: bump NQP version to get new STAT_ consts

[18:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4dc8590fb2

[18:38] <dalek> rakudo/nom: 17f5e59 | jonathan++ | / (2 files):

[18:38] <dalek> rakudo/nom: Merge pull request #120 from timo/use_nqp_const_stat

[18:38] <dalek> rakudo/nom: 

[18:38] <dalek> rakudo/nom: Use nqp::const::stat_...

[18:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/17f5e59290

[18:38] <timotimo> thanks :)

[18:39] <jnthn> Thank you :)

[18:40] <jnthn> pir:: in setting now down to 163 hits

[18:40] <timotimo> neat.

[18:40] <[Coke]> jnthn++

[18:40] <[Coke]> etal.++

[18:40] <timotimo> i'm not familiar enough with the codegen to implement flip, though :|

[18:41] <jnthn> timotimo: oh, I can probably point you at an example that may help

[18:41] <gtodd> timotimo: it's like important like to put .ords *after* the "" :-\

[18:41] <gtodd> sigh

[18:41] <jnthn> timotimo: look up getcodecuid as an example

[18:42] <gtodd> perl makes one suitably ambitious and suitably humble ...

[18:42] <lue> I added some ideas on the actions side of slangs at the bottom of this, if you care: https://gist.github.com/lue/5241230

[18:42] <timotimo> i'll have a look, thanks

[18:42] <gtodd> hmm k good thanks

[18:42] <timotimo> r: say .ords for "foo"; # gtodd

[18:42] <p6eval> rakudo 39cf71: OUTPUT¬´102 111 111‚ê§¬ª

[18:42] <timotimo> ;)

[18:42] <gtodd> arg

[18:43] <jnthn> timotimo: oh, but it may be a bit trickier as it'll want a Parrot string constructing

[18:43] <jnthn> hmm

[18:45] <gtodd> say .unicodecharactername for "these are so easy to remember";

[18:46] <timotimo> jnthn: i would have to create a QAST::VM node for that?

[18:47] <jnthn> timotimo: You could do it that way, yeah

[18:47] <timotimo> that looks like i'd have to write PIR, though, which i am not capable of

[18:48] <timotimo> i assume i'd have to generate code to call nqp::some_unboxing_op, then pir::flip on that resulting parrot string (i hope) and then nqp::perl6ify on the parrot string again and use that?

[18:48] <jnthn> Desugar to something like: QAST::VM.new( :pirop('set__SP'), QAST::Op.new( :op('callmethod'), :name('reverse'), QAST::VM.new( :pirop('box__PS'), $op[0] ) ) )

[18:49] <timotimo> uh, set__SP has only one parameter?

[18:49] <timotimo> well, since box__PS does, too, i guess that's correct

[18:50] *** johnjohn101 left
[18:50] <diakopter> right, the output parameter is implied

[18:50] <jnthn> Yes

[18:50] <timotimo> but calling box on $op[0] - wouldn't that ... box it again?

[18:50] <jnthn> The first character is the output type

[18:50] <timotimo> ah, so it turns a Pointer into a String, more or less

[18:50] <jnthn> Yes, we use box (the Parrot op) to box it to a Parrot String

[18:50] <jnthn> from a string register

[18:51] <timotimo> why don't i have to unbox it from a perl6 string into a string register manually?

[18:52] <jnthn> In CORE.setting you'll want something like nqp::p6box_s(nqp::flip(nqp::unbox_s(self.Str)))

[18:52] <timotimo> ah, ok

[18:52] <jnthn> You leave those bits to be done in Perl 6, and from the QAST level expose an op that takes a str and produces a str

[18:57] <timotimo> > nqp::say(nqp::flip("foo"))

[18:57] <timotimo> oof

[18:58] <timotimo> do i put some tests in the nqp testsuite for this?

[18:58] <jnthn> please

[18:58] <jnthn> 59-nqpop.t is suitable

[18:59] <timotimo> will do

[19:02] <dalek> nqp: e92eff1 | (Timo Paulssen)++ | / (2 files):

[19:02] <dalek> nqp: add nqp::flip op with a simple test for 59-nqpops

[19:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e92eff1da5

[19:03] <timotimo> i guess i'll hunt pir::reverse usages in rakudo now

[19:04] <jnthn> I think there's only one in Cool.flip

[19:04] <timotimo> found it, thanks!

[19:05] <timotimo> compiling and spectesting now

[19:05] *** berekuk joined
[19:12] <timotimo> t/spec/S32-str/flip.rakudo ................................ ok          

[19:13] <timotimo> i guess i'll push & pullrq

[19:13] *** tgt left
[19:13] *** snearch joined
[19:14] <jnthn> timotimo: Hm, I guess that means you did All The Things I Suggested ;)

[19:15] <timotimo> it seems so!

[19:15] <timotimo> it's almost as if you did all the work!

[19:15] <jnthn> I have more suggestions, if you're not bored yet ;)

[19:16] <jnthn> IO.pm is a treasure trove of similarly straightforward things. 

[19:16] *** domidumont left
[19:16] <jnthn> pir::new__PS('OS').unlink($path); for example

[19:16] <jnthn> Which could really be Ps...

[19:17] <jnthn> QAST::Op.new( :op('callmethod'), :name('unlink'), QAST::VM.new( :pirop('new__Ps'), QAST::SVal.new( :value('OS') ) ), $op[0] ) ) # or so

[19:18] <jnthn> There's a range of similar; rmdir, mkdir, chdir, rename, copy (second ones take two operands but same principle)

[19:18] *** rindolf left
[19:18] <timotimo> i guess i can try that

[19:19] <jnthn> timotimo++

[19:19] <timotimo> how many days will jakudo be finished earlier due to my hard work^W^Wpestering you for the solution instead of thinking for myself?

[19:19] <dalek> rakudo/nom: 33d2614 | (Timo Paulssen)++ | / (2 files):

[19:19] <dalek> rakudo/nom: new NQP, use nqp::flip op in Cool.flip.

[19:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/33d2614736

[19:19] <dalek> rakudo/nom: 1ee3b4c | jonathan++ | / (2 files):

[19:19] <dalek> rakudo/nom: Merge pull request #121 from timo/nqp_flip_op

[19:19] <dalek> rakudo/nom: 

[19:19] <dalek> rakudo/nom: new NQP, use nqp::flip op in Cool.flip.

[19:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1ee3b4c757

[19:20] *** GlitchMr joined
[19:21] <jnthn> Depends how many pir:: you can kill. ;-) Generally, though, any of these bits I can offload the coding/testing of help in so far as they free me up to do other bits :)

[19:21] <timotimo> jnthn: is there a replacement for pir::perl6_current_args_rpa__P(); already? (as used in sub note/say/print/gist(|))

[19:22] <dalek> nqp: 788df18 | jnthn++ | src/QAST/Operations.nqp:

[19:22] <dalek> nqp: Add an nqp::getlexcaller.

[19:22] <dalek> nqp: review: https://github.com/perl6/nqp/commit/788df18f44

[19:22] <jnthn> timotimo: No; I'm still pondering exactly how to handle that one.

[19:22] <timotimo> 'k

[19:23] <dalek> rakudo/nom: 400fb2c | jnthn++ | / (8 files):

[19:23] <dalek> rakudo/nom: Use nqp::getlexcaller op.

[19:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/400fb2c772

[19:23] <jnthn> Search "pir::" (151 hits in 25 files) # progress :)

[19:26] <timotimo> jnthn: nqp::usecapture and such are not right for that?

[19:28] <jnthn> timotimo: They could in theory be used for it, but the op does a little bit more than that.

[19:28] *** tgt joined
[19:29] <timotimo> OK. i'll let you think about it some more then ;)

[19:35] <sergot> feather.perl6.nl/~sergot/modules/ so... It works!

[19:35] <sergot> \o/

[19:35] <timotimo> oh, smokin'!

[19:35] <tadzik> sergot: autoupdates?

[19:36] <tadzik> sergot: and individual module pages broken, no?

[19:36] <tadzik> for some new ones

[19:37] <sergot> tadzik: autoupdate - yes.

[19:37] <sergot> tadzik: oh... which one e.g.?

[19:38] <tadzik> erm, I don't know anymore

[19:38] <sergot> ADT?

[19:38] <tadzik> http://feather.perl6.nl/~sergot/modules/module/ignore.html was 404 for me 2 minutes ago

[19:38] <tadzik> it's ok now :)

[19:38] <sergot> Great! :)

[19:38] <tadzik> yeah, super-awesome

[19:38] <tadzik> sergot++

[19:39] <sergot> tadzik++ for help. :) thanks

[19:44] <timotimo> sergot: any way to get the readme rendered instead of plain text?

[19:45] *** zby_home_ left
[19:45] *** GlitchMr left
[19:46] <[Coke]> sergot: yay, my lame module passes all tests! ;)

[19:46] <tadzik> Text::Markdown is green :)

[19:47] <tadzik> so should be doable

[19:47] <timotimo> jnthn: how do i properly test the functions like chdir, mkdir, rename, move?

[19:47] <jnthn> timotimo: Hm...good question. I'm sure Rakudo's tests must do it.

[19:47] <jnthn> timotimo: I'd look there for inspiration 

[19:47] <timotimo> oh, so i'll have to copy them :|

[19:48] <jnthn> That or we just let the Rakudo tests cover it :)

[19:48] <jnthn> The lazy option. :)

[19:48] <timotimo> i'm lazy for now. we could make it a LHF for other people :D

[19:48] <jnthn> ;)

[19:49] *** snearch left
[19:49] <tadzik> sergot: will you blog about it?

[19:49] <tadzik> also, I see no reason why we wouldn't now eat our own dogfood and generate modules.perl6.org with Perl 6

[19:49] <tadzik> not only it works, but is more awesome than the existing one

[19:49] <tadzik> moritz: ?

[19:51] <sergot> tadzik: should I?

[19:51] <tadzik> sergot: I think so

[19:51] <sergot> So, it'll be done.

[19:51] <[Coke]> tadzik: +1 here.

[19:51] * masak things so too

[19:51] <tadzik> "look, we are self-sustaining"

[19:51] <masak> thinks*

[19:51] <tadzik> http://i.imgur.com/TvYipWU.gif -- the current state of Panda development

[19:51] <[Coke]> owww.

[19:52] <masak> awww, good thing they're so soft!

[19:52] <dalek> nqp: b208fc2 | (Timo Paulssen)++ | src/QAST/Operations.nqp:

[19:52] <dalek> nqp: add a few nqp ops for IO.pm

[19:52] <dalek> nqp: 

[19:52] <dalek> nqp: chmod, unlink, rmdir, cwd, chdir, mkdir, rename, copy.

[19:52] <dalek> nqp: 

[19:52] <dalek> nqp: they will be tested by the rakudo testsuite later, but adding

[19:52] <dalek> nqp: tests to nqpops.t would be neat, too.

[19:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b208fc2899

[19:53] *** arlinius left
[19:53] * [Coke] attempts to rebuild his installed rakudo since it seems to have gone haywire at some point. :|

[19:53] <dalek> rakudo/nom: 9642243 | jnthn++ | src/Perl6/ (5 files):

[19:53] <sergot> timotimo: what did you mean?

[19:53] <dalek> rakudo/nom: Some more pir:: => nqp:: in the MOP/BOOTSTRAP.

[19:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9642243874

[19:53] <[Coke]> (haywire== getting huge backtraces when running "./perl6"; I think all I did sixwise was build rakudo with a different install path in another folder)

[19:54] <timotimo> sergot: on the individual info page of my ADT module it's just <pre>, but my readme is actually a .md file, so it could be rendered instead

[19:54] <timotimo> huh, suddenly lots of changes

[19:55] <flussence> aw crap, text-tabs-wrap failed? I *really* didn't want to have to touch that giant tangled ball of meat hooks again...

[19:55] <jnthn> timotimo: One other easy one I just spotted is adding a simple mapping for nqp::settypecheckmode to stable_set_type_check_mode, sig 0PI. Can use add_core_pirop_mapping at end of object ops section. Then there's a couple of places it's used in src/Perl6/Metamodel/ :)

[19:55] <flussence> .oO( OTOH, maybe it's been long enough I can finally get rid of all the hacks in that code... )

[19:55] <sergot> timotimo: oh, right! I was thinking about it. Will do this. thanks timotimo++

[19:55] <timotimo> sure

[19:55] <tadzik> flussence: I have the same feelings about a couple of my modules :)

[19:55] <timotimo> very cool to have, great work!

[19:55] <flussence> ow, that was a *lot* of lag. 

[19:56] <raiph> for when we replace diakopter with a conventional fuzzer: http://blog.regehr.org/archives/925

[19:56] <raiph> (about making fuzzing results much more useful)

[19:57] <raiph> (focused on fuzzing of compilers)

[19:57] <flussence> rn: my $line-len = 5; 'foo bar' ~~ /\N ** {0..$line-len} [\n|\s|$]/

[19:57] <p6eval> niecza v24-37-gf9c8fc2:  ( no output )

[19:57] <p6eval> ..rakudo 17f5e5: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Quantifier quantifies nothing‚ê§at /tmp/XcjzbpUezm:1‚ê§------> [32mmy $line-len = 5; 'foo bar' ~~ /\N ** [33m‚èè[31m{0..$line-len} [\n|\s|$]/[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        infix stopper‚ê§        infix or meta-infix‚ê§   ‚Ä¶

[19:57] <flussence> n: my $line-len = 5; say 'foo bar' ~~ /\N ** {0..$line-len} [\n|\s|$]/

[19:57] <p6eval> niecza v24-37-gf9c8fc2: OUTPUT¬´ÔΩ¢foo ÔΩ£‚ê§‚ê§¬ª

[19:59] *** labster joined
[20:00] *** GlitchMr joined
[20:00] * [Coke] looks forward to running rakudo through jvisualvm.

[20:01] <timotimo> hehe

[20:01] * lue wonders if having an optional logotype/logo_64x64.png for individual module pages (using 32x32 as a fallback) would be a bad thing

[20:01] <timotimo> about to spectest my IO.pm nqpisations

[20:03] *** zby_home_ joined
[20:03] <lizmat> timotimo++

[20:04] *** prammer left
[20:05] *** prammer joined
[20:09] *** loops joined
[20:09] <timotimo> seems like i didn't make a silly mistake so far :)

[20:12] <timotimo> jnthn: feel free to merge dr

[20:12] <timotimo> :)

[20:12] <timotimo> i'm finished for today.

[20:15] <dalek> rakudo/nom: 2cc823a | (Timo Paulssen)++ | / (2 files):

[20:15] <dalek> rakudo/nom: use the several new IO nqp:: ops in IO.pm

[20:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2cc823aa6e

[20:15] <dalek> rakudo/nom: 7776447 | jonathan++ | / (2 files):

[20:15] <dalek> rakudo/nom: Merge pull request #122 from timo/io_pm_nqp_ops

[20:15] <dalek> rakudo/nom: 

[20:15] <dalek> rakudo/nom: use the several new IO nqp:: ops in IO.pm

[20:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/77764475c3

[20:16] <jnthn> timotimo++ # thanks!

[20:18] <timotimo> sure thing!

[20:18] <timotimo> i'm just now considering writing a python dialect where the whitespace that determines block nesting is on the right side of the code rather than on the left

[20:23] <lizmat> is there something like race { $a=1; $b=2; $c=3 } that would potentially execute the statements in parallel ?

[20:23] <lizmat> inside the block ?

[20:24] *** arlinius joined
[20:24] <flussence> I guess you could something like [{$a=1},{$b=2},{$c=3}]¬ª.()

[20:24] <lizmat> I can only find "race" and "hyper" as listop in S02

[20:24] <lizmat> yuck  :-)

[20:26] <Tene> timotimo: lies; you considered that about an hour ago!

[20:26] <lue> r: my ($a,$b,$c); any({$a=1},{$b=2},{$c=3}).(); say $a,$b,$c;

[20:26] <p6eval> rakudo 964224: OUTPUT¬´123‚ê§¬ª

[20:26] <jnthn> I guess if async returns some kind of future/promise object then you can do it as a kind of task combinator on those.

[20:26] <timotimo> Tene: that's true! but time is an illusion!

[20:26] <timotimo> (lunchtime doubly so)

[20:27] <masak> lue: bzzzt. use of junctions only for their parallelism side effect detected.

[20:27] <gtodd> .u √©

[20:27] <yoleaux> U+00E9 LATIN SMALL LETTER E WITH ACUTE [Ll] (√©)

[20:27] <lizmat> I'm more thinking in the realm of compiler hints

[20:27] <Tene> timotimo: Very deep.

[20:27] <timotimo> but not mine :)

[20:27] <lue> ENOS17

[20:35] <lizmat> rn: say $_ for hyper ^10

[20:35] <p6eval> niecza v24-37-gf9c8fc2: OUTPUT¬´Unhandled exception: No value for parameter '$dwimr' in 'hyper'‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 0 (hyper @ 1) ‚ê§  at /tmp/squat0vSAO line 1 (mainline @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4299 (ANON @ 3) ‚ê§  at /home/p6eval/niec‚Ä¶

[20:35] <p6eval> ..rakudo 964224: OUTPUT¬´Cannot call 'hyper'; none of these signatures match:‚ê§:(\op, \a, \b, :dwim-left(:$dwim-left), :dwim-right(:$dwim-right))‚ê§:(\op, \obj)‚ê§:(\op, Associative \h)‚ê§:(\op, Associative \a, Associative \b, :dwim-left(:$dwim-left), :dwim-right(:$dwim-right))‚ê§:(\op, Associative‚Ä¶

[20:35] * lue wonders if there's anything else in Perl 6 that can be used for their non-primary purposes (like junctions purely for parallelism)

[20:35] <timotimo> oh, that's interesting

[20:35] <lizmat> rn: say $_ for race ^10

[20:35] <p6eval> niecza v24-37-gf9c8fc2: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Undeclared routine:‚ê§     'race' used at line 1‚ê§‚ê§Unhandled exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 1443 (die @ 5) ‚ê§  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 37) ‚ê§  at /hom‚Ä¶

[20:35] <p6eval> ..rakudo 964224: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared routine:‚ê§    race used at line 1‚ê§‚ê§¬ª

[20:37] <lizmat> I would think we would need better syntax for parallellism in Perl 6 than abusing junctions

[20:37] <masak> lue: the reason you shouldn't use junctions for parallelism is that they don't guarantee it, they only allow it.

[20:37] *** kaare_ left
[20:37] <lue> lizmat: naturally, but S17 is a mess right now. Junctions are the only thing I know of that can do the parallelism thing.

[20:38] <timotimo> except they are not actually parallelised :)

[20:38] <timotimo> not even with green threads

[20:38] <masak> lue: no, 'hyper' does the parallelism thing, too.

[20:38] <lizmat> I guess I need to revisit S07, after 8 years or so  :-(

[20:39] <lue> .oO(oh yeah)

[20:39] <masak> lue: and 'race'.

[20:40] <lizmat> so,my understanding of "say $_ for race ^10" is that that would print 0 through 9 in a random order

[20:40] <lue> hyper (aside from use in hyperops) and race appear to be NYI though. (I was referring to the only *working* thing, unless I really need to read all the concurrency things)

[20:40] <lizmat> is that understanding correct, masak ?

[20:40] <lizmat> it's all NYI, and some not even specced

[20:41] <masak> lizmat: I'm no expect, but I haven't seen 'race' and similar modifiers in that position before.

[20:41] <masak> lizmat: they tend to go before a statement. like 'hyper for @a {...}'

[20:42] <masak> in a sense, they are contextualizers.

[20:42] <ingy> timotimo: yes :)

[20:42] <ingy> for some definition of soon

[20:42] <jnthn> lizmat: Once Rakudo is on the JVM and we have a platform to play with all of these parallel things, we should maybe have some hackathon on it. I'd be happy to participate and provide quick prototyping of ideas.

[20:43] <lizmat> sounds like a plan!

[20:43] <lue> for those who know better than I: is S17 just in need of a reformatting/rearranging of content, or does its content need serious changes?

[20:45] <timotimo> ingy: all right. i'll not try to bash my head against it then :)

[20:45] <moritz> \o

[20:46] <lue> hello moritz o/

[20:46] <jnthn> o/ moritz 

[20:46] <masak> moritz! \o/

[20:46] <lizmat> lue: I think that in general people shouldn't have to program in threads

[20:47] <lizmat> it is simply too difficult

[20:47] <jnthn> Aye. Threads are part of the assembly language of parallel/concurrent programming.

[20:47] * ingy just bought some cool new threads

[20:47] <lizmat> so I'm looking for other paradigms for using multi-core CPU's transparently

[20:47] <jnthn> Most of the time we want to use higher level tools :)

[20:48] <lue> It'd still be useful to provide lower-level threads though.

[20:48] <lizmat> I'm not 100% sure

[20:49] <lizmat> :-)

[20:49] <lizmat> about providing lower level threads at a higher level

[20:49] <jnthn> We may wish to purely out of wishing to write the higher level pieces in a HLL :)

[20:49] * lue just thought of a high-level meanwhile statemnt, of questionable usefulness: sub foo { my $a = 0; meanwhile { $a++ }; while $a < 10 { say $a } }

[20:50] <lizmat> jnthn: ;-)

[20:51] <masak> 'night, #perl6

[20:51] <lizmat> finishing up at the Niederrhein PM meeting

[20:51] <lizmat> night masak!

[20:51] <moritz> re modules.perl6.org generated by Perl 6 code: I'm all for it, but the generation can't be done on the host that is serving the pages

[20:51] <jnthn> ...where?

[20:52] <lue> g'‚ôû masak o/

[20:52] <moritz> because it has too little memory to build rakudo

[20:52] <moritz> so the files need to be rsync'ed over

[20:52] *** lizmat left
[20:52] *** frdmn left
[20:53] <jnthn> Oh...area near the Rhein... I guess...

[20:53] <moritz> yes

[21:00] <[Coke]> moritz: too little to /build/ or /run/ rakudo?

[21:01] <[Coke]> r: PRE

[21:01] <p6eval> rakudo 964224: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared name:‚ê§    PRE used at line 1‚ê§‚ê§¬ª

[21:01] *** dmol left
[21:01] <[Coke]> r: PRE ;

[21:01] <p6eval> rakudo 964224: OUTPUT¬´===SORRY!===‚ê§Error while compiling block  (source text: "PRE ;"): Error while compiling op call: Error while compiling block : Error while compiling block  (source text: " "): Error while compiling op unless: Can only use get_how on a SixModelObject‚ê§¬ª

[21:01] <[Coke]> masak: ^^ ?

[21:02] *** skids left
[21:09] *** dmol joined
[21:11] <dalek> v5: 7efe338 | (Tobias Leich)++ | lib/Perl6/P5 (2 files):

[21:11] <dalek> v5: support: (loop) BLOCK continue BLOCK

[21:11] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/7efe3383cc

[21:12] *** zby_home_ left
[21:12] <dalek> v5: 934d143 | (Tobias Leich)++ | t/spectest.data:

[21:12] <dalek> v5: we pass cmd/switch.t now; added comments about other test files

[21:12] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/934d1430b7

[21:13] *** cogno joined
[21:14] *** Chillance joined
[21:14] <dalek> v5: 7626362 | (Tobias Leich)++ | TODO_compound_statements.md:

[21:14] <dalek> v5: remove todos, add hints about labels

[21:14] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/7626362e60

[21:15] <cogno> Hi from the maldoror

[21:15] <FROGGS> hi cogno 

[21:16] <FROGGS> r: PRE;

[21:16] <p6eval> rakudo 964224: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared name:‚ê§    PRE used at line 1‚ê§‚ê§¬ª

[21:16] <FROGGS> r: PRE ;

[21:16] <p6eval> rakudo 964224: OUTPUT¬´===SORRY!===‚ê§Error while compiling block  (source text: "PRE ;"): Error while compiling op call: Error while compiling block : Error while compiling block  (source text: " "): Error while compiling op unless: Can only use get_how on a SixModelObject‚ê§¬ª

[21:16] <FROGGS> hmmm

[21:17] <cogno> Is there an equivalent 

[21:17] <cogno> Oops

[21:18] *** LlamaRider joined
[21:19] *** ironcame1 is now known as ironcamel

[21:19] <cogno> is there a perl6 equvalent of the perl5 filetest -X with the caching of the stat result

[21:19] <LlamaRider> FROGGS: How can I help in the v5 effort? I just forked and will have time over the weekend for a first in depth look.

[21:19] <FROGGS> r: say 'filename'.IO.x # dunno about caching

[21:19] <p6eval> rakudo 777644: OUTPUT¬´False‚ê§¬ª

[21:20] <FROGGS> cogno: that was for you --^

[21:21] <FROGGS> LlamaRider: well, grab a failing test files (one that is commented out in spectest.data) and try to implement the missing pieces

[21:21] <FROGGS> LlamaRider: one of the most important things are typeglobs, and stuff like opne(), close()

[21:21] <LlamaRider> FROGGS: Sounds like a plan :) 

[21:22] <FROGGS> :o)

[21:22] <FROGGS> cool

[21:22] <cogno> Thx, too  bad, my question was about caching

[21:22] <[Coke]> cogno: http://perlcabal.org/syn/S32/IO.html#IO%3A%3AFileTests - no mention about caching.

[21:24] * [Coke] notes that there is some mojibake just above the TITLE in http://perlcabal.org/syn/S32/IO.html#IO%3A%3AFileTests

[21:24] <[Coke]> er, http://perlcabal.org/syn/S32/IO.html puts you much closer to the title.

[21:24] <FROGGS> r: PRE say 1 if 2;

[21:24] <p6eval> rakudo 777644: OUTPUT¬´1‚ê§¬ª

[21:24] <[Coke]> cogno: are you trying to satisfy a current coding requirement, or just curious about the spec?

[21:27] <FROGGS> [Coke]: I might have a fix for the 'PRE ;' problem

[21:27] <FROGGS> std: PRE ;

[21:28] <p6eval> std 86b102f: OUTPUT¬´ok 00:00 41m‚ê§¬ª

[21:29] *** PacoAir left
[21:29] <jnthn> 'night, #perl6

[21:30] <FROGGS> night jnthn 

[21:31] *** LlamaRider left
[21:33] <timotimo> here's a tricky one for flattening and such

[21:33] *** cogno left
[21:34] <timotimo> i have a sparse 2dim array, so something like [Any, Any, Any, [Any, Any, Any, True], Any, [True]] or something

[21:34] <timotimo> now i'd like to extend it a bit.

[21:34] <timotimo> so i tried this: @map = [], (map { if $_.defined { Any, $_ } else { $_ } }, @map);

[21:34] *** grondilu joined
[21:35] <timotimo> but that seems to be very strange, and i suspect it does some kind of flattening that i don't expect

[21:35] <timotimo> advice?

[21:38] *** dmol left
[21:38] *** dmol joined
[21:40] *** BigBear joined
[21:41] *** cogno joined
[21:45] *** dmol left
[21:45] *** kurahaupo joined
[21:51] *** cogno left
[21:52] *** grondilu left
[21:53] *** cogno joined
[21:55] *** erkan left
[21:55] *** erkan joined
[21:55] *** erkan left
[21:55] *** erkan joined
[21:58] *** xilo left
[22:04] *** lustlife left
[22:11] *** cogno left
[22:16] <dalek> rakudo/nom: 460c2ad | (Tobias Leich)++ | src/Perl6/Grammar.pm:

[22:16] <dalek> rakudo/nom: add exception for token blorst

[22:16] <dalek> rakudo/nom: 

[22:16] <dalek> rakudo/nom: This will make "PRE ;" not die with a dubious error message.

[22:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/460c2adb1a

[22:28] <dalek> v5: 4787eea | (Tobias Leich)++ | lib/Perl6/P5Actions.pm:

[22:28] <dalek> v5: pull latest changes from rakudo

[22:28] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/4787eea8f7

[22:31] *** frdmn joined
[22:38] *** skids joined
[22:45] *** BigBear left
[22:49] *** berekuk left
[22:51] *** berekuk joined
[22:54] *** Chillance left
[23:00] *** sqirrel left
[23:10] *** berekuk left
[23:11] *** lizmat joined
[23:22] *** cognominal joined
[23:40] *** xilo joined
[23:40] *** lizmat left
