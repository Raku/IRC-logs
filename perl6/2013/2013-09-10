[00:00] *** zwut00 left
[00:00] <skids> there's q「

[00:08] *** cognominal left
[00:09] *** cognominal joined
[00:14] *** Psyche^ left
[00:15] *** prevost joined
[00:17] *** Psyche^ joined
[00:19] <flussence> huh, I was looking for a list of set operators just a while ago too

[00:19] <flussence> yeah, there doesn't seem to be a good list anywhere. I had to look at the rakudo source to figure it out

[00:23] <TimToady> if someone wants to document what we've got, that'd be much appreciated

[00:24] <timotimo> hey TimToady, you're attentive? does "nodal" make sense if the hyper gets applied to an Associative?

[00:24] <timotimo> rather than an Iterable, that is

[00:28] <TimToady> if something is not iterable, hyper makes no sense on it; however, hashes are iterable, not just associative

[00:29] <TimToady> now, race might make sense on non-iterables, as long as there's any kind of divide-and-conquer interface

[00:30] <timotimo> hm. there's a candidate for hyper on Associative in rakudo at least

[00:30] <timotimo> (it blew up because i was recurring into hyper passing along a nodal_p that's supposed to decide wether to treat one element as nodal or not)

[00:44] <dalek> roast: 3593e2d | (David Warring)++ | S05-mass/charsets.t:

[00:44] <dalek> roast: tidies

[00:44] <dalek> roast: review: https://github.com/perl6/roast/commit/3593e2d1c6

[00:53] <dalek> niecza: 51dda4b | coke++ | t/spectest.data:

[00:53] <dalek> niecza: Run tests that pass or are pre-fudged

[00:53] <dalek> niecza: review: https://github.com/sorear/niecza/commit/51dda4b6c1

[00:58] *** pernatiy joined
[01:32] *** kbaker left
[01:38] *** prevost_ joined
[01:39] *** benabik left
[01:43] *** benabik joined
[01:58] *** btyler left
[01:59] *** EvanTeitelman left
[02:05] *** prevost_ left
[02:10] *** BitPuffin joined
[02:11] *** berekuk joined
[02:13] *** berekuk_ left
[02:27] *** araujo left
[02:27] *** araujo joined
[02:27] *** araujo left
[02:27] *** araujo joined
[02:27] *** Bzek left
[02:30] *** Bzek joined
[02:41] *** ghena1986 joined
[02:41] *** ghena1986 left
[03:07] *** thou left
[03:16] *** preflex_ joined
[03:16] *** ChanServ sets mode: +v preflex_

[03:16] *** preflex left
[03:16] *** preflex_ is now known as preflex

[03:16] *** abnorman left
[03:19] *** ssutch left
[03:21] *** pupoque joined
[03:27] <BenGoldberg> rpn: say pi

[03:27] <camelia> rakudo 5a8c53: OUTPUT«3.14159265358979␤»

[03:27] <camelia> ..pugs: OUTPUT«3.141592653589793␤»

[03:27] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«3.1415926535897931␤»

[03:28] <BenGoldberg> rpn: say pi.sin

[03:28] <camelia> rakudo 5a8c53: OUTPUT«1.22460635382238e-16␤»

[03:28] <camelia> ..pugs: OUTPUT«1.2246063538223773e-16␤»

[03:28] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«1.2246063538223773E-16␤»

[03:30] <BenGoldberg> rpn: pi.tan.say

[03:30] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«-1.2246063538223773E-16␤»

[03:30] <camelia> ..pugs: OUTPUT«-1.2246063538223773e-16␤»

[03:30] <camelia> ..rakudo 5a8c53: OUTPUT«-1.22460635382238e-16␤»

[03:31] <BenGoldberg> rpn say pi.sin-pi.tan

[03:31] <BenGoldberg> rpn: say pi.sin-pi.tan

[03:31] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«Unhandled exception: Unable to resolve method sin-pi in type Num␤  at /tmp/YhDHQ8U9Bz line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4583 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4584 (module-CORE @ 576) ␤  at /home…

[03:31] <camelia> ..rakudo 5a8c53: OUTPUT«No such method 'sin-pi' for invocant of type 'Num'␤  in block  at /tmp/U1wW0La7of:1␤␤»

[03:31] <camelia> ..pugs: OUTPUT«*** No such method in class Rat: "&sin-pi"␤    at /tmp/sE4cmjHN6u line 1, column 5 - line 2, column 1␤»

[03:31] <BenGoldberg> rpn: say (pi.sin)-(pi.tan)

[03:31] <camelia> rakudo 5a8c53: OUTPUT«2.44921270764475e-16␤»

[03:31] <camelia> ..pugs: OUTPUT«2.4492127076447545e-16␤»

[03:31] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«2.4492127076447545E-16␤»

[03:32] <BenGoldberg> rpn: say (pi.sin)+(pi.tan)

[03:32] <camelia> rakudo 5a8c53, niecza v24-95-ga6d4c5f, pugs: OUTPUT«0␤»

[03:33] *** raiph left
[03:36] *** raiph joined
[03:37] *** btyler joined
[03:39] *** prevost left
[03:43] *** avuserow joined
[03:46] *** btyler left
[03:58] *** fridim_ left
[04:10] *** xenoterracide left
[04:21] *** xenoterracide joined
[04:27] *** pupoque left
[04:29] <dalek> roast: 9cd0478 | (David Warring)++ | S05-metachars/newline.t:

[04:29] <dalek> roast: unfudged for rakudo.jvm

[04:29] <dalek> roast: review: https://github.com/perl6/roast/commit/9cd0478ccf

[04:38] *** BenGoldberg left
[05:02] *** xenoterracide left
[05:41] *** SamuraiJack joined
[05:46] <cognominal> I discovered elm a few days ago http://elm-lang.org/    I did not know Functional Reactive programming. I wish Perl 6 will support that style.   http://elm-lang.org/edit/examples/Reactive/Position.elm

[05:46] <cognominal> I don't mean elm syntax (haskell like) but the FRP style.

[05:57] *** ssutch joined
[05:58] <cognominal> thru coursera, I will take Odersky course on FRP. I will see how it compares to elm :)

[06:02] *** domidumont joined
[06:06] *** domidumont left
[06:07] *** xinming_ left
[06:07] *** domidumont joined
[06:08] *** xinming joined
[06:09] *** sorear left
[06:11] *** FROGGS joined
[06:11] *** DarthGandalf left
[06:11] *** frdmn left
[06:13] *** sorear joined
[06:15] <dalek> rakudo/nom: 1915fc5 | (Elizabeth Mattijsen)++ | src/core/Setty.pm:

[06:15] <dalek> rakudo/nom: Remove P5 thinko, spotted by BenGoldberg++

[06:15] <dalek> rakudo/nom: 

[06:15] <dalek> rakudo/nom: This reverts commit 437e799c0ff5db7084ce7032fda7663bf8323a84.

[06:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1915fc5efc

[06:16] *** DarthGandalf joined
[06:17] <lizmat> r: my @a=1..5; say "bar" if @a.grep( {say "foo"; $_} )  # BenGoldberg++

[06:17] <camelia> rakudo 5a8c53: OUTPUT«foo␤bar␤»

[06:18] <lizmat> breakfast&

[06:19] *** bbkr_ left
[06:20] <FROGGS> o/

[06:20] *** bbkr_ joined
[06:24] *** domidumont left
[06:32] *** frdmn joined
[06:43] *** denis_boyun joined
[06:45] *** kaleem joined
[06:47] *** aindilis left
[06:47] *** aindilis joined
[06:52] <diakopter> .

[06:52] <yoleaux> 06:21Z <FROGGS> diakopter: Wut? http://irclog.perlgeek.de/moarvm/2013-09-09#i_7563809

[06:53] *** domidumont joined
[07:06] *** dmol joined
[07:08] *** SamuraiJack_ joined
[07:09] *** zakharyas joined
[07:12] *** SamuraiJack left
[07:13] <mathw> o/

[07:13] <FROGGS> hi mathw 

[07:15] <mathw> hi froggs

[07:23] *** cognominal left
[07:25] *** cognominal joined
[07:34] *** donaldh joined
[07:38] *** denis_boyun left
[07:42] *** sidus joined
[07:52] <arnsholt> Aw, crap. Work Java is too old to build NQP/JVM =(

[07:53] <mathw> aaaw

[07:54] *** raiph left
[07:55] *** pupoque joined
[08:13] *** dakkar joined
[08:27] <dalek> rakudo/nom: ddfaa61 | (Elizabeth Mattijsen)++ | src/core/Baggy.pm:

[08:27] <dalek> rakudo/nom: Re-implement (<+)

[08:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ddfaa61737

[08:30] <dalek> roast: 5abb9eb | (Elizabeth Mattijsen)++ | S03-operators/bag.t:

[08:30] <dalek> roast: Unfudge 9, fudge 8 (for now) because of test corruption

[08:30] <dalek> roast: review: https://github.com/perl6/roast/commit/5abb9eb099

[08:35] *** nebuchadnezzar left
[08:35] *** nebuchadnezzar joined
[08:38] *** donaldh left
[08:38] <dalek> Perlito: 1f23d35 | (Flavio S. Glock)++ | / (3 files):

[08:38] <dalek> Perlito: Perlito5 - js - code cleanup

[08:38] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/1f23d3541c

[08:43] *** Mouq left
[08:50] *** dayangkun joined
[09:02] *** daxim joined
[09:05] *** sqirrel joined
[09:05] *** preflex_ joined
[09:05] *** ChanServ sets mode: +v preflex_

[09:11] *** preflex left
[09:11] *** aindilis left
[09:11] *** bbkr_ left
[09:11] *** REPLeffect left
[09:11] *** _ilbot left
[09:11] *** sjohnson left
[09:11] *** Vlavv left
[09:11] *** slavik left
[09:11] *** bruges left
[09:11] *** GlitchMr left
[09:11] *** TimToady left
[09:11] *** odoacre left
[09:11] *** awwaiid left
[09:11] *** BabsSeed left
[09:11] *** alexghacker left
[09:11] *** ribasushi left
[09:11] *** sergot left
[09:11] *** nwc10 left
[09:11] *** lestrrat left
[09:11] *** rom1504 left
[09:11] *** sorear left
[09:11] *** araujo left
[09:11] *** bakedb left
[09:11] *** jercos left
[09:11] *** pecastro left
[09:11] *** mtk left
[09:11] *** PZt left
[09:11] *** Celelibi left
[09:11] *** felher left
[09:11] *** Yappo__________ left
[09:11] *** pjcj left
[09:11] *** avar left
[09:11] *** Hor|zon left
[09:11] *** jtpalmer left
[09:11] *** mls left
[09:11] *** ivan`` left
[09:11] *** krunen_ left
[09:11] *** p5eval left
[09:11] *** jnthn left
[09:11] *** moritz left
[09:11] *** c1sung left
[09:11] *** ssutch left
[09:11] *** Bzek left
[09:11] *** benabik left
[09:11] *** BitPuffin left
[09:11] *** genehack left
[09:11] *** Woodi left
[09:11] *** japhb left
[09:11] *** dalek left
[09:11] *** sunnavy left
[09:11] *** BooK left
[09:11] *** groky left
[09:11] *** crazedpsyc left
[09:11] *** cibs left
[09:12] *** pochi_ joined
[09:14] *** preflex_ is now known as preflex

[09:14] *** pochi left
[09:17] *** ssutch joined
[09:17] *** Bzek joined
[09:17] *** BitPuffin joined
[09:17] *** benabik joined
[09:17] *** genehack joined
[09:17] *** Woodi joined
[09:17] *** japhb joined
[09:17] *** dalek joined
[09:17] *** sunnavy joined
[09:17] *** BooK joined
[09:17] *** groky joined
[09:17] *** crazedpsyc joined
[09:17] *** hitchcock.freenode.net sets mode: +v dalek

[09:17] *** simcop2387 left
[09:17] *** crazedpsyc left
[09:17] *** crazed- joined
[09:19] *** crazed- is now known as crazedpsyc

[09:20] *** aindilis joined
[09:20] *** bbkr_ joined
[09:20] *** sorear joined
[09:20] *** araujo joined
[09:20] *** REPLeffect joined
[09:20] *** rom1504 joined
[09:20] *** lestrrat joined
[09:20] *** nwc10 joined
[09:20] *** sergot joined
[09:20] *** ribasushi joined
[09:20] *** alexghacker joined
[09:20] *** BabsSeed joined
[09:20] *** awwaiid joined
[09:20] *** odoacre joined
[09:20] *** TimToady joined
[09:20] *** GlitchMr joined
[09:20] *** bruges joined
[09:20] *** slavik joined
[09:20] *** Vlavv joined
[09:20] *** sjohnson joined
[09:20] *** _ilbot joined
[09:20] *** mls joined
[09:20] *** jtpalmer joined
[09:20] *** Hor|zon joined
[09:20] *** avar joined
[09:20] *** pjcj joined
[09:20] *** Yappo__________ joined
[09:20] *** felher joined
[09:20] *** Celelibi joined
[09:20] *** PZt joined
[09:20] *** mtk joined
[09:20] *** pecastro joined
[09:20] *** jercos joined
[09:20] *** bakedb joined
[09:20] *** c1sung joined
[09:20] *** moritz joined
[09:20] *** jnthn joined
[09:20] *** p5eval joined
[09:20] *** krunen_ joined
[09:20] *** ivan`` joined
[09:20] *** cibs joined
[09:20] *** sqirrel left
[09:20] *** simcop2387 joined
[09:21] *** simcop2387 left
[09:21] *** simcop2387 joined
[09:24] *** xinming left
[09:25] *** xinming joined
[09:25] *** fhelmberger joined
[09:31] *** qiyong joined
[09:31] <qiyong> does p6 have CPAN or similar thing?

[09:32] <tadzik> somewhat similar thing, yes

[09:32] <tadzik> http://modules.perl6.org/

[09:34] <qiyong> p5/p6 has to use external modules to do things like send mails, right?

[09:36] <FROGGS> qiyong: there is nothing built in AFAIK, yes

[09:36] <qiyong> FROGGS: cpans are written in perl?

[09:37] <FROGGS> qiyong: modules are written in perl

[09:37] <FROGGS> cpan is just a network that makes them available

[09:38] <qiyong> FROGGS: is cpan perl offical? or loossily like sf.net?

[09:38] <FROGGS> qiyong: CPAN is the official module distribution ecosystem for Perl 5

[09:38] <JimmyZ> qiyong: offical sf

[09:39] <qiyong> JimmyZ: ?

[09:39] <JimmyZ> 你好

[09:39] <FROGGS> everyone can register as an author an release modules

[09:39] <qiyong> FROGGS: anyone can upload modules?

[09:40] <JimmyZ> 是的

[09:40] <FROGGS> yes, if the module name is available

[09:40] <FROGGS> but if you want to upload a module Foo that somebody else "owns", you won't be able to do so

[09:40] <qiyong> FROGGS: the same as sf.net?

[09:41] <FROGGS> qiyong: I think CPAN is a bit stricter

[09:41] <qiyong> what if trojans are included?

[09:41] <FROGGS> bad luck

[09:42] <qiyong> does perl have any standard libary/modules to trust?

[09:42] <FROGGS> but there are people who monitor the recently uploaded modules, so there is some sort of moderation

[09:42] <JimmyZ> qiyong: You may want to ask it in #perl5

[09:43] <JimmyZ> or #perl

[09:43] <JimmyZ> or #cpan

[09:44] *** dmol left
[09:47] <qiyong> FROGGS: "use foo"; where foo must come from CPAN or modules.p6

[09:47] <qiyong> perl binary package doesn't ship anything you can 'use'?

[09:47] <moritz> currently rakudo ships two packages, Test and lib

[09:47] <moritz> and R* ships more modules

[09:48] <moritz> and Rakudo Star (short R*) is made by the same people as Rakudo

[09:48] <qiyong> so p6 is different than p5 here

[09:48] <moritz> so if you trust us, you can trust R*

[09:48] <moritz> qiyong: only gradually

[09:48] <qiyong> p5 doesn't include any modules, p6 begin to ship modules

[09:49] <moritz> qiyong: huh? p5 comes with lots of core modules

[09:49] <JimmyZ> at leaest it contains 'use strict'

[09:50] <JimmyZ> strict.pm

[09:50] <FROGGS> Test::Util and many many others

[09:50] <qiyong> moritz: is it strict.pm or a meta package?

[09:50] <FROGGS> err

[09:50] <FROGGS> List::Util

[09:50] <moritz> qiyong: I cannot parse that question

[09:50] <moritz> and I don't know what a "meta package" is either

[09:50] <JimmyZ> s/or//

[09:51] <qiyong> dpkg -L perl | grep pm | wc -l

[09:51] <qiyong> 87

[09:51] <dalek> Perlito: 0f008b0 | (Flavio S. Glock)++ | / (6 files):

[09:51] <dalek> Perlito: Perlito5 - js - fix caller(), typeglob-reference assignment, grep; added minimal Carp module

[09:51] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/0f008b0ce6

[09:51] <moritz> dpkg -L perl-modules | grep pm | wc -l

[09:51] <moritz> 498

[09:51] <FROGGS> qiyong: now you are talking about modules packages by debian

[09:51] <moritz> qiyong: debian packages many core modules in the package 'perl-modules'

[09:52] <moritz> $ corelist /./|grep '\S'|wc -l

[09:52] <moritz> 746

[09:52] <qiyong> moritz: is perl-modules part of perl or CPAN?

[09:52] <moritz> qiyong: perl

[09:52] <FROGGS> (where "perl" is Perl 5)

[09:54] <qiyong> i see, so perl5/6 has always bee shiping core modules

[09:54] <qiyong> been*

[09:54] <FROGGS> yes

[09:55] <dalek> Perlito: 2d0e5ef | (Flavio S. Glock)++ | / (2 files):

[09:55] <dalek> Perlito: Perlito5 - perl5 - typeglob fix

[09:55] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/2d0e5ef7c9

[09:55] <FROGGS> even if it would just be Test.pm and lib.pm for the rakudo Perl 6 compiler release

[09:55] <dalek> Perlito: 61913e4 | (Flavio S. Glock)++ | src5/lib/Perlito5/Carp.pm:

[09:55] <dalek> Perlito: Perlito5 - js - added minimal Carp module

[09:55] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/61913e408f

[09:55] <FROGGS> and about 200 additional modules for the rakudo Star release

[09:58] <qiyong> is p6 faster than p5?

[09:58] <FROGGS> usually not

[09:58] <qiyong> iw p6 compiled like python's .pyc file?

[09:58] <qiyong> p6 is slower? regression?

[09:58] <tadzik> p6 is a languages

[09:58] <tadzik> a language *

[09:58] <FROGGS> I don't know what a .pyc file is, sorry

[09:59] <tadzik> not an implementation

[09:59] <tadzik> .pyc is what .pbc or .pir or .class is, basically

[09:59] <tadzik> a precompiled module

[09:59] <FROGGS> rakudo-perl6 is usually slower as perl5, to say it correct

[09:59] <qiyong> is p6 compiled like java/python byte code?

[09:59] <moritz> qiyong: Rakudo supports precompiling of modules

[09:59] <qiyong> will p6 be faster in future?

[10:00] <FROGGS> faster as it is now or faster as perl 5?

[10:00] <qiyong> moritz: precompiled into elf possible?

[10:00] <qiyong> as fast as p5 at least

[10:00] <tadzik> qiyong: are you operating on an assumption that elf will be faster?

[10:00] <FROGGS> we will see

[10:00] <FROGGS> nobody can tell whether it will outperform perl 5 some day

[10:01] <FROGGS> or not

[10:01] <tadzik> magic 8 ball can

[10:01] <tadzik> it says "Absolutely"

[10:01] <FROGGS> *g*

[10:01] <tadzik> it's settled then

[10:01] <FROGGS> good to know :o)

[10:02] <qiyong> tadzik: elf is only easier to distribute

[10:02] <Ulti> a better goal is to outperform perl5 when using Moose and every other layer of candy people now use when writing Perl5

[10:03] <qiyong> why p6 is implemented as virtual machine?

[10:03] <qiyong> is that the future?

[10:03] <Ulti> its the past

[10:04] <FROGGS> qiyong: and vm-specific bytecode is easier to distribute that elf, since I can run the same bytecode on windows/linux/unix/bsd/mac/android/whereever

[10:04] <FROGGS> lunch &

[10:05] <tadzik> qiyong: because it makes more sense that way

[10:05] <qiyong> FROGGS: platform independancy is the reason?

[10:06] <moritz> not the only one

[10:06] <qiyong> tadzik: such as?

[10:06] <qiyong> moritz: a major one?

[10:06] <moritz> the main reason is that Perl 6 code needs a runtime

[10:06] <moritz> like garbage collector, just-in-time compiler, and lots of other infrastructure

[10:06] <qiyong> why not implement runtime as p5?

[10:06] <moritz> and where do you put that? in a VM!

[10:07] <qiyong> does p5 support JIV?

[10:07] <moritz> qiyong: p5 also has a VM internally, it's just not separated from the compiler and other parts as cleanly as in Perl 6

[10:07] <qiyong> so p6 is going the way java has had

[10:07] <tadzik> and python

[10:07] <tadzik> and perl 5

[10:07] <tadzik> and ruby

[10:07] <tadzik> and basically everything these days

[10:07] <tadzik> it makes more sense for a HLL

[10:07] <qiyong> moritz: since what version? p4 or older?

[10:08] <tadzik> high level language

[10:08] <moritz> qiyong: since version 1 at least

[10:08] <qiyong> so dynamic lanauge implementation needs a vm design

[10:09] <moritz> the lesson is that if a dynamic language doesn't have a designed vm, it has an ad-hoc vm

[10:09] <qiyong> so p6, python has a clean vm

[10:10] <qiyong> p5 has an ad-hoc, possibly ruby too

[10:10] <qiyong> java has clean vm too

[10:11] *** BitPuffin_ joined
[10:13] <qiyong> confirm me?

[10:13] <moritz> confirmed.

[10:13] <qiyong> thanks

[10:14] <qiyong> is vm+runtime design more complex than traditional language's (c, pascal)?

[10:14] <qiyong> or simpler

[10:14] <qiyong> clang is vm based

[10:14] <moritz> no, it's not

[10:14] <moritz> it's based on llvm

[10:15] *** BitPuffin left
[10:15] <moritz> which is much more low-level than "normal" VMs such as java

[10:15] <qiyong> llvm is deferent from vm here?

[10:15] <qiyong> i see

[10:15] <tadzik> llvm is not a VM in terms of a runtime

[10:15] <tadzik> it's an artificial instruction set

[10:15] <moritz> right

[10:15] <tadzik> but it doesn't "run code"

[10:16] <tadzik> in the same way your operating system provides a VM

[10:16] <tadzik> you don't talk to hardware directly, you talk to the OS

[10:16] <qiyong> is it intermidiate code?

[10:16] <tadzik> in that sense, OS gives you a VM to code for

[10:16] <tadzik> what is, llvm coed?

[10:16] <qiyong> is vm big software?

[10:17] <qiyong> is llvm intermidiate code?

[10:17] <tadzik> llvm is intermediate code, yes

[10:17] <tadzik> VMs can be big

[10:17] <tadzik> they usually end up quite big

[10:17] <qiyong> so clang/llvm has nothing new to gcc

[10:17] <tadzik> oh, yes it does

[10:18] <qiyong> so p6 developer have to be familar with vm, right?

[10:18] <tadzik> not really

[10:19] <tadzik> writing code in perl 6 you usually don't have to touch the VM

[10:19] <qiyong> p6 core developers

[10:19] <tadzik> (not directly)

[10:19] <tadzik> Perl 6 is mostly written in Perl 6

[10:19] <qiyong> p6 itself developers

[10:19] <tadzik> unless you go low level, you can usually skip the VM details

[10:19] <tadzik> yes, I'm talking about P6 itself

[10:19] <qiyong> how much percent of the vm code totally?

[10:20] <tadzik> https://github.com/rakudo/rakudo, look at language statistics

[10:20] <tadzik> 76.4% Perl, it says

[10:20] <moritz> qiyong: hard to tell; rakudo has multiple backends, and I'm pretty sure that the JVM has more lines of code than parrot

[10:22] <qiyong> backends are vms?

[10:23] <qiyong> rakudo = front + backend vm?

[10:23] <hoelzro> Rakudo is a Perl 6 compiler that targets multiple VMs

[10:23] <hoelzro> namely, Parrot, the JVM, and MoarVM

[10:23] <hoelzro> (at the moment)

[10:23] <moritz> qiyong: a backend is (code generation for a VM + the VM)

[10:24] <qiyong> (compiler + vm)

[10:24] <qiyong> that's

[10:24] <qiyong> how many p6 compilers?

[10:24] <moritz> compiler = frontend + backend + interactions between them

[10:25] <moritz> 2, currently

[10:25] <tadzik> 2 that we know of :>

[10:25] <moritz> unless you count perlito, which doesn't aim to be feature complete

[10:25] <moritz> then 3

[10:25] <tadzik> and pugs

[10:26] <qiyong> why p6 devleopment is so different from othere (python, ruby), multi compilers, multi vms?

[10:26] <moritz> because p6 is so different

[10:26] *** dayangkun left
[10:26] <moritz> it's so different that there are many areas that haven't previously been explored by compiler writers

[10:27] <moritz> so there are multiple compilers that approach the problem from different angles

[10:28] <qiyong> like *BSDs

[10:28] <qiyong> not sure if it's development split

[10:29] <qiyong> so this chan for using p6 or developing p6?

[10:29] <moritz> both

[10:30] <qiyong> so i can learn vm here?

[10:30] <qiyong> parrot

[10:31] <tadzik> #parrot on irc.perl.org is probably better for that

[10:31] <qiyong> and for compiler go to #rakkuo?

[10:31] <tadzik> no, rakudo development happens here

[10:31] <qiyong> gtg

[10:32] *** qiyong left
[10:32] *** xenoterracide joined
[10:32] *** denis_boyun joined
[10:37] *** stevan_ left
[10:37] *** stevan_ joined
[10:37] <jnthn> man, that lunch was -Ocarbcrash...

[10:51] *** Mouq joined
[10:53] *** lichtkind joined
[10:55] *** Mouq left
[10:58] *** dmol joined
[11:11] *** dakkar left
[11:15] *** bloonix left
[11:15] *** dakkar joined
[11:19] *** thou joined
[11:22] *** ssutch left
[11:31] *** thou left
[11:33] <timotimo> jnthn: in germany there's a frozen pizza you can get that has little noodles on it

[11:34] <daxim> ewww

[11:34] <timotimo> it's super tasty, tbh

[11:35] <colomon> there's a place in my wife's old college town that makes fantastic spaghetti pizzas.

[11:37] *** pernatiy left
[11:37] <colomon> http://www.foodspotting.com/reviews/712765 # there's a white sauce version, too

[11:37] <colomon> just in case your diet didn't have enough carbs

[11:38] *** benabik left
[11:41] <timotimo> i guess "white sauce" means cheese?

[11:42] <daxim> sauce carbonara

[11:43] <timotimo> oh my

[11:45] <timotimo> it's gotta be pretty bad if the sauce name even has "carb" in it

[11:45] *** Woodi left
[11:46] <hoelzro> haha

[11:46] <moritz> makes you carp()

[11:52] *** Woodi joined
[11:59] *** pmurias joined
[12:02] <pmurias> FROGGS: there are people who monitor newly uploaded perl5 modules for trojans?

[12:02] *** xinming left
[12:03] *** xinming joined
[12:03] *** sqirrel joined
[12:05] <lizmat> pmurias: yes, and not only for trojans for that matter  :)

[12:07] <moritz> just for new distributions, or also for new versions of distributions?

[12:08] <lizmat> afaik, all uploads

[12:09] <lizmat> and if I tell you more, I will have to silence you  :-)

[12:09] *** sitaktif left
[12:09] <lizmat> TimToady, colomon: looking for the spec on .KeySet coercers

[12:09] <lizmat> Currently the .KeySet coercer on KeySet objects returns self

[12:10] <lizmat> this caused a hard to chase bug with e.g. (&) if the first parameter was a KeySet

[12:10] <colomon> there is no spec for that as far as I know

[12:10] <colomon> errr… why?

[12:11] <lizmat> my $keybag = @p ?? @p.shift.KeyBag !! KeyBag.new;

[12:11] <lizmat> if the first element was a keybag, than it would use that

[12:11] <lizmat> thus causing the KeyBag being checked to be changed

[12:12] <lizmat> same for KeySet: my $keyset = @p ?? @p.shift.KeySet !! KeySet.new;

[12:12] <lizmat> well, if there is no spec, I can do what I want  :-)

[12:13] <colomon> …. ideally you'd do something sensible.

[12:13] <lizmat> yes,...

[12:13] <lizmat> how does this sound:

[12:13] <lizmat> method KeySet (:$clone) { $clone ?? KeySet.new(self.keys) !! self }

[12:14] <Fatalnix> something sensible

[12:14] <Fatalnix> like destroy all pylons!

[12:14] <colomon> lizmat: I guess I'm still not seeing why?

[12:15] <lizmat> because the $keybag I created, is the result to be, and therefore changes

[12:16] <colomon> Consulting with TimToady on what coercers should do when called on mutable objects would be a Good Idea

[12:16] <colomon> certainly I have always expected them to return self

[12:17] <colomon> You'll notice, for instance, how I handled the case of wanting a different KeyBag in KeyBag.pick

[12:17] *** PZt left
[12:18] <lizmat> yup

[12:18] <timotimo> i was under the impression that cloning would be the default and re-use would be optional if you know what you're doing; shouldn't the named parameter be flipped in that case?

[12:18] <timotimo> or am i conflating this with the use case you had for creating bags etc from hashes temporarily?

[12:19] <lizmat> am not sure...

[12:19] <timotimo> oh huh, method KeySet? i don't think that was what i was thinking about

[12:19] <lizmat> let's see how this works out… it's easy enough to change since it is all internal in the settings anyway

[12:19] <timotimo> carry on, then :)

[12:20] *** pernatiy joined
[12:22] <colomon> lizmat: also, why (&)? are you making KeySet-specific versions of the Set operators?

[12:22] <lizmat> eh, that was in your code /

[12:22] <lizmat> ?

[12:22] <colomon> ?????

[12:23] <lizmat> what do you mean exactly ?

[12:23] <lizmat> which code ?

[12:24] *** sqirrel left
[12:25] <colomon> (&) returns a Set or a Bag.  Never a KeySet or a KeyBag

[12:25] <lizmat> but it returns a Set or Bag!

[12:25] <lizmat> at the end: $keybag.Bag(:view);

[12:25] <lizmat> and: $keyset.Set(:view);

[12:26] <colomon> that would be your code, not mine

[12:26] <lizmat> yes, it is indeed

[12:26] <colomon> I don't even know what :view means

[12:26] <lizmat> I misunderstood your question

[12:27] <lizmat> it's an experiment: at this moment it creates a Bag from a KeyBag with the same underlying Hash

[12:27] <lizmat> so nothing needs to be copied

[12:27] <lizmat> same with Set from KeySet

[12:28] <lizmat> I re-implemented Setty / Baggy using the idea of typed hashes

[12:28] <lizmat> in Setty, the key of the underlying hash is the .WHICH of the key, and the value is the key unchanged

[12:29] <lizmat> in Baggy, the key is also the .WHICH of the key, and the value is a pair with the original key and count as the vaue

[12:29] <lizmat> value

[12:29] <lizmat> that was the only way to get a set unflattend/ unstringified into another set

[12:32] <lizmat> am I making sense ?

[12:33] <colomon> I understand using WHICH.  I don't understand how it relates to the issue at hand at all.

[12:33] *** skids left
[12:33] <lizmat> in the case of (&), we want the keys that exist in all sets/bags, right ?

[12:34] <colomon> right

[12:34] <lizmat> so I take the first of the parameters passed, and turn that into a KeyBag/KeySet to work with

[12:34] <colomon> and that's the jump I don't understand

[12:34] <lizmat> if I use a hash, I would have to use a typed hash

[12:35] <lizmat> and that doesn't work inside the settings (serialization cannot cope with that somehow)

[12:35] <lizmat> therefore I would use a KeyBag (if there were any baggys) or a KeySet (if there were no baggys)

[12:37] *** benabik joined
[12:37] *** thou joined
[12:38] <colomon> why not explicitly create a fresh KeySet / KeyBag for the results, then?

[12:38] <dalek> rakudo/nom: 9b95a42 | (Elizabeth Mattijsen)++ | src/core/ (3 files):

[12:38] <dalek> rakudo/nom: Fix issue with (&) if the first parameter was a KeySet or KeyBag

[12:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9b95a429ba

[12:38] <lizmat> because I use the keys in that KeySet/KeyBag to loop over to see if the exist in the other coerced Sets/Bags

[12:38] <lizmat> it's like the seed I work from

[12:40] <lizmat> https://gist.github.com/lizmat/6508859  the actual code now

[12:41] <lizmat> line 5 sets up the KeyBag to work with, from the first parameter

[12:42] <lizmat> lines 6-11 loop over all other parameters as bags, removing keys from the work keybag that don't exist

[12:43] <lizmat> line 7 turns the work keybag into an immutable bag and returns that

[12:43] <lizmat> similar for sets in 15-19

[12:47] <dalek> roast: 7ff98f4 | (Elizabeth Mattijsen)++ | S03-operators/bag.t:

[12:47] <dalek> roast: Unfudge now passing tests

[12:47] <dalek> roast: review: https://github.com/perl6/roast/commit/7ff98f47f7

[12:50] *** pupoque left
[12:51] *** tonttuperse joined
[12:52] *** tonttuperse left
[12:53] *** kbaker joined
[12:55] <timotimo> .o(i wonder if you should sort the bags by element count and use the smallest one for the loop)

[12:56] <FROGGS> you can even take a rucksack if the element count is small enough

[12:57] <timotimo> in the most extreme of cases, a handbag could even work

[12:57] <timotimo> or a purse

[12:57] <jnthn> Or just stick the stuff in your pocket

[12:58] <lizmat> timotimo: yes, I was considering ordering

[12:58] <lizmat> but then I would have to coerce everything into something Baggy / Setty already

[12:59] <colomon> lizmat: I appreciate that you're trying to make the code efficient, but I'm uncomfortable with adding a bunch of named parameters to the coercers to help that goal.

[12:59] <timotimo> oh, that's right, because the number of elements is only the upper bound of the number of unique elements

[12:59] * colomon 's mind is having an internal war between elegance and optimization

[12:59] <lizmat> those I consider all experimental

[12:59] <lizmat> and can go at any time

[12:59] <lizmat> actually, I think the :view parameter indicates a need for something more general

[13:00] <colomon> much like my mind (can go at any time, it's not, so far as I know, experimental)

[13:00] <jnthn> Well, evolution is kinda a huge experiment... :)

[13:00] <lizmat> rather than coerce things into other things, I would rather see a Baggy "view" on other things

[13:00] <colomon> jnthn: only if there is an experimenter behind it.  ;)

[13:00] <timotimo> haha, i just saw someone take a picture of the lightning talks with a huge tablet, that's so funny looking :D

[13:01] <jnthn> :view args on the coercer feel odd to me, to throw in my 2 sense

[13:01] <lizmat> because for all of these operators, what one really only needs is the appropriate at_key method to call

[13:01] <jnthn> uh, cents...

[13:01] <jnthn> timotimo: Yes, I've never been able to not find taking a photo with a tablet amusing :)

[13:02] <colomon> lizmat: I'm pretty sure I do understand your reasoning now.  ;)

[13:02] <lizmat> if we say, that a coercer on a mutable object should always return a cloned object, that's fine by me

[13:03] <jnthn> lizmat: I( think we start out that way, and maybe in the future we make a cow mechanism...

[13:03] <lizmat> we don't need :clone

[13:03] <colomon> My thought was it should never return a cloned object; getting around that limitation will only take like ten additional characters.

[13:04] <colomon> but I may be wrong about never returning a cloned object.

[13:04] <colomon> I don't think that's an area of the spec we've explored much...

[13:04] <jnthn> hmm

[13:04] <lizmat> in most modern databases, there are things called views

[13:04] <jnthn> r: my @a; say @a.List.WHAT

[13:04] <camelia> rakudo ddfaa6: OUTPUT«No such method 'List' for invocant of type 'Array'␤  in block  at /tmp/FXA26c6MGq:1␤␤»

[13:04] <lizmat> I think even DBIx::Class has them, even if the db doesn't support them

[13:04] <jnthn> meh, we can't just steal that answer :P

[13:05] <colomon> lizmat: I'm actually reminded of the great sequence operator trick of pmichaud++

[13:05] <colomon> we had been struggling mightily to get the sequence operator working up to spec.

[13:05] <colomon> the code was starting to look ludicrous, and it still didn't work.

[13:06] <colomon> and pmichaud was like, give that to me, I can make the code much better.

[13:07] *** Bzek left
[13:07] <colomon> and I was put out by that, because we'd been working hard it on, and it wasn't obvious (to me) how he could improve it.

[13:07] <colomon> and he looked at the code for, I don't know, a day or so.

[13:07] <colomon> and then told TimToady the spec for the sequence operator had to be simplified, because it was too hard to implement.

[13:08] <colomon> and a day or two later, he had a complete implementation of the new sequence operator.

[13:08] <lizmat> hehe...

[13:08] <colomon> which was drastically simpler than the code we had, I should add.

[13:09] <lizmat> why does this feel like the Kobayashi Maru, with pmichaud in the role of JTK

[13:09] *** Bzek joined
[13:09] <lizmat> :-)

[13:09] <FROGGS> hehe

[13:09] <colomon> the spec was a big improvement, too; what it lost in magic it gained in sanity.  it was a win all around.

[13:09] <FROGGS> lizmat++

[13:10] <jnthn> r: say KeySet ~~ Set

[13:10] <camelia> rakudo ddfaa6: OUTPUT«False␤»

[13:10] <jnthn> r: say Set.^mro

[13:10] <camelia> rakudo ddfaa6: OUTPUT«(Set) (Any) (Mu)␤»

[13:10] <lizmat> r: sau KeySet ~~ Setty

[13:10] <jnthn> r: say KeySet.^mro

[13:10] <camelia> rakudo ddfaa6: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/9MXJDESkwl␤Undeclared routine:␤    sau used at line 1. Did you mean '&say'?␤␤»

[13:10] <camelia> rakudo ddfaa6: OUTPUT«(KeySet) (Any) (Mu)␤»

[13:10] <lizmat> r: say KeySet ~~ Setty

[13:11] <camelia> rakudo ddfaa6: OUTPUT«True␤»

[13:11] <lizmat> Setty is the role

[13:11] <jnthn> r: say Setty.at_home

[13:11] <camelia> rakudo ddfaa6: OUTPUT«No such method 'at_home' for invocant of type 'Setty'␤  in block  at /tmp/iwTfVBk1dk:1␤␤»

[13:11] <jnthn> aww!

[13:11] <jnthn> :)

[13:11] <lizmat> KeySet / Set are no longer parent/child

[13:11] <jnthn> ok

[13:11] <jnthn> So simple type stuff doesn't comke into the coercions then

[13:11] <lizmat> like?

[13:11] <jnthn> I mean, .Setty on a KeySet/Set is identity...

[13:12] <jnthn> Well, I mean, @array.List should probably just do self.

[13:12] <lizmat> there is no Setty  :-)

[13:12] <jnthn> As Array ~~ List

[13:12] <lizmat> ah, yes

[13:12] <jnthn> I was checking if there was a similar argument here

[13:12] <lizmat> or maybe not

[13:12] <jnthn> But no, there's not inheritance in it. :)

[13:12] <lizmat> the thing is:: does a coercer return a mutable object or not

[13:13] <jnthn> If you coerce from a mutable type to an immutable one?

[13:13] <jnthn> I'd think it'd better not just return self.

[13:13] <jnthn> Um

[13:13] <lizmat> ok, will remove :clone for now

[13:13] <jnthn> I mean, it'd better not mutate from the point you make it immutable.

[13:13] <colomon> jnthn: right

[13:13] <jnthn> You can do it by always cloning

[13:13] <jnthn> But as I said, we could do a copy-on-write thing too.

[13:14] <jnthn> Sorry if the cow reference was too opaque :)

[13:14] <jnthn> .oO( It's call COW 'cus it helps you cope with mootation... )

[13:14] <lizmat> it wasn't, but I think this is part of a larger discussion

[13:14] <lizmat> with views

[13:14] <jnthn> teaching again &

[13:15] *** PacoAir joined
[13:16] <lizmat> running some errands&

[13:16] <colomon> lizmat: I wouldn't bother changing :clone until some more people weigh in on the mutable / immutable coercers thing.

[13:16] *** PacoAir left
[13:17] *** PacoAir joined
[13:25] *** lowpro30 joined
[13:27] *** denis_boyun left
[13:29] *** lowpro30 left
[13:30] <dalek> rakudo/nom: a954307 | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[13:30] <dalek> rakudo/nom: Add some more :views

[13:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a954307f41

[13:30] <dalek> rakudo/nom: afa2a5c | (Elizabeth Mattijsen)++ | src/core/ (3 files):

[13:30] <dalek> rakudo/nom: Make .KeySet/.KeyBag always create a new object

[13:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/afa2a5cb19

[13:32] <dalek> roast: 97bfc53 | (Elizabeth Mattijsen)++ | S03-operators/bag.t:

[13:32] <dalek> roast: 10 more TODO tests passing

[13:32] <dalek> roast: review: https://github.com/perl6/roast/commit/97bfc53c5f

[13:32] <lizmat> removing the :clone feature was easier  :-)

[13:33] <timotimo> 10 todos passing \o/

[13:33] *** poor_soul joined
[13:34] <poor_soul> hello, #perl6!

[13:34] <timotimo> hi there

[13:35] <poor_soul> i actually got two new question today on zavolaj

[13:36] <poor_soul> 1) do i need to call self.bless inside new

[13:36] <poor_soul> 2) is there a way to bind enums?

[13:36] *** bluescreen10 joined
[13:36] *** nyuszika7h left
[13:36] <timotimo> what does "bind enums" mean? copy them over from some C header?

[13:37] *** nyuszika7h joined
[13:37] <poor_soul> they are defined in a c header of a library

[13:37] <poor_soul> are they not available in the symbols?

[13:37] <timotimo> i'm not sure, but i think not

[13:38] <poor_soul> timotimo: i understand

[13:38] <timotimo> to answer your question about "self.bless", it depends; mostly you'll have some C function that will initialise a struct for you and you can just use that

[13:39] <moritz> and often a BUILD submethod is enough

[13:39] <poor_soul> how do i know if i need to call bless or not?

[13:39] <moritz> poor_soul: if you write a custom method new which constructs an object, you'll have to call self.bless

[13:39] <timotimo> for example the ZMQ message.pm looks like this: class Net::ZMQ::Message is repr('CStruct'); [...] my sub zmq_msg_init(Net::ZMQ::Message --> int) is native('libzmq') { * }; [...] multi submethod BUILD() { my $ret = zmq_msg_init(self); zmq_die() if $ret != 0; }

[13:41] <PerlJam> poor_soul: What C stuff are you interfacing with Perl 6? 

[13:41] <timotimo> libarchive i think

[13:41] <poor_soul> i'm trying to use libarchive, and it has a archive_read_new() which returns a pointer. By what you are saying, i should just return it, is it correct?

[13:42] <PerlJam> ah, nice.

[13:42] <timotimo> yeah, your class will be repr('CPointer') and you can use the return value of archive_read_new as your class IIUC

[13:43] <poor_soul> easy peasy :) thank you

[13:43] *** kaleem left
[13:44] <poor_soul> btw only classes can be declared 'is repr(CPointer)', not roles?

[13:44] <arnsholt> No, not roles

[13:44] <moritz> role are just methods and attributes that are copied into classes, plus a bit of behavior

[13:44] <arnsholt> Roles aren't concrete classes that can be instantiated, so it doesn't really make sense for them to have a REPR

[13:44] <moritz> so it doesn't make sense to give them a representation

[13:44] <poor_soul> but repr(CPointer) is not inherited by a subclass

[13:44] <arnsholt> Yeah

[13:45] <poor_soul> why is that so?

[13:45] <arnsholt> The REPR is a piece of logic that defines how a particular class is laid out in memory

[13:45] * moritz thinks it wouldn't be bad to inherit the REPR

[13:46] <moritz> and in the case of multiple inheritance, it would die if the REPRs of the base classes differ, and you didn't specify one

[13:46] <timotimo> what's the name for the default repr?

[13:46] <poor_soul> if a class inherits one which is REPR, it cannot be used in place of the superclass...

[13:46] <arnsholt> timotimo: P6opaque

[13:46] <timotimo> K

[13:47] <arnsholt> Different REPRs doesn't really affect whether it can be used in place of the superclass or not

[13:47] <arnsholt> The REPR only specifies how attributes are stored and looked up in memory

[13:47] *** sidus left
[13:47] <poor_soul> wouldn't it be better if it inherited the REPR and just be constrained to not having additional attributes?

[13:48] <timotimo> the repr may know about how to handle new attributes

[13:50] <arnsholt> It's pretty much only the CPointer REPR that doesn't support attributes

[13:51] <arnsholt> (There's CArray as well, but that one's not really part of the user-facing API)

[13:52] <poor_soul> you are saying it would be strange if repr(CPointer) was inheritable thanks to this limitation, while the others are not since the REPR cannot be sure of how to place new attributes

[13:55] <arnsholt> You probably don't want to inherit from a class that is CPointer REPRd anyways

[13:55] <pmurias> currently if we have class Foo is repr('CPointer') {...};class Bar is Foo {...}, the repr of Bar is P6opaque?

[13:55] <arnsholt> Pretty sure Bar will be P6opaque, yeah

[13:56] <pmurias> wouldn't it make more sense to inherit the repr type?

[13:56] <arnsholt> For that particular REPR, yeah. But not for REPRs in general I think

[13:57] <arnsholt> But this is probably more of a jnthn-question =)

[13:57] <pmurias> it seems to more of a TimToady-question

[13:58] <arnsholt> Or TimToady, yeah

[13:58] *** jnap joined
[13:58] <poor_soul> star: use NativeCall; class A is repr("CPointer") {}; class B is A {}; say B.REPR

[13:58] <camelia> star 2013.08: OUTPUT«P6opaque␤»

[14:00] *** Ulti left
[14:02] <arnsholt> poor_soul: But back to your original question, https://github.com/arnsholt/Net-ZMQ/blob/master/lib/Net/ZMQ/Socket.pm is an example of a class using the CPointer REPR

[14:03] *** benabik left
[14:04] *** raiph joined
[14:05] <poor_soul> arnsholt: thanks for the link, a more fleshed out example is always useful

[14:05] *** sitaktif joined
[14:07] <poor_soul> so, the only way to get constants from a library is to create a little add-on library in c which imports the constants and has some functions to return them as values, is it ok?

[14:07] <timotimo> parse the header file and generate a p6 module from it?

[14:08] <poor_soul> what if the values change? i would need to rebuild the module

[14:08] <arnsholt> That's one way, or just hard code them in your Perl code: https://github.com/arnsholt/Net-ZMQ/blob/master/lib/Net/ZMQ/Constants.pm

[14:08] <arnsholt> If the values change, you're screwed either way, usually

[14:09] <poor_soul> right, i would have to rebuild either way

[14:10] <jnthn> You'd have to rebuild any C libraries that used the constants too... :)

[14:11] <jnthn> On repr(...) being taken by subclasses, yes, that may make sense

[14:11] <timotimo> you could search for the header file in Build.pm and regenerate the constants file if need be

[14:12] <poor_soul> still, i would need to write a (partial) C header parser, just to get some enums

[14:12] <poor_soul> i think i will go the 'hard code them' way

[14:12] <PerlJam> poor_soul: I'm mildly surprised someone hasn't already done that given Perl6's affinity for grammars :)

[14:13] <jnthn> Plenty of people have mentioned it'd be good to have, though :)

[14:13] <jnthn> I've love to but my todo list is already way too long :)

[14:13] <arnsholt> Parsing C is a pretty gnarly problem

[14:14] <arnsholt> Especially if you want to parse headers, since that means you need to cope with the preprocessor as well

[14:14] <jnthn> aye, it's fun :)

[14:14] <PerlJam> arnsholt: but ... but ... we have Perl 6!!!

[14:14] <jnthn> as in evil :)

[14:14] <timotimo> nativecall doesn't require a compiler to be available, right?

[14:15] * colomon is desperately cleaning the house in anticipation of company for lunch.

[14:15] <pmurias> to run it shouldn't

[14:15] <colomon> as a first pass, just use GCC's preprocessor to handle that part of things.

[14:15] <timotimo> right. otherwise one could use the actual preprocessor to do it

[14:16] <pmurias> aren't constanst usually #define's in C?

[14:16] <pmurias> * constants

[14:16] <timotimo> in this case we're interested in an enum, though

[14:17] <poor_soul> #define's surely don't appear as symbols in libraries

[14:17] <poor_soul> but i thought enums were available

[14:17] <pmurias> parsing C shouldn't be that hard

[14:17] *** ajr joined
[14:18] *** ajr is now known as Guest57385

[14:18] <arnsholt> #defines are used for constants in libraries all over the place

[14:18] *** Guest57385 is now known as ajr_

[14:18] <arnsholt> I'm not sure if C89 has enums

[14:18] <poor_soul> yes, they are used, but this doesn't mean the appear in the .so symbol table

[14:18] <timotimo> C89? that's from when i was born. who seriously still uses that!!!!kkk ;)

[14:18] <poor_soul> *they

[14:19] * colomon is pretty sure C89 does have enums

[14:19] <arnsholt> #defines don't appear in the symbol table, because they're not actually symbols in C (only in the preprocessor)

[14:19] <arnsholt> timotimo: MS C only supports C89 (with occasional pieces of C99), so C89 is kinda important

[14:19] <colomon> timotimo: C89 is from the year I learned C on the job.  ;)

[14:20] * arnsholt decommute &

[14:20] <timotimo> arnsholt: sadly not serious

[14:21] <poor_soul> arnsholt: yeah i know

[14:22] <colomon> timotimo: incidentally, the job that required the C code was writing a DOS interface to a tape punch machine.  

[14:22] *** btyler joined
[14:23] * PerlJam boggles a little bit that people are questioning if C89 had enums

[14:27] *** Mouq joined
[14:28] *** benabik joined
[14:28] <timotimo> tadzik: your lightning talk was good :)

[14:29] <diakopter> PerlJam: I don't see anyone in the backlog "questioning"

[14:29] <diakopter> whether C89 had enums

[14:29] <FROGGS> timotimo: linky?

[14:29] <timotimo> lizmat: also, your "is perl6 perl" talk was good (ISTR having seen it before already)

[14:30] <timotimo> one sec

[14:30] <PerlJam> diakopter: <arnsholt> I'm not sure if C89 has enums

[14:30] <PerlJam> close enough for me :)

[14:30] <timotimo> http://youtu.be/ftGwgEUFgbE?t=42m13s - starts with moritz, continues with tadzik, ends with lizmat

[14:30] <diakopter> that's simply admitting ignorance

[14:30] *** btyler left
[14:31] <diakopter> people aren't allowed to not know things?

[14:31] <timotimo> moritz: your talk was good, too. but you weren't as loud as tadzik ;)

[14:31] *** btyler joined
[14:31] <diakopter> he didn't say he had a reason to doubt they appeared by then, just that he didn't know when they appeared

[14:32] *** Mouq left
[14:32] <lizmat> timotimo: :-)

[14:32] <tadzik> timotimo: thank you :)

[14:33] <timotimo> still waiting for jnthns parallelism talk to be uploaded

[14:33] <timotimo> but i suppose the steady bunch-of-videos-every-day thing is better than all-videos-at-once-half-a-year-later approach

[14:33] *** benabik left
[14:34] <jnthn> I hope the video for my parallelism/conc talk will be decent qualit

[14:34] <jnthn> I can probably promise I wasn't quiet :P

[14:34] <jnthn> .oO( Promise indeed... )

[14:34] <timotimo> :)

[14:35] <timotimo> i'm afraid the sound quality will likely be not terribly good

[14:35] <jnthn> Hopefully no worse than other main room ones, though.

[14:35] <timotimo> during the devops talk, the camera is quite out of focus, so i can't read the slides at all :(

[14:35] <timotimo> the main room is the one where lightning talks were held?

[14:35] <jnthn> camops fail...

[14:35] <jnthn> aye

[14:36] <timotimo> the audio quality there is perfect

[14:36] <jnthn> that's where I gave my parallllelism talk

[14:36] <jnthn> wow, keyboard

[14:36] <timotimo> oh, cool

[14:36] <timotimo> at least your slides have high contrast text, that's a very good prerequisite for good recording quality

[14:37] *** BitPuffin_ left
[14:40] *** fhelmberger left
[14:40] <FROGGS> tadzik++ # entertaining talk!

[14:41] *** bluescreen10 left
[14:42] *** bluescreen10 joined
[14:42] <timotimo> there's that javascript based template stuff that has a dark blue background with a radial gradient and the text is kind of not very big ... that's much harder to read

[14:42] *** bluescreen10 left
[14:42] <timotimo> though i must admit the text on jnthns slides is probably not that much bigger, if at all

[14:43] *** bluescreen10 joined
[14:43] *** PZt joined
[14:45] <timotimo> tadzik: i feel like you should have had a pun in there like "the next step is to get ACT. the step after that is to act!"

[14:46] <tadzik> ah, a wasted opportunity! :)

[14:46] <moritz> :-)

[14:46] <timotimo> but there's no sense crying over every mistake

[14:47] <tadzik> you just keep on trying till you run out of cake

[14:47] <timotimo> i was hoping there'd be some perl6-related replacement for cake

[14:47] <tadzik> funny, that's the first song I learned on the new piano

[14:50] <dalek> rakudo/nom: 63dca5d | (Elizabeth Mattijsen)++ | src/core/Setty.pm:

[14:50] <dalek> rakudo/nom: Fix set union for Bags and KeyBags

[14:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/63dca5d749

[14:51] <dalek> roast: 905d93e | (Elizabeth Mattijsen)++ | S03-operators/bag.t:

[14:51] <dalek> roast: 6 more TODO's passing

[14:51] <dalek> roast: review: https://github.com/perl6/roast/commit/905d93e842

[14:53] *** risou_awy is now known as risou

[15:01] *** SamuraiJack__ joined
[15:01] *** SamuraiJack_ left
[15:06] <dalek> rakudo/nom: 51aa2c8 | (Elizabeth Mattijsen)++ | src/core/Baggy.pm:

[15:06] <dalek> rakudo/nom: Fix problem with set multiplication

[15:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/51aa2c88c7

[15:07] <dalek> roast: 3c5c43c | (Elizabeth Mattijsen)++ | S03-operators/bag.t:

[15:07] <dalek> roast: And another 12 TODO's bite the dust

[15:07] <dalek> roast: review: https://github.com/perl6/roast/commit/3c5c43c3d9

[15:16] *** sidus joined
[15:22] <dalek> roast: 1974651 | (Elizabeth Mattijsen)++ | S03-operators/set.t:

[15:22] <dalek> roast: Two more unfudges

[15:22] <dalek> roast: review: https://github.com/perl6/roast/commit/1974651d61

[15:29] *** kaare_ joined
[15:31] *** dmol left
[15:33] <dalek> Perlito: ce83bf7 | (Flavio S. Glock)++ | / (5 files):

[15:33] <dalek> Perlito: Perlito5 - js - negative-strings; some tests fail

[15:33] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/ce83bf71b7

[15:34] *** slava left
[15:36] *** slava joined
[15:37] *** zakharyas left
[15:37] *** sqirrel joined
[15:38] *** FROGGS left
[15:40] *** sqirrel left
[15:44] *** Bzek left
[15:46] *** kivutar joined
[15:49] <dalek> rakudo/nom: bce4d79 | (Elizabeth Mattijsen)++ | src/core/Setty.pm:

[15:49] <dalek> rakudo/nom: If (-) is chaining, then U+2216 SET MINUS [Sm] (∖) should be also

[15:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bce4d7928b

[15:53] *** FROGGS[mobile] joined
[15:56] *** skids joined
[16:05] *** domidumont left
[16:07] *** bluescreen10 left
[16:07] *** bluescreen10 joined
[16:10] *** bluescreen10 left
[16:11] *** raiph left
[16:11] *** teslos joined
[16:17] *** dmol joined
[16:17] *** prevost joined
[16:18] *** ajr_ left
[16:18] *** ajr joined
[16:19] *** ajr is now known as Guest48443

[16:19] *** Guest48443 is now known as ajr_

[16:19] *** teslos left
[16:26] *** raiph joined
[16:29] *** kaleem joined
[16:32] *** domidumont joined
[16:33] <lizmat> r: my $b=KeyBag.new(<a a a>); say $b (-) <a a a a>

[16:33] <camelia> rakudo bce4d7: OUTPUT«Found negative values for a in Bag␤  in method sink at src/gen/CORE.setting:11557␤  in method BUILDALL at src/gen/CORE.setting:896␤  in method bless at src/gen/CORE.setting:837␤  in method new at src/gen/CORE.setting:822␤  in method new at src/gen/CORE.setting:820␤…

[16:33] <lizmat> fixing this now

[16:34] <timotimo> ~there is the parallelism talk!

[16:34] <timotimo> http://www.youtube.com/watch?v=wkfvPx1vFwI

[16:34] *** kaleem left
[16:34] <timotimo> except that's not the jnthn i remember

[16:35] <dalek> rakudo/nom: 233e8c2 | (Elizabeth Mattijsen)++ | src/core/Setty.pm:

[16:35] <dalek> rakudo/nom: Fixing set complement bug if right hand had more foo than left hand

[16:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/233e8c2328

[16:38] <colomon> more foo?

[16:38] <colomon> oooo, bug indeed.

[16:38] <colomon> lizmat: roast that baby

[16:38] *** jnap left
[16:40] <jnthn> timotimo: um, that doesn't seem to be a link to my talk...

[16:45] * jnthn don't see his in the Twitter feed yet either...

[16:46] <lizmat> r: say set(1, 2, 3) >>+>>  6   # where would I need to look to fix this ?

[16:46] <camelia> rakudo bce4d7: OUTPUT«("1" => 7, "2" => 7, "3" => 7).hash␤»

[16:47] <lizmat> src/core/metaops I presume, but where ?

[16:48] *** Rotwang joined
[16:48] <lizmat> r: say set(1, 2, 3) >>+>> fail # tells me where

[16:48] <camelia> rakudo bce4d7: OUTPUT«No exception handler and no message␤␤current instr.: 'throw' pc 388834 (src/gen/CORE.setting.pir:164584) (src/gen/CORE.setting:10168)␤called from Sub 'sink' pc 424894 (src/gen/CORE.setting.pir:177833) (src/gen/CORE.setting:11557)␤called from Sub 'MAIN' pc 401 (src/…

[16:49] *** jnap joined
[16:50] <lizmat> jnthn: adding extra candidates for Setty/Baggy to multi sub hyper(\op, Associative \a, Associative \b, :$dwim-left, :$dwim-right)  ??

[16:52] <arnsholt> jnthn: Any objections to making NQP/JVM "ExceptionHandling.dieInternal(ThreadContext, String)" into "dieInternal(ThreadContext, String, Object...)" and passing the string and objects through String.format?

[16:54] <lizmat> away for an hour or so&

[16:55] <jnthn> arnsholt: Only concern is if we're passing a %foo somewhere already

[16:55] <jnthn> arnsholt: Could it be done with an overlord?

[16:55] <jnthn> arnsholt: uh. overload!

[16:56] <arnsholt> Oh, right

[16:56] <arnsholt> Adding an overload with that signature is of course the right thing

[16:56] * jnthn remembers a really "fun" bug with Parrot exception throwing where a %hash_var in an error got interpreted as an escape :)

[16:57] <jnthn> ('cus forgot it treated it as a format string :))

[16:57] <arnsholt> Heh. Hilarious, I'm sure =)

[16:58] <jnthn> lizmat: Well, that's the multi sub that does >>...<<, yes

[16:58] <jnthn> r: say Set ~~ Setty

[16:58] <camelia> rakudo bce4d7: OUTPUT«True␤»

[16:58] <jnthn> r: say Set ~~ Associative

[16:58] <camelia> rakudo bce4d7: OUTPUT«True␤»

[16:58] <jnthn> r: say Setty ~~ Associative

[16:58] <camelia> rakudo bce4d7: OUTPUT«True␤»

[16:59] <jnthn> OK, in theory narrowness analysis will work out right too, then.

[17:01] <timotimo> jnthn: the video was renamed after i linked it

[17:01] <jnthn> timotimo: ah...

[17:01] <jnthn> timotimo: Just upload name fail I guess hen.

[17:01] <jnthn> *then

[17:09] *** dakkar left
[17:11] <arnsholt> jnthn: In P6OpaqueREPRData.java, shouldn't the unbox slot numbers be longs rather than ints, if we're being pedantic?

[17:12] <arnsholt> The for loop's loop variable is a long, and we increment an int inside it to number the slots

[17:15] *** pmurias left
[17:19] *** kivutar left
[17:22] *** risou is now known as risou_awy

[17:23] *** ajr_ left
[17:28] *** ssutch joined
[17:30] <[Coke]> n: say "{21697 - 21372} more tests passing today for niecza."

[17:30] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«325 more tests passing today for niecza.␤»

[17:30] <[Coke]> (new test files that were already fudged hadn't been added to spectest.data - more coudl be added with a little more fudging.)

[17:32] <timotimo> jnthn: i sincerely hope your actual recordings are among the batch that's being uploaded at the moment

[17:33] <diakopter> timotimo: how do you know there is a batch uploading?

[17:34] <timotimo> "58 minutes ago", "1 hour ago", "1 hour ago", "2 hours ago", "5 hours ago"

[17:34] <diakopter> oh

[17:34] <timotimo> something's clearly happening

[17:34] <arnsholt> *meep* The JVM inlining stuff is scary

[17:38] <TimToady> timotimo, colomon, lizmat: S13:131 says you can't rely on coercion to give you either a new object or the old object; the only guarantee is that you get an object of the appropriate type, so if you want a guaranteed different mutable object, you'd better clone, then coerce.

[17:38] <synopsebot> Link: http://perlcabal.org/syn/S13.html#line_131

[17:44] <jnthn> arnsholt: I'm pretty sure we'd hit the limit on the number of fields a JVM class can have before we reach 2**31 fields... :P

[17:45] *** rindolf joined
[17:45] <arnsholt> Troo, troo =D

[17:45] <timotimo> aha!

[17:46] *** jnap left
[17:46] <timotimo> there's another video just uploaded with "jonathan worthington" in its title

[17:46] <timotimo> http://www.youtube.com/watch?v=xg8tAv35YFg - maybe for reals this time

[17:47] *** BitPuffin joined
[17:49] <diakopter> timotimo: yes

[17:54] *** denis_boyun joined
[17:58] *** spider-mario joined
[18:02] <arnsholt> jnthn: Actually, can we really properly inline complex types on JVM?

[18:02] *** bluescreen10 joined
[18:03] *** Mouq joined
[18:05] *** daxim left
[18:08] *** Mouq left
[18:12] *** Khisanth joined
[18:14] <TimToady> can you properly inline a 2-element array?  (assuming we already implemented S09's shaped arrays...)

[18:28] *** poor_soul left
[18:38] *** jnap joined
[18:38] *** rindolf left
[18:38] <colomon> TimToady++

[18:39] <dalek> Perlito: 3792772 | (Flavio S. Glock)++ | / (4 files):

[18:39] <dalek> Perlito: Perlito5 - js - negative-strings

[18:39] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/3792772586

[18:41] <arnsholt> TimToady: I'm not even sure if any version of Rakudo handles shaped arrays =)

[18:43] *** xenoterracide left
[18:43] <lizmat> TimToady: so you're saying it is ok for a coerces like KeySet to always create a new object

[18:43] <lizmat> coercer

[18:44] <lizmat> I guess not

[18:44] * lizmat goes about changing code again

[18:48] <colomon> lizmat: he's saying it's okay for .KeySet to always create a new object, but it *isn't* okay for code using .KeySet to assume that it does so.

[18:48] <lizmat> which basically means I need to change the code  :-)

[18:48] <colomon> :)

[18:48] <colomon> I think it's also implying you can *always* assume :view?

[18:48] <skids> (and not that it matters at this point in development, but a coder would likely put a redundant .clone before the coercer, which is less efficient.)

[18:52] <lizmat> colomon: indeed, good point

[18:54] <jnthn> om nom penang nua...

[18:54] <arnsholt> Mmmm, Thai food

[18:54] <jnthn> arnsholt: Kinda..

[18:55] <jnthn> arnsholt: The problem really is how on earth do you get a reference into the middle of an object... 

[18:55] <jnthn> (JVM doesn't support it.)

[18:55] <arnsholt> Yeah, that's what suddenly struck me

[18:57] <timotimo> aaw i was looking forward to hearing the questions of the audience in the talk

[18:57] <timotimo> clearly a full hour talk would have been better :P

[18:57] *** xenoterracide joined
[18:58] <timotimo> but moar will? and moar will run rounds around the jvm in terms of performance :P

[18:58] <timotimo> (at least for executing perl6 code ...)

[18:58] *** jeff_s1 joined
[19:02] <diakopter> timotimo: uh, no

[19:02] <diakopter> where are you getting this idea

[19:02] <diakopter> make sure not to propagate it anywhere

[19:03] <btyler> jnthn: just watched the talk, really exciting stuff! one question that jumped into my mind re channels: is there any way to tell a channel: "stop, I have as much as I can handle right now!" and the channel either buffers incoming data or relays that 'pause' request to the underlying data source

[19:03] <diakopter> unless by "executing perl6 code" you mean "perl6 startup time only"

[19:03] <timotimo> the best perl6 scripts will already be done by the time "startup" is over :P

[19:04] <TimToady> btyler: everything is possible with another layer of indirection :)

[19:05] <timotimo> btyler: i don't quite understand. there's an internal buffer to the channel anyway, i don't think it's synchronous

[19:06] <jnthn> btyler: At the moment a channel is really just a (threadsafe) queue. Sending is non-blocking; it will buffer stuff happily.

[19:06] <btyler> mostly comparing to something like the nodejs streams API, which I've played with a tad. entirely possible that I have the wrong sense of how it works. with nodejs streams, you can stream.pause to signal that you'd really rather not keep consuming data at right this moment

[19:06] <jnthn> btyler: I can imagine that feed operators, if we do those with channels between them, will want some mechanism for managing queue length.

[19:07] <btyler> neat, thanks for the clarification

[19:07] <jnthn> btyler: And then probably that'd be more general.

[19:07] <timotimo> feed operators are going to be more interesting anyway, because for full performance we will want batching

[19:08] *** zwut00 joined
[19:08] <arnsholt> jnthn: So I guess we'll just have to handle inlined aggregates not-inlined-after-all, and just have a normal object member?

[19:08] <jnthn> arnsholt: I think so

[19:09] <dalek> rakudo/nom: a197668 | (Elizabeth Mattijsen)++ | src/core/ (4 files):

[19:09] <dalek> rakudo/nom: Cannot rely on coercer to give a new object, so we need to make one

[19:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a197668907

[19:09] <jnthn> arnsholt: Until the JVM gives us struct-like things like the CLR has.

[19:09] <jnthn> arnsholt: Apparently, it is on the JVM roadmap...though probably years away.

[19:09] * TimToady visualizes a (potential) pair of complete IP stacks between the feed's source and destination...

[19:09] <arnsholt> From what I gather of JVM timelines, I put it at about 10 years out =p

[19:10] *** SamuraiJack__ left
[19:10] <arnsholt> But then I'll try to wrap my brain around how the flattening stuff works and implement that stuff

[19:10] <TimToady> depends on how soon Oracle buys Microsoft...

[19:10] <TimToady> or vice versa

[19:11] <diakopter> augh

[19:13] *** domidumont left
[19:17] <slava> TimToady: one of them buying the other will be funny ... since Ellison hates MS with a passion (stronger than mine).

[19:18] <perigrin> slava: but is (I assume) in a much better position to make an offer 

[19:18] <slava> true

[19:19] <slava> pretty sure if Ellison bought MS, first thing he'd do is throw a chair at Balmer

[19:19] <slava> it's what I would do :D

[19:19] <jnthn> Balmer won't be charing Microsoft for much longer, alas... :)

[19:19] <jnthn> uh, chairing

[19:19] <jnthn> darn, way to ruin the pun...

[19:19] <diakopter> also, charring

[19:19] <perigrin> alas?

[19:20] <jnthn> perigrin: Well, Ellison can't throw a chair at him if he's gone... :P

[19:20] <lizmat> TimToady: if a coercer of a mutable class (such as KeySet) is applied on an immutable class (like Set)

[19:21] <lizmat> I guess it would be wise to *not* use any smart aliasing logic

[19:21] <lizmat> because it would then be very ease for someone to change an immutable Set

[19:21] <perigrin> jnthn: never underestimate the wealth that ellison has ... once he owns microsoft all he has to do is look in their HR database for Ballmer's home address

[19:22] *** raiph left
[19:22] <perigrin> because obviously that is the only thing stopping him now

[19:22] *** teslos joined
[19:22] *** b^_^d joined
[19:23] <TimToady> lizmat: yeah, you really, really don't want to break the immutability invariant, or nearly all optimization becomes impossible

[19:23] <lizmat> ok, just checking  :-)

[19:23] <b^_^d> hey everyone!

[19:24] * TimToady looks around to see if everyone is here...

[19:24] <lizmat> b^_^d: welcome, you stranger from #perl6 on irc.perl.org

[19:24] <diakopter> not me

[19:24] <b^_^d> lizmat: long time! :)

[19:25] <b^_^d> reading lots of interesting stuff in 6guts blog!

[19:26] <PerlJam> It's a shame that moarvm didn't get a name like 6guts instead  ;)

[19:26] * TimToady imagines six impossible GUTs before breakfast...

[19:27] <masak> o/, #perl6

[19:27] <TimToady> \o

[19:28] <lizmat> masak o/

[19:29] *** Bzek joined
[19:38] <lizmat> colomon, TimToady: I'm keeping the :view named parameter for now

[19:39] <lizmat> even though you can argue that the coercer returns something

[19:39] <diakopter> TimToady: how many of those guts does the breakfast fill

[19:39] <lizmat> if I by default return an immutable coercer on a mutable object

[19:39] <lizmat> like $keyset.Set

[19:40] <lizmat> there would be no guarantee that the underling KeySet is not changed, thereby violating the immutability of the object returned by the coercer

[19:40] <diakopter> lizmat: lock it in another thread lololol

[19:43] <lizmat> so inside the settings, .Set and .Bag are always called with :view, because *there* I can be sure the underlying mutable will not change

[19:43] *** yoleaux left
[19:44] *** yoleaux joined
[19:44] *** ChanServ sets mode: +v yoleaux

[19:44] <diakopter> lizmat: I was only half kidding....

[19:44] <lizmat> the other half will come later if that thread unblocks?  :-)

[19:45] <diakopter> no, you send that thread a signal when you're ready to unlock it

[19:48] <diakopter> I'm just imagining a way to use a thread just for locking an object from access by the entire system, not just other threads

[19:49] <diakopter> solution is to have a thread in an event loop that only handles lock/unlock requests, and lock objects manage access

[19:50] *** pupoque joined
[19:50] <dalek> rakudo/nom: 19596ae | (Elizabeth Mattijsen)++ | src/core/Setty.pm:

[19:50] <dalek> rakudo/nom: Some additional :view on .Set coercers

[19:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/19596aeb71

[19:50] <diakopter> via a hash of object addresses... which would need rehashed if the objects move... :)

[19:51] *** Mouq joined
[19:54] *** stevan_ left
[19:55] *** kaare_ left
[19:56] *** Mouq left
[20:07] *** EvanTeitelman joined
[20:09] <dalek> perl6-roast-data: cbb541f | coke++ | / (5 files):

[20:09] <dalek> perl6-roast-data: today (automated commit)

[20:09] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/cbb541fab6

[20:12] *** kivutar joined
[20:15] <arnsholt> jnthn: I think there's a mismatch between the Parrot box_target stuff, which supports an arbitrary number of box_targets (but only one each for int, num and str), and the way things are factored on JVM

[20:15] <arnsholt> jnthn: But my brain is kinda fried now, so I'm going to bed now and I'll try to look into it further on the morrow

[20:16] <jnthn> arnsholt: Mine also...maybe I'll be smarter then too :)

[20:16] <[Coke]> n: say "{27371*.8-21697}

[20:16] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument at /tmp/TXr9UA0tZn line 1:␤------> [32msay[33m⏏[31m "{27371*.8-21697}[0m␤␤Confused at /tmp/TXr9UA0tZn line…

[20:16] <[Coke]> n: say "{27371*.8-21697} tests left to get to 80%"

[20:16] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«199.8 tests left to get to 80%␤»

[20:16] *** jeff_s1 left
[20:17] <[Coke]> r: say "{27371 - 27138} tests for JVM to pass to tie parrot."

[20:17] <camelia> rakudo 19596a: OUTPUT«233 tests for JVM to pass to tie parrot.␤»

[20:19] *** zwut00 left
[20:20] <lizmat> 99.15%

[20:20] <lue> hello world! o/

[20:21] <lizmat> lue /o

[20:21] <[Coke]> getting .VAR working, as noted previously, would be a big step.

[20:24] *** cognominal left
[20:25] *** cognominal joined
[20:27] <lue> IIUC correctly, VAR() gets you the underlying Scalar object, but it's a no-op on any kind of value and and non-scalar variables?

[20:29] <lue> (do the values have to be non-scalar too or is that just unfortunate grammar on S12's part?)

[20:29] <lizmat> r: say my @a.VAR

[20:29] <camelia> rakudo 19596a: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/i5jqa4KXA7␤Two terms in a row␤at /tmp/i5jqa4KXA7:1␤------> [32msay my @a[33m⏏[31m.VAR[0m␤    expecting any of:␤        scoped declarator␤        constraint␤        postfix␤        infix stopper␤        i…

[20:30] <lizmat> r: my @a; say @a.VAR

[20:30] <camelia> rakudo 19596a: OUTPUT«␤»

[20:30] <lizmat> r: my @a; say @a.VAR.WHAT

[20:30] <camelia> rakudo 19596a: OUTPUT«(Array)␤»

[20:30] <lizmat> r: my @a; say @a.VAR.default

[20:30] <camelia> rakudo 19596a: OUTPUT«(Any)␤»

[20:30] <lizmat> r: my @a is default(42); say @a.VAR.default

[20:30] <camelia> rakudo 19596a: OUTPUT«42␤»

[20:31] <lue> .oO(I'm not sure how VAR is ever useful if it can't give you the underlying Scalar of a non-Scalar object.)

[20:31] <lue> r: say 42.VAR.WHAT

[20:31] <camelia> rakudo 19596a: OUTPUT«(Int)␤»

[20:31] <lue> r: say (1,2,3).VAR.WHAT

[20:31] *** jeff_s1 joined
[20:31] <camelia> rakudo 19596a: OUTPUT«(Parcel)␤»

[20:33] *** teslos left
[20:33] <lue> Either that, or VAR's purpose is completely different from what I got out of S12's description.

[20:35] <lue> Oh. /me should read the entire subsection, as opposed to just the part talking about VAR(), before complaining about being confused.

[20:36] <moritz> r: say (my $).VAR

[20:36] <camelia> rakudo 19596a: OUTPUT«Any␤»

[20:36] <moritz> r: say (my $).VAR.WHAT

[20:36] <camelia> rakudo 19596a: OUTPUT«(Scalar)␤»

[20:36] *** zwut00 joined
[20:37] <lue> r: my $xyzzy = 42; say $xyzzy.name;

[20:37] <camelia> rakudo 19596a: OUTPUT«No such method 'name' for invocant of type 'Int'␤  in block  at /tmp/q4V2Ys_hz0:1␤␤»

[20:37] <lue> r: my $xyzzy = 42; say $xyzzy.VAR.name;

[20:37] <camelia> rakudo 19596a: OUTPUT«$xyzzy␤»

[20:37] <lue> r: my $xyzzy = 42; say VAR($xyzzy).name;

[20:37] <camelia> rakudo 19596a: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/oeEwVuIFp8␤Undeclared name:␤    VAR used at line 1␤␤»

[20:37] <lue> known bug?

[20:38] <lizmat> NYI rather, I think

[20:38] *** teslos joined
[20:39] <masak> aye, NYI

[20:46] *** lichtkind left
[20:46] <lizmat> isn't this LHF though ?

[20:47] <lizmat> sub VAR ($something) { $something.VAR }

[20:47] <lizmat> ?

[20:47] <jnthn> \omething I would thing

[20:47] <jnthn> think

[20:47] <jnthn> Otherwise you throw away the origin container

[20:47] * lizmat leaves LHF hanging

[20:48] <lizmat> ah, ok

[20:48] <lizmat> sub VAR (\a) { \a.VAR }

[20:48] <jnthn> but yeah, it's no more involved than tha to make it work

[20:48] <lizmat> sub VAR (\a) { a.VAR }

[20:48] <jnthn> you only \ it on the decl

[20:48] <jnthn> right

[20:48] <jnthn> Exactly that 

[20:48] <jnthn> You wrote it now. My as well commit :P

[20:48] <lizmat> okokok

[20:48] <jnthn> *May 

[20:48] <jnthn> hehe, I'm teasing :)

[20:48] <jnthn> But still happy to have it implemented :))

[20:49] <lizmat> after I spectested my last Baggy change to speed up .pick and .roll for huge bags

[20:50] <jnthn> .oO( I like huge Bags and I cannot lie... )

[20:50] <lizmat> .oO( just look under your eyes )

[20:51] *** Ulti joined
[20:52] <Ulti> is there a doc somewhere the subset of Perl6 NQP covers?

[20:54] <lue> shouldn't it be macro VAR (... ? Or does that not matter?

[20:56] * Ulti found http://en.wikibooks.org/wiki/Parrot_Virtual_Machine/Not_Quite_Perl

[21:01] *** genehack left
[21:02] <dalek> rakudo/nom: 40ea141 | (Elizabeth Mattijsen)++ | src/core/Baggy.pm:

[21:02] <dalek> rakudo/nom: Implement .pick and .roll that don't blow up for large Bags and KeyBags

[21:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/40ea141c94

[21:03] <dalek> roast: cf57597 | (Elizabeth Mattijsen)++ | S02-types/ (2 files):

[21:03] <dalek> roast: Unfudge tests that were previously taking too long

[21:03] <dalek> roast: review: https://github.com/perl6/roast/commit/cf57597281

[21:03] *** genehack joined
[21:05] *** skids left
[21:06] *** bruges_ joined
[21:06] *** teslos left
[21:07] *** denis_boyun left
[21:08] *** bruges left
[21:10] *** spider-mario left
[21:11] *** kbaker left
[21:19] *** riceandbeans joined
[21:19] <riceandbeans> need real quick perl help 

[21:19] <riceandbeans> really simple

[21:20] <riceandbeans> https://metacpan.org/module/Net::Blacklist::Client

[21:20] <riceandbeans> it says new( [ARGS] )

[21:20] <tadzik> wow, yapcrussia is still uploading videos from YE2011

[21:20] <tadzik> riceandbeans: that's not quite a Perl 6 module

[21:20] <riceandbeans> if I wanted to add an argument, how would I do it?

[21:20] <PerlJam> riceandbeans: I'm fairly sure you're in the wrong place.  Try #perl

[21:20] <riceandbeans> tadzik: no, it's not

[21:20] <tadzik> riceandbeans: and this is a Perl 6 channel :)

[21:20] <riceandbeans> all I want to know is how I would put the module in there

[21:20] <riceandbeans> err

[21:20] <riceandbeans> the argument

[21:22] <dalek> rakudo/nom: 252008d | (Elizabeth Mattijsen)++ | src/core/operators.pm:

[21:22] <dalek> rakudo/nom: Temporarily implement VAR()

[21:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/252008d5e6

[21:22] <masak> riceandbeans: first, listen. you're in the wrong place.

[21:22] <masak> riceandbeans: this is #perl6.

[21:22] <dalek> roast: 7975698 | (Elizabeth Mattijsen)++ | S06-traits/is-readonly.t:

[21:22] <dalek> roast: Unfudge the one VAR() test

[21:22] <dalek> roast: review: https://github.com/perl6/roast/commit/7975698260

[21:26] <masak> lizmat++

[21:27] <lizmat> I guess this just about finishes my Set/Bag work

[21:27] <lizmat> there are still a few issues left

[21:27] <lizmat> my %h = bag(<a>)

[21:28] <lizmat> fails because it tries to put a 1 element list (the bag) into the hash

[21:28] <lizmat> r: my %h=bag(<a>)

[21:28] <camelia> rakudo 40ea14: OUTPUT«Odd number of elements found where hash expected␤  in method STORE at src/gen/CORE.setting:8376␤  in block  at /tmp/CZ69zGiHFZ:1␤␤»

[21:28] <lizmat> r: my %h := bag(<a>); say %h  # binding works

[21:28] <camelia> rakudo 40ea14: OUTPUT«bag(a)␤»

[21:28] <lizmat> r: my %h := bag(<a>); say %h <a> # binding works

[21:28] <camelia> rakudo 40ea14: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/ftvjwdHGht␤Undeclared routines:␤    a used at line 1␤    h used at line 1␤␤»

[21:28] <lizmat> r: my %h := bag(<a>); say %h<a> # binding works

[21:28] <camelia> rakudo 40ea14: OUTPUT«1␤»

[21:29] <lizmat> the other thing is that Setty and Baggy are no longer Iterative

[21:29] <lizmat> for the simple reason that making them iterative, breaks the currently specced behaviour

[21:30] <lizmat> there are some tests testing for .iteratior, which no longer work and are now skipped

[21:30] <masak> lizmat: for some reason I find the assignment/binding distinction rhymes with my intuition.

[21:30] <lizmat> with mine as well, but are spectests expecting a different behaviour

[21:31] <lizmat> *there are

[21:31] <masak> I provisionally opine that they are in error.

[21:31] <masak> 'night, #perl6

[21:31] <diakopter> 'nite masak

[21:31] <lizmat> gnight masak 

[21:32] <lizmat> and finally, there are the hyper operators, such as set(1,2,3) >>+>> 3 not yet working

[21:32] <lizmat> not sure how they would work, though

[21:32] <lizmat> in any case, that's the state of things Setty and Baggy right now

[21:33] <lizmat> and on that thought, I bid you all a good night!

[21:33] <lizmat> gnight #perl6!

[21:33] <diakopter> g'nite lizmat

[21:39] *** PacoAir left
[21:40] *** Mouq joined
[21:44] *** Mouq left
[21:49] *** sidus left
[21:53] *** teslos joined
[21:53] <riceandbeans> with cpan does everything stay in /root/.cpan/ ?

[21:53] <jnthn> 'night, #perl6

[22:01] <timotimo> so, a crapton of tests now succeed due to VAR working? :)

[22:06] *** bluescreen10 left
[22:12] *** Rotwang left
[22:12] *** EvanTeitelman left
[22:15] <Ulti> if anyone is on Mac and uses MacPorts you might want to give this the once over https://gist.github.com/MattOates/6516514

[22:18] *** pupoque left
[22:19] *** census joined
[22:19] *** dmol left
[22:20] <Ulti> hmmm fails after building parrot

[22:20] <Ulti> mkdir /opt/local/include/parrot: Operation not permitted at lib/Parrot/Install.pm line 186    appears to have the prefix passed through to the parrot building, maybe its lost suid?

[22:21] * Ulti sleeps

[22:24] *** fridim_ joined
[22:27] <geekosaur> .tell Ulti MacPorts does not build as root and can't write outside the build area

[22:27] <yoleaux> geekosaur: I'll pass your message to Ulti.

[22:32] <riceandbeans> is parrot to perl what yarv is to ruby?

[22:33] <diakopter> riceandbeans: parrot is... 

[22:33] <diakopter> not to perl

[22:36] *** EvanTeitelman joined
[22:57] <sjohnson> *awk* polly want a perl 6 *awk*

[22:57] <TimToady> what he *sed*

[22:57] <sjohnson> :3

[23:03] *** teslos left
[23:07] *** teslos joined
[23:08] *** btyler left
[23:09] *** prevost left
[23:10] <lue> *ack*! I feel there's a pun there, but I can't quite *grep* any of it!

[23:11] * TimToady doesn't *find* that funny

[23:13] <sjohnson> grep funny jokes.txt || echo ':('

[23:14] *** krunen_ left
[23:18] <lue> sjohnson: I *echo* your sentiments. People who put spaces in filenames are terrible people.

[23:18] *** zwut00 left
[23:20] <riceandbeans> shutup before I put a *finger* in your eyeball

[23:22] <lue> .oO(Let's find a *cd* of calming music before this fight escalates and we have to *shutdown*.)

[23:24] *** cognominal left
[23:24] *** cognominal joined
[23:26] <riceandbeans> I need to *locate* the button on the *top* of my terminal to end this session *at* a reasonable *time* and *date* because this is making me want to break the *display*

[23:26] <riceandbeans> done

[23:26] <diakopter> bye :)

[23:26] *** jnap left
[23:27] <lue> Are you sure you wish to *exit* this punning session?

[23:27] <riceandbeans> lue: are you *fsck*ing kidding me?

[23:28] <riceandbeans> it makes me want to *kill* myself

[23:29] <lue> Hey woah! I was just running a simple *[* on whether it was time to stop dragging this on :) ]

[23:30] <riceandbeans> don't you have a job or something?

[23:30] <diakopter> do you? :)

[23:30] <TimToady> *du* you?

[23:31] <lue> I was just trying to have a *nice* time here.

[23:33] <lue> .oO(What *df*erence would it make? Anyone using linux long enough would have committed quite a few commands to memory. I think I'll *curl* into a ball and stop this now.)

[23:34] <TimToady> *yes*

[23:34] * diakopter writes to the wall man more or less

[23:35] <geekosaur> writes *at*, perhaps?

[23:35] <lue> me just now: .oO(wait, there's a yes command...) :D :D :D

[23:36] <TimToady> tee hee

[23:36] <TimToady> look, this is just too easy 'cuz there's so many commands

[23:36] <lue> I was wondering where "no" was, but reading the man page for yes answered that for me.

[23:37] <TimToady> ssh!

[23:37] <lue> .oO(and here I thought I would actually need to *git help* if this went on further.)

[23:37] <TimToady> more or less

[23:38] <lue> This session has taught me a valuable perl of wisdom: there's too much puntential in linux commands.

[23:38] <diakopter> zip your trap until he who sleeps returns

[23:39] *** Vlavv left
[23:39] * TimToady is touched

[23:39] <diakopter> rn<TAB> => rnano

[23:40] <diakopter> git'er done, he splained

[23:41] *** pernatiy left
[23:41] <TimToady> cc señor

[23:45] <lue> I think it's time to clang the bell and end this. Future pun sessions are already vi-ing to overthrow this one.

[23:45] <diakopter> ssh

[23:46] <TimToady> there's an echo in here

[23:46] <diakopter> heh

[23:46] <TimToady> but yeah, I think we should zip it for now

[23:47] *** teslos left
[23:48] *** teslos joined
[23:51] *** Vlavv joined
[23:55] * perigrin needs to find a different place to slocate himself.

[23:56] *** BenGoldberg joined
[23:56] <diakopter> updatedb

