[00:07] *** jnap left
[00:12] *** FROGGS left
[00:12] *** Psyche^_ joined
[00:13] *** arlinius left
[00:13] *** FROGGS joined
[00:16] *** benabik joined
[00:16] *** Psyche^ left
[00:29] *** FROGGS left
[00:38] *** FROGGS joined
[00:46] *** btyler left
[00:47] *** arlinius joined
[00:51] *** benabik left
[00:56] *** arlinius left
[00:58] *** benabik joined
[01:00] *** FROGGS left
[01:08] *** dmol left
[01:08] *** EvanTeitelman joined
[01:10] *** EvanTeitelman left
[01:21] *** jeffreykegler joined
[01:22] *** benabik left
[01:24] *** jeffreykegler left
[01:25] *** arlinius joined
[01:35] *** benabik joined
[01:39] *** btyler joined
[01:47] *** PacoAir left
[01:48] *** abnorman left
[01:59] *** panchiniak_ joined
[02:15] *** panchiniak_ left
[02:16] *** geekosaur left
[02:17] *** geekosaur joined
[02:30] *** Mouq joined
[02:35] *** EvanTeitelman joined
[03:06] *** pernatiy left
[03:08] *** EvanTeitelman left
[03:18] *** berekuk left
[03:23] *** Mouq left
[03:27] *** preflex left
[03:28] *** preflex_ joined
[03:28] *** ChanServ sets mode: +v preflex_

[03:28] *** preflex_ is now known as preflex

[03:37] *** Fatalnix left
[03:37] *** Fatalnix joined
[03:37] *** jeffreykegler joined
[03:41] *** FROGGS joined
[03:48] *** jeffreykegler left
[03:53] *** pecastro_ joined
[03:53] *** FROGGS left
[03:54] *** pecastro left
[03:57] *** BenGoldberg joined
[03:57] *** bloonix left
[03:59] <BenGoldberg> rn: ((),).elems.say

[03:59] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«1␤»

[03:59] <camelia> ..rakudo b55712: OUTPUT«0␤»

[04:02] <BenGoldberg> rn: say ((),) == ()

[04:02] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«False␤»

[04:02] <camelia> ..rakudo b55712: OUTPUT«True␤»

[04:12] *** FROGGS joined
[04:22] *** abnorman joined
[04:41] *** thou left
[04:55] *** btyler left
[04:59] *** gabriel left
[04:59] *** gabriel joined
[05:00] *** avuserow joined
[05:03] *** SamuraiJack__ joined
[05:03] *** kaare_ joined
[05:13] *** FROGGS left
[05:17] *** FROGGS joined
[05:25] <lue> .tell masak please don't do anything mathematically interesting like p6cc2011::t4 again. My mind is mulling it over *again*.

[05:25] <yoleaux> lue: I'll pass your message to masak.

[05:26] <lue> .tell masak :)

[05:26] <yoleaux> lue: I'll pass your message to masak.

[05:32] *** agre joined
[05:51] *** SamuraiJack joined
[05:54] *** SamuraiJack__ left
[06:02] *** abnorman left
[06:21] *** rindolf joined
[06:23] *** BenGoldberg left
[06:24] *** logie left
[06:25] *** logie joined
[06:39] *** iravan_ joined
[06:52] *** logie left
[07:05] <jercos> So say you have a buf8, $foo, is there a clean way to reverse :256[$foo.list]? Obviously one can effectively get the hexdump of the original buf with .base(16), but I don't see a way to create an array out of an int of a given base without manual repeated division of a string, which while functional, is also a tad awkward.

[07:11] <jercos> -> $x is copy {gather repeat {take $x mod 256} while $x div= 256} for example, a practical example of a function that performs the given task.

[07:12] <jercos> though that might be a bit backwards. erm.

[07:14] <jercos> And apparently 4850761783423467784 mod 256 = 264, so I may be misunderstanding the use of mod vs. %

[07:39] *** domidumont joined
[07:40] <masak> morning, #perl6

[07:40] <yoleaux> 05:25Z <lue> masak: please don't do anything mathematically interesting like p6cc2011::t4 again. My mind is mulling it over *again*.

[07:40] <yoleaux> 05:26Z <lue> masak: :)

[07:40] <masak> lue: heh :)

[07:40] <masak> hello from a train! \o/

[07:43] *** domidumont left
[07:44] *** domidumont joined
[08:06] *** iravan_ left
[08:37] *** denis_boyun joined
[08:41] <masak> this somehow rings a bell: http://blog.ircmaxell.com/2013/09/rambling-on-internals.html

[08:42] <masak> the HN discussion is interesting, too: https://news.ycombinator.com/item?id=6341785

[08:51] *** dmol joined
[09:00] *** silentc joined
[09:02] <silentc> execuse me,which language is rakudo written by?

[09:02] <masak> a lot of it is Perl 6.

[09:02] <masak> or a subset-ish of Perl 6, called "Not Quite Perl", NQP.

[09:03] <masak> silentc: some of it is backen-specific, like C on Parrot, or Java on the JVM.

[09:03] <masak> backend*

[09:03] <masak> r: say 4850761783423467784 mod 256

[09:03] <camelia> rakudo b55712: OUTPUT«264␤»

[09:04] <masak> what the flying... o.O

[09:04] <silentc> masak: thanks,i get some hints.

[09:04] * masak submits rakudobug

[09:04] <masak> silentc: I recommend one of jnthn recent talks for more details.

[09:04] <masak> jnthn++'s*

[09:21] <moritz> \o

[09:22] *** silentc left
[09:23] *** Rotwang joined
[09:26] * moritz builds and spectests donaldh++'s pull request for sockets on JVM

[09:27] <moritz> .tell donaldh if you can, please fill out and submit http://www.perlfoundation.org/contributor_license_agreement (it's a prerequisite for getting a rakudo commit bit)

[09:27] <yoleaux> moritz: I'll pass your message to donaldh.

[09:27] *** kivutar joined
[09:39] *** SamuraiJack_ joined
[09:41] <colomon> nr: say 4850761783423467784 mod 256

[09:41] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«8␤»

[09:41] <camelia> ..rakudo b55712: OUTPUT«264␤»

[09:41] <colomon> nr: say 4850761783423467784 % 256

[09:41] <camelia> rakudo b55712, niecza v24-95-ga6d4c5f: OUTPUT«8␤»

[09:42] <jnthn> I was like, I get Rakudo on JVM gets it right. Alas...

[09:42] <jnthn> > say 4850761783423467784 mod 256

[09:42] <jnthn> 520

[09:42] <jnthn> wtf :)

[09:42] <colomon> !!!!!

[09:42] *** SamuraiJack left
[09:42] <jnthn> So something is consistently wrong somewhere...

[09:43] <colomon> so many issues to fix at 5:43 AM...

[09:43] <jnthn> huh

[09:43] <jnthn> There's only one infix:<mod>, defined in Real. There's no Int overload. Which surprises me a little

[09:43] <jnthn> It looks like this:

[09:43] <jnthn> multi sub infix:<mod>(Real $a, Real $b) { $a - ($a.Bridge.Int div $b.Bridge.Int) * $b;

[09:43] <jnthn> }

[09:44] *** xenoterracide left
[09:44] <colomon> nr: say 4850761783423467784 div 256

[09:44] <camelia> rakudo b55712, niecza v24-95-ga6d4c5f: OUTPUT«18948288216497921␤»

[09:44] <colomon> …. that kind of makes things look worse, not better

[09:45] <moritz> jnthn: so adding an int infix:<mod> would help, it seems

[09:45] <colomon> no!

[09:45] <dalek> rakudo/nom: f181354 | tadzik++ | / (3 files):

[09:45] <dalek> rakudo/nom: Add a crude IO::Socket(::INET) port to JVM, add to build

[09:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f18135490c

[09:45] <dalek> rakudo/nom: e485dfc | tadzik++ | src/vm/jvm/core/IO/Socket.pm:

[09:45] <dalek> rakudo/nom: Unbust recv() and read(), a bit

[09:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e485dfc3c7

[09:45] <dalek> rakudo/nom: 13d6f13 | (Donald Hunter)++ | / (6 files):

[09:45] <dalek> rakudo/nom: Merge jvm socket code into main impl and fix bugs

[09:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/13d6f130ca

[09:45] <dalek> rakudo/nom: 9f174c0 | (Donald Hunter)++ | tools/build/NQP_REVISION:

[09:45] <dalek> rakudo/nom: Bump NQP_REVISION to get sockets.

[09:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9f174c010b

[09:45] <dalek> rakudo/nom: 0fb3b20 | moritz++ | / (5 files):

[09:45] <colomon> rn: say (4850761783423467784 div 256) * 256

[09:45] <dalek> rakudo/nom: Merge branch 'donaldh-sockets' of https://github.com/donaldh/rakudo into nom

[09:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0fb3b20310

[09:45] <jnthn> moritz: um, maybe performance wise, but I@m quite sure the Real one should not give the wrong answer ;-)

[09:45] <camelia> rakudo b55712, niecza v24-95-ga6d4c5f: OUTPUT«4850761783423467776␤»

[09:46] <colomon> rn: say 4850761783423467784 - (4850761783423467784 div 256) * 256

[09:46] <camelia> rakudo b55712, niecza v24-95-ga6d4c5f: OUTPUT«8␤»

[09:46] <moritz> jnthn: well, as long as it goes through Num (which bridge does), it's going to give the wrong answer :-/

[09:46] <colomon> moritz: errr, what?

[09:47] <jnthn> rn: say 4850761783423467784 - (4850761783423467784.Bridge.Int div 256.Bridge.Int) * 256

[09:47] <camelia> rakudo b55712, niecza v24-95-ga6d4c5f: OUTPUT«264␤»

[09:47] <jnthn> ;)

[09:48] <colomon> :(

[09:48] <jnthn> So I guess Niecza gets it right by virtue of defining mod differently or having an Int candidate for it...

[09:49] <jnthn> r: say 4850761783423467784.Bridge.WHAT

[09:49] <camelia> rakudo b55712: OUTPUT«(Num)␤»

[09:49] <jnthn> n: say 4850761783423467784.Bridge.WHAT

[09:49] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«Num()␤»

[09:49] <colomon> defines mod differently

[09:49] <jnthn> k

[09:50] *** xenoterracide joined
[09:50] <masak> "differently" is a nice euphemism for it, i guess. :P

[09:50] * jnthn will leave it to the mathematicaler folks than him to work out the desired solution :)

[09:51] <jnthn> masak: It looks to me like it just boils down to floating point precision limitation...

[09:52] <jnthn> But yeah, going via floating point when we have two big int inputs is probably a bad idea ;)

[09:52] * colomon is pondering

[09:53] <colomon> "Dispatches to the infix:<mod> multi most appropriate to the operand types, returning a value of the same type. Not coercive, so fails on differing types."

[09:53] <colomon> so Real.mod is completely wrong

[09:54] *** mtk left
[09:54] <jnthn> .oO( Needs mod-ifications... )

[09:55] <moritz> r: say 4850761783423467784 % 256

[09:55] <camelia> rakudo b55712: OUTPUT«8␤»

[09:56] *** berekuk joined
[09:57] *** mtk joined
[09:58] *** xenoterracide left
[09:59] <colomon> there are only five tests for infix:<mod> in the spec, and rakudo parrot has two of them to-do'd.   :(

[09:59] <colomon> I've got this fix.

[10:01] <moritz> nr: say (-15) mod 8

[10:01] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«1␤»

[10:01] <camelia> ..rakudo b55712: OUTPUT«-7␤»

[10:01] <moritz> nr: say (-15) div 8

[10:02] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«-2␤»

[10:02] <camelia> ..rakudo b55712: OUTPUT«-1␤»

[10:06] *** berekuk left
[10:08] *** berekuk joined
[10:15] <dalek> roast: 2e0bf7c | (Solomon Foster)++ | S03-operators/arith.t:

[10:15] <dalek> roast: Add bigint mod test that Rakudo was failing.

[10:15] <dalek> roast: review: https://github.com/perl6/roast/commit/2e0bf7c863

[10:16] *** donaldh joined
[10:16] *** berekuk left
[10:19] <donaldh> moritz++ for merging the socket work by me and tadzik++

[10:19] <yoleaux> 09:27Z <moritz> donaldh: if you can, please fill out and submit http://www.perlfoundation.org/contributor_license_agreement (it's a prerequisite for getting a rakudo commit bit)

[10:22] <moritz> donaldh: are you aware that the sockets tests are skipped on the JVM?

[10:22] <donaldh> Shouldn't be. I commited a change to the spectests yesterday

[10:22] <donaldh> meant to anywah

[10:23] <moritz> maybe you committed, but didn't push?

[10:24] <donaldh> hmmm

[10:25] <jnthn> ooh, I have an unpushed Rakudo commit from yesterday... :)

[10:25] <dalek> rakudo/nom: aa657cc | jnthn++ | src/Perl6/Grammar.nqp:

[10:25] <dalek> rakudo/nom: Various bits of sig parsing alignment with STD.

[10:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aa657cc9d8

[10:26] <moritz> SKIP Operating system not yet supported # is what I get for every test

[10:26] <donaldh> moritz: what OS ?

[10:27] <moritz> $ ./perl6 -e 'say $*OS'

[10:27] <moritz> Linux

[10:27] <moritz> heh

[10:27] <moritz>     when 'linux' {

[10:27] <colomon> EPUSHESTOFAST

[10:27] <colomon> *TOO

[10:27] <tadzik> oh yes

[10:27] <tadzik> I stumbled upon that too

[10:27] <donaldh> my fix to add Mac OS X must break other OS.

[10:27] <tadzik> I wonder if $*OS should be standarized somehow :)

[10:27] <tadzik> Linux comes straight from JVM land

[10:28] <donaldh> So does Mac OS X

[10:28] <jnthn> It's Windows on Windows.

[10:28] <donaldh> yeah, we're getting a proliferation of OS names :-/

[10:29] <jnthn> We probably want to canonize

[10:29] <jnthn> uh, canonicalize...

[10:30] <moritz> cannibalize

[10:30] <donaldh> Good idea to canonicalize. The parrot names are very specific too, e.g. darwin

[10:31] *** denis_boyun left
[10:31] <jnthn> I wonder if they match Perl 5's $^O...

[10:31] <moritz> wouldn't surprise me

[10:32] <dalek> roast: ac4e4e3 | moritz++ | S32-io/IO-Socket-INET.t:

[10:32] <dalek> roast: run socket tests on rakudo.jvm/linux

[10:32] <dalek> roast: review: https://github.com/perl6/roast/commit/ac4e4e3231

[10:32] <donaldh> moritz++

[10:32] <moritz> iirc in the backlog somebody wanted to compile a list of commonly used OSses/platforms/kernels/whatever

[10:32] <moritz> does anybody know who that was, and if it got anywhere?

[10:33] <donaldh> CLA by postal service. How quaint ;-)

[10:34] <masak> donaldh: IIRC you can fax it, too ;)

[10:34] <colomon> `you can also use pony express

[10:34] <jnthn> Fax? Fax?!

[10:34] <jnthn> Does that still exist? :)

[10:34] <moritz> faksimile

[10:34] <jnthn> I know, we had a machine at home when I was a kid... :)

[10:35] <dalek> rakudo/nom: a13cec9 | (Solomon Foster)++ | src/core/Real.pm:

[10:35] <dalek> rakudo/nom: infix:<mod> should not coerce.

[10:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a13cec987a

[10:35] <moritz> colomon++

[10:36] *** sqirrel joined
[10:36] <masak> fax machines are a 20th century technology based on push-style RPC photocopying. needless to say, this scheme was highly vulnerable to abuse, often only limited by the amount of paper available to the receiver device.

[10:37] <masak> authentication mechanisms were minimal or nonexistent.

[10:37] <moritz> and yet traditional business folk trust them more than email

[10:38] <masak> I guess the physical substrate conveys a feeling of safety for some people.

[10:38] *** sqirrel left
[10:39] <moritz> they should just print their emails :-)

[10:39] <masak> many probably do :/

[10:39] * moritz kind of likes that vim's command for printing stuff is ":hardcopy"

[10:41] *** donaldh left
[10:41] * masak likes the insight that in Git's model, "hard links" are indistinguishable from just making a straight copy to some other file!

[10:42] <moritz> erm, no.

[10:42] <moritz> if you do a hard link, and modify one of them, the other auomagically modifies too

[10:42] <moritz> that doesn't happen in git if you do a copy

[10:43] <masak> oh, I meant in terms of storage.

[10:43] <moritz> behavior is the new storage!

[10:43] <moritz> erm, wait. :-)

[10:43] <bonsaikitten> oh, fax ... that is still mandatory because e.g. email isn't legally binding in many jurisdictions

[10:43] <bonsaikitten> can't cancel a contract by email - can do it by fax

[10:44] <bonsaikitten> (and thus email-to-fax gateways were born. mind exploderation!)

[10:44] <masak> moritz: as in, Git doesn't "understand" the difference between "this is a copied file" and "this is a hard-linked file"

[10:45] <masak> bonsaikitten: email-to-fax. it's the law.

[10:45] <jnthn> I think there's even email to snail-mail gateways these days :)

[10:45] <bonsaikitten> masak: yeah... that one is a bit of a mind twister

[10:46] <bonsaikitten> masak: and ironically many places receive faxes electronically only, so ... aargh. the fax is legally in a quantum superposition of being valid and not!

[10:46] * moritz even has an email-to-email gateway!

[10:47] <bonsaikitten> I do have some amusing ideas for using snail mail, fax and email

[10:47] <bonsaikitten> I wonder how many people I can make upset in a day!

[10:57] <jnthn> nqp: for <a 1> { say(($_ ~~ /<digit>?)<digit>/) }

[10:57] <camelia> nqp: OUTPUT«Unable to parse expression in blockoid; couldn't find final '}' at line 2, near "say(($_ ~~"␤current instr.: 'panic' pc 14693 (src/stage2/gen/NQPHLL.pir:5223) (src/stage2/gen/NQPHLL.nqp:279)␤»

[10:57] <jnthn> nqp: for <a 1> { say(($_ ~~ /<digit>?)<digit>/) } }

[10:57] <camelia> nqp: OUTPUT«Unable to parse expression in blockoid; couldn't find final '}' at line 2, near "say(($_ ~~"␤current instr.: 'panic' pc 14693 (src/stage2/gen/NQPHLL.pir:5223) (src/stage2/gen/NQPHLL.nqp:279)␤»

[10:58] <jnthn> nqp: for <a 1> { say(($_ ~~ /<digit>?/)<digit>) }

[10:58] <camelia> nqp: OUTPUT«␤1␤»

[10:58] <jnthn> nqp: for <a 1> { say(pir::typeof__SP(($_ ~~ /<digit>?/)<digit>)) }

[10:58] <camelia> nqp: OUTPUT«NQPMu␤NQPMatch␤»

[11:09] <colomon> t/spec/S32-io/other.rakudo.parrot                             (Wstat: 0 Tests: 60 Failed: 0)

[11:09] <colomon>   TODO passed:   1-60

[11:09] <colomon> !!

[11:11] <jnthn> I saw that :)

[11:14] *** PacoAir joined
[11:19] *** spider-mario joined
[11:32] *** pmurias joined
[11:33] <dalek> rakudo-js: d9f65fa | (Pawel Murias)++ | bin/process-qregex-tests:

[11:33] <dalek> rakudo-js: bin/process-qregex-tests be able to mangle rx_subrules

[11:33] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/d9f65faeaa

[11:33] <dalek> rakudo-js: 754278e | (Pawel Murias)++ | / (3 files):

[11:33] <dalek> rakudo-js: Pass rx_subrules.

[11:33] <dalek> rakudo-js: 

[11:33] <dalek> rakudo-js: Fix a bug in subrule, \r is now recognized as part of the control cclass.

[11:33] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/754278eb46

[11:33] <masak> rn: knowhow Foo { say "This is user-exposed? Wow." }

[11:33] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤knowhow at /tmp/N_Dxr1pNly line 1:␤------> [32mknowhow Foo [33m⏏[31m{ say "This is user-exposed? Wow." }[0m␤␤Unable to resolve method name in type Any at /tmp/N_Dxr1pNly line 1:␤------> [32mknowhow Foo [33m⏏[31m{ say …

[11:33] <camelia> ..rakudo a13cec: OUTPUT«This is user-exposed? Wow.␤»

[11:33] *** hummeleBop joined
[11:34] <jnthn> std: knowhow Foo { say "This is user-exposed? Wow." }

[11:34] <camelia> std 7c17586: OUTPUT«ok 00:00 43m␤»

[11:35] *** denis_boyun joined
[11:35] *** berekuk joined
[11:36] <tadzik> hrm, wasn't there Devel::Trace in core rakudo?

[11:40] *** berekuk left
[11:45] <tadzik> https://gist.github.com/tadzik/6474908 blocks panda on jvm

[11:45] <tadzik> if you inline indir inside batman, then it works

[11:45] <GlitchMr> rn: say 3 div 2

[11:45] <camelia> rakudo a13cec, niecza v24-95-ga6d4c5f: OUTPUT«1␤»

[11:45] <GlitchMr> rn: say 3.5 div 2.5

[11:46] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«1␤»

[11:46] <camelia> ..rakudo a13cec: OUTPUT«Cannot call 'infix:<div>'; none of these signatures match:␤:(Int:D \a, Int:D \b)␤:(int $a, int $b)␤  in sub infix:<div> at src/gen/CORE.setting:3663␤  in block  at /tmp/mm8LG4nhQf:1␤␤»

[11:46] <GlitchMr> rn: say 3.5 mod 2.5

[11:46] <camelia> rakudo a13cec: OUTPUT«Cannot call 'infix:<div>'; none of these signatures match:␤:(Int:D \a, Int:D \b)␤:(int $a, int $b)␤  in sub infix:<div> at src/gen/CORE.setting:3663␤  in sub infix:<mod> at src/gen/CORE.setting:3873␤  in block  at /tmp/wGMi9cgyhL:1␤␤»

[11:46] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«1␤»

[11:47] <GlitchMr> n: say 3.7 mod 2.3

[11:47] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«1␤»

[11:47] <GlitchMr> n: say 3.7 - (3.7 mod 2.3) * 2.3

[11:47] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«1.4␤»

[11:51] *** berekuk joined
[11:56] *** pernatiy joined
[12:02] *** pernatiy left
[12:05] <colomon> n: say 3.7 - (3.7 div 2.3) * 2.3

[12:05] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«1.4␤»

[12:05] <colomon> n: say 3.7 - (3.7 / 2.3) * 2.3

[12:05] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«0␤»

[12:07] *** isBEKaml joined
[12:17] <colomon> n: say 3.7 - (3.7 / 2.3).floor * 2.3

[12:17] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«1.4␤»

[12:24] *** pernatiy joined
[12:29] *** arlinius left
[12:30] *** isBEKaml left
[12:36] <pmurias> jnthn: why is nqp build by concatenating stuff into huge file before compiling?

[12:37] <jnthn> pmurias: typically either 'cus we want the things in there in the same lexical scope, or to keep the number of modules to load down.

[12:37] <jnthn> pmurias: Splitting it into files just makes development/finding stuff a little easier.

[12:45] *** SamuraiJack__ joined
[12:47] <GlitchMr> prn: say [\+](1..*)[^15]

[12:47] <camelia> pugs: OUTPUT«(timeout)»

[12:47] <camelia> ..rakudo a13cec, niecza v24-95-ga6d4c5f: OUTPUT«1 3 6 10 15 21 28 36 45 55 66 78 91 105 120␤»

[12:48] <GlitchMr> prn: say [+] [\+](1..*)[^15]

[12:48] *** SamuraiJack_ left
[12:48] <camelia> pugs: OUTPUT«(timeout)»

[12:48] <camelia> ..rakudo a13cec, niecza v24-95-ga6d4c5f: OUTPUT«680␤»

[12:57] *** denis_boyun left
[13:08] <GlitchMr> prn: multi maximum(*@[]) { die "maximum of empty list" }; multi maximum(*@[$x]) { $x }; multi maximum(*@[$x, $y]) { $x after $y ?? $x !! $y }; multi maximum(*@array) { reduce &maximum, @array }; say maximum <c e d a b>

[13:08] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Variable $x is not predeclared at /tmp/lJnODSto1a line 1:␤------> [32m empty list" }; multi maximum(*@[$x]) { [33m⏏[31m$x }; multi maximum(*@[$x, $y]) { $x aft[0m␤␤Variable $x is not predeclared at /tmp/lJnODSto1a line 1…

[13:08] <camelia> ..rakudo a13cec: OUTPUT«e␤»

[13:08] <camelia> ..pugs: OUTPUT«*** ␤    Unexpected "[])"␤    expecting parameter name␤    at /tmp/z_HazhLHV8 line 1, column 17␤»

[13:16] *** SamuraiJack joined
[13:17] *** berekuk left
[13:18] *** btyler joined
[13:20] *** SamuraiJack__ left
[13:27] *** berekuk joined
[13:30] *** arlinius joined
[13:35] *** agre left
[13:37] *** rindolf left
[13:43] *** domidumont left
[13:55] *** abnorman joined
[14:05] *** abnorman left
[14:32] *** rindolf joined
[14:46] *** domidumont joined
[15:02] *** agre joined
[15:08] <timotimo> japhb__: ribasushi linked me to this perl5 module https://metacpan.org/module/Dumbbench::Instance::Cmd#SYNOPSIS which is apparently pretty darn good at getting precise measurements with dumbbench even from perl6 tasks; do you think we can plug it into perl6-bench? timeall already is a perl5 script anyway

[15:25] *** zakharyas joined
[15:28] *** sqirrel joined
[15:38] *** domidumont left
[15:39] *** xinming_ joined
[15:43] *** xinming left
[15:45] *** arlinius left
[15:47] *** panchiniak_ joined
[15:47] * TimToady kinda wishes people wouldn't just ignore everything he's said about the $*OS, like the fact that it is in the same category as .length and should not exist...

[15:48] <TimToady> s/,/ variable,/

[15:55] <FROGGS> TimToady: somebody should give you a commit bit :P

[15:57] <timotimo> if $*OS is gone, how do you even ...

[15:57] <FROGGS> I didn't remove/change it yet, I'd first want to know which module breaks

[16:03] *** domidumont joined
[16:06] *** ajr joined
[16:06] *** ajr is now known as Guest34070

[16:07] *** Guest34070 is now known as ajr_

[16:13] *** kaare__ joined
[16:16] *** arlinius joined
[16:16] *** kaare_ left
[16:16] <dalek> rakudo-js: b3f5bdf | (Pawel Murias)++ | src/QAST/Compiler/JavaScript.nqp:

[16:16] <dalek> rakudo-js: Fix various things needed to compile NQP::Grammar.

[16:16] <dalek> rakudo-js: 

[16:16] <dalek> rakudo-js: Expand list of reserved javascript identifiers.

[16:16] <dalek> rakudo-js: Mangle much more characters.

[16:16] <dalek> rakudo-js: Implement the pass anchor.

[16:16] <dalek> rakudo-js: Implement the dba rxsubtype.

[16:16] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/b3f5bdffec

[16:21] *** pecastro joined
[16:22] *** pecastro_ left
[16:30] <pmurias> TimToady: we need to decide what info is stored in $*DISTRO? is it supposed to be a string name or an object?

[16:34] <FROGGS> pmurias: an object

[16:35] <FROGGS> pmurias: see https://ethercalc.org/wrwsbhvuim as a first sketch

[16:35] *** panchiniak_ left
[16:42] <moritz> http://www.wolframalpha.com/input/?i=word+frequency+of+weekend # I didn't know it was such a recent invention

[16:47] <huf> maybe they just had sundays before that?

[16:48] <huf> or perhaps it was the week that never ends, yes it goes on and on my friend

[16:49] <huf> (some people started working not knowing what it was, and they'll continue working just because .... )

[16:52] <pmurias> FROGGS: the vm and kernel will be attributes of $*DISTRO?

[16:52] <pmurias> FROGGS: like $*DISTRO.kernel and $*DISTRO.vm?

[17:04] <pmurias> FROGGS: if so seems resonable to me

[17:10] <pmurias> NQP::Grammar compiled to javascript parses "nqp::say(1)" ;)

[17:11] <timotimo> neato :)

[17:15] *** sqirrel left
[17:15] *** agre left
[17:22] <moritz> \o/

[17:25] *** sizz joined
[17:26] *** agre joined
[17:28] <dalek> rakudo-js: 0581f67 | (Pawel Murias)++ | runtime/ctx.js:

[17:28] <dalek> rakudo-js: If we don't have any registered CATCH blocks print the exception message and exit.

[17:28] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/0581f67fca

[17:28] <dalek> rakudo-js: bddb40a | (Pawel Murias)++ | runtime.js:

[17:28] <dalek> rakudo-js: Until we properly wrap arrays insert a hack into push.

[17:28] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/bddb40ad72

[17:28] <dalek> rakudo-js: 41ec339 | (Pawel Murias)++ | runtime.js:

[17:28] <dalek> rakudo-js: Stub serialization ops untill we implement them.

[17:28] <dalek> rakudo-js: 

[17:28] <dalek> rakudo-js: (so we can attempt to compile NQP::Grammar to javascript)

[17:28] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/41ec339166

[17:29] <dalek> rakudo-js: d4de0dd | (Pawel Murias)++ | runtime.js:

[17:29] <dalek> rakudo-js: Fix small bug.

[17:29] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/d4de0ddaa7

[17:29] <dalek> rakudo-js: 70b2530 | (Pawel Murias)++ | / (3 files):

[17:29] <dalek> rakudo-js: Fix NQPCursor.dump. Pass test 80. Add passing test 79 into run_tests.

[17:29] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/70b2530df2

[17:31] <dagurval> r: my int $a = 0; $a++

[17:31] <camelia> rakudo a13cec: OUTPUT«Cannot modify an immutable value␤  in sub postfix:<++> at src/gen/CORE.setting:4001␤  in sub postfix:<++> at src/gen/CORE.setting:2215␤  in block  at /tmp/zjm17BHvmp:1␤␤»

[17:31] <dagurval> should this be possible?

[17:31] <dagurval> spec doesn't say much about working with sized ints

[17:32] <timotimo> i think it's specced to work

[17:33] <FROGGS> pmurias: I thought $*KERNEL, $*DISTRO and $*VM are top-level things

[17:35] *** panchiniak_ joined
[17:45] <GlitchMr> rn: say ((1, 2)..(3, 4)).bounds.perl

[17:46] <camelia> rakudo a13cec: OUTPUT«(2, $(3, 4))␤»

[17:46] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«($(1, 2), $(3, 4))␤»

[17:46] <GlitchMr> I think the change at https://github.com/rakudo/rakudo/commit/5d09997669b49a4210c51a0810025b03d37a3d2a is buggy

[17:46] <GlitchMr> I don't think it should modify leftside during construction.

[17:48] <pmurias> jnthn: what is PIRT::Ops.node used for?

[17:51] <GlitchMr> rn: 42.delete(24)

[17:51] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«Unhandled exception: Unable to resolve method delete in type Int␤  at /tmp/w3iT6ummWw line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4583 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4584 (module-CORE @ 576) ␤  at /home…

[17:51] <camelia> ..rakudo a13cec: OUTPUT«Invocant requires a type object, but an object instance was passed␤  in method delete at src/gen/CORE.setting:1447␤  in block  at /tmp/mRCekYbu4x:1␤␤»

[17:52] <GlitchMr> wow, this error message surprised me.

[17:52] <timotimo> it seems like it tries to autovivify a hash or something?

[17:52] <GlitchMr> I rather expected something like "will never work argument types" or something.

[17:53] <GlitchMr> But this is more accurate.

[17:53] <GlitchMr> with argument*

[17:53] <timotimo> "will never work with argument types" cannot be done at compile-time for method calls afaict

[17:54] <GlitchMr> Well, ok, "none of these signatures match".

[17:55] *** fridim_ joined
[17:55] <GlitchMr> But wow, I didn't knew Perl 6 does that check compile time.

[17:55] <GlitchMr> (when possible, that is)

[17:55] <timotimo> yeah it does, it's part of the optimizer

[17:56] <timotimo> it tries to compile-time dispatch to one candidate if possible, but if none of the candidates can ever match, it will complain

[17:56] *** FROGGS left
[18:00] *** panchiniak_ left
[18:02] <GlitchMr> https://github.com/rakudo/rakudo/commit/bb2d2e2108926632db9a7c1c5e9401ba27bfb9af

[18:02] <GlitchMr> Any?

[18:02] <GlitchMr> Why Any?

[18:02] <GlitchMr> Why not Int?

[18:04] <GlitchMr> And seriously, what's wrong with old behavior ("Cannot get character of empty string")?

[18:05] <GlitchMr> Still, it's better than Perl 5 behavior, where ord "" is 0 (perhaps because C strings internals)?

[18:06] <GlitchMr> (by the way, it seems that .charCodeAt in JavaScript returns NaN in this case, Python throws exception, Ruby throws exception...

[18:09] <GlitchMr> )

[18:15] <pmurias> isn't unspecced behavior assumed to be the same as in Perl 5?

[18:16] *** FROGGS joined
[18:25] <pmurias> failing somehow (like with an exception) seems saner then failing silently

[18:27] <GlitchMr> Well, previous behavior was failing.

[18:27] <GlitchMr> Now it returns Any for some reason.

[18:27] <GlitchMr> I would rather expect Int if anything.

[18:28] *** zakharyas left
[18:30] <lue> hello! o/

[18:39] <colomon> Int would indeed make more sense than Any

[18:40] *** rindolf left
[18:41] *** bropl joined
[18:47] *** agre_ joined
[18:49] *** hummeleBop left
[18:50] *** domidumont left
[18:50] *** agre left
[18:50] *** denis_boyun joined
[18:52] *** xinming_ left
[18:53] *** xinming joined
[18:57] <bropl> hi everyone

[18:57] <timotimo> good day bropl 

[18:57] <bropl> i'm new to perl6

[18:58] <bropl> could i get an answer here?

[18:58] <timotimo> sure, go ahead and ask :)

[18:58] <bropl> i have this code   $_ = '1 23 456 78.9'; say .Str for m:g/(\d+)/;

[18:58] <bropl> and it works

[18:58] <bropl> but if i try to use the ~~ operator

[18:59] <diakopter> r: $_ = '1 23 456 78.9'; say .Str for m:g/(\d+)/;

[18:59] <camelia> rakudo a13cec: OUTPUT«1␤23␤456␤78␤9␤»

[18:59] <bropl> it returns a different thing

[18:59] <diakopter> r: $_ = '1 23 456 78.9'; say .Str for ($_ ~~ m:g/(\d+)/);

[18:59] <camelia> rakudo a13cec: OUTPUT«False␤»

[18:59] <diakopter> r: $_ = '1 23 456 78.9'; say .Str for [($_ ~~ m:g/(\d+)/)];

[18:59] <tadzik> ...huh

[18:59] <camelia> rakudo a13cec: OUTPUT«False␤»

[18:59] <bropl> do you know why?

[18:59] <diakopter> r: $_ = '1 23 456 78.9'; say .Str for [list ($_ ~~ m:g/(\d+)/)];

[18:59] <camelia> rakudo a13cec: OUTPUT«False␤»

[19:00] <flussence> r: $_ = '1 23 456 78.9'; say .Str for ($_ ~~ :g/(\d+)/);

[19:00] <camelia> rakudo a13cec: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/N5omn0PMzP␤Bogus statement␤at /tmp/N5omn0PMzP:1␤------> [32m3 456 78.9'; say .Str for ($_ ~~ :g/(\d+[33m⏏[31m)/);[0m␤    expecting any of:␤        argument list␤        postfix␤        infix stopper␤    …

[19:00] <flussence> r: $_ = '1 23 456 78.9'; say .Str for ($_ ~~ rx:g/(\d+)/);

[19:00] <camelia> rakudo a13cec: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/rzbwSa0mMb␤Adverb g not allowed on rx␤at /tmp/rzbwSa0mMb:1␤------> [32m6 78.9'; say .Str for ($_ ~~ rx:g/(\d+)/[33m⏏[31m);[0m␤»

[19:00] <tadzik>  r: my $a = '1 23 456 78.9'; say .Str for ($a ~~ m:g/(\d+)/);

[19:00] <camelia> rakudo a13cec: OUTPUT«False␤»

[19:00] * timotimo is having a hard time following all the code

[19:00] <tadzik>  r: my $a = '1 23 456 78.9'; say .perl for ($a ~~ m:g/(\d+)/);

[19:00] <camelia> rakudo a13cec: OUTPUT«Bool::False␤»

[19:00] <diakopter> r: $_ = '1 23 456 78.9'; say .Str for [($_ ~~ m:g/(\d+)/).list];

[19:00] <camelia> rakudo a13cec: OUTPUT«False␤»

[19:01] <diakopter> r: $_ = '1 23 456 78.9'; say .Str for [say $_; ($_ ~~ m:g/(\d+)/).list];

[19:01] <camelia> rakudo a13cec: OUTPUT«1 23 456 78.9␤False␤»

[19:01] <tadzik> r: my $a = '1 23 456 78.9'; for $a ~~ m:g/(\d+)/ { say .perl }

[19:01] <camelia> rakudo a13cec: OUTPUT«Bool::False␤»

[19:01] <timotimo> bropl: this may not be what you're hoping for, but i think the comb method on strings could be quite helpful to you :)

[19:01] <tadzik> bropl: ...clearly, we don't know why :P

[19:01] <timotimo> r: .say for '1 23 456 78.9'.comb(/d+/)

[19:01] <camelia> rakudo a13cec:  ( no output )

[19:01] <tadzik> n: my $a = '1 23 456 78.9'; for $a ~~ m:g/(\d+)/ { say .perl }

[19:01] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Regex modifier g not yet implemented at /tmp/y51xzHPlOc line 1:␤------> [32mmy $a = '1 23 456 78.9'; for $a ~~ m:g[33m⏏[31m/(\d+)/ { say .perl }[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CO…

[19:01] <timotimo> er ...

[19:02] <timotimo> r: .say for '1 23 456 78.9'.comb(/\d+/)

[19:02] <camelia> rakudo a13cec: OUTPUT«1␤23␤456␤78␤9␤»

[19:02] <bropl> yeah, as you could guess, it was just a reduced test case for a larger codebase

[19:02] <bropl> ill read on comb

[19:02] <flussence> S03:3614

[19:02] <synopsebot> Link: http://perlcabal.org/syn/S03.html#line_3614

[19:02] <timotimo> comb can also give you full-blown match objects if you add :match at the end

[19:02] <flussence> ~~ is specced to return boolean things it looksl ike

[19:02] <diakopter> bropl: larger codebase? p_P

[19:02] <diakopter> o_O

[19:03] <diakopter> there's a perl6 codebase?

[19:03] <bropl> meaning a longer script

[19:03] <tadzik> a perl 6 darkpan. I told you

[19:03] <timotimo> more than one line ;)

[19:03] <diakopter> tadzik: the pan is too dark for me

[19:04] * diakopter tries to figure out how I roke this codebase.

[19:04] <diakopter> broke, even.

[19:05] *** sqirrel joined
[19:05] <bropl> so /(d+)/ is a Callable, not a Match? im confused

[19:06] *** araujo left
[19:06] <timotimo> r: say /foo/.WHAT

[19:06] <camelia> rakudo a13cec: OUTPUT«(Regex)␤»

[19:07] <FROGGS> r: say /(d+)/.WHAT

[19:07] *** araujo joined
[19:07] <camelia> rakudo a13cec: OUTPUT«(Regex)␤»

[19:07] <flussence> oh wait, I was looking at Match

[19:07] <flussence> S03:3639

[19:07] <synopsebot> Link: http://perlcabal.org/syn/S03.html#line_3639

[19:07] <FROGGS> bropl: why do you think it is a callable?

[19:07] <bropl> linked line was "Any       Callable:($)  item sub truth          X($_)"

[19:08] <bropl> ok now im ok

[19:08] <bropl> gonna read comb

[19:13] *** bropl is now known as lucak3

[19:13] *** lucak3 is now known as bropl

[19:13] *** bropl left
[19:15] <timotimo> o_O

[19:19] <lue> r: my $a = '1 23 456 78.9'; say $a.split(" ").perl

[19:19] <camelia> rakudo a13cec: OUTPUT«("1", "23", "456", "78.9").list␤»

[19:20] <lue> (doesn't break 78.9)

[19:23] <dalek> rakudo/nom: 799989a | (Elizabeth Mattijsen)++ | src/core/Cool.pm:

[19:23] <dalek> rakudo/nom: Make .ord return Int, as pointed out by GlitchMr++

[19:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/799989acd9

[19:25] <pmurias> jnthn: what does MARKER and MARKED do in NQP::Grammar?

[19:34] *** abnorman joined
[19:49] <GlitchMr> <dalek> rakudo/nom: Make .ord return Int, as pointed out by GlitchMr++

[19:49] <GlitchMr> thanks

[19:49] <GlitchMr> Added to Perl 6 changes article

[19:49] <GlitchMr> Also, I have DarkPAN on my computer.

[19:49] <GlitchMr> In shell history.

[19:49] <GlitchMr> I actually was using perl6 -e

[19:50] <GlitchMr> Or even perl6 -ne

[19:50] <GlitchMr> By the way, why perl6 -ne'#blah' is valid, but perl6 -ne '#blah' is not

[19:51] <dalek> rakudo/nom: 06622f7 | (Elizabeth Mattijsen)++ | src/core/ (4 files):

[19:51] <dalek> rakudo/nom: Make roles Baggy / Setty (almost) completely self-contained

[19:51] <dalek> rakudo/nom: 

[19:51] <dalek> rakudo/nom: Apparently, you cannot have a BUILD in the role, as it doesn't see its

[19:51] <dalek> rakudo/nom: own attributes, as they only exist when they're composed.

[19:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/06622f7a56

[19:51] <lizmat> GlitchMr: I have no idea

[19:52] <GlitchMr> I assume I just hit the strange bug.

[19:52] <GlitchMr> That normally wouldn't happen, because nobody else uses Perl 6 as Perl 5.

[19:53] <GlitchMr> Well, ok, I don't use Perl 6 as Perl 5.

[19:53] <GlitchMr> But I use it for oneliners. And it works well.

[19:53] <lizmat> GlitchMr: the change to the Range.new candidate: it was the smallest change to make ranges work with Matches/List/Parcel as the starting point

[19:53] <lizmat> and that was according to spec, so what is the problem ?

[19:53] <lizmat> please note that "$min is copy"

[19:53] <lizmat> so the change is not visible outside

[19:54] <GlitchMr> r: ((1, 2)..(3, 4)).bounds.perl

[19:54] <camelia> rakudo a13cec:  ( no output )

[19:54] <GlitchMr> rn: ((1, 2)..(3, 4)).bounds.perl.say

[19:54] <camelia> rakudo a13cec: OUTPUT«(2, $(3, 4))␤»

[19:54] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«($(1, 2), $(3, 4))␤»

[19:54] <GlitchMr> The problem is that ranges aren't just ranges.

[19:55] <pmurias> are there any tools besides say for debugging grammars in nqp?

[19:55] <GlitchMr> I think some APIs (like minmax) use it to store range of values.

[19:55] <lizmat> Grammar::Debugger ?

[19:55] <GlitchMr> rn: say minmax

[19:55] <camelia> rakudo a13cec, niecza v24-95-ga6d4c5f: OUTPUT«Inf..-Inf␤»

[19:55] <GlitchMr> I'm almost sure that Inf..-Inf is different sort of range.

[19:55] <GlitchMr> And in such range, replacing (1, 2) with 2 could matter.

[19:56] <pmurias> lizmat: isn't that for rakudo?

[19:57] <FROGGS> pmurias: I think so

[19:57] <lizmat> pmurias: duh, yes, sorry, missed the "nqp" bit

[19:57] *** sqirrel left
[19:58] <lizmat> rn: ((1,2).list..10).perl.say

[19:58] <camelia> rakudo a13cec: OUTPUT«2..10␤»

[19:58] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«(1, 2).list.item..10␤»

[20:02] *** SamuraiJack left
[20:02] <lizmat> GlitchMr: trying another approach to the range uissue

[20:04] *** agre_ left
[20:06] *** kaare__ is now known as kaare_

[20:08] <lizmat> $ perl6 -e '((1, 2)..(3, 4)).bounds.perl.say'

[20:08] <lizmat> ($(1, 2), $(3, 4))

[20:09] <lizmat> rn: .say for ((1, 2)..(3, 4))

[20:09] <camelia> rakudo a13cec: OUTPUT«2␤3␤»

[20:09] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«1 2␤»

[20:09] <lizmat> I feel both are wrong here, it should be "2", no?

[20:09] *** bropl joined
[20:10] <bropl> hi, i'm back

[20:11] <lizmat> bropl /o

[20:11] <bropl> i got another question

[20:11] <bropl> this code doesnt do what i thought it should

[20:11] <bropl> say .Str given 'A' ~~ m:i/<[a..z]>/;

[20:12] <bropl> maybe too much perl5?

[20:12] <lizmat> r: say .Str given 'A' ~~ m:i/<[a..z]>/;

[20:12] <camelia> rakudo a13cec: OUTPUT«False␤»

[20:12] <bropl> shouldnt it match?

[20:13] <lizmat> r: say 'A' ~~ m:i/<[a..z]>/

[20:13] <camelia> rakudo a13cec: OUTPUT«False␤»

[20:13] <lizmat> r: say ('A' ~~ m:i/<[a..z]>/).perl

[20:13] <camelia> rakudo a13cec: OUTPUT«Bool::False␤»

[20:13] <lue> r: say .Str given 'A' ~~ /<alpha>/

[20:13] <camelia> rakudo a13cec: OUTPUT«A␤»

[20:13] <lizmat> r: say 'a' ~~ m:i/<[a..z]>/

[20:13] <camelia> rakudo a13cec: OUTPUT«｢a｣␤␤»

[20:13] <bropl> ooh, is <alpha> a new class?

[20:14] <lizmat> r: say 'a' ~~ m:i/<[A..Z]>/

[20:14] <bropl> i should chech the spec

[20:14] <camelia> rakudo a13cec: OUTPUT«False␤»

[20:14] <lizmat> maybe :i is NYI

[20:14] <FROGGS> lizmat: it is implemented

[20:14] <FROGGS> and I thought I implemented it for ranges

[20:15] <lizmat> so why doesn't it work?

[20:15] <FROGGS> no idea off hand

[20:15] *** kaare_ left
[20:15] <FROGGS> r: say 'a' ~~ m:i/<[ABC]>/

[20:15] <camelia> rakudo 06622f: OUTPUT«｢a｣␤␤»

[20:15] <bropl> can i ask a link to the new classes in spec, i cant seem to find them

[20:15] <FROGGS> ahhh

[20:15] <lue> bropl: the things you can put in <> in regexes are in S05, under "Predefined Subrules"

[20:15] <lue> http://perlcabal.org/syn/S05.html#Predefined_Subrules

[20:15] <bropl> got it, many thanks

[20:16] <FROGGS> lizmat: I implemented it for char classes except ranges

[20:16] <lizmat> ah, so :i is NYI on ranges in char classes

[20:20] *** bropl left
[20:21] <FROGGS> yeah :/

[20:21] <FROGGS> but should be pretty LHF I guess

[20:27] <dalek> rakudo-js: a4961eb | (Pawel Murias)++ | runtime.js:

[20:27] <dalek> rakudo-js: Fix a bug in runNFA.

[20:27] <dalek> rakudo-js: 

[20:27] <dalek> rakudo-js: This should make NQP::Grammar.TOP parse say("Hello World")

[20:27] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/a4961ebe92

[20:27] <diakopter> eh

[20:28] <diakopter> FROGGS: straightforward, but I wouldn'dt call it LHF

[20:29] <lizmat> rn: my @a=10; my @b=20; .say for (@a .. @b)

[20:29] <camelia> rakudo 06622f: OUTPUT«1␤2␤»

[20:29] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«Unhandled exception: cannot increment a value of type Array␤  at /home/p6eval/niecza/lib/CORE.setting line 1769 (List.gist @ 5) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3142 (RangeIter.reify @ 7) ␤  at <unkno…

[20:31] <lizmat> GlitchMr: abandoning other approach as I'm not sure what should happen with which parameters: seems the spectests are not up to spec either  :-(

[20:33] *** bruges_ left
[20:35] *** bruges joined
[20:47] <dalek> roast: 203f3c7 | coke++ | S (5 files):

[20:47] <dalek> roast: niecza fudge

[20:47] <dalek> roast: review: https://github.com/perl6/roast/commit/203f3c7b28

[20:50] *** slavik left
[20:52] <dalek> niecza: 8d82136 | coke++ | t/spectest.data:

[20:52] <dalek> niecza: this test file does not exist

[20:52] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8d82136188

[20:54] *** ajr_ left
[20:56] <dalek> roast: 16a91a3 | coke++ | S32-list/uniq.t:

[20:56] <dalek> roast: pugs fudge

[20:56] <dalek> roast: review: https://github.com/perl6/roast/commit/16a91a3bc7

[20:59] <dalek> nqp: 6b5c98e | (Tobias Leich)++ | src/QRegex/P6Regex/Actions.nqp:

[20:59] <dalek> nqp: support case-insensitivity for ranges in character classes

[20:59] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6b5c98e7e6

[21:00] <FROGGS> I'd run spectest with this, but this would kill my win7 vm

[21:03] *** slavik joined
[21:03] *** donaldh joined
[21:05] * donaldh golfed tadzik's panda LexoticException down to this: https://gist.github.com/donaldh/6479271

[21:06] *** pmurias left
[21:07] <tadzik> ++ for robin :)

[21:12] *** donaldh left
[21:16] <moritz> nqp-jvm: sub f() { -> { return 42 } }; f()()

[21:16] <camelia> nqp-jvm: OUTPUT«Exception in thread "main" org.perl6.nqp.runtime.LexoticException␤      at org.perl6.nqp.runtime.ThreadContext.<init>(ThreadContext.java:86)␤   at org.perl6.nqp.runtime.GlobalContext.<init>(GlobalContext.java:129)␤  at org.perl6.nqp.runtime.CompilationUnit.enterFromMain(Compilat…

[21:16] <moritz> there, I golfed LexoticException even further :-)

[21:17] *** berekuk left
[21:24] *** berekuk joined
[21:30] <dalek> roast: ecc7bf8 | coke++ | S32-io/other.t:

[21:30] <dalek> roast: rakudo.parrot unfudge

[21:30] <dalek> roast: review: https://github.com/perl6/roast/commit/ecc7bf8e38

[21:31] <FROGGS> meh, nobody reads the skip message :/

[21:32] <[Coke]> FROGGS: is that to me?

[21:32] <FROGGS> [Coke]: to you too, yes

[21:32] <[Coke]> that file passed 100% for me locally and on the test server.

[21:32] <[Coke]> if it's failing on a particular config, let's skip it for that config.

[21:33] <FROGGS> yeah, and breaks on my box and I think on masak's too

[21:33] <[Coke]> s/skip/todo/

[21:33] <FROGGS> it dies in parrot land on my box fwiw

[21:34] <[Coke]> can you upgrade your parrot? ;)

[21:34] <dalek> rakudo/nom: 22622a9 | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[21:34] <dalek> rakudo/nom: Create Setty.new-fp so that the .Set and .KeySet coercers can use that

[21:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/22622a973c

[21:34] <[Coke]> I think it is reasonable to have the spec test require a recent impl.

[21:34] <flussence> grr... stupid shell autocomplete. (make t/spec<tab> eats the entire arg)

[21:34] <FROGGS> [Coke]: I am already using my parrot fork, wich will become 5.8 if all goes right

[21:35] <FROGGS> and this one passes, but 5.5 would not pass on my box

[21:35] <[Coke]> I have 5.5 here, works fine, btw.

[21:35] <FROGGS> yeah, I know that it works for lizmat too

[21:35] <diakopter> right, "might" depends on who you are

[21:36] <diakopter> not random factors

[21:36] <diakopter> your system

[21:37] <FROGGS> diakopter: ?

[21:37] <diakopter> the comment was saying "on some systems this will fail until a new version of parrot is realased sometime"

[21:37] <FROGGS> correct

[21:37] <diakopter> I was clarifying the comment to coke

[21:37] <FROGGS> ahh

[21:37] <FROGGS> right, thanks

[21:37] <[Coke]> so let's just leave it as a comment instead of an actual todo until we know what triggers it or it's irrelevant.

[21:38] <[Coke]> (esp since it passes on the daily spec run)

[21:38] <FROGGS> [Coke]: I patched parrot a week ago

[21:38] <FROGGS> so I know why it fails

[21:38] <diakopter> coke: he said that above (that he already fixed it locally)

[21:38] <[Coke]> ... I understand.

[21:39] <FROGGS> I'd say we wait two/three days now, and if nobody complains we leave it that way

[21:40] * lizmat has done enough refactoring for a day and goes to sleep&

[21:40] <[Coke]> nite!

[21:40] <FROGGS> gnight lizmat

[21:40] *** Ulti joined
[21:41] <dalek> nqp: 8ed7dad | (Tobias Leich)++ | tools/lib/NQP/Configure.pm:

[21:41] <dalek> nqp: fetch libparrot.lib so that --gen-parrot works again

[21:41] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8ed7daddc2

[21:42] <diakopter> FROGGS++ # that's been annoying me for months

[21:43] <FROGGS> :o)

[21:43] *** Pleiades` joined
[21:43] <FROGGS> I think it is more important for newbies though, since they might give up when nqp fails to build because of that

[21:44] <[Coke]> the rakudo.jvm build failed today on the daily run. ran it again, seems fine now. wonder why it failed. :|

[21:45] <diakopter> failed for me the first time on mac the other day too

[21:45] <diakopter> building again succeeded

[21:45] <diakopter> ran out of memory

[21:46] <flussence> S32-io/other.t passes 60/60 for me on 2013.08-90-gb9762d7

[21:47] <FROGGS> flussence: good to know, thanks for testing

[21:50] *** spider-mario left
[21:57] *** xenoterracide joined
[22:12] *** dmol left
[22:15] *** EvanTeitelman joined
[22:22] *** denis_boyun left
[22:27] *** Mouq joined
[22:34] *** pernatiy left
[22:47] <dalek> perl6-roast-data: 38f7910 | coke++ | / (5 files):

[22:47] <dalek> perl6-roast-data: today (automated commit)

[22:47] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/38f7910546

[22:47] <dalek> perl6-roast-data: 9914338 | coke++ | bin/ (2 files):

[22:47] <dalek> perl6-roast-data: Allow longer run times

[22:47] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/99143380c6

[23:04] <jnthn> .tell pmurias MARKER and MARKED log a position under a key, then allow it to be checked against the current position later. If you can compile the methods, they should Just Work (that is, in JVM and MoarVM ports, I didn't have to treat them specially)

[23:04] <yoleaux> jnthn: I'll pass your message to pmurias.

[23:06] *** kivutar left
[23:10] *** Rotwang left
[23:10] *** BenGoldberg joined
[23:31] *** kst` joined
[23:35] *** kst` left
[23:35] *** kst` joined
[23:45] *** Rotwang joined
[23:52] *** raiph joined
