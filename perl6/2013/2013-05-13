[00:03] *** odoacre_ left
[00:03] *** odoacre_ joined
[00:10] *** Swarley__ joined
[00:11] *** berekuk joined
[00:12] *** Swarley__ left
[00:24] *** lustlife joined
[00:30] *** berekuk left
[00:35] *** btyler left
[00:45] <colomon> sorear: ping?

[00:50] *** frd|afk joined
[00:50] <dalek> niecza: ba63d9a | (Solomon Foster)++ | FETCH_URL:

[00:50] <dalek> niecza: Update to latest release.

[00:50] <dalek> niecza: review: https://github.com/sorear/niecza/commit/ba63d9aaba

[00:50] * colomon has no idea how cloud.github.com works.

[00:53] *** frdmn left
[01:08] *** fgomez_ left
[01:12] *** woosley1 left
[01:12] *** woosley1 joined
[01:12] *** FROGGS left
[01:14] *** anuby joined
[01:17] <rjbs> colomon: It uses the cloud.

[01:25] *** FROGGS joined
[01:36] *** Tene_ is now known as Tene

[01:47] *** btyler joined
[01:49] *** adu joined
[01:49] <sorear> colomon: hi

[01:54] *** grondilu left
[01:54] <adu> hi

[02:03] <colomon> sorear: how do I upload stuff to cloud.github.com/sorear/niecza?  it's stupid, but it's got me completely stumped.  I uploaded the "new release" of niecza to my webpage in the meantime, just to get it working.

[02:07] <sorear> colomon: You can't, github discontinued the file upload feature.

[02:07] <colomon> sorear: glad to know I wasn't just looking in the wrong place for 30 minutes.

[02:09] <colomon> I probably should add an MD5 tag or something to make sure no one hacks the niecza-24.zip file at harmonyware.com.

[02:11] <adu> so sad

[02:14] <colomon> sorear: another question: hints for where/how Nil disappears from list comprehensions?  The only thing that jumps out at me is lib/CodeGen.cs line 4375, but even that's more of a "well, maybe that could be it, but I don't see how".

[02:16] *** thou left
[02:18] *** cibs joined
[02:19] <sorear> Nil disappears from list comprehensions because it's flagged as iterable and iterates as nothing.

[02:20] <colomon> what flags it as iterable?

[02:21] <colomon> is it that bit in CodeGen?  ru.setting.Nil = Kernel.NewRWListVar(nst.typeObj);

[02:22] * colomon guesses no, because commenting it out did not changes Nil's behavior in this respect

[02:23] <sorear> actually, that is part of what does it

[02:24] *** frdmn joined
[02:25] <bonsaikitten> colomon: just put a tag in git, then you can get a mostly working zip from github automatically

[02:27] *** cognominal__ joined
[02:27] *** ehouse_ is now known as ehouse

[02:27] *** cognominal left
[02:29] *** frd|afk left
[02:29] <sorear> bonsaikitten: that would require making a separate branch to hold the contents of the binary packages

[02:30] <bonsaikitten> sorear: oh right. I rarely think about precompiled stuff :)

[02:37] <colomon> sorear: is it something to do with NilP?

[02:38] <sorear> yes

[02:38] <sorear> NilP is iterable, all other type objects aren't

[02:38] <sorear> this is handled in multiple places

[02:42] *** cognominal__ left
[02:42] *** btyler left
[02:42] *** lue left
[02:42] *** Khisanth left
[02:42] *** kurahaupo left
[02:42] *** cibs left
[02:42] *** daniel-s_ left
[02:44] *** sftp_ left
[02:44] *** sftp joined
[02:46] *** daniel-s_ joined
[02:47] *** cognominal__ joined
[02:47] *** cibs joined
[02:47] *** btyler joined
[02:47] *** lue joined
[02:47] *** Khisanth joined
[02:47] *** kurahaupo joined
[02:51] *** census joined
[02:51] *** cognominal__ left
[02:51] *** btyler left
[02:51] *** lue left
[02:51] *** Khisanth left
[02:51] *** kurahaupo left
[02:51] *** cibs left
[02:51] *** census left
[02:52] *** census joined
[02:52] *** cognominal__ joined
[02:52] *** cibs joined
[02:52] *** btyler joined
[02:52] *** lue joined
[02:52] *** Khisanth joined
[02:52] *** kurahaupo joined
[02:53] *** census left
[03:06] *** wamiks joined
[03:13] *** wamiks left
[03:13] *** wamiks joined
[03:15] <colomon> sorear: I haven't been able to get this working yet, but at least I know where to look now.  sorear++

[03:21] *** fgomez joined
[03:23] <colomon> afk # bedtime

[03:24] *** leprevost left
[03:28] *** preflex left
[03:29] *** preflex_ joined
[03:29] *** preflex_ is now known as preflex

[03:31] *** leprevost joined
[03:32] *** btyler left
[03:38] *** thou joined
[03:51] *** wamiks left
[04:16] *** skids left
[04:17] *** leprevost left
[04:25] *** Psyche^ joined
[04:28] *** Patterner left
[04:28] *** Psyche^ is now known as Patterner

[05:01] *** thou left
[05:04] *** thou joined
[05:16] *** frdmn left
[05:41] *** thou left
[05:44] *** dmol joined
[05:52] *** kaleem joined
[06:11] *** frdmn joined
[06:13] *** dmol left
[06:15] *** dayangkun joined
[06:27] *** dayangkun left
[06:35] *** SamuraiJack joined
[06:38] *** FROGGS left
[06:50] *** FROGGS joined
[07:16] *** domidumont joined
[07:17] *** domidumont left
[07:18] *** domidumont joined
[07:21] *** sqirrel joined
[07:32] *** salv0 left
[07:33] *** salv0 joined
[07:37] *** fhelmberger joined
[07:39] *** fhelmberger left
[07:43] *** adu left
[07:44] *** daxim joined
[07:46] *** kurahaupo left
[07:48] *** fhelmberger joined
[07:48] *** domidumont left
[07:50] *** domidumont joined
[07:55] *** kresike joined
[07:55] <kresike> hello all you happy perl6 people

[07:55] *** kivutar joined
[07:56] <sergot> o/

[07:56] <diakopter> _-_

[07:57] <labster> hello

[07:59] <sorear> o/o/

[07:59] <dagurval> \o/

[07:59] *** sqirrel left
[08:00] *** xinming_ left
[08:00] *** berekuk joined
[08:01] <FROGGS> \o

[08:03] *** berekuk left
[08:03] *** xinming joined
[08:06] <dagurval> r: my @a <== gather for 1..Inf -> $i { print "."; take $i; } 

[08:06] <camelia> rakudo 2a04f2: OUTPUT«(timeout)................................................................................................................................................................................................................................................................…

[08:06] <dagurval> Why isn't @a lazy?

[08:07] <sorear> because it's the last statement in a block

[08:07] <sorear> try adding a ;1 after it

[08:07] <dagurval> r: my @a <== gather for 1..10 -> $i { print "."; take $i; }; 1

[08:07] <camelia> rakudo 2a04f2: OUTPUT«..........»

[08:07] <sorear> erm

[08:08] <sorear> r: my @b = (my @a <== gather for 1..10 -> $i { print "."; take $i })

[08:08] <camelia> rakudo 2a04f2: OUTPUT«..........»

[08:08] <sorear> r: my @b := (my @a <== gather for 1..10 -> $i { print "."; take $i })

[08:08] <sorear> r: my @b = (my @a <== gather for 1..Inf -> $i { print "."; take $i })

[08:08] <camelia> rakudo 2a04f2: OUTPUT«(timeout)..........»

[08:08] <camelia> rakudo 2a04f2: OUTPUT«(timeout)................................................................................................................................................................................................................................................................…

[08:09] <tadzik> r: my $a <== gather for 1..Inf -> $i { print "."; take $i; }

[08:09] <camelia> rakudo 2a04f2: OUTPUT«(timeout)................................................................................................................................................................................................................................................................…

[08:10] <Juerd> That's not annoying at all :)

[08:13] <dagurval> so it's a bug, or are we doing it wrong?

[08:17] *** dduncan joined
[08:17] *** dduncan left
[08:17] <sorear> i suspect bug

[08:18] <dagurval> r: my @a <== 1..Inf;

[08:18] <camelia> rakudo 2a04f2: OUTPUT«(timeout)»

[08:19] <dagurval> I'll add a test in roast for it :)

[08:21] *** bbkr_ joined
[08:21] <moritz>  suspect that feeds just aren't lazy yes

[08:22] *** [Coke] joined
[08:23] *** bruges joined
[08:23] *** ivan``_ joined
[08:23] <dalek> perl6-bench: 9a14e25 | (Geoffrey Broadwell)++ | timeall:

[08:23] <dalek> perl6-bench: Factor out some common code in time_command() in timeall

[08:23] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/9a14e25ff8

[08:23] <dalek> perl6-bench: 52b7474 | (Geoffrey Broadwell)++ | timeall:

[08:23] <dalek> perl6-bench: Significant refactoring of timeall to support time-scaled tests

[08:23] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/52b7474a33

[08:23] *** xinming left
[08:24] *** scottp_ joined
[08:24] *** bakedb_ joined
[08:24] *** pmichaud_ joined
[08:24] *** sergot_ joined
[08:24] *** jferrero joined
[08:24] *** diakopte1 joined
[08:24] *** mls_ joined
[08:24] *** rhr joined
[08:24] *** Util joined
[08:25] *** jlaire joined
[08:25] *** xinming joined
[08:26] *** araujo_ joined
[08:26] *** drbean_ joined
[08:26] *** huf joined
[08:27] *** drbean left
[08:27] *** jlaire_ left
[08:27] *** awwaiid left
[08:27] *** scottp left
[08:27] *** ivan`` left
[08:27] *** araujo left
[08:27] *** bruges_ left
[08:27] *** sergot left
[08:27] *** hypolin left
[08:27] *** vaelxon left
[08:27] *** TimToady left
[08:27] *** [Coke]_ left
[08:27] *** bakedb left
[08:27] *** pmichaud left
[08:27] *** smash left
[08:27] *** Yappo_________ left
[08:27] *** mattp___ left
[08:27] *** drbean_ is now known as drbean

[08:27] *** smash_ joined
[08:27] *** lestaway joined
[08:27] *** vaelxon joined
[08:28] *** Gothmog_ left
[08:28] *** BinGOs_ joined
[08:29] *** berekuk joined
[08:29] <mathw_> o/

[08:29] *** Maddingu1 is now known as maddingue

[08:29] *** mathw_ is now known as mathw

[08:29] <FROGGS> \o

[08:29] <labster> o/

[08:30] <mathw> \o/

[08:30] <tadzik> \o

[08:30] <FROGGS> *g*

[08:30] <labster> internet weather sure has been stormy lately.  must be climate change.

[08:30] <tadzik> there's a storm coming, Mr Wayne

[08:31] *** diakopter left
[08:31] *** huf_ left
[08:31] *** mls left
[08:31] *** jferrero_ left
[08:31] *** Util_ left
[08:31] *** bbkr__ left
[08:31] *** rhr_ left
[08:31] *** hugme left
[08:31] *** lestrrat left
[08:31] *** BinGOs left
[08:31] *** lestaway is now known as lestrrat

[08:31] <FROGGS> if the climat is changing lizmat will tell us surely

[08:31] <mathw> I'll see your storm and raise you a winter

[08:31] <tadzik> I see your winter and raise you Dragonstorm! \o/

[08:31] *** hugme joined
[08:31] *** ChanServ sets mode: +v hugme

[08:31] <sorear> nuclear winter, asteroid winter, AI winter, or regular old winter?

[08:32] <tadzik> http://gatherer.wizards.com/Handlers/Image.ashx?multiverseid=46426&type=card of course

[08:32] *** awwaiid joined
[08:32] *** hypolin joined
[08:32] *** TimToady joined
[08:32] *** Yappo_________ joined
[08:32] *** mattp___ joined
[08:34] <daxim> 8r?  …… overpriced

[08:35] <tadzik> oh, it's not really

[08:35] <lizmat> The climate is changing

[08:36] *** dakkar joined
[08:36] <tadzik> few dark rituals and seething songs and you get your 8r and more than enough spells on stack to put 4 dragons with haste into play

[08:36] <tadzik> instawin :)

[08:36] *** awwaiid left
[08:36] *** hypolin left
[08:36] *** TimToady left
[08:36] *** Yappo_________ left
[08:36] *** mattp___ left
[08:36] <lizmat> who am I to argue with FROGGS  :-)

[08:36] <FROGGS> *g*

[08:36] <dalek> v5: dceb649 | (Tobias Leich)++ | t/test.pl:

[08:36] <dalek> v5: better signatures for cmp_ok

[08:36] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/dceb649898

[08:36] <dalek> v5: 415b381 | (Tobias Leich)++ | t/test_summary:

[08:36] <dalek> v5: parse "print 1..10" too to get the plan

[08:36] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/415b381396

[08:36] <dalek> v5: ec9e394 | (Tobias Leich)++ | STATUS.md:

[08:36] <dalek> v5: update after change of parsing plan and cmp_ok

[08:36] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/ec9e394981

[08:36] * labster casts counterspell

[08:37] <tadzik> oh noes

[08:37] *** BinGOs_ is now known as BinGOs

[08:37] *** awwaiid joined
[08:37] *** hypolin joined
[08:37] *** TimToady joined
[08:37] *** Yappo_________ joined
[08:37] *** mattp___ joined
[08:37] <sorear> does counterspell counter the card, or one spell?

[08:37] *** BinGOs left
[08:37] *** BinGOs joined
[08:37] <FROGGS> like $spell++ ?

[08:37] <sorear> and does the mana cost count sepately for each copy?

[08:37] <tadzik> it counters the entire dragonstorm

[08:38] * sorear has been away from m:tg for ~10y

[08:38] <tadzik> I stopped playing around tenth edition, ate up too much monetary resources

[08:38] <tadzik> and I was not even a student back then

[08:38] <tadzik> and no, you pay 8r just once

[08:38] <labster> lol, I stopped around 4th edition.

[08:39] <tadzik> mtg is weird recently

[08:39] <tadzik> no mana burn for one thing

[08:39] <tadzik> and those Planeswalker cards

[08:39] <sorear> I stopped around... I wasn't paying attention to the edition numbers :[

[08:39] <tadzik> I've been to a couple tournaments, it was about as fun as it was expensiev

[08:40] <dalek> roast: 0bb5a4d | (Dagur Valberg Johannsson)++ | S03-feeds/basic.t:

[08:40] <dalek> roast: 2 lazy tests for <== operator

[08:40] <dalek> roast: review: https://github.com/perl6/roast/commit/0bb5a4d6f9

[08:40] * mst can handle collecting RPG supplements but not card games

[08:40] <mst> doesn't quite tweak the "ooh! shiny!" for me

[08:40] <Timbus> i thought cards with storm were copied and placed on the stack when played. therefore you would need to play a counter per copy

[08:41] <tadzik> hmm

[08:41] <Timbus> i had a deck that used storm and i think thats how it went

[08:41] <labster> It led me to people who played D&D and other tabletop RPGs, and then I realized I could have a lot more fun doing group storytelling.

[08:41] <Timbus> http://gatherer.wizards.com/pages/card/details.aspx?name=Mind's%20Desire i used this

[08:42] <Timbus> and you had better believe it won

[08:42] <FROGGS> p: my @a <== 0..Inf

[08:42] <camelia> pugs: OUTPUT«*** Unsafe function '=' called under safe mode␤    at /tmp/XUgGNSdcel line 1, column 1 - line 2, column 1␤»

[08:42] <FROGGS> -.-

[08:42] <tadzik> oh wow, that's a killer

[08:43] <labster> assignment considered unsafe

[08:43] <tadzik>  A copy of a spell can be countered, just like any other spell, but each copy has to be countered individually. Countering a storm spell won't counter the copies of it.

[08:43] <tadzik> right

[08:43] <Timbus> i played it with a deck that used twiddle (spell: untap target, cost 1 blue) and a lotus artifact (tap to give 3 mana, pick your colour)

[08:43] <Timbus> and yeah. i won.

[08:44] <labster> but countering the spell that creates the storm... you just have to get far enough up the call stack, correct?

[08:44] * lizmat wonders if somebody messed with the channel selector

[08:44] <Timbus> lol

[08:44] <tadzik> hahaha

[08:44] <diakopte1> bzzzzzzzzzt

[08:44] *** maddingue is now known as Maddingue

[08:44] <diakopte1> bzzzzzzzzzzzzzzzzzt

[08:44] <diakopte1> bzzzt

[08:44] *** diakopte1 is now known as diakopter

[08:44] <tadzik> Timbus: what lotus artifact are you talking about?

[08:45] <tadzik> that sounds like black lotus, but that one is sacficed. And also priced at ~$3000 iirc :)

[08:45] * FROGGS changes topic to: we're playing card games, not doing peril anymore...

[08:45] <Timbus> gilded lotus i think

[08:45] <Timbus> noooo not that

[08:45] <Timbus> D:

[08:45] <tadzik> oh, this one :)

[08:47] <dalek> roast: 5bfc7fd | dagurval++ | S03-feeds/basic.t:

[08:47] <dalek> roast: moved nieza fudge

[08:47] <dalek> roast: review: https://github.com/perl6/roast/commit/5bfc7fd3fb

[08:49] <mst> FROGGS: quick, put on your peril sensitive sunglasses

[08:51] <sorear> tadzik: any luck with CBP?

[08:51] <tadzik> sorear: I'm having my visa appointment on next monday

[08:52] <tadzik> someone will stare at me and decide if I'm worthy

[08:54] * lizmat wonders whether a prolific online presence would be helpful for such a staring contest or not

[08:55] * lizmat also wonders who else US government officials have been staring in the past at and to what purpose

[08:56] * lizmat is bored doing another spectest

[08:56] <tadzik> oh, you know, Poles are all thieves who fly to the US and stay there forever not paying taxes

[08:56] <arnsholt> Yeah, I'm glad I could do the ESTA thing

[08:57] <sorear> I thought they were more afraid tadzik would hijack a plane and crash it into the WTC

[08:57] <tadzik> there was an incident when one of our former presidents, a nobel piece prize winner refused to have his fingerprints taken when flying to the US

[08:57] <arnsholt> One of my colleagues has some terrible stories of her time with a Serbian passport, getting through passport control here in Norway

[08:58] <bonsaikitten> arnsholt: I've heard of horrible things from people with german passportds

[08:58] <bonsaikitten> it's quite random and confusing, but apparently germans are expected to have white skin, OR ELSE

[08:58] <arnsholt> sorear: Oh, but there's a question for that in the forms, so that's unpossible once they've issued a visa =p

[08:58] <tadzik> yeah

[08:58] <lizmat> there was a time when I was flying regularly from Amsterdam to Chicago, that I was the only one on the flight having to open my suitcase for inspection  :-)

[08:59] <tadzik> there's actually a question like this: "if you were a political leader, did you order any military actions which violated freedom of religion?"

[08:59] <tadzik> or something like this

[08:59] <arnsholt> Some of those questions are a bit hilarious. "Are you a terrorist? Are you a drug smuggler? Were you a nazi between 1936 and 1945?"

[08:59] <tadzik> yeah

[08:59] * lizmat is puzzled by the timeframe reference

[08:59] <tadzik> "Do you have practical experience with chemical weaponry?"

[09:00] <hoelzro> I think on the citizenship exam (or is it the entrance document?) that asks if you're a drukkard

[09:00] <nwc10> I believe that it's like money laundering regulations. It's easier to prosecute someone for lying on the immigration form, than the actual actions in question.

[09:00] <hoelzro> *drunkard

[09:00] <lizmat> like there haven't been any nazis post 1945

[09:00] <sorear> would Cardinal Ratzinger have been allowed in?

[09:00] <arnsholt> lizmat: It's (slightly) more subtle than that

[09:00] <hoelzro> I find the Nazi question interesting, considering there's a Nazi party in the US

[09:00] <hoelzro> they're small, but they're there

[09:00] <arnsholt> Something about any association with German war crimes during WWII, IIRC

[09:00] <hoelzro> that would make sense

[09:01] * sorear would like the countries of the west to shut up and get serious about that "free movement of people" thing...

[09:01] <arnsholt> sorear: Indeed

[09:02] <jnthn> +100000

[09:02] <arnsholt> Unfortunately people are all for it when all they see is "no passport control when on holidays", but less than cheerful when they realize -other- people can get into their country as well

[09:02] <jnthn> .oO( wouldn't mind if some countries to the East then also relaxed their visa needs... :/ )

[09:02] <tadzik> they probably don't want the british to come here with ships and blackpowder rifles and take away their homeland, right? Hah! Like that's gonna ever happen!

[09:02] <tadzik> oh, wait

[09:03] <arnsholt> (Norway is currently in the middle of what is turning into an annual "OHNOES TEH GYPSIES" scarefest)

[09:03] <nwc10> yes, exactly. It will be the new aircraft carriers, but black powder rifles because the planes aren't ready yet.

[09:04] * hoelzro imagines a fighter jet armed with muzzle loaded blackpowder rifles

[09:04] <hoelzro> two shots, back to base.

[09:04] <tadzik> 3 shots per minute

[09:04] <tadzik> if you reload fast

[09:04] <tadzik> and it's dry

[09:05] <sorear> arnsholt: i've never difficulty dealing with passport control, because unlike the US Luxembourg has sensible immigration people

[09:05] <hoelzro> the second to last time I had to go through US customs, I almost missed my connecting flight

[09:05] <hoelzro> and I'm even a citizen

[09:08] * sorear lives a stone's throw from the us/mx border and thinks it should look more like the lu/de border

[09:08] <sorear> (large trebuchet or light-gas gun may be required)

[09:09] <bonsaikitten> sorear: same amount of illegal things move over both borders already ;)

[09:17] <tadzik> well, it's sad that people traveling is "illegal things"

[09:21] *** Gothmog_ joined
[09:23] <arnsholt> sorear: Yeah, I can imagine =)

[09:24] <sorear> dumb americans generalize from "two russian citizens with bombs" to "all foreigners have bombs"

[09:25] <arnsholt> (In other news, Haskell is fun)

[09:25] <sorear> indeed.

[09:25] <sorear> let's talk about that instead.

[09:26] <arnsholt> Agreed! =D

[09:26] <sorear> haskeelllll

[09:26] <arnsholt> I've just a few work-related milestones, so my next project is currently being doodled in Haskell

[09:27] <arnsholt> It's a bit mind-bending to work in, but pretty cool

[09:28] * moritz uses panda2 for the first

[09:29] * arnsholt thinks moritz accidentally a word

[09:31] <sorear> time, I guess

[09:33] <moritz> time, yes

[09:38] <arnsholt> Yeah, I figured =)

[09:38] <arnsholt> Hmm. I've managed to read in and represent my data (it seems). Now for the trickier, less monad-y, bit

[09:39] <arnsholt> Or actually, I'm not representing my data. That's the hard bit

[09:51] *** census joined
[09:51] *** kivutar_ joined
[09:54] *** kivutar left
[09:58] *** sqirrel joined
[10:15] *** anuby left
[10:32] *** crab2313 joined
[10:34] *** census left
[10:36] *** xinming left
[10:37] *** census joined
[10:39] *** ilbot6 joined
[10:39] *** ilbot6 left
[10:45] *** rindolf joined
[10:47] * lizmat can't help liking http://www.youtube.com/watch?v=KaOC9danxNo very much

[10:48] *** ilbot6 joined
[10:48] * moritz wonders how stable ilbot6 on postgresql will be

[10:52] <lizmat> wrt to optimising away +@ in .nqp files: I'm not seeing any significant difference in CPU usage of the spectest

[10:52] <lizmat> *and* since I broke 2 tests with this batch of changes, I'm not going to pursue this any further at the present time

[10:53] <lizmat> unless someone convinces me it is worthwhile anyway, so I should check out the breakage of these two tests

[10:54] <hoelzro> when did Rakudo start passing S12-methods/qualified.t?

[10:56] <moritz> it was added to t/spectest.data in December last year

[10:56] <moritz> and the test you're interested in was unfudged in Feb

[10:57] <hoelzro> wow!

[10:57] <hoelzro> I guess that's not *too* old =)

[10:57] <hoelzro> I can continue work on my XMPP bot!

[10:57] <hoelzro> \o/

[11:03] *** xinming joined
[11:07] *** shlomif joined
[11:09] *** preflex_ joined
[11:09] *** sqirrel_ joined
[11:09] *** x2 joined
[11:10] *** fgomez_ joined
[11:11] *** fhelmberger_ joined
[11:12] *** rindolf left
[11:12] *** census left
[11:12] *** fgomez left
[11:12] *** xinming left
[11:12] *** sqirrel left
[11:12] *** kaleem left
[11:12] *** vaelxon left
[11:12] *** fhelmberger left
[11:12] *** preflex left
[11:12] *** ilbot6 left
[11:12] *** preflex_ is now known as preflex

[11:13] *** kaleem joined
[11:17] *** xinming joined
[11:19] *** sqirrel_ left
[11:21] *** Gothmog_ left
[11:21] *** BinGOs left
[11:21] *** lestrrat left
[11:21] *** araujo_ left
[11:21] *** bruges left
[11:21] *** salv0 left
[11:21] *** FROGGS left
[11:21] *** cognominal__ left
[11:21] *** lue left
[11:21] *** Khisanth left
[11:21] *** cibs left
[11:21] *** PZt left
[11:21] <lizmat> bad weather again :-(

[11:25] *** bruges_ joined
[11:25] *** Gothmog_ joined
[11:25] *** BinGOs joined
[11:25] *** lestrrat joined
[11:25] *** araujo_ joined
[11:25] *** bruges joined
[11:25] *** salv0 joined
[11:25] *** FROGGS joined
[11:25] *** cognominal__ joined
[11:25] *** cibs joined
[11:25] *** lue joined
[11:25] *** Khisanth joined
[11:27] *** shlomif left
[11:28] *** bruges left
[11:32] *** crab2313 left
[11:39] *** kaleem left
[11:39] *** kaleem joined
[11:52] *** kaleem left
[12:01] <lizmat> r: my $a; $a{Mu}=1

[12:01] <camelia> rakudo 2a04f2: OUTPUT«Cannot call 'postcircumfix:<{ }>'; none of these signatures match:␤:(: Mu *%_)␤:(: :p(:$p)!, Mu *%_)␤:(: :k(:$k)!, Mu *%_)␤:(: :kv(:$kv)!, Mu *%_)␤:(: :v(:$v)!, Mu *%_)␤:(: :BIND(:$BIND)!, Mu *%_)␤:(\SELF: $key, Mu *%_)␤:(\SELF: $key, Mu \$BIND, Mu *%_)␤:(\SELF: $k…

[12:01] <lizmat> n: my $a; $a{Mu}=1

[12:01] <camelia> niecza v24-50-gba63d9a: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 1355 (warn @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 266 (Mu.Str @ 15) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/1MqAHIY22W line 1 (mainline @ …

[12:02] <lizmat> n: my $a; $a{Mu}=1; say $a{''}

[12:02] <camelia> niecza v24-50-gba63d9a: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 1355 (warn @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 266 (Mu.Str @ 15) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/JKeMhPmawD line 1 (mainline @ …

[12:02] *** sqirrel joined
[12:04] <lizmat> rn: class Mu {}; my $a; $a<Mu>=1

[12:04] <camelia> rakudo 2a04f2: OUTPUT«Nominal type check failed for parameter '$expected'; expected Any but got Mu instead␤  in sub infix:<=> at src/gen/CORE.setting:13414␤  in block  at src/gen/CORE.setting:1726␤  in block  at /tmp/uEs0gat_pQ:1␤␤»

[12:04] <camelia> ..niecza v24-50-gba63d9a:  ( no output )

[12:05] <lizmat> rn: class Mu {}; my $a; $a<Mu>=1; say $a<Mu>

[12:05] <camelia> niecza v24-50-gba63d9a: OUTPUT«1␤»

[12:05] <camelia> ..rakudo 2a04f2: OUTPUT«Nominal type check failed for parameter '$expected'; expected Any but got Mu instead␤  in sub infix:<=> at src/gen/CORE.setting:13414␤  in block  at src/gen/CORE.setting:1726␤  in block  at /tmp/mecrqSHDf4:1␤␤»

[12:05] <FROGGS> rn: my $a; $a<Mu>=1

[12:05] <camelia> rakudo 2a04f2, niecza v24-50-gba63d9a:  ( no output )

[12:05] <FROGGS> rn: class Mu {};

[12:06] <camelia> rakudo 2a04f2, niecza v24-50-gba63d9a:  ( no output )

[12:06] <FROGGS> ?

[12:06] <moritz> well

[12:06] <moritz> if you redeclare Mu in an inner scope, stuff isn't ~~ Mu anymore

[12:06] <moritz> or... something

[12:07] *** lizmat_ joined
[12:08] <FROGGS> ahh, okay, I feared it does treat <Mu> as a string

[12:08] <lizmat_> (got disconnected: 2nd attempt) 	 I'm trying to see whether I can use Mu as a key in a hash

[12:08] <FROGGS> not*

[12:08] <lizmat_> e.g. when there is no :auth info for a module, it would be logical to use Mu for the key then

[12:08] <FROGGS> hmmm

[12:09] <lizmat_> as that would smartmatch with Any from a "use" command

[12:09] <FROGGS> but why do you want to redeclare Mu?

[12:09] <moritz> rn: class Mu {}; my $a; $a<bla> = 1;

[12:09] <camelia> niecza v24-50-gba63d9a:  ( no output )

[12:09] <camelia> ..rakudo 2a04f2: OUTPUT«Nominal type check failed for parameter '$expected'; expected Any but got Mu instead␤  in sub infix:<=> at src/gen/CORE.setting:13414␤  in block  at src/gen/CORE.setting:1726␤  in block  at /tmp/Q2Y322EDl7:1␤␤»

[12:09] <lizmat_> I don't

[12:09] <moritz> FROGGS: it's not related to the string being Mu

[12:09] <lizmat_> I just wanted to see whether it made a difference

[12:09] <FROGGS> rn: my $a; $a{Mu} = 1;

[12:09] <camelia> niecza v24-50-gba63d9a: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 1355 (warn @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 266 (Mu.Str @ 15) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/ICdEC1vCTf line 1 (mainline @ …

[12:09] <camelia> ..rakudo 2a04f2: OUTPUT«Cannot call 'postcircumfix:<{ }>'; none of these signatures match:␤:(: Mu *%_)␤:(: :p(:$p)!, Mu *%_)␤:(: :k(:$k)!, Mu *%_)␤:(: :kv(:$kv)!, Mu *%_)␤:(: :v(:$v)!, Mu *%_)␤:(: :BIND(:$BIND)!, Mu *%_)␤:(\SELF: $key, Mu *%_)␤:(\SELF: $key, Mu \$BIND, Mu *%_)␤:(\SELF: $k…

[12:10] <FROGGS> r: my $a; $a{Any}=1; say $a

[12:10] <camelia> rakudo 2a04f2: OUTPUT«use of uninitialized value of type Any in string context  in block  at /tmp/zpowZQI7uT:1␤␤("" => 1).hash␤»

[12:11] *** fhelmberger_ left
[12:11] <jnthn> I'm pretty sure redeclaring Mu will make all kinds of difference. :)

[12:11] <lizmat_> sorry, please forget about that  :-)

[12:11] <FROGGS> "all kinds"... yeah, that fits :o)

[12:11] *** daniel-s__ joined
[12:12] *** fgomez joined
[12:12] *** kresike left
[12:12] <lizmat_> but being able to use Mu as a key in a hash, does not seem possible at present

[12:12] *** fhelmberger joined
[12:12] <FROGGS> strings only atm

[12:12] <lizmat_> r: say ~Mu

[12:12] <camelia> rakudo 2a04f2: OUTPUT«Nominal type check failed for parameter ''; expected Any but got Mu instead␤  in sub prefix:<~> at src/gen/CORE.setting:1271␤  in block  at /tmp/hVqTelct4Z:1␤␤»

[12:13] *** scottp joined
[12:13] <lizmat_> n: say ~Mu

[12:13] <camelia> niecza v24-50-gba63d9a: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 1355 (warn @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 266 (Mu.Str @ 15) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/s9afKbLVLF line 1 (mainline @ …

[12:14] *** ilbot6 joined
[12:14] *** kaleem joined
[12:14] *** gtodd1 joined
[12:15] <FROGGS> why is the value auf :auth a key in a hash?

[12:15] *** lustlife1 joined
[12:15] *** dayangkun joined
[12:15] <FROGGS> what is the value then?

[12:15] <lizmat_> well, that's a proposal I'm working on, to support module Foo:name<Foo::Bar>:from<perl6>:auth<cpan:JRANDOM>:ver<1.0.0> {} syntax

[12:16] *** lizmat left
[12:16] *** fgomez_ left
[12:16] *** daniel-s_ left
[12:16] *** gtodd left
[12:16] *** lustlife left
[12:16] *** scottp_ left
[12:16] <lizmat_> Mu was supposed to be the value in absence of a specific :auth<cpan:JRANDOM>

[12:16] <FROGGS> so, the value will be the path? or a reference to the module?

[12:17] <FROGGS> I'd vote for 'Any' and '*' beeing these special keys

[12:17] <FROGGS> (as strings I might need to mention)

[12:17] <lizmat_> rn: class Foo::Bar {}; say OUR::; say OUR::Foo::

[12:17] <camelia> niecza v24-50-gba63d9a: OUTPUT«Stash.new(...)␤Stash.new(...)␤»

[12:17] <camelia> ..rakudo 2a04f2: OUTPUT«("Foo" => Foo).hash␤("Bar" => Foo::Bar).hash␤»

[12:17] <lizmat_> in stashes

[12:18] <FROGGS> hmmmm

[12:18] <lizmat_> from/auth/ver would become part of the longname, as it were

[12:19] <FROGGS> if we had hashes as keys, you could do: say OUR::Foo:ver<*>::Bar::

[12:19] <jnthn> Probably you just need a way to canonicalize the names

[12:19] <FROGGS> but there is a bit of black magic needed to get the right key

[12:20] <lizmat_> jnthn: I'm writing a document exploring options in this area

[12:20] <jnthn> It's like infix:<+> is the proper name we install under, even though you may declare it as infix:['+'] or infix:<< + >> or whatever.

[12:20] <lizmat_> well, that would be the local alias, as it were, right>

[12:20] <lizmat_> ?

[12:21] <FROGGS> jnthn: yeah, but what about wildcards?

[12:21] <FROGGS> and regex search patterns? >.<

[12:21] <jnthn> FROGGS: I'm talking about naming, not searching.

[12:21] <lizmat_> like "module Baz:name<Foo::Bar>" would declare Foo::Bar and make it available as Baz

[12:21] *** census joined
[12:22] <lizmat_> we need a naming scheme that will allow for easy searching

[12:22] <FROGGS> right, but if you could do that in general, it would be cool: say OUR::Foo:ver{/^1\.<[345]>/}::Bar::

[12:22] <lizmat_> but in the context of namespaces, I guess we can get away with 'Mu' as a string

[12:22] <lizmat_> it's just not as easy to smartmatch

[12:23] <lizmat_> FROGGS: shouldn't that need to be: OUR::Foo::Bar:ver{/^1\.<[345]>/}:: ?

[12:23] <FROGGS> I hope TimToady++ doesnt read what I wrote otherwise we have some NYI's more :o)

[12:24] <FROGGS> lizmat_: both could work

[12:24] <lizmat_> I think that is an implementation detail, really, so not a TimToady++ concern?

[12:24] *** lizmat_ is now known as lizmat

[12:24] <jnthn> If that kind of thing should work is a language design concern.

[12:24] <FROGGS> I was thinking about hashes in general

[12:25] <FROGGS> if you would have hashes as keys, you could search for a key using adverbs as search patterns

[12:25] <jnthn> Hashes default to having string keys. Stashes certainly do, and if you start trying to make it otherwise it cascades out all over the place.

[12:25] <lizmat> jnthn: I agree

[12:26] <lizmat> OTOH, something similar is going on with sets of sets

[12:26] <jnthn> Anyway, I need to get back to doing $dayjob stuffs...

[12:27] <FROGGS> my %hash = ( :value<Foo>, :auth<cpan:FROGGS> ) => 'Foo/Bar.pm'; say %hash<Foo>:auth({ /FROGGS/ })

[12:28] <FROGGS> that looks perl6y to me fwiw

[12:29] <dalek> perl6-roast-data: 3de2c0a | coke++ | / (4 files):

[12:29] <dalek> perl6-roast-data: today (automated commit)

[12:29] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/3de2c0af25

[12:29] * lizmat is trying to wrap her mind around FROGGS' idea

[12:30] *** shinobicl joined
[12:30] <lizmat> hmmm… named parameters on circumfix{}

[12:31] <lizmat> it's been done, I guess:

[12:31] <lizmat> rn: my %a= ( a => 1 ); say %a<a>:p

[12:31] <camelia> rakudo 2a04f2, niecza v24-50-gba63d9a: OUTPUT«"a" => 1␤»

[12:32] <lizmat> but this syntax would then not allow you to have any "p" key in the hash of the key

[12:33] <lizmat> as it would be ambiguous

[12:33] <lizmat> rn: my %a= ( a => 1 ); say %a<a>:auth<FROGGS>

[12:33] <camelia> rakudo 2a04f2: OUTPUT«1␤»

[12:33] <camelia> ..niecza v24-50-gba63d9a: OUTPUT«Unhandled exception: Excess arguments to KERNEL Hash.postcircumfix:<{ }>, unused named auth␤  at <unknown> line 0 (KERNEL Hash.postcircumfix:<{ }> @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 183 (postcircumfix:<{ }> @ 5) ␤  at /tmp/pYzyHhkRgK line…

[12:34] *** fhelmberger left
[12:34] *** fhelmberger joined
[12:35] <FROGGS> dunno if it really is a good idea

[12:35] <FROGGS> it is a bit of a question if you need that often or not

[12:36] <lizmat> I'm not sure about the current low level implementation of sets

[12:36] <lizmat> but TimToady++ seemed to indicate a set of sets should be possible

[12:36] *** wamiks joined
[12:37] <lizmat> which would indicate some magic wrt keys there to me, if the implementation is based on hashes

[12:38] <jnthn> Yes, but those can sanely be object hashes.

[12:39] * lizmat is not sure what object hashes are

[12:39] <lizmat> you mean where the key can be on object?  then $a{Mu} would also work, no?  as Mu is also an object?

[12:40] *** shinobicl left
[12:41] <moritz> yes

[12:42] <lizmat> but object hashes are NYI, right?

[12:42] <jnthn> They're implemented but using them for Stashes is probably stupid.

[12:43] <lizmat> from a performance point of view?

[12:43] <jnthn> That, and also what happens when you need to install the thing lexically?

[12:43] *** SamuraiJack left
[12:43] <jnthn> Remember that packages in Perl 6 can be lexical.

[12:43] <lizmat> yes, but that just means they live in MY:: , no?

[12:44] <jnthn> Well, MY:: is a high-level view into them

[12:44] <FROGGS> I'm not sure at all how it will work out if you want to use several modules that just differ by auth or version...

[12:44] *** wamiks1 joined
[12:44] *** diakopte1 joined
[12:44] <jnthn> Under the hood we don't really look up most lexicals by name.

[12:44] <lizmat> FROGGS: well, that's exactly what I'm trying to figure out

[12:45] <lizmat> jnthn: it's more for introspection, I guess

[12:47] *** huf_ joined
[12:47] * FROGGS .oO(   my $dog = Dog:auth({/cpan/}).new( ... )   )

[12:48] *** dakkar_ joined
[12:48] <lizmat> FROGGS: no, you would do something like: use Pooch:name<Dog>:auth({/cpan/}); my $dog= Pooch.new(…)

[12:49] *** preflex_ joined
[12:49] <lizmat> where you could simplify this by saying: use Dog:auth({/cpan/}); my $dog= Dog.new(…)

[12:49] <FROGGS> yeah

[12:49] <lizmat> the use would make sure you have an alias (presumably OUR::) for the loaded module

[12:50] *** ivan`` joined
[12:50] <lizmat> and it would fail on the use if there was more than one candidate that matched

[12:50] *** wamiks left
[12:50] *** dayangkun left
[12:50] *** preflex left
[12:50] *** dakkar left
[12:50] *** huf left
[12:50] *** diakopter left
[12:50] *** ivan``_ left
[12:50] <FROGGS> yeah, you dont come around that alias, since you can't 'use' two modules with the same modulename in the same scope

[12:51] *** preflex_ is now known as preflex

[12:51] <lizmat> indeed

[12:52] <lizmat> see also: https://gist.github.com/lizmat/5557120

[12:52] *** btyler joined
[12:52] *** guru joined
[12:53] *** guru is now known as Guest60723

[12:53] *** Guest60723 is now known as ajr_

[12:53] <lizmat> actually, I'm not sure that that example is ever going to work, since "use" currently always implies a search in %*INC to check if already loaded

[12:57] <FROGGS> well, maybe its longname (evenlongerlongname?) must be the key of %INC then

[12:57] <FROGGS> or, hmmmm

[12:57] *** _ilbot left
[12:58] <FROGGS> damn, there is always a 'but' in my mind when writing a sentence here

[12:59] * lizmat is going to get some fresh air for some hours

[13:00] *** moritz left
[13:01] *** dayangkun joined
[13:04] *** dayangkun left
[13:04] *** ilbot6 left
[13:04] *** ilbot6 joined
[13:08] *** Targen left
[13:09] *** dayangkun joined
[13:11] *** dayangkun left
[13:14] *** _ilbot joined
[13:21] *** _ilbot left
[13:24] *** awwaiid left
[13:24] *** hypolin left
[13:24] *** TimToady left
[13:25] *** Yappo_________ left
[13:25] *** mattp___ left
[13:26] *** dakkar_ left
[13:26] *** huf_ left
[13:26] *** diakopte1 left
[13:26] *** fgomez left
[13:26] *** lizmat left
[13:26] *** xinming left
[13:26] *** berekuk left
[13:26] *** Util left
[13:26] *** bakedb_ left
[13:27] *** frdmn left
[13:28] *** odoacre_ left
[13:28] *** pecastro_ left
[13:28] *** larks left
[13:28] *** snuffles left
[13:28] *** jnthn left
[13:28] *** broquaint left
[13:28] *** jaldhar left
[13:28] *** silug____ left
[13:28] *** stevan_ left
[13:28] *** cotto left
[13:29] *** colomon left
[13:29] *** tokuhirom left
[13:29] *** Celelibi left
[13:29] *** geekosaur left
[13:29] *** Ulti_ left
[13:29] *** btyler left
[13:31] *** kivutar_ left
[13:31] *** smash_ left
[13:31] *** jlaire left
[13:31] *** mls_ left
[13:31] *** rhr left
[13:31] *** sergot_ left
[13:31] *** pmichaud_ left
[13:32] *** [Coke] left
[13:33] *** Rix left
[13:34] *** bloonix left
[13:34] *** cosimo left
[13:34] *** patspam left
[13:35] *** groky left
[13:36] *** breinbaas left
[13:36] *** krunen left
[13:36] *** djanatyn left
[13:37] *** rom1504 left
[13:37] *** ruoso left
[13:37] *** kshannon_ left
[13:37] *** pnu_ left
[13:37] *** PerlJam left
[13:37] *** gabriel_ left
[13:37] *** arnsholt left
[13:37] *** mathw left
[13:37] *** dbr left
[13:37] *** simcop2387 left
[13:38] *** Kharec left
[13:38] *** mangala left
[13:38] *** rking1 left
[13:38] *** clkao left
[13:38] *** sciurius left
[13:38] *** Tene left
[13:38] *** genehack left
[13:40] *** gfldex left
[13:40] *** Ayiko left
[13:41] *** BooK left
[13:42] *** anocelot left
[13:42] *** jercos left
[13:42] *** camelia left
[13:42] *** avarab left
[13:42] *** [particle] left
[13:42] *** mj41_ left
[13:43] *** cxreg left
[13:43] *** baest left
[13:43] *** ehouse left
[13:43] *** Maddingue left
[13:43] *** betterwo1ld left
[13:43] *** masak left
[13:44] *** wtw left
[13:44] *** felipe left
[13:46] *** tomaw left
[13:47] *** ilbot6 left
[13:49] *** kaleem left
[13:52] *** Gothmog_ left
[13:53] *** BinGOs left
[13:53] *** lestrrat left
[13:53] *** araujo_ left
[13:54] *** salv0 left
[13:54] *** FROGGS left
[13:54] *** cognominal__ left
[13:54] *** lue left
[13:54] *** Khisanth left
[13:55] *** daniel-s__ left
[13:55] *** cibs left
[13:57] *** census left
[13:58] *** ajr_ left
[13:59] *** fhelmberger left
[13:59] *** lustlife1 left
[14:01] *** sqirrel left
[14:02] *** bruges_ left
[14:14] *** scottp left
[14:28] *** mtk left
[14:35] *** s1n1 left
[14:37] *** jerome__ left
[14:39] *** nwc10 left
[14:51] *** szbalint left
[14:58] *** bonsaikitten left
[14:59] *** prammer_ left
[15:09] *** sjohnson left
[15:41] *** __sri left
[16:57] *** jfried left
[17:31] *** sdgvf_ left
[17:52] *** MrMeek left
[18:05] *** GlitchMr left
[18:19] *** sjn left
[18:45] *** eternaleye left
[18:47] *** nyuszika7h left
[19:03] *** mikemol_ left
[19:10] *** labster left
[19:26] *** atrodo left
[20:03] *** rjbs left
[20:04] *** ggoebel left
[20:06] *** espent left
[20:06] *** `patch` left
[20:08] *** flussence left
[20:09] *** revdiablo left
[20:10] *** SHODAN left
[20:10] *** swarley left
[20:13] *** ilogger2 joined
[20:13] *** ChanServ sets mode: +v ilogger2

[20:14] <lizmat> rn: my %a= (a => 1, b => 2); say %a{*} :delete:p   # shouldn't this return pairs ?

[20:14] <camelia> niecza v24-50-gba63d9a: OUTPUT«(Any)␤»

[20:14] <camelia> ..rakudo 2a04f2: OUTPUT«1 2␤»

[20:15] <jnthn> I'm...not sure you can stack 'em...

[20:15] <colomon> rn: my %a= (a => 1, b => 2); say %a{*} :delete

[20:15] <camelia> niecza v24-50-gba63d9a: OUTPUT«(Any)␤»

[20:15] <camelia> ..rakudo 2a04f2: OUTPUT«1 2␤»

[20:15] <lizmat> niecza seems wrong here

[20:15] <colomon> rn: my %a= (a => 1, b => 2); say %a{'a'} :delete

[20:15] <camelia> rakudo 2a04f2, niecza v24-50-gba63d9a: OUTPUT«1␤»

[20:16] <colomon> rn: my %a= (a => 1, b => 2); say %a{'a'} 

[20:16] <camelia> rakudo 2a04f2, niecza v24-50-gba63d9a: OUTPUT«1␤»

[20:16] <colomon> rn: my %a= (a => 1, b => 2); say %a{*} 

[20:16] <camelia> rakudo 2a04f2, niecza v24-50-gba63d9a: OUTPUT«1 2␤»

[20:16] <lizmat> well, some stacking may be nonsensical

[20:16] <colomon> indeed

[20:17] <colomon> lizmat++

[20:18] <lizmat> my %a= (a => 1, b => 2, c => 3); my %b= %a<a b> :delete:p; say %a; say %b   # use case for :delete:p

[20:18] <lizmat> rn: my %a= (a => 1, b => 2, c => 3); my %b= %a<a b> :delete:p; say %a; say %b   # use case for :delete:p

[20:18] <camelia> niecza v24-50-gba63d9a: OUTPUT«{"c" => 3}␤{"1" => 2}␤»

[20:18] <camelia> ..rakudo 2a04f2: OUTPUT«("c" => 3).hash␤("1" => 2).hash␤»

[20:18] <lizmat> would have expected {c => 3} {a=>1, b=>2}

[20:22] <pmichaud_> Can't stay long -- I just added a note to RT #117935

[20:22] <pmichaud_> (haven't read backscroll either... just read the ticket)

[20:23] <lizmat> pmichaud++ even if it is only for a small time

[20:23] <pmichaud> 19:32 <lizmat> r: say True ?^ True  # shouldn't this be False ?

[20:23] <pmichaud> Yes, that should probably be False.

[20:23] <pmichaud> But

[20:24] <pmichaud> r: say (True ^ True);

[20:24] <camelia> rakudo 2a04f2: OUTPUT«one(True, True)␤»

[20:24] <pmichaud> er

[20:24] <pmichaud> r: say (True ^^ True);

[20:24] <camelia> rakudo 2a04f2: OUTPUT«Nil␤»

[20:24] <pmichaud> That one is correct.

[20:24] <pmichaud> r: say (True xor True)

[20:24] <camelia> rakudo 2a04f2: OUTPUT«Nil␤»

[20:24] <pmichaud> That one is correct too.

[20:24] <colomon> n: say (True ^^ True);

[20:24] <camelia> niecza v24-50-gba63d9a: OUTPUT«Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object␤  at Niecza.StashCursor.Core (System.String key, Boolean final, Niecza.StashCursor& sc, Niecza.Variable& v, Niecza.Variable bind_to) [0x00000] in <file…

[20:25] <colomon> ugh

[20:25] <pmichaud> oops

[20:25] <pmichaud> Nil is no longer correct, it should now be ()

[20:25] <pmichaud> wait

[20:26] <pmichaud> huh?

[20:26] * pmichaud re-reads the now updated spec.

[20:28] *** SamuraiJack joined
[20:28] *** snuffles joined
[20:28] *** japhb joined
[20:28] *** btyler_ joined
[20:28] *** Chillance joined
[20:28] *** jferrero joined
[20:28] *** xilo_ joined
[20:28] *** prammer_ joined
[20:28] *** yx joined
[20:28] *** ilbot6 joined
[20:28] *** lestrrat joined
[20:28] *** salv0 joined
[20:28] *** lue joined
[20:28] *** Khisanth joined
[20:28] *** rindolf joined
[20:28] *** SamuraiJack left
[20:28] <pmichaud> okay, spec says that  True ^^ True should return False.

[20:28] <pmichaud> and True xor True should return False

[20:29] <pmichaud> and 1 ^^ 1 should return False

[20:29] <pmichaud> except in mythical list context, these are to magically return () somehow.

[20:29] <pmichaud> so I call fossil.

[20:29] <masak> o.O

[20:29] <masak> what was the original rationale for returning Nil? I forget.

[20:30] <pmichaud> apparently the spec never said Nil, or at least it hasn't said that since 2011

[20:30] <pmichaud> but the rationale would be that Nil acts like False in item context and it acts like () in list context.

[20:30] <pmichaud> which is what the spec says.

[20:30] <pmichaud> (acts like () in list context before the recent changes to the meaning of Nil)

[20:31] <pmichaud> anyway, I call fossil and think we need a spec issue to get it cleared up.  :)

[20:32] <dalek> nqp/rak-jvm-support: 740258f | jnthn++ | src/vm/jvm/ (2 files):

[20:32] <dalek> nqp/rak-jvm-support: Assorted code-gen improvements.

[20:32] <dalek> nqp/rak-jvm-support: 

[20:32] <dalek> nqp/rak-jvm-support: With these, we now get a CORE.setting.class generated.

[20:32] <dalek> nqp/rak-jvm-support: review: https://github.com/perl6/nqp/commit/740258fbea

[20:32] <pmichaud> grrrr... RT just sent another 36-hour-old bug report.

[20:32] <pmichaud> jnthn++ 

[20:33] <jnthn> At first I was a bit shocked it's 9MB. Then I checked how big the PBC is, which weighs in at 16 MB...

[20:33] <pmichaud> oh, and I just got a 48 hour old bug report also.

[20:35] <nwc10> yay

[20:35] <masak> \o/

[20:35] *** araujo joined
[20:35] *** araujo left
[20:35] *** araujo joined
[20:38] *** vaelxon joined
[20:40] <jnthn> bbi10

[20:42] <[Coke]> r: my $c; my $name; BEGIN { say "1"; $c = { say "OH HAI $name" } }; $name = "masak; $c();

[20:42] <camelia> rakudo 2a04f2: OUTPUT«1␤===SORRY!===␤Unable to parse expression in double quotes; couldn't find final '"'␤at /tmp/vuTcTJgfpt:1␤------> OH HAI $name" } }; $name = "masak; $c();⏏<EOL>␤    expecting any of:␤        postfix␤        argument list␤»…

[20:42] <dalek> v5: 01c9bc7 | (Tobias Leich)++ | lib/Perl5/Actions.nqp:

[20:42] <dalek> v5: make $@ always a string

[20:42] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/01c9bc710c

[20:42] <dalek> v5: d495a3c | (Tobias Leich)++ | lib/Perl5/Grammar.nqp:

[20:42] <dalek> v5: distingiush between eval BLOCK and eval EXPR

[20:42] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/d495a3c08b

[20:42] <dalek> v5: 16b80bd | (Tobias Leich)++ | lib/Perl5/Terms.pm:

[20:43] <dalek> v5: proper value for $/

[20:43] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/16b80bd700

[20:43] <[Coke]> r: my $c; my $name; BEGIN { say "1"; $c = { say "OH HAI $name" } }; $name = "masak"; $c();

[20:43] <camelia> rakudo 2a04f2: OUTPUT«1␤use of uninitialized value of type Any in string context  in block  at /tmp/Gl_wB_rfCf:1␤␤OH HAI ␤»

[20:43] <[Coke]> r: my $c; my $name; BEGIN { say "1"; $c = sub { say "OH HAI $name" } }; $name = "masak"; $c();

[20:43] <camelia> rakudo 2a04f2: OUTPUT«1␤use of uninitialized value of type Any in string context  in sub  at /tmp/nZvStnLTwR:1␤␤OH HAI ␤»

[20:44] <[Coke]> r: my $c = { say "alive"};

[20:44] <camelia> rakudo 2a04f2:  ( no output )

[20:44] <[Coke]> r: my $c = { say "alive"}; $c();

[20:44] <camelia> rakudo 2a04f2: OUTPUT«alive␤»

[20:47] *** rindolf left
[20:51] *** xinming joined
[20:52] *** rindolf joined
[20:54] <dalek> perl6-examples: 08f6933 | (David Warring)++ | parsers/CSSGrammar.pm:

[20:54] <dalek> perl6-examples: added css grammar comments; tweaked newline handling

[20:54] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/08f6933417

[20:54] <dalek> perl6-examples: 82fa422 | (David Warring)++ | rosalind/ (4 files):

[20:54] <dalek> perl6-examples: Merge branch 'master' of github.com:perl6/perl6-examples

[20:54] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/82fa422d74

[20:58] *** japhb_ joined
[21:00] *** alester joined
[21:07] *** rindolf left
[21:07] *** rindolf joined
[21:09] *** leprevost joined
[21:11] <lizmat> seems like creating a candidate for true values of a named parameter silently doesn't work, is that correct?

[21:11] <lizmat> something like "multi method postcircumfix:<{ }>(\SELF: $key, :$exists! where True )"

[21:13] <flussence> r: say 1 ~~ True

[21:13] <camelia> rakudo 2a04f2: OUTPUT«Potential difficulties:␤    Smartmatch against True always matches; if you mean to test the topic for truthiness, use :so or *.so or ?* instead␤    at /tmp/djMcaWxYio:1␤    ------> say 1 ~~⏏ True␤1True␤»

[21:13] <flussence> that might be your problem

[21:14] <lizmat> r: say 0 ~~ True

[21:14] <camelia> rakudo 2a04f2: OUTPUT«Potential difficulties:␤    Smartmatch against True always matches; if you mean to test the topic for truthiness, use :so or *.so or ?* instead␤    at /tmp/y6p9nFOENV:1␤    ------> say 0 ~~⏏ True␤0True␤»

[21:14] <lizmat> r: say True ~~ 1

[21:14] <camelia> rakudo 2a04f2: OUTPUT«True␤»

[21:14] <lizmat> r: say True ~~ 0

[21:14] <camelia> rakudo 2a04f2: OUTPUT«False␤»

[21:14] <lizmat> aha… ok

[21:17] <flussence> (I didn't know there was a :so, that looks like it'll come in useful...)

[21:19] *** leprevost left
[21:23] <sorear> smartmatching against Pair does a dynamic method call

[21:23] <sorear> foo ~~ :bar tests like foo.bar

[21:23] <sorear> foo ~~ :bar(quux) tests like foo.bar ~~ quux

[21:24] <flussence> sorear++ # *That* is useful to know

[21:31] <[Coke]> r: say 3 ~~ :Rat(23) ; say 3.Rat ~~ 23

[21:31] <camelia> rakudo 2a04f2: OUTPUT«True␤False␤»

[21:31] *** leprevost joined
[21:32] *** rindolf left
[21:33] *** rindolf joined
[21:36] <dalek> v5: 063bd31 | (Tobias Leich)++ | t/test.pl:

[21:36] <dalek> v5: added stubs for native_to_latin1 and latin1_to_native

[21:36] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/063bd3121c

[21:36] <dalek> v5: 554f8f3 | (Tobias Leich)++ | lib/Perl5/ (2 files):

[21:36] <dalek> v5: treat "local" like "my"

[21:36] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/554f8f3962

[21:38] <lizmat> FROGGS: in Perl 5, local is dynamic like temp

[21:41] <FROGGS> err, what do you mean?

[21:42] <lizmat> perl5: our $a="foo"; do { say $a; local $a= "bar"; say $a }; say $a

[21:42] <lizmat> p5eval: our $a="foo"; do { say $a; local $a= "bar"; say $a }; say $a

[21:42] <p5eval> lizmat: foobarfoo1

[21:43] <FROGGS> r: our $a="foo"; do { say $a; my $a= "bar"; say $a }; say $a

[21:43] <camelia> rakudo 2a04f2: OUTPUT«===SORRY!===␤Lexical symbol '$a' is already bound to an outer symbol;␤the implicit outer binding must be rewritten as OUTER::<$a>␤before you can unambiguously declare a new '$a' in this scope␤at /tmp/e6zyFr8ck_:1␤------> our $a="foo"; do { sa…

[21:43] <FROGGS> r: our $a="foo"; do { say $a; temp $a= "bar"; say $a }; say $a

[21:43] <camelia> rakudo 2a04f2: OUTPUT«foo␤bar␤foo␤»

[21:43] <FROGGS> I see

[21:43] <masak> p5eval: our $x = "foo"; sub quux { say $x }; do { say $x; local $x = "bar"; quux }; $x

[21:43] <p5eval> masak: foobarfoo

[21:43] <lizmat> masak++

[21:44] <masak> that shows the dynamic part.

[21:44] <lizmat> indeed

[21:44] <tadzik> wikipedia says: "he has more than 8000 likes on facebook"

[21:44] <tadzik> what the fuck, really. Who cares. What does that even mean.

[21:45] <lizmat> also: local $a without assignment sets $a to undef

[21:45] <tadzik> https://en.wikipedia.org/wiki/Stubbs_(cat)

[21:45] <FROGGS> yeah... # lizmat++, masak++

[21:46] <lizmat> spectesting :exists & :delete fixes

[21:47] <lizmat> will look at it tomorrow and commit tomorrow

[21:47] <lizmat> goodnight #perl6!

[21:47] <colomon> o/

[21:48] <FROGGS> gnight all

[21:50] *** btyler_ left
[21:51] *** donaldh joined
[21:53] *** btyler joined
[21:56] *** xilo_ left
[22:05] *** kbenson1 joined
[22:05] *** Ulti_ joined
[22:07] <masak> 'night, #perl6

[22:07] *** dmol joined
[22:11] *** sorear joined
[22:11] *** [bjoern] joined
[22:11] *** kurahaupo joined
[22:12] *** itz joined
[22:15] *** rindolf left
[22:20] *** pecastro joined
[22:21] *** btyler left
[22:22] *** btyler joined
[22:29] *** sorear left
[22:30] *** skids joined
[22:31] *** sorear joined
[22:34] *** sorear left
[22:35] *** sorear joined
[22:39] *** sorear left
[22:39] *** sorear joined
[22:43] *** dmol left
[22:45] *** xilo joined
[22:49] *** btyler left
[22:49] *** Targen joined
[22:51] *** jaldhar_ joined
[22:58] *** Vlavv joined
[22:59] *** gtodd joined
[23:00] *** woosley joined
[23:01] *** hugme joined
[23:01] *** ChanServ sets mode: +v hugme

[23:12] *** donaldh left
[23:12] *** lue left
[23:14] <jnthn> 'night, #perl6

[23:15] *** lue joined
