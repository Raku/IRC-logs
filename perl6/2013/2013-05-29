[00:17] *** stevan_ left
[00:18] *** ajr_ left
[00:20] *** stevan_ joined
[00:24] *** dayangkun joined
[00:26] <dalek> specs: 346540c | labster++ | S32-setting-library/IO.pod:

[00:26] <dalek> specs: add IO::Handle.IO noop

[00:26] <dalek> specs: review: https://github.com/perl6/specs/commit/346540cbe0

[00:41] *** aindilis joined
[00:52] * grondilu wonders why there is so much spam on RC

[00:55] *** lustlife joined
[00:58] *** jlaire left
[00:59] *** jlaire joined
[01:07] *** anuby joined
[01:22] *** dayangkun left
[01:22] <dalek> perl6-bench: b5ff52a | (Geoffrey Broadwell)++ | timeall:

[01:22] <dalek> perl6-bench: Increase default for ENOUGH_TIME to 5.0 seconds; increase count of scale 0 compile/override time runs to same as startup_runs

[01:22] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/b5ff52a2d4

[01:27] *** [particle]1 joined
[01:30] *** [particle] left
[01:30] *** japhb_ left
[01:38] *** snoopy joined
[01:57] *** ingy left
[01:57] *** ingy joined
[01:59] *** ingy left
[01:59] *** ingy joined
[02:02] *** ingy left
[02:05] *** grondilu left
[02:06] *** snearch_ joined
[02:09] *** snearch left
[02:11] *** adu joined
[02:17] *** ingy joined
[02:19] *** ingy left
[02:19] *** ingy joined
[02:51] *** xinming joined
[02:57] *** snearch_ left
[03:03] *** Vlavv left
[03:08] *** arlinius left
[03:15] *** Vlavv joined
[03:27] *** leontopod_ is now known as Teratogen

[03:42] *** RandalSchwartz joined
[03:42] <RandalSchwartz> Uh... why is there a perl6 release, but not a rakudo release?

[03:42] <RandalSchwartz> I'm *very* confused

[03:43] <RandalSchwartz> rakudo seems not updated since febuary

[03:43] <adu> hmm

[03:43] <RandalSchwartz> did I miss a memo? :)

[03:44] <adu> maybe it's one of those 2.0.0.0.0.0.1 releases

[03:44] <RandalSchwartz> well - rakudo star had been good about a monthly release, and now it stoppped

[03:44] <RandalSchwartz> very curious

[03:44] <adu> maybe someone's on vacation

[03:45] <RandalSchwartz> the project can't stop for one person

[03:45] <RandalSchwartz> and for 3 months

[03:45] <Teratogen> hey Randal =)

[03:46] <RandalSchwartz> Hey Teratogen

[03:46] <RandalSchwartz> do you know anything about this release interruption?

[03:46] <Teratogen> I'm waiting for Perl 6 1.0

[03:46] <Teratogen> no, no I don't

[03:50] <RandalSchwartz> where transaction_type in ('SALE', 'PAY')

[03:50] *** arlinius joined
[03:50] <RandalSchwartz> oops

[03:50] *** preflex_ joined
[03:52] *** preflex left
[03:52] *** preflex_ is now known as preflex

[03:52] *** Pleiades` left
[03:56] <sorear> o hai

[04:01] *** fhelmberger joined
[04:02] *** fhelmberger left
[04:06] *** atroxaper joined
[04:09] <RandalSchwartz> still wondering why the rakudo thing is broken

[04:11] <pmichaud> RandalSchwartz: no star release because we've had some errors in the modules

[04:11] <pmichaud> we _think_ we have those cleaned up now, and expect a 2013.05 release this week.

[04:12] <pmichaud> but since one of the purposes of Rakudo Star is to provide some stability across releases, it hasn't seemed appropriate to release when we know that key modules are broken.

[04:13] <RandalSchwartz> ahh... was just used to the regular release

[04:13] <RandalSchwartz> so it seemed odd that they stopped

[04:13] <pmichaud> agreed.

[04:13] <RandalSchwartz> was there a blog post to say that?

[04:14] <pmichaud> no, there wasn't, and probably should have been.

[04:14] <pmichaud> another reason the releases have been delayed is because I've been essentially without tuits since mid-March.

[04:14] <RandalSchwartz> ok, as an interested consumer, that might have been useful :)

[04:15] <pmichaud> normally we'd find someone else to cut the release in that case, but with the module errors we didn't have people with the right skill set, apparently.

[04:16] <pmichaud> I think I'll add a note to the Star release guide that says that if a regularly scheduled release is missed, we make a blog post to that effect.

[04:16] *** zby_home joined
[04:16] *** zby_home left
[04:22] <dalek> star: cabee9d | pmichaud++ | modules/ (3 files):

[04:22] <dalek> star: More module updates for 2013.05 release.

[04:22] <dalek> star: review: https://github.com/rakudo/star/commit/cabee9dc58

[04:23] <dalek> star: 1631f37 | pmichaud++ | tools/star/Makefile:

[04:23] <dalek> star: Bump to use Parrot 5.3.0 (supported) instead of 5.2.0 (devel).

[04:23] <dalek> star: review: https://github.com/rakudo/star/commit/1631f371f2

[04:26] *** Psyche^ joined
[04:29] *** Patterner left
[04:29] *** Psyche^ is now known as Patterner

[04:39] *** anuby_ joined
[04:43] *** anuby left
[04:44] *** yakshavr left
[04:51] *** avuserow joined
[04:51] <avuserow> hi perl6ers

[04:51] * avuserow is giving weechat a spin

[04:51] <diakopter> hi

[04:52] <avuserow> hi diakopter, how goes?

[04:52] <diakopter> differently than I'd expected the last 2 months, but interestingly awesome

[04:52] <sorear> hello avuserow

[04:52] <diakopter> (.. along with some large fail along the way)

[04:53] <avuserow> so what have you been working on recently?

[04:55] <diakopter> helping w/ yapc the last 2 months

[04:55] <avuserow> oh cool. I'm looking forward to it :)

[04:56] <diakopter> you're going?

[04:56] <diakopter> or will watch the livestreams?

[04:57] <diakopter> sorry if I don't know your name :(

[04:58] <avuserow> I'll be going

[04:58] <avuserow> I don't know if I ever posted much?

[04:58] * sorear will also be going

[04:58] <avuserow> :D

[04:58] * sorear has not done much with p6 for months

[04:58] *** birdwindupbird joined
[04:58] <avuserow> yeah me neither. I did GSoC in 2008 for Perl 6 tests under an ancient handle

[04:59] <diakopter> ah, there you are

[05:00] <sorear> if you don't mind me asking, what handles have you used with perl 6 recently?

[05:00] <sorear> I joined the project in feb 2010, if you did nothing since then then I wouldn't know you :(

[05:00] *** adu left
[05:00] <avuserow> nope, nothing since then

[05:00] <avuserow> university work kept me very busy

[05:01] <avuserow> I'm hoping to get back into contributing occasionally, either here or on CPAN. I have a neglected module there :\

[05:03] <diakopter> Auzon

[05:03] <avuserow> :)

[05:03] <avuserow> the internet never forgets

[05:05] <avuserow> oh right I forgot, this is when all the happy European hackers are sleeping :)

[05:07] <diakopter> yeah it's just all us blasé far westerners

[05:07] <avuserow> r: say "hello"

[05:07] <camelia> rakudo 8a0859: OUTPUT«hello␤»

[05:08] <avuserow> sweet, unicode seems to work

[05:08] <sorear> n: say "hello"

[05:08] <camelia> niecza v24-51-g009f999: OUTPUT«hello␤»

[05:08] <avuserow> niecza++ :)

[05:09] <TimToady> p: say "hello"

[05:09] <camelia> pugs: OUTPUT«hello␤»

[05:09] <sorear> nqp-jvm: say "moo"

[05:09] <sorear> nqpjvm: say("moo")

[05:10] <camelia> nqp-jvm: OUTPUT«Confused at line 2, near "say \"moo\""␤  in panic␤  in comp_unit␤  in TOP␤  in parse␤  in parse␤  in <anon>␤  in compile␤  in eval␤  in evalfiles␤  in command_eval␤  in command_line␤  in MAIN␤  in <anon>␤  in <anon>»

[05:10] <Teratogen> p: say "Hello, world!"

[05:10] <camelia> pugs: OUTPUT«Hello, world!␤»

[05:10] <sorear> nqp-jvm: say("moo")

[05:10] <pmichaud> feather is thrashing at the moment for some reason

[05:10] <camelia> nqp-jvm: OUTPUT«moo␤»

[05:10] *** fhelmberger joined
[05:10] <sorear> pmichaud: 1 or 3?

[05:10] <pmichaud> 1, I guess.

[05:10] <pmichaud> feather.perl6.nl

[05:10] <avuserow> is that where camelia is these days?

[05:10] <TimToady> std: say "ok 00:00 45m"

[05:10] <camelia> std 0336087: OUTPUT«ok 00:00 42m␤»

[05:10] *** prevost left
[05:11] <pmichaud> yay, all module tests pass with current R*

[05:11] <sorear> avuserow: last I heard, camelia is split between 1 (compiler builds) and 3 (execution)

[05:11] <TimToady> \o/ quick add more modules

[05:11] <pmichaud> [pmichaud@feather ~]$ uptime 05:11:05 up 111 days,  9:49, 28 users,  load average: 27.60, 23.51, 17.28

[05:11] <sorear> Lovely

[05:11] <Teratogen> moar module

[05:11] <Teratogen> s

[05:12] <Teratogen> that is a hefty load average, sorear

[05:12] <TimToady> we'll have moar modules pretty soon now

[05:12] * diakopter quantum shifts a little

[05:14] <sorear> Teratogen: you meant pmichaud

[05:14] <pmichaud> http://pmichaud.com/sandbox/rakudo-star-2013.05-rc1.tar.gz  # release candidate for R* 2013.05

[05:15] <Teratogen> oops

[05:15] <pmichaud> I'll look for comments overnight and publish a R* release tomorrow, .msi to follow shortly after that.

[05:15] <sorear> \o/

[05:19] <pmichaud> anyway, bedtime here -- be back tomorrow morning

[05:21] <diakopter> pmichaud: 'nite

[05:51] *** dmol joined
[06:01] *** FROGGS joined
[06:11] *** s1n left
[06:15] *** RandalSchwartz left
[06:26] *** s1n joined
[06:29] *** kaleem joined
[06:49] *** dmol left
[06:51] *** yves_ left
[06:58] *** dmol joined
[06:59] *** dmol left
[07:00] *** domidumont joined
[07:03] *** dalecooper joined
[07:04] <dalek> specs: 4f0895b | larry++ | S32-setting-library/Numeric.pod:

[07:04] <dalek> specs: add lsb and msb methods to Int

[07:04] <dalek> specs: review: https://github.com/perl6/specs/commit/4f0895bf86

[07:17] <dalek> star: abacc10 | moritz++ | docs/announce/2013.05.md:

[07:17] <dalek> star: [announce] minor formatting update

[07:17] <dalek> star: review: https://github.com/rakudo/star/commit/abacc10274

[07:20] *** yves_ joined
[07:20] <moritz> I just tried to build an R* tarball myself, and somehow it didn't download rakudo and parrot

[07:21] <Teratogen> that does not sound good

[07:23] *** domidumont left
[07:24] *** domidumont joined
[07:28] *** avuserow left
[07:30] <sorear> um

[07:32] <FROGGS> moritz: looks like you have to do that manually

[07:32] <moritz> I'm pretty sure that's now how it's supposed to be

[07:33] <sorear> that is not the standard, least-surprising definition of msb and lsb

[07:33] <sorear> equivalently: those are not the standard, least-surprising names for ctz and clz

[07:34] * moritz wouldn't expect to be able to find least-surprising defintion for msb on an arbitrary-size type like Int

[07:34] *** preflex left
[07:35] *** preflex_ joined
[07:35] *** preflex_ is now known as preflex

[07:36] <sorear> +(* < 0)

[07:37] <sorear> (if you think 2-adically...)

[07:37] *** DarthGandalf joined
[07:38] <sorear> that would however still be rather problematic because my uint8 $x;  $x.msb # you're calling Int.msb here even if you don't realize it because uint8 is only a a container type

[07:39] *** sqirrel joined
[07:40] *** rindolf joined
[07:40] *** rindolf left
[07:45] *** DarthGandalf left
[07:47] *** salv0 left
[07:48] *** salv0 joined
[07:49] *** DarthGandalf joined
[07:53] *** anuby_ left
[07:53] *** anuby joined
[07:54] *** raiph left
[07:59] *** rindolf joined
[08:03] *** FROGGS left
[08:13] *** raiph joined
[08:16] *** FROGGS joined
[08:18] *** rindolf left
[08:21] *** FROGGS left
[08:25] *** mikemol left
[08:25] *** Juerd left
[08:29] *** anuby_ joined
[08:31] *** Juerd joined
[08:32] *** anuby left
[08:35] <masak> the CSP program from yesterday runs about 2 seconds faster if I multiply all the coefficients by 100 and solve the problem with Int variables.

[08:36] *** dakkar joined
[08:37] <labster> morning masak

[08:37] <sorear> feh.  I started to read that and was all OOO WE CAN HAS MULTITHREADINGS?

[08:37] <sorear> o/ masak

[08:48] *** mikemol joined
[08:49] *** rindolf joined
[08:50] *** FROGGS joined
[08:54] *** arlinius left
[09:04] <bbkr> pmichaud: HTTP::Easy or JSON::RPC does not work in star RC (after request is sent to server it does not return response). I'm debugging it right now

[09:05] *** jaldhar left
[09:12] <bbkr> can you please run following code on Star RC:  use HTTP::Easy::PSGI; my $app = sub (%env) { print %env.perl; return [ 204, [ ], [ ] ]; }; my $psgi = HTTP::Easy::PSGI.new( host => "", port => 8080); $psgi.app( $app ); $psgi.run;

[09:12] <bbkr> and then wget http://localhost:8080 ?

[09:13] <bbkr> In my case wget awaits response and $app sub receives and prints it after killing wget

[09:14] <tadzik> is it just me, or is feather a bit laggy recently/

[09:17] <sorear> tadzik: 22:11 < pmichaud> [pmichaud@feather ~]$ uptime 05:11:05 up 111 days,  9:49, 28 users,  load average: 27.60, 23.51, 17.28

[09:19] <tadzik> that'll explain it

[09:19] <tadzik> azawawi's perlbrew is milling, and so are sergot's cronjobs

[09:20] <sorear> kill them all

[09:20] <tadzik> I don't have root here

[09:20] <sorear> bah

[09:20] *** risou_awy is now known as risou

[09:20] * sorear has root

[09:20] * sorear attempts to log in

[09:21] * sorear is having trouble...

[09:21] *** saxx11 joined
[09:21] *** saxx11 left
[09:21] <masak> yeah, logging in is slow today.

[09:21] <lizmat> you probably need patience on a box that is that loaded

[09:22] <sorear> WOOH I HAVE THE MOTD

[09:30] *** espadrine left
[09:31] <sorear> I've killed the offending processes and disabled sergot's crontab

[09:32] <tadzik> probably sergot's jobs should be running on some big niceness

[09:32] <sorear> .tell sergot_ Please rewrite your crontab so that when the load average is 25 and single perl6 jobs take hours, you don't start MORE JOBS

[09:32] <yoleaux> sorear: I'll pass your message to sergot_.

[09:32] <tadzik> that'll help too

[09:32] <sorear> guy was running five tasks per hour

[09:33] <Teratogen> reboot

[09:33] <tadzik> yeah, sure

[09:34] <sorear> I forget, do I ban him on sight?

[09:34] <Teratogen> who me?

[09:34] <Teratogen> no

[09:35] *** eternaleye left
[09:36] <sorear> do we even USE gitit?

[09:36] <sorear> there's a git-backed wiki engine running on feather1, and it's the biggest consumer of memory now

[09:36] <moritz> it powers http://wiki.perl6.org/

[09:37] <moritz> yes, we use it

[09:37] <sorear> :(

[09:37] *** eternaleye joined
[09:37] <moritz> but I'm sure you can restart it, and it'll use less memory afterwards

[09:37] <moritz> maybe we should start it with an ulimit

[09:38] <FROGGS> (and/or restart it by cron.weekly)

[09:39] <moritz> fwiw I've restartet gitit now

[09:39] <pmichaud> maybe also see if it's being hit hard by spiders

[09:39] <pmichaud> I had trouble with that with my wiki engines at one time

[09:39] <sorear> there's a farabi process running that's consumed a huge amount of resources; any way to check if that's actually being used?

[09:40] <moritz> yes: kill it, and see if anybody complains

[09:40] <pmichaud> nowadays I have .htaccess entries that refuse to serve pages to bots when the server load level > 5.0

[09:41] <pmichaud> Yahoo's Slurp bot is one of the worst offenders by far.

[09:41] <bonsaikitten> caching, proper robots.txt to throttle robots ...

[09:41] <moritz> pmichaud: funny, IME it's bing :-)

[09:41] <moritz> pmichaud: want to share your .htaccess?

[09:42] <pmichaud> well, I haven't looked in several years.  But when I did some log evaluations several years ago, Slurp was making 1500+ requests for the same page per day.

[09:42] <moritz> pmichaud: ah, I think yahoo stopped crawling about a year ago, and now uses microsoft's index

[09:42] <pmichaud> hmmm, I still find Slurp in my log entries. anyway, getting .htaccess

[09:44] *** raiph left
[09:47] <sorear> did one of you kill the azawawi stuff?

[09:48] <pmichaud> oh, looks like I do the load-level check in the wiki software itself, not in .htaccess

[09:49] <sorear> judging from how long the find is taking we clearly have too many files on feather...:D

[09:50] <shachaf> What is feather?

[09:50] <sorear> feather.perl6.nl

[09:51] <sorear> crappy VM that runs stuff for a bunch of people, perpetually broken

[09:51] <sorear> ehhh I need to sleep

[09:51] <shachaf> Aha.

[09:51] <shachaf> ♞

[09:51] <sorear> s/crappy/small/ mostly

[09:52] <sorear> but I shouldn't complain, it's donated hardware

[09:52] <masak> aye. Juerd++

[09:52] * sorear goes to bed before he says any more stupid things

[09:52] <pmichaud> what is oidentd and why are there 122 of them running on feather?  ;-)

[09:54] <Teratogen> oidentd is auth port 113

[09:54] <Teratogen> used by irc to "identify" users

[09:54] <Teratogen> there should be one (1) oidentd running

[09:55] *** arlinius joined
[09:55] <Teratogen> how do I know?  I just installed oidentd on my amazon vps

[09:55] <Teratogen> oidentd is an identd daemon/server

[09:55] <Teratogen> there should only be one running on a box

[09:55] <Teratogen> but check oidentd.conf

[09:55] <Teratogen> maybe you have something interesting going on

[09:56] <Teratogen> there should be only one running on an instance of an operating system, I should say

[09:57] *** ponbiki is now known as ohi3

[10:07] *** daxim joined
[10:11] <dalek> v5: ebdb97d | (Tobias Leich)++ | / (3 files):

[10:11] <dalek> v5: added primitive support for subroutine signatures

[10:11] <dalek> v5: 

[10:11] <dalek> v5: It can basically handle only $ and @-tokens, where $-tokens are (wrongly)

[10:11] <dalek> v5: treated as optionals. Calling a $$-sub with three args will die already.

[10:11] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/ebdb97d315

[10:12] <daxim> http://developers.slashdot.org/story/13/05/29/0225227/dao-a-new-programming-language-supporting-advanced-features-with-small-runtime

[10:16] <pmichaud> afk, sleep (hopefully)

[10:20] *** espadrine joined
[10:25] *** rindolf left
[10:28] *** rindolf joined
[10:35] *** eternaleye left
[10:55] * lizmat started a new spec issue "What to do with 2+ modules at UNIT level" at https://github.com/perl6/specs/issues/46

[10:59] <lizmat> afk while doing preparations for trip to Austin TX

[11:00] <moritz> daxim: thanks, looks quite interesting

[11:03] *** espadrine left
[11:04] <colomon> msb and lsb?

[11:05] *** jerome__ left
[11:07] *** jaldhar joined
[11:12] *** perl6 joined
[11:14] <perl6> Qwerty

[11:14] <Teratogen> uiop

[11:14] *** perl6 left
[11:15] <lizmat> r: {module A { sub a is export { say "a" } }}; import A; a  # should this work?  

[11:15] <camelia> rakudo 8a0859: OUTPUT«a␤»

[11:15] <lizmat> I would assume A would not be visible in the outer scope, yet we can import from it?

[11:16] <lizmat> afk again

[11:16] *** fhelmberger left
[11:18] *** jerome__ joined
[11:19] *** atroxaper-m joined
[11:19] <moritz> lizmat: modules are our-scoped by default

[11:20] <masak> was gonna say.

[11:20] <moritz> lizmat: so it's visible from the outer scope

[11:20] *** fhelmberger joined
[11:20] *** eternaleye joined
[11:22] *** atroxaper left
[11:22] <lizmat> ok, thanks for the reality check

[11:23] <lizmat> r: {my module A { sub a is export { say "a" } }}; import A; a  # indeed fails  

[11:23] <camelia> rakudo 8a0859: OUTPUT«[31m===[0mSORRY![31m===[0m␤Could not find module A to import symbols from␤at /tmp/3C3gQnQees:1␤------> [32msub a is export { say "a" } }}; import A[33m⏏[31m; a  # indeed fails[0m␤    expecting any of:␤        postfix␤        statement end␤        statement …

[11:24] * lizmat wonders what the use of an "is export" sub in a "my module"

[11:24] <lizmat> is there a way to import that sub then at all?  If not, maybe it should generate a warning ?

[11:24] *** atroxaper joined
[11:25] <masak> &

[11:25] <lizmat> it being " using is export on a sub in a lexically bound module"

[11:26] *** atroxaper-m left
[11:26] *** atroxaper left
[11:27] <masak> TimToady: it is not clear to me from https://github.com/perl6/specs/commit/4f0895bf8669b8a87d9b257172b89e736108f061 what lsb and msb actually return. specifically, isn't "the least significant bit position" always 0?

[11:28] <timotimo> i'm kind of bummed that we can't make set(1, 2, 3, 4) ~~ set(*, *, 2, 3) work properly (or can we!)

[11:29] *** SamuraiJack joined
[11:32] <colomon> TimToady: what masak just said.

[11:32] <colomon> timotimo: don't think so

[11:33] *** SamuraiJack_ joined
[11:35] *** SamuraiJack left
[11:35] <colomon> timotimo: note what you're testing is relatively easily checked using cardinality and subset, something like $set == 4 && set(2, 3) (<) $set

[11:39] <dalek> v5: 87b409c | (Tobias Leich)++ | lib/Perl5/Grammar.nqp:

[11:39] <dalek> v5: fix issue with space after a "use NAME" statement

[11:39] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/87b409cb62

[11:50] <lizmat> hmmm…  t/spec/S11-modules/nested.t is failing for me with "make sometests", but not directly

[11:50] <lizmat> I mean, calling the test file directly gives all ok's

[11:50] *** sqirrel left
[11:51] <timotimo> colomon: but then you have to write a closure for the smartmatch ;)

[11:51] <FROGGS> lizmat: maybe this make target doesnt involve fudging?

[11:51] <lizmat> I'm also getting TODO passed on t/spec/S32-temporal/DateTime.rakudo and t/spec/S32-temporal/calendar.rakudo

[11:52] <lizmat> FROGGS: indeed, no fudging

[11:53] <FROGGS> well, that explains it :o)

[11:54] <lizmat> huh?

[11:54] <lizmat> it didn't use to fail

[11:54] <FROGGS> the goal was that all tests should pass without fudging, but I guess this will never happen

[11:55] <Teratogen> 41 => perl6

[11:55] <Teratogen> bash: perl6: command not found

[11:55] <Teratogen> when will perl6 start being included in the major linux distros?

[11:55] <timotimo> when the linux kernel gets rewritten in perl6

[11:56] *** markstacey joined
[11:56] *** markstacey is now known as gudahtt

[11:56] <FROGGS> lizmat: I expected that nested.t has a #?skip in it, but it has not

[11:56] <Teratogen> I think the linux kernel, like Perl 5, is pure C

[11:56] <timotimo> that's why they'll have to rewrite it :)

[11:56] <Teratogen> baw

[11:56] <Teratogen> that's no answer, man!

[11:56] <timotimo> no, i was making a lame joke

[11:57] <Teratogen> I know, I know

[11:57] <Teratogen> *sigh*

[11:57] <timotimo> i know, too ;)

[11:57] <Teratogen> I think perl6's coming of age will be when it starts getting included in major linux distros

[11:57] <Teratogen> like perl 5 and python are today

[11:57] <timotimo> you mean "in a default installation", right?

[11:57] <FROGGS> Teratogen: I guess they will bundle it when there is that moment when somebody decides it is ready

[11:57] <Teratogen> and, apparently, php

[11:57] <timotimo> er, what? php isn't on my major linux distro

[11:58] <Teratogen> type php

[11:58] <Teratogen> and see what happens

[11:58] <timotimo> zsh: command not found: php

[11:58] <Teratogen> wow, it comes with Slackware

[11:58] <Teratogen> I don't know what distro you have but it must suck!

[11:58] <timotimo> it's debian

[11:58] <Teratogen> oh, well, I don't know what to say!

[11:58] <Teratogen> SLACKWARE UBER ALLES!

[11:58] <FROGGS> debian++ # that should be said

[11:59] *** anuby_ left
[11:59] *** snearch joined
[11:59] <colomon> timotimo: if you really want to do "that", you can define a new class which is something like "a set plus N whatevers" and write the appropriate ACCEPTS for it.

[11:59] <timotimo> why would php be included by default? no system-related utilities use it (don't start talking about PHPGtk) and you can hardly make use of it on the commandline either

[11:59] <dalek> roast: 265ab23 | (Elizabeth Mattijsen)++ | S32-temporal/ (2 files):

[11:59] <dalek> roast: Unfudge 2 tests that are passing now

[11:59] <dalek> roast: review: https://github.com/perl6/roast/commit/265ab235e3

[11:59] <lizmat> dalek seems slow: that was 2+ minutes ago

[12:01] <FROGGS> lizmat: do you have a A.pm file somewhere around?

[12:01] <lizmat> grrr… actually I do

[12:01] <FROGGS> that would explain why nested.t failed

[12:01] <lizmat> perhaps the test should unshift, rather than push ?

[12:02] * FROGGS had that "problem" two weeks ago, and then jnthn++ pointed him to it

[12:02] <FROGGS> sounds sane

[12:02] <timotimo> Teratogen: on my mint, it'll say "php will not execute and completion _php exists."

[12:02] <Teratogen> try php -v

[12:03] *** SamuraiJack_ left
[12:03] <dalek> roast: 92e7ba5 | (Elizabeth Mattijsen)++ | S11-modules/nested.t:

[12:03] <dalek> roast: Make sure that these test's external files are found first

[12:03] <dalek> roast: review: https://github.com/perl6/roast/commit/92e7ba5108

[12:03] <FROGGS> I get an installer hint for rakudo, nqp and parrot on my linux box, even if these installable packages are at least a year old or so

[12:04] <timotimo> same - it's what zsh says when the program is not installed, but there is a completion script available

[12:04] <timotimo> also, when i hit return a few times, it'll say zsh: correct 'php' to '_php' [nyae]? n

[12:04] <timotimo> zsh: command not found: php

[12:04] <lizmat> really afk for a few hours now

[12:04] *** SamuraiJack_ joined
[12:04] <FROGGS> how to pronounce "nyae"?

[12:04] <FROGGS> nüää?

[12:05] <timotimo> "naja, äh"

[12:05] <FROGGS> *g*

[12:06] <huf> the nya part is fairly straightforward

[12:06] <Teratogen> weird

[12:06] <huf> like lin nyan cat, without the n

[12:06] <Teratogen> which php

[12:06] <Teratogen> see what that says =)

[12:06] <Teratogen> sounds like you have a partial installation of php, somehow

[12:06] <timotimo> php not found

[12:06] <timotimo> no, it's a "no installation of php at all"

[12:07] <Teratogen> why for the love of heaven are you using zsh?

[12:07] <timotimo> all those completions come with zsh

[12:07] <timotimo> because i don't feel comfortable with fish

[12:07] <Util> FROGGS: I say it as "No, Yes, Abort, Edit". :^)

[12:07] *** xinming left
[12:07] <FROGGS> :P

[12:08] * FROGGS now takes a walk with his coffee mug after this php install-party :o)

[12:09] <timotimo> more like "php is already installed"-party

[12:09] *** xinming joined
[12:09] <timotimo> anyway, i need to tidy up and clean my apartment, and that could take a while :)

[12:11] * FROGGS .oO( is it about a girl or his mom? )

[12:13] <timotimo> two male friends are going to stay over for GPN

[12:13] <FROGGS> then I see no reason for cleaning *g*

[12:15] <FROGGS> maybe I can make it to the GPN too some day, sounds fun

[12:16] *** bowtie left
[12:18] *** bowtie joined
[12:22] *** jaldhar left
[12:22] *** SamuraiJack_ left
[12:28] *** SamuraiJack_ joined
[12:33] <[Coke]> (regularly scheduled R* releases) I think part of the problem is that they were not regularly scheduled. they just happened each month. (I thought R* was NOT intended to be monthly)

[12:35] <pmichaud> R* is intended to be regularly scheduled.  We declared they'd be monthly again because we expected a fair bit of monthly improvement in the compiler.

[12:35] <pmichaud> which is indeed what happened, but then the releases were held up due to module issues, which we didn't expect.

[12:35] <pmichaud> s/expect/plan for/

[12:36] <pmichaud> then they stopped being monthly, without any real explanation of why.

[12:36] *** fhelmberger_ joined
[12:37] <[Coke]> ok; I missed the announcement that they turned monthly, or I'd have tried harder to get it out the door. whoops.

[12:37] <[Coke]> not much harder, mind. :)

[12:38] *** fhelmberger left
[12:41] *** PacoAir joined
[12:43] *** konundra joined
[12:44] *** SamuraiJack_ left
[12:44] *** snearch left
[12:46] *** ajr joined
[12:47] *** ajr is now known as Guest447

[12:47] *** Guest447 is now known as ajr_

[12:50] <daxim> rakudo, 'foo.bar.baz' ~~ '\w'

[12:50] <daxim> rakudo, ['foo.bar.baz' ~~ '\w'].perl.say

[12:50] <daxim> rakudo: ['foo.bar.baz' ~~ '\w'].perl.say

[12:50] <camelia> rakudo 8a0859: OUTPUT«[Bool::False]␤»

[12:50] <daxim> rakudo: 'foo.bar.baz' ~~ '\w'

[12:50] <camelia> rakudo 8a0859:  ( no output )

[12:51] <FROGGS> daxim: what do you expect?

[12:53] <daxim> rakudo: 'foo.bar.baz' ~~ m/\w/

[12:53] <camelia> rakudo 8a0859:  ( no output )

[12:56] <daxim> rakudo: say 'foo.bar.baz' ~~ m/\w/

[12:56] <camelia> rakudo 8a0859: OUTPUT«｢f｣␤␤»

[12:59] <daxim> rakudo: say 'foo.bar.baz' ~~ m:g/(\w+)/

[12:59] <camelia> rakudo 8a0859: OUTPUT«False␤»

[13:02] <daxim> rakudo: ['foo.bar.baz' ~~ m/(\w+)/].perl

[13:02] <camelia> rakudo 8a0859:  ( no output )

[13:02] <daxim> rakudo: ['foo.bar.baz' ~~ m/(\w+)/].perl.say

[13:02] <camelia> rakudo 8a0859: OUTPUT«[Match.new(orig => "foo.bar.baz", from => 0, to => 3, ast => Any, list => (Match.new(orig => "foo.bar.baz", from => 0, to => 3, ast => Any, list => ().list, hash => EnumMap.new()),).list, hash => EnumMap.new())]␤»

[13:04] <daxim> rakudo: ['foo.bar.baz' ~~ m:g/(\w+)/].perl.say

[13:04] <camelia> rakudo 8a0859: OUTPUT«[Bool::False]␤»

[13:05] <daxim> this is like I have to learn to walk all over again

[13:07] <timotimo> what's with the [ ]?

[13:08] <FROGGS> r: say 'foo.bar.baz' ~~ /\w+/

[13:08] <camelia> rakudo 8a0859: OUTPUT«｢foo｣␤␤»

[13:08] <FROGGS> r: say 'foo.bar.baz' ~~ /(\w+)/

[13:08] <camelia> rakudo 8a0859: OUTPUT«｢foo｣␤ 0 => ｢foo｣␤␤»

[13:08] <FROGGS> r: say 'foo.bar.baz' ~~ /(\w+) % '.'/

[13:08] <camelia> rakudo 8a0859: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unrecognized regex metacharacter % (must be quoted to match literally)␤at /tmp/ThX9xcVWB_:1␤------> [32msay 'foo.bar.baz' ~~ /(\w+) [33m⏏[31m% '.'/[0m␤Unable to parse regex; couldn't find final '/'␤at /tmp/ThX9xcVWB_:1␤------> [3…

[13:08] <FROGGS> r: say 'foo.bar.baz' ~~ /[\w+] % '.'/

[13:08] <camelia> rakudo 8a0859: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unrecognized regex metacharacter % (must be quoted to match literally)␤at /tmp/Evum0_Ej3f:1␤------> [32msay 'foo.bar.baz' ~~ /[\w+] [33m⏏[31m% '.'/[0m␤Unable to parse regex; couldn't find final '/'␤at /tmp/Evum0_Ej3f:1␤------> [3…

[13:09] <FROGGS> -.-

[13:09] <FROGGS> r: say 'foo.bar.baz' ~~ /(\w+)+ % '.'/

[13:09] <camelia> rakudo 8a0859: OUTPUT«｢foo.bar.baz｣␤ 0 => ｢foo｣␤ 0 => ｢bar｣␤ 0 => ｢baz｣␤␤»

[13:11] <FROGGS> it really is better after coming around the first Stolperstein

[13:12] <timotimo> daxim: did you perhaps want

[13:12] <timotimo> r: say "foo.bar.baz".comb(/\w+/)

[13:12] <camelia> rakudo 8a0859: OUTPUT«foo bar baz␤»

[13:12] <timotimo> r: "foo.bar.baz".comb(/\w+/).perl.say

[13:12] <camelia> rakudo 8a0859: OUTPUT«("foo", "bar", "baz").list␤»

[13:12] <[Coke]> r: say "foo.bar.baz".comb(/\w+/).perl

[13:12] <camelia> rakudo 8a0859: OUTPUT«("foo", "bar", "baz").list␤»

[13:12] <[Coke]> yah, that. :)

[13:14] *** denisboyun_ joined
[13:15] <daxim> why can't a match simply return a list?

[13:16] <colomon> r: say "foo.bar.baz".words.perl

[13:16] <camelia> rakudo 8a0859: OUTPUT«("foo.bar.baz",).list␤»

[13:16] *** xilo left
[13:17] <colomon> daxim: a list of what?

[13:17] <daxim> of match results, like in js and perl5

[13:17] *** espadrine joined
[13:19] *** xilo joined
[13:19] <colomon> daxim: you mean of captures?

[13:20] <daxim> yes

[13:20] <FROGGS> r: 'foo.bar.baz' ~~ /(\w+)+ % '.'/; say $0

[13:20] <camelia> rakudo 8a0859: OUTPUT«｢foo｣␤ ｢bar｣␤ ｢baz｣␤␤»

[13:21] <colomon> r: say ('foo.bar.baz' ~~ /(\w+)+ % '.'/).list.perl

[13:21] <camelia> rakudo 8a0859: OUTPUT«((Match.new(orig => "foo.bar.baz", from => 0, to => 3, ast => Any, list => ().list, hash => EnumMap.new()), Match.new(orig => "foo.bar.baz", from => 4, to => 7, ast => Any, list => ().list, hash => EnumMap.new()), Match.new(orig => "foo.bar.baz", from => 8, to => 1…

[13:21] <FROGGS> the are still Match-es btw

[13:22] <colomon> r: .Str.say for ('foo.bar.baz' ~~ /(\w+)+ % '.'/).list;

[13:22] <daxim> r: say ('foo.bar.baz' ~~ /(\w+)+/).list.perl

[13:22] <camelia> rakudo 8a0859: OUTPUT«foo␤bar␤baz␤»

[13:22] <camelia> rakudo 8a0859: OUTPUT«((Match.new(orig => "foo.bar.baz", from => 0, to => 3, ast => Any, list => ().list, hash => EnumMap.new()),),).list␤»

[13:23] *** markstacey joined
[13:23] <colomon> r: .Str.say for ('foo.bar.baz qix' ~~ /(\w+)+ % '.' (\w+)/).list;

[13:23] <camelia> rakudo 8a0859: OUTPUT«foo␤bar␤baz␤ba␤z␤»

[13:23] *** gudahtt left
[13:23] *** markstacey is now known as gudahtt

[13:23] <colomon> r: .Str.say for ('foo.bar.baz qix' ~~ /[(\w+)+ % '.'] (\w+)/).list;

[13:23] <camelia> rakudo 8a0859: OUTPUT«foo␤bar␤baz␤ba␤z␤»

[13:24] <FROGGS> ?

[13:24] <colomon> n: .Str.say for ('foo.bar.baz qix' ~~ /[(\w+)+ % '.'] (\w+)/).list;

[13:24] <camelia> niecza v24-51-g009f999: OUTPUT«foo bar ba␤z␤»

[13:24] <colomon> FROGGS: I've got nothing.

[13:24] <colomon> oh, I've got something

[13:24] <colomon> rn: .Str.say for ('foo.bar.baz qix' ~~ /[(\w+)+ % '.'] \s+ (\w+)/).list;

[13:24] <camelia> rakudo 8a0859: OUTPUT«foo␤bar␤baz␤qix␤»

[13:24] <camelia> ..niecza v24-51-g009f999: OUTPUT«foo bar baz␤qix␤»

[13:25] <pmichaud> r:   my @a = ('foo bar baz' ~~ /(\w+) (\w+) (\w+)/).list

[13:25] <camelia> rakudo 8a0859:  ( no output )

[13:25] <pmichaud> r:   my @a = ('foo bar baz' ~~ /(\w+) (\w+) (\w+)/).list;  say @a.perl;

[13:25] <FROGGS> ahh, of course

[13:25] <camelia> rakudo 8a0859: OUTPUT«Array.new(Match.new(orig => "foo bar baz", from => 0, to => 1, ast => Any, list => ().list, hash => EnumMap.new()), Match.new(orig => "foo bar baz", from => 1, to => 2, ast => Any, list => ().list, hash => EnumMap.new()), Match.new(orig => "foo bar baz", from => 2,…

[13:25] *** sanug joined
[13:25] <pmichaud> r:   my @a = ('foo bar baz' ~~ /(\w+) (\w+) (\w+)/).list;  .say for @a;

[13:25] <camelia> rakudo 8a0859: OUTPUT«｢f｣␤␤｢o｣␤␤｢o｣␤␤»

[13:25] <colomon> FROGGS: it's still not "ah, of course" to me.  I mean, I understand now why qix didn't match.  But why does baz appear to match twice?

[13:26] <pmichaud> ooc, what are you all trying to do/achieve?

[13:27] <FROGGS> colomon: that "baz ba z" is wrong there, niecza is right at this

[13:27] <FROGGS> the "ah, of course" was just because of the needed \s

[13:28] <colomon> FROGGS: gotcha.

[13:28] <PerlJam> good $localtime all

[13:28] <colomon> Is this a known rakudobug?

[13:29] <colomon> daxim: anyway, I believe the quick answer to your question is that returning a Match for everything carries more information, and it is easily converted to a list of captures if desired.

[13:31] <pmichaud> r:   my @a = ('foo bar baz' ~~ /:ss (\w+) (\w+) (\w+)/).list;  .say for @a;

[13:31] <camelia> rakudo 8a0859: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unrecognized regex modifier :ss␤at /tmp/OZ3oiBSyAB:1␤------> [32mmy @a = ('foo bar baz' ~~ /:ss[33m⏏[31m (\w+) (\w+) (\w+)/).list;  .say for @a;[0m␤»

[13:31] <pmichaud> r:   my @a = ('foo bar baz' ~~ /:s (\w+) (\w+) (\w+)/).list;  .say for @a;

[13:31] <camelia> rakudo 8a0859: OUTPUT«｢foo｣␤␤｢bar｣␤␤｢baz｣␤␤»

[13:31] <pmichaud> r:   my @a = ('foo bar baz' ~~ /:s (\w+) (\w+) (\w+)/).list;  .Str.say for @a;

[13:31] <camelia> rakudo 8a0859: OUTPUT«foo␤bar␤baz␤»

[13:32] <pmichaud> r:   my @a = ('foo bar baz' ~~ /:s (\w+) (\w+) (\w+)/).list;  say @().join('|);   # curious

[13:32] <camelia> rakudo 8a0859: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse expression in single quotes; couldn't find final "'"␤at /tmp/RDHIC1_giW:1␤------> [32m)/).list;  say @().join('|);   # curious[33m⏏[31m<EOL>[0m␤    expecting any of:␤        method arguments␤        argument list␤ …

[13:33] <pmichaud> r:   my @a = ('foo bar baz' ~~ /:s (\w+) (\w+) (\w+)/).list;  say @().join('|');   # curious

[13:33] <camelia> rakudo 8a0859: OUTPUT«␤»

[13:33] <FROGGS> colomon: there is a (similar ?) bugreport about backtracking, but this one here is worth reporting

[13:33] <pmichaud> I'm not convinced there's a bug.

[13:33] <FROGGS> r: .Str.say for ('foo.bar.baz qix' ~~ /[(\w+)+ % '.'] (\w+)/).list; # no bug?

[13:33] <camelia> rakudo 8a0859: OUTPUT«foo␤bar␤baz␤ba␤z␤»

[13:33] <pmichaud> looking.

[13:34] <PerlJam> um ... what's the bug?

[13:34] <PerlJam> (or supposed bug)

[13:34] <colomon> PerlJam: baz appears to get matched twice

[13:34] <PerlJam> oh, I see

[13:34] <colomon> > 'foo.bar.baz qix' ~~ /[(\w+)+ % '.'] (\w+)/

[13:34] <colomon> ｢foo.bar.baz｣

[13:34] <colomon>  0 => ｢foo｣

[13:34] <colomon>  0 => ｢bar｣

[13:34] <colomon>  0 => ｢baz｣

[13:34] <colomon>  0 => ｢ba｣

[13:34] <colomon>  1 => ｢z｣

[13:34] <FROGGS> the result should be: foo bar ba z

[13:35] <FROGGS> baz shouldnt be in $0

[13:35] <colomon> well, ba should be

[13:35] <FROGGS> wait, I think it is reported already

[13:35] <FROGGS> ba is, and should be, yes

[13:36] *** RandalSchwartz joined
[13:36] *** RandalSchwartz left
[13:36] *** RandalSchwartz joined
[13:36] *** sanug left
[13:37] *** skids joined
[13:38] <pmichaud> okay, rakudobug.

[13:39] <FROGGS> this bug? https://rt.perl.org/rt3/Ticket/Display.html?id=116895

[13:39] *** bluescreen10 joined
[13:40] <pmichaud> there's something else wrong here...  rakudo *is* using a pure cursor model.

[13:40] <pmichaud> there's no notion of "take out a capture"

[13:40] <pmichaud> the problem has to be that a cursor isn't being thrown away properly.

[13:41] <pmichaud> r: say "abcde" ~~ / (a | b | bc | cde)+ »/

[13:41] <camelia> rakudo 8a0859: OUTPUT«｢abcde｣␤ 0 => ｢a｣␤ 0 => ｢bc｣␤ 0 => ｢b｣␤ 0 => ｢cde｣␤␤»

[13:42] <pmichaud> r: my regex foo { a | b | bc | cde };  say "abcde" ~~ / <foo=&foo>+ » /

[13:43] <camelia> rakudo 8a0859: OUTPUT«｢abcde｣␤ foo => ｢a｣␤ foo => ｢bc｣␤ foo => ｢b｣␤ foo => ｢cde｣␤␤»

[13:44] <pmichaud> it's a problem from backtracking into a captured cursor

[13:44] *** FROGGS[mobile] joined
[13:44] *** FROGGS left
[13:45] *** kaleem left
[13:53] <pmichaud> ummm... hrm.

[13:55] *** btyler joined
[13:55] *** btyler left
[13:55] <timotimo> hmm. tell me again what the difference between Array and List is, in practice?

[13:55] <timotimo> because i think i'm having a little brainfart

[13:55] *** konundra left
[13:55] <pmichaud> an Array is a List of scalar containers

[13:56] <timotimo> lists can be lazy, arrays can't?

[13:56] *** konundra joined
[13:56] <PerlJam> an array is a container, a list is not :)

[13:56] <Teratogen> I always thought a list was something like (1,2,3)

[13:56] <pmichaud> Teratogen: that's a Parcel

[13:56] <pmichaud> PerlJam: no, that's not really true.

[13:57] <pmichaud> arrays can be lazy:

[13:57] <PerlJam> It should be.  That way I don't have to change my mental model  ;)

[13:57] <pmichaud> r: my @a = 1..*;  say @a[5];

[13:57] <camelia> rakudo 8a0859: OUTPUT«6␤»

[13:58] <pmichaud> the code handling subrule backtracking looks really... odd to me.

[13:58] <timotimo> so, a list could contain non-scalar containers? or what does the first answer mean?

[13:58] <pmichaud> yes, a list can contain non-scalar containers.

[13:59] <pmichaud> no, wait.

[13:59] <pmichaud> let me rephrase.

[13:59] <timotimo> a hash in an array will always be inside a scalar container, but a hash in a list may be in a normal hash container, like you would get if you wrote my %foo;?

[13:59] <pmichaud> no

[13:59] <pmichaud> a list can contain anything, containers or bare values

[14:00] <timotimo> hm. but what does that mean in practice?

[14:00] <pmichaud> an array places all of its elements into scalar containers

[14:00] <pmichaud> in practice, it means that the elements of a list can flatten, while the elements of an array do not flatten.

[14:00] <PerlJam> Isn't there some nice documentation that elucidates the differences between Array, List, and Parcel  ?

[14:00] <PerlJam> (If not, there should be)

[14:01] <pmichaud> PerlJam: http://doc.perl6.org/language/containers  perhaps

[14:01] <timotimo> if you mean "the elements of", does that mean something like @a[1], @a[2] will always be a list of at most two elements if @a is an array, but if @a is a list, it can be more elements?

[14:02] <timotimo> in preparing for my talk which is closing in on me at a dramatic pace, i'm realising how little i actually know about perl6.

[14:02] <pmichaud> timotimo: no, that's not what it means

[14:03] <pmichaud> PerlJam: http://doc.perl6.org/language/containers#Scalar+Containers+and+Listy+Things   # more directly

[14:03] <timotimo> mhm

[14:04] *** crab2313 joined
[14:04] <pmichaud> my @a = <apple banana cherry>;   my $b := (1, 2, @a, 5).list;   

[14:04] <pmichaud> how many elements does $b have?

[14:05] <timotimo> my experience would suggest it'd have 6

[14:05] <pmichaud> that'd be correct.  

[14:05] <pmichaud> what is $b[3] ?

[14:05] <timotimo> banana

[14:06] <pmichaud> and if you write  $b[3] = 'berry';   will it work?

[14:06] <timotimo> i think so, it would probably get the scalar container that was inside @a before, right?

[14:06] <pmichaud> correct -- it would change @a[1]

[14:06] <pmichaud> so, that's a List.  Here's an array.

[14:07] <pmichaud> oh, before I leave the List... if you write   $b[0] = 'date'  it will fail

[14:07] <pmichaud> because $b[0] isn't a container.

[14:07] <pmichaud> and thus you cannot assign to it.

[14:07] <pmichaud> so essentially, $b is a List consisting of 1, 2, @a[0], @a[1], @a[2], and 5.

[14:08] <pmichaud> here's the array case:

[14:08] <pmichaud> my @a = <apple banana cherry>;  my @c = (1, 2, @a, 5);

[14:09] <pmichaud> what's @c[3] ?  ("banana")

[14:09] *** denisboyun_ left
[14:09] <timotimo> now i could do @c[0] = "hello" and it will work, because "@c =" will create a scalar container for it, too

[14:09] <pmichaud> correct.

[14:09] <pmichaud> and @c[3] is no longer the same container as @a[1]

[14:09] <timotimo> because there was no :=

[14:10] <timotimo> and = does copy-assign for arrays

[14:10] <pmichaud> oh, it's not a binding issue.

[14:10] <pmichaud> my @a = <apple banana cherry>;  my $b = (1, 2, @a, 5).list;    # would have the same effect

[14:10] <pmichaud> I probably didn't need the bind := above.

[14:10] <timotimo> oh, ok

[14:10] *** crab2313 left
[14:10] <pmichaud> A List is just a list of things.

[14:11] <pmichaud> An Array is a List where each element has been given its own scalar container.

[14:11] <timotimo> if i had wanted $b to contain copies of @a's containers, i'd've gone @a[] instead?

[14:11] <pmichaud> I think @a[] still gives back the containers.

[14:11] *** prevost joined
[14:12] <pmichaud> my @a = <apple banana cherry>;   @a[].[1] = 'berry';  say @a;

[14:12] <pmichaud> r: my @a = <apple banana cherry>;   @a[].[1] = 'berry';  say @a;

[14:12] <camelia> rakudo 8a0859: OUTPUT«apple berry cherry␤»

[14:12] <timotimo> oh

[14:12] <pmichaud> yeah,  .[] doesn't decontainerize.

[14:12] <timotimo> is .clone for that?

[14:12] <pmichaud> clone would do it, and I'm thinking that .values should do it also.

[14:12] *** xilo left
[14:12] <pmichaud> (it probably doesn't do it at present... that's one of the List/S07 issues I still need to work out)

[14:13] <timotimo> right, S07 is still "wip"

[14:13] <PerlJam> timotimo: copies would have been  $b = [ 1, 2, @a, 5 ]; I think.

[14:13] <timotimo> so it's kind of hard to not accidentally have two @vars share their content's containers

[14:14] <pmichaud> timotimo: oh, I think it's pretty easy, in fact.

[14:14] <pmichaud> timotimo: I mean, shared containers is actually pretty rare.

[14:14] <pmichaud> bbiab

[14:14] <timotimo> r: my @a = <apple banana cherry>; my $b = [ 1, 2, @a, 5 ]; say $b; $b[3] = "foo"; say $b;

[14:14] <camelia> rakudo 8a0859: OUTPUT«1 2 apple banana cherry 5␤1 2 apple foo cherry 5␤»

[14:15] <timotimo> r: my @a = <apple banana cherry>; my $b = [ 1, 2, @a, 5 ]; say @a; $b[3] = "foo"; say $a;

[14:15] <camelia> rakudo 8a0859: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable '$a' is not declared. Did you mean '@a'?␤at /tmp/ieRa9M06MS:1␤------> [32m, @a, 5 ]; say @a; $b[3] = "foo"; say $a[33m⏏[31m;[0m␤    expecting any of:␤        postfix␤»

[14:15] <timotimo> r: my @a = <apple banana cherry>; my $b = [ 1, 2, @a, 5 ]; say @a; $b[3] = "foo"; say @a;

[14:15] <camelia> rakudo 8a0859: OUTPUT«apple banana cherry␤apple banana cherry␤»

[14:15] <timotimo> uh huh

[14:15] <timotimo> i'll get back to cleaning

[14:17] *** btyler joined
[14:19] <pmichaud> yeah, the nqp code for handling backtracking into captured subrules isn't correct.

[14:21] *** fhelmberger_ left
[14:24] *** chris joined
[14:24] *** chris is now known as Guest55566

[14:24] *** Guest55566 left
[14:25] *** dalecooper left
[14:28] *** kaleem joined
[14:31] *** xilo joined
[14:39] *** census joined
[14:40] *** Teratogen left
[14:40] *** Teratogen joined
[14:41] *** FROGGS joined
[14:46] *** ajr joined
[14:46] *** ajr_ left
[14:46] *** ajr is now known as Guest58707

[14:46] *** Guest58707 is now known as ajr_

[14:52] *** atroxaper joined
[14:53] *** kaare_ joined
[14:58] <dalek> v5: ffbff34 | (Tobias Leich)++ | / (3 files):

[14:58] <dalek> v5: allow anonymous subs

[14:58] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/ffbff34cc6

[15:09] <pmichaud> 09:04 <bbkr> pmichaud: HTTP::Easy or JSON::RPC does not work in star RC (after request is sent to server it does not return response). I'm  debugging it right now

[15:09] <pmichaud> 09:12 <bbkr> can you please run following code on Star RC:  use HTTP::Easy::PSGI; my $app = sub (%env) { print %env.perl; return [ 204, [ ], [  ] ]; }; my $psgi = HTTP::Easy::PSGI.new( host => "", port => 8080); $psgi.app( $app ); $psgi.run;

[15:09] <pmichaud> bbkr:  did that used to work in previous versions of Star?

[15:09] <pmichaud> I just tried it in 2013.02 and 2012.12 and it seems to fail in those versions also.

[15:10] *** birdwindupbird left
[15:10] *** daniel-s left
[15:10] <bbkr> checking 2013.02...

[15:10] <pmichaud> I only want to block releases on regressions.

[15:10] <pmichaud> if a problem isn't a regression, it doesn't have to block the release.

[15:10] *** Pleiades` joined
[15:10] *** pmurias joined
[15:12] *** daniel-s joined
[15:12] <pmurias> pmichaud: I'm supposed to contact you about what I'm supposed to do during the community bondind period, is just hacking on the javascript backend ok?

[15:14] <pmichaud> pmurias: since you're already familiar with the community, I suspect that getting started on the backend is okay.

[15:15] <pmichaud> I'll re-review all of the guidelines tomorrow-ish to make sure we're not overlooking something important.

[15:17] <bbkr> pmichaud: 2013.02 is also broken. I know it is not regression but IMO in this case if you do not want to block release broken modules should be removed from *.

[15:18] <pmichaud> are you saying that those modules are essentially useless?  when were they added to R*, and were they working then?

[15:22] *** btyler left
[15:22] <bbkr> They were working at some point. I remember I was using PSGI server in 2012.11 or 2013.01 star releases

[15:22] <pmichaud> I can try 2013.01.

[15:23] <Teratogen> pmichaud, you slept three hours?

[15:23] <pmichaud> Teratogen: less, actually :)

[15:23] <Teratogen> ok

[15:24] <pmichaud> had to get up and get kids to school

[15:24] <Teratogen> ah

[15:24] <Teratogen> your spawn

[15:24] <pmichaud> actually, not even that.  :)

[15:24] <Teratogen> so, you reproduced?

[15:24] <pmichaud> officially, they're my stepkids

[15:24] <Teratogen> ah

[15:24] <Teratogen> you should have a kid of your own though

[15:24] <Teratogen> don't you want to pass on your superior genes?

[15:24] *** btyler joined
[15:25] <pmichaud> getting a little late for that for me.  :)

[15:25] <Teratogen> baw, men can sire children up into their eighties

[15:25] <pmichaud> Teratogen: not on their own, they can't.  :)

[15:25] <Teratogen> just need to find a young willing woman

[15:25] <Teratogen> young and willing

[15:25] <Teratogen> =)

[15:25] <Teratogen> wait is this all being recorded?

[15:25] <pmichaud> and I'd have to get the approval of the one I have now.  :)

[15:26] <moritz> Teratogen: please simply stop being off-topic

[15:26] <moritz> Teratogen: even if it's not logged, it's still annoying

[15:26] <Teratogen> ok =(

[15:26] *** kaleem left
[15:26] <moritz> Teratogen: and this is your last warning.

[15:32] *** daxim left
[15:34] <bbkr> pmichaud: I don't have star 2013.01 installed, I've tested pure 2012.12 with HTTP::Easy installed also in 2012 (those versions I had already built) and it works fine.

[15:35] <pmichaud> https://gist.github.com/pmichaud/5671235  # here's what I get with 2012.12

[15:36] <bbkr> this was fixed in https://github.com/supernovus/perl6-http-easy/issues/6

[15:38] <bbkr> "bbkr closed the issue 4 months ago". so 2013.01 might be last working * release with HTTP::Easy.

[15:39] <pmichaud> I don't follow that.

[15:40] *** denisboyun_ joined
[15:42] <pmichaud> Here's the question we're trying to answer:  Are there any R* users that are currently using HTTP::Easy or JSON::RPC from a previous R* release that would be unable to do so in the new R* release?

[15:43] <bbkr> yes. regression happened not on 2013.05 RC candidate but probably in 2013.02. but if someone is using 2013.01 and updates he will end up with broken HTTP::Easy based servers

[15:44] <pmichaud> do we have an example of an HTTP::Easy program that works in 2013.01 but not in 2013.05rc1 ?

[15:44] <pmichaud> or, perhaps alternatively, is this a regression that you expect will be able to be fixed in the next 48 hours?

[15:45] <bbkr> do you have 2013.01 compiled?

[15:45] <pmichaud> yes.

[15:46] <bbkr> what is the result trying the same one-liner as you just tried on 2012.12 ?

[15:46] <pmichaud> https://gist.github.com/pmichaud/5671320  # result with R* 2013.01

[15:48] *** RandalSchwartz left
[15:49] <bbkr> oh, so binary string bug was still there. to summarize 2012.12 and 2013.01 were broken due to binary string bug and 2013.02 and 2013.05RC are broken due to infinite wait bug. so my bad - there was no working * release with HTTP::Easy since 2012.12

[15:50] <moritz> then we should please release R* asap, and later investigate what to do with HTTP::Easy

[15:50] <pmichaud> afaik, I have no other blockers on 2013.05rc1

[15:50] <pmichaud> which means it can become the 2013.05 release.

[15:51] <moritz> I had an intermittent test failure with lwp-simple, but on the next 5 runs it didn't show up anymore

[15:51] <pmichaud> I can put a note in the announcement that acknowledges a known problem with HTTP::easy

[15:51] <bbkr> I'm not familiar with PSGI protocol, I cannot fix HTTP::Easy within 48 hours

[15:51] <bbkr> LWP::Simple contains live test and it fails very often

[15:52] <pmichaud> yesterday LWP::Simple was failing for me when feather was thrashing.

[15:52] <bbkr> I mean the server that LWP tries to connect to

[15:52] <pmichaud> I suspect that's because it's trying to connect to perl6.org (which is hosted on feather or something like that)

[15:53] *** daniel-s left
[15:53] <pmichaud> might be better to connect to somewhere like example.com or something like that.

[15:54] <bbkr> https://github.com/supernovus/perl6-http-easy/issues/7 - this stalling issue looks familiar

[15:55] <pmichaud> bbkr: thanks for the outstanding and quick reports on the rc candidate, btw

[15:58] *** daniel-s joined
[15:59] <bbkr> :)

[16:00] *** FROGGS[mobile] left
[16:00] *** FROGGS[mobile] joined
[16:00] <timotimo> suddenly a clicking noise emerges from my head, as I understand why "foo".IO ~~ :e works

[16:01] <PerlJam> .oO( timotimo is some form of insect?!? )

[16:01] <pmichaud> I'm afk for a while.

[16:02] *** FROGGS[mobile] left
[16:03] *** mrlo left
[16:05] *** kst` joined
[16:05] *** Ultali joined
[16:05] *** Ultali is now known as Ulti

[16:05] *** btyler left
[16:06] *** kst left
[16:07] *** atroxaper left
[16:07] *** mrlo joined
[16:10] <bbkr> pmichaud: I've found also that HTTP::Easy in https://github.com/supernovus/perl6-http-easy/commit/c0bc1ebbd2a545448343a5ed8a9df64889d16b7d requires PSGI helper and https://github.com/supernovus/perl6-psgi is not in ecosystem

[16:10] *** domidumont1 joined
[16:13] *** domidumont left
[16:13] <bbkr> oh, nvm, my panda list was outdated

[16:14] *** adu joined
[16:16] *** ajr_ left
[16:22] *** arlinius left
[16:25] *** dmol joined
[16:26] *** djanatyn left
[16:28] *** djanatyn joined
[16:30] *** user_bowtie_ joined
[16:31] *** user_bowtie_ is now known as bowtie_

[16:31] <bbkr> pmichaud: I've nailed the issue with HTTP::Easy. it contains hack here: https://github.com/supernovus/perl6-http-easy/blob/master/lib/HTTP/Easy.pm6#L58-61 after removing those lines it responds and JSON::RPC works also

[16:34] *** colomon_ joined
[16:34] *** colomon left
[16:34] *** colomon_ is now known as colomon

[16:36] *** ggoebel left
[16:40] *** raiph joined
[16:45] *** konundra left
[16:46] *** ggoebel joined
[16:48] *** kaleem joined
[16:50] <bbkr> pmichaud: I cannot track which IO::Socket::INET bug was this hack for. IO:: had major changes lately and looks like hack is now getting in our way instead of helping. I'm building RC2 - http://bbkr.org/~bbkr/rakudo-star-2013.05-rc2.tar.gz 

[16:51] *** adu left
[16:52] *** adu joined
[16:53] *** dakkar left
[16:56] *** adu left
[16:56] <flussence> bbkr: IIRc that one happened a few months ago along with the other parrot IO fallout

[16:59] *** Chillance joined
[17:11] <bbkr> pmichaud: my RC2 works (tested on OS X 10.7), HTTP::Easy responds, JSON::RPC also does client-server communication without problems

[17:12] <bbkr> got to go now

[17:12] *** bbkr left
[17:17] <lizmat> bbkr: thank you!

[17:18] *** pecastro joined
[17:20] *** kaleem left
[17:25] *** risou is now known as risou_awy

[17:25] *** risou_awy is now known as risou

[17:32] *** ajr joined
[17:32] *** ajr is now known as Guest42580

[17:33] *** Guest42580 is now known as ajr_

[17:33] *** ajr_ left
[17:34] *** ajr_ joined
[17:34] *** arlinius joined
[17:35] <[Coke]> Note that there have been failures on star related modules tests on feather for me for about a week now.

[17:35] <[Coke]> (so this a) needs a test and b) we need to bump versions included by R* to grab the test)

[17:39] *** xinming left
[17:40] <dalek> specs: 617f456 | larry++ | S32-setting-library/Numeric.pod:

[17:40] <dalek> specs: be clearer that lsb/msb look for 1 bits

[17:40] <dalek> specs: review: https://github.com/perl6/specs/commit/617f456afe

[17:42] *** konundra joined
[17:44] *** rindolf left
[17:44] *** risou is now known as risou_awy

[17:46] <colomon> TimToady++

[17:50] <colomon> hmmm, bitwise negation is.... +^?

[17:55] <TimToady> yes, which is what you'd want to search for the first 0 bit :)

[17:56] <TimToady> lsb and msb are common in the culture, but maybe they should be dehuffmanized

[17:58] <colomon> TimToady: very nice, yes, I was looking at the wrong formula.  ;)

[17:58] <TimToady> I think libtommath has an lsb finder in there somewhere

[17:59] <dalek> perl6-roast-data: 3ce716d | coke++ | / (4 files):

[17:59] <dalek> perl6-roast-data: today (automated commit)

[17:59] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/3ce716d818

[17:59] <[Coke]> niecza has been dirty for 316 days. pugs has been clean for 12 days. rakudo has been clean for 1 day.

[17:59] <colomon> method lsb() { self +& -self } appears to work to get the least 1 bit

[18:00] <colomon> but its value, not its position

[18:00] <[Coke]> so, one of those recent IO changes avoids the error

[18:01] <TimToady> well, but it's unlikely to be fast for huge numbers, if there's a low-level routine in C that can do it by examining the words from smallest to largest

[18:01] <[Coke]> wondering if it's the $.path vs $!path 

[18:01] * colomon grumbles at TimToady's annoying correctness

[18:03] <TimToady> well, the point is to have an optimizable target, not necessarily to optimize it right off the bat

[18:03] <TimToady> would rather have the functionality first, so I can write RC code with it :)

[18:03] <colomon> TimToady: no, now you've got me coding in C#

[18:04] <nwc10> what's the leaderboard on RC these days?

[18:04] <pmichaud> bbkr: did you patch the upstream source or just the file directly in the R* tarball?

[18:05] <TimToady> Tcl, Python, C, J, PicoLisp, Racket, Perl 6, D

[18:05] <pmichaud> (looks like bbkr left.)  :-(

[18:05] <TimToady> we were briefly ahead of Racket last night :)

[18:10] *** FOAD left
[18:11] *** daniel-s left
[18:13] <nwc10> but they keep fighting back?

[18:13] <colomon> n: say 16.ln2

[18:13] <camelia> niecza v24-51-g009f999: OUTPUT«Unhandled exception: Unable to resolve method ln2 in type Int␤  at /tmp/QWZwoij5T6 line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4331 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4332 (module-CORE @ 582) ␤  at /home/p6…

[18:13] <nwc10> or, I guess, more accurately and diplomatically - people are also actively contributing Racket solutions?

[18:13] <colomon> n: say 16.log2

[18:13] <camelia> niecza v24-51-g009f999: OUTPUT«Unhandled exception: Unable to resolve method log2 in type Int␤  at /tmp/fq7vPmU9Mu line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4331 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4332 (module-CORE @ 582) ␤  at /home/p…

[18:14] <colomon> n: say 16.log(2)

[18:14] <camelia> niecza v24-51-g009f999: OUTPUT«4␤»

[18:16] *** daniel-s joined
[18:17] *** bowtie left
[18:19] *** FOAD joined
[18:21] *** daniel-s left
[18:23] *** daniel-s joined
[18:26] *** snearch joined
[18:27] *** rindolf joined
[18:35] <colomon> TimToady: is there some obvious non-iterative way to calculate msb?

[18:36] *** bowtie_ left
[18:40] <TimToady> well, if you know how many words are in the internal storage of, you generally only have to look in the top word

[18:40] <TimToady> for arbitrary ints

[18:41] <Teratogen> how would you get the msb in C?

[18:41] <Teratogen> just right shift until ...

[18:41] <TimToady> for sized ints, you can do like the C solution in http://rosettacode.org/wiki/Find_first_and_last_set_bit_of_a_long_integer#C

[18:41] <Teratogen> no wait

[18:42] <[Coke]> Are we allowing msb functions on, say, Int? or just int ?

[18:43] <TimToady> why would we restrict it?

[18:43] <[Coke]> Why would we expose the internals of our non machine classes? ;)

[18:44] <TimToady> of course, msb on a negative Int is +Inf

[18:44] *** snuffles joined
[18:45] <TimToady> you can do 2's complement in arbitrary precision as long as you have a way of representing an infinite number of 1 bits :)

[18:46] <TimToady> so we can maintain that abstraction without saying how it's actually done internally

[18:47] <TimToady> (which is just as likely to be 1's complement, but we don't care as long as the API is 2's complement)

[18:48] <TimToady> which is specced, btw, at S02:702

[18:50] <TimToady> but I probably need more clarification of msb semantics there...

[18:50] *** kshannon left
[18:55] *** domidumont1 left
[18:56] *** FieldsaBB joined
[18:56] *** kshannon joined
[18:56] *** konundra left
[18:59] *** Cugel joined
[19:02] <[Coke]> mob

[19:07] <Teratogen> wait for msb, why not just convert the int to binary, turn the binary into a string of 1s and 0s

[19:07] <Teratogen> and then look at the first character?

[19:08] <Teratogen> man, sometimes I am so smart I scare myself

[19:10] <Teratogen> no, wait

[19:11] <Teratogen> that can't work, it's too simple and clear

[19:11] <Teratogen> I must be doing something wrong

[19:12] <timotimo> also, it's wasteful IMO. you should be able to do without the string conversion step by using bitwise operations

[19:13] <dalek> specs: 949c62a | larry++ | S32-setting-library/Numeric.pod:

[19:13] <dalek> specs: explain what lsb and msb do for 0 and negatives

[19:13] <dalek> specs: review: https://github.com/perl6/specs/commit/949c62adef

[19:14] *** kshannon left
[19:15] <TimToady> Teratogen: yes, the point of having them as built-ins is to do something efficient rather than something elegant

[19:15] *** Cugel left
[19:16] <PerlJam> TimToady: beware the tyranny of the "or"  ;)

[19:16] <TimToady> in this case, I suspect tyranny is a necessary evil

[19:18] <TimToady> and if the elegant happens to coincide with the efficient, it's usually due to the tyranny of the optimizer

[19:19] *** gudahtt left
[19:24] *** PacoAir left
[19:25] *** PacoAir joined
[19:33] *** snearch_ joined
[19:35] *** snearch left
[19:37] *** pecastro left
[19:40] <dalek> rakudo-star-daily: bc6b486 | coke++ | log/ (5 files):

[19:40] <dalek> rakudo-star-daily: today (automated commit)

[19:40] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/bc6b486747

[19:41] *** adu joined
[19:43] *** kshannon joined
[19:45] <[Coke]> panda is running (and passing) one more test.

[19:47] *** konundra joined
[19:48] <PerlJam> I typed "perl6" at an ubuntu command prompt on a machine that didn't have rakudo compiled and it said "The program 'perl6' is currently not installed.  You can install it by typing: sudo apt-get install rakudo"

[19:48] <PerlJam> while not amazing, that's still quite neat :)

[19:48] *** d4l3k_ joined
[19:48] <Teratogen> that is pretty neat

[19:52] *** cxreg2 joined
[19:52] *** skids_ joined
[19:53] *** dmol1 joined
[19:54] *** dalek left
[19:54] *** cxreg left
[19:54] *** skids left
[19:54] *** integral left
[19:55] *** dmol left
[19:55] *** lestrrat left
[19:55] *** d4l3k_ is now known as dalek

[19:55] *** lestrrat joined
[19:57] *** REPLeffect left
[19:59] *** daniel-s left
[19:59] *** integral joined
[19:59] *** integral left
[19:59] *** integral joined
[20:00] *** daniel-s joined
[20:02] *** spider-mario joined
[20:04] *** cognominal joined
[20:07] *** REPLeffect joined
[20:07] *** [particle]1 is now known as [particle]

[20:11] *** rindolf left
[20:21] *** snuffles left
[20:22] *** PacoAir left
[20:23] *** PacoAir joined
[20:23] *** raiph left
[20:24] *** nbleniad joined
[20:25] *** btyler joined
[20:27] <timotimo> i'm happy than i can do CALLER::<$=pod>

[20:27] *** axesar joined
[20:29] <timotimo> what's the idea behind not setting the $.level of "=item" to 1?

[20:29] *** nbleniad left
[20:31] *** konundra left
[20:32] *** axesar left
[20:33] *** domidumont joined
[20:35] *** bruges_ left
[20:35] *** bbkr joined
[20:36] <dalek> ecosystem: ec8ff52 | Dagur++ | META.list:

[20:36] <dalek> ecosystem: added GD::Raw

[20:36] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/ec8ff5231b

[20:36] *** bruges joined
[20:38] *** dmol1 left
[20:40] *** pecastro joined
[20:42] <bbkr> pmichaud: just the file. I've also contacted with Supernovus through https://github.com/rakudo/star/issues/22 so he can patch the source module

[20:47] <[Coke]> Regarding this failure - is there a test now?

[20:48] *** japhb_ joined
[20:49] *** denisboyun_ left
[20:51] *** domidumont left
[20:52] *** kaare_ left
[20:55] *** kshannon left
[21:01] *** kshannon joined
[21:01] *** Khisanth left
[21:12] *** skids_ left
[21:15] *** Khisanth joined
[21:16] *** ohi3 is now known as ponbiki

[21:16] <[Coke]> bbkr?

[21:19] <labster> yay, I fixed the heisenbug!  I have no idea how!

[21:22] <lizmat> it's the only way!

[21:28] <masak> "yay, I fixed the mandelbug" -- "so you believe..."

[21:28] <sorear> mandelbugs?  are those named after benoit mandelbrot?

[21:29] <masak> "A mandelbug (named after Benoît Mandelbrot's fractal) is a bug whose causes are so complex it defies repair, or makes its behavior appear chaotic or even non-deterministic." https://en.wikipedia.org/wiki/Heisenbug

[21:30] *** PacoAir left
[21:31] <[Coke]> "Now you're just making stuff up"

[21:32] <[Coke]> however, the schrödinbug is a real thing. I find those all the time. :|

[21:32] *** adu left
[21:32] <labster> Or they find you

[21:32] <huf> bad old code is always full of mandelbugs.

[21:32] *** Boohbah joined
[21:32] <huf> or when the problem itself was never defined... :D

[21:33] <Teratogen> I am a big fan of cargo cult programming myself

[21:33] *** PacoAir joined
[21:35] <labster> Ubuntu's rakudo package is six months old.  We should probably replace that soon.

[21:37] <[Coke]> "we" ?

[21:37] <[Coke]> that's not under our control, is it?

[21:37] *** xilo left
[21:38] * [Coke] wonders what the ports stance is on something like rakudo with multiple possible dependency chains.

[21:39] *** tgt left
[21:40] *** splitcells joined
[21:40] *** prevost left
[21:42] <labster> Well, someone has to submit .debs

[21:43] *** GlitchMr joined
[21:43] <[Coke]> ah. last I remember hearing, ubuntu is only going to pull things every so often anyway, so there's no point in updating them frequently.

[21:43] <[Coke]> ... that said, we could probably automate the generate of whatever they need.

[21:45] <labster> We should probably offer multiple packages.  I wonder if we could have a rakudo-jvm and a rakudo-parrot with different config files, both of which depend on rakudo-core or something.

[21:46] <[Coke]> eh. if we're bundling it based on a release, why try to separate out the core?

[21:47] <[Coke]> the only person we really help is the person who installs both.

[21:47] <[Coke]> (that said, if it's easy, sure.)

[21:49] *** tgt joined
[21:50] *** GlitchMr left
[21:50] *** pmurias left
[21:52] *** splitcells left
[21:52] <pmichaud> AFAICT, someone else squatted on the rakudo packaging for ubuntu/debian

[21:52] <pmichaud> we can certainly start building our own, however.

[21:52] <pmichaud> fsvo "we"

[21:53] <pmichaud> I'd like to automate .deb and .rpm generation; I've just not had the tuits to tackle it myself yet.

[21:53] *** xilo joined
[21:53] <pmichaud> I do expect the build systems are going to want some attention in the next months though; the jvm build system was "make it work" more than anything else, and we'll soon be adding a javascript backend as well.

[21:55] *** ajr_ left
[21:56] *** proller joined
[21:56] *** spider-mario left
[21:57] *** splitcells joined
[21:57] <bbkr> [Coke]: yes?

[21:57] <bbkr> sorry, I was afk

[21:59] *** irdan joined
[21:59] <bbkr> and there is no test for HTTP::Easy as it requires forking to perform one

[22:00] <[Coke]> ok. but without a test, it will break again. 

[22:01] <[Coke]> is there a ticket somewhere saying we need a test?

[22:01] <flussence> I wrote a thing for that, but it's kinda impossible to use effectively without an actual fork() function or built in IPC: https://github.com/flussence/Test-ClientServer

[22:03] *** bluescreen10 left
[22:03] *** pmurias joined
[22:03] <pmichaud> one could potentially test using shell() or run()

[22:03] <bbkr> [Coke], I posted issue. Supernovus is module author, I'm not sure if he plans to add tests without fork available. and mocking IO::Socket::INET is pointless as most of recent bugs came from there and underlying parrot

[22:04] *** lustlife left
[22:04] <pmichaud> I've also been wondering if Rakudo (Star) should fork the module repos that it includes, to provide some ability to vary from upstream versions of the modules.

[22:04] <bbkr> shell() or run() detach process?

[22:04] <pmichaud> I'm pretty sure shell() can background a process.

[22:04] <pmichaud> but clearly we have some way of testing client/server stuff in the spec repo

[22:05] <pmichaud> er, roast repo

[22:05] <pmichaud> so I'm not sure that fork() is a prerequisite for writing a test.

[22:06] <bbkr> I don't recall any method that guarantees clean exit, ie. without leaving detached process that carshed or something

[22:06] <bbkr> crashed*

[22:07] <pmichaud> I know that IO-Socket-INET.t uses qqx{} to run a separate process for testing its client server stuff.

[22:07] <pmichaud> so clearly it's _possible_ in current Rakudo.

[22:08] *** daniel-s left
[22:09] <bbkr> I'll take a look at it and also on flussences module. JSON::RPC also does not have complete code coverage in tests so that may be double-useful. thanks for pointing me in the right direction.

[22:09] *** daniel-s joined
[22:11] <pmichaud> I don't think I want to make a Star release that has uncommitted patches in it.

[22:11] <pmichaud> (Perhaps that will be a necessary step, I'm just not sure I'm ready to make it this month)

[22:13] <bbkr> Supernovus already responded in HTTP::Easy issue and I think he will remove this hack that breaks things very soon

[22:18] <bbkr> another idea is to fork only those Star modules that break things in newest versions. and removing forks once pull requests with fixes are applied in original repos. managing all module forks is pointless.

[22:18] <pmichaud> well, eventually there needs to be a way for module authors to identify "this is the stable version to include"

[22:19] <pmichaud> whether that's through release tarballs (a la CPAN) or specialized tags or ... whatever, we need to have some ability to easily sync modules bundled with Rakudo with non-head versions of the repos

[22:20] <bbkr> maybe fat tags? git external points to fixed commit so tools are already there, only procedures are needed

[22:20] <pmichaud> and it shouldn't be solely up to the downstream packagers to decide where the valid "safe" commit points are.

[22:21] <pmichaud> s/decide/figure out/

[22:23] <lizmat> pmichaud: hopefully we can discuss this in Austin and work this out, including other packaging related issues?

[22:23] *** chrisdev joined
[22:23] <pmichaud> lizmat: yes, I'd very much like that.  I suspect we'll end up with short, medium, and long-term plans here.

[22:24] <lizmat> cool: we've just about packed here, getting a few hours of sleep before we need to get on the road

[22:24] <pmichaud> note that currently I'm not expecting to arrive in Austin until Saturday evening, and my trip may be cut short on the back end

[22:24] <lizmat> in ~24 hours from now, we should be in Austin

[22:24] <lizmat> that's clear: jnthn and masak are leaving on Sun...

[22:25] <lizmat> we just wanted some extra days in Austin before needing to get back for the French Perl Workshop  :-)

[22:26] <masak> no, we're leaving on Sat.

[22:26] <pmichaud> I should probably update the wiki

[22:26] <lizmat> ah, ok

[22:26] <lizmat> *phew*

[22:27] <bbkr> there are 176 packages in ecosystem and about 30 in Star, it would be nice to refresh what Star bundle contains, many new modules appeared since Star list was "composed"

[22:27] <pmichaud> throughout the trip I'll have to be checking in with Paula with some frequency, and may have to head back to Dallas if things get dicey

[22:27] <pmichaud> bbkr: I don't want to add a lot more to Star until we have a better process for managing modules, though.

[22:27] <pmichaud> as it is, the 30 modules we have now have held up releasing star for several months :-/

[22:28] <pmichaud> adding more will just make that problem worse.

[22:28] <pmichaud> (okay, not all 30 modules held up the release, but the more dependencies we add the more likely there are to be problems)

[22:29] <bbkr> also included modules needs better tests to detect regression earlier. most of star/ecosystem modules are very undertested, they sometimes contain only module loading code as the only test.

[22:32] *** skids_ joined
[22:33] <bbkr> good night perl6

[22:35] *** chrisdev left
[22:38] *** chrisdev joined
[22:38] *** splitcells left
[22:48] *** silug left
[22:48] *** silug joined
[22:53] *** woolfy left
[22:54] *** salv0 left
[22:59] *** chrisdev left
[23:00] *** thou joined
[23:03] *** jerome__ left
[23:04] *** chrisdev joined
[23:05] *** census left
[23:07] *** grondilu joined
[23:08] <grondilu> n: say .perl given my $ = <foo bar>, <0 1>;

[23:08] <camelia> niecza v24-51-g009f999: OUTPUT«($("foo", "bar"), (val("0"), val("1")))␤»

[23:08] <grondilu> rn: say .perl given my @ = <foo bar>, <0 1>;

[23:08] <camelia> niecza v24-51-g009f999: OUTPUT«["foo", "bar", val("0"), val("1")].list␤»

[23:08] <camelia> ..rakudo 8a0859: OUTPUT«["foo", "bar", "0", "1"]␤»

[23:09] <grondilu> rn: say .perl given my $ = <foo bar>, <0 1>;

[23:09] <camelia> rakudo 8a0859: OUTPUT«$($("foo", "bar"), ("0", "1"))␤»

[23:09] <camelia> ..niecza v24-51-g009f999: OUTPUT«($("foo", "bar"), (val("0"), val("1")))␤»

[23:10] <grondilu> rn: say .elems given my $ = <foo bar>, <0 1>;

[23:10] <camelia> niecza v24-51-g009f999: OUTPUT«2␤»

[23:10] <camelia> ..rakudo 8a0859: OUTPUT«3␤»

[23:10] <grondilu> rn: say .elems given my $ = <foo bar>, ^2;

[23:10] <camelia> niecza v24-51-g009f999: OUTPUT«2␤»

[23:10] <camelia> ..rakudo 8a0859: OUTPUT«3␤»

[23:10] <grondilu> rn: say .elems given my $ = <foo bar>, <fooagain baragain>;

[23:10] <camelia> niecza v24-51-g009f999: OUTPUT«2␤»

[23:10] <camelia> ..rakudo 8a0859: OUTPUT«3␤»

[23:11] <grondilu> rn: say .elems given my $ = (<foo bar>, <fooagain baragain>);

[23:11] <camelia> rakudo 8a0859: OUTPUT«4␤»

[23:11] <camelia> ..niecza v24-51-g009f999: OUTPUT«2␤»

[23:11] <grondilu> wtf

[23:14] *** proller left
[23:16] *** jerome__ joined
[23:16] *** snearch_ left
[23:18] *** risou_awy is now known as risou

[23:18] *** adu joined
[23:25] *** salv0 joined
[23:35] *** jerome__ left
[23:42] *** snoopy left
[23:48] *** jerome__ joined
[23:53] *** Chillance left
