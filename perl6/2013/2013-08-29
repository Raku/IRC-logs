[00:02] *** benabik joined
[00:07] *** dayangkun joined
[00:08] *** jnap left
[00:09] *** jnap joined
[00:12] *** Psyche^ joined
[00:13] *** dayangkun left
[00:14] *** ajr_ left
[00:15] *** jnap left
[00:15] *** Psyche^_ left
[00:21] *** jnap joined
[00:22] <dalek> perl6-roast-data: 0453525 | coke++ | / (5 files):

[00:22] <dalek> perl6-roast-data: today (automated commit)

[00:22] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/04535259fa

[00:38] <locsmif> coke++ indeed

[00:38] <locsmif> ;P

[00:43] <dalek> roast: 3e1cfca | (David Warring)++ | S32-io/io-spec- (2 files):

[00:43] <dalek> roast: fixed bogus test failures. messed up TAP

[00:43] <dalek> roast: review: https://github.com/perl6/roast/commit/3e1cfcac29

[00:44] *** snoopy_ joined
[00:44] *** snoopy_ left
[00:45] *** dwarring joined
[00:51] *** FROGGS joined
[00:56] *** FROGGS left
[00:57] *** jaldhar left
[01:01] <diakopter> sorear: ping

[01:04] <diakopter> host08:rakudo mwilson$ time ./perl6 -e 'my $z = "a" x 1_000_000; print(eval("so \"$z\" ~~ /$z/"))'

[01:04] <diakopter> ===SORRY!===

[01:04] <diakopter> java.lang.ClassFormatError: Unknown constant tag 97 in class file 08760A548F985687272891CCAE0291F993893F21

[01:04] <diakopter> real	0m22.200s

[01:05] <diakopter> .ask sorear find this spot in the backlog.. jvm bytecode parsing error from rakudo

[01:05] <yoleaux> diakopter: I'll pass your message to sorear.

[01:10] <diakopter> .seen sorear

[01:10] <yoleaux> I saw sorear 19 Aug 2013 04:06Z in #perl6: <sorear> sweet

[01:13] <diakopter> here are the known constant tags: http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.4-140

[01:14] <diakopter> oh, hahaha, 97 is ascii for a

[01:17] <diakopter> host08:rakudo mwilson$ time ./perl6 -e 'my $z = "\x1" x 100_000; print(eval("so \"$z\" ~~ /'\''$z'\''/"))'

[01:17] <diakopter> ===SORRY!===

[01:17] <diakopter> java.lang.ClassFormatError: Illegal UTF8 string in constant pool in class file C2191414E5EAB76038258C2568A4F799EB32FC6F

[01:19] *** jnap left
[01:22] <dalek> roast: f39b0e8 | (David Warring)++ | S32-io/io-spec-win.t:

[01:22] <dalek> roast: fixed typo

[01:22] <dalek> roast: review: https://github.com/perl6/roast/commit/f39b0e8789

[01:23] *** cognominal left
[01:36] <diakopter> .tell masak unexpected in rakudo:  say so "a" x 1_0 ~~ /a ** 1_0/  says  False

[01:36] <yoleaux> diakopter: I'll pass your message to masak.

[01:36] *** jaldhar joined
[01:37] *** skids left
[01:38] *** FROGGS joined
[01:39] *** mtk left
[01:41] *** skids joined
[01:52] *** mtk joined
[01:53] *** thou left
[01:57] <dalek> roast: cdb6698 | coke++ | S0 (4 files):

[01:57] <dalek> roast: pugs fudge

[01:57] <dalek> roast: review: https://github.com/perl6/roast/commit/cdb6698b5e

[01:57] *** thou joined
[02:01] *** cognominal joined
[02:03] *** skids left
[02:05] *** FROGGS left
[02:23] <dalek> perl6-roast-data: a558235 | coke++ | bin/ (2 files):

[02:23] <dalek> perl6-roast-data: Up the timer from 15s to 1m

[02:23] <dalek> perl6-roast-data: 

[02:23] <dalek> perl6-roast-data: Should avoid some timeout errors on niecza.

[02:23] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/a558235de8

[02:24] <colomon> Hmmm, ABC seems to work on jakudo

[02:24] *** locsmif left
[02:24] <colomon> oodles of Passing an object candidate to Mu.bless is deprecated messages

[02:25] <[Coke]> colomon: looks like some of the niecza failures in roast I'm seeing are just timeouts

[02:25] <colomon> ?

[02:26] <[Coke]> will check again after the next run.

[02:26] <[Coke]> all the roast runs use a time/memory limited perl6 wrapper script.

[02:27] <[Coke]> so, https://github.com/coke/perl6-roast-data/blob/master/niecza_summary.out#L5932 is just a timeout error.

[02:27] <[Coke]> Things should look a little nicer after this.

[02:30] <colomon> [Coke]++

[02:51] *** Chat8992 joined
[02:51] <Chat8992> Hi

[02:52] *** Chat8992 left
[03:04] *** skids joined
[03:04] *** FROGGS joined
[03:13] *** mauke left
[03:13] *** mauke joined
[03:14] *** preflex left
[03:15] *** preflex_ joined
[03:15] *** ChanServ sets mode: +v preflex_

[03:15] *** preflex_ is now known as preflex

[03:29] *** Tene left
[03:29] *** djanatyn left
[03:30] *** Tene joined
[03:31] *** djanatyn joined
[03:34] *** PZt joined
[03:48] *** xinming_ left
[03:52] *** xinming joined
[04:01] *** fridim_ left
[04:14] *** abnorman left
[04:26] *** risou_awy joined
[04:30] *** cognominal left
[04:31] *** cognominal joined
[04:44] *** FROGGS left
[04:48] *** hummeleBop joined
[04:56] *** SamuraiJack__ joined
[05:04] *** FROGGS joined
[05:13] <dalek> std: 27326bc | larry++ | STD.pm6:

[05:13] <dalek> std: allow _ in regex ** range integers

[05:13] <dalek> std: review: https://github.com/perl6/std/commit/27326bc097

[05:14] *** ggoebel2 joined
[05:16] *** ggoebel left
[05:23] *** mtk left
[05:27] *** mtk joined
[05:29] *** cognominal left
[05:37] *** cognominal joined
[05:41] *** rindolf joined
[06:00] *** FROGGS left
[06:06] *** dmol joined
[06:24] *** dmol left
[06:27] <diakopter> hi

[06:30] *** FROGGS joined
[06:46] <moritz> good morning diakopter, *

[06:49] <FROGGS> o/

[06:56] *** rindolf left
[06:57] *** domidumont joined
[06:57] *** berekuk joined
[07:01] *** qiyong joined
[07:01] <qiyong> does p6 still have three kinds of variables?

[07:02] *** domidumont left
[07:06] <GlitchMr> qiyong: No. Neither Perl 5 or Perl 6 had three kinds of variables.

[07:06] <GlitchMr> But if you mean, scalar, array, and hash, Perl 6 still has these.

[07:07] <JimmyZ> qiyong: 你好

[07:07] <GlitchMr> (but Perl 5 also had typeglobs (*), and subroutines (&))

[07:08] <GlitchMr> (and Perl 6 also has generic package name (::), and subroutines (&))

[07:09] <GlitchMr> Also, Perl 6 has twigils.

[07:11] *** zakharyas joined
[07:14] *** domidumont joined
[07:16] <qiyong> GlitchMr: isn't that variable type?

[07:16] <GlitchMr> I'm not sure. What is your definition of variable type?

[07:16] <qiyong> scalar, arry/list, hash

[07:16] <GlitchMr> The documentation says it is.

[07:17] <nwc10> Perl 5 has 5 things you can put sigils in front of, and about 3 more things that don't have sigils

[07:17] <nwc10> scalar, array, hash, code, typeglob, format, filehandle, dirhandle

[07:17] <qiyong> it is what? what's the proper term for scalar, arry, ...

[07:17] <GlitchMr> http://feather.perl6.nl/syn/S02.html#Sigils

[07:17] <GlitchMr> array

[07:18] <qiyong> how to test if an item exist? like set operator in, using hash?

[07:19] *** domidumont left
[07:19] *** domidumont joined
[07:20] <FROGGS> r: my %hash = foo => 42; say %hash<bar>:exists; say %hash<foo>:exists

[07:20] <camelia> rakudo 9faa30: OUTPUT«False␤True␤»

[07:21] <FROGGS> r: my %hash = foo => 42; say %hash.exists('bar'); say %hash.exists('foo')

[07:21] <camelia> rakudo 9faa30: OUTPUT«False␤True␤»

[07:21] *** dmol joined
[07:26] <qiyong> FROGGS: what is :exists?

[07:26] <qiyong> object method?

[07:27] <JimmyZ> 一个动词

[07:29] *** pernatiy joined
[07:34] *** kaleem joined
[07:35] *** chenryn left
[07:35] <FROGGS> qiyong: sort of, it is called an adverb

[07:36] <qiyong> FROGGS: new in perl6?

[07:37] <qiyong> i want to implement this as simple as possible, in p5 or p6.  if ($user in @users) { }

[07:37] <FROGGS> qiyong: adverbs? at least the hash adverbs are newly added to rakudo within the last months

[07:38] <JimmyZ> std: if $user == any(@users) { }

[07:38] <camelia> std 27326bc: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable $user is not predeclared at /tmp/rjoW0he5bt line 1:␤------> [32mif [33m⏏[31m$user == any(@users) { }[0m␤Variable @users is not predeclared at /tmp/rjoW0he5bt line 1:␤------> [32mif $user == any([33m⏏[31m@users) { }[0m␤C…

[07:38] <FROGGS> well, @users is not a hash

[07:38] <JimmyZ> you want any

[07:39] *** pdcawley joined
[07:40] <FROGGS> r: my $user = 4; my @users = ^6; say $user == any @users

[07:40] <camelia> rakudo 9faa30: OUTPUT«any(False, False, False, False, True, False)␤»

[07:41] <FROGGS> so it will be true because one of it is true

[07:41] <FROGGS> r: my $user = 4; my @users = ^6; say so $user == any @users

[07:41] <camelia> rakudo 9faa30: OUTPUT«True␤»

[07:43] <dagurval> r: say so 'a'...'z'

[07:43] <dagurval> so makes it timeout ._.

[07:43] <camelia> rakudo 9faa30: OUTPUT«(timeout)»

[07:52] <FROGGS> ?

[07:52] <FROGGS> r: say 'a'...'z'

[07:52] <camelia> rakudo 9faa30: OUTPUT«a b c d e f g h i j k l m n o p q r s t u v w x y z␤»

[07:53] <FROGGS> r: say ?('a'...'z')

[07:53] <camelia> rakudo 9faa30: OUTPUT«True␤»

[07:53] <FROGGS> r: say so ('a'...'z')

[07:53] <camelia> rakudo 9faa30: OUTPUT«True␤»

[07:53] <FROGGS> r: say so 'a'...'z'

[07:53] <camelia> rakudo 9faa30: OUTPUT«(timeout)»

[07:53] <FROGGS> maybe the ... has lower precedence than so?

[07:53] *** sqirrel joined
[07:54] <FROGGS> r: say True...'z'

[07:54] <camelia> rakudo 9faa30: OUTPUT«(timeout)»

[07:54] <lizmat> good *, #perl6!

[07:55] <FROGGS> hi lizmat 

[07:55] <lizmat> FROGGS: %h.exists is supposed to be an internal method

[07:55] <lizmat> also, the :exists adverb can be applied to slices, whereas %h.exists only takes 1 parameter

[07:55] <FROGGS> lizmat: ahh, okay

[07:56] <lizmat> r: my %h=a=>1,b=>2; say %h<a b c d>:exists

[07:56] <camelia> rakudo 9faa30: OUTPUT«True True False False␤»

[07:56] <FROGGS> dunno if I will remember it though :o)

[07:56] <qiyong> JimmyZ: does p5 have any?

[07:56] <lizmat> r: my %h=a=>1,b=>2; say %h<a b c d>:k   # if you just want to know which keys exist

[07:56] <camelia> rakudo 9faa30: OUTPUT«a b␤»

[07:57] <FROGGS> qiyong: no, since there are no junctions

[07:57] <lizmat> r: my %h=a=>1,b=>2; say %h<a b c d>:v   # if you just want to know the values of existing keys

[07:57] <camelia> rakudo 9faa30: OUTPUT«1 2  ␤»

[07:57] <lizmat> hmmm… that feels wrong

[07:57] <FROGGS> qiyong: but there are other ways to achieve that, see List::Utils or so

[07:58] <FROGGS> r: my %h=a=>1,b=>2; say %h<a b c d>:v.perl

[07:58] <camelia> rakudo 9faa30: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/_qYFvzGoiM␤Two terms in a row␤at /tmp/_qYFvzGoiM:1␤------> [32mmy %h=a=>1,b=>2; say %h<a b c d>:v[33m⏏[31m.perl[0m␤    expecting any of:␤        pair value␤        infix stopper␤        infix or meta-inf…

[07:58] <FROGGS> r: my %h=a=>1,b=>2; say (%h<a b c d>:v).perl

[07:58] <camelia> rakudo 9faa30: OUTPUT«(1, 2, (), ())␤»

[07:58] <lizmat> indeed, rakudobug

[08:01] <JimmyZ> qiyong: no

[08:04] <qiyong> what the hell is adverb?

[08:04] <qiyong> new invention?

[08:04] <qiyong> any is keyword or function?

[08:04] <FROGGS> dagurval: it is about precedence, and I think it is not a bug at all

[08:05] <lizmat> r: my %h=a=>1,b=>2; say %h<a b c d>:v.elems

[08:05] <camelia> rakudo 9faa30: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/FrZy9WBD0i␤Two terms in a row␤at /tmp/FrZy9WBD0i:1␤------> [32mmy %h=a=>1,b=>2; say %h<a b c d>:v[33m⏏[31m.elems[0m␤    expecting any of:␤        pair value␤        infix stopper␤        infix or meta-in…

[08:05] <lizmat> r: my %h=a=>1,b=>2; say (%h<a b c d>:v).elems

[08:05] <camelia> rakudo 9faa30: OUTPUT«2␤»

[08:05] <FROGGS> r: say &any.WHAT # any is a function

[08:05] <camelia> rakudo 9faa30: OUTPUT«(Sub)␤»

[08:06] <JimmyZ> r: say any.WHAT

[08:06] <camelia> rakudo 9faa30: OUTPUT«(Junction)␤»

[08:07] <FROGGS> r: say any.WHAT.gist.subst(/\w/, 'f') # *g*

[08:07] <camelia> rakudo 9faa30: OUTPUT«(function)␤»

[08:08] <JimmyZ> r: constant any = &any; say any.WHAT

[08:08] <camelia> rakudo 9faa30: OUTPUT«(Sub)␤»

[08:08] <lizmat> r: my %h=a=>1,b=>2; say (%h<a b c d>:v).elems; say (%h<a b c d>:v).perl # TimToady: something feels incongruent here

[08:08] <camelia> rakudo 9faa30: OUTPUT«2␤(1, 2, (), ())␤»

[08:08] <lizmat> feels to me, the .perl should say "(1,2)', or am I seeing this wrong ?

[08:32] *** pernatiy left
[08:33] *** Vlavv left
[08:34] <moritz> you mean .elems shouldn't flatten?

[08:34] *** berekuk left
[08:35] *** qiyong left
[08:35] *** daxim joined
[08:35] *** berekuk joined
[08:36] <lizmat> well, I'm not sure anymore…  clearly showing 4 elements in .perl, and .elems saying 2, feels incongruent to me

[08:37] <dalek> roast: 1a63bc5 | moritz++ | / (3 files):

[08:37] <dalek> roast: some rakudo.jvm unfudges

[08:37] <dalek> roast: review: https://github.com/perl6/roast/commit/1a63bc54c9

[08:38] *** denis_boyun joined
[08:42] <jnthn> .elems implies flattening list context

[08:43] <jnthn> .perl probably should not do so, but represent what it has, since if you did other operations on it (like .tree) you'd recover the structure.

[08:46] *** Vlavv joined
[08:46] * lizmat tries to adjust to incongruity :-)

[08:50] <masak> good antenoon, #perl6

[08:50] <yoleaux> 01:36Z <diakopter> masak: unexpected in rakudo:  say so "a" x 1_0 ~~ /a ** 1_0/  says  False

[08:50] <masak> r: say so "a" x 1_0 ~~ /a ** 1_0/

[08:50] <camelia> rakudo 9faa30: OUTPUT«False␤»

[08:50] <masak> r: say so "a" ~~ /a ** 1_0/

[08:50] <camelia> rakudo 9faa30: OUTPUT«False␤»

[08:51] <moritz> it's parsed as /[a ** 1] _0/

[08:51] <masak> r: say so "a_0" ~~ /a ** 1_0/

[08:51] <camelia> rakudo 9faa30: OUTPUT«True␤»

[08:51] <masak> moritz: yes.

[08:51] *** salv0 left
[08:51] <jnthn> TimToady patched STD to get that right in the backlog :)

[08:51] <moritz> masak: and TimToady++ already patched it in STD

[08:51] <masak> I think a fairly strong case could be made... OK, that settles it.

[08:51] <jnthn> So just needs somebody to nab the patch :)

[08:51] * masak submits rakudobug

[08:52] *** atroxaper joined
[08:52] <atroxaper> Hello, #perl6

[08:52] <FROGGS> hi atroxaper 

[08:52] <masak> hi atroxaper 

[08:52] <arnsholt> That looks like something that should be added to roast as well

[08:52] <masak> today I got an email encouraging me to blog the t3 reviews.

[08:53] <masak> I'm going to set time aside for it this afternoon.

[08:54] * lizmat finally gets a rakudo built after stubbing Set, KeySet, Bag, KeyBag in src/core/Any

[08:55] <moritz> so it's a missing forward declaration?

[08:55] <lizmat> well, that was only one of the problems in the patch, apparently

[08:55] <atroxaper> Does anybody know how can i call system utilit and print his aoutput to console in real time. I try to say qqx|$command|; # for axample i try to call git command. say qqx|"git clone url"| print git's asking of my password and doesn't print anything after that.

[08:56] <atroxaper> Sorry for offtop

[08:56] <moritz> atroxaper: the problem is likely that git asks for the password on the terminal directly, and not via STDIN/STDOUT

[08:56] <moritz> atroxaper: can't you just call shell("git clone $url") ?

[08:57] *** bruges_ left
[08:57] <atroxaper> moritz: ok. but is there some way to see output?

[08:57] <moritz> well, the user sees the output that way

[08:57] <masak> r: say so "a" ~~ / a ** 1e0 / # what about this one?

[08:57] <camelia> rakudo 9faa30: OUTPUT«False␤»

[08:57] <masak> r: say so "ae0" ~~ / a ** 1e0 / # what about this one?

[08:57] *** donaldh joined
[08:57] <camelia> rakudo 9faa30: OUTPUT«True␤»

[08:57] *** bruges joined
[08:58] <moritz> masak: I'd think it would make sense to require a word boundary after the number that follows a **

[08:58] *** dakkar joined
[08:58] <moritz> number of reptitions are inherently integers, so I don't see the point of allowing floating-point numbers here

[08:59] <atroxaper> moritz: you are best! shell($command) works! Many thanks!

[08:59] <masak> moritz: I think I agree.

[08:59] <moritz> \o/

[08:59] <moritz> atroxaper: and fwiw Perl 6 questions are never off-topic here :-)

[09:00] <masak> and I've always felt that a warning in the case of A ** BCD parsing as [A ** B]CD -- would be very appropriate.

[09:00] *** bruges_ joined
[09:02] <moritz> +1

[09:02] *** bruges_ left
[09:03] <donaldh> rakudo chdir emulation: https://github.com/rakudo/rakudo/pull/202

[09:03] *** bruges_ joined
[09:04] <donaldh> this helps unblock panda

[09:04] <FROGGS> donaldh: I'm doing the lasts tests on windows/jvm

[09:04] <donaldh> FROGGS: oh cool

[09:04] <FROGGS> donaldh: do you had the chance to check for the failing chdir test?

[09:04] *** bruges left
[09:04] <donaldh> FROGGS: on parrot?

[09:05] <donaldh> or JVM ?

[09:05] <FROGGS> donaldh: https://github.com/rakudo/rakudo/pull/202#issuecomment-23376687

[09:06] <donaldh> FROGGS: I cannot test on XP

[09:06] <donaldh> s/XP/Windows/

[09:06] <dalek> roast: 16fc9c2 | moritz++ | S (14 files):

[09:06] <dalek> roast: rakudo unfudges

[09:06] <dalek> roast: review: https://github.com/perl6/roast/commit/16fc9c287e

[09:06] <FROGGS> k, I will test your latest commit in a minute

[09:07] <FROGGS> or maybe after the jvm tests

[09:08] <jnthn> wow, lots of unfudge :)

[09:09] <moritz> lizmat++ implemented much of the changes that enabled those

[09:09] <jnthn> lizmat++

[09:09] <donaldh> oh, the chdir-emu PR also contains missing IO ops that allow us to unfudge slurp tests and pass most of the spurt tests.

[09:09] <jnthn> donaldh: On JVM, yes? :)

[09:09] <jnthn> donaldh: Binary IO?

[09:09] <donaldh> jnthn: yes.

[09:09] <jnthn> \o/

[09:09] <jnthn> donaldh++

[09:10] <JimmyZ> \o/ CQRS in perl6!

[09:11] <donaldh> jnthn: the JVM binary IO ops are already committed in nqp

[09:12] <jnthn> donaldh: nice

[09:12] * jnthn was a bit distracted for the last few days and only sorta followed what's been going on :)

[09:12] <donaldh> work does that

[09:13] <masak> ain't that the truth.

[09:16] <lizmat> jnthn: can a native ever be aliased to $_ ?

[09:17] <lizmat> I'm asking because of "my int $a will begin { … }"

[09:17] *** sqirrel left
[09:17] <lizmat> technically, adding a phaser for a native, would be no pb

[09:17] <lizmat> but aliasing $_ might ?

[09:18] * lizmat is now down to uncommenting single lines to see what breaks the build

[09:20] *** denis_boyun left
[09:21] <jnthn> lizmat: It's the same issue was rw native things...

[09:21] <jnthn> s/was/as/

[09:21] <lizmat> well, you mean it's NYI?  or that it will be impossible ?

[09:21] <jnthn> lizmat: NYI

[09:21] <lizmat> ok, I can live with that

[09:22] <lizmat> :-)

[09:22] *** berekuk left
[09:22] <jnthn> lizmat: Though note that you can't apply mixins to a native "container" as there is no container...

[09:22] <lizmat> yep, got that

[09:22] <jnthn> I'm not sure what .WHAT should say on an rw native thing. We could just pretend it's the underlying native type.

[09:23] <masak> lizmat: in a way, it's nice to see you bumping up against untried/unimplemented use cases. means you're breaking new ground, chopping away djungle for future explorers.

[09:24] *** berekuk joined
[09:24] <jnthn> Remember to roar while doing so...

[09:25] *** mathw joined
[09:30] *** sqirrel joined
[09:32] <JimmyZ> jnthn++, CQRS is useful

[09:33] <jnthn> Wasn't my invention... :)

[09:33] *** denis_boyun joined
[09:36] <dalek> rakudo/nom: e846e9b | (Donald Hunter)++ | src/core/IO.pm:

[09:36] <dalek> rakudo/nom: Start using absolute paths for IO ops

[09:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e846e9bc56

[09:36] <dalek> rakudo/nom: 58964e0 | (Donald Hunter)++ | src/core/IO.pm:

[09:36] <dalek> rakudo/nom: Make chdir slightly less naive. Write tests before elaborating.

[09:36] *** dalek left
[09:36] <FROGGS> dalek: o/

[09:37] *** dalek joined
[09:37] *** ChanServ sets mode: +v dalek

[09:39] <lizmat> one of my latest inventions:

[09:39] <lizmat>     method delete($a) is hidden_from_backtrace {

[09:39] <lizmat>         X::Method::NotFound.new( method => 'delete', typename => self.^name ).throw;

[09:39] <lizmat>     }

[09:39] <lizmat> :-)

[09:39] <jnthn> um...why not just let the normal method caller do that?

[09:39] <lizmat> a method telling the world it doesn't exist

[09:40] <lizmat> because it *does* exist because of inheritence, and it shouldn't

[09:40] <jnthn> arrrrghghghghghgh

[09:40] <jnthn> No you can't do that!!

[09:40] <jnthn> That's ALWAYS wrong design.

[09:40] <moritz> lizmat: this will be the most confusing errors ever

[09:40] <moritz> *one of the

[09:41] <lizmat> why?  it will just state it doesn't exist?

[09:41] <moritz> but it exists

[09:41] <moritz> and that's the problem

[09:41] <jnthn> But it does exist

[09:41] <lizmat> well, yes, 

[09:41] <moritz> you can check .^can that it exists

[09:41] <lizmat> but Key.delete and Bag.delete are specced to not exist

[09:41] <moritz> lizmat: it's much better to introduce an X::Immutable.new(method => 'delete').throw or so

[09:42] <lizmat> tha's fine by me too  :-)

[09:42] <moritz> well, seems the specs are inconsistent, happens

[09:42] <lizmat> I was just going by the spec

[09:42] <jnthn> Yes, "we don't support this operation" is very different from "method not found"

[09:42] <lizmat> or rather, I was fixing a spectest

[09:42] <lizmat> ok, will fix  :-)

[09:42] <jnthn> But even this seems Liskov-dubious...

[09:42] <jnthn> What delete method is inherited?

[09:42] <lizmat> Any.delere

[09:42] <lizmat> *delete

[09:42] <moritz> putting .delete into Any is dubious, I'd say

[09:43] <jnthn> Why does that exist?

[09:43] <jnthn> r: Any.delete

[09:43] <camelia> rakudo 9faa30: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in method delete at src/gen/CORE.setting:1443␤  in block  at /tmp/PlumjvRbqu:1␤␤»

[09:43] <jnthn> r: Any.delete('x')

[09:43] <camelia> rakudo 9faa30:  ( no output )

[09:43] <jnthn> r: Any.new.delete('x')

[09:43] <moritz> r: say Any.delete('x')

[09:43] <camelia> rakudo 9faa30:  ( no output )

[09:43] <camelia> rakudo 9faa30: OUTPUT«Nil␤»

[09:43] <lizmat> r: my %h; my $b := %h<a><b>; say %h; $b=42; say %h

[09:43] <camelia> rakudo 9faa30: OUTPUT«().hash␤("a" => {"b" => 42}).hash␤»

[09:44] <lizmat> well, actually, that's Any.exists

[09:44] <lizmat> I also needed Any.delete for that...

[09:44] <lizmat> brb

[09:44] * jnthn doesn't see where...

[09:46] *** itz left
[09:49] <lizmat> ok, will try to remove Any.delete after I fixed this Set/Bag business

[09:49] <lizmat> or tell you guys why I couldn't

[09:49] *** itz joined
[09:49] <jnthn> exists and delete in Any do feel a little odd to me...

[09:50] <lizmat> exists *is* needed for %h<a><b>

[09:50] <lizmat> and binding to that

[09:50] <jnthn> How so?

[09:50] <jnthn> (where do we call .exists, that is...)

[09:50] <lizmat> because bind_key does an exists

[09:50] <moritz> r: my $x; $x<a><b> = 3; say $x

[09:50] <camelia> rakudo 9faa30: OUTPUT«("a" => {"b" => 3}).hash␤»

[09:50] <jnthn> Where do we call bind_key?

[09:51] <lizmat> r: my $x; $x<a><b> := 3; say $x

[09:51] <camelia> rakudo 9faa30: OUTPUT«("a" => {"b" => 3}).hash␤»

[09:51] <moritz> jnthn: ah, you mean we could viviy the hash before calling bind_key

[09:51] <jnthn> Right, that calls bind_key...

[09:51] <jnthn> moritz: Not meaning anything yet, just trying to understand... :)

[09:51] <lizmat> patches welcome  :-)

[09:51] <jnthn> I'd thought exists and delete had been put in Any for :exists/:delete related reasons...

[09:52] <lizmat> it was inspired by spectest todo/skips

[09:52] <lizmat> nope, for that they are not needed

[09:52] <lizmat> well, maybe

[09:52] <lizmat> hmmm

[09:52] <jnthn> Right, I'd expected we could get that out of :U candidates in the postcircumfixes...

[09:53] <lizmat> maybe that can wait until I made subs of them ?

[09:53] <lizmat> r: my %h; say %h<a><b>:delete # this is maybe why I needed Any.delete

[09:53] <camelia> rakudo 9faa30: OUTPUT«Nil␤»

[09:54] <jnthn> lizmat: Yeah, perhaps so. I just worry when our core classes are breaking Liskov so blatantly...

[09:55] <lizmat> the alternative would have been to add a *lot* of candidates for the :U case for all of the adverbs

[09:55] <lizmat> or to fix each candidate up

[09:55] <lizmat> so that it would accept U: as well

[09:56] <lizmat> this was a much simpler solution

[09:56] <jnthn> Yeah, that's the way I'd have leaned towards...

[09:57] <lizmat> that would be an extra .defined check on *every* [] and {} access

[09:57] <moritz> maybe make that an nqp::defined check or so, that's fairly cheap

[09:57] <lizmat> perhaps when they're subs, we can make the extra candidates

[09:58] <jnthn> :U is .DEFINITE, not .defined

[09:58] <jnthn> As is :D

[09:58] <jnthn> That boils down to nqp::isconcrete, which is cheap.

[09:58] *** berekuk left
[09:58] <jnthn> (flag check on Parrot and Moar, instanceof in JVM)

[09:58] <lizmat> if that's the way you think I should go, I will

[09:59] * lizmat is finally able to uncomment code and still build, yeah!

[09:59] <jnthn> lizmat: It feels righter, but as you say it doesn't deal with the other case where you needed .exists...

[09:59] <lizmat> my mind is now filled with Set and Bag, I will revisit this later, ok?

[10:00] <jnthn> sure, no hurry :)

[10:00] <jnthn> And I'm fine if this waits until the method => sub move.

[10:00] <lizmat> what should be better: nqp::isconcrete or .DEFINITE ?

[10:00] *** denis_boyun left
[10:00] <lizmat> performance wise

[10:01] <lizmat> or which would you prefer :-)

[10:01] <jnthn> nqp::isconcrete, though $x.DEFINITE is just nqp::p6bool(nqp::isconcrete($x)) really

[10:02] <lizmat> but I would have to wrap nqp::isconcrete to be able to use it as a conditional, no?

[10:02] *** rindolf joined
[10:03] <jnthn> no

[10:03] <jnthn> it returns a native int.

[10:03] <jnthn> 0 or 1

[10:03] <jnthn> You can use that directly in a conditional.

[10:03] <jnthn> if nqp::isconcrete(x) { ... } # totally fine

[10:04] <lizmat> cool

[10:05] <timotimo> heyo :)

[10:06] <masak> heyo, timotimo 

[10:07] *** xenoterracide left
[10:07] <donaldh> nqp: nqp::copy('a','b')

[10:07] <camelia> nqp: OUTPUT«Class 'File' not found␤current instr.: '' pc 40 ((file unknown):39) (/tmp/chJDn33FTJ:10)␤»

[10:07] <timotimo> ... wat? :)

[10:07] <timotimo> oh, of course

[10:08] <jnthn> no, still wat :P

[10:08] <donaldh> nqp-jvm: nqp::copy('a','b')

[10:08] <camelia> nqp-jvm: OUTPUT«No registered operation handler for 'copy'␤  in compile_op␤  in as_jast␤  in as_jast␤  in <anon>␤  in compile_all_the_stmts␤  in as_jast␤  in as_jast␤  in <anon>␤  in compile_all_the_stmts␤  in as_jast␤  in as_jast␤  in <anon>␤  in compile_all_the_stmts␤  in <anon>␤  in …

[10:08] <jnthn> I think nqp-jvm here is hopelessly out of date, fwiw.

[10:08] <donaldh> ah

[10:08] <nwc10> is there an easy way to ask nqp-jvm its version?

[10:09] <timotimo> find a recent commit to nqp and see if it is in? ;)

[10:09] <jnthn> nwc10: I think it's actually old enough that it's from the nqp-jvm-prep repo!

[10:09] *** ssutch left
[10:09] <donaldh> rakudo copy silently fails for invalid params on JVM.

[10:09] <nwc10> nostagia!

[10:10] <nwc10> is there any way to ask it to upgrade itself?

[10:10] <donaldh> I think it is because nqp::copy returns -1 on JVM but maybe throws an exception on parrot ?

[10:15] <jnthn> donaldh: I suspect we want it to be consistent there.

[10:17] *** salv0 joined
[10:20] *** SamuraiJack joined
[10:20] *** firstfire joined
[10:23] *** SamuraiJack__ left
[10:23] * donaldh rebuilds nqp on parrot

[10:45] <donaldh> r: copy('a', 'b')

[10:45] <camelia> rakudo e0b2af: OUTPUT«copy is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting:2␤  in sub copy at src/RESTRICTED.setting:13␤  in block  at /tmp/svvN6_WzMO:1␤␤»

[10:46] * donaldh golfs alone

[10:49] *** denis_boyun joined
[10:58] *** atroxaper left
[11:04] *** clairence joined
[11:07] *** denysonique joined
[11:07] *** berekuk joined
[11:07] <denysonique> Does perl 6 have something like 3->times { }

[11:07] <denysonique> ?

[11:07] <denysonique> e.g. ruby: 3.times { print 'foo ' }

[11:08] <timotimo> no, but you can build it yourself

[11:08] <lizmat> r: say "for" for ^3 

[11:08] <camelia> rakudo e0b2af: OUTPUT«for␤for␤for␤»

[11:08] <lizmat> ?

[11:08] <timotimo> r: sub times($num, *&block) { block for ^$num }; 5.&times { say "test" }

[11:08] <camelia> rakudo e0b2af: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/lepeCFnIlK␤Unexpected block in infix position (two terms in a row, or previous statement missing semicolon?)␤at /tmp/lepeCFnIlK:1␤------> [32m *&block) { block for ^$num }; 5.&times [33m⏏[31m{ say "test" …

[11:09] <moritz> r: sub times($num, *&block) { block for ^$num }; 5.&times: { say "test" }

[11:09] <timotimo> r: sub times($num, *&block) { block for ^$num }; 5.&times: { say "test" }

[11:09] <camelia> rakudo e0b2af: OUTPUT«test␤test␤test␤test␤test␤»

[11:09] <timotimo> :)

[11:09] <moritz> :-)

[11:09] <lizmat> .&times is not really .times, but yeah

[11:09] <timotimo> r: sub times($num, *&block) { block for ^$num }; 10.&times: { say "test"; last if (True, False, False, False).pick }

[11:10] <camelia> rakudo e0b2af: OUTPUT«test␤test␤test␤»

[11:10] *** firstfire left
[11:10] <timotimo> even works with control exceptions

[11:10] <timotimo> lizmat: right, but now that i know it's possible to do it like this, you can easily MONKEY_TYPING-enhance Int (or Cool if you must)

[11:10] <timotimo> (except method caches are not properly invalidated when using MONKEY_TYPING ...)

[11:10] <lizmat> probably, Int, but yeah

[11:12] <timotimo> denysonique: does that help you?

[11:12] <denysonique> timotimo: yes thanks

[11:12] <denysonique> timotimo: I was wondering if something like this could become a feature of perl

[11:13] <denysonique> without defining it

[11:13] <moritz> why?

[11:13] <denysonique> e.g. feature of stdlib

[11:13] <moritz> we already have a very easy way to iterate $n times

[11:13] <moritz> for ^$n { ... }

[11:13] <moritz> compared to  $n.each: { ... }

[11:13] *** clairence left
[11:13] <moritz> I don't see the big advantage

[11:14] <moritz> it's also questionable wether numbers should implement control flow

[11:15] <masak> denysonique: if you like it so much, just define a subroutine.

[11:15] <GlitchMr> for ^3 { }

[11:15] <moritz> s/each/times/

[11:15] <masak> r: sub upto($N) { 0 ..^ $N }; for upto(7) { say $_ }

[11:15] <camelia> rakudo e0b2af: OUTPUT«0␤1␤2␤3␤4␤5␤6␤»

[11:15] <JimmyZ> well, it's easy to be a feture

[11:15] <JimmyZ> write it ,submit to panda

[11:15] <timotimo> i don't see a problem with putting it into a module.

[11:16] <timotimo> i don't think it should be in "core"

[11:16] <masak> we already have it in core: it's called prefix:<^>

[11:16] <JimmyZ> then, use feature 'times';

[11:16] <GlitchMr> Perl 6 also has perfectly fine 3.times { print 'foo ' }

[11:16] <timotimo> whereby i mean "available without a 'use'"

[11:16] <GlitchMr> It's called either print 'foo ' x 3, or for ^3 { print 'foo ' }

[11:16] *** brrt joined
[11:17] <JimmyZ> r: print 'foo ' x 3

[11:17] <camelia> rakudo e0b2af: OUTPUT«foo foo foo »

[11:17] <GlitchMr> for ^3 is the "repeat" you want.

[11:17] <JimmyZ> r: print 3 x 'foo '

[11:17] <camelia> rakudo e0b2af: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏foo ' (indicated by ⏏)␤  in method Int at src/gen/CORE.setting:11524␤  in method Int at src/gen/CORE.setting:5108␤  in sub infix:<x> at src/gen/CORE.setting:1378␤  in sub infix…

[11:17] <JimmyZ> r: print 'foo ' for ^3

[11:17] <camelia> rakudo e0b2af: OUTPUT«foo foo foo »

[11:18] <GlitchMr> Actually, "base-10 number must begin with valid digits or '.'"

[11:18] <GlitchMr> That's interesting.

[11:18] <GlitchMr> r: print 'foo ' x '3'

[11:18] <camelia> rakudo e0b2af: OUTPUT«foo foo foo »

[11:18] <GlitchMr> r: print 'foo ' x '3.5'

[11:18] <camelia> rakudo e0b2af: OUTPUT«foo foo foo »

[11:18] <GlitchMr> So, you can repeat with dots?

[11:19] <JimmyZ> r: print 'foo ' x '3i'

[11:19] <camelia> rakudo e0b2af: OUTPUT«Can not convert 0+3i to Int: imaginary part not zero␤  in method Int at src/gen/CORE.setting:11524␤  in method Int at src/gen/CORE.setting:9573␤  in method Int at src/gen/CORE.setting:5108␤  in sub infix:<x> at src/gen/CORE.setting:1378␤  in sub infix:<x> at src/ge…

[11:19] <JimmyZ> r: print 'foo ' x '3+2i'

[11:19] <camelia> rakudo e0b2af: OUTPUT«Can not convert 3+2i to Int: imaginary part not zero␤  in method Int at src/gen/CORE.setting:11524␤  in method Int at src/gen/CORE.setting:9573␤  in method Int at src/gen/CORE.setting:5108␤  in sub infix:<x> at src/gen/CORE.setting:1378␤  in sub infix:<x> at src/ge…

[11:19] <JimmyZ> r: print 'foo ' x '3+0i'

[11:19] <camelia> rakudo e0b2af: OUTPUT«foo foo foo »

[11:22] <JimmyZ> r: { print 'foo '} x '3+0i'

[11:22] <camelia> rakudo e0b2af:  ( no output )

[11:23] <timotimo> is CQRS a good pattern for implementing event stores? :3

[11:24] <timotimo> CQRS with an event store*

[11:24] <JimmyZ> I think so

[11:24] *** sqirrel left
[11:25] * timotimo failed trolling apparently

[11:26] <JimmyZ> I can got a Perl 6 one easily :P

[11:27] *** pernatiy joined
[11:35] *** denis_boyun left
[12:00] *** skids left
[12:02] *** kbaker joined
[12:08] *** denis_boyun joined
[12:12] <arnsholt> *sigh* Programming in Python is just annoying enough to make me grumpy

[12:15] * lizmat is grumpy from uncommenting lines all the time, make, fail, repeat

[12:16] <tadzik> programming is one thing, but that toolchain is just bad

[12:16] <tadzik> sorry excuses for NYTProf and Devel::Cover

[12:16] <lizmat> on that thought: can we pipe --profile output to NYTProf already ?

[12:17] <jnthn> The stuff it outputs can be viewed in kcachegrind, I believe.

[12:17] <arnsholt> Perhaps the most annoying right now is just the fact that def is an assignment, not a declaration. That way all the little utility functions have to live at the top of the file

[12:17] <arnsholt> Rather than at the bottom, where they belong

[12:18] <moritz> speaking of NYTProf, the flamegraph feature really rocks

[12:20] <tadzik> didn't see it yet

[12:20] <tadzik> I don't remeber the last time I worked with Perl 5 :|

[12:20] <tadzik> well, to the extent of having to do profiling

[12:21] <moritz> tadzik: http://blog.timbunce.org/2013/04/08/nytprof-v5-flaming-precision/ has an example

[12:21] <moritz> (and in the generated HTML the bars have a hover tooltip with the complete routine name + time spent)

[12:22] <tadzik> wow, interesting to see that in practice

[12:23] <jnthn> ooh, pretty!

[12:24] <moritz> tadzik: I already had a good use for them; we had a case where a slowdown between two profiles occurred, and it was visually obvious where it came from

[12:24] <tadzik> nice

[12:24] *** berekuk left
[12:24] *** jnap joined
[12:25] *** berekuk joined
[12:27] *** grondilu joined
[12:29] <moritz> (it was also obvious from the list of exclusive call times, where a routine changed from ~0s to 15.5s)

[12:29] <moritz> ok, it's such a "nice" story, I simply have to tell it :-)

[12:30] <moritz> OTRS has a feature where, for reasons of extensibility, classes are dynamically loaded, and added as superclasses to the current class

[12:30] <tadzik> woosh

[12:30] <tadzik> ;)

[12:30] <jnthn> wait what?

[12:30] <jnthn> :)

[12:31] <moritz> wait for the really weird part :-)

[12:31] * lizmat has finally built something that can be spectested

[12:31] <lizmat> I know, it's weird  :-)

[12:31] <moritz> the really weird part is that's done INSIDE THE CONSTRUCTOR

[12:31] <moritz> and it does basically   require $modulepath; push @ISA, $class;

[12:32] <moritz> and that for the template object, which is instantiated about 1 to 5 times per request

[12:32] <lizmat> cycling&

[12:32] <moritz> so, there are about 10 such dynamically loaded classes

[12:33] <moritz> and 3 such dynamic loadings per request

[12:33] <moritz> so @ISA grows by 30 elements per request

[12:33] <moritz> and of course we don't start a new process per request

[12:33] <moritz> so after two hours, @ISA is large that each requests spends more than 1s just pushing to @ISA

[12:34] <jnthn> o. m. g.

[12:34] <moritz> http://bugs.otrs.org/show_bug.cgi?id=9686

[12:34] <arnsholt> Whoops! =D

[12:34] <jnthn> I was about to say, isn't there a class vs instance confusion there... :)

[12:34] <moritz> jnthn: just a slight one :-)

[12:34] <moritz> and it took me about 16 hours to locate the problem

[12:35] <moritz> because the problem was just "OTRS gets slower, until we restart apache"

[12:35] <jnthn> argh

[12:35] <tadzik> one once said, "other will fix memory leaks, I'll just restart apache"

[12:35] <jnthn> .oO( Oh That's Really "Special" )

[12:35] <moritz> and first I checked things like cache response times, DB response times, system load etc.

[12:37] <nwc10> why does bugs.otrs.org run on bugzilla, and not on OTRS itself?

[12:38] * nwc10 finds this strange.

[12:38] <nwc10> http://www.bestpractical.com/rt/issues.html -- Unsurprisingly, we use RT itself to track bugs and feature requests for RT.

[12:38] <FROGGS> hmmm, I fear we have heisenbugs now in rakudo@parrot

[12:38] <jnthn> nwc10: It got too slow after a while :P

[12:38] <tadzik> why does rakudo.org use php? :P

[12:38] <moritz> nwc10: I wondered too

[12:38] <FROGGS> when I have my Windows 7 vm running an spectesting rakudo on linux, some tests of t/spec/S02-magicals/ abort

[12:38] <FROGGS> like args.t and env.t

[12:39] <FROGGS> (when using TEST_JOBS=4)

[12:42] *** pdcawley left
[12:47] <FROGGS> r: slurp "does-not-exist"; say "alive"; say $!

[12:47] <camelia> rakudo e0b2af: OUTPUT«Unable to open filehandle from path '/home/p6eval/does-not-exist': No such file or directory(2)␤  in method open at src/gen/CORE.setting:12519␤  in method open at src/gen/CORE.setting:12508␤  in method slurp at src/gen/CORE.setting:12628␤  in sub slurp at src/gen/C…

[12:47] <FROGGS> star: slurp "does-not-exist"; say "alive"; say $!

[12:47] <camelia> star 2013.08: OUTPUT«Unable to open filehandle from path 'does-not-exist': No such file or directory(2)␤  in method open at src/gen/CORE.setting:12479␤  in method open at src/gen/CORE.setting:12469␤  in method slurp at src/gen/CORE.setting:12586␤  in sub slurp at src/gen/CORE.setting:12…

[12:54] *** jnap left
[12:55] <dalek> roast: 9f12744 | moritz++ | S02-types/undefined-types.t:

[12:55] <dalek> roast: two more rakudo unfudges

[12:55] <dalek> roast: review: https://github.com/perl6/roast/commit/9f12744da7

[12:55] <moritz> hopefully LHF: get tools/autounfudge.pl working with rakudo-jvm

[12:55] *** jnap joined
[13:01] *** ajr joined
[13:01] *** ajr is now known as Guest50871

[13:01] *** Guest50871 is now known as ajr_

[13:11] *** PacoAir joined
[13:23] *** kaare_ joined
[13:26] *** pmurias joined
[13:27] <pmurias> fun nqp-parrot bug of the day nqp::escape doesn't work with literal arguments ;)

[13:27] <pmurias> nqp: say(nqp::escape("foo"))

[13:27] <camelia> nqp: OUTPUT«error:imcc:The opcode 'escape_s_sc' (escape<2>) was not found. Check the type and number of the arguments␤  in file '(file unknown)' line 155524891␤␤»

[13:28] <grondilu> nqp: my $x := "foo"; say(nqp::escape($x))

[13:28] <camelia> nqp: OUTPUT«foo␤»

[13:28] <jnthn> Oops :)

[13:29] <jnthn> It's signature probably needs tweaking in QSATOperations.

[13:29] <jnthn> An S where there's an s

[13:34] *** skids joined
[13:37] *** btyler joined
[13:38] <pmurias> jnthn: I'm fixing that atm

[13:38] <jnthn> pmurias++

[13:38] <jnthn> pmurias: Guess you're improving our test coverage again? :D

[13:46] <FROGGS> t/spec/S32-io/IO-Socket-INET.t hangs on my linux box when running with TEST_JOBS=4 (spectests), has anybody the same issue?

[13:47] <moritz> FROGGS: doesn't hang here

[13:47] <FROGGS> hmmm

[13:47] <FROGGS> moritz: what kernel do you use?

[13:47] <FROGGS> I suspect that could make a difference

[13:48] <moritz> FROGGS: uname -a says   Linux mlenz-workstation 3.5.0-36-generic #57-Ubuntu SMP Wed Jun 19 15:10:49 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux

[13:48] <FROGGS> k, I have a 3.8, I'll switch to 3.5 and see what happens

[13:48] *** dalek left
[13:49] *** dalek joined
[13:49] *** ChanServ sets mode: +v dalek

[13:49] *** dalek left
[13:50] *** dalek joined
[13:50] *** ChanServ sets mode: +v dalek

[13:50] *** FROGGS left
[13:51] <dalek> roast: f7dd7e8 | moritz++ | integration/ (2 files):

[13:51] <dalek> roast: rakudo.jvm unfudges

[13:51] <dalek> roast: review: https://github.com/perl6/roast/commit/f7dd7e8f01

[13:51] *** bloonix joined
[13:54] * flussence untravels

[13:54] <flussence> I didn't get anything I planned to done on the way, but I did fix surrogate pairs in JSON::Tiny instead

[13:54] <moritz> \o/

[13:54] <moritz> the one thing missing for feature completeness

[13:55] <flussence> and I didn't have niecza to test on so it's probably broken right now :)

[13:55] <moritz> well, there's another thing, but I won't implement it

[13:55] <moritz> iirc json has an arbitrary limit on nesting depths

[13:57] *** REPLeffect left
[14:00] *** bluescreen10 joined
[14:02] *** bluescreen10 left
[14:03] *** bluescreen10 joined
[14:05] <PerlJam> moritz: I'm pretty sure that JSON-the-standard does not have any arbitrary limitation on nesting depths.  But certianly, a particular implementaiton of JSON may.

[14:19] *** FROGGS joined
[14:25] *** grondilu left
[14:25] <moritz> PerlJam: you are right. http://www.ietf.org/rfc/rfc4627.txt?number=4627 says An implementation may set limits on the maximum depth of nesting.

[14:26] *** hummeleBop left
[14:27] *** hummeleBop joined
[14:31] *** nebuchadnezzar left
[14:31] *** nebuchadnezzar joined
[14:33] *** risou_awy is now known as risou

[14:33] *** Maddingu1 joined
[14:35] <flussence> whoops, no wonder the JSON tests were failing on my desktop... had a branch checked out that's almost 2 months old

[14:36] <dalek> nqp: 93aea23 | (Pawel Murias)++ | src/vm/parrot/QAST/Operations.nqp:

[14:36] <dalek> nqp: Fix nqp::escape("literal").

[14:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/93aea230d7

[14:36] <dalek> nqp: db474ef | (Pawel Murias)++ | t/nqp/59-nqpop.t:

[14:36] <dalek> nqp: Add test for nqp::escape.

[14:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/db474ef142

[14:43] *** FROGGS left
[14:50] *** Maddingu1 is now known as Maddingue

[14:50] *** FROGGS joined
[14:58] *** benabik left
[15:00] *** brrt left
[15:00] *** ajr_ left
[15:00] *** ajr joined
[15:01] *** ajr is now known as Guest88436

[15:01] *** Guest88436 is now known as ajr_

[15:01] <pmurias> how can I get the unicode value of a character in nqp?

[15:02] <jnthn> nqp::ord

[15:04] *** FROGGS left
[15:04] *** zakharyas left
[15:05] *** benabik joined
[15:07] *** FROGGS joined
[15:08] *** berekuk left
[15:11] *** berekuk joined
[15:16] <colomon> hmmm…. when I throw a larger collection of ABC tunes at Rakudo, it fails under both Parrot and JVM (maybe bug of mine?) but is 5x faster on JVM up to the fail.

[15:18] <colomon> hmmm… whereas on Niecza, it runs a bit then dies with a completely different error.  :\

[15:19] *** dmol left
[15:21] <jnthn> That might be your fault too :P

[15:21] <colomon> oh, absolutely

[15:21] <jnthn> :)

[15:21] <colomon> In the case of "fault" here, I meant ABC bugs, not compiler bugs

[15:21] *** EvanTeitelman joined
[15:22] <colomon> I think it's been a while since I threw this larger file at the ABC code.

[15:22] <colomon> and I've made quite a few changes to the ABC stuff in the meantime.

[15:23] <colomon> though of course, if it were a compiler issue, that might be my fault to.  In all of the cases.  ;)

[15:23] *** REPLeffect joined
[15:24] <colomon> looks like it's the dreaded tuplet parser in the grammar.

[15:24] <diakopter> jnthn: did you see the jvm classfile problem in the backlog?

[15:24] <colomon> ABC grammar

[15:24] <jnthn> diakopter: Yes, wasn't sure where that was coming from...

[15:24] <colomon> (in the niecza case)

[15:25] * masak .oO( why would you parse dreaded tuplets? ) :P

[15:25] *** bluescreen10 left
[15:26] <jnthn> 'cus tuplets think dreads are trendy

[15:26] <colomon> :p

[15:28] <arnsholt> jnthn: What's AUTOGEN supposed to do?

[15:28] <arnsholt> Looks like something's missing when PARAMETERIZE_TYPE gets called?

[15:29] <jnthn> arnsholt: Context?

[15:30] <arnsholt> Trying to fix Zaovlaj

[15:31] <arnsholt> I twiddled the code a bit, and now the error message is "Cannot call 'AUTOGEN'; none of these signatures match:\n:(CStr : Str:D $encoding, Mu *%_)\nin method AUTOGEN at src/gen/CORE.setting:510\n..."

[15:36] *** FROGGS left
[15:38] <pmurias> nqp: say("\a")

[15:38] <camelia> nqp: OUTPUT«Unrecognized backslash sequence: '\a' at line 2, near "\\a\")"␤current instr.: 'panic' pc 14693 (src/stage2/gen/NQPHLL.pir:5223) (src/stage2/gen/NQPHLL.nqp:279)␤»

[15:38] <pmurias> nqp: say(nqp::escape("\x1b"))

[15:38] <camelia> nqp: OUTPUT«error:imcc:The opcode 'escape_s_sc' (escape<2>) was not found. Check the type and number of the arguments␤  in file '(file unknown)' line 42␤␤»

[15:39] <pmurias> nqp: my $str := "\x1b";say(nqp::escape($str));

[15:39] <camelia> nqp: OUTPUT«\e␤»

[15:39] <pmurias> nqp: my $str := "\x07";say(nqp::escape($str));

[15:39] <camelia> nqp: OUTPUT«\a␤»

[15:39] <pmurias> jnthn: nqp doesn't accept \a in literals yet nqp::escape emits it

[15:40] *** berekuk left
[15:40] <masak> pmurias: that could still be perfectly legal. sounds like a case of Postel's to me.

[15:40] <masak> hm, unless the output of nqp::escape is explicitly meant to function as literals.

[15:41] <colomon> jnthn: just found a longer ABC file that still works.  jakudo is 8x faster than parrakudo on it.

[15:44] <colomon> (total jakudo running time 88 seconds, and that's slowed down by a zillion "Passing an object candidate to Mu.bless is deprecated" messages.)

[15:44] <colomon> oh!

[15:44] <pmurias> masak: I seems more a case of reverse Postel we emit something we don't accept

[15:45] <colomon> that was with garbage collection counted.  clock time was 53 seconds

[15:45] <masak> pmurias: yes. dangit! this is the second time this year I make this mistake.

[15:46] <masak> evidently I have my inner Postel reversed somehow.

[15:47] <jnthn> arnsholt: That's...very weird. I guess it's the proto auto-generation

[15:48] <jnthn> .oO( Going Postel )

[15:48] <jnthn> arnsholt: I've never see it go wrong that way, however...

[15:48] <TimToady> .oO( Postel Coming )

[15:48] *** kaleem left
[15:51] <jnthn> colomon: 88 seconds is still a while :)

[15:51] <colomon> jnthn: I'm not saying you can stop making improvements

[15:51] <colomon> ;)

[15:51] <jnthn> :)

[15:51] *** xenoterracide joined
[15:52] <colomon> jnthn: note that was 88 processor-seconds, wall-clock was 53 seconds

[15:52] <colomon> I forgot the distinction was important under JVM

[15:52] <jnthn> ah :)

[15:52] <jnthn> yes 

[15:52] <arnsholt> jnthn: Apply https://gist.github.com/arnsholt/6379906 to an up-to-date Zavolaj and Rakudo and you should get the error I'm seeing

[15:54] <colomon> jnthn: anyway, saw a chromatic tweet being a dick about the JVM startup time, and wanted to emphasize again that jakudo crushes parrakudo on real world tasks that are big enough to get by that startup penalty.

[15:56] <jnthn> arnsholt: Trying to box to a CStr[$encoding] is extremely dubious, fwiw.

[15:57] <jnthn> arnsholt: Because that gives you a CurriedRoleHOW-based type, not a class

[15:57] <jnthn> And you can't instantiate a role, and the box op is too low level to pun for you.

[15:58] *** abnorman joined
[15:59] <jnthn> colomon: Right, and that's not specific to our use of JVM, it's just the nature of the beast.

[15:59] <colomon> jnthn: understood

[15:59] <jnthn> Not that we can't make startup time better, but it never was going to be a Rakudo on JVM strength.

[16:00] <colomon> that's MoarVM's bailiwick, eh?  ;)

[16:00] <jnthn> We should do rather better there, yes. :)

[16:01] <jnthn> *rather

[16:01] <jnthn> MoarVM is smart enough to allocate deserialized objects directly in the old generation since they'll probably live for the whole program, for example...

[16:03] * TimToady wonders if anyone has tried bringing unexec functionality to JVM...

[16:04] <colomon> unexec?

[16:04] <TimToady> or undump

[16:04] <colomon> ah

[16:04] <TimToady> startup a process, load everything in you want, do a core dump, transform that to an executable

[16:05] *** kbaker left
[16:06] *** risou is now known as risou_awy

[16:06] *** dmol joined
[16:08] <TimToady> looks like nobody's done it yet

[16:09] <TimToady> too many "frameworks" with untrackable external state, seems

[16:10] <arnsholt> jnthn: Right, right. That's likely the previously accidentally working bit then. Thanks!

[16:10] *** ajr_ left
[16:12] *** domidumont left
[16:14] * colomon just realized his C++ bug is because OS X's GCC is no longer GNU

[16:15] <geekosaur> mmm, -fheinous-gnu-extensions

[16:15] <colomon> geekosaur: actually, the problem is because I was using #ifdef __GCC__ to make sure we weren't on Windows

[16:17] <colomon> actually, #ifdef __GNU__

[16:17] <colomon> looks like I used #ifdef __GNUC__ elsewhere in the code?

[16:20] <pmurias> jnthn: re nqp::escape should it mangle unicode characters?

[16:20] <diakopter> jnthn: "coming from"?

[16:20] <colomon> __GNUC__ it is

[16:20] <diakopter> the repro case was there

[16:21] <pmurias> nqp: say(nqp::escape("¢"))

[16:21] <camelia> nqp: OUTPUT«error:imcc:The opcode 'escape_s_sc' (escape<2>) was not found. Check the type and number of the arguments␤  in file '(file unknown)' line 39␤␤»

[16:21] <jnthn> diakopter: Yes, I more meant if it's a malformed constant pool entry or just malformed bytecode in general...

[16:22] <jnthn> pmurias: I don't think the JVM one does, at least...

[16:22] <pmurias> it doesn't

[16:22] <pmurias> the parrot one mangles

[16:22] <pmurias> nqp: my $cent:="¢";say(nqp::escape($cent))

[16:22] <camelia> nqp: OUTPUT«\x{a2}␤»

[16:24] <jnthn> pmurias: I don't immediately have a good argument either way. I think it's mostly used for debugging output today anyway...

[16:25] <diakopter> jnthn: I don't know the difference of what you're asking/wondering... it's probably a bug in that assembler library

[16:25] <jnthn> diakopter: aye, I was just speculating on the nature of it

[16:27] <pmurias> jnthn: it's used for escaping string while targeting parrot

[16:27] <jnthn> pmurias: Ah...

[16:27] <pmurias> and I'm trying to use it for escaping string while targeting js

[16:27] <jnthn> pmurias: Yeah, I remember now. I think that it needs to stay the way it is at lest on Parrot...

[16:28] <jnthn> *least

[16:29] *** Ayiko joined
[16:29] <pmurias> doe we have a infix:<x> equivalent on parrot?

[16:30] <jnthn> Whatever nqp::x is mapped to, I guess

[16:31] <pmurias> meant on nqp ;)

[16:35] *** berekuk joined
[16:35] <moritz> nqp: say(nqp::x('abc', 5))

[16:35] <camelia> nqp: OUTPUT«abcabcabcabcabc␤»

[16:38] *** kbaker joined
[16:38] <pmurias> Parrot_str_escape docs are incorrect and crazy

[16:39] <diakopter> s/_str_escape//

[16:39] <diakopter> s/_str_escape docs//

[16:39] <jnthn> diakopter: Your grammar are disappointing :P

[16:40] <diakopter> s/grammar//

[16:42] *** domidumont joined
[16:46] <[Coke]> niecza failures down from 1999 yesterday to 255 today

[16:47] <colomon> \o/

[16:49] *** SamuraiJack_ joined
[16:49] <pmurias> who is working on niecza nowdays?

[16:50] *** Ayiko left
[16:51] *** yoleaux left
[16:51] *** SamuraiJack left
[16:52] * [Coke] realizes he can run visualvm against a spec test run these days.

[16:53] <[Coke]> pmurias: colomon

[16:53] <colomon> in theory

[16:53] <colomon> very loose theory this summer

[16:53] <colomon> but I'm planning on taking a look at changing bless this weekend

[16:54] <[Coke]> I didn't mean to imply a level of commitment. ;)

[16:55] *** nebuchadnezzar left
[16:55] *** nebuchadnezzar joined
[16:55] <colomon> I should be committed, is that what you're saying?  ;)

[16:56] <jnthn> No, just commit ;)

[16:58] <PerlJam> btw, speaking of neicza ... has anyone seen sorear lately? I haven't noticed him in a long while (since right after YAPC::NA even)

[16:59] <diakopter> .seen sorear

[16:59] <jnthn> Last time I saw him here, he mentioned something about lots of $dayjob

[16:59] <diakopter> preflex: seen sorear

[16:59] <preflex>  sorear was last seen on #perl6 10 days, 12 hours, 52 minutes and 28 seconds ago, saying: sweet

[16:59] <diakopter> abnorman: yer fault ;)

[17:00] <diakopter> commutativitiness &

[17:01] <colomon> r: say (4 * 60 + 48 ) / 36

[17:01] <camelia> rakudo e0b2af: OUTPUT«8␤»

[17:02] <colomon> oooo, exactly 8x faster.  :)

[17:02] <diakopter> 8x as fast... 7x or 700% faster :PPP

[17:03] <colomon> fair enough

[17:04] <diakopter> .oO( enuf fayryes to go around )

[17:06] *** panchiniak joined
[17:07] <[Coke]> f

[17:07] *** virtualsue joined
[17:08] *** FROGGS joined
[17:12] *** Ayiko joined
[17:15] *** dakkar left
[17:17] *** berekuk left
[17:17] *** berekuk joined
[17:18] *** yoleaux joined
[17:18] *** ChanServ sets mode: +v yoleaux

[17:20] *** gdey joined
[17:21] *** BooK_ left
[17:21] *** abnorman left
[17:21] *** xenoterracide left
[17:21] *** xenoterracide joined
[17:24] *** stevan_ left
[17:27] *** stevan__ joined
[17:27] *** xenoterracide left
[17:28] *** berekuk left
[17:28] *** yoleaux left
[17:32] *** JoaquinFerrero left
[17:34] *** donaldh left
[17:34] *** berekuk joined
[17:35] <dalek> rakudo-star-daily: bc65cfd | coke++ | log/version.log:

[17:35] <dalek> rakudo-star-daily: today (automated commit)

[17:35] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/bc65cfd605

[17:35] <dalek> rakudo-star-daily: 6871921 | coke++ | log/version.log:

[17:35] <dalek> rakudo-star-daily: today (automated commit)

[17:35] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/68719215fc

[17:35] <dalek> rakudo-star-daily: 5debe70 | coke++ | log/version.log:

[17:35] <dalek> rakudo-star-daily: today (automated commit)

[17:35] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/5debe70935

[17:36] <[Coke]> ... man, that just keeps getting more screwed up.

[17:37] <moritz> yes, that looks very screwed up

[17:38] <[Coke]> started happening post release. still need to get back to it. :|

[17:38] *** panchiniak left
[17:39] *** abnorman joined
[17:39] <[Coke]> -> offline

[17:48] *** pernatiy left
[17:48] *** pecastro left
[17:54] *** stevan__ left
[17:54] *** jaldhar left
[17:54] *** jaldhar joined
[17:56] *** denis_boyun left
[17:59] *** stevan_ joined
[18:01] *** PZt left
[18:03] *** daxim left
[18:04] <FROGGS> the chdir emulation doesnt play well with require :o(

[18:04] <FROGGS> https://gist.github.com/FROGGS/ebdc0c7809d1b2902533

[18:05] *** jaldhar left
[18:08] *** berekuk left
[18:10] *** berekuk joined
[18:11] *** yoleaux joined
[18:11] *** ChanServ sets mode: +v yoleaux

[18:12] <moritz> it's an all-or-nothing approach, and we're somewhere at 80%...

[18:14] * FROGGS is testing a fix

[18:14] *** SamuraiJack__ joined
[18:18] *** SamuraiJack_ left
[18:20] <FROGGS> r: chdir "t"; say $*CWD

[18:20] <camelia> rakudo e0b2af: OUTPUT«IO::Path</home/p6eval/t>␤»

[18:20] <FROGGS> r: chdir "t"; say $*CWD; say nqp::gethllsym('perl6', 'PROCESS')

[18:20] <camelia> rakudo e0b2af: OUTPUT«IO::Path</home/p6eval/t>␤(PROCESS)␤»

[18:20] <FROGGS> r: chdir "t"; say $*CWD; say nqp::gethllsym('perl6', 'PROCESS')<$CWD>

[18:21] <camelia> rakudo e0b2af: OUTPUT«IO::Path</home/p6eval/t>␤(Any)␤»

[18:21] <FROGGS> r: chdir "t"; say $*CWD; say nqp::gethllsym('perl6', 'PROCESS')<$*CWD>

[18:21] <camelia> rakudo e0b2af: OUTPUT«IO::Path</home/p6eval/t>␤(Any)␤»

[18:21] <FROGGS> hmm

[18:22] <FROGGS> r: chdir "t"; say $*CWD; say nqp::gethllsym('perl6', 'PROCESS').WHO

[18:22] <camelia> rakudo e0b2af: OUTPUT«IO::Path</home/p6eval/t>␤("\$FATAL" => Bool::False, "\&cwd" => sub cwd() { ... }, "\&chdir" => sub chdir() { ... }, "\$IN" => IO::Handle.new(path => "-", ins => 0, chomp => Bool::True), "\$OUT" => IO::Handle.new(path => "-", ins => 0, chomp => Bool::True), "\$ERR" …

[18:22] <FROGGS> r: chdir "t"; say $*CWD; say nqp::gethllsym('perl6', 'PROCESS').WHO<$CWD>

[18:22] <camelia> rakudo e0b2af: OUTPUT«IO::Path</home/p6eval/t>␤IO::Path</home/p6eval/t>␤»

[18:25] *** kivutar joined
[18:26] *** donaldh joined
[18:27] *** frdmn left
[18:27] *** frdmn joined
[18:28] <masak> ok, I was delayed a bit in my $dayjob plans today... but now I'm off duty.

[18:28] <jnthn> FROGGS: Please add a test as well as a fix :)

[18:28] * masak digs into the last of the t3 reviews/blog post

[18:28] <FROGGS> jnthn: I will

[18:29] *** jaldhar joined
[18:29] <timotimo> i have reached tge great outdoors

[18:30] <FROGGS> ?

[18:30] <jnthn> Tree Grammar Engine?

[18:30] <timotimo> the

[18:30] <masak> sounds like a scary place.

[18:30] *** domidumont left
[18:31] *** pecastro joined
[18:31] <timotimo> trees everywhere and a nice river with huge white stones in it

[18:32] <jnthn> Isn't it almost dark? :)

[18:32] <timotimo> for a nerd like me that is already outdoorsy enough

[18:32] <timotimo> we are in a house :D

[18:32] <diakopter> only big houses have rivers in them

[18:33] <masak> not to mention trees everywhere.

[18:33] * colomon always wanted a river in his house.  Do Not Tell his 4yo.

[18:34] <moritz> [Coke]: fwiw I just did a rakudo-star-daily run, and it went fine

[18:35] <moritz> ... except for the "Passing an object candidate to Mu.bless is deprecated" warnings

[18:36] *** virtualsue left
[18:36] <moritz> oh, and XML::Writer has a few "use of uninitialized value of type Nil in numeric context"

[18:36] *** ssutch joined
[18:37] *** dhaivat joined
[18:37] <dhaivat> Are there any startups using Perl 6? Any corporate support? 

[18:37] *** ssutch left
[18:40] <diakopter> dhaivat: not really.. it's not really useful or dependable or stable enough yet

[18:41] *** teslos joined
[18:41] * geekosaur can think of a number of things that companies actually base their stuff around that that applies to...

[18:41] <jnthn> :)

[18:42] <moritz> dhaivat: there was one guy from a startup around here last year who used Perl 6 for $work

[18:43] <moritz> haven't heard of him for a while

[18:43] <masak> I use Perl 6 for $work.

[18:43] <jnthn> Are we still a startup? :P

[18:43] <moritz> dhaivat: and colomon uses Perl 6 for some work stuff (involving CAD files and 3D models, iirc)

[18:43] <diakopter> masak, the Startup

[18:43] <diakopter> .. more like Upstart

[18:43] * moritz used Perl 6 to get $work

[18:43] <colomon> dhaivat: my use of p6 for that is still pretty lightweight

[18:44] <colomon> dhaivat: I'm using p6 as a convenient occasional tool, not relying heavily on it -- at the heart, my company is still based on C++ and p5.

[18:44] <dhaivat> Ah, so, not yet stable then? What are the primary roadblocks for Perl 6? Why is taking so long to get a stable implementation?  I don't mean this is in a derogatory way, I'm genuinely curious. 

[18:45] <diakopter> dhaivat: the past few years, simply a very small amount of availabile development resources, comparatively

[18:45] <diakopter> *available

[18:45] <moritz> dhaivat: the primary roundblocks for production use are 1) lack of good performance 2) lack of solidity in stuff like IO and 3) few modules/libraries available

[18:45] <jnthn> Ambitious project, constrained resources...and it's hard to get fast. :)

[18:45] <PerlJam> dhaivat: Why are you asking around about startups using Perl 5/6 ?

[18:45] <PerlJam> dhaivat: Are you thinking about using perl for your startup?

[18:45] <moritz> dhaivat: and it takes that long because it's a fairly complicated language with lots of research aspects

[18:46] *** donaldh left
[18:46] <dhaivat> PerlJam: yes, I am actually

[18:46] <PerlJam> dhaivat: If you're adventurous, use perl 6, otherwise, use perl 5  :)

[18:46] <dhaivat> PerlJam: I used to be a Perl guy a while back, with all the perldocs swirling around my head

[18:47] <dhaivat> PerlJam: But I left because I finally got tired of checking every damn argument in procedures in Perl 5

[18:47] <colomon> dhaivat: for me, it's all about moritz's point 1.  It's only with the recent JVM port that p6 is fast enough to keep up at all with my CAD work -- it's still slow, but it's doable

[18:47] <dhaivat> colomon: JVM port? I haven't noticed this.

[18:47] <masak> I'd advise using predominantly Perl 5, but keeping eyes and doors open for Perl 6 opportunities.

[18:48] <colomon> dhaivat: yes, there are still a few things that need to be finished, but Rakudo has a version which works on JVM and seems to be at least an order of magnitude faster than the Parrot version.

[18:48] <dhaivat> I guess so. I was hoping Perl 6 might be coming around especially since Perl 5 is quite an annoyance at times

[18:48] <diakopter> Perl 6 has its annoyances too

[18:49] <dhaivat> colomon: I see

[18:49] <colomon> dhaivat: it's new, it didn't work at all back in early June.  :)

[18:49] <dhaivat> colomon: wow, that's some quick development

[18:49] <colomon> dhaivat: well, most of the pieces were already in place at that point.

[18:50] *** donaldh joined
[18:52] <colomon> jnthn++ moritz++ sorear++ etc++

[18:52] <diakopter> donaldh++ too

[18:53] <PerlJam> dhaivat: There are modules on CPAN that make up for many of Perl 5's warts

[18:53] * moritz didn't really do much for the JVM port

[18:54] <PerlJam> dhaivat: you can get a type system, subroutine signatures, parameter checking, a nice object oriented system, etc.

[18:54] <colomon> FROGGS++ arnsholt++ pmurias++ jnthn++

[18:54] <PerlJam> dhaivat: Ask more about it on #perl if you're interested

[18:54] *** jferrero joined
[18:54] * FROGGS wakes up... what what?

[18:55] <dhaivat> PerlJam: cool, will do that after lunch

[18:55] <colomon> FROGGS: sorry to bother you, just trying to credit people involved with the JVM port.  I'm sure I've missed some...

[18:55] * colomon is mostly going by NQP commit graphs, admittedly.

[18:56] <FROGGS> so I have did something for JVM port? my brain isnt that good these days :o)

[18:56] <PerlJam> colomon++ (for giving karma to all those people  ;)

[18:57] *** stevan_ left
[18:57] <colomon> FROGGS: you definitely have a worthwhile number of recent commits.  If they are not NQP commits, well, FROGGS++ anyway.  ;)

[18:58] <FROGGS> *g*

[18:58] <FROGGS> thank you sir

[18:59] *** dhaivat left
[19:00] * colomon is feeling the rigidness of the C++ type system very much at the moment.  O for the ability to use p6 instead...

[19:03] <dalek> Perlito: 26aa3e9 | (Flavio S. Glock)++ | / (3 files):

[19:03] <dalek> Perlito: Perlito5 - js - implement some variants of array slices

[19:03] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/26aa3e9170

[19:15] *** ssutch joined
[19:16] *** abnorman left
[19:16] *** teslos left
[19:19] *** rindolf left
[19:19] * lizmat is back and checking backlog

[19:20] *** Khisanth left
[19:20] *** abnorman joined
[19:25] <PerlJam> Um ... why did http://perl6advent.wordpress.com/2011/12/20/paired-up-hashes/ show up in my newsfeed?

[19:25] <colomon> lizmat++ # just because

[19:25] <lizmat> *blush*

[19:26] <lizmat> I'm in two minds of committing my Set/Bag changes

[19:26] <lizmat> there's quite a lot of set/bag tests failing, and some TODO's passing

[19:27] <lizmat> and I wonder if having more eyes on it would be better than going at it alone

[19:27] <flussence> PerlJam: ...hash collision? :)

[19:27] <dalek> Perlito: d52afd7 | (Flavio S. Glock)++ | / (4 files):

[19:27] <dalek> Perlito: Perlito5 - js - array slice tests

[19:27] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/d52afd7fe2

[19:27] <lizmat> otoh, I don't think it is worth a branch

[19:27] <colomon> lizmat: just so happens I have eyes.

[19:27] <dalek> rakudo/nom: 7e80cd5 | (Elizabeth Mattijsen)++ | / (4 files):

[19:27] <dalek> rakudo/nom: Move precedence setting of operators into its own dedicated file

[19:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7e80cd5fe6

[19:27] <dalek> rakudo/nom: ea06360 | (Elizabeth Mattijsen)++ | src/core/ (6 files):

[19:27] <dalek> rakudo/nom: First version of Set/Bag changes from niecza, ported to rakudo

[19:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ea06360429

[19:28] <lizmat> jnthn: please have a look at src/core/precedence.pm

[19:28] * colomon has run out of folk festivals, and while still catching up on $work, has some time to look at p6 stuff again.

[19:28] <lizmat> the commented out trait_mod's make the build fail in odd ways

[19:29] <masak> ladies and gentlebots, t3 reviews are *complete*.

[19:29] <lizmat> basically, trait mods with \x22xx and trait mods with ()

[19:29] <masak> moritz++ # just the right amount of nagging ;)

[19:29] <PerlJam> masak: congrats :)

[19:29] <masak> now for the blog post.

[19:29] * lizmat will now focus on fixing the tests

[19:30] <dalek> rakudo/nom: 8897b01 | (Tobias Leich)++ | src/vm/parrot/ModuleLoaderVMConfig.nqp:

[19:30] <dalek> rakudo/nom: take cwd into account when loading modules

[19:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8897b01994

[19:30] <FROGGS> test comes in a minute (and jvm patch after that)

[19:30] <masak> lizmat: I think merging into master sounds like the right choice here, fwiw.

[19:30] <masak> lizmat: worst case, we revert before release ;)

[19:30] <lizmat> only set/bag tests are affected

[19:31] <lizmat> it's not like itr's all over the place

[19:31] <lizmat> and quite a few TODO's are now passing  :-)

[19:32] *** kivutar left
[19:33] <masak> win some, lose some.

[19:33] <masak> no, I guess my point is, "keep master passing at all time" could well be seen as a guideline more than a rule.

[19:34] <lizmat> :-)

[19:34] <lizmat> we have failures now  :-)

[19:34] <masak> and one could consider committing things which fail the tests as taking a loan, of sorts.

[19:34] <lizmat> fixing them up now

[19:34] <PerlJam> masak: technical debt?  :)

[19:34] <masak> as long as you commit to paying back the loan, everything's fine.

[19:34] <masak> PerlJam: yes but no :)

[19:34] <masak> PerlJam: technical debt and failing tests feel orthogonal in my mind.

[19:34] <masak> but it's the same principle, yes.

[19:35] <diakopter> <- is a failing test

[19:35] * masak submits diakopter as a rakudobug

[19:36] <colomon> can he be reproduced?

[19:36] <diakopter> only by budding

[19:36] <PerlJam> I think chromatic even published something along the lines of re-explaining technical debt as a loan that you should repay

[19:36] * masak .oO( resulting in a Bud Light )

[19:37] <masak> PerlJam: it's a common metaphor.

[19:37] <PerlJam> indeed

[19:37] <masak> PerlJam: and an interesting one, because it's not 100% about repaying, it's about keeping the debt under control.

[19:39] <diakopter> if your interest rate on your technical debut is usurious...

[19:39] <arnsholt> jnthn: What's the nqp:: equivalent of pir::repr_box_str__PsP?

[19:40] <dalek> rakudo/nom: e1f2558 | (Elizabeth Mattijsen)++ | src/core/Bag.pm:

[19:40] <dalek> rakudo/nom: Oops, new for Bag is not like new for Set

[19:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e1f2558821

[19:40] <jnthn> nqp::box_s

[19:40] <diakopter> er,.

[19:40] <diakopter> technical debut, indeed.

[19:41] <arnsholt> Oh, derp. Thanks!

[19:42] <masak> diakopter: technical debut is caused by technical debutantes.

[19:42] *** pecastro left
[19:44] <lizmat> .oO( technical dillettantes cause techincal dill )

[19:44] * colomon cannot keep up with lizmat++

[19:44] * ingy waves o/

[19:44] <colomon> ingy!  \o/

[19:45] <ingy> hey there

[19:45] * diakopter wavers

[19:45] <ingy> :)

[19:45] *** yoleaux left
[19:46] <pmurias> masak: re commiting things that fail, a lot of that is caused by tests running slowly

[19:46] <jnthn> lizmat: does only sub infix:<<"\x228D">> work?

[19:47] <lizmat> not sure yet, it compiles is all I know so far

[19:47] <lizmat> let me see

[19:47] <masak> ingy: hejhej! :D

[19:47] *** Newman joined
[19:48] <masak> pmurias: how do you mean? it was caused by lizmat deciding to, AFAICS.

[19:48] <jnthn> lizmat: oh, the ones that all fail in the prec changes are &infix:<<"\x228D">> right?

[19:49] <lizmat> also the ones with parens in the op name

[19:49] <lizmat> fg

[19:49] <lizmat> oops, ww

[19:49] <jnthn> r: sub infix:<<"\x228D">>($a, $b) { say "$a $b" }; &infix:<<"\x228D">>(1, 2)

[19:49] <camelia> rakudo e0b2af: OUTPUT«1 2␤»

[19:49] <jnthn> r: sub infix:<<"\x228D">>($a, $b) { say "$a $b" }; say UNIT::.keys

[19:49] <camelia> rakudo e0b2af: OUTPUT«$=pod !UNIT_MARKER GLOBALish EXPORT $?PACKAGE ::?PACKAGE $_ $/ $! %?LANG &infix:<⊍>␤»

[19:50] *** Newman left
[19:51] <FROGGS> jnthn: why the extra quotes?

[19:51] <FROGGS> : sub infix:«x228D»($a, $b) { say "$a $b" }; say UNIT::.keys

[19:51] <FROGGS> r: sub infix:«\x228D»($a, $b) { say "$a $b" }; say UNIT::.keys

[19:51] <camelia> rakudo e0b2af: OUTPUT«$=pod !UNIT_MARKER GLOBALish EXPORT $?PACKAGE ::?PACKAGE $_ $/ $! %?LANG &infix:<⊍>␤»

[19:51] <jnthn> FROGGS: Was just copying what lizmat did in the commit :)

[19:51] <FROGGS> and it is even shorter if you strip the "r:" :o)

[19:52] <lizmat> FWIW, the only version that does not blow up in the SETTING, is the one with <<"\xhhhh">>

[19:55] <diakopter> ..

[20:00] *** BooK joined
[20:00] *** jferrero left
[20:00] *** jaldhar left
[20:00] <colomon> interesting that the set constructor doesn't work in just that one case.

[20:01] *** jaldhar joined
[20:01] <dalek> Perlito: 7b7f08f | (Flavio S. Glock)++ | / (5 files):

[20:01] <dalek> Perlito: Perlito5 - js - hash slice tests

[20:01] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/7b7f08fdd9

[20:01] <colomon> oh, wait

[20:01] <colomon> roast is wrong, not rakudo

[20:02] <colomon> I think?

[20:02] <lizmat> checking… 

[20:02] <colomon> rn: my $b = set { foo => 10, bar => 17, baz => 42 }.hash; say $b.elems; say $b.perl

[20:03] *** ssutch left
[20:03] <camelia> rakudo e0b2af: OUTPUT«3␤set("foo", "bar", "baz")␤»

[20:03] <camelia> ..niecza v24-90-gd827fa8: OUTPUT«3␤Set.new("foo\t10", "bar\t17", "baz\t42")␤»

[20:04] *** kbaker left
[20:09] <dalek> nqp/file-op-retcodes: 57da120 | (Donald Hunter)++ | src/vm/jvm/ (2 files):

[20:09] <dalek> nqp/file-op-retcodes: Add :tc to signatures for file ops.

[20:09] <dalek> nqp/file-op-retcodes: review: https://github.com/perl6/nqp/commit/57da120197

[20:09] <dalek> nqp/file-op-retcodes: 536c063 | (Donald Hunter)++ | src/vm/jvm/stage0/ (10 files):

[20:09] <dalek> nqp/file-op-retcodes: Update bootstrap for file ops with :tc signatures.

[20:09] <dalek> nqp/file-op-retcodes: review: https://github.com/perl6/nqp/commit/536c063b4c

[20:09] <dalek> nqp/file-op-retcodes: 47a64bf | (Donald Hunter)++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[20:09] <dalek> nqp/file-op-retcodes: Throw exceptions from file ops.

[20:09] <dalek> nqp/file-op-retcodes: review: https://github.com/perl6/nqp/commit/47a64bf61d

[20:09] <dalek> nqp/file-op-retcodes: 7df1c7a | (Donald Hunter)++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/ (2 files):

[20:09] <dalek> nqp/file-op-retcodes: Better exception message generation.

[20:09] <dalek> nqp/file-op-retcodes: review: https://github.com/perl6/nqp/commit/7df1c7aba0

[20:12] <dalek> roast: 8e4f6ce | (Elizabeth Mattijsen)++ | S02-types/ (4 files):

[20:12] <dalek> roast: First set of unfudges/new fudges for Set/Bag related changes

[20:12] <dalek> roast: review: https://github.com/perl6/roast/commit/8e4f6ce8b0

[20:12] <colomon> I completely fail to understand why set { foo => 10, bar => 17, baz => 42 }.hash and set { foo => 10, bar => 17, baz => 42 } should be differnet

[20:12] <colomon> rn: say { foo => 10, bar => 17, baz => 42 }.WHAT

[20:12] <camelia> rakudo e0b2af, niecza v24-90-gd827fa8: OUTPUT«(Hash)␤»

[20:13] <colomon> rn: say { foo => 10, bar => 17, baz => 42 }.hash.WHAT

[20:13] <camelia> rakudo e0b2af, niecza v24-90-gd827fa8: OUTPUT«(Hash)␤»

[20:13] <dalek> nqp: 57da120 | (Donald Hunter)++ | src/vm/jvm/ (2 files):

[20:13] <dalek> nqp: Add :tc to signatures for file ops.

[20:13] <dalek> nqp: review: https://github.com/perl6/nqp/commit/57da120197

[20:13] <dalek> nqp: 536c063 | (Donald Hunter)++ | src/vm/jvm/stage0/ (10 files):

[20:13] <dalek> nqp: Update bootstrap for file ops with :tc signatures.

[20:13] <dalek> nqp: review: https://github.com/perl6/nqp/commit/536c063b4c

[20:13] <dalek> nqp: 47a64bf | (Donald Hunter)++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[20:13] <dalek> nqp: Throw exceptions from file ops.

[20:13] <dalek> nqp: review: https://github.com/perl6/nqp/commit/47a64bf61d

[20:13] <dalek> nqp: 7df1c7a | (Donald Hunter)++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/ (2 files):

[20:13] <dalek> nqp: Better exception message generation.

[20:13] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7df1c7aba0

[20:13] <dalek> nqp: da7b7b1 | (Donald Hunter)++ | src/vm/jvm/ (13 files):

[20:13] <dalek> nqp: Merge pull request #119 from perl6/file-op-retcodes

[20:13] <dalek> nqp: 

[20:13] <dalek> nqp: Update the file ops to throw exceptions on failure.

[20:13] <dalek> nqp: review: https://github.com/perl6/nqp/commit/da7b7b1f67

[20:13] <arnsholt> Oooh. Segfault

[20:13] <colomon> I'm 95% certain that the set { foo => 10, bar => 17, baz => 42 }.hash tests are a leftover from the old spec.

[20:14] <lizmat> colomon: I'm just looking at tests, to make them clean in the spectest, not at why they're failing

[20:14] <colomon> lizmat: I'm looking at the big picture.

[20:14] <arnsholt> Segfault in the binder, even. Odd.

[20:14] <lizmat> and I'm not (yet)

[20:14] <diakopter> arnsholt: jvm?

[20:15] <pmurias> jnthn: do you remeber how does (foo)+ now to capture (foo) as an array?

[20:15] <lizmat> r: say Set(Any.new)   # what should this do if it doesn't fail ?

[20:15] <camelia> rakudo e0b2af: OUTPUT«Cannot coerce object of type Capture to Set. To create a one-element set, pass it to the 'set' function␤  in sub to-set at src/gen/CORE.setting:14701␤  in sub to-set at src/gen/CORE.setting:14694␤  in method postcircumfix:<( )> at src/gen/CORE.setting:14693␤  in bl…

[20:15] <pmurias> s/now/know/

[20:15] <arnsholt> diakopter: Parrot, so a bit less surprising =)

[20:16] <arnsholt> Pretty sure it's my fault too

[20:16] <lizmat> ah. camelia not up to date yet

[20:16] <lizmat> $ perl6 -e 'say Set(Any.new)'

[20:16] <lizmat> set(Any<-9213374975699074855>)

[20:16] *** jferrero joined
[20:16] <lizmat> r: say Any.new

[20:16] <camelia> rakudo e0b2af: OUTPUT«Any.new()␤»

[20:18] <colomon> lizmat: I don't know how well it works yet -- we need Sets which can handle any object type -- but it should create a Set that has a single Any in it.  (Assuming Any makes sense as an object.)

[20:19] *** BooK left
[20:19] *** BooK joined
[20:19] <lizmat> r: say Set(Any.new).keys

[20:19] <camelia> rakudo e1f255: OUTPUT«Any<1696284401>␤»

[20:19] *** SamuraiJack__ left
[20:19] <lizmat> r: say Set(Any.new).keys[0].exists

[20:19] <camelia> rakudo e1f255: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in method exists at src/gen/CORE.setting:1447␤  in block  at /tmp/eMWxtwdhPx:1␤␤»

[20:19] <lizmat> r: say Set(Any.new).keys[0].exists('foo')

[20:19] <camelia> rakudo e1f255: OUTPUT«False␤»

[20:20] <colomon> it probably adds Any.new.Str into the Set right now

[20:20] <lizmat> seems to be a real object in there, so that's ok I guess

[20:20] <colomon> nr: say Any.new.Str

[20:20] <camelia> niecza v24-90-gd827fa8: OUTPUT«Any()<instance>␤»

[20:20] <camelia> ..rakudo e1f255: OUTPUT«Any<-1364598985>␤»

[20:21] <masak> blog post written.

[20:21] <dalek> roast/origin/master: dafc74f | (Donald Hunter)++ | S32-io/slurp.t:

[20:21] <dalek> roast/origin/master: Unfudge slurp read tests on JVM.

[20:21] <dalek> roast/origin/master: review: https://github.com/perl6/roast/commit/dafc74ffb4

[20:21] <masak> but apparently I have to rebuild Rakudo on this computer before I can run my blog software.

[20:21] * masak crosses fingers and hopes for no regressions!

[20:21] * lizmat crosses her fingers too .L;KAOAFKY.SDHGX/LAISk

[20:22] <lizmat> hmm, better uncross them before I go on

[20:22] <TimToady> for a moment there I thought my eyes were crossed

[20:22] <dalek> roast: ced8cd2 | (Elizabeth Mattijsen)++ | S32-exceptions/misc.t:

[20:22] <dalek> roast: Remove bogus Set(Any.new) test

[20:22] <dalek> roast: review: https://github.com/perl6/roast/commit/ced8cd2538

[20:23] <dalek> v5: d1a0a0b | (Tobias Leich)++ | STATUS.md:

[20:23] <dalek> v5: status update, after rakudos chdir changes

[20:23] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/d1a0a0bad6

[20:23] <lizmat> only two more test files with failures to go

[20:23] *** zwut00 joined
[20:23] <colomon> TimToady: can you think of any reason set { foo => 10, bar => 17, baz => 42 }.hash would be different from set { foo => 10, bar => 17, baz => 42 } ?

[20:24] <TimToady> you mean like, {} doesn't interpolate in list context?

[20:24] <masak> r: constant True = 42; say +True

[20:24] <camelia> rakudo e1f255: OUTPUT«42␤»

[20:24] *** donaldh left
[20:24] <masak> r: constant True = "yeah, well, you know, that's just, like, your opinion, man"; say True

[20:24] <camelia> rakudo e1f255: OUTPUT«yeah, well, you know, that's just, like, your opinion, man␤»

[20:24] <masak> \o/

[20:24] <colomon> TimToady: should {}.hash interpolate in list context?

[20:24] * masak adds that to https://rt.perl.org/rt3//Public/Bug/Display.html?id=111734

[20:25] <TimToady> colomon: I believe so

[20:26] <pmurias> jnthn: I'm figurint out myself how it's done

[20:26] <colomon> okay, so that is the rakudo bug

[20:26] <colomon> TimToady++

[20:26] <TimToady> just as .[] or .{} would deref

[20:26] <jnthn> pmurias: Sorry, missed question while hutning GC bug...

[20:27] <jnthn> pmurias: I know where it's worked out, moment

[20:27] <TimToady> r: say [ [<a b c>] ].elems

[20:27] <lizmat> jnthn: it would appear that the "\xhhh" operators indeed have not arrived

[20:27] <camelia> rakudo e1f255: OUTPUT«1␤»

[20:27] <lizmat> $ perl6 a.pm6 

[20:27] <lizmat> ===SORRY!=== Error while compiling a.pm6

[20:27] <lizmat> Two terms in a row

[20:27] <lizmat> at a.pm6:2

[20:27] <lizmat> ------> my $b=bag( <a b c> ); say $b; say $b ⏏∪ $b

[20:27] <TimToady> r: say [ [<a b c>][] ].elems

[20:27] <camelia> rakudo e1f255: OUTPUT«3␤»

[20:27] <colomon> rn: .say for { foo => 10, bar => 17, baz => 42 }.hash

[20:27] <TimToady> r: say [ [<a b c>].array ].elems

[20:27] <camelia> rakudo e1f255: OUTPUT«("foo" => 10, "bar" => 17, "baz" => 42).hash␤»

[20:27] <camelia> ..niecza v24-90-gd827fa8: OUTPUT«"foo" => 10␤"bar" => 17␤"baz" => 42␤»

[20:27] <camelia> rakudo e1f255: OUTPUT«No such method 'array' for invocant of type 'Array'␤  in block  at /tmp/V9zw8FSPGy:1␤␤»

[20:27] <colomon> rn: .say for { foo => 10, bar => 17, baz => 42 }

[20:27] * lizmat is going to rewrite those tests to use texan

[20:27] <camelia> rakudo e1f255: OUTPUT«("foo" => 10, "bar" => 17, "baz" => 42).hash␤»

[20:27] <camelia> ..niecza v24-90-gd827fa8: OUTPUT«{"bar" => 17, "baz" => 42, "foo" => 10}␤»

[20:28] <jnthn> pmurias: sub capnames

[20:28] <jnthn> pmurias: In src/QRegex/P6Regex/Actions.nqp

[20:28] <lizmat> .u ∪

[20:28] <TimToady> r: say [ { :a, :b } ].elems

[20:28] <camelia> rakudo e1f255: OUTPUT«1␤»

[20:28] <TimToady> r: say [ { :a, :b }{} ].elems

[20:28] <camelia> rakudo e1f255: OUTPUT«2␤»

[20:28] <TimToady> r: say [ { :a, :b }.hash ].elems

[20:28] <camelia> rakudo e1f255: OUTPUT«1␤»

[20:28] <lizmat> .oO( where is yoleaux when you need her )

[20:29] <TimToady> yes, I'd call that a bug, I think

[20:29] <masak> dammit, https://rt.perl.org/rt3/Ticket/Display.html?id=117841 is still open. I'll have to downgrade my Rakudo to get the blog post out.

[20:30] <TimToady> r: say [ %({ :a, :b }) ].elems

[20:30] <camelia> rakudo e1f255: OUTPUT«1␤»

[20:30] <TimToady> that's the same bug

[20:31] <TimToady> % in list context should flatten

[20:31] * masak guesses the bug didn't exist a year ago, and downgrades to Rakudo 2012.09

[20:31] <TimToady> r: say [ (1,2) ].elems

[20:31] <camelia> rakudo e1f255: OUTPUT«2␤»

[20:31] <TimToady> r: say [ (1,(2,3)) ].elems

[20:31] <camelia> rakudo e1f255: OUTPUT«3␤»

[20:31] <TimToady> okay, just the %/.hash

[20:31] <dalek> perl6-roast-data: cfc5b0d | coke++ | / (5 files):

[20:31] <dalek> perl6-roast-data: today (automated commit)

[20:31] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/cfc5b0dd3b

[20:32] *** jferrero left
[20:32] <FROGGS> masak: it works for me now...

[20:32] <FROGGS> masak: https://gist.github.com/FROGGS/e26c9b14854e3cc94936

[20:32] *** jferrero joined
[20:33] <masak> FROGGS: huh.

[20:34] <dalek> roast: 3fa3416 | (Solomon Foster)++ | S02-types/set.t:

[20:34] <dalek> roast: Add comments and new fudging string.

[20:34] <dalek> roast: 

[20:34] <dalek> roast: With luck this will eliminate future confusion over this subject.

[20:34] <dalek> roast: review: https://github.com/perl6/roast/commit/3fa3416318

[20:35] <[Coke]> LHF: look for "todo PASSED" in https://github.com/coke/perl6-roast-data/blob/master/rakudo.jvm_summary.out and untodo them.

[20:36] *** donaldh joined
[20:36] <[Coke]> OHEY, rakudo.parrot has no failures today.

[20:36] <masak> \o/

[20:36] <lizmat> colomon: this probably also applies to some S02-types/bag.t tests ?

[20:36] <colomon> maybe?  let me look

[20:37] <masak> FROGGS: `icuinfo` says I have Compiled-Version: 4.8.1.1 installed.

[20:37] *** Rotwang1 joined
[20:39] *** kaare_ left
[20:39] <dalek> nqp: 197640d | (Arne Skjærholt)++ | src/vm/parrot/6model/reprs/CStr.c:

[20:39] <dalek> nqp: Mark CStr as being able to box strings and implement get_str.

[20:39] <dalek> nqp: review: https://github.com/perl6/nqp/commit/197640def9

[20:40] *** BooK left
[20:40] <masak> argh, 2012.09 also has the bug :(

[20:40] * masak downgrades to 2011.09

[20:41] *** BooK joined
[20:41] <dalek> perl6-roast-data: bc4a6a5 | coke++ | cull:

[20:41] <dalek> perl6-roast-data: use ISO dates going forward

[20:41] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/bc4a6a5aef

[20:41] <dalek> roast: 2907bc6 | (Solomon Foster)++ | S02-types/bag.t:

[20:41] <dalek> roast: Add comments and new fudging string.

[20:41] <dalek> roast: 

[20:41] <dalek> roast: With luck this will eliminate future confusion over this subject.

[20:41] <dalek> roast: review: https://github.com/perl6/roast/commit/2907bc6c83

[20:41] * lizmat is glad it's not something she did recently

[20:41] <lizmat> colomon++

[20:42] <lizmat> colomon: I see you wrote tests for both ∪ and (|)

[20:42] <lizmat> did you do that for all the new ops ?

[20:42] <colomon> lizmat: I think so?  I certainly intended to

[20:42] <colomon> lizmat: they're both part of the spec

[20:42] <dalek> zavolaj: 6f912ac | (Arne Skjærholt)++ | / (2 files):

[20:42] <dalek> zavolaj: Unbust explicitly managed strings.

[20:42] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/6f912aca5f

[20:42] <lizmat> okidoki, then my work is almost done :-)

[20:43] <arnsholt> moritz: I think Zavolaj should be fixed now. Could you give your DB things a whirl and see if everything works properly?

[20:43] *** stevan_ joined
[20:44] <arnsholt> jnthn++ # Root cause discovery

[20:44] <moritz> arnsholt: will do tomorrow

[20:45] <arnsholt> Thanks!

[20:45] <FROGGS> masak: same

[20:46] <dalek> perl6-roast-data: 2ba3ef4 | coke++ | perl6_pass_rates.csv:

[20:46] <dalek> perl6-roast-data: fix stats from previous day that went in twice.

[20:46] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/2ba3ef4645

[20:46] <dalek> perl6-roast-data: 0985dab | coke++ | perl6_pass_rates.csv:

[20:46] <dalek> perl6-roast-data: Fixup non-ISO dates that slipped in

[20:46] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/0985dab6fc

[20:47] <FROGGS> masak: $ perl6 -e 'say qx[perl6 -e "say 1 x 4095,q|—|" | cat]; say "alive"'

[20:47] <FROGGS> Unaligned end in UTF-8 string

[20:47] <FROGGS> my chunksize is just different now

[20:48] <masak> FROGGS: oh!

[20:48] <masak> FROGGS: I feel so powerless in face of that bug.

[20:48] <masak> FROGGS: it really messes up my ability to use Perl 6 for something real and useful.

[20:49] <FROGGS> :/

[20:49] <masak> though maybe I can now explore the JVM backend for this.

[20:49] <FROGGS> >.<

[20:49] <FROGGS> rakudo-jvm$ ./perl6 -e 'say qx[./perl6 -e "say 1 x 4095,q|—|" | cat]; say "alive"'

[20:49] <FROGGS> Unhandled file open mode 'rp'

[20:49] <masak> dang.

[20:49] <diakopter> ETOOPIPEY

[20:49] <jnthn> ah, we still didn't get the pipe open in...

[20:50] <FROGGS> if you'd time you could hunt that bug down

[20:50] *** hummeleBop left
[20:50] <masak> bug, as in, missing feature? :)

[20:50] <FROGGS> it is up to you :o)

[20:50] <jnthn> NYI

[20:50] <FROGGS> you have a choice at least

[20:50] <masak> because I've been looking at the Unicode bug in the Parrot source code, and it's... well-hidden.

[20:50] <masak> they have loads of layers of abstraction, making everything look real neat and bug-free.

[20:50] <masak> except it isn't.

[20:51] <diakopter> masak: that's the several layers of obfuscators

[20:52] <diakopter> Bogged Down by Smoke and Mirrors

[20:52] <masak> It's Not A Refactor If You Break Someone's Production Code(TM).

[20:53] <diakopter> i don't recognize that backronym

[20:53] <masak> oh my, I think I just made a chromatic mumble "if only they saw the irony of it all" somewhere in the world :P

[20:53] * masak waves to chromatic

[20:53] * diakopter irons out your irony

[20:54] <masak> oh phew, 2011.09 doesn't have the regression.

[20:54] <diakopter> but.. it has a few other regressions

[20:54] <lizmat> .oO( chromatic, is that about shades of grey? )

[20:55] <diakopter> 50 of those takes 6 bits

[20:56] <masak> heh, apparently 2011.09 is too old to run my blog, though...

[20:56] * masak upgrades slightly

[20:56] <masak> this will take all evening.

[20:56] <perigrin> lizmat: only when he was sick with mono.

[20:56] <diakopter> *goran*

[20:57] <masak> kind of an off-color joke, don't you think?

[20:57] <diakopter> masak: it's a sliding scale

[20:57] <lizmat> and that on a day like this, 50 years hence ?

[20:58] * arnsholt <3 git

[20:58] <masak> diakopter: so I guess there's no way to be discrete about it, then. :)

[20:58] <lizmat> .oO( some people don't have a dream anymore )

[20:59] <diakopter> masak: but it's pretty accident-prone

[20:59] *** gdey left
[20:59] <diakopter> <- # ftw; two music jokes in a row

[20:59] <arnsholt> lizmat: I think #perl6 is more concerned with colourless green ideas

[21:00] <lizmat> I guess we're all super green on that

[21:00] *** xenoterracide joined
[21:00] * cognominal goes to sleep furiously

[21:01] <masak> furieusement!

[21:01] <lizmat> bonne nuit, cognominal!

[21:02] <cognominal> thx, good night to you,  all * cast.

[21:02] *** skids left
[21:05] *** bruges joined
[21:07] *** bruges_ left
[21:07] <diakopter> masak: put away your rainbow flag..

[21:10] <masak> yay! finally it runs!

[21:10] <masak> I settled on 2012.05, by the way.

[21:11] <masak> note to self, in case irclog's search function ever becomes reliable again.

[21:13] <masak> lol, I blug! \o/ http://strangelyconsistent.org/blog/t3-wire-crossings

[21:13] * donaldh golfs all the rakudo JVM regressions

[21:13] <masak> can I do t4 within... a week? yes, I think I can, actually.

[21:14] *** zwut00 left
[21:15] <dalek> roast: f70457d | (Tobias Leich)++ | S11-modules/require.t:

[21:15] <dalek> roast: added chdir+require test

[21:15] <dalek> roast: review: https://github.com/perl6/roast/commit/f70457dc48

[21:15] * donaldh looks like is_run is bust:

[21:15] <donaldh> sh: perl6: command not found

[21:16] <dalek> rakudo/nom: c45ddb9 | (Tobias Leich)++ | src/vm/jvm/ModuleLoaderVMConfig.nqp:

[21:16] <dalek> rakudo/nom: take cwd into acount when looking up modules

[21:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c45ddb96e3

[21:18] <dalek> roast: 6682a3b | (Elizabeth Mattijsen)++ | S03-operators/ (2 files):

[21:18] <dalek> roast: Fudge all the failing Set/Bag tests

[21:18] <dalek> roast: review: https://github.com/perl6/roast/commit/6682a3b2ec

[21:18] <lizmat> spectest should be clean again now

[21:18] <FROGGS> lizmat++

[21:18] <donaldh> haha, busted by the nqp JVM $*EXECUTABLE_NAME changing from "java" to "perl6"

[21:19] <lizmat> however, it appears that most of the new operators simply do not work

[21:19] <lizmat> :-(

[21:19] <donaldh> r: say($*EXECUTABLE_NAME)

[21:19] <camelia> rakudo e1f255: OUTPUT«./nom-inst/bin/perl6␤»

[21:19] <donaldh> ah.

[21:20] <donaldh> no path on JVM, just the "perl6" bare word. Would require . to be in PATH

[21:20] <lizmat> donaldh: does PR 119 mean we now have a nqp:tc ?

[21:21] *** celesta joined
[21:21] <celesta> ahoi #perl6

[21:22] <lizmat> celesta o/

[21:22] <donaldh> lizmat: no, that means I added the :tc ThreadContext parameter to all the nqp file ops for JVM.

[21:22] <lizmat> ah, ok

[21:22] *** jferrero left
[21:23] <donaldh> so that I could use die_s(…, tc);

[21:24] <lizmat> okidoki, it's just that I recently implemented .tc (titlecase) rather naively

[21:24] <diakopter> r: $OUTER::OUTER::OUTER::OUTER::OUTER::OUTER::True

[21:24] <camelia> rakudo e1f255: OUTPUT«Null PMC access in get_attr_str()␤  in sub  at src/gen/CORE.setting:8786␤  in method at_key at src/gen/CORE.setting:8839␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1861␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1849␤  in block  at /tmp/OB…

[21:24] *** jferrero joined
[21:24] <diakopter> whee

[21:24] <diakopter> masak: NPMCA

[21:24] <lizmat> and put it on my list for after the RaNIW

[21:24] <lue> masak++ # continuing the review

[21:24] *** Khisanth joined
[21:25] <celesta> r: my %h = ( 1 => <foo bar> ); my @baz = %h<1>; say @baz[0]

[21:25] <camelia> rakudo e1f255: OUTPUT«foo bar␤»

[21:25] <celesta> i expected output "foo"

[21:26] *** panchiniak joined
[21:26] <lizmat> r: my %h = ( 1 => <foo bar> ); say %h

[21:26] <camelia> rakudo e1f255: OUTPUT«("1" => $("foo", "bar")).hash␤»

[21:26] <celesta> r: my %h = ( 1 => <foo bar> ); my @baz = %h<1>; say @baz.WHAT

[21:26] <camelia> rakudo e1f255: OUTPUT«(Array)␤»

[21:27] * masak submits rakudobug

[21:27] <masak> diakopter++

[21:27] <lizmat> r: my %h = ( 1 => <foo bar> ); say %h; my @baz=%h<1>; say @baz

[21:27] <camelia> rakudo e1f255: OUTPUT«("1" => $("foo", "bar")).hash␤foo bar␤»

[21:27] <lizmat> r: my %h = ( 1 => <foo bar> ); say %h; my @baz=%h<1>; say @baz.elems

[21:27] <camelia> rakudo e1f255: OUTPUT«("1" => $("foo", "bar")).hash␤1␤»

[21:27] <masak> r: $OUTER::OUTER::OUTER::OUTER::OUTER::True

[21:27] <camelia> rakudo e1f255:  ( no output )

[21:27] <celesta> me confused now

[21:27] <lizmat> r: my %h = ( 1 => <foo bar baz > ); say %h; my @baz=%h<1>; say @baz.elems

[21:27] <masak> r: say $OUTER::OUTER::OUTER::OUTER::OUTER::True

[21:27] <camelia> rakudo e1f255: OUTPUT«("1" => $("foo", "bar", "baz")).hash␤1␤»

[21:27] <camelia> rakudo e1f255: OUTPUT«(Any)␤»

[21:30] <lizmat> r: my %h = ( 1 => <foo bar baz > ); say %h; my @baz=%h<1>.list; say @baz.elems

[21:30] <camelia> rakudo e1f255: OUTPUT«("1" => $("foo", "bar", "baz")).hash␤3␤»

[21:30] <lizmat> r: my %h = ( 1 => <foo bar baz > ); say %h; my @baz=%h<1>.WHAT; say @baz.elems

[21:30] <camelia> rakudo e1f255: OUTPUT«("1" => $("foo", "bar", "baz")).hash␤1␤»

[21:30] <lizmat> r: my %h = ( 1 => <foo bar baz > ); say %h; say %h<1>.WHAT

[21:30] <camelia> rakudo e1f255: OUTPUT«("1" => $("foo", "bar", "baz")).hash␤(Parcel)␤»

[21:31] <lizmat> r: my %h = ( 1 => [<foo bar baz >] ); say %h; say %h<1>.WHAT

[21:31] <camelia> rakudo e1f255: OUTPUT«("1" => ["foo", "bar", "baz"]).hash␤(Array)␤»

[21:31] <lizmat> r: my %h = ( 1 => [<foo bar baz >] ); say %h; my @baz= %h<1>; say @baz.perl

[21:31] <camelia> rakudo e1f255: OUTPUT«("1" => ["foo", "bar", "baz"]).hash␤Array.new(["foo", "bar", "baz"])␤»

[21:32] <lizmat> celesta: I *think* it's according to spec, as a Parcel doesn't flatten in that context, an Array does

[21:32] <celesta> lizmat: thank you

[21:33] * lizmat finds that distinction still rather hard to grok

[21:33] * diakopter still glazes over when the word parcel appears

[21:33] *** ssutch joined
[21:33] * masak too

[21:34] <masak> it's a bit like Python's tuple type, I guess.

[21:34] <lue> masak: Reading through your reviews, I wonder if I shouldn't start future-proofing my Int->Bool coercions and just write +(True/True) :)

[21:34] <masak> lue: way to miss the core complaint :P

[21:34] <lue> er, Bool->Int

[21:35] <lue> r: say (0/0).WHAT

[21:35] <camelia> rakudo e1f255: OUTPUT«Divide by zero␤  in method sink at src/gen/CORE.setting:11557␤  in method BUILDALL at src/gen/CORE.setting:893␤  in method bless at src/gen/CORE.setting:834␤  in method new at src/gen/CORE.setting:819␤  in method new at src/gen/CORE.setting:817␤  in sub DIVIDE_NUMB…

[21:41] *** denisboyun joined
[21:43] *** yoleaux joined
[21:43] *** ChanServ sets mode: +v yoleaux

[21:47] *** dmol left
[21:51] <dalek> roast/jvm-prog-name: 3128fcd | (Donald Hunter)++ | packages/Test/Util.pm:

[21:51] <dalek> roast/jvm-prog-name: Another JVM process name workaround.

[21:51] <dalek> roast/jvm-prog-name: review: https://github.com/perl6/roast/commit/3128fcdd32

[21:52] <dalek> roast: 3128fcd | (Donald Hunter)++ | packages/Test/Util.pm:

[21:52] <dalek> roast: Another JVM process name workaround.

[21:52] <dalek> roast: review: https://github.com/perl6/roast/commit/3128fcdd32

[21:52] <dalek> roast: c5c0a68 | (Donald Hunter)++ | packages/Test/Util.pm:

[21:52] <dalek> roast: Merge pull request #33 from perl6/jvm-prog-name

[21:52] <dalek> roast: 

[21:52] <dalek> roast: Another JVM process name workaround. Should resolve a lot of JVM regressions.

[21:52] <dalek> roast: review: https://github.com/perl6/roast/commit/c5c0a6879f

[21:52] *** ajr joined
[21:53] *** ajr is now known as Guest47732

[21:59] <celesta> thanks and good night #perl6

[21:59] *** celesta left
[22:06] *** dwarring left
[22:11] *** donaldh left
[22:12] *** stevan_ left
[22:12] *** stevan_ joined
[22:18] <FROGGS> .tell donaldh does ./perl6 work on windows at all? https://github.com/perl6/roast/commit/c5c0a6879f

[22:18] <yoleaux> FROGGS: I'll pass your message to donaldh.

[22:28] *** skids joined
[22:29] *** btyler left
[22:39] *** FROGGS left
[22:41] *** pernatiy joined
[22:43] *** Guest47732 left
[22:44] *** alexghacker left
[22:44] *** alexghacker joined
[22:45] *** snoop`nqr joined
[22:47] *** snoop`nqr left
[22:48] *** snoopy` joined
[22:50] *** snoopy` left
[22:54] <dalek> rakudo/nom: 7b26cbf | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[22:54] <dalek> rakudo/nom: Refinement on use of flattening

[22:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7b26cbfa96

[22:56] <lizmat> and on that thought, I wish you all a good night!

[22:56] <lizmat> sleep&

[22:58] <jnthn> 'night, lizmat 

[23:00] *** denisboyun left
[23:00] *** PZt joined
[23:01] *** colomon left
[23:06] <jnthn> sleep also &

[23:08] *** FROGGS joined
[23:11] *** gdey joined
[23:17] *** PacoAir left
[23:19] <masak> 'night, #perl6

[23:28] *** pernatiy left
[23:34] *** Rotwang1 left
[23:39] *** abnorman left
[23:40] *** gdey left
[23:40] *** abnorman joined
[23:47] *** pmurias left
