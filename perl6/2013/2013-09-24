[00:12] *** Psyche^_ joined
[00:15] *** Psyche^ left
[00:19] <dalek> perl6-roast-data: eb7d578 | coke++ | / (5 files):

[00:19] <dalek> perl6-roast-data: today (automated commit)

[00:19] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/eb7d578522

[00:20] <timotimo> [Coke]: any way you can look into the cancellations of all those rakudo-jvm tests?

[00:21] *** ajr_ left
[00:21] <[Coke]> timotimo: aye. just coming off a narsty head cold.

[00:22] <[Coke]> this is the most conscious I've felt since thursday. :)

[00:22] *** xenoterracide left
[00:22] <timotimo> good to hear you're feeling better!

[00:23] <[Coke]> danke.

[00:24] <[Coke]> I killed most of those manually. it went into the weeds when I commented earlier, and never came back, I manually killed all the subtests just now so I could get -a- run completed.

[00:25] * diakopter boggles at p6u

[00:26] * [Coke] fires up chrome...

[00:26] <timotimo> oh

[00:26] <timotimo> yikes

[00:26] <diakopter> eiro: ping

[00:27] <timotimo> easy solution: show him how string.split works

[00:27] <diakopter> eiro: your mail to perl6-users made me boggle :) because rakudo doesn't use MoarVM yet...

[00:28] <timotimo> oh, that's right. hehe

[00:29] <timotimo> seems like there's people outside of our little bubble who are even more optimistic about our progress than us!

[00:38] *** risou is now known as risou_awy

[00:40] *** ssutch left
[00:41] <Mouq> jnthn++ # RaNIW notes

[00:48] <flussence> r: 'č' ~~ /<+:Print -:Space -:ID_Continue>/; # I'm trying to build a regex to filter out "weird" stuff like whitespace and combining chars, but all I can find for the latter is ID_Continue which is way too broad. Any ideas?

[00:48] <camelia> rakudo b78da4: ( no output )

[00:49] <flussence> r: say ?('č' ~~ /<+:Print -:Space -:ID_Continue>/); # er...

[00:49] <camelia> rakudo b78da4: OUTPUT«False␤»

[00:49] <flussence> r: say ?('c' ~~ /<+:Print -:Space -:ID_Continue>/);

[00:49] <camelia> rakudo b78da4: OUTPUT«False␤»

[00:50] <flussence> yeah, that's *definitely* not what I wanted...

[00:56] <TimToady> r: say ?('č' ~~ /<+:Print>/);

[00:56] <camelia> rakudo b78da4: OUTPUT«True␤»

[00:57] *** eternaleye left
[00:57] <TimToady> 'course, the notion of combining characters will be relatively meaningless under NFG...

[00:58] <flussence> (fwiw, I'm trying to do stuff with this list, which is full of fiddly unicode: http://www.whatwg.org/specs/web-apps/current-work/multipage/named-character-references.html#named-character-references )

[00:59] <TimToady> oh, yes, ID_Continue is not what you want at all

[00:59] <Mouq> r: say ?('č' ~~ /<+:Print -:Expands_On_NFC>/);

[00:59] <camelia> rakudo b78da4: OUTPUT«Unicode property 'Expands_On_NFC' not found␤  in regex  at /tmp/ync1WVOcfn:1␤  in method ACCEPTS at src/gen/CORE.setting:12080␤  in method ACCEPTS at src/gen/CORE.setting:742␤  in block  at /tmp/ync1WVOcfn:1␤␤»

[01:00] <flussence> (also I find it pretty amusing that my browser doesn't understand most of those :)

[01:02] <Mouq> flussence: You can peruse http://www.unicode.org/reports/tr44/tr44-4.html for classes, I don't know if that helps you

[01:02] <Mouq> r: say ?('č' ~~ /<+:Modifier_Letter>/);

[01:02] <camelia> rakudo b78da4: OUTPUT«False␤»

[01:03] <flussence> oh, that looks like a useful page

[01:07] <Mouq> Oop, sorry, http://www.unicode.org/reports/tr44/ is up to date

[01:08] <[Coke]> here's one NPE on rakudo.jvm: https://gist.github.com/coke/6679105

[01:09] <flussence> r: say "\x2004" ~~ /<+:L +:N +:P>/;

[01:09] <flussence> .oO( freenode's having a bad day today )

[01:09] <camelia> rakudo b78da4: OUTPUT«Nil␤»

[01:10] *** [Sno] left
[01:11] *** araujo left
[01:11] *** araujo joined
[01:13] <Mouq> TimToady: Where do I look to remind myself what NFG is?

[01:14] *** pmurias left
[01:14] <TimToady> it isn't very well documented yet.  Basically it's NFC plus temporary characters generated for those graphemes that don't have a precomposed form.

[01:14] <timotimo> it's a fixed-bytes-per-grapheme format that invents new codepoints for combinations of things in the negatives

[01:15] <TimToady> well, negatives is an implementation detail, but yes

[01:15] *** benabik joined
[01:15] <[Coke]> weird. the NPE is reporting from nqp code, not java code. adding --ll-exception still only shows nqp lines.

[01:16] <TimToady> for a string with no combining characters, the NFC form is identical to the NFG form

[01:16] <Mouq> Ohhh, cool. So, Normalized Form Great

[01:16] <Mouq> :)

[01:16] <timotimo> Normalized For Graphemes?

[01:25] *** EvanTeitelman left
[01:26] <diakopter> eiro: u around?

[01:26] *** Vlavv` left
[01:30] *** EvanTeitelman joined
[01:31] *** btyler joined
[01:31] *** EvanTeit1lman joined
[01:32] *** EvanTeit1lman left
[01:34] *** xinming left
[01:35] *** xinming joined
[01:38] <TimToady> so, basically, we just need to write a bangup QAST to Perl 6 translator, and then anyone who ports their language to the QAST backend has already written the Foolang-to-Perl6 translator :)

[01:39] <TimToady> with sufficient refactoring smarts, it can even translate bad Perl 6 to good Perl 6 :)

[01:39] *** Vlavv` joined
[01:39] <diakopter> heh.

[01:39] <diakopter> use v6; use Moose;

[01:39] <timotimo> oh lord, they were right ... you truly are stark ravin' mad!

[01:40] <diakopter> also, stork craving mad

[01:40] <timotimo> hmm, does stork taste good?

[01:40] *** EvanTeitelman left
[01:42] *** EvanTeitelman joined
[01:42] *** EvanTeit1lman joined
[01:42] *** EvanTeit1lman left
[01:43] <diakopter> well, at least my runaway GC isn't consuming all memory anymore

[01:43] <diakopter> now it's just spinning wildly

[01:43] <TimToady> someday it will wise up and return home

[01:44] <diakopter> "bad gc! you're supposed to collect the garbage, not multiply it!"

[01:47] <diakopter> (I call it "my" gc since I've sufficiently corrupted it from jnthn's original design... )

[01:47] <diakopter> the parallel-ness of it, anyway

[01:49] *** EvanTeitelman left
[02:01] <benabik> Porting QAST to perl 6 isn't hard...  It will just be Perl6 that generates a QAST tree and runs it.  :-D

[02:05] <timotimo> don't forget there's more to it than just QAST, there's also the declarative bits like classes that'd have to be translated ... but at least perl6's class system is pretty flexible

[02:06] <timotimo> (though of course you'd probably have a sixmodel based class/object system in your QAST-targeting language anyway and in theory could load the objects directly from a SC if need be)

[02:11] <benabik> Looks clever although I'll make no guesses at correctness b/c I'm a bit tired.

[02:13] *** SamuraiJack left
[02:13] <diakopter> benabik: the quicksort?

[02:14] <benabik> diakopter: Guh, yes.  Sorry about channel hopping.

[02:16] <diakopter> careful, obfuscating your online communications will soon be classed as "evading arrest" ;)

[02:16] <benabik> Vg'f nyevtug, vs gurl gel gb qrpbqr zl zrffntrf, V'yy uvg gurz jvgu gur QZPN.

[02:17] <diakopter> I think there's a pony somewhere in there

[02:18] *** SamuraiJack joined
[02:20] <diakopter> boy, who wrote these threads.t tests; they're diabiological

[02:21] <benabik> Okay, enough getting IRC wrong for me.  Gotta get up in the morning.  'night all.

[02:21] *** benabik left
[02:22] *** SamuraiJack left
[02:35] *** SamuraiJack joined
[02:39] *** SamuraiJack left
[02:40] *** SamuraiJack joined
[02:51] *** PZt joined
[02:57] <[Coke]> looks like multiple of the jvm failures are due to: java.lang.NullPointerException in block  at src/gen/CORE.setting:1051

[03:05] *** dmol joined
[03:20] *** colomon left
[03:24] *** dmol left
[03:25] *** eternaleye joined
[03:29] *** raiph joined
[03:32] *** gtodd left
[03:38] *** gtodd joined
[03:59] *** preflex left
[04:00] *** preflex joined
[04:00] *** ChanServ sets mode: +v preflex

[04:05] *** preflex_ joined
[04:05] *** ChanServ sets mode: +v preflex_

[04:06] *** preflex left
[04:06] *** preflex_ is now known as preflex

[04:08] *** raiph left
[04:14] *** ssutch joined
[04:52] *** [Sno] joined
[05:03] *** btyler left
[05:05] *** BenGoldberg left
[05:06] *** hummeleB1 joined
[05:11] *** eternaleye left
[05:14] *** eternaleye joined
[05:14] *** eternaleye left
[05:14] *** eternaleye joined
[05:20] *** fridim__ left
[05:26] *** zby_home joined
[05:30] *** SamuraiJack left
[05:30] *** kaleem joined
[05:39] *** kaleem left
[05:40] *** [Sno] left
[05:40] *** SamuraiJack joined
[05:42] *** denis_boyun joined
[05:44] *** xinming left
[05:46] *** xinming joined
[05:51] *** PacoAir joined
[05:53] *** denis_boyun left
[05:56] *** mberends left
[05:56] *** PacoAir left
[06:12] *** iSlug joined
[06:17] <eiro> hello |@perl6 

[06:17] *** iSlug left
[06:17] <eiro> diakopter, now i am 

[06:17] <diakopter> eiro: hi :)

[06:18] <diakopter> I'm glad Patrick replied with the link to the Synopses about the record separator spec'd feature; I had a tiny memory it was there but no idea how to find it

[06:20] <eiro> just read pmichaud's answer, replied to him and i'm trying to figure out if i could be able to patch rakudo and MoarMV

[06:20] <diakopter> well, rakudo doesn't use MoarVM yet, so it'd be no use to patch MoarVM :)

[06:21] <diakopter> but patching the spec seems more important, since it seems inconsistent at least

[06:21] <diakopter> (as you pointed out)

[06:21] <eiro> i have to admit i felt dumb when i realized i haven't look at the S* 

[06:21] *** zby_home left
[06:22] <diakopter> I feel dumb every time I'm reminded I've read something there but forgot it; don't feel bad :)

[06:22] <eiro> :) 

[06:23] <eiro> if a spec update can be done, it would be really cool to introduce IFS as well: it's usefull in many cases 

[06:23] <diakopter> what's IFS

[06:23] <eiro> (posix DB, pure CSV or TSV, ISO2709 files)

[06:24] <eiro> input-field-separator

[06:24] <diakopter> surely that shouldn't be in the core language..?

[06:24] <diakopter> (but a module instead?)

[06:24] <eiro> \t , ",", ":"

[06:24] <diakopter> oh

[06:25] <eiro> well. the point of having a builtin for this so common operation is performance: we are always reading records then splitting them with the IFS

[06:27] <eiro> perl -F: -lanE 'say $F[0]' /etc/passwd

[06:29] *** darutoko joined
[06:30] *** logie left
[06:35] *** FROGGS joined
[06:41] *** denisboyun joined
[06:42] *** brrt joined
[06:47] *** kst left
[06:53] <FROGGS> o/

[06:57] *** kaleem joined
[07:00] <brrt> hi

[07:05] <hoelzro> morning #perl6

[07:05] <moritz> \o hoelzro, brrt, FROGGS, eiro 

[07:05] <bonsaikitten> http://bpaste.net/show/134925/ # y'all want a bugreport for that test failure in nqp-2013.09 ?

[07:06] <brrt> hi moritz :-)

[07:07] *** raiph joined
[07:07] <hoelzro> in the JVM backend, does ((SixModelObject) smo).st.HOW == xmo?

[07:07] <hoelzro> s/xmo/smo/

[07:07] <FROGGS> bonsaikitten: yes, please

[07:07] <bonsaikitten> alrighty then

[07:08] <FROGGS> hoelzro: as far as I understand everything on the jvm backend is a smo

[07:08] <FROGGS> same on moarvm, but not on parrot :o)

[07:09] <bonsaikitten> urgh

[07:09] <bonsaikitten> some bugtrackers just exceed my tolerance limit in the first minute

[07:10] <bonsaikitten> well, at least it ain't githurp ...

[07:10] <moritz> huh?

[07:10] <moritz> the nqp bugtracker is the one on github

[07:10] <bonsaikitten> oh? that's mildly confusing

[07:11] <bonsaikitten> I'd have wrongly thought nqp is "part of" rakudo as far as bugtracking goes

[07:11] <bonsaikitten> oh well, then I'll just have to ignore this bugreport :\

[07:12] <moritz> or you just submit the bug on the nqp bugtracker

[07:13] <bonsaikitten> which apparently implies githerpes, which I don't deal with 

[07:13] <bonsaikitten> hrm, my self-censoring seems to fail today

[07:13] <moritz> ok, rephrase

[07:14] <moritz> you don't *have* to ignore this bug

[07:14] <bonsaikitten> if the nqp bugtracker lives on github I won't be able to use it

[07:14] <moritz> why?

[07:14] <bonsaikitten> too sober at this time of the day

[07:15] <FROGGS> I'll submit it

[07:15] <bonsaikitten> FROGGS: ok. need any more information?

[07:15] <FROGGS> bonsaikitten: many thanks for the report anyway :o)

[07:15] <FROGGS> err

[07:16] <FROGGS> nqp --version

[07:16] <FROGGS> and your uname -a

[07:16] <FROGGS> that should be alright

[07:16] <arnsholt> hoelzro: No, that doesn't sound right

[07:17] <arnsholt> I think the only object whose HOW is itself is KnowHOW (the HOW which ends the recursion in 6model)

[07:18] <FROGGS> .u 01F4A4

[07:18] <yoleaux> U+1F4A4 SLEEPING SYMBOL [So] (💤)

[07:19] <bonsaikitten> FROGGS: that's while building 2013.09, and uname -a is Linux localhost 3.11.0-gentoo #1 SMP Wed Sep 4 10:27:45 CST 2013 x86_64 AMD Phenom(tm) II X4 965 Processor AuthenticAMD GNU/Linux

[07:19] <FROGGS> bonsaikitten: I'd still like to get nqp --version, because it includes the parrot version too

[07:20] <bonsaikitten> This is nqp version 2013.09 built on parrot 5.7.0 revision 0 # there

[07:20] <FROGGS> awesome, thank you!

[07:20] *** domidumont joined
[07:22] *** Mouq left
[07:23] <eiro> FROGGS, maybe i missed a point: is IO.slurp on demand ? (like the haskell readFile ?)

[07:24] <FROGGS> eiro: I don't know any haskell, sorry

[07:24] <FROGGS> eiro: but yes, Str.IO makes an iohandle, which can be slurped then

[07:25] <FROGGS> ohh

[07:26] <FROGGS> now I see the mails

[07:26] <eiro> the question is: "foo".IO.slurp.split("\n")[^3]

[07:27] <eiro> does it read the whole file to get the first 4 lines

[07:27] <FROGGS> I dont think slurp is lazy

[07:27] <eiro> ?

[07:28] <FROGGS> we really need to handle open( :nl ) I think, and pass that to nqp::readlinefh()

[07:28] <eiro> so your solution isn't acceptable for me. anyway: i noted the >>.split syntax which is cool :)

[07:29] <FROGGS> yeah, my solution isnt one actually ó.ò

[07:29] <eiro> i need rakudo to run on moarvm if i want to patch myself 

[07:30] <FROGGS> yes, for now

[07:31] <FROGGS> we should patch moarvm, and then port the readlinefh over to parrot

[07:31] *** flussence left
[07:31] *** flussence joined
[07:32] <eiro> an chance to see S32 fixed first ?

[07:32] <moritz> fwiw IO::Socket::INET already has an .input-line-separator

[07:32] <FROGGS> eiro: you mean the naming of :nl ?

[07:32] <eiro> yep 

[07:33] <eiro> moritz, so i can netcat my file :) this is a great idea!

[07:34] <lizmat> .tell [Coke] the method2sub branch started using .can in SLICE_MORE in Any.pm, maybe .can is borked on jakudo ?

[07:34] <yoleaux> lizmat: I'll pass your message to [Coke].

[07:34] <eiro> FROGGS, not only :nl but .input-line-separator. RS is well known and used for a while, i really don't understand why introducing new conventions

[07:35] <moritz> RS = Result Set?

[07:35] <arnsholt> Record separator

[07:35] <eiro> moritz, Record Separator 

[07:35] * moritz favors :separator with a :sep shortcut

[07:35] <arnsholt> Same terms as AWK uses, if that's of any use to you =)

[07:35] <eiro> IRS, IFS (shell, ISO charsets, awk, perl5, ...)

[07:38] <FROGGS>  .lines( :sep("\n") )>>.words( :sep<:> ) # I think I prefer :sep/:separator too

[07:38] *** logie joined
[07:38] <FROGGS> :ifs() is rather cryptic

[07:38] * FROGGS .oO( insensitive file system? )

[07:39] <eiro> unless you have an unix background or an experience as ISO spec reader 

[07:39] *** sqirrel joined
[07:39] <eiro> but you're right: it's not a lot of people nowaday

[07:39] *** hummeleB1 left
[07:41] <FROGGS> moritz: do you think we break much when replacing IO::Socket::INET.input-line-separator?

[07:41] <FROGGS> (if we are going to do that )

[07:42] *** woosley left
[07:42] <eiro> also i liked the naming scheme : [IO][RFS]S

[07:42] <hoelzro> oh, I see

[07:42] <hoelzro> yeah, that makes sense

[07:42] <hoelzro> I'm just trying to figure out how to get the "name" of an SMO on the JVM

[07:42] <masak> morning, #perl6

[07:42] <hoelzro> morning masak 

[07:42] <hoelzro> but maybe that operation doesn't even make sense

[07:42] <FROGGS> morning masak

[07:42] <eiro> 'lo masak 

[07:43] *** logie left
[07:43] *** woosley joined
[07:44] <hoelzro> I've been hacking on tijmp (a object profiler for Java) to try and get it to give more data on a running Perl6 program

[07:44] <hoelzro> so far, results are good

[07:45] <FROGGS> r: my $a = "abc"; say $a.HOW.name($a) # hoelzro, do you mean this?

[07:45] <camelia> rakudo b78da4: OUTPUT«Str␤»

[07:47] <hoelzro> FROGGS: right, but from the JVM

[07:47] <hoelzro> I mean to say

[07:47] <hoelzro> from within Java

[07:47] <FROGGS> ahh, hmmm, no idea then :o)

[07:48] <hoelzro> hmm

[07:48] <hoelzro> I'm guessing I have to look up the name method for the HOW object

[07:48] <FROGGS> yeah, it must compile to something

[07:50] <hoelzro> ugh

[07:50] <hoelzro> this will be fun

[07:51] <hoelzro> oh well; it's a good chance to learn about the JVM backend =)

[07:52] *** raiph left
[07:54] *** fhelmberger joined
[07:56] <arnsholt> hoelzro: Thing is, I don't think types are explicitly named

[07:56] <hoelzro> I figured

[07:56] <hoelzro> hmm

[07:56] * hoelzro tries an experiment

[07:57] <arnsholt> OTOH, the ones that -are- named get names on the Perl 6 side

[07:58] *** denisboyun left
[07:58] <jnthn> morning, #perl6

[07:58] <yoleaux> 23 Sep 2013 23:27Z <TimToady> jnthn: Also, I don't think Trigometric is a word. (Slide 173)

[07:58] <hoelzro> welcome back jnthn 

[07:58] <jnthn> ...so what do you call 'em? :)

[07:58] <hoelzro> arnsholt: if I can just catch the ones that are named, that's fine

[07:58] <arnsholt> Oh, jnthn probably knows how/if this can be done

[07:58] <hoelzro> indeed =)

[07:59] <jnthn> What're you trying to do? :)

[07:59] <hoelzro> well

[07:59] <hoelzro> two things

[07:59] <hoelzro> both of which are on the JVM backend

[07:59] <hoelzro> and unrelated to each other =)

[08:00] <hoelzro> the first is a bug I found: https://rt.perl.org/rt3/Public/Bug/Display.html?id=119877

[08:00] <hoelzro> I tried fixing it, but no dice

[08:00] <hoelzro> the second is probably more interesting

[08:00] <hoelzro> I'm working on modifying a JVM object profiler to work with Perl 6

[08:00] * jnthn hands hoelzro a d20 or two...

[08:00] *** woosley left
[08:01] <hoelzro> here's the initial result: http://hoelz.ro/files/perl6-objects.png

[08:01] *** flussence left
[08:01] <hoelzro> r: (1..20).pick(1)

[08:01] <camelia> rakudo b78da4: ( no output )

[08:01] <hoelzro> r: say (1..20).pick(1)

[08:01] <camelia> rakudo b78da4: OUTPUT«13␤»

[08:01] <hoelzro> =/

[08:02] <hoelzro> anywa

[08:02] *** flussence joined
[08:02] <hoelzro> I would like to display the name of the appropriate SMO in that table

[08:02] <hoelzro> instead of "org.nqp...SixModelObject"

[08:04] <jnthn> I've for a while suspected that we might want to keep a "debugging name" for a type on the STable as a simple string.

[08:04] <jnthn> And provide a way for the meta-object to set it

[08:05] <jnthn> But that's Not Done Yet

[08:05] <hoelzro> of course =)

[08:05] <hoelzro> I was thinking just doing that for P6Opaques would help

[08:05] <jnthn> For now your best bet is to arrange to call obj.HOW.name(obj)

[08:05] <jnthn> You can use Ops.how to get the HOW from an object, or just pull it right out of the ST

[08:06] <jnthn> There are examples of calling methods in various places.

[08:06] <jnthn> It's a little setup work and it won't be fast, but it'll get you back a string type name.

[08:06] *** FROGGS left
[08:07] <hoelzro> that's fine

[08:07] <hoelzro> fast isn't a big deal =)

[08:17] *** baest left
[08:17] *** domidumont left
[08:18] *** domidumont joined
[08:21] *** FROGGS joined
[08:22] <dalek> rakudo/nom: 367963a | (Elizabeth Mattijsen)++ | src/ (20 files):

[08:22] <dalek> rakudo/nom: Sync class attributes comments between BOOTSTRAP and P6 modules for convenience

[08:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/367963aab6

[08:23] *** baest joined
[08:23] *** woosley joined
[08:28] *** Mouq joined
[08:29] <jnthn> morning, lizmat :)

[08:30] <masak> suddenly, commi!

[08:30] <masak> commit*

[08:31] <jnthn> Was gonna say, I didn't spot the communist :P

[08:32] * masak .oO( an Abelian group is a group where all the elements are communists )

[08:32] *** daxim joined
[08:34] <dalek> Perlito: cac6146 | (Flavio S. Glock)++ | / (3 files):

[08:34] <dalek> Perlito: Perlito5 - grammar - number special cases

[08:34] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/cac6146175

[08:36] <daxim> http://news.perlfoundation.org/2013/09/hague-grant-application-accept.html

[08:36] <daxim> congratulations

[08:37] <moritz> \o/

[08:37] <moritz> diakopter++

[08:37] <jnthn> \o/

[08:37] <jnthn> diakopter++

[08:37] <jnthn> And, ++diakopter # need to do the grant now :D

[08:38] <arnsholt> Oh, awesome!

[08:38] <diakopter> heh.

[08:38] <masak> diakopter++ ++diakopter

[08:39] <diakopter> jnthn: fsdo "now"...

[08:41] <dalek> Perlito: 2a9824c | (Flavio S. Glock)++ | / (3 files):

[08:41] <dalek> Perlito: Perlito5 - grammar - number special cases

[08:41] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/2a9824ce71

[08:42] <FROGGS> diakopter++ \o/

[08:45] *** woosley left
[08:46] <tadzik> finally, leopard

[08:46] <tadzik> diakopter++

[08:47] <diakopter> well, seeing as how she said I could start weeks ago... I already have anyway

[08:48] <hoelzro> diakopter++

[08:48] *** sqirrel left
[08:48] * hoelzro just saw the news!

[08:49] <diakopter> .oO( report:  3 hours last Tuesday night solving coding problems in my sleep..; 2 hours daydreaming in $meetings about project )

[08:49] <diakopter> (kidding entirely)

[08:53] <masak> well. been there, done that.

[08:53] <diakopter> meanwhile I need to write slides for http://pghpw.org/ppw2013/schedule

[08:53] <masak> though I tend to daydream about p6cc problems and solutions :)

[08:53] <diakopter> and actually good, interesting ones at that

[08:57] *** dakkar joined
[09:00] *** donaldh joined
[09:03] <donaldh> jnthn: hoelzro: re. debugging names in jvm, I was thinking along same lines. Would like to figure out a way of naming P6Opaques that at least relates them to comp unit.

[09:03] <hoelzro> indeed

[09:03] <hoelzro> that would be a big +

[09:03] <hoelzro> for now, I'll just check for __P6Opaque and convert appropriately

[09:03] <jnthn> Well, apart from I was pondering we could cache those by shape...

[09:03] *** FROGGS_ joined
[09:03] <FROGGS_> bonsaikitten: about the fileops.t fails: <arnsholt> It seems to work for me, on a Red Hat 6 machine. Could you perhaps try blowing away the install/ directory and recompiling everything?

[09:04] <bonsaikitten> FROGGS_: ergh, that sounds quite silly

[09:04] <FROGGS_> bonsaikitten: why?

[09:04] <bonsaikitten> because that was on initial compile

[09:04] <jnthn> I think it belongs on the st...

[09:04] <donaldh> jnthn: oh, true.

[09:04] <bonsaikitten> and manually interfering with the build/test process is nasty

[09:04] <FROGGS_> bonsaikitten: ahh, oaky

[09:05] <donaldh> jnthn: perhaps a build option. The benefit when using std debug and profiling tools would be immense.

[09:05] *** FROGGS left
[09:06] <donaldh> On a related note, top 20 heap dump after parsing CORE.setting: https://gist.github.com/donaldh/6676995

[09:06] *** pmurias joined
[09:07] <donaldh> Suggests the average HashMap fill ratio is about 1.3

[09:07] <pmurias> cxreg: ping

[09:08] <donaldh> I'm guessing that it's quite wasteful for every QASTNode to have a hash. Maybe we can allocate hashes on demand here.

[09:09] <donaldh> Maybe also true for the QASTNode arrays.

[09:09] <diakopter> donaldh: agree++

[09:09] *** FROGGS_ is now known as FROGGS

[09:12] *** darutoko- joined
[09:13] <donaldh> For fun, I implemented VMHash with a TreeMap instead of a HashMap. There was some memory saving, but not substantial. Turns out that TreeMap instances are quite beefy too.

[09:13] *** darutoko left
[09:13] *** woosley joined
[09:13] *** darutoko joined
[09:16] <masak> donaldh: maybe a LinkedList will save both memory and be faster? it's been known to happen.

[09:16] <dalek> Perlito: c55f350 | (Flavio S. Glock)++ | / (4 files):

[09:16] <dalek> Perlito: Perlito5 - grammar - vstring placeholder

[09:16] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/c55f35029f

[09:16] *** darutoko- left
[09:16] <tadzik> faster?

[09:17] <donaldh> masak: performance gain was negligible if any. I would need to run both several times over to get a more accurate measure.

[09:18] <donaldh> And I'm finding I get quite a lot of variation on my poor macbook air.

[09:18] *** darutoko left
[09:20] * donaldh didn't realize that --stagestats had a wait feature. 

[09:23] *** iSlug joined
[09:23] *** darutoko joined
[09:26] <pmurias> draft state of the JavaScript backend gsoc project: http://pastie.org/pastes/8351242/text

[09:29] <masak> pmurias: wow. nice.

[09:29] <masak> pmurias: s/so to/to/

[09:30] <diakopter> pmurias: did you find a js bigint library? there are bunches

[09:30] <masak> pmurias: how feasible is this: page with big textarea -- I type some nqp into it, hit "Run" -- it runs in the browser. my guess is: pretty darn feasible.

[09:31] <masak> pmurias: (my point is, it would be a pretty compelling demo)

[09:31] <diakopter> s/type some/paste many MB of/

[09:31] <masak> an nqptidy sounds like a very fun weekend hackathon.

[09:32] <pmurias> nqptidy is badly needed to enforce a coding standard without doing boring cleanup ;)

[09:32] <pmurias> masak: re textarea demo it shouldn't be very hard

[09:33] *** colomon joined
[09:34] <dalek> Perlito: f624047 | (Flavio S. Glock)++ | t5/01-perlito/420-vstring.t:

[09:34] <dalek> Perlito: Perlito5 - tests - vstring

[09:34] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/f624047796

[09:35] *** domidumont left
[09:36] <jnthn> pmurias++

[09:36] <pmurias> masak: thanks for the suggestion, I'll work on it during today

[09:37] <diakopter> pmurias: did you find a js bigint library? there are bunches

[09:37] <masak> pmurias: I would happily be a devoted early adopter :)

[09:38] <pmurias> diakopter: there seem to be tons of js bigint libraries, I would have to find one with a similiar API (or at least a similiar set of support operations)

[09:39] <pmurias> diakopter: and I haven't really searched for that yet, it will not be required for the web demo

[09:39] <pmurias> food&

[09:39] <diakopter> https://npmjs.org/package/big-integer  # seem ok?

[09:40] <FROGGS> pmurias++

[09:41] <diakopter> pmurias: also this one looks quite hefty https://github.com/jtobey/javascript-bignum

[09:41] <diakopter> (that page also has lots of links to others)

[09:44] *** flussence left
[09:45] *** flussence joined
[09:45] *** jonathanmarvens joined
[09:48] *** jonathanmarvens left
[09:48] *** jonathanmarvens joined
[09:48] *** ksh left
[09:49] *** ksh joined
[09:51] <arnsholt> bonsaikitten: You're the one having trouble with https://github.com/perl6/nqp/issues/133 ?

[09:52] *** denis_boyun joined
[09:52] <bonsaikitten> arnsholt: I am

[09:52] <arnsholt> I couldn't reproduce it on my machine, sadly

[09:52] <arnsholt> Are you building Parrot with --gen-parrot?

[09:54] <bonsaikitten> not explicitly

[09:54] <arnsholt> Huh?

[09:55] <FROGGS> can it be a file system issue?

[09:55] <bonsaikitten> arnsholt: I don't see any explicit reference to --gen-parrot in the script that builds parrot

[09:55] <bonsaikitten> so if it's not enabled by default then no

[09:56] <FROGGS> it would be "perl Configure.pl --gen-parrot" in nqp's folder

[09:56] <arnsholt> So you just "perl Configure.pl && make test"?

[09:56] *** daxim_ joined
[09:56] *** daxim left
[09:56] <bonsaikitten> arnsholt: with a plain make call in between

[09:57] <arnsholt> Right

[09:57] <FROGGS> bonsaikitten: and you are building nqp directly or via rakudo?

[09:57] <bonsaikitten> FROGGS: I can try adding --gen-parrot to nqp build

[09:57] <bonsaikitten> FROGGS: directly

[09:57] <FROGGS> k

[09:57] <bonsaikitten> waaat

[09:58] <bonsaikitten> who made the makefile call "git pull"

[09:58] <arnsholt> Looks like it won't build Parrot without gen-parrot, so I assume you have a system Parrot install?

[09:58] <bonsaikitten> o_O This demands some angry words!

[09:58] <bonsaikitten> arnsholt: yes

[09:58] <FROGGS> if you can configure nqp without --gen-parrot, it means it finds a parrot in path (or it uses the one you provided with --with-parrot in an earlier configure run)

[09:58] <arnsholt> Not the Makefile, but gen-parrot clones the Parrot repo and builds it. Done that since forever

[09:59] <arnsholt> It's not a bug, it's a feature. Thought you knew about it =)

[09:59] <bonsaikitten> ah, --gen-parrot is pure evil and must be ignored

[09:59] <bonsaikitten> Thou Shalt Not Ignore The Package Manager!

[10:01] <arnsholt> Works for most of us =)

[10:02] <FROGGS> git is my package manager :P

[10:02] <arnsholt> Given that we're mostly on non-rolling release systems, it's a lot simpler

[10:03] <bonsaikitten> yeah, I'm too lazy for that :D

[10:04] <FROGGS> bonsaikitten: what filesystem is that?

[10:05] <bonsaikitten> FROGGS: XFS

[10:05] *** sqirrel joined
[10:05] * bonsaikitten *poof* for a few minutes

[10:06] *** iSlug left
[10:15] *** dayangkun joined
[10:16] <FROGGS> has somebody else here an XFS volume?

[10:16] <FROGGS> I can't reproduce it either

[10:16] <FROGGS> :o(

[10:29] <nwc10> pmurias: really really cool

[10:29] <nwc10> small grammar nit - "nqp concatenates it's files" - *that* it's should be its

[10:29] <nwc10> (the later "it's" is correct, as the later one is short for "it is")

[10:30] <nwc10> so, is JS going to self-host and run Rakudo before MoarVM? :-)

[10:30] <jnthn> The race is on!

[10:33] *** brrt left
[10:34] *** zakharyas joined
[10:34] <FROGGS> hehe

[10:34] <FROGGS> jnthn: you are therefor not allowed to give pmurias++ any hints! ò.ó

[10:35] <tadzik> haha, what a face

[10:35] <tadzik> like （　｀ー´）

[10:35] <FROGGS> that looks like a fat pidgeon

[10:43] *** iSlug joined
[10:45] <dalek> Perlito/replito: cac6146 | (Flavio S. Glock)++ | / (3 files):

[10:45] <dalek> Perlito/replito: Perlito5 - grammar - number special cases

[10:45] <dalek> Perlito/replito: review: https://github.com/fglock/Perlito/commit/cac6146175

[10:45] <dalek> Perlito/replito: 2a9824c | (Flavio S. Glock)++ | / (3 files):

[10:45] <dalek> Perlito/replito: Perlito5 - grammar - number special cases

[10:45] <dalek> Perlito/replito: review: https://github.com/fglock/Perlito/commit/2a9824ce71

[10:45] <dalek> Perlito/replito: c55f350 | (Flavio S. Glock)++ | / (4 files):

[10:45] <dalek> Perlito/replito: Perlito5 - grammar - vstring placeholder

[10:45] <dalek> Perlito/replito: review: https://github.com/fglock/Perlito/commit/c55f35029f

[10:45] <dalek> Perlito/replito: f624047 | (Flavio S. Glock)++ | t5/01-perlito/420-vstring.t:

[10:45] <dalek> Perlito/replito: Perlito5 - tests - vstring

[10:45] <dalek> Perlito/replito: review: https://github.com/fglock/Perlito/commit/f624047796

[10:45] <dalek> Perlito/replito: ac9f6e1 | (Stanislaw Pusep)++ | / (5 files):

[10:45] <dalek> Perlito/replito: Merge branch 'master' into replito

[10:45] <dalek> Perlito/replito: review: https://github.com/fglock/Perlito/commit/ac9f6e16b1

[10:53] *** pernatiy left
[10:56] *** sqirrel left
[11:01] *** iSlug left
[11:02] *** iSlug joined
[11:02] *** [Sno] joined
[11:04] <dalek> Perlito: 3857c53 | (Flavio S. Glock)++ | / (4 files):

[11:04] <dalek> Perlito: Perlito5 - grammar - vstring parser

[11:04] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/3857c530e1

[11:05] <lizmat> r: class A { method foo { say "in foo"} }; my $r = A.can("foo")[0]; $r.add_phaser("ENTER", { say "bye" }); .perl.say for $r.phasers("ENTER"); A.new.foo  # why doesn't the ENTER phaser not fire

[11:06] <camelia> rakudo 367963: OUTPUT«Block.new()␤in foo␤»

[11:06] <lizmat> s/not//

[11:06] <lizmat> jnthn: apparently the phaser *is* added to the list of phasers for that method, but it isn't called

[11:07] <lizmat> ah, it needs to have a phaser of that type to begin with

[11:08] <lizmat> r: class A { method foo { ENTER {}; say "in foo"} }; my $r = A.can("foo")[0]; $r.add_phaser("ENTER", { say "hello" }); .perl.say for $r.phasers("ENTER"); A.new.foo

[11:08] <camelia> rakudo 367963: OUTPUT«Block.new()␤Block.new()␤hello␤in foo␤»

[11:09] <lizmat> hmmm… nothing in the ast that points to any additional actions being done

[11:12] <bonsaikitten> FROGGS: it might be related to any of gcc-4.8, glibc-2.17, perl-5.18.1 ... subtle changes can often cause "unrelated" failures

[11:14] *** [Sno] left
[11:15] <FROGGS> bonsaikitten: true

[11:16] * bonsaikitten is currently triaging build failures with bison-3 

[11:16] <jnthn> lizmat: It needs to be added during the compilation of the method.

[11:16] <bonsaikitten> it's quite amusing how fragile things are :(

[11:17] <jnthn> lizmat: That is, by code object "compose" times

[11:17] <jnthn> lizmat: That's why a trait can do it just fine.

[11:17] <lizmat> except nothing is there yet to do it at that point in the core setting

[11:17] <jnthn> lizmat: Reason being that at that point, it looks at what traits we have, and augments the QAST tree for the method to do calls as needed.

[11:18] <lizmat> yes, I get that now… 

[11:18] <lizmat> oddly enough, if there is an X phaser already, you *can* add more phasers at runtime

[11:18] <jnthn> Yes :)

[11:18] <lizmat> more X phasers, that is

[11:18] <jnthn> 'cus the QAST just iterates the list of ENTER phasers

[11:19] <lizmat> indeed

[11:20] <moritz> cross phaser!

[11:26] <lizmat> jnthn: was thinking that maybe it would be useful to have a Phaser is Block object, that would have a $!once attribute

[11:26] <lizmat> so that after execution the first time, it would be thrown out of the list of phasers

[11:26] <jnthn> But once is once per closure

[11:27] <lizmat> or is there a better way to inject a once {} block into a sub with is DEPRECATED trait ?

[11:27] <jnthn> Well, we could just fix add_phaser to not depend on stuff we didn't define yet... :)

[11:28] <lizmat> looking at that, actually

[11:28] <lizmat> so,seems once blocks already work early in the setting

[11:28] <lizmat> so, all "is DEPRECATED" traits in the setting, would become once blocks

[11:28] <lizmat> (and not have the trait formally added)

[11:29] *** zakharyas left
[11:29] <lizmat> the trait would add an ENTER phaser with a once block

[11:29] <lizmat> preferably a ONCE block, as it were

[11:29] <lizmat> except that once {} is no longer a phaser

[11:31] <FROGGS> moritz: DONT CROSS THE BEAMS!!11

[11:31] <dalek> Perlito: 48ef9a7 | (Flavio S. Glock)++ | / (3 files):

[11:31] <dalek> Perlito: Perlito5 - grammar - vstring/bareword disambiguation

[11:31] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/48ef9a7208

[11:32] <lizmat> .oO( a X phaser would execute ENTER and LEAVE at the same time, thereby executing any code in the  block in constant time )

[11:32] <lizmat> or no time ?

[11:35] <lizmat> something like:

[11:35] <lizmat> $ perl6 -e 'say "abc".ucfirst; say "def".ucfirst'

[11:35] <lizmat> 'ucfirst has been deprecated, please use 'tc' instead  in block  at -e:1

[11:35] <lizmat> Abc

[11:35] <lizmat> Def

[11:37] <dalek> Perlito: 880ba6e | (Flavio S. Glock)++ | TODO-perlito5:

[11:37] <dalek> Perlito: Perlito5 - TODO update

[11:37] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/880ba6e5c9

[11:39] <dalek> rakudo/nom: 36343bc | (Elizabeth Mattijsen)++ | src/core/Str.pm:

[11:39] <dalek> rakudo/nom: We shouldn't be using deprecated methods in the settings ourselves

[11:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/36343bc071

[11:44] *** ssutch left
[11:53] *** pernatiy joined
[11:56] *** ssutch joined
[11:56] *** fhelmberger_ joined
[11:58] *** fhelmberger_ left
[11:59] <dalek> Perlito: ad9e15f | (Flavio S. Glock)++ | / (3 files):

[11:59] <dalek> Perlito: Perlito5 - js - object stringification

[11:59] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/ad9e15f234

[11:59] *** fhelmberger left
[12:01] *** darutoko left
[12:06] *** sqirrel joined
[12:10] *** denis_boyun left
[12:11] *** denis_boyun joined
[12:15] <dalek> Perlito: add49ad | (Flavio S. Glock)++ | / (3 files):

[12:15] <dalek> Perlito: Perlito5 - js - object stringification

[12:15] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/add49ad6ab

[12:20] <moritz> is anybody working on star-on-jvm?

[12:21] <jnthn> donahldh++ has done work on Panda towards that, and I believe arnsholt is working on Zavolaj, but not aware anybody is doing the stuff needed in the star repo...

[12:21] <jnthn> I plan to give some tuits towards triaging spectests that fail on JVM in the coming days.

[12:23] <lizmat> jnthn: the star release mentions "postcircumfix:<[ ]> and postcircumfix:<{ }> will become multi-subs rather than multi-methods. Both at_pos and at_key will remain methods."

[12:23] <lizmat> so I guess we cannot use all capitals for at_key/at_pos

[12:23] <moritz> I'll see how the modules-test for a potential star 2013.09 look

[12:24] <jnthn> moritz++

[12:24] <moritz> lizmat: we can change the deprecation notice for the 2013.09 star release

[12:24] <lizmat> also: for 2013.09, we might want to mention that that change is going to be happening for the 2013.10 release

[12:24] <lizmat> moritz: indeed  :-)

[12:25] <lizmat> also, for the star release, maybe menttion that Sets/Bags and the like are now completely up to spec with exception of the empty set symbol

[12:25] <moritz> lizmat: I think it's easiest if you mention that yourself :-)

[12:28] *** Teratogen joined
[12:28] <Teratogen> I am watching Windy by The Association music video on youtube and I swear Larry Wall is in the band!

[12:28] <moritz> lizmat: I've given you a rakudo/star commit bit

[12:29] <moritz> anyone else need one?

[12:30] *** ajr joined
[12:30] *** ajr is now known as Guest9681

[12:36] *** Guest9681 is now known as ajr_

[12:36] *** jnap joined
[12:37] <dalek> star: 0e02471 | (Elizabeth Mattijsen)++ | docs/announce/2013.09.md:

[12:37] <dalek> star: Preliminary work on Rakudo Star 2013.09 announcement

[12:37] <dalek> star: review: https://github.com/rakudo/star/commit/0e02471de9

[12:37] <moritz> lizmat++

[12:37] <lizmat> moritz: handing it back to you again :-)

[12:38] <dalek> star: 50bb81d | moritz++ | / (9 files):

[12:38] <dalek> star: bump version in preparation of 2013.09

[12:38] <dalek> star: review: https://github.com/rakudo/star/commit/50bb81d165

[12:40] <moritz> if anybody wants to help with the R* release: go through the modules, search for .bless(*, and remove the *,

[12:41] <masak> idea for a module: ack through the source files of the entire ecosystem with a single command.

[12:42] *** dmol joined
[12:43] <dalek> doc: b3c7bd2 | moritz++ | lib/ (3 files):

[12:43] <dalek> doc: remove * from bless

[12:43] <dalek> doc: review: https://github.com/perl6/doc/commit/b3c7bd2fe4

[12:43] <masak> I don't have time to do it myself, but I would happily award an Amazon book (60 USD/45 EUR) to whoever does.

[12:43] *** colomon left
[12:43] <tadzik> hmmmm

[12:43] <masak> the module needs to meet my standards of code and tests for the prize to be handed out.

[12:43] *** colomon joined
[12:44] <masak> if you're unsure what those standards are, ask. :)

[12:44] <tadzik> I'll let someone do it, I already got one book from you :)

[12:44] <jnthn> Book? Meh. Now if it was beer... :P

[12:45] <masak> jnthn gets a special expemtion clause of getting to claim 400 SEK worth of beer as a prize.

[12:45] <moritz> use of uninitialized value of type Nil in numeric context  in method serialize at /home/mlenz/p6/star/install/lib/parrot/5.5.0/languages/perl6/lib/XML/Writer.pm:9

[12:45] <masak> (the expemption clause is jnthn-specific. everyone else gets a book.)

[12:46] <moritz> URI has several of the .bless(*,) cases

[12:46] *** donaldh left
[12:46] *** revdiablo left
[12:46] *** tokuhirom left
[12:46] *** JimmyZ left
[12:46] *** masak left
[12:46] *** bloonix left
[12:46] *** takesako left
[12:46] *** jnthn left
[12:46] *** moritz left
[12:46] *** c1sung left
[12:46] *** moritz joined
[12:46] *** jnthn joined
[12:46] *** JimmyZ joined
[12:46] *** bloonix joined
[12:46] *** revdiablo joined
[12:46] *** revdiablo left
[12:46] *** revdiablo joined
[12:46] *** takesako joined
[12:46] *** tokuhirom joined
[12:47] *** masak joined
[12:47] <masak> ouch. :/

[12:47] <jnthn> netsplit?

[12:47] <masak> I've been having lags on feather in the past few days.

[12:47] <masak> is feather having trouble in some way?

[12:47] *** [Sno] joined
[12:47] *** dmol left
[12:47] <jnthn> masak: I just got reconnected to...

[12:47] <tadzik> I didn't experience anything

[12:47] <jnthn> And I'm not on feather

[12:47] <jnthn> *too

[12:48] <moritz> fwiw URI.pm seems cause the most of the .bless warnings in the star modules-test

[12:48] <moritz> *seems to

[12:48] <lizmat> fwiw, I see many people from other places go and come back

[12:48] <moritz> X::JSON::RPC has a few too

[12:49] *** jonathanmarvens left
[12:50] *** donaldh joined
[12:51] <dalek> star: a551b8f | moritz++ | modules/ (2 files):

[12:51] <dalek> star: update modules

[12:51] <dalek> star: review: https://github.com/rakudo/star/commit/a551b8fb46

[12:52] *** c1sung joined
[12:53] *** jonathanmarvens joined
[12:57] *** darutoko joined
[12:57] *** skids left
[12:58] <dalek> ecosystem: 6626554 | moritz++ | META.list:

[12:58] <dalek> ecosystem: uri by colomon++ seems more maintained than the one by ihrd

[12:58] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/66265540d6

[12:58] * colomon doesn't even really remember having a uri fork....

[12:59] <moritz> colomon: now if you give me commit access to the uri fork you don't remember having, I can remove the .bless(*) warnings

[12:59] <moritz> :-)

[12:59] <tadzik> MOAR FOARKS

[13:01] <hoelzro> "Declaration from most-derived grammar beats less-derived" <- I take it that this deals with inheritance chains of grammars?

[13:01] <hoelzro> or am I missing something?

[13:01] <colomon> moritz: you've got a commitbit

[13:01] <moritz> hoelzro: it does

[13:01] <hoelzro> ok, cool

[13:01] <jnthn> Is that in the context of LTM tie-breaks?

[13:02] * jnthn knows we don't do all of them, but things we do do that one.

[13:02] <hoelzro> jnthn: this is from S05, establishing the "pecking order"

[13:02] <hoelzro> #5 is "Declaration with least number of 'uses' wins"

[13:02] <hoelzro> and I'm not too clear on its meaning

[13:03] <jnthn> Me either when you consider separate compilation :)

[13:03] <hoelzro> ah, the following line...kinda clears it up.

[13:03] <hoelzro> a little.

[13:06] *** donaldh left
[13:08] *** benabik joined
[13:09] <dalek> star: d149f5d | moritz++ | modules/uri:

[13:09] <dalek> star: update module URI

[13:09] <dalek> star: review: https://github.com/rakudo/star/commit/d149f5deff

[13:10] <colomon> moritz++

[13:11] <dalek> Heuristic branch merge: pushed 23 commits to rakudo-star-daily by coke

[13:12] <[Coke]> .to lizmat that commit is in the range I am bisecting, yes.

[13:12] <yoleaux> 07:34Z <lizmat> [Coke]: the method2sub branch started using .can in SLICE_MORE in Any.pm, maybe .can is borked on jakudo ?

[13:12] <yoleaux> [Coke]: I'll pass your message to lizmat.

[13:13] *** PacoAir joined
[13:14] <[Coke]> .to diakopter Congrats!

[13:14] <yoleaux> [Coke]: I'll pass your message to diakopter.

[13:18] <dalek> rakudo/nom: f4a21d6 | (Elizabeth Mattijsen)++ | src/core/ (4 files):

[13:18] <dalek> rakudo/nom: Proof of concept for is DEPRECATED handling, in settings and outside of it

[13:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f4a21d60cc

[13:18] <lizmat> afk for the rest of the day&

[13:18] <yoleaux> 13:12Z <[Coke]> lizmat: that commit is in the range I am bisecting, yes.

[13:19] * [Coke] botches the bisect and starts over. arglebargle.

[13:19] <moritz> [Coke]: I've done that a good many times too

[13:19] <lizmat> [Coke]: please check of .can works on jakudo

[13:20] <lizmat> method2sub branch uses that for <a b c> slices

[13:20] <lizmat> if that doesn't work, all slices are borked

[13:20] <lizmat> really afk now&

[13:20] * jnthn notes to himself to look at that code, since .can is almost certainly not the most efficient way to write it...

[13:22] <corecatcher> Do we have a need for mirroring stuff? my employee update his mirror hardware and has lots of space over (already mirroring cpan)

[13:23] <[Coke]> jnthn: are you back from vacation already?

[13:23] <jnthn> [Coke]: Yeah, was just a long weekend break :)

[13:23] <moritz> corecatcher: interesting question

[13:23] <moritz> pmichaud: do you think we need a mirror for rakudo.org/downloads/ ? corecatcher offers some

[13:23] <[Coke]> jnthn: ah, welcome back.

[13:23] *** sqirrel left
[13:24] * jnthn had his laptop fail while on vacation, which made it even more of one

[13:24] <tadzik> win-win

[13:24] *** lowpro30 joined
[13:24] <tadzik> well, sort-of

[13:24] <jnthn> An the even-more-win is that the replacement laptop is already ordered. \o/

[13:24] *** jonathanmarvens left
[13:25] <jnthn> With a nice i7 processor, SSD, and 16 gigs of RAM. That should make me more productive at confs/hackathons. :)

[13:25] <tadzik> 530?

[13:26] <FROGGS> jnthn: but you still have to care about performance then, because not everyone has such a nice hardware :o)

[13:26] <jnthn> T430s

[13:26] * FROGGS has an i5, SSD and only 6gig ram

[13:26] <FROGGS> err, 8gig

[13:26] <jnthn> Should be lighter too

[13:26] <tadzik> heh, same on my 430

[13:26] <jnthn> (lighter than my current one)

[13:26] *** jonathanmarvens joined
[13:27] * JimmyZ has only 2gigs

[13:27] <tadzik> it's like 2.4 kg or so

[13:27] <FROGGS> poor JimmyZ 

[13:27] <JimmyZ> :(

[13:27] <tadzik> I was thinking about this cdrom battery, but it's crazy expensive, at least here in PL

[13:27] <jnthn> yeah, I didn't go for that...

[13:27] <FROGGS> why do you guys have Lenovos? DELL is soo awesome

[13:28] *** iSlug left
[13:28] <JimmyZ> my one was old X200T

[13:28] <tadzik> s stands for slimmer?

[13:28] <tadzik> FROGGS: clitmouse. Case closed

[13:28] <jnthn> Yeah :)

[13:28] <tadzik> err, I mean nipp^Wtrackpoint

[13:28] <FROGGS> "clit"-mouse?

[13:28] <tadzik> I'm sorry

[13:28] <FROGGS> what the

[13:28] <tadzik> but look at it

[13:28] <jnthn> wtf... :)

[13:29] *** PacoAir left
[13:29] * jnthn hopes the keyboard is still good on thinkpads...

[13:29] <tadzik> it is

[13:29] <FROGGS> tadzik: you mean that red nipple? http://www.notebookcheck.com/uploads/tx_nbc2/lenoT430_3.jpg

[13:29] <tadzik> it looks different, but works exactly the same

[13:29] <jnthn> ah, good

[13:29] <tadzik> well, the key placement is different

[13:30] <tadzik> you don't have this 'block' on top, but pgup and pgdown is next to the arrow keys

[13:30] <tadzik> I find that a lot more convenient

[13:30] *** PacoAir joined
[13:30] <tadzik> FROGGS: yep

[13:30] <FROGGS> well, I hate these trackpoints anyway... and I prefer a full keyboard

[13:30] <JimmyZ> how much is T430s?

[13:31] *** lowpro30 left
[13:31] <tadzik> I wonder how much slimmer s is

[13:31] <FROGGS> tadzik: this is how it has to look like: http://www.notebookcheck.com/uploads/tx_nbc2/dellE6530_2.jpg

[13:31] <FROGGS> :o)

[13:31] <tadzik> seems to be 1.02" vs 1.18"

[13:32] *** lowpro30 joined
[13:32] <tadzik> FROGGS: the only reason to have a numpad, for me, is playing THPS games :)

[13:32] <FROGGS> hmmm, I really tend to type numbers there

[13:32] <FROGGS> and I dont play games

[13:33] <tadzik> I actually got a ThinkPad USB keyboard for $work

[13:33] <tadzik> it also has no numpad

[13:33] <JimmyZ> T430s is about $2450 in china

[13:33] <FROGGS> ohh wow

[13:33] <hoelzro> " @substrings = slice @()" # umm...what's @()?

[13:33] *** pmurias left
[13:33] <FROGGS> r: say @().perl

[13:33] <camelia> rakudo 36343b: OUTPUT«().list␤»

[13:33] <tadzik> some say I need a small keyboard so I have enough space for all the rubbish I keep on my desk

[13:34] <hoelzro> FROGGS: but what *is* it?

[13:34] <hoelzro> I see it on S05

[13:34] <hoelzro> *in

[13:35] <colomon> r: say (@()).perl

[13:36] <camelia> rakudo 36343b: OUTPUT«().list␤»

[13:36] <FROGGS> I don't know what it is called but AFAIK it just calls .list on the things inside of it

[13:36] <hoelzro> right, that much I knew =)

[13:36] <hoelzro> but since there's nothing in between @( and )...

[13:36] <jnthn> I think @() itself does it to $/ though

[13:36] <hoelzro> oooooh

[13:36] <hoelzro> ok, that makes sense

[13:37] <FROGGS> r: $/ = 42; say @().perl

[13:37] <camelia> rakudo 36343b: OUTPUT«().list␤»

[13:37] <FROGGS> r: $/ = 42; say $().perl

[13:37] <camelia> rakudo 36343b: OUTPUT«No such method 'ast' for invocant of type 'Int'␤  in block  at /tmp/lQymOniDLD:1␤␤»

[13:37] <hoelzro> r: ($/) = 42; say @().perl;

[13:37] <camelia> rakudo 36343b: OUTPUT«().list␤»

[13:37] <hoelzro> ...

[13:38] <FROGGS> $() is a shortcut for $/.ast, which gives you the thing you explicitly made within the last regex match

[13:38] <FROGGS> but I don't think that @() or %() do the same, I believe $() is the only one that does that

[13:39] <jnthn> Oh...

[13:39] <FROGGS> (because I made it to do that)

[13:39] <jnthn> No, S05 wants @() to be the positional matches

[13:40] <jnthn> "Note that, as a scalar variable, $/ doesn't automatically flatten in list context. Use @() as a shorthand for @($/) to flatten the positional captures under list context."

[13:40] <FROGGS> r: "ab" ~~ /(.)(.)/; say @().perl

[13:40] <camelia> rakudo 36343b: OUTPUT«().list␤»

[13:40] <jnthn> So if it don't do it today, we should make it do so

[13:40] <FROGGS> which is LHF

[13:40] <jnthn> aye

[13:40] <jnthn> pick it!

[13:40] *** FROGGS[mobile] joined
[13:41] <FROGGS> I will if hoelzro doesn't want to

[13:41] <FROGGS> see ya in a minute

[13:41] *** FROGGS left
[13:45] <hoelzro> what don't I want to?

[13:46] <hoelzro> FROGGS can undoubtedly finish it faster than I =)

[13:48] *** xenoterracide joined
[13:58] *** FROGGS joined
[14:00] *** kaleem left
[14:02] <FROGGS> hoelzro: it is not just about speed, it is about learning too :o)

[14:02] <hoelzro> point taken =)

[14:03] <hoelzro> I have a few things I'm hoping to fix

[14:03] <jnthn> .oO( me too )) )

[14:03] <FROGGS> k, then I'll do this one

[14:03] <hoelzro> but I'm working on improving p6 docs atm

[14:03] <FROGGS> awesome!

[14:03] <jnthn> \o/

[14:03] <hoelzro> getting it to complete without crashing my machine has been fun =/

[14:04] <FROGGS> jnthn: btw, my birthday is in a few weeks, and nqp@moarvm bootstrapping would be an appropriate gift *g*

[14:04] <FROGGS> (but no pressure :P)

[14:04] <hoelzro> mine too, actually =)

[14:05] <hoelzro> you can double gift

[14:05] <hoelzro> we don't mind ;)

[14:05] <FROGGS> *g*

[14:05] <FROGGS> awesome!!

[14:05] <jnthn> Well, I've no teaching until October, so... :)

[14:06] <hoelzro> \o/

[14:10] *** jonathanmarvens left
[14:11] *** btyler joined
[14:11] *** logie joined
[14:13] <FROGGS> \o/

[14:14] <hoelzro> FROGGS: out of curiosity, when's your birthday?

[14:14] *** GlitchMr joined
[14:17] *** bluescreen10 joined
[14:18] *** raiph joined
[14:19] <PerlJam> hoelzro: when's yours? :)  (I'm Oct 28)

[14:19] <hoelzro> Oct 8

[14:19] <PerlJam> (btw, Oct 28 is also Bill Gates' birthday)

[14:20] <colomon> Oct 6

[14:20] <hoelzro> damn, I just have Matt Damon =/

[14:20] <hoelzro> lots of Oct birthdays here it seems

[14:21] <FROGGS> oct 16

[14:21] <timotimo> i have albert einstein

[14:21] <JimmyZ> Oct 15 :P

[14:21] <jnthn> Wow... :)

[14:21] <JimmyZ> but mine is lunar calendar

[14:22] <PerlJam> We should start an October.pm so that a future Rakudo release can use it ;)

[14:22] <FROGGS> *g*

[14:28] <colomon> http://www.takipiblog.com/2013/09/24/how-to-write-your-own-java-scala-debugger/ # may be interesting for us?

[14:29] *** ajr_ left
[14:29] <hoelzro> I saw that!

[14:29] *** skids joined
[14:29] <hoelzro> I was thinking about that during my weekend hacking on TIJMP

[14:29] *** ajr joined
[14:30] *** ajr is now known as ajr_

[14:32] <jnthn> TIJMP?

[14:32] *** jonathanmarvens joined
[14:32] <jnthn> ah, found it

[14:32] <hoelzro> I used it on Perl 6 over the weekend

[14:32] <hoelzro> I added an "Export to CSV" button

[14:33] <hoelzro> and started on translating __P6Opaque to Perl 6 class names

[14:33] <hoelzro> I've been thumbing through last weekend's course notes a lot =)

[14:41] *** Teratogen left
[14:43] *** bluescreen10 left
[14:45] *** bluescreen10 joined
[14:51] <arnsholt> PerlJam: That's a pretty good birthday. Mine is the 29th =)

[14:54] *** spider-mario joined
[14:54] <PerlJam> arnsholt: you're just reinforcing the idea of an October.pm  ;)

[14:56] <tadzik> Fest.pm

[15:00] <sjn> Beer.pm

[15:01] <sjn> No need to limit consumption to one month of the year

[15:01] <arnsholt> I think jnthn wouldn't mind a Beer.pm

[15:01] <[Coke]> as part of August.pm, I support this trend.

[15:01] * sjn certainly wouldn't

[15:01] <sjn> arnsholt: btw, you planning on dropping by Oslo.pm next week?

[15:01] <jnthn> Beer.pm \o/

[15:03] <tadzik> heh, I just thought about Python.pm, a support group

[15:03] <sjn> hehehehe

[15:03] <sjn> Ruby.pm

[15:03] <tadzik> we could gather, drink, cry, sob and pat each other on our backs

[15:03] <tadzik> us, sad refugees

[15:03] <sjn> INTERCAL.pm

[15:03] <[Coke]> oooh. Can I be ColdFusion.pm ?

[15:04] <tadzik> can I be Iron Man? :)

[15:05] * PerlJam notes the appropriate singularity in Coke's sentence  ;)

[15:05] <[Coke]> bite me, professor.

[15:05] <[Coke]> . o O (the truth hoits)

[15:05] <FROGGS> Lol.pm

[15:06] <FROGGS> and ProjectEuler.pm perhaps?

[15:07] <tadzik> NO LOL

[15:07] <tadzik> NoLol.pm

[15:08] *** lowpro30 left
[15:09] *** benabik left
[15:10] <FROGGS> r: "abcdef" ~~ /(.(.))(.)/; say @($/) # jnthn, is that what we want?

[15:10] <camelia> rakudo f4a21d: OUTPUT«｢ab｣␤ 0 => ｢b｣␤ ｢c｣␤␤»

[15:11] <jnthn> FROGGS: Yes.

[15:11] <jnthn> r: "abcdef" ~~ m:P5/(.(.))(.)/; say @($/) # vive le difference

[15:11] <camelia> rakudo f4a21d: OUTPUT«｢ab｣␤ ｢b｣␤ ｢c｣␤␤»

[15:11] *** spider-mario left
[15:12] <FROGGS> r: "abcdef" ~~ /(.(.))(.)/; say $/

[15:12] <camelia> rakudo f4a21d: OUTPUT«｢abc｣␤ 0 => ｢ab｣␤  0 => ｢b｣␤ 1 => ｢c｣␤␤»

[15:13] <FROGGS> hmmm, I think I understand

[15:13] <FROGGS> r: "abcdef" ~~ /(.(.))(.)/; say @($/).perl

[15:13] <camelia> rakudo f4a21d: OUTPUT«(Match.new(orig => "abcdef", from => 0, to => 2, ast => Any, list => (Match.new(orig => "abcdef", from => 1, to => 2, ast => Any, list => ().list, hash => EnumMap.new()),).list, hash => EnumMap.new()), Match.new(orig => "abcdef", from => 2, to => 3, ast => Any,…»

[15:14] <jnthn> Match objects nest in Perl 6

[15:14] <jnthn> Which is why we get match trees

[15:14] <FROGGS> yes, that is not the point

[15:14] <jnthn> ok, what is the point? :)

[15:14] <FROGGS> r: "abcdef" ~~ /(.(.))(.)/; say @($/) # I find the "0 => " irritating

[15:14] <camelia> rakudo f4a21d: OUTPUT«｢ab｣␤ 0 => ｢b｣␤ ｢c｣␤␤»

[15:15] *** spider-mario joined
[15:15] <jnthn> That's how match objects gist

[15:15] <FROGGS> r: "abcdef" ~~ /(.(.))(.)/; say @($/).elems

[15:15] <camelia> rakudo f4a21d: OUTPUT«2␤»

[15:15] <FROGGS> ahh

[15:15] <FROGGS> okay

[15:15] <jnthn> The 0 => ... comes from the inner (.) of the first match

[15:16] <FROGGS> right

[15:17] *** jonathanmarvens left
[15:18] *** iSlug joined
[15:18] *** silug_ left
[15:20] <FROGGS> n: "abcdef" ~~ /(.(.))(.)/; say @()

[15:20] <camelia> niecza v24-95-ga6d4c5f: OUTPUT«｢ab｣␤ 0 => ｢b｣␤ ｢c｣␤␤»

[15:20] <FROGGS> cool

[15:20] <FROGGS> niecza++

[15:21] *** denis_boyun left
[15:22] <jnthn> FROGGS: Do %() while you're at it, btw ;-)

[15:22] <FROGGS> jnthn: sure

[15:23] <jnthn> FROGGS++

[15:24] <FROGGS> nr: say "abracadabra" ~~ m:overlap/ a (.*) a /

[15:24] <camelia> rakudo f4a21d: OUTPUT«False␤»

[15:24] <camelia> ..niecza v24-95-ga6d4c5f: OUTPUT«===SORRY!===␤␤Regex modifier overlap not yet implemented at /tmp/uYgcVluC8P line 1:␤------> say "abracadabra" ~~ m:overlap⏏/ a (.*) a /␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.sett…»

[15:25] <jnthn> r: "abracadabra" ~~ m:overlap/ a (.*) a /; say $/

[15:25] <camelia> rakudo f4a21d: OUTPUT«｢abra｣␤ 0 => ｢br｣␤␤»

[15:25] <jnthn> r: .say for "abracadabra".match(/ a (.*) a /, :overlap)

[15:25] <camelia> rakudo f4a21d: OUTPUT«｢abracadabra｣␤ 0 => ｢bracadabr｣␤␤｢acadabra｣␤ 0 => ｢cadabr｣␤␤｢adabra｣␤ 0 => ｢dabr｣␤␤｢abra｣␤ 0 => ｢br｣␤␤»

[15:26] <FROGGS> why is it falseish?

[15:27] <jnthn> I'm not sure

[15:27] <jnthn> m:overlap/.../ matches immediately though

[15:27] *** lowpro30 joined
[15:28] <jnthn> "foo" ~~ m/.../ normally works out becuase Match.ACCEPTS(...) returns self.

[15:28] <jnthn> And because "foo" is put into $_ before the m/.../ runs

[15:28] <jnthn> r: "abracadabra".match(/ a (.*) a /, :overlap).WHAT.say

[15:28] <camelia> rakudo f4a21d: OUTPUT«(List)␤»

[15:28] <jnthn> But that gives a List.

[15:29] <TimToady> spec says that should fake up a Match object to indicate success

[15:30] <jnthn> OK

[15:30] *** donaldh joined
[15:30] <jnthn> Should we find the exhaustives lazily?

[15:30] <jnthn> 'cus at the moment Match is (for performance) designed to have a reified thingy there, I think...

[15:31] *** silug_ joined
[15:31] <colomon> lazy++

[15:32] <jnthn> Though maybe we just sneak a lazy list into the first slot of that and hope normal flattening semantics take care of it... :P

[15:32] *** rindolf joined
[15:34] *** FROGGS[mobile] left
[15:35] <donaldh> On the subject of optimisation on JVM, lazy creation of VMHash storage maybe gives a ~5 % performance improvement. Not got enough measurements to be conclusive tho.

[15:37] <jnthn> That sounds worthwhile. We may also want to look at doing something special for very small hashes (which most of them probably are)

[15:38] <jnthn> Like, up to 4 elements is just a key/value list that we search through.

[15:38] <donaldh> Yeah, I was thinking along those lines too.

[15:39] <jnthn> We can make it a single allocation by just doing an 8 element Object[] even.

[15:39] <arnsholt> Probably a good idea. I read an interesting blog post once about how the core list and map classes on OS X have varying asymptotic behaviour, depending on the number of elements

[15:39] *** jonathanmarvens joined
[15:39] <arnsholt> Since the classes use the appropriate data structure variants behind the scenes

[15:40] <jnthn> Don't even need a count if we use null as a sentinel.

[15:40] *** kbaker_ joined
[15:42] *** btyler_ joined
[15:43] <TimToady> though then you can't use null to indicate deletion

[15:44] <TimToady> probably okay to just pull the rest down one

[15:44] <jnthn> yeah, true

[15:44] *** btyler left
[15:45] <jnthn> delete is comparatively rare.

[15:46] <TimToady> that's what I thought, but neglected to say :)

[15:49] *** perlo66 joined
[15:50] *** perlo66 left
[15:51] *** rhr joined
[15:51] <diakopter> can just use some other sentinel for deleted

[15:58] *** lowpro30 left
[16:05] <FROGGS> either my machine has serious problems or or nqp/rakudo is in trouble

[16:05] <FROGGS> Stage parse      : 386.691

[16:05] *** daxim_ left
[16:05] <FROGGS> it usually takes 150s these days

[16:06] <jnthn> o.O

[16:06] <jnthn> FROGGS: Which backend, ooc?

[16:06] <FROGGS> parrot

[16:07] *** gtodd1 joined
[16:07] <FROGGS> I can't imagine that this is due to my @() changes...

[16:08] *** gtodd left
[16:10] <diakopter> I can

[16:16] *** risou_awy is now known as risou

[16:16] *** lowpro30 joined
[16:19] *** zby_home joined
[16:19] *** zby_home left
[16:19] *** djanatyn left
[16:23] *** Tene left
[16:25] *** djanatyn joined
[16:25] *** iSlug left
[16:26] *** Tene joined
[16:31] *** ajr_ left
[16:31] *** dylanwh left
[16:32] *** dylanwh joined
[16:32] *** geekosaur left
[16:32] *** ajr joined
[16:32] *** ajr is now known as Guest20152

[16:33] *** Guest20152 is now known as ajr_

[16:33] *** jonathanmarvens left
[16:33] *** donaldh left
[16:35] <jnthn> FROGGS: JVM build time doesn't look out of the ordinary, fwiw. A little longer than I remember it, but only a few seconds.

[16:36] *** bluescreen10 left
[16:37] *** geekosaur joined
[16:39] *** bluescreen10 joined
[16:47] <FROGGS> jnthn: now both repo's are clean from any local changes, and it still takes ages...

[16:48] <FROGGS> I'll reboot, and if this doesn't fix it I'll bisect it

[16:48] *** FROGGS left
[16:50] *** FROGGS joined
[17:02] *** ajr_ left
[17:08] *** dakkar left
[17:10] *** risou is now known as risou_awy

[17:14] *** pernatiy left
[17:22] *** risou_awy is now known as risou

[17:22] *** risou is now known as risou_awy

[17:27] *** jonathanmarvens joined
[17:31] * jnthn did did a make spectest on JVM and it got all the way through

[17:32] <jnthn> So I ain't sure what's happening with the daily run

[17:35] *** risou_awy is now known as risou

[17:38] *** spider-mario left
[17:39] *** spider-mario joined
[17:39] <masak> could be RAM-related?

[17:42] * jnthn looks sheepish

[17:43] *** spider-mario left
[17:43] *** spider-mario joined
[17:46] * masak .oO( who is incorrigible when it comes to puns, jnthn? ewe are. )

[17:47] *** ajr joined
[17:47] * nwc10 wonders wether there are many sheep puns left

[17:47] *** kbaker_ left
[17:47] *** ajr is now known as ajr_

[17:47] <masak> I'm pretty sure. if people do too many of them in a row, they fall asleep.

[17:49] <nwc10> can we count on that? :-)

[17:49] <jnthn> What compsci course do sheep like best?

[17:49] <jnthn> Lambda calculus

[17:50] * masak .oO( do androids dream of lambda calculus? )

[17:50] *** kurahaupo joined
[17:50] *** araujo left
[17:51] <FROGGS> ha, @() and %() is just one extra line...

[17:52] *** sqirrel joined
[18:00] *** kurahaupo_ joined
[18:00] *** kurahaupo left
[18:03] *** kurahaupo_ left
[18:13] *** rindolf left
[18:16] *** dmol joined
[18:16] *** kurahaupo joined
[18:16] <dalek> rakudo/nom: 7e2d8bc | (Tobias Leich)++ | src/Perl6/Actions.nqp:

[18:16] <dalek> rakudo/nom: support @() and %() shortcuts

[18:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7e2d8bc5a0

[18:18] <dalek> roast: eee19ce | (Tobias Leich)++ | S03-operators/context.t:

[18:18] <dalek> roast: unfudged for rakudo

[18:18] <dalek> roast: 

[18:18] <dalek> roast: Means we can run it now unmodified.

[18:18] <dalek> roast: review: https://github.com/perl6/roast/commit/eee19ce73e

[18:19] <FROGGS> will add more tests in a bit

[18:21] *** raiph left
[18:27] *** zwut00 joined
[18:27] *** zwut00 left
[18:28] *** SamuraiJack left
[18:28] *** darutoko left
[18:28] *** zwut00 joined
[18:29] *** sqirrel left
[18:33] *** denis_boyun joined
[18:36] *** raiph joined
[18:37] *** spider-mario left
[18:37] *** risou is now known as risou_awy

[18:37] *** risou_awy is now known as risou

[18:38] *** spider-mario joined
[18:41] * [Coke] has a rakudo night tonight for a few hours.

[18:41] * [Coke] will get the (*&#@$ bisect to finish, anyway.

[18:41] * [Coke] will also get back to nqp op docs.

[18:42] <[Coke]> and maybe some more partcl-nqp

[18:42] *** spider-mario left
[18:42] <jnthn> [Coke]: Bisect will be useful, as I couldn't reproduce the issue on my box.

[18:42] <[Coke]> -> dayjob

[18:42] *** spider-mario joined
[18:43] <[Coke]> jnthn: ahgood. (if I were nwc10 I would have scripted this bisect!)

[18:43] <[Coke]> "oh, it's too much work to script this oneshot"

[18:44] <[Coke]> (someone remind of this the next time I complain of a long running manual bisect, please. ;)

[18:44] <[Coke]> -> dayjob furrealzies.

[18:47] *** diakopter left
[18:47] <raiph> masak, diakopter, anyone else who's taken a close look at ometa (jnthn?): i'd love to see your comments on "ometa vs nqp" (ignoring any aspect that references Perl 6)...

[18:47] <yoleaux> 9 Sep 2013 08:07Z <diakopter> raiph: http://www.reddit.com/r/perl/comments/1lumnn/in_a_parallel_universe_what_would_have_happened/cc3swfq

[18:47] *** dmol left
[18:49] <masak> raiph: I don't feel I know enough about ometa. but from a high level, it feels like the goals of the projects are different.

[18:49] <masak> ometa wants to "remake computing". nqp is a compiler toolkit.

[18:52] <raiph> masak: where's that quote from? my understanding of ometa is like "a generalisation of parsing expression grammars which allow arbitrary input and can be extended in an object-oriented way"

[18:52] <raiph> (and that it's a metacompiler)

[18:53] <raiph> i'm currently seeing it as similar, in principle, to a piece of what nqp is

[18:53] <masak> I don't know where I read it.

[18:53] <masak> seems you know more about ometa than I do :)

[18:53] <jnthn> I suspect "a piece of" is accurate

[18:53] <raiph> i searched the #perl6 irclogs for ometa and you were exploring it's World :)

[18:53] <jnthn> Perl 6 grammars are PEG-y

[18:54] <raiph> s/it's/its

[18:54] <jnthn> But I don't think there's any 6model equivalent

[18:54] <raiph> jnthn: right

[18:54] <jnthn> Or code-gen part.

[18:54] *** kst joined
[18:55] <jnthn> One of the nice things about the NQP toolchain is how much you can build before having to dig into VM specifics.

[18:56] *** kurahaupo left
[18:56] <raiph> jnthn: right. nqp is the whole enchilada for a comprehensive compiler toolkit (that "just happens" to include a metacompiler bit, though that does itself have big benefits long term that will become increasingly important as the ecosystem matures over the next decade)

[18:56] <raiph> (and that deals nicely with backend abstraction)

[18:57] <raiph> (and, and, and ...)

[18:57] <jnthn> I've talked about plenty of meta things but I'm not sure I've ever used the word metacompiler... :)

[18:57] <raiph> i'm trying to place NQP in the computing world

[18:58] <raiph> https://en.wikipedia.org/wiki/Metacompiler

[18:58] <jnthn> raiph: It's the thing that we've built to help build Rakudo in a sane, manageable way.

[18:59] <jnthn> raiph: And seeing it as a product in its own right means that (a) with care/guidance it can become one, but (more important right now) (b) it gives us clear architectural boundaries.

[18:59] * FROGGS .oO( Maybe we should create ads that say: Perl 6 - Programming for the Meta-Cloud(tm) )

[18:59] *** kst left
[18:59] <FROGGS> nobody knows what that means, so everybody will buy it

[18:59] *** kst joined
[19:03] <timotimo> but there is nothing to buy :o

[19:03] <arnsholt> jnthn: Speaking of NQP as a product and such, how interesting are compilers for other languages ATM?

[19:03] <FROGGS> timotimo: LIAR!

[19:03] <raiph> ah, so that's why development of metacompilers paused for a few decades...

[19:04] <FROGGS> timotimo: it is just like a cloud, you can't touch it, you can't see it, but you know that you need it, for years now without recognizing

[19:04] <raiph> "TREE-META was the last of a line of metacompilers, starting with META II, right before subsequent versions were designated classified technology by the U.S. military and government agencies."

[19:04] <timotimo> %)

[19:04] <raiph> "NQP -- try it before the US gov bans it"

[19:05] *** risou is now known as risou_awy

[19:05] <jnthn> "a metacompiler is written in its own language and translates itself"...yeah, that's NQP :)

[19:05] <FROGGS> somebody should add a link :o)

[19:05] <jnthn> And of course, it notes cross-compiling (which is how we reach new platforms) and bootstrapping (what we do once we get there) :)

[19:06] <jnthn> masak will probably like the sourdough comparison

[19:06] <masak> FROGGS: well volunteered! :)

[19:06] <raiph> :)

[19:06] <masak> jnthn: I do like it.

[19:06] <FROGGS> so nqp proves that the 60's and 70's are back? :P

[19:06] *** sqirrel joined
[19:06] <FROGGS> masak: :P

[19:07] * FROGGS goes back to do webstuff

[19:07] <masak> FROGGS: no, we won't have another 60's and 70's in ~47 years.

[19:07] <FROGGS> awww

[19:07] <raiph> .oO ( we won't in another 23 years either... )

[19:09] *** kaare_ joined
[19:09] *** btyler_ left
[19:11] *** btyler joined
[19:11] *** jonathanmarvens left
[19:14] <masak> pmurias: aww, you didn't fix the s/so to/to/ typo in your report :/

[19:15] <FROGGS> and the "(url and url)"

[19:15] <masak> pmurias: what's the use of sending it out for proof-reading if you don't act on the fixes? :)

[19:19] *** pmurias joined
[19:20] *** kst left
[19:21] *** kst joined
[19:21] <FROGGS> beetlejuice beetlejuice beetlejuice

[19:23] <FROGGS> Dancer is soo cool!

[19:24] *** iSlug joined
[19:29] <pmurias> masak: sorry :( I copy pasted the pastebin instead of the fixed copy in my vim :(

[19:30] <masak> pro tip: don't do that :P

[19:31] *** araujo joined
[19:32] *** EvanTeitelman joined
[19:38] <sjohnson> does Perl 6 support ENUM's?  I seem to remember it supporting that or something like that

[19:38] <PerlJam> sjohnson: yes

[19:38] <sjohnson> kewl.

[19:38] <lue> hello world o/

[19:39] <PerlJam> sjohnson: See S12:1785

[19:39] <synopsebot> Link: http://perlcabal.org/syn/S12.html#line_1785

[19:39] *** diakopter joined
[19:39] <jnthn> r: enum SupportsEnums <No HellYeah>; say HellYeah

[19:39] <camelia> rakudo 7e2d8b: OUTPUT«HellYeah␤»

[19:39] <jnthn> r: enum SupportsEnums <No HellYeah>; say +HellYeah

[19:39] <camelia> rakudo 7e2d8b: OUTPUT«1␤»

[19:40] <sjohnson> i've been using constants with integers in perl5 to sort of get around it

[19:40] *** bluescreen10 left
[19:40] *** diakopter left
[19:41] *** sqirrel left
[19:42] *** jonathanmarvens joined
[19:43] <FROGGS> sjohnson: which are just subroutines under the hood, right?

[19:43] <sjohnson> integers

[19:43] *** donaldh joined
[19:43] <sjohnson> FROGGS: use constant MODE_SOMETHING => $i++;  use constant MODE_OTHER => $i++;

[19:43] <sjohnson> etc

[19:44] <FROGGS> yeah, and MODE_SOMETHING is a sub

[19:44] <FROGGS> p5eval: 1

[19:44] <sjohnson> FROGGS: so i can do:  $mode == MODE_BLAH instead of:  $mode == 'blah' with strings;

[19:44] <p5eval> FROGGS: 1

[19:44] <FROGGS> p5eval: use constant MODE_SOMETHING => 42; print MODE_SOMETHING()

[19:44] <p5eval> FROGGS: 421

[19:45] <FROGGS> p5eval: use constant MODE_SOMETHING => 42; print ref &MODE_SOMETHING

[19:45] <p5eval> FROGGS: 1

[19:45] <moritz> p5eval: use constant MODE_SOMETHING => 42; ref \&MODE_SOMETHING

[19:45] <p5eval> moritz: CODE

[19:45] <FROGGS> moritz++ :o)

[19:45] * moritz still uses p5 a lot

[19:46] <sjohnson> if constants are code blocks under the hood, then so be it.  :3

[19:46] <FROGGS> moritz: me too, but not the scary parts *g*

[19:46] <FROGGS> (joke)

[19:46] <FROGGS> sjohnson: that is how Perl 5 is, it is hard to invent new stuff

[19:47] <FROGGS> (and not needed for all cases of course)

[19:48] <moritz> fwiw in p5 constants are single-statement subroutines with empty prototypes, and p5 constant-folds them :-)

[19:49] <sjohnson> so long as it works, I can go home happy as a clam :)

[19:49] <moritz> sure it works

[19:50] <moritz> but it has implications you might care to know about

[19:50] <FROGGS> sjohnson: dont get me wrong, I love Perl 5 even when I sometimes rant about its warts

[19:50] <moritz> for example you can write $hash{ MYCONSTANT() } = $value

[19:50] <moritz> to disambiguate between constant and literal, auto-quoted strings

[19:50] <sjohnson> i have a few complaints of my own.

[19:50] <moritz> and it means you can access them as methods

[19:51] <moritz> YourPackage->MYCONSTANT

[19:51] <sjohnson> readpipe bug, as well as given/when being pretty easy to shoot oneself in their foot due to some scoping that's hard to remember.

[19:52] * sjohnson squishes the readpipe bug

[19:52] *** SmokeMachine joined
[19:52] <sjohnson> moritz: i didn't know that.

[19:52] <sjohnson> moritz.smart

[19:53] *** jonathanmarvens left
[19:54] <sjohnson> hmm, one more thing is the & in p5 i don't really like...

[19:54] <sjohnson> i just explicitly call my own subs with & now.

[19:54] <sjohnson> i move some function else where, and stuff starts breaking without it.

[19:55] <sjohnson> my $animal = &getAnimal();

[19:55] <moritz> what? stuff starts breaking when you remove the & ?

[19:55] <moritz> I have trouble believing that.

[19:56] <masak> that sounds odd, yes.

[19:56] <masak> unless you leave out the parens :)

[19:56] <sjohnson> hmm, it's the parens then

[19:56] <sjohnson> that's the one!

[19:56] <sjohnson> thanks mask.

[19:57] <sjohnson> masak*

[19:57] <moritz> use parens, or pre-declare

[19:57] <sjohnson> ahh, parens...

[19:57] <moritz> the & is quite ugly, and does funny things with @_ if you remove the parens

[19:57] <sjohnson> masak++ # brains

[19:57] <masak> sjohnson: the parens are the "call" part, you know.

[19:58] <masak> sjohnson: without it, '&getAnimal' is just talking about the sub itself.

[19:58] <masak> sjohnson: with it, you're going "good, now take that sub, and call it"

[19:58] <moritz> masak: in Perl 6, yes

[19:58] <sjohnson> indeed.

[19:58] <masak> moritz: oh, we're not in Perl 6 here?

[19:58] <sjohnson> haha

[19:58] <masak> I'm momentarily confused. which language are we programming? :)

[19:58] <moritz> masak: no. In Perl 6 you don't even need the parens for post-declared subs

[19:59] <moritz> we had a brief 5y digression

[19:59] <masak> the perils of jumping in sideways into a discussion... :)

[19:59] <masak> sorry, for confusingly assuming p6 ;)

[19:59] <moritz> :-)

[19:59] <moritz> masak: and yet your remark about the () being important, not the &, was spot-on

[20:00] <sjohnson> well, i've learned a lot.  thanks guys.  (moritz FROGGS masak)++

[20:00] <FROGGS> pleasure :o)

[20:01] <masak> moritz: apparently I helped \o/

[20:01] *** Tene left
[20:02] * masak .oO( rent masak at an affordable hourly rate. he helps even when he doesn't know what language the problem is in! )

[20:02] *** djanatyn left
[20:03] <FROGGS> masak: I'll all you when we have some PHP issues at $work :P

[20:03] * moritz wonders if there is a demand for Perl mentors

[20:03] <FROGGS> call*

[20:03] <FROGGS> damn, I really need a new keyboard

[20:04] <sjohnson> i have my fire share of global $PHP_ISSUE's

[20:05] *** kaare_ left
[20:06] <masak> FROGGS: I won't know it's PHP, but I'll wonder why I suddenly have a headache and a sudden depression :)

[20:07] * FROGGS .oO( There is something entirely wrong... Ohh... ?> )

[20:08] *** djanatyn joined
[20:08] <masak> the '?>' smiley is there to conveys existential terror.

[20:08] <masak> convey*

[20:08] <geekosaur> by the pricking of my thumb...

[20:09] *** colomon left
[20:09] *** Tene joined
[20:09] *** colomon joined
[20:10] <masak> geekosaur: someone's wiki this way comes? :P

[20:10] *** diakopter joined
[20:10] <masak> dang, shoulda made it "MediaWiki this way comes"...

[20:16] <donaldh> There's 8 file-ops tests failing in nqp on jvm. Does anyone know how far back I might need to bisect it ?

[20:19] <masak> donaldh: not sure. but da7b7b1f67685f920e50c4e5f14fcf603fe60b18 looks like a candidate for the culprit.

[20:19] <masak> (or rather the things it merges in)

[20:20] *** spider-mario left
[20:21] <donaldh> Hmm. That fixed a bunch of tests iirc

[20:28] <FROGGS> donaldh: if the last test of t/nqp/19 fail, that it might be due to the added nqp::readlinefh tests

[20:29] *** colomon left
[20:36] *** iSlug left
[20:39] *** jnap left
[20:41] *** colomon joined
[20:42] *** jnap joined
[20:45] * lue idly wonders when we can expect to see t4 results...

[20:47] *** geekosaur left
[20:47] *** dylanwh left
[20:51] <donaldh> FROGGS: I think you're right, these tests may never have passed on jvm.

[20:57] <masak> lue: I can guarantee you won't see any before 2013-10-02 :/

[20:57] <masak> ($dayjob sucking up all available time again)

[20:57] <lue> as long as it's within two months, you'll beat the previous time :)

[20:58] * masak nods, sobbing

[20:58] <masak> hopefully I'll be done before tadzik announces p6cc 2013, at least :)

[20:59] <lue> oh, he's running it this year?

[21:00] *** colomon left
[21:00] *** cognominal left
[21:00] <masak> it's not a complete certainty. but I'm pretty sure I'm *not* running it.

[21:00] <tadzik> I was supposed to run one during summer too :P

[21:00] <tadzik> but yes, there will be p6cc 2013

[21:00] <masak> I'm willing to play a fairly big part in the background if someone else leads it.

[21:00] <masak> and tadzik++ stepped forward last time we talked about this :)

[21:01] * lue &

[21:02] *** skids left
[21:02] *** dayangkun left
[21:05] *** EvanTeitelman left
[21:09] *** denis_boyun left
[21:14] *** colomon joined
[21:17] *** dayangkun joined
[21:20] *** REPLeffect left
[21:20] *** EvanTeitelman joined
[21:20] <masak> 'night, #perl6

[21:20] <FROGGS> gnight

[21:22] *** FROGGS left
[21:23] *** jonathanmarvens joined
[21:23] *** geekosaur joined
[21:23] *** jonathanmarvens left
[21:24] *** dylanwh joined
[21:32] *** REPLeffect joined
[21:35] *** jnap left
[21:36] *** jnap joined
[21:37] *** BenGoldberg joined
[21:43] *** raiph left
[21:52] *** lowpro30 left
[21:54] <dalek> nqp/lazy-vmhash: f7c396a | (Donald Hunter)++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/VMHash (2 files):

[21:54] <dalek> nqp/lazy-vmhash: Lazy allocation of HashMap for  VMHash storage on JVM.

[21:54] <dalek> nqp/lazy-vmhash: review: https://github.com/perl6/nqp/commit/f7c396af6b

[21:56] <dalek> nqp: f7c396a | (Donald Hunter)++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/VMHash (2 files):

[21:56] <dalek> nqp: Lazy allocation of HashMap for  VMHash storage on JVM.

[21:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f7c396af6b

[21:56] <dalek> nqp: ec8898f | donaldh++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/VMHash (2 files):

[21:56] <dalek> nqp: Merge pull request #134 from perl6/lazy-vmhash

[21:56] <dalek> nqp: 

[21:56] <dalek> nqp: Lazy allocation of HashMap for  VMHash storage on JVM.

[21:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ec8898f3e8

[22:00] <jnthn> That was a nice short diff. :)

[22:04] <timotimo> does that give a big reduction in memory usage?

[22:04] <jnthn> mits

[22:05] *** zacts joined
[22:13] <donaldh> timotimo: it gives a reduction. I haven't reliably measured how much. Need a robust way of forcing GC and then running jmap -histo at specific times.

[22:13] <donaldh> s/times/points/

[22:13] <timotimo> the perl token in the power plug now also has a "via 9gag.com" branded version of itself on the internets

[22:23] <corecatcher> \o/

[22:24] *** skids joined
[22:27] <geekosaur> now someone has to photoshop that imnto 6gag

[22:38] *** jonathanmarvens joined
[22:43] * jnthn has All The Tomorrow to do Perl 6 things o/

[22:43] *** Guest595 left
[22:44] * corecatcher needs more time

[22:44] *** btyler left
[22:44] <jnthn> whoa

[22:44] * jnthn just avoids having an IPA explode over this keyboard

[22:45] <corecatcher> you what?!

[22:45] <jnthn> I opened the can and it was more alive than expected...

[22:46] <timotimo> jnthn: a can full of International Phonetic Alphabet keyboard stickers?

[22:46] <corecatcher> you mean really "alive"?

[22:46] <timotimo> corecatcher: the next karlsruhe.pm meeting is the evening before my exam :|

[22:46] <corecatcher> timotimo: its okay, we just going to make 4hrs instead of 8

[22:46] <corecatcher> :>

[22:46] <jnthn> .oO( "What's a linguist's favorite kind of beer?" :D )

[22:46] <timotimo> and no beer

[22:47] <corecatcher> ppl who dont rely on alc are very welcome

[22:47] <timotimo> i don't rely on alc to get my work done ;)

[22:47] * jnthn doesn't rely on it

[22:47] <corecatcher> jnthn: A good St(r)out? :)

[22:47] <timotimo> it rarely does anything good for me

[22:49] <corecatcher> agreed, programming under beer makes me open up steam and play for hrs ;)

[22:49] <timotimo> let's be friends on steam

[22:50] <timotimo> see query on other 'net

[22:51] <timotimo> jnthn: what's your reaction to my findings that turning lexicals into locals has apparently zero effect on performance?

[22:52] <jnthn> timotimo: On which backend? Though, I'm a little surprised it had no effect...

[22:52] <timotimo> jvm and parrot

[22:53] <timotimo> (i made sure that the vars would actually get changed in the microbenchmarks i ran, there was no noticable change at all)

[22:53] <jnthn> I'd have expected at least some win on both...

[22:53] *** kay_ joined
[22:53] <jnthn> You checked the QAST post-optimize to make sure they'd really been lowered too?

[22:53] <timotimo> http://t.h8.lv/p6bench/lexlocal.html

[22:53] <timotimo> yes, that's what i checked

[22:53] <timotimo> 7d... is the one with the change

[22:54] <timotimo> (and don't ask me why half of the benchmarks have been skipped, i ought to look into that tomorrow or something)

[22:56] * timotimo disappears into the night

[22:58] *** jonathanmarvens left
[23:04] *** ajr_ left
[23:04] *** jonathanmarvens joined
[23:05] *** pmurias left
[23:10] <jnthn> 'night, #perl6

[23:10] <corecatcher> nn

[23:17] *** jonathanmarvens left
[23:17] *** donaldh left
[23:19] *** jonathanmarvens joined
[23:20] <dalek> perl6-roast-data: f3b271d | coke++ | / (3 files):

[23:20] <dalek> perl6-roast-data: today (automated commit)

[23:20] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/f3b271dcab

[23:20] <dalek> perl6-roast-data: 3beff1a | coke++ | perl6_pass_rates.csv:

[23:20] <dalek> perl6-roast-data: fix yesterday's date (run took too long)

[23:20] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/3beff1a1c6

[23:39] *** araujo left
[23:42] *** zacts left
[23:42] *** EvanTeitelman left
[23:45] *** jnap left
[23:46] *** jnap joined
[23:47] *** camelia left
[23:47] *** woolfy left
[23:47] *** prammer left
[23:47] *** bonsaikitten left
[23:47] *** ponbiki left
[23:47] *** integral left
[23:47] *** gabriel_ left
[23:47] *** krunen left
[23:47] *** jonathanmarvens left
[23:47] *** SmokeMachine left
[23:47] *** ssutch left
[23:47] *** telex left
[23:47] *** huf left
[23:47] *** Util left
[23:47] *** BenGoldberg left
[23:47] *** kst left
[23:47] *** cibs left
[23:47] *** jnap left
[23:47] *** REPLeffect left
[23:47] *** GlitchMr left
[23:47] *** [Sno] left
[23:47] *** masak left
[23:47] *** xinming left
[23:47] *** stevan_ left
[23:47] *** d^_^b left
[23:47] *** frettled left
[23:47] *** lestrrat left
[23:47] *** awwaiid left
[23:47] *** sergot left
[23:47] *** dayangkun left
[23:47] *** djanatyn left
[23:47] *** Woodi left
[23:47] *** pmichaud left
[23:47] *** Juerd left
[23:47] *** p5eval left
[23:47] *** sjohnson left
[23:47] *** LordV left
[23:47] *** PerlJam left
[23:47] *** bakedb left
[23:47] *** jercos left
[23:47] *** Celelibi left
[23:47] *** felher left
[23:47] *** Yappo__________ left
[23:47] *** Hor|zon left
[23:47] *** jtpalmer left
[23:47] *** mls left
[23:47] *** silug_ left
[23:47] *** PZt left
[23:47] *** betterwo1ld left
[23:47] *** jdv79_ left
[23:47] *** itz_ left
[23:47] *** sunnavy left
[23:47] *** BooK left
[23:47] *** groky left
[23:47] *** bonsaikitten joined
[23:47] *** gabriel joined
[23:47] *** integral joined
[23:47] *** prammer joined
[23:47] *** integral left
[23:47] *** integral joined
[23:47] *** krunen joined
[23:47] *** woolfy joined
[23:51] *** araujo joined
[23:53] *** ponbiki joined
[23:53] *** ponbiki is now known as Guest37284

[23:53] *** gabriel is now known as 20WAC7D55

[23:54] *** groky joined
[23:54] *** BooK joined
[23:54] *** sunnavy joined
[23:54] *** itz_ joined
[23:54] *** jdv79_ joined
[23:54] *** betterwo1ld joined
[23:54] *** PZt joined
[23:54] *** silug_ joined
[23:54] *** camelia joined
[23:54] *** jnap joined
[23:54] *** jonathanmarvens joined
[23:54] *** BenGoldberg joined
[23:54] *** REPLeffect joined
[23:54] *** dayangkun joined
[23:54] *** djanatyn joined
[23:54] *** SmokeMachine joined
[23:54] *** kst joined
[23:54] *** GlitchMr joined
[23:54] *** [Sno] joined
[23:54] *** masak joined
[23:54] *** ssutch joined
[23:54] *** xinming joined
[23:54] *** stevan_ joined
[23:54] *** telex joined
[23:54] *** d^_^b joined
[23:54] *** Woodi joined
[23:54] *** pmichaud joined
[23:54] *** Juerd joined
[23:54] *** huf joined
[23:54] *** frettled joined
[23:54] *** Util joined
[23:54] *** p5eval joined
[23:54] *** lestrrat joined
[23:54] *** sjohnson joined
[23:54] *** LordV joined
[23:54] *** cibs joined
[23:54] *** PerlJam joined
[23:54] *** sergot joined
[23:54] *** awwaiid joined
[23:54] *** mls joined
[23:54] *** jtpalmer joined
[23:54] *** Hor|zon joined
[23:54] *** Yappo__________ joined
[23:54] *** felher joined
[23:54] *** Celelibi joined
[23:54] *** jercos joined
[23:54] *** bakedb joined
[23:54] *** zacts joined
[23:54] *** zacts is now known as Guest32443

[23:54] *** telex left
[23:55] *** zwut00 left
[23:55] *** telex joined
