[00:00] <TimToady> and the Victorians would have been shocked to see a 'leg' operator :)

[00:01] *** rurban1 left
[00:02] <TimToady> (but then they even covered the legs of their pianos)

[00:03] <TimToady> (and invented the terms 'light meat' and 'dark meat' so as not to be forced into discussing legs and thighs, or even, horrors, breasts)

[00:04] <TimToady> linguists kinda hate the concept of taboo words...

[00:04] <TimToady> well, the concept is fun, but the practice is evil

[00:12] <dalek> perl6-roast-data: f05ea48 | coke++ | / (4 files):

[00:12] <dalek> perl6-roast-data: today (automated commit)

[00:12] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/f05ea48c28

[00:28] *** ssutch left
[00:38] *** betterworld left
[00:38] *** ivanshmakov left
[00:39] *** ivanshmakov joined
[00:40] *** slavik joined
[00:43] *** betterworld joined
[00:45] *** bloonix left
[00:48] *** cognominal left
[00:48] *** cognominal joined
[00:50] *** dayangkun joined
[00:57] *** clsn_ joined
[00:59] <clsn_> perl6: say ("Z" ~~ /<[A..MZ]>/).perl

[00:59] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«Nil␤»

[00:59] <camelia> ..niecza v24-108-g17d73e4: OUTPUT«(timeout)[auto-compiling setting]␤»

[01:00] <TimToady> huh, looks like a rakudobug

[01:00] <clsn_> That should be a match though, shouldn't it?  It used to match in older perl6s I think.

[01:01] <TimToady> r: say ('Z' ~~ /<[ Z A..M ]>/).perl

[01:01] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«Nil␤»

[01:01] <TimToady> r: say ('Z' ~~ /<[ Z A..M ]>/).WHAT

[01:01] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«Nil␤»

[01:01] <TimToady> r: say ('Z' ~~ /<[ Z A..Z ]>/)

[01:01] <colomon> niecza> say ("Z" ~~ /<[A..MZ]>/).perl

[01:01] <colomon> #<match from(0) to(1) text(Z) pos([].list) named({}.hash)>

[01:01] <colomon> (locally)

[01:01] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«｢Z｣␤␤»

[01:01] <TimToady> r: say ('Z' ~~ /<[ N..Z A..M ]>/)

[01:01] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«｢Z｣␤␤»

[01:02] <TimToady> r: say ('Z' ~~ /<[ Z..Z A..M ]>/)

[01:02] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«｢Z｣␤␤»

[01:02] <clsn_> Doesn't like mixing ranges with straight chars I think.

[01:02] <TimToady> looks like the range version is discarding the singletons

[01:02] <TimToady> r: say ('Z' ~~ /<[ A..M Z..Z ]>/)

[01:02] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«｢Z｣␤␤»

[01:03] <TimToady> r: say ('Y' ~~ /<[ A..M Y ]>/)

[01:03] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«Nil␤»

[01:03] *** beastd left
[01:04] <TimToady> so feel free to report to rakudobug, or fire up the masakbot to do so :)

[01:05] <clsn_> [email@hidden.address]
[01:06] <TimToady> [email@hidden.address] I believe

[01:06] <clsn_> Thanks.

[01:06] * colomon just realized he would almost rather try to fix Rakudo bugs than report them.

[01:06] <TimToady> clsn_, meet colomon.  colomon, meet clsn_.  :)

[01:07] <colomon> clsn_: howdy

[01:07] <TimToady> a match made in limbo, as it were

[01:07] <clsn_> Hello!

[01:07] * colomon does not have time to tackle another Rakudo bug tonight, however.  ;)

[01:09] <TimToady> oh, it might just be [email@hidden.address]
[01:10] <lue> This is another opportunity to bring up RT's new web-based submission feature. :)

[01:10] <clsn_> Yeah, found it.  Thanks.

[01:11] *** raiph joined
[01:12] <TimToady> lue: been poking through your S15ish, and don't like the notion that Str has a .storage

[01:12] <colomon> lue!  \o

[01:13] * TimToady thinks Str just means NFG always, and Uni is codepoints, and we have real types for NFD, NFC, etc, not fake types under Str

[01:13] *** thou left
[01:13] <lue> TimToady: tbh I came up with it when I realized that I was writing a bunch of functions that needed to know the storage of the Str, but the user themself couldn't access this :)

[01:14] <TimToady> we shouldn't reinvent the type system poorly

[01:14] <lue> So, Str is NFG, Uni is one of the other non-NFG forms, and NFD, NFC, etc. are more specific forms of Uni?

[01:15] <lue> (i.e. NFC ~~ Uni[NFC] ?)

[01:15] <TimToady> I'd say your functions are not sufficiently polymorphic instead

[01:15] <TimToady> yeah

[01:15] <TimToady> much like utf8 is a specific form of blob8

[01:16] <TimToady> the polymorphism is over the Stringy role, not the Str type

[01:16] <TimToady> is how I've been imagining it

[01:16] <lue> So Stringy[NFG], Stringy[NFC], etc.?

[01:16] <TimToady> well, maybe Uni is a role too

[01:17] <TimToady> but yeah, basically

[01:17] <lue> .oO(Stringy[NFC] ~~ Uni[NFC] ~~ NFC)

[01:18] <lue> TimToady: I'd like to think that Uni is for Unicode storage, and Stringy is a superset of that and other user-defined things, so Stringy[EBCDIC] but not Uni[EBCDIC]

[01:18] <TimToady> in any case, NFC ~~ Uni and NFD ~~ Uni should be true

[01:18] *** telex left
[01:18] <TimToady> mebbe

[01:18] *** japhb_ joined
[01:18] <TimToady> in a sense, Str is also outside of Uni because NFG is not defined by the consortium

[01:19] <TimToady> so I think Str ~~ Uni is false

[01:19] <TimToady> and almost everything we get in from other languages will be some kind of Uni

[01:20] *** telex joined
[01:20] * [Coke] gets to sit in on a lovely rehearsal of christmas music at a real theatre.

[01:20] <TimToady> encoded in some kind of UTF

[01:20] <[Coke]> nice backdrop for coding. :)

[01:20] <lue> TimToady: I'm starting to see how locale-aware string types could form possibly. Things like Turkish dotted/dotless I things would be handled by it.

[01:20] * colomon is watching the Big Ten Championship tonight, just three days late.

[01:21] <TimToady> we've always seen language-aware strings as a level higher than Str even

[01:22] <TimToady> since it can change the notion of graphemes even further than Str does

[01:23] <TimToady> language-aware strings might even use their own synthetics tables in preference to NFG's

[01:23] <lue> .oO(class ẞStr is Str ...)

[01:23] <TimToady> and maybe failover to NFG's for things outside the language

[01:23] <lue> if those l10n'd types inherited from Str, I think it would.

[01:24] <TimToady> but we'll be doing good to get to the NFG level first

[01:24] * TimToady is not sure inheritance is right

[01:24] <lue> Yeah, I imagine the l10n stuff should be handled in modules somehow, like there are perhaps too many locales to account for :)

[01:25] <TimToady> NFG is a bit of a native type, so inheriting from it can't change the memory layout if so

[01:25] <TimToady> inheritance of native types being restricted that way

[01:26] <TimToady> but they can at least cargo-cult the ideas from NFG, even if the relationship is not one of inheritance

[01:27] <TimToady> so FrenchStr ~~ Stringy, but maybe not FrenchStr ~~ Str

[01:28] <TimToady> mabye the role of class Uni is really Unicodey

[01:28] <lue> Depends on what FrenchStr does to accomplish its ideas of characters, methinks. FrenchStr removing features makes FS ~~ Str wrong, but just adding features should allow FS ~~ Str

[01:29] <TimToady> well, if you have to substitute different tables, it's just something else

[01:29] <lue> .oO( role Uny )

[01:31] <lue> I'm kinda stuck on how an l10n Str would modify various rules, e.g. change "ß".uc -> "SS" to "ß".uc -> "ẞ". Changing the .uc method wouldn't be enough, because /:i ß/

[01:32] * lue imagines the l10n Str would intercept any queries of Unicode properties and send back different values when appropriate, kinda like a Gameshark

[01:32] * TimToady thinks this will be for every language to work out, and we only need a vague notion of keeping the types separate for now

[01:32] <TimToady> delegation may be the answer here

[01:33] <lue> TimToady: Yeah, I'm more concerned with what P6 needs to provide to let language strings do that stuff than with how those Strs would go about it specifically.

[01:33] <TimToady> not inventing a second-class type system is the most important thing in my estimation

[01:34] <lue> .oO(I'll quickly add a waitaminute note to my gist, I fear I haven't quite enough time to switch to S15-editing mode ☺)

[01:35] <TimToady> there isn't a LocaleStr class, since such a thing is both impossible and unneeded

[01:35] <TimToady> we don't need a type that is generic across all languages

[01:35] <TimToady> most people only speak a few languages locally

[01:36] <TimToady> thanks; we should probably move this over to a real S15 soonish

[01:37] <lue> TimToady: you're welcome. And I kinda want to write a blog post about my S15ish soon, before moving S15 to official. However, moving it first doesn't break any masterplans :)

[01:38] * lue might not bother converting the Pod6 file to POD, because we're Perl *6* ;)

[01:38] <TimToady> all of the synopses started out rough, so there's no shame in checking something into git and then changing it

[01:38] <TimToady> we supposedly have the Pod6 technology already

[01:39] <TimToady> if anything we should be converting the others to it

[01:39] <lue> I'd like to start a Pod6ify branch soon, probably after moving S15ish.

[01:39] <diakopter> we have the technology

[01:39] <lue> In any case, 30-odd Pod6 Synopses are likely to attract more rendering improvements than 1 or 2 Pod6 Synopses :)

[01:40] <TimToady> dogfood, and all that

[01:40] <timotimo> gmake[1]: *** read jobs pipe: Invalid argument.  Stop.  -  what does that even mean!?

[01:40] <lue> When I have time in ~1h, I'll add the Str, Uni, etc. stuff into S15ish accordingly, and then possibly move it. I've been waiting until it gets to the point where an iron grip on the contents of the spec becomes detrimental rather than beneficial.

[01:40] *** SevenWolf joined
[01:41] <TimToady> timotimo: it means, "Then don't do that."  :P

[01:41] <TimToady> iron grips are overrated

[01:42] <timotimo> yeah, but ... all i'm doing is "make all install" :(

[01:43] <lue> .oO(maybe just make some of the installs then.) Have you tried running make and make install separately?

[01:43] <timotimo> let's see ...

[01:44] <timotimo> okh!

[01:44] <timotimo> forgot to checkout the subbmodules i bet!

[01:44] <timotimo> nah

[01:49] *** jeffreykegler joined
[01:52] * lue can't wait to be able to edit the synopses without pulling up perlpod and making sure even the most basic tenets of Pod6 are from POD

[01:53] <raydiak> this talk of pod reminds me of a vaguely related question...is there anything particular that a person with web development proficiency could be doing to further Perl 6?

[01:54] <jeffreykegler> Re NFG:  I have wondered if anyone but me noticed the pun.

[01:54] <TimToady> wonder no more :)

[01:54] <jeffreykegler> Although it is a very obvious followon to NFC, NFD, etc., so the question is raised why it is not in the Unicode standards. :-)

[01:54] <timotimo> raydiak: you can try to figure out how to work PSGI with our rakudo-jvm and make it do requests in parallel :)

[01:55] <timotimo> you can write a tutorial on how to deploy a Bailador application on heroku

[01:55] <timotimo> i wanted to do that once, but i was overwhelmed by not having a single clue what anything was ... ever

[01:55] <jeffreykegler> In any case, as followers of the Unix tradition, fearlessness in the face of treacherous puns is our heritage.

[01:55] <timotimo> i don't understand the NFG pun :(

[01:56] <TimToady> jeffreykegler: well, they're trying, but when you start writing out longer and longer phrases for what should be simpler concepts, it slows you down :)

[01:56] *** dayangkun left
[01:56] <TimToady> timotimo: No F*cking Good in the vernacular

[01:56] <TimToady> an intensive form of NG, for No Good

[01:57] <timotimo> i see!

[01:57] <timotimo> that's amusing indeed :)

[01:57] <TimToady> I think I first heard "That's NG!" maybe three or four decades ago

[01:58] <TimToady> but maybe it predates that

[01:58] <raydiak> timotimo: thanks, I made a note for a more long-term list :) I guess I was thinking more bite-sized to start, like P6-related websites that need help, or pod6-to-html tools that aren't done

[01:58] * TimToady does not recommend that anyone trust his memories in this regard...

[01:58] <timotimo> ah

[01:58] <[Coke]> next F***ing generation

[01:59] <raydiak> iow, lots of people here know perl and perl 6 as well or better than I, but I think my html and css might be a useful addition to the talent pool

[01:59] <raydiak> (if needed anywhere)

[02:00] <jeffreykegler> Helmut Wollmersdorfer on the Marpa mailing list told me that the Unicode standards call the rough equivalent of NFG, Grapheme Cluster boundaries extended ...

[02:00] <timotimo> gcbe? doesn't sound as nice as nfg

[02:00] <jeffreykegler> which is not a great name, but is pretty pun-proof

[02:00] <[Coke]> my lon gterm goal is to get a mojo 6 running on the jvm.

[02:06] *** raiph left
[02:07] *** jeffreykegler left
[02:08] <raydiak> https://github.com/perl6/doc/blob/master/README says "write a tool that renders the documentation as HTML" ...what's the status of that?

[02:08] *** aindilis` left
[02:08] *** raiph joined
[02:08] *** jeffreykegler joined
[02:11] *** aindilis` joined
[02:11] <[Coke]> raydiak: https://github.com/perl6/Pod-To-HTML/, maybe?

[02:13] <raydiak> thanks [Coke]++

[02:19] *** raiph left
[02:23] <raydiak> I suppose basic html and css are very common skills, and more advanced stuff like being able to vertically center variable-length content and stretch columns to equal height without javascript isn't very important to perl 6 in any immediately obvious way...*shrug*

[02:25] *** logie_ left
[02:27] *** raiph joined
[02:28] *** benabik joined
[02:34] *** stevan_ left
[02:38] *** ponbiki_ is now known as ponbiki

[02:39] *** salv0 left
[02:40] *** btyler joined
[02:41] *** logie joined
[02:41] *** salv0 joined
[02:42] *** raiph left
[02:59] *** jeffreykegler left
[03:03] *** raiph joined
[03:05] *** jeff_s1 left
[03:08] *** dayangkun joined
[03:15] *** araujo left
[03:16] *** araujo joined
[03:33] <lue> TimToady: You know, if we separate various string storages into various types, perhaps String.length could be reintroduced :P

[03:35] <timotimo> so ... compiling on my laptop isn't exactly super fast ... but it's definitely better than on my old one

[03:38] <TimToady> lue: 'length' is too long :P

[03:39] <lue> How about .ln then ... wait.

[03:40] <timotimo> gonna time my stage parse to figure out where my laptop stands in comparison to my desktop

[03:41] <lue> TimToady: if Uni is a role, would you prefer enums to define the NFD, NFC, etc. classes, e.g. Uni[NF::C] or something, or would those NF* classes simply C<does> a non-parametric Uni

[03:42] <lue> (or is Uni a synonym for NFC, and there's a higher Unicodey role?)

[03:44] <TimToady> I suspect it's non-parametric

[03:44] <TimToady> Uni doesn't know whether it has NFC or NFD

[03:44] <TimToady> or some mixture

[03:44] <TimToady> it's just a list of codepoints

[03:44] <TimToady> much like our current Str type

[03:47] *** thou joined
[03:48] *** xinming joined
[03:48] <lue> And then the NF* types decide which codepoints to convert to the local religion. The last thing I'm wondering if Uni as a class eqv. to NFC is a useful "I don't care about encoding, just Unicode please" synonym, or if worrying about using Unicode loses you the right to not care :)

[03:49] <lue> (i.e. should we or shouldn't we make Uni === NFC, and spell Uni the role as "Unicodey")

[03:49] <TimToady> no, we need a physical type for mixtures/unknowns

[03:50] <lue> so Uni is that 'any semantics' you occasionally mention, a "freedom of religion" type, to extend the awkward metaphor :)

[03:50] <timotimo> huh, jvm stage parse takes 200 seconds?

[03:50] <TimToady> Uni is the closes we get to a round-trippable Unicode type that isn't a UTF

[03:50] <timotimo> i must be doing something terribly wrong

[03:51] <TimToady> Uni is a you-get-what-you-paid-for type, and you chose not to pay for normalization

[03:52] *** thou left
[03:52] <lue> .oO(too bad NF* isn't a valid type name :P)

[03:52] <TimToady> No F*ing Idea :)

[03:53] <lue> So like I said, "freedom of religion", i.e. You can have ä in one part of the text, and ä in another. The Uni village doesn't care.

[03:53] <diakopter> so doge

[03:54] <diakopter> well, lots of the villagers do care

[03:54] <TimToady> what we want to do, however, is to encourage people to handle normalization at the same spot that we're already checking for UTF decoding, so we don't have to make two passes on the data

[03:55] <TimToady> the point at which we already have a codepoint in the register is the right point to check to see if it's a Mark character

[03:55] <TimToady> so going straight from, say UTF-8 to NFG is going to be much more efficient than from UTF-8 to Uni to NFC to NFG

[03:56] <TimToady> and that's where we want to be insane about efficiency

[03:56] <TimToady> and design the language so that direct translation is default

[03:57] <TimToady> and we don't want the overhead of plunging down multiple layers of function call on every such character translation either

[03:57] <TimToady> it's a very good place to cheat

[03:58] <lue> [ Uni ~~ all(NFC,NFD,NFKC,NFKD), Str does Stringy, Stringy does Unicodey(?), Uni does Unicodey, NF* is Uni    is what I have in my head right now. ]

[03:58] <TimToady> Stringy does not do Unicodey

[03:58] <TimToady> Unicodey might do Stringy

[03:58] <lue> TimToady: so ideally you'd care about NF when doing    Uni $data = slurp($filename, :encoding<utf-8>, :nf<c>), and then not bother anymore.

[03:59] <TimToady> in that case the real type of the returned string should be NFC, not Uni

[03:59] * lue is specifically excluding an NFG type, because Str is that already.

[04:00] <TimToady> that's fine, since the name NFG is NFG. :)

[04:00] <timotimo> did i get a ultra-low-voltage cpu in my laptop by accident? >_<

[04:00] <lue> We could s:g/Str/NFG/, but not unless you want to watch how many tests fail the next day :)

[04:00] <TimToady> NFG is not a user-friendly name :)

[04:01] <TimToady> people think they know what "strings" are, so we are taking psychological advantage of that thinkage

[04:02] <lue> TimToady: I'd like to be able to do  Uni $uni = $NFCtypedStringThing  , as a way of saying "I have this NFC string, but I don't care about that anymore when putting it into $uni"

[04:02] <TimToady> well, Uni will pass the type check, if that's all you want, but the object itself will still know it's NFC

[04:03] <lue> (aka. Uni ⊆ NFC, NFD, NFKC, NFKD)

[04:04] <lue> eh, s/⊆/⊇/

[04:04] <TimToady> well, not sure how sets come into it really, but I take your meaning

[04:06] <lue> I wasn't using them as Perl 6 ops, but convenient shorthand :)

[04:06] <timotimo> my desktop does stage parse 3x faster :\

[04:06] <timotimo> tomorrow i'll measure my old laptop against that, and it better be even slower.

[04:06] <TimToady> we'll have to decide what NFC ~ NFD does

[04:07] <TimToady> one can argue for a Uni result, or an NFC result

[04:07] <lue> TimToady: my gut reaction says "that amorphous Uni type"

[04:07] <lue> Though I can see NFC. And maaaaybe NFD too.

[04:08] <TimToady> yes, but then you probably force someone downstream to renormalize a substring that's already NFC

[04:08] <TimToady> unless the bits of rope keep different normalization info internally

[04:09] * lue suspects one of the NFK* types should always be preferred when present, because those things seem to be special-use-ish.

[04:09] *** salv0 left
[04:09] <TimToady> so concat really results in strand(NFC),strnad(NFD), and then a normalization can skip normalizing the strands that are right already

[04:09] *** preflex left
[04:09] <TimToady> alternately, we just blow up on type mismatch, and force the user to be explicit

[04:10] <lue> I can see either Uni or Unicodey being ropes. I can also see refusing to play nice :) .

[04:10] <TimToady> welcome to the world of language design :)

[04:10] <TimToady> the trick is knowing when to be sure of things, and not being sure before then...

[04:11] *** preflex joined
[04:11] *** ChanServ sets mode: +v preflex

[04:11] <lue> NF* does Strandy, Uni does Ropey (formery Unicodey), Str does Stringy.    :)

[04:11] <TimToady> we need to see how diakopter++'s ropes implementation works out in practice

[04:11] <lue> in MVM or Rakudo?

[04:12] <TimToady> MVM, so far, but not yet merged

[04:12] *** salv0 joined
[04:12] <TimToady> (that I know of)

[04:14] <lue> I suspect we'll have a web of String-based types as complex as the Number-based types before we're done :D

[04:14] * TimToady now imagines D~ and C~ operators

[04:15] <TimToady> mostly for [D~] @list

[04:15] <lue> oh yeah, this makes the ~ prefix a bit interesting too.

[04:15] <TimToady> but that's probably a metaop two far.

[04:17] <lue> I think the preliminary decision should be "we don't allow that kind of mismatch", though that's not a very good final decision.

[04:18] <TimToady> well, one wants to see what the workarounds are in each case; picking left type means we see [~] ''.NFC, @list

[04:19] <lue> (I see  NFG > all other NF*  and NFK. > NF.  , but getting those two relations to mesh is a bit weird atm)

[04:19] <TimToady> picking no type means we see [~] @list».NFC

[04:19] <lue> ».NFC feels less hacky to me

[04:20] * TimToady is really not all that inclined to make life easy for codepointers though :)

[04:20] * TimToady has much more sympathy with the graphemers

[04:20] <lue> I'm trying to recall what I know of type promotion in numberland, but the waters are muddied with separate types that are on equal footing :/

[04:21] <TimToady> so yeah, the » feels cleaner

[04:22] <lue> at least, I don't think I've seen any sort of [<op>] <constant>.<meth> @list in the wild before, but I've seen plenty of [<op>] @list».<meth>

[04:22] <TimToady> we could, I suppose, have special listops, nfc @list and nfd @list that concat

[04:23] <TimToady> those might be frequent enough and readabler enough to warrant existence

[04:24] *** ribasushi left
[04:24] *** Vlavv_ left
[04:24] <lue> Could be. Too bad we don't know how often that would be needed :)

[04:25] *** Vlavv_ joined
[04:25] *** ribasushi joined
[04:25] <lue> r: say '[~] @list».NFC'.chars - 'nfc @list'.chars;

[04:25] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«5␤»

[04:27] <lue> Yeah, I'm thinking less and less that you can say with certainty which of NFC and NFD are preferred, and our options are:

[04:27] <lue> 1) prefer LHS

[04:28] <lue> 2) Go to Uni

[04:28] <lue> 3) die

[04:29] <lue> (how Uni stores its amorphous collection of variously-NF'd parts is up for later discussion methinks)

[04:30] *** wbill left
[04:31] <TimToady> anime &

[04:44] *** Woodi left
[04:44] <lue> .oO(A lot of the specifics in my S15 needs changing to fit the new multi-type setup we've sketched out.)

[05:04] <lue> TimToady: on the mismatch thing, what about    $nfdStr ~= "Not NFD string, but Str string"    ? Would that be solved by prefer-LHS? Or would separating rules between ~= and ~ be a viable option?

[05:08] *** xinming left
[05:10] *** xinming joined
[05:10] <lue> (or would that ~ result in a Uni, and the = part of ~= does the conversion to NFD?)

[05:17] *** raiph left
[05:18] *** btyler left
[05:18] *** raiph joined
[05:28] *** [Sno] left
[05:37] *** xenoterracide joined
[05:43] <lue> updates to the S15ish: https://gist.github.com/lue/7761244

[05:43] *** sftp_ joined
[05:44] <lue> The framework of multiple string types is there, but sorely lacking. I suspect moving this to the specs repo soon would be the best solution to expanding that.

[05:44] *** sftp left
[05:48] *** sftp_ left
[05:49] *** sftp_ joined
[06:02] *** xenoterracide left
[06:25] *** xinming left
[06:28] *** [Sno] joined
[06:32] *** xinming joined
[06:34] <raiph> preflex: tell raydiak http://questhub.io/realm/perl/quest/527bcaf69f567a1d4c00004c

[06:34] <preflex>  Consider it noted.

[06:37] *** xinming left
[06:49] *** SamuraiJack_ joined
[06:59] *** dmol joined
[07:07] *** FROGGS joined
[07:08] *** Mouq left
[07:20] *** dmol left
[07:20] *** kaleem joined
[07:27] *** raiph left
[07:29] <FROGGS> o/

[07:50] *** xinming joined
[08:02] *** xinming_ joined
[08:06] *** xinming left
[08:09] *** zakharyas joined
[08:11] *** dmol joined
[08:15] *** dmol left
[08:17] *** dmol joined
[08:18] *** xinming joined
[08:20] *** xinming_ left
[08:20] *** dmol left
[08:21] *** dmol joined
[08:22] *** xinming left
[08:23] *** xinming joined
[08:30] *** xinming left
[08:35] *** dmol left
[08:35] *** dmol joined
[08:36] *** dmol left
[08:40] *** xinming joined
[08:46] *** xinming_ joined
[08:48] *** xinming_ left
[08:48] *** xinming left
[08:52] *** Mouq joined
[08:56] *** Mouq left
[08:56] *** xinming joined
[09:09] <dalek> v5: 9b19624 | (Tobias Leich)++ | t/test_summary:

[09:09] <dalek> v5: TEST_JOBS environment variable

[09:09] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/9b19624ed1

[09:09] <dalek> v5: 44d7af5 | (Tobias Leich)++ | / (2 files):

[09:09] <dalek> v5: re-apply 27b050ef74464d845e8bd4779eba51fb0d53c040

[09:09] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/44d7af5ba4

[09:12] *** darutoko joined
[09:19] *** denis_boyun joined
[09:26] *** sqirrel_ joined
[09:39] *** daniel-s joined
[09:43] *** dprelec joined
[09:46] *** rindolf joined
[09:48] *** filly left
[09:51] *** vaclavstrachon joined
[09:56] *** finanalyst joined
[10:02] *** fhelmberger joined
[10:03] <finanalyst> hi from Hong Kong. Are bugs in perl6 still being handled via Bugzilla? I found that running fmt on an Inf hangs perl6

[10:03] *** daniel-s left
[10:07] <moritz> finanalyst: rt, not bugzilla

[10:07] <moritz> finanalyst: [email@hidden.address]
[10:08] <finanalyst> moritz: thanx. Long time been out of the conversation. Hope to rejoin soon.

[10:08] <moritz> p: say Inf.fmt('%d')

[10:08] <camelia> rakudo-parrot 0bf3de: OUTPUT«get_boxed_ref could not unbox for the given representation␤  in any directive:sym<d> at gen/parrot/stage2/NQPHLL.nqp:2204␤  in any !reduce at gen/parrot/stage2/QRegex.nqp:724␤  in any !cursor_pass at gen/parrot/stage2/QRegex.nqp:686␤  in any dire…»

[10:09] <moritz> p: say 1e1.fmt('%d')

[10:09] <camelia> rakudo-parrot 0bf3de: OUTPUT«10␤»

[10:09] <finanalyst> p: say Inf.fmt('%f')

[10:09] <camelia> rakudo-parrot 0bf3de: OUTPUT«(timeout)»

[10:10] <finanalyst> p: my $x= Inf; my $y = 5; say ($x + $y); say ($x + $y).fmt('%f')

[10:11] <camelia> rakudo-parrot 0bf3de: OUTPUT«(timeout)Inf␤»

[10:11] <finanalyst> p: my $x= Inf; my $y = 5; say ($x + $y);

[10:11] *** SamuraiJack_ left
[10:11] <camelia> rakudo-parrot 0bf3de: OUTPUT«Inf␤»

[10:11] <FROGGS> p: printf('%s', Inf)

[10:11] <camelia> rakudo-parrot 0bf3de: OUTPUT«Inf»

[10:11] <FROGGS> p: printf('%d', Inf)

[10:11] <camelia> rakudo-parrot 0bf3de: OUTPUT«get_boxed_ref could not unbox for the given representation␤  in any directive:sym<d> at gen/parrot/stage2/NQPHLL.nqp:2204␤  in any !reduce at gen/parrot/stage2/QRegex.nqp:724␤  in any !cursor_pass at gen/parrot/stage2/QRegex.nqp:686␤  in any dire…»

[10:12] <finanalyst> Inf is handled OK by rakudo, but not fmt. I think this is because fmt is a wrapper around C code, which does not handle Inf

[10:12] <FROGGS> finanalyst: it is nqp code...

[10:12] <FROGGS> finanalyst: here https://github.com/perl6/nqp/blob/master/src/HLL/sprintf.nqp#L162

[10:13] <finanalyst> specs say its C code. 

[10:13] *** finanalyst left
[10:14] <FROGGS> specs say something about the actual implementation?

[10:14] <FROGGS> specs/S32-setting-library/Str.pod:434:This function is mostly identical to the C library sprintf function.

[10:21] *** dayangkun left
[10:35] *** vaclavstrachon left
[10:41] *** mtk left
[10:42] *** tgt joined
[10:44] *** mtk joined
[10:46] *** mtk left
[10:47] *** SevenWolf left
[10:49] *** mtk joined
[11:00] <FROGGS> std: multi postcircumfix:<P5[ ]>($a) { $a }

[11:00] <camelia> std 3b262af: OUTPUT«ok 00:01 129m␤»

[11:00] <FROGGS> p: multi postcircumfix:<P5[ ]>($a) { $a }

[11:00] <camelia> rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/vEEjoGRu8F␤Cannot add tokens of category 'postcircumfix'␤at /tmp/vEEjoGRu8F:1␤------> [32mmulti postcircumfix:<P5[ ]>[33m⏏[31m($a) { $a }[0m␤    expecting any of:␤        colon pai…»

[11:04] <FROGGS> postcircumfix has methodcall precedence?

[11:07] *** Fatalnix left
[11:09] *** Fatalnix joined
[11:20] *** denis_boyun left
[11:21] <lizmat> good *, #perl6!

[11:21] <FROGGS> hi lizmat 

[11:21] <lizmat> postcircumfix parses as sub calls nowadays

[11:22] <lizmat> maybe std: isn't up to date in that respect?

[11:22] <FROGGS> why? it parses it, while rakudo bails out

[11:22] <FROGGS> it is just that I need the precedence level of postcircumfix and methodcall seems appropriate

[11:25] <FROGGS> this has not much todo to what @a[1] delegates to

[11:25] <FROGGS> it is about declaring your own sub postcircumfix:<P5[ ]>( )

[11:26] <lizmat> no?  does the parser know when to generate AST's with subcalls and when with method calls?

[11:26] <lizmat> last time I looked at that code, it didn't

[11:26] <FROGGS> the actions know what to do, but that is not the point here

[11:26] <lizmat> ok, then I'm misunderstanding

[11:27] <FROGGS> p: multi postcircumfix:<P5[ ]>($a) { $a } # <--- it bails out but it should not

[11:27] <camelia> rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/DIyTbKWDOd␤Cannot add tokens of category 'postcircumfix'␤at /tmp/DIyTbKWDOd:1␤------> [32mmulti postcircumfix:<P5[ ]>[33m⏏[31m($a) { $a } # <--- it bails out but it s[0m␤    expectin…»

[11:31] *** Mouq joined
[11:32] *** denis_boyun joined
[11:33] <lizmat> .oO( needs more tea )

[11:40] <FROGGS> lizmat: btw, I am doing the method2sub in v5 now too, but to do that I need to be able to declare such a subroutine

[11:40] <FROGGS> before I augmented Any, Array and List, and added postcircumfix:<P5[ ]>( ) as methods

[11:41] <FROGGS> finally I don't have to augment these types, which is a nice extra

[11:44] <lizmat> FROGGS++

[11:50] <rindolf> lizmat: hi.

[11:50] <lizmat> hi rindolf!

[11:50] <rindolf> lizmat: what's new?

[11:50] <lizmat> a method for creating objects ?

[11:50] <lizmat> :-)

[11:51] <lizmat> I think most people are waiting for parl6-m to pass a significant amount of spectests

[11:52] <lizmat> slightly less new: S17 and implementation thereof in perl6-j

[11:52] <lizmat> did I mention perl6advent.wordpress.com ?

[11:53] <lizmat> and you?

[11:59] <rindolf> lizmat: there's some code I want to write, but I'm being lazy.

[11:59] <rindolf> lizmat: and I solved today’s http://binarypuzzle.com/ .

[12:00] *** Mouq left
[12:01] <lizmat> nice brainteaser

[12:06] *** aborazmeh joined
[12:12] <diakopter> preflex: help

[12:12] <preflex>  try 'help help' or see 'list' for available commands

[12:12] <diakopter> list

[12:12] <diakopter> preflex: list

[12:12] <preflex>  Botsnack: [botsnack]; Cdecl: [cdecl]; 8ball: [8ball]; excuses: [excuse]; Factoid: [+, -, ., ?, delete, get, store]; Help: [help, list]; Karma: [++, --, karma, karmabot, karmatop]; Nickometer: [nickometer]; Nickr: [nickr]; PlokiRE: [re]; Seen: [seen]; Sixst: [6st, ordinal]; Tell: [ask, clear-messages, messages, tell]; Rot13: [rot13]; Quote: [be, quote, remember]; WCalc: [calc, wcalc]; Version:

[12:12] <preflex>  [version]; XSeen: [xseen]; ZCode: [zdec, zenc]

[12:12] <diakopter> gah

[12:13] <diakopter> preflex: tell TimToady new syntax http://damieng.com/blog/2013/12/09/probable-c-6-0-features-illustrated

[12:13] <preflex>  Consider it noted.

[12:13] <FROGGS> diakopter: he backlogs anyway

[12:15] <diakopter> I knew that, but this bumps it to the front of the line if he says something before finishing backlogging :p

[12:21] <FROGGS> p: sub foo(\self) { self } # dunno if this should be bugreported

[12:21] <camelia> rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/wIbQq3sIJk␤'self' used where no object is available␤at /tmp/wIbQq3sIJk:1␤------> [32msub foo(\self) { [33m⏏[31mself } # dunno if this should be bugrepo[0m␤    expecting any of:␤   …»

[12:25] *** atroxaper joined
[12:28] *** filly joined
[12:31] *** tgt left
[12:33] *** tgt joined
[12:40] *** SamuraiJack_ joined
[12:44] *** xinming left
[12:46] *** aborazmeh left
[13:06] *** benabik left
[13:16] <bbkr> https://github.com/bbkr/GeoIPerl6/blob/master/lib/GeoIP/City.pm#L3-L23 - should GeoIP::City::GeoIPRecord also be mentioned in "provides" section of META.info?

[13:18] <FROGGS> only if one ever is going to "use" it

[13:19] *** darutoko left
[13:19] *** dayangkun joined
[13:19] <FROGGS> but since one could do "use GeoIP::City" and will get it exported, all is fine

[13:20] <FROGGS> bbkr: look at it like an enum, if you have a file that only contains that enum and which should be used somehow, you need to add it to provides

[13:20] <bbkr> i thought this section purpose was to index all provided name spaces. thanks for clarification

[13:20] *** darutoko joined
[13:21] <FROGGS> it is more like a compilation unit lookup hint

[13:22] *** atroxaper left
[13:22] *** Mouq joined
[13:23] *** atroxaper joined
[13:23] *** rindolf left
[13:27] *** Mouq left
[13:32] *** atroxaper left
[13:32] *** atroxaper joined
[13:33] *** xinming joined
[13:34] <lizmat> FROGGS: I thought it is more authoritative information

[13:37] *** rindolf joined
[13:43] *** sqirrel_ left
[13:47] *** kaleem left
[13:51] <dalek> perl6-roast-data: a6f9384 | coke++ | bin/rakudo.moar.sh:

[13:51] <dalek> perl6-roast-data: Cargo cult config option from TimToady++

[13:51] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/a6f938478a

[13:53] *** kaare__ joined
[13:53] * [Coke] sees advent postings are going up at the beginning of the day, not the end of the day. whoops.

[13:54] * [Coke] voice memod a bunch of notes on the drive in which will hopefully coalesce into an appropriately-word-counted article by this evening.

[13:55] <timotimo> oh my, my article is due soon-ish

[13:59] *** btyler joined
[13:59] <timotimo> FROGGS: i need to add a provides entry for all modules in my package even if they are not supposed to be used outside of it, right? because the use statement inside the distribution itself would also need to query the database?

[14:03] *** hummeleB1 joined
[14:04] *** raiph joined
[14:05] *** btyler left
[14:10] *** ajr joined
[14:10] *** ajr is now known as ajr_

[14:16] *** PacoAir joined
[14:16] *** bluescreen10 joined
[14:26] <FROGGS> timotimo: correct

[14:27] <FROGGS> lizmat: it is because we can't guess that information

[14:33] *** xinming_ joined
[14:33] * timotimo updated a few random modules

[14:33] <timotimo> can we get an extra logo to modules.perl6.org that shows if there's a provides? like a panda with a little "S11" in the corner?

[14:34] <FROGGS> nice idea... dunno how to do that yet

[14:35] *** kaleem joined
[14:35] <timotimo> where do i have to look to find the code?

[14:35] <timotimo> i think i can make that patch

[14:35] *** xinming left
[14:36] <FROGGS> timotimo: http://github.com/perl6/modules.perl6.org/

[14:37] *** FROGGS left
[14:40] *** xinming joined
[14:42] <timotimo> surprisingly obvious :)

[14:42] *** xinming_ left
[14:42] *** sftp_ left
[14:42] <timotimo> oh, this is perl5 :\

[14:42] *** araujo left
[14:43] *** araujo joined
[14:43] <FROGGS[mobile]> hehe

[14:43] <timotimo> $projects->{$name}->{'badge_panda'} = defined $json->{'source-url'};

[14:43] <timotimo> seems straightforward to add to that

[14:43] <FROGGS[mobile]> yeah

[14:44] <FROGGS[mobile]> the hardest thing should be the png

[14:44] *** hummeleB1 left
[14:45] *** kaleem left
[14:46] <timotimo> hah, that's not that hard

[14:46] <timotimo> i suppose it could make badge_panda an integer instead of a boolean

[14:47] <timotimo> so ... (defined $json->{'source-url'}) + (defined $json->{'provides'} && defined $json->{'provides'})

[14:47] <timotimo> that doesn't look elegant :P

[14:47] <timotimo> so maybe a ternary instead

[14:47] <FROGGS[mobile]> *g*

[14:47] <FROGGS[mobile]> Ohh, that is fine

[14:51] <timotimo> maybe the original badge should get a "not s11 compliant" symbol of some sort, instead of adding "s11" to the pandas of the modules that have it

[14:51] <timotimo> because we're expecting s11 to be the norm soon, and not being s11 should give a tiny warning, sort of

[14:54] *** sftp joined
[14:55] *** hummeleB1 joined
[14:55] *** btyler joined
[14:58] <FROGGS[mobile]> +1

[15:04] <timotimo> oh, HTML::Template requires me to make it two bools

[15:06] <FROGGS[mobile]> Why that?

[15:07] <dalek> modules.perl6.org/s11: d166faf | (Timo Paulssen)++ | web/ (4 files):

[15:07] <dalek> modules.perl6.org/s11: display conformity to the new S11

[15:07] <dalek> modules.perl6.org/s11: 

[15:07] <dalek> modules.perl6.org/s11: ... by giving all other modules a red strike-through "S11"

[15:07] <dalek> modules.perl6.org/s11: on the panda's head.

[15:07] <dalek> modules.perl6.org/s11: review: https://github.com/perl6/modules.perl6.org/commit/d166faf012

[15:08] <timotimo> because there's TMPL_IF, but not TMPL_IF_== ;)

[15:08] <timotimo> what do you think?

[15:09] <timotimo> oh, i forgot to add the alt to the image

[15:10] <dalek> modules.perl6.org/s11: 56bfafe | (Timo Paulssen)++ | web/index.tmpl:

[15:10] <dalek> modules.perl6.org/s11: supply an alt text for the image, too.

[15:10] <dalek> modules.perl6.org/s11: review: https://github.com/perl6/modules.perl6.org/commit/56bfafeb52

[15:10] *** Mouq joined
[15:11] <timotimo> PR'd, because i'm not certain of my p5 skills and didn't test-run it

[15:15] *** Mouq left
[15:20] *** araujo left
[15:21] *** araujo joined
[15:24] *** thou joined
[15:25] <timotimo> FROGGS[mobile]: https://github.com/perl6/ecosystem/blob/master/spec.pod <- when is the right moment to update that?

[15:25] <timotimo> putting provides into "mandatory fields"? or perhaps first in "optional fields" and then moving it over?

[15:26] <FROGGS[mobile]> Dunno

[15:27] <FROGGS[mobile]> Let's wait a few days for comments on the post...

[15:27] <timotimo> OK :)

[15:27] <FROGGS[mobile]> But then I'd make it mandatory and review the spec

[15:29] *** bluescreen10 left
[15:34] *** Fatalnix left
[15:34] *** Fatalnix joined
[15:37] *** xinming_ joined
[15:39] *** xinming left
[15:43] *** eternaleye left
[15:45] *** SamuraiJack_ left
[15:47] *** eternaleye joined
[15:56] *** dprelec left
[15:59] *** Psyche^_ joined
[16:01] *** benabik joined
[16:02] *** Psyche^ left
[16:11] *** ajr joined
[16:11] *** ajr_ left
[16:12] *** ajr is now known as Guest7442

[16:12] *** Guest7442 is now known as ajr_

[16:25] *** vytas joined
[16:26] *** [Sno] left
[16:29] *** FROGGS joined
[16:33] *** xinming joined
[16:35] *** xinming_ left
[16:42] *** jnap joined
[16:44] <FROGGS> timotimo: I'd propose this: http://froggs.de/perl6/panda_nos11.png

[16:45] <timotimo> i like that better

[16:46] *** zakharyas left
[16:46] <timotimo> i'll integrate it into my pull request

[16:46] <dalek> modules.perl6.org/s11: 0557ce9 | (Timo Paulssen)++ | web/panda_nos11.png:

[16:46] <dalek> modules.perl6.org/s11: FROGGS++ design for the nos11 icon

[16:46] <dalek> modules.perl6.org/s11: review: https://github.com/perl6/modules.perl6.org/commit/0557ce96f8

[16:47] <dalek> modules.perl6.org: d166faf | (Timo Paulssen)++ | web/ (4 files):

[16:47] <dalek> modules.perl6.org: display conformity to the new S11

[16:47] <dalek> modules.perl6.org: 

[16:47] <dalek> modules.perl6.org: ... by giving all other modules a red strike-through "S11"

[16:47] <dalek> modules.perl6.org: on the panda's head.

[16:47] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/d166faf012

[16:47] <dalek> modules.perl6.org: 56bfafe | (Timo Paulssen)++ | web/index.tmpl:

[16:47] <dalek> modules.perl6.org: supply an alt text for the image, too.

[16:47] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/56bfafeb52

[16:47] <dalek> modules.perl6.org: 0557ce9 | (Timo Paulssen)++ | web/panda_nos11.png:

[16:47] <dalek> modules.perl6.org: FROGGS++ design for the nos11 icon

[16:47] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/0557ce96f8

[16:47] <dalek> modules.perl6.org: 4806ddf | (Tobias Leich)++ | web/ (4 files):

[16:47] <dalek> modules.perl6.org: Merge pull request #3 from perl6/s11

[16:47] <dalek> modules.perl6.org: 

[16:47] <dalek> modules.perl6.org: S11

[16:47] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/4806ddf058

[16:47] <timotimo> cool :)

[16:47] <timotimo> how long until the website gets updated? can we poke it manually?

[16:48] <FROGGS> I don't think there could went something wrong :o)

[16:50] *** Celelaptop left
[16:51] <FROGGS[mobile]> No idea about the update 

[16:51] *** kaleem joined
[16:51] <timotimo> it'll happen soon enough

[16:52] *** Celelaptop joined
[16:55] <jnthn> FROGGS: From backlog - I don't think Rakudo knows how to do custom post-circumfixes yet

[16:58] *** Mouq joined
[16:59] *** Celelaptop left
[16:59] *** nnunley joined
[17:02] <FROGGS[mobile]> jnthn: true, I found out that I just need to tweak v5's grammar 

[17:03] <FROGGS[mobile]> just so I am able to use that from the actions

[17:03] *** Mouq left
[17:03] <FROGGS[mobile]> rakudo can stay unchanged

[17:03] *** denis_boyun left
[17:03] <jnthn> btw, my two Build Stuff talks were recorded, and I signed a video disclaimer, so I guess they'll appear online sometime soon :)

[17:03] <timotimo> cool :)

[17:03] <FROGGS[mobile]> cool

[17:04] <FROGGS[mobile]> :o)

[17:04] <FROGGS[mobile]> jnthn: can I get a comment on my advent post from you?

[17:04] <jnthn> In the meantime, slides are at http://jnthn.net/papers/2013-bs-invoke-dynamic.pdf and http://jnthn.net/papers/2013-bs-secret-life-of-gc.pdf

[17:04] <FROGGS[mobile]> (about the implementation)

[17:05] <jnthn> FROGGS[mobile]: yes, though I have to head out in 5 mins...

[17:05] <jnthn> link?

[17:05] <FROGGS[mobile]> Todays post

[17:06] *** dmol joined
[17:06] <FROGGS> jnthn: here http://perl6advent.wordpress.com/2013/12/11/day-11-installing-modules/

[17:06] <FROGGS> jnthn: read whenever you brane has some capacity :o)

[17:07] <FROGGS[mobile]> your*

[17:09] <FROGGS[mobile]> btw, hacking v5 is pretty fun atm :o)

[17:09] *** cognominal left
[17:09] *** rindolf left
[17:11] *** spider-mario joined
[17:13] <jnthn> FROGGS[mobile]: Dinner now, will read it when I return :)

[17:13] <jnthn> bbiab

[17:14] *** Celelaptop joined
[17:14] <FROGGS> umm, is that valid json? https://github.com/timo/ADT/blob/master/META.info#L8-L9

[17:17] *** atroxaper left
[17:19] <moritz> looks right to me

[17:19] <FROGGS> star: use JSON::Tiny;

[17:19] <camelia> star 2013-09: ( no output )

[17:20] <FROGGS> star: use JSON::Tiny; say from-json '{ "a": 42 }'

[17:20] <camelia> star 2013-09: OUTPUT«("a" => 42).hash␤»

[17:20] <FROGGS> k

[17:20] <FROGGS> was it YAML that required whitespace before the colon?

[17:20] <moritz> no, YAML doesn't require that

[17:24] *** sqirrel_ joined
[17:25] <FROGGS> weird

[17:26] <FROGGS> timotimo: it does not show the <s>S11</s> icon... http://modules.perl6.org/

[17:28] <benabik> Is the S11 icon a panda?  I see it.

[17:28] <FROGGS> benabik: do you see a panda for the ABC module?

[17:29] <benabik> FROGGS: Not for ABC, but for ADT

[17:29] <FROGGS> benabik: right, and it should show this one here https://github.com/perl6/modules.perl6.org/blob/0557ce96f8ddcb1f2af7a839262e965579818ed6/web/panda_nos11.png

[17:29] <FROGGS> (for AB)

[17:29] <FROGGS> ABC*

[17:30] <benabik> No, I see the standard no metal here thing.

[17:30] <FROGGS> correct, this is what I am complaining about :o)

[17:32] *** filly left
[17:33] *** filly joined
[17:34] <moritz> I just watched https://class.coursera.org/compilers/lecture/4

[17:35] <moritz> there are many points I agree with, but which I haven't thought very clearly about before

[17:35] <moritz> https://class.coursera.org/compilers/lecture/preview for the table of contents

[17:35] <FROGGS> nice!

[17:41] *** kaleem left
[17:42] <dalek> modules.perl6.org: 522594e | (Tobias Leich)++ | web/lib/P6Project/ (2 files):

[17:42] <dalek> modules.perl6.org: this hopefully fixes displaying the no-S11 badge

[17:42] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/522594e721

[17:43] <FROGGS> looks like we have to wait 40 minutes

[17:44] *** denis_boyun joined
[17:44] *** [Sno] joined
[17:46] <TimToady> good time to read jnthn++ slides :)

[17:54] *** baest left
[17:55] <TimToady> or ponder a bunch of relatively low-wattage syntax sugars for C#

[17:58] <FROGGS[mobile]> I smiled when spotting their "using" :o)

[18:01] <retupmoca> http://modules.perl6.org/panda_nos11.png --> 404 Not Found :(

[18:03] <retupmoca> lots of "Bronze Panda badge" text on the modules page, though

[18:05] <FROGGS> retupmoca: seen it too right now

[18:05] <moritz> FROGGS[mobile]: you have to add the new .png to @MEDALS

[18:05] <moritz> FROGGS[mobile]: then web/build-project-list.pl will copy it to the destination dir

[18:06] <retupmoca> so when I try to use a specific version of a module in rakudo, is the META.info information the only thing it looks at?

[18:07] <retupmoca> or will it look at pod stuff or the class Name:ver<1.1> stuff as well?

[18:07] <dalek> modules.perl6.org: 8f0deff | (Tobias Leich)++ | web/build-project-list.pl:

[18:07] <dalek> modules.perl6.org: added panda_nos11.png to @MEDALS, moritz++ and retupmoca++

[18:07] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/8f0deffb6a

[18:07] <FROGGS> retupmoca: it takes only the META.info into account

[18:08] <FROGGS> retupmoca: maybe this META.info will be generated for you out of information available in pod, we'll see

[18:08] <retupmoca> ok. What does it do for modules that haven't been panda-installed?

[18:08] <FROGGS> k, 14 minutes to wait

[18:08] <retupmoca> (as in I'm creating something new and do a use lib 'lib'; in a repl)

[18:08] <FROGGS> retupmoca: these will takes, whatever version they have

[18:09] <FROGGS> that is what I call "development modules"

[18:09] <FROGGS> but these should vanish over time

[18:09] *** ajr_ left
[18:10] <FROGGS> so only real dev modules should be in such a path some day

[18:10] <retupmoca> right

[18:10] <retupmoca> does version "*" in the META.info do anything special? Or should I put a real number in?

[18:10] <FROGGS> when installed it will be treated as version 0

[18:11] <retupmoca> simple enough

[18:11] <FROGGS> otherwise it would beat every future version of that module

[18:11] <FROGGS> because:

[18:11] <FROGGS> p: say * > 42

[18:11] <camelia> rakudo-parrot 0bf3de: OUTPUT«WhateverCode.new()␤»

[18:11] <FROGGS> p: say so * > 42

[18:11] <camelia> rakudo-parrot 0bf3de: OUTPUT«WhateverCode.new()␤»

[18:11] <FROGGS> gah

[18:14] *** gdey joined
[18:15] *** sqirrel joined
[18:15] *** jnap left
[18:16] *** sqirrel left
[18:16] *** sqirrel joined
[18:16] <FROGGS> p: say so Version.new('*') > v42

[18:16] <camelia> rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/mgMJpCHKry␤Undeclared routine:␤    v42 used at line 1␤␤»

[18:17] <FROGGS> p: say so Version.new('*') cmp v42

[18:17] <camelia> rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/MqSO6cwkmG␤Undeclared routine:␤    v42 used at line 1␤␤»

[18:17] <FROGGS> p: say so Version.new('*') cmp v42.0.0

[18:17] <camelia> rakudo-parrot 0bf3de: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/8OfYJf3ghl␤Confused␤at /tmp/8OfYJf3ghl:1␤------> [32msay so Version.new('*') cmp v42.[33m⏏[31m0.0[0m␤    expecting any of:␤        argument list␤        postfix␤        dotty m…»

[18:17] <FROGGS> p: say so Version.new('*') cmp Version.new(42)

[18:17] <camelia> rakudo-parrot 0bf3de: OUTPUT«Default constructor for 'Version' only takes named arguments␤  in method new at gen/parrot/CORE.setting:800␤  in method new at gen/parrot/CORE.setting:795␤  in block  at /tmp/B9TSe4LEQA:1␤  in any  at /tmp/B9TSe4LEQA:1␤  in any  at gen/parrot/s…»

[18:18] <FROGGS> p: say Version.new('*') cmp Version.new('42') # I am going nuts

[18:18] <camelia> rakudo-parrot 0bf3de: OUTPUT«More␤»

[18:18] <FROGGS> it is not easy to use Version

[18:22] *** jnap joined
[18:22] <FROGGS> http://modules.perl6.org/ <--- works now! :o)

[18:23] <FROGGS> timotimo++ # that is really a nice thing :o)

[18:23] *** beastd joined
[18:23] <benabik> The difference between good and bad is really subtle.

[18:24] *** sqirrel_ left
[18:25] <Fatalnix> oh boy, who what the hell is with all of the colors

[18:27] <FROGGS> Fatalnix: colors? what colors?

[18:28] *** sqirrel left
[18:31] <[Coke]> http://modules.perl6.org/fame-and-profit - should that show the new S11 badge?

[18:31] <benabik> It does, for me.

[18:31] <timotimo> hmm

[18:31] <timotimo> it would be cool to get a daily report of ecosystem activity

[18:32] <FROGGS> timotimo: are an adhoc update to a separate (logged) channel

[18:32] <timotimo> "$n modules updated their master, $nb modules changed their META.info, $m modules had changes in branches, $x new modules, ..."

[18:34] <FROGGS> [Coke]: I hope we don't need the S11 badge for long... (in fact, I hope we can drop it in january already)

[18:36] *** darutoko left
[18:39] *** ajr joined
[18:39] *** ajr is now known as ajr_

[18:41] *** rindolf joined
[18:43] <Fatalnix> FROGGS: heh.

[18:43] <[Coke]> FROGGS: ok. in the meantime, I have no idea what it means.

[18:44] <[Coke]> benabik: for me, it shows the panda, not the branded panda.

[18:44] <timotimo> you can mouse over the icon to get a short explanation

[18:44] <timotimo> but yeah, i can write a tiny bit about it in the other page if you'd like

[18:44] <benabik> [Coke]: The branded panda is the bad one.  ('tis a bit confusing)

[18:46] <[Coke]> benabik: yes. which is why having docs would help.

[18:46] * [Coke] is happy enough with the mouseovers for now.

[18:47] *** Mouq joined
[18:47] *** jnap1 joined
[18:47] *** jnap left
[18:47] <timotimo> it would be much more amusing if the sign was black on yellow and said "S21"

[18:51] *** Mouq left
[18:54] *** gdey left
[18:55] *** fhelmberger_ joined
[18:56] <FROGGS> hehe

[18:57] *** fhelmberger left
[19:03] *** fhelmberger_ left
[19:04] *** fhelmberger joined
[19:05] *** sqirrel joined
[19:08] *** fhelmberger left
[19:10] *** sqirrel left
[19:10] *** sqirrel joined
[19:12] *** sqirrel_ joined
[19:12] *** sqirrel left
[19:13] *** AndChat-372521 joined
[19:13] *** sqirrel_ left
[19:14] <lue> hello world o/

[19:15] *** AndChat-372521 left
[19:15] *** ssutch joined
[19:15] *** ssutch left
[19:16] <FROGGS> hi lue 

[19:16] *** ssutch joined
[19:17] <timotimo> "$foo modules lost their freshness badge today"

[19:22] *** ssutch left
[19:30] *** ssutch joined
[19:30] *** Shozan left
[19:32] *** sqirrel_ joined
[19:32] *** SHODAN joined
[19:46] *** jnap1 left
[19:55] *** aindilis` left
[19:57] *** aindilis joined
[19:58] *** rindolf left
[19:59] <timotimo> jnthn: http://questhub.io/realm/perl/quest/52a5fce49f567a5a0200005b/comment/52a6001a9f567ab87a000056 - can you make sense of the dramatically small difference between those measurements?

[20:01] <benabik> timotimo: That's like 20%

[20:01] <timotimo> yeah. i was expecting more like 80%

[20:02] <benabik> I don't think calls are THAT inefficient compared to string operations.

[20:02] <timotimo> the whatever code example supposedly does a clone of a WhateverCode object and calls that for each operator or . in that thingie

[20:02] <benabik> What backend?

[20:03] <timotimo> this is parrot

[20:03] <timotimo> .o(no, this is patrick!)

[20:04] <timotimo> benabik: you were the one i talked to about the find_cclass caching thing, weren't you?

[20:04] <benabik> timotimo: Sounds familiar

[20:04] <timotimo> is there an efficient and simple way to tell (while inside an op in parrot) if i'm being executed by the first thread?

[20:05] <benabik> No idea.

[20:05] <timotimo> OK

[20:12] * lizmat suddenly realizes she has no time to write an advent blogpost tomorrow

[20:12] <lizmat> which means I need to write it tonight  :-)

[20:13] <FROGGS> lizmat: good that there is always a plan B :o)

[20:15] <timotimo> i may end up with a working (but quite ugly) prototype for working chained WhateverCode some time later tonight

[20:15] <FROGGS> working++

[20:15] <timotimo> more like ++working actually ;)

[20:16] <benabik> Well, working++, but ++timotimo  :-)

[20:16] <timotimo> hehe

[20:16] <FROGGS> exactly :o)

[20:33] <lizmat> [Coke]: I also just realized that *if* you're strapped for time for you blog post, we could do a swap

[20:33] <lizmat> so that would give you some more time?

[20:35] *** Mouq joined
[20:36] * jnthn back

[20:36] <lizmat> jnthn o/

[20:36] <nwc10> post-beer?

[20:36] <jnthn> nwc10: Yes, went to a place with 18 different Lithuanian beers on tap and some nice pub food.

[20:37] * jnthn looks at the FROGGS post

[20:38] <FROGGS> :o)

[20:39] *** Mouq left
[20:42] <FROGGS>  /o\ http://de.webfail.com/7fe994aa327

[20:43] *** araujo left
[20:44] *** benabik left
[20:44] *** araujo joined
[20:45] *** benabik joined
[20:48] <jnthn> FROGGS: In the perl6 -ICompUnitRepo::Local::File:prio[10]=/home/peter/project-a:/home/peter/project-b how does the priority stuff work?

[20:48] * jnthn is struggling to guess what the 10 means :)

[20:49] <FROGGS> the default priority is 0, which the CompUnitRepo::Local::Installation (aka %*CUSTOM_LIB< home site vendor perl >) have

[20:50] <FROGGS> the higher the priority the earlier they appear in the list of candidate groups

[20:50] <FROGGS> all repos of one priority are considered a group, and the best compunit wins

[20:51] <FROGGS> if there is no candidate for the first group, go the next group (== lower prio)

[20:51] <lizmat> which effectively makes @INC a hash without order ?

[20:51] <FROGGS> lizmat: it is not in @INC yet

[20:51] <lizmat> or would you use the priority to insert the CompUnitRepo at the right place in INC ?

[20:52] <FROGGS> CompUnitRepo itself keeps a @repos atm, wich could because @INC

[20:52] <FROGGS> lizmat: yes, sort of

[20:52] <FROGGS> the default is that there is a CompUnitRepo::Local::File:prio[1] and four CompUnitRepo::Local::Installation:prio[0] for home, site, vendor...

[20:53] <FROGGS> the File:: thingy points to the current install/lib/parrot/.../lib and install/lib/parrot/.../site/lib

[20:53] <FROGGS> ::File thingy*

[20:55] <FROGGS> jnthn: you might want to read the diff of the eleven branch, it is not too muh to read

[20:55] <FROGGS> though, I need to add comments

[20:55] <lizmat> #120739   # abuse rtbot

[20:55] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120739

[20:56] <benabik> lizmat: Isn't that less an abuse and more the intended purpose?

[20:57] <lizmat> well, I'm just interested in the link, to be copied into my blog post

[20:57] <lizmat> not to have everybody's attention about that bug

[20:58] <lizmat> hmmm... I guess I should just privmsg synopsebot   :-)

[21:00] *** jnap joined
[21:01] <FROGGS> lizmat: how are these variables called? ${^TAINT}, ${^UNICODE}, ${^UTF8CACHE}, ${^UTF8LOCALE}

[21:02] <lizmat> FROGGS: I have no idea

[21:02] <FROGGS> k

[21:02] *** dayangkun left
[21:04] *** dmol left
[21:06] *** dmol joined
[21:18] *** sqirrel_ left
[21:19] *** dayangkun joined
[21:21] *** shinobicl joined
[21:21] <shinobicl> hi!

[21:21] *** denis_boyun left
[21:21] <FROGGS> hi

[21:22] <shinobicl> in http://modules.perl6.org/...

[21:22] *** Mouq joined
[21:22] <shinobicl> what does the panda icon with S11 means?

[21:22] <FROGGS> yeah

[21:23] <FROGGS> shinobicl: S11 is about synopsis 11, and we added a requirement in the META.info for this synopsis

[21:23] <shinobicl> is a warning or an error, or deprecated?

[21:23] <shinobicl> ahhhh ok thanks!!!

[21:23] <FROGGS> shinobicl: http://perl6advent.wordpress.com/2013/12/11/day-11-installing-modules/

[21:23] <FROGGS> see the last paragraph there

[21:23] *** jnap left
[21:24] <FROGGS> shinobicl: it is about a new way to install modules, and for making that work we need that extra bit of information in the META.info

[21:27] *** denis_boyun joined
[21:27] *** jnap joined
[21:29] <shinobicl> thanks FROGGS, i've updated mi META.info :)

[21:29] <shinobicl> s/mi/my/;

[21:30] <lizmat> timotimo: just an idea for a blogpost: something about the RaNIW, and the slides and lovely excercise material that came from it?

[21:30] <FROGGS> shinobicl++ # thank you!

[21:31] <FROGGS> :o)

[21:31] <lizmat> or is that something you wanted to mention in your Day 17 blog post?

[21:35] *** raiph left
[21:38] <timotimo> lizmat: why me? :P

[21:39] <timotimo> did you even look at my writing? :D

[21:39] *** raiph joined
[21:42] <lizmat> timotimo: did I miss something?

[21:43] <jnthn> time for some sleep...'night

[21:43] <lizmat> gnight jnthn, sweet dreams

[21:44] *** denis_boyun left
[21:44] <lizmat> timotimo: I guess I thought about you because you were there and since then has done lots of internals stuff ?

[21:46] *** spider-mario left
[21:52] *** kivutar joined
[21:59] <timotimo> hehe

[21:59] <timotimo> you missed that i don't write very well :)

[22:00] <lizmat> well, if you don't practice, it will never get better

[22:00] <PerlJam> timotimo: you're on channel full of potential editors to help you improve the writing.

[22:01] <timotimo> hehe

[22:01] <PerlJam> (even if we occasionally drop a word or two :)

[22:02] *** kaare__ left
[22:03] <lue> .oO( (even if we occasionally a word or two :) )

[22:06] <lizmat> licorice!

[22:07] <lizmat> .oO( only understandable for the native Dutch amongst us )

[22:08] *** BenGoldberg joined
[22:08] *** DrEeevil joined
[22:09] *** bonsaikitten left
[22:11] *** jnap left
[22:16] *** pochi joined
[22:17] *** labster_ joined
[22:19] *** benabik left
[22:20] *** pochi_ left
[22:20] *** labster left
[22:20] *** labster_ is now known as labster

[22:22] *** cxreg2 is now known as cxreg

[22:22] *** BenGoldberg left
[22:24] *** denisboyun joined
[22:24] *** denisboyun left
[22:25] *** BenGoldberg joined
[22:31] *** BenGoldberg left
[22:31] *** Ben_Goldberg joined
[22:32] *** Ben_Goldberg is now known as BenGoldberg

[22:32] <[Coke]> lizmat: I was going to say you shouldn't enable me, but my boss decalred he's taking the team out for drinks and dinner this evening, which makes a date switch much more attractive.

[22:33] <lizmat> then by all means, go out and have drinks and dinner

[22:33] <[Coke]> I can still make one in time for tomorrow, but would appreciate the day of slack.

[22:33] * lizmat gives [Coke] a day of slack

[22:33] <[Coke]> \o/

[22:34] <[Coke]> you are, as always, the best. Danke.

[22:35] <dalek> mu: c77798b | (Elizabeth Mattijsen)++ | misc/perl6advent-2013/schedule:

[22:35] <dalek> mu: Switching with [Coke]

[22:35] <dalek> mu: review: https://github.com/perl6/mu/commit/c77798bd10

[22:35] <lizmat> yw

[22:35] <lizmat> :-)

[22:38] *** ajr_ left
[22:39] *** ssutch left
[22:43] <[Coke]> lizmat++

[22:44] <[Coke]> oh, crap, I also owe a blog post to TPF.

[22:44] <[Coke]> tomorrow is a twofer.

[22:44] <[Coke]> I need to start using obra++'s hiveminder again

[22:45] *** PacoAir left
[22:46] *** beastd left
[22:48] <lizmat> [Coke]: I'm afraid I won't be able to give you some more slack tomorrow  :-(

[22:49] <lizmat> maybe jnthn or masak may be able to move up theirs

[22:49] <lizmat> *their next one

[22:49] <lizmat> work in progress so far: http://perl6advent.wordpress.com/?p=2040&preview=true

[22:51] <BenGoldberg> Doesn't show up for me

[22:51] <BenGoldberg> 404 not found

[22:51] <lizmat> I guess you don't have a login

[22:51] <BenGoldberg> Correct

[22:51] <lizmat> https://gist.github.com/lizmat/7919978/raw/1b6858eb7770ba708fbff6c2318293780959ca22/gistfile1.txt

[22:52] <lizmat> should be public, although not rendered

[22:52] <BenGoldberg> Yup, works

[22:52] <lue> r: "aaaaa" ~~ /(a)+/; for $/[0..*-1] { say $_ }  # today I learned this is apparently crazy-talk behavior for repeated capture groups in the rest of the regexverse.

[22:52] <camelia> rakudo-parrot 0bf3de, rakudo-jvm 0bf3de: OUTPUT«｢a｣␤␤｢a｣␤␤｢a｣␤␤｢a｣␤␤｢a｣␤␤»

[22:53] *** jnap joined
[22:54] *** ssutch joined
[22:57] <BenGoldberg> In perl5, each successive match would replace the previous value of $1

[22:57] * BenGoldberg imagines extending perl5, so that a regex like that filled in @1

[22:58] * BenGoldberg . o O ( Too much work ... that's what perl6 is for! )

[22:59] *** ssutch left
[23:00] <lue> BenGoldberg: that explains why Boost is being a jerk about doing the right thing :/ . At least there's seemingly an experimental feature thing I can turn on to get the right behavior.

[23:00] <lue> lizmat: good post so far, the very last codeblock was formatted differently from the previous ones (<pre>/<code> issue methinks)

[23:00] <lizmat> [Coke]: make it a blog post postable on both perl6 advent and TPF ?

[23:01] <lizmat> I mean, if Hollywood can do that with cross-fertilizing TV series and cutting on production costs like that

[23:01] <lizmat> why can't we ?

[23:01] <lizmat> (assuming the TPF one is to be about Perl 5? )

[23:02] <lizmat> lue: that was me testing: the <code> renders way too large

[23:03] <lue> lizmat: for me, the <pre> renders waaaaaaaaaaay too small :) . [I still used it in my posts because it was the norm though]

[23:04] <lue> (of course, setting my monospace font to the size of the normal fonts would fix that, but then the monospace font's too big for me everywhere else on the web.)

[23:07] *** kivutar left
[23:08] <lue> .oO(nvm, I'd have to recompile Boost. *shakes fist at Perl 5*)

[23:15] *** jeffreykegler joined
[23:24] <timotimo> oh wow

[23:24] <timotimo> i was wondering where the hell the call to the old whatevercode came from

[23:24] <timotimo> turns out i had my $new := QAST::Op.new( [...], $old )

[23:24] <timotimo> yeah, that's going to add the old stuff in there, too

[23:25] <timotimo> i was looking at *every* line in the function except that

[23:26] <timotimo> blergh, i feel i was dumb now :|

[23:26] *** BenGoldberg left
[23:28] *** raiph left
[23:34] <TimToady> lizmat: line with say %h:!exists seems to be missing a <a b> maybe?

[23:34] <TimToady> or some such

[23:34] <timotimo> "does the hash not exist?"

[23:35] *** ssutch joined
[23:35] <lizmat> argh.... <a b c> is eaten by wordpress as some invalid HTML

[23:35] <timotimo> yeah, i think it won't if you put it in <pre> or something

[23:35] <timotimo> what do other people use to make in-line code segments?

[23:36] <TimToady> well, it's just one True so maybe <a>

[23:38] <lue> perl6++ for not being dumb about repeated capture groups by the way :)

[23:39] <TimToady> you mean perl5-- for being stupid about them :)

[23:39] <lizmat> TimToady: fixed, thanks!

[23:39] <TimToady> well, perl1 really

[23:39] <lue> yeah, but p6++ for fixing it :)

[23:40] <TimToady> it seemed a pretty obvious thing to fix, what, more than decade ago now...

[23:40] <lue> I really wish Perl 6 regexes would start replacing P5-inspired ones real soon. Stuff like (?: ) feels incredibly wrong, for starters.

[23:41] * lue doesn't quite buy Boost's "repeating captures is a massive performance hit, so you have to recompile all of Boost to get them", seeing as Rakudo on Parrot can run pretty fast with this magical ability.

[23:42] <lue> p: "abcabcabcabc" ~~ / (abc)+ /; say now - BEGIN now, " is just too long!";

[23:42] <camelia> rakudo-parrot 0bf3de: OUTPUT«Instant:1386805375.631707␤»

[23:42] <lue> p: "abcabcabcabc" ~~ / (abc)+ /; say (now - BEGIN now), " is just too long!";

[23:42] <camelia> rakudo-parrot 0bf3de: OUTPUT«0.0846417 is just too long!␤»

[23:43] *** xenoterracide joined
[23:43] <lue> TimToady: It almost makes me want to write a libp6regex, because Perl 6's regexes are *so much* better :)

[23:44] *** xinming left
[23:44] *** xinming joined
[23:45] <lizmat> maybe diakopter could be persuaded to allow for Petl 6 regexen in Perl 5 code in the MoarVM perl 5 interop ?

[23:45] <timotimo> wow, i've derped the hell out of this code

[23:46] <lue> lizmat: that sounds like a nice idea, so long as diakopter has the tuits for it :)

[23:46] <lue> Won't benefit me, but P6 regexes are too nice to keep to ourselves :)

[23:46] <timotimo> that's true

[23:46] *** jnap left
[23:46] <lizmat> maybe it's on his list already, but probably on the "nice to have" list

[23:46] <timotimo> could we also get lexical $_ and $/ and stuff? :P

[23:47] * lue wonders how a C++ p6regex library would implement <subrules>...

[23:47] <lizmat> but since P5 now has installable regex engines (afaik), that could make things simpler

[23:47] *** jnap joined
[23:47] <timotimo> with a register that's kinda like a hash?

[23:48] <lue> timotimo: perhaps. The "regex" part of Perl 6 regexes is dead simple; the "grammar" aspect is the interesting part :)

[23:48] <timotimo> yeah

[23:48] <timotimo> especially deriving and stuff

[23:49] <timotimo> we won't be able to write them directly into the code like in p6 anyway except with a crazy amount of preprocessoring

[23:49] <lue> I imagine the worst part about writing libp6regex would be the lack of regexes to parse regex strings :P

[23:49] <timotimo> :D

[23:49] <timotimo> it should, of course, be self-hosting!! ;)

[23:53] <lue> Sure, I could use a regex library, but the C++11 one on my system is buggy atm, and as mentioned I'm underwhelmed with Boost.

[23:54] * lue might just do libp6regex after finishing his DLX solver in C++.

[23:54] <timotimo> wow. i finally hvae that prototype i talked about!

[23:55] <lue> \o/

[23:55] *** benabik joined
[23:55] *** benabik left
[23:55] <lue> (or rather, 🙌)

[23:55] <timotimo> https://gist.github.com/timo/13090bda08ab4824b515

[23:56] <timotimo> added the AST output, too

[23:56] <timotimo> \o/

[23:56] <timotimo> but the code is a *mess*

[23:56] <timotimo> a royal mess

[23:57] <lue> timotimo: I have no idea if that's good or not, aside from the lack of backtraces :)

[23:57] <timotimo> r: say "$_, {(10 < * < 20)($_)}" for ^30

[23:57] <camelia> rakudo-jvm 0bf3de: OUTPUT«use of uninitialized value of type Nil in numeric context␤0, True␤use of uninitialized value of type Nil in numeric context␤1, True␤use of uninitialized value of type Nil in numeric context␤2, True␤use of uninitialized value of type Nil in numer…»

[23:57] <camelia> ..rakudo-parrot 0bf3de: OUTPUT«0, True␤1, True␤2, True␤3, True␤4, True␤5, True␤6, True␤7, True␤8, True␤9, True␤10, True␤11, True␤12, True␤13, True␤14, True␤15, True␤16, True␤17, True␤18, True␤19, True␤20, True␤21, True␤22, True␤23, True␤…»

[23:57] <timotimo> compare the outputs :)

[23:59] *** xenoterracide left
