[00:06] *** awwaiid joined
[00:07] *** jeffreykegler joined
[00:08] *** jeffreykegler left
[00:08] *** jeffreykegler joined
[00:17] *** colomon left
[00:35] *** pyrimidine left
[00:35] *** Chillance left
[01:18] *** grondilu joined
[01:21] *** dayangkun left
[01:21] *** colomon joined
[01:23] *** grondilu left
[01:37] *** jeffreykegler left
[02:10] *** FROGGS left
[02:23] *** FROGGS joined
[02:46] *** pyrimidine joined
[02:47] *** autumn is now known as Leafyy

[02:47] *** Leafyy is now known as autumn

[03:01] *** pyrimidine left
[03:31] *** uvtc left
[03:37] <colomon> rn: say FatRat.new(1, 10**100)

[03:37] <p6eval> niecza v24-23-g0520c7c: OUTPUT«1E-100␤»

[03:37] <p6eval> ..rakudo a3869a: OUTPUT«0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001␤»

[03:38] <benabik> That's a lot of zeros, but I somehow doubt that was 100 of them.

[03:39] <colomon> easy enough to check

[03:40] <colomon> r: say [+] FatRat.new(1, 10**100).gist.comb.map(* == '0' ?? 1 ?? 0)

[03:40] <p6eval> rakudo a3869a: OUTPUT«[31m===[0mSORRY![31m===[0m␤Found ?? but no !!␤at /tmp/4_ixLUJiBa:1␤------> [32m0**100).gist.comb.map(* == '0' ?? 1 ?? 0[33m⏏[31m)[0m␤Confused␤at /tmp/4_ixLUJiBa:1␤------> [32m0**100).gist.comb.map(* == '0' ?? 1 ?? 0[33m⏏[31m)[0m␤    expecting any of:␤  …

[03:40] <colomon> r: say [+] FatRat.new(1, 10**100).gist.comb.map(* == '0' ?? 1 !! 0)

[03:40] <p6eval> rakudo a3869a: OUTPUT«No such method 'count' for invocant of type 'Int'␤  in method reify at src/gen/CORE.setting:5568␤  in method reify at src/gen/CORE.setting:5491␤  in method reify at src/gen/CORE.setting:5491␤  in method gimme at src/gen/CORE.setting:5881␤  in sub  at src/gen/CORE.s…

[03:40] <sorear> r: say FatRat.new(1, 10**100).subst(rx/0*/, -> $x { $x.chars }, :g)

[03:40] <p6eval> rakudo a3869a: OUTPUT«10.99010␤»

[03:40] <sorear> r: say FatRat.new(1, 10**100).subst(rx/0+/, -> $x { $x.chars }, :g)

[03:40] <p6eval> rakudo a3869a: OUTPUT«1.991␤»

[03:41] <benabik> r: FatRat.new(1,10**100).Str ~~ /0\.(0*)1/; say $1.chars

[03:41] <p6eval> rakudo a3869a: OUTPUT«No such method 'chars' for invocant of type 'Any'␤  in block  at /tmp/t1K_vcMONZ:1␤␤»

[03:41] <benabik> r: FatRat.new(1,10**100).Str ~~ /0\.(0*)1/; say $0.chars

[03:41] <p6eval> rakudo a3869a: OUTPUT«99␤»

[03:41] <sorear> looks good to me

[03:41] <sorear> 99 zeros

[03:41] <colomon> sorear++

[03:42] <colomon> r: say [+] FatRat.new(1, 10**100).gist.comb.map({ $_ == '0' ?? 1 !! 0 })

[03:42] <benabik> Right, zero indexed.  Looked short to me, but I guess my IRC window is wider than I thought.

[03:42] <p6eval> rakudo a3869a: OUTPUT«Cannot convert string to number: radix point must be followed by one or more valid digits in '.⏏' (indicated by ⏏)␤  in method Numeric at src/gen/CORE.setting:10511␤  in sub infix:<==> at src/gen/CORE.setting:2885␤  in sub infix:<==> at src/gen/CORE.setting:2885␤  …

[03:42] <colomon> r: say FatRat.new(1, 10**100).gist.comb

[03:43] <p6eval> rakudo a3869a: OUTPUT«0 . 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1␤»

[03:43] <colomon> r: say FatRat.new(1, 10**100).gist.comb.map({ $_ == '0' ?? 1 !! 0 })

[03:43] <p6eval> rakudo a3869a: OUTPUT«Cannot convert string to number: radix point must be followed by one or more valid digits in '.⏏' (indicated by ⏏)␤  in method Numeric at src/gen/CORE.setting:10511␤  in sub infix:<==> at src/gen/CORE.setting:2885␤  in sub infix:<==> at src/gen/CORE.setting:2885␤  …

[03:43] <colomon> r: say FatRat.new(1, 10**100).gist.comb.map({ $_ eq '0' ?? 1 !! 0 })

[03:43] <p6eval> rakudo a3869a: OUTPUT«1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0␤»

[03:43] <colomon> duh

[03:43] <colomon> r: say [+] FatRat.new(1, 10**100).gist.comb.map({ $_ eq '0' ?? 1 !! 0 })

[03:43] <p6eval> rakudo a3869a: OUTPUT«100␤»

[03:47] *** MikeFair_ joined
[04:18] *** ggoebel_ left
[04:23] *** rindolf joined
[04:57] *** preflex_ joined
[04:58] *** preflex left
[04:58] *** preflex_ is now known as preflex

[05:12] *** SamuraiJack joined
[05:13] *** alec__ left
[05:17] *** alec__ joined
[05:18] *** xinming_ joined
[05:21] *** xinming left
[05:30] *** arlinius left
[05:59] *** daniel-s_ joined
[06:03] *** daniel-s left
[06:08] <moritz> \o

[06:11] <sorear> o/

[06:16] <sorear> phenny: tell masak curl http://masak.org/carl/ # PHP error

[06:16] <sorear> erm

[06:16] <sorear> ...do I have the wrong bot?

[06:16] <phenny> sorear: I'll pass that on when masak is around.

[06:17] <moritz> just ESLOW

[06:19] <sorear> aha

[06:25] *** quester joined
[06:27] *** arlinius joined
[06:30] <[Coke]> I got a DB file for aloha if we want to restart him on feather.

[06:37] *** kaleem joined
[06:53] *** cosimo left
[07:04] *** b1rkh0ff left
[07:14] *** rindolf left
[07:15] *** rindolf joined
[07:18] *** FROGGS left
[07:20] *** b1rkh0ff joined
[07:25] *** rindolf left
[07:26] *** rindolf joined
[07:32] *** rindolf left
[07:32] *** rindolf joined
[07:47] *** quester left
[08:10] *** domidumont joined
[08:23] *** thou left
[08:24] <arnsholt> o/

[08:26] <sjn> \o

[08:34] *** FROGGS joined
[08:38] *** domidumont left
[08:39] *** domidumont joined
[08:40] <arnsholt> sjn: Were you the one trying to wrap libxml with Zavolaj at the Oslo hackathon?

[08:41] *** hoelzro|away is now known as hoelzro

[08:42] *** kivutar joined
[08:55] *** fhelmberger joined
[08:58] *** kresike joined
[08:58] <kresike> hello all you happy perl6 people

[08:59] <sjn> arnsholt: no, that wasn't me

[09:00] <sjn> arnsholt: I was one of the guys just hanging out (and organizing a little :)

[09:00] <arnsholt> Ah, right

[09:01] <moritz> I remeber it wasn't a #perl6 regular

[09:01] <moritz> but I don't know who :(

[09:01] <arnsholt> Oh, well

[09:01] <arnsholt> Maybe I'll get around to it at some point

[09:02] <FROGGS> moritz: ohh, that narrows it down :P

[09:03] <arnsholt> Just wanted to point out that libxml bindings would be a lot more feasible now that the sized stuff has landed

[09:04] <FROGGS> I wish I had time to fiddle with it

[09:05] <arnsholt> If you find the tuits, you know where to find me

[09:06] <arnsholt> OH! And if you want to hack on the SDL stuff again, you can kill the terrible hacks you needed to get sized stuff as well

[09:06] *** cosimo joined
[09:08] <FROGGS> arnsholt: right, thats exactly the point where I want to test this :o)

[09:09] <FROGGS> these hacks are horrible, and 64bit specific

[09:09] <arnsholt> Excellent. It felt good to be able to close that bug =)

[09:10] <FROGGS> ya

[09:10] *** cosimo left
[09:11] *** cosimo joined
[09:11] <arnsholt> 'lo cosimo o/

[09:11] <jnthn> morning o/

[09:11] <arnsholt> Hopefully this visit will be longer than the last one =)

[09:11] <FROGGS> hi jnthn 

[09:12] <arnsholt> G'morning, jnthn 

[09:15] * arnsholt is contemplating NativeCall string handling

[09:15] * jnthn has meetings :)

[09:16] <arnsholt> Lots of time to think of design issues then =D

[09:19] <moritz> arnsholt: please also think of blob handling :-)

[09:22] <arnsholt> Just huge chunks of bytes, you mean?

[09:23] <sjn> arnsholt: If you want some, I have lots of tuits to give away :)

[09:23] <sjn> although they're the wooden flat kind. :D

[09:24] <moritz> arnsholt: yes

[09:24] * jnthn guesses we wanna use Buf for those, or something like that

[09:24] <moritz> arnsholt: usually there's an out-of-band signalling of the lenght of the blob somewhere

[09:24] *** marloshouse_ joined
[09:24] <moritz> jnthn: yes; the question is just how to design the interface to make sense to to the user

[09:24] <FROGGS> sjn: I'd took one :o)

[09:25] *** benabik left
[09:25] *** benabik joined
[09:25] <arnsholt> At the NativeCall level, I think the person wrapping the API just has to cope with that part of it on their own

[09:26] *** marloshouse left
[09:26] *** marloshouse_ is now known as marloshouse

[09:26] <moritz> arnsholt: well, but somehow we need the ability to turn tuple of (pointer to blob, length) into a Buf

[09:26] <moritz> and the other way round

[09:27] <arnsholt> Yeah, that's more annoying

[09:27] <arnsholt> This, essentially is what I'm pondering really

[09:27] <arnsholt> Since strings in C are blobs =)

[09:28] * FROGGS .oO( Buf.new( pointer => $pointer, length => $bytes ) )

[09:28] <sjn> FROGGS: feel free to get in touch next time you're in Oslo :)

[09:28] <FROGGS> sjn: ohh, Oslo

[09:28] <FROGGS> well, I try not to forget :/

[09:29] *** kst left
[09:29] *** kst joined
[09:32] <nwc10> jnthn: do the meetings have food?

[10:03] *** ObseLeTe joined
[10:04] *** arlinius left
[10:18] *** arlinius joined
[10:20] *** pete_ joined
[10:20] *** pete_ is now known as Guest38296

[10:21] <Guest38296> This is the second time I've set aside a couple of days to really learn Perl6, and been caught by the build tool being unable to handle paths with spaces in

[10:21] <moritz> then please use a path without spaces

[10:22] <moritz> it's a TODO for us, but it really, really shouldn't stop you

[10:22] <Guest38296> *shrug* my home dir on my dev box has a space in it

[10:22] <Guest38296> I guess I could build a new VM, or use a different dev box, but most likely, I'll find a different project to hack on

[10:22] <FROGGS> Guest38296: spaces are always a problem when compilers re involved... gcc cant handle that too when passing the path as an argument when invoking commands

[10:28] *** Guest38296 left
[10:29] <arnsholt> Heh. I actually didn't even know that was a problem

[10:31] *** daniel-s_ left
[10:32] *** M_o_C joined
[10:37] <moritz> IIRC parrot has fixed that problem, but nqp and rakudo haven't

[10:38] * FROGGS tries

[10:40] * moritz re-clones parrot with 5 MB/s and still finds it slow

[10:41] <moritz> if the #parrot folks go through on their plan to rip out much stuff, it might be worth considering whether to restart with a slimmed-down repo

[10:41] <moritz> and keep a full-history archive somewhere else

[10:43] <FROGGS> might be nice to be able to say --gen-parrot-branch=slim or so

[10:43] <FROGGS> to be able to switch and compare

[10:45] <moritz> --gen-parrot=branch already works

[10:47] <FROGGS> perfect

[10:47] <FROGGS> Receiving objects:  27% (113060/407957), 30.81 MiB | 224 KiB/s   

[10:47] <FROGGS> -.-

[10:52] *** M_o_C left
[11:01] <FROGGS> Building NQP ...

[11:01] <FROGGS> /usr/bin/perl Configure.pl --with-parrot=/home/froggs/dev/folder with spaces/install/bin/parrot --make-install

[11:01] <moritz> eeks, this is a nasty problem.

[11:02] <dalek> rakudo/spacey: ebf80f9 | moritz++ | tools/lib/NQP/Configure.pm:

[11:02] <dalek> rakudo/spacey: Small preparation to allow paths with spaces

[11:02] <dalek> rakudo/spacey: review: https://github.com/rakudo/rakudo/commit/ebf80f9424

[11:03] <FROGGS> what if we add quotes to the makefile.in?

[11:03] <dalek> nqp/spacey: 8282ac5 | moritz++ | tools/lib/NQP/Configure.pm:

[11:03] <dalek> nqp/spacey: Small preparation to allow paths with spaces

[11:03] <dalek> nqp/spacey: review: https://github.com/perl6/nqp/commit/8282ac5755

[11:03] <moritz> FROGGS: well, I fear that'll be necessary

[11:03] <moritz> FROGGS: though I'd much rather prefer to add the quotes in Configure.pl

[11:06] *** sqirrel joined
[11:07] <FROGGS> moritz: I added quotes to lib/NQP/Configure.pm:293 and it looks good so far

[11:11] *** pjcj left
[11:12] <moritz> FROGGS: that's not the only place that needs patching :-)

[11:12] *** pjcj joined
[11:12] <moritz> FROGGS: wait a sec, I'll commit what I have now

[11:12] <dalek> nqp/spacey: ae3b47d | moritz++ | tools/ (2 files):

[11:12] <dalek> nqp/spacey: more fixes to allow spacey paths

[11:12] <dalek> nqp/spacey: review: https://github.com/perl6/nqp/commit/ae3b47dabe

[11:12] <FROGGS> ya, the created makefile is the borke too

[11:13] <FROGGS> this step: /usr/bin/perl /home/froggs/dev/folder with spaces/install/lib/parrot/4.10.0-devel/tools/build/pmc2c.pl

[11:14] <moritz> it now gets further

[11:14] <moritz> up to the linking step

[11:14] *** mtymula joined
[11:14] <mtymula> hello i have one complaint...;p 

[11:14] <mtymula> after ugrating to never version of rakudo 

[11:15] <mtymula> i get problem like thjis:

[11:15] <mtymula> Invalid operation on binary string   in method uc at src\gen\CORE.setting:2259   in method dispatch:<.=> at src\gen\CORE.setting:993   in block  at C:\Test_czy_mobilne\mylib\perl6-http-easy-master\perl6-http-easy- master\lib/HTTP/Easy.pm6:93

[11:15] <mtymula> it is like i cannot do this: .=

[11:15] <mtymula> but before i could...

[11:16] <FROGGS> ahh, you get a Buf and it expects a Str there

[11:17] <mtymula> but why?? it works with 2012 verion of rakudo

[11:18] <FROGGS> IO::Socket::INET changed

[11:19] <mtymula> so what can i do to upgrate my rakudo and have working program at the same time

[11:19] <mtymula> ?

[11:19] <FROGGS> mtymula: hold on, I'm inspecting HTTP::Easy right now

[11:20] <FROGGS> hmmm, it is calling .get, that is right, .get should give you a Str IMO

[11:24] *** pmurias left
[11:27] <mtymula> FROGGS: so... 

[11:27] <mtymula> what can I do??

[11:28] <FROGGS> wait a few minutes? I'm recompiling my rakudo to do some testing

[11:41] <mtymula> ??

[11:42] *** ObseLeTe left
[11:55] <moritz> it seems that pbc_to_exe doesn't like spacey paths :(

[11:57] <FROGGS> :/

[12:05] <moritz> but it's not pbc_to_exe's fault

[12:05] <moritz> mlenz@mlenz-workstation:~/p6/with space/rakudo/nqp$ ../install/bin/parrot_config  libparrot_linkflags

[12:05] <moritz> -L"/home/mlenz/p6/with space/rakudo/parrot/blib/lib" -lparrot

[12:05] <moritz> mlenz@mlenz-workstation:~/p6/with space/rakudo/nqp$ ../install/bin/parrot_config  inst_libparrot_linkflags

[12:05] <moritz> -L/home/mlenz/p6/with space/rakudo/install/lib -lparrot

[12:06] <moritz> so the inst_ variant doesn't escape the path

[12:06] <moritz> WTF.

[12:08] <moritz> patched parrot.

[12:09] <FROGGS> I'm still compiling -.-

[12:17] *** pupoque joined
[12:39] *** nyuszika7h left
[12:44] *** ggoebel_ joined
[12:48] *** drbryane joined
[12:57] *** Gwyxx left
[13:02] *** ggoebel_ left
[13:06] *** SamuraiJack left
[13:12] *** jaldhar left
[13:13] <FROGGS> mtymula: what rakudo version are you using?

[13:13] *** skids left
[13:19] *** shinobicl joined
[13:27] * [Coke] rips some stuff out of parrot in his "sixparrot" fork - commit messages going to #parrot if anyone wants to follow.

[13:27] <[Coke]> (nothing substanstive yet, just some LHF)

[13:28] <[Coke]> er, *substantive.

[13:28] * moritz waits for the commit messages

[13:29] <moritz> fwiw with my last parrot patch, NQP can now build with a space in the prefix path

[13:29] <moritz> (branch 'spacey')

[13:29] <FROGGS> cool

[13:29] <FROGGS> will try in a bit

[13:30] <moritz> rakudo will need some Makefile twiddling too

[13:31] <arnsholt> jnthn: I managed to get a segfault while precompiling Test.pm (using a not entirely latest Rakudo)

[13:32] <jnthn> arnsholt: Are you using a later NQP?

[13:32] <arnsholt> NQP is at HEAD

[13:32] <jnthn> That'd do it if your Rakudo is more than a day or two old.

[13:32] <jnthn> STable layout changed a little.

[13:33] <arnsholt> That's probably it then

[13:38] <[Coke]> Is nqp/rakudo using parrot's calling conventions at all?

[13:40] <jnthn> yes

[13:41] <[Coke]> Danke.

[13:41] *** not_gerd joined
[13:41] <not_gerd> hello, #perl6

[13:42] <FROGGS> hi not_gerd 

[13:42] <arnsholt> jnthn: Yeah, works fine now

[13:43] <not_gerd> [Coke]: if you're looking for stuff to do, you could try resurrecting tools/build/nativecall.pl (or alternatively, port the current nci_thunk_gen.pir to Perl)

[13:44] <not_gerd> nci_thunk_gen.pir pulls in TGE via data_json

[13:44] <[Coke]> not_gerd: I'm working on a slimmed down parrot.

[13:45] <not_gerd> [Coke]: I know

[13:45] <moritz> [Coke]: yes, that would allow to slim down parrot by removing data_json and TGE

[13:45] *** Guest20810 left
[13:45] <[Coke]> Is nativecall being used?

[13:45] <[Coke]> I thought rakudo/nqp rolled their own there.

[13:45] <moritz> maybe for bootstrappy stuff? no idea

[13:46] <jnthn> I'm not aware of it being used

[13:46] <moritz> (I mean, for the parrot build)

[13:46] <moritz> if not, we can rip that out too

[13:46] <jnthn> The NativeCall Perl 6 module is all using stuff inside NQP

[13:46] <not_gerd> afaik it's used for the dynops

[13:47] <jnthn> ah

[13:47] *** Rix left
[13:48] <not_gerd> jnthn: is there anything wrong with pulling down NQP/Rakudo dynops into Parrot core?

[13:49] *** ponbiki joined
[13:49] *** ponbiki is now known as Guest8979

[13:50] <jnthn> not_gerd: That you'd drag an incredible amount of other stuff with them?

[13:51] <not_gerd> jnthn: as long as these are all specific to the Parrot backend, I don't see anything wrong with that

[13:52] *** Rix joined
[13:53] <jnthn> not_gerd: I don't see what it wins, it just means if I should need to change them they're further away from the things that use them.

[13:54] <jnthn> It's probably *possible* to do technically, I'm just not sure what it wins.

[13:56] *** PacoAir joined
[13:57] *** kaleem left
[13:57] *** bluescreen10 joined
[13:58] <not_gerd> jnthn: if we take the idea of 'Parrot lite' with the sole purpose of supporting NQP seriously, that's the natural next step after ripping out all parts not used by NQP

[13:58] <masak> is there a RC entry for http://c2.com/cgi/wiki?BagSumInManyProgrammingLanguages ?

[13:58] <phenny> masak: 06:14Z <sorear> tell masak curl http://masak.org/carl/ # PHP error

[13:59] <masak> sorear: I know, it's been that way for a while. :/

[13:59] <masak> sorear: I'm sick of MediaWiki, so I'll probably put a really small PHP script there instead that allows me to edit content in the Simplest Possible way.

[13:59] <masak> sorear: anyway, thanks for the reminder. was there something in particular you were looking for?

[13:59] <not_gerd> jnthn: ie Parrot ends up as /nqp/backends/parrot-lite right next to /nqp/backends/jvm, ...

[14:00] <nwc10> and upgrade it to dogfood soon after?

[14:00] <masak> nwc10: I'll check whether the web hotel that I'm renting allows Perl 6 at all.

[14:01] <nwc10> I thought that it would be something like that

[14:01] <nwc10> they're running Java? Or they consider that more insecure than PHP?

[14:02] <[Coke]> not_gerd: anyway, current plan is to remove unused ops, libs, pmcs. to be done, also need to remove pasm (already have a branch somewhere that does 80% of this), tge, pge, pct, parrot-nqp, winxed, and anything that depends on them (unless we need it.)

[14:06] *** wk joined
[14:12] <moritz> pbc_to_exe is written in winxed

[14:13] <[Coke]> only recently.

[14:13] <[Coke]> but we can always check in the generated C.

[14:14] <[Coke]> (or use more winxed.)

[14:15] * not_gerd posted gist URI of his notes to #parrot

[14:17] *** gtodd joined
[14:18] <gtodd> hello ... 

[14:18] <pmichaud> good morning, #perl6

[14:19] <gtodd> can I build/link parrot rakudo with libedit instead of readline?  is there a --prefer-libedit option or something?

[14:19] <[Coke]> is libedit a dropin replacement for readline?

[14:19] <nwc10> pmichaud: thanks. I'll have a play. But it might end up being one big messy expression

[14:20] <gtodd> mostly .... heimdal postgres client apps use it ... it's small and sometimes just included with the source I think

[14:20] <pmichaud> is there a log I should read that discusses the reason for eliminating deletepos and existspos ?

[14:22] <gtodd> sqlite will use it too ... I think it's a option for people who want to ship things using a pure BSD license but upstream folks put readline in the build stuff (autoconf cmake whatever) as the default for whatever historical reasons

[14:22] <pmichaud> oops, kid needs unplanned ride to school -- bbi20

[14:24] <gtodd> I don't know much about hacking Configure.pl files but there seems no easy way of pointing rakudo at libedit -  I just want readline or libedit for the REPL

[14:24] <gtodd> ... errm obviously :-[

[14:24] *** Patterner left
[14:25] *** clkao left
[14:26] <jnthn> pmichaud: Think it was a day or two ago, maybe a little more..it arose out of reviewing what existspos and deletepos do when tadzik++ was looking at porting them over to the JVM.

[14:26] *** Psyche^ joined
[14:26] *** Psyche^ is now known as Patterner

[14:28] <jnthn> gtodd: I know that we get readline support through calling .readline_interactive, which is provided by Parrot. I'd guess if there's any way to make it happen, it'd be done at the point of configuring Parrot.

[14:28] *** benabik left
[14:28] <gtodd> jnthn: ah ok 

[14:28] <gtodd> was looking at the wrong end

[14:44] <gtodd> Just thinking of readline again is there a errm perl6 policy statement or longish term development goal of making perl more umm  "independent" of system libraries? perl5 on my system (5.17) has no dependencies except what I add through modules.  perl6 needs gmp icu readline just to build perl6 argh! :)

[14:45] <not_gerd> r: module Foo { our $*FOO = "foo"; our sub foo { say $*FOO } }; { temp $*Foo::FOO = "bar"; Foo::foo }; Foo::foo

[14:45] <p6eval> rakudo a3869a: OUTPUT«Can only use 'temp' on a container␤  in sub prefix:<temp> at src/gen/CORE.setting:12641␤  in block  at /tmp/ILNYDJYQk2:1␤␤»

[14:45] <not_gerd> ^ what's the right way to do that

[14:46] <gtodd> just realized this is probably a topic that appears ad nauseum  so I hereby retract my last comment/question ... but hope to be able to build small light perl6 with less external library linking one day :)

[14:46] <gtodd> cheers

[14:46] <moritz> not_gerd: there are two ways. The first is to use ordinary variable, and to temp() them

[14:46] <moritz> not_gerd: and the nicer variant is to use $*foo variables (without any namescpaces), and define a new one with 'my $*foo' in an inner scope

[14:47] <moritz> r: module Foo { my $*FOO = 'foo'; our sub foo { say $*FOO } }; { my $*FOO = 42; Foo::foo() }; Foo::foo();

[14:47] <p6eval> rakudo a3869a: OUTPUT«42␤Dynamic variable $*FOO not found␤  in method gist at src/gen/CORE.setting:10513␤  in sub say at src/gen/CORE.setting:7598␤  in sub foo at /tmp/WeXlm4WM0y:1␤  in block  at /tmp/WeXlm4WM0y:1␤␤»

[14:48] <not_gerd> r: 'module Foo { our $FOO = "foo"; our sub foo { say $FOO } }; { temp $Foo::FOO = "bar"; Foo::foo }; Foo::foo

[14:48] <p6eval> rakudo a3869a: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse expression in single quotes; couldn't find final "'"␤at /tmp/gtlIwJKH5R:1␤------> [32m $Foo::FOO = "bar"; Foo::foo }; Foo::foo[33m⏏[31m<EOL>[0m␤    expecting any of:␤        statement list␤        prefix or term␤  …

[14:48] <not_gerd> r: module Foo { our $FOO = "foo"; our sub foo { say $FOO } }; { temp $Foo::FOO = "bar"; Foo::foo }; Foo::foo

[14:48] <p6eval> rakudo a3869a: OUTPUT«bar␤foo␤»

[14:48] <not_gerd> ^ I'll go with that, thanks

[14:48] <not_gerd> moritz++

[14:48] <moritz> you're welcome

[14:49] <pmichaud> back again

[14:49] <not_gerd> r: module Foo { our $FOO; our sub foo { say $FOO } }; { temp $Foo::FOO = "bar"; Foo::foo }; Foo::foo

[14:49] *** skids joined
[14:49] <p6eval> rakudo a3869a: OUTPUT«Any()␤Any()␤»

[14:50] <not_gerd> ^ bug?

[14:50] <moritz> wb, pm

[14:50] <moritz>  r: module Foo { our $FOO = Any; our sub foo { say $FOO } }; { temp  $Foo::FOO = "bar"; Foo::foo }; Foo::foo

[14:50] <p6eval> rakudo a3869a: OUTPUT«bar␤Any()␤»

[14:51] <moritz> yes, bug

[14:51] * not_gerd needs to leave now

[14:51] <moritz> 'our'-Variables have lots of bugs and limitations. We tend to avoid them whenever possible.

[14:52] <not_gerd> bye, #perl6

[14:52] *** not_gerd left
[14:52] <pmichaud> jnthn: okay, I'll review the log and comment further if needed :)

[14:57] <mtymula> FROGGS: sorry I was away...

[14:57] <gtodd>  

[14:57] *** gtodd left
[14:58] <pmichaud> moritz: (slimmed down parrot repo, from log)    yeah, I've often thought we should perhaps trim the repo somehow.

[15:00] *** stopbit joined
[15:00] <FROGGS> mtymula: no problem, I'm usually patient

[15:00] *** pmurias joined
[15:00] *** kivutar left
[15:02] <pmurias> [Coke]: wouldn't it make sense to just instrument the thing that processes pir to record all the opcodes it uses and measure which ones aren't used by rakudo when running roast?

[15:03] <[Coke]> ah, "just".

[15:03] <[Coke]> Yes, having a list of used vs. unused opcodes would be most helpful. Thank you for volunteering to do that bit. :)

[15:03] <FROGGS> [Coke]++

[15:03] <pmichaud> also need to see which opcodes are used by build process, which might be different from set in roast

[15:04] *** Shozan joined
[15:04] <[Coke]> pmichaud: and then we have to keep running it once we rip stuff out of the build process.

[15:04] *** sizz_ joined
[15:05] <[Coke]> but having the list run during spectest would be a great start, yes. It's easy enough to find candidates without that, however.

[15:05] <pmichaud> just doing a grep for pir:: and nqp:: in the rakudo and nqp repos should be a really good start

[15:06] *** p5eval_ joined
[15:06] *** eviltwin_b joined
[15:06] *** cxreg2 joined
[15:07] *** Tene_ joined
[15:07] *** Tene_ left
[15:07] *** Tene_ joined
[15:07] <moritz> (especially if you include generated .pir files)

[15:07] *** diakopte1 joined
[15:07] *** atrodo left
[15:07] *** cxreg left
[15:07] *** kresike left
[15:07] *** geekosaur left
[15:07] *** sizz left
[15:07] *** raiph__ left
[15:07] *** p5eval left
[15:07] *** diakopter left
[15:07] *** SHODAN left
[15:07] *** Tene left
[15:07] *** cotto left
[15:07] *** eviltwin_b is now known as geekosaur

[15:07] *** kresike joined
[15:07] *** atrodo joined
[15:08] *** cotto joined
[15:08] *** raiph__ joined
[15:08] <FROGGS> I really like the idea of having an rakudo-optimized parrot

[15:08] <pmichaud> FROGGS: I like the idea also.  Should've happened years ago.  :-P 

[15:09] <FROGGS> maybe I can hook in at some point

[15:09] *** clkao joined
[15:09] <FROGGS> pmichaud: ya, would be a shame to not try to "rescue" all the work that has gone into it

[15:12] <pmichaud> FROGGS: ...unless the rescue ends up diverting too many resources from more productive tasks.

[15:13] <FROGGS> ya, you're right

[15:14] <atrodo> So my understanding from the logs is that rakudo has no use for nci?

[15:15] <pmurias> [Coke]: processing all the *.ops file with s/^(inline?\s*op\b.*)$/$1..recoding stmt.../ (or something similiar) should be enough

[15:17] <FROGGS> mtymula: so what is your rakudo version?

[15:18] *** drbryane left
[15:20] *** salv0 left
[15:20] *** pupoque left
[15:24] <pmurias> [Coke]: start of a quick hack for that: http://pastie.org/6117345

[15:27] *** kaare_ joined
[15:30] <pmichaud> atrodo: it's hard to know exactly what rakudo needs or doesn't need from existing Parrot.  As far as we know, Rakudo doesn't have a direct requirement for Parrot's NCI.  But we might be overlooking something, or there could be an indirect requirement that we've forgotten about

[15:31] <pmichaud> if rakudo or nqp are using Parrot's NCI, we'd probably try to refactor to remove that requirement, though, and I suspect such refactoring wouldn't be hard.

[15:34] *** lizmat left
[15:35] *** salv0 joined
[15:36] *** Liz joined
[15:36] *** Liz is now known as Guest93827

[15:38] *** pmurias left
[15:39] <[Coke]> pmurias - what is that supposed to get me? a list of parrot ops?

[15:49] <[Coke]> (there is a tools/dev/sear

[15:49] <[Coke]> whoops. search_ops.pl

[15:53] *** SunilJoshi joined
[15:56] *** thou joined
[16:02] *** bluescreen10 left
[16:03] <atrodo> pmichaud: Okay. [Coke], I'm going to try and rip out nci on your sixparrot branch

[16:06] <kresike> bye folks

[16:06] *** kresike left
[16:07] *** nyuszika7h joined
[16:09] *** cotto left
[16:09] *** cotto joined
[16:11] *** domidumont left
[16:16] *** Gwyxx joined
[16:16] *** Gwyxx left
[16:20] *** kaleem joined
[16:22] <[Coke]> atrodo: want a commit bit?

[16:22] <[Coke]> Or are you going to fork my fork? 

[16:22] <atrodo> [Coke]: If I can do this successfully, yea, I'll come asking for a commitbit

[16:23] <[Coke]> hokay.

[16:24] * masak .oO( spork me on github )

[16:25] *** kivutar joined
[16:27] <jnthn> decommute &

[16:28] *** kaleem left
[16:28] *** hoelzro is now known as hoelzro|away

[16:32] *** bluescreen10 joined
[16:36] *** FROGGS left
[16:37] *** sweet_kid left
[16:37] *** rafl left
[16:39] *** sweet_kid joined
[16:40] *** rafl joined
[16:40] *** spider-mario joined
[16:41] *** bluescreen100 joined
[16:43] *** SamuraiJack joined
[16:44] *** bluescreen10 left
[16:52] *** kivutar left
[17:09] *** arlinius left
[17:10] *** Chillance joined
[17:10] *** FROGGS joined
[17:12] *** jms53 joined
[17:18] <rurban> rakudo will build faster by removing pmc's and ops ??? OMG

[17:18] <[Coke]> not that that's a primary goal, but sure.

[17:19] * pmichaud wonders if his sarcasm detector is needed here.

[17:19] *** Guest93827 left
[17:20] * [Coke] tries to assume a pleasant effect from other senders unless coke himself is in a really crappy mood.

[17:20] <[Coke]> gah. *affect.

[17:21] <pmichaud> yes, I make that assumption also, which is why I sometimes miss sarcasm.  :-)

[17:22] <FROGGS> haha, sheldons wherever I look *g*

[17:22] <[Coke]> rurban: how goes p2? do you think an nqp port will be possible?

[17:22] *** SunilJoshi left
[17:23] *** arlinius joined
[17:23] *** not_gerd joined
[17:23] <rurban> nqp-p2 is easy, already doable. the compiler and vm is stable.

[17:23] <FROGGS> was p2 the thing which is a she?

[17:23] <rurban> I'm using a new parser and grammar soon (leg => marpa)

[17:23] <rurban> yes

[17:24] <PerlJam> rurban: will you be making an nqp-p2 or leave that to someone else?

[17:24] <rurban> but the AST might need some docs

[17:24] <rurban> PerlJam: I will do, but currently I'm busy with something else

[17:24] <[Coke]> rurban++

[17:24] <rurban> I also have to rewrite my B::C compiler a bit

[17:25] <not_gerd> rurban: removing ops and pmcs is more about making potential refactors easier and moving from Parrot-the-ecosystem to Parrot-the-library that powers NQP

[17:25] <not_gerd> that's my story, and I'm sticking to it ;)

[17:26] <moritz> and removing stuff is easy(ish)

[17:26] <rurban> But it will not be faster. you will do more harm than help

[17:26] <[Coke]> Just an experiment at this point. Much easier for [Coke] to delete someone else's code than write his own.

[17:26] <moritz> so it doesn't need huge benefit to justify it

[17:26] <[Coke]> rurban: "harm" ?

[17:26] <rurban> You should inspect the calling convention and undo the nci method madness

[17:26] <not_gerd> rurban: sure, but that's hard

[17:26] <rurban> ops2c should be reverted to the perl5 lib, so that nqp can go away

[17:27] <rurban> or use nqp-p6 (i have a branch)

[17:27] <[Coke]> rurban: yes, ops2c is already on the todo list.

[17:27] *** Liz joined
[17:27] <rurban> and use bacek's llvm ops2c

[17:27] <rurban> which jit's the ops.

[17:27] *** Liz is now known as Guest94342

[17:27] <rurban> Also in some of my branches

[17:28] <rurban> So I guess you'll need nqp for the jit

[17:28] <rurban> I fixed llvm integration already to use static or shared llvm libs

[17:29] <pmichaud> rurban:  just as a general note, it's easy for people to say what should be done.  commits are what count.

[17:29] <rurban> And removing imcc -O1 was also not helpful if you want a faster rakudo

[17:30] <rurban> I'm just warning for the next axe which will destroy months of work, and which will not be undoable

[17:30] <pmichaud> reverts are easy.  it's easy to abandon branches.

[17:30] <rurban> This happened to parrot every two year or so

[17:31] <PerlJam> rurban: I think the next axe to fall will likely kill parrot though ... we'll see what happens.

[17:31] <[Coke]> rurban: all this is happening in a branch as an experiment. That's it.

[17:31] <[Coke]> (not even a branch, a branch on a fork, at the moment.)

[17:32] <pmichaud> if things work as expected, then nqp unmodified should be able to run on both parrot master and on sixparrot

[17:32] *** Guest94342 left
[17:32] <rurban> Perljam: Only parrot can kill parrot, rakudo can just abandon parrot.

[17:32] <pmichaud> so there's no "axe" that is undoable.

[17:32] <rurban> all the previous axes did more harm than benefits

[17:32] *** Liz_ joined
[17:33] <[Coke]> rurban: what axes?

[17:33] <rurban> only people with a global understanding should axe out stuff.

[17:34] <rurban> your plan to strip parrot to a bare rakudo vm. how should parrot performance be competitive then?

[17:34] <pmichaud> rurban: you're reading too much into "your plan".

[17:34] <rurban> think of rakudo AND performance

[17:35] <spider-mario> moritz: are you sure that qq["$file" --show-config] will work with paths that contain "?

[17:35] <rurban> well, I don't like useless suicidal tendencies our of shere agony and desperation, and false accusations

[17:36] <spider-mario> why not just: open my $CONFIG, '-|', $file, '--show-config'

[17:36] <rurban> out of

[17:36] <pmichaud> rurban: it's an experiment.  If anyone's accusing you of anything, I missed it.

[17:36] <not_gerd> rurban: how does removing unused ops, pmcs and getting rid of nqp-rx hurt performance?

[17:36] <[Coke]> rurban: I'm certainly not falsely accusing anyone here.

[17:36] <rurban> someone says: threads are useless, someone else removes it.

[17:36] <not_gerd> it won't help, but it won't hurt as well

[17:36] <rurban> not you coke, someone else

[17:36] <[Coke]> rurban: no one is removing threads.

[17:36] <rurban> just saying :)

[17:36] <[Coke]> rurban: yes, so go fight with him, please, not us.

[17:37] <pmichaud> rurban: please don't assume that diakopter++ is speaking for the rest of us.

[17:37] <rurban> just an example. nqp e.g. would be needed for jitting

[17:37] <rurban> bacek should be asked

[17:37] <rurban> but maybe the perl5 ops2c would work also. 

[17:38] <[Coke]> yes, that conversation already happened on #parrot.

[17:38] <rurban> parrot compiletime does not worry me. parrot runtime worries me.

[17:38] <[Coke]> rurban: yes.

[17:38] <pmichaud> rurban: that point has been made repeatedly, by myself included.

[17:38] <rurban> oh, sorry. I thought we are on #parrot

[17:38] <[Coke]> no one really cares about making compile time faster. side effect only.

[17:38] <rurban> I left #parrot out of anger yesterday

[17:39] <pmichaud> then you're speaking from an incomplete picture of things.

[17:39] <pmichaud> perhaps we should limit discussion to only people with a global understanding of stuff.  :-)

[17:40] <rurban> not_gerd: they were probably needed for some planned subsystem to make things faster, not slower.

[17:40] <PerlJam> Assuming that Rakudo obtains speeds comparable to other language implementations, what's left to make it "production ready" besides threads?

[17:41] <pmichaud> "It has to run all of CPAN."

[17:41] <[Coke]> that's insane.

[17:41] <PerlJam> ouch.

[17:41] <[Coke]> is p5 compatibility mode a requirement?

[17:41] <pmichaud> I don't know that "threads" are required for "production ready".

[17:42] <pmichaud> that's what I don't like about the "production ready" term.  If we start saying "what does it need to be production ready", it's a slippery-slope to "it has to run all of Cpan"

[17:42] <[Coke]> certainly nice to have. are threads in the spec as first class things, or just side effects about program execution order?

[17:42] <[Coke]> ah, my sarcasm detector was broken.

[17:42] <timotimo> pmichaud: i currently can't properly create a ipython kernel implementation because there are no "real" threads in rakudo yet, just one data point

[17:43] <pmichaud> [Coke]: I tried to put the quotes there as a sarcasm hint :)

[17:43] <spider-mario> could that not be solved with coroutines that would not necessarily run in parallel?

[17:43] <[Coke]> If someone solidifies the spec, I promise to have a go at an implementation with the current parrot threads.

[17:43] <pmichaud> timotimo: I agree that real threads prevent the task you're wanting to do.  But I've written a ton of production code in my lifetime that doesn't require threads.

[17:43] <[Coke]> not going to shake out any issues unless someone starts writing code against them.

[17:44] <pmichaud> if we say "Perl 6 isn't production ready because I need X", it'll never be "production ready"

[17:45] *** SamuraiJack left
[17:45] <pmichaud> [Coke]: "solidify the spec" isn't really the model we tend to use.  What typically happens is someone prototypes some code to solve a problem, then we try to adapt it to other problems, then we converge on a solution, then we write a spec.

[17:45] <pmichaud> I.e., we tend to follow an Internet/RFC model (bless the spec after implementation)

[17:45] <PerlJam> pmichaud: To obtain feature parity with other languages in roughly the same niche (if there can be such a thing),  I think we'll need some answer to "threads".   This is how outsiders will judge "production ready".

[17:45] *** kst left
[17:46] <pmichaud> PerlJam: "feature parity" is a reasonable approximation

[17:46] <spider-mario> do we really want threads as our concurrency model?

[17:46] <[Coke]> pmichaud: ok. then I'm not your guy for the initial implementation, at least not without a lot more tuits.

[17:46] <pmichaud> [Coke]: but I can give a concrete and spec'd example.

[17:46] <pmichaud> it's the same one I gave rurban and have been asking about for several years

[17:46] <pmichaud> implement a threaded version of the hyperops

[17:47] <pmichaud> i.e.,   get    @a >>+<< @b   to run threaded.

[17:47] <[Coke]> Yes, I'm familiar with that request.

[17:47] <pmichaud> that's specced, it's not likely to change, it wants threading.

[17:47] <pmichaud> once we have that example in place, we can look at the underlying threading model and see where the warts are and what else we need to improve threading

[17:48] <pmichaud> there are other places where threading is implicit in Perl 6

[17:48] <[Coke]> "underlying threading model"... which doesn't exist from rakudo's perspective. yes?

[17:48] <[Coke]> just "this would go faster if we used threads".

[17:48] <[Coke]> s/would/might/, even.

[17:48] <pmichaud> a bit more than that

[17:49] <pmichaud> we know that the hyperops are intended to be a way for the compiler to exploit and optimize parallelism.  the implementation doesn't do that yet.

[17:50] <pmichaud> neither rakudo nor the Perl 6 specify exactly how that parallelism is to be exploited... specifically because the language designer(s) don't feel they have a strong enough handle on the problem to say "this is the way it should be done"

[17:50] <pmichaud> s/nor the Perl 6 specify/nor the Perl 6 spec say/

[17:51] <[Coke]> OK. let me stop you there: I'm not your guy.

[17:51] <pmichaud> fair enough.

[17:51] <[Coke]> So, I'll just focus on things I have proper shaped tuits for.

[17:51] <pmichaud> I'm not that guy either.  :)

[17:52] <pmichaud> timotimo: my recommendation for progress in your situation is not to ask "where can I find Perl 6's threading model" or "how will threads work in Rakudo?"  The way forward is to say "here's what I want threads to look like" or "here's how my application should look" and then we start building libraries or code to make it work.

[17:54] <pmichaud> many parts of the parrot implementation suffer (with respect to Perl 6, but other languages also) from saying "we think this is what you'll want this feature to look like, so here it is and hopefully you can adapt to it".  Instead what is needed is for Parrot's features to be driven and derived directly from the needs of the languages.

[17:54] <pmichaud> in the case of Perl 6 threading, it needs to be derived from applications that will use it.

[17:55] <timotimo> pmichaud: this is pretty easy to do actually. all i need is a straight port of this tiny bit of code: https://github.com/ipython/ipython/blob/master/IPython/kernel/zmq/heartbeat.py#L29

[17:55] <timotimo> it'd be totally okay if it looks different, i don't have any preferences

[17:56] <pmichaud> what would you want that code to look like if written in Perl 6?  I suspect you'll want "async" somewhere.

[17:56] <timotimo> the init part is boring, when it comes to threads, it's just the run function that i need

[17:56] <timotimo> actually, i have no idea why this even has a thread running. probably the zmq.device call being blocking

[17:57] <timotimo> so if i could just async zmq.device(zmq::FORWARDER, $!socket, $!socket);  that would be fantastic

[17:57] <PerlJam> timotimo: you have a perl6-zmq ?

[17:58] <timotimo> arnsholt is working on it

[17:58] <timotimo> he asked me to help out, i'll have a look, too, but i don't really know what needs twiddling where and when

[18:00] <pmichaud> it sounds like something we want as a starting point is a simple implementation of async

[18:00] <pmichaud> and by "simple" I mean "we know it won't work in the general case" simple.

[18:01] <pmichaud> just something that gets two threads of control running at the same time -- try not to worry about synchronizing variables or the like just yet

[18:02] <timotimo> yes, that would be enough at this point

[18:02] <timotimo> $!socket would have to be renamed $!socktype, because it isn't even a socket object that's being passed

[18:03] <timotimo> at the same time, these device objects are implemented in pyzmq to use threading, too. but that's no big deal, they don't synchronise data with other threads either

[18:03] <pmichaud> it won't be production ready threads by any stretch of the imagination, but we'll at least have something that we can start building from in Parrot, or at least can start to bridge the gap between what Perl 6 wants ("async") and whatever Parrot provides

[18:03] * jnthn home

[18:03] <arnsholt> timotimo: Any kind of hacking goes really

[18:03] <timotimo> hm, except there's one global ZMQ context object that probably needs to be passed, i'll check.

[18:04] <arnsholt> Tests, public perlish interface, and general giving it a spin

[18:04] <arnsholt> I haven't actually tested any of the C paths yet =)

[18:09] *** cxreg2 is now known as cxreg

[18:11] <moritz> I would be grateful if somebody could test the 'spacey' branche of nqp on windows

[18:12] <moritz> after a thorough cleaning, in Rakudo   perl Configure.pl --gen-parrot=master --gen-nqp=spacey # in rakudo's 'spacey' branch should be able to build nqp in a prefix with a space in the name

[18:12] <jnthn> moritz: I'll just grab a completely fresh checkout and build that.

[18:13] <arnsholt> timotimo: Oh, and if you have any good ideas for HOW we can test the code, I'm all ears

[18:13] <arnsholt> My current hack of a plan would be something involving Perl 5 code probably =)

[18:19] <timotimo> oof, good question.

[18:22] <arnsholt> Yeah, I know =)

[18:24] <not_gerd> bye, #perl6

[18:24] *** not_gerd left
[18:25] <rindolf> Hi all.

[18:25] <rindolf> Hi PerlJam , pmichaud 

[18:26] <rindolf> Hi jnthn 

[18:26] * rindolf sprinkles jnthn with some magic vowel dust.

[18:26] <larks> I can't wait until the concurrency stuff gets finished 

[18:26] <jnthn> o/ rndlf :P

[18:27] <rindolf> jnthn: heh.

[18:27] <PerlJam> rindolf: greetings

[18:27] <rindolf> jnthn: what's up?

[18:27] <rindolf> PerlJam: what's new?

[18:27] <PerlJam> rindolf: the leading "j" *is* a vowel  ;)

[18:27] <rindolf> inthan.

[18:27] <PerlJam> rindolf: nothing much.   Looking at play-perl.org now.

[18:27] <rindolf> PerlJam: ah.

[18:27] <jnthn> rindolf: Not much. Been doing $dayjob stuff today and now I'm home and pondering food and working on some NQP stuff :)

[18:29] <PerlJam> larks: why?  What do you hope to use it for?

[18:29] <rindolf> PerlJam: ah, I see that it is open source.

[18:29] <cxreg> larks: do you mean the parrot threads support?

[18:29] <rindolf> Or at least has sources on GitHub.

[18:30] <rindolf> jnthn: nice.

[18:30] <PerlJam> rindolf: yep, I just cloned it in anticipation of adding a feature or two :)

[18:30] <rindolf> moritz: hi, how are you?

[18:30] <rindolf> PerlJam: great.

[18:32] <moritz> rindolf: within one standard deviation of my own, peculiar average

[18:32] <rindolf> moritz: OK.

[18:32] <rindolf> moritz: any news?

[18:33] <rindolf> PerlJam: did you also do a GitHub fork?

[18:33] <PerlJam> rindolf: no, not yet.

[18:33] <rindolf> PerlJam: ah.

[18:33] <rindolf> OK.

[18:33] <larks> Well, I just like threads and concurrency =x

[18:33] <PerlJam> I tend to poke around in a clone before I fork for pull requests.

[18:33] <moritz> rindolf: there's always news, depending on how small-scale news you find interesting

[18:33] <moritz> the pope retires!

[18:33] <PerlJam> larks: bummer.  I was hoping that you'd have some specific use-case :)

[18:34] <moritz> nqp can now (in a branch) build in a directory with space in the path

[18:34] <larks> Well, I mainly design hardware so I think in parallel.  How can I break this problem into parallel tasked, how do I need to sync them, etc etc

[18:35] <rindolf> PerlJam: seems like I'll have to buy some http://en.wikipedia.org/wiki/B%C3%B6rek for the Israeli Perl Workshop (also for other people) because I'm not too fond of the Buddha Burgers' Vegan food served there (second year in a row).

[18:35] <larks> sorry for disappointing you =x

[18:36] <rindolf> PerlJam: and I'm gonna give this there - http://www.shlomifish.org/temp-sherlock-holmes-awk/Sherlock-Holmes-about-Awk.xhtml

[18:36] <rindolf> As a 10 minutes talk.

[18:36] <arnsholt> r: .name.say for Grammars.^methods

[18:36] <p6eval> rakudo a3869a: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared name:␤    Grammars used at line 1. Did you mean 'Grammar'?␤␤»

[18:36] <arnsholt> r: .name.say for Grammar.^methods

[18:36] <p6eval> rakudo a3869a: OUTPUT«parse␤parsefile␤MATCH␤MATCH_SAVE␤INTERPOLATE␤OTHERGRAMMAR␤RECURSE␤prior␤orig␤target␤from␤pos␤CAPHASH␤!cursor_init␤!cursor_start␤!cursor_start_subcapture␤!cursor_capture␤!cursor_push_cstack␤!cursor_pass␤!cursor_fail␤!cursor_pos␤!cursor_next␤!cursor_more␤!reduce␤!red…

[18:36] <rindolf> Does anyone here have any plans on coming to the Israeli Perl Workshop in 25-Feb?

[18:39] <jnthn> moritz: Seems the make install-dev in Parrot fails with:

[18:39] <jnthn> Error: couldn't copy installable_ops2c.exe to \ops2c.exe: No such file or direct

[18:39] <jnthn> ory

[18:39] <jnthn> moritz: Or did I need that at master too?

[18:39] <moritz> jnthn: yes, you need parrot/master (which has a fix to pbc_to_exe with spacy paths)

[18:40] <moritz> though it should error out eariler in that case

[18:40] <moritz> erm wait, no

[18:43] *** domidumont joined
[18:43] <jnthn> moritz: master got further (or different):

[18:43] <jnthn> C:\consulting\omg spaces\rakudo\install\lib\libparrot.lib

[18:43] <jnthn> Error: couldn't copy libparrot.dll to \libparrot.dll: No such file or directory

[18:44] *** M_o_C joined
[19:01] <diakopte1> pmichaud: why would you suggest I suggested to remove threads from parrot?

[19:01] <moritz> jnthn: hm, weird

[19:02] <pmichaud> diakopte1: ??

[19:05] *** diakopte1 is now known as diakopter

[19:07] *** aindilis left
[19:08] <diakopter> pmichaud: nm, you didn't

[19:10] *** aindilis joined
[19:11] <FROGGS> rindolf: 've got no time and no money... sorry

[19:11] <pmichaud> diakopter: I just know that rurban was using your disagreement with him as a basis for criticizing what other people are doing, and wanted to disabuse him of that.

[19:12] <rindolf> FROGGS: OK, sorry to hear that. :-(

[19:13] *** jcrigby joined
[19:13] <FROGGS> ya, I'd like be a regular on YAPCs and other workshops and hackathons

[19:14] <arnsholt> FROGGS: Where in the world are you at?

[19:18] <jnthn> dinner, bbl

[19:20] *** thou left
[19:20] *** Chillance left
[19:20] *** thou joined
[19:21] *** Chillance joined
[19:21] <moritz> google announced that there'll be a GSoC this year

[19:22] <moritz> I wonder if Rakudo should apply as an org separately

[19:22] *** Tene_ is now known as Tene

[19:23] <masak> I think so.

[19:23] <PerlJam> definitely.

[19:24] <masak> yet another take on defaults for subtypes: they work as "a constructive proof that the type is inhabited".

[19:24] <masak> phrase borrowed from https://en.wikipedia.org/wiki/Dependent_type but applies in this case, too.

[19:30] <FROGGS> arnsholt: berlin

[19:31] <FROGGS> moritz: I already have two shirt but had no chance to mentor at all

[19:36] <arnsholt> Berlin is workable. I think there might be a workshop in Copenhagen coming up. That might be feasible from Berlin?

[19:36] <moritz> the Nordic Perl Workshop, yes

[19:37] <FROGGS> well, there is the german workshop next month in berlin

[19:37] *** perlhelp joined
[19:37] <perlhelp> Hi! :)

[19:37] <FROGGS> hi perlhelp 

[19:37] <nwc10> shouldn't everyone just go to http://act.yapc.eu/gpw2013/ and be done? :-)

[19:37] <FROGGS> copenhagen, sounds good

[19:38] <arnsholt> moritz: Is there a website or something for that yet?

[19:38] <perlhelp> This room does perl 6 but not perl 5?

[19:38] <perlhelp> Hi FROGGS

[19:38] <arnsholt> nordic perl workshop on Google only turns up the old versions, but not the upcoming one =(

[19:38] <nwc10> perlhelp: correct. you'd want #perl for your perl 5 questions, I think

[19:38] <FROGGS> or irc.perl.org

[19:39] <nwc10> #perl-help on irc.perl.org

[19:39] <perlhelp> May I please kindly ask if there is a big difference between 5 and 6?

[19:39] <nwc10> on irc.perl.org, #perl is a "social" channel

[19:39] <moritz> perlhelp: there is

[19:39] <PerlJam> perlhelp: yes, there are

[19:39] <FROGGS> channel perl-help on irc.perl.org

[19:39] <FROGGS> ohh, you said that already

[19:39] <nwc10> there's less difference between Perl 5 and Perl 6 than (say) between Perl and Python

[19:39] <perlhelp> OH, so people cannot discuss perl 5 hee

[19:40] <nwc10> no, we didn't say *that* :-)

[19:40] <PerlJam> perlhelp: Perl 5 and Perl 6 are different languages in the same family.  If you're interested in doing things with Perl, you likely want Perl 5.  See #perl or the other channels already mentions

[19:40] <PerlJam> er, mentioned

[19:40] <FROGGS> only if you want to compare perl 5 statements and perl 6 ones

[19:40] <moritz> well, we discuss Perl 5 from a design point of view; we don't help with your Perl 5 problems.

[19:41] <masak> <moritz> rindolf: within one standard deviation of my own, peculiar average

[19:41] * masak gets a vicarious thrill out of that statement

[19:41] <rindolf> masak: hi.

[19:41] <moritz> masak: :-)

[19:41] <moritz> and you know where I stole that phrase from :-)

[19:41] <rindolf> PerlJam: perlhelp is a troll.

[19:42] <moritz> rindolf: there people who say that about you too. Please moderate yourself with such statements.

[19:42] <masak> perlhelp: hi! 还就不见了!

[19:42] <PerlJam> rindolf: if you say so.  I tend to give the benefit of the doubt.

[19:42] *** mtymula left
[19:43] <masak> perlhelp: we love talking about the difference between 5 and 6 here. but mostly because we're very proud of what we have with 6.

[19:44] *** perlhelp left
[19:44] <masak> perlhelp: I went to FOSDEM the other weekend. to my surprise I had forgotten many of the things that make Perl 6 great. the reaction of my audiences served to remind me.

[19:44] <masak> perlhelp: aww. :)

[19:46] <masak> er. I explained that badly.

[19:46] <masak> I know very well what things about Perl 6 I think are nice.

[19:47] <masak> but I had forgotten how much they matter (as improvements) if all you've seen is Perl 5.

[19:47] *** perlhelp_ joined
[19:47] <perlhelp_> Hi!

[19:47] <perlhelp_> I was disconnected

[19:47] <perlhelp_> So i missed a few things

[19:47] <masak> perlhelp_: welcome reconnected. :)

[19:47] <masak> perlhelp_: there's a log.

[19:47] <perlhelp_> But people do not know perl 5 here :)

[19:47] <perlhelp_> oh ok.

[19:47] *** erry joined
[19:47] <FROGGS> masak: ya, I notice everyday how powerful p6 is, when hacken p5 or php

[19:47] <perlhelp_> bless your kind soul msak

[19:47] <masak> Data::Dumper? yes, it's a method.

[19:48] <masak> DateTime? yes, we have it built in.

[19:48] <masak> Test::More? yes, but we call it "Test" :)

[19:48] <arnsholt> XS? No, it's dead and buried

[19:48] <masak> classes? yes, of course.

[19:48] <FROGGS> (I added gist methods to my packages to have a bit of a perl 6 feeling :o)

[19:48] <masak> we got roles, too.

[19:48] <masak> oh, and signatures!

[19:49] <perlhelp_> I do not want to take up room here. But is thee someone with whom I can discuss perl 5 one-on-one in here?

[19:49] <masak> and grammars! <3

[19:49] <geekosaur> not really

[19:49] <masak> perlhelp_: feel free to lighten your heart.

[19:49] <FROGGS> grammars++

[19:49] <arnsholt> masak: And a type system (which is optional)

[19:49] <perlhelp_> msask? What do you mean?

[19:49] <masak> we even do multiple inheritance if you're into that thing.

[19:50] <masak> perlhelp_: I mean we trust you not to misbehave and go off topic too much. if you do, we'll tell you.

[19:50] <masak> perlhelp_: this is not a Perl 5 help channel.

[19:50] <masak> most other topics are OK.

[19:51] *** zby_home joined
[19:51] <perlhelp_> I need a lot of help with perl and am scared to derail the room.

[19:51] <masak> if you need a lot of help, there are better channels for that.

[19:51] <moritz> perlhelp_: then you should ask for a mentor, but you should ask in Perl 5 room for that

[19:51] <swarley> alright, time to work on something that i'm not sure of and should have written down a few days ago

[19:51] <perlhelp_> No!  Perl-5 doe not like mentoring.

[19:51] <masak> we do mostly Perl 6 here. many of us are proficient in Perl 5, but that's not why we are here.

[19:51] <moritz> perlhelp_: or maybe get some professional training

[19:52] <perlhelp_> Maybe I can get a perl 6 mentor then?

[19:52] <masak> sure.

[19:52] <moritz> if you're actually willing to learn Perl 6, sure

[19:52] <swarley> Perl6 would not exactly give you a drop in replacement of what you would use perl5 for though

[19:52] <swarley> At this moment at least

[19:52] <masak> depends on how many wheels you're willing to reinvent yourself :)

[19:52] <perlhelp_> yes, i would learn perl 6 but i ned omeone to help me

[19:53] <perlhelp_> i just cannot do it alone.  

[19:53] *** jms53 left
[19:53] <perlhelp_> i would reinvent with the help

[19:53] <swarley> I would first ask why you are willing to switch from wanting to learn perl5 to perl6 so quickly? The languages are not similar in many aspects

[19:53] <masak> perlhelp_: http://bash.org/?3936

[19:53] <spider-mario> o/ moritz

[19:53] <spider-mario> are you sure that qq["$file" --show-config] will work with paths that contain double quotes?

[19:53] <spider-mario> would that not work instead: open my $CONFIG, '-|', $file, '--show-config'

[19:54] <spider-mario> after all, open is capable of handling the quoting itself

[19:54] <TimToady> r: enum Color (<red green purple> Z=> 1,2,4);

[19:54] <p6eval> rakudo a3869a: OUTPUT«===SORRY!===␤Method 'returns' not found for invocant of class 'List'␤»

[19:54] <moritz> spider-mario: but iirc the open PIPE form isn't implemeneted on windows :(

[19:54] <perlhelp_> masak: ok, so no mentoring?

[19:54] <spider-mario> oh :(

[19:54] <masak> perlhelp_: I didn't say that :)

[19:54] <TimToady> masak: ^^

[19:54] <moritz> spider-mario: I mean, open pipe LIST

[19:54] <masak> perlhelp_: but you have to take personal responsibility for your learning.

[19:54] <spider-mario> it’s always windows, isn’t it.

[19:54] <swarley> If there was no mentoring for perl6 I would be in trouble ;)

[19:54] <masak> perlhelp_: no-one can put stuff into your head.

[19:55] * masak submits TimToady's rakudobug

[19:55] <perlhelp_> I know.  But I need help on where to start.  Saying "Google" means nothing to me.

[19:55] <perlhelp_> I don't know what to google.

[19:55] <swarley> But your description of mentoring should be that someone can help you understand something that you tried to learn

[19:55] <perlhelp_> What to read.

[19:55] <masak> perlhelp_: here's a 5-second mentoring. write a small program in Perl 6. make it either succeed or fail. report your progress here.

[19:55] <moritz> perlhelp_: perl6.org has a pretty good list of links to stuff to read

[19:55] <swarley> http://perl6.org/documentation/

[19:55] <masak> perlhelp_: good luck. ask questions as soon as you get stuck.

[19:56] <diakopter> perlhelp_: what other programming languages have you used?

[19:56] <perlhelp_> I tried that with perl-5 and they HATE me

[19:56] <swarley> http://en.wikibooks.org/wiki/Perl_6_Programming

[19:56] <perlhelp_> C++

[19:56] <perlhelp_> Stata

[19:56] <perlhelp_> Matlab

[19:56] <masak> perlhelp_: what, all of them HATE you?

[19:56] <moritz> swarley: that's not very up-to-date or complete

[19:56] <perlhelp_> enough do

[19:56] <masak> perlhelp_: man, what's the statistical likelihood of that? :P

[19:57] <perlhelp_> i tried to program and told me i was not trying

[19:57] <swarley> moritz; I know, (as I've found) but it's what I've been starting with and it should be enough to get you on the right track shouldn't it?

[19:57] <perlhelp_> i wrote my own code and failed

[19:57] <perlhelp_> and said my failures were to rudimentary for their help

[19:57] <perlhelp_> that is my understanding

[19:57] * masak hugs perlhelp_ :)

[19:57] <swarley> Okay, I actually believe you on that

[19:57] <masak> perlhelp_: seems you've had a rough trip.

[19:57] <perlhelp_> yes!!

[19:57] <perlhelp_> swarley: you  believe me?

[19:57] <perlhelp_> I spent 2 weeks doing nothing but lerning perl 5

[19:57] <masak> perlhelp_: we're not like that here. this is the nice corner of the Intertubes.

[19:58] <swarley> Especially from #perl or #c++/##c

[19:58] <perlhelp_> I'm really exhausted now

[19:58] <perlhelp_> My back is hurting

[19:58] <perlhelp_> I' haven't gone to the gym in a long time (or much else for that matter)

[19:58] <perlhelp_> and I'm kind of at wits ends now

[19:58] <swarley> perlhelp_; what's your motivation for learning?

[19:58] <perlhelp_> I am working on a manuscript (nothing perl related)

[19:58] <perlhelp_> And I need to scrape some information off of the internet.

[19:58] <perlhelp_> I made a lot of headway in perl5

[19:59] <perlhelp_> But I do not know how to get further help

[19:59] <swarley> What information?

[19:59] <perlhelp_> and perl 5 people are trying to kill me

[19:59] <diakopter> I doubt that

[19:59] <perlhelp_> swarley: would you like to see an example?

[19:59] <swarley> Sure

[19:59] <perlhelp_> diakopter: if you have seen the things they have said to me

[19:59] <perlhelp_> i almost had  a stroke

[19:59] <masak> perlhelp_: some perl 5 people are very tired of helping people who do not ask questions in their favorite way.

[19:59] <swarley> Perl5 isn't my "mother tongue" but I can read it fairly well

[20:00] <masak> perlhelp_: their behavior often comes off as intolerance.

[20:00] <perlhelp_> Oh, you want the code or the website ?

[20:00] <swarley> The code would help more in this instance

[20:00] <masak> don't paste anything on-channel.

[20:00] <masak> paste it to a pastebin service.

[20:00] <swarley> www.pastebin.com

[20:00] <perlhelp_> i know.  i will do a pste

[20:00] <perlhelp_> i cn't do pastebin

[20:00] <perlhelp_> paste org ?

[20:00] <masak> any is fine.

[20:00] <swarley> Any paste service

[20:00] <perlhelp_> patsebin is failing on me for some reasons

[20:00] *** fgomez left
[20:01] <moritz> gist.github.com is fine

[20:01] <perlhelp_> blesss your kind souls

[20:01] <perlhelp_> ok give me a few seconds to do the pasting

[20:01] <masak> r: say (<red green purple> Z=> 1,2,4).perl

[20:01] <p6eval> rakudo a3869a: OUTPUT«("red" => 1, "green" => 2, "purple" => 4).list␤»

[20:01] * geekosaur notes that a number of netnannies block pastebin.com because it has in the past been used to communicate things like stolen credit card numbers

[20:01] <perlhelp_> I'm sorry if my code does not look pretty

[20:01] <spider-mario> http://paste.awesom.eu/ is good

[20:01] <perlhelp_> It is the best I can do

[20:02] <masak> perlhelp_: no need to apologise for that.

[20:02] <geekosaur> so I can't reach it from e.g. the local library unless I run tor

[20:02] <masak> perlhelp_: we're all on a learning curve.

[20:02] * swarley is learning Go as he implements 6model

[20:02] <perlhelp_> http://goo.gl/8zTHW

[20:02] <swarley> probably not the smartest choice

[20:03] <perlhelp_> I'm having some trouble at the url line: 29-31

[20:03] <moritz> that's not Perl 6 code.

[20:03] <perlhelp_> It only works right now if I manually put it in rather than have perl find it, and I need perl to find it since the address is so aribtrary

[20:03] <perlhelp_> no it's not.

[20:03] <perlhelp_> I said it was perl 5!

[20:03] <moritz> perlhelp_: well, we were very clear. If you get Perl help here, it will be Perl 6 help.

[20:04] <swarley> What are you trying to do exactly?

[20:04] <arnsholt> timotimo: *prod?*

[20:04] <perlhelp_> can i show you the website then?

[20:04] <swarley> This is for a web app?

[20:04] <perlhelp_> no, i don't think so

[20:04] <perlhelp_> it is to scrape information off of it

[20:05] <swarley> Why is it that you need to scrape the information? Is there a large amount of data that you need?

[20:05] <perlhelp_> yes

[20:05] <spider-mario> I love Web::Scraper for doing that

[20:05] <masak> me too.

[20:05] <perlhelp_> I have a list of 8 million people.  For each one, I know their first name, last name, gender, race, year of birth (within +/- 2), and their U.S. state (or country) of birth.  

[20:06] <swarley> 8 million?

[20:06] <perlhelp_> yes :(

[20:06] <perlhelp_> maybe less

[20:06] <masak> that's about one Sweden.

[20:06] <perlhelp_> maybe 4 million

[20:06] <swarley> Well, first of all. You probably will not get that many from the site

[20:06] <perlhelp_> but a lot

[20:06] <masak> oh. one Norway, then :)

[20:06] <arnsholt> r: my $foo is export; say "alive"

[20:06] <p6eval> rakudo a3869a: OUTPUT«alive␤»

[20:06] <perlhelp_> ok

[20:06] <perlhelp_> let's make it 1,000

[20:06] <arnsholt> r: my $foo is export = 4; say "alive"

[20:06] <p6eval> rakudo a3869a: OUTPUT«alive␤»

[20:06] <perlhelp_> can we got to the next step then?

[20:06] <diakopter> perlhelp_: unfortunately, I don't think we can help you, since we can't do that kind of theng in Perl 6 right now

[20:06] <perlhelp_> huh?

[20:07] <swarley> You may be able to get 1,000 before your IP is temporarily blocked

[20:07] <perlhelp_> perl 6 does not scrape?

[20:07] <perlhelp_> no, it will be ok

[20:07] <perlhelp_> I've already scraped a lot from the site.

[20:07] <perlhelp_> It is ok

[20:07] <perlhelp_> There is no TOS

[20:07] <perlhelp_> I told them.  They know

[20:07] <swarley> If they know, they should be able to query the database for you.

[20:07] <perlhelp_> they don't.

[20:08] <swarley> But you just said they know

[20:08] <masak> diakopter: hm, what's missing? we have a LWP::Simple, but that's not the same as LWP::UserAgent, I guess.

[20:08] <perlhelp_> yes, i told them

[20:08] <timotimo> arnsholt: what's up?

[20:08] <perlhelp_> can we go on to the next step?

[20:09] <diakopter> masak: most of the things used in the p5 script - CGI, html parser, dom manipulation

[20:09] <moritz> perlhelp_: translating to Perl 6? sure, your call

[20:09] <perlhelp_> oh that's fine

[20:09] <swarley> I suppose I should make typeObject noew

[20:09] <swarley> now*

[20:09] <perlhelp_> I meant i thoguht we were stuck on whethe I'm scraping 1,000 times, 5, times, ....

[20:09] <au> perlhelp_: hi. if you are in contact with the admins of that site, have you considered signing up for an API key? https://familysearch.org/developers/docs/getting-started

[20:09] <perlhelp_> I haven't even described what I'm scraping

[20:10] <perlhelp_> Yes I signed up

[20:10] <masak> diakopter: CGI doesn't seem to be used in the script.

[20:10] <perlhelp_> They are still developing it for this part of the site.

[20:10] <perlhelp_> It is not available yet.

[20:10] <masak> diakopter: was probably a dead end from earlier development.

[20:10] <perlhelp_> That is how I've been in touch.

[20:10] <arnsholt> timotimo: Are you on a UNIX or Windows?

[20:10] <perlhelp_> I will be availbale but is not yet

[20:10] <diakopter> masak: ah, good idea

[20:10] *** fgomez joined
[20:11] *** fhelmberger left
[20:11] <masak> diakopter: and I bet the HTML::DOM module could be worked around in a pinch.

[20:12] <timotimo> i'm on a unix. i do have a windows nearby, but i don't know how hard it is to set it up to compile and run parrot, nqp and rakudo (i guess it's a huge pain)

[20:12] <arnsholt> I'm on a UNIX, so that's not a problem

[20:13] <arnsholt> It's just one less thing to worry about if I can ignore Windows portability for the time being

[20:13] <perlhelp_> diakopter: I might not be using the best tools.

[20:13] <perlhelp_> These are my gueses

[20:13] <perlhelp_> Should I tell you what I'm trying to do?

[20:14] <masak> perlhelp_: it's pretty clear from the script what you're trying to do.

[20:14] <perlhelp_> oh ok.  i'm glad it is.

[20:14] <perlhelp_> the script is incomplete though

[20:14] <perlhelp_> so i did not think it would be.

[20:14] <masak> aye, it's incomplete.

[20:14] <perlhelp_> it's nearly complete

[20:14] <masak> nice.

[20:15] *** domidumont left
[20:15] <masak> best of luck :)

[20:15] <perlhelp_> there are a few small things I needed to add that I did not yet figure out either.

[20:15] <perlhelp_> msask: huh?

[20:15] <masak> perlhelp_: this is not a Perl 5 help channel.

[20:15] <perlhelp_> well, if this can be done in perl 6, i'm all ears!!

[20:15] <perlhelp_> i'm read to learn perl 6 if so

[20:15] <masak> ;)

[20:16] *** erry left
[20:16] <masak> general question to channel: can our LWP::Simple do what perlhelp_ is doing with LWP::UserAgent?

[20:18] <arnsholt> star: use NativeCall :EXPORT; say "alive?"

[20:18] <p6eval> star 2012.12: OUTPUT«===SORRY!===␤Error while importing from 'NativeCall': no such tag 'EXPORT'␤»

[20:20] <arnsholt> Oh. I'm going to have to put all of the things into a great big module, aren't I

[20:21] <masak> either way, I guess there's room for LWP::UserAgent in the Perl 6 ecosystem ;)

[20:21] <perlhelp_> masak: what do you mean?

[20:21] <masak> perlhelp_: well, we don't load CPAN modules from Perl 6 yet.

[20:21] <masak> perlhelp_: so when we want something like LWP::UserAgent, we tend to implement it ourselves.

[20:22] <perlhelp_> from scratch?

[20:22] <perlhelp_> WOW

[20:22] <masak> perlhelp_: (this is temporary. with time, we would like to be able to load Perl 5 modules)

[20:22] <masak> perlhelp_: but yeah, this is why no-one stands up and tells you "yes, you can write this script in Perl 6".

[20:22] <perlhelp_> oh you mean you have to write them?

[20:23] <perlhelp_> i'm not following

[20:23] <masak> long term, we would like a Perl 5-Perl 6 bridge.

[20:23] <masak> so Perl 6 can load Perl 5 modules.

[20:23] <masak> now, that won't work for all Perl 5 modules.

[20:23] *** benabik joined
[20:23] <masak> does LWP::UserAgent do XS?

[20:23] <masak> if not, it should be possible to load it in the future.

[20:24] <masak> until then, you'd have to do something in Perl 6 to compensate for the lack of LWP::UserAgent.

[20:24] <masak> perlhelp_: that's why diakopter was less-than-optimistic about you being able to (easily) port that script to Perl 6.

[20:24] <perlhelp_> oh i see

[20:26] <[Coke]> masak: I wonder if #perl6 could set up a #p5 consultancy to help fund sixdev. :)

[20:26] <masak> [Coke]: hah! :D

[20:26] *** brrt joined
[20:27] <masak> [Coke]: "Give me your tired, your poor, Your huddled masses yearning to breathe free, The wretched refuse of your teeming shore. Send these, the homeless, tempest-tost to me, I lift my lamp beside the golden door!"

[20:27] <masak> people like perlhelp_++

[20:29] <perlhelp_> yes, i am an immigrant :)

[20:29] <masak> [Coke]: I'm afraid that if I tell perlhelp_ "can you stick around for a few months? I'm just gonna build LWP::UserAgent", he'll grow impatient and leave. what should I do? :)

[20:29] <perlhelp_> is that what you mean?

[20:29] <perlhelp_> i would stick around.  

[20:29] <masak> perlhelp_: it was a kind of metaphor.

[20:29] <perlhelp_> but i think there will be a lot of modules needed

[20:29] <perlhelp_> it might be many months after thta

[20:30] <masak> perlhelp_: by self-selection, the people on this channel are a patient bunch.

[20:31] <moritz> nah, if I were patient, I wouldn't hack on perl 6, but wait until others have done it.

[20:31] *** uvtc joined
[20:32] <perlhelp_> yes i can see!!

[20:32] <perlhelp_> waiting months to write a module

[20:32] <perlhelp_> i can see why perl 5 people are bi-otches

[20:34] <uvtc> nwc10: you mentioned #perl just a bit ago. (Hm. I like that word, "justabitigo"). So, #perl at irc.perl.org is the social channel. What's the difference between #perl-help on irc.perl.org and #perl at freenode?

[20:34] <perlhelp_> #perl is a room of bi-otches

[20:34] <uvtc> perlhelp_: please be kind :)

[20:34] <swarley> Keep in mind, many of us are in that room

[20:35] <nwc10> uvtc: I don't know what if any differences there are betewen #perl-help on irc.perl.org and #perl on freenode. I've used neither

[20:35] <nwc10> but I'm told that bother are "help" channels

[20:35] <uvtc> nwc10: thanks.

[20:36] <masak> (then there's #metallica...) :P

[20:36] <swarley> lolol

[20:36] *** brrt left
[20:36] <FROGGS> I have only one experience with #perl-help from a week ago, and I got help from within 15minutes, and the guy/girl was nice

[20:36] <perlhelp_> FROGGS: is that the same as #perl ?

[20:37] <FROGGS> no, I meant #perl-help on irc.perl.org

[20:38] <perlhelp_> oh, i can't get to that site for some reason

[20:38] <perlhelp_> i go to irc.perl.org and i got a weird pic of an animal

[20:38] <diakopter> it's not a website

[20:39] <diakopter> you have to use an IRC client

[20:39] <diakopter> there isn't a web inyerface like the one you're using for freenode

[20:39] <diakopter> *interface

[20:39] <diakopter> inyerface too

[20:39] <perlhelp_> xchat?

[20:39] *** zby_home left
[20:39] <perlhelp_> i tried that but failed

[20:40] <swarley> ?

[20:40] <swarley> How did you fail?

[20:42] <geekosaur> xchat doesn't come with irc.perl.org in its default network list; you would need to add it

[20:42] <perlhelp_> it did not connect

[20:42] <perlhelp_> i trid to add it 

[20:42] <perlhelp_> it said it did not work

[20:43] <swarley> /newserver irc.perl.org 6667

[20:43] <geekosaur> just worked for me, fwiw

[20:44] *** japhb_ joined
[20:49] <swarley> I wonder where I should go from here

[20:50] *** thou left
[20:54] *** fgomez left
[20:55] *** rindolf left
[21:01] *** kivutar joined
[21:06] *** shinobicl left
[21:08] <perlhelp_> I GOT Some code to work!

[21:08] <perlhelp_> YAY!!!

[21:08] <perlhelp_> Take that #perl!!

[21:08] <perlhelp_> They said I cannot do anything!!

[21:10] <perlhelp_> SUCK IT #perl :P

[21:10] <perlhelp_> :)

[21:11] *** thou joined
[21:12] <PerlJam> perlhelp_: #perl6 is not usually that impolite.  We give hugs to those that need them.

[21:13] <perlhelp_> i know.  Perl5 tried to kill me this weekend :(

[21:13] *** kaare_ left
[21:13] <perlhelp_> #perl6 is amazing!!!!!!!!!!

[21:13] <perlhelp_> #perl5 sucks!!!!!!!!!

[21:13] <masak> perlhelp_: "you need to learn how to figure out stuff yourself.." :)

[21:13] <jnthn> masak: How does one do that?

[21:13] <perlhelp_> what's wrong?  some of my code now compiles?

[21:13] <masak> :P

[21:14] <masak> perlhelp_: no, I was just reminding you of the link I sent you earlier today. :)

[21:14] <PerlJam> .oO( jnthn:  Just tell me! )

[21:14] <masak> perlhelp_: it'd still be a good idea for you to find a place where people actually answer Perl 5 questions, I think.

[21:15] <perlhelp_> yes it would, but i cannot get to that plce

[21:15] <perlhelp_> #perl5 banned me

[21:15] <PerlJam> There's a #perl5?

[21:16] <PerlJam> or did you mean #perl?

[21:17] <uvtc> perlhelp_: if you want help with Perl 5 specifically, check out either #perl at freenode, or #perl-help at irc.perl.org.

[21:17] <PerlJam> perlhelp_: there's also #perlhelp on efnet 

[21:17] <PerlJam> (if anyone still goes to efnet)

[21:17] *** uvtc left
[21:17] <perlhelp_> #perl5 here banned me

[21:18] <TimToady> um, there's only one person on that channel

[21:18] <sorear> masak: nah, I just saw a link to it and I couldn't remember what was on that site so I checked

[21:19] *** fgomez joined
[21:19] <swarley> finished repr.go \o/

[21:19] <masak> sorear: there were many wondrous things on that site. maybe I can rescue some of the content.

[21:19] <masak> swarley++

[21:20] <swarley> And, changes are pushed

[21:20] *** bruges_ left
[21:21] <jnthn> swarley: öl^Wurl?

[21:21] <jnthn> oh, guessed it :)

[21:22] <jnthn> hm, how to read go code... :)

[21:22] <perlhelp_> so where else is perl5 help?     /newserver irc.perl.org 6667  ????

[21:22] <perlhelp_> how do i get there?

[21:22] *** bruges joined
[21:23] <swarley> It's a little difficult at first :)

[21:23] <jnthn> swarley: On the "// Flattening methods" bit - those exist because on the JVM we handle flattened attributes by including them in a generated JVM type.

[21:23] <swarley> Ah. I only threw them in because I wasn't sure what they were for yet

[21:23] <jnthn> swarley: I don't know go well enough to be sure, but I'd guess it's closer to C than JVM.

[21:23] <swarley> I'm going to tidy up after I get through the code

[21:24] <jnthn> In the C implementation on Parrot we don't do such code-gen; the REPRs are really about computing struct layouts.

[21:24] <jnthn> I dunno what Go does/doesn't let you do in that regard, I'm afraid, so it's hard to give good hints.

[21:24] <swarley> go compiles to machine code, so yeah it's a little more like C

[21:24] <swarley> Well, what would you define to be a flattened attribute?

[21:25] <jnthn> On the third hand, a 6model VM will probably have the REPRs participate in JIT, so I guess they get their code-gen role after all... :)

[21:25] <swarley> because Go doesn't allow for pointer manipulation so that it's a lot harder to get a segfault

[21:25] <jnthn> swarley: Flattened in as in

[21:25] <jnthn> class A { has $!x; has int $!y; }

[21:25] <jnthn> The $!x here is a reference to another object

[21:25] <swarley> Ah

[21:26] <jnthn> The int, however, is not; it's a native interger living in the object body.

[21:26] <swarley> So you're collapsing the reference?

[21:26] <jnthn> Yeah.

[21:26] <jnthn> Well, you could think of it that way :)

[21:26] <swarley> Oh, well I think most of the code I'm going to generate is going to use pointers instead of the actual reference for speed

[21:26] <swarley> err, actual object*

[21:27] <TimToady> everything is really a native, but if you don't specify a native type explicitly, you get an implicit native pointer to a P6 object

[21:27] <jnthn> And there's another way to look at it. :)

[21:27] <swarley> oh, hm.

[21:28] <swarley> I think I'll remove the flattening. Most of the code should just be moving around pointers anyway

[21:32] <swarley>     private static HashMap<String, Integer> reprIdMap = new HashMap<String, Integer>();

[21:33] <swarley> I'm assuming it's a map with string keys to int values?

[21:36] <jnthn> Correct.

[21:36] <swarley> Wonderful, I really should learn more Java

[21:36] <jnthn> Looks like you're translating the repr registry...

[21:36] <jnthn> At a language level, there's not a lot of Java to learn. :)

[21:39] <swarley> Yeah, I just need to learn more of the library

[21:39] <skids> ⱺ.ⱺ http://joeyh.name/blog/entry/unicode_eye_chart/

[21:40] <jnthn> Well, the library is a bigger task ;)

[21:42] *** benabik left
[21:42] <perlhelp_> swarley: How do I get to:    /newserver irc.perl.org 6667  ???? 

[21:42] <swarley> Open xchat, close the server list.

[21:43] *** spider-mario left
[21:46] <perlhelp_> close the sever list?!?

[21:46] <Ayiko> hi #perl6!

[21:46] <geekosaur> you're specifying a server manually so you don't want the server list, just the main window

[21:47] <Ayiko> .u ಅ

[21:47] <phenny> U+0C85 KANNADA LETTER A (ಅ)

[21:47] <Ayiko> skids: the eye chart is missing this besides the beer mug >_>

[21:51] <swarley> jnthn; It's not really my place to suggest this, but wouldn't it be a bit more efficient to directly use REPR.ID and avoid recomputing the size of reprs here? https://github.com/jnthn/nqp-jvm-prep/blob/master/src/org/perl6/nqp/sixmodel/REPRRegistry.java#L27

[21:52] *** wk left
[21:52] <jnthn> swarley: probably, but given that code is only called from setup() and that's only ever called once at startup... :)

[21:52] <swarley> Oh alright

[21:53] <jnthn> It's kinda bad style though. jnthn-- 

[22:00] *** skids left
[22:02] <dalek> nqp/rx-portability: 029bf5c | jnthn++ | src/6model/reprs/NFA.c:

[22:02] <dalek> nqp/rx-portability: NFA REPR serialize/deserialize.

[22:02] <dalek> nqp/rx-portability: review: https://github.com/perl6/nqp/commit/029bf5ca06

[22:02] <dalek> nqp/rx-portability: c56d322 | jnthn++ | src/QRegex/Cursor.nqp:

[22:02] <dalek> nqp/rx-portability: Start !cursor_start refactor.

[22:02] <dalek> nqp/rx-portability: 

[22:02] <dalek> nqp/rx-portability: Currently it is the only thing in the NQP or Rakudo codebase that uses

[22:02] <dalek> nqp/rx-portability: Parrot's multiple return values feature. This splits it up into two

[22:02] <dalek> nqp/rx-portability: routines, one for things that really only want the cursor anyway (and

[22:02] <dalek> nqp/rx-portability: so this will be an efficiency win for them) and one for generated code

[22:02] <dalek> nqp/rx-portability: that wants all the things (which we can still do without allocating).

[22:02] <dalek> nqp/rx-portability: review: https://github.com/perl6/nqp/commit/c56d32262d

[22:02] <dalek> nqp/rx-portability: c7f057b | jnthn++ | src/QRegex/Cursor.nqp:

[22:02] <dalek> nqp/rx-portability: First batch of !cursor_start updates.

[22:02] <dalek> nqp/rx-portability: review: https://github.com/perl6/nqp/commit/c7f057b1ed

[22:03] *** slavik1 left
[22:04] *** slavik1 joined
[22:05] <jnthn> oops, the commit message is a lie...

[22:05] * jnthn figures he'll do the rest and then check if there's actually any noticable difference before worrying...

[22:10] *** sqirrel left
[22:12] *** PacoAir left
[22:13] <swarley> reprRegistry.go is done :) (as done as it can be at the moment)

[22:13] <[Coke]> GSOC 2013 announced.

[22:14] <[Coke]> we should try to coordinate with the p5 folks as soon as possible.

[22:18] <perlhelp_> Coke: why would you wnt to work wth p5?

[22:18] <perlhelp_> They are not as cool as p6!

[22:18] *** MikeFair_ left
[22:18] <perlhelp_> I'm talking about #perl5

[22:18] <perlhelp_> #perl6 is the best!!!

[22:18] <FROGGS> perlhelp_: calm down

[22:19] *** MikeFair__ joined
[22:19] <perlhelp_> Ok.  I just wnt to expres my love for decent humans who are also developers

[22:19] <perlhelp_> I know I am getting obnoxious

[22:19] <perlhelp_> It just seems so rare to find developers who are humans!

[22:20] <Juerd> We need human developers because robots write awful code.e

[22:20] <Juerd> s/e$//

[22:21] <masak> perlhelp_: I suspect many of the other channels are abrasive because the signal-to-noise ratio there is much lower.

[22:22] <masak> it's like in a (physical) room where the only way to communicate is to shout.

[22:22] <perlhelp_> perl has no signal nor noise

[22:22] <perlhelp_> they just want to plonk and sleep

[22:23] * [Coke] notes that perlhelp_++'s SN ratio is getting lower.

[22:23] <[Coke]> -> homeish

[22:24] <masak> "plonk and sleep" sounds like a good name for a punk band.

[22:24] <swarley> once again, try to remember that practically everyone in here is also in #perl

[22:25] * geekosaur doesn't generally hang there, should probably look in at least

[22:25] <swarley> http://www.youtube.com/watch?v=aLwaPP9cxT4

[22:25] <masak> 'night, #perl6

[22:25] <swarley> I find that very interesting

[22:25] <swarley> and unrelated

[22:25] <swarley> night o/

[22:26] <perlhelp_> swarley: are you here?

[22:26] <swarley> Am I there? No, not usually

[22:27] <geekosaur> ...such timing :/

[22:29] <perlhelp_> is there nybody in perl #5 with whom i cn please speak?

[22:29] <perlhelp_> like Bingo?

[22:29] <geekosaur> is there some reason you need to ask in #perl6?

[22:31] <perlhelp_> yes, i am not allowed in perl#5.  i want to know when i may be allowed back.

[22:31] <perlhelp_> i am not getting ny clear info on that

[22:31] *** M_o_C left
[22:33] <perlhelp_> i just want to know what i can do to be allowed back.  thta is all.  i will do it plus mor.

[22:36] *** thou left
[22:36] <swarley> hm. Not sure what to do now

[22:37] <Tene> perlhelp_: you keep talking about #perl5, and haven't responded to people who have mentioned #perl

[22:37] <perlhelp_> huh?

[22:37] <Tene> Two other IRC channels for perl 5 help have been mentioned too.

[22:37] <perlhelp_> yes, i am confused still on how to get there

[22:38] <swarley> https://help.ubuntu.com/community/XChatHowto

[22:39] *** bluescreen10 joined
[22:43] * swarley ponders what he should do now

[22:47] *** kivutar left
[22:48] *** bluescreen10 left
[22:48] *** bluescreen100 left
[22:49] *** c1sung_ joined
[22:49] *** c1sung left
[22:54] *** mathw left
[22:54] *** mathw joined
[22:54] *** Gothmog_ left
[22:55] *** pmurias joined
[22:56] *** slavik1 left
[22:56] *** slavik1 joined
[22:56] *** Gothmog_ joined
[23:07] <swarley> Starting on P6Opaque :D I'm more afraid than I look

[23:10] *** thou joined
[23:10] <jnthn> It's less scary than it used to be...

[23:12] <swarley> oh boy

[23:13] <dalek> nqp/rx-portability: b555f7f | jnthn++ | src/HLL/Grammar.pm:

[23:13] <dalek> nqp/rx-portability: Update HLL::Grammar calls to !cursor_start.

[23:13] <dalek> nqp/rx-portability: review: https://github.com/perl6/nqp/commit/b555f7ff71

[23:13] <dalek> nqp/rx-portability: ff1a336 | jnthn++ | src/QAST/Compiler.nqp:

[23:13] <dalek> nqp/rx-portability: Update call to !cursor_start in code-gen.

[23:13] <dalek> nqp/rx-portability: 

[23:13] <dalek> nqp/rx-portability: No measurable performane change.

[23:13] <dalek> nqp/rx-portability: review: https://github.com/perl6/nqp/commit/ff1a336787

[23:13] <dalek> nqp/rx-portability: 67eb623 | jnthn++ | src/stage0/ (9 files):

[23:13] <dalek> nqp/rx-portability: Update bootstrap.

[23:13] <dalek> nqp/rx-portability: review: https://github.com/perl6/nqp/commit/67eb623771

[23:13] <dalek> nqp/rx-portability: a7f47d9 | jnthn++ | src/QRegex/Cursor.nqp:

[23:13] <dalek> nqp/rx-portability: Kill !cursor_start, which used multiple return.

[23:13] <dalek> nqp/rx-portability: review: https://github.com/perl6/nqp/commit/a7f47d9b8e

[23:13] <dalek> nqp/rx-portability: 44f22ef | jnthn++ | src/ops/nqp.ops:

[23:13] <dalek> nqp/rx-portability: Kill dead code.

[23:13] <dalek> nqp/rx-portability: review: https://github.com/perl6/nqp/commit/44f22ef330

[23:14] <swarley> \o/

[23:14] *** perlhelp_ left
[23:21] <japhb_> jnthn++ # Simplifying the porters' jobs

[23:21] <japhb_> Self-interested altruism FTW

[23:25] *** benabik joined
[23:27] <jnthn> :)

[23:44] <dalek> Heuristic branch merge: pushed 16 commits to nqp by jnthn

[23:44] <diakopter> jnthn++ thanks :)

[23:45] <swarley> I should probably do more of repr

[23:45] *** MikeFair__ left
[23:45] <dalek> rakudo/nom: 7e22a79 | jnthn++ | / (4 files):

[23:45] <dalek> rakudo/nom: Chase !cursor_start changes.

[23:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7e22a79da9

[23:45] <jnthn> swarley: P6opaque can actually be stubbed for the most part until you want to implement attributes.

[23:46] <jnthn> swarley: And, moreover, you won't have any way to test it until you've got the KnowHOW bootstrap done.

[23:46] <jnthn> Though maybe you did that already... :)

[23:47] <swarley> Yeah, I'm pretty much stubbing the REPR right now

[23:47] <swarley> I'm just a little exhausted, exams coming up fast

[23:48] *** MikeFair joined
[23:48] *** Liz_ is now known as lizmat

[23:49] *** stopbit left
[23:50] *** Chillance left
[23:55] *** skids joined
