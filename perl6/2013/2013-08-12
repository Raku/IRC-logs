[00:02] *** woolfy left
[00:03] *** raiph left
[00:04] *** ggoebel joined
[00:04] *** lizmat left
[00:05] *** lizmat joined
[00:06] *** crab2313 joined
[00:16] *** stevan_ joined
[00:18] *** woolfy joined
[00:19] *** FROGGS joined
[00:28] *** li joined
[00:30] *** li left
[00:31] *** FROGGS left
[00:32] *** raiph joined
[00:39] *** benabik left
[00:40] *** FROGGS joined
[00:45] *** crab2313 left
[00:45] *** FROGGS left
[00:48] *** FROGGS joined
[00:49] *** mikemol joined
[00:52] *** stevan_ left
[01:01] *** aindilis left
[01:04] <[Coke]> f

[01:06] *** FROGGS left
[01:07] <dalek> perl6-roast-data: eb1ee6f | coke++ | / (4 files):

[01:07] <dalek> perl6-roast-data: today (automated commit)

[01:07] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/eb1ee6f692

[01:07] <dalek> perl6-roast-data: 8c6e5e7 | coke++ | / (4 files):

[01:07] <dalek> perl6-roast-data: today (automated commit)

[01:07] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/8c6e5e7e6d

[01:09] <[Coke]> 98.9 and falling.

[01:19] *** FROGGS joined
[01:19] *** dayangkun joined
[01:21] *** dayangkun left
[01:32] *** Mouq joined
[01:34] *** FROGGS left
[01:41] *** xinming left
[01:42] <diakopter> [Coke]: are you still able to make use of host06?

[01:43] *** xinming joined
[01:43] *** benabik joined
[01:53] <[Coke]> Using it every day for the rakudo.jvm run, yes

[01:53] <[Coke]> still haven't gotten pugs working.

[01:53] <[Coke]> so haven't done the cutover to run all the tests there.

[01:56] *** colomon joined
[01:57] <diakopter>   cool; how long does the rakudo.jvm run take btw

[01:58] *** raiph left
[01:59] *** grondilu joined
[02:08] *** benabik left
[02:10] *** FROGGS joined
[02:13] *** benabik joined
[02:18] <[Coke]> 80min

[02:18] <[Coke]> give or take

[02:19] <[Coke]> and that's -with- the server. :(

[02:19] <[Coke]> er, the eval-server

[02:20] *** tsmith left
[02:26] <diakopter> wat.

[02:33] *** flussence joined
[02:36] <sorear> sounds about right

[02:36] <sorear> diakopter: [Coke] is running tests on a single core, I think

[02:37] *** prevost joined
[02:43] *** prevost left
[02:44] <[Coke]> yes.

[02:47] <diakopter> sorear: oh

[02:47] <diakopter> [Coke]: oh

[02:59] *** FROGGS left
[03:00] <Mouq> Are trees in perl6 just (usually) Pairs?

[03:01] <Mouq> Are pears grow trees, and trees grow pears, ∴ trees are pairs

[03:01] <colomon> …. you could do it that way, I guess

[03:02] <Mouq> s/are//

[03:02] <Mouq> Yeah, I didn't really know if there was a better way to do it

[03:04] <colomon> I know trees  are mentioned several times in the specs, but I don't recall ever actually running into them in practice.

[03:05] <colomon> http://perlcabal.org/syn/S02.html#list%2C_flat%2C_item%2C_and_.tree

[03:05] *** FROGGS joined
[03:06] <colomon> I've got to say I don't understand the tree bits of that section at all.

[03:08] <Mouq> I'll look into Takadonet's Tree::Simple [https://github.com/Takadonet/Tree--Simple/]

[03:09] <Mouq> I think it .tree just turns Parcels of Parcels into LoLs?

[03:09] <Mouq> Yeah

[03:10] <Mouq> r: my $a = (4,5,(6,7)); say $a.tree.perl

[03:10] <camelia> rakudo 2566e7: OUTPUT«LoL.new(4, 5, $(6, 7))␤»

[03:10] <sorear> those trees are constructed from Lists, not pairs.

[03:11] *** wtw joined
[03:12] <Mouq> Yeah

[03:12] <Mouq> Honestly Pairs are dumb way to do it :L

[03:12] <Mouq> In general

[03:14] *** wtw_ left
[03:15] <Mouq> Maybe. Yeah, like I said, I still have to look at it. It's weird since Pairs can have anything as a 'key'

[03:22] <colomon> you can certainly build a binary tree structure with pairs.

[03:23] <colomon> dunno that anything in p6 would automatically know how to make sense of it, though.

[03:23] <colomon> whereas making it a LoL is at least something p6 has a notion of.

[03:34] *** FROGGS left
[03:39] *** fridim_ left
[03:40] *** crab2313 joined
[03:52] *** FROGGS joined
[04:01] <[Coke]> is there a magic class method that is called immediately post-new if I wish to do some setup? (BUILD is too early, it seems). should I just override new?

[04:04] <sorear> probably

[04:04] <sorear> I mean that's what I'd do

[04:05] <sorear> not to be confused with 'there probably is'

[04:09] <[Coke]> Roger.

[04:23] *** xenoterracide left
[04:28] <[Coke]> star: use Rakudo::Debugger;

[04:28] <camelia> star 2013.02: OUTPUT«===SORRY!===␤Could not find Rakudo::Debugger in any of: /home/p6eval/star/lib/parrot/4.10.0/languages/perl6/site/lib, /home/p6eval/star/lib/parrot/4.10.0/languages/perl6/vendor/lib, /home/p6eval/star/lib/parrot/4.10.0/languages/perl6/lib, /home/p6eval/.perl6/2013.02…

[04:28] *** FROGGS left
[04:28] *** FROGGS joined
[04:31] *** crab2313 left
[04:43] *** birdwindupbird joined
[04:55] *** FROGGS left
[04:58] *** logie joined
[05:07] <timotimo> o/

[05:09] *** FROGGS joined
[05:10] *** logie left
[05:11] <timotimo> [Coke]: are you sure you're still running the rakudo.jvm tests? it seems to me it really should have changed some of the numbers in the recent runs

[05:11] <timotimo> at least the amount of specd'd tests etc

[05:15] <timotimo> i just want to make sure those numbers are right. and if they aren't, which is my gut feeling, they shouldn't be used during the yapc that's currently happening

[05:23] *** Mouq left
[05:26] *** aindilis joined
[05:26] *** crab2313 joined
[05:27] *** mdn joined
[05:30] *** denisboyun joined
[05:32] *** FROGGS left
[05:36] <lizmat> timotimo: they're the counts of number of tests in the block

[05:37] <lizmat> what is #?DOES ?

[05:39] <timotimo> #?does is sometimes needed to tell the fudger how many tests to skip or mark todo

[05:41] *** mdn left
[05:41] *** mdn joined
[05:41] *** locsmif joined
[05:43] *** xenoterracide joined
[05:44] *** xinming left
[05:44] *** vovka joined
[05:45] *** FROGGS joined
[05:46] *** xinming joined
[06:00] *** mdn left
[06:00] *** denisboyun left
[06:01] <sorear> lizmat: if you have a test in a loop, the fudger needs to be told how many tests it's replacing so that the plan isn't invalidated

[06:03] *** vovka left
[06:05] *** FROGGS left
[06:08] *** dmol joined
[06:09] *** berekuk joined
[06:15] <moritz> there's another use for #?DOES

[06:15] <timotimo> good morning moritz :)

[06:15] <moritz> you can put it before a subroutine declaration

[06:15] <moritz> and then it tells the fudger how many tests that routine runs

[06:15] <moritz> good morning timotimo 

[06:15] <moritz> and good morning #perl6

[06:16] <moritz> going to the venue now&

[06:17] *** logie joined
[06:22] *** dayangkun joined
[06:23] *** logie left
[06:31] *** crab2313 left
[06:32] <moritz> at the venue, and online again :-)

[06:34] <timotimo> if you have an epiphany about how to get at the signature of the Block node i'm currently in at any time of the day, just drop me a line :P

[06:34] <moritz> sure

[06:38] *** dmol left
[06:38] *** berekuk left
[06:38] <timotimo> at first i was thinking i must be able to get the Code from the lexpad, but for little things that have no names, i most probably can't

[06:39] *** kaleem joined
[06:41] *** FROGGS[mobile] left
[06:42] *** woolfy left
[06:44] *** dayangkun left
[06:45] *** lizmat left
[06:45] <moritz>  

[06:46] *** FROGGS joined
[06:47] <FROGGS> o/

[06:47] <tadzik> hai

[06:48] <moritz> it's tadzik!

[06:48] <tadzik> it's moritz! and FROGGS!

[06:48] <tadzik> what a day

[06:48] <FROGGS> :o)

[06:48] * tadzik is warming up a place in Main Room

[06:49] <moritz> timotimo: I wonder if we should just mark lexicals coming from signatures in some way in the QAST tree

[06:50] <timotimo> it would be handy for my optimisation at least :)

[06:50] <moritz> decl<sigvar> or so

[06:50] <moritz> or maybe a totally new flag

[06:50] <moritz> I'll try to talk to jnthn later

[06:50] <timotimo> the nodes already have a hash interface for all kinds of annotations

[06:51] <timotimo> i use that for storing poison bits at the moment

[06:51] <moritz> that's not very nice in terms of memory usage, afaict

[06:53] *** BenGoldberg left
[06:53] <timotimo> our memory usage is already atrocious; this is just during the compilation phase, though. the QAST nodes are thrown away after compiling, are they not?

[06:54] <timotimo> i need to associate name-of-variable with bits anyway, so i probably won't get around a hash anyway

[06:55] <moritz> never mind for now

[06:56] *** Vico_Wu joined
[07:00] *** mdn joined
[07:03] *** ivanoff joined
[07:05] *** mdn left
[07:06] *** berekuk joined
[07:08] *** kaleem left
[07:08] *** kaleem joined
[07:10] <dalek> roast: 480b93c | ivanoff++ | S02-lexical-conventions/sub-block-parsing.t:

[07:10] <dalek> roast: movie sub/hash syntax

[07:10] <dalek> roast: review: https://github.com/perl6/roast/commit/480b93cb01

[07:10] <dalek> roast: 89021cf | ivanoff++ | S13-syntax/sub-hash.t:

[07:10] <dalek> roast: movie sub/hash syntax

[07:10] <dalek> roast: review: https://github.com/perl6/roast/commit/89021cf8e0

[07:11] *** ivanoff left
[07:25] *** sqirrel joined
[07:31] *** SamuraiJack joined
[07:33] *** leont joined
[07:41] *** leont left
[07:42] *** leont joined
[07:44] *** leont left
[07:47] *** berekuk left
[07:48] *** berekuk joined
[07:50] <FROGGS> .tell lizmat the Jugendherberge in frankfurt has no vacancies left ó.ò

[07:50] <yoleaux> FROGGS: I'll pass your message to lizmat.

[08:05] <timotimo> oh no

[08:05] <timotimo> way too many perlers coming to the workshop :(

[08:06] <FROGGS> ?

[08:06] <FROGGS> ahh, to the one in frankfurt you mean

[08:06] <timotimo> yes

[08:07] *** leont joined
[08:07] *** fhelmberger joined
[08:08] <timotimo> running all the benchmarks through my optimisation with verbosity cranked up to max, it seems like only one of the benchmarks so far actually got anything out of the optimisation; unless others use something in the setting that benefitted from it, which i don't know

[08:09] <moritz> r: sub f { say $CALLER::x }; my $x; f()

[08:09] <camelia> rakudo 2566e7: OUTPUT«Cannot access '$x' through CALLER, because it is not declared as dynamic␤  in method at_key at src/gen/CORE.setting:8754␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1855␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1843␤  in sub f at /tmp/Idr…

[08:10] <moritz> I wonder why/how I messed it up locally

[08:11] <timotimo> messed up how?

[08:12] <FROGGS> r: sub f { say CALLER::<$x> }; my $x; f()

[08:12] <camelia> rakudo 2566e7: OUTPUT«Cannot access '$x' through CALLER, because it is not declared as dynamic␤  in method at_key at src/gen/CORE.setting:8754␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1855␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1843␤  in sub f at /tmp/lQl…

[08:12] <timotimo> given that cancer is the uncontrolled multiplication of cells in ones body, "TimToady++" seems scarily appropriate ...

[08:12] <moritz> timotimo: doesn't die anymore

[08:13] <moritz> timotimo: I'm trying to make it a typed exception

[08:14] <timotimo> oh? i had thought i've already seen the typed exception get committed to rakudo's repository

[08:14] <timotimo> r: try { sub f { say CALLER::<$x> }; my $x; f() }; say $!.WHAT

[08:14] <camelia> rakudo 2566e7: OUTPUT«(X::Caller::NotDynamic)␤»

[08:14] <moritz> oh, I pushed that?

[08:14] <timotimo> yes :)

[08:14] <timotimo> and it seems to work, too

[08:15] <moritz> \o/

[08:15] <timotimo> now i'm wondering why i can't run rakudo-jvm for benchmarks any more ...

[08:15] *** berekuk left
[08:15] <timotimo> ah. it's because it exploded while compiling

[08:15] <timotimo> "bad type on operand stack", probably my optimisation exploding earlier for the jvm because of the bytecode verifier

[08:18] <timotimo> huh. sometimes faster, sometimes slower.

[08:18] <timotimo> http://t.h8.lv/p6bench/locals-optimisation.html

[08:19] <timotimo> well, since it's "wrong" anyway, better not pay too close attention to performance just yet. the benchmark doesn't verify that what it's doing is actually correct.

[08:20] *** leont left
[08:27] *** danaj joined
[08:31] *** berekuk joined
[08:35] *** SmokeMachine joined
[08:35] *** crab2313 joined
[08:45] *** SamuraiJack_ joined
[08:49] *** SamuraiJack left
[08:54] *** BigBear joined
[08:57] *** PuercoPop joined
[08:58] *** berekuk left
[09:00] *** ssutch left
[09:08] *** leont joined
[09:12] *** berekuk joined
[09:17] <FROGGS> $ perl6 -e 'use QAST:from<NQP>; say QAST::WVal.HOW.name(QAST::WVal)'

[09:17] <FROGGS> QAST::WVal

[09:17] <FROGGS> \o/

[09:17] *** grondilu left
[09:17] <FROGGS> jnthn: ping

[09:18] *** grondilu joined
[09:19] <tadzik> woot

[09:21] *** cognominal left
[09:21] *** cognominal joined
[09:22] *** berekuk left
[09:22] *** leont left
[09:23] *** leont joined
[09:23] <jnthn> yays, I got on the wifi...

[09:23] <jnthn> FROGGS: pong

[09:23] *** lizmat joined
[09:23] *** dmol joined
[09:24] <FROGGS> jnthn: I can now load modules :from<NQP>, but this required updating stage0 for vm/parrot...

[09:24] <jnthn> FROGGS: Oh?

[09:24] <jnthn> FROGGS: OK, that is sometimes needed

[09:24] <jnthn> Can I see the patch?

[09:24] <FROGGS> jnthn: I'm going to push this to a branch, but vm/jvm needs an updated stage0 too I guess

[09:24] <FROGGS> jnthn: I just push to a branch, okay?

[09:25] *** denis_boyun joined
[09:26] <jnthn> ok

[09:26] <jnthn> will review

[09:26] *** nugged joined
[09:26] <masak> o/

[09:26] <jnthn> o/ masak

[09:26] <jnthn> which talk are you in? :)

[09:26] <FROGGS> awesome!

[09:26] <FROGGS> hi masak 

[09:26] *** cosimo joined
[09:26] <moritz> jnthn: masak and me are in the redis takl

[09:26] <dalek> nqp/from_nqp: ab98aad | (Tobias Leich)++ | src/ (12 files):

[09:26] <dalek> nqp/from_nqp: give load_module the same signature as rakudo's

[09:26] <dalek> nqp/from_nqp: 

[09:26] <dalek> nqp/from_nqp: This makes it pluggable, so we will be able to use modules :from<NQP>

[09:26] <dalek> nqp/from_nqp: review: https://github.com/perl6/nqp/commit/ab98aad041

[09:27] <jnthn> moritz: same!

[09:27] <jnthn> masak: I dare you to ask at question time at the end, "Is it web scale?" :D

[09:28] <masak> jnthn: :P

[09:28] <masak> jnthn: you do it :P

[09:29] <nwc10> masak: you are on the same row. Look left

[09:29] <dalek> rakudo/from_nqp: f63899e | (Tobias Leich)++ | src/Perl6/ (2 files):

[09:29] <dalek> rakudo/from_nqp: wire NQP's ModuleLoader to use ...:from<NQP>

[09:29] <dalek> rakudo/from_nqp: review: https://github.com/rakudo/rakudo/commit/f63899e31d

[09:30] <masak> nwc10: yes, I know.

[09:30] <masak> I spotted jnthn before the talk. we looked directly at each other, but I was assuming that jnthn didn't see me at that distance.

[09:31] <jnthn> I didn't see you :)

[09:31] <FROGGS> >.<

[09:32] <masak> how would you do a sorted set in Perl 6?

[09:33] <moritz> masak: with an RB tree?

[09:33] <lizmat> fwiw, I think a sorted list primitive is missing from the spec, or did I miss that?

[09:33] <yoleaux> 07:50Z <FROGGS> lizmat: the Jugendherberge in frankfurt has no vacancies left ó.ò

[09:33] <lizmat> sh*t

[09:33] <FROGGS> jnthn: btw, since I'm now able to use QAST, does it makes sense to expose this as AST (or rename it?)

[09:33] <jnthn> No

[09:34] <FROGGS> NO! :P

[09:34] <jnthn> QAST isn't a Perl 6 standard thing, far from. We should require an explicit use of it.

[09:34] <FROGGS> jnthn: don't we need it for slangs?

[09:35] * jnthn waves hands

[09:35] <FROGGS> hehe

[09:35] <jnthn> Anyway, no, for now we should not pull it in by default.

[09:35] <jnthn> But it's nice we can

[09:35] <jnthn> Is it just those two last patches?

[09:35] <FROGGS> true

[09:35] <arnsholt> I think macros and slangs are going to need a standardised AST API of some kind

[09:36] <arnsholt> Basing that off QAST may or may not be a good idea =)

[09:36] <FROGGS> jnthn: yes, but nqp@jvm might be broken within these branches as I mentioned

[09:36] <jnthn> wait, what...

[09:37] <jnthn> What's that FLATTENABLE_HASH call doing in the NQP module loader...that's a Perl 6 specific thing...

[09:37] <FROGGS> arnsholt: the good thing would be that we dont have not Yet Anotehr Translation Layer(tm), the bad thing is that we break code when changing QAST

[09:37] *** dmol left
[09:37] <FROGGS> arnsholt: btw, do you have time to look at my zavolaj pull request?

[09:38] *** dmol joined
[09:38] <arnsholt> Oh, right. That thing

[09:38] <FROGGS> jnthn: ohh, then this might need to happen in Perl6::ModuleLoader

[09:38] <arnsholt> It looks mergeable, but I'm not sure if Inline::C should be using APIs that internal

[09:38] <FROGGS> jnthn: otherwise is exploded because it can't iterate over a Stash ($*GLOBALish from Perl6)

[09:38] <jnthn> ah...

[09:38] <FROGGS> arnsholt: well, I can duplicate the code, but I wanted to avoid that for Inline::C

[09:39] <jnthn> I'd rather we do that unpacking in Perl 6 module loader before passing it along, though.

[09:39] <arnsholt> Yeah, but I think we might want to expose different internals =)

[09:39] <FROGGS> jnthn: alright

[09:39] <arnsholt> Like role Native

[09:39] <FROGGS> arnsholt: ahh, okay...

[09:39] <FROGGS> arnsholt: I must dig into this this evening, my HEAD is somewhere else atm :o)

[09:40] <arnsholt> 's ok

[09:40] <arnsholt> If that approach doesn't work out, we can expose the other stuff

[09:40] <arnsholt> But I think if we export role Native, your code won't have to do very much plumbing

[09:41] <FROGGS> that would be great

[09:42] *** nugged left
[09:42] *** lizmat left
[09:45] *** denis_boyun left
[09:45] *** patspam joined
[09:46] <dalek> roast: fe9f77c | moritz++ | S32-exceptions/misc.t:

[09:46] <dalek> roast: Test for X::Caller::NotDynamic

[09:46] <dalek> roast: review: https://github.com/perl6/roast/commit/fe9f77cb36

[09:47] *** berekuk joined
[09:47] <moritz> can anybody please test if that test passes for you?

[09:48] <moritz> if not, I neet to push a local commit; if yes, I can drop it

[09:50] *** leont left
[09:50] *** TimToady joined
[09:51] * moritz increases the rate limits for the irc logs, because we seem to be all NATted to the same IP

[09:51] <tadzik> hah

[09:52] <nwc10> TimToady has landed in a talk? Gloria is at far left of 3rd row in the main room

[09:54] <mathw> everyone having fun I hope?

[09:55] * moritz has

[09:55] *** patspam left
[09:56] *** patspam joined
[09:56] <tadzik> yeah, fun :)

[10:01] <mathw> :)

[10:01] * mathw deleted loads of code this morning, that makes him very happy

[10:01] <FROGGS> ?

[10:02] *** patspam left
[10:02] <FROGGS> mathw: finished a project?

[10:03] <mathw> removed a stupid feature that should never have been there in the first place

[10:04] *** patspam joined
[10:05] <FROGGS> ahh

[10:10] *** nugged joined
[10:14] *** nugged left
[10:14] *** nugged joined
[10:19] *** fridim_ joined
[10:23] *** leont joined
[10:24] <dalek> rakudo/nom: 9bbec9c | moritz++ | src/ (2 files):

[10:24] <dalek> rakudo/nom: typed exceptions for if()

[10:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9bbec9cb01

[10:24] <dalek> roast: 52b7dda | moritz++ | S32-exceptions/misc.t:

[10:24] <dalek> roast: RT #73806: if() as function call should warn if it leads to a syntax error

[10:24] <dalek> roast: review: https://github.com/perl6/roast/commit/52b7dda0dc

[10:25] <jnthn> moritz: Is "IfAsFunction" maybe better as "KeywordAsFunction" if it can be for non-if things too?

[10:25] <jnthn> :)

[10:25] <moritz> oh yes

[10:27] *** nugged left
[10:27] <dalek> rakudo/nom: 2a26f1a | moritz++ | src/ (2 files):

[10:27] <dalek> rakudo/nom: Rename exception class, jnthn++

[10:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2a26f1ad1e

[10:28] <dalek> roast: 6b2c663 | moritz++ | S32-exceptions/misc.t:

[10:28] <dalek> roast: Track exception class rename

[10:28] <dalek> roast: review: https://github.com/perl6/roast/commit/6b2c663233

[10:28] <jnthn> moritz++

[10:31] <moritz> anyway, typed exceptions are great for testing

[10:31] <jnthn> aye

[10:31] * jnthn should track down the leftover typed exception test failures on jvm at some point :)

[10:32] <moritz> what I'd really like is to have the NoSuchMethod error actually contain the invocant

[10:33] <jnthn> Hm

[10:33] <moritz> parrot only gives us the name of the class

[10:33] <moritz> which is LLTA, actually :-)

[10:33] <jnthn> I can probably work out how to do that on the JVM :)

[10:33] <moritz> well yes, the code has the invocant right there when it throws the exception

[10:33] <jnthn> aye

[10:33] <moritz> or it least it did when I last looked at it

[10:34] * jnthn ponders how to convey it

[10:35] <FROGGS> jnthn: and I thought it would be easy :o( https://gist.github.com/FROGGS/7373412a4e57f42af5fa

[10:36] *** dmol left
[10:36] *** dmol joined
[10:37] *** berekuk left
[10:37] <jnthn> FROGGS: hmm..

[10:40] <FROGGS> exactly

[10:40] <FROGGS> I'm going to put things in my stomach now... bbiab

[10:41] *** dmol left
[10:42] *** leont left
[11:11] *** fridim_ left
[11:11] *** berekuk joined
[11:16] *** dmol joined
[11:18] *** berekuk left
[11:19] *** berekuk joined
[11:22] *** denis_boyun joined
[11:22] <denis_boyun> moritz: Hi moritz. Can you ever work with nqp?

[11:28] <moritz> denis_boyun: yes

[11:28] *** berekuk left
[11:28] <denis_boyun> moritz: can you help. Do you know how to run a shell command with nqp? Is it possible?

[11:29] <denis_boyun> moritz: such like system or `` on perl5

[11:30] *** berekuk joined
[11:30] *** lizmat joined
[11:30] <moritz> denis_boyun: look at rakudo's src/core/control.pm, sub run

[11:31] <masak> Just Another Perl Heckler

[11:31] <moritz> denis_boyun: it uses pir::spawnw__IP($RPA), but that only works on parrot

[11:31] <moritz> masak: ... & Koch

[11:31] <FROGGS> denis_boyun: I guess you are interested in parrot specific code?

[11:33] <masak> moritz: that some German brand that I don't know about? :)

[11:33] <denis_boyun> FROGGS: yeap, at this year i'm working on gsoc with parrot foundation. It's needing for my project

[11:33] * masak accidentally googles "Heckler and Kock"

[11:33] <masak> oh, defense manufacturing.

[11:34] <FROGGS> denis_boyun: yeah, I've seen you in #parrot

[11:34] *** [Sno] joined
[11:34] <denis_boyun> moritz: thanks a lot

[11:35] <moritz> denis_boyun: and you can build an RPA in NQP just with []

[11:35] <FROGGS> nqp: pir::spawnw__IP(["ls"])

[11:35] <camelia> nqp: OUTPUT«bin␤boot␤dalek␤dalek-queue␤docs␤evalbot␤evalbot.log␤examples␤FETCH_URL␤foo␤harmless_testfile.txt␤js␤lib␤LICENSE␤log␤main.pl␤Makefile␤niecza␤nom␤nom-inst␤nom-inst1␤nom-inst2␤nqp-jvm␤obj␤p␤p1␤p2␤p5test␤perf␤perl5␤Pugs.hs␤rakudo␤rakudo-star-2012.02.tar.gz␤README.pod␤run␤simple-…

[11:35] <moritz> nqp: pir::spawnw__IP(['echo', 'hellow', 'world'])

[11:35] <camelia> nqp: OUTPUT«hellow world␤»

[11:36] * moritz too slow on that unusable keyboard

[11:36] <moritz> FROGGS++

[11:36] *** lizmat left
[11:36] <FROGGS> I'm sitting on a comfortable keyboard at $work.... :o(

[11:37] <FROGGS> well, in front of* actually

[11:37] *** berekuk left
[11:37] <nwc10> has anyone run the range code on riba's t-shirt yet?

[11:38] *** berekuk joined
[11:38] <FROGGS> denis_boyun: and you can pull out pure pir by running: nqp --target=pir -e 'pir::spawnw__IP(["ls"])'

[11:39] <FROGGS> search for "spawnw" and you find the four lines you need

[11:39] <masak> nwc10: what range code is that?

[11:40] *** lizmat joined
[11:40] *** lizmat left
[11:40] <nwc10> I don't have enough unicode in this terminal (etc) and it's screen

[11:40] <nwc10> camel .. camel onion

[11:40] <nwc10> gmmm, the onion isn't in Unicode

[11:40] <nwc10> it cheats!

[11:40] *** denis_boyun left
[11:42] <moritz> .u onion

[11:42] <yoleaux> No characters found

[11:42] <moritz> indeed :/

[11:43] *** denis_boyun joined
[11:43] <BabsSeed> What's the best way to get involved in compiler development? I'd like to learn and get involved.

[11:43] *** nugged joined
[11:43] <masak> rn: .say for '☃' .. '☄'

[11:43] <masak> BabsSeed: where do you live?

[11:43] <camelia> rakudo 2a26f1: OUTPUT«☃␤☄␤»

[11:43] <camelia> ..niecza v24-88-g1f87209: OUTPUT«(timeout)☃␤WTF␤WTG␤WTH␤WTI␤WTJ␤WTK␤WTL␤WTM␤WTN␤WTO␤WTP␤WTQ␤WTR␤WTS␤WTT␤WTU␤WTV␤WTW␤WTX␤WTY␤WTZ␤WUA␤WUB␤WUC␤WUD␤WUE␤WUF␤WUG␤WUH␤WUI␤WUJ␤WUK␤WUL␤WUM␤WUN␤WUO␤WUP␤WUQ␤WUR␤WUS␤WUT␤WUU␤WUV␤WUW␤WUX␤WUY␤WUZ␤WVA␤WVB␤WVC␤WVD␤WVE␤WVF␤WVG␤WVH␤WVI␤WVJ␤WVK␤WVL␤WVM␤WVN␤W…

[11:44] <BabsSeed> masak: Southern Europe

[11:44] <FROGGS> BabsSeed: maybe start reading here, and then choose a project you would like to contribute? http://www.josetteorama.com/all-about-perl-6-interview-of-jonathan-worthington-part-1-of-3/

[11:44] <masak> BabsSeed: it's funny you should ask tight now.

[11:44] <masak> BabsSeed: there's a workshop being planned in September in Frankfurt.

[11:44] <BabsSeed> masak: Oh, Frankfurt isn't far at all

[11:45] <FROGGS> BabsSeed: where exactly is "Southern Europe"?

[11:45] * masak .oO( Niecza goes "what the fuck?", "what the... Godwin?", "what the hell?"... )

[11:45] *** berekuk left
[11:46] <BabsSeed> FROGGS: I'm averse to saying too much in a probably logged public channel :P

[11:46] <FROGGS> *g*

[11:46] <FROGGS> it is logged, yes

[11:47] <FROGGS> btw, many devs here are from europe

[11:47] * TimToady always says too much, except when he doesn't...

[11:47] *** berekuk joined
[11:47] <FROGGS> hehe

[11:47] <BabsSeed> FROGGS: I'm from England, but I live in southern Europe :P

[11:47] <FROGGS> statement_mod:<TimToady>

[11:48] <FROGGS> ahh, jnthn used to flee from England too

[11:48] <BabsSeed> Flee those taxes :D

[11:49] <tadzik> haha

[11:49] <moritz> I guess jnthn's problem with England was that "England" doesn't start with "S"

[11:49] <tadzik> isn't taxes somehow related to "you get what you pay for"? :P

[11:49] <BabsSeed> tadzik: I didnt get what I paid for :P

[11:49] <tadzik> heh

[11:49] <TimToady> has he got to Switzerland yet?

[11:50] <BabsSeed> Without delving too much into detail, I paid a fair punch of social security 2005-2008 then got hit by the recession and had no real safety net

[11:51] *** colomon_ joined
[11:51] <BabsSeed> So, yeah I wouldn't mind if I got what I paid for :D But unfortunately other people got what I paid for.

[11:53] *** colomon left
[11:53] *** colomon_ is now known as colomon

[11:55] *** denis_boyun left
[11:58] *** nugged left
[11:59] *** leont joined
[11:59] <BabsSeed> What areas are most desired for contribution? I'm very comfortable in C

[11:59] *** denisboyun joined
[11:59] <TimToady> you'd probably be more comfortable working on MoarVM than on JVM, I imagine

[11:59] <tadzik> you may want to look into MoarVM

[12:00] <nwc10> you might be more answers once jnthn finishes this talk: http://act.yapc.eu/ye2013/talk/4912

[12:00] *** nugged joined
[12:00] <TimToady> there's a #moarvm irc channel

[12:00] <TimToady> but we're all kinda busy conferencing at the moment

[12:01] <BabsSeed> Thanks

[12:01] <TimToady> I think #moarvm is logged by the bot, if you want to backlog

[12:01] <nwc10> it is, http://irclog.perlgeek.de/moarvm/2013-08-12

[12:01] <BabsSeed> Will take a look, definitely want to get involved

[12:01] *** sqirrel left
[12:01] <TimToady> http://irclog.perlgeek.de/moarvm/2013-08-12 for today's log

[12:03] *** nugged left
[12:04] <BabsSeed> I need to get a github, have been meaning to for ages

[12:04] <[Coke]> timotimo: I'm fairly certain I'm updating it properly yes (it involves scp'ing the output file back to feather and rerunning the bit that generates the CSV file, but yah. I'll double check today.

[12:04] *** nugged joined
[12:05] <BabsSeed> [Coke]: Someone said you've implemented a Twitter bot in p6, did you make a Twitter module for that?

[12:05] <BabsSeed> I'm considering writing a Twitter module but don't want to reinvent the wheel

[12:10] *** lizmat joined
[12:10] *** lizmat left
[12:11] <[Coke]> BabsSeed: http://feather.perl6.nl/~coke/cj.pl

[12:11] <[Coke]> no module, it was pretty simplistic.

[12:13] <[Coke]> issues: that used to take forever to startup the connection to IRC, and MuEvent predates actual threads; there is probably a better solution these days in rakudo.jvm (but rakudo.jvm has no sockets yet)

[12:14] <dalek> Perlito: 261d4e2 | (Flavio S. Glock)++ | / (3 files):

[12:14] <dalek> Perlito: Perlito5 - grammar - subroutine predeclaration

[12:14] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/261d4e27e3

[12:16] <FROGGS> [Coke]: I think it has sockets in a development branch # tadzik++

[12:17] <nwc10> translucent is the new shiny

[12:19] *** denis_boyun joined
[12:19] *** denisboyun left
[12:19] <JimmyZ> I see mortiy‎ and moritz there...

[12:20] <tadzik> [Coke]: actually, I was planning to port MuEvent to rakud-jvm on the hackathon yesterday

[12:20] <tadzik> but then I noticed the lack of sockets, so I started that first :)

[12:20] *** leont left
[12:20] <tadzik> and of course Java makes it bizzare

[12:20] * FROGGS .oO( and then you noticed the lack of $a, and started that frist )

[12:21] <tadzik> because you can't have juts a Socket. You also have a SocketServer, and SocketImple, which is not useful for anything, really

[12:21] <tadzik> and then InetAddress, and 5 subclasses of it

[12:21] <tadzik> </rant>

[12:22] <dalek> Perlito: d6ada0a | (Flavio S. Glock)++ | src5/lib/Perlito5/Grammar/Map.pm:

[12:22] <dalek> Perlito: Perlito5 - grammar - TODO cleanup

[12:22] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/d6ada0aeb8

[12:22] *** nugged left
[12:23] <moritz> JimmyZ: we also have Ulti and Util :-)

[12:23] <mathw> tadzik: Java's choices in the class library are one of the reasons why I never liked it much

[12:24] <tadzik> the way Java treats sockets is a lot different that what we're used to

[12:24] <moritz> tadzik: as long as there is no InetAddressFactory :-)

[12:24] <tadzik> moritz: there is SocketFactory, don't worry

[12:24] *** dakkar joined
[12:25] <moritz> tadzik: oh great!

[12:25] <mathw> I think the only reason Java doesn't have StringFactory is because they cheated and built functionality into String that's unachievable in a user-defined class to make it efficient

[12:26] <mathw> (still bitter about how String gets an overridden infix:<+>)

[12:26] *** denis_boyun left
[12:26] <JimmyZ> moritz: yeah, I saw too :P

[12:27] *** berekuk left
[12:27] *** nugged joined
[12:30] *** [Sno] left
[12:34] *** kbaker joined
[12:36] <BabsSeed> [Coke]: Thanks

[12:38] <BabsSeed> [Coke]: Oh OK, I'm looking to implement the full oauth/streaming API

[12:38] <BabsSeed> For use with clients/bots for Twitter

[12:39] *** nine_ joined
[12:45] <JimmyZ> nine_: wb

[12:46] *** crab2313 left
[12:53] *** BenGoldberg joined
[12:53] *** fhelmberger left
[12:54] *** dakkar left
[12:57] <tadzik> apparently, I'm Bad Luck Brian ;) http://imgur.com/ufHyjzi

[13:00] <moritz> tadzik: :-)

[13:01] *** leont joined
[13:04] <FROGGS> *g*

[13:06] <nugged> tadzik: non-LOL like in python channel :)

[13:07] <tadzik> haha

[13:07] <tadzik> This is #perl6, I can say what I want: LOL

[13:07] <FROGGS> *lol*

[13:07] <tadzik> FROGGS: watch your mouth!

[13:07] <FROGGS> SCHMETTERLING!

[13:07] <tadzik> :D

[13:07] <FROGGS> ohh, okay ;o)

[13:07] <tadzik> I mean, lol

[13:08] <tadzik> compiling src/Perl6/ConstantFolder.nqp, all I saw is src/Perl6/CannonFodder.nqp

[13:10] <FROGGS> what would be CannonFodder in Perl 6 world?

[13:10] <moritz> do we even need the ConstantFolder.nqp thingy?

[13:10] <tadzik> let's rewrite it in Perl6

[13:10] <tadzik> the game, I mean

[13:10] <FROGGS> there is a game called cannon fodder?

[13:11] <moritz> iirc it's very limited, and these days we have the optimizer doing a much better job

[13:11] <tadzik> sure

[13:13] <tadzik> aww, yiss

[13:14] <dalek> nqp/jvm-sockets: 66ee630 | tadzik++ | src/vm/jvm/ (3 files):

[13:14] <dalek> nqp/jvm-sockets: Add opcodes for bind, listen, accept

[13:14] <dalek> nqp/jvm-sockets: review: https://github.com/perl6/nqp/commit/66ee630378

[13:15] *** nugged left
[13:15] *** dmol left
[13:19] *** nugged joined
[13:20] *** dmol joined
[13:23] <TimToady> finally got on again; room 2 is kind of dead...

[13:23] <masak> o/

[13:24] <GlitchMr> grep(&is-prime, 1..*)[25000] is slow compared to alternatives in C++ and JavaScript - http://v8-io12.appspot.com/#16

[13:24] <GlitchMr> But it's way shorter, so perhaps there is nothing wrong with that.

[13:24] *** dmol left
[13:25] <PerlJam> GlitchMr: When do you need the first 25,000 primes quickly?

[13:25] <PerlJam> :-)

[13:25] <GlitchMr> For benchmarks.

[13:25] <GlitchMr> I gave up after waiting for two minutes.

[13:26] <masak> GlitchMr: you can probably speed it up by writing it without ranges and grep and the call to &is-prime.

[13:26] *** dmol joined
[13:26] <TimToady> say grep(&is-prime, 2,3,5,7 ... *)[^20]

[13:26] <TimToady> nr: say grep(&is-prime, 2,3,5,7 ... *)[^20]

[13:26] <camelia> niecza v24-88-g1f87209: OUTPUT«(Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any)␤»

[13:26] <camelia> ..rakudo 2a26f1: OUTPUT«␤»

[13:26] <TimToady> nr: say grep(&is-prime, 2,(3,5,7 ... *))[^20]

[13:26] <masak> heh.

[13:26] <camelia> rakudo 2a26f1, niecza v24-88-g1f87209: OUTPUT«2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71␤»

[13:27] <TimToady> nr: say grep(&is-prime, 2,(3,5,7 ... *))[1000]

[13:27] <camelia> rakudo 2a26f1, niecza v24-88-g1f87209: OUTPUT«7927␤»

[13:27] <TimToady> nr: say grep(&is-prime, 2,(3,5,7 ... *))[10000]

[13:28] * FROGGS .oO( say grep(&is-prime, 2,(3,5,7 .. *))[^20] # excluding Inf )

[13:28] <camelia> rakudo 2a26f1, niecza v24-88-g1f87209: OUTPUT«(timeout)»

[13:28] <jnthn> yay, survived my talk :)

[13:28] <moritz> and very well at that :-)

[13:28] <TimToady> did you mean ...^ ?

[13:29] <TimToady> using .. will only count by 1's again

[13:29] <FROGGS> TimToady: yeah, looks like :/

[13:30] <TimToady> I suspect 3,5,7...* will already exclude Inf somehow :)

[13:30] <FROGGS> yeah, it was supposed to be a joke

[13:30] <TimToady> though it might take it a while to do so :)

[13:30] *** lizmat joined
[13:30] *** ajr joined
[13:31] <FROGGS> nr: say Inf.is-prime

[13:31] <camelia> rakudo 2a26f1: OUTPUT«No such method 'is-prime' for invocant of type 'Num'␤  in block  at /tmp/eLhUkXMquP:1␤␤»

[13:31] <camelia> ..niecza v24-88-g1f87209: OUTPUT«Unhandled exception: Unable to resolve method is-prime in type Num␤  at /tmp/1zYPK7CGgC line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4579 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4580 (module-CORE @ 576) ␤  at /ho…

[13:31] *** berekuk joined
[13:31] *** ajr is now known as Guest95365

[13:31] <moritz> I hate that "Unable to resolve method" error message

[13:31] <moritz> *WHY* is it not able to resolve the method?

[13:31] *** Guest95365 is now known as ajr_

[13:31] <FROGGS> No such method...

[13:31] <FROGGS> is way better

[13:33] <FROGGS> I like to quote M$ here: "Unexpected exception..." - Ohh, so it wasn't expected to fail? How exceptional -.-

[13:34] <TimToady> it would be nice to list all the classes that have that method name, at least if there aren't too many

[13:34] <TimToady> maybe figure out relate classes somehow

[13:34] <TimToady> related*

[13:34] *** kaare_ joined
[13:35] <FROGGS> ohh, that is nice

[13:35] <FROGGS> that saves me to grep for a method name from time to time

[13:35] *** notjack joined
[13:35] *** nugged_ joined
[13:36] <moritz> well, it's not easy to compile a list of classes that have a certain method without leaking anonymous classes

[13:37] *** nugged left
[13:38] <lizmat> wouldn't that just be a matter of adding an attribute in a metaclass indicating whether it should be included in such a list ?

[13:39] <jnthn> Potentially

[13:39] <PerlJam> Perhaps that it's anonymous already accomplishes this.

[13:39] <jnthn> Just need to be careful not to make stuff never-collectable

[13:40] *** berekuk left
[13:41] *** dmol left
[13:42] *** mdn joined
[13:44] <BenGoldberg> Maybe it could be done as a debugging option, turned on by an environment variable?  If it's not done by default, it might not matter if it makes some classes not-garbage-collectible

[13:45] *** nugged_ left
[13:46] *** rindolf joined
[13:47] *** mdn left
[13:50] *** PuercoPop left
[13:52] <pmichaud> good morning, #perl6

[13:52] <masak> pmichaud! \o/

[13:52] <PerlJam> pmichaud!  o/

[13:52] <pmichaud> just passing through for a bit

[13:53] * masak .oO( you can never pass through the same #perl6 twice )

[13:53] <PerlJam> pmichaud: Then I'll tell you Happy Birthday!  now in case I don't see you tomorrow  :-)

[13:53] <pmichaud> PerlJam: thanks :-)

[13:54] <FROGGS> pmichaud: \o/

[13:54] <lizmat> happy bday, pmichaud!

[13:54] <masak> haooy birthday minus one, pmichaud!

[13:54] <masak> happy*

[13:54] <pmichaud> I finally reached the big 3-0

[13:54] * FROGGS is going to wear a funny heat for his b-day

[13:55] <FROGGS> ?

[13:55] <FROGGS> is there something missing in the middle?

[13:55] <lizmat> I remember the big 3-0

[13:55] <pmichaud> no, at the beginning.

[13:55] <masak> happy 0x30, pmichaud :)

[13:55] <FROGGS> ahh

[13:55] <pmichaud> well, I haven't reached it yet........

[13:55] <FROGGS> I was thinking about that but I am too tired to calc

[13:56] <pmichaud> still have 15h04 to go here :)

[13:56] <masak> ♪ Hann á afmæli í dag, hann á afmæli í dag, hann á afmæli hann pmichaud, hann á afmæli í dag ♪

[13:56] <masak> (well, except it's not i dag...)

[13:56] <[Coke]> pmichaud: happy pre-birthday.

[13:56] <pmichaud> how goes yapc::eu, for those who are there?

[13:57] <masak> pmichaud: it's very interesting.

[13:57] <FROGGS> jnthn held his first talk...

[13:57] <FROGGS> masak: how are the ant-talks?

[13:57] <FROGGS> anti

[13:57] <lizmat> and TimToady held a very inspiring keynote  :-)

[13:57] <FROGGS> coll

[13:57] <FROGGS> cool*

[13:57] <masak> I almost feel a bit sorry for the p6-trolls. even if they were coherent (which they weren't) or didn't have talks which weren't as bad as their talk titles...

[13:58] <FROGGS> I wish I was there :/

[13:58] <masak> ...TimToady completely cut them off by saying in his keynote that what they're proposing isn't gonna fly.

[13:58] <PerlJam> Is YAPC::EU being recorded as well?

[13:58] <lizmat> I've seen cameras

[13:58] <masak> basically, "Perl 5 + Moose isn't Perl 7".

[13:58] <lizmat> not sure whether they we're one

[13:58] <lizmat> on

[14:00] <pmichaud> wow (keynote cutoff).  TimToady++

[14:00] <pmichaud> I'm glad to hear TimToady++ come out directly at the conference on the topic

[14:00] <masak> pmichaud: I wrote a prepared speech-let for the Wednesday morning discussion... but I don't feel as compelled to deliver it now.

[14:00] <masak> it's basically more of the same. Perl 6 is now at the point it's doing things Perl 5 doesn't and probably never will. talking about Perl 7 *now* is... silly, and self-defeating.

[14:00] *** pmurias joined
[14:00] <masak> but basically, all the proponents of that seem very out of touch.

[14:00] * [Coke] wonders what is up with the 2 separate "movie" commits.

[14:00] <notjack> what's the general consensus in this forum for Perl5's versioning issue?

[14:01] <masak> "movie" commits?

[14:01] <masak> notjack: oh hai.

[14:01] <notjack> hi masak 

[14:01] <masak> notjack: could you be more specific? what issue?

[14:01] <masak> (there are several) :)

[14:01] <notjack> the issue that is motivating people to try to name something "perl 7"

[14:01] <masak> right. what issue?

[14:01] <[Coke]> 480b93cb01 & 89021cf8e0

[14:01] <[Coke]> (roast)

[14:01] <notjack> in short, the cieling put in place by perl6, which ultimately turned out to be a completely different language than perl5

[14:02] <masak> notjack: "completely different language" is a bit excessive, I think.

[14:02] <notjack> I'm not trying to troll, in case it smells like that

[14:02] <masak> notjack: no, I know.

[14:02] <masak> and I'm trying to be precise in replying, after I know what the discussion is.

[14:02] <notjack> from my outsider perspective, it looks and feels completely different

[14:02] <FROGGS> well, Perl 6 is in a position to break backwards compat with Perl 5 code, that is all

[14:02] *** rindolf left
[14:03] <notjack> FROGGS: true, but then I could write a Perl5 interpreter in any new language I create

[14:03] <masak> notjack: I think one of the opinions here is that it's not *completely* different. it's still "Perlish".

[14:03] <masak> notjack: that said, Perl 5 and Perl 6 are on different paths, so to speak, and have been for many years.

[14:03] <FROGGS> notjack: what do you want a new perl 5 interpreter for?

[14:03] <masak> notjack: though there is work being done to bring them closer.

[14:04] <notjack> FROGGS: only to (arbitrarily) claim the "perl5 backwards compatible" badge

[14:04] <notjack> masak: what's  motivating that work? 

[14:08] *** bruges left
[14:09] <notjack> masak: IMO, I like Perl6's path, and don't see a reason to converge on perl5 (though I can see reasons for p5 to borrow ideas from 6)

[14:09] <masak> notjack: the view that combining existing code bases and Perl 6 would be useful and interesting.

[14:09] <masak> it would be a transition path, if nothing else.

[14:09] <notjack> hmm, I forgot about CPAN

[14:09] <masak> :)

[14:09] <notjack> yeah, I can see that as a huge reason to maintain compat and compatible paths

[14:09] <masak> FROGGS++ is helping us with another bit of that. you can write Perl 5 code inside a block in Perl 6.

[14:09] <notjack> what's the syntax?

[14:09] <notjack> {{{ use v5; blahh blah blah }}} ?

[14:09] <masak> one set of braces is enough :)

[14:09] <masak> but yes. that.

[14:09] <notjack> cool

[14:09] <FROGGS> no XS though, just to be clear

[14:09] <notjack> can you make me a {{{ use APL; iota rho etc }}}?

[14:09] <notjack> kthx

[14:09] <FROGGS> *g*

[14:09] *** mdn joined
[14:09] <FROGGS> slangs are possible, yes

[14:09] <masak> notjack: :D

[14:09] <masak> notjack: that's a goal, yes.

[14:09] <masak> one schtepp at a time.

[14:09] <notjack> heh

[14:09] <notjack> I've been writing a small script in v5 this week

[14:09] <masak> FROGGS: yes, "no XS" would be why we also want diakopter++'s grant.

[14:09] <notjack> I'd forgotten how quirky (though loveable) it is

[14:09] *** kst`` joined
[14:09] <masak> Perl 6 is less quirky and more lovable, IMO ;)

[14:09] <FROGGS> masak: I was about to typing that, yes

[14:09] <notjack> yeah, but everyone thinks that about their own weird-looking baby

[14:09] <notjack> :)

[14:09] *** bruges_ joined
[14:09] *** logie joined
[14:09] <masak> notjack: granted, but I hear many outsiders saying it, too.

[14:09] *** tsmith joined
[14:09] <masak> notjack: not all of them, mind. but many.

[14:09] *** bluescreen10 joined
[14:09] <FROGGS> just explain a perl n00b perl 5's changing sigils >.<

[14:10] <masak> FROGGS: I have, on occasion. delivering our Perl course.

[14:10] <FROGGS> yeah, my co-worker was on a 1-week perl course last week

[14:11] *** timotimo joined
[14:11] *** kst` left
[14:11] <pmichaud> I wonder if I can find TimToady's keynote somewhere...

[14:12] <FROGGS> so he knows a bit about scalars now :o)

[14:13] <lizmat> pmichaud: we'll let you know as soon as we know it

[14:14] <lizmat> but I don't expect it to be before the end of the conference, though

[14:14] <notjack> I'm not sure how I feel about making everything a metachar in a regex

[14:14] *** benabik left
[14:14] <pmichaud> lizmat: email me a link, please, because I don't know how often I can check in on #perl6

[14:14] <lizmat> will do

[14:14] <notjack> is there an equivalent to qq inside a regex?

[14:14] <notjack> or q I mean

[14:14] <arnsholt> Quotes

[14:14] <notjack> legit?

[14:14] <arnsholt> Simple as that =)

[14:15] <notjack> as in /'hi, I am not a metachar'/?

[14:15] <arnsholt> And making all the non-alnums metacharacters cuts down all the memorisation of what's what

[14:15] *** berekuk joined
[14:16] <notjack> that's fair

[14:16] <BenGoldberg> notjack: In perl5 regexes, it is of course /\Qhi, I am not a metachar\E/

[14:17] <notjack> BenGoldberg: yeah, but that was rarely neccesary

[14:17] <tadzik> heh, ported IO::Socket::INET to jvm sockets. Server dies with java.lang.NullPointerException, client with java.lang.IndexOutOfBoundsException

[14:17] <tadzik> progress! :)

[14:18] <tadzik> that means they connect to each other, since they die at the same time :)

[14:18] *** berekuk left
[14:20] <FROGGS> tadzik: yay! :o)

[14:20] *** denisboyun joined
[14:22] *** mdn left
[14:23] <[Coke]> tadzik++

[14:23] <[Coke]> tadzik: gentle reminder, you have a failing Star module.

[14:24] <tadzik> [Coke]: oh! MEvent?

[14:25] <[Coke]> tadzik: https://github.com/coke/rakudo-star-daily/blob/master/log/test-modules.log#L216

[14:25] <[Coke]> If I counted right, that's: https://github.com/tadzik/perl6-File-Tools/blob/master/t/02-shell-command.t#L26

[14:26] <tadzik> [Coke]: oh,m I think I fixed that yesterday

[14:26] <tadzik> oh, no I didn't

[14:26] <[Coke]> failed in the latest daily star run. (about 2pm eastern)

[14:26] <tadzik> I should just remove File::Tools, it's now splitted between File::Find and Shell::Command

[14:26] <tadzik> I fixed File::Find, but not File::Tools

[14:26] <tadzik> I'll remove it from the ecosystem

[14:27] <[Coke]> urk. ok. be sure to (have someone) update star to include the new modules instead of the old ones? (and maybe add a changelog to that effect?)

[14:27] <tadzik> oh!

[14:27] <tadzik> I will do that

[14:27] <masak> tadzik++

[14:27] *** dmol joined
[14:29] <dalek> ecosystem: b8b90c7 | tadzik++ | META.list:

[14:29] <dalek> ecosystem: Remove File::Tools

[14:29] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/b8b90c75c4

[14:30] <[Coke]> tadzik++

[14:31] <dalek> rakudo-js: 2d2fef3 | (Pawel Murias)++ | run_tests:

[14:31] <dalek> rakudo-js: Add test 46 to run_tests (which passes if icu is installed).

[14:31] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/2d2fef3420

[14:31] <dalek> rakudo-js: e1face9 | (Pawel Murias)++ | src/QAST/Compiler/JavaScript.nqp:

[14:31] <dalek> rakudo-js: Implement the eos anchor.

[14:31] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/e1face9fa3

[14:31] <dalek> rakudo-js: 9605581 | (Pawel Murias)++ | src/QAST/Compiler/JavaScript.nqp:

[14:31] <dalek> rakudo-js: Emit an extra newline for better code readablity.

[14:31] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/96055817fd

[14:31] <dalek> rakudo-js: 8056f61 | (Pawel Murias)++ | / (2 files):

[14:31] <dalek> rakudo-js: Refactor run_tests so that it's more visible which tests are missing.

[14:31] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/8056f61a74

[14:31] <dalek> rakudo-js: 8f90bad | (Pawel Murias)++ | / (2 files):

[14:31] <dalek> rakudo-js: Update the setting, subst now works, pass test 62

[14:31] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/8f90bad804

[14:32] <pmurias> 4 tests from nqp/t/nqp are missing

[14:32] *** crab2313 joined
[14:32] <[Coke]> pmurias++

[14:32] <tadzik> oh shit no

[14:32] <tadzik> raukdostar uses submodules

[14:32] <tadzik> I ned help then :|

[14:33] *** lizmat left
[14:33] <pmurias> [Coke]: actually it's 5 will be 4 very soon ;)

[14:34] *** lizmat joined
[14:35] <FROGGS> pmurias: and then I can run Perl 6 code in my browser?

[14:35] <[Coke]> so are you at cross-compile, nearly passing all tests?

[14:38] *** Psyche^_ joined
[14:41] *** Kiralexis joined
[14:42] *** Psyche^ left
[14:43] <pmurias> [Coke]: cross-compile, most of the tests in nqp/t/nqp, there also tests in nqp/t/serialization and nqp/t/qregex

[14:43] *** kaleem left
[14:44] <colomon> what's going on at YAPC::EU today?

[14:44] <nwc10> lightning talks

[14:44] *** leont left
[14:44] <nwc10> right now ribasushi is telling us about what's new in DBIx::Class

[14:44] <nwc10> everyone is hiring in Ukraine, it seems

[14:45] <nwc10> leont and I have jnthn surrounded and are going to kidnap him and force him to work on Perl 5

[14:45] <nwc10> :-)

[14:45] <nwc10> oh, wait, he'll commit things to make it slower. D'oh!

[14:46] <lizmat> .oO(all part of a cunning plan to recruit leont and nwc10)

[14:47] *** crab2313 left
[14:50] *** telex left
[14:51] *** lizmat left
[14:52] *** telex joined
[14:59] *** kaleem joined
[15:01] *** kaleem left
[15:01] *** kaleem joined
[15:04] *** colomon left
[15:04] <nwc10> lizmat: Perl 6 is hiring? :-)

[15:06] <moritz> sure. Our pay is competitive with most other open source projects!

[15:06] <FROGGS> *g*

[15:07] * [Coke] started working on a kenken solver last night, after being stuck for hours on a particularly difficult kenken.

[15:07] * [Coke] sees that there is already a python one that has been translated to JS, and wonders if this sort of constraint based thing would be fun/easy/nifty/whatever

[15:08] *** btyler joined
[15:15] *** colomon joined
[15:16] *** leont joined
[15:18] *** _jaldhar joined
[15:21] <timotimo> [Coke]: it's just so weird to me that all numbers from the jvm test run havae stayed the same when really there were changes to the test suite that added/untodo'd/... tests

[15:24] <mathw> [Coke]: Last time I tried a constraint-based thing it was not fun or nifty or easy at all :(

[15:25] *** denisboyun left
[15:26] <TimToady> it's one of those things that we're speccing to be easy to implement...someday...

[15:26] <TimToady> andthen and orelse are part of that, which together with lazy lists should allow implementation of a normal backtracker

[15:26] <TimToady> in fact, that's basically how STD works inside

[15:27] *** birdwindupbird left
[15:27] <PerlJam> 6/win 15

[15:27] *** FROGGS left
[15:28] *** dmol left
[15:28] *** ajr_ left
[15:28] <[Coke]> timotimo: untodoing it doesn't mean it passes on .jvm

[15:29] *** leont left
[15:29] <[Coke]> plus someone broke several dozen tests - it's possible your passes are hidden behind that.

[15:29] *** ajr joined
[15:29] <dalek> nqp: 376098c | (Pawel Murias)++ | t/nqp/63-slurp.t:

[15:29] <dalek> nqp: Check if we actually slurp something with a correct length.

[15:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/376098c62a

[15:29] <pmurias> a good puzzle is how to write a test for slurps that checks if it slurps itself correctly ;)

[15:29] *** ajr is now known as Guest24616

[15:30] *** Guest24616 is now known as ajr_

[15:30] <timotimo> [Coke]: it wouldn't make them pass, it would make them fail, which i didn't see either (but i didn't actually go through with a calculator)

[15:31] <timotimo> it was suspicious to me that the rakudo.jvm-summary file had no change whatsoever

[15:32] <timotimo> but yeah, you're right. is_default blew up completely now

[15:35] *** kaleem left
[15:37] <timotimo> and substr for some reason

[15:37] <dalek> rakudo-js: 491ab5e | (Pawel Murias)++ | / (5 files):

[15:37] <dalek> rakudo-js: Implement the ops used by nqp::slurp.

[15:37] <dalek> rakudo-js: 

[15:37] <dalek> rakudo-js: Run tests inside the nqp directory so that relative paths inside of them work correctly.

[15:37] <dalek> rakudo-js: Pass test 63.

[15:37] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/491ab5e125

[15:37] <pmurias> [Coke]: 4 test left now ;)

[15:37] <pmurias> * tests

[15:37] *** kbaker left
[15:38] *** kbaker joined
[15:38] <[Coke]> pmurias: woooo

[15:38] * [Coke] is handed a box of cider apple croissant donuts

[15:44] <timotimo> wow that souds amazing

[15:45] <pmurias> jnthn: why do we call decont on self?

[15:45] <pmurias> jnthn: in nqp code

[15:52] <grondilu> Is today TimToady's keynote online yet?

[15:52] *** rindolf joined
[15:56] <colomon> What all has happened today?  p6y, I mean.

[16:02] *** Ayiko joined
[16:06] <timotimo> it kind of seems like fudging in the substr tests is b0rked

[16:08] <timotimo> fudge and run seems to fudge it for .rakudo and then runs the .t instead

[16:10] *** pmurias left
[16:10] <[Coke]> are you fudging for "rakudo" or "rakudo.jvm" ?

[16:10] <[Coke]> "rakudo" is no longer a valid thing to pass in, I think.

[16:10] <timotimo> i'm just running fudgeandrun, should i have to change that? i thought it figured out the implementation o nits own?

[16:11] <[Coke]> that -should- work, yes.

[16:11] <[Coke]> this on jvm?

[16:11] <timotimo> yes

[16:11] <[Coke]> what does your ./perl6 --version say ?

[16:11] <[Coke]> (that's what t/fudgeandrun is using)

[16:11] <timotimo> +S32-str/substr.rakudo.jvm aborted 63 test(s)

[16:11] <timotimo> looking at why this is b0rked

[16:12] <timotimo> if you fudgeandrun it correctly, you will indeed get only one failure

[16:12] <timotimo> This is perl6 version 2013.07-206-g2a26f1a built on JVM

[16:12] <[Coke]> that should fudge for rakudo.jvm, then.

[16:14] <[Coke]> ah, that file has no vm specific fudges. testing

[16:14] <timotimo> it does have rakudo.jvm in the imlp variable

[16:15] <[Coke]> https://gist.github.com/coke/6212404

[16:15] *** ajr_ left
[16:15] <timotimo> oh wait, yeah, that could still be it

[16:15] <timotimo> locally i get the "too many parameters" problem from very early on

[16:16] <[Coke]> my rakudo-jvm on this box is probably 2 days old.

[16:16] *** ajr joined
[16:17] *** ajr is now known as Guest79469

[16:17] <grondilu> cool, someone got rid of the _MVM in MoarVM.

[16:24] *** Guest79469 is now known as ajr_

[16:32] *** lizmat joined
[16:39] *** spider-mario joined
[16:42] <BenGoldberg> r: say grep(&is-prime, 2,(3,5..*))[1000]

[16:42] <camelia> rakudo 2a26f1: OUTPUT«7927␤»

[16:43] <BenGoldberg> r: .say for grep(&is-prime, 2,(3,5..*))[1000..*]

[16:43] <camelia> rakudo 2a26f1: OUTPUT«(timeout)»

[16:43] <colomon> 3,5..* is 3, 5, 6, 7, 8, 9 … etc

[16:43] <BenGoldberg> r: .say for grep(&is-prime, 2,(3,5...*))[100..*]

[16:43] <colomon> you probably want 3, 5… *  -- right

[16:44] <camelia> rakudo 2a26f1: OUTPUT«(timeout)»

[16:44] <BenGoldberg> r: .say for grep(&is-prime, 2,(3,5...*))

[16:44] <colomon> why are you asking for an infinite list of primes?

[16:44] <camelia> rakudo 2a26f1: OUTPUT«(timeout)»

[16:44] <BenGoldberg> r: .say for grep(True, 2,(3,5...*))

[16:45] <camelia> rakudo 2a26f1: OUTPUT«(timeout)»

[16:45] <colomon> or inifinitely many odd numbers?

[16:45] <BenGoldberg> r: .say for grep(True, ^Inf)

[16:45] <camelia> rakudo 2a26f1: OUTPUT«(timeout)»

[16:46] <BenGoldberg> r: .say for ^Inf

[16:46] <camelia> rakudo 2a26f1: OUTPUT«(timeout)0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤29␤30␤31␤32␤33␤34␤35␤36␤37␤38␤39␤40␤41␤42␤43␤44␤45␤46␤47␤48␤49␤50␤51␤52␤53␤54␤55␤56␤57␤58␤59␤60␤61␤62␤63␤64␤65␤66␤67␤68␤69␤70␤71␤72␤73␤74␤75␤76␤77␤78␤79␤80␤

[16:48] <BenGoldberg> r: my @p := grep(&is-prime, 2,(3,5...*))[^1000]; say @p[$_] for ^Inf

[16:48] <camelia> rakudo 2a26f1: OUTPUT«(timeout)»

[16:49] <colomon> that one may just be slow… at least, I don't see a reason for an infinite loop

[16:49] <BenGoldberg> r: my @p := grep(&is-prime, 2,(3,5...*))[1000..Inf]; say @p[$_] for 0,1

[16:49] <camelia> rakudo 2a26f1: OUTPUT«(timeout)»

[16:49] <BenGoldberg> r: my @p := grep(&is-prime, 2,(3,5...*))[100..Inf]; say @p[$_] for 0,1

[16:50] <camelia> rakudo 2a26f1: OUTPUT«(timeout)»

[16:50] <BenGoldberg> r: my @p := grep(&is-prime, 2,(3,5...*))[0..Inf]; say @p[$_] for 0,1

[16:50] <camelia> rakudo 2a26f1: OUTPUT«(timeout)»

[16:50] <BenGoldberg> r: my @p := grep(&is-prime, 2,(3,5...*))[0..Inf];

[16:50] <camelia> rakudo 2a26f1: OUTPUT«(timeout)»

[16:50] <BenGoldberg> r: my @p := grep(&is-prime, 2,(3,5...*))[0...Inf];

[16:51] <camelia> rakudo 2a26f1: OUTPUT«(timeout)»

[16:51] <BenGoldberg> r: my @p := grep(&is-prime, 2,(3,5...*));

[16:51] <camelia> rakudo 2a26f1: OUTPUT«(timeout)»

[16:52] <colomon> n: my @p := grep(&is-prime, 2,(3,5...*));

[16:52] <camelia> niecza v24-88-g1f87209: OUTPUT«Potential difficulties:␤  @p is declared but not used at /tmp/KJ6eO8lJsj line 1:␤------> my ⏏@p := grep(&is-prime, 2,(3,5...*));␤␤»

[16:52] <colomon> n: my @p := grep(&is-prime, 2,(3,5...*)); say "Hi!"

[16:52] <camelia> niecza v24-88-g1f87209: OUTPUT«Potential difficulties:␤  @p is declared but not used at /tmp/YWHP_K1pCt line 1:␤------> my ⏏@p := grep(&is-prime, 2,(3,5...*)); say ␤␤Hi!␤»

[16:53] <BenGoldberg> rn: my @p := grep(True, ^Inf)

[16:53] <camelia> niecza v24-88-g1f87209: OUTPUT«Potential difficulties:␤  @p is declared but not used at /tmp/HVV1ayCSp2 line 1:␤------> my ⏏@p := grep(True, ^Inf)␤␤»

[16:53] <camelia> ..rakudo 2a26f1: OUTPUT«(timeout)»

[16:53] <BenGoldberg> rn: my @p; say 'hi'

[16:53] <camelia> niecza v24-88-g1f87209: OUTPUT«Potential difficulties:␤  @p is declared but not used at /tmp/yXj28nFt2b line 1:␤------> my ⏏@p; say 'hi'␤␤hi␤»

[16:53] <camelia> ..rakudo 2a26f1: OUTPUT«hi␤»

[16:54] <BenGoldberg> rn: my @p; @p := grep(True, [1])

[16:54] <camelia> rakudo 2a26f1, niecza v24-88-g1f87209:  ( no output )

[16:54] <BenGoldberg> rn: my @p; @p := grep(True, [^Inf])

[16:54] <camelia> niecza v24-88-g1f87209: OUTPUT«(timeout)»

[16:54] <camelia> ..rakudo 2a26f1:  ( no output )

[16:55] *** ssutch joined
[16:58] <moritz> n: [^Inf]; say "alive"

[16:58] <camelia> niecza v24-88-g1f87209: OUTPUT«(timeout)»

[17:00] *** vk___ left
[17:00] *** btyler left
[17:03] *** btyler joined
[17:12] *** ajr_ left
[17:13] *** crab2313 joined
[17:15] *** BigBear left
[17:17] *** benabik joined
[17:19] *** slava joined
[17:20] *** vovka667 joined
[17:23] *** fhelmberger joined
[17:25] *** MDn joined
[17:26] <dalek> Perlito: d435a99 | (Flavio S. Glock)++ | / (3 files):

[17:26] <dalek> Perlito: Perlito5 - grammar - more 'variable' rules

[17:26] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/d435a9910b

[17:28] *** MDn left
[17:29] *** fhelmberger left
[17:31] *** Mouq joined
[17:34] *** Vico_Wu1 joined
[17:35] *** nugged joined
[17:37] *** nugged_ joined
[17:37] *** nugged left
[17:37] *** crab2313 left
[17:38] *** Vico_Wu left
[17:39] *** ssutch left
[17:40] *** vovka667 left
[17:40] *** ssutch joined
[17:40] *** vovka667 joined
[17:41] *** crab2313 joined
[17:44] *** nugged_ left
[17:44] *** Rotwang joined
[17:44] *** ajr joined
[17:45] *** ajr is now known as Guest2529

[17:47] <notjack> has anyone done any work on a p6 plugin for Eclipse?

[17:47] <notjack> in particular, syntax higlighting

[17:48] *** ssutch left
[17:48] <notjack> padre seems like a dead project

[17:48] <[Coke]> no, but I'd be vaguely interested in that project. (I want to write a p6 plugin for eclipse for syntax highlighting for other languages (written in p6)

[17:48] *** Vico_Wu joined
[17:49] *** Vico_Wu1 left
[17:50] <notjack> take a p6 grammar and generate an Eclipse syntax-highlighting file, you mean?

[17:50] *** FROGGS joined
[17:51] <notjack> I guess you could do that for any editor or IDE (generate a correctly-formatted syntax higlighting file for that editor, given a p6 grammar)

[17:52] *** _jaldhar left
[17:54] *** dmol joined
[17:55] <moritz> well, if the syntax hilighting file for that IDE is Turing complete, yes

[17:59] *** crab2313 left
[17:59] *** berekuk joined
[17:59] <notjack> speaking of Turing completeness

[17:59] <notjack> in order to learn p6 better, I'd like to implement a little J parser in it

[18:00] <notjack> probably is, I know less about parsing than I do about p6, as a practical matter

[18:00] <notjack> problem is*

[18:00] <moritz> notjack: have you read the "Using Perl 6" ebook?

[18:00] <moritz> it has a chapter about p6 regexes, and one about grammars

[18:01] <notjack> I've grepped it, but not read it

[18:01] <notjack> p6 regexes I think I can get hold of pretty quick

[18:01] <moritz> grepping isn't enough for learning -)

[18:01] <notjack> grammars are harder ... because I don't understand grammars as a general topic

[18:01] *** denis_boyun joined
[18:01] <notjack> unless the book offers enough of an education on the topic as well?

[18:01] <timotimo> for your use case, grammars will be easier, though :P

[18:02] *** mdn joined
[18:02] <notjack> Let me ask: the J language has 9 production rules in its grammar, and a 4-token fixed lookahead (http://www.jsoftware.com/help/dictionary/dicte.htm)

[18:03] <notjack> in lines of p6 code ... my gut says it should take about a page of code

[18:03] <notjack> anyone think differently?

[18:03] <moritz> notjack: the book has a complete JSON parser as an example, and explains it

[18:03] <notjack> ooh

[18:03] *** Mouq left
[18:03] <notjack> "and explains it"++

[18:03] <PerlJam> moritz++

[18:03] <moritz> (sorry, I have to finish my slides for tomorrow before looking at the J grammar)

[18:04] <PerlJam> notjack: a "page" for just the parser?  sure.

[18:04] <PerlJam> notjack: add another for the semantics.

[18:04] <notjack> forget the semantics

[18:04] <notjack> that would take a lot of work

[18:04] <notjack> I mean just building an AST

[18:05] <moritz> that's explained for the JSON stuff too

[18:05] <notjack> J has ~120ish primitives and things like implicit composition, etc.

[18:05] <notjack> I can write that (SMOP), but I need a place to start, i.e. an AST

[18:10] *** _jaldhar joined
[18:12] *** dmol left
[18:13] <moritz> masak: http://elixir-lang.org/blog/2013/08/08/elixir-design-goals/ has some macro examples, including some we considered for Perl 6

[18:14] *** btyler left
[18:14] <moritz> (peeking into the components of a boolean expression to explain why a test/assert failed)

[18:14] *** kst`` is now known as kst

[18:14] *** mdn left
[18:15] *** vovka667 left
[18:18] *** rindolf left
[18:21] *** japhb_ joined
[18:22] *** SamuraiJack_ left
[18:23] <moritz> ok, talks if finally "prepared"

[18:24] *** btyler joined
[18:29] <moritz> notjack: I can't actually deduce the J grammar rules from the page you gave us

[18:30] <timotimo> jnthn: do you have an idea how i can get the Code object that belongs to a QAST::Block? Or another way to figure out what the signature of a QAST::Block is? or another way to figure out which variables are to be set by the signature?

[18:31] <moritz> timotimo: I talkded to jnthn about that earlier today, and off-hand he didn't know any way

[18:31] <timotimo> ah damn

[18:31] <moritz> timotimo: but he made the interesting observation that nqp could greatly benefit from that optimization

[18:31] <timotimo> yes, i thought so, too

[18:32] <timotimo> but there's no optimizer for nqp and i'm not sure how to hook it up properly

[18:32] <moritz> timotimo: and since nqp doesn't have a custom binder, the parameters doen't need to be lexical

[18:32] <moritz> yes, might not be trivial to get started

[18:32] <timotimo> also, the obvious way to prevent the signature problem is to bail out as soon as the "bind a signature" op is encountered, which is probably ... everywhere :(

[18:33] *** jaffa4 joined
[18:39] *** fhelmberger joined
[18:39] <slava> [op] 1,2,3,4 ... this is awesome, it looks like a folding from haskell

[18:41] <timotimo> and indeed it is :)

[18:43] *** dmol joined
[18:43] <jaffa4> anybody tied jvm?

[18:44] * moritz tied the JVM into a knot

[18:44] <jaffa4> tried

[18:45] <moritz> last time I tried to build rakudo on JVM, the build failed

[18:45] <moritz> complained about a missing op

[18:46] <moritz> but before it worked great

[18:46] <timotimo> i compiled a rakudo.jvm today from newest nqp and rakudo master/nom branches

[18:46] *** fhelmberger left
[18:48] <jaffa4> 99% complete I heard

[18:49] <FROGGS> jaffa4: true

[18:50] <TimToady> more accurately, 99% as complete as rakudo/parrot is

[18:50] <flussence> that missing 1% still includes things like "running rakudo from anywhere but the current directory"

[18:51] <TimToady> if you set the CLASSPATH it seems to help with that

[18:51] *** skids joined
[18:51] <TimToady> was doing commands like: CLASSPATH=~/nom perl6 rad.p6

[18:52] <geekosaur> although using ~ there is kinda dubious

[18:52] <TimToady> where perl6 is a symlink /usr/local/bin/perl6 -> /home/larry/nom/install-jvm/bin/perl6

[18:53] <TimToady> obviously, it'd be nice not to have to set the CLASSPATH explicitly like that

[18:53] *** bloonix joined
[18:53] *** sidus joined
[18:55] *** btyler left
[18:58] <jaffa4> it is not clear how to compile for jvm

[19:00] <TimToady> did you read the README?

[19:00] <TimToady> has some directions there that seem relatively adequate

[19:01] <TimToady> as in, worked for me :)

[19:02] * TimToady is scheduled to sleep like a log for the 120° or so of earthly rotation

[19:02] <jaffa4> 120?

[19:03] <jaffa4> is that 8 hours?

[19:03] <timotimo> r: (120 / 360) * 24

[19:03] <camelia> rakudo 2a26f1:  ( no output )

[19:03] <timotimo> r: say (120 / 360) * 24

[19:03] <camelia> rakudo 2a26f1: OUTPUT«8␤»

[19:03] <jaffa4> TimToady: thank you

[19:04] <notjack> common misconception. the logs, they're not sleeping. they're merely biding their time.

[19:04] <TimToady> has $.timotimo handles 'thank-you';

[19:04] <timotimo> :D

[19:04] <TimToady> zzz &

[19:06] *** PacoAir joined
[19:06] *** Targen joined
[19:07] <jaffa4> Are you sleeping and wawke at the same time?

[19:07] <jaffa4> awake<<

[19:08] *** zwut00 joined
[19:12] *** dmol left
[19:15] <lue> I don't suppose there's a way to search for anything *but* a sequence of characters in a regex, like /-'::'/, is there?

[19:15] *** btyler joined
[19:16] <timotimo> there's ugly hacks like /..<!after '::'>/

[19:16] <benabik> I wonder if /<!before '::'>../ would be faster.

[19:16] <timotimo> may be, yes

[19:16] <flussence> something like /<?{ $0 eq '::' }>/?

[19:17] <dalek> rakudo/nom: a379871 | moritz++ | / (4 files):

[19:17] <dalek> rakudo/nom: remove Perl6::ConstantFolder

[19:17] <dalek> rakudo/nom: 

[19:17] <dalek> rakudo/nom: it was not really needed, and the optimizer does

[19:17] <dalek> rakudo/nom: constant folding much more generally

[19:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a379871ee1

[19:17] <colomon> something with split, maybe?  depends on what you are trying to do.

[19:18] <moritz> negating a regex usually only makes sense if you anchor it somewhere

[19:20] <timotimo> that's a good point

[19:20] <timotimo> flussence: i think using a lookahead/lookbehind instead of a code assertion is better because it doesn't have to turn the matched part into a string and it can reason about matching

[19:22] <flussence> yeah, you're right

[19:25] *** zby_home joined
[19:25] *** btyler left
[19:26] *** Rotwang left
[19:26] *** zby_home left
[19:27] *** mdn joined
[19:28] * moritz blug: http://perlgeek.de/blog-en/perl-6/2013-yapc-day-1.html

[19:30] <timotimo> almost as good as being there in person!

[19:31] <colomon> \o/

[19:31] <moritz> there were some hard choices to make

[19:32] <timotimo> "but in the didn't."

[19:32] <moritz> for example I would have loved to attend http://ye2013.yapc-surveys.org/talk/32 but it clashed with another one I wanted to see

[19:32] <timotimo> "invalid code"

[19:34] *** btyler joined
[19:35] <moritz> timotimo: fixed, thanks

[19:37] <lue> here's what I'm trying to do --> https://gist.github.com/lue/6214323  it currently prints the key (debug statement) and then fails the match.

[19:39] *** Rotwang joined
[19:42] *** btyler_ joined
[19:44] <[Coke]> moritz: I've been building the jvm daily, no problems.

[19:44] <dalek> rakudo-star-daily: 25328ae | coke++ | log/ (5 files):

[19:44] <dalek> rakudo-star-daily: today (automated commit)

[19:44] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/25328aefa0

[19:44] *** btyler left
[19:44] <moritz> ok, then it's probably my fault somehow :-)

[19:47] <[Coke]> timotimo: can you open a rakudo star ticket about dropping tools and adding the 2 other modules?

[19:47] <[Coke]> that way it doesn't get lost.

[19:47] <timotimo> i guess i can, even though it's tadzik's changes?

[19:47] <[Coke]> (er, timotimo? tadzik? my t-space is pretty full...)

[19:47] <timotimo> i forgot which modules those are, though

[19:47] <timotimo> yeah, let tadzik do it :)

[19:48] <[Coke]> timotimo++, I meant tadzik++, apologies.

[19:48] * [Coke] wonders what secrete project jnthn++ is revealing this week

[19:49] <[Coke]> *secret

[19:49] <jaffa4> what makes you think that?\

[19:49] <[Coke]> ... it's a perl conference where jnthn++ is presenting.

[19:49] <colomon> jaffa4: it's kind of a tradition 

[19:50] <jaffa4> again something?

[19:50] <moritz> [Coke]: not really secret, but jnthn has been doing some impressive hacking on concurrency stuff on JVM

[19:50] <[Coke]> it's how we got moarvm, rakudo::debugger...

[19:51] <colomon> grammar::debugger...

[19:51] <colomon> the grammar generator stuff..

[19:51] <jaffa4> is this communism?

[19:52] *** dmol joined
[19:52] <[Coke]> I don't think it's an ism.

[19:53] *** celesta joined
[19:53] <celesta> ahoi #perl6

[20:00] <[Coke]> aloha

[20:00] *** Vico_Wu1 joined
[20:02] *** mdn left
[20:03] *** Vico_Wu left
[20:07] *** BigBear joined
[20:08] *** dmol left
[20:10] <celesta> r: sub foo( @x, @y ){ for @x >>~~<< @y { return False if !$_; }; return True; }; say foo( 1..5, 5..9);

[20:10] <camelia> rakudo 2a26f1: OUTPUT«False␤»

[20:10] <celesta> how do i "catch" the error if lists are not of same length?

[20:10] *** kaare_ left
[20:11] <celesta> r: sub validate( @x, @y ){ for @x >>~~<< @y { return False if !$_; }; return True; }; say validate( 1..6, 5..9);

[20:11] <camelia> rakudo 2a26f1: OUTPUT«Lists on both side of non-dwimmy hyperop of infix:<~~> are not of the same length␤left: 6 elements, right: 5 elements␤  in sub hyper at src/gen/CORE.setting:15492␤  in sub hyper at src/gen/CORE.setting:15480␤  in block  at src/gen/CORE.setting:15471␤  in sub valida…

[20:12] <FROGGS> well, you can use a try { CATCH {} } block or you just check the array lengths yourself

[20:14] <celesta> FROGGS: thank you

[20:17] *** colomon left
[20:21] *** Mouq joined
[20:24] <jaffa4> it lool=ks fot nmake

[20:24] <jaffa4> rakudo: say "hello

[20:24] <camelia> rakudo a37987: OUTPUT«===SORRY!=== Error while compiling /tmp/sbUmHsHVVt␤Unable to parse expression in double quotes; couldn't find final '"'␤at /tmp/sbUmHsHVVt:1␤------> say "hello⏏<EOL>␤    expecting any of:␤        argument list␤        prefix or …

[20:24] <jaffa4> rakudo: say "hello"

[20:24] <camelia> rakudo a37987: OUTPUT«hello␤»

[20:30] <Guest2529> I know this code is wrong, and why; is the error message right?

[20:30] <Guest2529> perl6 -e 'say "say "Hi!"; say "Perl 6 here";'

[20:30] <Guest2529> ===SORRY!===

[20:30] <Guest2529> Two terms in a row

[20:30] <Guest2529> at -e:1

[20:30] <Guest2529> ------> say "say "⏏Hi!"; say "Perl 6 here";

[20:30] <Guest2529>     expecting any of:

[20:30] <Guest2529>         postfix

[20:30] <Guest2529>         infix stopper

[20:30] <Guest2529>         infix or meta-infix

[20:30] <Guest2529>         statement end

[20:30] <Guest2529>         statement modifier

[20:30] <Guest2529>         statement modifier loop

[20:30] *** Guest2529 is now known as ajr_

[20:31] <benabik> ajr_: Too many double quotes.

[20:32] <ajr_> As I said, I understand the error, I just wonder about the message.

[20:32] *** colomon joined
[20:33] <benabik> ajr_: It's parsing Hi! as a term, immediately after the string term.  I think most unknown words are assumed to be terms.

[20:36] <[Coke]> r: say what the

[20:36] <camelia> rakudo a37987: OUTPUT«===SORRY!=== Error while compiling /tmp/BsigbqGP4p␤Undeclared routines:␤    the used at line 1␤    what used at line 1␤␤»

[20:36] <[Coke]> r: say "what" "the"

[20:36] <camelia> rakudo a37987: OUTPUT«===SORRY!=== Error while compiling /tmp/6j4io3qQjS␤Two terms in a row␤at /tmp/6j4io3qQjS:1␤------> say "what" ⏏"the"␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        statement end␤ …

[20:36] <[Coke]> r: say "what" the

[20:37] <camelia> rakudo a37987: OUTPUT«===SORRY!=== Error while compiling /tmp/C6BIL3JEiy␤Two terms in a row␤at /tmp/C6BIL3JEiy:1␤------> say "what" ⏏the␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        statement end␤   …

[20:37] <[Coke]> ^^

[20:46] <notjack> r: say 'thefuck'.WHAT;

[20:46] <camelia> rakudo a37987: OUTPUT«(Str)␤»

[20:46] <notjack> r: say <tee eff>.WHAT;

[20:46] <camelia> rakudo a37987: OUTPUT«(Parcel)␤»

[20:46] <notjack> r: say <tee eff>.WHAT.WHAT;

[20:46] <camelia> rakudo a37987: OUTPUT«(Parcel)␤»

[20:47] *** jaffa4 left
[20:48] *** kbaker left
[20:52] <[Coke]> r: say.WHAT.say, now?

[20:52] <camelia> rakudo a37987: OUTPUT«===SORRY!=== Error while compiling /tmp/UaVu6ZOYBT␤Two terms in a row␤at /tmp/UaVu6ZOYBT:1␤------> say.WHAT.say, now⏏?␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        statement end…

[20:52] <[Coke]> aw.

[20:55] <masak> o/

[20:55] <[Coke]> o/~

[20:58] <masak> moritz++ # blug post

[21:00] <lue> hello masak o/

[21:07] <masak> hellue, lo. \o

[21:08] <celesta> heja masak

[21:09] <dalek> perl6-roast-data: 8c0f742 | coke++ | / (5 files):

[21:09] <dalek> perl6-roast-data: today (automated commit)

[21:09] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/8c0f742380

[21:09] <[Coke]> rakudo.parrot failing more tests today. rakudo.jvm dropped another .01%

[21:09] *** skids left
[21:10] <[Coke]> looks like it's "is dynamic" related fallout. also rakudo.parrot has passing todos.

[21:14] <masak> aloha celesta.

[21:14] <lue> masak: Any clues as to why https://gist.github.com/lue/6214323 fails on the first :: ?

[21:14] *** benabik left
[21:17] <[Coke]> lue: have you tried the regex debugger?

[21:18] <lue> panda's refusing to work :/ (I may have to update rakudo, it's been a little while)

[21:20] <masak> lue: I think it's failing in the <?before

[21:20] <rjbs> I wrote some p6 code that might be fun to turn into a shared distribution.  What do I want to read to do that?

[21:20] <masak> lue: that's just an hypothesis, but it seems reasonable to me.

[21:20] <masak> rjbs: http://wiki.perl6.org/Create%20and%20Distribute%20Modules

[21:21] <rjbs> Thanks!

[21:21] <masak> uvtc++ siddhant++ # creating that article

[21:21] * [Coke] wonders how many times rjbs will have to do that before we get a distzilla.

[21:23] <lue> Yep, it gets the colon (added debug msg), so it fails on the before.

[21:24] <masak> lue: that's because $<closer> does not contain the whitespace after the '::'

[21:25] *** augustus joined
[21:26] <lue> I'm going to go update rakudo, and then see if panda will work for me.

[21:34] <augustus> so is anyone around here today, or is everybody off at YAPC?

[21:34] <masak> augustus: we're all off at YAPC ;)

[21:35] <lue> not all of us :(

[21:35] <augustus> ok.  That's all week long, or like 3 days?  Or really, when might I expect to find people hanging out in the chat room again?

[21:37] <masak> augustus: oh, people are still hanging out here.

[21:37] <masak> augustus: and you're likely to get replies pretty quickly.

[21:37] <jercos> I'm trapped in a sphere made of my own self-loathing, so I'm usually watching, rather than talking.

[21:37] <masak> through advanced 20th-century technologies like "IRC backlog" and "screen".

[21:37] <augustus> hehe nice :)

[21:38] <masak> jercos: that's not altogether uncommon, IIUC.

[21:38] <jercos> U?

[21:38] <masak> jercos: fsvo "self-loathing". sometimes it's simply shyness or lack of sense of being able to contribute (rightly or wrongly)

[21:38] *** dduncan joined
[21:39] <masak> I know I was a lurker for many years.

[21:39] <masak> dduncan! \o/

[21:39] *** spider-mario left
[21:39] <dduncan> hello

[21:39] <augustus> so I got the latest code from git, and I want to play around with the latest java interop, since the latest Perl6 changes mentioned some improvements.  anyone here familiar with the latest and greatest in this area?

[21:39] <masak> dduncan: long time no Muldis! :D

[21:39] * lue should do something more significant for Perl 6. Oh wait, there's the secret project.

[21:40] <dduncan> masak, well I've been busy with work that's paying me

[21:40] <masak> dduncan: haven't seen you around for a while.

[21:40] <dduncan> If I ever get a couple months to dedicate to it, I could have an executable, I"m that ready otherwise.

[21:40] <masak> dduncan: nor on the p6l list.

[21:41] <dduncan> To be honest I rarely sign on to IRC because its so distractinv.

[21:41] <jercos> augustus: personally I'm at the point of "Woah, use :java actually works"

[21:42] <augustus> jercos: yes it is impressive, and much easier than before :)

[21:42] <masak> "before"?

[21:42] <dduncan> My sign-on here was actually an auto-join bookmark ... I had opened freenode to use another channel actually.

[21:42] *** Vico_Wu1 left
[21:43] *** Vico_Wu joined
[21:43] <dduncan> People don't usually greet me so quicky when that happens.

[21:43] <dduncan> that is all

[21:43] <masak> dduncan: we've missed you too! :P

[21:43] <dduncan> My day job is all Perl / databases though, thankfully.

[21:44] <PerlJam> dduncan: you are a wise man to avoid IRC at much as possible  :)

[21:44] <augustus> masak: previously you had to load classes manually with typeForName etc.  use is much more direct and meaningful

[21:44] <masak> augustus: was that Perl 5 or Rakudo?

[21:45] <augustus> masak: to the best of my knowledge Perl 5 doesn't run on JVM?  Anyway, Rakudo.

[21:46] <jnthn> Yes, you could do it that way before.

[21:46] <PerlJam> augustus: how long ago was "previously"?

[21:46] <jnthn> If you knew how :)

[21:46] <jnthn> It's the way Threading.pm is written.

[21:46] <masak> oh!

[21:48] *** Vico_Wu1 joined
[21:49] *** Vico_Wu left
[21:51] <labster> So how is YAPC going, folks?

[21:51] *** Rotwang left
[21:52] *** FROGGS left
[21:52] <labster> Is there going to be a way to see these talks online?

[21:53] <augustus> PerlJam: Perviously was like 10-15 days ago? I forget exactly

[21:53] *** colomon left
[21:54] *** notjack left
[21:54] <augustus> jnthn: I was wondering if the latest and greatest includes an easier way to call a java constructor? Or is that still the Threading.pm way?

[21:54] *** colomon joined
[21:54] *** aindilis` joined
[21:54] <jnthn> augustus: Still the Treading.pm way if there are overloads, otherwise it's just .new

[21:55] <jnthn> augustus: Mentioned in my talk today that I'm working on getting a kinda multidispatch - overload mapping in place, but it's a little tricky.

[21:55] <augustus> jnthn: ahh, ok that's why it didn't work, because of the overloads.  Also, is it possible to access static properties?

[21:55] <augustus> jnthn: very exciting!

[21:55] <augustus> jnthn: too bad I couldn't be there

[21:56] *** aindilis left
[21:56] * timotimo is waiting eagerly for the recording

[21:56] <timotimo> i won't get anything else done :(

[21:56] <jnthn> augustus: yeah, I think the SWT example I showed today did it, it's something like field/get_name/typedesc 

[21:57] <colomon> jnthn! \o/

[21:57] <augustus> jnthn: does it follow the java byte code format?  I tried that a couple of weeks ago and couldn't get that to work

[21:57] <timotimo> jnthn: since you said there's no obvious way to get the signature from a QAST::Block, should perhaps the actions attach a signature to the QAST::Block in some way?

[22:00] <jnthn> timotimo: No obvious way? Hm

[22:00] <jnthn> There's an unobvious way if you can get the code object though ;)

[22:02] *** jeff_s1 left
[22:03] <timotimo> that's the problem, i see no way to get the Code object :(

[22:03] <timotimo> the problem i'm really trying to solve is find out which vars are signature variables and not change those into locals

[22:03] *** colomon left
[22:03] *** colomon joined
[22:04] <augustus> jnthn: I'm trying   my \Out := System.'field/get_out/Ljava/io/PrintStream'(); to no avail.  Any thoughts on what it should be?

[22:04] *** zacts left
[22:04] *** Targen left
[22:04] *** zacts joined
[22:05] *** Targen joined
[22:05] *** jaldhar_ joined
[22:06] *** jeff_s1 joined
[22:06] *** perigrin joined
[22:06] *** denis_boyun left
[22:06] *** _jaldhar left
[22:06] *** segomos joined
[22:06] *** BigBear_ joined
[22:08] *** BigBear left
[22:10] <jnthn> r: loop say 42;

[22:10] <camelia> rakudo a37987: OUTPUT«===SORRY!=== Error while compiling /tmp/FVoNwiggvi␤Missing block␤at /tmp/FVoNwiggvi:1␤------> loop ⏏say 42;␤    expecting any of:␤        statement list␤        scoped block␤»

[22:11] *** BigBear_ left
[22:13] <masak> r: say 42 while True

[22:13] <timotimo> jnthn: is "turn lexicals into locals" the only really worthwhile optimisation for nqp that you can think of?

[22:13] <camelia> rakudo a37987: OUTPUT«(timeout)42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤42␤

[22:14] <timotimo> how big would the difference be between the nqp optimizer and the rakudo optimizer? both operate on qast, both have a world object afaict, both have Blocks, Routines, lexicals?

[22:16] *** silug joined
[22:18] *** bluescreen10 left
[22:22] <jnthn> timotimo: NQP is a simpler language and can assume more. For one, parameters are simpler and can be reduced to locals much more easily :)

[22:22] <jnthn> timotimo: The very worthwhile thing is spotting when we have native int variables and turning add_n on them into add_i to avoid coercions.

[22:23] <timotimo> so add_n is for both integers and nums?

[22:23] <jnthn> no, the code-gen coerces!

[22:24] <jnthn> augustus: SWT.'field/get_NONE/I'() is my example from my SWT code

[22:24] <timotimo> i don't think i understand how that works

[22:24] <jnthn> timotimo: add_n needs two nums, so if you feed it to ints then it will do a int -> num on each arg, then the add_n

[22:25] <timotimo> so we currently have native ints that are fed to add_n and we get a int->num inside and an num->int outside?

[22:25] <jnthn> Something like 

[22:25] <jnthn> yes

[22:25] <jnthn> Which is sucky :)

[22:25] <jnthn> And a good target for the optimizer.

[22:25] <jnthn> Rakudo lacks this problem 

[22:26] <jnthn> As its numeric type system is much stronger

[22:26] <timotimo> OK

[22:27] <timotimo> any big differences in the way the optimizer would be set up (simply a class with an optimize method that turns QAST into QAST?) and hooked to the compiler?

[22:27] <timotimo> maybe tomorrow i'll hack up something very simple

[22:29] <masak> r: my %h = 'look' => { say "I see things!" }; sub run_command($cmd) { (%h{$cmd} // {;})() }; run_command 'look'

[22:29] <camelia> rakudo a37987: OUTPUT«I see things!␤»

[22:31] *** segomos left
[22:31] *** segomos joined
[22:32] <jnthn> timotimo: Should be about the same

[22:33] *** lizmat left
[22:33] <timotimo> neato.

[22:33] *** lizmat joined
[22:33] *** lizmat left
[22:34] <jnthn> ok, enough slide hacking...think I'm gonna sleep :)

[22:34] <jnthn> 'night, #perl6

[22:34] <timotimo> gnite :)

[22:35] <celesta> good night everybody

[22:35] *** Vico_Wu2 joined
[22:35] *** celesta left
[22:35] *** lizmat joined
[22:38] *** Vico_Wu1 left
[22:38] *** skids joined
[22:45] *** dduncan left
[22:47] *** Mouq left
[22:52] *** ssutch joined
[22:53] <augustus> Well, I think everybody has signed off, but I think these chat logs are saved for posterity, so I'll answer my own question.  I was missing the semicolon.  my $out := System.'field/get_out/Ljava/io/PrintStream'(); needs to be my $out := System.'field/get_out/Ljava/io/PrintStream;'(); with a semicolon terminating the classname inside the quotes.

[22:56] <masak> no, we're still here.

[22:57] <masak> most people are either sleeping already, or still out being social.

[22:57] *** fridim_ joined
[22:58] *** FROGGS joined
[23:00] <masak> 'night, #perl6

[23:00] <timotimo> good night masak :)

[23:03] *** skids left
[23:08] *** sidus left
[23:11] *** augustus left
[23:18] *** ssutch left
[23:19] *** ssutch joined
[23:20] *** FROGGS left
[23:22] *** nebuchadnezzar joined
[23:25] <lue> can anyone here get Rakudo::Debugger to work?

[23:29] <timotimo> i can't get panda to work actually

[23:29] <lue> wfm; have you updated your PATH?

[23:30] <timotimo> i can't get shell::command to work from the ext/ dir

[23:30] <timotimo> gimme a minute

[23:32] <timotimo> ufo is so slow :(

[23:45] *** ajr_ left
[23:52] *** cognominal left
[23:52] *** cognominal joined
[23:56] * lue wishes there was something that explained <before> and <after> so he would do better than bumble around with placement in the regex and the right prefix.

