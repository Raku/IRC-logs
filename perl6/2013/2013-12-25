[00:08] *** Mouq joined
[00:10] *** jeffreykegler joined
[00:13] *** zakharyas joined
[00:22] *** colomon left
[00:24] *** xenoterracide left
[00:25] *** Rotwang left
[00:27] *** xenoterracide joined
[00:34] *** Entonian joined
[00:35] *** Entonian left
[00:38] *** zakharyas left
[00:40] *** jnap left
[00:43] *** spider-mario left
[00:44] *** xenoterracide left
[00:50] *** BenGoldberg left
[00:52] *** Mouq left
[00:55] *** BenGoldberg joined
[00:57] *** jeffreykegler left
[01:01] *** colomon joined
[01:05] *** jnap joined
[01:05] *** xenoterracide joined
[01:10] *** xenoterracide left
[01:29] *** BenGoldberg left
[01:44] <itz_> Merry Christmas Mr Potter!

[01:48] *** ponbiki_ is now known as ponbiki

[02:03] *** kivutar left
[02:24] *** kurahaupo_mobile left
[02:24] *** raiph joined
[02:31] *** BenGoldberg joined
[02:31] *** dayangkun left
[02:35] *** lue left
[02:41] *** BenGoldberg left
[02:44] *** PacoAir left
[02:45] *** dayangkun joined
[03:03] *** raiph left
[03:19] *** BenGoldberg joined
[03:43] *** BenGoldberg left
[03:50] *** lue joined
[04:00] *** SoemGyu left
[04:02] *** BenGoldberg joined
[04:02] *** kurahaupo left
[04:29] *** jnap left
[04:33] *** raiph joined
[04:37] <[Coke]> (automate R*) - there's a daily run that builds one and tests it.

[04:41] *** xenoterracide joined
[04:52] *** preflex_ joined
[04:52] *** ChanServ sets mode: +v preflex_

[04:52] * lue personally believes there's little in the process as it currently is that would benefit from automation

[04:53] *** preflex left
[04:53] *** preflex_ is now known as preflex

[04:59] *** jnap joined
[05:04] *** jnap left
[05:05] *** rurban1 joined
[05:05] *** BenGoldberg left
[05:05] *** xenoterracide left
[05:17] *** raiph left
[05:21] *** xenoterracide joined
[05:26] *** SamuraiJack joined
[05:27] *** BenGoldberg joined
[05:33] *** kurahaupo joined
[05:35] *** BenGoldberg left
[05:36] *** xinming left
[05:38] *** xinming joined
[06:00] *** jnap joined
[06:05] *** jnap left
[06:18] *** BenGoldberg joined
[06:23] *** logie joined
[06:27] *** darutoko joined
[06:33] *** rurban1 left
[06:34] *** logie left
[06:37] *** xenoterracide left
[06:38] *** xenoterracide joined
[06:39] *** Ben_Goldberg joined
[06:40] *** BenGoldberg left
[06:42] <moritz> good morning

[06:42] <preflex>  moritz: you have 2 new messages. '/msg preflex messages' to read them.

[06:42] <moritz> preflex: messages

[06:42] <preflex>  lue said 8 hours, 17 minutes and 11 seconds ago: the only file to differ between the two tarballs is <tarball>/MANIFEST, and *I think* it's just that the sorting of files in them is different. I also don't spot any files that only appear in one tarball.

[06:42] <preflex>  lue said 8 hours, 11 minutes and 31 seconds ago: Just confirmed it's a simple case of the files being listed in a different order in the MANIFESTs. Note that this was *just* the top-level MANIFEST; the others were precisely the same between tarballs.

[06:44] *** Ben_Goldberg left
[06:48] <moritz> preflex: tell lue that I have uploaded the R* tarball, and sent you an invitation to for an account on rakudo.org

[06:48] <preflex>  Consider it noted.

[07:01] *** jnap joined
[07:05] <lue> ✔ ⑫ upload tarball to rakudo.org (moritz++)

[07:05] <preflex>  lue: you have 1 new message. '/msg preflex messages' to read it.

[07:05] <lue> I'll get to 13-15 in the morning, ♘ all! o/

[07:05] *** jnap left
[07:15] *** kaare__ joined
[07:19] <cxreg> karma jnthn?

[07:19] <cxreg> aw :(

[07:25] *** atroxaper joined
[07:27] *** preflex_ joined
[07:27] *** ChanServ sets mode: +v preflex_

[07:27] *** preflex left
[07:28] *** preflex_ is now known as preflex

[07:34] <atroxaper> Hello, #perl6

[07:40] <moritz> \o

[07:40] <atroxaper> moritz: o/

[07:41] <atroxaper> moritz: i want to ask you about rakudo pod parsing.

[07:41] <atroxaper> moritz: does it parse right?)

[07:42] *** xenoterracide left
[07:43] <atroxaper> moritz: i have printed pod object after parsing S26 and i see that (for example) C<> isn't parsed last table.

[07:43] <atroxaper> in last table.

[07:45] <atroxaper> I see q{ ("C<B<...>> Basis/focus of sentence (typically rendered bold)", "C<B<...>>", "Basis/focus of sentence (typically rendered bold)") }

[07:46] <atroxaper> But as i understand correctly C<...> in that exaple should convert its contenst to 'code'

[07:51] *** daniel-s joined
[08:02] *** jnap joined
[08:02] <moritz> atroxaper: yes, might be a pod parsing bug

[08:07] *** jnap left
[08:11] *** daniel-s left
[08:11] *** daniel-s joined
[08:27] <diakopter> !karma jnthn

[08:27] <diakopter> .karma jnthn

[08:27] <diakopter> .jnthn jnthn

[08:34] <moritz> jnthn++ # I now know that it's one higher than before!

[08:34] <diakopter> .jnthn jnthn

[08:34] <diakopter> seems the same to me

[08:35] *** rurban1 joined
[08:39] *** rurban1 left
[08:39] <moritz> you're just too ignorant :-)

[09:02] *** jnap joined
[09:07] *** jnap left
[09:24] *** Alina-malina left
[09:24] *** Alina-malina joined
[09:27] *** kivutar joined
[09:32] *** kivutar left
[09:34] *** SamuraiJack left
[09:50] *** PacoAir joined
[10:03] *** jnap joined
[10:06] *** Rotwang joined
[10:08] *** jnap left
[10:13] *** FROGGS[mobile] joined
[10:32] <timotimo> atroxaper: formatting codes in tables is NYI :(

[10:32] <timotimo> i've started a patch on it and passed it on to tadzik; not terribly much progress on it yet

[10:35] <itz_> I also assume p6doc should format text within a width

[10:35] <itz_> like fmt(1) I mean

[10:36] *** rurban1 joined
[10:38] <timotimo> hm, i had some code to do that once, i wonder what i did with it

[10:41] *** rurban1 left
[10:43] *** spider-mario joined
[10:48] *** aborazmeh joined
[10:53] *** ssutch left
[11:01] <timotimo> i don't think we have a proper decision on .trans and the availability of the $/ in the closures ...

[11:02] <timotimo> btw, https://github.com/perl6/specs/issues/58 *bump*

[11:03] <timotimo> so many tickets in perl6/specs ...

[11:04] *** jnap joined
[11:04] *** kaare_ joined
[11:07] *** kaare__ left
[11:08] *** jnap left
[11:08] *** aborazmeh left
[11:15] *** denisboyun joined
[11:18] *** kaare__ joined
[11:21] *** kaare_ left
[11:27] <FROGGS> o

[11:27] <FROGGS> o/

[11:27] <FROGGS> O

[11:27] <FROGGS> (now it is a snowman)

[11:31] *** denisboyun left
[11:32] <Rotwang> there is no snow where I live :C

[11:33] <tadzik> and I'm supposed to go snowboarding in 5 days :|

[11:34] <FROGGS> no snow here ( in RL) either :(

[11:45] *** johnmilton joined
[12:00] *** denisboyun joined
[12:05] *** jnap joined
[12:10] *** jnap left
[12:11] *** denisboyun left
[12:32] <timotimo> there's only wind where i'm at at the moment

[12:40] <atroxaper> timotimo: do you know what else are NYI yet in pod parsing? I want to write a really good rendering framework.

[12:41] <FROGGS> one option would be to grep for XXX and NYI in the source and roast

[12:41] <timotimo> oof, it's been a long time since i looked at that code

[12:41] <FROGGS> the filenames should tell if it is pod related

[12:43] *** Tedd1 left
[12:43] <atroxaper> FROGGS: do you think that all tests for pod parsing wes written?

[12:44] <FROGGS> atroxaper: no, but maybe you will find a few mentioned todos

[12:44] <atroxaper> Ok. I'll try. Thank you.

[12:45] <timotimo> there was only very meager test coverage for pod in roast.

[12:45] *** a_newbie joined
[12:46] <atroxaper> And one more question. About #perl6 culture. What is mean 'someone++' ?)

[12:46] <FROGGS> that is giving somebody karma

[12:46] <timotimo> r: my @a = <foo bar baz>; say "baz" ~~ / $(@a[0]) | $(@a[1]) | $(@a[2]) /;

[12:46] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«｢baz｣␤␤»

[12:46] <FROGGS> atroxaper: when somebody did something cool

[12:47] <FROGGS> the ++ is the incremental postfix

[12:48] <atroxaper> Is it karma real? Where it is stored?

[12:48] <timotimo> we had a bot that tracks it, it's not always here. we don't care about the actual value :P

[12:48] <FROGGS> bots count it

[12:48] <FROGGS> preflex: karma jnthn

[12:48] <preflex>  jnthn: 4619

[12:48] <FROGGS> preflex: karma FROGGS

[12:48] <preflex>  FROGGS: 231

[12:49] <FROGGS> preflex: karma Tobias Leih

[12:49] <preflex>  Tobias Leih has no karma

[12:49] <FROGGS> preflex: karma Tobias Leich

[12:49] <preflex>  Tobias Leich: 301

[12:49] *** zakharyas joined
[12:49] <timotimo> also, there's ++someone, which means something like "it's cool that you want to do this" or "you get the karma after you're done" or "cool idea, please go ahead"

[12:50] *** a_newbie left
[12:50] <dalek> specs: 7316137 | (Timo Paulssen)++ | S05-regex.pod:

[12:50] <dalek> specs: try to resolve #40

[12:50] <dalek> specs: review: https://github.com/perl6/specs/commit/7316137b88

[12:50] <timotimo> preflex: karma timotimo

[12:50] <preflex>  timotimo: 204

[12:50] <timotimo> is there a way to tell preflex that two names refer to the same thing?

[12:50] <atroxaper> preflex: karma atroxaper

[12:50] <preflex>  atroxaper: 1

[12:50] <timotimo> preflex: karma Timo Paulssen

[12:50] <preflex>  Timo Paulssen: 211

[12:50] <timotimo> preflex: karma FROGGS

[12:50] <preflex>  FROGGS: 231

[12:51] <timotimo> oh, github thought "try to resolve #40" meant "#40 is now resolved!"

[12:52] <timotimo> might as well. review, anyone?

[12:52] <atroxaper> I really like #perl6 !

[12:53] <FROGGS> atroxaper: :o)

[12:53] <FROGGS> we too :o)

[12:53] <FROGGS> timotimo: your patch looks sane

[12:53] *** atroxaper left
[12:53] <timotimo> i didn't look around the whole document, however

[12:54] <timotimo> maybe there ought to be a bit of extra text somewhere that shows that you need to do the $(...) thing in other contexts, too

[12:55] <timotimo> nah, i guess it's fine

[12:56] <timotimo> someone else will likely tell me otherwise if they think i'm in the wrong and i'll happily work towards a better cording

[12:56] <timotimo> wording*

[12:56] <FROGGS> timotimo: I remember that TimToady++ told me about the $() trick once

[12:57] <timotimo> yes, you linked to the irclog in the ticket

[12:57] <FROGGS> yeah, I see that now too :o)

[12:58] <FROGGS> r: my @a; / @a[0] / # do we issue a warning?

[12:58] <camelia> rakudo-jvm 6d54dc: OUTPUT«Potential difficulties:␤    Apparent subscript will be treated as regex␤    at /tmp/NvnGtC8bvS:1␤    ------> [32mmy @a; / @a[33m⏏[31m[0] / # do we issue a warning?[0m␤»

[12:58] <camelia> ..rakudo-parrot 6d54dc: OUTPUT«Potential difficulties:␤    Apparent subscript will be treated as regex␤    at /tmp/A7RmeJEW9A:1␤    ------> [32mmy @a; / @a[33m⏏[31m[0] / # do we issue a warning?[0m␤»

[12:58] <FROGGS> good

[12:58] <FROGGS> case closed I'd say :o)

[12:59] <timotimo> nice :)

[12:59] <timotimo> i'm now looking for the right place to put documentation about the set operators in S03

[13:06] *** jnap joined
[13:10] *** jnap left
[13:22] *** kurahaupo left
[13:33] <timotimo> r: .say for ((1, 2, 3) xx 2)

[13:33] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«1␤2␤3␤1␤2␤3␤»

[13:33] *** atroxaper joined
[13:34] <timotimo> r: ((1, 2, 3) xx 2).perl.say

[13:34] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«((1, 2, 3), (1, 2, 3)).list␤»

[13:39] <timotimo> i'm thinking to include the set operators just below the junctive operators, as they have junctive or precedence

[13:46] <FROGGS> p: class A { method can() { 42 } }; say A.new.can

[13:46] <camelia> rakudo-parrot 6d54dc: OUTPUT«42␤»

[13:47] <timotimo> (junctive or, junctive and, or chaining comparison precedence, to be exact)

[13:49] *** kaare__ left
[13:49] *** zakharyas left
[13:54] <timotimo> huh, what are <+ and >+?

[13:55] <timotimo> ah, it's for bas

[13:55] <timotimo> bags

[14:02] *** jnap joined
[14:03] *** mtk left
[14:04] <timotimo> there are no tests for (.) :(

[14:05] <FROGGS> :/

[14:07] <dalek> specs/S03-set-operators: 4c9c466 | (Timo Paulssen)++ | S03-operators.pod:

[14:07] <dalek> specs/S03-set-operators: get a few lines of text started for the set/bag operators

[14:07] <dalek> specs/S03-set-operators: review: https://github.com/perl6/specs/commit/4c9c4666e0

[14:07] <timotimo> somebody who actually knows what's up can continue my work :P

[14:08] *** mtk joined
[14:08] *** denisboyun joined
[14:09] *** kaare_ joined
[14:23] *** ajr joined
[14:24] *** ajr is now known as Guest70926

[14:24] *** Guest70926 is now known as ajr_

[14:31] *** rurban1 joined
[14:39] *** Rotwang left
[14:41] *** rindolf joined
[14:53] *** Rotwang joined
[14:54] *** denis_boyun_ joined
[14:55] *** denisboyun left
[14:56] *** ajr_ left
[14:57] *** ajr joined
[14:58] *** ajr is now known as Guest17720

[14:58] *** Guest17720 is now known as ajr_

[15:13] *** denis_boyun_ left
[15:29] *** zakalwe left
[15:30] *** zakalwe joined
[15:30] *** zakalwe left
[15:30] *** zakalwe joined
[15:31] *** daniel-s left
[15:35] *** BenGoldberg joined
[15:36] *** ajr_ left
[15:38] *** ajr_ joined
[15:45] *** Ben_Goldberg joined
[15:46] *** BenGoldberg left
[15:47] *** Ben_Goldberg is now known as BenGoldberg

[15:58] *** Psyche^_ joined
[15:59] *** jnap left
[16:01] *** Psyche^ left
[16:07] *** BenGoldberg left
[16:14] *** alfie53 joined
[16:15] <alfie53> Basic question: If a script begins with #!/usr/bin/perl6 is it also necessary to add use v6.0?

[16:17] *** BenGoldberg joined
[16:18] *** kaare_ left
[16:19] *** raiph joined
[16:23] *** ajr joined
[16:23] *** ajr_ left
[16:23] *** ajr is now known as Guest32825

[16:23] *** Guest32825 is now known as ajr_

[16:24] *** alfie53 left
[16:24] *** zakharyas joined
[16:28] *** atroxaper left
[16:46] *** dmol joined
[16:51] <TimToady> tell alfie53 anything that indicates perl6 will start it up in v6 mode automatically, including the #! line

[16:52] <TimToady> preflex: tell alfie53 anything that indicates perl6 will start it up in v6 mode automatically, including the #! line

[16:52] <preflex>  Consider it noted.

[16:53] <Rotwang> what are the boundaries for Int?

[16:53] <TimToady> well, they have to be integers...

[16:53] <TimToady> and they have to fit into memory

[16:56] <Rotwang> TimToady: so their size is arbitrary?

[16:56] <TimToady> I think I once found that mono had an upper limit hardcoded somewhere, but that's not our problem :)

[16:56] <Rotwang> I see, thanks

[16:57] <TimToady> r: sub postfix:<!>($n) { [*] 2..$n }; say 42!

[16:57] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«1405006117752879898543142606244511569936384000000000␤»

[16:57] <TimToady> r: sub postfix:<!>($n) { [*] 2..$n }; say 100!

[16:57] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000␤»

[16:57] <TimToady> n: sub postfix:<!>($n) { [*] 2..$n }; say 100!

[16:57] <camelia> niecza v24-108-g17d73e4: OUTPUT«93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000␤»

[16:57] <TimToady> n: sub postfix:<!>($n) { [*] 2..$n }; say 1000!

[16:57] <camelia> niecza v24-108-g17d73e4: OUTPUT«40238726007709377354370243392300398571937486421071463254379991042993851239862902059204420848696940480047998861019719605863166687299480855890132382966994459099742450408707375991882362772718873251977950595099527612087497546249704360141827809464649629105…»

[16:57] <TimToady> pugs: sub postfix:<!>($n) { [*] 2..$n }; say 1000!

[16:58] <camelia> pugs: OUTPUT«402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337…»

[17:00] *** jnap joined
[17:07] *** jnap left
[17:07] *** Ben_Goldberg joined
[17:09] *** BenGoldberg left
[17:15] *** finanalyst left
[17:16] *** fridim_ joined
[17:16] <Ben_Goldberg> r: say length [*] 2..1000

[17:16] <camelia> rakudo-jvm 6d54dc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Lo91_BkoBY␤Undeclared routine:␤    length used at line 1␤␤»

[17:16] <camelia> ..rakudo-parrot 6d54dc: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/_Cjgl1bQAw␤Undeclared routine:␤    length used at line 1␤␤»

[17:17] <Ben_Goldberg> r: say ([*] 2..1000).Str.elems

[17:17] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«1␤»

[17:17] <Ben_Goldberg> r: say (([*] 2..1000).Str.elems)

[17:17] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«1␤»

[17:18] <Ben_Goldberg> r: say ((~[*] 2..1000).elems)

[17:18] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«1␤»

[17:18] <Ben_Goldberg> r: say ((~[*] 2..1000))

[17:18] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«4023872600770937735437024339230039857193748642107146325437999104299385123986290205920442084869694048004799886101971960586316668729948085589013238296699445909974245040870737599188236277271887325197795059509952761208749754624970436014182…»

[17:18] <Ben_Goldberg> r: say ((~[*] 2..1000).chars)

[17:18] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«2568␤»

[17:18] <Ben_Goldberg> r: say ((~[*] 2..10000).chars)

[17:18] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«35660␤»

[17:18] <Ben_Goldberg> r: say ((~[*] 2..100000).chars)

[17:19] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«(timeout)»

[17:19] *** colomon left
[17:23] *** Ben_Goldberg left
[17:24] <timotimo> sup

[17:24] *** xenoterracide joined
[17:27] <TimToady> p: say [*](2..1000).chars

[17:27] <camelia> rakudo-parrot 6d54dc: OUTPUT«2568␤»

[17:27] <TimToady> don't need the ~

[17:27] <TimToady> because Cool

[17:29] <timotimo> TimToady: do you have a bit of time to skim perl6/specs issues? for example https://github.com/perl6/specs/issues/58

[17:30] <timotimo> and it seems like https://github.com/perl6/specs/issues/47 seems almost decided already

[17:30] <timotimo> s:2nd/seems/is/

[17:30] <TimToady> well, mostly family stuff today

[17:30] <TimToady> but I don't see why that one couldn't be made to work, offhand

[17:30] <TimToady> presents &

[17:31] *** BenGoldberg joined
[17:31] <timotimo> :)

[17:32] <timotimo> i'm interpreting "that one" to mean multi-argument endpoints to the ... operator :)

[17:33] <timotimo> in that case, i'll start trying to implement it :P

[17:33] *** colomon joined
[17:46] <dalek> perl6-roast-data: b7040da | coke++ | / (3 files):

[17:46] <dalek> perl6-roast-data: today (automated commit)

[17:46] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/b7040daaa5

[17:48] *** zakharyas left
[17:50] <[Coke]> whoops - the rakudo daily star stuff has been committing to something-not-master.

[17:54] * [Coke] doesn't bother trying to rescue that.

[17:55] *** xinming left
[17:55] <timotimo> Code is the right class to match against if i want to check for everything?

[17:56] *** xinming joined
[18:00] <timotimo> now to figure out how to make the sequence stuff work properly without making it preform worse

[18:00] <timotimo> do i always slice off the last $arity elements?

[18:01] <timotimo> or do i have a list that i always push onto and shift from?

[18:03] *** SamuraiJack joined
[18:03] *** jnap joined
[18:07] <timotimo> gee, i sure wish i understood how munch works :P

[18:08] *** jnap left
[18:18] <dalek> rakudo/multi_arity_sequence_endpoint: 6c13c21 | (Timo Paulssen)++ | src/core/operators.pm:

[18:18] <dalek> rakudo/multi_arity_sequence_endpoint: start working on higher arity endpoint codes for SEQUENCE

[18:18] <dalek> rakudo/multi_arity_sequence_endpoint: review: https://github.com/rakudo/rakudo/commit/6c13c21093

[18:20] *** denisboyun joined
[18:20] *** pmurias joined
[18:21] <timotimo> i just guessed what munch does by how it's used in the rest of the code

[18:21] <pmurias> timotimo: re phasers, why do we need the BEGIN ... form or the BEGIN {...} form?

[18:24] *** ajr joined
[18:24] *** ajr_ left
[18:24] *** ajr is now known as Guest86375

[18:24] *** Guest86375 is now known as ajr_

[18:27] <timotimo> pmurias: one gives you a lexical block, one doesn't

[18:31] <FROGGS> btw, v5 parsed and executed its first module from cpan: this one http://cpansearch.perl.org/src/ILYAZ/if-0.0601/if.pm

[18:32] *** kurahaupo joined
[18:33] *** SamuraiJack left
[18:35] <timotimo> yeah! :)

[18:36] <[Coke]> FROGGS++ !

[18:36] <FROGGS> :o)

[18:37] <moritz> FROGGS++

[18:38] <moritz> that's a dual-lived module, right?

[18:38] <timotimo> issue 35 from the specs seems like it's already decided? why don't we close it and put the decision into the specs? :)

[18:39] <FROGGS> moritz: what do you mean?

[18:45] <moritz> FROGGS: it's both in p5 core and in on CPAN

[18:46] <FROGGS> moritz: then yes

[18:46] <timotimo> it seemed to me like munch is used to chop off all elements up to the number specified and only leave the rest

[18:46] <moritz> timotimo: sounds about right

[18:46] <timotimo> something's not right, though :)

[18:47] <timotimo> $my_list.elems - $number-i-want should give me a list with $number-i-want elements, aye?

[18:48] <timotimo> oh, i got further in my code, that's good

[18:48] <moritz> no, it gives you an intenger, not a list

[18:49] <dalek> star: ec29482 | lue++ | docs/announce/2013.12.md:

[18:49] <dalek> star: Fix minor braino, it's December this month.

[18:49] <dalek> star: review: https://github.com/rakudo/star/commit/ec294825ef

[18:49] <timotimo> oh. i meant to say ...

[18:49] <timotimo> $my_list.munch($my_list.elems - $number-of-elems-i-want) would let $my_list have $number-of-elems-i-want elements in it afterwards?

[18:49] *** telex left
[18:49] <timotimo> r: my @foo = <a b c a b c a b c>; @foo.munch(@foo.elems - 3); say @foo;

[18:50] <camelia> rakudo-jvm 6d54dc: OUTPUT«(timeout)»

[18:50] <camelia> ..rakudo-parrot 6d54dc: OUTPUT«a b c␤»

[18:50] *** SamuraiJack joined
[18:52] *** telex joined
[18:53] <timotimo> rakudo star release \o/

[18:54] <[Coke]> for the people who can run tests with perl6-m - do you have any local modifications to the build? ISTR TimToady++ adding a --stagestats at some point.

[18:55] <timotimo> err, what?

[18:55] <timotimo> the list outputs as "1 2"

[18:55] <timotimo> it says "you passed 3, but i expected 2"

[18:55] <timotimo> my code is ~@$tail_list

[18:55] <timotimo> er.

[18:55] <timotimo> |@$tail_list

[18:56] *** SamuraiJack left
[18:57] <timotimo> not quite sure what exactly that means :\

[19:03] <timotimo> this munch thing doesn't seem to work at all

[19:03] <timotimo> now it says "expected 3, but got 13"

[19:04] <timotimo> also, out of nowhere, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 come into existence

[19:08] <lue> ✔ ⑬ Publicize the announcement.

[19:09] <moritz> lue++ # R* release

[19:10] <timotimo> ah, found one problem at least

[19:10] <dalek> star: 3c21f3b | lue++ | tools/star/release-guide.pod:

[19:10] <dalek> star: [RG 14] Add self to Hall of People who Released R* and when.

[19:10] <dalek> star: review: https://github.com/rakudo/star/commit/3c21f3b547

[19:11] <lue> ✔ ⑭ Be known for the 2013.12 release.

[19:11] <timotimo> \o/

[19:11] <timotimo> lue++

[19:12] <lue> ✔ ⑮ Celebrate! (in-progress, yet considered done)

[19:12] <lue> R* RELEASE MODE DE-ACTIVATED ☄

[19:12] <moritz> that was a short celebration :-)

[19:13] <lue> moritz: "in-progress, yet considered done"

[19:13] <lue> "considered done" is that checkmark. :)

[19:15] <timotimo> ah, of course

[19:15] <timotimo> i was bitten by the 1..12.pick trick

[19:16] <timotimo> tick?

[19:17] <timotimo> r: my $foo = ().list; $foo.push($_) for ^10; say $foo; say $foo.munch($foo.elems - 2); say $foo;

[19:17] <camelia> rakudo-jvm 6d54dc: OUTPUT«(timeout)»

[19:17] <camelia> ..rakudo-parrot 6d54dc: OUTPUT«0 1 2 3 4 5 6 7 8 9␤0 1 2 3 4 5 6 7␤8 9␤»

[19:18] <timotimo> it's supposed to work; why doesn't it work?

[19:18] <timotimo> d'oh

[19:18] <timotimo> wrong variable .elem'd

[19:19] *** dagurval joined
[19:22] <timotimo> cool, now 1, 2, { ^10.pick } ... * == * works

[19:22] <timotimo> though it seems to also push the next value that's different from the previous two onto the result unless i ...^

[19:22] <timotimo> which i think is wrong

[19:25] *** darutoko left
[19:27] <timotimo> found out why, fixed it

[19:28] <timotimo> 1 2 0 8 2 4 2 9 6 1 7 8 3 9 0 6 7 0 3 1 7 0 0

[19:32] <timotimo> the result of a run of 1, 2, { (^10).pick } ... * == *

[19:33] *** Ben_Goldberg joined
[19:33] *** BenGoldberg left
[19:34] *** johnmilton left
[19:35] <timotimo> the spectest run is soon to be done \o/

[19:37] <timotimo> oh cool, all tests passed!

[19:38] <timotimo> that either means i broke nothing in the normal case or the tests for sequences are not good enough

[19:39] *** denisboyun left
[19:40] <timotimo> oh ,wait!

[19:41] <timotimo> there arleady *was* tests for arity-2-or-more limits!

[19:41] <Ben_Goldberg> r: my @x := 1, 2, { (^10).pick } ... *; say @x[^10]

[19:41] <camelia> rakudo-jvm 6d54dc: OUTPUT«(timeout)»

[19:41] <camelia> ..rakudo-parrot 6d54dc: OUTPUT«1 2 2 3 2 1 4 5 6 2␤»

[19:42] <Ben_Goldberg> n: my @x := 1, 2, { (^10).pick } ... *; say @x[^10]

[19:42] <camelia> niecza v24-108-g17d73e4: OUTPUT«1 2 0 7 4 5 9 3 1 6␤»

[19:43] <Ben_Goldberg> j: say 'alive'

[19:44] <camelia> rakudo-jvm 6d54dc: OUTPUT«(timeout)»

[19:45] <moritz> j: say 42

[19:45] <timotimo> hm, the test expects this to work:

[19:45] <camelia> rakudo-jvm 6d54dc: OUTPUT«(timeout)»

[19:45] <moritz> j: say 42

[19:45] <camelia> rakudo-jvm 6d54dc: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[19:45] <timotimo> an arity-3 limit with a starting list that's empty

[19:46] <timotimo> https://github.com/perl6/roast/blob/master/S03-sequence/limit-arity-2-or-more.t#L17

[19:46] <lue> Does anyone else experience slowness on perlcabal.org and feather.perl6.nl?

[19:46] <timotimo> is this a bogus test, or should it just generate values unchecked until the required number of parameters is reached in the list so far?

[19:47] <moritz> lue: feather has been slow for some time

[19:48] <lue> moritz: I was thinking that it was just another symptom of the general slowness, but wasn't sure.

[19:48] <moritz> j: say 42

[19:48] <camelia> rakudo-jvm 6d54dc: OUTPUT«42␤»

[19:48] <timotimo> guidance, please?

[19:50] <moritz> timotimo: I'd say it is just assumed that the limit isn't reached until the arity of the checker is satisfied

[19:52] <dalek> specs: 763b4b3 | lue++ | S32-setting-library/Str.pod:

[19:52] <dalek> specs: [S32::Str] Remove Str.normalize

[19:52] <dalek> specs: 

[19:52] <dalek> specs: The method makes no sense in light of S15, with separate types for each

[19:52] <dalek> specs: normalization form. Fully updating S32::Str to agree with S15 still

[19:52] <dalek> specs: needs to be done.

[19:52] <dalek> specs: review: https://github.com/perl6/specs/commit/763b4b35fd

[19:53] <Ben_Goldberg> j: my @x := 1, 2, { (^10).pick } ... *; say @x[^10]

[19:53] <camelia> rakudo-jvm 6d54dc: OUTPUT«1 2 3 6 3 8 4 0 3 8␤»

[19:54] <timotimo> https://github.com/perl6/specs/issues/58 ← my thoughts on the topic agree with moritz

[19:55] <timotimo> moritz: i'll go ahead and implement that.

[19:57] <Ben_Goldberg> n: say { (^10).pick } ... * == *;

[19:57] <camelia> niecza v24-108-g17d73e4: OUTPUT«1 2 2␤»

[19:57] <Ben_Goldberg> n: say { (^10).pick } ... * == *;

[19:57] <camelia> niecza v24-108-g17d73e4: OUTPUT«3 4 8 0 3 9 3 8 5 8 2 8 4 5 3 0 1 7 9 6 6␤»

[20:00] <timotimo> ah, even niecza already has that :)

[20:01] *** rurban1 left
[20:04] *** jnap joined
[20:07] <ajr_> Just to let you know, 2013.12 appears to have downloaded and installed successfully.

[20:07] <timotimo> r: say -Inf ~~ -Inf

[20:07] <woolfy> FROGGS++ for star release!

[20:07] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«True␤»

[20:08] <timotimo> er, but lue made the star release, woolfy 

[20:08] <woolfy>  preflex: karma FROGGS

[20:08] <timotimo> have you had something to drink? :)

[20:08] * diakopter dehydrated

[20:08] *** rurban1 joined
[20:09] *** jnap left
[20:09] <woolfy> OOPS sorryy.....   lue++ for star release

[20:09] <woolfy> FROGGS++ for many other things :-)

[20:09] <timotimo> :3

[20:09] <lue> woolfy: no problem. :)

[20:11] <woolfy> timotimo: yesterday at xmas part at lizmat' sis...  prosecco, Belgian beer, Austrian Marzipan-Creme-Likör, and whisky. 

[20:11] <woolfy> (no hangover though)

[20:11] *** BenGoldberg joined
[20:12] <timotimo> very good :)

[20:12] *** Ben_Goldberg left
[20:14] <timotimo> and more tests passing for rakudo \o/

[20:22] <timotimo> p: (1 ... *)[^10].say

[20:22] <camelia> rakudo-parrot 6d54dc: OUTPUT«1 2 3 4 5 6 7 8 9 10␤»

[20:22] <timotimo> locally, that gives me an error all of a sudden ... ?!?

[20:25] *** ajr_ left
[20:27] *** ajr joined
[20:27] *** ajr is now known as Guest26911

[20:27] *** Guest26911 is now known as ajr_

[20:30] *** ajr_ left
[20:33] <moritz> timotimo: that's not good :-)

[20:35] *** rindolf left
[20:37] <timotimo> i made a silly little mistake

[20:41] *** xenoterracide left
[20:41] *** xenoterracide joined
[20:50] <xenoterracide> can I modify a class, without modifying the source or subclassing, in a way that would modify all instances of the class on the system? (or at least all new instances) 

[20:52] *** xenoterracide left
[20:53] *** xenoterracide joined
[20:53] <moritz> xenoterracide: yes, to the degree that "modify" means "add new stuff to it"

[20:53] <moritz> with use MONKEY_TYPING; augment class YourClass { new definitions here }

[20:58] *** rurban1 left
[21:00] <xenoterracide> moritz: that's cool, where's that documented?

[21:01] <timotimo> oh!

[21:01] <timotimo> the endpoint check causes it to give a negative direction if the $endpoint is a code object

[21:02] *** dayangkun left
[21:02] * xenoterracide debates on whether I want to write this system I want to write in p5 or p6

[21:04] <timotimo> r: say (1 ... * > 100)[^10];

[21:04] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«1 0 -1 -2 -3 -4 -5 -6 -7 -8␤»

[21:05] *** jnap joined
[21:05] <moritz> xenoterracide: S12 (and to a lesser degree S02)

[21:05] <timotimo> i thought this was a bug i caused

[21:05] <timotimo> fortunately it's already there

[21:05] <TimToady> r: say 1 cmp * > 100

[21:05] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«WhateverCode.new()␤»

[21:05] <timotimo> ohai timtoady :)

[21:06] <TimToady> xenoterracide: do you want it fast, or readable?

[21:06] <timotimo> TimToady: IMO, with perl6 it will stay readable and become faster; with perl5 it will stay unreadable and fast :P

[21:06] <TimToady> r: my $f = * > 100; say 1 cmp $f

[21:06] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«More␤»

[21:07] <TimToady> r: my $f = * > 100; say $f.Num

[21:07] <camelia> rakudo-jvm 6d54dc: OUTPUT«No such method 'Num' for invocant of type 'WhateverCode'␤␤»

[21:07] <camelia> ..rakudo-parrot 6d54dc: OUTPUT«No such method 'Num' for invocant of type 'WhateverCode'␤  in block  at /tmp/nECXtRXwo8:1␤␤»

[21:07] <TimToady> r: my $f = * > 100; say +$f

[21:07] <camelia> rakudo-parrot 6d54dc: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \v: Mu *%_)␤  in any  at gen/parrot/BOOTSTRAP.nqp:1218␤  in any  at gen/parrot/BOOTSTRAP.nqp:1209␤  in method Numeric at gen/parrot/CORE.setting:985␤  in sub prefix:<+> at gen/parrot…»

[21:07] <camelia> ..rakudo-jvm 6d54dc: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \v: Mu *%_)␤  in any  at gen/jvm/BOOTSTRAP.nqp:1201␤␤»

[21:08] <TimToady> r: my $f = * > 100; say 1 after $f

[21:08] <xenoterracide> TimToady: now there's a question... I suppose the real question though will be, is how bad will the longterm runtime be, either way I'm going to have to write a lot of code

[21:08] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«True␤»

[21:08] <timotimo> TimToady: would it be too magical to special-case code to give an increasing sequence if we only have one starting value in the list

[21:09] <TimToady> p: say 10 ... 1

[21:09] <camelia> rakudo-parrot 6d54dc: OUTPUT«10 9 8 7 6 5 4 3 2 1␤»

[21:09] <TimToady> it would not be too magical, unless "wrong" is too magical :)

[21:09] *** jnap left
[21:10] <TimToady> xenoterracide: longterm, we expect P6 to run faster than P5; shortterm, not so much...

[21:13] *** gfldex joined
[21:13] <xenoterracide> TimToady: although I imagine this is a very speculative question... and one asked a lot, is there any speculation on how long long term? like 1-2 years before it's on par?

[21:13] <xenoterracide> had a side thought... I wonder how well it'd work p5 became a target vm of p6

[21:13] <TimToady> that's one of those futures that will be unevenly distributed; it depends on what you're trying to do

[21:14] <timotimo> i think in 2 years we'll have pretty decent performance

[21:14] <TimToady> p5 hasn't got the internals to support p6 well

[21:15] <TimToady> it it basically would have to emulate the type system, rather than using its native type system

[21:16] <TimToady> this is why backporting smartmatching was not very successful

[21:16] <xenoterracide> it's a thought similarly based around people thinking of having it compile to js

[21:16] <xenoterracide> v8 is faster than p5 but not /that/ much I think

[21:16] *** dayangkun joined
[21:17] <TimToady> but v8 has a type system at a fundamental level that p5 is missing

[21:17] *** raiph left
[21:17] <xenoterracide> ah

[21:17] <TimToady> p5 goes out of its way to smear the fundamental types

[21:18] <timotimo> there would probably have to be at least as much trouble for running p6 on p5 as there is for running rakudo on parrot

[21:18] <TimToady> merely using a number as a string means that P5 doesn't any longer know whether it is primarily a number pretending to be a string or a string pretending to be a number

[21:18] <clsn_> Doesn't p6 also sometimes treat numbers-that-look-like-strings differently from other strings?

[21:19] <TimToady> only when coming from a medium that confuses them already

[21:19] <TimToady> such as command-line args, or user input or the text of your program

[21:19] <xenoterracide> TimToady: thanks, (gotta go celebrate the holidays)

[21:19] <TimToady> nodnod

[21:21] *** dayangkun left
[21:21] <TimToady> in that sense, <1 2 3> is like «1 2 3» in kinda emulating command line args, just without the interpolation of the latter

[21:21] *** dayangkun joined
[21:21] <timotimo> TimToady: a regular my $foo = 10 won't give a int-str, but if you put < ... > around them it would

[21:23] <TimToady> clsn_: but unlike p5, which just turns those all into a SvPVIV or whatever, p5 distinguishes Int from Str, and both of those from IntStr

[21:23] <clsn_> I see.

[21:23] <TimToady> part of the more general design principle of p6, avoid accidental genericity

[21:23] <TimToady> intention genericity is fine, and IntStr represents that

[21:23] <TimToady> *tional

[21:24] <TimToady> declaring a role is intentional genericity

[21:24] <TimToady> so we know the code inside a role must be interpreted more than one way

[21:24] <TimToady> but p5's multipass parsing is accidental genericity

[21:25] <TimToady> so the compiler is itself never quite sure what language it's in

[21:25] <TimToady> which is why p6 does one-pass parsing :)

[21:25] *** xenoterracide left
[21:26] <timotimo> TimToady: you wanted a "p6" instead of "p5" at the end of the last line starting with "clsn_:"

[21:26] <TimToady> timotimo: well, a single <10> should produce an Int

[21:26] <TimToady> n: say <10>.WHAT

[21:26] <camelia> niecza v24-108-g17d73e4: OUTPUT«(Int)␤»

[21:26] <TimToady> niecza++

[21:26] <timotimo> wasn't there something about wanting to keep the representation of <10_00_00> etc?

[21:27] <TimToady> n: say <10_000_000>.WHAT

[21:27] <camelia> niecza v24-108-g17d73e4: OUTPUT«(Int)␤»

[21:27] <timotimo> that's supposed to .Str back to 10_000_000 again rather than 10000000, right?

[21:27] <TimToady> the presence of _ could be taken to mean an IntStr is desired, I suppose

[21:27] <TimToady> well, if you really mean that...

[21:27] <timotimo> OK, sure

[21:27] <TimToady> n: say < 10_000_000 >.WHAT

[21:27] <camelia> niecza v24-108-g17d73e4: OUTPUT«(IntStr)␤»

[21:28] <timotimo> oh, i see

[21:28] <TimToady> you can always write it like that

[21:28] <timotimo> there's that, too

[21:28] <TimToady> it's a DW

[21:28] <TimToady> it's a DWIM, so there's always going to be a bit of WAT

[21:29] <TimToady> same for lol vs flat dwimmery

[21:29] *** rurban1 joined
[21:33] *** rurban1 left
[21:35] <timotimo> i'm going for a last spectest run, then i'm going to push my branch and go to bed

[21:36] <timotimo> my branch will also contain a change to make 1 ... * > 10 and similar things to give increasing sequences

[21:38] <TimToady> r: my $f = * > 100; say -1 after $f

[21:38] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«True␤»

[21:39] <TimToady> r: my $f = * > 100; say $f after $f

[21:39] <camelia> rakudo-parrot 6d54dc, rakudo-jvm 6d54dc: OUTPUT«False␤»

[21:42] *** kurahaupo left
[21:43] <dalek> roast: a734f7c | (Timo Paulssen)++ | S03-sequence/limit-arity-2-or-more.t:

[21:43] <dalek> roast: fudge two hanging WIP spectests for sequences

[21:43] <dalek> roast: review: https://github.com/perl6/roast/commit/a734f7ccdc

[21:47] *** rurban1 joined
[21:55] <dalek> rakudo/multi_arity_sequence_endpoint: c248769 | (Timo Paulssen)++ | / (2 files):

[21:55] <dalek> rakudo/multi_arity_sequence_endpoint: finish up multi-arity-limit, run the pre-existing tests

[21:55] <dalek> rakudo/multi_arity_sequence_endpoint: review: https://github.com/rakudo/rakudo/commit/c2487697fe

[21:55] <dalek> rakudo/multi_arity_sequence_endpoint: bc572cd | (Timo Paulssen)++ | src/core/operators.pm:

[21:55] <dalek> rakudo/multi_arity_sequence_endpoint: towards @_ support and increasing seqs by default

[21:55] <dalek> rakudo/multi_arity_sequence_endpoint: 

[21:55] <dalek> rakudo/multi_arity_sequence_endpoint: if the arity of the code for the limit is 0 and the count

[21:55] <dalek> rakudo/multi_arity_sequence_endpoint: is Inf, I try to pass all values so far into the code.

[21:55] <dalek> rakudo/multi_arity_sequence_endpoint: 

[21:55] <dalek> rakudo/multi_arity_sequence_endpoint: in addition, lists that start with a single number and then

[21:55] <dalek> rakudo/multi_arity_sequence_endpoint: have a limit block will now be increasing, rather than

[21:55] <dalek> rakudo/multi_arity_sequence_endpoint: decreasing (strange to have ... * be increasing and ... * > 5

[21:55] <dalek> rakudo/multi_arity_sequence_endpoint: be decreasing instead)

[21:55] <dalek> rakudo/multi_arity_sequence_endpoint: review: https://github.com/rakudo/rakudo/commit/bc572cd6dd

[22:01] *** raiph joined
[22:06] *** jnap joined
[22:07] <timotimo> good night perl6 people

[22:11] *** jnap left
[22:15] <[Coke]> ~~

[22:17] *** kst` joined
[22:19] *** kst left
[22:40] <moritz> fwiw the advent calendar had 22.5k visitors, which is a little less than 2011, and more than 2012

[22:40] *** kivutar joined
[22:47] *** denis_boyun joined
[22:48] <lue> ooc, what's the difference between an exception and a control exception? Is "control exception" things like SIGINT ?

[22:49] *** jeffreykegler joined
[22:52] <FROGGS> isnt a control exeption something like `NEXT`, `REDO`, or `LAST`?

[22:53] *** denis_boyun left
[22:54] <lue> FROGGS: there's a CONTROL {} phaser that catches "control exception"s, and I'm not sure why/how that warrants a CATCH {} variant.

[22:56] <moritz> return() uses control exceptions, for example

[22:57] <moritz> all the things that cause "anormal" control flow

[23:01] <lue> .oO("Control (flow) Exception")

[23:02] <lue> moritz: OK, I think it's just a case of me not seeing CONTROL {} in action that makes me wonder about them. :)

[23:07] *** jnap joined
[23:10] *** preflex left
[23:11] *** jnap left
[23:12] *** preflex joined
[23:12] *** ChanServ sets mode: +v preflex

[23:21] *** dmol left
[23:52] *** colomon left
[23:59] *** kivutar left
