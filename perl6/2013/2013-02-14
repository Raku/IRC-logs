[00:00] *** BooK_ left
[00:00] *** BooK joined
[00:08] <jnthn> 'night, #perl6

[00:11] <salparadise> j/wc

[00:11] *** salparadise left
[00:18] *** benabik joined
[00:27] *** fgomez left
[00:27] *** leprevost joined
[00:32] *** am0c joined
[00:40] *** thou left
[00:43] <dalek> nqp-jvm-prep: 4c1686c | diakopter++ | src/org/perl6/nqp/sixmodel/reprs/ContextRefInstance.java:

[00:43] <dalek> nqp-jvm-prep: wrong lex type

[00:43] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/4c1686c3ec

[00:44] *** Chillance left
[00:48] *** daniel-s joined
[00:49] *** daniel-s left
[00:50] *** daniel-s joined
[00:51] *** _daniel-s__ left
[00:55] <TimToady> Ulti: bare say is also supposed to be illegal

[00:55] <TimToady> nr: say;

[00:55] <p6eval> niecza v24-23-g0520c7c: OUTPUT«===SORRY!===␤␤Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument at /tmp/whcQaybYfj line 1:␤------> say⏏;␤␤Unhandled exception: Check failed␤␤  at /home/p6e…

[00:55] <p6eval> ..rakudo 5a1291: OUTPUT«␤»

[00:58] <TimToady> in fact, nearly any function that p5 defaults to $_ is supposed to be illegal in p6 (when bare)

[00:58] <TimToady> n: split;

[00:58] <p6eval> niecza v24-23-g0520c7c: OUTPUT«===SORRY!===␤␤Unsupported use of bare 'split'; in Perl 6 please use .split if you meant $_, or use an explicit invocant or argument at /tmp/wmS6YHg_IJ line 1:␤------> split⏏;␤␤Unhandled exception: Check failed␤␤  at /ho…

[00:59] <TimToady> n: ord;

[00:59] <p6eval> niecza v24-23-g0520c7c: OUTPUT«===SORRY!===␤␤Unsupported use of bare 'ord'; in Perl 6 please use .ord if you meant $_, or use an explicit invocant or argument at /tmp/zK9qVrxHi4 line 1:␤------> ord⏏;␤␤Unhandled exception: Check failed␤␤  at /home/p6e…

[00:59] <TimToady> like those

[01:00] <TimToady> catching those at compile time is construed to be more humane than either catching them at run time or silently producing unexpected results

[01:01] <diakopter> n: die

[01:01] <p6eval> niecza v24-23-g0520c7c: OUTPUT«Unhandled exception: Died␤  at /home/p6eval/niecza/lib/CORE.setting line 1438 (die @ 5) ␤  at /tmp/MA0D06AzvD line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4233 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4234 (module…

[01:01] <diakopter> n: die;

[01:01] <p6eval> niecza v24-23-g0520c7c: OUTPUT«Unhandled exception: Died␤  at /home/p6eval/niecza/lib/CORE.setting line 1438 (die @ 5) ␤  at /tmp/_pufqbXy34 line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4233 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4234 (module…

[01:02] <TimToady> that one doesn't defualt to $_, so it's okay

[01:02] <TimToady> *fault

[01:05] * TimToady is kinda wondering why ANSIColor swapped the arguments of colored() from p5's order; it seems to violate endweight to put the little argument last

[01:05] <diakopter> rn: .say .say

[01:05] <p6eval> niecza v24-23-g0520c7c: OUTPUT«===SORRY!===␤␤Method call found where infix expected (change whitespace?) at /tmp/qJ5MgZJwHZ line 1:␤------> .say ⏏.say␤␤Parse failed␤␤»

[01:05] <p6eval> ..rakudo 5a1291: OUTPUT«===SORRY!===␤Two terms in a row␤at /tmp/j_aq27MELY:1␤------> .say ⏏.say␤    expecting any of:␤        method arguments␤        postfix␤        infix or meta-infix␤        infix stopper␤        statement end␤        statement mod…

[01:07] *** fgomez joined
[01:07] <diakopter> rn: .say: ;

[01:08] <p6eval> rakudo 5a1291, niecza v24-23-g0520c7c: OUTPUT«Any()␤»

[01:08] <diakopter> rn: .say: 

[01:08] <p6eval> rakudo 5a1291: OUTPUT«===SORRY!===␤Two terms in a row␤at /tmp/tpalRJGuQ9:1␤------> .say⏏:␤    expecting any of:␤        method arguments␤        postfix␤        infix or meta-infix␤        infix stopper␤        statement end␤        statement modifie…

[01:08] <p6eval> ..niecza v24-23-g0520c7c: OUTPUT«===SORRY!===␤␤Confused at /tmp/moHCBXlopb line 1:␤------> .say⏏:␤␤Parse failed␤␤»

[01:13] *** fgomez left
[01:15] *** stopbit left
[01:21] *** census_ left
[01:23] *** erkan left
[01:45] *** am0c left
[01:45] *** araujo joined
[01:45] *** araujo left
[01:45] *** araujo joined
[01:54] *** felher left
[01:55] *** felher joined
[02:06] <benabik> So.  I get an segfault when compiling NQP HEAD with Parrot HEAD.  It's trying to compile stage2/gen/NQPP5QRegex.pm.  The segfault appears to be when trying to get the backtrace for an exception.

[02:06] *** fgomez joined
[02:06] <benabik> The reason for this appears to be that NQP has a NULL in it's constant table for a set_returns op.

[02:11] *** fgomez left
[02:11] <benabik> I'm trying to figure out how _that_ happens.  But thought I'd mention it here in case this sounds familiar to anyone.

[02:16] <swarley> http://pastebin.com/LJiNKXR5

[02:17] <swarley> That looks better than I had hoped for :)

[02:17] <swarley> Cuts down on the sixModelObject.go file substantially

[02:20] *** census joined
[02:26] <benabik> Huh.  Looks like removing my old installed nqp fixed it.  I'm guessing there was some stupidity involving OS X's linker and oplibs.

[02:27] * benabik adds "stow -D nqp" to his buildscript.

[02:30] *** census_ joined
[02:33] *** census left
[02:49] *** s1n1 left
[02:51] <benabik> Woo, a working perl6 again.

[02:52] *** s1n joined
[02:52] <benabik> Maybe now I can try rakudo-jvm.

[02:52] <benabik> Also: Woo! GSoC was announced.  Org deadline 3/18 1900 UTC

[02:53] <benabik> http://google-opensource.blogspot.com/2013/02/flip-bits-not-burgers-google-summer-of.html

[03:00] <swarley> maybe i should submit my project to SoC

[03:00] <benabik> Well, organizations need to apply first.  Student applications start 4/22

[03:01] <swarley> Oh, well I'll have to wait quite a bit then

[03:01] <swarley> I wonder if I'll have a semi working product by then

[03:01] <swarley> Odds are that I will not, but hey, who knows

[03:03] *** fgomez joined
[03:03] *** preflex left
[03:05] *** preflex joined
[03:23] *** leprevost left
[03:23] *** census_ left
[04:01] *** alec__ left
[04:05] *** jferrero left
[04:05] *** jferrero joined
[04:52] *** preflex_ joined
[04:53] *** preflex left
[04:53] *** preflex_ is now known as preflex

[04:59] *** replore_ joined
[04:59] *** replore_ left
[05:00] *** daniel-s left
[05:04] <dalek> perl6-most-wanted: 4e71c32 | (Geoffrey Broadwell)++ | most-wanted/ (2 files):

[05:04] <dalek> perl6-most-wanted: Add more most-wanted bindings and modules from perl5-corelist-5.014002, #perl6 comments, and common sense

[05:04] <dalek> perl6-most-wanted: review: https://github.com/japhb/perl6-most-wanted/commit/4e71c32d6c

[05:05] *** replore joined
[05:06] *** replore left
[05:10] *** alec__ joined
[05:12] *** xilo_ joined
[05:12] <dalek> perl6-most-wanted: 373f0f0 | (Geoffrey Broadwell)++ | most-wanted/modules.md:

[05:12] <dalek> perl6-most-wanted: More most-wanted modules, from the Volatile 100

[05:12] <dalek> perl6-most-wanted: review: https://github.com/japhb/perl6-most-wanted/commit/373f0f0377

[05:13] *** xilo_ left
[05:14] *** xilo_ joined
[05:15] *** xilo_ left
[05:15] *** thou joined
[05:15] *** quester joined
[05:16] *** quietfanatic joined
[05:16] *** SamuraiJack joined
[05:16] *** xinming left
[05:17] *** tianhua joined
[05:17] *** xinming joined
[05:19] <quietfanatic> So, I have a question, which is really a disguised bug report, which is really a disguised feature request.

[05:19] <quietfanatic> Why does the default .new only forward named arguments and not positional arguments?

[05:20] *** Garland_g joined
[05:20] * diakopter looks around for implementors, and seeing none, looks around for TimToady, then gives up

[05:20] <quietfanatic> o/ garland

[05:21] *** sevin joined
[05:22] <lue> quietfanatic: my guess is because the compiler can't guess the right order for arguments.

[05:23] <quietfanatic> why would it need to?

[05:24] <quietfanatic> Ah, I see what you mean

[05:24] <quietfanatic> I'm not asking it to map positionals to attributes, I'm asking it to forward positional arguments to a custom submethod BUILD that takes positional arguments.

[05:24] <diakopter> do the args get passed to all the parent/role constructors too?

[05:25] <quietfanatic> As it is, in order to implement a class that takes positional arguments for a constructor

[05:25] <quietfanatic> oh, is that the issue?

[05:25] <quietfanatic> hmmm.

[05:25] <quietfanatic> I see

[05:26] <quietfanatic> It isn't BUILD's responsibility to do all that, is it

[05:27] <quietfanatic> Slightly tangentially, it is possible for the programmer to control the  process of getting all the BUILDs called?

[05:28] <quietfanatic> s/it is/is it

[05:28] <diakopter> (I don't even know whether roles have constructors)

[05:28] <sorear> you can override BUILDALL

[05:29] <quietfanatic> Ah, there we go

[05:30] <quietfanatic> So why doesn't the default new forward positionals to that?

[05:31] *** Targen joined
[05:38] <lue> Because the default BUILD doesn't do positionals, methinks (unless my knowledge of self.bless doesn't apply)

[05:39] <quietfanatic> Basically, as it is, in order to make a constructor that takes positional arguments, you have to override both new and one of BUILD or BUILDALL.

[05:39] <quietfanatic> Or write a wrapper sub and pretend it's a constructor.

[05:40] <quietfanatic> Overriding new is a pain, because then you have to know what to do with CREATE and bless and such

[05:40] <lue> r: my class A { has $.b; multi method new ($b) { self.bless(*, :$b); }; }; my $c = A.new(5); say $c.b;

[05:40] <p6eval> rakudo 5a1291: OUTPUT«5␤»

[05:40] <quietfanatic> oh, you don't have to call CREATE

[05:40] <quietfanatic> I forgot that

[05:41] <sorear> quietfanatic: Overridding new is the intended way to make positionals be used.

[05:41] <quietfanatic> and bless takes extra arguments that're forwarded?

[05:41] <quietfanatic> aah

[05:41] <sorear> You don't need CREATE or BUILD, as lue points out.

[05:41] <quietfanatic> that is much more convenient

[05:42] <quietfanatic> though if I recall correctly, you still have to override BUILD if you want to initialize private attributes

[05:42] <quietfanatic> r: my class A {has $!b; multi method new ($b) { self.bless(*, :$b); }; }; my $c = A.new(4); say $c.b

[05:42] <p6eval> rakudo 5a1291: OUTPUT«No such method 'b' for invocant of type 'A'␤  in block  at /tmp/iDqGG9pKMQ:1␤␤»

[05:43] <quietfanatic> r: my class A {has $!b; multi method new ($b) { self.bless(*, :$b); }; }; my $c = A.new(4);

[05:43] <p6eval> rakudo 5a1291:  ( no output )

[05:43] <quietfanatic> Or not?

[05:43] <quietfanatic> r: my class A {has $!b; multi method new ($b) { self.bless(*, :$b); }; method p { say $!b; } }; my $c = A.new(4); $c.p

[05:43] <p6eval> rakudo 5a1291: OUTPUT«Any()␤»

[05:43] <sorear> n: my class A { has $!b; method new($b) { self := callwith(); $!b = $b; self }; method foo() { $!b } };say A.new(4).foo

[05:43] <p6eval> niecza v24-23-g0520c7c: OUTPUT«Unhandled exception: Cannot call new; none of these signatures match:␤    Mu, *%_␤  at /home/p6eval/niecza/lib/CORE.setting line 1476 (callwith @ 5) ␤  at /tmp/xRtoFVmlz0 line 1 (A.new @ 4) ␤  at /tmp/xRtoFVmlz0 line 1 (mainline @ 5) ␤  at /home/p6eval/nie…

[05:44] <quietfanatic> it just ignores the provided named argument.

[05:44] <sorear> n: my class A { has $!b; method new(A:U: $b) { self := callwith(); $!b = $b; self }; method foo() { $!b } };say A.new(4).foo

[05:44] <p6eval> niecza v24-23-g0520c7c: OUTPUT«Unhandled exception: Cannot call new; none of these signatures match:␤    Mu, *%_␤  at /home/p6eval/niecza/lib/CORE.setting line 1476 (callwith @ 5) ␤  at /tmp/rArkN840sh line 1 (A.new @ 4) ␤  at /tmp/rArkN840sh line 1 (mainline @ 5) ␤  at /home/p6eval/nie…

[05:44] <sorear> n: my class A { has $!b; method new(A:U: $b) { self := callwith(self); $!b = $b; self }; method foo() { $!b } };say A.new(4).foo

[05:44] <p6eval> niecza v24-23-g0520c7c: OUTPUT«4␤»

[05:44] <sorear> oops

[05:44] <quietfanatic> I don't think you can use callwith, because providing a new deletes the default new

[05:44] <sorear> No

[05:45] <sorear> new is an inherited method

[05:45] <sorear> not auto-generated

[05:45] *** kaleem joined
[05:45] <sorear> anyway, see what worked above

[05:45] <quietfanatic> ah

[05:45] <quietfanatic> although that modifies self

[05:46] <quietfanatic> n: my class A { has $!b; method new(A:U: $b) { self := callwith(self); $!b = $b; self }; method foo() { $!b } }; my $a = A; $a.new(5); say $a.foo

[05:46] <benabik> Which rakudo doesn't seem to like.

[05:46] <p6eval> niecza v24-23-g0520c7c: OUTPUT«Unhandled exception: Attempted to access slot $!b of type object for A␤  at /tmp/qY1dFDZpdp line 1 (A.foo @ 3) ␤  at /tmp/qY1dFDZpdp line 1 (mainline @ 8) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4233 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.se…

[05:46] <quietfanatic> Is self passed by value?

[05:47] <quietfanatic> by copy, I mean

[05:47] <quietfanatic> that can't be right

[05:48] <quietfanatic> oh, the := changes the binding of the name

[05:48] <quietfanatic> that's a bit unintuitive, but okay

[05:49] <sorear> r: method () { self := 2 }

[05:49] <p6eval> rakudo 5a1291: OUTPUT«===SORRY!===␤Cannot use bind operator with this left-hand side␤at /tmp/9Ehz3FdnyN:1␤------> method () { self := 2 ⏏}␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infix stopper␤»

[05:49] *** sevin left
[05:50] <quietfanatic> r: method () { say VAR(self).WHAT; }

[05:50] <p6eval> rakudo 5a1291: OUTPUT«===SORRY!===␤Undeclared name:␤    VAR used at line 1␤␤»

[05:50] <quietfanatic> oh that was removed

[05:50] <sorear> r: say 2.VAR

[05:50] <p6eval> rakudo 5a1291: OUTPUT«2␤»

[05:51] <quietfanatic> r: method () { say self.WHAT; say self.VAR.WHAT; }

[05:51] <p6eval> rakudo 5a1291:  ( no output )

[05:51] <sorear> anyway := changes VAR

[05:51] <sorear> also you need to call the method

[05:51] <quietfanatic> r: class A { method x () { say self.WHAT; say self.VAR.WHAT; } }; A.new.x

[05:51] <p6eval> rakudo 5a1291: OUTPUT«A()␤A()␤»

[05:51] <quietfanatic> ...right

[05:52] <sorear> what you're seeing there is that the 'self' name is bound directly to an object, not via a variable

[05:52] <sorear> so self and self.VAR are equivalent

[05:52] <quietfanatic> I'd think that'd mean self shouldn't even have a .VAR

[05:53] <dalek> rakudo/nom: fdbba70 | moritz++ | / (2 files):

[05:53] <dalek> rakudo/nom: RT #107992: make $_ writable in -n/-p code

[05:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fdbba70ad4

[05:53] <dalek> rakudo/nom: 8369e63 | moritz++ | / (2 files):

[05:53] <dalek> rakudo/nom: speed up eqv for Buf

[05:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8369e63a8f

[05:53] <moritz> so you'd want it to fail()? or blow up?

[05:54] *** jferrero left
[05:54] *** fgomez left
[05:54] <quietfanatic> yeah

[05:54] <quietfanatic> if it's supposed to not be a variable.

[05:55] <quietfanatic> if it is, I'd expect := to not work.

[05:55] *** jferrero joined
[05:55] *** fgomez joined
[05:55] <benabik> You expect := to not work on variables?

[05:56] <quietfanatic> How I worded that was a little confusing

[05:56] <quietfanatic> I expect it to not work on not-variables.

[05:56] <quietfanatic> self is a variable -> := works, has .VAR

[05:56] <quietfanatic> self is not a variable -> := doesn't work, doesn't have .VAR

[05:56] <quietfanatic> that is my expectation.

[05:57] <benabik> Isn't self just an implicit \self in the method sig?

[05:57] <quietfanatic> n: class A { method x () { say self.WHAT; say self.VAR.WHAT; } }; A.new.x

[05:57] <p6eval> niecza v24-23-g0520c7c: OUTPUT«A()␤Scalar()␤»

[05:57] <quietfanatic> r: class A { method x () { say self.WHAT; say self.VAR.WHAT; } }; A.new.x

[05:57] <p6eval> rakudo 5a1291: OUTPUT«A()␤A()␤»

[05:57] <sorear> benabik: essentially yes

[05:58] <sorear> it predates \foo so it's handled differently in rakudo and niecza

[05:58] <benabik> r: my class A { has $!b; method new(A:U $foo: $b) { $foo = callwith(self); $foo.b = $b; $foo }; method foo() { $!b } };say A.new(4).foo

[05:58] <p6eval> rakudo 5a1291: OUTPUT«Default constructor for 'A' only takes named arguments␤  in method new at src/gen/CORE.setting:730␤  in  at src/gen/Metamodel.pm:2868␤  in any call_with_args at src/gen/Metamodel.pm:2865␤  in block  at src/gen/CORE.setting:540␤  in method new at /tmp/z9IbhCOnaq:1␤ …

[05:59] <benabik> But I redefined the constructor.  Tisk, tisk.

[05:59] <sorear> benabik: it's the callwith

[05:59] <sorear> it should be callwith()

[05:59] <sorear> niecza is being silly and wants (self)

[05:59] <benabik> r: my class A { has $!b; method new(A:U $foo: $b) { $foo = callwith(); $foo.b = $b; $foo }; method foo() { $!b } };say A.new(4).foo

[05:59] <p6eval> rakudo 5a1291: OUTPUT«Cannot assign to a readonly variable or a value␤  in method new at /tmp/qnbO_sJYvc:1␤  in block  at /tmp/qnbO_sJYvc:1␤␤»

[05:59] <sorear> whoever decides to maintain niecza should fix that

[06:00] <quietfanatic> You're passing self as a positional to callwith

[06:00] <benabik> sorear: Lost all your tuits?  :-/

[06:00] <sorear> benabik: I have plenty of tuits, perl 6 is just -Ono-fun for me

[06:00] <benabik> sorear: Sadface.

[06:00] <benabik> But understandable.

[06:00] <sorear> i'm an apostate, I'm doing javascript dev now and I'm pretty sure it's a better language

[06:02] <benabik> Is it possible for a method in a class to modify the private attributes of another instance of the same class?

[06:02] <sorear> yes, using self := or an anonymous method

[06:02] <sorear> (method () { $!foo = 2})($other-instance);

[06:03] <dalek> ecosystem: 633ecab | (Brent Laabs)++ | META.list:

[06:03] <dalek> ecosystem: Adding File::Compare

[06:03] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/633ecab6fc

[06:03] <moritz> r: my $exes = ('x' x 10000).encode;  my $n = now; $exes eqv $exes; say now - $n;

[06:03] <p6eval> rakudo 5a1291: OUTPUT«3.2710394␤»

[06:04] <moritz> 0.024 on my machine now

[06:04] <moritz> let's see what p6eval says after rakudo was rebuilt

[06:04] <labster> how does that compare to .decode('Binary')?

[06:05] <labster> either way: much, much better.

[06:05] <benabik> Much uglier than rebinding self, but it works...

[06:05] <benabik> r: my class A { has $!b; method new(A:U: $b) { my $foo = callwith(); (method () {$!b = $b})($foo); $foo }; method foo() { $!b } };say A.new(4).foo

[06:05] <p6eval> rakudo 5a1291: OUTPUT«4␤»

[06:05] <benabik> sorear++

[06:05] <moritz> labster: it's now the same, within the nois of measuring such smallish times

[06:05] *** jferrero left
[06:05] <labster> cool

[06:06] <moritz> *noise

[06:07] *** topo joined
[06:07] *** jferrero joined
[06:07] <labster> Well, since I just pushed File::Compare, I might as well wait until the next R* release to change it.

[06:09] *** Garland_g left
[06:12] <nwc10> jnthn: All tests successful.

[06:15] *** quietfanatic left
[06:19] *** erkan joined
[06:19] *** erkan left
[06:19] *** erkan joined
[06:23] *** marloshouse_ joined
[06:24] *** marloshouse left
[06:25] *** marloshouse_ is now known as marloshouse

[06:29] *** uvtc joined
[06:34] *** erkan left
[06:34] *** zby_home joined
[06:35] <moritz> r: my $exes = ('x' x 10000).encode;  my $n = now; $exes eqv $exes; say now - $n;

[06:35] <p6eval> rakudo 8369e6: OUTPUT«0.0240546␤»

[06:35] <moritz> \o/

[06:35] <moritz> labster++ # File::Compare

[06:35] <labster> \o/ success

[06:36] <moritz> now that was a fun little speedup

[06:36] <labster> moritz++

[06:38] <labster> Trying to figure out what to do next.  Do I work on the file::find::duplicates thing that I originally started this for?  Or should I wonder off and make a CSV grammar since it's on the most wanted list?

[06:43] *** sevin joined
[06:57] <TimToady> nr: my $varname = 'foo'; $GLOBAL::($varname) = 42; say $GLOBAL::($varname);

[06:57] <p6eval> rakudo 8369e6: OUTPUT«No such symbol '$::GLOBAL::foo'␤  in method <anon> at src/gen/CORE.setting:10521␤  in  at src/gen/Metamodel.pm:2488␤  in any find_method_fallback at src/gen/Metamodel.pm:2476␤  in any find_method at src/gen/Metamodel.pm:925␤  in block  at /tmp/lAGj1mBa1s:1␤␤»…

[06:57] <p6eval> ..niecza v24-23-g0520c7c: OUTPUT«42␤»

[06:57] <TimToady> rakudobug

[06:59] *** uvtc left
[07:05] *** benabik left
[07:07] *** b1rkh0ff left
[07:11] *** wk joined
[07:19] *** b1rkh0ff joined
[07:55] *** fgomez left
[07:55] *** fgomez joined
[08:01] *** FROGGS_ left
[08:10] <moritz> labster: whatever you prefer :-)

[08:11] *** pupoque joined
[08:11] *** quester left
[08:17] *** krunen joined
[08:23] *** pupoque left
[08:25] *** sevin left
[08:29] *** pupoque joined
[08:34] *** daxim joined
[08:36] *** domidumont joined
[08:40] *** sqirrel joined
[08:47] *** domidumont left
[08:49] *** domidumont joined
[08:50] *** fhelmberger joined
[09:01] *** pupoque left
[09:04] *** thou left
[09:08] *** kresike joined
[09:09] <kresike> hello all you happy perl6 people

[09:13] <sorear> o/

[09:25] <nwc10> masak: http://www.bbc.co.uk/news/world-europe-21456388 # now Germany

[09:34] *** not_gerd joined
[09:34] <not_gerd> o/

[09:35] *** labster left
[09:37] <daxim> "tainted"? is it more than an untruthful labelling problem?

[09:37] <not_gerd> sorear: Javascript has some pretty serious flaws, among them scoping and the object system

[09:37] <daxim> work-arounds: coffeescript compiler and joose

[09:37] <not_gerd> in particular, the pseudo class-based layer on top of the internal prototype-based system does not come with a decent story of how to do code-reuse/object extension

[09:38] <nwc10> daxim: it's mostly the implications of an untruthful labelling problem - if it's not what it says it is, what else is wrong with it?

[09:38] <not_gerd> of course you can provide your own mechanisms on top of it, but they'll be a bit clumsy and non-standard

[09:39] <huf> coffeescript has real scope now?

[09:40] <huf> nah, still broken

[09:45] *** dakkar joined
[09:48] *** marloshouse left
[09:54] <jnthn> morning, #perl6

[09:54] <diakopter> hi

[09:55] <not_gerd> good morning

[09:57] <jnthn> .oO( what's people's beef with horsemeat... :P )

[09:59] <sjn> jnthn: that's just people making asses out of themselves :)

[10:05] <sjn> well, asses or donkeys. not sure

[10:06] <masak> good forenoon, #perl6

[10:06] <moritz> \o masak

[10:06] <sorear> good morning jnthn 

[10:10] * not_gerd wrote a mini-rant about Javascript targetted at sorear

[10:11] <jnthn> morning, sorear o/

[10:11] <arnsholt> Wow. Working with Unicode in Python is a massive pain

[10:12] <nwc10> whyso?

[10:12] <moritz> arnsholt: python2 or 3?

[10:12] <nwc10> This is in Python 2, or .. snap

[10:12] <not_gerd> bye, #perl6

[10:13] *** not_gerd left
[10:13] <masak> huf: it's easy to get real scope everywhere, even in vanilla JavaScript. just invoke an anonymous zero-arg function inside every block. ;)

[10:13] * sorear ignores it

[10:14] <huf> masak: sure sure :)

[10:14] <huf> or oozing "let", if it's a recent enough js :)

[10:15] <sorear> *sigh*

[10:15] <masak> moritz: why doesn't the eject symbol render properly in the irc logs?

[10:16] <diakopter> does in my font

[10:16] <arnsholt> moritz: Python 2

[10:16] <moritz> r: 1 1

[10:16] <p6eval> rakudo 8369e6: OUTPUT«===SORRY!===␤Two terms in a row␤at /tmp/VX59Wa9kB_:1␤------> 1 ⏏1␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infix stopper␤        statement end␤        statement modifier␤        statement modifie…

[10:17] <diakopter> wait nm, it doesn't anhymore

[10:17] <nwc10> isn't Python 3 meant to (re)solve most of the Unicode pain?

[10:17] <arnsholt> nwc10: At least in my Python this doesn't work properly: print u"hvæt!"

[10:17] <moritz> masak: seems like a very recent regression

[10:17] <diakopter> it worked at one point

[10:17] <masak> aye.

[10:17] <arnsholt> Yet another pain point along with the others

[10:21] *** SamuraiJack left
[10:22] *** marloshouse joined
[10:36] *** topo left
[10:45] *** salv0 left
[10:59] *** erkan joined
[10:59] *** erkan left
[10:59] *** erkan joined
[11:21] <nwc10> http://morepypy.blogspot.co.uk/2013/02/announcing-topaz-rpython-powered-ruby.html -- Classes are mostly written in Python.

[11:31] *** FROGGS joined
[11:33] *** MikeFair___ joined
[11:34] *** MikeFair_ left
[11:35] *** stevan_ left
[11:52] *** clkao left
[12:22] *** census joined
[12:26] *** census_ joined
[12:27] *** census__ joined
[12:28] *** census left
[12:30] *** clkao joined
[12:40] *** census_ left
[12:42] *** SamuraiJack joined
[12:46] *** stevan_ joined
[12:49] *** SamuraiJack left
[12:50] *** stevan_ left
[12:58] *** Targen left
[13:21] *** skids left
[13:25] <daxim> r: class MyFoo {}  sub quux(@array[MyFoo*]) {}  my $foo = MyFoo.new; my $bar = MyFoo.new; quux($foo, $bar);

[13:25] <p6eval> rakudo 8369e6: OUTPUT«===SORRY!===␤Two terms in a row␤at /tmp/rc3JGZ0TD1:1␤------> class MyFoo {}  ⏏sub quux(@array[MyFoo*]) {}  my $foo = M␤    expecting any of:␤        statement list␤        horizontal whitespace␤        postfix␤        infix or m…

[13:27] <FROGGS> r: class MyFoo {};  sub quux(@array[MyFoo*]) {};  my $foo = MyFoo.new; my $bar = MyFoo.new; quux($foo, $bar);

[13:27] <p6eval> rakudo 8369e6: OUTPUT«===SORRY!===␤Unable to parse expression in constraint; couldn't find final ']'␤at /tmp/sW5pEJ7RvB:1␤------> class MyFoo {};  sub quux(@array[MyFoo⏏*]) {};  my $foo = MyFoo.new; my $bar = ␤    expecting any of:␤        statement …

[13:27] <FROGGS> r: class MyFoo {};  sub quux(@array[MyFoo]) {};  my $foo = MyFoo.new; my $bar = MyFoo.new; quux($foo, $bar);

[13:27] <p6eval> rakudo 8369e6: OUTPUT«Nominal type check failed for parameter '@array'; expected Positional but got MyFoo instead␤  in sub quux at /tmp/u0VbAX_a14:1␤  in block  at /tmp/u0VbAX_a14:1␤␤»

[13:28] *** FROGGS left
[13:29] <[Coke]> r: say "good news, everyone!"

[13:29] <p6eval> rakudo 8369e6: OUTPUT«good news, everyone!␤»

[13:29] <[Coke]> . o O (no, there is no actual good news. carry on.)

[13:32] <jnthn> @array[MyFoo] actually parses as @array [MyFoo] which means "take an array, unpack it, and make sure it has a single element of type MyFoo"

[13:32] *** betterwo1ld left
[13:33] *** betterworld joined
[13:34] *** dukeleto left
[13:34] *** dukeleto joined
[13:35] <moritz> which you'd all know if you'd read my latest blog post :-)

[13:45] <daxim> what's the syntax for "any number of MyFoo"?

[13:45] <daxim> specific: each one must isa MyFoo?

[13:46] <pmichaud> daxim:  in  a signature?  not sure there is a syntax for that.

[13:46] <huf> does MyFoo @array mean anything? :)

[13:47] <huf> that specifies the type of the @array, right?

[13:47] <pmichaud> the constraint on elements in the array

[13:47] <pmichaud> (the type of the array would be   Array of MyFoo)

[13:48] <jnthn> You can write MyFoo @array. However, it's a nominal type check.

[13:48] <huf> can you have something other than Array with sigil @, and how do you constrain a signature to that? :)

[13:48] <jnthn> This means that you must pass in something *declared* as a MyFoo @x

[13:49] <pmichaud> sigil @ implies Positional

[13:49] <Ulti> what about pushing onto that array afterwards?

[13:49] <huf> pmichaud: aha!

[13:50] <jnthn> *@a where @a >>~~>> MyFoo  # one way to take an arbitrary number of arguments that must be all of type MyFoo

[13:50] <pmichaud> also means that @a is not lazy :-)

[13:50] <jnthn> It'd best not be if you're gonna do that :)

[13:50] *** kaleem left
[13:50] <pmichaud> well, it won't be after doing that :)

[13:50] <jnthn> Well, it can be lazy, but it'd better be finite :)

[13:50] <huf> it would be weird to die with an invalid param error in the middle of the sub :D

[13:51] <daxim> aha, a where thing

[13:51] <daxim> I like that

[13:51] <jnthn> In general, the rule is that if you're going to do typed arrays in the signature, you need to pass typed arrays as the parameter.

[13:51] <pmichaud> s/parameter/argument/

[13:51] <jnthn> uh, sorry, yes :)

[13:56] <dalek> perl6-roast-data: 4d58af9 | coke++ | bin/rakudo.sh:

[13:56] <dalek> perl6-roast-data: some spectests cause rakudo to require LANG

[13:56] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/4d58af9671

[13:58] <[Coke]> hopefully that will help rakudo test clean.

[13:59] * moritz hopes so too

[14:00] <Ulti> am I right in thinking there is a mechanism in Perl6 to specify a type which means castable to a type? or did I just imagine this?

[14:00] <Ulti> so something has to be castable to an Int, do you just specify the type (Int) in the signature?

[14:01] <pmichaud> I'm not aware of a "castable to type" constraint that doesn't involve 'where'

[14:02] <Ulti> ok I must have just daydreamed this

[14:02] <moritz> no

[14:02] <moritz> there's a spec for that

[14:02] <moritz> it's just NYI

[14:02] <pmichaud> there's a spec that says "cast to Int"

[14:02] <moritz> erm, wait, no

[14:02] <moritz> I'm confused

[14:02] <pmichaud> but not "castable to Int"

[14:03] <moritz> right, you can say Cool(Int) (or was it the other way round) for 'accept Cool, cast to Int'

[14:03] <moritz> but that's not the same as 'castable to Int'

[14:03] <Ulti> right

[14:03] *** dukeleto left
[14:03] <pmichaud> well, one could probably create a subset type

[14:03] *** dukeleto joined
[14:04] <pmichaud> subset Intable of Any where ....

[14:04] <pmichaud> but I guess that still involves 'where'  :-)

[14:04] <moritz> where { (try .Int) ~~ Int }

[14:05] <Ulti> I think I've probaly confused the cast to Int for a test

[14:05] <Ulti> or at least some mythical shadow type for every type which means the type of things that can be casted to the partner type

[14:06] <Ulti> I think if I saw some code where someone had created Intable Realable Stringable etc. I'd want to kill them

[14:06] <pmichaud> that makes them Dieable, I guess.

[14:07] <Ulti> especially in a language thats already dynamically typed by default

[14:07] <Ulti> haha

[14:07] <Ulti> Sackable

[14:07] *** PacoAir joined
[14:07] <pmichaud> http://perlcabal.org/syn/S02.html#Coercive_type_declarations

[14:08] *** ObseLeTe joined
[14:09] <PerlJam> good $localtime sixers

[14:09] <Ulti> yeah that's what I had read, sorry for the confusion

[14:09] <pmichaud> Ulti: no problem, we all get confused.  :)

[14:11] <pmichaud> I better get back to housecleaning :-/   bbl

[14:12] <Ulti> im assuming within a given class heirarchy you dont have to write explicit coercion routines? so if my wide type is a parent of the narrow type?

[14:13] <moritz> well, if an object already meets a type constraint, there will be no coercion.

[14:14] <PerlJam> Ulti: if you want you Num to coerce to an Int via rounding rather than truncation, you'll probably want to be explicit about that  :)

[14:15] <Ulti> well the child might have some more data that needs to be initialised to some default for example

[14:15] <PerlJam> s/you/your/

[14:15] <Ulti> right

[14:15] <moritz> well, that's from wider to narrower

[14:15] <moritz> so the wider object doesn't meet the narrower type constraint

[14:16] *** bluescreen10 joined
[14:17] <Ulti> erk bbl have to meet someone at the train station!

[14:19] <masak> also, "erk bbl" would make a good name for a punk band.

[14:19] *** tianhua left
[14:21] *** Psyche^ joined
[14:22] <dalek> perl6-roast-data: 9d02ee4 | coke++ | README:

[14:23] <dalek> perl6-roast-data: Explain why the test harness might not be green.

[14:23] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/9d02ee421f

[14:23] <jnthn> Darn unenvironmental test harness...

[14:24] *** SamuraiJack joined
[14:24] <[Coke]> there, that hopefully helps to answer why rakudo hasn't been passing its test suite. 

[14:24] *** Patterner left
[14:24] *** Psyche^ is now known as Patterner

[14:24] <jnthn> [Coke]++

[14:24] *** slavik1 left
[14:25] *** slavik1 joined
[14:28] *** Targen joined
[14:31] <masak> rn: $_ = 'foo'; /(o+)/; say $0

[14:31] <p6eval> rakudo 8369e6, niecza v24-23-g0520c7c: OUTPUT«Any()␤»

[14:31] <masak> my expectations here are 'oo'

[14:31] <masak> any second opinion?

[14:31] <jnthn> m

[14:32] <masak> that's a very short opinion. :P

[14:32] <jnthn> rn: $_ = 'foo'; m/(o+)/; say $0

[14:32] <p6eval> rakudo 8369e6, niecza v24-23-g0520c7c: OUTPUT«｢oo｣␤␤»

[14:32] <masak> oh :)

[14:32] <masak> thank you. :>

[14:33] <PerlJam> masak: though, that's a subtle problem if it tripped you up  :)

[14:33] <masak> yeah, I tend not to care about the 'm' in 'm//'

[14:33] <masak> it works in a lot of places without it.

[14:34] <PerlJam> maybe make // in sink context DTRT or carp about it

[14:34] <masak> rn: $_ = 'foo'; say "huzzah!" if /o+/

[14:34] <p6eval> rakudo 8369e6, niecza v24-23-g0520c7c: OUTPUT«huzzah!␤»

[14:34] <masak> ...for example.

[14:34] <masak> also DTRT in grep.

[14:35] <jnthn> Boolification triggers it to match.

[14:35] <jnthn> (in the grep case)

[14:35] <jnthn> (and the if one)

[14:35] <jnthn> mebbe sink should also :)

[14:35] <masak> PerlJam: sink context sounds like an interesting venue. but I almost wrote /.../ or die "won't match!";

[14:36] <masak> ...but I guess that's boolean context ;)

[14:36] *** slavik1 left
[14:36] *** slavik1 joined
[14:36] <jnthn> rn: $_ = 'foo'; /o+/ or die "painfully"

[14:36] <p6eval> rakudo 8369e6, niecza v24-23-g0520c7c:  ( no output )

[14:36] <jnthn> Indeed.

[14:37] <moritz> note that  $str.split(m//) doesnt do what you think

[14:37] <moritz> it first calls the m// on $_, and then passes the Match object to $str.split

[14:39] *** sergot joined
[14:39] <sergot> hi ! o/

[14:40] <masak> sergocie! \o/

[14:40] *** slavik1 left
[14:40] *** slavik1 joined
[14:41] <sergot> masaku \o/ !

[14:41] <masak> moritz: I... I'm already thinking it does that. :)

[14:41] <jnthn> o/ sergot 

[14:46] *** dukeleto left
[14:46] <sergot> \o jnthn 

[14:46] *** dukeleto joined
[14:56] *** ObseLeTe left
[14:58] <pmichaud> /o+/  is a Regex,   m/o+/  invokes a Regex on $_

[14:59] <pmichaud> so   $str.split(m//)  does exactly what I think  :-)

[15:00] *** wk left
[15:00] <masak> pmichaud: yes, exactly ;)

[15:00] <pmichaud> in the grep case, matching is caused by the fact that the argument to grep is a matcher  :-)

[15:01] <masak> well, depends if you do { /.../ } or /.../

[15:01] <pmichaud> it's not boolification that does it there, it's .ACCEPTS  (or ~~ )

[15:02] <PerlJam> I think it's more a case of "different things should look different".   // vs m//  puts an aweful lot of stock in that "m"  :)

[15:02] *** kaleem joined
[15:04] <masak> PerlJam: well, it gets tricky. a fiver might expect 'foo' ~~ m/oo/ to do something sensible, but it doesn't.

[15:04] *** stopbit joined
[15:04] <masak> (because the 'm' does one matching and the '~~' does another)

[15:05] <PerlJam> right.  That's the sort of thing that Perl 6 should provide helpful suggestions for (just like it already does for other p5isms)

[15:06] <pmichaud> std:  $_ = 'foo';  /oo/;  say $0

[15:06] <p6eval> std 7551b8f: OUTPUT«ok 00:00 44m␤»

[15:06] <masak> #perl6 /oo/

[15:07] <pmichaud> oh, ouch.

[15:07] <masak> pmichaud: presumably it would be caught by an (already planned) "value in void context" warning...

[15:07] *** CharellKing joined
[15:08] <pmichaud> https://gist.github.com/pmichaud/4953406  # ouchies in S05

[15:08] <masak> oh, ouch.

[15:08] <masak> S05 totally isn't aware of this problem :)

[15:09] <masak> moritz++ has been talking about it for *years*.

[15:09] <jnthn> r: my $string = "123"; if $string ~~ m/^ \d+ $/ { say 42 }

[15:09] <p6eval> rakudo 8369e6: OUTPUT«42␤»

[15:09] <jnthn> r: my $string = "abc"; if $string ~~ m/^ \d+ $/ { say 42 }

[15:09] <p6eval> rakudo 8369e6:  ( no output )

[15:10] <pmichaud> fwiw, S05 says that /.../  should match immediately in void context

[15:10] <pmichaud> (sink context)

[15:10] <pmichaud> which would've resolved masak++'s issue above

[15:10] <masak> \o/

[15:10] * masak submits rakudobug

[15:10] <pmichaud> S05:2271

[15:11] <jnthn> Note that the two I just showed do work because (a) ~~ places the LHS into $_ before evaluating the RHS, and (b) because Match has multi method ACCEPTS(Match:D: Any $) { self }

[15:11] <jnthn> (a) feels reasonable and (b) feels like it probably gets us in trouble somewhere else :)

[15:12] <pmichaud> oh, interesting.

[15:12] <pmichaud> well, smart matching against a Match object returns the Match object.  Works for me.

[15:12] <masak> yeah, I was about to suggest that as a solution, so... wfm too :P

[15:12] <CharellKing> it's intersting

[15:12] <pmichaud> if you want to match against the string value of the match object, use ~

[15:13] <jnthn> Hm, I can't immediately think of a case where (b) is a problem.

[15:13] <pmichaud> right

[15:13] <masak> CharellKing: greetings. who are you in our midst? and how can we serve you?

[15:13] <pmichaud> returning the match object seems less problematic to me than other options

[15:13] <jnthn> *nod*

[15:14] <pmichaud>     Any       Match     match success           X

[15:14] <pmichaud> so S03 already explicitly lists this, also :)

[15:14] <jnthn> \o/

[15:14] <jnthn> It's almost as if it's designed or soemthing :)

[15:14] <pmichaud> almost.

[15:14] <pmichaud> :)

[15:14] <pmichaud> back to housecleaning... :-/

[15:17] *** alec__ left
[15:29] *** kaare_ joined
[15:31] *** CharellKing left
[15:36] *** stevan_ joined
[15:37] *** SunilJoshi joined
[15:44] <[Coke]> Anyone else seeing this failure?

[15:44] <[Coke]> S32-io/IO-Socket-INET.t 21 - successful received binary data

[15:45] *** CharellKing joined
[15:48] <census__> huf: are you around?

[15:49] *** spider-mario joined
[15:50] *** dukeleto left
[15:50] *** dukeleto joined
[15:51] <masak> http://shadow.cat/blog/matt-s-trout/names-and-numbers/ -- mst++

[15:51] <jnthn> There's a .cat TLD?! :)

[15:55] *** SamuraiJack left
[15:55] *** skids joined
[15:56] <masak> WHY HAVEN'T I BEEN TOLD

[15:57] <[Coke]> .ye .sd .id .net .uk .no ?

[15:58] <masak> :P

[15:59] <mst> jnthn: for the catalan language and culture

[15:59] <kresike> bye folks

[15:59] *** kresike left
[15:59] <mst> jnthn: hence why we sponsored barcelona.pm to translate some moose stuff into catalan

[15:59] <jnthn> mst: oooh :)

[16:03] * masak .oO( in Perl 6 you just do $english.Cat ... ) :P

[16:04] <[Coke]> r: say 3.cat

[16:04] <p6eval> rakudo 8369e6: OUTPUT«No such method 'cat' for invocant of type 'Int'␤  in block  at /tmp/wYNqQVUFOe:1␤␤»

[16:04] <[Coke]> r: say "a".cat

[16:04] <p6eval> rakudo 8369e6: OUTPUT«No such method 'cat' for invocant of type 'Str'␤  in block  at /tmp/LaCFvH3I4A:1␤␤»

[16:05] * jnthn has now actually read the post :)

[16:05] <jnthn> mst++

[16:06] <sjn> heh

[16:06] *** sizz joined
[16:06] <sjn> seems the name-and-number thing won't go away

[16:07] *** sizz_ left
[16:07] <masak> r: use MONKEY_TYPING; augment class Str { method Cat { "un" } }; say "a".Cat

[16:07] <p6eval> rakudo 8369e6: OUTPUT«un␤»

[16:07] <sjn> Why not just rename "Perl5 version 16" to "Pearl version 16" :-P

[16:08] <nwc10> and google says "did you mean"... :-)

[16:08] <masak> sjn: because the binary is called 'perl'.

[16:09] <mst> sjn: I'm suggesting 'Pumpkin Perl version 16'

[16:09] <mst> sjn: which has the same effect, except without needing to rename the binary or any of the other stupidity associated with every other suggestion I've seen

[16:09] <masak> suddenly I'm looking at that proposal, thinking "hey, this could *actually work*"

[16:10] <masak> which hasn't happened with any other proposal up until now.

[16:10] <[Coke]> nwc10: "Pearl version 16" -> pokemon perl. :(

[16:10] <perigrin> You'd have to release Diamond v. 16 as well

[16:10] <[Coke]> "oh, look, perl finally turned into a pumpkin."

[16:10] <[Coke]> mst++ ;)

[16:10] <atrodo> [Coke]: Gotta catch 'em all

[16:11] * masak .oO( gotta bikeshed 'em all )

[16:11] <perigrin> we already do.

[16:11] <atrodo> masak++

[16:12] <mst> masak: that was precisely the reaction I was hoping for :)

[16:12] <perigrin> I liked it better when you were trying to brand us with a Veolociraptor 

[16:13] <perigrin> :)

[16:13] <masak> mst: I'm not primarily a fiver, so it's not my call at all. but I like pumpins, and "pumkin perl" rolls easily off the tongue.

[16:13] <TimToady> .oO(use p20;)   :)

[16:13] <masak> mst: and, it's mostly an *outward* thing, to unconfuse outsiders.

[16:14] * nwc10 wonders what acme makes of http://www.colorcombos.com/colors/FF9933

[16:14] <mst> masak: precisely

[16:14] <mst> TimToady: oooh, I like that :)

[16:14] <nwc10> that's neither v nor r. That's a feature

[16:14] <masak> ...which makes sense, 'cus it's the same outsiders that have a problem with "5 < 6".

[16:15] <nwc10> and leaves q for, well :-)

[16:15] <pmichaud> nqp already lays claim to "q"  :-)

[16:15] <TimToady> Mind your p's and q's, young man!

[16:15] <nwc10> the rightful owner. ish

[16:16] <masak> "Perl 7? p2? I'll *give* you version numbers! look here, I have entirely new *axes* to number!" -- I love you guys.

[16:16] <jnthn> QAST. QRegex. NQP. Gee, I really messed up by not calling it Qmodel... :)

[16:16] <TimToady> 6 is about 180° off from q

[16:17] <masak> obviously, Qmodel is what you'd use to implement Perl Q.

[16:18] <masak> Perl 6's evil half-sister.

[16:18] <jnthn> .oO( I used to be bad at math, but I did a 360 in that! )

[16:18] <masak> mwhahaha!

[16:18] <nwc10> and then we get to Perl M and Perl 007? and we're back to the problem we started with?

[16:18] <masak> PHP is unintentionally painful. Perl Q knows *precisely* what it's doing when it's causing you anguish and distress. :D

[16:19] <masak> nwc10: not at all, because 007 is octal, so it translates to... um. nevermind.

[16:19] <nwc10> r: say 007

[16:19] <p6eval> rakudo 8369e6: OUTPUT«7␤»

[16:19] <TimToady> .oO(it's possible to have an twin half-sister, but only if your *mother* was evil...)

[16:19] <nwc10> r: say 042

[16:19] <masak> std: say 007

[16:19] <p6eval> rakudo 8369e6: OUTPUT«42␤»

[16:19] <p6eval> std 7551b8f: OUTPUT«Potential difficulties:␤  Leading 0 does not indicate octal in Perl 6; please use 0o07 if you mean that at /tmp/4eFVzDIFgW line 1:␤------> say 007⏏<EOL>␤ok 00:00 41m␤»

[16:19] <grondilu> what's "Perl Q"??

[16:19] <nwc10> oh righto. I was more expecting what std said

[16:20] <masak> is this one rakudobug'd?

[16:20] <masak> grondilu: we're just having a laugh. ignore us.

[16:20] <grondilu> ok

[16:20] <TimToady> we *are* a laugh, is more like it

[16:20] <TimToady> so pity us :)

[16:20] <nwc10> masak: I have no idea. You're the expert

[16:20] * masak lookups

[16:21] <census__> Huf: are you around?

[16:22] <huf> census__: not for you, no.

[16:22] <census__> huf: I did some learning!!

[16:22] <masak> yes: https://rt.perl.org/rt3/Ticket/Display.html?id=80982

[16:22] <census__> I just wanted to tell you that.   Not ask you a question

[16:22] <census__> Thank you.

[16:22] <census__> I found the network tab.  And was successful in doing a lot after that.

[16:23] <[Coke]> \o/

[16:23] <TimToady> census++ for taking a growth action, which we all need to do at least occasionally...

[16:23] <masak> census__: some learning is indeed cause for celebration. congratulations. I salute you.

[16:24] <census__> thank you masak.  i wish huf would feel similarly.  i wanted to thank him so much.

[16:24] <census__> i have some very bad questions sometimes but how computers work.

[16:24] <TimToady> well, don't overdo it

[16:24] <masak> census__: no need to bother huf if he's not ready.

[16:24] <nwc10> masak: it even has a patch

[16:25] <nwc10> not that that means that the patch applies. Or still applies, as the case may be

[16:25] <census__> timtoady: don't learn too much ??

[16:25] <census__> "well, don't overdo it"

[16:25] <masak> census__: no, don't overdo it trying to get back to people you annoyed yesterday.

[16:25] <PerlJam> census__: learn as much as you can ... just don't blather on about it :)

[16:25] <TimToady> you can make someone mad by thanking them too much too

[16:26] <masak> "don't be sorry, be quiet!" -- "we're sorry!!!"

[16:26] <masak> ah, Space Balls. :D

[16:28] * PerlJam tries to golf the thanking reaction ...

[16:28] <PerlJam> [#perl6] TimToady: "Thank you" for Perl 6!    # punctuation is far too subtle here though  :)

[16:28] <PerlJam> oops, dunno how that [#perl6] got in there.

[16:29] <TimToady> census__: this is an ancient principle: http://www.biblegateway.com/passage/?search=Proverbs+27:14&version=NIV

[16:29] <masak> PerlJam: the punctuation intrigues me.

[16:29] <census__> thank you timtoady

[16:29] <masak> PerlJam: so, you're "thankful", are you? :P

[16:32] <masak> TimToady: especially if the blessing is "May my neighbor live in interesting times. May he come to the attention of those in authority." :D

[16:32] *** kaleem_ joined
[16:33] *** domidumont left
[16:34] *** kaleem left
[16:37] *** orafu joined
[16:41] <TimToady> speaking of interesting times, Perl 6 just passed up BBC BASIC on rosettacode; next victim is Haskell, and then Perl 5^W^WPumpkin Perl

[16:42] *** MikeFair___ left
[16:42] *** Targen left
[16:42] *** xenoterracide left
[16:43] *** MikeFair joined
[16:43] <masak> TimToady++

[16:44] *** xenoterracide joined
[16:44] <jnthn> BBC BASIC! \o/

[16:44] <jnthn> Gee, it's been almost 20 years since I programmed anything in that...

[16:44] *** xenoterracide left
[16:45] *** xenoterracide joined
[16:47] <masak> r: my $pumpkin_perl_birth = Date.new("1987-12-18"); my $perl6_birth = Date.new("2000-07-18"); my $age_of_pumpin_at_p6_birth = $perl6_birth - $pumpkin_perl_birth; say my $when_pumpkin_is_twice_p6s_age = $perl6_birth + $age_of_pumpin_at_p6_birth

[16:47] <p6eval> rakudo 8369e6: OUTPUT«2013-02-16␤»

[16:47] <masak> whoa.

[16:47] <masak> that's... the day after tomorrow! :D

[16:47] <masak> I resolve to blog on that day.

[16:48] <au> . o O (a blog for overmorrow)

[16:48] <masak> phenny: sv en "övermorgon"?

[16:48] <phenny> masak: "tomorrow" (sv to en, translate.google.com)

[16:49] <masak> phenny: no, it means "day after tomorrow" :)

[16:51] *** thou joined
[16:51] *** dukeleto left
[16:52] *** dukeleto joined
[16:56] *** Targen joined
[16:56] *** wk joined
[17:05] *** daxim left
[17:09] *** Targen left
[17:12] <TimToady> Never put off till tomorrow that which you can put off till the overmorrow...

[17:12] *** mtk joined
[17:13] * TimToady wonders if "tomorrow" is a shortening of "the morrow"...

[17:15] <TimToady> no, OE could use 'to' as a dative meaning 'at' or 'on'

[17:16] <census__> french has a word for this, for example: le lendamain.

[17:16] <census__> maybe some cultures like to do things the day after tomorrow? :)

[17:16] <TimToady> asatte is 'day after tomorrow' in Japanese

[17:17] <PerlJam> I read that as "asshat" at first.

[17:18] * pmichaud wishes he hadn't visualized that.

[17:19] * TimToady wishes pmichaud hadn't made him visualize that :P

[17:19] * jnthn is glad it was covered by a hat

[17:19] <TimToady> you just had to cap it, didn't you?

[17:20] <pmichaud> oddly, I doubt it comes out on top.

[17:21] * TimToady wanders off to the shower without a shower cap of either sort... &

[17:21] *** djanatyn left
[17:21] <PerlJam> and you don't want to know what comes out on bottom.

[17:26] <masak> a hat, obviously.

[17:29] *** kaleem_ left
[17:31] *** kaleem joined
[17:32] *** domidumont joined
[17:33] <census__> english-speaking countires are more uptight and don't do things the day after tomorrow?  is that the lesson to be learned?

[17:35] <jnthn> I'd answer that but...mañana.

[17:36] <huf> "day after tomorrow" is a word, as words go i english.

[17:36] <huf> english likes to write words with spaces inside

[17:37] *** Shozan is now known as SHODAN

[17:38] *** Chillance joined
[17:39] <jnthn> aye, making for confusion over whether it's  "I shot two holes in one at golf" vs "I shot two hole in ones at golf"

[17:39] *** kaleem left
[17:39] <huf> :)

[17:43] <census__> huf = day after tomorrow is not in the direction

[17:43] <huf> that made no sense

[17:44] <huf> but maybe you meant dictionary

[17:44] <huf> http://en.wiktionary.org/wiki/day_after_tomorrow

[17:45] *** FROGGS joined
[17:46] *** djanatyn joined
[17:50] <masak> jnthn: that one *is* tricky.

[17:51] <jnthn> masak: iirc, Pinker addresses it in one of his books

[17:51] <PerlJam> nah, there's just a spelling problem ...  "I shot two hole-in-ones at golf"

[17:51] <masak> jnthn: yes, it feels like something Pinker would address :)

[17:51] <masak> typical lexicalization.

[17:52] <masak> jnthn: prolly "The Language Instinct".

[17:52] <masak> PerlJam: that thought crossed my mind, too.

[17:52] <jnthn> PerlJam: That's great apart from http://www.bbc.co.uk/news/uk-england-derbyshire-20779806 :)

[17:53] <jnthn> Which spells it with hyphens but still puts the s in the other place

[17:53] <huf> what if all of these are correct?

[17:53] <huf> i know we lose the ability to correct people who do it "wrong", but ... 

[17:53] <huf> there's so many other ways to do that

[17:53] <masak> ..."mothers-in-law", "attorneys general"... :)

[17:53] <PerlJam> "correct" doesn't matter as long as the idea is communicated effectively.

[17:54] <masak> PerlJam: well, yeah. but it becomes a slippery slope.

[17:54] <huf> PerlJam: but how do you communicate that effectively? :)

[17:54] <moritz> PerlJam: somehow teachers always disagree with that

[17:54] <PerlJam> That's all words are anyway ... a vehicle for conveying ideas from one brain to another

[17:54] <masak> PerlJam: if we have *no* correction, ever, then communication becomes... difficult...

[17:54] <huf> PerlJam: i think it's actually more suited to syncing two brains

[17:54] <huf> live conversations are often like sending diffs around

[17:54] <masak> heh.

[17:54] <masak> huf++

[17:55] <huf> hence real live conversations are always made of awful antigrammatical fragments

[17:55] <huf> now a linguist better correct me ;)

[17:55] <PerlJam> "antigrammatical" is an odd word.

[17:55] <masak> all of you should read the later Wittgenstein.

[17:55] <huf> i know. i made it up to mean "more than ungrammatical"

[17:55] <masak> he talks about this.

[17:55] <huf> or whatever the usual word is ;)

[17:56] <masak> 'The later Wittgenstein rejected many of the conclusions of the Tractatus, arguing that the meaning of words is constituted by the function they perform within any given language-game.'

[17:56] * moritz wonders how masak and himself keep in sync, considering that we don't send more diffs than the others here in the channel

[17:56] <PerlJam> huf: but they /are/ grammatical.   It's just that the normal rules of grammar have been temporarily suspended in favor of more local rules.

[17:56] <huf> :)

[17:56] <huf> ah yes

[17:57] <census__> i did not say wikipedia

[17:57] <census__> i meant a webster's dictionary

[17:57] <huf> you said "direction"

[17:57] <huf> and i did not paste wikipedia.

[17:57] <masak> moritz: I can only speak for myself, but I've seen you react to so many situations on this channel, that I can often (partially, at least) simulate and predict them.

[17:57] <huf> you've got moritz checked out in your own head

[17:58] <masak> moritz: this is distinct but not all that different from how I can simulate good AFK friends.

[17:58] *** zby_home left
[17:58] <masak> huf: I most definitely do.

[17:58] <masak> and he has a copy of me.

[17:58] <masak> s/copy/clone/

[17:58] <PerlJam> masak, moritz: the two of you are simulations of each other?

[17:58] <PerlJam> :)

[17:58] <masak> yup :)

[17:58] <masak> well, no.

[17:59] <masak> we haz simulations of each other.

[17:59] <huf> "haz" :D

[17:59] *** dakkar left
[17:59] <huf> hazing has been prohibted, no?

[17:59] <PerlJam> It's the whole mimicry things that's hard-wired into our brains.  

[17:59] <[Coke]> oh, duh. I can nominate TPF to get matching donation money from $DAYJOB.

[17:59] <PerlJam> Sometimes we let it loose, other times we keep it locked up.

[18:00] <masak> PerlJam: like this: https://en.wikipedia.org/wiki/Mirror_neuron

[18:00] <PerlJam> yes.

[18:01] <masak> awwww! https://en.wikipedia.org/wiki/File:Makak_neonatal_imitation.png

[18:01] *** SunilJoshi left
[18:01] <huf> heh

[18:01] <PerlJam> Mimicry is the basis of Hofstadter's work in Fluid Concepts and Creative Analogies.

[18:02] <masak> the book is now on my (too long) Amazon wishlist.

[18:03] <geekosaur> .oO { masak neonatal imitation? }

[18:04] <huf> better than prenatal

[18:06] <[Coke]> speaking of amazon wishlists, have you crushed my dreams yet?

[18:09] *** Patterner left
[18:11] <masak> working on it.

[18:11] <masak> as we speak.

[18:12] *** rindolf joined
[18:12] <rindolf> Hi all.

[18:12] <masak> rindolf: greetings, earthling.

[18:13] <rindolf> masak: greeting from the Q Continuum.

[18:13] <rindolf> masak: how's life on planet Earth?

[18:14] *** Psyche^ joined
[18:14] *** Psyche^ is now known as Patterner

[18:14] <masak> linear.

[18:15] <masak> I have to travel *forwards* in time, one second per second. so boring.

[18:16] <moritz> maybe it's just your perception of time that's linear

[18:17] <moritz> it could well be that your speed through time varies, and occasionally goes backward

[18:17] <moritz> but since your brain also goes backwards through time, you can't make any memories of it

[18:18] *** spider-mario left
[18:19] <moritz> the real question isn't whether you can travel through time, but whether you can travel through time at a different rate than your surroundings

[18:20] <rindolf> Heh.

[18:21] <rindolf> I think time is nature's way of progressing from the somewhat-imperfect to the somewhat-less-imperfect.

[18:21] <rindolf> Anyway, what's new in the Perl 6 world?

[18:22] <rindolf> I skimmed over chromatic's "I'm quitting" message.

[18:22] <moritz> oh, is he quitting again?

[18:22] * moritz ignores that troll

[18:22] <masak> rindolf: this one http://www.modernperlbooks.com/mt/2013/02/goodnight-parrot.html ?

[18:22] <PerlJam> It wasn't so much "I'm quitting" as "Parrot is Dead" 

[18:22] <masak> rindolf: it isn't really him quitting. he quit Parrot long ago.

[18:23] <PerlJam> (I mean, he'd already quit)

[18:23] <rindolf> masak: ah.

[18:23] <masak> rindolf: I don't really see how Parrot affects the progress of Perl 6 one way or another at this point.

[18:23] <masak> rindolf: all I can say is a BIG *phew* that we are at the point where it doesn't affect the progress of Perl 6 one way or another.

[18:24] <rindolf> masak: ah, OK.

[18:24] <PerlJam> rindolf: so ... what's new is that we've had to endure people asking about Perl 6 because of chromatic's post :)

[18:24] <rindolf> masak: well, anything more concrete like code?

[18:24] <rindolf> PerlJam: heh, heh.

[18:24] <masak> rindolf: yes.

[18:24] <masak> rindolf: the nqp-jvm port.

[18:24] <masak> is coming along fine.

[18:24] <masak> jnthn++

[18:24] *** jdv79 left
[18:25] * diakopter wonders if I should backlog

[18:25] <nwc10> rindolf: git clone git://github.com/jnthn/nqp-jvm-prep.git && cd nqp-jvm-prep && make test

[18:25] <[Coke]> and recent parrot talk has poke some people to see if we can perhaps trim parrot down a bit to make it more efficient for rakudo.

[18:25] <jnthn> Most significant news there is that the regex compiler porting is currently in progress.

[18:25] *** anuby left
[18:26] *** anuby_ joined
[18:26] <PerlJam> [Coke]: did you see my query about the upcoming Parrot release on #parrot?

[18:27] <jnthn> I've ported just about all the stuff in the regex compiler I can without having to sort out the backtracking. :)

[18:27] <nwc10> who needs backtracking?

[18:28] <masak> diakopter: today's backlog is Safe For Blood Pressure. :)

[18:29] <nwc10> may contain bad puns

[18:29] <TimToady> if there are puns, they are by definition bad

[18:29] *** Patterner left
[18:31] *** Psyche^ joined
[18:31] *** Psyche^ is now known as Patterner

[18:32] * TimToady 's blood pressure is quite a bit lower than earlier this week, 118/84 at the moment

[18:32] * TimToady hit 140/98 at the Dr's office

[18:33] *** proller_ joined
[18:34] <diakopter> Dr's offices will do that to you

[18:34] *** Patterner left
[18:39] *** kst left
[18:40] <diakopter> no one's used the named Perl 0 ?

[18:42] *** Psyche^ joined
[18:42] *** Psyche^ is now known as Patterner

[18:44] <rjbs>        Perl history in brief, by Larry Wall:

[18:44] <rjbs>            Perl 0 introduced Perl to my officemates.

[18:44] * masak had the same thought :)

[18:44] <diakopter> oh

[18:45] <diakopter> jnthn: I did a one-char nqp-jvm patch; is it right?

[18:46] *** uvtc joined
[18:48] <jnthn> diakopter: Yes, looks right to me.

[18:48] <diakopter> oh goody; confidence++

[18:53] *** arlinius left
[18:58] <pmichaud> PerlJam: (parrot release)  fwiw, NQP is currently tied to Parrot 4.10.0, and I doubt we'll bump it this month.

[18:59] <pmichaud> so a Parrot 5.1.0 release (or the lack of one) isn't likely to affect Rakudo/NQP much.

[19:02] <moritz> pmichaud: fwiw I have an nqp branch that makes nqp build with a prefix (or build dir) that contains a space, but it requires a newer parrot

[19:02] <moritz> might be worth bumping the version

[19:02] <pmichaud> that would be worth a bump, yes.

[19:02] *** not_gerd joined
[19:02] <moritz> I haven't managed to build rakudo yet with a spacey prefix

[19:16] <dalek> nqp: 8282ac5 | moritz++ | tools/lib/NQP/Configure.pm:

[19:16] <dalek> nqp: Small preparation to allow paths with spaces

[19:16] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8282ac5755

[19:16] <dalek> nqp: ae3b47d | moritz++ | tools/ (2 files):

[19:16] <dalek> nqp: more fixes to allow spacey paths

[19:16] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ae3b47dabe

[19:16] <dalek> nqp: 1db6167 | moritz++ | tools/ (2 files):

[19:16] <dalek> nqp: Merge remote-tracking branch 'origin/spacey'

[19:16] <dalek> nqp: 

[19:16] <dalek> nqp: This enables NQP to build with source path and/or prefix containing

[19:16] <dalek> nqp: spaces, given a sufficiently new parrot (RELEASE_5_0_0-8-g6ab9fdc).

[19:16] <dalek> nqp: On older parrots, nothing should be broken. I hope. (Famous last words).

[19:16] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1db6167740

[19:18] *** stevan_ left
[19:21] *** japhb_ joined
[19:26] *** fhelmberger left
[19:26] *** sqirrel left
[19:31] <rindolf> TimToady: hi, here?

[19:32] <rindolf> rjbs: hi, did not know you were here.

[19:32] *** FROGGS left
[19:32] <rjbs> I blend in.

[19:33] *** arlinius joined
[19:33] <nwc10> does it blend? :-)

[19:34] *** mtk left
[19:35] <uvtc> He speaks a dozen languages. Knows all the local customs. Has contacts in every town from here to the Sudan.

[19:35] <rindolf> uvtc: heh.

[19:35] <rindolf> uvtc: nice Indiana Jones reference.

[19:35] <not_gerd> well, we knoe how that one worked out ;)

[19:35] <not_gerd> ^know

[19:42] <masak> we do? :)

[19:42] *** mtk joined
[19:43] *** Gruber is now known as Grrrr

[19:43] <TimToady> well, we know how well it worked out for the people who got "ark welded" anyway

[19:43] * masak thoroughly enjoys reviewing t1 solutions

[19:46] * masak just wrote "The whole program is really building up to that moment. And it is clearly a Perl 6 moment." :)

[19:47] *** mtk left
[19:47] *** mtk joined
[19:47] *** mtk left
[19:48] <moritz> sounds like a line that inckes a grammar which does all the rest :-)

[19:48] <masak> good guess :)

[19:49] <masak> no, it constructs a list of Bool-returning callables, and then does 'if all @findings>>.()' on them :)

[19:49] <masak> that's just... *kisses fingertips*

[19:50] *** mtk joined
[19:50] <masak> r: my %h1 = foo => 42; my %h2 = %h1.clone; say %h1 === %h2; say %h2.perl

[19:50] <p6eval> rakudo 8369e6: OUTPUT«False␤("foo" => 42).hash␤»

[19:50] <uvtc> masak: se se bon! manifiq!

[19:50] *** mtk left
[19:50] <masak> (one contestant claimed cloning doesn't work for hashes. seems to work for me)

[19:51] <masak> (maybe he just expected deep cloning or sump'n)

[19:51] *** mtk joined
[19:52] <masak> uvtc: surely it's "ça c'est bon!"? :P

[19:53] <uvtc> masak: heheh. Ugh, yes, I'm terrible at spelling french.

[19:54] <uvtc> Apologies to my friends across the pond, and up in the great white north too.

[19:54] <masak> "The French don't care what they do actually, as long as they spell it properly." -- Prof. Higgins, "My Fair Lady"

[19:55] *** rindolf left
[19:55] <masak> hm, s/spell/pronounce/, dang :)

[19:55] <masak> but French has the advantage that it's spelled just like it reads and it's pronounced just as it's spoken :P

[19:56] <census__> masak :)

[19:56] <census__> quick perl 5 question please??

[19:56] *** fhelmberger joined
[20:01] *** fhelmberger left
[20:03] <rjbs> census__: You want a quick perl 5 question?  Sure!  How does the * sigil work?

[20:04] <TimToady> poorly

[20:04] <rjbs> ba-dum CHING

[20:05] <not_gerd> my guess would be sacrificial magic and duct tape

[20:05] <census__> I am having difficult reading in data from a .txt for some reason.

[20:05] <census__> My script is: http://scsys.co.uk:8002/230476?ln=on&tidy=on&hl=on&submit=Format+it!

[20:06] <census__> Error: Backslash found where operator expected at jsontest5.pl line 27, near "qw/givenn ame surname birth_place birth_year} = map { /\" Possible unintended interpolation of @terms in string at jsontest5.pl line 32.

[20:06] <masak> census__: you really shouldn't ask Perl 5 help questions here.

[20:06] <census__> oh sorry.  someone mentioned it might be ok.  i'm sorry

[20:06] <diakopter> this is around the 5th time you've been told it's not ok

[20:06] <masak> census__: you're missing a '/' after 'birth_year'

[20:06] <rjbs> This is definitely not a "quick question" with that many lines.  But the problem is you're missing a temrinator.

[20:06] <rjbs> Line 27.

[20:07] <rjbs> "quick perl 5 question" is "what's the built-in for log again?"

[20:07] <census__> @args{ qw/givenname surname birth_place birth_year/} = map { / \s/ ? qq["$_"] : $_ } split /,/, $line;

[20:07] <rjbs> Try #perl or #perl-help

[20:07] <census__> ?

[20:07] <masak> census__: basically, disregarding this channel's OT policy and asking Perl 5 questions is impolite.

[20:07] <masak> census__: we're *not* kicking you yet, because we're nicer than you deserve.

[20:07] <census__> Ok.  I am sorry.  I apologize.

[20:07] <census__> yes you are masak :)

[20:07] <census__> you are very nice :)

[20:07] <census__> you warn me even :)

[20:07] <moritz> masak: https://gist.github.com/moritz/4955785 # that's how far I got with t1

[20:08] * moritz considers putting "No Perl 5 questions" in the /topic, but I guess it's too long already :-)

[20:09] <masak> better not.

[20:10] <dalek> perl6.org: b4ca42b | moritz++ | source/community/irc.html:

[20:10] <dalek> perl6.org: [irc] document that Perl 5 question are not really welcome

[20:10] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/b4ca42b0f4

[20:11] <rjbs> I will henceforth direct all such questions elsewhere, to channels where I am not. :)

[20:11] <uvtc> census__: maybe also try Perlmonks.org (though be sure to search first before asking, as your question may have already been asked before). See also http://perl-tutorial.org/ .

[20:14] <rjbs> So, let's say I want to port a library or two to p6.  I will want tests.  What's the place to look to read about writing tests (or a whole library)?  I may have a tolerable grasp on finding language docs atm.

[20:15] <masak> rjbs: hm, I'm not aware of any tutorial.

[20:15] <masak> rjbs: but the spectests are a treasure-trove of good examples, at least.

[20:15] <masak> rjbs: so are many modules' tests.

[20:15] <jnthn> rjbs: http://wiki.perl6.org/Create%20and%20Distribute%20Modules is somewhat helpful

[20:15] <rjbs> Okay.  There's a Test::More-ish library?  And do you use prove?

[20:16] <masak> hm, it strikes me that probably moritz has written a blog post about writing tests at some point ;)

[20:16] <masak> rjbs: yes and yes. we call our Test::More 'Test' :)

[20:16] <rjbs> No "More"?  Is it enough?

[20:17] <masak> yes.

[20:17] <masak> it covers about the same as CPAN's Test::More.

[20:17] <masak> the times that it isn't enough, I usually whip up a local sub or two.

[20:17] <moritz> + a bit of Test::Exceptions

[20:18] <rjbs> I see test files in ./t with no shebang and named .t; using some hack on prove to run these, or?

[20:18] <alester> Is prove still prove?

[20:18] <diakopter> prove is the perl 5 prove

[20:19] <[Coke]> prove -e ./perl6 or so.

[20:19] <moritz> I think I wrote a bit about testing, but not really anything new for somebody who knows Perl 5 testing very well

[20:19] * rjbs has done a little Perl 5 testing.

[20:19] <moritz> on the p6 advent blog, iirc

[20:20] <moritz> oh, and there's S24 of course

[20:20] <rjbs> [Coke]: Does this mean that I'll probably want to be developing under a p6 build directory?  Or, maybe better: what's the installability of (say) Rakudo?

[20:20] <moritz> rjbs: just run 'make install'

[20:20] <moritz> rjbs: it installs into ./install per default

[20:20] <moritz> rjbs: so you add $rakudo_source_dir/install/bin to $PATH

[20:20] <moritz> and then you're good

[20:21] <moritz> if you install panda, it also tells you which site/bin to add to $PATH

[20:21] <[Coke]> (or you can install it someplace like ~/perl6, or..)

[20:22] <rjbs> Hooray, and pack clearly works enough to scratch the surface.

[20:22] <rjbs> Maybe I'll play at porting ZMachine::Codec.  Thanks.

[20:22] <moritz> (rakudo installs in the same prefix dir as the parrot it uses)

[20:26] *** domidumont left
[20:32] <TimToady> star: https://gist.github.com/TimToady/4956142

[20:32] <p6eval> star 2012.12: OUTPUT«===SORRY!===␤Two terms in a row␤at /tmp/OA0F3TBG2w:1␤------> https⏏://gist.github.com/TimToady/4956142␤    expecting any of:␤        argument list␤        postfix␤        infix or meta-infix␤        infix stopper␤        statemen…

[20:33] <TimToady> star: http://gist.github.com/TimToady/4956142

[20:33] <p6eval> star 2012.12: OUTPUT«===SORRY!===␤Two terms in a row␤at /tmp/8YzVDFn0A6:1␤------> http⏏://gist.github.com/TimToady/4956142␤    expecting any of:␤        argument list␤        postfix␤        infix or meta-infix␤        infix stopper␤        statement…

[20:34] <TimToady> well, anyway, there's seems to be an off-by-one error in what fork returns compared to what the child pid returns, if you have a star handy

[20:34] <TimToady> here it prints:

[20:34] <TimToady> I am the proud parent of 17646.

[20:34] <TimToady> I am 17645.  Have you seen my mommy?

[20:35] <jnthn> Could you try: print "I am $*PID the proud parent of $pid.\n";

[20:36] <jnthn> I don't think it's off-by-one, I think it's $*PID being cached.

[20:37] <TimToady> ah

[20:38] <TimToady> good argument for building in fork, if it's available...

[20:38] <TimToady> or for making $*PID call getpid when it's fetched

[20:41] *** bruges left
[20:43] *** bruges joined
[20:43] *** arlinius left
[20:44] *** labster joined
[20:45] <labster> good afternoon, #perl6

[20:45] <moritz> \o labster 

[20:45] <labster> o/

[20:46] <labster> So I heard that Perl 7 is coming out, Perl 6 is renaming to Perl OS X 10.0 (Camelia), Rakudo is leaving Parrot forevar, moritz is masak's sockpuppet, and Perl 5 is turning into a pumpkin. Is any of this true?

[20:47] <moritz> labster: hard to tell :-)

[20:47] *** kaare_ left
[20:47] * atrodo enjoys a good soap opera

[20:48] <moritz> actually I'm masak's schismatic clone, who occasionally misses his fellow clones

[20:48] <masak> I *knew* it!

[20:49] <masak> well, *we* knew it, I guess...

[20:50] <masak> labster: as someone who has been living in the future for five years, I'm always a little worried when people try to change it. but the current blogo-discussions don't worry me so much. I just keep coding in the future, like I always do.

[20:51] <labster> Well, this episode of #perl6 has had a shocking revelation!

[20:51] <uvtc> [Gasp!]

[20:51] <masak> it was the butler!

[20:52] <moritz> .oO( Der Mörder ist immer der Gärtner )

[20:52] <uvtc> Enquiring minds have got to know!

[20:53] <masak> moritz: "The murderer is always Martin Gardner"? :P

[20:53] * masak knows a bit too much German...

[20:54] <masak> I would actually get a kick out of a weird sub-genre of detective stories where, on the last page, it always turns out that the murderer is, indeed, Martin Gardner.

[20:54] <masak> every. single. time.

[20:54] <moritz> masak: https://de.wikipedia.org/wiki/Der_M%C3%B6rder_ist_immer_der_G%C3%A4rtner

[20:55] <masak> "...und der schlägt erbarmungslos zu!" :P

[20:55] * moritz wonder if that French 5-liner should be our new STDIN vor p6eval 

[20:56] <moritz> *wonders

[20:56] <sorear> mm Martin Gardner

[20:56] <masak> I swear, sometimes German seems to be just Swedish with a funny source filter applied.

[21:07] <moritz> http://www.reddit.com/r/programming/comments/18fk4y/perl_6_redblack_tree_balancing_based_on_multi/ # Perl 6 reddit submission with surprisingly little trolling

[21:07] <moritz> drove about 2k visitors to my blog yesterday

[21:08] <moritz> raiph_++ # reddit submission

[21:09] <masak> not_gerd: hm, plz to link to my newer/cuter blog: http://strangelyconsistent.org/blog/happy-10th-anniversary-perl-6

[21:11] *** arlinius joined
[21:11] <not_gerd> masak: [x] done

[21:15] *** Timbus left
[21:15] *** sivoais left
[21:15] *** autumn left
[21:17] *** arlinius left
[21:20] <masak> \o/ not_gerd++

[21:20] <masak> I didn't even know use_perl was back online.

[21:21] <[Coke]> IWBNI if an unknown option to Configure.pl gave you the usage instead of continuing.

[21:23] <dalek> rakudo/nom: 1e85ffd | moritz++ | Configure.pl:

[21:23] <dalek> rakudo/nom: [Configure] stop on unknown command line options, [Coke]++

[21:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1e85ffd2cb

[21:23] <[Coke]> ... that escalated quickly.

[21:23] * moritz feels a tiny bit like au++ right now :-)

[21:34] <masak> moritz++

[21:34] <masak> moritz: all that was missing is "it's in release X.Y.Z, which went out 30 seconds ago" ;)

[21:35] <uvtc> hehehe

[21:36] <moritz> masak: well, time-based releases make that rather hard for me :-)

[21:37] <moritz> at $work I've written several emails along the lines of "$feature you requested two years ago is now testable in our staging environment. Have fun!"

[21:37] <moritz> during the last two weeks or so

[21:38] <moritz> being the new dev guy means that my queue isn't overflowing yet, and I can actually get stuff done that's not super urgent

[21:40] <masak> nice.

[21:40] <masak> deploying on the web is fun. I remember the secret joy in sending email replies with the single word "fixed" to end users. even when the fix was quite involved.

[21:42] <uvtc> When I run `perl6 -v`, and it tells me "This is perl6 version 2013.01-117-g8369e63 built on ...", is that sha1sum indicating *rakudo* version?

[21:43] <masak> yeah.

[21:43] <masak> we have no versions for Perl 6 the Spec yet.

[21:43] <masak> other than "not yet 6.0.0".

[21:43] <moritz> wouldn't hurt to have it say "This is Rakudo Perl version ..."

[21:43] <uvtc> So, should it instead say, "This is Perl 6, rakudo version ..."?

[21:44] <masak> moritz: +1

[21:45] <geekosaur> ultimately should probably be:  This is Rakudo version ... for Perl 6 version ...,

[21:45] <[particle]> you might consider listing the spec name, compiler name, and distribution name

[21:45] <[Coke]> O_o

[21:46] <[particle]> howdy, coke!

[21:46] * [Coke] pokes the particle mannequin with a stick.

[21:46] <[particle]> i found a rare moment to get bored at work, so i dropped by.

[21:46] <[Coke]> How you doing, man?

[21:47] <[particle]> well, thanks for asking. ready for summer. you?

[21:48] *** arlinius joined
[21:49] <masak> [particle]! \o/

[21:49] <[particle]> !o!

[21:50] <masak> Long Thyme Know Sea!

[21:50] <[Coke]> [particle]: quite well.

[21:50] <[particle]> Forget the Queen, God Save Perl 6!

[21:52] <colomon> \o

[22:01] <not_gerd> bye, #perl6

[22:01] *** not_gerd left
[22:02] *** Timbus joined
[22:09] *** skids left
[22:21] <uvtc> Is nqp currently able to report its version/most-recent-sha1sum? That is, so that `perl6 -v` could display it along with the one for rakudo and parrot?

[22:21] <uvtc> s/one/ones/

[22:25] *** PacoAir left
[22:32] <uvtc> Sorry to ask-and-run. Gotta go. o/

[22:32] <census__> happy valentine's day! :)

[22:32] *** uvtc left
[22:35] *** mtk left
[22:37] *** Liz_ joined
[22:38] *** Liz_ is now known as lizmat

[22:40] *** mtk joined
[22:42] *** wk left
[22:42] <masak> 'night, #perl6

[22:43] <japhb_> o/

[22:44] <census__> good night!

[22:44] <census__> happy v-day!!

[22:55] <census__> If I leave my computer .for awhile . . . will perl continue to run?

[22:55] <census__> Or will there be a screen saver and perl will stop running?

[22:55] <census__> (perl any version)

[22:56] <census__> (if a tree falls and we're not there does it still make a noise)

[22:57] <geekosaur> sceen saver does not stop anything running, just prevents interaction

[22:58] <census__> thank you! :)

[22:58] <census__> so, i can turn my monitor off and let perl do it's thang?

[22:58] <geekosaur> if power management is active the machine might auto-suspend; perl nor any other program has control over that, check your power management settings

[22:58] <census__> where are those?  

[22:58] <sorear> what OS are you on?

[22:59] <census__> power options under control panel ?

[22:59] <census__> Windows XP.

[22:59] <census__> IBM Lenovo

[22:59] <census__> T60

[22:59] <geekosaur> likely, yes

[22:59] <sorear> laptops are a different breed

[22:59] <census__> ok, i'm on a desktop too

[22:59] <geekosaur> was going to say, you'd have to check your system; there's little consistency between OSes or distributions thereof

[22:59] <sorear> I think most of them will always force-suspend if you close the lid

[22:59] <census__> windows desktop

[22:59] <sorear> regardless of OS

[23:00] <census__> i'm runing perl on 2 machines

[23:00] <census__> on the desktop, i do what?

[23:00] <census__> i'm in power options properites

[23:01] <diakopter> probably you don't need to do anything on the desktop if it's old enough

[23:01] <census__> it is very old

[23:01] <census__> but just to be sure??

[23:01] <diakopter> I think you'll need to google that question on your own

[23:01] <diakopter> I'm surprised the interface is not obvious...

[23:01] <census__> what interface?

[23:02] <census__> may i ask what to put into google?  i don't know the techinical term for this concern?

[23:02] <diakopter> the thing you just said you're looking at - power option properties

[23:03] <census__> ah google 

[23:03] <census__> my lover

[23:04] <geekosaur> I do not have winxp here and cannot provide any guidance about it

[23:04] *** geekosaur left
[23:04] *** crab2313 joined
[23:05] * diakopter also does not have a 12-year old OS lying around

[23:05] *** eviltwin_b joined
[23:05] *** eviltwin_b is now known as geekosaur

[23:06] *** Rix left
[23:10] *** bluescreen10 left
[23:12] *** Rix joined
[23:12] *** benabik joined
[23:13] *** benabik_ joined
[23:13] *** benabik left
[23:13] *** benabik_ is now known as benabik

[23:13] *** arlinius left
[23:21] *** stopbit left
[23:26] <dalek> nqp-jvm-prep: 1005eb4 | jnthn++ | src/org/perl6/nqp/runtime/Ops.java:

[23:26] <dalek> nqp-jvm-prep: Add rxmark op.

[23:26] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/1005eb43fa

[23:26] <dalek> nqp-jvm-prep: a448939 | jnthn++ | lib/QAST/JASTCompiler.nqp:

[23:26] <dalek> nqp-jvm-prep: Fill out compilation of scan.

[23:26] <dalek> nqp-jvm-prep: 

[23:26] <dalek> nqp-jvm-prep: Not much use yet since the backtracking logic isn't in place.

[23:26] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/a448939c28

[23:26] <dalek> nqp-jvm-prep: 6de9958 | jnthn++ | lib/QAST/JASTCompiler.nqp:

[23:26] <dalek> nqp-jvm-prep: Emit much of the backtrack handling logic.

[23:26] <dalek> nqp-jvm-prep: 

[23:26] <dalek> nqp-jvm-prep: Doesn't handle the capture stack yet (but we don't have anything that

[23:26] <dalek> nqp-jvm-prep: captures yet either). The rest is there, modulo thinkos.

[23:26] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/6de995852e

[23:26] <dalek> nqp-jvm-prep: e5eae05 | jnthn++ | lib/QAST/JASTCompiler.nqp:

[23:26] <dalek> nqp-jvm-prep: Fix a thinko in scan, so it actually progresses.

[23:26] <dalek> nqp-jvm-prep: 

[23:26] <dalek> nqp-jvm-prep: With this, we can do do things like:

[23:26] <dalek> nqp-jvm-prep: 

[23:26] <dalek> nqp-jvm-prep:     say(('abcdef' ~~ /:i <[de]>F/).Str())

[23:26] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/e5eae05c1f

[23:28] <dalek> nqp-jvm-prep: 42778ee | jnthn++ | docs/ROADMAP:

[23:28] <dalek> nqp-jvm-prep: ROADMAP update.

[23:28] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/42778eec28

[23:28] <japhb_> jnthn++

[23:29] <jnthn> pmichaud++ # designing QRegex in the first place

[23:29] <jnthn> pmichaud: Turns out the mark label stuff translates very nicely to a (native to JVM) tableswitch :)

[23:36] *** skids joined
[23:37] *** proller_ left
[23:38] *** benabik left
[23:44] *** sivoais joined
[23:50] *** erkan left
[23:52] <jnthn> 'night, #perl6

[23:59] *** arlinius joined
