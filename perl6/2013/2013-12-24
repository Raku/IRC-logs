[00:02] <diakopter> lue: what step is next? :)

[00:03] <lue> build & testing. Takes a while :)

[00:08] *** dmol left
[00:08] *** ajr_ left
[00:09] *** raiph left
[00:18] *** Entonian joined
[00:19] *** Entonian left
[00:22] *** kaare_ joined
[00:28] *** raiph joined
[00:31] *** jnap left
[00:36] *** andrers52 left
[00:36] *** Ben_Goldberg joined
[00:36] *** andrers52 joined
[00:37] *** BenGoldberg left
[00:39] *** BenGoldberg joined
[00:39] *** kaare__ joined
[00:39] *** zakharyas left
[00:42] *** Ben_Goldberg left
[00:44] *** kaare_ left
[00:46] *** treehug88 joined
[00:52] *** treehug88 left
[00:52] *** logie left
[00:58] *** andrers52 left
[01:02] *** jnap joined
[01:06] *** jnap left
[01:07] <lue> can anyone look this over and tell me if any of these errors need to be dealt with?    https://gist.github.com/lue/422c00aa994f82dd22b7

[01:07] *** jnap joined
[01:07] <lue> (the filestat.t failure is because I have a noatime mount)

[01:11] <lue> Looks fine to me, at least.

[01:14] <lue> O.o perl6-lwp-simple fails magnificently

[01:17] *** BenGoldberg left
[01:18] <diakopter> lue: are you sure you had libicu installed?

[01:18] <lue> jsonrpc fails too. It's thanks to a "missing or wrong version of dependency" of MIME/Base64/PIR.pm6. Not sure why.

[01:19] <lue> diakopter: updated gist with modules-test failures

[01:20] <lue> ✘ ⑩ modules-test failed

[01:21] *** BenGoldberg joined
[01:22] * lue &

[01:48] *** raiph left
[02:02] *** beastd left
[02:03] *** census joined
[02:03] *** pera left
[02:12] *** thou left
[02:49] *** kivutar left
[03:04] <lue> hello again o/

[03:06] <lue> So, no-one yet can point me in a direction to this failure? :/

[03:10] <lue> oh, huh. Looks like `make install` fails on precompiling the offending modules. I just didn't catch that earlier it seems.

[03:11] <lue> (LWP::Simple has the same "missing or wrong version" error as the tests, while JSON::RPC needs LWP precompiled to work.)

[03:14] <TimToady> timotimo: in the normal Perl 6 RC page, the link to the unimplemented tasks is on the right in the Your Help Needed box

[03:14] <[Coke]> lue: did make test work for the updated lwp-simple in teh R* release?

[03:15] <[Coke]> I mentioned that a few days ago in here, see you tripped over it too.

[03:16] <lue> [Coke]: *updated* lwp-simple...? /me checks the logs for LWP

[03:16] <dalek> rakudo-star-daily: 08b25ec | coke++ | log/ (5 files):

[03:16] <dalek> rakudo-star-daily: today (automated commit)

[03:16] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/08b25ec69e

[03:16] <dalek> perl6-roast-data: 609f1cf | coke++ | / (6 files):

[03:16] <dalek> perl6-roast-data: today (automated commit)

[03:16] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/609f1cf206

[03:16] <[Coke]> lue: i just mean latest.

[03:16] <lue> last commit from 23 Nov

[03:17] <lue> yeah, seems to be latest

[03:19] <lue> [Coke]: I'll remember to check the R* runs before complaining next time, so I at least know more when I do :)

[03:20] <lue> do you recall how you fixed it?

[03:21] <[Coke]> I never fixed anything. I just reported the failure... and I see it's gone in today's daily run

[03:21] *** kurahaupo_mobile joined
[03:21] <[Coke]> last failed on Sat Dec 21 15:27:47 2013

[03:21] <[Coke]> had at least 2 days where it was working.

[03:22] <[Coke]> (including today)

[03:22] <lue> *headdesk* I just _knew_ this was why updating the MIME::Base64 module was troublesome earlier. I just _knew_ this error was the reason behind that. And now I have proof :)

[03:22] <lue> http://irclog.perlgeek.de/perl6/2013-11-23#i_7905580 <-- evidence, for the curious

[03:23] <[Coke]> (when I asked if you fixed it, I didn't realize my daily run had cleared up.)

[03:24] <lue> .oO(the insidious part of the error is that it's the things *using* ::Base64, not the module itself, that fail. Which would make git blame and related strategies a bit more involved.)

[03:24] <lue> ...I'm gonna need to make 2013.12.1 tag for R*, aren't I? :)

[03:28] <lue> oh, nvm, tagging doesn't happen yet. phew.

[03:31] <[Coke]> you only need to make a .1 tag if you made a non .1 tag already

[03:32] *** xenoterracide left
[03:35] <lue> [Coke]: yeah, like I said, my brain got muddled for a second :)

[03:43] *** xenoterracide joined
[03:45] *** gfldex left
[03:47] *** gfldex joined
[04:05] * lue is busy trying to find a command that will leave MIME::Base64 alone in the next release cycle

[04:09] <lue> Hrm. The only solution I've seen so far is a linux-specific [ test ] for the foreach command :/

[04:12] *** colomon left
[04:20] *** colomon joined
[04:20] *** mtk joined
[04:20] *** odoacre joined
[04:26] <dalek> star: 2a5ed8f | lue++ | modules/Perl6-MIME-Base64:

[04:26] <dalek> star: Revert Perl6::MIME::Base64 to working commit.

[04:26] <dalek> star: 

[04:26] <dalek> star: moritz had fixed this last month, I just didn't know about it when I

[04:26] <dalek> star: updated this module.

[04:26] <dalek> star: review: https://github.com/rakudo/star/commit/2a5ed8f9b3

[04:26] <dalek> star: 2b96edf | lue++ | tools/star/release-guide.pod:

[04:26] <dalek> star: Update release guide to deal with Perl6::MIME::Base64

[04:26] <dalek> star: 

[04:26] <dalek> star: There's no easy way to modify the existing submodule command to skip

[04:26] <dalek> star: Perl6::MIME::Base64, in a cross-platform way. So instead presented here

[04:26] <dalek> star: is a way to fix Perl6::MIME::Base64 getting a merge commit.

[04:26] <dalek> star: 

[04:26] <dalek> star: The sooner we don't need this addition to the Release Guide, the better.

[04:26] <dalek> star: review: https://github.com/rakudo/star/commit/2b96edf76b

[04:27] *** xinming_ joined
[04:28] *** BenGoldberg left
[04:29] *** xinming left
[04:29] *** BenGoldberg joined
[04:36] <lue> ✔ ⑨ generate tarball (again)

[04:45] *** kaare__ left
[04:46] *** jnap left
[04:49] *** kurahaupo_mobile left
[04:51] *** skids joined
[04:54] *** preflex joined
[04:54] *** ChanServ sets mode: +v preflex

[05:07] *** logie joined
[05:09] *** SamuraiJack joined
[05:14] *** logie left
[05:17] *** jnap joined
[05:17] *** kaleem joined
[05:21] *** jnap left
[05:46] *** BenGoldberg left
[05:48] *** rurban1 joined
[05:48] *** rurban1 left
[05:55] *** fridim_ left
[05:57] *** rurban1 joined
[06:05] *** raiph joined
[06:08] * moritz wishes everybody a good and merry UGT Christmas Even morning

[06:20] *** logie joined
[06:26] *** logie left
[06:51] *** kaleem left
[06:51] *** kaleem joined
[06:51] *** kaleem left
[06:51] *** kaleem joined
[06:56] *** raiph left
[06:57] *** kaleem left
[06:57] *** kaleem joined
[06:57] *** rurban1 left
[07:28] *** xinming_ left
[07:33] *** darutoko joined
[07:37] *** rindolf joined
[07:58] *** mberends joined
[07:59] *** odoacre left
[08:14] *** odoacre joined
[08:45] *** xinming joined
[08:47] *** xinming left
[08:50] *** xinming joined
[08:52] *** xenoterracide left
[08:53] *** xenoterracide joined
[08:54] *** dmol joined
[08:55] *** xinming left
[08:57] *** xinming joined
[09:01] *** xinming left
[09:03] *** spider-mario joined
[09:03] *** xinming joined
[09:08] *** xenoterracide left
[09:10] *** brrt joined
[09:11] *** Alina-malina joined
[09:11] *** raiph joined
[09:12] *** xinming left
[09:27] *** mberends left
[09:31] *** xinming joined
[09:35] *** xinming left
[09:41] *** mberends joined
[09:51] *** xinming joined
[10:12] *** raiph left
[10:16] *** kivutar joined
[10:31] *** xinming_ joined
[10:31] *** xinming left
[10:50] *** Alina-malina left
[10:51] *** Alina-malina joined
[10:53] *** denisboyun joined
[11:02] *** finanalyst joined
[11:04] <finanalyst> r: my @s=(0,1,0.5,0.4)[^3]; my @t=((0,1,0.5,0.4) xx 1)[^3]; @s.say;@t.say

[11:04] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«0 1 0.5␤0 1 0.5 0.4␤»

[11:04] <finanalyst> should both be the same I think

[11:04] *** brrt left
[11:06] <finanalyst> r: my @s=(0,1,0.5,0.4)[^3]; my @t=((0,1,0.5,0.4) xx 1)[^3]; say @s == @t

[11:06] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«False␤»

[11:15] *** odoacre left
[11:19] *** odoacre joined
[11:31] *** ivanshmakov joined
[11:46] *** GlitchMr is now known as xfix

[11:58] *** denis_boyun__ joined
[11:59] *** denisboyun left
[12:05] *** wooden left
[12:07] *** brrt joined
[12:08] *** kivutar left
[12:08] *** wooden joined
[12:08] *** wooden left
[12:08] *** wooden joined
[12:25] *** kurahaupo_mobile joined
[12:26] *** kaleem left
[12:30] *** kurahaupo_mobile left
[12:31] *** wooden left
[12:32] *** wooden joined
[12:39] *** colomon left
[12:40] *** colomon joined
[12:54] *** xinming_ left
[12:54] *** xinming joined
[13:02] *** xinming left
[13:03] *** xinming joined
[13:07] *** tgt joined
[13:08] *** xinming left
[13:09] *** brrt left
[13:09] *** xinming joined
[13:12] *** atroxaper joined
[13:21] *** xinming left
[13:21] *** xinming joined
[13:22] *** kivutar joined
[13:23] *** dmol left
[13:25] *** atroxaper left
[13:26] *** atroxaper joined
[13:27] *** dmol joined
[13:30] *** atroxape_ joined
[13:30] *** atroxaper left
[13:31] *** araujo_ joined
[13:34] *** colomon left
[13:35] *** ajr joined
[13:35] *** araujo_ left
[13:35] *** ajr is now known as Guest70190

[13:35] *** araujo joined
[13:35] *** Guest70190 is now known as ajr_

[13:35] *** colomon joined
[13:38] *** gfldex left
[13:44] *** cognominal left
[13:48] *** sftp joined
[13:48] *** sftp_ left
[13:50] *** retupmoc1 joined
[13:50] *** dbrock joined
[13:55] *** sorear joined
[13:56] *** __rnddim__ joined
[13:56] *** orevdiabl joined
[13:57] *** FOAD_ joined
[13:58] *** ponbiki_ joined
[14:02] *** ggoebel117 joined
[14:02] *** pmichaud_ joined
[14:02] *** Bucciarati_ joined
[14:05] *** jnap joined
[14:05] *** frettled_ joined
[14:06] *** lue left
[14:06] *** gfldex joined
[14:06] *** FOAD_ is now known as FOAD

[14:11] *** genehack joined
[14:11] *** Celelaptop joined
[14:11] *** zamolxes joined
[14:12] *** ingy joined
[14:12] *** Bucciarati_ left
[14:14] *** lumimies joined
[14:18] *** Bucciarati joined
[14:19] *** kivutar left
[14:25] *** kivutar joined
[14:34] *** wooden left
[14:36] *** rurban1 joined
[14:39] *** dayangkun left
[14:41] *** wooden joined
[14:41] *** wooden left
[14:41] *** wooden joined
[14:42] *** kaleem joined
[14:51] *** wooden left
[14:52] *** wooden joined
[15:25] *** rurban1 left
[15:26] *** kaleem left
[15:30] *** tgt left
[15:35] *** ajr_ left
[15:35] *** rurban1 joined
[15:36] *** ajr joined
[15:36] *** ajr is now known as Guest18972

[15:37] *** Guest18972 is now known as ajr_

[15:37] *** [Sno] left
[15:42] *** colomon left
[15:43] *** colomon joined
[15:46] *** cognominal joined
[15:47] <raydiak> good morning, #perl6

[15:48] <moritz> good morning, raydiak 

[15:48] <diakopter> good morning, self

[15:54] *** samebchase joined
[15:54] *** filly joined
[15:59] *** Psyche^ joined
[16:00] <raydiak> http://cyberuniverses.com/pray/#pray-image-9 - hopefully the last pic before code release (which is what I said last time, but I couldn't help myself)

[16:03] <timotimo> csg \o/

[16:03] *** dayangkun joined
[16:04] <moritz> raydiak++

[16:04] <timotimo> is your nickname raydiak because you do raytracing?

[16:04] <moritz> raydiak: if you release the code tomorrow, you can post the announcement as day 25 of the advent calendar :-)

[16:05] <raydiak> timotimo: sorta, but it's more based on my real name..."Ray" is literally my middle name :)

[16:05] <diakopter> diak is your last name?

[16:05] <raydiak> moritz: I thought all the days were gone now...???...

[16:05] <diakopter> opter is timotimo's middle name

[16:06] <moritz> raydiak: well, advent calendars typically only go to 24, which is why only the days upto 24 are taken

[16:06] <moritz> raydiak: but there wouldn't be any harm in adding another day :-)

[16:06] <raydiak> diakopter: ha ha :) it's too early for me to come up with anything clever to answer that with

[16:07] <raydiak> moritz: oh right...well, that's a thought; I do have half a day of peace to myself

[16:07] <diakopter> early in the human eon

[16:09] <raydiak> that too

[16:11] *** colomon left
[16:11] *** zakalwe joined
[16:18] *** dmol left
[16:18] *** colomon joined
[16:31] *** colomon left
[16:31] *** atroxape_ left
[16:31] *** atroxaper joined
[16:32] *** colomon joined
[16:33] <timotimo> diakopter: my first and last name are both timo

[16:44] *** colomon left
[16:50] *** finanalyst left
[17:00] *** jnap left
[17:06] *** spider-mario left
[17:10] *** atroxaper left
[17:20] *** colomon joined
[17:21] <colomon> raydiak++ # !!!!!!!

[17:23] <raydiak> thanks :) that's the impression I was going for

[17:27] *** spider-mario joined
[17:28] *** spider-mario left
[17:28] <colomon> raydiak: I look forward to having the time to check it out more completely.  busy desperately cleaning the house at the moment.  :)

[17:29] *** spider-mario joined
[17:30] *** jnap joined
[17:32] <raydiak> colomon: it looks better from a distance anyway...then you don't notice as much that it doesn't do internal reflection, subsurface scattering, or caustics yet

[17:35] *** jnap left
[17:36] *** ajr joined
[17:36] *** ajr_ left
[17:37] *** ajr is now known as Guest64029

[17:37] *** Guest64029 is now known as ajr_

[17:46] <colomon> raydiak: I'm sure those features can wait till next week.  ;)

[17:47] <colomon> raydiak: what's your output format?

[17:48] <raydiak> colomon: just ppm right now

[17:56] <timotimo> are the times terrible? :)

[17:58] *** Mouq joined
[17:58] *** kivutar left
[17:58] <raydiak> quite :) but I haven't made any attempt to profile or optimize yet, other than to keep it possible to work on in reasonable amounts of time

[17:59] <timotimo> right

[17:59] <timotimo> if you find something that should be much faster, feel free to ping me; i'm always interested in doing little optimizations

[17:59] <timotimo> something that obviously should be faster ;)

[18:00] <timotimo> as in: easy to prove at compile time :P

[18:00] <Mouq> finalanyst: re: http://irclog.perlgeek.de/perl6/2013-12-24#i_8036731

[18:00] <Mouq> r: my @s=(0,1,0.5,0.4)[^3]; my @t=((0,1,0.5,0.4) xx 1)[0][^3]; @s.say;@t.say

[18:00] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«0 1 0.5␤0 1 0.5␤»

[18:01] <Mouq> r: my @t=((0,1,0.5,0.4) xx 1); @t.perl.say

[18:01] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«Array.new(0, 1, 0.5, 0.4)␤»

[18:01] <Mouq> hm :?

[18:01] <Mouq> r: my @t=(0,1,0.5,0.4); @t.perl.say

[18:01] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«Array.new(0, 1, 0.5, 0.4)␤»

[18:02] <Mouq> hrm

[18:02] <timotimo> so the (0,1,0.5,0.4) xx 1 generates a LoL?

[18:02] <timotimo> r: ((0, 1, 0.5, 0.4) xx 1).perl.say

[18:02] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«((0, 1, 0.5, 0.4),).list␤»

[18:02] <timotimo> yeah

[18:02] <timotimo> r: ((0, 1, 0.5, 0.4) xx 2).perl.say

[18:02] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«((0, 1, 0.5, 0.4), (0, 1, 0.5, 0.4)).list␤»

[18:03] <timotimo> and you expect the [^3] to flatten the LoL before accessing?

[18:03] <timotimo> kind of makes sense; it already says .list at the end

[18:03] <timotimo> and the .list of that should be flat

[18:04] <raydiak> timotimo: I'll be sure to let you know if I notice anything obvious when I start profiling (if japhb doesn't beat me to it...he mentioned a "barely contained obsession with optimizing 3D graphics code")

[18:04] <Mouq> timotimo: I feel the way it is probably good for consistancy though, e.g., (0, 1, 0.5, 0.4) xx $i

[18:04] *** kurahaupo_mobile joined
[18:04] <timotimo> :D

[18:06] <timotimo> Mouq: well, the thing is that the postcircumfix seems to disregard the list context it seems to be in

[18:06] <timotimo> r: for (0, 1, 0.5, 0.4) xx 2 { say $_ }

[18:06] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«0␤1␤0.5␤0.4␤0␤1␤0.5␤0.4␤»

[18:06] <timotimo> in a for loop you have to .tree it in order to get two iterations out of that

[18:06] <timotimo> r: for (0, 1, 0.5, 0.4) xx 1 { say $_ }

[18:06] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«0␤1␤0.5␤0.4␤»

[18:07] <timotimo> same here

[18:07] *** Rotwang joined
[18:08] <timotimo> it could be argued that it's a bug that postcircumfix:<[ ]> doesn't evaluate it in the list context like a for loop would

[18:08] <Mouq> r: for (0, 1, 0.5, 0.4), (0, 1, 0.5, 0.4) { say $_ }

[18:08] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«0␤1␤0.5␤0.4␤0␤1␤0.5␤0.4␤»

[18:09] <Mouq> r: ((0, 1, 0.5, 0.4), (0, 1, 0.5, 0.4)).perl.say

[18:09] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«((0, 1, 0.5, 0.4), (0, 1, 0.5, 0.4))␤»

[18:09] <timotimo> interestingly, it doesn't output .list there

[18:10] <timotimo> i'm not 100% sure how all that really works inside; and also pmichaud said he'd do a full revision of the list synopsis

[18:11] <colomon> raydiak: you haven't posted the source yet?

[18:15] *** kurahaupo_mobile left
[18:21] *** SamuraiJack left
[18:28] *** kurahaupo joined
[18:31] *** jnap joined
[18:36] *** rurban1 left
[18:36] *** jnap left
[18:41] *** darutoko left
[18:44] *** SamuraiJack joined
[18:45] <raydiak> colomon: no, but any day now

[18:50] *** SamuraiJack left
[18:51] *** __rnddim__ is now known as lue

[18:51] <lue> hello world o/

[18:51] <raydiak> \o

[18:53] *** census left
[18:53] <lue> ✔ ⑩ Test tarball

[18:57] <lue> ✔ ⑪ tag 2013.12 release

[18:57] *** tgt joined
[18:59] <lue> could someone with the proper permission scp the tarball for R* to the rakudo.org location? The MD5 of the tarball on my end is c0b4f1b780182530c6714f01cf36d87b .

[19:00] <lue> (posting the release announcement to rakudo.org is also something I can't do.)

[19:04] <Rotwang> I know that I've asked it already, but have you considered making this process more automatic?

[19:05] <TimToady> It's hard to automate the WTF bits.

[19:06] <lue> Rotwang: Perl6::MIME::Base64 would've been *very* fun this month on automation :)

[19:09] *** rurban1 joined
[19:13] *** rurban1 left
[19:14] <Ulti> if I wish to map a list to triplets from that list what is a perl6ism for this that returns the new list using something like   for @list -> $a,$b,$c {}  works but is there something like map that consumes more thna one value?

[19:15] <timotimo> isn't for the same as map, basically? :P

[19:17] <timotimo> i'm confused; why isn't eqat available in the stage0s? we recently rebuilt the stage0s :(

[19:18] <Ulti> I dunno I just tried   map {"$^a$^b$^c"}, @list and it didn't work out

[19:18] <timotimo> i just mean: why not use that exact for?

[19:19] <Ulti> because its a bit unwieldy

[19:19] <timotimo> well, use the for just to make triplets then?

[19:22] <Mouq> Ulti: the map you wrote works fine for me, latest perl

[19:22] <Mouq> r: map {"$^a$^b$^c"}, (0, 1, 0.5, 0.4) xx 3

[19:22] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: ( no output )

[19:22] <Mouq> r: say map {"$^a$^b$^c"}, (0, 1, 0.5, 0.4) xx 3

[19:22] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«010.5 0.401 0.50.40 10.50.4␤»

[19:22] <Mouq> r: say map ->$a, $b?, $c? {"$a$b$c"}, 0, 1, 0.5, 0.4

[19:22] <camelia> rakudo-parrot d72797: OUTPUT«use of uninitialized value of type Mu in string context  in block  at /tmp/kbpOETfyA1:1␤␤use of uninitialized value of type Mu in string context  in block  at /tmp/kbpOETfyA1:1␤␤010.5 0.4␤»

[19:22] <camelia> ..rakudo-jvm d72797: OUTPUT«use of uninitialized value of type Mu in string context␤use of uninitialized value of type Mu in string context␤010.5 0.4␤»

[19:22] <TimToady> r: .say for map -> $a, $b, $c { "$a$b$c" }, 1..9

[19:22] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«123␤456␤789␤»

[19:23] <TimToady> r: .say for map *~*~*, 1..9

[19:23] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«123␤456␤789␤»

[19:23] <Ulti> weird

[19:25] <Ulti> ahh ok its that I used    @list X @list X @list  without surrounding ()

[19:26] <TimToady> yes, that includes the {} in the first list :)

[19:27] <Ulti> makes sense

[19:28] <TimToady> r: .say for map *~*~*, list <a b c> X <a b c> X <a b c>

[19:28] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«aaa␤aab␤aac␤aba␤abb␤abc␤aca␤acb␤acc␤baa␤bab␤bac␤bba␤bbb␤bbc␤bca␤bcb␤bcc␤caa␤cab␤cac␤cba␤cbb␤cbc␤cca␤ccb␤ccc␤»

[19:28] <TimToady> anything that drops precedence will work

[19:32] *** jnap joined
[19:32] <Ulti> neat

[19:32] <TimToady> r: .say for map *~*~* <== <a b c> X <a b c> X <a b c>

[19:32] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«aaa␤aab␤aac␤aba␤abb␤abc␤aca␤acb␤acc␤baa␤bab␤bac␤bba␤bbb␤bbc␤bca␤bcb␤bcc␤caa␤cab␤cac␤cba␤cbb␤cbc␤cca␤ccb␤ccc␤»

[19:33] <TimToady> though that might not continue to work if rakudo actually treats it as a statement sep

[19:33] <timotimo> i'm glad this isn't a bug in perl6 or rakudo, and instead just works

[19:34] <TimToady> r: <a b c> X <a b c> X <a b c> ==> map *~*~* ==> map *.say

[19:34] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«aaa␤aab␤aac␤aba␤abb␤abc␤aca␤acb␤acc␤baa␤bab␤bac␤bba␤bbb␤bbc␤bca␤bcb␤bcc␤caa␤cab␤cac␤cba␤cbb␤cbc␤cca␤ccb␤ccc␤»

[19:34] <TimToady> that should continue to work, I think

[19:35] <TimToady> unless we require .map someday, which istr jnthn++ suggesting at one point

[19:36] <TimToady> errands &

[19:36] *** jnap left
[19:54] <Ulti> btw this is what I'm working on https://gist.github.com/MattOates/8117240

[19:55] <Ulti> not sure if that is gross or nice... I get what is going on and it's elegant but perhaps not simple

[19:58] <timotimo> Ulti: [X] (@!bases xx 3) :D

[19:58] *** ajr_ left
[20:00] <timotimo> Ulti: i like your use of the whatever star in the aminos array, as the sequences that would generate them don't exist (is my guess anyway)

[20:00] <Ulti> timotimo I dont think that does what I want..?

[20:00] <Ulti> maybe it does

[20:00] <timotimo> although it's not *actually* a whatever star :)

[20:00] <Ulti> oh thats the symbol for a 'stop' codon

[20:01] <timotimo> oh

[20:01] <timotimo> ok

[20:01] <timotimo> also, a list of one-digit strings should .Str the same way it would .join(""), no?

[20:01] <timotimo> r: <foo bar baz>.Str.say

[20:01] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«foo bar baz␤»

[20:01] <timotimo> r: <foo bar baz>.gist.say

[20:01] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«foo bar baz␤»

[20:01] <timotimo> no, that's not it

[20:04] <timotimo> r: my %foo = <a b c d e f g> Z=> (1, 2, 3, 4, 5, 6, 7); my $a = "c"; say %foo<<$a>>

[20:04] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«3␤»

[20:04] <colomon> raydiak: if you want someone to look at it before you show it to the general public…. ;)

[20:04] <timotimo> Ulti: you can replace {" ... "} with << ... >>

[20:04] <Ulti> k k

[20:05] <timotimo> to completely confuse anyone ever :)

[20:05] <Ulti> the [X] (@list xx 3) is a no go though since its not three lists but one list made from three appended by the looks of it

[20:05] <timotimo> also i think your Str @!bases would look better with < ... > syntax as well

[20:06] <Ulti> timotimo yeah I realise I could make some epic single line :)

[20:06] <timotimo> no, i think that really would look nicer :)

[20:06] <Ulti> I meant more the Z=> sorry

[20:07] <timotimo> oh? no, i just needed a hash to test if <<>> will interoplate and turn into postcircumfix:<{ }>

[20:07] <timotimo> and i thought Z=> was the shortest way

[20:07] <Ulti> ohhh

[20:07] <timotimo> in the same vein, i could have written Z=> 1..*, or even used <a b c d e f g>.kv

[20:08] <timotimo> hm. i wonder if there's a reason to have .vk and .sriap, too

[20:09] <Ulti> <<>> is blowing up

[20:09] <Ulti> type Any in string context :S

[20:09] <timotimo> oh?

[20:09] <timotimo> gimme a sec.

[20:10] *** rurban1 joined
[20:11] <timotimo> r: my %foo; (given {%foo<<$^a$^b>>} { .WHAT, .arity }).say

[20:11] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«(Block) 2␤»

[20:12] <Ulti> yeah thats what I have... hmm

[20:12] <timotimo> weird. can you update the gist with your exact code?

[20:12] <Ulti> really it would be nice to get rid of the {} to have something as expressive as the previous map *~*~*

[20:13] <timotimo> grondilu also suggested the [X~] $@!bases xx 3

[20:13] <Ulti> timotimo yup one second

[20:13] <timotimo> that's wicked concise

[20:13] <timotimo> the $ prefix to turn the list into being item context is pretty slick

[20:13] <timotimo> i should remember todo that more often

[20:14] <Ulti> done

[20:14] <Ulti> ahh so that gets you a reference to the list and then 3 of those

[20:14] <Ulti> yeah thats nice though the plan wasnt to golf lol

[20:14] <Ulti> I like it though

[20:15] <timotimo> "reference to" isn't a good way to say it, IMO

[20:15] <timotimo> oh hey

[20:16] <timotimo> your join, map, comb looks just like a .trans

[20:17] <Ulti> hmmm $@!bases throws up too

[20:18] <Ulti> "Unsupported use of $@ variable as eval error; in Perl 6 please use $!"

[20:18] <timotimo> whoops, that's a bug.

[20:18] * timotimo has a look at the grammar

[20:19] <Ulti> $(@!bases) does work

[20:19] *** grondilu joined
[20:19] <Ulti> which I got via the usefule message: Unsupported use of ${@!bases}; in Perl 6 please use $(@!bases)

[20:20] <timotimo> m)

[20:20] <Ulti> so in Perl5 that would be scalar context... scalar context means the object representing a list type?

[20:20] <grondilu> weird.  $@ works fine here (rakudo star november)

[20:21] <Ulti> This is perl6 version 2013.09 built on parrot 5.5.0 revision 0

[20:21] <grondilu> r: my @a = rand xx 2; say $@a

[20:21] <camelia> rakudo-parrot d72797: OUTPUT«0.249971135842742 0.298091508719278␤»

[20:21] <camelia> ..rakudo-jvm d72797: OUTPUT«0.1677135985885968 0.2767544824499587␤»

[20:21] <timotimo> interestingly the rule to find $@ looks for \W, '(' or a sigil

[20:21] <timotimo> wow, ulti, that's old!

[20:21] <Ulti> grondilu: might be the class variableness

[20:21] <Ulti> timotimo: heh yeah :P

[20:21] <Ulti> I am on my work laptop rather than my personal one (xmas)

[20:22] <timotimo> it b0rks on my local version, too

[20:22] <Ulti> so what is $(@list) doing?

[20:22] <Ulti> because it feels different from what you might imagine from Perl5

[20:23] <timotimo> it's the same as @list.item

[20:23] <timotimo> afterwards, @list will not interpolate

[20:23] <timotimo> r: say (1, 2, (3, 4, 5), 6, 7).list.perl; say (1, 2, $(3, 4, 5), 6, 7).list.perl

[20:23] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«(1, 2, (3, 4, 5), 6, 7).list␤(1, 2, $(3, 4, 5), 6, 7).list␤»

[20:23] <grondilu> also, you can do:  return %codon_table{map *~*~*, $!seq.uc.comb}.join

[20:23] <timotimo> oh, excuse me, .perl will still give you its structure

[20:24] <timotimo> r: .say for (1, 2, (3, 4, 5), 6, 7).list; .say for (1, 2, $(3, 4, 5), 6, 7).list

[20:24] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«1␤2␤3␤4␤5␤6␤7␤1␤2␤3 4 5␤6␤7␤»

[20:24] <timotimo> you see how there's no newlines between the second 3, 4, 5?

[20:25] <timotimo> that's the effect $... and ....item have on lists

[20:25] <Ulti> okedoke but what $($string)

[20:25] <Ulti> is it just meaningless

[20:25] <timotimo> no change, $string is already in item context, because it is in a $-sigiled variable

[20:26] <grondilu> r: my $x = rand; say $$$$$$$$$$$$x

[20:26] <camelia> rakudo-jvm d72797: OUTPUT«0.4587225161057409␤»

[20:26] <camelia> ..rakudo-parrot d72797: OUTPUT«0.276195594432892␤»

[20:26] <grondilu> ;-)

[20:26] <timotimo> that's also why we have \ sigil-less variables; these don't have an item/list context or anything like that

[20:26] <timotimo> grondilu: oh shit! it behaves differently on our two backends!

[20:26] <timotimo> time to throw one away!

[20:26] <Ulti> hmmm so scalars feel refrency

[20:26] <timotimo> i have no past with perl5 or earlier.

[20:27] <timotimo> no history*

[20:27] <Ulti> so is something like $list = (1,2,3)  a list thats always in item context?

[20:27] * grondilu should remember to avoid using rand for value examples when calling r:

[20:27] <timotimo> yeah

[20:28] <grondilu> r: my $a = (1, 2, 3); .say for $a, 4, 5, 6

[20:28] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«1 2 3␤4␤5␤6␤»

[20:28] <grondilu> r: my $a = (1, 2, 3); .say for @$a, 4, 5, 6

[20:28] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«1␤2␤3␤4␤5␤6␤»

[20:28] <timotimo> anyone else think the evalbot should write ␤ instead of just ␤?

[20:28] *** tgt left
[20:29] <Ulti> http://doc.perl6.org/type/Str doesn't have .trans :P 

[20:29] * Ulti reads the real docs

[20:32] <sergot> Hi! o/

[20:33] <Ulti> hello

[20:33] *** jnap joined
[20:33] <Ulti> timotimo: yeah that would be a little easier to read

[20:33] <sergot> Christmas gift from poznan.pm: http://act.yapc.eu/plpw2014/ ! :)

[20:33] <timotimo> Ulti: it may be in Cool instead of Str

[20:34] <Ulti> yeah I looked in Cool too

[20:34] <Ulti> its in Str in the core shizzle in Rakudo

[20:34] <timotimo> it's mentioned there, but there's nothing about it here

[20:34] <Ulti> reading the source rather than the docs

[20:34] <timotimo> mhm, yeah

[20:35] <timotimo> it's in the synopses in any case.

[20:36] <Ulti> I think maybe the docs.perl6.org hasn't been rebuilt in a while

[20:36] <Ulti> or is it not coming from the source code?

[20:37] <Ulti> also I cant believe I forgot about [X~] considering I used it to make some decks of cards only a few months ago

[20:37] <timotimo> i do think it comes from the source code

[20:38] *** jnap left
[20:38] <timotimo> er, doesn't it come from the docs/ folder?

[20:38] <Ulti> yeah I doubt its the actual source because there aren't any pod comments

[20:38] <Ulti> or comments...

[20:39] <retupmoc1> re: MIME::Base64 and R* - the problem is that precompilation breaks somehow on the conditional require

[20:39] <timotimo> that's right

[20:39] <timotimo> the core setting is already painfully slow to compile

[20:39] <retupmoc1> without precompilation, everything works correctly

[20:39] <timotimo> if we also parsed Pod6 inside it ... ouch

[20:39] *** retupmoc1 is now known as retupmoca

[20:39] *** SoemGyu joined
[20:40] <timotimo> i know for a fact that there's still lots to be optimized in the pod6 parsing we do.

[20:40] <Ulti> timotimo use a perl5 script to strip it all and mangle variable names to be short like JS "compilers"

[20:40] <timotimo> well, to be honest ... i tried to optimize it and didn't get any wins

[20:40] <timotimo> they are actually called "uglifiers", at least i heard that name used often enough.

[20:40] <lue> retupmoc1: yeah, I read the commit on the precompile-fix branch :)

[20:40] <Ulti> heh

[20:41] <retupmoca> lue: I thought you probably had, but I wanted to make sure

[20:41] <Ulti> or obfuscators

[20:41] <retupmoca> since iirc moritz spent a lot of time figuring out what was going on last time

[20:42] <lue> I can imagine figuring it out wasn't very fun for moritz++

[20:44] <lue> pmichaud, jnthn, masak, PerlJam, tadzik, moritz: if one of you could scp the 2013.12 R* tarball (md5sum c0b4f1b780182530c6714f01cf36d87b) and post the release announcment on rakudo.org, that'd be great :)

[20:48] *** [Sno] joined
[20:48] *** Mouq left
[20:58] *** V_S_C joined
[21:00] <timotimo> oh

[21:01] <timotimo> $@ wins out over $(@!foobar) even though the latter is longer (this is LTM), because it matches earlier.

[21:02] *** dayangkun left
[21:02] <timotimo> i'll add a lookahead that makes sure we're not actually looking at $@!... before we throw out the error.

[21:02] <Ulti> timotimo++

[21:03] <timotimo> std: class foobar { has @!bases; method frob { say $@!bases } };

[21:03] <Ulti> also I am failing to "get" inheritance in P6 ;_;

[21:03] <camelia> std 4731beb: OUTPUT«ok 00:01 125m␤»

[21:03] * timotimo looks at STD before changing rakudo

[21:04] <timotimo> do you want to open a rakudobug so i can tag the test for it?

[21:04] <Ulti> thought it would be easy to make a DNA or RNA sequence subclass where just the @!bases list was different :S

[21:04] <Ulti> timotimo can do if you step me through opening one which I imagine starts with me getting an account to submit a ticket

[21:04] <timotimo> @! is private

[21:05] <Ulti> what so a subclass can't define it?

[21:05] <timotimo> if you want to override the way @!bases behaves from a subclass, you have to go through an accessor that gets overrided

[21:05] <timotimo> you can't define it?

[21:05] <Ulti> yeah but the methods from the super class use the undefined one

[21:05] <timotimo> you should just be unable to access the superclass' one, no?

[21:06] <timotimo> from the subclass, that is

[21:06] <Ulti> I also tried making it @. but it didnt change anything

[21:06] <timotimo> it should; but you have to access them with @. as well

[21:06] <Ulti> its more the methods are in the super class and I wanted the sublcasses to just define a different parameter

[21:06] <timotimo> if you access them with @!, you'll end up accessing the private one of either the subclass or the superclass

[21:06] <Ulti> yeah no thats what I did... I'll keep playing

[21:06] <timotimo> can you update the gist so i have something concrete to look at?

[21:07] <Ulti> oh I must have missed one before

[21:07] <Ulti> just tried again ;]

[21:07] <Ulti> its working now

[21:08] <timotimo> \o/

[21:08] <Ulti> win

[21:08] * timotimo is always glad to help

[21:09] <timotimo> oh, the last thing grondilu suggested is also nice

[21:09] <timotimo> using a list indexing on the codon table

[21:11] *** rurban1 left
[21:11] <timotimo> hah

[21:12] <timotimo> rakudo has <?before \W | '(' | <sigil> > and STD has <!before \w | '(' | <sigil> >

[21:16] *** V_S_C left
[21:17] <timotimo> Ulti: are you going to file the bug about $@! for me?

[21:17] *** dayangkun joined
[21:19] <timotimo> r: use Test; eval_lives_ok '$omg';

[21:19] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«not ok 1 - ␤# Error: Variable '$omg' is not declared␤»

[21:19] <moritz> lue: where's the tarball?

[21:20] <timotimo> fröhliche weihnachten, moritz :)

[21:20] <moritz> timotimo: ebenso :-)

[21:21] <timotimo> Ulti: i'll file the bug if you don't want to.

[21:21] *** kaare__ joined
[21:21] <lue> moritz: I gave you an md5sum so I didn't have to find a place to put it :P . (If I hadn't lost access to my feather account...)

[21:22] <moritz> lue: since tarballs contain timestamps, I can't easily recreate a tarball with the same md5sum

[21:23] <lue> oh. :/

[21:26] <lue> moritz: would you mind terribly a 12MiB email?

[21:26] <moritz> lue: yes, I would

[21:26] * lue does not posses an off-hand way to store files, except perhaps Google Drive...

[21:27] <timotimo> moritz: you could simply use the md5sum to bruteforce all timestamps

[21:27] <moritz> lue: I'll rather recreate the file, and upload it for your inspection

[21:27] <lue> moritz: sounds good.

[21:27] *** mberends left
[21:27] <moritz> lue: http://moritz.faui2k3.org/tmp/rakudo-star-2013.12.tar.gz

[21:28] * lue was almost tempted to post a Base64 text file gist :P

[21:29] *** kurahaupo left
[21:29] <diakopter> hee

[21:29] <timotimo> hah

[21:31] <timotimo> Ulti: i'm filing it now

[21:33] *** raiph joined
[21:33] *** jnap joined
[21:35] *** kivutar joined
[21:37] <timotimo> actually. i can just put a test into the spectests without further documentation

[21:38] *** jnap left
[21:39] *** kurahaupo_mobile joined
[21:40] <dalek> roast: 0a9e8fb | (Timo Paulssen)++ | S32-exceptions/misc.t:

[21:40] <dalek> roast: ensure $@!foobar doesn't get parsed as $@ by accident.

[21:40] <dalek> roast: review: https://github.com/perl6/roast/commit/0a9e8fbf11

[21:42] <dalek> rakudo/dont_carp_dollar_at_bang: 6d54dc8 | (Timo Paulssen)++ | src/Perl6/Grammar.nqp:

[21:42] <dalek> rakudo/dont_carp_dollar_at_bang: parse special_variable:<$@> just like STD does.

[21:42] <dalek> rakudo/dont_carp_dollar_at_bang: review: https://github.com/rakudo/rakudo/commit/6d54dc88ac

[21:43] * timotimo spectests that commit

[21:45] * Ulti head asplodes from trying to do a super super class that checks the validity of input strings on construction

[21:46] <timotimo> sounds like you just want to compose in a role, honestly

[21:47] <lue> moritz: I should be able to tell you if the tarball is good in a few minutes :)

[21:47] <timotimo> (that's the result i got from shaking my magic 6-ball :)) )

[21:49] <Ulti> the problem I have is that once I have my own constructor the magic that overrides goes all to hell because in BUILD I do a bind to $!something rather than $.something

[21:50] <Ulti> if a subclass has some defined values that were undefined in the super class do these just get mapped as if they were  variable => value passed in the call to new?

[21:51] <Ulti> if I have a BUILD in the super class

[21:51] * moritz -> sleep, R* upload will have to wait for tomorrow

[21:52] <timotimo> need to get my power brick plugged into this laptop now

[21:54] *** denis_boyun__ left
[21:54] *** BenGoldberg joined
[21:55] <timotimo> i don't understand why your BioInfo::Sequence just invariably dies

[21:55] <diakopter> Death does what Death wants

[21:57] <timotimo> Ulti: i think you want something like method residues { <T C A G> } instead of a member

[21:58] <timotimo> alternatively, your DNA/RNA sequences could do a role Sequence[Str @residues]

[21:59] <Ulti> timotimo: testing is why it invariably dies

[22:04] <timotimo> anyway, i think you want something different from a member variable

[22:04] <timotimo> it's a property of the class rather than of any one instance

[22:04] <timotimo> so either do the method or the role?

[22:05] *** aindilis joined
[22:09] <dalek> rakudo/nom: 6d54dc8 | (Timo Paulssen)++ | src/Perl6/Grammar.nqp:

[22:09] <dalek> rakudo/nom: parse special_variable:<$@> just like STD does.

[22:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6d54dc88ac

[22:10] <timotimo> Ulti: commit passes all spectests including the new one i made for the bug you found

[22:11] *** raiph left
[22:11] <timotimo> Ulti: do i understand correctly that you want the sequence to be checked for wrong characters? like an X for example?

[22:12] <Ulti> timotimo not sure I do want the role because some sequences wont be DNA ;)

[22:12] <Ulti> or RNA and use residues which have a tonne of different operations on

[22:12] <timotimo> hmm.

[22:12] <Ulti> but the concept of a constrained alphabet common to them all is still true

[22:13] <timotimo> in that case i'd go for a RestrictedToAlphabet role that has a @.alphabet or a method like that

[22:13] <timotimo> now i'm thinking about what the smartest way to reject strings that have invalid characters in them is.

[22:13] <timotimo> iirc, if you interpolate an array into a regex, it'll work like an LTM alteration

[22:13] <timotimo> let me check that

[22:14] <timotimo> r: my @alts = <foo bar baz>; "bar bar baz" ~~ m:s/ <@alts> +/

[22:14] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: ( no output )

[22:14] <timotimo> r: my @alts = <foo bar baz>; say "bar bar baz" ~~ m:s/ <@alts> +/

[22:14] <camelia> rakudo-parrot d72797, rakudo-jvm d72797: OUTPUT«｢bar bar baz｣␤␤»

[22:14] <timotimo> cool.

[22:14] <timotimo> so you can just match for ^ <@.alphabet> $

[22:16] <Ulti> yeah I already knew you can expand that list to be a character class I did it previously in a little grammar that parsed these sequences working out if it was DNA or RNA

[22:16] <Ulti> well guessing

[22:16] <timotimo> :)

[22:17] <timotimo> for that i would have bag $foo.comb, tbh

[22:19] <Ulti> well this was a grammar that parsed some of the file formats and it just had some rules that let it choose between the three depending on what matched

[22:19] <timotimo> oh

[22:19] <timotimo> well, in that case ... :)

[22:20] <Ulti> so I'm trying to make some classes to build actual objects that are useful from the sequences parsed :)

[22:25] <lue> preflex: tell moritz the only file to differ between the two tarballs is <tarball>/MANIFEST, and *I think* it's just that the sorting of files in them is different. I also don't spot any files that only appear in one tarball.

[22:25] <preflex>  Consider it noted.

[22:25] *** gfldex left
[22:25] <timotimo> lue: send the file through sort on both ends and diff the result

[22:25] *** grondilu left
[22:25] <lue> timotimo: I was just thinking of doing something like that.

[22:26] <timotimo> unix, baby! :)

[22:26] <diakopter> eunuchs, baby

[22:26] <timotimo> a eunuch's baby?

[22:26] <timotimo> that would appear, at first glance, to be unlikely

[22:28] *** colomon left
[22:28] *** xenoterracide joined
[22:29] <lue> I'm relieved, diff <(sort FILE1) <(sort FILE2) gave me no differences :)

[22:29] <timotimo> \o/

[22:30] <timotimo> you should preflex moritz that right away :)

[22:30] <lue> preflex: tell moritz: Just confirmed it's a simple case of the files being listed in a different order in the MANIFESTs. Note that this was *just* the top-level MANIFEST; the others were precisely the same between tarballs.

[22:30] <preflex>  no

[22:30] <lue> preflex: tell moritz Just confirmed it's a simple case of the files being listed in a different order in the MANIFESTs. Note that this was *just* the top-level MANIFEST; the others were precisely the same between tarballs.

[22:30] <preflex>  Consider it noted.

[22:30] <lue> preflex: tell preflex to not be so rude next time.

[22:30] <preflex>  what

[22:31] <timotimo> :D

[22:32] <lue> .oO(My tarball-identicalness check falls apart if one file between two versions changes in such a way to not change the md5sum. Allow me to play with SHA1, just for fun.)

[22:32] *** colomon joined
[22:33] <BenGoldberg> lue, how often does one file change without changing it's md5sum?

[22:34] <timotimo> especially "on accident" :)

[22:34] <lue> BenGoldberg: rarely I would imagine. I just feel like playing with the script I made some more :D

[22:34] <BenGoldberg> Well, that's ok then ;)

[22:34] *** jnap joined
[22:35] * lue should possibly get around to writing that Perl 6 SHA-3 thing sometime. After all, there's no sha3sum on his computer...

[22:35] <timotimo> :D

[22:35] <timotimo> i remember seeing a presentation on how keccak works

[22:36] <timotimo> pretty nice

[22:36] <lue> timotimo: yeah, I really liked trying to figure out it works a while ago. Of course, I've since forgotten everything :)

[22:39] *** jnap left
[22:45] <timotimo> still taking suggestions for a topic i could hold a lightning talk on

[22:47] <lue> timotimo: first thought that popped into my head was the time-bending properties of phasers. Would that fit in a lightning talk format?

[22:47] *** cognominal left
[22:48] <timotimo> only if i can hold the talk in the same time-bent format *and* show people it makes sense to do so

[22:49] *** cognominal joined
[22:49] <lue> :)

[22:49] <timotimo> perl5 had phasers, too, right?

[22:50] <geekosaur> sort of

[22:50] <lue> idk

[22:50] <timotimo> only very limited phasers?

[22:50] <lue> .oO("The introductory material is stored in the penultimate slide *click* *click* *click* *click*")

[22:50] <geekosaur> phasers are a more principled version of what perl5 has

[22:51] <timotimo> well, one gag i could do is have a slide open that says BEGIN { say "it is now {now}" }; say "it is now { BEGIN now }"; say "it is now {now}"

[22:51] <timotimo> and then say only two of those strings during the presentation

[22:52] *** kurahaupo joined
[23:03] *** Ben_Goldberg joined
[23:05] *** BenGoldberg left
[23:06] *** tgt joined
[23:07] *** xenoterracide left
[23:07] *** BenGoldberg joined
[23:10] *** Ben_Goldberg left
[23:14] *** xenoterracide joined
[23:15] <timotimo> i like the idea with the phasers more and more, but i think it'd give a huge "OMFG WHY WOULD ANYONE EVER WANT THIS IN A LANGUAGE" reaction

[23:18] *** jnap joined
[23:19] <lue> timotimo:    now - BEGIN now

[23:19] <lue> :)

[23:19] <timotimo> i know of that idiom

[23:19] <timotimo> but still ...

[23:20] <timotimo> the idea would probably be having slides that have phasers and reading/acting them out in the way they would be run if it were code

[23:20] <lue> oh! Now I remember what trick I was trying to think of (which lead me to suggest phasers):  proto sub will-be-multi(|) { pre-stuff; {*} post-stuff; }

[23:21] *** araujo left
[23:21] *** araujo joined
[23:22] *** kaare__ left
[23:22] <timotimo> that should work, right?

[23:24] <lue> timotimo: sounds like it could work

[23:24] <lue> The KEEP/UNDO phasers seem like really interesting ones, by the way.

[23:24] <timotimo> yes, they do

[23:24] <timotimo> do you know python's "for ... else" construct?

[23:24] <timotimo> and try ... except ... else?

[23:24] *** tgt left
[23:25] <lue> timotimo: It's been a looong time since I've used Py3

[23:25] <timotimo> that's in py2, too

[23:25] <lue> .oO(Also good: CATCH is actually a phaser)

[23:25] <timotimo> has been for a rather long time, i believe

[23:38] *** finanalyst joined
[23:53] *** colomon left
[23:54] *** colomon joined
[23:57] *** rindolf left
