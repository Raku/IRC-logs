[00:06] *** arlinius joined
[00:16] <tadzik> lue: the former is deprecated

[00:22] *** cognominal__ left
[00:25] *** Woodi_ left
[00:25] *** Woodi joined
[00:25] *** jerome left
[00:26] *** jerome joined
[00:28] *** dayangkun joined
[00:43] *** Chillance left
[00:47] *** erkan left
[00:55] *** alec__1 is now known as alec_

[01:13] *** anuby joined
[01:16] *** hypolin joined
[01:16] *** kst` joined
[01:18] *** kst left
[01:24] *** shinobicl joined
[01:29] *** sevin left
[01:39] *** UberFoX left
[01:42] *** sevin joined
[01:49] *** shinobicl left
[01:52] *** sampo joined
[01:56] *** sampo left
[01:57] *** sampo joined
[02:02] *** vmspb left
[02:12] *** MikeFair left
[02:15] *** _jaldhar joined
[02:15] *** jaldhar left
[02:17] *** MikeFair_ joined
[02:24] *** MikeFair__ joined
[02:27] *** MikeFair_ left
[02:30] *** arlinius left
[02:30] *** MikeFair__ left
[02:34] *** MikeFair joined
[02:39] *** MikeFair left
[02:48] *** raiph_ joined
[02:55] <lue> r: my %h; my %g; :(%g, %h) := \(1=>2,3=>4); say %h.perl; say %g.perl

[02:55] <p6eval> rakudo 935c90: OUTPUT¬´This type cannot unbox to a native string‚ê§  in method Capture at src/gen/CORE.setting:5104‚ê§  in block  at /tmp/tj28pwJCK5:1‚ê§‚ê§¬ª

[02:56] *** MikeFair joined
[03:02] *** MikeFair left
[03:02] *** MikeFair__ joined
[03:12] *** swarley- joined
[03:14] *** swarley| left
[03:26] *** swarley| joined
[03:29] *** swarley- left
[03:34] *** dayangkun left
[03:34] *** skids left
[03:35] *** skids joined
[03:43] *** dayangkun joined
[03:46] *** arlinius joined
[03:53] *** TimToady left
[04:07] *** preflex_ joined
[04:08] *** preflex left
[04:08] *** preflex_ is now known as preflex

[04:21] *** sevin left
[04:42] *** dayangkun left
[05:00] *** shinobicl joined
[05:01] *** hulu joined
[05:01] <hulu> helo

[05:02] <hulu> r: my $step = 3; say map({ '192.168.1.' ~ "$_\n"; }, (0, { $^a + $step } ... (256 - (256 % $step)));

[05:02] <p6eval> rakudo 935c90: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unable to parse expression in argument list; couldn't find final ')'‚ê§at /tmp/b2vUWu9iT9:1‚ê§------> [32m^a + $step } ... (256 - (256 % $step)));[33m‚èè[31m<EOL>[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        infix or meta-infix‚ê§    ‚Ä¶

[05:03] <hulu> why this can't run

[05:03] <hulu> r: my $step = 3; say map({ '192.168.1.' ~ "$_\n"; }, (0, { $^a + $step } ... ((256 - (256 % $step)) / $step) * $step));

[05:03] <p6eval> rakudo 935c90: OUTPUT¬´192.168.1.0‚ê§ 192.168.1.3‚ê§ 192.168.1.6‚ê§ 192.168.1.9‚ê§ 192.168.1.12‚ê§ 192.168.1.15‚ê§ 192.168.1.18‚ê§ 192.168.1.21‚ê§ 192.168.1.24‚ê§ 192.168.1.27‚ê§ 192.168.1.30‚ê§ 192.168.1.33‚ê§ 192.168.1.36‚ê§ 192.168.1.39‚ê§ 192.168.1.42‚ê§ 192.168.1.45‚ê§ 192.168.1.48‚ê§ 192.168.1.51‚ê§ 192.168.1.54‚ê§ 192‚Ä¶

[05:04] <hulu> why this run

[05:04] <geekosaur> first one loses for exactly the reason it says.  specifically you lost the closing ) for the map

[05:04] <geekosaur> try counting parens

[05:05] <hulu> r: my $step = 3; say map({ '192.168.1.' ~ "$_\n"; }, (0, { $^a + $step } ... (256 - (256 % $step))));

[05:05] <p6eval> rakudo 935c90: OUTPUT¬´192.168.1.0‚ê§ 192.168.1.3‚ê§ 192.168.1.6‚ê§ 192.168.1.9‚ê§ 192.168.1.12‚ê§ 192.168.1.15‚ê§ 192.168.1.18‚ê§ 192.168.1.21‚ê§ 192.168.1.24‚ê§ 192.168.1.27‚ê§ 192.168.1.30‚ê§ 192.168.1.33‚ê§ 192.168.1.36‚ê§ 192.168.1.39‚ê§ 192.168.1.42‚ê§ 192.168.1.45‚ê§ 192.168.1.48‚ê§ 192.168.1.51‚ê§ 192.168.1.54‚ê§ 192‚Ä¶

[05:05] <hulu> geekosaur: thx

[05:07] *** juiko joined
[05:08] *** Tabrenus joined
[05:09] *** shinobicl left
[05:10] *** sevin joined
[05:11] <hulu> r: my $step = 3; say map({ '192.168.1.' ~ "$_\n"; }, (0, { $^a + $step } ... (256 - (256 % $step))));

[05:11] <p6eval> rakudo 935c90: OUTPUT¬´192.168.1.0‚ê§ 192.168.1.3‚ê§ 192.168.1.6‚ê§ 192.168.1.9‚ê§ 192.168.1.12‚ê§ 192.168.1.15‚ê§ 192.168.1.18‚ê§ 192.168.1.21‚ê§ 192.168.1.24‚ê§ 192.168.1.27‚ê§ 192.168.1.30‚ê§ 192.168.1.33‚ê§ 192.168.1.36‚ê§ 192.168.1.39‚ê§ 192.168.1.42‚ê§ 192.168.1.45‚ê§ 192.168.1.48‚ê§ 192.168.1.51‚ê§ 192.168.1.54‚ê§ 192‚Ä¶

[05:12] <hulu> geekosaur: what's means of $^a

[05:13] <geekosaur> $^ indicates an implicit parameter; rather than declaring them (which would be ``-> $a { ... }'') you just use it, and the first $^something gets the first parameter and the next different $^something will get the second, etc.

[05:13] <geekosaur> it doesn't care what you call them, only the order of use matters

[05:14] <hulu> 0, { $^a + $step } ... 255 where the parameter

[05:15] <geekosaur> the thing there that is doing parameters is map

[05:15] <geekosaur> wait

[05:15] <geekosaur> actually that's a good question, hm

[05:16] <geekosaur> oh, I see

[05:17] <geekosaur> it'sa range expression with a WhateverCode; $^a is the previously generated value

[05:17] *** xinming_ joined
[05:17] <geekosaur> I think you could also say (0, * + $step ... (256 - (256 % $step)))

[05:18] <benabik> It's a range expression with a code block.  A WhateverCode is a auto-generated block from a Whatever (*)

[05:18] <benabik> ... Like that.

[05:19] *** am0c joined
[05:21] *** xinming left
[05:23] *** Patterner left
[05:24] <hulu> r: say (0, * + 3 ... (256 - (256 % 3)))

[05:24] <p6eval> rakudo 935c90: OUTPUT¬´0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 102 105 108 111 114 117 120 123 126 129 132 135 138 141 144 147 150 153 156 159 162 165 168 171 174 177 180 183 186 189 192 195 198 201 204 207 210 213 216 219 222 225‚Ä¶

[05:26] *** Psyche^ joined
[05:26] *** Psyche^ is now known as Patterner

[05:26] <hulu> geekosaur: what a WhateverCode

[05:27] <geekosaur> I may be using the wrong term for this one...

[05:27] <geekosaur> actually I think the *+3 is a whatevercode, yours is just a block

[05:28] <benabik> You can also give a code block for the last entry.  So (0, *+3 ...^ * >= 256)

[05:28] <benabik> Er.  s/>=/>

[05:29] <geekosaur> so, you have a list defined as (start, next ... end)

[05:29] <geekosaur> next and end could be literal numbers, or whatevercode (thing using "*" as the previous value to specify the next or final value as apporpriate) or a {block} which can use a parameter the same way

[05:30] <geekosaur> if you use a block, you either need to use a pointy block (-> $a { ... }) or use an implicit parameter like $^a

[05:30] <geekosaur> if you use whatevercode, it's just * (as, for example, * + 3)

[05:31] <hulu> what (start, next ... end)

[05:31] <geekosaur> (0, * + $step ... (256 - (256 % $step)))

[05:31] <geekosaur> it's a range

[05:31] <hulu> the start is must have

[05:31] <geekosaur> start at 0, next item is * + $step ... end is 256 - (256 % $step)

[05:32] <benabik> S03:1779

[05:32] *** kaleem joined
[05:32] <benabik> It's a sequence.  There is also a range operator, which is somewhat simpler.

[05:32] * geekosaur is heading back to bed now...

[05:35] <hulu> benabik: what the parameter of  {$^a + $step}

[05:35] <benabik> hulu: The previous value of the sequence.

[05:37] <hulu> benabik: what the parameter of  {$^a +  $^b + $step}

[05:38] <benabik> hulu: When given a closure that takes N arguments, the sequence calls it with the previous N values of the sequence.

[05:45] *** alec_ is now known as alec

[05:45] <hulu> r: say 0, 1, 2, { $^a + 1 } ... 255

[05:45] <p6eval> rakudo 935c90: OUTPUT¬´0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91‚Ä¶

[05:45] *** juiko left
[05:45] *** alec is now known as ohrmazd

[05:45] <hulu> benabik: why this not 0 1 2 0 1 2

[05:45] *** ohrmazd is now known as alec

[05:46] <benabik> hulu: Each value is produced by giving the block the last value.  So {$^a + 1} gets 2 the first time, returning 3.  Next time it gets 3 and gives 4.  And so on.

[05:49] *** lestrrat is now known as o_

[05:49] *** o_ is now known as lestrrat

[05:50] <hulu> r: say 0, 1, 2, { $^a + $^b + 1 } ... 255

[05:50] <p6eval> rakudo 935c90: OUTPUT¬´(timeout)¬ª

[05:50] <hulu> r: say 0, 1, 2, { $^a + $^b + 1 } ... 3

[05:50] <p6eval> rakudo 935c90: OUTPUT¬´(timeout)¬ª

[05:50] <benabik> r: say 0,1,2,*+*+1 ... * > 100

[05:50] <p6eval> rakudo 935c90: OUTPUT¬´0 1 2 4 7 12 20 33 54 88 143‚ê§¬ª

[05:51] <benabik> Sequences only stop on exact matches.

[05:52] <hulu> r: say 0, 1, 2, { $^a + $^b + 1 } ... > 100

[05:52] <p6eval> rakudo 935c90: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Preceding context expects a term, but found infix > instead‚ê§at /tmp/MsxQc1lKrU:1‚ê§------> [32msay 0, 1, 2, { $^a + $^b + 1 } ... >[33m‚èè[31m 100[0m‚ê§¬ª

[05:52] <hulu> r: say 0, 1, 2, { $^a + $^b + 1 } ... * > 100

[05:52] <p6eval> rakudo 935c90: OUTPUT¬´0 1 2 4 7 12 20 33 54 88 143‚ê§¬ª

[05:53] <hulu> $^a is 2 $^b is 1

[05:53] <hulu> benabik: ok?

[05:53] <benabik> I think it's the other way around.

[05:54] <benabik> r: say 0,1,2,{say $^a; say $^b; $^b+1}...5

[05:54] <p6eval> rakudo 935c90: OUTPUT¬´1‚ê§2‚ê§2‚ê§3‚ê§3‚ê§4‚ê§0 1 2 3 4 5‚ê§¬ª

[05:54] * benabik goes AFK

[05:55] <hulu> r: say 0,1,2,{say $^a; say $^b;}...5

[05:55] <p6eval> rakudo 935c90: OUTPUT¬´(timeout)1‚ê§2‚ê§2‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§‚Ä¶

[05:57] <hulu> benabik:  what's means 1‚ê§2‚ê§2‚ê§3‚ê§3‚ê§4‚ê§0 1 2 3 4 5

[06:08] <hulu> r: say 0,1,2,{say $^a; say $^b;say $^c; $^b+1}...5

[06:08] <p6eval> rakudo 935c90: OUTPUT¬´0‚ê§1‚ê§2‚ê§1‚ê§2‚ê§2‚ê§2‚ê§2‚ê§3‚ê§2‚ê§3‚ê§3‚ê§3‚ê§3‚ê§4‚ê§3‚ê§4‚ê§4‚ê§0 1 2 2 3 3 4 4 5‚ê§¬ª

[06:09] <hulu> r: say 0,1,2,{say $^a; say $^b;say $^c; $^b+1}...5

[06:09] <p6eval> rakudo 935c90: OUTPUT¬´0‚ê§1‚ê§2‚ê§1‚ê§2‚ê§2‚ê§2‚ê§2‚ê§3‚ê§2‚ê§3‚ê§3‚ê§3‚ê§3‚ê§4‚ê§3‚ê§4‚ê§4‚ê§0 1 2 2 3 3 4 4 5‚ê§¬ª

[06:09] <hulu> r: say 0,1,2,{say $^a; say $^b;say $^c; $^c+1}...5

[06:09] <p6eval> rakudo 935c90: OUTPUT¬´0‚ê§1‚ê§2‚ê§1‚ê§2‚ê§3‚ê§2‚ê§3‚ê§4‚ê§0 1 2 3 4 5‚ê§¬ª

[06:12] <hulu> n: say 0,1,2,{say $^a; say $^b;say $^c; $^c+1}...5

[06:12] <p6eval> niecza v24-18-gaf64300: OUTPUT¬´012{ ... }‚ê§¬ª

[06:13] *** dayangkun joined
[06:28] *** viewer joined
[06:33] *** drbean joined
[06:35] *** FROGGS joined
[06:57] *** PacoAir joined
[07:03] *** PacoAir left
[07:08] *** sevin left
[07:10] <FROGGS> morning

[07:15] <diakopter> o/

[07:17] <arnsholt> 'lo

[07:34] *** cxreg left
[07:39] *** Tabrenus left
[07:43] *** domidumont joined
[07:44] *** am0c left
[08:02] *** domidumont left
[08:04] *** domidumont joined
[08:13] <nwc10> come back fijal. I want to ask you why "(libffi - not recommended)"

[08:14] <FROGGS> nwc10: maybe you write him/her via github: https://github.com/fijal

[08:17] *** fgomez left
[08:18] <GlitchMr> https://github.com/perl6/std/pull/4

[08:19] <GlitchMr> Sounds interesting

[08:20] <moritz> nwc10: or simply message him/her

[08:22] <GlitchMr> Because the code wasn't written by Perl 6 developers? But seriously, I think that libffi is interesting choice.

[08:22] <GlitchMr> Already used in other programming languages.

[08:23] <arnsholt> It may just be because it's not very nice to work with, or something like that

[08:24] <GlitchMr> https://github.com/atgreen/libffi/blob/master/doc/libffi.info

[08:24] <GlitchMr> Is it so hard?

[08:24] <arnsholt> Looking at it now

[08:28] <arnsholt> Dyncall looks more convenient, to be honest

[08:28] <arnsholt> But not sure what fijal meant about libffi

[08:38] *** nebuchadnezzar left
[08:41] *** nebuchadnezzar joined
[08:56] *** hoelzro|away is now known as hoelzro

[08:57] <hoelzro> happy Monday, #perl6!

[08:57] <tadzik> happy happy hoelzro 

[08:59] <mathw> not a happy Monday

[08:59] <mathw> maybe next week's will be happier

[09:00] *** dayangkun left
[09:00] *** kresike joined
[09:00] <kresike> hello all you happy perl6 people

[09:06] <tadzik> am I the only one around here who is suffering because they had to get up from the bed? ;)

[09:07] <mathw> possibly

[09:07] <mathw> I've got to have an unpleasant conversation with my boss

[09:10] *** oliver_ joined
[09:11] *** oliver_ left
[09:11] *** GlitchMr- joined
[09:13] *** dayangkun joined
[09:13] <arnsholt> tadzik: Nope =)

[09:13] <arnsholt> My gf started work at 8 this morning, and I usually leave with her

[09:13] <arnsholt> So I had to get up a bit earlier than I'm used to =)

[09:14] *** GlitchMr left
[09:14] <tadzik> oh, the horror

[09:15] <tadzik> I wasn't able to wake up at my usual 7.30, and had to postpone it to 8.30

[09:15] <tadzik> yes, that's late, but I'm barely conscious anyway :|

[09:15] <arnsholt> Hehe

[09:16] <FROGGS> I was pretty awake when I got up at 6 (have the coffee machine + timer in bedroom now ...), but now I cant move my head (sleeping at $kids-bedroom.floor() isnt that comfortable as it seems)

[09:20] *** sqirrel joined
[09:31] *** wtw joined
[09:38] *** swarley| left
[09:38] *** swarley| joined
[09:45] *** Psyche^ joined
[09:48] *** Patterner left
[09:48] *** Psyche^ is now known as Patterner

[09:48] *** dakkar joined
[09:57] *** sqirrel left
[10:02] <grondilu> ;;ticker

[10:04] * FROGGS 7deb9d7: OUTPUT¬´===SORRY!===‚ê§Undeclared routine:‚ê§ 'ticker' used at line 1‚ê§Check failed‚ê§FAILED 00:00 41m‚ê§¬ª

[10:10] *** dayangkun left
[10:13] <moritz> :-)

[10:13] *** bbkr__ joined
[10:17] *** fhelmberger joined
[10:17] *** bbkr_ left
[10:19] *** imarcusthis- joined
[10:20] *** imarcusthis left
[10:20] *** anuby left
[10:20] *** bbkr_ joined
[10:23] *** bbkr__ left
[10:24] *** bbkr__ joined
[10:25] *** bbkr_ left
[10:26] *** bbkr_ joined
[10:28] *** bbkr__ left
[10:29] *** grondilu_ joined
[10:30] *** bbkr__ joined
[10:32] *** grondilu left
[10:34] *** bbkr_ left
[10:35] *** bbkr__ left
[11:00] <hulu> r: say ~<abstract Concrete>.sort;

[11:00] <p6eval> rakudo 935c90: OUTPUT¬´Concrete abstract‚ê§¬ª

[11:01] <hulu> what's means ~<>

[11:02] <hoelzro> r: say ~0.WHAT

[11:02] <p6eval> rakudo 935c90: OUTPUT¬´use of uninitialized value of type Int in string context  in block  at /tmp/D_hnEYr1mh:1‚ê§‚ê§‚ê§¬ª

[11:03] <hulu> r: say ~0;

[11:03] <p6eval> rakudo 935c90: OUTPUT¬´0‚ê§¬ª

[11:03] <hulu> r: say 0~0;

[11:03] <p6eval> rakudo 935c90: OUTPUT¬´00‚ê§¬ª

[11:03] <hoelzro> =(

[11:03] <hoelzro> hulu: I *think* it's "stringify"

[11:04] <hulu> hoelzro: what's stringify

[11:04] <hoelzro> hulu: converting the argument to a String

[11:04] <hoelzro> r: say 0.WHAT

[11:04] <p6eval> rakudo 935c90: OUTPUT¬´Int()‚ê§¬ª

[11:04] <hoelzro> r: say (~0).WHAT

[11:04] <p6eval> rakudo 935c90: OUTPUT¬´Str()‚ê§¬ª

[11:05] <hulu> r: say (~<abstract Concrete>).WHAT;

[11:05] <p6eval> rakudo 935c90: OUTPUT¬´Str()‚ê§¬ª

[11:06] <hulu> r: say <abstract Concrete>.WHAT;

[11:06] <p6eval> rakudo 935c90: OUTPUT¬´Parcel()‚ê§¬ª

[11:06] <hoelzro> hmm

[11:06] <hoelzro> r: say ~Int

[11:06] <p6eval> rakudo 935c90: OUTPUT¬´use of uninitialized value of type Int in string context  in block  at /tmp/gz52w_NsxM:1‚ê§‚ê§‚ê§¬ª

[11:06] <hoelzro> interesting, but not unexpected

[11:06] <moritz> infix ~ concatenates, prefix ~ stringifies

[11:07] *** Su-Shee_ joined
[11:07] <hulu> r: say <abstract Concrete>.sort;

[11:07] <p6eval> rakudo 935c90: OUTPUT¬´Concrete abstract‚ê§¬ª

[11:07] <hulu> r: say <abstract Concrete>.sort.WHAT;

[11:07] <p6eval> rakudo 935c90: OUTPUT¬´Parcel()‚ê§¬ª

[11:10] *** Su-Shee left
[11:12] <hulu> moritz: what means of stringifies

[11:12] <moritz> hulu: to turn into a string

[11:12] <moritz> hulu: by the way, the correct way to ask the question is: "What does stringifies means?"

[11:12] <arnsholt> s/means/mean/ # =)

[11:13] <hulu> moritz: thx my english is poor

[11:16] *** SmokeMachine joined
[11:22] *** viewer left
[11:22] *** SmokeMac_ joined
[11:25] *** SmokeMachine left
[11:28] *** SmokeMachine joined
[11:28] *** domidumont left
[11:31] *** SmokeMac_ left
[11:42] *** sampo left
[11:51] *** erkan joined
[11:51] *** erkan left
[11:51] *** erkan joined
[11:52] *** hulu_ joined
[11:52] *** hulu left
[11:52] *** hulu_ left
[11:53] *** hulu joined
[11:56] <hulu> r: my @doors = False xx 101;($_ = !$_ for @doors[0, * + $_ ...^ * > 100]) for 1..100;say "Door $_ is ", <closed open>[ @doors[$_] ] for 1..100;

[11:56] <p6eval> rakudo 935c90: OUTPUT¬´Door 1 is open‚ê§Door 2 is closed‚ê§Door 3 is closed‚ê§Door 4 is open‚ê§Door 5 is closed‚ê§Door 6 is closed‚ê§Door 7 is closed‚ê§Door 8 is closed‚ê§Door 9 is open‚ê§Door 10 is closed‚ê§Door 11 is closed‚ê§Door 12 is closed‚ê§Door 13 is closed‚ê§Door 14 is closed‚ê§Door 15 is closed‚ê§Door 16 is‚Ä¶

[11:57] *** Liz_ joined
[11:57] *** Liz_ is now known as lizmat

[11:58] <hulu> what does '@doors[0, * + $_ ...^ * > 100]' mean?

[11:58] *** SmokeMachine left
[11:59] *** SmokeMachine joined
[12:01] <hulu> helo

[12:01] *** cognominal joined
[12:02] *** SmokeMac_ joined
[12:02] *** breinbaas joined
[12:05] *** SmokeMachine left
[12:07] *** brrt joined
[12:09] <hulu> moritz: what does '@doors[0, * + $_ ...^ * > 100]' mean?

[12:10] *** SmokeMac_ left
[12:16] <hulu> who can help me

[12:19] <brrt> hulo, whats your question?

[12:19] <brrt> hulu, sorry :-)

[12:19] <brrt> let me see‚Ä¶..

[12:20] *** hypolin left
[12:20] <hulu> brrt: what does '@doors[0, * + $_ ...^ * > 100]' mean?

[12:21] *** swarley- joined
[12:21] <brrt> honestly

[12:21] <brrt> i do not know :-)

[12:21] <brrt> it seems like constructing a slice

[12:21] <brrt> obviously

[12:21] <brrt> but i'm not sure why the 0 is neccessary

[12:22] <hoelzro> you need it to give the sequence a place to start, I think

[12:22] <hoelzro> ...^ is "up until", I think

[12:22] <cognominal> nr: $_=5; 0, * + $_ ...^ * > 100

[12:22] <p6eval> rakudo 935c90, niecza v24-18-gaf64300:  ( no output )

[12:22] <hoelzro> * > 100 is the ending condition

[12:22] <cognominal> nr: $_=5; say 0, * + $_ ...^ * > 100

[12:22] <p6eval> rakudo 935c90, niecza v24-18-gaf64300: OUTPUT¬´0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100‚ê§¬ª

[12:22] <brrt> clearly

[12:22] <brrt> ah

[12:23] <brrt> it is a sequence from up to where * is higher than 100

[12:23] <hulu> thx

[12:23] <brrt> * is replaced by a magic variable or something

[12:23] <hulu> what does 'up until' mean?

[12:23] <FROGGS> nr: say 0 ...^ 10

[12:23] <p6eval> rakudo 935c90, niecza v24-18-gaf64300: OUTPUT¬´0 1 2 3 4 5 6 7 8 9‚ê§¬ª

[12:24] <brrt> nr: say ^10

[12:24] <p6eval> rakudo 935c90, niecza v24-18-gaf64300: OUTPUT¬´0..^10‚ê§¬ª

[12:24] <hoelzro> hulu: it means up to, but not including

[12:24] <brrt> nr: say ( ^10 );

[12:24] <p6eval> rakudo 935c90, niecza v24-18-gaf64300: OUTPUT¬´0..^10‚ê§¬ª

[12:24] *** swarley| left
[12:24] <FROGGS> nr: say ( @( ^10 ) );

[12:24] <p6eval> rakudo 935c90, niecza v24-18-gaf64300: OUTPUT¬´0 1 2 3 4 5 6 7 8 9‚ê§¬ª

[12:25] <hulu> r: say ( ^10 );

[12:25] <p6eval> rakudo 935c90: OUTPUT¬´0..^10‚ê§¬ª

[12:26] <hulu> r: say ( ( ^10 ));

[12:26] <p6eval> rakudo 935c90: OUTPUT¬´0..^10‚ê§¬ª

[12:26] <hulu> say ( @( ^10 ) ); what does '@' mean?

[12:26] <hulu> FROGGS: say ( @( ^10 ) ); what does '@' mean?

[12:26] *** Gruber joined
[12:27] <FROGGS> it is a list contextualizer, it populates the (lazy) list into its elements

[12:27] *** bruges joined
[12:27] <FROGGS> should be the same as:

[12:27] *** swarley- left
[12:27] <FROGGS> nr: say ^10.list

[12:27] <p6eval> rakudo 935c90, niecza v24-18-gaf64300: OUTPUT¬´0..^1‚ê§¬ª

[12:27] <FROGGS> hmmm

[12:27] <FROGGS> nr: say( ^10.list )

[12:28] <p6eval> rakudo 935c90, niecza v24-18-gaf64300: OUTPUT¬´0..^1‚ê§¬ª

[12:28] <cognominal> rn: say  $_=5; 0, * + $_ ...^ { $_ > 100 }

[12:28] <p6eval> rakudo 935c90, niecza v24-18-gaf64300: OUTPUT¬´5‚ê§¬ª

[12:28] <cognominal> rn:  $_=5; say 0, * + $_ ...^ { $_ > 100 }

[12:28] <p6eval> rakudo 935c90, niecza v24-18-gaf64300: OUTPUT¬´0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100‚ê§¬ª

[12:28] *** imarcusthis- left
[12:29] *** pjcj left
[12:30] *** imarcusthis joined
[12:30] *** breinbaas left
[12:30] <cognominal> because that a simple list, perl 6 could figure it out itself

[12:30] *** breinbaas joined
[12:30] <cognominal> rn: say   0, 5, 10 ...^ { $_ > 100 }

[12:30] <p6eval> rakudo 935c90, niecza v24-18-gaf64300: OUTPUT¬´0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100‚ê§¬ª

[12:31] *** pjcj joined
[12:31] *** bruges_ left
[12:31] <FROGGS> nr: say (^10).list

[12:32] <p6eval> rakudo 935c90, niecza v24-18-gaf64300: OUTPUT¬´0 1 2 3 4 5 6 7 8 9‚ê§¬ª

[12:32] <FROGGS> there you go

[12:32] *** Su-Shee_ is now known as Su-Shee

[12:32] <brrt> nr: say 0.list

[12:32] <p6eval> rakudo 935c90, niecza v24-18-gaf64300: OUTPUT¬´0‚ê§¬ª

[12:36] <cognominal> nr: say 0.list.perl

[12:36] <p6eval> rakudo 935c90: OUTPUT¬´(0,).list‚ê§¬ª

[12:36] <p6eval> ..niecza v24-18-gaf64300: OUTPUT¬´(0, ).list‚ê§¬ª

[12:36] *** bbkr_ joined
[12:36] <cognominal> which is redundant

[12:37] <cognominal> nr: say (0,).perl

[12:37] <p6eval> rakudo 935c90: OUTPUT¬´(0,)‚ê§¬ª

[12:37] <p6eval> ..niecza v24-18-gaf64300: OUTPUT¬´(0, )‚ê§¬ª

[12:37] <cognominal> or not :)

[12:37] <cognominal> nr: say (0,).WHAT.perl

[12:37] <p6eval> rakudo 935c90, niecza v24-18-gaf64300: OUTPUT¬´Parcel‚ê§¬ª

[12:37] <cognominal> I keep forgetting about parcels

[12:44] *** hulu left
[12:51] *** sqirrel joined
[12:57] *** bbkr left
[12:57] *** kaleem left
[13:04] *** SmokeMachine joined
[13:36] *** onlooker989781 joined
[13:37] *** cognominal left
[13:37] *** Targen left
[13:48] * [Coke] grumbles at himself for not finding any time to hack on nqp-jvm this weekend. bad Coke.

[13:48] <[Coke]> jnthn++ # blog post.

[13:54] *** GGG joined
[13:54] *** GGG left
[14:02] <dalek> perl6-roast-data: f73924b | coke++ | / (4 files):

[14:02] <dalek> perl6-roast-data: today (automated commit)

[14:02] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/f73924b37e

[14:02] <dalek> perl6-roast-data: c1edff8 | coke++ | / (4 files):

[14:02] <dalek> perl6-roast-data: today (automated commit)

[14:02] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/c1edff886e

[14:02] <dalek> perl6-roast-data: 6949883 | coke++ | / (4 files):

[14:02] <dalek> perl6-roast-data: today (automated commit)

[14:02] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/69498832db

[14:06] *** b1rkh0ff left
[14:08] *** atrodo joined
[14:08] *** bluescreen10 joined
[14:13] <[Coke]> looks like a few more rakudo failures crept in.

[14:14] *** PacoAir joined
[14:20] *** bluescreen10 left
[14:20] *** b1rkh0ff joined
[14:20] <moritz> huh

[14:20] <moritz> my last spectests were all clean

[14:20] *** bluescreen10 joined
[14:21] *** cognominal joined
[14:27] *** kaare_ joined
[14:29] <FROGGS> mine too

[14:38] *** arlinius left
[14:54] *** PacoAir left
[15:01] *** PacoAir joined
[15:01] *** stopbit joined
[15:03] *** isBEKaml joined
[15:03] <[Coke]> 865c95f roast, rakudo has 25 failures. doesn't say which version of rakudo, but it's...

[15:04] <[Coke]> 6d5dc67

[15:04] *** SamuraiJack joined
[15:04] <[Coke]> this is with whatever config we have available on rakudo. Could be something due to ICU, due to the fact that's running via cron and not a login shell...

[15:05] <[Coke]> Note that the command line "dash-e" failures have been occurring for a while as well.

[15:05] <[Coke]> if I need more env vars in https://github.com/coke/perl6-roast-data/blob/master/bin/rakudo.sh, that can be arranged

[15:05] *** FROGGS left
[15:06] <[Coke]> also, I'm running via t/spec/test_summary, not "make spectest"

[15:09] <timotimo> [Coke]: it would be super weird if ICU were missing due to not having a login shell :|

[15:11] *** benabik left
[15:11] <isBEKaml> hello, #perl6!

[15:33] *** nuba left
[15:37] <[Coke]> timotimo: those are 2 different issues.

[15:38] <[Coke]> yes, it would be super weird if they were related.

[15:46] <timotimo> oh, haha d)

[15:46] <timotimo> :) okay

[15:46] *** kresike left
[15:47] *** FROGGS joined
[15:58] <timotimo> is "moreinput" the mechanism in STD that detects when a line isn't complete yet?

[15:58] <moritz> s/line/statement/ I think

[15:58] *** SamuraiJack_ joined
[15:59] <timotimo> er, yeah

[15:59] <timotimo> you would register a function that does, for instance, a prompt and readline to that moreinput thing?

[15:59] <moritz> yes

[16:00] <timotimo> hm, that seems pretty simple to port over to rakudo. i must be missing something obvious

[16:02] *** SamuraiJack left
[16:02] <moritz> I hope you are right

[16:05] <timotimo> you hope i'm missing something obvious? :P

[16:06] <moritz> no, I hope you are righ that it is easy to port

[16:06] *** SmokeMac_ joined
[16:07] <timotimo> if i see correctly, it only touches the whitespace rule and the unspace rule

[16:08] *** SmokeMachine left
[16:11] *** TimToady joined
[16:12] *** kaleem joined
[16:20] *** cognominal left
[16:22] * masak is back home o/

[16:26] <ingy> /o\

[16:27] <timotimo> \o\

[16:27] <masak> /o/

[16:28] <PerlJam> _o_

[16:28] <masak> ^o^

[16:28] <isBEKaml> |o|

[16:28] <masak> ~o~

[16:28] <ingy> |+√∂+|

[16:28] <isBEKaml> *o*

[16:28] <masak> [o]

[16:28] <PerlJam>  o 

[16:29] <isBEKaml> /o/\

[16:29] *** SunilJoshi joined
[16:29] <TimToady> ¬ªoÃ§¬´

[16:29] <ingy> √∂rz

[16:30] <masak> ¬ª≈ë¬´

[16:31] * ingy pines for TimT√∂ady

[16:31] * TimToady hums The Pines of R√∂me

[16:32] <isBEKaml> (Àö‡ÆáÀö)

[16:32] *** kaleem_ joined
[16:33] <masak> isBEKaml: vute!

[16:33] <masak> cute*

[16:34] <TimToady> is that an elephant with its nose tied in a knot?

[16:34] *** cognominal joined
[16:34] <timotimo> Àá[Àá

[16:34] <isBEKaml> TimToady: kind of. :D

[16:35] *** kaleem left
[16:35] *** alec left
[16:35] <isBEKaml> it's a Tamil letter, pronounced "e" (like how you pronounce the letter "e")

[16:35] *** fgomez joined
[16:35] <TimToady> that's part of why I suggested it was an elephant

[16:36] <isBEKaml> or a swirling vortex. 

[16:36] <isBEKaml> Ah, I see what you did there. ;)

[16:40] <TimToady> I looked up the actual Unicode (and its sound, which suggests an elephant trumpeting) before suggesting the elephant :)

[16:41] <TimToady> though I would not go as far as to claim that it's how an elephant trumpeting would actually be represented in the Tamil language

[16:44] <isBEKaml> Then that audio must have been quite loud! :)

[16:44] <masak> maybe it's a capital ‡Æá ? :)

[16:45] <isBEKaml> :D

[16:46] *** kaleem_ left
[16:47] <masak> TimToady: any reactions to my suggestion to add defaults to subtypes?

[16:48] <masak> TimToady: should I patch STD.pm6 while I patch the spec? ;)

[16:48] *** alec joined
[16:49] *** [hds] joined
[16:50] *** [hds] left
[16:50] *** palakas_ left
[16:51] <jnthn> evening, #perl6

[16:51] <brrt> hi jnthn

[16:52] <jnthn> masak: Add...what? :)

[16:52] <masak> jnthn: http://irclog.perlgeek.de/perl6/2013-02-03#i_6406843

[16:53] <brrt> jnthn, is there a repo / branch for the nqp-jvm port?

[16:53] <isBEKaml> hello, jnthn

[16:53] <masak> brrt: http://irclog.perlgeek.de/perl6/2013-02-03#i_6406843

[16:53] <masak> ugh.

[16:54] <masak> brrt: https://github.com/jnthn/nqp-jvm-prep

[16:54] *** SamuraiJack_ left
[16:54] <brrt> masak++ thanks :-)

[16:54] <masak> brrt: when in doubt, check someone's github account ;)

[16:54] <brrt> right

[16:54] <brrt> i had looked at the perl6 account only :-)

[16:54] *** SamuraiJack_ joined
[16:55] <jnthn> masak: OK, can you demonstrate the use case for them?

[16:55] <jnthn> masak: Their semantics, where they'd apply, etc.

[16:55] *** PacoAir left
[16:56] <masak> jnthn: the default is used for uninitialized variables and unbound parameters. the default is *checked* against the subtype constraint at BEGIN time.

[16:56] <masak> I'm undecided about whether the default should be thunked, like the lhs of infix:<xx>.

[16:57] <masak> but mostly because I haven't thought about a use case for either choice yet.

[16:57] * jnthn would be more convinced if he saw a prototype implementation also ;)

[16:58] <FROGGS> ahh, hi all!

[16:58] <masak> aaaaaahhhh hi FROGGS! \o/

[16:59] <jnthn> bbi10

[16:59] <masak> jnthn: I'll... see what I can do.

[16:59] <isBEKaml> masak: are we trying to take over programmer errors too? :)

[16:59] <masak> isBEKaml: please be more specific.

[16:59] <jnthn> masak: Failing that though, concrete use cases would be nice :)

[17:00] <masak> jnthn: I hate it that the default value of Odd (as defined in the spec) is divisible by 2

[17:00] <FROGGS> (¬∞o¬∞)

[17:00] <FROGGS> TimToady: have you seen my pull request?

[17:00] <masak> jnthn: I think this should be addressed. I think defaults is the right fix. Ada has'em.

[17:00] <isBEKaml> masak: uninitialized variables form a subset of programmer errors. That said, I don't see where we can use defaults for subtype constraints. 

[17:01] <masak> jnthn: it's like giving the subtype a new "zero".

[17:01] <masak> isBEKaml: you *don't* see why we *can* use? did you forget a negation? :P

[17:01] <tadzik> hi!

[17:01] <isBEKaml> masak: I don't don't see. :P

[17:01] <masak> oh, *where* we can...

[17:02] <masak> tadzik! \o/

[17:02] <tadzik> \o/

[17:02] <isBEKaml> tadzik!

[17:02] <timotimo> are those defaults relevant to autovivification at all?

[17:02] <masak> depends if you can type container types with subtypes.

[17:02] <masak> I guess you can.

[17:03] <isBEKaml> like my Parent $foo = Child.new(blah) ?

[17:04] <masak> those are not the subtypes I'm talking about.

[17:04] <isBEKaml> linky on irclog, please? (I have no context) :(

[17:04] <tadzik> nothing like a good starwars reference :)

[17:04] <timotimo> "you don't need to see this subtype's ident card. move along" *waves hand*

[17:04] <masak> r: subset Odd of Int where { $_ % 2 }; my Odd $n; say $n

[17:04] <p6eval> rakudo 935c90: OUTPUT¬´Odd()‚ê§¬ª

[17:04] <masak> r: subset Odd of Int where { $_ % 2 }; my Odd $n; say $n % 2

[17:04] <p6eval> rakudo 935c90: OUTPUT¬´Parameter '' requires an instance, but a type object was passed‚ê§  in method Bridge at src/gen/CORE.setting:3117‚ê§  in sub infix:<%> at src/gen/CORE.setting:3034‚ê§  in block  at /tmp/ppcw3JC6AV:1‚ê§‚ê§¬ª

[17:04] <masak> r: subset Odd of Int where { $_ % 2 }; my Odd $n; say +$n % 2

[17:04] <p6eval> rakudo 935c90: OUTPUT¬´use of uninitialized variable $n of type Odd in numeric context  in block  at /tmp/eNFecDoxuf:1‚ê§‚ê§0‚ê§¬ª

[17:05] <masak> r: subset Odd of Int where { $_ % 2 }; my Odd $n; say so +$n % 2

[17:05] <p6eval> rakudo 935c90: OUTPUT¬´use of uninitialized variable $n of type Odd in numeric context  in block  at /tmp/sOt4exUmiD:1‚ê§‚ê§False‚ê§¬ª

[17:05] <masak> see?

[17:05] <masak> Odd can be *even*.

[17:05] <masak> (because we don't have a defaults mechanism)

[17:05] *** hoelzro is now known as hoelzro|away

[17:05] *** brrt left
[17:05] <masak> the current proposal is 'subset Odd of Int where { $_ % 2 } default 1;' -- but I'm not married to the syntax.

[17:07] <isBEKaml> Okay, I see you're talking of constrained types. ( I was confused by the wording of subtypes)

[17:07] <masak> sorry for confusing you.

[17:07] <masak> they're called subtypes in the spec.

[17:08] <FROGGS> masak: what are you proposing to change? an implicit default value?

[17:08] <timotimo> an explicit default value

[17:09] <masak> right.

[17:09] <FROGGS> who? :P

[17:09] <isBEKaml> be explicit!

[17:09] <masak> for when the default (type object) of the wrapped type doesn't cut it.

[17:09] <masak> like with 'Odd'.

[17:09] <isBEKaml> r: my Int $foo; say $foo;

[17:09] <p6eval> rakudo 935c90: OUTPUT¬´Int()‚ê§¬ª

[17:09] <isBEKaml> :/

[17:10] <isBEKaml> r: my Int $foo; say +$foo;

[17:10] <p6eval> rakudo 935c90: OUTPUT¬´use of uninitialized variable $foo of type Int in numeric context  in block  at /tmp/7F5njj5t9Q:1‚ê§‚ê§0‚ê§¬ª

[17:10] <masak> FROGGS, isBEKaml: the default value is *implicit* if you don't supply it, and *explicit* if you do.

[17:10] <jnthn> masak: I think S09 may have something about the default value of an array slot.

[17:10] <masak> I'm not proposing it has to be supplied, always.

[17:10] <jnthn> masak: It may be nice if we can unify these things.

[17:10] <masak> jnthn: ooh

[17:10] <isBEKaml> masak: Taking yoru example of subset Odd of Int, why not used Int's defaults? (is that how it is, currently?  - I'd guess so)

[17:11] * FROGGS .oO( unicorns++ )

[17:11] <masak> I may or may not be proposing that if you *don't* supply a default and the implicit default doesn't pass the subtype's test, that's a compile-time error.

[17:11] <masak> isBEKaml: yes, that's how it is now. and the Int() type object, when modulo'd by 2, produces a warning and results in 0, falsy. so Int() is *not* Odd.

[17:11] <masak> isBEKaml: and that bothers me.

[17:12] <masak> isBEKaml: if you were to use the subtype in a parameter list, for example, it's technically possible (just by not passing anything) to get a value in the variable that doesn't pass the subtype test. which makes it rather a weak precondition. :/

[17:15] <isBEKaml> masak: Right - so you want to allow the programmer to specify defaults explicitly and at the same time ban weak predicates? (The latter is not what you said, but hey, it's a nice topping. ;)

[17:15] <masak> jnthn: didn't find anything in S09 about array slot defaults :/

[17:16] <masak> isBEKaml: something like that. I want subtypes to always hold, and currently, type objects (and the inability to supply defaults) can make them not hold.

[17:17] <japhb> I agree with that argument, FWIW.

[17:17] <masak> \o/

[17:17] <isBEKaml> masak: I agree, it would be nice to have. 

[17:17] <japhb> Especially the bit about parameter constraints not actually constraining the arguments.

[17:18] <japhb> That's ... a real problem.

[17:18] <masak> it's been bothering me for years.

[17:18] <jnthn> Is it me, or did the "view raw" link disappear on https://github.com/perl6/specs/blob/master/S02-bits.pod

[17:18] <masak> now please discuss (1) whether the default (explicit or implicit) not passing the subtype test should be a compile-time error, and (2) syntax. I'll be away for ~45 minutes ;)

[17:19] <isBEKaml> jnthn: "Sorry, blob took too long to generate" :)

[17:19] <jnthn> isBEKaml: Yes, there used to be a "view it as raw text" link.

[17:19] <FROGGS> https://raw.github.com/perl6/specs/master/S02-bits.pod

[17:19] <FROGGS> dont see the link either

[17:20] *** palakas joined
[17:20] <cognominal> me neither

[17:20] <jnthn> masak: Oh, I was thinking of the "is default" trait in S02...

[17:21] <japhb> An explicit default that doesn't pass the subtype test is clearly insane.  Compile time error, no question in my mind.

[17:22] <FROGGS> japhb: an implicit default that doesnt pass is insane too

[17:22] <japhb> I would argue having an implicit default that doesn't pass is not a good thing, but it's also not clearly insane, because you as the programmer might know that the default never gets used.

[17:22] <masak> jnthn: an "is default" trait might be cleaner, yes.

[17:22] <japhb> (I'm not saying it's clear that it *shouldn't* whine, but I am saying that it's *not* clear it *should*.)

[17:23] <FROGGS> I vote for an 'is insane' trait ;o)

[17:23] <isBEKaml> what about the case where we specify constrained types on custom types? What if there were an implicit default? (I'm not sure if this is even possible, constrained types on custom types)

[17:24] <TimToady> .oO(subset roles...)

[17:25] <masak> japhb: agreed.

[17:25] <TimToady> the idea of defaults has been in the air for several years now; it shows up in the discussion KeyHash for instance, and we've talked about it several times on IRC

[17:26] <TimToady> it kinda makes sense to put defaults on a subtype, and it kinda doesn't

[17:27] <TimToady> it feels like a too-concrete thing for a subtype to be claiming

[17:27] <japhb> TimToady, it almost feels like the base types not having explicitly declared defaults is "a magic list of constants to remember"

[17:27] <japhb> So I don't think subtypes are special in this sense.

[17:27] <TimToady> otoh, it might be the most convenient peg to hang it, if we don't have a better peg

[17:28] <TimToady> base types are designed to allow at least one out-of-band value (Maybe types in H-land)

[17:29] <TimToady> and subtypes are more like Just types

[17:29] <TimToady> I suspect there are conflicting use cases for defaults interacting here...

[17:31] <TimToady> unmarked value vs identity value vs out-of-band value vs [your ad here]

[17:32] <TimToady> most likely value

[17:32] <TimToady> (and hence, can usually be omitted)

[17:32] <TimToady> most likely starting value

[17:32] <japhb> Don't identity values come from operators, not operands?

[17:32] <TimToady> there are just a lot of different reasons you might want a default

[17:33] <TimToady> japhb: sure, but my confidence was shaken recently

[17:33] <japhb> oh?

[17:34] <TimToady> in thinking about longest-zip, I was thinking the missing value could be determined by the operator

[17:34] <TimToady> but then a recent RC entry wanted 0 default for *

[17:37] <japhb> I'm not entirely sure what to make of that.

[17:37] *** benabik joined
[17:37] <japhb> My immediate reaction is to blame the RC entry, because of years of government training ... er, I mean public schooling.

[17:37] *** arlinius joined
[17:38] <japhb> OTOH, I have myself seen cases where I wanted a 0 to fall out of multiplying an empty list.

[17:38] <TimToady> well, only relates to the current topic tangentially

[17:39] <japhb> Must go afk, will backlog

[17:41] <TimToady> it's in http://rosettacode.org/wiki/Numeric_error_propagation#Perl_6 in the calculation of covariance

[17:41] <TimToady> if there was a longest zip that could default Z* to 0, I wouldn't have to jump through hoops with the @INDEP array

[17:42] <TimToady> which is just a backdoor to lengthen all the independent error vectors to the same length, so that Z works

[17:47] <moritz> r: say roundrobin((1, 2, 3); (10, 20)).map({ [+] @$_ }).perl

[17:47] <p6eval> rakudo 935c90: OUTPUT¬´(1, 10, 2, 20, 3).list‚ê§¬ª

[17:47] <moritz> r: say roundrobin((1, 2, 3); (10, 20)).tree.map({ [+] @$_ }).perl

[17:47] <p6eval> rakudo 935c90: OUTPUT¬´(11, 22, 3).list‚ê§¬ª

[17:47] <moritz> looks like a longest zip with default 0 to me

[17:49] <jnthn> dinner &

[17:52] <TimToady> r: say roundrobin((1, 2, 3); (10, 20)).tree.map({ [*] @$_ }).perl

[17:52] <p6eval> rakudo 935c90: OUTPUT¬´(10, 40, 3).list‚ê§¬ª

[17:52] <TimToady> moritz: doesn't default to 0 for *

[17:53] <moritz> oh right

[17:53] *** Chillance joined
[17:57] <TimToady> mind, I'm just cargo-culting the formulas from the p5 code without thinking about what they mean :)

[17:58] <masak> TimToady: maybe a :default adverb on reduction metaops would help in your use case?

[17:59] *** dakkar left
[18:04] <TimToady> it feels like it very nearly defeats all the notational convenience of Z, but perhaps it's still clearer than the alternatives

[18:06] *** SamuraiJack_ left
[18:15] *** fhelmberger left
[18:15] *** SamuraiJack joined
[18:15] <moritz> is there any other metaop than Z that might benefit from a default?

[18:16] *** PacoAir joined
[18:17] <masak> oh, I meant [op], not Zop

[18:18] *** arlinius left
[18:24] *** benabik_ joined
[18:24] *** benabik left
[18:24] *** benabik_ is now known as benabik

[18:27] *** spider-mario joined
[18:32] <moritz> when would a default for [op] kick in? for undefined values?

[18:33] * [Coke] wonders what calling out to native java classes from nqp-jvm would look like.

[18:38] *** zby_home joined
[18:39] *** domidumont joined
[18:41] *** SamuraiJack left
[18:41] *** zby_home left
[18:42] <cognominal> moritz, indent with a negative indent as used per heredoc messes up with tabs after the indent zone in a line. That's makes heredoc poor suited to generate Makefiles

[18:43] <cognominal> * poorly

[18:44] <japhb> r: my @a; my @b = (5); say [*] @a; say [*] @b; say +@a && [*] @a; say +@b && [*] @b;

[18:44] <p6eval> rakudo 935c90: OUTPUT¬´1‚ê§5‚ê§0‚ê§5‚ê§¬ª

[18:44] <masak> cognominal: oh, interesting use case.

[18:44] <japhb> ^ FWIW, a solution to at least *my* problem with the default of [*];

[18:44] <masak> cognominal: might be indent is not the solution for Makefiles, though.

[18:45] <masak> oh, heredocs. hm.

[18:45] *** zby_home_ joined
[18:45] <japhb> It works, but it's a tad too "clever".

[18:45] <cognominal> rn: say "  \t".indent(-2).perl

[18:45] <p6eval> rakudo 935c90, niecza v24-18-gaf64300: OUTPUT¬´"      "‚ê§¬ª

[18:45] <masak> cognominal: yeah.

[18:45] <masak> by design.

[18:46] <cognominal> I would prefer by default and have an option to preserve tabs :)

[18:47] * masak mulls over this

[18:49] <cognominal> for what should be the default, I am not sure; but I advocate the possibility to override it

[18:50] <cognominal> We generate Makefiles in rakudo btw, but with Perl 5, I think.  :)

[18:52] *** raiph__ joined
[18:52] <felher> Am I missing something or doesn't Buf have a elems method as per specification?

[18:53] <felher> Oh, maube in Stringy...

[18:54] <cognominal> nr: say Buf.^find_method('elems').WHAT

[18:54] <p6eval> rakudo 935c90: OUTPUT¬´Method()‚ê§¬ª

[18:54] <p6eval> ..niecza v24-18-gaf64300: OUTPUT¬´Unhandled exception: Unable to resolve method find_method in type ClassHOW‚ê§  at /tmp/AByE40xTEL line 1 (mainline @ 4) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4218 (ANON @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4219 (module-CORE @ 580) ‚ê§‚Ä¶

[18:55] <cognominal> Not sure to know the way to find where a method is defined

[18:56] *** spider-mario_ joined
[18:56] *** spider-mario left
[18:57] <felher> r: say Buf.^mro

[18:57] <p6eval> rakudo 935c90: OUTPUT¬´Cannot look up attributes in a type object‚ê§  in method list at src/gen/CORE.setting:7362‚ê§  in method gist at src/gen/CORE.setting:7372‚ê§  in method gist at src/gen/CORE.setting:5128‚ê§  in sub say at src/gen/CORE.setting:7595‚ê§  in block  at /tmp/mHccnIBN92:1‚ê§‚ê§¬ª‚Ä¶

[18:57] <felher> hm...

[18:58] *** SunilJoshi left
[18:59] *** fgomez left
[18:59] <cognominal> it's defined here  https://github.com/rakudo/rakudo/blob/nom/src/core/Buf.pm#L41

[19:01] <felher> cognominal: thanks :) I'm more interested if it is specced, though.

[19:03] <felher> Ah, I guess S02-bits.pod:928 is what I wanted :0

[19:04] <felher> * :)

[19:06] *** spider-mario joined
[19:07] *** spider-mario_ left
[19:09] <swarley> I'm getting a core dump trying to compile the latest nqp

[19:09] <swarley> swarley@OctaviasViolin ~/Programming/rakudo/nqp (git)-[master] % ./nqp

[19:09] <swarley> src/call/context.c:708: failed assertion 'Parrot_pcc_get_regs_used(interp, ctx, REGNO_STR) > idx'

[19:10] <timotimo> you do your programming on a violin? mad props.

[19:10] <swarley> I also do programming on a viola, mandolin, and cello

[19:12] <swarley> building a fresh version to test

[19:12] <[Coke]> swarley: how did you configure your nqp?

[19:13] <swarley> perl Configure.pl

[19:13] <[Coke]> (using a local parrot or a pre-installed one - I'm assuming local - did you clean it out first?

[19:13] <[Coke]> ok. what does `which parrot` say, and what about parrot --version?

[19:14] <swarley> It appears to be using /usr/bin/local/parrot

[19:14] <swarley> err

[19:14] <swarley> /usr/local/bin/parrot

[19:14] *** fgomez joined
[19:15] <swarley> I can tell you more about it in a second, I'm building from a fresh repo, and if it fails again I'll rebuild parrot

[19:15] <swarley> Are there plans to develop a more featureful repl for nqp/perl6?

[19:16] <[Coke]> not for nqp.

[19:16] <jnthn> swarley: What features do you want?

[19:17] <[Coke]> rakudo, I think someone is trying to improve partial command detection.

[19:17] * jnthn improved the error reporting a week or so back.

[19:18] <swarley> jnthn; just prettifying. I'm not sure if you do any sort of work with ruby but I work closely with the pry team, and I helped with fancy-lang's repl as well.. I'm a fan of pretty repls :)

[19:19] <swarley> Also auto indent, auto multiline, syntax hilighting, etc. Things you don't need but are neat

[19:22] *** japhb_ joined
[19:24] *** FROGGS left
[19:28] *** araujo left
[19:29] *** araujo joined
[19:29] *** FROGGS joined
[19:36] *** Targen joined
[19:40] <dalek> perl6-roast-data: c508ac1 | coke++ | / (4 files):

[19:40] <dalek> perl6-roast-data: today (automated commit)

[19:40] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/c508ac1db4

[19:40] * [Coke] notes that the rakudo failures are gone today.

[19:40] <[Coke]> (except for the long standing issues with dash-e

[19:42] *** grondilu_ is now known as grondilu

[19:43] *** grondilu left
[19:43] *** grondilu joined
[19:49] *** sqirrel left
[19:53] *** palakas left
[19:55] *** fgomez left
[20:02] *** bruges left
[20:02] *** fhelmberger joined
[20:02] *** bruges joined
[20:04] *** fgomez joined
[20:08] *** fhelmberger left
[20:09] <swarley> recompiling parrot seems to have worked

[20:10] *** benabik left
[20:11] <swarley> yup all tests successful

[20:17] <grondilu> about REPL:  relaxed mode in REPL by default would be nice

[20:19] <[Coke]> relaxed?

[20:19] <[Coke]> you mean "no strict;" ?

[20:19] <[Coke]> (that doesn't work anywhere yet)

[20:22] *** domidumont left
[20:23] <grondilu> [Coke]: yes that's what I meant.  I mean, once it works, I'd like it to be the default for REPL.

[20:23] <grondilu> this and a persistent history

[20:24] *** benabik joined
[20:24] *** SmokeMac_ left
[20:25] *** SmokeMachine joined
[20:26] *** onlooker989781 left
[20:29] *** SmokeMachine left
[20:29] <swarley> how do I add a directory to the use path?

[20:30] <grondilu> push @INC, $dir

[20:30] <grondilu> or @*INC maybe

[20:30] <grondilu> r: say @*INC

[20:30] <p6eval> rakudo 935c90: OUTPUT¬´/home/p6eval/nom-inst/lib/parrot/4.10.0-devel/languages/perl6/site/lib /home/p6eval/nom-inst/lib/parrot/4.10.0-devel/languages/perl6/vendor/lib /home/p6eval/nom-inst/lib/parrot/4.10.0-devel/languages/perl6/lib /home/p6eval/.perl6/2013.01-97-g6d5dc67/lib‚ê§¬ª

[20:30] <grondilu> yep,  push @*INC

[20:37] *** cognominal left
[20:38] <[Coke]> you can also use the env var PERL6LIB

[20:38] <eiro> hello everyone 

[20:38] <eiro> masak, http://www.africafornorway.no/

[20:40] *** isBEKaml left
[20:44] *** cognominal joined
[20:47] <swarley> how do I compile my nqp file to pbc?

[20:48] <masak> eiro: yes, I found it the same night. funny and thought-provoking.

[20:50] <swarley> whenever i try to use a file it says it cant find the pbc

[20:53] <swarley> nevermind, I figured it out

[20:53] <dalek> nqp-jvm-prep: 64838dd | jonathan++ | src/org/perl6/nqp/runtime/Ops.java:

[20:53] <dalek> nqp-jvm-prep: Fix nqp::substr; patch from nwc10++.

[20:53] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/64838dd46c

[20:54] <[Coke]> swarley++

[20:55] *** fgomez left
[20:55] <swarley> How do I declare a sub to be global?

[20:56] <tadzik> hey eiro 

[20:56] <swarley> I declared a sub at the bottom of this file, but it says it can't find the sub

[20:57] <swarley> But it can find the classes

[20:57] <huf> how are you calling it?

[20:57] <jnthn> swarley: mark the sub with "is export"

[20:57] <huf> oh shit this is one channel over :D

[20:57] <huf> disregard me, bash.org quote

[20:57] <swarley> sub my_sub() is export ?

[20:57] <jnthn> *nod*

[20:58] <swarley> still can't find it

[20:58] <jnthn> Did you recompile to the PBC after the change?

[20:58] <swarley> yes

[20:58] <jnthn> Hm.

[20:59] <jnthn> Not sure. there's a bunch of working examples in e.g. nqp-jvm-prep

[20:59] <jnthn> See helper.nqp or so.

[20:59] <swarley> yesCan only use get_who on a SixModelObject

[20:59] <swarley> I get that when I 'use' it

[20:59] <swarley> And then the parrot error from earlier when I exit

[21:00] <jnthn> You're doing the use from the REPL?

[21:00] <swarley> yes

[21:00] <jnthn> I know it works in the Perl 6 one. I've no idea about NQP.

[21:01] <jnthn> I don't see why it wouldn't, mind.

[21:01] <jnthn> If it works from a file, feel free to file an nqp bug about it not working in the repl.

[21:01] <swarley> I'm going to try to run it outside of the repl

[21:03] *** cognominal left
[21:05] *** cognominal joined
[21:08] *** fgomez joined
[21:08] <swarley> What method is called for ~($foo) ?

[21:10] <sorear> .Str or .Stringy, I forget the current spec

[21:10] <[Coke]> r: class A { method Str { return "eek" }}; my $foo = A.new; ~($foo).say;

[21:10] <p6eval> rakudo 935c90: OUTPUT¬´A.new()‚ê§¬ª

[21:10] <[Coke]> r: class A { method Stringy { return "eek" }}; my $foo = A.new; ~($foo).say;

[21:10] <p6eval> rakudo 935c90: OUTPUT¬´A.new()‚ê§¬ª

[21:12] <swarley> Yeah neither is working in nqp either

[21:12] <jnthn> r: class A { method Str { return "eek" }}; my $foo = A.new; (~$foo).say

[21:12] <p6eval> rakudo 935c90: OUTPUT¬´eek‚ê§¬ª

[21:12] <jnthn> Precedence :)

[21:13] <swarley> oh, so you need (~$foo)

[21:13] <[Coke]> mmm. I'm wondering what ~($foo) is doing.

[21:13] <[Coke]> stringify the listify of $foo?

[21:13] <[Coke]> er, no, since ($foo) isn't what it once was.

[21:14] <eiro> hey tadzik :) 

[21:14] <eiro> masak, sure but it can be prophetic in some way: we can't see clearly how global warning will affect the weather :)

[21:15] <masak> eiro: in fact, Norway is fairly cold already.

[21:15] <eiro> right :)

[21:15] <jnthn> [Coke]: the .say method was called and then it stringified the result of say in void context, I tink.

[21:15] *** cxreg joined
[21:15] <masak> I'm pretty sure humans didn't evolve at this latitude... :)

[21:16] <eiro> they can't evolve anymore: you're all so perfect!

[21:16] *** simcop2387 left
[21:16] <swarley> nqp: class A { method Str() { return "eek" }}; my $foo := A.new; (~$foo).say()

[21:16] <p6eval> nqp: OUTPUT¬´Method 'say' not found for invocant of class 'String'‚ê§current instr.: '' pc 92 ((file unknown):52) (/tmp/i9o1JZQlmt:1)‚ê§¬ª

[21:16] <swarley> nqp: class A { method Str() { return "eek" }}; my $foo := A.new; say((~$foo))

[21:16] <p6eval> nqp: OUTPUT¬´A<2452302>‚ê§¬ª

[21:16] <swarley> :/

[21:17] <jnthn> I don't think NQP supports that, off hand.

[21:17] <jnthn> Or there's some is parrot_vtable hack

[21:17] <jnthn> Though probably that's going away in favor of making the thing you just wrote work...

[21:17] <eiro> btw: i finally try to explore the rakudo code to figure out where my encoding problem can have a long term solution

[21:17] <eiro> but i guess it will not be a cross-vm solution 

[21:18] *** simcop2387 joined
[21:21] <swarley> swarley@OctaviasViolin ~/Programming/nqp-yarv (git)-[master] % nqp lib/RAST/Nodes.nqp

[21:21] <swarley> Method 'Str' not found for invocant of class 'Integer'

[21:21] <swarley> seriously?

[21:22] <jnthn> swarley: Seriously.

[21:23] <jnthn> swarley: NQP is quirky.

[21:23] <jnthn> swarley: In some places, too much so.

[21:23] <swarley> I just want to unify how I dump data

[21:24] <swarley> so that natives and complex data dont need to be separated

[21:25] <tadzik> jnthn: what do we really expect of nqp::existpos?

[21:26] <tadzik> it's not really test-covered in our nqp. I would assume that it says "does such index exist in the array", but looking at Parrot I see that it checks for definedness

[21:26] <jnthn> swarley: ah, we wrap stuff in QAST/JAST in QAST::IVal etc...

[21:26] <jnthn> tadzik: eek

[21:26] <jnthn> tadzik: I...wonder where it's used

[21:26] <tadzik> jnthn: nowhere

[21:27] <swarley> Can someone please just tell me how to stringify everything the same way? :(

[21:27] <tadzik> jnthn: the only place I found is t/nqp/52-vtable.t

[21:27] <tadzik> plus the bindings in nqp

[21:27] * tadzik checks rakudo

[21:27] <jnthn> tadzik: Maybe in Rakudo?

[21:27] <tadzik> ok, rakudo uses it

[21:27] <tadzik> yeah

[21:27] <tadzik> I'll just figure out what does it expect :)

[21:28] <jnthn> tadzik: I think it uses it to know if there's any such an index in the array

[21:28] <swarley> or at least tell me how to tell what an object's class is :(

[21:29] <tadzik> jnthn: so it's practically nothing more than "is this index lower than the number of elements?"

[21:29] <swarley> Can anyone point me to overloading of operators in nqp/perl6?

[21:30] <jnthn> swarley: You can't overload operators in NQP.

[21:30] <jnthn> In Perl 6 it's declaring a multi

[21:30] <swarley> blargh

[21:30] <jnthn> tadzik: Something like that.

[21:31] <swarley> Well, how do I get the class of an object in nqp?

[21:31] <swarley> oh

[21:31] <swarley> .WHAT

[21:31] <swarley> does nqp have case?

[21:33] <swarley> nqp: class Test {}; class Foo is Test { }; my $bar := Foo.new(); say($bar.WHAT == Test);

[21:33] <p6eval> nqp: OUTPUT¬´1‚ê§¬ª

[21:34] *** PacoAir left
[21:34] <swarley> how would I tell if it inherits a class?

[21:35] *** kaare_ left
[21:35] * swarley sighs

[21:35] <swarley> I suppose it just won't be that easy

[21:36] <[Coke]> swarley: OOC, what are you doing that needs NQP and not rakudo?

[21:37] <jnthn> nqp::istype($obj, TheClass)

[21:42] *** benabik left
[21:45] <swarley> swarley@OctaviasViolin ~/Programming/nqp-yarv (git)-[master] % nqp lib/RAST/Nodes.nqp

[21:45] <swarley> ['YARVInstructionSequence/SimpleDataFormat', 1, 2, 1, { arg_size:   0,  local_size: 0,  stack_max:  0}, '<compiled>', '<compiled>', nil, 1, :top, 0, 0, 0, 3]

[21:45] <swarley> Starting to come out

[21:46] <swarley> I need to dump those arrays at the end correctly though

[21:48] <eiro> the goal of making rakudo portable is removing the pir::* in the code, right ? 

[21:49] <PerlJam> eiro: the way you said it sounds backwards to me, but the gist seems right  :)

[21:51] <eiro> sorry i'm french. bad accent, bad presidents. (but pretty good wine and cheese)

[21:51] <eiro> thanks PerlJam 

[21:51] <masak> eiro: at least you replaced that sarcasm president.

[21:51] <masak> ;)

[21:52] <eiro> sure: the other doesn't need sarcasm to make us laught 

[21:54] <tadzik> what's nqp for 'Mu'?

[21:54] <diakopter> NQPMu

[21:54] <eiro> 'night everyone

[21:55] <tadzik> diakopter: thanks

[21:56] <diakopter> yw XD

[21:59] <tadzik> jnthn: sent you a pull request with my shot at existspos

[21:59] <tadzik> I guess I should add those tests to nqp as well

[22:00] <jnthn> tadzik: yes, please

[22:00] <tadzik> sure

[22:00] *** PacoAir joined
[22:01] <dalek> nqp-jvm-prep: 543db9d | tadzik++ | / (6 files):

[22:01] <dalek> nqp-jvm-prep: Implement and test existspos

[22:01] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/543db9d920

[22:01] <dalek> nqp-jvm-prep: c50cd3c | jonathan++ | / (6 files):

[22:01] <dalek> nqp-jvm-prep: Merge pull request #13 from tadzik/existspos

[22:01] <dalek> nqp-jvm-prep: 

[22:01] <dalek> nqp-jvm-prep: Implement and test existspos

[22:01] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/c50cd3c298

[22:01] <jnthn> tadzik++

[22:02] <tadzik> I contributed \o/

[22:02] <tadzik> now deletepos :)

[22:02] <dalek> nqp: edf9493 | tadzik++ | t/nqp/59-nqpop.t:

[22:02] <dalek> nqp: Add tests for nqp::existspos

[22:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/edf949306a

[22:04] <dalek> nqp-jvm-prep: 5cd217a | (Gerhard R)++ | Makefile:

[22:04] <dalek> nqp-jvm-prep: New Makefile with mostly atomic rules suitable for parallel make

[22:04] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/5cd217a667

[22:04] <dalek> nqp-jvm-prep: cd0e5d1 | jonathan++ | Makefile:

[22:04] <dalek> nqp-jvm-prep: Merge pull request #12 from gerdr/newmakefile

[22:04] <dalek> nqp-jvm-prep: 

[22:04] <dalek> nqp-jvm-prep: New Makefile with mostly atomic rules suitable for parallel make

[22:04] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/cd0e5d129d

[22:13] <jnthn> 'night, #perl6

[22:14] <tadzik> good knight jnthn 

[22:17] <swarley> Sweet, it works

[22:18] <colomon> \o/

[22:19] <[Coke]> yay, make rules updated for nqp-jvm

[22:19] <colomon> seeing lots of jvm commits brings a smile to my face every time.

[22:19] <[Coke]> sweeeet.

[22:25] *** bbkr__ joined
[22:26] *** PacoAir left
[22:27] *** bbkr_ left
[22:28] <swarley> That terrible moment when the VM you're working with is only documented in japanese

[22:29] * swarley prays to god that the method signature says that the last argument is

[22:32] <dalek> nqp: 44054e8 | tadzik++ | t/nqp/59-nqpop.t:

[22:32] <dalek> nqp: Add tests for nqp::deletepos

[22:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/44054e8263

[22:41] * swarley doesn't quite know where to go from here.

[22:41] <swarley> I suppose I need to add more nodes

[22:45] <swarley> nqp: class Foo { has $!bar; }; class Baz is Foo { method BUILD() { $!bar := 1; }; method test() { say($!bar); } }; Baz.new().test()

[22:45] <p6eval> nqp: OUTPUT¬´Attribute '$!bar' not declared at line 2, near " := 1; }; "‚ê§current instr.: 'panic' pc 13207 (src/stage2/gen/NQPHLL.pir:4680) (src/stage2/gen/NQPHLL.pm:328)‚ê§¬ª

[22:45] <swarley> :s

[22:46] <tadzik> private attributes are private :)

[22:46] <swarley> oh, duh

[22:46] <swarley> nqp: class Foo { has $bar; }; class Baz is Foo { method BUILD() { $bar := 1; }; method test() { say($bar); } }; Baz.new().test()

[22:46] <p6eval> nqp: OUTPUT¬´Use of undeclared variable '$bar' at line 2, near " := 1; }; "‚ê§current instr.: 'panic' pc 13207 (src/stage2/gen/NQPHLL.pir:4680) (src/stage2/gen/NQPHLL.pm:328)‚ê§¬ª

[22:46] <swarley> err

[22:47] <tadzik> nqp: class Foo { has $.bar; }; class Baz is Foo { method BUILD() { $b!ar := 1; }; method test() { say($!bar); } }; Baz.new().test()

[22:47] <p6eval> nqp: OUTPUT¬´Unable to parse expression in blockoid; couldn't find final '}' at line 2, near "has $.bar;"‚ê§current instr.: 'panic' pc 13207 (src/stage2/gen/NQPHLL.pir:4680) (src/stage2/gen/NQPHLL.pm:328)‚ê§¬ª

[22:47] <tadzik> oh, duh

[22:47] <swarley> nqp doesn't have $.

[22:47] <tadzik> right

[22:48] <tadzik> I also put ! in the wrong place :)

[22:48] <tadzik> so you'd have to write your own accessors I guess

[22:51] <swarley> also

[22:51] <swarley> How do i write a BUILD method with just one argument that isn't named?

[22:53] <tadzik> phenny: tell jnthn deletepos pullrequested as well :)

[22:53] <phenny> tadzik: I'll pass that on when jnthn is around.

[22:54] <tadzik> swarley: it seems that BUILD in nqp is completely manual

[22:54] <tadzik> unlike Perl 6

[22:54] <tadzik> so you can write it any way you want, as it'd be you who'd be calling it

[22:55] <swarley> Well, I don't quite know why when I only put one argument in the signature and call it with one, it says i'm calling it with too many

[22:56] <swarley> nqp: class Foo { method BUILD($foo!) { say($foo); } }; Foo.new("bar");

[22:56] <p6eval> nqp: OUTPUT¬´too many positional arguments: 2 passed, 1 expected‚ê§current instr.: 'new' pc 4377 (src/stage2/gen/NQPCORE.setting.pir:2047) (src/stage2/NQPCORE.setting:228)‚ê§¬ª

[22:56] <swarley> What am I doing incorrectly?

[22:56] <tadzik> I suppose that the auto-generated new() receives 0 arguments, you're calling it with 1

[22:57] <swarley> But it says I'm passing 2

[22:57] <swarley> r: class Foo { method BUILD($foo!) { say($foo); } }; Foo.new("bar");

[22:57] <p6eval> rakudo 935c90: OUTPUT¬´Default constructor for 'Foo' only takes named arguments‚ê§  in method new at src/gen/CORE.setting:730‚ê§  in block  at /tmp/Fc9j4KCe4z:1‚ê§‚ê§¬ª

[22:58] <swarley> o-o

[22:58] <tadzik> swarley: one is the invocant

[22:58] <tadzik> yeah, BUILD in Perl 6 is quite extraordinary

[22:58] <swarley> i thought that :$foo! would make it named?

[22:58] <tadzik> I plegded to not say any opinions about it though :)

[22:58] <tadzik> r: class Foo { method BUILD(:$foo!) { say($foo); } }; Foo.new("bar");

[22:58] <p6eval> rakudo 935c90: OUTPUT¬´Default constructor for 'Foo' only takes named arguments‚ê§  in method new at src/gen/CORE.setting:730‚ê§  in block  at /tmp/LbhrfKDKKv:1‚ê§‚ê§¬ª

[22:58] <tadzik> ah

[22:59] <tadzik> r: class Foo { has $!foo; method BUILD(:$foo!) { say($foo); } }; Foo.new(foo => "bar");

[22:59] <p6eval> rakudo 935c90: OUTPUT¬´bar‚ê§¬ª

[22:59] <tadzik> there you go

[22:59] <tadzik> 1) you need to declare it

[22:59] <tadzik> 2) default new does indeed only take named arguments

[22:59] <tadzik> the common practice is:

[22:59] <swarley> oh

[23:00] <tadzik> r: class A { has $.b; method new($b) { self.bless(*, b => $b) } }; A.new(5).b.say

[23:00] <p6eval> rakudo 935c90: OUTPUT¬´5‚ê§¬ª

[23:00] <swarley> nqp: /hello/.Str()

[23:00] <p6eval> nqp:  ( no output )

[23:00] <swarley> nqp: say(/hello/.Str())

[23:00] <p6eval> nqp: OUTPUT¬´‚ê§¬ª

[23:00] <swarley> o-o

[23:01] <tadzik> what did you expect? :)

[23:01] <swarley> More of a string?

[23:01] <masak> I think that is a string.

[23:02] <swarley> Well, considering I got no string at all for Num and Int

[23:02] <tadzik> I guess a regex stringifies to ""

[23:02] <masak> rn: say ~/hello/

[23:02] <p6eval> niecza v24-18-gaf64300: OUTPUT¬´Regex()<instance>‚ê§¬ª

[23:02] <p6eval> ..rakudo 935c90: OUTPUT¬´‚ê§¬ª

[23:02] <tadzik> nqp: say(5.Str())

[23:02] <p6eval> nqp: OUTPUT¬´Method 'Str' not found for invocant of class 'Integer'‚ê§current instr.: '' pc 49 ((file unknown):39) (/tmp/WB9srYCwql:1)‚ê§¬ª

[23:02] <masak> 'night, #perl6

[23:02] <swarley> nini

[23:02] <tadzik> good knight masak

[23:03] <swarley> [3] pry(main)> /hello/.to_s

[23:03] <swarley> => "(?-mix:hello)"

[23:03] <swarley> That was what I was hoping for.. that being from ruby

[23:03] <tadzik> I don't think we spec how the regex should stringify

[23:05] <[Coke]> swarley: plus also nqp ain't perl6.

[23:05] <tadzik> yeah, not quite

[23:06] *** bluescreen10 left
[23:19] <swarley> well I think I've done enough on it for today.. I've got a working example, and a few primitives that can convert into data i can use in the bytecode

[23:21] <tadzik> awesome

[23:24] *** lorn joined
[23:24] *** Targen left
[23:27] *** stopbit left
[23:32] *** marloshouse_ joined
[23:35] *** marloshouse left
[23:35] *** marloshouse_ is now known as marloshouse

[23:37] *** benabik joined
[23:38] *** cognominal left
[23:39] *** cognominal joined
[23:46] *** nebuchadnezzar left
[23:52] *** spider-mario left
[23:57] *** zby_home_ left
