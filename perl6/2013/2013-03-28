[00:11] *** pmurias left
[00:14] *** cosimo_ left
[00:15] *** BenGoldberg left
[00:15] *** cosimo joined
[00:16] *** dmol left
[00:20] <dalek> v5: b2e16c8 | (Tobias Leich)++ | / (3 files):

[00:20] <dalek> v5: regexes are working now

[00:20] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/b2e16c8756

[00:21] <timotimo_> just like that o_O

[00:23] *** kst joined
[00:24] <FROGGS> *g*

[00:24] <FROGGS> gnight

[00:27] *** raiph left
[00:31] <masak> 'night, #perl6

[00:33] *** xinming joined
[00:36] *** xinming_ left
[00:39] *** denisboyun_ left
[00:41] *** denisboyun_ joined
[00:47] <kurahaupo> FROGGS: was it intentional to switch leading '0' from decimal to octal?

[00:53] *** denisboyun_ left
[00:54] <sorear> kurahaupo: leading 0 is octal in perl 5

[00:55] *** raiph joined
[01:04] *** labster joined
[01:11] <kurahaupo> sorear: I'm well aware of that; ditto for C & C++. I'd also question removing the warning/recommendation to use '0o' instead.

[01:11] *** anuby joined
[01:15] *** Targen joined
[01:19] <sorear> kurahaupo: FROGGS is modifying Rakudo's parser into a perl 5 parser, so using p5 syntax rules is kind of a given, no?

[01:20] *** thou left
[01:20] *** hypolin joined
[01:42] *** stevan_ left
[01:43] *** stevan_ joined
[01:49] *** kurahaupo left
[01:57] *** kurahaupo joined
[02:04] *** fgomez left
[02:10] *** thou joined
[02:16] *** swarley-freenode is now known as swarley

[02:22] *** daniel-s_ joined
[02:26] *** daniel-s left
[02:27] *** census left
[02:28] *** PacoAir left
[02:31] *** thou left
[02:31] *** thou joined
[02:32] *** cognominal left
[02:36] *** sqirrel_ joined
[02:36] *** FROGGS_ joined
[02:38] *** thou_ joined
[02:38] *** cognominal joined
[02:38] *** thou left
[02:39] *** toddr_ joined
[02:40] *** FROGGS left
[02:40] *** sqirrel left
[02:42] <kurahaupo> sorear++ thanks for the explanation

[02:42] *** toddr_ left
[02:46] *** am0c joined
[02:47] *** lustlife joined
[02:55] *** fgomez joined
[02:58] *** thou joined
[02:58] *** thou_ left
[03:01] *** c1sung joined
[03:05] *** orafu left
[03:05] *** thou left
[03:05] *** thou joined
[03:08] *** orafu joined
[03:16] *** preflex_ joined
[03:17] *** preflex left
[03:17] *** preflex_ is now known as preflex

[03:25] *** thou left
[03:25] *** thou joined
[03:28] *** colomon joined
[03:44] *** timotimo_ is now known as timotimo

[03:46] *** thou_ joined
[03:46] *** thou left
[03:49] *** bruges_ left
[03:49] *** bruges joined
[03:56] *** labster left
[04:03] *** skids left
[04:06] *** thou joined
[04:06] *** thou_ left
[04:28] *** thou left
[04:28] *** thou joined
[04:32] *** thou left
[04:35] *** thou joined
[04:35] *** kurahaupo left
[04:47] *** thou_ joined
[04:47] *** thou left
[04:49] *** rindolf joined
[04:54] *** kurahaupo joined
[05:03] *** dwoldrich joined
[05:08] *** thou joined
[05:08] *** thou_ left
[05:21] *** kurahaupo left
[05:24] *** xinming left
[05:26] *** xinming joined
[05:26] *** denisboyun_ joined
[05:28] *** thou_ joined
[05:28] *** thou left
[05:29] *** SamuraiJack joined
[05:31] *** kaleem joined
[05:35] *** kaare_ joined
[05:39] *** arlinius left
[05:40] *** SamuraiJack left
[05:41] *** SamuraiJack joined
[05:43] *** pyjery joined
[05:44] *** cognominal left
[05:46] *** dmol joined
[05:48] *** thou joined
[05:48] *** thou_ left
[05:49] *** odoacre joined
[06:00] <dalek> rakudo/extend-dump: 0cfabe7 | (Geoffrey Broadwell)++ | src/core/ (2 files):

[06:00] <dalek> rakudo/extend-dump: Remove/clean up debugging output a bit

[06:00] <dalek> rakudo/extend-dump: review: https://github.com/rakudo/rakudo/commit/0cfabe7dfb

[06:00] <dalek> rakudo/extend-dump: 334a90b | (Geoffrey Broadwell)++ | src/core/ (4 files):

[06:00] <dalek> rakudo/extend-dump: Improve DUMP output a bit for Bool, Parcel, Range, and a few misc cases

[06:00] <dalek> rakudo/extend-dump: review: https://github.com/rakudo/rakudo/commit/334a90b5ff

[06:00] <dalek> rakudo/extend-dump: b91487f | (Geoffrey Broadwell)++ | src/core/ (2 files):

[06:00] <dalek> rakudo/extend-dump: Minor whitespace cleanups

[06:00] <dalek> rakudo/extend-dump: review: https://github.com/rakudo/rakudo/commit/b91487ff37

[06:00] <dalek> rakudo/extend-dump: eddcaa5 | (Geoffrey Broadwell)++ | src/core/Mu.pm:

[06:00] <dalek> rakudo/extend-dump: Add comment with desugared version of $attr.get_value(self), which jnthn believes might fix an edge case later

[06:00] <dalek> rakudo/extend-dump: review: https://github.com/rakudo/rakudo/commit/eddcaa5ea9

[06:00] <dalek> rakudo/extend-dump: ac1c9b4 | (Geoffrey Broadwell)++ | t/02-rakudo/dump.t:

[06:00] <dalek> rakudo/extend-dump: First attempt at tests for DUMP, starting with simple literals

[06:00] <dalek> rakudo/extend-dump: review: https://github.com/rakudo/rakudo/commit/ac1c9b4cda

[06:00] <dalek> rakudo/extend-dump: b15d183 | (Geoffrey Broadwell)++ | src/core/Mu.pm:

[06:00] <dalek> rakudo/extend-dump: Comment out debug output in DUMP routines in Mu.pm

[06:00] <dalek> rakudo/extend-dump: review: https://github.com/rakudo/rakudo/commit/b15d18312c

[06:00] <dalek> rakudo/extend-dump: d3e1010 | (Geoffrey Broadwell)++ | src/core/Mu.pm:

[06:00] <dalek> rakudo/extend-dump: Begin implementing indented DUMP output; Mu.pm changes only for first pass

[06:00] <dalek> rakudo/extend-dump: review: https://github.com/rakudo/rakudo/commit/d3e1010c4e

[06:09] *** thou_ joined
[06:09] *** thou left
[06:10] *** arlinius joined
[06:11] *** kaleem left
[06:11] *** kaleem joined
[06:26] *** dmol left
[06:29] *** thou joined
[06:29] *** thou_ left
[06:30] *** kaare_ left
[06:31] *** kaare_ joined
[06:40] *** pupoque joined
[06:47] *** am0c left
[06:50] *** thou_ joined
[06:50] *** thou left
[06:53] *** kaare_ left
[06:53] *** kaare_ joined
[06:55] *** thou joined
[06:55] *** thou_ left
[07:00] *** thou left
[07:00] *** thou_ joined
[07:07] *** daxim joined
[07:12] *** thou joined
[07:12] *** thou_ left
[07:13] *** Targen left
[07:16] *** diakopter joined
[07:28] *** fgomez left
[07:32] *** thou left
[07:33] *** thou_ joined
[07:36] *** daniel-s_ left
[07:36] *** daniel-s_ joined
[07:38] *** pupoque left
[07:41] *** thou joined
[07:41] *** thou_ left
[07:54] *** domidumont joined
[07:55] *** daniel-s_ left
[07:57] *** daniel-s_ joined
[07:58] *** kaare__ joined
[08:00] *** kaare_ left
[08:01] *** labster joined
[08:02] *** thou_ joined
[08:02] *** thou left
[08:05] *** domidumont left
[08:06] *** domidumont joined
[08:08] *** kaare__ left
[08:08] *** kaare__ joined
[08:10] *** thou_ left
[08:10] *** thou joined
[08:12] *** rindolf left
[08:12] *** rindolf joined
[08:13] *** kaare__ left
[08:14] *** thou left
[08:15] *** thou joined
[08:19] *** drbean left
[08:19] *** rindolf left
[08:19] *** rindolf joined
[08:20] *** drbean joined
[08:25] *** rindolf left
[08:25] *** rindolf joined
[08:32] *** woolfy joined
[08:33] *** thou left
[08:33] *** thou joined
[08:34] *** daniel-s_ left
[08:34] *** daniel-s_ joined
[08:34] *** mmcleric left
[08:45] *** Heather joined
[08:45] <Heather> Hello #Perl6 !

[08:46] <moritz> \o Heather 

[08:46] *** pyjery left
[08:46] * Heather is writing own Code Style Guide to fit own Code Style ...

[08:46] <labster> Hi Heather

[08:46] <Heather> labster hi

[08:46] <labster> I read your blog, Heather++

[08:46] *** thou left
[08:46] <Heather> labster huh, cool :)

[08:46] *** thou joined
[08:47] <labster> It makes me want to write my own blog, just to show that Perl 6 has users.

[08:47] <Heather> labster usually I lazy to write stuff to blog :)

[08:47] <labster> me too

[08:47] <moritz> labster: please do

[08:47] <Heather> take a look https://github.com/Heather/Beauty-and-Freedom !!! It's brand new CODE STYLE ! It need users

[08:47] <Heather> *needs

[08:48] <moritz> convincing people to adapt a new code style is even harder than convincing them to adapt a new programming language :-)

[08:49] <Heather> moritz people must understand that Beauty and Freedom can be better then standard :P that's my point

[08:49] <Heather> *than

[08:49] * Heather always use 'then' wrong

[08:50] <labster> I'm not even sure what style I'm using :/

[08:50] <Heather> labster then use Beauty and Freedom :D it will fit anything >_<

[08:51] <Heather> - If you're not agreed with some terms or don't like some Code Style you're Free to use Custom style you like

[08:51] <Heather> - If you desired to use Beauty-and-Freedom Style Guide you can also mix it with any other Style Guides you like

[08:51] <Heather> ...

[08:51] <Heather> \o/

[08:51] <labster> moritz: I will write something, once I get this patch to File::Spec out

[08:54] *** denisboyun_ left
[08:57] *** thou left
[08:57] *** kivutar joined
[08:57] *** thou joined
[09:00] <labster> I just realized I have the first working version of IO::Path.filesystem (though I call it IO::Path::More.volume).

[09:01] <moritz> labster: that might be an extension that should go into core

[09:01] <Heather> labster btw if you liked my blogpost feel free to G+ and Twit it :D

[09:02] <labster> It needs File::Spec to work, which means that at least a portion of File::Spec needs to go into core.  And... it needs work.

[09:02] <moritz> labster: when I wrote IO::Path I was aware that at some point, we need volumes, but since I don't have any windows system to test, I left it out for the first version

[09:03] <FROGGS_> labster: do you have a solution for case-insensitivity (insanity?) testing?

[09:06] <labster> FROGGS_: What I submitted should work, though it's not the most elegant thing.  I keep thinking I should move it to Unix.pm, but there are issues with that, mainly with everything subclassing from Unix.

[09:06] *** thou left
[09:06] *** thou joined
[09:07] <labster> moritz: Did you write the spec for IO::Path, or just the implementation?  Because if it's the spec, I have some issues to discuss.

[09:07] <moritz> labster: both

[09:08] <lizmat> morning #perl6

[09:08] <Heather> lizmat hey

[09:09] <moritz> \o lizmat 

[09:09] <labster> hi lizmat

[09:09] <lizmat> FROGGS_: I think there should be a presentation about your Perl 5 in Rakudo work at the YAPC::NA

[09:09] <lizmat> would you be able to give such a presentation?

[09:09] <lizmat> hi all!

[09:11] <tadzik> hello lizmat 

[09:12] <labster> moritz: ok.  first of all, I think "filesystem" should be renamed to "volume".  Filesystem implies any(<zfs ntfs fat32 ...>) to me, which isn't what we'd be returning.  Volume is the P5 File::Spec terminology, and it seems to make more sense to me.

[09:13] <moritz> labster: agreed

[09:15] <labster> Next is stringification.  What was the logic behind having File::Path.Str return just the basename?  I have to say, I was surprised to see it return that rather than the whole path.

[09:15] <FROGGS_> lizmat: in north 'murica?

[09:15] <moritz> labster: the reason was making dir() backwards compatible

[09:15] <moritz> labster: in retrospect that's probably a bad idea

[09:16] <moritz> so we need a deprecation notice, and wait 'til after the release

[09:16] *** user____ joined
[09:17] <lizmat> FROGGS: yes, in Texas even!

[09:17] <FROGGS_> lizmat: I'm afraid I don't have the money to get there :/

[09:17] <labster> I was just looking around at File::Find, and File::Find::Result objects returns the whole path when stringified too.

[09:18] *** thou left
[09:18] *** user____ left
[09:18] <moritz> ah yes, but File::Find isn't the only user of dir()

[09:18] <tadzik> yeah, I was imitating Perl 5's File::Find and find(1)

[09:19] *** am0c joined
[09:20] <labster> that was more of a similar behavior issue but I guess you're already convinced :)

[09:22] <lizmat> FROGGS_: lack of money is fixable, lack of free time to travel and do a presentation is not

[09:23] <moritz> labster: yes, I'm quite boring to talk to. You don't even have to ramp up all your arguments to convince me :-)

[09:23] <moritz> labster: will you patch the specs?

[09:24] <labster> huh, do I even have access to them?

[09:24] <moritz> does https://github.com/perl6/specs/ say "Read-Only access" next to the URL?

[09:24] *** daniel-s_ left
[09:25] <FROGGS_> lizmat: out of curiosity, how do I fix that? :o)

[09:25] <moritz> should be read-write

[09:25] <lizmat> FROGGS_: you could be sponsored

[09:26] <FROGGS_> that is ... interesting ...

[09:27] <labster> moritz: I do have access

[09:28] <labster> .oO (  The path from hacker to language implementor is surprisingly short around here )

[09:29] *** DarthGandalf left
[09:30] <moritz> labster: iirc you submitted a pull request to the ecosystem repo, so I put you into the 'perl6' team, which we use for nearly all repos in the 'perl6' organization

[09:30] * lizmat afk for ~ 2.5 hours&

[09:30] <moritz> because we're far too lazy to do any fine-grained access control

[09:31] <moritz> so, everybody who submits a new module gets write access to the specs repo too :-)

[09:31] <labster> see, laziness is a virtue 

[09:31] <moritz> and roast, and evalbot, and perl6-examples, and most of the other repos

[09:32] <masak> greetz, #perl6

[09:32] <moritz> \o masak

[09:32] <labster> moritz: also, please take a look at IO::Path::More, and see if there's anything there you feel should be part of the spec.  Probably not stuff like .find

[09:32] <moritz> labster: URL to the module/repo?

[09:33] <labster> https://github.com/labster/p6-IO-Path-More

[09:34] <moritz> the is_absolute and absolute and relative methods might be worth importing

[09:34] <moritz> (though as is-absolute)

[09:34] <moritz> maybe method parent

[09:36] <labster> I get lazy and use underscores because I'm trying to port perl 5

[09:37] <moritz> that's fine for a module, but not for core :-)

[09:44] *** jaldhar joined
[09:45] <labster> Oh, oh!  forgot the last issue

[09:45] <labster> r: my $p = '.';  say $p.=path.WHAT for ^6;

[09:45] <p6eval> rakudo a23458: OUTPUT«(IO::Path)␤(Str)␤(IO::Path)␤(Str)␤(IO::Path)␤(Str)␤»

[09:45] *** fhelmberger joined
[09:46] <labster> .path alternates object types, which is strange.  I don't know what to do about that.

[09:47] <moritz> finding a better name for the string representation of a path would help

[09:48] *** daniel-s_ joined
[09:48] <labster> Str?   fullpath?

[09:49] *** bonsaikitten is now known as DrEeevil

[09:49] <moritz> +1

[09:49] <moritz> just Str will be fine, I think

[09:50] <labster> And IO::Path.path returns itself, I suppose.

[09:51] <moritz> aye

[09:58] *** jaldhar left
[09:59] <FROGGS_> labster: you have commit bit now for File::Spec

[09:59] <FROGGS_> feel free to refactor it if you think it makes sense

[10:00] *** DarthGandalf joined
[10:00] <labster> FROGGS_: Thanks.  I was about to ask for it, but I got sidetracked on the specs.

[10:01] <FROGGS_> labster: I'm really sorry that I can't help you with it right now

[10:01] <labster> no, please keep working on perl5, that's awesome

[10:01] *** jaldhar joined
[10:01] <FROGGS_> labster++ # I love you

[10:03] <masak> :)

[10:04] <labster> hugme: hug FROGGS_

[10:04] * hugme hugs FROGGS_

[10:04] <FROGGS_> *g*

[10:06] <Heather> UPDATE #PERL6 SET USER = USER + 1

[10:07] <masak> there's a nice warm atmosphere in here today :)

[10:07] <Heather> masak that's Stockholm syndrome

[10:07] <tadzik> :D

[10:08] <tadzik> It's funny because masak is not that far from Stockholm

[10:08] <Heather> >_<

[10:08] <masak> heh.

[10:09] *** hypolin left
[10:10] <masak> Heather: so you're saying Perl 6 somehow holds us hostage, and we're starting to have sympathy for it?

[10:10] <Heather> masak yep :P

[10:11] <Heather> Osama Ben Camelia

[10:12] <labster> .oO (Camelia with a long beard?)

[10:12] *** anuby left
[10:12] <Heather> labster ... Richard Ben Camlia ? >_<

[10:13] * Heather always imagine only one person when hear something about bread

[10:14] <tadzik> the gingerbread man! \o/

[10:14] <labster> Oh wow, it is getting late here in California (π AM).  I'll think about the specs tomorrow.

[10:14] <labster> night everyone

[10:15] <Heather> labster good night

[10:16] * Heather wants more MMO & RP elements on #perl6 o_O

[10:17] <masak> Heather: um. http://strangelyconsistent.org/blog/perl-6-is-my-mmorpg

[10:17] *** SamuraiJack left
[10:17] <Heather> masak yes I saw it :)

[10:17] <masak> also, http://github.com/masak/crypt

[10:17] <Heather> well "SAW" is not what I wanted to say

[10:18] <Heather> masak how to play it?

[10:18] <tadzik> Heather: you can help me write Quest :)

[10:18] <tadzik> although it's not quite RPG, and definitely not MMO :)

[10:19] <masak> Heather: should be just running bin/crypt in that repo.

[10:19] *** SamuraiJack joined
[10:19] <Heather> tadzik quest?

[10:19] <masak> Heather: oh, and it has a dependency (Adventure::Engine), but it should all install through panda.

[10:19] <masak> errand &

[10:20] <Heather> masak I use CRYSTAL MAIDEN !

[10:20] <Heather> -_-'

[10:21] <Heather> masak so first I will generate an gentoo ebuild for it )

[10:21] *** labster left
[10:23] *** eiro left
[10:23] <tadzik> Heather: https://github.com/tadzik/Quest

[10:23] <tadzik> it's supposed to be a fun and addictive game

[10:23] <tadzik> it's not, yet ;)

[10:24] *** eiro joined
[10:24] <Heather> for now MMO part is must have part of any game, even roguelike

[10:25] <tadzik> I still prefer single-player games

[10:25] <tadzik> this way I can stop playing whenever I want and no one gets angry

[10:25] <Heather> well, I don't play single-player games even if they are very cool, I feel it boring

[10:26] <tadzik> I see

[10:28] <Heather> tadzik https://github.com/tadzik/Quest/pull/1

[10:31] <Heather> it's strange...

[10:31] <Heather> how github highlights it?

[10:32] <tadzik> Heather: merged, thanks

[10:32] <Heather> tadzik well, but it doesn't helped

[10:32] <Heather> I was thinking about making github to highlight the file

[10:33] <Heather> tadzik wrong file mode maybe?

[10:33] *** dwoldrich left
[10:33] *** daniel-s_ left
[10:33] <Heather> I guess ...

[10:33] *** daniel-s_ joined
[10:36] <Heather> tadzik https://github.com/tadzik/Quest/pull/2

[10:36] <Heather> this way

[10:38] <tadzik> Heather: hilight it how?

[10:38] <Heather> tadzik https://github.com/Heather/Quest/blob/master/bin/quest

[10:39] <Heather> strange?

[10:40] <Heather> tadzik github is failing saying that " Heather 17 minutes ago Shebang " is last commit

[10:40] <tadzik> hmm, it just thinks it's Perl 6

[10:40] <tadzik> erm, Perl 5

[10:40] <tadzik> why, it is the last commit

[10:40] <Heather> tadzik no, https://github.com/Heather/Quest/commits/master

[10:41] <tadzik> I'm confused. What's the problem?

[10:41] <tadzik> I've only just merged pull-2

[10:42] <Heather> good :)

[10:42] <Heather> now it highlights

[10:42] <Heather> but as perl5 seems like, yes

[10:43] <Heather> tadzik : what means # I'm a bad person ? )

[10:45] <tadzik> I probably wrote something ugly in the code

[10:45] <Heather> tadzik why? :)

[10:46] <tadzik> where did you find that?

[10:46] * Heather can't do anything awhile rust recompiling. 95% RAM 35% Swap

[10:47] <Heather> tadzik in bin file beginning, clear sub

[10:47] <tadzik> ayes

[10:47] <tadzik> because it's not Pure-perl in any way

[10:47] *** am0c left
[10:47] <tadzik> it feels hacky, I'd prefer it gone and replaced with a sane solution

[10:48] <tadzik> ANSI code for example

[10:48] <tadzik> but when I tried an ANSI code it didn't work quite well

[10:50] *** tgt joined
[11:04] *** denisboyun_ joined
[11:19] *** toddr_ joined
[11:20] *** immortal joined
[11:21] *** bonsaikitten joined
[11:23] *** shachaf_ joined
[11:23] *** erkan left
[11:23] *** takesako__ left
[11:23] *** huf left
[11:23] *** yx left
[11:23] *** bloonix left
[11:23] *** GlitchMr left
[11:23] *** `patch` left
[11:23] *** sitaktif1 left
[11:23] *** robinsmidsrod left
[11:23] *** pjcj left
[11:23] *** pnu_ left
[11:23] *** Pleiades` left
[11:23] *** DrEeevil left
[11:23] *** shachaf left
[11:23] *** anocelot left
[11:23] *** toddr left
[11:23] *** Pleiades` joined
[11:23] *** `patch` joined
[11:23] *** perigrin joined
[11:23] *** immortal left
[11:23] *** immortal joined
[11:23] *** bonsaikitten left
[11:23] *** bonsaikitten joined
[11:23] *** Pleiades` left
[11:23] *** Pleiades` joined
[11:23] *** huf joined
[11:23] *** masak joined
[11:23] *** mst joined
[11:23] *** nemesys joined
[11:23] *** anocelot joined
[11:23] *** Util joined
[11:24] *** pjcj joined
[11:24] *** denisboyun_ left
[11:24] *** patspam joined
[11:24] *** GlitchMr- joined
[11:24] *** Hor|zon joined
[11:24] *** pnu joined
[11:24] *** bloonix joined
[11:24] *** BooK joined
[11:24] *** robins joined
[11:24] *** sitaktif1 joined
[11:24] *** takesako__ joined
[11:25] *** robins is now known as robinsmidsrod

[11:25] <masak> well, that was fun.

[11:26] *** LordV joined
[11:28] *** yx joined
[11:28] *** mangala left
[11:28] *** Gothmog_ left
[11:28] *** integral_ left
[11:28] *** clkao left
[11:28] *** PerlJam left
[11:28] *** krunen left
[11:28] *** Ayiko left
[11:28] *** Tene left
[11:28] *** xalbo left
[11:28] *** sergot left
[11:31] *** mangala joined
[11:31] *** Gothmog_ joined
[11:31] *** integral_ joined
[11:31] *** clkao joined
[11:31] *** PerlJam joined
[11:31] *** krunen joined
[11:31] *** Ayiko joined
[11:31] *** Tene joined
[11:31] *** xalbo joined
[11:31] *** mikemol joined
[11:31] *** ponbiki joined
[11:31] *** sergot joined
[11:31] *** snarkyboojum joined
[11:31] *** mikec__ joined
[11:31] *** jrockway joined
[11:32] *** cibs_ joined
[11:33] <Heather> masak ?

[11:33] <masak> Heather: a netsplit.

[11:33] *** census joined
[11:34] <Heather> hm...

[11:44] <FROGGS_> beer with us? np

[11:51] <dalek> v5: aecb96f | (Tobias Leich)++ | lib/Perl6/P5 (2 files):

[11:51] <dalek> v5: add support for unless+else constructs

[11:51] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/aecb96f996

[11:52] *** cibs joined
[11:52] <Heather> bear with us

[11:53] <Heather> and balalaika

[11:55] *** cibs_ left
[11:57] *** GlitchMr- is now known as GlitchMr

[11:58] <dalek> v5: c1d7375 | (Tobias Leich)++ | t/spectest.data:

[11:58] <dalek> v5: skip base/lex.t for now

[11:58] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/c1d7375d7b

[12:05] *** PacoAir joined
[12:13] <dalek> v5: d13e413 | (Tobias Leich)++ | test.pl:

[12:13] <dalek> v5: we have better tests than this

[12:13] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/d13e4137d0

[12:13] <dalek> v5: b0d3beb | (Tobias Leich)++ | Makefile:

[12:13] <dalek> v5: add fulltest target

[12:13] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/b0d3beb293

[12:13] <dalek> v5: 2c5ad30 | (Tobias Leich)++ | .gitignore:

[12:13] <dalek> v5: ignore *.v5 files

[12:13] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/2c5ad30c1e

[12:15] <Heather> could be fun but because of Perl and ML I want to visit some arabic country alike Egypt ...

[12:17] *** yx left
[12:19] <masak> Heather: I fail to see the connection. "because of Perl and ML" you want to visit some Arabic country?

[12:19] <masak> is this about readability again? I thought we talked about this. :P

[12:20] <Heather> masak It's about camel in logo

[12:21] <Heather> ...

[12:26] *** yx joined
[12:27] *** kaleem left
[12:34] <lizmat> is anybody here going to the QA Hackathon in Lancaster in ~ 2 weeks?

[12:34] <lizmat> (as in non-lurkers)

[12:37] *** kaleem joined
[12:42] *** PacoAir left
[12:45] *** PacoAir joined
[12:49] * lizmat takes that as a no :-)

[12:52] <[Coke]> lizmat: ooh. if I was on one of my increasingly less rare trips to Leeds, I'd try to swing by.

[12:52] <lizmat> the reason I'm asking, is that there is apparently going to be some serious CPAN hacking going on there

[12:53] <lizmat> and I was wondering whether it would make sense to make sure that Perl 6 modules / distributions could be handled as well

[12:54] <lizmat> either as a multi-version distribution (like with my Devel::MaintBlead support module) or in some other wat

[12:55] <dalek> v5: 19b9cc8 | (Tobias Leich)++ | lib/Perl6/P5Actions.pm:

[12:55] <dalek> v5: <blorst> -> <sblock>, this allows to use BEGIN blocks

[12:55] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/19b9cc80a1

[12:56] *** xinming left
[12:57] *** xinming joined
[12:57] <[Coke]> argh. "where did panda install itself, and why do I have to keep changing my path to find it."

[12:58] <FROGGS_> std: use v5; print -d "."

[12:58] *** Heather left
[12:58] <p6eval> std 86b102f: OUTPUT«ok 00:01 52m␤»

[12:58] *** crab2313 joined
[13:00] * [Coke] modularizes his .bashrc slightly so he can change a variable pointing at a parrot revision to track where panda got to

[13:01] <FROGGS_> [Coke]: panda should be bundled with the compiler release, and it should be always there and always working and always something and ...

[13:02] <[Coke]> I'm not dealing with releases. I'm building from source.

[13:02] <[Coke]> perhaps that is my problem.

[13:03] <FROGGS_> then panda must be made when rakudo gets recompiled

[13:04] <[Coke]> ecosystem question: do we care if the ecosystem name doesn't match the module name? I see some that match except for a - instead of a ::, for example.

[13:04] <FROGGS_> hmmm, at least I dont care

[13:04] <[Coke]> FROGGS_: Yes. every time I reinstall rakudo, I have to eithe rebootstrap panda OR completely reinstall it, depending on whether the underlying parrot changed.

[13:07] <tadzik> [Coke]: what do you mean by the ecosystem name?

[13:07] <[Coke]> as it appears on modules.perl6.org (the name in the META.info)

[13:08] <tadzik> also, I've been thinking about reworking the installation process a bit, so these sort of things are not a problem anymore

[13:08] <FROGGS_> ++tadzik

[13:08] <tadzik> ie imagine 'panda install Foo' saying "seems like you recompiled rakudo recently, do you want me to rebootstrap all the things?"

[13:08] <tadzik> also getting rid of the PATH insanity we have now

[13:09] <FROGGS_> that would be sweet

[13:09] <[Coke]> That would be nice.

[13:09] <[Coke]> I'm trying to figure out how to get panda to let me install "YaMl"

[13:09] <[Coke]> (or rather, correct me helpfully)

[13:09] <tadzik> marry it to Text::Levenshtein

[13:09] <tadzik> or even not

[13:10] <tadzik> we could add a fallback, so if there's no such module it tries comparing lc($arg) to map { *.lc } @modules

[13:10] <tadzik> then a "did you maybe mean $other-thing?"

[13:10] <[Coke]> yes, that was going to be the first step, then maybe TL.

[13:11] <[Coke]> I'm trying to suss out where that would go, though.

[13:13] <tadzik> there can be some controversial issues with that, as moritz commented on the GH ticket

[13:13] <moritz> suggesting stuff is fine

[13:13] <moritz> autocoreccting not

[13:14] <moritz> because then you might put slightly wrong names into some automated script, and once a module exists with that slightly different name, you suddenly install a different module

[13:14] <moritz> but I think I wrote that already :-)

[13:14] <[Coke]> moritz: yes, that's what we said.

[13:15] <[Coke]> "calm down."

[13:15] <moritz> ok, great :-)

[13:15] <masak> a program should never *ever* automatically correct faulty input.

[13:15] <masak> if you said it already, it bears repeating. :)

[13:16] <[Coke]> ok, I'm not working on this, then. :P

[13:16] <masak> may I suggest extremely nice error messages instead?

[13:17] <masak> the right way to go ahead from the idea of automatic correction -- every single time through history -- is to pimp the error messages to say "did you mean YAML?"

[13:17] <[Coke]> That's what I was *going* to do, yes.

[13:17] *** crab2313 left
[13:17] <[Coke]> Holy crap, people.

[13:17] <masak> sorry :/

[13:18] <[Coke]> "I wish to make perl 6 nicer" "You're going to do it wrong!"

[13:18] <masak> [Coke]: recently, after our nicer levenstein variable error messages, there have been suggestions that Rakudo automatically correct the source code. I guess I'm a bit touchy about the thought of that.

[13:18] <masak> [Coke]: didn't mean to get it all over you.

[13:21] *** dayangkun joined
[13:21] <[Coke]> Is there a way to get the 6POD out of an installed module ?

[13:21] <[Coke]> I wish to look at documentation from the command line.

[13:22] <FROGGS_> masak: automatically correct variables... and that wasn't a joke?

[13:24] <tadzik> [Coke]: perl6 --doc /path/to/module.pm

[13:24] <tadzik> maybe p6doc is capable of doing that

[13:24] <[Coke]> tadzik: "ew"

[13:25] <[Coke]> (see also complaints about "where did panda get installed"

[13:25] <tadzik> ah

[13:25] <[Coke]> something like perl6 --doc Module::Name would be spiffier.

[13:25] <masak> FROGGS_: it was a suggestion by someone who hadn't seen the consequences of such a suggestion. I forget who.

[13:25] <tadzik> it's even specced

[13:25] <tadzik> I think it was me :)

[13:25] <masak> FROGGS_: I think it's even been suggested two or three times recently, by different novices.

[13:25] <arnsholt> timotimo: I can't reproduce your Zavolaj problem (it's also been reported as Zavolaj #23) =(

[13:25] <FROGGS_> masak: ohh, I just remember me suggesting that as a joke :o)

[13:26] <masak> heh.

[13:26] <tadzik> ah, in the source code

[13:26] <arnsholt> So I'm guessing it's probably something GC-related

[13:27] <FROGGS_> masak: I'm a guy who would tike to force 'strict' for Perl 5, even for one-liners... I would never like to have source-code-autocorcection

[13:28] <[Coke]> ... Did anyone every implement Perl6::Format for perl6 ?

[13:28] <[Coke]> *ever

[13:28] *** fgomez joined
[13:28] <[Coke]> https://github.com/mathw/form/ ?

[13:30] <masak> yes, that's the one effort I know about.

[13:30] <masak> it's a couple of years sleeping now.

[13:30] <masak> mathw_: ping :)

[13:32] <[Coke]> modules.perl6.org is written in perl5 ?

[13:32] <tadzik> yes

[13:32] <tadzik> http://feather.perl6.nl/~sergot/modules/ is all Perl 6

[13:33] <[Coke]> ... so it's already been ported to perl6, but the main site is using the p5 version?

[13:33] <tadzik> yeah

[13:33] <tadzik> also, the latter has a per-module pages and tests results

[13:34] <[Coke]> it also hasn't been updated in a while.

[13:35] <tadzik> yeah

[13:35] <tadzik> sergot: ping

[13:35] <[Coke]> Is sergot's version going to become the main version at some point? blocking on anything?

[13:36] <tadzik> not sure

[13:37] * [Coke] sees that p6prove is also under started.

[13:37] <[Coke]> er, *underway

[13:38] <[Coke]> which then makes the last word useless. ;)

[13:38] <tadzik> yep

[13:39] *** kaleem left
[13:40] *** skids joined
[13:41] * lizmat wonders where panda is specced?

[13:43] *** bluescreen10 joined
[13:46] <hoelzro> morning #perl6

[13:46] *** cibs_ joined
[13:47] <tadzik> lizmat: it's not, not really

[13:47] <tadzik> actually, Pies is supposed to be a spec and Panda the implementation

[13:51] *** cibs left
[13:51] <[Coke]> what do folks think about porting individual pure p5 modules vs. the v5 work going on rcently?

[13:52] <nwc10> a) long(er) term the ported version useful

[13:52] <nwc10> b) short term the ported version means more code written in Perl 6, which is also useful

[13:52] <nwc10> in the middle, having a way to automatically convert stuff is useful

[13:53] <lizmat> I see the v5 work as important for darkpan

[13:53] <nwc10> oh yes, that too

[13:53] <lizmat> porting CPAN modules (be they pure perl or not) is a task that will need to be done as needed

[13:54] <lizmat> and while doing that, will make a good selection of useful CPAN modules in the process

[13:54] <lizmat> anyway, that's my .02

[13:57] <masak> I think something using PPI could get pretty far converting Perl 5 to Perl 6.

[13:57] <masak> in fact, ooh! *that's* what my first CPAN module is going to be. obviously.

[13:59] <masak> the idea being: if Perl::Critic can do a good job finding stuff to improve, a converter module can do a decent job sidegrading code to Perl 6, using known automatic conversions.

[14:00] <masak> and it's also completely fine for it give up in some cases, or suggest improvements that can only be realistically carried out by a human.

[14:01] *** mtk left
[14:02] <colomon> Hmmm... porting tests well should be a priority, no?

[14:02] <lizmat> so, as a sort of "ufo" that would build an annotated Perl 6 source code version?

[14:02] *** kaare__ joined
[14:03] <masak> colomon: that's a good point.

[14:03] <masak> colomon: and maybe smaller scripts.

[14:04] <masak> lizmat: :)

[14:05] *** bluescreen10 left
[14:08] *** cibs joined
[14:09] <raiph> <hoelzro> where are the various dispatchers ... <FROGGS> in nqp's C land

[14:09] <timotimo> well, the multiple dispatch is now implemented in nqp, too

[14:09] <timotimo> or ... "only"

[14:10] <raiph> hoelzro: what timotimo said

[14:11] <arnsholt> timotimo: I'm not having luck reproing your bug, but it's been reported on GitHub as well

[14:11] <timotimo> read that, thanks

[14:11] *** cibs_ left
[14:12] <timotimo> Rakudo-2003.03 - hehe, wat? :)

[14:13] <masak> blast from the past!

[14:13] * lizmat is considering porting Sys::RunAlone to Perl 6

[14:14] <lizmat> nice small module

[14:14] *** bluescreen10 joined
[14:14] *** mtk joined
[14:14] <timotimo> is that when you only want to have one instance of your program?

[14:14] <lizmat> yup

[14:14] <timotimo> sounds nice

[14:15] <PerlJam> that's an odd name though.  "run alone"?  without any friends?

[14:15] <tadzik> like libunique

[14:15] *** xilo left
[14:16] <tadzik> which is now GtkApplication, apparently

[14:16] <PerlJam> especially given a widely known term for "only one instance" -- singleton.

[14:16] <lizmat> "WARNING Unique is now in maintenance mode, and its usage is strongly discouraged"

[14:16] <PerlJam> (or, perhaps I'm just curmudgeonly todya :)

[14:17] <colomon> masak: I'm now reading up on PPI....

[14:17] <masak> PPI is great.

[14:17] <masak> Alias++ at his best, solving unsolvable problems.

[14:17] <timotimo> arnsholt: in #22 ("how to store binary data in a buffer"), you refer to lots of plumbing having to be done; is that refering to vmarray?

[14:17] <lizmat> Sys::RunAlone is much, much simpler

[14:18] <lizmat> it just attempts to lock the source file at INIT time, and exits if it can't

[14:20] <tadzik> clever

[14:20] <lizmat> I can't take all the credit: "Inspired by Randal Schwartz's mention of using the DATA handle as a semaphore

[14:20] <lizmat> on the London PM mailing list."

[14:21] <lizmat> that was back in 2005  :-)

[14:23] *** Psyche^ joined
[14:27] *** Patterner left
[14:27] *** Psyche^ is now known as Patterner

[14:32] *** am0c joined
[14:33] *** xilo joined
[14:34] *** cibs_ joined
[14:38] *** cibs left
[14:42] *** tgt left
[14:44] *** crab2313 joined
[14:57] <colomon> masak: hmmm, corollary to my previous comment: porting p5 testing modules early on should probably be a priority.

[15:01] <arnsholt> timotimo: Yeah, that's the vmarray stuff

[15:02] *** bonsaikitten left
[15:02] <masak> colomon: would be interesting to know which ones are the most used p5 testing modules.

[15:03] <colomon> masak: yes, it would. 

[15:03] <masak> colomon: as long as it's just Test::Simple and Test::More, we're already set.

[15:06] *** bluescreen10 left
[15:06] *** bonsaikitten joined
[15:06] *** bluescreen10 joined
[15:07] <tadzik> and Test::Fatal

[15:08] <timotimo> Test::Fatal is the one where it deletes your hard drive if the tests fail?

[15:09] <masak> seems fair to me.

[15:14] <colomon> Is that like the old product that would eject your floppy disk at high speed if it detected any signs of a system crash?

[15:14] * colomon suspects that ad was in Creative Computing circa April 1982.....

[15:15] <timotimo> ha, that's cute

[15:15] <timotimo> also i imagine painful

[15:15] <arnsholt> timotimo++ # Backtrace from -g compiled Parrot/NQP

[15:15] <arnsholt> I <3 you a little bit now =)

[15:21] <timotimo> :)

[15:22] <timotimo> didn't even realise there was nothing wrong with the backtrace until now

[15:29] <arnsholt> And there is an NQP frame in there: #21 is the invoke handler

[15:29] <arnsholt> Oh, could you add to the bug thread or the Gist if the backtrace is from the tweaked test file with loop, or the plain one?

[15:29] <arnsholt> (I'm guessing with loop?)

[15:31] <lizmat> wrt to porting Test modules, Test::Effects ?

[15:32] <masak> lizmat: nice. didn't know about that one before.

[15:33] * lizmat was exposed to it again at the SPW by the closing keynote of TheDamian

[15:33] <lizmat> this would also mean Test::Trap

[15:35] *** am0c left
[15:36] <timotimo> it's from the one with the loop, yes

[15:36] <timotimo> do you also want a stacktrace from without the loop?

[15:38] <arnsholt> Yeah, do that as well. Might come in handy

[15:46] *** thou joined
[15:46] <arnsholt> But from the bottom of the stack trace it looks like something weird's happening during GC

[15:47] <arnsholt> *sigh* I really need to get my testing thing running

[15:48] *** am0c joined
[15:48] <timotimo> oh

[15:48] <timotimo> another thing

[15:48] <timotimo> using -Ilib instead of -Iblib/lib i get no segfault for the non-loop version

[15:49] * [Coke] finds http://retester-daoswald.dotcloud.com/ in his feedly. perl5 regex online debugger.

[15:49] <timotimo> and for the loop version as well

[15:52] *** thou left
[15:53] <timotimo> arnsholt: can you make any sense of that?

[15:53] <timotimo> serialisation and gc interoperating in a strange way?

[15:55] *** thou joined
[15:55] <moritz> the two most "fun" type of problems to debug interacting

[15:57] <timotimo> how does one properly differentiate fun as in "perl6 is -Ofun" and "when playing dwarf fortress, you have lots of opportunities to have Fun"? is it just the capitalisation?

[16:02] *** SamuraiJack_ joined
[16:02] *** SamuraiJack left
[16:04] *** bbkr joined
[16:07] <[Coke]> We've had a p6 project manager in the past. Is anyone currently filling that roel?

[16:07] <[Coke]> *role?

[16:12] *** domidumont left
[16:12] <timotimo> isn't that pm's role or something?

[16:13] <timotimo> given pmichaud { say $_ ~~ Perl6::Project::Manager }

[16:13] *** Targen joined
[16:17] <[Coke]> I wouldn't have guessed that, no.

[16:21] <[Coke]> tadzik: what's left todo on https://github.com/tadzik/Template-Mojo ?

[16:22] <[Coke]> (also, why is it Template::Mojo instead of 5's Mojo::Template ?)

[16:22] <masak> "A leader is best when people barely know that he exists" -- Lao Zi

[16:29] *** dmol joined
[16:31] *** Chillance joined
[16:31] *** fhelmberger left
[16:34] <arnsholt> timotimo: Odd. If I -Iblib/lib or -Ilib it doesn't matter on my end

[16:35] *** domidumont joined
[16:38] <PerlJam> Coke: I don't understnad "p6 project manager".  We don't have a "Perl 6 project" as such.  We have a "Rakudo project" and a "Niecza project" and so forth though.  And I'd say we have a "Perl 6 product", but that's something different. 

[16:39] <PerlJam> [Coke]: who was the past perl6 project manager?

[16:39] <masak> how many have we had?

[16:42] <_sri> [Coke]: i like the name, keeps Mojo::Template free for the official port

[16:43] <PerlJam> google tells me it was obra

[16:43] <PerlJam> (I never would have guessed that :)

[16:44] <masak> that sounds vaguely familiar.

[16:46] <PerlJam> From Aug 2007 -- http://www.theperlreview.com/Interviews/jesse-vincent-200708.html

[16:46] <PerlJam> It's so weird reading that now :)

[16:54] <[Coke]> jesse is the one I remember. Allison just mentioned she was doing the job for a while.

[16:55] <[Coke]> PerlJam: some (myself included) would argue that that's part of the problem. :)

[16:55] <PerlJam> [Coke]: I might just agree with you.

[16:55] <[Coke]> though I think rakudo is "winning" through sheer force of jnthn++.

[16:56] <PerlJam> .oO( jnthn is Charlie Sheen? )

[16:57] <arnsholt> More like jnthn is the Chuck Norris of compiler hacking =D

[16:59] <masak> I work with him. I can confirm he is Chuck Norris.

[17:00] *** kaleem joined
[17:01] *** daxim left
[17:02] * [Coke] ponders something project schedule like with no dates so we can document (and potentially agree) on what direction we're heading in.

[17:04] <masak> that's partly what the planned production-readiness site is meant to do.

[17:05] <masak> kind of like a compiler comparison chart, but focusing on "how far along are we with these desirables that would enable us to say 'yep, it's ready for serious use'"

[17:07] <arnsholt> The Zavolaj fails in the recent past are really motivating me to whipping up this automated testing stuff I talked about recently as well

[17:08] <arnsholt> We really need to get something like that running

[17:09] <masak> +1

[17:09] <[Coke]> wasn't "emmentaler" the answer to that question?

[17:09] <masak> yes.

[17:09] <[Coke]> what's the current state of that?

[17:10] <masak> sergot++ got something up and running.

[17:10] <masak> tadzik linked to it earlier today in the backlog.

[17:10] <masak> but it hasn't been updated in a while.

[17:10] <arnsholt> Does emmentaler test the compilers as well?

[17:16] *** flussence joined
[17:18] *** kaleem left
[17:19] <masak> arnsholt: don't think so. I see why that would be nice-to-have too, especially on multiple platforms. but it feels like a separate thing from testing the module ecosystem.

[17:19] *** domidumont1 joined
[17:20] <FROGGS_> it should be kept separate, cpantesters only cares about modules too

[17:20] <FROGGS_> you could treat perl as a module though

[17:20] <FROGGS_> (on the websites)

[17:21] <arnsholt> True, true

[17:21] <[Coke]> arnsholt: I'm already testing the compilers:

[17:22] *** domidumont left
[17:22] <[Coke]> https://github.com/coke/perl6-roast-data

[17:22] <[Coke]> (3 of them, anyway)

[17:23] <[Coke]> ah. so emmentaler is not just "test the modules", but is also the answer to  "dogfood modules.perl.org?"

[17:24] <masak> seems so.

[17:24] *** thou left
[17:25] <flussence> g'morning, *

[17:26] <masak> o/

[17:26] *** thou joined
[17:27] * [Coke] trips over something in java 1.7 and wonders if he's expecting something he shouldn't

[17:27] <raiph> Heather: I glanced at cm. the MAIN sub has me wondering. do you know about automatic usage/help features? and using multi subs to process various command line options? http://perlcabal.org/syn/S06.html#Declaring_a_MAIN_subroutine

[17:27] <flussence> hoelzro: ping? perl6-posix/META.info has a stray whitespace at «[ "NativeCall " ]» and panda doesn't like that.

[17:28] <arnsholt> What I'm thinking of is something to automatically build Rakudo and NQP (at least for the time being) with --gen-parrot and against Parrot HEAD, and test a selection of modules

[17:28] <raiph> (for others reading along, i'm talking of https://github.com/Heather/CrystalMaiden/blob/master/bin/cm )

[17:28] <arnsholt> At least test Zavolaj, since it's pretty intertwined with the compiler guts, and I tired of randomly finding out it's broken because of some internals change I missed =)

[17:29] <[Coke]> arnsholt: I think the "selection of modules" testing is handled by sergot's emmentaler project.

[17:29] <arnsholt> Right. I should probably look at emmentaler first

[17:30] * [Coke] checks to see which version of parrot he's testing rakudo with daily.

[17:30] * [Coke] is just using --gen-parrot

[17:30] * [Coke] suspects that's appropriate for roast tests.

[17:31] <tadzik> [Coke]: I think Mojo::Template is a bad name :)

[17:31] <tadzik> esp. in our ecosystem, where it has nothing to do with Mojo, but a lot to do with Templates

[17:32] <[Coke]> and once Mojo exists?

[17:32] <tadzik> then we'll see

[17:32] <tadzik> _sri | [Coke]: i like the name, keeps Mojo::Template free for the official port

[17:32] <tadzik> sounds good to me

[17:33] <[Coke]> ... who is going to do the "official" port if not you? ;)

[17:33] <tadzik> _sri, of course :)

[17:33] <[Coke]> and why is this version not it? ;)

[17:33] <tadzik> I'm only doing unofficial ports

[17:33] <[Coke]> (_sri) ... ah. well that's fine, then!

[17:33] <tadzik> of Dancer, of Mojo::Template... ;)

[17:34] * tadzik decomutees

[17:36] <dalek> Perlito: 4f7a85e | (Flavio S. Glock)++ | src5/lib/Perlito5/X64/Assembler.pm:

[17:36] <dalek> Perlito: Perlito5::X64::Assembler - Operand set_disp8, set_disp32

[17:36] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/4f7a85e983

[17:47] *** tgt joined
[17:59] *** sqirrel_ left
[18:20] <hoelzro> good * #perl6

[18:21] <colomon> \o

[18:21] *** spider-mario joined
[18:23] <hoelzro> can anyone help me understand what '<O('%methodcall')>' does?

[18:23] <hoelzro> (in Grammar.pm)

[18:24] <arnsholt> Sets the precedence of the thingy

[18:24] <arnsholt> Which the OPP (in EXPR) uses to sort out grouping

[18:25] <PerlJam> precedence and associativity, n'est pas?

[18:26] <arnsholt> And associativity, that's true

[18:26] <hoelzro> where is the O token/rule defined?

[18:28] <hoelzro> and more importantly, where is the code that actually handles calls?

[18:28] <masak> hoelzro: in HLL::Grammar

[18:28] <hoelzro> ah ha

[18:28] <masak> (in nqp)

[18:29] <hoelzro> masak: was that for O, or call handling?

[18:29] * hoelzro is looking at that callsame bug

[18:29] <FROGGS_> and in Perl6::Grammar, search for Perl6::Grammar::O(

[18:29] <FROGGS_> Perl6::Grammar line 2885

[18:30] <masak> hoelzro: that was for O

[18:30] <hoelzro> ah, ok

[18:30] <hoelzro> so it seems that callsame + routine traits doesn't work because Routine.can('postcircumfix:<( )>') is undefined

[18:32] *** thundergnat joined
[18:32] <hoelzro> so I think a "dummy" implementation should be present so callsame can do its job

[18:32] * PerlJam wonders if there are any other "unimplemented" operators like that.

[18:34] <masak> hoelzro: I think you're simply the first to try and overload invocation like that. it makes a lot of sense to do it -- it's just not been done before.

[18:34] <hoelzro> I'm guessing calling semantics are implemented in Parrot land

[18:34] <hoelzro> masak: yay, I'm first =)

[18:34] <PerlJam> hoelzro: that means you need to blog about it ;)

[18:34] <masak> not sure the calling semantics are that tied to Parrot these days.

[18:34] <hoelzro> ;)

[18:35] <hoelzro> I'm guessing it's done in a dispatcher somehow

[18:35] <thundergnat> Good morning (UGT) perl6

[18:35] <hoelzro> my current technique relies on inserting nqp::say and recompiling =/

[18:35] <hoelzro> thundergnat: ahoy!

[18:36] <PerlJam> hoelzro: does monky patching not work so that you don't have to endure the long compile?

[18:36] <hoelzro> PerlJam: good question; haven't tried

[18:36] <PerlJam> heh, "monky patching" ... that's what happens on perlmonks  :)

[18:37] <masak> thundergnat! \o/

[18:37] <thundergnat> masak \o\

[18:37] <thundergnat> errr...  \o/

[18:38] <masak> /o/

[18:38] <PerlJam> hoelzro: I bet you can Routine.HOW.add_method() at the top of your script before you add the trait.

[18:38] *** crab2313 left
[18:38] <masak> hoelzro: it just struck me... did you explore doing '$r()' rather than 'callsame' as a workaround?

[18:38] <thundergnat> I had mentioned a few days ago that some infinite lists have extremely slow .first methods. Well, I put up a gist exploring the boundary of the problem and a possible fix.   https://gist.github.com/thundergnat/5265633

[18:38] <PerlJam> masak++ oh, good idea

[18:39] <masak> hoelzro: need to pass in the right args too. but that's a detail.

[18:39] <thundergnat> It may not be the best way to go about it, but it exposes the problem better at least.

[18:39] <hoelzro> masak: no, I did not...

[18:39] *** colomon left
[18:39] <hoelzro> good call!

[18:41] <hoelzro> masak: infinite recursion =/

[18:42] <[Coke]> thundergnat++

[18:42] <masak> hoelzro: oh! right, 'does'...

[18:42] *** kaare__ left
[18:43] <dalek> perl6-roast-data: 64a9dd8 | coke++ | / (3 files):

[18:43] <dalek> perl6-roast-data: today (automated commit)

[18:43] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/64a9dd8093

[18:43] <raiph> hoelzro: fwiw, afaik the dispatcher is now in nqp (not C)

[18:43] *** kaare_ joined
[18:43] <thundergnat> [Coke]: I even went so far as to recompile Rakudo with those methods added and it still passes roast... but it might be attacking the problem from the wrong direction.

[18:43] <[Coke]> niecza still has 18 failures. (which as I recall colomon couldn't duplicate - anyone else want to do a spec test run on niecza and see if they can find some tests to fudge?)

[18:43] <hoelzro> I'm not entirely clear which dispatcher does what

[18:44] <hoelzro> ex. jnthn's work and src/Perl6/Metamodel/Dispatchers.pm

[18:44] <[Coke]> thundergnat: pmichaud is probably the person to weigh in on that.

[18:44] <thundergnat> [Coke]: tru

[18:44] <thundergnat> *e

[18:46] *** SamuraiJack_ left
[18:47] <masak> can anyone explain to me why https://twitter.com/AlgebraFact/status/317343468282331137 is true?

[18:47] *** mmcleric joined
[18:47] <masak> I mean, those are the only two groups of order four I know of, up to isomorphism.

[18:47] <masak> but that doesn't mean it's true/proven. :)

[18:48] *** mtk left
[18:48] <hoelzro> it's the *binder* that jnthn ported to NQP, right?

[18:48] *** mtk joined
[18:49] * masak .oO( full of women )

[18:50] <hoelzro> haha

[18:50] *** colomon joined
[18:55] <raiph> hoelzro: ah. as you were then. :)

[18:57] <raiph> hoelzro: a commit comment by jnthn: "Rip out most of the C-based multi-dispatcher. Only leftover bits are the compile-time dispatch analysis used by the optimizer, which still needs porting."

[18:57] <hoelzro> I see

[18:57] <hoelzro> where is the dispatcher source located?

[18:57] <hoelzro> I could only find src/Perl6/Metamodel/Dispatchers.pm

[19:00] <raiph> https://github.com/rakudo/rakudo/commit/6191f6d65ce46a451c3f4e64d3d1d1ace011b457 ?

[19:03] <hoelzro> I just want to find the code that implements postcircumfix:<( )> =(

[19:04] <arnsholt> That should be somewhere in Routine or something

[19:04] <arnsholt> Lemme grep for a 'sec

[19:05] <arnsholt> hoelzro: Try src/core/Routine.pm:85

[19:05] <arnsholt> Oh, wait. No

[19:08] <moritz> r: say (sub () { }).can('postcircumfix:<( )>')

[19:08] <p6eval> rakudo a23458: OUTPUT«␤»

[19:09] *** am0c left
[19:09] <moritz> iirc there's some 6model stuff which handles invocations without having to go through postcircumfix:<( )>

[19:10] <arnsholt> Oh, right. That's probably it

[19:11] <raiph> r: say nqp::can(sub () { }, ('postcircumfix:<( )>')

[19:11] <p6eval> rakudo a23458: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse expression in argument list; couldn't find final ')'␤at /tmp/D7uzLWyAWK:1␤------> [32m:can(sub () { }, ('postcircumfix:<( )>')[33m⏏[31m<EOL>[0m␤    expecting any of:␤        postfix␤»

[19:11] <raiph> r: say nqp::can(sub () { }, 'postcircumfix:<( )>')

[19:11] <p6eval> rakudo a23458: OUTPUT«0␤»

[19:12] <raiph> gotta run, but https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Metamodel/BOOTSTRAP.pm ?

[19:14] <moritz> afaict BOOTSTRAP just calls that method, not installs it

[19:21] <arnsholt> hoelzro: I'm completely stumped. Sorry =/

[19:24] <hoelzro> yeah, me too =/

[19:25] <masak> this may be the *weirdest* Perl 6 code I've ever written: https://gist.github.com/masak/5266081

[19:25] <masak> (but, man do I love Perl 6)

[19:25] <masak> also, it works. :)

[19:26] *** shachaf_ left
[19:26] *** shachaf_ joined
[19:27] *** shachaf_ is now known as shachaf

[19:31] <masak> but I think that answers my own question about Z_4 and Z_2 X Z_2 being the only two groups of that size.

[19:34] <perigrin> safari doesn't like your infix operator.

[19:34] <perigrin> unless ... you're intentionally using an empty box?

[19:34] <masak> no, it's a cute little 'x' here.

[19:34] * perigrin blames mobile safari then.

[19:34] <masak> .u ⨯

[19:34] <yoleaux> U+2A2F VECTOR OR CROSS PRODUCT [Sm] (⨯)

[19:35] <masak> yoleaux: yo! :)

[19:35] <perigrin> yeah works fine in prompt.app ... fails miserably in mobile safari.

[19:36] <perigrin> chrome doesn't like it either so I blame webkit or whatever the iOS HTTP widget is.

[19:38] <flussence> .u ×

[19:38] <yoleaux> U+00D7 MULTIPLICATION SIGN [Sm] (×)

[19:39] <flussence> I guess 2A2F is the more technically correct one

[19:40] *** kivutar left
[19:41] <lue> hello world o/

[19:43] <masak> .u 2A2F

[19:43] <yoleaux> U+2A2F VECTOR OR CROSS PRODUCT [Sm] (⨯)

[19:44] <masak> flussence: oh! point. will change.

[19:44] <masak> that's the one I was looking for. missed it somehow.

[19:48] *** labster joined
[19:58] *** dmol left
[20:21] *** xinming left
[20:26] *** thirdm joined
[20:27] <sorear> .u TENSOR

[20:27] <yoleaux> No characters found

[20:27] <awwaiid> masak, what is that FIRST business?

[20:30] <diakopter> .u 2297

[20:30] <yoleaux> U+2297 CIRCLED TIMES [Sm] (⊗)

[20:30] <diakopter> eh

[20:30] <sorear> .u 2299

[20:30] <yoleaux> U+2299 CIRCLED DOT OPERATOR [Sm] (⊙)

[20:31] <sorear> masak: 00D7 has a unicode alias of "cartesian product"

[20:33] *** xinming joined
[20:37] *** cognominal joined
[20:38] <sorear> 2297 "tensor product" may also be appropriate..  2A2F is rather not

[20:39] <diakopter> o_O

[20:42] <masak> awwaiid: it's a nice way to put a "header" into a print loop.

[20:44] <awwaiid> so those happen onthe first iteration only?

[20:44] <awwaiid> fancy

[20:44] <masak> yep.

[20:45] <PerlJam> hence the name :)

[20:45] <awwaiid> the all-caps threw me I guess. used to perl5 all-caps labels being strewn about

[20:46] <PerlJam> masak: why didn't you use a FIRST block?  Accident of implementation?  or you just like the repeated FIRST?

[20:46] * colomon seems to recall desperately wanting FIRST a few years back, but has never actually used it since it actually got implemented.

[20:46] <sorear> awwaiid: it's all caps because it's viewed as a generalization of BEGIN/CHECK/INIT/END

[20:46] <awwaiid> interesting

[20:47] * lue still likes  now - BEGIN now  for execution time

[20:47] <PerlJam> awwaiid: we call those things "phasers" because they are all about when things are executed 

[20:47] <awwaiid> I tend to discourage/avoid BEGIN/CHECK/INIT/END whenever possible

[20:47] <sorear> "phasers" is the term we use now, because they correspond to a generalized notion of "execution phase changes"

[20:47] <PerlJam> (in what phase of execution)

[20:47] * awwaiid absorbs twice as fast

[20:48] <sorear> after a phaser you can have a block or statement, a syntactic category that we named "blast" because puns

[20:48] <masak> PerlJam: just like the repeated FIRST.

[20:49] <awwaiid> excellent priorities, sorear

[20:53] <sorear> awwaiid: don't credit me, they were already blasts when I joined

[20:57] *** colomon left
[20:59] *** kaare_ left
[21:01] *** fgomez left
[21:02] *** fgomez joined
[21:02] *** rindolf left
[21:03] *** skids left
[21:05] *** bruges left
[21:07] *** bruges joined
[21:08] <arnsholt> sorear: I think Rakudo calls them blorst, these days =)

[21:08] *** fgomez left
[21:09] <sorear> arnsholt: when i joined STD called them blasts and Rakudo called them blorsts.  Still not fixed? :(

[21:09] <arnsholt> Not AFAIK

[21:09] *** fgomez joined
[21:10] <PerlJam> blorst still fits ... block or statement

[21:10] <PerlJam> :)

[21:12] <masak> I think 'blast' won. despite someone's touching defense on p6l of 'blorst'.

[21:15] *** kaare_ joined
[21:19] *** rindolf joined
[21:20] <hoelzro> ok, I think I may have figured out how this works

[21:20] <hoelzro> sort of.

[21:20] <hoelzro> I think it's routine_def (or whatever it's called)

[21:21] <hoelzro> that's at least the part that associates the QAST block with the Perl 6 Block object, I think

[21:22] *** colomon joined
[21:23] *** spider-mario left
[21:24] <hoelzro> ah ha!

[21:24] <hoelzro> found it!

[21:24] <hoelzro> BOOTSTRAP.pm line 555

[21:26] *** thou left
[21:27] *** thou joined
[21:33] *** thirdm left
[21:33] *** thirdm joined
[21:34] *** thirdm left
[21:34] <PerlJam> hoelzro: how does that line relate to your problem?  

[21:34] * PerlJam doesn't immediately see it.

[21:35] <hoelzro> PerlJam: well, it and 556 show me that Parrot has an "invoke" hook that gets bound to whatever's in the $!do attribute

[21:35] <hoelzro> this is from digging around in other places, too

[21:43] *** am0c joined
[21:47] *** domidumont1 left
[21:47] *** gdey joined
[21:49] <timotimo> moritz: any new ideas WRT EXPORT_hash?

[21:51] <hoelzro> (EXPORT improvements)++

[21:56] * masak .oO( IMPORT exprovements )

[21:58] <hoelzro> so, it seems the QAST block gets associated with the code object at compile time...

[21:59] <hoelzro> ...but I'm not sure where it actually gets compiled to bytecode

[22:01] *** xilo left
[22:02] <hoelzro> wow, this is hard =/

[22:02] <hoelzro> I should really be doing my Coursera stuff.

[22:02] <hoelzro> or visiting with family.

[22:03] *** lustlife left
[22:03] *** thou left
[22:04] <hoelzro> moar typo fixes! https://github.com/rakudo/rakudo/pull/119

[22:05] *** thou joined
[22:07] *** rindolf left
[22:09] <labster> Okay, I've never done a commit to the specs yet, so how does this IO::Path look?  https://gist.github.com/labster/5267241

[22:09] *** woolfy left
[22:09] *** kaare_ left
[22:15] <hoelzro> ok, I haven't figured out how to fix the callsame bug (yet)

[22:15] <hoelzro> but I *do* have a workaround: my $clone = $r.clone; $r does role { method postcircumfix:<( )>(|) { say 'before'; my $result = $clone(); say 'after'; return $result; } }

[22:19] *** xilo joined
[22:27] *** thou left
[22:29] *** thou joined
[22:35] *** skids joined
[22:36] <masak> hoelzro: nice.

[22:36] <masak> awkward, but better than no workaround. :)

[22:47] <masak> 'night, #perl6

[22:48] <dalek> rakudo/nom: b176ca8 | (Rob Hoelz)++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[22:48] <dalek> rakudo/nom: More typo fixing

[22:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b176ca8d09

[22:48] <dalek> rakudo/nom: 25a9d6d | (Tobias Leich)++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[22:48] <dalek> rakudo/nom: Merge pull request #119 from hoelzro/nom

[22:48] <dalek> rakudo/nom: 

[22:48] <dalek> rakudo/nom: More typo fixing

[22:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/25a9d6d4c5

[22:53] <dalek> specs: 6960683 | (Brent Laabs)++ | S32-setting-library/IO.pod:

[22:53] <dalek> specs: Change IO::Path stringification, add new methods.

[22:53] <dalek> specs: .Str returns full path instead of basename

[22:53] <dalek> specs: .path is now a no-op (so Str.path.path still returns IO::Path)

[22:53] <dalek> specs: .contents is now documented - lists the directory

[22:53] <dalek> specs: .is-absolute, .is-relative, .absolute, .relative added

[22:53] <dalek> specs: review: https://github.com/perl6/specs/commit/696068389a

[22:55] *** revdiablo joined
[22:55] *** thou left
[22:56] *** thou joined
[23:13] *** PacoAir left
[23:22] <[Coke]> rn: ('A' ... 'a').say

[23:22] *** bluescreen10 left
[23:22] <p6eval> niecza v24-35-g5c06e28: OUTPUT«A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ] ^ _ ` a␤»

[23:22] <p6eval> ..rakudo 25a9d6: OUTPUT«(timeout)»

[23:24] <FROGGS_> rn: ('A' ... 'Z').say

[23:24] <p6eval> rakudo 25a9d6, niecza v24-35-g5c06e28: OUTPUT«A B C D E F G H I J K L M N O P Q R S T U V W X Y Z␤»

[23:25] <FROGGS_> rn: ('_' ... 'a').say

[23:25] <p6eval> rakudo 25a9d6: OUTPUT«(timeout)»

[23:25] <p6eval> ..niecza v24-35-g5c06e28: OUTPUT«_ ` a␤»

[23:25] <FROGGS_> rn: say '_'.ord

[23:25] <p6eval> rakudo 25a9d6, niecza v24-35-g5c06e28: OUTPUT«95␤»

[23:25] <FROGGS_> rn: say 'a'.ord

[23:25] <p6eval> rakudo 25a9d6, niecza v24-35-g5c06e28: OUTPUT«97␤»

[23:25] *** tgt left
[23:29] <[Coke]> rakudo: my %h=('a'=>1,'b'=>2); my $h_ref=\%h; say $h_ref.{'a'}

[23:29] <p6eval> rakudo 25a9d6: OUTPUT«(Any)␤»

[23:30] *** tgt joined
[23:30] <[Coke]> masak: please check https://rt.perl.org/rt3/Ticket/Display.html?id=76462 - I think this is probably correct autoviv behavior now.

[23:30] <[Coke]> r: eval "{\n\n\n\n\'}"

[23:30] <p6eval> rakudo 25a9d6: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused␤at /tmp/p_KRuLhO3q:1␤------> [32meval "{\n\[33m⏏[31mn\n\n\'}"[0m␤    expecting any of:␤        postfix␤»

[23:33] <dalek> v5: a71daf8 | (Tobias Leich)++ | lib/Perl6/P5 (2 files):

[23:33] <dalek> v5: let -d be parsed as term:filetest rather that an unknown sub with prefix

[23:33] <dalek> v5: 

[23:33] <dalek> v5: I added *a lot* debug stuff for this, which can be turned on by setting $DEBUG.

[23:33] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/a71daf88d2

[23:39] <FROGGS_> r: say '.'.IO.d

[23:39] <p6eval> rakudo 25a9d6: OUTPUT«True␤»

[23:48] <dalek> v5: e0e5402 | (Tobias Leich)++ | lib/Perl6/P5 (2 files):

[23:48] <dalek> v5: dispatch -e "foo" to "foo".IO.e

[23:48] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/e0e540254d

[23:50] *** fgomez left
[23:50] <[Coke]> rn: +(23..2300000000)

[23:51] <p6eval> rakudo 25a9d6, niecza v24-35-g5c06e28: OUTPUT«(timeout)»

[23:51] <[Coke]> rn: 0..^3.3

[23:51] <p6eval> rakudo 25a9d6, niecza v24-35-g5c06e28:  ( no output )

[23:51] <[Coke]> rn: say 0..^3.3

[23:51] <p6eval> rakudo 25a9d6, niecza v24-35-g5c06e28: OUTPUT«0..^3.3␤»

[23:52] <pmichaud> good evening, #perl6

[23:52] <[Coke]> rn: say 0..^3.3.list

[23:52] <p6eval> rakudo 25a9d6, niecza v24-35-g5c06e28: OUTPUT«0..^1␤»

[23:52] <[Coke]> rn: say (0..^3.3).list

[23:52] <p6eval> rakudo 25a9d6, niecza v24-35-g5c06e28: OUTPUT«0 1 2 3␤»

[23:52] <[Coke]> pmichaud: Allo.

[23:52] <FROGGS_> hi pmichaud 

[23:53] * [Coke] wonders if +(23..2300000000) should emit a number quickly.

[23:54] <FROGGS_> well, it could cheat

[23:54] <[Coke]> I am looking at a patch which makes it cheat, aye.

[23:54] <pmichaud> [Coke]: I suspect it wouldn't be too hard to manage, no.

[23:54] <pmichaud> er

[23:55] <[Coke]> RT# 82312. seeing if it breaks anything...

[23:55] <pmichaud> if there's an easy + reliable way to emit a number quickly, I'd go for that :)

[23:55] <[Coke]> ok. I'll get this applied.

[23:56] <pmichaud> not sure if Numeric needs a :D invocant there

[23:57] <[Coke]> test for that? +Range ?

[23:59] <[Coke]> > +Range

[23:59] <[Coke]> Cannot look up attributes in a type object

