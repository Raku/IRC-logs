[00:00] <lizmat> grrrrrrr

[00:00] <lizmat> java.lang.NullPointerException

[00:00] <lizmat>   in  (src/Perl6/Optimizer.nqp:532)

[00:01] <lizmat> calling it a night: last->done, fail->catch on taps will have to wait

[00:01] <lizmat> sleep&

[00:02] *** rurban1 left
[00:05] * jnthn sleeps also...gotta be up in 5 and a bit hours... :/

[00:05] <jnthn> &

[00:05] * japhb wonders what p6store is

[00:10] *** woolfy left
[00:13] *** woolfy joined
[00:23] *** eternaleye joined
[00:34] *** stevan_ left
[00:35] *** stevan_ joined
[00:42] *** rurban1 joined
[00:42] *** thou left
[00:45] <dwarring> rn: grammar G1 {rule TOP {[ x ]**2..3}}; say ~G1.parse("x x x x x x");

[00:45] <camelia> rakudo-parrot 180fca, rakudo-jvm 180fca: OUTPUT«x x x ␤»

[00:45] <camelia> ..niecza v24-98-g473bd20: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 1389 (warn @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 269 (Mu.Str @ 15) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/BMJgypOUu3 line 1 …»

[00:45] <dwarring> r: grammar G2 {rule TOP {:my $narity = 2..3; [ x ]**$narity}}; say ~G2.parse("x x x x x x");

[00:45] <camelia> rakudo-jvm 180fca: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/zODuXtac0I␤Quantifier quantifies nothing␤at /tmp/zODuXtac0I:1␤------> [32m2 {rule TOP {:my $narity = 2..3; [ x ]**[33m⏏[31m$narity}}; say ~G2.parse("x x x x x x");[0m␤    expecting any …»

[00:45] <camelia> ..rakudo-parrot 180fca: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/hDqxi4p2zg␤Quantifier quantifies nothing␤at /tmp/hDqxi4p2zg:1␤------> [32m2 {rule TOP {:my $narity = 2..3; [ x ]**[33m⏏[31m$narity}}; say ~G2.parse("x x x x x x");[0m␤    expecting a…»

[00:46] <dwarring> r: grammar G3 {rule TOP {:my $narity = 2..3; [ x ]**{$narity}}}; say ~G3.parse("x x x x x x");

[00:46] <camelia> rakudo-jvm 180fca: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/jIa66xgG9d␤Block case of ** quantifier not yet implemented␤at /tmp/jIa66xgG9d:1␤------> [32m3 {rule TOP {:my $narity = 2..3; [ x ]**[33m⏏[31m{$narity}}}; say ~G3.parse("x x x x x x"[0m␤…»

[00:46] <camelia> ..rakudo-parrot 180fca: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Csn36D9DeB␤Block case of ** quantifier not yet implemented␤at /tmp/Csn36D9DeB:1␤------> [32m3 {rule TOP {:my $narity = 2..3; [ x ]**[33m⏏[31m{$narity}}}; say ~G3.parse("x x x x x x"[0m…»

[00:47] * dwarring trying to compose regex ranges on the fly...

[00:47] * dwarring thinking G3 should do it, but its nyi

[00:49] *** stevan_ left
[00:50] *** btyler joined
[00:52] * dwarring or is G2 closest?

[00:59] *** stevan_ joined
[01:03] *** stevan_ left
[01:06] *** huf_ joined
[01:07] *** huf left
[01:09] <dwarring> r: grammar G4 {rule TOP {:my $n = 2;:my $m = 3; [ x ]**{$n..$m}}}; say ~G4.parse("x x x x x x");

[01:09] <camelia> rakudo-parrot 180fca: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/_zsUGWWi40␤Block case of ** quantifier not yet implemented␤at /tmp/_zsUGWWi40:1␤------> [32mrule TOP {:my $n = 2;:my $m = 3; [ x ]**[33m⏏[31m{$n..$m}}}; say ~G4.parse("x x x x x x")[0m…»

[01:09] <camelia> ..rakudo-jvm 180fca: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/r5kBg20KJp␤Block case of ** quantifier not yet implemented␤at /tmp/r5kBg20KJp:1␤------> [32mrule TOP {:my $n = 2;:my $m = 3; [ x ]**[33m⏏[31m{$n..$m}}}; say ~G4.parse("x x x x x x")[0m␤…»

[01:09] *** btyler left
[01:14] *** tgt left
[01:17] <dwarring> it may not be pretty, but I thinks there's a work around...

[01:17] <dwarring> grammar G5 {rule TOP {:my $n = 2;:my $m = 3;:my $i; [ x <?{$i++ < $m}> ]* <?{ $i >= $n}>}}; say ~G5.parse("x x x x x x");

[01:18] <dwarring> r: grammar G5 {rule TOP {:my $n = 2;:my $m = 3;:my $i; [ x <?{$i++ < $m}> ]* <?{ $i >= $n}>}}; say ~G5.parse("x x x x x x");

[01:18] <camelia> rakudo-parrot 180fca, rakudo-jvm 180fca: OUTPUT«x x x ␤»

[01:18] * dwarring not pretty, but it'll do for the moment

[01:19] *** raiph left
[01:22] *** raiph joined
[01:31] *** jferrero left
[01:31] *** jferrero joined
[01:41] *** eternaleye left
[01:58] *** benabik joined
[01:59] *** Vlavv` left
[02:05] <BenGoldberg>  r: grammar G5 {rule TOP {:my \N = 2;:my \M = 3;:my $i; [ x <?{$i++ < M}> ]* <?{ $i >= N}>}}; say ~G5.parse("x x x x x x");

[02:05] <camelia> rakudo-parrot 180fca, rakudo-jvm 180fca: OUTPUT«x x x ␤»

[02:06] <BenGoldberg>  r: grammar G5 {rule TOP {:my \N = 2;:my \M = 3;:my \i; [ x <?{i++ < M}> ]* <?{ i >= N}>}}; say ~G5.parse("x x x x x x");

[02:06] <camelia> rakudo-parrot 180fca, rakudo-jvm 180fca: OUTPUT«===SORRY!===␤No such method 'ast' for invocant of type 'NQPMu'␤»

[02:06] <BenGoldberg>  r: grammar G5 {rule TOP {:my \N = 2;:my \M = 3;:my \i = 0; [ x <?{i++ < M}> ]* <?{ i >= N}>}}; say ~G5.parse("x x x x x x");

[02:06] <camelia> rakudo-jvm 180fca: OUTPUT«Cannot modify an immutable value␤  in sub postfix:<++> at gen/jvm/CORE.setting:4265␤  in regex TOP at /tmp/WNSZ9ZRf3V:1␤  in method parse at gen/jvm/CORE.setting:12302␤  in block  at /tmp/WNSZ9ZRf3V:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:108…»

[02:06] <camelia> ..rakudo-parrot 180fca: OUTPUT«Cannot modify an immutable value␤  in sub postfix:<++> at gen/parrot/CORE.setting:4276␤  in sub postfix:<++> at gen/parrot/CORE.setting:1739␤  in regex TOP at /tmp/O2jSuaI8xi:1␤  in method parse at gen/parrot/CORE.setting:12333␤  in block  at /…»

[02:14] *** Vlavv` joined
[02:23] *** rurban1 left
[02:42] *** rurban1 joined
[03:08] *** raiph left
[03:15] *** eternaleye joined
[03:18] *** raiph joined
[03:37] *** davecc left
[03:38] *** daveec left
[03:41] *** daveec joined
[03:41] *** davecc joined
[03:58] *** stevan_ joined
[04:02] *** jnap left
[04:03] *** fridim_ joined
[04:09] *** preflex_ joined
[04:09] *** ChanServ sets mode: +v preflex_

[04:10] *** rurban1 left
[04:10] *** preflex left
[04:10] *** preflex_ is now known as preflex

[04:12] *** FROGGS left
[04:16] *** stevan_ left
[04:16] *** stevan_ joined
[04:32] *** rurban1 joined
[04:39] *** eternaleye left
[04:42] *** eternaleye joined
[04:48] *** daveccc joined
[04:51] *** daveccc left
[04:56] *** berekuk joined
[04:57] *** kaleem joined
[04:58] *** BenGoldberg left
[05:07] *** berekuk left
[05:15] *** berekuk joined
[05:22] *** odoacre joined
[05:23] *** [Sno] left
[05:29] *** berekuk left
[05:36] *** kaleem left
[05:46] *** berekuk joined
[05:48] *** Entonian joined
[05:48] <moritz> good morning, #perl6

[05:54] *** Entonian left
[06:03] *** Entonian joined
[06:05] *** Entonian left
[06:07] *** berekuk left
[06:08] *** Entonian joined
[06:08] *** Entonian left
[06:10] *** Entonian joined
[06:10] *** Entonian left
[06:14] *** Entonian joined
[06:17] *** Entonian left
[06:23] *** Entonian joined
[06:24] *** Entonian left
[06:31] *** [Sno] joined
[06:40] *** kaleem joined
[06:41] *** Entonian joined
[06:42] *** Entonian left
[06:43] *** Entonian joined
[06:46] *** rindolf joined
[06:51] *** Entonian left
[06:52] *** Entonian joined
[06:53] *** SamuraiJack joined
[06:53] *** rindolf left
[06:54] *** Entonian left
[06:54] *** rindolf joined
[06:54] *** Entonian joined
[06:57] *** rindolf left
[06:57] *** rindolf joined
[06:58] *** rurban1 left
[07:01] *** Entonian left
[07:06] *** Entonian joined
[07:06] *** Entonian left
[07:07] *** Entonian joined
[07:07] *** Entonian left
[07:08] *** Entonian joined
[07:08] *** rindolf left
[07:08] *** rindolf joined
[07:08] *** Entonian left
[07:09] *** Entonian joined
[07:12] *** Entonian left
[07:12] *** Entonian joined
[07:14] *** Entonian left
[07:14] *** Entonian joined
[07:14] *** FROGGS joined
[07:17] <FROGGS> japhb: I think it is about storing the value of one container in another

[07:19] *** lizmat_ joined
[07:20] <FROGGS> morning moritz 

[07:22] *** lizmat left
[07:23] *** hummeleB1 joined
[07:24] *** Entonian left
[07:28] *** rurban1 joined
[07:30] *** kivutar left
[07:33] *** rurban1 left
[07:35] *** PZt left
[07:36] *** hummeleB1 left
[07:37] *** hummeleB1 joined
[07:40] *** berekuk joined
[07:48] *** fridim_ left
[07:55] *** berekuk left
[08:02] *** yves left
[08:14] *** nnunley left
[08:15] *** zakharyas joined
[08:31] *** rurban1 joined
[08:35] *** rurban1 left
[08:56] *** dmol joined
[09:09] <timotimo> o/

[09:09] <timotimo> dwarring: it may be safer to compare the count of a named match group after the match rather than using ++ inside, because backtracking may bite you

[09:11] <hoelzro> damn, I always miss late-night messages =/

[09:11] <hoelzro> (good morning, #perl6)

[09:13] <masak> good morning hoelzro, #perl6

[09:14] <hoelzro> ahoy masak

[09:16] <FROGGS> o/

[09:17] <FROGGS> timotimo: I think that might be due to your patch:

[09:17] <FROGGS> t/spec/S05-modifier/perl5_5.rakudo.parrot                     (Wstat: 0 Tests: 102 Failed: 3)

[09:17] <FROGGS>   Failed tests:  5, 7, 9

[09:17] <timotimo> i think so, too. good thing i didn't merge it into nom.

[09:17] <FROGGS> timotimo: I am on nom

[09:17] <timotimo> oh?!

[09:18] <FROGGS> (using nqp HEAD)

[09:18] <timotimo> that's bad

[09:19] <timotimo> which one do you think it is? the performance tweaks?

[09:19] <FROGGS> something after rakudo 2013.10-235-g180fcac and nqp 2013.10-254-gaf22bef

[09:20] <FROGGS> my nqp-p is 2013.10-257-gc293015

[09:20] <FROGGS> rakudo is the same version

[09:21] <FROGGS> so it only can be either bdbb63a19ff37e09dd7ac15fa6a93c56f92876f6 or c2930155bd14d95e93576c9cc7e5e2209050c2e4

[09:21] <timotimo> i'll test the former, you test the latter?

[09:21] <FROGGS> k

[09:22] <FROGGS> umm

[09:22] <FROGGS> it can't be c29...

[09:22] <FROGGS> because that is for jvm only

[09:22] <timotimo> oh, right

[09:22] <timotimo> i'm testing the other commit anyway

[09:23] <FROGGS> I am testing af22bef4a382ba5a4eb887a407ff154c4de2d73c, which should fix the regression

[09:24] <timotimo> good

[09:24] <timotimo> it could be that $I12 is used for something else and is required to stay unchanged throughout other regex ops

[09:25] *** raiph left
[09:25] <timotimo> last night before bed i was thinking: findcclass probably has to rescan the whole file up to each newline for each of the newlines

[09:26] <timotimo> if there's multibyte characters in it

[09:26] <timotimo> that would explain the crazy slowness of the lineposcache in actions and grammar

[09:29] *** xinming joined
[09:30] *** iSlug joined
[09:31] <timotimo> now i thought if findcclass (and findnotcclass and friends) would cache what string they were last used on, what byte position they were at and what character position it corresponds to, it could perhaps immediately jump very close to the last newline it found rather than scanning where the "begin" character is at in the string

[09:32] *** dakkar joined
[09:32] *** rurban1 joined
[09:32] *** xinming_ left
[09:34] *** xinming left
[09:34] *** xinming joined
[09:36] *** rurban1 left
[09:38] <FROGGS> reverting it fixed it btw

[09:39] <FROGGS> timotimo: does is store any other information that you might need to cache?

[09:45] <moritz> timotimo: I don't think the caching is very benefitial, because the regex engine uses substr so often that it won't have many cache hits

[09:56] <timotimo> but i'm talking only about findcclass

[09:58] <FROGGS> I think moritz meant that findcclass will already get a substr

[09:58] <FROGGS> so it doesn't have to rescan that much

[09:58] <timotimo> i'm testing just the $I12 part reverted of that commit

[09:58] <timotimo> oh, it will?

[09:58] <timotimo> but that's kinda wasteful

[09:58] <FROGGS> I dunno

[09:59] <FROGGS> I am just a mediator :o)

[10:01] <timotimo> i don't have time to implement that cache until ... hmm ... in about 5 hours?

[10:02] <FROGGS> timotimo: it is not a bad thing to implement (experimental) stuff after a release :o)

[10:03] <FROGGS> because it is always nice to have a module test from the codebase of the release

[10:03] <timotimo> yes, true.

[10:04] <FROGGS> that's one reason I made the spawn changes right after the release

[10:09] <timotimo> yeah, the partial revert fixes the perl5 regexes

[10:09] <dalek> nqp: 4aea5a1 | (Timo Paulssen)++ | src/vm/parrot/QAST/Compiler.nqp:

[10:09] <dalek> nqp: Partially revert "tiny performance tweaks in the parrot regex compiler"

[10:09] <dalek> nqp: 

[10:09] <dalek> nqp: This reverts parts of commit bdbb63a19ff37e09dd7ac15fa6a93c56f92876f6.

[10:09] <dalek> nqp: 

[10:09] <dalek> nqp: Apparently $I12 is required to not change its value in here.

[10:09] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4aea5a1240

[10:12] <FROGGS> cool

[10:13] <FROGGS> timotimo++

[10:16] <timotimo> i don't think i deserve positive karma for this :P

[10:16] <moritz> oh yes you do

[10:16] <moritz> admitting and fixing your own mistake is a very important trait

[10:17] <moritz> in the long term much more important than getting things right in the first place, which you can't always achieve

[10:18] <FROGGS> true :o)

[10:21] <timotimo> mhh okay :)

[10:22] *** xinming left
[10:23] *** fhelmberger joined
[10:23] *** xinming joined
[10:32] *** Mouq left
[10:32] *** rurban1 joined
[10:33] *** Mouq joined
[10:34] <woolfy> Saturday 23 November: Nordic Perl Workshop in Copenhagen, Denmark.  Sponsored by the Perl 6 Community!  Yay!   http://act.yapc.eu/npw2013/index.html

[10:34] *** SamuraiJack left
[10:36] *** ssutch left
[10:36] <FROGGS> woolfy++ # thank you!

[10:36] <woolfy> Thanks to the Perl 6 Community.  Great people!

[10:37] *** rurban1 left
[10:50] <timotimo> I'll be afk for a bit now

[10:52] *** kivutar joined
[10:54] *** SamuraiJack joined
[10:59] *** tgt joined
[11:00] *** felher joined
[11:04] *** Ulti_ is now known as Ulti

[11:49] <FROGGS> lizmat_: latest rakudo + latest nqp passes p-spectests

[11:49] *** xinming left
[11:51] * moritz imagines the p-fleet flying by

[11:51] *** kivutar left
[11:51] *** xinming joined
[11:51] <tadzik> by a p-class planet

[11:54] <FROGGS> (class M)++, even if the weather is not very nice today

[11:55] <FROGGS> feels more like class L atm

[11:55] <tadzik> it's funny because M in class M can stand for Moar :P

[11:55] <FROGGS> :o)

[11:56] <FROGGS> coincidence? NO!

[12:09] *** FROGGS left
[12:15] <timotimo> should WINNER go into the new compiler release? or should it keep the winner sub that takes lists of pairs

[12:15] <timotimo> ?

[12:16] *** stevan_ left
[12:17] *** colomon left
[12:20] * timotimo is going to look into making winner * work again as expected

[12:22] *** tipdbmp left
[12:28] *** stevan_ joined
[12:29] * timotimo is browsing the irclogs to figure out when he started being involved with perl6

[12:29] *** tipdbmp joined
[12:31] *** stevan_ left
[12:35] <moritz> http://irclog.perlgeek.de/perl6/2012-01-25#i_5048758 around here, it seems

[12:36] <timotimo> that's the conclusion i've come to, as well

[12:36] *** FROGGS[mobile] joined
[12:36] <timotimo> my actual contributions started about 10 month ago.

[12:36] <timotimo> (there were a few typed exception commits 1 year 8 months ago, though)

[12:39] <FROGGS[mobile]> I am here for 13 months now

[12:42] * lizmat_ is finally awake again after fitness, swimming, a nice breakfast and a nap that took a little longer than expected

[12:42] *** lizmat_ is now known as lizmat

[12:42] <woolfy> A lot longer...

[12:42] <lizmat> FROGGS: thank you

[12:43] <timotimo> hi liz :)

[12:44] *** iSlug left
[12:51] <lizmat> hi timotimo!

[12:52] <timotimo> i'm bringing WINNER up to speed with the timeout for "wait". do you think it should go in the release or not?

[12:52] <lizmat> yes, in the release please

[12:52] <timotimo> since rakudo-jvm isn't that important for star yet, i don't think it'd be terrible

[12:53] <timotimo> how much time do i have left to make it work and pretty? :)

[12:53] <lizmat> it's fluid still, but the more people start using it now, the better

[12:53] <lizmat> I'm a little behind on my own schedule, so I'll probably cut the release sometime after 11pm tonight

[12:53] <lizmat> so about 9 hours from now

[12:53] <timotimo> ah, that sounds doable

[12:54] <lizmat> still want to see something of Copenhagen by daylight

[12:56] <FROGGS[mobile]> daylight? why that? :p

[12:57] <timotimo> what is daylight?

[12:57] <lizmat> It's that thing between nights  :-)

[12:57] <timotimo> oh, you mean when the evil day star is out?

[12:58] <lizmat> or on, depending on pov

[12:59] <timotimo> :)

[12:59] *** huf_ left
[13:01] *** huf joined
[13:06] <lizmat> hmmm... seems like the nqp release guide doesn't mention anything about jvm

[13:07] <moritz> yes, too old for that

[13:07] <lizmat> should I just ignore jvm while cutting the release

[13:07] <moritz> yes

[13:07] <lizmat> I mean, it's one tarbal in the end, right

[13:07] <lizmat> ok

[13:07] <lizmat> I will  :-)

[13:10] *** MikeFair___ joined
[13:11] *** MikeFair_ left
[13:12] <FROGGS[mobile]> the only thing would be that you have parrot specific tests

[13:12] <FROGGS[mobile]> err, spectests

[13:13] <lizmat> gotcha.. will see if I can do something to test the jvm case as well and adapt release guide accordingly

[13:13] <lizmat> now off for some tivoli&

[13:14] <FROGGS[mobile]> or does it include all and does the skipping and fudging?

[13:14] <FROGGS[mobile]> moritz: can you tell?

[13:17] <dalek> perl6-roast-data: b2e337f | coke++ | / (4 files):

[13:17] <dalek> perl6-roast-data: today (automated commit)

[13:17] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/b2e337ff18

[13:18] <timotimo> good, 0 failing tests

[13:19] *** huf left
[13:19] <moritz> FROGGS[mobile]: iirc it includes all, and simply uses t/harness to run the tests, which does the fudging and skipping

[13:20] <[Coke]> woolfy++ 

[13:20] *** huf joined
[13:21] *** benabik left
[13:21] <[Coke]> S02-types/deprecations.rakudo.jvm aborted 27 test(s)

[13:21] <[Coke]> those are the only rakudo failures we're seeing in yesterday's run.

[13:21] <[Coke]> (the parrot stuff got cleaned up, moritz++)

[13:22] <dalek> rakudo/WINNER: 528c078 | (Timo Paulssen)++ | src/ (2 files):

[13:22] <dalek> rakudo/WINNER: fixes for wait $n and winner *

[13:22] <dalek> rakudo/WINNER: review: https://github.com/rakudo/rakudo/commit/528c0780c4

[13:22] <moritz> I cleaned up parrot stuff? I can't remember :-)

[13:24] <timotimo> if anybody wants to play with the winner syntax and find the (probably) lots of cases where it doesn't work as planned yet ... ^

[13:25] <[Coke]> moritz: "don't run these jvm only tests on parrot"

[13:25] *** berekuk joined
[13:25] <moritz> ah

[13:34] *** cooper left
[13:35] *** rurban1 joined
[13:35] *** berekuk left
[13:36] *** cooper joined
[13:36] *** cooper left
[13:36] *** cooper joined
[13:39] *** rurban1 left
[13:40] *** xenoterracide left
[13:40] *** colomon joined
[13:41] * moritz also has a clean p-spectest o/

[13:44] *** kaleem left
[13:52] <timotimo> huh, the negated character range test on jvm still fails. why?

[13:54] *** spider-mario joined
[13:55] <timotimo> in the repl it works. weird.

[13:56] *** stevan_ joined
[14:00] *** berekuk joined
[14:01] <FROGGS[mobile]> sideeffects

[14:01] <timotimo> that would be pretty terrible

[14:03] *** colomon left
[14:05] <FROGGS[mobile]> dies it work in a -e too?

[14:06] <FROGGS[mobile]> does*

[14:06] <timotimo> yes, it does

[14:07] <FROGGS[mobile]> hmmm

[14:07] <FROGGS[mobile]> Well, reduce the test until it works :o)

[14:08] <FROGGS[mobile]> (sorry for stating the obvious, but I am not at my pc)

[14:08] *** kshannon left
[14:09] *** kshannon joined
[14:14] <moritz> timotimo: fwiw all the nqp qregex tests pass on nqp-j for me

[14:15] *** berekuk left
[14:17] *** nnunley joined
[14:27] <Woodi> hallo today :)

[14:28] <Woodi> found PMC like that:  http://pastebin.com/Dk9JFwyx

[14:28] *** berekuk joined
[14:29] *** xinming left
[14:29] *** kaare_ joined
[14:29] *** benabik joined
[14:31] *** xinming joined
[14:32] <timotimo> moritz: that was a rakudo-j test from S05-mass/rx.t

[14:33] <moritz> timotimo: oh

[14:34] <diakopter> .

[14:34] *** PacoAir joined
[14:34] *** berekuk left
[14:45] *** btyler joined
[14:47] *** yves_ joined
[14:47] *** bluescreen10 joined
[14:52] <dalek> rakudo/WINNER: ba8b9fb | (Timo Paulssen)++ | src/Perl6/Actions.nqp:

[14:52] <dalek> rakudo/WINNER: listify the expression for winner

[14:52] <dalek> rakudo/WINNER: 

[14:52] <dalek> rakudo/WINNER: this makes single-argument winner work.

[14:52] <dalek> rakudo/WINNER: review: https://github.com/rakudo/rakudo/commit/ba8b9fbb05

[14:56] *** ajr joined
[14:56] *** ajr is now known as Guest8202

[14:57] *** szabgab joined
[14:57] *** Guest8202 is now known as ajr_

[14:57] *** berekuk joined
[14:57] <szabgab> hi, I just compiled Rakudo * on OSX , perl6 -v works, but   running panda I get:     Could not find Shell::Command  

[14:59] <timotimo> hey szabor!

[14:59] <tadzik> szabgab! \o/

[14:59] <szabgab> hi both!

[14:59] <timotimo> no, wait. gabor, right?

[15:00] <szabgab> tadzik: you still owe me a picture of your T-shirt!

[15:00] <timotimo> i'm too lazy to write hundreds of tests for WINNER now

[15:00] <szabgab> timotimo: that's a better way to address me, but szabgab is also fine :)

[15:01] <tadzik> szabgab: oh, I thought you want the t-shirt itself :)

[15:01] <tadzik> I thought I've replied to your email, hrm

[15:02] <szabgab> you promised that too, but I'd be ok witha picture of it :)

[15:02] <tadzik> I was sure I asked you for a size you want :)

[15:02] <szabgab> but mostly I just want panda to work for me :)

[15:03] <tadzik> I should be able to help with both :)

[15:03] <szabgab> let's start with panda

[15:04] <szabgab> straight out of 2013.10 star it tells me Could not find Shell::Command 

[15:04] <szabgab> have I missed a step?

[15:04] <moritz> szabgab: do you have the transcript of your 'make install' run?

[15:04] <szabgab> not any more

[15:05] <szabgab> but I can run it again

[15:05] <moritz> :( sadpanda

[15:05] <moritz> that might help, yes

[15:06] <szabgab> oh and hi moritz

[15:06] <szabgab> paste?

[15:06] <moritz> szabgab: use gist.github.com

[15:07] <moritz> and welcome back szabgab 

[15:07] <szabgab> I got a few errors

[15:07] <szabgab> eg.

[15:07] <szabgab> Can't stat modules/shell-command/lib: No such file or directory

[15:07] <szabgab> that might be a clue :)

[15:07] <szabgab> same for modules/file-find/lib:

[15:08] <szabgab> and modules/perl6-psgi/lib:

[15:08] <szabgab> but it is still runing

[15:09] <szabgab> this is stderr: https://gist.github.com/szabgab/7583213

[15:11] *** thou joined
[15:11] <szabgab> moritz: and now stdout is also pasted

[15:12] <moritz> $  tar tzf rakudo-star-2013.10.tar.gz |grep modules/|grep -i shell|wc -l

[15:12] <moritz> 0

[15:12] <moritz> no wonder it can't stat it

[15:13] <moritz> so, apparently the tarball simply doesn't contain module :(

[15:13] <moritz> wtf

[15:14] <moritz> seems there are 4 module directories missing from the tar ball

[15:15] <moritz> file-find, perl6-File-Tools, perl6-psgi, shell-command

[15:15] <moritz> szabgab++

[15:16] *** rindolf left
[15:16] <moritz> oh, perl6-File-Tools doesn't belong in there, so effectively 3 modules missing

[15:16] <moritz> szabgab: so you probably need to bootstrap your own panda (git clone it, and then run perl6 bootstrap.pl), or wait for the next star release

[15:16] <moritz> sorry about that

[15:17] <szabgab> ok, thanks, then I can stop banging my head agains this wall

[15:18] *** berekuk left
[15:19] <moritz> szabgab: I've opened https://github.com/rakudo/star/issues/34 for you

[15:19] <szabgab> thanks

[15:24] <moritz> huh, that's weird. When I recreate the release locally, the files are included

[15:24] *** kaleem joined
[15:25] <szabgab> so I tried to install panda from github

[15:25] <szabgab> at the end of the bootstrp it told me to include     /Users/gabor/work/rakudo-star-2013.10/install/lib/parrot/5.9.0/languages/perl6/site/bin  in the path

[15:26] <szabgab> but there is no such directory

[15:26] <szabgab> actually panda was installed as /Users/gabor/work/rakudo-star-2013.10/install/lib/parrot/5.9.0/languages/perl6/site/panda

[15:26] *** stevan__ joined
[15:26] *** stevan__ left
[15:26] <szabgab> err, not even that

[15:26] * szabgab checking it now

[15:28] <szabgab> oh, I see it first told me build stage failed for File::Find: Failed building lib/File/Find.pm

[15:28] <moritz> tadzik++ wanted to debug that further, I believe

[15:29] <tadzik> I'd love to

[15:29] *** stevan_ left
[15:29] <szabgab> in any case, regarding those directories, it told me to include the .../bin directory, but instead of that I had an empty panda directory! at that level

[15:29] <szabgab> but I believe there is a problem before that

[15:29] <tadzik> yeah :(

[15:30] *** jnap joined
[15:30] <szabgab> this is a problem, because I wrote a blog post on how to get started with rakudo *  but I cannot post it as my script is in perl 6 using HTML::Template   and I cannot install it :(

[15:31] *** kivutar joined
[15:31] <szabgab> is there a templating system that comes with * ?

[15:32] <tadzik> I think Template::Mojo does

[15:32] <szabgab> No Pod found in ... Template/Mojo.pm   

[15:32] <tadzik> oh, shame on me

[15:33] <szabgab> I remember,I started to write docs for that

[15:33] <tadzik> oh, awesome!

[15:33] <szabgab> that was the last time my Yak ran away :)

[15:33] <szabgab> and I could not finish shaving it :(

[15:33] *** berekuk joined
[15:34] <szabgab> let me see if I can find the left over from that time

[15:41] *** raiph joined
[15:48] *** rurban1 joined
[16:05] *** berekuk left
[16:08] <FROGGS[mobile]> tadzik: I am going to add an S11 compliant installer (hook) to panda

[16:09] <FROGGS[mobile]> if you know any current problems that I need to be aware of, please tell

[16:10] <FROGGS[mobile]> the will coexist different installers btw

[16:11] *** berekuk joined
[16:12] <FROGGS[mobile]> there*

[16:16] *** rurban1 left
[16:16] *** rurban1 joined
[16:17] <Woodi> hey, found nice PRAM/XMT advertisement :)  http://www.umiacs.umd.edu/users/vishkin/XMT/peanutButterAndJelly.pdf

[16:18] * moritz suggests relabeling the jars

[16:25] <Woodi> umm... one by one or the other way ? ;)

[16:26] *** szabgab left
[16:29] *** berekuk left
[16:29] *** [Sno] left
[16:39] *** berekuk joined
[16:43] *** berekuk left
[16:45] *** zakharyas left
[16:45] *** lizmat_ joined
[16:48] *** lizmat left
[16:57] *** ajr joined
[16:57] *** ajr_ left
[16:57] *** ajr is now known as Guest13120

[16:57] *** Guest13120 is now known as ajr_

[17:03] *** Rotwang joined
[17:10] *** pzu joined
[17:12] *** pzu left
[17:14] *** kaleem left
[17:17] <moritz> by outsourcing. Don't care how *they* do it :-)

[17:17] *** berekuk joined
[17:21] *** berekuk left
[17:24] <timotimo> No such method 'has_value' for invocant of type 'Promise'  -  huh

[17:27] <dalek> rakudo/WINNER: 39c85ba | (Timo Paulssen)++ | src/vm/jvm/core/asyncops.pm:

[17:27] <dalek> rakudo/WINNER: promise has "has_result", not "has_value".

[17:27] <dalek> rakudo/WINNER: review: https://github.com/rakudo/rakudo/commit/39c85ba11b

[17:27] <timotimo> nobody has been testing my stuff for me! :(

[17:29] <TimToady> there is no has_result in S17

[17:29] <timotimo> ah, it's gone

[17:29] <timotimo> it was still here locally

[17:30] <dalek> rakudo/WINNER: 3e53dd5 | (Timo Paulssen)++ | src/vm/jvm/core/asyncops.pm:

[17:30] <dalek> rakudo/WINNER: use Promise.Bool instead of has_result/value.

[17:30] <dalek> rakudo/WINNER: review: https://github.com/rakudo/rakudo/commit/3e53dd5e28

[17:30] <timotimo> force-pushed over it :P

[17:32] <timotimo> my invoke_right isn't correct >_>

[17:32] <timotimo> oh, in fact, it odesn't use invoke_right here.

[17:34] *** logie left
[17:36] <dalek> rakudo-star-daily: 951eaac | coke++ | log/ (5 files):

[17:36] <dalek> rakudo-star-daily: today (automated commit)

[17:36] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/951eaac084

[17:40] <timotimo> great! lots of deprecations gone! :)

[17:41] *** FROGGS joined
[17:42] *** [Sno] joined
[17:43] <timotimo> huh, now the test hangs

[17:45] <timotimo> it calls last, but the loop does not terminate

[17:45] <timotimo> that's kind of not so good

[17:47] <timotimo> i don't think i can fix that to make the last lexotically last out of the map :(

[17:47] <timotimo> if it's dynamically inside the loop that's inside winner

[17:48] <timotimo> can i put a CATCH block around the invocation that throws last/next/... further out? or something like that?

[17:49] *** thou left
[17:49] *** dakkar left
[17:51] *** Entonian joined
[17:51] <TimToady> someone needs to straighten out all that labeled loop stuff that P5ers take for granted

[17:51] *** benabik left
[17:51] <timotimo> yeah :(

[17:52] <[Coke]> r: HELL: say "here"; goto HELL;

[17:52] <camelia> rakudo-parrot 180fca: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/Skd9U8kTFq␤Undeclared name:␤    HELL used at line 1␤Undeclared routine:␤    goto used at line 1␤␤»

[17:52] <camelia> ..rakudo-jvm 180fca: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/0jNk4JKQ6H␤Undeclared name:␤    HELL used at line 1␤Undeclared routine:␤    goto used at line 1␤␤»

[17:52] <TimToady> alas, it's one of those not-so-glamorous jobs

[17:53] <TimToady> np: HELL: say "here"; goto HELL;

[17:53] <TimToady> hmm

[17:53] <TimToady> n: HELL: say "here"; goto HELL;

[17:53] <[Coke]> Might be nice if camelia standardized "while compiling /tmp/..." so the output would collapse.

[17:53] <camelia> niecza v24-98-g473bd20: OUTPUT«(timeout)here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here␤here…»

[17:54] <Rotwang> hi

[17:54] *** ajr_ left
[17:54] <timotimo> yes, it would

[17:54] <[Coke]> (or, used the same temp file for both.)

[17:54] <TimToady> pugs: HELL: say "here"; goto HELL;

[17:54] <camelia> pugs: OUTPUT«here␤*** No such subroutine: "&goto"␤    at /tmp/_UrEDOy7H3 line 1, column 19-28␤»

[17:55] <TimToady> n: OUTER: loop { INNER: loop { say "here"; last OUTER } }

[17:55] <camelia> niecza v24-98-g473bd20: OUTPUT«here␤Unhandled exception: Nominal type check failed in binding '$x' in 'last'; got OUTER, needed Any␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (last @ 1) ␤  at /tmp/Ex4gymBHW3 line 1 (ANON @ 4) ␤  at /tmp/Ex4gymBHW3 line 1 (ANON @ 5) ␤…»

[17:55] <TimToady> wow

[17:55] <[Coke]> wow good or wow bad

[17:55] <TimToady> n: OUTER: loop { INNER: loop { say "here"; OUTER.last } }

[17:55] <camelia> niecza v24-98-g473bd20: OUTPUT«here␤Unhandled exception: Unable to resolve method last in type OUTER␤  at /tmp/rHVmusgV75 line 1 (ANON @ 4) ␤  at /tmp/rHVmusgV75 line 1 (ANON @ 5) ␤  at /tmp/rHVmusgV75 line 1 (mainline @ 6) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4…»

[17:56] <timotimo> ~@(Publish.for(1..5).Channel) just hangs :\

[17:56] *** kivutar left
[17:58] <TimToady> what does it mean to coerce a Supply to a Channel anyway?

[17:58] <TimToady> there's something deeply suspicious about Supply.for anyway

[18:01] <FROGGS> jnthn: is it possible (for you) to outline the implementation of goto and last LABEL and friends?

[18:03] <timotimo> deeply suspicious?

[18:07] <FROGGS> jnthn: so, in a month when S11 is done :o)

[18:10] *** rurban1 left
[18:11] *** Entonian left
[18:11] *** rurban1 joined
[18:15] *** fhelmberger_ joined
[18:19] *** fhelmberger left
[18:19] *** thou joined
[18:20] *** fhelmberger_ left
[18:21] <TimToady> it just seems to me that Supply.for is already just a channel in disguise

[18:21] <TimToady> depending on whether the events get scheduled serially or in parallel

[18:22] <TimToady> it's a supply that wakes up "when tapped", so it cannot easily have a second tap added, if the 1..5 are delivered instantaneously to the first tap

[18:24] <perigrin> "Sir?" "One TAP only."

[18:24] <dalek> roast: 3554f38 | (Timo Paulssen)++ | S17-concurrency/ (2 files):

[18:24] <dalek> roast: skip hanging tests :(

[18:24] <dalek> roast: review: https://github.com/perl6/roast/commit/3554f38fec

[18:25] <TimToady> if your 'more' tap is named 'a', does it call a(1),a(2),a(3),a(4),a(5) in parallel?  or is there some implicit serialization intended but not specced?

[18:25] <TimToady> if the latter, it really is just a channel

[18:25] <dalek> rakudo/WINNER: 2622c63 | (Timo Paulssen)++ | src/vm/jvm/core/ (3 files):

[18:25] <dalek> rakudo/WINNER: hotfix for winner swallowing last.

[18:25] *** ajr_ joined
[18:25] <dalek> rakudo/WINNER: review: https://github.com/rakudo/rakudo/commit/2622c6306c

[18:25] <timotimo> i have more confidence in this code now than i had earlier today, but i'm still not sure it's right enough to be released

[18:26] * lizmat_ is back but about to go out to see a wizard

[18:26] *** lizmat_ is now known as lizmat

[18:26] <TimToady> if the parallel call is intended, it seems a rather difficult way to implement a hyper or race

[18:26] <lizmat> will start release process in about 4 hours

[18:27] <TimToady> so I don't know what .for is intended to be used for

[18:27] <timotimo> anybody want to write some tests for winner? i've gotta run again for a bit.

[18:28] <lizmat> fwiw, it feels more like a demo of possibly functionality then actual useful functionality atm

[18:28] <lizmat> I'll write tests for winner, but *after* the release

[18:31] *** xinming left
[18:31] *** xinming joined
[18:33] <lizmat> off to see a wizard&

[18:34] <Rotwang> can I somehow suppress deprecated warnings?

[18:35] <Rotwang> I know that the point of deprecated warnings is that they should be fixed, but I get these warnings from core perl6 library

[18:37] *** SamuraiJack left
[18:37] <TimToady> a CONTROL block is supposed to be able to intercept warnings, but I don't know how implemented that part is

[18:37] <TimToady> there's a specced 'quietly' statement prefix that I'm pretty sure is unimplemented

[18:39] <TimToady> I don't know if there's a way to suppress classes of warnings yet at the source

[18:40] <TimToady> that would be problematic in any case if the warnings are coming from a different lexical scope, assuming such warning suppression is dynamic and not lexical

[18:40] <TimToady> er, other way around

[18:41] <TimToady> CONTROL is the intended way to modify warnings dynamically

[18:42] *** spider-mario left
[18:43] <TimToady> I guess the primary intent of Supply.for is to translate the blocking of a lazy list into a schedule of events, so 1..5 is a bad example, since it likely won't block

[18:46] *** spider-mario joined
[18:46] *** PZt joined
[18:46] <TimToady> otoh, something like Supply.for(lines) can block while doing I/O, but if the lines are dispatched in parallel, I'm not sure the 'race' semantics are worth much, unless you're just counting occurrence of something and don't care about the result order

[18:47] <TimToady> if that's the case, then Supply.for is mostly only good for lazy lists whose laziness is timed by some real events, and that doesn't do significant batching of those events while processing the lazy list

[18:48] <timotimo> rotwang, the message is probably wrong and the warning comes somewhere from your code

[18:49] <Rotwang>  Method exists (from EnumMap) called at:

[18:49] <Rotwang>   /usr/lib/parrot/5.9.0/languages/perl6/lib/NativeCall.pm6, line 81

[18:49] <Rotwang> Please use the :exists adverb instead.

[18:50] <TimToady> and if it's intended as the way to implement or hyper semantics, then it doesn't solve the fundamental problem that the list is lazy, and yields values one at a time

[18:50] <TimToady> hyper and race need to primitively be able to split lists in the middle, not head/tail

[18:50] <moritz> Rotwang: that warning is fixed in the git repo of NativeCall

[18:50] <Rotwang> cool, thanks

[18:50] <TimToady> (this is Guy Steele's insight into what's wrong with most FP languages)

[18:53] <TimToady> Oh, another problem with Supply.for, "If the iteration at some point produces an exception, then the C<catch>

[18:53] <TimToady> callable will be invoked."

[18:53] <TimToady> how is it supposed to catch an exception in a lazy list without a context in which to install a CATCH?

[18:54] <TimToady> well, I guess it's thrown at the point the next value is pulled out of the list, is all, so nevermind

[18:55] * TimToady is obviously in one of those days where he thinks out loud too much...

[19:02] *** nebuchadnezzar left
[19:02] *** tgt left
[19:03] *** nebuchadnezzar joined
[19:04] <Rotwang> is there any way to pass unsigned char or whatever in NativeCall?

[19:04] *** tgt joined
[19:10] *** eternaleye left
[19:10] *** kivutar joined
[19:12] <moritz> star: use NativeCall; my uint8 $x

[19:12] <camelia> star 2013-09: ( no output )

[19:12] <moritz> Rotwang: that's what I'D try

[19:15] *** xinming left
[19:16] <Rotwang> moritz: I've glanced through NativeCall.pm6 and found nothing similar, but it actually works 0__o, perl6 is a land of wonder for me

[19:16] <moritz> p: my uint8 $x; say $x

[19:17] <camelia> rakudo-parrot 180fca: OUTPUT«0␤»

[19:17] <moritz> Rotwang: it's probably implemented and mapped at the NQP level

[19:17] *** xinming joined
[19:18] <Rotwang> moritz: ok thank you

[19:28] <timotimo> if nobody objects, i'll merge WINNER into nom.

[19:33] * TimToady is probably going to rename fail/catch to quit/quit

[19:33] <TimToady> to give more implication that the supply is terminating early

[19:33] <diakopter> quitter

[19:34] <timotimo> i had not implemented fail yet and catch is currently just a stub action that does nothing special

[19:34] <timotimo> it'll probably result in strange errors if i don't put in an explicit NYI, though.

[19:35] *** kivutar left
[19:35] <timotimo> should i rename that catch to quit right now?

[19:35] *** bluescreen10 left
[19:39] <dalek> specs: 194620a | larry++ | S17-concurrency.pod:

[19:39] <dalek> specs: change fail/catch to quit/quit

[19:39] <dalek> specs: review: https://github.com/perl6/specs/commit/194620a2e6

[19:39] <TimToady> yes :)

[19:40] <timotimo> :)

[19:40] <TimToady> thanks for your patience, or in the absence of that, your persistence :)

[19:40] * TimToady promised not to change S17 again in the next five minutes

[19:40] <timotimo> :)

[19:41] <TimToady> *ses

[19:41] <moritz> 4 and counting

[19:41] <TimToady> well, anyone else might change it in that time :)

[19:41] <diakopter> buhleted

[19:42] <dalek> rakudo/WINNER: c3c3e54 | (Timo Paulssen)++ | src/Perl6/ (2 files):

[19:42] <dalek> rakudo/WINNER: catch => "quit", NYI for quit blocks

[19:42] <dalek> rakudo/WINNER: review: https://github.com/rakudo/rakudo/commit/c3c3e549a8

[19:42] *** ssutch joined
[19:42] <nwc10> 3 and conting

[19:42] <nwc10> er, counting

[19:42] *** spider-mario left
[19:43] <diakopter> also, conting

[19:43] *** beastd joined
[19:44] <TimToady> note the fail method is now the quit method

[19:47] <timotimo> i'm not responsible for that part :)

[19:47] <dalek> specs: 97fc551 | larry++ | S17-concurrency.pod:

[19:47] <dalek> specs: add vim line

[19:47] <dalek> specs: review: https://github.com/perl6/specs/commit/97fc55101b

[19:47] <timotimo> i only do winner.

[19:48] *** spider-mario joined
[19:48] <TimToady> good thing you don't implement the vim part either :)

[19:48] <nwc10> "this hour in Perl 6..."

[19:48] <timotimo> perl6 plugins for vim? :)

[19:50] <moritz> timotimo: re objections to merging, I have none except my general dislike of last-minute-before-release patching

[19:50] <timotimo> lizmat asked me to develop this in not-a-branch from the start :P

[19:51] <timotimo> i'll go ahead then.

[19:51] <dalek> rakudo/nom: b76c38c | (Timo Paulssen)++ | src/ (3 files):

[19:51] <dalek> rakudo/nom: implement winner syntax and WINNER sub.

[19:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b76c38cd73

[19:51] <dalek> rakudo/nom: 3129cb7 | (Timo Paulssen)++ | src/vm/jvm/core/ (2 files):

[19:51] <dalek> rakudo/nom: update usages of winner in the setting

[19:51] *** dalek left
[19:51] *** dmol1 joined
[19:52] <timotimo> sorry, dalek :(

[19:52] <timotimo> EXCESS FLOODINATE~

[19:52] *** dmol left
[19:52] *** dalek joined
[19:52] *** ChanServ sets mode: +v dalek

[19:53] <timotimo> https://github.com/perl6/nqp/pulse/monthly - oh, i did lots of stuff this month! :D

[19:59] <timotimo> https://github.com/rakudo/rakudo/pull/226 - what about this?

[20:01] <moritz> timotimo: +1 on the idea, -1 on merging until the spectest failures are fixed

[20:02] <timotimo> sure.

[20:03] *** crab2313 joined
[20:06] *** telex left
[20:08] *** telex joined
[20:09] *** DarthGandalf left
[20:15] *** DarthGandalf joined
[20:16] <Rotwang> r: 'use NativeCall;my $file="./libfoo";sub bar is native($file) { * }'

[20:16] <camelia> rakudo-parrot 180fca, rakudo-jvm 180fca: ( no output )

[20:21] <moritz> that's just a string literal :-)

[20:21] <moritz> Rotwang: that code won't work; $file is initialized at run time, but the 'is native(...)' trait is evaluated at compile time

[20:22] <Rotwang> that's good to know

[20:22] <moritz> best to use   constant libfile = ...; ... is native(libfile) { * }

[20:24] <Rotwang> so constant works also without a sigil [;

[20:25] *** kivutar joined
[20:35] *** masak left
[20:35] *** masak joined
[20:47] *** FROGGS[mobile] left
[20:55] *** REPLeffect left
[20:55] *** REPLeffect joined
[20:57] *** Mouq left
[20:58] *** awwaiid left
[20:58] *** awwaiid joined
[20:59] * [Coke] wishes he could get some time from work to hack on p6.

[21:15] *** kaare_ left
[21:16] <timotimo> okay so making before smarter for simple contents and removing scan before anchors... what else could i do...

[21:16] <timotimo> measure constant things width and generate scans for literals could be doable...

[21:17] <timotimo> removing redundant scans directly after the nfa ran seems to have been safe but not that helpful for performance... i should come up with sane benchmarks for that

[21:23] *** spider-mario left
[21:24] <raiph> timotimo: profiling?

[21:30] <raiph> timotimo: (in response to your "what else could i do" and because i don't recall why you aren't focusing on profiling)

[21:33] *** ssutch left
[21:37] <timotimo> profiling parrot is *hard*.

[21:45] *** dmol1 left
[21:47] *** PacoAir left
[21:50] *** crab2313 left
[21:51] <[Coke]> timotimo: parrot has a builtin --profile that generates kcachegrind output.

[21:51] <timotimo> yeah, that's still *hard* :(

[21:52] <[Coke]> which part? generating the output, getting it into kcachegrind, or understanding it once you're there?

[21:52] <[Coke]> I can help with the first 2.

[21:52] <timotimo> understanding it

[21:54] <[Coke]> what about profiling java

[21:55] <timotimo> never tried that

[21:55] <[Coke]> might be easier, esp. if you use visualvm

[22:12] <dwarring> timotimo: good catch, will refactor

[22:26] *** arcane joined
[22:28] <timotimo> i caught what?

[22:31] <timotimo> ah, that.

[22:32] <timotimo> where am i supposed to get jvisualvm from?

[22:32] *** Rotwang left
[22:33] <[Coke]> it's part of the distro

[22:33] <[Coke]> (in the latest JDKs)

[22:33] <timotimo> i don't have it :(

[22:33] <[Coke]> do you have a javac ?

[22:34] <timotimo> yes

[22:34] <timotimo> i have openjdk7-jdk

[22:34] <[Coke]> you need the oracle jdk to get jvisualvm

[22:34] <timotimo> oh

[22:35] <timotimo> is that Java SE Development Kit 7?

[22:35] <[Coke]> very likely.

[22:35] <timotimo> ah, "standard edition"

[22:35] <[Coke]> (we're an oracle shop at dayjob. I frequently forget there are other javas, sorry. )

[22:35] <[Coke]> as opposed to EE.

[22:35] <timotimo> ah

[22:35] <[Coke]> (which includes tons of webappy stuff, and more)

[22:36] <timotimo> how do i make sure my installed-to-home jdk will be used for everything?

[22:37] <[Coke]> I think the biggest issues with jvisualvm is that our classes don't have friendly java names. I think you can probably work out a mapping from the mangled names to the p6 ones. (by invoking .WHAT.Str, mebbe). I haven't done that kind of modification, though.

[22:37] <[Coke]> make it first in your path?

[22:37] <timotimo> OK sure.

[22:38] <[Coke]> If you get stuck on anything, I'm happy to chip in.

[22:38] *** xenoterracide joined
[22:39] * timotimo builds nqp and rakudo with oracle jdk

[22:40] *** arcane left
[22:42] *** ssutch joined
[22:46] <[Coke]> *kermitarmflail*

[22:46] <[Coke]> ->

[22:46] <timotimo> huh?

[22:47] <timotimo> it seems like die_s is taking most of the compile time in the setting, haha

[22:47] <timotimo> that's just wat.

[22:48] *** stevan_ joined
[22:52] *** lawrmcfa joined
[22:57] *** BenGoldberg joined
[22:58] <diakopter> timotimo: wat.

[23:01] *** dmol joined
[23:02] *** lawrmcfa left
[23:02] <timotimo> i better get some rest now.

[23:04] *** colomon joined
[23:05] *** xinming left
[23:06] *** xinming joined
[23:23] *** eternaleye joined
[23:38] *** kivutar left
[23:44] *** rurban1 left
[23:48] *** hummeleB1 left
