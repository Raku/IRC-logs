[00:11] *** btyler joined
[00:13] *** btyler left
[00:13] *** Psyche^_ joined
[00:16] *** Psyche^ left
[00:30] *** rurban left
[00:32] *** rurban joined
[00:45] *** stevan_ joined
[00:59] *** thou joined
[01:12] *** thou left
[01:19] *** LordV left
[01:22] *** LordVorp joined
[01:33] *** woosley joined
[01:38] *** risou_awy is now known as risou

[01:51] *** rurban left
[01:52] *** rurban joined
[01:57] *** risou is now known as risou_awy

[02:29] <moritz> \o

[02:31] <[Coke]> morning

[02:32] <moritz> [Coke]: I had kinda hoped that updating star's NQP::Configure takes care of the nqp rename

[02:33] <moritz> but I guess I have to try again :-)

[02:35] *** raiph joined
[02:37] <moritz> eeks, Configure.pl in star seems to be mostly a copy of rakudo's Configure.pl

[02:42] <raiph> r: say sprintf ( "%b", 1000 )

[02:43] <camelia> rakudo-jvm 882e33: OUTPUT«Nominal type check failed for parameter '$x'␤  in any directive:sym<b> at gen/jvm/stage2/NQPHLL.nqp:2139␤  in any !reduce at gen/jvm/stage2/QRegex.nqp:710␤  in any !cursor_pass at gen/jvm/stage2/QRegex.nqp:674␤  in any !protoregex at gen/jvm/stage2/…»

[02:43] <camelia> ..rakudo-parrot 1d15c6: OUTPUT«Nominal type check failed for parameter '$x'; expected Any but got NQPMu instead␤  in method mine at gen/parrot/CORE.setting:3253␤  in any  at gen/parrot/stage2/NQPHLL.nqp:2133␤  in any intify at gen/parrot/stage2/NQPHLL.nqp:2131␤  in any directi…»

[02:43] <raiph> r: say sprintf ( "a", 1000 )

[02:43] <camelia> rakudo-parrot 1d15c6, rakudo-jvm 882e33: OUTPUT«a 1000␤»

[02:43] <raiph> r: say sprintf ( "%d", 1000 )

[02:43] <camelia> rakudo-jvm 882e33: OUTPUT«Nominal type check failed for parameter '$x'␤  in any directive:sym<d> at gen/jvm/stage2/NQPHLL.nqp:2156␤  in any !reduce at gen/jvm/stage2/QRegex.nqp:710␤  in any !cursor_pass at gen/jvm/stage2/QRegex.nqp:674␤  in any !protoregex at gen/jvm/stage2/…»

[02:43] <camelia> ..rakudo-parrot 1d15c6: OUTPUT«Nominal type check failed for parameter '$x'; expected Any but got NQPMu instead␤  in method mine at gen/parrot/CORE.setting:3253␤  in any  at gen/parrot/stage2/NQPHLL.nqp:2133␤  in any intify at gen/parrot/stage2/NQPHLL.nqp:2131␤  in any directi…»

[02:44] <geekosaur> space?

[02:44] <geekosaur> r: say sprintf("%d", 1000)

[02:44] <camelia> rakudo-parrot 1d15c6, rakudo-jvm 882e33: OUTPUT«1000␤»

[02:44] <raiph> r: say sprintf ( "%b", 1 )

[02:44] <camelia> rakudo-parrot 1d15c6: OUTPUT«Nominal type check failed for parameter '$x'; expected Any but got NQPMu instead␤  in method mine at gen/parrot/CORE.setting:3253␤  in any  at gen/parrot/stage2/NQPHLL.nqp:2133␤  in any intify at gen/parrot/stage2/NQPHLL.nqp:2131␤  in any directi…»

[02:44] <camelia> ..rakudo-jvm 882e33: OUTPUT«Nominal type check failed for parameter '$x'␤  in any directive:sym<b> at gen/jvm/stage2/NQPHLL.nqp:2139␤  in any !reduce at gen/jvm/stage2/QRegex.nqp:710␤  in any !cursor_pass at gen/jvm/stage2/QRegex.nqp:674␤  in any !protoregex at gen/jvm/stage2/…»

[02:45] <moritz> still LTA error message

[02:45] <geekosaur> true

[02:45] <raiph> oops. i thought i was doing that privately!

[02:47] <raiph> (and i missed geekosaur++'s explanation at first)

[02:47] *** xinming_ left
[02:47] <raiph> r: say sprintf ( "a", 1000 ) # this shoulda clued me in

[02:48] <geekosaur> I was a bit terse there though

[02:48] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[02:48] <camelia> ..rakudo-parrot 1d15c6: OUTPUT«a 1000␤»

[02:49] *** dansamo2 joined
[02:51] *** dansamo left
[02:53] *** tobyink left
[03:03] *** stevan_ left
[03:04] *** stevan_ joined
[03:07] *** rurban left
[03:07] <TimToady> n: say sprintf ( "%b", 1 )  # curious

[03:07] *** ingy^ joined
[03:07] <camelia> niecza v24-98-g473bd20: OUTPUT«Unhandled exception: Not enough arguments for this format string␤  at /home/p6eval/niecza/lib/CORE.setting line 1403 (sprintf @ 4) ␤  at /tmp/T5p9CEmzS7 line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4583 (ANON @ 3) ␤  at…»

[03:07] <TimToady> heh

[03:08] <TimToady> pugs: say sprintf ( "%b", 1 )  # curious

[03:08] <camelia> pugs: OUTPUT«*** Insufficient arguments to sprintf␤    at Prelude.pm line 668, column 13-53␤»

[03:15] *** jnap left
[03:16] *** pdurbin joined
[03:20] <dalek> star: cc5c2b1 | moritz++ | / (11 files):

[03:20] <dalek> star: start to adapt build to multiple backends

[03:20] <dalek> star: review: https://github.com/rakudo/star/commit/cc5c2b11fc

[03:34] *** awwaiid left
[03:37] *** ingy^ left
[03:39] *** risou_awy is now known as risou

[03:42] *** ingy^ joined
[03:54] <lue> r: say '"a\"b"'; say '"a\"b"' ~~ /\" [<!before <!after \>\"> \N]+ \"/

[03:55] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[03:55] <camelia> ..rakudo-parrot 1d15c6: OUTPUT«===SORRY!=== Error while compiling /tmp/ISlYpUEwjL␤Unable to parse expression in metachar:sym<assert>; couldn't find final '>' ␤at /tmp/ISlYpUEwjL:1␤------> a\"b"' ~~ /\" [<!before <!after \>\"> \N⏏]+ \"/␤  …»

[03:55] <lue> r: say '"a\"b"'; say '"a\"b"' ~~ /\" [<!before <!after \\>\"> \N]+ \"/

[03:55] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[03:55] <camelia> ..rakudo-parrot 1d15c6: OUTPUT«"a\"b"␤｢"a\"b"｣␤␤»

[03:57] *** risou is now known as risou_awy

[04:00] <lue> p: say '"a\"b"'; say '"a\"b"' ~~ /\" ~ \" [<!before <!after \\>\"> \N]+/

[04:00] <camelia> rakudo-parrot 1d15c6: OUTPUT«"a\"b"␤｢"a\"b"｣␤␤»

[04:00] *** labster left
[04:01] *** mls left
[04:01] *** mls_ joined
[04:07] *** dansamo2 left
[04:07] <TimToady> http://blog.booking.com/hardening-perls-hash-function.html

[04:07] *** ingy^ left
[04:08] *** xinming joined
[04:14] <lue> Bah. I can't figure out why that regex only works sometimes (and never in the *one situation* I need it to :/)

[04:19] <TimToady> it won't work consistently because you're not consistently doing one-pass parsing

[04:20] <TimToady> doing lookbehind for \ is just wrong if there's another \ before that

[04:20] <lue> makes sense. Does that apply to stuff like [<!before \"> \N | \\\"]+ too?

[04:21] * lue thinks he should probably look at how Perl 6 has managed to deal with this :)

[04:21] <TimToady> before is generally fine

[04:21] <TimToady> as long as you don't get too fancy

[04:22] <TimToady> p6 uses a . nibbler for things that aren't escapes, and a \ just escapes whatever is after it

[04:23] <TimToady> so it automatically figures out whether there are an even or odd number of \ and does the right thing

[04:24] <TimToady> in STD.pm6, token nibbler is at line 442 or so

[04:25] *** preflex_ joined
[04:25] *** ChanServ sets mode: +v preflex_

[04:27] *** preflex left
[04:27] *** preflex_ is now known as preflex

[04:29] <TimToady> p: say '"a\"b"'; say '"a\"b"' ~~ /\" ~ \" [<!before \"> [ \\ . | . ]* /

[04:29] <camelia> rakudo-parrot 1d15c6: OUTPUT«===SORRY!=== Error while compiling /tmp/OIbeefHzb_␤Unable to parse expression in metachar:sym<[ ]>; couldn't find final ']' ␤at /tmp/OIbeefHzb_:1␤------> ~~ /\" ~ \" [<!before \"> [ \\ . | . ]* ⏏/␤    expect…»

[04:29] <TimToady> p: say '"a\"b"'; say '"a\"b"' ~~ /\" ~ \" [<!before \"> [ \\ . | . ]]* /

[04:29] <camelia> rakudo-parrot 1d15c6: OUTPUT«"a\"b"␤｢"a\"b"｣␤␤»

[04:35] <lue> Times like this remind me that regexes are, in fact, a whole 'nother programming language :)

[04:45] <TimToady> only in nibbler it's basically just [<!before <stopper>> [ <escape> || . ]]*

[04:46] <TimToady> and different quoting languages can define <escape> however they like

[04:46] <TimToady> it does variable interpolation and \t thingies too

[04:47] <ssutch> does it produce antimatter?

[04:47] <TimToady> very small amounts

[04:48] <TimToady> not enough to do a PET scan on your computer, alas

[04:48] <ssutch> :)

[04:49] <TimToady> y'know, with PET scans and CAT scans, they really should have tried harder to make MRI come out to DOG scans

[04:50] <ssutch> hah!

[04:50] <TimToady> or maybe GERBIL scans

[04:52] <geekosaur> sadly the original (NMR) is even harder to twist

[04:54] <lue> TimToady: Dipolar Oscillation Graphicalization

[04:55] <TimToady> lue++

[04:55] <lue> (maybe graphicalizationing is closer to imaging)

[04:56] <lue> .oO(GERBIL == GERBIL Electromagnetic Resonance Body Imaging Lab)

[05:17] *** SamuraiJack joined
[05:21] <lue> .oO(The system en_US.UTF-8 Compose file is *very* large)

[05:25] *** [Sno] left
[05:29] *** wbill left
[05:31] *** wbill joined
[05:35] *** wbill left
[05:40] *** risou_awy is now known as risou

[05:45] *** raiph left
[05:52] *** BenGoldberg left
[05:52] *** kaleem joined
[05:54] <diakopter> I thought mri was a real dog already....

[05:57] *** kaleem left
[05:57] *** risou is now known as risou_awy

[06:03] *** cognominal left
[06:09] *** johnny5_ left
[06:10] *** johnny5_ joined
[06:11] *** labster joined
[06:12] *** johnny5_ left
[06:13] *** johnny5_ joined
[06:14] *** Mouq left
[06:22] *** Mouq joined
[06:22] *** raiph joined
[06:27] *** Mouq left
[06:30] *** darutoko joined
[06:31] *** Mouq joined
[06:32] *** [Sno] joined
[06:38] *** Mouq left
[06:40] *** rurban joined
[06:44] *** rurban left
[06:44] *** Mouq joined
[06:49] *** Mouq left
[06:50] *** Mouq joined
[06:50] *** mls_ left
[06:52] *** mls joined
[06:56] *** kaleem joined
[07:01] *** raiph left
[07:02] *** labster left
[07:05] *** labster joined
[07:15] *** raiph joined
[07:38] *** FROGGS joined
[07:40] *** sqirrel joined
[07:40] *** denis_boyun joined
[07:41] *** risou_awy is now known as risou

[07:43] *** mstwu00 joined
[07:47] *** awwaiid joined
[07:57] *** risou is now known as risou_awy

[08:06] *** sqirrel left
[08:09] *** raiph left
[08:10] *** Rotwang joined
[08:10] *** xenoterracide left
[08:11] *** xenoterracide_ joined
[08:13] *** zakharyas joined
[08:14] *** nnunley left
[08:22] *** brrt joined
[08:28] <FROGGS> np: say ().perl

[08:28] <FROGGS> p: say ().perl

[08:28] <camelia> rakudo-parrot 1d15c6: OUTPUT«()␤»

[08:28] <FROGGS> p: say ().item.perl

[08:28] <camelia> rakudo-parrot 1d15c6: OUTPUT«$()␤»

[08:29] *** tobyink joined
[08:36] *** djanatyn left
[08:36] *** Tene left
[08:37] <FROGGS> p: class Cake { }; "a" ~~ /{ make Cake }/; say $/.ast; say $() # bug

[08:37] <camelia> rakudo-parrot 1d15c6: OUTPUT«(Cake)␤␤»

[08:37] *** Tene joined
[08:37] *** Tene left
[08:37] *** Tene joined
[08:37] *** iSlug joined
[08:37] *** djanatyn joined
[08:37] *** cognominal joined
[08:40] *** fhelmberger joined
[08:40] <FROGGS> jnthn: you don't have libicu on windows by any chance?

[08:41] *** denis_boyun left
[08:42] <FROGGS> hmmm, we could ship the dlls..., and when nqp does a --gen-parrot or so, we just place it in include/bin (or we just put there by default)

[08:43] *** cognominal left
[08:51] *** FROGGS left
[09:01] <masak> mornin', #perl6

[09:01] *** mstwu00 left
[09:03] <jnthn> preflex: tell FROGGS no, it was too much of a pain.

[09:03] <preflex>  Consider it noted.

[09:05] *** FROGGS joined
[09:07] *** darutoko- joined
[09:09] *** darutoko left
[09:10] *** nnunley joined
[09:10] <FROGGS> jnthn: but don't you think it is worth the pain?

[09:10] <preflex>  FROGGS: you have 1 new message. '/msg preflex messages' to read it.

[09:14] *** nnunley left
[09:15] <jnthn> FROGGS: Well, I did my share of Parrot/ICU/Windows related pain already, so not to me. But I'm fine if somebody else wants to get it working. :)

[09:16] <FROGGS> *g*

[09:16] <FROGGS> k

[09:17] * jnthn is happy that Moar has Unicode stuff built in, so everybody gets it automatically :)

[09:18] <FROGGS> absolutely

[09:18] <FROGGS> just make it pass the spectest then :P

[09:18] <jnthn> :P

[09:20] *** iSlug left
[09:22] *** Rotwang left
[09:23] <dalek> rakudo/nom: d916dbe | (Tobias Leich)++ | src/core/Parcel.pm:

[09:23] <dalek> rakudo/nom: RT #117425, fixes .perl for empty itemized Parcel

[09:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d916dbe88e

[09:23] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=117425

[09:23] <FROGGS> nr: say ().item.perl

[09:24] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[09:24] <camelia> ..rakudo-parrot 1d15c6, niecza v24-98-g473bd20: OUTPUT«$()␤»

[09:24] *** iSlug joined
[09:25] <moritz> that's wrong, isn't it?

[09:25] *** mstwu00 joined
[09:25] <FROGGS> it is

[09:25] <moritz> I seem to recall $() being a shorthand for $/.?ast or something

[09:26] *** mstwu00 left
[09:26] <FROGGS> the patch turns it int $( )

[09:26] <FROGGS> $() is $/.ast // ~$/

[09:26] <FROGGS> p: class Cake { }; "a" ~~ /{ make Cake }/; say $/.ast; say $() # not correct either

[09:26] <camelia> rakudo-parrot 1d15c6: OUTPUT«(Cake)␤␤»

[09:27] <FROGGS> at least, I think

[09:27] <moritz> why the bloody hell does a java process survive a kill -9 ?

[09:28] <moritz> rj: say 42

[09:28] <dalek> roast: d78543c | (Tobias Leich)++ | S02-types/parcel.t:

[09:28] <dalek> roast: tests for ().perl/().item.perl, RT #117425

[09:28] <dalek> roast: review: https://github.com/perl6/roast/commit/d78543c8fb

[09:28] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=117425

[09:28] <camelia> rakudo-jvm 882e33: OUTPUT«42␤»

[09:30] <moritz> ... and is then listed as having VIRT 0 RES 0 

[09:35] <FROGGS> moritz: since you are on that server... can you upgrade moarvm+nqp-m?

[09:35] <FROGGS> nqp-m: say(nqp::backendconfig<version>)

[09:35] <camelia> nqp-moarvm: OUTPUT«2013.10-112-ge3e33c2␤»

[09:36] <FROGGS> r: sub foo ($bar :D) { 1; }

[09:36] <camelia> rakudo-jvm 882e33: OUTPUT«===SORRY!===␤Can not invoke this object␤»

[09:36] <camelia> ..rakudo-parrot 1d15c6: OUTPUT«===SORRY!===␤invoke() not implemented in class 'QAST::Op'␤»

[09:36] *** dmol joined
[09:37] *** dakkar joined
[09:38] *** davecc left
[09:40] <FROGGS> hmmm, maybe $() behaves correctly... specs/S05-regex.pod:C<$()> is a shorthand for C<$($/.ast // ~$/)>

[09:40] <FROGGS> felt just weird

[09:40] <moritz> r: 'foo' ~~ /.* {make 'bar' } /; say $()

[09:40] <camelia> rakudo-parrot 1d15c6, rakudo-jvm 882e33: OUTPUT«bar␤»

[09:41] <moritz> r: 'foo' ~~ /.* {make Int } /; say $()

[09:41] <camelia> rakudo-parrot 1d15c6, rakudo-jvm 882e33: OUTPUT«foo␤»

[09:41] <moritz> yes, looks correct

[09:41] <FROGGS> k, thanks

[09:41] *** risou_awy is now known as risou

[09:42] <jnthn> p: class Cake { }; "a" ~~ /{ make Cake.new }/; say $/.ast; say $()

[09:42] <camelia> rakudo-parrot 1d15c6: OUTPUT«Cake.new()␤Cake.new()␤»

[09:42] <FROGGS> yes, it was just about the type object

[09:42] <jnthn> *nod*

[09:43] <moritz> FROGGS: re nqp-m on camelia, I can update it, but it would be so much easier if rakudo/moar-supported landed :-)

[09:43] <FROGGS> moritz: true :o)

[09:43] <moritz> then I can just use  Configure.pl --backends=parrot,jvm,moar and not maintain a separate compilation dir

[09:44] <FROGGS> but I guess we will live with the current situation for a few weeks

[09:52] <moritz> nqp-m: say(nqp::backendconfig<version>)

[09:52] <camelia> nqp-moarvm: OUTPUT«2013.10-120-gb08a229␤»

[09:53] <FROGGS> \o/

[09:53] <FROGGS> moritz++ # thank you :o)

[09:53] *** denis_boyun joined
[09:54] *** djanatyn left
[09:54] *** djanatyn joined
[09:55] *** djanatyn left
[09:55] *** djanatyn joined
[09:56] *** djanatyn left
[09:57] *** djanatyn joined
[09:58] *** risou is now known as risou_awy

[10:05] *** djanatyn left
[10:05] *** djanatyn joined
[10:21] *** xenoterracide_ is now known as xenoterracide

[10:24] *** tobyink left
[10:29] *** tobyink joined
[10:32] *** ssutch_ joined
[10:36] *** djanatyn left
[10:36] *** iSlug left
[10:36] *** djanatyn joined
[10:41] *** djanatyn left
[10:42] *** djanatyn joined
[10:46] *** wsri left
[10:53] <FROGGS> nqp: say(say ~~ Callable)

[10:53] <camelia> nqp-moarvm, nqp-jvm, nqp-parrot: OUTPUT«1␤»

[10:53] <FROGGS> nqp: say(int ~~ Callable)

[10:53] <camelia> nqp-parrot: OUTPUT«No type check cache and no type_check method in meta-object␤current instr.: 'ACCEPTS' pc 9897 (gen/parrot/stage2/NQPCORE.setting.pir:4487) (gen/parrot/stage2/NQPCORE.setting:584)␤»

[10:53] <camelia> ..nqp-moarvm, nqp-jvm: OUTPUT«0␤»

[10:54] <FROGGS> how can I safely check if something is allable?

[10:54] <FROGGS> how can I safely check if something is callable?

[10:54] <masak> r: sub foo {}; say &foo ~~ Callable

[10:55] <camelia> rakudo-parrot d916db, rakudo-jvm 882e33: OUTPUT«True␤»

[10:55] <masak> oh, you want to do it in NQP.

[10:55] <masak> FROGGS: maybe check a place in the grammar/actions that does this?

[10:56] <FROGGS> will do, thanks :o)

[10:56] <Woodi> hi all :)

[10:56] <FROGGS> hi Woodi 

[10:57] <Woodi> ad. TimToady++ link on booking.com: maybe keys/each randomization via alfabetical/numerical sorting would be enough to hide "natural" keys order ? and will be looong awaiting Perl feature too ;)

[10:58] <Woodi> but then probably timing attack will be possible...

[10:58] <FROGGS> a predictable sorting is a weird kind of randomization :o)

[10:58] *** nnunley joined
[11:00] *** wsri joined
[11:01] <Woodi> and ad. sleep depravation: maybe in the mood of making talks like "how to talk to managers" it is possible to invite some special forces officer and ask him how to sustain longer periods without/with only a nap ? :) assuming they know that, maybe military guys just fill the pain and not have any special technique to dil with that :)  

[11:03] <Woodi> becouse I always thinked that geek lifestyle is just a normal life with gadgets :)

[11:03] *** nnunley left
[11:03] <FROGGS> *g*

[11:03] <Woodi> what ? :)

[11:04] <FROGGS> about the lifestyle :o)

[11:05] *** djanatyn left
[11:05] *** djanatyn joined
[11:06] <Woodi> just borrow knowhow from secret services and make it everyday and everyone habits :)

[11:08] <Woodi> maybe filter some useless things...

[11:12] *** brrt left
[11:13] *** pernatiy left
[11:17] <jnthn> FROGGS: nqp::isinvokable

[11:17] *** ssutch_ left
[11:18] <jnthn> r: knowhow Everyday { } 

[11:18] <camelia> rakudo-parrot d916db, rakudo-jvm 882e33: ( no output )

[11:20] *** raiph joined
[11:20] *** raiph left
[11:22] *** xenoterracide left
[11:25] *** Mouq left
[11:26] *** kaleem left
[11:28] <FROGGS> ahh, I grepped for 'invoke'

[11:32] <jnthn> Darn morphology

[11:33] *** daxim_ joined
[11:42] *** risou_awy is now known as risou

[11:43] * moritz just listed to http://www.drabblecast.org/2013/10/03/drabblecast-298-flying-hatred-neighbors-dog/ in his lunch break, and really liked it

[11:45] *** kaleem joined
[11:49] *** denis_boyun left
[11:58] *** risou is now known as risou_awy

[12:11] *** pernatiy joined
[12:14] *** [Sno]_ joined
[12:14] *** [particle]1 joined
[12:15] *** scottp_ joined
[12:16] *** Mouq joined
[12:16] *** betterworld joined
[12:16] *** apejens_ joined
[12:16] *** moritz_ joined
[12:17] *** zakalwe joined
[12:17] *** zakalwe left
[12:17] *** zakalwe joined
[12:17] *** krunen_ joined
[12:17] *** sergot_ joined
[12:17] *** kshannon_ joined
[12:17] *** cosimo_ joined
[12:17] *** rjbs- joined
[12:17] *** Util_ joined
[12:17] *** pjcj_ joined
[12:18] *** huf_ joined
[12:19] *** eiro_ joined
[12:20] *** mtj_ joined
[12:20] *** Mouq left
[12:21] *** dakkar left
[12:21] *** [Sno] left
[12:21] *** zakalwe_ left
[12:21] *** [particle] left
[12:21] *** renormalist left
[12:21] *** Util left
[12:21] *** sergot left
[12:21] *** pjcj left
[12:21] *** huf left
[12:21] *** risou_awy left
[12:21] *** moritz left
[12:21] *** mtj_- left
[12:21] *** rjbs left
[12:21] *** [Sno]_ is now known as [Sno]

[12:22] *** nwc10 joined
[12:25] *** moritz_ is now known as moritz

[12:26] *** risou_awy joined
[12:27] *** sitaktif joined
[12:27] *** go|dfish joined
[12:27] *** dakkar joined
[12:46] *** nnunley joined
[12:51] *** nnunley left
[12:57] <FROGGS> Q: should these two do the same?  sub foo ($bar :Int) { 1; }   and   sub foo ($bar : Int) { 1; }

[12:58] *** PZt left
[13:05] <FROGGS> TimToady: ^^ ?

[13:06] <FROGGS> nr: sub foo ($bar : Int) { 1; }; foo("a") # wth is that anyway?

[13:06] <camelia> rakudo-jvm 882e33: OUTPUT«java.lang.NullPointerException␤  in sub foo at /tmp/4Rgl1jE5E7:1␤  in block  at /tmp/4Rgl1jE5E7:1␤  in any eval at gen/jvm/stage2/NQPHLL.nqp:1086␤  in any evalfiles at gen/jvm/stage2/NQPHLL.nqp:1292␤  in any command_eval at gen/jvm/stage2/NQPHLL.n…»

[13:06] <camelia> ..rakudo-parrot d916db: OUTPUT«Lexical 'self' not found␤  in sub foo at /tmp/ymF2H3hAj2:1␤  in block  at /tmp/ymF2H3hAj2:1␤  in any  at /tmp/ymF2H3hAj2:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.nqp:1133␤  in any evalfiles at…»

[13:06] <camelia> ..niecza v24-98-g473bd20: OUTPUT«Potential difficulties:␤  $bar is declared but not used at /tmp/dpTEoY6xXn line 1:␤------> sub foo (⏏$bar : Int) { 1; }; foo("a") # wth is th␤␤Unhandled exception: No value for parameter '' in 'foo'␤  at /tmp/dpTEoY6xXn l…»

[13:08] <moritz> FROGGS: it's a sub foo with parameter $bar marked as invocant, and an anonymous Int parameter

[13:09] <FROGGS> ahh

[13:09] <FROGGS> so I should read it: foo ($bar: Int)

[13:09] <moritz> (the invocant parameter also explains why r-p tries to access 'self')

[13:09] <moritz> FROGGS: correct

[13:10] <FROGGS> so what do I do with this one? https://rt.perl.org/Ticket/Display.html?id=117417

[13:10] <moritz> r: sub foo($bar :D) { }

[13:10] <camelia> rakudo-jvm 882e33: OUTPUT«===SORRY!===␤Can not invoke this object␤»

[13:10] <camelia> ..rakudo-parrot d916db: OUTPUT«===SORRY!===␤invoke() not implemented in class 'QAST::Op'␤»

[13:11] <FROGGS> my patches rakudo does not try to invoke the QAST::Op... but I dunno what it should do instead

[13:11] <moritz> r: D

[13:11] <camelia> rakudo-jvm 882e33: OUTPUT«===SORRY!=== Error while compiling /tmp/vIpRhDVLmH␤Undeclared name:␤    D used at line 1␤␤»

[13:11] <camelia> ..rakudo-parrot d916db: OUTPUT«===SORRY!=== Error while compiling /tmp/xQVv0pspME␤Undeclared name:␤    D used at line 1␤␤»

[13:11] <moritz> that's what it should do, IMHO

[13:11] <moritz> std: sub foo($bar :D) { }

[13:11] <camelia> std 8adbc60: OUTPUT«Potential difficulties:␤  $bar is declared but not used at /tmp/jHC4BYHmyc line 1:␤------> sub foo(⏏$bar :D) { }␤ok 00:01 124m␤»

[13:11] <moritz> std: sub foo($bar :D) { $bar }

[13:11] <camelia> std 8adbc60: OUTPUT«ok 00:01 125m␤»

[13:11] <moritz> wth does std parse it as?

[13:11] <moritz> subsignature?

[13:12] <FROGGS> as type_constraint

[13:12] <FROGGS> err, no

[13:12] <moritz> std: D

[13:12] <camelia> std 8adbc60: OUTPUT«===SORRY!===␤Undeclared name:␤    'D' used at line 1␤Check failed␤FAILED 00:01 120m␤»

[13:12] <moritz> std: sub foo($bar :D) { D }

[13:12] <camelia> std 8adbc60: OUTPUT«===SORRY!===␤Undeclared name:␤    'D' used at line 1␤Potential difficulties:␤  $bar is declared but not used at /tmp/YGTohZBzae line 1:␤------> sub foo(⏏$bar :D) { D }␤Check failed␤FAILED 00:01 125m␤»

[13:14] <jnthn> r: sub foo($bar : D) { }

[13:14] <camelia> rakudo-parrot d916db: OUTPUT«===SORRY!=== Error while compiling /tmp/TPpTA0cff1␤Invalid typename 'D' in parameter declaration.␤at /tmp/TPpTA0cff1:1␤------> sub foo($bar : D⏏) { }␤»

[13:14] <camelia> ..rakudo-jvm 882e33: OUTPUT«===SORRY!=== Error while compiling /tmp/RnaNhFkvvC␤Invalid typename 'D' in parameter declaration.␤at /tmp/RnaNhFkvvC:1␤------> sub foo($bar : D⏏) { }␤»

[13:14] <jnthn> std: sub foo($bar : D) { }

[13:14] <camelia> std 8adbc60: OUTPUT«===SORRY!===␤In parameter declaration, typename 'D' must be predeclared (or marked as declarative with :: prefix) at /tmp/lGVwGteIRM line 1:␤------> sub foo($bar : D⏏) { }␤Parse failed␤FAILED 00:01 123m␤»

[13:15] <jnthn> std: sub foo($bar :wtf) { }

[13:15] <camelia> std 8adbc60: OUTPUT«Potential difficulties:␤  $bar is declared but not used at /tmp/XeS3JW4dhG line 1:␤------> sub foo(⏏$bar :wtf) { }␤ok 00:01 124m␤»

[13:15] <jnthn> hmm

[13:16] *** kaleem left
[13:16] <FROGGS> it is just a colonpair within the trait

[13:18] <FROGGS> I guess the grammar needs some tweaks :o)

[13:24] <jnthn> I guess sub foo($x :rw) { } is just anothre way to write sub foo($x is rw) { } :)

[13:25] <FROGGS> and I guessed :($x : Int) would mean :(Int $x)

[13:25] <jnthn> No.

[13:25] <jnthn> It means $x as invocant, and then an anon Int :)

[13:25] <jnthn> s/Int/Int param/

[13:28] <FROGGS> bah, you're just quoting moritz++ :o)

[13:30] *** ajr joined
[13:30] *** ajr is now known as Guest68662

[13:31] *** Guest68662 is now known as ajr_

[13:43] *** risou_awy is now known as risou

[13:51] <dalek> roast: c8bf154 | (Elizabeth Mattijsen)++ | S02-types/parcel.t:

[13:51] <dalek> roast: Fix spaco: $() is the same as $( ) is it not?

[13:51] <dalek> roast: review: https://github.com/perl6/roast/commit/c8bf1544d6

[13:51] *** colomon left
[13:52] <dalek> rakudo/nom: 158e905 | (Elizabeth Mattijsen)++ | src/core/Str.pm:

[13:52] <dalek> rakudo/nom: Remove superfluous -if-

[13:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/158e905bf4

[13:53] <timotimo> lizmat: froggs put that space there, because $() means $/.?ast and hopefully $( ) means ().item

[13:55] *** pdurbin left
[13:55] <FROGGS> lizmat: an you please revert c8bf1544d6?

[13:56] <lizmat> oh?

[13:56] <lizmat> sure

[13:56] <lizmat> why?

[13:56] <FROGGS> lizmat: see what timotimo said

[13:56] <FROGGS> $() is something else than $( )

[13:57] * lizmat must backlog some more then

[13:57] <FROGGS> lizmat: <timotimo> lizmat: froggs put that space there, because $() means $/.?ast and hopefully $( ) means ().item

[13:57] <lizmat> thing is, that test just failed on parakudo

[13:57] <FROGGS> lizmat: you'd need to pull nom then

[13:57] * jnthn isn't too hopeful :P

[13:58] <FROGGS> p: say ().item.perl

[13:58] <camelia> rakudo-parrot d916db: OUTPUT«$( )␤»

[13:58] <FROGGS> see?

[13:58] <dalek> roast: 1727635 | (Elizabeth Mattijsen)++ | S02-types/parcel.t:

[13:58] <dalek> roast: Revert "Fix spaco: $() is the same as $( ) is it not?"

[13:58] <dalek> roast: 

[13:58] <dalek> roast: See http://irclog.perlgeek.de/perl6/2013-11-07#i_7826186

[13:58] <dalek> roast: review: https://github.com/perl6/roast/commit/1727635b85

[13:58] <FROGGS> thank you :o)

[13:59] <lizmat> yw, sorry for the noise

[13:59] <FROGGS> np

[14:00] *** PacoAir joined
[14:00] *** risou is now known as risou_awy

[14:07] *** jnap joined
[14:07] *** nnunley joined
[14:09] <dalek> rakudo-star-daily: f256a8e | coke++ | log/version.log:

[14:09] <dalek> rakudo-star-daily: today (automated commit)

[14:09] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/f256a8e889

[14:09] <dalek> rakudo-star-daily: e3d5959 | coke++ | log/version.log:

[14:09] <dalek> rakudo-star-daily: today (automated commit)

[14:09] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/e3d5959b65

[14:09] <dalek> rakudo-star-daily: 7e15317 | coke++ | log/version.log:

[14:09] <dalek> rakudo-star-daily: today (automated commit)

[14:09] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/7e153175dc

[14:09] <dalek> rakudo-star-daily: 7d19c1d | coke++ | log/ (2 files):

[14:09] <dalek> rakudo-star-daily: today (automated commit)

[14:09] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/7d19c1d441

[14:09] <dalek> rakudo-star-daily: 55e665a | coke++ | bin/star.sh:

[14:09] <dalek> rakudo-star-daily: track changes to rakudo build process.

[14:09] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/55e665ac84

[14:10] <[Coke]> moritz: https://github.com/rakudo/star/commit/cc5c2b11fc2d90b56a46d336fcfb57b23faef396 also upgrade a bunch of modules. intentional?

[14:10] <[Coke]> er, those might be down or sidegrades, I dunno.

[14:10] <moritz> [Coke]: not intentional, but also not harmful

[14:10] <moritz> [Coke]: thanks for asking

[14:11] <[Coke]> We should get a useful run of rakudo-star-daily today. yay.

[14:11] <[Coke]> moritz++

[14:14] *** denis_boyun joined
[14:15] <FROGGS> cool!

[14:18] <[Coke]> so, my issue was a combination of the github urls (they triggered a request for auth, which means they never got cloned properly via cron, so anything that touched them later died) and bad error handling in my script. 

[14:19] <[Coke]> looks like it's made it as far as building rakudo-latest, I'll check in on it later today and try to remember to do a push.

[14:19] <dalek> perl6-roast-data: e9f361d | coke++ | / (3 files):

[14:19] <dalek> perl6-roast-data: today (automated commit)

[14:19] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/e9f361d9b9

[14:19] <dalek> perl6-roast-data: e847b2e | coke++ | / (5 files):

[14:19] <dalek> perl6-roast-data: today (automated commit)

[14:19] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/e847b2ea13

[14:20] <[Coke]> ~~

[14:25] <FROGGS> p: my $foo = '*'; say "q*" ~~ / q <$foo> / # lol

[14:26] <camelia> rakudo-parrot d916db: OUTPUT«Failed allocation of 1160118272 bytes␤Parrot VM: PANIC: Out of mem!␤C file src/gc/gc_gms.c, line 1974␤Parrot file (not available), line (not available)␤␤We highly suggest you notify the Parrot team if you have not been working on␤Parrot.  Use…»

[14:26] <moritz> so FROGGS, maybe should should notify the Parrot team :-)

[14:26] <FROGGS> *g*

[14:26] <FROGGS> ^----- again such a quantifier O.o

[14:26] <moritz> my hypothesis is that it somehow quantifies the null string

[14:27] <moritz> and then produces many cursors

[14:27] <FROGGS> p: "" ~~ / * / # this works though

[14:27] <camelia> rakudo-parrot d916db: OUTPUT«===SORRY!=== Error while compiling /tmp/RH5GGLL2U2␤Quantifier quantifies nothing␤at /tmp/RH5GGLL2U2:1␤------> "" ~~ / *⏏ / # this works though␤    expecting any of:␤        postfix␤        infix stopper…»

[14:27] <moritz> but then, why would it try to allocate so much memory at once?

[14:27] <moritz> p: say 'a' ~~ / ''* /

[14:27] <camelia> rakudo-parrot d916db: OUTPUT«Failed allocation of 850624512 bytes␤Parrot VM: PANIC: Out of mem!␤C file src/gc/gc_gms.c, line 1974␤Parrot file (not available), line (not available)␤␤We highly suggest you notify the Parrot team if you have not been working on␤Parrot.  Use …»

[14:28] <FROGGS> j: say 'a' ~~ / ''* /

[14:28] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[14:28] <FROGGS> j: say 1

[14:28] <FROGGS> :/

[14:28] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[14:29] <moritz> any idea how I can make rakudo-jvm more robust?

[14:29] <moritz> camelia + rj, that is

[14:29] <FROGGS> no, my exp with rj is very limited

[14:30] *** colomon joined
[14:30] *** araujo left
[14:30] *** jac50 joined
[14:30] *** araujo joined
[14:30] *** araujo left
[14:30] *** araujo joined
[14:31] *** jac50 is now known as lemOn91

[14:32] *** risou_awy is now known as risou

[14:32] *** cognominal joined
[14:35] *** rurban joined
[14:39] *** rindolf joined
[14:43] *** jeff_s1 joined
[14:44] *** bluescreen10 joined
[14:49] *** bluescreen10 left
[14:49] *** bluescreen10 joined
[14:50] <masak> moritz: I don't have any idea, but... is it known why rj is currently *not* robust?

[14:51] <masak> if it's not known, my idea would simply be "find out why"... :)

[14:51] <lizmat> having installed javac this weekend at the APW, I found that I could not run the spectest

[14:51] <lizmat> on jakudo

[14:51] <jnthn> Well, what the two have in common is the eval server.

[14:51] <lizmat> after ~10 tests, it just starts eating all memory

[14:52] <jnthn> Any test ran without that was fine, and that's how the spectets are run.

[14:52] <moritz> masak: one problem is that the resource limits (CPU, memory) don't apply to the evalserver, because it runs in a separate process

[14:52] <moritz> and yes, the evalserver seems to accumulate memory

[14:52] <lizmat> also: just a simple (^20000).join(",").split(",") makes it take up to 500% CPU at one point

[14:52] <lizmat> so I would assume there is some mem fragmentation / gc issue

[14:53] *** btyler joined
[14:53] <lizmat> as I could only envision it taking 200% CPU (one for the main thread, one for the "normal" gc)

[14:53] <jnthn> Well, we don't know how many GC threads it's actually running :)

[14:54] <moritz> also it could be JITting in a thread

[14:54] <moritz> no idea if it does

[14:54] <jnthn> also that.

[14:54] <jnthn> It may well do. It's a fairly obvious thing to do.

[14:54] <moritz> if even *I* got the idea :-)

[14:55] *** kaare_ joined
[14:55] <lizmat> well, it is so bad, that I wouldn't be able to do the release in ~ 2 weeks

[14:55] <lizmat> as I won't be able to spectest it before release

[14:56] <lizmat> so at least we need some way to make the spectest run

[14:56] <lizmat> if that is slower and serial, that's ok with me  :-)

[14:57] <jnthn> lizmat: Well, roast does it without the evalserver

[14:57] <jnthn> lizmat: But I would like to find out why/when/how it regressed

[14:57] <jnthn> As it used to be quite reliable

[14:58] <diakopter> lizmat: well, which jvm is it

[14:58] <moritz> fwiw I have those problems with OpenJDK

[14:58] <moritz> and camelia has these problems with Oracle's JDK, iirc

[14:58] <jnthn> I reproduced it with Oracle's one also

[14:59] <lizmat> $ javac -version

[14:59] <lizmat> javac 1.7.0_45

[15:02] *** rurban left
[15:07] *** cognominal left
[15:11] *** cognominal joined
[15:13] *** jnap left
[15:13] *** xenoterracide joined
[15:20] *** rurban joined
[15:25] <timotimo> i'm wondering if there has been any progress on JVM class allocation counting for rakudo

[15:26] <dalek> specs: 0b52065 | (Carl Mäsak)++ | S17-concurrency.pod:

[15:26] <dalek> specs: [S17] unspec $*TICK

[15:26] <dalek> specs: 

[15:26] <dalek> specs: It's problematic in that it assumes a single global

[15:26] <dalek> specs: scheduler. It also seems to punish the many for a

[15:26] <dalek> specs: feature only benefiting the few.

[15:26] <dalek> specs: 

[15:26] <dalek> specs: There are preferable ways to handle this, perhaps

[15:26] <dalek> specs: something like

[15:26] <dalek> specs: Supply.interval(:at(now.ceiling), :every(1))

[15:26] <dalek> specs: review: https://github.com/perl6/specs/commit/0b52065aee

[15:27] *** telex left
[15:28] <lizmat> masak: wrt to punishing, that's an implementation detail

[15:28] <lizmat> $*TICK *could* just come into operation whenever the first .tap on it is done

[15:28] *** telex joined
[15:29] <jnthn> I agree we coulda found a way to not make it punishing.

[15:30] <lizmat> p: "abcdef".split("", :limit(3) ).elems.say  # shouldn't this say "3" ?

[15:30] <camelia> rakudo-parrot 158e90: OUTPUT«6␤»

[15:30] <jnthn> But mostly I think Supply.blah is a better API for it.

[15:30] <timotimo> p: "abcdef".split("", :limit(3)).perl.say

[15:30] <camelia> rakudo-parrot 158e90: OUTPUT«("a", "b", "c", "d", "e", "f").list␤»

[15:30] <jnthn> lizmat: I don't remember :limit, but it's in the spec... :)

[15:30] <timotimo> i think it should say 4 actually

[15:31] <timotimo> split 3 times, gives 4 pieces?

[15:31] <lizmat> oddly enough, I could not find what limit means

[15:31] <TimToady> not that Instant.ceiling is actually defined...

[15:31] <timotimo> well, let's make something up and write it in the spec! :)

[15:32] <lizmat> in any case, :limit seems ignored on .split

[15:33] <TimToady> p: "abcdef".split('', 3).say

[15:33] <camelia> rakudo-parrot 158e90: OUTPUT«a b cdef␤»

[15:33] <TimToady> that because it's a positional argument

[15:33] <lizmat> argh

[15:33] <lizmat> indeed

[15:33] <PerlJam> masak: $*TICK would have been fine if it was indexed to the clock of the long now  (longnow.org/clock)

[15:33] <PerlJam> :-)

[15:34] <TimToady> :snapto(year)

[15:36] <TimToady> DateTime.tap(:every(month)

[15:37] <lizmat> p: "abcdef".split("",0).say

[15:37] <camelia> rakudo-parrot 158e90: OUTPUT«␤»

[15:37] <lizmat> p: "abcdef".split("",1).say

[15:37] <camelia> rakudo-parrot 158e90: OUTPUT«abcdef␤»

[15:37] <TimToady> a fancy way to say x 0 or x 1  :)

[15:38] <lizmat> ok, so a limit of 0 returning "" is correct ?

[15:38] * TimToady thinks it's meaningless

[15:38] <lizmat> p: "abcdef".split("",1).WHAT.say

[15:38] <camelia> rakudo-parrot 158e90: OUTPUT«(List)␤»

[15:38] <lizmat> p: "abcdef".split("",0).WHAT.say

[15:38] <camelia> rakudo-parrot 158e90: OUTPUT«(List)␤»

[15:38] <TimToady> so returning "" is as good as anything

[15:39] <lizmat> actually, it's an ampty list return it seems

[15:39] <timotimo> that makes a bit more sense than ""

[15:42] <retupmoca> 222222222222222222222222222

[15:42] <diakopter> r: $222222222222222222222222222

[15:43] <camelia> rakudo-jvm 882e33: ( no output )

[15:43] <camelia> ..rakudo-parrot 158e90: OUTPUT«Cannot use negative index -9223372036854775808 on Nil␤current instr.: 'throw' pc 403519 (src/gen/p-CORE.setting.pir:169516) (gen/parrot/CORE.setting:10565)␤called from Sub 'sink' pc 439572 (src/gen/p-CORE.setting.pir:182740) (gen/parrot/CORE.setting:…»

[15:43] <diakopter> r-j: say $222222222222222222222222222

[15:43] <camelia> rakudo-jvm 882e33: OUTPUT«(Any)␤»

[15:43] *** beastd joined
[15:43] <diakopter> r-j: say $22222222222222222222222222222222222222222222222222222222222

[15:43] <camelia> rakudo-jvm 882e33: OUTPUT«(Any)␤»

[15:43] <diakopter> heh, ok

[15:44] *** Timbus|Away joined
[15:46] *** Timbus left
[15:46] *** Timbus|Away is now known as Timbus

[15:46] *** jnap joined
[15:47] <TimToady> I guess that makes Perl a "sign language" on JVM

[15:52] *** Mouq joined
[15:58] *** Mouq left
[16:00] <jnthn> decomanatee &

[16:01] *** Guest26798 is now known as denysonique

[16:02] <lizmat> .oO( that would need a *big* aquarium, just to be decorative )

[16:04] *** beastd left
[16:12] *** dansamo2 joined
[16:16] <pmichaud> good morning, #perl6

[16:16] <timotimo> so, i was wondering. could string constants get a fast path for string-equals operations?

[16:16] <timotimo> and would that likely make any difference at all?

[16:16] <lizmat> pmichaud o/

[16:20] *** btyler left
[16:23] *** [Sno] left
[16:24] <timotimo> hm. string constants are just interned on a per-compunit (i think?) basis, so in order to make it any faster in "real life" it would probably have to do a leader-selection for all string constants when ... i guess deserializing?

[16:24] <pmichaud> p: "abcdef".split("",1).perl.say

[16:24] <camelia> rakudo-parrot 158e90: OUTPUT«("abcdef",).list␤»

[16:26] <timotimo> does the optimisation make sense? i was thinking it could help with named parameters, method/class/symbol names or something

[16:26] <timotimo> hm, but then it would probably need to make hash access faster, rather than string comparison, and that wouldn't help much, would it?

[16:26] *** btyler joined
[16:28] <PerlJam> pmichaud: o/

[16:31] *** daxim_ left
[16:35] *** bluescreen10 left
[16:35] <timotimo> oh, and pmichaud o/

[16:36] <timotimo> now i'm wondering if perhaps rakudo/nqp is somehow bad at boxing/unboxing in a way that i could fix

[16:36] <timotimo> but i'm having a hard time coming up with a test for that

[16:39] <timotimo> i mean, even if i write code to box/unbox an int a thousand times, how would i know if that's taking too long, or is okay? except if it's really pathologically slow

[16:39] *** apejens_ is now known as apejens

[16:40] *** ajr_ left
[16:41] <pmichaud> timotimo: the real question to ask at this point is "is boxing/unboxing a significant portion of running a program?"

[16:41] <pmichaud> if 10% of a program is spent boxing/unboxing ints, then yes.

[16:42] <TimToady> what are we doing N times that should be done 1 time, and what are we doing N*M times that we should only be doing N times?

[16:42] <timotimo> right.

[16:42] <pmichaud> if 1% of a program is spent boxing/unboxing ints, then even if you make it twice as fast you'll have only saved 0.5%

[16:42] <timotimo> i was thinking maybe there's some parameter to boxing/unboxing ints/strings/nums/... that can already be known at compile time, like the hints for bindattr/getattr if the class and attribute are compile-time constant, then there could be a saving

[16:42] <timotimo> but you're right of course.

[16:43] <timotimo> if it only makes up about 1% of the whole run time, i better wait until it makes up 50% of run time :)

[16:43] <PerlJam> timotimo: And you could start a new perl tradition of profiling on boxing day

[16:43] * TimToady feels like we never figured out how to figure out why r-p is so slow

[16:43] <pmichaud> TimToady: oh, I agree.

[16:43] <timotimo> TimToady: that's my feeling as well, but there's probably people who have a much better idea than me. kcachegrind is pretty opaque to me :(

[16:44] *** tobyink left
[16:44] <TimToady> of course, I don't doubt that it's an intersection of many factors, but finding out where those factors multiply rather than add would be useful

[16:45] <pmichaud> well, we know that the calling conventions were really slow at one time.

[16:45] <TimToady> my gut feeling is that there are just too many interfaces that are at a misplaced level of abstraction

[16:45] <pmichaud> it was easy to come up with PIR programs that demonstrated that Parrot was fundamentally slower than Perl 5

[16:45] <lizmat> p: "foo-bar".split(/<ws>/).join(",").say  # what *should* this say ?

[16:46] <camelia> rakudo-parrot 158e90: OUTPUT«,foo,-,bar,␤»

[16:46] <TimToady> "an OO assembly language" is kind of symptomatic

[16:46] <pmichaud> lizmat: that strikes me as being correct-ish... perhaps the leading and trailing ""'s aren't correct though.  I'd have to re-read the spec.

[16:47] <timotimo> <ws> also matches zero-width word boundaries?

[16:47] <pmichaud> <ws> matches \s* except between pairs of word characters

[16:48] <pmichaud> pairs of adjacent word characters

[16:48] <timotimo> in that case, i tend to agree that it could be considered right

[16:48] <TimToady> I think getting nulls fore and aft with split is generally just an indication you should be using comb instead :)

[16:48] <TimToady> maybe not in this case, but I think the nulls are correct

[16:49] <lizmat> oddly enough, there is a spectest that says the comma's at beginning and end shouldn't be there

[16:49] *** colomon left
[16:49] <pmichaud> lizmat: yes, I know there was some back-and-forth about null matches with split, and I don't know where the pendulum currently is at

[16:49] <lizmat> t/spec/S32-str/split.t, line 139, #63066

[16:49] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=63066

[16:49] <TimToady> p: "foo-bar".split(/<!ww>/).join(",").say

[16:49] <camelia> rakudo-parrot 158e90: OUTPUT«,foo,-,bar,␤»

[16:50] <pmichaud> S32 says "Null trailing fields are no longer trimmed by default."

[16:50] <TimToady> lizmat: the pendulum is still way on the side of "make it less dwimmy than P5 does"

[16:51] <lizmat> so the test is incorrect

[16:51] <TimToady> because history shows that with split, every DWIM has an equal and opposite WAT

[16:52] *** zakharyas left
[16:54] <TimToady> probably means we need a .trim analog(ue) for lists

[16:54] *** cognominal left
[16:55] <timotimo> would it work like .grep(so *)?

[16:55] *** renormalist joined
[16:55] <timotimo> oh, no, only at the beginning and end, not in the middle

[16:56] <lizmat> "foo-bar".split(/<ws>/, :trim ) ?

[16:56] <pmichaud> that's more of a... right

[16:56] <TimToady> lessee, if huffman turns .flip into .reverse, then .trim should turn into something .xxxxxxx

[16:56] *** rurban left
[16:56] <pmichaud> I agree with TimToady that :trim is better specified as ".comb"  :-P

[16:56] <TimToady> so we've got seven characters to bikeshed with :)

[16:56] *** rurban joined
[16:56] <TimToady> lizmat: I would not put a :trim option on split

[16:57] <TimToady> (but then, I probably wouldn't put a :chop option on quotes either...)

[16:57] <TimToady> first, :trim is ambiguous

[16:57] <TimToady> maybe it means .trim every element

[16:57] <lizmat> well, I think I removed that already, didn't I?

[16:58] <TimToady> dunno, branefuzz

[16:58] <timotimo> okay, this is more of a C question: if i put a check for the repr in use into the repr_box_int op and give a direct call to the p6int.c's functions, would the compiler likely inline that? it doesn't seem likely to me, especially since there's some kind of registry involved and the ops don't directly know the reprs afaict

[16:58] <pmichaud> so, the list analog to .trim we're looking for would remove elements from the ends of a list that match something?

[16:59] <pmichaud> .grep <-> .comb

[16:59] <dalek> specs: 6d0e761 | (Elizabeth Mattijsen)++ | S02-bits.pod:

[16:59] <dalek> specs: Remore :chop from quoted strings

[16:59] <dalek> specs: 

[16:59] <dalek> specs: Discussed this with jnthn++ at APW 2013: basically, this should be a job of

[16:59] <dalek> specs: the optimizer when it sees a .chop.

[16:59] <dalek> specs: review: https://github.com/perl6/specs/commit/6d0e7610c7

[16:59] * timotimo is thinking about something like squish/splat :P

[16:59] <pmichaud> .reverse <-> .flip

[17:00] *** risou is now known as risou_awy

[17:00] *** risou_awy is now known as risou

[17:01] *** raiph joined
[17:01] <pmichaud> .splice <-> .substr

[17:01] <pmichaud> .elems <-> .chars/.graphs/...

[17:02] * timotimo heads out

[17:03] <pmichaud> .middle

[17:03] <pmichaud> i.e., the part between the head and the tail :-)

[17:03] *** rurban left
[17:04] <TimToady> of course, p5 split just removes the tail

[17:04] *** rindolf left
[17:04] *** rindolf joined
[17:05] <pmichaud> also .body

[17:05] <TimToady> maybe it's just not worth putting in the core language

[17:05] <pmichaud> agreed that it should be speculative at this point

[17:06] <TimToady> let the user write a pop-while if they really need it

[17:06] *** jeff_s2 joined
[17:06] <TimToady> or the equivalent left-to-right FP solution that is beautiful and runs much slower :)

[17:07] <lizmat> p: my @a; @a[5]=1; say @a.elems; @a[5]:delete; say @a.elems

[17:07] <camelia> rakudo-parrot 158e90: OUTPUT«6␤0␤»

[17:07] <pmichaud> maybe the list form should be .trim and the string form should be .clip  (parallel to .flip)  :-)

[17:07] <lizmat> :delete  auto-removes elems from the end

[17:08] <TimToady> lizmat: doesn't remove ''

[17:08] <pmichaud> well, it's removing non-existent elems

[17:08] <pmichaud> not ""

[17:08] <lizmat> true, but I just wanted to mention it, just in case it changes anybody's train of thought

[17:08] <pmichaud> p:  "foo-bar".split(/<ws>/).join(',').perl.say

[17:09] <camelia> rakudo-parrot 158e90: OUTPUT«",foo,-,bar,"␤»

[17:09] *** jeff_s1 left
[17:09] <pmichaud> ummmmmm

[17:09] <pmichaud> oh.

[17:09] <pmichaud> p:  "foo-bar".split(/<ws>/).perl.say

[17:09] <camelia> rakudo-parrot 158e90: OUTPUT«("", "foo", "-", "bar", "").list␤»

[17:09] * TimToady wastes a lot of time thinking about a left-to-right solution that works lazily

[17:10] <pmichaud> .truncate has one too many characters to match the .flip/.reverse pattern

[17:10] <pmichaud> .snip might be too close to .splice :)

[17:10] <TimToady> .truncat  </ducks>

[17:10] <dalek> roast: 2f98819 | (Elizabeth Mattijsen)++ | S32-str/split.t:

[17:10] <dalek> roast: Fix broken tests related to RT #63066

[17:10] <dalek> roast: review: https://github.com/perl6/roast/commit/2f98819357

[17:10] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=63066

[17:10] <pmichaud> I like .truncat  :-)

[17:11] <pmichaud> reminds me too much of a Cat, though.

[17:11] <TimToady> If I had it to do all over again, I'd spell "truncate" without the "e".

[17:11] <lizmat> .oO( then what about .cho ? )

[17:12] <pmichaud> .shear .shave .snip .crop .pare .clip

[17:12] <pmichaud> (thesaurus.com)

[17:12] <pmichaud> .thin

[17:13] <pmichaud> .strip and I'm done with this for now :)

[17:13] <pmichaud> oh, .shuck   :-P

[17:14] <TimToady> .dock

[17:14] <pmichaud> .peel has a certain appeal

[17:14] <pmichaud> "take off the outsides"

[17:14] <TimToady> .detail :)

[17:15] <pmichaud> also .pare

[17:15] <TimToady> .behead

[17:15] <TimToady> so why isn't it .dehead?

[17:16] <pmichaud> apparently "be-" as in "off"

[17:16] <pmichaud> 17:10 <TimToady> .truncat  </ducks>

[17:16] <pmichaud> oops

[17:16] *** risou is now known as risou_awy

[17:16] <pmichaud> http://painintheenglish.com/case/819

[17:16] <pmichaud> "Why 'behead' and not 'dehead' or 'unhead'?"

[17:18] <TimToady> it doesn't not bespeak well of English

[17:19] <pmichaud> and .behead seems to have a totally different sense than .behind  :-)

[17:19] <TimToady> "foo-bar".split(/<ws>/).bethwack

[17:20] <lizmat> wow, p6 bug report by Zefram !

[17:20] <pmichaud> well, sorta.

[17:20] <FROGGS> hi @all :o)

[17:21] <pmichaud> on the bug report I'm thinking I'll just fix the comment and close the report.

[17:24] *** rurban joined
[17:24] <jnthn> evening, #perl6

[17:24] *** [Sno] joined
[17:27] <lizmat> jnthn o/

[17:27] <FROGGS> hi jnthn 

[17:29] <dalek> rakudo/nom: 84d2cb8 | (Elizabeth Mattijsen)++ | src/core/Str.pm:

[17:29] <dalek> rakudo/nom: De-gather/take Str.split

[17:29] <dalek> rakudo/nom: 

[17:29] <dalek> rakudo/nom: So at least (^20000).join(",").split(",") doesn't die horribly on jakudo

[17:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/84d2cb8eb6

[17:30] <diakopter> .oO( 999999 bottles of unnecessary cps transforms on the wall, 999999 bottles of ... )

[17:31] <pmichaud> .take one down ...

[17:32] <FROGGS> hehe

[17:33] <diakopter> .oO( if only we could automate the removal of these bottles.. )

[17:34] *** PZt joined
[17:34] <diakopter> who's zefram

[17:35] * lizmat wonders how gather/take will survive Promises/Channels/Supplies

[17:35] <lizmat> zefram is a dedicated p5p'er, one of the few that know p5 core intimately

[17:35] <lizmat> *who

[17:36] <diakopter> masak: one of the less!

[17:37] *** xenoterracide left
[17:38] <TimToady> lizmat: gather/take might be implemented with a channel underneath in some cases

[17:39] *** iSlug joined
[17:39] *** ajr joined
[17:39] *** ajr is now known as Guest86942

[17:39] <TimToady> they have nothing to do with supplies however, which are lossy

[17:39] *** Guest86942 is now known as ajr_

[17:39] <TimToady> channel : TCP :: supply : UDP

[17:40] <timotimo> oh, is that so!

[17:40] <lizmat> on Perl events, you can recognize him by his hat: http://www.fysh.org/~zefram/

[17:40] <diakopter> so supplies can be optimized away without worry?

[17:40] <lizmat> just like your fastest backup is to /dev/null ?

[17:41] *** Mouq joined
[17:41] *** SamuraiJack left
[17:42] <timotimo> diakopter: yeah, the optimizer can just remove them completely in most cases! great news! :)

[17:43] * lizmat refrains from pushing an empty repo

[17:45] *** Mouq left
[17:47] *** dansamo2 left
[17:47] *** xenoterracide joined
[17:48] <lizmat> diakopter: zefram's picture from a Perl workshop: http://farm7.static.flickr.com/6117/6344184204_53e95ecd1d_z.jpg

[17:49] <timotimo> Ticket RT #72842: Status changed from 'open' to 'resolved'  \o/

[17:49] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=72842

[17:50] <lizmat> timotimo++

[17:50] *** rurban left
[17:51] <diakopter> r-j: class class is class { }

[17:51] <camelia> rakudo-jvm 882e33: OUTPUT«===SORRY!=== Error while compiling /tmp/rgBa67TKyA␤'class' cannot inherit from itself.␤at /tmp/rgBa67TKyA:1␤------> ␤»

[17:51] <diakopter> r-j: class class does class { }

[17:51] <camelia> rakudo-jvm 882e33: OUTPUT«===SORRY!=== Error while compiling /tmp/5BprDcGTi_␤Unable to parse class definition␤at /tmp/5BprDcGTi_:1␤------> class class does ⏏class { }␤    expecting any of:␤        statement list␤        prefix or te…»

[17:52] <tadzik> r: class does does class

[17:52] <camelia> rakudo-parrot 158e90: OUTPUT«===SORRY!=== Error while compiling /tmp/FL_RRfGCl2␤Unable to parse class definition␤at /tmp/FL_RRfGCl2:1␤------> class does does ⏏class␤    expecting any of:␤        statement list␤        prefix or term…»

[17:52] <camelia> ..rakudo-jvm 882e33: OUTPUT«===SORRY!=== Error while compiling /tmp/1RVd3ofCv2␤Unable to parse class definition␤at /tmp/1RVd3ofCv2:1␤------> class does does ⏏class␤    expecting any of:␤        statement list␤        prefix or term␤…»

[17:52] <lizmat> r: do be do be do

[17:52] <timotimo> yeesh :)

[17:52] <camelia> rakudo-jvm 882e33: OUTPUT«===SORRY!=== Error while compiling /tmp/oAy03c8B4Q␤Undeclared routines:␤    be used at line 1␤    do used at line 1␤␤»

[17:52] <camelia> ..rakudo-parrot 158e90: OUTPUT«===SORRY!=== Error while compiling /tmp/ZQS_cBqaBf␤Undeclared routines:␤    be used at line 1␤    do used at line 1␤␤»

[17:53] *** felher left
[17:54] <lizmat> dinner&

[17:54] <diakopter> r-j: class X is X { }

[17:54] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[17:54] <diakopter> -_-

[17:55] <diakopter> r-p: class X is X { }

[17:55] <camelia> rakudo-parrot 158e90: OUTPUT«(timeout)»

[17:56] <timotimo> is a rebuild in progress or something?

[17:56] *** colomon joined
[17:57] <diakopter> r: 1

[17:57] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[17:57] <camelia> ..rakudo-parrot 158e90: ( no output )

[17:58] <diakopter> r: 0

[17:58] *** cognominal joined
[17:58] <camelia> rakudo-jvm 882e33: OUTPUT«(timeout)»

[17:58] <camelia> ..rakudo-parrot 158e90: ( no output )

[17:59] *** dakkar left
[18:00] <timotimo> nqp: nqp::say(nqp::eqat("ohai", "hai", 1));

[18:00] <camelia> nqp-parrot: OUTPUT«Error while compiling op eqat (source text: "nqp::eqat(\"ohai\", \"hai\", 1)"): No registered operation handler for 'eqat'␤current instr.: '' pc 58571 (gen/parrot/stage2/QAST.pir:21439) (gen/parrot/stage2/QAST.nqp:3584)␤»

[18:00] <camelia> ..nqp-moarvm: OUTPUT«Error while compiling op eqat (source text: "nqp::eqat(\"ohai\", \"hai\", 1)"): No registered operation handler for 'eqat'␤frame_name_1109␤»

[18:00] <camelia> ..nqp-jvm: OUTPUT«Method 'type' not found for invocant of class 'NQPMu'␤  in coerce (gen/jvm/stage2/QAST.nqp:4097)␤  in as_jast (gen/jvm/stage2/QAST.nqp:2981)␤  in  (gen/jvm/stage2/QAST.nqp:3678)␤  in compile_all_the_stmts (gen/jvm/stage2/QAST.nqp:3666)␤  in as_jast (gen/jvm…»

[18:00] <timotimo> i kind of thought i had put that into master

[18:01] <timotimo> ah. well, it still applies cleanly, so i'll just go ahead and merge it. it contains a stage0 rebuild, though

[18:02] <timotimo> is that bad? i could leave out the commits that use eqat in the nqp source and wait for some other stage0 update

[18:02] <TimToady> p: role class does class { }

[18:02] <camelia> rakudo-parrot 158e90: OUTPUT«===SORRY!=== Error while compiling /tmp/WJsUPTRURS␤Unable to parse role definition␤at /tmp/WJsUPTRURS:1␤------> role class does ⏏class { }␤    expecting any of:␤        statement list␤        prefix or t…»

[18:03] <TimToady> p: role role does role { }

[18:03] <camelia> rakudo-parrot 158e90: OUTPUT«===SORRY!=== Error while compiling /tmp/LGR__QeOf9␤Unable to parse role definition␤at /tmp/LGR__QeOf9:1␤------> role role does ⏏role { }␤    expecting any of:␤        statement list␤        prefix or ter…»

[18:03] <TimToady> n: role role does role { }

[18:03] <camelia> niecza v24-98-g473bd20: OUTPUT«===SORRY!===␤␤Unable to parse role definition at /tmp/aqvg8RTNyx line 1:␤------> role role ⏏does role { }␤␤Parse failed␤␤»

[18:04] <TimToady> n: role Foo does Associative {}

[18:04] <camelia> niecza v24-98-g473bd20: ( no output )

[18:04] <timotimo> say, now that my CLA has no doubt reached the higher up places of the perl foundation, could i get a rakudo commit bit? :3

[18:06] <diakopter> moritz: how do I relanuch the evalserver

[18:07] *** Rotwang joined
[18:07] *** pernatiy left
[18:08] *** thou joined
[18:09] <dalek> nqp: c726cd5 | (Timo Paulssen)++ | src/vm/ (4 files):

[18:09] <dalek> nqp: add nqp::eqat to jvm and parrot.

[18:09] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c726cd58f3

[18:09] <dalek> nqp: edab32a | (Timo Paulssen)++ | src/vm/parrot/ops/nqp.ops:

[18:09] <dalek> nqp: special case same-encoding strings, length-1 needles.

[18:09] <dalek> nqp: review: https://github.com/perl6/nqp/commit/edab32ab20

[18:09] <dalek> nqp: 705d53a | (Timo Paulssen)++ | src/vm/parrot/ops/nqp.ops:

[18:09] *** dalek left
[18:09] <timotimo> sorry, dalek :(

[18:09] *** dalek joined
[18:09] *** ChanServ sets mode: +v dalek

[18:10] <diakopter> I thought Needles was a character on BTTF

[18:13] <timotimo> i asked the freenode staffers if we could get a gentler flood limit for dalek, but they don't do that kind of thing

[18:14] *** fhelmberger_ joined
[18:16] *** fhelmberger left
[18:16] *** fhelmberger_ left
[18:16] *** ktrout joined
[18:16] *** fhelmberger joined
[18:17] <segomos> cant just rate limit his output?

[18:17] *** tobyink joined
[18:18] <timotimo> well, yeah. somebody would have to code it, though :)

[18:18] <timotimo> or configure it? i have no idea.

[18:18] <arnsholt> My suspicion is that dalek gets rate limits from several networks, but doesn't keep them straight (single global var, perhaps?)

[18:18] <timotimo> it seems more like it has one per channel, rather than one per network

[18:18] *** ktrout left
[18:19] *** tipdbmp left
[18:19] *** samebchase left
[18:19] <arnsholt> #parrot is on a different network, if that's what you were thinking of

[18:21] *** fhelmberger left
[18:21] <diakopter> arnsholt: dalek is a separate process per network

[18:22] <arnsholt> Oh. In that case, ignore what I said =)

[18:22] <diakopter> segomos: it was rate limited at one point.. but apparently not very absolutely..

[18:24] *** thou left
[18:28] <timotimo> huh.

[18:28] *** tipdbmp joined
[18:31] *** rurban joined
[18:34] <timotimo> "Unable to read configuration from NQP on the JVM" ... huh? what did i do? :/

[18:40] <Rotwang> hi

[18:40] *** btyler left
[18:41] <Rotwang> r: say ~1

[18:41] <camelia> rakudo-parrot 84d2cb: OUTPUT«1␤»

[18:41] <camelia> ..rakudo-jvm 882e33: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[18:41] <Rotwang> r: say ~1.WHAT

[18:41] <camelia> rakudo-jvm 882e33: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[18:41] <camelia> ..rakudo-parrot 84d2cb: OUTPUT«use of uninitialized value of type Int in string context  in sub warn at gen/parrot/CORE.setting:674␤␤␤»

[18:41] *** tobyink left
[18:42] <Rotwang> why is that ~1.WHAT doesn't work?

[18:42] <arnsholt> r: (~1).WHAT # Precedence perhaps?

[18:42] <camelia> rakudo-parrot 84d2cb: ( no output )

[18:42] <camelia> ..rakudo-jvm 882e33: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[18:42] <arnsholt> r: say (~1).WHAT # Derp.

[18:42] <camelia> rakudo-jvm 882e33: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[18:42] <camelia> ..rakudo-parrot 84d2cb: OUTPUT«(Str)␤»

[18:42] <arnsholt> There we go

[18:43] <arnsholt> Rotwang: The .WHAT binds tighter than ~, so it stringified a type object, which is supposed to warn

[18:44] <Rotwang> arnsholt: I see, it makes sense, thanks

[18:47] <moritz> diakopter: you kill java with fire, and send a SIGHUP to the run-rakudo-jvm-evalserver

[18:48] *** iSlug left
[18:49] *** virtualsue joined
[18:55] *** btyler joined
[18:57] *** [particle]1 left
[19:01] *** risou_awy is now known as risou

[19:04] *** tobyink joined
[19:05] <dalek> roast: ff66768 | (Tobias Leich)++ | S12-methods/parallel-dispatch.t:

[19:05] <dalek> roast: test for RT #77436

[19:05] <dalek> roast: review: https://github.com/perl6/roast/commit/ff66768e7a

[19:05] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=77436

[19:06] *** Bucciarati_ is now known as Bucciarati

[19:09] *** virtualsue left
[19:12] <masak> wow. zefram++'s bug reports are awesome.

[19:12] <masak> like the Baroque Cycle of RT tickets.

[19:18] *** risou is now known as risou_awy

[19:22] *** tobyink left
[19:23] *** darutoko- left
[19:25] *** rindolf left
[19:28] <jnthn> OK, I may have found the JVM thingy

[19:29] *** Mouq joined
[19:30] <jnthn> oh, maybe not...

[19:33] <lue> hello world o/

[19:33] <FROGGS> hi lue 

[19:33] *** Mouq left
[19:34] <lue> trying to use a qx// in an Action method gets me this: "Error executing process: Cannot allocate memory" I'm not sure what to think.

[19:35] <FROGGS> lue: what backend?

[19:36] <lue> FROGGS: parrot

[19:36] <FROGGS> hmmmm, is it possible that it will get called very often?

[19:37] <lue> FROGGS: nope. It's the action method for an "include" statement, and the processed file has one of those statements.

[19:38] <lue> FROGGS: also, there'—

[19:38] <FROGGS> nqp-p: qx/echo 1/

[19:38] <camelia> nqp-parrot: OUTPUT«Confused at line 2, near "qx/echo 1/"␤current instr.: 'panic' pc 16305 (gen/parrot/stage2/NQPHLL.pir:6018) (gen/parrot/stage2/NQPHLL.nqp:426)␤»

[19:39] <lue> OK... switching around the qx// set variable and the function set variable so that the qx// appears before the function works.

[19:39] <lue> The function uses qx// too, btw.

[19:39] <jnthn> oh, I have I think...

[19:39] <FROGGS> lue: I can't follow but nice to know :o)

[19:40] <FROGGS> uhh, ++jnthn

[19:40] *** rurban left
[19:41] <lue> FROGGS: "my $a = getfilename;␤my $b = qx/echo $STUFF/" --> memory allocation failure, "my $b = qx/echo $STUFF/;␤my $a = getfilename;" --> success . It's weird to say the least.

[19:42] <arnsholt> Sounds like something's sensitive to memory layout

[19:42] *** virtualsue joined
[19:42] <arnsholt> Or something similar

[19:42] <FROGGS> lue: what is your rakudo version?

[19:42] *** cognominal left
[19:42] <FROGGS> would be interesting to know if my nqp::spawn is in there or not

[19:43] <lue> $ perl6 -v

[19:43] <lue> This is perl6 version 2013.10-128-g1d15c6e built on parrot 5.9.0 revision RELEASE_5_9_0

[19:43] *** rurban joined
[19:43] <lue> FROGGS: ^^^

[19:44] <FROGGS> ahh yes

[19:44] <FROGGS> okay, my spawn is in there... :/

[19:44] <FROGGS> can't tell if that is to blame though

[19:49] *** felher joined
[19:55] *** rurban left
[19:57] <dalek> nqp: 8f761f1 | (Tobias Leich)++ | docs/ops.markdown:

[19:57] <dalek> nqp: fix typo

[19:57] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8f761f12b4

[19:58] <dalek> nqp: a3cfc0f | (Tobias Leich)++ | docs/ops.markdown:

[19:58] <dalek> nqp: strip weird "f" at BOF

[19:59] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a3cfc0f15d

[19:59] *** rurban joined
[20:00] *** sahadev joined
[20:06] <timotimo> how do i find out what's wrong with my Configure.pl?

[20:08] *** woolfy left
[20:08] <moritz> timotimo: why do you think there's something wrong with Configure.pl?

[20:08] <timotimo> ===SORRY!===

[20:08] <timotimo> Unable to read configuration from NQP on the JVM

[20:08] <benabik> timotimo: Can you run nqp-j ?

[20:08] <timotimo> but when i run the full path it mentions for nqp-j --show-config, it works

[20:09] <moritz> timotimo: how do you invoke Configure.pl?

[20:09] <sahadev> rakudo-parrot: my @list = (9, 3, 5, 2, 11, 1, 4); @list ==> grep {$_ > 3} ==> my @list2; say @list2.perl

[20:09] <camelia> rakudo-parrot 84d2cb: OUTPUT«Array.new(9, 5, 11, 4)␤»

[20:09] <sahadev> rakudo-parrot: my @list = (9, 3, 5, 2, 11, 1, 4); @list ==> sort ==> my @list2; say @list2.perl

[20:09] <camelia> rakudo-parrot 84d2cb: OUTPUT«===SORRY!=== Error while compiling /tmp/i2uZbOKvLW␤Preceding context expects a term, but found infix ==> instead␤at /tmp/i2uZbOKvLW:1␤------> , 3, 5, 2, 11, 1, 4); @list ==> sort ==>⏏ my @list2; say @list2.perl[0…»

[20:09] <arnsholt> timotimo: Complete and utter shot in the dark: Are there spaces in the path?

[20:09] <timotimo> moritz: just "perl Configure.pl"

[20:09] <timotimo> arnsholt: nope, i'm not crazy :)

[20:10] <timotimo> nqp::version=2013.10-166-g54f6198

[20:10] <arnsholt> Do you have a config.default?

[20:10] <dalek> roast: 8b95783 | (Elizabeth Mattijsen)++ | S32-str/split.t:

[20:10] <dalek> roast: Remove ~6 year old cruft

[20:10] <dalek> roast: review: https://github.com/perl6/roast/commit/8b95783963

[20:10] <sahadev> what is expected to follow "sort" when using it in a feed operator chain?

[20:11] <moritz> p: my @list = (9, 3, 5, 2, 11, 1, 4); @list ==> sort() ==> say()

[20:11] <jnthn> What to sort by?

[20:11] <camelia> rakudo-parrot 84d2cb: OUTPUT«1 2 3 4 5 9 11␤»

[20:11] <jnthn> well, or nothing

[20:11] <moritz> sahadev: just writing parens seems to help

[20:12] <sahadev> rakudo-parrot: my @list = (9, 3, 5, 2, 11, 1, 4); say @list.sort.perl

[20:12] <camelia> rakudo-parrot 84d2cb: OUTPUT«(1, 2, 3, 4, 5, 9, 11)␤»

[20:12] <moritz> timotimo: can you please nopaste the complete output, plus the output from nqp --show-config

[20:12] <sahadev> jnthn: @list.sort does not expect any "sort-by" expression

[20:12] <dalek> rakudo/nom: 4ce2bfa | jnthn++ | src/vm/jvm/core/Threading.pm:

[20:12] <dalek> rakudo/nom: Avoid triggering JVM interop load at startup.

[20:12] <dalek> rakudo/nom: 

[20:12] <dalek> rakudo/nom: Was accidentally introduced when adding support for $*THREAD. This

[20:12] <dalek> rakudo/nom: hopefully makes things less bad with the eval server.

[20:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4ce2bfa1da

[20:13] <timotimo> moritz: sure

[20:13] <sahadev> moritz: why are parens required?

[20:13] <moritz> sahadev: ==> sort isn't a method call, but rather a subroutine call

[20:13] <moritz> sahadev: no idea

[20:13] <lizmat> jnthn: am going to try that right away

[20:13] <timotimo> https://gist.github.com/timo/ca805d742673454777c7

[20:15] <sahadev> moritz: so, .sort is a method call, but ==> sort isn't?

[20:15] <moritz> sahadev: correct

[20:15] <moritz> r: say sort 4, 1, 5 # not a method call either

[20:15] <camelia> rakudo-parrot 84d2cb: OUTPUT«1 4 5␤»

[20:15] <camelia> ..rakudo-jvm 882e33: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[20:16] *** ssutch left
[20:16] <sahadev> @list ==> grep { ... } ==> @list2 doesn't have any problem; no parens required here.

[20:16] <moritz> timotimo: my current hypothesis is that it's related to nqp-j being too old

[20:16] <timotimo> too old? i just built it :o

[20:16] <moritz> (but the error message sucks)

[20:16] <timotimo> huh, what.

[20:16] <moritz> nqp::version=2013.10-166-g54f6198

[20:17] <moritz> $ cat tools/build/NQP_REVISION 

[20:17] <moritz> 2013.10-178-gf42871d

[20:17] <moritz> so, 12 revisions too old

[20:17] <timotimo> yeah, you're right, but why?

[20:17] <dalek> nqp: ad26698 | (Tobias Leich)++ | docs/ops.markdown:

[20:17] <dalek> nqp: document sprintf* ops

[20:17] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ad266980af

[20:17] <moritz> timotimo: dunno. How did you build it?

[20:17] <lizmat> jnthn: seems like a winner to me so far

[20:17] <timotimo> make all install

[20:17] *** Mouq joined
[20:18] <timotimo> i'll rebuild.

[20:18] <moritz> don't just rebuild

[20:18] <moritz> git checkout master; git pull

[20:18] <moritz> then make install

[20:18] <timotimo> i was on master :/

[20:19] <timotimo> well, now i'm rebuilding

[20:21] <FROGGS> one has to reconfigure so the nqp-* binary gets a new revision

[20:21] <timotimo> oh

[20:21] <timotimo> didn't know that!

[20:22] <FROGGS> same for moar and perl6-*

[20:22] * moritz didn't know that either

[20:22] <lizmat> jnthn:  alas, seeing some "no subtests run" again  :-(

[20:22] <FROGGS> haha

[20:22] <timotimo> thanks

[20:22] <FROGGS> moritz: really? can't believe that

[20:23] <benabik> Yeah, the version not updating on build kinda sucks because configure also does a clean, so it's a full rebuild just to get it to notice you're building a new version.

[20:23] <lizmat> jnthn: and it also seems to slow down again

[20:23] <FROGGS> benabik: true

[20:26] <lizmat> jnthn: trying spectest again without parallel testing

[20:27] <jnthn> lizmat: I'm into S32-io at present

[20:27] <jnthn> lizmat: With 6 at a time

[20:27] <dalek> rakudo/nom: 069dc3a | moritz++ | docs/ROADMAP:

[20:27] <dalek> rakudo/nom: [ROADMAP] note that Buf depends on native int "is rw"

[20:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/069dc3a8bf

[20:27] <dalek> rakudo/nom: 1607bc4 | moritz++ | / (2 files):

[20:27] <dalek> rakudo/nom: Merge branch 'nom' of github.com:rakudo/rakudo into nom

[20:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1607bc4ebc

[20:27] <dalek> rakudo/nom: 0faa636 | moritz++ | src/core/Mu.pm:

[20:27] <dalek> rakudo/nom: Merge branch 'nom' of github.com:rakudo/rakudo into nom

[20:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0faa6360e6

[20:28] <dalek> rakudo/nom: 9c888d2 | moritz++ | src/ (3 files):

[20:28] <dalek> rakudo/nom: Merge branch 'nom' of github.com:rakudo/rakudo into nom

[20:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9c888d24a3

[20:28] <dalek> rakudo/nom: 9b80284 | moritz++ | / (2 files):

[20:28] <dalek> rakudo/nom: try to fix error reporting when NQP is too old

[20:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9b80284143

[20:28] <moritz> waaah, 3 useless merges

[20:29] <jnthn> ohmergerd

[20:29] <timotimo> :D

[20:30] <dalek> rakudo/nom: b02857c | moritz++ | .gitignore:

[20:30] <dalek> rakudo/nom: update .gitignore to new generated files

[20:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b02857c618

[20:32] <dalek> rakudo/nom: 5bd51cb | moritz++ | .gitignore:

[20:32] <dalek> rakudo/nom: another .gitignore update

[20:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5bd51cb8db

[20:37] <jnthn> lizmat: My run has completed.

[20:38] <FROGGS> j: say 1

[20:38] <camelia> rakudo-jvm 882e33: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[20:38] <lizmat> mine is running without TEST_JOBS, so will take a little while stoll

[20:38] <lizmat> *still

[20:38] <lizmat> CPU usage seems normal

[20:39] <jnthn> FROGGS: Maybe that gets better with my fix to help evalserver too

[20:39] <FROGGS> jnthn: that is my expectation, since it got worse just lately

[20:40] <jnthn> FROGGS: Yeach, my change that busted it was last week

[20:41] *** woolfy joined
[20:44] *** ssutch joined
[20:45] <lizmat> CPU usage not dropping below 200% anymore   :-(

[20:45] <lizmat> peaks of up to 500%

[20:45] *** kaare_ left
[20:45] <lizmat> and that for serially doing all the tests  :-(

[20:47] <timotimo> well, that just means the GC is very good at parallelising

[20:49] <timotimo> nqp-j is too old - but i just re-ran configure in my nqp/ checkout o_O

[20:49] <jnthn> lizmat: I wonder if what you're actually seeing is it shell out

[20:49] <lizmat> jnthn: failing again  :-(

[20:49] <jnthn> fuck

[20:49] <lizmat> t/spec/S06-traits/is-copy.t .................................. No subtests run

[20:49] * jnthn wonders why not here...

[20:50] *** Vlavv` left
[20:50] <jnthn> Odd. It gets all the way thorugh.

[20:50] <jnthn> For me.

[20:50] <lizmat> it's gotten much better

[20:50] <FROGGS> timotimo: but `git describe` tells about a new(er) version?

[20:50] <lizmat> but the fix is only a gradual one, so it seems

[20:50] <timotimo> 2013.10-203-g62e2415 - same version as the parrot one

[20:50] <jnthn> And only 2 test files with notable failures, both related to deprecation...

[20:50] <lizmat> indeed, that's because Backtrace is different / broken on jakudo ?

[20:51] <jnthn> No such method 'package' for invocant of type 'Scalar'

[20:51] <jnthn> Darn, still need to fix that error reporting...

[20:52] <lizmat> killing it gives (again):

[20:52] <lizmat> $ Java HotSpot(TM) 64-Bit Server VM warning: Exception java.lang.OutOfMemoryError occurred dispatching signal SIGINT to handler- the VM may need to be forcibly terminated

[20:52] <lizmat> Exception in thread "Thread-0" 

[20:52] <lizmat> Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread "Thread-0"

[20:52] <jnthn> Oh, so it is running out of memory...

[20:52] <lizmat> still 21 threads collecting garbage I guess

[20:53] <lizmat> at ~400% CPU

[20:54] <lizmat> and still running

[20:55] *** Mouq left
[20:56] * lizmat hears from the grapevine there were 2 Perl 6 presentations at the Cluj.pm meeting this evening

[20:56] <jnthn> Wow!

[20:57] <masak> \o/

[20:58] * masak .oO( those mongers seem really "clujed in" about Perl 6 )

[20:59] <jnthn> ))

[20:59] <jnthn> Looks like it was on threading/async stuff :)

[20:59] <lizmat> start stuff you mean?  :-)

[21:00] <lizmat> and still running (another half an hour of CPU burnt ;-)

[21:01] <lizmat> killed -9 it

[21:02] *** risou_awy is now known as risou

[21:02] *** Vlavv` joined
[21:03] <lue> .oO(All I want is to call the Grammar from a particular statement in the Actions, and I'm being hit with can't assign to readonly variable or value.)

[21:04] <lue> .oO(sigh... I can be such a moron sometimes. I'm guessing Grammar.parse(slurp($fn)) was the problem, yeah?)

[21:05] *** virtualsue left
[21:06] <jnthn> lizmat: oddness

[21:06] <lizmat> re: Cluj.pm https://twitter.com/search?q=%23clujpm&src=hash

[21:07] *** Rotwang left
[21:07] <woolfy> Info about the cluj.pm meeting: http://cluj.pm/events/2013/10/clujpm-community-members-get-together-again.html

[21:09] <jnthn> woolfy++

[21:09] <woolfy> No no no...  Mihai Pop++   Giving two talks about Perl 6 at cluj.pm meeting.  Wow.

[21:10] <masak> does this Mihai Pop person have an IRC presence?

[21:10] <jnthn> Indeed

[21:10] <jnthn> And on the shiny new async stuff

[21:11] *** lemOn91 left
[21:11] <jnthn> I wonder if he got the latest naming it. If so, his pres was probably more up to date than my Salzburg one :P

[21:11] <timotimo> sounds shiny! :)

[21:11] <jnthn> s/it/in/

[21:13] <woolfy> masak: dunno

[21:14] <woolfy> masak: he was one of the two send-a-newbie guys.  He's very nice and very bright.  I am sure it's not difficult to find him...

[21:14] <masak> ooh

[21:15] *** Rotwang joined
[21:17] <lue> Foo::Actions.rule($/) { ... Foo::Grammar.parse() ... } breaks for me on that parse line with "Cannot assign to a readonly variable or a value", and I can't even begin to guess why.

[21:18] *** risou is now known as risou_awy

[21:18] <jnthn> lue: It tries to update the $/ which is a parameter, maybe?

[21:18] <colomon> lue: you're calling your grammar from inside its actions?

[21:19] <lue> that's the only RO variable I have, so that's likely it :)

[21:19] <lue> colomon: "include" statement, XCompose files

[21:20] <lue> I *could* set up a ast tree that holds info about the include that the receiving grammar user can then process with a new grammar call, but as long as I'm in the action method...

[21:20] <woolfy> Mihai Pop on Twitter: https://twitter.com/MihaiPop10

[21:23] *** rurban left
[21:23] *** hummeleB1 joined
[21:24] * masak follows

[21:26] *** dmol left
[21:26] *** huf_ is now known as huf

[21:32] <dalek> nqp: 1f83be8 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[21:32] <dalek> nqp: Don't report bad method on Scalar, but on value.

[21:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1f83be8eb3

[21:32] *** rurban joined
[21:36] *** rurban left
[21:47] *** denis_boyun left
[21:47] <lizmat> p: "abcdef".split('',:all).elems.say  # 6 or 11 ?

[21:47] <camelia> rakudo-parrot 5bd51c: OUTPUT«6␤»

[21:48] <lizmat> currently, :all when splitting on empty string, is ignored

[21:48] <lizmat> this is basically because the logic doesn't do any matching whatsoever

[21:48] *** BenGoldberg joined
[21:49] <lizmat> should this combination warn, die, or add dummy Match objects ?

[21:52] <diakopter> p: "abcdef".split(1,:all).elems.say

[21:52] <camelia> rakudo-parrot 5bd51c: OUTPUT«1␤»

[21:54] *** rurban joined
[21:54] <diakopter> p: "abcdef".split("abcdef",:all).say

[21:54] <camelia> rakudo-parrot 5bd51c: OUTPUT« abcdef ␤»

[21:55] <lizmat> p: "abcdef".split("abcdef").say

[21:55] <camelia> rakudo-parrot 5bd51c: OUTPUT« ␤»

[21:55] <lizmat> p: "abcdef".split("abcdef").elems.say

[21:55] <camelia> rakudo-parrot 5bd51c: OUTPUT«2␤»

[21:56] *** rurban1 joined
[21:57] *** lue left
[21:58] *** rurban left
[22:00] *** lue joined
[22:01] *** rurban1 left
[22:03] <FROGGS> how do I specify an infix that only can take two args?

[22:04] <FROGGS> because infix:<...> currently gets three when invoked as: .say for 1, 2, 3 ... 10, 20, 30 ... 100

[22:04] <FROGGS> maybe I can steal from infix +

[22:05] <colomon> FROGGS: infix:<new-op> ($a, $b) { …. }

[22:05] <timotimo> it's when you give it list associativity?

[22:06] <FROGGS> colomon: I mean how to do that in the grammar? so the QAST is produced correctly

[22:06] <colomon> oh!

[22:06] <colomon> exactly two?

[22:06] <FROGGS> yes

[22:06] * lizmat vaguely recalls some table somewhere

[22:06] <FROGGS> lizmat: I see the table

[22:06] <FROGGS> rakudo/src/Perl6/Grammar.nqp:3049:        Perl6::Grammar.O(':prec<t=>, :assoc<left>, :dba<additive>',  '%additive');

[22:07] <colomon> steal from infix:<+> would definitely be a good start  :)

[22:07] <FROGGS> maybe :assoc is in charge for that?

[22:07] <timotimo> yes, i think so

[22:07] <FROGGS> k

[22:07] <FROGGS> let's try :o)

[22:07] <colomon> look for :assoc<list>

[22:07] <timotimo> if you have :assoc<list> you get any amount of arguments

[22:07] <colomon> right

[22:07] <FROGGS> ... has that, yes

[22:07] * FROGGS changes it

[22:08] <colomon> for infix:<…> you're changing it?

[22:08] <FROGGS> yes

[22:09] *** Mouq joined
[22:09] * colomon is not sure of the wisdom of that.

[22:10] <FROGGS> we'll see

[22:11] <colomon> emphasis on "not sure" rather than "knows it's a bad idea"

[22:11] <FROGGS> *g*

[22:12] *** virtualsue joined
[22:12] <diakopter> p: "".split("", :all).perl.say

[22:12] <camelia> rakudo-parrot 5bd51c: OUTPUT«Nil␤»

[22:12] <colomon> FROGGS: did you check to see how std has it?

[22:12] <diakopter> p: "".split("doobiedoobiedo", :all).perl.say

[22:12] <camelia> rakudo-parrot 5bd51c: OUTPUT«("",).list␤»

[22:12] <FROGGS> the other option would be to do it like niecza, and have an implementation of ... that can handle lists

[22:13] <FROGGS> colomon: it hast list assic

[22:13] <FROGGS> assoc

[22:13] *** xinming_ joined
[22:13] <FROGGS> cool, assoc<left> would actually fix it...

[22:13] *** Mouq left
[22:14] <FROGGS> but seems like a bad idea anyway... so, plan b

[22:15] <colomon> if the grammar has it as list assoc, TimToady++ probably had a reason.

[22:16] <diakopter> p: "".split("doobiedoobiedo", :all).elems.say

[22:16] <camelia> rakudo-parrot 5bd51c: OUTPUT«1␤»

[22:16] *** xinming left
[22:17] <lizmat> diakopter: what is the pb with that last one?

[22:20] <dalek> roast: 390c3b7 | (Elizabeth Mattijsen)++ | S32-str/split.t:

[22:20] <dalek> roast: Some more thorough split testing

[22:20] <dalek> roast: review: https://github.com/perl6/roast/commit/390c3b7953

[22:20] <lizmat> more to come tomorrrow, now sleep&

[22:20] <FROGGS> gnight lizmat 

[22:20] <timotimo> so, about that commit bit again ...? :)

[22:21] <lizmat> timotimo: pmichaud gave me mine, if I remember correctly

[22:21] <lizmat> really sleep&

[22:24] *** tobyink joined
[22:25] <timotimo> i'd like to merge at least one pull request from mouq once i get the bit

[22:27] <FROGGS> maybe preflex pmichaud ? (even when that sounds weird)

[22:29] <dalek> specs: 663d7e7 | raiph++ | S99-glossary.pod:

[22:29] <dalek> specs: Fix sort order and add 'fossil' entry

[22:29] <dalek> specs: review: https://github.com/perl6/specs/commit/663d7e7587

[22:29] <timotimo> preflex: tell pmichaud i'd love to claim my rakudo commitbit. the CLA should have arrived in the right place for that, wherever that is

[22:29] <preflex>  Consider it noted.

[22:30] <timotimo> will do, thanks

[22:31] <dalek> rakudo-star-daily: 9ab5562 | coke++ | log/ (5 files):

[22:31] <dalek> rakudo-star-daily: today (automated commit)

[22:31] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/9ab556220b

[22:33] <timotimo> make: /perl6: Command not found ;_;

[22:33] <timotimo> that should probably be ./perl6-p?

[22:34] <[Coke]> pretty sure that's coming from a "make modules-test" in the generated rakudo-star build.

[22:34] <timotimo> ah, that may very well be

[22:52] *** Rotwang left
[22:59] *** rurban joined
[23:01] *** virtualsue left
[23:02] *** risou_awy is now known as risou

[23:04] <jnthn> sleep &

[23:06] *** Mouq joined
[23:12] *** colomon left
[23:13] *** rurban left
[23:14] * lue now sees $* vars as "the pan-grammar-rule variable type", but is sure that's not it :)

[23:15] <Mouq> Isn't #120484 another #61602 plus some seemingly tangential things about error reporting in the repl?

[23:15] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120484

[23:15] *** colomon joined
[23:15] <Mouq> synopsebot: slacker. #61602

[23:15] <synopsebot> Mouq: Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=61602

[23:15] *** sitaktif left
[23:15] *** sergot_ left
[23:16] *** sergot joined
[23:17] <xenoterracide> is it possible to create an anonymous class?

[23:17] *** sitaktif joined
[23:17] <FROGGS> Mouq: I think it is about the segfault only

[23:18] <FROGGS> p: my $thing = class { has $.foo }; say $thing.new

[23:18] <camelia> rakudo-parrot 5bd51c: OUTPUT«<anon>.new(foo => Any)␤»

[23:18] <FROGGS> xenoterracide: ^^

[23:18] <lue> r: my Int $x = NaN

[23:18] <camelia> rakudo-jvm 882e33: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[23:18] <camelia> ..rakudo-parrot 5bd51c: OUTPUT«Type check failed in assignment to '$x'; expected 'Int' but got 'Num'␤  in block  at /tmp/TY6t8AIxbL:1␤  in any  at /tmp/TY6t8AIxbL:1␤  in any  at gen/parrot/stage2/NQPHLL.nqp:1146␤  in any eval at gen/parrot/stage2/NQPHLL.nqp:1133␤  in any eva…»

[23:19] <lue> Mouq: #120484 is more REPL stupidity than #61602. It merely led to the new bug :)

[23:19] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120484

[23:19] *** risou is now known as risou_awy

[23:20] <xenoterracide> p: my $thing = class { has $.foo }.new; say $thing;

[23:20] <camelia> rakudo-parrot 5bd51c: OUTPUT«===SORRY!=== Error while compiling /tmp/555kBO5ebu␤Two terms in a row␤at /tmp/555kBO5ebu:1␤------> my $thing = class { has $.foo }⏏.new; say $thing;␤    expecting any of:␤        scoped declarator␤      …»

[23:20] <timotimo> yeah, you probably need to add parens around it

[23:20] <FROGGS> p: my $thing = (class { has $.foo }).new; say $thing;

[23:20] <timotimo> close them before the .new

[23:20] <camelia> rakudo-parrot 5bd51c: OUTPUT«<anon>.new(foo => Any)␤»

[23:20] <FROGGS> exactly

[23:21] <xenoterracide> oh cool

[23:21] <FROGGS> p: my $thing = (anon class { has $.foo }).new; say $thing;

[23:21] <camelia> rakudo-parrot 5bd51c: OUTPUT«<anon>.new(foo => Any)␤»

[23:21] <FROGGS> p: my $thing = (anon class Peter { has $.foo }).new; say $thing;

[23:21] <camelia> rakudo-parrot 5bd51c: OUTPUT«Peter.new(foo => Any)␤»

[23:22] <FROGGS> hehe

[23:22] <Mouq> p: my $thing = (anon class Peter { has $.foo }).new; say $thing; Peter.new # checking

[23:22] <camelia> rakudo-parrot 5bd51c: OUTPUT«===SORRY!=== Error while compiling /tmp/E_IDM8Iyg8␤Undeclared name:␤    Peter used at line 1␤␤»

[23:22] <Mouq> cool

[23:22] <timotimo> was about to do it, too :)

[23:32] <lue> np: say [1,2,3] <=> [4,5,6,7]; say +([1,2,3] <=> [4,5,6,7])

[23:33] <lue> nr: say [1,2,3] <=> [4,5,6,7]; say +([1,2,3] <=> [4,5,6,7])

[23:33] <camelia> rakudo-parrot 5bd51c, niecza v24-98-g473bd20: OUTPUT«Increase␤-1␤»

[23:33] <camelia> ..rakudo-jvm 882e33: OUTPUT«Can't call method "syswrite" on an undefined value at /home/p6eval/jvm-rakudo/eval-client.pl line 32.␤»

[23:33] <lue> ... I'm sure there's a perfectly good explanation for {Decrease => 1, Same => 0, Increase => -1}

[23:34] <timotimo> p: say +Increase; say +Decrease;

[23:34] <camelia> rakudo-parrot 5bd51c: OUTPUT«-1␤1␤»

[23:34] <FROGGS> lue: if you sort, and it increases, you put the rhs one to the left (-1)

[23:35] <lue> ?

[23:35] <FROGGS> or the lhs?

[23:35] <FROGGS> I'm tired

[23:35] <Mouq> So, #120484 doesn't appear to happen in nqp-p (though I think someone should verify this), though HLL::Complier.nqp has a CONTROL block in the try in method command_eval

[23:35] <synopsebot> Link: https://rt.perl.org/rt3//Public/Bug/Display.html?id=120484

[23:35] <FROGGS> p: say 5 cmp 7

[23:35] <camelia> rakudo-parrot 5bd51c: OUTPUT«Increase␤»

[23:36] <FROGGS> lhs

[23:36] <Mouq> And, I *think* CONTROL catches ^D?

[23:37] <lue> I'm afraid I still don't see the value of inverting the range like that :(

[23:37] <lue> .oO(Increase = positive. Increase = -1 ‽)

[23:38] <FROGGS> n: say +Increase; say +Decrease;

[23:38] <camelia> niecza v24-98-g473bd20: OUTPUT«-1␤1␤»

[23:38] <Mouq> …though I can't seem to get that to work

[23:38] <timotimo> gtg :)

[23:39] <FROGGS> from P5's perldoc: Binary "cmp" returns -1, 0, or 1 depending on whether the left argument is stringwise less than, equal to, or greater than the right argument. 

[23:39] <FROGGS> so, -1 means lhs is less than rhs

[23:39] <FROGGS> less then  == -1 here

[23:39] <huf> sgn(a-b)

[23:41] <Mouq> Oh, wait, does CONTROL catch things like return, next, etc?

[23:42] <lue> FROGGS: that runs completely opposite my meanings of the words "Increase" and "Decrease" though.

[23:42] <FROGGS> lue: yeah

[23:42] <lue> FROGGS: Also, the words match the "from the LHS, do we (Decrease^Same^Increase) to the RHS?", but the numbers go "from the RHS, the change is in the direction of (1^0^-1) to the LHS"

[23:42] <Mouq> p: try { next; CONTROL { say "oh" } }

[23:42] <camelia> rakudo-parrot 5bd51c: OUTPUT«oh␤»

[23:43] <lue> Which I steadfastly refuse to believe is appropriate.

[23:43] <FROGGS> Mouq: this can't happen in nqp-*, because nqp ignores type constraints

[23:44] <Mouq> Oh, I see, it only appears to happen then. Hrm

[23:44] <Mouq> my Str $a = 4; does it too

[23:45] *** eternaleye left
[23:46] * lue files STDbug

[23:53] *** davecc joined
[23:54] <lue> here we go: https://github.com/perl6/std/issues/6

