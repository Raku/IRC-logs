[00:07] *** Guillaume2 left
[00:12] *** Psyche^_ joined
[00:15] *** Psyche^ left
[00:17] *** kbaker joined
[00:18] *** colomon joined
[00:18] *** Guillaume2 joined
[00:21] *** jnap joined
[00:32] <flussence> n: multi sub foo (Int $f, $g) { 1; }; multi sub foo ($f, Str $g) { 1; }; foo(4,"d");

[00:32] <camelia> niecza v24-90-gd827fa8: OUTPUT«Potential difficulties:␤  $f is declared but not used at /tmp/mfBQYP9ww9 line 1:␤------> multi sub foo (Int ⏏$f, $g) { 1; }; multi sub foo ($f, Str $␤  $g is declared but not used at /tmp/mfBQYP9ww9 line 1:␤------> multi sub foo (In…

[00:32] <flussence> argh

[00:32] <flussence> n: multi sub foo (Int $f, $g) { $f,$g,1; }; multi sub foo ($f, Str $g) { $g,$f,1; }; foo(4,"d");

[00:32] <camelia> niecza v24-90-gd827fa8: OUTPUT«Unhandled exception: Ambiguous call to &foo; these signatures all match:␤    Int, Any␤    Any, Str␤  at /tmp/Vw525aLVLM line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4579 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 45…

[00:33] *** Guillaume2 left
[00:34] <flussence> which one's supposed to win? I'd guess specific-first but I'm not familiar with that bit of spec

[00:34] <skids> first declared I think.

[00:34] <skids> Though whether the type counts as a "constraint" vs a where clause is a question.

[00:42] *** Guillaume2 joined
[00:53] *** hypolin joined
[00:59] *** panchiniak left
[00:59] *** jnap left
[01:02] *** shinobicl_ joined
[01:10] *** colomon left
[01:11] *** shinobicl_ left
[01:12] <TimToady> neither is supposed to win in this case, since there are no constraints other than nominal typing

[01:15] *** benabik joined
[01:16] *** FROGGS_ joined
[01:17] *** jnap joined
[01:18] <flussence> yeah, my assumption kinda falls apart if those are both using named params...

[01:18] *** jnap left
[01:20] *** FROGGS left
[01:22] *** dayangkun joined
[01:24] *** BenGoldberg joined
[01:30] *** colomon joined
[01:31] *** Guillaume2 left
[01:49] <flussence> script one-liner that causes a bizarro error message: «sub MAIN($foo, $bar) { constant baz = $foo + $bar; }»

[01:50] <flussence> Nominal type check failed for parameter '$a'; expected Any but got Mu instead

[01:58] <TimToady> well, it's a bit understandable, insofar as you can't create a compile-time constant with values that aren't available till run time.

[01:59] <TimToady> but the error is LTA

[02:00] <JimmyZ> std: sub MAIN($foo, $bar) { constant baz = $foo + $bar; }

[02:00] <camelia> std 06636e4: OUTPUT«ok 00:00 46m␤»

[02:00] <TimToady> maybe there's some way to mark $foo and $bar to indicate there's no possible way for them to have a value yet

[02:00] <TimToady> the syntax is fine; it's the semantics that are impossible

[02:00] <JimmyZ> n: sub MAIN($foo, $bar) { constant baz = $foo + $bar; }

[02:00] <camelia> niecza v24-90-gd827fa8: OUTPUT«Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object␤  at Builtins.plus (Niecza.Constants c, Niecza.Variable a1, Niecza.Variable a2) [0x00000] in <filename unknown>:0 ␤  at Anon.1.C0baz init (Niecza.Frame…

[02:01] <TimToady> constant is just like BEGIN

[02:02] <TimToady> if you want a symbol there, you'd have to say my \baz = $foo + $bar

[02:02] <TimToady> that would run at, er, run time

[02:04] <TimToady> constant and BEGIN should probably trap undefined errors and complain "Value of $foo is not known at compile time"

[02:04] <[Coke]> r: say now - constant now

[02:04] <camelia> rakudo 26a36b: OUTPUT«===SORRY!=== Error while compiling /tmp/JPvNj2md_s␤Missing initializer on constant declaration␤at /tmp/JPvNj2md_s:1␤------> say now - constant now⏏<EOL>␤    expecting any of:␤        postfix␤        infix stopper␤        infix o…

[02:04] <TimToady> r: say now - constant started = now;

[02:04] <camelia> rakudo 26a36b: OUTPUT«0.044363␤»

[02:05] <TimToady> you can't redeclare now like that

[02:05] <TimToady> nor can you declare a constant without initializing it

[02:05] <[Coke]> yah, I didn't expect it to work.

[02:05] <geekosaur> r: say now - constant $ = now

[02:05] <camelia> rakudo 26a36b: OUTPUT«0.04833237␤»

[02:05] <geekosaur> ...should that have worked?

[02:06] <TimToady> sure, you just declared an anonymous constant

[02:06] <benabik> r: say now - BEGIN now

[02:06] <TimToady> just as you do with BEGIN

[02:06] <camelia> rakudo 26a36b: OUTPUT«0.04930257␤»

[02:06] <geekosaur> I was wondering if a sigil could be used there these days

[02:06] *** BenGoldberg left
[02:07] *** colomon left
[02:07] <JimmyZ> Perl6 allows you do good things with leaving a anonymous name

[02:08] <geekosaur> not quite what I was asking. more like, wondering if (a) something like `constant $foo = ...` is still legal given the sigil-less form; (b) if an anonymous scalar would be too close to that form

[02:08] <geekosaur> somehow

[02:10] <TimToady> well, rakudo is still a bit buggy in the constants, since it basically ignores the sigil

[02:10] <TimToady> r: constant %foo = a => 1, b => 2; say %foo.WHAT

[02:10] <camelia> rakudo 26a36b: OUTPUT«(Parcel)␤»

[02:11] <TimToady> n: constant %foo = a => 1, b => 2; say %foo.WHAT

[02:11] <camelia> niecza v24-90-gd827fa8: OUTPUT«(Hash)␤»

[02:11] <TimToady> niecza++ does it better

[02:19] *** BenGoldberg joined
[02:35] *** Colby` joined
[02:35] *** Pleiades` left
[02:35] *** Colby` is now known as Pleiades`

[02:45] *** Pleiades` left
[02:46] *** fridim_ joined
[02:52] *** Pleiades` joined
[02:53] *** BenGoldberg left
[02:55] *** bbkr left
[02:56] *** bbkr joined
[02:56] *** jaldhar joined
[02:57] *** colomon joined
[03:14] <clkao> w^W

[03:16] *** preflex left
[03:16] *** preflex_ joined
[03:16] *** ChanServ sets mode: +v preflex_

[03:16] *** preflex_ is now known as preflex

[03:28] *** kbaker left
[03:57] *** Sean__ left
[04:02] *** Pleiades` left
[04:05] *** colomon left
[04:08] *** Pleiades` joined
[04:08] *** jaldhar left
[04:11] *** jaldhar joined
[04:28] *** Pleiades` left
[04:33] *** Pleiades` joined
[04:46] *** daniel-s joined
[04:48] *** hummeleBop joined
[04:57] *** dayangkun left
[05:08] *** SamuraiJack_ joined
[05:09] *** prammer left
[05:15] *** rjbs joined
[05:23] *** virtualsue joined
[05:33] *** atroxaper joined
[05:41] *** teslos joined
[06:05] *** abnorman left
[06:14] *** Celelibi left
[06:18] *** Celelibi joined
[06:30] *** abnorman joined
[06:34] *** krunen left
[06:44] *** Pleiades` left
[06:47] *** Pleiades` joined
[06:49] *** berekuk joined
[06:51] *** FROGGS_ left
[06:52] *** berekuk left
[07:01] *** zakharyas joined
[07:04] *** Pleiades` left
[07:09] *** FROGGS joined
[07:14] *** FROGGS left
[07:15] *** kaleem joined
[07:21] *** virtualsue left
[07:23] *** berekuk joined
[07:30] *** domidumont joined
[07:35] *** rindolf joined
[07:40] *** pdcawley joined
[07:46] *** dmol joined
[07:52] *** sqirrel joined
[07:57] *** denis_boyun joined
[07:58] *** berekuk left
[08:09] *** berekuk joined
[08:09] *** dmol left
[08:12] *** denis_boyun__ joined
[08:13] *** denis_boyun left
[08:16] *** FROGGS joined
[08:20] *** pecastro joined
[08:22] *** pecastro_ left
[08:24] *** denis_boyun__ left
[08:26] *** berekuk left
[08:36] *** daxim joined
[08:40] *** dakkar joined
[08:47] *** SamuraiJack__ joined
[08:49] *** SamuraiJack_ left
[08:57] *** atroxaper left
[08:58] *** shinobicl_ joined
[08:58] *** shinobicl_ left
[09:03] *** berekuk joined
[09:09] *** dmol joined
[09:13] * lizmat drops a pin

[09:14] *** sqirrel left
[09:16] * moritz catches it before it falls

[09:16] <tadzik> gosh, that scared me

[09:17] <lizmat> :-)

[09:17] <lizmat> good *, #perl6!

[09:20] <tadzik> good star :)

[09:22] <moritz> speaking of star, I should make the newest one available on camelia 

[09:23] *** abnorman left
[09:23] <moritz> star: say 42

[09:23] <camelia> star 2013.02: OUTPUT«42␤»

[09:23] <lizmat> *: say 42

[09:23] <lizmat> :-(

[09:28] *** berekuk left
[09:29] *** berekuk joined
[09:29] *** Rotwang1 joined
[09:34] *** berekuk left
[09:35] *** wtw left
[09:35] <lizmat> TimToady: wondering about compile time constants, shouldn't they be per compilation unit ?

[09:36] <lizmat> things like %?ENV, %?DISTRO

[09:37] *** jesther joined
[09:39] *** berekuk joined
[09:40] *** dayangkun joined
[09:41] *** dayangkun left
[09:41] *** jesther is now known as jestherd

[09:43] *** atroxaper joined
[09:44] *** wtw joined
[09:51] *** grondilu joined
[09:52] <grondilu> rn: say my uint $ = -1

[09:52] <camelia> rakudo 26a36b: OUTPUT«(timeout)»

[09:52] <camelia> ..niecza v24-90-gd827fa8: OUTPUT«===SORRY!===␤␤Malformed my at /tmp/sOXENM2ldm line 1:␤------> say my⏏ uint $ = -1␤␤Parse failed␤␤»

[09:52] <grondilu> rn: say my uint $ = 10

[09:53] <camelia> rakudo 26a36b: OUTPUT«(timeout)»

[09:53] <camelia> ..niecza v24-90-gd827fa8: OUTPUT«===SORRY!===␤␤Malformed my at /tmp/GHq3gY2liF line 1:␤------> say my⏏ uint $ = 10␤␤Parse failed␤␤»

[09:56] *** hypolin left
[10:11] *** denis_boyun joined
[10:15] *** rindolf left
[10:17] *** colomon joined
[10:23] *** pmurias joined
[10:23] <pmurias> FROGGS: ping

[10:25] <pmurias> FROGGS: we do we still have code to treat the hash returned by nqp::getenvhash as some crazy parrot pmc?

[10:27] <FROGGS> pmurias: can you rephrase that?

[10:28] <pmurias> when creating %ENV we have a #ifdef parrot

[10:28] <pmurias> why hasn't it been deleted? ;)

[10:28] <FROGGS> pmurias: the ifdef about the iterating?

[10:29] <FROGGS> it is still there because I didnt remove (and tested) it

[10:30] <pmurias> hmm I still get the error about incorrect nqp --version

[10:31] *** xenoterracide left
[10:31] <FROGGS> pmurias: do a git pull && make clean && perl Configure.pl && make install

[10:31] <FROGGS> (in the correct nqp directory, if you have more than one)

[10:31] <FROGGS> what does nqp --version say?

[10:33] <pmurias> I don't have the git revision

[10:33] <pmurias> This is nqp version 2013.08 built on parrot 5.5.0 revision RELEASE_5_5_0

[10:34] *** berekuk left
[10:35] <FROGGS> but you need HEAD

[10:35] <FROGGS> what does `git describe` say?

[10:36] <pmurias> 2013.08-38-gaa41dd3

[10:36] <FROGGS> okay

[10:36] <FROGGS> pmurias: is that nqp on parrot?

[10:39] <pmurias> yes

[10:39] <FROGGS> then remove the content of your install dir, cd into parrot, make install, and then configure nqp again and make install

[10:40] <FROGGS> after that nqp --version should be right

[10:43] <pmurias> it's a problem with tools/build/gen-version.pl

[10:46] <pmurias> ahh I figured it out

[10:46] *** pernatiy joined
[10:46] <pmurias> tools/build/gen-version.pl doesn't work in a submodule

[10:48] *** Rotwang1 left
[10:48] *** berekuk joined
[10:49] *** atroxaper left
[10:52] <dalek> nqp: 3156a67 | (Pawel Murias)++ | tools/build/gen-version.pl:

[10:52] <dalek> nqp: Make tools/build/gen-version.pl work correctly in git submodules.

[10:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3156a6709a

[10:53] *** pecastro left
[10:55] <pmurias> FROGGS: you have a rakudo commit bit?

[10:56] *** pmurias left
[10:56] <FROGGS> .tell pmurias yes, I have

[10:56] <yoleaux> FROGGS: I'll pass your message to pmurias.

[10:58] *** pecastro joined
[11:06] *** marasgp joined
[11:06] <marasgp> moritz: do you mind helping me with an ilbot installation?

[11:07] *** marasgp left
[11:07] *** marasgp joined
[11:16] *** berekuk left
[11:17] *** wtw left
[11:19] *** xinming left
[11:20] *** berekuk joined
[11:20] *** xinming joined
[11:25] *** wtw joined
[11:25] *** wtw left
[11:25] *** wtw joined
[11:26] <lizmat> r: say 42

[11:26] <lizmat> camelia unresponsive?

[11:26] <camelia> rakudo 26a36b: OUTPUT«(timeout)»

[11:26] *** sqirrel joined
[11:27] <lizmat> I guess feather is suffering under load

[11:29] *** jestherd is now known as jesther

[11:29] <jesther> Not true.

[11:29] <lizmat> r: say True

[11:30] <camelia> rakudo 26a36b: OUTPUT«(timeout)»

[11:30] <jesther> OUTPUT-0001.

[11:31] <jesther> 26b35d.

[11:32] <jesther> It begins momentarily whithin a few months of release, the old fashioned way.

[11:40] <moritz> marasgp: I can try

[11:41] <marasgp> moritz: sorry I posted in the wrong channel. can we do it in #ilbot?

[11:41] <moritz> marasgp: sure

[11:47] <lizmat> colomon: finally getting to the end of the Set/Bag integration from niecza

[11:47] <lizmat> r: 1 ≼ 2 # what is ≼ ?

[11:47] <camelia> rakudo 26a36b: OUTPUT«===SORRY!=== Error while compiling /tmp/PIcX3ILsPG␤Two terms in a row␤at /tmp/PIcX3ILsPG:1␤------> 1 ⏏≼ 2 # what is ≼ ?␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        statement en…

[11:48] <tadzik> r: 1 love 2 # what is love?

[11:48] <camelia> rakudo 26a36b: OUTPUT«===SORRY!=== Error while compiling /tmp/p09Ewv4EOx␤Two terms in a row␤at /tmp/p09Ewv4EOx:1␤------> 1 ⏏love 2 # what is love?␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-infix␤        stateme…

[11:48] <lizmat> I'm not seeing a texas equivalent of ≼

[11:50] <lizmat> it's not (<=), as that is linked to ⊆

[11:50] <tadzik> it's probably bigger :>

[11:50] <lizmat> bigger than all of us, surely

[11:53] <nwc10> except Alaska

[11:55] <lizmat> problem is that I can't leave a ≼ in the core setting, or the parse time for rakudo will explode  :-(

[11:55] *** chenryn joined
[11:55] <colomon> lizmat++

[11:55] <lizmat> colomon: so what *is* ≼ ?

[11:55] <colomon> lizmat: I never figured out a texas version of ≼

[11:56] <lizmat> aha, that explains

[11:56] <colomon> it's bag subset

[11:56] <lizmat> problem is, I need it for the ACCEPTS  :-(

[11:56] *** berekuk left
[11:56] <lizmat> guess I'll have to think of a texas equivalent myself ?

[11:57] *** grondilu left
[11:57] <colomon> n: my $a = (a => 10, b => 20).bag; my $b = (a => 2, b => 3); say $b ⊆ $a; say $b ≼ $a

[11:57] <camelia> niecza v24-90-gd827fa8: OUTPUT«Unhandled exception: Unable to resolve method bag in type Parcel␤  at /tmp/m8sqyQRPVd line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4579 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4580 (module-CORE @ 576) ␤  at /home…

[11:57] <colomon> :(

[11:57] <lizmat> .Bag ?

[11:57] <colomon> n: my $a = (a => 10, b => 20).Bag; my $b = (a => 2, b => 3); say $b ⊆ $a; say $b ≼ $a

[11:57] <camelia> niecza v24-90-gd827fa8: OUTPUT«True␤True␤»

[11:57] <colomon> lizmat++

[11:57] <colomon> doh!

[11:57] *** berekuk joined
[11:58] <colomon> n: my $a = (a => 10, b => 20).Bag; my $b = (a => 2, b => 3); say $a ⊆ $b; say $a ≼ $b

[11:58] <camelia> niecza v24-90-gd827fa8: OUTPUT«True␤False␤»

[11:58] <colomon> there you go

[11:58] *** jesther left
[11:58] <colomon> ⊆ converts both sides to sets, so counts are lost

[11:58] <colomon> ≼ converts both sides to bags, and counts are important

[11:59] <colomon> we can help you come up with a texas version

[11:59] <benabik> Why does parse time explode with Unicode on Rakudo, and is there a planned fix?

[11:59] *** berekuk left
[11:59] <lizmat> there is no planned fix as yet, hoping for pmichaud to get some tuits to look at this / give pointers to others to fix this

[11:59] <lizmat> it is mightily annoying

[12:00] <daxim> define texas

[12:00] <lizmat> pure ascii

[12:00] <colomon> daxim: pure ascii version of a unicode operator

[12:00] <lizmat> (<+) 

[12:00] *** jferrero left
[12:01] *** jferrero joined
[12:01] <lizmat> the plus indicating the importance of the numbers ?

[12:01] *** sqirrel left
[12:01] <FROGGS> lizmat: I thought jnthn said that you can have a infix:«\xsomething» in the setting, without loosing speed

[12:02] <lizmat> doesn't work

[12:02] <lizmat> I've put in the code in comments, so that when it starts to work, we can just uncomment

[12:02] <colomon> (+<+) indicating numbers on both sides?

[12:03] <lizmat> FROGG: #only sub infix:<"\x222A">(\|$p) is equiv(&infix:<|>) { infix:<(|)>(|$p) } # NO UNICODE OPS YET

[12:03] <colomon> actually (+<=+) I guess, by analogy with (<)

[12:03] <lizmat> wow, that's a long one

[12:03] <colomon> lizmat: long is okay, IMO

[12:04] <lizmat> but we don't have (=<=)

[12:04] <lizmat> so why (+<+) ?

[12:04] <colomon> right, but we do have (<=)

[12:04] <colomon> lizmat: I was just thinking of emphasizing the numbers on both sides

[12:04] <colomon> but I'm just throwing out ideas here

[12:04] <lizmat> but (<=) is quivalent to ⊆

[12:05] *** locsmif joined
[12:05] *** wtw left
[12:05] <lizmat> feels more natural to do (<+) for ≼

[12:05] <lizmat> I'll go for (<+) for symmetry with (<=) for now

[12:05] <colomon> lizmat: you maybe can't see it, but ≼ has the = sign in there

[12:06] <lizmat> I know, I can see

[12:06] <colomon> it's the bag version of ⊆

[12:06] <lizmat> yes, and bags have numbers not booleans

[12:07] <colomon> the point is that there is a distinction between (<) and (<=), and ≼ is closer to (<=)

[12:08] *** teslos left
[12:09] <lizmat> ⊂ = (<), ⊆ = (<=) and ≼ would be (<+)

[12:10] <lizmat> maybe ⊆ should become (=<=) and ≼ (+<+) ?

[12:10] <lizmat> or (<-) and (<=) ?

[12:11] <FROGGS> r: sub infix:«\x227c»(\a, \b) { 1 + 2 }; say 1 ≼ 2;

[12:11] <camelia> rakudo 26a36b: OUTPUT«3␤»

[12:11] <lizmat> huh?

[12:11] * lizmat tries again

[12:13] *** wtw joined
[12:13] *** iSlug left
[12:14] *** teslos joined
[12:16] <FROGGS> dunno about slowdown though

[12:16] *** teslos left
[12:16] <lizmat> don't know yet either

[12:16] <FROGGS> arglbargl! Unhandled exception: java.lang.OutOfMemoryError: Java heap space

[12:17] <FROGGS> I can't run the spectest suite on windows :/

[12:17] <FROGGS> it starts to fail all test after the 20nth or so

[12:18] <FROGGS> it seems it is unable to consume more than 295MB

[12:18] <FROGGS> r: sub infix:<\x227c>(\a, \b) { 1 + 2 }; say 1 ≼ 2; # < > dont interpolate

[12:18] <camelia> rakudo 26a36b: OUTPUT«===SORRY!=== Error while compiling /tmp/cWDNJEwXYY␤Two terms in a row␤at /tmp/cWDNJEwXYY:1␤------> infix:<\x227c>(\a, \b) { 1 + 2 }; say 1 ⏏≼ 2; # < > dont interpolate␤    expecting any of:␤        postfix␤        infix stopper␤…

[12:19] *** Pleiades` joined
[12:19] <FROGGS> r: sub infix:«"\x227c"»(\a, \b) { 1 + 2 }; say 1 ≼ 2; # < > dont interpolate # dont add extra quotes

[12:19] <camelia> rakudo 26a36b: OUTPUT«3␤»

[12:19] <FROGGS> ohh, that actually work

[12:19] <FROGGS> s

[12:19] <timotimo> hehe

[12:19] <FROGGS> r: sub infix:«"(\x227c)"»(\a, \b) { 1 + 2 }; say 1 ≼ 2;

[12:19] <camelia> rakudo 26a36b: OUTPUT«===SORRY!=== Error while compiling /tmp/91Wc70PwYY␤Two terms in a row␤at /tmp/91Wc70PwYY:1␤------> x:«"(\x227c)"»(\a, \b) { 1 + 2 }; say 1 ⏏≼ 2;␤    expecting any of:␤        postfix␤        infix stopper␤        infix or meta-i…

[12:19] <FROGGS> w/e

[12:21] <FROGGS> k, trying again with Xmx512m set

[12:24] *** skids left
[12:29] *** SamuraiJack__ left
[12:29] *** spider-mario joined
[12:33] *** prammer joined
[12:33] *** pmurias joined
[12:34] <JimmyZ> FROGGS: ping

[12:34] <pmurias> FROGGS: I'll try to remove the old env leftovers 

[12:34] <yoleaux> 10:56Z <FROGGS> pmurias: yes, I have

[12:35] <JimmyZ> https://github.com/perl6/nqp/pull/116 Could someone apply it?

[12:36] <FROGGS> JimmyZ: pong

[12:36] * moritz does it

[12:36] <dalek> nqp: 432f444 | jimmy++ | Configure.pl:

[12:36] <dalek> nqp: fixed potential build failure on mingw32

[12:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/432f44493d

[12:36] <dalek> nqp: 51c1fb6 | moritz++ | Configure.pl:

[12:36] <dalek> nqp: Merge pull request #116 from zhuomingliang/patch-1

[12:36] <dalek> nqp: 

[12:36] <dalek> nqp: fixed potential build failure on mingw32

[12:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/51c1fb6620

[12:36] <FROGGS> pmurias: cool :o)

[12:36] <JimmyZ> thanks

[12:36] <FROGGS> k

[12:36] <JimmyZ> FROGGS: nvm

[12:36] <FROGGS> :o)

[12:37] <Juerd> aaa

[12:37] <Juerd> -

[12:38] <Juerd> Oops, ignore that please :)

[12:39] <JimmyZ> another one: https://github.com/perl6/nqp/pull/117

[12:40] <JimmyZ> actually from original dyncall

[12:43] *** denis_boyun left
[12:49] <dalek> nqp: 7ecee93 | jimmy++ | 3rdparty/dyncall/Makefile.embedded:

[12:49] <dalek> nqp: Updated dyncall to support mingw32

[12:49] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7ecee93be9

[12:49] <dalek> nqp: daae9b5 | moritz++ | 3rdparty/dyncall/Makefile.embedded:

[12:49] <dalek> nqp: Merge pull request #117 from zhuomingliang/patch-2

[12:49] <dalek> nqp: 

[12:49] <dalek> nqp: Updated dyncall to support mingw32

[12:49] <dalek> nqp: review: https://github.com/perl6/nqp/commit/daae9b5cb6

[12:50] <lizmat> colomon: it looks like "is iffy" is a nieczaism

[12:50] <colomon> lizmat: I think it may be in std?

[12:50] <moritz> maybe ported from STD to niecza, and later removed from STD

[12:51] <lizmat> definitely not in the spec

[12:52] <moritz> but it is in std.pm6

[12:52] <moritz> r: 1 !+ 2

[12:52] <camelia> rakudo 26a36b: OUTPUT«===SORRY!=== Error while compiling /tmp/L6YVJfuKwj␤Cannot negate + because it is not iffy enough␤at /tmp/L6YVJfuKwj:1␤------> 1 !+⏏ 2␤»

[12:52] <moritz> std: 1 !+ 2

[12:52] <camelia> std 06636e4: OUTPUT«===SORRY!===␤Cannot negate + because additive operators are not iffy enough at /tmp/TThxAIHveq line 1:␤------> 1 !+⏏ 2␤Parse failed␤FAILED 00:00 42m␤»

[12:52] <moritz> lizmat: oh, you meant the actual trait, no the concept

[12:52] <lizmat> yes, "is iffy"

[12:53] <moritz> yes, that might be an nieczaism, but a helpful one IMHO

[12:53] <moritz> because otherwise you can't make user-declared operators iffy

[12:53] <lizmat> well, the spec doesn't have the string "iffy" in it

[12:53] <lizmat> maybe something needs to be specced then  :-)

[12:54] *** marasgp left
[12:54] <pmurias> how do I run a single test file?

[12:54] <pmurias> (without installing rakudo)

[12:55] *** jnap joined
[12:55] <lizmat> make t/spec/dir/name.t

[12:58] *** dayangkun joined
[12:58] *** kbaker joined
[13:00] <moritz> \o/ new HPMoR chapter

[13:00] *** ajr joined
[13:00] *** ajr is now known as Guest3044

[13:01] *** Guest3044 is now known as ajr_

[13:08] <PerlJam> ... there goes another few minutes of lost productivity this morning

[13:10] *** PacoAir joined
[13:17] <pmurias> FROGGS: how should I supply a patch for you to apply?

[13:18] <FROGGS> pmurias: a pull request would be nice

[13:19] <moritz> star: say 42

[13:19] <camelia> star 2013.08: OUTPUT«42␤»

[13:19] <moritz> updated to current R*

[13:19] <lizmat> *: say 42

[13:19] <lizmat> :-(

[13:20] * pmurias hates the github ui changes making things confusing

[13:20] <moritz> lizmat: you can patch that in evalbot if you want :-)

[13:21] <lizmat> I might

[13:21] <lizmat> meanwhile, I'm looking for a stray unicode char that's causing the parse to explode :-(

[13:21] <lizmat> (as in taking very long)

[13:22] *** donaldh joined
[13:23] <moritz> lizmat: is that committed and pushed?

[13:23] <pmichaud> ack '[\x80-\xff]'

[13:23] <lizmat> no, only in my local repo

[13:24] <moritz> pmichaud: it's not that simple, since Unicode chars in the Latin-1 range are OK

[13:24] <moritz> and ack doesn't decode as UTF-8

[13:24] <FROGGS> but it is a start

[13:24] <pmichaud> ack '[\xc3-\xff]'   # or something like that

[13:25] <pmichaud> but I don't think there are that many latin-1 chars in the setting anyway

[13:25] * pmichaud checks

[13:25] <pmichaud> oh, except for the french angles  :-/

[13:25] <moritz> 106

[13:25] <lizmat> found them, I think

[13:26] *** bluescreen10 joined
[13:26] <pmurias> the github rakudo-js has been accidently deleted and recreated, hopefully it dosn't inconvinience anyone

[13:27] *** dmol left
[13:29] <JimmyZ> Error occurred during initialization of VM

[13:29] <JimmyZ> Could not reserve enough space for object heap

[13:29] <JimmyZ> :(

[13:29] <pmichaud> for future reference:   ack '[\xc4-\xff]'  will find lines with chars with codepoint > 0xff

[13:30] <pmichaud> (in a utf8 encoded file)

[13:30] <pmurias> FROGGS: I have made a pull request

[13:30] <lizmat> pmichaud++

[13:31] *** PacoAir left
[13:32] <FROGGS> pmurias: for rakudo? I can't see it

[13:32] *** PacoAir joined
[13:32] <JimmyZ> change -Xmx1600m to -Xmx1200m works

[13:33] *** iSlug joined
[13:33] <lizmat> r: constant term:<<"\x2205">>= "foo"; say ∅ # rakudobug ?

[13:33] <camelia> rakudo 26a36b: OUTPUT«===SORRY!=== Error while compiling /tmp/U8gVPcX4lq␤invoke() not implemented in class 'QAST::Want'␤at /tmp/U8gVPcX4lq:1␤------> ␤»

[13:33] <lizmat> or just NYI with LTA error message

[13:33] <pmichaud> nyi, i suspect.

[13:33] <lizmat> n: constant term:<<"\x2205">>= "foo"; say ∅ # rakudobug ?

[13:34] <camelia> niecza v24-90-gd827fa8: OUTPUT«set()␤»

[13:34] <lizmat> NYI then  :-)

[13:34] <lizmat> huh?

[13:34] <lizmat> nope, it was supposed to say "foo", not an empty set

[13:34] <pmichaud> I wonder if ∅ is predefined in niecza

[13:34] <lizmat> it is

[13:34] *** kaleem left
[13:35] <moritz> defining terms is also NYI in rakudo

[13:35] <moritz> I've tried twice to implement it, and failed both times

[13:35] <pmurias> FROGGS: https://github.com/pmurias/rakudo/commit/23d310afe552e86b13668d98a3c835f0d498fc86

[13:36] *** dmol joined
[13:36] <pmichaud> I'm afk again

[13:36] <pmurias> FROGGS: could I just mail you a patch?

[13:36] *** btyler joined
[13:37] <FROGGS> pmurias: sure

[13:37] <FROGGS> pmurias: hold on

[13:37] <FROGGS> https://github.com/rakudo/rakudo/pull/203

[13:38] <dalek> rakudo/nom: 23d310a | (Pawel Murias)++ | src/core/terms.pm:

[13:38] <dalek> rakudo/nom: Unify the %*ENV creating across the jvm and parrot backends.

[13:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/23d310afe5

[13:38] <dalek> rakudo/nom: 59b2dfb | (Tobias Leich)++ | src/core/terms.pm:

[13:38] <dalek> rakudo/nom: Merge pull request #203 from pmurias/nom

[13:38] <dalek> rakudo/nom: 

[13:38] <dalek> rakudo/nom: Unify the %*ENV creating across the jvm and parrot backends.

[13:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/59b2dfb73a

[13:38] <pmurias> FROGGS: thanks

[13:38] <FROGGS> yw

[13:41] <FROGGS> bbl

[13:41] *** FROGGS left
[13:45] *** rindolf joined
[13:46] *** bluescreen10 left
[13:46] *** FROGGS[mobile] joined
[13:52] *** dayangkun left
[13:52] * [Coke] yawns

[13:53] <moritz> fwiw panda bootstrap seems to work with this latest patch

[13:53] <lizmat> morning [Coke] !

[13:54] <colomon> what moritz said, I'm running another smoke test now.

[13:54] <FROGGS[mobile]> does somebody know how to spectest rakudo@jvm without running into memory limits?

[13:55] *** fridim_ left
[13:55] <moritz> 'make spectest' does that for me :-)

[13:55] <FROGGS[mobile]> on windows

[13:55] <moritz> oh.

[13:56] <colomon> FROGGS[mobile]: if it's java running out of memory rather than windows, you can probably set a flag to fix that somewhere.

[13:57] <FROGGS[mobile]> I tried Xmx1024m without luck

[13:57] *** btyler left
[13:57] <FROGGS[mobile]> but it is possible that I did it wrong

[13:58] * [Coke] needs コーヒー

[14:00] *** thou joined
[14:02] *** skids joined
[14:05] * jnthn is home

[14:05] <yoleaux> 01:38Z <benabik> jnthn: To fix 3rdparty/dyncall try `git submodule sync && git submodule update`

[14:05] <nwc10> and still in one piece?

[14:06] <lizmat> maybe jnthn has been a bit osloed ?

[14:06] <nwc10> norwai!

[14:06] <nwc10> (not sure who first used that one, but I got in first with it today)

[14:09] <jnthn> Yes, in one piece

[14:09] <jnthn> No transportation accidents in this trip. :)

[14:11] <jnthn> ...thankfully, that hasn't happened for well over a year by now. :)

[14:13] <jnthn> btw, for those of you curious about that podcast that interviewed me about architecture stuff last week, it's up at http://t.co/DnVBweWXmA

[14:14] <jnthn> FROGGS[mobile]: I've not had problems spectesting Rakudo JVM on Windows, fwiw

[14:14] <jnthn> (didn't do it for a few days, mind...)

[14:15] <timotimo> yays

[14:16] <jnthn> (It's nothing Perl 6 related; more about what I do at $dayjob)

[14:17] <timotimo> yup

[14:19] *** TimK1 joined
[14:20] <FROGGS[mobile]> I'm on windows xp

[14:20] <jnthn> XP?! 

[14:21] <FROGGS[mobile]> and I think I set the memory option fot jre instead of jdk

[14:21] <FROGGS[mobile]> yeah, "good" old xp

[14:21] * colomon still uses XP in the windows VM on his MBP

[14:21] * colomon hates every post-XP Windows he has tried. 

[14:22] * colomon switched to OS X because of this, actually.

[14:22] <FROGGS[mobile]> interesting, I hate osx

[14:23] <lizmat> r: only sub infix:<(.)>(\|$p) {"foo"}  # what's wrong with this ?

[14:23] <camelia> rakudo 59b2df: OUTPUT«===SORRY!=== Error while compiling /tmp/eFXGyJf3Mq␤Missing block␤at /tmp/eFXGyJf3Mq:1␤------> only sub infix:<(.)>(\⏏|$p) {"foo"}  # what's wrong with this ?␤    expecting any of:␤        new term to be defined␤        constrain…

[14:24] <lizmat> is this a nieczaism?

[14:24] <FROGGS[mobile]> Is that signature valid?

[14:25] <lizmat> copy/pasted from niecza

[14:25] <lizmat> I guess not

[14:25] <jnthn> std: only sub infix:<(.)>(\|$p) {"foo"} 

[14:25] <camelia> std 06636e4: OUTPUT«===SORRY!===␤Unable to parse signature at /tmp/6et9jNqcTg line 1:␤------> only sub infix:<(.)>⏏(\|$p) {"foo"}␤Couldn't find final ')'; gave up at /tmp/6et9jNqcTg line 1:␤------> only sub infix:<(.)>(\⏏|$p) {"foo"}[…

[14:25] <jnthn> That looks like syntax we had once upon a time...

[14:25] <jnthn> I forget what it was for :)

[14:26] <lizmat> I suspect \|$p is now just |p

[14:26] <jnthn> It may just be spelled \p now

[14:26] <jnthn> oh, or that

[14:26] <jnthn> I forget :)

[14:26] <jnthn> It's hard enough to remember current spec :P

[14:27] <lizmat> my $base_set = $p ?? $p[0].Set !! set();  # seeing that, I assume \p would be better

[14:27] <nwc10> "this week" isn't what it used to be

[14:27] *** denis_boyun joined
[14:30] * lizmat tries to compile settings again

[14:31] * jnthn just got himself up to date builds of stuff

[14:33] *** iSlug left
[14:34] <lizmat> ok, am about to give up: any suggestions from this massive stacktrace ? https://gist.github.com/lizmat/6366683

[14:34] <lizmat> ah, found it

[14:34] <jnthn> Suggest trying wiht --ll-exception if you didn't already

[14:35] <lizmat> this is while doing the make 

[14:35] <lizmat> apparently it cannot handle "!! die "Routine given to equiv does not appear to be an operator";"

[14:35] <jnthn> Sure...just ram it into the Makefile :)

[14:35] <lizmat> right

[14:36] <lizmat> guess I need to check all of the is equivs

[14:37] <jnthn> Apparenlty they ain't all equivalent :P

[14:41] <donaldh> is anyone working on sockets on nqp jvm ?

[14:42] <jnthn> donaldh: tadzik has a branch with a good bit of progress on them, not sure of current status/activity

[14:42] <donaldh> ah

[14:42] <jnthn> tadzik: ping :)

[14:42] <donaldh> I started hacking but then thought I should check first.

[14:43] <donaldh> (maybe the last thing that is required for panda )

[14:44] <jnthn> donaldh: I doubt that tadzik will object to you contributing to the branch(es)

[14:44] <donaldh> Let me scrape around for the branch and take a look

[14:45] <donaldh> hah, the same branch name as I had chosen. who'd a thunk that jvm-sockets would be a popular name

[14:46] <lizmat> could it be that "is equiv" is simply not (well) implemented yet in rakudo ?

[14:47] <tadzik> jnthn, donaldh, pong :)

[14:47] <donaldh> tadzik: enquiring about sockets on jvm ^^

[14:47] <tadzik> jvm-sockets is present in both nqp and rakudo

[14:47] <lizmat> jnthn: does this look sane?

[14:47] <lizmat> multi trait_mod:<is>(Routine $r, :&equiv!) {

[14:47] <lizmat>     nqp::can(&equiv, 'prec')

[14:47] <lizmat>         ?? trait_mod:<is>($r, :prec(&equiv.prec))

[14:47] <lizmat>         !! die "Routine given to equiv does not appear to be an operator";

[14:47] <lizmat> }

[14:47] <tadzik> in rakudo it implements IO::Socket::INET that works

[14:47] <tadzik> doesn't pass the tests, because we have no open(..., "p")

[14:48] <lizmat> jnthn: it looks like any "is equiv" dies in the settings

[14:48] *** FROGGS joined
[14:48] <donaldh> open (…, "p") ?

[14:48] <lizmat> and the only "is equiv" I see in the settings, are the once I just added frmom niecza

[14:48] <tadzik> donaldh: pipes

[14:49] <tadzik> io-socket-inet.t relies on that

[14:49] <donaldh> surely that's unix, no?

[14:49] <tadzik> I'm not sure

[14:49] <tadzik> oh, sure

[14:49] <tadzik> it's using some different hack on windows

[14:49] <jnthn> lizmat: is equiv? I think it does, which iirc is why there's a big chunk of stuff at the end of the setting.

[14:50] <jnthn> lizmat: Which sets all the precedence traits up.

[14:51] <lizmat> aha!  ok

[14:51] <jnthn> lizmat: See end of src/core/operators.pm

[14:51] <lizmat> found it, yes

[14:51] <jnthn> 'tis there

[14:51] <lizmat> I guess I need to add them there, rather than at definition time

[14:51] <jnthn> I musta decided it was better to avoid the issue than take it on. That probably means it's hairy, or I was just lazy :)

[14:52] <donaldh> tadzik, I started hacking sockets but using NIO. I'll maybe try and meld my SyncSocket into the rest of your work.

[14:53] <FROGGS> r: my $a; temp $a; say "jnthn, have you seen that?"

[14:53] <camelia> rakudo 59b2df:  ( no output )

[14:54] <tadzik> donaldh: my sockets are only synchronous

[14:54] <jnthn> NIO can do dync too :)

[14:55] <jnthn> uh, sync 

[14:55] <tadzik> then it's probably saner for us to use it for everything

[14:55] <donaldh> tadzik: also. My impl shared 90% with FileHandle. 

[14:56] <tadzik> sounds good :)

[14:56] <tadzik> feel free to replace mine with yours

[14:57] <donaldh> tadzik: looks like you have done most of the hard work in Ops.java, Compiler.nqp and most importantly, rakudo.

[14:58] <FROGGS> do I have to set the memory limit for C:\Programme\Java\jdk1.7.0_11\bin\javaw.exe, or the javac.exe?

[14:58] <FROGGS> or for the jre only?

[14:59] <jnthn> FROGGS: It tends to just be set when invoking the jvm (with java) as done in perl6[.bat]

[14:59] <FROGGS> ahh

[14:59] <FROGGS> hmm

[14:59] <jnthn> FROGGS: Note that the spectests use an evilserver

[14:59] <jnthn> um

[14:59] <jnthn> evalserver

[15:00] <donaldh> lol

[15:00] <jnthn> So maybe its memory use needs a tweak

[15:00] <jnthn> heh, what a thinko :)

[15:00] <FROGGS> MUHAHAHAHAA

[15:00] <donaldh> jnthn: you were right the first time :D

[15:00] <FROGGS> it was -Xms100m

[15:00] *** ajr_ left
[15:01] *** ajr joined
[15:01] *** ajr is now known as ajr_

[15:04] <FROGGS> cool, it is working now I think

[15:04] *** kaare_ joined
[15:04] *** ajr_ left
[15:05] *** jaldhar left
[15:06] *** jaldhar joined
[15:10] *** ajr joined
[15:10] *** ajr is now known as Guest93807

[15:11] *** Guest93807 is now known as ajr_

[15:13] <colomon> evilserver!

[15:13] <colomon> evilserver++

[15:15] *** btyler joined
[15:17] <jnthn> bbi20

[15:17] *** dalek left
[15:17] *** dalek joined
[15:17] *** ChanServ sets mode: +v dalek

[15:35] <FROGGS> T-2min

[15:40] *** prevost joined
[15:41] <tadzik> donaldh: good :)

[15:42] *** berekuk joined
[15:42] *** pdcawley left
[15:42] <TimToady> FROGGS: you're assuming he meant minutes :)

[15:43] <FROGGS> TimToady: and I'm assuming decimals :o)

[15:44] *** prevost left
[15:45] *** pdcawley joined
[15:46] *** prevost joined
[15:47] <TimToady> lizmat: $?foo is lexically scoped, but most the the predefined ones can be put in the setting, though some of the values we might want to generate lazily; we could populate %?ENV on first mention, for instance, since most programs won't use it

[15:47] <lizmat> TimToady: I was thinking about the case of the core setting vs something like lib/Test.pbc

[15:48] <TimToady> what's the problem?

[15:48] <lizmat> one could envision that .pbc files were compiled on another time / place than the setting

[15:48] *** zakharyas left
[15:48] <jnthn> There was a queue... :P

[15:49] <lizmat> so that the %?ENV that lib/Test.pbc had seen, would be different from the %?ENV that the settings saw when they were compiled

[15:50] <jnthn> lizmat: Does %?ENV exist?

[15:50] <TimToady> well, and what's wrong with that?

[15:50] <TimToady> jnthn: it was speculated that it exists yesterday

[15:50] <lizmat> at the moment we only have one %?ENV, no?

[15:50] <lizmat> or is that already "local" to the compunit anyway ?

[15:51] *** kaleem joined
[15:51] <jnthn> At the moment Rakudo has no %?ENV afaik :)

[15:51] <jnthn> There's %*ENV which is typically found in PROCESS

[15:51] <FROGGS> r: say %?ENV

[15:51] <camelia> rakudo 59b2df: OUTPUT«===SORRY!=== Error while compiling /tmp/D9s2jQYDbu␤Variable '%?ENV' is not declared␤at /tmp/D9s2jQYDbu:1␤------> say %?ENV⏏<EOL>␤    expecting any of:␤        postfix␤»

[15:51] <jnthn> For any of the $?FOO, though, the assumption is that it's about what was there at compile time

[15:51] <lizmat> well, %?ENV is just an example, same goes for any $?foo variable

[15:52] *** kaleem left
[15:52] <jnthn> lizmat: Sure, but that's the way $?FOO variables work. That's the point of them. :)

[15:52] <lizmat> ok, then I will shut up  :-)

[15:52] <jnthn> $?OS # what OS was running when we compiled

[15:52] <jnthn> $*OS # what OS are we running on

[15:53] <jnthn> I'd guess the $?OS like ones live in UNIT...

[15:53] <TimToady> funny that you picked $*OS...

[15:53] * lizmat blames being exposed to Sets/Bags too long

[15:54] <jnthn> TimToady: oh, what did I forget about it? ))

[15:54] <TimToady> that the spec considers it an underspecified them, like 'length'

[15:55] <TimToady> my rakudo runs on a VM supplied by a DISTRO built around some KERNEL

[15:55] <TimToady> which of those is really the OS?

[15:56] <FROGGS> DISTRO can be like debian, ubuntu, centos then?

[15:56] <TimToady> that's the notion

[15:57] <FROGGS> is microsoft a distributor or windows?

[15:57] <FROGGS> of*

[15:57] <tadzik> I think vista is a distro of windows

[15:57] <FROGGS> yeah, and all have the NT kernel I suppose

[15:57] <FROGGS> (except the one that don't)

[15:58] <FROGGS> like windows ce on powerpc or whatever will be there in five years

[15:58] <TimToady> well, any system is going to map poorly to reality sometimes, but one level of OS maps particularly poorly

[15:58] <FROGGS> is there a map of examples for DISTRO/KERNEL?

[16:00] <TimToady> not really, it's kinda fuzzy, as our initial understanding of 'length'-like units was

[16:00] *** donaldh left
[16:01] <TimToady> but the three levels seems adequate for linux-y distrubtions

[16:01] <TimToady> I suppose I'd be open to naming the kernel one OS

[16:01] <TimToady> since that's shorter, and people have trouble remembering how to spell kernel

[16:02] <FROGGS> hmmm, DISTRO=Ubuntu, KERNEL=3.5.0, OS=linux, ARCH=x86_64

[16:02] <TimToady> but each of those is supposed to be an object, so current usage of $*OS would have to become $*OS.name

[16:02] <TimToady> no

[16:02] <TimToady> they aren't strings

[16:03] <TimToady> though they might stringify that way

[16:03] <FROGGS> yeah, I've seen that VM has attributes

[16:03] *** daxim left
[16:03] <TimToady> in particular KERNEL is linux-3.5.0

[16:03] <TimToady> or OS

[16:04] <TimToady> each of these levels tends to have a name/auth/ver

[16:04] <TimToady> (in linux-land anyway)

[16:04] <FROGGS> DISTRO.name = Ubuntu, DISTRO.ver=13.04, DISTRO.auth=canocial

[16:04] <FROGGS> that fits

[16:05] <TimToady> even if we rename KERNEL to OS, it's probably not going to stringify as just 'linux'

[16:07] <TimToady> and DISTRO probably gistifies to Ubuntu-13.04

[16:07] <TimToady> since the authority is usually implicit in the name

[16:08] <FROGGS> yeah

[16:08] <TimToady> or a given name has a default authority, but forks can have an explicit authority

[16:09] <Teratogen> sporks

[16:09] <Teratogen> sporking, a new Perl 6 idiom

[16:09] <FROGGS> k, so KERNEL or OS .name would be linux, and .ver = 3.5.0

[16:09] <TimToady> linux-FROGGS-1.0.0  your new fork of the linux kernel :)

[16:09] <FROGGS> I think I'm making a map of the >10 OSes I have, then we might see if it fits or not

[16:10] <TimToady> that would be good

[16:10] <TimToady> note how your fork can reset its version number, since authority really comes before version

[16:11] <FROGGS> nod

[16:12] <TimToady> maybe we'll need a BROWSER/WEBSERVER level in there too :)

[16:13] <FROGGS> it is getting complicated these days

[16:13] <TimToady> we probably need to make sure these object dispatch nicely to a set of multi-sigs

[16:13] <TimToady> *jects

[16:14] <TimToady> so we can have constraint matching that can talk about 3.5+ and such

[16:14] <TimToady> er, v3.5+

[16:14] <FROGGS> well, you could have a `where OS.name eq '...'`

[16:14] <TimToady> well, would be nice to do it with positionals or nameds

[16:14] <FROGGS> or *.name or what the syntax is

[16:15] <FROGGS> that would be nice for all kinds of objects

[16:15] *** dmol left
[16:16] <TimToady> multi sub kernel ('linux', *, v3.5+) { do_this() }

[16:16] <FROGGS> like I could have a multi for a thing that has length > 10, and another multi for length <= 10

[16:16] <TimToady> er, $ rather than *

[16:16] <TimToady> well, maybe

[16:16] <TimToady> certainly with 'where'

[16:17] <TimToady> don't think we quite allow 0..10 as a literal in a sig

[16:17] <TimToady> std: sub foo(1..10) {...}

[16:17] <camelia> std 06636e4: OUTPUT«===SORRY!===␤Unable to parse signature at /tmp/B73ARrsesh line 1:␤------> sub foo⏏(1..10) {...}␤Couldn't find final ')'; gave up at /tmp/B73ARrsesh line 1:␤------> sub foo(1⏏..10) {...}␤    expecting any of:␤    co…

[16:17] <TimToady> std: sub foo($ where 1..10) {...}

[16:17] <camelia> std 06636e4: OUTPUT«ok 00:00 45m␤»

[16:18] <FROGGS> std: multi sub test ( $a where .length 1..10 ) { }

[16:18] <camelia> std 06636e4: OUTPUT«===SORRY!===␤Unable to parse signature at /tmp/5h9mivTjK1 line 1:␤------> multi sub test ⏏( $a where .length 1..10 ) { }␤Couldn't find final ')'; gave up at /tmp/5h9mivTjK1 line 1:␤------> multi sub test ( $a where .length[3…

[16:18] <FROGGS> err, missing an infix

[16:18] <FROGGS> bbl, dinner

[16:23] <TimToady> multi sub kernel($k where (:name<linux>, :ver(v3.5+))) {...}  # I guess this should work already

[16:30] <TimToady> oh, only without the where

[16:34] <TimToady> and I suppose a named interface is less fragile in a fractal landscape (see BUILD)

[16:35] *** teslos joined
[16:35] *** ajr_ left
[16:36] <lizmat> ok, I'm giving up for now

[16:36] <lizmat> the patches for Set/Bag update behaviour and associated error while compiling at: https://gist.github.com/lizmat/6367558

[16:37] <lizmat> cycling and dinner&

[16:37] <TimToady> o/

[16:39] <sjohnson> （　｀ー´）

[16:41] *** teslos left
[16:43] <diakopter> jnthn: u not in the other channel

[16:43] *** Pleiades` left
[16:44] *** Pleiades` joined
[16:53] <jnthn> diakopter: ?

[16:55] *** panchiniak joined
[16:59] *** prevost left
[17:00] *** abnorman joined
[17:01] <diakopter> jnthn: er, nm; oops

[17:04] *** abnorman left
[17:05] *** dakkar left
[17:06] * jnthn wonders if dinner will wake him up a bit...

[17:06] * TimToady is dubious

[17:11] <sjohnson> it will if there's a thumbtack hidden in it

[17:11] *** xinming_ joined
[17:14] *** xinming left
[17:16] *** jnap left
[17:22] *** jaldhar left
[17:22] *** jaldhar joined
[17:23] *** FROGGS[mobile] left
[17:23] <jnthn> sjohnson: um...nej tack :P

[17:24] *** dmol joined
[17:24] <sjohnson> what's a nej? :)

[17:24] <sjohnson> is that the sound of "no" after you accidently bit on one?  ;~;

[17:26] *** mauke joined
[17:28] <moritz> sjohnson: just the Swedish spelling of "no"

[17:29] <geekosaur> "nay!"

[17:29] <sjohnson> heh

[17:29] <jnthn> And together, "nej tack" is Swedish for "no thanks" :)

[17:31] <sjohnson> i'm impressed

[17:34] <sjohnson> jnthn: that worked out well :)

[17:36] <dalek> star: 398f993 | moritz++ | docs/announce/2013.08.md:

[17:36] <dalek> star: fix typo, (Cole Keirsey)++

[17:36] <dalek> star: review: https://github.com/rakudo/star/commit/398f993e20

[17:37] *** pernatiy left
[17:39] <mauke> who here might have handed out lots of karma but not under the nick "dalek"?

[17:40] <moritz> mauke: historically? or recently?

[17:40] <mauke> recently

[17:40] <moritz> dunno; but many of us are generous with karma

[17:41] <mauke> because I don't think you had 4946 karma a while ago

[17:41] <moritz> .karma mauke

[17:41] <moritz> I don't even think we track karma in here at the moment

[17:41] <FROGGS> ARGGGHHH, in the middle of S29 spectests it runs into memory limit >.<

[17:41] <PerlJam> moritz++  ;)

[17:41] <moritz> (though I may eventually extract it from the logs)

[17:41] <FROGGS> after hours!

[17:41] <mauke> preflex does :-)

[17:43] <mauke> preflex: karma moritz 

[17:43] <preflex>  moritz: 4947

[17:44] <mauke> http://irclog.perlgeek.de/perl6/search/?nick=&q=%2B%2B doesn't work, sadly

[17:47] <sjohnson> .karma sjohnson

[17:48] <sjohnson> @karma sjohnson

[17:48] * sjohnson gives up.

[17:48] <mauke> preflex: karma sjohnson

[17:48] <preflex>  sjohnson: 4

[17:48] <tadzik> sjohnson++ # fatfaces

[17:48] <sjohnson> heh

[17:49] * flussence wonders how useful I am by some arbitrary number metric

[17:49] <flussence> preflex: karma flussence 

[17:49] <preflex>  flussence: 58

[17:49] <flussence> oh wow, bit higher than I thought

[17:50] <sjohnson> mauke: preflex is written in Haskell?

[17:50] <mauke> yes

[17:51] <sjohnson> is the source code available for the public eye?

[17:51] <sjohnson> i'm curious what kind of technology is employed to allow it to connect to the internet

[17:52] <mauke> it's not really public because I think it's kind of shit

[17:52] <sjohnson> ah, so perhaps on an "ask nicely, don't criticize it" basis?

[17:53] <mauke> http://mauke.hopto.org/preflex/

[17:53] <mauke> you can criticize all you want :-)

[17:53] *** ponbiki left
[17:53] <mauke> but the magic technology is sockets

[17:54] <sjohnson> moritz: while we're on the topic of bot stuff, is it possible to update hugme without having to ^C it / have it reconnect to freenode?

[17:54] <sjohnson> i'm kind of thinking it 

[17:54] <sjohnson> might be very handy if one could change its codebase with constant join/part/quits

[17:54] <sjohnson> without*

[17:55] <sjohnson> i suppose some sort of "plugin paradigm" might allow such a thing.

[17:56] <flussence> that's kind of exactly what an irc bouncer is for

[17:56] <mauke> preflex can do that

[17:56] <sjohnson> mauke: did you do it in such a way that you can "unload" and "load" its functionality sort of like a plugin?

[17:56] <mauke> this part *is* magic, though

[17:56] <mauke> no, its "plugins" are statically compiled in

[17:57] <sjohnson> i'm starting to think i need to start using your bot for my own bizarre ideas.

[17:57] <flussence> irssi can update in-place, but I'm scared to look at how it does it

[17:57] <mauke> that's how preflex does it, more or less

[17:58] <mauke> it exec()s itself, passing serialized state as command line parameters

[17:58] <tadzik> ooh :)

[17:58] <flussence> looks like /upgrade does indeed work (at the cost of all my scrollback)

[17:58] <mauke> the socket logic is much simpler, though, because preflex only connects to one server at a time

[17:58] *** SamuraiJack__ joined
[17:59] <mauke> (I'm running multiple instances)

[17:59] <mauke> flussence: fails horribly with SSL connections :-)

[18:00] <flussence> I noticed, good thing I'm too lazy to use ssl on anything I actually talk on :)

[18:20] *** Rotwang joined
[18:20] *** Rotwang left
[18:20] *** Rotwang joined
[18:21] *** denis_boyun left
[18:22] <jnthn> om nom

[18:24] <dagurval> preflex: karma dagurval

[18:24] <preflex>  dagurval: 18

[18:25] <jnthn> preflex: karma jnthn

[18:25] <preflex>  jnthn: 4222

[18:25] <colomon> preflex: karma colomon

[18:25] <preflex>  colomon: 264

[18:25] <dagurval> o_o

[18:25] <jnthn> moritz works harder than me here :)

[18:25] <FROGGS> preflex: karma Jonathan Worthington

[18:25] <preflex>  Jonathan Worthington: 1

[18:25] <FROGGS> O.o

[18:26] <jnthn> preflex: karma jonathan

[18:26] <preflex>  jonathan: 2169

[18:26] *** grondilu joined
[18:26] <FROGGS> preflex: karma FROGGS

[18:26] <preflex>  FROGGS: 147

[18:26] <FROGGS> preflex: karma Tobias Leich

[18:26] <preflex>  Tobias Leich: 138

[18:26] <FROGGS> :o)

[18:26] <diakopter> preflex: karma not_gerd

[18:26] <preflex>  not_gerd: 60

[18:27] <diakopter> preflex: karma diakopter

[18:27] <preflex>  diakopter: 190

[18:27] <diakopter> preflex: karma lwall

[18:27] <preflex>  lwall: 415

[18:27] <diakopter> preflex: karma larry

[18:27] <preflex>  larry: 57

[18:27] <diakopter> preflex: karma TimToady

[18:27] <preflex>  TimToady: 390

[18:27] <diakopter> heh

[18:27] <diakopter> preflex: karma autrijus

[18:27] <preflex>  autrijus has no karma

[18:27] <diakopter> preflex: karma audreyt

[18:27] <preflex>  audreyt: 47

[18:27] <diakopter> preflex: karma au

[18:27] <preflex>  au: 64

[18:28] *** abnorman joined
[18:28] *** araujo left
[18:28] *** araujo joined
[18:29] *** btyler left
[18:31] *** ssutch joined
[18:32] *** btyler joined
[18:32] *** REPLeffect joined
[18:35] *** domidumont left
[18:38] *** berekuk left
[18:39] *** REPLeffect left
[18:49] *** denis_boyun joined
[18:50] <FROGGS> TimToady: we are missing arch somehow: https://ethercalc.org/wrwsbhvuim

[18:51] <FROGGS> TimToady: I think it matters if you have a x86_64 or 68k

[18:54] *** berekuk joined
[18:54] <moritz> preflex: karma lizmat

[18:54] <preflex>  lizmat: 148

[18:54] <moritz> preflex: karma moritz

[18:54] <preflex>  moritz: 4947

[18:57] <dalek> nqp: 360e781 | (Dagur Valberg Johannsson)++ | src/vm/parrot/6model/reprs/VMArray.c:

[18:57] <dalek> nqp: Check for out of bounds. Fixes rakudo crash on "Buf.new.subbuf(0, 1)\;

[18:57] <dalek> nqp: review: https://github.com/perl6/nqp/commit/360e781cd0

[18:57] <moritz> dagurval++

[18:59] *** berekuk left
[19:00] <dagurval> \o/

[19:01] *** PZt left
[19:01] *** rindolf left
[19:02] <dagurval> Would it make sense to make subbuf behave like substr?

[19:02] <moritz> yes

[19:02] *** berekuk joined
[19:02] <dagurval> I'd like to work on that

[19:04] <jnthn> ++dagurval

[19:08] * moritz also hopes that in the future the VMs will over some of memcopy-like interface which makes subbuf, concatenation and other operations a lot faster

[19:09] <moritz> dagurval: it would make sense to throw an X::OutOfRange exception from Perl 6 land in subbuf

[19:09] <flussence> I'm stuck travelling offline tomorrow so I might make a HTML5::Entities module, reason being that the part of rakudo that's supposed to handle those in E<> is... really outdated.

[19:10] <flussence> (only recognises xhtml1.0 names and lives in parrot-land)

[19:10] <moritz> ++flussence

[19:12] <flussence> and anyway, how many other programming languages can claim to have partial HTML5 support in the core? :)

[19:12] <mauke> PHP

[19:12] <tadzik> :)

[19:14] <dagurval> moritz: not if we want subbuf to behave like Str.substr

[19:14] <dagurval> r: "".substr(0, 2).say

[19:14] <camelia> rakudo 9faa30: OUTPUT«␤»

[19:15] <flussence> mauke: looks like <? htmlspecialchars() ?> only supports HTML5 as of PHP 5.4, so we're not that far behind

[19:15] <moritz> r: ''.substr(-2, )

[19:15] <camelia> rakudo 9faa30: OUTPUT«Start argument to substr out of range. Is: -2, should be in 0..Inf; use *-2 if you want to index relative to the end␤current instr.: 'throw' pc 381820 (src/gen/CORE.setting.pir:162005) (src/gen/CORE.setting:10155)␤called from Sub 'sink' pc 417689 (src/gen/CORE.sett…

[19:15] <moritz> dagurval: well, in some cases it does throw :-)

[19:15] <FROGGS> r: "".substr(2, 2).say # index out of bounds, not length out of bounds :o)

[19:15] <camelia> rakudo 9faa30: OUTPUT«Start of substr out of range. Is: 2, should be in 0..0␤  in method gist at src/gen/CORE.setting:11528␤  in method gist at src/gen/CORE.setting:987␤  in sub say at src/gen/CORE.setting:12424␤  in method say at src/gen/CORE.setting:984␤  in method say at src/gen/CORE…

[19:17] <dagurval> ah, I see the difference :)

[19:18] <moritz> fwiw I'm not sure if the way rakudo does it with substr is actually specced

[19:20] <dagurval> "While it is illegal for the start position to be outside of the string, it is allowed for the final position to be off the end of the string; in this case the entire rest of the string is returned, whatever is available."

[19:20] <dagurval> Seems to be!

[19:23] *** SamuraiJack__ left
[19:37] <diakopter> moritz: or a mem-non-copy ;)

[19:38] <moritz> diakopter: Buf ropes!

[19:39] <diakopter> bufcowropes

[19:39] <diakopter> like buffalo cow ropes

[19:41] * jnthn tries to decide if that'd be something you eat or not

[19:41] <moritz> jnthn: ropes don't sound very tasty to me

[19:41] <jnthn> But buffalo mozerella is good...

[19:42] <masak> evening, #perl6

[19:42] <moritz> good UGT morning, masak

[19:43] <moritz> masak: feel reminded of t3 reviews!

[19:45] <masak> moritz: acknowledged!

[19:45] *** cognominal left
[19:45] <jnthn> masak: I really want to know how good terminator 3 is too!

[19:46] <masak> jnthn: not nearly as good as t2.

[19:46] <moritz> jnthn: it's, well, finished. Terminated. :-)

[19:47] <PerlJam> masak: It's been so long since the contest that it took me almost a full minute to grok what "t3" was in this context.  ;)  

[19:47] <PerlJam> masak: at this pace you'll be finished just in time to start all over again 

[19:48] * jnthn wonders if it might wrap around...

[19:48] <jnthn> "No contest this year, still reviewing last year's" :)

[19:49] *** pdcawley left
[19:49] <PerlJam> moritz, masak: weren't the two of you taking a collaborative approach to reviews?  Or did I just imagine that?

[19:49] <masak> that was last year.

[19:49] <masak> sorry about it taking a long time. even I am surprised.

[19:50] <masak> I guess $dayjob is using me more than I've been able to internalize.

[19:50] <masak> or maybe I'm just worse these days at finding tuits for p6cc reviews. :/

[19:50] <masak> anyway, I strongly doubt there'll be a p6cc2013.

[19:51] <PerlJam> masak: no need to apologize (to anyone as far as I'm concerned).

[19:51] <PerlJam> in some sense the contest itself was the meat, and the reviews are "just" gravy.  

[19:51] <tadzik> masak: I'll do it if you don't

[19:51] <tadzik> maybe it won't be that awesome, or of that scale, or of that formula, but there'll be one

[19:51] <PerlJam> tadzik++

[19:52] *** cognominal joined
[19:52] *** cognominal left
[19:53] *** cognominal joined
[19:54] <flussence> my netbook can't compile jakudo :(

[19:54] <spider-mario> I thought it was called Rakujo

[19:54] <masak> tadzik: huh. :)

[19:54] <flussence> I guess I'll just sacrifice this sd card for swap space...

[19:55] <masak> spider-mario: actually, it's called Jajujo.

[19:55] <spider-mario> :D

[19:55] <flussence> Jjjjjj?

[19:55] <masak> JAJUJO! \o/

[19:55] <spider-mario> flussence : you might want to consider zram

[19:55] <tadzik> this is how we call

[19:55] <spider-mario> it uses some RAM as compressed swap

[19:55] <masak> which contrasts it to its other incarnations, Papupo and Mamumo.

[19:55] <spider-mario> that’s a funny idea but it might help

[19:55] <PerlJam> is that ja-ju-jo or JA-ju-jo or ja-JU-jo or ja-ju-JO?

[19:56] <masak> PerlJam: it's JA-JU-JO!

[19:56] <masak> :P

[19:56] <jnthn> flussence: You might be able to build it on a more powerful machine and then copy the JARs over... :)

[19:56] <tadzik> well, aren't the jars identical everywhere?

[19:56] <tadzik> We could just have a buildbot :)

[19:57] <jnthn> tadzik: aye

[19:57] <jnthn> tadzik: Well, paths aside perhaps

[19:58] <masak> tadzik: if you do p6cc2013, I'd be happy to assist you in various ways.

[19:58] <masak> tadzik: I have three years of prior experience which might be of use... :)

[19:59] <flussence> spider-mario: I already had zram (1.5GB total); it barely makes it through "Stage jast" then gets OOM-killed on the next part

[19:59] <spider-mario> ah.

[20:00] <flussence> hopefully with an extra 16GB it'll work :)

[20:00] <tadzik> hehe

[20:00] <spider-mario> hope it’s a fast sd card, though

[20:00] <flussence> with the CPU in this thing I don't think I'd notice a difference

[20:02] <flussence> it takes *exactly* 1 hour to build parrot on it though :)

[20:18] *** hummeleBop left
[20:21] *** REPLeffect joined
[20:24] *** ajr joined
[20:24] *** xenoterracide joined
[20:24] *** ajr is now known as Guest30237

[20:24] *** Guest30237 is now known as ajr_

[20:33] *** kaare_ left
[20:35] *** denis_boyun left
[20:38] *** TimK1 left
[20:39] *** denis_boyun joined
[20:41] *** denis_boyun left
[20:43] <flussence> it worked! and I can even run rakudo-jvm outside the directory and have it complain about none of these modules being installed :D

[20:44] * lizmat is back and sad that nobody had an idea about her gist https://gist.github.com/lizmat/6367558

[20:44] <jnthn> .oO( what gist? :) )

[20:44] * diakopter didn't see it

[20:44] <jnthn> called from Sub 'missing' pc 12817 (src/gen/perl6-grammar.pir:4629) (src/Perl6/Grammar.nqp:236)

[20:44] <jnthn> That is probably a big hint.

[20:45] *** spider-mario left
[20:45] <lizmat> perhaps a big hint for you, but not for me

[20:45] <jnthn> lizmat: It's some kind of syntax error, looks like

[20:45] <lizmat> yeah, I figured as much as well, but *where*  !

[20:45] <jnthn> lizmat: Was that --ll-exception output?

[20:45] <lizmat> no

[20:46] <jnthn> Try that maybe, but it's failing to construct the exception object...

[20:46] <lizmat> not sure where to put that in the makefile

[20:46] <jnthn> on the line that compiles CORE.setting

[20:46] <jnthn> before --setting=NULL is fine enough

[20:47] *** denis_boyun joined
[20:47] <lizmat> found it

[20:49] * masak .oO( call 'missing' maybe )

[20:49] <lizmat> compiling now

[20:49] <diakopter> masak: this method

[20:50] <diakopter> masak: this method is

[20:50] <lizmat> no difference in output :-(

[20:50] <diakopter> might as well not botch the joke

[20:50] <masak> diakopter: ;)

[20:50] <jnthn> lizmat: Well, it must be some syntax error inside an if block in your local diff...

[20:51] <lizmat> are you sure it is in an if?  not in a only sub ?

[20:51] <jnthn> yes, two down from missing

[20:51] <jnthn> called from Sub 'statement_control:sym<if>'

[20:51] <lizmat> ok, looking

[20:53] <lizmat> commenting out lines like Bag.new-from-pairs($set.map({ ; $_ => [*] @bags>>.{$_} }));

[20:55] <lizmat> nope, that's not it

[21:04] * flussence is reminded why the general populace hates java...

[21:04] <flussence> real 0m20.792s

[21:04] <diakopter> ?

[21:04] <diakopter> the general populace loves java

[21:04] <flussence> rakudo-parrot only takes 6 seconds to start up here

[21:05] <[Coke]> startup cost is irrelevant for everything I use java for.

[21:05] *** jnap joined
[21:05] <diakopter> right, either very long-running things or effectively indefinitely running things

[21:05] <flussence> I guess I need to write bigger scripts then

[21:06] <diakopter> which is nearly every software that exists

[21:07] *** kbaker left
[21:07] <[Coke]> certainly won't help us in the "write a quick script to get stuff done" categorgy, though.

[21:11] *** jferrero is now known as JoaquinFerrero

[21:11] *** skids left
[21:13] *** kbaker joined
[21:14] <lizmat> apparently there is more than 1 problem: now down to Could not find sub &METAOP_NEGATE

[21:14] <benabik> Huh. My REPL accepts both (|) and (&) from lizmat's gist and that's the only bits I could find with if blocks.

[21:15] <lizmat> I bet you just tried that with a built rakudo

[21:15] <lizmat> it only fails as part of bulding the core settings, afaics

[21:15] <benabik> Ah.

[21:16] *** wtw left
[21:16] <flussence> okay I take that back

[21:16] <benabik> patch does not apply?

[21:17] <flussence> this random script I'm messing with is 23s for parrot vs 28s for jvm (1 module, precompiled on both)

[21:17] <flussence> which works out to about...

[21:17] *** Guillaume2 joined
[21:17] <flussence> r: (28 - 20)/(23 - 6)

[21:17] <camelia> rakudo 9faa30:  ( no output )

[21:18] <flussence> r: say (28 - 20)/(23 - 6)

[21:18] <camelia> rakudo 9faa30: OUTPUT«0.470588␤»

[21:18] <flussence> r: say 1/((28 - 20)/(23 - 6))

[21:18] <camelia> rakudo 9faa30: OUTPUT«2.125␤»

[21:18] <Guillaume2> Hello how can I access the Cocoa API from OS/X using Perl6 ?

[21:18] <flussence> 212% faster

[21:18] <Guillaume2> Can I ?

[21:18] <benabik> flussence: Using crazy math, maybe?

[21:19] <flussence> my brane's not in numbers mode right now, so probably :)

[21:19] <flussence> 112% faster sounds about right...

[21:20] <benabik> A 5s difference is over 100% faster?

[21:20] <benabik> Guillaume2: Rakudo can talk to C APIs, but I don't think there's any way to access Cocoa without Objective C

[21:20] * benabik could be wrong.

[21:20] <Guillaume2> I see...right it's Objective C

[21:21] <flussence> it's a 9 second difference not counting the startup times, on a short-running script

[21:21] <geekosaur> wrappers exist for various languages but I don't think anyone has written such for perl6 yet

[21:21] <Guillaume2> yeah the object mapping between objective c and perl...dont know how that would work

[21:22] <Guillaume2> maybe in a few years 

[21:22] <Guillaume2> :)

[21:22] <benabik> Someone did it for Ruby, but I don't know how.

[21:22] <benabik> (Other than a lot of (ab)use of method_missing)

[21:23] <Guillaume2> I guess I'll write a web app

[21:23] <flussence> for a native GUI, GTK or EFL is probably the most straightforward route right now

[21:23] <Guillaume2> yeah could do that too

[21:24] <Guillaume2> I wanna write a Bible software with Bibles in many language, I wanna be able to cross-reference between Hebrew, Greek and let's say English

[21:25] <Guillaume2> I need to be able to print Hebrew and Greek characters

[21:25] <benabik> You could use rakudo-jvm and then use Swing or SWT, maybe?

[21:25] <diakopter> Guillaume2: I just wanted to make sure you know there are thousands of programs out there that do that...

[21:25] <Guillaume2> oh yeah that would be multiplatform

[21:26] <Guillaume2> yeah for $500

[21:26] <lizmat> jnthn: does this ring a bell:

[21:26] <lizmat> $ perl6 src/core/Set.pm 

[21:26] <lizmat> ===SORRY!===

[21:26] <lizmat> CHECK FAILED:

[21:26] <lizmat> Calling 'infix:<(-)>' will never work with argument types (Set, Set) (lines 144, 144, 144, 144)

[21:26] <lizmat>     Expected: :(\p)

[21:26] *** xenoterracide left
[21:26] * benabik hates writing GUIs, but scala's Swing wrappers made it not too bad.

[21:26] <Guillaume2> the SWORD project..the only open source project about this particular topic dont produce anything

[21:27] *** pmurias left
[21:27] *** abnorman left
[21:27] <lizmat> only sub infix:<(-)>(\p) {

[21:27] <lizmat> colomon: any thoughts on this only sub infix ?

[21:27] <Guillaume2> that's why I wanna write my own app in Perl6

[21:27] *** abnorman joined
[21:28] <jnthn> lizmat: Those errors are usually correct

[21:28] <jnthn> lizmat: Is the proto for that op wrong, maybe?

[21:28] <jnthn> lizmat: Yes, the error is correct. An infix should take two arguments! :)

[21:28] <jnthn> rakudo++ # catching it at compile time :)

[21:29] <lizmat> well, the niecza version says: (\|$p)

[21:29] <lizmat> but that's not valid either

[21:29] *** Guillaume2 left
[21:30] <lizmat> maybe it should be a slurpy?

[21:30] <jnthn> lizmat: What's the whole sub look like?

[21:30] <lizmat> only sub infix:<(-)>(\p) {

[21:30] <lizmat>     return set() unless p;

[21:30] <lizmat>     if p[0] ~~ Baggy {

[21:30] <lizmat>         my @bags = p.map(*.Bag);

[21:30] <lizmat>         my $base = @bags.shift;

[21:30] <lizmat>         Bag.new-from-pairs($base.keys.map({ ; $_ => $base{$_} - [+] @bags>>.{$_} }));

[21:30] <lizmat>     }

[21:30] <lizmat>     else {

[21:30] <lizmat>         my @sets = p.map(*.Set);

[21:30] <lizmat>         my $base = @sets.shift;

[21:30] <lizmat>         Set.new: $base.keys.grep(* !(elem) @sets.any );

[21:30] <lizmat>     }

[21:31] <lizmat> in niecza, the sig was: only sub infix:<∖>(\|$p) is equiv(&infix:<^>) {

[21:31] <benabik> Is it |p?

[21:31] <benabik> \p is one argument, I think(?) |p is capture.

[21:31] <jnthn> It may want to be |p or **@p

[21:33] <lizmat> ok, trying to build settings again

[21:35] *** xenoterracide joined
[21:39] <lizmat> jnthn: why **@p and not *@p ?

[21:40] <jnthn> lizmat: Avoid flattening

[21:41] <lizmat> ah, yup

[21:41] <jnthn> .oO( No LoL )

[21:42] *** berekuk left
[21:42] * masak .oO( No PrOjEcT EuLeR )

[21:43] *** kbaker left
[21:43] * masak Tene your twitter account sent me spam through DM. you might want to change your password or something.

[21:43] <masak> argh, and I fail at IRC. :/

[21:44] <masak> Tene: anyway, above. :/

[21:44] <colomon> lizmat: set difference?  what's the question?

[21:45] *** cognominal left
[21:45] <lizmat> what your intent was with " only sub infix:<∖>(\|$p)"

[21:45] <lizmat> |p  **@p ?

[21:46] <lizmat> \|$p isn't valid syntax in rakudo

[21:48] <colomon> it's supposed to capture all N arguments passed to the operator.

[21:48] <lizmat> **@p then

[21:49] <colomon> maybe?

[21:49] <jnthn> **@p would match other list-assoc ops, I think

[21:49] <colomon> right, it cannot flatten tehem

[21:49] <benabik> \|$p isn't valid syntax anymore.  It's supposed to be just |p

[21:50] *** virtualsue joined
[21:51] <lizmat> all the changed files compile ok when run seperately (except some "The following packages were stubbed but not defined:" errors)

[21:51] <lizmat> stll it doesn't build

[21:52] <lizmat> I'll update the gist with the current state and call it a day

[21:52] <lizmat> maybe a good night of sleep will bring inspiration

[21:54] <lizmat> gist updated, comments/ideas/patches welcome!

[21:54] <lizmat> https://gist.github.com/lizmat/6367558

[21:54] <lizmat> sleep&

[21:57] <diakopter> o/

[22:02] *** Rotwang left
[22:02] *** FROGGS left
[22:03] *** abnorman left
[22:04] <masak> 'night, #perl6

[22:04] <diakopter> o/

[22:06] *** abnorman joined
[22:11] *** FROGGS joined
[22:13] *** Ayiko left
[22:23] *** zwut00 joined
[22:24] *** PacoAir left
[22:25] *** virtualsue left
[22:26] *** Rotwang joined
[22:30] *** grondilu left
[22:43] *** denis_boyun left
[22:53] *** dmol left
[22:54] *** cognominal joined
[22:54] *** teslos joined
[22:58] *** benabik left
[23:03] *** skids joined
[23:03] *** jnap left
[23:11] <dalek> std: d699c5f | Mouq++ | STD.pm6:

[23:11] <dalek> std: Allow multiple unspaces in sequence

[23:11] <dalek> std: review: https://github.com/perl6/std/commit/d699c5faf7

[23:11] <dalek> std: 83f92a5 | larry++ | STD.pm6:

[23:11] <dalek> std: Merge pull request #5 from perl6/multiunsp

[23:11] <dalek> std: 

[23:11] <dalek> std: Allow multiple unspaces in sequence

[23:11] <dalek> std: review: https://github.com/perl6/std/commit/83f92a523f

[23:13] *** Rotwang left
[23:14] *** teslos left
[23:21] *** zwut00 left
[23:22] *** btyler left
[23:23] *** panchiniak left
[23:25] *** benabik joined
[23:32] *** fridim_ joined
[23:56] *** benabik left
[23:58] *** jnap joined
[23:58] *** FROGGS left
