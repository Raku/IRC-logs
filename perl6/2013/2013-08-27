[00:03] *** FROGGS left
[00:08] *** gdey left
[00:12] *** Psyche^ joined
[00:29] *** virtualsue left
[00:35] *** colomon joined
[00:46] *** denis_boyun left
[00:54] <skids> r: my @f = (1,2,3); @f.say; @f[1] = 6; my ($a, $b, $c); :($a,$b,$c) := @f[0],@f[1],@f[2]; $b.say; $b = 5; # Should work? Any workarounds?

[00:54] <camelia> rakudo 789db4: OUTPUT«1 2 3␤6␤Cannot assign to a readonly variable or a value␤  in block  at /tmp/3zuvfNAA14:1␤␤»

[00:55] <skids> oh, is rw works.

[01:04] * [Coke] eeeeks, as he is now committed to Frankfurt

[01:05] *** census left
[01:06] *** FROGGS joined
[01:09] <skids> r,std: my $b = 4; my ($a) := $b; $a = 1

[01:09] <skids> hmm.

[01:09] <skids> r: my $b = 4; my ($a) := $b; $a = 1

[01:09] <camelia> rakudo 789db4: OUTPUT«Not enough positional parameters passed; got 0 but expected 1␤  in block  at /tmp/zVdg0kzRvU:1␤␤»

[01:09] <skids> std: my $b = 4; my ($a) := $b; $a = 1

[01:09] <camelia> std 06636e4: OUTPUT«ok 00:00 44m␤»

[01:12] *** benabik joined
[01:14] *** jnap joined
[01:18] <colomon> [Coke]++ lizmat++

[01:20] <[Coke]> is there a gist/wiki some where for arrival/departure times?

[01:22] *** FROGGS left
[01:25] *** _jaldhar is now known as jaldhar

[01:28] *** stevan_ left
[01:29] *** stevan_ joined
[01:47] *** jnap left
[01:54] <dalek> perl6-roast-data: 5ccd09f | coke++ | perl6_pass_rates.csv:

[01:54] <dalek> perl6-roast-data: Eliminate all comment lines.

[01:54] <dalek> perl6-roast-data: 

[01:54] <dalek> perl6-roast-data: Add date, sha1, and comment columns.

[01:54] <dalek> perl6-roast-data: 

[01:54] <dalek> perl6-roast-data: Temporarily lose percentages.

[01:54] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/5ccd09f409

[01:55] <[Coke]> sweet. now https://github.com/coke/perl6-roast-data/blob/master/perl6_pass_rates.csv is searchable and sortable.

[01:55] <[Coke]> (so you can easily, say, show all the "rakudo" results.)

[02:01] *** Mouq left
[02:11] *** Mouq joined
[02:36] *** odoacre_ joined
[02:40] *** Mouq left
[03:01] *** hypolin joined
[03:01] *** hypolin left
[03:15] <lue> Is there any particular reason use of multiple double angles isn't mentioned in S26/"Formatting Codes" ? (like C««@a».lines»»)

[03:17] *** preflex_ joined
[03:17] *** ChanServ sets mode: +v preflex_

[03:18] *** preflex left
[03:18] *** preflex_ is now known as preflex

[03:21] *** FROGGS joined
[03:21] <dalek> perl6-roast-data: b8e6e8e | coke++ | perl6_pass_rates.csv:

[03:21] <dalek> perl6-roast-data: fix some date mixups

[03:21] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/b8e6e8eb36

[03:21] <dalek> perl6-roast-data: f5cf8e5 | coke++ | perl6_pass_rates.csv:

[03:21] <dalek> perl6-roast-data: add "percentage" column

[03:21] <dalek> perl6-roast-data: 

[03:21] <dalek> perl6-roast-data: Remove extraneous quotes

[03:21] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/f5cf8e52c2

[03:22] <diakopter> [Coke]: you've seen this p6 impl? http://hf.64p.org/list/perl6/pvip

[03:23] <dalek> perl6-roast-data: db36980 | coke++ | perl6_pass_rates.csv:

[03:23] <dalek> perl6-roast-data: title new column

[03:23] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/db36980416

[03:23] <[Coke]> diakopter: nope.

[03:25] <[Coke]> if we can build it on the new roaster, and there's a desire, I can add it to the pile.

[03:30] <bonsaikitten> diakopter: does it have any proper homepage?

[03:34] <dalek> perl6-roast-data: 73f72d7 | coke++ | cull:

[03:34] <dalek> perl6-roast-data: make new records match new format

[03:34] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/73f72d78f5

[03:35] <diakopter> bonsaikitten: https://github.com/tokuhirom/pvip

[03:35] <bonsaikitten> right

[03:35] <diakopter> also see https://github.com/tokuhirom/Perl6-PVIP

[03:36] <bonsaikitten> sounds like I have something to play with

[03:36] <[Coke]> github++

[03:36] <bonsaikitten> :)

[03:38] <[Coke]> ok. https://github.com/coke/perl6-roast-data/blob/master/perl6_pass_rates.csv is updated to move all the data into a valid CSV format, now including the %ages. enjoy, feel free to suggest improvements.

[03:39] <[Coke]> also no more icky US dates.

[03:43] <dalek> perl6-roast-data: 7eb58b0 | coke++ | / (8 files):

[03:43] <dalek> perl6-roast-data: rename "rakudo" to "rakudo.parrot"

[03:43] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/7eb58b04d4

[03:44] <[Coke]> and now "rakudo" isn't special, it's rakudo.parrot and rakudo.jvm in the reports.

[03:53] <dalek> perl6-roast-data: 86b4833 | coke++ | README (2 files):

[03:53] <dalek> perl6-roast-data: Change readme to .md

[03:53] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/86b4833ab4

[03:53] <dalek> perl6-roast-data: 56f0ed3 | coke++ | README.md:

[03:53] <dalek> perl6-roast-data: add helper notes for rakudo.jvm/niecza

[03:53] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/56f0ed383c

[04:06] *** odoacre_ left
[04:06] *** odoacre_ joined
[04:29] *** FROGGS left
[04:33] *** mtk left
[04:36] *** colomon left
[04:36] *** FROGGS joined
[04:41] <[Coke]> .tell diakopter pvip isn't quite running perl6, from what I can tell. "./pvip -e "say 3"", e.g. outputs:

[04:41] <yoleaux> [Coke]: I'll pass your message to diakopter.

[04:41] <[Coke]> .tell diakopter  (statements (funcall (ident "say") (args (int 3))))

[04:41] <yoleaux> [Coke]: I'll pass your message to diakopter.

[04:43] <[Coke]> .seen tokuhirom

[04:43] <yoleaux> I saw tokuhirom 21 Jun 2013 08:45Z in #perl6: <tokuhirom> ?

[04:44] <tokuhirom_> ?

[04:44] <[Coke]> .to tokuhirom how do you run a perl6 program in pvip?

[04:44] <yoleaux> [Coke]: I'll pass your message to tokuhirom.

[04:44] <[Coke]> ah, hi.

[04:44] <tokuhirom_> hi

[04:44] <tokuhirom_> It's just a parser and it prints AST in s-expression form.

[04:44] *** craw joined
[04:45] <[Coke]> ah, ok. and there's nothing yet to execute the s-expressions?

[04:45] *** craw left
[04:45] <tokuhirom_> yes,... for now.

[04:45] <[Coke]> ok. when they can, let me know, and I can add pvip to https://github.com/coke/perl6-roast-data

[04:46] <tokuhirom_> cool

[04:46] <tokuhirom_> (and i'm writing transpiler between perl6 to perl5 for next yapc-nasia

[04:46] <tokuhirom_> using pvip.

[04:46] <[Coke]> .to diakopter ah, it's a parser for now - I'll add it to the daily runs when it also executes.

[04:46] <yoleaux> [Coke]: I'll pass your message to diakopter.

[04:46] *** mtk joined
[04:47] <[Coke]> tokuhirom_: cool!

[04:48] <tokuhirom_> It passed only 776 test cases XD

[04:53] * TimToady wonders how many tests viv -5 would pass...

[04:53] <diakopter> :)

[04:53] <yoleaux> 04:41Z <[Coke]> diakopter: pvip isn't quite running perl6, from what I can tell. "./pvip -e "say 3"", e.g. outputs:

[04:53] <yoleaux> 04:41Z <[Coke]> diakopter: (statements (funcall (ident "say") (args (int 3))))

[04:53] <yoleaux> 04:47Z <[Coke]> diakopter: ah, it's a parser for now - I'll add it to the daily runs when it also executes.

[04:54] <diakopter> TimToady: transpoiler?

[04:57] <diakopter> tokuhirom_: I'm interested in writing a transpiler the *other* direction...

[04:57] <diakopter> *interested in (someone else) writing...

[04:58] <tokuhirom_> My idea is, writing transpiler with some xs stuff like autobox...

[04:59] * tokuhirom_ afk

[04:59] <diakopter> tokuhirom_: I need p5->p6

[04:59] <diakopter> afk tew &

[05:06] *** SamuraiJack_ joined
[05:07] <tokuhirom_> ah, right.

[05:07] <[Coke]> zzz

[05:33] *** abnorman left
[06:10] *** zby_home joined
[06:11] *** zby_home left
[06:19] *** sqirrel joined
[06:21] *** dayangkun_ joined
[06:21] *** dayangkun left
[06:26] *** atroxaper joined
[06:32] *** dayangkun_ left
[06:34] *** domidumont joined
[06:36] *** domidumont left
[06:49] *** kaleem joined
[06:53] *** BenGoldberg left
[06:57] *** domidumont joined
[07:00] *** zakharyas joined
[07:01] *** domidumont left
[07:02] *** domidumont joined
[07:07] *** fhelmberger joined
[07:09] *** berekuk joined
[07:12] *** sqirrel left
[07:17] *** berekuk left
[07:18] *** berekuk joined
[07:29] <lizmat> good *, #perl6!

[07:32] *** brrt joined
[07:34] *** mstwu001 joined
[07:40] *** pdcawley joined
[07:43] *** daxim joined
[07:52] *** berekuk left
[07:58] *** mstwu001 left
[08:01] <FROGGS> lizmat: hi

[08:02] <lizmat> FROGGS o/

[08:03] *** dmol joined
[08:03] *** wtw joined
[08:03] *** kaleem left
[08:04] *** rindolf joined
[08:06] *** domidumont left
[08:06] *** kaleem joined
[08:12] <hoelzro> ahoy lizmat 

[08:15] *** fglock joined
[08:15] <fglock> hi

[08:21] <moritz> \o FROGGS, lizmat, hoelzro, fglock, *

[08:22] <FROGGS> hi hoelzro, hi fglock 

[08:22] <FROGGS> o/

[08:22] <FROGGS> :o)

[08:28] *** salv0 joined
[08:33] *** berekuk joined
[08:34] <hoelzro> holy crap

[08:34] <hoelzro> I just started up an interactive perl6 with 2013.08

[08:34] <hoelzro> it got faaaaaast

[08:34] <hoelzro> congrats!

[08:34] <hoelzro> and good work =)

[08:35] *** berekuk left
[08:36] <FROGGS> hoelzro: and we expect that it won't get slower in future :o)

[08:36] <hoelzro> \o/

[08:39] *** pmurias joined
[08:39] <pmurias> fglock: hi

[08:42] *** dakkar joined
[08:47] <fglock> hi pmurias

[09:11] *** sqirrel joined
[09:15] <timotimo> lue: the multi-angle-brackets is one of the first things the section on formatting codes mentions

[09:15] <timotimo> "All Pod formatting codes consist of a single capital letter followed immediately by a set of angle brackets. The brackets contain the text or data to which the formatting code applies. You can use a set of single angles (<...>), a set of double angles («...»), or multiple single-angles (<<<...>>>).

[09:18] <daxim> ‹›〈〉

[09:23] *** berekuk joined
[09:30] *** berekuk left
[09:36] <arnsholt> I really like the French name for double angles. Guillemets. ^_^

[09:36] <yoleaux> 26 Aug 2013 02:36Z <diakopter> arnsholt: dyncall is now compiling in the dyncall2 branch.. want to stub in the dyncall reprs and ops?

[09:42] *** berekuk joined
[09:46] <grondilu> I think "guillemet" is rather the name for double quotes (")

[09:48] * grondilu is french fwiw

[09:48] <arnsholt> It is? I've always heard it used about the double-angle things

[09:48] <grondilu> that's a common mistake, iirc

[09:49] <daxim> it means something different in english (and german, and ………)

[09:49] <arnsholt> Oh, neat. French Wikipedia calls both double quotes and double angles guillemets

[09:50] <grondilu> I'm totally wrong.  Sorry.  https://fr.wikipedia.org/wiki/Guillemet

[09:50] <arnsholt> " is guillemet anglais, and « is guillemet français

[09:50] <grondilu> indeed, I was the one making the common mistake :)

[09:50] <arnsholt> Dactylographie! ^_^

[09:50] * arnsholt learnt a new word

[09:50] <hoelzro> lizmat: what's the schedule for the upcoming workshop?

[09:50] * hoelzro guesses fingerpainting

[09:51] <arnsholt> hoelzro: Typing, actually =)

[09:51] <hoelzro> close enough =)

[09:51] <timotimo> fingertyping or typingpainting?

[10:11] *** berekuk left
[10:14] *** sqirrel left
[10:15] *** colomon joined
[10:18] *** berekuk joined
[10:22] *** berekuk left
[10:23] <lizmat> hoelzro: you mean more schedule than there was in the mail on perl6-compiler or in my blog post ?

[10:23] <hoelzro> lizmat: I mean what time does it start/end

[10:23] <hoelzro> just so I have an idea when I should fly into/out of Frankfurt

[10:23] <lizmat> ah, good question

[10:24] <lizmat> well, I would think it best if you arrive Friday late afternoon, early evening

[10:24] <lizmat> so we can start around 9am 

[10:24] <lizmat> accommodation has been booked for 3 nights

[10:25] <FROGGS> uhh, it is still not september yet :o(

[10:25] *** berekuk joined
[10:25] <dalek> rakudo/nom: 90cfaa0 | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[10:25] <dalek> rakudo/nom: Make sure Bag|Set.delete don't exist (Any.delete vivified them)

[10:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/90cfaa0c64

[10:26] <timotimo> oh, i had booked the accomodation for saturday and sunday, so it'll be a good thing if i can get into the hotel lizmat++ booked

[10:26] <colomon> lizmat++

[10:26] *** berekuk left
[10:27] <hoelzro> lizmat: alright, sounds good

[10:27] <hoelzro> should I expect to leave Monday morning, then?

[10:28] <lizmat> accommodation has been booked for checkout on Mon, so you have that option

[10:29] <hoelzro> what time to you think we'll be done on Sunday?

[10:29] <tadzik> I leave on monday too

[10:29] <lizmat> good question: someone commented on the program that it was a good program with only one problem in it

[10:29] <lizmat> the problem could be fixed by s/Day/Week/

[10:30] <lizmat> so, I think we will finish rather later than earlier

[10:31] <FROGGS> what problem?

[10:31] <hoelzro> ok, I figured as much

[10:31] <hoelzro> just trying to get my flight details figured out =)

[10:32] *** berekuk joined
[10:33] *** markov joined
[10:37] <diakopter> hunh; nodejs co-opted /usr/bin/node on ubuntu

[10:39] *** brrt left
[10:40] <lizmat> r: my %h; say \%h.WHAT; say \(%h).WHAT   # expecting (Capture) (Capture)

[10:40] <camelia> rakudo 789db4: OUTPUT«().hash␤(Capture)␤»

[10:40] <colomon> ().hash ??

[10:40] <timotimo> weird.

[10:40] <colomon> oh!

[10:40] <tadzik> precedence?

[10:40] <colomon> that's what I'm thinking

[10:41] <timotimo> so it's (\%h).WHAT?

[10:41] <colomon> r: my %h; say (\%h).WHAT

[10:41] <camelia> rakudo 789db4: OUTPUT«(Capture)␤»

[10:41] <timotimo> r: my %h; say \(%h.WHAT)

[10:41] <colomon> yeah, precedence

[10:41] <camelia> rakudo 789db4: OUTPUT«(Hash)␤»

[10:42] <lizmat> guess I need to fix some tests then

[10:43] <moritz> fwiw I don't seem the point of having prefix \ anymore

[10:43] <moritz> most of what prefix \ was meant to do is now item context

[10:44] <moritz> and I haven't had a single use case for prefix \ (except in signatures, but that's something else)

[10:47] <lizmat> moritz: this is about S03:195, right ?

[10:47] <synopsebot> Link: http://perlcabal.org/syn/S03.html#line_195

[10:47] <diakopter> r: say \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\9

[10:47] <camelia> rakudo 789db4: OUTPUT«9␤»

[10:48] * lizmat is just trying to make sense of t/spec/S02-types/autovivification.t

[10:49] <moritz> lizmat: yes

[10:49] <moritz> lizmat: and maybe it's in fact useful, and I just haven't had that use case myself yet

[10:50] *** sqirrel joined
[10:50] <moritz> lizmat: you mean the "capturing autovivifies" test?

[10:50] <moritz> I'd nuke that

[10:50] <lizmat> yes

[10:51] <lizmat> ok, consider it nuked

[10:51] <moritz> the spec is pretty clear that autovivication should only happen on write accesses

[10:51] <moritz> and creating a capture isn't a write access on the original container

[10:51] <lizmat> well, then we need to test it *doesn't* auto-vivify

[10:51] <moritz> +1

[10:53] <moritz> lizmat++ # going through the tests

[11:08] <pmurias> diakopter: re /usr/bin/node that's were node.js is supposed to be?

[11:08] <diakopter> not always, I thought

[11:10] <pmurias> not on debian

[11:10] <pmurias> but that's silly

[11:10] <moritz> isn't that what $PATH is for?

[11:11] <pmurias> no

[11:11] <pmurias> ;)

[11:12] *** benabik left
[11:14] *** brrt joined
[11:14] *** brrt left
[11:16] *** pernatiy left
[11:17] *** rindolf left
[11:18] *** hummeleBop left
[11:19] *** hummeleBop joined
[11:22] <colomon> module smoke test still broken….

[11:22] <FROGGS> so, you cant load modules at all, right?

[11:23] <FROGGS> or was it something panda-related?

[11:23] <colomon> I think the problem is that Panda can't load modules.

[11:23] <colomon> it's dying during pandabrew

[11:23] <dalek> roast: 478c26a | (Elizabeth Mattijsen)++ | S02-types/autovivification.t:

[11:23] <dalek> roast: Add some more auto-vivification tests

[11:23] <dalek> roast: review: https://github.com/perl6/roast/commit/478c26ae60

[11:24] <colomon> ===SORRY!===

[11:24] <colomon> Could not find Shell::Command in any of: /home/smoker/rakudo/install/lib/parrot/5.5.0-devel/languages/perl6/site/lib, /home/smoker/rakudo/install/lib/parrot/5.5.0-devel/languages/perl6/vendor/lib, /home/smoker/rakudo/install/lib/parrot/5.5.0-devel/languages/perl6/lib, /home/smoker/.perl6/2013.08-15-g789db4f/lib

[11:27] *** atroxaper left
[11:29] <colomon> yeah, that's what happens when you try to bootstrap panda

[11:30] <colomon> has the ENV stuff been cleaned up, or is that still the likely culprit

[11:32] <lizmat> I see one ENV test still failing on parakudo

[11:34] *** sqirrel left
[11:35] <FROGGS> env is not working right yet AFAIK

[11:39] *** lue left
[11:41] *** berekuk left
[11:42] *** berekuk joined
[11:45] * grondilu was trying to write a grammar for Lambda-calculus, and encountered a behavior he can't explain:  https://gist.github.com/grondilu/6352516

[11:46] <grondilu> shouldn't rule { <foo> | <bar> } always be the same as rule { <bar> | <foo> }?

[11:48] <GlitchMr> grondilu: I don't think so. What if <foo> is ('a'), and <bar> is ('a').

[11:49] *** mtj_ joined
[11:49] <grondilu> well, I mean at least they should either both match, or both fail.  Not one matching and not the other one.

[11:50] <grondilu> '|' is not supposed to have a sequential semantics, is it?

[11:51] <FROGGS> as I understand it, if on branch of an alternation started to match successfully, it stays in that branch

[11:51] <FROGGS> and I think you can let it try again using backtracking

[11:51] <FROGGS> grondilu: || is sequential

[11:51] <GlitchMr> On sidenote, I tried your code using Peg.js, and I also get fail when I swap application and variable.

[11:52] <GlitchMr> https://gist.github.com/GlitchMr/6352572

[11:52] <GlitchMr> http://pegjs.majda.cz/online

[11:52] <FROGGS> s/on branch/one branch/

[11:53] *** lue joined
[11:53] <GlitchMr> It fails with: "Line 1, column 5: Expected [0-9] but " " found."

[11:55] <dalek> Perlito: fd628c9 | (Flavio S. Glock)++ | / (2 files):

[11:55] <dalek> Perlito: Perlito5 - perl5 - use simple eval()

[11:55] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/fd628c986d

[11:56] <GlitchMr> Considering Perl 6 rules are PEG grammars (at least I think so), it fails.

[11:56] <moritz> p6 rules are partially modeled after PEG

[11:56] <moritz> but they aren't the same

[11:58] <FROGGS> grondilu: can you try that please? https://gist.github.com/FROGGS/6352618

[12:00] <moritz> [Coke], FROGGS, tadzik, pmurias: the failure of panda to bootstrap seems to be caused by the broken mechanism to pass %*ENV to subprocesses

[12:00] <FROGGS> okay

[12:00] <moritz> panda modifies %*ENV<PERL6LIB> but the subshell it starts doesn't see it

[12:00] <grondilu> r: https://gist.github.com/FROGGS/6352618

[12:00] <camelia> rakudo 90cfaa: OUTPUT«#<failed match>␤»

[12:00] <GlitchMr>           if (result0 === null) {

[12:00] <GlitchMr>             result0 = parse_var();

[12:00] <GlitchMr>             if (result0 === null) {

[12:00] <GlitchMr>               result0 = parse_appl();

[12:00] <GlitchMr>             }

[12:00] <GlitchMr>           }

[12:01] <GlitchMr> I assume something like that happens.

[12:03] <moritz> grondilu: note that 'application' is a rule, not a token, so its whitespace terminates LTM

[12:05] <grondilu> yeah, I should have defined it as a token, I guess.  But it still fails when variable precedes application in the alternation of expression.

[12:06] <FROGGS> now we'd need Grammar::Debugger and a working panda :/

[12:06] <moritz> just use the last star release, it has both.

[12:10] <FROGGS> true

[12:10] <FROGGS> (that was an you-we fwiw :o)

[12:11] *** skids left
[12:13] *** pernatiy joined
[12:17] *** berekuk left
[12:20] *** dmol left
[12:22] *** dmol joined
[12:22] *** berekuk joined
[12:24] *** berekuk left
[12:25] *** berekuk joined
[12:26] <pmurias> fglock: what's the current plan with Perlito?

[12:26] <pmurias> fglock: I have noticed there's a new XS backend

[12:30] *** Woodi joined
[12:31] <dalek> Perlito: b38b950 | (Flavio S. Glock)++ | / (2 files):

[12:31] <dalek> Perlito: Perlito5 - perl5 - use less code

[12:31] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/b38b950b11

[12:32] <fglock> pmurias: I'm looking at ways to add a vm

[12:32] <fglock> just experimenting some ideas

[12:33] <pmurias> add a vm?

[12:34] <fglock> compiling to low-level code - machine code, C, or jvm

[12:34] *** kbaker joined
[12:35] *** domidumont joined
[12:38] <FROGGS> in a year I might suggest moarvm bytecode

[12:38] <FROGGS> but I dunno what to suggest now

[12:39] *** jnap joined
[12:40] <dalek> rakudo/nom: 8a6a949 | (Elizabeth Mattijsen)++ | src/core/Any.pm:

[12:40] <dalek> rakudo/nom: Make %h<a><b> := "foo" work; alas, %h<a><b> := my $b doesn't yet

[12:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8a6a949ec2

[12:40] <dalek> rakudo/nom: 1145e1c | (Elizabeth Mattijsen)++ | src/core/Any.pm:

[12:40] <dalek> rakudo/nom: Fix error message fail

[12:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1145e1c7e8

[12:40] *** sqirrel joined
[12:41] <lizmat> fglock: MoarVM *is* intended to have all the features needed to run Perl 6

[12:41] <lizmat> OTOH, it is also based on NQP, which Perlito of course is not

[12:41] <lizmat> so there will be a huge API mismatch, I would think

[12:42] <JimmyZ> lizmat: based on NQP?

[12:43] <JimmyZ> I don't think so

[12:43] *** berekuk left
[12:43] <moritz> it's made for nqp and rakudo, but not based on it

[12:43] <FROGGS> it is better to be based on nqp when you want to target moarvm, I guess that is what lizmat++ meant

[12:44] *** berekuk joined
[12:44] <JimmyZ> If you have an ast, then you don't need NQP at all

[12:45] <FROGGS> fglock: maybe I can get an Perl5 module working that accepts your bytecode so I can run it under v5 on rakudo/nqp :P

[12:48] <pmurias> I doubt creating QAST in perl5 code would be a very big problem

[12:49] <JimmyZ> I'm not saying QAST :)

[12:49] * lizmat is glad to be proven wrong

[12:51] *** TimK1 joined
[12:52] <pmurias> but targeting QAST would be much more similiar to targeting a high level language then a lowlevel VM

[12:53] <FROGGS> lizmat: you could dome to that workshop *g*

[12:54] <FROGGS> come*

[12:54] <lizmat> you know, I just might  :-)

[12:54] *** rindolf joined
[12:55] <JimmyZ> Targeting QAST could get a compiling time pain

[12:55] <JimmyZ> ;)

[12:56] <FROGGS> that is the current problem, right?

[12:56] <FROGGS> TEST=42 perl6 -e 'say %*ENV<TEST>; %*ENV<TEST> = 1; say %*ENV<TEST>; shell(q{perl6 -e "say %*ENV<TEST>"})' # 42 1 42

[12:56] <JimmyZ> that's why niecza was borned

[12:59] <pmurias> FROGGS: yes, I should get back to working on the windows version of shell3

[13:01] <pmurias> FROGGS: how much work is it to get nqp to compile on windows?

[13:04] <FROGGS> pmurias: that was linux fwiw

[13:06] <FROGGS> pmurias: it is quite a bit of work to everything in place (activeperl, msvc express, git) and then it compiles painfully slow

[13:06] <FROGGS> but I must say that my experience is with winxp only, and there it took like 5 hours to compile parrot, nqp and rakudo

[13:06] <FROGGS> it might (should) be better on windows 7

[13:06] <pmurias> doesn't seem like much fun

[13:07] <FROGGS> true, so my offer still stands

[13:07] <FROGGS> and btw, I'm going to debug it myself now, maybe this is quicker since I an test uncommitted stuff

[13:08] *** jaldhar left
[13:08] <FROGGS> ohh, my linux box does not have the shell3 branch...

[13:08] * FROGGS rebuilds now

[13:08] <pmurias> FROGGS: re debug, I have figured out what's the problem

[13:09] <FROGGS> cool

[13:09] <FROGGS> do tell

[13:11] <pmurias> the problem with the shell3 branch on windows is that I'm passing the env in a wrong format

[13:12] <pmurias> the winapi expects a big buffer with null ended strings ending with a null, rather then a null ending array of pointers to null ending strings

[13:12] <FROGGS> ahh, okay

[13:12] <dalek> rakudo-js: 16d3c4f | (Pawel Murias)++ | / (2 files):

[13:12] <dalek> rakudo-js: Add missing file.

[13:12] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/16d3c4fbc2

[13:12] <dalek> rakudo-js: 18f03c2 | (Pawel Murias)++ | / (4 files):

[13:12] <dalek> rakudo-js: Pass a processed version of nqp/t/qregex/rx_basic.

[13:12] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/18f03c29e2

[13:12] <lizmat> r: sub f(Int $x) {}; say f(Nil)  # would expect (Int) rather than a bomb, so is this a rakudobug ?

[13:12] <camelia> rakudo 90cfaa: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'f' will never work with argument types (Nil) (lines 1, 1)␤    Expected: :(Int $x)␤»

[13:13] <lizmat> r: sub f(Int $x) {}; my $a is default(Nil); say f($a) # like this

[13:13] <camelia> rakudo 90cfaa: OUTPUT«Nominal type check failed for parameter '$x'; expected Int but got Any instead␤  in sub f at /tmp/ttbGCeDhvf:1␤  in block  at /tmp/ttbGCeDhvf:1␤␤»

[13:13] <lizmat> huh?

[13:13] <FROGGS> O.o

[13:14] <lizmat> r: sub f(Int $x) {}; my $a is default(Nil); say $a; say f($a) # like this

[13:14] <FROGGS> r: sub f(Int $x) {}; my $a is default(Nil); say $a

[13:14] <camelia> rakudo 90cfaa: OUTPUT«(Any)␤Nominal type check failed for parameter '$x'; expected Int but got Any instead␤  in sub f at /tmp/HsCskdrdSC:1␤  in block  at /tmp/HsCskdrdSC:1␤␤»

[13:14] <camelia> rakudo 90cfaa: OUTPUT«(Any)␤»

[13:14] *** BenGoldberg joined
[13:14] <BenGoldberg> Good morning

[13:14] <FROGGS> lizmat: it looks like you can't have Nil as default

[13:14] <[Coke]> lizmat++

[13:14] *** ajr joined
[13:14] <FROGGS> hi BenGoldberg 

[13:15] <lizmat> r: say $/.VAR.default

[13:15] <camelia> rakudo 1145e1: OUTPUT«Nil␤»

[13:15] <lizmat> yes you can

[13:15] *** ajr is now known as Guest88001

[13:15] <[Coke]> r: $/.VAR.default = 3;

[13:15] <camelia> rakudo 1145e1: OUTPUT«Cannot modify an immutable value␤  in block  at /tmp/BXyXqSLNFz:1␤␤»

[13:15] *** PacoAir joined
[13:16] <lizmat> r: my $a is default(Nil); say $a; $a=Nil; say $a # something wrong with initialization

[13:16] <camelia> rakudo 1145e1: OUTPUT«(Any)␤Nil␤»

[13:16] <FROGGS> r: my $a is default(Nil); say $a.VAR.default

[13:16] <camelia> rakudo 1145e1: OUTPUT«Nil␤»

[13:17] <lizmat> r: say Nil ~~ Scalar

[13:17] <camelia> rakudo 1145e1: OUTPUT«False␤»

[13:17] <lizmat> the problem

[13:19] *** Guest88001 is now known as ajr_

[13:21] <moritz> why is that (a|the) problem?

[13:22] <moritz> r: say 42 ~~ Scalar

[13:22] <camelia> rakudo 1145e1: OUTPUT«False␤»

[13:22] *** iSlug joined
[13:22] <moritz> does that mean 42 isn't a valid default value either?

[13:22] <lizmat> in src/core/Variable: $var = $default if nqp::istype($what, Scalar)

[13:23] <lizmat> grrr… thinko

[13:24] * moritz hopes the $what there is the scalar container, not the default

[13:25] <lizmat> the $what is the type of container

[13:28] <FROGGS> pmurias: is that the expected behaviour on linux? TEST=42 perl6 -e 'say %*ENV<TEST>; %*ENV<TEST> = 1; say %*ENV<TEST>; shell(q{perl6 -e "say %*ENV<TEST>"})' # 42 1 42

[13:28] <FROGGS> I'd expect 42 1 1

[13:28] <[Coke]> lizmat: is there a #channel for the workshop?

[13:28] <lizmat> eh, no

[13:28] <lizmat> do you think we need one ?

[13:29] <[Coke]> Iunno.

[13:29] <[Coke]> FROGGS: your expectation matches mine, and the test suite (which is still failing that test, IIRC)

[13:29] <FROGGS> [Coke]: k, thanks

[13:31] *** berekuk left
[13:32] *** lowpro30 joined
[13:33] *** sqirrel left
[13:38] <TimK1> p6: say (sub (--> Array[Int]) {return my Int @a = 3, 4, 5;})();

[13:38] <camelia> rakudo 1145e1: OUTPUT«Type check failed for return value; expected 'Array[Int]' but got 'Array[Int]'␤  in sub  at /tmp/UyRhPeA_1Y:1␤  in block  at /tmp/UyRhPeA_1Y:1␤␤»

[13:38] <camelia> ..niecza v24-88-g1f87209: OUTPUT«Potential difficulties:␤  @a is declared but not used at /tmp/RtuJskSR3v line 1:␤------> [32may (sub (--> Array[Int]) {return my Int [33m⏏[31m@a = 3, 4, 5;})();[0m␤␤3 4 5␤»

[13:38] <lizmat> known probkem

[13:39] <dalek> rakudo/nom: 386a090 | (Elizabeth Mattijsen)++ | src/core/Variable.pm:

[13:39] <dalek> rakudo/nom: It's always in the timing of things: fix "is default(Nil)"

[13:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/386a090af0

[13:40] <TimK1> Yeah, thought so.

[13:40] <tadzik> I read that as "krown problem". I'm now trying to think of a Norway joke

[13:41] <tadzik> "Did you know Norway doesn't use Euro?" "Yeah, it's a krown problem"

[13:41] *** lue left
[13:41] <FROGGS> :o)

[13:43] *** skids joined
[13:43] * lizmat refrains from running up the Preikestolen and jumping off

[13:43] *** btyler joined
[13:44] <arnsholt> Hee hee! \D

[13:45] *** SmokeMac_ joined
[13:47] *** SmokeMachine left
[13:47] *** berekuk joined
[13:48] <lizmat> TimToady: S32/Containers:1036 mentions methods "from" and "to" for Range

[13:48] <lizmat> there are some tests for it, indicating they're really the same as min/max

[13:48] *** kbaker left
[13:49] <lizmat> but they're currently not implemented

[13:49] <lizmat> Q: should they be implemented, or should "from" and "to" be removd from the spec

[13:50] <lizmat> I would suggest eradicating from the spec, as they don't have any additional value to "min" and "max"

[13:51] <pmurias> FROGGS: are you working on the shell3 branch? (I'm planning to work on it now)

[13:51] *** kaleem left
[13:51] *** kbaker joined
[13:52] <FROGGS> pmurias: just started to print a bit debug output...

[13:52] <FROGGS> (on linux)

[13:52] *** colomon left
[13:52] *** lue joined
[13:53] *** lowpro30_ joined
[13:56] *** lowpro30 left
[13:57] <pmurias> FROGGS: on linux when using the shell3 branch you would need to remove the #ifdef'ed for parrot code in run

[14:00] <dalek> perl6-roast-data: e264650 | coke++ | README.md:

[14:00] <dalek> perl6-roast-data: more info

[14:00] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/e264650d01

[14:01] <[Coke]> pmurias: ah, the child env stuff is in a branch?

[14:02] <[Coke]> I thought I saw commits go by earlier, that would explain why it didn't work in mainline, though.

[14:03] <pmurias> [Coke]: the child env stuff only works on linux atm, and it needs some changes to rakudo

[14:03] <lizmat> r: my num $a = 1; $a = Nil  # should this fail, as some tests seem to indicate, or just set to 0 like it does now;

[14:03] <camelia> rakudo 1145e1:  ( no output )

[14:04] <lizmat> r: my num $a = 1; say $a; $a = Nil; say $a  # should this fail, as some tests seem to indicate, or just set to 0 like it does now;

[14:04] <camelia> rakudo 1145e1: OUTPUT«1␤0␤»

[14:04] <[Coke]> it has been days since we had a clean run for any implementation, and that was pugs.

[14:04] <[Coke]> https://github.com/coke/perl6-roast-data/blob/master/perl6_pass_rates.csv#L31

[14:05] <[Coke]> pmurias: whatever changes were made in nom are breaking the test that was working:

[14:05] <[Coke]> https://github.com/coke/perl6-roast-data/blob/master/rakudo.parrot_summary.out#L3950

[14:05] <[Coke]> er, the change in  nom there was the update to the nqp revision.

[14:06] <geekosaur> lizmat, it was recently re-specced to return variables to their defaults. tests are probably lagging

[14:06] <[Coke]> anyone working on these failures:

[14:06] <[Coke]> S32-io/io-spec-unix.t aborted 1 test(s)

[14:06] <[Coke]> S32-io/io-spec-win.t aborted 1 test(s)

[14:06] <FROGGS> pmurias: k

[14:07] <lizmat> [Coke]: both are clean for me on parakudo on OSX

[14:08] <dalek> roast: e4b9e51 | (Elizabeth Mattijsen)++ | S02-types/ (6 files):

[14:08] <dalek> roast: Some more fudges / unfudges / skip -> todo changes

[14:08] <dalek> roast: review: https://github.com/perl6/roast/commit/e4b9e518bd

[14:14] *** benabik joined
[14:16] <lizmat> geekosaur: figured as much

[14:18] <skids> std: multi sub fn(buf8|blob8 $g) { 1; };

[14:18] <camelia> std 06636e4: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse signature at /tmp/Oa546ipsVM line 1:␤------> [32mmulti sub fn[33m⏏[31m(buf8|blob8 $g) { 1; };[0m␤Couldn't find final ')'; gave up at /tmp/Oa546ipsVM line 1:␤------> [32mmulti sub fn(buf8|blob8 [33m⏏[31m$g) { 1; };…

[14:18] <skids> std: multi sub fn((buf8|blob8) $g) { 1; };

[14:18] <camelia> std 06636e4: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse signature at /tmp/QuGDQr1P9u line 1:␤------> [32mmulti sub fn[33m⏏[31m((buf8|blob8) $g) { 1; };[0m␤Couldn't find final ')'; gave up at /tmp/QuGDQr1P9u line 1:␤------> [32mmulti sub fn((buf8|blob8) [33m⏏[31m$g) { 1…

[14:25] *** berekuk left
[14:26] <FROGGS> when I use binding it works? TEST=42 perl6 -e 'say %*ENV<TEST>; %*ENV<TEST> := 1; say %*ENV<TEST>; shell(q{perl6 -e "say %*ENV<TEST>"})' # 42 1 1

[14:26] <FROGGS> is that how it is meant to be?

[14:28] *** rindolf left
[14:31] *** sqirrel joined
[14:33] <FROGGS> no, that is totally weird

[14:34] <FROGGS> when I do the thing above using the unpatched rakudo, I get 42 42 42

[14:34] <FROGGS> r: say %*ENV<TERM>

[14:34] <camelia> rakudo 386a09: OUTPUT«screen␤»

[14:34] <pmurias> FROGGS: on the shell3 brnach with patched rakudo?

[14:34] <FROGGS> on shell3 with unpatched rakudo

[14:34] <FROGGS> r: say %*ENV<TERM>; %*ENV<TERM> = 1; say %*ENV<TERM>

[14:35] <camelia> rakudo 386a09: OUTPUT«screen␤1␤»

[14:35] <FROGGS> r: say %*ENV<TERM>; %*ENV<TERM> := 1; say %*ENV<TERM>

[14:35] <camelia> rakudo 386a09: OUTPUT«screen␤screen␤»

[14:35] <FROGGS> see

[14:35] <FROGGS> that is what I call "weird"

[14:36] <pmurias> it's not supposed to do anything sane currently

[14:36] <FROGGS> star: say %*ENV<TERM>; %*ENV<TERM> = 1; say %*ENV<TERM>

[14:36] <camelia> star 2013.02: OUTPUT«screen␤1␤»

[14:37] <FROGGS> star: say %*ENV<TERM>; %*ENV<TERM> := 1; say %*ENV<TERM>

[14:37] <camelia> star 2013.02: OUTPUT«screen␤screen␤»

[14:37] <pmurias> so it's a waste of time examining an unpatched rakudo which expects a crazy parrot pmc from getenvhash and gets a hash

[14:38] <FROGGS> well, I just wondered what programs like panda and our testsuite depend on

[14:38] *** bluescreen10 joined
[14:40] *** colomon joined
[14:40] <FROGGS> @all: should assignment and binding to %*ENV<something> should do different things?

[14:41] <FROGGS> lizmat / moritz / masak / jnthn ?

[14:41] <moritz> either one should die, or both should do the same

[14:42] <lizmat> FROGGS: I'm not sure anymore, TimToady seemed to be in two minds about that

[14:42] <FROGGS> moritz: I am thinking of %*ENV of just a regular hash, with no sideeffects (accept that it is being passed to subprocesses via shell())

[14:43] *** berekuk joined
[14:43] <FROGGS> okay, so I think I know now what I want

[14:44] <lizmat> and %?ENV would be the environment under which compiled

[14:44] <lizmat> and PROCESS::<%ENV> would be the immutable ENV of the process ?

[14:44] *** berekuk left
[14:45] <dalek> nqp/shell3: 257f172 | (Pawel Murias)++ | src/vm/parrot/ops/nqp.ops:

[14:45] <dalek> nqp/shell3: Attempt at corretly passing the env variables on windows.

[14:45] <dalek> nqp/shell3: review: https://github.com/perl6/nqp/commit/257f172983

[14:45] <pmurias> FROGGS: ^^ could you try this commit?

[14:45] <FROGGS> sure

[14:45] <timotimo> oh, interesting idea to have the environment available separately that was in effect when the module was compiled

[14:47] <FROGGS> yeah, I like %?ENV, but I no opinion on PROCESS::<%ENV>

[14:47] <timotimo> is the COMPILING pseudopackage for that? i suppose that's for while it's being compiled rather than being kept around after compilation has finished

[14:51] *** gdey joined
[14:53] <pmurias> FROGGS: try = run the nopaste 

[14:53] *** markov left
[14:54] <FROGGS> will do when it finished compiling

[14:54] <FROGGS> which takes about eight minutes (for rakudo)

[14:54] <lizmat> is there any reason to keep PIR code around, if there is an NQP equivalent that also works under Parrot ?

[14:54] <TimToady> lizmat: from/to are fossils from when we allowed :by(-1), and the from/to could be reversed from min/max, so from/to should be removed

[14:54] <dalek> nqp/shell3: dd3c146 | (Pawel Murias)++ | src/vm/parrot/ops/nqp.ops:

[14:54] <dalek> nqp/shell3: Use real \0

[14:54] <dalek> nqp/shell3: review: https://github.com/perl6/nqp/commit/dd3c146333

[14:54] <lizmat> TimToady: reading the chainsaw

[14:54] <lizmat> readying

[14:54] <lizmat> :-)

[14:55] *** kaare_ joined
[14:55] <pmurias> FROGGS: the new commit is better

[14:55] <pmurias> FROGGS: don't build rakudo, just build nqp

[14:56] <pmurias> FROGGS: the %ENV won't work for rakudo unless the #ifdef'ed code is removed

[14:56] <[Coke]> lizmat: oh, I get many more failures on OSX - those fail for me on feather.

[14:56] *** markov joined
[14:56] <[Coke]> er... that's not feather, that's diakopter's test machine (still linux)

[14:56] <dalek> specs: bdec1f7 | (Elizabeth Mattijsen)++ | S32-setting-library/Containers.pod:

[14:56] <dalek> specs: Bring the spec of Range in sync with the implementation

[14:56] <dalek> specs: review: https://github.com/perl6/specs/commit/bdec1f7c69

[14:56] <pmurias> lizmat: re PIR code, where is it?

[14:57] <lizmat> src/core/Range.pm

[14:57] <lizmat> spectesting its removal now

[14:57] <colomon> shouldn't we decide whether we're going to use - or _ to separate words in core method names, and stick with it?

[14:58] <FROGGS> pmurias: I removed the #ifdef fwiw, but testing nqp only is better of course

[14:59] <lizmat> [Coke]: must have done at least 5 spectest today already, no unexpected failures

[14:59] <lizmat> *spectests

[15:00] <dalek> specs: 850de3f | (Konrad Borowski)++ | S32-setting-library/Containers.pod:

[15:00] <dalek> specs: bounds returns Parcel, not List

[15:00] <dalek> specs: review: https://github.com/perl6/specs/commit/850de3fb29

[15:00] <TimToady> PROCESS::<%ENV> is immutable; if an interpreter started under, say, apache, wants to modify %ENV globally, it should copy it into GLOBAL so that it is not shared by other interpreters, or it should do 'temp %*ENV;' around any scope it wishes to have a mutable environment

[15:01] <TimToady> a temp at the top of the mainline code would be roughly equivalent to copying into GLOBAL

[15:01] <lizmat> GlitchMr: I was just changing the implementation of Range.bounds to be a List  :-(

[15:01] <pmurias> FROGGS: http://pastie.org/8270977 - the debugging pastie

[15:01] <GlitchMr> sorry

[15:01] <GlitchMr> I'm going to revert it.

[15:02] <TimToady> I suppose if we're tracking CWD separately, we have to merge that into ENV at the last moment before spawning

[15:02] <lizmat> GlitchMr: I'm not saying that is needed

[15:02] <lizmat> I'm just wondering what would be the best: Range.bounds to return a Parcel, or a List

[15:02] *** TimK1 left
[15:03] <GlitchMr> Well, I think Parcel makes sense. It's just pair of values.

[15:03] <GlitchMr> (but not actual pair)

[15:03] <lizmat> yeah, but .bounds.key wouldn't make sense, .bounds[0], would, no?

[15:03] *** berekuk joined
[15:04] <grondilu> rn: say 42.REPR

[15:04] <camelia> niecza v24-88-g1f87209: OUTPUT«Unhandled exception: Unable to resolve method REPR in type Int␤  at /tmp/mCnNDx5cl1 line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4579 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4580 (module-CORE @ 576) ␤  at /home/p…

[15:04] <camelia> ..rakudo 386a09: OUTPUT«P6opaque␤»

[15:04] <grondilu> what's REPR exactly?  Is it rakudo specific?

[15:05] <GlitchMr> Well, for me, Parcel makes sense.

[15:05] <GlitchMr> It doesn't make sense, to push element to bounds, for example.

[15:05] *** hummeleBop left
[15:06] <lizmat> r: say (1,2).Parcel[0]

[15:06] <camelia> rakudo 386a09: OUTPUT«1␤»

[15:06] <GlitchMr> List, I think, is for lists - and in lists, the ordering doesn't matter much.

[15:06] <GlitchMr> order*

[15:06] <FROGGS> pmurias: https://gist.github.com/FROGGS/393b2db32957ba103f97

[15:06] <lizmat> fair enough, Parcel it is then

[15:06] <GlitchMr> But with .bounds, order doesn't matter.

[15:06] <GlitchMr> does*

[15:06] <lizmat> assuming TimToady doesn't mind

[15:06] <TimToady> order matters in lists too

[15:07] <GlitchMr> Yes, but if I sort the list, nothing bad should happen.

[15:07] <TimToady> in this case either parcel or list is fine; parcel is probably less overhead

[15:07] <lizmat> parcel it is then

[15:07] <lizmat> GlitchMr++ for changing the spec

[15:08] <GlitchMr> It makes sense to sort list. It doesn't make sense to sort a tuple.

[15:08] <TimToady> the bounds should always come out min,max, and should not be sorted

[15:08] <TimToady> since the semantics change if min > max

[15:08] <TimToady> say (1..0).bounds

[15:09] <TimToady> nr: say (1..0).bounds

[15:09] <camelia> rakudo 386a09, niecza v24-88-g1f87209: OUTPUT«1 0␤»

[15:09] <TimToady> 1..0 is very different from 0..1

[15:09] <GlitchMr> Well, for me 1..0 looks like empty list, but I assume there are uses for such ranges.

[15:09] <dalek> rakudo/nom: 956aa09 | (Elizabeth Mattijsen)++ | src/core/Range.pm:

[15:09] <dalek> rakudo/nom: Eradicate .PIR code for range reification

[15:09] <dalek> rakudo/nom: 

[15:09] <dalek> rakudo/nom: There is no point keeping it around if we have an NQP version around that

[15:09] <dalek> rakudo/nom: also works on Parrot.  And which in the future will be better optimisable.

[15:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/956aa095fd

[15:10] <TimToady> I just don't understand why we're talking about sorting, but then, I haven't had any coffee yet...

[15:11] <GlitchMr> My argument is that if you randomly change positions in Parcel (containing phone number parts, for instance), something bad would happen.

[15:11] <colomon> TimToady: Is that why I'm so frequently confused here?  No coffee at all?

[15:12] <colomon> GlitchMr: please do not randomly change positions in my Lists….

[15:12] <TimToady> yes, parcels are more like records that way, and lists tend to be homogenous, but those are both oversimplifications, I suspect

[15:13] <TimToady> as soon as the rest of a parcel is bound to a slurpy, it's essentially a list instead

[15:14] <FROGGS> pmurias: I can confirm that your test script works well on linux and windows

[15:14] <TimToady> but of course positionals care greatly about, er, position

[15:14] *** btyler left
[15:14] <fglock> re targetting QAST - I think it would be easier to start targetting Perl6 (translate perl5 to perl6)

[15:15] <fglock> when it gets running in Perl6, QAST can be generated using native libraries

[15:15] *** kaleem joined
[15:16] <fglock> same thing with JVM, targetting a JVM language first (maybe java, but javascript would do)

[15:17] <dalek> roast: 2713e65 | (Elizabeth Mattijsen)++ | S02-types/range.t:

[15:17] <dalek> roast: Remove tests for Range.from and Range.to

[15:17] <dalek> roast: review: https://github.com/perl6/roast/commit/2713e65a88

[15:17] <lizmat> cycling and dinner&

[15:18] <fglock> FROGGS: what is the state of v5?

[15:18] <FROGGS> fglock: 2500 passing tests

[15:18] <FROGGS> (of >40000)

[15:18] <FROGGS> https://github.com/rakudo-p5/v5/blob/master/STATUS.md

[15:19] <FROGGS> it is hard to describe what is missing and what is there

[15:19] <FROGGS> __DATA__ pseudo filehandles are missing, typeglobs are missing

[15:19] <diakopter> ;) No such symbol '&DynaLoader::boot_DynaLoader'

[15:19] <FROGGS> but you can use/require modules and get their symbols exported for example

[15:20] <FROGGS> P5 regexes needs love, and many built-ins are NYI

[15:20] <FROGGS> diakopter: :o)

[15:21] <FROGGS> fglock: indirect is sort of there, but only to a small degree

[15:21] <FROGGS> indirect object syntax*

[15:24] *** btyler joined
[15:27] <skids> So buf* are now immutable and blob* are immutable versions of buf* ?... ??... ???

[15:27] <FROGGS> r: temp %*ENV; say "alive"

[15:27] <camelia> rakudo 386a09:  ( no output )

[15:27] <benabik> Yes.  Although when you put it that way I would somewhat expect the names to be reversed.  </bikeshedding>

[15:27] <FROGGS> -.-

[15:28] <benabik> FROGGS: Impressive.

[15:28] <dalek> nqp/shell3: 432b962 | (Pawel Murias)++ | t/nqp/78-shell.t:

[15:28] <dalek> nqp/shell3: Test that passing env variable to child processes works correctly.

[15:28] <dalek> nqp/shell3: review: https://github.com/perl6/nqp/commit/432b962ed6

[15:28] <FROGGS> benabik: I had another word in mind :o)

[15:29] <pmurias> FROGGS: I added a proper test for the env variables

[15:29] <benabik> Temp is horribly borken, I guess.

[15:29] <FROGGS> pmurias: I'll test it on both machines...

[15:30] <benabik> Hm.  Temp in mainline is broken?

[15:30] <benabik> r: { temp %*ENV; say 1; }; say 2

[15:30] <camelia> rakudo 386a09: OUTPUT«1␤2␤»

[15:30] <FROGGS> pmurias++ # passes on both

[15:30] <benabik> r: temp %*ENV; say 1; say 2

[15:30] <camelia> rakudo 386a09:  ( no output )

[15:30] <FROGGS> ohh

[15:32] <benabik> ohh?

[15:32] <FROGGS> nr: my $a = 42; { temp $a = 22; say $a }; say $a

[15:32] <camelia> rakudo 386a09, niecza v24-88-g1f87209: OUTPUT«22␤42␤»

[15:32] <FROGGS> nr: my $a = 42; temp $a = 22; say $a; say $a

[15:32] <camelia> niecza v24-88-g1f87209: OUTPUT«22␤22␤»

[15:32] <camelia> ..rakudo 386a09:  ( no output )

[15:32] <FROGGS> okay, has nothing todo with dynamic vars

[15:33] <benabik> Yeah.

[15:33] <FROGGS> ohh meant "that is surprising"

[15:33] <benabik> Drat, hoped it was "ohh, that's the problem"

[15:34] <FROGGS> no, sadly not

[15:34] *** bluescreen10 left
[15:35] <fglock> FROGGS: thanks for the link, I'm taking a look at the code :)

[15:35] *** fglock left
[15:38] <FROGGS> have fun

[15:39] <TimToady> buf is mutable, blob is immutable

[15:41] <diakopter> <- is a buf today

[15:43] <tadzik> .tr pl en bufon

[15:43] <yoleaux> tadzik: Sorry, that command (.tr) crashed.

[15:43] <tadzik> yolo

[15:44] <FROGGS> .tr tr tr tr

[15:44] <yoleaux> tr tr tr (en → en)

[15:44] <dalek> nqp/shell3: d4257cd | (Pawel Murias)++ | src/vm/parrot/ops/nqp.ops:

[15:44] <dalek> nqp/shell3: Avoid leaking memory with shell3 on windows.

[15:44] <dalek> nqp/shell3: review: https://github.com/perl6/nqp/commit/d4257cd792

[15:44] <pmurias> FROGGS: we now need to update rakudo

[15:44] <FROGGS> w/e

[15:44] <tadzik> .tr pl en bufon

[15:44] <yoleaux> tadzik: Sorry, that command (.tr) crashed.

[15:44] <FROGGS> pmurias: yeah

[15:44] <tadzik> your mom crashed

[15:44] <FROGGS> *g*

[15:45] <diakopter> tadzik: buffoon?

[15:45] <tadzik> yeah, something like this

[15:48] <dalek> nqp: 3adbc0a | (Pawel Murias)++ | src/vm/parrot/ops/nqp.ops:

[15:48] <dalek> nqp: Make nqp::shell respect the 3 argument on linux.

[15:48] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3adbc0a494

[15:48] <dalek> nqp: 6cbe2ef | (Pawel Murias)++ | src/vm/parrot/ops/nqp.ops:

[15:48] <dalek> nqp: Pass the env variables on windows.

[15:48] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6cbe2ef83b

[15:48] <dalek> nqp: 257f172 | (Pawel Murias)++ | src/vm/parrot/ops/nqp.ops:

[15:48] <dalek> nqp: Attempt at corretly passing the env variables on windows.

[15:48] <dalek> nqp: review: https://github.com/perl6/nqp/commit/257f172983

[15:48] <dalek> nqp: dd3c146 | (Pawel Murias)++ | src/vm/parrot/ops/nqp.ops:

[15:48] <dalek> nqp: Use real \0

[15:48] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dd3c146333

[15:48] <dalek> nqp: 432b962 | (Pawel Murias)++ | t/nqp/78-shell.t:

[15:49] <dalek> nqp: Test that passing env variable to child processes works correctly.

[15:49] <pmurias> who has a rakudo commit bit?

[15:49] *** nebuchadnezzar left
[15:49] *** zakharyas left
[15:49] <FROGGS> I have

[15:49] <tadzik> I do, for example

[15:50] <FROGGS> off to dinner though

[15:50] <colomon> have commit bit, just hanging around the kitchen working on dishes and playing flute

[15:51] <skids> OK, so rakudo's new "feature" of "Buf is now a role, and Buf objects are immutable" should read "we had to make Buf-based objects immutable for a while, we'll get back to it"?

[15:53] *** markov left
[15:55] *** nebuchadnezzar joined
[15:55] *** kaleem left
[15:56] <FROGGS> pmurias: I think this does it for now: https://gist.github.com/FROGGS/97be80800999006a1263

[15:56] *** SamuraiJack_ left
[15:56] <FROGGS> pmurias: after that we can care about making %*ENV constant, and fixing the temp bug

[16:00] <timotimo> skids: i think it means if an object just provides the Buf role, it'll be immutable, but it may offer mutability some other way?

[16:01] <benabik> src/core/Buf.pm:200:    # TODO: override at_pos so we get mutability

[16:02] <timotimo> oh

[16:05] <FROGGS> pmurias: hmmm, no, my patch is not ideal...

[16:05] <TimToady> grondilu: rakudo currently does not implement the specced semantics regarding whitespace that have no token in front of them

[16:05] <FROGGS> the rakudo spectest fails

[16:08] *** markov joined
[16:08] <FROGGS> it feels like it is loosing cwd

[16:09] *** domidumont left
[16:10] *** ajr_ left
[16:11] *** sqirrel left
[16:12] <TimToady> btw, in case it's not clear, the design principle behind the recent changes to ENV and CWD is that each dynamic scope should be able to pretend that it's a separate process

[16:12] <TimToady> the limitations of JVM just pushed this over the edge of 'we need this right now'

[16:13] <FROGGS> yeah, we are just trying to pass the current %*ENV to a shell() call

[16:14] <TimToady> which I understand is problematic on parrot :)

[16:14] * TimToady wonders if there are other VMs with this "feature"

[16:15] <FROGGS> the problem should be in rakudo now

[16:15] <skids> r: my @to = Buf,buf8,Blob,blob8,Any,Mu; my $a = blob8.new(1); $a.WHAT.say; $a.isa($_).say for @to; $a = buf8.new(1); $a.WHAT.say; $a.isa($_).say for @to  # this is not making updating Sum:: very easy :-)

[16:15] <camelia> rakudo 956aa0: OUTPUT«(Blob)␤False␤False␤False␤False␤True␤True␤(Buf)␤False␤False␤False␤False␤True␤True␤»

[16:18] <benabik> r: say Buf ~~ buf8.new(1)

[16:18] <camelia> rakudo 956aa0: OUTPUT«False␤»

[16:18] <benabik> r: say buf8.new(1) ~~ Buf

[16:18] <camelia> rakudo 956aa0: OUTPUT«True␤»

[16:18] <benabik> Does isa not check rules?

[16:18] <benabik> roles

[16:20] <tadzik> isa is about inheritance. .does checks roles

[16:22] <TimToady> lizmat: there's no default for native int, but I don't see why num can't just default to NaN, since that's a native value.

[16:23] <timotimo> oh, the pure-perl checksum library, skids?

[16:23] <skids> Well, only pur perl until I think it's time to put in the NativeCall stuff.

[16:23] <timotimo> i'd be interested to see how the jvm performs for that

[16:23] <skids> Right now it mainly stands as an optimization challenge :-)

[16:26] <skids> I haven't had the time to invest in compiling jakudo yet to see if it even works.

[16:31] *** donaldh joined
[16:31] *** pernatiy_ joined
[16:31] <[Coke]> lizmat: the only reason to keep PIR at this point is for speed on parrot, and that should be pushed to nqp, not rakudo, IMO.

[16:32] *** pernatiy left
[16:35] <pmurias> FROGGS: re you patch if we use %*ENV instead of CALLER::DYNAMIC:<%*ENV> do the problems persist?

[16:35] <FROGGS> pmurias: yes

[16:36] <pmurias> and what's the problem?

[16:38] <pmurias> FROGGS: I'll build a rakudo and check things

[16:39] <FROGGS> pmurias: test 14 failes like this: Unable to open filehandle from path 'getout-22432.out': No such file or directory(2)

[16:39] <FROGGS>   in block  at t/spec/packages//Test/Util.pm:104

[16:39] <FROGGS> if the file is there, so I think it doesnt know about its Cwd anymore

[16:42] <pmurias> on linux?

[16:42] <skids> r: multi sub f(blob8 $f) { 8.say }; multi sub f(blob16 $f) { 16.say }; my $a = buf16.new(1); f($a); # \o/ I can work with that.

[16:42] <camelia> rakudo 956aa0: OUTPUT«16␤»

[16:42] <FROGGS> pmurias: yes

[16:43] <donaldh> need a better value for $*EXECUTABLE_NAME on JVM. It's currenty 'java' which is not useful.

[16:43] <donaldh> I propose we change the constant to 'perl6' for now.

[16:44] *** gdey left
[16:45] <colomon> donaldh: I ran into this with Niecza.

[16:45] <colomon> as far as I know, the real general use for $*EXECUTABLE_NAME is to be able to call it again.  

[16:45] <donaldh> It is perl6 when installed. Would help unblock panda.

[16:46] *** spider-mario joined
[16:46] <colomon> is rakudo-jvm actually installable now?

[16:46] <donaldh> colomon: Yes that's how panda uses it.

[16:46] <donaldh> colomon: Yes, rakudo-jvm has an install target. Panda doesn't work yet.

[16:47] <benabik> Perhaps it should be `java MAGIC-OPS path/to/rakudo.jar`  ;-)

[16:47] <benabik> *OPTS

[16:47] <donaldh> benabik: rakudo installs a shell script called perl6 that runs rakudo-jvm

[16:47] <colomon> donaldh: my point is, $*EXECUTABLE_NAME is a clumsy way to spwan another p6 process.  that blocked panda on Niecza, too

[16:48] <donaldh> colomon:sure. a spawn self type thing would be nice.

[16:48] <colomon> and it seems to conflict with the classic use of executable-name, seeing what *actual* name the script running started with.  Or is that a different variable in p6?

[16:49] <donaldh>  not sure it exists in p6

[16:49] <donaldh> s/exists/is implemented/

[16:50] *** dmol left
[16:50] *** dmol1 joined
[16:50] <[Coke]> colomon: if we don't require an executable wrapper, how would niecza, for example, declare how to run the executable it was declared with?

[16:51] *** xenoterracide left
[16:51] <[Coke]> ... wouldn't it end up looking a lot like $*EXECUTABLE_???

[16:51] <benabik> $*INTERPRETER.spawn($script, @args) ?

[16:51] <TimToady> Perl 5 distinguishes $0 from $^X

[16:52] <[Coke]> I think that's probably a reasonable thing.

[16:52] <colomon> what benabik said, more or less

[16:53] *** fhelmberger left
[16:53] <colomon> ah, is $0 vs $^X $*PROGRAM_NAME vs $*EXECUTABLE_NAME in p6?

[16:54] <TimToady> nodnod

[16:55] <TimToady> decommuting from TO &  # well, packing, anyway

[16:56] <rjbs> (One of my favorite little changes in recent p5s is that $^X is, if possible, found via the OS API for getting the full path name. Mmmm.)

[16:57] *** xenoterracide joined
[16:59] *** Ayiko joined
[16:59] *** dakkar left
[17:00] *** daxim left
[17:04] <TimToady> afkr &

[17:06] *** virtualsue joined
[17:14] *** rindolf joined
[17:14] *** frdmn joined
[17:15] <dalek> ecosystem: 4cb49e9 | duff++ | META.list:

[17:15] <dalek> ecosystem: Add sake

[17:15] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/4cb49e97e2

[17:16] <[Coke]> is pod6 far enough along that we can convert the rest of the syn?

[17:17] <PerlJam> [Coke]: last I checked, the semantic blocks weren't supported yet.

[17:18] *** pernatiy_ left
[17:20] *** pmurias left
[17:20] <PerlJam> (that would be "I think not" in answer to your question :)

[17:23] *** donaldh left
[17:24] *** hummeleBop joined
[17:30] *** pmurias joined
[17:34] *** SamuraiJack_ joined
[17:37] *** ajr joined
[17:37] *** ajr is now known as Guest26117

[17:37] *** Guest26117 is now known as ajr_

[17:38] *** colomon left
[17:41] *** pdcawley left
[17:43] *** abnorman joined
[17:47] *** btyler left
[17:48] *** btyler joined
[17:54] *** abnorman left
[17:58] *** btyler left
[18:00] *** btyler joined
[18:04] *** donaldh joined
[18:07] *** benabik left
[18:08] <lizmat> TimToady: I'm not sure making NaN the default for "num", is very DWIM.  It feels more like a WAT to me, especially since int defaults to 0

[18:08] *** kbaker left
[18:08] <lizmat> also: I think it would be rather hard to implement, as "num" doesn't have a container to keep the default value

[18:09] *** stevan_ left
[18:09] <lizmat> so this would need to live in the general assign logic at vm guts level

[18:10] *** colomon joined
[18:10] <lizmat> jnthn, FROGGS: is there an easy way to find out if a given type object is unboxed (aka "int", "num",etc ?

[18:10] *** denis_boyun joined
[18:10] <lizmat> r: my num $a is default(42) # need a more awesome error message here

[18:10] <camelia> rakudo 956aa0: OUTPUT«[31m===[0mSORRY![31m===[0m Error while compiling /tmp/S7emHuDExR␤Cannot look up attributes in a type object␤at /tmp/S7emHuDExR:1␤------> ␤»

[18:11] <FROGGS> r: my num $a; say say nqp::isnum($a); my Num $b; say nqp::isnum($b)

[18:11] <camelia> rakudo 956aa0: OUTPUT«0␤True␤0␤»

[18:11] <FROGGS> r: my num $a; say nqp::isnum($a); my Num $b; say nqp::isnum($b)

[18:11] <camelia> rakudo 956aa0: OUTPUT«0␤0␤»

[18:12] <FROGGS> r: my num $a; say nqp::objprimspec($a); my Num $b; say nqp::objprimspec($b)

[18:12] <camelia> rakudo 956aa0: OUTPUT«0␤0␤»

[18:12] <FROGGS> hmmm

[18:13] *** donaldh left
[18:14] *** donaldh joined
[18:17] *** rindolf left
[18:20] <FROGGS> lizmat: no idea, sorry

[18:20] <lizmat> too bad, thanks for trying!

[18:25] *** donaldh left
[18:30] <FROGGS> pmurias: still there?

[18:31] <lizmat> I think he will at least be back in ~ hour for the #parrotsketch weekly meeting

[18:31] <FROGGS> k

[18:32] <FROGGS> t/spec/S02-magicals/env.rakudo.parrot ........................... ok

[18:34] *** SamuraiJack_ left
[18:35] *** stevan_ joined
[18:36] <pmurias> FROGGS: pong

[18:37] <FROGGS> pmurias: seems to work now, do you mind if I merge shell3 into master?

[18:37] *** SamuraiJack_ joined
[18:37] <pmurias> FROGGS: it's already merged

[18:37] <FROGGS> awesome

[18:38] <pmurias> what did you change to make it work?

[18:39] *** abnorman joined
[18:40] <FROGGS> pmurias: just this: https://gist.github.com/FROGGS/30ed8c0f93374de5a730

[18:40] <flussence> I've noticed S26 refers to a Pod6:: naming scheme but Rakudo and Niecza both use Pod::* for those, so it probably makes sense to drop the "6". Any objections before I change it?

[18:40] <FROGGS> but I think that this is exactly what we want

[18:41] <pmurias> FROGGS: you kept the #ifdef parrot?

[18:41] <FROGGS> no

[18:41] <PerlJam> flussence: I kinda like Pod6 to distinguish it from Pod (for perl 5)

[18:42] *** SmokeMac_ left
[18:42] <FROGGS> pmurias: wait, there is an ifdef before that

[18:42] <flussence> PerlJam: yeah, it's kinda awkward because there's a few mentions of Pod:: around in S26, and it also calls itself "Pod" and p5's "POD"...

[18:42] <FROGGS> but it uses now nqp::shell instead of spawn

[18:43] <FROGGS> PerlJam: but this is Perl 6, so our Pod is Pod. when referring to other languages we can put something in front of it... (Perl5::Pod)

[18:44] <lizmat> r: my &a is default(-> ($a) {$a}); say a(100) # wonder whether this should work or not

[18:44] <camelia> rakudo 956aa0: OUTPUT«Not enough positional parameters passed; got 0 but expected 1 in sub-signature␤  in block  at /tmp/vE4DmkSvEO:1␤␤»

[18:44] <pmurias> NQP revision 2013.08-14-g3c2b6e3 required (currently 2013.08).

[18:44] <pmurias> what the heck does that mean?

[18:44] <PerlJam> FROGGS: true.   I guess I just tend to think of p5-pod as "pod" and p6-pod as "pod6"

[18:44] *** SmokeMachine joined
[18:45] <flussence> pmurias: your nqp's 14 commits behind what rakudo wants

[18:45] <FROGGS> pmurias: your have to reconfigure + make install

[18:45] <FROGGS> you*

[18:45] <pmurias> in nqp?

[18:46] <FROGGS> pmurias: yes

[18:46] <FROGGS> and then check nqp --version

[18:46] <pmurias> FROGGS: the #ifdef code you changed in the diff should have been deleted

[18:46] <dalek> roast: 87f477b | (Elizabeth Mattijsen)++ | S02-names/is_default.t:

[18:46] <dalek> roast: Added tests for "is default(Nil)"

[18:46] <dalek> roast: review: https://github.com/perl6/roast/commit/87f477b9de

[18:47] <FROGGS> PerlJam: I'd agree if we had other places where we say: hey, this is XXX6 and not the XXX from Perl 5

[18:47] <pmurias> lizmat: I avoid the #parrotsketch meeting as I post a prereport and I don't care about the other parroty things

[18:47] <lizmat> this will push rakudo.jvm lower again: on the brighter side, making .VAR work on rakudo.jvm will get a lot of tests passing again

[18:47] <pmurias> visiting a friend&

[18:47] <flussence> also all of roast uses Pod:: too; the spec looks like the odd one out here

[18:48] *** pmurias left
[18:48] <FROGGS> flussence: yeah

[18:48] <PerlJam> flussence: If you also change the mentions of POD (as in Perl 5 POD) to say something like "Perl 5 POD", that would make me happier at least  :)

[18:49] <PerlJam> flussence: anyway, +1 to dropping the 6

[18:50] <flussence> I guess I can do both things

[18:51] <PerlJam> oh, I just acked S26 and it looks like it already has "Perl 5 POD" in most places.

[18:52] <PerlJam> (and the places it doesn't, it's clear from the context that it's still talking about p5-pod)

[18:52] *** grondilu left
[18:53] <flussence> yep, looks like that's already done

[18:54] <dalek> specs: 6af26e3 | flussence++ | S26-documentation.pod:

[18:54] <dalek> specs: s/Pod6::/Pod::/g to match Rakudo and Niecza

[18:54] <dalek> specs: review: https://github.com/perl6/specs/commit/6af26e329d

[18:57] <dalek> perl6-roast-data: ee3c1da | coke++ | / (5 files):

[18:57] <dalek> perl6-roast-data: today (automated commit)

[18:57] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/ee3c1dab1b

[18:58] *** kbaker joined
[19:00] <Util> #ps in 30m

[19:00] *** krunen joined
[19:02] *** konundra joined
[19:05] <FROGGS> [Coke]: rakudo should be clean tomorrow

[19:07] *** donaldh joined
[19:08] <colomon> \o/

[19:11] <[Coke]> FROGGS: .parrot? yay!

[19:11] <[Coke]> FROGGS++

[19:11] <[Coke]> now I have to refix pugs and fudge niecza.

[19:11] <FROGGS> [Coke]: yes, I'm just testing pmurias++ and my patch again

[19:12] <lizmat> FROGGS: should it be clean now?

[19:12] <lizmat> ah, ok

[19:12] <[Coke]> pugs is going to drop off that list soon, I think. :(

[19:15] *** grondilu joined
[19:17] *** SamuraiJack_ left
[19:18] <colomon> FROGGS: ah, that explains why it didn't work when I tried it just now.

[19:28] <dalek> rakudo/nom: 2d28fdd | (Elizabeth Mattijsen)++ | src/core/ (3 files):

[19:28] <dalek> rakudo/nom: X::Comp::Trait exception becomes X::Comp::Trait::Unknown

[19:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2d28fdd1c1

[19:30] *** dwarring left
[19:31] * grondilu upgrades his debian-sid system today and notices that it will bring perl 5.18

[19:31] <FROGGS> cool

[19:32] * moritz has been using a perlbrew'ed perl 5.18 for quite some time now

[19:32] <[Coke]> perlbrew++

[19:36] <dalek> rakudo/nom: bc7c2eb | (Tobias Leich)++ | src/core/terms.pm:

[19:36] <dalek> rakudo/nom: fetch/store to %*ENV directly

[19:36] <dalek> rakudo/nom: 

[19:36] <dalek> rakudo/nom: ... instead of using the thing returned by nqp::getenvhash()

[19:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bc7c2eb833

[19:36] <dalek> rakudo/nom: 17b17a4 | (Tobias Leich)++ | / (2 files):

[19:36] <dalek> rakudo/nom: use nqp::shell() instead of pir::spawn

[19:36] <dalek> rakudo/nom: 

[19:36] <dalek> rakudo/nom: Also bump NQP_REVISION, to pull in pmurias++ patch.

[19:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/17b17a496b

[19:37] * lizmat spectests

[19:38] <FROGGS> ohh yeah, a mactest would be interesting

[19:40] <lizmat> NQP rebuilds ok

[19:41] <FROGGS> nqp t/nqp/78-shell.t # this passes?

[19:42] <lizmat> all ok

[19:42] <FROGGS> yay

[19:42] *** SamuraiJack_ joined
[19:45] *** BenGoldberg left
[19:46] <lizmat> rakudo builds ok

[19:47] *** jnap left
[19:51] *** konundra left
[19:51] *** colomon left
[19:52] *** colomon joined
[19:52] <colomon> looks like the module smoker is successfully running panda again!

[19:52] <moritz> \o/

[19:52] <colomon> and my screen blacked out and my cpu fan suddenly went off.  should I be worried?

[19:53] <FROGGS> \o/

[19:53] <FROGGS> these are the best news!

[19:53] <FROGGS> ohh

[19:53] <FROGGS> colomon: yes

[19:53] <FROGGS>  /o\

[19:53] *** SamuraiJack_ left
[19:53] <colomon> feels like the fan is back on but lower?

[19:54] <FROGGS> I'd open the case (just in case)

[19:54] <lizmat> spectest result: t/spec/S02-magicals/env.rakudo.parrot                         (Wstat: 0 Tests: 16 Failed: 0)

[19:54] <lizmat>   TODO passed:   15-16

[19:55] <FROGGS> right

[19:55] <FROGGS> that's cool

[19:55] <lizmat> will you unfudge or shall I ?

[19:55] <colomon> I think maybe OS X killed killed a process that was out of control....

[19:55] <FROGGS> I'm running jvm spectests now, and compile on windows xp to test there

[19:55] <FROGGS> lizmat: would be cool if you do it

[19:56] <dalek> roast: ab66274 | (Elizabeth Mattijsen)++ | S02-magicals/env.t:

[19:56] <dalek> roast: Unfudge tests because FROGGS++ and pmurias++ fixed the issue

[19:56] <dalek> roast: review: https://github.com/perl6/roast/commit/ab6627415f

[19:57] <FROGGS> cool

[19:57] * FROGGS is happy

[19:57] <colomon> FROGGS++

[19:58] *** abnorman left
[20:02] *** abnorman joined
[20:10] <donaldh> seen tadzik

[20:13] <lizmat> .seen tadzik 

[20:13] <yoleaux> I saw tadzik 16:20Z in #perl6: <tadzik> isa is about inheritance. .does checks roles

[20:14] *** benabik joined
[20:18] <donaldh> thx lizmat++

[20:18] <lizmat> yw

[20:18] <donaldh> chdir emulation in rakudo: https://github.com/rakudo/rakudo/pull/202

[20:24] *** colomon left
[20:27] * masak waves

[20:27] <lizmat> masak o/

[20:30] *** kaare_ left
[20:31] <sjohnson> yo

[20:32] *** colomon joined
[20:35] *** virtualsue_ joined
[20:36] *** virtualsue left
[20:36] *** virtualsue_ is now known as virtualsue

[20:41] <lue> timotimo: I know, but the spec oddly leaves out "multiple double angles", mentioning only multiple single angles

[20:44] *** colomon left
[20:47] *** teslos joined
[20:48] *** grondilu left
[20:49] *** colomon joined
[20:49] *** stevan_ left
[20:50] <dalek> niecza: 9d2f552 | (Tobias Leich)++ | lib/CORE.setting:

[20:50] <dalek> niecza: properly return exit code from shell()

[20:50] <dalek> niecza: review: https://github.com/sorear/niecza/commit/9d2f552d76

[20:50] <tadzik> .seen tadzik

[20:50] <yoleaux> You're right there.

[20:51] <tadzik> oh, right :0

[20:51] *** kbaker left
[20:53] <donaldh> tadzik: with the chdir emulation pull request ^^ panda is close to working on jvm

[20:53] <dalek> panda: 7ea82d9 | (Donald Hunter)++ | lib/Panda/Common.pm:

[20:53] <dalek> panda: Change Common.pm to use OS instead of VM.

[20:53] <dalek> panda: review: https://github.com/tadzik/panda/commit/7ea82d9901

[20:53] <dalek> panda: 6ec5264 | tadzik++ | lib/Panda/Common.pm:

[20:53] <dalek> panda: Merge pull request #54 from donaldh/os-var

[20:53] <dalek> panda: 

[20:53] <dalek> panda: Change Common.pm to use $*OS instead of $*VM

[20:53] <dalek> panda: review: https://github.com/tadzik/panda/commit/6ec52641a7

[20:53] <dalek> roast: 0a714c2 | (Tobias Leich)++ | S29-context/exit.t:

[20:53] <dalek> roast: unfudged passing tests

[20:53] <dalek> roast: review: https://github.com/perl6/roast/commit/0a714c2f1e

[20:53] <lizmat> fwiw, please note that $*OS is not specced

[20:53] <tadzik> donaldh: thank you :)

[20:54] <donaldh> tadzik: panda bootstrap runs to the point where it fails with a parrot specific compile command

[20:54] <lizmat> but I guess we can fix that later after a deprecation cycle 

[20:54] <tadzik> --target=pir?

[20:54] <donaldh> we need to figure out how to package up compilation capability in the installed rakudo.

[20:54] <dalek> roast: 07bd0ab | (David Warring)++ | S05-capture/caps.t:

[20:54] <dalek> roast: more tests on regex conjunctive op (&&)

[20:54] <dalek> roast: review: https://github.com/perl6/roast/commit/07bd0ab061

[20:55] <donaldh> it might just be a case of different options: --target=jar 

[20:55] <donaldh> I haven't tried yet.

[20:57] <tadzik> maybe

[20:57] <FROGGS> donaldh: I'm testing #202 now

[20:57] <donaldh> tadzik: Maybe should factor out the compile command into a backend specific impl

[20:57] <donaldh> the target name will need to be different too, i.e xxx.jar

[20:59] <donaldh> maybe it's as simple as s/pir/jar/

[21:00] <FROGGS> after .pir you invoke parrot to create a .pbc

[21:01] <tadzik> FROGGS: which gives approx. 0 performance benefit

[21:01] <tadzik> donaldh: yeah, that sounds sane

[21:01] <tadzik> FROGGS: (been there, done that :))

[21:01] <FROGGS> tadzik: are you sure?

[21:01] <FROGGS> okay

[21:01] *** colomon left
[21:02] <tadzik> or maybe I did something horribly wrong and have actually missed some huge win :) But istr it was more trouble than it was worth

[21:02] <FROGGS> Perl6::ModuleLoader takes pir too?

[21:03] <tadzik> yes

[21:03] <FROGGS> hmmm, I'll test this then (tomorrow or so)

[21:05] *** skids left
[21:05] <tadzik> awesome

[21:05] <FROGGS> because this would save about a minute to compile v5, and maybe a bit more for rakudo

[21:07] <tadzik> oh?

[21:07] <tadzik> ah, not creating pbc

[21:07] *** ribasushi left
[21:07] *** ribasushi joined
[21:07] <tadzik> well, there is no reason why it shouldn't be faster in the end. It's just that for the modules the difference seemed marginable when I measured it

[21:09] *** spider-mario left
[21:15] <donaldh> Yay. panda bootstrap just worked with s/pir/jar/  \o/

[21:16] <FROGGS> cool!

[21:16] <donaldh> I say worked. I mean ran to completion.

[21:17] <donaldh> install is also hard-coded to do pir

[21:23] <FROGGS> still sounds like progress :o)

[21:27] *** colomon joined
[21:29] <donaldh> Yes progress.

[21:32] <colomon> module smoke test runs again!  no new failures, one new (passing) module.  perlpilot++

[21:39] <donaldh> FROGGS++ for testing #202. I missed that earlier

[21:40] <FROGGS> :o)

[21:40] <donaldh> 'night #perl6

[21:40] <FROGGS> gnight donaldh 

[21:43] *** hummeleBop left
[21:45] *** donaldh left
[21:52] *** lowpro30 joined
[21:52] *** virtualsue left
[21:53] *** jnap joined
[21:54] *** dmol1 left
[21:55] *** lowpro30_ left
[21:58] *** lowpro30 left
[22:04] <dalek> nqp: 6f97a10 | (Tobias Leich)++ | src/vm/jvm/QAST/Compiler.nqp:

[22:04] <dalek> nqp: return an int as promised by b563f22e696761287243dd054a119f6334a1234d

[22:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6f97a10d8a

[22:08] *** colomon left
[22:10] <jnthn> evening, #perl6

[22:11] <FROGGS> hi jnthn 

[22:11] <jnthn> oslo++ # awesome beer destination

[22:12] <FROGGS> *g*

[22:12] <dalek> rakudo/nom: 3bdc0c3 | (Elizabeth Mattijsen)++ | src/core/ (2 files):

[22:12] <dalek> rakudo/nom: Make error message on 'my int $a is default(42)' etc. more friendly

[22:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3bdc0c3f6f

[22:12] <lizmat> jnthn o/

[22:13] * lizmat calling it a night

[22:13] <lizmat> sleep&

[22:13] <FROGGS> gnight lizmat 

[22:13] <jnthn> o/ lizmat :)

[22:14] *** btyler left
[22:15] *** dmol joined
[22:16] *** btyler joined
[22:18] <FROGGS> jnthn: should nqp::shell() should return posix style return values? thats is, should the return value be shifted +< 8 ?

[22:18] <FROGGS> I'm asking because nqp@parrot is doing that, nqp@jvm not

[22:19] <huf> low byte is usually the signal number that killed the process, no? (and other various things, binary not found being one i recall)

[22:20] <FROGGS> I'm talking about that: https://github.com/perl6/nqp/blob/master/src/vm/parrot/ops/nqp.ops#L395

[22:20] <FROGGS> huf: that might be the case, but it will be 0 in case of nqp::shell

[22:20] *** colomon joined
[22:21] <jnthn> FROGGS: Not sure, but if it's any help the general Perl 6 approach to things is to not throw away information.

[22:21] <FROGGS> well, there are tests that check for an unshifted return value

[22:22] <huf> hm. does it not shell out? how come it will always be zero?

[22:22] <FROGGS> for nqp::shell we are faking information that is not there

[22:22] <FROGGS> huf: it returns the return value shifted 8 to the left, so the lower eight bits are 0

[22:23] <FROGGS> see: https://github.com/perl6/nqp/blob/master/src/vm/parrot/ops/nqp.ops#L395

[22:23] <huf> right, i see that. it's just puzzling

[22:23] <FROGGS> shell() from the parrot implementation just returned state, same goes for jvm

[22:24] <huf> OH!

[22:25] <huf> this is in an #ifdef WIN32, disregard me.

[22:25] <FROGGS> ohh wait

[22:25] <FROGGS> now I see it too *g*

[22:26] <FROGGS> then it makes sense

[22:26] *** PacoAir left
[22:26] <FROGGS> but then I will apply that shifting to nqp::shell@jvm too

[22:26] <huf> and the posix code just returns status

[22:26] <FROGGS> right

[22:27] <huf> arent preprocessor directives fun? :)

[22:28] <FROGGS> they are :o)

[22:28] *** stevan_ joined
[22:29] *** ajr_ left
[22:32] *** denis_boyun left
[22:36] *** nebuchadnezzar left
[22:37] *** teslos left
[22:37] <FROGGS> okay, spec says something about a Proc::Status methods object, wich provides the exit value and state (also the combined posix for in .status)

[22:41] *** benabik left
[22:42] <dalek> nqp: aa41dd3 | (Tobias Leich)++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[22:42] <dalek> nqp: fake posix-like return value for nqp::shell()@jvm

[22:42] <dalek> nqp: review: https://github.com/perl6/nqp/commit/aa41dd34ad

[22:47] <dalek> rakudo/nom: 26a36bf | (Tobias Leich)++ | / (2 files):

[22:47] <dalek> rakudo/nom: return posix-like return value for nqp::shell

[22:47] <dalek> rakudo/nom: 

[22:47] <dalek> rakudo/nom: This should be returned as a Proc::Status object, according to S29:552 and S29:634.

[22:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/26a36bfb80

[22:47] <synopsebot> Link: http://perlcabal.org/syn/S29.html#line_552

[22:47] <sjn> 00:29 -!- ajr_ [~quassel@ottawa-hs-64-26-155-153.s-ip.magma.ca] has quit

[22:47] <sjn> oops

[22:48] <dalek> roast: 030a4ab | (Tobias Leich)++ | S29-context/exit.t:

[22:48] <dalek> roast: accept posix-status until we have Proc::Status

[22:48] <dalek> roast: review: https://github.com/perl6/roast/commit/030a4abaea

[22:48] <jnthn> sjn: I see you made it home safely :)

[22:49] <dalek> niecza: d827fa8 | (Tobias Leich)++ | lib/CORE.setting:

[22:49] <dalek> niecza: revert 9d2f552d768563416a0f8c7d38f8cd3c57d9a546

[22:49] <dalek> niecza: review: https://github.com/sorear/niecza/commit/d827fa8d65

[22:49] * jnthn gets some rest 

[22:49] <jnthn> &

[22:49] <FROGGS> gnight jnthn 

[22:51] <sjn> jnthn: I managed to survive the tram trip home, yes :)

[22:51] <sjn> somehow

[22:51] <sjn> <- time for some Zzz's

[22:51] <sjn> nn #perl6

[22:53] <FROGGS> gnight sjn 

[22:53] *** berekuk left
[22:54] *** thou left
[22:54] *** jnap left
[22:56] *** berekuk joined
[22:58] *** colomon left
[22:58] *** berekuk left
[23:02] *** colomon joined
[23:03] *** nebuchadnezzar joined
[23:12] *** btyler left
[23:14] *** colomon left
[23:16] *** cbk joined
[23:27] *** Guillaume2 joined
[23:28] <Guillaume2> is there a way i can interface perl6 with cocoa under mac os x ?

[23:28] <Guillaume2> or should i use gtk or qt

[23:28] <Guillaume2> what would be the most portable gui to use

[23:30] <huf> html4

[23:31] <huf> anything that's anything can render that

[23:31] <Guillaume2> yeah maybe i should stick to a web app

[23:31] <Guillaume2> i wanna code some bible softwares

[23:31] <Guillaume2> with hebrew and greek support

[23:31] <Guillaume2> unicode i guess

[23:31] <huf> it might not be very pleasant, but it is very portable :)

[23:37] *** skids joined
[23:39] *** panchiniak joined
[23:41] *** stevan_ left
[23:41] *** stevan_ joined
[23:44] *** nebuchadnezzar left
[23:44] *** nebuchadnezzar joined
[23:47] <skids> r: multi sub foo (Int $f, $g) { 1; }; multi sub foo ($f, Str $g) { 1; }; foo(4,"d"); # Tiebreaking fail.

[23:48] <camelia> rakudo 26a36b: OUTPUT«Ambiguous call to 'foo'; these signatures all match:␤:(Int $f, $g)␤:($f, Str $g)␤  in sub foo at /tmp/RSfqXNf2FT:1␤  in block  at /tmp/RSfqXNf2FT:1␤␤»

[23:49] <skids> (and that is a regression, I think)

[23:54] *** dmol left
[23:54] *** Sean__ joined
[23:55] *** ssutch left
