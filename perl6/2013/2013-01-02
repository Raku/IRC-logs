[00:11] *** sftp left
[00:12] *** sftp joined
[00:37] *** Targen_ joined
[00:37] *** Targen left
[00:39] *** denisboyun_ left
[00:40] *** screencast joined
[00:42] *** screencast left
[00:43] <timotimo> er, is the rendering of S26 correct? it says "D<POD> is an easy-to-use markup language" and "B<=begin pod>" and "B<=end pod>" :(

[00:45] *** JJ_Brain joined
[00:45] *** spider-mario left
[00:46] *** JJ_Brain left
[00:48] <timotimo> oh, right, it says so right next to it that it's known to be incomplete

[00:48] <timotimo> so that's fine i guess

[00:48] *** MayDaniel left
[00:58] *** rindolf left
[01:01] *** adu joined
[01:02] *** adu left
[01:03] *** cognominal joined
[01:03] *** erkan left
[01:10] *** sftp left
[01:13] *** sftp joined
[01:30] *** geekosaur joined
[01:30] *** geekosaur left
[01:30] *** geekosaur joined
[01:56] <timotimo> i'll get back to the screencast project after a bit of sleep.

[02:00] *** ggoebel joined
[02:10] *** cognominal left
[02:14] *** cognominal joined
[02:34] *** FROGGS_ joined
[02:38] *** FROGGS left
[02:42] *** asdf12 joined
[02:54] <ggoebel> wondering if initial jvm backend intends to make use of the "da vinci machine" (JSR 292). Looks like the folks at Oracle are continuing to work on improving support for dynamic languages. whereas .Net's DLR seems to have stagnated

[02:58] <ggoebel> Nashorn (Oracle's new open source javascript runtime for jvm jdk8 uses it) http://mail.openjdk.java.net/pipermail/mlvm-dev/2012-December/005158.html

[02:59] <au> InvokeDynamic++ 

[03:06] *** xinming left
[03:11] <au> JSR 335 (Java 8, project Lambda) may also be relevant, with JVM-level support of "Default methods" dovetailing with method-carrying roles. # http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-4.html

[03:17] <ggoebel> Current thread on LF performance http://mail.openjdk.java.net/pipermail/mlvm-dev/2012-December/005162.html

[03:21] <au> looks pretty good.

[03:25] *** xinming joined
[03:32] <[Coke]> au: sorry to bug you, but pugs is broken on feather. Not sure if you have any tuits to poke at it.

[03:35] <au> /usr/bin/pugs looks OK'ish. how exactly is it broken?

[03:36] <au> (please typeahead; I'll be back in a bit and take a look after lunch.)

[03:36] <[Coke]> sorry, building a fresh pugs is broken.

[03:37] <[Coke]> (so the daily test runs have been showing pugs at 0 for some time.)

[03:37] <au> ah, ok. rebuilding it in the background screen now; will see how it goes.

[03:40] *** cognominal left
[03:40] *** asdf12 left
[03:42] <[Coke]> au++

[03:42] <au> [Coke]: A fresh "cabal update ; cabal install Pugs" worked for me producing /home/audreyt/.cabal/bin/pugs .

[03:42] <au> trying a Github checkout "make" in Pugs.hs/Pugs/ now.

[03:43] <[Coke]> let me reproduce my failure for you.

[03:43] <au> ok. "rm -rf ~/.cabal" might help.

[03:44] <au> compiling from Git checkout also worked for me, producing /home/audreyt/Pugs.hs/Pugs/pugs .

[03:44] <au> for the time being please feel free to copy/use my checkout.

[03:44] <au> (bbiab, lunch)

[03:45] * au is happy that a fresh recompile-the-world takes less than 7mins and Pugs itself takes just 3mins.

[03:46] *** cognominal joined
[03:46] <[Coke]> * Missing (or bad) header file: perl5/p5embed.h

[03:46] <[Coke]> removing ~/.cabal...

[03:46] <au> also "git clean -dfx ; git pull" if you're working from a git checkout

[03:47] <[Coke]> then I get:      fatal error: libutil.h: No such file or directory

[03:47] <au> "git reset --hard" may help too

[03:47] <[Coke]> then I get the p5embed.h error again.

[03:48] <[Coke]> git clean -xdf ; git reset --hard; git pull; rm -rf ~/.cabal; make # gets the p5embed.h error.

[03:49] <au> apparently it's because you're using a perlbrew 

[03:49] <au> perlbrew off ; make

[03:51] <au> actually, before make, run "cabal install Pugs" first

[03:51] <au> but in any case that should work... the perlbrew was perhaps installed with an out-of-sync toolchain or something.

[03:53] <[Coke]> Had removed ~/.ghc as part of "remove everything" test.. reinstalling some stuff, will try sans perlbrew shortly.

[03:53] <[Coke]> getting a lot of "Error while Error while updating world-file. : /home/autrijus/.cabal/: openNewBinaryFile: perm"

[03:54] <[Coke]> (though it doesn't seem to be impacting my installs)

[03:55] * shachaf recommends mkdir old; mv .cabal .ghc old/ rather than rm -rf .cabal .ghc7

[03:55] <shachaf> Often it turns out there was something bbin there that you wanted.

[03:56] <[Coke]> au++ #muuch better.

[03:57] <[Coke]> shachaf: I use haskell only for pugs, so rebuilding the dozen deps isn't a pain.

[03:58] <[Coke]> of course, now every test is failing because "this version of PCRE was compiled without UTF support".

[03:58] <[Coke]> still much better, though.

[03:58] *** orafu left
[03:58] *** orafu joined
[04:02] <dalek> perl6-roast-data: 3be2124 | coke++ | / (2 files):

[04:02] <dalek> perl6-roast-data: today (automated commit)

[04:02] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/3be2124f68

[04:02] <dalek> perl6-roast-data: 09ae7ee | coke++ | bin/pugs.sh:

[04:02] <dalek> perl6-roast-data: disable perlbrew for pugs build. (au++)

[04:02] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/09ae7ee1aa

[04:16] <au> [Coke]: fixed the PCRE support

[04:19] <[Coke]> how do I get the udpated version?

[04:20] <[Coke]> do I need to rebuild something with cabal?

[04:20] <au> run the command "sleep 300" :)

[04:21] <au> (I'm running "cabal update ; cabal install --reinstall regex-pcre-builtin pugs-compat ; make" su'd as you atm)

[04:21] *** skids joined
[04:21] <au> alright, /home/coke/sandbox/Pugs.hs/Pugs/pugs now has utf8 pcre support.

[04:26] <au> ...and so does /usr/bin/pugs. thank you for bringing it back to the roast

[04:27] *** adu joined
[04:28] <sorear> au \o/

[04:28] <[Coke]> au++

[04:28] <au> ohai sorear \o/

[04:29] <adu> hi

[04:35] *** dduncan joined
[04:35] <dduncan> is there an admin for https://github.com/perl6 around?

[04:36] <dduncan> I used to be a member of that GitHub organization but had removed myself in order to reorganize my accounts; now I'd like to be re-added to perl6

[04:36] <dduncan> specifically, "muldis" was a perl6 member, but I converted that to an organization and created a new personal account duncand

[04:36] <dduncan> can duncand be added to perl6?

[04:37] <au> neat, haven't noticed the "turn into an organization" feature before

[04:38] <au> <- not an admin for github.com/perl6/

[04:39] <dduncan> I was setting things up to be more social, so its easier to have a group working on my Muldis projects with direct commit access, as is common in the Perl community

[04:39] <dduncan> rather than everyone else having to do pull requests

[04:39] <au> *nod*

[04:40] <adu> is there a way to add metadata to a sub?

[04:40] <dduncan> I actually removed myself from perl6 several months ago in preparation, but just did the actual account conversion today

[04:40] <dduncan> that is all

[04:41] *** cognominal left
[04:48] <sorear> dduncan: you want duncand added to perl6?  I can do this

[04:49] <au> adu: yes (with trait_mod, see https://perl6advent.wordpress.com/2011/12/04/traits-meta-data-with-character/ ), but what would you like to use it for?

[04:49] <dalek> Pugs.hs: ddfcad8 | au++ | pugs-compat/pugs-compat.cabal:

[04:49] <dalek> Pugs.hs: * Bump min regex-pcre-builtin to 0.94.4.4.8.31 to support UTF8 and GHC7.6

[04:49] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/ddfcad8d84

[04:50] <dduncan> sorear, yes, thank you

[04:50] <dduncan> https://github.com/duncand

[04:50] <dduncan> is my new personal profile

[04:51] <dduncan> I can't promise to be very active, but I was a member before (under "muldis") and occasionally updated the Perl 6 spec or such

[04:54] *** tadzik joined
[04:54] * [Coke] wonders why feather is so slow. top not showing anything.

[04:55] <dduncan> "duncand" matches my CPAN id, fyi

[04:55] <[Coke]> ... and now it seems responsive again (after about 10m of slowdown)

[04:55] <sorear> dduncan: done

[04:55] <dduncan> thank you

[05:29] <dalek> ecosystem: 8815b57 | (David Warring)++ | META.list:

[05:29] <dalek> ecosystem: Update META.list

[05:29] <dalek> ecosystem: 

[05:29] <dalek> ecosystem: Added PDF-Grammar

[05:29] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/8815b57c2b

[05:29] <dalek> ecosystem: 23bc919 | util++ | META.list:

[05:29] <dalek> ecosystem: Merge pull request #17 from dwarring/patch-1

[05:29] <dalek> ecosystem: 

[05:29] <dalek> ecosystem: Update META.list

[05:29] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/23bc91951a

[05:39] *** att__ joined
[06:12] *** dduncan left
[06:15] *** kaleem joined
[06:20] *** GlitchMr joined
[06:31] *** ismail joined
[06:50] *** Bruce__ left
[06:58] *** JJ_Brain joined
[06:58] *** daniel-s_ joined
[06:58] *** JJ_Brain left
[07:14] *** Chillance left
[07:15] *** Chillance joined
[07:20] *** GlitchMr left
[07:20] *** baest left
[07:20] *** baest joined
[07:26] *** ismail left
[07:39] *** geekosaur left
[07:42] *** geekosaur joined
[07:43] *** JJ_Brain joined
[07:45] *** geekosaur left
[07:45] *** geekosaur joined
[07:56] *** JJ_Brain left
[07:58] *** asdf12 joined
[07:58] *** SamuraiJack joined
[08:04] *** adu left
[08:09] *** asdf12 left
[08:20] *** Chillance left
[08:44] *** JJ_Brain joined
[08:44] *** JJ_Brain left
[08:45] *** quester left
[08:45] *** JJ_Brain joined
[08:45] *** rindolf joined
[08:51] *** JJ_Brain left
[09:14] *** Rix joined
[09:22] *** daniel-s_ is now known as daniel-s

[09:27] *** SmokeMachine joined
[09:28] *** SmokeMac_ joined
[09:28] *** SmokeMachine left
[09:28] *** rindolf left
[09:29] *** rindolf joined
[09:34] *** rindolf left
[09:35] *** rindolf joined
[09:42] *** Psyche^ joined
[09:45] *** Patterner left
[09:45] *** Psyche^ is now known as Patterner

[09:49] *** Pupubear joined
[09:50] *** Pupubear left
[10:28] *** [particle] left
[10:31] *** kivutar joined
[10:36] *** JJ_Brain joined
[10:42] *** JJ_Brain left
[10:44] <hoelzro> in token statement_control:sym<...>, :sym is an adverb, and <...> are arguments to that adverb, yes?

[10:47] <arnsholt> Good question. In previous versions of the Rakudo I think it's been treated separately

[10:48] <arnsholt> But last time I looked into the grammar was before we actually got proper adverb handling

[10:48] <arnsholt> *the Rakudo grammar

[10:48] *** skids left
[10:50] *** Kharec joined
[10:55] *** Abcxyz left
[10:57] *** gaussblurinc_ joined
[11:03] <masak> I'm not sure that particular colonpair gets to be called "adverb".

[11:04] <masak> adverbs are more like named options you pass to operators.

[11:04] <masak> like `$a + $b :carefully`

[11:04] <masak> (g'day #perl6)

[11:07] <hoelzro> masak: so is :sym<...> special?

[11:13] *** ankitsingh joined
[11:13] <masak> std: sub foo:hihihihi<14>() {}

[11:13] <p6eval> std a8bc48f: OUTPUT«ok 00:00 43m␤»

[11:13] <masak> hoelzro: no.

[11:14] <hoelzro> I see.

[11:14] <hoelzro> masak: so :sym is a trait?

[11:14] *** ankitsingh left
[11:15] <masak> "trait" is used for something else in the spec. in 'is rw', 'rw' is the trait.

[11:15] <hoelzro> I see

[11:15] <hoelzro> so what *is* :sym, then?

[11:15] <hoelzro> is it actually part of the name?

[11:15] <masak> as far as I know, it's just a somewhat unusual part of the... right.

[11:15] <FROGGS_> it is like a named parameter for a multi sub

[11:16] <FROGGS_> right?

[11:16] *** FROGGS_ is now known as FROGGS

[11:16] <masak> dunno. haven't thought much about this.

[11:16] <masak> in some sense, it shouldn't be part of the name, because this is the process that underlies protoregexes.

[11:17] <FROGGS> it's sad that you dont get the sym<> part when dumping a match though

[11:17] <masak> std: sub foo:several<names>:at<once>() {}

[11:17] <p6eval> std a8bc48f: OUTPUT«ok 00:00 43m␤»

[11:18] <masak> FROGGS: yeah, that sounds lossy.

[11:19] <hoelzro> I bring this up because token statement_control:sym<{ }> is one of the few things that my pygments lexer gets wrong

[11:19] <hoelzro> and I'm trying to think of the best way to codify the rules

[11:20] <jnthn> morning, #perl6

[11:20] <phenny> jnthn: 01 Jan 18:33Z <FROGGS> tell jnthn that I have a better approach: https://github.com/FROGGS/rakudo/pull/new/nom

[11:20] <phenny> jnthn: 01 Jan 18:34Z <FROGGS> tell jnthn I would like to make a new branch in the rakudo/rakudo repo, and would like to have commit bit for this, do I get your ok for this? I will also ask pmichaud

[11:20] <phenny> jnthn: 01 Jan 21:05Z <[Coke]> tell jnthn I split up the qast tests, but I am not really confident about my organization.

[11:20] <phenny> jnthn: 01 Jan 21:25Z <[Coke]> tell jnthn I have 'chars' added locally - it maps directly to String's length, but since that's an instance method, we can't map it directly like we did with the math methods, so I'm wrapping it in the ops class.

[11:20] <phenny> Further messages sent privately

[11:21] <masak> jnthn! \o/

[11:22] <jnthn> phenny: tell FROGGS you linked me to the new pull request form ;) I'm OK with you having a commit bit; please drop pmichaud an email about it, since he has the info on received CLAs.

[11:22] <phenny> jnthn: I'll pass that on when FROGGS is around.

[11:22] <masak> hoelzro: if I were you I'd look at how STD.pm6 parses :sym

[11:22] <hoelzro> ok, thanks

[11:23] <jnthn> the foo:sym<bar> is just parsed by longname.

[11:23] <jnthn> And sym is treated specially in the implementation of <sym>

[11:24] <masak> so things can have "the same name" (from a proto/multi perspective), but different longnames? makes sense.

[11:24] <jnthn> Yeah

[11:24] <jnthn> We really do take the proto name and scan the method list for things that start with that_name:sym<

[11:25] <jnthn> All colonpair names are canonicalized.

[11:25] <jnthn> So if you write :sym['lol'] it is actually installed as :sym<lol>

[11:27] <masak> hm... so using several colonpairs wouldn't work so well? :)

[11:27] <jnthn> phenny: tell [Coke] the approach you took for chars is the right one (or right enoubh for now...) - we shouldn't bind ourselves too tightly to Java String to the abstraction there is welcome.

[11:28] <phenny> jnthn: I'll pass that on when [Coke] is around.

[11:28] <jnthn> phenny: tell [Coke] arrays are [Type, e.g. [Integer

[11:28] <phenny> jnthn: I'll pass that on when [Coke] is around.

[11:28] * masak hands jnthn a keyboard where the keys aren't right next to each other :)

[11:29] <masak> I'm running *what* Niecza version!?

[11:29] * masak updates

[11:30] <jnthn> heh, I can't English

[11:32] *** spider-mario joined
[11:32] <FROGGS> jnthn: I gave you this link because you can see the diff there, but I dont want to make a pull request with these repo, wanna make a fresh and clean commit

[11:32] <phenny> FROGGS: 11:22Z <jnthn> tell FROGGS you linked me to the new pull request form ;) I'm OK with you having a commit bit; please drop pmichaud an email about it, since he has the info on received CLAs.

[11:32] <FROGGS> hmmm, I need his mail address then...

[11:32] <FROGGS> ohh, faund it

[11:32] <FROGGS> found

[11:44] <moritz> \o

[11:44] <masak> apparently, Quentin Tarantino has now made a movie about a Python MVC framework. I never thought I would live to see it.

[11:44] <masak> moritz! \o/

[11:44] <moritz> masak! \o/

[11:46] <jnthn> o/ moritz 

[11:46] <masak> moritz: many happy ⏎s :)

[11:47] <moritz> .u ⏎

[11:47] <phenny> U+23CE RETURN SYMBOL (⏎)

[11:47] <moritz> :-)

[11:47] <masak> or maybe ䷗s

[11:47] <masak> .u ䷗

[11:47] <phenny> U+4DD7 HEXAGRAM FOR RETURN (䷗)

[11:48] <masak> au++ # App::Uni

[11:50] *** xinming left
[11:50] *** xinming joined
[11:53] *** birdwindupbird joined
[11:59] *** fgomez left
[11:59] *** MayDaniel joined
[12:05] <dalek> nqp-jvm-prep: e72ad7d | jonathan++ | Makefile:

[12:05] <dalek> nqp-jvm-prep: Add a missing dependency.

[12:05] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/e72ad7de59

[12:05] <dalek> nqp-jvm-prep: 46250d9 | jonathan++ | t/qast_ (2 files):

[12:05] <dalek> nqp-jvm-prep: Pull 6model tests out to a separate file.

[12:05] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/46250d970c

[12:05] <dalek> nqp-jvm-prep: ee7efde | jonathan++ | t/qast_ (2 files):

[12:05] <dalek> nqp-jvm-prep: Split out aggregate tests also.

[12:05] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/ee7efde0bc

[12:06] <jnthn> coke++ # picking off lots of the LHF

[12:06] <au> TimToady++ # original author; App::Uni is just an implementation of it

[12:06] <jnthn> phenny: tell [Coke] tests breakup was good, I just did a few extra bits

[12:06] <phenny> jnthn: I'll pass that on when [Coke] is around.

[12:06] <au> . o O { "Implementation is the sincerest form of flattery." - L. Peter Deutsch }

[12:07] <dalek> nqp-jvm-prep: b26a32d | jonathan++ | docs/ROADMAP:

[12:07] <dalek> nqp-jvm-prep: Remove completed item.

[12:07] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/b26a32d857

[12:09] <nwc10> which fruit is now the lowest hanging? (or am I asking a stupid question because you're updating that file as I type?)

[12:10] <jnthn> nwc10: coke++ has been updating the LHF file. There's...not a lot left in it now. :)

[12:11] <jnthn> ROADMAP gives the longer view of stuff to do

[12:11] <nwc10> aha

[12:14] <masak> au: https://twitter.com/carlmasak/status/286445378038018050 :)

[12:15] <masak> there's something slightly loopy about all this...

[12:16] <au> you can say that again...

[12:21] <masak> :P

[12:22] <masak> nice, insightful comment on when to use right-associativity: http://arclanguage.org/item?id=16820

[12:22] <masak> I like the rule "if it takes a Foo and a Bar and gives you a Bar in return". I'll keep on the lookout for that.

[12:27] *** denisboyun_ joined
[12:34] *** skids joined
[12:37] *** gaussblurinc_ left
[12:39] <hoelzro> my pygments lexer successfully hilights all of Grammar.pm! \o/

[12:39] <hoelzro> (with two minor bugs)

[12:40] <moritz> \o/

[12:40] <moritz> minor bugs are OK for a language as difficult to parse as Perl 6

[12:42] <hoelzro> well, one is easy to fix

[12:42] <hoelzro> it's the one I mentioned earlier in the backlog

[12:42] <hoelzro> the other is role q { ... }

[12:43] <hoelzro> which the lexer is parsing as the role keyword + a quote word string

[12:44] <hoelzro> so I think what I'll do is fix the token sym: thing and announce an "alpha" of the lexer, so people can try it on their code, and see what breaks

[12:44] <arnsholt> If it makes you feel better, it took quite a while before Rakudo realized that it's supposed to be a role decl, not a quote string too =)

[12:44] <arnsholt> I think that particular bug was fixed with one of the improved LTM patches

[12:45] <hoelzro> I just have to tell the role rule in the lexer to look for an identifier and a look-ahead brace

[12:45] <hoelzro> it shouldn't be too bad!

[12:46] <hoelzro> I was going to test it on Actions.pm too, but I think that Grammar.pm is probably a good enough test

[12:47] <moritz> note again that rakudo's Grammar.pm is NQP, not Perl 6

[12:47] <hoelzro> ah, true

[12:48] <arnsholt> NQP's syntax is a subset of Perl 6 though, isn't it?

[12:48] <hoelzro> well, the reason I picked Grammar.pm is because a) it's a large body of Perl 6 code and b) it has a lot of token/rule/regex decls

[12:52] <FROGGS> ... and a lot of quoted and escaped things

[12:54] <hoelzro> FROGGS: which made it a pretty good test =)

[12:54] <hoelzro> I caught a *lot* of issues because of Grammar.pm

[12:54] <masak> std: q { ... }

[12:54] <p6eval> std a8bc48f: OUTPUT«ok 00:00 41m␤»

[12:55] <masak> I can see how that one is tricky, yes... :)

[12:56] <hoelzro> if anyone wants to try it out now, it's at https://bitbucket.org/hoelzro/pygments-main

[13:03] <moritz> hoelzro: https://github.com/perl6/std/blob/master/STD.pm6 might be an even better test :-)

[13:03] <hoelzro> heh

[13:04] <hoelzro> yikes, 6300 lines?!

[13:04] <hoelzro> 3800 was enough

[13:04] <masak> arnsholt: it is if you squint.

[13:04] <masak> arnsholt: about on the same level as JSON is a subset of JavaScript syntax.

[13:05] <arnsholt> Right, right

[13:19] <_sri> masak: JSON isn't really a subset of JavaScript http://timelessrepo.com/json-isnt-a-javascript-subset

[13:20] *** rindolf left
[13:21] *** rindolf joined
[13:21] <masak> _sri: ...which, if you read the context above, was really my point...

[13:21] <_sri> ok :)

[13:21] *** rindolf left
[13:22] *** rindolf joined
[13:22] <_sri> is there a list of incompatibilities between nqp and perl6?

[13:22] <masak> none that I'm aware of.

[13:23] <masak> nqp is fairly underdocumented, pending core dev tuits for such luxuries :)

[13:24] <_sri> yea, guess it's rather unimportant

[13:24] * _sri can't wait to see rakudo run on the jvm

[13:25] <arnsholt> Me too!

[13:25] *** wtw joined
[13:25] <arnsholt> And when it does, I'm gonna try to submit a talk to the local Java developer's conference =D

[13:26] <arnsholt> From the looks of it, I should probably aim for the 2014 edition

[13:26] <arnsholt> Since this year's conference is early february

[13:27] <masak> ++arnsholt

[13:27] <bbkr__> is there any built-in method to get hostname in p6?

[13:29] <masak> not to my knowledge.

[13:30] <masak> three hits for 'hostname' in S29.

[13:30] <masak> seems 'gethost' might be what you're looking for.

[13:30] <masak> (NYI anywhere)

[13:31] <arnsholt> There's always Zavolaj =)

[13:31] <arnsholt> Or maybe a Parrot builtin of some kind

[13:34] <FROGGS> there is nothing in parrots config AFAICT

[13:35] <dalek> doc: 5913946 | abcxyzp++ | lib/operators.pod:

[13:35] <dalek> doc: Update lib/operators.pod

[13:35] <dalek> doc: 

[13:35] <dalek> doc: One character typo fix.

[13:35] <dalek> doc: review: https://github.com/perl6/doc/commit/5913946b15

[13:35] <dalek> doc: cdb1cbb | (Konrad Borowski)++ | lib/operators.pod:

[13:35] <dalek> doc: Merge pull request #12 from ghost/patch-1

[13:35] <dalek> doc: 

[13:35] <dalek> doc: Update lib/operators.pod

[13:35] <dalek> doc: review: https://github.com/perl6/doc/commit/cdb1cbb916

[13:35] <bbkr__> star: use NativeCall; sub gethostname(Str is rw, Int) returns Int is native { ... }; my $x = ""; gethostname($x, 32);

[13:35] <p6eval> star 2012.12: OUTPUT«[31m===[0mSORRY![31m===[0m␤Null PMC access in get_bool()␤at /tmp/D_Ccua3CBR:1␤------> ␤»

[13:35] <[Coke]> jnthn: Danke.

[13:35] <phenny> [Coke]: 11:27Z <jnthn> tell [Coke] the approach you took for chars is the right one (or right enoubh for now...) - we shouldn't bind ourselves too tightly to Java String to the abstraction there is welcome.

[13:35] <phenny> [Coke]: 11:28Z <jnthn> tell [Coke] arrays are [Type, e.g. [Integer

[13:35] <phenny> [Coke]: 12:06Z <jnthn> tell [Coke] tests breakup was good, I just did a few extra bits

[13:37] <FROGGS> star: use NativeCall; sub gethostname( Str $a is rw, Int $n) returns Int is native { ... }; my $x = ""; say gethostname($x, 32); say $x

[13:37] <p6eval> star 2012.12: OUTPUT«0␤␤»

[13:39] <arnsholt> Oh, it wants to write to a buffer

[13:39] <arnsholt> That doesn't work yet

[13:40] <FROGGS> Inline::C would be your friend ;o)

[13:40] <arnsholt> And I'm not sure if we can make it work 100% transparently

[13:40] <FROGGS> (or an external c file)

[13:40] <arnsholt> Strings in Parrot are immutable, so we can't really diddle with the Parrot strings themselves

[13:40] <arnsholt> It might be possible to do some trickery with the containers though

[13:42] <jnthn> arnsholt: Probably we need to do something with Buf

[13:42] <arnsholt> Yeah, that's probably the best option

[13:43] <arnsholt> Other option would be an operation similar to the write-barrier we do on complex objects coming out of a foreign function

[13:43] <arnsholt> But that'd mean string compares on all function calls, which isn't going to be good for performance

[13:47] <bbkr__> ok, so if NativeCall way does not work yet can system command be executed? like $x = `hostname` in p5?

[13:48] <bbkr__> r: say `hostname`

[13:48] <p6eval> rakudo 13e805: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/Z7HWQOLMZb:1␤------> [32msay [33m⏏[31m`hostname`[0m␤    expecting any of:␤        argument list␤        prefix or term␤        prefix or meta-prefix␤        postfix␤        infix or meta-infix␤        in…

[13:49] <jnthn> try qx/hostname//

[13:49] <jnthn> er, with a single / at the end

[13:49] *** kaleem left
[13:50] <bbkr__> jnthn++ works, thanks!

[13:52] *** kivutar left
[13:56] *** rindolf left
[13:57] *** rindolf joined
[13:57] *** wtw left
[13:57] *** rindolf left
[13:58] *** rindolf joined
[14:00] *** kresike joined
[14:00] <kresike> hello all you happy perl6 people

[14:00] <FROGGS> hi kresike 

[14:01] <kresike> FROGGS, o/

[14:03] <rindolf> kresike: hi.

[14:03] *** [particle] joined
[14:04] *** cognominal joined
[14:07] *** atrodo joined
[14:10] *** PacoAir joined
[14:12] *** grondilu joined
[14:17] <kresike> rindolf, o/

[14:17] <rindolf> kresike: what's up?

[14:18] <kresike> rindolf, well if I look up, I see the ceiling, so I'd say that's up :)

[14:19] *** wtw joined
[14:20] *** am0c joined
[14:20] * rindolf grumbles.

[14:21] <ggoebel> jnthn: with regard to jvm backend are you aware of JSR 292 (InvokeDynamic) and JSR 335 (project Lambda)?

[14:21] <ggoebel> jnthn: http://irclog.perlgeek.de/perl6/2013-01-02#i_6290048

[14:28] *** cognominal left
[14:29] <masak> rindolf: if you're not happy with such answers, would you please mind telling us what *is* up? :P

[14:29] <[Coke]> ggoebel: neither of those are in a shipping java, neh?

[14:29] <au> 292 is. 335 is in the next one

[14:30] <au> JRuby uses 292 pretty heavily, as does Nashorn (Node.jar).

[14:31] <jnthn> ggoebel: I'm aware of inovkedynamic; the JAST thing I have should already be able to emit it or can with relatively little work. I'm not using it just yet, but have some ideas on how to.

[14:31] *** JJ_Brain joined
[14:31] *** denisboyun_ left
[14:31] <rindolf> masak: well, I've tweaked the CSS on http://www.shlomifish.org/ so it won't overflow when the font size is enlarged too much.

[14:31] <jnthn> ggoebel: 335 seems to be primarily about Java language changes, and I didn't yet see anything on changes being made to the JVM itself, which is what would be of more interest.

[14:31] <rindolf> At least not without enlarging the images simultaneously.

[14:32] <rindolf> And I tried E17 ZERO but it kept eating my Ctrl, Alt, etc. keys (at least in KDE apps) so I'm now back in KDE 4.

[14:33] <jnthn> oh, seems that default methods cause some changes

[14:34] <au> yeah, the semantic of invokeinterface and invokevirtual changed

[14:38] *** kaleem joined
[14:39] *** cognominal joined
[14:46] <JJ_Brain> Hi. I may have solved P=NP.  Here is the link http://mathbin.net/133965

[14:47] <moritz> JJ_Brain: please stop bothering us with that

[14:47] <JJ_Brain> ok. sorry.

[14:48] *** JJ_Brain left
[14:59] *** birdwindupbird left
[15:03] *** JJ_Brain joined
[15:06] *** [particle]1 joined
[15:09] *** [particle] left
[15:31] * masak wishes he had thought of making http://www.regexper.com/

[15:32] <masak> ooh, it uses Raphael.

[15:35] <[Coke]> masak++ #nifty.

[15:36] <jnthn> cute :)

[15:37] <masak> clearly I need to investigate this RaphaelJS thing.

[15:37] <masak> I mean, who's to say a presentation framework can't be built with it? :P

[15:39] <dalek> roast: c039739 | moritz++ | S10-packages/basic.t:

[15:39] <dalek> roast: RT #74592, return value from package declarations

[15:39] <dalek> roast: review: https://github.com/perl6/roast/commit/c0397397da

[15:39] *** kaare_ joined
[15:40] <moritz> any idea on how best to fix  https://rt.perl.org/rt3/Ticket/Display.html?id=71544 ?

[15:40] * jnthn has a look

[15:40] <moritz> it would be nice if one could copy the signature from one block to another

[15:41] *** cognominal left
[15:41] <moritz> and use a \c param on that block, so that one only copies the constraints, not the binding

[15:41] <moritz> or something like that

[15:42] <jnthn> hm

[15:42] <moritz> rakudo: say 1 if 2 if 3 { say 3 }

[15:42] <p6eval> rakudo 13e805:  ( no output )

[15:42] <moritz> std: say 1 if 2 if 3 { say 3 }

[15:42] <p6eval> std a8bc48f: OUTPUT«[31m===[0mSORRY![31m===[0m␤Missing semicolon at /tmp/yvUU8Qf3Ba line 1:␤------> [32msay 1 if 2[33m⏏[31m if 3 { say 3 }[0m␤Parse failed␤FAILED 00:00 42m␤»

[15:43] <jnthn> moritz: If we want to cheat a little...

[15:44] <jnthn> Signature caches arity/count rather than calcuating them each time.

[15:44] <moritz> woah

[15:44] <moritz> I see where the cheat is coming up :-)

[15:44] <jnthn> Which menas you can...yeah, you guessed. :D

[15:44] * jnthn feels a little dirty for suggesting it

[15:45] <jnthn> But it should fix the bug since MapIter only cares for .count, iirc.

[15:45] <jnthn> And the closure in grep is private to grep and passed straight on to MapIter.

[15:46] <moritz> aye

[15:46] <jnthn> We probably wanna shallow-clone the $!signature so two threads doing a grep at once don't hit issues

[15:46] <jnthn> Or just keep a cache of those by arity.

[15:47] <jnthn> The other way is to have a GrepIter, but it'd be laregly a copy paste of MapIter

[15:48] <masak> it's only cheating if you get caught :)

[15:48] <[Coke]> says the man who is going to catch them.

[15:48] <jnthn> :P

[15:49] *** [particle]1 is now known as [particle]

[15:50] *** isBEKaml joined
[15:50] <isBEKaml> hello, #perl6!

[15:52] <masak> isBEKaml! \o/

[15:53] *** xinming_ joined
[15:53] <isBEKaml> hola, masak! I see there was more activity on #perl6 than I thought. :)

[15:54] <pmichaud> Happy New Year, #perl6

[15:54] <phenny> pmichaud: 01 Jan 18:37Z <FROGGS> ask pmichaud if it would be possible to get commit bit for rakudo, my CLA is in walnut since november

[15:54] <masak> pmichaud! \o/

[15:54] <[Coke]> pmichaud: happy new year.

[15:54] <isBEKaml> oh, yeah - Happy new year! 

[15:54] <masak> isBEKaml: yeah. there is activity. the bastards haven't ground us down yet. :)

[15:54] <pmichaud> I'm fine with FROGGS getting a commit bit if nobody objects; I don't have his github id to do it myself.

[15:54] <pmichaud> Yes, TPF received his CLA.

[15:55] * masak was gonna ask :)

[15:55] <FROGGS> pmichaud: happy new year!

[15:55] <isBEKaml> masak: if you're referring to doomsday naysayers, yeah - they got their calculations wrong. :)

[15:55] <FROGGS> I'm FROGGS there

[15:55] <moritz> it's FROGGS, same as the nick

[15:55] <pmichaud> FROGGS: adding.

[15:55] <FROGGS> https://github.com/FROGGS/

[15:55] <FROGGS> yay

[15:55] <jnthn> happy new year, pmichaud :)

[15:56] <masak> isBEKaml: no, it's just an expression. https://en.wikipedia.org/wiki/Illegitimi_non_carborundum

[15:56] <isBEKaml> jnthn: good to see some work going on nqp-jvm. jnthn++

[15:56] *** xinming left
[15:56] <dalek> nqp-jvm-prep: 4557e1c | jonathan++ | docs/LHF.md:

[15:56] <dalek> nqp-jvm-prep: Dangle some more LHF. :-)

[15:56] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/4557e1c5fa

[15:57] <moritz> rakudo: say :foo<<string\ here>>.perl

[15:57] <p6eval> rakudo 13e805:  ( no output )

[15:57] <jnthn> isBEKaml: coke++ also :)

[15:57] <pmichaud> FROGGS: Added.

[15:57] <moritz> r: say <<a\ b>>.perl

[15:57] <p6eval> rakudo 13e805:  ( no output )

[15:57] <isBEKaml> masak: Oh, I had never heard of that expression before. 

[15:57] <FROGGS> pmichaud: thanks

[15:58] <pmichaud> all:  note that we don't require CLAs for commitbits to the star repo

[15:58] <jnthn> [Coke]: 4557e1c ;-)

[15:58] <isBEKaml> jnthn:  I remember adding a build.xml to the older nqp-jvm repo. Can I add it here too? Of course, all we need to do is add bcel jar to dependencies. :-)

[15:58] *** Kharec_ joined
[15:58] <isBEKaml> coke++

[15:58] <timotimo> what's a CLA?

[15:58] <moritz> pmichaud: so are star commit bits to be handed out roughly as freely as to the perl6/ repos?

[15:59] <PerlJam> Happy new year all!

[15:59] <moritz> timotimo: contributor's license agreement

[15:59] <pmichaud> moritz: yes

[15:59] <moritz> pmichaud: ok, noted

[15:59] <pmichaud> it's just the rakudo repo that requires CLAs

[15:59] *** kaleem left
[15:59] <timotimo> oh, ok

[15:59] <jnthn> isBEKaml: I know just about nothing about the Right Way to handle the building stuff with regard to Java projects. If you know about that, you're most welcome to a commit bit and to work on it :)

[15:59] <pmichaud> I'd be fine with us changing the membership team names to reflect that, fwiw.

[15:59] <isBEKaml> jnthn: https://github.com/svatsan/6model/blob/master/java/compiler/build.xml

[15:59] *** Kharec left
[15:59] *** brrt joined
[15:59] <[Coke]> isBEKaml: Hurm?

[15:59] <[Coke]> jnthn: Hey, I'm at $DAYJOB, stop that!

[15:59] <brrt> wait, i understand why for loops are lazy unless when in sink context

[16:00] <isBEKaml> jnthn: the problem with build stuff in java-land is that there are more ways to build it than I care to count. :-)

[16:00] <isBEKaml> jnthn: for instance, ant, ivy, maven - the big three. 

[16:00] <brrt> suppose you say my @foo = for (1..200) { $_ * 2 }; then return()-ing doesn't make sense

[16:00] <brrt> because, if you return from the routine, whatvalue will @foo have?

[16:00] <brrt> it'd be nonsense

[16:01] <isBEKaml> [Coke]: Keep shooting down those LHFs! :)

[16:01] *** Kharec_ left
[16:01] <jnthn> [Coke]: I'm gonna be traveling a lot for the next several days, so I figured it couldn't hurt to stock it up with ideas of things to work on before I go :)

[16:01] <[Coke]> isBEKaml: I'd probably go with ant, given we're not pulling in anything from outside the repo.

[16:01] <isBEKaml> [Coke]: but that would mean that we keep dependencies in source repo. I hope jnthn's okay with that. 

[16:02] <brrt> anyway, am i anywhere near the truth?

[16:02] <isBEKaml> [Coke]: all binary blobs that are jars. 

[16:03] <[Coke]> I will happily use something else if it's setup. Note that we already have a 3rdparty dir with bundled jars.

[16:03] <isBEKaml> Okay - 6model was 2 years ago. Really? (Time ran by fast. :( )

[16:03] <isBEKaml> (I'm looking at my own repo)

[16:04] <[Coke]> r: say(nqp::p6box_s(nqp::sha1("hey there, rakudo"));

[16:04] <p6eval> rakudo 13e805:  ( no output )

[16:05] <isBEKaml> r: say(nqp::p6box__s(nqp::sha1("Hey there")));

[16:05] <p6eval> rakudo 13e805:  ( no output )

[16:05] <moritz> r: say 42

[16:05] <p6eval> rakudo 13e805:  ( no output )

[16:05] * [Coke] thinks about half of those new ones look like LHF, and the others will require more thinking.

[16:05] <[Coke]> moritz: ... nice golf.

[16:06] <jnthn> isBEKaml: Lemme know your github ID if you want a commit bit for nqp-jvm-prep

[16:06] <[Coke]> maybe I should give you a .... golf clap.

[16:06] <isBEKaml> jnthn: not yet - I'm just afraid it might fall around like 6model. :(

[16:07] <[Coke]> jnthn: ok, a good chunk of that really does look like LHF. :)

[16:07] <[Coke]> thanks.

[16:07] <isBEKaml> jnthn: the github link I gave you above was from my own repo - 2 years ago. :(

[16:08] *** fgomez joined
[16:09] <jnthn> isBEKaml: The 6model repo was largely a place to do resarch. That fed into building the pieces that Rakudo works on today, and considered how they could look on other VMs. What's being done in nqp-jvm-prep is an implementation of the things we need to run today's NQP and Rakudo on the JVM.

[16:11] *** cognominal joined
[16:12] <isBEKaml> jnthn: I understand that. I'm more concerned that I may not be able to contribute as much as I want to, if the past is anything to go by. 

[16:13] <jnthn> isBEKaml: ah, I see

[16:13] <jnthn> isBEKaml: Well, just let me know if you fancy contributing something, and I'm happy to let you have a commit bit. :)

[16:14] <isBEKaml> jnthn: sure, if something comes out of my eclipse IDE. :)

[16:15] <jnthn> FROGGS: $foreign_proto := self.find_symbol([$_.key]); - is the foreign dispatcher not just be $_.value?

[16:16] <jnthn> I mean, the thing that's in scope when you do the find_symbol call is the same thing as the target proto, I think.

[16:16] *** isBEKaml left
[16:16] *** isBEKaml joined
[16:18] <isBEKaml> jnthn: in terms of the ROADMAP, where are we currently now?

[16:18] * masak .oO( not in Kansas anymore )

[16:19] <isBEKaml> lol

[16:20] <masak> don't let the wicked witch grind you down.

[16:22] <isBEKaml> masak: $day-job's playing that role now. 

[16:22] <moritz> r: my $x := $(); say $x.perl

[16:22] <p6eval> rakudo 13e805:  ( no output )

[16:23] <isBEKaml> r: my $x = $(); $x.WHAT.say;

[16:23] <p6eval> rakudo 13e805:  ( no output )

[16:23] <moritz> nr: $_ = 'abc'; m/(.)/; say $)(

[16:23] <p6eval> rakudo 13e805:  ( no output )

[16:23] <p6eval> ..niecza v24-12-g8e50362: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Non-declarative sigil is missing its name at /tmp/OKdZ4FdoPw line 1:␤------> [32m$_ = 'abc'; m/(.)/; say [33m⏏[31m$)([0m␤␤Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invoc…

[16:23] <moritz> nr: $_ = 'abc'; m/(.)/; say $()

[16:23] <p6eval> rakudo 13e805:  ( no output )

[16:23] <p6eval> ..niecza v24-12-g8e50362: OUTPUT«a␤»

[16:23] <isBEKaml> it's really broken now? 

[16:25] <jnthn> isBEKaml: https://github.com/jnthn/nqp-jvm-prep/blob/master/docs/ROADMAP is most of the stuff that needs building to get most of what's needed for cross-compiling NQP in place

[16:25] *** cognominal left
[16:25] <moritz> feather1's disc has run full

[16:26] <isBEKaml> jnthn: so, we are still laying the bricks, but no cement? 

[16:26] <moritz> everybody with a feather account, please check your home dirs

[16:27] <pmichaud> moritz: checking

[16:27] *** bluescreen10 joined
[16:28] <jnthn> isBEKaml: Depends what you consider as cement :)

[16:28] <moritz> pmichaud: yours looks not too big, with 84M

[16:28] <jnthn> .oO( ain't the cement meant to go between the bricks... )

[16:28] <pmichaud> moritz: it was 335M  :-)

[16:28] <pmichaud> I just removed 251M

[16:28] <moritz> pmichaud: thanks

[16:28] <isBEKaml> jnthn: yeah, we have nothing to stand on. :-)

[16:28] <moritz> ... and something is using up all that free space immediately

[16:29] <pmichaud> the 84M is the synopsis subversion dump from when we converted  svn->git

[16:29] <pmichaud> I'll keep it around just-in-case for a bit longer

[16:29] <moritz> pmichaud: +1

[16:29] <[Coke]> 11584 azawawi   20   0  5556 1484 1252 R 96.3  0.1 158:45.48 perl                ?

[16:29] <moritz> usually when the disc is full, it's one or two home dirs that are really huge

[16:29] <isBEKaml> jnthn: about your makefile, we depend on nqp to build and test nqp-jvm?

[16:30] <moritz> [Coke]: your home dir is 5.1G, do you need that all?

[16:30] <arnsholt> If space is immediately eaten up, maybe you have a runaway process?

[16:30] <jnthn> isBEKaml: Yes

[16:30] <[Coke]> moritz: I'm poking now.

[16:30] <jnthn> isBEKaml: nqp by now is written almost entirely in nqp

[16:30] <isBEKaml> moritz: I'm not sure, how much swap space is there now?

[16:30] <arnsholt> If you have lsof, that might  give you a pointer

[16:30] <moritz> isBEKaml: is that relevant?

[16:31] <isBEKaml> moritz: If we are talking about runaway processes. Like I said, I don't have any picture on this. 

[16:31] <jnthn> isBEKaml: The idea being that we'll get a cross-compiler going then getting it to spit out an nqp on JVM, that has no dependency on NQP on Parrot. :)

[16:31] <moritz> can I ask lsof to only list FDs opened for writing?

[16:32] <isBEKaml> jnthn: well, I was more of the impression that we have to have an nqp2jvm translator. 

[16:32] <jnthn> isBEKaml: Not really. At the moment it is a QAST -> JVM translator. :)

[16:32] <isBEKaml> jnthn: that is, translate nqp code directly to run on jvm :-) (naive, maybe)

[16:33] *** cognominal joined
[16:33] <arnsholt> moritz: From a skim of the man page, it seems that the FD output item describes the mode (read, write, ...) of an fd as well as its number

[16:33] *** pmurias joined
[16:35] *** thou joined
[16:35] <isBEKaml> jnthn: I have your project open in eclipse and am source-diving now. :)

[16:35] *** brrt left
[16:36] <moritz> oh dammit

[16:36] <pmichaud> -s to lsof shows file size, if that helps.

[16:36] <moritz> if a still-open file handle uses up all that space, du won't show it, right?

[16:36] <[Coke]> is there any point to more pruning of my homedir at this point?

[16:37] <pmichaud> moritz: correct, du doesn't find files not linked into the tree

[16:37] <moritz> [Coke]: just on general principle

[16:37] <pmichaud> s/tree/filesystem

[16:37] *** PacoAir left
[16:43] <[Coke]> is azawawi here?

[16:43] <moritz> http://moritz.faui2k3.org/tmp/lsof.out # outptu of lsof -s|grep home

[16:44] <pmichaud> /tmp/UIR5AJNtCP

[16:44] <pmichaud> rootfs is also at 100%

[16:44] <moritz> but that's not mounted on /home

[16:44] * moritz deletes that temp file

[16:45] *** Pleiades` left
[16:45] <pmichaud> I'm pretty sure it's the azawawi process that must be eating up space

[16:45] <pmichaud> there's also a long-running "gitit" process running.

[16:45] <moritz> gitit is our wiki, no?

[16:45] <[Coke]> pmichaud: he's running a temp file that shouldn't really be taking all that long.

[16:46] <moritz> killed

[16:46] <pmichaud> moritz:  I don't know anything about gitit

[16:46] <pmichaud> other than it's showing up at the top of 'top'

[16:46] <[Coke]> and now we're at 97%

[16:46] <pmichaud> and nothing appears to be eating up the free space 

[16:47] <pmichaud> and  root, /var, and /home all appear to be the same filesystem or device somehow

[16:47] <moritz> phenny: tell azawawi that I killed a process of his on feather that filled up the file systems. Please be more careful in future (ulimit is your friend)

[16:47] <phenny> moritz: I'll pass that on when azawawi is around.

[16:47] <pmichaud> (see output of 'df')

[16:47] *** wtw left
[16:48] <[Coke]> moritz: I'll clean up more homedir space after lunch.

[16:48] <kresike> bye folks

[16:48] *** kresike left
[16:49] <moritz> [Coke]: thanks

[16:49] * moritz runs apt-get autoclean

[16:49] <pmichaud> fwiw, the command I used to find the big temp file was   'lsof -s | grep -v "/lib/" | less'   and then search for azawawi

[16:49] <FROGGS> jnthn: I got errors when using $_.value instead of self.find_symbol([$_.key]), but yes, I thought too that these should be the same

[16:51] *** Pleiades` joined
[16:53] <jnthn> FROGGS: What errors, ooc?

[16:53] * jnthn tracks down RT#116268 to an optimizer issue

[16:55] <rindolf> FROGGS: hi.

[17:00] <isBEKaml> what's .WHO meant to do?

[17:01] <isBEKaml> r: Int.WHO.say

[17:01] <p6eval> rakudo 13e805:  ( no output )

[17:01] *** sftp left
[17:03] *** sftp joined
[17:04] <masak> r: say Int.WHO

[17:04] <p6eval> rakudo 13e805:  ( no output )

[17:04] <masak> hrm.

[17:05] <masak> r: module M {}; say M.WHO

[17:05] <p6eval> rakudo 13e805:  ( no output )

[17:05] <isBEKaml> in my local run, it always returns ().hash

[17:05] *** nyuszika7h joined
[17:06] *** wtw joined
[17:06] <jnthn> .WHO returns the underlying Stash (which is a kind of Hash)

[17:06] <jnthn> The place where our things inside the package live

[17:07] <masak> r: module M { our $foo }; say M.WHO

[17:07] <p6eval> rakudo 13e805:  ( no output )

[17:07] <masak> the stash is very... silent, though.

[17:07] <jnthn> masak: p6eval's Rakudo build currently busted due to disk space issue

[17:07] <masak> oh!

[17:07] <isBEKaml> masak: I thought you already knew that. 

[17:08] <isBEKaml> (p6eval build brokenness)

[17:08] *** REPLeffect left
[17:08] *** REPLeffect joined
[17:09] <isBEKaml> jnthn: S12 says that it's used to disambiguate methods between classes and traits. That's as far as my english skills go. :)

[17:09] <moritz> http://tonyarcieri.com/dci-in-ruby-is-completely-broken # seems that in most (all) ruby VMs, mixing a role into an instance invalidates all method cashes

[17:10] <masak> isBEKaml: I saw people talk about feather in the backlog, but I didn't connect the wires, it seems.

[17:11] *** wtw left
[17:11] <moritz> on feather, it seems that /var/spool/qmail is huge

[17:11] * isBEKaml thinks slow masak-ness is not something we see often. :P

[17:11] <moritz> I've been running a 'du' process on it for several minutes now, and now response yet

[17:12] <masak> isBEKaml: if that is so, it's only because I hide it well most of the time :P

[17:12] <moritz> and load average is >7

[17:13] *** pmurias left
[17:21] *** wtw joined
[17:23] <dalek> rakudo/nom: 0f0bb50 | jonathan++ | src/binder/bind.c:

[17:23] <dalek> rakudo/nom: Teach compile time bind analysis about (|) sig.

[17:23] <dalek> rakudo/nom: 

[17:23] <dalek> rakudo/nom: It now recognizes such a signature as accepting anything, and thus

[17:23] <dalek> rakudo/nom: certain to be a successful match.

[17:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0f0bb50054

[17:23] <dalek> rakudo/nom: f63c42d | jonathan++ | src/Perl6/Optimizer.pm:

[17:23] <dalek> rakudo/nom: Check proto as well as candidates in optimizer.

[17:23] <dalek> rakudo/nom: 

[17:23] <dalek> rakudo/nom: This fixes issues where we could end up inlining calls to candidates

[17:23] <dalek> rakudo/nom: that would never be reachable due to restrictions in the proto. Also,

[17:23] <dalek> rakudo/nom: we catch some such issues at compile time now.

[17:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f63c42d9a9

[17:23] <dalek> rakudo/nom: 799d759 | jonathan++ | src/core/Numeric.pm:

[17:23] <dalek> rakudo/nom: Fix incorrect exp proto.

[17:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/799d759c27

[17:23] *** REPLeffect left
[17:24] *** REPLeffect joined
[17:25] *** cognominal left
[17:30] <moritz> r: say 42

[17:31] <moritz> ok, /var/spool/qmail on feather is 16G

[17:31] <FROGGS> jnthn: give me a few minutes, I'll paste then...

[17:31] *** p6eval joined
[17:31] *** ChanServ sets mode: +v p6eval

[17:31] <FROGGS> rindolf: hi

[17:31] <rindolf> FROGGS: what's up?

[17:31] <moritz> any idea what to do about that?

[17:31] <moritz> I guess rm -rf isn't such a good idea, is it?

[17:32] <p6eval> rakudo : OUTPUT«Can't exec "./nom-inst/bin/perl6": No such file or directory at lib/EvalbotExecuter.pm line 200.␤exec (./nom-inst/bin/perl6 --setting=RESTRICTED /tmp/a6Y4pYPKQM) failed: No such file or directory␤Server error occurred! Closing Link: feather3.perl6.nl (Quit: p6eval)␤Lost …

[17:33] <FROGGS> rindolf: the kids (but only just), and perl 6 of course

[17:33] <rindolf> FROGGS: OK.

[17:34] <FROGGS> grammars a bit to parse perl 6 code, and bughunting

[17:37] *** am0c left
[17:38] <moritz> rn: say 42

[17:38] *** p6eval left
[17:39] <moritz> sorry, I guess I'll have to postpone fixing p6eval until feather has normal-ish performance characteristics again

[17:39] <moritz> and after my table tennis training :-)

[17:39] *** p6eval joined
[17:39] *** ChanServ sets mode: +v p6eval

[17:39] <moritz> though I won't complain if anybody beat me to it (fixing feather, that is :-)

[17:40] <moritz> bbi3h

[17:40] <moritz> &

[17:40] *** cognominal joined
[17:40] *** djanatyn joined
[17:40] <p6eval> ..niecza v24-12-g8e50362: OUTPUT«42␤»

[17:43] *** werwerwer left
[17:44] *** raiph joined
[17:44] *** p6eval left
[17:45] *** p6eval joined
[17:45] *** ChanServ sets mode: +v p6eval

[17:50] <dalek> rakudo/nom: bd41d2f | jonathan++ | src/Perl6/Optimizer.pm:

[17:50] <dalek> rakudo/nom: Improve error reporting when proto is to blame.

[17:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bd41d2f6a0

[17:51] *** regreg joined
[17:51] *** Targen_ left
[17:54] <tadzik> moritz: re feather diskspace, do you know of ncdu?

[17:54] <timotimo> ncdu is a nice tool, i use it often

[17:55] <tadzik> apparently it's even installed, my $HOME is ~750 meg

[17:55] <tadzik> was, actually :)

[17:56] <jnthn> std: say "You can even call &uc('functions')!"

[17:56] <p6eval> std a8bc48f: OUTPUT«ok 00:00 44m␤»

[18:00] <isBEKaml> jnthn: I almost got SHA1 working. (yes, "almost") :)

[18:04] <jnthn> :)

[18:05] *** Chillance joined
[18:12] *** cognominal left
[18:12] *** cognominal joined
[18:15] <jnthn> afk for a bit

[18:15] <FROGGS> jnthn: here it is: https://gist.github.com/4436609

[18:21] *** Kharec joined
[18:26] *** Targen joined
[18:26] *** MikeFair__ joined
[18:26] *** MikeFair_ left
[18:33] *** ismail joined
[18:34] *** regreg left
[18:43] <JJ_Brain> Thanks Raptor

[18:47] *** marloshouse left
[18:47] *** rindolf left
[18:47] *** thou left
[18:47] *** rindolf joined
[18:48] *** PacoAir joined
[18:48] <[Coke]> argh, other people stealing my LHF! ;)

[18:49] <[Coke]> It really shouldn't take minutes for 'ccache -C' to clear my cache, should it? ;(

[18:51] <isBEKaml> [Coke]: were you looking to implement sha1? 

[18:51] *** marloshouse joined
[18:51] <isBEKaml> [Coke]: You can take that if you want to. I'm just too tired today or I don't see anything at all. :)

[18:51] <flussence> [Coke]: depends on the filesystem. It's basically doing an rm -rf

[18:52] <[Coke]> isBEKaml: nono, that's fine, take it!

[18:52] <[Coke]> I'm stuck at $DAYJOB anyway.

[18:52] <isBEKaml> [Coke]: Ah, day-jobs eat up all our time. :(

[18:53] <[Coke]> spent last 2 days of break happily poking at nqp-jvm-prep as time permitted. 

[18:54] *** fgomez left
[18:55] *** thou joined
[18:55] <isBEKaml> hmm, I only have minutes to count before I drop off. (Another day wasted)

[19:05] *** rindolf left
[19:05] *** rindolf joined
[19:05] *** ifim joined
[19:07] *** rindolf left
[19:07] *** rindolf joined
[19:07] *** SamuraiJack left
[19:08] *** SamuraiJack joined
[19:10] *** SamuraiJack left
[19:11] <isBEKaml> now, where do we have tests for sha1 in nqp?

[19:27] <[Coke]> anyone know if it's safe to rm perlbrew's build/ dirs?

[19:28] <[Coke]> (uninstall didn't remove them.)

[19:32] *** MikeFair__ left
[19:38] *** MikeFair_ joined
[19:41] <masak> nice Rob Pike talk about lexing. http://www.youtube.com/watch?v=HxaD_trXwRE summary: don't write state machines as switch statements, that's boring. instead, just have lexing functions HOPly return each other.

[19:43] <flussence> H?

[19:43] <geekosaur> higher order programming

[19:43] <[Coke]> Higher Order Programmingly.

[19:44] <flussence> oh, duh. my brain decided "OP" was "-Oriented Programming" and got stuck :)

[19:44] <isBEKaml> jnthn: Here's my stab at sha1. Admittedly, all indentation is screwed, sleepiness and everything. https://github.com/svatsan/nqp-jvm-prep/commit/fd9587caf7b8ac3e348246fdb0481fabacf9c3b5 :)

[19:45] <isBEKaml> masak: I read that as "Happily" return each other. :|

[19:47] <[Coke]> isBEKaml: are you using eclipse?

[19:47] <isBEKaml> [Coke]: no,vim. 

[19:47] <isBEKaml> [Coke]: I originally did that in eclipse and I found that I needed to set up git. :/

[19:48] <flussence> an odd idea: is it possible to take a list of subs and attempt to use them as multis?

[19:48] <isBEKaml> (on windows), though I had it in cygwin. (so I switched to vim)

[19:48] <[Coke]> haivng all the whitespace changes makes it hard to digest that.

[19:49] <flussence> (by "list", I mean an actual runtime-assigned array of &code things)

[19:49] <isBEKaml> [Coke]: yeah, I know - here are the basic changes: https://gist.github.com/4437043 

[19:49] <[Coke]> other than that, +1, though.

[19:49] <isBEKaml> and follow down to the last one: in qast_string.t

[19:59] <[Coke]> someone bored? take over http://search.cpan.org/~tobix/OO-DateTime-0.01/ and kill it.

[20:02] *** cognominal left
[20:04] *** SmokeMac_ left
[20:07] <masak> [Coke]: what do you mean "and kill it"? there must be some assumed procedure I'm missing here.

[20:08] <FROGGS> well, once you are the owner you could write to ANDK and let him remove the registered namespace I guess

[20:09] <isBEKaml> masak: "kill boredom", mayhaps. :P

[20:09] *** zby_home joined
[20:09] <masak> isBEKaml: :)

[20:11] *** MikeFair_ left
[20:16] *** MikeFair_ joined
[20:19] *** ismail left
[20:27] <isBEKaml> :q

[20:27] * hugme hugs isBEKaml, good vi(m) user!

[20:28] <isBEKaml> :q

[20:28] * hugme hugs isBEKaml, good vi(m) user!

[20:28] *** cognominal joined
[20:29] *** isBEKaml left
[20:32] *** raiph left
[20:33] <dalek> rakudo/froggs_mergemulti: 763a621 | (Tobias Leich)++ | src/Perl6/World.pm:

[20:33] <dalek> rakudo/froggs_mergemulti: possible fix for multi-method import bug

[20:33] <dalek> rakudo/froggs_mergemulti: 

[20:33] <dalek> rakudo/froggs_mergemulti: This patch allows you to import multi methods from several modules.

[20:33] <dalek> rakudo/froggs_mergemulti: It merges the dispachtee lists. Two identical dispatchee signatures

[20:33] <dalek> rakudo/froggs_mergemulti: dont clash yet, since I am unable to compare signatures.

[20:33] <dalek> rakudo/froggs_mergemulti: review: https://github.com/rakudo/rakudo/commit/763a62173c

[20:36] <[Coke]> masak: remove it from CPAN is what I meant (so people don't confuse it with DateTime, as I just did)

[20:36] <[Coke]> Date::Time is just a pod file, that's it.

[20:36] <masak> ah.

[20:37] *** Santosh joined
[20:37] *** Santosh is now known as Guest10671

[20:37] *** PacoAir left
[20:38] *** PacoAir joined
[20:39] *** Guest10671 left
[20:41] *** SantoshR joined
[20:45] *** SantoshR left
[20:49] *** VIVIsectI joined
[20:51] *** cognominal left
[20:54] *** Pleiades` left
[20:55] *** VIVIsectI left
[20:59] *** cognominal joined
[21:00] *** Pleiades` joined
[21:05] *** raiph joined
[21:14] * jnthn back

[21:16] <[Coke]> jnthn: there's a pull request. I was going to try to tease out the whitespace formatting, but don't really care. Not sure if you do. (if we do, we should add project settings to enforce something.)

[21:17] *** zby_home left
[21:18] <jnthn> I'd rather it was consistently formatted

[21:18] <jnthn> Also, it shouldn't just go printing stuff to stderr, if there's an exception it should be thrown.

[21:19] <[Coke]> wasn't sure if we needed to rethrow there or not.

[21:20] <[Coke]> just let the original exception out?

[21:20] <jnthn> Can do that also

[21:20] <jnthn> s/also//

[21:22] <tadzik> obtw, jnthn, do you have your AOP module around somewhere?

[21:22] <tadzik> I thought today, now that there are threads and semaphores, this one is lines away from being a Monitor implementation possibly :)

[21:23] <jnthn> tadzik: I don't think I ever made it into a real module, but the code is probably easy to steal from the PDF

[21:25] *** snearch joined
[21:29] *** bluescreen10 left
[21:30] <masak> ++tadzik # publishing jnthn's AOP module :)

[21:31] <jnthn> ;0

[21:31] <tadzik> oh noes, I'm doomed

[21:35] <moritz> rn: say 42

[21:35] <p6eval> rakudo bd41d2, niecza v24-12-g8e50362: OUTPUT«42␤»

[21:35] <dalek> rakudo/nom: f5037ef | moritz++ | / (3 files):

[21:35] <dalek> rakudo/nom: remove "SAFE" setting

[21:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f5037efe39

[21:35] <moritz> \o/ p6eval fixed

[21:37] *** skids left
[21:37] <jnthn> \o/

[21:37] <jnthn> Righty, let's see if I can get anywhere with attributes in nqp-jvm...

[21:37] <moritz> I didn't do anything for that now, seems the cronjobs did it for me :-)

[21:38] <masak> the cronjobs made a commit?

[21:38] <masak> wow.

[21:38] <moritz> no, fixing p6eval :-)

[21:38] <masak> oh, right.

[21:39] <masak> by the way, we should totally have cronjobs making commits for us :)

[21:39] <moritz> I think [Coke]++ has

[21:39] <masak> anyway, clearly I'm too tired to IRC.

[21:39] <masak> 'night, #perl6

[21:39] <jnthn> 'night, masak

[21:39] <moritz> good night. Dream of not being tired.

[21:39] *** alex_Perl_new joined
[21:41] <alex_Perl_new> Is Python Perl6?

[21:42] <tadzik> hugme: hug alex_Perl_new 

[21:42] * hugme hugs alex_Perl_new

[21:42] <alex_Perl_new> Can anyone tell me if Python is perl6?

[21:42] <sorear> No

[21:42] <tadzik> welcome

[21:43] <sorear> Python is not Perl 6

[21:43] <alex_Perl_new> Thanks tadzik

[21:43] <alex_Perl_new> thanks sorear

[21:44] <moritz> nr: say 'Python' eq 'Perl6'

[21:44] <p6eval> rakudo bd41d2, niecza v24-12-g8e50362: OUTPUT«False␤»

[21:46] <alex_Perl_new> I Installed Rakudo but I could not find out how to instal an editor that could help with my Syntax. After 4 days I am going Crazy.

[21:46] <moritz> use vim

[21:46] <moritz> it has Perl 6 syntax hilighting

[21:46] <tadzik> alex_Perl_new: do you just need syntax hilighting, or something more sophisticated?

[21:47] <tadzik> that's a tricky questions, as I don't think anything more sophisticated is available :)

[21:47] <moritz> padre has some more sophisticated stuff, I think

[21:48] <alex_Perl_new> I think just hilithing would work, I have found many ways but can get them installed for windows. I think I just do not know much and Brut force is not working.

[21:48] *** MikeFair_ left
[21:48] *** MikeFair_ joined
[21:49] <alex_Perl_new> I even had problem to get on the IRC channel. I was using Browser. Finaly Instaled IRC App.

[21:50] * moritz hugs alex_Perl_new 

[21:50] <moritz> root@feather:~# qmail-qstat 

[21:50] <moritz> messages in queue: 1179019

[21:50] <moritz> messages in queue but not yet preprocessed: 1179019

[21:51] <tadzik> whoa

[21:51] <jnthn> yowser!

[21:52] <jnthn> Guess that's where the 16 gigs are :)

[21:52] <moritz> indeed

[21:53] <moritz> root@feather:~# /etc/init.d/qmail stop

[21:53] <moritz> Stopping mail-transfer agent: qmail not running.

[21:53] <alex_Perl_new> To All: I think here you all are just at a higher level than me. At this time I have been reading and reading and did not get any place yet. Finaly some one said get Python as it coms Complete. Use it Learn it then go to perl6.

[21:54] <alex_Perl_new> Is that correct? I cant even do simple thing like prodo::xxxx

[21:55] <moritz> wtf is prodo::xxxx ?

[21:55] <alex_Perl_new> do not even know were to type it.

[21:57] <alex_Perl_new> I whish very much to undrestand "wtf is prodo::xxxx ?" Where do I Start to learn perl <period> ? lol

[21:57] <jnthn> alex_Perl_new: Perl 6 isn't yet at the point where things are packaged up in the way you're seeking. If you're looking for getting into Perl then Perl 5 may be easier in some senses, since there's for example the Padre IDE, which probably gives you the experience you are after.

[21:58] <jnthn> alex_Perl_new: And I'd expect Perl 5 => Perl 6 will be an easier jump than Python => Perl 6 if that's your end goal.

[21:59] <alex_Perl_new> <alex_Perl_new> What do you recomend I am a good programer I just lost to get started.

[21:59] <[Coke]> moritz: yes, I have cronjobs that commit for me. I do the push, though.

[22:00] * moritz just deletes all the large files in the qmail queue

[22:00] <jnthn> alex_Perl_new: See http://padre.perlide.org/download.html

[22:00] <jnthn> The windows download on the left.

[22:01] <alex_Perl_new> Thanks jntn I will do that.

[22:01] <flussence> alex_Perl_new: what is this "prodo::xxxx" you speak of? http://www.google.com/search?q=%22prodo::xxxx%22

[22:03] *** am0c joined
[22:04] <alex_Perl_new> jnthn, Should I remove Rakudo and Activeperl and python before installing  DWIM Perl 5.14.2.1 (v7).

[22:04] <moritz> alex_Perl_new: no need for that

[22:06] <alex_Perl_new> Maritz, Would they not conflect with each othe. and in the Command line of Windows when i enter perl -v what would it say and How does it know wiich perl?

[22:06] <moritz> they do not conflict.

[22:07] <moritz> alex_Perl_new: most or all of the Rakudo developers use Perl 5 too, so we had incentive to make them not conflict

[22:08] <jnthn> alex_Perl_new: Note that Rakudo's executable is called perl6.exe, and python's is probably python.exe, so no risk there :)

[22:09] <alex_Perl_new> Thanks to all I hope as time passes I can learn to be helpful to others here. I am going to try now.

[22:10] <moritz> something is really strange on feather

[22:10] <moritz> I've been running rm -rf on the qmail queue (which is 16G in size) for several minutes

[22:10] <moritz> and the load goes up to 7

[22:10] <flussence> is it on ext3?

[22:10] <moritz> but 'df' doesn't report more free space

[22:10] <moritz> flussence: yes

[22:11] <flussence> it's probably sorting through a gigantic maildir and everything else is getting blocked on IO

[22:11] <moritz> you mean it sorts before it starts to delete?

[22:12] <[Coke]> moritz: is it the same thing were somethig else is grabbing space as you open it?

[22:12] <flussence> well, it has to read the directory before deleting... and if it's an old machine it probably doesn't have dir_index enabled so that's a linear scan each time

[22:20] *** Kharec left
[22:21] <[Coke]> might explain why it was so slow to clear out my ~/.ccache

[22:23] <[Coke]> Glitchmr is holding at 17% Mem util.

[22:24] <[Coke]> p6eval should probably nice itself when building.

[22:24] <moritz> aye, it should

[22:25] * moritz -> sleep

[22:30] <[Coke]> ugh. feather is behaving oddly. "ls .cpanm" hangs, ^C doesn't kill it.

[22:30] <flussence> try ^\

[22:32] *** alex_Perl_new left
[22:32] <[Coke]> p6eval is no longer building, and now things are much better.

[22:33] <[Coke]> and ^\ doesn't help when things are hanging in this case, unfortunately.

[22:33] <[Coke]> (not immediately, anyway)

[22:37] *** bitonic joined
[22:38] <bitonic> is there a go-to document to learn about perl6?  I know next to 0 about perl5.

[22:39] *** colomon joined
[22:40] <FROGGS> bitonic: get the book: https://github.com/perl6/book/downloads

[22:40] <bitonic> FROGGS: thank you.  I suppose that’s going to be good with the rakudo shipped with wheezy?

[22:41] <bitonic> rakudo 0.1~2012.01-1 specifically

[22:41] <FROGGS> well, these are a bit outdated so some things might not work

[22:41] <FROGGS> wow, there are huge improvements since then

[22:42] <bitonic> OK, so I should get a newer one...

[22:42] <FROGGS> right

[22:42] <FROGGS> bitonic: maybe install this: https://github.com/rakudo/star

[22:42] <FROGGS> it comes with some useful modules

[22:43] <bitonic> FROGGS: thanks

[22:43] <FROGGS> bitonic: if you arn't used to git you might download a zipball from here: http://rakudo.org/

[22:43] <FROGGS> bitonic: you're welcome

[22:44] <bitonic> FROGGS: I am used to scm, but I might download something else to get something more stable then an HEAD

[22:50] *** rindolf left
[22:56] *** kaare_ left
[23:01] *** nwc10 left
[23:12] *** PacoAir left
[23:15] *** skids joined
[23:48] *** snearch left
[23:51] *** bitonic left
