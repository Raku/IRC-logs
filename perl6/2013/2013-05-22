[00:21] *** fgomez left
[00:23] *** dayangkun joined
[00:27] *** lustlife joined
[00:29] *** SamuraiJack__ left
[00:30] *** fgomez joined
[00:32] *** SamuraiJack__ joined
[00:41] *** grondilu left
[00:43] *** s1n joined
[00:43] *** SamuraiJack__ left
[00:52] *** berekuk left
[00:55] *** PacoAir left
[00:56] *** berekuk joined
[01:01] *** japhb_ left
[01:04] *** anuby joined
[01:13] *** dayangkun left
[01:17] *** berekuk left
[01:18] *** snuffles left
[01:25] *** snuffles joined
[01:42] *** jaldhar joined
[01:50] *** sqirrel_ joined
[01:50] *** FROGGS_ joined
[01:54] *** FROGGS left
[01:54] *** sqirrel left
[01:56] *** adu joined
[02:25] *** japhb_ joined
[02:32] *** Vlavv left
[02:47] *** prevost left
[02:52] *** crash joined
[02:52] *** crash is now known as Guest67231

[02:53] *** Guest67231 left
[02:58] *** Vlavv joined
[03:19] *** prevost joined
[03:57] *** preflex left
[03:58] *** preflex_ joined
[03:58] *** preflex_ is now known as preflex

[04:21] *** zby_home_ joined
[04:24] *** ccc joined
[04:25] *** Psyche^ joined
[04:28] *** Patterner left
[04:28] *** Psyche^ is now known as Patterner

[04:41] *** salv0 left
[04:56] *** salv0 joined
[05:08] *** fgomez left
[05:16] *** sisar joined
[05:29] *** fhelmberger joined
[05:30] *** dmol joined
[05:44] *** prevost left
[05:45] *** zby_home_ left
[05:58] *** fhelmberger left
[05:59] *** FROGGS_ left
[06:01] *** kaleem joined
[06:06] *** Shozan is now known as SHODAN

[06:11] *** FROGGS_ joined
[06:12] *** FROGGS_ is now known as FROGGS

[06:16] *** dmol left
[06:31] *** daniel-s__ is now known as daniel-s

[06:31] <dalek> v5: 19ecc83 | (Tobias Leich)++ | t/test.pl:

[06:31] <dalek> v5: silence warnings in sub is()

[06:31] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/19ecc83152

[06:31] <dalek> v5: 01aa6d2 | (Tobias Leich)++ | lib/Perl5/Terms.pm:

[06:31] <dalek> v5: add P5Str to Bool

[06:31] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/01aa6d291f

[06:31] <dalek> v5: c799910 | (Tobias Leich)++ | lib/Perl5/ (4 files):

[06:31] <dalek> v5: move $? to Perl5::Terms

[06:31] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/c799910ce9

[06:40] *** ggoebel left
[06:43] *** fgomez joined
[06:46] <dalek> v5: e320b09 | (Tobias Leich)++ | STATUS.md:

[06:46] <dalek> v5: status update after changes to is(), Bool.P5Str and $?

[06:46] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/e320b0948f

[06:59] *** brrt joined
[06:59] *** sisar left
[07:02] *** ggoebel joined
[07:08] *** daxim joined
[07:15] *** SamuraiJack__ joined
[07:19] *** SamuraiJack__ left
[07:20] *** SamuraiJack joined
[07:20] *** domidumont joined
[07:23] <dalek> roast: 12bcc92 | moritz++ | S32-hash/ (2 files):

[07:23] <dalek> roast: unfudge slice+adverb tests

[07:23] <dalek> roast: review: https://github.com/perl6/roast/commit/12bcc92978

[07:24] *** salv0 left
[07:24] *** salv0 joined
[07:25] *** SamuraiJack left
[07:28] *** adu left
[07:33] *** kresike joined
[07:33] <kresike> hello all you happy perl6 people

[07:33] <sorear> o/

[07:33] <brrt> hi kresike

[07:36] <labster> good morning all

[07:38] <FROGGS> O/

[07:38] *** fgomez left
[07:39] *** arlinius left
[07:40] *** fgomez joined
[07:42] <labster> r: say "VERSION".IO.slurp

[07:42] <camelia> rakudo 267c54: OUTPUT«No such method 'readall' for invocant of type 'Any'␤  in method slurp at src/gen/CORE.setting:11159␤  in block  at /tmp/G_LsJSxR_V:1␤␤»

[07:43] <labster> r: say "VERSION".IO.open.slurp

[07:43] <camelia> rakudo 267c54: OUTPUT«v15-4-g1f35f89␤␤»

[07:43] <labster> Should the first version work?

[07:44] <moritz> yes

[07:44] <moritz> the error message leaks internal details

[07:45] <labster> well, that's a problem too... but opening the handle isn't specced.

[07:46] <moritz> r: say slurp 'VERSION'

[07:46] <camelia> rakudo 267c54: OUTPUT«v15-4-g1f35f89␤␤»

[07:46] <labster> different spec for the method.  I think I'll probably fix that.

[07:46] <moritz> it just feels weird if the sub form works without explict open, but the method form doesn't

[07:47] <moritz> ++labster

[07:51] <labster> oh, hilarious, IO::Handle.open isn't specced

[07:51] *** domidumont left
[07:52] *** domidumont joined
[08:09] *** tgt joined
[08:10] *** arlinius joined
[08:12] <sorear> sandbox fail

[08:24] <dagurval> r: "/tmp/hai".IO.spurt("hello")

[08:24] <camelia> rakudo 267c54: OUTPUT«No such method 'spurt' for invocant of type 'IO::Handle'␤  in block  at /tmp/7FDla8CYpg:1␤␤»

[08:25] <dagurval> if IO::Handle has slurp, shouldn't it also have spurt?

[08:26] <lizmat> moritz++

[08:31] <moritz> dagurval: .spurt is the same as .print, really

[08:32] <moritz> oh, except that .spurt would auto-open too

[08:32] <FROGGS> hmmm, but with an implicit open and close, no?

[08:32] <moritz> so, yes

[08:32] <FROGGS> :o)

[08:32] <moritz> FROGGS++, dagurval++

[08:32] <labster> dagurval: I saw your pull request on spurt -- I was thinking that spurt(IO::Handle)  should be a wrapper around IO::Handle.spurt.

[08:33] *** dakkar joined
[08:34] *** kurahaupo left
[08:35] *** fildon joined
[08:40] <labster> does open( :p ) mean pipe?

[08:40] <FROGGS> yes

[08:41] * lizmat wonders if that is not too confusing with :p from .pairs

[08:42] <labster> Are the contexts at all similar?

[08:43] <moritz> no

[08:43] <moritz> but open( :p ) is likely to be replaced with a separate pipe() function or so anyway

[08:43] *** domidumont left
[08:43] <lizmat> ok

[08:55] *** ilogger2 joined
[08:55] *** ChanServ sets mode: +v ilogger2

[08:57] * moritz introduces open('file', :kv), which opens 'file' as a key-value store. All just to annoy lizmat++ :-)

[08:58] <lizmat> actually, I love key-value stores…  been using MySQL for years like that  :-)

[08:58] <bonsaikitten> moritz: perl6. the NoSQL language of choice? ;)

[09:03] <brrt> nice

[09:06] <lizmat> moritz: actually, would the :kv imply Any %h{Str}, or would it allow for other keytypes / of as well

[09:07] <moritz> lizmat: I was really just kidding

[09:07] <lizmat> too bad, because I really need that, actually  :-)

[09:07] <lizmat> but maybe not as part of open()

[09:08] <lizmat> more likely on slurp() and spurt()

[09:09] *** berekuk joined
[09:10] *** berekuk left
[09:11] *** berekuk joined
[09:15] <labster> I'm adding IO::Handle.encoding instead, which I think will be more useful.

[09:16] *** rindolf joined
[09:24] *** PacoAir joined
[10:02] *** fhelmberger joined
[10:05] *** berekuk left
[10:08] *** berekuk joined
[10:10] *** berekuk left
[10:12] *** daniel-s joined
[10:15] *** kivutar joined
[10:21] <lizmat> psssttt…  everybody's a hacking!

[10:21] *** arlinius joined
[10:22] * lizmat is working on :delete in combination with :k:v:kv:p

[10:22] <lizmat> and wonders why not to add :vk immediately as well, masak?

[10:52] *** ccc joined
[10:57] *** fhelmberger_ joined
[11:00] *** skids joined
[11:01] *** fhelmberger left
[11:19] *** brrt joined
[11:37] *** skids left
[11:49] *** SamuraiJack joined
[11:51] *** domidumont joined
[12:15] *** census joined
[12:22] *** brrt left
[12:48] *** gdey joined
[12:56] *** prevost joined
[13:03] <lizmat> Support for subscript adverb :delete in combination with :kv :p :k :v   https://github.com/rakudo/rakudo/pull/158

[13:03] <timotimo> how many of them can you have at the same time? :D

[13:03] <lizmat> See S02:2514

[13:03] <lizmat> Combining subscript adverbs

[13:04] <timotimo> foun dit

[13:04] <timotimo> sometimes perl6 is just crazy :)

[13:04] <lizmat> the last 6 are trickier than I thought

[13:07] <lizmat> next thing, writing more todo tests :-)

[13:07] *** shinobicl joined
[13:13] *** tgt joined
[13:18] *** bluescreen10 joined
[13:21] *** snuffles joined
[13:21] *** ajr joined
[13:22] *** ajr is now known as Guest64567

[13:29] *** raiph joined
[13:40] *** domidumont left
[13:43] <raiph> S02:2514 (eg) lands far from intended target. view source shows line num links are borked

[13:45] *** pmurias joined
[13:45] <pmurias> tadzik: ping

[13:45] <lizmat> raiph: you mean in the irclog?

[13:45] *** census left
[13:45] <raiph> right

[13:46] <lizmat> ok, that would be up moritz' alley

[13:46] <lizmat> afk for a few hours

[13:46] <raiph> it's not the link, it's the target html file

[13:48] <raiph> to clarify, yes, the link from the irclog, but no, the error is in http://perlcabal.org/syn/S02.html

[13:56] *** kivutar left
[13:56] *** skids joined
[14:04] *** SamuraiJack left
[14:05] *** cognominal joined
[14:12] *** census joined
[14:16] <moritz> raiph: those are generated from util/Text-SmartLinks/script/smartlinks.pl in the Mu repo, iirc

[14:20] *** tgt left
[14:21] *** bluescreen10 left
[14:25] <census> hi!  is anybody here familiar with cygwin?

[14:26] *** bluescreen10 joined
[14:28] *** FROGGS joined
[14:30] *** zby_home_ joined
[14:32] *** xilo joined
[14:32] *** kaare_ joined
[14:34] *** tgt joined
[14:48] *** tgt left
[14:55] <kresike> bye folks

[14:55] *** bluescreen100 joined
[14:59] *** bluescreen10 left
[15:00] *** IKARi_ joined
[15:00] *** IKARi_ is now known as Guest7461

[15:00] *** rindolf left
[15:03] <tadzik> pmurias: pong

[15:03] *** SamuraiJack joined
[15:07] *** SamuraiJack left
[15:07] *** SamuraiJack joined
[15:10] *** census left
[15:14] *** djanatyn left
[15:14] *** djanatyn joined
[15:18] *** ajr joined
[15:18] *** Guest64567 left
[15:18] *** ajr is now known as Guest17532

[15:18] *** gdey left
[15:19] *** Guest17532 is now known as ajr_

[15:24] *** shinobicl left
[15:24] *** salv0 joined
[15:30] *** Guest7461 left
[15:32] <pmurias> tadzik: is there a suggested hotel/hostel where people coming to the PLPW are staying? (like at a yapc?)

[15:33] *** fhelmberger_ left
[15:33] *** domidumont joined
[15:34] *** Guest7461 joined
[15:34] *** Guest7461 left
[15:35] <tadzik> pmurias: no, no particular one

[15:35] <tadzik> there's a "who stays where" at the wiki

[15:35] <tadzik> I think sergot_ found some chaep one nearby too

[15:37] *** ikariwing joined
[15:37] *** ikariwing left
[15:38] *** IKARi__ joined
[15:39] *** fhelmberger joined
[15:39] *** fgomez joined
[15:41] <daxim> tadzik, where's the preconf beet-up at?

[15:42] *** Pleiades` joined
[15:43] <tadzik> daxim: http://maps.google.com/maps?saddr=Metro+Politechnika,+Warsaw,+Poland&daddr=Znajomi+Znajomych+s.c.,+Wilcza,+Warsaw,+Poland&hl=en&sll=37.0625,-95.677068&sspn=49.490703,106.962891&geocode=FRPQHAMdDKxAASllKIKz6MweRzGoOZ4Z8ZgNkw%3BFWbfHAMdo5dAASEHYPdBYMzSVimZwmsz7MweRzEHYPdBYMzSVg&oq=Znajomi+Z&t=m&mra=ls&z=17

[15:43] <tadzik> uhh

[15:43] <tadzik> well, linked from 

[15:43] <tadzik> http://act.yapc.eu/plpw2013/news/1019

[15:43] <tadzik> also on http://plpw2013.pl/

[15:44] <tadzik> please sign up on the wiki if you're coming

[15:44] <tadzik> oh, you did :) daxim++

[15:44] *** felher joined
[15:50] <jnthn> evening, #perl6

[15:50] <tadzik> evening jnthn 

[15:53] *** crab2313 joined
[15:57] *** dmol joined
[15:57] <masak> evening, #perl6!

[15:59] *** raiph left
[16:01] <FROGGS> o/

[16:09] *** crab2313 left
[16:15] *** SamuraiJack left
[16:21] *** Woodi left
[16:21] *** Woodi joined
[16:21] *** pmurias left
[16:30] *** PacoAir left
[16:31] *** fhelmberger left
[16:32] *** tgt joined
[16:32] *** PacoAir joined
[16:36] *** ajr_ left
[16:43] <masak> lizmat: I'm fine with adding :vk immediately.

[16:50] *** raiph joined
[16:51] <TimToady> .oO(how do you spell .p backwards?)

[16:52] <TimToady> er, :p even

[16:52] <geekosaur> ... :q ?

[16:52] <FROGGS> q:

[16:54] <masak> r: say (1 => 2).reverse

[16:54] <camelia> rakudo 267c54: OUTPUT«1 2␤»

[16:54] <masak> hrm.

[16:55] <FROGGS> r: say @(1 => 2).reverse

[16:55] <camelia> rakudo 267c54: OUTPUT«1 2␤»

[16:55] <FROGGS> :/

[16:55] <GlitchMr> masak, I think you can unban me now. I think my connection is now more stable.

[16:56] <masak> GlitchMr: will do.

[16:56] <GlitchMr> (at least I hope so)

[16:56] <masak> GlitchMr: done.

[16:58] <FROGGS> argh!, "for my $x (1) { ... }" is driving me nuts, it declares $x outside of for's body -.-

[16:58] <FROGGS> pointy blocks make so much more sense

[16:58] <GlitchMr> Huh?

[16:59] <GlitchMr> I though that my $x is only visible inside for {} here

[16:59] <FROGGS> v5 that is

[16:59] *** denisboyun_ joined
[17:00] <GlitchMr> In Perl 5, if I remember correctly "for" variable can be only "local" or "my".

[17:00] <GlitchMr> So it never should declare it outside of for's body.

[17:01] *** ajr joined
[17:01] *** gdey joined
[17:01] *** ajr is now known as Guest5909

[17:02] <FROGGS> GlitchMr: I'm talking about the v5-module I am writing for rakudo

[17:02] *** itz__ joined
[17:02] <FROGGS> so, your expectation is totally right, my module is just misbehaving

[17:03] <TimToady> r: say int.^nativesize

[17:03] <camelia> rakudo 267c54: OUTPUT«0␤»

[17:03] <TimToady> um...

[17:03] <FROGGS> hehe

[17:03] *** REPLeffect joined
[17:03] <FROGGS> NOT ENOUGH!!

[17:03] <GlitchMr> Native size of int is 0.

[17:03] <TimToady> r: say int8.^nativesize

[17:03] <camelia> rakudo 267c54: OUTPUT«8␤»

[17:03] <GlitchMr> Makes sense.

[17:03] <FROGGS> GlitchMr: how can it possibly be zero?

[17:03] <TimToady> you'd think it would know how big an int is...

[17:03] <GlitchMr> That's simple, it contains nothing.

[17:04] <jnthn> TimToady: I suspect 0 is being used to indicate "machine specific"

[17:04] <FROGGS> I am thinking of an C-type int when reading 'native int'

[17:04] <jnthn> TimToady: That is, "we didn't set it to anything" :)

[17:05] <FROGGS> jnthn: the vm should be queried to set that

[17:05] <TimToady> well, then how do I find out what that machine-specific size is?  the size of int8 is rather boring

[17:05] <FROGGS> use Config? :P

[17:05] * TimToady is trying to write the RC entry for getting variable sizes

[17:06] <jnthn> TimToady: Hm, point. It simply wasn't designed for conveying that.

[17:06] *** Guest5909 is now known as ajr_

[17:06] <TimToady> r: class { has int $.foo }; # how does this know the size?

[17:06] <camelia> rakudo 267c54:  ( no output )

[17:06] <jnthn> Such is the wonder of having a MOP. Stuff you added to get stuff done is suddenly user visible :)

[17:07] <TimToady> well, just wait till I start working on the entry for *setting* a variable's size :)

[17:07] <FROGGS> >.<

[17:07] <jnthn> TimToady: Well, the "nativesize" thing is conveyed to the REPR, which is a low-level thing that in the Parrot case just does sizeof(INTVAL) these days.

[17:08] <jnthn> TimToady: The sized stuff is hardly "done" in any sense. What's done is there to be useful to NativeCall.

[17:08] <jnthn> Though I think arnsholt++ got some of the P6opaque bits righter too

[17:12] <FROGGS> about my "for my $x (1) { ... }"-problem, I guess I should call check_variable() within sblock, and set a dynvar in token for

[17:18] *** tgt left
[17:22] <jnthn> dinner, bbl

[17:27] *** tgt joined
[17:41] *** mucker joined
[17:50] <dalek> perl6-roast-data: ba9d001 | coke++ | / (4 files):

[17:50] <dalek> perl6-roast-data: today (automated commit)

[17:50] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/ba9d001d8d

[17:51] <[Coke]> rakudo still failing (18 days)

[18:02] <TimToady> r: say int64.^nativesize;

[18:02] <camelia> rakudo 267c54: OUTPUT«64␤»

[18:02] <TimToady> r: my int64 $long-long; say $long-long.^nativesize

[18:02] <camelia> rakudo 267c54: OUTPUT«No such method 'nativesize' for invocant of type 'Perl6::Metamodel::ClassHOW'␤  in block  at /tmp/x42SMusW2B:1␤␤»

[18:05] <TimToady> r: my int64 @long-long; say @long-long.of.^nativesize

[18:05] <camelia> rakudo 267c54: OUTPUT«No such method 'of' for invocant of type 'Int'␤  in block  at /tmp/E7rHzFav63:1␤␤»

[18:05] <TimToady> o_O

[18:06] <flussence> r: my int64 %longlong; say %longlong.of.^nativesize

[18:06] <camelia> rakudo 267c54: OUTPUT«No such method 'of' for invocant of type 'Int'␤  in block  at /tmp/OxZnR0JF4v:1␤␤»

[18:06] <flussence> that's weird, it says «of class 'Int'» on my end...

[18:07] <TimToady> er, .of should be *returning* Int, not looking up .of in Int

[18:07] *** snuffles left
[18:07] <TimToady> well, it should be returning int64, but that's a different issue

[18:07] <lizmat> hi #perl6!   (back from cycling + dinner)

[18:08] <lizmat> masak: unless @TimToady disagrees, I will implement :vk

[18:08] <TimToady> are we getting a double call to .of.of somehow?

[18:09] <lizmat> and update the spec accordingly :-)

[18:09] <TimToady> or is it not finding .^nativesize in type Int and emitting a bogus error message on .of's dispatch instead?

[18:09] <TimToady> r: my Int @long-long; say @long-long.of.^nativesize

[18:09] <camelia> rakudo 267c54: OUTPUT«No such method 'nativesize' for invocant of type 'Perl6::Metamodel::ClassHOW'␤  in block  at /tmp/dtJB8rEgFy:1␤␤»

[18:09] <diakopter> rn: say (Array[Int].new=[]).WHAT

[18:09] <TimToady> no, that's a diffrent error

[18:09] <camelia> niecza v24-51-g009f999: OUTPUT«Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object␤  at Builtins.InvokeSub (Niecza.P6any obj, Niecza.Variable[] pos) [0x00000] in <filename unknown>:0 ␤  at Niecza.Kernel.ToComposable (Niecza.STable arg…

[18:09] <camelia> ..rakudo 267c54: OUTPUT«(Array+{TypedArray})␤»

[18:10] <TimToady> sigh, they're all typed arrays...

[18:10] <lizmat> and the WHAT doesn't tell what type if it  :-(

[18:11] <TimToady> well, the stringification of it doesn't

[18:11] <TimToady> .WHAT itself is a type object

[18:11] <[Coke]> I would really like to get this rakudo GC issue resolved before the next release.

[18:11] <lizmat> so, is there a way to found out what the type is?  Of a TypedArray or TypedHash

[18:11] <TimToady> r: say (Array[Int].new=[]).WHAT.WHICH

[18:11] <camelia> rakudo 267c54: OUTPUT«Array+{TypedArray}␤»

[18:12] <diakopter> r: say (Array[Int].new=[])

[18:12] <camelia> rakudo 267c54: OUTPUT«␤»

[18:12] <TimToady> but yeah, it should oughta mention Int in there somewhere

[18:12] <[Coke]> also, if I"ve pinged you about a modules failure, I'd appreciate it if you could take a look so we can consider a star release this month. (perljam, arnsholt. jnthn, not sure if you can resolve the xavolaj bug or not.)

[18:13] <[Coke]> (sorry about bad spelling, typing blind. ;)

[18:14] <[Coke]> (no failures in rakudo today other than the GC error)

[18:17] <masak> today's autopun spotting: https://twitter.com/HackerNewsOnion/status/337262936613609472

[18:23] <dalek> specs: 451c4bb | (Elizabeth Mattijsen)++ | S02-bits.pod:

[18:23] <dalek> specs: Added spec for :vk subscript adverbial

[18:23] <dalek> specs: 

[18:23] <dalek> specs: I assume we will need a .vk method later as well.  Will spec this later unless

[18:23] <dalek> specs: someone beats me to it / tells me not to do it.

[18:23] <dalek> specs: review: https://github.com/perl6/specs/commit/451c4bbfc0

[18:28] <[Coke]> why do we need .vk ?

[18:28] <[Coke]> (what is it solving that .kv doesn't?)

[18:28] *** denisboyun___ joined
[18:29] <[Coke]> (looks like this is the only place it's in the specs)

[18:30] *** denisboyun_ left
[18:31] *** gudahtt joined
[18:31] <lizmat> [Coke] is not wrong about that

[18:32] <lizmat> it was something that came up the other day, with masak, and since I was working in that part of the neighborhood anyway, and I can also see a use for it in some situations

[18:32] <lizmat> I specced it

[18:33] <TimToady> we can probably come up with a better name than 'nativesize' too, which has both the ill-defined term "native", as well as the overly-generic term "size"

[18:33] <lizmat> TimToady: homesize?

[18:33] <diakopter> can't use bytes?

[18:33] <TimToady> it's *bits*, case proven

[18:33] <diakopter> byteseach?

[18:33] <diakopter> bitseach?

[18:34] <lizmat> natsize

[18:34] <labster> I guess it would be cheaper than .kv.reverse, though .vk would be an easy typo.

[18:34] <lizmat> labster: right now, it would *not* be cheaper, bit it *could*

[18:35] <TimToady> we already know it's native anyway, so just .bits, except that we have several of those measurements to deal with

[18:35] <[Coke]> -1 to adding .vk - looks very reundant compared to .kv

[18:35] <diakopter> TimToady: are you looking for information capacity of the unit, or amount of memory used

[18:35] <TimToady> the bits attached to a type may or may not be the overall size in bits of the type

[18:35] <TimToady> for int64, yes, both are 64, but for complex64, the overall size is 128

[18:35] <TimToady> (in bits)

[18:35] <diakopter> which one are you looking for

[18:36] <[Coke]> I didn't see any serious discussion in the irc logs, mainly a note to add it as a whimsical addition to list::utils

[18:37] <TimToady> maybe .bits returns the base size of the type, and .bytes returns the actual memory footprint, including alignment

[18:37] <flussence> but... Str.bytes

[18:38] <lizmat> [Coke]: i'll halt implementation until we have a consensus  :-)

[18:38] <TimToady> assuming we never want to measure memory footprint as less than a byte, which is a dubious assumption for bit arrays and such

[18:38] <TimToady> flussence: you mean Buf.bytes surely

[18:38] <TimToady> Str doesn't do bytes

[18:38] <flussence> probably, yeah.

[18:38] <TimToady> well, those are the same sized bytes, so it's okay

[18:38] <flussence> oh, that's fine then

[18:39] <TimToady> say int2.^bytes;  #  0.25  :)

[18:39] <diakopter> heh.

[18:41] <TimToady> as one datapoint, I've never felt the need for vk meownself

[18:42] *** eiro joined
[18:42] <TimToady> so I wouldn't necessarily add it just for some kind consistency or completeness

[18:43] <dalek> specs: c33114e | (Elizabeth Mattijsen)++ | S02-bits.pod:

[18:43] <dalek> specs: Revert "Added spec for :vk subscript adverbial"

[18:43] <dalek> specs: 

[18:43] <dalek> specs: This reverts commit 451c4bbfc0dc3b0337392962cbb7e5c57cba7135.

[18:43] <dalek> specs: review: https://github.com/perl6/specs/commit/c33114e392

[18:44] <TimToady> does NativeHOW store alignment requirements yet?  doesn't seem like it...

[18:44] <lizmat> that's good enough as a "no" to me  :-)

[18:48] *** Chillance joined
[18:49] *** denisboyun___ left
[18:51] <labster> okay, since we're in the mood to complain about adding things, does anyone have any opinion on adding IO::Handle.encoding, to read/set file encoding?

[18:52] <jnthn> TimToady: Alignment is a REPR concern, not a meta-object one.

[18:52] <jnthn> TimToady: Desired size is only a meta-object concern in that we tell the meta-object stuff so they can compose the REPR with the right stuff.

[18:53] <jnthn> So unless we think configurable alignment is desirable... :)

[18:54] <jnthn> Which I guess it perhaps is. Hm. :)

[18:55] <diakopter> :alignment('left-drifting')

[18:55] <masak> as another datapoint, I have felt the need for .vk -- namely, in connection with reversing a list of key/value items.

[18:56] <lizmat> masak: [Coke]'s argument is that you can do that with .kv.reverse

[18:57] <lizmat> ah, of course, but *not* as a subscript adverbial in a chain

[18:57] <lizmat> right?

[18:57] <masak> lizmat: .kv.reverse was what I did -- and then I had to give the for loop parameters in the $value, $key order.

[18:58] *** berekuk joined
[19:00] <TimToady> okay, initial entry for http://rosettacode.org/wiki/Variable_size/Get#Perl_6

[19:00] <timotimo> oh, interesting

[19:00] <timotimo> a few days ago i was looking at that and wondered how to do it

[19:02] *** stevan_ joined
[19:05] <TimToady> jnthn: from a language point of view, repr is hidden behind .HOW, therefore it's a meta-object thing :)

[19:06] <TimToady> but for something like complex64 I'd like some way to query both the 64 and the 128

[19:06] <TimToady> or maybe the 64 bits and the 16 (bytes)

[19:06] <TimToady> whether or not it includes alignment in the latter

[19:07] <jnthn> r: say Int.REPR :P

[19:07] <camelia> rakudo 267c54: OUTPUT«[31m===[0mSORRY![31m===[0m␤You can't adverb that␤at /tmp/advqSmzP1v:1␤------> [32msay Int.REPR :P[33m⏏[31m<EOL>[0m␤    expecting any of:␤        pair value␤»

[19:07] <jnthn> oops :)

[19:07] <jnthn> r: say Int.REPR # :P

[19:07] <camelia> rakudo 267c54: OUTPUT«P6opaque␤»

[19:07] <jnthn> Can we make smileys at end of lines ok? ;)

[19:07] <jnthn> TimToady: Will ponder the best way, though maybe we should just make .^bits or something work :)

[19:07] <TimToady> r: say Int.^nativesize;  # I see a .^ there :P

[19:07] <camelia> rakudo 267c54: OUTPUT«No such method 'nativesize' for invocant of type 'Perl6::Metamodel::ClassHOW'␤  in block  at /tmp/wVgxufvinY:1␤␤»

[19:08] <TimToady> r: say int.^nativesize;  # I see a .^ there :P

[19:08] <camelia> rakudo 267c54: OUTPUT«0␤»

[19:08] <jnthn> It's only on NativeHOW at present, and it only existed so far to pass the stuff down to the REPR...

[19:08] <jnthn> I can see the use for it serving the role you're after; I'm not immediately sure of the best way to make it happen.

[19:09] <jnthn> (Which is probably just exhaustion :))

[19:10] <TimToady> std: say Int.REPR :P

[19:10] <camelia> std 0336087: OUTPUT«ok 00:00 42m␤»

[19:10] <TimToady> it's already okay :)

[19:10] <TimToady> n: say Int.REPR :P

[19:10] <camelia> niecza v24-51-g009f999: OUTPUT«Unhandled exception: Unable to resolve method REPR in type Int␤  at /tmp/bmDWfn5Alo line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4331 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4332 (module-CORE @ 582) ␤  at /home/p…

[19:10] <dagurval> how can I pass on all args to a sub, to another. Like "sub my_print { print @_ };" in perl5?

[19:11] <dagurval> oh, that works in perl6, nevermind :)

[19:11] <jnthn> sub foo(|c) { bar(|c) }

[19:11] <dagurval> ok, thanks!

[19:11] <TimToady> dagurval: don't do it the P5 way or things will get flattened more than you want

[19:12] <TimToady> since P6 depends on binding to decide whether something is in item or list context

[19:12] <TimToady> you want to be as lazy as possible about that decision, and |c gets you that

[19:12] <dagurval> I see

[19:12] * lizmat suspects a near autopun

[19:13] <dagurval> perl6 - be as lazy as possible!

[19:13] *** denisboyun_ joined
[19:13] <masak> lizmat: TimToady speaks in autopuns most of the time ;)

[19:14] <masak> "We all agree on the necessity of compromise. We just can't agree on when it's necessary to compromise.

[19:14] <jnthn> r: gather { take die "strasse to the left" }

[19:14] <camelia> rakudo 267c54: OUTPUT«strasse to the left␤current instr.: 'throw' pc 344141 (src/gen/CORE.setting.pir:150298) (src/gen/CORE.setting:8791)␤called from Sub 'die' pc 36512 (src/gen/CORE.setting.pir:14284) (src/gen/CORE.setting:578)␤called from Sub 'die' pc 36410 (src/gen/CORE.setting.pir:1…

[19:14] <masak> " -- Larry Wall :)

[19:14] <jnthn> Hmmm

[19:14] <jnthn> Does anybody have an example handy that produces that nasty coroutine error report?

[19:15] * jnthn may be able to figure out a fix for the release...

[19:15] <masak> r: die "Bart Simpson"; # means "The Bart Simpson"

[19:15] <camelia> rakudo 267c54: OUTPUT«Bart Simpson␤  in block  at /tmp/yc9VIHz01N:1␤␤»

[19:15] <lizmat> not "der" ?

[19:15] <jnthn> hm, or maybe it's in RT...

[19:16] <lizmat> jnthn: fwiw, I only saw that error when I messed something up in the core setting

[19:16] <timotimo> lizmat: the joke requires the german part of that to be wrong

[19:16] <lizmat> my impression is that it is an error message going wrong

[19:16] <masak> lizmat: it's a wrong error hiding a real error, yes.

[19:16] <masak> that much is known.

[19:17] *** domidumont left
[19:17] <jnthn> lizmat: I think I've seen it on the channel

[19:18] <masak> jnthn: ask and RT answers: https://rt.perl.org/rt3/Ticket/Display.html?id=117763

[19:18] <masak> r: sub p(*@l) { gather { if @l == 1 { take @l } else { @l.shift; for p(@l) -> @p {} } } }; say p 1..4

[19:18] <camelia> rakudo 267c54: OUTPUT«get_attr_str() not implemented in class 'Coroutine'␤current instr.: 'print_exception' pc 102623 (src/gen/CORE.setting.pir:46363) (src/gen/CORE.setting:8977)␤called from Sub '' pc 481 ((file unknown):269) (/tmp/T9e7Sa9Ebm:1)␤called from Sub '' pc 281061 (src/gen/COR…

[19:18] <masak> there we go.

[19:18] *** japhb_ joined
[19:19] <jnthn> tack

[19:19] <masak> r: sub p($n) { gather { if $n == 1 { take $n } else { $n--; for p($n) -> @p {} } } }; say p 4

[19:19] <camelia> rakudo 267c54: OUTPUT«get_attr_str() not implemented in class 'Coroutine'␤current instr.: 'print_exception' pc 102623 (src/gen/CORE.setting.pir:46363) (src/gen/CORE.setting:8977)␤called from Sub 'postfix:<-->' pc 72826 (src/gen/CORE.setting.pir:32060) (src/gen/CORE.setting:3307)␤called …

[19:20] <masak> slightly simpler; don't know why I didn't think of that when I golf'd it.

[19:20] <masak> doesn't require the array.

[19:20] <masak> r: sub p($n) { gather { if $n == 1 { take $n } else { $n--; for p($n) -> @p {} } } }; say p 2

[19:20] <camelia> rakudo 267c54: OUTPUT«get_attr_str() not implemented in class 'Coroutine'␤current instr.: 'print_exception' pc 102623 (src/gen/CORE.setting.pir:46363) (src/gen/CORE.setting:8977)␤called from Sub 'postfix:<-->' pc 72826 (src/gen/CORE.setting.pir:32060) (src/gen/CORE.setting:3307)␤called …

[19:20] <masak> r: sub p($n) { gather { if $n == 1 { take $n } else { $n--; for p($n) -> @p {} } } }; say p 1

[19:20] <camelia> rakudo 267c54: OUTPUT«1␤»

[19:20] <masak> requires the recursion, though.

[19:22] *** zby_home_ left
[19:22] *** colomon joined
[19:24] <masak> r: say gather { if 2 == 1 { take 1 } else { gather { take 1 } } }

[19:24] <camelia> rakudo 267c54: OUTPUT«␤»

[19:25] <masak> r: say gather { if 2 == 1 { take 1 } else { take gather { take 1 } } }

[19:25] <camelia> rakudo 267c54: OUTPUT«1␤»

[19:28] <timotimo> does every instance of any class also carry around an instance of ClassHOW?

[19:28] <timotimo> s/ an / their own /

[19:28] <jnthn> There's an instance of ClassHOW per class declaration.

[19:29] <jnthn> Not per instance of that class.

[19:29] <timotimo> so does ClassHOW.new create an instance of the class it describes?

[19:29] <jnthn> No

[19:29] <timotimo> then what's the need for new_type?

[19:29] <jnthn> it creates a new instance of ClassHOW, which is not very useful.

[19:29] <jnthn> typically you want new_type, which does call ClassHOW.new

[19:30] <jnthn> But instead makes a new type object with the required HOW and REPR.

[19:30] <timotimo> OK

[19:30] <jnthn> We don't actually have a Perl 6 way to express what nqp::newtype does yet.

[19:30] <timotimo> (i don't even know what that does)

[19:30] <masak> timotimo: each ordinary instance carrying around its own unique ClassHOW instance would defeat the purpose of ClassHOW objects, which is to represent an entire class.

[19:31] <timotimo> makes sense

[19:31] <timotimo> .o(still idly wondering why rakudo on parrot swallows as much RAM as it does for even the smallest programs)

[19:32] <masak> better check whether each instance doesn't have its own ClassHOW instance after all :P

[19:33] <timotimo> :D

[19:35] *** brrt joined
[19:35] *** scottp joined
[19:37] *** Gothmog__ joined
[19:38] <timotimo> how many differences are there between perl6 -e '...' and running a file with the same contents?

[19:38] *** jnthn_ joined
[19:38] <dagurval> r: "/tmp/asdf".IO.open.say("hello")

[19:38] <camelia> rakudo 267c54: OUTPUT«IO PMC FileHandle is not in mode 2␤  in method print at src/gen/CORE.setting:11143␤  in method print at src/gen/CORE.setting:11141␤  in method say at src/gen/CORE.setting:11154␤  in method say at src/gen/CORE.setting:889␤  in block  at /tmp/VB8Pty1H5_:1␤␤»…

[19:38] <dagurval> what's "mode 2"?

[19:38] *** broquain1 joined
[19:38] *** gfldex_ joined
[19:38] *** Ulti_ joined
[19:38] *** Hor|zon_ joined
[19:38] <lizmat> propably low level access level presentation?

[19:39] *** telex joined
[19:39] <FROGGS> timotimo: there is no difference, is there?

[19:39] *** snuffles joined
[19:39] <timotimo> there shouldn't be

[19:39] <timotimo> but there should also not be much of a difference between pasting code line-by-line into the repl and running it from a file ;)

[19:40] <dagurval> r: "/tmp/asdf".IO.open(:w).say("hello")

[19:40] <camelia> rakudo 267c54:  ( no output )

[19:40] <FROGGS> well, the repl does extra stuff, no?

[19:40] <dagurval> That worked :)

[19:40] *** snuffles left
[19:40] *** jnthn_ is now known as jnthn

[19:41] *** atrodo_ joined
[19:42] *** bluescreen100 left
[19:42] <dalek> nqp: 9e31a04 | jonathan++ | src/vm/parrot/6model/sixmodelobject.c:

[19:42] <dalek> nqp: Fix reporting of errors in gather/take.

[19:42] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9e31a04a72

[19:42] *** tgt left
[19:42] *** atrodo_ is now known as atrodo

[19:42] *** Gothmog__ is now known as Gothmog_

[19:43] *** REPLeffect left
[19:43] <timotimo> FROGGS: indeed, but it behaves wrong in some cases, like resetting $! in between lines

[19:44] *** Celelibi_ joined
[19:45] <FROGGS> yeah

[19:46] *** SamuraiJack joined
[19:46] *** dukelet0 joined
[19:46] <timotimo> in the specs it says "WHY         (reserved for documentation?)", but in the current implementation, that's already what happens. should i describe how rakudo does it currently as the spec?

[19:46] <dukelet0> o/

[19:46] <FROGGS> I mean, I never use the repl but have heard that it evaluates lines because it cant really know when a statement ends

[19:47] <masak> timotimo: yes, please.

[19:49] *** lue joined
[19:50] *** risou_awy joined
[19:50] *** brrt left
[19:51] *** brrt joined
[19:53] *** skids left
[19:53] <dalek> roast: 8fa9b8c | (Elizabeth Mattijsen)++ | S32-hash/delete-adverb.t:

[19:53] <dalek> roast: Added tests for single key combined adverbials

[19:53] <dalek> roast: 

[19:53] <dalek> roast: Specifically, :delete with :p, :kv, :k, :v.  Slices and whatever tests will

[19:53] <dalek> roast: follow.

[19:53] <dalek> roast: review: https://github.com/perl6/roast/commit/8fa9b8ccba

[19:55] <masak> lizmat++

[19:57] <timotimo> hm, how would a local variable be decorated with a .WHY? is that even possible?

[19:58] <masak> timotimo: just pod it?

[19:59] <masak> the declaration, that is.

[19:59] <timotimo> er, wrong question. how do i read that out with introspection?

[20:01] <flussence> $var.^WHY ?

[20:01] <flussence> wait, no

[20:01] <flussence> something like that though

[20:02] <timotimo> i think that would have to at least be $var.^WHY($var)

[20:02] <timotimo> because all vars of the same type share the object that responds to .^ calls (as i learn a few hours ago)

[20:03] <dalek> specs: 2d423f2 | (Timo Paulssen)++ | S12-objects.pod:

[20:03] <dalek> specs: .WHY is specced now.

[20:03] <dalek> specs: review: https://github.com/perl6/specs/commit/2d423f2f1f

[20:03] <jnthn> $var.VAR.WHY I guess

[20:04] <lizmat> calling it an early night: part 1 of a long ride to Warsaw tomorrow, part 2 the day after

[20:04] <flussence> r: https://gist.github.com/flussence/5630469

[20:04] <camelia> rakudo 267c54: OUTPUT«(Any)␤bar␤»

[20:04] <flussence> that seems broken to me.

[20:05] <lizmat> see you at PLPW, those of you who will be there!

[20:05] <timotimo> flussence: but that would go to Int.WHY anyway, shouldn't it?

[20:06] <jnthn> lizmat: Safe travels, see you at the pre-conf piwo :)

[20:06] <lizmat> piwo?

[20:07] <jnthn> lizmat: Most important word in Polish :)

[20:07] <lizmat> bar?

[20:07] <jnthn> beer :)

[20:08] <lizmat> close but no cigar, I guess  (which is good because I don't smoke)

[20:08] <lizmat> afk&

[20:08] <jnthn> o/

[20:08] <timotimo> when's the compiler release supposed to happen?

[20:09] <FROGGS> tomorrow

[20:09] <timotimo> oh my

[20:09] <timotimo> that's soon

[20:09] <FROGGS> :o)

[20:11] <dalek> nqp: 3a9be10 | jonathan++ | src/vm/jvm/QAST/Compiler.nqp:

[20:11] <dalek> nqp: iEnsure NQP JVM bulids in master.

[20:11] <dalek> nqp: 

[20:11] <dalek> nqp: So the first release with it actually has it building.

[20:11] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3a9be10a33

[20:11] <jnthn> oops

[20:11] <jnthn> .oO( Not sure if Apple fanboy or incompetent vi user... )

[20:12] <FROGGS> too much piwo?

[20:12] <jnthn> Not had any tonight

[20:12] *** denisboyun_ left
[20:12] <FROGGS> me neither, I've got a cold ó.ò

[20:13] * jnthn has sleep deprevation...

[20:13] <jnthn> And general ill feeling

[20:13] <jnthn> Hopefully I'll be better for plpw

[20:13] <diakopter> jnthn: go to bed :)

[20:13] <FROGGS> yeah :/

[20:13] <FROGGS> doesnt help if you cant sleep

[20:14] <FROGGS> that is my problem right now, lying around there for hours, then sleep from two to six

[20:14] <jnthn> diakopter: yes, going to bed hasn't been the problem...it's failing to sleep when I get there, and an inability to compensate my sleeping in due to teaching.

[20:15] * masak has sleep depravation

[20:15] * jnthn was slightly horrified to arrive around 8:30am this morning, expecting to start at 9:00, and find a room full of pepole expecting him to tell them insightful stuff... 

[20:15] <timotimo> were you late or were they too early?

[20:16] <timotimo> well, it was probably a miscommunication in any case

[20:16] <jnthn> Mostly, mismatched/non-communicated assumptions :)

[20:16] <jnthn> Teaching assignments here normally start at 9:30 at the teaching centers on the first day, or 9:00 or so when I head on site :)

[20:17] <jnthn> Anyway, I was all prepared, just had less time to reduce the blood level in my coffeestream...

[20:18] <timotimo> hehehe

[20:19] <sorear> o/

[20:19] <FROGGS> o/

[20:19] <jnthn> o/ sorear 

[20:19] <timotimo> currently looking a bit at the grammar for Pod docs attachment. it seems the right place for making my $foo work with POD blocks is variable_declarator; so i'll have to look if there's a $*DECLARATOR_DOCS (from the line before) and set a $*DOCEE (for when the Pod is in the same line further to the right)

[20:19] <timotimo> is that about right

[20:20] <dalek> rakudo-star-daily: 4332170 | coke++ | log/ (5 files):

[20:20] <dalek> rakudo-star-daily: today (automated commit)

[20:20] <dalek> rakudo-star-daily: review: https://github.com/coke/rakudo-star-daily/commit/4332170cf6

[20:20] <[Coke]> rakudo star: modules/perl6-File-Tools is passing again

[20:20] <jnthn> OK, I got the two NQP patches in that I wanted to pre-monthly-release :)

[20:23] <jnthn> oh, 15:35

[20:23] <jnthn> uh, ww

[20:27] <timotimo> [Coke]: i cannot reproduce the dash-e.t failures locally

[20:27] *** SamuraiJack left
[20:29] <timotimo> ah, i see. "XXX var traits NYI"

[20:29] *** bowtie joined
[20:29] <timotimo> probably more work than just a little bit

[20:32] <tadzik> oh, huh

[20:32] <tadzik> so I'm not the only one with a practical narcolepsy these days?

[20:32] *** sjn left
[20:32] <tadzik> I just fell asleep for like, 4 hours

[20:32] *** sjn joined
[20:33] <timotimo> i have something similar, but combined with not being able to sleep at night

[20:33] <tadzik> that I had on monday

[20:33] <tadzik> good. I thought there's something wrong with me, but now at least I'm not alone with my misery :)

[20:34] <FROGGS> ó.ò

[20:34] <FROGGS> must be this channel

[20:34] <sorear> impractical narcolepsy

[20:35] <timotimo> agreed.

[20:38] *** REPLeffect joined
[20:39] <dalek> roast: 0485c59 | dagurval++ | S32-io/spurt.t:

[20:39] <dalek> roast: More spurt tests, including (to be?) spurt method in IO::Handle

[20:39] <dalek> roast: review: https://github.com/perl6/roast/commit/0485c592ee

[20:48] *** rindolf joined
[20:53] *** Celelibi_ is now known as Celelibi

[20:56] *** kaare_ left
[21:04] *** brrt left
[21:07] *** spider-mario joined
[21:08] *** bowtie left
[21:10] *** spider-mario left
[21:13] *** bowtie joined
[21:17] *** skids joined
[21:17] *** bowtie left
[21:21] *** bowtie joined
[21:38] *** ccc left
[21:44] *** stevan_ left
[21:48] *** dmol left
[21:51] <dalek> v5: 59ca6bd | (Tobias Leich)++ | STATUS.md:

[21:51] <dalek> v5: fudged tests (modules like Config.pm are not in ../lib)

[21:51] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/59ca6bde31

[21:51] <dalek> v5: 76db4d2 | (Tobias Leich)++ | lib/Perl5/Terms.pm:

[21:51] <dalek> v5: fixed P5Str for Array/List

[21:51] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/76db4d2e5f

[21:51] <dalek> v5: 6f80ba5 | (Tobias Leich)++ | / (3 files):

[21:51] <dalek> v5: iterator in for-loops is declared in for's body

[21:51] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/6f80ba599e

[21:58] *** grondilu joined
[22:03] *** stevan_ joined
[22:04] *** kurahaupo joined
[22:08] <timotimo> &textfrom := &substr.assuming :str($text):len(Inf);  -  doesn't this actually need a : after assuming?

[22:09] <FROGGS> yes think so

[22:10] <timotimo> r: my &textfrom := &substr.assuming :str($text):len(Inf);

[22:10] <camelia> rakudo 267c54: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable '$text' is not declared␤at /tmp/4eSpo_vzJS:1␤------> [32m&textfrom := &substr.assuming :str($text[33m⏏[31m):len(Inf);[0m␤    expecting any of:␤        postfix␤»

[22:10] <timotimo> r: my &textfrom := &substr.assuming: :str($text):len(Inf);

[22:10] <camelia> rakudo 267c54: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable '$text' is not declared␤at /tmp/jVB0J9BsAZ:1␤------> [32mtextfrom := &substr.assuming: :str($text[33m⏏[31m):len(Inf);[0m␤    expecting any of:␤        postfix␤»

[22:10] <timotimo> oh, yeah

[22:10] <timotimo> r: my $test = lines()[0]; my &textfrom := &substr.assuming: :str($text):len(Inf);

[22:10] <camelia> rakudo 267c54: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable '$text' is not declared. Did you mean '$test'?␤at /tmp/cv3O1J0WVV:1␤------> [32mtextfrom := &substr.assuming: :str($text[33m⏏[31m):len(Inf);[0m␤    expecting any of:␤        postfix␤»

[22:10] <timotimo> r: my $text = lines()[0]; my &textfrom := &substr.assuming: :str($text):len(Inf);

[22:11] <camelia> rakudo 267c54:  ( no output )

[22:11] <timotimo> r: my $text = lines()[0]; my &textfrom := &substr.assuming :str($text):len(Inf);

[22:11] <camelia> rakudo 267c54:  ( no output )

[22:11] <timotimo> apparently it works. maybe because it only has colonpair adverb syntax after it?

[22:12] *** arlinius left
[22:12] *** xilo left
[22:13] *** REPLeffect left
[22:14] <FROGGS> r: my $text = lines()[0]; my &textfrom := &substr.assuming :str($text):len(Inf); textfrom("abc", 2)

[22:14] <camelia> rakudo 267c54: OUTPUT«2 unexpected named parameters passed (str, len)␤  in sub substr at src/gen/CORE.setting:2551␤  in sub CURRIED at src/gen/CORE.setting:2069␤  in block  at /tmp/EeF9hfgXJh:1␤␤»

[22:14] <FROGGS> r: my $text = lines()[0]; my &textfrom := &substr.assuming: :str($text):len(Inf); textfrom("abc", 2)

[22:14] <camelia> rakudo 267c54: OUTPUT«Unexpected named parameter 'str' passed␤  in sub substr at src/gen/CORE.setting:2551␤  in sub CURRIED at src/gen/CORE.setting:2069␤  in block  at /tmp/GpiSsqCdp3:1␤␤»

[22:14] <FROGGS> it is not the same

[22:15] <timotimo> then what is it?

[22:15] <FROGGS> I#m not sure

[22:17] <masak> 'night, #perl6

[22:17] *** tgt joined
[22:18] <lue> "That is, if you pass <a b> as an argument, it will bind as a single positional or slice item, but two slurpy items." (S02:3493) Is it just me or is that contradictory?

[22:18] <lue> good ♞ masak o/

[22:19] <dalek> v5: 07924e6 | (Tobias Leich)++ | lib/Perl5/Grammar.nqp:

[22:19] <dalek> v5: make adhoc declared variables our-scoped

[22:19] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/07924e6985

[22:19] <dalek> v5: fa15468 | (Tobias Leich)++ | lib/Perl5/Terms.pm:

[22:19] <dalek> v5: add infix &&=, += and *=

[22:19] <dalek> v5: review: https://github.com/rakudo-p5/v5/commit/fa15468df0

[22:28] <lue> (I believe I understand that sentence now; it was just confusing wording)

[22:31] <FROGGS> lue: then maybe fix it

[22:31] * lue does so

[22:33] <timotimo> FROGGS: are you targetting any specific cpan module at the moment?

[22:34] *** maximone joined
[22:37] <maximone> I have a problem.... when I install a module like NCurses or NativeCall I have always errors on t/03-siple-returns.t:

[22:37] <maximone> current instr.: '' pc 3132 (/opt/rakudo-star-2013.02/install/lib/parrot/4.10.0/languages/perl6/site/lib/Panda.pir:1282) (lib/Panda.pm:87) called from Sub 'throw' pc 333436 (src/gen/CORE.setting.pir:149675) (src/gen/CORE.setting:9303) called from Sub 'die' pc 35346 (src/gen/CORE.setting.pir:14008) (src/gen/CORE.setting:578) called from Sub '' pc 494 (/opt/rakudo-star-2013.02/install/lib/parrot/4.10.0/languages/perl6/site/lib/Panda/Tes

[22:37] *** xilo joined
[22:38] <maximone> :9) called from Sub 'withp6lib' pc 771 (/opt/rakudo-star-2013.02/install/lib/parrot/4.10.0/languages/perl6/site/lib/Panda/Common.pir:345)

[22:38] <maximone> (lib/Panda/Common.pm:31) called from Sub '' pc 352 (/opt/rakudo-star-2013.02/install/lib/parrot/4.10.0/languages/perl6/site/lib/Panda/Tester.pir:205) (lib/Panda/Tester.pm:7)

[22:38] <maximone> called from Sub '' pc 290 (/opt/rakudo-star-2013.02/install/lib/parrot/4.10.0/languages/perl6/site/lib/Panda/Tester.pir:175) (lib/Panda/Tester.pm:6) called from Sub 'indir' pc 389 (/opt/rakudo-star-2013.02/install/lib/parrot/4.10.0/languages/perl6/site/lib/Panda/Common.pir:224) (lib/Panda/Common.pm:13)

[22:38] <maximone> etc etc..

[22:39] <maximone> How can I resolve this?

[22:39] <dalek> specs: 465ec29 | lue++ | S02-bits.pod:

[22:39] <dalek> specs: [S02] Clarified quotewords being bound to parameters

[22:39] <dalek> specs: 

[22:39] <dalek> specs: The sentence on how a quoteword is flattened or sliced when bound to a

[22:39] <dalek> specs: parameter is a bit clearer now.

[22:39] <dalek> specs: review: https://github.com/perl6/specs/commit/465ec29646

[22:41] <maximone> So I must download a new version of rakudo star? Sorry but I'm a newbie

[22:42] *** gfldex_ is now known as gfldex

[22:44] *** ajr_ left
[22:46] <tadzik> maximone: which version is that/

[22:46] <tadzik> also, please don't paste on a channel; use gist.github.com for example

[22:46] <tadzik> it's always safer to tray the latest version

[22:48] <maximone> ok thank you for the advice. I wil use github and download the latest version.

[22:49] <tadzik> is there any reason why you were using an older one?

[22:50] * lue guesses package manager, judging by the use of /opt

[22:51] *** prevost left
[22:51] <maximone> I downloaded it from the rakudo website. The latest post was that the version 2013.2.1 was the latest, "useful and usable" version

[22:53] <geekosaur> I think that may be it; they're still clearing up some build issues before releasing an updated one

[22:55] <maximone> The post was in 24/02/2013

[22:55] <timotimo> maximone: you missed to paste the actual error

[22:57] <maximone> tadzik said me to not paste. I will use gist.github.com. When I will find how to use it. I've never use it.

[22:57] <timotimo> just copy the text in there and click "create public gist" or "...secret..." on the bottom right

[22:58] <timotimo> then copy-paste the url from the address bar

[22:58] <maximone> Ok

[23:01] <maximone> timotimo: the address is https://gist.github.com/anonymous/5631621

[23:03] <timotimo> ah, uh-huh

[23:03] *** gdey_ joined
[23:03] <timotimo> i wonder why it fails

[23:04] <timotimo> but if you're willing to try to go on, why not panda install NativeCall --no-tests or whatever the flag may be

[23:05] *** mucker left
[23:05] <maximone> Ok, but is there a log file for the errors in panda?

[23:07] <dalek> rakudo/nom: 1a9b0da | dagurval++ | src/core/IO.pm:

[23:07] <dalek> rakudo/nom: Added slurp(IO::Handle... support

[23:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1a9b0da7e0

[23:07] <dalek> rakudo/nom: e4cb829 | dagurval++ | t/spectest.data:

[23:07] <dalek> rakudo/nom: added S32-io/spurt.t

[23:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e4cb829151

[23:07] <dalek> rakudo/nom: 5fa040f | dagurval++ | src/core/IO.pm:

[23:07] <dalek> rakudo/nom: Moved spurt into methods in IO::Handle

[23:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5fa040fb7b

[23:07] <dalek> rakudo/nom: a50c2ef | (Brent Laabs)++ | / (2 files):

[23:07] <dalek> rakudo/nom: Merge pull request #157 from dagurval/IO-spurt

[23:07] <dalek> rakudo/nom: 

[23:07] <dalek> rakudo/nom: Added spurt(IO::Handle... support

[23:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a50c2ef76f

[23:08] *** gdey left
[23:08] <timotimo> i don't think there is, but you can manually clone the repository (it's on github.com/jnthn/zavolaj) and run the tests yourself by just running perl6 t/blah.t

[23:09] <timotimo> big sigh, i wish proper EXPORT sub support would make it into this compiler release

[23:10] <maximone> Thank you timotimo I will try

[23:10] *** arlinius joined
[23:12] <Tene> timotimo: s/wish/will write patches adding/

[23:12] <timotimo> Tene: it's *almost* there, but i have no idea why it doesn't work properly

[23:13] <timotimo> that's why my ADT module can't even hope to get into the Star distribution

[23:16] *** berekuk left
[23:17] *** berekuk joined
[23:17] *** jerome__ joined
[23:32] *** gdey_ left
[23:34] *** gdey joined
[23:35] *** gdey left
[23:39] <japhb_> \o/  # nqp-jvm works for me on nqp/master!

[23:39] <tadzik> woo :)

[23:39] <tadzik> is rak-jvm-support merged?

[23:39] <japhb_> jnthn++ for 3a9be10a

[23:40] <tadzik> iEnsure :)

[23:40] <japhb_> tadzik, I don't think so; I think it was just that one commit

[23:41] <tadzik> hm

[23:41] <tadzik> g diff rak-jvm-support..master | wc -l

[23:41] <tadzik> 135361

[23:41] <tadzik> yeah, not yet :)

[23:41] <japhb_> tadzik, aside from refactoring, is there anything from a user perspective to be aware of WRT the panda changes merged in the last week or so?

[23:42] <tadzik> japhb_: there shouldn't be

[23:42] <japhb_> OK cool.

[23:42] <tadzik> I hope there are no user-visible changes

[23:42] <tadzik> maybe something regarding messages printed out and dependency resolution

[23:42] <tadzik> but nothing significant

[23:42] *** gdey joined
[23:42] *** gdey left
[23:42] <japhb_> Has anything changed about module compiling/loading/handling in Rakudo in the last few weeks?

[23:42] *** gdey joined
[23:43] <japhb_> What changed about dependency resolution?  Was it just the part about only considering .pm[6] files?

[23:44] <tadzik> well, there was a bug recently, that if A depended on B and C, and both B and C depended on D, then D would get installed twice

[23:44] <tadzik> or something like this

[23:44] <japhb_> Oh heh, gotcha.

[23:44] <tadzik> I made panda figure out all the necessary deps upfront and make sure they're not redundant

[23:45] *** sdo joined
[23:45] <sdo> hello

[23:46] <sorear> hello

[23:47] <timotimo> good day

[23:47] <sdo> in perl 6 I have an array s.a my @a="1"=>1,"b b"=>3; and I print say @a>>.key ; say @a>>.keys; I have the same output. Is there a difference between .key and .keys   ?

[23:48] <sdo> sorear and timotimo hello

[23:48] <timotimo> The .keys method also returns the keys of all existing elements. For a multidimensional array each key is a list containing one value for each dimension. # i'll just paste from the spec

[23:50] <timotimo> .key is apparently a method for Enum and Pair and friends

[23:50] <timotimo> so i suppose the >>.keys would evaluate for the whole array and the >>.key for each entry in the array

[23:51] <flussence> no, >>.keys would just typecast each element of the array to a list and then call List.keys on it.

[23:52] <timotimo> ah, that could be, too.

[23:53] <timotimo> r: my @a = "1"=>1, "b b"=>3; @a>>.keys.gist.say;

[23:53] <camelia> rakudo a50c2e: OUTPUT«1 b b␤»

[23:53] <timotimo> r: my @a = "1"=>1, "b b"=>3; @a>>.keys.perl.say;

[23:53] <camelia> rakudo a50c2e: OUTPUT«(("1",).list, ("b b",).list)␤»

[23:53] <timotimo> indeed you were right.

[23:55] *** sdo left
